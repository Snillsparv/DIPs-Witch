
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#endif
}

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f8fa 	bl	200001fc <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:
void init_app( void ) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*portModer = 0x55555555;
20000014:	4b05      	ldr	r3, [pc, #20]	; (2000002c <init_app+0x1c>)
20000016:	4a06      	ldr	r2, [pc, #24]	; (20000030 <init_app+0x20>)
20000018:	601a      	str	r2, [r3, #0]
	set_up_DIL();
2000001a:	f003 fe75 	bl	20003d08 <set_up_DIL>
	graphic_initialize();
2000001e:	f003 f975 	bl	2000330c <graphic_initialize>
	graphic_clear_screen();
20000022:	f003 f9aa 	bl	2000337a <graphic_clear_screen>
}
20000026:	46c0      	nop			; (mov r8, r8)
20000028:	46bd      	mov	sp, r7
2000002a:	bd80      	pop	{r7, pc}
2000002c:	40021000 	andmi	r1, r2, r0
20000030:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000034 <initSprites>:
sprite tempTitleLight;
sprite tempPressBlack;
sprite tempPressGray;
sprite tempPressLight;

void initSprites( void ) {
20000034:	b580      	push	{r7, lr}
20000036:	b08a      	sub	sp, #40	; 0x28
20000038:	af00      	add	r7, sp, #0
	sprite *monsterPointer = &tempMonster;
2000003a:	4b49      	ldr	r3, [pc, #292]	; (20000160 <initSprites+0x12c>)
2000003c:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(monsterPointer, monster_black_bits, monster_black_width, monster_black_height);
2000003e:	4949      	ldr	r1, [pc, #292]	; (20000164 <initSprites+0x130>)
20000040:	6a78      	ldr	r0, [r7, #36]	; 0x24
20000042:	231e      	movs	r3, #30
20000044:	221e      	movs	r2, #30
20000046:	f003 fe4b 	bl	20003ce0 <load_sprite>
	monster = monsterPointer;
2000004a:	4b47      	ldr	r3, [pc, #284]	; (20000168 <initSprites+0x134>)
2000004c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000004e:	601a      	str	r2, [r3, #0]
	
	sprite *monsterPointer2 = &tempMonsterLight;
20000050:	4b46      	ldr	r3, [pc, #280]	; (2000016c <initSprites+0x138>)
20000052:	623b      	str	r3, [r7, #32]
	load_sprite(monsterPointer2, monster_light_bits, monster_light_width, monster_light_height);
20000054:	4946      	ldr	r1, [pc, #280]	; (20000170 <initSprites+0x13c>)
20000056:	6a38      	ldr	r0, [r7, #32]
20000058:	231e      	movs	r3, #30
2000005a:	221e      	movs	r2, #30
2000005c:	f003 fe40 	bl	20003ce0 <load_sprite>
	monsterLight = monsterPointer2;
20000060:	4b44      	ldr	r3, [pc, #272]	; (20000174 <initSprites+0x140>)
20000062:	6a3a      	ldr	r2, [r7, #32]
20000064:	601a      	str	r2, [r3, #0]

	sprite *monsterPointer3 = &tempMonsterGray;
20000066:	4b44      	ldr	r3, [pc, #272]	; (20000178 <initSprites+0x144>)
20000068:	61fb      	str	r3, [r7, #28]
	load_sprite(monsterPointer3, monster_gray_bits, monster_gray_width, monster_gray_height);
2000006a:	4944      	ldr	r1, [pc, #272]	; (2000017c <initSprites+0x148>)
2000006c:	69f8      	ldr	r0, [r7, #28]
2000006e:	231e      	movs	r3, #30
20000070:	221e      	movs	r2, #30
20000072:	f003 fe35 	bl	20003ce0 <load_sprite>
	monsterGray = monsterPointer3;
20000076:	4b42      	ldr	r3, [pc, #264]	; (20000180 <initSprites+0x14c>)
20000078:	69fa      	ldr	r2, [r7, #28]
2000007a:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempBg;
2000007c:	4b41      	ldr	r3, [pc, #260]	; (20000184 <initSprites+0x150>)
2000007e:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer4, bg_bits, bg_width, bg_height);
20000080:	4941      	ldr	r1, [pc, #260]	; (20000188 <initSprites+0x154>)
20000082:	69b8      	ldr	r0, [r7, #24]
20000084:	2340      	movs	r3, #64	; 0x40
20000086:	2280      	movs	r2, #128	; 0x80
20000088:	f003 fe2a 	bl	20003ce0 <load_sprite>
	bg = pointer4;
2000008c:	4b3f      	ldr	r3, [pc, #252]	; (2000018c <initSprites+0x158>)
2000008e:	69ba      	ldr	r2, [r7, #24]
20000090:	601a      	str	r2, [r3, #0]
	
	sprite *pointer5 = &tempCastleBlack;
20000092:	4b3f      	ldr	r3, [pc, #252]	; (20000190 <initSprites+0x15c>)
20000094:	617b      	str	r3, [r7, #20]
	load_sprite(pointer5, castle_black_bits, castle_black_width, castle_black_height);
20000096:	493f      	ldr	r1, [pc, #252]	; (20000194 <initSprites+0x160>)
20000098:	6978      	ldr	r0, [r7, #20]
2000009a:	2340      	movs	r3, #64	; 0x40
2000009c:	2280      	movs	r2, #128	; 0x80
2000009e:	f003 fe1f 	bl	20003ce0 <load_sprite>
	castleBlack = pointer5;
200000a2:	4b3d      	ldr	r3, [pc, #244]	; (20000198 <initSprites+0x164>)
200000a4:	697a      	ldr	r2, [r7, #20]
200000a6:	601a      	str	r2, [r3, #0]
	
	sprite *pointer6 = &tempCastleGray;
200000a8:	4b3c      	ldr	r3, [pc, #240]	; (2000019c <initSprites+0x168>)
200000aa:	613b      	str	r3, [r7, #16]
	load_sprite(pointer6, castle_gray_bits, castle_black_width, castle_black_height);
200000ac:	493c      	ldr	r1, [pc, #240]	; (200001a0 <initSprites+0x16c>)
200000ae:	6938      	ldr	r0, [r7, #16]
200000b0:	2340      	movs	r3, #64	; 0x40
200000b2:	2280      	movs	r2, #128	; 0x80
200000b4:	f003 fe14 	bl	20003ce0 <load_sprite>
	castleGray = pointer6;
200000b8:	4b3a      	ldr	r3, [pc, #232]	; (200001a4 <initSprites+0x170>)
200000ba:	693a      	ldr	r2, [r7, #16]
200000bc:	601a      	str	r2, [r3, #0]
	
	sprite *pointer7 = &tempCastleLight;
200000be:	4b3a      	ldr	r3, [pc, #232]	; (200001a8 <initSprites+0x174>)
200000c0:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer7, castle_light_bits, castle_black_width, castle_black_height);
200000c2:	493a      	ldr	r1, [pc, #232]	; (200001ac <initSprites+0x178>)
200000c4:	68f8      	ldr	r0, [r7, #12]
200000c6:	2340      	movs	r3, #64	; 0x40
200000c8:	2280      	movs	r2, #128	; 0x80
200000ca:	f003 fe09 	bl	20003ce0 <load_sprite>
	castleLight = pointer7;
200000ce:	4b38      	ldr	r3, [pc, #224]	; (200001b0 <initSprites+0x17c>)
200000d0:	68fa      	ldr	r2, [r7, #12]
200000d2:	601a      	str	r2, [r3, #0]
	
	sprite *pointer8 = &tempTitleLight;
200000d4:	4b37      	ldr	r3, [pc, #220]	; (200001b4 <initSprites+0x180>)
200000d6:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer8, title_light_bits, title_black_width, title_black_height);
200000d8:	4937      	ldr	r1, [pc, #220]	; (200001b8 <initSprites+0x184>)
200000da:	68b8      	ldr	r0, [r7, #8]
200000dc:	231e      	movs	r3, #30
200000de:	2232      	movs	r2, #50	; 0x32
200000e0:	f003 fdfe 	bl	20003ce0 <load_sprite>
	titleLight = pointer8;
200000e4:	4b35      	ldr	r3, [pc, #212]	; (200001bc <initSprites+0x188>)
200000e6:	68ba      	ldr	r2, [r7, #8]
200000e8:	601a      	str	r2, [r3, #0]
	sprite *pointer9 = &tempTitleGray;
200000ea:	4b35      	ldr	r3, [pc, #212]	; (200001c0 <initSprites+0x18c>)
200000ec:	607b      	str	r3, [r7, #4]
	load_sprite(pointer9, title_gray_bits, title_black_width, title_black_height);
200000ee:	4935      	ldr	r1, [pc, #212]	; (200001c4 <initSprites+0x190>)
200000f0:	6878      	ldr	r0, [r7, #4]
200000f2:	231e      	movs	r3, #30
200000f4:	2232      	movs	r2, #50	; 0x32
200000f6:	f003 fdf3 	bl	20003ce0 <load_sprite>
	titleGray = pointer9;
200000fa:	4b33      	ldr	r3, [pc, #204]	; (200001c8 <initSprites+0x194>)
200000fc:	687a      	ldr	r2, [r7, #4]
200000fe:	601a      	str	r2, [r3, #0]
	sprite *pointer10 = &tempTitleBlack;
20000100:	4b32      	ldr	r3, [pc, #200]	; (200001cc <initSprites+0x198>)
20000102:	603b      	str	r3, [r7, #0]
	load_sprite(pointer10, title_black_bits, title_black_width, title_black_height);
20000104:	4932      	ldr	r1, [pc, #200]	; (200001d0 <initSprites+0x19c>)
20000106:	6838      	ldr	r0, [r7, #0]
20000108:	231e      	movs	r3, #30
2000010a:	2232      	movs	r2, #50	; 0x32
2000010c:	f003 fde8 	bl	20003ce0 <load_sprite>
	titleBlack = pointer10;	
20000110:	4b30      	ldr	r3, [pc, #192]	; (200001d4 <initSprites+0x1a0>)
20000112:	683a      	ldr	r2, [r7, #0]
20000114:	601a      	str	r2, [r3, #0]
	
	pointer8 = &tempPressLight;
20000116:	4b30      	ldr	r3, [pc, #192]	; (200001d8 <initSprites+0x1a4>)
20000118:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer8, press_light_bits, press_black_width, press_black_height);
2000011a:	4930      	ldr	r1, [pc, #192]	; (200001dc <initSprites+0x1a8>)
2000011c:	68b8      	ldr	r0, [r7, #8]
2000011e:	2323      	movs	r3, #35	; 0x23
20000120:	223c      	movs	r2, #60	; 0x3c
20000122:	f003 fddd 	bl	20003ce0 <load_sprite>
	pressLight = pointer8;
20000126:	4b2e      	ldr	r3, [pc, #184]	; (200001e0 <initSprites+0x1ac>)
20000128:	68ba      	ldr	r2, [r7, #8]
2000012a:	601a      	str	r2, [r3, #0]
	pointer9 = &tempPressGray;
2000012c:	4b2d      	ldr	r3, [pc, #180]	; (200001e4 <initSprites+0x1b0>)
2000012e:	607b      	str	r3, [r7, #4]
	load_sprite(pointer9, press_gray_bits, press_black_width, press_black_height);
20000130:	492d      	ldr	r1, [pc, #180]	; (200001e8 <initSprites+0x1b4>)
20000132:	6878      	ldr	r0, [r7, #4]
20000134:	2323      	movs	r3, #35	; 0x23
20000136:	223c      	movs	r2, #60	; 0x3c
20000138:	f003 fdd2 	bl	20003ce0 <load_sprite>
	pressGray = pointer9;
2000013c:	4b2b      	ldr	r3, [pc, #172]	; (200001ec <initSprites+0x1b8>)
2000013e:	687a      	ldr	r2, [r7, #4]
20000140:	601a      	str	r2, [r3, #0]
	pointer10 = &tempPressBlack;
20000142:	4b2b      	ldr	r3, [pc, #172]	; (200001f0 <initSprites+0x1bc>)
20000144:	603b      	str	r3, [r7, #0]
	load_sprite(pointer10, press_black_bits, press_black_width, press_black_height);
20000146:	492b      	ldr	r1, [pc, #172]	; (200001f4 <initSprites+0x1c0>)
20000148:	6838      	ldr	r0, [r7, #0]
2000014a:	2323      	movs	r3, #35	; 0x23
2000014c:	223c      	movs	r2, #60	; 0x3c
2000014e:	f003 fdc7 	bl	20003ce0 <load_sprite>
	pressBlack = pointer10;	
20000152:	4b29      	ldr	r3, [pc, #164]	; (200001f8 <initSprites+0x1c4>)
20000154:	683a      	ldr	r2, [r7, #0]
20000156:	601a      	str	r2, [r3, #0]
	
	
}
20000158:	46c0      	nop			; (mov r8, r8)
2000015a:	46bd      	mov	sp, r7
2000015c:	b00a      	add	sp, #40	; 0x28
2000015e:	bd80      	pop	{r7, pc}
20000160:	20004830 	andcs	r4, r0, r0, lsr r8
20000164:	200070b4 	strhcs	r7, [r0], -r4
20000168:	20004804 	andcs	r4, r0, r4, lsl #16
2000016c:	20004888 	andcs	r4, r0, r8, lsl #17
20000170:	2000712c 	andcs	r7, r0, ip, lsr #2
20000174:	200048b0 			; <UNDEFINED> instruction: 0x200048b0
20000178:	20004850 	andcs	r4, r0, r0, asr r8
2000017c:	200071a4 	andcs	r7, r0, r4, lsr #3
20000180:	200048c4 	andcs	r4, r0, r4, asr #17
20000184:	200048c8 	andcs	r4, r0, r8, asr #17
20000188:	200083e0 	andcs	r8, r0, r0, ror #7
2000018c:	2000484c 	andcs	r4, r0, ip, asr #16
20000190:	20004808 	andcs	r4, r0, r8, lsl #16
20000194:	20007564 	andcs	r7, r0, r4, ror #10
20000198:	2000482c 	andcs	r4, r0, ip, lsr #16
2000019c:	200048a4 	andcs	r4, r0, r4, lsr #17
200001a0:	20007964 	andcs	r7, r0, r4, ror #18
200001a4:	200048b8 			; <UNDEFINED> instruction: 0x200048b8
200001a8:	20004878 	andcs	r4, r0, r8, ror r8
200001ac:	20007d64 	andcs	r7, r0, r4, ror #26
200001b0:	20004868 	andcs	r4, r0, r8, ror #16
200001b4:	2000485c 	andcs	r4, r0, ip, asr r8
200001b8:	20008164 	andcs	r8, r0, r4, ror #2
200001bc:	200048b4 			; <UNDEFINED> instruction: 0x200048b4
200001c0:	20004820 	andcs	r4, r0, r0, lsr #16
200001c4:	20008238 	andcs	r8, r0, r8, lsr r2
200001c8:	200048a0 	andcs	r4, r0, r0, lsr #17
200001cc:	20004840 	andcs	r4, r0, r0, asr #16
200001d0:	2000830c 	andcs	r8, r0, ip, lsl #6
200001d4:	200048d4 	ldrdcs	r4, [r0], -r4	; <UNPREDICTABLE>
200001d8:	2000486c 	andcs	r4, r0, ip, ror #16
200001dc:	20007334 	andcs	r7, r0, r4, lsr r3
200001e0:	2000483c 	andcs	r4, r0, ip, lsr r8
200001e4:	20004814 	andcs	r4, r0, r4, lsl r8
200001e8:	2000744c 	andcs	r7, r0, ip, asr #8
200001ec:	20004884 	andcs	r4, r0, r4, lsl #17
200001f0:	20004894 	mulcs	r0, r4, r8
200001f4:	2000721c 	andcs	r7, r0, ip, lsl r2
200001f8:	200048c0 	andcs	r4, r0, r0, asr #17

200001fc <main>:
	
int counter = 0;
int current_screen = START_SCREEN;
void main(void)
{
200001fc:	b590      	push	{r4, r7, lr}
200001fe:	4cfd      	ldr	r4, [pc, #1012]	; (200005f4 <main+0x3f8>)
20000200:	44a5      	add	sp, r4
20000202:	af00      	add	r7, sp, #0
	
	init_app();	
20000204:	f7ff ff04 	bl	20000010 <init_app>
	initSprites();
20000208:	f7ff ff14 	bl	20000034 <initSprites>
	
	GameObject monsterObj;
	Image monsterImage;
	Image monsterImages[] = {monsterImage};
2000020c:	4bfa      	ldr	r3, [pc, #1000]	; (200005f8 <main+0x3fc>)
2000020e:	18fb      	adds	r3, r7, r3
20000210:	228a      	movs	r2, #138	; 0x8a
20000212:	00d2      	lsls	r2, r2, #3
20000214:	18ba      	adds	r2, r7, r2
20000216:	ca13      	ldmia	r2!, {r0, r1, r4}
20000218:	c313      	stmia	r3!, {r0, r1, r4}
	monsterObj.images = monsterImages;
2000021a:	4bf8      	ldr	r3, [pc, #992]	; (200005fc <main+0x400>)
2000021c:	18fb      	adds	r3, r7, r3
2000021e:	4af6      	ldr	r2, [pc, #984]	; (200005f8 <main+0x3fc>)
20000220:	18ba      	adds	r2, r7, r2
20000222:	601a      	str	r2, [r3, #0]
	load_image(&monsterObj.images[0], monster, monsterGray, monsterLight);
20000224:	4bf5      	ldr	r3, [pc, #980]	; (200005fc <main+0x400>)
20000226:	18fb      	adds	r3, r7, r3
20000228:	6818      	ldr	r0, [r3, #0]
2000022a:	4bf5      	ldr	r3, [pc, #980]	; (20000600 <main+0x404>)
2000022c:	6819      	ldr	r1, [r3, #0]
2000022e:	4bf5      	ldr	r3, [pc, #980]	; (20000604 <main+0x408>)
20000230:	681a      	ldr	r2, [r3, #0]
20000232:	4bf5      	ldr	r3, [pc, #980]	; (20000608 <main+0x40c>)
20000234:	681b      	ldr	r3, [r3, #0]
20000236:	f003 fd3f 	bl	20003cb8 <load_image>
	monsterObj.xPos = 30;
2000023a:	4bf0      	ldr	r3, [pc, #960]	; (200005fc <main+0x400>)
2000023c:	18fb      	adds	r3, r7, r3
2000023e:	221e      	movs	r2, #30
20000240:	605a      	str	r2, [r3, #4]
	monsterObj.yPos = 4;
20000242:	4bee      	ldr	r3, [pc, #952]	; (200005fc <main+0x400>)
20000244:	18fb      	adds	r3, r7, r3
20000246:	2204      	movs	r2, #4
20000248:	609a      	str	r2, [r3, #8]
	monsterObj.current_frame = 0;
2000024a:	4bec      	ldr	r3, [pc, #944]	; (200005fc <main+0x400>)
2000024c:	18fb      	adds	r3, r7, r3
2000024e:	2200      	movs	r2, #0
20000250:	615a      	str	r2, [r3, #20]
	monsterObj.update = playerUpdate;
20000252:	4bea      	ldr	r3, [pc, #936]	; (200005fc <main+0x400>)
20000254:	18fb      	adds	r3, r7, r3
20000256:	4aed      	ldr	r2, [pc, #948]	; (2000060c <main+0x410>)
20000258:	60da      	str	r2, [r3, #12]
	
	GameObject titleObj;
	Image titleImage;
	Image titleImages[] = {titleImage};
2000025a:	2381      	movs	r3, #129	; 0x81
2000025c:	00db      	lsls	r3, r3, #3
2000025e:	18fb      	adds	r3, r7, r3
20000260:	4aeb      	ldr	r2, [pc, #940]	; (20000610 <main+0x414>)
20000262:	18ba      	adds	r2, r7, r2
20000264:	ca13      	ldmia	r2!, {r0, r1, r4}
20000266:	c313      	stmia	r3!, {r0, r1, r4}
	titleObj.images = titleImages;
20000268:	2384      	movs	r3, #132	; 0x84
2000026a:	00db      	lsls	r3, r3, #3
2000026c:	18fb      	adds	r3, r7, r3
2000026e:	2281      	movs	r2, #129	; 0x81
20000270:	00d2      	lsls	r2, r2, #3
20000272:	18ba      	adds	r2, r7, r2
20000274:	601a      	str	r2, [r3, #0]
	load_image(&titleObj.images[0], titleBlack, titleGray, titleLight);
20000276:	2384      	movs	r3, #132	; 0x84
20000278:	00db      	lsls	r3, r3, #3
2000027a:	18fb      	adds	r3, r7, r3
2000027c:	6818      	ldr	r0, [r3, #0]
2000027e:	4be5      	ldr	r3, [pc, #916]	; (20000614 <main+0x418>)
20000280:	6819      	ldr	r1, [r3, #0]
20000282:	4be5      	ldr	r3, [pc, #916]	; (20000618 <main+0x41c>)
20000284:	681a      	ldr	r2, [r3, #0]
20000286:	4be5      	ldr	r3, [pc, #916]	; (2000061c <main+0x420>)
20000288:	681b      	ldr	r3, [r3, #0]
2000028a:	f003 fd15 	bl	20003cb8 <load_image>
	titleObj.xPos = 1;
2000028e:	2384      	movs	r3, #132	; 0x84
20000290:	00db      	lsls	r3, r3, #3
20000292:	18fb      	adds	r3, r7, r3
20000294:	2201      	movs	r2, #1
20000296:	605a      	str	r2, [r3, #4]
	titleObj.yPos = -40;
20000298:	2384      	movs	r3, #132	; 0x84
2000029a:	00db      	lsls	r3, r3, #3
2000029c:	18fb      	adds	r3, r7, r3
2000029e:	2228      	movs	r2, #40	; 0x28
200002a0:	4252      	negs	r2, r2
200002a2:	609a      	str	r2, [r3, #8]
	titleObj.current_frame = 0;
200002a4:	2384      	movs	r3, #132	; 0x84
200002a6:	00db      	lsls	r3, r3, #3
200002a8:	18fb      	adds	r3, r7, r3
200002aa:	2200      	movs	r2, #0
200002ac:	615a      	str	r2, [r3, #20]
	
	GameObject pressObj;
	Image pressImage;
	Image pressImages[] = {pressImage};
200002ae:	23f3      	movs	r3, #243	; 0xf3
200002b0:	009b      	lsls	r3, r3, #2
200002b2:	18fb      	adds	r3, r7, r3
200002b4:	22f6      	movs	r2, #246	; 0xf6
200002b6:	0092      	lsls	r2, r2, #2
200002b8:	18ba      	adds	r2, r7, r2
200002ba:	ca13      	ldmia	r2!, {r0, r1, r4}
200002bc:	c313      	stmia	r3!, {r0, r1, r4}
	pressObj.images = pressImages;
200002be:	23f9      	movs	r3, #249	; 0xf9
200002c0:	009b      	lsls	r3, r3, #2
200002c2:	18fb      	adds	r3, r7, r3
200002c4:	22f3      	movs	r2, #243	; 0xf3
200002c6:	0092      	lsls	r2, r2, #2
200002c8:	18ba      	adds	r2, r7, r2
200002ca:	601a      	str	r2, [r3, #0]
	load_image(&pressObj.images[0], pressBlack, pressLight, pressGray);
200002cc:	23f9      	movs	r3, #249	; 0xf9
200002ce:	009b      	lsls	r3, r3, #2
200002d0:	18fb      	adds	r3, r7, r3
200002d2:	6818      	ldr	r0, [r3, #0]
200002d4:	4bd2      	ldr	r3, [pc, #840]	; (20000620 <main+0x424>)
200002d6:	6819      	ldr	r1, [r3, #0]
200002d8:	4bd2      	ldr	r3, [pc, #840]	; (20000624 <main+0x428>)
200002da:	681a      	ldr	r2, [r3, #0]
200002dc:	4bd2      	ldr	r3, [pc, #840]	; (20000628 <main+0x42c>)
200002de:	681b      	ldr	r3, [r3, #0]
200002e0:	f003 fcea 	bl	20003cb8 <load_image>
	pressObj.xPos = 65-30;
200002e4:	23f9      	movs	r3, #249	; 0xf9
200002e6:	009b      	lsls	r3, r3, #2
200002e8:	18fb      	adds	r3, r7, r3
200002ea:	2223      	movs	r2, #35	; 0x23
200002ec:	605a      	str	r2, [r3, #4]
	pressObj.yPos = 29-15;
200002ee:	23f9      	movs	r3, #249	; 0xf9
200002f0:	009b      	lsls	r3, r3, #2
200002f2:	18fb      	adds	r3, r7, r3
200002f4:	220e      	movs	r2, #14
200002f6:	609a      	str	r2, [r3, #8]
	pressObj.current_frame = 0;
200002f8:	23f9      	movs	r3, #249	; 0xf9
200002fa:	009b      	lsls	r3, r3, #2
200002fc:	18fb      	adds	r3, r7, r3
200002fe:	2200      	movs	r2, #0
20000300:	615a      	str	r2, [r3, #20]
	
	GameObject castleObj;
	Image castleImage;
	Image castleImages[] = {castleImage};
20000302:	4bca      	ldr	r3, [pc, #808]	; (2000062c <main+0x430>)
20000304:	2294      	movs	r2, #148	; 0x94
20000306:	00d2      	lsls	r2, r2, #3
20000308:	18ba      	adds	r2, r7, r2
2000030a:	18d1      	adds	r1, r2, r3
2000030c:	4bc8      	ldr	r3, [pc, #800]	; (20000630 <main+0x434>)
2000030e:	2294      	movs	r2, #148	; 0x94
20000310:	00d2      	lsls	r2, r2, #3
20000312:	18ba      	adds	r2, r7, r2
20000314:	18d2      	adds	r2, r2, r3
20000316:	000b      	movs	r3, r1
20000318:	ca13      	ldmia	r2!, {r0, r1, r4}
2000031a:	c313      	stmia	r3!, {r0, r1, r4}
	castleObj.images = castleImages;
2000031c:	23ea      	movs	r3, #234	; 0xea
2000031e:	009b      	lsls	r3, r3, #2
20000320:	18fb      	adds	r3, r7, r3
20000322:	22e4      	movs	r2, #228	; 0xe4
20000324:	0092      	lsls	r2, r2, #2
20000326:	18ba      	adds	r2, r7, r2
20000328:	601a      	str	r2, [r3, #0]
	load_image(&castleObj.images[0], castleBlack, castleGray, castleLight);
2000032a:	23ea      	movs	r3, #234	; 0xea
2000032c:	009b      	lsls	r3, r3, #2
2000032e:	18fb      	adds	r3, r7, r3
20000330:	6818      	ldr	r0, [r3, #0]
20000332:	4bc0      	ldr	r3, [pc, #768]	; (20000634 <main+0x438>)
20000334:	6819      	ldr	r1, [r3, #0]
20000336:	4bc0      	ldr	r3, [pc, #768]	; (20000638 <main+0x43c>)
20000338:	681a      	ldr	r2, [r3, #0]
2000033a:	4bc0      	ldr	r3, [pc, #768]	; (2000063c <main+0x440>)
2000033c:	681b      	ldr	r3, [r3, #0]
2000033e:	f003 fcbb 	bl	20003cb8 <load_image>
	castleObj.xPos = 1;
20000342:	23ea      	movs	r3, #234	; 0xea
20000344:	009b      	lsls	r3, r3, #2
20000346:	18fb      	adds	r3, r7, r3
20000348:	2201      	movs	r2, #1
2000034a:	605a      	str	r2, [r3, #4]
	castleObj.yPos = 1;
2000034c:	23ea      	movs	r3, #234	; 0xea
2000034e:	009b      	lsls	r3, r3, #2
20000350:	18fb      	adds	r3, r7, r3
20000352:	2201      	movs	r2, #1
20000354:	609a      	str	r2, [r3, #8]
	castleObj.current_frame = 0;
20000356:	23ea      	movs	r3, #234	; 0xea
20000358:	009b      	lsls	r3, r3, #2
2000035a:	18fb      	adds	r3, r7, r3
2000035c:	2200      	movs	r2, #0
2000035e:	615a      	str	r2, [r3, #20]
	
	GameObject indoors;
	init_indoors( &indoors );
20000360:	23db      	movs	r3, #219	; 0xdb
20000362:	009b      	lsls	r3, r3, #2
20000364:	18fb      	adds	r3, r7, r3
20000366:	0018      	movs	r0, r3
20000368:	f004 f818 	bl	2000439c <init_indoors>
	indoors.xPos = 1;
2000036c:	4bb4      	ldr	r3, [pc, #720]	; (20000640 <main+0x444>)
2000036e:	2294      	movs	r2, #148	; 0x94
20000370:	00d2      	lsls	r2, r2, #3
20000372:	4694      	mov	ip, r2
20000374:	44bc      	add	ip, r7
20000376:	4463      	add	r3, ip
20000378:	2201      	movs	r2, #1
2000037a:	605a      	str	r2, [r3, #4]
	indoors.yPos = 1;
2000037c:	4bb0      	ldr	r3, [pc, #704]	; (20000640 <main+0x444>)
2000037e:	2294      	movs	r2, #148	; 0x94
20000380:	00d2      	lsls	r2, r2, #3
20000382:	4694      	mov	ip, r2
20000384:	44bc      	add	ip, r7
20000386:	4463      	add	r3, ip
20000388:	2201      	movs	r2, #1
2000038a:	609a      	str	r2, [r3, #8]
	
	GameObject indoors2;
	init_indoors2( &indoors2 );
2000038c:	23d2      	movs	r3, #210	; 0xd2
2000038e:	009b      	lsls	r3, r3, #2
20000390:	18fb      	adds	r3, r7, r3
20000392:	0018      	movs	r0, r3
20000394:	f004 f876 	bl	20004484 <init_indoors2>
	indoors2.xPos = 1;
20000398:	4baa      	ldr	r3, [pc, #680]	; (20000644 <main+0x448>)
2000039a:	2294      	movs	r2, #148	; 0x94
2000039c:	00d2      	lsls	r2, r2, #3
2000039e:	4694      	mov	ip, r2
200003a0:	44bc      	add	ip, r7
200003a2:	4463      	add	r3, ip
200003a4:	2201      	movs	r2, #1
200003a6:	605a      	str	r2, [r3, #4]
	indoors2.yPos = 1;
200003a8:	4ba6      	ldr	r3, [pc, #664]	; (20000644 <main+0x448>)
200003aa:	2294      	movs	r2, #148	; 0x94
200003ac:	00d2      	lsls	r2, r2, #3
200003ae:	4694      	mov	ip, r2
200003b0:	44bc      	add	ip, r7
200003b2:	4463      	add	r3, ip
200003b4:	2201      	movs	r2, #1
200003b6:	609a      	str	r2, [r3, #8]
	
	GameObject trophy;
	init_trophy( &trophy );
200003b8:	23c9      	movs	r3, #201	; 0xc9
200003ba:	009b      	lsls	r3, r3, #2
200003bc:	18fb      	adds	r3, r7, r3
200003be:	0018      	movs	r0, r3
200003c0:	f004 f8d4 	bl	2000456c <init_trophy>

	
	GameObject hair;
	init_flame(&hair);
200003c4:	23c0      	movs	r3, #192	; 0xc0
200003c6:	009b      	lsls	r3, r3, #2
200003c8:	18fb      	adds	r3, r7, r3
200003ca:	0018      	movs	r0, r3
200003cc:	f002 fa3a 	bl	20002844 <init_flame>
	hair.xPos = 40;
200003d0:	4b9d      	ldr	r3, [pc, #628]	; (20000648 <main+0x44c>)
200003d2:	2294      	movs	r2, #148	; 0x94
200003d4:	00d2      	lsls	r2, r2, #3
200003d6:	4694      	mov	ip, r2
200003d8:	44bc      	add	ip, r7
200003da:	4463      	add	r3, ip
200003dc:	2228      	movs	r2, #40	; 0x28
200003de:	605a      	str	r2, [r3, #4]
	hair.yPos = 10;
200003e0:	4b99      	ldr	r3, [pc, #612]	; (20000648 <main+0x44c>)
200003e2:	2294      	movs	r2, #148	; 0x94
200003e4:	00d2      	lsls	r2, r2, #3
200003e6:	4694      	mov	ip, r2
200003e8:	44bc      	add	ip, r7
200003ea:	4463      	add	r3, ip
200003ec:	220a      	movs	r2, #10
200003ee:	609a      	str	r2, [r3, #8]
	hair.update = gameObjectUpdate;
200003f0:	4b95      	ldr	r3, [pc, #596]	; (20000648 <main+0x44c>)
200003f2:	2294      	movs	r2, #148	; 0x94
200003f4:	00d2      	lsls	r2, r2, #3
200003f6:	4694      	mov	ip, r2
200003f8:	44bc      	add	ip, r7
200003fa:	4463      	add	r3, ip
200003fc:	4a93      	ldr	r2, [pc, #588]	; (2000064c <main+0x450>)
200003fe:	60da      	str	r2, [r3, #12]
	
	GameObject bird;
	init_bird( &bird );
20000400:	23b7      	movs	r3, #183	; 0xb7
20000402:	009b      	lsls	r3, r3, #2
20000404:	18fb      	adds	r3, r7, r3
20000406:	0018      	movs	r0, r3
20000408:	f001 fdc8 	bl	20001f9c <init_bird>
	bird.xPos = 180;
2000040c:	4b90      	ldr	r3, [pc, #576]	; (20000650 <main+0x454>)
2000040e:	2294      	movs	r2, #148	; 0x94
20000410:	00d2      	lsls	r2, r2, #3
20000412:	4694      	mov	ip, r2
20000414:	44bc      	add	ip, r7
20000416:	4463      	add	r3, ip
20000418:	22b4      	movs	r2, #180	; 0xb4
2000041a:	605a      	str	r2, [r3, #4]
	bird.yPos = 40;
2000041c:	4b8c      	ldr	r3, [pc, #560]	; (20000650 <main+0x454>)
2000041e:	2294      	movs	r2, #148	; 0x94
20000420:	00d2      	lsls	r2, r2, #3
20000422:	4694      	mov	ip, r2
20000424:	44bc      	add	ip, r7
20000426:	4463      	add	r3, ip
20000428:	2228      	movs	r2, #40	; 0x28
2000042a:	609a      	str	r2, [r3, #8]
	bird.update = gameObjectUpdate;
2000042c:	4b88      	ldr	r3, [pc, #544]	; (20000650 <main+0x454>)
2000042e:	2294      	movs	r2, #148	; 0x94
20000430:	00d2      	lsls	r2, r2, #3
20000432:	4694      	mov	ip, r2
20000434:	44bc      	add	ip, r7
20000436:	4463      	add	r3, ip
20000438:	4a84      	ldr	r2, [pc, #528]	; (2000064c <main+0x450>)
2000043a:	60da      	str	r2, [r3, #12]
	
	GameObject boom;
	init_boom( &boom );
2000043c:	23ae      	movs	r3, #174	; 0xae
2000043e:	009b      	lsls	r3, r3, #2
20000440:	18fb      	adds	r3, r7, r3
20000442:	0018      	movs	r0, r3
20000444:	f002 fbba 	bl	20002bbc <init_boom>
	boom.update = gameObjectUpdate;
20000448:	4b82      	ldr	r3, [pc, #520]	; (20000654 <main+0x458>)
2000044a:	2294      	movs	r2, #148	; 0x94
2000044c:	00d2      	lsls	r2, r2, #3
2000044e:	4694      	mov	ip, r2
20000450:	44bc      	add	ip, r7
20000452:	4463      	add	r3, ip
20000454:	4a7d      	ldr	r2, [pc, #500]	; (2000064c <main+0x450>)
20000456:	60da      	str	r2, [r3, #12]
	
	GameObject DIP;
	init_DIP( &DIP );
20000458:	23a5      	movs	r3, #165	; 0xa5
2000045a:	009b      	lsls	r3, r3, #2
2000045c:	18fb      	adds	r3, r7, r3
2000045e:	0018      	movs	r0, r3
20000460:	f002 f804 	bl	2000246c <init_DIP>
	DIP.update = DIPUpdate;
20000464:	4b7c      	ldr	r3, [pc, #496]	; (20000658 <main+0x45c>)
20000466:	2294      	movs	r2, #148	; 0x94
20000468:	00d2      	lsls	r2, r2, #3
2000046a:	4694      	mov	ip, r2
2000046c:	44bc      	add	ip, r7
2000046e:	4463      	add	r3, ip
20000470:	4a7a      	ldr	r2, [pc, #488]	; (2000065c <main+0x460>)
20000472:	60da      	str	r2, [r3, #12]
	
	GameObject player;
	init_witch( &player );
20000474:	239c      	movs	r3, #156	; 0x9c
20000476:	009b      	lsls	r3, r3, #2
20000478:	18fb      	adds	r3, r7, r3
2000047a:	0018      	movs	r0, r3
2000047c:	f001 feda 	bl	20002234 <init_witch>
	player.xPos = 3;
20000480:	4b77      	ldr	r3, [pc, #476]	; (20000660 <main+0x464>)
20000482:	2294      	movs	r2, #148	; 0x94
20000484:	00d2      	lsls	r2, r2, #3
20000486:	4694      	mov	ip, r2
20000488:	44bc      	add	ip, r7
2000048a:	4463      	add	r3, ip
2000048c:	2203      	movs	r2, #3
2000048e:	605a      	str	r2, [r3, #4]
	player.yPos = LIMIT_DOWN - 1; //player position
20000490:	4b73      	ldr	r3, [pc, #460]	; (20000660 <main+0x464>)
20000492:	2294      	movs	r2, #148	; 0x94
20000494:	00d2      	lsls	r2, r2, #3
20000496:	4694      	mov	ip, r2
20000498:	44bc      	add	ip, r7
2000049a:	4463      	add	r3, ip
2000049c:	2226      	movs	r2, #38	; 0x26
2000049e:	609a      	str	r2, [r3, #8]
	player.update = playerUpdate;
200004a0:	4b6f      	ldr	r3, [pc, #444]	; (20000660 <main+0x464>)
200004a2:	2294      	movs	r2, #148	; 0x94
200004a4:	00d2      	lsls	r2, r2, #3
200004a6:	4694      	mov	ip, r2
200004a8:	44bc      	add	ip, r7
200004aa:	4463      	add	r3, ip
200004ac:	4a57      	ldr	r2, [pc, #348]	; (2000060c <main+0x410>)
200004ae:	60da      	str	r2, [r3, #12]
	
	GameObject fire2;
	init_fire( &fire2 );
200004b0:	2393      	movs	r3, #147	; 0x93
200004b2:	009b      	lsls	r3, r3, #2
200004b4:	18fb      	adds	r3, r7, r3
200004b6:	0018      	movs	r0, r3
200004b8:	f001 fad6 	bl	20001a68 <init_fire>
	GameObject fire3;
	init_fire( &fire3 );
200004bc:	238a      	movs	r3, #138	; 0x8a
200004be:	009b      	lsls	r3, r3, #2
200004c0:	18fb      	adds	r3, r7, r3
200004c2:	0018      	movs	r0, r3
200004c4:	f001 fad0 	bl	20001a68 <init_fire>
	GameObject fire4;
	init_fire( &fire4 );
200004c8:	2381      	movs	r3, #129	; 0x81
200004ca:	009b      	lsls	r3, r3, #2
200004cc:	18fb      	adds	r3, r7, r3
200004ce:	0018      	movs	r0, r3
200004d0:	f001 faca 	bl	20001a68 <init_fire>
	GameObject fire1;
	init_fire( &fire1 );
200004d4:	23f0      	movs	r3, #240	; 0xf0
200004d6:	005b      	lsls	r3, r3, #1
200004d8:	18fb      	adds	r3, r7, r3
200004da:	0018      	movs	r0, r3
200004dc:	f001 fac4 	bl	20001a68 <init_fire>
	
	GameObject fire1_indoors;
	init_fire( &fire1_indoors );
200004e0:	23de      	movs	r3, #222	; 0xde
200004e2:	005b      	lsls	r3, r3, #1
200004e4:	18fb      	adds	r3, r7, r3
200004e6:	0018      	movs	r0, r3
200004e8:	f001 fabe 	bl	20001a68 <init_fire>
	fire1_indoors.xPos = 50;		//FIRE1_INDO
200004ec:	4b5d      	ldr	r3, [pc, #372]	; (20000664 <main+0x468>)
200004ee:	2294      	movs	r2, #148	; 0x94
200004f0:	00d2      	lsls	r2, r2, #3
200004f2:	4694      	mov	ip, r2
200004f4:	44bc      	add	ip, r7
200004f6:	4463      	add	r3, ip
200004f8:	2232      	movs	r2, #50	; 0x32
200004fa:	605a      	str	r2, [r3, #4]
	fire1_indoors.yPos = 64-12-7;
200004fc:	4b59      	ldr	r3, [pc, #356]	; (20000664 <main+0x468>)
200004fe:	2294      	movs	r2, #148	; 0x94
20000500:	00d2      	lsls	r2, r2, #3
20000502:	4694      	mov	ip, r2
20000504:	44bc      	add	ip, r7
20000506:	4463      	add	r3, ip
20000508:	222d      	movs	r2, #45	; 0x2d
2000050a:	609a      	str	r2, [r3, #8]
	fire1_indoors.update = gameObjectUpdate;
2000050c:	4b55      	ldr	r3, [pc, #340]	; (20000664 <main+0x468>)
2000050e:	2294      	movs	r2, #148	; 0x94
20000510:	00d2      	lsls	r2, r2, #3
20000512:	4694      	mov	ip, r2
20000514:	44bc      	add	ip, r7
20000516:	4463      	add	r3, ip
20000518:	4a4c      	ldr	r2, [pc, #304]	; (2000064c <main+0x450>)
2000051a:	60da      	str	r2, [r3, #12]
	GameObject fire2_indoors;
	init_fire( &fire2_indoors );
2000051c:	23cc      	movs	r3, #204	; 0xcc
2000051e:	005b      	lsls	r3, r3, #1
20000520:	18fb      	adds	r3, r7, r3
20000522:	0018      	movs	r0, r3
20000524:	f001 faa0 	bl	20001a68 <init_fire>
	fire2_indoors.update = gameObjectUpdate;
20000528:	4b4f      	ldr	r3, [pc, #316]	; (20000668 <main+0x46c>)
2000052a:	2294      	movs	r2, #148	; 0x94
2000052c:	00d2      	lsls	r2, r2, #3
2000052e:	4694      	mov	ip, r2
20000530:	44bc      	add	ip, r7
20000532:	4463      	add	r3, ip
20000534:	4a45      	ldr	r2, [pc, #276]	; (2000064c <main+0x450>)
20000536:	60da      	str	r2, [r3, #12]
	GameObject fire3_indoors;
	init_fire( &fire3_indoors );
20000538:	23ba      	movs	r3, #186	; 0xba
2000053a:	005b      	lsls	r3, r3, #1
2000053c:	18fb      	adds	r3, r7, r3
2000053e:	0018      	movs	r0, r3
20000540:	f001 fa92 	bl	20001a68 <init_fire>
	fire3_indoors.update = gameObjectUpdate;
20000544:	4b49      	ldr	r3, [pc, #292]	; (2000066c <main+0x470>)
20000546:	2294      	movs	r2, #148	; 0x94
20000548:	00d2      	lsls	r2, r2, #3
2000054a:	4694      	mov	ip, r2
2000054c:	44bc      	add	ip, r7
2000054e:	4463      	add	r3, ip
20000550:	4a3e      	ldr	r2, [pc, #248]	; (2000064c <main+0x450>)
20000552:	60da      	str	r2, [r3, #12]
	GameObject fires[] = {fire1_indoors, fire2_indoors, fire3_indoors};
20000554:	4b46      	ldr	r3, [pc, #280]	; (20000670 <main+0x474>)
20000556:	2294      	movs	r2, #148	; 0x94
20000558:	00d2      	lsls	r2, r2, #3
2000055a:	18ba      	adds	r2, r7, r2
2000055c:	18d1      	adds	r1, r2, r3
2000055e:	4b41      	ldr	r3, [pc, #260]	; (20000664 <main+0x468>)
20000560:	2294      	movs	r2, #148	; 0x94
20000562:	00d2      	lsls	r2, r2, #3
20000564:	18ba      	adds	r2, r7, r2
20000566:	18d2      	adds	r2, r2, r3
20000568:	000b      	movs	r3, r1
2000056a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000056c:	c313      	stmia	r3!, {r0, r1, r4}
2000056e:	ca13      	ldmia	r2!, {r0, r1, r4}
20000570:	c313      	stmia	r3!, {r0, r1, r4}
20000572:	ca13      	ldmia	r2!, {r0, r1, r4}
20000574:	c313      	stmia	r3!, {r0, r1, r4}
20000576:	4b3e      	ldr	r3, [pc, #248]	; (20000670 <main+0x474>)
20000578:	2294      	movs	r2, #148	; 0x94
2000057a:	00d2      	lsls	r2, r2, #3
2000057c:	4694      	mov	ip, r2
2000057e:	44bc      	add	ip, r7
20000580:	4463      	add	r3, ip
20000582:	4a39      	ldr	r2, [pc, #228]	; (20000668 <main+0x46c>)
20000584:	2194      	movs	r1, #148	; 0x94
20000586:	00c9      	lsls	r1, r1, #3
20000588:	468c      	mov	ip, r1
2000058a:	44bc      	add	ip, r7
2000058c:	4462      	add	r2, ip
2000058e:	3324      	adds	r3, #36	; 0x24
20000590:	ca13      	ldmia	r2!, {r0, r1, r4}
20000592:	c313      	stmia	r3!, {r0, r1, r4}
20000594:	ca13      	ldmia	r2!, {r0, r1, r4}
20000596:	c313      	stmia	r3!, {r0, r1, r4}
20000598:	ca13      	ldmia	r2!, {r0, r1, r4}
2000059a:	c313      	stmia	r3!, {r0, r1, r4}
2000059c:	4b34      	ldr	r3, [pc, #208]	; (20000670 <main+0x474>)
2000059e:	2294      	movs	r2, #148	; 0x94
200005a0:	00d2      	lsls	r2, r2, #3
200005a2:	4694      	mov	ip, r2
200005a4:	44bc      	add	ip, r7
200005a6:	4463      	add	r3, ip
200005a8:	4a30      	ldr	r2, [pc, #192]	; (2000066c <main+0x470>)
200005aa:	2194      	movs	r1, #148	; 0x94
200005ac:	00c9      	lsls	r1, r1, #3
200005ae:	468c      	mov	ip, r1
200005b0:	44bc      	add	ip, r7
200005b2:	4462      	add	r2, ip
200005b4:	3348      	adds	r3, #72	; 0x48
200005b6:	ca13      	ldmia	r2!, {r0, r1, r4}
200005b8:	c313      	stmia	r3!, {r0, r1, r4}
200005ba:	ca13      	ldmia	r2!, {r0, r1, r4}
200005bc:	c313      	stmia	r3!, {r0, r1, r4}
200005be:	ca13      	ldmia	r2!, {r0, r1, r4}
200005c0:	c313      	stmia	r3!, {r0, r1, r4}
	
	
	fire2.xPos = 98;
200005c2:	4b2c      	ldr	r3, [pc, #176]	; (20000674 <main+0x478>)
200005c4:	2294      	movs	r2, #148	; 0x94
200005c6:	00d2      	lsls	r2, r2, #3
200005c8:	4694      	mov	ip, r2
200005ca:	44bc      	add	ip, r7
200005cc:	4463      	add	r3, ip
200005ce:	2262      	movs	r2, #98	; 0x62
200005d0:	605a      	str	r2, [r3, #4]
	fire2.yPos = 26-12;
200005d2:	4b28      	ldr	r3, [pc, #160]	; (20000674 <main+0x478>)
200005d4:	2294      	movs	r2, #148	; 0x94
200005d6:	00d2      	lsls	r2, r2, #3
200005d8:	4694      	mov	ip, r2
200005da:	44bc      	add	ip, r7
200005dc:	4463      	add	r3, ip
200005de:	220e      	movs	r2, #14
200005e0:	609a      	str	r2, [r3, #8]
	fire3.xPos = 115;
200005e2:	4b25      	ldr	r3, [pc, #148]	; (20000678 <main+0x47c>)
200005e4:	2294      	movs	r2, #148	; 0x94
200005e6:	00d2      	lsls	r2, r2, #3
200005e8:	4694      	mov	ip, r2
200005ea:	44bc      	add	ip, r7
200005ec:	4463      	add	r3, ip
200005ee:	2273      	movs	r2, #115	; 0x73
200005f0:	605a      	str	r2, [r3, #4]
200005f2:	e043      	b.n	2000067c <main+0x480>
200005f4:	fffffb5c 			; <UNDEFINED> instruction: 0xfffffb5c
200005f8:	00000444 	andeq	r0, r0, r4, asr #8
200005fc:	0000045c 	andeq	r0, r0, ip, asr r4
20000600:	20004804 	andcs	r4, r0, r4, lsl #16
20000604:	200048c4 	andcs	r4, r0, r4, asr #17
20000608:	200048b0 			; <UNDEFINED> instruction: 0x200048b0
2000060c:	20001b8d 	andcs	r1, r0, sp, lsl #23
20000610:	00000414 	andeq	r0, r0, r4, lsl r4
20000614:	200048d4 	ldrdcs	r4, [r0], -r4	; <UNPREDICTABLE>
20000618:	200048a0 	andcs	r4, r0, r0, lsr #17
2000061c:	200048b4 			; <UNDEFINED> instruction: 0x200048b4
20000620:	200048c0 	andcs	r4, r0, r0, asr #17
20000624:	2000483c 	andcs	r4, r0, ip, lsr r8
20000628:	20004884 	andcs	r4, r0, r4, lsl #17
2000062c:	fffffef0 			; <UNDEFINED> instruction: 0xfffffef0
20000630:	fffffefc 			; <UNDEFINED> instruction: 0xfffffefc
20000634:	2000482c 	andcs	r4, r0, ip, lsr #16
20000638:	200048b8 			; <UNDEFINED> instruction: 0x200048b8
2000063c:	20004868 	andcs	r4, r0, r8, ror #16
20000640:	fffffecc 			; <UNDEFINED> instruction: 0xfffffecc
20000644:	fffffea8 			; <UNDEFINED> instruction: 0xfffffea8
20000648:	fffffe60 			; <UNDEFINED> instruction: 0xfffffe60
2000064c:	2000189d 	mulcs	r0, sp, r8
20000650:	fffffe3c 			; <UNDEFINED> instruction: 0xfffffe3c
20000654:	fffffe18 			; <UNDEFINED> instruction: 0xfffffe18
20000658:	fffffdf4 			; <UNDEFINED> instruction: 0xfffffdf4
2000065c:	2000258d 	andcs	r2, r0, sp, lsl #11
20000660:	fffffdd0 			; <UNDEFINED> instruction: 0xfffffdd0
20000664:	fffffd1c 			; <UNDEFINED> instruction: 0xfffffd1c
20000668:	fffffcf8 			; <UNDEFINED> instruction: 0xfffffcf8
2000066c:	fffffcd4 			; <UNDEFINED> instruction: 0xfffffcd4
20000670:	fffffc68 			; <UNDEFINED> instruction: 0xfffffc68
20000674:	fffffdac 			; <UNDEFINED> instruction: 0xfffffdac
20000678:	fffffd88 			; <UNDEFINED> instruction: 0xfffffd88
	fire3.yPos = 34-12;
2000067c:	4be5      	ldr	r3, [pc, #916]	; (20000a14 <main+0x818>)
2000067e:	2294      	movs	r2, #148	; 0x94
20000680:	00d2      	lsls	r2, r2, #3
20000682:	4694      	mov	ip, r2
20000684:	44bc      	add	ip, r7
20000686:	4463      	add	r3, ip
20000688:	2216      	movs	r2, #22
2000068a:	609a      	str	r2, [r3, #8]
	
	fire1.xPos = 85;
2000068c:	4be2      	ldr	r3, [pc, #904]	; (20000a18 <main+0x81c>)
2000068e:	2294      	movs	r2, #148	; 0x94
20000690:	00d2      	lsls	r2, r2, #3
20000692:	4694      	mov	ip, r2
20000694:	44bc      	add	ip, r7
20000696:	4463      	add	r3, ip
20000698:	2255      	movs	r2, #85	; 0x55
2000069a:	605a      	str	r2, [r3, #4]
	fire1.yPos = 23-12;
2000069c:	4bde      	ldr	r3, [pc, #888]	; (20000a18 <main+0x81c>)
2000069e:	2294      	movs	r2, #148	; 0x94
200006a0:	00d2      	lsls	r2, r2, #3
200006a2:	4694      	mov	ip, r2
200006a4:	44bc      	add	ip, r7
200006a6:	4463      	add	r3, ip
200006a8:	220b      	movs	r2, #11
200006aa:	609a      	str	r2, [r3, #8]
	fire4.xPos = 71;
200006ac:	4bdb      	ldr	r3, [pc, #876]	; (20000a1c <main+0x820>)
200006ae:	2294      	movs	r2, #148	; 0x94
200006b0:	00d2      	lsls	r2, r2, #3
200006b2:	4694      	mov	ip, r2
200006b4:	44bc      	add	ip, r7
200006b6:	4463      	add	r3, ip
200006b8:	2247      	movs	r2, #71	; 0x47
200006ba:	605a      	str	r2, [r3, #4]
	fire4.yPos = 27-11;
200006bc:	4bd7      	ldr	r3, [pc, #860]	; (20000a1c <main+0x820>)
200006be:	2294      	movs	r2, #148	; 0x94
200006c0:	00d2      	lsls	r2, r2, #3
200006c2:	4694      	mov	ip, r2
200006c4:	44bc      	add	ip, r7
200006c6:	4463      	add	r3, ip
200006c8:	2210      	movs	r2, #16
200006ca:	609a      	str	r2, [r3, #8]
	//draw_game_object(&castleObj);
	
	fire2.animation_speed = 2;
200006cc:	4bd4      	ldr	r3, [pc, #848]	; (20000a20 <main+0x824>)
200006ce:	2294      	movs	r2, #148	; 0x94
200006d0:	00d2      	lsls	r2, r2, #3
200006d2:	4694      	mov	ip, r2
200006d4:	44bc      	add	ip, r7
200006d6:	4463      	add	r3, ip
200006d8:	2202      	movs	r2, #2
200006da:	61da      	str	r2, [r3, #28]
	fire3.animation_speed = 2;
200006dc:	4bcd      	ldr	r3, [pc, #820]	; (20000a14 <main+0x818>)
200006de:	2294      	movs	r2, #148	; 0x94
200006e0:	00d2      	lsls	r2, r2, #3
200006e2:	4694      	mov	ip, r2
200006e4:	44bc      	add	ip, r7
200006e6:	4463      	add	r3, ip
200006e8:	2202      	movs	r2, #2
200006ea:	61da      	str	r2, [r3, #28]
	fire1.animation_speed = 2;
200006ec:	4bca      	ldr	r3, [pc, #808]	; (20000a18 <main+0x81c>)
200006ee:	2294      	movs	r2, #148	; 0x94
200006f0:	00d2      	lsls	r2, r2, #3
200006f2:	4694      	mov	ip, r2
200006f4:	44bc      	add	ip, r7
200006f6:	4463      	add	r3, ip
200006f8:	2202      	movs	r2, #2
200006fa:	61da      	str	r2, [r3, #28]
	fire4.animation_speed = 2;
200006fc:	4bc7      	ldr	r3, [pc, #796]	; (20000a1c <main+0x820>)
200006fe:	2294      	movs	r2, #148	; 0x94
20000700:	00d2      	lsls	r2, r2, #3
20000702:	4694      	mov	ip, r2
20000704:	44bc      	add	ip, r7
20000706:	4463      	add	r3, ip
20000708:	2202      	movs	r2, #2
2000070a:	61da      	str	r2, [r3, #28]
	
	fire2.update = gameObjectUpdate;
2000070c:	4bc4      	ldr	r3, [pc, #784]	; (20000a20 <main+0x824>)
2000070e:	2294      	movs	r2, #148	; 0x94
20000710:	00d2      	lsls	r2, r2, #3
20000712:	4694      	mov	ip, r2
20000714:	44bc      	add	ip, r7
20000716:	4463      	add	r3, ip
20000718:	4ac2      	ldr	r2, [pc, #776]	; (20000a24 <main+0x828>)
2000071a:	60da      	str	r2, [r3, #12]
	fire3.update = gameObjectUpdate;
2000071c:	4bbd      	ldr	r3, [pc, #756]	; (20000a14 <main+0x818>)
2000071e:	2294      	movs	r2, #148	; 0x94
20000720:	00d2      	lsls	r2, r2, #3
20000722:	4694      	mov	ip, r2
20000724:	44bc      	add	ip, r7
20000726:	4463      	add	r3, ip
20000728:	4abe      	ldr	r2, [pc, #760]	; (20000a24 <main+0x828>)
2000072a:	60da      	str	r2, [r3, #12]
	fire1.update = gameObjectUpdate;
2000072c:	4bba      	ldr	r3, [pc, #744]	; (20000a18 <main+0x81c>)
2000072e:	2294      	movs	r2, #148	; 0x94
20000730:	00d2      	lsls	r2, r2, #3
20000732:	4694      	mov	ip, r2
20000734:	44bc      	add	ip, r7
20000736:	4463      	add	r3, ip
20000738:	4aba      	ldr	r2, [pc, #744]	; (20000a24 <main+0x828>)
2000073a:	60da      	str	r2, [r3, #12]
	fire4.update = gameObjectUpdate;
2000073c:	4bb7      	ldr	r3, [pc, #732]	; (20000a1c <main+0x820>)
2000073e:	2294      	movs	r2, #148	; 0x94
20000740:	00d2      	lsls	r2, r2, #3
20000742:	4694      	mov	ip, r2
20000744:	44bc      	add	ip, r7
20000746:	4463      	add	r3, ip
20000748:	4ab6      	ldr	r2, [pc, #728]	; (20000a24 <main+0x828>)
2000074a:	60da      	str	r2, [r3, #12]
	SlowText text8;
	SlowText text9;
	SlowText text10;
	SlowText text11;
	SlowText text12;
	init_slow_text(&text_kra, "*KRA!* *KRA!*", "   ", 1);
2000074c:	4ab6      	ldr	r2, [pc, #728]	; (20000a28 <main+0x82c>)
2000074e:	49b7      	ldr	r1, [pc, #732]	; (20000a2c <main+0x830>)
20000750:	23f4      	movs	r3, #244	; 0xf4
20000752:	18f8      	adds	r0, r7, r3
20000754:	2301      	movs	r3, #1
20000756:	f003 fdca 	bl	200042ee <init_slow_text>
	init_slow_text(&text1, "For centuries the", "DILs-witches have", 1);
2000075a:	4ab5      	ldr	r2, [pc, #724]	; (20000a30 <main+0x834>)
2000075c:	49b5      	ldr	r1, [pc, #724]	; (20000a34 <main+0x838>)
2000075e:	23e0      	movs	r3, #224	; 0xe0
20000760:	18f8      	adds	r0, r7, r3
20000762:	2301      	movs	r3, #1
20000764:	f003 fdc3 	bl	200042ee <init_slow_text>
	init_slow_text(&text2, "coiled in fear,", "    ", 1);
20000768:	4ab3      	ldr	r2, [pc, #716]	; (20000a38 <main+0x83c>)
2000076a:	49b4      	ldr	r1, [pc, #720]	; (20000a3c <main+0x840>)
2000076c:	23cc      	movs	r3, #204	; 0xcc
2000076e:	18f8      	adds	r0, r7, r3
20000770:	2301      	movs	r3, #1
20000772:	f003 fdbc 	bl	200042ee <init_slow_text>
	init_slow_text(&text3, "whenever they hear", "that a DIPs-witch", 1);
20000776:	4ab2      	ldr	r2, [pc, #712]	; (20000a40 <main+0x844>)
20000778:	49b2      	ldr	r1, [pc, #712]	; (20000a44 <main+0x848>)
2000077a:	23b8      	movs	r3, #184	; 0xb8
2000077c:	18f8      	adds	r0, r7, r3
2000077e:	2301      	movs	r3, #1
20000780:	f003 fdb5 	bl	200042ee <init_slow_text>
	init_slow_text(&text4, "is near.", "   ", 1);
20000784:	4aa8      	ldr	r2, [pc, #672]	; (20000a28 <main+0x82c>)
20000786:	49b0      	ldr	r1, [pc, #704]	; (20000a48 <main+0x84c>)
20000788:	23a4      	movs	r3, #164	; 0xa4
2000078a:	18f8      	adds	r0, r7, r3
2000078c:	2301      	movs	r3, #1
2000078e:	f003 fdae 	bl	200042ee <init_slow_text>
	init_slow_text(&text5, "So it is quite", "surprising, finding", 1);
20000792:	4aae      	ldr	r2, [pc, #696]	; (20000a4c <main+0x850>)
20000794:	49ae      	ldr	r1, [pc, #696]	; (20000a50 <main+0x854>)
20000796:	2390      	movs	r3, #144	; 0x90
20000798:	18f8      	adds	r0, r7, r3
2000079a:	2301      	movs	r3, #1
2000079c:	f003 fda7 	bl	200042ee <init_slow_text>
	init_slow_text(&text6, "you here,", "    ", 1);
200007a0:	4aa5      	ldr	r2, [pc, #660]	; (20000a38 <main+0x83c>)
200007a2:	49ac      	ldr	r1, [pc, #688]	; (20000a54 <main+0x858>)
200007a4:	237c      	movs	r3, #124	; 0x7c
200007a6:	18f8      	adds	r0, r7, r3
200007a8:	2301      	movs	r3, #1
200007aa:	f003 fda0 	bl	200042ee <init_slow_text>
	init_slow_text(&text7, "queen Daffo of DILs,", "heir to king Lear.", 1);
200007ae:	4aaa      	ldr	r2, [pc, #680]	; (20000a58 <main+0x85c>)
200007b0:	49aa      	ldr	r1, [pc, #680]	; (20000a5c <main+0x860>)
200007b2:	2368      	movs	r3, #104	; 0x68
200007b4:	18f8      	adds	r0, r7, r3
200007b6:	2301      	movs	r3, #1
200007b8:	f003 fd99 	bl	200042ee <init_slow_text>
	init_slow_text(&text8, "But maybe you're", "tempted, to loot", 1);
200007bc:	4aa8      	ldr	r2, [pc, #672]	; (20000a60 <main+0x864>)
200007be:	49a9      	ldr	r1, [pc, #676]	; (20000a64 <main+0x868>)
200007c0:	2354      	movs	r3, #84	; 0x54
200007c2:	18f8      	adds	r0, r7, r3
200007c4:	2301      	movs	r3, #1
200007c6:	f003 fd92 	bl	200042ee <init_slow_text>
	init_slow_text(&text9, "from the riches,", "    ", 1);
200007ca:	4a9b      	ldr	r2, [pc, #620]	; (20000a38 <main+0x83c>)
200007cc:	49a6      	ldr	r1, [pc, #664]	; (20000a68 <main+0x86c>)
200007ce:	2340      	movs	r3, #64	; 0x40
200007d0:	18f8      	adds	r0, r7, r3
200007d2:	2301      	movs	r3, #1
200007d4:	f003 fd8b 	bl	200042ee <init_slow_text>
	init_slow_text(&text12, "wicked DIPs-witches.", "    ", 1);
200007d8:	4a97      	ldr	r2, [pc, #604]	; (20000a38 <main+0x83c>)
200007da:	49a4      	ldr	r1, [pc, #656]	; (20000a6c <main+0x870>)
200007dc:	1d38      	adds	r0, r7, #4
200007de:	2301      	movs	r3, #1
200007e0:	f003 fd85 	bl	200042ee <init_slow_text>
	init_slow_text(&text10, "so grippily trea-", "sured by", 1);
200007e4:	4aa2      	ldr	r2, [pc, #648]	; (20000a70 <main+0x874>)
200007e6:	49a3      	ldr	r1, [pc, #652]	; (20000a74 <main+0x878>)
200007e8:	232c      	movs	r3, #44	; 0x2c
200007ea:	18f8      	adds	r0, r7, r3
200007ec:	2301      	movs	r3, #1
200007ee:	f003 fd7e 	bl	200042ee <init_slow_text>
	init_slow_text(&text11, "Enter, brave witch,", "- reset the switch!", 1);
200007f2:	4aa1      	ldr	r2, [pc, #644]	; (20000a78 <main+0x87c>)
200007f4:	49a1      	ldr	r1, [pc, #644]	; (20000a7c <main+0x880>)
200007f6:	2318      	movs	r3, #24
200007f8:	18f8      	adds	r0, r7, r3
200007fa:	2301      	movs	r3, #1
200007fc:	f003 fd77 	bl	200042ee <init_slow_text>
	//ascii_write_part("Yeeaaah!!!", "This is working! :)", 5, 10);
	set_up_ascii();
20000800:	f003 fc52 	bl	200040a8 <set_up_ascii>
	set_up_DIL();
20000804:	f003 fa80 	bl	20003d08 <set_up_DIL>
	clear_ascii();
20000808:	f003 fc57 	bl	200040ba <clear_ascii>
	
	int is_climbing = 0;
2000080c:	2300      	movs	r3, #0
2000080e:	4a9c      	ldr	r2, [pc, #624]	; (20000a80 <main+0x884>)
20000810:	18ba      	adds	r2, r7, r2
20000812:	6013      	str	r3, [r2, #0]
	int has_climbed = 0;
20000814:	2300      	movs	r3, #0
20000816:	2293      	movs	r2, #147	; 0x93
20000818:	00d2      	lsls	r2, r2, #3
2000081a:	18ba      	adds	r2, r7, r2
2000081c:	6013      	str	r3, [r2, #0]
	int game_over = 0;
2000081e:	2300      	movs	r3, #0
20000820:	4a98      	ldr	r2, [pc, #608]	; (20000a84 <main+0x888>)
20000822:	18ba      	adds	r2, r7, r2
20000824:	6013      	str	r3, [r2, #0]
	int game_over_adder = 0;
20000826:	2300      	movs	r3, #0
20000828:	2292      	movs	r2, #146	; 0x92
2000082a:	00d2      	lsls	r2, r2, #3
2000082c:	18ba      	adds	r2, r7, r2
2000082e:	6013      	str	r3, [r2, #0]
	int no_DIP = 0;
20000830:	2300      	movs	r3, #0
20000832:	4a95      	ldr	r2, [pc, #596]	; (20000a88 <main+0x88c>)
20000834:	18ba      	adds	r2, r7, r2
20000836:	6013      	str	r3, [r2, #0]
	int exploding = 0;
20000838:	2300      	movs	r3, #0
2000083a:	2291      	movs	r2, #145	; 0x91
2000083c:	00d2      	lsls	r2, r2, #3
2000083e:	18ba      	adds	r2, r7, r2
20000840:	6013      	str	r3, [r2, #0]
	int first = 1;
20000842:	2301      	movs	r3, #1
20000844:	4a91      	ldr	r2, [pc, #580]	; (20000a8c <main+0x890>)
20000846:	18ba      	adds	r2, r7, r2
20000848:	6013      	str	r3, [r2, #0]
	int lastFireTrigger = 0;
2000084a:	2300      	movs	r3, #0
2000084c:	2290      	movs	r2, #144	; 0x90
2000084e:	00d2      	lsls	r2, r2, #3
20000850:	18ba      	adds	r2, r7, r2
20000852:	6013      	str	r3, [r2, #0]
		
	current_screen = RESET_GAME;
20000854:	4b8e      	ldr	r3, [pc, #568]	; (20000a90 <main+0x894>)
20000856:	220a      	movs	r2, #10
20000858:	601a      	str	r2, [r3, #0]
	
	//Game loop
	while(1) {
			
		switch(current_screen) {
2000085a:	4b8d      	ldr	r3, [pc, #564]	; (20000a90 <main+0x894>)
2000085c:	681b      	ldr	r3, [r3, #0]
2000085e:	2b01      	cmp	r3, #1
20000860:	d020      	beq.n	200008a4 <main+0x6a8>
20000862:	dc02      	bgt.n	2000086a <main+0x66e>
20000864:	2b00      	cmp	r3, #0
20000866:	d011      	beq.n	2000088c <main+0x690>
20000868:	e7f7      	b.n	2000085a <main+0x65e>
2000086a:	2b02      	cmp	r3, #2
2000086c:	d100      	bne.n	20000870 <main+0x674>
2000086e:	e2c2      	b.n	20000df6 <main+0xbfa>
20000870:	2b0a      	cmp	r3, #10
20000872:	d101      	bne.n	20000878 <main+0x67c>
20000874:	f000 ff24 	bl	200016c0 <main+0x14c4>
20000878:	e7ef      	b.n	2000085a <main+0x65e>
			
			case SWITCH_LOCK: //before

				while(read_DIL() == 0){
					draw_game_object(&pressObj);
2000087a:	23f9      	movs	r3, #249	; 0xf9
2000087c:	009b      	lsls	r3, r3, #2
2000087e:	18fb      	adds	r3, r7, r3
20000880:	0018      	movs	r0, r3
20000882:	f003 f9a3 	bl	20003bcc <draw_game_object>
					show_frame(1);
20000886:	2001      	movs	r0, #1
20000888:	f003 f9e1 	bl	20003c4e <show_frame>
				while(read_DIL() == 0){
2000088c:	f003 fa48 	bl	20003d20 <read_DIL>
20000890:	1e03      	subs	r3, r0, #0
20000892:	d0f2      	beq.n	2000087a <main+0x67e>
				}
				
				counter = 0;
20000894:	4b7f      	ldr	r3, [pc, #508]	; (20000a94 <main+0x898>)
20000896:	2200      	movs	r2, #0
20000898:	601a      	str	r2, [r3, #0]
				current_screen = START_SCREEN;
2000089a:	4b7d      	ldr	r3, [pc, #500]	; (20000a90 <main+0x894>)
2000089c:	2201      	movs	r2, #1
2000089e:	601a      	str	r2, [r3, #0]
				break;
200008a0:	f000 ffc5 	bl	2000182e <main+0x1632>
			
			
			case START_SCREEN: //outside
				
				counter++;
200008a4:	4b7b      	ldr	r3, [pc, #492]	; (20000a94 <main+0x898>)
200008a6:	681b      	ldr	r3, [r3, #0]
200008a8:	1c5a      	adds	r2, r3, #1
200008aa:	4b7a      	ldr	r3, [pc, #488]	; (20000a94 <main+0x898>)
200008ac:	601a      	str	r2, [r3, #0]
				
				if(titleObj.yPos < 1) {
200008ae:	2384      	movs	r3, #132	; 0x84
200008b0:	00db      	lsls	r3, r3, #3
200008b2:	18fb      	adds	r3, r7, r3
200008b4:	689b      	ldr	r3, [r3, #8]
200008b6:	2b00      	cmp	r3, #0
200008b8:	dc08      	bgt.n	200008cc <main+0x6d0>
					titleObj.yPos++;
200008ba:	2384      	movs	r3, #132	; 0x84
200008bc:	00db      	lsls	r3, r3, #3
200008be:	18fb      	adds	r3, r7, r3
200008c0:	689b      	ldr	r3, [r3, #8]
200008c2:	1c5a      	adds	r2, r3, #1
200008c4:	2384      	movs	r3, #132	; 0x84
200008c6:	00db      	lsls	r3, r3, #3
200008c8:	18fb      	adds	r3, r7, r3
200008ca:	609a      	str	r2, [r3, #8]
				}
				
				draw_game_object(&castleObj);
200008cc:	23ea      	movs	r3, #234	; 0xea
200008ce:	009b      	lsls	r3, r3, #2
200008d0:	18fb      	adds	r3, r7, r3
200008d2:	0018      	movs	r0, r3
200008d4:	f003 f97a 	bl	20003bcc <draw_game_object>
				draw_game_object(&fire2);
200008d8:	2393      	movs	r3, #147	; 0x93
200008da:	009b      	lsls	r3, r3, #2
200008dc:	18fb      	adds	r3, r7, r3
200008de:	0018      	movs	r0, r3
200008e0:	f003 f974 	bl	20003bcc <draw_game_object>
				draw_game_object(&fire3);
200008e4:	238a      	movs	r3, #138	; 0x8a
200008e6:	009b      	lsls	r3, r3, #2
200008e8:	18fb      	adds	r3, r7, r3
200008ea:	0018      	movs	r0, r3
200008ec:	f003 f96e 	bl	20003bcc <draw_game_object>
				draw_game_object(&fire1);
200008f0:	23f0      	movs	r3, #240	; 0xf0
200008f2:	005b      	lsls	r3, r3, #1
200008f4:	18fb      	adds	r3, r7, r3
200008f6:	0018      	movs	r0, r3
200008f8:	f003 f968 	bl	20003bcc <draw_game_object>
				draw_game_object(&fire4);
200008fc:	2381      	movs	r3, #129	; 0x81
200008fe:	009b      	lsls	r3, r3, #2
20000900:	18fb      	adds	r3, r7, r3
20000902:	0018      	movs	r0, r3
20000904:	f003 f962 	bl	20003bcc <draw_game_object>
				draw_game_object(&titleObj);
20000908:	2384      	movs	r3, #132	; 0x84
2000090a:	00db      	lsls	r3, r3, #3
2000090c:	18fb      	adds	r3, r7, r3
2000090e:	0018      	movs	r0, r3
20000910:	f003 f95c 	bl	20003bcc <draw_game_object>
				draw_game_object(&bird);
20000914:	23b7      	movs	r3, #183	; 0xb7
20000916:	009b      	lsls	r3, r3, #2
20000918:	18fb      	adds	r3, r7, r3
2000091a:	0018      	movs	r0, r3
2000091c:	f003 f956 	bl	20003bcc <draw_game_object>
				show_frame(1);
20000920:	2001      	movs	r0, #1
20000922:	f003 f994 	bl	20003c4e <show_frame>
				
				static int long_text = 40;
				static int short_text = 20;
				static int delay_until_text = 130;
				
				if (counter < delay_until_text - 55 && counter > delay_until_text - 90)
20000926:	4b5c      	ldr	r3, [pc, #368]	; (20000a98 <main+0x89c>)
20000928:	681b      	ldr	r3, [r3, #0]
2000092a:	3b37      	subs	r3, #55	; 0x37
2000092c:	001a      	movs	r2, r3
2000092e:	4b59      	ldr	r3, [pc, #356]	; (20000a94 <main+0x898>)
20000930:	681b      	ldr	r3, [r3, #0]
20000932:	429a      	cmp	r2, r3
20000934:	dd13      	ble.n	2000095e <main+0x762>
20000936:	4b58      	ldr	r3, [pc, #352]	; (20000a98 <main+0x89c>)
20000938:	681b      	ldr	r3, [r3, #0]
2000093a:	3b5a      	subs	r3, #90	; 0x5a
2000093c:	001a      	movs	r2, r3
2000093e:	4b55      	ldr	r3, [pc, #340]	; (20000a94 <main+0x898>)
20000940:	681b      	ldr	r3, [r3, #0]
20000942:	429a      	cmp	r2, r3
20000944:	da0b      	bge.n	2000095e <main+0x762>
					text_kra.display(&text_kra, 20);
20000946:	4b55      	ldr	r3, [pc, #340]	; (20000a9c <main+0x8a0>)
20000948:	2294      	movs	r2, #148	; 0x94
2000094a:	00d2      	lsls	r2, r2, #3
2000094c:	4694      	mov	ip, r2
2000094e:	44bc      	add	ip, r7
20000950:	4463      	add	r3, ip
20000952:	691b      	ldr	r3, [r3, #16]
20000954:	22f4      	movs	r2, #244	; 0xf4
20000956:	18ba      	adds	r2, r7, r2
20000958:	2114      	movs	r1, #20
2000095a:	0010      	movs	r0, r2
2000095c:	4798      	blx	r3
				if (counter == delay_until_text - 25)
2000095e:	4b4e      	ldr	r3, [pc, #312]	; (20000a98 <main+0x89c>)
20000960:	681b      	ldr	r3, [r3, #0]
20000962:	3b19      	subs	r3, #25
20000964:	001a      	movs	r2, r3
20000966:	4b4b      	ldr	r3, [pc, #300]	; (20000a94 <main+0x898>)
20000968:	681b      	ldr	r3, [r3, #0]
2000096a:	429a      	cmp	r2, r3
2000096c:	d101      	bne.n	20000972 <main+0x776>
					clear_ascii();
2000096e:	f003 fba4 	bl	200040ba <clear_ascii>
				
				if (counter < delay_until_text);
20000972:	4b48      	ldr	r3, [pc, #288]	; (20000a94 <main+0x898>)
20000974:	681a      	ldr	r2, [r3, #0]
20000976:	4b48      	ldr	r3, [pc, #288]	; (20000a98 <main+0x89c>)
20000978:	681b      	ldr	r3, [r3, #0]
2000097a:	429a      	cmp	r2, r3
2000097c:	da00      	bge.n	20000980 <main+0x784>
2000097e:	e1c1      	b.n	20000d04 <main+0xb08>
				else if (counter < delay_until_text + 1*long_text)
20000980:	4b45      	ldr	r3, [pc, #276]	; (20000a98 <main+0x89c>)
20000982:	681a      	ldr	r2, [r3, #0]
20000984:	4b46      	ldr	r3, [pc, #280]	; (20000aa0 <main+0x8a4>)
20000986:	681b      	ldr	r3, [r3, #0]
20000988:	18d2      	adds	r2, r2, r3
2000098a:	4b42      	ldr	r3, [pc, #264]	; (20000a94 <main+0x898>)
2000098c:	681b      	ldr	r3, [r3, #0]
2000098e:	429a      	cmp	r2, r3
20000990:	dd0c      	ble.n	200009ac <main+0x7b0>
					text1.display(&text1, 20);
20000992:	4b44      	ldr	r3, [pc, #272]	; (20000aa4 <main+0x8a8>)
20000994:	2294      	movs	r2, #148	; 0x94
20000996:	00d2      	lsls	r2, r2, #3
20000998:	4694      	mov	ip, r2
2000099a:	44bc      	add	ip, r7
2000099c:	4463      	add	r3, ip
2000099e:	691b      	ldr	r3, [r3, #16]
200009a0:	22e0      	movs	r2, #224	; 0xe0
200009a2:	18ba      	adds	r2, r7, r2
200009a4:	2114      	movs	r1, #20
200009a6:	0010      	movs	r0, r2
200009a8:	4798      	blx	r3
200009aa:	e1ab      	b.n	20000d04 <main+0xb08>
				else if(counter < delay_until_text + 1*long_text + 1*short_text)
200009ac:	4b3a      	ldr	r3, [pc, #232]	; (20000a98 <main+0x89c>)
200009ae:	681a      	ldr	r2, [r3, #0]
200009b0:	4b3b      	ldr	r3, [pc, #236]	; (20000aa0 <main+0x8a4>)
200009b2:	681b      	ldr	r3, [r3, #0]
200009b4:	18d2      	adds	r2, r2, r3
200009b6:	4b3c      	ldr	r3, [pc, #240]	; (20000aa8 <main+0x8ac>)
200009b8:	681b      	ldr	r3, [r3, #0]
200009ba:	18d2      	adds	r2, r2, r3
200009bc:	4b35      	ldr	r3, [pc, #212]	; (20000a94 <main+0x898>)
200009be:	681b      	ldr	r3, [r3, #0]
200009c0:	429a      	cmp	r2, r3
200009c2:	dd0c      	ble.n	200009de <main+0x7e2>
					text2.display(&text2, 20);
200009c4:	4b39      	ldr	r3, [pc, #228]	; (20000aac <main+0x8b0>)
200009c6:	2294      	movs	r2, #148	; 0x94
200009c8:	00d2      	lsls	r2, r2, #3
200009ca:	4694      	mov	ip, r2
200009cc:	44bc      	add	ip, r7
200009ce:	4463      	add	r3, ip
200009d0:	691b      	ldr	r3, [r3, #16]
200009d2:	22cc      	movs	r2, #204	; 0xcc
200009d4:	18ba      	adds	r2, r7, r2
200009d6:	2114      	movs	r1, #20
200009d8:	0010      	movs	r0, r2
200009da:	4798      	blx	r3
200009dc:	e192      	b.n	20000d04 <main+0xb08>
				else if(counter < delay_until_text + 2*long_text + 1*short_text)
200009de:	4b30      	ldr	r3, [pc, #192]	; (20000aa0 <main+0x8a4>)
200009e0:	681b      	ldr	r3, [r3, #0]
200009e2:	005a      	lsls	r2, r3, #1
200009e4:	4b2c      	ldr	r3, [pc, #176]	; (20000a98 <main+0x89c>)
200009e6:	681b      	ldr	r3, [r3, #0]
200009e8:	18d2      	adds	r2, r2, r3
200009ea:	4b2f      	ldr	r3, [pc, #188]	; (20000aa8 <main+0x8ac>)
200009ec:	681b      	ldr	r3, [r3, #0]
200009ee:	18d2      	adds	r2, r2, r3
200009f0:	4b28      	ldr	r3, [pc, #160]	; (20000a94 <main+0x898>)
200009f2:	681b      	ldr	r3, [r3, #0]
200009f4:	429a      	cmp	r2, r3
200009f6:	dd5d      	ble.n	20000ab4 <main+0x8b8>
					text3.display(&text3, 20);
200009f8:	4b2d      	ldr	r3, [pc, #180]	; (20000ab0 <main+0x8b4>)
200009fa:	2294      	movs	r2, #148	; 0x94
200009fc:	00d2      	lsls	r2, r2, #3
200009fe:	4694      	mov	ip, r2
20000a00:	44bc      	add	ip, r7
20000a02:	4463      	add	r3, ip
20000a04:	691b      	ldr	r3, [r3, #16]
20000a06:	22b8      	movs	r2, #184	; 0xb8
20000a08:	18ba      	adds	r2, r7, r2
20000a0a:	2114      	movs	r1, #20
20000a0c:	0010      	movs	r0, r2
20000a0e:	4798      	blx	r3
20000a10:	e178      	b.n	20000d04 <main+0xb08>
20000a12:	46c0      	nop			; (mov r8, r8)
20000a14:	fffffd88 			; <UNDEFINED> instruction: 0xfffffd88
20000a18:	fffffd40 			; <UNDEFINED> instruction: 0xfffffd40
20000a1c:	fffffd64 			; <UNDEFINED> instruction: 0xfffffd64
20000a20:	fffffdac 			; <UNDEFINED> instruction: 0xfffffdac
20000a24:	2000189d 	mulcs	r0, sp, r8
20000a28:	2000e6c0 	andcs	lr, r0, r0, asr #13
20000a2c:	2000e6c4 	andcs	lr, r0, r4, asr #13
20000a30:	2000e6d4 	ldrdcs	lr, [r0], -r4
20000a34:	2000e6e8 	andcs	lr, r0, r8, ror #13
20000a38:	2000e6fc 	strdcs	lr, [r0], -ip
20000a3c:	2000e704 	andcs	lr, r0, r4, lsl #14
20000a40:	2000e714 	andcs	lr, r0, r4, lsl r7
20000a44:	2000e728 	andcs	lr, r0, r8, lsr #14
20000a48:	2000e73c 	andcs	lr, r0, ip, lsr r7
20000a4c:	2000e748 	andcs	lr, r0, r8, asr #14
20000a50:	2000e75c 	andcs	lr, r0, ip, asr r7
20000a54:	2000e76c 	andcs	lr, r0, ip, ror #14
20000a58:	2000e778 	andcs	lr, r0, r8, ror r7
20000a5c:	2000e78c 	andcs	lr, r0, ip, lsl #15
20000a60:	2000e7a4 	andcs	lr, r0, r4, lsr #15
20000a64:	2000e7b8 			; <UNDEFINED> instruction: 0x2000e7b8
20000a68:	2000e7cc 	andcs	lr, r0, ip, asr #15
20000a6c:	2000e7e0 	andcs	lr, r0, r0, ror #15
20000a70:	2000e7f8 	strdcs	lr, [r0], -r8
20000a74:	2000e804 	andcs	lr, r0, r4, lsl #16
20000a78:	2000e818 	andcs	lr, r0, r8, lsl r8
20000a7c:	2000e82c 	andcs	lr, r0, ip, lsr #16
20000a80:	0000049c 	muleq	r0, ip, r4
20000a84:	00000494 	muleq	r0, r4, r4
20000a88:	0000048c 	andeq	r0, r0, ip, lsl #9
20000a8c:	00000484 	andeq	r0, r0, r4, lsl #9
20000a90:	200087e0 	andcs	r8, r0, r0, ror #15
20000a94:	200047b8 			; <UNDEFINED> instruction: 0x200047b8
20000a98:	200087e4 	andcs	r8, r0, r4, ror #15
20000a9c:	fffffc54 			; <UNDEFINED> instruction: 0xfffffc54
20000aa0:	200087e8 	andcs	r8, r0, r8, ror #15
20000aa4:	fffffc40 			; <UNDEFINED> instruction: 0xfffffc40
20000aa8:	200087ec 	andcs	r8, r0, ip, ror #15
20000aac:	fffffc2c 			; <UNDEFINED> instruction: 0xfffffc2c
20000ab0:	fffffc18 			; <UNDEFINED> instruction: 0xfffffc18
				else if(counter < delay_until_text + 2*long_text + 2*short_text)
20000ab4:	4bdb      	ldr	r3, [pc, #876]	; (20000e24 <main+0xc28>)
20000ab6:	681b      	ldr	r3, [r3, #0]
20000ab8:	005a      	lsls	r2, r3, #1
20000aba:	4bdb      	ldr	r3, [pc, #876]	; (20000e28 <main+0xc2c>)
20000abc:	681b      	ldr	r3, [r3, #0]
20000abe:	18d2      	adds	r2, r2, r3
20000ac0:	4bda      	ldr	r3, [pc, #872]	; (20000e2c <main+0xc30>)
20000ac2:	681b      	ldr	r3, [r3, #0]
20000ac4:	005b      	lsls	r3, r3, #1
20000ac6:	18d2      	adds	r2, r2, r3
20000ac8:	4bd9      	ldr	r3, [pc, #868]	; (20000e30 <main+0xc34>)
20000aca:	681b      	ldr	r3, [r3, #0]
20000acc:	429a      	cmp	r2, r3
20000ace:	dd0c      	ble.n	20000aea <main+0x8ee>
					text4.display(&text4, 20);
20000ad0:	4bd8      	ldr	r3, [pc, #864]	; (20000e34 <main+0xc38>)
20000ad2:	2294      	movs	r2, #148	; 0x94
20000ad4:	00d2      	lsls	r2, r2, #3
20000ad6:	4694      	mov	ip, r2
20000ad8:	44bc      	add	ip, r7
20000ada:	4463      	add	r3, ip
20000adc:	691b      	ldr	r3, [r3, #16]
20000ade:	22a4      	movs	r2, #164	; 0xa4
20000ae0:	18ba      	adds	r2, r7, r2
20000ae2:	2114      	movs	r1, #20
20000ae4:	0010      	movs	r0, r2
20000ae6:	4798      	blx	r3
20000ae8:	e10c      	b.n	20000d04 <main+0xb08>
				else if(counter < delay_until_text + 3*long_text + 2*short_text)
20000aea:	4bce      	ldr	r3, [pc, #824]	; (20000e24 <main+0xc28>)
20000aec:	681a      	ldr	r2, [r3, #0]
20000aee:	0013      	movs	r3, r2
20000af0:	005b      	lsls	r3, r3, #1
20000af2:	189a      	adds	r2, r3, r2
20000af4:	4bcc      	ldr	r3, [pc, #816]	; (20000e28 <main+0xc2c>)
20000af6:	681b      	ldr	r3, [r3, #0]
20000af8:	18d2      	adds	r2, r2, r3
20000afa:	4bcc      	ldr	r3, [pc, #816]	; (20000e2c <main+0xc30>)
20000afc:	681b      	ldr	r3, [r3, #0]
20000afe:	005b      	lsls	r3, r3, #1
20000b00:	18d2      	adds	r2, r2, r3
20000b02:	4bcb      	ldr	r3, [pc, #812]	; (20000e30 <main+0xc34>)
20000b04:	681b      	ldr	r3, [r3, #0]
20000b06:	429a      	cmp	r2, r3
20000b08:	dd0c      	ble.n	20000b24 <main+0x928>
					text5.display(&text5, 15);
20000b0a:	4bcb      	ldr	r3, [pc, #812]	; (20000e38 <main+0xc3c>)
20000b0c:	2294      	movs	r2, #148	; 0x94
20000b0e:	00d2      	lsls	r2, r2, #3
20000b10:	4694      	mov	ip, r2
20000b12:	44bc      	add	ip, r7
20000b14:	4463      	add	r3, ip
20000b16:	691b      	ldr	r3, [r3, #16]
20000b18:	2290      	movs	r2, #144	; 0x90
20000b1a:	18ba      	adds	r2, r7, r2
20000b1c:	210f      	movs	r1, #15
20000b1e:	0010      	movs	r0, r2
20000b20:	4798      	blx	r3
20000b22:	e0ef      	b.n	20000d04 <main+0xb08>
				else if(counter < delay_until_text + 3*long_text + 3*short_text)
20000b24:	4bbf      	ldr	r3, [pc, #764]	; (20000e24 <main+0xc28>)
20000b26:	681a      	ldr	r2, [r3, #0]
20000b28:	0013      	movs	r3, r2
20000b2a:	005b      	lsls	r3, r3, #1
20000b2c:	189a      	adds	r2, r3, r2
20000b2e:	4bbe      	ldr	r3, [pc, #760]	; (20000e28 <main+0xc2c>)
20000b30:	681b      	ldr	r3, [r3, #0]
20000b32:	18d1      	adds	r1, r2, r3
20000b34:	4bbd      	ldr	r3, [pc, #756]	; (20000e2c <main+0xc30>)
20000b36:	681a      	ldr	r2, [r3, #0]
20000b38:	0013      	movs	r3, r2
20000b3a:	005b      	lsls	r3, r3, #1
20000b3c:	189b      	adds	r3, r3, r2
20000b3e:	18ca      	adds	r2, r1, r3
20000b40:	4bbb      	ldr	r3, [pc, #748]	; (20000e30 <main+0xc34>)
20000b42:	681b      	ldr	r3, [r3, #0]
20000b44:	429a      	cmp	r2, r3
20000b46:	dd0c      	ble.n	20000b62 <main+0x966>
					text6.display(&text6, 20);
20000b48:	4bbc      	ldr	r3, [pc, #752]	; (20000e3c <main+0xc40>)
20000b4a:	2294      	movs	r2, #148	; 0x94
20000b4c:	00d2      	lsls	r2, r2, #3
20000b4e:	4694      	mov	ip, r2
20000b50:	44bc      	add	ip, r7
20000b52:	4463      	add	r3, ip
20000b54:	691b      	ldr	r3, [r3, #16]
20000b56:	227c      	movs	r2, #124	; 0x7c
20000b58:	18ba      	adds	r2, r7, r2
20000b5a:	2114      	movs	r1, #20
20000b5c:	0010      	movs	r0, r2
20000b5e:	4798      	blx	r3
20000b60:	e0d0      	b.n	20000d04 <main+0xb08>
				else if(counter < delay_until_text + 4*long_text + 3*short_text + 3)
20000b62:	4bb0      	ldr	r3, [pc, #704]	; (20000e24 <main+0xc28>)
20000b64:	681b      	ldr	r3, [r3, #0]
20000b66:	009a      	lsls	r2, r3, #2
20000b68:	4baf      	ldr	r3, [pc, #700]	; (20000e28 <main+0xc2c>)
20000b6a:	681b      	ldr	r3, [r3, #0]
20000b6c:	18d1      	adds	r1, r2, r3
20000b6e:	4baf      	ldr	r3, [pc, #700]	; (20000e2c <main+0xc30>)
20000b70:	681a      	ldr	r2, [r3, #0]
20000b72:	0013      	movs	r3, r2
20000b74:	005b      	lsls	r3, r3, #1
20000b76:	189b      	adds	r3, r3, r2
20000b78:	18cb      	adds	r3, r1, r3
20000b7a:	1cda      	adds	r2, r3, #3
20000b7c:	4bac      	ldr	r3, [pc, #688]	; (20000e30 <main+0xc34>)
20000b7e:	681b      	ldr	r3, [r3, #0]
20000b80:	429a      	cmp	r2, r3
20000b82:	dd0c      	ble.n	20000b9e <main+0x9a2>
					text7.display(&text7, 20);
20000b84:	4bae      	ldr	r3, [pc, #696]	; (20000e40 <main+0xc44>)
20000b86:	2294      	movs	r2, #148	; 0x94
20000b88:	00d2      	lsls	r2, r2, #3
20000b8a:	4694      	mov	ip, r2
20000b8c:	44bc      	add	ip, r7
20000b8e:	4463      	add	r3, ip
20000b90:	691b      	ldr	r3, [r3, #16]
20000b92:	2268      	movs	r2, #104	; 0x68
20000b94:	18ba      	adds	r2, r7, r2
20000b96:	2114      	movs	r1, #20
20000b98:	0010      	movs	r0, r2
20000b9a:	4798      	blx	r3
20000b9c:	e0b2      	b.n	20000d04 <main+0xb08>
				else if(counter < delay_until_text + 5*long_text + 3*short_text + 2)
20000b9e:	4ba1      	ldr	r3, [pc, #644]	; (20000e24 <main+0xc28>)
20000ba0:	681a      	ldr	r2, [r3, #0]
20000ba2:	0013      	movs	r3, r2
20000ba4:	009b      	lsls	r3, r3, #2
20000ba6:	189a      	adds	r2, r3, r2
20000ba8:	4b9f      	ldr	r3, [pc, #636]	; (20000e28 <main+0xc2c>)
20000baa:	681b      	ldr	r3, [r3, #0]
20000bac:	18d1      	adds	r1, r2, r3
20000bae:	4b9f      	ldr	r3, [pc, #636]	; (20000e2c <main+0xc30>)
20000bb0:	681a      	ldr	r2, [r3, #0]
20000bb2:	0013      	movs	r3, r2
20000bb4:	005b      	lsls	r3, r3, #1
20000bb6:	189b      	adds	r3, r3, r2
20000bb8:	18cb      	adds	r3, r1, r3
20000bba:	1c9a      	adds	r2, r3, #2
20000bbc:	4b9c      	ldr	r3, [pc, #624]	; (20000e30 <main+0xc34>)
20000bbe:	681b      	ldr	r3, [r3, #0]
20000bc0:	429a      	cmp	r2, r3
20000bc2:	dd0c      	ble.n	20000bde <main+0x9e2>
					text8.display(&text8, 20);
20000bc4:	4b9f      	ldr	r3, [pc, #636]	; (20000e44 <main+0xc48>)
20000bc6:	2294      	movs	r2, #148	; 0x94
20000bc8:	00d2      	lsls	r2, r2, #3
20000bca:	4694      	mov	ip, r2
20000bcc:	44bc      	add	ip, r7
20000bce:	4463      	add	r3, ip
20000bd0:	691b      	ldr	r3, [r3, #16]
20000bd2:	2254      	movs	r2, #84	; 0x54
20000bd4:	18ba      	adds	r2, r7, r2
20000bd6:	2114      	movs	r1, #20
20000bd8:	0010      	movs	r0, r2
20000bda:	4798      	blx	r3
20000bdc:	e092      	b.n	20000d04 <main+0xb08>
				else if(counter < delay_until_text + 5*long_text + 4*short_text + 2)
20000bde:	4b91      	ldr	r3, [pc, #580]	; (20000e24 <main+0xc28>)
20000be0:	681a      	ldr	r2, [r3, #0]
20000be2:	0013      	movs	r3, r2
20000be4:	009b      	lsls	r3, r3, #2
20000be6:	189a      	adds	r2, r3, r2
20000be8:	4b8f      	ldr	r3, [pc, #572]	; (20000e28 <main+0xc2c>)
20000bea:	681b      	ldr	r3, [r3, #0]
20000bec:	18d2      	adds	r2, r2, r3
20000bee:	4b8f      	ldr	r3, [pc, #572]	; (20000e2c <main+0xc30>)
20000bf0:	681b      	ldr	r3, [r3, #0]
20000bf2:	009b      	lsls	r3, r3, #2
20000bf4:	18d3      	adds	r3, r2, r3
20000bf6:	1c9a      	adds	r2, r3, #2
20000bf8:	4b8d      	ldr	r3, [pc, #564]	; (20000e30 <main+0xc34>)
20000bfa:	681b      	ldr	r3, [r3, #0]
20000bfc:	429a      	cmp	r2, r3
20000bfe:	dd0c      	ble.n	20000c1a <main+0xa1e>
					text9.display(&text9, 20);
20000c00:	4b91      	ldr	r3, [pc, #580]	; (20000e48 <main+0xc4c>)
20000c02:	2294      	movs	r2, #148	; 0x94
20000c04:	00d2      	lsls	r2, r2, #3
20000c06:	4694      	mov	ip, r2
20000c08:	44bc      	add	ip, r7
20000c0a:	4463      	add	r3, ip
20000c0c:	691b      	ldr	r3, [r3, #16]
20000c0e:	2240      	movs	r2, #64	; 0x40
20000c10:	18ba      	adds	r2, r7, r2
20000c12:	2114      	movs	r1, #20
20000c14:	0010      	movs	r0, r2
20000c16:	4798      	blx	r3
20000c18:	e074      	b.n	20000d04 <main+0xb08>
				else if(counter < delay_until_text + 6*long_text + 4*short_text - 2 + 2)
20000c1a:	4b82      	ldr	r3, [pc, #520]	; (20000e24 <main+0xc28>)
20000c1c:	681a      	ldr	r2, [r3, #0]
20000c1e:	0013      	movs	r3, r2
20000c20:	005b      	lsls	r3, r3, #1
20000c22:	189b      	adds	r3, r3, r2
20000c24:	005b      	lsls	r3, r3, #1
20000c26:	001a      	movs	r2, r3
20000c28:	4b7f      	ldr	r3, [pc, #508]	; (20000e28 <main+0xc2c>)
20000c2a:	681b      	ldr	r3, [r3, #0]
20000c2c:	18d2      	adds	r2, r2, r3
20000c2e:	4b7f      	ldr	r3, [pc, #508]	; (20000e2c <main+0xc30>)
20000c30:	681b      	ldr	r3, [r3, #0]
20000c32:	009b      	lsls	r3, r3, #2
20000c34:	18d2      	adds	r2, r2, r3
20000c36:	4b7e      	ldr	r3, [pc, #504]	; (20000e30 <main+0xc34>)
20000c38:	681b      	ldr	r3, [r3, #0]
20000c3a:	429a      	cmp	r2, r3
20000c3c:	dd0c      	ble.n	20000c58 <main+0xa5c>
					text10.display(&text10, 15);
20000c3e:	4b83      	ldr	r3, [pc, #524]	; (20000e4c <main+0xc50>)
20000c40:	2294      	movs	r2, #148	; 0x94
20000c42:	00d2      	lsls	r2, r2, #3
20000c44:	4694      	mov	ip, r2
20000c46:	44bc      	add	ip, r7
20000c48:	4463      	add	r3, ip
20000c4a:	691b      	ldr	r3, [r3, #16]
20000c4c:	222c      	movs	r2, #44	; 0x2c
20000c4e:	18ba      	adds	r2, r7, r2
20000c50:	210f      	movs	r1, #15
20000c52:	0010      	movs	r0, r2
20000c54:	4798      	blx	r3
20000c56:	e055      	b.n	20000d04 <main+0xb08>
				else if(counter < delay_until_text + 6*long_text + 5*short_text + 3 + 2)
20000c58:	4b72      	ldr	r3, [pc, #456]	; (20000e24 <main+0xc28>)
20000c5a:	681a      	ldr	r2, [r3, #0]
20000c5c:	0013      	movs	r3, r2
20000c5e:	005b      	lsls	r3, r3, #1
20000c60:	189b      	adds	r3, r3, r2
20000c62:	005b      	lsls	r3, r3, #1
20000c64:	001a      	movs	r2, r3
20000c66:	4b70      	ldr	r3, [pc, #448]	; (20000e28 <main+0xc2c>)
20000c68:	681b      	ldr	r3, [r3, #0]
20000c6a:	18d1      	adds	r1, r2, r3
20000c6c:	4b6f      	ldr	r3, [pc, #444]	; (20000e2c <main+0xc30>)
20000c6e:	681a      	ldr	r2, [r3, #0]
20000c70:	0013      	movs	r3, r2
20000c72:	009b      	lsls	r3, r3, #2
20000c74:	189b      	adds	r3, r3, r2
20000c76:	18cb      	adds	r3, r1, r3
20000c78:	1d5a      	adds	r2, r3, #5
20000c7a:	4b6d      	ldr	r3, [pc, #436]	; (20000e30 <main+0xc34>)
20000c7c:	681b      	ldr	r3, [r3, #0]
20000c7e:	429a      	cmp	r2, r3
20000c80:	dd0b      	ble.n	20000c9a <main+0xa9e>
					text12.display(&text12, 15);
20000c82:	4b73      	ldr	r3, [pc, #460]	; (20000e50 <main+0xc54>)
20000c84:	2294      	movs	r2, #148	; 0x94
20000c86:	00d2      	lsls	r2, r2, #3
20000c88:	4694      	mov	ip, r2
20000c8a:	44bc      	add	ip, r7
20000c8c:	4463      	add	r3, ip
20000c8e:	691b      	ldr	r3, [r3, #16]
20000c90:	1d3a      	adds	r2, r7, #4
20000c92:	210f      	movs	r1, #15
20000c94:	0010      	movs	r0, r2
20000c96:	4798      	blx	r3
20000c98:	e034      	b.n	20000d04 <main+0xb08>
				else if(counter < delay_until_text + 7*long_text + 5*short_text + 6 + 2) {
20000c9a:	4b62      	ldr	r3, [pc, #392]	; (20000e24 <main+0xc28>)
20000c9c:	681a      	ldr	r2, [r3, #0]
20000c9e:	0013      	movs	r3, r2
20000ca0:	00db      	lsls	r3, r3, #3
20000ca2:	1a9a      	subs	r2, r3, r2
20000ca4:	4b60      	ldr	r3, [pc, #384]	; (20000e28 <main+0xc2c>)
20000ca6:	681b      	ldr	r3, [r3, #0]
20000ca8:	18d1      	adds	r1, r2, r3
20000caa:	4b60      	ldr	r3, [pc, #384]	; (20000e2c <main+0xc30>)
20000cac:	681a      	ldr	r2, [r3, #0]
20000cae:	0013      	movs	r3, r2
20000cb0:	009b      	lsls	r3, r3, #2
20000cb2:	189b      	adds	r3, r3, r2
20000cb4:	18cb      	adds	r3, r1, r3
20000cb6:	3308      	adds	r3, #8
20000cb8:	001a      	movs	r2, r3
20000cba:	4b5d      	ldr	r3, [pc, #372]	; (20000e30 <main+0xc34>)
20000cbc:	681b      	ldr	r3, [r3, #0]
20000cbe:	429a      	cmp	r2, r3
20000cc0:	dd0c      	ble.n	20000cdc <main+0xae0>
					text11.display(&text11, 20);
20000cc2:	4b64      	ldr	r3, [pc, #400]	; (20000e54 <main+0xc58>)
20000cc4:	2294      	movs	r2, #148	; 0x94
20000cc6:	00d2      	lsls	r2, r2, #3
20000cc8:	4694      	mov	ip, r2
20000cca:	44bc      	add	ip, r7
20000ccc:	4463      	add	r3, ip
20000cce:	691b      	ldr	r3, [r3, #16]
20000cd0:	2218      	movs	r2, #24
20000cd2:	18ba      	adds	r2, r7, r2
20000cd4:	2114      	movs	r1, #20
20000cd6:	0010      	movs	r0, r2
20000cd8:	4798      	blx	r3
20000cda:	e013      	b.n	20000d04 <main+0xb08>
				} else {
					if (read_DIL() == 0) {
20000cdc:	f003 f820 	bl	20003d20 <read_DIL>
20000ce0:	1e03      	subs	r3, r0, #0
20000ce2:	d10f      	bne.n	20000d04 <main+0xb08>
						current_screen = GAME_SCREEN;
20000ce4:	4b5c      	ldr	r3, [pc, #368]	; (20000e58 <main+0xc5c>)
20000ce6:	2202      	movs	r2, #2
20000ce8:	601a      	str	r2, [r3, #0]
						random_seed = counter;
20000cea:	4b51      	ldr	r3, [pc, #324]	; (20000e30 <main+0xc34>)
20000cec:	681a      	ldr	r2, [r3, #0]
20000cee:	4b5b      	ldr	r3, [pc, #364]	; (20000e5c <main+0xc60>)
20000cf0:	601a      	str	r2, [r3, #0]
						counter = 0;
20000cf2:	4b4f      	ldr	r3, [pc, #316]	; (20000e30 <main+0xc34>)
20000cf4:	2200      	movs	r2, #0
20000cf6:	601a      	str	r2, [r3, #0]
						ascii_write("Daffo: I'm feeling ","a bit spooked out...");
20000cf8:	4a59      	ldr	r2, [pc, #356]	; (20000e60 <main+0xc64>)
20000cfa:	4b5a      	ldr	r3, [pc, #360]	; (20000e64 <main+0xc68>)
20000cfc:	0011      	movs	r1, r2
20000cfe:	0018      	movs	r0, r3
20000d00:	f003 fa10 	bl	20004124 <ascii_write>
					}
				}
				
				if(read_DIL() == SKIP_VALUE) {
20000d04:	f003 f80c 	bl	20003d20 <read_DIL>
20000d08:	0003      	movs	r3, r0
20000d0a:	2b81      	cmp	r3, #129	; 0x81
20000d0c:	d10f      	bne.n	20000d2e <main+0xb32>
					current_screen = GAME_SCREEN;
20000d0e:	4b52      	ldr	r3, [pc, #328]	; (20000e58 <main+0xc5c>)
20000d10:	2202      	movs	r2, #2
20000d12:	601a      	str	r2, [r3, #0]
					random_seed = counter;
20000d14:	4b46      	ldr	r3, [pc, #280]	; (20000e30 <main+0xc34>)
20000d16:	681a      	ldr	r2, [r3, #0]
20000d18:	4b50      	ldr	r3, [pc, #320]	; (20000e5c <main+0xc60>)
20000d1a:	601a      	str	r2, [r3, #0]
					counter = 0;
20000d1c:	4b44      	ldr	r3, [pc, #272]	; (20000e30 <main+0xc34>)
20000d1e:	2200      	movs	r2, #0
20000d20:	601a      	str	r2, [r3, #0]
					ascii_write("Daffo: I'm feeling ","a bit spooked out...");
20000d22:	4a4f      	ldr	r2, [pc, #316]	; (20000e60 <main+0xc64>)
20000d24:	4b4f      	ldr	r3, [pc, #316]	; (20000e64 <main+0xc68>)
20000d26:	0011      	movs	r1, r2
20000d28:	0018      	movs	r0, r3
20000d2a:	f003 f9fb 	bl	20004124 <ascii_write>
				}
				
				
				fire2.update(&fire2);
20000d2e:	4b4e      	ldr	r3, [pc, #312]	; (20000e68 <main+0xc6c>)
20000d30:	2294      	movs	r2, #148	; 0x94
20000d32:	00d2      	lsls	r2, r2, #3
20000d34:	4694      	mov	ip, r2
20000d36:	44bc      	add	ip, r7
20000d38:	4463      	add	r3, ip
20000d3a:	68db      	ldr	r3, [r3, #12]
20000d3c:	2293      	movs	r2, #147	; 0x93
20000d3e:	0092      	lsls	r2, r2, #2
20000d40:	18ba      	adds	r2, r7, r2
20000d42:	0010      	movs	r0, r2
20000d44:	4798      	blx	r3
				fire3.update(&fire3);
20000d46:	4b49      	ldr	r3, [pc, #292]	; (20000e6c <main+0xc70>)
20000d48:	2294      	movs	r2, #148	; 0x94
20000d4a:	00d2      	lsls	r2, r2, #3
20000d4c:	4694      	mov	ip, r2
20000d4e:	44bc      	add	ip, r7
20000d50:	4463      	add	r3, ip
20000d52:	68db      	ldr	r3, [r3, #12]
20000d54:	228a      	movs	r2, #138	; 0x8a
20000d56:	0092      	lsls	r2, r2, #2
20000d58:	18ba      	adds	r2, r7, r2
20000d5a:	0010      	movs	r0, r2
20000d5c:	4798      	blx	r3
				fire1.update(&fire1);
20000d5e:	4b44      	ldr	r3, [pc, #272]	; (20000e70 <main+0xc74>)
20000d60:	2294      	movs	r2, #148	; 0x94
20000d62:	00d2      	lsls	r2, r2, #3
20000d64:	4694      	mov	ip, r2
20000d66:	44bc      	add	ip, r7
20000d68:	4463      	add	r3, ip
20000d6a:	68db      	ldr	r3, [r3, #12]
20000d6c:	22f0      	movs	r2, #240	; 0xf0
20000d6e:	0052      	lsls	r2, r2, #1
20000d70:	18ba      	adds	r2, r7, r2
20000d72:	0010      	movs	r0, r2
20000d74:	4798      	blx	r3
				fire4.update(&fire4);
20000d76:	4b3f      	ldr	r3, [pc, #252]	; (20000e74 <main+0xc78>)
20000d78:	2294      	movs	r2, #148	; 0x94
20000d7a:	00d2      	lsls	r2, r2, #3
20000d7c:	4694      	mov	ip, r2
20000d7e:	44bc      	add	ip, r7
20000d80:	4463      	add	r3, ip
20000d82:	68db      	ldr	r3, [r3, #12]
20000d84:	2281      	movs	r2, #129	; 0x81
20000d86:	0092      	lsls	r2, r2, #2
20000d88:	18ba      	adds	r2, r7, r2
20000d8a:	0010      	movs	r0, r2
20000d8c:	4798      	blx	r3
				bird.update(&bird);
20000d8e:	4b3a      	ldr	r3, [pc, #232]	; (20000e78 <main+0xc7c>)
20000d90:	2294      	movs	r2, #148	; 0x94
20000d92:	00d2      	lsls	r2, r2, #3
20000d94:	4694      	mov	ip, r2
20000d96:	44bc      	add	ip, r7
20000d98:	4463      	add	r3, ip
20000d9a:	68db      	ldr	r3, [r3, #12]
20000d9c:	22b7      	movs	r2, #183	; 0xb7
20000d9e:	0092      	lsls	r2, r2, #2
20000da0:	18ba      	adds	r2, r7, r2
20000da2:	0010      	movs	r0, r2
20000da4:	4798      	blx	r3
				bird.xPos -= 2;
20000da6:	4b34      	ldr	r3, [pc, #208]	; (20000e78 <main+0xc7c>)
20000da8:	2294      	movs	r2, #148	; 0x94
20000daa:	00d2      	lsls	r2, r2, #3
20000dac:	4694      	mov	ip, r2
20000dae:	44bc      	add	ip, r7
20000db0:	4463      	add	r3, ip
20000db2:	685b      	ldr	r3, [r3, #4]
20000db4:	1e9a      	subs	r2, r3, #2
20000db6:	4b30      	ldr	r3, [pc, #192]	; (20000e78 <main+0xc7c>)
20000db8:	2194      	movs	r1, #148	; 0x94
20000dba:	00c9      	lsls	r1, r1, #3
20000dbc:	468c      	mov	ip, r1
20000dbe:	44bc      	add	ip, r7
20000dc0:	4463      	add	r3, ip
20000dc2:	605a      	str	r2, [r3, #4]
				if (counter % 2 == 0) {
20000dc4:	4b1a      	ldr	r3, [pc, #104]	; (20000e30 <main+0xc34>)
20000dc6:	681b      	ldr	r3, [r3, #0]
20000dc8:	001a      	movs	r2, r3
20000dca:	2301      	movs	r3, #1
20000dcc:	4013      	ands	r3, r2
20000dce:	d001      	beq.n	20000dd4 <main+0xbd8>
20000dd0:	f000 fd29 	bl	20001826 <main+0x162a>
					bird.yPos--;
20000dd4:	4b28      	ldr	r3, [pc, #160]	; (20000e78 <main+0xc7c>)
20000dd6:	2294      	movs	r2, #148	; 0x94
20000dd8:	00d2      	lsls	r2, r2, #3
20000dda:	4694      	mov	ip, r2
20000ddc:	44bc      	add	ip, r7
20000dde:	4463      	add	r3, ip
20000de0:	689b      	ldr	r3, [r3, #8]
20000de2:	1e5a      	subs	r2, r3, #1
20000de4:	4b24      	ldr	r3, [pc, #144]	; (20000e78 <main+0xc7c>)
20000de6:	2194      	movs	r1, #148	; 0x94
20000de8:	00c9      	lsls	r1, r1, #3
20000dea:	468c      	mov	ip, r1
20000dec:	44bc      	add	ip, r7
20000dee:	4463      	add	r3, ip
20000df0:	609a      	str	r2, [r3, #8]
				}
				
				break;
20000df2:	f000 fd18 	bl	20001826 <main+0x162a>
				
			case GAME_SCREEN: //inside
				
				counter++;
20000df6:	4b0e      	ldr	r3, [pc, #56]	; (20000e30 <main+0xc34>)
20000df8:	681b      	ldr	r3, [r3, #0]
20000dfa:	1c5a      	adds	r2, r3, #1
20000dfc:	4b0c      	ldr	r3, [pc, #48]	; (20000e30 <main+0xc34>)
20000dfe:	601a      	str	r2, [r3, #0]
				if(read_DIL_single( LIGHT_TRIGGER )) {
20000e00:	2006      	movs	r0, #6
20000e02:	f002 ff9d 	bl	20003d40 <read_DIL_single>
20000e06:	1e03      	subs	r3, r0, #0
20000e08:	d03c      	beq.n	20000e84 <main+0xc88>
					draw_game_object( &indoors2 );
20000e0a:	23d2      	movs	r3, #210	; 0xd2
20000e0c:	009b      	lsls	r3, r3, #2
20000e0e:	18fb      	adds	r3, r7, r3
20000e10:	0018      	movs	r0, r3
20000e12:	f002 fedb 	bl	20003bcc <draw_game_object>
					ascii_write("*click*","");
20000e16:	4a19      	ldr	r2, [pc, #100]	; (20000e7c <main+0xc80>)
20000e18:	4b19      	ldr	r3, [pc, #100]	; (20000e80 <main+0xc84>)
20000e1a:	0011      	movs	r1, r2
20000e1c:	0018      	movs	r0, r3
20000e1e:	f003 f981 	bl	20004124 <ascii_write>
20000e22:	e03b      	b.n	20000e9c <main+0xca0>
20000e24:	200087e8 	andcs	r8, r0, r8, ror #15
20000e28:	200087e4 	andcs	r8, r0, r4, ror #15
20000e2c:	200087ec 	andcs	r8, r0, ip, ror #15
20000e30:	200047b8 			; <UNDEFINED> instruction: 0x200047b8
20000e34:	fffffc04 			; <UNDEFINED> instruction: 0xfffffc04
20000e38:	fffffbf0 			; <UNDEFINED> instruction: 0xfffffbf0
20000e3c:	fffffbdc 			; <UNDEFINED> instruction: 0xfffffbdc
20000e40:	fffffbc8 			; <UNDEFINED> instruction: 0xfffffbc8
20000e44:	fffffbb4 			; <UNDEFINED> instruction: 0xfffffbb4
20000e48:	fffffba0 			; <UNDEFINED> instruction: 0xfffffba0
20000e4c:	fffffb8c 			; <UNDEFINED> instruction: 0xfffffb8c
20000e50:	fffffb64 			; <UNDEFINED> instruction: 0xfffffb64
20000e54:	fffffb78 			; <UNDEFINED> instruction: 0xfffffb78
20000e58:	200087e0 	andcs	r8, r0, r0, ror #15
20000e5c:	200048bc 			; <UNDEFINED> instruction: 0x200048bc
20000e60:	2000e840 	andcs	lr, r0, r0, asr #16
20000e64:	2000e858 	andcs	lr, r0, r8, asr r8
20000e68:	fffffdac 			; <UNDEFINED> instruction: 0xfffffdac
20000e6c:	fffffd88 			; <UNDEFINED> instruction: 0xfffffd88
20000e70:	fffffd40 			; <UNDEFINED> instruction: 0xfffffd40
20000e74:	fffffd64 			; <UNDEFINED> instruction: 0xfffffd64
20000e78:	fffffe3c 			; <UNDEFINED> instruction: 0xfffffe3c
20000e7c:	2000e86c 	andcs	lr, r0, ip, ror #16
20000e80:	2000e870 	andcs	lr, r0, r0, ror r8
				} else {
					draw_game_object( &indoors );
20000e84:	23db      	movs	r3, #219	; 0xdb
20000e86:	009b      	lsls	r3, r3, #2
20000e88:	18fb      	adds	r3, r7, r3
20000e8a:	0018      	movs	r0, r3
20000e8c:	f002 fe9e 	bl	20003bcc <draw_game_object>
					draw_game_object( &trophy );
20000e90:	23c9      	movs	r3, #201	; 0xc9
20000e92:	009b      	lsls	r3, r3, #2
20000e94:	18fb      	adds	r3, r7, r3
20000e96:	0018      	movs	r0, r3
20000e98:	f002 fe98 	bl	20003bcc <draw_game_object>
				}
				
				if(!no_DIP)
20000e9c:	4be2      	ldr	r3, [pc, #904]	; (20001228 <main+0x102c>)
20000e9e:	18fb      	adds	r3, r7, r3
20000ea0:	681b      	ldr	r3, [r3, #0]
20000ea2:	2b00      	cmp	r3, #0
20000ea4:	d105      	bne.n	20000eb2 <main+0xcb6>
					draw_game_object( &DIP );
20000ea6:	23a5      	movs	r3, #165	; 0xa5
20000ea8:	009b      	lsls	r3, r3, #2
20000eaa:	18fb      	adds	r3, r7, r3
20000eac:	0018      	movs	r0, r3
20000eae:	f002 fe8d 	bl	20003bcc <draw_game_object>
				draw_game_object( &player );
20000eb2:	239c      	movs	r3, #156	; 0x9c
20000eb4:	009b      	lsls	r3, r3, #2
20000eb6:	18fb      	adds	r3, r7, r3
20000eb8:	0018      	movs	r0, r3
20000eba:	f002 fe87 	bl	20003bcc <draw_game_object>
				static int i;
				for(i = 0; i < 3; i++) {
20000ebe:	4bdb      	ldr	r3, [pc, #876]	; (2000122c <main+0x1030>)
20000ec0:	2200      	movs	r2, #0
20000ec2:	601a      	str	r2, [r3, #0]
20000ec4:	e02b      	b.n	20000f1e <main+0xd22>
					draw_game_object( &fires[i] );
20000ec6:	4bd9      	ldr	r3, [pc, #868]	; (2000122c <main+0x1030>)
20000ec8:	681a      	ldr	r2, [r3, #0]
20000eca:	2384      	movs	r3, #132	; 0x84
20000ecc:	005b      	lsls	r3, r3, #1
20000ece:	18f9      	adds	r1, r7, r3
20000ed0:	0013      	movs	r3, r2
20000ed2:	00db      	lsls	r3, r3, #3
20000ed4:	189b      	adds	r3, r3, r2
20000ed6:	009b      	lsls	r3, r3, #2
20000ed8:	18cb      	adds	r3, r1, r3
20000eda:	0018      	movs	r0, r3
20000edc:	f002 fe76 	bl	20003bcc <draw_game_object>
					fires[i].update( &fires[i] );
20000ee0:	4bd2      	ldr	r3, [pc, #840]	; (2000122c <main+0x1030>)
20000ee2:	681a      	ldr	r2, [r3, #0]
20000ee4:	4bd2      	ldr	r3, [pc, #840]	; (20001230 <main+0x1034>)
20000ee6:	2194      	movs	r1, #148	; 0x94
20000ee8:	00c9      	lsls	r1, r1, #3
20000eea:	1879      	adds	r1, r7, r1
20000eec:	18c9      	adds	r1, r1, r3
20000eee:	0013      	movs	r3, r2
20000ef0:	00db      	lsls	r3, r3, #3
20000ef2:	189b      	adds	r3, r3, r2
20000ef4:	009b      	lsls	r3, r3, #2
20000ef6:	18cb      	adds	r3, r1, r3
20000ef8:	330c      	adds	r3, #12
20000efa:	6819      	ldr	r1, [r3, #0]
20000efc:	4bcb      	ldr	r3, [pc, #812]	; (2000122c <main+0x1030>)
20000efe:	681a      	ldr	r2, [r3, #0]
20000f00:	2384      	movs	r3, #132	; 0x84
20000f02:	005b      	lsls	r3, r3, #1
20000f04:	18f8      	adds	r0, r7, r3
20000f06:	0013      	movs	r3, r2
20000f08:	00db      	lsls	r3, r3, #3
20000f0a:	189b      	adds	r3, r3, r2
20000f0c:	009b      	lsls	r3, r3, #2
20000f0e:	18c3      	adds	r3, r0, r3
20000f10:	0018      	movs	r0, r3
20000f12:	4788      	blx	r1
				for(i = 0; i < 3; i++) {
20000f14:	4bc5      	ldr	r3, [pc, #788]	; (2000122c <main+0x1030>)
20000f16:	681b      	ldr	r3, [r3, #0]
20000f18:	1c5a      	adds	r2, r3, #1
20000f1a:	4bc4      	ldr	r3, [pc, #784]	; (2000122c <main+0x1030>)
20000f1c:	601a      	str	r2, [r3, #0]
20000f1e:	4bc3      	ldr	r3, [pc, #780]	; (2000122c <main+0x1030>)
20000f20:	681b      	ldr	r3, [r3, #0]
20000f22:	2b02      	cmp	r3, #2
20000f24:	ddcf      	ble.n	20000ec6 <main+0xcca>
				}
				draw_game_object( &hair );
20000f26:	23c0      	movs	r3, #192	; 0xc0
20000f28:	009b      	lsls	r3, r3, #2
20000f2a:	18fb      	adds	r3, r7, r3
20000f2c:	0018      	movs	r0, r3
20000f2e:	f002 fe4d 	bl	20003bcc <draw_game_object>
				if(exploding) {
20000f32:	2391      	movs	r3, #145	; 0x91
20000f34:	00db      	lsls	r3, r3, #3
20000f36:	18fb      	adds	r3, r7, r3
20000f38:	681b      	ldr	r3, [r3, #0]
20000f3a:	2b00      	cmp	r3, #0
20000f3c:	d055      	beq.n	20000fea <main+0xdee>
					if (first) {
20000f3e:	4bbd      	ldr	r3, [pc, #756]	; (20001234 <main+0x1038>)
20000f40:	18fb      	adds	r3, r7, r3
20000f42:	681b      	ldr	r3, [r3, #0]
20000f44:	2b00      	cmp	r3, #0
20000f46:	d035      	beq.n	20000fb4 <main+0xdb8>
						boom.xPos = player.xPos + 9 - 53;
20000f48:	4bbb      	ldr	r3, [pc, #748]	; (20001238 <main+0x103c>)
20000f4a:	2294      	movs	r2, #148	; 0x94
20000f4c:	00d2      	lsls	r2, r2, #3
20000f4e:	4694      	mov	ip, r2
20000f50:	44bc      	add	ip, r7
20000f52:	4463      	add	r3, ip
20000f54:	685b      	ldr	r3, [r3, #4]
20000f56:	3b2c      	subs	r3, #44	; 0x2c
20000f58:	001a      	movs	r2, r3
20000f5a:	4bb8      	ldr	r3, [pc, #736]	; (2000123c <main+0x1040>)
20000f5c:	2194      	movs	r1, #148	; 0x94
20000f5e:	00c9      	lsls	r1, r1, #3
20000f60:	468c      	mov	ip, r1
20000f62:	44bc      	add	ip, r7
20000f64:	4463      	add	r3, ip
20000f66:	605a      	str	r2, [r3, #4]
						boom.yPos = player.yPos + 9 - 27;
20000f68:	4bb3      	ldr	r3, [pc, #716]	; (20001238 <main+0x103c>)
20000f6a:	2294      	movs	r2, #148	; 0x94
20000f6c:	00d2      	lsls	r2, r2, #3
20000f6e:	4694      	mov	ip, r2
20000f70:	44bc      	add	ip, r7
20000f72:	4463      	add	r3, ip
20000f74:	689b      	ldr	r3, [r3, #8]
20000f76:	3b12      	subs	r3, #18
20000f78:	001a      	movs	r2, r3
20000f7a:	4bb0      	ldr	r3, [pc, #704]	; (2000123c <main+0x1040>)
20000f7c:	2194      	movs	r1, #148	; 0x94
20000f7e:	00c9      	lsls	r1, r1, #3
20000f80:	468c      	mov	ip, r1
20000f82:	44bc      	add	ip, r7
20000f84:	4463      	add	r3, ip
20000f86:	609a      	str	r2, [r3, #8]
						player.xPos = -100;
20000f88:	4bab      	ldr	r3, [pc, #684]	; (20001238 <main+0x103c>)
20000f8a:	2294      	movs	r2, #148	; 0x94
20000f8c:	00d2      	lsls	r2, r2, #3
20000f8e:	4694      	mov	ip, r2
20000f90:	44bc      	add	ip, r7
20000f92:	4463      	add	r3, ip
20000f94:	2264      	movs	r2, #100	; 0x64
20000f96:	4252      	negs	r2, r2
20000f98:	605a      	str	r2, [r3, #4]
						player.yPos = -100;
20000f9a:	4ba7      	ldr	r3, [pc, #668]	; (20001238 <main+0x103c>)
20000f9c:	2294      	movs	r2, #148	; 0x94
20000f9e:	00d2      	lsls	r2, r2, #3
20000fa0:	4694      	mov	ip, r2
20000fa2:	44bc      	add	ip, r7
20000fa4:	4463      	add	r3, ip
20000fa6:	2264      	movs	r2, #100	; 0x64
20000fa8:	4252      	negs	r2, r2
20000faa:	609a      	str	r2, [r3, #8]
						first = 0;
20000fac:	2300      	movs	r3, #0
20000fae:	4aa1      	ldr	r2, [pc, #644]	; (20001234 <main+0x1038>)
20000fb0:	18ba      	adds	r2, r7, r2
20000fb2:	6013      	str	r3, [r2, #0]
					}					
					draw_game_object( &boom );
20000fb4:	23ae      	movs	r3, #174	; 0xae
20000fb6:	009b      	lsls	r3, r3, #2
20000fb8:	18fb      	adds	r3, r7, r3
20000fba:	0018      	movs	r0, r3
20000fbc:	f002 fe06 	bl	20003bcc <draw_game_object>
					if(boom.current_frame < 10)
20000fc0:	4b9e      	ldr	r3, [pc, #632]	; (2000123c <main+0x1040>)
20000fc2:	2294      	movs	r2, #148	; 0x94
20000fc4:	00d2      	lsls	r2, r2, #3
20000fc6:	4694      	mov	ip, r2
20000fc8:	44bc      	add	ip, r7
20000fca:	4463      	add	r3, ip
20000fcc:	695b      	ldr	r3, [r3, #20]
20000fce:	2b09      	cmp	r3, #9
20000fd0:	dc0b      	bgt.n	20000fea <main+0xdee>
						boom.update( &boom );
20000fd2:	4b9a      	ldr	r3, [pc, #616]	; (2000123c <main+0x1040>)
20000fd4:	2294      	movs	r2, #148	; 0x94
20000fd6:	00d2      	lsls	r2, r2, #3
20000fd8:	4694      	mov	ip, r2
20000fda:	44bc      	add	ip, r7
20000fdc:	4463      	add	r3, ip
20000fde:	68db      	ldr	r3, [r3, #12]
20000fe0:	22ae      	movs	r2, #174	; 0xae
20000fe2:	0092      	lsls	r2, r2, #2
20000fe4:	18ba      	adds	r2, r7, r2
20000fe6:	0010      	movs	r0, r2
20000fe8:	4798      	blx	r3
				}
				
				show_frame(1);
20000fea:	2001      	movs	r0, #1
20000fec:	f002 fe2f 	bl	20003c4e <show_frame>
				
				static int last_climb_value = 100;
				if((read_DIL_single(CLIMB_TRIGGER) != last_climb_value) && player.xPos > 90 && player.xPos < 108 && !has_climbed) {
20000ff0:	2004      	movs	r0, #4
20000ff2:	f002 fea5 	bl	20003d40 <read_DIL_single>
20000ff6:	0002      	movs	r2, r0
20000ff8:	4b91      	ldr	r3, [pc, #580]	; (20001240 <main+0x1044>)
20000ffa:	681b      	ldr	r3, [r3, #0]
20000ffc:	429a      	cmp	r2, r3
20000ffe:	d023      	beq.n	20001048 <main+0xe4c>
20001000:	4b8d      	ldr	r3, [pc, #564]	; (20001238 <main+0x103c>)
20001002:	2294      	movs	r2, #148	; 0x94
20001004:	00d2      	lsls	r2, r2, #3
20001006:	4694      	mov	ip, r2
20001008:	44bc      	add	ip, r7
2000100a:	4463      	add	r3, ip
2000100c:	685b      	ldr	r3, [r3, #4]
2000100e:	2b5a      	cmp	r3, #90	; 0x5a
20001010:	dd1a      	ble.n	20001048 <main+0xe4c>
20001012:	4b89      	ldr	r3, [pc, #548]	; (20001238 <main+0x103c>)
20001014:	2294      	movs	r2, #148	; 0x94
20001016:	00d2      	lsls	r2, r2, #3
20001018:	4694      	mov	ip, r2
2000101a:	44bc      	add	ip, r7
2000101c:	4463      	add	r3, ip
2000101e:	685b      	ldr	r3, [r3, #4]
20001020:	2b6b      	cmp	r3, #107	; 0x6b
20001022:	dc11      	bgt.n	20001048 <main+0xe4c>
20001024:	2393      	movs	r3, #147	; 0x93
20001026:	00db      	lsls	r3, r3, #3
20001028:	18fb      	adds	r3, r7, r3
2000102a:	681b      	ldr	r3, [r3, #0]
2000102c:	2b00      	cmp	r3, #0
2000102e:	d10b      	bne.n	20001048 <main+0xe4c>
					is_climbing = 1;
20001030:	2301      	movs	r3, #1
20001032:	4a84      	ldr	r2, [pc, #528]	; (20001244 <main+0x1048>)
20001034:	18ba      	adds	r2, r7, r2
20001036:	6013      	str	r3, [r2, #0]
					player.xPos = 98;
20001038:	4b7f      	ldr	r3, [pc, #508]	; (20001238 <main+0x103c>)
2000103a:	2294      	movs	r2, #148	; 0x94
2000103c:	00d2      	lsls	r2, r2, #3
2000103e:	4694      	mov	ip, r2
20001040:	44bc      	add	ip, r7
20001042:	4463      	add	r3, ip
20001044:	2262      	movs	r2, #98	; 0x62
20001046:	605a      	str	r2, [r3, #4]
				}
				last_climb_value = read_DIL_single(CLIMB_TRIGGER);
20001048:	2004      	movs	r0, #4
2000104a:	f002 fe79 	bl	20003d40 <read_DIL_single>
2000104e:	0002      	movs	r2, r0
20001050:	4b7b      	ldr	r3, [pc, #492]	; (20001240 <main+0x1044>)
20001052:	601a      	str	r2, [r3, #0]
				
				if(is_climbing) {
20001054:	4b7b      	ldr	r3, [pc, #492]	; (20001244 <main+0x1048>)
20001056:	18fb      	adds	r3, r7, r3
20001058:	681b      	ldr	r3, [r3, #0]
2000105a:	2b00      	cmp	r3, #0
2000105c:	d060      	beq.n	20001120 <main+0xf24>
					gameObjectUpdate( &player );
2000105e:	239c      	movs	r3, #156	; 0x9c
20001060:	009b      	lsls	r3, r3, #2
20001062:	18fb      	adds	r3, r7, r3
20001064:	0018      	movs	r0, r3
20001066:	f000 fc19 	bl	2000189c <gameObjectUpdate>
					if (player.yPos % 6 == 0){
2000106a:	4b73      	ldr	r3, [pc, #460]	; (20001238 <main+0x103c>)
2000106c:	2294      	movs	r2, #148	; 0x94
2000106e:	00d2      	lsls	r2, r2, #3
20001070:	4694      	mov	ip, r2
20001072:	44bc      	add	ip, r7
20001074:	4463      	add	r3, ip
20001076:	689b      	ldr	r3, [r3, #8]
20001078:	2106      	movs	r1, #6
2000107a:	0018      	movs	r0, r3
2000107c:	f003 fb96 	bl	200047ac <__aeabi_idivmod>
20001080:	1e0b      	subs	r3, r1, #0
20001082:	d106      	bne.n	20001092 <main+0xe96>
						ascii_write("*tipp*","");
20001084:	4a70      	ldr	r2, [pc, #448]	; (20001248 <main+0x104c>)
20001086:	4b71      	ldr	r3, [pc, #452]	; (2000124c <main+0x1050>)
20001088:	0011      	movs	r1, r2
2000108a:	0018      	movs	r0, r3
2000108c:	f003 f84a 	bl	20004124 <ascii_write>
20001090:	e013      	b.n	200010ba <main+0xebe>
					}
					else if (player.yPos % 6 == 3) {
20001092:	4b69      	ldr	r3, [pc, #420]	; (20001238 <main+0x103c>)
20001094:	2294      	movs	r2, #148	; 0x94
20001096:	00d2      	lsls	r2, r2, #3
20001098:	4694      	mov	ip, r2
2000109a:	44bc      	add	ip, r7
2000109c:	4463      	add	r3, ip
2000109e:	689b      	ldr	r3, [r3, #8]
200010a0:	2106      	movs	r1, #6
200010a2:	0018      	movs	r0, r3
200010a4:	f003 fb82 	bl	200047ac <__aeabi_idivmod>
200010a8:	000b      	movs	r3, r1
200010aa:	2b03      	cmp	r3, #3
200010ac:	d105      	bne.n	200010ba <main+0xebe>
						ascii_write("*tapp*","");
200010ae:	4a66      	ldr	r2, [pc, #408]	; (20001248 <main+0x104c>)
200010b0:	4b67      	ldr	r3, [pc, #412]	; (20001250 <main+0x1054>)
200010b2:	0011      	movs	r1, r2
200010b4:	0018      	movs	r0, r3
200010b6:	f003 f835 	bl	20004124 <ascii_write>
					}
					if(player.yPos > 4) {
200010ba:	4b5f      	ldr	r3, [pc, #380]	; (20001238 <main+0x103c>)
200010bc:	2294      	movs	r2, #148	; 0x94
200010be:	00d2      	lsls	r2, r2, #3
200010c0:	4694      	mov	ip, r2
200010c2:	44bc      	add	ip, r7
200010c4:	4463      	add	r3, ip
200010c6:	689b      	ldr	r3, [r3, #8]
200010c8:	2b04      	cmp	r3, #4
200010ca:	dd0f      	ble.n	200010ec <main+0xef0>
						player.yPos--;
200010cc:	4b5a      	ldr	r3, [pc, #360]	; (20001238 <main+0x103c>)
200010ce:	2294      	movs	r2, #148	; 0x94
200010d0:	00d2      	lsls	r2, r2, #3
200010d2:	4694      	mov	ip, r2
200010d4:	44bc      	add	ip, r7
200010d6:	4463      	add	r3, ip
200010d8:	689b      	ldr	r3, [r3, #8]
200010da:	1e5a      	subs	r2, r3, #1
200010dc:	4b56      	ldr	r3, [pc, #344]	; (20001238 <main+0x103c>)
200010de:	2194      	movs	r1, #148	; 0x94
200010e0:	00c9      	lsls	r1, r1, #3
200010e2:	468c      	mov	ip, r1
200010e4:	44bc      	add	ip, r7
200010e6:	4463      	add	r3, ip
200010e8:	609a      	str	r2, [r3, #8]
200010ea:	e025      	b.n	20001138 <main+0xf3c>
					} else {	//Stay at top level and disable climbing forever!
						player.yPos = 5;
200010ec:	4b52      	ldr	r3, [pc, #328]	; (20001238 <main+0x103c>)
200010ee:	2294      	movs	r2, #148	; 0x94
200010f0:	00d2      	lsls	r2, r2, #3
200010f2:	4694      	mov	ip, r2
200010f4:	44bc      	add	ip, r7
200010f6:	4463      	add	r3, ip
200010f8:	2205      	movs	r2, #5
200010fa:	609a      	str	r2, [r3, #8]
						player.xPos = 96;
200010fc:	4b4e      	ldr	r3, [pc, #312]	; (20001238 <main+0x103c>)
200010fe:	2294      	movs	r2, #148	; 0x94
20001100:	00d2      	lsls	r2, r2, #3
20001102:	4694      	mov	ip, r2
20001104:	44bc      	add	ip, r7
20001106:	4463      	add	r3, ip
20001108:	2260      	movs	r2, #96	; 0x60
2000110a:	605a      	str	r2, [r3, #4]
						is_climbing = 0;
2000110c:	2300      	movs	r3, #0
2000110e:	4a4d      	ldr	r2, [pc, #308]	; (20001244 <main+0x1048>)
20001110:	18ba      	adds	r2, r7, r2
20001112:	6013      	str	r3, [r2, #0]
						has_climbed = 1;
20001114:	2301      	movs	r3, #1
20001116:	2293      	movs	r2, #147	; 0x93
20001118:	00d2      	lsls	r2, r2, #3
2000111a:	18ba      	adds	r2, r7, r2
2000111c:	6013      	str	r3, [r2, #0]
2000111e:	e00b      	b.n	20001138 <main+0xf3c>
					}
				} else {
					player.update(&player);
20001120:	4b45      	ldr	r3, [pc, #276]	; (20001238 <main+0x103c>)
20001122:	2294      	movs	r2, #148	; 0x94
20001124:	00d2      	lsls	r2, r2, #3
20001126:	4694      	mov	ip, r2
20001128:	44bc      	add	ip, r7
2000112a:	4463      	add	r3, ip
2000112c:	68db      	ldr	r3, [r3, #12]
2000112e:	229c      	movs	r2, #156	; 0x9c
20001130:	0092      	lsls	r2, r2, #2
20001132:	18ba      	adds	r2, r7, r2
20001134:	0010      	movs	r0, r2
20001136:	4798      	blx	r3
				}
				
				if (trophy.yPos >= player.yPos && (player.xPos + PLAYER_WIDTH/2 >= trophy.xPos && player.xPos <= trophy.xPos + PLAYER_WIDTH/2 )) {
20001138:	4b46      	ldr	r3, [pc, #280]	; (20001254 <main+0x1058>)
2000113a:	2294      	movs	r2, #148	; 0x94
2000113c:	00d2      	lsls	r2, r2, #3
2000113e:	4694      	mov	ip, r2
20001140:	44bc      	add	ip, r7
20001142:	4463      	add	r3, ip
20001144:	689a      	ldr	r2, [r3, #8]
20001146:	4b3c      	ldr	r3, [pc, #240]	; (20001238 <main+0x103c>)
20001148:	2194      	movs	r1, #148	; 0x94
2000114a:	00c9      	lsls	r1, r1, #3
2000114c:	468c      	mov	ip, r1
2000114e:	44bc      	add	ip, r7
20001150:	4463      	add	r3, ip
20001152:	689b      	ldr	r3, [r3, #8]
20001154:	429a      	cmp	r2, r3
20001156:	db28      	blt.n	200011aa <main+0xfae>
20001158:	4b37      	ldr	r3, [pc, #220]	; (20001238 <main+0x103c>)
2000115a:	2294      	movs	r2, #148	; 0x94
2000115c:	00d2      	lsls	r2, r2, #3
2000115e:	4694      	mov	ip, r2
20001160:	44bc      	add	ip, r7
20001162:	4463      	add	r3, ip
20001164:	685b      	ldr	r3, [r3, #4]
20001166:	3309      	adds	r3, #9
20001168:	001a      	movs	r2, r3
2000116a:	4b3a      	ldr	r3, [pc, #232]	; (20001254 <main+0x1058>)
2000116c:	2194      	movs	r1, #148	; 0x94
2000116e:	00c9      	lsls	r1, r1, #3
20001170:	468c      	mov	ip, r1
20001172:	44bc      	add	ip, r7
20001174:	4463      	add	r3, ip
20001176:	685b      	ldr	r3, [r3, #4]
20001178:	429a      	cmp	r2, r3
2000117a:	db16      	blt.n	200011aa <main+0xfae>
2000117c:	4b2e      	ldr	r3, [pc, #184]	; (20001238 <main+0x103c>)
2000117e:	2294      	movs	r2, #148	; 0x94
20001180:	00d2      	lsls	r2, r2, #3
20001182:	4694      	mov	ip, r2
20001184:	44bc      	add	ip, r7
20001186:	4463      	add	r3, ip
20001188:	685a      	ldr	r2, [r3, #4]
2000118a:	4b32      	ldr	r3, [pc, #200]	; (20001254 <main+0x1058>)
2000118c:	2194      	movs	r1, #148	; 0x94
2000118e:	00c9      	lsls	r1, r1, #3
20001190:	468c      	mov	ip, r1
20001192:	44bc      	add	ip, r7
20001194:	4463      	add	r3, ip
20001196:	685b      	ldr	r3, [r3, #4]
20001198:	3309      	adds	r3, #9
2000119a:	429a      	cmp	r2, r3
2000119c:	dc05      	bgt.n	200011aa <main+0xfae>
					ascii_write("Daffo: I need magic ","to grab the trophy!");
2000119e:	4a2e      	ldr	r2, [pc, #184]	; (20001258 <main+0x105c>)
200011a0:	4b2e      	ldr	r3, [pc, #184]	; (2000125c <main+0x1060>)
200011a2:	0011      	movs	r1, r2
200011a4:	0018      	movs	r0, r3
200011a6:	f002 ffbd 	bl	20004124 <ascii_write>
				}
				
				if (read_DIL_single(EXPLOSION_TRIGGER)){
200011aa:	2003      	movs	r0, #3
200011ac:	f002 fdc8 	bl	20003d40 <read_DIL_single>
200011b0:	1e03      	subs	r3, r0, #0
200011b2:	d067      	beq.n	20001284 <main+0x1088>
					if (trophy.yPos >= player.yPos && (player.xPos + PLAYER_WIDTH/2 >= trophy.xPos && player.xPos <= trophy.xPos + PLAYER_WIDTH/2 )){
200011b4:	4b27      	ldr	r3, [pc, #156]	; (20001254 <main+0x1058>)
200011b6:	2294      	movs	r2, #148	; 0x94
200011b8:	00d2      	lsls	r2, r2, #3
200011ba:	4694      	mov	ip, r2
200011bc:	44bc      	add	ip, r7
200011be:	4463      	add	r3, ip
200011c0:	689a      	ldr	r2, [r3, #8]
200011c2:	4b1d      	ldr	r3, [pc, #116]	; (20001238 <main+0x103c>)
200011c4:	2194      	movs	r1, #148	; 0x94
200011c6:	00c9      	lsls	r1, r1, #3
200011c8:	468c      	mov	ip, r1
200011ca:	44bc      	add	ip, r7
200011cc:	4463      	add	r3, ip
200011ce:	689b      	ldr	r3, [r3, #8]
200011d0:	429a      	cmp	r2, r3
200011d2:	db47      	blt.n	20001264 <main+0x1068>
200011d4:	4b18      	ldr	r3, [pc, #96]	; (20001238 <main+0x103c>)
200011d6:	2294      	movs	r2, #148	; 0x94
200011d8:	00d2      	lsls	r2, r2, #3
200011da:	4694      	mov	ip, r2
200011dc:	44bc      	add	ip, r7
200011de:	4463      	add	r3, ip
200011e0:	685b      	ldr	r3, [r3, #4]
200011e2:	3309      	adds	r3, #9
200011e4:	001a      	movs	r2, r3
200011e6:	4b1b      	ldr	r3, [pc, #108]	; (20001254 <main+0x1058>)
200011e8:	2194      	movs	r1, #148	; 0x94
200011ea:	00c9      	lsls	r1, r1, #3
200011ec:	468c      	mov	ip, r1
200011ee:	44bc      	add	ip, r7
200011f0:	4463      	add	r3, ip
200011f2:	685b      	ldr	r3, [r3, #4]
200011f4:	429a      	cmp	r2, r3
200011f6:	db35      	blt.n	20001264 <main+0x1068>
200011f8:	4b0f      	ldr	r3, [pc, #60]	; (20001238 <main+0x103c>)
200011fa:	2294      	movs	r2, #148	; 0x94
200011fc:	00d2      	lsls	r2, r2, #3
200011fe:	4694      	mov	ip, r2
20001200:	44bc      	add	ip, r7
20001202:	4463      	add	r3, ip
20001204:	685a      	ldr	r2, [r3, #4]
20001206:	4b13      	ldr	r3, [pc, #76]	; (20001254 <main+0x1058>)
20001208:	2194      	movs	r1, #148	; 0x94
2000120a:	00c9      	lsls	r1, r1, #3
2000120c:	468c      	mov	ip, r1
2000120e:	44bc      	add	ip, r7
20001210:	4463      	add	r3, ip
20001212:	685b      	ldr	r3, [r3, #4]
20001214:	3309      	adds	r3, #9
20001216:	429a      	cmp	r2, r3
20001218:	dc24      	bgt.n	20001264 <main+0x1068>
						//TODO WIN
						ascii_write("PLACEHOLDER DU VANN","");
2000121a:	4a0b      	ldr	r2, [pc, #44]	; (20001248 <main+0x104c>)
2000121c:	4b10      	ldr	r3, [pc, #64]	; (20001260 <main+0x1064>)
2000121e:	0011      	movs	r1, r2
20001220:	0018      	movs	r0, r3
20001222:	f002 ff7f 	bl	20004124 <ascii_write>
20001226:	e02d      	b.n	20001284 <main+0x1088>
20001228:	0000048c 	andeq	r0, r0, ip, lsl #9
2000122c:	200047bc 			; <UNDEFINED> instruction: 0x200047bc
20001230:	fffffc68 			; <UNDEFINED> instruction: 0xfffffc68
20001234:	00000484 	andeq	r0, r0, r4, lsl #9
20001238:	fffffdd0 			; <UNDEFINED> instruction: 0xfffffdd0
2000123c:	fffffe18 			; <UNDEFINED> instruction: 0xfffffe18
20001240:	200087f0 	strdcs	r8, [r0], -r0
20001244:	0000049c 	muleq	r0, ip, r4
20001248:	2000e86c 	andcs	lr, r0, ip, ror #16
2000124c:	2000e878 	andcs	lr, r0, r8, ror r8
20001250:	2000e880 	andcs	lr, r0, r0, lsl #17
20001254:	fffffe84 			; <UNDEFINED> instruction: 0xfffffe84
20001258:	2000e888 	andcs	lr, r0, r8, lsl #17
2000125c:	2000e89c 	mulcs	r0, ip, r8
20001260:	2000e8b4 			; <UNDEFINED> instruction: 0x2000e8b4
					}
					else{
						game_over_adder = 3;
20001264:	2303      	movs	r3, #3
20001266:	2292      	movs	r2, #146	; 0x92
20001268:	00d2      	lsls	r2, r2, #3
2000126a:	18ba      	adds	r2, r7, r2
2000126c:	6013      	str	r3, [r2, #0]
						ascii_write("*KABOOOOM*","");
2000126e:	4a61      	ldr	r2, [pc, #388]	; (200013f4 <main+0x11f8>)
20001270:	4b61      	ldr	r3, [pc, #388]	; (200013f8 <main+0x11fc>)
20001272:	0011      	movs	r1, r2
20001274:	0018      	movs	r0, r3
20001276:	f002 ff55 	bl	20004124 <ascii_write>
						exploding = 1;
2000127a:	2301      	movs	r3, #1
2000127c:	2291      	movs	r2, #145	; 0x91
2000127e:	00d2      	lsls	r2, r2, #3
20001280:	18ba      	adds	r2, r7, r2
20001282:	6013      	str	r3, [r2, #0]
					}
				}
				
				//fire1_indoors.update(&fire1_indoors);
				//fire updates done above
				if(!no_DIP) {
20001284:	4b5d      	ldr	r3, [pc, #372]	; (200013fc <main+0x1200>)
20001286:	18fb      	adds	r3, r7, r3
20001288:	681b      	ldr	r3, [r3, #0]
2000128a:	2b00      	cmp	r3, #0
2000128c:	d11d      	bne.n	200012ca <main+0x10ce>
					setPlayerPosition(player.xPos, player.yPos);
2000128e:	4b5c      	ldr	r3, [pc, #368]	; (20001400 <main+0x1204>)
20001290:	2294      	movs	r2, #148	; 0x94
20001292:	00d2      	lsls	r2, r2, #3
20001294:	4694      	mov	ip, r2
20001296:	44bc      	add	ip, r7
20001298:	4463      	add	r3, ip
2000129a:	685a      	ldr	r2, [r3, #4]
2000129c:	4b58      	ldr	r3, [pc, #352]	; (20001400 <main+0x1204>)
2000129e:	2194      	movs	r1, #148	; 0x94
200012a0:	00c9      	lsls	r1, r1, #3
200012a2:	468c      	mov	ip, r1
200012a4:	44bc      	add	ip, r7
200012a6:	4463      	add	r3, ip
200012a8:	689b      	ldr	r3, [r3, #8]
200012aa:	0019      	movs	r1, r3
200012ac:	0010      	movs	r0, r2
200012ae:	f001 f959 	bl	20002564 <setPlayerPosition>
					DIP.update(&DIP);					
200012b2:	4b54      	ldr	r3, [pc, #336]	; (20001404 <main+0x1208>)
200012b4:	2294      	movs	r2, #148	; 0x94
200012b6:	00d2      	lsls	r2, r2, #3
200012b8:	4694      	mov	ip, r2
200012ba:	44bc      	add	ip, r7
200012bc:	4463      	add	r3, ip
200012be:	68db      	ldr	r3, [r3, #12]
200012c0:	22a5      	movs	r2, #165	; 0xa5
200012c2:	0092      	lsls	r2, r2, #2
200012c4:	18ba      	adds	r2, r7, r2
200012c6:	0010      	movs	r0, r2
200012c8:	4798      	blx	r3
				}
				hair.update(&hair);
200012ca:	4b4f      	ldr	r3, [pc, #316]	; (20001408 <main+0x120c>)
200012cc:	2294      	movs	r2, #148	; 0x94
200012ce:	00d2      	lsls	r2, r2, #3
200012d0:	4694      	mov	ip, r2
200012d2:	44bc      	add	ip, r7
200012d4:	4463      	add	r3, ip
200012d6:	68db      	ldr	r3, [r3, #12]
200012d8:	22c0      	movs	r2, #192	; 0xc0
200012da:	0092      	lsls	r2, r2, #2
200012dc:	18ba      	adds	r2, r7, r2
200012de:	0010      	movs	r0, r2
200012e0:	4798      	blx	r3
				if(read_DIL_single(HAIR_TRIGGER)) {
200012e2:	2001      	movs	r0, #1
200012e4:	f002 fd2c 	bl	20003d40 <read_DIL_single>
200012e8:	1e03      	subs	r3, r0, #0
200012ea:	d02a      	beq.n	20001342 <main+0x1146>
					if (lastFireTrigger == 0){
200012ec:	2390      	movs	r3, #144	; 0x90
200012ee:	00db      	lsls	r3, r3, #3
200012f0:	18fb      	adds	r3, r7, r3
200012f2:	681b      	ldr	r3, [r3, #0]
200012f4:	2b00      	cmp	r3, #0
200012f6:	d105      	bne.n	20001304 <main+0x1108>
						ascii_write("*FwOOOo*","");
200012f8:	4a3e      	ldr	r2, [pc, #248]	; (200013f4 <main+0x11f8>)
200012fa:	4b44      	ldr	r3, [pc, #272]	; (2000140c <main+0x1210>)
200012fc:	0011      	movs	r1, r2
200012fe:	0018      	movs	r0, r3
20001300:	f002 ff10 	bl	20004124 <ascii_write>
					}
					hair.xPos = player.xPos;
20001304:	4b3e      	ldr	r3, [pc, #248]	; (20001400 <main+0x1204>)
20001306:	2294      	movs	r2, #148	; 0x94
20001308:	00d2      	lsls	r2, r2, #3
2000130a:	4694      	mov	ip, r2
2000130c:	44bc      	add	ip, r7
2000130e:	4463      	add	r3, ip
20001310:	685a      	ldr	r2, [r3, #4]
20001312:	4b3d      	ldr	r3, [pc, #244]	; (20001408 <main+0x120c>)
20001314:	2194      	movs	r1, #148	; 0x94
20001316:	00c9      	lsls	r1, r1, #3
20001318:	468c      	mov	ip, r1
2000131a:	44bc      	add	ip, r7
2000131c:	4463      	add	r3, ip
2000131e:	605a      	str	r2, [r3, #4]
					hair.yPos = player.yPos - 28;
20001320:	4b37      	ldr	r3, [pc, #220]	; (20001400 <main+0x1204>)
20001322:	2294      	movs	r2, #148	; 0x94
20001324:	00d2      	lsls	r2, r2, #3
20001326:	4694      	mov	ip, r2
20001328:	44bc      	add	ip, r7
2000132a:	4463      	add	r3, ip
2000132c:	689b      	ldr	r3, [r3, #8]
2000132e:	3b1c      	subs	r3, #28
20001330:	001a      	movs	r2, r3
20001332:	4b35      	ldr	r3, [pc, #212]	; (20001408 <main+0x120c>)
20001334:	2194      	movs	r1, #148	; 0x94
20001336:	00c9      	lsls	r1, r1, #3
20001338:	468c      	mov	ip, r1
2000133a:	44bc      	add	ip, r7
2000133c:	4463      	add	r3, ip
2000133e:	609a      	str	r2, [r3, #8]
20001340:	e011      	b.n	20001366 <main+0x116a>
				} else {
					hair.xPos = -100;
20001342:	4b31      	ldr	r3, [pc, #196]	; (20001408 <main+0x120c>)
20001344:	2294      	movs	r2, #148	; 0x94
20001346:	00d2      	lsls	r2, r2, #3
20001348:	4694      	mov	ip, r2
2000134a:	44bc      	add	ip, r7
2000134c:	4463      	add	r3, ip
2000134e:	2264      	movs	r2, #100	; 0x64
20001350:	4252      	negs	r2, r2
20001352:	605a      	str	r2, [r3, #4]
					hair.yPos = -100;
20001354:	4b2c      	ldr	r3, [pc, #176]	; (20001408 <main+0x120c>)
20001356:	2294      	movs	r2, #148	; 0x94
20001358:	00d2      	lsls	r2, r2, #3
2000135a:	4694      	mov	ip, r2
2000135c:	44bc      	add	ip, r7
2000135e:	4463      	add	r3, ip
20001360:	2264      	movs	r2, #100	; 0x64
20001362:	4252      	negs	r2, r2
20001364:	609a      	str	r2, [r3, #8]
				}
				
				
				
				if (!no_DIP && DIP.yPos >= player.yPos && (player.xPos + DIP_WIDTH/2 >= DIP.xPos && player.xPos <= DIP.xPos + DIP_WIDTH/2 )){ // DIP_collision
20001366:	4b25      	ldr	r3, [pc, #148]	; (200013fc <main+0x1200>)
20001368:	18fb      	adds	r3, r7, r3
2000136a:	681b      	ldr	r3, [r3, #0]
2000136c:	2b00      	cmp	r3, #0
2000136e:	d13d      	bne.n	200013ec <main+0x11f0>
20001370:	4b24      	ldr	r3, [pc, #144]	; (20001404 <main+0x1208>)
20001372:	2294      	movs	r2, #148	; 0x94
20001374:	00d2      	lsls	r2, r2, #3
20001376:	4694      	mov	ip, r2
20001378:	44bc      	add	ip, r7
2000137a:	4463      	add	r3, ip
2000137c:	689a      	ldr	r2, [r3, #8]
2000137e:	4b20      	ldr	r3, [pc, #128]	; (20001400 <main+0x1204>)
20001380:	2194      	movs	r1, #148	; 0x94
20001382:	00c9      	lsls	r1, r1, #3
20001384:	468c      	mov	ip, r1
20001386:	44bc      	add	ip, r7
20001388:	4463      	add	r3, ip
2000138a:	689b      	ldr	r3, [r3, #8]
2000138c:	429a      	cmp	r2, r3
2000138e:	db2d      	blt.n	200013ec <main+0x11f0>
20001390:	4b1b      	ldr	r3, [pc, #108]	; (20001400 <main+0x1204>)
20001392:	2294      	movs	r2, #148	; 0x94
20001394:	00d2      	lsls	r2, r2, #3
20001396:	4694      	mov	ip, r2
20001398:	44bc      	add	ip, r7
2000139a:	4463      	add	r3, ip
2000139c:	685b      	ldr	r3, [r3, #4]
2000139e:	3309      	adds	r3, #9
200013a0:	001a      	movs	r2, r3
200013a2:	4b18      	ldr	r3, [pc, #96]	; (20001404 <main+0x1208>)
200013a4:	2194      	movs	r1, #148	; 0x94
200013a6:	00c9      	lsls	r1, r1, #3
200013a8:	468c      	mov	ip, r1
200013aa:	44bc      	add	ip, r7
200013ac:	4463      	add	r3, ip
200013ae:	685b      	ldr	r3, [r3, #4]
200013b0:	429a      	cmp	r2, r3
200013b2:	db1b      	blt.n	200013ec <main+0x11f0>
200013b4:	4b12      	ldr	r3, [pc, #72]	; (20001400 <main+0x1204>)
200013b6:	2294      	movs	r2, #148	; 0x94
200013b8:	00d2      	lsls	r2, r2, #3
200013ba:	4694      	mov	ip, r2
200013bc:	44bc      	add	ip, r7
200013be:	4463      	add	r3, ip
200013c0:	685a      	ldr	r2, [r3, #4]
200013c2:	4b10      	ldr	r3, [pc, #64]	; (20001404 <main+0x1208>)
200013c4:	2194      	movs	r1, #148	; 0x94
200013c6:	00c9      	lsls	r1, r1, #3
200013c8:	468c      	mov	ip, r1
200013ca:	44bc      	add	ip, r7
200013cc:	4463      	add	r3, ip
200013ce:	685b      	ldr	r3, [r3, #4]
200013d0:	3309      	adds	r3, #9
200013d2:	429a      	cmp	r2, r3
200013d4:	dc0a      	bgt.n	200013ec <main+0x11f0>
					game_over_adder = 100;
200013d6:	2364      	movs	r3, #100	; 0x64
200013d8:	2292      	movs	r2, #146	; 0x92
200013da:	00d2      	lsls	r2, r2, #3
200013dc:	18ba      	adds	r2, r7, r2
200013de:	6013      	str	r3, [r2, #0]
					ascii_write("DIPs-WITCH:","      NyAHAHAHAH!");
200013e0:	4a0b      	ldr	r2, [pc, #44]	; (20001410 <main+0x1214>)
200013e2:	4b0c      	ldr	r3, [pc, #48]	; (20001414 <main+0x1218>)
200013e4:	0011      	movs	r1, r2
200013e6:	0018      	movs	r0, r3
200013e8:	f002 fe9c 	bl	20004124 <ascii_write>
				}
				
				static int distance_player_fire;	//fire_collision
				static int j;
				for(j = 0; j < 3; j++) {
200013ec:	4b0a      	ldr	r3, [pc, #40]	; (20001418 <main+0x121c>)
200013ee:	2200      	movs	r2, #0
200013f0:	601a      	str	r2, [r3, #0]
200013f2:	e075      	b.n	200014e0 <main+0x12e4>
200013f4:	2000e86c 	andcs	lr, r0, ip, ror #16
200013f8:	2000e8c8 	andcs	lr, r0, r8, asr #17
200013fc:	0000048c 	andeq	r0, r0, ip, lsl #9
20001400:	fffffdd0 			; <UNDEFINED> instruction: 0xfffffdd0
20001404:	fffffdf4 			; <UNDEFINED> instruction: 0xfffffdf4
20001408:	fffffe60 			; <UNDEFINED> instruction: 0xfffffe60
2000140c:	2000e8d4 	ldrdcs	lr, [r0], -r4
20001410:	2000e8e0 	andcs	lr, r0, r0, ror #17
20001414:	2000e8f4 	strdcs	lr, [r0], -r4
20001418:	200047c0 	andcs	r4, r0, r0, asr #15
					distance_player_fire = (player.xPos + 9) - (fires[j].xPos + 5);
2000141c:	4b94      	ldr	r3, [pc, #592]	; (20001670 <main+0x1474>)
2000141e:	2294      	movs	r2, #148	; 0x94
20001420:	00d2      	lsls	r2, r2, #3
20001422:	4694      	mov	ip, r2
20001424:	44bc      	add	ip, r7
20001426:	4463      	add	r3, ip
20001428:	685b      	ldr	r3, [r3, #4]
2000142a:	3309      	adds	r3, #9
2000142c:	0019      	movs	r1, r3
2000142e:	4b91      	ldr	r3, [pc, #580]	; (20001674 <main+0x1478>)
20001430:	681a      	ldr	r2, [r3, #0]
20001432:	4b91      	ldr	r3, [pc, #580]	; (20001678 <main+0x147c>)
20001434:	2094      	movs	r0, #148	; 0x94
20001436:	00c0      	lsls	r0, r0, #3
20001438:	1838      	adds	r0, r7, r0
2000143a:	18c0      	adds	r0, r0, r3
2000143c:	0013      	movs	r3, r2
2000143e:	00db      	lsls	r3, r3, #3
20001440:	189b      	adds	r3, r3, r2
20001442:	009b      	lsls	r3, r3, #2
20001444:	18c3      	adds	r3, r0, r3
20001446:	3304      	adds	r3, #4
20001448:	681b      	ldr	r3, [r3, #0]
2000144a:	3305      	adds	r3, #5
2000144c:	1aca      	subs	r2, r1, r3
2000144e:	4b8b      	ldr	r3, [pc, #556]	; (2000167c <main+0x1480>)
20001450:	601a      	str	r2, [r3, #0]
					if(player.yPos > (fires[j].yPos - 18 + 7) && 
20001452:	4b87      	ldr	r3, [pc, #540]	; (20001670 <main+0x1474>)
20001454:	2294      	movs	r2, #148	; 0x94
20001456:	00d2      	lsls	r2, r2, #3
20001458:	4694      	mov	ip, r2
2000145a:	44bc      	add	ip, r7
2000145c:	4463      	add	r3, ip
2000145e:	6899      	ldr	r1, [r3, #8]
20001460:	4b84      	ldr	r3, [pc, #528]	; (20001674 <main+0x1478>)
20001462:	681a      	ldr	r2, [r3, #0]
20001464:	4b84      	ldr	r3, [pc, #528]	; (20001678 <main+0x147c>)
20001466:	2094      	movs	r0, #148	; 0x94
20001468:	00c0      	lsls	r0, r0, #3
2000146a:	1838      	adds	r0, r7, r0
2000146c:	18c0      	adds	r0, r0, r3
2000146e:	0013      	movs	r3, r2
20001470:	00db      	lsls	r3, r3, #3
20001472:	189b      	adds	r3, r3, r2
20001474:	009b      	lsls	r3, r3, #2
20001476:	18c3      	adds	r3, r0, r3
20001478:	3308      	adds	r3, #8
2000147a:	681b      	ldr	r3, [r3, #0]
2000147c:	3b0b      	subs	r3, #11
2000147e:	4299      	cmp	r1, r3
20001480:	dd29      	ble.n	200014d6 <main+0x12da>
							player.yPos < fires[j].yPos && distance_player_fire < 8 && distance_player_fire > -8) {
20001482:	4b7b      	ldr	r3, [pc, #492]	; (20001670 <main+0x1474>)
20001484:	2294      	movs	r2, #148	; 0x94
20001486:	00d2      	lsls	r2, r2, #3
20001488:	4694      	mov	ip, r2
2000148a:	44bc      	add	ip, r7
2000148c:	4463      	add	r3, ip
2000148e:	6899      	ldr	r1, [r3, #8]
20001490:	4b78      	ldr	r3, [pc, #480]	; (20001674 <main+0x1478>)
20001492:	681a      	ldr	r2, [r3, #0]
20001494:	4b78      	ldr	r3, [pc, #480]	; (20001678 <main+0x147c>)
20001496:	2094      	movs	r0, #148	; 0x94
20001498:	00c0      	lsls	r0, r0, #3
2000149a:	1838      	adds	r0, r7, r0
2000149c:	18c0      	adds	r0, r0, r3
2000149e:	0013      	movs	r3, r2
200014a0:	00db      	lsls	r3, r3, #3
200014a2:	189b      	adds	r3, r3, r2
200014a4:	009b      	lsls	r3, r3, #2
200014a6:	18c3      	adds	r3, r0, r3
200014a8:	3308      	adds	r3, #8
200014aa:	681b      	ldr	r3, [r3, #0]
					if(player.yPos > (fires[j].yPos - 18 + 7) && 
200014ac:	4299      	cmp	r1, r3
200014ae:	da12      	bge.n	200014d6 <main+0x12da>
							player.yPos < fires[j].yPos && distance_player_fire < 8 && distance_player_fire > -8) {
200014b0:	4b72      	ldr	r3, [pc, #456]	; (2000167c <main+0x1480>)
200014b2:	681b      	ldr	r3, [r3, #0]
200014b4:	2b07      	cmp	r3, #7
200014b6:	dc0e      	bgt.n	200014d6 <main+0x12da>
200014b8:	4b70      	ldr	r3, [pc, #448]	; (2000167c <main+0x1480>)
200014ba:	681b      	ldr	r3, [r3, #0]
200014bc:	3307      	adds	r3, #7
200014be:	db0a      	blt.n	200014d6 <main+0x12da>
						game_over_adder = 20;
200014c0:	2314      	movs	r3, #20
200014c2:	2292      	movs	r2, #146	; 0x92
200014c4:	00d2      	lsls	r2, r2, #3
200014c6:	18ba      	adds	r2, r7, r2
200014c8:	6013      	str	r3, [r2, #0]
						ascii_write("*FWOOSH*","");
200014ca:	4a6d      	ldr	r2, [pc, #436]	; (20001680 <main+0x1484>)
200014cc:	4b6d      	ldr	r3, [pc, #436]	; (20001684 <main+0x1488>)
200014ce:	0011      	movs	r1, r2
200014d0:	0018      	movs	r0, r3
200014d2:	f002 fe27 	bl	20004124 <ascii_write>
				for(j = 0; j < 3; j++) {
200014d6:	4b67      	ldr	r3, [pc, #412]	; (20001674 <main+0x1478>)
200014d8:	681b      	ldr	r3, [r3, #0]
200014da:	1c5a      	adds	r2, r3, #1
200014dc:	4b65      	ldr	r3, [pc, #404]	; (20001674 <main+0x1478>)
200014de:	601a      	str	r2, [r3, #0]
200014e0:	4b64      	ldr	r3, [pc, #400]	; (20001674 <main+0x1478>)
200014e2:	681b      	ldr	r3, [r3, #0]
200014e4:	2b02      	cmp	r3, #2
200014e6:	dd99      	ble.n	2000141c <main+0x1220>
					}					
				}
				
				static int trophy_burned = 0;	//trophy burning
				static int distance_hair_trophy;
				distance_hair_trophy = (hair.xPos + 9) - (trophy.xPos + 5);
200014e8:	4b67      	ldr	r3, [pc, #412]	; (20001688 <main+0x148c>)
200014ea:	2294      	movs	r2, #148	; 0x94
200014ec:	00d2      	lsls	r2, r2, #3
200014ee:	4694      	mov	ip, r2
200014f0:	44bc      	add	ip, r7
200014f2:	4463      	add	r3, ip
200014f4:	685b      	ldr	r3, [r3, #4]
200014f6:	3309      	adds	r3, #9
200014f8:	001a      	movs	r2, r3
200014fa:	4b64      	ldr	r3, [pc, #400]	; (2000168c <main+0x1490>)
200014fc:	2194      	movs	r1, #148	; 0x94
200014fe:	00c9      	lsls	r1, r1, #3
20001500:	468c      	mov	ip, r1
20001502:	44bc      	add	ip, r7
20001504:	4463      	add	r3, ip
20001506:	685b      	ldr	r3, [r3, #4]
20001508:	3305      	adds	r3, #5
2000150a:	1ad2      	subs	r2, r2, r3
2000150c:	4b60      	ldr	r3, [pc, #384]	; (20001690 <main+0x1494>)
2000150e:	601a      	str	r2, [r3, #0]
				if(!trophy_burned && abs(distance_hair_trophy) < 5) {
20001510:	4b60      	ldr	r3, [pc, #384]	; (20001694 <main+0x1498>)
20001512:	681b      	ldr	r3, [r3, #0]
20001514:	2b00      	cmp	r3, #0
20001516:	d136      	bne.n	20001586 <main+0x138a>
20001518:	4b5d      	ldr	r3, [pc, #372]	; (20001690 <main+0x1494>)
2000151a:	681b      	ldr	r3, [r3, #0]
2000151c:	3304      	adds	r3, #4
2000151e:	db32      	blt.n	20001586 <main+0x138a>
20001520:	4b5b      	ldr	r3, [pc, #364]	; (20001690 <main+0x1494>)
20001522:	681b      	ldr	r3, [r3, #0]
20001524:	2b04      	cmp	r3, #4
20001526:	dc2e      	bgt.n	20001586 <main+0x138a>
					trophy_burned = 1;
20001528:	4b5a      	ldr	r3, [pc, #360]	; (20001694 <main+0x1498>)
2000152a:	2201      	movs	r2, #1
2000152c:	601a      	str	r2, [r3, #0]
					fires[1].xPos = trophy.xPos;
2000152e:	4b57      	ldr	r3, [pc, #348]	; (2000168c <main+0x1490>)
20001530:	2294      	movs	r2, #148	; 0x94
20001532:	00d2      	lsls	r2, r2, #3
20001534:	4694      	mov	ip, r2
20001536:	44bc      	add	ip, r7
20001538:	4463      	add	r3, ip
2000153a:	685a      	ldr	r2, [r3, #4]
2000153c:	4b4e      	ldr	r3, [pc, #312]	; (20001678 <main+0x147c>)
2000153e:	2194      	movs	r1, #148	; 0x94
20001540:	00c9      	lsls	r1, r1, #3
20001542:	468c      	mov	ip, r1
20001544:	44bc      	add	ip, r7
20001546:	4463      	add	r3, ip
20001548:	629a      	str	r2, [r3, #40]	; 0x28
					fires[1].yPos = trophy.yPos + 5;
2000154a:	4b50      	ldr	r3, [pc, #320]	; (2000168c <main+0x1490>)
2000154c:	2294      	movs	r2, #148	; 0x94
2000154e:	00d2      	lsls	r2, r2, #3
20001550:	4694      	mov	ip, r2
20001552:	44bc      	add	ip, r7
20001554:	4463      	add	r3, ip
20001556:	689b      	ldr	r3, [r3, #8]
20001558:	1d5a      	adds	r2, r3, #5
2000155a:	4b47      	ldr	r3, [pc, #284]	; (20001678 <main+0x147c>)
2000155c:	2194      	movs	r1, #148	; 0x94
2000155e:	00c9      	lsls	r1, r1, #3
20001560:	468c      	mov	ip, r1
20001562:	44bc      	add	ip, r7
20001564:	4463      	add	r3, ip
20001566:	62da      	str	r2, [r3, #44]	; 0x2c
					trophy.xPos = 500;
20001568:	4b48      	ldr	r3, [pc, #288]	; (2000168c <main+0x1490>)
2000156a:	2294      	movs	r2, #148	; 0x94
2000156c:	00d2      	lsls	r2, r2, #3
2000156e:	4694      	mov	ip, r2
20001570:	44bc      	add	ip, r7
20001572:	4463      	add	r3, ip
20001574:	22fa      	movs	r2, #250	; 0xfa
20001576:	0052      	lsls	r2, r2, #1
20001578:	605a      	str	r2, [r3, #4]
					ascii_write("DAFFO:  ","        Oops...!");
2000157a:	4a47      	ldr	r2, [pc, #284]	; (20001698 <main+0x149c>)
2000157c:	4b47      	ldr	r3, [pc, #284]	; (2000169c <main+0x14a0>)
2000157e:	0011      	movs	r1, r2
20001580:	0018      	movs	r0, r3
20001582:	f002 fdcf 	bl	20004124 <ascii_write>
				}
				
				static int DIP_burned = 0;
				static int distance_hair_DIP;
				distance_hair_DIP = (hair.xPos + 9) - (DIP.xPos + 9);
20001586:	4b40      	ldr	r3, [pc, #256]	; (20001688 <main+0x148c>)
20001588:	2294      	movs	r2, #148	; 0x94
2000158a:	00d2      	lsls	r2, r2, #3
2000158c:	4694      	mov	ip, r2
2000158e:	44bc      	add	ip, r7
20001590:	4463      	add	r3, ip
20001592:	685b      	ldr	r3, [r3, #4]
20001594:	3309      	adds	r3, #9
20001596:	001a      	movs	r2, r3
20001598:	4b41      	ldr	r3, [pc, #260]	; (200016a0 <main+0x14a4>)
2000159a:	2194      	movs	r1, #148	; 0x94
2000159c:	00c9      	lsls	r1, r1, #3
2000159e:	468c      	mov	ip, r1
200015a0:	44bc      	add	ip, r7
200015a2:	4463      	add	r3, ip
200015a4:	685b      	ldr	r3, [r3, #4]
200015a6:	3309      	adds	r3, #9
200015a8:	1ad2      	subs	r2, r2, r3
200015aa:	4b3e      	ldr	r3, [pc, #248]	; (200016a4 <main+0x14a8>)
200015ac:	601a      	str	r2, [r3, #0]
				if(!DIP_burned && read_DIL_single(LIGHT_TRIGGER) && player.yPos > 10 && abs(distance_hair_DIP) < 5) {
200015ae:	4b3e      	ldr	r3, [pc, #248]	; (200016a8 <main+0x14ac>)
200015b0:	681b      	ldr	r3, [r3, #0]
200015b2:	2b00      	cmp	r3, #0
200015b4:	d13f      	bne.n	20001636 <main+0x143a>
200015b6:	2006      	movs	r0, #6
200015b8:	f002 fbc2 	bl	20003d40 <read_DIL_single>
200015bc:	1e03      	subs	r3, r0, #0
200015be:	d03a      	beq.n	20001636 <main+0x143a>
200015c0:	4b2b      	ldr	r3, [pc, #172]	; (20001670 <main+0x1474>)
200015c2:	2294      	movs	r2, #148	; 0x94
200015c4:	00d2      	lsls	r2, r2, #3
200015c6:	4694      	mov	ip, r2
200015c8:	44bc      	add	ip, r7
200015ca:	4463      	add	r3, ip
200015cc:	689b      	ldr	r3, [r3, #8]
200015ce:	2b0a      	cmp	r3, #10
200015d0:	dd31      	ble.n	20001636 <main+0x143a>
200015d2:	4b34      	ldr	r3, [pc, #208]	; (200016a4 <main+0x14a8>)
200015d4:	681b      	ldr	r3, [r3, #0]
200015d6:	3304      	adds	r3, #4
200015d8:	db2d      	blt.n	20001636 <main+0x143a>
200015da:	4b32      	ldr	r3, [pc, #200]	; (200016a4 <main+0x14a8>)
200015dc:	681b      	ldr	r3, [r3, #0]
200015de:	2b04      	cmp	r3, #4
200015e0:	dc29      	bgt.n	20001636 <main+0x143a>
					DIP_burned = 1;
200015e2:	4b31      	ldr	r3, [pc, #196]	; (200016a8 <main+0x14ac>)
200015e4:	2201      	movs	r2, #1
200015e6:	601a      	str	r2, [r3, #0]
					fires[2].xPos = DIP.xPos;
200015e8:	4b2d      	ldr	r3, [pc, #180]	; (200016a0 <main+0x14a4>)
200015ea:	2294      	movs	r2, #148	; 0x94
200015ec:	00d2      	lsls	r2, r2, #3
200015ee:	4694      	mov	ip, r2
200015f0:	44bc      	add	ip, r7
200015f2:	4463      	add	r3, ip
200015f4:	685a      	ldr	r2, [r3, #4]
200015f6:	4b20      	ldr	r3, [pc, #128]	; (20001678 <main+0x147c>)
200015f8:	2194      	movs	r1, #148	; 0x94
200015fa:	00c9      	lsls	r1, r1, #3
200015fc:	468c      	mov	ip, r1
200015fe:	44bc      	add	ip, r7
20001600:	4463      	add	r3, ip
20001602:	64da      	str	r2, [r3, #76]	; 0x4c
					fires[2].yPos = DIP.yPos + 6;
20001604:	4b26      	ldr	r3, [pc, #152]	; (200016a0 <main+0x14a4>)
20001606:	2294      	movs	r2, #148	; 0x94
20001608:	00d2      	lsls	r2, r2, #3
2000160a:	4694      	mov	ip, r2
2000160c:	44bc      	add	ip, r7
2000160e:	4463      	add	r3, ip
20001610:	689b      	ldr	r3, [r3, #8]
20001612:	1d9a      	adds	r2, r3, #6
20001614:	4b18      	ldr	r3, [pc, #96]	; (20001678 <main+0x147c>)
20001616:	2194      	movs	r1, #148	; 0x94
20001618:	00c9      	lsls	r1, r1, #3
2000161a:	468c      	mov	ip, r1
2000161c:	44bc      	add	ip, r7
2000161e:	4463      	add	r3, ip
20001620:	651a      	str	r2, [r3, #80]	; 0x50
					no_DIP = 1;
20001622:	2301      	movs	r3, #1
20001624:	4a21      	ldr	r2, [pc, #132]	; (200016ac <main+0x14b0>)
20001626:	18ba      	adds	r2, r7, r2
20001628:	6013      	str	r3, [r2, #0]
					ascii_write("DIPs-WITCH:","       ARGHGHHRH!");
2000162a:	4a21      	ldr	r2, [pc, #132]	; (200016b0 <main+0x14b4>)
2000162c:	4b21      	ldr	r3, [pc, #132]	; (200016b4 <main+0x14b8>)
2000162e:	0011      	movs	r1, r2
20001630:	0018      	movs	r0, r3
20001632:	f002 fd77 	bl	20004124 <ascii_write>
				}
				
				lastFireTrigger = read_DIL_single(HAIR_TRIGGER);
20001636:	2001      	movs	r0, #1
20001638:	f002 fb82 	bl	20003d40 <read_DIL_single>
2000163c:	0003      	movs	r3, r0
2000163e:	2290      	movs	r2, #144	; 0x90
20001640:	00d2      	lsls	r2, r2, #3
20001642:	18ba      	adds	r2, r7, r2
20001644:	6013      	str	r3, [r2, #0]
				
				game_over += game_over_adder;
20001646:	4b1c      	ldr	r3, [pc, #112]	; (200016b8 <main+0x14bc>)
20001648:	18fb      	adds	r3, r7, r3
2000164a:	681a      	ldr	r2, [r3, #0]
2000164c:	2392      	movs	r3, #146	; 0x92
2000164e:	00db      	lsls	r3, r3, #3
20001650:	18fb      	adds	r3, r7, r3
20001652:	681b      	ldr	r3, [r3, #0]
20001654:	18d3      	adds	r3, r2, r3
20001656:	4a18      	ldr	r2, [pc, #96]	; (200016b8 <main+0x14bc>)
20001658:	18ba      	adds	r2, r7, r2
2000165a:	6013      	str	r3, [r2, #0]
				
				if(game_over >= 100) {
2000165c:	4b16      	ldr	r3, [pc, #88]	; (200016b8 <main+0x14bc>)
2000165e:	18fb      	adds	r3, r7, r3
20001660:	681b      	ldr	r3, [r3, #0]
20001662:	2b63      	cmp	r3, #99	; 0x63
20001664:	dc00      	bgt.n	20001668 <main+0x146c>
20001666:	e0e1      	b.n	2000182c <main+0x1630>
					current_screen = RESET_GAME;
20001668:	4b14      	ldr	r3, [pc, #80]	; (200016bc <main+0x14c0>)
2000166a:	220a      	movs	r2, #10
2000166c:	601a      	str	r2, [r3, #0]
				}
				
				break;
2000166e:	e0dd      	b.n	2000182c <main+0x1630>
20001670:	fffffdd0 			; <UNDEFINED> instruction: 0xfffffdd0
20001674:	200047c0 	andcs	r4, r0, r0, asr #15
20001678:	fffffc68 			; <UNDEFINED> instruction: 0xfffffc68
2000167c:	200047c4 	andcs	r4, r0, r4, asr #15
20001680:	2000e86c 	andcs	lr, r0, ip, ror #16
20001684:	2000e900 	andcs	lr, r0, r0, lsl #18
20001688:	fffffe60 			; <UNDEFINED> instruction: 0xfffffe60
2000168c:	fffffe84 			; <UNDEFINED> instruction: 0xfffffe84
20001690:	200047c8 	andcs	r4, r0, r8, asr #15
20001694:	200047cc 	andcs	r4, r0, ip, asr #15
20001698:	2000e90c 	andcs	lr, r0, ip, lsl #18
2000169c:	2000e920 	andcs	lr, r0, r0, lsr #18
200016a0:	fffffdf4 			; <UNDEFINED> instruction: 0xfffffdf4
200016a4:	200047d0 	ldrdcs	r4, [r0], -r0
200016a8:	200047d4 	ldrdcs	r4, [r0], -r4	; <UNPREDICTABLE>
200016ac:	0000048c 	andeq	r0, r0, ip, lsl #9
200016b0:	2000e92c 	andcs	lr, r0, ip, lsr #18
200016b4:	2000e8f4 	strdcs	lr, [r0], -r4
200016b8:	00000494 	muleq	r0, r4, r4
200016bc:	200087e0 	andcs	r8, r0, r0, ror #15
				
			
			case RESET_GAME: //restart
				counter = 0;
200016c0:	4b5c      	ldr	r3, [pc, #368]	; (20001834 <main+0x1638>)
200016c2:	2200      	movs	r2, #0
200016c4:	601a      	str	r2, [r3, #0]
				current_screen = START_SCREEN;
200016c6:	4b5c      	ldr	r3, [pc, #368]	; (20001838 <main+0x163c>)
200016c8:	2201      	movs	r2, #1
200016ca:	601a      	str	r2, [r3, #0]
				if(read_DIL() == 0) {
200016cc:	f002 fb28 	bl	20003d20 <read_DIL>
200016d0:	1e03      	subs	r3, r0, #0
200016d2:	d102      	bne.n	200016da <main+0x14de>
					current_screen = SWITCH_LOCK; 
200016d4:	4b58      	ldr	r3, [pc, #352]	; (20001838 <main+0x163c>)
200016d6:	2200      	movs	r2, #0
200016d8:	601a      	str	r2, [r3, #0]
				}
	
				static int test = 0;
				test+=2;
200016da:	4b58      	ldr	r3, [pc, #352]	; (2000183c <main+0x1640>)
200016dc:	681b      	ldr	r3, [r3, #0]
200016de:	1c9a      	adds	r2, r3, #2
200016e0:	4b56      	ldr	r3, [pc, #344]	; (2000183c <main+0x1640>)
200016e2:	601a      	str	r2, [r3, #0]
	
				first = 1;
200016e4:	2301      	movs	r3, #1
200016e6:	4a56      	ldr	r2, [pc, #344]	; (20001840 <main+0x1644>)
200016e8:	18ba      	adds	r2, r7, r2
200016ea:	6013      	str	r3, [r2, #0]
				exploding = 0;
200016ec:	2300      	movs	r3, #0
200016ee:	2291      	movs	r2, #145	; 0x91
200016f0:	00d2      	lsls	r2, r2, #3
200016f2:	18ba      	adds	r2, r7, r2
200016f4:	6013      	str	r3, [r2, #0]
				is_climbing = 0;
200016f6:	2300      	movs	r3, #0
200016f8:	4a52      	ldr	r2, [pc, #328]	; (20001844 <main+0x1648>)
200016fa:	18ba      	adds	r2, r7, r2
200016fc:	6013      	str	r3, [r2, #0]
				has_climbed = 0;
200016fe:	2300      	movs	r3, #0
20001700:	2293      	movs	r2, #147	; 0x93
20001702:	00d2      	lsls	r2, r2, #3
20001704:	18ba      	adds	r2, r7, r2
20001706:	6013      	str	r3, [r2, #0]
				game_over = 0;
20001708:	2300      	movs	r3, #0
2000170a:	4a4f      	ldr	r2, [pc, #316]	; (20001848 <main+0x164c>)
2000170c:	18ba      	adds	r2, r7, r2
2000170e:	6013      	str	r3, [r2, #0]
				game_over_adder = 0;
20001710:	2300      	movs	r3, #0
20001712:	2292      	movs	r2, #146	; 0x92
20001714:	00d2      	lsls	r2, r2, #3
20001716:	18ba      	adds	r2, r7, r2
20001718:	6013      	str	r3, [r2, #0]
				fires[0].xPos = 40;		//FIRE1_INDO
2000171a:	4b4c      	ldr	r3, [pc, #304]	; (2000184c <main+0x1650>)
2000171c:	2294      	movs	r2, #148	; 0x94
2000171e:	00d2      	lsls	r2, r2, #3
20001720:	4694      	mov	ip, r2
20001722:	44bc      	add	ip, r7
20001724:	4463      	add	r3, ip
20001726:	2228      	movs	r2, #40	; 0x28
20001728:	605a      	str	r2, [r3, #4]
				fires[0].yPos = 64-12-8;
2000172a:	4b48      	ldr	r3, [pc, #288]	; (2000184c <main+0x1650>)
2000172c:	2294      	movs	r2, #148	; 0x94
2000172e:	00d2      	lsls	r2, r2, #3
20001730:	4694      	mov	ip, r2
20001732:	44bc      	add	ip, r7
20001734:	4463      	add	r3, ip
20001736:	222c      	movs	r2, #44	; 0x2c
20001738:	609a      	str	r2, [r3, #8]
				fires[2].xPos = -50;		//FIRE1_INDO
2000173a:	4b44      	ldr	r3, [pc, #272]	; (2000184c <main+0x1650>)
2000173c:	2294      	movs	r2, #148	; 0x94
2000173e:	00d2      	lsls	r2, r2, #3
20001740:	4694      	mov	ip, r2
20001742:	44bc      	add	ip, r7
20001744:	4463      	add	r3, ip
20001746:	2232      	movs	r2, #50	; 0x32
20001748:	4252      	negs	r2, r2
2000174a:	64da      	str	r2, [r3, #76]	; 0x4c
				fires[2].yPos = -50;
2000174c:	4b3f      	ldr	r3, [pc, #252]	; (2000184c <main+0x1650>)
2000174e:	2294      	movs	r2, #148	; 0x94
20001750:	00d2      	lsls	r2, r2, #3
20001752:	4694      	mov	ip, r2
20001754:	44bc      	add	ip, r7
20001756:	4463      	add	r3, ip
20001758:	2232      	movs	r2, #50	; 0x32
2000175a:	4252      	negs	r2, r2
2000175c:	651a      	str	r2, [r3, #80]	; 0x50
				fires[1].xPos = -50;		//FIRE1_INDO
2000175e:	4b3b      	ldr	r3, [pc, #236]	; (2000184c <main+0x1650>)
20001760:	2294      	movs	r2, #148	; 0x94
20001762:	00d2      	lsls	r2, r2, #3
20001764:	4694      	mov	ip, r2
20001766:	44bc      	add	ip, r7
20001768:	4463      	add	r3, ip
2000176a:	2232      	movs	r2, #50	; 0x32
2000176c:	4252      	negs	r2, r2
2000176e:	629a      	str	r2, [r3, #40]	; 0x28
				fires[1].yPos = -50;
20001770:	4b36      	ldr	r3, [pc, #216]	; (2000184c <main+0x1650>)
20001772:	2294      	movs	r2, #148	; 0x94
20001774:	00d2      	lsls	r2, r2, #3
20001776:	4694      	mov	ip, r2
20001778:	44bc      	add	ip, r7
2000177a:	4463      	add	r3, ip
2000177c:	2232      	movs	r2, #50	; 0x32
2000177e:	4252      	negs	r2, r2
20001780:	62da      	str	r2, [r3, #44]	; 0x2c
				bird.xPos = 180;
20001782:	4b33      	ldr	r3, [pc, #204]	; (20001850 <main+0x1654>)
20001784:	2294      	movs	r2, #148	; 0x94
20001786:	00d2      	lsls	r2, r2, #3
20001788:	4694      	mov	ip, r2
2000178a:	44bc      	add	ip, r7
2000178c:	4463      	add	r3, ip
2000178e:	22b4      	movs	r2, #180	; 0xb4
20001790:	605a      	str	r2, [r3, #4]
				bird.yPos = 40;
20001792:	4b2f      	ldr	r3, [pc, #188]	; (20001850 <main+0x1654>)
20001794:	2294      	movs	r2, #148	; 0x94
20001796:	00d2      	lsls	r2, r2, #3
20001798:	4694      	mov	ip, r2
2000179a:	44bc      	add	ip, r7
2000179c:	4463      	add	r3, ip
2000179e:	2228      	movs	r2, #40	; 0x28
200017a0:	609a      	str	r2, [r3, #8]
				
				trophy.xPos = 24;
200017a2:	4b2c      	ldr	r3, [pc, #176]	; (20001854 <main+0x1658>)
200017a4:	2294      	movs	r2, #148	; 0x94
200017a6:	00d2      	lsls	r2, r2, #3
200017a8:	4694      	mov	ip, r2
200017aa:	44bc      	add	ip, r7
200017ac:	4463      	add	r3, ip
200017ae:	2218      	movs	r2, #24
200017b0:	605a      	str	r2, [r3, #4]
				trophy.yPos = 5;
200017b2:	4b28      	ldr	r3, [pc, #160]	; (20001854 <main+0x1658>)
200017b4:	2294      	movs	r2, #148	; 0x94
200017b6:	00d2      	lsls	r2, r2, #3
200017b8:	4694      	mov	ip, r2
200017ba:	44bc      	add	ip, r7
200017bc:	4463      	add	r3, ip
200017be:	2205      	movs	r2, #5
200017c0:	609a      	str	r2, [r3, #8]
				trophy_burned = 0;
200017c2:	4b25      	ldr	r3, [pc, #148]	; (20001858 <main+0x165c>)
200017c4:	2200      	movs	r2, #0
200017c6:	601a      	str	r2, [r3, #0]
				
				DIP.xPos = 100;
200017c8:	4b24      	ldr	r3, [pc, #144]	; (2000185c <main+0x1660>)
200017ca:	2294      	movs	r2, #148	; 0x94
200017cc:	00d2      	lsls	r2, r2, #3
200017ce:	4694      	mov	ip, r2
200017d0:	44bc      	add	ip, r7
200017d2:	4463      	add	r3, ip
200017d4:	2264      	movs	r2, #100	; 0x64
200017d6:	605a      	str	r2, [r3, #4]
				DIP.yPos = 5;
200017d8:	4b20      	ldr	r3, [pc, #128]	; (2000185c <main+0x1660>)
200017da:	2294      	movs	r2, #148	; 0x94
200017dc:	00d2      	lsls	r2, r2, #3
200017de:	4694      	mov	ip, r2
200017e0:	44bc      	add	ip, r7
200017e2:	4463      	add	r3, ip
200017e4:	2205      	movs	r2, #5
200017e6:	609a      	str	r2, [r3, #8]
				DIP_burned = 0;
200017e8:	4b1d      	ldr	r3, [pc, #116]	; (20001860 <main+0x1664>)
200017ea:	2200      	movs	r2, #0
200017ec:	601a      	str	r2, [r3, #0]
				no_DIP = 0;
200017ee:	2300      	movs	r3, #0
200017f0:	4a1c      	ldr	r2, [pc, #112]	; (20001864 <main+0x1668>)
200017f2:	18ba      	adds	r2, r7, r2
200017f4:	6013      	str	r3, [r2, #0]
				
				lastFireTrigger = 0;
200017f6:	2300      	movs	r3, #0
200017f8:	2290      	movs	r2, #144	; 0x90
200017fa:	00d2      	lsls	r2, r2, #3
200017fc:	18ba      	adds	r2, r7, r2
200017fe:	6013      	str	r3, [r2, #0]
				
				player.xPos = 3;
20001800:	4b19      	ldr	r3, [pc, #100]	; (20001868 <main+0x166c>)
20001802:	2294      	movs	r2, #148	; 0x94
20001804:	00d2      	lsls	r2, r2, #3
20001806:	4694      	mov	ip, r2
20001808:	44bc      	add	ip, r7
2000180a:	4463      	add	r3, ip
2000180c:	2203      	movs	r2, #3
2000180e:	605a      	str	r2, [r3, #4]
				player.yPos = 64-18-7; //player position
20001810:	4b15      	ldr	r3, [pc, #84]	; (20001868 <main+0x166c>)
20001812:	2294      	movs	r2, #148	; 0x94
20001814:	00d2      	lsls	r2, r2, #3
20001816:	4694      	mov	ip, r2
20001818:	44bc      	add	ip, r7
2000181a:	4463      	add	r3, ip
2000181c:	2227      	movs	r2, #39	; 0x27
2000181e:	609a      	str	r2, [r3, #8]
				clear_ascii();
20001820:	f002 fc4b 	bl	200040ba <clear_ascii>
				break;
20001824:	e003      	b.n	2000182e <main+0x1632>
				break;
20001826:	46c0      	nop			; (mov r8, r8)
20001828:	f7ff f817 	bl	2000085a <main+0x65e>
				break;
2000182c:	46c0      	nop			; (mov r8, r8)
		switch(current_screen) {
2000182e:	f7ff f814 	bl	2000085a <main+0x65e>
20001832:	46c0      	nop			; (mov r8, r8)
20001834:	200047b8 			; <UNDEFINED> instruction: 0x200047b8
20001838:	200087e0 	andcs	r8, r0, r0, ror #15
2000183c:	200047d8 	ldrdcs	r4, [r0], -r8
20001840:	00000484 	andeq	r0, r0, r4, lsl #9
20001844:	0000049c 	muleq	r0, ip, r4
20001848:	00000494 	muleq	r0, r4, r4
2000184c:	fffffc68 			; <UNDEFINED> instruction: 0xfffffc68
20001850:	fffffe3c 			; <UNDEFINED> instruction: 0xfffffe3c
20001854:	fffffe84 			; <UNDEFINED> instruction: 0xfffffe84
20001858:	200047cc 	andcs	r4, r0, ip, asr #15
2000185c:	fffffdf4 			; <UNDEFINED> instruction: 0xfffffdf4
20001860:	200047d4 	ldrdcs	r4, [r0], -r4	; <UNPREDICTABLE>
20001864:	0000048c 	andeq	r0, r0, ip, lsl #9
20001868:	fffffdd0 			; <UNDEFINED> instruction: 0xfffffdd0

2000186c <abs>:
		
	}
	
}

int abs(int value) {
2000186c:	b580      	push	{r7, lr}
2000186e:	b082      	sub	sp, #8
20001870:	af00      	add	r7, sp, #0
20001872:	6078      	str	r0, [r7, #4]
	if(value < 0) {
20001874:	687b      	ldr	r3, [r7, #4]
20001876:	2b00      	cmp	r3, #0
20001878:	da02      	bge.n	20001880 <abs+0x14>
		return -value;
2000187a:	687b      	ldr	r3, [r7, #4]
2000187c:	425b      	negs	r3, r3
2000187e:	e000      	b.n	20001882 <abs+0x16>
	}
	return value;
20001880:	687b      	ldr	r3, [r7, #4]
}
20001882:	0018      	movs	r0, r3
20001884:	46bd      	mov	sp, r7
20001886:	b002      	add	sp, #8
20001888:	bd80      	pop	{r7, pc}
2000188a:	46c0      	nop			; (mov r8, r8)

2000188c <render>:
GameObject* gameObjects[100];
int nGameObjects = 0;


void render(GameObject* this)
{
2000188c:	b580      	push	{r7, lr}
2000188e:	b082      	sub	sp, #8
20001890:	af00      	add	r7, sp, #0
20001892:	6078      	str	r0, [r7, #4]
    
}
20001894:	46c0      	nop			; (mov r8, r8)
20001896:	46bd      	mov	sp, r7
20001898:	b002      	add	sp, #8
2000189a:	bd80      	pop	{r7, pc}

2000189c <gameObjectUpdate>:

void gameObjectUpdate(GameObject *this) {
2000189c:	b580      	push	{r7, lr}
2000189e:	b082      	sub	sp, #8
200018a0:	af00      	add	r7, sp, #0
200018a2:	6078      	str	r0, [r7, #4]
	this->animation_counter++;
200018a4:	687b      	ldr	r3, [r7, #4]
200018a6:	6a1b      	ldr	r3, [r3, #32]
200018a8:	1c5a      	adds	r2, r3, #1
200018aa:	687b      	ldr	r3, [r7, #4]
200018ac:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
200018ae:	687b      	ldr	r3, [r7, #4]
200018b0:	6a1a      	ldr	r2, [r3, #32]
200018b2:	687b      	ldr	r3, [r7, #4]
200018b4:	69db      	ldr	r3, [r3, #28]
200018b6:	429a      	cmp	r2, r3
200018b8:	d10f      	bne.n	200018da <gameObjectUpdate+0x3e>
		this->animation_counter = 0;
200018ba:	687b      	ldr	r3, [r7, #4]
200018bc:	2200      	movs	r2, #0
200018be:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
200018c0:	687b      	ldr	r3, [r7, #4]
200018c2:	695b      	ldr	r3, [r3, #20]
200018c4:	1c5a      	adds	r2, r3, #1
200018c6:	687b      	ldr	r3, [r7, #4]
200018c8:	699b      	ldr	r3, [r3, #24]
200018ca:	0019      	movs	r1, r3
200018cc:	0010      	movs	r0, r2
200018ce:	f002 ff6d 	bl	200047ac <__aeabi_idivmod>
200018d2:	000b      	movs	r3, r1
200018d4:	001a      	movs	r2, r3
200018d6:	687b      	ldr	r3, [r7, #4]
200018d8:	615a      	str	r2, [r3, #20]
	}
}
200018da:	46c0      	nop			; (mov r8, r8)
200018dc:	46bd      	mov	sp, r7
200018de:	b002      	add	sp, #8
200018e0:	bd80      	pop	{r7, pc}
	...

200018e4 <initSprites>:
Image fire2Image;
Image fire3Image;
Image fire4Image;
Image fire5Image;
Image fireImages[5];
static void initSprites( void ) {	
200018e4:	b580      	push	{r7, lr}
200018e6:	b08c      	sub	sp, #48	; 0x30
200018e8:	af00      	add	r7, sp, #0
	sprite *pointer0 = &tempFireBlack;
200018ea:	4b3e      	ldr	r3, [pc, #248]	; (200019e4 <initSprites+0x100>)
200018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer0, fire_black_2_bits, fire1_gray_width, fire1_gray_height);
200018ee:	493e      	ldr	r1, [pc, #248]	; (200019e8 <initSprites+0x104>)
200018f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
200018f2:	230c      	movs	r3, #12
200018f4:	2208      	movs	r2, #8
200018f6:	f002 f9f3 	bl	20003ce0 <load_sprite>
	fireBlack = pointer0;
200018fa:	4b3c      	ldr	r3, [pc, #240]	; (200019ec <initSprites+0x108>)
200018fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
200018fe:	601a      	str	r2, [r3, #0]
	
	sprite *pointer1 = &tempFire1Gray;
20001900:	4b3b      	ldr	r3, [pc, #236]	; (200019f0 <initSprites+0x10c>)
20001902:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer1, fire1_gray_bits, fire1_gray_width, fire1_gray_height);
20001904:	493b      	ldr	r1, [pc, #236]	; (200019f4 <initSprites+0x110>)
20001906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20001908:	230c      	movs	r3, #12
2000190a:	2208      	movs	r2, #8
2000190c:	f002 f9e8 	bl	20003ce0 <load_sprite>
	fire1Gray = pointer1;
20001910:	4b39      	ldr	r3, [pc, #228]	; (200019f8 <initSprites+0x114>)
20001912:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001914:	601a      	str	r2, [r3, #0]

	sprite *pointer2 = &tempFire1Light;
20001916:	4b39      	ldr	r3, [pc, #228]	; (200019fc <initSprites+0x118>)
20001918:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer2, fire1_light_bits, fire1_gray_width, fire1_gray_height);
2000191a:	4939      	ldr	r1, [pc, #228]	; (20001a00 <initSprites+0x11c>)
2000191c:	6a78      	ldr	r0, [r7, #36]	; 0x24
2000191e:	230c      	movs	r3, #12
20001920:	2208      	movs	r2, #8
20001922:	f002 f9dd 	bl	20003ce0 <load_sprite>
	fire1Light = pointer2;
20001926:	4b37      	ldr	r3, [pc, #220]	; (20001a04 <initSprites+0x120>)
20001928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000192a:	601a      	str	r2, [r3, #0]

	sprite *pointer3 = &tempFire2Gray;
2000192c:	4b36      	ldr	r3, [pc, #216]	; (20001a08 <initSprites+0x124>)
2000192e:	623b      	str	r3, [r7, #32]
	load_sprite(pointer3, fire2_gray_bits, fire1_gray_width, fire1_gray_height);
20001930:	4936      	ldr	r1, [pc, #216]	; (20001a0c <initSprites+0x128>)
20001932:	6a38      	ldr	r0, [r7, #32]
20001934:	230c      	movs	r3, #12
20001936:	2208      	movs	r2, #8
20001938:	f002 f9d2 	bl	20003ce0 <load_sprite>
	fire2Gray = pointer3;
2000193c:	4b34      	ldr	r3, [pc, #208]	; (20001a10 <initSprites+0x12c>)
2000193e:	6a3a      	ldr	r2, [r7, #32]
20001940:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempFire2Light;
20001942:	4b34      	ldr	r3, [pc, #208]	; (20001a14 <initSprites+0x130>)
20001944:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer4, fire2_light_bits, fire1_gray_width, fire1_gray_height);
20001946:	4934      	ldr	r1, [pc, #208]	; (20001a18 <initSprites+0x134>)
20001948:	69f8      	ldr	r0, [r7, #28]
2000194a:	230c      	movs	r3, #12
2000194c:	2208      	movs	r2, #8
2000194e:	f002 f9c7 	bl	20003ce0 <load_sprite>
	fire2Light = pointer4;
20001952:	4b32      	ldr	r3, [pc, #200]	; (20001a1c <initSprites+0x138>)
20001954:	69fa      	ldr	r2, [r7, #28]
20001956:	601a      	str	r2, [r3, #0]

	sprite *pointer5 = &tempFire3Gray;
20001958:	4b31      	ldr	r3, [pc, #196]	; (20001a20 <initSprites+0x13c>)
2000195a:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer5, fire3_gray_bits, fire1_gray_width, fire1_gray_height);
2000195c:	4931      	ldr	r1, [pc, #196]	; (20001a24 <initSprites+0x140>)
2000195e:	69b8      	ldr	r0, [r7, #24]
20001960:	230c      	movs	r3, #12
20001962:	2208      	movs	r2, #8
20001964:	f002 f9bc 	bl	20003ce0 <load_sprite>
	fire3Gray = pointer5;
20001968:	4b2f      	ldr	r3, [pc, #188]	; (20001a28 <initSprites+0x144>)
2000196a:	69ba      	ldr	r2, [r7, #24]
2000196c:	601a      	str	r2, [r3, #0]

	sprite *pointer6 = &tempFire3Light;
2000196e:	4b2f      	ldr	r3, [pc, #188]	; (20001a2c <initSprites+0x148>)
20001970:	617b      	str	r3, [r7, #20]
	load_sprite(pointer6, fire3_light_bits, fire1_gray_width, fire1_gray_height);
20001972:	492f      	ldr	r1, [pc, #188]	; (20001a30 <initSprites+0x14c>)
20001974:	6978      	ldr	r0, [r7, #20]
20001976:	230c      	movs	r3, #12
20001978:	2208      	movs	r2, #8
2000197a:	f002 f9b1 	bl	20003ce0 <load_sprite>
	fire3Light = pointer6;
2000197e:	4b2d      	ldr	r3, [pc, #180]	; (20001a34 <initSprites+0x150>)
20001980:	697a      	ldr	r2, [r7, #20]
20001982:	601a      	str	r2, [r3, #0]

	sprite *pointer7 = &tempFire4Gray;
20001984:	4b2c      	ldr	r3, [pc, #176]	; (20001a38 <initSprites+0x154>)
20001986:	613b      	str	r3, [r7, #16]
	load_sprite(pointer7, fire4_gray_bits, fire1_gray_width, fire1_gray_height);
20001988:	492c      	ldr	r1, [pc, #176]	; (20001a3c <initSprites+0x158>)
2000198a:	6938      	ldr	r0, [r7, #16]
2000198c:	230c      	movs	r3, #12
2000198e:	2208      	movs	r2, #8
20001990:	f002 f9a6 	bl	20003ce0 <load_sprite>
	fire4Gray = pointer7;
20001994:	4b2a      	ldr	r3, [pc, #168]	; (20001a40 <initSprites+0x15c>)
20001996:	693a      	ldr	r2, [r7, #16]
20001998:	601a      	str	r2, [r3, #0]

	sprite *pointer8 = &tempFire4Light;
2000199a:	4b2a      	ldr	r3, [pc, #168]	; (20001a44 <initSprites+0x160>)
2000199c:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer8, fire4_light_bits, fire1_gray_width, fire1_gray_height);
2000199e:	492a      	ldr	r1, [pc, #168]	; (20001a48 <initSprites+0x164>)
200019a0:	68f8      	ldr	r0, [r7, #12]
200019a2:	230c      	movs	r3, #12
200019a4:	2208      	movs	r2, #8
200019a6:	f002 f99b 	bl	20003ce0 <load_sprite>
	fire4Light = pointer8;
200019aa:	4b28      	ldr	r3, [pc, #160]	; (20001a4c <initSprites+0x168>)
200019ac:	68fa      	ldr	r2, [r7, #12]
200019ae:	601a      	str	r2, [r3, #0]

	sprite *pointer9 = &tempFire5Gray;
200019b0:	4b27      	ldr	r3, [pc, #156]	; (20001a50 <initSprites+0x16c>)
200019b2:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer9, fire5_gray_bits, fire1_gray_width, fire1_gray_height);
200019b4:	4927      	ldr	r1, [pc, #156]	; (20001a54 <initSprites+0x170>)
200019b6:	68b8      	ldr	r0, [r7, #8]
200019b8:	230c      	movs	r3, #12
200019ba:	2208      	movs	r2, #8
200019bc:	f002 f990 	bl	20003ce0 <load_sprite>
	fire5Gray = pointer9;
200019c0:	4b25      	ldr	r3, [pc, #148]	; (20001a58 <initSprites+0x174>)
200019c2:	68ba      	ldr	r2, [r7, #8]
200019c4:	601a      	str	r2, [r3, #0]

	sprite *pointer10 = &tempFire5Light;
200019c6:	4b25      	ldr	r3, [pc, #148]	; (20001a5c <initSprites+0x178>)
200019c8:	607b      	str	r3, [r7, #4]
	load_sprite(pointer10, fire5_light_bits, fire1_gray_width, fire1_gray_height);
200019ca:	4925      	ldr	r1, [pc, #148]	; (20001a60 <initSprites+0x17c>)
200019cc:	6878      	ldr	r0, [r7, #4]
200019ce:	230c      	movs	r3, #12
200019d0:	2208      	movs	r2, #8
200019d2:	f002 f985 	bl	20003ce0 <load_sprite>
	fire5Light = pointer10;
200019d6:	4b23      	ldr	r3, [pc, #140]	; (20001a64 <initSprites+0x180>)
200019d8:	687a      	ldr	r2, [r7, #4]
200019da:	601a      	str	r2, [r3, #0]
}
200019dc:	46c0      	nop			; (mov r8, r8)
200019de:	46bd      	mov	sp, r7
200019e0:	b00c      	add	sp, #48	; 0x30
200019e2:	bd80      	pop	{r7, pc}
200019e4:	20004aa0 	andcs	r4, r0, r0, lsr #21
200019e8:	200087f4 	strdcs	r8, [r0], -r4
200019ec:	20004b98 	mulcs	r0, r8, fp
200019f0:	20004b8c 	andcs	r4, r0, ip, lsl #23
200019f4:	20008800 	andcs	r8, r0, r0, lsl #16
200019f8:	20004bb0 			; <UNDEFINED> instruction: 0x20004bb0
200019fc:	20004b68 	andcs	r4, r0, r8, ror #22
20001a00:	2000880c 	andcs	r8, r0, ip, lsl #16
20001a04:	20004a68 	andcs	r4, r0, r8, ror #20
20001a08:	20004a94 	mulcs	r0, r4, sl
20001a0c:	20008818 	andcs	r8, r0, r8, lsl r8
20001a10:	20004bac 	andcs	r4, r0, ip, lsr #23
20001a14:	20004b9c 	mulcs	r0, ip, fp
20001a18:	20008824 	andcs	r8, r0, r4, lsr #16
20001a1c:	20004b84 	andcs	r4, r0, r4, lsl #23
20001a20:	20004b4c 	andcs	r4, r0, ip, asr #22
20001a24:	20008830 	andcs	r8, r0, r0, lsr r8
20001a28:	20004a78 	andcs	r4, r0, r8, ror sl
20001a2c:	20004a6c 	andcs	r4, r0, ip, ror #20
20001a30:	2000883c 	andcs	r8, r0, ip, lsr r8
20001a34:	20004ba8 	andcs	r4, r0, r8, lsr #23
20001a38:	20004a7c 	andcs	r4, r0, ip, ror sl
20001a3c:	20008848 	andcs	r8, r0, r8, asr #16
20001a40:	20004b64 	andcs	r4, r0, r4, ror #22
20001a44:	20004ab8 			; <UNDEFINED> instruction: 0x20004ab8
20001a48:	20008854 	andcs	r8, r0, r4, asr r8
20001a4c:	20004ad0 	ldrdcs	r4, [r0], -r0
20001a50:	20004b40 	andcs	r4, r0, r0, asr #22
20001a54:	20008860 	andcs	r8, r0, r0, ror #16
20001a58:	20004b80 	andcs	r4, r0, r0, lsl #23
20001a5c:	20004b74 	andcs	r4, r0, r4, ror fp
20001a60:	2000886c 	andcs	r8, r0, ip, ror #16
20001a64:	20004b88 	andcs	r4, r0, r8, lsl #23

20001a68 <init_fire>:
	
void init_fire( GameObject *fireObj ) {
20001a68:	b590      	push	{r4, r7, lr}
20001a6a:	b083      	sub	sp, #12
20001a6c:	af00      	add	r7, sp, #0
20001a6e:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20001a70:	4b30      	ldr	r3, [pc, #192]	; (20001b34 <init_fire+0xcc>)
20001a72:	681b      	ldr	r3, [r3, #0]
20001a74:	2b00      	cmp	r3, #0
20001a76:	d049      	beq.n	20001b0c <init_fire+0xa4>
		initSprites();
20001a78:	f7ff ff34 	bl	200018e4 <initSprites>
		firstTime = 0;			
20001a7c:	4b2d      	ldr	r3, [pc, #180]	; (20001b34 <init_fire+0xcc>)
20001a7e:	2200      	movs	r2, #0
20001a80:	601a      	str	r2, [r3, #0]

		fireImages[0] = fire1Image;
20001a82:	4b2d      	ldr	r3, [pc, #180]	; (20001b38 <init_fire+0xd0>)
20001a84:	4a2d      	ldr	r2, [pc, #180]	; (20001b3c <init_fire+0xd4>)
20001a86:	ca13      	ldmia	r2!, {r0, r1, r4}
20001a88:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[1] = fire2Image;
20001a8a:	4b2b      	ldr	r3, [pc, #172]	; (20001b38 <init_fire+0xd0>)
20001a8c:	4a2c      	ldr	r2, [pc, #176]	; (20001b40 <init_fire+0xd8>)
20001a8e:	330c      	adds	r3, #12
20001a90:	ca13      	ldmia	r2!, {r0, r1, r4}
20001a92:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[2] = fire3Image;
20001a94:	4b28      	ldr	r3, [pc, #160]	; (20001b38 <init_fire+0xd0>)
20001a96:	4a2b      	ldr	r2, [pc, #172]	; (20001b44 <init_fire+0xdc>)
20001a98:	3318      	adds	r3, #24
20001a9a:	ca13      	ldmia	r2!, {r0, r1, r4}
20001a9c:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[3] = fire4Image;
20001a9e:	4b26      	ldr	r3, [pc, #152]	; (20001b38 <init_fire+0xd0>)
20001aa0:	4a29      	ldr	r2, [pc, #164]	; (20001b48 <init_fire+0xe0>)
20001aa2:	3324      	adds	r3, #36	; 0x24
20001aa4:	ca13      	ldmia	r2!, {r0, r1, r4}
20001aa6:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[4] = fire5Image;
20001aa8:	4b23      	ldr	r3, [pc, #140]	; (20001b38 <init_fire+0xd0>)
20001aaa:	4a28      	ldr	r2, [pc, #160]	; (20001b4c <init_fire+0xe4>)
20001aac:	3330      	adds	r3, #48	; 0x30
20001aae:	ca13      	ldmia	r2!, {r0, r1, r4}
20001ab0:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&fireImages[0], fire1Gray, fire1Light, fireBlack);
20001ab2:	4b27      	ldr	r3, [pc, #156]	; (20001b50 <init_fire+0xe8>)
20001ab4:	6819      	ldr	r1, [r3, #0]
20001ab6:	4b27      	ldr	r3, [pc, #156]	; (20001b54 <init_fire+0xec>)
20001ab8:	681a      	ldr	r2, [r3, #0]
20001aba:	4b27      	ldr	r3, [pc, #156]	; (20001b58 <init_fire+0xf0>)
20001abc:	681b      	ldr	r3, [r3, #0]
20001abe:	481e      	ldr	r0, [pc, #120]	; (20001b38 <init_fire+0xd0>)
20001ac0:	f002 f8fa 	bl	20003cb8 <load_image>
		load_image(&fireImages[1], fire2Gray, fire2Light, fireBlack);
20001ac4:	4b25      	ldr	r3, [pc, #148]	; (20001b5c <init_fire+0xf4>)
20001ac6:	6819      	ldr	r1, [r3, #0]
20001ac8:	4b25      	ldr	r3, [pc, #148]	; (20001b60 <init_fire+0xf8>)
20001aca:	681a      	ldr	r2, [r3, #0]
20001acc:	4b22      	ldr	r3, [pc, #136]	; (20001b58 <init_fire+0xf0>)
20001ace:	681b      	ldr	r3, [r3, #0]
20001ad0:	4824      	ldr	r0, [pc, #144]	; (20001b64 <init_fire+0xfc>)
20001ad2:	f002 f8f1 	bl	20003cb8 <load_image>
		load_image(&fireImages[2], fire3Gray, fire3Light, fireBlack);
20001ad6:	4b24      	ldr	r3, [pc, #144]	; (20001b68 <init_fire+0x100>)
20001ad8:	6819      	ldr	r1, [r3, #0]
20001ada:	4b24      	ldr	r3, [pc, #144]	; (20001b6c <init_fire+0x104>)
20001adc:	681a      	ldr	r2, [r3, #0]
20001ade:	4b1e      	ldr	r3, [pc, #120]	; (20001b58 <init_fire+0xf0>)
20001ae0:	681b      	ldr	r3, [r3, #0]
20001ae2:	4823      	ldr	r0, [pc, #140]	; (20001b70 <init_fire+0x108>)
20001ae4:	f002 f8e8 	bl	20003cb8 <load_image>
		load_image(&fireImages[3], fire4Gray, fire4Light, fireBlack);
20001ae8:	4b22      	ldr	r3, [pc, #136]	; (20001b74 <init_fire+0x10c>)
20001aea:	6819      	ldr	r1, [r3, #0]
20001aec:	4b22      	ldr	r3, [pc, #136]	; (20001b78 <init_fire+0x110>)
20001aee:	681a      	ldr	r2, [r3, #0]
20001af0:	4b19      	ldr	r3, [pc, #100]	; (20001b58 <init_fire+0xf0>)
20001af2:	681b      	ldr	r3, [r3, #0]
20001af4:	4821      	ldr	r0, [pc, #132]	; (20001b7c <init_fire+0x114>)
20001af6:	f002 f8df 	bl	20003cb8 <load_image>
		load_image(&fireImages[4], fire5Gray, fire5Light, fireBlack);
20001afa:	4b21      	ldr	r3, [pc, #132]	; (20001b80 <init_fire+0x118>)
20001afc:	6819      	ldr	r1, [r3, #0]
20001afe:	4b21      	ldr	r3, [pc, #132]	; (20001b84 <init_fire+0x11c>)
20001b00:	681a      	ldr	r2, [r3, #0]
20001b02:	4b15      	ldr	r3, [pc, #84]	; (20001b58 <init_fire+0xf0>)
20001b04:	681b      	ldr	r3, [r3, #0]
20001b06:	4820      	ldr	r0, [pc, #128]	; (20001b88 <init_fire+0x120>)
20001b08:	f002 f8d6 	bl	20003cb8 <load_image>
	}
	
	fireObj->images = fireImages;
20001b0c:	687b      	ldr	r3, [r7, #4]
20001b0e:	4a0a      	ldr	r2, [pc, #40]	; (20001b38 <init_fire+0xd0>)
20001b10:	601a      	str	r2, [r3, #0]

	fireObj->current_frame = 0;
20001b12:	687b      	ldr	r3, [r7, #4]
20001b14:	2200      	movs	r2, #0
20001b16:	615a      	str	r2, [r3, #20]
	fireObj->n_frames = 5;
20001b18:	687b      	ldr	r3, [r7, #4]
20001b1a:	2205      	movs	r2, #5
20001b1c:	619a      	str	r2, [r3, #24]
	fireObj->animation_speed = 1;
20001b1e:	687b      	ldr	r3, [r7, #4]
20001b20:	2201      	movs	r2, #1
20001b22:	61da      	str	r2, [r3, #28]
	fireObj->animation_counter = 0;
20001b24:	687b      	ldr	r3, [r7, #4]
20001b26:	2200      	movs	r2, #0
20001b28:	621a      	str	r2, [r3, #32]
}
20001b2a:	46c0      	nop			; (mov r8, r8)
20001b2c:	46bd      	mov	sp, r7
20001b2e:	b003      	add	sp, #12
20001b30:	bd90      	pop	{r4, r7, pc}
20001b32:	46c0      	nop			; (mov r8, r8)
20001b34:	20008878 	andcs	r8, r0, r8, ror r8
20001b38:	20004b04 	andcs	r4, r0, r4, lsl #22
20001b3c:	20004ac4 	andcs	r4, r0, r4, asr #21
20001b40:	20004a88 	andcs	r4, r0, r8, lsl #21
20001b44:	20004aac 	andcs	r4, r0, ip, lsr #21
20001b48:	20004b58 	andcs	r4, r0, r8, asr fp
20001b4c:	20004af8 	strdcs	r4, [r0], -r8
20001b50:	20004bb0 			; <UNDEFINED> instruction: 0x20004bb0
20001b54:	20004a68 	andcs	r4, r0, r8, ror #20
20001b58:	20004b98 	mulcs	r0, r8, fp
20001b5c:	20004bac 	andcs	r4, r0, ip, lsr #23
20001b60:	20004b84 	andcs	r4, r0, r4, lsl #23
20001b64:	20004b10 	andcs	r4, r0, r0, lsl fp
20001b68:	20004a78 	andcs	r4, r0, r8, ror sl
20001b6c:	20004ba8 	andcs	r4, r0, r8, lsr #23
20001b70:	20004b1c 	andcs	r4, r0, ip, lsl fp
20001b74:	20004b64 	andcs	r4, r0, r4, ror #22
20001b78:	20004ad0 	ldrdcs	r4, [r0], -r0
20001b7c:	20004b28 	andcs	r4, r0, r8, lsr #22
20001b80:	20004b80 	andcs	r4, r0, r0, lsl #23
20001b84:	20004b88 	andcs	r4, r0, r8, lsl #23
20001b88:	20004b34 	andcs	r4, r0, r4, lsr fp

20001b8c <playerUpdate>:
#include "controls.h"
#include "gameobject.h"
#include "player.h"
#include "ascii_display.h"

void playerUpdate(GameObject *this) {
20001b8c:	b580      	push	{r7, lr}
20001b8e:	b082      	sub	sp, #8
20001b90:	af00      	add	r7, sp, #0
20001b92:	6078      	str	r0, [r7, #4]
	
	// Animate
	this->animation_counter++;
20001b94:	687b      	ldr	r3, [r7, #4]
20001b96:	6a1b      	ldr	r3, [r3, #32]
20001b98:	1c5a      	adds	r2, r3, #1
20001b9a:	687b      	ldr	r3, [r7, #4]
20001b9c:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
20001b9e:	687b      	ldr	r3, [r7, #4]
20001ba0:	6a1a      	ldr	r2, [r3, #32]
20001ba2:	687b      	ldr	r3, [r7, #4]
20001ba4:	69db      	ldr	r3, [r3, #28]
20001ba6:	429a      	cmp	r2, r3
20001ba8:	d10f      	bne.n	20001bca <playerUpdate+0x3e>
		this->animation_counter = 0;
20001baa:	687b      	ldr	r3, [r7, #4]
20001bac:	2200      	movs	r2, #0
20001bae:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
20001bb0:	687b      	ldr	r3, [r7, #4]
20001bb2:	695b      	ldr	r3, [r3, #20]
20001bb4:	1c5a      	adds	r2, r3, #1
20001bb6:	687b      	ldr	r3, [r7, #4]
20001bb8:	699b      	ldr	r3, [r3, #24]
20001bba:	0019      	movs	r1, r3
20001bbc:	0010      	movs	r0, r2
20001bbe:	f002 fdf5 	bl	200047ac <__aeabi_idivmod>
20001bc2:	000b      	movs	r3, r1
20001bc4:	001a      	movs	r2, r3
20001bc6:	687b      	ldr	r3, [r7, #4]
20001bc8:	615a      	str	r2, [r3, #20]
	static xSpeed = 0;
	static ySpeed = 0;
	
	// Y position changes
	
	if (lastJumpValue != read_DIL_single(JUMP_TRIGGER) && (this->yPos == LIMIT_DOWN || this->yPos == PLATFORM_Y - PLAYER_HEIGHT)){
20001bca:	2005      	movs	r0, #5
20001bcc:	f002 f8b8 	bl	20003d40 <read_DIL_single>
20001bd0:	0002      	movs	r2, r0
20001bd2:	4b68      	ldr	r3, [pc, #416]	; (20001d74 <playerUpdate+0x1e8>)
20001bd4:	681b      	ldr	r3, [r3, #0]
20001bd6:	429a      	cmp	r2, r3
20001bd8:	d00b      	beq.n	20001bf2 <playerUpdate+0x66>
20001bda:	687b      	ldr	r3, [r7, #4]
20001bdc:	689b      	ldr	r3, [r3, #8]
20001bde:	2b27      	cmp	r3, #39	; 0x27
20001be0:	d003      	beq.n	20001bea <playerUpdate+0x5e>
20001be2:	687b      	ldr	r3, [r7, #4]
20001be4:	689b      	ldr	r3, [r3, #8]
20001be6:	2b05      	cmp	r3, #5
20001be8:	d103      	bne.n	20001bf2 <playerUpdate+0x66>
		ySpeed = -(SPEED_ADD_Y);
20001bea:	4b63      	ldr	r3, [pc, #396]	; (20001d78 <playerUpdate+0x1ec>)
20001bec:	2204      	movs	r2, #4
20001bee:	4252      	negs	r2, r2
20001bf0:	601a      	str	r2, [r3, #0]
	}
	
	if (this->yPos + ySpeed > LIMIT_DOWN){
20001bf2:	687b      	ldr	r3, [r7, #4]
20001bf4:	689a      	ldr	r2, [r3, #8]
20001bf6:	4b60      	ldr	r3, [pc, #384]	; (20001d78 <playerUpdate+0x1ec>)
20001bf8:	681b      	ldr	r3, [r3, #0]
20001bfa:	18d3      	adds	r3, r2, r3
20001bfc:	2b27      	cmp	r3, #39	; 0x27
20001bfe:	dd10      	ble.n	20001c22 <playerUpdate+0x96>
		this->yPos = LIMIT_DOWN;
20001c00:	687b      	ldr	r3, [r7, #4]
20001c02:	2227      	movs	r2, #39	; 0x27
20001c04:	609a      	str	r2, [r3, #8]
		if (ySpeed == SPEED_ADD_Y + 1){
20001c06:	4b5c      	ldr	r3, [pc, #368]	; (20001d78 <playerUpdate+0x1ec>)
20001c08:	681b      	ldr	r3, [r3, #0]
20001c0a:	2b05      	cmp	r3, #5
20001c0c:	d105      	bne.n	20001c1a <playerUpdate+0x8e>
			ascii_write("*THUMP*","");
20001c0e:	4a5b      	ldr	r2, [pc, #364]	; (20001d7c <playerUpdate+0x1f0>)
20001c10:	4b5b      	ldr	r3, [pc, #364]	; (20001d80 <playerUpdate+0x1f4>)
20001c12:	0011      	movs	r1, r2
20001c14:	0018      	movs	r0, r3
20001c16:	f002 fa85 	bl	20004124 <ascii_write>
		}
		ySpeed = 0;
20001c1a:	4b57      	ldr	r3, [pc, #348]	; (20001d78 <playerUpdate+0x1ec>)
20001c1c:	2200      	movs	r2, #0
20001c1e:	601a      	str	r2, [r3, #0]
20001c20:	e02a      	b.n	20001c78 <playerUpdate+0xec>
	}
	else if (this->yPos + ySpeed > PLATFORM_Y - PLAYER_HEIGHT && this->yPos + ySpeed < PLATFORM_Y - PLAYER_HEIGHT + 2*SPEED_ADD_Y){
20001c22:	687b      	ldr	r3, [r7, #4]
20001c24:	689a      	ldr	r2, [r3, #8]
20001c26:	4b54      	ldr	r3, [pc, #336]	; (20001d78 <playerUpdate+0x1ec>)
20001c28:	681b      	ldr	r3, [r3, #0]
20001c2a:	18d3      	adds	r3, r2, r3
20001c2c:	2b05      	cmp	r3, #5
20001c2e:	dd17      	ble.n	20001c60 <playerUpdate+0xd4>
20001c30:	687b      	ldr	r3, [r7, #4]
20001c32:	689a      	ldr	r2, [r3, #8]
20001c34:	4b50      	ldr	r3, [pc, #320]	; (20001d78 <playerUpdate+0x1ec>)
20001c36:	681b      	ldr	r3, [r3, #0]
20001c38:	18d3      	adds	r3, r2, r3
20001c3a:	2b0c      	cmp	r3, #12
20001c3c:	dc10      	bgt.n	20001c60 <playerUpdate+0xd4>
		this->yPos = PLATFORM_Y - PLAYER_HEIGHT;
20001c3e:	687b      	ldr	r3, [r7, #4]
20001c40:	2205      	movs	r2, #5
20001c42:	609a      	str	r2, [r3, #8]
		if (ySpeed == SPEED_ADD_Y + 1){
20001c44:	4b4c      	ldr	r3, [pc, #304]	; (20001d78 <playerUpdate+0x1ec>)
20001c46:	681b      	ldr	r3, [r3, #0]
20001c48:	2b05      	cmp	r3, #5
20001c4a:	d105      	bne.n	20001c58 <playerUpdate+0xcc>
			ascii_write("*THUMP*","");
20001c4c:	4a4b      	ldr	r2, [pc, #300]	; (20001d7c <playerUpdate+0x1f0>)
20001c4e:	4b4c      	ldr	r3, [pc, #304]	; (20001d80 <playerUpdate+0x1f4>)
20001c50:	0011      	movs	r1, r2
20001c52:	0018      	movs	r0, r3
20001c54:	f002 fa66 	bl	20004124 <ascii_write>
		}
		ySpeed = 0;
20001c58:	4b47      	ldr	r3, [pc, #284]	; (20001d78 <playerUpdate+0x1ec>)
20001c5a:	2200      	movs	r2, #0
20001c5c:	601a      	str	r2, [r3, #0]
20001c5e:	e00b      	b.n	20001c78 <playerUpdate+0xec>
	}
	else{
		this->yPos+=ySpeed;
20001c60:	687b      	ldr	r3, [r7, #4]
20001c62:	689a      	ldr	r2, [r3, #8]
20001c64:	4b44      	ldr	r3, [pc, #272]	; (20001d78 <playerUpdate+0x1ec>)
20001c66:	681b      	ldr	r3, [r3, #0]
20001c68:	18d2      	adds	r2, r2, r3
20001c6a:	687b      	ldr	r3, [r7, #4]
20001c6c:	609a      	str	r2, [r3, #8]
		ySpeed++;
20001c6e:	4b42      	ldr	r3, [pc, #264]	; (20001d78 <playerUpdate+0x1ec>)
20001c70:	681b      	ldr	r3, [r3, #0]
20001c72:	1c5a      	adds	r2, r3, #1
20001c74:	4b40      	ldr	r3, [pc, #256]	; (20001d78 <playerUpdate+0x1ec>)
20001c76:	601a      	str	r2, [r3, #0]
	}

	// X position changes
	
	if (!lastRightValue && read_DIL_single(RIGHT_TRIGGER)){ 
20001c78:	4b42      	ldr	r3, [pc, #264]	; (20001d84 <playerUpdate+0x1f8>)
20001c7a:	681b      	ldr	r3, [r3, #0]
20001c7c:	2b00      	cmp	r3, #0
20001c7e:	d109      	bne.n	20001c94 <playerUpdate+0x108>
20001c80:	2000      	movs	r0, #0
20001c82:	f002 f85d 	bl	20003d40 <read_DIL_single>
20001c86:	1e03      	subs	r3, r0, #0
20001c88:	d004      	beq.n	20001c94 <playerUpdate+0x108>
		xSpeed += SPEED_ADD_X;
20001c8a:	4b3f      	ldr	r3, [pc, #252]	; (20001d88 <playerUpdate+0x1fc>)
20001c8c:	681b      	ldr	r3, [r3, #0]
20001c8e:	1cda      	adds	r2, r3, #3
20001c90:	4b3d      	ldr	r3, [pc, #244]	; (20001d88 <playerUpdate+0x1fc>)
20001c92:	601a      	str	r2, [r3, #0]
	}
	
	if (!lastLeftValue && read_DIL_single(LEFT_TRIGGER)){
20001c94:	4b3d      	ldr	r3, [pc, #244]	; (20001d8c <playerUpdate+0x200>)
20001c96:	681b      	ldr	r3, [r3, #0]
20001c98:	2b00      	cmp	r3, #0
20001c9a:	d109      	bne.n	20001cb0 <playerUpdate+0x124>
20001c9c:	2007      	movs	r0, #7
20001c9e:	f002 f84f 	bl	20003d40 <read_DIL_single>
20001ca2:	1e03      	subs	r3, r0, #0
20001ca4:	d004      	beq.n	20001cb0 <playerUpdate+0x124>
		xSpeed -= SPEED_ADD_X;
20001ca6:	4b38      	ldr	r3, [pc, #224]	; (20001d88 <playerUpdate+0x1fc>)
20001ca8:	681b      	ldr	r3, [r3, #0]
20001caa:	1eda      	subs	r2, r3, #3
20001cac:	4b36      	ldr	r3, [pc, #216]	; (20001d88 <playerUpdate+0x1fc>)
20001cae:	601a      	str	r2, [r3, #0]
	}
	
	if (((!lastLeftValue && read_DIL_single(LEFT_TRIGGER)) || (!lastRightValue && read_DIL_single(RIGHT_TRIGGER))) && this->yPos != PLATFORM_Y - PLAYER_HEIGHT && this->yPos != LIMIT_DOWN){
20001cb0:	4b36      	ldr	r3, [pc, #216]	; (20001d8c <playerUpdate+0x200>)
20001cb2:	681b      	ldr	r3, [r3, #0]
20001cb4:	2b00      	cmp	r3, #0
20001cb6:	d104      	bne.n	20001cc2 <playerUpdate+0x136>
20001cb8:	2007      	movs	r0, #7
20001cba:	f002 f841 	bl	20003d40 <read_DIL_single>
20001cbe:	1e03      	subs	r3, r0, #0
20001cc0:	d108      	bne.n	20001cd4 <playerUpdate+0x148>
20001cc2:	4b30      	ldr	r3, [pc, #192]	; (20001d84 <playerUpdate+0x1f8>)
20001cc4:	681b      	ldr	r3, [r3, #0]
20001cc6:	2b00      	cmp	r3, #0
20001cc8:	d111      	bne.n	20001cee <playerUpdate+0x162>
20001cca:	2000      	movs	r0, #0
20001ccc:	f002 f838 	bl	20003d40 <read_DIL_single>
20001cd0:	1e03      	subs	r3, r0, #0
20001cd2:	d00c      	beq.n	20001cee <playerUpdate+0x162>
20001cd4:	687b      	ldr	r3, [r7, #4]
20001cd6:	689b      	ldr	r3, [r3, #8]
20001cd8:	2b05      	cmp	r3, #5
20001cda:	d008      	beq.n	20001cee <playerUpdate+0x162>
20001cdc:	687b      	ldr	r3, [r7, #4]
20001cde:	689b      	ldr	r3, [r3, #8]
20001ce0:	2b27      	cmp	r3, #39	; 0x27
20001ce2:	d004      	beq.n	20001cee <playerUpdate+0x162>
		xSpeed *=2;
20001ce4:	4b28      	ldr	r3, [pc, #160]	; (20001d88 <playerUpdate+0x1fc>)
20001ce6:	681b      	ldr	r3, [r3, #0]
20001ce8:	005a      	lsls	r2, r3, #1
20001cea:	4b27      	ldr	r3, [pc, #156]	; (20001d88 <playerUpdate+0x1fc>)
20001cec:	601a      	str	r2, [r3, #0]
	}
	
	if (this->xPos + xSpeed > LIMIT_RIGHT || this->xPos + xSpeed < LIMIT_LEFT){
20001cee:	687b      	ldr	r3, [r7, #4]
20001cf0:	685a      	ldr	r2, [r3, #4]
20001cf2:	4b25      	ldr	r3, [pc, #148]	; (20001d88 <playerUpdate+0x1fc>)
20001cf4:	681b      	ldr	r3, [r3, #0]
20001cf6:	18d3      	adds	r3, r2, r3
20001cf8:	2b6e      	cmp	r3, #110	; 0x6e
20001cfa:	dc06      	bgt.n	20001d0a <playerUpdate+0x17e>
20001cfc:	687b      	ldr	r3, [r7, #4]
20001cfe:	685a      	ldr	r2, [r3, #4]
20001d00:	4b21      	ldr	r3, [pc, #132]	; (20001d88 <playerUpdate+0x1fc>)
20001d02:	681b      	ldr	r3, [r3, #0]
20001d04:	18d3      	adds	r3, r2, r3
20001d06:	2b00      	cmp	r3, #0
20001d08:	da04      	bge.n	20001d14 <playerUpdate+0x188>
		xSpeed *= -1;	
20001d0a:	4b1f      	ldr	r3, [pc, #124]	; (20001d88 <playerUpdate+0x1fc>)
20001d0c:	681b      	ldr	r3, [r3, #0]
20001d0e:	425a      	negs	r2, r3
20001d10:	4b1d      	ldr	r3, [pc, #116]	; (20001d88 <playerUpdate+0x1fc>)
20001d12:	601a      	str	r2, [r3, #0]
	}
	
	this->xPos += xSpeed;	
20001d14:	687b      	ldr	r3, [r7, #4]
20001d16:	685a      	ldr	r2, [r3, #4]
20001d18:	4b1b      	ldr	r3, [pc, #108]	; (20001d88 <playerUpdate+0x1fc>)
20001d1a:	681b      	ldr	r3, [r3, #0]
20001d1c:	18d2      	adds	r2, r2, r3
20001d1e:	687b      	ldr	r3, [r7, #4]
20001d20:	605a      	str	r2, [r3, #4]
	
	if (xSpeed > 0){
20001d22:	4b19      	ldr	r3, [pc, #100]	; (20001d88 <playerUpdate+0x1fc>)
20001d24:	681b      	ldr	r3, [r3, #0]
20001d26:	2b00      	cmp	r3, #0
20001d28:	dd05      	ble.n	20001d36 <playerUpdate+0x1aa>
		xSpeed--;
20001d2a:	4b17      	ldr	r3, [pc, #92]	; (20001d88 <playerUpdate+0x1fc>)
20001d2c:	681b      	ldr	r3, [r3, #0]
20001d2e:	1e5a      	subs	r2, r3, #1
20001d30:	4b15      	ldr	r3, [pc, #84]	; (20001d88 <playerUpdate+0x1fc>)
20001d32:	601a      	str	r2, [r3, #0]
20001d34:	e008      	b.n	20001d48 <playerUpdate+0x1bc>
	}
	else if (xSpeed < 0){
20001d36:	4b14      	ldr	r3, [pc, #80]	; (20001d88 <playerUpdate+0x1fc>)
20001d38:	681b      	ldr	r3, [r3, #0]
20001d3a:	2b00      	cmp	r3, #0
20001d3c:	da04      	bge.n	20001d48 <playerUpdate+0x1bc>
		xSpeed++;
20001d3e:	4b12      	ldr	r3, [pc, #72]	; (20001d88 <playerUpdate+0x1fc>)
20001d40:	681b      	ldr	r3, [r3, #0]
20001d42:	1c5a      	adds	r2, r3, #1
20001d44:	4b10      	ldr	r3, [pc, #64]	; (20001d88 <playerUpdate+0x1fc>)
20001d46:	601a      	str	r2, [r3, #0]
	}
	
	// Prepare values
	lastRightValue = read_DIL_single(RIGHT_TRIGGER);
20001d48:	2000      	movs	r0, #0
20001d4a:	f001 fff9 	bl	20003d40 <read_DIL_single>
20001d4e:	0002      	movs	r2, r0
20001d50:	4b0c      	ldr	r3, [pc, #48]	; (20001d84 <playerUpdate+0x1f8>)
20001d52:	601a      	str	r2, [r3, #0]
	lastLeftValue = read_DIL_single(LEFT_TRIGGER);
20001d54:	2007      	movs	r0, #7
20001d56:	f001 fff3 	bl	20003d40 <read_DIL_single>
20001d5a:	0002      	movs	r2, r0
20001d5c:	4b0b      	ldr	r3, [pc, #44]	; (20001d8c <playerUpdate+0x200>)
20001d5e:	601a      	str	r2, [r3, #0]
	lastJumpValue = read_DIL_single(JUMP_TRIGGER);
20001d60:	2005      	movs	r0, #5
20001d62:	f001 ffed 	bl	20003d40 <read_DIL_single>
20001d66:	0002      	movs	r2, r0
20001d68:	4b02      	ldr	r3, [pc, #8]	; (20001d74 <playerUpdate+0x1e8>)
20001d6a:	601a      	str	r2, [r3, #0]
	
20001d6c:	46c0      	nop			; (mov r8, r8)
20001d6e:	46bd      	mov	sp, r7
20001d70:	b002      	add	sp, #8
20001d72:	bd80      	pop	{r7, pc}
20001d74:	200047e0 	andcs	r4, r0, r0, ror #15
20001d78:	200047e4 	andcs	r4, r0, r4, ror #15
20001d7c:	2000e940 	andcs	lr, r0, r0, asr #18
20001d80:	2000e944 	andcs	lr, r0, r4, asr #18
20001d84:	200047e8 	andcs	r4, r0, r8, ror #15
20001d88:	200047ec 	andcs	r4, r0, ip, ror #15
20001d8c:	200047f0 	strdcs	r4, [r0], -r0

20001d90 <initSprites>:
Image bird5Image;
Image bird6Image;
//Image bird7Image;
//Image bird8Image;
Image birdImages[6];
static void initSprites( void ) {	
20001d90:	b580      	push	{r7, lr}
20001d92:	b090      	sub	sp, #64	; 0x40
20001d94:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempBirdLight;
20001d96:	4b54      	ldr	r3, [pc, #336]	; (20001ee8 <initSprites+0x158>)
20001d98:	63fb      	str	r3, [r7, #60]	; 0x3c
	load_sprite(pointer11, bird1_light_bits, bird1_black_width, bird1_black_height);
20001d9a:	4954      	ldr	r1, [pc, #336]	; (20001eec <initSprites+0x15c>)
20001d9c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
20001d9e:	2319      	movs	r3, #25
20001da0:	2219      	movs	r2, #25
20001da2:	f001 ff9d 	bl	20003ce0 <load_sprite>
	bird1Light = pointer11;
20001da6:	4b52      	ldr	r3, [pc, #328]	; (20001ef0 <initSprites+0x160>)
20001da8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
20001daa:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempBirdGray;
20001dac:	4b51      	ldr	r3, [pc, #324]	; (20001ef4 <initSprites+0x164>)
20001dae:	63bb      	str	r3, [r7, #56]	; 0x38
	load_sprite(pointer12, bird1_gray_bits, bird1_black_width, bird1_black_height);
20001db0:	4951      	ldr	r1, [pc, #324]	; (20001ef8 <initSprites+0x168>)
20001db2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
20001db4:	2319      	movs	r3, #25
20001db6:	2219      	movs	r2, #25
20001db8:	f001 ff92 	bl	20003ce0 <load_sprite>
	bird1Gray = pointer12;
20001dbc:	4b4f      	ldr	r3, [pc, #316]	; (20001efc <initSprites+0x16c>)
20001dbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
20001dc0:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempBirdBlack;
20001dc2:	4b4f      	ldr	r3, [pc, #316]	; (20001f00 <initSprites+0x170>)
20001dc4:	637b      	str	r3, [r7, #52]	; 0x34
	load_sprite(pointer13, bird1_black_bits, bird1_black_width, bird1_black_height);
20001dc6:	494f      	ldr	r1, [pc, #316]	; (20001f04 <initSprites+0x174>)
20001dc8:	6b78      	ldr	r0, [r7, #52]	; 0x34
20001dca:	2319      	movs	r3, #25
20001dcc:	2219      	movs	r2, #25
20001dce:	f001 ff87 	bl	20003ce0 <load_sprite>
	bird1Black = pointer13;	
20001dd2:	4b4d      	ldr	r3, [pc, #308]	; (20001f08 <initSprites+0x178>)
20001dd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
20001dd6:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempBird2Light;
20001dd8:	4b4c      	ldr	r3, [pc, #304]	; (20001f0c <initSprites+0x17c>)
20001dda:	633b      	str	r3, [r7, #48]	; 0x30
	load_sprite(pointer14, bird2_light_bits, bird2_black_width, bird2_black_height);
20001ddc:	494c      	ldr	r1, [pc, #304]	; (20001f10 <initSprites+0x180>)
20001dde:	6b38      	ldr	r0, [r7, #48]	; 0x30
20001de0:	2319      	movs	r3, #25
20001de2:	2219      	movs	r2, #25
20001de4:	f001 ff7c 	bl	20003ce0 <load_sprite>
	bird2Light = pointer14;
20001de8:	4b4a      	ldr	r3, [pc, #296]	; (20001f14 <initSprites+0x184>)
20001dea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20001dec:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempBird2Gray;
20001dee:	4b4a      	ldr	r3, [pc, #296]	; (20001f18 <initSprites+0x188>)
20001df0:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer15, bird2_gray_bits, bird2_black_width, bird2_black_height);
20001df2:	494a      	ldr	r1, [pc, #296]	; (20001f1c <initSprites+0x18c>)
20001df4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20001df6:	2319      	movs	r3, #25
20001df8:	2219      	movs	r2, #25
20001dfa:	f001 ff71 	bl	20003ce0 <load_sprite>
	bird2Gray = pointer15;
20001dfe:	4b48      	ldr	r3, [pc, #288]	; (20001f20 <initSprites+0x190>)
20001e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20001e02:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempBird2Black;
20001e04:	4b47      	ldr	r3, [pc, #284]	; (20001f24 <initSprites+0x194>)
20001e06:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer16, bird2_black_bits, bird2_black_width, bird2_black_height);
20001e08:	4947      	ldr	r1, [pc, #284]	; (20001f28 <initSprites+0x198>)
20001e0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20001e0c:	2319      	movs	r3, #25
20001e0e:	2219      	movs	r2, #25
20001e10:	f001 ff66 	bl	20003ce0 <load_sprite>
	bird2Black = pointer16;
20001e14:	4b45      	ldr	r3, [pc, #276]	; (20001f2c <initSprites+0x19c>)
20001e16:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001e18:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempBird3Light;
20001e1a:	4b45      	ldr	r3, [pc, #276]	; (20001f30 <initSprites+0x1a0>)
20001e1c:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(finalPointer, bird3_light_bits, bird3_black_width, bird3_black_height);
20001e1e:	4945      	ldr	r1, [pc, #276]	; (20001f34 <initSprites+0x1a4>)
20001e20:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001e22:	2319      	movs	r3, #25
20001e24:	2219      	movs	r2, #25
20001e26:	f001 ff5b 	bl	20003ce0 <load_sprite>
	bird3Light = finalPointer;
20001e2a:	4b43      	ldr	r3, [pc, #268]	; (20001f38 <initSprites+0x1a8>)
20001e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001e2e:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempBird3Gray;
20001e30:	4b42      	ldr	r3, [pc, #264]	; (20001f3c <initSprites+0x1ac>)
20001e32:	623b      	str	r3, [r7, #32]
	load_sprite(pointer17, bird3_gray_bits, bird3_black_width, bird3_black_height);
20001e34:	4942      	ldr	r1, [pc, #264]	; (20001f40 <initSprites+0x1b0>)
20001e36:	6a38      	ldr	r0, [r7, #32]
20001e38:	2319      	movs	r3, #25
20001e3a:	2219      	movs	r2, #25
20001e3c:	f001 ff50 	bl	20003ce0 <load_sprite>
	bird3Gray = pointer17;
20001e40:	4b40      	ldr	r3, [pc, #256]	; (20001f44 <initSprites+0x1b4>)
20001e42:	6a3a      	ldr	r2, [r7, #32]
20001e44:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempBird3Black;
20001e46:	4b40      	ldr	r3, [pc, #256]	; (20001f48 <initSprites+0x1b8>)
20001e48:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer18, bird3_black_bits, bird3_black_width, bird3_black_height);
20001e4a:	4940      	ldr	r1, [pc, #256]	; (20001f4c <initSprites+0x1bc>)
20001e4c:	69f8      	ldr	r0, [r7, #28]
20001e4e:	2319      	movs	r3, #25
20001e50:	2219      	movs	r2, #25
20001e52:	f001 ff45 	bl	20003ce0 <load_sprite>
	bird3Black = pointer18;	
20001e56:	4b3e      	ldr	r3, [pc, #248]	; (20001f50 <initSprites+0x1c0>)
20001e58:	69fa      	ldr	r2, [r7, #28]
20001e5a:	601a      	str	r2, [r3, #0]
	
	sprite *pointer19 = &tempBird4Light;
20001e5c:	4b3d      	ldr	r3, [pc, #244]	; (20001f54 <initSprites+0x1c4>)
20001e5e:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer19, bird4_light_bits, bird4_black_width, bird4_black_height);
20001e60:	493d      	ldr	r1, [pc, #244]	; (20001f58 <initSprites+0x1c8>)
20001e62:	69b8      	ldr	r0, [r7, #24]
20001e64:	2319      	movs	r3, #25
20001e66:	2219      	movs	r2, #25
20001e68:	f001 ff3a 	bl	20003ce0 <load_sprite>
	bird4Light = pointer19;
20001e6c:	4b3b      	ldr	r3, [pc, #236]	; (20001f5c <initSprites+0x1cc>)
20001e6e:	69ba      	ldr	r2, [r7, #24]
20001e70:	601a      	str	r2, [r3, #0]
	sprite *pointer20 = &tempBird4Gray;
20001e72:	4b3b      	ldr	r3, [pc, #236]	; (20001f60 <initSprites+0x1d0>)
20001e74:	617b      	str	r3, [r7, #20]
	load_sprite(pointer20, bird4_gray_bits, bird4_black_width, bird4_black_height);
20001e76:	493b      	ldr	r1, [pc, #236]	; (20001f64 <initSprites+0x1d4>)
20001e78:	6978      	ldr	r0, [r7, #20]
20001e7a:	2319      	movs	r3, #25
20001e7c:	2219      	movs	r2, #25
20001e7e:	f001 ff2f 	bl	20003ce0 <load_sprite>
	bird4Gray = pointer20;
20001e82:	4b39      	ldr	r3, [pc, #228]	; (20001f68 <initSprites+0x1d8>)
20001e84:	697a      	ldr	r2, [r7, #20]
20001e86:	601a      	str	r2, [r3, #0]
	sprite *pointer21 = &tempBird4Black;
20001e88:	4b38      	ldr	r3, [pc, #224]	; (20001f6c <initSprites+0x1dc>)
20001e8a:	613b      	str	r3, [r7, #16]
	load_sprite(pointer21, bird4_black_bits, bird4_black_width, bird4_black_height);
20001e8c:	4938      	ldr	r1, [pc, #224]	; (20001f70 <initSprites+0x1e0>)
20001e8e:	6938      	ldr	r0, [r7, #16]
20001e90:	2319      	movs	r3, #25
20001e92:	2219      	movs	r2, #25
20001e94:	f001 ff24 	bl	20003ce0 <load_sprite>
	bird4Black = pointer21;	
20001e98:	4b36      	ldr	r3, [pc, #216]	; (20001f74 <initSprites+0x1e4>)
20001e9a:	693a      	ldr	r2, [r7, #16]
20001e9c:	601a      	str	r2, [r3, #0]
	
	sprite *pointer22 = &tempBird5Light;
20001e9e:	4b36      	ldr	r3, [pc, #216]	; (20001f78 <initSprites+0x1e8>)
20001ea0:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer22, bird5_light_bits, bird5_black_width, bird5_black_height);
20001ea2:	4936      	ldr	r1, [pc, #216]	; (20001f7c <initSprites+0x1ec>)
20001ea4:	68f8      	ldr	r0, [r7, #12]
20001ea6:	2319      	movs	r3, #25
20001ea8:	2219      	movs	r2, #25
20001eaa:	f001 ff19 	bl	20003ce0 <load_sprite>
	bird5Light = pointer22;
20001eae:	4b34      	ldr	r3, [pc, #208]	; (20001f80 <initSprites+0x1f0>)
20001eb0:	68fa      	ldr	r2, [r7, #12]
20001eb2:	601a      	str	r2, [r3, #0]
	sprite *pointer23 = &tempBird5Gray;
20001eb4:	4b33      	ldr	r3, [pc, #204]	; (20001f84 <initSprites+0x1f4>)
20001eb6:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer23, bird5_gray_bits, bird5_black_width, bird5_black_height);
20001eb8:	4933      	ldr	r1, [pc, #204]	; (20001f88 <initSprites+0x1f8>)
20001eba:	68b8      	ldr	r0, [r7, #8]
20001ebc:	2319      	movs	r3, #25
20001ebe:	2219      	movs	r2, #25
20001ec0:	f001 ff0e 	bl	20003ce0 <load_sprite>
	bird5Gray = pointer23;
20001ec4:	4b31      	ldr	r3, [pc, #196]	; (20001f8c <initSprites+0x1fc>)
20001ec6:	68ba      	ldr	r2, [r7, #8]
20001ec8:	601a      	str	r2, [r3, #0]
	sprite *pointer24 = &tempBird5Black;
20001eca:	4b31      	ldr	r3, [pc, #196]	; (20001f90 <initSprites+0x200>)
20001ecc:	607b      	str	r3, [r7, #4]
	load_sprite(pointer24, bird5_black_bits, bird5_black_width, bird5_black_height);
20001ece:	4931      	ldr	r1, [pc, #196]	; (20001f94 <initSprites+0x204>)
20001ed0:	6878      	ldr	r0, [r7, #4]
20001ed2:	2319      	movs	r3, #25
20001ed4:	2219      	movs	r2, #25
20001ed6:	f001 ff03 	bl	20003ce0 <load_sprite>
	bird5Black = pointer24;
20001eda:	4b2f      	ldr	r3, [pc, #188]	; (20001f98 <initSprites+0x208>)
20001edc:	687a      	ldr	r2, [r7, #4]
20001ede:	601a      	str	r2, [r3, #0]
}
20001ee0:	46c0      	nop			; (mov r8, r8)
20001ee2:	46bd      	mov	sp, r7
20001ee4:	b010      	add	sp, #64	; 0x40
20001ee6:	bd80      	pop	{r7, pc}
20001ee8:	20004ca4 	andcs	r4, r0, r4, lsr #25
20001eec:	20008944 	andcs	r8, r0, r4, asr #18
20001ef0:	20004cb0 			; <UNDEFINED> instruction: 0x20004cb0
20001ef4:	20004c40 	andcs	r4, r0, r0, asr #24
20001ef8:	200088e0 	andcs	r8, r0, r0, ror #17
20001efc:	20004bb8 			; <UNDEFINED> instruction: 0x20004bb8
20001f00:	20004c30 	andcs	r4, r0, r0, lsr ip
20001f04:	2000887c 	andcs	r8, r0, ip, ror r8
20001f08:	20004c20 	andcs	r4, r0, r0, lsr #24
20001f0c:	20004cb4 			; <UNDEFINED> instruction: 0x20004cb4
20001f10:	20008a70 	andcs	r8, r0, r0, ror sl
20001f14:	20004d54 	andcs	r4, r0, r4, asr sp
20001f18:	20004c5c 	andcs	r4, r0, ip, asr ip
20001f1c:	20008a0c 	andcs	r8, r0, ip, lsl #20
20001f20:	20004ca0 	andcs	r4, r0, r0, lsr #25
20001f24:	20004d3c 	andcs	r4, r0, ip, lsr sp
20001f28:	200089a8 	andcs	r8, r0, r8, lsr #19
20001f2c:	20004c1c 	andcs	r4, r0, ip, lsl ip
20001f30:	20004cd8 	ldrdcs	r4, [r0], -r8
20001f34:	20008b9c 	mulcs	r0, ip, fp
20001f38:	20004c68 	andcs	r4, r0, r8, ror #24
20001f3c:	20004ce4 	andcs	r4, r0, r4, ror #25
20001f40:	20008b38 	andcs	r8, r0, r8, lsr fp
20001f44:	20004c3c 	andcs	r4, r0, ip, lsr ip
20001f48:	20004c94 	mulcs	r0, r4, ip
20001f4c:	20008ad4 	ldrdcs	r8, [r0], -r4
20001f50:	20004c14 	andcs	r4, r0, r4, lsl ip
20001f54:	20004ccc 	andcs	r4, r0, ip, asr #25
20001f58:	20008cc8 	andcs	r8, r0, r8, asr #25
20001f5c:	20004bb4 			; <UNDEFINED> instruction: 0x20004bb4
20001f60:	20004d48 	andcs	r4, r0, r8, asr #26
20001f64:	20008c64 	andcs	r8, r0, r4, ror #24
20001f68:	20004c18 	andcs	r4, r0, r8, lsl ip
20001f6c:	20004bcc 	andcs	r4, r0, ip, asr #23
20001f70:	20008c00 	andcs	r8, r0, r0, lsl #24
20001f74:	20004d38 	andcs	r4, r0, r8, lsr sp
20001f78:	20004c50 	andcs	r4, r0, r0, asr ip
20001f7c:	20008df4 	strdcs	r8, [r0], -r4
20001f80:	20004c90 	mulcs	r0, r0, ip
20001f84:	20004c6c 	andcs	r4, r0, ip, ror #24
20001f88:	20008d90 	mulcs	r0, r0, sp
20001f8c:	20004c4c 	andcs	r4, r0, ip, asr #24
20001f90:	20004c78 	andcs	r4, r0, r8, ror ip
20001f94:	20008d2c 	andcs	r8, r0, ip, lsr #26
20001f98:	20004bc8 	andcs	r4, r0, r8, asr #23

20001f9c <init_bird>:
	
void init_bird( GameObject *birdObj ) {
20001f9c:	b590      	push	{r4, r7, lr}
20001f9e:	b083      	sub	sp, #12
20001fa0:	af00      	add	r7, sp, #0
20001fa2:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20001fa4:	4b37      	ldr	r3, [pc, #220]	; (20002084 <init_bird+0xe8>)
20001fa6:	681b      	ldr	r3, [r3, #0]
20001fa8:	2b00      	cmp	r3, #0
20001faa:	d057      	beq.n	2000205c <init_bird+0xc0>
		initSprites();
20001fac:	f7ff fef0 	bl	20001d90 <initSprites>
		firstTime = 0;			
20001fb0:	4b34      	ldr	r3, [pc, #208]	; (20002084 <init_bird+0xe8>)
20001fb2:	2200      	movs	r2, #0
20001fb4:	601a      	str	r2, [r3, #0]

		birdImages[0] = bird1Image;
20001fb6:	4b34      	ldr	r3, [pc, #208]	; (20002088 <init_bird+0xec>)
20001fb8:	4a34      	ldr	r2, [pc, #208]	; (2000208c <init_bird+0xf0>)
20001fba:	ca13      	ldmia	r2!, {r0, r1, r4}
20001fbc:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[1] = bird2Image;
20001fbe:	4b32      	ldr	r3, [pc, #200]	; (20002088 <init_bird+0xec>)
20001fc0:	4a33      	ldr	r2, [pc, #204]	; (20002090 <init_bird+0xf4>)
20001fc2:	330c      	adds	r3, #12
20001fc4:	ca13      	ldmia	r2!, {r0, r1, r4}
20001fc6:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[2] = bird3Image;
20001fc8:	4b2f      	ldr	r3, [pc, #188]	; (20002088 <init_bird+0xec>)
20001fca:	4a32      	ldr	r2, [pc, #200]	; (20002094 <init_bird+0xf8>)
20001fcc:	3318      	adds	r3, #24
20001fce:	ca13      	ldmia	r2!, {r0, r1, r4}
20001fd0:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[3] = bird4Image;
20001fd2:	4b2d      	ldr	r3, [pc, #180]	; (20002088 <init_bird+0xec>)
20001fd4:	4a30      	ldr	r2, [pc, #192]	; (20002098 <init_bird+0xfc>)
20001fd6:	3324      	adds	r3, #36	; 0x24
20001fd8:	ca13      	ldmia	r2!, {r0, r1, r4}
20001fda:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[4] = bird5Image;
20001fdc:	4b2a      	ldr	r3, [pc, #168]	; (20002088 <init_bird+0xec>)
20001fde:	4a2f      	ldr	r2, [pc, #188]	; (2000209c <init_bird+0x100>)
20001fe0:	3330      	adds	r3, #48	; 0x30
20001fe2:	ca13      	ldmia	r2!, {r0, r1, r4}
20001fe4:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[5] = bird6Image;
20001fe6:	4b28      	ldr	r3, [pc, #160]	; (20002088 <init_bird+0xec>)
20001fe8:	4a2d      	ldr	r2, [pc, #180]	; (200020a0 <init_bird+0x104>)
20001fea:	333c      	adds	r3, #60	; 0x3c
20001fec:	ca13      	ldmia	r2!, {r0, r1, r4}
20001fee:	c313      	stmia	r3!, {r0, r1, r4}
//		birdImages[6] = bird7Image;
		//birdImages[7] = bird8Image;
		
		load_image(&birdImages[0], bird1Black, bird1Gray, bird1Light);
20001ff0:	4b2c      	ldr	r3, [pc, #176]	; (200020a4 <init_bird+0x108>)
20001ff2:	6819      	ldr	r1, [r3, #0]
20001ff4:	4b2c      	ldr	r3, [pc, #176]	; (200020a8 <init_bird+0x10c>)
20001ff6:	681a      	ldr	r2, [r3, #0]
20001ff8:	4b2c      	ldr	r3, [pc, #176]	; (200020ac <init_bird+0x110>)
20001ffa:	681b      	ldr	r3, [r3, #0]
20001ffc:	4822      	ldr	r0, [pc, #136]	; (20002088 <init_bird+0xec>)
20001ffe:	f001 fe5b 	bl	20003cb8 <load_image>
		load_image(&birdImages[1], bird2Black, bird2Gray, bird2Light);
20002002:	4b2b      	ldr	r3, [pc, #172]	; (200020b0 <init_bird+0x114>)
20002004:	6819      	ldr	r1, [r3, #0]
20002006:	4b2b      	ldr	r3, [pc, #172]	; (200020b4 <init_bird+0x118>)
20002008:	681a      	ldr	r2, [r3, #0]
2000200a:	4b2b      	ldr	r3, [pc, #172]	; (200020b8 <init_bird+0x11c>)
2000200c:	681b      	ldr	r3, [r3, #0]
2000200e:	482b      	ldr	r0, [pc, #172]	; (200020bc <init_bird+0x120>)
20002010:	f001 fe52 	bl	20003cb8 <load_image>
		load_image(&birdImages[2], bird3Black, bird3Gray, bird3Light);
20002014:	4b2a      	ldr	r3, [pc, #168]	; (200020c0 <init_bird+0x124>)
20002016:	6819      	ldr	r1, [r3, #0]
20002018:	4b2a      	ldr	r3, [pc, #168]	; (200020c4 <init_bird+0x128>)
2000201a:	681a      	ldr	r2, [r3, #0]
2000201c:	4b2a      	ldr	r3, [pc, #168]	; (200020c8 <init_bird+0x12c>)
2000201e:	681b      	ldr	r3, [r3, #0]
20002020:	482a      	ldr	r0, [pc, #168]	; (200020cc <init_bird+0x130>)
20002022:	f001 fe49 	bl	20003cb8 <load_image>
		load_image(&birdImages[3], bird4Black, bird4Gray, bird4Light);
20002026:	4b2a      	ldr	r3, [pc, #168]	; (200020d0 <init_bird+0x134>)
20002028:	6819      	ldr	r1, [r3, #0]
2000202a:	4b2a      	ldr	r3, [pc, #168]	; (200020d4 <init_bird+0x138>)
2000202c:	681a      	ldr	r2, [r3, #0]
2000202e:	4b2a      	ldr	r3, [pc, #168]	; (200020d8 <init_bird+0x13c>)
20002030:	681b      	ldr	r3, [r3, #0]
20002032:	482a      	ldr	r0, [pc, #168]	; (200020dc <init_bird+0x140>)
20002034:	f001 fe40 	bl	20003cb8 <load_image>
		load_image(&birdImages[4], bird5Black, bird5Gray, bird5Light);
20002038:	4b29      	ldr	r3, [pc, #164]	; (200020e0 <init_bird+0x144>)
2000203a:	6819      	ldr	r1, [r3, #0]
2000203c:	4b29      	ldr	r3, [pc, #164]	; (200020e4 <init_bird+0x148>)
2000203e:	681a      	ldr	r2, [r3, #0]
20002040:	4b29      	ldr	r3, [pc, #164]	; (200020e8 <init_bird+0x14c>)
20002042:	681b      	ldr	r3, [r3, #0]
20002044:	4829      	ldr	r0, [pc, #164]	; (200020ec <init_bird+0x150>)
20002046:	f001 fe37 	bl	20003cb8 <load_image>
		
		//load_image(&birdImages[7], bird2Black, bird2Gray, bird2Light);
		load_image(&birdImages[5], bird3Black, bird3Gray, bird3Light);
2000204a:	4b1d      	ldr	r3, [pc, #116]	; (200020c0 <init_bird+0x124>)
2000204c:	6819      	ldr	r1, [r3, #0]
2000204e:	4b1d      	ldr	r3, [pc, #116]	; (200020c4 <init_bird+0x128>)
20002050:	681a      	ldr	r2, [r3, #0]
20002052:	4b1d      	ldr	r3, [pc, #116]	; (200020c8 <init_bird+0x12c>)
20002054:	681b      	ldr	r3, [r3, #0]
20002056:	4826      	ldr	r0, [pc, #152]	; (200020f0 <init_bird+0x154>)
20002058:	f001 fe2e 	bl	20003cb8 <load_image>
		//load_image(&birdImages[5], bird4Black, bird4Gray, bird4Light);
	}
	
	birdObj->images = birdImages;
2000205c:	687b      	ldr	r3, [r7, #4]
2000205e:	4a0a      	ldr	r2, [pc, #40]	; (20002088 <init_bird+0xec>)
20002060:	601a      	str	r2, [r3, #0]

	birdObj->current_frame = 0;
20002062:	687b      	ldr	r3, [r7, #4]
20002064:	2200      	movs	r2, #0
20002066:	615a      	str	r2, [r3, #20]
	birdObj->n_frames = 6;
20002068:	687b      	ldr	r3, [r7, #4]
2000206a:	2206      	movs	r2, #6
2000206c:	619a      	str	r2, [r3, #24]
	birdObj->animation_speed = 1;
2000206e:	687b      	ldr	r3, [r7, #4]
20002070:	2201      	movs	r2, #1
20002072:	61da      	str	r2, [r3, #28]
	birdObj->animation_counter = 0;
20002074:	687b      	ldr	r3, [r7, #4]
20002076:	2200      	movs	r2, #0
20002078:	621a      	str	r2, [r3, #32]
}
2000207a:	46c0      	nop			; (mov r8, r8)
2000207c:	46bd      	mov	sp, r7
2000207e:	b003      	add	sp, #12
20002080:	bd90      	pop	{r4, r7, pc}
20002082:	46c0      	nop			; (mov r8, r8)
20002084:	20008e58 	andcs	r8, r0, r8, asr lr
20002088:	20004cf0 	strdcs	r4, [r0], -r0
2000208c:	20004c08 	andcs	r4, r0, r8, lsl #24
20002090:	20004bd8 	ldrdcs	r4, [r0], -r8
20002094:	20004cc0 	andcs	r4, r0, r0, asr #25
20002098:	20004c24 	andcs	r4, r0, r4, lsr #24
2000209c:	20004c84 	andcs	r4, r0, r4, lsl #25
200020a0:	20004bbc 			; <UNDEFINED> instruction: 0x20004bbc
200020a4:	20004c20 	andcs	r4, r0, r0, lsr #24
200020a8:	20004bb8 			; <UNDEFINED> instruction: 0x20004bb8
200020ac:	20004cb0 			; <UNDEFINED> instruction: 0x20004cb0
200020b0:	20004c1c 	andcs	r4, r0, ip, lsl ip
200020b4:	20004ca0 	andcs	r4, r0, r0, lsr #25
200020b8:	20004d54 	andcs	r4, r0, r4, asr sp
200020bc:	20004cfc 	strdcs	r4, [r0], -ip
200020c0:	20004c14 	andcs	r4, r0, r4, lsl ip
200020c4:	20004c3c 	andcs	r4, r0, ip, lsr ip
200020c8:	20004c68 	andcs	r4, r0, r8, ror #24
200020cc:	20004d08 	andcs	r4, r0, r8, lsl #26
200020d0:	20004d38 	andcs	r4, r0, r8, lsr sp
200020d4:	20004c18 	andcs	r4, r0, r8, lsl ip
200020d8:	20004bb4 			; <UNDEFINED> instruction: 0x20004bb4
200020dc:	20004d14 	andcs	r4, r0, r4, lsl sp
200020e0:	20004bc8 	andcs	r4, r0, r8, asr #23
200020e4:	20004c4c 	andcs	r4, r0, ip, asr #24
200020e8:	20004c90 	mulcs	r0, r0, ip
200020ec:	20004d20 	andcs	r4, r0, r0, lsr #26
200020f0:	20004d2c 	andcs	r4, r0, ip, lsr #26

200020f4 <initSprites>:
Image witch1Image;
Image witch2Image;
Image witch3Image;
Image witch4Image;
Image witchImages[4];
static void initSprites( void ) {	
200020f4:	b580      	push	{r7, lr}
200020f6:	b08a      	sub	sp, #40	; 0x28
200020f8:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempWitchLight;
200020fa:	4b33      	ldr	r3, [pc, #204]	; (200021c8 <initSprites+0xd4>)
200020fc:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer11, witch1_light_bits, witch1_black_width, witch1_black_height);
200020fe:	4933      	ldr	r1, [pc, #204]	; (200021cc <initSprites+0xd8>)
20002100:	6a78      	ldr	r0, [r7, #36]	; 0x24
20002102:	2312      	movs	r3, #18
20002104:	2212      	movs	r2, #18
20002106:	f001 fdeb 	bl	20003ce0 <load_sprite>
	witch1Light = pointer11;
2000210a:	4b31      	ldr	r3, [pc, #196]	; (200021d0 <initSprites+0xdc>)
2000210c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000210e:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempWitchGray;
20002110:	4b30      	ldr	r3, [pc, #192]	; (200021d4 <initSprites+0xe0>)
20002112:	623b      	str	r3, [r7, #32]
	load_sprite(pointer12, witch1_gray_bits, witch1_black_width, witch1_black_height);
20002114:	4930      	ldr	r1, [pc, #192]	; (200021d8 <initSprites+0xe4>)
20002116:	6a38      	ldr	r0, [r7, #32]
20002118:	2312      	movs	r3, #18
2000211a:	2212      	movs	r2, #18
2000211c:	f001 fde0 	bl	20003ce0 <load_sprite>
	witch1Gray = pointer12;
20002120:	4b2e      	ldr	r3, [pc, #184]	; (200021dc <initSprites+0xe8>)
20002122:	6a3a      	ldr	r2, [r7, #32]
20002124:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempWitchBlack;
20002126:	4b2e      	ldr	r3, [pc, #184]	; (200021e0 <initSprites+0xec>)
20002128:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer13, witch1_black_bits, witch1_black_width, witch1_black_height);
2000212a:	492e      	ldr	r1, [pc, #184]	; (200021e4 <initSprites+0xf0>)
2000212c:	69f8      	ldr	r0, [r7, #28]
2000212e:	2312      	movs	r3, #18
20002130:	2212      	movs	r2, #18
20002132:	f001 fdd5 	bl	20003ce0 <load_sprite>
	witch1Black = pointer13;	
20002136:	4b2c      	ldr	r3, [pc, #176]	; (200021e8 <initSprites+0xf4>)
20002138:	69fa      	ldr	r2, [r7, #28]
2000213a:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempWitch2Light;
2000213c:	4b2b      	ldr	r3, [pc, #172]	; (200021ec <initSprites+0xf8>)
2000213e:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer14, witch2_light_bits, witch2_black_width, witch2_black_height);
20002140:	492b      	ldr	r1, [pc, #172]	; (200021f0 <initSprites+0xfc>)
20002142:	69b8      	ldr	r0, [r7, #24]
20002144:	2312      	movs	r3, #18
20002146:	2212      	movs	r2, #18
20002148:	f001 fdca 	bl	20003ce0 <load_sprite>
	witch2Light = pointer14;
2000214c:	4b29      	ldr	r3, [pc, #164]	; (200021f4 <initSprites+0x100>)
2000214e:	69ba      	ldr	r2, [r7, #24]
20002150:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempWitch2Gray;
20002152:	4b29      	ldr	r3, [pc, #164]	; (200021f8 <initSprites+0x104>)
20002154:	617b      	str	r3, [r7, #20]
	load_sprite(pointer15, witch2_gray_bits, witch2_black_width, witch2_black_height);
20002156:	4929      	ldr	r1, [pc, #164]	; (200021fc <initSprites+0x108>)
20002158:	6978      	ldr	r0, [r7, #20]
2000215a:	2312      	movs	r3, #18
2000215c:	2212      	movs	r2, #18
2000215e:	f001 fdbf 	bl	20003ce0 <load_sprite>
	witch2Gray = pointer15;
20002162:	4b27      	ldr	r3, [pc, #156]	; (20002200 <initSprites+0x10c>)
20002164:	697a      	ldr	r2, [r7, #20]
20002166:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempWitch2Black;
20002168:	4b26      	ldr	r3, [pc, #152]	; (20002204 <initSprites+0x110>)
2000216a:	613b      	str	r3, [r7, #16]
	load_sprite(pointer16, witch2_black_bits, witch2_black_width, witch2_black_height);
2000216c:	4926      	ldr	r1, [pc, #152]	; (20002208 <initSprites+0x114>)
2000216e:	6938      	ldr	r0, [r7, #16]
20002170:	2312      	movs	r3, #18
20002172:	2212      	movs	r2, #18
20002174:	f001 fdb4 	bl	20003ce0 <load_sprite>
	witch2Black = pointer16;
20002178:	4b24      	ldr	r3, [pc, #144]	; (2000220c <initSprites+0x118>)
2000217a:	693a      	ldr	r2, [r7, #16]
2000217c:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempWitch3Light;
2000217e:	4b24      	ldr	r3, [pc, #144]	; (20002210 <initSprites+0x11c>)
20002180:	60fb      	str	r3, [r7, #12]
	load_sprite(finalPointer, witch3_light_bits, witch3_black_width, witch3_black_height);
20002182:	4924      	ldr	r1, [pc, #144]	; (20002214 <initSprites+0x120>)
20002184:	68f8      	ldr	r0, [r7, #12]
20002186:	2312      	movs	r3, #18
20002188:	2212      	movs	r2, #18
2000218a:	f001 fda9 	bl	20003ce0 <load_sprite>
	witch3Light = finalPointer;
2000218e:	4b22      	ldr	r3, [pc, #136]	; (20002218 <initSprites+0x124>)
20002190:	68fa      	ldr	r2, [r7, #12]
20002192:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempWitch3Gray;
20002194:	4b21      	ldr	r3, [pc, #132]	; (2000221c <initSprites+0x128>)
20002196:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer17, witch3_gray_bits, witch3_black_width, witch3_black_height);
20002198:	4921      	ldr	r1, [pc, #132]	; (20002220 <initSprites+0x12c>)
2000219a:	68b8      	ldr	r0, [r7, #8]
2000219c:	2312      	movs	r3, #18
2000219e:	2212      	movs	r2, #18
200021a0:	f001 fd9e 	bl	20003ce0 <load_sprite>
	witch3Gray = pointer17;
200021a4:	4b1f      	ldr	r3, [pc, #124]	; (20002224 <initSprites+0x130>)
200021a6:	68ba      	ldr	r2, [r7, #8]
200021a8:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempWitch3Black;
200021aa:	4b1f      	ldr	r3, [pc, #124]	; (20002228 <initSprites+0x134>)
200021ac:	607b      	str	r3, [r7, #4]
	load_sprite(pointer18, witch3_black_bits, witch3_black_width, witch3_black_height);
200021ae:	491f      	ldr	r1, [pc, #124]	; (2000222c <initSprites+0x138>)
200021b0:	6878      	ldr	r0, [r7, #4]
200021b2:	2312      	movs	r3, #18
200021b4:	2212      	movs	r2, #18
200021b6:	f001 fd93 	bl	20003ce0 <load_sprite>
	witch3Black = pointer18;	
200021ba:	4b1d      	ldr	r3, [pc, #116]	; (20002230 <initSprites+0x13c>)
200021bc:	687a      	ldr	r2, [r7, #4]
200021be:	601a      	str	r2, [r3, #0]
	
}
200021c0:	46c0      	nop			; (mov r8, r8)
200021c2:	46bd      	mov	sp, r7
200021c4:	b00a      	add	sp, #40	; 0x28
200021c6:	bd80      	pop	{r7, pc}
200021c8:	20004e40 	andcs	r4, r0, r0, asr #28
200021cc:	20008ecc 	andcs	r8, r0, ip, asr #29
200021d0:	20004e58 	andcs	r4, r0, r8, asr lr
200021d4:	20004dd0 	ldrdcs	r4, [r0], -r0
200021d8:	20008e94 	mulcs	r0, r4, lr
200021dc:	20004d58 	andcs	r4, r0, r8, asr sp
200021e0:	20004da8 	andcs	r4, r0, r8, lsr #27
200021e4:	20008e5c 	andcs	r8, r0, ip, asr lr
200021e8:	20004e2c 	andcs	r4, r0, ip, lsr #28
200021ec:	20004e4c 	andcs	r4, r0, ip, asr #28
200021f0:	20008f74 	andcs	r8, r0, r4, ror pc
200021f4:	20004d5c 	andcs	r4, r0, ip, asr sp
200021f8:	20004de8 	andcs	r4, r0, r8, ror #27
200021fc:	20008f3c 	andcs	r8, r0, ip, lsr pc
20002200:	20004dcc 	andcs	r4, r0, ip, asr #27
20002204:	20004d9c 	mulcs	r0, ip, sp
20002208:	20008f04 	andcs	r8, r0, r4, lsl #30
2000220c:	20004e68 	andcs	r4, r0, r8, ror #28
20002210:	20004db4 			; <UNDEFINED> instruction: 0x20004db4
20002214:	2000901c 	andcs	r9, r0, ip, lsl r0
20002218:	20004e1c 	andcs	r4, r0, ip, lsl lr
2000221c:	20004e20 	andcs	r4, r0, r0, lsr #28
20002220:	20008fe4 	andcs	r8, r0, r4, ror #31
20002224:	20004e30 	andcs	r4, r0, r0, lsr lr
20002228:	20004ddc 	ldrdcs	r4, [r0], -ip
2000222c:	20008fac 	andcs	r8, r0, ip, lsr #31
20002230:	20004df4 	strdcs	r4, [r0], -r4	; <UNPREDICTABLE>

20002234 <init_witch>:
	
void init_witch( GameObject *witchObj ) {
20002234:	b590      	push	{r4, r7, lr}
20002236:	b083      	sub	sp, #12
20002238:	af00      	add	r7, sp, #0
2000223a:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
2000223c:	4b29      	ldr	r3, [pc, #164]	; (200022e4 <init_witch+0xb0>)
2000223e:	681b      	ldr	r3, [r3, #0]
20002240:	2b00      	cmp	r3, #0
20002242:	d03b      	beq.n	200022bc <init_witch+0x88>
		initSprites();
20002244:	f7ff ff56 	bl	200020f4 <initSprites>
		firstTime = 0;			
20002248:	4b26      	ldr	r3, [pc, #152]	; (200022e4 <init_witch+0xb0>)
2000224a:	2200      	movs	r2, #0
2000224c:	601a      	str	r2, [r3, #0]

		witchImages[0] = witch1Image;
2000224e:	4b26      	ldr	r3, [pc, #152]	; (200022e8 <init_witch+0xb4>)
20002250:	4a26      	ldr	r2, [pc, #152]	; (200022ec <init_witch+0xb8>)
20002252:	ca13      	ldmia	r2!, {r0, r1, r4}
20002254:	c313      	stmia	r3!, {r0, r1, r4}
		witchImages[1] = witch2Image;
20002256:	4b24      	ldr	r3, [pc, #144]	; (200022e8 <init_witch+0xb4>)
20002258:	4a25      	ldr	r2, [pc, #148]	; (200022f0 <init_witch+0xbc>)
2000225a:	330c      	adds	r3, #12
2000225c:	ca13      	ldmia	r2!, {r0, r1, r4}
2000225e:	c313      	stmia	r3!, {r0, r1, r4}
		witchImages[2] = witch3Image;
20002260:	4b21      	ldr	r3, [pc, #132]	; (200022e8 <init_witch+0xb4>)
20002262:	4a24      	ldr	r2, [pc, #144]	; (200022f4 <init_witch+0xc0>)
20002264:	3318      	adds	r3, #24
20002266:	ca13      	ldmia	r2!, {r0, r1, r4}
20002268:	c313      	stmia	r3!, {r0, r1, r4}
		witchImages[3] = witch4Image;
2000226a:	4b1f      	ldr	r3, [pc, #124]	; (200022e8 <init_witch+0xb4>)
2000226c:	4a22      	ldr	r2, [pc, #136]	; (200022f8 <init_witch+0xc4>)
2000226e:	3324      	adds	r3, #36	; 0x24
20002270:	ca13      	ldmia	r2!, {r0, r1, r4}
20002272:	c313      	stmia	r3!, {r0, r1, r4}
		
		
		load_image(&witchImages[0], witch1Black, witch1Gray, witch1Light);
20002274:	4b21      	ldr	r3, [pc, #132]	; (200022fc <init_witch+0xc8>)
20002276:	6819      	ldr	r1, [r3, #0]
20002278:	4b21      	ldr	r3, [pc, #132]	; (20002300 <init_witch+0xcc>)
2000227a:	681a      	ldr	r2, [r3, #0]
2000227c:	4b21      	ldr	r3, [pc, #132]	; (20002304 <init_witch+0xd0>)
2000227e:	681b      	ldr	r3, [r3, #0]
20002280:	4819      	ldr	r0, [pc, #100]	; (200022e8 <init_witch+0xb4>)
20002282:	f001 fd19 	bl	20003cb8 <load_image>
		load_image(&witchImages[1], witch2Black, witch2Gray, witch2Light);
20002286:	4b20      	ldr	r3, [pc, #128]	; (20002308 <init_witch+0xd4>)
20002288:	6819      	ldr	r1, [r3, #0]
2000228a:	4b20      	ldr	r3, [pc, #128]	; (2000230c <init_witch+0xd8>)
2000228c:	681a      	ldr	r2, [r3, #0]
2000228e:	4b20      	ldr	r3, [pc, #128]	; (20002310 <init_witch+0xdc>)
20002290:	681b      	ldr	r3, [r3, #0]
20002292:	4820      	ldr	r0, [pc, #128]	; (20002314 <init_witch+0xe0>)
20002294:	f001 fd10 	bl	20003cb8 <load_image>
		load_image(&witchImages[2], witch3Black, witch3Gray, witch3Light);
20002298:	4b1f      	ldr	r3, [pc, #124]	; (20002318 <init_witch+0xe4>)
2000229a:	6819      	ldr	r1, [r3, #0]
2000229c:	4b1f      	ldr	r3, [pc, #124]	; (2000231c <init_witch+0xe8>)
2000229e:	681a      	ldr	r2, [r3, #0]
200022a0:	4b1f      	ldr	r3, [pc, #124]	; (20002320 <init_witch+0xec>)
200022a2:	681b      	ldr	r3, [r3, #0]
200022a4:	481f      	ldr	r0, [pc, #124]	; (20002324 <init_witch+0xf0>)
200022a6:	f001 fd07 	bl	20003cb8 <load_image>
		load_image(&witchImages[3], witch2Black, witch2Gray, witch2Light);
200022aa:	4b17      	ldr	r3, [pc, #92]	; (20002308 <init_witch+0xd4>)
200022ac:	6819      	ldr	r1, [r3, #0]
200022ae:	4b17      	ldr	r3, [pc, #92]	; (2000230c <init_witch+0xd8>)
200022b0:	681a      	ldr	r2, [r3, #0]
200022b2:	4b17      	ldr	r3, [pc, #92]	; (20002310 <init_witch+0xdc>)
200022b4:	681b      	ldr	r3, [r3, #0]
200022b6:	481c      	ldr	r0, [pc, #112]	; (20002328 <init_witch+0xf4>)
200022b8:	f001 fcfe 	bl	20003cb8 <load_image>
		
	}
	
	witchObj->images = witchImages;
200022bc:	687b      	ldr	r3, [r7, #4]
200022be:	4a0a      	ldr	r2, [pc, #40]	; (200022e8 <init_witch+0xb4>)
200022c0:	601a      	str	r2, [r3, #0]

	witchObj->current_frame = 0;
200022c2:	687b      	ldr	r3, [r7, #4]
200022c4:	2200      	movs	r2, #0
200022c6:	615a      	str	r2, [r3, #20]
	witchObj->n_frames = 4;
200022c8:	687b      	ldr	r3, [r7, #4]
200022ca:	2204      	movs	r2, #4
200022cc:	619a      	str	r2, [r3, #24]
	witchObj->animation_speed = 1;
200022ce:	687b      	ldr	r3, [r7, #4]
200022d0:	2201      	movs	r2, #1
200022d2:	61da      	str	r2, [r3, #28]
	witchObj->animation_counter = 0;
200022d4:	687b      	ldr	r3, [r7, #4]
200022d6:	2200      	movs	r2, #0
200022d8:	621a      	str	r2, [r3, #32]
}
200022da:	46c0      	nop			; (mov r8, r8)
200022dc:	46bd      	mov	sp, r7
200022de:	b003      	add	sp, #12
200022e0:	bd90      	pop	{r4, r7, pc}
200022e2:	46c0      	nop			; (mov r8, r8)
200022e4:	20009054 	andcs	r9, r0, r4, asr r0
200022e8:	20004d60 	andcs	r4, r0, r0, ror #26
200022ec:	20004e34 	andcs	r4, r0, r4, lsr lr
200022f0:	20004d90 	mulcs	r0, r0, sp
200022f4:	20004e5c 	andcs	r4, r0, ip, asr lr
200022f8:	20004dc0 	andcs	r4, r0, r0, asr #27
200022fc:	20004e2c 	andcs	r4, r0, ip, lsr #28
20002300:	20004d58 	andcs	r4, r0, r8, asr sp
20002304:	20004e58 	andcs	r4, r0, r8, asr lr
20002308:	20004e68 	andcs	r4, r0, r8, ror #28
2000230c:	20004dcc 	andcs	r4, r0, ip, asr #27
20002310:	20004d5c 	andcs	r4, r0, ip, asr sp
20002314:	20004d6c 	andcs	r4, r0, ip, ror #26
20002318:	20004df4 	strdcs	r4, [r0], -r4	; <UNPREDICTABLE>
2000231c:	20004e30 	andcs	r4, r0, r0, lsr lr
20002320:	20004e1c 	andcs	r4, r0, ip, lsl lr
20002324:	20004d78 	andcs	r4, r0, r8, ror sp
20002328:	20004d84 	andcs	r4, r0, r4, lsl #27

2000232c <initSprites>:
Image DIP1Image;
Image DIP2Image;
Image DIP3Image;
Image DIP4Image;
Image DIPImages[4];
static void initSprites( void ) {	
2000232c:	b580      	push	{r7, lr}
2000232e:	b08a      	sub	sp, #40	; 0x28
20002330:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempDIPLight;
20002332:	4b33      	ldr	r3, [pc, #204]	; (20002400 <initSprites+0xd4>)
20002334:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer11, witch1_light_bits, witch1_black_width, witch1_black_height);
20002336:	4933      	ldr	r1, [pc, #204]	; (20002404 <initSprites+0xd8>)
20002338:	6a78      	ldr	r0, [r7, #36]	; 0x24
2000233a:	2312      	movs	r3, #18
2000233c:	2212      	movs	r2, #18
2000233e:	f001 fccf 	bl	20003ce0 <load_sprite>
	DIP1Light = pointer11;
20002342:	4b31      	ldr	r3, [pc, #196]	; (20002408 <initSprites+0xdc>)
20002344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20002346:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempDIPGray;
20002348:	4b30      	ldr	r3, [pc, #192]	; (2000240c <initSprites+0xe0>)
2000234a:	623b      	str	r3, [r7, #32]
	load_sprite(pointer12, witch1_gray_bits, witch1_black_width, witch1_black_height);
2000234c:	4930      	ldr	r1, [pc, #192]	; (20002410 <initSprites+0xe4>)
2000234e:	6a38      	ldr	r0, [r7, #32]
20002350:	2312      	movs	r3, #18
20002352:	2212      	movs	r2, #18
20002354:	f001 fcc4 	bl	20003ce0 <load_sprite>
	DIP1Gray = pointer12;
20002358:	4b2e      	ldr	r3, [pc, #184]	; (20002414 <initSprites+0xe8>)
2000235a:	6a3a      	ldr	r2, [r7, #32]
2000235c:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempDIPBlack;
2000235e:	4b2e      	ldr	r3, [pc, #184]	; (20002418 <initSprites+0xec>)
20002360:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer13, witch1_black_bits, witch1_black_width, witch1_black_height);
20002362:	492e      	ldr	r1, [pc, #184]	; (2000241c <initSprites+0xf0>)
20002364:	69f8      	ldr	r0, [r7, #28]
20002366:	2312      	movs	r3, #18
20002368:	2212      	movs	r2, #18
2000236a:	f001 fcb9 	bl	20003ce0 <load_sprite>
	DIP1Black = pointer13;	
2000236e:	4b2c      	ldr	r3, [pc, #176]	; (20002420 <initSprites+0xf4>)
20002370:	69fa      	ldr	r2, [r7, #28]
20002372:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempDIP2Light;
20002374:	4b2b      	ldr	r3, [pc, #172]	; (20002424 <initSprites+0xf8>)
20002376:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer14, witch2_light_bits, witch2_black_width, witch2_black_height);
20002378:	492b      	ldr	r1, [pc, #172]	; (20002428 <initSprites+0xfc>)
2000237a:	69b8      	ldr	r0, [r7, #24]
2000237c:	2312      	movs	r3, #18
2000237e:	2212      	movs	r2, #18
20002380:	f001 fcae 	bl	20003ce0 <load_sprite>
	DIP2Light = pointer14;
20002384:	4b29      	ldr	r3, [pc, #164]	; (2000242c <initSprites+0x100>)
20002386:	69ba      	ldr	r2, [r7, #24]
20002388:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempDIP2Gray;
2000238a:	4b29      	ldr	r3, [pc, #164]	; (20002430 <initSprites+0x104>)
2000238c:	617b      	str	r3, [r7, #20]
	load_sprite(pointer15, witch2_gray_bits, witch2_black_width, witch2_black_height);
2000238e:	4929      	ldr	r1, [pc, #164]	; (20002434 <initSprites+0x108>)
20002390:	6978      	ldr	r0, [r7, #20]
20002392:	2312      	movs	r3, #18
20002394:	2212      	movs	r2, #18
20002396:	f001 fca3 	bl	20003ce0 <load_sprite>
	DIP2Gray = pointer15;
2000239a:	4b27      	ldr	r3, [pc, #156]	; (20002438 <initSprites+0x10c>)
2000239c:	697a      	ldr	r2, [r7, #20]
2000239e:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempDIP2Black;
200023a0:	4b26      	ldr	r3, [pc, #152]	; (2000243c <initSprites+0x110>)
200023a2:	613b      	str	r3, [r7, #16]
	load_sprite(pointer16, witch2_black_bits, witch2_black_width, witch2_black_height);
200023a4:	4926      	ldr	r1, [pc, #152]	; (20002440 <initSprites+0x114>)
200023a6:	6938      	ldr	r0, [r7, #16]
200023a8:	2312      	movs	r3, #18
200023aa:	2212      	movs	r2, #18
200023ac:	f001 fc98 	bl	20003ce0 <load_sprite>
	DIP2Black = pointer16;
200023b0:	4b24      	ldr	r3, [pc, #144]	; (20002444 <initSprites+0x118>)
200023b2:	693a      	ldr	r2, [r7, #16]
200023b4:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempDIP3Light;
200023b6:	4b24      	ldr	r3, [pc, #144]	; (20002448 <initSprites+0x11c>)
200023b8:	60fb      	str	r3, [r7, #12]
	load_sprite(finalPointer, witch3_light_bits, witch3_black_width, witch3_black_height);
200023ba:	4924      	ldr	r1, [pc, #144]	; (2000244c <initSprites+0x120>)
200023bc:	68f8      	ldr	r0, [r7, #12]
200023be:	2312      	movs	r3, #18
200023c0:	2212      	movs	r2, #18
200023c2:	f001 fc8d 	bl	20003ce0 <load_sprite>
	DIP3Light = finalPointer;
200023c6:	4b22      	ldr	r3, [pc, #136]	; (20002450 <initSprites+0x124>)
200023c8:	68fa      	ldr	r2, [r7, #12]
200023ca:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempDIP3Gray;
200023cc:	4b21      	ldr	r3, [pc, #132]	; (20002454 <initSprites+0x128>)
200023ce:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer17, witch3_gray_bits, witch3_black_width, witch3_black_height);
200023d0:	4921      	ldr	r1, [pc, #132]	; (20002458 <initSprites+0x12c>)
200023d2:	68b8      	ldr	r0, [r7, #8]
200023d4:	2312      	movs	r3, #18
200023d6:	2212      	movs	r2, #18
200023d8:	f001 fc82 	bl	20003ce0 <load_sprite>
	DIP3Gray = pointer17;
200023dc:	4b1f      	ldr	r3, [pc, #124]	; (2000245c <initSprites+0x130>)
200023de:	68ba      	ldr	r2, [r7, #8]
200023e0:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempDIP3Black;
200023e2:	4b1f      	ldr	r3, [pc, #124]	; (20002460 <initSprites+0x134>)
200023e4:	607b      	str	r3, [r7, #4]
	load_sprite(pointer18, witch3_black_bits, witch3_black_width, witch3_black_height);
200023e6:	491f      	ldr	r1, [pc, #124]	; (20002464 <initSprites+0x138>)
200023e8:	6878      	ldr	r0, [r7, #4]
200023ea:	2312      	movs	r3, #18
200023ec:	2212      	movs	r2, #18
200023ee:	f001 fc77 	bl	20003ce0 <load_sprite>
	DIP3Black = pointer18;	
200023f2:	4b1d      	ldr	r3, [pc, #116]	; (20002468 <initSprites+0x13c>)
200023f4:	687a      	ldr	r2, [r7, #4]
200023f6:	601a      	str	r2, [r3, #0]
	
}
200023f8:	46c0      	nop			; (mov r8, r8)
200023fa:	46bd      	mov	sp, r7
200023fc:	b00a      	add	sp, #40	; 0x28
200023fe:	bd80      	pop	{r7, pc}
20002400:	20004eb4 			; <UNDEFINED> instruction: 0x20004eb4
20002404:	200090c8 	andcs	r9, r0, r8, asr #1
20002408:	20004f20 	andcs	r4, r0, r0, lsr #30
2000240c:	20004f74 	andcs	r4, r0, r4, ror pc
20002410:	20009090 	mulcs	r0, r0, r0
20002414:	20004f48 	andcs	r4, r0, r8, asr #30
20002418:	20004f3c 	andcs	r4, r0, ip, lsr pc
2000241c:	20009058 	andcs	r9, r0, r8, asr r0
20002420:	20004eb0 			; <UNDEFINED> instruction: 0x20004eb0
20002424:	20004f68 	andcs	r4, r0, r8, ror #30
20002428:	20009170 	andcs	r9, r0, r0, ror r1
2000242c:	20004f24 	andcs	r4, r0, r4, lsr #30
20002430:	20004ea0 	andcs	r4, r0, r0, lsr #29
20002434:	20009138 	andcs	r9, r0, r8, lsr r1
20002438:	20004e9c 	mulcs	r0, ip, lr
2000243c:	20004efc 	strdcs	r4, [r0], -ip
20002440:	20009100 	andcs	r9, r0, r0, lsl #2
20002444:	20004f2c 	andcs	r4, r0, ip, lsr #30
20002448:	20004ec0 	andcs	r4, r0, r0, asr #29
2000244c:	20009218 	andcs	r9, r0, r8, lsl r2
20002450:	20004f28 	andcs	r4, r0, r8, lsr #30
20002454:	20004f30 	andcs	r4, r0, r0, lsr pc
20002458:	200091e0 	andcs	r9, r0, r0, ror #3
2000245c:	20004f58 	andcs	r4, r0, r8, asr pc
20002460:	20004f4c 	andcs	r4, r0, ip, asr #30
20002464:	200091a8 	andcs	r9, r0, r8, lsr #3
20002468:	20004eac 	andcs	r4, r0, ip, lsr #29

2000246c <init_DIP>:
	
void init_DIP( GameObject *DIPObj ) {
2000246c:	b590      	push	{r4, r7, lr}
2000246e:	b083      	sub	sp, #12
20002470:	af00      	add	r7, sp, #0
20002472:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20002474:	4b29      	ldr	r3, [pc, #164]	; (2000251c <init_DIP+0xb0>)
20002476:	681b      	ldr	r3, [r3, #0]
20002478:	2b00      	cmp	r3, #0
2000247a:	d03b      	beq.n	200024f4 <init_DIP+0x88>
		initSprites();
2000247c:	f7ff ff56 	bl	2000232c <initSprites>
		firstTime = 0;			
20002480:	4b26      	ldr	r3, [pc, #152]	; (2000251c <init_DIP+0xb0>)
20002482:	2200      	movs	r2, #0
20002484:	601a      	str	r2, [r3, #0]

		DIPImages[0] = DIP1Image;
20002486:	4b26      	ldr	r3, [pc, #152]	; (20002520 <init_DIP+0xb4>)
20002488:	4a26      	ldr	r2, [pc, #152]	; (20002524 <init_DIP+0xb8>)
2000248a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000248c:	c313      	stmia	r3!, {r0, r1, r4}
		DIPImages[1] = DIP2Image;
2000248e:	4b24      	ldr	r3, [pc, #144]	; (20002520 <init_DIP+0xb4>)
20002490:	4a25      	ldr	r2, [pc, #148]	; (20002528 <init_DIP+0xbc>)
20002492:	330c      	adds	r3, #12
20002494:	ca13      	ldmia	r2!, {r0, r1, r4}
20002496:	c313      	stmia	r3!, {r0, r1, r4}
		DIPImages[2] = DIP3Image;
20002498:	4b21      	ldr	r3, [pc, #132]	; (20002520 <init_DIP+0xb4>)
2000249a:	4a24      	ldr	r2, [pc, #144]	; (2000252c <init_DIP+0xc0>)
2000249c:	3318      	adds	r3, #24
2000249e:	ca13      	ldmia	r2!, {r0, r1, r4}
200024a0:	c313      	stmia	r3!, {r0, r1, r4}
		DIPImages[3] = DIP4Image;
200024a2:	4b1f      	ldr	r3, [pc, #124]	; (20002520 <init_DIP+0xb4>)
200024a4:	4a22      	ldr	r2, [pc, #136]	; (20002530 <init_DIP+0xc4>)
200024a6:	3324      	adds	r3, #36	; 0x24
200024a8:	ca13      	ldmia	r2!, {r0, r1, r4}
200024aa:	c313      	stmia	r3!, {r0, r1, r4}
		
		
		load_image(&DIPImages[0], DIP1Black, DIP1Light, DIP1Gray);
200024ac:	4b21      	ldr	r3, [pc, #132]	; (20002534 <init_DIP+0xc8>)
200024ae:	6819      	ldr	r1, [r3, #0]
200024b0:	4b21      	ldr	r3, [pc, #132]	; (20002538 <init_DIP+0xcc>)
200024b2:	681a      	ldr	r2, [r3, #0]
200024b4:	4b21      	ldr	r3, [pc, #132]	; (2000253c <init_DIP+0xd0>)
200024b6:	681b      	ldr	r3, [r3, #0]
200024b8:	4819      	ldr	r0, [pc, #100]	; (20002520 <init_DIP+0xb4>)
200024ba:	f001 fbfd 	bl	20003cb8 <load_image>
		load_image(&DIPImages[1], DIP2Black, DIP2Light, DIP2Gray);
200024be:	4b20      	ldr	r3, [pc, #128]	; (20002540 <init_DIP+0xd4>)
200024c0:	6819      	ldr	r1, [r3, #0]
200024c2:	4b20      	ldr	r3, [pc, #128]	; (20002544 <init_DIP+0xd8>)
200024c4:	681a      	ldr	r2, [r3, #0]
200024c6:	4b20      	ldr	r3, [pc, #128]	; (20002548 <init_DIP+0xdc>)
200024c8:	681b      	ldr	r3, [r3, #0]
200024ca:	4820      	ldr	r0, [pc, #128]	; (2000254c <init_DIP+0xe0>)
200024cc:	f001 fbf4 	bl	20003cb8 <load_image>
		load_image(&DIPImages[2], DIP3Black, DIP3Light, DIP3Gray);
200024d0:	4b1f      	ldr	r3, [pc, #124]	; (20002550 <init_DIP+0xe4>)
200024d2:	6819      	ldr	r1, [r3, #0]
200024d4:	4b1f      	ldr	r3, [pc, #124]	; (20002554 <init_DIP+0xe8>)
200024d6:	681a      	ldr	r2, [r3, #0]
200024d8:	4b1f      	ldr	r3, [pc, #124]	; (20002558 <init_DIP+0xec>)
200024da:	681b      	ldr	r3, [r3, #0]
200024dc:	481f      	ldr	r0, [pc, #124]	; (2000255c <init_DIP+0xf0>)
200024de:	f001 fbeb 	bl	20003cb8 <load_image>
		load_image(&DIPImages[3], DIP2Black, DIP2Light, DIP2Gray);
200024e2:	4b17      	ldr	r3, [pc, #92]	; (20002540 <init_DIP+0xd4>)
200024e4:	6819      	ldr	r1, [r3, #0]
200024e6:	4b17      	ldr	r3, [pc, #92]	; (20002544 <init_DIP+0xd8>)
200024e8:	681a      	ldr	r2, [r3, #0]
200024ea:	4b17      	ldr	r3, [pc, #92]	; (20002548 <init_DIP+0xdc>)
200024ec:	681b      	ldr	r3, [r3, #0]
200024ee:	481c      	ldr	r0, [pc, #112]	; (20002560 <init_DIP+0xf4>)
200024f0:	f001 fbe2 	bl	20003cb8 <load_image>
		
	}
	
	DIPObj->images = DIPImages;
200024f4:	687b      	ldr	r3, [r7, #4]
200024f6:	4a0a      	ldr	r2, [pc, #40]	; (20002520 <init_DIP+0xb4>)
200024f8:	601a      	str	r2, [r3, #0]

	DIPObj->current_frame = 0;
200024fa:	687b      	ldr	r3, [r7, #4]
200024fc:	2200      	movs	r2, #0
200024fe:	615a      	str	r2, [r3, #20]
	DIPObj->n_frames = 4;
20002500:	687b      	ldr	r3, [r7, #4]
20002502:	2204      	movs	r2, #4
20002504:	619a      	str	r2, [r3, #24]
	DIPObj->animation_speed = 1;
20002506:	687b      	ldr	r3, [r7, #4]
20002508:	2201      	movs	r2, #1
2000250a:	61da      	str	r2, [r3, #28]
	DIPObj->animation_counter = 0;
2000250c:	687b      	ldr	r3, [r7, #4]
2000250e:	2200      	movs	r2, #0
20002510:	621a      	str	r2, [r3, #32]
}
20002512:	46c0      	nop			; (mov r8, r8)
20002514:	46bd      	mov	sp, r7
20002516:	b003      	add	sp, #12
20002518:	bd90      	pop	{r4, r7, pc}
2000251a:	46c0      	nop			; (mov r8, r8)
2000251c:	20009250 	andcs	r9, r0, r0, asr r2
20002520:	20004ecc 	andcs	r4, r0, ip, asr #29
20002524:	20004f14 	andcs	r4, r0, r4, lsl pc
20002528:	20004e90 	mulcs	r0, r0, lr
2000252c:	20004f08 	andcs	r4, r0, r8, lsl #30
20002530:	20004f5c 	andcs	r4, r0, ip, asr pc
20002534:	20004eb0 			; <UNDEFINED> instruction: 0x20004eb0
20002538:	20004f20 	andcs	r4, r0, r0, lsr #30
2000253c:	20004f48 	andcs	r4, r0, r8, asr #30
20002540:	20004f2c 	andcs	r4, r0, ip, lsr #30
20002544:	20004f24 	andcs	r4, r0, r4, lsr #30
20002548:	20004e9c 	mulcs	r0, ip, lr
2000254c:	20004ed8 	ldrdcs	r4, [r0], -r8
20002550:	20004eac 	andcs	r4, r0, ip, lsr #29
20002554:	20004f28 	andcs	r4, r0, r8, lsr #30
20002558:	20004f58 	andcs	r4, r0, r8, asr pc
2000255c:	20004ee4 	andcs	r4, r0, r4, ror #29
20002560:	20004ef0 	strdcs	r4, [r0], -r0

20002564 <setPlayerPosition>:

static int playerPositionX = 0;
static int playerPositionY = 0;

void setPlayerPosition(int x, int y){
20002564:	b580      	push	{r7, lr}
20002566:	b082      	sub	sp, #8
20002568:	af00      	add	r7, sp, #0
2000256a:	6078      	str	r0, [r7, #4]
2000256c:	6039      	str	r1, [r7, #0]
	playerPositionX = x;
2000256e:	4b05      	ldr	r3, [pc, #20]	; (20002584 <setPlayerPosition+0x20>)
20002570:	687a      	ldr	r2, [r7, #4]
20002572:	601a      	str	r2, [r3, #0]
	playerPositionY = y;
20002574:	4b04      	ldr	r3, [pc, #16]	; (20002588 <setPlayerPosition+0x24>)
20002576:	683a      	ldr	r2, [r7, #0]
20002578:	601a      	str	r2, [r3, #0]
}
2000257a:	46c0      	nop			; (mov r8, r8)
2000257c:	46bd      	mov	sp, r7
2000257e:	b002      	add	sp, #8
20002580:	bd80      	pop	{r7, pc}
20002582:	46c0      	nop			; (mov r8, r8)
20002584:	200047f4 	strdcs	r4, [r0], -r4	; <UNPREDICTABLE>
20002588:	200047f8 	strdcs	r4, [r0], -r8

2000258c <DIPUpdate>:


void DIPUpdate(GameObject *this) {
2000258c:	b580      	push	{r7, lr}
2000258e:	b082      	sub	sp, #8
20002590:	af00      	add	r7, sp, #0
20002592:	6078      	str	r0, [r7, #4]
	gameObjectUpdate(this);
20002594:	687b      	ldr	r3, [r7, #4]
20002596:	0018      	movs	r0, r3
20002598:	f7ff f980 	bl	2000189c <gameObjectUpdate>
	static int counter = 0;
	static int direction = -1;
	static int isRunning = 0;
	counter++;
2000259c:	4b39      	ldr	r3, [pc, #228]	; (20002684 <DIPUpdate+0xf8>)
2000259e:	681b      	ldr	r3, [r3, #0]
200025a0:	1c5a      	adds	r2, r3, #1
200025a2:	4b38      	ldr	r3, [pc, #224]	; (20002684 <DIPUpdate+0xf8>)
200025a4:	601a      	str	r2, [r3, #0]
	
	if (!read_DIL_single(LIGHT_TRIGGER)){ // Only move if the light is off
200025a6:	2006      	movs	r0, #6
200025a8:	f001 fbca 	bl	20003d40 <read_DIL_single>
200025ac:	1e03      	subs	r3, r0, #0
200025ae:	d165      	bne.n	2000267c <DIPUpdate+0xf0>
		
		if (this->yPos >= playerPositionY){
200025b0:	687b      	ldr	r3, [r7, #4]
200025b2:	689a      	ldr	r2, [r3, #8]
200025b4:	4b34      	ldr	r3, [pc, #208]	; (20002688 <DIPUpdate+0xfc>)
200025b6:	681b      	ldr	r3, [r3, #0]
200025b8:	429a      	cmp	r2, r3
200025ba:	db03      	blt.n	200025c4 <DIPUpdate+0x38>
			isRunning = 1;
200025bc:	4b33      	ldr	r3, [pc, #204]	; (2000268c <DIPUpdate+0x100>)
200025be:	2201      	movs	r2, #1
200025c0:	601a      	str	r2, [r3, #0]
200025c2:	e023      	b.n	2000260c <DIPUpdate+0x80>
		}
		else if ((playerPositionX + DIP_WIDTH >= this->xPos && playerPositionX <= this->xPos + DIP_WIDTH )) { // Move faster if player is below or on the same level
200025c4:	4b32      	ldr	r3, [pc, #200]	; (20002690 <DIPUpdate+0x104>)
200025c6:	681b      	ldr	r3, [r3, #0]
200025c8:	3312      	adds	r3, #18
200025ca:	001a      	movs	r2, r3
200025cc:	687b      	ldr	r3, [r7, #4]
200025ce:	685b      	ldr	r3, [r3, #4]
200025d0:	429a      	cmp	r2, r3
200025d2:	db1b      	blt.n	2000260c <DIPUpdate+0x80>
200025d4:	687b      	ldr	r3, [r7, #4]
200025d6:	685b      	ldr	r3, [r3, #4]
200025d8:	3312      	adds	r3, #18
200025da:	001a      	movs	r2, r3
200025dc:	4b2c      	ldr	r3, [pc, #176]	; (20002690 <DIPUpdate+0x104>)
200025de:	681b      	ldr	r3, [r3, #0]
200025e0:	429a      	cmp	r2, r3
200025e2:	db13      	blt.n	2000260c <DIPUpdate+0x80>
			isRunning = 1;
200025e4:	4b29      	ldr	r3, [pc, #164]	; (2000268c <DIPUpdate+0x100>)
200025e6:	2201      	movs	r2, #1
200025e8:	601a      	str	r2, [r3, #0]
			if (RIGHT_POINT - playerPositionX > playerPositionX - LEFT_POINT){
200025ea:	4b29      	ldr	r3, [pc, #164]	; (20002690 <DIPUpdate+0x104>)
200025ec:	681b      	ldr	r3, [r3, #0]
200025ee:	226b      	movs	r2, #107	; 0x6b
200025f0:	1ad2      	subs	r2, r2, r3
200025f2:	4b27      	ldr	r3, [pc, #156]	; (20002690 <DIPUpdate+0x104>)
200025f4:	681b      	ldr	r3, [r3, #0]
200025f6:	3b2e      	subs	r3, #46	; 0x2e
200025f8:	429a      	cmp	r2, r3
200025fa:	dd03      	ble.n	20002604 <DIPUpdate+0x78>
				direction = 1;
200025fc:	4b25      	ldr	r3, [pc, #148]	; (20002694 <DIPUpdate+0x108>)
200025fe:	2201      	movs	r2, #1
20002600:	601a      	str	r2, [r3, #0]
20002602:	e003      	b.n	2000260c <DIPUpdate+0x80>
			}
			else{
				direction = -1;
20002604:	4b23      	ldr	r3, [pc, #140]	; (20002694 <DIPUpdate+0x108>)
20002606:	2201      	movs	r2, #1
20002608:	4252      	negs	r2, r2
2000260a:	601a      	str	r2, [r3, #0]
			}
		} 
		
		
		
		if (isRunning){
2000260c:	4b1f      	ldr	r3, [pc, #124]	; (2000268c <DIPUpdate+0x100>)
2000260e:	681b      	ldr	r3, [r3, #0]
20002610:	2b00      	cmp	r3, #0
20002612:	d00a      	beq.n	2000262a <DIPUpdate+0x9e>
			this->xPos += direction*3;
20002614:	687b      	ldr	r3, [r7, #4]
20002616:	6859      	ldr	r1, [r3, #4]
20002618:	4b1e      	ldr	r3, [pc, #120]	; (20002694 <DIPUpdate+0x108>)
2000261a:	681a      	ldr	r2, [r3, #0]
2000261c:	0013      	movs	r3, r2
2000261e:	005b      	lsls	r3, r3, #1
20002620:	189b      	adds	r3, r3, r2
20002622:	18ca      	adds	r2, r1, r3
20002624:	687b      	ldr	r3, [r7, #4]
20002626:	605a      	str	r2, [r3, #4]
20002628:	e012      	b.n	20002650 <DIPUpdate+0xc4>
		} else {
			this->xPos += (counter % 2)*direction;
2000262a:	687b      	ldr	r3, [r7, #4]
2000262c:	685a      	ldr	r2, [r3, #4]
2000262e:	4b15      	ldr	r3, [pc, #84]	; (20002684 <DIPUpdate+0xf8>)
20002630:	681b      	ldr	r3, [r3, #0]
20002632:	4919      	ldr	r1, [pc, #100]	; (20002698 <DIPUpdate+0x10c>)
20002634:	400b      	ands	r3, r1
20002636:	d504      	bpl.n	20002642 <DIPUpdate+0xb6>
20002638:	3b01      	subs	r3, #1
2000263a:	2102      	movs	r1, #2
2000263c:	4249      	negs	r1, r1
2000263e:	430b      	orrs	r3, r1
20002640:	3301      	adds	r3, #1
20002642:	0019      	movs	r1, r3
20002644:	4b13      	ldr	r3, [pc, #76]	; (20002694 <DIPUpdate+0x108>)
20002646:	681b      	ldr	r3, [r3, #0]
20002648:	434b      	muls	r3, r1
2000264a:	18d2      	adds	r2, r2, r3
2000264c:	687b      	ldr	r3, [r7, #4]
2000264e:	605a      	str	r2, [r3, #4]
		}
		
		if(this->xPos > RIGHT_POINT) {
20002650:	687b      	ldr	r3, [r7, #4]
20002652:	685b      	ldr	r3, [r3, #4]
20002654:	2b6b      	cmp	r3, #107	; 0x6b
20002656:	dd07      	ble.n	20002668 <DIPUpdate+0xdc>
			isRunning = 0;
20002658:	4b0c      	ldr	r3, [pc, #48]	; (2000268c <DIPUpdate+0x100>)
2000265a:	2200      	movs	r2, #0
2000265c:	601a      	str	r2, [r3, #0]
			direction = -1;
2000265e:	4b0d      	ldr	r3, [pc, #52]	; (20002694 <DIPUpdate+0x108>)
20002660:	2201      	movs	r2, #1
20002662:	4252      	negs	r2, r2
20002664:	601a      	str	r2, [r3, #0]
		} else if(this->xPos < LEFT_POINT) {
			isRunning = 0;
			direction = 1;
		}
	}
}
20002666:	e009      	b.n	2000267c <DIPUpdate+0xf0>
		} else if(this->xPos < LEFT_POINT) {
20002668:	687b      	ldr	r3, [r7, #4]
2000266a:	685b      	ldr	r3, [r3, #4]
2000266c:	2b2d      	cmp	r3, #45	; 0x2d
2000266e:	dc05      	bgt.n	2000267c <DIPUpdate+0xf0>
			isRunning = 0;
20002670:	4b06      	ldr	r3, [pc, #24]	; (2000268c <DIPUpdate+0x100>)
20002672:	2200      	movs	r2, #0
20002674:	601a      	str	r2, [r3, #0]
			direction = 1;
20002676:	4b07      	ldr	r3, [pc, #28]	; (20002694 <DIPUpdate+0x108>)
20002678:	2201      	movs	r2, #1
2000267a:	601a      	str	r2, [r3, #0]
}
2000267c:	46c0      	nop			; (mov r8, r8)
2000267e:	46bd      	mov	sp, r7
20002680:	b002      	add	sp, #8
20002682:	bd80      	pop	{r7, pc}
20002684:	200047fc 	strdcs	r4, [r0], -ip
20002688:	200047f8 	strdcs	r4, [r0], -r8
2000268c:	20004800 	andcs	r4, r0, r0, lsl #16
20002690:	200047f4 	strdcs	r4, [r0], -r4	; <UNPREDICTABLE>
20002694:	20009254 	andcs	r9, r0, r4, asr r2
20002698:	80000001 	andhi	r0, r0, r1

2000269c <initSprites>:
Image flame1Image;
Image flame2Image;
Image flame3Image;
Image flame4Image;
Image flameImages[4];
static void initSprites( void ) {	
2000269c:	b580      	push	{r7, lr}
2000269e:	b08c      	sub	sp, #48	; 0x30
200026a0:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempFlameLight;
200026a2:	4b44      	ldr	r3, [pc, #272]	; (200027b4 <initSprites+0x118>)
200026a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer11, flame1_light_bits, flame1_black_width, flame1_black_height);
200026a6:	4944      	ldr	r1, [pc, #272]	; (200027b8 <initSprites+0x11c>)
200026a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
200026aa:	2327      	movs	r3, #39	; 0x27
200026ac:	2211      	movs	r2, #17
200026ae:	f001 fb17 	bl	20003ce0 <load_sprite>
	flame1Light = pointer11;
200026b2:	4b42      	ldr	r3, [pc, #264]	; (200027bc <initSprites+0x120>)
200026b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
200026b6:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempFlameGray;
200026b8:	4b41      	ldr	r3, [pc, #260]	; (200027c0 <initSprites+0x124>)
200026ba:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer12, flame1_gray_bits, flame1_black_width, flame1_black_height);
200026bc:	4941      	ldr	r1, [pc, #260]	; (200027c4 <initSprites+0x128>)
200026be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
200026c0:	2327      	movs	r3, #39	; 0x27
200026c2:	2211      	movs	r2, #17
200026c4:	f001 fb0c 	bl	20003ce0 <load_sprite>
	flame1Gray = pointer12;
200026c8:	4b3f      	ldr	r3, [pc, #252]	; (200027c8 <initSprites+0x12c>)
200026ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
200026cc:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempFlameBlack;
200026ce:	4b3f      	ldr	r3, [pc, #252]	; (200027cc <initSprites+0x130>)
200026d0:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer13, flame1_black_bits, flame1_black_width, flame1_black_height);
200026d2:	493f      	ldr	r1, [pc, #252]	; (200027d0 <initSprites+0x134>)
200026d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
200026d6:	2327      	movs	r3, #39	; 0x27
200026d8:	2211      	movs	r2, #17
200026da:	f001 fb01 	bl	20003ce0 <load_sprite>
	flame1Black = pointer13;	
200026de:	4b3d      	ldr	r3, [pc, #244]	; (200027d4 <initSprites+0x138>)
200026e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200026e2:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempFlame2Light;
200026e4:	4b3c      	ldr	r3, [pc, #240]	; (200027d8 <initSprites+0x13c>)
200026e6:	623b      	str	r3, [r7, #32]
	load_sprite(pointer14, flame2_light_bits, flame2_black_width, flame2_black_height);
200026e8:	493c      	ldr	r1, [pc, #240]	; (200027dc <initSprites+0x140>)
200026ea:	6a38      	ldr	r0, [r7, #32]
200026ec:	2327      	movs	r3, #39	; 0x27
200026ee:	2211      	movs	r2, #17
200026f0:	f001 faf6 	bl	20003ce0 <load_sprite>
	flame2Light = pointer14;
200026f4:	4b3a      	ldr	r3, [pc, #232]	; (200027e0 <initSprites+0x144>)
200026f6:	6a3a      	ldr	r2, [r7, #32]
200026f8:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempFlame2Gray;
200026fa:	4b3a      	ldr	r3, [pc, #232]	; (200027e4 <initSprites+0x148>)
200026fc:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer15, flame2_gray_bits, flame2_black_width, flame2_black_height);
200026fe:	493a      	ldr	r1, [pc, #232]	; (200027e8 <initSprites+0x14c>)
20002700:	69f8      	ldr	r0, [r7, #28]
20002702:	2327      	movs	r3, #39	; 0x27
20002704:	2211      	movs	r2, #17
20002706:	f001 faeb 	bl	20003ce0 <load_sprite>
	flame2Gray = pointer15;
2000270a:	4b38      	ldr	r3, [pc, #224]	; (200027ec <initSprites+0x150>)
2000270c:	69fa      	ldr	r2, [r7, #28]
2000270e:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempFlame2Black;
20002710:	4b37      	ldr	r3, [pc, #220]	; (200027f0 <initSprites+0x154>)
20002712:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer16, flame2_black_bits, flame2_black_width, flame2_black_height);
20002714:	4937      	ldr	r1, [pc, #220]	; (200027f4 <initSprites+0x158>)
20002716:	69b8      	ldr	r0, [r7, #24]
20002718:	2327      	movs	r3, #39	; 0x27
2000271a:	2211      	movs	r2, #17
2000271c:	f001 fae0 	bl	20003ce0 <load_sprite>
	flame2Black = pointer16;
20002720:	4b35      	ldr	r3, [pc, #212]	; (200027f8 <initSprites+0x15c>)
20002722:	69ba      	ldr	r2, [r7, #24]
20002724:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempFlame3Light;
20002726:	4b35      	ldr	r3, [pc, #212]	; (200027fc <initSprites+0x160>)
20002728:	617b      	str	r3, [r7, #20]
	load_sprite(finalPointer, flame3_light_bits, flame3_black_width, flame3_black_height);
2000272a:	4935      	ldr	r1, [pc, #212]	; (20002800 <initSprites+0x164>)
2000272c:	6978      	ldr	r0, [r7, #20]
2000272e:	2327      	movs	r3, #39	; 0x27
20002730:	2211      	movs	r2, #17
20002732:	f001 fad5 	bl	20003ce0 <load_sprite>
	flame3Light = finalPointer;
20002736:	4b33      	ldr	r3, [pc, #204]	; (20002804 <initSprites+0x168>)
20002738:	697a      	ldr	r2, [r7, #20]
2000273a:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempFlame3Gray;
2000273c:	4b32      	ldr	r3, [pc, #200]	; (20002808 <initSprites+0x16c>)
2000273e:	613b      	str	r3, [r7, #16]
	load_sprite(pointer17, flame3_gray_bits, flame3_black_width, flame3_black_height);
20002740:	4932      	ldr	r1, [pc, #200]	; (2000280c <initSprites+0x170>)
20002742:	6938      	ldr	r0, [r7, #16]
20002744:	2327      	movs	r3, #39	; 0x27
20002746:	2211      	movs	r2, #17
20002748:	f001 faca 	bl	20003ce0 <load_sprite>
	flame3Gray = pointer17;
2000274c:	4b30      	ldr	r3, [pc, #192]	; (20002810 <initSprites+0x174>)
2000274e:	693a      	ldr	r2, [r7, #16]
20002750:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempFlame3Black;
20002752:	4b30      	ldr	r3, [pc, #192]	; (20002814 <initSprites+0x178>)
20002754:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer18, flame3_black_bits, flame3_black_width, flame3_black_height);
20002756:	4930      	ldr	r1, [pc, #192]	; (20002818 <initSprites+0x17c>)
20002758:	68f8      	ldr	r0, [r7, #12]
2000275a:	2327      	movs	r3, #39	; 0x27
2000275c:	2211      	movs	r2, #17
2000275e:	f001 fabf 	bl	20003ce0 <load_sprite>
	flame3Black = pointer18;	
20002762:	4b2e      	ldr	r3, [pc, #184]	; (2000281c <initSprites+0x180>)
20002764:	68fa      	ldr	r2, [r7, #12]
20002766:	601a      	str	r2, [r3, #0]
	
	sprite *pointer19 = &tempFlame4Light;
20002768:	4b2d      	ldr	r3, [pc, #180]	; (20002820 <initSprites+0x184>)
2000276a:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer19, flame4_light_bits, flame4_black_width, flame4_black_height);
2000276c:	492d      	ldr	r1, [pc, #180]	; (20002824 <initSprites+0x188>)
2000276e:	68b8      	ldr	r0, [r7, #8]
20002770:	2327      	movs	r3, #39	; 0x27
20002772:	2211      	movs	r2, #17
20002774:	f001 fab4 	bl	20003ce0 <load_sprite>
	flame4Light = pointer19;
20002778:	4b2b      	ldr	r3, [pc, #172]	; (20002828 <initSprites+0x18c>)
2000277a:	68ba      	ldr	r2, [r7, #8]
2000277c:	601a      	str	r2, [r3, #0]
	sprite *pointer20 = &tempFlame4Gray;
2000277e:	4b2b      	ldr	r3, [pc, #172]	; (2000282c <initSprites+0x190>)
20002780:	607b      	str	r3, [r7, #4]
	load_sprite(pointer20, flame4_gray_bits, flame4_black_width, flame4_black_height);
20002782:	492b      	ldr	r1, [pc, #172]	; (20002830 <initSprites+0x194>)
20002784:	6878      	ldr	r0, [r7, #4]
20002786:	2327      	movs	r3, #39	; 0x27
20002788:	2211      	movs	r2, #17
2000278a:	f001 faa9 	bl	20003ce0 <load_sprite>
	flame4Gray = pointer20;
2000278e:	4b29      	ldr	r3, [pc, #164]	; (20002834 <initSprites+0x198>)
20002790:	687a      	ldr	r2, [r7, #4]
20002792:	601a      	str	r2, [r3, #0]
	sprite *pointer21 = &tempFlame4Black;
20002794:	4b28      	ldr	r3, [pc, #160]	; (20002838 <initSprites+0x19c>)
20002796:	603b      	str	r3, [r7, #0]
	load_sprite(pointer21, flame4_black_bits, flame4_black_width, flame4_black_height);
20002798:	4928      	ldr	r1, [pc, #160]	; (2000283c <initSprites+0x1a0>)
2000279a:	6838      	ldr	r0, [r7, #0]
2000279c:	2327      	movs	r3, #39	; 0x27
2000279e:	2211      	movs	r2, #17
200027a0:	f001 fa9e 	bl	20003ce0 <load_sprite>
	flame4Black = pointer21;	
200027a4:	4b26      	ldr	r3, [pc, #152]	; (20002840 <initSprites+0x1a4>)
200027a6:	683a      	ldr	r2, [r7, #0]
200027a8:	601a      	str	r2, [r3, #0]
	
}
200027aa:	46c0      	nop			; (mov r8, r8)
200027ac:	46bd      	mov	sp, r7
200027ae:	b00c      	add	sp, #48	; 0x30
200027b0:	bd80      	pop	{r7, pc}
200027b2:	46c0      	nop			; (mov r8, r8)
200027b4:	2000509c 	mulcs	r0, ip, r0
200027b8:	20009348 	andcs	r9, r0, r8, asr #6
200027bc:	20005014 	andcs	r5, r0, r4, lsl r0
200027c0:	20004f80 	andcs	r4, r0, r0, lsl #31
200027c4:	200092d0 	ldrdcs	r9, [r0], -r0
200027c8:	20005010 	andcs	r5, r0, r0, lsl r0
200027cc:	200050b0 	strhcs	r5, [r0], -r0
200027d0:	20009258 	andcs	r9, r0, r8, asr r2
200027d4:	20005098 	mulcs	r0, r8, r0
200027d8:	20004fe8 	andcs	r4, r0, r8, ror #31
200027dc:	200094b0 			; <UNDEFINED> instruction: 0x200094b0
200027e0:	200050a8 	andcs	r5, r0, r8, lsr #1
200027e4:	2000504c 	andcs	r5, r0, ip, asr #32
200027e8:	20009438 	andcs	r9, r0, r8, lsr r4
200027ec:	2000500c 	andcs	r5, r0, ip
200027f0:	20005000 	andcs	r5, r0, r0
200027f4:	200093c0 	andcs	r9, r0, r0, asr #7
200027f8:	200050c0 	andcs	r5, r0, r0, asr #1
200027fc:	20004fa8 	andcs	r4, r0, r8, lsr #31
20002800:	20009618 	andcs	r9, r0, r8, lsl r6
20002804:	20004fa4 	andcs	r4, r0, r4, lsr #31
20002808:	20004ff4 	strdcs	r4, [r0], -r4	; <UNPREDICTABLE>
2000280c:	200095a0 	andcs	r9, r0, r0, lsr #11
20002810:	20004fc0 	andcs	r4, r0, r0, asr #31
20002814:	20005088 	andcs	r5, r0, r8, lsl #1
20002818:	20009528 	andcs	r9, r0, r8, lsr #10
2000281c:	200050ac 	andcs	r5, r0, ip, lsr #1
20002820:	20004f8c 	andcs	r4, r0, ip, lsl #31
20002824:	20009780 	andcs	r9, r0, r0, lsl #15
20002828:	200050bc 	strhcs	r5, [r0], -ip
2000282c:	20005024 	andcs	r5, r0, r4, lsr #32
20002830:	20009708 	andcs	r9, r0, r8, lsl #14
20002834:	20005030 	andcs	r5, r0, r0, lsr r0
20002838:	20005018 	andcs	r5, r0, r8, lsl r0
2000283c:	20009690 	mulcs	r0, r0, r6
20002840:	20005094 	mulcs	r0, r4, r0

20002844 <init_flame>:
	
void init_flame( GameObject *flameObj ) {
20002844:	b590      	push	{r4, r7, lr}
20002846:	b083      	sub	sp, #12
20002848:	af00      	add	r7, sp, #0
2000284a:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
2000284c:	4b29      	ldr	r3, [pc, #164]	; (200028f4 <init_flame+0xb0>)
2000284e:	681b      	ldr	r3, [r3, #0]
20002850:	2b00      	cmp	r3, #0
20002852:	d03b      	beq.n	200028cc <init_flame+0x88>
		initSprites();
20002854:	f7ff ff22 	bl	2000269c <initSprites>
		firstTime = 0;			
20002858:	4b26      	ldr	r3, [pc, #152]	; (200028f4 <init_flame+0xb0>)
2000285a:	2200      	movs	r2, #0
2000285c:	601a      	str	r2, [r3, #0]

		flameImages[0] = flame1Image;
2000285e:	4b26      	ldr	r3, [pc, #152]	; (200028f8 <init_flame+0xb4>)
20002860:	4a26      	ldr	r2, [pc, #152]	; (200028fc <init_flame+0xb8>)
20002862:	ca13      	ldmia	r2!, {r0, r1, r4}
20002864:	c313      	stmia	r3!, {r0, r1, r4}
		flameImages[1] = flame2Image;
20002866:	4b24      	ldr	r3, [pc, #144]	; (200028f8 <init_flame+0xb4>)
20002868:	4a25      	ldr	r2, [pc, #148]	; (20002900 <init_flame+0xbc>)
2000286a:	330c      	adds	r3, #12
2000286c:	ca13      	ldmia	r2!, {r0, r1, r4}
2000286e:	c313      	stmia	r3!, {r0, r1, r4}
		flameImages[2] = flame3Image;
20002870:	4b21      	ldr	r3, [pc, #132]	; (200028f8 <init_flame+0xb4>)
20002872:	4a24      	ldr	r2, [pc, #144]	; (20002904 <init_flame+0xc0>)
20002874:	3318      	adds	r3, #24
20002876:	ca13      	ldmia	r2!, {r0, r1, r4}
20002878:	c313      	stmia	r3!, {r0, r1, r4}
		flameImages[3] = flame4Image;
2000287a:	4b1f      	ldr	r3, [pc, #124]	; (200028f8 <init_flame+0xb4>)
2000287c:	4a22      	ldr	r2, [pc, #136]	; (20002908 <init_flame+0xc4>)
2000287e:	3324      	adds	r3, #36	; 0x24
20002880:	ca13      	ldmia	r2!, {r0, r1, r4}
20002882:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&flameImages[0], flame1Black, flame1Gray, flame1Light);
20002884:	4b21      	ldr	r3, [pc, #132]	; (2000290c <init_flame+0xc8>)
20002886:	6819      	ldr	r1, [r3, #0]
20002888:	4b21      	ldr	r3, [pc, #132]	; (20002910 <init_flame+0xcc>)
2000288a:	681a      	ldr	r2, [r3, #0]
2000288c:	4b21      	ldr	r3, [pc, #132]	; (20002914 <init_flame+0xd0>)
2000288e:	681b      	ldr	r3, [r3, #0]
20002890:	4819      	ldr	r0, [pc, #100]	; (200028f8 <init_flame+0xb4>)
20002892:	f001 fa11 	bl	20003cb8 <load_image>
		load_image(&flameImages[1], flame2Black, flame2Gray, flame2Light);
20002896:	4b20      	ldr	r3, [pc, #128]	; (20002918 <init_flame+0xd4>)
20002898:	6819      	ldr	r1, [r3, #0]
2000289a:	4b20      	ldr	r3, [pc, #128]	; (2000291c <init_flame+0xd8>)
2000289c:	681a      	ldr	r2, [r3, #0]
2000289e:	4b20      	ldr	r3, [pc, #128]	; (20002920 <init_flame+0xdc>)
200028a0:	681b      	ldr	r3, [r3, #0]
200028a2:	4820      	ldr	r0, [pc, #128]	; (20002924 <init_flame+0xe0>)
200028a4:	f001 fa08 	bl	20003cb8 <load_image>
		load_image(&flameImages[2], flame3Black, flame3Gray, flame3Light);
200028a8:	4b1f      	ldr	r3, [pc, #124]	; (20002928 <init_flame+0xe4>)
200028aa:	6819      	ldr	r1, [r3, #0]
200028ac:	4b1f      	ldr	r3, [pc, #124]	; (2000292c <init_flame+0xe8>)
200028ae:	681a      	ldr	r2, [r3, #0]
200028b0:	4b1f      	ldr	r3, [pc, #124]	; (20002930 <init_flame+0xec>)
200028b2:	681b      	ldr	r3, [r3, #0]
200028b4:	481f      	ldr	r0, [pc, #124]	; (20002934 <init_flame+0xf0>)
200028b6:	f001 f9ff 	bl	20003cb8 <load_image>
		load_image(&flameImages[3], flame4Black, flame4Gray, flame4Light);
200028ba:	4b1f      	ldr	r3, [pc, #124]	; (20002938 <init_flame+0xf4>)
200028bc:	6819      	ldr	r1, [r3, #0]
200028be:	4b1f      	ldr	r3, [pc, #124]	; (2000293c <init_flame+0xf8>)
200028c0:	681a      	ldr	r2, [r3, #0]
200028c2:	4b1f      	ldr	r3, [pc, #124]	; (20002940 <init_flame+0xfc>)
200028c4:	681b      	ldr	r3, [r3, #0]
200028c6:	481f      	ldr	r0, [pc, #124]	; (20002944 <init_flame+0x100>)
200028c8:	f001 f9f6 	bl	20003cb8 <load_image>
}
	
	flameObj->images = flameImages;
200028cc:	687b      	ldr	r3, [r7, #4]
200028ce:	4a0a      	ldr	r2, [pc, #40]	; (200028f8 <init_flame+0xb4>)
200028d0:	601a      	str	r2, [r3, #0]

	flameObj->current_frame = 0;
200028d2:	687b      	ldr	r3, [r7, #4]
200028d4:	2200      	movs	r2, #0
200028d6:	615a      	str	r2, [r3, #20]
	flameObj->n_frames = 4;
200028d8:	687b      	ldr	r3, [r7, #4]
200028da:	2204      	movs	r2, #4
200028dc:	619a      	str	r2, [r3, #24]
	flameObj->animation_speed = 1;
200028de:	687b      	ldr	r3, [r7, #4]
200028e0:	2201      	movs	r2, #1
200028e2:	61da      	str	r2, [r3, #28]
	flameObj->animation_counter = 0;
200028e4:	687b      	ldr	r3, [r7, #4]
200028e6:	2200      	movs	r2, #0
200028e8:	621a      	str	r2, [r3, #32]
}
200028ea:	46c0      	nop			; (mov r8, r8)
200028ec:	46bd      	mov	sp, r7
200028ee:	b003      	add	sp, #12
200028f0:	bd90      	pop	{r4, r7, pc}
200028f2:	46c0      	nop			; (mov r8, r8)
200028f4:	200097f8 	strdcs	r9, [r0], -r8
200028f8:	20005058 	andcs	r5, r0, r8, asr r0
200028fc:	20005040 	andcs	r5, r0, r0, asr #32
20002900:	20004f98 	mulcs	r0, r8, pc	; <UNPREDICTABLE>
20002904:	20004fb4 			; <UNDEFINED> instruction: 0x20004fb4
20002908:	20005034 	andcs	r5, r0, r4, lsr r0
2000290c:	20005098 	mulcs	r0, r8, r0
20002910:	20005010 	andcs	r5, r0, r0, lsl r0
20002914:	20005014 	andcs	r5, r0, r4, lsl r0
20002918:	200050c0 	andcs	r5, r0, r0, asr #1
2000291c:	2000500c 	andcs	r5, r0, ip
20002920:	200050a8 	andcs	r5, r0, r8, lsr #1
20002924:	20005064 	andcs	r5, r0, r4, rrx
20002928:	200050ac 	andcs	r5, r0, ip, lsr #1
2000292c:	20004fc0 	andcs	r4, r0, r0, asr #31
20002930:	20004fa4 	andcs	r4, r0, r4, lsr #31
20002934:	20005070 	andcs	r5, r0, r0, ror r0
20002938:	20005094 	mulcs	r0, r4, r0
2000293c:	20005030 	andcs	r5, r0, r0, lsr r0
20002940:	200050bc 	strhcs	r5, [r0], -ip
20002944:	2000507c 	andcs	r5, r0, ip, ror r0

20002948 <initSprites>:
Image boom12Image;
Image boom13Image;
Image boom14Image;
Image boom15Image;
Image boomImages[15];
static void initSprites( void ) {	
20002948:	b580      	push	{r7, lr}
2000294a:	b092      	sub	sp, #72	; 0x48
2000294c:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempBoomLight;
2000294e:	4b65      	ldr	r3, [pc, #404]	; (20002ae4 <initSprites+0x19c>)
20002950:	647b      	str	r3, [r7, #68]	; 0x44
	load_sprite(pointer11, boom1_light_bits, boom1_black_width, boom1_black_height);
20002952:	4965      	ldr	r1, [pc, #404]	; (20002ae8 <initSprites+0x1a0>)
20002954:	6c78      	ldr	r0, [r7, #68]	; 0x44
20002956:	2337      	movs	r3, #55	; 0x37
20002958:	226a      	movs	r2, #106	; 0x6a
2000295a:	f001 f9c1 	bl	20003ce0 <load_sprite>
	boom1Light = pointer11;
2000295e:	4b63      	ldr	r3, [pc, #396]	; (20002aec <initSprites+0x1a4>)
20002960:	6c7a      	ldr	r2, [r7, #68]	; 0x44
20002962:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempBoomGray;
20002964:	4b62      	ldr	r3, [pc, #392]	; (20002af0 <initSprites+0x1a8>)
20002966:	643b      	str	r3, [r7, #64]	; 0x40
	load_sprite(pointer12, boom1_gray_bits, boom1_black_width, boom1_black_height);
20002968:	4962      	ldr	r1, [pc, #392]	; (20002af4 <initSprites+0x1ac>)
2000296a:	6c38      	ldr	r0, [r7, #64]	; 0x40
2000296c:	2337      	movs	r3, #55	; 0x37
2000296e:	226a      	movs	r2, #106	; 0x6a
20002970:	f001 f9b6 	bl	20003ce0 <load_sprite>
	boom1Gray = pointer12;
20002974:	4b60      	ldr	r3, [pc, #384]	; (20002af8 <initSprites+0x1b0>)
20002976:	6c3a      	ldr	r2, [r7, #64]	; 0x40
20002978:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempBoomBlack;
2000297a:	4b60      	ldr	r3, [pc, #384]	; (20002afc <initSprites+0x1b4>)
2000297c:	63fb      	str	r3, [r7, #60]	; 0x3c
	load_sprite(pointer13, boom1_black_bits, boom1_black_width, boom1_black_height);
2000297e:	4960      	ldr	r1, [pc, #384]	; (20002b00 <initSprites+0x1b8>)
20002980:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
20002982:	2337      	movs	r3, #55	; 0x37
20002984:	226a      	movs	r2, #106	; 0x6a
20002986:	f001 f9ab 	bl	20003ce0 <load_sprite>
	boom1Black = pointer13;	
2000298a:	4b5e      	ldr	r3, [pc, #376]	; (20002b04 <initSprites+0x1bc>)
2000298c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
2000298e:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempBoom2Light;
20002990:	4b5d      	ldr	r3, [pc, #372]	; (20002b08 <initSprites+0x1c0>)
20002992:	63bb      	str	r3, [r7, #56]	; 0x38
	load_sprite(pointer14, boom2_light_bits, boom2_black_width, boom2_black_height);
20002994:	495d      	ldr	r1, [pc, #372]	; (20002b0c <initSprites+0x1c4>)
20002996:	6bb8      	ldr	r0, [r7, #56]	; 0x38
20002998:	2337      	movs	r3, #55	; 0x37
2000299a:	226a      	movs	r2, #106	; 0x6a
2000299c:	f001 f9a0 	bl	20003ce0 <load_sprite>
	boom2Light = pointer14;
200029a0:	4b5b      	ldr	r3, [pc, #364]	; (20002b10 <initSprites+0x1c8>)
200029a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
200029a4:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempBoom2Gray;
200029a6:	4b5b      	ldr	r3, [pc, #364]	; (20002b14 <initSprites+0x1cc>)
200029a8:	637b      	str	r3, [r7, #52]	; 0x34
	load_sprite(pointer15, boom2_gray_bits, boom2_black_width, boom2_black_height);
200029aa:	495b      	ldr	r1, [pc, #364]	; (20002b18 <initSprites+0x1d0>)
200029ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
200029ae:	2337      	movs	r3, #55	; 0x37
200029b0:	226a      	movs	r2, #106	; 0x6a
200029b2:	f001 f995 	bl	20003ce0 <load_sprite>
	boom2Gray = pointer15;
200029b6:	4b59      	ldr	r3, [pc, #356]	; (20002b1c <initSprites+0x1d4>)
200029b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
200029ba:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempBoom2Black;
200029bc:	4b58      	ldr	r3, [pc, #352]	; (20002b20 <initSprites+0x1d8>)
200029be:	633b      	str	r3, [r7, #48]	; 0x30
	load_sprite(pointer16, boom2_black_bits, boom2_black_width, boom2_black_height);
200029c0:	4958      	ldr	r1, [pc, #352]	; (20002b24 <initSprites+0x1dc>)
200029c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
200029c4:	2337      	movs	r3, #55	; 0x37
200029c6:	226a      	movs	r2, #106	; 0x6a
200029c8:	f001 f98a 	bl	20003ce0 <load_sprite>
	boom2Black = pointer16;
200029cc:	4b56      	ldr	r3, [pc, #344]	; (20002b28 <initSprites+0x1e0>)
200029ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
200029d0:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempBoom3Light;
200029d2:	4b56      	ldr	r3, [pc, #344]	; (20002b2c <initSprites+0x1e4>)
200029d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(finalPointer, boom3_light_bits, boom3_black_width, boom3_black_height);
200029d6:	4956      	ldr	r1, [pc, #344]	; (20002b30 <initSprites+0x1e8>)
200029d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
200029da:	2337      	movs	r3, #55	; 0x37
200029dc:	226a      	movs	r2, #106	; 0x6a
200029de:	f001 f97f 	bl	20003ce0 <load_sprite>
	boom3Light = finalPointer;
200029e2:	4b54      	ldr	r3, [pc, #336]	; (20002b34 <initSprites+0x1ec>)
200029e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
200029e6:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempBoom3Gray;
200029e8:	4b53      	ldr	r3, [pc, #332]	; (20002b38 <initSprites+0x1f0>)
200029ea:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer17, boom3_gray_bits, boom3_black_width, boom3_black_height);
200029ec:	4953      	ldr	r1, [pc, #332]	; (20002b3c <initSprites+0x1f4>)
200029ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
200029f0:	2337      	movs	r3, #55	; 0x37
200029f2:	226a      	movs	r2, #106	; 0x6a
200029f4:	f001 f974 	bl	20003ce0 <load_sprite>
	boom3Gray = pointer17;
200029f8:	4b51      	ldr	r3, [pc, #324]	; (20002b40 <initSprites+0x1f8>)
200029fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
200029fc:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempBoom3Black;
200029fe:	4b51      	ldr	r3, [pc, #324]	; (20002b44 <initSprites+0x1fc>)
20002a00:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer18, boom3_black_bits, boom3_black_width, boom3_black_height);
20002a02:	4951      	ldr	r1, [pc, #324]	; (20002b48 <initSprites+0x200>)
20002a04:	6a78      	ldr	r0, [r7, #36]	; 0x24
20002a06:	2337      	movs	r3, #55	; 0x37
20002a08:	226a      	movs	r2, #106	; 0x6a
20002a0a:	f001 f969 	bl	20003ce0 <load_sprite>
	boom3Black = pointer18;	
20002a0e:	4b4f      	ldr	r3, [pc, #316]	; (20002b4c <initSprites+0x204>)
20002a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20002a12:	601a      	str	r2, [r3, #0]
	
	sprite *pointer19 = &tempBoom4Light;
20002a14:	4b4e      	ldr	r3, [pc, #312]	; (20002b50 <initSprites+0x208>)
20002a16:	623b      	str	r3, [r7, #32]
	load_sprite(pointer19, boom4_light_bits, boom4_black_width, boom4_black_height);
20002a18:	494e      	ldr	r1, [pc, #312]	; (20002b54 <initSprites+0x20c>)
20002a1a:	6a38      	ldr	r0, [r7, #32]
20002a1c:	2337      	movs	r3, #55	; 0x37
20002a1e:	226a      	movs	r2, #106	; 0x6a
20002a20:	f001 f95e 	bl	20003ce0 <load_sprite>
	boom4Light = pointer19;
20002a24:	4b4c      	ldr	r3, [pc, #304]	; (20002b58 <initSprites+0x210>)
20002a26:	6a3a      	ldr	r2, [r7, #32]
20002a28:	601a      	str	r2, [r3, #0]
	sprite *pointer20 = &tempBoom4Gray;
20002a2a:	4b4c      	ldr	r3, [pc, #304]	; (20002b5c <initSprites+0x214>)
20002a2c:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer20, boom4_gray_bits, boom4_black_width, boom4_black_height);
20002a2e:	494c      	ldr	r1, [pc, #304]	; (20002b60 <initSprites+0x218>)
20002a30:	69f8      	ldr	r0, [r7, #28]
20002a32:	2337      	movs	r3, #55	; 0x37
20002a34:	226a      	movs	r2, #106	; 0x6a
20002a36:	f001 f953 	bl	20003ce0 <load_sprite>
	boom4Gray = pointer20;
20002a3a:	4b4a      	ldr	r3, [pc, #296]	; (20002b64 <initSprites+0x21c>)
20002a3c:	69fa      	ldr	r2, [r7, #28]
20002a3e:	601a      	str	r2, [r3, #0]
	sprite *pointer21 = &tempBoom4Black;
20002a40:	4b49      	ldr	r3, [pc, #292]	; (20002b68 <initSprites+0x220>)
20002a42:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer21, boom4_black_bits, boom4_black_width, boom4_black_height);
20002a44:	4949      	ldr	r1, [pc, #292]	; (20002b6c <initSprites+0x224>)
20002a46:	69b8      	ldr	r0, [r7, #24]
20002a48:	2337      	movs	r3, #55	; 0x37
20002a4a:	226a      	movs	r2, #106	; 0x6a
20002a4c:	f001 f948 	bl	20003ce0 <load_sprite>
	boom4Black = pointer21;	
20002a50:	4b47      	ldr	r3, [pc, #284]	; (20002b70 <initSprites+0x228>)
20002a52:	69ba      	ldr	r2, [r7, #24]
20002a54:	601a      	str	r2, [r3, #0]
	
	sprite *pointer22 = &tempBoom5Light;
20002a56:	4b47      	ldr	r3, [pc, #284]	; (20002b74 <initSprites+0x22c>)
20002a58:	617b      	str	r3, [r7, #20]
	load_sprite(pointer22, boom5_light_bits, boom5_black_width, boom5_black_height);
20002a5a:	4947      	ldr	r1, [pc, #284]	; (20002b78 <initSprites+0x230>)
20002a5c:	6978      	ldr	r0, [r7, #20]
20002a5e:	2337      	movs	r3, #55	; 0x37
20002a60:	226a      	movs	r2, #106	; 0x6a
20002a62:	f001 f93d 	bl	20003ce0 <load_sprite>
	boom5Light = pointer22;
20002a66:	4b45      	ldr	r3, [pc, #276]	; (20002b7c <initSprites+0x234>)
20002a68:	697a      	ldr	r2, [r7, #20]
20002a6a:	601a      	str	r2, [r3, #0]
	sprite *pointer23 = &tempBoom5Gray;
20002a6c:	4b44      	ldr	r3, [pc, #272]	; (20002b80 <initSprites+0x238>)
20002a6e:	613b      	str	r3, [r7, #16]
	load_sprite(pointer23, boom5_gray_bits, boom5_black_width, boom5_black_height);
20002a70:	4944      	ldr	r1, [pc, #272]	; (20002b84 <initSprites+0x23c>)
20002a72:	6938      	ldr	r0, [r7, #16]
20002a74:	2337      	movs	r3, #55	; 0x37
20002a76:	226a      	movs	r2, #106	; 0x6a
20002a78:	f001 f932 	bl	20003ce0 <load_sprite>
	boom5Gray = pointer23;
20002a7c:	4b42      	ldr	r3, [pc, #264]	; (20002b88 <initSprites+0x240>)
20002a7e:	693a      	ldr	r2, [r7, #16]
20002a80:	601a      	str	r2, [r3, #0]
	sprite *pointer24 = &tempBoom5Black;
20002a82:	4b42      	ldr	r3, [pc, #264]	; (20002b8c <initSprites+0x244>)
20002a84:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer24, boom5_black_bits, boom5_black_width, boom5_black_height);
20002a86:	4942      	ldr	r1, [pc, #264]	; (20002b90 <initSprites+0x248>)
20002a88:	68f8      	ldr	r0, [r7, #12]
20002a8a:	2337      	movs	r3, #55	; 0x37
20002a8c:	226a      	movs	r2, #106	; 0x6a
20002a8e:	f001 f927 	bl	20003ce0 <load_sprite>
	boom5Black = pointer24;
20002a92:	4b40      	ldr	r3, [pc, #256]	; (20002b94 <initSprites+0x24c>)
20002a94:	68fa      	ldr	r2, [r7, #12]
20002a96:	601a      	str	r2, [r3, #0]

	sprite *pointer25 = &tempBoom6Light;
20002a98:	4b3f      	ldr	r3, [pc, #252]	; (20002b98 <initSprites+0x250>)
20002a9a:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer25, boom6_light_bits, boom6_black_width, boom6_black_height);
20002a9c:	493f      	ldr	r1, [pc, #252]	; (20002b9c <initSprites+0x254>)
20002a9e:	68b8      	ldr	r0, [r7, #8]
20002aa0:	2337      	movs	r3, #55	; 0x37
20002aa2:	226a      	movs	r2, #106	; 0x6a
20002aa4:	f001 f91c 	bl	20003ce0 <load_sprite>
	boom6Light = pointer25;
20002aa8:	4b3d      	ldr	r3, [pc, #244]	; (20002ba0 <initSprites+0x258>)
20002aaa:	68ba      	ldr	r2, [r7, #8]
20002aac:	601a      	str	r2, [r3, #0]
	sprite *pointer26 = &tempBoom6Gray;
20002aae:	4b3d      	ldr	r3, [pc, #244]	; (20002ba4 <initSprites+0x25c>)
20002ab0:	607b      	str	r3, [r7, #4]
	load_sprite(pointer26, boom6_gray_bits, boom6_black_width, boom6_black_height);
20002ab2:	493d      	ldr	r1, [pc, #244]	; (20002ba8 <initSprites+0x260>)
20002ab4:	6878      	ldr	r0, [r7, #4]
20002ab6:	2337      	movs	r3, #55	; 0x37
20002ab8:	226a      	movs	r2, #106	; 0x6a
20002aba:	f001 f911 	bl	20003ce0 <load_sprite>
	boom6Gray = pointer26;
20002abe:	4b3b      	ldr	r3, [pc, #236]	; (20002bac <initSprites+0x264>)
20002ac0:	687a      	ldr	r2, [r7, #4]
20002ac2:	601a      	str	r2, [r3, #0]
	sprite *pointer27 = &tempBoom6Black;
20002ac4:	4b3a      	ldr	r3, [pc, #232]	; (20002bb0 <initSprites+0x268>)
20002ac6:	603b      	str	r3, [r7, #0]
	load_sprite(pointer27, boom6_black_bits, boom6_black_width, boom6_black_height);
20002ac8:	493a      	ldr	r1, [pc, #232]	; (20002bb4 <initSprites+0x26c>)
20002aca:	6838      	ldr	r0, [r7, #0]
20002acc:	2337      	movs	r3, #55	; 0x37
20002ace:	226a      	movs	r2, #106	; 0x6a
20002ad0:	f001 f906 	bl	20003ce0 <load_sprite>
	boom6Black = pointer27;
20002ad4:	4b38      	ldr	r3, [pc, #224]	; (20002bb8 <initSprites+0x270>)
20002ad6:	683a      	ldr	r2, [r7, #0]
20002ad8:	601a      	str	r2, [r3, #0]
}
20002ada:	46c0      	nop			; (mov r8, r8)
20002adc:	46bd      	mov	sp, r7
20002ade:	b012      	add	sp, #72	; 0x48
20002ae0:	bd80      	pop	{r7, pc}
20002ae2:	46c0      	nop			; (mov r8, r8)
20002ae4:	200050dc 	ldrdcs	r5, [r0], -ip
20002ae8:	20009e04 	andcs	r9, r0, r4, lsl #28
20002aec:	2000534c 	andcs	r5, r0, ip, asr #6
20002af0:	2000529c 	mulcs	r0, ip, r2
20002af4:	20009b00 	andcs	r9, r0, r0, lsl #22
20002af8:	200052e8 	andcs	r5, r0, r8, ror #5
20002afc:	20005364 	andcs	r5, r0, r4, ror #6
20002b00:	200097fc 	strdcs	r9, [r0], -ip
20002b04:	200052ac 	andcs	r5, r0, ip, lsr #5
20002b08:	20005334 	andcs	r5, r0, r4, lsr r3
20002b0c:	2000a710 	andcs	sl, r0, r0, lsl r7
20002b10:	20005360 	andcs	r5, r0, r0, ror #6
20002b14:	200052bc 			; <UNDEFINED> instruction: 0x200052bc
20002b18:	2000a40c 	andcs	sl, r0, ip, lsl #8
20002b1c:	200052a8 	andcs	r5, r0, r8, lsr #5
20002b20:	200050d0 	ldrdcs	r5, [r0], -r0
20002b24:	2000a108 	andcs	sl, r0, r8, lsl #2
20002b28:	2000535c 	andcs	r5, r0, ip, asr r3
20002b2c:	200051a8 	andcs	r5, r0, r8, lsr #3
20002b30:	2000b01c 	andcs	fp, r0, ip, lsl r0
20002b34:	2000510c 	andcs	r5, r0, ip, lsl #2
20002b38:	200052d4 	ldrdcs	r5, [r0], -r4
20002b3c:	2000ad18 	andcs	sl, r0, r8, lsl sp
20002b40:	20005164 	andcs	r5, r0, r4, ror #2
20002b44:	20005280 	andcs	r5, r0, r0, lsl #5
20002b48:	2000aa14 	andcs	sl, r0, r4, lsl sl
20002b4c:	20005110 	andcs	r5, r0, r0, lsl r1
20002b50:	20005168 	andcs	r5, r0, r8, ror #2
20002b54:	2000b928 	andcs	fp, r0, r8, lsr #18
20002b58:	20005130 	andcs	r5, r0, r0, lsr r1
20002b5c:	200052c8 	andcs	r5, r0, r8, asr #5
20002b60:	2000b624 	andcs	fp, r0, r4, lsr #12
20002b64:	200052e0 	andcs	r5, r0, r0, ror #5
20002b68:	20005328 	andcs	r5, r0, r8, lsr #6
20002b6c:	2000b320 	andcs	fp, r0, r0, lsr #6
20002b70:	2000528c 	andcs	r5, r0, ip, lsl #5
20002b74:	2000531c 	andcs	r5, r0, ip, lsl r3
20002b78:	2000c234 	andcs	ip, r0, r4, lsr r2
20002b7c:	200052e4 	andcs	r5, r0, r4, ror #5
20002b80:	200050c4 	andcs	r5, r0, r4, asr #1
20002b84:	2000bf30 	andcs	fp, r0, r0, lsr pc
20002b88:	20005174 	andcs	r5, r0, r4, ror r1
20002b8c:	20005340 	andcs	r5, r0, r0, asr #6
20002b90:	2000bc2c 	andcs	fp, r0, ip, lsr #24
20002b94:	2000512c 	andcs	r5, r0, ip, lsr #2
20002b98:	200050e8 	andcs	r5, r0, r8, ror #1
20002b9c:	2000cb40 	andcs	ip, r0, r0, asr #22
20002ba0:	200051c4 	andcs	r5, r0, r4, asr #3
20002ba4:	200052b0 			; <UNDEFINED> instruction: 0x200052b0
20002ba8:	2000c83c 	andcs	ip, r0, ip, lsr r8
20002bac:	200051b4 			; <UNDEFINED> instruction: 0x200051b4
20002bb0:	20005290 	mulcs	r0, r0, r2
20002bb4:	2000c538 	andcs	ip, r0, r8, lsr r5
20002bb8:	2000527c 	andcs	r5, r0, ip, ror r2

20002bbc <init_boom>:
	
void init_boom( GameObject *boomObj ) {
20002bbc:	b590      	push	{r4, r7, lr}
20002bbe:	b083      	sub	sp, #12
20002bc0:	af00      	add	r7, sp, #0
20002bc2:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20002bc4:	4b7a      	ldr	r3, [pc, #488]	; (20002db0 <init_boom+0x1f4>)
20002bc6:	681b      	ldr	r3, [r3, #0]
20002bc8:	2b00      	cmp	r3, #0
20002bca:	d100      	bne.n	20002bce <init_boom+0x12>
20002bcc:	e0dd      	b.n	20002d8a <init_boom+0x1ce>
		initSprites();
20002bce:	f7ff febb 	bl	20002948 <initSprites>
		firstTime = 0;			
20002bd2:	4b77      	ldr	r3, [pc, #476]	; (20002db0 <init_boom+0x1f4>)
20002bd4:	2200      	movs	r2, #0
20002bd6:	601a      	str	r2, [r3, #0]

		boomImages[0] = boom1Image;
20002bd8:	4b76      	ldr	r3, [pc, #472]	; (20002db4 <init_boom+0x1f8>)
20002bda:	4a77      	ldr	r2, [pc, #476]	; (20002db8 <init_boom+0x1fc>)
20002bdc:	ca13      	ldmia	r2!, {r0, r1, r4}
20002bde:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[1] = boom2Image;
20002be0:	4b74      	ldr	r3, [pc, #464]	; (20002db4 <init_boom+0x1f8>)
20002be2:	4a76      	ldr	r2, [pc, #472]	; (20002dbc <init_boom+0x200>)
20002be4:	330c      	adds	r3, #12
20002be6:	ca13      	ldmia	r2!, {r0, r1, r4}
20002be8:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[2] = boom3Image;
20002bea:	4b72      	ldr	r3, [pc, #456]	; (20002db4 <init_boom+0x1f8>)
20002bec:	4a74      	ldr	r2, [pc, #464]	; (20002dc0 <init_boom+0x204>)
20002bee:	3318      	adds	r3, #24
20002bf0:	ca13      	ldmia	r2!, {r0, r1, r4}
20002bf2:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[3] = boom4Image;
20002bf4:	4b6f      	ldr	r3, [pc, #444]	; (20002db4 <init_boom+0x1f8>)
20002bf6:	4a73      	ldr	r2, [pc, #460]	; (20002dc4 <init_boom+0x208>)
20002bf8:	3324      	adds	r3, #36	; 0x24
20002bfa:	ca13      	ldmia	r2!, {r0, r1, r4}
20002bfc:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[4] = boom5Image;
20002bfe:	4b6d      	ldr	r3, [pc, #436]	; (20002db4 <init_boom+0x1f8>)
20002c00:	4a71      	ldr	r2, [pc, #452]	; (20002dc8 <init_boom+0x20c>)
20002c02:	3330      	adds	r3, #48	; 0x30
20002c04:	ca13      	ldmia	r2!, {r0, r1, r4}
20002c06:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[5] = boom6Image;
20002c08:	4b6a      	ldr	r3, [pc, #424]	; (20002db4 <init_boom+0x1f8>)
20002c0a:	4a70      	ldr	r2, [pc, #448]	; (20002dcc <init_boom+0x210>)
20002c0c:	333c      	adds	r3, #60	; 0x3c
20002c0e:	ca13      	ldmia	r2!, {r0, r1, r4}
20002c10:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[6] = boom7Image;
20002c12:	4b68      	ldr	r3, [pc, #416]	; (20002db4 <init_boom+0x1f8>)
20002c14:	4a6e      	ldr	r2, [pc, #440]	; (20002dd0 <init_boom+0x214>)
20002c16:	3348      	adds	r3, #72	; 0x48
20002c18:	ca13      	ldmia	r2!, {r0, r1, r4}
20002c1a:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[7] = boom8Image;
20002c1c:	4b65      	ldr	r3, [pc, #404]	; (20002db4 <init_boom+0x1f8>)
20002c1e:	4a6d      	ldr	r2, [pc, #436]	; (20002dd4 <init_boom+0x218>)
20002c20:	3354      	adds	r3, #84	; 0x54
20002c22:	ca13      	ldmia	r2!, {r0, r1, r4}
20002c24:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[8] = boom9Image;
20002c26:	4b63      	ldr	r3, [pc, #396]	; (20002db4 <init_boom+0x1f8>)
20002c28:	4a6b      	ldr	r2, [pc, #428]	; (20002dd8 <init_boom+0x21c>)
20002c2a:	3360      	adds	r3, #96	; 0x60
20002c2c:	ca13      	ldmia	r2!, {r0, r1, r4}
20002c2e:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[9] = boom10Image;
20002c30:	4b60      	ldr	r3, [pc, #384]	; (20002db4 <init_boom+0x1f8>)
20002c32:	4a6a      	ldr	r2, [pc, #424]	; (20002ddc <init_boom+0x220>)
20002c34:	336c      	adds	r3, #108	; 0x6c
20002c36:	ca13      	ldmia	r2!, {r0, r1, r4}
20002c38:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[10] = boom11Image;
20002c3a:	4b5e      	ldr	r3, [pc, #376]	; (20002db4 <init_boom+0x1f8>)
20002c3c:	4a68      	ldr	r2, [pc, #416]	; (20002de0 <init_boom+0x224>)
20002c3e:	3378      	adds	r3, #120	; 0x78
20002c40:	ca13      	ldmia	r2!, {r0, r1, r4}
20002c42:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[11] = boom12Image;
20002c44:	4b5b      	ldr	r3, [pc, #364]	; (20002db4 <init_boom+0x1f8>)
20002c46:	2284      	movs	r2, #132	; 0x84
20002c48:	4966      	ldr	r1, [pc, #408]	; (20002de4 <init_boom+0x228>)
20002c4a:	189b      	adds	r3, r3, r2
20002c4c:	000a      	movs	r2, r1
20002c4e:	ca13      	ldmia	r2!, {r0, r1, r4}
20002c50:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[12] = boom13Image;
20002c52:	4b58      	ldr	r3, [pc, #352]	; (20002db4 <init_boom+0x1f8>)
20002c54:	2290      	movs	r2, #144	; 0x90
20002c56:	4964      	ldr	r1, [pc, #400]	; (20002de8 <init_boom+0x22c>)
20002c58:	189b      	adds	r3, r3, r2
20002c5a:	000a      	movs	r2, r1
20002c5c:	ca13      	ldmia	r2!, {r0, r1, r4}
20002c5e:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[13] = boom14Image;
20002c60:	4b54      	ldr	r3, [pc, #336]	; (20002db4 <init_boom+0x1f8>)
20002c62:	229c      	movs	r2, #156	; 0x9c
20002c64:	4961      	ldr	r1, [pc, #388]	; (20002dec <init_boom+0x230>)
20002c66:	189b      	adds	r3, r3, r2
20002c68:	000a      	movs	r2, r1
20002c6a:	ca13      	ldmia	r2!, {r0, r1, r4}
20002c6c:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[14] = boom15Image;
20002c6e:	4b51      	ldr	r3, [pc, #324]	; (20002db4 <init_boom+0x1f8>)
20002c70:	22a8      	movs	r2, #168	; 0xa8
20002c72:	495f      	ldr	r1, [pc, #380]	; (20002df0 <init_boom+0x234>)
20002c74:	189b      	adds	r3, r3, r2
20002c76:	000a      	movs	r2, r1
20002c78:	ca13      	ldmia	r2!, {r0, r1, r4}
20002c7a:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&boomImages[0], boom1Black, boom1Gray, boom1Light);
20002c7c:	4b5d      	ldr	r3, [pc, #372]	; (20002df4 <init_boom+0x238>)
20002c7e:	6819      	ldr	r1, [r3, #0]
20002c80:	4b5d      	ldr	r3, [pc, #372]	; (20002df8 <init_boom+0x23c>)
20002c82:	681a      	ldr	r2, [r3, #0]
20002c84:	4b5d      	ldr	r3, [pc, #372]	; (20002dfc <init_boom+0x240>)
20002c86:	681b      	ldr	r3, [r3, #0]
20002c88:	484a      	ldr	r0, [pc, #296]	; (20002db4 <init_boom+0x1f8>)
20002c8a:	f001 f815 	bl	20003cb8 <load_image>
		load_image(&boomImages[1], boom2Black, boom2Gray, boom2Light);
20002c8e:	4b5c      	ldr	r3, [pc, #368]	; (20002e00 <init_boom+0x244>)
20002c90:	6819      	ldr	r1, [r3, #0]
20002c92:	4b5c      	ldr	r3, [pc, #368]	; (20002e04 <init_boom+0x248>)
20002c94:	681a      	ldr	r2, [r3, #0]
20002c96:	4b5c      	ldr	r3, [pc, #368]	; (20002e08 <init_boom+0x24c>)
20002c98:	681b      	ldr	r3, [r3, #0]
20002c9a:	485c      	ldr	r0, [pc, #368]	; (20002e0c <init_boom+0x250>)
20002c9c:	f001 f80c 	bl	20003cb8 <load_image>
		load_image(&boomImages[2], boom3Black, boom3Gray, boom3Light);
20002ca0:	4b5b      	ldr	r3, [pc, #364]	; (20002e10 <init_boom+0x254>)
20002ca2:	6819      	ldr	r1, [r3, #0]
20002ca4:	4b5b      	ldr	r3, [pc, #364]	; (20002e14 <init_boom+0x258>)
20002ca6:	681a      	ldr	r2, [r3, #0]
20002ca8:	4b5b      	ldr	r3, [pc, #364]	; (20002e18 <init_boom+0x25c>)
20002caa:	681b      	ldr	r3, [r3, #0]
20002cac:	485b      	ldr	r0, [pc, #364]	; (20002e1c <init_boom+0x260>)
20002cae:	f001 f803 	bl	20003cb8 <load_image>
		load_image(&boomImages[3], boom4Black, boom4Gray, boom4Light);
20002cb2:	4b5b      	ldr	r3, [pc, #364]	; (20002e20 <init_boom+0x264>)
20002cb4:	6819      	ldr	r1, [r3, #0]
20002cb6:	4b5b      	ldr	r3, [pc, #364]	; (20002e24 <init_boom+0x268>)
20002cb8:	681a      	ldr	r2, [r3, #0]
20002cba:	4b5b      	ldr	r3, [pc, #364]	; (20002e28 <init_boom+0x26c>)
20002cbc:	681b      	ldr	r3, [r3, #0]
20002cbe:	485b      	ldr	r0, [pc, #364]	; (20002e2c <init_boom+0x270>)
20002cc0:	f000 fffa 	bl	20003cb8 <load_image>
		load_image(&boomImages[4], boom5Black, boom5Gray, boom5Light);
20002cc4:	4b5a      	ldr	r3, [pc, #360]	; (20002e30 <init_boom+0x274>)
20002cc6:	6819      	ldr	r1, [r3, #0]
20002cc8:	4b5a      	ldr	r3, [pc, #360]	; (20002e34 <init_boom+0x278>)
20002cca:	681a      	ldr	r2, [r3, #0]
20002ccc:	4b5a      	ldr	r3, [pc, #360]	; (20002e38 <init_boom+0x27c>)
20002cce:	681b      	ldr	r3, [r3, #0]
20002cd0:	485a      	ldr	r0, [pc, #360]	; (20002e3c <init_boom+0x280>)
20002cd2:	f000 fff1 	bl	20003cb8 <load_image>
		load_image(&boomImages[5], boom6Black, boom6Gray, boom6Light);
20002cd6:	4b5a      	ldr	r3, [pc, #360]	; (20002e40 <init_boom+0x284>)
20002cd8:	6819      	ldr	r1, [r3, #0]
20002cda:	4b5a      	ldr	r3, [pc, #360]	; (20002e44 <init_boom+0x288>)
20002cdc:	681a      	ldr	r2, [r3, #0]
20002cde:	4b5a      	ldr	r3, [pc, #360]	; (20002e48 <init_boom+0x28c>)
20002ce0:	681b      	ldr	r3, [r3, #0]
20002ce2:	485a      	ldr	r0, [pc, #360]	; (20002e4c <init_boom+0x290>)
20002ce4:	f000 ffe8 	bl	20003cb8 <load_image>
		load_image(&boomImages[6], boom6Black, boom6Gray, boom6Light);
20002ce8:	4b55      	ldr	r3, [pc, #340]	; (20002e40 <init_boom+0x284>)
20002cea:	6819      	ldr	r1, [r3, #0]
20002cec:	4b55      	ldr	r3, [pc, #340]	; (20002e44 <init_boom+0x288>)
20002cee:	681a      	ldr	r2, [r3, #0]
20002cf0:	4b55      	ldr	r3, [pc, #340]	; (20002e48 <init_boom+0x28c>)
20002cf2:	681b      	ldr	r3, [r3, #0]
20002cf4:	4856      	ldr	r0, [pc, #344]	; (20002e50 <init_boom+0x294>)
20002cf6:	f000 ffdf 	bl	20003cb8 <load_image>
		load_image(&boomImages[7], boom6Black, boom6Gray, boom6Light);
20002cfa:	4b51      	ldr	r3, [pc, #324]	; (20002e40 <init_boom+0x284>)
20002cfc:	6819      	ldr	r1, [r3, #0]
20002cfe:	4b51      	ldr	r3, [pc, #324]	; (20002e44 <init_boom+0x288>)
20002d00:	681a      	ldr	r2, [r3, #0]
20002d02:	4b51      	ldr	r3, [pc, #324]	; (20002e48 <init_boom+0x28c>)
20002d04:	681b      	ldr	r3, [r3, #0]
20002d06:	4853      	ldr	r0, [pc, #332]	; (20002e54 <init_boom+0x298>)
20002d08:	f000 ffd6 	bl	20003cb8 <load_image>
		load_image(&boomImages[8], boom6Black, boom6Gray, boom6Light);
20002d0c:	4b4c      	ldr	r3, [pc, #304]	; (20002e40 <init_boom+0x284>)
20002d0e:	6819      	ldr	r1, [r3, #0]
20002d10:	4b4c      	ldr	r3, [pc, #304]	; (20002e44 <init_boom+0x288>)
20002d12:	681a      	ldr	r2, [r3, #0]
20002d14:	4b4c      	ldr	r3, [pc, #304]	; (20002e48 <init_boom+0x28c>)
20002d16:	681b      	ldr	r3, [r3, #0]
20002d18:	484f      	ldr	r0, [pc, #316]	; (20002e58 <init_boom+0x29c>)
20002d1a:	f000 ffcd 	bl	20003cb8 <load_image>
		load_image(&boomImages[9], boom6Black, boom6Gray, boom6Light);
20002d1e:	4b48      	ldr	r3, [pc, #288]	; (20002e40 <init_boom+0x284>)
20002d20:	6819      	ldr	r1, [r3, #0]
20002d22:	4b48      	ldr	r3, [pc, #288]	; (20002e44 <init_boom+0x288>)
20002d24:	681a      	ldr	r2, [r3, #0]
20002d26:	4b48      	ldr	r3, [pc, #288]	; (20002e48 <init_boom+0x28c>)
20002d28:	681b      	ldr	r3, [r3, #0]
20002d2a:	484c      	ldr	r0, [pc, #304]	; (20002e5c <init_boom+0x2a0>)
20002d2c:	f000 ffc4 	bl	20003cb8 <load_image>
		load_image(&boomImages[10], boom6Black, boom6Gray, boom6Light);
20002d30:	4b43      	ldr	r3, [pc, #268]	; (20002e40 <init_boom+0x284>)
20002d32:	6819      	ldr	r1, [r3, #0]
20002d34:	4b43      	ldr	r3, [pc, #268]	; (20002e44 <init_boom+0x288>)
20002d36:	681a      	ldr	r2, [r3, #0]
20002d38:	4b43      	ldr	r3, [pc, #268]	; (20002e48 <init_boom+0x28c>)
20002d3a:	681b      	ldr	r3, [r3, #0]
20002d3c:	4848      	ldr	r0, [pc, #288]	; (20002e60 <init_boom+0x2a4>)
20002d3e:	f000 ffbb 	bl	20003cb8 <load_image>
		load_image(&boomImages[11], boom6Black, boom6Gray, boom6Light);
20002d42:	4b3f      	ldr	r3, [pc, #252]	; (20002e40 <init_boom+0x284>)
20002d44:	6819      	ldr	r1, [r3, #0]
20002d46:	4b3f      	ldr	r3, [pc, #252]	; (20002e44 <init_boom+0x288>)
20002d48:	681a      	ldr	r2, [r3, #0]
20002d4a:	4b3f      	ldr	r3, [pc, #252]	; (20002e48 <init_boom+0x28c>)
20002d4c:	681b      	ldr	r3, [r3, #0]
20002d4e:	4845      	ldr	r0, [pc, #276]	; (20002e64 <init_boom+0x2a8>)
20002d50:	f000 ffb2 	bl	20003cb8 <load_image>
		load_image(&boomImages[12], boom6Black, boom6Gray, boom6Light);
20002d54:	4b3a      	ldr	r3, [pc, #232]	; (20002e40 <init_boom+0x284>)
20002d56:	6819      	ldr	r1, [r3, #0]
20002d58:	4b3a      	ldr	r3, [pc, #232]	; (20002e44 <init_boom+0x288>)
20002d5a:	681a      	ldr	r2, [r3, #0]
20002d5c:	4b3a      	ldr	r3, [pc, #232]	; (20002e48 <init_boom+0x28c>)
20002d5e:	681b      	ldr	r3, [r3, #0]
20002d60:	4841      	ldr	r0, [pc, #260]	; (20002e68 <init_boom+0x2ac>)
20002d62:	f000 ffa9 	bl	20003cb8 <load_image>
		load_image(&boomImages[13], boom6Black, boom6Gray, boom6Light);
20002d66:	4b36      	ldr	r3, [pc, #216]	; (20002e40 <init_boom+0x284>)
20002d68:	6819      	ldr	r1, [r3, #0]
20002d6a:	4b36      	ldr	r3, [pc, #216]	; (20002e44 <init_boom+0x288>)
20002d6c:	681a      	ldr	r2, [r3, #0]
20002d6e:	4b36      	ldr	r3, [pc, #216]	; (20002e48 <init_boom+0x28c>)
20002d70:	681b      	ldr	r3, [r3, #0]
20002d72:	483e      	ldr	r0, [pc, #248]	; (20002e6c <init_boom+0x2b0>)
20002d74:	f000 ffa0 	bl	20003cb8 <load_image>
		load_image(&boomImages[14], boom6Black, boom6Gray, boom6Light);
20002d78:	4b31      	ldr	r3, [pc, #196]	; (20002e40 <init_boom+0x284>)
20002d7a:	6819      	ldr	r1, [r3, #0]
20002d7c:	4b31      	ldr	r3, [pc, #196]	; (20002e44 <init_boom+0x288>)
20002d7e:	681a      	ldr	r2, [r3, #0]
20002d80:	4b31      	ldr	r3, [pc, #196]	; (20002e48 <init_boom+0x28c>)
20002d82:	681b      	ldr	r3, [r3, #0]
20002d84:	483a      	ldr	r0, [pc, #232]	; (20002e70 <init_boom+0x2b4>)
20002d86:	f000 ff97 	bl	20003cb8 <load_image>
	}
	
	boomObj->images = boomImages;
20002d8a:	687b      	ldr	r3, [r7, #4]
20002d8c:	4a09      	ldr	r2, [pc, #36]	; (20002db4 <init_boom+0x1f8>)
20002d8e:	601a      	str	r2, [r3, #0]

	boomObj->current_frame = 0;
20002d90:	687b      	ldr	r3, [r7, #4]
20002d92:	2200      	movs	r2, #0
20002d94:	615a      	str	r2, [r3, #20]
	boomObj->n_frames = 15;
20002d96:	687b      	ldr	r3, [r7, #4]
20002d98:	220f      	movs	r2, #15
20002d9a:	619a      	str	r2, [r3, #24]
	boomObj->animation_speed = 1;
20002d9c:	687b      	ldr	r3, [r7, #4]
20002d9e:	2201      	movs	r2, #1
20002da0:	61da      	str	r2, [r3, #28]
	boomObj->animation_counter = 0;
20002da2:	687b      	ldr	r3, [r7, #4]
20002da4:	2200      	movs	r2, #0
20002da6:	621a      	str	r2, [r3, #32]
}
20002da8:	46c0      	nop			; (mov r8, r8)
20002daa:	46bd      	mov	sp, r7
20002dac:	b003      	add	sp, #12
20002dae:	bd90      	pop	{r4, r7, pc}
20002db0:	2000ce44 	andcs	ip, r0, r4, asr #28
20002db4:	200051c8 	andcs	r5, r0, r8, asr #3
20002db8:	200052f8 	strdcs	r5, [r0], -r8
20002dbc:	20005120 	andcs	r5, r0, r0, lsr #2
20002dc0:	20005310 	andcs	r5, r0, r0, lsl r3
20002dc4:	20005114 	andcs	r5, r0, r4, lsl r1
20002dc8:	20005158 	andcs	r5, r0, r8, asr r1
20002dcc:	2000519c 	mulcs	r0, ip, r1
20002dd0:	20005304 	andcs	r5, r0, r4, lsl #6
20002dd4:	2000514c 	andcs	r5, r0, ip, asr #2
20002dd8:	200050f4 	strdcs	r5, [r0], -r4
20002ddc:	20005134 	andcs	r5, r0, r4, lsr r1
20002de0:	200052ec 	andcs	r5, r0, ip, ror #5
20002de4:	20005100 	andcs	r5, r0, r0, lsl #2
20002de8:	200051b8 			; <UNDEFINED> instruction: 0x200051b8
20002dec:	20005140 	andcs	r5, r0, r0, asr #2
20002df0:	20005350 	andcs	r5, r0, r0, asr r3
20002df4:	200052ac 	andcs	r5, r0, ip, lsr #5
20002df8:	200052e8 	andcs	r5, r0, r8, ror #5
20002dfc:	2000534c 	andcs	r5, r0, ip, asr #6
20002e00:	2000535c 	andcs	r5, r0, ip, asr r3
20002e04:	200052a8 	andcs	r5, r0, r8, lsr #5
20002e08:	20005360 	andcs	r5, r0, r0, ror #6
20002e0c:	200051d4 	ldrdcs	r5, [r0], -r4
20002e10:	20005110 	andcs	r5, r0, r0, lsl r1
20002e14:	20005164 	andcs	r5, r0, r4, ror #2
20002e18:	2000510c 	andcs	r5, r0, ip, lsl #2
20002e1c:	200051e0 	andcs	r5, r0, r0, ror #3
20002e20:	2000528c 	andcs	r5, r0, ip, lsl #5
20002e24:	200052e0 	andcs	r5, r0, r0, ror #5
20002e28:	20005130 	andcs	r5, r0, r0, lsr r1
20002e2c:	200051ec 	andcs	r5, r0, ip, ror #3
20002e30:	2000512c 	andcs	r5, r0, ip, lsr #2
20002e34:	20005174 	andcs	r5, r0, r4, ror r1
20002e38:	200052e4 	andcs	r5, r0, r4, ror #5
20002e3c:	200051f8 	strdcs	r5, [r0], -r8
20002e40:	2000527c 	andcs	r5, r0, ip, ror r2
20002e44:	200051b4 			; <UNDEFINED> instruction: 0x200051b4
20002e48:	200051c4 	andcs	r5, r0, r4, asr #3
20002e4c:	20005204 	andcs	r5, r0, r4, lsl #4
20002e50:	20005210 	andcs	r5, r0, r0, lsl r2
20002e54:	2000521c 	andcs	r5, r0, ip, lsl r2
20002e58:	20005228 	andcs	r5, r0, r8, lsr #4
20002e5c:	20005234 	andcs	r5, r0, r4, lsr r2
20002e60:	20005240 	andcs	r5, r0, r0, asr #4
20002e64:	2000524c 	andcs	r5, r0, ip, asr #4
20002e68:	20005258 	andcs	r5, r0, r8, asr r2
20002e6c:	20005264 	andcs	r5, r0, r4, ror #4
20002e70:	20005270 	andcs	r5, r0, r0, ror r2

20002e74 <delay_250ns>:
#include "graphics.h"


void delay_250ns(void){
20002e74:	b580      	push	{r7, lr}
20002e76:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
20002e78:	4b0c      	ldr	r3, [pc, #48]	; (20002eac <delay_250ns+0x38>)
20002e7a:	2200      	movs	r2, #0
20002e7c:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/4) -1);
20002e7e:	4b0c      	ldr	r3, [pc, #48]	; (20002eb0 <delay_250ns+0x3c>)
20002e80:	2229      	movs	r2, #41	; 0x29
20002e82:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20002e84:	4b0b      	ldr	r3, [pc, #44]	; (20002eb4 <delay_250ns+0x40>)
20002e86:	2200      	movs	r2, #0
20002e88:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20002e8a:	4b08      	ldr	r3, [pc, #32]	; (20002eac <delay_250ns+0x38>)
20002e8c:	2205      	movs	r2, #5
20002e8e:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
20002e90:	46c0      	nop			; (mov r8, r8)
20002e92:	4b06      	ldr	r3, [pc, #24]	; (20002eac <delay_250ns+0x38>)
20002e94:	681a      	ldr	r2, [r3, #0]
20002e96:	2380      	movs	r3, #128	; 0x80
20002e98:	025b      	lsls	r3, r3, #9
20002e9a:	4013      	ands	r3, r2
20002e9c:	d0f9      	beq.n	20002e92 <delay_250ns+0x1e>
	*STK_CTRL = 0;
20002e9e:	4b03      	ldr	r3, [pc, #12]	; (20002eac <delay_250ns+0x38>)
20002ea0:	2200      	movs	r2, #0
20002ea2:	601a      	str	r2, [r3, #0]
}
20002ea4:	46c0      	nop			; (mov r8, r8)
20002ea6:	46bd      	mov	sp, r7
20002ea8:	bd80      	pop	{r7, pc}
20002eaa:	46c0      	nop			; (mov r8, r8)
20002eac:	e000e010 	and	lr, r0, r0, lsl r0
20002eb0:	e000e014 	and	lr, r0, r4, lsl r0
20002eb4:	e000e018 	and	lr, r0, r8, lsl r0

20002eb8 <delay_500ns>:

void delay_500ns(void){
20002eb8:	b580      	push	{r7, lr}
20002eba:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
20002ebc:	4b0c      	ldr	r3, [pc, #48]	; (20002ef0 <delay_500ns+0x38>)
20002ebe:	2200      	movs	r2, #0
20002ec0:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/2) -1);
20002ec2:	4b0c      	ldr	r3, [pc, #48]	; (20002ef4 <delay_500ns+0x3c>)
20002ec4:	2253      	movs	r2, #83	; 0x53
20002ec6:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20002ec8:	4b0b      	ldr	r3, [pc, #44]	; (20002ef8 <delay_500ns+0x40>)
20002eca:	2200      	movs	r2, #0
20002ecc:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20002ece:	4b08      	ldr	r3, [pc, #32]	; (20002ef0 <delay_500ns+0x38>)
20002ed0:	2205      	movs	r2, #5
20002ed2:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
20002ed4:	46c0      	nop			; (mov r8, r8)
20002ed6:	4b06      	ldr	r3, [pc, #24]	; (20002ef0 <delay_500ns+0x38>)
20002ed8:	681a      	ldr	r2, [r3, #0]
20002eda:	2380      	movs	r3, #128	; 0x80
20002edc:	025b      	lsls	r3, r3, #9
20002ede:	4013      	ands	r3, r2
20002ee0:	d0f9      	beq.n	20002ed6 <delay_500ns+0x1e>
	*STK_CTRL = 0;
20002ee2:	4b03      	ldr	r3, [pc, #12]	; (20002ef0 <delay_500ns+0x38>)
20002ee4:	2200      	movs	r2, #0
20002ee6:	601a      	str	r2, [r3, #0]
}
20002ee8:	46c0      	nop			; (mov r8, r8)
20002eea:	46bd      	mov	sp, r7
20002eec:	bd80      	pop	{r7, pc}
20002eee:	46c0      	nop			; (mov r8, r8)
20002ef0:	e000e010 	and	lr, r0, r0, lsl r0
20002ef4:	e000e014 	and	lr, r0, r4, lsl r0
20002ef8:	e000e018 	and	lr, r0, r8, lsl r0

20002efc <delay_micro>:

void delay_micro(unsigned int us){
20002efc:	b580      	push	{r7, lr}
20002efe:	b082      	sub	sp, #8
20002f00:	af00      	add	r7, sp, #0
20002f02:	6078      	str	r0, [r7, #4]
	while(us--) {
20002f04:	e007      	b.n	20002f16 <delay_micro+0x1a>
		delay_250ns();
20002f06:	f7ff ffb5 	bl	20002e74 <delay_250ns>
		delay_250ns();
20002f0a:	f7ff ffb3 	bl	20002e74 <delay_250ns>
		delay_250ns();
20002f0e:	f7ff ffb1 	bl	20002e74 <delay_250ns>
		delay_250ns();
20002f12:	f7ff ffaf 	bl	20002e74 <delay_250ns>
	while(us--) {
20002f16:	687b      	ldr	r3, [r7, #4]
20002f18:	1e5a      	subs	r2, r3, #1
20002f1a:	607a      	str	r2, [r7, #4]
20002f1c:	2b00      	cmp	r3, #0
20002f1e:	d1f2      	bne.n	20002f06 <delay_micro+0xa>
	}
}
20002f20:	46c0      	nop			; (mov r8, r8)
20002f22:	46bd      	mov	sp, r7
20002f24:	b002      	add	sp, #8
20002f26:	bd80      	pop	{r7, pc}

20002f28 <delay_milli>:

void delay_milli(unsigned int ms){
20002f28:	b580      	push	{r7, lr}
20002f2a:	b082      	sub	sp, #8
20002f2c:	af00      	add	r7, sp, #0
20002f2e:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		while(ms--)
			delay_micro(1);
	#else
		while(ms--)
20002f30:	e004      	b.n	20002f3c <delay_milli+0x14>
			delay_micro(1000);
20002f32:	23fa      	movs	r3, #250	; 0xfa
20002f34:	009b      	lsls	r3, r3, #2
20002f36:	0018      	movs	r0, r3
20002f38:	f7ff ffe0 	bl	20002efc <delay_micro>
		while(ms--)
20002f3c:	687b      	ldr	r3, [r7, #4]
20002f3e:	1e5a      	subs	r2, r3, #1
20002f40:	607a      	str	r2, [r7, #4]
20002f42:	2b00      	cmp	r3, #0
20002f44:	d1f5      	bne.n	20002f32 <delay_milli+0xa>
	#endif
}
20002f46:	46c0      	nop			; (mov r8, r8)
20002f48:	46bd      	mov	sp, r7
20002f4a:	b002      	add	sp, #8
20002f4c:	bd80      	pop	{r7, pc}

20002f4e <clear_thisBackBuffer>:
uint8_t draw_buffer_black_light[1024]; // 128 * 64 / 8
uint8_t draw_buffer_black_gray_light[1024]; // 128 * 64 / 8
uint8_t backBuffer[1024]; // 128 * 64 / 8
uint8_t backBufferGray[1024]; // 128 * 64 / 8
uint8_t backBufferLight[1024]; // 128 * 64 / 8
void clear_thisBackBuffer(uint8_t *buffer) {
20002f4e:	b580      	push	{r7, lr}
20002f50:	b084      	sub	sp, #16
20002f52:	af00      	add	r7, sp, #0
20002f54:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < 1024; i++)
20002f56:	2300      	movs	r3, #0
20002f58:	60fb      	str	r3, [r7, #12]
20002f5a:	e007      	b.n	20002f6c <clear_thisBackBuffer+0x1e>
		buffer[i] = 0;
20002f5c:	68fb      	ldr	r3, [r7, #12]
20002f5e:	687a      	ldr	r2, [r7, #4]
20002f60:	18d3      	adds	r3, r2, r3
20002f62:	2200      	movs	r2, #0
20002f64:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 1024; i++)
20002f66:	68fb      	ldr	r3, [r7, #12]
20002f68:	3301      	adds	r3, #1
20002f6a:	60fb      	str	r3, [r7, #12]
20002f6c:	68fb      	ldr	r3, [r7, #12]
20002f6e:	4a03      	ldr	r2, [pc, #12]	; (20002f7c <clear_thisBackBuffer+0x2e>)
20002f70:	4293      	cmp	r3, r2
20002f72:	ddf3      	ble.n	20002f5c <clear_thisBackBuffer+0xe>
}
20002f74:	46c0      	nop			; (mov r8, r8)
20002f76:	46bd      	mov	sp, r7
20002f78:	b004      	add	sp, #16
20002f7a:	bd80      	pop	{r7, pc}
20002f7c:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20002f80 <clear_backBuffer>:
void clear_backBuffer() {
20002f80:	b580      	push	{r7, lr}
20002f82:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
20002f84:	4b03      	ldr	r3, [pc, #12]	; (20002f94 <clear_backBuffer+0x14>)
20002f86:	0018      	movs	r0, r3
20002f88:	f7ff ffe1 	bl	20002f4e <clear_thisBackBuffer>
}
20002f8c:	46c0      	nop			; (mov r8, r8)
20002f8e:	46bd      	mov	sp, r7
20002f90:	bd80      	pop	{r7, pc}
20002f92:	46c0      	nop			; (mov r8, r8)
20002f94:	20005b70 	andcs	r5, r0, r0, ror fp

20002f98 <clear_all_backBuffers>:
void clear_all_backBuffers() {
20002f98:	b580      	push	{r7, lr}
20002f9a:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
20002f9c:	4b07      	ldr	r3, [pc, #28]	; (20002fbc <clear_all_backBuffers+0x24>)
20002f9e:	0018      	movs	r0, r3
20002fa0:	f7ff ffd5 	bl	20002f4e <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferGray);
20002fa4:	4b06      	ldr	r3, [pc, #24]	; (20002fc0 <clear_all_backBuffers+0x28>)
20002fa6:	0018      	movs	r0, r3
20002fa8:	f7ff ffd1 	bl	20002f4e <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferLight);
20002fac:	4b05      	ldr	r3, [pc, #20]	; (20002fc4 <clear_all_backBuffers+0x2c>)
20002fae:	0018      	movs	r0, r3
20002fb0:	f7ff ffcd 	bl	20002f4e <clear_thisBackBuffer>
}
20002fb4:	46c0      	nop			; (mov r8, r8)
20002fb6:	46bd      	mov	sp, r7
20002fb8:	bd80      	pop	{r7, pc}
20002fba:	46c0      	nop			; (mov r8, r8)
20002fbc:	20005b70 	andcs	r5, r0, r0, ror fp
20002fc0:	20005370 	andcs	r5, r0, r0, ror r3
20002fc4:	20006b70 	andcs	r6, r0, r0, ror fp

20002fc8 <graphic_ctrl_bit_set>:

/* välj grafik-display och ettställ de bitar som är 1 i x */
static void graphic_ctrl_bit_set( uint8_t x) {
20002fc8:	b580      	push	{r7, lr}
20002fca:	b084      	sub	sp, #16
20002fcc:	af00      	add	r7, sp, #0
20002fce:	0002      	movs	r2, r0
20002fd0:	1dfb      	adds	r3, r7, #7
20002fd2:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
20002fd4:	4a0f      	ldr	r2, [pc, #60]	; (20003014 <graphic_ctrl_bit_set+0x4c>)
20002fd6:	230f      	movs	r3, #15
20002fd8:	18fb      	adds	r3, r7, r3
20002fda:	7812      	ldrb	r2, [r2, #0]
20002fdc:	701a      	strb	r2, [r3, #0]
	c |= x;
20002fde:	230f      	movs	r3, #15
20002fe0:	18fb      	adds	r3, r7, r3
20002fe2:	220f      	movs	r2, #15
20002fe4:	18b9      	adds	r1, r7, r2
20002fe6:	1dfa      	adds	r2, r7, #7
20002fe8:	7809      	ldrb	r1, [r1, #0]
20002fea:	7812      	ldrb	r2, [r2, #0]
20002fec:	430a      	orrs	r2, r1
20002fee:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
20002ff0:	230f      	movs	r3, #15
20002ff2:	18fb      	adds	r3, r7, r3
20002ff4:	220f      	movs	r2, #15
20002ff6:	18ba      	adds	r2, r7, r2
20002ff8:	7812      	ldrb	r2, [r2, #0]
20002ffa:	2104      	movs	r1, #4
20002ffc:	438a      	bics	r2, r1
20002ffe:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20003000:	4a04      	ldr	r2, [pc, #16]	; (20003014 <graphic_ctrl_bit_set+0x4c>)
20003002:	230f      	movs	r3, #15
20003004:	18fb      	adds	r3, r7, r3
20003006:	781b      	ldrb	r3, [r3, #0]
20003008:	7013      	strb	r3, [r2, #0]
}
2000300a:	46c0      	nop			; (mov r8, r8)
2000300c:	46bd      	mov	sp, r7
2000300e:	b004      	add	sp, #16
20003010:	bd80      	pop	{r7, pc}
20003012:	46c0      	nop			; (mov r8, r8)
20003014:	40021014 	andmi	r1, r2, r4, lsl r0

20003018 <graphic_ctrl_bit_clear>:
/* välj grafik-display och nollställ de bitar som är 1 i x */
static void graphic_ctrl_bit_clear( uint8_t x) {
20003018:	b580      	push	{r7, lr}
2000301a:	b084      	sub	sp, #16
2000301c:	af00      	add	r7, sp, #0
2000301e:	0002      	movs	r2, r0
20003020:	1dfb      	adds	r3, r7, #7
20003022:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
20003024:	4a11      	ldr	r2, [pc, #68]	; (2000306c <graphic_ctrl_bit_clear+0x54>)
20003026:	230f      	movs	r3, #15
20003028:	18fb      	adds	r3, r7, r3
2000302a:	7812      	ldrb	r2, [r2, #0]
2000302c:	701a      	strb	r2, [r3, #0]
	c &= ~x;
2000302e:	1dfb      	adds	r3, r7, #7
20003030:	781b      	ldrb	r3, [r3, #0]
20003032:	b25b      	sxtb	r3, r3
20003034:	43db      	mvns	r3, r3
20003036:	b25b      	sxtb	r3, r3
20003038:	220f      	movs	r2, #15
2000303a:	18ba      	adds	r2, r7, r2
2000303c:	7812      	ldrb	r2, [r2, #0]
2000303e:	b252      	sxtb	r2, r2
20003040:	4013      	ands	r3, r2
20003042:	b25a      	sxtb	r2, r3
20003044:	230f      	movs	r3, #15
20003046:	18fb      	adds	r3, r7, r3
20003048:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
2000304a:	230f      	movs	r3, #15
2000304c:	18fb      	adds	r3, r7, r3
2000304e:	220f      	movs	r2, #15
20003050:	18ba      	adds	r2, r7, r2
20003052:	7812      	ldrb	r2, [r2, #0]
20003054:	2104      	movs	r1, #4
20003056:	438a      	bics	r2, r1
20003058:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
2000305a:	4a04      	ldr	r2, [pc, #16]	; (2000306c <graphic_ctrl_bit_clear+0x54>)
2000305c:	230f      	movs	r3, #15
2000305e:	18fb      	adds	r3, r7, r3
20003060:	781b      	ldrb	r3, [r3, #0]
20003062:	7013      	strb	r3, [r2, #0]
}
20003064:	46c0      	nop			; (mov r8, r8)
20003066:	46bd      	mov	sp, r7
20003068:	b004      	add	sp, #16
2000306a:	bd80      	pop	{r7, pc}
2000306c:	40021014 	andmi	r1, r2, r4, lsl r0

20003070 <select_controller>:
void select_controller( uint8_t controller) {
20003070:	b580      	push	{r7, lr}
20003072:	b082      	sub	sp, #8
20003074:	af00      	add	r7, sp, #0
20003076:	0002      	movs	r2, r0
20003078:	1dfb      	adds	r3, r7, #7
2000307a:	701a      	strb	r2, [r3, #0]
	switch (controller) {
2000307c:	1dfb      	adds	r3, r7, #7
2000307e:	781b      	ldrb	r3, [r3, #0]
20003080:	2b08      	cmp	r3, #8
20003082:	d00f      	beq.n	200030a4 <select_controller+0x34>
20003084:	dc02      	bgt.n	2000308c <select_controller+0x1c>
20003086:	2b00      	cmp	r3, #0
20003088:	d005      	beq.n	20003096 <select_controller+0x26>
		case (B_CS1|B_CS2): 
			graphic_ctrl_bit_set(B_CS1); 
			graphic_ctrl_bit_set(B_CS2); 
			break;
	}
}
2000308a:	e020      	b.n	200030ce <select_controller+0x5e>
	switch (controller) {
2000308c:	2b10      	cmp	r3, #16
2000308e:	d010      	beq.n	200030b2 <select_controller+0x42>
20003090:	2b18      	cmp	r3, #24
20003092:	d015      	beq.n	200030c0 <select_controller+0x50>
}
20003094:	e01b      	b.n	200030ce <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
20003096:	2008      	movs	r0, #8
20003098:	f7ff ffbe 	bl	20003018 <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_clear(B_CS2); 
2000309c:	2010      	movs	r0, #16
2000309e:	f7ff ffbb 	bl	20003018 <graphic_ctrl_bit_clear>
			break;
200030a2:	e014      	b.n	200030ce <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
200030a4:	2008      	movs	r0, #8
200030a6:	f7ff ff8f 	bl	20002fc8 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS2); 
200030aa:	2010      	movs	r0, #16
200030ac:	f7ff ffb4 	bl	20003018 <graphic_ctrl_bit_clear>
			break;
200030b0:	e00d      	b.n	200030ce <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
200030b2:	2008      	movs	r0, #8
200030b4:	f7ff ffb0 	bl	20003018 <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_set(B_CS2); 
200030b8:	2010      	movs	r0, #16
200030ba:	f7ff ff85 	bl	20002fc8 <graphic_ctrl_bit_set>
			break;
200030be:	e006      	b.n	200030ce <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
200030c0:	2008      	movs	r0, #8
200030c2:	f7ff ff81 	bl	20002fc8 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_set(B_CS2); 
200030c6:	2010      	movs	r0, #16
200030c8:	f7ff ff7e 	bl	20002fc8 <graphic_ctrl_bit_set>
			break;
200030cc:	46c0      	nop			; (mov r8, r8)
}
200030ce:	46c0      	nop			; (mov r8, r8)
200030d0:	46bd      	mov	sp, r7
200030d2:	b002      	add	sp, #8
200030d4:	bd80      	pop	{r7, pc}

200030d6 <graphic_wait_ready>:

void graphic_wait_ready( void ) {
200030d6:	b580      	push	{r7, lr}
200030d8:	b082      	sub	sp, #8
200030da:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
200030dc:	2040      	movs	r0, #64	; 0x40
200030de:	f7ff ff9b 	bl	20003018 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
200030e2:	4b14      	ldr	r3, [pc, #80]	; (20003134 <graphic_wait_ready+0x5e>)
200030e4:	4a14      	ldr	r2, [pc, #80]	; (20003138 <graphic_wait_ready+0x62>)
200030e6:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
200030e8:	2001      	movs	r0, #1
200030ea:	f7ff ff95 	bl	20003018 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
200030ee:	2002      	movs	r0, #2
200030f0:	f7ff ff6a 	bl	20002fc8 <graphic_ctrl_bit_set>
	delay_500ns();
200030f4:	f7ff fee0 	bl	20002eb8 <delay_500ns>
	
	while(1) {
		graphic_ctrl_bit_set(B_E);
200030f8:	2040      	movs	r0, #64	; 0x40
200030fa:	f7ff ff65 	bl	20002fc8 <graphic_ctrl_bit_set>
		delay_500ns();
200030fe:	f7ff fedb 	bl	20002eb8 <delay_500ns>
		c = *portIdrHigh & LCD_BUSY; //...
20003102:	4b0e      	ldr	r3, [pc, #56]	; (2000313c <graphic_wait_ready+0x66>)
20003104:	781b      	ldrb	r3, [r3, #0]
20003106:	b2da      	uxtb	r2, r3
20003108:	1dfb      	adds	r3, r7, #7
2000310a:	217f      	movs	r1, #127	; 0x7f
2000310c:	438a      	bics	r2, r1
2000310e:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
20003110:	2040      	movs	r0, #64	; 0x40
20003112:	f7ff ff81 	bl	20003018 <graphic_ctrl_bit_clear>
		delay_500ns();
20003116:	f7ff fecf 	bl	20002eb8 <delay_500ns>
		/*if (*portIdrHigh & 0x80 == 0x80) {
			break; }*/
		if (c == 0) break;
2000311a:	1dfb      	adds	r3, r7, #7
2000311c:	781b      	ldrb	r3, [r3, #0]
2000311e:	2b00      	cmp	r3, #0
20003120:	d000      	beq.n	20003124 <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
20003122:	e7e9      	b.n	200030f8 <graphic_wait_ready+0x22>
		if (c == 0) break;
20003124:	46c0      	nop			; (mov r8, r8)
	}
	//graphic_ctrl_bit_set(B_E); //<--
	*portModer = 0x55555555;	
20003126:	4b03      	ldr	r3, [pc, #12]	; (20003134 <graphic_wait_ready+0x5e>)
20003128:	4a05      	ldr	r2, [pc, #20]	; (20003140 <graphic_wait_ready+0x6a>)
2000312a:	601a      	str	r2, [r3, #0]
}
2000312c:	46c0      	nop			; (mov r8, r8)
2000312e:	46bd      	mov	sp, r7
20003130:	b002      	add	sp, #8
20003132:	bd80      	pop	{r7, pc}
20003134:	40021000 	andmi	r1, r2, r0
20003138:	00005555 	andeq	r5, r0, r5, asr r5
2000313c:	40021011 	andmi	r1, r2, r1, lsl r0
20003140:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20003144 <graphic_read>:

static uint8_t graphic_read(uint8_t controller) {
20003144:	b580      	push	{r7, lr}
20003146:	b084      	sub	sp, #16
20003148:	af00      	add	r7, sp, #0
2000314a:	0002      	movs	r2, r0
2000314c:	1dfb      	adds	r3, r7, #7
2000314e:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20003150:	2040      	movs	r0, #64	; 0x40
20003152:	f7ff ff61 	bl	20003018 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
20003156:	4b1c      	ldr	r3, [pc, #112]	; (200031c8 <graphic_read+0x84>)
20003158:	4a1c      	ldr	r2, [pc, #112]	; (200031cc <graphic_read+0x88>)
2000315a:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS);
2000315c:	2001      	movs	r0, #1
2000315e:	f7ff ff33 	bl	20002fc8 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_set(B_RW);
20003162:	2002      	movs	r0, #2
20003164:	f7ff ff30 	bl	20002fc8 <graphic_ctrl_bit_set>
	select_controller(controller);
20003168:	1dfb      	adds	r3, r7, #7
2000316a:	781b      	ldrb	r3, [r3, #0]
2000316c:	0018      	movs	r0, r3
2000316e:	f7ff ff7f 	bl	20003070 <select_controller>
	delay_500ns();
20003172:	f7ff fea1 	bl	20002eb8 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20003176:	2040      	movs	r0, #64	; 0x40
20003178:	f7ff ff26 	bl	20002fc8 <graphic_ctrl_bit_set>
	delay_500ns();
2000317c:	f7ff fe9c 	bl	20002eb8 <delay_500ns>
	unsigned char rv = *portIdrHigh;
20003180:	4a13      	ldr	r2, [pc, #76]	; (200031d0 <graphic_read+0x8c>)
20003182:	230f      	movs	r3, #15
20003184:	18fb      	adds	r3, r7, r3
20003186:	7812      	ldrb	r2, [r2, #0]
20003188:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000318a:	2040      	movs	r0, #64	; 0x40
2000318c:	f7ff ff44 	bl	20003018 <graphic_ctrl_bit_clear>
	*portModer = 0x55555555;
20003190:	4b0d      	ldr	r3, [pc, #52]	; (200031c8 <graphic_read+0x84>)
20003192:	4a10      	ldr	r2, [pc, #64]	; (200031d4 <graphic_read+0x90>)
20003194:	601a      	str	r2, [r3, #0]
	
	if(controller == B_CS1) {
20003196:	1dfb      	adds	r3, r7, #7
20003198:	781b      	ldrb	r3, [r3, #0]
2000319a:	2b08      	cmp	r3, #8
2000319c:	d104      	bne.n	200031a8 <graphic_read+0x64>
		select_controller(B_CS1);
2000319e:	2008      	movs	r0, #8
200031a0:	f7ff ff66 	bl	20003070 <select_controller>
		graphic_wait_ready();
200031a4:	f7ff ff97 	bl	200030d6 <graphic_wait_ready>
	}
	if(controller == B_CS2) {
200031a8:	1dfb      	adds	r3, r7, #7
200031aa:	781b      	ldrb	r3, [r3, #0]
200031ac:	2b10      	cmp	r3, #16
200031ae:	d104      	bne.n	200031ba <graphic_read+0x76>
		select_controller(B_CS2);
200031b0:	2010      	movs	r0, #16
200031b2:	f7ff ff5d 	bl	20003070 <select_controller>
		graphic_wait_ready();
200031b6:	f7ff ff8e 	bl	200030d6 <graphic_wait_ready>
	}
	
	return rv;
200031ba:	230f      	movs	r3, #15
200031bc:	18fb      	adds	r3, r7, r3
200031be:	781b      	ldrb	r3, [r3, #0]
}
200031c0:	0018      	movs	r0, r3
200031c2:	46bd      	mov	sp, r7
200031c4:	b004      	add	sp, #16
200031c6:	bd80      	pop	{r7, pc}
200031c8:	40021000 	andmi	r1, r2, r0
200031cc:	00005555 	andeq	r5, r0, r5, asr r5
200031d0:	40021011 	andmi	r1, r2, r1, lsl r0
200031d4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200031d8 <graphic_read_data>:

graphic_read_data(uint8_t controller) {
200031d8:	b580      	push	{r7, lr}
200031da:	b082      	sub	sp, #8
200031dc:	af00      	add	r7, sp, #0
200031de:	0002      	movs	r2, r0
200031e0:	1dfb      	adds	r3, r7, #7
200031e2:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
200031e4:	1dfb      	adds	r3, r7, #7
200031e6:	781b      	ldrb	r3, [r3, #0]
200031e8:	0018      	movs	r0, r3
200031ea:	f7ff ffab 	bl	20003144 <graphic_read>
	graphic_read(controller);
200031ee:	1dfb      	adds	r3, r7, #7
200031f0:	781b      	ldrb	r3, [r3, #0]
200031f2:	0018      	movs	r0, r3
200031f4:	f7ff ffa6 	bl	20003144 <graphic_read>
}
200031f8:	46c0      	nop			; (mov r8, r8)
200031fa:	0018      	movs	r0, r3
200031fc:	46bd      	mov	sp, r7
200031fe:	b002      	add	sp, #8
20003200:	bd80      	pop	{r7, pc}

20003202 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller) {
20003202:	b580      	push	{r7, lr}
20003204:	b082      	sub	sp, #8
20003206:	af00      	add	r7, sp, #0
20003208:	0002      	movs	r2, r0
2000320a:	1dfb      	adds	r3, r7, #7
2000320c:	701a      	strb	r2, [r3, #0]
2000320e:	1dbb      	adds	r3, r7, #6
20003210:	1c0a      	adds	r2, r1, #0
20003212:	701a      	strb	r2, [r3, #0]
	*portOdrHigh = value; //I
20003214:	4a19      	ldr	r2, [pc, #100]	; (2000327c <graphic_write+0x7a>)
20003216:	1dfb      	adds	r3, r7, #7
20003218:	781b      	ldrb	r3, [r3, #0]
2000321a:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
2000321c:	1dbb      	adds	r3, r7, #6
2000321e:	781b      	ldrb	r3, [r3, #0]
20003220:	0018      	movs	r0, r3
20003222:	f7ff ff25 	bl	20003070 <select_controller>
	delay_500ns();
20003226:	f7ff fe47 	bl	20002eb8 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
2000322a:	2040      	movs	r0, #64	; 0x40
2000322c:	f7ff fecc 	bl	20002fc8 <graphic_ctrl_bit_set>
	delay_500ns();
20003230:	f7ff fe42 	bl	20002eb8 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
20003234:	2040      	movs	r0, #64	; 0x40
20003236:	f7ff feef 	bl	20003018 <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1) {
2000323a:	1dbb      	adds	r3, r7, #6
2000323c:	781b      	ldrb	r3, [r3, #0]
2000323e:	2208      	movs	r2, #8
20003240:	4013      	ands	r3, r2
20003242:	d004      	beq.n	2000324e <graphic_write+0x4c>
		select_controller(B_CS1);
20003244:	2008      	movs	r0, #8
20003246:	f7ff ff13 	bl	20003070 <select_controller>
		graphic_wait_ready();
2000324a:	f7ff ff44 	bl	200030d6 <graphic_wait_ready>
	}
	if(controller & B_CS2) {
2000324e:	1dbb      	adds	r3, r7, #6
20003250:	781b      	ldrb	r3, [r3, #0]
20003252:	2210      	movs	r2, #16
20003254:	4013      	ands	r3, r2
20003256:	d004      	beq.n	20003262 <graphic_write+0x60>
		select_controller(B_CS2);
20003258:	2010      	movs	r0, #16
2000325a:	f7ff ff09 	bl	20003070 <select_controller>
		graphic_wait_ready();
2000325e:	f7ff ff3a 	bl	200030d6 <graphic_wait_ready>
	}
	
	*portOdrHigh = 0;	//I
20003262:	4b06      	ldr	r3, [pc, #24]	; (2000327c <graphic_write+0x7a>)
20003264:	2200      	movs	r2, #0
20003266:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
20003268:	2040      	movs	r0, #64	; 0x40
2000326a:	f7ff fead 	bl	20002fc8 <graphic_ctrl_bit_set>
	select_controller(0);
2000326e:	2000      	movs	r0, #0
20003270:	f7ff fefe 	bl	20003070 <select_controller>
}
20003274:	46c0      	nop			; (mov r8, r8)
20003276:	46bd      	mov	sp, r7
20003278:	b002      	add	sp, #8
2000327a:	bd80      	pop	{r7, pc}
2000327c:	40021015 	andmi	r1, r2, r5, lsl r0

20003280 <graphic_write_command>:
void graphic_write_command(uint8_t command, uint8_t controller) {
20003280:	b580      	push	{r7, lr}
20003282:	b082      	sub	sp, #8
20003284:	af00      	add	r7, sp, #0
20003286:	0002      	movs	r2, r0
20003288:	1dfb      	adds	r3, r7, #7
2000328a:	701a      	strb	r2, [r3, #0]
2000328c:	1dbb      	adds	r3, r7, #6
2000328e:	1c0a      	adds	r2, r1, #0
20003290:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20003292:	2040      	movs	r0, #64	; 0x40
20003294:	f7ff fec0 	bl	20003018 <graphic_ctrl_bit_clear>
	select_controller(controller);
20003298:	1dbb      	adds	r3, r7, #6
2000329a:	781b      	ldrb	r3, [r3, #0]
2000329c:	0018      	movs	r0, r3
2000329e:	f7ff fee7 	bl	20003070 <select_controller>
	graphic_ctrl_bit_clear(B_RS);
200032a2:	2001      	movs	r0, #1
200032a4:	f7ff feb8 	bl	20003018 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RW);
200032a8:	2002      	movs	r0, #2
200032aa:	f7ff feb5 	bl	20003018 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
200032ae:	1dbb      	adds	r3, r7, #6
200032b0:	781a      	ldrb	r2, [r3, #0]
200032b2:	1dfb      	adds	r3, r7, #7
200032b4:	781b      	ldrb	r3, [r3, #0]
200032b6:	0011      	movs	r1, r2
200032b8:	0018      	movs	r0, r3
200032ba:	f7ff ffa2 	bl	20003202 <graphic_write>
}
200032be:	46c0      	nop			; (mov r8, r8)
200032c0:	46bd      	mov	sp, r7
200032c2:	b002      	add	sp, #8
200032c4:	bd80      	pop	{r7, pc}

200032c6 <graphic_write_data>:
void graphic_write_data(uint8_t command, uint8_t controller) {
200032c6:	b580      	push	{r7, lr}
200032c8:	b082      	sub	sp, #8
200032ca:	af00      	add	r7, sp, #0
200032cc:	0002      	movs	r2, r0
200032ce:	1dfb      	adds	r3, r7, #7
200032d0:	701a      	strb	r2, [r3, #0]
200032d2:	1dbb      	adds	r3, r7, #6
200032d4:	1c0a      	adds	r2, r1, #0
200032d6:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200032d8:	2040      	movs	r0, #64	; 0x40
200032da:	f7ff fe9d 	bl	20003018 <graphic_ctrl_bit_clear>
	select_controller(controller);
200032de:	1dbb      	adds	r3, r7, #6
200032e0:	781b      	ldrb	r3, [r3, #0]
200032e2:	0018      	movs	r0, r3
200032e4:	f7ff fec4 	bl	20003070 <select_controller>
	graphic_ctrl_bit_set(B_RS);
200032e8:	2001      	movs	r0, #1
200032ea:	f7ff fe6d 	bl	20002fc8 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
200032ee:	2002      	movs	r0, #2
200032f0:	f7ff fe92 	bl	20003018 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
200032f4:	1dbb      	adds	r3, r7, #6
200032f6:	781a      	ldrb	r2, [r3, #0]
200032f8:	1dfb      	adds	r3, r7, #7
200032fa:	781b      	ldrb	r3, [r3, #0]
200032fc:	0011      	movs	r1, r2
200032fe:	0018      	movs	r0, r3
20003300:	f7ff ff7f 	bl	20003202 <graphic_write>
}
20003304:	46c0      	nop			; (mov r8, r8)
20003306:	46bd      	mov	sp, r7
20003308:	b002      	add	sp, #8
2000330a:	bd80      	pop	{r7, pc}

2000330c <graphic_initialize>:

void graphic_initialize( void ) {
2000330c:	b580      	push	{r7, lr}
2000330e:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20003310:	2040      	movs	r0, #64	; 0x40
20003312:	f7ff fe59 	bl	20002fc8 <graphic_ctrl_bit_set>
	delay_micro(10);
20003316:	200a      	movs	r0, #10
20003318:	f7ff fdf0 	bl	20002efc <delay_micro>
	
	graphic_ctrl_bit_clear(B_CS1);
2000331c:	2008      	movs	r0, #8
2000331e:	f7ff fe7b 	bl	20003018 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_CS2);
20003322:	2010      	movs	r0, #16
20003324:	f7ff fe78 	bl	20003018 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RST);
20003328:	2020      	movs	r0, #32
2000332a:	f7ff fe75 	bl	20003018 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_E);
2000332e:	2040      	movs	r0, #64	; 0x40
20003330:	f7ff fe72 	bl	20003018 <graphic_ctrl_bit_clear>
	//#define SIMULATOR
	delay_milli(30);
20003334:	201e      	movs	r0, #30
20003336:	f7ff fdf7 	bl	20002f28 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
2000333a:	2020      	movs	r0, #32
2000333c:	f7ff fe44 	bl	20002fc8 <graphic_ctrl_bit_set>
	delay_milli(100); //...
20003340:	2064      	movs	r0, #100	; 0x64
20003342:	f7ff fdf1 	bl	20002f28 <delay_milli>
	
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
20003346:	2118      	movs	r1, #24
20003348:	203e      	movs	r0, #62	; 0x3e
2000334a:	f7ff ff99 	bl	20003280 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
2000334e:	2118      	movs	r1, #24
20003350:	203f      	movs	r0, #63	; 0x3f
20003352:	f7ff ff95 	bl	20003280 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20003356:	2118      	movs	r1, #24
20003358:	20c0      	movs	r0, #192	; 0xc0
2000335a:	f7ff ff91 	bl	20003280 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
2000335e:	2118      	movs	r1, #24
20003360:	2040      	movs	r0, #64	; 0x40
20003362:	f7ff ff8d 	bl	20003280 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20003366:	2118      	movs	r1, #24
20003368:	20b8      	movs	r0, #184	; 0xb8
2000336a:	f7ff ff89 	bl	20003280 <graphic_write_command>
	select_controller(0);
2000336e:	2000      	movs	r0, #0
20003370:	f7ff fe7e 	bl	20003070 <select_controller>
}
20003374:	46c0      	nop			; (mov r8, r8)
20003376:	46bd      	mov	sp, r7
20003378:	bd80      	pop	{r7, pc}

2000337a <graphic_clear_screen>:
void graphic_clear_screen( void ) {	//Annat i slidesen
2000337a:	b580      	push	{r7, lr}
2000337c:	b082      	sub	sp, #8
2000337e:	af00      	add	r7, sp, #0
	uint8_t page;
	for (page = 0; page < 8; page++) {
20003380:	1dfb      	adds	r3, r7, #7
20003382:	2200      	movs	r2, #0
20003384:	701a      	strb	r2, [r3, #0]
20003386:	e023      	b.n	200033d0 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
20003388:	1dfb      	adds	r3, r7, #7
2000338a:	781b      	ldrb	r3, [r3, #0]
2000338c:	2248      	movs	r2, #72	; 0x48
2000338e:	4252      	negs	r2, r2
20003390:	4313      	orrs	r3, r2
20003392:	b2db      	uxtb	r3, r3
20003394:	2118      	movs	r1, #24
20003396:	0018      	movs	r0, r3
20003398:	f7ff ff72 	bl	20003280 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
2000339c:	2118      	movs	r1, #24
2000339e:	2040      	movs	r0, #64	; 0x40
200033a0:	f7ff ff6e 	bl	20003280 <graphic_write_command>
		uint8_t add;
		for (add = 0; add < 64; add++) {
200033a4:	1dbb      	adds	r3, r7, #6
200033a6:	2200      	movs	r2, #0
200033a8:	701a      	strb	r2, [r3, #0]
200033aa:	e008      	b.n	200033be <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1|B_CS2);
200033ac:	2118      	movs	r1, #24
200033ae:	2000      	movs	r0, #0
200033b0:	f7ff ff89 	bl	200032c6 <graphic_write_data>
		for (add = 0; add < 64; add++) {
200033b4:	1dbb      	adds	r3, r7, #6
200033b6:	781a      	ldrb	r2, [r3, #0]
200033b8:	1dbb      	adds	r3, r7, #6
200033ba:	3201      	adds	r2, #1
200033bc:	701a      	strb	r2, [r3, #0]
200033be:	1dbb      	adds	r3, r7, #6
200033c0:	781b      	ldrb	r3, [r3, #0]
200033c2:	2b3f      	cmp	r3, #63	; 0x3f
200033c4:	d9f2      	bls.n	200033ac <graphic_clear_screen+0x32>
	for (page = 0; page < 8; page++) {
200033c6:	1dfb      	adds	r3, r7, #7
200033c8:	781a      	ldrb	r2, [r3, #0]
200033ca:	1dfb      	adds	r3, r7, #7
200033cc:	3201      	adds	r2, #1
200033ce:	701a      	strb	r2, [r3, #0]
200033d0:	1dfb      	adds	r3, r7, #7
200033d2:	781b      	ldrb	r3, [r3, #0]
200033d4:	2b07      	cmp	r3, #7
200033d6:	d9d7      	bls.n	20003388 <graphic_clear_screen+0xe>
		}
	}
}
200033d8:	46c0      	nop			; (mov r8, r8)
200033da:	46bd      	mov	sp, r7
200033dc:	b002      	add	sp, #8
200033de:	bd80      	pop	{r7, pc}

200033e0 <pixel>:

/** Color: 1=light 2=gray 3=black*/
void pixel(int x, int y, int set, int color) {
200033e0:	b580      	push	{r7, lr}
200033e2:	b086      	sub	sp, #24
200033e4:	af00      	add	r7, sp, #0
200033e6:	60f8      	str	r0, [r7, #12]
200033e8:	60b9      	str	r1, [r7, #8]
200033ea:	607a      	str	r2, [r7, #4]
200033ec:	603b      	str	r3, [r7, #0]
	uint8_t mask;
	int index = 0;
200033ee:	2300      	movs	r3, #0
200033f0:	613b      	str	r3, [r7, #16]
	if( (x > 128 ) || (x < 1) || (y > 64) || (y < 1) ) 
200033f2:	68fb      	ldr	r3, [r7, #12]
200033f4:	2b80      	cmp	r3, #128	; 0x80
200033f6:	dd00      	ble.n	200033fa <pixel+0x1a>
200033f8:	e0a6      	b.n	20003548 <pixel+0x168>
200033fa:	68fb      	ldr	r3, [r7, #12]
200033fc:	2b00      	cmp	r3, #0
200033fe:	dc00      	bgt.n	20003402 <pixel+0x22>
20003400:	e0a2      	b.n	20003548 <pixel+0x168>
20003402:	68bb      	ldr	r3, [r7, #8]
20003404:	2b40      	cmp	r3, #64	; 0x40
20003406:	dd00      	ble.n	2000340a <pixel+0x2a>
20003408:	e09e      	b.n	20003548 <pixel+0x168>
2000340a:	68bb      	ldr	r3, [r7, #8]
2000340c:	2b00      	cmp	r3, #0
2000340e:	dc00      	bgt.n	20003412 <pixel+0x32>
20003410:	e09a      	b.n	20003548 <pixel+0x168>
		return;
	mask = 1 << ((y-1)%8);
20003412:	68bb      	ldr	r3, [r7, #8]
20003414:	3b01      	subs	r3, #1
20003416:	4a4e      	ldr	r2, [pc, #312]	; (20003550 <pixel+0x170>)
20003418:	4013      	ands	r3, r2
2000341a:	d504      	bpl.n	20003426 <pixel+0x46>
2000341c:	3b01      	subs	r3, #1
2000341e:	2208      	movs	r2, #8
20003420:	4252      	negs	r2, r2
20003422:	4313      	orrs	r3, r2
20003424:	3301      	adds	r3, #1
20003426:	001a      	movs	r2, r3
20003428:	2301      	movs	r3, #1
2000342a:	4093      	lsls	r3, r2
2000342c:	001a      	movs	r2, r3
2000342e:	2317      	movs	r3, #23
20003430:	18fb      	adds	r3, r7, r3
20003432:	701a      	strb	r2, [r3, #0]
	if(x > 64) {
20003434:	68fb      	ldr	r3, [r7, #12]
20003436:	2b40      	cmp	r3, #64	; 0x40
20003438:	dd05      	ble.n	20003446 <pixel+0x66>
		x -= 65;
2000343a:	68fb      	ldr	r3, [r7, #12]
2000343c:	3b41      	subs	r3, #65	; 0x41
2000343e:	60fb      	str	r3, [r7, #12]
		index = 512;
20003440:	2380      	movs	r3, #128	; 0x80
20003442:	009b      	lsls	r3, r3, #2
20003444:	613b      	str	r3, [r7, #16]
	}
	index += x + ((y-1)/8)*64;
20003446:	68bb      	ldr	r3, [r7, #8]
20003448:	3b01      	subs	r3, #1
2000344a:	2b00      	cmp	r3, #0
2000344c:	da00      	bge.n	20003450 <pixel+0x70>
2000344e:	3307      	adds	r3, #7
20003450:	10db      	asrs	r3, r3, #3
20003452:	019a      	lsls	r2, r3, #6
20003454:	68fb      	ldr	r3, [r7, #12]
20003456:	18d3      	adds	r3, r2, r3
20003458:	693a      	ldr	r2, [r7, #16]
2000345a:	18d3      	adds	r3, r2, r3
2000345c:	613b      	str	r3, [r7, #16]

	if(set == 0)
2000345e:	687b      	ldr	r3, [r7, #4]
20003460:	2b00      	cmp	r3, #0
20003462:	d106      	bne.n	20003472 <pixel+0x92>
		mask = ~mask;
20003464:	2317      	movs	r3, #23
20003466:	18fb      	adds	r3, r7, r3
20003468:	2217      	movs	r2, #23
2000346a:	18ba      	adds	r2, r7, r2
2000346c:	7812      	ldrb	r2, [r2, #0]
2000346e:	43d2      	mvns	r2, r2
20003470:	701a      	strb	r2, [r3, #0]

	switch (color) {
20003472:	683b      	ldr	r3, [r7, #0]
20003474:	2b02      	cmp	r3, #2
20003476:	d024      	beq.n	200034c2 <pixel+0xe2>
20003478:	2b03      	cmp	r3, #3
2000347a:	d043      	beq.n	20003504 <pixel+0x124>
2000347c:	2b01      	cmp	r3, #1
2000347e:	d164      	bne.n	2000354a <pixel+0x16a>
		case 1:	
			if(set)
20003480:	687b      	ldr	r3, [r7, #4]
20003482:	2b00      	cmp	r3, #0
20003484:	d00e      	beq.n	200034a4 <pixel+0xc4>
				backBufferLight[index] |= mask;
20003486:	4a33      	ldr	r2, [pc, #204]	; (20003554 <pixel+0x174>)
20003488:	693b      	ldr	r3, [r7, #16]
2000348a:	18d3      	adds	r3, r2, r3
2000348c:	781a      	ldrb	r2, [r3, #0]
2000348e:	2317      	movs	r3, #23
20003490:	18fb      	adds	r3, r7, r3
20003492:	781b      	ldrb	r3, [r3, #0]
20003494:	4313      	orrs	r3, r2
20003496:	b2d9      	uxtb	r1, r3
20003498:	4a2e      	ldr	r2, [pc, #184]	; (20003554 <pixel+0x174>)
2000349a:	693b      	ldr	r3, [r7, #16]
2000349c:	18d3      	adds	r3, r2, r3
2000349e:	1c0a      	adds	r2, r1, #0
200034a0:	701a      	strb	r2, [r3, #0]
			else
				backBufferLight[index] &= mask;
			break;
200034a2:	e052      	b.n	2000354a <pixel+0x16a>
				backBufferLight[index] &= mask;
200034a4:	4a2b      	ldr	r2, [pc, #172]	; (20003554 <pixel+0x174>)
200034a6:	693b      	ldr	r3, [r7, #16]
200034a8:	18d3      	adds	r3, r2, r3
200034aa:	781b      	ldrb	r3, [r3, #0]
200034ac:	2217      	movs	r2, #23
200034ae:	18ba      	adds	r2, r7, r2
200034b0:	7812      	ldrb	r2, [r2, #0]
200034b2:	4013      	ands	r3, r2
200034b4:	b2d9      	uxtb	r1, r3
200034b6:	4a27      	ldr	r2, [pc, #156]	; (20003554 <pixel+0x174>)
200034b8:	693b      	ldr	r3, [r7, #16]
200034ba:	18d3      	adds	r3, r2, r3
200034bc:	1c0a      	adds	r2, r1, #0
200034be:	701a      	strb	r2, [r3, #0]
			break;
200034c0:	e043      	b.n	2000354a <pixel+0x16a>
		
		case 2:	
			if(set)
200034c2:	687b      	ldr	r3, [r7, #4]
200034c4:	2b00      	cmp	r3, #0
200034c6:	d00e      	beq.n	200034e6 <pixel+0x106>
				backBufferGray[index] |= mask;
200034c8:	4a23      	ldr	r2, [pc, #140]	; (20003558 <pixel+0x178>)
200034ca:	693b      	ldr	r3, [r7, #16]
200034cc:	18d3      	adds	r3, r2, r3
200034ce:	781a      	ldrb	r2, [r3, #0]
200034d0:	2317      	movs	r3, #23
200034d2:	18fb      	adds	r3, r7, r3
200034d4:	781b      	ldrb	r3, [r3, #0]
200034d6:	4313      	orrs	r3, r2
200034d8:	b2d9      	uxtb	r1, r3
200034da:	4a1f      	ldr	r2, [pc, #124]	; (20003558 <pixel+0x178>)
200034dc:	693b      	ldr	r3, [r7, #16]
200034de:	18d3      	adds	r3, r2, r3
200034e0:	1c0a      	adds	r2, r1, #0
200034e2:	701a      	strb	r2, [r3, #0]
			else
				backBufferGray[index] &= mask;
			break;
200034e4:	e031      	b.n	2000354a <pixel+0x16a>
				backBufferGray[index] &= mask;
200034e6:	4a1c      	ldr	r2, [pc, #112]	; (20003558 <pixel+0x178>)
200034e8:	693b      	ldr	r3, [r7, #16]
200034ea:	18d3      	adds	r3, r2, r3
200034ec:	781b      	ldrb	r3, [r3, #0]
200034ee:	2217      	movs	r2, #23
200034f0:	18ba      	adds	r2, r7, r2
200034f2:	7812      	ldrb	r2, [r2, #0]
200034f4:	4013      	ands	r3, r2
200034f6:	b2d9      	uxtb	r1, r3
200034f8:	4a17      	ldr	r2, [pc, #92]	; (20003558 <pixel+0x178>)
200034fa:	693b      	ldr	r3, [r7, #16]
200034fc:	18d3      	adds	r3, r2, r3
200034fe:	1c0a      	adds	r2, r1, #0
20003500:	701a      	strb	r2, [r3, #0]
			break;
20003502:	e022      	b.n	2000354a <pixel+0x16a>
		
		case 3:	
			if(set)
20003504:	687b      	ldr	r3, [r7, #4]
20003506:	2b00      	cmp	r3, #0
20003508:	d00e      	beq.n	20003528 <pixel+0x148>
				backBuffer[index] |= mask;
2000350a:	4a14      	ldr	r2, [pc, #80]	; (2000355c <pixel+0x17c>)
2000350c:	693b      	ldr	r3, [r7, #16]
2000350e:	18d3      	adds	r3, r2, r3
20003510:	781a      	ldrb	r2, [r3, #0]
20003512:	2317      	movs	r3, #23
20003514:	18fb      	adds	r3, r7, r3
20003516:	781b      	ldrb	r3, [r3, #0]
20003518:	4313      	orrs	r3, r2
2000351a:	b2d9      	uxtb	r1, r3
2000351c:	4a0f      	ldr	r2, [pc, #60]	; (2000355c <pixel+0x17c>)
2000351e:	693b      	ldr	r3, [r7, #16]
20003520:	18d3      	adds	r3, r2, r3
20003522:	1c0a      	adds	r2, r1, #0
20003524:	701a      	strb	r2, [r3, #0]
			else
				backBuffer[index] &= mask;
			break;
20003526:	e010      	b.n	2000354a <pixel+0x16a>
				backBuffer[index] &= mask;
20003528:	4a0c      	ldr	r2, [pc, #48]	; (2000355c <pixel+0x17c>)
2000352a:	693b      	ldr	r3, [r7, #16]
2000352c:	18d3      	adds	r3, r2, r3
2000352e:	781b      	ldrb	r3, [r3, #0]
20003530:	2217      	movs	r2, #23
20003532:	18ba      	adds	r2, r7, r2
20003534:	7812      	ldrb	r2, [r2, #0]
20003536:	4013      	ands	r3, r2
20003538:	b2d9      	uxtb	r1, r3
2000353a:	4a08      	ldr	r2, [pc, #32]	; (2000355c <pixel+0x17c>)
2000353c:	693b      	ldr	r3, [r7, #16]
2000353e:	18d3      	adds	r3, r2, r3
20003540:	1c0a      	adds	r2, r1, #0
20003542:	701a      	strb	r2, [r3, #0]
			break;
20003544:	46c0      	nop			; (mov r8, r8)
20003546:	e000      	b.n	2000354a <pixel+0x16a>
		return;
20003548:	46c0      	nop			; (mov r8, r8)
			
	}

}
2000354a:	46bd      	mov	sp, r7
2000354c:	b006      	add	sp, #24
2000354e:	bd80      	pop	{r7, pc}
20003550:	80000007 	andhi	r0, r0, r7
20003554:	20006b70 	andcs	r6, r0, r0, ror fp
20003558:	20005370 	andcs	r5, r0, r0, ror r3
2000355c:	20005b70 	andcs	r5, r0, r0, ror fp

20003560 <pixel2>:


void pixel2(int x, int y, int set) {
20003560:	b580      	push	{r7, lr}
20003562:	b088      	sub	sp, #32
20003564:	af00      	add	r7, sp, #0
20003566:	60f8      	str	r0, [r7, #12]
20003568:	60b9      	str	r1, [r7, #8]
2000356a:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
2000356c:	68fb      	ldr	r3, [r7, #12]
2000356e:	2b00      	cmp	r3, #0
20003570:	dc00      	bgt.n	20003574 <pixel2+0x14>
20003572:	e0bc      	b.n	200036ee <pixel2+0x18e>
20003574:	68bb      	ldr	r3, [r7, #8]
20003576:	2b00      	cmp	r3, #0
20003578:	dc00      	bgt.n	2000357c <pixel2+0x1c>
2000357a:	e0b8      	b.n	200036ee <pixel2+0x18e>
2000357c:	68fb      	ldr	r3, [r7, #12]
2000357e:	2b80      	cmp	r3, #128	; 0x80
20003580:	dd00      	ble.n	20003584 <pixel2+0x24>
20003582:	e0b4      	b.n	200036ee <pixel2+0x18e>
20003584:	68bb      	ldr	r3, [r7, #8]
20003586:	2b40      	cmp	r3, #64	; 0x40
20003588:	dd00      	ble.n	2000358c <pixel2+0x2c>
2000358a:	e0b0      	b.n	200036ee <pixel2+0x18e>
	index = (y-1)/8;
2000358c:	68bb      	ldr	r3, [r7, #8]
2000358e:	3b01      	subs	r3, #1
20003590:	2b00      	cmp	r3, #0
20003592:	da00      	bge.n	20003596 <pixel2+0x36>
20003594:	3307      	adds	r3, #7
20003596:	10db      	asrs	r3, r3, #3
20003598:	61bb      	str	r3, [r7, #24]
	switch( (y-1)%8 ) {
2000359a:	68bb      	ldr	r3, [r7, #8]
2000359c:	3b01      	subs	r3, #1
2000359e:	4a56      	ldr	r2, [pc, #344]	; (200036f8 <pixel2+0x198>)
200035a0:	4013      	ands	r3, r2
200035a2:	d504      	bpl.n	200035ae <pixel2+0x4e>
200035a4:	3b01      	subs	r3, #1
200035a6:	2208      	movs	r2, #8
200035a8:	4252      	negs	r2, r2
200035aa:	4313      	orrs	r3, r2
200035ac:	3301      	adds	r3, #1
200035ae:	2b07      	cmp	r3, #7
200035b0:	d82c      	bhi.n	2000360c <pixel2+0xac>
200035b2:	009a      	lsls	r2, r3, #2
200035b4:	4b51      	ldr	r3, [pc, #324]	; (200036fc <pixel2+0x19c>)
200035b6:	18d3      	adds	r3, r2, r3
200035b8:	681b      	ldr	r3, [r3, #0]
200035ba:	469f      	mov	pc, r3
		case 0: mask = 1; break;
200035bc:	231f      	movs	r3, #31
200035be:	18fb      	adds	r3, r7, r3
200035c0:	2201      	movs	r2, #1
200035c2:	701a      	strb	r2, [r3, #0]
200035c4:	e022      	b.n	2000360c <pixel2+0xac>
		case 1: mask = 2; break;
200035c6:	231f      	movs	r3, #31
200035c8:	18fb      	adds	r3, r7, r3
200035ca:	2202      	movs	r2, #2
200035cc:	701a      	strb	r2, [r3, #0]
200035ce:	e01d      	b.n	2000360c <pixel2+0xac>
		case 2: mask = 4; break;
200035d0:	231f      	movs	r3, #31
200035d2:	18fb      	adds	r3, r7, r3
200035d4:	2204      	movs	r2, #4
200035d6:	701a      	strb	r2, [r3, #0]
200035d8:	e018      	b.n	2000360c <pixel2+0xac>
		case 3: mask = 8; break;
200035da:	231f      	movs	r3, #31
200035dc:	18fb      	adds	r3, r7, r3
200035de:	2208      	movs	r2, #8
200035e0:	701a      	strb	r2, [r3, #0]
200035e2:	e013      	b.n	2000360c <pixel2+0xac>
		case 4: mask = 0x10; break;
200035e4:	231f      	movs	r3, #31
200035e6:	18fb      	adds	r3, r7, r3
200035e8:	2210      	movs	r2, #16
200035ea:	701a      	strb	r2, [r3, #0]
200035ec:	e00e      	b.n	2000360c <pixel2+0xac>
		case 5: mask = 0x20; break;
200035ee:	231f      	movs	r3, #31
200035f0:	18fb      	adds	r3, r7, r3
200035f2:	2220      	movs	r2, #32
200035f4:	701a      	strb	r2, [r3, #0]
200035f6:	e009      	b.n	2000360c <pixel2+0xac>
		case 6: mask = 0x40; break;
200035f8:	231f      	movs	r3, #31
200035fa:	18fb      	adds	r3, r7, r3
200035fc:	2240      	movs	r2, #64	; 0x40
200035fe:	701a      	strb	r2, [r3, #0]
20003600:	e004      	b.n	2000360c <pixel2+0xac>
		case 7: mask = 0x80; break;
20003602:	231f      	movs	r3, #31
20003604:	18fb      	adds	r3, r7, r3
20003606:	2280      	movs	r2, #128	; 0x80
20003608:	701a      	strb	r2, [r3, #0]
2000360a:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0)
2000360c:	687b      	ldr	r3, [r7, #4]
2000360e:	2b00      	cmp	r3, #0
20003610:	d106      	bne.n	20003620 <pixel2+0xc0>
		mask = ~mask;
20003612:	231f      	movs	r3, #31
20003614:	18fb      	adds	r3, r7, r3
20003616:	221f      	movs	r2, #31
20003618:	18ba      	adds	r2, r7, r2
2000361a:	7812      	ldrb	r2, [r2, #0]
2000361c:	43d2      	mvns	r2, r2
2000361e:	701a      	strb	r2, [r3, #0]
	
	if(x > 64){
20003620:	68fb      	ldr	r3, [r7, #12]
20003622:	2b40      	cmp	r3, #64	; 0x40
20003624:	dd07      	ble.n	20003636 <pixel2+0xd6>
		controller = B_CS2;
20003626:	231e      	movs	r3, #30
20003628:	18fb      	adds	r3, r7, r3
2000362a:	2210      	movs	r2, #16
2000362c:	701a      	strb	r2, [r3, #0]
		x = x - 65;
2000362e:	68fb      	ldr	r3, [r7, #12]
20003630:	3b41      	subs	r3, #65	; 0x41
20003632:	60fb      	str	r3, [r7, #12]
20003634:	e006      	b.n	20003644 <pixel2+0xe4>
	} else {
		controller = B_CS1;
20003636:	231e      	movs	r3, #30
20003638:	18fb      	adds	r3, r7, r3
2000363a:	2208      	movs	r2, #8
2000363c:	701a      	strb	r2, [r3, #0]
		x = x-1;
2000363e:	68fb      	ldr	r3, [r7, #12]
20003640:	3b01      	subs	r3, #1
20003642:	60fb      	str	r3, [r7, #12]
	}
	graphic_write_command(LCD_SET_ADD | x, controller );
20003644:	68fb      	ldr	r3, [r7, #12]
20003646:	b25b      	sxtb	r3, r3
20003648:	2240      	movs	r2, #64	; 0x40
2000364a:	4313      	orrs	r3, r2
2000364c:	b25b      	sxtb	r3, r3
2000364e:	b2da      	uxtb	r2, r3
20003650:	231e      	movs	r3, #30
20003652:	18fb      	adds	r3, r7, r3
20003654:	781b      	ldrb	r3, [r3, #0]
20003656:	0019      	movs	r1, r3
20003658:	0010      	movs	r0, r2
2000365a:	f7ff fe11 	bl	20003280 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller );
2000365e:	69bb      	ldr	r3, [r7, #24]
20003660:	b25b      	sxtb	r3, r3
20003662:	2248      	movs	r2, #72	; 0x48
20003664:	4252      	negs	r2, r2
20003666:	4313      	orrs	r3, r2
20003668:	b25b      	sxtb	r3, r3
2000366a:	b2da      	uxtb	r2, r3
2000366c:	231e      	movs	r3, #30
2000366e:	18fb      	adds	r3, r7, r3
20003670:	781b      	ldrb	r3, [r3, #0]
20003672:	0019      	movs	r1, r3
20003674:	0010      	movs	r0, r2
20003676:	f7ff fe03 	bl	20003280 <graphic_write_command>
	
	c = graphic_read_data(controller);
2000367a:	231e      	movs	r3, #30
2000367c:	18fb      	adds	r3, r7, r3
2000367e:	781b      	ldrb	r3, [r3, #0]
20003680:	0018      	movs	r0, r3
20003682:	f7ff fda9 	bl	200031d8 <graphic_read_data>
20003686:	0002      	movs	r2, r0
20003688:	2317      	movs	r3, #23
2000368a:	18fb      	adds	r3, r7, r3
2000368c:	701a      	strb	r2, [r3, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
2000368e:	68fb      	ldr	r3, [r7, #12]
20003690:	b25b      	sxtb	r3, r3
20003692:	2240      	movs	r2, #64	; 0x40
20003694:	4313      	orrs	r3, r2
20003696:	b25b      	sxtb	r3, r3
20003698:	b2da      	uxtb	r2, r3
2000369a:	231e      	movs	r3, #30
2000369c:	18fb      	adds	r3, r7, r3
2000369e:	781b      	ldrb	r3, [r3, #0]
200036a0:	0019      	movs	r1, r3
200036a2:	0010      	movs	r0, r2
200036a4:	f7ff fdec 	bl	20003280 <graphic_write_command>
	
	if(set)
200036a8:	687b      	ldr	r3, [r7, #4]
200036aa:	2b00      	cmp	r3, #0
200036ac:	d00a      	beq.n	200036c4 <pixel2+0x164>
		mask = mask | c;
200036ae:	231f      	movs	r3, #31
200036b0:	18fb      	adds	r3, r7, r3
200036b2:	221f      	movs	r2, #31
200036b4:	18b9      	adds	r1, r7, r2
200036b6:	2217      	movs	r2, #23
200036b8:	18ba      	adds	r2, r7, r2
200036ba:	7809      	ldrb	r1, [r1, #0]
200036bc:	7812      	ldrb	r2, [r2, #0]
200036be:	430a      	orrs	r2, r1
200036c0:	701a      	strb	r2, [r3, #0]
200036c2:	e009      	b.n	200036d8 <pixel2+0x178>
	else
		mask = mask & c;
200036c4:	231f      	movs	r3, #31
200036c6:	18fb      	adds	r3, r7, r3
200036c8:	221f      	movs	r2, #31
200036ca:	18ba      	adds	r2, r7, r2
200036cc:	2117      	movs	r1, #23
200036ce:	1879      	adds	r1, r7, r1
200036d0:	7812      	ldrb	r2, [r2, #0]
200036d2:	7809      	ldrb	r1, [r1, #0]
200036d4:	400a      	ands	r2, r1
200036d6:	701a      	strb	r2, [r3, #0]
	
	graphic_write_data(mask, controller);
200036d8:	231e      	movs	r3, #30
200036da:	18fb      	adds	r3, r7, r3
200036dc:	781a      	ldrb	r2, [r3, #0]
200036de:	231f      	movs	r3, #31
200036e0:	18fb      	adds	r3, r7, r3
200036e2:	781b      	ldrb	r3, [r3, #0]
200036e4:	0011      	movs	r1, r2
200036e6:	0018      	movs	r0, r3
200036e8:	f7ff fded 	bl	200032c6 <graphic_write_data>
200036ec:	e000      	b.n	200036f0 <pixel2+0x190>
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
200036ee:	46c0      	nop			; (mov r8, r8)
}
200036f0:	46bd      	mov	sp, r7
200036f2:	b008      	add	sp, #32
200036f4:	bd80      	pop	{r7, pc}
200036f6:	46c0      	nop			; (mov r8, r8)
200036f8:	80000007 	andhi	r0, r0, r7
200036fc:	2000e94c 	andcs	lr, r0, ip, asr #18

20003700 <graphic_draw_screen>:

void graphic_draw_screen(uint8_t *buffer) {
20003700:	b580      	push	{r7, lr}
20003702:	b086      	sub	sp, #24
20003704:	af00      	add	r7, sp, #0
20003706:	6078      	str	r0, [r7, #4]
	uint8_t i, j, controller, c;
	unsigned int k = 0;
20003708:	2300      	movs	r3, #0
2000370a:	613b      	str	r3, [r7, #16]
	for(c = 0; c < 2; c++) {
2000370c:	2315      	movs	r3, #21
2000370e:	18fb      	adds	r3, r7, r3
20003710:	2200      	movs	r2, #0
20003712:	701a      	strb	r2, [r3, #0]
20003714:	e056      	b.n	200037c4 <graphic_draw_screen+0xc4>
		controller = (c == 0) ? B_CS1 : B_CS2;
20003716:	2315      	movs	r3, #21
20003718:	18fb      	adds	r3, r7, r3
2000371a:	781b      	ldrb	r3, [r3, #0]
2000371c:	2b00      	cmp	r3, #0
2000371e:	d101      	bne.n	20003724 <graphic_draw_screen+0x24>
20003720:	2208      	movs	r2, #8
20003722:	e000      	b.n	20003726 <graphic_draw_screen+0x26>
20003724:	2210      	movs	r2, #16
20003726:	230f      	movs	r3, #15
20003728:	18fb      	adds	r3, r7, r3
2000372a:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 8; j++) {
2000372c:	2316      	movs	r3, #22
2000372e:	18fb      	adds	r3, r7, r3
20003730:	2200      	movs	r2, #0
20003732:	701a      	strb	r2, [r3, #0]
20003734:	e03a      	b.n	200037ac <graphic_draw_screen+0xac>
			graphic_write_command(LCD_SET_PAGE | j, controller);
20003736:	2316      	movs	r3, #22
20003738:	18fb      	adds	r3, r7, r3
2000373a:	781b      	ldrb	r3, [r3, #0]
2000373c:	2248      	movs	r2, #72	; 0x48
2000373e:	4252      	negs	r2, r2
20003740:	4313      	orrs	r3, r2
20003742:	b2da      	uxtb	r2, r3
20003744:	230f      	movs	r3, #15
20003746:	18fb      	adds	r3, r7, r3
20003748:	781b      	ldrb	r3, [r3, #0]
2000374a:	0019      	movs	r1, r3
2000374c:	0010      	movs	r0, r2
2000374e:	f7ff fd97 	bl	20003280 <graphic_write_command>
			graphic_write_command(LCD_SET_ADD | 0, controller);
20003752:	230f      	movs	r3, #15
20003754:	18fb      	adds	r3, r7, r3
20003756:	781b      	ldrb	r3, [r3, #0]
20003758:	0019      	movs	r1, r3
2000375a:	2040      	movs	r0, #64	; 0x40
2000375c:	f7ff fd90 	bl	20003280 <graphic_write_command>
			for(i = 0; i <= 63; i++, k++) {
20003760:	2317      	movs	r3, #23
20003762:	18fb      	adds	r3, r7, r3
20003764:	2200      	movs	r2, #0
20003766:	701a      	strb	r2, [r3, #0]
20003768:	e014      	b.n	20003794 <graphic_draw_screen+0x94>
				graphic_write_data(buffer[k], controller);
2000376a:	687a      	ldr	r2, [r7, #4]
2000376c:	693b      	ldr	r3, [r7, #16]
2000376e:	18d3      	adds	r3, r2, r3
20003770:	781a      	ldrb	r2, [r3, #0]
20003772:	230f      	movs	r3, #15
20003774:	18fb      	adds	r3, r7, r3
20003776:	781b      	ldrb	r3, [r3, #0]
20003778:	0019      	movs	r1, r3
2000377a:	0010      	movs	r0, r2
2000377c:	f7ff fda3 	bl	200032c6 <graphic_write_data>
			for(i = 0; i <= 63; i++, k++) {
20003780:	2317      	movs	r3, #23
20003782:	18fb      	adds	r3, r7, r3
20003784:	781a      	ldrb	r2, [r3, #0]
20003786:	2317      	movs	r3, #23
20003788:	18fb      	adds	r3, r7, r3
2000378a:	3201      	adds	r2, #1
2000378c:	701a      	strb	r2, [r3, #0]
2000378e:	693b      	ldr	r3, [r7, #16]
20003790:	3301      	adds	r3, #1
20003792:	613b      	str	r3, [r7, #16]
20003794:	2317      	movs	r3, #23
20003796:	18fb      	adds	r3, r7, r3
20003798:	781b      	ldrb	r3, [r3, #0]
2000379a:	2b3f      	cmp	r3, #63	; 0x3f
2000379c:	d9e5      	bls.n	2000376a <graphic_draw_screen+0x6a>
		for(j = 0; j < 8; j++) {
2000379e:	2316      	movs	r3, #22
200037a0:	18fb      	adds	r3, r7, r3
200037a2:	781a      	ldrb	r2, [r3, #0]
200037a4:	2316      	movs	r3, #22
200037a6:	18fb      	adds	r3, r7, r3
200037a8:	3201      	adds	r2, #1
200037aa:	701a      	strb	r2, [r3, #0]
200037ac:	2316      	movs	r3, #22
200037ae:	18fb      	adds	r3, r7, r3
200037b0:	781b      	ldrb	r3, [r3, #0]
200037b2:	2b07      	cmp	r3, #7
200037b4:	d9bf      	bls.n	20003736 <graphic_draw_screen+0x36>
	for(c = 0; c < 2; c++) {
200037b6:	2315      	movs	r3, #21
200037b8:	18fb      	adds	r3, r7, r3
200037ba:	781a      	ldrb	r2, [r3, #0]
200037bc:	2315      	movs	r3, #21
200037be:	18fb      	adds	r3, r7, r3
200037c0:	3201      	adds	r2, #1
200037c2:	701a      	strb	r2, [r3, #0]
200037c4:	2315      	movs	r3, #21
200037c6:	18fb      	adds	r3, r7, r3
200037c8:	781b      	ldrb	r3, [r3, #0]
200037ca:	2b01      	cmp	r3, #1
200037cc:	d9a3      	bls.n	20003716 <graphic_draw_screen+0x16>
			}
		}
	}
}
200037ce:	46c0      	nop			; (mov r8, r8)
200037d0:	46bd      	mov	sp, r7
200037d2:	b006      	add	sp, #24
200037d4:	bd80      	pop	{r7, pc}

200037d6 <draw_sprite>:


void grayScaleTest( void );


void draw_sprite(sprite* s, int x, int y, int set, int color) {
200037d6:	b5b0      	push	{r4, r5, r7, lr}
200037d8:	b08a      	sub	sp, #40	; 0x28
200037da:	af00      	add	r7, sp, #0
200037dc:	60f8      	str	r0, [r7, #12]
200037de:	60b9      	str	r1, [r7, #8]
200037e0:	607a      	str	r2, [r7, #4]
200037e2:	603b      	str	r3, [r7, #0]
	int i,j,k, width_in_bytes;
	if (s->width % 8 == 0)
200037e4:	68fb      	ldr	r3, [r7, #12]
200037e6:	681b      	ldr	r3, [r3, #0]
200037e8:	2207      	movs	r2, #7
200037ea:	4013      	ands	r3, r2
200037ec:	d104      	bne.n	200037f8 <draw_sprite+0x22>
		width_in_bytes = s->width / 8;
200037ee:	68fb      	ldr	r3, [r7, #12]
200037f0:	681b      	ldr	r3, [r3, #0]
200037f2:	08db      	lsrs	r3, r3, #3
200037f4:	61bb      	str	r3, [r7, #24]
200037f6:	e004      	b.n	20003802 <draw_sprite+0x2c>
	else
		width_in_bytes = (s->width / 8) + 1;
200037f8:	68fb      	ldr	r3, [r7, #12]
200037fa:	681b      	ldr	r3, [r3, #0]
200037fc:	08db      	lsrs	r3, r3, #3
200037fe:	3301      	adds	r3, #1
20003800:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < s->height; i++)
20003802:	2300      	movs	r3, #0
20003804:	627b      	str	r3, [r7, #36]	; 0x24
20003806:	e06a      	b.n	200038de <draw_sprite+0x108>
		for (j = 0; j < width_in_bytes; j++) {
20003808:	2300      	movs	r3, #0
2000380a:	623b      	str	r3, [r7, #32]
2000380c:	e060      	b.n	200038d0 <draw_sprite+0xfa>
			unsigned char byte = s->data[i * width_in_bytes + j];
2000380e:	68fb      	ldr	r3, [r7, #12]
20003810:	689b      	ldr	r3, [r3, #8]
20003812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20003814:	69b9      	ldr	r1, [r7, #24]
20003816:	4351      	muls	r1, r2
20003818:	6a3a      	ldr	r2, [r7, #32]
2000381a:	188a      	adds	r2, r1, r2
2000381c:	189a      	adds	r2, r3, r2
2000381e:	2317      	movs	r3, #23
20003820:	18fb      	adds	r3, r7, r3
20003822:	7812      	ldrb	r2, [r2, #0]
20003824:	701a      	strb	r2, [r3, #0]
			for (k =0; k < 8; k++) {
20003826:	2300      	movs	r3, #0
20003828:	61fb      	str	r3, [r7, #28]
2000382a:	e04b      	b.n	200038c4 <draw_sprite+0xee>
				if (byte & (1 << k)){
2000382c:	2317      	movs	r3, #23
2000382e:	18fb      	adds	r3, r7, r3
20003830:	781a      	ldrb	r2, [r3, #0]
20003832:	69fb      	ldr	r3, [r7, #28]
20003834:	411a      	asrs	r2, r3
20003836:	0013      	movs	r3, r2
20003838:	2201      	movs	r2, #1
2000383a:	4013      	ands	r3, r2
2000383c:	d03f      	beq.n	200038be <draw_sprite+0xe8>
					pixel(8 * j + k + x + 1, i + y + 1, set, color);
2000383e:	6a3b      	ldr	r3, [r7, #32]
20003840:	00da      	lsls	r2, r3, #3
20003842:	69fb      	ldr	r3, [r7, #28]
20003844:	18d2      	adds	r2, r2, r3
20003846:	68bb      	ldr	r3, [r7, #8]
20003848:	18d3      	adds	r3, r2, r3
2000384a:	1c58      	adds	r0, r3, #1
2000384c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000384e:	687b      	ldr	r3, [r7, #4]
20003850:	18d3      	adds	r3, r2, r3
20003852:	1c59      	adds	r1, r3, #1
20003854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20003856:	683a      	ldr	r2, [r7, #0]
20003858:	f7ff fdc2 	bl	200033e0 <pixel>
					
					if(set) {	//Remove the other colors from this pixel
2000385c:	683b      	ldr	r3, [r7, #0]
2000385e:	2b00      	cmp	r3, #0
20003860:	d02d      	beq.n	200038be <draw_sprite+0xe8>
						pixel(8 * j + k + x + 1, i + y + 1, 0, (color+1) % 3);
20003862:	6a3b      	ldr	r3, [r7, #32]
20003864:	00da      	lsls	r2, r3, #3
20003866:	69fb      	ldr	r3, [r7, #28]
20003868:	18d2      	adds	r2, r2, r3
2000386a:	68bb      	ldr	r3, [r7, #8]
2000386c:	18d3      	adds	r3, r2, r3
2000386e:	1c5c      	adds	r4, r3, #1
20003870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20003872:	687b      	ldr	r3, [r7, #4]
20003874:	18d3      	adds	r3, r2, r3
20003876:	1c5d      	adds	r5, r3, #1
20003878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000387a:	3301      	adds	r3, #1
2000387c:	2103      	movs	r1, #3
2000387e:	0018      	movs	r0, r3
20003880:	f000 ff94 	bl	200047ac <__aeabi_idivmod>
20003884:	000b      	movs	r3, r1
20003886:	2200      	movs	r2, #0
20003888:	0029      	movs	r1, r5
2000388a:	0020      	movs	r0, r4
2000388c:	f7ff fda8 	bl	200033e0 <pixel>
						pixel(8 * j + k + x + 1, i + y + 1, 0, (color+2) % 3);
20003890:	6a3b      	ldr	r3, [r7, #32]
20003892:	00da      	lsls	r2, r3, #3
20003894:	69fb      	ldr	r3, [r7, #28]
20003896:	18d2      	adds	r2, r2, r3
20003898:	68bb      	ldr	r3, [r7, #8]
2000389a:	18d3      	adds	r3, r2, r3
2000389c:	1c5c      	adds	r4, r3, #1
2000389e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200038a0:	687b      	ldr	r3, [r7, #4]
200038a2:	18d3      	adds	r3, r2, r3
200038a4:	1c5d      	adds	r5, r3, #1
200038a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200038a8:	3302      	adds	r3, #2
200038aa:	2103      	movs	r1, #3
200038ac:	0018      	movs	r0, r3
200038ae:	f000 ff7d 	bl	200047ac <__aeabi_idivmod>
200038b2:	000b      	movs	r3, r1
200038b4:	2200      	movs	r2, #0
200038b6:	0029      	movs	r1, r5
200038b8:	0020      	movs	r0, r4
200038ba:	f7ff fd91 	bl	200033e0 <pixel>
			for (k =0; k < 8; k++) {
200038be:	69fb      	ldr	r3, [r7, #28]
200038c0:	3301      	adds	r3, #1
200038c2:	61fb      	str	r3, [r7, #28]
200038c4:	69fb      	ldr	r3, [r7, #28]
200038c6:	2b07      	cmp	r3, #7
200038c8:	ddb0      	ble.n	2000382c <draw_sprite+0x56>
		for (j = 0; j < width_in_bytes; j++) {
200038ca:	6a3b      	ldr	r3, [r7, #32]
200038cc:	3301      	adds	r3, #1
200038ce:	623b      	str	r3, [r7, #32]
200038d0:	6a3a      	ldr	r2, [r7, #32]
200038d2:	69bb      	ldr	r3, [r7, #24]
200038d4:	429a      	cmp	r2, r3
200038d6:	db9a      	blt.n	2000380e <draw_sprite+0x38>
	for (i = 0; i < s->height; i++)
200038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200038da:	3301      	adds	r3, #1
200038dc:	627b      	str	r3, [r7, #36]	; 0x24
200038de:	68fb      	ldr	r3, [r7, #12]
200038e0:	685a      	ldr	r2, [r3, #4]
200038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200038e4:	429a      	cmp	r2, r3
200038e6:	d88f      	bhi.n	20003808 <draw_sprite+0x32>
					}
				}
			}
		}
}
200038e8:	46c0      	nop			; (mov r8, r8)
200038ea:	46bd      	mov	sp, r7
200038ec:	b00a      	add	sp, #40	; 0x28
200038ee:	bdb0      	pop	{r4, r5, r7, pc}

200038f0 <fillRectangle>:

void fillRectangle( int x, int y, int width, int height ){
200038f0:	b580      	push	{r7, lr}
200038f2:	b086      	sub	sp, #24
200038f4:	af00      	add	r7, sp, #0
200038f6:	60f8      	str	r0, [r7, #12]
200038f8:	60b9      	str	r1, [r7, #8]
200038fa:	607a      	str	r2, [r7, #4]
200038fc:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
200038fe:	68fb      	ldr	r3, [r7, #12]
20003900:	617b      	str	r3, [r7, #20]
20003902:	e014      	b.n	2000392e <fillRectangle+0x3e>
		for (j = y; j < y + height; j++) {
20003904:	68bb      	ldr	r3, [r7, #8]
20003906:	613b      	str	r3, [r7, #16]
20003908:	e008      	b.n	2000391c <fillRectangle+0x2c>
			pixel(i, j, 1, 3);
2000390a:	6939      	ldr	r1, [r7, #16]
2000390c:	6978      	ldr	r0, [r7, #20]
2000390e:	2303      	movs	r3, #3
20003910:	2201      	movs	r2, #1
20003912:	f7ff fd65 	bl	200033e0 <pixel>
		for (j = y; j < y + height; j++) {
20003916:	693b      	ldr	r3, [r7, #16]
20003918:	3301      	adds	r3, #1
2000391a:	613b      	str	r3, [r7, #16]
2000391c:	68ba      	ldr	r2, [r7, #8]
2000391e:	683b      	ldr	r3, [r7, #0]
20003920:	18d2      	adds	r2, r2, r3
20003922:	693b      	ldr	r3, [r7, #16]
20003924:	429a      	cmp	r2, r3
20003926:	dcf0      	bgt.n	2000390a <fillRectangle+0x1a>
	for (i = x; i < x + width; i++) {
20003928:	697b      	ldr	r3, [r7, #20]
2000392a:	3301      	adds	r3, #1
2000392c:	617b      	str	r3, [r7, #20]
2000392e:	68fa      	ldr	r2, [r7, #12]
20003930:	687b      	ldr	r3, [r7, #4]
20003932:	18d2      	adds	r2, r2, r3
20003934:	697b      	ldr	r3, [r7, #20]
20003936:	429a      	cmp	r2, r3
20003938:	dce4      	bgt.n	20003904 <fillRectangle+0x14>
		}
	}
}
2000393a:	46c0      	nop			; (mov r8, r8)
2000393c:	46bd      	mov	sp, r7
2000393e:	b006      	add	sp, #24
20003940:	bd80      	pop	{r7, pc}

20003942 <clearRectangle>:

void clearRectangle( int x, int y, int width, int height ){
20003942:	b580      	push	{r7, lr}
20003944:	b086      	sub	sp, #24
20003946:	af00      	add	r7, sp, #0
20003948:	60f8      	str	r0, [r7, #12]
2000394a:	60b9      	str	r1, [r7, #8]
2000394c:	607a      	str	r2, [r7, #4]
2000394e:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
20003950:	68fb      	ldr	r3, [r7, #12]
20003952:	617b      	str	r3, [r7, #20]
20003954:	e014      	b.n	20003980 <clearRectangle+0x3e>
		for (j = y; j < y + height; j++) {
20003956:	68bb      	ldr	r3, [r7, #8]
20003958:	613b      	str	r3, [r7, #16]
2000395a:	e008      	b.n	2000396e <clearRectangle+0x2c>
			pixel(i, j, 0, 3);
2000395c:	6939      	ldr	r1, [r7, #16]
2000395e:	6978      	ldr	r0, [r7, #20]
20003960:	2303      	movs	r3, #3
20003962:	2200      	movs	r2, #0
20003964:	f7ff fd3c 	bl	200033e0 <pixel>
		for (j = y; j < y + height; j++) {
20003968:	693b      	ldr	r3, [r7, #16]
2000396a:	3301      	adds	r3, #1
2000396c:	613b      	str	r3, [r7, #16]
2000396e:	68ba      	ldr	r2, [r7, #8]
20003970:	683b      	ldr	r3, [r7, #0]
20003972:	18d2      	adds	r2, r2, r3
20003974:	693b      	ldr	r3, [r7, #16]
20003976:	429a      	cmp	r2, r3
20003978:	dcf0      	bgt.n	2000395c <clearRectangle+0x1a>
	for (i = x; i < x + width; i++) {
2000397a:	697b      	ldr	r3, [r7, #20]
2000397c:	3301      	adds	r3, #1
2000397e:	617b      	str	r3, [r7, #20]
20003980:	68fa      	ldr	r2, [r7, #12]
20003982:	687b      	ldr	r3, [r7, #4]
20003984:	18d2      	adds	r2, r2, r3
20003986:	697b      	ldr	r3, [r7, #20]
20003988:	429a      	cmp	r2, r3
2000398a:	dce4      	bgt.n	20003956 <clearRectangle+0x14>
		}
	}
}
2000398c:	46c0      	nop			; (mov r8, r8)
2000398e:	46bd      	mov	sp, r7
20003990:	b006      	add	sp, #24
20003992:	bd80      	pop	{r7, pc}

20003994 <grayScaleTest>:


void grayScaleTest( void ) {
20003994:	b590      	push	{r4, r7, lr}
20003996:	b087      	sub	sp, #28
20003998:	af00      	add	r7, sp, #0
	int x = 10;
2000399a:	230a      	movs	r3, #10
2000399c:	617b      	str	r3, [r7, #20]
	int y = 10;
2000399e:	230a      	movs	r3, #10
200039a0:	613b      	str	r3, [r7, #16]
	int width = 70;
200039a2:	2346      	movs	r3, #70	; 0x46
200039a4:	60fb      	str	r3, [r7, #12]
	int height = 50;
200039a6:	2332      	movs	r3, #50	; 0x32
200039a8:	60bb      	str	r3, [r7, #8]
	
	int x2 = 50;
200039aa:	2332      	movs	r3, #50	; 0x32
200039ac:	607b      	str	r3, [r7, #4]
	
	fillRectangle(x, y, width, height);
200039ae:	68bb      	ldr	r3, [r7, #8]
200039b0:	68fa      	ldr	r2, [r7, #12]
200039b2:	6939      	ldr	r1, [r7, #16]
200039b4:	6978      	ldr	r0, [r7, #20]
200039b6:	f7ff ff9b 	bl	200038f0 <fillRectangle>
	
	int i;
	int k = 5;
200039ba:	2305      	movs	r3, #5
200039bc:	603b      	str	r3, [r7, #0]
	while(1) {
		clear_backBuffer();
200039be:	f7ff fadf 	bl	20002f80 <clear_backBuffer>
		fillRectangle(x, y, width, height);
200039c2:	68bb      	ldr	r3, [r7, #8]
200039c4:	68fa      	ldr	r2, [r7, #12]
200039c6:	6939      	ldr	r1, [r7, #16]
200039c8:	6978      	ldr	r0, [r7, #20]
200039ca:	f7ff ff91 	bl	200038f0 <fillRectangle>
		clearRectangle(x+2+2, y+1, width-k, height-k); //outer square
200039ce:	697b      	ldr	r3, [r7, #20]
200039d0:	1d18      	adds	r0, r3, #4
200039d2:	693b      	ldr	r3, [r7, #16]
200039d4:	1c59      	adds	r1, r3, #1
200039d6:	68fa      	ldr	r2, [r7, #12]
200039d8:	683b      	ldr	r3, [r7, #0]
200039da:	1ad4      	subs	r4, r2, r3
200039dc:	68ba      	ldr	r2, [r7, #8]
200039de:	683b      	ldr	r3, [r7, #0]
200039e0:	1ad3      	subs	r3, r2, r3
200039e2:	0022      	movs	r2, r4
200039e4:	f7ff ffad 	bl	20003942 <clearRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
200039e8:	697b      	ldr	r3, [r7, #20]
200039ea:	1c9a      	adds	r2, r3, #2
200039ec:	683b      	ldr	r3, [r7, #0]
200039ee:	18d0      	adds	r0, r2, r3
200039f0:	693b      	ldr	r3, [r7, #16]
200039f2:	1c99      	adds	r1, r3, #2
200039f4:	68fb      	ldr	r3, [r7, #12]
200039f6:	1f1a      	subs	r2, r3, #4
200039f8:	683b      	ldr	r3, [r7, #0]
200039fa:	1ad4      	subs	r4, r2, r3
200039fc:	68bb      	ldr	r3, [r7, #8]
200039fe:	1f1a      	subs	r2, r3, #4
20003a00:	683b      	ldr	r3, [r7, #0]
20003a02:	1ad3      	subs	r3, r2, r3
20003a04:	0022      	movs	r2, r4
20003a06:	f7ff ff9c 	bl	20003942 <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
20003a0a:	4b2d      	ldr	r3, [pc, #180]	; (20003ac0 <grayScaleTest+0x12c>)
20003a0c:	0018      	movs	r0, r3
20003a0e:	f7ff fe77 	bl	20003700 <graphic_draw_screen>
		clear_backBuffer();
20003a12:	f7ff fab5 	bl	20002f80 <clear_backBuffer>
		fillRectangle(x, y, width, height);
20003a16:	68bb      	ldr	r3, [r7, #8]
20003a18:	68fa      	ldr	r2, [r7, #12]
20003a1a:	6939      	ldr	r1, [r7, #16]
20003a1c:	6978      	ldr	r0, [r7, #20]
20003a1e:	f7ff ff67 	bl	200038f0 <fillRectangle>
		
		fillRectangle(x+2+2, y+1, width-k, height-k); //outer white square
20003a22:	697b      	ldr	r3, [r7, #20]
20003a24:	1d18      	adds	r0, r3, #4
20003a26:	693b      	ldr	r3, [r7, #16]
20003a28:	1c59      	adds	r1, r3, #1
20003a2a:	68fa      	ldr	r2, [r7, #12]
20003a2c:	683b      	ldr	r3, [r7, #0]
20003a2e:	1ad4      	subs	r4, r2, r3
20003a30:	68ba      	ldr	r2, [r7, #8]
20003a32:	683b      	ldr	r3, [r7, #0]
20003a34:	1ad3      	subs	r3, r2, r3
20003a36:	0022      	movs	r2, r4
20003a38:	f7ff ff5a 	bl	200038f0 <fillRectangle>
		fillRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
20003a3c:	697b      	ldr	r3, [r7, #20]
20003a3e:	1c9a      	adds	r2, r3, #2
20003a40:	683b      	ldr	r3, [r7, #0]
20003a42:	18d0      	adds	r0, r2, r3
20003a44:	693b      	ldr	r3, [r7, #16]
20003a46:	1c99      	adds	r1, r3, #2
20003a48:	68fb      	ldr	r3, [r7, #12]
20003a4a:	1f1a      	subs	r2, r3, #4
20003a4c:	683b      	ldr	r3, [r7, #0]
20003a4e:	1ad4      	subs	r4, r2, r3
20003a50:	68bb      	ldr	r3, [r7, #8]
20003a52:	1f1a      	subs	r2, r3, #4
20003a54:	683b      	ldr	r3, [r7, #0]
20003a56:	1ad3      	subs	r3, r2, r3
20003a58:	0022      	movs	r2, r4
20003a5a:	f7ff ff49 	bl	200038f0 <fillRectangle>
		clearRectangle(x+12, y+5, 5, 5);
20003a5e:	697b      	ldr	r3, [r7, #20]
20003a60:	330c      	adds	r3, #12
20003a62:	0018      	movs	r0, r3
20003a64:	693b      	ldr	r3, [r7, #16]
20003a66:	1d59      	adds	r1, r3, #5
20003a68:	2305      	movs	r3, #5
20003a6a:	2205      	movs	r2, #5
20003a6c:	f7ff ff69 	bl	20003942 <clearRectangle>
		
		graphic_draw_screen(draw_buffer_black);
20003a70:	4b13      	ldr	r3, [pc, #76]	; (20003ac0 <grayScaleTest+0x12c>)
20003a72:	0018      	movs	r0, r3
20003a74:	f7ff fe44 	bl	20003700 <graphic_draw_screen>
		delay_milli(20);
20003a78:	2014      	movs	r0, #20
20003a7a:	f7ff fa55 	bl	20002f28 <delay_milli>
		
		clear_backBuffer();
20003a7e:	f7ff fa7f 	bl	20002f80 <clear_backBuffer>
		fillRectangle(x, y, width, height);
20003a82:	68bb      	ldr	r3, [r7, #8]
20003a84:	68fa      	ldr	r2, [r7, #12]
20003a86:	6939      	ldr	r1, [r7, #16]
20003a88:	6978      	ldr	r0, [r7, #20]
20003a8a:	f7ff ff31 	bl	200038f0 <fillRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
20003a8e:	697b      	ldr	r3, [r7, #20]
20003a90:	1c9a      	adds	r2, r3, #2
20003a92:	683b      	ldr	r3, [r7, #0]
20003a94:	18d0      	adds	r0, r2, r3
20003a96:	693b      	ldr	r3, [r7, #16]
20003a98:	1c99      	adds	r1, r3, #2
20003a9a:	68fb      	ldr	r3, [r7, #12]
20003a9c:	1f1a      	subs	r2, r3, #4
20003a9e:	683b      	ldr	r3, [r7, #0]
20003aa0:	1ad4      	subs	r4, r2, r3
20003aa2:	68bb      	ldr	r3, [r7, #8]
20003aa4:	1f1a      	subs	r2, r3, #4
20003aa6:	683b      	ldr	r3, [r7, #0]
20003aa8:	1ad3      	subs	r3, r2, r3
20003aaa:	0022      	movs	r2, r4
20003aac:	f7ff ff49 	bl	20003942 <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
20003ab0:	4b03      	ldr	r3, [pc, #12]	; (20003ac0 <grayScaleTest+0x12c>)
20003ab2:	0018      	movs	r0, r3
20003ab4:	f7ff fe24 	bl	20003700 <graphic_draw_screen>
		
		delay_milli(20);
20003ab8:	2014      	movs	r0, #20
20003aba:	f7ff fa35 	bl	20002f28 <delay_milli>
		clear_backBuffer();
20003abe:	e77e      	b.n	200039be <grayScaleTest+0x2a>
20003ac0:	20006370 	andcs	r6, r0, r0, ror r3

20003ac4 <set_up_draw_buffers>:
	}
}

/** Should prepare the different drawing buffers, before the drawing of each frame.*/
void set_up_draw_buffers( void ) {
20003ac4:	b580      	push	{r7, lr}
20003ac6:	b082      	sub	sp, #8
20003ac8:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 1024; i++) {
20003aca:	2300      	movs	r3, #0
20003acc:	607b      	str	r3, [r7, #4]
20003ace:	e065      	b.n	20003b9c <set_up_draw_buffers+0xd8>
		draw_buffer_black[i] = backBuffer[i] & (~backBufferGray[i] & ~backBufferLight[i]); //Had to work a bit on these
20003ad0:	4a36      	ldr	r2, [pc, #216]	; (20003bac <set_up_draw_buffers+0xe8>)
20003ad2:	687b      	ldr	r3, [r7, #4]
20003ad4:	18d3      	adds	r3, r2, r3
20003ad6:	781b      	ldrb	r3, [r3, #0]
20003ad8:	b25b      	sxtb	r3, r3
20003ada:	4935      	ldr	r1, [pc, #212]	; (20003bb0 <set_up_draw_buffers+0xec>)
20003adc:	687a      	ldr	r2, [r7, #4]
20003ade:	188a      	adds	r2, r1, r2
20003ae0:	7811      	ldrb	r1, [r2, #0]
20003ae2:	4834      	ldr	r0, [pc, #208]	; (20003bb4 <set_up_draw_buffers+0xf0>)
20003ae4:	687a      	ldr	r2, [r7, #4]
20003ae6:	1882      	adds	r2, r0, r2
20003ae8:	7812      	ldrb	r2, [r2, #0]
20003aea:	430a      	orrs	r2, r1
20003aec:	b2d2      	uxtb	r2, r2
20003aee:	b252      	sxtb	r2, r2
20003af0:	43d2      	mvns	r2, r2
20003af2:	b252      	sxtb	r2, r2
20003af4:	4013      	ands	r3, r2
20003af6:	b25b      	sxtb	r3, r3
20003af8:	b2d9      	uxtb	r1, r3
20003afa:	4a2f      	ldr	r2, [pc, #188]	; (20003bb8 <set_up_draw_buffers+0xf4>)
20003afc:	687b      	ldr	r3, [r7, #4]
20003afe:	18d3      	adds	r3, r2, r3
20003b00:	1c0a      	adds	r2, r1, #0
20003b02:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray[i] = (backBuffer[i] | backBufferGray[i]) & ~backBufferLight[i]; //in order to make it possible
20003b04:	4a29      	ldr	r2, [pc, #164]	; (20003bac <set_up_draw_buffers+0xe8>)
20003b06:	687b      	ldr	r3, [r7, #4]
20003b08:	18d3      	adds	r3, r2, r3
20003b0a:	781a      	ldrb	r2, [r3, #0]
20003b0c:	4928      	ldr	r1, [pc, #160]	; (20003bb0 <set_up_draw_buffers+0xec>)
20003b0e:	687b      	ldr	r3, [r7, #4]
20003b10:	18cb      	adds	r3, r1, r3
20003b12:	781b      	ldrb	r3, [r3, #0]
20003b14:	4313      	orrs	r3, r2
20003b16:	b2db      	uxtb	r3, r3
20003b18:	b25b      	sxtb	r3, r3
20003b1a:	4926      	ldr	r1, [pc, #152]	; (20003bb4 <set_up_draw_buffers+0xf0>)
20003b1c:	687a      	ldr	r2, [r7, #4]
20003b1e:	188a      	adds	r2, r1, r2
20003b20:	7812      	ldrb	r2, [r2, #0]
20003b22:	b252      	sxtb	r2, r2
20003b24:	43d2      	mvns	r2, r2
20003b26:	b252      	sxtb	r2, r2
20003b28:	4013      	ands	r3, r2
20003b2a:	b25b      	sxtb	r3, r3
20003b2c:	b2d9      	uxtb	r1, r3
20003b2e:	4a23      	ldr	r2, [pc, #140]	; (20003bbc <set_up_draw_buffers+0xf8>)
20003b30:	687b      	ldr	r3, [r7, #4]
20003b32:	18d3      	adds	r3, r2, r3
20003b34:	1c0a      	adds	r2, r1, #0
20003b36:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_light[i] = (backBuffer[i] | backBufferLight[i]) & ~backBufferGray[i]; //to show a lighter sprite
20003b38:	4a1c      	ldr	r2, [pc, #112]	; (20003bac <set_up_draw_buffers+0xe8>)
20003b3a:	687b      	ldr	r3, [r7, #4]
20003b3c:	18d3      	adds	r3, r2, r3
20003b3e:	781a      	ldrb	r2, [r3, #0]
20003b40:	491c      	ldr	r1, [pc, #112]	; (20003bb4 <set_up_draw_buffers+0xf0>)
20003b42:	687b      	ldr	r3, [r7, #4]
20003b44:	18cb      	adds	r3, r1, r3
20003b46:	781b      	ldrb	r3, [r3, #0]
20003b48:	4313      	orrs	r3, r2
20003b4a:	b2db      	uxtb	r3, r3
20003b4c:	b25b      	sxtb	r3, r3
20003b4e:	4918      	ldr	r1, [pc, #96]	; (20003bb0 <set_up_draw_buffers+0xec>)
20003b50:	687a      	ldr	r2, [r7, #4]
20003b52:	188a      	adds	r2, r1, r2
20003b54:	7812      	ldrb	r2, [r2, #0]
20003b56:	b252      	sxtb	r2, r2
20003b58:	43d2      	mvns	r2, r2
20003b5a:	b252      	sxtb	r2, r2
20003b5c:	4013      	ands	r3, r2
20003b5e:	b25b      	sxtb	r3, r3
20003b60:	b2d9      	uxtb	r1, r3
20003b62:	4a17      	ldr	r2, [pc, #92]	; (20003bc0 <set_up_draw_buffers+0xfc>)
20003b64:	687b      	ldr	r3, [r7, #4]
20003b66:	18d3      	adds	r3, r2, r3
20003b68:	1c0a      	adds	r2, r1, #0
20003b6a:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray_light[i] = backBuffer[i] | backBufferGray[i] | backBufferLight[i]; //on top of a darker one.
20003b6c:	4a0f      	ldr	r2, [pc, #60]	; (20003bac <set_up_draw_buffers+0xe8>)
20003b6e:	687b      	ldr	r3, [r7, #4]
20003b70:	18d3      	adds	r3, r2, r3
20003b72:	781a      	ldrb	r2, [r3, #0]
20003b74:	490e      	ldr	r1, [pc, #56]	; (20003bb0 <set_up_draw_buffers+0xec>)
20003b76:	687b      	ldr	r3, [r7, #4]
20003b78:	18cb      	adds	r3, r1, r3
20003b7a:	781b      	ldrb	r3, [r3, #0]
20003b7c:	4313      	orrs	r3, r2
20003b7e:	b2da      	uxtb	r2, r3
20003b80:	490c      	ldr	r1, [pc, #48]	; (20003bb4 <set_up_draw_buffers+0xf0>)
20003b82:	687b      	ldr	r3, [r7, #4]
20003b84:	18cb      	adds	r3, r1, r3
20003b86:	781b      	ldrb	r3, [r3, #0]
20003b88:	4313      	orrs	r3, r2
20003b8a:	b2d9      	uxtb	r1, r3
20003b8c:	4a0d      	ldr	r2, [pc, #52]	; (20003bc4 <set_up_draw_buffers+0x100>)
20003b8e:	687b      	ldr	r3, [r7, #4]
20003b90:	18d3      	adds	r3, r2, r3
20003b92:	1c0a      	adds	r2, r1, #0
20003b94:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 1024; i++) {
20003b96:	687b      	ldr	r3, [r7, #4]
20003b98:	3301      	adds	r3, #1
20003b9a:	607b      	str	r3, [r7, #4]
20003b9c:	687b      	ldr	r3, [r7, #4]
20003b9e:	4a0a      	ldr	r2, [pc, #40]	; (20003bc8 <set_up_draw_buffers+0x104>)
20003ba0:	4293      	cmp	r3, r2
20003ba2:	dd95      	ble.n	20003ad0 <set_up_draw_buffers+0xc>
	}
}
20003ba4:	46c0      	nop			; (mov r8, r8)
20003ba6:	46bd      	mov	sp, r7
20003ba8:	b002      	add	sp, #8
20003baa:	bd80      	pop	{r7, pc}
20003bac:	20005b70 	andcs	r5, r0, r0, ror fp
20003bb0:	20005370 	andcs	r5, r0, r0, ror r3
20003bb4:	20006b70 	andcs	r6, r0, r0, ror fp
20003bb8:	20006370 	andcs	r6, r0, r0, ror r3
20003bbc:	20005770 	andcs	r5, r0, r0, ror r7
20003bc0:	20005f70 	andcs	r5, r0, r0, ror pc
20003bc4:	20006770 	andcs	r6, r0, r0, ror r7
20003bc8:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20003bcc <draw_game_object>:

void draw_game_object(GameObject *gObj) {
20003bcc:	b580      	push	{r7, lr}
20003bce:	b086      	sub	sp, #24
20003bd0:	af02      	add	r7, sp, #8
20003bd2:	6078      	str	r0, [r7, #4]
	int frame = gObj->current_frame;
20003bd4:	687b      	ldr	r3, [r7, #4]
20003bd6:	695b      	ldr	r3, [r3, #20]
20003bd8:	60fb      	str	r3, [r7, #12]
	draw_sprite(gObj->images[frame].blackImage, gObj->xPos, gObj->yPos, 1, 3);
20003bda:	687b      	ldr	r3, [r7, #4]
20003bdc:	6819      	ldr	r1, [r3, #0]
20003bde:	68fa      	ldr	r2, [r7, #12]
20003be0:	0013      	movs	r3, r2
20003be2:	005b      	lsls	r3, r3, #1
20003be4:	189b      	adds	r3, r3, r2
20003be6:	009b      	lsls	r3, r3, #2
20003be8:	18cb      	adds	r3, r1, r3
20003bea:	6818      	ldr	r0, [r3, #0]
20003bec:	687b      	ldr	r3, [r7, #4]
20003bee:	6859      	ldr	r1, [r3, #4]
20003bf0:	687b      	ldr	r3, [r7, #4]
20003bf2:	689a      	ldr	r2, [r3, #8]
20003bf4:	2303      	movs	r3, #3
20003bf6:	9300      	str	r3, [sp, #0]
20003bf8:	2301      	movs	r3, #1
20003bfa:	f7ff fdec 	bl	200037d6 <draw_sprite>
	draw_sprite(gObj->images[frame].grayImage, gObj->xPos, gObj->yPos, 1, 2);
20003bfe:	687b      	ldr	r3, [r7, #4]
20003c00:	6819      	ldr	r1, [r3, #0]
20003c02:	68fa      	ldr	r2, [r7, #12]
20003c04:	0013      	movs	r3, r2
20003c06:	005b      	lsls	r3, r3, #1
20003c08:	189b      	adds	r3, r3, r2
20003c0a:	009b      	lsls	r3, r3, #2
20003c0c:	18cb      	adds	r3, r1, r3
20003c0e:	6858      	ldr	r0, [r3, #4]
20003c10:	687b      	ldr	r3, [r7, #4]
20003c12:	6859      	ldr	r1, [r3, #4]
20003c14:	687b      	ldr	r3, [r7, #4]
20003c16:	689a      	ldr	r2, [r3, #8]
20003c18:	2302      	movs	r3, #2
20003c1a:	9300      	str	r3, [sp, #0]
20003c1c:	2301      	movs	r3, #1
20003c1e:	f7ff fdda 	bl	200037d6 <draw_sprite>
	draw_sprite(gObj->images[frame].lightImage, gObj->xPos, gObj->yPos, 1, 1);
20003c22:	687b      	ldr	r3, [r7, #4]
20003c24:	6819      	ldr	r1, [r3, #0]
20003c26:	68fa      	ldr	r2, [r7, #12]
20003c28:	0013      	movs	r3, r2
20003c2a:	005b      	lsls	r3, r3, #1
20003c2c:	189b      	adds	r3, r3, r2
20003c2e:	009b      	lsls	r3, r3, #2
20003c30:	18cb      	adds	r3, r1, r3
20003c32:	6898      	ldr	r0, [r3, #8]
20003c34:	687b      	ldr	r3, [r7, #4]
20003c36:	6859      	ldr	r1, [r3, #4]
20003c38:	687b      	ldr	r3, [r7, #4]
20003c3a:	689a      	ldr	r2, [r3, #8]
20003c3c:	2301      	movs	r3, #1
20003c3e:	9300      	str	r3, [sp, #0]
20003c40:	2301      	movs	r3, #1
20003c42:	f7ff fdc8 	bl	200037d6 <draw_sprite>
}
20003c46:	46c0      	nop			; (mov r8, r8)
20003c48:	46bd      	mov	sp, r7
20003c4a:	b004      	add	sp, #16
20003c4c:	bd80      	pop	{r7, pc}

20003c4e <show_frame>:


void show_frame(int frame_length) {
20003c4e:	b580      	push	{r7, lr}
20003c50:	b082      	sub	sp, #8
20003c52:	af00      	add	r7, sp, #0
20003c54:	6078      	str	r0, [r7, #4]
	set_up_draw_buffers();
20003c56:	f7ff ff35 	bl	20003ac4 <set_up_draw_buffers>
	
	while(frame_length--) {
20003c5a:	e01b      	b.n	20003c94 <show_frame+0x46>
		graphic_draw_screen(draw_buffer_black_gray_light);
20003c5c:	4b13      	ldr	r3, [pc, #76]	; (20003cac <show_frame+0x5e>)
20003c5e:	0018      	movs	r0, r3
20003c60:	f7ff fd4e 	bl	20003700 <graphic_draw_screen>
		delay_milli(1);
20003c64:	2001      	movs	r0, #1
20003c66:	f7ff f95f 	bl	20002f28 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
20003c6a:	4b11      	ldr	r3, [pc, #68]	; (20003cb0 <show_frame+0x62>)
20003c6c:	0018      	movs	r0, r3
20003c6e:	f7ff fd47 	bl	20003700 <graphic_draw_screen>
		delay_milli(1);
20003c72:	2001      	movs	r0, #1
20003c74:	f7ff f958 	bl	20002f28 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black_gray);
20003c78:	4b0e      	ldr	r3, [pc, #56]	; (20003cb4 <show_frame+0x66>)
20003c7a:	0018      	movs	r0, r3
20003c7c:	f7ff fd40 	bl	20003700 <graphic_draw_screen>
		delay_milli(1);
20003c80:	2001      	movs	r0, #1
20003c82:	f7ff f951 	bl	20002f28 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
20003c86:	4b0a      	ldr	r3, [pc, #40]	; (20003cb0 <show_frame+0x62>)
20003c88:	0018      	movs	r0, r3
20003c8a:	f7ff fd39 	bl	20003700 <graphic_draw_screen>
		delay_milli(1);
20003c8e:	2001      	movs	r0, #1
20003c90:	f7ff f94a 	bl	20002f28 <delay_milli>
	while(frame_length--) {
20003c94:	687b      	ldr	r3, [r7, #4]
20003c96:	1e5a      	subs	r2, r3, #1
20003c98:	607a      	str	r2, [r7, #4]
20003c9a:	2b00      	cmp	r3, #0
20003c9c:	d1de      	bne.n	20003c5c <show_frame+0xe>
	}
	
	clear_all_backBuffers();	//Maybe we could be more effective by only clearing the necessary stuff,
20003c9e:	f7ff f97b 	bl	20002f98 <clear_all_backBuffers>
								//but let's keep it like this if it works.
20003ca2:	46c0      	nop			; (mov r8, r8)
20003ca4:	46bd      	mov	sp, r7
20003ca6:	b002      	add	sp, #8
20003ca8:	bd80      	pop	{r7, pc}
20003caa:	46c0      	nop			; (mov r8, r8)
20003cac:	20006770 	andcs	r6, r0, r0, ror r7
20003cb0:	20006370 	andcs	r6, r0, r0, ror r3
20003cb4:	20005770 	andcs	r5, r0, r0, ror r7

20003cb8 <load_image>:
#include "image.h"

void load_image( Image *image, sprite *blackImage, sprite *grayImage, sprite *lightImage ) {
20003cb8:	b580      	push	{r7, lr}
20003cba:	b084      	sub	sp, #16
20003cbc:	af00      	add	r7, sp, #0
20003cbe:	60f8      	str	r0, [r7, #12]
20003cc0:	60b9      	str	r1, [r7, #8]
20003cc2:	607a      	str	r2, [r7, #4]
20003cc4:	603b      	str	r3, [r7, #0]
	image->blackImage = blackImage;
20003cc6:	68fb      	ldr	r3, [r7, #12]
20003cc8:	68ba      	ldr	r2, [r7, #8]
20003cca:	601a      	str	r2, [r3, #0]
	image->grayImage = grayImage;
20003ccc:	68fb      	ldr	r3, [r7, #12]
20003cce:	687a      	ldr	r2, [r7, #4]
20003cd0:	605a      	str	r2, [r3, #4]
	image->lightImage = lightImage;
20003cd2:	68fb      	ldr	r3, [r7, #12]
20003cd4:	683a      	ldr	r2, [r7, #0]
20003cd6:	609a      	str	r2, [r3, #8]
}
20003cd8:	46c0      	nop			; (mov r8, r8)
20003cda:	46bd      	mov	sp, r7
20003cdc:	b004      	add	sp, #16
20003cde:	bd80      	pop	{r7, pc}

20003ce0 <load_sprite>:
#include "sprite.h"

void load_sprite(sprite* s, unsigned char* data, int width, int height)
{
20003ce0:	b580      	push	{r7, lr}
20003ce2:	b084      	sub	sp, #16
20003ce4:	af00      	add	r7, sp, #0
20003ce6:	60f8      	str	r0, [r7, #12]
20003ce8:	60b9      	str	r1, [r7, #8]
20003cea:	607a      	str	r2, [r7, #4]
20003cec:	603b      	str	r3, [r7, #0]
	s->width = width;
20003cee:	687a      	ldr	r2, [r7, #4]
20003cf0:	68fb      	ldr	r3, [r7, #12]
20003cf2:	601a      	str	r2, [r3, #0]
	s->height = height;
20003cf4:	683a      	ldr	r2, [r7, #0]
20003cf6:	68fb      	ldr	r3, [r7, #12]
20003cf8:	605a      	str	r2, [r3, #4]
	s->data = data;
20003cfa:	68fb      	ldr	r3, [r7, #12]
20003cfc:	68ba      	ldr	r2, [r7, #8]
20003cfe:	609a      	str	r2, [r3, #8]
}
20003d00:	46c0      	nop			; (mov r8, r8)
20003d02:	46bd      	mov	sp, r7
20003d04:	b004      	add	sp, #16
20003d06:	bd80      	pop	{r7, pc}

20003d08 <set_up_DIL>:
#include "gpio.h"

/** Sets up PE0-7 as inports and PE8-15 as outports. */
void set_up_DIL( void ) {
20003d08:	b580      	push	{r7, lr}
20003d0a:	af00      	add	r7, sp, #0
	GPIO_D.Moder = 0x55550000;
20003d0c:	4b02      	ldr	r3, [pc, #8]	; (20003d18 <set_up_DIL+0x10>)
20003d0e:	4a03      	ldr	r2, [pc, #12]	; (20003d1c <set_up_DIL+0x14>)
20003d10:	601a      	str	r2, [r3, #0]
}
20003d12:	46c0      	nop			; (mov r8, r8)
20003d14:	46bd      	mov	sp, r7
20003d16:	bd80      	pop	{r7, pc}
20003d18:	40020c00 	andmi	r0, r2, r0, lsl #24
20003d1c:	55550000 	ldrbpl	r0, [r5, #-0]

20003d20 <read_DIL>:

char read_DIL( void ) {
20003d20:	b580      	push	{r7, lr}
20003d22:	af00      	add	r7, sp, #0
	GPIO_D.odrHigh = GPIO_D.idrLow; //Show on bargraph
20003d24:	4b05      	ldr	r3, [pc, #20]	; (20003d3c <read_DIL+0x1c>)
20003d26:	4a05      	ldr	r2, [pc, #20]	; (20003d3c <read_DIL+0x1c>)
20003d28:	7c12      	ldrb	r2, [r2, #16]
20003d2a:	b2d2      	uxtb	r2, r2
20003d2c:	755a      	strb	r2, [r3, #21]
	return GPIO_D.idrLow;
20003d2e:	4b03      	ldr	r3, [pc, #12]	; (20003d3c <read_DIL+0x1c>)
20003d30:	7c1b      	ldrb	r3, [r3, #16]
20003d32:	b2db      	uxtb	r3, r3
}
20003d34:	0018      	movs	r0, r3
20003d36:	46bd      	mov	sp, r7
20003d38:	bd80      	pop	{r7, pc}
20003d3a:	46c0      	nop			; (mov r8, r8)
20003d3c:	40020c00 	andmi	r0, r2, r0, lsl #24

20003d40 <read_DIL_single>:


int read_DIL_single( int bit ) {
20003d40:	b590      	push	{r4, r7, lr}
20003d42:	b085      	sub	sp, #20
20003d44:	af00      	add	r7, sp, #0
20003d46:	6078      	str	r0, [r7, #4]
	char DIL = read_DIL();
20003d48:	230f      	movs	r3, #15
20003d4a:	18fc      	adds	r4, r7, r3
20003d4c:	f7ff ffe8 	bl	20003d20 <read_DIL>
20003d50:	0003      	movs	r3, r0
20003d52:	7023      	strb	r3, [r4, #0]
	if (DIL & (1<<bit)) {
20003d54:	230f      	movs	r3, #15
20003d56:	18fb      	adds	r3, r7, r3
20003d58:	781a      	ldrb	r2, [r3, #0]
20003d5a:	687b      	ldr	r3, [r7, #4]
20003d5c:	411a      	asrs	r2, r3
20003d5e:	0013      	movs	r3, r2
20003d60:	2201      	movs	r2, #1
20003d62:	4013      	ands	r3, r2
20003d64:	d001      	beq.n	20003d6a <read_DIL_single+0x2a>
		return 1;
20003d66:	2301      	movs	r3, #1
20003d68:	e000      	b.n	20003d6c <read_DIL_single+0x2c>
	} else {
		return 0;
20003d6a:	2300      	movs	r3, #0
	}
20003d6c:	0018      	movs	r0, r3
20003d6e:	46bd      	mov	sp, r7
20003d70:	b005      	add	sp, #20
20003d72:	bd90      	pop	{r4, r7, pc}

20003d74 <ascii_ctrl_bit_set>:
void ascii_write_data(unsigned char data);
unsigned char ascii_read_status(void);
unsigned char ascii_read_data(void);


void ascii_ctrl_bit_set(unsigned char x){
20003d74:	b580      	push	{r7, lr}
20003d76:	b084      	sub	sp, #16
20003d78:	af00      	add	r7, sp, #0
20003d7a:	0002      	movs	r2, r0
20003d7c:	1dfb      	adds	r3, r7, #7
20003d7e:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och ettstÃƒÂ¤ll de bitar som ÃƒÂ¤r 1 i x
	unsigned char c;
	c = *portOdrLow;
20003d80:	4a0c      	ldr	r2, [pc, #48]	; (20003db4 <ascii_ctrl_bit_set+0x40>)
20003d82:	230f      	movs	r3, #15
20003d84:	18fb      	adds	r3, r7, r3
20003d86:	7812      	ldrb	r2, [r2, #0]
20003d88:	701a      	strb	r2, [r3, #0]
	c |= (B_SELECT | x);
20003d8a:	1dfa      	adds	r2, r7, #7
20003d8c:	230f      	movs	r3, #15
20003d8e:	18fb      	adds	r3, r7, r3
20003d90:	7812      	ldrb	r2, [r2, #0]
20003d92:	781b      	ldrb	r3, [r3, #0]
20003d94:	4313      	orrs	r3, r2
20003d96:	b2da      	uxtb	r2, r3
20003d98:	230f      	movs	r3, #15
20003d9a:	18fb      	adds	r3, r7, r3
20003d9c:	2104      	movs	r1, #4
20003d9e:	430a      	orrs	r2, r1
20003da0:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20003da2:	4a04      	ldr	r2, [pc, #16]	; (20003db4 <ascii_ctrl_bit_set+0x40>)
20003da4:	230f      	movs	r3, #15
20003da6:	18fb      	adds	r3, r7, r3
20003da8:	781b      	ldrb	r3, [r3, #0]
20003daa:	7013      	strb	r3, [r2, #0]
}
20003dac:	46c0      	nop			; (mov r8, r8)
20003dae:	46bd      	mov	sp, r7
20003db0:	b004      	add	sp, #16
20003db2:	bd80      	pop	{r7, pc}
20003db4:	40021014 	andmi	r1, r2, r4, lsl r0

20003db8 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
20003db8:	b580      	push	{r7, lr}
20003dba:	b084      	sub	sp, #16
20003dbc:	af00      	add	r7, sp, #0
20003dbe:	0002      	movs	r2, r0
20003dc0:	1dfb      	adds	r3, r7, #7
20003dc2:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och nollstÃ¤ll de bitar som Ã¤r 1 i x
	unsigned char c;
	c = *portOdrLow;
20003dc4:	4a0f      	ldr	r2, [pc, #60]	; (20003e04 <ascii_ctrl_bit_clear+0x4c>)
20003dc6:	230f      	movs	r3, #15
20003dc8:	18fb      	adds	r3, r7, r3
20003dca:	7812      	ldrb	r2, [r2, #0]
20003dcc:	701a      	strb	r2, [r3, #0]
	c = (B_SELECT | c & ~x);
20003dce:	1dfb      	adds	r3, r7, #7
20003dd0:	781b      	ldrb	r3, [r3, #0]
20003dd2:	b25b      	sxtb	r3, r3
20003dd4:	43db      	mvns	r3, r3
20003dd6:	b25b      	sxtb	r3, r3
20003dd8:	220f      	movs	r2, #15
20003dda:	18ba      	adds	r2, r7, r2
20003ddc:	7812      	ldrb	r2, [r2, #0]
20003dde:	b252      	sxtb	r2, r2
20003de0:	4013      	ands	r3, r2
20003de2:	b25b      	sxtb	r3, r3
20003de4:	2204      	movs	r2, #4
20003de6:	4313      	orrs	r3, r2
20003de8:	b25a      	sxtb	r2, r3
20003dea:	230f      	movs	r3, #15
20003dec:	18fb      	adds	r3, r7, r3
20003dee:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20003df0:	4a04      	ldr	r2, [pc, #16]	; (20003e04 <ascii_ctrl_bit_clear+0x4c>)
20003df2:	230f      	movs	r3, #15
20003df4:	18fb      	adds	r3, r7, r3
20003df6:	781b      	ldrb	r3, [r3, #0]
20003df8:	7013      	strb	r3, [r2, #0]
}
20003dfa:	46c0      	nop			; (mov r8, r8)
20003dfc:	46bd      	mov	sp, r7
20003dfe:	b004      	add	sp, #16
20003e00:	bd80      	pop	{r7, pc}
20003e02:	46c0      	nop			; (mov r8, r8)
20003e04:	40021014 	andmi	r1, r2, r4, lsl r0

20003e08 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20003e08:	b580      	push	{r7, lr}
20003e0a:	b082      	sub	sp, #8
20003e0c:	af00      	add	r7, sp, #0
20003e0e:	0002      	movs	r2, r0
20003e10:	1dfb      	adds	r3, r7, #7
20003e12:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20003e14:	2001      	movs	r0, #1
20003e16:	f7ff ffcf 	bl	20003db8 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20003e1a:	2002      	movs	r0, #2
20003e1c:	f7ff ffcc 	bl	20003db8 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20003e20:	1dfb      	adds	r3, r7, #7
20003e22:	781b      	ldrb	r3, [r3, #0]
20003e24:	0018      	movs	r0, r3
20003e26:	f000 f86d 	bl	20003f04 <ascii_write_controller>
}
20003e2a:	46c0      	nop			; (mov r8, r8)
20003e2c:	46bd      	mov	sp, r7
20003e2e:	b002      	add	sp, #8
20003e30:	bd80      	pop	{r7, pc}

20003e32 <ascii_write_data>:

void ascii_write_data(unsigned char data){
20003e32:	b580      	push	{r7, lr}
20003e34:	b082      	sub	sp, #8
20003e36:	af00      	add	r7, sp, #0
20003e38:	0002      	movs	r2, r0
20003e3a:	1dfb      	adds	r3, r7, #7
20003e3c:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20003e3e:	2001      	movs	r0, #1
20003e40:	f7ff ff98 	bl	20003d74 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20003e44:	2002      	movs	r0, #2
20003e46:	f7ff ffb7 	bl	20003db8 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20003e4a:	1dfb      	adds	r3, r7, #7
20003e4c:	781b      	ldrb	r3, [r3, #0]
20003e4e:	0018      	movs	r0, r3
20003e50:	f000 f858 	bl	20003f04 <ascii_write_controller>
}
20003e54:	46c0      	nop			; (mov r8, r8)
20003e56:	46bd      	mov	sp, r7
20003e58:	b002      	add	sp, #8
20003e5a:	bd80      	pop	{r7, pc}

20003e5c <ascii_read_status>:

unsigned char ascii_read_status(void){
20003e5c:	b590      	push	{r4, r7, lr}
20003e5e:	b083      	sub	sp, #12
20003e60:	af00      	add	r7, sp, #0
	//sÃƒÂ¤tt Port E bit15-8 som ingÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20003e62:	4b11      	ldr	r3, [pc, #68]	; (20003ea8 <ascii_read_status+0x4c>)
20003e64:	4a10      	ldr	r2, [pc, #64]	; (20003ea8 <ascii_read_status+0x4c>)
20003e66:	6812      	ldr	r2, [r2, #0]
20003e68:	0412      	lsls	r2, r2, #16
20003e6a:	0c12      	lsrs	r2, r2, #16
20003e6c:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20003e6e:	2001      	movs	r0, #1
20003e70:	f7ff ffa2 	bl	20003db8 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
20003e74:	2002      	movs	r0, #2
20003e76:	f7ff ff7d 	bl	20003d74 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20003e7a:	1dfc      	adds	r4, r7, #7
20003e7c:	f000 f85a 	bl	20003f34 <ascii_read_controller>
20003e80:	0003      	movs	r3, r0
20003e82:	7023      	strb	r3, [r4, #0]
	//sÃƒÂ¤tt Port E bit15-8 som utgÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20003e84:	4b08      	ldr	r3, [pc, #32]	; (20003ea8 <ascii_read_status+0x4c>)
20003e86:	4a08      	ldr	r2, [pc, #32]	; (20003ea8 <ascii_read_status+0x4c>)
20003e88:	6812      	ldr	r2, [r2, #0]
20003e8a:	0412      	lsls	r2, r2, #16
20003e8c:	0c12      	lsrs	r2, r2, #16
20003e8e:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
20003e90:	4b05      	ldr	r3, [pc, #20]	; (20003ea8 <ascii_read_status+0x4c>)
20003e92:	4a05      	ldr	r2, [pc, #20]	; (20003ea8 <ascii_read_status+0x4c>)
20003e94:	6812      	ldr	r2, [r2, #0]
20003e96:	4905      	ldr	r1, [pc, #20]	; (20003eac <ascii_read_status+0x50>)
20003e98:	430a      	orrs	r2, r1
20003e9a:	601a      	str	r2, [r3, #0]
	return rv;
20003e9c:	1dfb      	adds	r3, r7, #7
20003e9e:	781b      	ldrb	r3, [r3, #0]
}
20003ea0:	0018      	movs	r0, r3
20003ea2:	46bd      	mov	sp, r7
20003ea4:	b003      	add	sp, #12
20003ea6:	bd90      	pop	{r4, r7, pc}
20003ea8:	40021000 	andmi	r1, r2, r0
20003eac:	55550000 	ldrbpl	r0, [r5, #-0]

20003eb0 <ascii_read_data>:

unsigned char ascii_read_data(void){
20003eb0:	b590      	push	{r4, r7, lr}
20003eb2:	b083      	sub	sp, #12
20003eb4:	af00      	add	r7, sp, #0
	//sÃƒÂ¤tt Port E bit15-8 som ingÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20003eb6:	4b11      	ldr	r3, [pc, #68]	; (20003efc <ascii_read_data+0x4c>)
20003eb8:	4a10      	ldr	r2, [pc, #64]	; (20003efc <ascii_read_data+0x4c>)
20003eba:	6812      	ldr	r2, [r2, #0]
20003ebc:	0412      	lsls	r2, r2, #16
20003ebe:	0c12      	lsrs	r2, r2, #16
20003ec0:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20003ec2:	2001      	movs	r0, #1
20003ec4:	f7ff ff56 	bl	20003d74 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20003ec8:	2002      	movs	r0, #2
20003eca:	f7ff ff53 	bl	20003d74 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20003ece:	1dfc      	adds	r4, r7, #7
20003ed0:	f000 f830 	bl	20003f34 <ascii_read_controller>
20003ed4:	0003      	movs	r3, r0
20003ed6:	7023      	strb	r3, [r4, #0]
	//sÃƒÂ¤tt Port E bit15-8 som utgÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20003ed8:	4b08      	ldr	r3, [pc, #32]	; (20003efc <ascii_read_data+0x4c>)
20003eda:	4a08      	ldr	r2, [pc, #32]	; (20003efc <ascii_read_data+0x4c>)
20003edc:	6812      	ldr	r2, [r2, #0]
20003ede:	0412      	lsls	r2, r2, #16
20003ee0:	0c12      	lsrs	r2, r2, #16
20003ee2:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
20003ee4:	4b05      	ldr	r3, [pc, #20]	; (20003efc <ascii_read_data+0x4c>)
20003ee6:	4a05      	ldr	r2, [pc, #20]	; (20003efc <ascii_read_data+0x4c>)
20003ee8:	6812      	ldr	r2, [r2, #0]
20003eea:	4905      	ldr	r1, [pc, #20]	; (20003f00 <ascii_read_data+0x50>)
20003eec:	430a      	orrs	r2, r1
20003eee:	601a      	str	r2, [r3, #0]
	return rv;
20003ef0:	1dfb      	adds	r3, r7, #7
20003ef2:	781b      	ldrb	r3, [r3, #0]
}
20003ef4:	0018      	movs	r0, r3
20003ef6:	46bd      	mov	sp, r7
20003ef8:	b003      	add	sp, #12
20003efa:	bd90      	pop	{r4, r7, pc}
20003efc:	40021000 	andmi	r1, r2, r0
20003f00:	55550000 	ldrbpl	r0, [r5, #-0]

20003f04 <ascii_write_controller>:

void ascii_write_controller(unsigned char c){
20003f04:	b580      	push	{r7, lr}
20003f06:	b082      	sub	sp, #8
20003f08:	af00      	add	r7, sp, #0
20003f0a:	0002      	movs	r2, r0
20003f0c:	1dfb      	adds	r3, r7, #7
20003f0e:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
20003f10:	2040      	movs	r0, #64	; 0x40
20003f12:	f7ff ff2f 	bl	20003d74 <ascii_ctrl_bit_set>
	*portOdrHigh = c;
20003f16:	4a06      	ldr	r2, [pc, #24]	; (20003f30 <ascii_write_controller+0x2c>)
20003f18:	1dfb      	adds	r3, r7, #7
20003f1a:	781b      	ldrb	r3, [r3, #0]
20003f1c:	7013      	strb	r3, [r2, #0]
	delay_250ns();
20003f1e:	f7fe ffa9 	bl	20002e74 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
20003f22:	2040      	movs	r0, #64	; 0x40
20003f24:	f7ff ff48 	bl	20003db8 <ascii_ctrl_bit_clear>
}
20003f28:	46c0      	nop			; (mov r8, r8)
20003f2a:	46bd      	mov	sp, r7
20003f2c:	b002      	add	sp, #8
20003f2e:	bd80      	pop	{r7, pc}
20003f30:	40021015 	andmi	r1, r2, r5, lsl r0

20003f34 <ascii_read_controller>:

unsigned char ascii_read_controller(void){
20003f34:	b580      	push	{r7, lr}
20003f36:	b082      	sub	sp, #8
20003f38:	af00      	add	r7, sp, #0
	unsigned char c;
	ascii_ctrl_bit_set(B_E);
20003f3a:	2040      	movs	r0, #64	; 0x40
20003f3c:	f7ff ff1a 	bl	20003d74 <ascii_ctrl_bit_set>
	delay_250ns();
20003f40:	f7fe ff98 	bl	20002e74 <delay_250ns>
	delay_250ns();
20003f44:	f7fe ff96 	bl	20002e74 <delay_250ns>
	c = *portIdrHigh;
20003f48:	4a06      	ldr	r2, [pc, #24]	; (20003f64 <ascii_read_controller+0x30>)
20003f4a:	1dfb      	adds	r3, r7, #7
20003f4c:	7812      	ldrb	r2, [r2, #0]
20003f4e:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20003f50:	2040      	movs	r0, #64	; 0x40
20003f52:	f7ff ff31 	bl	20003db8 <ascii_ctrl_bit_clear>
	return c;
20003f56:	1dfb      	adds	r3, r7, #7
20003f58:	781b      	ldrb	r3, [r3, #0]
}
20003f5a:	0018      	movs	r0, r3
20003f5c:	46bd      	mov	sp, r7
20003f5e:	b002      	add	sp, #8
20003f60:	bd80      	pop	{r7, pc}
20003f62:	46c0      	nop			; (mov r8, r8)
20003f64:	40021011 	andmi	r1, r2, r1, lsl r0

20003f68 <ascii_write_char>:

void ascii_write_char(unsigned char c){
20003f68:	b580      	push	{r7, lr}
20003f6a:	b082      	sub	sp, #8
20003f6c:	af00      	add	r7, sp, #0
20003f6e:	0002      	movs	r2, r0
20003f70:	1dfb      	adds	r3, r7, #7
20003f72:	701a      	strb	r2, [r3, #0]
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20003f74:	46c0      	nop			; (mov r8, r8)
20003f76:	f7ff ff71 	bl	20003e5c <ascii_read_status>
20003f7a:	0003      	movs	r3, r0
20003f7c:	001a      	movs	r2, r3
20003f7e:	2380      	movs	r3, #128	; 0x80
20003f80:	4013      	ands	r3, r2
20003f82:	2b80      	cmp	r3, #128	; 0x80
20003f84:	d0f7      	beq.n	20003f76 <ascii_write_char+0xe>
		delay_micro(8); //latenstid
20003f86:	2008      	movs	r0, #8
20003f88:	f7fe ffb8 	bl	20002efc <delay_micro>
		ascii_write_data(c);
20003f8c:	1dfb      	adds	r3, r7, #7
20003f8e:	781b      	ldrb	r3, [r3, #0]
20003f90:	0018      	movs	r0, r3
20003f92:	f7ff ff4e 	bl	20003e32 <ascii_write_data>
		delay_micro(50); //istÃƒÂ¤llet fÃƒÂ¶r 43us
20003f96:	2032      	movs	r0, #50	; 0x32
20003f98:	f7fe ffb0 	bl	20002efc <delay_micro>
}
20003f9c:	46c0      	nop			; (mov r8, r8)
20003f9e:	46bd      	mov	sp, r7
20003fa0:	b002      	add	sp, #8
20003fa2:	bd80      	pop	{r7, pc}

20003fa4 <ascii_goToXY>:

void ascii_goToXY(unsigned char row, unsigned char column){
20003fa4:	b580      	push	{r7, lr}
20003fa6:	b084      	sub	sp, #16
20003fa8:	af00      	add	r7, sp, #0
20003faa:	0002      	movs	r2, r0
20003fac:	1dfb      	adds	r3, r7, #7
20003fae:	701a      	strb	r2, [r3, #0]
20003fb0:	1dbb      	adds	r3, r7, #6
20003fb2:	1c0a      	adds	r2, r1, #0
20003fb4:	701a      	strb	r2, [r3, #0]
	unsigned char address = row-1;
20003fb6:	230f      	movs	r3, #15
20003fb8:	18fb      	adds	r3, r7, r3
20003fba:	1dfa      	adds	r2, r7, #7
20003fbc:	7812      	ldrb	r2, [r2, #0]
20003fbe:	3a01      	subs	r2, #1
20003fc0:	701a      	strb	r2, [r3, #0]
	if(column == 2){
20003fc2:	1dbb      	adds	r3, r7, #6
20003fc4:	781b      	ldrb	r3, [r3, #0]
20003fc6:	2b02      	cmp	r3, #2
20003fc8:	d106      	bne.n	20003fd8 <ascii_goToXY+0x34>
		address += 0x40;
20003fca:	230f      	movs	r3, #15
20003fcc:	18fb      	adds	r3, r7, r3
20003fce:	220f      	movs	r2, #15
20003fd0:	18ba      	adds	r2, r7, r2
20003fd2:	7812      	ldrb	r2, [r2, #0]
20003fd4:	3240      	adds	r2, #64	; 0x40
20003fd6:	701a      	strb	r2, [r3, #0]
	}
	ascii_write_cmd(0x80 | address);
20003fd8:	230f      	movs	r3, #15
20003fda:	18fb      	adds	r3, r7, r3
20003fdc:	781b      	ldrb	r3, [r3, #0]
20003fde:	2280      	movs	r2, #128	; 0x80
20003fe0:	4252      	negs	r2, r2
20003fe2:	4313      	orrs	r3, r2
20003fe4:	b2db      	uxtb	r3, r3
20003fe6:	0018      	movs	r0, r3
20003fe8:	f7ff ff0e 	bl	20003e08 <ascii_write_cmd>
}
20003fec:	46c0      	nop			; (mov r8, r8)
20003fee:	46bd      	mov	sp, r7
20003ff0:	b004      	add	sp, #16
20003ff2:	bd80      	pop	{r7, pc}

20003ff4 <ascii_init>:

void ascii_init(void){
20003ff4:	b580      	push	{r7, lr}
20003ff6:	af00      	add	r7, sp, #0
	//initiera displayen:
		while((ascii_read_status() & 0x80) == 0x80){} //VÃ¤nta tills displayed Ã¤r redo
20003ff8:	46c0      	nop			; (mov r8, r8)
20003ffa:	f7ff ff2f 	bl	20003e5c <ascii_read_status>
20003ffe:	0003      	movs	r3, r0
20004000:	001a      	movs	r2, r3
20004002:	2380      	movs	r3, #128	; 0x80
20004004:	4013      	ands	r3, r2
20004006:	2b80      	cmp	r3, #128	; 0x80
20004008:	d0f7      	beq.n	20003ffa <ascii_init+0x6>
		delay_micro(20); //latenstid 
2000400a:	2014      	movs	r0, #20
2000400c:	f7fe ff76 	bl	20002efc <delay_micro>
		ascii_write_cmd(0x38); //Function set (39us), 000011NFXX, N = antal rader = 2, F = -->0=5x8<--, 1=5x11
20004010:	2038      	movs	r0, #56	; 0x38
20004012:	f7ff fef9 	bl	20003e08 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20004016:	2064      	movs	r0, #100	; 0x64
20004018:	f7fe ff70 	bl	20002efc <delay_micro>
		
	// clear display
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
2000401c:	46c0      	nop			; (mov r8, r8)
2000401e:	f7ff ff1d 	bl	20003e5c <ascii_read_status>
20004022:	0003      	movs	r3, r0
20004024:	001a      	movs	r2, r3
20004026:	2380      	movs	r3, #128	; 0x80
20004028:	4013      	ands	r3, r2
2000402a:	2b80      	cmp	r3, #128	; 0x80
2000402c:	d0f7      	beq.n	2000401e <ascii_init+0x2a>
		delay_micro(20); //latenstid
2000402e:	2014      	movs	r0, #20
20004030:	f7fe ff64 	bl	20002efc <delay_micro>
		ascii_write_cmd(0x01); 
20004034:	2001      	movs	r0, #1
20004036:	f7ff fee7 	bl	20003e08 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
2000403a:	2064      	movs	r0, #100	; 0x64
2000403c:	f7fe ff5e 	bl	20002efc <delay_micro>

	//display control:
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20004040:	46c0      	nop			; (mov r8, r8)
20004042:	f7ff ff0b 	bl	20003e5c <ascii_read_status>
20004046:	0003      	movs	r3, r0
20004048:	001a      	movs	r2, r3
2000404a:	2380      	movs	r3, #128	; 0x80
2000404c:	4013      	ands	r3, r2
2000404e:	2b80      	cmp	r3, #128	; 0x80
20004050:	d0f7      	beq.n	20004042 <ascii_init+0x4e>
		delay_micro(20); //latenstid
20004052:	2014      	movs	r0, #20
20004054:	f7fe ff52 	bl	20002efc <delay_micro>
		ascii_write_cmd(0x0C); //000001 + XXX. X:ena = 0:av / 1:pÃƒÂ¥ -  SkÃƒÂ¤rm/MarkÃƒÂ¶r/BlinkaMarkÃƒÂ¶ren
20004058:	200c      	movs	r0, #12
2000405a:	f7ff fed5 	bl	20003e08 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
2000405e:	2064      	movs	r0, #100	; 0x64
20004060:	f7fe ff4c 	bl	20002efc <delay_micro>
		
	// entry mode set
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20004064:	46c0      	nop			; (mov r8, r8)
20004066:	f7ff fef9 	bl	20003e5c <ascii_read_status>
2000406a:	0003      	movs	r3, r0
2000406c:	001a      	movs	r2, r3
2000406e:	2380      	movs	r3, #128	; 0x80
20004070:	4013      	ands	r3, r2
20004072:	2b80      	cmp	r3, #128	; 0x80
20004074:	d0f7      	beq.n	20004066 <ascii_init+0x72>
		delay_micro(20); //latenstid
20004076:	2014      	movs	r0, #20
20004078:	f7fe ff40 	bl	20002efc <delay_micro>
		ascii_write_cmd(0x06); //00000001 + XY. X=0: markÃƒÂ¶ren vÃƒÂ¤nst. || X=1: marÃƒÂ¶kren hÃƒÂ¶g. - Y=0: skift av || Y=1: skift pÃƒÂ¥
2000407c:	2006      	movs	r0, #6
2000407e:	f7ff fec3 	bl	20003e08 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20004082:	2064      	movs	r0, #100	; 0x64
20004084:	f7fe ff3a 	bl	20002efc <delay_micro>
		
		
}
20004088:	46c0      	nop			; (mov r8, r8)
2000408a:	46bd      	mov	sp, r7
2000408c:	bd80      	pop	{r7, pc}

2000408e <init_application>:

void init_application(void){
2000408e:	b580      	push	{r7, lr}
20004090:	af00      	add	r7, sp, #0
	#ifdef USBDM
		*((unsigned long *) 0x40023830) = 0x18; //startar klockor pÃ¥ port D och E
		//__asm volatile ("LDR R0, =0x08000209\n BLX R0 \n"); //initiera PLL
	#endif
	//"initierar Port E med anvÃƒÂ¤ndning med LCD-modulen, dvs. sÃƒÂ¥vÃƒÂ¤l port E0-7 som E8-15 sÃƒÂ¤tts till utgÃƒÂ¥ngar
	* portModer = 0x55555555;
20004092:	4b03      	ldr	r3, [pc, #12]	; (200040a0 <init_application+0x12>)
20004094:	4a03      	ldr	r2, [pc, #12]	; (200040a4 <init_application+0x16>)
20004096:	601a      	str	r2, [r3, #0]
}
20004098:	46c0      	nop			; (mov r8, r8)
2000409a:	46bd      	mov	sp, r7
2000409c:	bd80      	pop	{r7, pc}
2000409e:	46c0      	nop			; (mov r8, r8)
200040a0:	40021000 	andmi	r1, r2, r0
200040a4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200040a8 <set_up_ascii>:

void set_up_ascii( void ) {
200040a8:	b580      	push	{r7, lr}
200040aa:	af00      	add	r7, sp, #0
	init_application();
200040ac:	f7ff ffef 	bl	2000408e <init_application>
	ascii_init();
200040b0:	f7ff ffa0 	bl	20003ff4 <ascii_init>
}
200040b4:	46c0      	nop			; (mov r8, r8)
200040b6:	46bd      	mov	sp, r7
200040b8:	bd80      	pop	{r7, pc}

200040ba <clear_ascii>:

void clear_ascii( void ) {
200040ba:	b590      	push	{r4, r7, lr}
200040bc:	b089      	sub	sp, #36	; 0x24
200040be:	af00      	add	r7, sp, #0
	char *s;
	char clear[] = "                    ";
200040c0:	1d3b      	adds	r3, r7, #4
200040c2:	4a17      	ldr	r2, [pc, #92]	; (20004120 <clear_ascii+0x66>)
200040c4:	ca13      	ldmia	r2!, {r0, r1, r4}
200040c6:	c313      	stmia	r3!, {r0, r1, r4}
200040c8:	ca03      	ldmia	r2!, {r0, r1}
200040ca:	c303      	stmia	r3!, {r0, r1}
200040cc:	7812      	ldrb	r2, [r2, #0]
200040ce:	701a      	strb	r2, [r3, #0]
	
	s = clear;
200040d0:	1d3b      	adds	r3, r7, #4
200040d2:	61fb      	str	r3, [r7, #28]
	ascii_goToXY(1,1);
200040d4:	2101      	movs	r1, #1
200040d6:	2001      	movs	r0, #1
200040d8:	f7ff ff64 	bl	20003fa4 <ascii_goToXY>
	while(*s){
200040dc:	e006      	b.n	200040ec <clear_ascii+0x32>
		ascii_write_char(*s++);
200040de:	69fb      	ldr	r3, [r7, #28]
200040e0:	1c5a      	adds	r2, r3, #1
200040e2:	61fa      	str	r2, [r7, #28]
200040e4:	781b      	ldrb	r3, [r3, #0]
200040e6:	0018      	movs	r0, r3
200040e8:	f7ff ff3e 	bl	20003f68 <ascii_write_char>
	while(*s){
200040ec:	69fb      	ldr	r3, [r7, #28]
200040ee:	781b      	ldrb	r3, [r3, #0]
200040f0:	2b00      	cmp	r3, #0
200040f2:	d1f4      	bne.n	200040de <clear_ascii+0x24>
	}
	s = clear;
200040f4:	1d3b      	adds	r3, r7, #4
200040f6:	61fb      	str	r3, [r7, #28]
	ascii_goToXY(1,2);
200040f8:	2102      	movs	r1, #2
200040fa:	2001      	movs	r0, #1
200040fc:	f7ff ff52 	bl	20003fa4 <ascii_goToXY>
	while(*s){
20004100:	e006      	b.n	20004110 <clear_ascii+0x56>
		ascii_write_char(*s++);
20004102:	69fb      	ldr	r3, [r7, #28]
20004104:	1c5a      	adds	r2, r3, #1
20004106:	61fa      	str	r2, [r7, #28]
20004108:	781b      	ldrb	r3, [r3, #0]
2000410a:	0018      	movs	r0, r3
2000410c:	f7ff ff2c 	bl	20003f68 <ascii_write_char>
	while(*s){
20004110:	69fb      	ldr	r3, [r7, #28]
20004112:	781b      	ldrb	r3, [r3, #0]
20004114:	2b00      	cmp	r3, #0
20004116:	d1f4      	bne.n	20004102 <clear_ascii+0x48>
	}
}
20004118:	46c0      	nop			; (mov r8, r8)
2000411a:	46bd      	mov	sp, r7
2000411c:	b009      	add	sp, #36	; 0x24
2000411e:	bd90      	pop	{r4, r7, pc}
20004120:	2000e96c 	andcs	lr, r0, ip, ror #18

20004124 <ascii_write>:

void ascii_write(char *row1, char *row2) {
20004124:	b580      	push	{r7, lr}
20004126:	b082      	sub	sp, #8
20004128:	af00      	add	r7, sp, #0
2000412a:	6078      	str	r0, [r7, #4]
2000412c:	6039      	str	r1, [r7, #0]
	clear_ascii();
2000412e:	f7ff ffc4 	bl	200040ba <clear_ascii>
	
	ascii_goToXY(1,1);
20004132:	2101      	movs	r1, #1
20004134:	2001      	movs	r0, #1
20004136:	f7ff ff35 	bl	20003fa4 <ascii_goToXY>
	while(*row1){
2000413a:	e006      	b.n	2000414a <ascii_write+0x26>
		ascii_write_char(*row1++);
2000413c:	687b      	ldr	r3, [r7, #4]
2000413e:	1c5a      	adds	r2, r3, #1
20004140:	607a      	str	r2, [r7, #4]
20004142:	781b      	ldrb	r3, [r3, #0]
20004144:	0018      	movs	r0, r3
20004146:	f7ff ff0f 	bl	20003f68 <ascii_write_char>
	while(*row1){
2000414a:	687b      	ldr	r3, [r7, #4]
2000414c:	781b      	ldrb	r3, [r3, #0]
2000414e:	2b00      	cmp	r3, #0
20004150:	d1f4      	bne.n	2000413c <ascii_write+0x18>
	}	
	ascii_goToXY(1,2);
20004152:	2102      	movs	r1, #2
20004154:	2001      	movs	r0, #1
20004156:	f7ff ff25 	bl	20003fa4 <ascii_goToXY>
	while(*row2){
2000415a:	e006      	b.n	2000416a <ascii_write+0x46>
		ascii_write_char(*row2++);
2000415c:	683b      	ldr	r3, [r7, #0]
2000415e:	1c5a      	adds	r2, r3, #1
20004160:	603a      	str	r2, [r7, #0]
20004162:	781b      	ldrb	r3, [r3, #0]
20004164:	0018      	movs	r0, r3
20004166:	f7ff feff 	bl	20003f68 <ascii_write_char>
	while(*row2){
2000416a:	683b      	ldr	r3, [r7, #0]
2000416c:	781b      	ldrb	r3, [r3, #0]
2000416e:	2b00      	cmp	r3, #0
20004170:	d1f4      	bne.n	2000415c <ascii_write+0x38>
	}
	
	ascii_goToXY(21,1);
20004172:	2101      	movs	r1, #1
20004174:	2015      	movs	r0, #21
20004176:	f7ff ff15 	bl	20003fa4 <ascii_goToXY>
}
2000417a:	46c0      	nop			; (mov r8, r8)
2000417c:	46bd      	mov	sp, r7
2000417e:	b002      	add	sp, #8
20004180:	bd80      	pop	{r7, pc}

20004182 <ascii_write_part>:

void ascii_write_part(char *row1, char *row2, int limit1, int limit2) {
20004182:	b580      	push	{r7, lr}
20004184:	b086      	sub	sp, #24
20004186:	af00      	add	r7, sp, #0
20004188:	60f8      	str	r0, [r7, #12]
2000418a:	60b9      	str	r1, [r7, #8]
2000418c:	607a      	str	r2, [r7, #4]
2000418e:	603b      	str	r3, [r7, #0]
	clear_ascii();
20004190:	f7ff ff93 	bl	200040ba <clear_ascii>
	
	ascii_goToXY(1,1);
20004194:	2101      	movs	r1, #1
20004196:	2001      	movs	r0, #1
20004198:	f7ff ff04 	bl	20003fa4 <ascii_goToXY>
	int i = 0;
2000419c:	2300      	movs	r3, #0
2000419e:	617b      	str	r3, [r7, #20]
	if(limit1 > 0) {
200041a0:	687b      	ldr	r3, [r7, #4]
200041a2:	2b00      	cmp	r3, #0
200041a4:	dd11      	ble.n	200041ca <ascii_write_part+0x48>
		while(*row1 && (i++ < limit1)){
200041a6:	e006      	b.n	200041b6 <ascii_write_part+0x34>
			ascii_write_char(*row1++);
200041a8:	68fb      	ldr	r3, [r7, #12]
200041aa:	1c5a      	adds	r2, r3, #1
200041ac:	60fa      	str	r2, [r7, #12]
200041ae:	781b      	ldrb	r3, [r3, #0]
200041b0:	0018      	movs	r0, r3
200041b2:	f7ff fed9 	bl	20003f68 <ascii_write_char>
		while(*row1 && (i++ < limit1)){
200041b6:	68fb      	ldr	r3, [r7, #12]
200041b8:	781b      	ldrb	r3, [r3, #0]
200041ba:	2b00      	cmp	r3, #0
200041bc:	d005      	beq.n	200041ca <ascii_write_part+0x48>
200041be:	697b      	ldr	r3, [r7, #20]
200041c0:	1c5a      	adds	r2, r3, #1
200041c2:	617a      	str	r2, [r7, #20]
200041c4:	687a      	ldr	r2, [r7, #4]
200041c6:	4293      	cmp	r3, r2
200041c8:	dbee      	blt.n	200041a8 <ascii_write_part+0x26>
		}			
	}

	ascii_goToXY(1,2);
200041ca:	2102      	movs	r1, #2
200041cc:	2001      	movs	r0, #1
200041ce:	f7ff fee9 	bl	20003fa4 <ascii_goToXY>
	i = 0;
200041d2:	2300      	movs	r3, #0
200041d4:	617b      	str	r3, [r7, #20]
	if(limit2 > 0) {
200041d6:	683b      	ldr	r3, [r7, #0]
200041d8:	2b00      	cmp	r3, #0
200041da:	dd11      	ble.n	20004200 <ascii_write_part+0x7e>
		while(*row2 && (i++ < limit2)){
200041dc:	e006      	b.n	200041ec <ascii_write_part+0x6a>
			ascii_write_char(*row2++);
200041de:	68bb      	ldr	r3, [r7, #8]
200041e0:	1c5a      	adds	r2, r3, #1
200041e2:	60ba      	str	r2, [r7, #8]
200041e4:	781b      	ldrb	r3, [r3, #0]
200041e6:	0018      	movs	r0, r3
200041e8:	f7ff febe 	bl	20003f68 <ascii_write_char>
		while(*row2 && (i++ < limit2)){
200041ec:	68bb      	ldr	r3, [r7, #8]
200041ee:	781b      	ldrb	r3, [r3, #0]
200041f0:	2b00      	cmp	r3, #0
200041f2:	d005      	beq.n	20004200 <ascii_write_part+0x7e>
200041f4:	697b      	ldr	r3, [r7, #20]
200041f6:	1c5a      	adds	r2, r3, #1
200041f8:	617a      	str	r2, [r7, #20]
200041fa:	683a      	ldr	r2, [r7, #0]
200041fc:	4293      	cmp	r3, r2
200041fe:	dbee      	blt.n	200041de <ascii_write_part+0x5c>
		}
	}
	
	ascii_goToXY(21,1);
20004200:	2101      	movs	r1, #1
20004202:	2015      	movs	r0, #21
20004204:	f7ff fece 	bl	20003fa4 <ascii_goToXY>
}
20004208:	46c0      	nop			; (mov r8, r8)
2000420a:	46bd      	mov	sp, r7
2000420c:	b006      	add	sp, #24
2000420e:	bd80      	pop	{r7, pc}

20004210 <ascii_test>:



void ascii_test(void) {
20004210:	b590      	push	{r4, r7, lr}
20004212:	b08b      	sub	sp, #44	; 0x2c
20004214:	af00      	add	r7, sp, #0
	char *s;
	char test1[] = "Alfanumerisk";
20004216:	2314      	movs	r3, #20
20004218:	18fb      	adds	r3, r7, r3
2000421a:	4a1c      	ldr	r2, [pc, #112]	; (2000428c <ascii_test+0x7c>)
2000421c:	ca13      	ldmia	r2!, {r0, r1, r4}
2000421e:	c313      	stmia	r3!, {r0, r1, r4}
20004220:	7812      	ldrb	r2, [r2, #0]
20004222:	701a      	strb	r2, [r3, #0]
	char test2[] = "hardåäöare suger";
20004224:	003b      	movs	r3, r7
20004226:	4a1a      	ldr	r2, [pc, #104]	; (20004290 <ascii_test+0x80>)
20004228:	ca13      	ldmia	r2!, {r0, r1, r4}
2000422a:	c313      	stmia	r3!, {r0, r1, r4}
2000422c:	ca03      	ldmia	r2!, {r0, r1}
2000422e:	c303      	stmia	r3!, {r0, r1}
	
	init_application();
20004230:	f7ff ff2d 	bl	2000408e <init_application>
	ascii_init();
20004234:	f7ff fede 	bl	20003ff4 <ascii_init>
	ascii_goToXY(1,1);
20004238:	2101      	movs	r1, #1
2000423a:	2001      	movs	r0, #1
2000423c:	f7ff feb2 	bl	20003fa4 <ascii_goToXY>
	s = test1;
20004240:	2314      	movs	r3, #20
20004242:	18fb      	adds	r3, r7, r3
20004244:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
20004246:	e006      	b.n	20004256 <ascii_test+0x46>
		ascii_write_char(*s++);
20004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000424a:	1c5a      	adds	r2, r3, #1
2000424c:	627a      	str	r2, [r7, #36]	; 0x24
2000424e:	781b      	ldrb	r3, [r3, #0]
20004250:	0018      	movs	r0, r3
20004252:	f7ff fe89 	bl	20003f68 <ascii_write_char>
	while(*s){
20004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20004258:	781b      	ldrb	r3, [r3, #0]
2000425a:	2b00      	cmp	r3, #0
2000425c:	d1f4      	bne.n	20004248 <ascii_test+0x38>
	}
	ascii_goToXY(1,2);
2000425e:	2102      	movs	r1, #2
20004260:	2001      	movs	r0, #1
20004262:	f7ff fe9f 	bl	20003fa4 <ascii_goToXY>
	s = test2;
20004266:	003b      	movs	r3, r7
20004268:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
2000426a:	e006      	b.n	2000427a <ascii_test+0x6a>
		ascii_write_char(*s++);
2000426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000426e:	1c5a      	adds	r2, r3, #1
20004270:	627a      	str	r2, [r7, #36]	; 0x24
20004272:	781b      	ldrb	r3, [r3, #0]
20004274:	0018      	movs	r0, r3
20004276:	f7ff fe77 	bl	20003f68 <ascii_write_char>
	while(*s){
2000427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000427c:	781b      	ldrb	r3, [r3, #0]
2000427e:	2b00      	cmp	r3, #0
20004280:	d1f4      	bne.n	2000426c <ascii_test+0x5c>
	}
	return 0;
20004282:	46c0      	nop			; (mov r8, r8)
20004284:	46bd      	mov	sp, r7
20004286:	b00b      	add	sp, #44	; 0x2c
20004288:	bd90      	pop	{r4, r7, pc}
2000428a:	46c0      	nop			; (mov r8, r8)
2000428c:	2000e984 	andcs	lr, r0, r4, lsl #19
20004290:	2000e994 	mulcs	r0, r4, r9

20004294 <display>:
#include "slow_text.h"
#include "ascii_display.h"

void display(SlowText *this, int length_of_row1) {
20004294:	b580      	push	{r7, lr}
20004296:	b084      	sub	sp, #16
20004298:	af00      	add	r7, sp, #0
2000429a:	6078      	str	r0, [r7, #4]
2000429c:	6039      	str	r1, [r7, #0]
	int limit1 = this->counter / this->speed;
2000429e:	687b      	ldr	r3, [r7, #4]
200042a0:	689a      	ldr	r2, [r3, #8]
200042a2:	687b      	ldr	r3, [r7, #4]
200042a4:	68db      	ldr	r3, [r3, #12]
200042a6:	0019      	movs	r1, r3
200042a8:	0010      	movs	r0, r2
200042aa:	f000 f999 	bl	200045e0 <__divsi3>
200042ae:	0003      	movs	r3, r0
200042b0:	60fb      	str	r3, [r7, #12]
	int limit2 = this->counter / this->speed - length_of_row1;
200042b2:	687b      	ldr	r3, [r7, #4]
200042b4:	689a      	ldr	r2, [r3, #8]
200042b6:	687b      	ldr	r3, [r7, #4]
200042b8:	68db      	ldr	r3, [r3, #12]
200042ba:	0019      	movs	r1, r3
200042bc:	0010      	movs	r0, r2
200042be:	f000 f98f 	bl	200045e0 <__divsi3>
200042c2:	0003      	movs	r3, r0
200042c4:	001a      	movs	r2, r3
200042c6:	683b      	ldr	r3, [r7, #0]
200042c8:	1ad3      	subs	r3, r2, r3
200042ca:	60bb      	str	r3, [r7, #8]
	ascii_write_part(this->row1, this->row2, limit1, limit2);
200042cc:	687b      	ldr	r3, [r7, #4]
200042ce:	6818      	ldr	r0, [r3, #0]
200042d0:	687b      	ldr	r3, [r7, #4]
200042d2:	6859      	ldr	r1, [r3, #4]
200042d4:	68bb      	ldr	r3, [r7, #8]
200042d6:	68fa      	ldr	r2, [r7, #12]
200042d8:	f7ff ff53 	bl	20004182 <ascii_write_part>
	
	this->counter++;
200042dc:	687b      	ldr	r3, [r7, #4]
200042de:	689b      	ldr	r3, [r3, #8]
200042e0:	1c5a      	adds	r2, r3, #1
200042e2:	687b      	ldr	r3, [r7, #4]
200042e4:	609a      	str	r2, [r3, #8]
}
200042e6:	46c0      	nop			; (mov r8, r8)
200042e8:	46bd      	mov	sp, r7
200042ea:	b004      	add	sp, #16
200042ec:	bd80      	pop	{r7, pc}

200042ee <init_slow_text>:

void init_slow_text(SlowText *obj, char *row1, char *row2, int speed) {
200042ee:	b580      	push	{r7, lr}
200042f0:	b084      	sub	sp, #16
200042f2:	af00      	add	r7, sp, #0
200042f4:	60f8      	str	r0, [r7, #12]
200042f6:	60b9      	str	r1, [r7, #8]
200042f8:	607a      	str	r2, [r7, #4]
200042fa:	603b      	str	r3, [r7, #0]
	obj->row1 = row1;
200042fc:	68fb      	ldr	r3, [r7, #12]
200042fe:	68ba      	ldr	r2, [r7, #8]
20004300:	601a      	str	r2, [r3, #0]
	obj->row2 = row2;
20004302:	68fb      	ldr	r3, [r7, #12]
20004304:	687a      	ldr	r2, [r7, #4]
20004306:	605a      	str	r2, [r3, #4]
	obj->speed = speed;
20004308:	68fb      	ldr	r3, [r7, #12]
2000430a:	683a      	ldr	r2, [r7, #0]
2000430c:	60da      	str	r2, [r3, #12]
	obj->counter = 0;
2000430e:	68fb      	ldr	r3, [r7, #12]
20004310:	2200      	movs	r2, #0
20004312:	609a      	str	r2, [r3, #8]
	obj->display = display;
20004314:	68fb      	ldr	r3, [r7, #12]
20004316:	4a03      	ldr	r2, [pc, #12]	; (20004324 <init_slow_text+0x36>)
20004318:	611a      	str	r2, [r3, #16]
2000431a:	46c0      	nop			; (mov r8, r8)
2000431c:	46bd      	mov	sp, r7
2000431e:	b004      	add	sp, #16
20004320:	bd80      	pop	{r7, pc}
20004322:	46c0      	nop			; (mov r8, r8)
20004324:	20004295 	mulcs	r0, r5, r2

20004328 <initSprites>:


GameObject indoorsObj;
Image indoorsImage;
Image indoorsImages[1];
static void initSprites( void ) {	
20004328:	b580      	push	{r7, lr}
2000432a:	b084      	sub	sp, #16
2000432c:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempIndoorsLight;
2000432e:	4b12      	ldr	r3, [pc, #72]	; (20004378 <initSprites+0x50>)
20004330:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer11, indoors_light_bits, indoors_black_width, indoors_black_height);
20004332:	4912      	ldr	r1, [pc, #72]	; (2000437c <initSprites+0x54>)
20004334:	68f8      	ldr	r0, [r7, #12]
20004336:	2340      	movs	r3, #64	; 0x40
20004338:	2280      	movs	r2, #128	; 0x80
2000433a:	f7ff fcd1 	bl	20003ce0 <load_sprite>
	indoorsLight = pointer11;
2000433e:	4b10      	ldr	r3, [pc, #64]	; (20004380 <initSprites+0x58>)
20004340:	68fa      	ldr	r2, [r7, #12]
20004342:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempIndoorsGray;
20004344:	4b0f      	ldr	r3, [pc, #60]	; (20004384 <initSprites+0x5c>)
20004346:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer12, indoors_gray_bits, indoors_black_width, indoors_black_height);
20004348:	490f      	ldr	r1, [pc, #60]	; (20004388 <initSprites+0x60>)
2000434a:	68b8      	ldr	r0, [r7, #8]
2000434c:	2340      	movs	r3, #64	; 0x40
2000434e:	2280      	movs	r2, #128	; 0x80
20004350:	f7ff fcc6 	bl	20003ce0 <load_sprite>
	indoorsGray = pointer12;
20004354:	4b0d      	ldr	r3, [pc, #52]	; (2000438c <initSprites+0x64>)
20004356:	68ba      	ldr	r2, [r7, #8]
20004358:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempIndoorsBlack;
2000435a:	4b0d      	ldr	r3, [pc, #52]	; (20004390 <initSprites+0x68>)
2000435c:	607b      	str	r3, [r7, #4]
	load_sprite(pointer13, indoors_black_bits, indoors_black_width, indoors_black_height);
2000435e:	490d      	ldr	r1, [pc, #52]	; (20004394 <initSprites+0x6c>)
20004360:	6878      	ldr	r0, [r7, #4]
20004362:	2340      	movs	r3, #64	; 0x40
20004364:	2280      	movs	r2, #128	; 0x80
20004366:	f7ff fcbb 	bl	20003ce0 <load_sprite>
	indoorsBlack = pointer13;	
2000436a:	4b0b      	ldr	r3, [pc, #44]	; (20004398 <initSprites+0x70>)
2000436c:	687a      	ldr	r2, [r7, #4]
2000436e:	601a      	str	r2, [r3, #0]
	
}
20004370:	46c0      	nop			; (mov r8, r8)
20004372:	46bd      	mov	sp, r7
20004374:	b004      	add	sp, #16
20004376:	bd80      	pop	{r7, pc}
20004378:	20006f7c 	andcs	r6, r0, ip, ror pc
2000437c:	2000d648 	andcs	sp, r0, r8, asr #12
20004380:	20006fd8 	ldrdcs	r6, [r0], -r8
20004384:	20006f70 	andcs	r6, r0, r0, ror pc
20004388:	2000d248 	andcs	sp, r0, r8, asr #4
2000438c:	20006f94 	mulcs	r0, r4, pc	; <UNPREDICTABLE>
20004390:	20006f88 	andcs	r6, r0, r8, lsl #31
20004394:	2000ce48 	andcs	ip, r0, r8, asr #28
20004398:	20006fc8 	andcs	r6, r0, r8, asr #31

2000439c <init_indoors>:
	
void init_indoors( GameObject *indoorsObj ) {
2000439c:	b590      	push	{r4, r7, lr}
2000439e:	b083      	sub	sp, #12
200043a0:	af00      	add	r7, sp, #0
200043a2:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
200043a4:	4b14      	ldr	r3, [pc, #80]	; (200043f8 <init_indoors+0x5c>)
200043a6:	681b      	ldr	r3, [r3, #0]
200043a8:	2b00      	cmp	r3, #0
200043aa:	d011      	beq.n	200043d0 <init_indoors+0x34>
		initSprites();
200043ac:	f7ff ffbc 	bl	20004328 <initSprites>
		firstTime = 0;			
200043b0:	4b11      	ldr	r3, [pc, #68]	; (200043f8 <init_indoors+0x5c>)
200043b2:	2200      	movs	r2, #0
200043b4:	601a      	str	r2, [r3, #0]

		indoorsImages[0] = indoorsImage;
200043b6:	4b11      	ldr	r3, [pc, #68]	; (200043fc <init_indoors+0x60>)
200043b8:	4a11      	ldr	r2, [pc, #68]	; (20004400 <init_indoors+0x64>)
200043ba:	ca13      	ldmia	r2!, {r0, r1, r4}
200043bc:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&indoorsImages[0], indoorsBlack, indoorsGray, indoorsLight);
200043be:	4b11      	ldr	r3, [pc, #68]	; (20004404 <init_indoors+0x68>)
200043c0:	6819      	ldr	r1, [r3, #0]
200043c2:	4b11      	ldr	r3, [pc, #68]	; (20004408 <init_indoors+0x6c>)
200043c4:	681a      	ldr	r2, [r3, #0]
200043c6:	4b11      	ldr	r3, [pc, #68]	; (2000440c <init_indoors+0x70>)
200043c8:	681b      	ldr	r3, [r3, #0]
200043ca:	480c      	ldr	r0, [pc, #48]	; (200043fc <init_indoors+0x60>)
200043cc:	f7ff fc74 	bl	20003cb8 <load_image>
	}
	
	indoorsObj->images = indoorsImages;
200043d0:	687b      	ldr	r3, [r7, #4]
200043d2:	4a0a      	ldr	r2, [pc, #40]	; (200043fc <init_indoors+0x60>)
200043d4:	601a      	str	r2, [r3, #0]

	indoorsObj->current_frame = 0;
200043d6:	687b      	ldr	r3, [r7, #4]
200043d8:	2200      	movs	r2, #0
200043da:	615a      	str	r2, [r3, #20]
	indoorsObj->n_frames = 1;
200043dc:	687b      	ldr	r3, [r7, #4]
200043de:	2201      	movs	r2, #1
200043e0:	619a      	str	r2, [r3, #24]
	indoorsObj->animation_speed = 1;
200043e2:	687b      	ldr	r3, [r7, #4]
200043e4:	2201      	movs	r2, #1
200043e6:	61da      	str	r2, [r3, #28]
	indoorsObj->animation_counter = 0;
200043e8:	687b      	ldr	r3, [r7, #4]
200043ea:	2200      	movs	r2, #0
200043ec:	621a      	str	r2, [r3, #32]
}
200043ee:	46c0      	nop			; (mov r8, r8)
200043f0:	46bd      	mov	sp, r7
200043f2:	b003      	add	sp, #12
200043f4:	bd90      	pop	{r4, r7, pc}
200043f6:	46c0      	nop			; (mov r8, r8)
200043f8:	2000da48 	andcs	sp, r0, r8, asr #20
200043fc:	20006fbc 			; <UNDEFINED> instruction: 0x20006fbc
20004400:	20006fcc 	andcs	r6, r0, ip, asr #31
20004404:	20006fc8 	andcs	r6, r0, r8, asr #31
20004408:	20006f94 	mulcs	r0, r4, pc	; <UNPREDICTABLE>
2000440c:	20006fd8 	ldrdcs	r6, [r0], -r8

20004410 <initSprites>:


GameObject indoors2Obj;
Image indoors2Image;
Image indoors2Images[1];
static void initSprites( void ) {	
20004410:	b580      	push	{r7, lr}
20004412:	b084      	sub	sp, #16
20004414:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempIndoors2Light;
20004416:	4b12      	ldr	r3, [pc, #72]	; (20004460 <initSprites+0x50>)
20004418:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer11, indoors2_light_bits, indoors2_black_width, indoors2_black_height);
2000441a:	4912      	ldr	r1, [pc, #72]	; (20004464 <initSprites+0x54>)
2000441c:	68f8      	ldr	r0, [r7, #12]
2000441e:	2340      	movs	r3, #64	; 0x40
20004420:	2280      	movs	r2, #128	; 0x80
20004422:	f7ff fc5d 	bl	20003ce0 <load_sprite>
	indoors2Light = pointer11;
20004426:	4b10      	ldr	r3, [pc, #64]	; (20004468 <initSprites+0x58>)
20004428:	68fa      	ldr	r2, [r7, #12]
2000442a:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempIndoors2Gray;
2000442c:	4b0f      	ldr	r3, [pc, #60]	; (2000446c <initSprites+0x5c>)
2000442e:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer12, indoors2_gray_bits, indoors2_black_width, indoors2_black_height);
20004430:	490f      	ldr	r1, [pc, #60]	; (20004470 <initSprites+0x60>)
20004432:	68b8      	ldr	r0, [r7, #8]
20004434:	2340      	movs	r3, #64	; 0x40
20004436:	2280      	movs	r2, #128	; 0x80
20004438:	f7ff fc52 	bl	20003ce0 <load_sprite>
	indoors2Gray = pointer12;
2000443c:	4b0d      	ldr	r3, [pc, #52]	; (20004474 <initSprites+0x64>)
2000443e:	68ba      	ldr	r2, [r7, #8]
20004440:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempIndoors2Black;
20004442:	4b0d      	ldr	r3, [pc, #52]	; (20004478 <initSprites+0x68>)
20004444:	607b      	str	r3, [r7, #4]
	load_sprite(pointer13, indoors2_black_bits, indoors2_black_width, indoors2_black_height);
20004446:	490d      	ldr	r1, [pc, #52]	; (2000447c <initSprites+0x6c>)
20004448:	6878      	ldr	r0, [r7, #4]
2000444a:	2340      	movs	r3, #64	; 0x40
2000444c:	2280      	movs	r2, #128	; 0x80
2000444e:	f7ff fc47 	bl	20003ce0 <load_sprite>
	indoors2Black = pointer13;	
20004452:	4b0b      	ldr	r3, [pc, #44]	; (20004480 <initSprites+0x70>)
20004454:	687a      	ldr	r2, [r7, #4]
20004456:	601a      	str	r2, [r3, #0]
	
}
20004458:	46c0      	nop			; (mov r8, r8)
2000445a:	46bd      	mov	sp, r7
2000445c:	b004      	add	sp, #16
2000445e:	bd80      	pop	{r7, pc}
20004460:	20007038 	andcs	r7, r0, r8, lsr r0
20004464:	2000e24c 	andcs	lr, r0, ip, asr #4
20004468:	20007028 	andcs	r7, r0, r8, lsr #32
2000446c:	2000701c 	andcs	r7, r0, ip, lsl r0
20004470:	2000de4c 	andcs	sp, r0, ip, asr #28
20004474:	20007000 	andcs	r7, r0, r0
20004478:	2000702c 	andcs	r7, r0, ip, lsr #32
2000447c:	2000da4c 	andcs	sp, r0, ip, asr #20
20004480:	20007044 	andcs	r7, r0, r4, asr #32

20004484 <init_indoors2>:
	
void init_indoors2( GameObject *indoors2Obj ) {
20004484:	b590      	push	{r4, r7, lr}
20004486:	b083      	sub	sp, #12
20004488:	af00      	add	r7, sp, #0
2000448a:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
2000448c:	4b14      	ldr	r3, [pc, #80]	; (200044e0 <init_indoors2+0x5c>)
2000448e:	681b      	ldr	r3, [r3, #0]
20004490:	2b00      	cmp	r3, #0
20004492:	d011      	beq.n	200044b8 <init_indoors2+0x34>
		initSprites();
20004494:	f7ff ffbc 	bl	20004410 <initSprites>
		firstTime = 0;			
20004498:	4b11      	ldr	r3, [pc, #68]	; (200044e0 <init_indoors2+0x5c>)
2000449a:	2200      	movs	r2, #0
2000449c:	601a      	str	r2, [r3, #0]

		indoors2Images[0] = indoors2Image;
2000449e:	4b11      	ldr	r3, [pc, #68]	; (200044e4 <init_indoors2+0x60>)
200044a0:	4a11      	ldr	r2, [pc, #68]	; (200044e8 <init_indoors2+0x64>)
200044a2:	ca13      	ldmia	r2!, {r0, r1, r4}
200044a4:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&indoors2Images[0], indoors2Black, indoors2Gray, indoors2Light);
200044a6:	4b11      	ldr	r3, [pc, #68]	; (200044ec <init_indoors2+0x68>)
200044a8:	6819      	ldr	r1, [r3, #0]
200044aa:	4b11      	ldr	r3, [pc, #68]	; (200044f0 <init_indoors2+0x6c>)
200044ac:	681a      	ldr	r2, [r3, #0]
200044ae:	4b11      	ldr	r3, [pc, #68]	; (200044f4 <init_indoors2+0x70>)
200044b0:	681b      	ldr	r3, [r3, #0]
200044b2:	480c      	ldr	r0, [pc, #48]	; (200044e4 <init_indoors2+0x60>)
200044b4:	f7ff fc00 	bl	20003cb8 <load_image>
	}
	
	indoors2Obj->images = indoors2Images;
200044b8:	687b      	ldr	r3, [r7, #4]
200044ba:	4a0a      	ldr	r2, [pc, #40]	; (200044e4 <init_indoors2+0x60>)
200044bc:	601a      	str	r2, [r3, #0]

	indoors2Obj->current_frame = 0;
200044be:	687b      	ldr	r3, [r7, #4]
200044c0:	2200      	movs	r2, #0
200044c2:	615a      	str	r2, [r3, #20]
	indoors2Obj->n_frames = 1;
200044c4:	687b      	ldr	r3, [r7, #4]
200044c6:	2201      	movs	r2, #1
200044c8:	619a      	str	r2, [r3, #24]
	indoors2Obj->animation_speed = 1;
200044ca:	687b      	ldr	r3, [r7, #4]
200044cc:	2201      	movs	r2, #1
200044ce:	61da      	str	r2, [r3, #28]
	indoors2Obj->animation_counter = 0;
200044d0:	687b      	ldr	r3, [r7, #4]
200044d2:	2200      	movs	r2, #0
200044d4:	621a      	str	r2, [r3, #32]
}
200044d6:	46c0      	nop			; (mov r8, r8)
200044d8:	46bd      	mov	sp, r7
200044da:	b003      	add	sp, #12
200044dc:	bd90      	pop	{r4, r7, pc}
200044de:	46c0      	nop			; (mov r8, r8)
200044e0:	2000e64c 	andcs	lr, r0, ip, asr #12
200044e4:	20007004 	andcs	r7, r0, r4
200044e8:	20007010 	andcs	r7, r0, r0, lsl r0
200044ec:	20007044 	andcs	r7, r0, r4, asr #32
200044f0:	20007000 	andcs	r7, r0, r0
200044f4:	20007028 	andcs	r7, r0, r8, lsr #32

200044f8 <initSprites>:


GameObject trophyObj;
Image trophyImage;
Image trophyImages[1];
static void initSprites( void ) {	
200044f8:	b580      	push	{r7, lr}
200044fa:	b084      	sub	sp, #16
200044fc:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempTrophyLight;
200044fe:	4b12      	ldr	r3, [pc, #72]	; (20004548 <initSprites+0x50>)
20004500:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer11, trophy_light_bits, trophy_black_width, trophy_black_height);
20004502:	4912      	ldr	r1, [pc, #72]	; (2000454c <initSprites+0x54>)
20004504:	68f8      	ldr	r0, [r7, #12]
20004506:	2311      	movs	r3, #17
20004508:	220b      	movs	r2, #11
2000450a:	f7ff fbe9 	bl	20003ce0 <load_sprite>
	trophyLight = pointer11;
2000450e:	4b10      	ldr	r3, [pc, #64]	; (20004550 <initSprites+0x58>)
20004510:	68fa      	ldr	r2, [r7, #12]
20004512:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempTrophyGray;
20004514:	4b0f      	ldr	r3, [pc, #60]	; (20004554 <initSprites+0x5c>)
20004516:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer12, trophy_gray_bits, trophy_black_width, trophy_black_height);
20004518:	490f      	ldr	r1, [pc, #60]	; (20004558 <initSprites+0x60>)
2000451a:	68b8      	ldr	r0, [r7, #8]
2000451c:	2311      	movs	r3, #17
2000451e:	220b      	movs	r2, #11
20004520:	f7ff fbde 	bl	20003ce0 <load_sprite>
	trophyGray = pointer12;
20004524:	4b0d      	ldr	r3, [pc, #52]	; (2000455c <initSprites+0x64>)
20004526:	68ba      	ldr	r2, [r7, #8]
20004528:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempTrophyBlack;
2000452a:	4b0d      	ldr	r3, [pc, #52]	; (20004560 <initSprites+0x68>)
2000452c:	607b      	str	r3, [r7, #4]
	load_sprite(pointer13, trophy_black_bits, trophy_black_width, trophy_black_height);
2000452e:	490d      	ldr	r1, [pc, #52]	; (20004564 <initSprites+0x6c>)
20004530:	6878      	ldr	r0, [r7, #4]
20004532:	2311      	movs	r3, #17
20004534:	220b      	movs	r2, #11
20004536:	f7ff fbd3 	bl	20003ce0 <load_sprite>
	trophyBlack = pointer13;	
2000453a:	4b0b      	ldr	r3, [pc, #44]	; (20004568 <initSprites+0x70>)
2000453c:	687a      	ldr	r2, [r7, #4]
2000453e:	601a      	str	r2, [r3, #0]
	
}
20004540:	46c0      	nop			; (mov r8, r8)
20004542:	46bd      	mov	sp, r7
20004544:	b004      	add	sp, #16
20004546:	bd80      	pop	{r7, pc}
20004548:	20007064 	andcs	r7, r0, r4, rrx
2000454c:	2000e698 	mulcs	r0, r8, r6
20004550:	200070b0 	strhcs	r7, [r0], -r0
20004554:	200070a4 	andcs	r7, r0, r4, lsr #1
20004558:	2000e674 	andcs	lr, r0, r4, ror r6
2000455c:	20007094 	mulcs	r0, r4, r0
20004560:	20007098 	mulcs	r0, r8, r0
20004564:	2000e650 	andcs	lr, r0, r0, asr r6
20004568:	20007054 	andcs	r7, r0, r4, asr r0

2000456c <init_trophy>:
	
void init_trophy( GameObject *trophyObj ) {
2000456c:	b590      	push	{r4, r7, lr}
2000456e:	b083      	sub	sp, #12
20004570:	af00      	add	r7, sp, #0
20004572:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20004574:	4b14      	ldr	r3, [pc, #80]	; (200045c8 <init_trophy+0x5c>)
20004576:	681b      	ldr	r3, [r3, #0]
20004578:	2b00      	cmp	r3, #0
2000457a:	d011      	beq.n	200045a0 <init_trophy+0x34>
		initSprites();
2000457c:	f7ff ffbc 	bl	200044f8 <initSprites>
		firstTime = 0;			
20004580:	4b11      	ldr	r3, [pc, #68]	; (200045c8 <init_trophy+0x5c>)
20004582:	2200      	movs	r2, #0
20004584:	601a      	str	r2, [r3, #0]

		trophyImages[0] = trophyImage;
20004586:	4b11      	ldr	r3, [pc, #68]	; (200045cc <init_trophy+0x60>)
20004588:	4a11      	ldr	r2, [pc, #68]	; (200045d0 <init_trophy+0x64>)
2000458a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000458c:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&trophyImages[0], trophyBlack, trophyGray, trophyLight);
2000458e:	4b11      	ldr	r3, [pc, #68]	; (200045d4 <init_trophy+0x68>)
20004590:	6819      	ldr	r1, [r3, #0]
20004592:	4b11      	ldr	r3, [pc, #68]	; (200045d8 <init_trophy+0x6c>)
20004594:	681a      	ldr	r2, [r3, #0]
20004596:	4b11      	ldr	r3, [pc, #68]	; (200045dc <init_trophy+0x70>)
20004598:	681b      	ldr	r3, [r3, #0]
2000459a:	480c      	ldr	r0, [pc, #48]	; (200045cc <init_trophy+0x60>)
2000459c:	f7ff fb8c 	bl	20003cb8 <load_image>
	}
	
	trophyObj->images = trophyImages;
200045a0:	687b      	ldr	r3, [r7, #4]
200045a2:	4a0a      	ldr	r2, [pc, #40]	; (200045cc <init_trophy+0x60>)
200045a4:	601a      	str	r2, [r3, #0]

	trophyObj->current_frame = 0;
200045a6:	687b      	ldr	r3, [r7, #4]
200045a8:	2200      	movs	r2, #0
200045aa:	615a      	str	r2, [r3, #20]
	trophyObj->n_frames = 1;
200045ac:	687b      	ldr	r3, [r7, #4]
200045ae:	2201      	movs	r2, #1
200045b0:	619a      	str	r2, [r3, #24]
	trophyObj->animation_speed = 1;
200045b2:	687b      	ldr	r3, [r7, #4]
200045b4:	2201      	movs	r2, #1
200045b6:	61da      	str	r2, [r3, #28]
	trophyObj->animation_counter = 0;
200045b8:	687b      	ldr	r3, [r7, #4]
200045ba:	2200      	movs	r2, #0
200045bc:	621a      	str	r2, [r3, #32]
}
200045be:	46c0      	nop			; (mov r8, r8)
200045c0:	46bd      	mov	sp, r7
200045c2:	b003      	add	sp, #12
200045c4:	bd90      	pop	{r4, r7, pc}
200045c6:	46c0      	nop			; (mov r8, r8)
200045c8:	2000e6bc 			; <UNDEFINED> instruction: 0x2000e6bc
200045cc:	20007048 	andcs	r7, r0, r8, asr #32
200045d0:	20007058 	andcs	r7, r0, r8, asr r0
200045d4:	20007054 	andcs	r7, r0, r4, asr r0
200045d8:	20007094 	mulcs	r0, r4, r0
200045dc:	200070b0 	strhcs	r7, [r0], -r0

200045e0 <__divsi3>:
200045e0:	4603      	mov	r3, r0
200045e2:	430b      	orrs	r3, r1
200045e4:	d47f      	bmi.n	200046e6 <__divsi3+0x106>
200045e6:	2200      	movs	r2, #0
200045e8:	0843      	lsrs	r3, r0, #1
200045ea:	428b      	cmp	r3, r1
200045ec:	d374      	bcc.n	200046d8 <__divsi3+0xf8>
200045ee:	0903      	lsrs	r3, r0, #4
200045f0:	428b      	cmp	r3, r1
200045f2:	d35f      	bcc.n	200046b4 <__divsi3+0xd4>
200045f4:	0a03      	lsrs	r3, r0, #8
200045f6:	428b      	cmp	r3, r1
200045f8:	d344      	bcc.n	20004684 <__divsi3+0xa4>
200045fa:	0b03      	lsrs	r3, r0, #12
200045fc:	428b      	cmp	r3, r1
200045fe:	d328      	bcc.n	20004652 <__divsi3+0x72>
20004600:	0c03      	lsrs	r3, r0, #16
20004602:	428b      	cmp	r3, r1
20004604:	d30d      	bcc.n	20004622 <__divsi3+0x42>
20004606:	22ff      	movs	r2, #255	; 0xff
20004608:	0209      	lsls	r1, r1, #8
2000460a:	ba12      	rev	r2, r2
2000460c:	0c03      	lsrs	r3, r0, #16
2000460e:	428b      	cmp	r3, r1
20004610:	d302      	bcc.n	20004618 <__divsi3+0x38>
20004612:	1212      	asrs	r2, r2, #8
20004614:	0209      	lsls	r1, r1, #8
20004616:	d065      	beq.n	200046e4 <__divsi3+0x104>
20004618:	0b03      	lsrs	r3, r0, #12
2000461a:	428b      	cmp	r3, r1
2000461c:	d319      	bcc.n	20004652 <__divsi3+0x72>
2000461e:	e000      	b.n	20004622 <__divsi3+0x42>
20004620:	0a09      	lsrs	r1, r1, #8
20004622:	0bc3      	lsrs	r3, r0, #15
20004624:	428b      	cmp	r3, r1
20004626:	d301      	bcc.n	2000462c <__divsi3+0x4c>
20004628:	03cb      	lsls	r3, r1, #15
2000462a:	1ac0      	subs	r0, r0, r3
2000462c:	4152      	adcs	r2, r2
2000462e:	0b83      	lsrs	r3, r0, #14
20004630:	428b      	cmp	r3, r1
20004632:	d301      	bcc.n	20004638 <__divsi3+0x58>
20004634:	038b      	lsls	r3, r1, #14
20004636:	1ac0      	subs	r0, r0, r3
20004638:	4152      	adcs	r2, r2
2000463a:	0b43      	lsrs	r3, r0, #13
2000463c:	428b      	cmp	r3, r1
2000463e:	d301      	bcc.n	20004644 <__divsi3+0x64>
20004640:	034b      	lsls	r3, r1, #13
20004642:	1ac0      	subs	r0, r0, r3
20004644:	4152      	adcs	r2, r2
20004646:	0b03      	lsrs	r3, r0, #12
20004648:	428b      	cmp	r3, r1
2000464a:	d301      	bcc.n	20004650 <__divsi3+0x70>
2000464c:	030b      	lsls	r3, r1, #12
2000464e:	1ac0      	subs	r0, r0, r3
20004650:	4152      	adcs	r2, r2
20004652:	0ac3      	lsrs	r3, r0, #11
20004654:	428b      	cmp	r3, r1
20004656:	d301      	bcc.n	2000465c <__divsi3+0x7c>
20004658:	02cb      	lsls	r3, r1, #11
2000465a:	1ac0      	subs	r0, r0, r3
2000465c:	4152      	adcs	r2, r2
2000465e:	0a83      	lsrs	r3, r0, #10
20004660:	428b      	cmp	r3, r1
20004662:	d301      	bcc.n	20004668 <__divsi3+0x88>
20004664:	028b      	lsls	r3, r1, #10
20004666:	1ac0      	subs	r0, r0, r3
20004668:	4152      	adcs	r2, r2
2000466a:	0a43      	lsrs	r3, r0, #9
2000466c:	428b      	cmp	r3, r1
2000466e:	d301      	bcc.n	20004674 <__divsi3+0x94>
20004670:	024b      	lsls	r3, r1, #9
20004672:	1ac0      	subs	r0, r0, r3
20004674:	4152      	adcs	r2, r2
20004676:	0a03      	lsrs	r3, r0, #8
20004678:	428b      	cmp	r3, r1
2000467a:	d301      	bcc.n	20004680 <__divsi3+0xa0>
2000467c:	020b      	lsls	r3, r1, #8
2000467e:	1ac0      	subs	r0, r0, r3
20004680:	4152      	adcs	r2, r2
20004682:	d2cd      	bcs.n	20004620 <__divsi3+0x40>
20004684:	09c3      	lsrs	r3, r0, #7
20004686:	428b      	cmp	r3, r1
20004688:	d301      	bcc.n	2000468e <__divsi3+0xae>
2000468a:	01cb      	lsls	r3, r1, #7
2000468c:	1ac0      	subs	r0, r0, r3
2000468e:	4152      	adcs	r2, r2
20004690:	0983      	lsrs	r3, r0, #6
20004692:	428b      	cmp	r3, r1
20004694:	d301      	bcc.n	2000469a <__divsi3+0xba>
20004696:	018b      	lsls	r3, r1, #6
20004698:	1ac0      	subs	r0, r0, r3
2000469a:	4152      	adcs	r2, r2
2000469c:	0943      	lsrs	r3, r0, #5
2000469e:	428b      	cmp	r3, r1
200046a0:	d301      	bcc.n	200046a6 <__divsi3+0xc6>
200046a2:	014b      	lsls	r3, r1, #5
200046a4:	1ac0      	subs	r0, r0, r3
200046a6:	4152      	adcs	r2, r2
200046a8:	0903      	lsrs	r3, r0, #4
200046aa:	428b      	cmp	r3, r1
200046ac:	d301      	bcc.n	200046b2 <__divsi3+0xd2>
200046ae:	010b      	lsls	r3, r1, #4
200046b0:	1ac0      	subs	r0, r0, r3
200046b2:	4152      	adcs	r2, r2
200046b4:	08c3      	lsrs	r3, r0, #3
200046b6:	428b      	cmp	r3, r1
200046b8:	d301      	bcc.n	200046be <__divsi3+0xde>
200046ba:	00cb      	lsls	r3, r1, #3
200046bc:	1ac0      	subs	r0, r0, r3
200046be:	4152      	adcs	r2, r2
200046c0:	0883      	lsrs	r3, r0, #2
200046c2:	428b      	cmp	r3, r1
200046c4:	d301      	bcc.n	200046ca <__divsi3+0xea>
200046c6:	008b      	lsls	r3, r1, #2
200046c8:	1ac0      	subs	r0, r0, r3
200046ca:	4152      	adcs	r2, r2
200046cc:	0843      	lsrs	r3, r0, #1
200046ce:	428b      	cmp	r3, r1
200046d0:	d301      	bcc.n	200046d6 <__divsi3+0xf6>
200046d2:	004b      	lsls	r3, r1, #1
200046d4:	1ac0      	subs	r0, r0, r3
200046d6:	4152      	adcs	r2, r2
200046d8:	1a41      	subs	r1, r0, r1
200046da:	d200      	bcs.n	200046de <__divsi3+0xfe>
200046dc:	4601      	mov	r1, r0
200046de:	4152      	adcs	r2, r2
200046e0:	4610      	mov	r0, r2
200046e2:	4770      	bx	lr
200046e4:	e05d      	b.n	200047a2 <__divsi3+0x1c2>
200046e6:	0fca      	lsrs	r2, r1, #31
200046e8:	d000      	beq.n	200046ec <__divsi3+0x10c>
200046ea:	4249      	negs	r1, r1
200046ec:	1003      	asrs	r3, r0, #32
200046ee:	d300      	bcc.n	200046f2 <__divsi3+0x112>
200046f0:	4240      	negs	r0, r0
200046f2:	4053      	eors	r3, r2
200046f4:	2200      	movs	r2, #0
200046f6:	469c      	mov	ip, r3
200046f8:	0903      	lsrs	r3, r0, #4
200046fa:	428b      	cmp	r3, r1
200046fc:	d32d      	bcc.n	2000475a <__divsi3+0x17a>
200046fe:	0a03      	lsrs	r3, r0, #8
20004700:	428b      	cmp	r3, r1
20004702:	d312      	bcc.n	2000472a <__divsi3+0x14a>
20004704:	22fc      	movs	r2, #252	; 0xfc
20004706:	0189      	lsls	r1, r1, #6
20004708:	ba12      	rev	r2, r2
2000470a:	0a03      	lsrs	r3, r0, #8
2000470c:	428b      	cmp	r3, r1
2000470e:	d30c      	bcc.n	2000472a <__divsi3+0x14a>
20004710:	0189      	lsls	r1, r1, #6
20004712:	1192      	asrs	r2, r2, #6
20004714:	428b      	cmp	r3, r1
20004716:	d308      	bcc.n	2000472a <__divsi3+0x14a>
20004718:	0189      	lsls	r1, r1, #6
2000471a:	1192      	asrs	r2, r2, #6
2000471c:	428b      	cmp	r3, r1
2000471e:	d304      	bcc.n	2000472a <__divsi3+0x14a>
20004720:	0189      	lsls	r1, r1, #6
20004722:	d03a      	beq.n	2000479a <__divsi3+0x1ba>
20004724:	1192      	asrs	r2, r2, #6
20004726:	e000      	b.n	2000472a <__divsi3+0x14a>
20004728:	0989      	lsrs	r1, r1, #6
2000472a:	09c3      	lsrs	r3, r0, #7
2000472c:	428b      	cmp	r3, r1
2000472e:	d301      	bcc.n	20004734 <__divsi3+0x154>
20004730:	01cb      	lsls	r3, r1, #7
20004732:	1ac0      	subs	r0, r0, r3
20004734:	4152      	adcs	r2, r2
20004736:	0983      	lsrs	r3, r0, #6
20004738:	428b      	cmp	r3, r1
2000473a:	d301      	bcc.n	20004740 <__divsi3+0x160>
2000473c:	018b      	lsls	r3, r1, #6
2000473e:	1ac0      	subs	r0, r0, r3
20004740:	4152      	adcs	r2, r2
20004742:	0943      	lsrs	r3, r0, #5
20004744:	428b      	cmp	r3, r1
20004746:	d301      	bcc.n	2000474c <__divsi3+0x16c>
20004748:	014b      	lsls	r3, r1, #5
2000474a:	1ac0      	subs	r0, r0, r3
2000474c:	4152      	adcs	r2, r2
2000474e:	0903      	lsrs	r3, r0, #4
20004750:	428b      	cmp	r3, r1
20004752:	d301      	bcc.n	20004758 <__divsi3+0x178>
20004754:	010b      	lsls	r3, r1, #4
20004756:	1ac0      	subs	r0, r0, r3
20004758:	4152      	adcs	r2, r2
2000475a:	08c3      	lsrs	r3, r0, #3
2000475c:	428b      	cmp	r3, r1
2000475e:	d301      	bcc.n	20004764 <__divsi3+0x184>
20004760:	00cb      	lsls	r3, r1, #3
20004762:	1ac0      	subs	r0, r0, r3
20004764:	4152      	adcs	r2, r2
20004766:	0883      	lsrs	r3, r0, #2
20004768:	428b      	cmp	r3, r1
2000476a:	d301      	bcc.n	20004770 <__divsi3+0x190>
2000476c:	008b      	lsls	r3, r1, #2
2000476e:	1ac0      	subs	r0, r0, r3
20004770:	4152      	adcs	r2, r2
20004772:	d2d9      	bcs.n	20004728 <__divsi3+0x148>
20004774:	0843      	lsrs	r3, r0, #1
20004776:	428b      	cmp	r3, r1
20004778:	d301      	bcc.n	2000477e <__divsi3+0x19e>
2000477a:	004b      	lsls	r3, r1, #1
2000477c:	1ac0      	subs	r0, r0, r3
2000477e:	4152      	adcs	r2, r2
20004780:	1a41      	subs	r1, r0, r1
20004782:	d200      	bcs.n	20004786 <__divsi3+0x1a6>
20004784:	4601      	mov	r1, r0
20004786:	4663      	mov	r3, ip
20004788:	4152      	adcs	r2, r2
2000478a:	105b      	asrs	r3, r3, #1
2000478c:	4610      	mov	r0, r2
2000478e:	d301      	bcc.n	20004794 <__divsi3+0x1b4>
20004790:	4240      	negs	r0, r0
20004792:	2b00      	cmp	r3, #0
20004794:	d500      	bpl.n	20004798 <__divsi3+0x1b8>
20004796:	4249      	negs	r1, r1
20004798:	4770      	bx	lr
2000479a:	4663      	mov	r3, ip
2000479c:	105b      	asrs	r3, r3, #1
2000479e:	d300      	bcc.n	200047a2 <__divsi3+0x1c2>
200047a0:	4240      	negs	r0, r0
200047a2:	b501      	push	{r0, lr}
200047a4:	2000      	movs	r0, #0
200047a6:	f000 f805 	bl	200047b4 <__aeabi_idiv0>
200047aa:	bd02      	pop	{r1, pc}

200047ac <__aeabi_idivmod>:
200047ac:	2900      	cmp	r1, #0
200047ae:	d0f8      	beq.n	200047a2 <__divsi3+0x1c2>
200047b0:	e716      	b.n	200045e0 <__divsi3>
200047b2:	4770      	bx	lr

200047b4 <__aeabi_idiv0>:
200047b4:	4770      	bx	lr
200047b6:	46c0      	nop			; (mov r8, r8)

200047b8 <counter>:
200047b8:	00000000 	andeq	r0, r0, r0

200047bc <i.4310>:
200047bc:	00000000 	andeq	r0, r0, r0

200047c0 <j.4316>:
200047c0:	00000000 	andeq	r0, r0, r0

200047c4 <distance_player_fire.4315>:
200047c4:	00000000 	andeq	r0, r0, r0

200047c8 <distance_hair_trophy.4321>:
200047c8:	00000000 	andeq	r0, r0, r0

200047cc <trophy_burned.4320>:
200047cc:	00000000 	andeq	r0, r0, r0

200047d0 <distance_hair_DIP.4323>:
200047d0:	00000000 	andeq	r0, r0, r0

200047d4 <DIP_burned.4322>:
200047d4:	00000000 	andeq	r0, r0, r0

200047d8 <test.4325>:
200047d8:	00000000 	andeq	r0, r0, r0

200047dc <nGameObjects>:
200047dc:	00000000 	andeq	r0, r0, r0

200047e0 <lastJumpValue.4106>:
200047e0:	00000000 	andeq	r0, r0, r0

200047e4 <ySpeed.4110>:
200047e4:	00000000 	andeq	r0, r0, r0

200047e8 <lastRightValue.4107>:
200047e8:	00000000 	andeq	r0, r0, r0

200047ec <xSpeed.4109>:
200047ec:	00000000 	andeq	r0, r0, r0

200047f0 <lastLeftValue.4108>:
200047f0:	00000000 	andeq	r0, r0, r0

200047f4 <playerPositionX>:
200047f4:	00000000 	andeq	r0, r0, r0

200047f8 <playerPositionY>:
200047f8:	00000000 	andeq	r0, r0, r0

200047fc <counter.4152>:
200047fc:	00000000 	andeq	r0, r0, r0

20004800 <isRunning.4154>:
20004800:	00000000 	andeq	r0, r0, r0

20004804 <monster>:
20004804:	00000000 	andeq	r0, r0, r0

20004808 <tempCastleBlack>:
	...

20004814 <tempPressGray>:
	...

20004820 <tempTitleGray>:
	...

2000482c <castleBlack>:
2000482c:	00000000 	andeq	r0, r0, r0

20004830 <tempMonster>:
	...

2000483c <pressLight>:
2000483c:	00000000 	andeq	r0, r0, r0

20004840 <tempTitleBlack>:
	...

2000484c <bg>:
2000484c:	00000000 	andeq	r0, r0, r0

20004850 <tempMonsterGray>:
	...

2000485c <tempTitleLight>:
	...

20004868 <castleLight>:
20004868:	00000000 	andeq	r0, r0, r0

2000486c <tempPressLight>:
	...

20004878 <tempCastleLight>:
	...

20004884 <pressGray>:
20004884:	00000000 	andeq	r0, r0, r0

20004888 <tempMonsterLight>:
	...

20004894 <tempPressBlack>:
	...

200048a0 <titleGray>:
200048a0:	00000000 	andeq	r0, r0, r0

200048a4 <tempCastleGray>:
	...

200048b0 <monsterLight>:
200048b0:	00000000 	andeq	r0, r0, r0

200048b4 <titleLight>:
200048b4:	00000000 	andeq	r0, r0, r0

200048b8 <castleGray>:
200048b8:	00000000 	andeq	r0, r0, r0

200048bc <random_seed>:
200048bc:	00000000 	andeq	r0, r0, r0

200048c0 <pressBlack>:
200048c0:	00000000 	andeq	r0, r0, r0

200048c4 <monsterGray>:
200048c4:	00000000 	andeq	r0, r0, r0

200048c8 <tempBg>:
	...

200048d4 <titleBlack>:
200048d4:	00000000 	andeq	r0, r0, r0

200048d8 <gameObjects>:
	...

20004a68 <fire1Light>:
20004a68:	00000000 	andeq	r0, r0, r0

20004a6c <tempFire3Light>:
	...

20004a78 <fire3Gray>:
20004a78:	00000000 	andeq	r0, r0, r0

20004a7c <tempFire4Gray>:
	...

20004a88 <fire2Image>:
	...

20004a94 <tempFire2Gray>:
	...

20004aa0 <tempFireBlack>:
	...

20004aac <fire3Image>:
	...

20004ab8 <tempFire4Light>:
	...

20004ac4 <fire1Image>:
	...

20004ad0 <fire4Light>:
20004ad0:	00000000 	andeq	r0, r0, r0

20004ad4 <fireObj>:
	...

20004af8 <fire5Image>:
	...

20004b04 <fireImages>:
	...

20004b40 <tempFire5Gray>:
	...

20004b4c <tempFire3Gray>:
	...

20004b58 <fire4Image>:
	...

20004b64 <fire4Gray>:
20004b64:	00000000 	andeq	r0, r0, r0

20004b68 <tempFire1Light>:
	...

20004b74 <tempFire5Light>:
	...

20004b80 <fire5Gray>:
20004b80:	00000000 	andeq	r0, r0, r0

20004b84 <fire2Light>:
20004b84:	00000000 	andeq	r0, r0, r0

20004b88 <fire5Light>:
20004b88:	00000000 	andeq	r0, r0, r0

20004b8c <tempFire1Gray>:
	...

20004b98 <fireBlack>:
20004b98:	00000000 	andeq	r0, r0, r0

20004b9c <tempFire2Light>:
	...

20004ba8 <fire3Light>:
20004ba8:	00000000 	andeq	r0, r0, r0

20004bac <fire2Gray>:
20004bac:	00000000 	andeq	r0, r0, r0

20004bb0 <fire1Gray>:
20004bb0:	00000000 	andeq	r0, r0, r0

20004bb4 <bird4Light>:
20004bb4:	00000000 	andeq	r0, r0, r0

20004bb8 <bird1Gray>:
20004bb8:	00000000 	andeq	r0, r0, r0

20004bbc <bird6Image>:
	...

20004bc8 <bird5Black>:
20004bc8:	00000000 	andeq	r0, r0, r0

20004bcc <tempBird4Black>:
	...

20004bd8 <bird2Image>:
	...

20004be4 <birdObj>:
	...

20004c08 <bird1Image>:
	...

20004c14 <bird3Black>:
20004c14:	00000000 	andeq	r0, r0, r0

20004c18 <bird4Gray>:
20004c18:	00000000 	andeq	r0, r0, r0

20004c1c <bird2Black>:
20004c1c:	00000000 	andeq	r0, r0, r0

20004c20 <bird1Black>:
20004c20:	00000000 	andeq	r0, r0, r0

20004c24 <bird4Image>:
	...

20004c30 <tempBirdBlack>:
	...

20004c3c <bird3Gray>:
20004c3c:	00000000 	andeq	r0, r0, r0

20004c40 <tempBirdGray>:
	...

20004c4c <bird5Gray>:
20004c4c:	00000000 	andeq	r0, r0, r0

20004c50 <tempBird5Light>:
	...

20004c5c <tempBird2Gray>:
	...

20004c68 <bird3Light>:
20004c68:	00000000 	andeq	r0, r0, r0

20004c6c <tempBird5Gray>:
	...

20004c78 <tempBird5Black>:
	...

20004c84 <bird5Image>:
	...

20004c90 <bird5Light>:
20004c90:	00000000 	andeq	r0, r0, r0

20004c94 <tempBird3Black>:
	...

20004ca0 <bird2Gray>:
20004ca0:	00000000 	andeq	r0, r0, r0

20004ca4 <tempBirdLight>:
	...

20004cb0 <bird1Light>:
20004cb0:	00000000 	andeq	r0, r0, r0

20004cb4 <tempBird2Light>:
	...

20004cc0 <bird3Image>:
	...

20004ccc <tempBird4Light>:
	...

20004cd8 <tempBird3Light>:
	...

20004ce4 <tempBird3Gray>:
	...

20004cf0 <birdImages>:
	...

20004d38 <bird4Black>:
20004d38:	00000000 	andeq	r0, r0, r0

20004d3c <tempBird2Black>:
	...

20004d48 <tempBird4Gray>:
	...

20004d54 <bird2Light>:
20004d54:	00000000 	andeq	r0, r0, r0

20004d58 <witch1Gray>:
20004d58:	00000000 	andeq	r0, r0, r0

20004d5c <witch2Light>:
20004d5c:	00000000 	andeq	r0, r0, r0

20004d60 <witchImages>:
	...

20004d90 <witch2Image>:
	...

20004d9c <tempWitch2Black>:
	...

20004da8 <tempWitchBlack>:
	...

20004db4 <tempWitch3Light>:
	...

20004dc0 <witch4Image>:
	...

20004dcc <witch2Gray>:
20004dcc:	00000000 	andeq	r0, r0, r0

20004dd0 <tempWitchGray>:
	...

20004ddc <tempWitch3Black>:
	...

20004de8 <tempWitch2Gray>:
	...

20004df4 <witch3Black>:
20004df4:	00000000 	andeq	r0, r0, r0

20004df8 <witchObj>:
	...

20004e1c <witch3Light>:
20004e1c:	00000000 	andeq	r0, r0, r0

20004e20 <tempWitch3Gray>:
	...

20004e2c <witch1Black>:
20004e2c:	00000000 	andeq	r0, r0, r0

20004e30 <witch3Gray>:
20004e30:	00000000 	andeq	r0, r0, r0

20004e34 <witch1Image>:
	...

20004e40 <tempWitchLight>:
	...

20004e4c <tempWitch2Light>:
	...

20004e58 <witch1Light>:
20004e58:	00000000 	andeq	r0, r0, r0

20004e5c <witch3Image>:
	...

20004e68 <witch2Black>:
20004e68:	00000000 	andeq	r0, r0, r0

20004e6c <DIPObj>:
	...

20004e90 <DIP2Image>:
	...

20004e9c <DIP2Gray>:
20004e9c:	00000000 	andeq	r0, r0, r0

20004ea0 <tempDIP2Gray>:
	...

20004eac <DIP3Black>:
20004eac:	00000000 	andeq	r0, r0, r0

20004eb0 <DIP1Black>:
20004eb0:	00000000 	andeq	r0, r0, r0

20004eb4 <tempDIPLight>:
	...

20004ec0 <tempDIP3Light>:
	...

20004ecc <DIPImages>:
	...

20004efc <tempDIP2Black>:
	...

20004f08 <DIP3Image>:
	...

20004f14 <DIP1Image>:
	...

20004f20 <DIP1Light>:
20004f20:	00000000 	andeq	r0, r0, r0

20004f24 <DIP2Light>:
20004f24:	00000000 	andeq	r0, r0, r0

20004f28 <DIP3Light>:
20004f28:	00000000 	andeq	r0, r0, r0

20004f2c <DIP2Black>:
20004f2c:	00000000 	andeq	r0, r0, r0

20004f30 <tempDIP3Gray>:
	...

20004f3c <tempDIPBlack>:
	...

20004f48 <DIP1Gray>:
20004f48:	00000000 	andeq	r0, r0, r0

20004f4c <tempDIP3Black>:
	...

20004f58 <DIP3Gray>:
20004f58:	00000000 	andeq	r0, r0, r0

20004f5c <DIP4Image>:
	...

20004f68 <tempDIP2Light>:
	...

20004f74 <tempDIPGray>:
	...

20004f80 <tempFlameGray>:
	...

20004f8c <tempFlame4Light>:
	...

20004f98 <flame2Image>:
	...

20004fa4 <flame3Light>:
20004fa4:	00000000 	andeq	r0, r0, r0

20004fa8 <tempFlame3Light>:
	...

20004fb4 <flame3Image>:
	...

20004fc0 <flame3Gray>:
20004fc0:	00000000 	andeq	r0, r0, r0

20004fc4 <flameObj>:
	...

20004fe8 <tempFlame2Light>:
	...

20004ff4 <tempFlame3Gray>:
	...

20005000 <tempFlame2Black>:
	...

2000500c <flame2Gray>:
2000500c:	00000000 	andeq	r0, r0, r0

20005010 <flame1Gray>:
20005010:	00000000 	andeq	r0, r0, r0

20005014 <flame1Light>:
20005014:	00000000 	andeq	r0, r0, r0

20005018 <tempFlame4Black>:
	...

20005024 <tempFlame4Gray>:
	...

20005030 <flame4Gray>:
20005030:	00000000 	andeq	r0, r0, r0

20005034 <flame4Image>:
	...

20005040 <flame1Image>:
	...

2000504c <tempFlame2Gray>:
	...

20005058 <flameImages>:
	...

20005088 <tempFlame3Black>:
	...

20005094 <flame4Black>:
20005094:	00000000 	andeq	r0, r0, r0

20005098 <flame1Black>:
20005098:	00000000 	andeq	r0, r0, r0

2000509c <tempFlameLight>:
	...

200050a8 <flame2Light>:
200050a8:	00000000 	andeq	r0, r0, r0

200050ac <flame3Black>:
200050ac:	00000000 	andeq	r0, r0, r0

200050b0 <tempFlameBlack>:
	...

200050bc <flame4Light>:
200050bc:	00000000 	andeq	r0, r0, r0

200050c0 <flame2Black>:
200050c0:	00000000 	andeq	r0, r0, r0

200050c4 <tempBoom5Gray>:
	...

200050d0 <tempBoom2Black>:
	...

200050dc <tempBoomLight>:
	...

200050e8 <tempBoom6Light>:
	...

200050f4 <boom9Image>:
	...

20005100 <boom12Image>:
	...

2000510c <boom3Light>:
2000510c:	00000000 	andeq	r0, r0, r0

20005110 <boom3Black>:
20005110:	00000000 	andeq	r0, r0, r0

20005114 <boom4Image>:
	...

20005120 <boom2Image>:
	...

2000512c <boom5Black>:
2000512c:	00000000 	andeq	r0, r0, r0

20005130 <boom4Light>:
20005130:	00000000 	andeq	r0, r0, r0

20005134 <boom10Image>:
	...

20005140 <boom14Image>:
	...

2000514c <boom8Image>:
	...

20005158 <boom5Image>:
	...

20005164 <boom3Gray>:
20005164:	00000000 	andeq	r0, r0, r0

20005168 <tempBoom4Light>:
	...

20005174 <boom5Gray>:
20005174:	00000000 	andeq	r0, r0, r0

20005178 <boomObj>:
	...

2000519c <boom6Image>:
	...

200051a8 <tempBoom3Light>:
	...

200051b4 <boom6Gray>:
200051b4:	00000000 	andeq	r0, r0, r0

200051b8 <boom13Image>:
	...

200051c4 <boom6Light>:
200051c4:	00000000 	andeq	r0, r0, r0

200051c8 <boomImages>:
	...

2000527c <boom6Black>:
2000527c:	00000000 	andeq	r0, r0, r0

20005280 <tempBoom3Black>:
	...

2000528c <boom4Black>:
2000528c:	00000000 	andeq	r0, r0, r0

20005290 <tempBoom6Black>:
	...

2000529c <tempBoomGray>:
	...

200052a8 <boom2Gray>:
200052a8:	00000000 	andeq	r0, r0, r0

200052ac <boom1Black>:
200052ac:	00000000 	andeq	r0, r0, r0

200052b0 <tempBoom6Gray>:
	...

200052bc <tempBoom2Gray>:
	...

200052c8 <tempBoom4Gray>:
	...

200052d4 <tempBoom3Gray>:
	...

200052e0 <boom4Gray>:
200052e0:	00000000 	andeq	r0, r0, r0

200052e4 <boom5Light>:
200052e4:	00000000 	andeq	r0, r0, r0

200052e8 <boom1Gray>:
200052e8:	00000000 	andeq	r0, r0, r0

200052ec <boom11Image>:
	...

200052f8 <boom1Image>:
	...

20005304 <boom7Image>:
	...

20005310 <boom3Image>:
	...

2000531c <tempBoom5Light>:
	...

20005328 <tempBoom4Black>:
	...

20005334 <tempBoom2Light>:
	...

20005340 <tempBoom5Black>:
	...

2000534c <boom1Light>:
2000534c:	00000000 	andeq	r0, r0, r0

20005350 <boom15Image>:
	...

2000535c <boom2Black>:
2000535c:	00000000 	andeq	r0, r0, r0

20005360 <boom2Light>:
20005360:	00000000 	andeq	r0, r0, r0

20005364 <tempBoomBlack>:
	...

20005370 <backBufferGray>:
	...

20005770 <draw_buffer_black_gray>:
	...

20005b70 <backBuffer>:
	...

20005f70 <draw_buffer_black_light>:
	...

20006370 <draw_buffer_black>:
	...

20006770 <draw_buffer_black_gray_light>:
	...

20006b70 <backBufferLight>:
	...

20006f70 <tempIndoorsGray>:
	...

20006f7c <tempIndoorsLight>:
	...

20006f88 <tempIndoorsBlack>:
	...

20006f94 <indoorsGray>:
20006f94:	00000000 	andeq	r0, r0, r0

20006f98 <indoorsObj>:
	...

20006fbc <indoorsImages>:
	...

20006fc8 <indoorsBlack>:
20006fc8:	00000000 	andeq	r0, r0, r0

20006fcc <indoorsImage>:
	...

20006fd8 <indoorsLight>:
20006fd8:	00000000 	andeq	r0, r0, r0

20006fdc <indoors2Obj>:
	...

20007000 <indoors2Gray>:
20007000:	00000000 	andeq	r0, r0, r0

20007004 <indoors2Images>:
	...

20007010 <indoors2Image>:
	...

2000701c <tempIndoors2Gray>:
	...

20007028 <indoors2Light>:
20007028:	00000000 	andeq	r0, r0, r0

2000702c <tempIndoors2Black>:
	...

20007038 <tempIndoors2Light>:
	...

20007044 <indoors2Black>:
20007044:	00000000 	andeq	r0, r0, r0

20007048 <trophyImages>:
	...

20007054 <trophyBlack>:
20007054:	00000000 	andeq	r0, r0, r0

20007058 <trophyImage>:
	...

20007064 <tempTrophyLight>:
	...

20007070 <trophyObj>:
	...

20007094 <trophyGray>:
20007094:	00000000 	andeq	r0, r0, r0

20007098 <tempTrophyBlack>:
	...

200070a4 <tempTrophyGray>:
	...

200070b0 <trophyLight>:
200070b0:	00000000 	andeq	r0, r0, r0

200070b4 <monster_black_bits>:
	...
200070c4:	0001c000 	andeq	ip, r1, r0
200070c8:	00023000 	andeq	r3, r2, r0
200070cc:	00021000 	andeq	r1, r2, r0
200070d0:	00060800 	andeq	r0, r6, r0, lsl #16
200070d4:	00040800 	andeq	r0, r4, r0, lsl #16
200070d8:	00040800 	andeq	r0, r4, r0, lsl #16
200070dc:	00092800 	andeq	r2, r9, r0, lsl #16
200070e0:	00092800 	andeq	r2, r9, r0, lsl #16
200070e4:	00100400 	andseq	r0, r0, r0, lsl #8
200070e8:	00100400 	andseq	r0, r0, r0, lsl #8
200070ec:	00200200 	eoreq	r0, r0, r0, lsl #4
200070f0:	00661b00 	rsbeq	r1, r6, r0, lsl #22
200070f4:	0043b100 	subeq	fp, r3, r0, lsl #2
200070f8:	0080e080 	addeq	lr, r0, r0, lsl #1
200070fc:	01800080 	orreq	r0, r0, r0, lsl #1
20007100:	01000040 	tsteq	r0, r0, asr #32
20007104:	02000040 	andeq	r0, r0, #64	; 0x40
20007108:	02000060 	andeq	r0, r0, #96	; 0x60
2000710c:	02000020 	andeq	r0, r0, #32
20007110:	03ff03e0 	mvnseq	r0, #224, 6	; 0x80000003
20007114:	0001fc00 	andeq	pc, r1, r0, lsl #24
	...

2000712c <monster_light_bits>:
	...
20007140:	00010000 	andeq	r0, r1, r0
20007144:	00018000 	andeq	r8, r1, r0
20007148:	0001f000 	andeq	pc, r1, r0
2000714c:	0001f000 	andeq	pc, r1, r0
20007150:	00009000 	andeq	r9, r0, r0
20007154:	00009000 	andeq	r9, r0, r0
20007158:	0000d000 	andeq	sp, r0, r0
2000715c:	0001f800 	andeq	pc, r1, r0, lsl #16
20007160:	0003f800 	andeq	pc, r3, r0, lsl #16
20007164:	0003fc00 	andeq	pc, r3, r0, lsl #24
20007168:	0001e400 	andeq	lr, r1, r0, lsl #8
2000716c:	00044c00 	andeq	r4, r4, r0, lsl #24
20007170:	00060c00 	andeq	r0, r6, r0, lsl #24
20007174:	0006ee00 	andeq	lr, r6, r0, lsl #28
20007178:	000ffe00 	andeq	pc, pc, r0, lsl #28
2000717c:	000f3f00 	andeq	r3, pc, r0, lsl #30
20007180:	00000780 	andeq	r0, r0, r0, lsl #15
20007184:	000003c0 	andeq	r0, r0, r0, asr #7
	...

200071a4 <monster_gray_bits>:
	...
200071c4:	00020000 	andeq	r0, r2, r0
200071c8:	00000000 	andeq	r0, r0, r0
200071cc:	00040000 	andeq	r0, r4, r0
200071d0:	00060000 	andeq	r0, r6, r0
200071d4:	000e0000 	andeq	r0, lr, r0
200071d8:	000c0000 	andeq	r0, ip, r0
200071dc:	001c0000 	andseq	r0, ip, r0
200071e0:	00180000 	andseq	r0, r8, r0
200071e4:	00380000 	eorseq	r0, r8, r0
200071e8:	00780000 	rsbseq	r0, r8, r0
200071ec:	00780000 	rsbseq	r0, r8, r0
200071f0:	00f00000 	rscseq	r0, r0, r0
200071f4:	01f0c000 	mvnseq	ip, r0
200071f8:	01fff800 	mvnseq	pc, r0, lsl #16
200071fc:	01fffc00 	mvnseq	pc, r0, lsl #24
20007200:	0000fc00 	andeq	pc, r0, r0, lsl #24
	...

2000721c <press_black_bits>:
	...
20007254:	001c0000 	andseq	r0, ip, r0
20007258:	00000000 	andeq	r0, r0, r0
2000725c:	00240000 	eoreq	r0, r4, r0
20007260:	00000000 	andeq	r0, r0, r0
20007264:	00440000 	subeq	r0, r4, r0
20007268:	00000000 	andeq	r0, r0, r0
2000726c:	c5240000 	strgt	r0, [r4, #-0]!
20007270:	00000198 	muleq	r0, r8, r1
20007274:	2b1c0000 	blcs	2070727c <firstTime.4040+0x6f8bc0>
20007278:	00000045 	andeq	r0, r0, r5, asr #32
2000727c:	e1040000 	mrs	r0, (UNDEF: 4)
20007280:	000000cd 	andeq	r0, r0, sp, asr #1
20007284:	21040000 	mrscs	r0, (UNDEF: 4)
20007288:	00000110 	andeq	r0, r0, r0, lsl r1
2000728c:	c1040000 	mrsgt	r0, (UNDEF: 4)
20007290:	000000cc 	andeq	r0, r0, ip, asr #1
	...
200072c0:	00000004 	andeq	r0, r0, r4
200072c4:	00000000 	andeq	r0, r0, r0
200072c8:	00000004 	andeq	r0, r0, r4
200072cc:	00000000 	andeq	r0, r0, r0
200072d0:	00000004 	andeq	r0, r0, r4
200072d4:	0494e000 	ldreq	lr, [r4], #0
200072d8:	00009334 	andeq	r9, r0, r4, lsr r3
200072dc:	04ac9000 	strteq	r9, [ip], #0
200072e0:	00009494 	muleq	r0, r4, r4
200072e4:	04a49000 	strteq	r9, [r4], #0
200072e8:	0000978c 	andeq	r9, r0, ip, lsl #15
200072ec:	04a49000 	strteq	r9, [r4], #0
200072f0:	00009094 	muleq	r0, r4, r0
200072f4:	07256000 	streq	r6, [r5, -r0]!
200072f8:	0000e324 	andeq	lr, r0, r4, lsr #6
200072fc:	04000000 	streq	r0, [r0], #-0
20007300:	00008000 	andeq	r8, r0, r0
20007304:	04000000 	streq	r0, [r0], #-0
20007308:	00008000 	andeq	r8, r0, r0
2000730c:	03000000 	movweq	r0, #0
20007310:	00006000 	andeq	r6, r0, r0
	...

20007334 <press_light_bits>:
	...
20007374:	00000200 	andeq	r0, r0, r0, lsl #4
20007378:	00000000 	andeq	r0, r0, r0
2000737c:	00000700 	andeq	r0, r0, r0, lsl #14
20007380:	00000000 	andeq	r0, r0, r0
20007384:	00000200 	andeq	r0, r0, r0, lsl #4
	...
200073c8:	00800000 	addeq	r0, r0, r0
200073cc:	00000000 	andeq	r0, r0, r0
200073d0:	01c00000 	biceq	r0, r0, r0
200073d4:	00000000 	andeq	r0, r0, r0
200073d8:	00800000 	addeq	r0, r0, r0
200073dc:	00000010 	andeq	r0, r0, r0, lsl r0
200073e0:	00000000 	andeq	r0, r0, r0
200073e4:	00000038 	andeq	r0, r0, r8, lsr r0
200073e8:	00000000 	andeq	r0, r0, r0
200073ec:	00000010 	andeq	r0, r0, r0, lsl r0
	...

2000744c <press_gray_bits>:
	...
2000748c:	00180000 	andseq	r0, r8, r0
20007490:	00000000 	andeq	r0, r0, r0
20007494:	00380000 	eorseq	r0, r8, r0
20007498:	00000000 	andeq	r0, r0, r0
2000749c:	00580000 	subseq	r0, r8, r0
200074a0:	00000020 	andeq	r0, r0, r0, lsr #32
200074a4:	d4200000 	strtle	r0, [r0], #-0
200074a8:	0000039a 	muleq	r0, sl, r3
200074ac:	0a380000 	beq	20e074b4 <firstTime.4040+0xdf8df8>
200074b0:	00000102 	andeq	r0, r0, r2, lsl #2
200074b4:	c2080000 	andgt	r0, r8, #0
200074b8:	00000223 	andeq	r0, r0, r3, lsr #4
200074bc:	02080000 	andeq	r0, r8, #0
200074c0:	00000311 	andeq	r0, r0, r1, lsl r3
200074c4:	c1080000 	mrsgt	r0, (UNDEF: 8)
200074c8:	000001dd 	ldrdeq	r0, [r0], -sp
	...
200074f8:	00000008 	andeq	r0, r0, r8
200074fc:	00000000 	andeq	r0, r0, r0
20007500:	00000008 	andeq	r0, r0, r8
20007504:	00000000 	andeq	r0, r0, r0
20007508:	00000008 	andeq	r0, r0, r8
2000750c:	09116000 	ldmdbeq	r1, {sp, lr}
20007510:	00012328 	andeq	r2, r1, r8, lsr #6
20007514:	09596000 	ldmdbeq	r9, {sp, lr}^
20007518:	00012810 	andeq	r2, r1, r0, lsl r8
2000751c:	0b492000 	bleq	2124f524 <firstTime.4040+0x1240e68>
20007520:	00012f08 	andeq	r2, r1, r8, lsl #30
20007524:	08488000 	stmdaeq	r8, {pc}^
20007528:	00010458 	andeq	r0, r1, r8, asr r4
2000752c:	0b6be000 	bleq	21aff534 <firstTime.4040+0x1af0e78>
20007530:	00016768 	andeq	r6, r1, r8, ror #14
20007534:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
20007538:	00010000 	andeq	r0, r1, r0
2000753c:	0c000000 	stceq	0, cr0, [r0], {-0}
20007540:	00018000 	andeq	r8, r1, r0
20007544:	06000000 	streq	r0, [r0], -r0
20007548:	0000c000 	andeq	ip, r0, r0
	...

20007564 <castle_black_bits>:
20007564:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007568:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000756c:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20007570:	00000000 	andeq	r0, r0, r0
20007574:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007578:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000757c:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20007580:	00000000 	andeq	r0, r0, r0
20007584:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007588:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000758c:	00000001 	andeq	r0, r0, r1
20007590:	00000000 	andeq	r0, r0, r0
20007594:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007598:	7fffffff 	svcvc	0x00ffffff
	...
200075a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200075a8:	3fffffff 	svccc	0x00ffffff
	...
200075b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200075b8:	1fffffff 	svcne	0x00ffffff
	...
200075c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200075c8:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
	...
200075d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200075d8:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
	...
200075e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200075e8:	01ffffff 	ldrsheq	pc, [pc, #255]	; 200076ef <castle_black_bits+0x18b>	; <UNPREDICTABLE>
	...
200075f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200075f8:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
	...
20007604:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007608:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
	...
20007614:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007618:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20007624:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007628:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20007634:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007638:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20007644:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007648:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
20007654:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007658:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
20007664:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007668:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20007674:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007678:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20007684:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007688:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
20007694:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007698:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
200076a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200076a8:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
200076b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200076b8:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
200076c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200076c8:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
200076cc:	04900000 	ldreq	r0, [r0], #0
200076d0:	00000000 	andeq	r0, r0, r0
200076d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200076d8:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
200076dc:	0b680000 	bleq	21a076e4 <firstTime.4040+0x19f9028>
200076e0:	00000000 	andeq	r0, r0, r0
200076e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200076e8:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
200076ec:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
200076f0:	00000000 	andeq	r0, r0, r0
200076f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200076f8:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
200076fc:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
20007700:	00000092 	muleq	r0, r2, r0
20007704:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007708:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
2000770c:	04100000 	ldreq	r0, [r0], #-0
20007710:	0000016d 	andeq	r0, r0, sp, ror #2
20007714:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007718:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
2000771c:	04101240 	ldreq	r1, [r0], #-576	; 0xfffffdc0
20007720:	00000101 	andeq	r0, r0, r1, lsl #2
20007724:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007728:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
2000772c:	04102da0 	ldreq	r2, [r0], #-3488	; 0xfffff260
20007730:	00000101 	andeq	r0, r0, r1, lsl #2
20007734:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007738:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
2000773c:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
20007740:	00000101 	andeq	r0, r0, r1, lsl #2
20007744:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007748:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
2000774c:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
20007750:	00000101 	andeq	r0, r0, r1, lsl #2
20007754:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007758:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
2000775c:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20007760:	00000082 	andeq	r0, r0, r2, lsl #1
20007764:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007768:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
2000776c:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20007770:	00000092 	muleq	r0, r2, r0
20007774:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007778:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
2000777c:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20007780:	012400a2 	smulwbeq	r4, r2, r0
20007784:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007788:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
2000778c:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20007790:	02da00a2 	sbcseq	r0, sl, #162	; 0xa2
20007794:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007798:	00004fff 	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
2000779c:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
200077a0:	020200a2 	andeq	r0, r2, #162	; 0xa2
200077a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200077a8:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200077ac:	08081040 	stmdaeq	r8, {r6, ip}
200077b0:	0202009a 	andeq	r0, r2, #154	; 0x9a
200077b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200077b8:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200077bc:	08082020 	stmdaeq	r8, {r5, sp}
200077c0:	01040082 	smlabbeq	r4, r2, r0, r0
200077c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200077c8:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200077cc:	48082020 	stmdami	r8, {r5, sp}
200077d0:	01040102 	tsteq	r4, r2, lsl #2
200077d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200077d8:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200077dc:	b0082020 	andlt	r2, r8, r0, lsr #32
200077e0:	01040101 	tsteq	r4, r1, lsl #2
200077e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200077e8:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200077ec:	00082220 	andeq	r2, r8, r0, lsr #4
200077f0:	01040100 	mrseq	r0, (UNDEF: 20)
200077f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200077f8:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200077fc:	00882420 	addeq	r2, r8, r0, lsr #8
20007800:	01040100 	mrseq	r0, (UNDEF: 20)
20007804:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007808:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000780c:	01082420 	tsteq	r8, r0, lsr #8
20007810:	01045a00 	tsteq	r4, r0, lsl #20
20007814:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007818:	0000007f 	andeq	r0, r0, pc, ror r0
2000781c:	01082420 	tsteq	r8, r0, lsr #8
20007820:	0104a400 	tsteq	r4, r0, lsl #8
20007824:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007828:	00000001 	andeq	r0, r0, r1
2000782c:	010b2320 	tsteq	fp, r0, lsr #6
20007830:	01030001 	tsteq	r3, r1
20007834:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007838:	00000000 	andeq	r0, r0, r0
2000783c:	00c4c020 	sbceq	ip, r4, r0, lsr #32
20007840:	02000002 	andeq	r0, r0, #2
20007844:	3fffffff 	svccc	0x00ffffff
20007848:	00000000 	andeq	r0, r0, r0
2000784c:	00000020 	andeq	r0, r0, r0, lsr #32
20007850:	02200002 	eoreq	r0, r0, #2
20007854:	3fffffff 	svccc	0x00ffffff
20007858:	00000000 	andeq	r0, r0, r0
2000785c:	00000020 	andeq	r0, r0, r0, lsr #32
20007860:	02400002 	subeq	r0, r0, #2
20007864:	1fffffff 	svcne	0x00ffffff
20007868:	00000000 	andeq	r0, r0, r0
2000786c:	80000020 	andhi	r0, r0, r0, lsr #32
20007870:	02400001 	subeq	r0, r0, #1
20007874:	1fffffff 	svcne	0x00ffffff
20007878:	00000000 	andeq	r0, r0, r0
2000787c:	00000010 	andeq	r0, r0, r0, lsl r0
20007880:	02400000 	subeq	r0, r0, #0
20007884:	0fffffff 	svceq	0x00ffffff
20007888:	00000000 	andeq	r0, r0, r0
2000788c:	00000010 	andeq	r0, r0, r0, lsl r0
20007890:	02300000 	eorseq	r0, r0, #0
20007894:	0fffffff 	svceq	0x00ffffff
20007898:	00000000 	andeq	r0, r0, r0
2000789c:	00000010 	andeq	r0, r0, r0, lsl r0
200078a0:	02000000 	andeq	r0, r0, #0
200078a4:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
200078a8:	00000000 	andeq	r0, r0, r0
200078ac:	00000010 	andeq	r0, r0, r0, lsl r0
200078b0:	04000000 	streq	r0, [r0], #-0
200078b4:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
200078b8:	00000000 	andeq	r0, r0, r0
200078bc:	00000010 	andeq	r0, r0, r0, lsl r0
200078c0:	04000000 	streq	r0, [r0], #-0
200078c4:	01ffffff 	ldrsheq	pc, [pc, #255]	; 200079cb <castle_gray_bits+0x67>	; <UNPREDICTABLE>
200078c8:	00000000 	andeq	r0, r0, r0
200078cc:	00000008 	andeq	r0, r0, r8
200078d0:	04000000 	streq	r0, [r0], #-0
200078d4:	01ffffff 	ldrsheq	pc, [pc, #255]	; 200079db <castle_gray_bits+0x77>	; <UNPREDICTABLE>
200078d8:	00000000 	andeq	r0, r0, r0
200078dc:	00000008 	andeq	r0, r0, r8
200078e0:	04000000 	streq	r0, [r0], #-0
200078e4:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
200078e8:	00000000 	andeq	r0, r0, r0
200078ec:	00000008 	andeq	r0, r0, r8
200078f0:	060001c0 	streq	r0, [r0], -r0, asr #3
200078f4:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
200078f8:	00000000 	andeq	r0, r0, r0
200078fc:	00000008 	andeq	r0, r0, r8
20007900:	04000220 	streq	r0, [r0], #-544	; 0xfffffde0
20007904:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
20007908:	00000000 	andeq	r0, r0, r0
2000790c:	00000008 	andeq	r0, r0, r8
20007910:	04100400 	ldreq	r0, [r0], #-1024	; 0xfffffc00
20007914:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
20007918:	00000000 	andeq	r0, r0, r0
2000791c:	00000008 	andeq	r0, r0, r8
20007920:	04a00400 	strteq	r0, [r0], #1024	; 0x400
20007924:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
20007928:	00000000 	andeq	r0, r0, r0
2000792c:	00000008 	andeq	r0, r0, r8
20007930:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
20007934:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
20007938:	00000000 	andeq	r0, r0, r0
2000793c:	00000008 	andeq	r0, r0, r8
20007940:	07400400 	strbeq	r0, [r0, -r0, lsl #8]
20007944:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20007948:	00000000 	andeq	r0, r0, r0
2000794c:	00000008 	andeq	r0, r0, r8
20007950:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
20007954:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20007958:	00000000 	andeq	r0, r0, r0
2000795c:	00000008 	andeq	r0, r0, r8
20007960:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00

20007964 <castle_gray_bits>:
	...
2000796c:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20007970:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
2000797c:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20007980:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
2000798c:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20007990:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007994:	00000000 	andeq	r0, r0, r0
20007998:	80000000 	andhi	r0, r0, r0
2000799c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200079a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200079a4:	00000000 	andeq	r0, r0, r0
200079a8:	c0000000 	andgt	r0, r0, r0
200079ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200079b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200079b4:	00000000 	andeq	r0, r0, r0
200079b8:	e0000000 	and	r0, r0, r0
200079bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200079c0:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
200079c4:	00000000 	andeq	r0, r0, r0
200079c8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200079cc:	f3ffcfff 			; <UNDEFINED> instruction: 0xf3ffcfff
200079d0:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
200079d4:	00000000 	andeq	r0, r0, r0
200079d8:	fc000000 	stc2	0, cr0, [r0], {-0}
200079dc:	f1ff8fff 			; <UNDEFINED> instruction: 0xf1ff8fff
200079e0:	fff9ff3f 			; <UNDEFINED> instruction: 0xfff9ff3f
200079e4:	00000000 	andeq	r0, r0, r0
200079e8:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
200079ec:	f0ff8fef 			; <UNDEFINED> instruction: 0xf0ff8fef
200079f0:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
200079f4:	00000000 	andeq	r0, r0, r0
200079f8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
200079fc:	e0ff87ef 	rscs	r8, pc, pc, ror #15
20007a00:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
20007a04:	00000000 	andeq	r0, r0, r0
20007a08:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20007a0c:	c07e07e7 	rsbsgt	r0, lr, r7, ror #15
20007a10:	ffe0fc1f 			; <UNDEFINED> instruction: 0xffe0fc1f
20007a14:	00000000 	andeq	r0, r0, r0
20007a18:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20007a1c:	001c07e7 	andseq	r0, ip, r7, ror #15
20007a20:	ffe0380e 	vcmla.f32	d19, d0, d14[0], #170
20007a24:	00000000 	andeq	r0, r0, r0
20007a28:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20007a2c:	000003e3 	andeq	r0, r0, r3, ror #7
20007a30:	f7c00000 			; <UNDEFINED> instruction: 0xf7c00000
20007a34:	00000000 	andeq	r0, r0, r0
20007a38:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20007a3c:	000001c3 	andeq	r0, r0, r3, asr #3
20007a40:	e7800000 	str	r0, [r0, r0]
20007a44:	00000000 	andeq	r0, r0, r0
20007a48:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20007a4c:	00000003 	andeq	r0, r0, r3
20007a50:	c3800000 	orrgt	r0, r0, #0
20007a54:	00000000 	andeq	r0, r0, r0
20007a58:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20007a5c:	00000001 	andeq	r0, r0, r1
20007a60:	c0000000 	andgt	r0, r0, r0
20007a64:	00000000 	andeq	r0, r0, r0
20007a68:	9ff00000 	svcls	0x00f00000	; IMB
20007a6c:	00000001 	andeq	r0, r0, r1
20007a70:	80000000 	andhi	r0, r0, r0
20007a74:	00000000 	andeq	r0, r0, r0
20007a78:	8ff00000 	svchi	0x00f00000	; IMB
20007a7c:	00000000 	andeq	r0, r0, r0
20007a80:	80000000 	andhi	r0, r0, r0
20007a84:	00000000 	andeq	r0, r0, r0
20007a88:	8ff80000 	svchi	0x00f80000
	...
20007a98:	0ffc0000 	svceq	0x00fc0000
	...
20007aa8:	0ffc0000 	svceq	0x00fc0000
	...
20007ab8:	0ffc0000 	svceq	0x00fc0000
	...
20007ac8:	0ffc0000 	svceq	0x00fc0000
	...
20007ad8:	0ffc0000 	svceq	0x00fc0000
	...
20007ae8:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
20007af8:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
20007b08:	07fe0000 	ldrbeq	r0, [lr, r0]!
20007b0c:	03800000 	orreq	r0, r0, #0
	...
20007b18:	03fe0000 	mvnseq	r0, #0
20007b1c:	02000000 	andeq	r0, r0, #0
	...
20007b28:	03ff0000 	mvnseq	r0, #0
20007b2c:	02000000 	andeq	r0, r0, #0
	...
20007b38:	03ff0000 	mvnseq	r0, #0
20007b3c:	02000000 	andeq	r0, r0, #0
	...
20007b48:	03ff0000 	mvnseq	r0, #0
20007b4c:	02000000 	andeq	r0, r0, #0
	...
20007b58:	03ff0000 	mvnseq	r0, #0
20007b5c:	02800c00 	addeq	r0, r0, #0, 24
20007b60:	00000060 	andeq	r0, r0, r0, rrx
20007b64:	00000000 	andeq	r0, r0, r0
20007b68:	03ff0000 	mvnseq	r0, #0
20007b6c:	03000800 	movweq	r0, #2048	; 0x800
20007b70:	00000040 	andeq	r0, r0, r0, asr #32
20007b74:	00000000 	andeq	r0, r0, r0
20007b78:	03ff0000 	mvnseq	r0, #0
20007b7c:	03000800 	movweq	r0, #2048	; 0x800
20007b80:	00000040 	andeq	r0, r0, r0, asr #32
20007b84:	00000000 	andeq	r0, r0, r0
20007b88:	03ff8000 	mvnseq	r8, #0
20007b8c:	03000a00 	movweq	r0, #2560	; 0xa00
20007b90:	00000040 	andeq	r0, r0, r0, asr #32
20007b94:	00000000 	andeq	r0, r0, r0
20007b98:	01ffb000 	mvnseq	fp, r0
20007b9c:	03000c00 	movweq	r0, #3072	; 0xc00
20007ba0:	00000040 	andeq	r0, r0, r0, asr #32
20007ba4:	00000000 	andeq	r0, r0, r0
20007ba8:	01fff800 	mvnseq	pc, r0, lsl #16
20007bac:	07800c00 	streq	r0, [r0, r0, lsl #24]
20007bb0:	00000060 	andeq	r0, r0, r0, rrx
20007bb4:	00000000 	andeq	r0, r0, r0
20007bb8:	01fffc00 	mvnseq	pc, r0, lsl #24
20007bbc:	04001800 	streq	r1, [r0], #-2048	; 0xfffff800
20007bc0:	00c00058 	sbceq	r0, r0, r8, asr r0
20007bc4:	00000000 	andeq	r0, r0, r0
20007bc8:	00fffc00 	rscseq	pc, pc, r0, lsl #24
20007bcc:	06001400 	streq	r1, [r0], -r0, lsl #8
20007bd0:	00c000c0 	sbceq	r0, r0, r0, asr #1
20007bd4:	00000000 	andeq	r0, r0, r0
20007bd8:	007ffc00 	rsbseq	pc, pc, r0, lsl #24
20007bdc:	45001000 	strmi	r1, [r0, #-0]
20007be0:	008000a0 	addeq	r0, r0, r0, lsr #1
20007be4:	00000000 	andeq	r0, r0, r0
20007be8:	007ffe00 	rsbseq	pc, pc, r0, lsl #28
20007bec:	80001000 	andhi	r1, r0, r0
20007bf0:	008000c1 	addeq	r0, r0, r1, asr #1
20007bf4:	00000000 	andeq	r0, r0, r0
20007bf8:	003ffe00 	eorseq	pc, pc, r0, lsl #28
20007bfc:	00001000 	andeq	r1, r0, r0
20007c00:	00a000f0 	strdeq	r0, [r0], r0	; <UNPREDICTABLE>
20007c04:	00000000 	andeq	r0, r0, r0
20007c08:	003fff00 	eorseq	pc, pc, r0, lsl #30
20007c0c:	00001000 	andeq	r1, r0, r0
20007c10:	00c000e0 	sbceq	r0, r0, r0, ror #1
20007c14:	00000000 	andeq	r0, r0, r0
20007c18:	001fff80 	andseq	pc, pc, r0, lsl #31
20007c1c:	02001800 	andeq	r1, r0, #0, 16
20007c20:	00c000c0 	sbceq	r0, r0, r0, asr #1
20007c24:	00000000 	andeq	r0, r0, r0
20007c28:	0019fffe 			; <UNDEFINED> instruction: 0x0019fffe
20007c2c:	02001400 	andeq	r1, r0, #0, 8
20007c30:	00803000 	addeq	r3, r0, r0
20007c34:	00000000 	andeq	r0, r0, r0
20007c38:	0018ffff 			; <UNDEFINED> instruction: 0x0018ffff
20007c3c:	05033f00 	streq	r3, [r3, #-3840]	; 0xfffff100
20007c40:	01000000 	mrseq	r0, (UNDEF: 0)
20007c44:	c0000000 	andgt	r0, r0, r0
20007c48:	0008ffff 	strdeq	pc, [r8], -pc	; <UNPREDICTABLE>
20007c4c:	00c0e400 	sbceq	lr, r0, r0, lsl #8
20007c50:	01000004 	tsteq	r0, r4
20007c54:	c0000000 	andgt	r0, r0, r0
20007c58:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20007c5c:	00002000 	andeq	r2, r0, r0
20007c60:	01000008 	tsteq	r0, r8
20007c64:	e0000000 	and	r0, r0, r0
20007c68:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20007c6c:	00001000 	andeq	r1, r0, r0
20007c70:	01000006 	tsteq	r0, r6
20007c74:	e0000000 	and	r0, r0, r0
20007c78:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
20007c7c:	80000000 	andhi	r0, r0, r0
20007c80:	01800001 	orreq	r0, r0, r1
20007c84:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20007c88:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
20007c8c:	00400000 	subeq	r0, r0, r0
20007c90:	01400000 	mrseq	r0, (UNDEF: 64)
20007c94:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20007c98:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
20007c9c:	03800000 	orreq	r0, r0, #0
20007ca0:	01300000 	teqeq	r0, r0
20007ca4:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20007ca8:	00001bff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
20007cac:	10e00000 	rscne	r0, r0, r0
20007cb0:	03000000 	movweq	r0, #0
20007cb4:	fc000000 	stc2	0, cr0, [r0], {-0}
20007cb8:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20007cbc:	0f800000 	svceq	0x00800000
20007cc0:	03900000 	orrseq	r0, r0, #0
20007cc4:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20007cc8:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20007ccc:	00000000 	andeq	r0, r0, r0
20007cd0:	03e00000 	mvneq	r0, #0
20007cd4:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20007cd8:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20007cdc:	00000000 	andeq	r0, r0, r0
20007ce0:	03f40000 	mvnseq	r0, #0
20007ce4:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20007ce8:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20007cec:	00002000 	andeq	r2, r0, r0
20007cf0:	01f80000 	mvnseq	r0, r0
20007cf4:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20007cf8:	0000007f 	andeq	r0, r0, pc, ror r0
20007cfc:	0010c000 	andseq	ip, r0, r0
20007d00:	03f80000 	mvnseq	r0, #0
20007d04:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20007d08:	0000003f 	andeq	r0, r0, pc, lsr r0
20007d0c:	000f0000 	andeq	r0, pc, r0
20007d10:	03e000e0 	mvneq	r0, #224	; 0xe0
20007d14:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20007d18:	0000001f 	andeq	r0, r0, pc, lsl r0
20007d1c:	00026000 	andeq	r6, r2, r0
20007d20:	035001f0 	cmpeq	r0, #240, 2	; 0x3c
20007d24:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20007d28:	0000001f 	andeq	r0, r0, pc, lsl r0
20007d2c:	00118000 	andseq	r8, r1, r0
20007d30:	03ec01f0 	mvneq	r0, #240, 2	; 0x3c
20007d34:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
20007d38:	0000000f 	andeq	r0, r0, pc
20007d3c:	200e0000 	andcs	r0, lr, r0
20007d40:	00a022f0 	strdeq	r2, [r0], r0	; <UNPREDICTABLE>
20007d44:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
20007d48:	00000007 	andeq	r0, r0, r7
20007d4c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
20007d50:	03c0c170 	biceq	ip, r0, #112, 2
20007d54:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
20007d58:	00000003 	andeq	r0, r0, r3
20007d5c:	e4000000 	str	r0, [r0], #-0
20007d60:	03c270f3 	biceq	r7, r2, #243	; 0xf3

20007d64 <castle_light_bits>:
	...
20007dc0:	00000040 	andeq	r0, r0, r0, asr #32
	...
20007dcc:	0c003000 	stceq	0, cr3, [r0], {-0}
20007dd0:	00000040 	andeq	r0, r0, r0, asr #32
	...
20007ddc:	0e007000 	cdpeq	0, 0, cr7, cr0, cr0, {0}
20007de0:	000600c0 	andeq	r0, r6, r0, asr #1
	...
20007dec:	0f007010 	svceq	0x00007010
20007df0:	000601e0 	andeq	r0, r6, r0, ror #3
	...
20007dfc:	1f007810 	svcne	0x00007810
20007e00:	000601e0 	andeq	r0, r6, r0, ror #3
	...
20007e0c:	3f81f818 	svccc	0x0081f818
20007e10:	001f03e0 	andseq	r0, pc, r0, ror #7
	...
20007e1c:	ffe3f818 			; <UNDEFINED> instruction: 0xffe3f818
20007e20:	001fc7f1 			; <UNDEFINED> instruction: 0x001fc7f1
	...
20007e2c:	fffffc1c 			; <UNDEFINED> instruction: 0xfffffc1c
20007e30:	083fffff 	ldmdaeq	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
	...
20007e3c:	fffffe3c 			; <UNDEFINED> instruction: 0xfffffe3c
20007e40:	187fffff 	ldmdane	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
	...
20007e4c:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20007e50:	3c7fffff 	ldclcc	15, cr15, [pc], #-1020	; 20007a5c <castle_gray_bits+0xf8>
	...
20007e5c:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20007e60:	3fffffff 	svccc	0x00ffffff
20007e64:	00000000 	andeq	r0, r0, r0
20007e68:	60000000 	andvs	r0, r0, r0
20007e6c:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20007e70:	7fffffff 	svcvc	0x00ffffff
20007e74:	00000000 	andeq	r0, r0, r0
20007e78:	70000000 	andvc	r0, r0, r0
20007e7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e80:	7fffffff 	svcvc	0x00ffffff
20007e84:	00000000 	andeq	r0, r0, r0
20007e88:	70000000 	andvc	r0, r0, r0
20007e8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e94:	00000000 	andeq	r0, r0, r0
20007e98:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20007e9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007ea0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007ea4:	00000000 	andeq	r0, r0, r0
20007ea8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20007eac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007eb0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007eb4:	00000000 	andeq	r0, r0, r0
20007eb8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20007ebc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007ec0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007ec4:	00000000 	andeq	r0, r0, r0
20007ec8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20007ecc:	fb6fffff 	blx	21c07ed2 <firstTime.4040+0x1bf9816>
20007ed0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007ed4:	00000000 	andeq	r0, r0, r0
20007ed8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20007edc:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
20007ee0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007ee4:	00000000 	andeq	r0, r0, r0
20007ee8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20007eec:	f407ffff 			; <UNDEFINED> instruction: 0xf407ffff
20007ef0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007ef4:	00000000 	andeq	r0, r0, r0
20007ef8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20007efc:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
20007f00:	ffffff6d 			; <UNDEFINED> instruction: 0xffffff6d
20007f04:	00000000 	andeq	r0, r0, r0
20007f08:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20007f0c:	f80fffff 			; <UNDEFINED> instruction: 0xf80fffff
20007f10:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20007f14:	00000000 	andeq	r0, r0, r0
20007f18:	fc000000 	stc2	0, cr0, [r0], {-0}
20007f1c:	f80fedbf 			; <UNDEFINED> instruction: 0xf80fedbf
20007f20:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20007f24:	00000000 	andeq	r0, r0, r0
20007f28:	fc000000 	stc2	0, cr0, [r0], {-0}
20007f2c:	f80fc01f 			; <UNDEFINED> instruction: 0xf80fc01f
20007f30:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
20007f34:	00000000 	andeq	r0, r0, r0
20007f38:	fc000000 	stc2	0, cr0, [r0], {-0}
20007f3c:	f90fc81f 			; <UNDEFINED> instruction: 0xf90fc81f
20007f40:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
20007f44:	00000000 	andeq	r0, r0, r0
20007f48:	fc000000 	stc2	0, cr0, [r0], {-0}
20007f4c:	f90fd41f 			; <UNDEFINED> instruction: 0xf90fd41f
20007f50:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20007f54:	00000000 	andeq	r0, r0, r0
20007f58:	fc000000 	stc2	0, cr0, [r0], {-0}
20007f5c:	f90fe03f 			; <UNDEFINED> instruction: 0xf90fe03f
20007f60:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
20007f64:	00000000 	andeq	r0, r0, r0
20007f68:	fc000000 	stc2	0, cr0, [r0], {-0}
20007f6c:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
20007f70:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
20007f74:	00000000 	andeq	r0, r0, r0
20007f78:	fc000000 	stc2	0, cr0, [r0], {-0}
20007f7c:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
20007f80:	fedbff19 	mrc2	15, 6, pc, cr11, cr9, {0}
20007f84:	00000000 	andeq	r0, r0, r0
20007f88:	fc000000 	stc2	0, cr0, [r0], {-0}
20007f8c:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
20007f90:	fd01ff11 	stc2	15, cr15, [r1, #-68]	; 0xffffffbc
20007f94:	00000000 	andeq	r0, r0, r0
20007f98:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20007f9c:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
20007fa0:	fd01ff19 	stc2	15, cr15, [r1, #-100]	; 0xffffff9c
20007fa4:	00000000 	andeq	r0, r0, r0
20007fa8:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20007fac:	f007e03f 			; <UNDEFINED> instruction: 0xf007e03f
20007fb0:	fc01ff01 	stc2	15, cr15, [r1], {1}
20007fb4:	00000000 	andeq	r0, r0, r0
20007fb8:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20007fbc:	f007c01f 			; <UNDEFINED> instruction: 0xf007c01f
20007fc0:	fe03ff01 	cdp2	15, 0, cr15, cr3, cr1, {0}
20007fc4:	00000000 	andeq	r0, r0, r0
20007fc8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20007fcc:	b007c01f 	andlt	ip, r7, pc, lsl r0
20007fd0:	fe03fe01 	cdp2	14, 0, cr15, cr3, cr1, {0}
20007fd4:	00000000 	andeq	r0, r0, r0
20007fd8:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20007fdc:	0007c01f 	andeq	ip, r7, pc, lsl r0
20007fe0:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
20007fe4:	00000000 	andeq	r0, r0, r0
20007fe8:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20007fec:	0007c01f 	andeq	ip, r7, pc, lsl r0
20007ff0:	fe03fe10 	mcr2	14, 0, pc, cr3, cr0, {0}	; <UNPREDICTABLE>
20007ff4:	00000000 	andeq	r0, r0, r0
20007ff8:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20007ffc:	0007c21f 	andeq	ip, r7, pc, lsl r2
20008000:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
20008004:	00000000 	andeq	r0, r0, r0
20008008:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
2000800c:	0087c31f 	addeq	ip, r7, pc, lsl r3
20008010:	fe03a400 	cdp2	4, 0, cr10, cr3, cr0, {0}
20008014:	00000000 	andeq	r0, r0, r0
20008018:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
2000801c:	00c7c31f 	sbceq	ip, r7, pc, lsl r3
20008020:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
20008024:	00000000 	andeq	r0, r0, r0
20008028:	ffe60000 			; <UNDEFINED> instruction: 0xffe60000
2000802c:	00c4c01f 	sbceq	ip, r4, pc, lsl r0
20008030:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20008034:	00000000 	andeq	r0, r0, r0
20008038:	ffe70000 			; <UNDEFINED> instruction: 0xffe70000
2000803c:	8000001f 	andhi	r0, r0, pc, lsl r0
20008040:	fc000001 	stc2	0, cr0, [r0], {1}
20008044:	00000000 	andeq	r0, r0, r0
20008048:	fff70000 			; <UNDEFINED> instruction: 0xfff70000
2000804c:	8000001f 	andhi	r0, r0, pc, lsl r0
20008050:	fc000009 	stc2	0, cr0, [r0], {9}
20008054:	00000000 	andeq	r0, r0, r0
20008058:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
2000805c:	8000001f 	andhi	r0, r0, pc, lsl r0
20008060:	fc200001 	stc2	0, cr0, [r0], #-4
20008064:	00000000 	andeq	r0, r0, r0
20008068:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
2000806c:	0000001f 	andeq	r0, r0, pc, lsl r0
20008070:	fc300000 	ldc2	0, cr0, [r0], #-0
20008074:	00000000 	andeq	r0, r0, r0
20008078:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
2000807c:	0000000f 	andeq	r0, r0, pc
20008080:	fc300000 	ldc2	0, cr0, [r0], #-0
20008084:	00000000 	andeq	r0, r0, r0
20008088:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
2000808c:	0000000f 	andeq	r0, r0, pc
20008090:	fc000000 	stc2	0, cr0, [r0], {-0}
20008094:	00000000 	andeq	r0, r0, r0
20008098:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
2000809c:	1000000f 	andne	r0, r0, pc
200080a0:	fc000000 	stc2	0, cr0, [r0], {-0}
200080a4:	00000000 	andeq	r0, r0, r0
200080a8:	ffffe400 			; <UNDEFINED> instruction: 0xffffe400
200080ac:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
200080b0:	f8080000 			; <UNDEFINED> instruction: 0xf8080000
200080b4:	00000000 	andeq	r0, r0, r0
200080b8:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200080bc:	0000000f 	andeq	r0, r0, pc
200080c0:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200080c4:	00000000 	andeq	r0, r0, r0
200080c8:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200080cc:	00000007 	andeq	r0, r0, r7
200080d0:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
200080d4:	00000000 	andeq	r0, r0, r0
200080d8:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
200080dc:	00000007 	andeq	r0, r0, r7
200080e0:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
200080e4:	00000000 	andeq	r0, r0, r0
200080e8:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
200080ec:	00100007 	andseq	r0, r0, r7
200080f0:	f8040000 			; <UNDEFINED> instruction: 0xf8040000
200080f4:	00000000 	andeq	r0, r0, r0
200080f8:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
200080fc:	00080007 	andeq	r0, r8, r7
20008100:	f80001c0 			; <UNDEFINED> instruction: 0xf80001c0
20008104:	00000000 	andeq	r0, r0, r0
20008108:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
2000810c:	00000007 	andeq	r0, r0, r7
20008110:	f8080300 			; <UNDEFINED> instruction: 0xf8080300
20008114:	00000000 	andeq	r0, r0, r0
20008118:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
2000811c:	00200007 	eoreq	r0, r0, r7
20008120:	f8080200 			; <UNDEFINED> instruction: 0xf8080200
20008124:	00000000 	andeq	r0, r0, r0
20008128:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
2000812c:	00000007 	andeq	r0, r0, r7
20008130:	f8000200 			; <UNDEFINED> instruction: 0xf8000200
20008134:	00000000 	andeq	r0, r0, r0
20008138:	fffffff0 			; <UNDEFINED> instruction: 0xfffffff0
2000813c:	00000007 	andeq	r0, r0, r7
20008140:	f8000100 			; <UNDEFINED> instruction: 0xf8000100
20008144:	00000000 	andeq	r0, r0, r0
20008148:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
2000814c:	01000007 	tsteq	r0, r7
20008150:	f8100280 			; <UNDEFINED> instruction: 0xf8100280
20008154:	00000000 	andeq	r0, r0, r0
20008158:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
2000815c:	02000007 	andeq	r0, r0, #7
20008160:	f8000300 			; <UNDEFINED> instruction: 0xf8000300

20008164 <title_light_bits>:
	...
20008180:	00000400 	andeq	r0, r0, r0, lsl #8
20008184:	30000000 	andcc	r0, r0, r0
20008188:	f80f9e06 			; <UNDEFINED> instruction: 0xf80f9e06
2000818c:	06300000 	ldrteq	r0, [r0], -r0
20008190:	00cb8cba 	strheq	r8, [fp], #202	; 0xca
20008194:	ba033000 	blt	200d419c <firstTime.4040+0xc5ae0>
20008198:	0000eb4f 	andeq	lr, r0, pc, asr #22
2000819c:	439ef3f0 	orrsmi	pc, lr, #240, 6	; 0xc0000003
200081a0:	f000003a 			; <UNDEFINED> instruction: 0xf000003a
200081a4:	5a478e9b 	bpl	211ebc18 <firstTime.4040+0x11dd55c>
200081a8:	9b300000 	blls	20c081b0 <firstTime.4040+0xbf9af4>
200081ac:	019bcd36 	orrseq	ip, fp, r6, lsr sp
200081b0:	66db3000 	ldrbvs	r3, [fp], r0
200081b4:	000319d9 	ldrdeq	r1, [r3], -r9
200081b8:	19667330 	stmdbne	r6!, {r4, r5, r8, r9, ip, sp, lr}^
200081bc:	30000310 	andcc	r0, r0, r0, lsl r3
200081c0:	00000001 	andeq	r0, r0, r1
200081c4:	80000000 	andhi	r0, r0, r0
200081c8:	001d3e7b 	andseq	r3, sp, fp, ror lr
200081cc:	0ac00000 	beq	1f0081d4 <startup-0xff7e2c>
200081d0:	00000528 	andeq	r0, r0, r8, lsr #10
200081d4:	ec3a4000 	ldc	0, cr4, [sl], #-0
200081d8:	0000000d 	andeq	r0, r0, sp
200081dc:	05240bc0 	streq	r0, [r4, #-3008]!	; 0xfffff440
200081e0:	00f00000 	rscseq	r0, r0, r0
200081e4:	001c0000 	andseq	r0, ip, r0
200081e8:	03ebb000 	mvneq	fp, #0
200081ec:	00000000 	andeq	r0, r0, r0
200081f0:	0c032330 	stceq	3, cr2, [r3], {48}	; 0x30
200081f4:	300123e4 	andcc	r2, r1, r4, ror #7
200081f8:	940c1b2a 	strls	r1, [ip], #-2858	; 0xfffff4d6
200081fc:	ea300120 	b	20c08684 <firstTime.4040+0xbf9fc8>
20008200:	ec860c3d 	stc	12, cr0, [r6], {61}	; 0x3d
20008204:	06ea3001 	strbteq	r3, [sl], r1
20008208:	01e69648 	mvneq	r9, r8, asr #12
2000820c:	4b9e6b30 	blmi	1e7a2ed4 <startup-0x185d12c>
20008210:	30012696 	mulcc	r1, r6, r6
20008214:	92bbb06b 	adcsls	fp, fp, #107	; 0x6b
20008218:	69f00126 	ldmibvs	r0!, {r1, r2, r5, r8}^
2000821c:	2691b832 			; <UNDEFINED> instruction: 0x2691b832
20008220:	1e687001 	cdpne	0, 6, cr7, cr8, cr1, {0}
20008224:	010e9110 	tsteq	lr, r0, lsl r1
	...

20008238 <title_gray_bits>:
	...
20008240:	40000000 	andmi	r0, r0, r0
20008244:	0f840000 	svceq	0x00840000
20008248:	00b0c3fe 	ldrshteq	ip, [r0], lr
2000824c:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20008250:	001f8f1f 	andseq	r8, pc, pc, lsl pc	; <UNPREDICTABLE>
20008254:	fffffbf8 			; <UNDEFINED> instruction: 0xfffffbf8
20008258:	c8001fff 	stmdagt	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
2000825c:	07f061f9 			; <UNDEFINED> instruction: 0x07f061f9
20008260:	f1cc001f 			; <UNDEFINED> instruction: 0xf1cc001f
20008264:	be347305 	cdplt	3, 3, cr7, cr4, cr5, {0}
20008268:	05f0ce00 	ldrbeq	ip, [r0, #3584]!	; 0xe00
2000826c:	007e1430 	rsbseq	r1, lr, r0, lsr r4
20008270:	2041080f 	subcs	r0, r1, pc, lsl #16
20008274:	0e003e01 	cdpeq	14, 0, cr3, cr0, cr1, {0}
20008278:	01384060 	teqeq	r8, r0, rrx
2000827c:	600c001e 	andvs	r0, ip, lr, lsl r0
20008280:	1c4030c0 	mcrrne	0, 12, r3, r0, cr0
20008284:	10208c00 	eorne	r8, r0, r0, lsl #24
20008288:	0038c024 	eorseq	ip, r8, r4, lsr #32
2000828c:	0411088c 	ldreq	r0, [r1], #-2188	; 0xfffff774
20008290:	c800f8ce 	stmdagt	r0, {r1, r2, r3, r6, r7, fp, ip, sp, lr, pc}
20008294:	ffe6990c 			; <UNDEFINED> instruction: 0xffe6990c
20008298:	7cfa0178 	ldfvce	f0, [sl], #480	; 0x1e0
2000829c:	3fe0c184 	svccc	0x00e0c184
200082a0:	013ff400 	teqeq	pc, r0, lsl #8	; <UNPREDICTABLE>
200082a4:	001fc0c7 	andseq	ip, pc, r7, asr #1
200082a8:	03c03ff0 	biceq	r3, r0, #240, 30	; 0x3c0
200082ac:	fc0007e0 	stc2	7, cr0, [r0], {224}	; 0xe0
200082b0:	e003803f 	and	r8, r3, pc, lsr r0
200082b4:	7f0c009f 	svcvc	0x000c009f
200082b8:	ffc1fbe4 			; <UNDEFINED> instruction: 0xffc1fbe4
200082bc:	fc140c03 	ldc2	12, cr0, [r4], {3}
200082c0:	03ffc7ff 	mvnseq	ip, #66846720	; 0x3fc0000
200082c4:	f3fc1c0c 	vdup.32	d17, d12[1]
200082c8:	0e02dc1b 	mcreq	12, 0, sp, cr2, cr11, {0}
200082cc:	63f3e490 	mvnsvs	lr, #144, 8	; 0x90000000
200082d0:	018e0218 	orreq	r0, lr, r8, lsl r2
200082d4:	1251e382 	subsne	lr, r1, #134217730	; 0x8000002
200082d8:	88018e02 	stmdahi	r1, {r1, r9, sl, fp, pc}
200082dc:	020061a7 	andeq	r6, r0, #-1073741783	; 0xc0000029
200082e0:	2460008e 	strbtcs	r0, [r0], #-142	; 0xffffff72
200082e4:	8e021041 	cdphi	0, 0, cr1, cr2, cr1, {2}
200082e8:	41000300 	mrsmi	r0, LR_irq
200082ec:	000e0290 	muleq	lr, r0, r2
200082f0:	9048008d 	subls	r0, r8, sp, lsl #1
200082f4:	81040c02 	tsthi	r4, r2, lsl #24
200082f8:	02a04c87 	adceq	r4, r0, #34560	; 0x8700
200082fc:	cffffffc 	svcgt	0x00fffffc
20008300:	8203e2fc 	andhi	lr, r3, #252, 4	; 0xc000000f
20008304:	e3f81c07 	mvns	r1, #1792	; 0x700
20008308:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

2000830c <title_black_bits>:
	...
20008334:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
20008338:	01000040 	tsteq	r0, r0, asr #32
2000833c:	400c0000 	andmi	r0, ip, r0
20008340:	00010080 	andeq	r0, r1, r0, lsl #1
20008344:	9c200400 	cfstrsls	mvf0, [r0], #-0
20008348:	000001c4 	andeq	r0, r0, r4, asr #3
2000834c:	a4803104 	strge	r3, [r0], #260	; 0x104
20008350:	04c00001 	strbeq	r0, [r0], #1
20008354:	02240209 	eoreq	r0, r4, #-1879048192	; 0x90000000
20008358:	89044000 	stmdbhi	r4, {lr}
2000835c:	00042602 	andeq	r2, r4, r2, lsl #12
20008360:	e2888440 	add	r8, r8, #64, 8	; 0x40000000
20008364:	00000421 	andeq	r0, r0, r1, lsr #8
20008368:	001966f2 			; <UNDEFINED> instruction: 0x001966f2
2000836c:	03000007 	movweq	r0, #7
20008370:	00020000 	andeq	r0, r2, r0
20008374:	f4000000 	vst4.8	{d0-d3}, [r0], r0
20008378:	00003a10 	andeq	r3, r0, r0, lsl sl
2000837c:	10058000 	andne	r8, r5, r0
20008380:	00000012 	andeq	r0, r0, r2, lsl r0
20008384:	1ad87400 	bne	1f62538c <startup-0x9dac74>
20008388:	80000000 	andhi	r0, r0, r0
2000838c:	0022041b 	eoreq	r0, r2, fp, lsl r4
20008390:	00004000 	andeq	r4, r0, r0
20008394:	00003800 	andeq	r3, r0, r0, lsl #16
20008398:	0000c0c0 	andeq	ip, r0, r0, asr #1
2000839c:	c0000000 	andgt	r0, r0, r0
200083a0:	08000045 	stmdaeq	r0, {r0, r2, r6}
200083a4:	144000c7 	strbne	r0, [r0], #-199	; 0xffffff39
200083a8:	01281040 			; <UNDEFINED> instruction: 0x01281040
200083ac:	71144000 	tstvc	r4, r0
200083b0:	00190810 	andseq	r0, r9, r0, lsl r8
200083b4:	90019440 	andls	r9, r1, r0, asr #8
200083b8:	4000c928 	andmi	ip, r0, r8, lsr #18
200083bc:	2c444c94 	mcrrcs	12, 9, r4, r4, cr4
200083c0:	96000049 	strls	r0, [r0], -r9, asr #32
200083c4:	49264740 	stmdbmi	r6!, {r6, r8, r9, sl, lr}
200083c8:	60938000 	addsvs	r8, r3, r0
200083cc:	00512268 	subseq	r2, r1, r8, ror #4
200083d0:	30000000 	andcc	r0, r0, r0
200083d4:	00001d03 	andeq	r1, r0, r3, lsl #26
	...

200083e0 <bg_bits>:
	...
200083f0:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
200083f4:	0000001f 	andeq	r0, r0, pc, lsl r0
	...
20008400:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
20008404:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
20008410:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
20008414:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
	...
20008420:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20008424:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
	...
20008430:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20008434:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
20008440:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20008444:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20008450:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
20008454:	01ffffff 	ldrsheq	pc, [pc, #255]	; 2000855b <bg_bits+0x17b>	; <UNPREDICTABLE>
20008458:	0001f000 	andeq	pc, r1, r0
2000845c:	00000000 	andeq	r0, r0, r0
20008460:	007fe000 	rsbseq	lr, pc, r0
20008464:	0ffffffe 	svceq	0x00fffffe
20008468:	0003f800 	andeq	pc, r3, r0, lsl #16
2000846c:	00000000 	andeq	r0, r0, r0
20008470:	003fe000 	eorseq	lr, pc, r0
20008474:	7fffffc0 	svcvc	0x00ffffc0
20008478:	0003f800 	andeq	pc, r3, r0, lsl #16
2000847c:	001f8000 	andseq	r8, pc, r0
20008480:	001fe000 	andseq	lr, pc, r0
20008484:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20008488:	0003f801 	andeq	pc, r3, r1, lsl #16
2000848c:	003fc000 	eorseq	ip, pc, r0
20008490:	003fe000 	eorseq	lr, pc, r0
20008494:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
20008498:	3f83f807 	svccc	0x0083f807
2000849c:	003fe000 	eorseq	lr, pc, r0
200084a0:	01ffe000 	mvnseq	lr, r0
200084a4:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200084a8:	7fc3f80f 	svcvc	0x00c3f80f
200084ac:	003fe7f8 	ldrshteq	lr, [pc], -r8
200084b0:	07ffe000 	ldrbeq	lr, [pc, r0]!
200084b4:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
200084b8:	7fe1f01f 	svcvc	0x00e1f01f
200084bc:	003ffffc 	ldrshteq	pc, [pc], -ip	; <UNPREDICTABLE>
200084c0:	3fffc000 	svccc	0x00ffc000
200084c4:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
200084c8:	7ff0003f 	svcvc	0x00f0003f
200084cc:	007ffffc 	ldrshteq	pc, [pc], #-252	; <UNPREDICTABLE>
200084d0:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
200084d4:	ff000000 			; <UNDEFINED> instruction: 0xff000000
200084d8:	7ff8007f 	svcvc	0x00f8007f
200084dc:	3ffffffc 	svccc	0x00fffffc
200084e0:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
200084e4:	f8000003 			; <UNDEFINED> instruction: 0xf8000003
200084e8:	7ffc00ff 	svcvc	0x00fc00ff
200084ec:	7ffffffc 	svcvc	0x00fffffc
200084f0:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200084f4:	e000000f 	and	r0, r0, pc
200084f8:	7ffe01ff 	svcvc	0x00fe01ff
200084fc:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20008500:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
20008504:	8000001f 	andhi	r0, r0, pc, lsl r0
20008508:	7fff01ff 	svcvc	0x00ff01ff
2000850c:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20008510:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20008514:	0000007f 	andeq	r0, r0, pc, ror r0
20008518:	7fff83ff 	svcvc	0x00ff83ff
2000851c:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
20008520:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20008524:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20008528:	7fffc3fe 	svcvc	0x00ffc3fe
2000852c:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
20008530:	fc7ffff0 	ldc2l	15, cr15, [pc], #-960	; 20008178 <title_light_bits+0x14>
20008534:	07c001ff 			; <UNDEFINED> instruction: 0x07c001ff
20008538:	7fffe7fc 	svcvc	0x00ffe7fc
2000853c:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
20008540:	f0fffffe 			; <UNDEFINED> instruction: 0xf0fffffe
20008544:	0fe007ff 	svceq	0x00e007ff
20008548:	7ffff7fc 	svcvc	0x00fff7fc
2000854c:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
20008550:	c0ffffff 	ldrshtgt	pc, [pc], #255	; <UNPREDICTABLE>
20008554:	0fe00fff 	svceq	0x00e00fff
20008558:	7ffffff8 	svcvc	0x00fffff8
2000855c:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20008560:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20008667 <bg_bits+0x287>	; <UNPREDICTABLE>
20008564:	0fe01fff 	svceq	0x00e01fff
20008568:	7ffffff8 	svcvc	0x00fffff8
2000856c:	7ffffc00 	svcvc	0x00fffc00
20008570:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20008677 <bg_bits+0x297>	; <UNPREDICTABLE>
20008574:	0fe03ffe 	svceq	0x00e03ffe
20008578:	3fdffff0 	svccc	0x00dffff0
2000857c:	3ffffe00 	svccc	0x00fffe00
20008580:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20008687 <bg_bits+0x2a7>	; <UNPREDICTABLE>
20008584:	0fe03ff8 	svceq	0x00e03ff8
20008588:	3fe7fff0 	svccc	0x00e7fff0
2000858c:	07fffe00 	ldrbeq	pc, [pc, r0, lsl #28]!	; <UNPREDICTABLE>
20008590:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
20008594:	07c07ff0 			; <UNDEFINED> instruction: 0x07c07ff0
20008598:	1fe7fff0 	svcne	0x00e7fff0
2000859c:	0ffffe00 	svceq	0x00fffe00
200085a0:	03fc00ff 	mvnseq	r0, #255	; 0xff
200085a4:	0000ffe0 	andeq	pc, r0, r0, ror #31
200085a8:	1ff3ffe0 	svcne	0x00f3ffe0
200085ac:	1ffffe00 	svcne	0x00fffe00
200085b0:	03fc001f 	mvnseq	r0, #31
200085b4:	0001ff80 	andeq	pc, r1, r0, lsl #31
200085b8:	1ff9ffe0 	svcne	0x00f9ffe0
200085bc:	3ffffe00 	svccc	0x00fffe00
200085c0:	03fc0007 	mvnseq	r0, #7
200085c4:	0001ff80 	andeq	pc, r1, r0, lsl #31
200085c8:	0ffcffe0 	svceq	0x00fcffe0
200085cc:	3ffdfe00 	svccc	0x00fdfe00
200085d0:	07f80007 	ldrbeq	r0, [r8, r7]!
200085d4:	0003ff00 	andeq	pc, r3, r0, lsl #30
200085d8:	0ffe7ff0 	svceq	0x00fe7ff0
200085dc:	3ffcfe00 	svccc	0x00fcfe00
200085e0:	07f80003 	ldrbeq	r0, [r8, r3]!
200085e4:	0007fe00 	andeq	pc, r7, r0, lsl #28
200085e8:	07fe7ff8 			; <UNDEFINED> instruction: 0x07fe7ff8
200085ec:	3ff8fe00 	svccc	0x00f8fe00
200085f0:	0ff80003 	svceq	0x00f80003
200085f4:	0007fc00 	andeq	pc, r7, r0, lsl #24
200085f8:	03fffffc 	mvnseq	pc, #252, 30	; 0x3f0
200085fc:	3ff87c00 	svccc	0x00f87c00
20008600:	0ff80003 	svceq	0x00f80003
20008604:	0007fc00 	andeq	pc, r7, r0, lsl #24
20008608:	01fffffe 	ldrsheq	pc, [pc, #254]	; 2000870e <bg_bits+0x32e>	; <UNPREDICTABLE>
2000860c:	1ff00000 	svcne	0x00f00000	; IMB
20008610:	0ff00007 	svceq	0x00f00007
20008614:	000ff800 	andeq	pc, pc, r0, lsl #16
20008618:	01ffffff 	ldrsheq	pc, [pc, #255]	; 2000871f <bg_bits+0x33f>	; <UNPREDICTABLE>
2000861c:	07f0003e 			; <UNDEFINED> instruction: 0x07f0003e
20008620:	0ff00007 	svceq	0x00f00007
20008624:	800ff000 	andhi	pc, pc, r0
20008628:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
2000862c:	03e0007f 	mvneq	r0, #127	; 0x7f
20008630:	0fe00007 	svceq	0x00e00007
20008634:	c00ff000 	andgt	pc, pc, r0
20008638:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
2000863c:	0000007f 	andeq	r0, r0, pc, ror r0
20008640:	0fe00007 	svceq	0x00e00007
20008644:	e00ff000 	and	pc, pc, r0
20008648:	007ffeff 	ldrshteq	pc, [pc], #-239	; <UNPREDICTABLE>
2000864c:	0000007f 	andeq	r0, r0, pc, ror r0
20008650:	0fe00007 	svceq	0x00e00007
20008654:	f00ff000 			; <UNDEFINED> instruction: 0xf00ff000
20008658:	003ffe7f 	eorseq	pc, pc, pc, ror lr	; <UNPREDICTABLE>
2000865c:	0000007f 	andeq	r0, r0, pc, ror r0
20008660:	0fe00007 	svceq	0x00e00007
20008664:	f80ff000 			; <UNDEFINED> instruction: 0xf80ff000
20008668:	001ffc3f 	andseq	pc, pc, pc, lsr ip	; <UNPREDICTABLE>
2000866c:	0000007f 	andeq	r0, r0, pc, ror r0
20008670:	1fe0000f 	svcne	0x00e0000f
20008674:	fc0ff000 	stc2	0, cr15, [pc], {-0}
20008678:	000ff81f 	andeq	pc, pc, pc, lsl r8	; <UNPREDICTABLE>
2000867c:	0000003e 	andeq	r0, r0, lr, lsr r0
20008680:	1fe0000f 	svcne	0x00e0000f
20008684:	fc07f000 	stc2	0, cr15, [r7], {-0}
20008688:	0007f00f 	andeq	pc, r7, pc
2000868c:	00000000 	andeq	r0, r0, r0
20008690:	1fe0000f 	svcne	0x00e0000f
20008694:	fc07f000 	stc2	0, cr15, [r7], {-0}
20008698:	00000007 	andeq	r0, r0, r7
2000869c:	00000000 	andeq	r0, r0, r0
200086a0:	1fe0000f 	svcne	0x00e0000f
200086a4:	fc07f800 	stc2	8, cr15, [r7], {-0}
200086a8:	00000003 	andeq	r0, r0, r3
200086ac:	000ff800 	andeq	pc, pc, r0, lsl #16
200086b0:	1fc0001f 	svcne	0x00c0001f
200086b4:	fc07fc00 	stc2	12, cr15, [r7], {-0}
200086b8:	00000001 	andeq	r0, r0, r1
200086bc:	001ffc00 	andseq	pc, pc, r0, lsl #24
200086c0:	1fc0003f 	svcne	0x00c0003f
200086c4:	fc07ff80 	stc2	15, cr15, [r7], {128}	; 0x80
200086c8:	00000001 	andeq	r0, r0, r1
200086cc:	003fff00 	eorseq	pc, pc, r0, lsl #30
200086d0:	3fc0003f 	svccc	0x00c0003f
200086d4:	fc07fffc 	stc2	15, cr15, [r7], {252}	; 0xfc
200086d8:	00000001 	andeq	r0, r0, r1
200086dc:	007fff80 	rsbseq	pc, pc, r0, lsl #31
200086e0:	ffc0003f 			; <UNDEFINED> instruction: 0xffc0003f
200086e4:	fc03ffff 	stc2	15, cr15, [r3], {255}	; 0xff
200086e8:	00000001 	andeq	r0, r0, r1
200086ec:	00ffffe0 	rscseq	pc, pc, r0, ror #31
200086f0:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
200086f4:	fc01ffff 	stc2	15, cr15, [r1], {255}	; 0xff
200086f8:	00000007 	andeq	r0, r0, r7
200086fc:	03fffff0 	mvnseq	pc, #240, 30	; 0x3c0
20008700:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20008704:	fc00ffff 	stc2	15, cr15, [r0], {255}	; 0xff
20008708:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000870c:	07fffff8 			; <UNDEFINED> instruction: 0x07fffff8
20008710:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20008714:	fc007fff 	stc2	15, cr7, [r0], {255}	; 0xff
20008718:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000871c:	07ff7ffd 			; <UNDEFINED> instruction: 0x07ff7ffd
20008720:	ff80007f 			; <UNDEFINED> instruction: 0xff80007f
20008724:	fc003fff 	stc2	15, cr3, [r0], {255}	; 0xff
20008728:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000872c:	0ffe3fff 	svceq	0x00fe3fff
20008730:	ff1f007f 			; <UNDEFINED> instruction: 0xff1f007f
20008734:	f80007ff 			; <UNDEFINED> instruction: 0xf80007ff
20008738:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000873c:	1ffc3fff 	svcne	0x00fc3fff
20008740:	fc3f807f 	ldc2	0, cr8, [pc], #-508	; 2000854c <bg_bits+0x16c>
20008744:	f800003f 			; <UNDEFINED> instruction: 0xf800003f
20008748:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000874c:	1ff83fff 	svcne	0x00f83fff
20008750:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
20008754:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20008758:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000875c:	3ff03fff 	svccc	0x00f03fff
20008760:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
20008764:	c0000000 	andgt	r0, r0, r0
20008768:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000876c:	7fe03fff 	svcvc	0x00e03fff
20008770:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
20008774:	00000000 	andeq	r0, r0, r0
20008778:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
2000877c:	7fc03fff 	svcvc	0x00c03fff
20008780:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
20008784:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
20008788:	f800000f 			; <UNDEFINED> instruction: 0xf800000f
2000878c:	ffc01fff 			; <UNDEFINED> instruction: 0xffc01fff
20008790:	001f003f 	andseq	r0, pc, pc, lsr r0	; <UNPREDICTABLE>
20008794:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20008798:	f8007fff 			; <UNDEFINED> instruction: 0xf8007fff
2000879c:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
200087a0:	0000003f 	andeq	r0, r0, pc, lsr r0
200087a4:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
200087a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200087ac:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
200087b0:	0000003f 	andeq	r0, r0, pc, lsr r0
200087b4:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
200087b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200087bc:	ff001fff 			; <UNDEFINED> instruction: 0xff001fff
200087c0:	0000003f 	andeq	r0, r0, pc, lsr r0
200087c4:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
200087c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200087cc:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}
200087d0:	0000003f 	andeq	r0, r0, pc, lsr r0
200087d4:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
200087d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200087dc:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}

200087e0 <current_screen>:
200087e0:	00000001 	andeq	r0, r0, r1

200087e4 <delay_until_text.4308>:
200087e4:	00000082 	andeq	r0, r0, r2, lsl #1

200087e8 <long_text.4306>:
200087e8:	00000028 	andeq	r0, r0, r8, lsr #32

200087ec <short_text.4307>:
200087ec:	00000014 	andeq	r0, r0, r4, lsl r0

200087f0 <last_climb_value.4314>:
200087f0:	00000064 	andeq	r0, r0, r4, rrx

200087f4 <fire_black_2_bits>:
	...
200087fc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>

20008800 <fire1_gray_bits>:
20008800:	00000000 	andeq	r0, r0, r0
20008804:	06000804 	streq	r0, [r0], -r4, lsl #16
20008808:	02494204 	subeq	r4, r9, #4, 4	; 0x40000000

2000880c <fire1_light_bits>:
2000880c:	00002000 	andeq	r2, r0, r0
20008810:	48000010 	stmdami	r0, {r4}
20008814:	2c243020 	stccs	0, cr3, [r4], #-128	; 0xffffff80

20008818 <fire2_gray_bits>:
20008818:	00000000 	andeq	r0, r0, r0
2000881c:	10220000 	eorne	r0, r2, r0
20008820:	00420444 	subeq	r0, r2, r4, asr #8

20008824 <fire2_light_bits>:
20008824:	04200000 	strteq	r0, [r0], #-0
20008828:	240c0010 	strcs	r0, [ip], #-16
2000882c:	123c6008 	eorsne	r6, ip, #8

20008830 <fire3_gray_bits>:
20008830:	00000000 	andeq	r0, r0, r0
20008834:	24100802 	ldrcs	r0, [r0], #-2050	; 0xfffff7fe
20008838:	00020260 	andeq	r0, r2, r0, ror #4

2000883c <fire3_light_bits>:
2000883c:	10200000 	eorne	r0, r0, r0
20008840:	18040400 	stmdane	r4, {sl}
20008844:	143c5812 	ldrtne	r5, [ip], #-2066	; 0xfffff7ee

20008848 <fire4_gray_bits>:
20008848:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
2000884c:	10320000 	eorsne	r0, r2, r0
20008850:	02400012 	subeq	r0, r0, #18

20008854 <fire4_light_bits>:
20008854:	00001000 	andeq	r1, r0, r0
20008858:	04082000 	streq	r2, [r8], #-0
2000885c:	24283a0c 	strtcs	r3, [r8], #-2572	; 0xfffff5f4

20008860 <fire5_gray_bits>:
20008860:	00000000 	andeq	r0, r0, r0
20008864:	22001020 	andcs	r1, r0, #32
20008868:	04044206 	streq	r4, [r4], #-518	; 0xfffffdfa

2000886c <fire5_light_bits>:
2000886c:	00040000 	andeq	r0, r4, r0
20008870:	04240800 	strteq	r0, [r4], #-2048	; 0xfffff800
20008874:	502a1810 	eorpl	r1, sl, r0, lsl r8

20008878 <firstTime.4076>:
20008878:	00000001 	andeq	r0, r0, r1

2000887c <bird1_black_bits>:
	...
2000888c:	00010040 	andeq	r0, r1, r0, asr #32
20008890:	00118060 	andseq	r8, r1, r0, rrx
20008894:	00118060 	andseq	r8, r1, r0, rrx
20008898:	001b80ec 	andseq	r8, fp, ip, ror #1
2000889c:	003f81fc 	ldrshteq	r8, [pc], -ip
200088a0:	007fe1f8 	ldrshteq	lr, [pc], #-24
200088a4:	007ff3f8 	ldrshteq	pc, [pc], #-56	; <UNPREDICTABLE>
200088a8:	003ffff8 	ldrshteq	pc, [pc], -r8	; <UNPREDICTABLE>
200088ac:	003fedf8 	ldrshteq	lr, [pc], -r8
200088b0:	001ff1f0 			; <UNDEFINED> instruction: 0x001ff1f0
200088b4:	000ff0e0 	andeq	pc, pc, r0, ror #1
200088b8:	0007ff80 	andeq	pc, r7, r0, lsl #31
200088bc:	00007c00 	andeq	r7, r0, r0, lsl #24
200088c0:	00008800 	andeq	r8, r0, r0, lsl #16
200088c4:	00033000 	andeq	r3, r3, r0
200088c8:	00011000 	andeq	r1, r1, r0
	...

200088e0 <bird1_gray_bits>:
	...
20008914:	00000e00 	andeq	r0, r0, r0, lsl #28
20008918:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

20008944 <bird1_light_bits>:
	...
20008974:	00001200 	andeq	r1, r0, r0, lsl #4
	...

200089a8 <bird2_black_bits>:
	...
200089c0:	000b0000 	andeq	r0, fp, r0
200089c4:	001e0028 	andseq	r0, lr, r8, lsr #32
200089c8:	003e0068 	eorseq	r0, lr, r8, rrx
200089cc:	003e007c 	eorseq	r0, lr, ip, ror r0
200089d0:	003e007c 	eorseq	r0, lr, ip, ror r0
200089d4:	007e007c 	rsbseq	r0, lr, ip, ror r0
200089d8:	007e7cfc 	ldrshteq	r7, [lr], #-204	; 0xffffff34
200089dc:	007ffff8 	ldrshteq	pc, [pc], #-248	; <UNPREDICTABLE>
200089e0:	003fd7f0 	ldrshteq	sp, [pc], -r0
200089e4:	003fc3c0 	eorseq	ip, pc, r0, asr #7
200089e8:	000fc100 	andeq	ip, pc, r0, lsl #2
200089ec:	00007000 	andeq	r7, r0, r0
200089f0:	0000a000 	andeq	sl, r0, r0
200089f4:	0001e000 	andeq	lr, r1, r0
200089f8:	0000a000 	andeq	sl, r0, r0
200089fc:	00008000 	andeq	r8, r0, r0
	...

20008a0c <bird2_gray_bits>:
	...
20008a48:	00003c00 	andeq	r3, r0, r0, lsl #24
20008a4c:	00003e00 	andeq	r3, r0, r0, lsl #28
	...

20008a70 <bird2_light_bits>:
	...
20008aa8:	00002800 	andeq	r2, r0, r0, lsl #16
	...

20008ad4 <bird3_black_bits>:
	...
20008af4:	00280000 	eoreq	r0, r8, r0
20008af8:	00680020 	rsbeq	r0, r8, r0, lsr #32
20008afc:	00f80038 	rscseq	r0, r8, r8, lsr r0
20008b00:	00fc0038 	rscseq	r0, ip, r8, lsr r0
20008b04:	00fc007c 	rscseq	r0, ip, ip, ror r0
20008b08:	00fe3dfe 	ldrshteq	r3, [lr], #222	; 0xde
20008b0c:	00fffffe 	ldrshteq	pc, [pc], #254	; <UNPREDICTABLE>
20008b10:	007febfc 	ldrshteq	lr, [pc], #-188
20008b14:	003ff1f0 	ldrshteq	pc, [pc], -r0	; <UNPREDICTABLE>
20008b18:	001ff0c0 	andseq	pc, pc, r0, asr #1
20008b1c:	0001e800 	andeq	lr, r1, r0, lsl #16
20008b20:	00005000 	andeq	r5, r0, r0
20008b24:	0000f000 	andeq	pc, r0, r0
20008b28:	00009000 	andeq	r9, r0, r0
	...

20008b38 <bird3_gray_bits>:
	...
20008b78:	00000e00 	andeq	r0, r0, r0, lsl #28
20008b7c:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

20008b9c <bird3_light_bits>:
	...
20008bd8:	00001400 	andeq	r1, r0, r0, lsl #8
	...

20008c00 <bird4_black_bits>:
	...
20008c34:	00007800 	andeq	r7, r0, r0, lsl #16
20008c38:	0000ff80 	andeq	pc, r0, r0, lsl #31
20008c3c:	0003d7f4 	strdeq	sp, [r3], -r4
20008c40:	008fe3fc 	strdeq	lr, [pc], ip
20008c44:	01ffc1fc 	ldrsheq	ip, [pc, #28]	; 20008c68 <bird4_gray_bits+0x4>
20008c48:	00ffd9f8 	ldrshteq	sp, [pc], #152
20008c4c:	007fb0f0 	ldrshteq	fp, [pc], #-0
20008c50:	007ea000 	rsbseq	sl, lr, r0
20008c54:	00792000 	rsbseq	r2, r9, r0
20008c58:	00300000 	eorseq	r0, r0, r0
	...

20008c64 <bird4_gray_bits>:
	...
20008ca4:	00001c00 	andeq	r1, r0, r0, lsl #24
20008ca8:	00003e00 	andeq	r3, r0, r0, lsl #28
	...

20008cc8 <bird4_light_bits>:
	...
20008d04:	00002800 	andeq	r2, r0, r0, lsl #16
	...

20008d2c <bird5_black_bits>:
	...
20008d58:	00001c00 	andeq	r1, r0, r0, lsl #24
20008d5c:	0000ff00 	andeq	pc, r0, r0, lsl #30
20008d60:	0003eb00 	andeq	lr, r3, r0, lsl #22
20008d64:	0007f180 	andeq	pc, r7, r0, lsl #3
20008d68:	000ff080 	andeq	pc, pc, r0, lsl #1
20008d6c:	000fff80 	andeq	pc, pc, r0, lsl #31
20008d70:	001fd3c0 	andseq	sp, pc, r0, asr #7
20008d74:	003fa3c0 	eorseq	sl, pc, r0, asr #7
20008d78:	003fa3c0 	eorseq	sl, pc, r0, asr #7
20008d7c:	003fd3c0 	eorseq	sp, pc, r0, asr #7
20008d80:	003e8380 	eorseq	r8, lr, r0, lsl #7
20008d84:	00778580 	rsbseq	r8, r7, r0, lsl #11
20008d88:	00610000 	rsbeq	r0, r1, r0
20008d8c:	00000000 	andeq	r0, r0, r0

20008d90 <bird5_gray_bits>:
	...
20008dc8:	00000e00 	andeq	r0, r0, r0, lsl #28
20008dcc:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

20008df4 <bird5_light_bits>:
	...
20008e28:	00001400 	andeq	r1, r0, r0, lsl #8
	...

20008e58 <firstTime.4093>:
20008e58:	00000001 	andeq	r0, r0, r1

20008e5c <witch1_black_bits>:
20008e5c:	200001f8 	strdcs	r0, [r0], -r8
20008e60:	03400001 	movteq	r0, #1
20008e64:	00074000 	andeq	r4, r7, r0
20008e68:	20000720 	andcs	r0, r0, r0, lsr #14
20008e6c:	3ff80066 	svccc	0x00f80066
20008e70:	00044000 	andeq	r4, r4, r0
20008e74:	40000440 	andmi	r0, r0, r0, asr #8
20008e78:	03800004 	orreq	r0, r0, #4
20008e7c:	00064000 	andeq	r4, r6, r0
20008e80:	20000640 	andcs	r0, r0, r0, asr #12
20008e84:	0e200006 	cdpeq	0, 2, cr0, cr0, cr6, {0}
20008e88:	000e1000 	andeq	r1, lr, r0
20008e8c:	f8000c10 			; <UNDEFINED> instruction: 0xf8000c10
20008e90:	0000001f 	andeq	r0, r0, pc, lsl r0

20008e94 <witch1_gray_bits>:
20008e94:	c0000000 	andgt	r0, r0, r0
20008e98:	00800000 	addeq	r0, r0, r0
20008e9c:	00008000 	andeq	r8, r0, r0
20008ea0:	c00000c0 	andgt	r0, r0, r0, asr #1
20008ea4:	00000001 	andeq	r0, r0, r1
	...
20008eb4:	00018000 	andeq	r8, r1, r0
20008eb8:	c0000180 	andgt	r0, r0, r0, lsl #3
20008ebc:	01c00001 	biceq	r0, r0, r1
20008ec0:	0001e000 	andeq	lr, r1, r0
20008ec4:	000003e0 	andeq	r0, r0, r0, ror #7
20008ec8:	00000000 	andeq	r0, r0, r0

20008ecc <witch1_light_bits>:
	...
20008ee0:	00038000 	andeq	r8, r3, r0
20008ee4:	80000380 	andhi	r0, r0, r0, lsl #7
20008ee8:	00000003 	andeq	r0, r0, r3
	...

20008f04 <witch2_black_bits>:
20008f04:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20008f08:	01200001 			; <UNDEFINED> instruction: 0x01200001
20008f0c:	00034000 	andeq	r4, r3, r0
20008f10:	20000740 	andcs	r0, r0, r0, asr #14
20008f14:	66200007 	strtvs	r0, [r0], -r7
20008f18:	003ff800 	eorseq	pc, pc, r0, lsl #16
20008f1c:	40000440 	andmi	r0, r0, r0, asr #8
20008f20:	04400004 	strbeq	r0, [r0], #-4
20008f24:	00038000 	andeq	r8, r3, r0
20008f28:	20000660 	andcs	r0, r0, r0, ror #12
20008f2c:	0e100006 	cdpeq	0, 1, cr0, cr0, cr6, {0}
20008f30:	001c0800 	andseq	r0, ip, r0, lsl #16
20008f34:	fc001c08 	stc2	12, cr1, [r0], {8}
20008f38:	0000003f 	andeq	r0, r0, pc, lsr r0

20008f3c <witch2_gray_bits>:
20008f3c:	00000000 	andeq	r0, r0, r0
20008f40:	00c00000 	sbceq	r0, r0, r0
20008f44:	00008000 	andeq	r8, r0, r0
20008f48:	c0000080 	andgt	r0, r0, r0, lsl #1
20008f4c:	01c00000 	biceq	r0, r0, r0
	...
20008f60:	c0000180 	andgt	r0, r0, r0, lsl #3
20008f64:	01e00001 	mvneq	r0, r1
20008f68:	0003f000 	andeq	pc, r3, r0
20008f6c:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
20008f70:	00000000 	andeq	r0, r0, r0

20008f74 <witch2_light_bits>:
	...
20008f8c:	80000380 	andhi	r0, r0, r0, lsl #7
20008f90:	03800003 	orreq	r0, r0, #3
	...

20008fac <witch3_black_bits>:
20008fac:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20008fb0:	01200001 			; <UNDEFINED> instruction: 0x01200001
20008fb4:	00034000 	andeq	r4, r3, r0
20008fb8:	20000740 	andcs	r0, r0, r0, asr #14
20008fbc:	66200007 	strtvs	r0, [r0], -r7
20008fc0:	003ff800 	eorseq	pc, pc, r0, lsl #16
20008fc4:	40000440 	andmi	r0, r0, r0, asr #8
20008fc8:	04400004 	strbeq	r0, [r0], #-4
20008fcc:	00038000 	andeq	r8, r3, r0
20008fd0:	10000660 	andne	r0, r0, r0, ror #12
20008fd4:	1c08000e 	stcne	0, cr0, [r8], {14}
20008fd8:	00380800 	eorseq	r0, r8, r0, lsl #16
20008fdc:	fe003804 	vcmla.f16	d3, d0, d4[0], #0
20008fe0:	0000007f 	andeq	r0, r0, pc, ror r0

20008fe4 <witch3_gray_bits>:
20008fe4:	00000000 	andeq	r0, r0, r0
20008fe8:	00c00000 	sbceq	r0, r0, r0
20008fec:	00008000 	andeq	r8, r0, r0
20008ff0:	c0000080 	andgt	r0, r0, r0, lsl #1
20008ff4:	01c00000 	biceq	r0, r0, r0
	...
20009008:	e0000180 	and	r0, r0, r0, lsl #3
2000900c:	03f00001 	mvnseq	r0, #1
20009010:	0007f000 	andeq	pc, r7, r0
20009014:	000007f8 	strdeq	r0, [r0], -r8
20009018:	00000000 	andeq	r0, r0, r0

2000901c <witch3_light_bits>:
	...
20009034:	80000380 	andhi	r0, r0, r0, lsl #7
20009038:	03800003 	orreq	r0, r0, #3
	...

20009054 <firstTime.4067>:
20009054:	00000001 	andeq	r0, r0, r1

20009058 <witch1_black_bits>:
20009058:	200001f8 	strdcs	r0, [r0], -r8
2000905c:	03400001 	movteq	r0, #1
20009060:	00074000 	andeq	r4, r7, r0
20009064:	20000720 	andcs	r0, r0, r0, lsr #14
20009068:	3ff80066 	svccc	0x00f80066
2000906c:	00044000 	andeq	r4, r4, r0
20009070:	40000440 	andmi	r0, r0, r0, asr #8
20009074:	03800004 	orreq	r0, r0, #4
20009078:	00064000 	andeq	r4, r6, r0
2000907c:	20000640 	andcs	r0, r0, r0, asr #12
20009080:	0e200006 	cdpeq	0, 2, cr0, cr0, cr6, {0}
20009084:	000e1000 	andeq	r1, lr, r0
20009088:	f8000c10 			; <UNDEFINED> instruction: 0xf8000c10
2000908c:	0000001f 	andeq	r0, r0, pc, lsl r0

20009090 <witch1_gray_bits>:
20009090:	c0000000 	andgt	r0, r0, r0
20009094:	00800000 	addeq	r0, r0, r0
20009098:	00008000 	andeq	r8, r0, r0
2000909c:	c00000c0 	andgt	r0, r0, r0, asr #1
200090a0:	00000001 	andeq	r0, r0, r1
	...
200090b0:	00018000 	andeq	r8, r1, r0
200090b4:	c0000180 	andgt	r0, r0, r0, lsl #3
200090b8:	01c00001 	biceq	r0, r0, r1
200090bc:	0001e000 	andeq	lr, r1, r0
200090c0:	000003e0 	andeq	r0, r0, r0, ror #7
200090c4:	00000000 	andeq	r0, r0, r0

200090c8 <witch1_light_bits>:
	...
200090dc:	00038000 	andeq	r8, r3, r0
200090e0:	80000380 	andhi	r0, r0, r0, lsl #7
200090e4:	00000003 	andeq	r0, r0, r3
	...

20009100 <witch2_black_bits>:
20009100:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20009104:	01200001 			; <UNDEFINED> instruction: 0x01200001
20009108:	00034000 	andeq	r4, r3, r0
2000910c:	20000740 	andcs	r0, r0, r0, asr #14
20009110:	66200007 	strtvs	r0, [r0], -r7
20009114:	003ff800 	eorseq	pc, pc, r0, lsl #16
20009118:	40000440 	andmi	r0, r0, r0, asr #8
2000911c:	04400004 	strbeq	r0, [r0], #-4
20009120:	00038000 	andeq	r8, r3, r0
20009124:	20000660 	andcs	r0, r0, r0, ror #12
20009128:	0e100006 	cdpeq	0, 1, cr0, cr0, cr6, {0}
2000912c:	001c0800 	andseq	r0, ip, r0, lsl #16
20009130:	fc001c08 	stc2	12, cr1, [r0], {8}
20009134:	0000003f 	andeq	r0, r0, pc, lsr r0

20009138 <witch2_gray_bits>:
20009138:	00000000 	andeq	r0, r0, r0
2000913c:	00c00000 	sbceq	r0, r0, r0
20009140:	00008000 	andeq	r8, r0, r0
20009144:	c0000080 	andgt	r0, r0, r0, lsl #1
20009148:	01c00000 	biceq	r0, r0, r0
	...
2000915c:	c0000180 	andgt	r0, r0, r0, lsl #3
20009160:	01e00001 	mvneq	r0, r1
20009164:	0003f000 	andeq	pc, r3, r0
20009168:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
2000916c:	00000000 	andeq	r0, r0, r0

20009170 <witch2_light_bits>:
	...
20009188:	80000380 	andhi	r0, r0, r0, lsl #7
2000918c:	03800003 	orreq	r0, r0, #3
	...

200091a8 <witch3_black_bits>:
200091a8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200091ac:	01200001 			; <UNDEFINED> instruction: 0x01200001
200091b0:	00034000 	andeq	r4, r3, r0
200091b4:	20000740 	andcs	r0, r0, r0, asr #14
200091b8:	66200007 	strtvs	r0, [r0], -r7
200091bc:	003ff800 	eorseq	pc, pc, r0, lsl #16
200091c0:	40000440 	andmi	r0, r0, r0, asr #8
200091c4:	04400004 	strbeq	r0, [r0], #-4
200091c8:	00038000 	andeq	r8, r3, r0
200091cc:	10000660 	andne	r0, r0, r0, ror #12
200091d0:	1c08000e 	stcne	0, cr0, [r8], {14}
200091d4:	00380800 	eorseq	r0, r8, r0, lsl #16
200091d8:	fe003804 	vcmla.f16	d3, d0, d4[0], #0
200091dc:	0000007f 	andeq	r0, r0, pc, ror r0

200091e0 <witch3_gray_bits>:
200091e0:	00000000 	andeq	r0, r0, r0
200091e4:	00c00000 	sbceq	r0, r0, r0
200091e8:	00008000 	andeq	r8, r0, r0
200091ec:	c0000080 	andgt	r0, r0, r0, lsl #1
200091f0:	01c00000 	biceq	r0, r0, r0
	...
20009204:	e0000180 	and	r0, r0, r0, lsl #3
20009208:	03f00001 	mvnseq	r0, #1
2000920c:	0007f000 	andeq	pc, r7, r0
20009210:	000007f8 	strdeq	r0, [r0], -r8
20009214:	00000000 	andeq	r0, r0, r0

20009218 <witch3_light_bits>:
	...
20009230:	80000380 	andhi	r0, r0, r0, lsl #7
20009234:	03800003 	orreq	r0, r0, #3
	...

20009250 <firstTime.4142>:
20009250:	00000001 	andeq	r0, r0, r1

20009254 <direction.4153>:
20009254:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20009258 <flame1_black_bits>:
20009258:	80000000 	andhi	r0, r0, r0
2000925c:	00000008 	andeq	r0, r0, r8
20009260:	00004800 	andeq	r4, r0, r0, lsl #16
20009264:	48004a08 	stmdami	r0, {r3, r9, fp, lr}
20009268:	02400002 	subeq	r0, r0, #2
2000926c:	00541400 	subseq	r1, r4, r0, lsl #8
20009270:	22005040 	andcs	r5, r0, #64	; 0x40
20009274:	a01200b0 	ldrhge	r0, [r2], -r0	; <UNPREDICTABLE>
20009278:	00011200 	andeq	r1, r1, r0, lsl #4
2000927c:	01001000 	mrseq	r1, (UNDEF: 0)
20009280:	01000000 	mrseq	r0, (UNDEF: 0)
20009284:	00210001 	eoreq	r0, r1, r1
20009288:	40000042 	andmi	r0, r0, r2, asr #32
2000928c:	20410000 	subcs	r0, r1, r0
20009290:	01200101 			; <UNDEFINED> instruction: 0x01200101
20009294:	12012001 	andne	r2, r1, #1
20009298:	90400000 	subls	r0, r0, r0
2000929c:	00800200 	addeq	r0, r0, r0, lsl #4
200092a0:	04008000 	streq	r8, [r0], #-0
200092a4:	20080001 	andcs	r0, r8, r1
200092a8:	00080800 	andeq	r0, r8, r0, lsl #16
	...
200092b4:	00001000 	andeq	r1, r0, r0
200092b8:	3200001c 	andcc	r0, r0, #28
200092bc:	002f0000 	eoreq	r0, pc, r0
200092c0:	00003f00 	andeq	r3, r0, r0, lsl #30
200092c4:	01000007 	tsteq	r0, r7
200092c8:	00010000 	andeq	r0, r1, r0
200092cc:	00000000 	andeq	r0, r0, r0

200092d0 <flame1_gray_bits>:
	...
200092f0:	00080000 	andeq	r0, r8, r0
200092f4:	00000000 	andeq	r0, r0, r0
200092f8:	00900008 	addseq	r0, r0, r8
200092fc:	0002a000 	andeq	sl, r2, r0
20009300:	b0001bb0 			; <UNDEFINED> instruction: 0xb0001bb0
20009304:	0fb0001f 	svceq	0x00b0001f
20009308:	000fe000 	andeq	lr, pc, r0
2000930c:	e0000fe0 	and	r0, r0, r0, ror #31
20009310:	0fa0000f 	svceq	0x00a0000f
20009314:	0007e000 	andeq	lr, r7, r0
20009318:	800003c0 	andhi	r0, r0, r0, asr #7
2000931c:	07c00002 	strbeq	r0, [r0, r2]
20009320:	00078000 	andeq	r8, r7, r0
20009324:	80000380 	andhi	r0, r0, r0, lsl #7
20009328:	09800003 	stmibeq	r0, {r0, r1}
2000932c:	00018000 	andeq	r8, r1, r0
20009330:	0c000000 	stceq	0, cr0, [r0], {-0}
20009334:	00100000 	andseq	r0, r0, r0
	...

20009348 <flame1_light_bits>:
	...
20009350:	00080000 	andeq	r0, r8, r0
20009354:	80000080 	andhi	r0, r0, r0, lsl #1
20009358:	0c88000c 	stceq	0, cr0, [r8], {12}
2000935c:	00098800 	andeq	r8, r9, r0, lsl #16
20009360:	c8000db8 	stmdagt	r0, {r3, r4, r5, r7, r8, sl, fp}
20009364:	5fe8004d 	svcpl	0x00e8004d
20009368:	00f6e800 	rscseq	lr, r6, r0, lsl #16
2000936c:	fc00eff8 	stc2	15, cr14, [r0], {248}	; 0xf8
20009370:	fe6c00f7 	mcr2	0, 3, r0, cr12, cr7, {7}
20009374:	00dc5c00 	sbcseq	r5, ip, r0, lsl #24
20009378:	0c00e40c 	cfstrseq	mvf14, [r0], {12}
2000937c:	d00e01e0 	andle	r0, lr, r0, ror #3
20009380:	00d01e00 	sbcseq	r1, r0, r0, lsl #28
20009384:	0c00d01a 	stceq	0, cr13, [r0], {26}
20009388:	600e00f0 	strdvs	r0, [lr], -r0	; <UNPREDICTABLE>
2000938c:	00681c00 	rsbeq	r1, r8, r0, lsl #24
20009390:	70003c3c 	andvc	r3, r0, ip, lsr ip
20009394:	1830003c 	ldmdane	r0!, {r2, r3, r4, r5}
20009398:	00307000 	eorseq	r7, r0, r0
2000939c:	78003c78 	stmdavc	r0, {r3, r4, r5, r6, sl, fp, ip, sp}
200093a0:	16700038 			; <UNDEFINED> instruction: 0x16700038
200093a4:	001e6000 	andseq	r6, lr, r0
200093a8:	c0000fe0 	andgt	r0, r0, r0, ror #31
200093ac:	0fc0000f 	svceq	0x00c0000f
	...

200093c0 <flame2_black_bits>:
200093c0:	00000000 	andeq	r0, r0, r0
200093c4:	40040042 	andmi	r0, r4, r2, asr #32
200093c8:	00044400 	andeq	r4, r4, r0, lsl #8
200093cc:	04000440 	streq	r0, [r0], #-1088	; 0xfffffbc0
200093d0:	22a00022 	adccs	r0, r0, #34	; 0x22
200093d4:	00aaa800 	adceq	sl, sl, r0, lsl #16
200093d8:	00009108 	andeq	r9, r0, r8, lsl #2
200093dc:	84800090 	strhi	r0, [r0], #144	; 0x90
200093e0:	00040400 	andeq	r0, r4, r0, lsl #8
200093e4:	20008004 	andcs	r8, r0, r4
200093e8:	00850090 	umulleq	r0, r5, r0, r0
200093ec:	01000000 	mrseq	r0, (UNDEF: 0)
200093f0:	20000002 	andcs	r0, r0, r2
200093f4:	84200084 	strthi	r0, [r0], #-132	; 0xffffff7c
200093f8:	00000200 	andeq	r0, r0, r0, lsl #4
200093fc:	02004004 	andeq	r4, r0, #4
20009400:	a00a0080 	andge	r0, sl, r0, lsl #1
20009404:	00240800 	eoreq	r0, r4, r0, lsl #16
20009408:	08002048 	stmdaeq	r0, {r3, r6, sp}
2000940c:	00000000 	andeq	r0, r0, r0
20009410:	00101000 	andseq	r1, r0, r0
20009414:	00004050 	andeq	r4, r0, r0, asr r0
20009418:	10000040 	andne	r0, r0, r0, asr #32
2000941c:	00001000 	andeq	r1, r0, r0
20009420:	3200001c 	andcc	r0, r0, #28
20009424:	002f0000 	eoreq	r0, pc, r0
20009428:	00003f00 	andeq	r3, r0, r0, lsl #30
2000942c:	01000007 	tsteq	r0, r7
20009430:	00010000 	andeq	r0, r1, r0
20009434:	00000000 	andeq	r0, r0, r0

20009438 <flame2_gray_bits>:
	...
20009458:	00002000 	andeq	r2, r0, r0
2000945c:	40000010 	andmi	r0, r0, r0, lsl r0
20009460:	27600002 	strbcs	r0, [r0, -r2]!
20009464:	001fe000 	andseq	lr, pc, r0
20009468:	c0000fe0 	andgt	r0, r0, r0, ror #31
2000946c:	0bc00003 	bleq	1f009480 <startup-0xff6b80>
20009470:	000fe000 	andeq	lr, pc, r0
20009474:	c0000fd0 	ldrdgt	r0, [r0], -r0	; <UNPREDICTABLE>
20009478:	0fc0000f 	svceq	0x00c0000f
2000947c:	0003e000 	andeq	lr, r3, r0
20009480:	c00007a0 	andgt	r0, r0, r0, lsr #15
20009484:	0b800007 	bleq	1e0094a8 <startup-0x1ff6b58>
20009488:	0003c000 	andeq	ip, r3, r0
2000948c:	80000380 	andhi	r0, r0, r0, lsl #7
20009490:	03800003 	orreq	r0, r0, #3
20009494:	00000000 	andeq	r0, r0, r0
20009498:	0c000000 	stceq	0, cr0, [r0], {-0}
2000949c:	00100000 	andseq	r0, r0, r0
	...

200094b0 <flame2_light_bits>:
	...
200094b8:	00020000 	andeq	r0, r2, r0
200094bc:	20000220 	andcs	r0, r0, r0, lsr #4
200094c0:	05400005 	strbeq	r0, [r0, #-5]
200094c4:	00054000 	andeq	r4, r5, r0
200094c8:	fc0026f4 	stc2	6, cr2, [r0], {244}	; 0xf4
200094cc:	137c0027 	cmnne	ip, #39	; 0x27
200094d0:	00fbda00 	rscseq	sp, fp, r0, lsl #20
200094d4:	9e007fea 	cdpls	15, 0, cr7, cr0, cr10, {7}
200094d8:	d818006d 	ldmdale	r8, {r0, r2, r3, r5, r6}
200094dc:	00e01c00 	rsceq	r1, r0, r0, lsl #24
200094e0:	1e00f01c 	mcrne	0, 0, pc, cr0, cr12, {0}	; <UNPREDICTABLE>
200094e4:	701e0078 	andsvc	r0, lr, r8, ror r0
200094e8:	00f01c00 	rscseq	r1, r0, r0, lsl #24
200094ec:	3c003028 	stccc	0, cr3, [r0], {40}	; 0x28
200094f0:	50240070 	eorpl	r0, r4, r0, ror r0
200094f4:	01d81001 	bicseq	r1, r8, r1
200094f8:	30004810 	andcc	r4, r0, r0, lsl r8
200094fc:	34780038 	ldrbtcc	r0, [r8], #-56	; 0xffffffc8
20009500:	002c2000 	eoreq	r2, ip, r0
20009504:	50003c20 	andpl	r3, r0, r0, lsr #24
20009508:	0c700038 	ldcleq	0, cr0, [r0], #-224	; 0xffffff20
2000950c:	001fe000 	andseq	lr, pc, r0
20009510:	c0000fe0 	andgt	r0, r0, r0, ror #31
20009514:	0fc0000f 	svceq	0x00c0000f
	...

20009528 <flame3_black_bits>:
20009528:	02000400 	andeq	r0, r0, #0, 8
2000952c:	04000000 	streq	r0, [r0], #-0
20009530:	00044000 	andeq	r4, r4, r0
20009534:	a4000404 	strge	r0, [r0], #-1028	; 0xfffffbfc
20009538:	52a00098 	adcpl	r0, r0, #152	; 0x98
2000953c:	01028a00 	tsteq	r2, r0, lsl #20
20009540:	00012028 	andeq	r2, r1, r8, lsr #32
20009544:	00020100 	andeq	r0, r2, r0, lsl #2
20009548:	01028200 	mrseq	r8, R10_usr
2000954c:	80000092 	mulhi	r0, r2, r0
20009550:	00810000 	addeq	r0, r1, r0
20009554:	01400901 	cmpeq	r0, r1, lsl #18
20009558:	01004008 	tsteq	r0, r8
2000955c:	02000002 	andeq	r0, r0, #2
20009560:	01004001 	tsteq	r0, r1
20009564:	02000002 	andeq	r0, r0, #2
20009568:	a1000000 	mrsge	r0, (UNDEF: 0)
2000956c:	00002400 	andeq	r2, r0, r0, lsl #8
20009570:	10004000 	andne	r4, r0, r0
20009574:	40000044 	andmi	r0, r0, r4, asr #32
20009578:	00400800 	subeq	r0, r0, r0, lsl #16
2000957c:	00000808 	andeq	r0, r0, r8, lsl #16
20009580:	00000000 	andeq	r0, r0, r0
20009584:	00001000 	andeq	r1, r0, r0
20009588:	3200001c 	andcc	r0, r0, #28
2000958c:	002f0000 	eoreq	r0, pc, r0
20009590:	00003f00 	andeq	r3, r0, r0, lsl #30
20009594:	01000007 	tsteq	r0, r7
20009598:	00010000 	andeq	r0, r1, r0
2000959c:	00000000 	andeq	r0, r0, r0

200095a0 <flame3_gray_bits>:
	...
200095c0:	00002000 	andeq	r2, r0, r0
200095c4:	00000040 	andeq	r0, r0, r0, asr #32
200095c8:	17600023 	strbne	r0, [r0, -r3, lsr #32]!
200095cc:	0017e000 	andseq	lr, r7, r0
200095d0:	e0000fe0 	and	r0, r0, r0, ror #31
200095d4:	3de0003d 	stclcc	0, cr0, [r0, #244]!	; 0xf4
200095d8:	001fa000 	andseq	sl, pc, r0
200095dc:	f0001fe8 			; <UNDEFINED> instruction: 0xf0001fe8
200095e0:	0ee0000f 	cdpeq	0, 14, cr0, cr0, cr15, {0}
200095e4:	000fc000 	andeq	ip, pc, r0
200095e8:	c0000fe0 	andgt	r0, r0, r0, ror #31
200095ec:	17c0000b 	strbne	r0, [r0, fp]
200095f0:	00078000 	andeq	r8, r7, r0
200095f4:	80000780 	andhi	r0, r0, r0, lsl #15
200095f8:	03400003 	movteq	r0, #3
200095fc:	00030000 	andeq	r0, r3, r0
20009600:	0c000000 	stceq	0, cr0, [r0], {-0}
20009604:	00100000 	andseq	r0, r0, r0
	...

20009618 <flame3_light_bits>:
20009618:	00000000 	andeq	r0, r0, r0
2000961c:	00400000 	subeq	r0, r0, r0
20009620:	00020000 	andeq	r0, r2, r0
20009624:	40000240 	andmi	r0, r0, r0, asr #4
20009628:	014c0002 	cmpeq	ip, r2
2000962c:	00317400 	eorseq	r7, r1, r0, lsl #8
20009630:	fc0017d4 	stc2	7, cr1, [r0], {212}	; 0xd4
20009634:	bff8003f 	svclt	0x00f8003f
20009638:	00fd5800 	rscseq	r5, sp, r0, lsl #16
2000963c:	7800ff28 	stmdavc	r0, {r3, r5, r8, r9, sl, fp, ip, sp, lr, pc}
20009640:	e81c00dc 	ldmda	ip, {r2, r3, r4, r6, r7}
20009644:	00a81600 	adceq	r1, r8, r0, lsl #12
20009648:	1e00b016 	mcrne	0, 0, fp, cr0, cr6, {0}
2000964c:	c01e00c0 	andsgt	r0, lr, r0, asr #1
20009650:	00e01c00 	rsceq	r1, r0, r0, lsl #24
20009654:	0c00c014 	stceq	0, cr12, [r0], {20}
20009658:	401c00f0 	ldrshmi	r0, [ip], -r0	; <UNPREDICTABLE>
2000965c:	00f01800 	rscseq	r1, r0, r0, lsl #16
20009660:	2800b01c 	stmdacs	r0, {r2, r3, r4, ip, sp, pc}
20009664:	283c0030 	ldmdacs	ip!, {r4, r5}
20009668:	00385400 	eorseq	r5, r8, r0, lsl #8
2000966c:	70003070 	andvc	r3, r0, r0, ror r0
20009670:	3cb0001c 	ldccc	0, cr0, [r0], #112	; 0x70
20009674:	003ce000 	eorseq	lr, ip, r0
20009678:	c0001fe0 	andgt	r1, r0, r0, ror #31
2000967c:	0fc0000f 	svceq	0x00c0000f
	...

20009690 <flame4_black_bits>:
20009690:	00000100 	andeq	r0, r0, r0, lsl #2
20009694:	10820000 	addne	r0, r2, r0
20009698:	00008000 	andeq	r8, r0, r0
2000969c:	000028c8 	andeq	r2, r0, r8, asr #17
200096a0:	05540004 	ldrbeq	r0, [r4, #-4]
200096a4:	00a55400 	adceq	r5, r5, r0, lsl #8
200096a8:	08002420 	stmdaeq	r0, {r5, sl, sp}
200096ac:	50000082 	andpl	r0, r0, r2, lsl #1
200096b0:	01000400 	tsteq	r0, r0, lsl #8
200096b4:	00010444 	andeq	r0, r1, r4, asr #8
200096b8:	84120124 	ldrhi	r0, [r2], #-292	; 0xfffffedc
200096bc:	00841000 	addeq	r1, r4, r0
200096c0:	01008001 	tsteq	r0, r1
200096c4:	200100a0 	andcs	r0, r1, r0, lsr #1
200096c8:	01000000 	mrseq	r0, (UNDEF: 0)
200096cc:	00000022 	andeq	r0, r0, r2, lsr #32
200096d0:	80020000 	andhi	r0, r2, r0
200096d4:	00808a00 	addeq	r8, r0, r0, lsl #20
200096d8:	04004000 	streq	r4, [r0], #-0
200096dc:	20440000 	subcs	r0, r4, r0
200096e0:	00200000 	eoreq	r0, r0, r0
200096e4:	00000008 	andeq	r0, r0, r8
200096e8:	00000010 	andeq	r0, r0, r0, lsl r0
200096ec:	00001000 	andeq	r1, r0, r0
200096f0:	3200001c 	andcc	r0, r0, #28
200096f4:	002f0000 	eoreq	r0, pc, r0
200096f8:	00003f00 	andeq	r3, r0, r0, lsl #30
200096fc:	01000007 	tsteq	r0, r7
20009700:	00010000 	andeq	r0, r1, r0
20009704:	00000000 	andeq	r0, r0, r0

20009708 <flame4_gray_bits>:
	...
2000972c:	40000000 	andmi	r0, r0, r0
20009730:	08200010 	stmdaeq	r0!, {r4}
20009734:	0008c000 	andeq	ip, r8, r0
20009738:	f0000fc4 			; <UNDEFINED> instruction: 0xf0000fc4
2000973c:	1ff80007 	svcne	0x00f80007
20009740:	001ff000 	andseq	pc, pc, r0
20009744:	f0001fd0 			; <UNDEFINED> instruction: 0xf0001fd0
20009748:	1fc0001f 	svcne	0x00c0001f
2000974c:	001f5000 	andseq	r5, pc, r0
20009750:	e0000fe0 	and	r0, r0, r0, ror #31
20009754:	07800007 	streq	r0, [r0, r7]
20009758:	00078000 	andeq	r8, r7, r0
2000975c:	00000780 	andeq	r0, r0, r0, lsl #15
20009760:	0300000b 	movweq	r0, #11
20009764:	00010000 	andeq	r0, r1, r0
20009768:	0c000000 	stceq	0, cr0, [r0], {-0}
2000976c:	00100000 	andseq	r0, r0, r0
	...

20009780 <flame4_light_bits>:
	...
20009788:	00040000 	andeq	r0, r4, r0
2000978c:	40000400 	andmi	r0, r0, r0, lsl #8
20009790:	c8800048 	stmgt	r0, {r3, r6}
20009794:	00488000 	subeq	r8, r8, r0
20009798:	e4004ac4 	str	r4, [r0], #-2756	; 0xfffff53c
2000979c:	2fec007d 	svccs	0x00ec007d
200097a0:	00fff800 	rscseq	pc, pc, r0, lsl #16
200097a4:	be00fbb8 	vmovlt.16	d16[0], pc
200097a8:	73cc00cb 	bicvc	r0, ip, #203	; 0xcb
200097ac:	00732e00 	rsbseq	r2, r3, r0, lsl #28
200097b0:	0e00703a 	mcreq	0, 0, r7, cr0, cr10, {1}
200097b4:	c0060050 	andgt	r0, r6, r0, asr r0
200097b8:	00e00e00 	rsceq	r0, r0, r0, lsl #28
200097bc:	0e00a00c 	cdpeq	0, 0, cr10, cr0, cr12, {0}
200097c0:	601c00e0 	andsvs	r0, ip, r0, ror #1
200097c4:	00602400 	rsbeq	r2, r0, r0, lsl #8
200097c8:	1800301c 	stmdane	r0, {r2, r3, r4, ip, sp}
200097cc:	50380078 	eorspl	r0, r8, r8, ror r0
200097d0:	00587000 	subseq	r7, r8, r0
200097d4:	f0003830 			; <UNDEFINED> instruction: 0xf0003830
200097d8:	1cf00024 	ldclne	0, cr0, [r0], #144	; 0x90
200097dc:	001ee000 	andseq	lr, lr, r0
200097e0:	c0001fe0 	andgt	r1, r0, r0, ror #31
200097e4:	0fc0000f 	svceq	0x00c0000f
	...

200097f8 <firstTime.4079>:
200097f8:	00000001 	andeq	r0, r0, r1

200097fc <boom1_black_bits>:
	...
20009960:	0000003e 	andeq	r0, r0, lr, lsr r0
	...
2000996c:	00630000 	rsbeq	r0, r3, r0
	...
20009978:	80000000 	andhi	r0, r0, r0
2000997c:	00000043 	andeq	r0, r0, r3, asr #32
	...
20009988:	00638000 	rsbeq	r8, r3, r0
	...
20009994:	80000000 	andhi	r0, r0, r0
20009998:	0000003f 	andeq	r0, r0, pc, lsr r0
	...
200099a4:	001f0000 	andseq	r0, pc, r0
	...

20009b00 <boom1_gray_bits>:
	...
20009c70:	00040000 	andeq	r0, r4, r0
	...
20009c80:	00000024 	andeq	r0, r0, r4, lsr #32
	...
20009c8c:	001c0000 	andseq	r0, ip, r0
	...

20009e04 <boom1_light_bits>:
	...
20009f74:	00180000 	andseq	r0, r8, r0
	...
20009f84:	00000018 	andeq	r0, r0, r8, lsl r0
	...

2000a108 <boom2_black_bits>:
	...
2000a224:	00007c00 	andeq	r7, r0, r0, lsl #24
	...
2000a230:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
2000a234:	00000038 	andeq	r0, r0, r8, lsr r0
	...
2000a240:	0fffff00 	svceq	0x00ffff00
	...
2000a24c:	ff800000 			; <UNDEFINED> instruction: 0xff800000
2000a250:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
	...
2000a25c:	3ffeff80 	svccc	0x00feff80
	...
2000a268:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
2000a26c:	00007f00 	andeq	r7, r0, r0, lsl #30
	...
2000a278:	7c01ffc0 	stcvc	15, cr15, [r1], {192}	; 0xc0
	...
2000a284:	ff800000 			; <UNDEFINED> instruction: 0xff800000
2000a288:	0000ff01 	andeq	pc, r0, r1, lsl #30
	...
2000a294:	fff1f800 	vcmla.f32	d31, d1, d0[0], #270
	...
2000a2a0:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
2000a2a4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
	...
2000a2b0:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
	...
2000a2bc:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
2000a2c0:	0000603f 	andeq	r6, r0, pc, lsr r0
	...
2000a2cc:	001ffc00 	andseq	pc, pc, r0, lsl #24
	...
2000a2d8:	fc000000 	stc2	0, cr0, [r0], {-0}
2000a2dc:	0000000f 	andeq	r0, r0, pc
	...
2000a2e8:	0003fc00 	andeq	pc, r3, r0, lsl #24
	...
2000a2f4:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
2000a2f8:	00000001 	andeq	r0, r0, r1
	...

2000a40c <boom2_gray_bits>:
	...
2000a560:	00010000 	andeq	r0, r1, r0
	...
2000a570:	0000000f 	andeq	r0, r0, pc
	...
2000a57c:	03020000 	movweq	r0, #8192	; 0x2000
	...
2000a58c:	000000fe 	strdeq	r0, [r0], -lr
	...
2000a598:	000e0000 	andeq	r0, lr, r0
	...

2000a710 <boom2_light_bits>:
	...
2000a874:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
2000a880:	00fc0000 	rscseq	r0, ip, r0
	...

2000aa14 <boom3_black_bits>:
	...
2000aae8:	000e0000 	andeq	r0, lr, r0
	...
2000aaf4:	80000000 	andhi	r0, r0, r0
2000aaf8:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
2000ab04:	03ffc000 	mvnseq	ip, #0
	...
2000ab10:	e0000000 	and	r0, r0, r0
2000ab14:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000ab18:	000001fc 	strdeq	r0, [r0], -ip
2000ab1c:	00000000 	andeq	r0, r0, r0
2000ab20:	1f8ff000 	svcne	0x008ff000
2000ab24:	03ff0000 	mvnseq	r0, #0
2000ab28:	00000000 	andeq	r0, r0, r0
2000ab2c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
2000ab30:	e0003e1f 	and	r3, r0, pc, lsl lr
2000ab34:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000ab38:	00000000 	andeq	r0, r0, r0
2000ab3c:	783ff000 	ldmdavc	pc!, {ip, sp, lr, pc}	; <UNPREDICTABLE>
2000ab40:	07fff800 	ldrbeq	pc, [pc, r0, lsl #16]!	; <UNPREDICTABLE>
2000ab44:	00000000 	andeq	r0, r0, r0
2000ab48:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
2000ab4c:	fc00f8ff 	stc2	8, cr15, [r0], {255}	; 0xff
2000ab50:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000ab54:	00000000 	andeq	r0, r0, r0
2000ab58:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
2000ab5c:	0fe03e00 	svceq	0x00e03e00
2000ab60:	00000000 	andeq	r0, r0, r0
2000ab64:	c0000000 	andgt	r0, r0, r0
2000ab68:	0700ffff 			; <UNDEFINED> instruction: 0x0700ffff
2000ab6c:	00001fe0 	andeq	r1, r0, r0, ror #31
2000ab70:	00000000 	andeq	r0, r0, r0
2000ab74:	3fffc000 	svccc	0x00ffc000
2000ab78:	3fe00300 	svccc	0x00e00300
2000ab7c:	00000000 	andeq	r0, r0, r0
2000ab80:	e0000000 	and	r0, r0, r0
2000ab84:	ff1c07ff 			; <UNDEFINED> instruction: 0xff1c07ff
2000ab88:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
2000ab8c:	00000000 	andeq	r0, r0, r0
2000ab90:	81ffc000 	mvnshi	ip, r0
2000ab94:	3fffff3f 	svccc	0x00ffff3f
	...
2000aba0:	fe7fc07f 	mrc2	0, 3, ip, cr15, cr15, {3}
2000aba4:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
2000aba8:	00000000 	andeq	r0, r0, r0
2000abac:	e0000000 	and	r0, r0, r0
2000abb0:	0ffff87f 	svceq	0x00fff87f
	...
2000abbc:	007df800 	rsbseq	pc, sp, r0, lsl #16
2000abc0:	000007fe 	strdeq	r0, [r0], -lr
2000abc4:	00000000 	andeq	r0, r0, r0
2000abc8:	fc000000 	stc2	0, cr0, [r0], {-0}
2000abcc:	03fc00f8 	mvnseq	r0, #248	; 0xf8
	...
2000abd8:	01f87e00 	mvnseq	r7, r0, lsl #28
2000abdc:	00000030 	andeq	r0, r0, r0, lsr r0
2000abe0:	00000000 	andeq	r0, r0, r0
2000abe4:	7f800000 	svcvc	0x00800000
2000abe8:	000003f8 	strdeq	r0, [r0], -r8
	...
2000abf4:	07fc7fc0 	ldrbeq	r7, [ip, r0, asr #31]!
	...
2000ac00:	fff00000 			; <UNDEFINED> instruction: 0xfff00000	; IMB
2000ac04:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
2000ac10:	07fffff0 			; <UNDEFINED> instruction: 0x07fffff0
	...
2000ac1c:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
2000ac20:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
2000ac2c:	03ffbe00 	mvnseq	fp, #0, 28
	...
2000ac3c:	000003fe 	strdeq	r0, [r0], -lr
	...
2000ac48:	01f00000 	mvnseq	r0, r0
	...

2000ad18 <boom3_gray_bits>:
	...
2000ae24:	00700000 	rsbseq	r0, r0, r0
	...
2000ae34:	00000020 	andeq	r0, r0, r0, lsr #32
	...
2000ae40:	04c00000 	strbeq	r0, [r0], #0
	...
2000ae50:	00000700 	andeq	r0, r0, r0, lsl #14
	...
2000ae60:	0010c000 	andseq	ip, r0, r0
	...
2000ae6c:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
2000ae70:	00000010 	andeq	r0, r0, r0, lsl r0
	...
2000ae7c:	001ffc00 	andseq	pc, pc, r0, lsl #24
	...
2000aec0:	00020000 	andeq	r0, r2, r0
	...
2000aed0:	00000001 	andeq	r0, r0, r1
	...
2000aedc:	00018000 	andeq	r8, r1, r0
	...
2000aee8:	80000000 	andhi	r0, r0, r0
2000aeec:	00000007 	andeq	r0, r0, r7
	...
2000aef8:	00038000 	andeq	r8, r3, r0
	...

2000b01c <boom3_light_bits>:
	...
2000b138:	000001c0 	andeq	r0, r0, r0, asr #3
	...
2000b144:	03000000 	movweq	r0, #0
	...
2000b164:	000f0000 	andeq	r0, pc, r0
	...
2000b170:	80000000 	andhi	r0, r0, r0
2000b174:	0000000f 	andeq	r0, r0, pc
	...
2000b1d4:	00000006 	andeq	r0, r0, r6
	...
2000b1e0:	00060000 	andeq	r0, r6, r0
	...

2000b320 <boom4_black_bits>:
	...
2000b37c:	00000060 	andeq	r0, r0, r0, rrx
2000b380:	00000000 	andeq	r0, r0, r0
2000b384:	7c000000 	stcvc	0, cr0, [r0], {-0}
2000b388:	00200000 	eoreq	r0, r0, r0
	...
2000b394:	0001fc00 	andeq	pc, r1, r0, lsl #24
	...
2000b3a0:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
2000b3a4:	00000003 	andeq	r0, r0, r3
	...
2000b3b0:	0003f000 	andeq	pc, r3, r0
	...
2000b3bc:	607ff000 	rsbsvs	pc, pc, r0
2000b3c0:	f8000007 			; <UNDEFINED> instruction: 0xf8000007
2000b3c4:	00000001 	andeq	r0, r0, r1
2000b3c8:	ff81c000 			; <UNDEFINED> instruction: 0xff81c000
2000b3cc:	0007e1ff 	strdeq	lr, [r7], -pc	; <UNPREDICTABLE>
2000b3d0:	0783ff80 	streq	pc, [r3, r0, lsl #31]
2000b3d4:	c0000000 	andgt	r0, r0, r0
2000b3d8:	f3ffff81 			; <UNDEFINED> instruction: 0xf3ffff81
2000b3dc:	ffffe003 			; <UNDEFINED> instruction: 0xffffe003
2000b3e0:	00000783 	andeq	r0, r0, r3, lsl #15
2000b3e4:	ff80c000 			; <UNDEFINED> instruction: 0xff80c000
2000b3e8:	f003f7ff 			; <UNDEFINED> instruction: 0xf003f7ff
2000b3ec:	0787ffff 			; <UNDEFINED> instruction: 0x0787ffff
2000b3f0:	00000000 	andeq	r0, r0, r0
2000b3f4:	f7c3ff80 			; <UNDEFINED> instruction: 0xf7c3ff80
2000b3f8:	cffff003 	svcgt	0x00fff003
2000b3fc:	00000787 	andeq	r0, r0, r7, lsl #15
2000b400:	ff800000 			; <UNDEFINED> instruction: 0xff800000
2000b404:	f001efe3 			; <UNDEFINED> instruction: 0xf001efe3
2000b408:	030787ff 	movweq	r8, #30719	; 0x77ff
2000b40c:	00000000 	andeq	r0, r0, r0
2000b410:	8ff0ff80 	svchi	0x00f0ff80
2000b414:	87fff001 	ldrbhi	pc, [pc, r1]!	; <UNPREDICTABLE>
2000b418:	00000003 	andeq	r0, r0, r3
2000b41c:	7f800000 	svcvc	0x00800000
2000b420:	e0000ff8 	strd	r0, [r0], -r8
2000b424:	00c387ff 	strdeq	r8, [r3], #127	; 0x7f
2000b428:	00000000 	andeq	r0, r0, r0
2000b42c:	07ffff80 	ldrbeq	pc, [pc, r0, lsl #31]!	; <UNPREDICTABLE>
2000b430:	c7fff800 	ldrbgt	pc, [pc, r0, lsl #16]!	; <UNPREDICTABLE>
2000b434:	000000c3 	andeq	r0, r0, r3, asr #1
2000b438:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
2000b43c:	fc0003ff 	stc2	3, cr0, [r0], {255}	; 0xff
2000b440:	0001e3ff 	strdeq	lr, [r1], -pc	; <UNPREDICTABLE>
2000b444:	c0000000 	andgt	r0, r0, r0
2000b448:	039fffc0 	orrseq	pc, pc, #192, 30	; 0x300
2000b44c:	f9fffc00 			; <UNDEFINED> instruction: 0xf9fffc00
2000b450:	00000000 	andeq	r0, r0, r0
2000b454:	ffe0c000 			; <UNDEFINED> instruction: 0xffe0c000
2000b458:	fc007807 	stc2	8, cr7, [r0], {7}
2000b45c:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
2000b460:	00000000 	andeq	r0, r0, r0
2000b464:	7e03ffe0 	cdpvc	15, 0, cr15, cr3, cr0, {7}
2000b468:	3ffffc00 	svccc	0x00fffc00
2000b46c:	0000001c 	andeq	r0, r0, ip, lsl r0
2000b470:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
2000b474:	fc00ff00 	stc2	15, cr15, [r0], {-0}
2000b478:	007e1fff 	ldrshteq	r1, [lr], #-255	; 0xffffff01
2000b47c:	00000000 	andeq	r0, r0, r0
2000b480:	7f803f00 	svcvc	0x00803f00
2000b484:	3ffe3800 	svccc	0x00fe3800
2000b488:	000000fe 	strdeq	r0, [r0], -lr
2000b48c:	00000000 	andeq	r0, r0, r0
2000b490:	02007f80 	andeq	r7, r0, #128, 30	; 0x200
2000b494:	00fe1ff8 	ldrshteq	r1, [lr], #248	; 0xf8
2000b498:	00000000 	andeq	r0, r0, r0
2000b49c:	7f800000 	svcvc	0x00800000
2000b4a0:	1ff00700 	svcne	0x00f00700
2000b4a4:	000000ee 	andeq	r0, r0, lr, ror #1
2000b4a8:	00000000 	andeq	r0, r0, r0
2000b4ac:	0787ff80 	streq	pc, [r7, r0, lsl #31]
2000b4b0:	006607e0 	rsbeq	r0, r6, r0, ror #15
2000b4b4:	00000000 	andeq	r0, r0, r0
2000b4b8:	ff83c000 			; <UNDEFINED> instruction: 0xff83c000
2000b4bc:	00000fc3 	andeq	r0, r0, r3, asr #31
2000b4c0:	00000076 	andeq	r0, r0, r6, ror r0
2000b4c4:	e0000000 	and	r0, r0, r0
2000b4c8:	0fffffc3 	svceq	0x00ffffc3
2000b4cc:	003f0000 	eorseq	r0, pc, r0
2000b4d0:	00000000 	andeq	r0, r0, r0
2000b4d4:	ffe3f000 			; <UNDEFINED> instruction: 0xffe3f000
2000b4d8:	80000fff 	strdhi	r0, [r0], -pc	; <UNPREDICTABLE>
2000b4dc:	0000003f 	andeq	r0, r0, pc, lsr r0
2000b4e0:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
2000b4e4:	0ffffff3 	svceq	0x00fffff3
2000b4e8:	003f81fe 	ldrshteq	r8, [pc], -lr
2000b4ec:	00000000 	andeq	r0, r0, r0
2000b4f0:	9ffbe000 	svcls	0x00fbe000
2000b4f4:	81ff03ff 	ldrshhi	r0, [pc, #63]	; 2000b53b <boom4_black_bits+0x21b>
2000b4f8:	0000001f 	andeq	r0, r0, pc, lsl r0
2000b4fc:	00000000 	andeq	r0, r0, r0
2000b500:	00ff1ff8 	ldrshteq	r1, [pc], #248
2000b504:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000b508:	00000000 	andeq	r0, r0, r0
2000b50c:	3ff80000 	svccc	0x00f80000
2000b510:	00fe001f 	rscseq	r0, lr, pc, lsl r0
	...
2000b51c:	001e7ff8 			; <UNDEFINED> instruction: 0x001e7ff8
2000b520:	000000fc 	strdeq	r0, [r0], -ip
2000b524:	00000000 	andeq	r0, r0, r0
2000b528:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
2000b52c:	0078003f 	rsbseq	r0, r8, pc, lsr r0
	...
2000b538:	007ffffc 	ldrshteq	pc, [pc], #-252	; <UNPREDICTABLE>
	...
2000b544:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
2000b548:	0000007f 	andeq	r0, r0, pc, ror r0
2000b54c:	00000000 	andeq	r0, r0, r0
2000b550:	04000000 	streq	r0, [r0], #-0
2000b554:	007fc07e 	rsbseq	ip, pc, lr, ror r0	; <UNPREDICTABLE>
	...
2000b560:	001e0000 	andseq	r0, lr, r0
2000b564:	0000007f 	andeq	r0, r0, pc, ror r0
	...
2000b570:	1c3c1e0c 	ldcne	14, cr1, [ip], #-48	; 0xffffffd0
	...
2000b57c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
2000b580:	00007c00 	andeq	r7, r0, r0, lsl #24
	...
2000b58c:	fc01ff00 	stc2	15, cr15, [r1], {-0}
	...
2000b598:	ff000000 			; <UNDEFINED> instruction: 0xff000000
2000b59c:	0000fc01 	andeq	pc, r0, r1, lsl #24
	...
2000b5a8:	fc01fc00 	stc2	12, cr15, [r1], {-0}
2000b5ac:	00000001 	andeq	r0, r0, r1
2000b5b0:	00000000 	andeq	r0, r0, r0
2000b5b4:	e0000000 	and	r0, r0, r0
2000b5b8:	0000f801 	andeq	pc, r0, r1, lsl #16
	...

2000b624 <boom4_gray_bits>:
	...
2000b6c0:	80000000 	andhi	r0, r0, r0
	...
2000b6f8:	002c0000 	eoreq	r0, ip, r0
2000b6fc:	30000000 	andcc	r0, r0, r0
	...
2000b708:	00000004 	andeq	r0, r0, r4
2000b70c:	00001800 	andeq	r1, r0, r0, lsl #16
2000b710:	00000000 	andeq	r0, r0, r0
2000b714:	000f0000 	andeq	r0, pc, r0
2000b718:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
2000b71c:	00000000 	andeq	r0, r0, r0
2000b720:	80000000 	andhi	r0, r0, r0
2000b724:	00000007 	andeq	r0, r0, r7
2000b728:	00005800 	andeq	r5, r0, r0, lsl #16
	...
2000b734:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
	...
2000b744:	00001c00 	andeq	r1, r0, r0, lsl #24
	...
2000b750:	06000000 	streq	r0, [r0], -r0
	...
2000b794:	01c00000 	biceq	r0, r0, r0
	...
2000b7a4:	00000020 	andeq	r0, r0, r0, lsr #32
2000b7a8:	00000010 	andeq	r0, r0, r0, lsl r0
2000b7ac:	00000000 	andeq	r0, r0, r0
2000b7b0:	00380000 	eorseq	r0, r8, r0
2000b7b4:	00180000 	andseq	r0, r8, r0
	...
2000b7c0:	0000003c 	andeq	r0, r0, ip, lsr r0
2000b7c4:	00000008 	andeq	r0, r0, r8
	...
2000b7f4:	60000000 	andvs	r0, r0, r0
	...
2000b804:	00006000 	andeq	r6, r0, r0
	...
2000b810:	c0000000 	andgt	r0, r0, r0
	...
2000b820:	00018000 	andeq	r8, r1, r0
	...

2000b928 <boom4_light_bits>:
	...
2000b9fc:	00100000 	andseq	r0, r0, r0
	...
2000ba0c:	00000018 	andeq	r0, r0, r8, lsl r0
2000ba10:	00006000 	andeq	r6, r0, r0
	...
2000ba1c:	20000000 	andcs	r0, r0, r0
	...
2000ba2c:	00002000 	andeq	r2, r0, r0
	...
2000baa8:	000000c0 	andeq	r0, r0, r0, asr #1
	...
2000bab4:	00400000 	subeq	r0, r0, r0
	...
2000bb08:	00008000 	andeq	r8, r0, r0
	...

2000bc2c <boom5_black_bits>:
	...
2000bc88:	00000060 	andeq	r0, r0, r0, rrx
2000bc8c:	00000000 	andeq	r0, r0, r0
2000bc90:	7c000000 	stcvc	0, cr0, [r0], {-0}
2000bc94:	00200000 	eoreq	r0, r0, r0
	...
2000bca0:	0001fc00 	andeq	pc, r1, r0, lsl #24
2000bca4:	00000020 	andeq	r0, r0, r0, lsr #32
2000bca8:	00000000 	andeq	r0, r0, r0
2000bcac:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
2000bcb0:	00000003 	andeq	r0, r0, r3
	...
2000bcbc:	0003f000 	andeq	pc, r3, r0
	...
2000bcc8:	607ff000 	rsbsvs	pc, pc, r0
2000bccc:	f8000006 			; <UNDEFINED> instruction: 0xf8000006
2000bcd0:	00000001 	andeq	r0, r0, r1
2000bcd4:	ff81c000 			; <UNDEFINED> instruction: 0xff81c000
2000bcd8:	0006e1ff 	strdeq	lr, [r6], -pc	; <UNPREDICTABLE>
2000bcdc:	0783ff80 	streq	pc, [r3, r0, lsl #31]
2000bce0:	c0000000 	andgt	r0, r0, r0
2000bce4:	f3ffff81 			; <UNDEFINED> instruction: 0xf3ffff81
2000bce8:	ffffe00e 			; <UNDEFINED> instruction: 0xffffe00e
2000bcec:	00000783 	andeq	r0, r0, r3, lsl #15
2000bcf0:	ff80c000 			; <UNDEFINED> instruction: 0xff80c000
2000bcf4:	f007f7ff 			; <UNDEFINED> instruction: 0xf007f7ff
2000bcf8:	0787ffff 			; <UNDEFINED> instruction: 0x0787ffff
2000bcfc:	00000000 	andeq	r0, r0, r0
2000bd00:	f7f1ff80 			; <UNDEFINED> instruction: 0xf7f1ff80
2000bd04:	cffff007 	svcgt	0x00fff007
2000bd08:	00000787 	andeq	r0, r0, r7, lsl #15
2000bd0c:	ff800000 			; <UNDEFINED> instruction: 0xff800000
2000bd10:	f003eff0 			; <UNDEFINED> instruction: 0xf003eff0
2000bd14:	0707c3ff 			; <UNDEFINED> instruction: 0x0707c3ff
2000bd18:	00000000 	andeq	r0, r0, r0
2000bd1c:	cff0ff80 	svcgt	0x00f0ff80
2000bd20:	c3fff003 	mvnsgt	pc, #3
2000bd24:	00000603 	andeq	r0, r0, r3, lsl #12
2000bd28:	7f800000 	svcvc	0x00800000
2000bd2c:	e0038ff8 	strd	r8, [r3], -r8	; <UNPREDICTABLE>
2000bd30:	04c3e3ff 	strbeq	lr, [r3], #1023	; 0x3ff
2000bd34:	00000000 	andeq	r0, r0, r0
2000bd38:	07f87f80 	ldrbeq	r7, [r8, r0, lsl #31]!
2000bd3c:	e3fff803 	mvns	pc, #196608	; 0x30000
2000bd40:	000004c3 	andeq	r0, r0, r3, asr #9
2000bd44:	3fc00000 	svccc	0x00c00000
2000bd48:	fc0003ff 	stc2	3, cr0, [r0], {255}	; 0xff
2000bd4c:	0481f3ff 	streq	pc, [r1], #1023	; 0x3ff
2000bd50:	c0000000 	andgt	r0, r0, r0
2000bd54:	03bfffc0 			; <UNDEFINED> instruction: 0x03bfffc0
2000bd58:	f9fffc00 			; <UNDEFINED> instruction: 0xf9fffc00
2000bd5c:	00000081 	andeq	r0, r0, r1, lsl #1
2000bd60:	ffe0c000 			; <UNDEFINED> instruction: 0xffe0c000
2000bd64:	fc00781f 	stc2	8, cr7, [r0], {31}
2000bd68:	0001fcff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
2000bd6c:	40000000 	andmi	r0, r0, r0
2000bd70:	7e07ffe0 	cdpvc	15, 0, cr15, cr7, cr0, {7}
2000bd74:	3ffffc00 	svccc	0x00fffc00
2000bd78:	0000001c 	andeq	r0, r0, ip, lsl r0
2000bd7c:	ffc04000 			; <UNDEFINED> instruction: 0xffc04000
2000bd80:	fc00ff07 	stc2	15, cr15, [r0], {7}
2000bd84:	007e1fff 	ldrshteq	r1, [lr], #-255	; 0xffffff01
2000bd88:	00000000 	andeq	r0, r0, r0
2000bd8c:	7f83ffc0 	svcvc	0x0083ffc0
2000bd90:	3ffe7800 	svccc	0x00fe7800
2000bd94:	000000fe 	strdeq	r0, [r0], -lr
2000bd98:	ff800000 			; <UNDEFINED> instruction: 0xff800000
2000bd9c:	63007f81 	movwvs	r7, #3969	; 0xf81
2000bda0:	00fe1ff8 	ldrshteq	r1, [lr], #248	; 0xf8
2000bda4:	00000000 	andeq	r0, r0, r0
2000bda8:	7f803f00 	svcvc	0x00803f00
2000bdac:	1ff06700 	svcne	0x00f06700
2000bdb0:	000000f6 	strdeq	r0, [r0], -r6
2000bdb4:	02000000 	andeq	r0, r0, #0
2000bdb8:	4781ff80 	strmi	pc, [r1, r0, lsl #31]
2000bdbc:	00660fe0 	rsbeq	r0, r6, r0, ror #31
2000bdc0:	00000000 	andeq	r0, r0, r0
2000bdc4:	ff83c000 			; <UNDEFINED> instruction: 0xff83c000
2000bdc8:	0e004fc0 	cdpeq	15, 0, cr4, cr0, cr0, {6}
2000bdcc:	00000066 	andeq	r0, r0, r6, rrx
2000bdd0:	e0000000 	and	r0, r0, r0
2000bdd4:	0ff07fc3 	svceq	0x00f07fc3
2000bdd8:	00770c00 	rsbseq	r0, r7, r0, lsl #24
2000bddc:	00000000 	andeq	r0, r0, r0
2000bde0:	7fe3f000 	svcvc	0x00e3f000
2000bde4:	8c000fff 	stchi	15, cr0, [r0], {255}	; 0xff
2000bde8:	0000007f 	andeq	r0, r0, pc, ror r0
2000bdec:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
2000bdf0:	0ffffff3 	svceq	0x00fffff3
2000bdf4:	007f81fe 	ldrshteq	r8, [pc], #-30
2000bdf8:	00000000 	andeq	r0, r0, r0
2000bdfc:	fffbe000 			; <UNDEFINED> instruction: 0xfffbe000
2000be00:	81ff03ff 	ldrshhi	r0, [pc, #63]	; 2000be47 <boom5_black_bits+0x21b>
2000be04:	0000007f 	andeq	r0, r0, pc, ror r0
2000be08:	00000000 	andeq	r0, r0, r0
2000be0c:	00ff1ff8 	ldrshteq	r1, [pc], #248
2000be10:	006f01ff 	strdeq	r0, [pc], #-31	; <UNPREDICTABLE>
2000be14:	00000000 	andeq	r0, r0, r0
2000be18:	0ff80000 	svceq	0x00f80000
2000be1c:	00fe001e 	rscseq	r0, lr, lr, lsl r0
2000be20:	00000042 	andeq	r0, r0, r2, asr #32
2000be24:	00000000 	andeq	r0, r0, r0
2000be28:	001e7ff8 			; <UNDEFINED> instruction: 0x001e7ff8
2000be2c:	004200fe 	strdeq	r0, [r2], #-14
2000be30:	00000000 	andeq	r0, r0, r0
2000be34:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
2000be38:	007c003c 	rsbseq	r0, ip, ip, lsr r0
	...
2000be44:	007ffffc 	ldrshteq	pc, [pc], #-252	; <UNPREDICTABLE>
2000be48:	0000001c 	andeq	r0, r0, ip, lsl r0
2000be4c:	00000000 	andeq	r0, r0, r0
2000be50:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
2000be54:	000c007f 	andeq	r0, ip, pc, ror r0
2000be58:	00000000 	andeq	r0, r0, r0
2000be5c:	04000000 	streq	r0, [r0], #-0
2000be60:	007fc07e 	rsbseq	ip, pc, lr, ror r0	; <UNPREDICTABLE>
2000be64:	0000000c 	andeq	r0, r0, ip
2000be68:	00000000 	andeq	r0, r0, r0
2000be6c:	001e0000 	andseq	r0, lr, r0
2000be70:	0000007f 	andeq	r0, r0, pc, ror r0
	...
2000be7c:	1c3c1e0e 	ldcne	14, cr1, [ip], #-56	; 0xffffffc8
	...
2000be88:	ff0c0000 			; <UNDEFINED> instruction: 0xff0c0000
2000be8c:	00007c00 	andeq	r7, r0, r0, lsl #24
	...
2000be98:	fc01ff0c 	stc2	15, cr15, [r1], {12}
	...
2000bea4:	ff040000 			; <UNDEFINED> instruction: 0xff040000
2000bea8:	0000fc01 	andeq	pc, r0, r1, lsl #24
	...
2000beb4:	fc01fc00 	stc2	12, cr15, [r1], {-0}
2000beb8:	00000001 	andeq	r0, r0, r1
2000bebc:	00000000 	andeq	r0, r0, r0
2000bec0:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
2000bec4:	0000f801 	andeq	pc, r0, r1, lsl #16
	...
2000bed0:	9801f000 	stmdals	r1, {ip, sp, lr, pc}
	...
2000bedc:	c0000000 	andgt	r0, r0, r0
2000bee0:	00001000 	andeq	r1, r0, r0
	...
2000beec:	10000000 	andne	r0, r0, r0
	...

2000bf30 <boom5_gray_bits>:
	...
2000bfcc:	80000000 	andhi	r0, r0, r0
	...
2000bfdc:	00010000 	andeq	r0, r1, r0
	...
2000bfec:	00000001 	andeq	r0, r0, r1
	...
2000c004:	000e0000 	andeq	r0, lr, r0
2000c008:	20000000 	andcs	r0, r0, r0
	...
2000c014:	00000007 	andeq	r0, r0, r7
2000c018:	00000c00 	andeq	r0, r0, r0, lsl #24
2000c01c:	00000000 	andeq	r0, r0, r0
2000c020:	00030000 	andeq	r0, r3, r0
2000c024:	0c000000 	stceq	0, cr0, [r0], {-0}
2000c028:	00000000 	andeq	r0, r0, r0
2000c02c:	80000000 	andhi	r0, r0, r0
2000c030:	00000001 	andeq	r0, r0, r1
2000c034:	00000400 	andeq	r0, r0, r0, lsl #8
2000c038:	00000000 	andeq	r0, r0, r0
2000c03c:	00058000 	andeq	r8, r5, r0
2000c040:	14000000 	strne	r0, [r0], #-0
2000c044:	00000000 	andeq	r0, r0, r0
2000c048:	c0000000 	andgt	r0, r0, r0
2000c04c:	00000000 	andeq	r0, r0, r0
2000c050:	00000c00 	andeq	r0, r0, r0, lsl #24
	...
2000c05c:	06000000 	streq	r0, [r0], -r0
	...
2000c06c:	00000300 	andeq	r0, r0, r0, lsl #6
	...
2000c0a0:	00e80000 	rsceq	r0, r8, r0
	...
2000c0b0:	0000008c 	andeq	r0, r0, ip, lsl #1
2000c0b4:	00000008 	andeq	r0, r0, r8
2000c0b8:	00000000 	andeq	r0, r0, r0
2000c0bc:	00060000 	andeq	r0, r6, r0
2000c0c0:	00080000 	andeq	r0, r8, r0
	...
2000c0cc:	0000003f 	andeq	r0, r0, pc, lsr r0
2000c0d0:	00000018 	andeq	r0, r0, r8, lsl r0
2000c0d4:	00000000 	andeq	r0, r0, r0
2000c0d8:	000f8000 	andeq	r8, pc, r0
2000c0dc:	00080000 	andeq	r0, r8, r0
2000c0e0:	00000000 	andeq	r0, r0, r0
2000c0e4:	80000000 	andhi	r0, r0, r0
	...
2000c110:	00002000 	andeq	r2, r0, r0
	...
2000c11c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
2000c120:	00000001 	andeq	r0, r0, r1
	...
2000c12c:	00018000 	andeq	r8, r1, r0
	...
2000c13c:	00000003 	andeq	r0, r0, r3
	...

2000c234 <boom5_light_bits>:
	...
2000c2d4:	00000001 	andeq	r0, r0, r1
	...
2000c30c:	10000000 	andne	r0, r0, r0
	...
2000c318:	00000008 	andeq	r0, r0, r8
2000c31c:	00003000 	andeq	r3, r0, r0
2000c320:	00000000 	andeq	r0, r0, r0
2000c324:	000c0000 	andeq	r0, ip, r0
2000c328:	30000000 	andcc	r0, r0, r0
	...
2000c334:	00000006 	andeq	r0, r0, r6
2000c338:	00001800 	andeq	r1, r0, r0, lsl #16
2000c33c:	00000000 	andeq	r0, r0, r0
2000c340:	00020000 	andeq	r0, r2, r0
2000c344:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
	...
2000c3b4:	00000070 	andeq	r0, r0, r0, ror r0
	...
2000c3c0:	00780000 	rsbseq	r0, r8, r0
2000c3c4:	00100000 	andseq	r0, r0, r0
	...
2000c414:	0000c000 	andeq	ip, r0, r0
	...

2000c538 <boom6_black_bits>:
	...
2000c594:	00000060 	andeq	r0, r0, r0, rrx
2000c598:	00000000 	andeq	r0, r0, r0
2000c59c:	7c000000 	stcvc	0, cr0, [r0], {-0}
2000c5a0:	00200000 	eoreq	r0, r0, r0
	...
2000c5ac:	0001fc00 	andeq	pc, r1, r0, lsl #24
2000c5b0:	00000020 	andeq	r0, r0, r0, lsr #32
2000c5b4:	00000000 	andeq	r0, r0, r0
2000c5b8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
2000c5bc:	00200003 	eoreq	r0, r0, r3
	...
2000c5c8:	0003f000 	andeq	pc, r3, r0
	...
2000c5d4:	607ff000 	rsbsvs	pc, pc, r0
2000c5d8:	f8000006 			; <UNDEFINED> instruction: 0xf8000006
2000c5dc:	00000001 	andeq	r0, r0, r1
2000c5e0:	ff81c000 			; <UNDEFINED> instruction: 0xff81c000
2000c5e4:	000661ff 	strdeq	r6, [r6], -pc	; <UNPREDICTABLE>
2000c5e8:	0783ff80 	streq	pc, [r3, r0, lsl #31]
2000c5ec:	c0000000 	andgt	r0, r0, r0
2000c5f0:	73ffff81 	mvnsvc	pc, #516	; 0x204
2000c5f4:	ffffe00e 			; <UNDEFINED> instruction: 0xffffe00e
2000c5f8:	00000783 	andeq	r0, r0, r3, lsl #15
2000c5fc:	ff80c000 			; <UNDEFINED> instruction: 0xff80c000
2000c600:	f00ef7f8 			; <UNDEFINED> instruction: 0xf00ef7f8
2000c604:	0787ffff 			; <UNDEFINED> instruction: 0x0787ffff
2000c608:	40000000 	andmi	r0, r0, r0
2000c60c:	f7f03f80 			; <UNDEFINED> instruction: 0xf7f03f80
2000c610:	e3fff007 	mvns	pc, #7
2000c614:	00000787 	andeq	r0, r0, r7, lsl #15
2000c618:	1f800000 	svcne	0x00800000
2000c61c:	f007efe0 			; <UNDEFINED> instruction: 0xf007efe0
2000c620:	0707c1ff 			; <UNDEFINED> instruction: 0x0707c1ff
2000c624:	00000000 	andeq	r0, r0, r0
2000c628:	cfe01f80 	svcgt	0x00e01f80
2000c62c:	c1fff003 	mvnsgt	pc, r3
2000c630:	00000603 	andeq	r0, r0, r3, lsl #12
2000c634:	1f800000 	svcne	0x00800000
2000c638:	f0038ff0 			; <UNDEFINED> instruction: 0xf0038ff0
2000c63c:	04c3c1ff 	strbeq	ip, [r3], #511	; 0x1ff
2000c640:	00000000 	andeq	r0, r0, r0
2000c644:	07fc1f80 	ldrbeq	r1, [ip, r0, lsl #31]!
2000c648:	c1fff803 	mvnsgt	pc, r3, lsl #16
2000c64c:	000004c3 	andeq	r0, r0, r3, asr #9
2000c650:	1fc00000 	svcne	0x00c00000
2000c654:	fc0203ff 	stc2	3, cr0, [r2], {255}	; 0xff
2000c658:	04c1c0ff 	strbeq	ip, [r1], #255	; 0xff
2000c65c:	c0000000 	andgt	r0, r0, r0
2000c660:	03bfffc0 			; <UNDEFINED> instruction: 0x03bfffc0
2000c664:	f07ffc00 			; <UNDEFINED> instruction: 0xf07ffc00
2000c668:	00000481 	andeq	r0, r0, r1, lsl #9
2000c66c:	ffe0c000 			; <UNDEFINED> instruction: 0xffe0c000
2000c670:	fc00799f 	stc2	9, cr7, [r0], {159}	; 0x9f	; <UNPREDICTABLE>
2000c674:	0081f87f 	addeq	pc, r1, pc, ror r8	; <UNPREDICTABLE>
2000c678:	40000000 	andmi	r0, r0, r0
2000c67c:	7e87ffe0 	cdpvc	15, 8, cr15, cr7, cr0, {7}
2000c680:	387ffc00 	ldmdacc	pc!, {sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
2000c684:	0000001c 	andeq	r0, r0, ip, lsl r0
2000c688:	ffc04000 			; <UNDEFINED> instruction: 0xffc04000
2000c68c:	fc00ff07 	stc2	15, cr15, [r0], {7}
2000c690:	007e1fff 	ldrshteq	r1, [lr], #-255	; 0xffffff01
2000c694:	40000000 	andmi	r0, r0, r0
2000c698:	7f83ffc0 	svcvc	0x0083ffc0
2000c69c:	3ffe7800 	svccc	0x00fe7800
2000c6a0:	000000fe 	strdeq	r0, [r0], -lr
2000c6a4:	ff800000 			; <UNDEFINED> instruction: 0xff800000
2000c6a8:	63007f81 	movwvs	r7, #3969	; 0xf81
2000c6ac:	00ee1ff8 	strdeq	r1, [lr], #248	; 0xf8	; <UNPREDICTABLE>
2000c6b0:	00000000 	andeq	r0, r0, r0
2000c6b4:	7f803f00 	svcvc	0x00803f00
2000c6b8:	1ff06600 	svcne	0x00f06600
2000c6bc:	000000e6 	andeq	r0, r0, r6, ror #1
2000c6c0:	07000000 	streq	r0, [r0, -r0]
2000c6c4:	4600ff80 	strmi	pc, [r0], -r0, lsl #31
2000c6c8:	00660fe0 	rsbeq	r0, r6, r0, ror #31
2000c6cc:	00000000 	andeq	r0, r0, r0
2000c6d0:	3f83c300 	svccc	0x0083c300
2000c6d4:	0e004f80 	cdpeq	15, 0, cr4, cr0, cr0, {4}
2000c6d8:	00000066 	andeq	r0, r0, r6, rrx
2000c6dc:	e3000000 	movw	r0, #0
2000c6e0:	0ff03fc3 	svceq	0x00f03fc3
2000c6e4:	007f0c00 	rsbseq	r0, pc, r0, lsl #24
2000c6e8:	00000000 	andeq	r0, r0, r0
2000c6ec:	ffe3f300 			; <UNDEFINED> instruction: 0xffe3f300
2000c6f0:	8c000fff 	stchi	15, cr0, [r0], {255}	; 0xff
2000c6f4:	0000007f 	andeq	r0, r0, pc, ror r0
2000c6f8:	f1000000 	cps	#0
2000c6fc:	0ffffff3 	svceq	0x00fffff3
2000c700:	007f89fe 	ldrshteq	r8, [pc], #-158
2000c704:	00000000 	andeq	r0, r0, r0
2000c708:	3ffbe000 	svccc	0x00fbe000
2000c70c:	89ff03ff 	ldmibhi	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9}^	; <UNPREDICTABLE>
2000c710:	0000007f 	andeq	r0, r0, pc, ror r0
2000c714:	80000000 	andhi	r0, r0, r0
2000c718:	00ff1ffb 	ldrshteq	r1, [pc], #251
2000c71c:	006f01ff 	strdeq	r0, [pc], #-31	; <UNPREDICTABLE>
2000c720:	00000000 	andeq	r0, r0, r0
2000c724:	0ff98000 	svceq	0x00f98000
2000c728:	00fe001e 	rscseq	r0, lr, lr, lsl r0
2000c72c:	00000066 	andeq	r0, r0, r6, rrx
2000c730:	80000000 	andhi	r0, r0, r0
2000c734:	001e3ff8 			; <UNDEFINED> instruction: 0x001e3ff8
2000c738:	004200fe 	strdeq	r0, [r2], #-14
2000c73c:	00000000 	andeq	r0, r0, r0
2000c740:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
2000c744:	007c003c 	rsbseq	r0, ip, ip, lsr r0
2000c748:	00000042 	andeq	r0, r0, r2, asr #32
2000c74c:	00000000 	andeq	r0, r0, r0
2000c750:	0079fffc 	ldrshteq	pc, [r9], #-252	; 0xffffff04	; <UNPREDICTABLE>
2000c754:	0002001c 	andeq	r0, r2, ip, lsl r0
2000c758:	00000000 	andeq	r0, r0, r0
2000c75c:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
2000c760:	000c007f 	andeq	r0, ip, pc, ror r0
2000c764:	00000002 	andeq	r0, r0, r2
2000c768:	04000000 	streq	r0, [r0], #-0
2000c76c:	007fc07e 	rsbseq	ip, pc, lr, ror r0	; <UNPREDICTABLE>
2000c770:	0000000c 	andeq	r0, r0, ip
2000c774:	00000000 	andeq	r0, r0, r0
2000c778:	003e0400 	eorseq	r0, lr, r0, lsl #8
2000c77c:	0004007f 	andeq	r0, r4, pc, ror r0
	...
2000c788:	1c3c1e1e 	ldcne	14, cr1, [ip], #-120	; 0xffffff88
2000c78c:	00000004 	andeq	r0, r0, r4
2000c790:	00000000 	andeq	r0, r0, r0
2000c794:	ff1c0000 			; <UNDEFINED> instruction: 0xff1c0000
2000c798:	00007c00 	andeq	r7, r0, r0, lsl #24
	...
2000c7a4:	fc01ff1c 	stc2	15, cr15, [r1], {28}
	...
2000c7b0:	ff0c0000 			; <UNDEFINED> instruction: 0xff0c0000
2000c7b4:	0000fc01 	andeq	pc, r0, r1, lsl #24
	...
2000c7c0:	fc01fc08 	stc2	12, cr15, [r1], {8}
2000c7c4:	00000001 	andeq	r0, r0, r1
2000c7c8:	00000000 	andeq	r0, r0, r0
2000c7cc:	f0080000 			; <UNDEFINED> instruction: 0xf0080000
2000c7d0:	0000f801 	andeq	pc, r0, r1, lsl #16
	...
2000c7dc:	d801f008 	stmdale	r1, {r3, ip, sp, lr, pc}
	...
2000c7e8:	e0000000 	and	r0, r0, r0
2000c7ec:	00009000 	andeq	r9, r0, r0
	...
2000c7f8:	90006000 	andls	r6, r0, r0
	...
2000c804:	40000000 	andmi	r0, r0, r0
2000c808:	00001000 	andeq	r1, r0, r0
	...
2000c814:	00004000 	andeq	r4, r0, r0
	...

2000c83c <boom6_gray_bits>:
	...
2000c8d8:	80000000 	andhi	r0, r0, r0
	...
2000c8e8:	00008000 	andeq	r8, r0, r0
	...
2000c8f4:	80000000 	andhi	r0, r0, r0
2000c8f8:	00000001 	andeq	r0, r0, r1
	...
2000c904:	00010007 	andeq	r0, r1, r7
	...
2000c910:	0008c000 	andeq	ip, r8, r0
2000c914:	1c000000 	stcne	0, cr0, [r0], {-0}
2000c918:	00000000 	andeq	r0, r0, r0
2000c91c:	e0000000 	and	r0, r0, r0
2000c920:	00000018 	andeq	r0, r0, r8, lsl r0
2000c924:	00002600 	andeq	r2, r0, r0, lsl #12
2000c928:	00000000 	andeq	r0, r0, r0
2000c92c:	00136000 	andseq	r6, r3, r0
2000c930:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
2000c934:	00000000 	andeq	r0, r0, r0
2000c938:	e0000000 	and	r0, r0, r0
2000c93c:	0000000f 	andeq	r0, r0, pc
2000c940:	00002600 	andeq	r2, r0, r0, lsl #12
2000c944:	00000000 	andeq	r0, r0, r0
2000c948:	0003e000 	andeq	lr, r3, r0
2000c94c:	26000000 	strcs	r0, [r0], -r0
2000c950:	00000000 	andeq	r0, r0, r0
2000c954:	e0000000 	and	r0, r0, r0
2000c958:	00000000 	andeq	r0, r0, r0
2000c95c:	00003300 	andeq	r3, r0, r0, lsl #6
	...
2000c968:	09800000 	stmibeq	r0, {}	; <UNPREDICTABLE>
	...
2000c978:	00000780 	andeq	r0, r0, r0, lsl #15
	...
2000c984:	07800000 	streq	r0, [r0, r0]
	...
2000c9a0:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
2000c9ac:	008c0000 	addeq	r0, ip, r0
2000c9b0:	00100000 	andseq	r0, r0, r0
	...
2000c9bc:	00000106 	andeq	r0, r0, r6, lsl #2
2000c9c0:	00000008 	andeq	r0, r0, r8
2000c9c4:	00000000 	andeq	r0, r0, r0
2000c9c8:	01630000 	cmneq	r3, r0
2000c9cc:	00080000 	andeq	r0, r8, r0
2000c9d0:	00000000 	andeq	r0, r0, r0
2000c9d4:	c0000000 	andgt	r0, r0, r0
2000c9d8:	0000007f 	andeq	r0, r0, pc, ror r0
2000c9dc:	00000018 	andeq	r0, r0, r8, lsl r0
2000c9e0:	00000000 	andeq	r0, r0, r0
2000c9e4:	000fc000 	andeq	ip, pc, r0
	...
2000ca0c:	c0000000 	andgt	r0, r0, r0
	...
2000ca1c:	00002000 	andeq	r2, r0, r0
	...
2000ca28:	70000000 	andvc	r0, r0, r0
	...
2000ca38:	0001c000 	andeq	ip, r1, r0
	...
2000ca48:	00000003 	andeq	r0, r0, r3
	...
2000ca54:	00060000 	andeq	r0, r6, r0
	...

2000cb40 <boom6_light_bits>:
	...
2000cbe0:	00000001 	andeq	r0, r0, r1
	...
2000cbec:	00010000 	andeq	r0, r1, r0
	...
2000cc14:	00070000 	andeq	r0, r7, r0
	...
2000cc24:	00000007 	andeq	r0, r0, r7
2000cc28:	00001800 	andeq	r1, r0, r0, lsl #16
2000cc2c:	00000000 	andeq	r0, r0, r0
2000cc30:	000c8000 	andeq	r8, ip, r0
2000cc34:	10000000 	andne	r0, r0, r0
	...
2000cc44:	00001800 	andeq	r1, r0, r0, lsl #16
	...
2000cc50:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
	...
2000cc60:	00000c00 	andeq	r0, r0, r0, lsl #24
	...
2000cc6c:	06000000 	streq	r0, [r0], -r0
	...
2000ccb0:	00700000 	rsbseq	r0, r0, r0
	...
2000ccc0:	000000f8 	strdeq	r0, [r0], -r8
2000ccc4:	00000010 	andeq	r0, r0, r0, lsl r0
2000ccc8:	00000000 	andeq	r0, r0, r0
2000cccc:	009c0000 	addseq	r0, ip, r0
2000ccd0:	00100000 	andseq	r0, r0, r0
	...
2000cd20:	0000c000 	andeq	ip, r0, r0
	...
2000cd2c:	80000000 	andhi	r0, r0, r0
2000cd30:	00000001 	andeq	r0, r0, r1
	...

2000ce44 <firstTime.4114>:
2000ce44:	00000001 	andeq	r0, r0, r1

2000ce48 <indoors_black_bits>:
2000ce48:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000ce58:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000ce68:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000ce78:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000ce88:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000ce98:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000cea8:	00000280 	andeq	r0, r0, r0, lsl #5
	...
2000ceb8:	00000440 	andeq	r0, r0, r0, asr #8
	...
2000cec8:	00002aa8 	andeq	r2, r0, r8, lsr #21
	...
2000ced8:	00001290 	muleq	r0, r0, r2
	...
2000cee8:	00002c68 	andeq	r2, r0, r8, ror #24
	...
2000cef8:	00002008 	andeq	r2, r0, r8
	...
2000cf08:	000027c8 	andeq	r2, r0, r8, asr #15
	...
2000cf18:	00001ff0 	strdeq	r1, [r0], -r0
	...
2000cf28:	00000d60 	andeq	r0, r0, r0, ror #26
	...
2000cf98:	f7fbfe00 			; <UNDEFINED> instruction: 0xf7fbfe00
2000cf9c:	7fbfdfef 	svcvc	0x00bfdfef
2000cfa0:	fbfdfeff 	blx	1ff8cba6 <startup-0x7345a>
2000cfa4:	00ff703f 	rscseq	r7, pc, pc, lsr r0	; <UNPREDICTABLE>
2000cfa8:	0c060200 	sfmeq	f0, 4, [r6], {-0}
2000cfac:	c0603018 	rsbgt	r3, r0, r8, lsl r0
2000cfb0:	06030180 	streq	r0, [r3], -r0, lsl #3
2000cfb4:	0080d02c 	addeq	sp, r0, ip, lsr #32
2000cfb8:	0c060200 	sfmeq	f0, 4, [r6], {-0}
2000cfbc:	c0603018 	rsbgt	r3, r0, r8, lsl r0
2000cfc0:	06030180 	streq	r0, [r3], -r0, lsl #3
2000cfc4:	0080d02c 	addeq	sp, r0, ip, lsr #32
2000cfc8:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
2000cfcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000cfd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000cfd4:	00ffdfef 	rscseq	sp, pc, pc, ror #31
	...
2000cfe4:	000050e8 	andeq	r5, r0, r8, ror #1
	...
2000cff4:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
2000d004:	00005028 	andeq	r5, r0, r8, lsr #32
	...
2000d014:	00005028 	andeq	r5, r0, r8, lsr #32
	...
2000d024:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
2000d034:	03f050e8 	mvnseq	r5, #232	; 0xe8
	...
2000d044:	0c0c5fe8 	stceq	15, cr5, [ip], {232}	; 0xe8
	...
2000d054:	10025028 	andne	r5, r2, r8, lsr #32
	...
2000d064:	13fa5028 	mvnsne	r5, #40	; 0x28
	...
2000d074:	100a5fe8 	andne	r5, sl, r8, ror #31
	...
2000d084:	100a50e8 	andne	r5, sl, r8, ror #1
	...
2000d094:	100a5fe8 	andne	r5, sl, r8, ror #31
	...
2000d0a4:	100a5028 	andne	r5, sl, r8, lsr #32
	...
2000d0b4:	100a5028 	andne	r5, sl, r8, lsr #32
	...
2000d0c4:	100a5fe8 	andne	r5, sl, r8, ror #31
	...
2000d0d4:	100a50e8 	andne	r5, sl, r8, ror #1
	...
2000d0e4:	100a5ee8 	andne	r5, sl, r8, ror #29
	...
2000d0f4:	100a5028 	andne	r5, sl, r8, lsr #32
	...
2000d104:	100a5028 	andne	r5, sl, r8, lsr #32
	...
2000d114:	10025fe8 	andne	r5, r2, r8, ror #31
	...
2000d124:	0ffc50e8 	svceq	0x00fc50e8
	...
2000d134:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
2000d144:	00005028 	andeq	r5, r0, r8, lsr #32
	...
2000d154:	00005028 	andeq	r5, r0, r8, lsr #32
	...
2000d164:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
2000d174:	000050e8 	andeq	r5, r0, r8, ror #1
	...
2000d184:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
2000d194:	00007028 	andeq	r7, r0, r8, lsr #32
	...
2000d1a4:	00007028 	andeq	r7, r0, r8, lsr #32
	...
2000d1b4:	00007038 	andeq	r7, r0, r8, lsr r0
2000d1b8:	f7fbfdfe 			; <UNDEFINED> instruction: 0xf7fbfdfe
2000d1bc:	7fbfdfef 	svcvc	0x00bfdfef
2000d1c0:	fbfdfeff 	blx	1ff8cdc6 <startup-0x7323a>
2000d1c4:	bfbfeff7 	svclt	0x00bfeff7
2000d1c8:	0c060301 	stceq	3, cr0, [r6], {1}
2000d1cc:	c0603018 	rsbgt	r3, r0, r8, lsl r0
2000d1d0:	06030180 	streq	r0, [r3], -r0, lsl #3
2000d1d4:	6030180c 	eorsvs	r1, r0, ip, lsl #16
2000d1d8:	0c060301 	stceq	3, cr0, [r6], {1}
2000d1dc:	c0603018 	rsbgt	r3, r0, r8, lsl r0
2000d1e0:	06030180 	streq	r0, [r3], -r0, lsl #3
2000d1e4:	6030180c 	eorsvs	r1, r0, ip, lsl #16
2000d1e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d1ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d1f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d1f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d1f8:	c0603018 	rsbgt	r3, r0, r8, lsl r0
2000d1fc:	06030180 	streq	r0, [r3], -r0, lsl #3
2000d200:	6030180c 	eorsvs	r1, r0, ip, lsl #16
2000d204:	030180c0 	movweq	r8, #4288	; 0x10c0
2000d208:	c0603018 	rsbgt	r3, r0, r8, lsl r0
2000d20c:	06030180 	streq	r0, [r3], -r0, lsl #3
2000d210:	6030180c 	eorsvs	r1, r0, ip, lsl #16
2000d214:	030180c0 	movweq	r8, #4288	; 0x10c0
2000d218:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d21c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d220:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d224:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d228:	030180c0 	movweq	r8, #4288	; 0x10c0
2000d22c:	30180c06 	andscc	r0, r8, r6, lsl #24
2000d230:	0180c060 	orreq	ip, r0, r0, rrx
2000d234:	180c0603 	stmdane	ip, {r0, r1, r9, sl}
2000d238:	030180c0 	movweq	r8, #4288	; 0x10c0
2000d23c:	30180c06 	andscc	r0, r8, r6, lsl #24
2000d240:	0180c060 	orreq	ip, r0, r0, rrx
2000d244:	180c0603 	stmdane	ip, {r0, r1, r9, sl}

2000d248 <indoors_gray_bits>:
	...
2000d2a8:	00001110 	andeq	r1, r0, r0, lsl r1
	...
2000d2b8:	00001090 	muleq	r0, r0, r0
	...
2000d2e8:	00000390 	muleq	r0, r0, r3
	...
2000d2f8:	00001340 	andeq	r1, r0, r0, asr #6
	...
2000d308:	00000830 	andeq	r0, r0, r0, lsr r8
	...
2000d398:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
2000d39c:	80402010 	subhi	r2, r0, r0, lsl r0
2000d3a0:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
2000d3a4:	00008000 	andeq	r8, r0, r0
2000d3a8:	b0582c00 	subslt	r2, r8, r0, lsl #24
2000d3ac:	0582c160 	streq	ip, [r2, #352]	; 0x160
2000d3b0:	582c160b 	stmdapl	ip!, {r0, r1, r3, r9, sl, ip}
2000d3b4:	010b0000 	mrseq	r0, (UNDEF: 11)
2000d3b8:	71b8dc00 			; <UNDEFINED> instruction: 0x71b8dc00
2000d3bc:	1b8dc6e3 	blne	1e37ef50 <startup-0x1c810b0>
2000d3c0:	b8dc6e37 	ldmlt	ip, {r0, r1, r2, r4, r5, r9, sl, fp, sp, lr}^
2000d3c4:	01370001 	teqeq	r7, r1
	...
2000d3d4:	01000000 	mrseq	r0, (UNDEF: 0)
2000d3d8:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
2000d3dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d3e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d3e4:	01ff8007 	mvnseq	r8, r7
	...
2000d3f4:	00008000 	andeq	r8, r0, r0
	...
2000d404:	00008180 	andeq	r8, r0, r0, lsl #3
	...
2000d414:	00008180 	andeq	r8, r0, r0, lsl #3
	...
2000d424:	00008000 	andeq	r8, r0, r0
	...
2000d434:	00008000 	andeq	r8, r0, r0
	...
2000d444:	00008000 	andeq	r8, r0, r0
	...
2000d454:	00008180 	andeq	r8, r0, r0, lsl #3
	...
2000d464:	20008180 	andcs	r8, r0, r0, lsl #3
	...
2000d474:	20808000 	addcs	r8, r0, r0
	...
2000d484:	20c08100 	sbccs	r8, r0, r0, lsl #2
	...
2000d494:	21e08000 	mvncs	r8, r0
	...
2000d4a4:	2bf08180 	blcs	1fc2daac <startup-0x3d2554>
	...
2000d4b4:	25c08180 	strbcs	r8, [r0, #384]	; 0x180
	...
2000d4c4:	29e08000 	stmibcs	r0!, {pc}^
	...
2000d4d4:	2bc08100 	blcs	1f02d8dc <startup-0xfd2724>
	...
2000d4e4:	20c08110 	sbccs	r8, r0, r0, lsl r1
	...
2000d4f4:	28e0a190 	stmiacs	r0!, {r4, r7, r8, sp, pc}^
	...
2000d504:	2bf08180 	blcs	1fc2db0c <startup-0x3d24f4>
	...
2000d514:	28008000 	stmdacs	r0, {pc}
	...
2000d524:	3000a010 	andcc	sl, r0, r0, lsl r0
	...
2000d534:	1fc0a000 	svcne	0x00c0a000
	...
2000d544:	0000a180 	andeq	sl, r0, r0, lsl #3
	...
2000d554:	00008190 	muleq	r0, r0, r1
	...
2000d564:	00008010 	andeq	r8, r0, r0, lsl r0
	...
2000d574:	00008110 	andeq	r8, r0, r0, lsl r1
	...
2000d584:	0000a010 	andeq	sl, r0, r0, lsl r0
	...
2000d594:	00008190 	muleq	r0, r0, r1
	...
2000d5a4:	00008190 	muleq	r0, r0, r1
	...
2000d5b4:	00008180 	andeq	r8, r0, r0, lsl #3
2000d5b8:	08040201 	stmdaeq	r4, {r0, r9}
2000d5bc:	80402010 	subhi	r2, r0, r0, lsl r0
2000d5c0:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
2000d5c4:	40401008 	submi	r1, r0, r8
2000d5c8:	b0582c16 	subslt	r2, r8, r6, lsl ip
2000d5cc:	0582c160 	streq	ip, [r2, #352]	; 0x160
2000d5d0:	582c160b 	stmdapl	ip!, {r0, r1, r3, r9, sl, ip}
2000d5d4:	82c160b0 	sbchi	r6, r1, #176	; 0xb0
2000d5d8:	71b8dc6e 			; <UNDEFINED> instruction: 0x71b8dc6e
2000d5dc:	1b8dc6e3 	blne	1e37f170 <startup-0x1c80e90>
2000d5e0:	b8dc6e37 	ldmlt	ip, {r0, r1, r2, r4, r5, r9, sl, fp, sp, lr}^
2000d5e4:	8dc6e371 	stclhi	3, cr14, [r6, #452]	; 0x1c4
	...
2000d5f8:	0582c160 	streq	ip, [r2, #352]	; 0x160
2000d5fc:	582c160b 	stmdapl	ip!, {r0, r1, r3, r9, sl, ip}
2000d600:	82c160b0 	sbchi	r6, r1, #176	; 0xb0
2000d604:	2c160b05 			; <UNDEFINED> instruction: 0x2c160b05
2000d608:	1b8dc6e3 	blne	1e37f19c <startup-0x1c80e64>
2000d60c:	b8dc6e37 	ldmlt	ip, {r0, r1, r2, r4, r5, r9, sl, fp, sp, lr}^
2000d610:	8dc6e371 	stclhi	3, cr14, [r6, #452]	; 0x1c4
2000d614:	dc6e371b 	stclle	7, cr3, [lr], #-108	; 0xffffff94
	...
2000d628:	2c160b05 			; <UNDEFINED> instruction: 0x2c160b05
2000d62c:	c160b058 	qdsubgt	fp, r8, r0
2000d630:	160b0582 	strne	r0, [fp], -r2, lsl #11
2000d634:	60b0582c 	adcsvs	r5, r0, ip, lsr #16
2000d638:	dc6e371b 	stclle	7, cr3, [lr], #-108	; 0xffffff94
2000d63c:	c6e371b8 			; <UNDEFINED> instruction: 0xc6e371b8
2000d640:	6e371b8d 	vaddvs.f64	d1, d23, d13
2000d644:	e371b8dc 	cmn	r1, #220, 16	; 0xdc0000

2000d648 <indoors_light_bits>:
	...
2000d688:	00001010 	andeq	r1, r0, r0, lsl r0
	...
2000d6b8:	00000300 	andeq	r0, r0, r0, lsl #6
	...
2000d6c8:	00001110 	andeq	r1, r0, r0, lsl r1
	...
2000d6d8:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000d6e8:	00001000 	andeq	r1, r0, r0
	...
2000d6f8:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
	...
2000d708:	00001000 	andeq	r1, r0, r0
	...
2000d7a8:	43a1d000 			; <UNDEFINED> instruction: 0x43a1d000
2000d7ac:	3a1d0e87 	bcc	207511d0 <firstTime.4040+0x742b14>
2000d7b0:	a1d0e874 	bicsge	lr, r0, r4, ror r8
2000d7b4:	00742013 	rsbseq	r2, r4, r3, lsl r0
2000d7b8:	82412000 	subhi	r2, r1, #0
2000d7bc:	24120904 	ldrcs	r0, [r2], #-2308	; 0xfffff6fc
2000d7c0:	41209048 			; <UNDEFINED> instruction: 0x41209048
2000d7c4:	00482012 	subeq	r2, r8, r2, lsl r0
	...
2000d7d4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000d7e4:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
2000d7f4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000d804:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000d814:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000d824:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000d834:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
2000d844:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000d854:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000d864:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000d874:	03702010 	cmneq	r0, #16
	...
2000d884:	03302e10 	teqeq	r0, #16, 28	; 0x100
	...
2000d894:	02102010 	andseq	r2, r0, #16
	...
2000d8a4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000d8b4:	02302010 	eorseq	r2, r0, #16
	...
2000d8c4:	02102010 	andseq	r2, r0, #16
	...
2000d8d4:	00302e10 	eorseq	r2, r0, r0, lsl lr
	...
2000d8e4:	03302000 	teqeq	r0, #0
	...
2000d8f4:	03100000 	tsteq	r0, #0
	...
2000d904:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000d914:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000d924:	00000f00 	andeq	r0, r0, r0, lsl #30
	...
2000d934:	00000010 	andeq	r0, r0, r0, lsl r0
	...
2000d944:	00000010 	andeq	r0, r0, r0, lsl r0
	...
2000d954:	00002000 	andeq	r2, r0, r0
	...
2000d964:	00002000 	andeq	r2, r0, r0
	...
2000d974:	00002e00 	andeq	r2, r0, r0, lsl #28
	...
2000d9c8:	43a1d0e8 			; <UNDEFINED> instruction: 0x43a1d0e8
2000d9cc:	3a1d0e87 	bcc	207513f0 <firstTime.4040+0x742d34>
2000d9d0:	a1d0e874 	bicsge	lr, r0, r4, ror r8
2000d9d4:	1d0e8743 	stcne	7, cr8, [lr, #-268]	; 0xfffffef4
2000d9d8:	82412090 	subhi	r2, r1, #144	; 0x90
2000d9dc:	24120904 	ldrcs	r0, [r2], #-2308	; 0xfffff6fc
2000d9e0:	41209048 			; <UNDEFINED> instruction: 0x41209048
2000d9e4:	12090482 	andne	r0, r9, #-2113929216	; 0x82000000
	...
2000d9f8:	3a1d0e87 	bcc	2075141c <firstTime.4040+0x742d60>
2000d9fc:	a1d0e874 	bicsge	lr, r0, r4, ror r8
2000da00:	1d0e8743 	stcne	7, cr8, [lr, #-268]	; 0xfffffef4
2000da04:	d0e8743a 	rscle	r7, r8, sl, lsr r4
2000da08:	24120904 	ldrcs	r0, [r2], #-2308	; 0xfffff6fc
2000da0c:	41209048 			; <UNDEFINED> instruction: 0x41209048
2000da10:	12090482 	andne	r0, r9, #-2113929216	; 0x82000000
2000da14:	20904824 	addscs	r4, r0, r4, lsr #16
	...
2000da28:	d0e8743a 	rscle	r7, r8, sl, lsr r4
2000da2c:	0e8743a1 	cdpeq	3, 8, cr4, cr7, cr1, {5}
2000da30:	e8743a1d 	ldmda	r4!, {r0, r2, r3, r4, r9, fp, ip, sp}^
2000da34:	8743a1d0 			; <UNDEFINED> instruction: 0x8743a1d0
2000da38:	20904824 	addscs	r4, r0, r4, lsr #16
2000da3c:	09048241 	stmdbeq	r4, {r0, r6, r9, pc}
2000da40:	90482412 	subls	r2, r8, r2, lsl r4
2000da44:	04824120 	streq	r4, [r2], #288	; 0x120

2000da48 <firstTime.4040>:
2000da48:	00000001 	andeq	r0, r0, r1

2000da4c <indoors2_black_bits>:
2000da4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da58:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da94:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000daa0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000daa4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000daa8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000daac:	ffffeeef 			; <UNDEFINED> instruction: 0xffffeeef
2000dab0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dab4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dab8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dabc:	ffffec6f 			; <UNDEFINED> instruction: 0xffffec6f
2000dac0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dac4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dac8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dacc:	ffffeaaf 			; <UNDEFINED> instruction: 0xffffeaaf
2000dad0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dad4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dad8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dadc:	fffff29f 			; <UNDEFINED> instruction: 0xfffff29f
2000dae0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dae4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dae8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000daec:	ffffec6f 			; <UNDEFINED> instruction: 0xffffec6f
2000daf0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000daf4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000daf8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dafc:	ffffe00f 			; <UNDEFINED> instruction: 0xffffe00f
2000db00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db04:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db08:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db0c:	ffffe7cf 			; <UNDEFINED> instruction: 0xffffe7cf
2000db10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db24:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db58:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db94:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db9c:	f7fbffff 			; <UNDEFINED> instruction: 0xf7fbffff
2000dba0:	7fbfdfef 	svcvc	0x00bfdfef
2000dba4:	fbfdfeff 	blx	1ff8d7aa <startup-0x72856>
2000dba8:	ffff7fff 			; <UNDEFINED> instruction: 0xffff7fff
2000dbac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dbb0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dbb4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dbb8:	feffdfef 	cdp2	15, 15, cr13, cr15, cr15, {7}
2000dbbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dbc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dbc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dbc8:	feffdfef 	cdp2	15, 15, cr13, cr15, cr15, {7}
2000dbcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dbd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dbd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dbd8:	feffdfef 	cdp2	15, 15, cr13, cr15, cr15, {7}
2000dbdc:	00000fff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
2000dbe8:	fe0050e8 	cdp2	0, 0, cr5, cr0, cr8, {7}
2000dbec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dbf0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dbf4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dbf8:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
2000dbfc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc04:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc08:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
2000dc0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc18:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
2000dc1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc24:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc28:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
2000dc2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc38:	ffff50ef 			; <UNDEFINED> instruction: 0xffff50ef
2000dc3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc48:	ec0d5fef 	stc	15, cr5, [sp], {239}	; 0xef
2000dc4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc58:	f003502f 			; <UNDEFINED> instruction: 0xf003502f
2000dc5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc68:	d3fb502f 	mvnsle	r5, #47	; 0x2f
2000dc6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc78:	d00b5fef 	andle	r5, fp, pc, ror #31
2000dc7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc88:	d00b50ef 	andle	r5, fp, pc, ror #1
2000dc8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc94:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc98:	d00b5fef 	andle	r5, fp, pc, ror #31
2000dc9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dca0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dca4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dca8:	d00b502f 	andle	r5, fp, pc, lsr #32
2000dcac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dcb0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dcb4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dcb8:	d00b502f 	andle	r5, fp, pc, lsr #32
2000dcbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dcc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dcc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dcc8:	d00b5fef 	andle	r5, fp, pc, ror #31
2000dccc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dcd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dcd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dcd8:	d00b50ef 	andle	r5, fp, pc, ror #1
2000dcdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dce0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dce4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dce8:	d00b5eef 	andle	r5, fp, pc, ror #29
2000dcec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dcf0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dcf4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dcf8:	d00b502f 	andle	r5, fp, pc, lsr #32
2000dcfc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd04:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd08:	d00b502f 	andle	r5, fp, pc, lsr #32
2000dd0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd18:	d0035fef 	andle	r5, r3, pc, ror #31
2000dd1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd24:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd28:	cffd50ef 	svcgt	0x00fd50ef
2000dd2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd38:	e03f5fef 	eors	r5, pc, pc, ror #31
2000dd3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd48:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
2000dd4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd58:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
2000dd5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd68:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
2000dd6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd78:	ffff50ef 			; <UNDEFINED> instruction: 0xffff50ef
2000dd7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd88:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
2000dd8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd94:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd98:	ffff7e6f 			; <UNDEFINED> instruction: 0xffff7e6f
2000dd9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dda0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dda4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dda8:	ffff7e6f 			; <UNDEFINED> instruction: 0xffff7e6f
2000ddac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000ddb0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000ddb4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000ddb8:	ffff7e7f 			; <UNDEFINED> instruction: 0xffff7e7f
2000ddbc:	f7fbfdfe 			; <UNDEFINED> instruction: 0xf7fbfdfe
2000ddc0:	7fbfdfef 	svcvc	0x00bfdfef
2000ddc4:	fbfdfeff 	blx	1ff8d9ca <startup-0x72636>
2000ddc8:	bfbfeff7 	svclt	0x00bfeff7
2000ddcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000ddd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000ddd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000ddd8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dddc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dde0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dde4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dde8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000ddec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000ddf0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000ddf4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000ddf8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000ddfc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de04:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de08:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de24:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

2000de4c <indoors2_gray_bits>:
	...
2000deac:	00001110 	andeq	r1, r0, r0, lsl r1
	...
2000debc:	00001090 	muleq	r0, r0, r0
	...
2000deec:	00000390 	muleq	r0, r0, r3
	...
2000defc:	00001340 	andeq	r1, r0, r0, asr #6
	...
2000df0c:	00000830 	andeq	r0, r0, r0, lsr r8
	...
2000df9c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
2000dfa0:	80402010 	subhi	r2, r0, r0, lsl r0
2000dfa4:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
2000dfa8:	00008000 	andeq	r8, r0, r0
	...
2000dfb8:	01000000 	mrseq	r0, (UNDEF: 0)
	...
2000dfc8:	01000000 	mrseq	r0, (UNDEF: 0)
	...
2000dfd8:	01000000 	mrseq	r0, (UNDEF: 0)
2000dfdc:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
2000dfe0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dfe4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dfe8:	01ff8007 	mvnseq	r8, r7
	...
2000dff8:	00008000 	andeq	r8, r0, r0
	...
2000e008:	00008180 	andeq	r8, r0, r0, lsl #3
	...
2000e018:	00008180 	andeq	r8, r0, r0, lsl #3
	...
2000e028:	00008000 	andeq	r8, r0, r0
	...
2000e038:	00008000 	andeq	r8, r0, r0
	...
2000e048:	00008000 	andeq	r8, r0, r0
	...
2000e058:	00008180 	andeq	r8, r0, r0, lsl #3
	...
2000e068:	20008180 	andcs	r8, r0, r0, lsl #3
	...
2000e078:	20808000 	addcs	r8, r0, r0
	...
2000e088:	20c08100 	sbccs	r8, r0, r0, lsl #2
	...
2000e098:	21e08000 	mvncs	r8, r0
	...
2000e0a8:	2bf08180 	blcs	1fc2e6b0 <startup-0x3d1950>
	...
2000e0b8:	25c08180 	strbcs	r8, [r0, #384]	; 0x180
	...
2000e0c8:	29e08000 	stmibcs	r0!, {pc}^
	...
2000e0d8:	2bc08100 	blcs	1f02e4e0 <startup-0xfd1b20>
	...
2000e0e8:	20c08110 	sbccs	r8, r0, r0, lsl r1
	...
2000e0f8:	28e0a190 	stmiacs	r0!, {r4, r7, r8, sp, pc}^
	...
2000e108:	2bf08180 	blcs	1fc2e710 <startup-0x3d18f0>
	...
2000e118:	28008000 	stmdacs	r0, {pc}
	...
2000e128:	3000a010 	andcc	sl, r0, r0, lsl r0
	...
2000e138:	1fc0a000 	svcne	0x00c0a000
	...
2000e148:	0000a180 	andeq	sl, r0, r0, lsl #3
	...
2000e158:	00008190 	muleq	r0, r0, r1
	...
2000e168:	00008010 	andeq	r8, r0, r0, lsl r0
	...
2000e178:	00008110 	andeq	r8, r0, r0, lsl r1
	...
2000e188:	0000a010 	andeq	sl, r0, r0, lsl r0
	...
2000e198:	00008190 	muleq	r0, r0, r1
	...
2000e1a8:	00008190 	muleq	r0, r0, r1
	...
2000e1b8:	00008180 	andeq	r8, r0, r0, lsl #3
2000e1bc:	08040201 	stmdaeq	r4, {r0, r9}
2000e1c0:	80402010 	subhi	r2, r0, r0, lsl r0
2000e1c4:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
2000e1c8:	40401008 	submi	r1, r0, r8
	...

2000e24c <indoors2_light_bits>:
	...
2000e2bc:	00000300 	andeq	r0, r0, r0, lsl #6
	...
2000e2cc:	00001110 	andeq	r1, r0, r0, lsl r1
	...
2000e2dc:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000e2ec:	00001000 	andeq	r1, r0, r0
	...
2000e2fc:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
	...
2000e30c:	00001000 	andeq	r1, r0, r0
	...
2000e3b8:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e3c8:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e3d8:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e3e8:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
2000e3f8:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e408:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e418:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e428:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e438:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
2000e448:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e458:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e468:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e478:	03702010 	cmneq	r0, #16
	...
2000e488:	03302e10 	teqeq	r0, #16, 28	; 0x100
	...
2000e498:	02102010 	andseq	r2, r0, #16
	...
2000e4a8:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e4b8:	02302010 	eorseq	r2, r0, #16
	...
2000e4c8:	02102010 	andseq	r2, r0, #16
	...
2000e4d8:	00302e10 	eorseq	r2, r0, r0, lsl lr
	...
2000e4e8:	03302000 	teqeq	r0, #0
	...
2000e4f8:	03100000 	tsteq	r0, #0
	...
2000e508:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e518:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e528:	00000f00 	andeq	r0, r0, r0, lsl #30
	...
2000e538:	00000010 	andeq	r0, r0, r0, lsl r0
	...
2000e548:	00000010 	andeq	r0, r0, r0, lsl r0
	...
2000e558:	00002000 	andeq	r2, r0, r0
	...
2000e568:	00002000 	andeq	r2, r0, r0
	...
2000e578:	00002e00 	andeq	r2, r0, r0, lsl #28
	...

2000e64c <firstTime.4040>:
2000e64c:	00000001 	andeq	r0, r0, r1

2000e650 <trophy_black_bits>:
2000e650:	00d40028 	sbcseq	r0, r4, r8, lsr #32
2000e654:	03fe01aa 	mvnseq	r0, #-2147483606	; 0x8000002a
2000e658:	02220401 	eoreq	r0, r2, #16777216	; 0x1000000
2000e65c:	02220232 	eoreq	r0, r2, #536870915	; 0x20000003
2000e660:	00880124 	addeq	r0, r8, r4, lsr #2
2000e664:	00500088 	subseq	r0, r0, r8, lsl #1
2000e668:	00880088 	addeq	r0, r8, r8, lsl #1
2000e66c:	020201fc 	andeq	r0, r2, #252, 2	; 0x3f
2000e670:	00000202 	andeq	r0, r0, r2, lsl #4

2000e674 <trophy_gray_bits>:
	...
2000e67c:	01000300 	mrseq	r0, LR_irq
2000e680:	01000100 	mrseq	r0, (UNDEF: 16)
2000e684:	00000080 	andeq	r0, r0, r0, lsl #1
2000e688:	00000000 	andeq	r0, r0, r0
2000e68c:	00400040 	subeq	r0, r0, r0, asr #32
2000e690:	01f00000 	mvnseq	r0, r0
2000e694:	000001e8 	andeq	r0, r0, r8, ror #3

2000e698 <trophy_light_bits>:
2000e698:	00000000 	andeq	r0, r0, r0
2000e69c:	00000050 	andeq	r0, r0, r0, asr r0
2000e6a0:	008800ec 	addeq	r0, r8, ip, ror #1
2000e6a4:	008800c0 	addeq	r0, r8, r0, asr #1
2000e6a8:	00600048 	rsbeq	r0, r0, r8, asr #32
2000e6ac:	00200060 	eoreq	r0, r0, r0, rrx
2000e6b0:	00200020 	eoreq	r0, r0, r0, lsr #32
2000e6b4:	000c0000 	andeq	r0, ip, r0
2000e6b8:	00000014 	andeq	r0, r0, r4, lsl r0

2000e6bc <firstTime.4040>:
2000e6bc:	00000001 	andeq	r0, r0, r1
2000e6c0:	00202020 	eoreq	r2, r0, r0, lsr #32
2000e6c4:	41524b2a 	cmpmi	r2, sl, lsr #22
2000e6c8:	2a202a21 	bcs	20818f54 <firstTime.4040+0x80a898>
2000e6cc:	2141524b 	cmpcs	r1, fp, asr #4
2000e6d0:	0000002a 	andeq	r0, r0, sl, lsr #32
2000e6d4:	734c4944 	movtvc	r4, #51524	; 0xc944
2000e6d8:	7469772d 	strbtvc	r7, [r9], #-1837	; 0xfffff8d3
2000e6dc:	73656863 	cmnvc	r5, #6488064	; 0x630000
2000e6e0:	76616820 	strbtvc	r6, [r1], -r0, lsr #16
2000e6e4:	00000065 	andeq	r0, r0, r5, rrx
2000e6e8:	20726f46 	rsbscs	r6, r2, r6, asr #30
2000e6ec:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
2000e6f0:	65697275 	strbvs	r7, [r9, #-629]!	; 0xfffffd8b
2000e6f4:	68742073 	ldmdavs	r4!, {r0, r1, r4, r5, r6, sp}^
2000e6f8:	00000065 	andeq	r0, r0, r5, rrx
2000e6fc:	20202020 	eorcs	r2, r0, r0, lsr #32
2000e700:	00000000 	andeq	r0, r0, r0
2000e704:	6c696f63 	stclvs	15, cr6, [r9], #-396	; 0xfffffe74
2000e708:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
2000e70c:	6566206e 	strbvs	r2, [r6, #-110]!	; 0xffffff92
2000e710:	002c7261 	eoreq	r7, ip, r1, ror #4
2000e714:	74616874 	strbtvc	r6, [r1], #-2164	; 0xfffff78c
2000e718:	44206120 	strtmi	r6, [r0], #-288	; 0xfffffee0
2000e71c:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
2000e720:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
2000e724:	00000068 	andeq	r0, r0, r8, rrx
2000e728:	6e656877 	mcrvs	8, 3, r6, cr5, cr7, {3}
2000e72c:	72657665 	rsbvc	r7, r5, #105906176	; 0x6500000
2000e730:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
2000e734:	65682079 	strbvs	r2, [r8, #-121]!	; 0xffffff87
2000e738:	00007261 	andeq	r7, r0, r1, ror #4
2000e73c:	6e207369 	cdpvs	3, 2, cr7, cr0, cr9, {3}
2000e740:	2e726165 	rpwcssz	f6, f2, f5
2000e744:	00000000 	andeq	r0, r0, r0
2000e748:	70727573 	rsbsvc	r7, r2, r3, ror r5
2000e74c:	69736972 	ldmdbvs	r3!, {r1, r4, r5, r6, r8, fp, sp, lr}^
2000e750:	202c676e 	eorcs	r6, ip, lr, ror #14
2000e754:	646e6966 	strbtvs	r6, [lr], #-2406	; 0xfffff69a
2000e758:	00676e69 	rsbeq	r6, r7, r9, ror #28
2000e75c:	69206f53 	stmdbvs	r0!, {r0, r1, r4, r6, r8, r9, sl, fp, sp, lr}
2000e760:	73692074 	cmnvc	r9, #116	; 0x74
2000e764:	69757120 	ldmdbvs	r5!, {r5, r8, ip, sp, lr}^
2000e768:	00006574 	andeq	r6, r0, r4, ror r5
2000e76c:	20756f79 	rsbscs	r6, r5, r9, ror pc
2000e770:	65726568 	ldrbvs	r6, [r2, #-1384]!	; 0xfffffa98
2000e774:	0000002c 	andeq	r0, r0, ip, lsr #32
2000e778:	72696568 	rsbvc	r6, r9, #104, 10	; 0x1a000000
2000e77c:	206f7420 	rsbcs	r7, pc, r0, lsr #8
2000e780:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
2000e784:	61654c20 	cmnvs	r5, r0, lsr #24
2000e788:	00002e72 	andeq	r2, r0, r2, ror lr
2000e78c:	65657571 	strbvs	r7, [r5, #-1393]!	; 0xfffffa8f
2000e790:	6144206e 	cmpvs	r4, lr, rrx
2000e794:	206f6666 	rsbcs	r6, pc, r6, ror #12
2000e798:	4420666f 	strtmi	r6, [r0], #-1647	; 0xfffff991
2000e79c:	2c734c49 	ldclcs	12, cr4, [r3], #-292	; 0xfffffedc
2000e7a0:	00000000 	andeq	r0, r0, r0
2000e7a4:	706d6574 	rsbvc	r6, sp, r4, ror r5
2000e7a8:	2c646574 	cfstr64cs	mvdx6, [r4], #-464	; 0xfffffe30
2000e7ac:	206f7420 	rsbcs	r7, pc, r0, lsr #8
2000e7b0:	746f6f6c 	strbtvc	r6, [pc], #-3948	; 2000e7b8 <firstTime.4040+0xfc>
2000e7b4:	00000000 	andeq	r0, r0, r0
2000e7b8:	20747542 	rsbscs	r7, r4, r2, asr #10
2000e7bc:	6279616d 	rsbsvs	r6, r9, #1073741851	; 0x4000001b
2000e7c0:	6f792065 	svcvs	0x00792065
2000e7c4:	65722775 	ldrbvs	r2, [r2, #-1909]!	; 0xfffff88b
2000e7c8:	00000000 	andeq	r0, r0, r0
2000e7cc:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 2000e63c <indoors2_light_bits+0x3f0>
2000e7d0:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
2000e7d4:	63697220 	cmnvs	r9, #32, 4
2000e7d8:	2c736568 	cfldr64cs	mvdx6, [r3], #-416	; 0xfffffe60
2000e7dc:	00000000 	andeq	r0, r0, r0
2000e7e0:	6b636977 	blvs	218e8dc4 <firstTime.4040+0x18da708>
2000e7e4:	44206465 	strtmi	r6, [r0], #-1125	; 0xfffffb9b
2000e7e8:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
2000e7ec:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
2000e7f0:	2e736568 	cdpcs	5, 7, cr6, cr3, cr8, {3}
2000e7f4:	00000000 	andeq	r0, r0, r0
2000e7f8:	65727573 	ldrbvs	r7, [r2, #-1395]!	; 0xfffffa8d
2000e7fc:	79622064 	stmdbvc	r2!, {r2, r5, r6, sp}^
2000e800:	00000000 	andeq	r0, r0, r0
2000e804:	67206f73 			; <UNDEFINED> instruction: 0x67206f73
2000e808:	70706972 	rsbsvc	r6, r0, r2, ror r9
2000e80c:	20796c69 	rsbscs	r6, r9, r9, ror #24
2000e810:	61657274 	smcvs	22308	; 0x5724
2000e814:	0000002d 	andeq	r0, r0, sp, lsr #32
2000e818:	6572202d 	ldrbvs	r2, [r2, #-45]!	; 0xffffffd3
2000e81c:	20746573 	rsbscs	r6, r4, r3, ror r5
2000e820:	20656874 	rsbcs	r6, r5, r4, ror r8
2000e824:	74697773 	strbtvc	r7, [r9], #-1907	; 0xfffff88d
2000e828:	00216863 	eoreq	r6, r1, r3, ror #16
2000e82c:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xfffff1bb
2000e830:	62202c72 	eorvs	r2, r0, #29184	; 0x7200
2000e834:	65766172 	ldrbvs	r6, [r6, #-370]!	; 0xfffffe8e
2000e838:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
2000e83c:	002c6863 	eoreq	r6, ip, r3, ror #16
2000e840:	69622061 	stmdbvs	r2!, {r0, r5, r6, sp}^
2000e844:	70732074 	rsbsvc	r2, r3, r4, ror r0
2000e848:	656b6f6f 	strbvs	r6, [fp, #-3951]!	; 0xfffff091
2000e84c:	756f2064 	strbvc	r2, [pc, #-100]!	; 2000e7f0 <firstTime.4040+0x134>
2000e850:	2e2e2e74 	mcrcs	14, 1, r2, cr14, cr4, {3}
2000e854:	00000000 	andeq	r0, r0, r0
2000e858:	66666144 	strbtvs	r6, [r6], -r4, asr #2
2000e85c:	49203a6f 	stmdbmi	r0!, {r0, r1, r2, r3, r5, r6, r9, fp, ip, sp}
2000e860:	66206d27 	strtvs	r6, [r0], -r7, lsr #26
2000e864:	696c6565 	stmdbvs	ip!, {r0, r2, r5, r6, r8, sl, sp, lr}^
2000e868:	0020676e 	eoreq	r6, r0, lr, ror #14
2000e86c:	00000000 	andeq	r0, r0, r0
2000e870:	696c632a 	stmdbvs	ip!, {r1, r3, r5, r8, r9, sp, lr}^
2000e874:	002a6b63 	eoreq	r6, sl, r3, ror #22
2000e878:	7069742a 	rsbvc	r7, r9, sl, lsr #8
2000e87c:	00002a70 	andeq	r2, r0, r0, ror sl
2000e880:	7061742a 	rsbvc	r7, r1, sl, lsr #8
2000e884:	00002a70 	andeq	r2, r0, r0, ror sl
2000e888:	67206f74 			; <UNDEFINED> instruction: 0x67206f74
2000e88c:	20626172 	rsbcs	r6, r2, r2, ror r1
2000e890:	20656874 	rsbcs	r6, r5, r4, ror r8
2000e894:	706f7274 	rsbvc	r7, pc, r4, ror r2	; <UNPREDICTABLE>
2000e898:	00217968 	eoreq	r7, r1, r8, ror #18
2000e89c:	66666144 	strbtvs	r6, [r6], -r4, asr #2
2000e8a0:	49203a6f 	stmdbmi	r0!, {r0, r1, r2, r3, r5, r6, r9, fp, ip, sp}
2000e8a4:	65656e20 	strbvs	r6, [r5, #-3616]!	; 0xfffff1e0
2000e8a8:	616d2064 	cmnvs	sp, r4, rrx
2000e8ac:	20636967 	rsbcs	r6, r3, r7, ror #18
2000e8b0:	00000000 	andeq	r0, r0, r0
2000e8b4:	43414c50 	movtmi	r4, #7248	; 0x1c50
2000e8b8:	4c4f4845 	mcrrmi	8, 4, r4, pc, cr5
2000e8bc:	20524544 	subscs	r4, r2, r4, asr #10
2000e8c0:	56205544 	strtpl	r5, [r0], -r4, asr #10
2000e8c4:	004e4e41 	subeq	r4, lr, r1, asr #28
2000e8c8:	42414b2a 	submi	r4, r1, #43008	; 0xa800
2000e8cc:	4f4f4f4f 	svcmi	0x004f4f4f
2000e8d0:	00002a4d 	andeq	r2, r0, sp, asr #20
2000e8d4:	4f77462a 	svcmi	0x0077462a
2000e8d8:	2a6f4f4f 	bcs	21be261c <firstTime.4040+0x1bd3f60>
2000e8dc:	00000000 	andeq	r0, r0, r0
2000e8e0:	20202020 	eorcs	r2, r0, r0, lsr #32
2000e8e4:	794e2020 	stmdbvc	lr, {r5, sp}^
2000e8e8:	48414841 	stmdami	r1, {r0, r6, fp, lr}^
2000e8ec:	48414841 	stmdami	r1, {r0, r6, fp, lr}^
2000e8f0:	00000021 	andeq	r0, r0, r1, lsr #32
2000e8f4:	73504944 	cmpvc	r0, #68, 18	; 0x110000
2000e8f8:	5449572d 	strbpl	r5, [r9], #-1837	; 0xfffff8d3
2000e8fc:	003a4843 	eorseq	r4, sl, r3, asr #16
2000e900:	4f57462a 	svcmi	0x0057462a
2000e904:	2a48534f 	bcs	21223648 <firstTime.4040+0x1214f8c>
2000e908:	00000000 	andeq	r0, r0, r0
2000e90c:	20202020 	eorcs	r2, r0, r0, lsr #32
2000e910:	20202020 	eorcs	r2, r0, r0, lsr #32
2000e914:	73706f4f 	cmnvc	r0, #316	; 0x13c
2000e918:	212e2e2e 			; <UNDEFINED> instruction: 0x212e2e2e
2000e91c:	00000000 	andeq	r0, r0, r0
2000e920:	46464144 	strbmi	r4, [r6], -r4, asr #2
2000e924:	20203a4f 	eorcs	r3, r0, pc, asr #20
2000e928:	00000000 	andeq	r0, r0, r0
2000e92c:	20202020 	eorcs	r2, r0, r0, lsr #32
2000e930:	41202020 			; <UNDEFINED> instruction: 0x41202020
2000e934:	47484752 	smlsldmi	r4, r8, r2, r7
2000e938:	48524848 	ldmdami	r2, {r3, r6, fp, lr}^
2000e93c:	00000021 	andeq	r0, r0, r1, lsr #32
2000e940:	00000000 	andeq	r0, r0, r0
2000e944:	5548542a 	strbpl	r5, [r8, #-1066]	; 0xfffffbd6
2000e948:	002a504d 	eoreq	r5, sl, sp, asr #32
2000e94c:	200035bc 			; <UNDEFINED> instruction: 0x200035bc
2000e950:	200035c6 	andcs	r3, r0, r6, asr #11
2000e954:	200035d0 	ldrdcs	r3, [r0], -r0
2000e958:	200035da 	ldrdcs	r3, [r0], -sl
2000e95c:	200035e4 	andcs	r3, r0, r4, ror #11
2000e960:	200035ee 	andcs	r3, r0, lr, ror #11
2000e964:	200035f8 	strdcs	r3, [r0], -r8
2000e968:	20003602 	andcs	r3, r0, r2, lsl #12
2000e96c:	20202020 	eorcs	r2, r0, r0, lsr #32
2000e970:	20202020 	eorcs	r2, r0, r0, lsr #32
2000e974:	20202020 	eorcs	r2, r0, r0, lsr #32
2000e978:	20202020 	eorcs	r2, r0, r0, lsr #32
2000e97c:	20202020 	eorcs	r2, r0, r0, lsr #32
2000e980:	00000000 	andeq	r0, r0, r0
2000e984:	61666c41 	cmnvs	r6, r1, asr #24
2000e988:	656d756e 	strbvs	r7, [sp, #-1390]!	; 0xfffffa92
2000e98c:	6b736972 	blvs	21ce8f5c <firstTime.4040+0x1cda8a0>
2000e990:	00000000 	andeq	r0, r0, r0
2000e994:	64726168 	ldrbtvs	r6, [r2], #-360	; 0xfffffe98
2000e998:	a4c3a5c3 	strbge	sl, [r3], #1475	; 0x5c3
2000e99c:	7261b6c3 	rsbvc	fp, r1, #204472320	; 0xc300000
2000e9a0:	75732065 	ldrbvc	r2, [r3, #-101]!	; 0xffffff9b
2000e9a4:	00726567 	rsbseq	r6, r2, r7, ror #10

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000a9b 	muleq	r0, fp, sl
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      10:	00051b0c 	andeq	r1, r5, ip, lsl #22
	...
      20:	020c0200 	andeq	r0, ip, #0, 4
      24:	00004e05 	andeq	r4, r0, r5, lsl #28
      28:	035b0300 	cmpeq	fp, #0, 6
      2c:	07020000 	streq	r0, [r2, -r0]
      30:	0000004e 	andeq	r0, r0, lr, asr #32
      34:	070e0300 	streq	r0, [lr, -r0, lsl #6]
      38:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      3c:	0000004e 	andeq	r0, r0, lr, asr #32
      40:	190d0304 	stmdbne	sp, {r2, r8, r9}
      44:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
      48:	00000055 	andeq	r0, r0, r5, asr r0
      4c:	04040008 	streq	r0, [r4], #-8
      50:	00038907 	andeq	r8, r3, r7, lsl #18
      54:	5b040500 	blpl	10145c <startup-0x1fefeba4>
      58:	04000000 	streq	r0, [r0], #-0
      5c:	04c80801 	strbeq	r0, [r8], #2049	; 0x801
      60:	5f060000 	svcpl	0x00060000
      64:	0200001a 	andeq	r0, r0, #26
      68:	0000210a 	andeq	r2, r0, sl, lsl #2
      6c:	00340700 	eorseq	r0, r4, r0, lsl #14
      70:	030c0000 	movweq	r0, #49152	; 0xc000
      74:	00009e06 	andeq	r9, r0, r6, lsl #28
      78:	05be0300 	ldreq	r0, [lr, #768]!	; 0x300
      7c:	07030000 	streq	r0, [r3, -r0]
      80:	0000009e 	muleq	r0, lr, r0
      84:	003b0300 	eorseq	r0, fp, r0, lsl #6
      88:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
      8c:	0000009e 	muleq	r0, lr, r0
      90:	00300304 	eorseq	r0, r0, r4, lsl #6
      94:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
      98:	0000009e 	muleq	r0, lr, r0
      9c:	04050008 	streq	r0, [r5], #-8
      a0:	00000062 	andeq	r0, r0, r2, rrx
      a4:	00161d06 	andseq	r1, r6, r6, lsl #26
      a8:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
      ac:	07000000 	streq	r0, [r0, -r0]
      b0:	000006d3 	ldrdeq	r0, [r0], -r3
      b4:	28060424 	stmdacs	r6, {r2, r5, sl}
      b8:	03000001 	movweq	r0, #1
      bc:	00000456 	andeq	r0, r0, r6, asr r4
      c0:	01280704 			; <UNDEFINED> instruction: 0x01280704
      c4:	03000000 	movweq	r0, #0
      c8:	000006df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
      cc:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
      d0:	03040000 	movweq	r0, #16384	; 0x4000
      d4:	0000062f 	andeq	r0, r0, pc, lsr #12
      d8:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
      dc:	03080000 	movweq	r0, #32768	; 0x8000
      e0:	0000065b 	andeq	r0, r0, fp, asr r6
      e4:	01460c04 	cmpeq	r6, r4, lsl #24
      e8:	030c0000 	movweq	r0, #49152	; 0xc000
      ec:	00000342 	andeq	r0, r0, r2, asr #6
      f0:	01460d04 	cmpeq	r6, r4, lsl #26
      f4:	03100000 	tsteq	r0, #0
      f8:	00000468 	andeq	r0, r0, r8, ror #8
      fc:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
     100:	03140000 	tsteq	r4, #0
     104:	00000070 	andeq	r0, r0, r0, ror r0
     108:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
     10c:	03180000 	tsteq	r8, #0
     110:	000003d9 	ldrdeq	r0, [r0], -r9
     114:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
     118:	031c0000 	tsteq	ip, #0
     11c:	000003e9 	andeq	r0, r0, r9, ror #7
     120:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
     124:	00200000 	eoreq	r0, r0, r0
     128:	00a40405 	adceq	r0, r4, r5, lsl #8
     12c:	04080000 	streq	r0, [r8], #-0
     130:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     134:	01400900 	cmpeq	r0, r0, lsl #18
     138:	400a0000 	andmi	r0, sl, r0
     13c:	00000001 	andeq	r0, r0, r1
     140:	00af0405 	adceq	r0, pc, r5, lsl #8
     144:	04050000 	streq	r0, [r5], #-0
     148:	00000135 	andeq	r0, r0, r5, lsr r1
     14c:	0006d406 	andeq	sp, r6, r6, lsl #8
     150:	af150400 	svcge	0x00150400
     154:	0b000000 	bleq	15c <startup-0x1ffffea4>
     158:	00000162 	andeq	r0, r0, r2, ror #2
     15c:	00000162 	andeq	r0, r0, r2, ror #2
     160:	0405000c 	streq	r0, [r5], #-12
     164:	0000014c 	andeq	r0, r0, ip, asr #2
     168:	00054b0d 	andeq	r4, r5, sp, lsl #22
     16c:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
     170:	0d000001 	stceq	0, cr0, [r0, #-4]
     174:	00000424 	andeq	r0, r0, r4, lsr #8
     178:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
     17c:	97060000 	strls	r0, [r6, -r0]
     180:	05000006 	streq	r0, [r0, #-6]
     184:	00005b24 	andeq	r5, r0, r4, lsr #22
     188:	017e0b00 	cmneq	lr, r0, lsl #22
     18c:	019a0000 	orrseq	r0, sl, r0
     190:	9a0e0000 	bls	380198 <startup-0x1fc7fe68>
     194:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     198:	04040003 	streq	r0, [r4], #-3
     19c:	00040607 	andeq	r0, r4, r7, lsl #12
     1a0:	18430d00 	stmdane	r3, {r8, sl, fp}^
     1a4:	2b050000 	blcs	1401ac <startup-0x1febfe54>
     1a8:	00000189 	andeq	r0, r0, r9, lsl #3
     1ac:	0002480d 	andeq	r4, r2, sp, lsl #16
     1b0:	892c0500 	stmdbhi	ip!, {r8, sl}
     1b4:	0d000001 	stceq	0, cr0, [r0, #-4]
     1b8:	000004d6 	ldrdeq	r0, [r0], -r6
     1bc:	01892d05 	orreq	r2, r9, r5, lsl #26
     1c0:	6b0d0000 	blvs	3401c8 <startup-0x1fcbfe38>
     1c4:	05000003 	streq	r0, [r0, #-3]
     1c8:	0001892e 	andeq	r8, r1, lr, lsr #18
     1cc:	02d00d00 	sbcseq	r0, r0, #0, 26
     1d0:	2f050000 	svccs	0x00050000
     1d4:	00000189 	andeq	r0, r0, r9, lsl #3
     1d8:	0006b50d 	andeq	fp, r6, sp, lsl #10
     1dc:	89300500 	ldmdbhi	r0!, {r8, sl}
     1e0:	0d000001 	stceq	0, cr0, [r0, #-4]
     1e4:	000006a5 	andeq	r0, r0, r5, lsr #13
     1e8:	01893105 	orreq	r3, r9, r5, lsl #2
     1ec:	5b0b0000 	blpl	2c01f4 <startup-0x1fd3fe0c>
     1f0:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
     1f4:	0f000001 	svceq	0x00000001
     1f8:	0000019a 	muleq	r0, sl, r1
     1fc:	93100077 	tstls	r0, #119	; 0x77
     200:	06000002 	streq	r0, [r0], -r2
     204:	0001ee03 	andeq	lr, r1, r3, lsl #28
     208:	b4030500 	strlt	r0, [r3], #-1280	; 0xfffffb00
     20c:	11200070 			; <UNDEFINED> instruction: 0x11200070
     210:	000004ed 	andeq	r0, r0, sp, ror #9
     214:	01ee0307 	mvneq	r0, r7, lsl #6
     218:	03050000 	movweq	r0, #20480	; 0x5000
     21c:	2000712c 	andcs	r7, r0, ip, lsr #2
     220:	0005c911 	andeq	ip, r5, r1, lsl r9
     224:	ee030800 	cdp	8, 0, cr0, cr3, cr0, {0}
     228:	05000001 	streq	r0, [r0, #-1]
     22c:	0071a403 	rsbseq	sl, r1, r3, lsl #8
     230:	005b0b20 	subseq	r0, fp, r0, lsr #22
     234:	02420000 	subeq	r0, r2, #0
     238:	9a0e0000 	bls	380240 <startup-0x1fc7fdc0>
     23c:	17000001 	strne	r0, [r0, -r1]
     240:	6c110001 	ldcvs	0, cr0, [r1], {1}
     244:	09000001 	stmdbeq	r0, {r0}
     248:	00023103 	andeq	r3, r2, r3, lsl #2
     24c:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
     250:	11200072 			; <UNDEFINED> instruction: 0x11200072
     254:	00000431 	andeq	r0, r0, r1, lsr r4
     258:	0231030a 	eorseq	r0, r1, #671088640	; 0x28000000
     25c:	03050000 	movweq	r0, #20480	; 0x5000
     260:	20007334 	andcs	r7, r0, r4, lsr r3
     264:	0003be11 	andeq	fp, r3, r1, lsl lr
     268:	31030b00 	tstcc	r3, r0, lsl #22
     26c:	05000002 	streq	r0, [r0, #-2]
     270:	00744c03 	rsbseq	r4, r4, r3, lsl #24
     274:	005b0b20 	subseq	r0, fp, r0, lsr #22
     278:	02860000 	addeq	r0, r6, #0
     27c:	9a0e0000 	bls	380284 <startup-0x1fc7fd7c>
     280:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     284:	00110003 	andseq	r0, r1, r3
     288:	0c000005 	stceq	0, cr0, [r0], {5}
     28c:	00027503 	andeq	r7, r2, r3, lsl #10
     290:	64030500 	strvs	r0, [r3], #-1280	; 0xfffffb00
     294:	11200075 			; <UNDEFINED> instruction: 0x11200075
     298:	00000045 	andeq	r0, r0, r5, asr #32
     29c:	0275030d 	rsbseq	r0, r5, #872415232	; 0x34000000
     2a0:	03050000 	movweq	r0, #20480	; 0x5000
     2a4:	20007964 	andcs	r7, r0, r4, ror #18
     2a8:	00001011 	andeq	r1, r0, r1, lsl r0
     2ac:	75030e00 	strvc	r0, [r3, #-3584]	; 0xfffff200
     2b0:	05000002 	streq	r0, [r0, #-2]
     2b4:	007d6403 	rsbseq	r6, sp, r3, lsl #8
     2b8:	005b0b20 	subseq	r0, fp, r0, lsr #22
     2bc:	02c90000 	sbceq	r0, r9, #0
     2c0:	9a0f0000 	bls	3c02c8 <startup-0x1fc3fd38>
     2c4:	d1000001 	tstle	r0, r1
     2c8:	01be1100 			; <UNDEFINED> instruction: 0x01be1100
     2cc:	030f0000 	movweq	r0, #61440	; 0xf000
     2d0:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
     2d4:	81640305 	cmnhi	r4, r5, lsl #6
     2d8:	0f112000 	svceq	0x00112000
     2dc:	10000004 	andne	r0, r0, r4
     2e0:	0002b903 	andeq	fp, r2, r3, lsl #18
     2e4:	38030500 	stmdacc	r3, {r8, sl}
     2e8:	11200082 	smlawbne	r0, r2, r0, r0
     2ec:	00000220 	andeq	r0, r0, r0, lsr #4
     2f0:	02b90311 	adcseq	r0, r9, #1140850688	; 0x44000000
     2f4:	03050000 	movweq	r0, #20480	; 0x5000
     2f8:	2000830c 	andcs	r8, r0, ip, lsl #6
     2fc:	00068d07 	andeq	r8, r6, r7, lsl #26
     300:	04121400 	ldreq	r1, [r2], #-1024	; 0xfffffc00
     304:	00000345 	andeq	r0, r0, r5, asr #6
     308:	001cd203 	andseq	sp, ip, r3, lsl #4
     30c:	45051200 	strmi	r1, [r5, #-512]	; 0xfffffe00
     310:	00000003 	andeq	r0, r0, r3
     314:	00028603 	andeq	r8, r2, r3, lsl #12
     318:	45061200 	strmi	r1, [r6, #-512]	; 0xfffffe00
     31c:	04000003 	streq	r0, [r0], #-3
     320:	0003f303 	andeq	pc, r3, r3, lsl #6
     324:	2e081200 	cdpcs	2, 0, cr1, cr8, cr0, {0}
     328:	08000001 	stmdaeq	r0, {r0}
     32c:	0003e303 	andeq	lr, r3, r3, lsl #6
     330:	2e091200 	cdpcs	2, 0, cr1, cr9, cr0, {0}
     334:	0c000001 	stceq	0, cr0, [r0], {1}
     338:	00028b03 	andeq	r8, r2, r3, lsl #22
     33c:	680c1200 	stmdavs	ip, {r9, ip}
     340:	10000003 	andne	r0, r0, r3
     344:	4b040500 	blmi	10174c <startup-0x1fefe8b4>
     348:	04000003 	streq	r0, [r0], #-3
     34c:	04d10801 	ldrbeq	r0, [r1], #2049	; 0x801
     350:	62090000 	andvs	r0, r9, #0
     354:	0a000003 	beq	368 <startup-0x1ffffc98>
     358:	00000362 	andeq	r0, r0, r2, ror #6
     35c:	00012e0a 	andeq	r2, r1, sl, lsl #28
     360:	04050000 	streq	r0, [r5], #-0
     364:	000002fc 	strdeq	r0, [r0], -ip
     368:	03520405 	cmpeq	r2, #83886080	; 0x5000000
     36c:	8e060000 	cdphi	0, 0, cr0, cr6, cr0, {0}
     370:	12000006 	andne	r0, r0, #6
     374:	0002fc0d 	andeq	pc, r2, sp, lsl #24
     378:	05b61100 	ldreq	r1, [r6, #256]!	; 0x100
     37c:	03130000 	tsteq	r3, #0
     380:	00000275 	andeq	r0, r0, r5, ror r2
     384:	83e00305 	mvnhi	r0, #335544320	; 0x14000000
     388:	02042000 	andeq	r2, r4, #0
     38c:	00038307 	andeq	r8, r3, r7, lsl #6
     390:	05f91000 	ldrbeq	r1, [r9, #0]!
     394:	22010000 	andcs	r0, r1, #0
     398:	0000012e 	andeq	r0, r0, lr, lsr #2
     39c:	48bc0305 	ldmmi	ip!, {r0, r2, r8, r9}
     3a0:	37102000 	ldrcc	r2, [r0, -r0]
     3a4:	01000001 	tsteq	r0, r1
     3a8:	00009e3a 	andeq	r9, r0, sl, lsr lr
     3ac:	04030500 	streq	r0, [r3], #-1280	; 0xfffffb00
     3b0:	10200048 	eorne	r0, r0, r8, asr #32
     3b4:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
     3b8:	009e3b01 	addseq	r3, lr, r1, lsl #22
     3bc:	03050000 	movweq	r0, #20480	; 0x5000
     3c0:	200048b0 			; <UNDEFINED> instruction: 0x200048b0
     3c4:	00056210 	andeq	r6, r5, r0, lsl r2
     3c8:	9e3c0100 	rsflse	f0, f4, f0
     3cc:	05000000 	streq	r0, [r0, #-0]
     3d0:	0048c403 	subeq	ip, r8, r3, lsl #8
     3d4:	67621220 	strbvs	r1, [r2, -r0, lsr #4]!
     3d8:	9e3d0100 	rsflse	f0, f5, f0
     3dc:	05000000 	streq	r0, [r0, #-0]
     3e0:	00484c03 	subeq	r4, r8, r3, lsl #24
     3e4:	06e41020 	strbteq	r1, [r4], r0, lsr #32
     3e8:	40010000 	andmi	r0, r1, r0
     3ec:	0000009e 	muleq	r0, lr, r0
     3f0:	482c0305 	stmdami	ip!, {r0, r2, r8, r9}
     3f4:	57102000 	ldrpl	r2, [r0, -r0]
     3f8:	01000005 	tsteq	r0, r5
     3fc:	00009e41 	andeq	r9, r0, r1, asr #28
     400:	b8030500 	stmdalt	r3, {r8, sl}
     404:	10200048 	eorne	r0, r0, r8, asr #32
     408:	00000079 	andeq	r0, r0, r9, ror r0
     40c:	009e4201 	addseq	r4, lr, r1, lsl #4
     410:	03050000 	movweq	r0, #20480	; 0x5000
     414:	20004868 	andcs	r4, r0, r8, ror #16
     418:	0003b310 	andeq	fp, r3, r0, lsl r3
     41c:	9e430100 	dvflss	f0, f3, f0
     420:	05000000 	streq	r0, [r0, #-0]
     424:	0048d403 	subeq	sp, r8, r3, lsl #8
     428:	056e1020 	strbeq	r1, [lr, #-32]!	; 0xffffffe0
     42c:	44010000 	strmi	r0, [r1], #-0
     430:	0000009e 	muleq	r0, lr, r0
     434:	48a00305 	stmiami	r0!, {r0, r2, r8, r9}
     438:	76102000 	ldrvc	r2, [r0], -r0
     43c:	01000004 	tsteq	r0, r4
     440:	00009e45 	andeq	r9, r0, r5, asr #28
     444:	b4030500 	strlt	r0, [r3], #-1280	; 0xfffffb00
     448:	10200048 	eorne	r0, r0, r8, asr #32
     44c:	00000617 	andeq	r0, r0, r7, lsl r6
     450:	009e4601 	addseq	r4, lr, r1, lsl #12
     454:	03050000 	movweq	r0, #20480	; 0x5000
     458:	200048c0 	andcs	r4, r0, r0, asr #17
     45c:	0001e510 	andeq	lr, r1, r0, lsl r5
     460:	9e470100 	dvflss	f0, f7, f0
     464:	05000000 	streq	r0, [r0, #-0]
     468:	00488403 	subeq	r8, r8, r3, lsl #8
     46c:	071a1020 	ldreq	r1, [sl, -r0, lsr #32]
     470:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
     474:	0000009e 	muleq	r0, lr, r0
     478:	483c0305 	ldmdami	ip!, {r0, r2, r8, r9}
     47c:	a7102000 	ldrge	r2, [r0, -r0]
     480:	01000003 	tsteq	r0, r3
     484:	0000624a 	andeq	r6, r0, sl, asr #4
     488:	30030500 	andcc	r0, r3, r0, lsl #10
     48c:	10200048 	eorne	r0, r0, r8, asr #32
     490:	00000231 	andeq	r0, r0, r1, lsr r2
     494:	00624b01 	rsbeq	r4, r2, r1, lsl #22
     498:	03050000 	movweq	r0, #20480	; 0x5000
     49c:	20004888 	andcs	r4, r0, r8, lsl #17
     4a0:	0001cf10 	andeq	ip, r1, r0, lsl pc
     4a4:	624c0100 	subvs	r0, ip, #0, 2
     4a8:	05000000 	streq	r0, [r0, #-0]
     4ac:	00485003 	subeq	r5, r8, r3
     4b0:	020d1020 	andeq	r1, sp, #32
     4b4:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
     4b8:	00000062 	andeq	r0, r0, r2, rrx
     4bc:	48c80305 	stmiami	r8, {r0, r2, r8, r9}^
     4c0:	8f102000 	svchi	0x00102000
     4c4:	01000000 	mrseq	r0, (UNDEF: 0)
     4c8:	00006250 	andeq	r6, r0, r0, asr r2
     4cc:	08030500 	stmdaeq	r3, {r8, sl}
     4d0:	10200048 	eorne	r0, r0, r8, asr #32
     4d4:	000004aa 	andeq	r0, r0, sl, lsr #9
     4d8:	00625101 	rsbeq	r5, r2, r1, lsl #2
     4dc:	03050000 	movweq	r0, #20480	; 0x5000
     4e0:	200048a4 	andcs	r4, r0, r4, lsr #17
     4e4:	00033210 	andeq	r3, r3, r0, lsl r2
     4e8:	62520100 	subsvs	r0, r2, #0, 2
     4ec:	05000000 	streq	r0, [r0, #-0]
     4f0:	00487803 	subeq	r7, r8, r3, lsl #16
     4f4:	04b91020 	ldrteq	r1, [r9], #32
     4f8:	53010000 	movwpl	r0, #4096	; 0x1000
     4fc:	00000062 	andeq	r0, r0, r2, rrx
     500:	48400305 	stmdami	r0, {r0, r2, r8, r9}^
     504:	7f102000 	svcvc	0x00102000
     508:	01000006 	tsteq	r0, r6
     50c:	00006254 	andeq	r6, r0, r4, asr r2
     510:	20030500 	andcs	r0, r3, r0, lsl #10
     514:	10200048 	eorne	r0, r0, r8, asr #32
     518:	0000064c 	andeq	r0, r0, ip, asr #12
     51c:	00625501 	rsbeq	r5, r2, r1, lsl #10
     520:	03050000 	movweq	r0, #20480	; 0x5000
     524:	2000485c 	andcs	r4, r0, ip, asr r8
     528:	0005a710 	andeq	sl, r5, r0, lsl r7
     52c:	62560100 	subsvs	r0, r6, #0, 2
     530:	05000000 	streq	r0, [r0, #-0]
     534:	00489403 	subeq	r9, r8, r3, lsl #8
     538:	04811020 	streq	r1, [r1], #32
     53c:	57010000 	strpl	r0, [r1, -r0]
     540:	00000062 	andeq	r0, r0, r2, rrx
     544:	48140305 	ldmdami	r4, {r0, r2, r8, r9}
     548:	c4102000 	ldrgt	r2, [r0], #-0
     54c:	01000006 	tsteq	r0, r6
     550:	00006258 	andeq	r6, r0, r8, asr r2
     554:	6c030500 	cfstr32vs	mvfx0, [r3], {-0}
     558:	10200048 	eorne	r0, r0, r8, asr #32
     55c:	000003f3 	strdeq	r0, [r0], -r3
     560:	012e8e01 			; <UNDEFINED> instruction: 0x012e8e01
     564:	03050000 	movweq	r0, #20480	; 0x5000
     568:	200047b8 			; <UNDEFINED> instruction: 0x200047b8
     56c:	00058310 	andeq	r8, r5, r0, lsl r3
     570:	2e8f0100 	rmfcse	f0, f7, f0
     574:	05000001 	streq	r0, [r0, #-1]
     578:	0087e003 	addeq	lr, r7, r3
     57c:	62611320 	rsbvs	r1, r1, #32, 6	; 0x80000000
     580:	5d010073 	stcpl	0, cr0, [r1, #-460]	; 0xfffffe34
     584:	00012e02 	andeq	r2, r1, r2, lsl #28
     588:	00186c00 	andseq	r6, r8, r0, lsl #24
     58c:	00001e20 	andeq	r1, r0, r0, lsr #28
     590:	a79c0100 	ldrge	r0, [ip, r0, lsl #2]
     594:	14000005 	strne	r0, [r0], #-5
     598:	0000063f 	andeq	r0, r0, pc, lsr r6
     59c:	2e025d01 	cdpcs	13, 0, cr5, cr2, cr1, {0}
     5a0:	02000001 	andeq	r0, r0, #1
     5a4:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
     5a8:	00000715 	andeq	r0, r0, r5, lsl r7
     5ac:	01fc9001 	mvnseq	r9, r1
     5b0:	16702000 	ldrbtne	r2, [r0], -r0
     5b4:	9c010000 	stcls	0, cr0, [r1], {-0}
     5b8:	000009ba 			; <UNDEFINED> instruction: 0x000009ba
     5bc:	0003fb11 	andeq	pc, r3, r1, lsl fp	; <UNPREDICTABLE>
     5c0:	4c960100 	ldfmis	f0, [r6], {0}
     5c4:	03000001 	movweq	r0, #1
     5c8:	117fac91 			; <UNDEFINED> instruction: 0x117fac91
     5cc:	00000622 	andeq	r0, r0, r2, lsr #12
     5d0:	00a49701 	adceq	r9, r4, r1, lsl #14
     5d4:	91030000 	mrsls	r0, (UNDEF: 3)
     5d8:	25117fa0 	ldrcs	r7, [r1, #-4000]	; 0xfffff060
     5dc:	01000007 	tsteq	r0, r7
     5e0:	0009ba98 	muleq	r9, r8, sl
     5e4:	94910300 	ldrls	r0, [r1], #768	; 0x300
     5e8:	0512117f 	ldreq	r1, [r2, #-383]	; 0xfffffe81
     5ec:	a0010000 	andge	r0, r1, r0
     5f0:	0000014c 	andeq	r0, r0, ip, asr #2
     5f4:	7ef09103 	nrmvcs	f1, f3
     5f8:	00019811 	andeq	r9, r1, r1, lsl r8
     5fc:	a4a10100 	strtge	r0, [r1], #256	; 0x100
     600:	03000000 	movweq	r0, #0
     604:	117ee491 			; <UNDEFINED> instruction: 0x117ee491
     608:	000005ed 	andeq	r0, r0, sp, ror #11
     60c:	09baa201 	ldmibeq	sl!, {r0, r9, sp, pc}
     610:	91030000 	mrsls	r0, (UNDEF: 3)
     614:	b9117ed8 	ldmdblt	r1, {r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
     618:	01000002 	tsteq	r0, r2
     61c:	00014ca9 	andeq	r4, r1, r9, lsr #25
     620:	b4910300 	ldrlt	r0, [r1], #768	; 0x300
     624:	044b117e 	strbeq	r1, [fp], #-382	; 0xfffffe82
     628:	aa010000 	bge	40630 <startup-0x1ffbf9d0>
     62c:	000000a4 	andeq	r0, r0, r4, lsr #1
     630:	7ea89103 	tanvce	f1, f3
     634:	00066911 	andeq	r6, r6, r1, lsl r9
     638:	baab0100 	blt	feac0a40 <firstTime.4040+0xdeab2384>
     63c:	03000009 	movweq	r0, #9
     640:	117e9c91 			; <UNDEFINED> instruction: 0x117e9c91
     644:	00000154 	andeq	r0, r0, r4, asr r1
     648:	014cb201 	cmpeq	ip, r1, lsl #4
     64c:	91030000 	mrsls	r0, (UNDEF: 3)
     650:	db117df8 	blle	45fe38 <startup-0x1fba01c8>
     654:	01000005 	tsteq	r0, r5
     658:	0000a4b3 			; <UNDEFINED> instruction: 0x0000a4b3
     65c:	ec910300 	ldc	3, cr0, [r1], {0}
     660:	018b117d 	orreq	r1, fp, sp, ror r1
     664:	b4010000 	strlt	r0, [r1], #-0
     668:	000009ba 			; <UNDEFINED> instruction: 0x000009ba
     66c:	7de09103 	stfvcp	f1, [r0, #12]!
     670:	00018311 	andeq	r8, r1, r1, lsl r3
     674:	4cbb0100 	ldfmis	f0, [fp]
     678:	03000001 	movweq	r0, #1
     67c:	117dbc91 			; <UNDEFINED> instruction: 0x117dbc91
     680:	00001ea1 	andeq	r1, r0, r1, lsr #29
     684:	014cc001 	cmpeq	ip, r1
     688:	91030000 	mrsls	r0, (UNDEF: 3)
     68c:	19117d98 	ldmdbne	r1, {r3, r4, r7, r8, sl, fp, ip, sp, lr}
     690:	01000003 	tsteq	r0, r3
     694:	00014cc5 	andeq	r4, r1, r5, asr #25
     698:	f4910300 			; <UNDEFINED> instruction: 0xf4910300
     69c:	02ed167c 	rsceq	r1, sp, #124, 12	; 0x7c00000
     6a0:	c6010000 	strgt	r0, [r1], -r0
     6a4:	0000012e 	andeq	r0, r0, lr, lsr #2
     6a8:	000006ae 	andeq	r0, r0, lr, lsr #13
     6ac:	1f110017 	svcne	0x00110017
     6b0:	01000004 	tsteq	r0, r4
     6b4:	00014cc9 	andeq	r4, r1, r9, asr #25
     6b8:	d0910300 	addsle	r0, r1, r0, lsl #6
     6bc:	03ce167c 	biceq	r1, lr, #124, 12	; 0x7c00000
     6c0:	ca010000 	bgt	406c8 <startup-0x1ffbf938>
     6c4:	0000012e 	andeq	r0, r0, lr, lsr #2
     6c8:	000006ce 	andeq	r0, r0, lr, asr #13
     6cc:	0f110017 	svceq	0x00110017
     6d0:	0100000d 	tsteq	r0, sp
     6d4:	00014ccf 	andeq	r4, r1, pc, asr #25
     6d8:	ac910300 	ldcge	3, cr0, [r1], {0}
     6dc:	0366117c 	cmneq	r6, #124, 2
     6e0:	d5010000 	strle	r0, [r1, #-0]
     6e4:	0000014c 	andeq	r0, r0, ip, asr #2
     6e8:	7c889103 	stfvcd	f1, [r8], {3}
     6ec:	00036116 	andeq	r6, r3, r6, lsl r1
     6f0:	2ed60100 	cdpcs	1, 13, cr0, cr6, cr0, {0}
     6f4:	fd000001 	stc2	0, cr0, [r0, #-4]
     6f8:	17000006 	strne	r0, [r0, -r6]
     6fc:	49441800 	stmdbmi	r4, {fp, ip}^
     700:	d9010050 	stmdble	r1, {r4, r6}
     704:	0000014c 	andeq	r0, r0, ip, asr #2
     708:	7be49103 	blvc	ff924b1c <firstTime.4040+0xdf916460>
     70c:	00005611 	andeq	r5, r0, r1, lsl r6
     710:	4cdd0100 	ldfmie	f0, [sp], {0}
     714:	03000001 	movweq	r0, #1
     718:	117bc091 			; <UNDEFINED> instruction: 0x117bc091
     71c:	00000605 	andeq	r0, r0, r5, lsl #12
     720:	014ce301 	cmpeq	ip, r1, lsl #6
     724:	91030000 	mrsls	r0, (UNDEF: 3)
     728:	0b117b9c 	bleq	45f5a0 <startup-0x1fba0a60>
     72c:	01000006 	tsteq	r0, r6
     730:	00014ce5 	andeq	r4, r1, r5, ror #25
     734:	f8910300 			; <UNDEFINED> instruction: 0xf8910300
     738:	0611117a 			; <UNDEFINED> instruction: 0x0611117a
     73c:	e7010000 	str	r0, [r1, -r0]
     740:	0000014c 	andeq	r0, r0, ip, asr #2
     744:	7ad49103 	bvc	ff524b58 <firstTime.4040+0xdf51649c>
     748:	0001fb11 	andeq	pc, r1, r1, lsl fp	; <UNPREDICTABLE>
     74c:	4ce90100 	stfmie	f0, [r9]
     750:	03000001 	movweq	r0, #1
     754:	117ab091 			; <UNDEFINED> instruction: 0x117ab091
     758:	0000017d 	andeq	r0, r0, sp, ror r1
     75c:	014cec01 	cmpeq	ip, r1, lsl #24
     760:	91030000 	mrsls	r0, (UNDEF: 3)
     764:	c2117a8c 	andsgt	r7, r1, #140, 20	; 0x8c000
     768:	01000002 	tsteq	r0, r2
     76c:	00014cf1 	strdeq	r4, [r1], -r1
     770:	e8910300 	ldm	r1, {r8, r9}
     774:	00221179 	eoreq	r1, r2, r9, ror r1
     778:	f4010000 	vst4.8	{d0-d3}, [r1], r0
     77c:	0000014c 	andeq	r0, r0, ip, asr #2
     780:	79c49103 	stmibvc	r4, {r0, r1, r8, ip, pc}^
     784:	00069f11 	andeq	r9, r6, r1, lsl pc
     788:	caf70100 	bgt	ffdc0b90 <firstTime.4040+0xdfdb24d4>
     78c:	03000009 	movweq	r0, #9
     790:	1978d891 	ldmdbne	r8!, {r0, r4, r7, fp, ip, lr, pc}^
     794:	0000005d 	andeq	r0, r0, sp, asr r0
     798:	6e010f01 	cdpvs	15, 0, cr0, cr1, cr1, {0}
     79c:	03000003 	movweq	r0, #3
     7a0:	1978c491 	ldmdbne	r8!, {r0, r4, r7, sl, lr, pc}^
     7a4:	000001ab 	andeq	r0, r0, fp, lsr #3
     7a8:	6e011001 	cdpvs	0, 0, cr1, cr1, cr1, {0}
     7ac:	03000003 	movweq	r0, #3
     7b0:	1978b091 	ldmdbne	r8!, {r0, r4, r7, ip, sp, pc}^
     7b4:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     7b8:	6e011101 	adfvss	f1, f1, f1
     7bc:	03000003 	movweq	r0, #3
     7c0:	19789c91 	ldmdbne	r8!, {r0, r4, r7, sl, fp, ip, pc}^
     7c4:	00000214 	andeq	r0, r0, r4, lsl r2
     7c8:	6e011201 	cdpvs	2, 0, cr1, cr1, cr1, {0}
     7cc:	03000003 	movweq	r0, #3
     7d0:	19788891 	ldmdbne	r8!, {r0, r4, r7, fp, pc}^
     7d4:	000001ef 	andeq	r0, r0, pc, ror #3
     7d8:	6e011301 	cdpvs	3, 0, cr1, cr1, cr1, {0}
     7dc:	03000003 	movweq	r0, #3
     7e0:	1977f491 	ldmdbne	r7!, {r0, r4, r7, sl, ip, sp, lr, pc}^
     7e4:	000001f5 	strdeq	r0, [r0], -r5
     7e8:	6e011401 	cdpvs	4, 0, cr1, cr1, cr1, {0}
     7ec:	03000003 	movweq	r0, #3
     7f0:	1977e091 	ldmdbne	r7!, {r0, r4, r7, sp, lr, pc}^
     7f4:	0000025a 	andeq	r0, r0, sl, asr r2
     7f8:	6e011501 	cfsh32vs	mvfx1, mvfx1, #1
     7fc:	03000003 	movweq	r0, #3
     800:	1977cc91 	ldmdbne	r7!, {r0, r4, r7, sl, fp, lr, pc}^
     804:	00000242 	andeq	r0, r0, r2, asr #4
     808:	6e011601 	cfmadd32vs	mvax0, mvfx1, mvfx1, mvfx1
     80c:	03000003 	movweq	r0, #3
     810:	1977b891 	ldmdbne	r7!, {r0, r4, r7, fp, ip, sp, pc}^
     814:	0000021a 	andeq	r0, r0, sl, lsl r2
     818:	6e011701 	cdpvs	7, 0, cr1, cr1, cr1, {0}
     81c:	03000003 	movweq	r0, #3
     820:	1977a491 	ldmdbne	r7!, {r0, r4, r7, sl, sp, pc}^
     824:	00000260 	andeq	r0, r0, r0, ror #4
     828:	6e011801 	cdpvs	8, 0, cr1, cr1, cr1, {0}
     82c:	03000003 	movweq	r0, #3
     830:	19779091 	ldmdbne	r7!, {r0, r4, r7, ip, pc}^
     834:	00000700 	andeq	r0, r0, r0, lsl #14
     838:	6e011901 	vmlavs.f16	s2, s2, s2	; <UNPREDICTABLE>
     83c:	03000003 	movweq	r0, #3
     840:	1976fc91 	ldmdbne	r6!, {r0, r4, r7, sl, fp, ip, sp, lr, pc}^
     844:	00000707 	andeq	r0, r0, r7, lsl #14
     848:	6e011a01 	vmlavs.f32	s2, s2, s2
     84c:	03000003 	movweq	r0, #3
     850:	1976e891 	ldmdbne	r6!, {r0, r4, r7, fp, sp, lr, pc}^
     854:	00000645 	andeq	r0, r0, r5, asr #12
     858:	6e011b01 	vmlavs.f64	d1, d1, d1
     85c:	03000003 	movweq	r0, #3
     860:	1976d491 	ldmdbne	r6!, {r0, r4, r7, sl, ip, lr, pc}^
     864:	0000013f 	andeq	r0, r0, pc, lsr r1
     868:	2e012e01 	cdpcs	14, 0, cr2, cr1, cr1, {0}
     86c:	02000001 	andeq	r0, r0, #1
     870:	01196c91 			; <UNDEFINED> instruction: 0x01196c91
     874:	01000002 	tsteq	r0, r2
     878:	012e012f 			; <UNDEFINED> instruction: 0x012e012f
     87c:	91020000 	mrsls	r0, (UNDEF: 2)
     880:	00661968 	rsbeq	r1, r6, r8, ror #18
     884:	30010000 	andcc	r0, r1, r0
     888:	00012e01 	andeq	r2, r1, r1, lsl #28
     88c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     890:	0006f019 	andeq	pc, r6, r9, lsl r0	; <UNPREDICTABLE>
     894:	01310100 	teqeq	r1, r0, lsl #2
     898:	0000012e 	andeq	r0, r0, lr, lsr #2
     89c:	19609102 	stmdbne	r0!, {r1, r8, ip, pc}^
     8a0:	00000662 	andeq	r0, r0, r2, ror #12
     8a4:	2e013201 	cdpcs	2, 0, cr3, cr1, cr1, {0}
     8a8:	02000001 	andeq	r0, r0, #1
     8ac:	75195c91 	ldrvc	r5, [r9, #-3217]	; 0xfffff36f
     8b0:	01000006 	tsteq	r0, r6
     8b4:	012e0133 			; <UNDEFINED> instruction: 0x012e0133
     8b8:	91020000 	mrsls	r0, (UNDEF: 2)
     8bc:	05e71958 	strbeq	r1, [r7, #2392]!	; 0x958
     8c0:	34010000 	strcc	r0, [r1], #-0
     8c4:	00012e01 	andeq	r2, r1, r1, lsl #28
     8c8:	54910200 	ldrpl	r0, [r1], #512	; 0x200
     8cc:	00000019 	andeq	r0, r0, r9, lsl r0
     8d0:	01350100 	teqeq	r5, r0, lsl #2
     8d4:	0000012e 	andeq	r0, r0, lr, lsr #2
     8d8:	1a509102 	bne	1424ce8 <startup-0x1ebdb318>
     8dc:	2000087a 	andcs	r0, r0, sl, ror r8
     8e0:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
     8e4:	0002af19 	andeq	sl, r2, r9, lsl pc
     8e8:	015b0100 	cmpeq	fp, r0, lsl #2
     8ec:	0000012e 	andeq	r0, r0, lr, lsr #2
     8f0:	87e80305 	strbhi	r0, [r8, r5, lsl #6]!
     8f4:	5d192000 	ldcpl	0, cr2, [r9, #-0]
     8f8:	01000004 	tsteq	r0, r4
     8fc:	012e015c 			; <UNDEFINED> instruction: 0x012e015c
     900:	03050000 	movweq	r0, #20480	; 0x5000
     904:	200087ec 	andcs	r8, r0, ip, ror #15
     908:	00039619 	andeq	r9, r3, r9, lsl r6
     90c:	015d0100 	cmpeq	sp, r0, lsl #2
     910:	0000012e 	andeq	r0, r0, lr, lsr #2
     914:	87e40305 	strbhi	r0, [r4, r5, lsl #6]!
     918:	691b2000 	ldmdbvs	fp, {sp}
     91c:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
     920:	0000012e 	andeq	r0, r0, lr, lsr #2
     924:	47bc0305 	ldrmi	r0, [ip, r5, lsl #6]!
     928:	34192000 	ldrcc	r2, [r9], #-0
     92c:	01000006 	tsteq	r0, r6
     930:	012e01bd 			; <UNDEFINED> instruction: 0x012e01bd
     934:	03050000 	movweq	r0, #20480	; 0x5000
     938:	200087f0 	strdcs	r8, [r0], -r0
     93c:	00059219 	andeq	r9, r5, r9, lsl r2
     940:	02010100 	andeq	r0, r1, #0, 2
     944:	0000012e 	andeq	r0, r0, lr, lsr #2
     948:	47c40305 	strbmi	r0, [r4, r5, lsl #6]
     94c:	6a1b2000 	bvs	6c8954 <startup-0x1f9376ac>
     950:	02020100 	andeq	r0, r2, #0, 2
     954:	0000012e 	andeq	r0, r0, lr, lsr #2
     958:	47c00305 	strbmi	r0, [r0, r5, lsl #6]
     95c:	5e192000 	cdppl	0, 1, cr2, cr9, cr0, {0}
     960:	01000001 	tsteq	r0, r1
     964:	012e020c 			; <UNDEFINED> instruction: 0x012e020c
     968:	03050000 	movweq	r0, #20480	; 0x5000
     96c:	200047cc 	andcs	r4, r0, ip, asr #15
     970:	00030b19 	andeq	r0, r3, r9, lsl fp
     974:	020d0100 	andeq	r0, sp, #0, 2
     978:	0000012e 	andeq	r0, r0, lr, lsr #2
     97c:	47c80305 	strbmi	r0, [r8, r5, lsl #6]
     980:	78192000 	ldmdavc	r9, {sp}
     984:	01000005 	tsteq	r0, r5
     988:	012e0217 			; <UNDEFINED> instruction: 0x012e0217
     98c:	03050000 	movweq	r0, #20480	; 0x5000
     990:	200047d4 	ldrdcs	r4, [r0], -r4	; <UNPREDICTABLE>
     994:	00034919 	andeq	r4, r3, r9, lsl r9
     998:	02180100 	andseq	r0, r8, #0, 2
     99c:	0000012e 	andeq	r0, r0, lr, lsr #2
     9a0:	47d00305 	ldrbmi	r0, [r0, r5, lsl #6]
     9a4:	0f192000 	svceq	0x00192000
     9a8:	0100001c 	tsteq	r0, ip, lsl r0
     9ac:	012e0234 			; <UNDEFINED> instruction: 0x012e0234
     9b0:	03050000 	movweq	r0, #20480	; 0x5000
     9b4:	200047d8 	ldrdcs	r4, [r0], -r8
     9b8:	a40b0000 	strge	r0, [fp], #-0
     9bc:	ca000000 	bgt	9c4 <startup-0x1ffff63c>
     9c0:	0f000009 	svceq	0x00000009
     9c4:	0000019a 	muleq	r0, sl, r1
     9c8:	4c0b0000 	stcmi	0, cr0, [fp], {-0}
     9cc:	da000001 	ble	9d8 <startup-0x1ffff628>
     9d0:	0f000009 	svceq	0x00000009
     9d4:	0000019a 	muleq	r0, sl, r1
     9d8:	9e150002 	cdpls	0, 1, cr0, cr5, cr2, {0}
     9dc:	01000004 	tsteq	r0, r4
     9e0:	0000345a 	andeq	r3, r0, sl, asr r4
     9e4:	0001c820 	andeq	ip, r1, r0, lsr #16
     9e8:	7c9c0100 	ldfvcs	f0, [ip], {0}
     9ec:	1100000a 	tstne	r0, sl
     9f0:	0000048f 	andeq	r0, r0, pc, lsl #9
     9f4:	009e5b01 	addseq	r5, lr, r1, lsl #22
     9f8:	91020000 	mrsls	r0, (UNDEF: 2)
     9fc:	02661174 	rsbeq	r1, r6, #116, 2
     a00:	5f010000 	svcpl	0x00010000
     a04:	0000009e 	muleq	r0, lr, r0
     a08:	11709102 	cmnne	r0, r2, lsl #2
     a0c:	00000276 	andeq	r0, r0, r6, ror r2
     a10:	009e6301 	addseq	r6, lr, r1, lsl #6
     a14:	91020000 	mrsls	r0, (UNDEF: 2)
     a18:	0442116c 	strbeq	r1, [r2], #-364	; 0xfffffe94
     a1c:	67010000 	strvs	r0, [r1, -r0]
     a20:	0000009e 	muleq	r0, lr, r0
     a24:	11689102 	cmnne	r8, r2, lsl #2
     a28:	000002f9 	strdeq	r0, [r0], -r9
     a2c:	009e6b01 	addseq	r6, lr, r1, lsl #22
     a30:	91020000 	mrsls	r0, (UNDEF: 2)
     a34:	03021164 	movweq	r1, #8548	; 0x2164
     a38:	6f010000 	svcvs	0x00010000
     a3c:	0000009e 	muleq	r0, lr, r0
     a40:	11609102 	cmnne	r0, r2, lsl #2
     a44:	0000014b 	andeq	r0, r0, fp, asr #2
     a48:	009e7301 	addseq	r7, lr, r1, lsl #6
     a4c:	91020000 	mrsls	r0, (UNDEF: 2)
     a50:	0320115c 			; <UNDEFINED> instruction: 0x0320115c
     a54:	77010000 	strvc	r0, [r1, -r0]
     a58:	0000009e 	muleq	r0, lr, r0
     a5c:	11589102 	cmpne	r8, r2, lsl #2
     a60:	00000329 	andeq	r0, r0, r9, lsr #6
     a64:	009e7a01 	addseq	r7, lr, r1, lsl #20
     a68:	91020000 	mrsls	r0, (UNDEF: 2)
     a6c:	00851154 	addeq	r1, r5, r4, asr r1
     a70:	7d010000 	stcvc	0, cr0, [r1, #-0]
     a74:	0000009e 	muleq	r0, lr, r0
     a78:	00509102 	subseq	r9, r0, r2, lsl #2
     a7c:	0002a61c 	andeq	sl, r2, ip, lsl r6
     a80:	10260100 	eorne	r0, r6, r0, lsl #2
     a84:	24200000 	strtcs	r0, [r0], #-0
     a88:	01000000 	mrseq	r0, (UNDEF: 0)
     a8c:	01a31d9c 			; <UNDEFINED> instruction: 0x01a31d9c
     a90:	30010000 	andcc	r0, r1, r0
     a94:	20000000 	andcs	r0, r0, r0
     a98:	0000000c 	andeq	r0, r0, ip
     a9c:	e0009c01 	and	r9, r0, r1, lsl #24
     aa0:	04000001 	streq	r0, [r0], #-1
     aa4:	00019e00 	andeq	r9, r1, r0, lsl #28
     aa8:	9f010400 	svcls	0x00010400
     aac:	0c000000 	stceq	0, cr0, [r0], {-0}
     ab0:	00000744 	andeq	r0, r0, r4, asr #14
     ab4:	2000188c 	andcs	r1, r0, ip, lsl #17
     ab8:	00000056 	andeq	r0, r0, r6, asr r0
     abc:	000003ce 	andeq	r0, r0, lr, asr #7
     ac0:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
     ac4:	0000004e 	andeq	r0, r0, lr, asr #32
     ac8:	00035b03 	andeq	r5, r3, r3, lsl #22
     acc:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
     ad0:	00000000 	andeq	r0, r0, r0
     ad4:	00070e03 	andeq	r0, r7, r3, lsl #28
     ad8:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
     adc:	04000000 	streq	r0, [r0], #-0
     ae0:	00190d03 	andseq	r0, r9, r3, lsl #26
     ae4:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
     ae8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     aec:	07040400 	streq	r0, [r4, -r0, lsl #8]
     af0:	00000389 	andeq	r0, r0, r9, lsl #7
     af4:	005b0405 	subseq	r0, fp, r5, lsl #8
     af8:	01040000 	mrseq	r0, (UNDEF: 4)
     afc:	0004c808 	andeq	ip, r4, r8, lsl #16
     b00:	1a5f0600 	bne	17c2308 <startup-0x1e83dcf8>
     b04:	0a020000 	beq	80b0c <startup-0x1ff7f4f4>
     b08:	00000021 	andeq	r0, r0, r1, lsr #32
     b0c:	00003407 	andeq	r3, r0, r7, lsl #8
     b10:	06030c00 	streq	r0, [r3], -r0, lsl #24
     b14:	0000009e 	muleq	r0, lr, r0
     b18:	0005be03 	andeq	fp, r5, r3, lsl #28
     b1c:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
     b20:	00000000 	andeq	r0, r0, r0
     b24:	00003b03 	andeq	r3, r0, r3, lsl #22
     b28:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
     b2c:	04000000 	streq	r0, [r0], #-0
     b30:	00003003 	andeq	r3, r0, r3
     b34:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
     b38:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     b3c:	62040500 	andvs	r0, r4, #0, 10
     b40:	06000000 	streq	r0, [r0], -r0
     b44:	0000161d 	andeq	r1, r0, sp, lsl r6
     b48:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
     b4c:	d3070000 	movwle	r0, #28672	; 0x7000
     b50:	24000006 	strcs	r0, [r0], #-6
     b54:	01280604 			; <UNDEFINED> instruction: 0x01280604
     b58:	56030000 	strpl	r0, [r3], -r0
     b5c:	04000004 	streq	r0, [r0], #-4
     b60:	00012807 	andeq	r2, r1, r7, lsl #16
     b64:	df030000 	svcle	0x00030000
     b68:	04000006 	streq	r0, [r0], #-6
     b6c:	00012e08 	andeq	r2, r1, r8, lsl #28
     b70:	2f030400 	svccs	0x00030400
     b74:	04000006 	streq	r0, [r0], #-6
     b78:	00012e09 	andeq	r2, r1, r9, lsl #28
     b7c:	5b030800 	blpl	c2b84 <startup-0x1ff3d47c>
     b80:	04000006 	streq	r0, [r0], #-6
     b84:	0001460c 	andeq	r4, r1, ip, lsl #12
     b88:	42030c00 	andmi	r0, r3, #0, 24
     b8c:	04000003 	streq	r0, [r0], #-3
     b90:	0001460d 	andeq	r4, r1, sp, lsl #12
     b94:	68031000 	stmdavs	r3, {ip}
     b98:	04000004 	streq	r0, [r0], #-4
     b9c:	00012e10 	andeq	r2, r1, r0, lsl lr
     ba0:	70031400 	andvc	r1, r3, r0, lsl #8
     ba4:	04000000 	streq	r0, [r0], #-0
     ba8:	00012e11 	andeq	r2, r1, r1, lsl lr
     bac:	d9031800 	stmdble	r3, {fp, ip}
     bb0:	04000003 	streq	r0, [r0], #-3
     bb4:	00012e12 	andeq	r2, r1, r2, lsl lr
     bb8:	e9031c00 	stmdb	r3, {sl, fp, ip}
     bbc:	04000003 	streq	r0, [r0], #-3
     bc0:	00012e13 	andeq	r2, r1, r3, lsl lr
     bc4:	05002000 	streq	r2, [r0, #-0]
     bc8:	0000a404 	andeq	sl, r0, r4, lsl #8
     bcc:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
     bd0:	00746e69 	rsbseq	r6, r4, r9, ror #28
     bd4:	00014009 	andeq	r4, r1, r9
     bd8:	01400a00 	cmpeq	r0, r0, lsl #20
     bdc:	05000000 	streq	r0, [r0, #-0]
     be0:	0000af04 	andeq	sl, r0, r4, lsl #30
     be4:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
     be8:	06000001 	streq	r0, [r0], -r1
     bec:	000006d4 	ldrdeq	r0, [r0], -r4
     bf0:	00af1504 	adceq	r1, pc, r4, lsl #10
     bf4:	620b0000 	andvs	r0, fp, #0
     bf8:	62000001 	andvs	r0, r0, #1
     bfc:	0c000001 	stceq	0, cr0, [r0], {1}
     c00:	4c040500 	cfstr32mi	mvfx0, [r4], {-0}
     c04:	0d000001 	stceq	0, cr0, [r0, #-4]
     c08:	0000054b 	andeq	r0, r0, fp, asr #10
     c0c:	01571c04 	cmpeq	r7, r4, lsl #24
     c10:	240d0000 	strcs	r0, [sp], #-0
     c14:	04000004 	streq	r0, [r0], #-4
     c18:	00012e1d 	andeq	r2, r1, sp, lsl lr
     c1c:	07040400 	streq	r0, [r4, -r0, lsl #8]
     c20:	00000406 	andeq	r0, r0, r6, lsl #8
     c24:	0001680e 	andeq	r6, r1, lr, lsl #16
     c28:	05030100 	streq	r0, [r3, #-256]	; 0xffffff00
     c2c:	0048d803 	subeq	sp, r8, r3, lsl #16
     c30:	01730e20 	cmneq	r3, r0, lsr #28
     c34:	04010000 	streq	r0, [r1], #-0
     c38:	47dc0305 	ldrbmi	r0, [ip, r5, lsl #6]
     c3c:	330f2000 	movwcc	r2, #61440	; 0xf000
     c40:	01000007 	tsteq	r0, r7
     c44:	00189c0c 	andseq	r9, r8, ip, lsl #24
     c48:	00004620 	andeq	r4, r0, r0, lsr #12
     c4c:	c39c0100 	orrsgt	r0, ip, #0, 2
     c50:	10000001 	andne	r0, r0, r1
     c54:	00000777 	andeq	r0, r0, r7, ror r7
     c58:	01620c01 	cmneq	r2, r1, lsl #24
     c5c:	91020000 	mrsls	r0, (UNDEF: 2)
     c60:	42110074 	andsmi	r0, r1, #116	; 0x74
     c64:	01000003 	tsteq	r0, r3
     c68:	00188c07 	andseq	r8, r8, r7, lsl #24
     c6c:	00001020 	andeq	r1, r0, r0, lsr #32
     c70:	109c0100 	addsne	r0, ip, r0, lsl #2
     c74:	00000777 	andeq	r0, r0, r7, ror r7
     c78:	01620701 	cmneq	r2, r1, lsl #14
     c7c:	91020000 	mrsls	r0, (UNDEF: 2)
     c80:	2b000074 	blcs	e58 <startup-0x1ffff1a8>
     c84:	04000005 	streq	r0, [r0], #-5
     c88:	00028400 	andeq	r8, r2, r0, lsl #8
     c8c:	9f010400 	svcls	0x00010400
     c90:	0c000000 	stceq	0, cr0, [r0], {-0}
     c94:	000009b7 			; <UNDEFINED> instruction: 0x000009b7
     c98:	200018e4 	andcs	r1, r0, r4, ror #17
     c9c:	000002a8 	andeq	r0, r0, r8, lsr #5
     ca0:	0000045c 	andeq	r0, r0, ip, asr r4
     ca4:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
     ca8:	0000004e 	andeq	r0, r0, lr, asr #32
     cac:	00035b03 	andeq	r5, r3, r3, lsl #22
     cb0:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
     cb4:	00000000 	andeq	r0, r0, r0
     cb8:	00070e03 	andeq	r0, r7, r3, lsl #28
     cbc:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
     cc0:	04000000 	streq	r0, [r0], #-0
     cc4:	00190d03 	andseq	r0, r9, r3, lsl #26
     cc8:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
     ccc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     cd0:	07040400 	streq	r0, [r4, -r0, lsl #8]
     cd4:	00000389 	andeq	r0, r0, r9, lsl #7
     cd8:	005b0405 	subseq	r0, fp, r5, lsl #8
     cdc:	01040000 	mrseq	r0, (UNDEF: 4)
     ce0:	0004c808 	andeq	ip, r4, r8, lsl #16
     ce4:	1a5f0600 	bne	17c24ec <startup-0x1e83db14>
     ce8:	0a020000 	beq	80cf0 <startup-0x1ff7f310>
     cec:	00000021 	andeq	r0, r0, r1, lsr #32
     cf0:	00003407 	andeq	r3, r0, r7, lsl #8
     cf4:	06030c00 	streq	r0, [r3], -r0, lsl #24
     cf8:	0000009e 	muleq	r0, lr, r0
     cfc:	0005be03 	andeq	fp, r5, r3, lsl #28
     d00:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
     d04:	00000000 	andeq	r0, r0, r0
     d08:	00003b03 	andeq	r3, r0, r3, lsl #22
     d0c:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
     d10:	04000000 	streq	r0, [r0], #-0
     d14:	00003003 	andeq	r3, r0, r3
     d18:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
     d1c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     d20:	62040500 	andvs	r0, r4, #0, 10
     d24:	06000000 	streq	r0, [r0], -r0
     d28:	0000161d 	andeq	r1, r0, sp, lsl r6
     d2c:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
     d30:	d3070000 	movwle	r0, #28672	; 0x7000
     d34:	24000006 	strcs	r0, [r0], #-6
     d38:	01280604 			; <UNDEFINED> instruction: 0x01280604
     d3c:	56030000 	strpl	r0, [r3], -r0
     d40:	04000004 	streq	r0, [r0], #-4
     d44:	00012807 	andeq	r2, r1, r7, lsl #16
     d48:	df030000 	svcle	0x00030000
     d4c:	04000006 	streq	r0, [r0], #-6
     d50:	00012e08 	andeq	r2, r1, r8, lsl #28
     d54:	2f030400 	svccs	0x00030400
     d58:	04000006 	streq	r0, [r0], #-6
     d5c:	00012e09 	andeq	r2, r1, r9, lsl #28
     d60:	5b030800 	blpl	c2d68 <startup-0x1ff3d298>
     d64:	04000006 	streq	r0, [r0], #-6
     d68:	0001460c 	andeq	r4, r1, ip, lsl #12
     d6c:	42030c00 	andmi	r0, r3, #0, 24
     d70:	04000003 	streq	r0, [r0], #-3
     d74:	0001460d 	andeq	r4, r1, sp, lsl #12
     d78:	68031000 	stmdavs	r3, {ip}
     d7c:	04000004 	streq	r0, [r0], #-4
     d80:	00012e10 	andeq	r2, r1, r0, lsl lr
     d84:	70031400 	andvc	r1, r3, r0, lsl #8
     d88:	04000000 	streq	r0, [r0], #-0
     d8c:	00012e11 	andeq	r2, r1, r1, lsl lr
     d90:	d9031800 	stmdble	r3, {fp, ip}
     d94:	04000003 	streq	r0, [r0], #-3
     d98:	00012e12 	andeq	r2, r1, r2, lsl lr
     d9c:	e9031c00 	stmdb	r3, {sl, fp, ip}
     da0:	04000003 	streq	r0, [r0], #-3
     da4:	00012e13 	andeq	r2, r1, r3, lsl lr
     da8:	05002000 	streq	r2, [r0, #-0]
     dac:	0000a404 	andeq	sl, r0, r4, lsl #8
     db0:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
     db4:	00746e69 	rsbseq	r6, r4, r9, ror #28
     db8:	00014009 	andeq	r4, r1, r9
     dbc:	01400a00 	cmpeq	r0, r0, lsl #20
     dc0:	05000000 	streq	r0, [r0, #-0]
     dc4:	0000af04 	andeq	sl, r0, r4, lsl #30
     dc8:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
     dcc:	06000001 	streq	r0, [r0], -r1
     dd0:	000006d4 	ldrdeq	r0, [r0], -r4
     dd4:	00af1504 	adceq	r1, pc, r4, lsl #10
     dd8:	620b0000 	andvs	r0, fp, #0
     ddc:	62000001 	andvs	r0, r0, #1
     de0:	0c000001 	stceq	0, cr0, [r0], {1}
     de4:	4c040500 	cfstr32mi	mvfx0, [r4], {-0}
     de8:	0d000001 	stceq	0, cr0, [r0, #-4]
     dec:	0000054b 	andeq	r0, r0, fp, asr #10
     df0:	01571c04 	cmpeq	r7, r4, lsl #24
     df4:	240d0000 	strcs	r0, [sp], #-0
     df8:	04000004 	streq	r0, [r0], #-4
     dfc:	00012e1d 	andeq	r2, r1, sp, lsl lr
     e00:	005b0b00 	subseq	r0, fp, r0, lsl #22
     e04:	018e0000 	orreq	r0, lr, r0
     e08:	8e0e0000 	cdphi	0, 0, cr0, cr14, cr0, {0}
     e0c:	0b000001 	bleq	e18 <startup-0x1ffff1e8>
     e10:	07040400 	streq	r0, [r4, -r0, lsl #8]
     e14:	00000406 	andeq	r0, r0, r6, lsl #8
     e18:	00097c0f 	andeq	r7, r9, pc, lsl #24
     e1c:	7e030500 	cfsh32vc	mvfx0, mvfx3, #0
     e20:	05000001 	streq	r0, [r0, #-1]
     e24:	0087f403 	addeq	pc, r7, r3, lsl #8
     e28:	08760f20 	ldmdaeq	r6!, {r5, r8, r9, sl, fp}^
     e2c:	03060000 	movweq	r0, #24576	; 0x6000
     e30:	0000017e 	andeq	r0, r0, lr, ror r1
     e34:	88000305 	stmdahi	r0, {r0, r2, r8, r9}
     e38:	910f2000 	mrsls	r2, CPSR
     e3c:	07000008 	streq	r0, [r0, -r8]
     e40:	00017e03 	andeq	r7, r1, r3, lsl #28
     e44:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
     e48:	0f200088 	svceq	0x00200088
     e4c:	000007f2 	strdeq	r0, [r0], -r2
     e50:	017e0308 	cmneq	lr, r8, lsl #6
     e54:	03050000 	movweq	r0, #20480	; 0x5000
     e58:	20008818 	andcs	r8, r0, r8, lsl r8
     e5c:	0008a20f 	andeq	sl, r8, pc, lsl #4
     e60:	7e030900 	vmlavc.f16	s0, s6, s0	; <UNPREDICTABLE>
     e64:	05000001 	streq	r0, [r0, #-1]
     e68:	00882403 	addeq	r2, r8, r3, lsl #8
     e6c:	09e40f20 	stmibeq	r4!, {r5, r8, r9, sl, fp}^
     e70:	030a0000 	movweq	r0, #40960	; 0xa000
     e74:	0000017e 	andeq	r0, r0, lr, ror r1
     e78:	88300305 	ldmdahi	r0!, {r0, r2, r8, r9}
     e7c:	600f2000 	andvs	r2, pc, r0
     e80:	0b000009 	bleq	eac <startup-0x1ffff154>
     e84:	00017e03 	andeq	r7, r1, r3, lsl #28
     e88:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
     e8c:	0f200088 	svceq	0x00200088
     e90:	000008c5 	andeq	r0, r0, r5, asr #17
     e94:	017e030c 	cmneq	lr, ip, lsl #6
     e98:	03050000 	movweq	r0, #20480	; 0x5000
     e9c:	20008848 	andcs	r8, r0, r8, asr #16
     ea0:	0008020f 	andeq	r0, r8, pc, lsl #4
     ea4:	7e030d00 	cdpvc	13, 0, cr0, cr3, cr0, {0}
     ea8:	05000001 	streq	r0, [r0, #-1]
     eac:	00885403 	addeq	r5, r8, r3, lsl #8
     eb0:	08300f20 	ldmdaeq	r0!, {r5, r8, r9, sl, fp}
     eb4:	030e0000 	movweq	r0, #57344	; 0xe000
     eb8:	0000017e 	andeq	r0, r0, lr, ror r1
     ebc:	88600305 	stmdahi	r0!, {r0, r2, r8, r9}^
     ec0:	120f2000 	andne	r2, pc, #0
     ec4:	0f000009 	svceq	0x00000009
     ec8:	00017e03 	andeq	r7, r1, r3, lsl #28
     ecc:	6c030500 	cfstr32vs	mvfx0, [r3], {-0}
     ed0:	10200088 	eorne	r0, r0, r8, lsl #1
     ed4:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
     ed8:	009e1101 	addseq	r1, lr, r1, lsl #2
     edc:	03050000 	movweq	r0, #20480	; 0x5000
     ee0:	20004b98 	mulcs	r0, r8, fp
     ee4:	00078610 	andeq	r8, r7, r0, lsl r6
     ee8:	9e120100 	muflss	f0, f2, f0
     eec:	05000000 	streq	r0, [r0, #-0]
     ef0:	004bb003 	subeq	fp, fp, r3
     ef4:	07dc1020 	ldrbeq	r1, [ip, r0, lsr #32]
     ef8:	13010000 	movwne	r0, #4096	; 0x1000
     efc:	0000009e 	muleq	r0, lr, r0
     f00:	4a680305 	bmi	1a01b1c <startup-0x1e5fe4e4>
     f04:	bb102000 	bllt	408f0c <startup-0x1fbf70f4>
     f08:	01000008 	tsteq	r0, r8
     f0c:	00009e14 	andeq	r9, r0, r4, lsl lr
     f10:	ac030500 	cfstr32ge	mvfx0, [r3], {-0}
     f14:	1020004b 	eorne	r0, r0, fp, asr #32
     f18:	00000886 	andeq	r0, r0, r6, lsl #17
     f1c:	009e1501 	addseq	r1, lr, r1, lsl #10
     f20:	03050000 	movweq	r0, #20480	; 0x5000
     f24:	20004b84 	andcs	r4, r0, r4, lsl #23
     f28:	00079e10 	andeq	r9, r7, r0, lsl lr
     f2c:	9e160100 	muflss	f0, f6, f0
     f30:	05000000 	streq	r0, [r0, #-0]
     f34:	004a7803 	subeq	r7, sl, r3, lsl #16
     f38:	08131020 	ldmdaeq	r3, {r5, ip}
     f3c:	17010000 	strne	r0, [r1, -r0]
     f40:	0000009e 	muleq	r0, lr, r0
     f44:	4ba80305 	blmi	fea01b60 <firstTime.4040+0xde9f34a4>
     f48:	39102000 	ldmdbcc	r0, {sp}
     f4c:	01000009 	tsteq	r0, r9
     f50:	00009e18 	andeq	r9, r0, r8, lsl lr
     f54:	64030500 	strvs	r0, [r3], #-1280	; 0xfffffb00
     f58:	1020004b 	eorne	r0, r0, fp, asr #32
     f5c:	000007e7 	andeq	r0, r0, r7, ror #15
     f60:	009e1901 	addseq	r1, lr, r1, lsl #18
     f64:	03050000 	movweq	r0, #20480	; 0x5000
     f68:	20004ad0 	ldrdcs	r4, [r0], -r0
     f6c:	00077c10 	andeq	r7, r7, r0, lsl ip
     f70:	9e1a0100 	muflse	f0, f2, f0
     f74:	05000000 	streq	r0, [r0, #-0]
     f78:	004b8003 	subeq	r8, fp, r3
     f7c:	08541020 	ldmdaeq	r4, {r5, ip}^
     f80:	1b010000 	blne	40f88 <startup-0x1ffbf078>
     f84:	0000009e 	muleq	r0, lr, r0
     f88:	4b880305 	blmi	fe201ba4 <firstTime.4040+0xde1f34e8>
     f8c:	ce102000 	cdpgt	0, 1, cr2, cr0, cr0, {0}
     f90:	01000007 	tsteq	r0, r7
     f94:	0000621d 	andeq	r6, r0, sp, lsl r2
     f98:	a0030500 	andge	r0, r3, r0, lsl #10
     f9c:	1020004a 	eorne	r0, r0, sl, asr #32
     fa0:	00000943 	andeq	r0, r0, r3, asr #18
     fa4:	00621e01 	rsbeq	r1, r2, r1, lsl #28
     fa8:	03050000 	movweq	r0, #20480	; 0x5000
     fac:	20004b8c 	andcs	r4, r0, ip, lsl #23
     fb0:	0008ef10 	andeq	lr, r8, r0, lsl pc
     fb4:	621f0100 	andsvs	r0, pc, #0, 2
     fb8:	05000000 	streq	r0, [r0, #-0]
     fbc:	004b6803 	subeq	r6, fp, r3, lsl #16
     fc0:	07901020 	ldreq	r1, [r0, r0, lsr #32]
     fc4:	20010000 	andcs	r0, r1, r0
     fc8:	00000062 	andeq	r0, r0, r2, rrx
     fcc:	4a940305 	bmi	fe501be8 <firstTime.4040+0xde4f352c>
     fd0:	8e102000 	cdphi	0, 1, cr2, cr0, cr0, {0}
     fd4:	01000009 	tsteq	r0, r9
     fd8:	00006221 	andeq	r6, r0, r1, lsr #4
     fdc:	9c030500 	cfstr32ls	mvfx0, [r3], {-0}
     fe0:	1020004b 	eorne	r0, r0, fp, asr #32
     fe4:	000007c0 	andeq	r0, r0, r0, asr #15
     fe8:	00622201 	rsbeq	r2, r2, r1, lsl #4
     fec:	03050000 	movweq	r0, #20480	; 0x5000
     ff0:	20004b4c 	andcs	r4, r0, ip, asr #22
     ff4:	0008d510 	andeq	sp, r8, r0, lsl r5
     ff8:	62230100 	eorvs	r0, r3, #0, 2
     ffc:	05000000 	streq	r0, [r0, #-0]
    1000:	004a6c03 	subeq	r6, sl, r3, lsl #24
    1004:	07a81020 	streq	r1, [r8, r0, lsr #32]!
    1008:	24010000 	strcs	r0, [r1], #-0
    100c:	00000062 	andeq	r0, r0, r2, rrx
    1010:	4a7c0305 	bmi	1f01c2c <startup-0x1e0fe3d4>
    1014:	51102000 	tstpl	r0, r0
    1018:	01000009 	tsteq	r0, r9
    101c:	00006225 	andeq	r6, r0, r5, lsr #4
    1020:	b8030500 	stmdalt	r3, {r8, sl}
    1024:	1020004a 	eorne	r0, r0, sl, asr #32
    1028:	00000868 	andeq	r0, r0, r8, ror #16
    102c:	00622601 	rsbeq	r2, r2, r1, lsl #12
    1030:	03050000 	movweq	r0, #20480	; 0x5000
    1034:	20004b40 	andcs	r4, r0, r0, asr #22
    1038:	0009a810 	andeq	sl, r9, r0, lsl r8
    103c:	62270100 	eorvs	r0, r7, #0, 2
    1040:	05000000 	streq	r0, [r0, #-0]
    1044:	004b7403 	subeq	r7, fp, r3, lsl #8
    1048:	08b31020 	ldmeq	r3!, {r5, ip}
    104c:	2a010000 	bcs	41054 <startup-0x1ffbefac>
    1050:	0000014c 	andeq	r0, r0, ip, asr #2
    1054:	4ad40305 	bmi	ff501c70 <firstTime.4040+0xdf4f35b4>
    1058:	2e102000 	cdpcs	0, 1, cr2, cr0, cr0, {0}
    105c:	01000009 	tsteq	r0, r9
    1060:	0000a42b 	andeq	sl, r0, fp, lsr #8
    1064:	c4030500 	strgt	r0, [r3], #-1280	; 0xfffffb00
    1068:	1020004a 	eorne	r0, r0, sl, asr #32
    106c:	0000099d 	muleq	r0, sp, r9
    1070:	00a42c01 	adceq	r2, r4, r1, lsl #24
    1074:	03050000 	movweq	r0, #20480	; 0x5000
    1078:	20004a88 	andcs	r4, r0, r8, lsl #21
    107c:	00084010 	andeq	r4, r8, r0, lsl r0
    1080:	a42d0100 	strtge	r0, [sp], #-256	; 0xffffff00
    1084:	05000000 	streq	r0, [r0, #-0]
    1088:	004aac03 	subeq	sl, sl, r3, lsl #24
    108c:	08e41020 	stmiaeq	r4!, {r5, ip}^
    1090:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    1094:	000000a4 	andeq	r0, r0, r4, lsr #1
    1098:	4b580305 	blmi	1601cb4 <startup-0x1e9fe34c>
    109c:	71102000 	tstvc	r0, r0
    10a0:	01000009 	tsteq	r0, r9
    10a4:	0000a42f 	andeq	sl, r0, pc, lsr #8
    10a8:	f8030500 			; <UNDEFINED> instruction: 0xf8030500
    10ac:	0b20004a 	bleq	8011dc <startup-0x1f7fee24>
    10b0:	000000a4 	andeq	r0, r0, r4, lsr #1
    10b4:	0000043c 	andeq	r0, r0, ip, lsr r4
    10b8:	00018e0e 	andeq	r8, r1, lr, lsl #28
    10bc:	10000400 	andne	r0, r0, r0, lsl #8
    10c0:	00000923 	andeq	r0, r0, r3, lsr #18
    10c4:	042c3001 	strteq	r3, [ip], #-1
    10c8:	03050000 	movweq	r0, #20480	; 0x5000
    10cc:	20004b04 	andcs	r4, r0, r4, lsl #22
    10d0:	00090811 	andeq	r0, r9, r1, lsl r8
    10d4:	685f0100 	ldmdavs	pc, {r8}^	; <UNPREDICTABLE>
    10d8:	2420001a 	strtcs	r0, [r0], #-26	; 0xffffffe6
    10dc:	01000001 	tsteq	r0, r1
    10e0:	0004829c 	muleq	r4, ip, r2
    10e4:	08b31200 	ldmeq	r3!, {r9, ip}
    10e8:	5f010000 	svcpl	0x00010000
    10ec:	00000162 	andeq	r0, r0, r2, ror #2
    10f0:	0f6c9102 	svceq	0x006c9102
    10f4:	000008fe 	strdeq	r0, [r0], -lr
    10f8:	012e6001 			; <UNDEFINED> instruction: 0x012e6001
    10fc:	03050000 	movweq	r0, #20480	; 0x5000
    1100:	20008878 	andcs	r8, r0, r8, ror r8
    1104:	049e1300 	ldreq	r1, [lr], #768	; 0x300
    1108:	31010000 	mrscc	r0, (UNDEF: 1)
    110c:	200018e4 	andcs	r1, r0, r4, ror #17
    1110:	00000184 	andeq	r0, r0, r4, lsl #3
    1114:	4b0f9c01 	blmi	3e8120 <startup-0x1fc17ee0>
    1118:	01000008 	tsteq	r0, r8
    111c:	00009e32 	andeq	r9, r0, r2, lsr lr
    1120:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1124:	00081e0f 	andeq	r1, r8, pc, lsl #28
    1128:	9e360100 	rsflss	f0, f6, f0
    112c:	02000000 	andeq	r0, r0, #0
    1130:	5f0f7091 	svcpl	0x000f7091
    1134:	01000008 	tsteq	r0, r8
    1138:	00009e3a 	andeq	r9, r0, sl, lsr lr
    113c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1140:	0008270f 	andeq	r2, r8, pc, lsl #14
    1144:	9e3e0100 	rsflse	f0, f6, f0
    1148:	02000000 	andeq	r0, r0, #0
    114c:	420f6891 	andmi	r6, pc, #9502720	; 0x910000
    1150:	01000004 	tsteq	r0, r4
    1154:	00009e42 	andeq	r9, r0, r2, asr #28
    1158:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    115c:	0002f90f 	andeq	pc, r2, pc, lsl #18
    1160:	9e460100 	dvflss	f0, f6, f0
    1164:	02000000 	andeq	r0, r0, #0
    1168:	020f6091 	andeq	r6, pc, #145	; 0x91
    116c:	01000003 	tsteq	r0, r3
    1170:	00009e4a 	andeq	r9, r0, sl, asr #28
    1174:	5c910200 	lfmpl	f0, 4, [r1], {0}
    1178:	00014b0f 	andeq	r4, r1, pc, lsl #22
    117c:	9e4e0100 	dvflse	f0, f6, f0
    1180:	02000000 	andeq	r0, r0, #0
    1184:	200f5891 	mulcs	pc, r1, r8	; <UNPREDICTABLE>
    1188:	01000003 	tsteq	r0, r3
    118c:	00009e52 	andeq	r9, r0, r2, asr lr
    1190:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    1194:	0003290f 	andeq	r2, r3, pc, lsl #18
    1198:	9e560100 	rdflss	f0, f6, f0
    119c:	02000000 	andeq	r0, r0, #0
    11a0:	850f5091 	strhi	r5, [pc, #-145]	; 1117 <startup-0x1fffeee9>
    11a4:	01000000 	mrseq	r0, (UNDEF: 0)
    11a8:	00009e5a 	andeq	r9, r0, sl, asr lr
    11ac:	4c910200 	lfmmi	f0, 4, [r1], {0}
    11b0:	01f70000 	mvnseq	r0, r0
    11b4:	00040000 	andeq	r0, r4, r0
    11b8:	00000384 	andeq	r0, r0, r4, lsl #7
    11bc:	009f0104 	addseq	r0, pc, r4, lsl #2
    11c0:	2d0c0000 	stccs	0, cr0, [ip, #-0]
    11c4:	8c00000a 	stchi	0, cr0, [r0], {10}
    11c8:	0420001b 	strteq	r0, [r0], #-27	; 0xffffffe5
    11cc:	e4000002 	str	r0, [r0], #-2
    11d0:	02000005 	andeq	r0, r0, #5
    11d4:	03890704 	orreq	r0, r9, #4, 14	; 0x100000
    11d8:	02020000 	andeq	r0, r2, #0
    11dc:	00038307 	andeq	r8, r3, r7, lsl #6
    11e0:	08010200 	stmdaeq	r1, {r9}
    11e4:	000004c8 	andeq	r0, r0, r8, asr #9
    11e8:	05020c03 	streq	r0, [r2, #-3075]	; 0xfffff3fd
    11ec:	00000063 	andeq	r0, r0, r3, rrx
    11f0:	00035b04 	andeq	r5, r3, r4, lsl #22
    11f4:	21070200 	mrscs	r0, (UNDEF: 39)
    11f8:	00000000 	andeq	r0, r0, r0
    11fc:	00070e04 	andeq	r0, r7, r4, lsl #28
    1200:	21080200 	mrscs	r0, R8_fiq
    1204:	04000000 	streq	r0, [r0], #-0
    1208:	00190d04 	andseq	r0, r9, r4, lsl #26
    120c:	63090200 	movwvs	r0, #37376	; 0x9200
    1210:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1214:	2f040500 	svccs	0x00040500
    1218:	06000000 	streq	r0, [r0], -r0
    121c:	00001a5f 	andeq	r1, r0, pc, asr sl
    1220:	00360a02 	eorseq	r0, r6, r2, lsl #20
    1224:	34070000 	strcc	r0, [r7], #-0
    1228:	0c000000 	stceq	0, cr0, [r0], {-0}
    122c:	00a50603 	adceq	r0, r5, r3, lsl #12
    1230:	be040000 	cdplt	0, 0, cr0, cr4, cr0, {0}
    1234:	03000005 	movweq	r0, #5
    1238:	0000a507 	andeq	sl, r0, r7, lsl #10
    123c:	3b040000 	blcc	101244 <startup-0x1fefedbc>
    1240:	03000000 	movweq	r0, #0
    1244:	0000a508 	andeq	sl, r0, r8, lsl #10
    1248:	30040400 	andcc	r0, r4, r0, lsl #8
    124c:	03000000 	movweq	r0, #0
    1250:	0000a509 	andeq	sl, r0, r9, lsl #10
    1254:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    1258:	00006904 	andeq	r6, r0, r4, lsl #18
    125c:	161d0600 	ldrne	r0, [sp], -r0, lsl #12
    1260:	0a030000 	beq	c1268 <startup-0x1ff3ed98>
    1264:	00000074 	andeq	r0, r0, r4, ror r0
    1268:	0006d307 	andeq	sp, r6, r7, lsl #6
    126c:	06042400 	streq	r2, [r4], -r0, lsl #8
    1270:	0000012f 	andeq	r0, r0, pc, lsr #2
    1274:	00045604 	andeq	r5, r4, r4, lsl #12
    1278:	2f070400 	svccs	0x00070400
    127c:	00000001 	andeq	r0, r0, r1
    1280:	0006df04 	andeq	sp, r6, r4, lsl #30
    1284:	35080400 	strcc	r0, [r8, #-1024]	; 0xfffffc00
    1288:	04000001 	streq	r0, [r0], #-1
    128c:	00062f04 	andeq	r2, r6, r4, lsl #30
    1290:	35090400 	strcc	r0, [r9, #-1024]	; 0xfffffc00
    1294:	08000001 	stmdaeq	r0, {r0}
    1298:	00065b04 	andeq	r5, r6, r4, lsl #22
    129c:	4d0c0400 	cfstrsmi	mvf0, [ip, #-0]
    12a0:	0c000001 	stceq	0, cr0, [r0], {1}
    12a4:	00034204 	andeq	r4, r3, r4, lsl #4
    12a8:	4d0d0400 	cfstrsmi	mvf0, [sp, #-0]
    12ac:	10000001 	andne	r0, r0, r1
    12b0:	00046804 	andeq	r6, r4, r4, lsl #16
    12b4:	35100400 	ldrcc	r0, [r0, #-1024]	; 0xfffffc00
    12b8:	14000001 	strne	r0, [r0], #-1
    12bc:	00007004 	andeq	r7, r0, r4
    12c0:	35110400 	ldrcc	r0, [r1, #-1024]	; 0xfffffc00
    12c4:	18000001 	stmdane	r0, {r0}
    12c8:	0003d904 	andeq	sp, r3, r4, lsl #18
    12cc:	35120400 	ldrcc	r0, [r2, #-1024]	; 0xfffffc00
    12d0:	1c000001 	stcne	0, cr0, [r0], {1}
    12d4:	0003e904 	andeq	lr, r3, r4, lsl #18
    12d8:	35130400 	ldrcc	r0, [r3, #-1024]	; 0xfffffc00
    12dc:	20000001 	andcs	r0, r0, r1
    12e0:	ab040500 	blge	1026e8 <startup-0x1fefd918>
    12e4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    12e8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    12ec:	47090074 	smlsdxmi	r9, r4, r0, r0
    12f0:	0a000001 	beq	12fc <startup-0x1fffed04>
    12f4:	00000147 	andeq	r0, r0, r7, asr #2
    12f8:	b6040500 	strlt	r0, [r4], -r0, lsl #10
    12fc:	05000000 	streq	r0, [r0, #-0]
    1300:	00013c04 	andeq	r3, r1, r4, lsl #24
    1304:	06d40600 	ldrbeq	r0, [r4], r0, lsl #12
    1308:	15040000 	strne	r0, [r4, #-0]
    130c:	000000b6 	strheq	r0, [r0], -r6
    1310:	0001690b 	andeq	r6, r1, fp, lsl #18
    1314:	00016900 	andeq	r6, r1, r0, lsl #18
    1318:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    131c:	00015304 	andeq	r5, r1, r4, lsl #6
    1320:	054b0d00 	strbeq	r0, [fp, #-3328]	; 0xfffff300
    1324:	1c040000 	stcne	0, cr0, [r4], {-0}
    1328:	0000015e 	andeq	r0, r0, lr, asr r1
    132c:	0004240d 	andeq	r2, r4, sp, lsl #8
    1330:	351d0400 	ldrcc	r0, [sp, #-1024]	; 0xfffffc00
    1334:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    1338:	00000a5c 	andeq	r0, r0, ip, asr sl
    133c:	1b8c0701 	blne	fe302f48 <firstTime.4040+0xde2f488c>
    1340:	02042000 	andeq	r2, r4, #0
    1344:	9c010000 	stcls	0, cr0, [r1], {-0}
    1348:	0007770f 	andeq	r7, r7, pc, lsl #14
    134c:	69070100 	stmdbvs	r7, {r8}
    1350:	02000001 	andeq	r0, r0, #1
    1354:	03107491 	tsteq	r0, #-1862270976	; 0x91000000
    1358:	0100000a 	tsteq	r0, sl
    135c:	00013511 	andeq	r3, r1, r1, lsl r5
    1360:	e0030500 	and	r0, r3, r0, lsl #10
    1364:	10200047 	eorne	r0, r0, r7, asr #32
    1368:	000009f4 	strdeq	r0, [r0], -r4
    136c:	01351201 	teqeq	r5, r1, lsl #4
    1370:	03050000 	movweq	r0, #20480	; 0x5000
    1374:	200047e8 	andcs	r4, r0, r8, ror #15
    1378:	000a1f10 	andeq	r1, sl, r0, lsl pc
    137c:	35130100 	ldrcc	r0, [r3, #-256]	; 0xffffff00
    1380:	05000001 	streq	r0, [r0, #-1]
    1384:	0047f003 	subeq	pc, r7, r3
    1388:	0a181020 	beq	605410 <startup-0x1f9fabf0>
    138c:	14010000 	strne	r0, [r1], #-0
    1390:	00000135 	andeq	r0, r0, r5, lsr r1
    1394:	47ec0305 	strbmi	r0, [ip, r5, lsl #6]!
    1398:	11102000 	tstne	r0, r0
    139c:	0100000a 	tsteq	r0, sl
    13a0:	00013515 	andeq	r3, r1, r5, lsl r5
    13a4:	e4030500 	str	r0, [r3], #-1280	; 0xfffffb00
    13a8:	00200047 	eoreq	r0, r0, r7, asr #32
    13ac:	00064100 	andeq	r4, r6, r0, lsl #2
    13b0:	52000400 	andpl	r0, r0, #0, 8
    13b4:	04000004 	streq	r0, [r0], #-4
    13b8:	00009f01 	andeq	r9, r0, r1, lsl #30
    13bc:	0cdd0c00 	ldcleq	12, cr0, [sp], {0}
    13c0:	1d900000 	ldcne	0, cr0, [r0]
    13c4:	03642000 	cmneq	r4, #0
    13c8:	06cf0000 	strbeq	r0, [pc], r0
    13cc:	0c020000 	stceq	0, cr0, [r2], {-0}
    13d0:	004e0502 	subeq	r0, lr, r2, lsl #10
    13d4:	5b030000 	blpl	c13dc <startup-0x1ff3ec24>
    13d8:	02000003 	andeq	r0, r0, #3
    13dc:	00004e07 	andeq	r4, r0, r7, lsl #28
    13e0:	0e030000 	cdpeq	0, 0, cr0, cr3, cr0, {0}
    13e4:	02000007 	andeq	r0, r0, #7
    13e8:	00004e08 	andeq	r4, r0, r8, lsl #28
    13ec:	0d030400 	cfstrseq	mvf0, [r3, #-0]
    13f0:	02000019 	andeq	r0, r0, #25
    13f4:	00005509 	andeq	r5, r0, r9, lsl #10
    13f8:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    13fc:	03890704 	orreq	r0, r9, #4, 14	; 0x100000
    1400:	04050000 	streq	r0, [r5], #-0
    1404:	0000005b 	andeq	r0, r0, fp, asr r0
    1408:	c8080104 	stmdagt	r8, {r2, r8}
    140c:	06000004 	streq	r0, [r0], -r4
    1410:	00001a5f 	andeq	r1, r0, pc, asr sl
    1414:	00210a02 	eoreq	r0, r1, r2, lsl #20
    1418:	34070000 	strcc	r0, [r7], #-0
    141c:	0c000000 	stceq	0, cr0, [r0], {-0}
    1420:	009e0603 	addseq	r0, lr, r3, lsl #12
    1424:	be030000 	cdplt	0, 0, cr0, cr3, cr0, {0}
    1428:	03000005 	movweq	r0, #5
    142c:	00009e07 	andeq	r9, r0, r7, lsl #28
    1430:	3b030000 	blcc	c1438 <startup-0x1ff3ebc8>
    1434:	03000000 	movweq	r0, #0
    1438:	00009e08 	andeq	r9, r0, r8, lsl #28
    143c:	30030400 	andcc	r0, r3, r0, lsl #8
    1440:	03000000 	movweq	r0, #0
    1444:	00009e09 	andeq	r9, r0, r9, lsl #28
    1448:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    144c:	00006204 	andeq	r6, r0, r4, lsl #4
    1450:	161d0600 	ldrne	r0, [sp], -r0, lsl #12
    1454:	0a030000 	beq	c145c <startup-0x1ff3eba4>
    1458:	0000006d 	andeq	r0, r0, sp, rrx
    145c:	0006d307 	andeq	sp, r6, r7, lsl #6
    1460:	06042400 	streq	r2, [r4], -r0, lsl #8
    1464:	00000128 	andeq	r0, r0, r8, lsr #2
    1468:	00045603 	andeq	r5, r4, r3, lsl #12
    146c:	28070400 	stmdacs	r7, {sl}
    1470:	00000001 	andeq	r0, r0, r1
    1474:	0006df03 	andeq	sp, r6, r3, lsl #30
    1478:	2e080400 	cfcpyscs	mvf0, mvf8
    147c:	04000001 	streq	r0, [r0], #-1
    1480:	00062f03 	andeq	r2, r6, r3, lsl #30
    1484:	2e090400 	cfcpyscs	mvf0, mvf9
    1488:	08000001 	stmdaeq	r0, {r0}
    148c:	00065b03 	andeq	r5, r6, r3, lsl #22
    1490:	460c0400 	strmi	r0, [ip], -r0, lsl #8
    1494:	0c000001 	stceq	0, cr0, [r0], {1}
    1498:	00034203 	andeq	r4, r3, r3, lsl #4
    149c:	460d0400 	strmi	r0, [sp], -r0, lsl #8
    14a0:	10000001 	andne	r0, r0, r1
    14a4:	00046803 	andeq	r6, r4, r3, lsl #16
    14a8:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
    14ac:	14000001 	strne	r0, [r0], #-1
    14b0:	00007003 	andeq	r7, r0, r3
    14b4:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
    14b8:	18000001 	stmdane	r0, {r0}
    14bc:	0003d903 	andeq	sp, r3, r3, lsl #18
    14c0:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
    14c4:	1c000001 	stcne	0, cr0, [r0], {1}
    14c8:	0003e903 	andeq	lr, r3, r3, lsl #18
    14cc:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
    14d0:	20000001 	andcs	r0, r0, r1
    14d4:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    14d8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    14dc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    14e0:	40090074 	andmi	r0, r9, r4, ror r0
    14e4:	0a000001 	beq	14f0 <startup-0x1fffeb10>
    14e8:	00000140 	andeq	r0, r0, r0, asr #2
    14ec:	af040500 	svcge	0x00040500
    14f0:	05000000 	streq	r0, [r0, #-0]
    14f4:	00013504 	andeq	r3, r1, r4, lsl #10
    14f8:	06d40600 	ldrbeq	r0, [r4], r0, lsl #12
    14fc:	15040000 	strne	r0, [r4, #-0]
    1500:	000000af 	andeq	r0, r0, pc, lsr #1
    1504:	0001620b 	andeq	r6, r1, fp, lsl #4
    1508:	00016200 	andeq	r6, r1, r0, lsl #4
    150c:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    1510:	00014c04 	andeq	r4, r1, r4, lsl #24
    1514:	054b0d00 	strbeq	r0, [fp, #-3328]	; 0xfffff300
    1518:	1c040000 	stcne	0, cr0, [r4], {-0}
    151c:	00000157 	andeq	r0, r0, r7, asr r1
    1520:	0004240d 	andeq	r2, r4, sp, lsl #8
    1524:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
    1528:	0b000001 	bleq	1534 <startup-0x1fffeacc>
    152c:	0000005b 	andeq	r0, r0, fp, asr r0
    1530:	0000018e 	andeq	r0, r0, lr, lsl #3
    1534:	00018e0e 	andeq	r8, r1, lr, lsl #28
    1538:	04006300 	streq	r6, [r0], #-768	; 0xfffffd00
    153c:	04060704 	streq	r0, [r6], #-1796	; 0xfffff8fc
    1540:	430f0000 	movwmi	r0, #61440	; 0xf000
    1544:	0500000d 	streq	r0, [r0, #-13]
    1548:	00017e03 	andeq	r7, r1, r3, lsl #28
    154c:	7c030500 	cfstr32vc	mvfx0, [r3], {-0}
    1550:	0f200088 	svceq	0x00200088
    1554:	00000bae 	andeq	r0, r0, lr, lsr #23
    1558:	017e0306 	cmneq	lr, r6, lsl #6
    155c:	03050000 	movweq	r0, #20480	; 0x5000
    1560:	200088e0 	andcs	r8, r0, r0, ror #17
    1564:	000bf60f 	andeq	pc, fp, pc, lsl #12
    1568:	7e030700 	cdpvc	7, 0, cr0, cr3, cr0, {0}
    156c:	05000001 	streq	r0, [r0, #-1]
    1570:	00894403 	addeq	r4, r9, r3, lsl #8
    1574:	0b9d0f20 	bleq	fe7451fc <firstTime.4040+0xde736b40>
    1578:	03080000 	movweq	r0, #32768	; 0x8000
    157c:	0000017e 	andeq	r0, r0, lr, ror r1
    1580:	89a80305 	stmibhi	r8!, {r0, r2, r8, r9}
    1584:	1c0f2000 	stcne	0, cr2, [pc], {-0}
    1588:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    158c:	00017e03 	andeq	r7, r1, r3, lsl #28
    1590:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
    1594:	0f20008a 	svceq	0x0020008a
    1598:	00000df0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    159c:	017e030a 	cmneq	lr, sl, lsl #6
    15a0:	03050000 	movweq	r0, #20480	; 0x5000
    15a4:	20008a70 	andcs	r8, r0, r0, ror sl
    15a8:	000bc90f 	andeq	ip, fp, pc, lsl #18
    15ac:	7e030b00 	vmlavc.f64	d0, d3, d0
    15b0:	05000001 	streq	r0, [r0, #-1]
    15b4:	008ad403 	addeq	sp, sl, r3, lsl #8
    15b8:	0cb70f20 	ldceq	15, cr0, [r7], #128	; 0x80
    15bc:	030c0000 	movweq	r0, #49152	; 0xc000
    15c0:	0000017e 	andeq	r0, r0, lr, ror r1
    15c4:	8b380305 	blhi	e021e0 <startup-0x1f1fde20>
    15c8:	780f2000 	stmdavc	pc, {sp}	; <UNPREDICTABLE>
    15cc:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
    15d0:	00017e03 	andeq	r7, r1, r3, lsl #28
    15d4:	9c030500 	cfstr32ls	mvfx0, [r3], {-0}
    15d8:	0f20008b 	svceq	0x0020008b
    15dc:	00000bda 	ldrdeq	r0, [r0], -sl
    15e0:	017e030e 	cmneq	lr, lr, lsl #6
    15e4:	03050000 	movweq	r0, #20480	; 0x5000
    15e8:	20008c00 	andcs	r8, r0, r0, lsl #24
    15ec:	000c5e0f 	andeq	r5, ip, pc, lsl #28
    15f0:	7e030f00 	cdpvc	15, 0, cr0, cr3, cr0, {0}
    15f4:	05000001 	streq	r0, [r0, #-1]
    15f8:	008c6403 	addeq	r6, ip, r3, lsl #8
    15fc:	0a940f20 	beq	fe505284 <firstTime.4040+0xde4f6bc8>
    1600:	03100000 	tsteq	r0, #0
    1604:	0000017e 	andeq	r0, r0, lr, ror r1
    1608:	8cc80305 	stclhi	3, cr0, [r8], {5}
    160c:	070f2000 	streq	r2, [pc, -r0]
    1610:	1100000c 	tstne	r0, ip
    1614:	00017e03 	andeq	r7, r1, r3, lsl #28
    1618:	2c030500 	cfstr32cs	mvfx0, [r3], {-0}
    161c:	0f20008d 	svceq	0x0020008d
    1620:	00000c27 	andeq	r0, r0, r7, lsr #24
    1624:	017e0312 	cmneq	lr, r2, lsl r3
    1628:	03050000 	movweq	r0, #20480	; 0x5000
    162c:	20008d90 	mulcs	r0, r0, sp
    1630:	000abe0f 	andeq	fp, sl, pc, lsl #28
    1634:	7e031300 	cdpvc	3, 0, cr1, cr3, cr0, {0}
    1638:	05000001 	streq	r0, [r0, #-1]
    163c:	008df403 	addeq	pc, sp, r3, lsl #8
    1640:	0cc71020 	stcleq	0, cr1, [r7], {32}
    1644:	15010000 	strne	r0, [r1, #-0]
    1648:	0000009e 	muleq	r0, lr, r0
    164c:	4c200305 	stcmi	3, cr0, [r0], #-20	; 0xffffffec
    1650:	fa102000 	blx	409658 <startup-0x1fbf69a8>
    1654:	0100000a 	tsteq	r0, sl
    1658:	00009e16 	andeq	r9, r0, r6, lsl lr
    165c:	b8030500 	stmdalt	r3, {r8, sl}
    1660:	1020004b 	eorne	r0, r0, fp, asr #32
    1664:	00000ae4 	andeq	r0, r0, r4, ror #21
    1668:	009e1701 	addseq	r1, lr, r1, lsl #14
    166c:	03050000 	movweq	r0, #20480	; 0x5000
    1670:	20004cb0 			; <UNDEFINED> instruction: 0x20004cb0
    1674:	000b3c10 	andeq	r3, fp, r0, lsl ip
    1678:	9e180100 	muflse	f0, f0, f0
    167c:	05000000 	streq	r0, [r0, #-0]
    1680:	004c1c03 	subeq	r1, ip, r3, lsl #24
    1684:	0c371020 	ldceq	0, cr1, [r7], #-128	; 0xffffff80
    1688:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    168c:	0000009e 	muleq	r0, lr, r0
    1690:	4ca00305 	stcmi	3, cr0, [r0], #20
    1694:	d2102000 	andsle	r2, r0, #0
    1698:	0100000c 	tsteq	r0, ip
    169c:	00009e1a 	andeq	r9, r0, sl, lsl lr
    16a0:	54030500 	strpl	r0, [r3], #-1280	; 0xfffffb00
    16a4:	1020004d 	eorne	r0, r0, sp, asr #32
    16a8:	00000aef 	andeq	r0, r0, pc, ror #21
    16ac:	009e1b01 	addseq	r1, lr, r1, lsl #22
    16b0:	03050000 	movweq	r0, #20480	; 0x5000
    16b4:	20004c14 	andcs	r4, r0, r4, lsl ip
    16b8:	000d5f10 	andeq	r5, sp, r0, lsl pc
    16bc:	9e1c0100 	muflse	f0, f4, f0
    16c0:	05000000 	streq	r0, [r0, #-0]
    16c4:	004c3c03 	subeq	r3, ip, r3, lsl #24
    16c8:	0acf1020 	beq	ff3c5750 <firstTime.4040+0xdf3b7094>
    16cc:	1d010000 	stcne	0, cr0, [r1, #-0]
    16d0:	0000009e 	muleq	r0, lr, r0
    16d4:	4c680305 	stclmi	3, cr0, [r8], #-20	; 0xffffffec
    16d8:	9d102000 	ldcls	0, cr2, [r0, #-0]
    16dc:	0100000c 	tsteq	r0, ip
    16e0:	00009e1e 	andeq	r9, r0, lr, lsl lr
    16e4:	38030500 	stmdacc	r3, {r8, sl}
    16e8:	1020004d 	eorne	r0, r0, sp, asr #32
    16ec:	00000b32 	andeq	r0, r0, r2, lsr fp
    16f0:	009e1f01 	addseq	r1, lr, r1, lsl #30
    16f4:	03050000 	movweq	r0, #20480	; 0x5000
    16f8:	20004c18 	andcs	r4, r0, r8, lsl ip
    16fc:	000da710 	andeq	sl, sp, r0, lsl r7
    1700:	9e200100 	suflss	f0, f0, f0
    1704:	05000000 	streq	r0, [r0, #-0]
    1708:	004bb403 	subeq	fp, fp, r3, lsl #8
    170c:	0b131020 	bleq	4c5794 <startup-0x1fb3a86c>
    1710:	21010000 	mrscs	r0, (UNDEF: 1)
    1714:	0000009e 	muleq	r0, lr, r0
    1718:	4bc80305 	blmi	ff202334 <firstTime.4040+0xdf1f3c78>
    171c:	39102000 	ldmdbcc	r0, {sp}
    1720:	0100000d 	tsteq	r0, sp
    1724:	00009e22 	andeq	r9, r0, r2, lsr #28
    1728:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
    172c:	1020004c 	eorne	r0, r0, ip, asr #32
    1730:	00000c78 	andeq	r0, r0, r8, ror ip
    1734:	009e2301 	addseq	r2, lr, r1, lsl #6
    1738:	03050000 	movweq	r0, #20480	; 0x5000
    173c:	20004c90 	mulcs	r0, r0, ip
    1740:	000d7610 	andeq	r7, sp, r0, lsl r6
    1744:	62250100 	eorvs	r0, r5, #0, 2
    1748:	05000000 	streq	r0, [r0, #-0]
    174c:	004c3003 	subeq	r3, ip, r3
    1750:	0b771020 	bleq	1dc57d8 <startup-0x1e23a828>
    1754:	26010000 	strcs	r0, [r1], -r0
    1758:	00000062 	andeq	r0, r0, r2, rrx
    175c:	4ca40305 	stcmi	3, cr0, [r4], #20
    1760:	2c102000 	ldccs	0, cr2, [r0], {-0}
    1764:	0100000d 	tsteq	r0, sp
    1768:	00006227 	andeq	r6, r0, r7, lsr #4
    176c:	40030500 	andmi	r0, r3, r0, lsl #10
    1770:	1020004c 	eorne	r0, r0, ip, asr #32
    1774:	00000ca8 	andeq	r0, r0, r8, lsr #25
    1778:	00622801 	rsbeq	r2, r2, r1, lsl #16
    177c:	03050000 	movweq	r0, #20480	; 0x5000
    1780:	20004d3c 	andcs	r4, r0, ip, lsr sp
    1784:	000a6910 	andeq	r6, sl, r0, lsl r9
    1788:	62290100 	eorvs	r0, r9, #0, 2
    178c:	05000000 	streq	r0, [r0, #-0]
    1790:	004cb403 	subeq	fp, ip, r3, lsl #8
    1794:	0b5b1020 	bleq	16c581c <startup-0x1e93a7e4>
    1798:	2a010000 	bcs	417a0 <startup-0x1ffbe860>
    179c:	00000062 	andeq	r0, r0, r2, rrx
    17a0:	4c5c0305 	mrrcmi	3, 0, r0, ip, cr5
    17a4:	84102000 	ldrhi	r2, [r0], #-0
    17a8:	0100000d 	tsteq	r0, sp
    17ac:	0000622b 	andeq	r6, r0, fp, lsr #4
    17b0:	94030500 	strls	r0, [r3], #-1280	; 0xfffffb00
    17b4:	1020004c 	eorne	r0, r0, ip, asr #32
    17b8:	00000c18 	andeq	r0, r0, r8, lsl ip
    17bc:	00622c01 	rsbeq	r2, r2, r1, lsl #24
    17c0:	03050000 	movweq	r0, #20480	; 0x5000
    17c4:	20004cd8 	ldrdcs	r4, [r0], -r8
    17c8:	000c5010 	andeq	r5, ip, r0, lsl r0
    17cc:	622d0100 	eorvs	r0, sp, #0, 2
    17d0:	05000000 	streq	r0, [r0, #-0]
    17d4:	004ce403 	subeq	lr, ip, r3, lsl #8
    17d8:	0b041020 	bleq	105860 <startup-0x1fefa7a0>
    17dc:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    17e0:	00000062 	andeq	r0, r0, r2, rrx
    17e4:	4bcc0305 	blmi	ff302400 <firstTime.4040+0xdf2f3d44>
    17e8:	41102000 	tstmi	r0, r0
    17ec:	0100000c 	tsteq	r0, ip
    17f0:	0000622f 	andeq	r6, r0, pc, lsr #4
    17f4:	cc030500 	cfstr32gt	mvfx0, [r3], {-0}
    17f8:	1020004c 	eorne	r0, r0, ip, asr #32
    17fc:	00000b69 	andeq	r0, r0, r9, ror #22
    1800:	00623001 	rsbeq	r3, r2, r1
    1804:	03050000 	movweq	r0, #20480	; 0x5000
    1808:	20004d48 	andcs	r4, r0, r8, asr #26
    180c:	000c8e10 	andeq	r8, ip, r0, lsl lr
    1810:	62310100 	eorsvs	r0, r1, #0, 2
    1814:	05000000 	streq	r0, [r0, #-0]
    1818:	004c7803 	subeq	r7, ip, r3, lsl #16
    181c:	0aa51020 	beq	fe9458a4 <firstTime.4040+0xde9371e8>
    1820:	32010000 	andcc	r0, r1, #0
    1824:	00000062 	andeq	r0, r0, r2, rrx
    1828:	4c500305 	mrrcmi	3, 0, r0, r0, cr5	; <UNPREDICTABLE>
    182c:	85102000 	ldrhi	r2, [r0, #-0]
    1830:	0100000b 	tsteq	r0, fp
    1834:	00006233 	andeq	r6, r0, r3, lsr r2
    1838:	6c030500 	cfstr32vs	mvfx0, [r3], {-0}
    183c:	1020004c 	eorne	r0, r0, ip, asr #32
    1840:	00000d14 	andeq	r0, r0, r4, lsl sp
    1844:	014c3601 	cmpeq	ip, r1, lsl #12
    1848:	03050000 	movweq	r0, #20480	; 0x5000
    184c:	20004be4 	andcs	r4, r0, r4, ror #23
    1850:	000d5410 	andeq	r5, sp, r0, lsl r4
    1854:	a4370100 	ldrtge	r0, [r7], #-256	; 0xffffff00
    1858:	05000000 	streq	r0, [r0, #-0]
    185c:	004c0803 	subeq	r0, ip, r3, lsl #16
    1860:	0ddb1020 	ldcleq	0, cr1, [fp, #128]	; 0x80
    1864:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    1868:	000000a4 	andeq	r0, r0, r4, lsr #1
    186c:	4bd80305 	blmi	ff602488 <firstTime.4040+0xdf5f3dcc>
    1870:	eb102000 	bl	409878 <startup-0x1fbf6788>
    1874:	0100000b 	tsteq	r0, fp
    1878:	0000a439 	andeq	sl, r0, r9, lsr r4
    187c:	c0030500 	andgt	r0, r3, r0, lsl #10
    1880:	1020004c 	eorne	r0, r0, ip, asr #32
    1884:	00000a89 	andeq	r0, r0, r9, lsl #21
    1888:	00a43a01 	adceq	r3, r4, r1, lsl #20
    188c:	03050000 	movweq	r0, #20480	; 0x5000
    1890:	20004c24 	andcs	r4, r0, r4, lsr #24
    1894:	000db210 	andeq	fp, sp, r0, lsl r2
    1898:	a43b0100 	ldrtge	r0, [fp], #-256	; 0xffffff00
    189c:	05000000 	streq	r0, [r0, #-0]
    18a0:	004c8403 	subeq	r8, ip, r3, lsl #8
    18a4:	0bbe1020 	bleq	fef8592c <firstTime.4040+0xdef77270>
    18a8:	3c010000 	stccc	0, cr0, [r1], {-0}
    18ac:	000000a4 	andeq	r0, r0, r4, lsr #1
    18b0:	4bbc0305 	blmi	fef024cc <firstTime.4040+0xdeef3e10>
    18b4:	a40b2000 	strge	r2, [fp], #-0
    18b8:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    18bc:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
    18c0:	0000018e 	andeq	r0, r0, lr, lsl #3
    18c4:	83100005 	tsthi	r0, #5
    18c8:	0100000c 	tsteq	r0, ip
    18cc:	0005093f 	andeq	r0, r5, pc, lsr r9
    18d0:	f0030500 			; <UNDEFINED> instruction: 0xf0030500
    18d4:	1120004c 			; <UNDEFINED> instruction: 0x1120004c
    18d8:	00000d0a 	andeq	r0, r0, sl, lsl #26
    18dc:	1f9c7601 	svcne	0x009c7601
    18e0:	01582000 	cmpeq	r8, r0
    18e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    18e8:	0000055f 	andeq	r0, r0, pc, asr r5
    18ec:	000d1412 	andeq	r1, sp, r2, lsl r4
    18f0:	62760100 	rsbsvs	r0, r6, #0, 2
    18f4:	02000001 	andeq	r0, r0, #1
    18f8:	fe0f6c91 	mcr2	12, 0, r6, cr15, cr1, {4}
    18fc:	01000008 	tsteq	r0, r8
    1900:	00012e77 	andeq	r2, r1, r7, ror lr
    1904:	58030500 	stmdapl	r3, {r8, sl}
    1908:	0020008e 	eoreq	r0, r0, lr, lsl #1
    190c:	00049e13 	andeq	r9, r4, r3, lsl lr
    1910:	90400100 	subls	r0, r0, r0, lsl #2
    1914:	0c20001d 	stceq	0, cr0, [r0], #-116	; 0xffffff8c
    1918:	01000002 	tsteq	r0, r2
    191c:	0d930f9c 	ldceq	15, cr0, [r3, #624]	; 0x270
    1920:	42010000 	andmi	r0, r1, #0
    1924:	0000009e 	muleq	r0, lr, r0
    1928:	0f749102 	svceq	0x00749102
    192c:	00000d9d 	muleq	r0, sp, sp
    1930:	009e4501 	addseq	r4, lr, r1, lsl #10
    1934:	91020000 	mrsls	r0, (UNDEF: 2)
    1938:	0b930f70 	bleq	fe4c5700 <firstTime.4040+0xde4b7044>
    193c:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    1940:	0000009e 	muleq	r0, lr, r0
    1944:	0f6c9102 	svceq	0x006c9102
    1948:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
    194c:	009e4c01 	addseq	r4, lr, r1, lsl #24
    1950:	91020000 	mrsls	r0, (UNDEF: 2)
    1954:	0dbd0f68 	ldceq	15, cr0, [sp, #416]!	; 0x1a0
    1958:	4f010000 	svcmi	0x00010000
    195c:	0000009e 	muleq	r0, lr, r0
    1960:	0f649102 	svceq	0x00649102
    1964:	00000b51 	andeq	r0, r0, r1, asr fp
    1968:	009e5201 	addseq	r5, lr, r1, lsl #4
    196c:	91020000 	mrsls	r0, (UNDEF: 2)
    1970:	0d690f60 	stcleq	15, cr0, [r9, #-384]!	; 0xfffffe80
    1974:	57010000 	strpl	r0, [r1, -r0]
    1978:	0000009e 	muleq	r0, lr, r0
    197c:	0f5c9102 	svceq	0x005c9102
    1980:	00000dc7 	andeq	r0, r0, r7, asr #27
    1984:	009e5a01 	addseq	r5, lr, r1, lsl #20
    1988:	91020000 	mrsls	r0, (UNDEF: 2)
    198c:	0dd10f58 	ldcleq	15, cr0, [r1, #352]	; 0x160
    1990:	5d010000 	stcpl	0, cr0, [r1, #-0]
    1994:	0000009e 	muleq	r0, lr, r0
    1998:	0f549102 	svceq	0x00549102
    199c:	00000ada 	ldrdeq	r0, [r0], -sl
    19a0:	009e6101 	addseq	r6, lr, r1, lsl #2
    19a4:	91020000 	mrsls	r0, (UNDEF: 2)
    19a8:	0b1e0f50 	bleq	7856f0 <startup-0x1f87a910>
    19ac:	64010000 	strvs	r0, [r1], #-0
    19b0:	0000009e 	muleq	r0, lr, r0
    19b4:	0f4c9102 	svceq	0x004c9102
    19b8:	00000b28 	andeq	r0, r0, r8, lsr #22
    19bc:	009e6701 	addseq	r6, lr, r1, lsl #14
    19c0:	91020000 	mrsls	r0, (UNDEF: 2)
    19c4:	0de60f48 	stcleq	15, cr0, [r6, #288]!	; 0x120
    19c8:	6b010000 	blvs	419d0 <startup-0x1ffbe630>
    19cc:	0000009e 	muleq	r0, lr, r0
    19d0:	0f449102 	svceq	0x00449102
    19d4:	00000c6e 	andeq	r0, r0, lr, ror #24
    19d8:	009e6e01 	addseq	r6, lr, r1, lsl #28
    19dc:	91020000 	mrsls	r0, (UNDEF: 2)
    19e0:	0b470f40 	bleq	11c56e8 <startup-0x1ee3a918>
    19e4:	71010000 	mrsvc	r0, (UNDEF: 1)
    19e8:	0000009e 	muleq	r0, lr, r0
    19ec:	7fbc9103 	svcvc	0x00bc9103
    19f0:	04980000 	ldreq	r0, [r8], #0
    19f4:	00040000 	andeq	r0, r4, r0
    19f8:	00000552 	andeq	r0, r0, r2, asr r5
    19fc:	009f0104 	addseq	r0, pc, r4, lsl #2
    1a00:	b40c0000 	strlt	r0, [ip], #-0
    1a04:	f400000f 	vst4.8	{d0-d3}, [r0]
    1a08:	38200020 	stmdacc	r0!, {r5}
    1a0c:	b0000002 	andlt	r0, r0, r2
    1a10:	02000008 	andeq	r0, r0, #8
    1a14:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
    1a18:	03000000 	movweq	r0, #0
    1a1c:	0000035b 	andeq	r0, r0, fp, asr r3
    1a20:	004e0702 	subeq	r0, lr, r2, lsl #14
    1a24:	03000000 	movweq	r0, #0
    1a28:	0000070e 	andeq	r0, r0, lr, lsl #14
    1a2c:	004e0802 	subeq	r0, lr, r2, lsl #16
    1a30:	03040000 	movweq	r0, #16384	; 0x4000
    1a34:	0000190d 	andeq	r1, r0, sp, lsl #18
    1a38:	00550902 	subseq	r0, r5, r2, lsl #18
    1a3c:	00080000 	andeq	r0, r8, r0
    1a40:	89070404 	stmdbhi	r7, {r2, sl}
    1a44:	05000003 	streq	r0, [r0, #-3]
    1a48:	00005b04 	andeq	r5, r0, r4, lsl #22
    1a4c:	08010400 	stmdaeq	r1, {sl}
    1a50:	000004c8 	andeq	r0, r0, r8, asr #9
    1a54:	001a5f06 	andseq	r5, sl, r6, lsl #30
    1a58:	210a0200 	mrscs	r0, R10_fiq
    1a5c:	07000000 	streq	r0, [r0, -r0]
    1a60:	00000034 	andeq	r0, r0, r4, lsr r0
    1a64:	9e06030c 	cdpls	3, 0, cr0, cr6, cr12, {0}
    1a68:	03000000 	movweq	r0, #0
    1a6c:	000005be 			; <UNDEFINED> instruction: 0x000005be
    1a70:	009e0703 	addseq	r0, lr, r3, lsl #14
    1a74:	03000000 	movweq	r0, #0
    1a78:	0000003b 	andeq	r0, r0, fp, lsr r0
    1a7c:	009e0803 	addseq	r0, lr, r3, lsl #16
    1a80:	03040000 	movweq	r0, #16384	; 0x4000
    1a84:	00000030 	andeq	r0, r0, r0, lsr r0
    1a88:	009e0903 	addseq	r0, lr, r3, lsl #18
    1a8c:	00080000 	andeq	r0, r8, r0
    1a90:	00620405 	rsbeq	r0, r2, r5, lsl #8
    1a94:	1d060000 	stcne	0, cr0, [r6, #-0]
    1a98:	03000016 	movweq	r0, #22
    1a9c:	00006d0a 	andeq	r6, r0, sl, lsl #26
    1aa0:	06d30700 	ldrbeq	r0, [r3], r0, lsl #14
    1aa4:	04240000 	strteq	r0, [r4], #-0
    1aa8:	00012806 	andeq	r2, r1, r6, lsl #16
    1aac:	04560300 	ldrbeq	r0, [r6], #-768	; 0xfffffd00
    1ab0:	07040000 	streq	r0, [r4, -r0]
    1ab4:	00000128 	andeq	r0, r0, r8, lsr #2
    1ab8:	06df0300 	ldrbeq	r0, [pc], r0, lsl #6
    1abc:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    1ac0:	0000012e 	andeq	r0, r0, lr, lsr #2
    1ac4:	062f0304 	strteq	r0, [pc], -r4, lsl #6
    1ac8:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    1acc:	0000012e 	andeq	r0, r0, lr, lsr #2
    1ad0:	065b0308 	ldrbeq	r0, [fp], -r8, lsl #6
    1ad4:	0c040000 	stceq	0, cr0, [r4], {-0}
    1ad8:	00000146 	andeq	r0, r0, r6, asr #2
    1adc:	0342030c 	movteq	r0, #8972	; 0x230c
    1ae0:	0d040000 	stceq	0, cr0, [r4, #-0]
    1ae4:	00000146 	andeq	r0, r0, r6, asr #2
    1ae8:	04680310 	strbteq	r0, [r8], #-784	; 0xfffffcf0
    1aec:	10040000 	andne	r0, r4, r0
    1af0:	0000012e 	andeq	r0, r0, lr, lsr #2
    1af4:	00700314 	rsbseq	r0, r0, r4, lsl r3
    1af8:	11040000 	mrsne	r0, (UNDEF: 4)
    1afc:	0000012e 	andeq	r0, r0, lr, lsr #2
    1b00:	03d90318 	bicseq	r0, r9, #24, 6	; 0x60000000
    1b04:	12040000 	andne	r0, r4, #0
    1b08:	0000012e 	andeq	r0, r0, lr, lsr #2
    1b0c:	03e9031c 	mvneq	r0, #28, 6	; 0x70000000
    1b10:	13040000 	movwne	r0, #16384	; 0x4000
    1b14:	0000012e 	andeq	r0, r0, lr, lsr #2
    1b18:	04050020 	streq	r0, [r5], #-32	; 0xffffffe0
    1b1c:	000000a4 	andeq	r0, r0, r4, lsr #1
    1b20:	69050408 	stmdbvs	r5, {r3, sl}
    1b24:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1b28:	00000140 	andeq	r0, r0, r0, asr #2
    1b2c:	0001400a 	andeq	r4, r1, sl
    1b30:	04050000 	streq	r0, [r5], #-0
    1b34:	000000af 	andeq	r0, r0, pc, lsr #1
    1b38:	01350405 	teqeq	r5, r5, lsl #8
    1b3c:	d4060000 	strle	r0, [r6], #-0
    1b40:	04000006 	streq	r0, [r0], #-6
    1b44:	0000af15 	andeq	sl, r0, r5, lsl pc
    1b48:	01620b00 	cmneq	r2, r0, lsl #22
    1b4c:	01620000 	cmneq	r2, r0
    1b50:	000c0000 	andeq	r0, ip, r0
    1b54:	014c0405 	cmpeq	ip, r5, lsl #8
    1b58:	4b0d0000 	blmi	341b60 <startup-0x1fcbe4a0>
    1b5c:	04000005 	streq	r0, [r0], #-5
    1b60:	0001571c 	andeq	r5, r1, ip, lsl r7
    1b64:	04240d00 	strteq	r0, [r4], #-3328	; 0xfffff300
    1b68:	1d040000 	stcne	0, cr0, [r4, #-0]
    1b6c:	0000012e 	andeq	r0, r0, lr, lsr #2
    1b70:	00005b0b 	andeq	r5, r0, fp, lsl #22
    1b74:	00018e00 	andeq	r8, r1, r0, lsl #28
    1b78:	018e0e00 	orreq	r0, lr, r0, lsl #28
    1b7c:	00350000 	eorseq	r0, r5, r0
    1b80:	06070404 	streq	r0, [r7], -r4, lsl #8
    1b84:	0f000004 	svceq	0x00000004
    1b88:	00000e30 	andeq	r0, r0, r0, lsr lr
    1b8c:	017e0305 	cmneq	lr, r5, lsl #6
    1b90:	03050000 	movweq	r0, #20480	; 0x5000
    1b94:	20008e5c 	andcs	r8, r0, ip, asr lr
    1b98:	000fe20f 	andeq	lr, pc, pc, lsl #4
    1b9c:	7e030600 	cfmadd32vc	mvax0, mvfx0, mvfx3, mvfx0
    1ba0:	05000001 	streq	r0, [r0, #-1]
    1ba4:	008e9403 	addeq	r9, lr, r3, lsl #8
    1ba8:	0f3a0f20 	svceq	0x003a0f20
    1bac:	03070000 	movweq	r0, #28672	; 0x7000
    1bb0:	0000017e 	andeq	r0, r0, lr, ror r1
    1bb4:	8ecc0305 	cdphi	3, 12, cr0, cr12, cr5, {0}
    1bb8:	d30f2000 	movwle	r2, #61440	; 0xf000
    1bbc:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    1bc0:	00017e03 	andeq	r7, r1, r3, lsl #28
    1bc4:	04030500 	streq	r0, [r3], #-1280	; 0xfffffb00
    1bc8:	0f20008f 	svceq	0x0020008f
    1bcc:	00000f4c 	andeq	r0, r0, ip, asr #30
    1bd0:	017e0309 	cmneq	lr, r9, lsl #6
    1bd4:	03050000 	movweq	r0, #20480	; 0x5000
    1bd8:	20008f3c 	andcs	r8, r0, ip, lsr pc
    1bdc:	000e7e0f 	andeq	r7, lr, pc, lsl #28
    1be0:	7e030a00 	vmlavc.f32	s0, s6, s0
    1be4:	05000001 	streq	r0, [r0, #-1]
    1be8:	008f7403 	addeq	r7, pc, r3, lsl #8
    1bec:	0ff30f20 	svceq	0x00f30f20
    1bf0:	030b0000 	movweq	r0, #45056	; 0xb000
    1bf4:	0000017e 	andeq	r0, r0, lr, ror r1
    1bf8:	8fac0305 	svchi	0x00ac0305
    1bfc:	a80f2000 	stmdage	pc, {sp}	; <UNPREDICTABLE>
    1c00:	0c00000e 	stceq	0, cr0, [r0], {14}
    1c04:	00017e03 	andeq	r7, r1, r3, lsl #28
    1c08:	e4030500 	str	r0, [r3], #-1280	; 0xfffffb00
    1c0c:	0f20008f 	svceq	0x0020008f
    1c10:	00000ee5 	andeq	r0, r0, r5, ror #29
    1c14:	017e030d 	cmneq	lr, sp, lsl #6
    1c18:	03050000 	movweq	r0, #20480	; 0x5000
    1c1c:	2000901c 	andcs	r9, r0, ip, lsl r0
    1c20:	000f8110 	andeq	r8, pc, r0, lsl r1	; <UNPREDICTABLE>
    1c24:	9e0e0100 	adflse	f0, f6, f0
    1c28:	05000000 	streq	r0, [r0, #-0]
    1c2c:	004e2c03 	subeq	r2, lr, r3, lsl #24
    1c30:	0e0d1020 	cdpeq	0, 0, cr1, cr13, cr0, {1}
    1c34:	0f010000 	svceq	0x00010000
    1c38:	0000009e 	muleq	r0, lr, r0
    1c3c:	4d580305 	ldclmi	3, cr0, [r8, #-20]	; 0xffffffec
    1c40:	62102000 	andsvs	r2, r0, #0
    1c44:	0100000e 	tsteq	r0, lr
    1c48:	00009e10 	andeq	r9, r0, r0, lsl lr
    1c4c:	58030500 	stmdapl	r3, {r8, sl}
    1c50:	1020004e 	eorne	r0, r0, lr, asr #32
    1c54:	00000e01 	andeq	r0, r0, r1, lsl #28
    1c58:	009e1101 	addseq	r1, lr, r1, lsl #2
    1c5c:	03050000 	movweq	r0, #20480	; 0x5000
    1c60:	20004e68 	andcs	r4, r0, r8, ror #28
    1c64:	000f0210 	andeq	r0, pc, r0, lsl r2	; <UNPREDICTABLE>
    1c68:	9e120100 	muflss	f0, f2, f0
    1c6c:	05000000 	streq	r0, [r0, #-0]
    1c70:	004dcc03 	subeq	ip, sp, r3, lsl #24
    1c74:	0f691020 	svceq	0x00691020
    1c78:	13010000 	movwne	r0, #4096	; 0x1000
    1c7c:	0000009e 	muleq	r0, lr, r0
    1c80:	4d5c0305 	ldclmi	3, cr0, [ip, #-20]	; 0xffffffec
    1c84:	9c102000 	ldcls	0, cr2, [r0], {-0}
    1c88:	0100000e 	tsteq	r0, lr
    1c8c:	00009e14 	andeq	r9, r0, r4, lsl lr
    1c90:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
    1c94:	1020004d 	eorne	r0, r0, sp, asr #32
    1c98:	00000ef7 	strdeq	r0, [r0], -r7
    1c9c:	009e1501 	addseq	r1, lr, r1, lsl #10
    1ca0:	03050000 	movweq	r0, #20480	; 0x5000
    1ca4:	20004e30 	andcs	r4, r0, r0, lsr lr
    1ca8:	000f8d10 	andeq	r8, pc, r0, lsl sp	; <UNPREDICTABLE>
    1cac:	9e160100 	muflss	f0, f6, f0
    1cb0:	05000000 	streq	r0, [r0, #-0]
    1cb4:	004e1c03 	subeq	r1, lr, r3, lsl #24
    1cb8:	0ec41020 	cdpeq	0, 12, cr1, cr4, cr0, {1}
    1cbc:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    1cc0:	00000062 	andeq	r0, r0, r2, rrx
    1cc4:	4da80305 	stcmi	3, cr0, [r8, #20]!
    1cc8:	18102000 	ldmdane	r0, {sp}
    1ccc:	0100000e 	tsteq	r0, lr
    1cd0:	00006219 	andeq	r6, r0, r9, lsl r2
    1cd4:	40030500 	andmi	r0, r3, r0, lsl #10
    1cd8:	1020004e 	eorne	r0, r0, lr, asr #32
    1cdc:	00000f0d 	andeq	r0, r0, sp, lsl #30
    1ce0:	00621a01 	rsbeq	r1, r2, r1, lsl #20
    1ce4:	03050000 	movweq	r0, #20480	; 0x5000
    1ce8:	20004dd0 	ldrdcs	r4, [r0], -r0
    1cec:	000e6e10 	andeq	r6, lr, r0, lsl lr
    1cf0:	621b0100 	andsvs	r0, fp, #0, 2
    1cf4:	05000000 	streq	r0, [r0, #-0]
    1cf8:	004d9c03 	subeq	r9, sp, r3, lsl #24
    1cfc:	0e521020 	cdpeq	0, 5, cr1, cr2, cr0, {1}
    1d00:	1c010000 	stcne	0, cr0, [r1], {-0}
    1d04:	00000062 	andeq	r0, r0, r2, rrx
    1d08:	4e4c0305 	cdpmi	3, 4, cr0, cr12, cr5, {0}
    1d0c:	1b102000 	blne	409d14 <startup-0x1fbf62ec>
    1d10:	0100000f 	tsteq	r0, pc
    1d14:	0000621d 	andeq	r6, r0, sp, lsl r2
    1d18:	e8030500 	stmda	r3, {r8, sl}
    1d1c:	1020004d 	eorne	r0, r0, sp, asr #32
    1d20:	00000f2a 	andeq	r0, r0, sl, lsr #30
    1d24:	00621e01 	rsbeq	r1, r2, r1, lsl #28
    1d28:	03050000 	movweq	r0, #20480	; 0x5000
    1d2c:	20004ddc 	ldrdcs	r4, [r0], -ip
    1d30:	000e4210 	andeq	r4, lr, r0, lsl r2
    1d34:	621f0100 	andsvs	r0, pc, #0, 2
    1d38:	05000000 	streq	r0, [r0, #-0]
    1d3c:	004db403 	subeq	fp, sp, r3, lsl #8
    1d40:	0fa51020 	svceq	0x00a51020
    1d44:	20010000 	andcs	r0, r1, r0
    1d48:	00000062 	andeq	r0, r0, r2, rrx
    1d4c:	4e200305 	cdpmi	3, 2, cr0, cr0, cr5, {0}
    1d50:	27102000 	ldrcs	r2, [r0, -r0]
    1d54:	0100000e 	tsteq	r0, lr
    1d58:	00014c23 	andeq	r4, r1, r3, lsr #24
    1d5c:	f8030500 			; <UNDEFINED> instruction: 0xf8030500
    1d60:	1020004d 	eorne	r0, r0, sp, asr #32
    1d64:	00000f75 	andeq	r0, r0, r5, ror pc
    1d68:	00a42401 	adceq	r2, r4, r1, lsl #8
    1d6c:	03050000 	movweq	r0, #20480	; 0x5000
    1d70:	20004e34 	andcs	r4, r0, r4, lsr lr
    1d74:	00100510 	andseq	r0, r0, r0, lsl r5
    1d78:	a4250100 	strtge	r0, [r5], #-256	; 0xffffff00
    1d7c:	05000000 	streq	r0, [r0, #-0]
    1d80:	004d9003 	subeq	r9, sp, r3
    1d84:	0e901020 	cdpeq	0, 9, cr1, cr0, cr0, {1}
    1d88:	26010000 	strcs	r0, [r1], -r0
    1d8c:	000000a4 	andeq	r0, r0, r4, lsr #1
    1d90:	4e5c0305 	cdpmi	3, 5, cr0, cr12, cr5, {0}
    1d94:	5d102000 	ldcpl	0, cr2, [r0, #-0]
    1d98:	0100000f 	tsteq	r0, pc
    1d9c:	0000a427 	andeq	sl, r0, r7, lsr #8
    1da0:	c0030500 	andgt	r0, r3, r0, lsl #10
    1da4:	0b20004d 	bleq	801ee0 <startup-0x1f7fe120>
    1da8:	000000a4 	andeq	r0, r0, r4, lsr #1
    1dac:	000003c5 	andeq	r0, r0, r5, asr #7
    1db0:	00018e0e 	andeq	r8, r1, lr, lsl #28
    1db4:	10000300 	andne	r0, r0, r0, lsl #6
    1db8:	00000f99 	muleq	r0, r9, pc	; <UNPREDICTABLE>
    1dbc:	03b52801 			; <UNDEFINED> instruction: 0x03b52801
    1dc0:	03050000 	movweq	r0, #20480	; 0x5000
    1dc4:	20004d60 	andcs	r4, r0, r0, ror #26
    1dc8:	000eb911 	andeq	fp, lr, r1, lsl r9
    1dcc:	344c0100 	strbcc	r0, [ip], #-256	; 0xffffff00
    1dd0:	f8200022 			; <UNDEFINED> instruction: 0xf8200022
    1dd4:	01000000 	mrseq	r0, (UNDEF: 0)
    1dd8:	00040b9c 	muleq	r4, ip, fp
    1ddc:	0e271200 	cdpeq	2, 2, cr1, cr7, cr0, {0}
    1de0:	4c010000 	stcmi	0, cr0, [r1], {-0}
    1de4:	00000162 	andeq	r0, r0, r2, ror #2
    1de8:	0f6c9102 	svceq	0x006c9102
    1dec:	000008fe 	strdeq	r0, [r0], -lr
    1df0:	012e4d01 			; <UNDEFINED> instruction: 0x012e4d01
    1df4:	03050000 	movweq	r0, #20480	; 0x5000
    1df8:	20009054 	andcs	r9, r0, r4, asr r0
    1dfc:	049e1300 	ldreq	r1, [lr], #768	; 0x300
    1e00:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    1e04:	200020f4 	strdcs	r2, [r0], -r4
    1e08:	00000140 	andeq	r0, r0, r0, asr #2
    1e0c:	930f9c01 	movwls	r9, #64513	; 0xfc01
    1e10:	0100000d 	tsteq	r0, sp
    1e14:	00009e2b 	andeq	r9, r0, fp, lsr #28
    1e18:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1e1c:	000d9d0f 	andeq	r9, sp, pc, lsl #26
    1e20:	9e2e0100 	suflse	f0, f6, f0
    1e24:	02000000 	andeq	r0, r0, #0
    1e28:	930f7091 	movwls	r7, #61585	; 0xf091
    1e2c:	0100000b 	tsteq	r0, fp
    1e30:	00009e31 	andeq	r9, r0, r1, lsr lr
    1e34:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1e38:	000ab40f 	andeq	fp, sl, pc, lsl #8
    1e3c:	9e350100 	rsflss	f0, f5, f0
    1e40:	02000000 	andeq	r0, r0, #0
    1e44:	bd0f6891 	stclt	8, cr6, [pc, #-580]	; 1c08 <startup-0x1fffe3f8>
    1e48:	0100000d 	tsteq	r0, sp
    1e4c:	00009e38 	andeq	r9, r0, r8, lsr lr
    1e50:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1e54:	000b510f 	andeq	r5, fp, pc, lsl #2
    1e58:	9e3b0100 	rsflse	f0, f3, f0
    1e5c:	02000000 	andeq	r0, r0, #0
    1e60:	690f6091 	stmdbvs	pc, {r0, r4, r7, sp, lr}	; <UNPREDICTABLE>
    1e64:	0100000d 	tsteq	r0, sp
    1e68:	00009e40 	andeq	r9, r0, r0, asr #28
    1e6c:	5c910200 	lfmpl	f0, 4, [r1], {0}
    1e70:	000dc70f 	andeq	ip, sp, pc, lsl #14
    1e74:	9e430100 	dvflss	f0, f3, f0
    1e78:	02000000 	andeq	r0, r0, #0
    1e7c:	d10f5891 			; <UNDEFINED> instruction: 0xd10f5891
    1e80:	0100000d 	tsteq	r0, sp
    1e84:	00009e46 	andeq	r9, r0, r6, asr #28
    1e88:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    1e8c:	05460000 	strbeq	r0, [r6, #-0]
    1e90:	00040000 	andeq	r0, r4, r0
    1e94:	00000652 	andeq	r0, r0, r2, asr r6
    1e98:	009f0104 	addseq	r0, pc, r4, lsl #2
    1e9c:	f80c0000 			; <UNDEFINED> instruction: 0xf80c0000
    1ea0:	2c000010 	stccs	0, cr0, [r0], {16}
    1ea4:	70200023 	eorvc	r0, r0, r3, lsr #32
    1ea8:	15000003 	strne	r0, [r0, #-3]
    1eac:	0200000a 	andeq	r0, r0, #10
    1eb0:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
    1eb4:	03000000 	movweq	r0, #0
    1eb8:	0000035b 	andeq	r0, r0, fp, asr r3
    1ebc:	004e0702 	subeq	r0, lr, r2, lsl #14
    1ec0:	03000000 	movweq	r0, #0
    1ec4:	0000070e 	andeq	r0, r0, lr, lsl #14
    1ec8:	004e0802 	subeq	r0, lr, r2, lsl #16
    1ecc:	03040000 	movweq	r0, #16384	; 0x4000
    1ed0:	0000190d 	andeq	r1, r0, sp, lsl #18
    1ed4:	00550902 	subseq	r0, r5, r2, lsl #18
    1ed8:	00080000 	andeq	r0, r8, r0
    1edc:	89070404 	stmdbhi	r7, {r2, sl}
    1ee0:	05000003 	streq	r0, [r0, #-3]
    1ee4:	00005b04 	andeq	r5, r0, r4, lsl #22
    1ee8:	08010400 	stmdaeq	r1, {sl}
    1eec:	000004c8 	andeq	r0, r0, r8, asr #9
    1ef0:	001a5f06 	andseq	r5, sl, r6, lsl #30
    1ef4:	210a0200 	mrscs	r0, R10_fiq
    1ef8:	07000000 	streq	r0, [r0, -r0]
    1efc:	00000034 	andeq	r0, r0, r4, lsr r0
    1f00:	9e06030c 	cdpls	3, 0, cr0, cr6, cr12, {0}
    1f04:	03000000 	movweq	r0, #0
    1f08:	000005be 			; <UNDEFINED> instruction: 0x000005be
    1f0c:	009e0703 	addseq	r0, lr, r3, lsl #14
    1f10:	03000000 	movweq	r0, #0
    1f14:	0000003b 	andeq	r0, r0, fp, lsr r0
    1f18:	009e0803 	addseq	r0, lr, r3, lsl #16
    1f1c:	03040000 	movweq	r0, #16384	; 0x4000
    1f20:	00000030 	andeq	r0, r0, r0, lsr r0
    1f24:	009e0903 	addseq	r0, lr, r3, lsl #18
    1f28:	00080000 	andeq	r0, r8, r0
    1f2c:	00620405 	rsbeq	r0, r2, r5, lsl #8
    1f30:	1d060000 	stcne	0, cr0, [r6, #-0]
    1f34:	03000016 	movweq	r0, #22
    1f38:	00006d0a 	andeq	r6, r0, sl, lsl #26
    1f3c:	06d30700 	ldrbeq	r0, [r3], r0, lsl #14
    1f40:	04240000 	strteq	r0, [r4], #-0
    1f44:	00012806 	andeq	r2, r1, r6, lsl #16
    1f48:	04560300 	ldrbeq	r0, [r6], #-768	; 0xfffffd00
    1f4c:	07040000 	streq	r0, [r4, -r0]
    1f50:	00000128 	andeq	r0, r0, r8, lsr #2
    1f54:	06df0300 	ldrbeq	r0, [pc], r0, lsl #6
    1f58:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    1f5c:	0000012e 	andeq	r0, r0, lr, lsr #2
    1f60:	062f0304 	strteq	r0, [pc], -r4, lsl #6
    1f64:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    1f68:	0000012e 	andeq	r0, r0, lr, lsr #2
    1f6c:	065b0308 	ldrbeq	r0, [fp], -r8, lsl #6
    1f70:	0c040000 	stceq	0, cr0, [r4], {-0}
    1f74:	00000146 	andeq	r0, r0, r6, asr #2
    1f78:	0342030c 	movteq	r0, #8972	; 0x230c
    1f7c:	0d040000 	stceq	0, cr0, [r4, #-0]
    1f80:	00000146 	andeq	r0, r0, r6, asr #2
    1f84:	04680310 	strbteq	r0, [r8], #-784	; 0xfffffcf0
    1f88:	10040000 	andne	r0, r4, r0
    1f8c:	0000012e 	andeq	r0, r0, lr, lsr #2
    1f90:	00700314 	rsbseq	r0, r0, r4, lsl r3
    1f94:	11040000 	mrsne	r0, (UNDEF: 4)
    1f98:	0000012e 	andeq	r0, r0, lr, lsr #2
    1f9c:	03d90318 	bicseq	r0, r9, #24, 6	; 0x60000000
    1fa0:	12040000 	andne	r0, r4, #0
    1fa4:	0000012e 	andeq	r0, r0, lr, lsr #2
    1fa8:	03e9031c 	mvneq	r0, #28, 6	; 0x70000000
    1fac:	13040000 	movwne	r0, #16384	; 0x4000
    1fb0:	0000012e 	andeq	r0, r0, lr, lsr #2
    1fb4:	04050020 	streq	r0, [r5], #-32	; 0xffffffe0
    1fb8:	000000a4 	andeq	r0, r0, r4, lsr #1
    1fbc:	69050408 	stmdbvs	r5, {r3, sl}
    1fc0:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1fc4:	00000140 	andeq	r0, r0, r0, asr #2
    1fc8:	0001400a 	andeq	r4, r1, sl
    1fcc:	04050000 	streq	r0, [r5], #-0
    1fd0:	000000af 	andeq	r0, r0, pc, lsr #1
    1fd4:	01350405 	teqeq	r5, r5, lsl #8
    1fd8:	d4060000 	strle	r0, [r6], #-0
    1fdc:	04000006 	streq	r0, [r0], #-6
    1fe0:	0000af15 	andeq	sl, r0, r5, lsl pc
    1fe4:	01620b00 	cmneq	r2, r0, lsl #22
    1fe8:	01620000 	cmneq	r2, r0
    1fec:	000c0000 	andeq	r0, ip, r0
    1ff0:	014c0405 	cmpeq	ip, r5, lsl #8
    1ff4:	4b0d0000 	blmi	341ffc <startup-0x1fcbe004>
    1ff8:	04000005 	streq	r0, [r0], #-5
    1ffc:	0001571c 	andeq	r5, r1, ip, lsl r7
    2000:	04240d00 	strteq	r0, [r4], #-3328	; 0xfffff300
    2004:	1d040000 	stcne	0, cr0, [r4, #-0]
    2008:	0000012e 	andeq	r0, r0, lr, lsr #2
    200c:	83070204 	movwhi	r0, #29188	; 0x7204
    2010:	0b000003 	bleq	2024 <startup-0x1fffdfdc>
    2014:	0000005b 	andeq	r0, r0, fp, asr r0
    2018:	00000195 	muleq	r0, r5, r1
    201c:	0001950e 	andeq	r9, r1, lr, lsl #10
    2020:	04003500 	streq	r3, [r0], #-1280	; 0xfffffb00
    2024:	04060704 	streq	r0, [r6], #-1796	; 0xfffff8fc
    2028:	300f0000 	andcc	r0, pc, r0
    202c:	0500000e 	streq	r0, [r0, #-14]
    2030:	00018503 	andeq	r8, r1, r3, lsl #10
    2034:	58030500 	stmdapl	r3, {r8, sl}
    2038:	0f200090 	svceq	0x00200090
    203c:	00000fe2 	andeq	r0, r0, r2, ror #31
    2040:	01850306 	orreq	r0, r5, r6, lsl #6
    2044:	03050000 	movweq	r0, #20480	; 0x5000
    2048:	20009090 	mulcs	r0, r0, r0
    204c:	000f3a0f 	andeq	r3, pc, pc, lsl #20
    2050:	85030700 	strhi	r0, [r3, #-1792]	; 0xfffff900
    2054:	05000001 	streq	r0, [r0, #-1]
    2058:	0090c803 	addseq	ip, r0, r3, lsl #16
    205c:	0ed30f20 	cdpeq	15, 13, cr0, cr3, cr0, {1}
    2060:	03080000 	movweq	r0, #32768	; 0x8000
    2064:	00000185 	andeq	r0, r0, r5, lsl #3
    2068:	91000305 	tstls	r0, r5, lsl #6
    206c:	4c0f2000 	stcmi	0, cr2, [pc], {-0}
    2070:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
    2074:	00018503 	andeq	r8, r1, r3, lsl #10
    2078:	38030500 	stmdacc	r3, {r8, sl}
    207c:	0f200091 	svceq	0x00200091
    2080:	00000e7e 	andeq	r0, r0, lr, ror lr
    2084:	0185030a 	orreq	r0, r5, sl, lsl #6
    2088:	03050000 	movweq	r0, #20480	; 0x5000
    208c:	20009170 	andcs	r9, r0, r0, ror r1
    2090:	000ff30f 	andeq	pc, pc, pc, lsl #6
    2094:	85030b00 	strhi	r0, [r3, #-2816]	; 0xfffff500
    2098:	05000001 	streq	r0, [r0, #-1]
    209c:	0091a803 	addseq	sl, r1, r3, lsl #16
    20a0:	0ea80f20 	cdpeq	15, 10, cr0, cr8, cr0, {1}
    20a4:	030c0000 	movweq	r0, #49152	; 0xc000
    20a8:	00000185 	andeq	r0, r0, r5, lsl #3
    20ac:	91e00305 	mvnls	r0, r5, lsl #6
    20b0:	e50f2000 	str	r2, [pc, #-0]	; 20b8 <startup-0x1fffdf48>
    20b4:	0d00000e 	stceq	0, cr0, [r0, #-56]	; 0xffffffc8
    20b8:	00018503 	andeq	r8, r1, r3, lsl #10
    20bc:	18030500 	stmdane	r3, {r8, sl}
    20c0:	10200092 	mlane	r0, r2, r0, r0
    20c4:	00001097 	muleq	r0, r7, r0
    20c8:	009e1201 	addseq	r1, lr, r1, lsl #4
    20cc:	03050000 	movweq	r0, #20480	; 0x5000
    20d0:	20004eb0 			; <UNDEFINED> instruction: 0x20004eb0
    20d4:	00106210 	andseq	r6, r0, r0, lsl r2
    20d8:	9e130100 	muflss	f0, f3, f0
    20dc:	05000000 	streq	r0, [r0, #-0]
    20e0:	004f4803 	subeq	r4, pc, r3, lsl #16
    20e4:	11241020 			; <UNDEFINED> instruction: 0x11241020
    20e8:	14010000 	strne	r0, [r1], #-0
    20ec:	0000009e 	muleq	r0, lr, r0
    20f0:	4f200305 	svcmi	0x00200305
    20f4:	e4102000 	ldr	r2, [r0], #-0
    20f8:	01000010 	tsteq	r0, r0, lsl r0
    20fc:	00009e15 	andeq	r9, r0, r5, lsl lr
    2100:	2c030500 	cfstr32cs	mvfx0, [r3], {-0}
    2104:	1020004f 	eorne	r0, r0, pc, asr #32
    2108:	00001059 	andeq	r1, r0, r9, asr r0
    210c:	009e1601 	addseq	r1, lr, r1, lsl #12
    2110:	03050000 	movweq	r0, #20480	; 0x5000
    2114:	20004e9c 	mulcs	r0, ip, lr
    2118:	00103310 	andseq	r3, r0, r0, lsl r3
    211c:	9e170100 	muflss	f0, f7, f0
    2120:	05000000 	streq	r0, [r0, #-0]
    2124:	004f2403 	subeq	r2, pc, r3, lsl #8
    2128:	104b1020 	subne	r1, fp, r0, lsr #32
    212c:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    2130:	0000009e 	muleq	r0, lr, r0
    2134:	4eac0305 	cdpmi	3, 10, cr0, cr12, cr5, {0}
    2138:	b5102000 	ldrlt	r2, [r0, #-0]
    213c:	01000010 	tsteq	r0, r0, lsl r0
    2140:	00009e19 	andeq	r9, r0, r9, lsl lr
    2144:	58030500 	stmdapl	r3, {r8, sl}
    2148:	1020004f 	eorne	r0, r0, pc, asr #32
    214c:	000010cc 	andeq	r1, r0, ip, asr #1
    2150:	009e1a01 	addseq	r1, lr, r1, lsl #20
    2154:	03050000 	movweq	r0, #20480	; 0x5000
    2158:	20004f28 	andcs	r4, r0, r8, lsr #30
    215c:	00113510 	andseq	r3, r1, r0, lsl r5
    2160:	621c0100 	andsvs	r0, ip, #0, 2
    2164:	05000000 	streq	r0, [r0, #-0]
    2168:	004f3c03 	subeq	r3, pc, r3, lsl #24
    216c:	106b1020 	rsbne	r1, fp, r0, lsr #32
    2170:	1d010000 	stcne	0, cr0, [r1, #-0]
    2174:	00000062 	andeq	r0, r0, r2, rrx
    2178:	4eb40305 	cdpmi	3, 11, cr0, cr4, cr5, {0}
    217c:	8b102000 	blhi	40a184 <startup-0x1fbf5e7c>
    2180:	01000010 	tsteq	r0, r0, lsl r0
    2184:	0000621e 	andeq	r6, r0, lr, lsl r2
    2188:	74030500 	strvc	r0, [r3], #-1280	; 0xfffffb00
    218c:	1020004f 	eorne	r0, r0, pc, asr #32
    2190:	000010e0 	andeq	r1, r0, r0, ror #1
    2194:	00621f01 	rsbeq	r1, r2, r1, lsl #30
    2198:	03050000 	movweq	r0, #20480	; 0x5000
    219c:	20004efc 	strdcs	r4, [r0], -ip
    21a0:	00102f10 	andseq	r2, r0, r0, lsl pc
    21a4:	62200100 	eorvs	r0, r0, #0, 2
    21a8:	05000000 	streq	r0, [r0, #-0]
    21ac:	004f6803 	subeq	r6, pc, r3, lsl #16
    21b0:	10551020 	subsne	r1, r5, r0, lsr #32
    21b4:	21010000 	mrscs	r0, (UNDEF: 1)
    21b8:	00000062 	andeq	r0, r0, r2, rrx
    21bc:	4ea00305 	cdpmi	3, 10, cr0, cr0, cr5, {0}
    21c0:	47102000 	ldrmi	r2, [r0, -r0]
    21c4:	01000010 	tsteq	r0, r0, lsl r0
    21c8:	00006222 	andeq	r6, r0, r2, lsr #4
    21cc:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
    21d0:	1020004f 	eorne	r0, r0, pc, asr #32
    21d4:	000010c8 	andeq	r1, r0, r8, asr #1
    21d8:	00622301 	rsbeq	r2, r2, r1, lsl #6
    21dc:	03050000 	movweq	r0, #20480	; 0x5000
    21e0:	20004ec0 	andcs	r4, r0, r0, asr #29
    21e4:	0010b110 	andseq	fp, r0, r0, lsl r1
    21e8:	62240100 	eorvs	r0, r4, #0, 2
    21ec:	05000000 	streq	r0, [r0, #-0]
    21f0:	004f3003 	subeq	r3, pc, r3
    21f4:	112e1020 			; <UNDEFINED> instruction: 0x112e1020
    21f8:	27010000 	strcs	r0, [r1, -r0]
    21fc:	0000014c 	andeq	r0, r0, ip, asr #2
    2200:	4e6c0305 	cdpmi	3, 6, cr0, cr12, cr5, {0}
    2204:	25102000 	ldrcs	r2, [r0, #-0]
    2208:	01000010 	tsteq	r0, r0, lsl r0
    220c:	0000a428 	andeq	sl, r0, r8, lsr #8
    2210:	14030500 	strne	r0, [r3], #-1280	; 0xfffffb00
    2214:	1020004f 	eorne	r0, r0, pc, asr #32
    2218:	000010ee 	andeq	r1, r0, lr, ror #1
    221c:	00a42901 	adceq	r2, r4, r1, lsl #18
    2220:	03050000 	movweq	r0, #20480	; 0x5000
    2224:	20004e90 	mulcs	r0, r0, lr
    2228:	0010be10 	andseq	fp, r0, r0, lsl lr
    222c:	a42a0100 	strtge	r0, [sl], #-256	; 0xffffff00
    2230:	05000000 	streq	r0, [r0, #-0]
    2234:	004f0803 	subeq	r0, pc, r3, lsl #16
    2238:	101b1020 	andsne	r1, fp, r0, lsr #32
    223c:	2b010000 	blcs	42244 <startup-0x1ffbddbc>
    2240:	000000a4 	andeq	r0, r0, r4, lsr #1
    2244:	4f5c0305 	svcmi	0x005c0305
    2248:	a40b2000 	strge	r2, [fp], #-0
    224c:	cc000000 	stcgt	0, cr0, [r0], {-0}
    2250:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    2254:	00000195 	muleq	r0, r5, r1
    2258:	78100003 	ldmdavc	r0, {r0, r1}
    225c:	01000010 	tsteq	r0, r0, lsl r0
    2260:	0003bc2c 	andeq	fp, r3, ip, lsr #24
    2264:	cc030500 	cfstr32gt	mvfx0, [r3], {-0}
    2268:	0f20004e 	svceq	0x0020004e
    226c:	00001142 	andeq	r1, r0, r2, asr #2
    2270:	012e6b01 			; <UNDEFINED> instruction: 0x012e6b01
    2274:	03050000 	movweq	r0, #20480	; 0x5000
    2278:	200047f4 	strdcs	r4, [r0], -r4	; <UNPREDICTABLE>
    227c:	0010a10f 	andseq	sl, r0, pc, lsl #2
    2280:	2e6c0100 	powcse	f0, f4, f0
    2284:	05000001 	streq	r0, [r0, #-1]
    2288:	0047f803 	subeq	pc, r7, r3, lsl #16
    228c:	10d61120 	sbcsne	r1, r6, r0, lsr #2
    2290:	74010000 	strvc	r0, [r1], #-0
    2294:	2000258c 	andcs	r2, r0, ip, lsl #11
    2298:	00000110 	andeq	r0, r0, r0, lsl r1
    229c:	04569c01 	ldrbeq	r9, [r6], #-3073	; 0xfffff3ff
    22a0:	77120000 	ldrvc	r0, [r2, -r0]
    22a4:	01000007 	tsteq	r0, r7
    22a8:	00016274 	andeq	r6, r1, r4, ror r2
    22ac:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    22b0:	0003f30f 	andeq	pc, r3, pc, lsl #6
    22b4:	2e760100 	rpwcss	f0, f6, f0
    22b8:	05000001 	streq	r0, [r0, #-1]
    22bc:	0047fc03 	subeq	pc, r7, r3, lsl #24
    22c0:	10110f20 	andsne	r0, r1, r0, lsr #30
    22c4:	77010000 	strvc	r0, [r1, -r0]
    22c8:	0000012e 	andeq	r0, r0, lr, lsr #2
    22cc:	92540305 	subsls	r0, r4, #335544320	; 0x14000000
    22d0:	3d0f2000 	stccc	0, cr2, [pc, #-0]	; 22d8 <startup-0x1fffdd28>
    22d4:	01000010 	tsteq	r0, r0, lsl r0
    22d8:	00012e78 	andeq	r2, r1, r8, ror lr
    22dc:	00030500 	andeq	r0, r3, r0, lsl #10
    22e0:	00200048 	eoreq	r0, r0, r8, asr #32
    22e4:	00115213 	andseq	r5, r1, r3, lsl r2
    22e8:	646e0100 	strbtvs	r0, [lr], #-256	; 0xffffff00
    22ec:	28200025 	stmdacs	r0!, {r0, r2, r5}
    22f0:	01000000 	mrseq	r0, (UNDEF: 0)
    22f4:	0004849c 	muleq	r4, ip, r4
    22f8:	00781400 	rsbseq	r1, r8, r0, lsl #8
    22fc:	012e6e01 			; <UNDEFINED> instruction: 0x012e6e01
    2300:	91020000 	mrsls	r0, (UNDEF: 2)
    2304:	00791474 	rsbseq	r1, r9, r4, ror r4
    2308:	012e6e01 			; <UNDEFINED> instruction: 0x012e6e01
    230c:	91020000 	mrsls	r0, (UNDEF: 2)
    2310:	82110070 	andshi	r0, r1, #112	; 0x70
    2314:	01000010 	tsteq	r0, r0, lsl r0
    2318:	00246c50 	eoreq	r6, r4, r0, asr ip
    231c:	0000f820 	andeq	pc, r0, r0, lsr #16
    2320:	b99c0100 	ldmiblt	ip, {r8}
    2324:	12000004 	andne	r0, r0, #4
    2328:	0000112e 	andeq	r1, r0, lr, lsr #2
    232c:	01625001 	cmneq	r2, r1
    2330:	91020000 	mrsls	r0, (UNDEF: 2)
    2334:	08fe0f6c 	ldmeq	lr!, {r2, r3, r5, r6, r8, r9, sl, fp}^
    2338:	51010000 	mrspl	r0, (UNDEF: 1)
    233c:	0000012e 	andeq	r0, r0, lr, lsr #2
    2340:	92500305 	subsls	r0, r0, #335544320	; 0x14000000
    2344:	15002000 	strne	r2, [r0, #-0]
    2348:	0000049e 	muleq	r0, lr, r4
    234c:	232c2d01 			; <UNDEFINED> instruction: 0x232c2d01
    2350:	01402000 	mrseq	r2, (UNDEF: 64)
    2354:	9c010000 	stcls	0, cr0, [r1], {-0}
    2358:	000d930f 	andeq	r9, sp, pc, lsl #6
    235c:	9e2f0100 	suflse	f0, f7, f0
    2360:	02000000 	andeq	r0, r0, #0
    2364:	9d0f7491 	cfstrsls	mvf7, [pc, #-580]	; 2128 <startup-0x1fffded8>
    2368:	0100000d 	tsteq	r0, sp
    236c:	00009e32 	andeq	r9, r0, r2, lsr lr
    2370:	70910200 	addsvc	r0, r1, r0, lsl #4
    2374:	000b930f 	andeq	r9, fp, pc, lsl #6
    2378:	9e350100 	rsflss	f0, f5, f0
    237c:	02000000 	andeq	r0, r0, #0
    2380:	b40f6c91 	strlt	r6, [pc], #-3217	; 2388 <startup-0x1fffdc78>
    2384:	0100000a 	tsteq	r0, sl
    2388:	00009e39 	andeq	r9, r0, r9, lsr lr
    238c:	68910200 	ldmvs	r1, {r9}
    2390:	000dbd0f 	andeq	fp, sp, pc, lsl #26
    2394:	9e3c0100 	rsflse	f0, f4, f0
    2398:	02000000 	andeq	r0, r0, #0
    239c:	510f6491 			; <UNDEFINED> instruction: 0x510f6491
    23a0:	0100000b 	tsteq	r0, fp
    23a4:	00009e3f 	andeq	r9, r0, pc, lsr lr
    23a8:	60910200 	addsvs	r0, r1, r0, lsl #4
    23ac:	000d690f 	andeq	r6, sp, pc, lsl #18
    23b0:	9e440100 	dvflss	f0, f4, f0
    23b4:	02000000 	andeq	r0, r0, #0
    23b8:	c70f5c91 			; <UNDEFINED> instruction: 0xc70f5c91
    23bc:	0100000d 	tsteq	r0, sp
    23c0:	00009e47 	andeq	r9, r0, r7, asr #28
    23c4:	58910200 	ldmpl	r1, {r9}
    23c8:	000dd10f 	andeq	sp, sp, pc, lsl #2
    23cc:	9e4a0100 	dvflse	f0, f2, f0
    23d0:	02000000 	andeq	r0, r0, #0
    23d4:	00005491 	muleq	r0, r1, r4
    23d8:	0000055b 	andeq	r0, r0, fp, asr r5
    23dc:	077b0004 	ldrbeq	r0, [fp, -r4]!
    23e0:	01040000 	mrseq	r0, (UNDEF: 4)
    23e4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    23e8:	00139c0c 	andseq	r9, r3, ip, lsl #24
    23ec:	00269c00 	eoreq	r9, r6, r0, lsl #24
    23f0:	0002ac20 	andeq	sl, r2, r0, lsr #24
    23f4:	000b9c00 	andeq	r9, fp, r0, lsl #24
    23f8:	020c0200 	andeq	r0, ip, #0, 4
    23fc:	00004e05 	andeq	r4, r0, r5, lsl #28
    2400:	035b0300 	cmpeq	fp, #0, 6
    2404:	07020000 	streq	r0, [r2, -r0]
    2408:	0000004e 	andeq	r0, r0, lr, asr #32
    240c:	070e0300 	streq	r0, [lr, -r0, lsl #6]
    2410:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2414:	0000004e 	andeq	r0, r0, lr, asr #32
    2418:	190d0304 	stmdbne	sp, {r2, r8, r9}
    241c:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    2420:	00000055 	andeq	r0, r0, r5, asr r0
    2424:	04040008 	streq	r0, [r4], #-8
    2428:	00038907 	andeq	r8, r3, r7, lsl #18
    242c:	5b040500 	blpl	103834 <startup-0x1fefc7cc>
    2430:	04000000 	streq	r0, [r0], #-0
    2434:	04c80801 	strbeq	r0, [r8], #2049	; 0x801
    2438:	5f060000 	svcpl	0x00060000
    243c:	0200001a 	andeq	r0, r0, #26
    2440:	0000210a 	andeq	r2, r0, sl, lsl #2
    2444:	00340700 	eorseq	r0, r4, r0, lsl #14
    2448:	030c0000 	movweq	r0, #49152	; 0xc000
    244c:	00009e06 	andeq	r9, r0, r6, lsl #28
    2450:	05be0300 	ldreq	r0, [lr, #768]!	; 0x300
    2454:	07030000 	streq	r0, [r3, -r0]
    2458:	0000009e 	muleq	r0, lr, r0
    245c:	003b0300 	eorseq	r0, fp, r0, lsl #6
    2460:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2464:	0000009e 	muleq	r0, lr, r0
    2468:	00300304 	eorseq	r0, r0, r4, lsl #6
    246c:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    2470:	0000009e 	muleq	r0, lr, r0
    2474:	04050008 	streq	r0, [r5], #-8
    2478:	00000062 	andeq	r0, r0, r2, rrx
    247c:	00161d06 	andseq	r1, r6, r6, lsl #26
    2480:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
    2484:	07000000 	streq	r0, [r0, -r0]
    2488:	000006d3 	ldrdeq	r0, [r0], -r3
    248c:	28060424 	stmdacs	r6, {r2, r5, sl}
    2490:	03000001 	movweq	r0, #1
    2494:	00000456 	andeq	r0, r0, r6, asr r4
    2498:	01280704 			; <UNDEFINED> instruction: 0x01280704
    249c:	03000000 	movweq	r0, #0
    24a0:	000006df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    24a4:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
    24a8:	03040000 	movweq	r0, #16384	; 0x4000
    24ac:	0000062f 	andeq	r0, r0, pc, lsr #12
    24b0:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
    24b4:	03080000 	movweq	r0, #32768	; 0x8000
    24b8:	0000065b 	andeq	r0, r0, fp, asr r6
    24bc:	01460c04 	cmpeq	r6, r4, lsl #24
    24c0:	030c0000 	movweq	r0, #49152	; 0xc000
    24c4:	00000342 	andeq	r0, r0, r2, asr #6
    24c8:	01460d04 	cmpeq	r6, r4, lsl #26
    24cc:	03100000 	tsteq	r0, #0
    24d0:	00000468 	andeq	r0, r0, r8, ror #8
    24d4:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
    24d8:	03140000 	tsteq	r4, #0
    24dc:	00000070 	andeq	r0, r0, r0, ror r0
    24e0:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
    24e4:	03180000 	tsteq	r8, #0
    24e8:	000003d9 	ldrdeq	r0, [r0], -r9
    24ec:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
    24f0:	031c0000 	tsteq	ip, #0
    24f4:	000003e9 	andeq	r0, r0, r9, ror #7
    24f8:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
    24fc:	00200000 	eoreq	r0, r0, r0
    2500:	00a40405 	adceq	r0, r4, r5, lsl #8
    2504:	04080000 	streq	r0, [r8], #-0
    2508:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    250c:	01400900 	cmpeq	r0, r0, lsl #18
    2510:	400a0000 	andmi	r0, sl, r0
    2514:	00000001 	andeq	r0, r0, r1
    2518:	00af0405 	adceq	r0, pc, r5, lsl #8
    251c:	04050000 	streq	r0, [r5], #-0
    2520:	00000135 	andeq	r0, r0, r5, lsr r1
    2524:	0006d406 	andeq	sp, r6, r6, lsl #8
    2528:	af150400 	svcge	0x00150400
    252c:	0b000000 	bleq	2534 <startup-0x1fffdacc>
    2530:	00000162 	andeq	r0, r0, r2, ror #2
    2534:	00000162 	andeq	r0, r0, r2, ror #2
    2538:	0405000c 	streq	r0, [r5], #-12
    253c:	0000014c 	andeq	r0, r0, ip, asr #2
    2540:	00054b0d 	andeq	r4, r5, sp, lsl #22
    2544:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
    2548:	0d000001 	stceq	0, cr0, [r0, #-4]
    254c:	00000424 	andeq	r0, r0, r4, lsr #8
    2550:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
    2554:	5b0b0000 	blpl	2c255c <startup-0x1fd3daa4>
    2558:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    255c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    2560:	0000018e 	andeq	r0, r0, lr, lsl #3
    2564:	04040074 	streq	r0, [r4], #-116	; 0xffffff8c
    2568:	00040607 	andeq	r0, r4, r7, lsl #12
    256c:	132b0f00 			; <UNDEFINED> instruction: 0x132b0f00
    2570:	03050000 	movweq	r0, #20480	; 0x5000
    2574:	0000017e 	andeq	r0, r0, lr, ror r1
    2578:	92580305 	subsls	r0, r8, #335544320	; 0x14000000
    257c:	640f2000 	strvs	r2, [pc], #-0	; 2584 <startup-0x1fffda7c>
    2580:	06000011 			; <UNDEFINED> instruction: 0x06000011
    2584:	00017e03 	andeq	r7, r1, r3, lsl #28
    2588:	d0030500 	andle	r0, r3, r0, lsl #10
    258c:	0f200092 	svceq	0x00200092
    2590:	00001221 	andeq	r1, r0, r1, lsr #4
    2594:	017e0307 	cmneq	lr, r7, lsl #6
    2598:	03050000 	movweq	r0, #20480	; 0x5000
    259c:	20009348 	andcs	r9, r0, r8, asr #6
    25a0:	0012ed0f 	andseq	lr, r2, pc, lsl #26
    25a4:	7e030800 	cdpvc	8, 0, cr0, cr3, cr0, {0}
    25a8:	05000001 	streq	r0, [r0, #-1]
    25ac:	0093c003 	addseq	ip, r3, r3
    25b0:	11810f20 	orrne	r0, r1, r0, lsr #30
    25b4:	03090000 	movweq	r0, #36864	; 0x9000
    25b8:	0000017e 	andeq	r0, r0, lr, ror r1
    25bc:	94380305 	ldrtls	r0, [r8], #-773	; 0xfffffcfb
    25c0:	a10f2000 	mrsge	r2, CPSR
    25c4:	0a000011 	beq	2610 <startup-0x1fffd9f0>
    25c8:	00017e03 	andeq	r7, r1, r3, lsl #28
    25cc:	b0030500 	andlt	r0, r3, r0, lsl #10
    25d0:	0f200094 	svceq	0x00200094
    25d4:	00001292 	muleq	r0, r2, r2
    25d8:	017e030b 	cmneq	lr, fp, lsl #6
    25dc:	03050000 	movweq	r0, #20480	; 0x5000
    25e0:	20009528 	andcs	r9, r0, r8, lsr #10
    25e4:	0012b60f 	andseq	fp, r2, pc, lsl #12
    25e8:	7e030c00 	cdpvc	12, 0, cr0, cr3, cr0, {0}
    25ec:	05000001 	streq	r0, [r0, #-1]
    25f0:	0095a003 	addseq	sl, r5, r3
    25f4:	11eb0f20 	mvnne	r0, r0, lsr #30
    25f8:	030d0000 	movweq	r0, #53248	; 0xd000
    25fc:	0000017e 	andeq	r0, r0, lr, ror r1
    2600:	96180305 	ldrls	r0, [r8], -r5, lsl #6
    2604:	0e0f2000 	cdpeq	0, 0, cr2, cr15, cr0, {0}
    2608:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    260c:	00017e03 	andeq	r7, r1, r3, lsl #28
    2610:	90030500 	andls	r0, r3, r0, lsl #10
    2614:	0f200096 	svceq	0x00200096
    2618:	00001349 	andeq	r1, r0, r9, asr #6
    261c:	017e030f 	cmneq	lr, pc, lsl #6
    2620:	03050000 	movweq	r0, #20480	; 0x5000
    2624:	20009708 	andcs	r9, r0, r8, lsl #14
    2628:	0012a40f 	andseq	sl, r2, pc, lsl #8
    262c:	7e031000 	cdpvc	0, 0, cr1, cr3, cr0, {0}
    2630:	05000001 	streq	r0, [r0, #-1]
    2634:	00978003 	addseq	r8, r7, r3
    2638:	11751020 	cmnne	r5, r0, lsr #32
    263c:	11010000 	mrsne	r0, (UNDEF: 1)
    2640:	0000009e 	muleq	r0, lr, r0
    2644:	50980305 	addspl	r0, r8, r5, lsl #6
    2648:	e2102000 	ands	r2, r0, #0
    264c:	01000012 	tsteq	r0, r2, lsl r0
    2650:	00009e12 	andeq	r9, r0, r2, lsl lr
    2654:	10030500 	andne	r0, r3, r0, lsl #10
    2658:	10200050 	eorne	r0, r0, r0, asr r0
    265c:	0000133d 	andeq	r1, r0, sp, lsr r3
    2660:	009e1301 	addseq	r1, lr, r1, lsl #6
    2664:	03050000 	movweq	r0, #20480	; 0x5000
    2668:	20005014 	andcs	r5, r0, r4, lsl r0
    266c:	0011bf10 	andseq	fp, r1, r0, lsl pc
    2670:	9e140100 	muflss	f0, f4, f0
    2674:	05000000 	streq	r0, [r0, #-0]
    2678:	0050c003 	subseq	ip, r0, r3
    267c:	13911020 	orrsne	r1, r1, #32
    2680:	15010000 	strne	r0, [r1, #-0]
    2684:	0000009e 	muleq	r0, lr, r0
    2688:	500c0305 	andpl	r0, ip, r5, lsl #6
    268c:	e4102000 	ldr	r2, [r0], #-0
    2690:	01000013 	tsteq	r0, r3, lsl r0
    2694:	00009e16 	andeq	r9, r0, r6, lsl lr
    2698:	a8030500 	stmdage	r3, {r8, sl}
    269c:	10200050 	eorne	r0, r0, r0, asr r0
    26a0:	0000123f 	andeq	r1, r0, pc, lsr r2
    26a4:	009e1701 	addseq	r1, lr, r1, lsl #14
    26a8:	03050000 	movweq	r0, #20480	; 0x5000
    26ac:	200050ac 	andcs	r5, r0, ip, lsr #1
    26b0:	00125b10 	andseq	r5, r2, r0, lsl fp
    26b4:	9e180100 	muflse	f0, f0, f0
    26b8:	05000000 	streq	r0, [r0, #-0]
    26bc:	004fc003 	subeq	ip, pc, r3
    26c0:	11b31020 			; <UNDEFINED> instruction: 0x11b31020
    26c4:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    26c8:	0000009e 	muleq	r0, lr, r0
    26cc:	4fa40305 	svcmi	0x00a40305
    26d0:	d8102000 	ldmdale	r0, {sp}
    26d4:	01000013 	tsteq	r0, r3, lsl r0
    26d8:	00009e1a 	andeq	r9, r0, sl, lsl lr
    26dc:	94030500 	strls	r0, [r3], #-1280	; 0xfffffb00
    26e0:	10200050 	eorne	r0, r0, r0, asr r0
    26e4:	00001320 	andeq	r1, r0, r0, lsr #6
    26e8:	009e1b01 	addseq	r1, lr, r1, lsl #22
    26ec:	03050000 	movweq	r0, #20480	; 0x5000
    26f0:	20005030 	andcs	r5, r0, r0, lsr r0
    26f4:	00135a10 	andseq	r5, r3, r0, lsl sl
    26f8:	9e1c0100 	muflse	f0, f4, f0
    26fc:	05000000 	streq	r0, [r0, #-0]
    2700:	0050bc03 	subseq	fp, r0, r3, lsl #24
    2704:	12ff1020 	rscsne	r1, pc, #32
    2708:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    270c:	00000062 	andeq	r0, r0, r2, rrx
    2710:	50b00305 	adcspl	r0, r0, r5, lsl #6
    2714:	92102000 	andsls	r2, r0, #0
    2718:	01000011 	tsteq	r0, r1, lsl r0
    271c:	0000621f 	andeq	r6, r0, pc, lsl r2
    2720:	9c030500 	cfstr32ls	mvfx0, [r3], {-0}
    2724:	10200050 	eorne	r0, r0, r0, asr r0
    2728:	000013ca 	andeq	r1, r0, sl, asr #7
    272c:	00622001 	rsbeq	r2, r2, r1
    2730:	03050000 	movweq	r0, #20480	; 0x5000
    2734:	20004f80 	andcs	r4, r0, r0, lsl #31
    2738:	0011cb10 	andseq	ip, r1, r0, lsl fp
    273c:	62210100 	eorvs	r0, r1, #0, 2
    2740:	05000000 	streq	r0, [r0, #-0]
    2744:	00500003 	subseq	r0, r0, r3
    2748:	11db1020 	bicsne	r1, fp, r0, lsr #32
    274c:	22010000 	andcs	r0, r1, #0
    2750:	00000062 	andeq	r0, r0, r2, rrx
    2754:	4fe80305 	svcmi	0x00e80305
    2758:	06102000 	ldreq	r2, [r0], -r0
    275c:	01000012 	tsteq	r0, r2, lsl r0
    2760:	00006223 	andeq	r6, r0, r3, lsr #4
    2764:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
    2768:	10200050 	eorne	r0, r0, r0, asr r0
    276c:	00001381 	andeq	r1, r0, r1, lsl #7
    2770:	00622401 	rsbeq	r2, r2, r1, lsl #8
    2774:	03050000 	movweq	r0, #20480	; 0x5000
    2778:	20005088 	andcs	r5, r0, r8, lsl #1
    277c:	00124b10 	andseq	r4, r2, r0, lsl fp
    2780:	62250100 	eorvs	r0, r5, #0, 2
    2784:	05000000 	streq	r0, [r0, #-0]
    2788:	004fa803 	subeq	sl, pc, r3, lsl #16
    278c:	13661020 	cmnne	r6, #32
    2790:	26010000 	strcs	r0, [r1], -r0
    2794:	00000062 	andeq	r0, r0, r2, rrx
    2798:	4ff40305 	svcmi	0x00f40305
    279c:	66102000 	ldrvs	r2, [r0], -r0
    27a0:	01000012 	tsteq	r0, r2, lsl r0
    27a4:	00006227 	andeq	r6, r0, r7, lsr #4
    27a8:	18030500 	stmdane	r3, {r8, sl}
    27ac:	10200050 	eorne	r0, r0, r0, asr r0
    27b0:	00001276 	andeq	r1, r0, r6, ror r2
    27b4:	00622801 	rsbeq	r2, r2, r1, lsl #16
    27b8:	03050000 	movweq	r0, #20480	; 0x5000
    27bc:	20004f8c 	andcs	r4, r0, ip, lsl #31
    27c0:	0012c710 	andseq	ip, r2, r0, lsl r7
    27c4:	62290100 	eorvs	r0, r9, #0, 2
    27c8:	05000000 	streq	r0, [r0, #-0]
    27cc:	00502403 	subseq	r2, r0, r3, lsl #8
    27d0:	11fd1020 	mvnsne	r1, r0, lsr #32
    27d4:	2c010000 	stccs	0, cr0, [r1], {-0}
    27d8:	0000014c 	andeq	r0, r0, ip, asr #2
    27dc:	4fc40305 	svcmi	0x00c40305
    27e0:	33102000 	tstcc	r0, #0
    27e4:	01000012 	tsteq	r0, r2, lsl r0
    27e8:	0000a42d 	andeq	sl, r0, sp, lsr #8
    27ec:	40030500 	andmi	r0, r3, r0, lsl #10
    27f0:	10200050 	eorne	r0, r0, r0, asr r0
    27f4:	000012d6 	ldrdeq	r1, [r0], -r6
    27f8:	00a42e01 	adceq	r2, r4, r1, lsl #28
    27fc:	03050000 	movweq	r0, #20480	; 0x5000
    2800:	20004f98 	mulcs	r0, r8, pc	; <UNPREDICTABLE>
    2804:	00128610 	andseq	r8, r2, r0, lsl r6
    2808:	a42f0100 	strtge	r0, [pc], #-256	; 2810 <startup-0x1fffd7f0>
    280c:	05000000 	streq	r0, [r0, #-0]
    2810:	004fb403 	subeq	fp, pc, r3, lsl #8
    2814:	12151020 	andsne	r1, r5, #32
    2818:	30010000 	andcc	r0, r1, r0
    281c:	000000a4 	andeq	r0, r0, r4, lsr #1
    2820:	50340305 	eorspl	r0, r4, r5, lsl #6
    2824:	a40b2000 	strge	r2, [fp], #-0
    2828:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    282c:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    2830:	0000018e 	andeq	r0, r0, lr, lsl #3
    2834:	75100003 	ldrvc	r0, [r0, #-3]
    2838:	01000013 	tsteq	r0, r3, lsl r0
    283c:	00044e31 	andeq	r4, r4, r1, lsr lr
    2840:	58030500 	stmdapl	r3, {r8, sl}
    2844:	11200050 	qsubne	r0, r0, r0
    2848:	000003ce 	andeq	r0, r0, lr, asr #7
    284c:	28445f01 	stmdacs	r4, {r0, r8, r9, sl, fp, ip, lr}^
    2850:	01042000 	mrseq	r2, (UNDEF: 4)
    2854:	9c010000 	stcls	0, cr0, [r1], {-0}
    2858:	000004a4 	andeq	r0, r0, r4, lsr #9
    285c:	0011fd12 	andseq	pc, r1, r2, lsl sp	; <UNPREDICTABLE>
    2860:	625f0100 	subsvs	r0, pc, #0, 2
    2864:	02000001 	andeq	r0, r0, #1
    2868:	fe0f6c91 	mcr2	12, 0, r6, cr15, cr1, {4}
    286c:	01000008 	tsteq	r0, r8
    2870:	00012e60 	andeq	r2, r1, r0, ror #28
    2874:	f8030500 			; <UNDEFINED> instruction: 0xf8030500
    2878:	00200097 	mlaeq	r0, r7, r0, r0
    287c:	00049e13 	andeq	r9, r4, r3, lsl lr
    2880:	9c320100 	ldflss	f0, [r2], #-0
    2884:	a8200026 	stmdage	r0!, {r1, r2, r5}
    2888:	01000001 	tsteq	r0, r1
    288c:	0d930f9c 	ldceq	15, cr0, [r3, #624]	; 0x270
    2890:	34010000 	strcc	r0, [r1], #-0
    2894:	0000009e 	muleq	r0, lr, r0
    2898:	0f749102 	svceq	0x00749102
    289c:	00000d9d 	muleq	r0, sp, sp
    28a0:	009e3701 	addseq	r3, lr, r1, lsl #14
    28a4:	91020000 	mrsls	r0, (UNDEF: 2)
    28a8:	0b930f70 	bleq	fe4c6670 <firstTime.4040+0xde4b7fb4>
    28ac:	3a010000 	bcc	428b4 <startup-0x1ffbd74c>
    28b0:	0000009e 	muleq	r0, lr, r0
    28b4:	0f6c9102 	svceq	0x006c9102
    28b8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
    28bc:	009e3e01 	addseq	r3, lr, r1, lsl #28
    28c0:	91020000 	mrsls	r0, (UNDEF: 2)
    28c4:	0dbd0f68 	ldceq	15, cr0, [sp, #416]!	; 0x1a0
    28c8:	41010000 	mrsmi	r0, (UNDEF: 1)
    28cc:	0000009e 	muleq	r0, lr, r0
    28d0:	0f649102 	svceq	0x00649102
    28d4:	00000b51 	andeq	r0, r0, r1, asr fp
    28d8:	009e4401 	addseq	r4, lr, r1, lsl #8
    28dc:	91020000 	mrsls	r0, (UNDEF: 2)
    28e0:	0d690f60 	stcleq	15, cr0, [r9, #-384]!	; 0xfffffe80
    28e4:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    28e8:	0000009e 	muleq	r0, lr, r0
    28ec:	0f5c9102 	svceq	0x005c9102
    28f0:	00000dc7 	andeq	r0, r0, r7, asr #27
    28f4:	009e4c01 	addseq	r4, lr, r1, lsl #24
    28f8:	91020000 	mrsls	r0, (UNDEF: 2)
    28fc:	0dd10f58 	ldcleq	15, cr0, [r1, #352]	; 0x160
    2900:	4f010000 	svcmi	0x00010000
    2904:	0000009e 	muleq	r0, lr, r0
    2908:	0f549102 	svceq	0x00549102
    290c:	00000ada 	ldrdeq	r0, [r0], -sl
    2910:	009e5301 	addseq	r5, lr, r1, lsl #6
    2914:	91020000 	mrsls	r0, (UNDEF: 2)
    2918:	0b1e0f50 	bleq	786660 <startup-0x1f8799a0>
    291c:	56010000 	strpl	r0, [r1], -r0
    2920:	0000009e 	muleq	r0, lr, r0
    2924:	0f4c9102 	svceq	0x004c9102
    2928:	00000b28 	andeq	r0, r0, r8, lsr #22
    292c:	009e5901 	addseq	r5, lr, r1, lsl #18
    2930:	91020000 	mrsls	r0, (UNDEF: 2)
    2934:	a1000048 	tstge	r0, r8, asr #32
    2938:	04000007 	streq	r0, [r0], #-7
    293c:	00087b00 	andeq	r7, r8, r0, lsl #22
    2940:	9f010400 	svcls	0x00010400
    2944:	0c000000 	stceq	0, cr0, [r0], {-0}
    2948:	00001442 	andeq	r1, r0, r2, asr #8
    294c:	20002948 	andcs	r2, r0, r8, asr #18
    2950:	0000052c 	andeq	r0, r0, ip, lsr #10
    2954:	00000d45 	andeq	r0, r0, r5, asr #26
    2958:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
    295c:	0000004e 	andeq	r0, r0, lr, asr #32
    2960:	00035b03 	andeq	r5, r3, r3, lsl #22
    2964:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
    2968:	00000000 	andeq	r0, r0, r0
    296c:	00070e03 	andeq	r0, r7, r3, lsl #28
    2970:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
    2974:	04000000 	streq	r0, [r0], #-0
    2978:	00190d03 	andseq	r0, r9, r3, lsl #26
    297c:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
    2980:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2984:	07040400 	streq	r0, [r4, -r0, lsl #8]
    2988:	00000389 	andeq	r0, r0, r9, lsl #7
    298c:	005b0405 	subseq	r0, fp, r5, lsl #8
    2990:	01040000 	mrseq	r0, (UNDEF: 4)
    2994:	0004c808 	andeq	ip, r4, r8, lsl #16
    2998:	1a5f0600 	bne	17c41a0 <startup-0x1e83be60>
    299c:	0a020000 	beq	829a4 <startup-0x1ff7d65c>
    29a0:	00000021 	andeq	r0, r0, r1, lsr #32
    29a4:	00003407 	andeq	r3, r0, r7, lsl #8
    29a8:	06030c00 	streq	r0, [r3], -r0, lsl #24
    29ac:	0000009e 	muleq	r0, lr, r0
    29b0:	0005be03 	andeq	fp, r5, r3, lsl #28
    29b4:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
    29b8:	00000000 	andeq	r0, r0, r0
    29bc:	00003b03 	andeq	r3, r0, r3, lsl #22
    29c0:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
    29c4:	04000000 	streq	r0, [r0], #-0
    29c8:	00003003 	andeq	r3, r0, r3
    29cc:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
    29d0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    29d4:	62040500 	andvs	r0, r4, #0, 10
    29d8:	06000000 	streq	r0, [r0], -r0
    29dc:	0000161d 	andeq	r1, r0, sp, lsl r6
    29e0:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
    29e4:	d3070000 	movwle	r0, #28672	; 0x7000
    29e8:	24000006 	strcs	r0, [r0], #-6
    29ec:	01280604 			; <UNDEFINED> instruction: 0x01280604
    29f0:	56030000 	strpl	r0, [r3], -r0
    29f4:	04000004 	streq	r0, [r0], #-4
    29f8:	00012807 	andeq	r2, r1, r7, lsl #16
    29fc:	df030000 	svcle	0x00030000
    2a00:	04000006 	streq	r0, [r0], #-6
    2a04:	00012e08 	andeq	r2, r1, r8, lsl #28
    2a08:	2f030400 	svccs	0x00030400
    2a0c:	04000006 	streq	r0, [r0], #-6
    2a10:	00012e09 	andeq	r2, r1, r9, lsl #28
    2a14:	5b030800 	blpl	c4a1c <startup-0x1ff3b5e4>
    2a18:	04000006 	streq	r0, [r0], #-6
    2a1c:	0001460c 	andeq	r4, r1, ip, lsl #12
    2a20:	42030c00 	andmi	r0, r3, #0, 24
    2a24:	04000003 	streq	r0, [r0], #-3
    2a28:	0001460d 	andeq	r4, r1, sp, lsl #12
    2a2c:	68031000 	stmdavs	r3, {ip}
    2a30:	04000004 	streq	r0, [r0], #-4
    2a34:	00012e10 	andeq	r2, r1, r0, lsl lr
    2a38:	70031400 	andvc	r1, r3, r0, lsl #8
    2a3c:	04000000 	streq	r0, [r0], #-0
    2a40:	00012e11 	andeq	r2, r1, r1, lsl lr
    2a44:	d9031800 	stmdble	r3, {fp, ip}
    2a48:	04000003 	streq	r0, [r0], #-3
    2a4c:	00012e12 	andeq	r2, r1, r2, lsl lr
    2a50:	e9031c00 	stmdb	r3, {sl, fp, ip}
    2a54:	04000003 	streq	r0, [r0], #-3
    2a58:	00012e13 	andeq	r2, r1, r3, lsl lr
    2a5c:	05002000 	streq	r2, [r0, #-0]
    2a60:	0000a404 	andeq	sl, r0, r4, lsl #8
    2a64:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
    2a68:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2a6c:	00014009 	andeq	r4, r1, r9
    2a70:	01400a00 	cmpeq	r0, r0, lsl #20
    2a74:	05000000 	streq	r0, [r0, #-0]
    2a78:	0000af04 	andeq	sl, r0, r4, lsl #30
    2a7c:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
    2a80:	06000001 	streq	r0, [r0], -r1
    2a84:	000006d4 	ldrdeq	r0, [r0], -r4
    2a88:	00af1504 	adceq	r1, pc, r4, lsl #10
    2a8c:	620b0000 	andvs	r0, fp, #0
    2a90:	62000001 	andvs	r0, r0, #1
    2a94:	0c000001 	stceq	0, cr0, [r0], {1}
    2a98:	4c040500 	cfstr32mi	mvfx0, [r4], {-0}
    2a9c:	0d000001 	stceq	0, cr0, [r0, #-4]
    2aa0:	0000054b 	andeq	r0, r0, fp, asr #10
    2aa4:	01571c04 	cmpeq	r7, r4, lsl #24
    2aa8:	240d0000 	strcs	r0, [sp], #-0
    2aac:	04000004 	streq	r0, [r0], #-4
    2ab0:	00012e1d 	andeq	r2, r1, sp, lsl lr
    2ab4:	005b0b00 	subseq	r0, fp, r0, lsl #22
    2ab8:	018f0000 	orreq	r0, pc, r0
    2abc:	8f0e0000 	svchi	0x000e0000
    2ac0:	01000001 	tsteq	r0, r1
    2ac4:	04040003 	streq	r0, [r4], #-3
    2ac8:	00040607 	andeq	r0, r4, r7, lsl #12
    2acc:	15140f00 	ldrne	r0, [r4, #-3840]	; 0xfffff100
    2ad0:	03050000 	movweq	r0, #20480	; 0x5000
    2ad4:	0000017e 	andeq	r0, r0, lr, ror r1
    2ad8:	97fc0305 	ldrbls	r0, [ip, r5, lsl #6]!
    2adc:	2a0f2000 	bcs	3caae4 <startup-0x1fc3551c>
    2ae0:	06000014 			; <UNDEFINED> instruction: 0x06000014
    2ae4:	00017e03 	andeq	r7, r1, r3, lsl #28
    2ae8:	00030500 	andeq	r0, r3, r0, lsl #10
    2aec:	0f20009b 	svceq	0x0020009b
    2af0:	00001747 	andeq	r1, r0, r7, asr #14
    2af4:	017e0307 	cmneq	lr, r7, lsl #6
    2af8:	03050000 	movweq	r0, #20480	; 0x5000
    2afc:	20009e04 	andcs	r9, r0, r4, lsl #28
    2b00:	00154d0f 	andseq	r4, r5, pc, lsl #26
    2b04:	7e030800 	cdpvc	8, 0, cr0, cr3, cr0, {0}
    2b08:	05000001 	streq	r0, [r0, #-1]
    2b0c:	00a10803 	adceq	r0, r1, r3, lsl #16
    2b10:	17960f20 	ldrne	r0, [r6, r0, lsr #30]
    2b14:	03090000 	movweq	r0, #36864	; 0x9000
    2b18:	0000017e 	andeq	r0, r0, lr, ror r1
    2b1c:	a40c0305 	strge	r0, [ip], #-773	; 0xfffffcfb
    2b20:	690f2000 	stmdbvs	pc, {sp}	; <UNPREDICTABLE>
    2b24:	0a000017 	beq	2b88 <startup-0x1fffd478>
    2b28:	00017e03 	andeq	r7, r1, r3, lsl #28
    2b2c:	10030500 	andne	r0, r3, r0, lsl #10
    2b30:	0f2000a7 	svceq	0x002000a7
    2b34:	00001705 	andeq	r1, r0, r5, lsl #14
    2b38:	017e030b 	cmneq	lr, fp, lsl #6
    2b3c:	03050000 	movweq	r0, #20480	; 0x5000
    2b40:	2000aa14 	andcs	sl, r0, r4, lsl sl
    2b44:	0015aa0f 	andseq	sl, r5, pc, lsl #20
    2b48:	7e030c00 	cdpvc	12, 0, cr0, cr3, cr0, {0}
    2b4c:	05000001 	streq	r0, [r0, #-1]
    2b50:	00ad1803 	adceq	r1, sp, r3, lsl #16
    2b54:	15ba0f20 	ldrne	r0, [sl, #3872]!	; 0xf20
    2b58:	030d0000 	movweq	r0, #53248	; 0xd000
    2b5c:	0000017e 	andeq	r0, r0, lr, ror r1
    2b60:	b01c0305 	andslt	r0, ip, r5, lsl #6
    2b64:	9c0f2000 	stcls	0, cr2, [pc], {-0}
    2b68:	0e000014 	mcreq	0, 0, r0, cr0, cr4, {0}
    2b6c:	00017e03 	andeq	r7, r1, r3, lsl #28
    2b70:	20030500 	andcs	r0, r3, r0, lsl #10
    2b74:	0f2000b3 	svceq	0x002000b3
    2b78:	0000153d 	andeq	r1, r0, sp, lsr r5
    2b7c:	017e030f 	cmneq	lr, pc, lsl #6
    2b80:	03050000 	movweq	r0, #20480	; 0x5000
    2b84:	2000b624 	andcs	fp, r0, r4, lsr #12
    2b88:	0017360f 	andseq	r3, r7, pc, lsl #12
    2b8c:	7e031000 	cdpvc	0, 0, cr1, cr3, cr0, {0}
    2b90:	05000001 	streq	r0, [r0, #-1]
    2b94:	00b92803 	adcseq	r2, r9, r3, lsl #16
    2b98:	17580f20 	ldrbne	r0, [r8, -r0, lsr #30]
    2b9c:	03110000 	tsteq	r1, #0
    2ba0:	0000017e 	andeq	r0, r0, lr, ror r1
    2ba4:	bc2c0305 	stclt	3, cr0, [ip], #-20	; 0xffffffec
    2ba8:	ad0f2000 	stcge	0, cr2, [pc, #-0]	; 2bb0 <startup-0x1fffd450>
    2bac:	12000014 	andne	r0, r0, #20
    2bb0:	00017e03 	andeq	r7, r1, r3, lsl #28
    2bb4:	30030500 	andcc	r0, r3, r0, lsl #10
    2bb8:	0f2000bf 	svceq	0x002000bf
    2bbc:	000015fa 	strdeq	r1, [r0], -sl
    2bc0:	017e0313 	cmneq	lr, r3, lsl r3
    2bc4:	03050000 	movweq	r0, #20480	; 0x5000
    2bc8:	2000c234 	andcs	ip, r0, r4, lsr r2
    2bcc:	00177a0f 	andseq	r7, r7, pc, lsl #20
    2bd0:	7e031400 	cfcpysvc	mvf1, mvf3
    2bd4:	05000001 	streq	r0, [r0, #-1]
    2bd8:	00c53803 	sbceq	r3, r5, r3, lsl #16
    2bdc:	15e00f20 	strbne	r0, [r0, #3872]!	; 0xf20
    2be0:	03150000 	tsteq	r5, #0
    2be4:	0000017e 	andeq	r0, r0, lr, ror r1
    2be8:	c83c0305 	ldmdagt	ip!, {r0, r2, r8, r9}
    2bec:	230f2000 	movwcs	r2, #61440	; 0xf000
    2bf0:	16000016 			; <UNDEFINED> instruction: 0x16000016
    2bf4:	00017e03 	andeq	r7, r1, r3, lsl #28
    2bf8:	40030500 	andmi	r0, r3, r0, lsl #10
    2bfc:	102000cb 	eorne	r0, r0, fp, asr #1
    2c00:	00001716 	andeq	r1, r0, r6, lsl r7
    2c04:	009e1801 	addseq	r1, lr, r1, lsl #16
    2c08:	03050000 	movweq	r0, #20480	; 0x5000
    2c0c:	200052ac 	andcs	r5, r0, ip, lsr #5
    2c10:	00147d10 	andseq	r7, r4, r0, lsl sp
    2c14:	9e190100 	muflse	f0, f1, f0
    2c18:	05000000 	streq	r0, [r0, #-0]
    2c1c:	0052e803 	subseq	lr, r2, r3, lsl #16
    2c20:	15091020 	strne	r1, [r9, #-32]	; 0xffffffe0
    2c24:	1a010000 	bne	42c2c <startup-0x1ffbd3d4>
    2c28:	0000009e 	muleq	r0, lr, r0
    2c2c:	534c0305 	movtpl	r0, #49925	; 0xc305
    2c30:	86102000 	ldrhi	r2, [r0], -r0
    2c34:	01000015 	tsteq	r0, r5, lsl r0
    2c38:	00009e1b 	andeq	r9, r0, fp, lsl lr
    2c3c:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
    2c40:	10200053 	eorne	r0, r0, r3, asr r0
    2c44:	00001662 	andeq	r1, r0, r2, ror #12
    2c48:	009e1c01 	addseq	r1, lr, r1, lsl #24
    2c4c:	03050000 	movweq	r0, #20480	; 0x5000
    2c50:	200052a8 	andcs	r5, r0, r8, lsr #5
    2c54:	0016c810 	andseq	ip, r6, r0, lsl r8
    2c58:	9e1d0100 	muflse	f0, f5, f0
    2c5c:	05000000 	streq	r0, [r0, #-0]
    2c60:	00536003 	subseq	r6, r3, r3
    2c64:	14cc1020 	strbne	r1, [ip], #32
    2c68:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    2c6c:	0000009e 	muleq	r0, lr, r0
    2c70:	51100305 	tstpl	r0, r5, lsl #6
    2c74:	ec102000 	ldc	0, cr2, [r0], {-0}
    2c78:	01000016 	tsteq	r0, r6, lsl r0
    2c7c:	00009e1f 	andeq	r9, r0, pc, lsl lr
    2c80:	64030500 	strvs	r0, [r3], #-1280	; 0xfffffb00
    2c84:	10200051 	eorne	r0, r0, r1, asr r0
    2c88:	000015d5 	ldrdeq	r1, [r0], -r5
    2c8c:	009e2001 	addseq	r2, lr, r1
    2c90:	03050000 	movweq	r0, #20480	; 0x5000
    2c94:	2000510c 	andcs	r5, r0, ip, lsl #2
    2c98:	00178b10 	andseq	r8, r7, r0, lsl fp
    2c9c:	9e210100 	suflss	f0, f1, f0
    2ca0:	05000000 	streq	r0, [r0, #-0]
    2ca4:	00528c03 	subseq	r8, r2, r3, lsl #24
    2ca8:	16d31020 	ldrbne	r1, [r3], r0, lsr #32
    2cac:	22010000 	andcs	r0, r1, #0
    2cb0:	0000009e 	muleq	r0, lr, r0
    2cb4:	52e00305 	rscpl	r0, r0, #335544320	; 0x14000000
    2cb8:	e6102000 	ldr	r2, [r0], -r0
    2cbc:	01000014 	tsteq	r0, r4, lsl r0
    2cc0:	00009e23 	andeq	r9, r0, r3, lsr #28
    2cc4:	30030500 	andcc	r0, r3, r0, lsl #10
    2cc8:	10200051 	eorne	r0, r0, r1, asr r0
    2ccc:	0000156c 	andeq	r1, r0, ip, ror #10
    2cd0:	009e2401 	addseq	r2, lr, r1, lsl #8
    2cd4:	03050000 	movweq	r0, #20480	; 0x5000
    2cd8:	2000512c 	andcs	r5, r0, ip, lsr #2
    2cdc:	0015f010 	andseq	pc, r5, r0, lsl r0	; <UNPREDICTABLE>
    2ce0:	9e250100 	suflss	f0, f5, f0
    2ce4:	05000000 	streq	r0, [r0, #-0]
    2ce8:	00517403 	subseq	r7, r1, r3, lsl #8
    2cec:	16a31020 	strtne	r1, [r3], r0, lsr #32
    2cf0:	26010000 	strcs	r0, [r1], -r0
    2cf4:	0000009e 	muleq	r0, lr, r0
    2cf8:	52e40305 	rscpl	r0, r4, #335544320	; 0x14000000
    2cfc:	2b102000 	blcs	40ad04 <startup-0x1fbf52fc>
    2d00:	01000017 	tsteq	r0, r7, lsl r0
    2d04:	00009e27 	andeq	r9, r0, r7, lsr #28
    2d08:	7c030500 	cfstr32vc	mvfx0, [r3], {-0}
    2d0c:	10200052 	eorne	r0, r0, r2, asr r0
    2d10:	00001721 	andeq	r1, r0, r1, lsr #14
    2d14:	009e2801 	addseq	r2, lr, r1, lsl #16
    2d18:	03050000 	movweq	r0, #20480	; 0x5000
    2d1c:	200051b4 			; <UNDEFINED> instruction: 0x200051b4
    2d20:	00159110 	andseq	r9, r5, r0, lsl r1
    2d24:	9e290100 	suflse	f0, f1, f0
    2d28:	05000000 	streq	r0, [r0, #-0]
    2d2c:	0051c403 	subseq	ip, r1, r3, lsl #8
    2d30:	155e1020 	ldrbne	r1, [lr, #-32]	; 0xffffffe0
    2d34:	2b010000 	blcs	42d3c <startup-0x1ffbd2c4>
    2d38:	00000062 	andeq	r0, r0, r2, rrx
    2d3c:	53640305 	cmnpl	r4, #335544320	; 0x14000000
    2d40:	95102000 	ldrls	r2, [r0, #-0]
    2d44:	01000016 	tsteq	r0, r6, lsl r0
    2d48:	0000622c 	andeq	r6, r0, ip, lsr #4
    2d4c:	dc030500 	cfstr32le	mvfx0, [r3], {-0}
    2d50:	10200050 	eorne	r0, r0, r0, asr r0
    2d54:	00001530 	andeq	r1, r0, r0, lsr r5
    2d58:	00622d01 	rsbeq	r2, r2, r1, lsl #26
    2d5c:	03050000 	movweq	r0, #20480	; 0x5000
    2d60:	2000529c 	mulcs	r0, ip, r2
    2d64:	00157710 	andseq	r7, r5, r0, lsl r7
    2d68:	622e0100 	eorvs	r0, lr, #0, 2
    2d6c:	05000000 	streq	r0, [r0, #-0]
    2d70:	0050d003 	subseq	sp, r0, r3
    2d74:	16ae1020 	strtne	r1, [lr], r0, lsr #32
    2d78:	2f010000 	svccs	0x00010000
    2d7c:	00000062 	andeq	r0, r0, r2, rrx
    2d80:	53340305 	teqpl	r4, #335544320	; 0x14000000
    2d84:	4a102000 	bmi	40ad8c <startup-0x1fbf5274>
    2d88:	01000016 	tsteq	r0, r6, lsl r0
    2d8c:	00006230 	andeq	r6, r0, r0, lsr r2
    2d90:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
    2d94:	10200052 	eorne	r0, r0, r2, asr r0
    2d98:	000016f6 	strdeq	r1, [r0], -r6
    2d9c:	00623101 	rsbeq	r3, r2, r1, lsl #2
    2da0:	03050000 	movweq	r0, #20480	; 0x5000
    2da4:	20005280 	andcs	r5, r0, r0, lsl #5
    2da8:	0014d710 	andseq	sp, r4, r0, lsl r7
    2dac:	62320100 	eorsvs	r0, r2, #0, 2
    2db0:	05000000 	streq	r0, [r0, #-0]
    2db4:	0051a803 	subseq	sl, r1, r3, lsl #16
    2db8:	17c11020 	strbne	r1, [r1, r0, lsr #32]
    2dbc:	33010000 	movwcc	r0, #4096	; 0x1000
    2dc0:	00000062 	andeq	r0, r0, r2, rrx
    2dc4:	52d40305 	sbcspl	r0, r4, #335544320	; 0x14000000
    2dc8:	cf102000 	svcgt	0x00102000
    2dcc:	01000017 	tsteq	r0, r7, lsl r0
    2dd0:	00006234 	andeq	r6, r0, r4, lsr r2
    2dd4:	28030500 	stmdacs	r3, {r8, sl}
    2dd8:	10200053 	eorne	r0, r0, r3, asr r0
    2ddc:	00001677 	andeq	r1, r0, r7, ror r6
    2de0:	00623501 	rsbeq	r3, r2, r1, lsl #10
    2de4:	03050000 	movweq	r0, #20480	; 0x5000
    2de8:	20005168 	andcs	r5, r0, r8, ror #2
    2dec:	00159c10 	andseq	r9, r5, r0, lsl ip
    2df0:	62360100 	eorsvs	r0, r6, #0, 2
    2df4:	05000000 	streq	r0, [r0, #-0]
    2df8:	0052c803 	subseq	ip, r2, r3, lsl #16
    2dfc:	16861020 	strne	r1, [r6], r0, lsr #32
    2e00:	37010000 	strcc	r0, [r1, -r0]
    2e04:	00000062 	andeq	r0, r0, r2, rrx
    2e08:	53400305 	movtpl	r0, #773	; 0x305
    2e0c:	a6102000 	ldrge	r2, [r0], -r0
    2e10:	01000017 	tsteq	r0, r7, lsl r0
    2e14:	00006238 	andeq	r6, r0, r8, lsr r2
    2e18:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
    2e1c:	10200053 	eorne	r0, r0, r3, asr r0
    2e20:	0000146f 	andeq	r1, r0, pc, ror #8
    2e24:	00623901 	rsbeq	r3, r2, r1, lsl #18
    2e28:	03050000 	movweq	r0, #20480	; 0x5000
    2e2c:	200050c4 	andcs	r5, r0, r4, asr #1
    2e30:	0016dd10 	andseq	sp, r6, r0, lsl sp
    2e34:	623a0100 	eorsvs	r0, sl, #0, 2
    2e38:	05000000 	streq	r0, [r0, #-0]
    2e3c:	00529003 	subseq	r9, r2, r3
    2e40:	14bd1020 	ldrtne	r1, [sp], #32
    2e44:	3b010000 	blcc	42e4c <startup-0x1ffbd1b4>
    2e48:	00000062 	andeq	r0, r0, r2, rrx
    2e4c:	50e80305 	rscpl	r0, r8, r5, lsl #6
    2e50:	1c102000 	ldcne	0, cr2, [r0], {-0}
    2e54:	01000014 	tsteq	r0, r4, lsl r0
    2e58:	0000623c 	andeq	r6, r0, ip, lsr r2
    2e5c:	b0030500 	andlt	r0, r3, r0, lsl #10
    2e60:	10200052 	eorne	r0, r0, r2, asr r0
    2e64:	0000143a 	andeq	r1, r0, sl, lsr r4
    2e68:	014c3f01 	cmpeq	ip, r1, lsl #30
    2e6c:	03050000 	movweq	r0, #20480	; 0x5000
    2e70:	20005178 	andcs	r5, r0, r8, ror r1
    2e74:	0013fb10 	andseq	pc, r3, r0, lsl fp	; <UNPREDICTABLE>
    2e78:	a4400100 	strbge	r0, [r0], #-256	; 0xffffff00
    2e7c:	05000000 	streq	r0, [r0, #-0]
    2e80:	0052f803 	subseq	pc, r2, r3, lsl #16
    2e84:	16bd1020 	ldrtne	r1, [sp], r0, lsr #32
    2e88:	41010000 	mrsmi	r0, (UNDEF: 1)
    2e8c:	000000a4 	andeq	r0, r0, r4, lsr #1
    2e90:	51200305 			; <UNDEFINED> instruction: 0x51200305
    2e94:	25102000 	ldrcs	r2, [r0, #-0]
    2e98:	01000015 	tsteq	r0, r5, lsl r0
    2e9c:	0000a442 	andeq	sl, r0, r2, asr #8
    2ea0:	10030500 	andne	r0, r3, r0, lsl #10
    2ea4:	10200053 	eorne	r0, r0, r3, asr r0
    2ea8:	0000163f 	andeq	r1, r0, pc, lsr r6
    2eac:	00a44301 	adceq	r4, r4, r1, lsl #6
    2eb0:	03050000 	movweq	r0, #20480	; 0x5000
    2eb4:	20005114 	andcs	r5, r0, r4, lsl r1
    2eb8:	00141110 	andseq	r1, r4, r0, lsl r1
    2ebc:	a4440100 	strbge	r0, [r4], #-256	; 0xffffff00
    2ec0:	05000000 	streq	r0, [r0, #-0]
    2ec4:	00515803 	subseq	r5, r1, r3, lsl #16
    2ec8:	14911020 	ldrne	r1, [r1], #32
    2ecc:	45010000 	strmi	r0, [r1, #-0]
    2ed0:	000000a4 	andeq	r0, r0, r4, lsr #1
    2ed4:	519c0305 	orrspl	r0, ip, r5, lsl #6
    2ed8:	34102000 	ldrcc	r2, [r0], #-0
    2edc:	01000016 	tsteq	r0, r6, lsl r0
    2ee0:	0000a446 	andeq	sl, r0, r6, asr #8
    2ee4:	04030500 	streq	r0, [r3], #-1280	; 0xfffffb00
    2ee8:	10200053 	eorne	r0, r0, r3, asr r0
    2eec:	000013f0 	strdeq	r1, [r0], -r0
    2ef0:	00a44701 	adceq	r4, r4, r1, lsl #14
    2ef4:	03050000 	movweq	r0, #20480	; 0x5000
    2ef8:	2000514c 	andcs	r5, r0, ip, asr #2
    2efc:	00140610 	andseq	r0, r4, r0, lsl r6
    2f00:	a4480100 	strbge	r0, [r8], #-256	; 0xffffff00
    2f04:	05000000 	streq	r0, [r0, #-0]
    2f08:	0050f403 	subseq	pc, r0, r3, lsl #8
    2f0c:	16171020 	ldrne	r1, [r7], -r0, lsr #32
    2f10:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    2f14:	000000a4 	andeq	r0, r0, r4, lsr #1
    2f18:	51340305 	teqpl	r4, r5, lsl #6
    2f1c:	de102000 	cdple	0, 1, cr2, cr0, cr0, {0}
    2f20:	01000017 	tsteq	r0, r7, lsl r0
    2f24:	0000a44a 	andeq	sl, r0, sl, asr #8
    2f28:	ec030500 	cfstr32	mvfx0, [r3], {-0}
    2f2c:	10200052 	eorne	r0, r0, r2, asr r0
    2f30:	000014f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    2f34:	00a44b01 	adceq	r4, r4, r1, lsl #22
    2f38:	03050000 	movweq	r0, #20480	; 0x5000
    2f3c:	20005100 	andcs	r5, r0, r0, lsl #2
    2f40:	00160b10 	andseq	r0, r6, r0, lsl fp
    2f44:	a44c0100 	strbge	r0, [ip], #-256	; 0xffffff00
    2f48:	05000000 	streq	r0, [r0, #-0]
    2f4c:	0051b803 	subseq	fp, r1, r3, lsl #16
    2f50:	17b51020 	ldrne	r1, [r5, r0, lsr #32]!
    2f54:	4d010000 	stcmi	0, cr0, [r1, #-0]
    2f58:	000000a4 	andeq	r0, r0, r4, lsr #1
    2f5c:	51400305 	cmppl	r0, r5, lsl #6
    2f60:	fd102000 	ldc2	0, cr2, [r0, #-0]
    2f64:	01000014 	tsteq	r0, r4, lsl r0
    2f68:	0000a44e 	andeq	sl, r0, lr, asr #8
    2f6c:	50030500 	andpl	r0, r3, r0, lsl #10
    2f70:	0b200053 	bleq	8030c4 <startup-0x1f7fcf3c>
    2f74:	000000a4 	andeq	r0, r0, r4, lsr #1
    2f78:	0000064c 	andeq	r0, r0, ip, asr #12
    2f7c:	00018f11 	andeq	r8, r1, r1, lsl pc
    2f80:	10000e00 	andne	r0, r0, r0, lsl #28
    2f84:	0000166c 	andeq	r1, r0, ip, ror #12
    2f88:	063c4f01 	ldrteq	r4, [ip], -r1, lsl #30
    2f8c:	03050000 	movweq	r0, #20480	; 0x5000
    2f90:	200051c8 	andcs	r5, r0, r8, asr #3
    2f94:	00036112 	andeq	r6, r3, r2, lsl r1
    2f98:	bc900100 	ldflts	f0, [r0], {0}
    2f9c:	b820002b 	stmdalt	r0!, {r0, r1, r3, r5}
    2fa0:	01000002 	tsteq	r0, r2
    2fa4:	0006929c 	muleq	r6, ip, r2
    2fa8:	143a1300 	ldrtne	r1, [sl], #-768	; 0xfffffd00
    2fac:	90010000 	andls	r0, r1, r0
    2fb0:	00000162 	andeq	r0, r0, r2, ror #2
    2fb4:	0f6c9102 	svceq	0x006c9102
    2fb8:	000008fe 	strdeq	r0, [r0], -lr
    2fbc:	012e9101 			; <UNDEFINED> instruction: 0x012e9101
    2fc0:	03050000 	movweq	r0, #20480	; 0x5000
    2fc4:	2000ce44 	andcs	ip, r0, r4, asr #28
    2fc8:	049e1400 	ldreq	r1, [lr], #1024	; 0x400
    2fcc:	50010000 	andpl	r0, r1, r0
    2fd0:	20002948 	andcs	r2, r0, r8, asr #18
    2fd4:	00000274 	andeq	r0, r0, r4, ror r2
    2fd8:	930f9c01 	movwls	r9, #64513	; 0xfc01
    2fdc:	0100000d 	tsteq	r0, sp
    2fe0:	00009e52 	andeq	r9, r0, r2, asr lr
    2fe4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2fe8:	000d9d0f 	andeq	r9, sp, pc, lsl #26
    2fec:	9e550100 	rdflss	f0, f5, f0
    2ff0:	02000000 	andeq	r0, r0, #0
    2ff4:	930f7091 	movwls	r7, #61585	; 0xf091
    2ff8:	0100000b 	tsteq	r0, fp
    2ffc:	00009e58 	andeq	r9, r0, r8, asr lr
    3000:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3004:	000ab40f 	andeq	fp, sl, pc, lsl #8
    3008:	9e5c0100 	rdflse	f0, f4, f0
    300c:	02000000 	andeq	r0, r0, #0
    3010:	bd0f6891 	stclt	8, cr6, [pc, #-580]	; 2dd4 <startup-0x1fffd22c>
    3014:	0100000d 	tsteq	r0, sp
    3018:	00009e5f 	andeq	r9, r0, pc, asr lr
    301c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3020:	000b510f 	andeq	r5, fp, pc, lsl #2
    3024:	9e620100 	powlss	f0, f2, f0
    3028:	02000000 	andeq	r0, r0, #0
    302c:	690f6091 	stmdbvs	pc, {r0, r4, r7, sp, lr}	; <UNPREDICTABLE>
    3030:	0100000d 	tsteq	r0, sp
    3034:	00009e67 	andeq	r9, r0, r7, ror #28
    3038:	5c910200 	lfmpl	f0, 4, [r1], {0}
    303c:	000dc70f 	andeq	ip, sp, pc, lsl #14
    3040:	9e6a0100 	powlse	f0, f2, f0
    3044:	02000000 	andeq	r0, r0, #0
    3048:	d10f5891 			; <UNDEFINED> instruction: 0xd10f5891
    304c:	0100000d 	tsteq	r0, sp
    3050:	00009e6d 	andeq	r9, r0, sp, ror #28
    3054:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    3058:	000ada0f 	andeq	sp, sl, pc, lsl #20
    305c:	9e710100 	rpwlss	f0, f1, f0
    3060:	02000000 	andeq	r0, r0, #0
    3064:	1e0f5091 	mcrne	0, 0, r5, cr15, cr1, {4}
    3068:	0100000b 	tsteq	r0, fp
    306c:	00009e74 	andeq	r9, r0, r4, ror lr
    3070:	4c910200 	lfmmi	f0, 4, [r1], {0}
    3074:	000b280f 	andeq	r2, fp, pc, lsl #16
    3078:	9e770100 	rpwlss	f0, f7, f0
    307c:	02000000 	andeq	r0, r0, #0
    3080:	e60f4891 			; <UNDEFINED> instruction: 0xe60f4891
    3084:	0100000d 	tsteq	r0, sp
    3088:	00009e7b 	andeq	r9, r0, fp, ror lr
    308c:	44910200 	ldrmi	r0, [r1], #512	; 0x200
    3090:	000c6e0f 	andeq	r6, ip, pc, lsl #28
    3094:	9e7e0100 	rpwlse	f0, f6, f0
    3098:	02000000 	andeq	r0, r0, #0
    309c:	470f4091 			; <UNDEFINED> instruction: 0x470f4091
    30a0:	0100000b 	tsteq	r0, fp
    30a4:	00009e81 	andeq	r9, r0, r1, lsl #29
    30a8:	bc910300 	ldclt	3, cr0, [r1], {0}
    30ac:	15cb0f7f 	strbne	r0, [fp, #3967]	; 0xf7f
    30b0:	85010000 	strhi	r0, [r1, #-0]
    30b4:	0000009e 	muleq	r0, lr, r0
    30b8:	7fb89103 	svcvc	0x00b89103
    30bc:	0016580f 	andseq	r5, r6, pc, lsl #16
    30c0:	9e880100 	rmflse	f0, f0, f0
    30c4:	03000000 	movweq	r0, #0
    30c8:	0f7fb491 	svceq	0x007fb491
    30cc:	00001487 	andeq	r1, r0, r7, lsl #9
    30d0:	009e8b01 	addseq	r8, lr, r1, lsl #22
    30d4:	91030000 	mrsls	r0, (UNDEF: 3)
    30d8:	00007fb0 			; <UNDEFINED> instruction: 0x00007fb0
    30dc:	0000089f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    30e0:	09840004 	stmibeq	r4, {r2}
    30e4:	01040000 	mrseq	r0, (UNDEF: 4)
    30e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    30ec:	0018cf0c 	andseq	ip, r8, ip, lsl #30
    30f0:	002e7400 	eoreq	r7, lr, r0, lsl #8
    30f4:	000e4420 	andeq	r4, lr, r0, lsr #8
    30f8:	000f7a00 	andeq	r7, pc, r0, lsl #20
    30fc:	020c0200 	andeq	r0, ip, #0, 4
    3100:	00004e05 	andeq	r4, r0, r5, lsl #28
    3104:	035b0300 	cmpeq	fp, #0, 6
    3108:	07020000 	streq	r0, [r2, -r0]
    310c:	0000004e 	andeq	r0, r0, lr, asr #32
    3110:	070e0300 	streq	r0, [lr, -r0, lsl #6]
    3114:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    3118:	0000004e 	andeq	r0, r0, lr, asr #32
    311c:	190d0304 	stmdbne	sp, {r2, r8, r9}
    3120:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    3124:	00000055 	andeq	r0, r0, r5, asr r0
    3128:	04040008 	streq	r0, [r4], #-8
    312c:	00038907 	andeq	r8, r3, r7, lsl #18
    3130:	5b040500 	blpl	104538 <startup-0x1fefbac8>
    3134:	04000000 	streq	r0, [r0], #-0
    3138:	04c80801 	strbeq	r0, [r8], #2049	; 0x801
    313c:	5f060000 	svcpl	0x00060000
    3140:	0200001a 	andeq	r0, r0, #26
    3144:	0000210a 	andeq	r2, r0, sl, lsl #2
    3148:	00340700 	eorseq	r0, r4, r0, lsl #14
    314c:	030c0000 	movweq	r0, #49152	; 0xc000
    3150:	00009e06 	andeq	r9, r0, r6, lsl #28
    3154:	05be0300 	ldreq	r0, [lr, #768]!	; 0x300
    3158:	07030000 	streq	r0, [r3, -r0]
    315c:	0000009e 	muleq	r0, lr, r0
    3160:	003b0300 	eorseq	r0, fp, r0, lsl #6
    3164:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    3168:	0000009e 	muleq	r0, lr, r0
    316c:	00300304 	eorseq	r0, r0, r4, lsl #6
    3170:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    3174:	0000009e 	muleq	r0, lr, r0
    3178:	04050008 	streq	r0, [r5], #-8
    317c:	00000062 	andeq	r0, r0, r2, rrx
    3180:	00161d06 	andseq	r1, r6, r6, lsl #26
    3184:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
    3188:	07000000 	streq	r0, [r0, -r0]
    318c:	000006d3 	ldrdeq	r0, [r0], -r3
    3190:	28060424 	stmdacs	r6, {r2, r5, sl}
    3194:	03000001 	movweq	r0, #1
    3198:	00000456 	andeq	r0, r0, r6, asr r4
    319c:	01280704 			; <UNDEFINED> instruction: 0x01280704
    31a0:	03000000 	movweq	r0, #0
    31a4:	000006df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    31a8:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
    31ac:	03040000 	movweq	r0, #16384	; 0x4000
    31b0:	0000062f 	andeq	r0, r0, pc, lsr #12
    31b4:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
    31b8:	03080000 	movweq	r0, #32768	; 0x8000
    31bc:	0000065b 	andeq	r0, r0, fp, asr r6
    31c0:	01460c04 	cmpeq	r6, r4, lsl #24
    31c4:	030c0000 	movweq	r0, #49152	; 0xc000
    31c8:	00000342 	andeq	r0, r0, r2, asr #6
    31cc:	01460d04 	cmpeq	r6, r4, lsl #26
    31d0:	03100000 	tsteq	r0, #0
    31d4:	00000468 	andeq	r0, r0, r8, ror #8
    31d8:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
    31dc:	03140000 	tsteq	r4, #0
    31e0:	00000070 	andeq	r0, r0, r0, ror r0
    31e4:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
    31e8:	03180000 	tsteq	r8, #0
    31ec:	000003d9 	ldrdeq	r0, [r0], -r9
    31f0:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
    31f4:	031c0000 	tsteq	ip, #0
    31f8:	000003e9 	andeq	r0, r0, r9, ror #7
    31fc:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
    3200:	00200000 	eoreq	r0, r0, r0
    3204:	00a40405 	adceq	r0, r4, r5, lsl #8
    3208:	04080000 	streq	r0, [r8], #-0
    320c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    3210:	01400900 	cmpeq	r0, r0, lsl #18
    3214:	400a0000 	andmi	r0, sl, r0
    3218:	00000001 	andeq	r0, r0, r1
    321c:	00af0405 	adceq	r0, pc, r5, lsl #8
    3220:	04050000 	streq	r0, [r5], #-0
    3224:	00000135 	andeq	r0, r0, r5, lsr r1
    3228:	0006d406 	andeq	sp, r6, r6, lsl #8
    322c:	af150400 	svcge	0x00150400
    3230:	0b000000 	bleq	3238 <startup-0x1fffcdc8>
    3234:	00000162 	andeq	r0, r0, r2, ror #2
    3238:	00000162 	andeq	r0, r0, r2, ror #2
    323c:	0405000c 	streq	r0, [r5], #-12
    3240:	0000014c 	andeq	r0, r0, ip, asr #2
    3244:	00054b0d 	andeq	r4, r5, sp, lsl #22
    3248:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
    324c:	0d000001 	stceq	0, cr0, [r0, #-4]
    3250:	00000424 	andeq	r0, r0, r4, lsr #8
    3254:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
    3258:	97060000 	strls	r0, [r6, -r0]
    325c:	05000006 	streq	r0, [r0, #-6]
    3260:	00005b24 	andeq	r5, r0, r4, lsr #22
    3264:	017e0b00 	cmneq	lr, r0, lsl #22
    3268:	019a0000 	orrseq	r0, sl, r0
    326c:	9a0e0000 	bls	383274 <startup-0x1fc7cd8c>
    3270:	ff000001 			; <UNDEFINED> instruction: 0xff000001
    3274:	04040003 	streq	r0, [r4], #-3
    3278:	00040607 	andeq	r0, r4, r7, lsl #12
    327c:	18430d00 	stmdane	r3, {r8, sl, fp}^
    3280:	2b050000 	blcs	143288 <startup-0x1febcd78>
    3284:	00000189 	andeq	r0, r0, r9, lsl #3
    3288:	0002480d 	andeq	r4, r2, sp, lsl #16
    328c:	892c0500 	stmdbhi	ip!, {r8, sl}
    3290:	0d000001 	stceq	0, cr0, [r0, #-4]
    3294:	000004d6 	ldrdeq	r0, [r0], -r6
    3298:	01892d05 	orreq	r2, r9, r5, lsl #26
    329c:	6b0d0000 	blvs	3432a4 <startup-0x1fcbcd5c>
    32a0:	05000003 	streq	r0, [r0, #-3]
    32a4:	0001892e 	andeq	r8, r1, lr, lsr #18
    32a8:	02d00d00 	sbcseq	r0, r0, #0, 26
    32ac:	2f050000 	svccs	0x00050000
    32b0:	00000189 	andeq	r0, r0, r9, lsl #3
    32b4:	0006b50d 	andeq	fp, r6, sp, lsl #10
    32b8:	89300500 	ldmdbhi	r0!, {r8, sl}
    32bc:	0d000001 	stceq	0, cr0, [r0, #-4]
    32c0:	000006a5 	andeq	r0, r0, r5, lsr #13
    32c4:	01893105 	orreq	r3, r9, r5, lsl #2
    32c8:	ac0f0000 	stcge	0, cr0, [pc], {-0}
    32cc:	01000001 	tsteq	r0, r1
    32d0:	7003052b 	andvc	r0, r3, fp, lsr #10
    32d4:	0f200063 	svceq	0x00200063
    32d8:	000001b7 			; <UNDEFINED> instruction: 0x000001b7
    32dc:	03052c01 	movweq	r2, #23553	; 0x5c01
    32e0:	20005770 	andcs	r5, r0, r0, ror r7
    32e4:	0001c20f 	andeq	ip, r1, pc, lsl #4
    32e8:	052d0100 	streq	r0, [sp, #-256]!	; 0xffffff00
    32ec:	005f7003 	subseq	r7, pc, r3
    32f0:	01cd0f20 	biceq	r0, sp, r0, lsr #30
    32f4:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    32f8:	67700305 	ldrbvs	r0, [r0, -r5, lsl #6]!
    32fc:	a10f2000 	mrsge	r2, CPSR
    3300:	01000001 	tsteq	r0, r1
    3304:	7003052f 	andvc	r0, r3, pc, lsr #10
    3308:	1020005b 	eorne	r0, r0, fp, asr r0
    330c:	000001d8 	ldrdeq	r0, [r0], -r8
    3310:	70030501 	andvc	r0, r3, r1, lsl #10
    3314:	10200053 	eorne	r0, r0, r3, asr r0
    3318:	000001e3 	andeq	r0, r0, r3, ror #3
    331c:	70030501 	andvc	r0, r3, r1, lsl #10
    3320:	1120006b 			; <UNDEFINED> instruction: 0x1120006b
    3324:	00001879 	andeq	r1, r0, r9, ror r8
    3328:	4e01a801 	cdpmi	8, 0, cr10, cr1, cr1, {0}
    332c:	6a20003c 	bvs	803424 <startup-0x1f7fcbdc>
    3330:	01000000 	mrseq	r0, (UNDEF: 0)
    3334:	00026d9c 	muleq	r2, ip, sp
    3338:	19601200 	stmdbne	r0!, {r9, ip}^
    333c:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    3340:	00012e01 	andeq	r2, r1, r1, lsl #28
    3344:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3348:	180a1100 	stmdane	sl, {r8, ip}
    334c:	a0010000 	andge	r0, r1, r0
    3350:	003bcc01 	eorseq	ip, fp, r1, lsl #24
    3354:	00008220 	andeq	r8, r0, r0, lsr #4
    3358:	a29c0100 	addsge	r0, ip, #0, 2
    335c:	12000002 	andne	r0, r0, #2
    3360:	00001854 	andeq	r1, r0, r4, asr r8
    3364:	6201a001 	andvs	sl, r1, #1
    3368:	02000001 	andeq	r0, r0, #1
    336c:	70136c91 	mulsvc	r3, r1, ip
    3370:	01000004 	tsteq	r0, r4
    3374:	012e01a1 	smulwbeq	lr, r1, r1
    3378:	91020000 	mrsls	r0, (UNDEF: 2)
    337c:	18140074 	ldmdane	r4, {r2, r4, r5, r6}
    3380:	01000019 	tsteq	r0, r9, lsl r0
    3384:	3ac40196 	bcc	ff1039e4 <firstTime.4040+0xdf0f5328>
    3388:	01082000 	mrseq	r2, (UNDEF: 8)
    338c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3390:	000002c6 	andeq	r0, r0, r6, asr #5
    3394:	01006915 	tsteq	r0, r5, lsl r9
    3398:	012e0197 			; <UNDEFINED> instruction: 0x012e0197
    339c:	91020000 	mrsls	r0, (UNDEF: 2)
    33a0:	aa110074 	bge	443578 <startup-0x1fbbca88>
    33a4:	01000018 	tsteq	r0, r8, lsl r0
    33a8:	39940170 	ldmibcc	r4, {r4, r5, r6, r8}
    33ac:	01302000 	teqeq	r0, r0
    33b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    33b4:	0000033a 	andeq	r0, r0, sl, lsr r3
    33b8:	01007815 	tsteq	r0, r5, lsl r8
    33bc:	012e0171 			; <UNDEFINED> instruction: 0x012e0171
    33c0:	91020000 	mrsls	r0, (UNDEF: 2)
    33c4:	0079156c 	rsbseq	r1, r9, ip, ror #10
    33c8:	2e017201 	cdpcs	2, 0, cr7, cr1, cr1, {0}
    33cc:	02000001 	andeq	r0, r0, #1
    33d0:	5b136891 	blpl	4dd61c <startup-0x1fb229e4>
    33d4:	01000003 	tsteq	r0, r3
    33d8:	012e0173 			; <UNDEFINED> instruction: 0x012e0173
    33dc:	91020000 	mrsls	r0, (UNDEF: 2)
    33e0:	070e1364 	streq	r1, [lr, -r4, ror #6]
    33e4:	74010000 	strvc	r0, [r1], #-0
    33e8:	00012e01 	andeq	r2, r1, r1, lsl #28
    33ec:	60910200 	addsvs	r0, r1, r0, lsl #4
    33f0:	00327815 	eorseq	r7, r2, r5, lsl r8
    33f4:	2e017601 	cfmadd32cs	mvax0, mvfx7, mvfx1, mvfx1
    33f8:	02000001 	andeq	r0, r0, #1
    33fc:	69165c91 	ldmdbvs	r6, {r0, r4, r7, sl, fp, ip, lr}
    3400:	017a0100 	cmneq	sl, r0, lsl #2
    3404:	0000012e 	andeq	r0, r0, lr, lsr #2
    3408:	01006b15 	tsteq	r0, r5, lsl fp
    340c:	012e017b 			; <UNDEFINED> instruction: 0x012e017b
    3410:	91020000 	mrsls	r0, (UNDEF: 2)
    3414:	aa110058 	bge	44357c <startup-0x1fbbca84>
    3418:	01000019 	tsteq	r0, r9, lsl r0
    341c:	39420165 	stmdbcc	r2, {r0, r2, r5, r6, r8}^
    3420:	00522000 	subseq	r2, r2, r0
    3424:	9c010000 	stcls	0, cr0, [r1], {-0}
    3428:	000003a3 	andeq	r0, r0, r3, lsr #7
    342c:	01007817 	tsteq	r0, r7, lsl r8
    3430:	012e0165 			; <UNDEFINED> instruction: 0x012e0165
    3434:	91020000 	mrsls	r0, (UNDEF: 2)
    3438:	0079176c 	rsbseq	r1, r9, ip, ror #14
    343c:	2e016501 	cfsh32cs	mvfx6, mvfx1, #1
    3440:	02000001 	andeq	r0, r0, #1
    3444:	5b126891 	blpl	49d690 <startup-0x1fb62970>
    3448:	01000003 	tsteq	r0, r3
    344c:	012e0165 			; <UNDEFINED> instruction: 0x012e0165
    3450:	91020000 	mrsls	r0, (UNDEF: 2)
    3454:	070e1264 	streq	r1, [lr, -r4, ror #4]
    3458:	65010000 	strvs	r0, [r1, #-0]
    345c:	00012e01 	andeq	r2, r1, r1, lsl #28
    3460:	60910200 	addsvs	r0, r1, r0, lsl #4
    3464:	01006915 	tsteq	r0, r5, lsl r9
    3468:	012e0166 			; <UNDEFINED> instruction: 0x012e0166
    346c:	91020000 	mrsls	r0, (UNDEF: 2)
    3470:	006a1574 	rsbeq	r1, sl, r4, ror r5
    3474:	2e016701 	cdpcs	7, 0, cr6, cr1, cr1, {0}
    3478:	02000001 	andeq	r0, r0, #1
    347c:	11007091 	swpne	r7, r1, [r0]
    3480:	0000194d 	andeq	r1, r0, sp, asr #18
    3484:	f0015b01 			; <UNDEFINED> instruction: 0xf0015b01
    3488:	52200038 	eorpl	r0, r0, #56	; 0x38
    348c:	01000000 	mrseq	r0, (UNDEF: 0)
    3490:	00040c9c 	muleq	r4, ip, ip
    3494:	00781700 	rsbseq	r1, r8, r0, lsl #14
    3498:	2e015b01 	vmlacs.f64	d5, d1, d1
    349c:	02000001 	andeq	r0, r0, #1
    34a0:	79176c91 	ldmdbvc	r7, {r0, r4, r7, sl, fp, sp, lr}
    34a4:	015b0100 	cmpeq	fp, r0, lsl #2
    34a8:	0000012e 	andeq	r0, r0, lr, lsr #2
    34ac:	12689102 	rsbne	r9, r8, #-2147483648	; 0x80000000
    34b0:	0000035b 	andeq	r0, r0, fp, asr r3
    34b4:	2e015b01 	vmlacs.f64	d5, d1, d1
    34b8:	02000001 	andeq	r0, r0, #1
    34bc:	0e126491 	cfcmpseq	r6, mvf2, mvf1
    34c0:	01000007 	tsteq	r0, r7
    34c4:	012e015b 			; <UNDEFINED> instruction: 0x012e015b
    34c8:	91020000 	mrsls	r0, (UNDEF: 2)
    34cc:	00691560 	rsbeq	r1, r9, r0, ror #10
    34d0:	2e015c01 	cdpcs	12, 0, cr5, cr1, cr1, {0}
    34d4:	02000001 	andeq	r0, r0, #1
    34d8:	6a157491 	bvs	560724 <startup-0x1fa9f8dc>
    34dc:	015d0100 	cmpeq	sp, r0, lsl #2
    34e0:	0000012e 	andeq	r0, r0, lr, lsr #2
    34e4:	00709102 	rsbseq	r9, r0, r2, lsl #2
    34e8:	00188411 	andseq	r8, r8, r1, lsl r4
    34ec:	01450100 	mrseq	r0, (UNDEF: 85)
    34f0:	200037d6 	ldrdcs	r3, [r0], -r6
    34f4:	0000011a 	andeq	r0, r0, sl, lsl r1
    34f8:	04b79c01 	ldrteq	r9, [r7], #3073	; 0xc01
    34fc:	73170000 	tstvc	r7, #0
    3500:	01450100 	mrseq	r0, (UNDEF: 85)
    3504:	0000009e 	muleq	r0, lr, r0
    3508:	17549102 	ldrbne	r9, [r4, -r2, lsl #2]
    350c:	45010078 	strmi	r0, [r1, #-120]	; 0xffffff88
    3510:	00012e01 	andeq	r2, r1, r1, lsl #28
    3514:	50910200 	addspl	r0, r1, r0, lsl #4
    3518:	01007917 	tsteq	r0, r7, lsl r9
    351c:	012e0145 			; <UNDEFINED> instruction: 0x012e0145
    3520:	91020000 	mrsls	r0, (UNDEF: 2)
    3524:	6573174c 	ldrbvs	r1, [r3, #-1868]!	; 0xfffff8b4
    3528:	45010074 	strmi	r0, [r1, #-116]	; 0xffffff8c
    352c:	00012e01 	andeq	r2, r1, r1, lsl #28
    3530:	48910200 	ldmmi	r1, {r9}
    3534:	00191212 	andseq	r1, r9, r2, lsl r2
    3538:	01450100 	mrseq	r0, (UNDEF: 85)
    353c:	0000012e 	andeq	r0, r0, lr, lsr #2
    3540:	15009102 	strne	r9, [r0, #-258]	; 0xfffffefe
    3544:	46010069 	strmi	r0, [r1], -r9, rrx
    3548:	00012e01 	andeq	r2, r1, r1, lsl #28
    354c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3550:	01006a15 	tsteq	r0, r5, lsl sl
    3554:	012e0146 			; <UNDEFINED> instruction: 0x012e0146
    3558:	91020000 	mrsls	r0, (UNDEF: 2)
    355c:	006b1568 	rsbeq	r1, fp, r8, ror #10
    3560:	2e014601 	cfmadd32cs	mvax0, mvfx4, mvfx1, mvfx1
    3564:	02000001 	andeq	r0, r0, #1
    3568:	85136491 	ldrhi	r6, [r3, #-1169]	; 0xfffffb6f
    356c:	01000019 	tsteq	r0, r9, lsl r0
    3570:	012e0146 			; <UNDEFINED> instruction: 0x012e0146
    3574:	91020000 	mrsls	r0, (UNDEF: 2)
    3578:	380e1860 	stmdacc	lr, {r5, r6, fp, ip}
    357c:	00bc2000 	adcseq	r2, ip, r0
    3580:	80130000 	andshi	r0, r3, r0
    3584:	01000019 	tsteq	r0, r9, lsl r0
    3588:	005b014d 	subseq	r0, fp, sp, asr #2
    358c:	91020000 	mrsls	r0, (UNDEF: 2)
    3590:	1100005f 	qaddne	r0, pc, r0	; <UNPREDICTABLE>
    3594:	00001859 	andeq	r1, r0, r9, asr r8
    3598:	00013001 	andeq	r3, r1, r1
    359c:	d6200037 			; <UNDEFINED> instruction: 0xd6200037
    35a0:	01000000 	mrseq	r0, (UNDEF: 0)
    35a4:	0005209c 	muleq	r5, ip, r0
    35a8:	17fc1200 	ldrbne	r1, [ip, r0, lsl #4]!
    35ac:	30010000 	andcc	r0, r1, r0
    35b0:	00052001 	andeq	r2, r5, r1
    35b4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    35b8:	01006915 	tsteq	r0, r5, lsl r9
    35bc:	017e0131 	cmneq	lr, r1, lsr r1
    35c0:	91020000 	mrsls	r0, (UNDEF: 2)
    35c4:	006a1577 	rsbeq	r1, sl, r7, ror r5
    35c8:	7e013101 	adfvcs	f3, f1, f1
    35cc:	02000001 	andeq	r0, r0, #1
    35d0:	b6137691 			; <UNDEFINED> instruction: 0xb6137691
    35d4:	0100001b 	tsteq	r0, fp, lsl r0
    35d8:	017e0131 	cmneq	lr, r1, lsr r1
    35dc:	91020000 	mrsls	r0, (UNDEF: 2)
    35e0:	0063156f 	rsbeq	r1, r3, pc, ror #10
    35e4:	7e013101 	adfvcs	f3, f1, f1
    35e8:	02000001 	andeq	r0, r0, #1
    35ec:	6b157591 	blvs	560c38 <startup-0x1fa9f3c8>
    35f0:	01320100 	teqeq	r2, r0, lsl #2
    35f4:	0000004e 	andeq	r0, r0, lr, asr #32
    35f8:	00709102 	rsbseq	r9, r0, r2, lsl #2
    35fc:	017e0405 	cmneq	lr, r5, lsl #8
    3600:	03110000 	tsteq	r1, #0
    3604:	01000018 	tsteq	r0, r8, lsl r0
    3608:	35600108 	strbcc	r0, [r0, #-264]!	; 0xfffffef8
    360c:	01a02000 	moveq	r2, r0
    3610:	9c010000 	stcls	0, cr0, [r1], {-0}
    3614:	000005a0 	andeq	r0, r0, r0, lsr #11
    3618:	01007817 	tsteq	r0, r7, lsl r8
    361c:	012e0108 			; <UNDEFINED> instruction: 0x012e0108
    3620:	91020000 	mrsls	r0, (UNDEF: 2)
    3624:	00791764 	rsbseq	r1, r9, r4, ror #14
    3628:	2e010801 	cdpcs	8, 0, cr0, cr1, cr1, {0}
    362c:	02000001 	andeq	r0, r0, #1
    3630:	73176091 	tstvc	r7, #145	; 0x91
    3634:	01007465 	tsteq	r0, r5, ror #8
    3638:	012e0108 			; <UNDEFINED> instruction: 0x012e0108
    363c:	91020000 	mrsls	r0, (UNDEF: 2)
    3640:	195b135c 	ldmdbne	fp, {r2, r3, r4, r6, r8, r9, ip}^
    3644:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    3648:	00017e01 	andeq	r7, r1, r1, lsl #28
    364c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3650:	01006315 	tsteq	r0, r5, lsl r3
    3654:	017e0109 	cmneq	lr, r9, lsl #2
    3658:	91020000 	mrsls	r0, (UNDEF: 2)
    365c:	1bb6136f 	blne	fed88420 <firstTime.4040+0xded79d64>
    3660:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    3664:	00017e01 	andeq	r7, r1, r1, lsl #28
    3668:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    366c:	0019b913 	andseq	fp, r9, r3, lsl r9
    3670:	010a0100 	mrseq	r0, (UNDEF: 26)
    3674:	0000012e 	andeq	r0, r0, lr, lsr #2
    3678:	00709102 	rsbseq	r9, r0, r2, lsl #2
    367c:	00184e19 	andseq	r4, r8, r9, lsl lr
    3680:	e0de0100 	sbcs	r0, lr, r0, lsl #2
    3684:	80200033 	eorhi	r0, r0, r3, lsr r0
    3688:	01000001 	tsteq	r0, r1
    368c:	0006069c 	muleq	r6, ip, r6
    3690:	00781a00 	rsbseq	r1, r8, r0, lsl #20
    3694:	012ede01 			; <UNDEFINED> instruction: 0x012ede01
    3698:	91020000 	mrsls	r0, (UNDEF: 2)
    369c:	00791a6c 	rsbseq	r1, r9, ip, ror #20
    36a0:	012ede01 			; <UNDEFINED> instruction: 0x012ede01
    36a4:	91020000 	mrsls	r0, (UNDEF: 2)
    36a8:	65731a68 	ldrbvs	r1, [r3, #-2664]!	; 0xfffff598
    36ac:	de010074 	mcrle	0, 0, r0, cr1, cr4, {3}
    36b0:	0000012e 	andeq	r0, r0, lr, lsr #2
    36b4:	1b649102 	blne	1927ac4 <startup-0x1e6d853c>
    36b8:	00001912 	andeq	r1, r0, r2, lsl r9
    36bc:	012ede01 			; <UNDEFINED> instruction: 0x012ede01
    36c0:	91020000 	mrsls	r0, (UNDEF: 2)
    36c4:	195b1c60 	ldmdbne	fp, {r5, r6, sl, fp, ip}^
    36c8:	df010000 	svcle	0x00010000
    36cc:	0000017e 	andeq	r0, r0, lr, ror r1
    36d0:	1c779102 	ldfnep	f1, [r7], #-8
    36d4:	000019b9 			; <UNDEFINED> instruction: 0x000019b9
    36d8:	012ee001 			; <UNDEFINED> instruction: 0x012ee001
    36dc:	91020000 	mrsls	r0, (UNDEF: 2)
    36e0:	0c1d0070 	ldceq	0, cr0, [sp], {112}	; 0x70
    36e4:	0100001a 	tsteq	r0, sl, lsl r0
    36e8:	00337ad1 	ldrsbteq	r7, [r3], -r1
    36ec:	00006620 	andeq	r6, r0, r0, lsr #12
    36f0:	429c0100 	addsmi	r0, ip, #0, 2
    36f4:	1c000006 	stcne	0, cr0, [r0], {6}
    36f8:	000017ea 	andeq	r1, r0, sl, ror #15
    36fc:	017ed201 	cmneq	lr, r1, lsl #4
    3700:	91020000 	mrsls	r0, (UNDEF: 2)
    3704:	33881877 	orrcc	r1, r8, #7798784	; 0x770000
    3708:	003e2000 	eorseq	r2, lr, r0
    370c:	611e0000 	tstvs	lr, r0
    3710:	01006464 	tsteq	r0, r4, ror #8
    3714:	00017ed6 	ldrdeq	r7, [r1], -r6
    3718:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    371c:	f91f0000 			; <UNDEFINED> instruction: 0xf91f0000
    3720:	01000019 	tsteq	r0, r9, lsl r0
    3724:	00330cbd 	ldrhteq	r0, [r3], -sp
    3728:	00006e20 	andeq	r6, r0, r0, lsr #28
    372c:	1d9c0100 	ldfnes	f0, [ip]
    3730:	0000196d 	andeq	r1, r0, sp, ror #18
    3734:	32c6b501 	sbccc	fp, r6, #4194304	; 0x400000
    3738:	00462000 	subeq	r2, r6, r0
    373c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3740:	00000685 	andeq	r0, r0, r5, lsl #13
    3744:	0018351b 	andseq	r3, r8, fp, lsl r5
    3748:	7eb50100 	frdvcs	f0, f5, f0
    374c:	02000001 	andeq	r0, r0, #1
    3750:	b61b7791 			; <UNDEFINED> instruction: 0xb61b7791
    3754:	0100001b 	tsteq	r0, fp, lsl r0
    3758:	00017eb5 			; <UNDEFINED> instruction: 0x00017eb5
    375c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    3760:	18271d00 	stmdane	r7!, {r8, sl, fp, ip}
    3764:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    3768:	20003280 	andcs	r3, r0, r0, lsl #5
    376c:	00000046 	andeq	r0, r0, r6, asr #32
    3770:	06b79c01 	ldrteq	r9, [r7], r1, lsl #24
    3774:	351b0000 	ldrcc	r0, [fp, #-0]
    3778:	01000018 	tsteq	r0, r8, lsl r0
    377c:	00017eae 	andeq	r7, r1, lr, lsr #29
    3780:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3784:	001bb61b 	andseq	fp, fp, fp, lsl r6
    3788:	7eae0100 	fdvvce	f0, f6, f0
    378c:	02000001 	andeq	r0, r0, #1
    3790:	1d007691 	stcne	6, cr7, [r0, #-580]	; 0xfffffdbc
    3794:	0000189c 	muleq	r0, ip, r8
    3798:	32029901 	andcc	r9, r2, #16384	; 0x4000
    379c:	007e2000 	rsbseq	r2, lr, r0
    37a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    37a4:	000006e9 	andeq	r0, r0, r9, ror #13
    37a8:	00063f1b 	andeq	r3, r6, fp, lsl pc
    37ac:	7e990100 	fmlvce	f0, f1, f0
    37b0:	02000001 	andeq	r0, r0, #1
    37b4:	b61b7791 			; <UNDEFINED> instruction: 0xb61b7791
    37b8:	0100001b 	tsteq	r0, fp, lsl r0
    37bc:	00017e99 	muleq	r1, r9, lr
    37c0:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    37c4:	19002000 	stmdbne	r0, {sp}
    37c8:	94010000 	strls	r0, [r1], #-0
    37cc:	0000012e 	andeq	r0, r0, lr, lsr #2
    37d0:	200031d8 	ldrdcs	r3, [r0], -r8
    37d4:	0000002a 	andeq	r0, r0, sl, lsr #32
    37d8:	07119c01 	ldreq	r9, [r1, -r1, lsl #24]
    37dc:	b61b0000 	ldrlt	r0, [fp], -r0
    37e0:	0100001b 	tsteq	r0, fp, lsl r0
    37e4:	00017e94 	muleq	r1, r4, lr
    37e8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    37ec:	17ef2100 	strbne	r2, [pc, r0, lsl #2]!
    37f0:	7b010000 	blvc	437f8 <startup-0x1ffbc808>
    37f4:	0000017e 	andeq	r0, r0, lr, ror r1
    37f8:	20003144 	andcs	r3, r0, r4, asr #2
    37fc:	00000094 	muleq	r0, r4, r0
    3800:	07469c01 	strbeq	r9, [r6, -r1, lsl #24]
    3804:	b61b0000 	ldrlt	r0, [fp], -r0
    3808:	0100001b 	tsteq	r0, fp, lsl r0
    380c:	00017e7b 	andeq	r7, r1, fp, ror lr
    3810:	6f910200 	svcvs	0x00910200
    3814:	0076721e 	rsbseq	r7, r6, lr, lsl r2
    3818:	005b8401 	subseq	r8, fp, r1, lsl #8
    381c:	91020000 	mrsls	r0, (UNDEF: 2)
    3820:	d11d0077 	tstle	sp, r7, ror r0
    3824:	01000019 	tsteq	r0, r9, lsl r0
    3828:	0030d665 	eorseq	sp, r0, r5, ror #12
    382c:	00006e20 	andeq	r6, r0, r0, lsr #28
    3830:	689c0100 	ldmvs	ip, {r8}
    3834:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    3838:	66010063 	strvs	r0, [r1], -r3, rrx
    383c:	0000017e 	andeq	r0, r0, lr, ror r1
    3840:	00779102 	rsbseq	r9, r7, r2, lsl #2
    3844:	0019bf1d 	andseq	fp, r9, sp, lsl pc
    3848:	70500100 	subsvc	r0, r0, r0, lsl #2
    384c:	66200030 			; <UNDEFINED> instruction: 0x66200030
    3850:	01000000 	mrseq	r0, (UNDEF: 0)
    3854:	00078c9c 	muleq	r7, ip, ip
    3858:	1bb61b00 	blne	fed8a460 <firstTime.4040+0xded7bda4>
    385c:	50010000 	andpl	r0, r1, r0
    3860:	0000017e 	andeq	r0, r0, lr, ror r1
    3864:	00779102 	rsbseq	r9, r7, r2, lsl #2
    3868:	0018b822 	andseq	fp, r8, r2, lsr #16
    386c:	18490100 	stmdane	r9, {r8}^
    3870:	58200030 	stmdapl	r0!, {r4, r5}
    3874:	01000000 	mrseq	r0, (UNDEF: 0)
    3878:	0007ba9c 	muleq	r7, ip, sl
    387c:	00781a00 	rsbseq	r1, r8, r0, lsl #20
    3880:	017e4901 	cmneq	lr, r1, lsl #18
    3884:	91020000 	mrsls	r0, (UNDEF: 2)
    3888:	00631e6f 	rsbeq	r1, r3, pc, ror #28
    388c:	017e4a01 	cmneq	lr, r1, lsl #20
    3890:	91020000 	mrsls	r0, (UNDEF: 2)
    3894:	2c220077 	stccs	0, cr0, [r2], #-476	; 0xfffffe24
    3898:	01000019 	tsteq	r0, r9, lsl r0
    389c:	002fc841 	eoreq	ip, pc, r1, asr #16
    38a0:	00005020 	andeq	r5, r0, r0, lsr #32
    38a4:	e89c0100 	ldm	ip, {r8}
    38a8:	1a000007 	bne	38cc <startup-0x1fffc734>
    38ac:	41010078 	tstmi	r1, r8, ror r0
    38b0:	0000017e 	andeq	r0, r0, lr, ror r1
    38b4:	1e6f9102 	lgnnee	f1, f2
    38b8:	42010063 	andmi	r0, r1, #99	; 0x63
    38bc:	0000017e 	andeq	r0, r0, lr, ror r1
    38c0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    38c4:	0019941f 	andseq	r9, r9, pc, lsl r4
    38c8:	983a0100 	ldmdals	sl!, {r8}
    38cc:	3020002f 	eorcc	r0, r0, pc, lsr #32
    38d0:	01000000 	mrseq	r0, (UNDEF: 0)
    38d4:	183d1f9c 	ldmdane	sp!, {r2, r3, r4, r7, r8, r9, sl, fp, ip}
    38d8:	37010000 	strcc	r0, [r1, -r0]
    38dc:	20002f80 	andcs	r2, r0, r0, lsl #31
    38e0:	00000018 	andeq	r0, r0, r8, lsl r0
    38e4:	e4199c01 	ldr	r9, [r9], #-3073	; 0xfffff3ff
    38e8:	01000019 	tsteq	r0, r9, lsl r0
    38ec:	002f4e32 	eoreq	r4, pc, r2, lsr lr	; <UNPREDICTABLE>
    38f0:	00003220 	andeq	r3, r0, r0, lsr #4
    38f4:	3a9c0100 	bcc	fe703cfc <firstTime.4040+0xde6f5640>
    38f8:	1b000008 	blne	3920 <startup-0x1fffc6e0>
    38fc:	000017fc 	strdeq	r1, [r0], -ip
    3900:	05203201 	streq	r3, [r0, #-513]!	; 0xfffffdff
    3904:	91020000 	mrsls	r0, (UNDEF: 2)
    3908:	00691e6c 	rsbeq	r1, r9, ip, ror #28
    390c:	012e3301 			; <UNDEFINED> instruction: 0x012e3301
    3910:	91020000 	mrsls	r0, (UNDEF: 2)
    3914:	6d1d0074 	ldcvs	0, cr0, [sp, #-464]	; 0xfffffe30
    3918:	01000018 	tsteq	r0, r8, lsl r0
    391c:	002f2821 	eoreq	r2, pc, r1, lsr #16
    3920:	00002620 	andeq	r2, r0, r0, lsr #12
    3924:	5d9c0100 	ldfpls	f0, [ip]
    3928:	1a000008 	bne	3950 <startup-0x1fffc6b0>
    392c:	0100736d 	tsteq	r0, sp, ror #6
    3930:	00004e21 	andeq	r4, r0, r1, lsr #28
    3934:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3938:	181b1d00 	ldmdane	fp, {r8, sl, fp, ip}
    393c:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    3940:	20002efc 	strdcs	r2, [r0], -ip
    3944:	0000002c 	andeq	r0, r0, ip, lsr #32
    3948:	08809c01 	stmeq	r0, {r0, sl, fp, ip, pc}
    394c:	751a0000 	ldrvc	r0, [sl, #-0]
    3950:	18010073 	stmdane	r1, {r0, r1, r4, r5, r6}
    3954:	0000004e 	andeq	r0, r0, lr, asr #32
    3958:	00749102 	rsbseq	r9, r4, r2, lsl #2
    395c:	00189023 	andseq	r9, r8, r3, lsr #32
    3960:	b80e0100 	stmdalt	lr, {r8}
    3964:	4420002e 	strtmi	r0, [r0], #-46	; 0xffffffd2
    3968:	01000000 	mrseq	r0, (UNDEF: 0)
    396c:	1941239c 	stmdbne	r1, {r2, r3, r4, r7, r8, r9, sp}^
    3970:	04010000 	streq	r0, [r1], #-0
    3974:	20002e74 	andcs	r2, r0, r4, ror lr
    3978:	00000044 	andeq	r0, r0, r4, asr #32
    397c:	00009c01 	andeq	r9, r0, r1, lsl #24
    3980:	04000001 	streq	r0, [r0], #-1
    3984:	000bb100 	andeq	fp, fp, r0, lsl #2
    3988:	9f010400 	svcls	0x00010400
    398c:	0c000000 	stceq	0, cr0, [r0], {-0}
    3990:	00001a2c 	andeq	r1, r0, ip, lsr #20
    3994:	20003cb8 			; <UNDEFINED> instruction: 0x20003cb8
    3998:	00000028 	andeq	r0, r0, r8, lsr #32
    399c:	000012cc 	andeq	r1, r0, ip, asr #5
    39a0:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
    39a4:	0000004e 	andeq	r0, r0, lr, asr #32
    39a8:	00035b03 	andeq	r5, r3, r3, lsl #22
    39ac:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
    39b0:	00000000 	andeq	r0, r0, r0
    39b4:	00070e03 	andeq	r0, r7, r3, lsl #28
    39b8:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
    39bc:	04000000 	streq	r0, [r0], #-0
    39c0:	00190d03 	andseq	r0, r9, r3, lsl #26
    39c4:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
    39c8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    39cc:	07040400 	streq	r0, [r4, -r0, lsl #8]
    39d0:	00000389 	andeq	r0, r0, r9, lsl #7
    39d4:	005b0405 	subseq	r0, fp, r5, lsl #8
    39d8:	01040000 	mrseq	r0, (UNDEF: 4)
    39dc:	0004c808 	andeq	ip, r4, r8, lsl #16
    39e0:	1a5f0600 	bne	17c51e8 <startup-0x1e83ae18>
    39e4:	0a020000 	beq	839ec <startup-0x1ff7c614>
    39e8:	00000021 	andeq	r0, r0, r1, lsr #32
    39ec:	00003407 	andeq	r3, r0, r7, lsl #8
    39f0:	06030c00 	streq	r0, [r3], -r0, lsl #24
    39f4:	0000009e 	muleq	r0, lr, r0
    39f8:	0005be03 	andeq	fp, r5, r3, lsl #28
    39fc:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
    3a00:	00000000 	andeq	r0, r0, r0
    3a04:	00003b03 	andeq	r3, r0, r3, lsl #22
    3a08:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
    3a0c:	04000000 	streq	r0, [r0], #-0
    3a10:	00003003 	andeq	r3, r0, r3
    3a14:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
    3a18:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3a1c:	62040500 	andvs	r0, r4, #0, 10
    3a20:	06000000 	streq	r0, [r0], -r0
    3a24:	0000161d 	andeq	r1, r0, sp, lsl r6
    3a28:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
    3a2c:	21080000 	mrscs	r0, (UNDEF: 8)
    3a30:	0100001a 	tsteq	r0, sl, lsl r0
    3a34:	003cb803 	eorseq	fp, ip, r3, lsl #16
    3a38:	00002820 	andeq	r2, r0, r0, lsr #16
    3a3c:	fd9c0100 	ldc2	1, cr0, [ip]
    3a40:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    3a44:	00001a26 	andeq	r1, r0, r6, lsr #20
    3a48:	00fd0301 	rscseq	r0, sp, r1, lsl #6
    3a4c:	91020000 	mrsls	r0, (UNDEF: 2)
    3a50:	05be0974 	ldreq	r0, [lr, #2420]!	; 0x974
    3a54:	03010000 	movweq	r0, #4096	; 0x1000
    3a58:	0000009e 	muleq	r0, lr, r0
    3a5c:	09709102 	ldmdbeq	r0!, {r1, r8, ip, pc}^
    3a60:	0000003b 	andeq	r0, r0, fp, lsr r0
    3a64:	009e0301 	addseq	r0, lr, r1, lsl #6
    3a68:	91020000 	mrsls	r0, (UNDEF: 2)
    3a6c:	0030096c 	eorseq	r0, r0, ip, ror #18
    3a70:	03010000 	movweq	r0, #4096	; 0x1000
    3a74:	0000009e 	muleq	r0, lr, r0
    3a78:	00689102 	rsbeq	r9, r8, r2, lsl #2
    3a7c:	00a40405 	adceq	r0, r4, r5, lsl #8
    3a80:	c3000000 	movwgt	r0, #0
    3a84:	04000000 	streq	r0, [r0], #-0
    3a88:	000c3800 	andeq	r3, ip, r0, lsl #16
    3a8c:	9f010400 	svcls	0x00010400
    3a90:	0c000000 	stceq	0, cr0, [r0], {-0}
    3a94:	00001a66 	andeq	r1, r0, r6, ror #20
    3a98:	20003ce0 	andcs	r3, r0, r0, ror #25
    3a9c:	00000028 	andeq	r0, r0, r8, lsr #32
    3aa0:	00001342 	andeq	r1, r0, r2, asr #6
    3aa4:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
    3aa8:	0000004e 	andeq	r0, r0, lr, asr #32
    3aac:	00035b03 	andeq	r5, r3, r3, lsl #22
    3ab0:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
    3ab4:	00000000 	andeq	r0, r0, r0
    3ab8:	00070e03 	andeq	r0, r7, r3, lsl #28
    3abc:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
    3ac0:	04000000 	streq	r0, [r0], #-0
    3ac4:	00190d03 	andseq	r0, r9, r3, lsl #26
    3ac8:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
    3acc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3ad0:	07040400 	streq	r0, [r4, -r0, lsl #8]
    3ad4:	00000389 	andeq	r0, r0, r9, lsl #7
    3ad8:	005b0405 	subseq	r0, fp, r5, lsl #8
    3adc:	01040000 	mrseq	r0, (UNDEF: 4)
    3ae0:	0004c808 	andeq	ip, r4, r8, lsl #16
    3ae4:	1a5f0600 	bne	17c52ec <startup-0x1e83ad14>
    3ae8:	0a020000 	beq	83af0 <startup-0x1ff7c510>
    3aec:	00000021 	andeq	r0, r0, r1, lsr #32
    3af0:	001a5a07 	andseq	r5, sl, r7, lsl #20
    3af4:	e0030100 	and	r0, r3, r0, lsl #2
    3af8:	2820003c 	stmdacs	r0!, {r2, r3, r4, r5}
    3afc:	01000000 	mrseq	r0, (UNDEF: 0)
    3b00:	0000b99c 	muleq	r0, ip, r9
    3b04:	00730800 	rsbseq	r0, r3, r0, lsl #16
    3b08:	00b90301 	adcseq	r0, r9, r1, lsl #6
    3b0c:	91020000 	mrsls	r0, (UNDEF: 2)
    3b10:	190d0974 	stmdbne	sp, {r2, r4, r5, r6, r8, fp}
    3b14:	03010000 	movweq	r0, #4096	; 0x1000
    3b18:	00000055 	andeq	r0, r0, r5, asr r0
    3b1c:	09709102 	ldmdbeq	r0!, {r1, r8, ip, pc}^
    3b20:	0000035b 	andeq	r0, r0, fp, asr r3
    3b24:	00bf0301 	adcseq	r0, pc, r1, lsl #6
    3b28:	91020000 	mrsls	r0, (UNDEF: 2)
    3b2c:	070e096c 	streq	r0, [lr, -ip, ror #18]
    3b30:	03010000 	movweq	r0, #4096	; 0x1000
    3b34:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    3b38:	00689102 	rsbeq	r9, r8, r2, lsl #2
    3b3c:	00620405 	rsbeq	r0, r2, r5, lsl #8
    3b40:	040a0000 	streq	r0, [sl], #-0
    3b44:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    3b48:	01350000 	teqeq	r5, r0
    3b4c:	00040000 	andeq	r0, r4, r0
    3b50:	00000cca 	andeq	r0, r0, sl, asr #25
    3b54:	009f0104 	addseq	r0, pc, r4, lsl #2
    3b58:	cc0c0000 	stcgt	0, cr0, [ip], {-0}
    3b5c:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    3b60:	6c20003d 	stcvs	0, cr0, [r0], #-244	; 0xffffff0c
    3b64:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    3b68:	02000013 	andeq	r0, r0, #19
    3b6c:	ae130218 	mrcge	2, 0, r0, cr3, cr8, {0}
    3b70:	03000000 	movweq	r0, #0
    3b74:	00001a95 	muleq	r0, r5, sl
    3b78:	00ae1402 	adceq	r1, lr, r2, lsl #8
    3b7c:	03000000 	movweq	r0, #0
    3b80:	00001aae 	andeq	r1, r0, lr, lsr #21
    3b84:	00b51502 	adcseq	r1, r5, r2, lsl #10
    3b88:	03040000 	movweq	r0, #16384	; 0x4000
    3b8c:	00001af9 	strdeq	r1, [r0], -r9
    3b90:	00b51602 	adcseq	r1, r5, r2, lsl #12
    3b94:	03060000 	movweq	r0, #24576	; 0x6000
    3b98:	00001b1b 	andeq	r1, r0, fp, lsl fp
    3b9c:	00ae1702 	adceq	r1, lr, r2, lsl #14
    3ba0:	03080000 	movweq	r0, #32768	; 0x8000
    3ba4:	00001aba 			; <UNDEFINED> instruction: 0x00001aba
    3ba8:	00ae1802 	adceq	r1, lr, r2, lsl #16
    3bac:	030c0000 	movweq	r0, #49152	; 0xc000
    3bb0:	00001b2b 	andeq	r1, r0, fp, lsr #22
    3bb4:	00bc1902 	adcseq	r1, ip, r2, lsl #18
    3bb8:	03100000 	tsteq	r0, #0
    3bbc:	00001b23 	andeq	r1, r0, r3, lsr #22
    3bc0:	00bc1a02 	adcseq	r1, ip, r2, lsl #20
    3bc4:	03110000 	tsteq	r1, #0
    3bc8:	00001ac0 	andeq	r1, r0, r0, asr #21
    3bcc:	00b51b02 	adcseq	r1, r5, r2, lsl #22
    3bd0:	03120000 	tsteq	r2, #0
    3bd4:	00001b14 	andeq	r1, r0, r4, lsl fp
    3bd8:	00bc1c02 	adcseq	r1, ip, r2, lsl #24
    3bdc:	03140000 	tsteq	r4, #0
    3be0:	00001aa6 	andeq	r1, r0, r6, lsr #21
    3be4:	00bc1d02 	adcseq	r1, ip, r2, lsl #26
    3be8:	03150000 	tsteq	r5, #0
    3bec:	00001b32 	andeq	r1, r0, r2, lsr fp
    3bf0:	00b51e02 	adcseq	r1, r5, r2, lsl #28
    3bf4:	00160000 	andseq	r0, r6, r0
    3bf8:	89070404 	stmdbhi	r7, {r2, sl}
    3bfc:	04000003 	streq	r0, [r0], #-3
    3c00:	03830702 	orreq	r0, r3, #524288	; 0x80000
    3c04:	01040000 	mrseq	r0, (UNDEF: 4)
    3c08:	0004c808 	andeq	ip, r4, r8, lsl #16
    3c0c:	1ab50500 	bne	fed45014 <firstTime.4040+0xded36958>
    3c10:	1f020000 	svcne	0x00020000
    3c14:	00000021 	andeq	r0, r0, r1, lsr #32
    3c18:	001b0406 	andseq	r0, fp, r6, lsl #8
    3c1c:	040e0100 	streq	r0, [lr], #-256	; 0xffffff00
    3c20:	40000001 	andmi	r0, r0, r1
    3c24:	3420003d 	strtcc	r0, [r0], #-61	; 0xffffffc3
    3c28:	01000000 	mrseq	r0, (UNDEF: 0)
    3c2c:	0001049c 	muleq	r1, ip, r4
    3c30:	69620700 	stmdbvs	r2!, {r8, r9, sl}^
    3c34:	0e010074 	mcreq	0, 0, r0, cr1, cr4, {3}
    3c38:	00000104 	andeq	r0, r0, r4, lsl #2
    3c3c:	08649102 	stmdaeq	r4!, {r1, r8, ip, pc}^
    3c40:	004c4944 	subeq	r4, ip, r4, asr #18
    3c44:	010b0f01 	tsteq	fp, r1, lsl #30
    3c48:	91020000 	mrsls	r0, (UNDEF: 2)
    3c4c:	0409006f 	streq	r0, [r9], #-111	; 0xffffff91
    3c50:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    3c54:	08010400 	stmdaeq	r1, {sl}
    3c58:	000004d1 	ldrdeq	r0, [r0], -r1
    3c5c:	001b3e0a 	andseq	r3, fp, sl, lsl #28
    3c60:	0b080100 	bleq	204068 <startup-0x1fdfbf98>
    3c64:	20000001 	andcs	r0, r0, r1
    3c68:	2020003d 	eorcs	r0, r0, sp, lsr r0
    3c6c:	01000000 	mrseq	r0, (UNDEF: 0)
    3c70:	1a9b0b9c 	bne	fe6c6ae8 <firstTime.4040+0xde6b842c>
    3c74:	04010000 	streq	r0, [r1], #-0
    3c78:	20003d08 	andcs	r3, r0, r8, lsl #26
    3c7c:	00000018 	andeq	r0, r0, r8, lsl r0
    3c80:	ed009c01 	stc	12, cr9, [r0, #-4]
    3c84:	04000004 	streq	r0, [r0], #-4
    3c88:	000d8700 	andeq	r8, sp, r0, lsl #14
    3c8c:	9f010400 	svcls	0x00010400
    3c90:	0c000000 	stceq	0, cr0, [r0], {-0}
    3c94:	00001c83 	andeq	r1, r0, r3, lsl #25
    3c98:	20003d74 	andcs	r3, r0, r4, ror sp
    3c9c:	00000520 	andeq	r0, r0, r0, lsr #10
    3ca0:	0000141e 	andeq	r1, r0, lr, lsl r4
    3ca4:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
    3ca8:	0000004e 	andeq	r0, r0, lr, asr #32
    3cac:	00035b03 	andeq	r5, r3, r3, lsl #22
    3cb0:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
    3cb4:	00000000 	andeq	r0, r0, r0
    3cb8:	00070e03 	andeq	r0, r7, r3, lsl #28
    3cbc:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
    3cc0:	04000000 	streq	r0, [r0], #-0
    3cc4:	00190d03 	andseq	r0, r9, r3, lsl #26
    3cc8:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
    3ccc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3cd0:	07040400 	streq	r0, [r4, -r0, lsl #8]
    3cd4:	00000389 	andeq	r0, r0, r9, lsl #7
    3cd8:	005b0405 	subseq	r0, fp, r5, lsl #8
    3cdc:	01040000 	mrseq	r0, (UNDEF: 4)
    3ce0:	0004c808 	andeq	ip, r4, r8, lsl #16
    3ce4:	1a5f0600 	bne	17c54ec <startup-0x1e83ab14>
    3ce8:	0a020000 	beq	83cf0 <startup-0x1ff7c310>
    3cec:	00000021 	andeq	r0, r0, r1, lsr #32
    3cf0:	00003407 	andeq	r3, r0, r7, lsl #8
    3cf4:	06030c00 	streq	r0, [r3], -r0, lsl #24
    3cf8:	0000009e 	muleq	r0, lr, r0
    3cfc:	0005be03 	andeq	fp, r5, r3, lsl #28
    3d00:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
    3d04:	00000000 	andeq	r0, r0, r0
    3d08:	00003b03 	andeq	r3, r0, r3, lsl #22
    3d0c:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
    3d10:	04000000 	streq	r0, [r0], #-0
    3d14:	00003003 	andeq	r3, r0, r3
    3d18:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
    3d1c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3d20:	62040500 	andvs	r0, r4, #0, 10
    3d24:	06000000 	streq	r0, [r0], -r0
    3d28:	0000161d 	andeq	r1, r0, sp, lsl r6
    3d2c:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
    3d30:	d3070000 	movwle	r0, #28672	; 0x7000
    3d34:	24000006 	strcs	r0, [r0], #-6
    3d38:	01280604 			; <UNDEFINED> instruction: 0x01280604
    3d3c:	56030000 	strpl	r0, [r3], -r0
    3d40:	04000004 	streq	r0, [r0], #-4
    3d44:	00012807 	andeq	r2, r1, r7, lsl #16
    3d48:	df030000 	svcle	0x00030000
    3d4c:	04000006 	streq	r0, [r0], #-6
    3d50:	00012e08 	andeq	r2, r1, r8, lsl #28
    3d54:	2f030400 	svccs	0x00030400
    3d58:	04000006 	streq	r0, [r0], #-6
    3d5c:	00012e09 	andeq	r2, r1, r9, lsl #28
    3d60:	5b030800 	blpl	c5d68 <startup-0x1ff3a298>
    3d64:	04000006 	streq	r0, [r0], #-6
    3d68:	0001460c 	andeq	r4, r1, ip, lsl #12
    3d6c:	42030c00 	andmi	r0, r3, #0, 24
    3d70:	04000003 	streq	r0, [r0], #-3
    3d74:	0001460d 	andeq	r4, r1, sp, lsl #12
    3d78:	68031000 	stmdavs	r3, {ip}
    3d7c:	04000004 	streq	r0, [r0], #-4
    3d80:	00012e10 	andeq	r2, r1, r0, lsl lr
    3d84:	70031400 	andvc	r1, r3, r0, lsl #8
    3d88:	04000000 	streq	r0, [r0], #-0
    3d8c:	00012e11 	andeq	r2, r1, r1, lsl lr
    3d90:	d9031800 	stmdble	r3, {fp, ip}
    3d94:	04000003 	streq	r0, [r0], #-3
    3d98:	00012e12 	andeq	r2, r1, r2, lsl lr
    3d9c:	e9031c00 	stmdb	r3, {sl, fp, ip}
    3da0:	04000003 	streq	r0, [r0], #-3
    3da4:	00012e13 	andeq	r2, r1, r3, lsl lr
    3da8:	05002000 	streq	r2, [r0, #-0]
    3dac:	0000a404 	andeq	sl, r0, r4, lsl #8
    3db0:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
    3db4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    3db8:	00014009 	andeq	r4, r1, r9
    3dbc:	01400a00 	cmpeq	r0, r0, lsl #20
    3dc0:	05000000 	streq	r0, [r0, #-0]
    3dc4:	0000af04 	andeq	sl, r0, r4, lsl #30
    3dc8:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
    3dcc:	06000001 	streq	r0, [r0], -r1
    3dd0:	000006d4 	ldrdeq	r0, [r0], -r4
    3dd4:	00af1504 	adceq	r1, pc, r4, lsl #10
    3dd8:	620b0000 	andvs	r0, fp, #0
    3ddc:	62000001 	andvs	r0, r0, #1
    3de0:	0c000001 	stceq	0, cr0, [r0], {1}
    3de4:	4c040500 	cfstr32mi	mvfx0, [r4], {-0}
    3de8:	0d000001 	stceq	0, cr0, [r0, #-4]
    3dec:	0000054b 	andeq	r0, r0, fp, asr #10
    3df0:	01571c04 	cmpeq	r7, r4, lsl #24
    3df4:	240d0000 	strcs	r0, [sp], #-0
    3df8:	04000004 	streq	r0, [r0], #-4
    3dfc:	00012e1d 	andeq	r2, r1, sp, lsl lr
    3e00:	06970600 	ldreq	r0, [r7], r0, lsl #12
    3e04:	24050000 	strcs	r0, [r5], #-0
    3e08:	0000005b 	andeq	r0, r0, fp, asr r0
    3e0c:	00017e0b 	andeq	r7, r1, fp, lsl #28
    3e10:	00019a00 	andeq	r9, r1, r0, lsl #20
    3e14:	019a0e00 	orrseq	r0, sl, r0, lsl #28
    3e18:	03ff0000 	mvnseq	r0, #0
    3e1c:	07040400 	streq	r0, [r4, -r0, lsl #8]
    3e20:	00000406 	andeq	r0, r0, r6, lsl #8
    3e24:	0018430d 	andseq	r4, r8, sp, lsl #6
    3e28:	892b0500 	stmdbhi	fp!, {r8, sl}
    3e2c:	0d000001 	stceq	0, cr0, [r0, #-4]
    3e30:	00000248 	andeq	r0, r0, r8, asr #4
    3e34:	01892c05 	orreq	r2, r9, r5, lsl #24
    3e38:	d60d0000 	strle	r0, [sp], -r0
    3e3c:	05000004 	streq	r0, [r0, #-4]
    3e40:	0001892d 	andeq	r8, r1, sp, lsr #18
    3e44:	036b0d00 	cmneq	fp, #0, 26
    3e48:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    3e4c:	00000189 	andeq	r0, r0, r9, lsl #3
    3e50:	0002d00d 	andeq	sp, r2, sp
    3e54:	892f0500 	stmdbhi	pc!, {r8, sl}	; <UNPREDICTABLE>
    3e58:	0d000001 	stceq	0, cr0, [r0, #-4]
    3e5c:	000006b5 			; <UNDEFINED> instruction: 0x000006b5
    3e60:	01893005 	orreq	r3, r9, r5
    3e64:	a50d0000 	strge	r0, [sp, #-0]
    3e68:	05000006 	streq	r0, [r0, #-6]
    3e6c:	00018931 	andeq	r8, r1, r1, lsr r9
    3e70:	1c090f00 	stcne	15, cr0, [r9], {-0}
    3e74:	e4010000 	str	r0, [r1], #-0
    3e78:	20004210 	andcs	r4, r0, r0, lsl r2
    3e7c:	00000084 	andeq	r0, r0, r4, lsl #1
    3e80:	022c9c01 	eoreq	r9, ip, #256	; 0x100
    3e84:	73100000 	tstvc	r0, #0
    3e88:	2ce50100 	stfcse	f0, [r5]
    3e8c:	02000002 	andeq	r0, r0, #2
    3e90:	e4116c91 	ldr	r6, [r1], #-3217	; 0xfffff36f
    3e94:	0100001b 	tsteq	r0, fp, lsl r0
    3e98:	000239e6 	andeq	r3, r2, r6, ror #19
    3e9c:	5c910200 	lfmpl	f0, 4, [r1], {0}
    3ea0:	001bea11 	andseq	lr, fp, r1, lsl sl
    3ea4:	49e70100 	stmibmi	r7!, {r8}^
    3ea8:	02000002 	andeq	r0, r0, #2
    3eac:	05004891 	streq	r4, [r0, #-2193]	; 0xfffff76f
    3eb0:	00023204 	andeq	r3, r2, r4, lsl #4
    3eb4:	08010400 	stmdaeq	r1, {sl}
    3eb8:	000004d1 	ldrdeq	r0, [r0], -r1
    3ebc:	0002320b 	andeq	r3, r2, fp, lsl #4
    3ec0:	00024900 	andeq	r4, r2, r0, lsl #18
    3ec4:	019a1200 	orrseq	r1, sl, r0, lsl #4
    3ec8:	000c0000 	andeq	r0, ip, r0
    3ecc:	0002320b 	andeq	r3, r2, fp, lsl #4
    3ed0:	00025900 	andeq	r5, r2, r0, lsl #18
    3ed4:	019a1200 	orrseq	r1, sl, r0, lsl #4
    3ed8:	00130000 	andseq	r0, r3, r0
    3edc:	001b9a0f 	andseq	r9, fp, pc, lsl #20
    3ee0:	82cc0100 	sbchi	r0, ip, #0, 2
    3ee4:	8e200041 	cdphi	0, 2, cr0, cr0, cr1, {2}
    3ee8:	01000000 	mrseq	r0, (UNDEF: 0)
    3eec:	0002b39c 	muleq	r2, ip, r3
    3ef0:	1cd21300 	ldclne	3, cr1, [r2], {0}
    3ef4:	cc010000 	stcgt	0, cr0, [r1], {-0}
    3ef8:	0000022c 	andeq	r0, r0, ip, lsr #4
    3efc:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    3f00:	00000286 	andeq	r0, r0, r6, lsl #5
    3f04:	022ccc01 	eoreq	ip, ip, #256	; 0x100
    3f08:	91020000 	mrsls	r0, (UNDEF: 2)
    3f0c:	1c7c1368 	ldclne	3, cr1, [ip], #-416	; 0xfffffe60
    3f10:	cc010000 	stcgt	0, cr0, [r1], {-0}
    3f14:	0000012e 	andeq	r0, r0, lr, lsr #2
    3f18:	13649102 	cmnne	r4, #-2147483648	; 0x80000000
    3f1c:	00001b58 	andeq	r1, r0, r8, asr fp
    3f20:	012ecc01 			; <UNDEFINED> instruction: 0x012ecc01
    3f24:	91020000 	mrsls	r0, (UNDEF: 2)
    3f28:	00691060 	rsbeq	r1, r9, r0, rrx
    3f2c:	012ed001 			; <UNDEFINED> instruction: 0x012ed001
    3f30:	91020000 	mrsls	r0, (UNDEF: 2)
    3f34:	3b0f0074 	blcc	3c410c <startup-0x1fc3bef4>
    3f38:	0100001c 	tsteq	r0, ip, lsl r0
    3f3c:	004124bd 	strheq	r2, [r1], #-77	; 0xffffffb3
    3f40:	00005e20 	andeq	r5, r0, r0, lsr #28
    3f44:	e59c0100 	ldr	r0, [ip, #256]	; 0x100
    3f48:	13000002 	movwne	r0, #2
    3f4c:	00001cd2 	ldrdeq	r1, [r0], -r2
    3f50:	022cbd01 	eoreq	fp, ip, #1, 26	; 0x40
    3f54:	91020000 	mrsls	r0, (UNDEF: 2)
    3f58:	02861374 	addeq	r1, r6, #116, 6	; 0xd0000001
    3f5c:	bd010000 	stclt	0, cr0, [r1, #-0]
    3f60:	0000022c 	andeq	r0, r0, ip, lsr #4
    3f64:	00709102 	rsbseq	r9, r0, r2, lsl #2
    3f68:	001b8e0f 	andseq	r8, fp, pc, lsl #28
    3f6c:	baad0100 	blt	feb44374 <firstTime.4040+0xdeb35cb8>
    3f70:	6a200040 	bvs	804078 <startup-0x1f7fbf88>
    3f74:	01000000 	mrseq	r0, (UNDEF: 0)
    3f78:	0003159c 	muleq	r3, ip, r5
    3f7c:	00731000 	rsbseq	r1, r3, r0
    3f80:	022cae01 	eoreq	sl, ip, #1, 28
    3f84:	91020000 	mrsls	r0, (UNDEF: 2)
    3f88:	18c9116c 	stmiane	r9, {r2, r3, r5, r6, r8, ip}^
    3f8c:	af010000 	svcge	0x00010000
    3f90:	00000315 	andeq	r0, r0, r5, lsl r3
    3f94:	00549102 	subseq	r9, r4, r2, lsl #2
    3f98:	0002320b 	andeq	r3, r2, fp, lsl #4
    3f9c:	00032500 	andeq	r2, r3, r0, lsl #10
    3fa0:	019a1200 	orrseq	r1, sl, r0, lsl #4
    3fa4:	00140000 	andseq	r0, r4, r0
    3fa8:	001b6f14 	andseq	r6, fp, r4, lsl pc
    3fac:	a8a80100 	stmiage	r8!, {r8}
    3fb0:	12200040 	eorne	r0, r0, #64	; 0x40
    3fb4:	01000000 	mrseq	r0, (UNDEF: 0)
    3fb8:	1b47159c 	blne	11c9630 <startup-0x1ee369d0>
    3fbc:	9f010000 	svcls	0x00010000
    3fc0:	2000408e 	andcs	r4, r0, lr, lsl #1
    3fc4:	0000001a 	andeq	r0, r0, sl, lsl r0
    3fc8:	7c149c01 	ldcvc	12, cr9, [r4], {1}
    3fcc:	0100001b 	tsteq	r0, fp, lsl r0
    3fd0:	003ff483 	eorseq	pc, pc, r3, lsl #9
    3fd4:	00009a20 	andeq	r9, r0, r0, lsr #20
    3fd8:	0f9c0100 	svceq	0x009c0100
    3fdc:	00001c47 	andeq	r1, r0, r7, asr #24
    3fe0:	3fa47b01 	svccc	0x00a47b01
    3fe4:	00502000 	subseq	r2, r0, r0
    3fe8:	9c010000 	stcls	0, cr0, [r1], {-0}
    3fec:	00000398 	muleq	r0, r8, r3
    3ff0:	776f7216 			; <UNDEFINED> instruction: 0x776f7216
    3ff4:	5b7b0100 	blpl	1ec43fc <startup-0x1e13bc04>
    3ff8:	02000000 	andeq	r0, r0, #0
    3ffc:	87136f91 			; <UNDEFINED> instruction: 0x87136f91
    4000:	0100001b 	tsteq	r0, fp, lsl r0
    4004:	00005b7b 	andeq	r5, r0, fp, ror fp
    4008:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    400c:	001bf011 	andseq	pc, fp, r1, lsl r0	; <UNPREDICTABLE>
    4010:	5b7c0100 	blpl	1f04418 <startup-0x1e0fbbe8>
    4014:	02000000 	andeq	r0, r0, #0
    4018:	0f007791 	svceq	0x00007791
    401c:	00001c6b 	andeq	r1, r0, fp, ror #24
    4020:	3f687401 	svccc	0x00687401
    4024:	003c2000 	eorseq	r2, ip, r0
    4028:	9c010000 	stcls	0, cr0, [r1], {-0}
    402c:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    4030:	01006316 	tsteq	r0, r6, lsl r3
    4034:	00005b74 	andeq	r5, r0, r4, ror fp
    4038:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    403c:	1bab1700 	blne	feac9c44 <firstTime.4040+0xdeabb588>
    4040:	6a010000 	bvs	44048 <startup-0x1ffbbfb8>
    4044:	0000005b 	andeq	r0, r0, fp, asr r0
    4048:	20003f34 	andcs	r3, r0, r4, lsr pc
    404c:	00000034 	andeq	r0, r0, r4, lsr r0
    4050:	03e09c01 	mvneq	r9, #256	; 0x100
    4054:	63100000 	tstvs	r0, #0
    4058:	5b6b0100 	blpl	1ac4460 <startup-0x1e53bba0>
    405c:	02000000 	andeq	r0, r0, #0
    4060:	0f007791 	svceq	0x00007791
    4064:	00001c54 	andeq	r1, r0, r4, asr ip
    4068:	3f046301 	svccc	0x00046301
    406c:	00302000 	eorseq	r2, r0, r0
    4070:	9c010000 	stcls	0, cr0, [r1], {-0}
    4074:	00000402 	andeq	r0, r0, r2, lsl #8
    4078:	01006316 	tsteq	r0, r6, lsl r3
    407c:	00005b63 	andeq	r5, r0, r3, ror #22
    4080:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    4084:	1b5f1700 	blne	17c9c8c <startup-0x1e836374>
    4088:	57010000 	strpl	r0, [r1, -r0]
    408c:	0000005b 	andeq	r0, r0, fp, asr r0
    4090:	20003eb0 			; <UNDEFINED> instruction: 0x20003eb0
    4094:	00000054 	andeq	r0, r0, r4, asr r0
    4098:	04299c01 	strteq	r9, [r9], #-3073	; 0xfffff3ff
    409c:	72100000 	andsvc	r0, r0, #0
    40a0:	5c010076 	stcpl	0, cr0, [r1], {118}	; 0x76
    40a4:	0000005b 	andeq	r0, r0, fp, asr r0
    40a8:	006f9102 	rsbeq	r9, pc, r2, lsl #2
    40ac:	001c1417 	andseq	r1, ip, r7, lsl r4
    40b0:	5b4b0100 	blpl	12c44b8 <startup-0x1ed3bb48>
    40b4:	5c000000 	stcpl	0, cr0, [r0], {-0}
    40b8:	5420003e 	strtpl	r0, [r0], #-62	; 0xffffffc2
    40bc:	01000000 	mrseq	r0, (UNDEF: 0)
    40c0:	0004509c 	muleq	r4, ip, r0
    40c4:	76721000 	ldrbtvc	r1, [r2], -r0
    40c8:	5b500100 	blpl	14044d0 <startup-0x1ebfbb30>
    40cc:	02000000 	andeq	r0, r0, #0
    40d0:	0f006f91 	svceq	0x00006f91
    40d4:	00001bf8 	strdeq	r1, [r0], -r8
    40d8:	3e324501 	cdpcc	5, 3, cr4, cr2, cr1, {0}
    40dc:	002a2000 	eoreq	r2, sl, r0
    40e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    40e4:	00000474 	andeq	r0, r0, r4, ror r4
    40e8:	00190d13 	andseq	r0, r9, r3, lsl sp
    40ec:	5b450100 	blpl	11444f4 <startup-0x1eebbb0c>
    40f0:	02000000 	andeq	r0, r0, #0
    40f4:	0f007791 	svceq	0x00007791
    40f8:	00001bd4 	ldrdeq	r1, [r0], -r4
    40fc:	3e083f01 	cdpcc	15, 0, cr3, cr8, cr1, {0}
    4100:	002a2000 	eoreq	r2, sl, r0
    4104:	9c010000 	stcls	0, cr0, [r1], {-0}
    4108:	00000498 	muleq	r0, r8, r4
    410c:	00183513 	andseq	r3, r8, r3, lsl r5
    4110:	5b3f0100 	blpl	fc4518 <startup-0x1f03bae8>
    4114:	02000000 	andeq	r0, r0, #0
    4118:	18007791 	stmdane	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    411c:	00001c26 	andeq	r1, r0, r6, lsr #24
    4120:	3db83701 	ldccc	7, cr3, [r8, #4]!
    4124:	00502000 	subseq	r2, r0, r0
    4128:	9c010000 	stcls	0, cr0, [r1], {-0}
    412c:	000004c6 	andeq	r0, r0, r6, asr #9
    4130:	01007816 	tsteq	r0, r6, lsl r8
    4134:	00005b37 	andeq	r5, r0, r7, lsr fp
    4138:	6f910200 	svcvs	0x00910200
    413c:	01006310 	tsteq	r0, r0, lsl r3
    4140:	00005b39 	andeq	r5, r0, r9, lsr fp
    4144:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    4148:	1bc11900 	blne	ff04a550 <firstTime.4040+0xdf03be94>
    414c:	2f010000 	svccs	0x00010000
    4150:	20003d74 	andcs	r3, r0, r4, ror sp
    4154:	00000044 	andeq	r0, r0, r4, asr #32
    4158:	78169c01 	ldmdavc	r6, {r0, sl, fp, ip, pc}
    415c:	5b2f0100 	blpl	bc4564 <startup-0x1f43ba9c>
    4160:	02000000 	andeq	r0, r0, #0
    4164:	63106f91 	tstvs	r0, #580	; 0x244
    4168:	5b310100 	blpl	c44570 <startup-0x1f3bba90>
    416c:	02000000 	andeq	r0, r0, #0
    4170:	00007791 	muleq	r0, r1, r7
    4174:	00000140 	andeq	r0, r0, r0, asr #2
    4178:	0f050004 	svceq	0x00050004
    417c:	01040000 	mrseq	r0, (UNDEF: 4)
    4180:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4184:	001cd70c 	andseq	sp, ip, ip, lsl #14
    4188:	00429400 	subeq	r9, r2, r0, lsl #8
    418c:	00009420 	andeq	r9, r0, r0, lsr #8
    4190:	00157c00 	andseq	r7, r5, r0, lsl #24
    4194:	068d0200 	streq	r0, [sp], r0, lsl #4
    4198:	02140000 	andseq	r0, r4, #0
    419c:	00006a04 	andeq	r6, r0, r4, lsl #20
    41a0:	1cd20300 	ldclne	3, cr0, [r2], {0}
    41a4:	05020000 	streq	r0, [r2, #-0]
    41a8:	0000006a 	andeq	r0, r0, sl, rrx
    41ac:	02860300 	addeq	r0, r6, #0, 6
    41b0:	06020000 	streq	r0, [r2], -r0
    41b4:	0000006a 	andeq	r0, r0, sl, rrx
    41b8:	03f30304 	mvnseq	r0, #4, 6	; 0x10000000
    41bc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    41c0:	00000077 	andeq	r0, r0, r7, ror r0
    41c4:	03e30308 	mvneq	r0, #8, 6	; 0x20000000
    41c8:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    41cc:	00000077 	andeq	r0, r0, r7, ror r0
    41d0:	028b030c 	addeq	r0, fp, #12, 6	; 0x30000000
    41d4:	0c020000 	stceq	0, cr0, [r2], {-0}
    41d8:	00000094 	muleq	r0, r4, r0
    41dc:	04040010 	streq	r0, [r4], #-16
    41e0:	00000070 	andeq	r0, r0, r0, ror r0
    41e4:	d1080105 	tstle	r8, r5, lsl #2
    41e8:	06000004 	streq	r0, [r0], -r4
    41ec:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    41f0:	8e070074 	mcrhi	0, 0, r0, cr7, cr4, {3}
    41f4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    41f8:	0000008e 	andeq	r0, r0, lr, lsl #1
    41fc:	00007708 	andeq	r7, r0, r8, lsl #14
    4200:	04040000 	streq	r0, [r4], #-0
    4204:	00000021 	andeq	r0, r0, r1, lsr #32
    4208:	007e0404 	rsbseq	r0, lr, r4, lsl #8
    420c:	8e090000 	cdphi	0, 0, cr0, cr9, cr0, {0}
    4210:	02000006 	andeq	r0, r0, #6
    4214:	0000210d 	andeq	r2, r0, sp, lsl #2
    4218:	1cb90a00 	vldmiane	r9!, {s0-s-1}
    421c:	0c010000 	stceq	0, cr0, [r1], {-0}
    4220:	200042ee 	andcs	r4, r0, lr, ror #5
    4224:	0000003a 	andeq	r0, r0, sl, lsr r0
    4228:	00f39c01 	rscseq	r9, r3, r1, lsl #24
    422c:	6f0b0000 	svcvs	0x000b0000
    4230:	01006a62 	tsteq	r0, r2, ror #20
    4234:	0000f30c 	andeq	pc, r0, ip, lsl #6
    4238:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    423c:	001cd20c 	andseq	sp, ip, ip, lsl #4
    4240:	6a0c0100 	bvs	304648 <startup-0x1fcfb9b8>
    4244:	02000000 	andeq	r0, r0, #0
    4248:	860c7091 			; <UNDEFINED> instruction: 0x860c7091
    424c:	01000002 	tsteq	r0, r2
    4250:	00006a0c 	andeq	r6, r0, ip, lsl #20
    4254:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4258:	0003e30c 	andeq	lr, r3, ip, lsl #6
    425c:	770c0100 	strvc	r0, [ip, -r0, lsl #2]
    4260:	02000000 	andeq	r0, r0, #0
    4264:	04006891 	streq	r6, [r0], #-2193	; 0xfffff76f
    4268:	00009a04 	andeq	r9, r0, r4, lsl #20
    426c:	028b0d00 	addeq	r0, fp, #0, 26
    4270:	04010000 	streq	r0, [r1], #-0
    4274:	20004294 	mulcs	r0, r4, r2
    4278:	0000005a 	andeq	r0, r0, sl, asr r0
    427c:	770c9c01 	strvc	r9, [ip, -r1, lsl #24]
    4280:	01000007 	tsteq	r0, r7
    4284:	0000f304 	andeq	pc, r0, r4, lsl #6
    4288:	6c910200 	lfmvs	f0, 4, [r1], {0}
    428c:	001cc80c 	andseq	ip, ip, ip, lsl #16
    4290:	77040100 	strvc	r0, [r4, -r0, lsl #2]
    4294:	02000000 	andeq	r0, r0, #0
    4298:	7c0e6891 	stcvc	8, cr6, [lr], {145}	; 0x91
    429c:	0100001c 	tsteq	r0, ip, lsl r0
    42a0:	00007705 	andeq	r7, r0, r5, lsl #14
    42a4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    42a8:	001b580e 	andseq	r5, fp, lr, lsl #16
    42ac:	77060100 	strvc	r0, [r6, -r0, lsl #2]
    42b0:	02000000 	andeq	r0, r0, #0
    42b4:	00007091 	muleq	r0, r1, r0
    42b8:	000002e0 	andeq	r0, r0, r0, ror #5
    42bc:	0fd00004 	svceq	0x00d00004
    42c0:	01040000 	mrseq	r0, (UNDEF: 4)
    42c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    42c8:	001d840c 	andseq	r8, sp, ip, lsl #8
    42cc:	00432800 	subeq	r2, r3, r0, lsl #16
    42d0:	0000e820 	andeq	lr, r0, r0, lsr #16
    42d4:	0015f600 	andseq	pc, r5, r0, lsl #12
    42d8:	020c0200 	andeq	r0, ip, #0, 4
    42dc:	00004e05 	andeq	r4, r0, r5, lsl #28
    42e0:	035b0300 	cmpeq	fp, #0, 6
    42e4:	07020000 	streq	r0, [r2, -r0]
    42e8:	0000004e 	andeq	r0, r0, lr, asr #32
    42ec:	070e0300 	streq	r0, [lr, -r0, lsl #6]
    42f0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    42f4:	0000004e 	andeq	r0, r0, lr, asr #32
    42f8:	190d0304 	stmdbne	sp, {r2, r8, r9}
    42fc:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    4300:	00000055 	andeq	r0, r0, r5, asr r0
    4304:	04040008 	streq	r0, [r4], #-8
    4308:	00038907 	andeq	r8, r3, r7, lsl #18
    430c:	5b040500 	blpl	105714 <startup-0x1fefa8ec>
    4310:	04000000 	streq	r0, [r0], #-0
    4314:	04c80801 	strbeq	r0, [r8], #2049	; 0x801
    4318:	5f060000 	svcpl	0x00060000
    431c:	0200001a 	andeq	r0, r0, #26
    4320:	0000210a 	andeq	r2, r0, sl, lsl #2
    4324:	00340700 	eorseq	r0, r4, r0, lsl #14
    4328:	030c0000 	movweq	r0, #49152	; 0xc000
    432c:	00009e06 	andeq	r9, r0, r6, lsl #28
    4330:	05be0300 	ldreq	r0, [lr, #768]!	; 0x300
    4334:	07030000 	streq	r0, [r3, -r0]
    4338:	0000009e 	muleq	r0, lr, r0
    433c:	003b0300 	eorseq	r0, fp, r0, lsl #6
    4340:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    4344:	0000009e 	muleq	r0, lr, r0
    4348:	00300304 	eorseq	r0, r0, r4, lsl #6
    434c:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    4350:	0000009e 	muleq	r0, lr, r0
    4354:	04050008 	streq	r0, [r5], #-8
    4358:	00000062 	andeq	r0, r0, r2, rrx
    435c:	00161d06 	andseq	r1, r6, r6, lsl #26
    4360:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
    4364:	07000000 	streq	r0, [r0, -r0]
    4368:	000006d3 	ldrdeq	r0, [r0], -r3
    436c:	28060424 	stmdacs	r6, {r2, r5, sl}
    4370:	03000001 	movweq	r0, #1
    4374:	00000456 	andeq	r0, r0, r6, asr r4
    4378:	01280704 			; <UNDEFINED> instruction: 0x01280704
    437c:	03000000 	movweq	r0, #0
    4380:	000006df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4384:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
    4388:	03040000 	movweq	r0, #16384	; 0x4000
    438c:	0000062f 	andeq	r0, r0, pc, lsr #12
    4390:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
    4394:	03080000 	movweq	r0, #32768	; 0x8000
    4398:	0000065b 	andeq	r0, r0, fp, asr r6
    439c:	01460c04 	cmpeq	r6, r4, lsl #24
    43a0:	030c0000 	movweq	r0, #49152	; 0xc000
    43a4:	00000342 	andeq	r0, r0, r2, asr #6
    43a8:	01460d04 	cmpeq	r6, r4, lsl #26
    43ac:	03100000 	tsteq	r0, #0
    43b0:	00000468 	andeq	r0, r0, r8, ror #8
    43b4:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
    43b8:	03140000 	tsteq	r4, #0
    43bc:	00000070 	andeq	r0, r0, r0, ror r0
    43c0:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
    43c4:	03180000 	tsteq	r8, #0
    43c8:	000003d9 	ldrdeq	r0, [r0], -r9
    43cc:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
    43d0:	031c0000 	tsteq	ip, #0
    43d4:	000003e9 	andeq	r0, r0, r9, ror #7
    43d8:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
    43dc:	00200000 	eoreq	r0, r0, r0
    43e0:	00a40405 	adceq	r0, r4, r5, lsl #8
    43e4:	04080000 	streq	r0, [r8], #-0
    43e8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    43ec:	01400900 	cmpeq	r0, r0, lsl #18
    43f0:	400a0000 	andmi	r0, sl, r0
    43f4:	00000001 	andeq	r0, r0, r1
    43f8:	00af0405 	adceq	r0, pc, r5, lsl #8
    43fc:	04050000 	streq	r0, [r5], #-0
    4400:	00000135 	andeq	r0, r0, r5, lsr r1
    4404:	0006d406 	andeq	sp, r6, r6, lsl #8
    4408:	af150400 	svcge	0x00150400
    440c:	0b000000 	bleq	4414 <startup-0x1fffbbec>
    4410:	00000162 	andeq	r0, r0, r2, ror #2
    4414:	00000162 	andeq	r0, r0, r2, ror #2
    4418:	0405000c 	streq	r0, [r5], #-12
    441c:	0000014c 	andeq	r0, r0, ip, asr #2
    4420:	00054b0d 	andeq	r4, r5, sp, lsl #22
    4424:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
    4428:	0d000001 	stceq	0, cr0, [r0, #-4]
    442c:	00000424 	andeq	r0, r0, r4, lsr #8
    4430:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
    4434:	5b0b0000 	blpl	2c443c <startup-0x1fd3bbc4>
    4438:	8f000000 	svchi	0x00000000
    443c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    4440:	0000018f 	andeq	r0, r0, pc, lsl #3
    4444:	040003ff 	streq	r0, [r0], #-1023	; 0xfffffc01
    4448:	04060704 	streq	r0, [r6], #-1796	; 0xfffff8fc
    444c:	b40f0000 	strlt	r0, [pc], #-0	; 4454 <startup-0x1fffbbac>
    4450:	0500001d 	streq	r0, [r0, #-29]	; 0xffffffe3
    4454:	00017e03 	andeq	r7, r1, r3, lsl #28
    4458:	48030500 	stmdami	r3, {r8, sl}
    445c:	0f2000ce 	svceq	0x002000ce
    4460:	00001d54 	andeq	r1, r0, r4, asr sp
    4464:	017e0306 	cmneq	lr, r6, lsl #6
    4468:	03050000 	movweq	r0, #20480	; 0x5000
    446c:	2000d248 	andcs	sp, r0, r8, asr #4
    4470:	001d310f 	andseq	r3, sp, pc, lsl #2
    4474:	7e030700 	cdpvc	7, 0, cr0, cr3, cr0, {0}
    4478:	05000001 	streq	r0, [r0, #-1]
    447c:	00d64803 	sbcseq	r4, r6, r3, lsl #16
    4480:	1d161020 	ldcne	0, cr1, [r6, #-128]	; 0xffffff80
    4484:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    4488:	0000009e 	muleq	r0, lr, r0
    448c:	6fc80305 	svcvs	0x00c80305
    4490:	f0102000 			; <UNDEFINED> instruction: 0xf0102000
    4494:	0100001d 	tsteq	r0, sp, lsl r0
    4498:	00009e09 	andeq	r9, r0, r9, lsl #28
    449c:	94030500 	strls	r0, [r3], #-1280	; 0xfffffb00
    44a0:	1020006f 	eorne	r0, r0, pc, rrx
    44a4:	00001d77 	andeq	r1, r0, r7, ror sp
    44a8:	009e0a01 	addseq	r0, lr, r1, lsl #20
    44ac:	03050000 	movweq	r0, #20480	; 0x5000
    44b0:	20006fd8 	ldrdcs	r6, [r0], -r8
    44b4:	001dc710 	andseq	ip, sp, r0, lsl r7
    44b8:	620c0100 	andvs	r0, ip, #0, 2
    44bc:	05000000 	streq	r0, [r0, #-0]
    44c0:	006f8803 	rsbeq	r8, pc, r3, lsl #16
    44c4:	1d661020 	stclne	0, cr1, [r6, #-128]!	; 0xffffff80
    44c8:	0d010000 	stceq	0, cr0, [r1, #-0]
    44cc:	00000062 	andeq	r0, r0, r2, rrx
    44d0:	6f7c0305 	svcvs	0x007c0305
    44d4:	44102000 	ldrmi	r2, [r0], #-0
    44d8:	0100001d 	tsteq	r0, sp, lsl r0
    44dc:	0000620e 	andeq	r6, r0, lr, lsl #4
    44e0:	70030500 	andvc	r0, r3, r0, lsl #10
    44e4:	1020006f 	eorne	r0, r0, pc, rrx
    44e8:	00001de5 	andeq	r1, r0, r5, ror #27
    44ec:	014c1101 	cmpeq	ip, r1, lsl #2
    44f0:	03050000 	movweq	r0, #20480	; 0x5000
    44f4:	20006f98 	mulcs	r0, r8, pc	; <UNPREDICTABLE>
    44f8:	001d0910 	andseq	r0, sp, r0, lsl r9
    44fc:	a4120100 	ldrge	r0, [r2], #-256	; 0xffffff00
    4500:	05000000 	streq	r0, [r0, #-0]
    4504:	006fcc03 	rsbeq	ip, pc, r3, lsl #24
    4508:	00a40b20 	adceq	r0, r4, r0, lsr #22
    450c:	02610000 	rsbeq	r0, r1, #0
    4510:	8f110000 	svchi	0x00110000
    4514:	00000001 	andeq	r0, r0, r1
    4518:	1d231000 	stcne	0, cr1, [r3, #-0]
    451c:	13010000 	movwne	r0, #4096	; 0x1000
    4520:	00000251 	andeq	r0, r0, r1, asr r2
    4524:	6fbc0305 	svcvs	0x00bc0305
    4528:	d8122000 	ldmdale	r2, {sp}
    452c:	0100001d 	tsteq	r0, sp, lsl r0
    4530:	00439c22 	subeq	r9, r3, r2, lsr #24
    4534:	00007420 	andeq	r7, r0, r0, lsr #8
    4538:	a79c0100 	ldrge	r0, [ip, r0, lsl #2]
    453c:	13000002 	movwne	r0, #2
    4540:	00001de5 	andeq	r1, r0, r5, ror #27
    4544:	01622201 	cmneq	r2, r1, lsl #4
    4548:	91020000 	mrsls	r0, (UNDEF: 2)
    454c:	08fe0f6c 	ldmeq	lr!, {r2, r3, r5, r6, r8, r9, sl, fp}^
    4550:	23010000 	movwcs	r0, #4096	; 0x1000
    4554:	0000012e 	andeq	r0, r0, lr, lsr #2
    4558:	da480305 	ble	1205174 <startup-0x1edfae8c>
    455c:	14002000 	strne	r2, [r0], #-0
    4560:	0000049e 	muleq	r0, lr, r4
    4564:	43281401 			; <UNDEFINED> instruction: 0x43281401
    4568:	00742000 	rsbseq	r2, r4, r0
    456c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4570:	000d930f 	andeq	r9, sp, pc, lsl #6
    4574:	9e160100 	muflss	f0, f6, f0
    4578:	02000000 	andeq	r0, r0, #0
    457c:	9d0f7491 	cfstrsls	mvf7, [pc, #-580]	; 4340 <startup-0x1fffbcc0>
    4580:	0100000d 	tsteq	r0, sp
    4584:	00009e19 	andeq	r9, r0, r9, lsl lr
    4588:	70910200 	addsvc	r0, r1, r0, lsl #4
    458c:	000b930f 	andeq	r9, fp, pc, lsl #6
    4590:	9e1c0100 	muflse	f0, f4, f0
    4594:	02000000 	andeq	r0, r0, #0
    4598:	00006c91 	muleq	r0, r1, ip
    459c:	000002e0 	andeq	r0, r0, r0, ror #5
    45a0:	10d90004 	sbcsne	r0, r9, r4
    45a4:	01040000 	mrseq	r0, (UNDEF: 4)
    45a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    45ac:	001e3d0c 	andseq	r3, lr, ip, lsl #26
    45b0:	00441000 	subeq	r1, r4, r0
    45b4:	0000e820 	andeq	lr, r0, r0, lsr #16
    45b8:	0016d000 	andseq	sp, r6, r0
    45bc:	020c0200 	andeq	r0, ip, #0, 4
    45c0:	00004e05 	andeq	r4, r0, r5, lsl #28
    45c4:	035b0300 	cmpeq	fp, #0, 6
    45c8:	07020000 	streq	r0, [r2, -r0]
    45cc:	0000004e 	andeq	r0, r0, lr, asr #32
    45d0:	070e0300 	streq	r0, [lr, -r0, lsl #6]
    45d4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    45d8:	0000004e 	andeq	r0, r0, lr, asr #32
    45dc:	190d0304 	stmdbne	sp, {r2, r8, r9}
    45e0:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    45e4:	00000055 	andeq	r0, r0, r5, asr r0
    45e8:	04040008 	streq	r0, [r4], #-8
    45ec:	00038907 	andeq	r8, r3, r7, lsl #18
    45f0:	5b040500 	blpl	1059f8 <startup-0x1fefa608>
    45f4:	04000000 	streq	r0, [r0], #-0
    45f8:	04c80801 	strbeq	r0, [r8], #2049	; 0x801
    45fc:	5f060000 	svcpl	0x00060000
    4600:	0200001a 	andeq	r0, r0, #26
    4604:	0000210a 	andeq	r2, r0, sl, lsl #2
    4608:	00340700 	eorseq	r0, r4, r0, lsl #14
    460c:	030c0000 	movweq	r0, #49152	; 0xc000
    4610:	00009e06 	andeq	r9, r0, r6, lsl #28
    4614:	05be0300 	ldreq	r0, [lr, #768]!	; 0x300
    4618:	07030000 	streq	r0, [r3, -r0]
    461c:	0000009e 	muleq	r0, lr, r0
    4620:	003b0300 	eorseq	r0, fp, r0, lsl #6
    4624:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    4628:	0000009e 	muleq	r0, lr, r0
    462c:	00300304 	eorseq	r0, r0, r4, lsl #6
    4630:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    4634:	0000009e 	muleq	r0, lr, r0
    4638:	04050008 	streq	r0, [r5], #-8
    463c:	00000062 	andeq	r0, r0, r2, rrx
    4640:	00161d06 	andseq	r1, r6, r6, lsl #26
    4644:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
    4648:	07000000 	streq	r0, [r0, -r0]
    464c:	000006d3 	ldrdeq	r0, [r0], -r3
    4650:	28060424 	stmdacs	r6, {r2, r5, sl}
    4654:	03000001 	movweq	r0, #1
    4658:	00000456 	andeq	r0, r0, r6, asr r4
    465c:	01280704 			; <UNDEFINED> instruction: 0x01280704
    4660:	03000000 	movweq	r0, #0
    4664:	000006df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4668:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
    466c:	03040000 	movweq	r0, #16384	; 0x4000
    4670:	0000062f 	andeq	r0, r0, pc, lsr #12
    4674:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
    4678:	03080000 	movweq	r0, #32768	; 0x8000
    467c:	0000065b 	andeq	r0, r0, fp, asr r6
    4680:	01460c04 	cmpeq	r6, r4, lsl #24
    4684:	030c0000 	movweq	r0, #49152	; 0xc000
    4688:	00000342 	andeq	r0, r0, r2, asr #6
    468c:	01460d04 	cmpeq	r6, r4, lsl #26
    4690:	03100000 	tsteq	r0, #0
    4694:	00000468 	andeq	r0, r0, r8, ror #8
    4698:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
    469c:	03140000 	tsteq	r4, #0
    46a0:	00000070 	andeq	r0, r0, r0, ror r0
    46a4:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
    46a8:	03180000 	tsteq	r8, #0
    46ac:	000003d9 	ldrdeq	r0, [r0], -r9
    46b0:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
    46b4:	031c0000 	tsteq	ip, #0
    46b8:	000003e9 	andeq	r0, r0, r9, ror #7
    46bc:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
    46c0:	00200000 	eoreq	r0, r0, r0
    46c4:	00a40405 	adceq	r0, r4, r5, lsl #8
    46c8:	04080000 	streq	r0, [r8], #-0
    46cc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    46d0:	01400900 	cmpeq	r0, r0, lsl #18
    46d4:	400a0000 	andmi	r0, sl, r0
    46d8:	00000001 	andeq	r0, r0, r1
    46dc:	00af0405 	adceq	r0, pc, r5, lsl #8
    46e0:	04050000 	streq	r0, [r5], #-0
    46e4:	00000135 	andeq	r0, r0, r5, lsr r1
    46e8:	0006d406 	andeq	sp, r6, r6, lsl #8
    46ec:	af150400 	svcge	0x00150400
    46f0:	0b000000 	bleq	46f8 <startup-0x1fffb908>
    46f4:	00000162 	andeq	r0, r0, r2, ror #2
    46f8:	00000162 	andeq	r0, r0, r2, ror #2
    46fc:	0405000c 	streq	r0, [r5], #-12
    4700:	0000014c 	andeq	r0, r0, ip, asr #2
    4704:	00054b0d 	andeq	r4, r5, sp, lsl #22
    4708:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
    470c:	0d000001 	stceq	0, cr0, [r0, #-4]
    4710:	00000424 	andeq	r0, r0, r4, lsr #8
    4714:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
    4718:	5b0b0000 	blpl	2c4720 <startup-0x1fd3b8e0>
    471c:	8f000000 	svchi	0x00000000
    4720:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    4724:	0000018f 	andeq	r0, r0, pc, lsl #3
    4728:	040003ff 	streq	r0, [r0], #-1023	; 0xfffffc01
    472c:	04060704 	streq	r0, [r6], #-1796	; 0xfffff8fc
    4730:	0a0f0000 	beq	3c4738 <startup-0x1fc3b8c8>
    4734:	0500001e 	streq	r0, [r0, #-30]	; 0xffffffe2
    4738:	00017e03 	andeq	r7, r1, r3, lsl #28
    473c:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
    4740:	0f2000da 	svceq	0x002000da
    4744:	00001ecd 	andeq	r1, r0, sp, asr #29
    4748:	017e0306 	cmneq	lr, r6, lsl #6
    474c:	03050000 	movweq	r0, #20480	; 0x5000
    4750:	2000de4c 	andcs	sp, r0, ip, asr #28
    4754:	001eaa0f 	andseq	sl, lr, pc, lsl #20
    4758:	7e030700 	cdpvc	7, 0, cr0, cr3, cr0, {0}
    475c:	05000001 	streq	r0, [r0, #-1]
    4760:	00e24c03 	rsceq	r4, r2, r3, lsl #24
    4764:	1e801020 	cdpne	0, 8, cr1, cr0, cr0, {1}
    4768:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    476c:	0000009e 	muleq	r0, lr, r0
    4770:	70440305 	subvc	r0, r4, r5, lsl #6
    4774:	30102000 	andscc	r2, r0, r0
    4778:	0100001e 	tsteq	r0, lr, lsl r0
    477c:	00009e09 	andeq	r9, r0, r9, lsl #28
    4780:	00030500 	andeq	r0, r3, r0, lsl #10
    4784:	10200070 	eorne	r0, r0, r0, ror r0
    4788:	00001dfc 	strdeq	r1, [r0], -ip
    478c:	009e0a01 	addseq	r0, lr, r1, lsl #20
    4790:	03050000 	movweq	r0, #20480	; 0x5000
    4794:	20007028 	andcs	r7, r0, r8, lsr #32
    4798:	001e6e10 	andseq	r6, lr, r0, lsl lr
    479c:	620c0100 	andvs	r0, ip, #0, 2
    47a0:	05000000 	streq	r0, [r0, #-0]
    47a4:	00702c03 	rsbseq	r2, r0, r3, lsl #24
    47a8:	1e1e1020 	cdpne	0, 1, cr1, cr14, cr0, {1}
    47ac:	0d010000 	stceq	0, cr0, [r1, #-0]
    47b0:	00000062 	andeq	r0, r0, r2, rrx
    47b4:	70380305 	eorsvc	r0, r8, r5, lsl #6
    47b8:	ec102000 	ldc	0, cr2, [r0], {-0}
    47bc:	0100001e 	tsteq	r0, lr, lsl r0
    47c0:	0000620e 	andeq	r6, r0, lr, lsl #4
    47c4:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
    47c8:	10200070 	eorne	r0, r0, r0, ror r0
    47cc:	00001ee0 	andeq	r1, r0, r0, ror #29
    47d0:	014c1101 	cmpeq	ip, r1, lsl #2
    47d4:	03050000 	movweq	r0, #20480	; 0x5000
    47d8:	20006fdc 	ldrdcs	r6, [r0], -ip
    47dc:	001e8e10 	andseq	r8, lr, r0, lsl lr
    47e0:	a4120100 	ldrge	r0, [r2], #-256	; 0xffffff00
    47e4:	05000000 	streq	r0, [r0, #-0]
    47e8:	00701003 	rsbseq	r1, r0, r3
    47ec:	00a40b20 	adceq	r0, r4, r0, lsr #22
    47f0:	02610000 	rsbeq	r0, r1, #0
    47f4:	8f110000 	svchi	0x00110000
    47f8:	00000001 	andeq	r0, r0, r1
    47fc:	1ebe1000 	cdpne	0, 11, cr1, cr14, cr0, {0}
    4800:	13010000 	movwne	r0, #4096	; 0x1000
    4804:	00000251 	andeq	r0, r0, r1, asr r2
    4808:	70040305 	andvc	r0, r4, r5, lsl #6
    480c:	9c122000 	ldcls	0, cr2, [r2], {-0}
    4810:	0100001e 	tsteq	r0, lr, lsl r0
    4814:	00448422 	subeq	r8, r4, r2, lsr #8
    4818:	00007420 	andeq	r7, r0, r0, lsr #8
    481c:	a79c0100 	ldrge	r0, [ip, r0, lsl #2]
    4820:	13000002 	movwne	r0, #2
    4824:	00001ee0 	andeq	r1, r0, r0, ror #29
    4828:	01622201 	cmneq	r2, r1, lsl #4
    482c:	91020000 	mrsls	r0, (UNDEF: 2)
    4830:	08fe0f6c 	ldmeq	lr!, {r2, r3, r5, r6, r8, r9, sl, fp}^
    4834:	23010000 	movwcs	r0, #4096	; 0x1000
    4838:	0000012e 	andeq	r0, r0, lr, lsr #2
    483c:	e64c0305 	strb	r0, [ip], -r5, lsl #6
    4840:	14002000 	strne	r2, [r0], #-0
    4844:	0000049e 	muleq	r0, lr, r4
    4848:	44101401 	ldrmi	r1, [r0], #-1025	; 0xfffffbff
    484c:	00742000 	rsbseq	r2, r4, r0
    4850:	9c010000 	stcls	0, cr0, [r1], {-0}
    4854:	000d930f 	andeq	r9, sp, pc, lsl #6
    4858:	9e160100 	muflss	f0, f6, f0
    485c:	02000000 	andeq	r0, r0, #0
    4860:	9d0f7491 	cfstrsls	mvf7, [pc, #-580]	; 4624 <startup-0x1fffb9dc>
    4864:	0100000d 	tsteq	r0, sp
    4868:	00009e19 	andeq	r9, r0, r9, lsl lr
    486c:	70910200 	addsvc	r0, r1, r0, lsl #4
    4870:	000b930f 	andeq	r9, fp, pc, lsl #6
    4874:	9e1c0100 	muflse	f0, f4, f0
    4878:	02000000 	andeq	r0, r0, #0
    487c:	00006c91 	muleq	r0, r1, ip
    4880:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4884:	11e20004 	mvnne	r0, r4
    4888:	01040000 	mrseq	r0, (UNDEF: 4)
    488c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4890:	001efd0c 	andseq	pc, lr, ip, lsl #26
    4894:	0044f800 	subeq	pc, r4, r0, lsl #16
    4898:	0000e820 	andeq	lr, r0, r0, lsr #16
    489c:	0017ae00 	andseq	sl, r7, r0, lsl #28
    48a0:	020c0200 	andeq	r0, ip, #0, 4
    48a4:	00004e05 	andeq	r4, r0, r5, lsl #28
    48a8:	035b0300 	cmpeq	fp, #0, 6
    48ac:	07020000 	streq	r0, [r2, -r0]
    48b0:	0000004e 	andeq	r0, r0, lr, asr #32
    48b4:	070e0300 	streq	r0, [lr, -r0, lsl #6]
    48b8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    48bc:	0000004e 	andeq	r0, r0, lr, asr #32
    48c0:	190d0304 	stmdbne	sp, {r2, r8, r9}
    48c4:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    48c8:	00000055 	andeq	r0, r0, r5, asr r0
    48cc:	04040008 	streq	r0, [r4], #-8
    48d0:	00038907 	andeq	r8, r3, r7, lsl #18
    48d4:	5b040500 	blpl	105cdc <startup-0x1fefa324>
    48d8:	04000000 	streq	r0, [r0], #-0
    48dc:	04c80801 	strbeq	r0, [r8], #2049	; 0x801
    48e0:	5f060000 	svcpl	0x00060000
    48e4:	0200001a 	andeq	r0, r0, #26
    48e8:	0000210a 	andeq	r2, r0, sl, lsl #2
    48ec:	00340700 	eorseq	r0, r4, r0, lsl #14
    48f0:	030c0000 	movweq	r0, #49152	; 0xc000
    48f4:	00009e06 	andeq	r9, r0, r6, lsl #28
    48f8:	05be0300 	ldreq	r0, [lr, #768]!	; 0x300
    48fc:	07030000 	streq	r0, [r3, -r0]
    4900:	0000009e 	muleq	r0, lr, r0
    4904:	003b0300 	eorseq	r0, fp, r0, lsl #6
    4908:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    490c:	0000009e 	muleq	r0, lr, r0
    4910:	00300304 	eorseq	r0, r0, r4, lsl #6
    4914:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    4918:	0000009e 	muleq	r0, lr, r0
    491c:	04050008 	streq	r0, [r5], #-8
    4920:	00000062 	andeq	r0, r0, r2, rrx
    4924:	00161d06 	andseq	r1, r6, r6, lsl #26
    4928:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
    492c:	07000000 	streq	r0, [r0, -r0]
    4930:	000006d3 	ldrdeq	r0, [r0], -r3
    4934:	28060424 	stmdacs	r6, {r2, r5, sl}
    4938:	03000001 	movweq	r0, #1
    493c:	00000456 	andeq	r0, r0, r6, asr r4
    4940:	01280704 			; <UNDEFINED> instruction: 0x01280704
    4944:	03000000 	movweq	r0, #0
    4948:	000006df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    494c:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
    4950:	03040000 	movweq	r0, #16384	; 0x4000
    4954:	0000062f 	andeq	r0, r0, pc, lsr #12
    4958:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
    495c:	03080000 	movweq	r0, #32768	; 0x8000
    4960:	0000065b 	andeq	r0, r0, fp, asr r6
    4964:	01460c04 	cmpeq	r6, r4, lsl #24
    4968:	030c0000 	movweq	r0, #49152	; 0xc000
    496c:	00000342 	andeq	r0, r0, r2, asr #6
    4970:	01460d04 	cmpeq	r6, r4, lsl #26
    4974:	03100000 	tsteq	r0, #0
    4978:	00000468 	andeq	r0, r0, r8, ror #8
    497c:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
    4980:	03140000 	tsteq	r4, #0
    4984:	00000070 	andeq	r0, r0, r0, ror r0
    4988:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
    498c:	03180000 	tsteq	r8, #0
    4990:	000003d9 	ldrdeq	r0, [r0], -r9
    4994:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
    4998:	031c0000 	tsteq	ip, #0
    499c:	000003e9 	andeq	r0, r0, r9, ror #7
    49a0:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
    49a4:	00200000 	eoreq	r0, r0, r0
    49a8:	00a40405 	adceq	r0, r4, r5, lsl #8
    49ac:	04080000 	streq	r0, [r8], #-0
    49b0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    49b4:	01400900 	cmpeq	r0, r0, lsl #18
    49b8:	400a0000 	andmi	r0, sl, r0
    49bc:	00000001 	andeq	r0, r0, r1
    49c0:	00af0405 	adceq	r0, pc, r5, lsl #8
    49c4:	04050000 	streq	r0, [r5], #-0
    49c8:	00000135 	andeq	r0, r0, r5, lsr r1
    49cc:	0006d406 	andeq	sp, r6, r6, lsl #8
    49d0:	af150400 	svcge	0x00150400
    49d4:	0b000000 	bleq	49dc <startup-0x1fffb624>
    49d8:	00000162 	andeq	r0, r0, r2, ror #2
    49dc:	00000162 	andeq	r0, r0, r2, ror #2
    49e0:	0405000c 	streq	r0, [r5], #-12
    49e4:	0000014c 	andeq	r0, r0, ip, asr #2
    49e8:	00054b0d 	andeq	r4, r5, sp, lsl #22
    49ec:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
    49f0:	0d000001 	stceq	0, cr0, [r0, #-4]
    49f4:	00000424 	andeq	r0, r0, r4, lsr #8
    49f8:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
    49fc:	5b0b0000 	blpl	2c4a04 <startup-0x1fd3b5fc>
    4a00:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    4a04:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    4a08:	0000018e 	andeq	r0, r0, lr, lsl #3
    4a0c:	04040021 	streq	r0, [r4], #-33	; 0xffffffdf
    4a10:	00040607 	andeq	r0, r4, r7, lsl #12
    4a14:	1f2c0f00 	svcne	0x002c0f00
    4a18:	03050000 	movweq	r0, #20480	; 0x5000
    4a1c:	0000017e 	andeq	r0, r0, lr, ror r1
    4a20:	e6500305 	ldrb	r0, [r0], -r5, lsl #6
    4a24:	760f2000 	strvc	r2, [pc], -r0
    4a28:	0600001f 			; <UNDEFINED> instruction: 0x0600001f
    4a2c:	00017e03 	andeq	r7, r1, r3, lsl #28
    4a30:	74030500 	strvc	r0, [r3], #-1280	; 0xfffffb00
    4a34:	0f2000e6 	svceq	0x002000e6
    4a38:	00001f54 	andeq	r1, r0, r4, asr pc
    4a3c:	017e0307 	cmneq	lr, r7, lsl #6
    4a40:	03050000 	movweq	r0, #20480	; 0x5000
    4a44:	2000e698 	mulcs	r0, r8, r6
    4a48:	001fbb10 	andseq	fp, pc, r0, lsl fp	; <UNPREDICTABLE>
    4a4c:	9e080100 	adflse	f0, f0, f0
    4a50:	05000000 	streq	r0, [r0, #-0]
    4a54:	00705403 	rsbseq	r5, r0, r3, lsl #8
    4a58:	1f971020 	svcne	0x00971020
    4a5c:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    4a60:	0000009e 	muleq	r0, lr, r0
    4a64:	70940305 	addsvc	r0, r4, r5, lsl #6
    4a68:	3e102000 	cdpcc	0, 1, cr2, cr0, cr0, {0}
    4a6c:	0100001f 	tsteq	r0, pc, lsl r0
    4a70:	00009e0a 	andeq	r9, r0, sl, lsl #28
    4a74:	b0030500 	andlt	r0, r3, r0, lsl #10
    4a78:	10200070 	eorne	r0, r0, r0, ror r0
    4a7c:	00001f66 	andeq	r1, r0, r6, ror #30
    4a80:	00620c01 	rsbeq	r0, r2, r1, lsl #24
    4a84:	03050000 	movweq	r0, #20480	; 0x5000
    4a88:	20007098 	mulcs	r0, r8, r0
    4a8c:	001f8710 	andseq	r8, pc, r0, lsl r7	; <UNPREDICTABLE>
    4a90:	620d0100 	andvs	r0, sp, #0, 2
    4a94:	05000000 	streq	r0, [r0, #-0]
    4a98:	00706403 	rsbseq	r6, r0, r3, lsl #8
    4a9c:	1fc71020 	svcne	0x00c71020
    4aa0:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    4aa4:	00000062 	andeq	r0, r0, r2, rrx
    4aa8:	70a40305 	adcvc	r0, r4, r5, lsl #6
    4aac:	4a102000 	bmi	40cab4 <startup-0x1fbf354c>
    4ab0:	0100001f 	tsteq	r0, pc, lsl r0
    4ab4:	00014c11 	andeq	r4, r1, r1, lsl ip
    4ab8:	70030500 	andvc	r0, r3, r0, lsl #10
    4abc:	10200070 	eorne	r0, r0, r0, ror r0
    4ac0:	00001faf 	andeq	r1, r0, pc, lsr #31
    4ac4:	00a41201 	adceq	r1, r4, r1, lsl #4
    4ac8:	03050000 	movweq	r0, #20480	; 0x5000
    4acc:	20007058 	andcs	r7, r0, r8, asr r0
    4ad0:	0000a40b 	andeq	sl, r0, fp, lsl #8
    4ad4:	00026000 	andeq	r6, r2, r0
    4ad8:	018e0e00 	orreq	r0, lr, r0, lsl #28
    4adc:	00000000 	andeq	r0, r0, r0
    4ae0:	001fa210 	andseq	sl, pc, r0, lsl r2	; <UNPREDICTABLE>
    4ae4:	50130100 	andspl	r0, r3, r0, lsl #2
    4ae8:	05000002 	streq	r0, [r0, #-2]
    4aec:	00704803 	rsbseq	r4, r0, r3, lsl #16
    4af0:	02ed1120 	rsceq	r1, sp, #32, 2
    4af4:	22010000 	andcs	r0, r1, #0
    4af8:	2000456c 	andcs	r4, r0, ip, ror #10
    4afc:	00000074 	andeq	r0, r0, r4, ror r0
    4b00:	02a69c01 	adceq	r9, r6, #256	; 0x100
    4b04:	4a120000 	bmi	484b0c <startup-0x1fb7b4f4>
    4b08:	0100001f 	tsteq	r0, pc, lsl r0
    4b0c:	00016222 	andeq	r6, r1, r2, lsr #4
    4b10:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4b14:	0008fe0f 	andeq	pc, r8, pc, lsl #28
    4b18:	2e230100 	sufcss	f0, f3, f0
    4b1c:	05000001 	streq	r0, [r0, #-1]
    4b20:	00e6bc03 	rsceq	fp, r6, r3, lsl #24
    4b24:	9e130020 	cdpls	0, 1, cr0, cr3, cr0, {1}
    4b28:	01000004 	tsteq	r0, r4
    4b2c:	0044f814 	subeq	pc, r4, r4, lsl r8	; <UNPREDICTABLE>
    4b30:	00007420 	andeq	r7, r0, r0, lsr #8
    4b34:	0f9c0100 	svceq	0x009c0100
    4b38:	00000d93 	muleq	r0, r3, sp
    4b3c:	009e1601 	addseq	r1, lr, r1, lsl #12
    4b40:	91020000 	mrsls	r0, (UNDEF: 2)
    4b44:	0d9d0f74 	ldceq	15, cr0, [sp, #464]	; 0x1d0
    4b48:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    4b4c:	0000009e 	muleq	r0, lr, r0
    4b50:	0f709102 	svceq	0x00709102
    4b54:	00000b93 	muleq	r0, r3, fp
    4b58:	009e1c01 	addseq	r1, lr, r1, lsl #24
    4b5c:	91020000 	mrsls	r0, (UNDEF: 2)
    4b60:	Address 0x00004b60 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	1117550e 	tstne	r7, lr, lsl #10
       c:	00171001 	andseq	r1, r7, r1
      10:	01130200 	tsteq	r3, r0, lsl #4
      14:	0b3a0b0b 	bleq	e82c48 <startup-0x1f17d3b8>
      18:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      1c:	0d030000 	stceq	0, cr0, [r3, #-0]
      20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
      24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      28:	000b3813 	andeq	r3, fp, r3, lsl r8
      2c:	00240400 	eoreq	r0, r4, r0, lsl #8
      30:	0b3e0b0b 	bleq	f82c64 <startup-0x1f07d39c>
      34:	00000e03 	andeq	r0, r0, r3, lsl #28
      38:	0b000f05 	bleq	3c54 <startup-0x1fffc3ac>
      3c:	0013490b 	andseq	r4, r3, fp, lsl #18
      40:	00160600 	andseq	r0, r6, r0, lsl #12
      44:	0b3a0e03 	bleq	e83858 <startup-0x1f17c7a8>
      48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      4c:	13070000 	movwne	r0, #28672	; 0x7000
      50:	0b0e0301 	bleq	380c5c <startup-0x1fc7f3a4>
      54:	3b0b3a0b 	blcc	2ce888 <startup-0x1fd31778>
      58:	0013010b 	andseq	r0, r3, fp, lsl #2
      5c:	00240800 	eoreq	r0, r4, r0, lsl #16
      60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
      64:	00000803 	andeq	r0, r0, r3, lsl #16
      68:	27011509 	strcs	r1, [r1, -r9, lsl #10]
      6c:	00130119 	andseq	r0, r3, r9, lsl r1
      70:	00050a00 	andeq	r0, r5, r0, lsl #20
      74:	00001349 	andeq	r1, r0, r9, asr #6
      78:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
      7c:	00130113 	andseq	r0, r3, r3, lsl r1
      80:	00210c00 	eoreq	r0, r1, r0, lsl #24
      84:	340d0000 	strcc	r0, [sp], #-0
      88:	3a0e0300 	bcc	380c90 <startup-0x1fc7f370>
      8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      90:	3c193f13 	ldccc	15, cr3, [r9], {19}
      94:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
      98:	13490021 	movtne	r0, #36897	; 0x9021
      9c:	0000052f 	andeq	r0, r0, pc, lsr #10
      a0:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
      a4:	000b2f13 	andeq	r2, fp, r3, lsl pc
      a8:	00341000 	eorseq	r1, r4, r0
      ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
      b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      b4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
      b8:	34110000 	ldrcc	r0, [r1], #-0
      bc:	3a0e0300 	bcc	380cc4 <startup-0x1fc7f33c>
      c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      c4:	00180213 	andseq	r0, r8, r3, lsl r2
      c8:	00341200 	eorseq	r1, r4, r0, lsl #4
      cc:	0b3a0803 	bleq	e820e0 <startup-0x1f17df20>
      d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      d4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
      d8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
      dc:	03193f01 	tsteq	r9, #1, 30
      e0:	3b0b3a08 	blcc	2ce908 <startup-0x1fd316f8>
      e4:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
      e8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
      ec:	97184006 	ldrls	r4, [r8, -r6]
      f0:	13011942 	movwne	r1, #6466	; 0x1942
      f4:	05140000 	ldreq	r0, [r4, #-0]
      f8:	3a0e0300 	bcc	380d00 <startup-0x1fc7f300>
      fc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     100:	00180213 	andseq	r0, r8, r3, lsl r2
     104:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
     108:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     10c:	0b3b0b3a 	bleq	ec2dfc <startup-0x1f13d204>
     110:	01111927 	tsteq	r1, r7, lsr #18
     114:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     118:	01194296 			; <UNDEFINED> instruction: 0x01194296
     11c:	16000013 			; <UNDEFINED> instruction: 0x16000013
     120:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     124:	0b3a0e03 	bleq	e83938 <startup-0x1f17c6c8>
     128:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     12c:	1301193c 	movwne	r1, #6460	; 0x193c
     130:	18170000 	ldmdane	r7, {}	; <UNPREDICTABLE>
     134:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     138:	08030034 	stmdaeq	r3, {r2, r4, r5}
     13c:	0b3b0b3a 	bleq	ec2e2c <startup-0x1f13d1d4>
     140:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     144:	34190000 	ldrcc	r0, [r9], #-0
     148:	3a0e0300 	bcc	380d50 <startup-0x1fc7f2b0>
     14c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     150:	00180213 	andseq	r0, r8, r3, lsl r2
     154:	010b1a00 	tsteq	fp, r0, lsl #20
     158:	06120111 			; <UNDEFINED> instruction: 0x06120111
     15c:	341b0000 	ldrcc	r0, [fp], #-0
     160:	3a080300 	bcc	200d68 <startup-0x1fdff298>
     164:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     168:	00180213 	andseq	r0, r8, r3, lsl r2
     16c:	002e1c00 	eoreq	r1, lr, r0, lsl #24
     170:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     174:	0b3b0b3a 	bleq	ec2e64 <startup-0x1f13d19c>
     178:	01111927 	tsteq	r1, r7, lsr #18
     17c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     180:	00194296 	mulseq	r9, r6, r2
     184:	002e1d00 	eoreq	r1, lr, r0, lsl #26
     188:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     18c:	0b3b0b3a 	bleq	ec2e7c <startup-0x1f13d184>
     190:	01111927 	tsteq	r1, r7, lsr #18
     194:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     198:	00194297 	mulseq	r9, r7, r2
     19c:	11010000 	mrsne	r0, (UNDEF: 1)
     1a0:	130e2501 	movwne	r2, #58625	; 0xe501
     1a4:	110e030b 	tstne	lr, fp, lsl #6
     1a8:	10061201 	andne	r1, r6, r1, lsl #4
     1ac:	02000017 	andeq	r0, r0, #23
     1b0:	0b0b0113 	bleq	2c0604 <startup-0x1fd3f9fc>
     1b4:	0b3b0b3a 	bleq	ec2ea4 <startup-0x1f13d15c>
     1b8:	00001301 	andeq	r1, r0, r1, lsl #6
     1bc:	03000d03 	movweq	r0, #3331	; 0xd03
     1c0:	3b0b3a0e 	blcc	2cea00 <startup-0x1fd31600>
     1c4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     1c8:	0400000b 	streq	r0, [r0], #-11
     1cc:	0b0b0024 	bleq	2c0264 <startup-0x1fd3fd9c>
     1d0:	0e030b3e 	vmoveq.16	d3[0], r0
     1d4:	0f050000 	svceq	0x00050000
     1d8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     1dc:	06000013 			; <UNDEFINED> instruction: 0x06000013
     1e0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     1e4:	0b3b0b3a 	bleq	ec2ed4 <startup-0x1f13d12c>
     1e8:	00001349 	andeq	r1, r0, r9, asr #6
     1ec:	03011307 	movweq	r1, #4871	; 0x1307
     1f0:	3a0b0b0e 	bcc	2c2e30 <startup-0x1fd3d1d0>
     1f4:	010b3b0b 	tsteq	fp, fp, lsl #22
     1f8:	08000013 	stmdaeq	r0, {r0, r1, r4}
     1fc:	0b0b0024 	bleq	2c0294 <startup-0x1fd3fd6c>
     200:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     204:	15090000 	strne	r0, [r9, #-0]
     208:	01192701 	tsteq	r9, r1, lsl #14
     20c:	0a000013 	beq	260 <startup-0x1ffffda0>
     210:	13490005 	movtne	r0, #36869	; 0x9005
     214:	010b0000 	mrseq	r0, (UNDEF: 11)
     218:	01134901 	tsteq	r3, r1, lsl #18
     21c:	0c000013 	stceq	0, cr0, [r0], {19}
     220:	00000021 	andeq	r0, r0, r1, lsr #32
     224:	0300340d 	movweq	r3, #1037	; 0x40d
     228:	3b0b3a0e 	blcc	2cea68 <startup-0x1fd31598>
     22c:	3f13490b 	svccc	0x0013490b
     230:	00193c19 	andseq	r3, r9, r9, lsl ip
     234:	00340e00 	eorseq	r0, r4, r0, lsl #28
     238:	0b3a1347 	bleq	e84f5c <startup-0x1f17b0a4>
     23c:	18020b3b 	stmdane	r2, {r0, r1, r3, r4, r5, r8, r9, fp}
     240:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
     244:	03193f01 	tsteq	r9, #1, 30
     248:	3b0b3a0e 	blcc	2cea88 <startup-0x1fd31578>
     24c:	1119270b 	tstne	r9, fp, lsl #14
     250:	40061201 	andmi	r1, r6, r1, lsl #4
     254:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     258:	00001301 	andeq	r1, r0, r1, lsl #6
     25c:	03000510 	movweq	r0, #1296	; 0x510
     260:	3b0b3a0e 	blcc	2ceaa0 <startup-0x1fd31560>
     264:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     268:	11000018 	tstne	r0, r8, lsl r0
     26c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     270:	0b3a0e03 	bleq	e83a84 <startup-0x1f17c57c>
     274:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     278:	06120111 			; <UNDEFINED> instruction: 0x06120111
     27c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     280:	00000019 	andeq	r0, r0, r9, lsl r0
     284:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     288:	030b130e 	movweq	r1, #45838	; 0xb30e
     28c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     290:	00171006 	andseq	r1, r7, r6
     294:	01130200 	tsteq	r3, r0, lsl #4
     298:	0b3a0b0b 	bleq	e82ecc <startup-0x1f17d134>
     29c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     2a0:	0d030000 	stceq	0, cr0, [r3, #-0]
     2a4:	3a0e0300 	bcc	380eac <startup-0x1fc7f154>
     2a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2ac:	000b3813 	andeq	r3, fp, r3, lsl r8
     2b0:	00240400 	eoreq	r0, r4, r0, lsl #8
     2b4:	0b3e0b0b 	bleq	f82ee8 <startup-0x1f07d118>
     2b8:	00000e03 	andeq	r0, r0, r3, lsl #28
     2bc:	0b000f05 	bleq	3ed8 <startup-0x1fffc128>
     2c0:	0013490b 	andseq	r4, r3, fp, lsl #18
     2c4:	00160600 	andseq	r0, r6, r0, lsl #12
     2c8:	0b3a0e03 	bleq	e83adc <startup-0x1f17c524>
     2cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     2d0:	13070000 	movwne	r0, #28672	; 0x7000
     2d4:	0b0e0301 	bleq	380ee0 <startup-0x1fc7f120>
     2d8:	3b0b3a0b 	blcc	2ceb0c <startup-0x1fd314f4>
     2dc:	0013010b 	andseq	r0, r3, fp, lsl #2
     2e0:	00240800 	eoreq	r0, r4, r0, lsl #16
     2e4:	0b3e0b0b 	bleq	f82f18 <startup-0x1f07d0e8>
     2e8:	00000803 	andeq	r0, r0, r3, lsl #16
     2ec:	27011509 	strcs	r1, [r1, -r9, lsl #10]
     2f0:	00130119 	andseq	r0, r3, r9, lsl r1
     2f4:	00050a00 	andeq	r0, r5, r0, lsl #20
     2f8:	00001349 	andeq	r1, r0, r9, asr #6
     2fc:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
     300:	00130113 	andseq	r0, r3, r3, lsl r1
     304:	00210c00 	eoreq	r0, r1, r0, lsl #24
     308:	340d0000 	strcc	r0, [sp], #-0
     30c:	3a0e0300 	bcc	380f14 <startup-0x1fc7f0ec>
     310:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     314:	3c193f13 	ldccc	15, cr3, [r9], {19}
     318:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
     31c:	13490021 	movtne	r0, #36897	; 0x9021
     320:	00000b2f 	andeq	r0, r0, pc, lsr #22
     324:	0300340f 	movweq	r3, #1039	; 0x40f
     328:	3b0b3a0e 	blcc	2ceb68 <startup-0x1fd31498>
     32c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     330:	10000018 	andne	r0, r0, r8, lsl r0
     334:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     338:	0b3b0b3a 	bleq	ec3028 <startup-0x1f13cfd8>
     33c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     340:	00001802 	andeq	r1, r0, r2, lsl #16
     344:	3f012e11 	svccc	0x00012e11
     348:	3a0e0319 	bcc	380fb4 <startup-0x1fc7f04c>
     34c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     350:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     354:	96184006 	ldrls	r4, [r8], -r6
     358:	13011942 	movwne	r1, #6466	; 0x1942
     35c:	05120000 	ldreq	r0, [r2, #-0]
     360:	3a0e0300 	bcc	380f68 <startup-0x1fc7f098>
     364:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     368:	00180213 	andseq	r0, r8, r3, lsl r2
     36c:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
     370:	0b3a0e03 	bleq	e83b84 <startup-0x1f17c47c>
     374:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     378:	06120111 			; <UNDEFINED> instruction: 0x06120111
     37c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     380:	00000019 	andeq	r0, r0, r9, lsl r0
     384:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     388:	030b130e 	movweq	r1, #45838	; 0xb30e
     38c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     390:	00171006 	andseq	r1, r7, r6
     394:	00240200 	eoreq	r0, r4, r0, lsl #4
     398:	0b3e0b0b 	bleq	f82fcc <startup-0x1f07d034>
     39c:	00000e03 	andeq	r0, r0, r3, lsl #28
     3a0:	0b011303 	bleq	44fb4 <startup-0x1ffbb04c>
     3a4:	3b0b3a0b 	blcc	2cebd8 <startup-0x1fd31428>
     3a8:	0013010b 	andseq	r0, r3, fp, lsl #2
     3ac:	000d0400 	andeq	r0, sp, r0, lsl #8
     3b0:	0b3a0e03 	bleq	e83bc4 <startup-0x1f17c43c>
     3b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     3b8:	00000b38 	andeq	r0, r0, r8, lsr fp
     3bc:	0b000f05 	bleq	3fd8 <startup-0x1fffc028>
     3c0:	0013490b 	andseq	r4, r3, fp, lsl #18
     3c4:	00160600 	andseq	r0, r6, r0, lsl #12
     3c8:	0b3a0e03 	bleq	e83bdc <startup-0x1f17c424>
     3cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     3d0:	13070000 	movwne	r0, #28672	; 0x7000
     3d4:	0b0e0301 	bleq	380fe0 <startup-0x1fc7f020>
     3d8:	3b0b3a0b 	blcc	2cec0c <startup-0x1fd313f4>
     3dc:	0013010b 	andseq	r0, r3, fp, lsl #2
     3e0:	00240800 	eoreq	r0, r4, r0, lsl #16
     3e4:	0b3e0b0b 	bleq	f83018 <startup-0x1f07cfe8>
     3e8:	00000803 	andeq	r0, r0, r3, lsl #16
     3ec:	27011509 	strcs	r1, [r1, -r9, lsl #10]
     3f0:	00130119 	andseq	r0, r3, r9, lsl r1
     3f4:	00050a00 	andeq	r0, r5, r0, lsl #20
     3f8:	00001349 	andeq	r1, r0, r9, asr #6
     3fc:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
     400:	00130113 	andseq	r0, r3, r3, lsl r1
     404:	00210c00 	eoreq	r0, r1, r0, lsl #24
     408:	340d0000 	strcc	r0, [sp], #-0
     40c:	3a0e0300 	bcc	381014 <startup-0x1fc7efec>
     410:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     414:	3c193f13 	ldccc	15, cr3, [r9], {19}
     418:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
     41c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     420:	0b3a0e03 	bleq	e83c34 <startup-0x1f17c3cc>
     424:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     428:	06120111 			; <UNDEFINED> instruction: 0x06120111
     42c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     430:	0f000019 	svceq	0x00000019
     434:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     438:	0b3b0b3a 	bleq	ec3128 <startup-0x1f13ced8>
     43c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     440:	34100000 	ldrcc	r0, [r0], #-0
     444:	3a0e0300 	bcc	38104c <startup-0x1fc7efb4>
     448:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     44c:	00180213 	andseq	r0, r8, r3, lsl r2
     450:	11010000 	mrsne	r0, (UNDEF: 1)
     454:	130e2501 	movwne	r2, #58625	; 0xe501
     458:	110e030b 	tstne	lr, fp, lsl #6
     45c:	10061201 	andne	r1, r6, r1, lsl #4
     460:	02000017 	andeq	r0, r0, #23
     464:	0b0b0113 	bleq	2c08b8 <startup-0x1fd3f748>
     468:	0b3b0b3a 	bleq	ec3158 <startup-0x1f13cea8>
     46c:	00001301 	andeq	r1, r0, r1, lsl #6
     470:	03000d03 	movweq	r0, #3331	; 0xd03
     474:	3b0b3a0e 	blcc	2cecb4 <startup-0x1fd3134c>
     478:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     47c:	0400000b 	streq	r0, [r0], #-11
     480:	0b0b0024 	bleq	2c0518 <startup-0x1fd3fae8>
     484:	0e030b3e 	vmoveq.16	d3[0], r0
     488:	0f050000 	svceq	0x00050000
     48c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     490:	06000013 			; <UNDEFINED> instruction: 0x06000013
     494:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     498:	0b3b0b3a 	bleq	ec3188 <startup-0x1f13ce78>
     49c:	00001349 	andeq	r1, r0, r9, asr #6
     4a0:	03011307 	movweq	r1, #4871	; 0x1307
     4a4:	3a0b0b0e 	bcc	2c30e4 <startup-0x1fd3cf1c>
     4a8:	010b3b0b 	tsteq	fp, fp, lsl #22
     4ac:	08000013 	stmdaeq	r0, {r0, r1, r4}
     4b0:	0b0b0024 	bleq	2c0548 <startup-0x1fd3fab8>
     4b4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     4b8:	15090000 	strne	r0, [r9, #-0]
     4bc:	01192701 	tsteq	r9, r1, lsl #14
     4c0:	0a000013 	beq	514 <startup-0x1ffffaec>
     4c4:	13490005 	movtne	r0, #36869	; 0x9005
     4c8:	010b0000 	mrseq	r0, (UNDEF: 11)
     4cc:	01134901 	tsteq	r3, r1, lsl #18
     4d0:	0c000013 	stceq	0, cr0, [r0], {19}
     4d4:	00000021 	andeq	r0, r0, r1, lsr #32
     4d8:	0300340d 	movweq	r3, #1037	; 0x40d
     4dc:	3b0b3a0e 	blcc	2ced1c <startup-0x1fd312e4>
     4e0:	3f13490b 	svccc	0x0013490b
     4e4:	00193c19 	andseq	r3, r9, r9, lsl ip
     4e8:	00210e00 	eoreq	r0, r1, r0, lsl #28
     4ec:	0b2f1349 	bleq	bc5218 <startup-0x1f43ade8>
     4f0:	340f0000 	strcc	r0, [pc], #-0	; 4f8 <startup-0x1ffffb08>
     4f4:	3a0e0300 	bcc	3810fc <startup-0x1fc7ef04>
     4f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4fc:	00180213 	andseq	r0, r8, r3, lsl r2
     500:	00341000 	eorseq	r1, r4, r0
     504:	0b3a0e03 	bleq	e83d18 <startup-0x1f17c2e8>
     508:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     50c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     510:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     514:	03193f01 	tsteq	r9, #1, 30
     518:	3b0b3a0e 	blcc	2ced58 <startup-0x1fd312a8>
     51c:	1119270b 	tstne	r9, fp, lsl #14
     520:	40061201 	andmi	r1, r6, r1, lsl #4
     524:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     528:	00001301 	andeq	r1, r0, r1, lsl #6
     52c:	03000512 	movweq	r0, #1298	; 0x512
     530:	3b0b3a0e 	blcc	2ced70 <startup-0x1fd31290>
     534:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     538:	13000018 	movwne	r0, #24
     53c:	0e03012e 	adfeqsp	f0, f3, #0.5
     540:	0b3b0b3a 	bleq	ec3230 <startup-0x1f13cdd0>
     544:	01111927 	tsteq	r1, r7, lsr #18
     548:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     54c:	00194296 	mulseq	r9, r6, r2
     550:	11010000 	mrsne	r0, (UNDEF: 1)
     554:	130e2501 	movwne	r2, #58625	; 0xe501
     558:	110e030b 	tstne	lr, fp, lsl #6
     55c:	10061201 	andne	r1, r6, r1, lsl #4
     560:	02000017 	andeq	r0, r0, #23
     564:	0b0b0113 	bleq	2c09b8 <startup-0x1fd3f648>
     568:	0b3b0b3a 	bleq	ec3258 <startup-0x1f13cda8>
     56c:	00001301 	andeq	r1, r0, r1, lsl #6
     570:	03000d03 	movweq	r0, #3331	; 0xd03
     574:	3b0b3a0e 	blcc	2cedb4 <startup-0x1fd3124c>
     578:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     57c:	0400000b 	streq	r0, [r0], #-11
     580:	0b0b0024 	bleq	2c0618 <startup-0x1fd3f9e8>
     584:	0e030b3e 	vmoveq.16	d3[0], r0
     588:	0f050000 	svceq	0x00050000
     58c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     590:	06000013 			; <UNDEFINED> instruction: 0x06000013
     594:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     598:	0b3b0b3a 	bleq	ec3288 <startup-0x1f13cd78>
     59c:	00001349 	andeq	r1, r0, r9, asr #6
     5a0:	03011307 	movweq	r1, #4871	; 0x1307
     5a4:	3a0b0b0e 	bcc	2c31e4 <startup-0x1fd3ce1c>
     5a8:	010b3b0b 	tsteq	fp, fp, lsl #22
     5ac:	08000013 	stmdaeq	r0, {r0, r1, r4}
     5b0:	0b0b0024 	bleq	2c0648 <startup-0x1fd3f9b8>
     5b4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     5b8:	15090000 	strne	r0, [r9, #-0]
     5bc:	01192701 	tsteq	r9, r1, lsl #14
     5c0:	0a000013 	beq	614 <startup-0x1ffff9ec>
     5c4:	13490005 	movtne	r0, #36869	; 0x9005
     5c8:	010b0000 	mrseq	r0, (UNDEF: 11)
     5cc:	01134901 	tsteq	r3, r1, lsl #18
     5d0:	0c000013 	stceq	0, cr0, [r0], {19}
     5d4:	00000021 	andeq	r0, r0, r1, lsr #32
     5d8:	0300340d 	movweq	r3, #1037	; 0x40d
     5dc:	3b0b3a0e 	blcc	2cee1c <startup-0x1fd311e4>
     5e0:	3f13490b 	svccc	0x0013490b
     5e4:	00193c19 	andseq	r3, r9, r9, lsl ip
     5e8:	00210e00 	eoreq	r0, r1, r0, lsl #28
     5ec:	0b2f1349 	bleq	bc5318 <startup-0x1f43ace8>
     5f0:	340f0000 	strcc	r0, [pc], #-0	; 5f8 <startup-0x1ffffa08>
     5f4:	3a0e0300 	bcc	3811fc <startup-0x1fc7ee04>
     5f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     5fc:	00180213 	andseq	r0, r8, r3, lsl r2
     600:	00341000 	eorseq	r1, r4, r0
     604:	0b3a0e03 	bleq	e83e18 <startup-0x1f17c1e8>
     608:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     60c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     610:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     614:	03193f01 	tsteq	r9, #1, 30
     618:	3b0b3a0e 	blcc	2cee58 <startup-0x1fd311a8>
     61c:	1119270b 	tstne	r9, fp, lsl #14
     620:	40061201 	andmi	r1, r6, r1, lsl #4
     624:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     628:	00001301 	andeq	r1, r0, r1, lsl #6
     62c:	03000512 	movweq	r0, #1298	; 0x512
     630:	3b0b3a0e 	blcc	2cee70 <startup-0x1fd31190>
     634:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     638:	13000018 	movwne	r0, #24
     63c:	0e03012e 	adfeqsp	f0, f3, #0.5
     640:	0b3b0b3a 	bleq	ec3330 <startup-0x1f13ccd0>
     644:	01111927 	tsteq	r1, r7, lsr #18
     648:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     64c:	00194296 	mulseq	r9, r6, r2
     650:	11010000 	mrsne	r0, (UNDEF: 1)
     654:	130e2501 	movwne	r2, #58625	; 0xe501
     658:	110e030b 	tstne	lr, fp, lsl #6
     65c:	10061201 	andne	r1, r6, r1, lsl #4
     660:	02000017 	andeq	r0, r0, #23
     664:	0b0b0113 	bleq	2c0ab8 <startup-0x1fd3f548>
     668:	0b3b0b3a 	bleq	ec3358 <startup-0x1f13cca8>
     66c:	00001301 	andeq	r1, r0, r1, lsl #6
     670:	03000d03 	movweq	r0, #3331	; 0xd03
     674:	3b0b3a0e 	blcc	2ceeb4 <startup-0x1fd3114c>
     678:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     67c:	0400000b 	streq	r0, [r0], #-11
     680:	0b0b0024 	bleq	2c0718 <startup-0x1fd3f8e8>
     684:	0e030b3e 	vmoveq.16	d3[0], r0
     688:	0f050000 	svceq	0x00050000
     68c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     690:	06000013 			; <UNDEFINED> instruction: 0x06000013
     694:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     698:	0b3b0b3a 	bleq	ec3388 <startup-0x1f13cc78>
     69c:	00001349 	andeq	r1, r0, r9, asr #6
     6a0:	03011307 	movweq	r1, #4871	; 0x1307
     6a4:	3a0b0b0e 	bcc	2c32e4 <startup-0x1fd3cd1c>
     6a8:	010b3b0b 	tsteq	fp, fp, lsl #22
     6ac:	08000013 	stmdaeq	r0, {r0, r1, r4}
     6b0:	0b0b0024 	bleq	2c0748 <startup-0x1fd3f8b8>
     6b4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     6b8:	15090000 	strne	r0, [r9, #-0]
     6bc:	01192701 	tsteq	r9, r1, lsl #14
     6c0:	0a000013 	beq	714 <startup-0x1ffff8ec>
     6c4:	13490005 	movtne	r0, #36869	; 0x9005
     6c8:	010b0000 	mrseq	r0, (UNDEF: 11)
     6cc:	01134901 	tsteq	r3, r1, lsl #18
     6d0:	0c000013 	stceq	0, cr0, [r0], {19}
     6d4:	00000021 	andeq	r0, r0, r1, lsr #32
     6d8:	0300340d 	movweq	r3, #1037	; 0x40d
     6dc:	3b0b3a0e 	blcc	2cef1c <startup-0x1fd310e4>
     6e0:	3f13490b 	svccc	0x0013490b
     6e4:	00193c19 	andseq	r3, r9, r9, lsl ip
     6e8:	00210e00 	eoreq	r0, r1, r0, lsl #28
     6ec:	0b2f1349 	bleq	bc5418 <startup-0x1f43abe8>
     6f0:	340f0000 	strcc	r0, [pc], #-0	; 6f8 <startup-0x1ffff908>
     6f4:	3a0e0300 	bcc	3812fc <startup-0x1fc7ed04>
     6f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6fc:	00180213 	andseq	r0, r8, r3, lsl r2
     700:	00341000 	eorseq	r1, r4, r0
     704:	0b3a0e03 	bleq	e83f18 <startup-0x1f17c0e8>
     708:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     70c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     710:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     714:	03193f01 	tsteq	r9, #1, 30
     718:	3b0b3a0e 	blcc	2cef58 <startup-0x1fd310a8>
     71c:	1119270b 	tstne	r9, fp, lsl #14
     720:	40061201 	andmi	r1, r6, r1, lsl #4
     724:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     728:	00001301 	andeq	r1, r0, r1, lsl #6
     72c:	03000512 	movweq	r0, #1298	; 0x512
     730:	3b0b3a0e 	blcc	2cef70 <startup-0x1fd31090>
     734:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     738:	13000018 	movwne	r0, #24
     73c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     740:	0b3a0e03 	bleq	e83f54 <startup-0x1f17c0ac>
     744:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     748:	06120111 			; <UNDEFINED> instruction: 0x06120111
     74c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     750:	00130119 	andseq	r0, r3, r9, lsl r1
     754:	00051400 	andeq	r1, r5, r0, lsl #8
     758:	0b3a0803 	bleq	e8276c <startup-0x1f17d894>
     75c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     760:	00001802 	andeq	r1, r0, r2, lsl #16
     764:	03012e15 	movweq	r2, #7701	; 0x1e15
     768:	3b0b3a0e 	blcc	2cefa8 <startup-0x1fd31058>
     76c:	1119270b 	tstne	r9, fp, lsl #14
     770:	40061201 	andmi	r1, r6, r1, lsl #4
     774:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     778:	01000000 	mrseq	r0, (UNDEF: 0)
     77c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     780:	0e030b13 	vmoveq.32	d3[0], r0
     784:	06120111 			; <UNDEFINED> instruction: 0x06120111
     788:	00001710 	andeq	r1, r0, r0, lsl r7
     78c:	0b011302 	bleq	4539c <startup-0x1ffbac64>
     790:	3b0b3a0b 	blcc	2cefc4 <startup-0x1fd3103c>
     794:	0013010b 	andseq	r0, r3, fp, lsl #2
     798:	000d0300 	andeq	r0, sp, r0, lsl #6
     79c:	0b3a0e03 	bleq	e83fb0 <startup-0x1f17c050>
     7a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     7a4:	00000b38 	andeq	r0, r0, r8, lsr fp
     7a8:	0b002404 	bleq	97c0 <startup-0x1fff6840>
     7ac:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     7b0:	0500000e 	streq	r0, [r0, #-14]
     7b4:	0b0b000f 	bleq	2c07f8 <startup-0x1fd3f808>
     7b8:	00001349 	andeq	r1, r0, r9, asr #6
     7bc:	03001606 	movweq	r1, #1542	; 0x606
     7c0:	3b0b3a0e 	blcc	2cf000 <startup-0x1fd31000>
     7c4:	0013490b 	andseq	r4, r3, fp, lsl #18
     7c8:	01130700 	tsteq	r3, r0, lsl #14
     7cc:	0b0b0e03 	bleq	2c3fe0 <startup-0x1fd3c020>
     7d0:	0b3b0b3a 	bleq	ec34c0 <startup-0x1f13cb40>
     7d4:	00001301 	andeq	r1, r0, r1, lsl #6
     7d8:	0b002408 	bleq	9800 <startup-0x1fff6800>
     7dc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     7e0:	09000008 	stmdbeq	r0, {r3}
     7e4:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     7e8:	00001301 	andeq	r1, r0, r1, lsl #6
     7ec:	4900050a 	stmdbmi	r0, {r1, r3, r8, sl}
     7f0:	0b000013 	bleq	844 <startup-0x1ffff7bc>
     7f4:	13490101 	movtne	r0, #37121	; 0x9101
     7f8:	00001301 	andeq	r1, r0, r1, lsl #6
     7fc:	0000210c 	andeq	r2, r0, ip, lsl #2
     800:	00340d00 	eorseq	r0, r4, r0, lsl #26
     804:	0b3a0e03 	bleq	e84018 <startup-0x1f17bfe8>
     808:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     80c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     810:	210e0000 	mrscs	r0, (UNDEF: 14)
     814:	2f134900 	svccs	0x00134900
     818:	0f00000b 	svceq	0x0000000b
     81c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     820:	0b3b0b3a 	bleq	ec3510 <startup-0x1f13caf0>
     824:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     828:	34100000 	ldrcc	r0, [r0], #-0
     82c:	3a0e0300 	bcc	381434 <startup-0x1fc7ebcc>
     830:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     834:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     838:	11000018 	tstne	r0, r8, lsl r0
     83c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     840:	0b3a0e03 	bleq	e84054 <startup-0x1f17bfac>
     844:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     848:	06120111 			; <UNDEFINED> instruction: 0x06120111
     84c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     850:	00130119 	andseq	r0, r3, r9, lsl r1
     854:	00051200 	andeq	r1, r5, r0, lsl #4
     858:	0b3a0e03 	bleq	e8406c <startup-0x1f17bf94>
     85c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     860:	00001802 	andeq	r1, r0, r2, lsl #16
     864:	03012e13 	movweq	r2, #7699	; 0x1e13
     868:	3b0b3a0e 	blcc	2cf0a8 <startup-0x1fd30f58>
     86c:	1119270b 	tstne	r9, fp, lsl #14
     870:	40061201 	andmi	r1, r6, r1, lsl #4
     874:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     878:	01000000 	mrseq	r0, (UNDEF: 0)
     87c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     880:	0e030b13 	vmoveq.32	d3[0], r0
     884:	06120111 			; <UNDEFINED> instruction: 0x06120111
     888:	00001710 	andeq	r1, r0, r0, lsl r7
     88c:	0b011302 	bleq	4549c <startup-0x1ffbab64>
     890:	3b0b3a0b 	blcc	2cf0c4 <startup-0x1fd30f3c>
     894:	0013010b 	andseq	r0, r3, fp, lsl #2
     898:	000d0300 	andeq	r0, sp, r0, lsl #6
     89c:	0b3a0e03 	bleq	e840b0 <startup-0x1f17bf50>
     8a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     8a4:	00000b38 	andeq	r0, r0, r8, lsr fp
     8a8:	0b002404 	bleq	98c0 <startup-0x1fff6740>
     8ac:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     8b0:	0500000e 	streq	r0, [r0, #-14]
     8b4:	0b0b000f 	bleq	2c08f8 <startup-0x1fd3f708>
     8b8:	00001349 	andeq	r1, r0, r9, asr #6
     8bc:	03001606 	movweq	r1, #1542	; 0x606
     8c0:	3b0b3a0e 	blcc	2cf100 <startup-0x1fd30f00>
     8c4:	0013490b 	andseq	r4, r3, fp, lsl #18
     8c8:	01130700 	tsteq	r3, r0, lsl #14
     8cc:	0b0b0e03 	bleq	2c40e0 <startup-0x1fd3bf20>
     8d0:	0b3b0b3a 	bleq	ec35c0 <startup-0x1f13ca40>
     8d4:	00001301 	andeq	r1, r0, r1, lsl #6
     8d8:	0b002408 	bleq	9900 <startup-0x1fff6700>
     8dc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     8e0:	09000008 	stmdbeq	r0, {r3}
     8e4:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     8e8:	00001301 	andeq	r1, r0, r1, lsl #6
     8ec:	4900050a 	stmdbmi	r0, {r1, r3, r8, sl}
     8f0:	0b000013 	bleq	944 <startup-0x1ffff6bc>
     8f4:	13490101 	movtne	r0, #37121	; 0x9101
     8f8:	00001301 	andeq	r1, r0, r1, lsl #6
     8fc:	0000210c 	andeq	r2, r0, ip, lsl #2
     900:	00340d00 	eorseq	r0, r4, r0, lsl #26
     904:	0b3a0e03 	bleq	e84118 <startup-0x1f17bee8>
     908:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     90c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     910:	210e0000 	mrscs	r0, (UNDEF: 14)
     914:	2f134900 	svccs	0x00134900
     918:	0f000005 	svceq	0x00000005
     91c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     920:	0b3b0b3a 	bleq	ec3610 <startup-0x1f13c9f0>
     924:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     928:	34100000 	ldrcc	r0, [r0], #-0
     92c:	3a0e0300 	bcc	381534 <startup-0x1fc7eacc>
     930:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     934:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     938:	11000018 	tstne	r0, r8, lsl r0
     93c:	13490021 	movtne	r0, #36897	; 0x9021
     940:	00000b2f 	andeq	r0, r0, pc, lsr #22
     944:	3f012e12 	svccc	0x00012e12
     948:	3a0e0319 	bcc	3815b4 <startup-0x1fc7ea4c>
     94c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     950:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     954:	96184006 	ldrls	r4, [r8], -r6
     958:	13011942 	movwne	r1, #6466	; 0x1942
     95c:	05130000 	ldreq	r0, [r3, #-0]
     960:	3a0e0300 	bcc	381568 <startup-0x1fc7ea98>
     964:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     968:	00180213 	andseq	r0, r8, r3, lsl r2
     96c:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
     970:	0b3a0e03 	bleq	e84184 <startup-0x1f17be7c>
     974:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     978:	06120111 			; <UNDEFINED> instruction: 0x06120111
     97c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     980:	00000019 	andeq	r0, r0, r9, lsl r0
     984:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     988:	030b130e 	movweq	r1, #45838	; 0xb30e
     98c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     990:	00171006 	andseq	r1, r7, r6
     994:	01130200 	tsteq	r3, r0, lsl #4
     998:	0b3a0b0b 	bleq	e835cc <startup-0x1f17ca34>
     99c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     9a0:	0d030000 	stceq	0, cr0, [r3, #-0]
     9a4:	3a0e0300 	bcc	3815ac <startup-0x1fc7ea54>
     9a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     9ac:	000b3813 	andeq	r3, fp, r3, lsl r8
     9b0:	00240400 	eoreq	r0, r4, r0, lsl #8
     9b4:	0b3e0b0b 	bleq	f835e8 <startup-0x1f07ca18>
     9b8:	00000e03 	andeq	r0, r0, r3, lsl #28
     9bc:	0b000f05 	bleq	45d8 <startup-0x1fffba28>
     9c0:	0013490b 	andseq	r4, r3, fp, lsl #18
     9c4:	00160600 	andseq	r0, r6, r0, lsl #12
     9c8:	0b3a0e03 	bleq	e841dc <startup-0x1f17be24>
     9cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     9d0:	13070000 	movwne	r0, #28672	; 0x7000
     9d4:	0b0e0301 	bleq	3815e0 <startup-0x1fc7ea20>
     9d8:	3b0b3a0b 	blcc	2cf20c <startup-0x1fd30df4>
     9dc:	0013010b 	andseq	r0, r3, fp, lsl #2
     9e0:	00240800 	eoreq	r0, r4, r0, lsl #16
     9e4:	0b3e0b0b 	bleq	f83618 <startup-0x1f07c9e8>
     9e8:	00000803 	andeq	r0, r0, r3, lsl #16
     9ec:	27011509 	strcs	r1, [r1, -r9, lsl #10]
     9f0:	00130119 	andseq	r0, r3, r9, lsl r1
     9f4:	00050a00 	andeq	r0, r5, r0, lsl #20
     9f8:	00001349 	andeq	r1, r0, r9, asr #6
     9fc:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
     a00:	00130113 	andseq	r0, r3, r3, lsl r1
     a04:	00210c00 	eoreq	r0, r1, r0, lsl #24
     a08:	340d0000 	strcc	r0, [sp], #-0
     a0c:	3a0e0300 	bcc	381614 <startup-0x1fc7e9ec>
     a10:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a14:	3c193f13 	ldccc	15, cr3, [r9], {19}
     a18:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
     a1c:	13490021 	movtne	r0, #36897	; 0x9021
     a20:	0000052f 	andeq	r0, r0, pc, lsr #10
     a24:	4700340f 	strmi	r3, [r0, -pc, lsl #8]
     a28:	3b0b3a13 	blcc	2cf27c <startup-0x1fd30d84>
     a2c:	0018020b 	andseq	r0, r8, fp, lsl #4
     a30:	00341000 	eorseq	r1, r4, r0
     a34:	0b3a1347 	bleq	e85758 <startup-0x1f17a8a8>
     a38:	00001802 	andeq	r1, r0, r2, lsl #16
     a3c:	3f012e11 	svccc	0x00012e11
     a40:	3a0e0319 	bcc	3816ac <startup-0x1fc7e954>
     a44:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     a48:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     a4c:	96184006 	ldrls	r4, [r8], -r6
     a50:	13011942 	movwne	r1, #6466	; 0x1942
     a54:	05120000 	ldreq	r0, [r2, #-0]
     a58:	3a0e0300 	bcc	381660 <startup-0x1fc7e9a0>
     a5c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a60:	00180213 	andseq	r0, r8, r3, lsl r2
     a64:	00341300 	eorseq	r1, r4, r0, lsl #6
     a68:	0b3a0e03 	bleq	e8427c <startup-0x1f17bd84>
     a6c:	1349053b 	movtne	r0, #38203	; 0x953b
     a70:	00001802 	andeq	r1, r0, r2, lsl #16
     a74:	3f012e14 	svccc	0x00012e14
     a78:	3a0e0319 	bcc	3816e4 <startup-0x1fc7e91c>
     a7c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     a80:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     a84:	97184006 	ldrls	r4, [r8, -r6]
     a88:	13011942 	movwne	r1, #6466	; 0x1942
     a8c:	34150000 	ldrcc	r0, [r5], #-0
     a90:	3a080300 	bcc	201698 <startup-0x1fdfe968>
     a94:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a98:	00180213 	andseq	r0, r8, r3, lsl r2
     a9c:	00341600 	eorseq	r1, r4, r0, lsl #12
     aa0:	0b3a0803 	bleq	e82ab4 <startup-0x1f17d54c>
     aa4:	1349053b 	movtne	r0, #38203	; 0x953b
     aa8:	05170000 	ldreq	r0, [r7, #-0]
     aac:	3a080300 	bcc	2016b4 <startup-0x1fdfe94c>
     ab0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ab4:	00180213 	andseq	r0, r8, r3, lsl r2
     ab8:	010b1800 	tsteq	fp, r0, lsl #16
     abc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     ac0:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
     ac4:	03193f01 	tsteq	r9, #1, 30
     ac8:	3b0b3a0e 	blcc	2cf308 <startup-0x1fd30cf8>
     acc:	1119270b 	tstne	r9, fp, lsl #14
     ad0:	40061201 	andmi	r1, r6, r1, lsl #4
     ad4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     ad8:	00001301 	andeq	r1, r0, r1, lsl #6
     adc:	0300051a 	movweq	r0, #1306	; 0x51a
     ae0:	3b0b3a08 	blcc	2cf308 <startup-0x1fd30cf8>
     ae4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     ae8:	1b000018 	blne	b50 <startup-0x1ffff4b0>
     aec:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     af0:	0b3b0b3a 	bleq	ec37e0 <startup-0x1f13c820>
     af4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     af8:	341c0000 	ldrcc	r0, [ip], #-0
     afc:	3a0e0300 	bcc	381704 <startup-0x1fc7e8fc>
     b00:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b04:	00180213 	andseq	r0, r8, r3, lsl r2
     b08:	012e1d00 			; <UNDEFINED> instruction: 0x012e1d00
     b0c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     b10:	0b3b0b3a 	bleq	ec3800 <startup-0x1f13c800>
     b14:	01111927 	tsteq	r1, r7, lsr #18
     b18:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b1c:	01194296 			; <UNDEFINED> instruction: 0x01194296
     b20:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     b24:	08030034 	stmdaeq	r3, {r2, r4, r5}
     b28:	0b3b0b3a 	bleq	ec3818 <startup-0x1f13c7e8>
     b2c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     b30:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
     b34:	03193f00 	tsteq	r9, #0, 30
     b38:	3b0b3a0e 	blcc	2cf378 <startup-0x1fd30c88>
     b3c:	1119270b 	tstne	r9, fp, lsl #14
     b40:	40061201 	andmi	r1, r6, r1, lsl #4
     b44:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     b48:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
     b4c:	03193f01 	tsteq	r9, #1, 30
     b50:	3b0b3a0e 	blcc	2cf390 <startup-0x1fd30c70>
     b54:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     b58:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     b5c:	96184006 	ldrls	r4, [r8], -r6
     b60:	13011942 	movwne	r1, #6466	; 0x1942
     b64:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
     b68:	3a0e0301 	bcc	381774 <startup-0x1fc7e88c>
     b6c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     b70:	11134919 	tstne	r3, r9, lsl r9
     b74:	40061201 	andmi	r1, r6, r1, lsl #4
     b78:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     b7c:	00001301 	andeq	r1, r0, r1, lsl #6
     b80:	03012e22 	movweq	r2, #7714	; 0x1e22
     b84:	3b0b3a0e 	blcc	2cf3c4 <startup-0x1fd30c3c>
     b88:	1119270b 	tstne	r9, fp, lsl #14
     b8c:	40061201 	andmi	r1, r6, r1, lsl #4
     b90:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     b94:	00001301 	andeq	r1, r0, r1, lsl #6
     b98:	3f002e23 	svccc	0x00002e23
     b9c:	3a0e0319 	bcc	381808 <startup-0x1fc7e7f8>
     ba0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     ba4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     ba8:	97184006 	ldrls	r4, [r8, -r6]
     bac:	00001942 	andeq	r1, r0, r2, asr #18
     bb0:	01110100 	tsteq	r1, r0, lsl #2
     bb4:	0b130e25 	bleq	4c4450 <startup-0x1fb3bbb0>
     bb8:	01110e03 	tsteq	r1, r3, lsl #28
     bbc:	17100612 			; <UNDEFINED> instruction: 0x17100612
     bc0:	13020000 	movwne	r0, #8192	; 0x2000
     bc4:	3a0b0b01 	bcc	2c37d0 <startup-0x1fd3c830>
     bc8:	010b3b0b 	tsteq	fp, fp, lsl #22
     bcc:	03000013 	movweq	r0, #19
     bd0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     bd4:	0b3b0b3a 	bleq	ec38c4 <startup-0x1f13c73c>
     bd8:	0b381349 	bleq	e05904 <startup-0x1f1fa6fc>
     bdc:	24040000 	strcs	r0, [r4], #-0
     be0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     be4:	000e030b 	andeq	r0, lr, fp, lsl #6
     be8:	000f0500 	andeq	r0, pc, r0, lsl #10
     bec:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     bf0:	16060000 	strne	r0, [r6], -r0
     bf4:	3a0e0300 	bcc	3817fc <startup-0x1fc7e804>
     bf8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     bfc:	07000013 	smladeq	r0, r3, r0, r0
     c00:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     c04:	0b3a0b0b 	bleq	e83838 <startup-0x1f17c7c8>
     c08:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     c0c:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
     c10:	03193f01 	tsteq	r9, #1, 30
     c14:	3b0b3a0e 	blcc	2cf454 <startup-0x1fd30bac>
     c18:	1119270b 	tstne	r9, fp, lsl #14
     c1c:	40061201 	andmi	r1, r6, r1, lsl #4
     c20:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     c24:	00001301 	andeq	r1, r0, r1, lsl #6
     c28:	03000509 	movweq	r0, #1289	; 0x509
     c2c:	3b0b3a0e 	blcc	2cf46c <startup-0x1fd30b94>
     c30:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     c34:	00000018 	andeq	r0, r0, r8, lsl r0
     c38:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     c3c:	030b130e 	movweq	r1, #45838	; 0xb30e
     c40:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     c44:	00171006 	andseq	r1, r7, r6
     c48:	01130200 	tsteq	r3, r0, lsl #4
     c4c:	0b3a0b0b 	bleq	e83880 <startup-0x1f17c780>
     c50:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     c54:	0d030000 	stceq	0, cr0, [r3, #-0]
     c58:	3a0e0300 	bcc	381860 <startup-0x1fc7e7a0>
     c5c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c60:	000b3813 	andeq	r3, fp, r3, lsl r8
     c64:	00240400 	eoreq	r0, r4, r0, lsl #8
     c68:	0b3e0b0b 	bleq	f8389c <startup-0x1f07c764>
     c6c:	00000e03 	andeq	r0, r0, r3, lsl #28
     c70:	0b000f05 	bleq	488c <startup-0x1fffb774>
     c74:	0013490b 	andseq	r4, r3, fp, lsl #18
     c78:	00160600 	andseq	r0, r6, r0, lsl #12
     c7c:	0b3a0e03 	bleq	e84490 <startup-0x1f17bb70>
     c80:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     c84:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
     c88:	03193f01 	tsteq	r9, #1, 30
     c8c:	3b0b3a0e 	blcc	2cf4cc <startup-0x1fd30b34>
     c90:	1119270b 	tstne	r9, fp, lsl #14
     c94:	40061201 	andmi	r1, r6, r1, lsl #4
     c98:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     c9c:	00001301 	andeq	r1, r0, r1, lsl #6
     ca0:	03000508 	movweq	r0, #1288	; 0x508
     ca4:	3b0b3a08 	blcc	2cf4cc <startup-0x1fd30b34>
     ca8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     cac:	09000018 	stmdbeq	r0, {r3, r4}
     cb0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     cb4:	0b3b0b3a 	bleq	ec39a4 <startup-0x1f13c65c>
     cb8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     cbc:	240a0000 	strcs	r0, [sl], #-0
     cc0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     cc4:	0008030b 	andeq	r0, r8, fp, lsl #6
     cc8:	11010000 	mrsne	r0, (UNDEF: 1)
     ccc:	130e2501 	movwne	r2, #58625	; 0xe501
     cd0:	110e030b 	tstne	lr, fp, lsl #6
     cd4:	10061201 	andne	r1, r6, r1, lsl #4
     cd8:	02000017 	andeq	r0, r0, #23
     cdc:	0b0b0113 	bleq	2c1130 <startup-0x1fd3eed0>
     ce0:	0b3b0b3a 	bleq	ec39d0 <startup-0x1f13c630>
     ce4:	00001301 	andeq	r1, r0, r1, lsl #6
     ce8:	03000d03 	movweq	r0, #3331	; 0xd03
     cec:	3b0b3a0e 	blcc	2cf52c <startup-0x1fd30ad4>
     cf0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     cf4:	0400000b 	streq	r0, [r0], #-11
     cf8:	0b0b0024 	bleq	2c0d90 <startup-0x1fd3f270>
     cfc:	0e030b3e 	vmoveq.16	d3[0], r0
     d00:	16050000 	strne	r0, [r5], -r0
     d04:	3a0e0300 	bcc	38190c <startup-0x1fc7e6f4>
     d08:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d0c:	06000013 			; <UNDEFINED> instruction: 0x06000013
     d10:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     d14:	0b3a0e03 	bleq	e84528 <startup-0x1f17bad8>
     d18:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     d1c:	01111349 	tsteq	r1, r9, asr #6
     d20:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     d24:	01194296 			; <UNDEFINED> instruction: 0x01194296
     d28:	07000013 	smladeq	r0, r3, r0, r0
     d2c:	08030005 	stmdaeq	r3, {r0, r2}
     d30:	0b3b0b3a 	bleq	ec3a20 <startup-0x1f13c5e0>
     d34:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     d38:	34080000 	strcc	r0, [r8], #-0
     d3c:	3a080300 	bcc	201944 <startup-0x1fdfe6bc>
     d40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d44:	00180213 	andseq	r0, r8, r3, lsl r2
     d48:	00240900 	eoreq	r0, r4, r0, lsl #18
     d4c:	0b3e0b0b 	bleq	f83980 <startup-0x1f07c680>
     d50:	00000803 	andeq	r0, r0, r3, lsl #16
     d54:	3f002e0a 	svccc	0x00002e0a
     d58:	3a0e0319 	bcc	3819c4 <startup-0x1fc7e63c>
     d5c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     d60:	11134919 	tstne	r3, r9, lsl r9
     d64:	40061201 	andmi	r1, r6, r1, lsl #4
     d68:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     d6c:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
     d70:	03193f00 	tsteq	r9, #0, 30
     d74:	3b0b3a0e 	blcc	2cf5b4 <startup-0x1fd30a4c>
     d78:	1119270b 	tstne	r9, fp, lsl #14
     d7c:	40061201 	andmi	r1, r6, r1, lsl #4
     d80:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     d84:	01000000 	mrseq	r0, (UNDEF: 0)
     d88:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     d8c:	0e030b13 	vmoveq.32	d3[0], r0
     d90:	06120111 			; <UNDEFINED> instruction: 0x06120111
     d94:	00001710 	andeq	r1, r0, r0, lsl r7
     d98:	0b011302 	bleq	459a8 <startup-0x1ffba658>
     d9c:	3b0b3a0b 	blcc	2cf5d0 <startup-0x1fd30a30>
     da0:	0013010b 	andseq	r0, r3, fp, lsl #2
     da4:	000d0300 	andeq	r0, sp, r0, lsl #6
     da8:	0b3a0e03 	bleq	e845bc <startup-0x1f17ba44>
     dac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     db0:	00000b38 	andeq	r0, r0, r8, lsr fp
     db4:	0b002404 	bleq	9dcc <startup-0x1fff6234>
     db8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     dbc:	0500000e 	streq	r0, [r0, #-14]
     dc0:	0b0b000f 	bleq	2c0e04 <startup-0x1fd3f1fc>
     dc4:	00001349 	andeq	r1, r0, r9, asr #6
     dc8:	03001606 	movweq	r1, #1542	; 0x606
     dcc:	3b0b3a0e 	blcc	2cf60c <startup-0x1fd309f4>
     dd0:	0013490b 	andseq	r4, r3, fp, lsl #18
     dd4:	01130700 	tsteq	r3, r0, lsl #14
     dd8:	0b0b0e03 	bleq	2c45ec <startup-0x1fd3ba14>
     ddc:	0b3b0b3a 	bleq	ec3acc <startup-0x1f13c534>
     de0:	00001301 	andeq	r1, r0, r1, lsl #6
     de4:	0b002408 	bleq	9e0c <startup-0x1fff61f4>
     de8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     dec:	09000008 	stmdbeq	r0, {r3}
     df0:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     df4:	00001301 	andeq	r1, r0, r1, lsl #6
     df8:	4900050a 	stmdbmi	r0, {r1, r3, r8, sl}
     dfc:	0b000013 	bleq	e50 <startup-0x1ffff1b0>
     e00:	13490101 	movtne	r0, #37121	; 0x9101
     e04:	00001301 	andeq	r1, r0, r1, lsl #6
     e08:	0000210c 	andeq	r2, r0, ip, lsl #2
     e0c:	00340d00 	eorseq	r0, r4, r0, lsl #26
     e10:	0b3a0e03 	bleq	e84624 <startup-0x1f17b9dc>
     e14:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e18:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     e1c:	210e0000 	mrscs	r0, (UNDEF: 14)
     e20:	2f134900 	svccs	0x00134900
     e24:	0f000005 	svceq	0x00000005
     e28:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     e2c:	0b3a0e03 	bleq	e84640 <startup-0x1f17b9c0>
     e30:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     e34:	06120111 			; <UNDEFINED> instruction: 0x06120111
     e38:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     e3c:	00130119 	andseq	r0, r3, r9, lsl r1
     e40:	00341000 	eorseq	r1, r4, r0
     e44:	0b3a0803 	bleq	e82e58 <startup-0x1f17d1a8>
     e48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e4c:	00001802 	andeq	r1, r0, r2, lsl #16
     e50:	03003411 	movweq	r3, #1041	; 0x411
     e54:	3b0b3a0e 	blcc	2cf694 <startup-0x1fd3096c>
     e58:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     e5c:	12000018 	andne	r0, r0, #24
     e60:	13490021 	movtne	r0, #36897	; 0x9021
     e64:	00000b2f 	andeq	r0, r0, pc, lsr #22
     e68:	03000513 	movweq	r0, #1299	; 0x513
     e6c:	3b0b3a0e 	blcc	2cf6ac <startup-0x1fd30954>
     e70:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     e74:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
     e78:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     e7c:	0b3a0e03 	bleq	e84690 <startup-0x1f17b970>
     e80:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     e84:	06120111 			; <UNDEFINED> instruction: 0x06120111
     e88:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     e8c:	15000019 	strne	r0, [r0, #-25]	; 0xffffffe7
     e90:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     e94:	0b3a0e03 	bleq	e846a8 <startup-0x1f17b958>
     e98:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     e9c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     ea0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     ea4:	16000019 			; <UNDEFINED> instruction: 0x16000019
     ea8:	08030005 	stmdaeq	r3, {r0, r2}
     eac:	0b3b0b3a 	bleq	ec3b9c <startup-0x1f13c464>
     eb0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     eb4:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
     eb8:	03193f01 	tsteq	r9, #1, 30
     ebc:	3b0b3a0e 	blcc	2cf6fc <startup-0x1fd30904>
     ec0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     ec4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     ec8:	96184006 	ldrls	r4, [r8], -r6
     ecc:	13011942 	movwne	r1, #6466	; 0x1942
     ed0:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
     ed4:	03193f01 	tsteq	r9, #1, 30
     ed8:	3b0b3a0e 	blcc	2cf718 <startup-0x1fd308e8>
     edc:	1119270b 	tstne	r9, fp, lsl #14
     ee0:	40061201 	andmi	r1, r6, r1, lsl #4
     ee4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     ee8:	00001301 	andeq	r1, r0, r1, lsl #6
     eec:	3f012e19 	svccc	0x00012e19
     ef0:	3a0e0319 	bcc	381b5c <startup-0x1fc7e4a4>
     ef4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     ef8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     efc:	97184006 	ldrls	r4, [r8, -r6]
     f00:	00001942 	andeq	r1, r0, r2, asr #18
     f04:	01110100 	tsteq	r1, r0, lsl #2
     f08:	0b130e25 	bleq	4c47a4 <startup-0x1fb3b85c>
     f0c:	01110e03 	tsteq	r1, r3, lsl #28
     f10:	17100612 			; <UNDEFINED> instruction: 0x17100612
     f14:	13020000 	movwne	r0, #8192	; 0x2000
     f18:	0b0e0301 	bleq	381b24 <startup-0x1fc7e4dc>
     f1c:	3b0b3a0b 	blcc	2cf750 <startup-0x1fd308b0>
     f20:	0013010b 	andseq	r0, r3, fp, lsl #2
     f24:	000d0300 	andeq	r0, sp, r0, lsl #6
     f28:	0b3a0e03 	bleq	e8473c <startup-0x1f17b8c4>
     f2c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f30:	00000b38 	andeq	r0, r0, r8, lsr fp
     f34:	0b000f04 	bleq	4b4c <startup-0x1fffb4b4>
     f38:	0013490b 	andseq	r4, r3, fp, lsl #18
     f3c:	00240500 	eoreq	r0, r4, r0, lsl #10
     f40:	0b3e0b0b 	bleq	f83b74 <startup-0x1f07c48c>
     f44:	00000e03 	andeq	r0, r0, r3, lsl #28
     f48:	0b002406 	bleq	9f68 <startup-0x1fff6098>
     f4c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     f50:	07000008 	streq	r0, [r0, -r8]
     f54:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     f58:	00001301 	andeq	r1, r0, r1, lsl #6
     f5c:	49000508 	stmdbmi	r0, {r3, r8, sl}
     f60:	09000013 	stmdbeq	r0, {r0, r1, r4}
     f64:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     f68:	0b3b0b3a 	bleq	ec3c58 <startup-0x1f13c3a8>
     f6c:	00001349 	andeq	r1, r0, r9, asr #6
     f70:	3f012e0a 	svccc	0x00012e0a
     f74:	3a0e0319 	bcc	381be0 <startup-0x1fc7e420>
     f78:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     f7c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     f80:	97184006 	ldrls	r4, [r8, -r6]
     f84:	13011942 	movwne	r1, #6466	; 0x1942
     f88:	050b0000 	streq	r0, [fp, #-0]
     f8c:	3a080300 	bcc	201b94 <startup-0x1fdfe46c>
     f90:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f94:	00180213 	andseq	r0, r8, r3, lsl r2
     f98:	00050c00 	andeq	r0, r5, r0, lsl #24
     f9c:	0b3a0e03 	bleq	e847b0 <startup-0x1f17b850>
     fa0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     fa4:	00001802 	andeq	r1, r0, r2, lsl #16
     fa8:	3f012e0d 	svccc	0x00012e0d
     fac:	3a0e0319 	bcc	381c18 <startup-0x1fc7e3e8>
     fb0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     fb4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     fb8:	96184006 	ldrls	r4, [r8], -r6
     fbc:	00001942 	andeq	r1, r0, r2, asr #18
     fc0:	0300340e 	movweq	r3, #1038	; 0x40e
     fc4:	3b0b3a0e 	blcc	2cf804 <startup-0x1fd307fc>
     fc8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     fcc:	00000018 	andeq	r0, r0, r8, lsl r0
     fd0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     fd4:	030b130e 	movweq	r1, #45838	; 0xb30e
     fd8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     fdc:	00171006 	andseq	r1, r7, r6
     fe0:	01130200 	tsteq	r3, r0, lsl #4
     fe4:	0b3a0b0b 	bleq	e83c18 <startup-0x1f17c3e8>
     fe8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     fec:	0d030000 	stceq	0, cr0, [r3, #-0]
     ff0:	3a0e0300 	bcc	381bf8 <startup-0x1fc7e408>
     ff4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ff8:	000b3813 	andeq	r3, fp, r3, lsl r8
     ffc:	00240400 	eoreq	r0, r4, r0, lsl #8
    1000:	0b3e0b0b 	bleq	f83c34 <startup-0x1f07c3cc>
    1004:	00000e03 	andeq	r0, r0, r3, lsl #28
    1008:	0b000f05 	bleq	4c24 <startup-0x1fffb3dc>
    100c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1010:	00160600 	andseq	r0, r6, r0, lsl #12
    1014:	0b3a0e03 	bleq	e84828 <startup-0x1f17b7d8>
    1018:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    101c:	13070000 	movwne	r0, #28672	; 0x7000
    1020:	0b0e0301 	bleq	381c2c <startup-0x1fc7e3d4>
    1024:	3b0b3a0b 	blcc	2cf858 <startup-0x1fd307a8>
    1028:	0013010b 	andseq	r0, r3, fp, lsl #2
    102c:	00240800 	eoreq	r0, r4, r0, lsl #16
    1030:	0b3e0b0b 	bleq	f83c64 <startup-0x1f07c39c>
    1034:	00000803 	andeq	r0, r0, r3, lsl #16
    1038:	27011509 	strcs	r1, [r1, -r9, lsl #10]
    103c:	00130119 	andseq	r0, r3, r9, lsl r1
    1040:	00050a00 	andeq	r0, r5, r0, lsl #20
    1044:	00001349 	andeq	r1, r0, r9, asr #6
    1048:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
    104c:	00130113 	andseq	r0, r3, r3, lsl r1
    1050:	00210c00 	eoreq	r0, r1, r0, lsl #24
    1054:	340d0000 	strcc	r0, [sp], #-0
    1058:	3a0e0300 	bcc	381c60 <startup-0x1fc7e3a0>
    105c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1060:	3c193f13 	ldccc	15, cr3, [r9], {19}
    1064:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
    1068:	13490021 	movtne	r0, #36897	; 0x9021
    106c:	0000052f 	andeq	r0, r0, pc, lsr #10
    1070:	0300340f 	movweq	r3, #1039	; 0x40f
    1074:	3b0b3a0e 	blcc	2cf8b4 <startup-0x1fd3074c>
    1078:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    107c:	10000018 	andne	r0, r0, r8, lsl r0
    1080:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1084:	0b3b0b3a 	bleq	ec3d74 <startup-0x1f13c28c>
    1088:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    108c:	00001802 	andeq	r1, r0, r2, lsl #16
    1090:	49002111 	stmdbmi	r0, {r0, r4, r8, sp}
    1094:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1098:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
    109c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    10a0:	0b3b0b3a 	bleq	ec3d90 <startup-0x1f13c270>
    10a4:	01111927 	tsteq	r1, r7, lsr #18
    10a8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    10ac:	01194296 			; <UNDEFINED> instruction: 0x01194296
    10b0:	13000013 	movwne	r0, #19
    10b4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    10b8:	0b3b0b3a 	bleq	ec3da8 <startup-0x1f13c258>
    10bc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    10c0:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    10c4:	3a0e0301 	bcc	381cd0 <startup-0x1fc7e330>
    10c8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    10cc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    10d0:	96184006 	ldrls	r4, [r8], -r6
    10d4:	00001942 	andeq	r1, r0, r2, asr #18
    10d8:	01110100 	tsteq	r1, r0, lsl #2
    10dc:	0b130e25 	bleq	4c4978 <startup-0x1fb3b688>
    10e0:	01110e03 	tsteq	r1, r3, lsl #28
    10e4:	17100612 			; <UNDEFINED> instruction: 0x17100612
    10e8:	13020000 	movwne	r0, #8192	; 0x2000
    10ec:	3a0b0b01 	bcc	2c3cf8 <startup-0x1fd3c308>
    10f0:	010b3b0b 	tsteq	fp, fp, lsl #22
    10f4:	03000013 	movweq	r0, #19
    10f8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    10fc:	0b3b0b3a 	bleq	ec3dec <startup-0x1f13c214>
    1100:	0b381349 	bleq	e05e2c <startup-0x1f1fa1d4>
    1104:	24040000 	strcs	r0, [r4], #-0
    1108:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    110c:	000e030b 	andeq	r0, lr, fp, lsl #6
    1110:	000f0500 	andeq	r0, pc, r0, lsl #10
    1114:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1118:	16060000 	strne	r0, [r6], -r0
    111c:	3a0e0300 	bcc	381d24 <startup-0x1fc7e2dc>
    1120:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1124:	07000013 	smladeq	r0, r3, r0, r0
    1128:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    112c:	0b3a0b0b 	bleq	e83d60 <startup-0x1f17c2a0>
    1130:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1134:	24080000 	strcs	r0, [r8], #-0
    1138:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    113c:	0008030b 	andeq	r0, r8, fp, lsl #6
    1140:	01150900 	tsteq	r5, r0, lsl #18
    1144:	13011927 	movwne	r1, #6439	; 0x1927
    1148:	050a0000 	streq	r0, [sl, #-0]
    114c:	00134900 	andseq	r4, r3, r0, lsl #18
    1150:	01010b00 	tsteq	r1, r0, lsl #22
    1154:	13011349 	movwne	r1, #4937	; 0x1349
    1158:	210c0000 	mrscs	r0, (UNDEF: 12)
    115c:	0d000000 	stceq	0, cr0, [r0, #-0]
    1160:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1164:	0b3b0b3a 	bleq	ec3e54 <startup-0x1f13c1ac>
    1168:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    116c:	0000193c 	andeq	r1, r0, ip, lsr r9
    1170:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
    1174:	00052f13 	andeq	r2, r5, r3, lsl pc
    1178:	00340f00 	eorseq	r0, r4, r0, lsl #30
    117c:	0b3a0e03 	bleq	e84990 <startup-0x1f17b670>
    1180:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1184:	00001802 	andeq	r1, r0, r2, lsl #16
    1188:	03003410 	movweq	r3, #1040	; 0x410
    118c:	3b0b3a0e 	blcc	2cf9cc <startup-0x1fd30634>
    1190:	3f13490b 	svccc	0x0013490b
    1194:	00180219 	andseq	r0, r8, r9, lsl r2
    1198:	00211100 	eoreq	r1, r1, r0, lsl #2
    119c:	0b2f1349 	bleq	bc5ec8 <startup-0x1f43a138>
    11a0:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
    11a4:	03193f01 	tsteq	r9, #1, 30
    11a8:	3b0b3a0e 	blcc	2cf9e8 <startup-0x1fd30618>
    11ac:	1119270b 	tstne	r9, fp, lsl #14
    11b0:	40061201 	andmi	r1, r6, r1, lsl #4
    11b4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    11b8:	00001301 	andeq	r1, r0, r1, lsl #6
    11bc:	03000513 	movweq	r0, #1299	; 0x513
    11c0:	3b0b3a0e 	blcc	2cfa00 <startup-0x1fd30600>
    11c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    11c8:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
    11cc:	0e03012e 	adfeqsp	f0, f3, #0.5
    11d0:	0b3b0b3a 	bleq	ec3ec0 <startup-0x1f13c140>
    11d4:	01111927 	tsteq	r1, r7, lsr #18
    11d8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    11dc:	00194296 	mulseq	r9, r6, r2
    11e0:	11010000 	mrsne	r0, (UNDEF: 1)
    11e4:	130e2501 	movwne	r2, #58625	; 0xe501
    11e8:	110e030b 	tstne	lr, fp, lsl #6
    11ec:	10061201 	andne	r1, r6, r1, lsl #4
    11f0:	02000017 	andeq	r0, r0, #23
    11f4:	0b0b0113 	bleq	2c1648 <startup-0x1fd3e9b8>
    11f8:	0b3b0b3a 	bleq	ec3ee8 <startup-0x1f13c118>
    11fc:	00001301 	andeq	r1, r0, r1, lsl #6
    1200:	03000d03 	movweq	r0, #3331	; 0xd03
    1204:	3b0b3a0e 	blcc	2cfa44 <startup-0x1fd305bc>
    1208:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    120c:	0400000b 	streq	r0, [r0], #-11
    1210:	0b0b0024 	bleq	2c12a8 <startup-0x1fd3ed58>
    1214:	0e030b3e 	vmoveq.16	d3[0], r0
    1218:	0f050000 	svceq	0x00050000
    121c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1220:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1224:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1228:	0b3b0b3a 	bleq	ec3f18 <startup-0x1f13c0e8>
    122c:	00001349 	andeq	r1, r0, r9, asr #6
    1230:	03011307 	movweq	r1, #4871	; 0x1307
    1234:	3a0b0b0e 	bcc	2c3e74 <startup-0x1fd3c18c>
    1238:	010b3b0b 	tsteq	fp, fp, lsl #22
    123c:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1240:	0b0b0024 	bleq	2c12d8 <startup-0x1fd3ed28>
    1244:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1248:	15090000 	strne	r0, [r9, #-0]
    124c:	01192701 	tsteq	r9, r1, lsl #14
    1250:	0a000013 	beq	12a4 <startup-0x1fffed5c>
    1254:	13490005 	movtne	r0, #36869	; 0x9005
    1258:	010b0000 	mrseq	r0, (UNDEF: 11)
    125c:	01134901 	tsteq	r3, r1, lsl #18
    1260:	0c000013 	stceq	0, cr0, [r0], {19}
    1264:	00000021 	andeq	r0, r0, r1, lsr #32
    1268:	0300340d 	movweq	r3, #1037	; 0x40d
    126c:	3b0b3a0e 	blcc	2cfaac <startup-0x1fd30554>
    1270:	3f13490b 	svccc	0x0013490b
    1274:	00193c19 	andseq	r3, r9, r9, lsl ip
    1278:	00210e00 	eoreq	r0, r1, r0, lsl #28
    127c:	0b2f1349 	bleq	bc5fa8 <startup-0x1f43a058>
    1280:	340f0000 	strcc	r0, [pc], #-0	; 1288 <startup-0x1fffed78>
    1284:	3a0e0300 	bcc	381e8c <startup-0x1fc7e174>
    1288:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    128c:	00180213 	andseq	r0, r8, r3, lsl r2
    1290:	00341000 	eorseq	r1, r4, r0
    1294:	0b3a0e03 	bleq	e84aa8 <startup-0x1f17b558>
    1298:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    129c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    12a0:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
    12a4:	03193f01 	tsteq	r9, #1, 30
    12a8:	3b0b3a0e 	blcc	2cfae8 <startup-0x1fd30518>
    12ac:	1119270b 	tstne	r9, fp, lsl #14
    12b0:	40061201 	andmi	r1, r6, r1, lsl #4
    12b4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    12b8:	00001301 	andeq	r1, r0, r1, lsl #6
    12bc:	03000512 	movweq	r0, #1298	; 0x512
    12c0:	3b0b3a0e 	blcc	2cfb00 <startup-0x1fd30500>
    12c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    12c8:	13000018 	movwne	r0, #24
    12cc:	0e03012e 	adfeqsp	f0, f3, #0.5
    12d0:	0b3b0b3a 	bleq	ec3fc0 <startup-0x1f13c040>
    12d4:	01111927 	tsteq	r1, r7, lsr #18
    12d8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    12dc:	00194296 	mulseq	r9, r6, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000187a 	andeq	r1, r0, sl, ror r8
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	0a9f0002 	beq	fe7c003c <firstTime.4040+0xde7b1980>
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	2000188c 	andcs	r1, r0, ip, lsl #17
  3c:	00000056 	andeq	r0, r0, r6, asr r0
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	0c830002 	stceq	0, cr0, [r3], {2}
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200018e4 	andcs	r1, r0, r4, ror #17
  5c:	000002a8 	andeq	r0, r0, r8, lsr #5
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	11b20002 			; <UNDEFINED> instruction: 0x11b20002
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20001b8c 	andcs	r1, r0, ip, lsl #23
  7c:	00000204 	andeq	r0, r0, r4, lsl #4
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	13ad0002 			; <UNDEFINED> instruction: 0x13ad0002
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20001d90 	mulcs	r0, r0, sp
  9c:	00000364 	andeq	r0, r0, r4, ror #6
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	19f20002 	ldmibne	r2!, {r1}^
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200020f4 	strdcs	r2, [r0], -r4
  bc:	00000238 	andeq	r0, r0, r8, lsr r2
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	1e8e0002 	cdpne	0, 8, cr0, cr14, cr2, {0}
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	2000232c 	andcs	r2, r0, ip, lsr #6
  dc:	00000370 	andeq	r0, r0, r0, ror r3
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	23d80002 	bicscs	r0, r8, #2
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	2000269c 	mulcs	r0, ip, r6
  fc:	000002ac 	andeq	r0, r0, ip, lsr #5
	...
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	29370002 	ldmdbcs	r7!, {r1}
 110:	00040000 	andeq	r0, r4, r0
 114:	00000000 	andeq	r0, r0, r0
 118:	20002948 	andcs	r2, r0, r8, asr #18
 11c:	0000052c 	andeq	r0, r0, ip, lsr #10
	...
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	30dc0002 	sbcscc	r0, ip, r2
 130:	00040000 	andeq	r0, r4, r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20002e74 	andcs	r2, r0, r4, ror lr
 13c:	00000e44 	andeq	r0, r0, r4, asr #28
	...
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	397f0002 	ldmdbcc	pc!, {r1}^	; <UNPREDICTABLE>
 150:	00040000 	andeq	r0, r4, r0
 154:	00000000 	andeq	r0, r0, r0
 158:	20003cb8 			; <UNDEFINED> instruction: 0x20003cb8
 15c:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
 16c:	3a830002 	bcc	fe0c017c <firstTime.4040+0xde0b1ac0>
 170:	00040000 	andeq	r0, r4, r0
 174:	00000000 	andeq	r0, r0, r0
 178:	20003ce0 	andcs	r3, r0, r0, ror #25
 17c:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	3b4a0002 	blcc	128019c <startup-0x1ed7fe64>
 190:	00040000 	andeq	r0, r4, r0
 194:	00000000 	andeq	r0, r0, r0
 198:	20003d08 	andcs	r3, r0, r8, lsl #26
 19c:	0000006c 	andeq	r0, r0, ip, rrx
	...
 1a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ac:	3c830002 	stccc	0, cr0, [r3], {2}
 1b0:	00040000 	andeq	r0, r4, r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	20003d74 	andcs	r3, r0, r4, ror sp
 1bc:	00000520 	andeq	r0, r0, r0, lsr #10
	...
 1c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1cc:	41740002 	cmnmi	r4, r2
 1d0:	00040000 	andeq	r0, r4, r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	20004294 	mulcs	r0, r4, r2
 1dc:	00000094 	muleq	r0, r4, r0
	...
 1e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ec:	42b80002 	adcsmi	r0, r8, #2
 1f0:	00040000 	andeq	r0, r4, r0
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	20004328 	andcs	r4, r0, r8, lsr #6
 1fc:	000000e8 	andeq	r0, r0, r8, ror #1
	...
 208:	0000001c 	andeq	r0, r0, ip, lsl r0
 20c:	459c0002 	ldrmi	r0, [ip, #2]
 210:	00040000 	andeq	r0, r4, r0
 214:	00000000 	andeq	r0, r0, r0
 218:	20004410 	andcs	r4, r0, r0, lsl r4
 21c:	000000e8 	andeq	r0, r0, r8, ror #1
	...
 228:	0000001c 	andeq	r0, r0, ip, lsl r0
 22c:	48800002 	stmmi	r0, {r1}
 230:	00040000 	andeq	r0, r4, r0
 234:	00000000 	andeq	r0, r0, r0
 238:	200044f8 	strdcs	r4, [r0], -r8
 23c:	000000e8 	andeq	r0, r0, r8, ror #1
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	2000188a 	andcs	r1, r0, sl, lsl #17
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000003ca 	andeq	r0, r0, sl, asr #7
       4:	017d0002 	cmneq	sp, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	43010000 	movwmi	r0, #4096	; 0x1000
      1c:	6f6d2f3a 	svcvs	0x006d2f3a
      20:	2f632f70 	svccs	0x00632f70
      24:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
      28:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
      2c:	6f697461 	svcvs	0x00697461
      30:	2f72656e 	svccs	0x0072656e
      34:	73504944 	cmpvc	r0, #68, 18	; 0x110000
      38:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
      3c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
      40:	74730000 	ldrbtvc	r0, [r3], #-0
      44:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
      48:	00632e70 	rsbeq	r2, r3, r0, ror lr
      4c:	73000001 	movwvc	r0, #1
      50:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
      54:	00682e65 	rsbeq	r2, r8, r5, ror #28
      58:	69000001 	stmdbvs	r0, {r0}
      5c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
      60:	0100682e 	tsteq	r0, lr, lsr #16
      64:	61670000 	cmnvs	r7, r0
      68:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
      6c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
      70:	0100682e 	tsteq	r0, lr, lsr #16
      74:	72670000 	rsbvc	r0, r7, #0
      78:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
      7c:	682e7363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, ip, sp, lr}
      80:	00000100 	andeq	r0, r0, r0, lsl #2
      84:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
      88:	5f726574 	svcpl	0x00726574
      8c:	63616c62 	cmnvs	r1, #25088	; 0x6200
      90:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
      94:	0001006d 	andeq	r0, r1, sp, rrx
      98:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
      9c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
      a0:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
      a4:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
      a8:	01006d62 	tsteq	r0, r2, ror #26
      ac:	6f6d0000 	svcvs	0x006d0000
      b0:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
      b4:	72675f72 	rsbvc	r5, r7, #456	; 0x1c8
      b8:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
      bc:	01006d62 	tsteq	r0, r2, ror #26
      c0:	72700000 	rsbsvc	r0, r0, #0
      c4:	5f737365 	svcpl	0x00737365
      c8:	63616c62 	cmnvs	r1, #25088	; 0x6200
      cc:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
      d0:	0001006d 	andeq	r0, r1, sp, rrx
      d4:	65727000 	ldrbvs	r7, [r2, #-0]!
      d8:	6c5f7373 	mrrcvs	3, 7, r7, pc, cr3	; <UNPREDICTABLE>
      dc:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
      e0:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
      e4:	00000100 	andeq	r0, r0, r0, lsl #2
      e8:	73657270 	cmnvc	r5, #112, 4
      ec:	72675f73 	rsbvc	r5, r7, #460	; 0x1cc
      f0:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
      f4:	01006d62 	tsteq	r0, r2, ror #26
      f8:	61630000 	cmnvs	r3, r0
      fc:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     100:	616c625f 	cmnvs	ip, pc, asr r2
     104:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     108:	01006d62 	tsteq	r0, r2, ror #26
     10c:	61630000 	cmnvs	r3, r0
     110:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     114:	6172675f 	cmnvs	r2, pc, asr r7
     118:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     11c:	0001006d 	andeq	r0, r1, sp, rrx
     120:	73616300 	cmnvc	r1, #0, 6
     124:	5f656c74 	svcpl	0x00656c74
     128:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     12c:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     130:	0001006d 	andeq	r0, r1, sp, rrx
     134:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     138:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
     13c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     140:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     144:	00000100 	andeq	r0, r0, r0, lsl #2
     148:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     14c:	72675f65 	rsbvc	r5, r7, #404	; 0x194
     150:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     154:	01006d62 	tsteq	r0, r2, ror #26
     158:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
     15c:	5f656c74 	svcpl	0x00656c74
     160:	63616c62 	cmnvs	r1, #25088	; 0x6200
     164:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     168:	0001006d 	andeq	r0, r1, sp, rrx
     16c:	6f6c7300 	svcvs	0x006c7300
     170:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
     174:	682e7478 	stmdavs	lr!, {r3, r4, r5, r6, sl, ip, sp, lr}
     178:	00000100 	andeq	r0, r0, r0, lsl #2
     17c:	782e6762 	stmdavc	lr!, {r1, r5, r6, r8, r9, sl, sp, lr}
     180:	01006d62 	tsteq	r0, r2, ror #26
     184:	00000000 	andeq	r0, r0, r0
     188:	00000205 	andeq	r0, r0, r5, lsl #4
     18c:	30032000 	andcc	r2, r3, r0
     190:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
     194:	01010003 	tsteq	r1, r3
     198:	10020500 	andne	r0, r2, r0, lsl #10
     19c:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
     1a0:	3d2f0125 	stfccs	f0, [pc, #-148]!	; 114 <startup-0x1ffffeec>
     1a4:	03303030 	teqeq	r0, #48	; 0x30
     1a8:	2f3d742c 	svccs	0x003d742c
     1ac:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     1b0:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     1b4:	2f3e672f 	svccs	0x003e672f
     1b8:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     1bc:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     1c0:	2f3d672f 	svccs	0x003d672f
     1c4:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     1c8:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     1cc:	2f3d672f 	svccs	0x003d672f
     1d0:	52023f67 	andpl	r3, r2, #412	; 0x19c
     1d4:	322f4c17 	eorcc	r4, pc, #5888	; 0x1700
     1d8:	4bad5975 	blmi	feb567b4 <firstTime.4040+0xdeb480f8>
     1dc:	754e4b4b 	strbvc	r4, [lr, #-2891]	; 0xfffff4b5
     1e0:	6759bb75 			; <UNDEFINED> instruction: 0x6759bb75
     1e4:	bb75835c 	bllt	1d60f5c <startup-0x1e29f0a4>
     1e8:	c95c5959 	ldmdbgt	ip, {r0, r3, r4, r6, r8, fp, ip, lr}^
     1ec:	5959bb75 	ldmdbpl	r9, {r0, r2, r4, r5, r6, r8, r9, fp, ip, sp, pc}^
     1f0:	8583675b 	strhi	r6, [r3, #1883]	; 0x75b
     1f4:	6a858367 	bvs	fe160f98 <firstTime.4040+0xde1528dc>
     1f8:	85838367 	strhi	r8, [r3, #871]	; 0x367
     1fc:	85838367 	strhi	r8, [r3, #871]	; 0x367
     200:	85678567 	strbhi	r8, [r7, #-1383]!	; 0xfffffa99
     204:	85838367 	strhi	r8, [r3, #871]	; 0x367
     208:	69686868 	stmdbvs	r8!, {r3, r5, r6, fp, sp, lr}^
     20c:	84838367 	strhi	r8, [r3], #871	; 0x367
     210:	83678467 	cmnhi	r7, #1728053248	; 0x67000000
     214:	83153702 	tsthi	r5, #524288	; 0x80000
     218:	134d0283 	movtne	r0, #53891	; 0xd283
     21c:	83838384 	orrhi	r8, r3, #132, 6	; 0x10000002
     220:	83838385 	orrhi	r8, r3, #335544322	; 0x14000002
     224:	83838384 	orrhi	r8, r3, #132, 6	; 0x10000002
     228:	75820f03 	strvc	r0, [r2, #3843]	; 0xf03
     22c:	75757575 	ldrbvc	r7, [r5, #-1397]!	; 0xfffffa8b
     230:	75757575 	ldrbvc	r7, [r5, #-1397]!	; 0xfffffa8b
     234:	76756775 			; <UNDEFINED> instruction: 0x76756775
     238:	4b302f2f 	blmi	c0befc <startup-0x1f3f4104>
     23c:	4b594b59 	blmi	1652fa8 <startup-0x1e9ad058>
     240:	415a4b59 	cmpmi	sl, r9, asr fp
     244:	4f3a67f7 	svcmi	0x003a67f7
     248:	5a333d3d 	bpl	ccf744 <startup-0x1f3308bc>
     24c:	67679367 	strbvs	r9, [r7, -r7, ror #6]!
     250:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
     254:	02004267 	andeq	r4, r0, #1879048198	; 0x70000006
     258:	82060104 	andhi	r0, r6, #4, 2
     25c:	83bb8306 			; <UNDEFINED> instruction: 0x83bb8306
     260:	c9917530 	ldmibgt	r1, {r4, r5, r8, sl, ip, sp, lr}
     264:	02c9c9bb 	sbceq	ip, r9, #3063808	; 0x2ec000
     268:	c9d7135e 	ldmibgt	r7, {r1, r2, r3, r4, r6, r8, r9, ip}^
     26c:	2108c9f3 	strdcs	ip, [r8, -r3]
     270:	c91308c9 	ldmdbgt	r3, {r0, r3, r6, r7, fp}
     274:	08c92f08 	stmiaeq	r9, {r3, r8, r9, sl, fp, sp}^
     278:	2108c913 	tstcs	r8, r3, lsl r9
     27c:	bb4b08c9 	bllt	12c25a8 <startup-0x1ed3da58>
     280:	4bca3d08 	blmi	ff28f6a8 <firstTime.4040+0xdf280fec>
     284:	6a3d4b3d 	bvs	f52f80 <startup-0x1f0ad080>
     288:	3d4b3d59 	stclcc	13, cr3, [fp, #-356]	; 0xfffffe9c
     28c:	bbbbbb6a 	bllt	feeef03c <firstTime.4040+0xdeee0980>
     290:	83e5bbbb 	mvnhi	fp, #191488	; 0x2ec00
     294:	595932e7 	ldmdbpl	r9, {r0, r1, r2, r5, r6, r7, r9, ip, sp}^
     298:	14370267 	ldrtne	r0, [r7], #-615	; 0xfffffd99
     29c:	67596967 	ldrbvs	r6, [r9, -r7, ror #18]
     2a0:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
     2a4:	02004b03 	andeq	r4, r0, #3072	; 0xc00
     2a8:	00c90304 	sbceq	r0, r9, r4, lsl #6
     2ac:	08030402 	stmdaeq	r3, {r1, sl}
     2b0:	0402008e 	streq	r0, [r2], #-142	; 0xffffff72
     2b4:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
     2b8:	5967674e 	stmdbpl	r7!, {r1, r2, r3, r6, r8, r9, sl, sp, lr}^
     2bc:	9191f3f3 			; <UNDEFINED> instruction: 0x9191f3f3
     2c0:	bd91674c 	ldclt	7, cr6, [r1, #304]	; 0x130
     2c4:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
     2c8:	00820601 	addeq	r0, r2, r1, lsl #12
     2cc:	90020402 	andls	r0, r2, r2, lsl #8
     2d0:	03040200 	movweq	r0, #16896	; 0x4200
     2d4:	4b670690 	blmi	19c1d1c <startup-0x1e63e2e4>
     2d8:	67596884 	ldrbvs	r6, [r9, -r4, lsl #17]
     2dc:	68d776c9 	ldmvs	r7, {r0, r3, r6, r7, r9, sl, ip, sp, lr}^
     2e0:	8383f491 	orrhi	pc, r3, #-1862270976	; 0x91000000
     2e4:	00bd694b 	adcseq	r6, sp, fp, asr #18
     2e8:	06010402 	streq	r0, [r1], -r2, lsl #8
     2ec:	040200f2 	streq	r0, [r2], #-242	; 0xffffff0e
     2f0:	06200802 	strteq	r0, [r0], -r2, lsl #16
     2f4:	59691308 	stmdbpl	r9!, {r3, r8, r9, ip}^
     2f8:	01040200 	mrseq	r0, R12_usr
     2fc:	0200f206 	andeq	pc, r0, #1610612736	; 0x60000000
     300:	20080204 	andcs	r0, r8, r4, lsl #4
     304:	02140806 	andseq	r0, r4, #393216	; 0x60000
     308:	67591525 	ldrbvs	r1, [r9, -r5, lsr #10]
     30c:	2108595e 	tstcs	r8, lr, asr r9
     310:	6759bbbc 			; <UNDEFINED> instruction: 0x6759bbbc
     314:	1408d768 	strne	sp, [r8], #-1896	; 0xfffff898
     318:	02009591 	andeq	r9, r0, #608174080	; 0x24400000
     31c:	58060104 	stmdapl	r6, {r2, r8}
     320:	02040200 	andeq	r0, r4, #0, 4
     324:	040200f2 	streq	r0, [r2], #-242	; 0xffffff0e
     328:	06200803 	strteq	r0, [r0], -r3, lsl #16
     32c:	6b591308 	blvs	1644f54 <startup-0x1e9bb0ac>
     330:	9f087508 	svcls	0x00087508
     334:	01040200 	mrseq	r0, R12_usr
     338:	02007508 	andeq	r7, r0, #8, 10	; 0x2000000
     33c:	49080104 	stmdbmi	r8, {r2, r8}
     340:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
     344:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
     348:	0200594b 	andeq	r5, r0, #1228800	; 0x12c000
     34c:	00610204 	rsbeq	r0, r1, r4, lsl #4
     350:	06010402 	streq	r0, [r1], -r2, lsl #8
     354:	0b030658 	bleq	c1cbc <startup-0x1ff3e344>
     358:	003d084a 	eorseq	r0, sp, sl, asr #16
     35c:	06010402 	streq	r0, [r1], -r2, lsl #8
     360:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
     364:	4b064a02 	blmi	192b74 <startup-0x1fe6d48c>
     368:	91e5d73d 	mvnls	sp, sp, lsr r7
     36c:	003d086b 	eorseq	r0, sp, fp, ror #16
     370:	06010402 	streq	r0, [r1], -r2, lsl #8
     374:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
     378:	02005802 	andeq	r5, r0, #131072	; 0x20000
     37c:	00900304 	addseq	r0, r0, r4, lsl #6
     380:	4a040402 	bmi	101390 <startup-0x1fefec70>
     384:	d73d4b06 	ldrle	r4, [sp, -r6, lsl #22]!
     388:	84694be5 	strbthi	r4, [r9], #-3045	; 0xfffff41b
     38c:	023f67ae 	eorseq	r6, pc, #45613056	; 0x2b80000
     390:	3d3d1629 	ldccc	6, cr1, [sp, #-164]!	; 0xffffff5c
     394:	4b5a404b 	blmi	16904c8 <startup-0x1e96fb38>
     398:	4b594b59 	blmi	1653104 <startup-0x1e9acefc>
     39c:	91838359 	orrls	r8, r3, r9, asr r3
     3a0:	83919191 	orrshi	r9, r1, #1073741860	; 0x40000024
     3a4:	3e838384 	cdpcc	3, 8, cr8, cr3, cr4, {4}
     3a8:	4c3d8383 	ldcmi	3, cr8, [sp], #-524	; 0xfffffdf4
     3ac:	2f83835a 	svccs	0x0083835a
     3b0:	207ec403 	rsbscs	ip, lr, r3, lsl #8
     3b4:	3c019203 	sfmcc	f1, 1, [r1], {3}
     3b8:	01040200 	mrseq	r0, R12_usr
     3bc:	207e9203 	rsbscs	r9, lr, r3, lsl #4
     3c0:	0802a103 	stmdaeq	r2, {r0, r1, r8, sp, pc}
     3c4:	3e3d4bd6 			; <UNDEFINED> instruction: 0x3e3d4bd6
     3c8:	00040221 	andeq	r0, r4, r1, lsr #4
     3cc:	008a0101 	addeq	r0, sl, r1, lsl #2
     3d0:	00020000 	andeq	r0, r2, r0
     3d4:	00000070 	andeq	r0, r0, r0, ror r0
     3d8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     3dc:	0101000d 	tsteq	r1, sp
     3e0:	00000101 	andeq	r0, r0, r1, lsl #2
     3e4:	00000100 	andeq	r0, r0, r0, lsl #2
     3e8:	2f3a4301 	svccs	0x003a4301
     3ec:	2f706f6d 	svccs	0x00706f6d
     3f0:	6f4d2f63 	svcvs	0x004d2f63
     3f4:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     3f8:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     3fc:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     400:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     404:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     408:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     40c:	0000432f 	andeq	r4, r0, pc, lsr #6
     410:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     414:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     418:	632e7463 			; <UNDEFINED> instruction: 0x632e7463
     41c:	00000100 	andeq	r0, r0, r0, lsl #2
     420:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     424:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
     428:	00000100 	andeq	r0, r0, r0, lsl #2
     42c:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     430:	00682e65 	rsbeq	r2, r8, r5, ror #28
     434:	67000001 	strvs	r0, [r0, -r1]
     438:	6f656d61 	svcvs	0x00656d61
     43c:	63656a62 	cmnvs	r5, #401408	; 0x62000
     440:	00682e74 	rsbeq	r2, r8, r4, ror lr
     444:	00000001 	andeq	r0, r0, r1
     448:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
     44c:	19200018 	stmdbne	r0!, {r3, r4}
     450:	594b4c4c 	stmdbpl	fp, {r2, r3, r6, sl, fp, lr}^
     454:	02ca3d67 	sbceq	r3, sl, #6592	; 0x19c0
     458:	01010004 	tsteq	r1, r4
     45c:	00000184 	andeq	r0, r0, r4, lsl #3
     460:	01370002 	teqeq	r7, r2
     464:	01020000 	mrseq	r0, (UNDEF: 2)
     468:	000d0efb 	strdeq	r0, [sp], -fp
     46c:	01010101 	tsteq	r1, r1, lsl #2
     470:	01000000 	mrseq	r0, (UNDEF: 0)
     474:	43010000 	movwmi	r0, #4096	; 0x1000
     478:	6f6d2f3a 	svcvs	0x006d2f3a
     47c:	2f632f70 	svccs	0x00632f70
     480:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     484:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     488:	6f697461 	svcvs	0x00697461
     48c:	2f72656e 	svccs	0x0072656e
     490:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     494:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     498:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     49c:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     4a0:	632e6572 			; <UNDEFINED> instruction: 0x632e6572
     4a4:	00000100 	andeq	r0, r0, r0, lsl #2
     4a8:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     4ac:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
     4b0:	00000100 	andeq	r0, r0, r0, lsl #2
     4b4:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     4b8:	00682e65 	rsbeq	r2, r8, r5, ror #28
     4bc:	67000001 	strvs	r0, [r0, -r1]
     4c0:	6f656d61 	svcvs	0x00656d61
     4c4:	63656a62 	cmnvs	r5, #401408	; 0x62000
     4c8:	00682e74 	rsbeq	r2, r8, r4, ror lr
     4cc:	66000001 	strvs	r0, [r0], -r1
     4d0:	5f657269 	svcpl	0x00657269
     4d4:	63616c62 	cmnvs	r1, #25088	; 0x6200
     4d8:	2e325f6b 	cdpcs	15, 3, cr5, cr2, cr11, {3}
     4dc:	006d6278 	rsbeq	r6, sp, r8, ror r2
     4e0:	66000001 	strvs	r0, [r0], -r1
     4e4:	31657269 	cmncc	r5, r9, ror #4
     4e8:	6172675f 	cmnvs	r2, pc, asr r7
     4ec:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     4f0:	0001006d 	andeq	r0, r1, sp, rrx
     4f4:	72696600 	rsbvc	r6, r9, #0, 12
     4f8:	6c5f3165 	ldfvse	f3, [pc], {101}	; 0x65
     4fc:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     500:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     504:	00000100 	andeq	r0, r0, r0, lsl #2
     508:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     50c:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
     510:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     514:	01006d62 	tsteq	r0, r2, ror #26
     518:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     51c:	5f326572 	svcpl	0x00326572
     520:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     524:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     528:	0001006d 	andeq	r0, r1, sp, rrx
     52c:	72696600 	rsbvc	r6, r9, #0, 12
     530:	675f3365 	ldrbvs	r3, [pc, -r5, ror #6]
     534:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     538:	006d6278 	rsbeq	r6, sp, r8, ror r2
     53c:	66000001 	strvs	r0, [r0], -r1
     540:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     544:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     548:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     54c:	01006d62 	tsteq	r0, r2, ror #26
     550:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     554:	5f346572 	svcpl	0x00346572
     558:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     55c:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     560:	00000100 	andeq	r0, r0, r0, lsl #2
     564:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     568:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     56c:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     570:	006d6278 	rsbeq	r6, sp, r8, ror r2
     574:	66000001 	strvs	r0, [r0], -r1
     578:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
     57c:	6172675f 	cmnvs	r2, pc, asr r7
     580:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     584:	0001006d 	andeq	r0, r1, sp, rrx
     588:	72696600 	rsbvc	r6, r9, #0, 12
     58c:	6c5f3565 	cfldr64vs	mvdx3, [pc], {101}	; 0x65
     590:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     594:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     598:	00000100 	andeq	r0, r0, r0, lsl #2
     59c:	02050000 	andeq	r0, r5, #0
     5a0:	200018e4 	andcs	r1, r0, r4, ror #17
     5a4:	3d013003 	stccc	0, cr3, [r1, #-12]
     5a8:	2f3e672f 	svccs	0x003e672f
     5ac:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     5b0:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     5b4:	2f3e672f 	svccs	0x003e672f
     5b8:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     5bc:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     5c0:	2f3e672f 	svccs	0x003e672f
     5c4:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     5c8:	1446023d 	strbne	r0, [r6], #-573	; 0xfffffdc3
     5cc:	3e2f4b4c 	vnmulcc.f64	d4, d15, d12
     5d0:	5959594b 	ldmdbpl	r9, {r0, r1, r3, r6, r8, fp, ip, lr}^
     5d4:	9191915a 	orrsls	r9, r1, sl, asr r1
     5d8:	3d3e9391 	ldccc	3, cr9, [lr, #-580]!	; 0xfffffdbc
     5dc:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
     5e0:	01010031 	tsteq	r1, r1, lsr r0
     5e4:	000000e7 	andeq	r0, r0, r7, ror #1
     5e8:	006c0002 	rsbeq	r0, ip, r2
     5ec:	01020000 	mrseq	r0, (UNDEF: 2)
     5f0:	000d0efb 	strdeq	r0, [sp], -fp
     5f4:	01010101 	tsteq	r1, r1, lsl #2
     5f8:	01000000 	mrseq	r0, (UNDEF: 0)
     5fc:	43010000 	movwmi	r0, #4096	; 0x1000
     600:	6f6d2f3a 	svcvs	0x006d2f3a
     604:	2f632f70 	svccs	0x00632f70
     608:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     60c:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     610:	6f697461 	svcvs	0x00697461
     614:	2f72656e 	svccs	0x0072656e
     618:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     61c:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     620:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     624:	6c700000 	ldclvs	0, cr0, [r0], #-0
     628:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
     62c:	0100632e 	tsteq	r0, lr, lsr #6
     630:	70730000 	rsbsvc	r0, r3, r0
     634:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     638:	0100682e 	tsteq	r0, lr, lsr #16
     63c:	6d690000 	stclvs	0, cr0, [r9, #-0]
     640:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
     644:	00010068 	andeq	r0, r1, r8, rrx
     648:	6d616700 	stclvs	7, cr6, [r1, #-0]
     64c:	6a626f65 	bvs	189c3e8 <startup-0x1e763c18>
     650:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
     654:	00010068 	andeq	r0, r1, r8, rrx
     658:	05000000 	streq	r0, [r0, #-0]
     65c:	001b8c02 	andseq	r8, fp, r2, lsl #24
     660:	594d1820 	stmdbpl	sp, {r5, fp, ip}^
     664:	0c033d67 	stceq	13, cr3, [r3], {103}	; 0x67
     668:	040200c8 	streq	r0, [r2], #-200	; 0xffffff38
     66c:	00820601 	addeq	r0, r2, r1, lsl #12
     670:	4a020402 	bmi	81680 <startup-0x1ff7e980>
     674:	754d4b06 	strbvc	r4, [sp, #-2822]	; 0xfffff4fa
     678:	4c684b3d 			; <UNDEFINED> instruction: 0x4c684b3d
     67c:	01040200 	mrseq	r0, R12_usr
     680:	75067406 	strvc	r7, [r6, #-1030]	; 0xfffffbfa
     684:	4d684b3d 	fstmdbxmi	r8!, {d20-d49}	;@ Deprecated
     688:	02005d75 	andeq	r5, r0, #7488	; 0x1d40
     68c:	4a060104 	bmi	180aa4 <startup-0x1fe7f55c>
     690:	005b5906 	subseq	r5, fp, r6, lsl #18
     694:	06010402 	streq	r0, [r1], -r2, lsl #8
     698:	5b59064a 	blpl	1641fc8 <startup-0x1e9be038>
     69c:	01040200 	mrseq	r0, R12_usr
     6a0:	02004a06 	andeq	r4, r0, #24576	; 0x6000
     6a4:	00580404 	subseq	r0, r8, r4, lsl #8
     6a8:	4a050402 	bmi	1416b8 <startup-0x1febe948>
     6ac:	06040200 	streq	r0, [r4], -r0, lsl #4
     6b0:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
     6b4:	4b064a07 	blmi	192ed8 <startup-0x1fe6d128>
     6b8:	0402005b 	streq	r0, [r2], #-91	; 0xffffffa5
     6bc:	06740601 	ldrbteq	r0, [r4], -r1, lsl #12
     6c0:	4b765b75 	blmi	1d9749c <startup-0x1e268b64>
     6c4:	675c4b68 	ldrbvs	r4, [ip, -r8, ror #22]
     6c8:	12026867 	andne	r6, r2, #6750208	; 0x670000
     6cc:	dd010100 	stfles	f0, [r1, #-0]
     6d0:	02000001 	andeq	r0, r0, #1
     6d4:	00018200 	andeq	r8, r1, r0, lsl #4
     6d8:	fb010200 	blx	40ee2 <startup-0x1ffbf11e>
     6dc:	01000d0e 	tsteq	r0, lr, lsl #26
     6e0:	00010101 	andeq	r0, r1, r1, lsl #2
     6e4:	00010000 	andeq	r0, r1, r0
     6e8:	3a430100 	bcc	10c0af0 <startup-0x1ef3f510>
     6ec:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     6f0:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 63c <startup-0x1ffff9c4>
     6f4:	616c706f 	cmnvs	ip, pc, rrx
     6f8:	61726f62 	cmnvs	r2, r2, ror #30
     6fc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     700:	442f7265 	strtmi	r7, [pc], #-613	; 708 <startup-0x1ffff8f8>
     704:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     708:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     70c:	00432f68 	subeq	r2, r3, r8, ror #30
     710:	72696200 	rsbvc	r6, r9, #0, 4
     714:	00632e64 	rsbeq	r2, r3, r4, ror #28
     718:	73000001 	movwvc	r0, #1
     71c:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
     720:	00682e65 	rsbeq	r2, r8, r5, ror #28
     724:	69000001 	stmdbvs	r0, {r0}
     728:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     72c:	0100682e 	tsteq	r0, lr, lsr #16
     730:	61670000 	cmnvs	r7, r0
     734:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
     738:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     73c:	0100682e 	tsteq	r0, lr, lsr #16
     740:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     744:	5f316472 	svcpl	0x00316472
     748:	63616c62 	cmnvs	r1, #25088	; 0x6200
     74c:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     750:	0001006d 	andeq	r0, r1, sp, rrx
     754:	72696200 	rsbvc	r6, r9, #0, 4
     758:	675f3164 	ldrbvs	r3, [pc, -r4, ror #2]
     75c:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     760:	006d6278 	rsbeq	r6, sp, r8, ror r2
     764:	62000001 	andvs	r0, r0, #1
     768:	31647269 	cmncc	r4, r9, ror #4
     76c:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     770:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     774:	01006d62 	tsteq	r0, r2, ror #26
     778:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     77c:	5f326472 	svcpl	0x00326472
     780:	63616c62 	cmnvs	r1, #25088	; 0x6200
     784:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     788:	0001006d 	andeq	r0, r1, sp, rrx
     78c:	72696200 	rsbvc	r6, r9, #0, 4
     790:	675f3264 	ldrbvs	r3, [pc, -r4, ror #4]
     794:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     798:	006d6278 	rsbeq	r6, sp, r8, ror r2
     79c:	62000001 	andvs	r0, r0, #1
     7a0:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     7a4:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     7a8:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     7ac:	01006d62 	tsteq	r0, r2, ror #26
     7b0:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     7b4:	5f336472 	svcpl	0x00336472
     7b8:	63616c62 	cmnvs	r1, #25088	; 0x6200
     7bc:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     7c0:	0001006d 	andeq	r0, r1, sp, rrx
     7c4:	72696200 	rsbvc	r6, r9, #0, 4
     7c8:	675f3364 	ldrbvs	r3, [pc, -r4, ror #6]
     7cc:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     7d0:	006d6278 	rsbeq	r6, sp, r8, ror r2
     7d4:	62000001 	andvs	r0, r0, #1
     7d8:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     7dc:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     7e0:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     7e4:	01006d62 	tsteq	r0, r2, ror #26
     7e8:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     7ec:	5f346472 	svcpl	0x00346472
     7f0:	63616c62 	cmnvs	r1, #25088	; 0x6200
     7f4:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     7f8:	0001006d 	andeq	r0, r1, sp, rrx
     7fc:	72696200 	rsbvc	r6, r9, #0, 4
     800:	675f3464 	ldrbvs	r3, [pc, -r4, ror #8]
     804:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     808:	006d6278 	rsbeq	r6, sp, r8, ror r2
     80c:	62000001 	andvs	r0, r0, #1
     810:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     814:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     818:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     81c:	01006d62 	tsteq	r0, r2, ror #26
     820:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     824:	5f356472 	svcpl	0x00356472
     828:	63616c62 	cmnvs	r1, #25088	; 0x6200
     82c:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     830:	0001006d 	andeq	r0, r1, sp, rrx
     834:	72696200 	rsbvc	r6, r9, #0, 4
     838:	675f3564 	ldrbvs	r3, [pc, -r4, ror #10]
     83c:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     840:	006d6278 	rsbeq	r6, sp, r8, ror r2
     844:	62000001 	andvs	r0, r0, #1
     848:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     84c:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     850:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     854:	01006d62 	tsteq	r0, r2, ror #26
     858:	00000000 	andeq	r0, r0, r0
     85c:	1d900205 	lfmne	f0, 4, [r0, #20]
     860:	3f032000 	svccc	0x00032000
     864:	672f3e01 	strvs	r3, [pc, -r1, lsl #28]!
     868:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     86c:	2f3e672f 	svccs	0x003e672f
     870:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     874:	3f672f3d 	svccc	0x00672f3d
     878:	2f3d672f 	svccs	0x003d672f
     87c:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     880:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     884:	2f3d672f 	svccs	0x003d672f
     888:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     88c:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     890:	023d672f 	eorseq	r6, sp, #12320768	; 0xbc0000
     894:	4b4c145e 	blmi	1305a14 <startup-0x1ecfa5ec>
     898:	594b3e2f 	stmdbpl	fp, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}^
     89c:	5c595959 	mrrcpl	9, 5, r5, r9, cr9	; <UNPREDICTABLE>
     8a0:	91919191 			; <UNDEFINED> instruction: 0x91919191
     8a4:	3d3e9493 	cfldrscc	mvf9, [lr, #-588]!	; 0xfffffdb4
     8a8:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
     8ac:	0101003d 	tsteq	r1, sp, lsr r0
     8b0:	00000161 	andeq	r0, r0, r1, ror #2
     8b4:	011c0002 	tsteq	ip, r2
     8b8:	01020000 	mrseq	r0, (UNDEF: 2)
     8bc:	000d0efb 	strdeq	r0, [sp], -fp
     8c0:	01010101 	tsteq	r1, r1, lsl #2
     8c4:	01000000 	mrseq	r0, (UNDEF: 0)
     8c8:	43010000 	movwmi	r0, #4096	; 0x1000
     8cc:	6f6d2f3a 	svcvs	0x006d2f3a
     8d0:	2f632f70 	svccs	0x00632f70
     8d4:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     8d8:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     8dc:	6f697461 	svcvs	0x00697461
     8e0:	2f72656e 	svccs	0x0072656e
     8e4:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     8e8:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     8ec:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     8f0:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     8f4:	2e686374 	mcrcs	3, 3, r6, cr8, cr4, {3}
     8f8:	00010063 	andeq	r0, r1, r3, rrx
     8fc:	72707300 	rsbsvc	r7, r0, #0, 6
     900:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
     904:	00010068 	andeq	r0, r1, r8, rrx
     908:	616d6900 	cmnvs	sp, r0, lsl #18
     90c:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     910:	00000100 	andeq	r0, r0, r0, lsl #2
     914:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     918:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     91c:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
     920:	00000100 	andeq	r0, r0, r0, lsl #2
     924:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     928:	625f3168 	subsvs	r3, pc, #104, 2
     92c:	6b63616c 	blvs	18d8ee4 <startup-0x1e72711c>
     930:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     934:	00000100 	andeq	r0, r0, r0, lsl #2
     938:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     93c:	675f3168 	ldrbvs	r3, [pc, -r8, ror #2]
     940:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     944:	006d6278 	rsbeq	r6, sp, r8, ror r2
     948:	77000001 	strvc	r0, [r0, -r1]
     94c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     950:	696c5f31 	stmdbvs	ip!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     954:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     958:	006d6278 	rsbeq	r6, sp, r8, ror r2
     95c:	77000001 	strvc	r0, [r0, -r1]
     960:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     964:	6c625f32 	stclvs	15, cr5, [r2], #-200	; 0xffffff38
     968:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     96c:	006d6278 	rsbeq	r6, sp, r8, ror r2
     970:	77000001 	strvc	r0, [r0, -r1]
     974:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     978:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
     97c:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     980:	01006d62 	tsteq	r0, r2, ror #26
     984:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     988:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     98c:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     990:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     994:	01006d62 	tsteq	r0, r2, ror #26
     998:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     99c:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     9a0:	616c625f 	cmnvs	ip, pc, asr r2
     9a4:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     9a8:	01006d62 	tsteq	r0, r2, ror #26
     9ac:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     9b0:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     9b4:	6172675f 	cmnvs	r2, pc, asr r7
     9b8:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     9bc:	0001006d 	andeq	r0, r1, sp, rrx
     9c0:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     9c4:	5f336863 	svcpl	0x00336863
     9c8:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     9cc:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     9d0:	0001006d 	andeq	r0, r1, sp, rrx
     9d4:	05000000 	streq	r0, [r0, #-0]
     9d8:	0020f402 	eoreq	pc, r0, r2, lsl #8
     9dc:	01280320 			; <UNDEFINED> instruction: 0x01280320
     9e0:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     9e4:	2f3d672f 	svccs	0x003d672f
     9e8:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     9ec:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     9f0:	2f3f672f 	svccs	0x003f672f
     9f4:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     9f8:	3e672f3d 	mcrcc	15, 3, r2, cr7, cr13, {1}
     9fc:	4c143a02 			; <UNDEFINED> instruction: 0x4c143a02
     a00:	4b3e2f4b 	blmi	f8c734 <startup-0x1f0738cc>
     a04:	915b5959 	cmpls	fp, r9, asr r9
     a08:	3e949191 	mrccc	1, 4, r9, cr4, cr1, {4}
     a0c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     a10:	01002902 	tsteq	r0, r2, lsl #18
     a14:	00018301 	andeq	r8, r1, r1, lsl #6
     a18:	1a000200 	bne	1220 <startup-0x1fffede0>
     a1c:	02000001 	andeq	r0, r0, #1
     a20:	0d0efb01 	vstreq	d15, [lr, #-4]
     a24:	01010100 	mrseq	r0, (UNDEF: 17)
     a28:	00000001 	andeq	r0, r0, r1
     a2c:	01000001 	tsteq	r0, r1
     a30:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     a34:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     a38:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     a3c:	6f62616c 	svcvs	0x0062616c
     a40:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     a44:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     a48:	5049442f 	subpl	r4, r9, pc, lsr #8
     a4c:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     a50:	2f686374 	svccs	0x00686374
     a54:	44000043 	strmi	r0, [r0], #-67	; 0xffffffbd
     a58:	632e5049 			; <UNDEFINED> instruction: 0x632e5049
     a5c:	00000100 	andeq	r0, r0, r0, lsl #2
     a60:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     a64:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
     a68:	00000100 	andeq	r0, r0, r0, lsl #2
     a6c:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     a70:	00682e65 	rsbeq	r2, r8, r5, ror #28
     a74:	67000001 	strvs	r0, [r0, -r1]
     a78:	6f656d61 	svcvs	0x00656d61
     a7c:	63656a62 	cmnvs	r5, #401408	; 0x62000
     a80:	00682e74 	rsbeq	r2, r8, r4, ror lr
     a84:	77000001 	strvc	r0, [r0, -r1]
     a88:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     a8c:	6c625f31 	stclvs	15, cr5, [r2], #-196	; 0xffffff3c
     a90:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     a94:	006d6278 	rsbeq	r6, sp, r8, ror r2
     a98:	77000001 	strvc	r0, [r0, -r1]
     a9c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     aa0:	72675f31 	rsbvc	r5, r7, #49, 30	; 0xc4
     aa4:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     aa8:	01006d62 	tsteq	r0, r2, ror #26
     aac:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     ab0:	31686374 	smccc	34356	; 0x8634
     ab4:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     ab8:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     abc:	01006d62 	tsteq	r0, r2, ror #26
     ac0:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     ac4:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     ac8:	616c625f 	cmnvs	ip, pc, asr r2
     acc:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     ad0:	01006d62 	tsteq	r0, r2, ror #26
     ad4:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     ad8:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     adc:	6172675f 	cmnvs	r2, pc, asr r7
     ae0:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     ae4:	0001006d 	andeq	r0, r1, sp, rrx
     ae8:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     aec:	5f326863 	svcpl	0x00326863
     af0:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     af4:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     af8:	0001006d 	andeq	r0, r1, sp, rrx
     afc:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     b00:	5f336863 	svcpl	0x00336863
     b04:	63616c62 	cmnvs	r1, #25088	; 0x6200
     b08:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     b0c:	0001006d 	andeq	r0, r1, sp, rrx
     b10:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     b14:	5f336863 	svcpl	0x00336863
     b18:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     b1c:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     b20:	00000100 	andeq	r0, r0, r0, lsl #2
     b24:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     b28:	6c5f3368 	mrrcvs	3, 6, r3, pc, cr8	; <UNPREDICTABLE>
     b2c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     b30:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     b34:	00000100 	andeq	r0, r0, r0, lsl #2
     b38:	02050000 	andeq	r0, r5, #0
     b3c:	2000232c 	andcs	r2, r0, ip, lsr #6
     b40:	3e012c03 	cdpcc	12, 0, cr2, cr1, cr3, {0}
     b44:	2f3d672f 	svccs	0x003d672f
     b48:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     b4c:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     b50:	2f3d672f 	svccs	0x003d672f
     b54:	672f3f67 	strvs	r3, [pc, -r7, ror #30]!
     b58:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     b5c:	023e672f 	eorseq	r6, lr, #12320768	; 0xbc0000
     b60:	4b4c143a 	blmi	1305c50 <startup-0x1ecfa3b0>
     b64:	594b3e2f 	stmdbpl	fp, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}^
     b68:	91915b59 	orrsls	r5, r1, r9, asr fp
     b6c:	3d3e9491 	cfldrscc	mvf9, [lr, #-580]!	; 0xfffffdbc
     b70:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
     b74:	3d591729 	ldclcc	7, cr1, [r9, #-164]	; 0xffffff5c
     b78:	4e4b933d 	mcrmi	3, 2, r9, cr11, cr13, {1}
     b7c:	4c675a5a 			; <UNDEFINED> instruction: 0x4c675a5a
     b80:	01040200 	mrseq	r0, R12_usr
     b84:	83068206 	movwhi	r8, #25094	; 0x6206
     b88:	504d913d 	subpl	r9, sp, sp, lsr r1
     b8c:	3108ae4b 	tstcc	r8, fp, asr #28
     b90:	1b503d4b 	blne	14100c4 <startup-0x1ebeff3c>
     b94:	023f3d4b 	eorseq	r3, pc, #4800	; 0x12c0
     b98:	01010010 	tsteq	r1, r0, lsl r0
     b9c:	000001a5 	andeq	r0, r0, r5, lsr #3
     ba0:	01570002 	cmpeq	r7, r2
     ba4:	01020000 	mrseq	r0, (UNDEF: 2)
     ba8:	000d0efb 	strdeq	r0, [sp], -fp
     bac:	01010101 	tsteq	r1, r1, lsl #2
     bb0:	01000000 	mrseq	r0, (UNDEF: 0)
     bb4:	43010000 	movwmi	r0, #4096	; 0x1000
     bb8:	6f6d2f3a 	svcvs	0x006d2f3a
     bbc:	2f632f70 	svccs	0x00632f70
     bc0:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     bc4:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     bc8:	6f697461 	svcvs	0x00697461
     bcc:	2f72656e 	svccs	0x0072656e
     bd0:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     bd4:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     bd8:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     bdc:	6c660000 	stclvs	0, cr0, [r6], #-0
     be0:	2e656d61 	cdpcs	13, 6, cr6, cr5, cr1, {3}
     be4:	00010063 	andeq	r0, r1, r3, rrx
     be8:	72707300 	rsbsvc	r7, r0, #0, 6
     bec:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
     bf0:	00010068 	andeq	r0, r1, r8, rrx
     bf4:	616d6900 	cmnvs	sp, r0, lsl #18
     bf8:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     bfc:	00000100 	andeq	r0, r0, r0, lsl #2
     c00:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     c04:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     c08:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
     c0c:	00000100 	andeq	r0, r0, r0, lsl #2
     c10:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
     c14:	625f3165 	subsvs	r3, pc, #1073741849	; 0x40000019
     c18:	6b63616c 	blvs	18d91d0 <startup-0x1e726e30>
     c1c:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     c20:	00000100 	andeq	r0, r0, r0, lsl #2
     c24:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
     c28:	675f3165 	ldrbvs	r3, [pc, -r5, ror #2]
     c2c:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     c30:	006d6278 	rsbeq	r6, sp, r8, ror r2
     c34:	66000001 	strvs	r0, [r0], -r1
     c38:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
     c3c:	696c5f31 	stmdbvs	ip!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     c40:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     c44:	006d6278 	rsbeq	r6, sp, r8, ror r2
     c48:	66000001 	strvs	r0, [r0], -r1
     c4c:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
     c50:	6c625f32 	stclvs	15, cr5, [r2], #-200	; 0xffffff38
     c54:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     c58:	006d6278 	rsbeq	r6, sp, r8, ror r2
     c5c:	66000001 	strvs	r0, [r0], -r1
     c60:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
     c64:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
     c68:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     c6c:	01006d62 	tsteq	r0, r2, ror #26
     c70:	6c660000 	stclvs	0, cr0, [r6], #-0
     c74:	32656d61 	rsbcc	r6, r5, #6208	; 0x1840
     c78:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     c7c:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     c80:	01006d62 	tsteq	r0, r2, ror #26
     c84:	6c660000 	stclvs	0, cr0, [r6], #-0
     c88:	33656d61 	cmncc	r5, #6208	; 0x1840
     c8c:	616c625f 	cmnvs	ip, pc, asr r2
     c90:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     c94:	01006d62 	tsteq	r0, r2, ror #26
     c98:	6c660000 	stclvs	0, cr0, [r6], #-0
     c9c:	33656d61 	cmncc	r5, #6208	; 0x1840
     ca0:	6172675f 	cmnvs	r2, pc, asr r7
     ca4:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     ca8:	0001006d 	andeq	r0, r1, sp, rrx
     cac:	616c6600 	cmnvs	ip, r0, lsl #12
     cb0:	5f33656d 	svcpl	0x0033656d
     cb4:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     cb8:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     cbc:	0001006d 	andeq	r0, r1, sp, rrx
     cc0:	616c6600 	cmnvs	ip, r0, lsl #12
     cc4:	5f34656d 	svcpl	0x0034656d
     cc8:	63616c62 	cmnvs	r1, #25088	; 0x6200
     ccc:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     cd0:	0001006d 	andeq	r0, r1, sp, rrx
     cd4:	616c6600 	cmnvs	ip, r0, lsl #12
     cd8:	5f34656d 	svcpl	0x0034656d
     cdc:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     ce0:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     ce4:	00000100 	andeq	r0, r0, r0, lsl #2
     ce8:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
     cec:	6c5f3465 	cfldrdvs	mvd3, [pc], {101}	; 0x65
     cf0:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     cf4:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     cf8:	00000100 	andeq	r0, r0, r0, lsl #2
     cfc:	02050000 	andeq	r0, r5, #0
     d00:	2000269c 	mulcs	r0, ip, r6
     d04:	3e013103 	adfccs	f3, f1, f3
     d08:	2f3d672f 	svccs	0x003d672f
     d0c:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     d10:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     d14:	2f3d672f 	svccs	0x003d672f
     d18:	672f3f67 	strvs	r3, [pc, -r7, ror #30]!
     d1c:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     d20:	2f3e672f 	svccs	0x003e672f
     d24:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     d28:	3e672f3d 	mcrcc	15, 3, r2, cr7, cr13, {1}
     d2c:	4c144d02 	ldcmi	13, cr4, [r4], {2}
     d30:	4b3e2f4b 	blmi	f8ca64 <startup-0x1f07359c>
     d34:	915a5959 	cmpls	sl, r9, asr r9
     d38:	3e939191 	mrccc	1, 4, r9, cr3, cr1, {4}
     d3c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     d40:	01002f02 	tsteq	r0, r2, lsl #30
     d44:	00023101 	andeq	r3, r2, r1, lsl #2
     d48:	ba000200 	blt	1550 <startup-0x1fffeab0>
     d4c:	02000001 	andeq	r0, r0, #1
     d50:	0d0efb01 	vstreq	d15, [lr, #-4]
     d54:	01010100 	mrseq	r0, (UNDEF: 17)
     d58:	00000001 	andeq	r0, r0, r1
     d5c:	01000001 	tsteq	r0, r1
     d60:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     d64:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     d68:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     d6c:	6f62616c 	svcvs	0x0062616c
     d70:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     d74:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     d78:	5049442f 	subpl	r4, r9, pc, lsr #8
     d7c:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     d80:	2f686374 	svccs	0x00686374
     d84:	62000043 	andvs	r0, r0, #67	; 0x43
     d88:	2e6d6f6f 	cdpcs	15, 6, cr6, cr13, cr15, {3}
     d8c:	00010063 	andeq	r0, r1, r3, rrx
     d90:	72707300 	rsbsvc	r7, r0, #0, 6
     d94:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
     d98:	00010068 	andeq	r0, r1, r8, rrx
     d9c:	616d6900 	cmnvs	sp, r0, lsl #18
     da0:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     da4:	00000100 	andeq	r0, r0, r0, lsl #2
     da8:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     dac:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     db0:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
     db4:	00000100 	andeq	r0, r0, r0, lsl #2
     db8:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; c38 <startup-0x1ffff3c8>
     dbc:	6c625f31 	stclvs	15, cr5, [r2], #-196	; 0xffffff3c
     dc0:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     dc4:	006d6278 	rsbeq	r6, sp, r8, ror r2
     dc8:	62000001 	andvs	r0, r0, #1
     dcc:	316d6f6f 	cmncc	sp, pc, ror #30
     dd0:	6172675f 	cmnvs	r2, pc, asr r7
     dd4:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     dd8:	0001006d 	andeq	r0, r1, sp, rrx
     ddc:	6f6f6200 	svcvs	0x006f6200
     de0:	6c5f316d 	ldfvse	f3, [pc], {109}	; 0x6d
     de4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     de8:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     dec:	00000100 	andeq	r0, r0, r0, lsl #2
     df0:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; c70 <startup-0x1ffff390>
     df4:	6c625f32 	stclvs	15, cr5, [r2], #-200	; 0xffffff38
     df8:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     dfc:	006d6278 	rsbeq	r6, sp, r8, ror r2
     e00:	62000001 	andvs	r0, r0, #1
     e04:	326d6f6f 	rsbcc	r6, sp, #444	; 0x1bc
     e08:	6172675f 	cmnvs	r2, pc, asr r7
     e0c:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     e10:	0001006d 	andeq	r0, r1, sp, rrx
     e14:	6f6f6200 	svcvs	0x006f6200
     e18:	6c5f326d 	lfmvs	f3, 2, [pc], {109}	; 0x6d
     e1c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     e20:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     e24:	00000100 	andeq	r0, r0, r0, lsl #2
     e28:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; ca8 <startup-0x1ffff358>
     e2c:	6c625f33 	stclvs	15, cr5, [r2], #-204	; 0xffffff34
     e30:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     e34:	006d6278 	rsbeq	r6, sp, r8, ror r2
     e38:	62000001 	andvs	r0, r0, #1
     e3c:	336d6f6f 	cmncc	sp, #444	; 0x1bc
     e40:	6172675f 	cmnvs	r2, pc, asr r7
     e44:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     e48:	0001006d 	andeq	r0, r1, sp, rrx
     e4c:	6f6f6200 	svcvs	0x006f6200
     e50:	6c5f336d 	mrrcvs	3, 6, r3, pc, cr13	; <UNPREDICTABLE>
     e54:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     e58:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     e5c:	00000100 	andeq	r0, r0, r0, lsl #2
     e60:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; ce0 <startup-0x1ffff320>
     e64:	6c625f34 	stclvs	15, cr5, [r2], #-208	; 0xffffff30
     e68:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     e6c:	006d6278 	rsbeq	r6, sp, r8, ror r2
     e70:	62000001 	andvs	r0, r0, #1
     e74:	346d6f6f 	strbtcc	r6, [sp], #-3951	; 0xfffff091
     e78:	6172675f 	cmnvs	r2, pc, asr r7
     e7c:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     e80:	0001006d 	andeq	r0, r1, sp, rrx
     e84:	6f6f6200 	svcvs	0x006f6200
     e88:	6c5f346d 	cfldrdvs	mvd3, [pc], {109}	; 0x6d
     e8c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     e90:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     e94:	00000100 	andeq	r0, r0, r0, lsl #2
     e98:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; d18 <startup-0x1ffff2e8>
     e9c:	6c625f35 	stclvs	15, cr5, [r2], #-212	; 0xffffff2c
     ea0:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     ea4:	006d6278 	rsbeq	r6, sp, r8, ror r2
     ea8:	62000001 	andvs	r0, r0, #1
     eac:	356d6f6f 	strbcc	r6, [sp, #-3951]!	; 0xfffff091
     eb0:	6172675f 	cmnvs	r2, pc, asr r7
     eb4:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     eb8:	0001006d 	andeq	r0, r1, sp, rrx
     ebc:	6f6f6200 	svcvs	0x006f6200
     ec0:	6c5f356d 	cfldr64vs	mvdx3, [pc], {109}	; 0x6d
     ec4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     ec8:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     ecc:	00000100 	andeq	r0, r0, r0, lsl #2
     ed0:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; d50 <startup-0x1ffff2b0>
     ed4:	6c625f36 	stclvs	15, cr5, [r2], #-216	; 0xffffff28
     ed8:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     edc:	006d6278 	rsbeq	r6, sp, r8, ror r2
     ee0:	62000001 	andvs	r0, r0, #1
     ee4:	366d6f6f 	strbtcc	r6, [sp], -pc, ror #30
     ee8:	6172675f 	cmnvs	r2, pc, asr r7
     eec:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     ef0:	0001006d 	andeq	r0, r1, sp, rrx
     ef4:	6f6f6200 	svcvs	0x006f6200
     ef8:	6c5f366d 	mrrcvs	6, 6, r3, pc, cr13	; <UNPREDICTABLE>
     efc:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     f00:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     f04:	00000100 	andeq	r0, r0, r0, lsl #2
     f08:	02050000 	andeq	r0, r5, #0
     f0c:	20002948 	andcs	r2, r0, r8, asr #18
     f10:	0100cf03 	tsteq	r0, r3, lsl #30
     f14:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     f18:	2f3d672f 	svccs	0x003d672f
     f1c:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     f20:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     f24:	2f3f672f 	svccs	0x003f672f
     f28:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     f2c:	3e672f3d 	mcrcc	15, 3, r2, cr7, cr13, {1}
     f30:	2f3d672f 	svccs	0x003d672f
     f34:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     f38:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     f3c:	2f3d672f 	svccs	0x003d672f
     f40:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     f44:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     f48:	023d672f 	eorseq	r6, sp, #12320768	; 0xbc0000
     f4c:	594c1471 	stmdbpl	ip, {r0, r4, r5, r6, sl, ip}^
     f50:	594b3e2f 	stmdbpl	fp, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}^
     f54:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
     f58:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
     f5c:	75757559 	ldrbvc	r7, [r5, #-1369]!	; 0xfffffaa7
     f60:	91919176 	orrsls	r9, r1, r6, ror r1
     f64:	91919191 			; <UNDEFINED> instruction: 0x91919191
     f68:	91919191 			; <UNDEFINED> instruction: 0x91919191
     f6c:	93919191 	orrsls	r9, r1, #1073741860	; 0x40000024
     f70:	3d3d3d3e 	ldccc	13, cr3, [sp, #-248]!	; 0xffffff08
     f74:	0066023d 	rsbeq	r0, r6, sp, lsr r2
     f78:	034e0101 	movteq	r0, #57601	; 0xe101
     f7c:	00020000 	andeq	r0, r2, r0
     f80:	0000007c 	andeq	r0, r0, ip, ror r0
     f84:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     f88:	0101000d 	tsteq	r1, sp
     f8c:	00000101 	andeq	r0, r0, r1, lsl #2
     f90:	00000100 	andeq	r0, r0, r0, lsl #2
     f94:	2f3a4301 	svccs	0x003a4301
     f98:	2f706f6d 	svccs	0x00706f6d
     f9c:	6f4d2f63 	svcvs	0x004d2f63
     fa0:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     fa4:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     fa8:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     fac:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     fb0:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     fb4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     fb8:	0000432f 	andeq	r4, r0, pc, lsr #6
     fbc:	70617267 	rsbvc	r7, r1, r7, ror #4
     fc0:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
     fc4:	0100632e 	tsteq	r0, lr, lsr #6
     fc8:	70730000 	rsbsvc	r0, r3, r0
     fcc:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     fd0:	0100682e 	tsteq	r0, lr, lsr #16
     fd4:	6d690000 	stclvs	0, cr0, [r9, #-0]
     fd8:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
     fdc:	00010068 	andeq	r0, r1, r8, rrx
     fe0:	6d616700 	stclvs	7, cr6, [r1, #-0]
     fe4:	6a626f65 	bvs	189cd80 <startup-0x1e763280>
     fe8:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
     fec:	00010068 	andeq	r0, r1, r8, rrx
     ff0:	61726700 	cmnvs	r2, r0, lsl #14
     ff4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
     ff8:	00682e73 	rsbeq	r2, r8, r3, ror lr
     ffc:	00000001 	andeq	r0, r0, r1
    1000:	74020500 	strvc	r0, [r2], #-1280	; 0xfffffb00
    1004:	1520002e 	strne	r0, [r0, #-46]!	; 0xffffffd2
    1008:	3d3d3d30 	ldccc	13, cr3, [sp, #-192]!	; 0xffffff40
    100c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    1010:	06200601 	strteq	r0, [r0], -r1, lsl #12
    1014:	30a03d67 	adccc	r3, r0, r7, ror #26
    1018:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    101c:	01040200 	mrseq	r0, R12_usr
    1020:	67062006 	strvs	r2, [r6, -r6]
    1024:	214ba03d 	cmpcs	fp, sp, lsr r0
    1028:	2a2f2f2f 	bcs	bcccec <startup-0x1f433314>
    102c:	214f4c5e 	cmpcs	pc, lr, asr ip	; <UNPREDICTABLE>
    1030:	09035b57 	stmdbeq	r3, {r0, r1, r2, r4, r6, r8, r9, fp, ip, lr}
    1034:	02004c4a 	andeq	r4, r0, #18944	; 0x4a00
    1038:	003d0304 	eorseq	r0, sp, r4, lsl #6
    103c:	57030402 	strpl	r0, [r3, -r2, lsl #8]
    1040:	01040200 	mrseq	r0, R12_usr
    1044:	4c063c06 	stcmi	12, cr3, [r6], {6}
    1048:	674b2f67 	strbvs	r2, [fp, -r7, ror #30]
    104c:	4b4b4b2f 	blmi	12d3d10 <startup-0x1ed2c2f0>
    1050:	915968a1 	cmpls	r9, r1, lsr #17
    1054:	68765983 	ldmdavs	r6!, {r0, r1, r7, r8, fp, ip, lr}^
    1058:	5983d759 	stmibpl	r3, {r0, r3, r4, r6, r8, r9, sl, ip, lr, pc}
    105c:	12036767 	andne	r6, r3, #27000832	; 0x19c0000
    1060:	206e0374 	rsbcs	r0, lr, r4, ror r3
    1064:	034a1203 	movteq	r1, #41475	; 0xa203
    1068:	3d3d2070 	ldccc	0, cr2, [sp, #-448]!	; 0xfffffe40
    106c:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
    1070:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
    1074:	3e4c223d 	mcrcc	2, 2, r2, cr12, cr13, {1}
    1078:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    107c:	752f3d31 	strvc	r3, [pc, #-3377]!	; 353 <startup-0x1ffffcad>
    1080:	7903313d 	stmdbvc	r3, {r0, r2, r3, r4, r5, r8, ip, sp}
    1084:	3d23274a 	stccc	7, cr2, [r3, #-296]!	; 0xfffffed8
    1088:	3d3d67bc 	ldccc	7, cr6, [sp, #-752]!	; 0xfffffd10
    108c:	2f593d3d 	svccs	0x00593d3d
    1090:	3d592f3d 	ldclcc	15, cr2, [r9, #-244]	; 0xffffff0c
    1094:	303d4b3e 	eorscc	r4, sp, lr, lsr fp
    1098:	3d313d4b 	ldccc	13, cr3, [r1, #-300]!	; 0xfffffed4
    109c:	595967bc 	ldmdbpl	r9, {r2, r3, r4, r5, r7, r8, r9, sl, sp, lr}^
    10a0:	594b915a 	stmdbpl	fp, {r1, r3, r4, r6, r8, ip, pc}^
    10a4:	3e2f3d2f 	cdpcc	13, 2, cr3, cr15, cr15, {1}
    10a8:	59303d59 	ldmdbpl	r0!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
    10ac:	3d3d313d 	ldfccs	f3, [sp, #-244]!	; 0xffffff0c
    10b0:	3d91673d 	ldccc	7, cr6, [r1, #244]	; 0xf4
    10b4:	833d3d59 	teqhi	sp, #5696	; 0x1640
    10b8:	593d914b 	ldmdbpl	sp!, {r0, r1, r3, r6, r8, ip, pc}
    10bc:	4c833d3d 	stcmi	13, cr3, [r3], {61}	; 0x3d
    10c0:	3d3e3d2f 	ldccc	13, cr3, [lr, #-188]!	; 0xffffff44
    10c4:	3d3e3d3d 	ldccc	13, cr3, [lr, #-244]!	; 0xffffff0c
    10c8:	4b4b3e3d 	blmi	12d09c4 <startup-0x1ed2f63c>
    10cc:	3d4b4b4b 	vstrcc	d20, [fp, #-300]	; 0xfffffed4
    10d0:	9f4b3e3d 	svcls	0x004b3e3d
    10d4:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
    10d8:	02004b03 	andeq	r4, r0, #3072	; 0xc00
    10dc:	00490304 	subeq	r0, r9, r4, lsl #6
    10e0:	06010402 	streq	r0, [r1], -r2, lsl #8
    10e4:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
    10e8:	00460602 	subeq	r0, r6, r2, lsl #12
    10ec:	06010402 	streq	r0, [r1], -r2, lsl #8
    10f0:	4d520658 	ldclmi	6, cr0, [r2, #-352]	; 0xfffffea0
    10f4:	02002f76 	andeq	r2, r0, #472	; 0x1d8
    10f8:	4a060104 	bmi	181510 <startup-0x1fe7eaf0>
    10fc:	02040200 	andeq	r0, r4, #0, 4
    1100:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    1104:	4c064a03 			; <UNDEFINED> instruction: 0x4c064a03
    1108:	3d3d1308 	ldccc	3, cr1, [sp, #-32]!	; 0xffffffe0
    110c:	763dbc3e 			; <UNDEFINED> instruction: 0x763dbc3e
    1110:	1fd93d76 	svcne	0x00d93d76
    1114:	d93d23d7 	ldmdble	sp!, {r0, r1, r2, r4, r6, r7, r8, r9, sp}
    1118:	3d23d71f 	stccc	7, cr13, [r3, #-124]!	; 0xffffff84
    111c:	03d71fd9 	bicseq	r1, r7, #868	; 0x364
    1120:	23032e61 	movwcs	r2, #15969	; 0x3e61
    1124:	0069af20 	rsbeq	sl, r9, r0, lsr #30
    1128:	06010402 	streq	r0, [r1], -r2, lsl #8
    112c:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    1130:	02004a02 	andeq	r4, r0, #8192	; 0x2000
    1134:	064a0304 	strbeq	r0, [sl], -r4, lsl #6
    1138:	1308754b 	movwne	r7, #34123	; 0x854b
    113c:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    1140:	5b595959 	blpl	16576ac <startup-0x1e9a8954>
    1144:	4b3d763d 	blmi	f5ea40 <startup-0x1f0a15c0>
    1148:	c93e4b4c 	ldmdbgt	lr!, {r2, r3, r6, r8, r9, fp, lr}
    114c:	3dca9fd8 	stclcc	15, cr9, [sl, #864]	; 0x360
    1150:	5e03a0ae 	cdppl	0, 0, cr10, cr3, cr14, {5}
    1154:	202303ac 	eorcs	r0, r3, ip, lsr #7
    1158:	592f4c84 	stmdbpl	pc!, {r2, r7, sl, fp, lr}	; <UNPREDICTABLE>
    115c:	01040200 	mrseq	r0, R12_usr
    1160:	02005806 	andeq	r5, r0, #393216	; 0x60000
    1164:	002e0204 	eoreq	r0, lr, r4, lsl #4
    1168:	20040402 	andcs	r0, r4, r2, lsl #8
    116c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    1170:	d7593d06 	ldrble	r3, [r9, -r6, lsl #26]
    1174:	04020075 	streq	r0, [r2], #-117	; 0xffffff8b
    1178:	02005903 	andeq	r5, r0, #49152	; 0xc000
    117c:	00ab0304 	adceq	r0, fp, r4, lsl #6
    1180:	06010402 	streq	r0, [r1], -r2, lsl #8
    1184:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
    1188:	00550602 	subseq	r0, r5, r2, lsl #12
    118c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1190:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    1194:	00560602 	subseq	r0, r6, r2, lsl #12
    1198:	06010402 	streq	r0, [r1], -r2, lsl #8
    119c:	0a030674 	beq	c2b74 <startup-0x1ff3d48c>
    11a0:	59765258 	ldmdbpl	r6!, {r3, r4, r6, r9, ip, lr}^
    11a4:	3d3d595a 			; <UNDEFINED> instruction: 0x3d3d595a
    11a8:	e6913dbb 			; <UNDEFINED> instruction: 0xe6913dbb
    11ac:	0067083d 	rsbeq	r0, r7, sp, lsr r8
    11b0:	03020402 	movweq	r0, #9218	; 0x2402
    11b4:	0066087a 	rsbeq	r0, r6, sl, ror r8
    11b8:	06010402 	streq	r0, [r1], -r2, lsl #8
    11bc:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    11c0:	003a0602 	eorseq	r0, sl, r2, lsl #12
    11c4:	06010402 	streq	r0, [r1], -r2, lsl #8
    11c8:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    11cc:	00490602 	subeq	r0, r9, r2, lsl #12
    11d0:	06010402 	streq	r0, [r1], -r2, lsl #8
    11d4:	0e03063c 	mcreq	6, 0, r0, cr3, cr12, {1}
    11d8:	3d774c58 	ldclcc	12, cr4, [r7, #-352]!	; 0xfffffea0
    11dc:	03040200 	movweq	r0, #16896	; 0x4200
    11e0:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    11e4:	02006503 	andeq	r6, r0, #12582912	; 0xc00000
    11e8:	3c060104 	stfccs	f0, [r6], {4}
    11ec:	02040200 	andeq	r0, r4, #0, 4
    11f0:	02006506 	andeq	r6, r0, #25165824	; 0x1800000
    11f4:	3c060104 	stfccs	f0, [r6], {4}
    11f8:	774c6b06 	strbvc	r6, [ip, -r6, lsl #22]
    11fc:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    1200:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
    1204:	00650304 	rsbeq	r0, r5, r4, lsl #6
    1208:	06010402 	streq	r0, [r1], -r2, lsl #8
    120c:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    1210:	00650602 	rsbeq	r0, r5, r2, lsl #12
    1214:	06010402 	streq	r0, [r1], -r2, lsl #8
    1218:	4d6b063c 	stclmi	6, cr0, [fp, #-240]!	; 0xffffff10
    121c:	2f2f2f3d 	svccs	0x002f2f3d
    1220:	00693030 	rsbeq	r3, r9, r0, lsr r0
    1224:	30010402 	andcc	r0, r1, r2, lsl #8
    1228:	01040200 	mrseq	r0, R12_usr
    122c:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
    1230:	02006701 	andeq	r6, r0, #262144	; 0x40000
    1234:	00c90104 	sbceq	r0, r9, r4, lsl #2
    1238:	08010402 	stmdaeq	r1, {r1, sl}
    123c:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
    1240:	02004b01 	andeq	r4, r0, #1024	; 0x400
    1244:	002f0104 	eoreq	r0, pc, r4, lsl #2
    1248:	68010402 	stmdavs	r1, {r1, sl}
    124c:	01040200 	mrseq	r0, R12_usr
    1250:	040200c9 	streq	r0, [r2], #-201	; 0xffffff37
    1254:	00130801 	andseq	r0, r3, r1, lsl #16
    1258:	92010402 	andls	r0, r1, #33554432	; 0x2000000
    125c:	01040200 	mrseq	r0, R12_usr
    1260:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
    1264:	02003e01 	andeq	r3, r0, #1, 28
    1268:	002f0104 	eoreq	r0, pc, r4, lsl #2
    126c:	67010402 	strvs	r0, [r1, -r2, lsl #8]
    1270:	01040200 	mrseq	r0, R12_usr
    1274:	02001308 	andeq	r1, r0, #8, 6	; 0x20000000
    1278:	004c0104 	subeq	r0, ip, r4, lsl #2
    127c:	03010402 	movweq	r0, #5122	; 0x1402
    1280:	19033c6c 	stmdbne	r3, {r2, r3, r5, r6, sl, fp, ip, sp}
    1284:	02003e3c 	andeq	r3, r0, #60, 28	; 0x3c0
    1288:	003d0304 	eorseq	r0, sp, r4, lsl #6
    128c:	08030402 	stmdaeq	r3, {r1, sl}
    1290:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
    1294:	00910803 	addseq	r0, r1, r3, lsl #16
    1298:	08030402 	stmdaeq	r3, {r1, sl}
    129c:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
    12a0:	00460803 	subeq	r0, r6, r3, lsl #16
    12a4:	06010402 	streq	r0, [r1], -r2, lsl #8
    12a8:	0850063c 	ldmdaeq	r0, {r2, r3, r4, r5, r9, sl}^
    12ac:	083d4b3e 	ldmdaeq	sp!, {r1, r2, r3, r4, r5, r8, r9, fp, lr}
    12b0:	08210821 	stmdaeq	r1!, {r0, r5, fp}
    12b4:	304b4d21 	subcc	r4, fp, r1, lsr #26
    12b8:	4b3e4b21 	blmi	f93f44 <startup-0x1f06c0bc>
    12bc:	4b3e4b3e 	blmi	f93fbc <startup-0x1f06c044>
    12c0:	033c7503 	teqeq	ip, #12582912	; 0xc00000
    12c4:	0230580e 	eorseq	r5, r0, #917504	; 0xe0000
    12c8:	0101000b 	tsteq	r1, fp
    12cc:	00000072 	andeq	r0, r0, r2, ror r0
    12d0:	005b0002 	subseq	r0, fp, r2
    12d4:	01020000 	mrseq	r0, (UNDEF: 2)
    12d8:	000d0efb 	strdeq	r0, [sp], -fp
    12dc:	01010101 	tsteq	r1, r1, lsl #2
    12e0:	01000000 	mrseq	r0, (UNDEF: 0)
    12e4:	43010000 	movwmi	r0, #4096	; 0x1000
    12e8:	6f6d2f3a 	svcvs	0x006d2f3a
    12ec:	2f632f70 	svccs	0x00632f70
    12f0:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    12f4:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    12f8:	6f697461 	svcvs	0x00697461
    12fc:	2f72656e 	svccs	0x0072656e
    1300:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    1304:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    1308:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    130c:	6d690000 	stclvs	0, cr0, [r9, #-0]
    1310:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
    1314:	00010063 	andeq	r0, r1, r3, rrx
    1318:	72707300 	rsbsvc	r7, r0, #0, 6
    131c:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
    1320:	00010068 	andeq	r0, r1, r8, rrx
    1324:	616d6900 	cmnvs	sp, r0, lsl #18
    1328:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
    132c:	00000100 	andeq	r0, r0, r0, lsl #2
    1330:	02050000 	andeq	r0, r5, #0
    1334:	20003cb8 			; <UNDEFINED> instruction: 0x20003cb8
    1338:	3d3d7514 	cfldr32cc	mvfx7, [sp, #-80]!	; 0xffffffb0
    133c:	0004023d 	andeq	r0, r4, sp, lsr r2
    1340:	00680101 	rsbeq	r0, r8, r1, lsl #2
    1344:	00020000 	andeq	r0, r2, r0
    1348:	00000051 	andeq	r0, r0, r1, asr r0
    134c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1350:	0101000d 	tsteq	r1, sp
    1354:	00000101 	andeq	r0, r0, r1, lsl #2
    1358:	00000100 	andeq	r0, r0, r0, lsl #2
    135c:	2f3a4301 	svccs	0x003a4301
    1360:	2f706f6d 	svccs	0x00706f6d
    1364:	6f4d2f63 	svcvs	0x004d2f63
    1368:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    136c:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    1370:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    1374:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1378:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    137c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1380:	0000432f 	andeq	r4, r0, pc, lsr #6
    1384:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
    1388:	632e6574 			; <UNDEFINED> instruction: 0x632e6574
    138c:	00000100 	andeq	r0, r0, r0, lsl #2
    1390:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
    1394:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
    1398:	00000100 	andeq	r0, r0, r0, lsl #2
    139c:	02050000 	andeq	r0, r5, #0
    13a0:	20003ce0 	andcs	r3, r0, r0, ror #25
    13a4:	3d3d7515 	cfldr32cc	mvfx7, [sp, #-84]!	; 0xffffffac
    13a8:	0004023d 	andeq	r0, r4, sp, lsr r2
    13ac:	006c0101 	rsbeq	r0, ip, r1, lsl #2
    13b0:	00020000 	andeq	r0, r2, r0
    13b4:	0000004d 	andeq	r0, r0, sp, asr #32
    13b8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    13bc:	0101000d 	tsteq	r1, sp
    13c0:	00000101 	andeq	r0, r0, r1, lsl #2
    13c4:	00000100 	andeq	r0, r0, r0, lsl #2
    13c8:	2f3a4301 	svccs	0x003a4301
    13cc:	2f706f6d 	svccs	0x00706f6d
    13d0:	6f4d2f63 	svcvs	0x004d2f63
    13d4:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    13d8:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    13dc:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    13e0:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    13e4:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    13e8:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    13ec:	0000432f 	andeq	r4, r0, pc, lsr #6
    13f0:	6f697067 	svcvs	0x00697067
    13f4:	0100632e 	tsteq	r0, lr, lsr #6
    13f8:	70670000 	rsbvc	r0, r7, r0
    13fc:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    1400:	00000100 	andeq	r0, r0, r0, lsl #2
    1404:	02050000 	andeq	r0, r5, #0
    1408:	20003d08 	andcs	r3, r0, r8, lsl #26
    140c:	763d2f15 	shadd16vc	r2, sp, r5
    1410:	693d592f 	ldmdbvs	sp!, {r0, r1, r2, r3, r5, r8, fp, ip, lr}
    1414:	3091674b 	addscc	r6, r1, fp, asr #14
    1418:	00040222 	andeq	r0, r4, r2, lsr #4
    141c:	015a0101 	cmpeq	sl, r1, lsl #2
    1420:	00020000 	andeq	r0, r2, r0
    1424:	00000081 	andeq	r0, r0, r1, lsl #1
    1428:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    142c:	0101000d 	tsteq	r1, sp
    1430:	00000101 	andeq	r0, r0, r1, lsl #2
    1434:	00000100 	andeq	r0, r0, r0, lsl #2
    1438:	2f3a4301 	svccs	0x003a4301
    143c:	2f706f6d 	svccs	0x00706f6d
    1440:	6f4d2f63 	svcvs	0x004d2f63
    1444:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    1448:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    144c:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    1450:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1454:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    1458:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    145c:	0000432f 	andeq	r4, r0, pc, lsr #6
    1460:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1464:	69645f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1468:	616c7073 	smcvs	50947	; 0xc703
    146c:	00632e79 	rsbeq	r2, r3, r9, ror lr
    1470:	73000001 	movwvc	r0, #1
    1474:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
    1478:	00682e65 	rsbeq	r2, r8, r5, ror #28
    147c:	69000001 	stmdbvs	r0, {r0}
    1480:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1484:	0100682e 	tsteq	r0, lr, lsr #16
    1488:	61670000 	cmnvs	r7, r0
    148c:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
    1490:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
    1494:	0100682e 	tsteq	r0, lr, lsr #16
    1498:	72670000 	rsbvc	r0, r7, #0
    149c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
    14a0:	682e7363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, ip, sp, lr}
    14a4:	00000100 	andeq	r0, r0, r0, lsl #2
    14a8:	02050000 	andeq	r0, r5, #0
    14ac:	20003d74 	andcs	r3, r0, r4, ror sp
    14b0:	69012e03 	stmdbvs	r1, {r0, r1, r9, sl, fp, sp}
    14b4:	6859bb59 	ldmdavs	r9, {r0, r3, r4, r6, r8, r9, fp, ip, sp, pc}^
    14b8:	13085969 	movwne	r5, #35177	; 0x8969
    14bc:	3d677659 	stclcc	6, cr7, [r7, #-356]!	; 0xfffffe9c
    14c0:	674c593d 	smlaldxvs	r5, ip, sp, r9
    14c4:	4c593d3d 	mrrcmi	13, 3, r3, r9, cr13
    14c8:	3d3d673e 	ldccc	7, cr6, [sp, #-248]!	; 0xffffff08
    14cc:	2f67675a 	svccs	0x0067675a
    14d0:	3d673e84 	stclcc	14, cr3, [r7, #-528]!	; 0xfffffdf0
    14d4:	67675a3d 			; <UNDEFINED> instruction: 0x67675a3d
    14d8:	3d67842f 	cfstrdcc	mvd8, [r7, #-188]!	; 0xffffff44
    14dc:	683d2f4b 	ldmdavs	sp!, {r0, r1, r3, r6, r8, r9, sl, fp, sp}
    14e0:	2f2f3d3e 	svccs	0x002f3d3e
    14e4:	762f3d4b 	strtvc	r3, [pc], -fp, asr #26
    14e8:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    14ec:	06200601 	strteq	r0, [r0], -r1, lsl #12
    14f0:	3d593d83 	ldclcc	13, cr3, [r9, #-524]	; 0xfffffdf4
    14f4:	4b67914c 	blmi	19e5a2c <startup-0x1e61a5d4>
    14f8:	304c9f76 	subcc	r9, ip, r6, ror pc
    14fc:	01040200 	mrseq	r0, R12_usr
    1500:	83062006 	movwhi	r2, #24582	; 0x6006
    1504:	003f3d3d 	eorseq	r3, pc, sp, lsr sp	; <UNPREDICTABLE>
    1508:	06010402 	streq	r0, [r1], -r2, lsl #8
    150c:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
    1510:	02003f3d 	andeq	r3, r0, #61, 30	; 0xf4
    1514:	20060104 	andcs	r0, r6, r4, lsl #2
    1518:	3d3d8306 	ldccc	3, cr8, [sp, #-24]!	; 0xffffffe8
    151c:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
    1520:	06200601 	strteq	r0, [r0], -r1, lsl #12
    1524:	3f3d3d83 	svccc	0x003d3d83
    1528:	843d343e 	ldrthi	r3, [sp], #-1086	; 0xfffffbc2
    152c:	3e2f2f2f 	cdpcc	15, 2, cr2, cr15, cr15, {1}
    1530:	4b2f843e 	blmi	be2630 <startup-0x1f41d9d0>
    1534:	2f4d7321 	svccs	0x004d7321
    1538:	4d73214b 	ldfmie	f2, [r3, #-300]!	; 0xfffffed4
    153c:	4b305968 	blmi	c17ae4 <startup-0x1f3e851c>
    1540:	4b4d7321 	blmi	135e1cc <startup-0x1eca1e34>
    1544:	4b4e7321 	blmi	139e1d0 <startup-0x1ec61e30>
    1548:	4b30754c 	blmi	c1ea80 <startup-0x1f3e1580>
    154c:	73213d2f 			; <UNDEFINED> instruction: 0x73213d2f
    1550:	01040200 	mrseq	r0, R12_usr
    1554:	6b064a06 	blvs	193d74 <startup-0x1fe6c28c>
    1558:	213d2f4b 	teqcs	sp, fp, asr #30
    155c:	04020073 	streq	r0, [r2], #-115	; 0xffffff8d
    1560:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    1564:	3e4e4b6b 	vmlscc.f64	d20, d14, d27
    1568:	2f2f6875 	svccs	0x002f6875
    156c:	73213d4b 			; <UNDEFINED> instruction: 0x73213d4b
    1570:	212f4b4d 			; <UNDEFINED> instruction: 0x212f4b4d
    1574:	02214d73 	eoreq	r4, r1, #7360	; 0x1cc0
    1578:	01010008 	tsteq	r1, r8
    157c:	00000076 	andeq	r0, r0, r6, ror r0
    1580:	00570002 	subseq	r0, r7, r2
    1584:	01020000 	mrseq	r0, (UNDEF: 2)
    1588:	000d0efb 	strdeq	r0, [sp], -fp
    158c:	01010101 	tsteq	r1, r1, lsl #2
    1590:	01000000 	mrseq	r0, (UNDEF: 0)
    1594:	43010000 	movwmi	r0, #4096	; 0x1000
    1598:	6f6d2f3a 	svcvs	0x006d2f3a
    159c:	2f632f70 	svccs	0x00632f70
    15a0:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    15a4:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    15a8:	6f697461 	svcvs	0x00697461
    15ac:	2f72656e 	svccs	0x0072656e
    15b0:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    15b4:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    15b8:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    15bc:	6c730000 	ldclvs	0, cr0, [r3], #-0
    15c0:	745f776f 	ldrbvc	r7, [pc], #-1903	; 15c8 <startup-0x1fffea38>
    15c4:	2e747865 	cdpcs	8, 7, cr7, cr4, cr5, {3}
    15c8:	00010063 	andeq	r0, r1, r3, rrx
    15cc:	6f6c7300 	svcvs	0x006c7300
    15d0:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
    15d4:	682e7478 	stmdavs	lr!, {r3, r4, r5, r6, sl, ip, sp, lr}
    15d8:	00000100 	andeq	r0, r0, r0, lsl #2
    15dc:	02050000 	andeq	r0, r5, #0
    15e0:	20004294 	mulcs	r0, r4, r2
    15e4:	c99f5915 	ldmibgt	pc, {r0, r2, r4, r8, fp, ip, lr}	; <UNPREDICTABLE>
    15e8:	754c5984 	strbvc	r5, [ip, #-2436]	; 0xfffff67c
    15ec:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    15f0:	0007023d 	andeq	r0, r7, sp, lsr r2
    15f4:	00d60101 	sbcseq	r0, r6, r1, lsl #2
    15f8:	00020000 	andeq	r0, r2, r0
    15fc:	000000ab 	andeq	r0, r0, fp, lsr #1
    1600:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1604:	0101000d 	tsteq	r1, sp
    1608:	00000101 	andeq	r0, r0, r1, lsl #2
    160c:	00000100 	andeq	r0, r0, r0, lsl #2
    1610:	2f3a4301 	svccs	0x003a4301
    1614:	2f706f6d 	svccs	0x00706f6d
    1618:	6f4d2f63 	svcvs	0x004d2f63
    161c:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    1620:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    1624:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    1628:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    162c:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    1630:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1634:	0000432f 	andeq	r4, r0, pc, lsr #6
    1638:	6f646e69 	svcvs	0x00646e69
    163c:	2e73726f 	cdpcs	2, 7, cr7, cr3, cr15, {3}
    1640:	00010063 	andeq	r0, r1, r3, rrx
    1644:	72707300 	rsbsvc	r7, r0, #0, 6
    1648:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
    164c:	00010068 	andeq	r0, r1, r8, rrx
    1650:	616d6900 	cmnvs	sp, r0, lsl #18
    1654:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
    1658:	00000100 	andeq	r0, r0, r0, lsl #2
    165c:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
    1660:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
    1664:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
    1668:	00000100 	andeq	r0, r0, r0, lsl #2
    166c:	6f646e69 	svcvs	0x00646e69
    1670:	5f73726f 	svcpl	0x0073726f
    1674:	63616c62 	cmnvs	r1, #25088	; 0x6200
    1678:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
    167c:	0001006d 	andeq	r0, r1, sp, rrx
    1680:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1684:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1688:	6172675f 	cmnvs	r2, pc, asr r7
    168c:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
    1690:	0001006d 	andeq	r0, r1, sp, rrx
    1694:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1698:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    169c:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
    16a0:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
    16a4:	01006d62 	tsteq	r0, r2, ror #26
    16a8:	00000000 	andeq	r0, r0, r0
    16ac:	43280205 			; <UNDEFINED> instruction: 0x43280205
    16b0:	13032000 	movwne	r2, #12288	; 0x3000
    16b4:	672f3e01 	strvs	r3, [pc, -r1, lsl #28]!
    16b8:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
    16bc:	083e672f 	ldmdaeq	lr!, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}
    16c0:	2f4b4c5a 	svccs	0x004b4c5a
    16c4:	3e934c3e 	mrccc	12, 4, r4, cr3, cr14, {1}
    16c8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    16cc:	01010008 	tsteq	r1, r8
    16d0:	000000da 	ldrdeq	r0, [r0], -sl
    16d4:	00af0002 	adceq	r0, pc, r2
    16d8:	01020000 	mrseq	r0, (UNDEF: 2)
    16dc:	000d0efb 	strdeq	r0, [sp], -fp
    16e0:	01010101 	tsteq	r1, r1, lsl #2
    16e4:	01000000 	mrseq	r0, (UNDEF: 0)
    16e8:	43010000 	movwmi	r0, #4096	; 0x1000
    16ec:	6f6d2f3a 	svcvs	0x006d2f3a
    16f0:	2f632f70 	svccs	0x00632f70
    16f4:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    16f8:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    16fc:	6f697461 	svcvs	0x00697461
    1700:	2f72656e 	svccs	0x0072656e
    1704:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    1708:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    170c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    1710:	6e690000 	cdpvs	0, 6, cr0, cr9, cr0, {0}
    1714:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1718:	632e3273 			; <UNDEFINED> instruction: 0x632e3273
    171c:	00000100 	andeq	r0, r0, r0, lsl #2
    1720:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
    1724:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
    1728:	00000100 	andeq	r0, r0, r0, lsl #2
    172c:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
    1730:	00682e65 	rsbeq	r2, r8, r5, ror #28
    1734:	67000001 	strvs	r0, [r0, -r1]
    1738:	6f656d61 	svcvs	0x00656d61
    173c:	63656a62 	cmnvs	r5, #401408	; 0x62000
    1740:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1744:	69000001 	stmdbvs	r0, {r0}
    1748:	6f6f646e 	svcvs	0x006f646e
    174c:	5f327372 	svcpl	0x00327372
    1750:	63616c62 	cmnvs	r1, #25088	; 0x6200
    1754:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
    1758:	0001006d 	andeq	r0, r1, sp, rrx
    175c:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1760:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1764:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
    1768:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
    176c:	01006d62 	tsteq	r0, r2, ror #26
    1770:	6e690000 	cdpvs	0, 6, cr0, cr9, cr0, {0}
    1774:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1778:	6c5f3273 	lfmvs	f3, 2, [pc], {115}	; 0x73
    177c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1780:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
    1784:	00000100 	andeq	r0, r0, r0, lsl #2
    1788:	02050000 	andeq	r0, r5, #0
    178c:	20004410 	andcs	r4, r0, r0, lsl r4
    1790:	3e011303 	cdpcc	3, 0, cr1, cr1, cr3, {0}
    1794:	2f3d672f 	svccs	0x003d672f
    1798:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
    179c:	4c5a083e 	mrrcmi	8, 3, r0, sl, cr14
    17a0:	4c3e2f4b 	ldcmi	15, cr2, [lr], #-300	; 0xfffffed4
    17a4:	3d3d3e93 	ldccc	14, cr3, [sp, #-588]!	; 0xfffffdb4
    17a8:	00083d3d 	andeq	r3, r8, sp, lsr sp
    17ac:	00d20101 	sbcseq	r0, r2, r1, lsl #2
    17b0:	00020000 	andeq	r0, r2, r0
    17b4:	000000a7 	andeq	r0, r0, r7, lsr #1
    17b8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    17bc:	0101000d 	tsteq	r1, sp
    17c0:	00000101 	andeq	r0, r0, r1, lsl #2
    17c4:	00000100 	andeq	r0, r0, r0, lsl #2
    17c8:	2f3a4301 	svccs	0x003a4301
    17cc:	2f706f6d 	svccs	0x00706f6d
    17d0:	6f4d2f63 	svcvs	0x004d2f63
    17d4:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    17d8:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    17dc:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    17e0:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    17e4:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    17e8:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    17ec:	0000432f 	andeq	r4, r0, pc, lsr #6
    17f0:	706f7274 	rsbvc	r7, pc, r4, ror r2	; <UNPREDICTABLE>
    17f4:	632e7968 			; <UNDEFINED> instruction: 0x632e7968
    17f8:	00000100 	andeq	r0, r0, r0, lsl #2
    17fc:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
    1800:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
    1804:	00000100 	andeq	r0, r0, r0, lsl #2
    1808:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
    180c:	00682e65 	rsbeq	r2, r8, r5, ror #28
    1810:	67000001 	strvs	r0, [r0, -r1]
    1814:	6f656d61 	svcvs	0x00656d61
    1818:	63656a62 	cmnvs	r5, #401408	; 0x62000
    181c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1820:	74000001 	strvc	r0, [r0], #-1
    1824:	68706f72 	ldmdavs	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    1828:	6c625f79 	stclvs	15, cr5, [r2], #-484	; 0xfffffe1c
    182c:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
    1830:	006d6278 	rsbeq	r6, sp, r8, ror r2
    1834:	74000001 	strvc	r0, [r0], #-1
    1838:	68706f72 	ldmdavs	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    183c:	72675f79 	rsbvc	r5, r7, #484	; 0x1e4
    1840:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
    1844:	01006d62 	tsteq	r0, r2, ror #26
    1848:	72740000 	rsbsvc	r0, r4, #0
    184c:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1850:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
    1854:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
    1858:	01006d62 	tsteq	r0, r2, ror #26
    185c:	00000000 	andeq	r0, r0, r0
    1860:	44f80205 	ldrbtmi	r0, [r8], #517	; 0x205
    1864:	13032000 	movwne	r2, #12288	; 0x3000
    1868:	672f3e01 	strvs	r3, [pc, -r1, lsl #28]!
    186c:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
    1870:	083e672f 	ldmdaeq	lr!, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}
    1874:	2f4b4c5a 	svccs	0x004b4c5a
    1878:	3e934c3e 	mrccc	12, 4, r4, cr3, cr14, {1}
    187c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    1880:	01010008 	tsteq	r1, r8

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
       4:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
       8:	67697254 			; <UNDEFINED> instruction: 0x67697254
       c:	00726567 	rsbseq	r6, r2, r7, ror #10
      10:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
      14:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
      18:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
      1c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
      20:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
      24:	5f336572 	svcpl	0x00336572
      28:	6f646e69 	svcvs	0x00646e69
      2c:	0073726f 	rsbseq	r7, r3, pc, ror #4
      30:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
      34:	616d4974 	smcvs	54420	; 0xd494
      38:	67006567 	strvs	r6, [r0, -r7, ror #10]
      3c:	49796172 	ldmdbmi	r9!, {r1, r4, r5, r6, r8, sp, lr}^
      40:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
      44:	73616300 	cmnvc	r1, #0, 6
      48:	5f656c74 	svcpl	0x00656c74
      4c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
      50:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
      54:	6c700073 	ldclvs	0, cr0, [r0], #-460	; 0xfffffe34
      58:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
      5c:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
      60:	726b5f74 	rsbvc	r5, fp, #116, 30	; 0x1d0
      64:	61670061 	cmnvs	r7, r1, rrx
      68:	6f5f656d 	svcvs	0x005f656d
      6c:	00726576 	rsbseq	r6, r2, r6, ror r5
      70:	72665f6e 	rsbvc	r5, r6, #440	; 0x1b8
      74:	73656d61 	cmnvc	r5, #6208	; 0x1840
      78:	73616300 	cmnvc	r1, #0, 6
      7c:	4c656c74 	stclmi	12, cr6, [r5], #-464	; 0xfffffe30
      80:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
      84:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
      88:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
      8c:	74003031 	strvc	r3, [r0], #-49	; 0xffffffcf
      90:	43706d65 	cmnmi	r0, #6464	; 0x1940
      94:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
      98:	616c4265 	cmnvs	ip, r5, ror #4
      9c:	47006b63 	strmi	r6, [r0, -r3, ror #22]
      a0:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
      a4:	36203939 			; <UNDEFINED> instruction: 0x36203939
      a8:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
      ac:	31303220 	teqcc	r0, r0, lsr #4
      b0:	31323037 	teqcc	r2, r7, lsr r0
      b4:	72282035 	eorvc	r2, r8, #53	; 0x35
      b8:	61656c65 	cmnvs	r5, r5, ror #24
      bc:	20296573 	eorcs	r6, r9, r3, ror r5
      c0:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
      c4:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
      c8:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
      cc:	2d362d64 	ldccs	13, cr2, [r6, #-400]!	; 0xfffffe70
      d0:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
      d4:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
      d8:	73697665 	cmnvc	r9, #105906176	; 0x6500000
      dc:	206e6f69 	rsbcs	r6, lr, r9, ror #30
      e0:	35353432 	ldrcc	r3, [r5, #-1074]!	; 0xfffffbce
      e4:	205d3231 	subscs	r3, sp, r1, lsr r2
      e8:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
      ec:	20626d75 	rsbcs	r6, r2, r5, ror sp
      f0:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
      f4:	613d6863 	teqvs	sp, r3, ror #16
      f8:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
      fc:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
     100:	6f6c666d 	svcvs	0x006c666d
     104:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
     108:	733d6962 	teqvc	sp, #1605632	; 0x188000
     10c:	2074666f 	rsbscs	r6, r4, pc, ror #12
     110:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
     114:	20626d75 	rsbcs	r6, r2, r5, ror sp
     118:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
     11c:	613d6863 	teqvs	sp, r3, ror #16
     120:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
     124:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
     128:	4f2d2067 	svcmi	0x002d2067
     12c:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
     130:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
     134:	6d003939 	vstrvs.16	s6, [r0, #-114]	; 0xffffff8e	; <UNPREDICTABLE>
     138:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     13c:	69007265 	stmdbvs	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     140:	6c635f73 	stclvs	15, cr5, [r3], #-460	; 0xfffffe34
     144:	69626d69 	stmdbvs	r2!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
     148:	7000676e 	andvc	r6, r0, lr, ror #14
     14c:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     150:	00377265 	eorseq	r7, r7, r5, ror #4
     154:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
     158:	624f656c 	subvs	r6, pc, #108, 10	; 0x1b000000
     15c:	7274006a 	rsbsvc	r0, r4, #106	; 0x6a
     160:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
     164:	7275625f 	rsbsvc	r6, r5, #-268435451	; 0xf0000005
     168:	0064656e 	rsbeq	r6, r4, lr, ror #10
     16c:	73657270 	cmnvc	r5, #112, 4
     170:	6c625f73 	stclvs	15, cr5, [r2], #-460	; 0xfffffe34
     174:	5f6b6361 	svcpl	0x006b6361
     178:	73746962 	cmnvc	r4, #1605632	; 0x188000
     17c:	72696600 	rsbvc	r6, r9, #0, 12
     180:	695f3165 	ldmdbvs	pc, {r0, r2, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     184:	6f6f646e 	svcvs	0x006f646e
     188:	63007372 	movwvs	r7, #882	; 0x372
     18c:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
     190:	616d4965 	cmnvs	sp, r5, ror #18
     194:	00736567 	rsbseq	r6, r3, r7, ror #10
     198:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     19c:	616d4965 	cmnvs	sp, r5, ror #18
     1a0:	73006567 	movwvc	r6, #1383	; 0x567
     1a4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     1a8:	74007075 	strvc	r7, [r0], #-117	; 0xffffff8b
     1ac:	31747865 	cmncc	r4, r5, ror #16
     1b0:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     1b4:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     1b8:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     1bc:	69740074 	ldmdbvs	r4!, {r2, r4, r5, r6}^
     1c0:	5f656c74 	svcpl	0x00656c74
     1c4:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     1c8:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     1cc:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     1d0:	4d706d65 	ldclmi	13, cr6, [r0, #-404]!	; 0xfffffe6c
     1d4:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     1d8:	72477265 	subvc	r7, r7, #1342177286	; 0x50000006
     1dc:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     1e0:	32747865 	rsbscc	r7, r4, #6619136	; 0x650000
     1e4:	65727000 	ldrbvs	r7, [r2, #-0]!
     1e8:	72477373 	subvc	r7, r7, #-872415231	; 0xcc000001
     1ec:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     1f0:	34747865 	ldrbtcc	r7, [r4], #-2149	; 0xfffff79b
     1f4:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     1f8:	66003574 			; <UNDEFINED> instruction: 0x66003574
     1fc:	31657269 	cmncc	r5, r9, ror #4
     200:	73616800 	cmnvc	r1, #0, 16
     204:	696c635f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
     208:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
     20c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     210:	00674270 	rsbeq	r4, r7, r0, ror r2
     214:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     218:	65740033 	ldrbvs	r0, [r4, #-51]!	; 0xffffffcd
     21c:	00387478 	eorseq	r7, r8, r8, ror r4
     220:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     224:	6c625f65 	stclvs	15, cr5, [r2], #-404	; 0xfffffe6c
     228:	5f6b6361 	svcpl	0x006b6361
     22c:	73746962 	cmnvc	r4, #1605632	; 0x188000
     230:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     234:	6e6f4d70 	mcrvs	13, 3, r4, cr15, cr0, {3}
     238:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     23c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     240:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
     244:	00377478 	eorseq	r7, r7, r8, ror r4
     248:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
     24c:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     250:	5f726566 	svcpl	0x00726566
     254:	63616c62 	cmnvs	r1, #25088	; 0x6200
     258:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
     25c:	00367478 	eorseq	r7, r6, r8, ror r4
     260:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     264:	6f6d0039 	svcvs	0x006d0039
     268:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     26c:	696f5072 	stmdbvs	pc!, {r1, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
     270:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     274:	6f6d0032 	svcvs	0x006d0032
     278:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     27c:	696f5072 	stmdbvs	pc!, {r1, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
     280:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     284:	6f720033 	svcvs	0x00720033
     288:	64003277 	strvs	r3, [r0], #-631	; 0xfffffd89
     28c:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
     290:	6d007961 	vstrvs.16	s14, [r0, #-194]	; 0xffffff3e	; <UNPREDICTABLE>
     294:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     298:	625f7265 	subsvs	r7, pc, #1342177286	; 0x50000006
     29c:	6b63616c 	blvs	18d8854 <startup-0x1e7277ac>
     2a0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     2a4:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
     2a8:	615f7469 	cmpvs	pc, r9, ror #8
     2ac:	6c007070 	stcvs	0, cr7, [r0], {112}	; 0x70
     2b0:	5f676e6f 	svcpl	0x00676e6f
     2b4:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     2b8:	65727000 	ldrbvs	r7, [r2, #-0]!
     2bc:	624f7373 	subvs	r7, pc, #-872415231	; 0xcc000001
     2c0:	6966006a 	stmdbvs	r6!, {r1, r3, r5, r6}^
     2c4:	5f326572 	svcpl	0x00326572
     2c8:	6f646e69 	svcvs	0x00646e69
     2cc:	0073726f 	rsbseq	r7, r3, pc, ror #4
     2d0:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
     2d4:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     2d8:	5f726566 	svcpl	0x00726566
     2dc:	63616c62 	cmnvs	r1, #25088	; 0x6200
     2e0:	72675f6b 	rsbvc	r5, r7, #428	; 0x1ac
     2e4:	6c5f7961 	mrrcvs	9, 6, r7, pc, cr1	; <UNPREDICTABLE>
     2e8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     2ec:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     2f0:	72745f74 	rsbsvc	r5, r4, #116, 30	; 0x1d0
     2f4:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
     2f8:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     2fc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     300:	6f700035 	svcvs	0x00700035
     304:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     308:	64003672 	strvs	r3, [r0], #-1650	; 0xfffff98e
     30c:	61747369 	cmnvs	r4, r9, ror #6
     310:	5f65636e 	svcpl	0x0065636e
     314:	72696168 	rsbvc	r6, r9, #104, 2
     318:	6f72745f 	svcvs	0x0072745f
     31c:	00796870 	rsbseq	r6, r9, r0, ror r8
     320:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     324:	38726574 	ldmdacc	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     328:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     32c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     330:	65740039 	ldrbvs	r0, [r4, #-57]!	; 0xffffffc7
     334:	6143706d 	cmpvs	r3, sp, rrx
     338:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     33c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     340:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
     344:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
     348:	73696400 	cmnvc	r9, #0, 8
     34c:	636e6174 	cmnvs	lr, #116, 2
     350:	61685f65 	cmnvs	r8, r5, ror #30
     354:	445f7269 	ldrbmi	r7, [pc], #-617	; 35c <startup-0x1ffffca4>
     358:	77005049 	strvc	r5, [r0, -r9, asr #32]
     35c:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
     360:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     364:	6f625f74 	svcvs	0x00625f74
     368:	64006d6f 	strvs	r6, [r0], #-3439	; 0xfffff291
     36c:	5f776172 	svcpl	0x00776172
     370:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     374:	625f7265 	subsvs	r7, pc, #1342177286	; 0x50000006
     378:	6b63616c 	blvs	18d8930 <startup-0x1e7276d0>
     37c:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     380:	73007468 	movwvc	r7, #1128	; 0x468
     384:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
     388:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     38c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     390:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     394:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
     398:	5f79616c 	svcpl	0x0079616c
     39c:	69746e75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     3a0:	65745f6c 	ldrbvs	r5, [r4, #-3948]!	; 0xfffff094
     3a4:	74007478 	strvc	r7, [r0], #-1144	; 0xfffffb88
     3a8:	4d706d65 	ldclmi	13, cr6, [r0, #-404]!	; 0xfffffe6c
     3ac:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     3b0:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
     3b4:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     3b8:	63616c42 	cmnvs	r1, #16896	; 0x4200
     3bc:	7270006b 	rsbsvc	r0, r0, #107	; 0x6b
     3c0:	5f737365 	svcpl	0x00737365
     3c4:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     3c8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     3cc:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
     3d0:	665f7469 	ldrbvs	r7, [pc], -r9, ror #8
     3d4:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
     3d8:	696e6100 	stmdbvs	lr!, {r8, sp, lr}^
     3dc:	6974616d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     3e0:	735f6e6f 	cmpvc	pc, #1776	; 0x6f0
     3e4:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     3e8:	696e6100 	stmdbvs	lr!, {r8, sp, lr}^
     3ec:	6974616d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     3f0:	635f6e6f 	cmpvs	pc, #1776	; 0x6f0
     3f4:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     3f8:	6d007265 	sfmvs	f7, 4, [r0, #-404]	; 0xfffffe6c
     3fc:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     400:	624f7265 	subvs	r7, pc, #1342177286	; 0x50000006
     404:	6973006a 	ldmdbvs	r3!, {r1, r3, r5, r6}^
     408:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
     40c:	74006570 	strvc	r6, [r0], #-1392	; 0xfffffa90
     410:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     414:	6172675f 	cmnvs	r2, pc, asr r7
     418:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     41c:	68007374 	stmdavs	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
     420:	00726961 	rsbseq	r6, r2, r1, ror #18
     424:	6d61476e 	stclvs	7, cr4, [r1, #-440]!	; 0xfffffe48
     428:	6a624f65 	bvs	18941c4 <startup-0x1e76be3c>
     42c:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
     430:	65727000 	ldrbvs	r7, [r2, #-0]!
     434:	6c5f7373 	mrrcvs	3, 7, r7, pc, cr3	; <UNPREDICTABLE>
     438:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     43c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     440:	6f700073 	svcvs	0x00700073
     444:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     448:	70003472 	andvc	r3, r0, r2, ror r4
     44c:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     450:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     454:	6d690065 	stclvs	0, cr0, [r9, #-404]!	; 0xfffffe6c
     458:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     45c:	6f687300 	svcvs	0x00687300
     460:	745f7472 	ldrbvc	r7, [pc], #-1138	; 468 <startup-0x1ffffb98>
     464:	00747865 	rsbseq	r7, r4, r5, ror #16
     468:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
     46c:	5f746e65 	svcpl	0x00746e65
     470:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
     474:	69740065 	ldmdbvs	r4!, {r0, r2, r5, r6}^
     478:	4c656c74 	stclmi	12, cr6, [r5], #-464	; 0xfffffe30
     47c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     480:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     484:	65725070 	ldrbvs	r5, [r2, #-112]!	; 0xffffff90
     488:	72477373 	subvc	r7, r7, #-872415231	; 0xcc000001
     48c:	6d007961 	vstrvs.16	s14, [r0, #-194]	; 0xffffff3e	; <UNPREDICTABLE>
     490:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     494:	6f507265 	svcvs	0x00507265
     498:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     49c:	6e690072 	mcrvs	0, 3, r0, cr9, cr2, {3}
     4a0:	70537469 	subsvc	r7, r3, r9, ror #8
     4a4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     4a8:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     4ac:	6143706d 	cmpvs	r3, sp, rrx
     4b0:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     4b4:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     4b8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     4bc:	74695470 	strbtvc	r5, [r9], #-1136	; 0xfffffb90
     4c0:	6c42656c 	cfstr64vs	mvdx6, [r2], {108}	; 0x6c
     4c4:	006b6361 	rsbeq	r6, fp, r1, ror #6
     4c8:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     4cc:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     4d0:	61686320 	cmnvs	r8, r0, lsr #6
     4d4:	72640072 	rsbvc	r0, r4, #114	; 0x72
     4d8:	625f7761 	subsvs	r7, pc, #25427968	; 0x1840000
     4dc:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     4e0:	6c625f72 	stclvs	15, cr5, [r2], #-456	; 0xfffffe38
     4e4:	5f6b6361 	svcpl	0x006b6361
     4e8:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     4ec:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     4f0:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     4f4:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     4f8:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     4fc:	00737469 	rsbseq	r7, r3, r9, ror #8
     500:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
     504:	625f656c 	subsvs	r6, pc, #108, 10	; 0x1b000000
     508:	6b63616c 	blvs	18d8ac0 <startup-0x1e727540>
     50c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     510:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
     514:	4f656c74 	svcmi	0x00656c74
     518:	43006a62 	movwmi	r6, #2658	; 0xa62
     51c:	6f6d2f3a 	svcvs	0x006d2f3a
     520:	2f632f70 	svccs	0x00632f70
     524:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     528:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     52c:	6f697461 	svcvs	0x00697461
     530:	2f72656e 	svccs	0x0072656e
     534:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     538:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     53c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     540:	6174732f 	cmnvs	r4, pc, lsr #6
     544:	70757472 	rsbsvc	r7, r5, r2, ror r4
     548:	6700632e 	strvs	r6, [r0, -lr, lsr #6]
     54c:	4f656d61 	svcmi	0x00656d61
     550:	63656a62 	cmnvs	r5, #401408	; 0x62000
     554:	63007374 	movwvs	r7, #884	; 0x374
     558:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
     55c:	61724765 	cmnvs	r2, r5, ror #14
     560:	6f6d0079 	svcvs	0x006d0079
     564:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     568:	61724772 	cmnvs	r2, r2, ror r7
     56c:	69740079 	ldmdbvs	r4!, {r0, r3, r4, r5, r6}^
     570:	47656c74 			; <UNDEFINED> instruction: 0x47656c74
     574:	00796172 	rsbseq	r6, r9, r2, ror r1
     578:	5f504944 	svcpl	0x00504944
     57c:	6e727562 	cdpvs	5, 7, cr7, cr2, cr2, {3}
     580:	63006465 	movwvs	r6, #1125	; 0x465
     584:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
     588:	735f746e 	cmpvc	pc, #1845493760	; 0x6e000000
     58c:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
     590:	6964006e 	stmdbvs	r4!, {r1, r2, r3, r5, r6}^
     594:	6e617473 	mcrvs	4, 3, r7, cr1, cr3, {3}
     598:	705f6563 	subsvc	r6, pc, r3, ror #10
     59c:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
     5a0:	69665f72 	stmdbvs	r6!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     5a4:	74006572 	strvc	r6, [r0], #-1394	; 0xfffffa8e
     5a8:	50706d65 	rsbspl	r6, r0, r5, ror #26
     5ac:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     5b0:	63616c42 	cmnvs	r1, #16896	; 0x4200
     5b4:	6762006b 	strbvs	r0, [r2, -fp, rrx]!
     5b8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     5bc:	6c620073 	stclvs	0, cr0, [r2], #-460	; 0xfffffe34
     5c0:	496b6361 	stmdbmi	fp!, {r0, r5, r6, r8, r9, sp, lr}^
     5c4:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     5c8:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     5cc:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     5d0:	6172675f 	cmnvs	r2, pc, asr r7
     5d4:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     5d8:	63007374 	movwvs	r7, #884	; 0x374
     5dc:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
     5e0:	616d4965 	cmnvs	sp, r5, ror #18
     5e4:	66006567 	strvs	r6, [r0], -r7, ror #10
     5e8:	74737269 	ldrbtvc	r7, [r3], #-617	; 0xfffffd97
     5ec:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     5f0:	6d49656c 	cfstr64vs	mvdx6, [r9, #-432]	; 0xfffffe50
     5f4:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     5f8:	6e617200 	cdpvs	2, 6, cr7, cr1, cr0, {0}
     5fc:	5f6d6f64 	svcpl	0x006d6f64
     600:	64656573 	strbtvs	r6, [r5], #-1395	; 0xfffffa8d
     604:	72696600 	rsbvc	r6, r9, #0, 12
     608:	66003265 	strvs	r3, [r0], -r5, ror #4
     60c:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     610:	72696600 	rsbvc	r6, r9, #0, 12
     614:	70003465 	andvc	r3, r0, r5, ror #8
     618:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     61c:	63616c42 	cmnvs	r1, #16896	; 0x4200
     620:	6f6d006b 	svcvs	0x006d006b
     624:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     628:	616d4972 	smcvs	54418	; 0xd492
     62c:	79006567 	stmdbvc	r0, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     630:	00736f50 	rsbseq	r6, r3, r0, asr pc
     634:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
     638:	696c635f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
     63c:	765f626d 	ldrbvc	r6, [pc], -sp, ror #4
     640:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     644:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     648:	00323174 	eorseq	r3, r2, r4, ror r1
     64c:	706d6574 	rsbvc	r6, sp, r4, ror r5
     650:	6c746954 			; <UNDEFINED> instruction: 0x6c746954
     654:	67694c65 	strbvs	r4, [r9, -r5, ror #24]!
     658:	75007468 	strvc	r7, [r0, #-1128]	; 0xfffffb98
     65c:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
     660:	6f6e0065 	svcvs	0x006e0065
     664:	5049445f 	subpl	r4, r9, pc, asr r4
     668:	65727000 	ldrbvs	r7, [r2, #-0]!
     66c:	6d497373 	stclvs	3, cr7, [r9, #-460]	; 0xfffffe34
     670:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     674:	70786500 	rsbsvc	r6, r8, r0, lsl #10
     678:	69646f6c 	stmdbvs	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     67c:	7400676e 	strvc	r6, [r0], #-1902	; 0xfffff892
     680:	54706d65 	ldrbtpl	r6, [r0], #-3429	; 0xfffff29b
     684:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     688:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     68c:	6c537400 	cfldrdvs	mvd7, [r3], {-0}
     690:	6554776f 	ldrbvs	r7, [r4, #-1903]	; 0xfffff891
     694:	75007478 	strvc	r7, [r0, #-1144]	; 0xfffffb88
     698:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     69c:	6600745f 			; <UNDEFINED> instruction: 0x6600745f
     6a0:	73657269 	cmnvc	r5, #-1879048186	; 0x90000006
     6a4:	63616200 	cmnvs	r1, #0, 4
     6a8:	6675426b 	ldrbtvs	r4, [r5], -fp, ror #4
     6ac:	4c726566 	cfldr64mi	mvdx6, [r2], #-408	; 0xfffffe68
     6b0:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     6b4:	63616200 	cmnvs	r1, #0, 4
     6b8:	6675426b 	ldrbtvs	r4, [r5], -fp, ror #4
     6bc:	47726566 	ldrbmi	r6, [r2, -r6, ror #10]!
     6c0:	00796172 	rsbseq	r6, r9, r2, ror r1
     6c4:	706d6574 	rsbvc	r6, sp, r4, ror r5
     6c8:	73657250 	cmnvc	r5, #80, 4
     6cc:	67694c73 			; <UNDEFINED> instruction: 0x67694c73
     6d0:	74007468 	strvc	r7, [r0], #-1128	; 0xfffffb98
     6d4:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
     6d8:	656a624f 	strbvs	r6, [sl, #-591]!	; 0xfffffdb1
     6dc:	78007463 	stmdavc	r0, {r0, r1, r5, r6, sl, ip, sp, lr}
     6e0:	00736f50 	rsbseq	r6, r3, r0, asr pc
     6e4:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
     6e8:	6c42656c 	cfstr64vs	mvdx6, [r2], {108}	; 0x6c
     6ec:	006b6361 	rsbeq	r6, fp, r1, ror #6
     6f0:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     6f4:	65766f5f 	ldrbvs	r6, [r6, #-3935]!	; 0xfffff0a1
     6f8:	64615f72 	strbtvs	r5, [r1], #-3954	; 0xfffff08e
     6fc:	00726564 	rsbseq	r6, r2, r4, ror #10
     700:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     704:	74003031 	strvc	r3, [r0], #-49	; 0xffffffcf
     708:	31747865 	cmncc	r4, r5, ror #16
     70c:	65680031 	strbvs	r0, [r8, #-49]!	; 0xffffffcf
     710:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     714:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     718:	7270006e 	rsbsvc	r0, r0, #110	; 0x6e
     71c:	4c737365 	ldclmi	3, cr7, [r3], #-404	; 0xfffffe6c
     720:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     724:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     728:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     72c:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     730:	67007365 	strvs	r7, [r0, -r5, ror #6]
     734:	4f656d61 	svcmi	0x00656d61
     738:	63656a62 	cmnvs	r5, #401408	; 0x62000
     73c:	64705574 	ldrbtvs	r5, [r0], #-1396	; 0xfffffa8c
     740:	00657461 	rsbeq	r7, r5, r1, ror #8
     744:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     748:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     74c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     750:	6f62616c 	svcvs	0x0062616c
     754:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     758:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     75c:	5049442f 	subpl	r4, r9, pc, lsr #8
     760:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     764:	2f686374 	svccs	0x00686374
     768:	61672f43 	cmnvs	r7, r3, asr #30
     76c:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
     770:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     774:	7400632e 	strvc	r6, [r0], #-814	; 0xfffffcd2
     778:	00736968 	rsbseq	r6, r3, r8, ror #18
     77c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     780:	61724735 	cmnvs	r2, r5, lsr r7
     784:	69660079 	stmdbvs	r6!, {r0, r3, r4, r5, r6}^
     788:	47316572 			; <UNDEFINED> instruction: 0x47316572
     78c:	00796172 	rsbseq	r6, r9, r2, ror r1
     790:	706d6574 	rsbvc	r6, sp, r4, ror r5
     794:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     798:	61724732 	cmnvs	r2, r2, lsr r7
     79c:	69660079 	stmdbvs	r6!, {r0, r3, r4, r5, r6}^
     7a0:	47336572 			; <UNDEFINED> instruction: 0x47336572
     7a4:	00796172 	rsbseq	r6, r9, r2, ror r1
     7a8:	706d6574 	rsbvc	r6, sp, r4, ror r5
     7ac:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     7b0:	61724734 	cmnvs	r2, r4, lsr r7
     7b4:	69660079 	stmdbvs	r6!, {r0, r3, r4, r5, r6}^
     7b8:	6c426572 	cfstr64vs	mvdx6, [r2], {114}	; 0x72
     7bc:	006b6361 	rsbeq	r6, fp, r1, ror #6
     7c0:	706d6574 	rsbvc	r6, sp, r4, ror r5
     7c4:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     7c8:	61724733 	cmnvs	r2, r3, lsr r7
     7cc:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     7d0:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     7d4:	6c426572 	cfstr64vs	mvdx6, [r2], {114}	; 0x72
     7d8:	006b6361 	rsbeq	r6, fp, r1, ror #6
     7dc:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     7e0:	67694c31 			; <UNDEFINED> instruction: 0x67694c31
     7e4:	66007468 	strvs	r7, [r0], -r8, ror #8
     7e8:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
     7ec:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     7f0:	69660074 	stmdbvs	r6!, {r2, r4, r5, r6}^
     7f4:	5f326572 	svcpl	0x00326572
     7f8:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     7fc:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     800:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     804:	5f346572 	svcpl	0x00346572
     808:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     80c:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     810:	66007374 			; <UNDEFINED> instruction: 0x66007374
     814:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     818:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     81c:	6f700074 	svcvs	0x00700074
     820:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     824:	70003172 	andvc	r3, r0, r2, ror r1
     828:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     82c:	00337265 	eorseq	r7, r3, r5, ror #4
     830:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     834:	72675f35 	rsbvc	r5, r7, #53, 30	; 0xd4
     838:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     83c:	00737469 	rsbseq	r7, r3, r9, ror #8
     840:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     844:	616d4933 	cmnvs	sp, r3, lsr r9
     848:	70006567 	andvc	r6, r0, r7, ror #10
     84c:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     850:	00307265 	eorseq	r7, r0, r5, ror #4
     854:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     858:	67694c35 			; <UNDEFINED> instruction: 0x67694c35
     85c:	70007468 	andvc	r7, r0, r8, ror #8
     860:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     864:	00327265 	eorseq	r7, r2, r5, ror #4
     868:	706d6574 	rsbvc	r6, sp, r4, ror r5
     86c:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     870:	61724735 	cmnvs	r2, r5, lsr r7
     874:	69660079 	stmdbvs	r6!, {r0, r3, r4, r5, r6}^
     878:	5f316572 	svcpl	0x00316572
     87c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     880:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     884:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     888:	4c326572 	cfldr32mi	mvfx6, [r2], #-456	; 0xfffffe38
     88c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     890:	72696600 	rsbvc	r6, r9, #0, 12
     894:	6c5f3165 	ldfvse	f3, [pc], {101}	; 0x65
     898:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     89c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     8a0:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     8a4:	5f326572 	svcpl	0x00326572
     8a8:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     8ac:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     8b0:	66007374 			; <UNDEFINED> instruction: 0x66007374
     8b4:	4f657269 	svcmi	0x00657269
     8b8:	66006a62 	strvs	r6, [r0], -r2, ror #20
     8bc:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
     8c0:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     8c4:	72696600 	rsbvc	r6, r9, #0, 12
     8c8:	675f3465 	ldrbvs	r3, [pc, -r5, ror #8]
     8cc:	5f796172 	svcpl	0x00796172
     8d0:	73746962 	cmnvc	r4, #1605632	; 0x188000
     8d4:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     8d8:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     8dc:	694c3365 	stmdbvs	ip, {r0, r2, r5, r6, r8, r9, ip, sp}^
     8e0:	00746867 	rsbseq	r6, r4, r7, ror #16
     8e4:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     8e8:	616d4934 	cmnvs	sp, r4, lsr r9
     8ec:	74006567 	strvc	r6, [r0], #-1383	; 0xfffffa99
     8f0:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
     8f4:	31657269 	cmncc	r5, r9, ror #4
     8f8:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     8fc:	69660074 	stmdbvs	r6!, {r2, r4, r5, r6}^
     900:	54747372 	ldrbtpl	r7, [r4], #-882	; 0xfffffc8e
     904:	00656d69 	rsbeq	r6, r5, r9, ror #26
     908:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     90c:	7269665f 	rsbvc	r6, r9, #99614720	; 0x5f00000
     910:	69660065 	stmdbvs	r6!, {r0, r2, r5, r6}^
     914:	5f356572 	svcpl	0x00356572
     918:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     91c:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     920:	66007374 			; <UNDEFINED> instruction: 0x66007374
     924:	49657269 	stmdbmi	r5!, {r0, r3, r5, r6, r9, ip, sp, lr}^
     928:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     92c:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     930:	49316572 	ldmdbmi	r1!, {r1, r4, r5, r6, r8, sl, sp, lr}
     934:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     938:	72696600 	rsbvc	r6, r9, #0, 12
     93c:	72473465 	subvc	r3, r7, #1694498816	; 0x65000000
     940:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     944:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
     948:	31657269 	cmncc	r5, r9, ror #4
     94c:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     950:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     954:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     958:	694c3465 	stmdbvs	ip, {r0, r2, r5, r6, sl, ip, sp}^
     95c:	00746867 	rsbseq	r6, r4, r7, ror #16
     960:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     964:	696c5f33 	stmdbvs	ip!, {r0, r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     968:	5f746867 	svcpl	0x00746867
     96c:	73746962 	cmnvc	r4, #1605632	; 0x188000
     970:	72696600 	rsbvc	r6, r9, #0, 12
     974:	6d493565 	cfstr64vs	mvdx3, [r9, #-404]	; 0xfffffe6c
     978:	00656761 	rsbeq	r6, r5, r1, ror #14
     97c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     980:	616c625f 	cmnvs	ip, pc, asr r2
     984:	325f6b63 	subscc	r6, pc, #101376	; 0x18c00
     988:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     98c:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     990:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     994:	4c326572 	cfldr32mi	mvfx6, [r2], #-456	; 0xfffffe38
     998:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     99c:	72696600 	rsbvc	r6, r9, #0, 12
     9a0:	6d493265 	sfmvs	f3, 2, [r9, #-404]	; 0xfffffe6c
     9a4:	00656761 	rsbeq	r6, r5, r1, ror #14
     9a8:	706d6574 	rsbvc	r6, sp, r4, ror r5
     9ac:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     9b0:	67694c35 			; <UNDEFINED> instruction: 0x67694c35
     9b4:	43007468 	movwmi	r7, #1128	; 0x468
     9b8:	6f6d2f3a 	svcvs	0x006d2f3a
     9bc:	2f632f70 	svccs	0x00632f70
     9c0:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     9c4:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     9c8:	6f697461 	svcvs	0x00697461
     9cc:	2f72656e 	svccs	0x0072656e
     9d0:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     9d4:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     9d8:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     9dc:	7269662f 	rsbvc	r6, r9, #49283072	; 0x2f00000
     9e0:	00632e65 	rsbeq	r2, r3, r5, ror #28
     9e4:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     9e8:	72675f33 	rsbvc	r5, r7, #51, 30	; 0xcc
     9ec:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     9f0:	00737469 	rsbseq	r7, r3, r9, ror #8
     9f4:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
     9f8:	68676952 	stmdavs	r7!, {r1, r4, r6, r8, fp, sp, lr}^
     9fc:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
     a00:	6c006575 	cfstr32vs	mvfx6, [r0], {117}	; 0x75
     a04:	4a747361 	bmi	1d1d790 <startup-0x1e2e2870>
     a08:	56706d75 			; <UNDEFINED> instruction: 0x56706d75
     a0c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     a10:	70537900 	subsvc	r7, r3, r0, lsl #18
     a14:	00646565 	rsbeq	r6, r4, r5, ror #10
     a18:	65705378 	ldrbvs	r5, [r0, #-888]!	; 0xfffffc88
     a1c:	6c006465 	cfstrsvs	mvf6, [r0], {101}	; 0x65
     a20:	4c747361 	ldclmi	3, cr7, [r4], #-388	; 0xfffffe7c
     a24:	56746665 	ldrbtpl	r6, [r4], -r5, ror #12
     a28:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     a2c:	2f3a4300 	svccs	0x003a4300
     a30:	2f706f6d 	svccs	0x00706f6d
     a34:	6f4d2f63 	svcvs	0x004d2f63
     a38:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     a3c:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     a40:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     a44:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     a48:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     a4c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     a50:	702f432f 	eorvc	r4, pc, pc, lsr #6
     a54:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
     a58:	00632e72 	rsbeq	r2, r3, r2, ror lr
     a5c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
     a60:	70557265 	subsvc	r7, r5, r5, ror #4
     a64:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
     a68:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     a6c:	72694270 	rsbvc	r4, r9, #112, 4
     a70:	694c3264 	stmdbvs	ip, {r2, r5, r6, r9, ip, sp}^
     a74:	00746867 	rsbseq	r6, r4, r7, ror #16
     a78:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     a7c:	696c5f33 	stmdbvs	ip!, {r0, r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     a80:	5f746867 	svcpl	0x00746867
     a84:	73746962 	cmnvc	r4, #1605632	; 0x188000
     a88:	72696200 	rsbvc	r6, r9, #0, 4
     a8c:	6d493464 	cfstrdvs	mvd3, [r9, #-400]	; 0xfffffe70
     a90:	00656761 	rsbeq	r6, r5, r1, ror #14
     a94:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     a98:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     a9c:	5f746867 	svcpl	0x00746867
     aa0:	73746962 	cmnvc	r4, #1605632	; 0x188000
     aa4:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     aa8:	72694270 	rsbvc	r4, r9, #112, 4
     aac:	694c3564 	stmdbvs	ip, {r2, r5, r6, r8, sl, ip, sp}^
     ab0:	00746867 	rsbseq	r6, r4, r7, ror #16
     ab4:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     ab8:	31726574 	cmncc	r2, r4, ror r5
     abc:	69620034 	stmdbvs	r2!, {r2, r4, r5}^
     ac0:	5f356472 	svcpl	0x00356472
     ac4:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     ac8:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     acc:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     ad0:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     ad4:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     ad8:	6f700074 	svcvs	0x00700074
     adc:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     ae0:	00393172 	eorseq	r3, r9, r2, ror r1
     ae4:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     ae8:	67694c31 			; <UNDEFINED> instruction: 0x67694c31
     aec:	62007468 	andvs	r7, r0, #104, 8	; 0x68000000
     af0:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     af4:	63616c42 	cmnvs	r1, #16896	; 0x4200
     af8:	6962006b 	stmdbvs	r2!, {r0, r1, r3, r5, r6}^
     afc:	47316472 			; <UNDEFINED> instruction: 0x47316472
     b00:	00796172 	rsbseq	r6, r9, r2, ror r1
     b04:	706d6574 	rsbvc	r6, sp, r4, ror r5
     b08:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     b0c:	616c4234 	cmnvs	ip, r4, lsr r2
     b10:	62006b63 	andvs	r6, r0, #101376	; 0x18c00
     b14:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     b18:	63616c42 	cmnvs	r1, #16896	; 0x4200
     b1c:	6f70006b 	svcvs	0x0070006b
     b20:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     b24:	00303272 	eorseq	r3, r0, r2, ror r2
     b28:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     b2c:	32726574 	rsbscc	r6, r2, #116, 10	; 0x1d000000
     b30:	69620031 	stmdbvs	r2!, {r0, r4, r5}^
     b34:	47346472 			; <UNDEFINED> instruction: 0x47346472
     b38:	00796172 	rsbseq	r6, r9, r2, ror r1
     b3c:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     b40:	616c4232 	cmnvs	ip, r2, lsr r2
     b44:	70006b63 	andvc	r6, r0, r3, ror #22
     b48:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     b4c:	34327265 	ldrtcc	r7, [r2], #-613	; 0xfffffd9b
     b50:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     b54:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     b58:	74003631 	strvc	r3, [r0], #-1585	; 0xfffff9cf
     b5c:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     b60:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     b64:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     b68:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     b6c:	72694270 	rsbvc	r4, r9, #112, 4
     b70:	72473464 	subvc	r3, r7, #100, 8	; 0x64000000
     b74:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     b78:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     b7c:	4c647269 	sfmmi	f7, 2, [r4], #-420	; 0xfffffe5c
     b80:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     b84:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     b88:	72694270 	rsbvc	r4, r9, #112, 4
     b8c:	72473564 	subvc	r3, r7, #100, 10	; 0x19000000
     b90:	70007961 	andvc	r7, r0, r1, ror #18
     b94:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     b98:	33317265 	teqcc	r1, #1342177286	; 0x50000006
     b9c:	72696200 	rsbvc	r6, r9, #0, 4
     ba0:	625f3264 	subsvs	r3, pc, #100, 4	; 0x40000006
     ba4:	6b63616c 	blvs	18d915c <startup-0x1e726ea4>
     ba8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     bac:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
     bb0:	5f316472 	svcpl	0x00316472
     bb4:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     bb8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     bbc:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
     bc0:	49366472 	ldmdbmi	r6!, {r1, r4, r5, r6, sl, sp, lr}
     bc4:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     bc8:	72696200 	rsbvc	r6, r9, #0, 4
     bcc:	625f3364 	subsvs	r3, pc, #100, 6	; 0x90000001
     bd0:	6b63616c 	blvs	18d9188 <startup-0x1e726e78>
     bd4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     bd8:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
     bdc:	5f346472 	svcpl	0x00346472
     be0:	63616c62 	cmnvs	r1, #25088	; 0x6200
     be4:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     be8:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     bec:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     bf0:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     bf4:	69620065 	stmdbvs	r2!, {r0, r2, r5, r6}^
     bf8:	5f316472 	svcpl	0x00316472
     bfc:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     c00:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     c04:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     c08:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     c0c:	616c625f 	cmnvs	ip, pc, asr r2
     c10:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
     c14:	00737469 	rsbseq	r7, r3, r9, ror #8
     c18:	706d6574 	rsbvc	r6, sp, r4, ror r5
     c1c:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     c20:	67694c33 			; <UNDEFINED> instruction: 0x67694c33
     c24:	62007468 	andvs	r7, r0, #104, 8	; 0x68000000
     c28:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     c2c:	6172675f 	cmnvs	r2, pc, asr r7
     c30:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     c34:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     c38:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     c3c:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     c40:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     c44:	72694270 	rsbvc	r4, r9, #112, 4
     c48:	694c3464 	stmdbvs	ip, {r2, r5, r6, sl, ip, sp}^
     c4c:	00746867 	rsbseq	r6, r4, r7, ror #16
     c50:	706d6574 	rsbvc	r6, sp, r4, ror r5
     c54:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     c58:	61724733 	cmnvs	r2, r3, lsr r7
     c5c:	69620079 	stmdbvs	r2!, {r0, r3, r4, r5, r6}^
     c60:	5f346472 	svcpl	0x00346472
     c64:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     c68:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     c6c:	6f700073 	svcvs	0x00700073
     c70:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     c74:	00333272 	eorseq	r3, r3, r2, ror r2
     c78:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     c7c:	67694c35 			; <UNDEFINED> instruction: 0x67694c35
     c80:	62007468 	andvs	r7, r0, #104, 8	; 0x68000000
     c84:	49647269 	stmdbmi	r4!, {r0, r3, r5, r6, r9, ip, sp, lr}^
     c88:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     c8c:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     c90:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     c94:	42356472 	eorsmi	r6, r5, #1912602624	; 0x72000000
     c98:	6b63616c 	blvs	18d9250 <startup-0x1e726db0>
     c9c:	72696200 	rsbvc	r6, r9, #0, 4
     ca0:	6c423464 	cfstrdvs	mvd3, [r2], {100}	; 0x64
     ca4:	006b6361 	rsbeq	r6, fp, r1, ror #6
     ca8:	706d6574 	rsbvc	r6, sp, r4, ror r5
     cac:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     cb0:	616c4232 	cmnvs	ip, r2, lsr r2
     cb4:	62006b63 	andvs	r6, r0, #101376	; 0x18c00
     cb8:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     cbc:	6172675f 	cmnvs	r2, pc, asr r7
     cc0:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     cc4:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     cc8:	31647269 	cmncc	r4, r9, ror #4
     ccc:	63616c42 	cmnvs	r1, #16896	; 0x4200
     cd0:	6962006b 	stmdbvs	r2!, {r0, r1, r3, r5, r6}^
     cd4:	4c326472 	cfldrsmi	mvf6, [r2], #-456	; 0xfffffe38
     cd8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     cdc:	2f3a4300 	svccs	0x003a4300
     ce0:	2f706f6d 	svccs	0x00706f6d
     ce4:	6f4d2f63 	svcvs	0x004d2f63
     ce8:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     cec:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     cf0:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     cf4:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     cf8:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     cfc:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     d00:	622f432f 	eorvs	r4, pc, #-1140850688	; 0xbc000000
     d04:	2e647269 	cdpcs	2, 6, cr7, cr4, cr9, {3}
     d08:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
     d0c:	625f7469 	subsvs	r7, pc, #1761607680	; 0x69000000
     d10:	00647269 	rsbeq	r7, r4, r9, ror #4
     d14:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     d18:	006a624f 	rsbeq	r6, sl, pc, asr #4
     d1c:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     d20:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
     d24:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     d28:	00737469 	rsbseq	r7, r3, r9, ror #8
     d2c:	706d6574 	rsbvc	r6, sp, r4, ror r5
     d30:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     d34:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     d38:	72696200 	rsbvc	r6, r9, #0, 4
     d3c:	72473564 	subvc	r3, r7, #100, 10	; 0x19000000
     d40:	62007961 	andvs	r7, r0, #1589248	; 0x184000
     d44:	31647269 	cmncc	r4, r9, ror #4
     d48:	616c625f 	cmnvs	ip, pc, asr r2
     d4c:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
     d50:	00737469 	rsbseq	r7, r3, r9, ror #8
     d54:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     d58:	616d4931 	cmnvs	sp, r1, lsr r9
     d5c:	62006567 	andvs	r6, r0, #432013312	; 0x19c00000
     d60:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     d64:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     d68:	6e696600 	cdpvs	6, 6, cr6, cr9, cr0, {0}
     d6c:	6f506c61 	svcvs	0x00506c61
     d70:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     d74:	65740072 	ldrbvs	r0, [r4, #-114]!	; 0xffffff8e
     d78:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     d7c:	6c426472 	cfstrdvs	mvd6, [r2], {114}	; 0x72
     d80:	006b6361 	rsbeq	r6, fp, r1, ror #6
     d84:	706d6574 	rsbvc	r6, sp, r4, ror r5
     d88:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     d8c:	616c4233 	cmnvs	ip, r3, lsr r2
     d90:	70006b63 	andvc	r6, r0, r3, ror #22
     d94:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     d98:	31317265 	teqcc	r1, r5, ror #4
     d9c:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     da0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     da4:	62003231 	andvs	r3, r0, #268435459	; 0x10000003
     da8:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     dac:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     db0:	69620074 	stmdbvs	r2!, {r2, r4, r5, r6}^
     db4:	49356472 	ldmdbmi	r5!, {r1, r4, r5, r6, sl, sp, lr}
     db8:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     dbc:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     dc0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     dc4:	70003531 	andvc	r3, r0, r1, lsr r5
     dc8:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     dcc:	37317265 	ldrcc	r7, [r1, -r5, ror #4]!
     dd0:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     dd4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     dd8:	62003831 	andvs	r3, r0, #3211264	; 0x310000
     ddc:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     de0:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     de4:	6f700065 	svcvs	0x00700065
     de8:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     dec:	00323272 	eorseq	r3, r2, r2, ror r2
     df0:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     df4:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     df8:	5f746867 	svcpl	0x00746867
     dfc:	73746962 	cmnvc	r4, #1605632	; 0x188000
     e00:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     e04:	42326863 	eorsmi	r6, r2, #6488064	; 0x630000
     e08:	6b63616c 	blvs	18d93c0 <startup-0x1e726c40>
     e0c:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     e10:	47316863 	ldrmi	r6, [r1, -r3, ror #16]!
     e14:	00796172 	rsbseq	r6, r9, r2, ror r1
     e18:	706d6574 	rsbvc	r6, sp, r4, ror r5
     e1c:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     e20:	67694c68 	strbvs	r4, [r9, -r8, ror #24]!
     e24:	77007468 	strvc	r7, [r0, -r8, ror #8]
     e28:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     e2c:	006a624f 	rsbeq	r6, sl, pc, asr #4
     e30:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     e34:	625f3168 	subsvs	r3, pc, #104, 2
     e38:	6b63616c 	blvs	18d93f0 <startup-0x1e726c10>
     e3c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     e40:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     e44:	6957706d 	ldmdbvs	r7, {r0, r2, r3, r5, r6, ip, sp, lr}^
     e48:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     e4c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     e50:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
     e54:	6957706d 	ldmdbvs	r7, {r0, r2, r3, r5, r6, ip, sp, lr}^
     e58:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     e5c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     e60:	69770074 	ldmdbvs	r7!, {r2, r4, r5, r6}^
     e64:	31686374 	smccc	34356	; 0x8634
     e68:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     e6c:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
     e70:	6957706d 	ldmdbvs	r7, {r0, r2, r3, r5, r6, ip, sp, lr}^
     e74:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     e78:	63616c42 	cmnvs	r1, #16896	; 0x4200
     e7c:	6977006b 	ldmdbvs	r7!, {r0, r1, r3, r5, r6}^
     e80:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     e84:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     e88:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     e8c:	00737469 	rsbseq	r7, r3, r9, ror #8
     e90:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     e94:	6d493368 	stclvs	3, cr3, [r9, #-416]	; 0xfffffe60
     e98:	00656761 	rsbeq	r6, r5, r1, ror #14
     e9c:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     ea0:	6c423368 	mcrrvs	3, 6, r3, r2, cr8
     ea4:	006b6361 	rsbeq	r6, fp, r1, ror #6
     ea8:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     eac:	675f3368 	ldrbvs	r3, [pc, -r8, ror #6]
     eb0:	5f796172 	svcpl	0x00796172
     eb4:	73746962 	cmnvc	r4, #1605632	; 0x188000
     eb8:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     ebc:	69775f74 	ldmdbvs	r7!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     ec0:	00686374 	rsbeq	r6, r8, r4, ror r3
     ec4:	706d6574 	rsbvc	r6, sp, r4, ror r5
     ec8:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     ecc:	616c4268 	cmnvs	ip, r8, ror #4
     ed0:	77006b63 	strvc	r6, [r0, -r3, ror #22]
     ed4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     ed8:	6c625f32 	stclvs	15, cr5, [r2], #-200	; 0xffffff38
     edc:	5f6b6361 	svcpl	0x006b6361
     ee0:	73746962 	cmnvc	r4, #1605632	; 0x188000
     ee4:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     ee8:	5f336863 	svcpl	0x00336863
     eec:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     ef0:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     ef4:	77007374 	smlsdxvc	r0, r4, r3, r7
     ef8:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     efc:	61724733 	cmnvs	r2, r3, lsr r7
     f00:	69770079 	ldmdbvs	r7!, {r0, r3, r4, r5, r6}^
     f04:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     f08:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     f0c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     f10:	74695770 	strbtvc	r5, [r9], #-1904	; 0xfffff890
     f14:	72476863 	subvc	r6, r7, #6488064	; 0x630000
     f18:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     f1c:	57706d65 	ldrbpl	r6, [r0, -r5, ror #26]!
     f20:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     f24:	61724732 	cmnvs	r2, r2, lsr r7
     f28:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     f2c:	6957706d 	ldmdbvs	r7, {r0, r2, r3, r5, r6, ip, sp, lr}^
     f30:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     f34:	63616c42 	cmnvs	r1, #16896	; 0x4200
     f38:	6977006b 	ldmdbvs	r7!, {r0, r1, r3, r5, r6}^
     f3c:	31686374 	smccc	34356	; 0x8634
     f40:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     f44:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     f48:	00737469 	rsbseq	r7, r3, r9, ror #8
     f4c:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     f50:	675f3268 	ldrbvs	r3, [pc, -r8, ror #4]
     f54:	5f796172 	svcpl	0x00796172
     f58:	73746962 	cmnvc	r4, #1605632	; 0x188000
     f5c:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     f60:	49346863 	ldmdbmi	r4!, {r0, r1, r5, r6, fp, sp, lr}
     f64:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     f68:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     f6c:	4c326863 	ldcmi	8, cr6, [r2], #-396	; 0xfffffe74
     f70:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     f74:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     f78:	49316863 	ldmdbmi	r1!, {r0, r1, r5, r6, fp, sp, lr}
     f7c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     f80:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     f84:	42316863 	eorsmi	r6, r1, #6488064	; 0x630000
     f88:	6b63616c 	blvs	18d9540 <startup-0x1e726ac0>
     f8c:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     f90:	4c336863 	ldcmi	8, cr6, [r3], #-396	; 0xfffffe74
     f94:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     f98:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     f9c:	6d496863 	stclvs	8, cr6, [r9, #-396]	; 0xfffffe74
     fa0:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     fa4:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     fa8:	74695770 	strbtvc	r5, [r9], #-1904	; 0xfffff890
     fac:	47336863 	ldrmi	r6, [r3, -r3, ror #16]!
     fb0:	00796172 	rsbseq	r6, r9, r2, ror r1
     fb4:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     fb8:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     fbc:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     fc0:	6f62616c 	svcvs	0x0062616c
     fc4:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     fc8:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     fcc:	5049442f 	subpl	r4, r9, pc, lsr #8
     fd0:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     fd4:	2f686374 	svccs	0x00686374
     fd8:	69772f43 	ldmdbvs	r7!, {r0, r1, r6, r8, r9, sl, fp, sp}^
     fdc:	2e686374 	mcrcs	3, 3, r6, cr8, cr4, {3}
     fe0:	69770063 	ldmdbvs	r7!, {r0, r1, r5, r6}^
     fe4:	31686374 	smccc	34356	; 0x8634
     fe8:	6172675f 	cmnvs	r2, pc, asr r7
     fec:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     ff0:	77007374 	smlsdxvc	r0, r4, r3, r7
     ff4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     ff8:	6c625f33 	stclvs	15, cr5, [r2], #-204	; 0xffffff34
     ffc:	5f6b6361 	svcpl	0x006b6361
    1000:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1004:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
    1008:	49326863 	ldmdbmi	r2!, {r0, r1, r5, r6, fp, sp, lr}
    100c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1010:	72696400 	rsbvc	r6, r9, #0, 8
    1014:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    1018:	44006e6f 	strmi	r6, [r0], #-3695	; 0xfffff191
    101c:	49345049 	ldmdbmi	r4!, {r0, r3, r6, ip, lr}
    1020:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1024:	50494400 	subpl	r4, r9, r0, lsl #8
    1028:	616d4931 	cmnvs	sp, r1, lsr r9
    102c:	74006567 	strvc	r6, [r0], #-1383	; 0xfffffa99
    1030:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
    1034:	4c325049 	ldcmi	0, cr5, [r2], #-292	; 0xfffffedc
    1038:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    103c:	52736900 	rsbspl	r6, r3, #0, 18
    1040:	696e6e75 	stmdbvs	lr!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
    1044:	7400676e 	strvc	r6, [r0], #-1902	; 0xfffff892
    1048:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
    104c:	42335049 	eorsmi	r5, r3, #73	; 0x49
    1050:	6b63616c 	blvs	18d9608 <startup-0x1e7269f8>
    1054:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1058:	50494470 	subpl	r4, r9, r0, ror r4
    105c:	61724732 	cmnvs	r2, r2, lsr r7
    1060:	49440079 	stmdbmi	r4, {r0, r3, r4, r5, r6}^
    1064:	72473150 	subvc	r3, r7, #80, 2
    1068:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
    106c:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
    1070:	694c5049 	stmdbvs	ip, {r0, r3, r6, ip, lr}^
    1074:	00746867 	rsbseq	r6, r4, r7, ror #16
    1078:	49504944 	ldmdbmi	r0, {r2, r6, r8, fp, lr}^
    107c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1080:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
    1084:	445f7469 	ldrbmi	r7, [pc], #-1129	; 108c <startup-0x1fffef74>
    1088:	74005049 	strvc	r5, [r0], #-73	; 0xffffffb7
    108c:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
    1090:	72475049 	subvc	r5, r7, #73	; 0x49
    1094:	44007961 	strmi	r7, [r0], #-2401	; 0xfffff69f
    1098:	42315049 	eorsmi	r5, r1, #73	; 0x49
    109c:	6b63616c 	blvs	18d9654 <startup-0x1e7269ac>
    10a0:	616c7000 	cmnvs	ip, r0
    10a4:	50726579 	rsbspl	r6, r2, r9, ror r5
    10a8:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
    10ac:	596e6f69 	stmdbpl	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    10b0:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    10b4:	50494470 	subpl	r4, r9, r0, ror r4
    10b8:	61724733 	cmnvs	r2, r3, lsr r7
    10bc:	49440079 	stmdbmi	r4, {r0, r3, r4, r5, r6}^
    10c0:	6d493350 	stclvs	3, cr3, [r9, #-320]	; 0xfffffec0
    10c4:	00656761 	rsbeq	r6, r5, r1, ror #14
    10c8:	706d6574 	rsbvc	r6, sp, r4, ror r5
    10cc:	33504944 	cmpcc	r0, #68, 18	; 0x110000
    10d0:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    10d4:	49440074 	stmdbmi	r4, {r2, r4, r5, r6}^
    10d8:	64705550 	ldrbtvs	r5, [r0], #-1360	; 0xfffffab0
    10dc:	00657461 	rsbeq	r7, r5, r1, ror #8
    10e0:	706d6574 	rsbvc	r6, sp, r4, ror r5
    10e4:	32504944 	subscc	r4, r0, #68, 18	; 0x110000
    10e8:	63616c42 	cmnvs	r1, #16896	; 0x4200
    10ec:	4944006b 	stmdbmi	r4, {r0, r1, r3, r5, r6}^
    10f0:	6d493250 	sfmvs	f3, 2, [r9, #-320]	; 0xfffffec0
    10f4:	00656761 	rsbeq	r6, r5, r1, ror #14
    10f8:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    10fc:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    1100:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    1104:	6f62616c 	svcvs	0x0062616c
    1108:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    110c:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    1110:	5049442f 	subpl	r4, r9, pc, lsr #8
    1114:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    1118:	2f686374 	svccs	0x00686374
    111c:	49442f43 	stmdbmi	r4, {r0, r1, r6, r8, r9, sl, fp, sp}^
    1120:	00632e50 	rsbeq	r2, r3, r0, asr lr
    1124:	31504944 	cmpcc	r0, r4, asr #18
    1128:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    112c:	49440074 	stmdbmi	r4, {r2, r4, r5, r6}^
    1130:	6a624f50 	bvs	1894e78 <startup-0x1e76b188>
    1134:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1138:	50494470 	subpl	r4, r9, r0, ror r4
    113c:	63616c42 	cmnvs	r1, #16896	; 0x4200
    1140:	6c70006b 	ldclvs	0, cr0, [r0], #-428	; 0xfffffe54
    1144:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
    1148:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
    114c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1150:	65730058 	ldrbvs	r0, [r3, #-88]!	; 0xffffffa8
    1154:	616c5074 	smcvs	50436	; 0xc504
    1158:	50726579 	rsbspl	r6, r2, r9, ror r5
    115c:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
    1160:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1164:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    1168:	675f3165 	ldrbvs	r3, [pc, -r5, ror #2]
    116c:	5f796172 	svcpl	0x00796172
    1170:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1174:	616c6600 	cmnvs	ip, r0, lsl #12
    1178:	4231656d 	eorsmi	r6, r1, #457179136	; 0x1b400000
    117c:	6b63616c 	blvs	18d9734 <startup-0x1e7268cc>
    1180:	616c6600 	cmnvs	ip, r0, lsl #12
    1184:	5f32656d 	svcpl	0x0032656d
    1188:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
    118c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1190:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    1194:	6c46706d 	mcrrvs	0, 6, r7, r6, cr13
    1198:	4c656d61 	stclmi	13, cr6, [r5], #-388	; 0xfffffe7c
    119c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    11a0:	616c6600 	cmnvs	ip, r0, lsl #12
    11a4:	5f32656d 	svcpl	0x0032656d
    11a8:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    11ac:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    11b0:	66007374 			; <UNDEFINED> instruction: 0x66007374
    11b4:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    11b8:	67694c33 			; <UNDEFINED> instruction: 0x67694c33
    11bc:	66007468 	strvs	r7, [r0], -r8, ror #8
    11c0:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    11c4:	616c4232 	cmnvs	ip, r2, lsr r2
    11c8:	74006b63 	strvc	r6, [r0], #-2915	; 0xfffff49d
    11cc:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
    11d0:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    11d4:	616c4232 	cmnvs	ip, r2, lsr r2
    11d8:	74006b63 	strvc	r6, [r0], #-2915	; 0xfffff49d
    11dc:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
    11e0:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    11e4:	67694c32 			; <UNDEFINED> instruction: 0x67694c32
    11e8:	66007468 	strvs	r7, [r0], -r8, ror #8
    11ec:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    11f0:	696c5f33 	stmdbvs	ip!, {r0, r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    11f4:	5f746867 	svcpl	0x00746867
    11f8:	73746962 	cmnvc	r4, #1605632	; 0x188000
    11fc:	616c6600 	cmnvs	ip, r0, lsl #12
    1200:	624f656d 	subvs	r6, pc, #457179136	; 0x1b400000
    1204:	6574006a 	ldrbvs	r0, [r4, #-106]!	; 0xffffff96
    1208:	6c46706d 	mcrrvs	0, 6, r7, r6, cr13
    120c:	32656d61 	rsbcc	r6, r5, #6208	; 0x1840
    1210:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    1214:	616c6600 	cmnvs	ip, r0, lsl #12
    1218:	4934656d 	ldmdbmi	r4!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
    121c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1220:	616c6600 	cmnvs	ip, r0, lsl #12
    1224:	5f31656d 	svcpl	0x0031656d
    1228:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    122c:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1230:	66007374 			; <UNDEFINED> instruction: 0x66007374
    1234:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    1238:	616d4931 	cmnvs	sp, r1, lsr r9
    123c:	66006567 	strvs	r6, [r0], -r7, ror #10
    1240:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    1244:	616c4233 	cmnvs	ip, r3, lsr r2
    1248:	74006b63 	strvc	r6, [r0], #-2915	; 0xfffff49d
    124c:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
    1250:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    1254:	67694c33 			; <UNDEFINED> instruction: 0x67694c33
    1258:	66007468 	strvs	r7, [r0], -r8, ror #8
    125c:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    1260:	61724733 	cmnvs	r2, r3, lsr r7
    1264:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
    1268:	6c46706d 	mcrrvs	0, 6, r7, r6, cr13
    126c:	34656d61 	strbtcc	r6, [r5], #-3425	; 0xfffff29f
    1270:	63616c42 	cmnvs	r1, #16896	; 0x4200
    1274:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
    1278:	6c46706d 	mcrrvs	0, 6, r7, r6, cr13
    127c:	34656d61 	strbtcc	r6, [r5], #-3425	; 0xfffff29f
    1280:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    1284:	6c660074 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30
    1288:	33656d61 	cmncc	r5, #6208	; 0x1840
    128c:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    1290:	6c660065 	stclvs	0, cr0, [r6], #-404	; 0xfffffe6c
    1294:	33656d61 	cmncc	r5, #6208	; 0x1840
    1298:	616c625f 	cmnvs	ip, pc, asr r2
    129c:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
    12a0:	00737469 	rsbseq	r7, r3, r9, ror #8
    12a4:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    12a8:	6c5f3465 	cfldrdvs	mvd3, [pc], {101}	; 0x65
    12ac:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    12b0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    12b4:	6c660073 	stclvs	0, cr0, [r6], #-460	; 0xfffffe34
    12b8:	33656d61 	cmncc	r5, #6208	; 0x1840
    12bc:	6172675f 	cmnvs	r2, pc, asr r7
    12c0:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    12c4:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
    12c8:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
    12cc:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    12d0:	61724734 	cmnvs	r2, r4, lsr r7
    12d4:	6c660079 	stclvs	0, cr0, [r6], #-484	; 0xfffffe1c
    12d8:	32656d61 	rsbcc	r6, r5, #6208	; 0x1840
    12dc:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    12e0:	6c660065 	stclvs	0, cr0, [r6], #-404	; 0xfffffe6c
    12e4:	31656d61 	cmncc	r5, r1, ror #26
    12e8:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    12ec:	616c6600 	cmnvs	ip, r0, lsl #12
    12f0:	5f32656d 	svcpl	0x0032656d
    12f4:	63616c62 	cmnvs	r1, #25088	; 0x6200
    12f8:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    12fc:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
    1300:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
    1304:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    1308:	63616c42 	cmnvs	r1, #16896	; 0x4200
    130c:	6c66006b 	stclvs	0, cr0, [r6], #-428	; 0xfffffe54
    1310:	34656d61 	strbtcc	r6, [r5], #-3425	; 0xfffff29f
    1314:	616c625f 	cmnvs	ip, pc, asr r2
    1318:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
    131c:	00737469 	rsbseq	r7, r3, r9, ror #8
    1320:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    1324:	72473465 	subvc	r3, r7, #1694498816	; 0x65000000
    1328:	66007961 	strvs	r7, [r0], -r1, ror #18
    132c:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    1330:	6c625f31 	stclvs	15, cr5, [r2], #-196	; 0xffffff3c
    1334:	5f6b6361 	svcpl	0x006b6361
    1338:	73746962 	cmnvc	r4, #1605632	; 0x188000
    133c:	616c6600 	cmnvs	ip, r0, lsl #12
    1340:	4c31656d 	cfldr32mi	mvfx6, [r1], #-436	; 0xfffffe4c
    1344:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1348:	616c6600 	cmnvs	ip, r0, lsl #12
    134c:	5f34656d 	svcpl	0x0034656d
    1350:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
    1354:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1358:	6c660073 	stclvs	0, cr0, [r6], #-460	; 0xfffffe34
    135c:	34656d61 	strbtcc	r6, [r5], #-3425	; 0xfffff29f
    1360:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    1364:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
    1368:	6c46706d 	mcrrvs	0, 6, r7, r6, cr13
    136c:	33656d61 	cmncc	r5, #6208	; 0x1840
    1370:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    1374:	616c6600 	cmnvs	ip, r0, lsl #12
    1378:	6d49656d 	cfstr64vs	mvdx6, [r9, #-436]	; 0xfffffe4c
    137c:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    1380:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1384:	616c4670 	smcvs	50272	; 0xc460
    1388:	4233656d 	eorsmi	r6, r3, #457179136	; 0x1b400000
    138c:	6b63616c 	blvs	18d9944 <startup-0x1e7266bc>
    1390:	616c6600 	cmnvs	ip, r0, lsl #12
    1394:	4732656d 	ldrmi	r6, [r2, -sp, ror #10]!
    1398:	00796172 	rsbseq	r6, r9, r2, ror r1
    139c:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    13a0:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    13a4:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    13a8:	6f62616c 	svcvs	0x0062616c
    13ac:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    13b0:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    13b4:	5049442f 	subpl	r4, r9, pc, lsr #8
    13b8:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    13bc:	2f686374 	svccs	0x00686374
    13c0:	6c662f43 	stclvs	15, cr2, [r6], #-268	; 0xfffffef4
    13c4:	2e656d61 	cdpcs	13, 6, cr6, cr5, cr1, {3}
    13c8:	65740063 	ldrbvs	r0, [r4, #-99]!	; 0xffffff9d
    13cc:	6c46706d 	mcrrvs	0, 6, r7, r6, cr13
    13d0:	47656d61 	strbmi	r6, [r5, -r1, ror #26]!
    13d4:	00796172 	rsbseq	r6, r9, r2, ror r1
    13d8:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    13dc:	6c423465 	cfstrdvs	mvd3, [r2], {101}	; 0x65
    13e0:	006b6361 	rsbeq	r6, fp, r1, ror #6
    13e4:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    13e8:	694c3265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp}^
    13ec:	00746867 	rsbseq	r6, r4, r7, ror #16
    13f0:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 1270 <startup-0x1fffed90>
    13f4:	616d4938 	cmnvs	sp, r8, lsr r9
    13f8:	62006567 	andvs	r6, r0, #432013312	; 0x19c00000
    13fc:	316d6f6f 	cmncc	sp, pc, ror #30
    1400:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    1404:	6f620065 	svcvs	0x00620065
    1408:	49396d6f 	ldmdbmi	r9!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    140c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1410:	6f6f6200 	svcvs	0x006f6200
    1414:	6d49356d 	cfstr64vs	mvdx3, [r9, #-436]	; 0xfffffe4c
    1418:	00656761 	rsbeq	r6, r5, r1, ror #14
    141c:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1420:	6d6f6f42 	stclvs	15, cr6, [pc, #-264]!	; 1320 <startup-0x1fffece0>
    1424:	61724736 	cmnvs	r2, r6, lsr r7
    1428:	6f620079 	svcvs	0x00620079
    142c:	5f316d6f 	svcpl	0x00316d6f
    1430:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
    1434:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1438:	6f620073 	svcvs	0x00620073
    143c:	624f6d6f 	subvs	r6, pc, #7104	; 0x1bc0
    1440:	3a43006a 	bcc	10c15f0 <startup-0x1ef3ea10>
    1444:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
    1448:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 1394 <startup-0x1fffec6c>
    144c:	616c706f 	cmnvs	ip, pc, rrx
    1450:	61726f62 	cmnvs	r2, r2, ror #30
    1454:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1458:	442f7265 	strtmi	r7, [pc], #-613	; 1460 <startup-0x1fffeba0>
    145c:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
    1460:	63746957 	cmnvs	r4, #1425408	; 0x15c000
    1464:	2f432f68 	svccs	0x00432f68
    1468:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 12e8 <startup-0x1fffed18>
    146c:	7400632e 	strvc	r6, [r0], #-814	; 0xfffffcd2
    1470:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
    1474:	356d6f6f 	strbcc	r6, [sp, #-3951]!	; 0xfffff091
    1478:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    147c:	6f6f6200 	svcvs	0x006f6200
    1480:	7247316d 	subvc	r3, r7, #1073741851	; 0x4000001b
    1484:	70007961 	andvc	r7, r0, r1, ror #18
    1488:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
    148c:	37327265 	ldrcc	r7, [r2, -r5, ror #4]!
    1490:	6f6f6200 	svcvs	0x006f6200
    1494:	6d49366d 	stclvs	6, cr3, [r9, #-436]	; 0xfffffe4c
    1498:	00656761 	rsbeq	r6, r5, r1, ror #14
    149c:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 131c <startup-0x1fffece4>
    14a0:	6c625f34 	stclvs	15, cr5, [r2], #-208	; 0xffffff30
    14a4:	5f6b6361 	svcpl	0x006b6361
    14a8:	73746962 	cmnvc	r4, #1605632	; 0x188000
    14ac:	6f6f6200 	svcvs	0x006f6200
    14b0:	675f356d 	ldrbvs	r3, [pc, -sp, ror #10]
    14b4:	5f796172 	svcpl	0x00796172
    14b8:	73746962 	cmnvc	r4, #1605632	; 0x188000
    14bc:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    14c0:	6f6f4270 	svcvs	0x006f4270
    14c4:	694c366d 	stmdbvs	ip, {r0, r2, r3, r5, r6, r9, sl, ip, sp}^
    14c8:	00746867 	rsbseq	r6, r4, r7, ror #16
    14cc:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 134c <startup-0x1fffecb4>
    14d0:	616c4233 	cmnvs	ip, r3, lsr r2
    14d4:	74006b63 	strvc	r6, [r0], #-2915	; 0xfffff49d
    14d8:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
    14dc:	336d6f6f 	cmncc	sp, #444	; 0x1bc
    14e0:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    14e4:	6f620074 	svcvs	0x00620074
    14e8:	4c346d6f 	ldcmi	13, cr6, [r4], #-444	; 0xfffffe44
    14ec:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    14f0:	6f6f6200 	svcvs	0x006f6200
    14f4:	4932316d 	ldmdbmi	r2!, {r0, r2, r3, r5, r6, r8, ip, sp}
    14f8:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    14fc:	6f6f6200 	svcvs	0x006f6200
    1500:	4935316d 	ldmdbmi	r5!, {r0, r2, r3, r5, r6, r8, ip, sp}
    1504:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1508:	6f6f6200 	svcvs	0x006f6200
    150c:	694c316d 	stmdbvs	ip, {r0, r2, r3, r5, r6, r8, ip, sp}^
    1510:	00746867 	rsbseq	r6, r4, r7, ror #16
    1514:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 1394 <startup-0x1fffec6c>
    1518:	6c625f31 	stclvs	15, cr5, [r2], #-196	; 0xffffff3c
    151c:	5f6b6361 	svcpl	0x006b6361
    1520:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1524:	6f6f6200 	svcvs	0x006f6200
    1528:	6d49336d 	stclvs	3, cr3, [r9, #-436]	; 0xfffffe4c
    152c:	00656761 	rsbeq	r6, r5, r1, ror #14
    1530:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1534:	6d6f6f42 	stclvs	15, cr6, [pc, #-264]!	; 1434 <startup-0x1fffebcc>
    1538:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    153c:	6f6f6200 	svcvs	0x006f6200
    1540:	675f346d 	ldrbvs	r3, [pc, -sp, ror #8]
    1544:	5f796172 	svcpl	0x00796172
    1548:	73746962 	cmnvc	r4, #1605632	; 0x188000
    154c:	6f6f6200 	svcvs	0x006f6200
    1550:	625f326d 	subsvs	r3, pc, #-805306362	; 0xd0000006
    1554:	6b63616c 	blvs	18d9b0c <startup-0x1e7264f4>
    1558:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    155c:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    1560:	6f42706d 	svcvs	0x0042706d
    1564:	6c426d6f 	mcrrvs	13, 6, r6, r2, cr15
    1568:	006b6361 	rsbeq	r6, fp, r1, ror #6
    156c:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 13ec <startup-0x1fffec14>
    1570:	616c4235 	cmnvs	ip, r5, lsr r2
    1574:	74006b63 	strvc	r6, [r0], #-2915	; 0xfffff49d
    1578:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
    157c:	326d6f6f 	rsbcc	r6, sp, #444	; 0x1bc
    1580:	63616c42 	cmnvs	r1, #16896	; 0x4200
    1584:	6f62006b 	svcvs	0x0062006b
    1588:	42326d6f 	eorsmi	r6, r2, #7104	; 0x1bc0
    158c:	6b63616c 	blvs	18d9b44 <startup-0x1e7264bc>
    1590:	6f6f6200 	svcvs	0x006f6200
    1594:	694c366d 	stmdbvs	ip, {r0, r2, r3, r5, r6, r9, sl, ip, sp}^
    1598:	00746867 	rsbseq	r6, r4, r7, ror #16
    159c:	706d6574 	rsbvc	r6, sp, r4, ror r5
    15a0:	6d6f6f42 	stclvs	15, cr6, [pc, #-264]!	; 14a0 <startup-0x1fffeb60>
    15a4:	61724734 	cmnvs	r2, r4, lsr r7
    15a8:	6f620079 	svcvs	0x00620079
    15ac:	5f336d6f 	svcpl	0x00336d6f
    15b0:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
    15b4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    15b8:	6f620073 	svcvs	0x00620073
    15bc:	5f336d6f 	svcpl	0x00336d6f
    15c0:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    15c4:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    15c8:	70007374 	andvc	r7, r0, r4, ror r3
    15cc:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
    15d0:	35327265 	ldrcc	r7, [r2, #-613]!	; 0xfffffd9b
    15d4:	6f6f6200 	svcvs	0x006f6200
    15d8:	694c336d 	stmdbvs	ip, {r0, r2, r3, r5, r6, r8, r9, ip, sp}^
    15dc:	00746867 	rsbseq	r6, r4, r7, ror #16
    15e0:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 1460 <startup-0x1fffeba0>
    15e4:	72675f36 	rsbvc	r5, r7, #54, 30	; 0xd8
    15e8:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
    15ec:	00737469 	rsbseq	r7, r3, r9, ror #8
    15f0:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 1470 <startup-0x1fffeb90>
    15f4:	61724735 	cmnvs	r2, r5, lsr r7
    15f8:	6f620079 	svcvs	0x00620079
    15fc:	5f356d6f 	svcpl	0x00356d6f
    1600:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    1604:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1608:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
    160c:	316d6f6f 	cmncc	sp, pc, ror #30
    1610:	616d4933 	cmnvs	sp, r3, lsr r9
    1614:	62006567 	andvs	r6, r0, #432013312	; 0x19c00000
    1618:	316d6f6f 	cmncc	sp, pc, ror #30
    161c:	616d4930 	cmnvs	sp, r0, lsr r9
    1620:	62006567 	andvs	r6, r0, #432013312	; 0x19c00000
    1624:	366d6f6f 	strbtcc	r6, [sp], -pc, ror #30
    1628:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
    162c:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
    1630:	00737469 	rsbseq	r7, r3, r9, ror #8
    1634:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 14b4 <startup-0x1fffeb4c>
    1638:	616d4937 	cmnvs	sp, r7, lsr r9
    163c:	62006567 	andvs	r6, r0, #432013312	; 0x19c00000
    1640:	346d6f6f 	strbtcc	r6, [sp], #-3951	; 0xfffff091
    1644:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    1648:	65740065 	ldrbvs	r0, [r4, #-101]!	; 0xffffff9b
    164c:	6f42706d 	svcvs	0x0042706d
    1650:	47326d6f 	ldrmi	r6, [r2, -pc, ror #26]!
    1654:	00796172 	rsbseq	r6, r9, r2, ror r1
    1658:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
    165c:	32726574 	rsbscc	r6, r2, #116, 10	; 0x1d000000
    1660:	6f620036 	svcvs	0x00620036
    1664:	47326d6f 	ldrmi	r6, [r2, -pc, ror #26]!
    1668:	00796172 	rsbseq	r6, r9, r2, ror r1
    166c:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 14ec <startup-0x1fffeb14>
    1670:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    1674:	74007365 	strvc	r7, [r0], #-869	; 0xfffffc9b
    1678:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
    167c:	346d6f6f 	strbtcc	r6, [sp], #-3951	; 0xfffff091
    1680:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    1684:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
    1688:	6f42706d 	svcvs	0x0042706d
    168c:	42356d6f 	eorsmi	r6, r5, #7104	; 0x1bc0
    1690:	6b63616c 	blvs	18d9c48 <startup-0x1e7263b8>
    1694:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1698:	6f6f4270 	svcvs	0x006f4270
    169c:	67694c6d 	strbvs	r4, [r9, -sp, ror #24]!
    16a0:	62007468 	andvs	r7, r0, #104, 8	; 0x68000000
    16a4:	356d6f6f 	strbcc	r6, [sp, #-3951]!	; 0xfffff091
    16a8:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    16ac:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
    16b0:	6f42706d 	svcvs	0x0042706d
    16b4:	4c326d6f 	ldcmi	13, cr6, [r2], #-444	; 0xfffffe44
    16b8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    16bc:	6f6f6200 	svcvs	0x006f6200
    16c0:	6d49326d 	sfmvs	f3, 2, [r9, #-436]	; 0xfffffe4c
    16c4:	00656761 	rsbeq	r6, r5, r1, ror #14
    16c8:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 1548 <startup-0x1fffeab8>
    16cc:	67694c32 			; <UNDEFINED> instruction: 0x67694c32
    16d0:	62007468 	andvs	r7, r0, #104, 8	; 0x68000000
    16d4:	346d6f6f 	strbtcc	r6, [sp], #-3951	; 0xfffff091
    16d8:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    16dc:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    16e0:	6f6f4270 	svcvs	0x006f4270
    16e4:	6c42366d 	mcrrvs	6, 6, r3, r2, cr13
    16e8:	006b6361 	rsbeq	r6, fp, r1, ror #6
    16ec:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 156c <startup-0x1fffea94>
    16f0:	61724733 	cmnvs	r2, r3, lsr r7
    16f4:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
    16f8:	6f42706d 	svcvs	0x0042706d
    16fc:	42336d6f 	eorsmi	r6, r3, #7104	; 0x1bc0
    1700:	6b63616c 	blvs	18d9cb8 <startup-0x1e726348>
    1704:	6f6f6200 	svcvs	0x006f6200
    1708:	625f336d 	subsvs	r3, pc, #-1275068415	; 0xb4000001
    170c:	6b63616c 	blvs	18d9cc4 <startup-0x1e72633c>
    1710:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1714:	6f620073 	svcvs	0x00620073
    1718:	42316d6f 	eorsmi	r6, r1, #7104	; 0x1bc0
    171c:	6b63616c 	blvs	18d9cd4 <startup-0x1e72632c>
    1720:	6f6f6200 	svcvs	0x006f6200
    1724:	7247366d 	subvc	r3, r7, #114294784	; 0x6d00000
    1728:	62007961 	andvs	r7, r0, #1589248	; 0x184000
    172c:	366d6f6f 	strbtcc	r6, [sp], -pc, ror #30
    1730:	63616c42 	cmnvs	r1, #16896	; 0x4200
    1734:	6f62006b 	svcvs	0x0062006b
    1738:	5f346d6f 	svcpl	0x00346d6f
    173c:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    1740:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1744:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
    1748:	316d6f6f 	cmncc	sp, pc, ror #30
    174c:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
    1750:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
    1754:	00737469 	rsbseq	r7, r3, r9, ror #8
    1758:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 15d8 <startup-0x1fffea28>
    175c:	6c625f35 	stclvs	15, cr5, [r2], #-212	; 0xffffff2c
    1760:	5f6b6361 	svcpl	0x006b6361
    1764:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1768:	6f6f6200 	svcvs	0x006f6200
    176c:	6c5f326d 	lfmvs	f3, 2, [pc], {109}	; 0x6d
    1770:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1774:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1778:	6f620073 	svcvs	0x00620073
    177c:	5f366d6f 	svcpl	0x00366d6f
    1780:	63616c62 	cmnvs	r1, #25088	; 0x6200
    1784:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1788:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
    178c:	346d6f6f 	strbtcc	r6, [sp], #-3951	; 0xfffff091
    1790:	63616c42 	cmnvs	r1, #16896	; 0x4200
    1794:	6f62006b 	svcvs	0x0062006b
    1798:	5f326d6f 	svcpl	0x00326d6f
    179c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
    17a0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    17a4:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    17a8:	6f42706d 	svcvs	0x0042706d
    17ac:	4c356d6f 	ldcmi	13, cr6, [r5], #-444	; 0xfffffe44
    17b0:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    17b4:	6f6f6200 	svcvs	0x006f6200
    17b8:	4934316d 	ldmdbmi	r4!, {r0, r2, r3, r5, r6, r8, ip, sp}
    17bc:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    17c0:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    17c4:	6f6f4270 	svcvs	0x006f4270
    17c8:	7247336d 	subvc	r3, r7, #-1275068415	; 0xb4000001
    17cc:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
    17d0:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
    17d4:	346d6f6f 	strbtcc	r6, [sp], #-3951	; 0xfffff091
    17d8:	63616c42 	cmnvs	r1, #16896	; 0x4200
    17dc:	6f62006b 	svcvs	0x0062006b
    17e0:	31316d6f 	teqcc	r1, pc, ror #26
    17e4:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    17e8:	61700065 	cmnvs	r0, r5, rrx
    17ec:	67006567 	strvs	r6, [r0, -r7, ror #10]
    17f0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
    17f4:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
    17f8:	00646165 	rsbeq	r6, r4, r5, ror #2
    17fc:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1800:	70007265 	andvc	r7, r0, r5, ror #4
    1804:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
    1808:	72640032 	rsbvc	r0, r4, #50	; 0x32
    180c:	675f7761 	ldrbvs	r7, [pc, -r1, ror #14]
    1810:	5f656d61 	svcpl	0x00656d61
    1814:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
    1818:	64007463 	strvs	r7, [r0], #-1123	; 0xfffffb9d
    181c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    1820:	63696d5f 	cmnvs	r9, #6080	; 0x17c0
    1824:	67006f72 	smlsdxvs	r0, r2, pc, r6	; <UNPREDICTABLE>
    1828:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
    182c:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
    1830:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1834:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 16c0 <startup-0x1fffe940>
    1838:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
    183c:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
    1840:	625f7261 	subsvs	r7, pc, #268435462	; 0x10000006
    1844:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
    1848:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    184c:	69700072 	ldmdbvs	r0!, {r1, r4, r5, r6}^
    1850:	006c6578 	rsbeq	r6, ip, r8, ror r5
    1854:	6a624f67 	bvs	18955f8 <startup-0x1e76aa08>
    1858:	61726700 	cmnvs	r2, r0, lsl #14
    185c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    1860:	6172645f 	cmnvs	r2, pc, asr r4
    1864:	63735f77 	cmnvs	r3, #476	; 0x1dc
    1868:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    186c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    1870:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 17b6 <startup-0x1fffe84a>	; <UNPREDICTABLE>
    1874:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
    1878:	6f687300 	svcvs	0x00687300
    187c:	72665f77 	rsbvc	r5, r6, #476	; 0x1dc
    1880:	00656d61 	rsbeq	r6, r5, r1, ror #26
    1884:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
    1888:	7270735f 	rsbsvc	r7, r0, #2080374785	; 0x7c000001
    188c:	00657469 	rsbeq	r7, r5, r9, ror #8
    1890:	616c6564 	cmnvs	ip, r4, ror #10
    1894:	30355f79 	eorscc	r5, r5, r9, ror pc
    1898:	00736e30 	rsbseq	r6, r3, r0, lsr lr
    189c:	70617267 	rsbvc	r7, r1, r7, ror #4
    18a0:	5f636968 	svcpl	0x00636968
    18a4:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    18a8:	72670065 	rsbvc	r0, r7, #101	; 0x65
    18ac:	63537961 	cmpvs	r3, #1589248	; 0x184000
    18b0:	54656c61 	strbtpl	r6, [r5], #-3169	; 0xfffff39f
    18b4:	00747365 	rsbseq	r7, r4, r5, ror #6
    18b8:	70617267 	rsbvc	r7, r1, r7, ror #4
    18bc:	5f636968 	svcpl	0x00636968
    18c0:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    18c4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    18c8:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
    18cc:	43007261 	movwmi	r7, #609	; 0x261
    18d0:	6f6d2f3a 	svcvs	0x006d2f3a
    18d4:	2f632f70 	svccs	0x00632f70
    18d8:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    18dc:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    18e0:	6f697461 	svcvs	0x00697461
    18e4:	2f72656e 	svccs	0x0072656e
    18e8:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    18ec:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    18f0:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    18f4:	6172672f 	cmnvs	r2, pc, lsr #14
    18f8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    18fc:	00632e73 	rsbeq	r2, r3, r3, ror lr
    1900:	70617267 	rsbvc	r7, r1, r7, ror #4
    1904:	5f636968 	svcpl	0x00636968
    1908:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    190c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    1910:	6f630061 	svcvs	0x00630061
    1914:	00726f6c 	rsbseq	r6, r2, ip, ror #30
    1918:	5f746573 	svcpl	0x00746573
    191c:	645f7075 	ldrbvs	r7, [pc], #-117	; 1924 <startup-0x1fffe6dc>
    1920:	5f776172 	svcpl	0x00776172
    1924:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1928:	00737265 	rsbseq	r7, r3, r5, ror #4
    192c:	70617267 	rsbvc	r7, r1, r7, ror #4
    1930:	5f636968 	svcpl	0x00636968
    1934:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    1938:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    193c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    1940:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    1944:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
    1948:	736e3035 	cmnvc	lr, #53	; 0x35
    194c:	6c696600 	stclvs	6, cr6, [r9], #-0
    1950:	6365526c 	cmnvs	r5, #108, 4	; 0xc0000006
    1954:	676e6174 			; <UNDEFINED> instruction: 0x676e6174
    1958:	6d00656c 	cfstr32vs	mvfx6, [r0, #-432]	; 0xfffffe50
    195c:	006b7361 	rsbeq	r7, fp, r1, ror #6
    1960:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
    1964:	656c5f65 	strbvs	r5, [ip, #-3941]!	; 0xfffff09b
    1968:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    196c:	61726700 	cmnvs	r2, r0, lsl #14
    1970:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    1974:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    1978:	645f6574 	ldrbvs	r6, [pc], #-1396	; 1980 <startup-0x1fffe680>
    197c:	00617461 	rsbeq	r7, r1, r1, ror #8
    1980:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    1984:	64697700 	strbtvs	r7, [r9], #-1792	; 0xfffff900
    1988:	695f6874 	ldmdbvs	pc, {r2, r4, r5, r6, fp, sp, lr}^	; <UNPREDICTABLE>
    198c:	79625f6e 	stmdbvc	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1990:	00736574 	rsbseq	r6, r3, r4, ror r5
    1994:	61656c63 	cmnvs	r5, r3, ror #24
    1998:	6c615f72 	stclvs	15, cr5, [r1], #-456	; 0xfffffe38
    199c:	61625f6c 	cmnvs	r2, ip, ror #30
    19a0:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
    19a4:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    19a8:	6c630073 	stclvs	0, cr0, [r3], #-460	; 0xfffffe34
    19ac:	52726165 	rsbspl	r6, r2, #1073741849	; 0x40000019
    19b0:	61746365 	cmnvs	r4, r5, ror #6
    19b4:	656c676e 	strbvs	r6, [ip, #-1902]!	; 0xfffff892
    19b8:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    19bc:	73007865 	movwvc	r7, #2149	; 0x865
    19c0:	63656c65 	cmnvs	r5, #25856	; 0x6500
    19c4:	6f635f74 	svcvs	0x00635f74
    19c8:	6f72746e 	svcvs	0x0072746e
    19cc:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
    19d0:	61726700 	cmnvs	r2, r0, lsl #14
    19d4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    19d8:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    19dc:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
    19e0:	00796461 	rsbseq	r6, r9, r1, ror #8
    19e4:	61656c63 	cmnvs	r5, r3, ror #24
    19e8:	68745f72 	ldmdavs	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    19ec:	61427369 	cmpvs	r2, r9, ror #6
    19f0:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
    19f4:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    19f8:	61726700 	cmnvs	r2, r0, lsl #14
    19fc:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    1a00:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    1a04:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
    1a08:	00657a69 	rsbeq	r7, r5, r9, ror #20
    1a0c:	70617267 	rsbvc	r7, r1, r7, ror #4
    1a10:	5f636968 	svcpl	0x00636968
    1a14:	61656c63 	cmnvs	r5, r3, ror #24
    1a18:	63735f72 	cmnvs	r3, #456	; 0x1c8
    1a1c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    1a20:	616f6c00 	cmnvs	pc, r0, lsl #24
    1a24:	6d695f64 	stclvs	15, cr5, [r9, #-400]!	; 0xfffffe70
    1a28:	00656761 	rsbeq	r6, r5, r1, ror #14
    1a2c:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    1a30:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    1a34:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    1a38:	6f62616c 	svcvs	0x0062616c
    1a3c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1a40:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    1a44:	5049442f 	subpl	r4, r9, pc, lsr #8
    1a48:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    1a4c:	2f686374 	svccs	0x00686374
    1a50:	6d692f43 	stclvs	15, cr2, [r9, #-268]!	; 0xfffffef4
    1a54:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
    1a58:	6f6c0063 	svcvs	0x006c0063
    1a5c:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
    1a60:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
    1a64:	3a430065 	bcc	10c1c00 <startup-0x1ef3e400>
    1a68:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
    1a6c:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 19b8 <startup-0x1fffe648>
    1a70:	616c706f 	cmnvs	ip, pc, rrx
    1a74:	61726f62 	cmnvs	r2, r2, ror #30
    1a78:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1a7c:	442f7265 	strtmi	r7, [pc], #-613	; 1a84 <startup-0x1fffe57c>
    1a80:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
    1a84:	63746957 	cmnvs	r4, #1425408	; 0x15c000
    1a88:	2f432f68 	svccs	0x00432f68
    1a8c:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
    1a90:	632e6574 			; <UNDEFINED> instruction: 0x632e6574
    1a94:	646f4d00 	strbtvs	r4, [pc], #-3328	; 1a9c <startup-0x1fffe564>
    1a98:	73007265 	movwvc	r7, #613	; 0x265
    1a9c:	755f7465 	ldrbvc	r7, [pc, #-1125]	; 163f <startup-0x1fffe9c1>
    1aa0:	49445f70 	stmdbmi	r4, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1aa4:	646f004c 	strbtvs	r0, [pc], #-76	; 1aac <startup-0x1fffe554>
    1aa8:	67694872 			; <UNDEFINED> instruction: 0x67694872
    1aac:	546f0068 	strbtpl	r0, [pc], #-104	; 1ab4 <startup-0x1fffe54c>
    1ab0:	72657079 	rsbvc	r7, r5, #121	; 0x79
    1ab4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1ab8:	7550004f 	ldrbvc	r0, [r0, #-79]	; 0xffffffb1
    1abc:	00726450 	rsbseq	r6, r2, r0, asr r4
    1ac0:	52726469 	rsbspl	r6, r2, #1761607680	; 0x69000000
    1ac4:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    1ac8:	00646576 	rsbeq	r6, r4, r6, ror r5
    1acc:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    1ad0:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    1ad4:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    1ad8:	6f62616c 	svcvs	0x0062616c
    1adc:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1ae0:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    1ae4:	5049442f 	subpl	r4, r9, pc, lsr #8
    1ae8:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    1aec:	2f686374 	svccs	0x00686374
    1af0:	70672f43 	rsbvc	r2, r7, r3, asr #30
    1af4:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
    1af8:	52746f00 	rsbspl	r6, r4, #0, 30
    1afc:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    1b00:	00646576 	rsbeq	r6, r4, r6, ror r5
    1b04:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1b08:	4c49445f 	cfstrdmi	mvd4, [r9], {95}	; 0x5f
    1b0c:	6e69735f 	mcrvs	3, 3, r7, cr9, cr15, {2}
    1b10:	00656c67 	rsbeq	r6, r5, r7, ror #24
    1b14:	4c72646f 	cfldrdmi	mvd6, [r2], #-444	; 0xfffffe44
    1b18:	6f00776f 	svcvs	0x0000776f
    1b1c:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
    1b20:	69007264 	stmdbvs	r0, {r2, r5, r6, r9, ip, sp, lr}
    1b24:	69487264 	stmdbvs	r8, {r2, r5, r6, r9, ip, sp, lr}^
    1b28:	69006867 	stmdbvs	r0, {r0, r1, r2, r5, r6, fp, sp, lr}
    1b2c:	6f4c7264 	svcvs	0x004c7264
    1b30:	646f0077 	strbtvs	r0, [pc], #-119	; 1b38 <startup-0x1fffe4c8>
    1b34:	73655272 	cmnvc	r5, #536870919	; 0x20000007
    1b38:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    1b3c:	65720064 	ldrbvs	r0, [r2, #-100]!	; 0xffffff9c
    1b40:	445f6461 	ldrbmi	r6, [pc], #-1121	; 1b48 <startup-0x1fffe4b8>
    1b44:	69004c49 	stmdbvs	r0, {r0, r3, r6, sl, fp, lr}
    1b48:	5f74696e 	svcpl	0x0074696e
    1b4c:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
    1b50:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
    1b54:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1b58:	696d696c 	stmdbvs	sp!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    1b5c:	61003274 	tstvs	r0, r4, ror r2
    1b60:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1b64:	6165725f 	cmnvs	r5, pc, asr r2
    1b68:	61645f64 	cmnvs	r4, r4, ror #30
    1b6c:	73006174 	movwvc	r6, #372	; 0x174
    1b70:	755f7465 	ldrbvc	r7, [pc, #-1125]	; 1713 <startup-0x1fffe8ed>
    1b74:	73615f70 	cmnvc	r1, #112, 30	; 0x1c0
    1b78:	00696963 	rsbeq	r6, r9, r3, ror #18
    1b7c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1b80:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
    1b84:	63007469 	movwvs	r7, #1129	; 0x469
    1b88:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
    1b8c:	6c63006e 	stclvs	0, cr0, [r3], #-440	; 0xfffffe48
    1b90:	5f726165 	svcpl	0x00726165
    1b94:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1b98:	73610069 	cmnvc	r1, #105	; 0x69
    1b9c:	5f696963 	svcpl	0x00696963
    1ba0:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    1ba4:	61705f65 	cmnvs	r0, r5, ror #30
    1ba8:	61007472 	tstvs	r0, r2, ror r4
    1bac:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1bb0:	6165725f 	cmnvs	r5, pc, asr r2
    1bb4:	6f635f64 	svcvs	0x00635f64
    1bb8:	6f72746e 	svcvs	0x0072746e
    1bbc:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
    1bc0:	63736100 	cmnvs	r3, #0, 2
    1bc4:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
    1bc8:	5f6c7274 	svcpl	0x006c7274
    1bcc:	5f746962 	svcpl	0x00746962
    1bd0:	00746573 	rsbseq	r6, r4, r3, ror r5
    1bd4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1bd8:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
    1bdc:	5f657469 	svcpl	0x00657469
    1be0:	00646d63 	rsbeq	r6, r4, r3, ror #26
    1be4:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
    1be8:	65740031 	ldrbvs	r0, [r4, #-49]!	; 0xffffffcf
    1bec:	00327473 	eorseq	r7, r2, r3, ror r4
    1bf0:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
    1bf4:	00737365 	rsbseq	r7, r3, r5, ror #6
    1bf8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1bfc:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
    1c00:	5f657469 	svcpl	0x00657469
    1c04:	61746164 	cmnvs	r4, r4, ror #2
    1c08:	63736100 	cmnvs	r3, #0, 2
    1c0c:	745f6969 	ldrbvc	r6, [pc], #-2409	; 1c14 <startup-0x1fffe3ec>
    1c10:	00747365 	rsbseq	r7, r4, r5, ror #6
    1c14:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1c18:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
    1c1c:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
    1c20:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    1c24:	73610073 	cmnvc	r1, #115	; 0x73
    1c28:	5f696963 	svcpl	0x00696963
    1c2c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    1c30:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1c34:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
    1c38:	61007261 	tstvs	r0, r1, ror #4
    1c3c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1c40:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    1c44:	61006574 	tstvs	r0, r4, ror r5
    1c48:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1c4c:	546f675f 	strbtpl	r6, [pc], #-1887	; 1c54 <startup-0x1fffe3ac>
    1c50:	0059586f 	subseq	r5, r9, pc, ror #16
    1c54:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1c58:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
    1c5c:	5f657469 	svcpl	0x00657469
    1c60:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
    1c64:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
    1c68:	61007265 	tstvs	r0, r5, ror #4
    1c6c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1c70:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    1c74:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
    1c78:	00726168 	rsbseq	r6, r2, r8, ror #2
    1c7c:	696d696c 	stmdbvs	sp!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    1c80:	43003174 	movwmi	r3, #372	; 0x174
    1c84:	6f6d2f3a 	svcvs	0x006d2f3a
    1c88:	2f632f70 	svccs	0x00632f70
    1c8c:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    1c90:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    1c94:	6f697461 	svcvs	0x00697461
    1c98:	2f72656e 	svccs	0x0072656e
    1c9c:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    1ca0:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    1ca4:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    1ca8:	6373612f 	cmnvs	r3, #-1073741813	; 0xc000000b
    1cac:	645f6969 	ldrbvs	r6, [pc], #-2409	; 1cb4 <startup-0x1fffe34c>
    1cb0:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
    1cb4:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
    1cb8:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
    1cbc:	6c735f74 	ldclvs	15, cr5, [r3], #-464	; 0xfffffe30
    1cc0:	745f776f 	ldrbvc	r7, [pc], #-1903	; 1cc8 <startup-0x1fffe338>
    1cc4:	00747865 	rsbseq	r7, r4, r5, ror #16
    1cc8:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
    1ccc:	6f5f6874 	svcvs	0x005f6874
    1cd0:	6f725f66 	svcvs	0x00725f66
    1cd4:	43003177 	movwmi	r3, #375	; 0x177
    1cd8:	6f6d2f3a 	svcvs	0x006d2f3a
    1cdc:	2f632f70 	svccs	0x00632f70
    1ce0:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    1ce4:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    1ce8:	6f697461 	svcvs	0x00697461
    1cec:	2f72656e 	svccs	0x0072656e
    1cf0:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    1cf4:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    1cf8:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    1cfc:	6f6c732f 	svcvs	0x006c732f
    1d00:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
    1d04:	632e7478 			; <UNDEFINED> instruction: 0x632e7478
    1d08:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1d0c:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1d10:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    1d14:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
    1d18:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1d1c:	616c4273 	smcvs	50211	; 0xc423
    1d20:	69006b63 	stmdbvs	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    1d24:	6f6f646e 	svcvs	0x006f646e
    1d28:	6d497372 	stclvs	3, cr7, [r9, #-456]	; 0xfffffe38
    1d2c:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    1d30:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1d34:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1d38:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
    1d3c:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
    1d40:	00737469 	rsbseq	r7, r3, r9, ror #8
    1d44:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1d48:	6f646e49 	svcvs	0x00646e49
    1d4c:	4773726f 	ldrbmi	r7, [r3, -pc, ror #4]!
    1d50:	00796172 	rsbseq	r6, r9, r2, ror r1
    1d54:	6f646e69 	svcvs	0x00646e69
    1d58:	5f73726f 	svcpl	0x0073726f
    1d5c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
    1d60:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1d64:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    1d68:	6e49706d 	cdpvs	0, 4, cr7, cr9, cr13, {3}
    1d6c:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1d70:	67694c73 			; <UNDEFINED> instruction: 0x67694c73
    1d74:	69007468 	stmdbvs	r0, {r3, r5, r6, sl, ip, sp, lr}
    1d78:	6f6f646e 	svcvs	0x006f646e
    1d7c:	694c7372 	stmdbvs	ip, {r1, r4, r5, r6, r8, r9, ip, sp, lr}^
    1d80:	00746867 	rsbseq	r6, r4, r7, ror #16
    1d84:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    1d88:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    1d8c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    1d90:	6f62616c 	svcvs	0x0062616c
    1d94:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1d98:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    1d9c:	5049442f 	subpl	r4, r9, pc, lsr #8
    1da0:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    1da4:	2f686374 	svccs	0x00686374
    1da8:	6e692f43 	cdpvs	15, 6, cr2, cr9, cr3, {2}
    1dac:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1db0:	00632e73 	rsbeq	r2, r3, r3, ror lr
    1db4:	6f646e69 	svcvs	0x00646e69
    1db8:	5f73726f 	svcpl	0x0073726f
    1dbc:	63616c62 	cmnvs	r1, #25088	; 0x6200
    1dc0:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1dc4:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
    1dc8:	49706d65 	ldmdbmi	r0!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    1dcc:	6f6f646e 	svcvs	0x006f646e
    1dd0:	6c427372 	mcrrvs	3, 7, r7, r2, cr2
    1dd4:	006b6361 	rsbeq	r6, fp, r1, ror #6
    1dd8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    1ddc:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
    1de0:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1de4:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1de8:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1dec:	006a624f 	rsbeq	r6, sl, pc, asr #4
    1df0:	6f646e69 	svcvs	0x00646e69
    1df4:	4773726f 	ldrbmi	r7, [r3, -pc, ror #4]!
    1df8:	00796172 	rsbseq	r6, r9, r2, ror r1
    1dfc:	6f646e69 	svcvs	0x00646e69
    1e00:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1e04:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    1e08:	6e690074 	mcrvs	0, 3, r0, cr9, cr4, {3}
    1e0c:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1e10:	625f3273 	subsvs	r3, pc, #805306375	; 0x30000007
    1e14:	6b63616c 	blvs	18da3cc <startup-0x1e725c34>
    1e18:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1e1c:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    1e20:	6e49706d 	cdpvs	0, 4, cr7, cr9, cr13, {3}
    1e24:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1e28:	694c3273 	stmdbvs	ip, {r0, r1, r4, r5, r6, r9, ip, sp}^
    1e2c:	00746867 	rsbseq	r6, r4, r7, ror #16
    1e30:	6f646e69 	svcvs	0x00646e69
    1e34:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1e38:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    1e3c:	2f3a4300 	svccs	0x003a4300
    1e40:	2f706f6d 	svccs	0x00706f6d
    1e44:	6f4d2f63 	svcvs	0x004d2f63
    1e48:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    1e4c:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    1e50:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    1e54:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1e58:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    1e5c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1e60:	692f432f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r8, r9, lr}	; <UNPREDICTABLE>
    1e64:	6f6f646e 	svcvs	0x006f646e
    1e68:	2e327372 	mrccs	3, 1, r7, cr2, cr2, {3}
    1e6c:	65740063 	ldrbvs	r0, [r4, #-99]!	; 0xffffff9d
    1e70:	6e49706d 	cdpvs	0, 4, cr7, cr9, cr13, {3}
    1e74:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1e78:	6c423273 	sfmvs	f3, 2, [r2], {115}	; 0x73
    1e7c:	006b6361 	rsbeq	r6, fp, r1, ror #6
    1e80:	6f646e69 	svcvs	0x00646e69
    1e84:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1e88:	63616c42 	cmnvs	r1, #16896	; 0x4200
    1e8c:	6e69006b 	cdpvs	0, 6, cr0, cr9, cr11, {3}
    1e90:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1e94:	6d493273 	sfmvs	f3, 2, [r9, #-460]	; 0xfffffe34
    1e98:	00656761 	rsbeq	r6, r5, r1, ror #14
    1e9c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    1ea0:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
    1ea4:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1ea8:	6e690032 	mcrvs	0, 3, r0, cr9, cr2, {1}
    1eac:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1eb0:	6c5f3273 	lfmvs	f3, 2, [pc], {115}	; 0x73
    1eb4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1eb8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1ebc:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
    1ec0:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1ec4:	6d493273 	sfmvs	f3, 2, [r9, #-460]	; 0xfffffe34
    1ec8:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    1ecc:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1ed0:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1ed4:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
    1ed8:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
    1edc:	00737469 	rsbseq	r7, r3, r9, ror #8
    1ee0:	6f646e69 	svcvs	0x00646e69
    1ee4:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1ee8:	006a624f 	rsbeq	r6, sl, pc, asr #4
    1eec:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1ef0:	6f646e49 	svcvs	0x00646e49
    1ef4:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1ef8:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    1efc:	2f3a4300 	svccs	0x003a4300
    1f00:	2f706f6d 	svccs	0x00706f6d
    1f04:	6f4d2f63 	svcvs	0x004d2f63
    1f08:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    1f0c:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    1f10:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    1f14:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1f18:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    1f1c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1f20:	742f432f 	strtvc	r4, [pc], #-815	; 1f28 <startup-0x1fffe0d8>
    1f24:	68706f72 	ldmdavs	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    1f28:	00632e79 	rsbeq	r2, r3, r9, ror lr
    1f2c:	706f7274 	rsbvc	r7, pc, r4, ror r2	; <UNPREDICTABLE>
    1f30:	625f7968 	subsvs	r7, pc, #104, 18	; 0x1a0000
    1f34:	6b63616c 	blvs	18da4ec <startup-0x1e725b14>
    1f38:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1f3c:	72740073 	rsbsvc	r0, r4, #115	; 0x73
    1f40:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1f44:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    1f48:	72740074 	rsbsvc	r0, r4, #116	; 0x74
    1f4c:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1f50:	006a624f 	rsbeq	r6, sl, pc, asr #4
    1f54:	706f7274 	rsbvc	r7, pc, r4, ror r2	; <UNPREDICTABLE>
    1f58:	6c5f7968 	mrrcvs	9, 6, r7, pc, cr8	; <UNPREDICTABLE>
    1f5c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1f60:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1f64:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    1f68:	7254706d 	subsvc	r7, r4, #109	; 0x6d
    1f6c:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1f70:	63616c42 	cmnvs	r1, #16896	; 0x4200
    1f74:	7274006b 	rsbsvc	r0, r4, #107	; 0x6b
    1f78:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1f7c:	6172675f 	cmnvs	r2, pc, asr r7
    1f80:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1f84:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
    1f88:	54706d65 	ldrbtpl	r6, [r0], #-3429	; 0xfffff29b
    1f8c:	68706f72 	ldmdavs	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    1f90:	67694c79 			; <UNDEFINED> instruction: 0x67694c79
    1f94:	74007468 	strvc	r7, [r0], #-1128	; 0xfffffb98
    1f98:	68706f72 	ldmdavs	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    1f9c:	61724779 	cmnvs	r2, r9, ror r7
    1fa0:	72740079 	rsbsvc	r0, r4, #121	; 0x79
    1fa4:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1fa8:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    1fac:	74007365 	strvc	r7, [r0], #-869	; 0xfffffc9b
    1fb0:	68706f72 	ldmdavs	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    1fb4:	616d4979 	smcvs	54425	; 0xd499
    1fb8:	74006567 	strvc	r6, [r0], #-1383	; 0xfffffa99
    1fbc:	68706f72 	ldmdavs	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    1fc0:	616c4279 	smcvs	50217	; 0xc429
    1fc4:	74006b63 	strvc	r6, [r0], #-2915	; 0xfffff49d
    1fc8:	54706d65 	ldrbtpl	r6, [r0], #-3429	; 0xfffff29b
    1fcc:	68706f72 	ldmdavs	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    1fd0:	61724779 	cmnvs	r2, r9, ror r7
    1fd4:	Address 0x00001fd4 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000024 	andeq	r0, r0, r4, lsr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000034 	andcs	r0, r0, r4, lsr r0
  48:	000001c8 	andeq	r0, r0, r8, asr #3
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	300e4101 	andcc	r4, lr, r1, lsl #2
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	00000020 	andeq	r0, r0, r0, lsr #32
  60:	00000000 	andeq	r0, r0, r0
  64:	200001fc 	strdcs	r0, [r0], -ip
  68:	00001670 	andeq	r1, r0, r0, ror r6
  6c:	400c0e41 	andmi	r0, ip, r1, asr #28
  70:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  74:	018e4002 	orreq	r4, lr, r2
  78:	09b00e42 	ldmibeq	r0!, {r1, r6, r9, sl, fp}
  7c:	00070d41 	andeq	r0, r7, r1, asr #26
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	00000000 	andeq	r0, r0, r0
  88:	2000186c 	andcs	r1, r0, ip, ror #16
  8c:	0000001e 	andeq	r0, r0, lr, lsl r0
  90:	40080e41 	andmi	r0, r8, r1, asr #28
  94:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  98:	100e4101 	andne	r4, lr, r1, lsl #2
  9c:	00070d41 	andeq	r0, r7, r1, asr #26
  a0:	0000000c 	andeq	r0, r0, ip
  a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  a8:	7c020001 	stcvc	0, cr0, [r2], {1}
  ac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	000000a0 	andeq	r0, r0, r0, lsr #1
  b8:	2000188c 	andcs	r1, r0, ip, lsl #17
  bc:	00000010 	andeq	r0, r0, r0, lsl r0
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	100e4101 	andne	r4, lr, r1, lsl #2
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	000000a0 	andeq	r0, r0, r0, lsr #1
  d8:	2000189c 	mulcs	r0, ip, r8
  dc:	00000046 	andeq	r0, r0, r6, asr #32
  e0:	40080e41 	andmi	r0, r8, r1, asr #28
  e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e8:	100e4101 	andne	r4, lr, r1, lsl #2
  ec:	00070d41 	andeq	r0, r7, r1, asr #26
  f0:	0000000c 	andeq	r0, r0, ip
  f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  f8:	7c020001 	stcvc	0, cr0, [r2], {1}
  fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 108:	200018e4 	andcs	r1, r0, r4, ror #17
 10c:	00000184 	andeq	r0, r0, r4, lsl #3
 110:	40080e41 	andmi	r0, r8, r1, asr #28
 114:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 118:	380e4101 	stmdacc	lr, {r0, r8, lr}
 11c:	00070d41 	andeq	r0, r7, r1, asr #26
 120:	00000020 	andeq	r0, r0, r0, lsr #32
 124:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 128:	20001a68 	andcs	r1, r0, r8, ror #20
 12c:	00000124 	andeq	r0, r0, r4, lsr #2
 130:	400c0e41 	andmi	r0, ip, r1, asr #28
 134:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 138:	018e4002 	orreq	r4, lr, r2
 13c:	41180e41 	tstmi	r8, r1, asr #28
 140:	0000070d 	andeq	r0, r0, sp, lsl #14
 144:	0000000c 	andeq	r0, r0, ip
 148:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 14c:	7c020001 	stcvc	0, cr0, [r2], {1}
 150:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 154:	0000001c 	andeq	r0, r0, ip, lsl r0
 158:	00000144 	andeq	r0, r0, r4, asr #2
 15c:	20001b8c 	andcs	r1, r0, ip, lsl #23
 160:	00000204 	andeq	r0, r0, r4, lsl #4
 164:	40080e41 	andmi	r0, r8, r1, asr #28
 168:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 16c:	100e4101 	andne	r4, lr, r1, lsl #2
 170:	00070d41 	andeq	r0, r7, r1, asr #26
 174:	0000000c 	andeq	r0, r0, ip
 178:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 17c:	7c020001 	stcvc	0, cr0, [r2], {1}
 180:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 184:	0000001c 	andeq	r0, r0, ip, lsl r0
 188:	00000174 	andeq	r0, r0, r4, ror r1
 18c:	20001d90 	mulcs	r0, r0, sp
 190:	0000020c 	andeq	r0, r0, ip, lsl #4
 194:	40080e41 	andmi	r0, r8, r1, asr #28
 198:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 19c:	480e4101 	stmdami	lr, {r0, r8, lr}
 1a0:	00070d41 	andeq	r0, r7, r1, asr #26
 1a4:	00000020 	andeq	r0, r0, r0, lsr #32
 1a8:	00000174 	andeq	r0, r0, r4, ror r1
 1ac:	20001f9c 	mulcs	r0, ip, pc	; <UNPREDICTABLE>
 1b0:	00000158 	andeq	r0, r0, r8, asr r1
 1b4:	400c0e41 	andmi	r0, ip, r1, asr #28
 1b8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 1bc:	018e4002 	orreq	r4, lr, r2
 1c0:	41180e41 	tstmi	r8, r1, asr #28
 1c4:	0000070d 	andeq	r0, r0, sp, lsl #14
 1c8:	0000000c 	andeq	r0, r0, ip
 1cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1d0:	7c020001 	stcvc	0, cr0, [r2], {1}
 1d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1dc:	000001c8 	andeq	r0, r0, r8, asr #3
 1e0:	200020f4 	strdcs	r2, [r0], -r4
 1e4:	00000140 	andeq	r0, r0, r0, asr #2
 1e8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f0:	300e4101 	andcc	r4, lr, r1, lsl #2
 1f4:	00070d41 	andeq	r0, r7, r1, asr #26
 1f8:	00000020 	andeq	r0, r0, r0, lsr #32
 1fc:	000001c8 	andeq	r0, r0, r8, asr #3
 200:	20002234 	andcs	r2, r0, r4, lsr r2
 204:	000000f8 	strdeq	r0, [r0], -r8
 208:	400c0e41 	andmi	r0, ip, r1, asr #28
 20c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 210:	018e4002 	orreq	r4, lr, r2
 214:	41180e41 	tstmi	r8, r1, asr #28
 218:	0000070d 	andeq	r0, r0, sp, lsl #14
 21c:	0000000c 	andeq	r0, r0, ip
 220:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 224:	7c020001 	stcvc	0, cr0, [r2], {1}
 228:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 22c:	0000001c 	andeq	r0, r0, ip, lsl r0
 230:	0000021c 	andeq	r0, r0, ip, lsl r2
 234:	2000232c 	andcs	r2, r0, ip, lsr #6
 238:	00000140 	andeq	r0, r0, r0, asr #2
 23c:	40080e41 	andmi	r0, r8, r1, asr #28
 240:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 244:	300e4101 	andcc	r4, lr, r1, lsl #2
 248:	00070d41 	andeq	r0, r7, r1, asr #26
 24c:	00000020 	andeq	r0, r0, r0, lsr #32
 250:	0000021c 	andeq	r0, r0, ip, lsl r2
 254:	2000246c 	andcs	r2, r0, ip, ror #8
 258:	000000f8 	strdeq	r0, [r0], -r8
 25c:	400c0e41 	andmi	r0, ip, r1, asr #28
 260:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 264:	018e4002 	orreq	r4, lr, r2
 268:	41180e41 	tstmi	r8, r1, asr #28
 26c:	0000070d 	andeq	r0, r0, sp, lsl #14
 270:	0000001c 	andeq	r0, r0, ip, lsl r0
 274:	0000021c 	andeq	r0, r0, ip, lsl r2
 278:	20002564 	andcs	r2, r0, r4, ror #10
 27c:	00000028 	andeq	r0, r0, r8, lsr #32
 280:	40080e41 	andmi	r0, r8, r1, asr #28
 284:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 288:	100e4101 	andne	r4, lr, r1, lsl #2
 28c:	00070d41 	andeq	r0, r7, r1, asr #26
 290:	0000001c 	andeq	r0, r0, ip, lsl r0
 294:	0000021c 	andeq	r0, r0, ip, lsl r2
 298:	2000258c 	andcs	r2, r0, ip, lsl #11
 29c:	00000110 	andeq	r0, r0, r0, lsl r1
 2a0:	40080e41 	andmi	r0, r8, r1, asr #28
 2a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a8:	100e4101 	andne	r4, lr, r1, lsl #2
 2ac:	00070d41 	andeq	r0, r7, r1, asr #26
 2b0:	0000000c 	andeq	r0, r0, ip
 2b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2b8:	7c020001 	stcvc	0, cr0, [r2], {1}
 2bc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c4:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 2c8:	2000269c 	mulcs	r0, ip, r6
 2cc:	000001a8 	andeq	r0, r0, r8, lsr #3
 2d0:	40080e41 	andmi	r0, r8, r1, asr #28
 2d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d8:	380e4101 	stmdacc	lr, {r0, r8, lr}
 2dc:	00070d41 	andeq	r0, r7, r1, asr #26
 2e0:	00000020 	andeq	r0, r0, r0, lsr #32
 2e4:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 2e8:	20002844 	andcs	r2, r0, r4, asr #16
 2ec:	00000104 	andeq	r0, r0, r4, lsl #2
 2f0:	400c0e41 	andmi	r0, ip, r1, asr #28
 2f4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 2f8:	018e4002 	orreq	r4, lr, r2
 2fc:	41180e41 	tstmi	r8, r1, asr #28
 300:	0000070d 	andeq	r0, r0, sp, lsl #14
 304:	0000000c 	andeq	r0, r0, ip
 308:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 30c:	7c020001 	stcvc	0, cr0, [r2], {1}
 310:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 314:	0000001c 	andeq	r0, r0, ip, lsl r0
 318:	00000304 	andeq	r0, r0, r4, lsl #6
 31c:	20002948 	andcs	r2, r0, r8, asr #18
 320:	00000274 	andeq	r0, r0, r4, ror r2
 324:	40080e41 	andmi	r0, r8, r1, asr #28
 328:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 32c:	500e4101 	andpl	r4, lr, r1, lsl #2
 330:	00070d41 	andeq	r0, r7, r1, asr #26
 334:	00000020 	andeq	r0, r0, r0, lsr #32
 338:	00000304 	andeq	r0, r0, r4, lsl #6
 33c:	20002bbc 			; <UNDEFINED> instruction: 0x20002bbc
 340:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 344:	400c0e41 	andmi	r0, ip, r1, asr #28
 348:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 34c:	018e4002 	orreq	r4, lr, r2
 350:	41180e41 	tstmi	r8, r1, asr #28
 354:	0000070d 	andeq	r0, r0, sp, lsl #14
 358:	0000000c 	andeq	r0, r0, ip
 35c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 360:	7c020001 	stcvc	0, cr0, [r2], {1}
 364:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 368:	00000018 	andeq	r0, r0, r8, lsl r0
 36c:	00000358 	andeq	r0, r0, r8, asr r3
 370:	20002e74 	andcs	r2, r0, r4, ror lr
 374:	00000044 	andeq	r0, r0, r4, asr #32
 378:	40080e41 	andmi	r0, r8, r1, asr #28
 37c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 380:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 384:	00000018 	andeq	r0, r0, r8, lsl r0
 388:	00000358 	andeq	r0, r0, r8, asr r3
 38c:	20002eb8 			; <UNDEFINED> instruction: 0x20002eb8
 390:	00000044 	andeq	r0, r0, r4, asr #32
 394:	40080e41 	andmi	r0, r8, r1, asr #28
 398:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 39c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 3a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a4:	00000358 	andeq	r0, r0, r8, asr r3
 3a8:	20002efc 	strdcs	r2, [r0], -ip
 3ac:	0000002c 	andeq	r0, r0, ip, lsr #32
 3b0:	40080e41 	andmi	r0, r8, r1, asr #28
 3b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3b8:	100e4101 	andne	r4, lr, r1, lsl #2
 3bc:	00070d41 	andeq	r0, r7, r1, asr #26
 3c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c4:	00000358 	andeq	r0, r0, r8, asr r3
 3c8:	20002f28 	andcs	r2, r0, r8, lsr #30
 3cc:	00000026 	andeq	r0, r0, r6, lsr #32
 3d0:	40080e41 	andmi	r0, r8, r1, asr #28
 3d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3d8:	100e4101 	andne	r4, lr, r1, lsl #2
 3dc:	00070d41 	andeq	r0, r7, r1, asr #26
 3e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e4:	00000358 	andeq	r0, r0, r8, asr r3
 3e8:	20002f4e 	andcs	r2, r0, lr, asr #30
 3ec:	00000032 	andeq	r0, r0, r2, lsr r0
 3f0:	40080e41 	andmi	r0, r8, r1, asr #28
 3f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3f8:	180e4101 	stmdane	lr, {r0, r8, lr}
 3fc:	00070d41 	andeq	r0, r7, r1, asr #26
 400:	00000018 	andeq	r0, r0, r8, lsl r0
 404:	00000358 	andeq	r0, r0, r8, asr r3
 408:	20002f80 	andcs	r2, r0, r0, lsl #31
 40c:	00000018 	andeq	r0, r0, r8, lsl r0
 410:	40080e41 	andmi	r0, r8, r1, asr #28
 414:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 418:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 41c:	00000018 	andeq	r0, r0, r8, lsl r0
 420:	00000358 	andeq	r0, r0, r8, asr r3
 424:	20002f98 	mulcs	r0, r8, pc	; <UNPREDICTABLE>
 428:	00000030 	andeq	r0, r0, r0, lsr r0
 42c:	40080e41 	andmi	r0, r8, r1, asr #28
 430:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 434:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 438:	0000001c 	andeq	r0, r0, ip, lsl r0
 43c:	00000358 	andeq	r0, r0, r8, asr r3
 440:	20002fc8 	andcs	r2, r0, r8, asr #31
 444:	00000050 	andeq	r0, r0, r0, asr r0
 448:	40080e41 	andmi	r0, r8, r1, asr #28
 44c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 450:	180e4101 	stmdane	lr, {r0, r8, lr}
 454:	00070d41 	andeq	r0, r7, r1, asr #26
 458:	0000001c 	andeq	r0, r0, ip, lsl r0
 45c:	00000358 	andeq	r0, r0, r8, asr r3
 460:	20003018 	andcs	r3, r0, r8, lsl r0
 464:	00000058 	andeq	r0, r0, r8, asr r0
 468:	40080e41 	andmi	r0, r8, r1, asr #28
 46c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 470:	180e4101 	stmdane	lr, {r0, r8, lr}
 474:	00070d41 	andeq	r0, r7, r1, asr #26
 478:	0000001c 	andeq	r0, r0, ip, lsl r0
 47c:	00000358 	andeq	r0, r0, r8, asr r3
 480:	20003070 	andcs	r3, r0, r0, ror r0
 484:	00000066 	andeq	r0, r0, r6, rrx
 488:	40080e41 	andmi	r0, r8, r1, asr #28
 48c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 490:	100e4101 	andne	r4, lr, r1, lsl #2
 494:	00070d41 	andeq	r0, r7, r1, asr #26
 498:	0000001c 	andeq	r0, r0, ip, lsl r0
 49c:	00000358 	andeq	r0, r0, r8, asr r3
 4a0:	200030d6 	ldrdcs	r3, [r0], -r6
 4a4:	0000006e 	andeq	r0, r0, lr, rrx
 4a8:	40080e41 	andmi	r0, r8, r1, asr #28
 4ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4b0:	100e4101 	andne	r4, lr, r1, lsl #2
 4b4:	00070d41 	andeq	r0, r7, r1, asr #26
 4b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4bc:	00000358 	andeq	r0, r0, r8, asr r3
 4c0:	20003144 	andcs	r3, r0, r4, asr #2
 4c4:	00000094 	muleq	r0, r4, r0
 4c8:	40080e41 	andmi	r0, r8, r1, asr #28
 4cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4d0:	180e4101 	stmdane	lr, {r0, r8, lr}
 4d4:	00070d41 	andeq	r0, r7, r1, asr #26
 4d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4dc:	00000358 	andeq	r0, r0, r8, asr r3
 4e0:	200031d8 	ldrdcs	r3, [r0], -r8
 4e4:	0000002a 	andeq	r0, r0, sl, lsr #32
 4e8:	40080e41 	andmi	r0, r8, r1, asr #28
 4ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4f0:	100e4101 	andne	r4, lr, r1, lsl #2
 4f4:	00070d41 	andeq	r0, r7, r1, asr #26
 4f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4fc:	00000358 	andeq	r0, r0, r8, asr r3
 500:	20003202 	andcs	r3, r0, r2, lsl #4
 504:	0000007e 	andeq	r0, r0, lr, ror r0
 508:	40080e41 	andmi	r0, r8, r1, asr #28
 50c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 510:	100e4101 	andne	r4, lr, r1, lsl #2
 514:	00070d41 	andeq	r0, r7, r1, asr #26
 518:	0000001c 	andeq	r0, r0, ip, lsl r0
 51c:	00000358 	andeq	r0, r0, r8, asr r3
 520:	20003280 	andcs	r3, r0, r0, lsl #5
 524:	00000046 	andeq	r0, r0, r6, asr #32
 528:	40080e41 	andmi	r0, r8, r1, asr #28
 52c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 530:	100e4101 	andne	r4, lr, r1, lsl #2
 534:	00070d41 	andeq	r0, r7, r1, asr #26
 538:	0000001c 	andeq	r0, r0, ip, lsl r0
 53c:	00000358 	andeq	r0, r0, r8, asr r3
 540:	200032c6 	andcs	r3, r0, r6, asr #5
 544:	00000046 	andeq	r0, r0, r6, asr #32
 548:	40080e41 	andmi	r0, r8, r1, asr #28
 54c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 550:	100e4101 	andne	r4, lr, r1, lsl #2
 554:	00070d41 	andeq	r0, r7, r1, asr #26
 558:	00000018 	andeq	r0, r0, r8, lsl r0
 55c:	00000358 	andeq	r0, r0, r8, asr r3
 560:	2000330c 	andcs	r3, r0, ip, lsl #6
 564:	0000006e 	andeq	r0, r0, lr, rrx
 568:	40080e41 	andmi	r0, r8, r1, asr #28
 56c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 570:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 574:	0000001c 	andeq	r0, r0, ip, lsl r0
 578:	00000358 	andeq	r0, r0, r8, asr r3
 57c:	2000337a 	andcs	r3, r0, sl, ror r3
 580:	00000066 	andeq	r0, r0, r6, rrx
 584:	40080e41 	andmi	r0, r8, r1, asr #28
 588:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 58c:	100e4101 	andne	r4, lr, r1, lsl #2
 590:	00070d41 	andeq	r0, r7, r1, asr #26
 594:	0000001c 	andeq	r0, r0, ip, lsl r0
 598:	00000358 	andeq	r0, r0, r8, asr r3
 59c:	200033e0 	andcs	r3, r0, r0, ror #7
 5a0:	00000180 	andeq	r0, r0, r0, lsl #3
 5a4:	40080e41 	andmi	r0, r8, r1, asr #28
 5a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5ac:	200e4101 	andcs	r4, lr, r1, lsl #2
 5b0:	00070d41 	andeq	r0, r7, r1, asr #26
 5b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5b8:	00000358 	andeq	r0, r0, r8, asr r3
 5bc:	20003560 	andcs	r3, r0, r0, ror #10
 5c0:	000001a0 	andeq	r0, r0, r0, lsr #3
 5c4:	40080e41 	andmi	r0, r8, r1, asr #28
 5c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5cc:	280e4101 	stmdacs	lr, {r0, r8, lr}
 5d0:	00070d41 	andeq	r0, r7, r1, asr #26
 5d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5d8:	00000358 	andeq	r0, r0, r8, asr r3
 5dc:	20003700 	andcs	r3, r0, r0, lsl #14
 5e0:	000000d6 	ldrdeq	r0, [r0], -r6
 5e4:	40080e41 	andmi	r0, r8, r1, asr #28
 5e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5ec:	200e4101 	andcs	r4, lr, r1, lsl #2
 5f0:	00070d41 	andeq	r0, r7, r1, asr #26
 5f4:	00000024 	andeq	r0, r0, r4, lsr #32
 5f8:	00000358 	andeq	r0, r0, r8, asr r3
 5fc:	200037d6 	ldrdcs	r3, [r0], -r6
 600:	0000011a 	andeq	r0, r0, sl, lsl r1
 604:	40100e41 	andsmi	r0, r0, r1, asr #28
 608:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 60c:	02874003 	addeq	r4, r7, #3
 610:	41018e40 	tstmi	r1, r0, asr #28
 614:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 618:	00000007 	andeq	r0, r0, r7
 61c:	0000001c 	andeq	r0, r0, ip, lsl r0
 620:	00000358 	andeq	r0, r0, r8, asr r3
 624:	200038f0 	strdcs	r3, [r0], -r0
 628:	00000052 	andeq	r0, r0, r2, asr r0
 62c:	40080e41 	andmi	r0, r8, r1, asr #28
 630:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 634:	200e4101 	andcs	r4, lr, r1, lsl #2
 638:	00070d41 	andeq	r0, r7, r1, asr #26
 63c:	0000001c 	andeq	r0, r0, ip, lsl r0
 640:	00000358 	andeq	r0, r0, r8, asr r3
 644:	20003942 	andcs	r3, r0, r2, asr #18
 648:	00000052 	andeq	r0, r0, r2, asr r0
 64c:	40080e41 	andmi	r0, r8, r1, asr #28
 650:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 654:	200e4101 	andcs	r4, lr, r1, lsl #2
 658:	00070d41 	andeq	r0, r7, r1, asr #26
 65c:	00000020 	andeq	r0, r0, r0, lsr #32
 660:	00000358 	andeq	r0, r0, r8, asr r3
 664:	20003994 	mulcs	r0, r4, r9
 668:	00000130 	andeq	r0, r0, r0, lsr r1
 66c:	400c0e41 	andmi	r0, ip, r1, asr #28
 670:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 674:	018e4002 	orreq	r4, lr, r2
 678:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 67c:	0000070d 	andeq	r0, r0, sp, lsl #14
 680:	0000001c 	andeq	r0, r0, ip, lsl r0
 684:	00000358 	andeq	r0, r0, r8, asr r3
 688:	20003ac4 	andcs	r3, r0, r4, asr #21
 68c:	00000108 	andeq	r0, r0, r8, lsl #2
 690:	40080e41 	andmi	r0, r8, r1, asr #28
 694:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 698:	100e4101 	andne	r4, lr, r1, lsl #2
 69c:	00070d41 	andeq	r0, r7, r1, asr #26
 6a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6a4:	00000358 	andeq	r0, r0, r8, asr r3
 6a8:	20003bcc 	andcs	r3, r0, ip, asr #23
 6ac:	00000082 	andeq	r0, r0, r2, lsl #1
 6b0:	40080e41 	andmi	r0, r8, r1, asr #28
 6b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6b8:	200e4101 	andcs	r4, lr, r1, lsl #2
 6bc:	18070c41 	stmdane	r7, {r0, r6, sl, fp}
 6c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6c4:	00000358 	andeq	r0, r0, r8, asr r3
 6c8:	20003c4e 	andcs	r3, r0, lr, asr #24
 6cc:	0000006a 	andeq	r0, r0, sl, rrx
 6d0:	40080e41 	andmi	r0, r8, r1, asr #28
 6d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6d8:	100e4101 	andne	r4, lr, r1, lsl #2
 6dc:	00070d41 	andeq	r0, r7, r1, asr #26
 6e0:	0000000c 	andeq	r0, r0, ip
 6e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 6e8:	7c020001 	stcvc	0, cr0, [r2], {1}
 6ec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 6f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6f4:	000006e0 	andeq	r0, r0, r0, ror #13
 6f8:	20003cb8 			; <UNDEFINED> instruction: 0x20003cb8
 6fc:	00000028 	andeq	r0, r0, r8, lsr #32
 700:	40080e41 	andmi	r0, r8, r1, asr #28
 704:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 708:	180e4101 	stmdane	lr, {r0, r8, lr}
 70c:	00070d41 	andeq	r0, r7, r1, asr #26
 710:	0000000c 	andeq	r0, r0, ip
 714:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 718:	7c020001 	stcvc	0, cr0, [r2], {1}
 71c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 720:	0000001c 	andeq	r0, r0, ip, lsl r0
 724:	00000710 	andeq	r0, r0, r0, lsl r7
 728:	20003ce0 	andcs	r3, r0, r0, ror #25
 72c:	00000028 	andeq	r0, r0, r8, lsr #32
 730:	40080e41 	andmi	r0, r8, r1, asr #28
 734:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 738:	180e4101 	stmdane	lr, {r0, r8, lr}
 73c:	00070d41 	andeq	r0, r7, r1, asr #26
 740:	0000000c 	andeq	r0, r0, ip
 744:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 748:	7c020001 	stcvc	0, cr0, [r2], {1}
 74c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 750:	00000018 	andeq	r0, r0, r8, lsl r0
 754:	00000740 	andeq	r0, r0, r0, asr #14
 758:	20003d08 	andcs	r3, r0, r8, lsl #26
 75c:	00000018 	andeq	r0, r0, r8, lsl r0
 760:	40080e41 	andmi	r0, r8, r1, asr #28
 764:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 768:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 76c:	00000018 	andeq	r0, r0, r8, lsl r0
 770:	00000740 	andeq	r0, r0, r0, asr #14
 774:	20003d20 	andcs	r3, r0, r0, lsr #26
 778:	00000020 	andeq	r0, r0, r0, lsr #32
 77c:	40080e41 	andmi	r0, r8, r1, asr #28
 780:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 784:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 788:	00000020 	andeq	r0, r0, r0, lsr #32
 78c:	00000740 	andeq	r0, r0, r0, asr #14
 790:	20003d40 	andcs	r3, r0, r0, asr #26
 794:	00000034 	andeq	r0, r0, r4, lsr r0
 798:	400c0e41 	andmi	r0, ip, r1, asr #28
 79c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 7a0:	018e4002 	orreq	r4, lr, r2
 7a4:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 7a8:	0000070d 	andeq	r0, r0, sp, lsl #14
 7ac:	0000000c 	andeq	r0, r0, ip
 7b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 7b4:	7c020001 	stcvc	0, cr0, [r2], {1}
 7b8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 7bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 7c0:	000007ac 	andeq	r0, r0, ip, lsr #15
 7c4:	20003d74 	andcs	r3, r0, r4, ror sp
 7c8:	00000044 	andeq	r0, r0, r4, asr #32
 7cc:	40080e41 	andmi	r0, r8, r1, asr #28
 7d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7d4:	180e4101 	stmdane	lr, {r0, r8, lr}
 7d8:	00070d41 	andeq	r0, r7, r1, asr #26
 7dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 7e0:	000007ac 	andeq	r0, r0, ip, lsr #15
 7e4:	20003db8 			; <UNDEFINED> instruction: 0x20003db8
 7e8:	00000050 	andeq	r0, r0, r0, asr r0
 7ec:	40080e41 	andmi	r0, r8, r1, asr #28
 7f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7f4:	180e4101 	stmdane	lr, {r0, r8, lr}
 7f8:	00070d41 	andeq	r0, r7, r1, asr #26
 7fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 800:	000007ac 	andeq	r0, r0, ip, lsr #15
 804:	20003e08 	andcs	r3, r0, r8, lsl #28
 808:	0000002a 	andeq	r0, r0, sl, lsr #32
 80c:	40080e41 	andmi	r0, r8, r1, asr #28
 810:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 814:	100e4101 	andne	r4, lr, r1, lsl #2
 818:	00070d41 	andeq	r0, r7, r1, asr #26
 81c:	0000001c 	andeq	r0, r0, ip, lsl r0
 820:	000007ac 	andeq	r0, r0, ip, lsr #15
 824:	20003e32 	andcs	r3, r0, r2, lsr lr
 828:	0000002a 	andeq	r0, r0, sl, lsr #32
 82c:	40080e41 	andmi	r0, r8, r1, asr #28
 830:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 834:	100e4101 	andne	r4, lr, r1, lsl #2
 838:	00070d41 	andeq	r0, r7, r1, asr #26
 83c:	00000020 	andeq	r0, r0, r0, lsr #32
 840:	000007ac 	andeq	r0, r0, ip, lsr #15
 844:	20003e5c 	andcs	r3, r0, ip, asr lr
 848:	00000054 	andeq	r0, r0, r4, asr r0
 84c:	400c0e41 	andmi	r0, ip, r1, asr #28
 850:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 854:	018e4002 	orreq	r4, lr, r2
 858:	41180e41 	tstmi	r8, r1, asr #28
 85c:	0000070d 	andeq	r0, r0, sp, lsl #14
 860:	00000020 	andeq	r0, r0, r0, lsr #32
 864:	000007ac 	andeq	r0, r0, ip, lsr #15
 868:	20003eb0 			; <UNDEFINED> instruction: 0x20003eb0
 86c:	00000054 	andeq	r0, r0, r4, asr r0
 870:	400c0e41 	andmi	r0, ip, r1, asr #28
 874:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 878:	018e4002 	orreq	r4, lr, r2
 87c:	41180e41 	tstmi	r8, r1, asr #28
 880:	0000070d 	andeq	r0, r0, sp, lsl #14
 884:	0000001c 	andeq	r0, r0, ip, lsl r0
 888:	000007ac 	andeq	r0, r0, ip, lsr #15
 88c:	20003f04 	andcs	r3, r0, r4, lsl #30
 890:	00000030 	andeq	r0, r0, r0, lsr r0
 894:	40080e41 	andmi	r0, r8, r1, asr #28
 898:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 89c:	100e4101 	andne	r4, lr, r1, lsl #2
 8a0:	00070d41 	andeq	r0, r7, r1, asr #26
 8a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8a8:	000007ac 	andeq	r0, r0, ip, lsr #15
 8ac:	20003f34 	andcs	r3, r0, r4, lsr pc
 8b0:	00000034 	andeq	r0, r0, r4, lsr r0
 8b4:	40080e41 	andmi	r0, r8, r1, asr #28
 8b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8bc:	100e4101 	andne	r4, lr, r1, lsl #2
 8c0:	00070d41 	andeq	r0, r7, r1, asr #26
 8c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8c8:	000007ac 	andeq	r0, r0, ip, lsr #15
 8cc:	20003f68 	andcs	r3, r0, r8, ror #30
 8d0:	0000003c 	andeq	r0, r0, ip, lsr r0
 8d4:	40080e41 	andmi	r0, r8, r1, asr #28
 8d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8dc:	100e4101 	andne	r4, lr, r1, lsl #2
 8e0:	00070d41 	andeq	r0, r7, r1, asr #26
 8e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8e8:	000007ac 	andeq	r0, r0, ip, lsr #15
 8ec:	20003fa4 	andcs	r3, r0, r4, lsr #31
 8f0:	00000050 	andeq	r0, r0, r0, asr r0
 8f4:	40080e41 	andmi	r0, r8, r1, asr #28
 8f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8fc:	180e4101 	stmdane	lr, {r0, r8, lr}
 900:	00070d41 	andeq	r0, r7, r1, asr #26
 904:	00000018 	andeq	r0, r0, r8, lsl r0
 908:	000007ac 	andeq	r0, r0, ip, lsr #15
 90c:	20003ff4 	strdcs	r3, [r0], -r4
 910:	0000009a 	muleq	r0, sl, r0
 914:	40080e41 	andmi	r0, r8, r1, asr #28
 918:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 91c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 920:	00000018 	andeq	r0, r0, r8, lsl r0
 924:	000007ac 	andeq	r0, r0, ip, lsr #15
 928:	2000408e 	andcs	r4, r0, lr, lsl #1
 92c:	0000001a 	andeq	r0, r0, sl, lsl r0
 930:	40080e41 	andmi	r0, r8, r1, asr #28
 934:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 938:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 93c:	00000018 	andeq	r0, r0, r8, lsl r0
 940:	000007ac 	andeq	r0, r0, ip, lsr #15
 944:	200040a8 	andcs	r4, r0, r8, lsr #1
 948:	00000012 	andeq	r0, r0, r2, lsl r0
 94c:	40080e41 	andmi	r0, r8, r1, asr #28
 950:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 954:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 958:	00000020 	andeq	r0, r0, r0, lsr #32
 95c:	000007ac 	andeq	r0, r0, ip, lsr #15
 960:	200040ba 	strhcs	r4, [r0], -sl
 964:	0000006a 	andeq	r0, r0, sl, rrx
 968:	400c0e41 	andmi	r0, ip, r1, asr #28
 96c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 970:	018e4002 	orreq	r4, lr, r2
 974:	41300e41 	teqmi	r0, r1, asr #28
 978:	0000070d 	andeq	r0, r0, sp, lsl #14
 97c:	0000001c 	andeq	r0, r0, ip, lsl r0
 980:	000007ac 	andeq	r0, r0, ip, lsr #15
 984:	20004124 	andcs	r4, r0, r4, lsr #2
 988:	0000005e 	andeq	r0, r0, lr, asr r0
 98c:	40080e41 	andmi	r0, r8, r1, asr #28
 990:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 994:	100e4101 	andne	r4, lr, r1, lsl #2
 998:	00070d41 	andeq	r0, r7, r1, asr #26
 99c:	0000001c 	andeq	r0, r0, ip, lsl r0
 9a0:	000007ac 	andeq	r0, r0, ip, lsr #15
 9a4:	20004182 	andcs	r4, r0, r2, lsl #3
 9a8:	0000008e 	andeq	r0, r0, lr, lsl #1
 9ac:	40080e41 	andmi	r0, r8, r1, asr #28
 9b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 9b4:	200e4101 	andcs	r4, lr, r1, lsl #2
 9b8:	00070d41 	andeq	r0, r7, r1, asr #26
 9bc:	00000020 	andeq	r0, r0, r0, lsr #32
 9c0:	000007ac 	andeq	r0, r0, ip, lsr #15
 9c4:	20004210 	andcs	r4, r0, r0, lsl r2
 9c8:	00000084 	andeq	r0, r0, r4, lsl #1
 9cc:	400c0e41 	andmi	r0, ip, r1, asr #28
 9d0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 9d4:	018e4002 	orreq	r4, lr, r2
 9d8:	41380e41 	teqmi	r8, r1, asr #28
 9dc:	0000070d 	andeq	r0, r0, sp, lsl #14
 9e0:	0000000c 	andeq	r0, r0, ip
 9e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 9e8:	7c020001 	stcvc	0, cr0, [r2], {1}
 9ec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 9f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 9f4:	000009e0 	andeq	r0, r0, r0, ror #19
 9f8:	20004294 	mulcs	r0, r4, r2
 9fc:	0000005a 	andeq	r0, r0, sl, asr r0
 a00:	40080e41 	andmi	r0, r8, r1, asr #28
 a04:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a08:	180e4101 	stmdane	lr, {r0, r8, lr}
 a0c:	00070d41 	andeq	r0, r7, r1, asr #26
 a10:	0000001c 	andeq	r0, r0, ip, lsl r0
 a14:	000009e0 	andeq	r0, r0, r0, ror #19
 a18:	200042ee 	andcs	r4, r0, lr, ror #5
 a1c:	0000003a 	andeq	r0, r0, sl, lsr r0
 a20:	40080e41 	andmi	r0, r8, r1, asr #28
 a24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a28:	180e4101 	stmdane	lr, {r0, r8, lr}
 a2c:	00070d41 	andeq	r0, r7, r1, asr #26
 a30:	0000000c 	andeq	r0, r0, ip
 a34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a38:	7c020001 	stcvc	0, cr0, [r2], {1}
 a3c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a40:	0000001c 	andeq	r0, r0, ip, lsl r0
 a44:	00000a30 	andeq	r0, r0, r0, lsr sl
 a48:	20004328 	andcs	r4, r0, r8, lsr #6
 a4c:	00000074 	andeq	r0, r0, r4, ror r0
 a50:	40080e41 	andmi	r0, r8, r1, asr #28
 a54:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a58:	180e4101 	stmdane	lr, {r0, r8, lr}
 a5c:	00070d41 	andeq	r0, r7, r1, asr #26
 a60:	00000020 	andeq	r0, r0, r0, lsr #32
 a64:	00000a30 	andeq	r0, r0, r0, lsr sl
 a68:	2000439c 	mulcs	r0, ip, r3
 a6c:	00000074 	andeq	r0, r0, r4, ror r0
 a70:	400c0e41 	andmi	r0, ip, r1, asr #28
 a74:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 a78:	018e4002 	orreq	r4, lr, r2
 a7c:	41180e41 	tstmi	r8, r1, asr #28
 a80:	0000070d 	andeq	r0, r0, sp, lsl #14
 a84:	0000000c 	andeq	r0, r0, ip
 a88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a8c:	7c020001 	stcvc	0, cr0, [r2], {1}
 a90:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a94:	0000001c 	andeq	r0, r0, ip, lsl r0
 a98:	00000a84 	andeq	r0, r0, r4, lsl #21
 a9c:	20004410 	andcs	r4, r0, r0, lsl r4
 aa0:	00000074 	andeq	r0, r0, r4, ror r0
 aa4:	40080e41 	andmi	r0, r8, r1, asr #28
 aa8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 aac:	180e4101 	stmdane	lr, {r0, r8, lr}
 ab0:	00070d41 	andeq	r0, r7, r1, asr #26
 ab4:	00000020 	andeq	r0, r0, r0, lsr #32
 ab8:	00000a84 	andeq	r0, r0, r4, lsl #21
 abc:	20004484 	andcs	r4, r0, r4, lsl #9
 ac0:	00000074 	andeq	r0, r0, r4, ror r0
 ac4:	400c0e41 	andmi	r0, ip, r1, asr #28
 ac8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 acc:	018e4002 	orreq	r4, lr, r2
 ad0:	41180e41 	tstmi	r8, r1, asr #28
 ad4:	0000070d 	andeq	r0, r0, sp, lsl #14
 ad8:	0000000c 	andeq	r0, r0, ip
 adc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 ae0:	7c020001 	stcvc	0, cr0, [r2], {1}
 ae4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 ae8:	0000001c 	andeq	r0, r0, ip, lsl r0
 aec:	00000ad8 	ldrdeq	r0, [r0], -r8
 af0:	200044f8 	strdcs	r4, [r0], -r8
 af4:	00000074 	andeq	r0, r0, r4, ror r0
 af8:	40080e41 	andmi	r0, r8, r1, asr #28
 afc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b00:	180e4101 	stmdane	lr, {r0, r8, lr}
 b04:	00070d41 	andeq	r0, r7, r1, asr #26
 b08:	00000020 	andeq	r0, r0, r0, lsr #32
 b0c:	00000ad8 	ldrdeq	r0, [r0], -r8
 b10:	2000456c 	andcs	r4, r0, ip, ror #10
 b14:	00000074 	andeq	r0, r0, r4, ror r0
 b18:	400c0e41 	andmi	r0, ip, r1, asr #28
 b1c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 b20:	018e4002 	orreq	r4, lr, r2
 b24:	41180e41 	tstmi	r8, r1, asr #28
 b28:	0000070d 	andeq	r0, r0, sp, lsl #14
 b2c:	0000000c 	andeq	r0, r0, ip
 b30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 b34:	7c010001 	stcvc	0, cr0, [r1], {1}
 b38:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 b3c:	0000000c 	andeq	r0, r0, ip
 b40:	00000b2c 	andeq	r0, r0, ip, lsr #22
 b44:	200045e1 	andcs	r4, r0, r1, ror #11
 b48:	000001cc 	andeq	r0, r0, ip, asr #3
