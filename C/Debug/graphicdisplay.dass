
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#endif
}

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f8fa 	bl	200001fc <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:
void init_app( void ) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*portModer = 0x55555555;
20000014:	4b05      	ldr	r3, [pc, #20]	; (2000002c <init_app+0x1c>)
20000016:	4a06      	ldr	r2, [pc, #24]	; (20000030 <init_app+0x20>)
20000018:	601a      	str	r2, [r3, #0]
	set_up_DIL();
2000001a:	f002 fbb9 	bl	20002790 <set_up_DIL>
	graphic_initialize();
2000001e:	f001 feb9 	bl	20001d94 <graphic_initialize>
	graphic_clear_screen();
20000022:	f001 feee 	bl	20001e02 <graphic_clear_screen>
}
20000026:	46c0      	nop			; (mov r8, r8)
20000028:	46bd      	mov	sp, r7
2000002a:	bd80      	pop	{r7, pc}
2000002c:	40021000 	andmi	r1, r2, r0
20000030:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000034 <initSprites>:
sprite tempTitleLight;
sprite tempPressBlack;
sprite tempPressGray;
sprite tempPressLight;

void initSprites( void ) {
20000034:	b580      	push	{r7, lr}
20000036:	b08a      	sub	sp, #40	; 0x28
20000038:	af00      	add	r7, sp, #0
	sprite *monsterPointer = &tempMonster;
2000003a:	4b49      	ldr	r3, [pc, #292]	; (20000160 <initSprites+0x12c>)
2000003c:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(monsterPointer, monster_black_bits, monster_black_width, monster_black_height);
2000003e:	4949      	ldr	r1, [pc, #292]	; (20000164 <initSprites+0x130>)
20000040:	6a78      	ldr	r0, [r7, #36]	; 0x24
20000042:	231e      	movs	r3, #30
20000044:	221e      	movs	r2, #30
20000046:	f002 fb8f 	bl	20002768 <load_sprite>
	monster = monsterPointer;
2000004a:	4b47      	ldr	r3, [pc, #284]	; (20000168 <initSprites+0x134>)
2000004c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000004e:	601a      	str	r2, [r3, #0]
	
	sprite *monsterPointer2 = &tempMonsterLight;
20000050:	4b46      	ldr	r3, [pc, #280]	; (2000016c <initSprites+0x138>)
20000052:	623b      	str	r3, [r7, #32]
	load_sprite(monsterPointer2, monster_light_bits, monster_light_width, monster_light_height);
20000054:	4946      	ldr	r1, [pc, #280]	; (20000170 <initSprites+0x13c>)
20000056:	6a38      	ldr	r0, [r7, #32]
20000058:	231e      	movs	r3, #30
2000005a:	221e      	movs	r2, #30
2000005c:	f002 fb84 	bl	20002768 <load_sprite>
	monsterLight = monsterPointer2;
20000060:	4b44      	ldr	r3, [pc, #272]	; (20000174 <initSprites+0x140>)
20000062:	6a3a      	ldr	r2, [r7, #32]
20000064:	601a      	str	r2, [r3, #0]

	sprite *monsterPointer3 = &tempMonsterGray;
20000066:	4b44      	ldr	r3, [pc, #272]	; (20000178 <initSprites+0x144>)
20000068:	61fb      	str	r3, [r7, #28]
	load_sprite(monsterPointer3, monster_gray_bits, monster_gray_width, monster_gray_height);
2000006a:	4944      	ldr	r1, [pc, #272]	; (2000017c <initSprites+0x148>)
2000006c:	69f8      	ldr	r0, [r7, #28]
2000006e:	231e      	movs	r3, #30
20000070:	221e      	movs	r2, #30
20000072:	f002 fb79 	bl	20002768 <load_sprite>
	monsterGray = monsterPointer3;
20000076:	4b42      	ldr	r3, [pc, #264]	; (20000180 <initSprites+0x14c>)
20000078:	69fa      	ldr	r2, [r7, #28]
2000007a:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempBg;
2000007c:	4b41      	ldr	r3, [pc, #260]	; (20000184 <initSprites+0x150>)
2000007e:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer4, bg_bits, bg_width, bg_height);
20000080:	4941      	ldr	r1, [pc, #260]	; (20000188 <initSprites+0x154>)
20000082:	69b8      	ldr	r0, [r7, #24]
20000084:	2340      	movs	r3, #64	; 0x40
20000086:	2280      	movs	r2, #128	; 0x80
20000088:	f002 fb6e 	bl	20002768 <load_sprite>
	bg = pointer4;
2000008c:	4b3f      	ldr	r3, [pc, #252]	; (2000018c <initSprites+0x158>)
2000008e:	69ba      	ldr	r2, [r7, #24]
20000090:	601a      	str	r2, [r3, #0]
	
	sprite *pointer5 = &tempCastleBlack;
20000092:	4b3f      	ldr	r3, [pc, #252]	; (20000190 <initSprites+0x15c>)
20000094:	617b      	str	r3, [r7, #20]
	load_sprite(pointer5, castle_black_bits, castle_black_width, castle_black_height);
20000096:	493f      	ldr	r1, [pc, #252]	; (20000194 <initSprites+0x160>)
20000098:	6978      	ldr	r0, [r7, #20]
2000009a:	2340      	movs	r3, #64	; 0x40
2000009c:	2280      	movs	r2, #128	; 0x80
2000009e:	f002 fb63 	bl	20002768 <load_sprite>
	castleBlack = pointer5;
200000a2:	4b3d      	ldr	r3, [pc, #244]	; (20000198 <initSprites+0x164>)
200000a4:	697a      	ldr	r2, [r7, #20]
200000a6:	601a      	str	r2, [r3, #0]
	
	sprite *pointer6 = &tempCastleGray;
200000a8:	4b3c      	ldr	r3, [pc, #240]	; (2000019c <initSprites+0x168>)
200000aa:	613b      	str	r3, [r7, #16]
	load_sprite(pointer6, castle_gray_bits, castle_black_width, castle_black_height);
200000ac:	493c      	ldr	r1, [pc, #240]	; (200001a0 <initSprites+0x16c>)
200000ae:	6938      	ldr	r0, [r7, #16]
200000b0:	2340      	movs	r3, #64	; 0x40
200000b2:	2280      	movs	r2, #128	; 0x80
200000b4:	f002 fb58 	bl	20002768 <load_sprite>
	castleGray = pointer6;
200000b8:	4b3a      	ldr	r3, [pc, #232]	; (200001a4 <initSprites+0x170>)
200000ba:	693a      	ldr	r2, [r7, #16]
200000bc:	601a      	str	r2, [r3, #0]
	
	sprite *pointer7 = &tempCastleLight;
200000be:	4b3a      	ldr	r3, [pc, #232]	; (200001a8 <initSprites+0x174>)
200000c0:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer7, castle_light_bits, castle_black_width, castle_black_height);
200000c2:	493a      	ldr	r1, [pc, #232]	; (200001ac <initSprites+0x178>)
200000c4:	68f8      	ldr	r0, [r7, #12]
200000c6:	2340      	movs	r3, #64	; 0x40
200000c8:	2280      	movs	r2, #128	; 0x80
200000ca:	f002 fb4d 	bl	20002768 <load_sprite>
	castleLight = pointer7;
200000ce:	4b38      	ldr	r3, [pc, #224]	; (200001b0 <initSprites+0x17c>)
200000d0:	68fa      	ldr	r2, [r7, #12]
200000d2:	601a      	str	r2, [r3, #0]
	
	sprite *pointer8 = &tempTitleLight;
200000d4:	4b37      	ldr	r3, [pc, #220]	; (200001b4 <initSprites+0x180>)
200000d6:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer8, title_light_bits, title_black_width, title_black_height);
200000d8:	4937      	ldr	r1, [pc, #220]	; (200001b8 <initSprites+0x184>)
200000da:	68b8      	ldr	r0, [r7, #8]
200000dc:	231e      	movs	r3, #30
200000de:	2232      	movs	r2, #50	; 0x32
200000e0:	f002 fb42 	bl	20002768 <load_sprite>
	titleLight = pointer8;
200000e4:	4b35      	ldr	r3, [pc, #212]	; (200001bc <initSprites+0x188>)
200000e6:	68ba      	ldr	r2, [r7, #8]
200000e8:	601a      	str	r2, [r3, #0]
	sprite *pointer9 = &tempTitleGray;
200000ea:	4b35      	ldr	r3, [pc, #212]	; (200001c0 <initSprites+0x18c>)
200000ec:	607b      	str	r3, [r7, #4]
	load_sprite(pointer9, title_gray_bits, title_black_width, title_black_height);
200000ee:	4935      	ldr	r1, [pc, #212]	; (200001c4 <initSprites+0x190>)
200000f0:	6878      	ldr	r0, [r7, #4]
200000f2:	231e      	movs	r3, #30
200000f4:	2232      	movs	r2, #50	; 0x32
200000f6:	f002 fb37 	bl	20002768 <load_sprite>
	titleGray = pointer9;
200000fa:	4b33      	ldr	r3, [pc, #204]	; (200001c8 <initSprites+0x194>)
200000fc:	687a      	ldr	r2, [r7, #4]
200000fe:	601a      	str	r2, [r3, #0]
	sprite *pointer10 = &tempTitleBlack;
20000100:	4b32      	ldr	r3, [pc, #200]	; (200001cc <initSprites+0x198>)
20000102:	603b      	str	r3, [r7, #0]
	load_sprite(pointer10, title_black_bits, title_black_width, title_black_height);
20000104:	4932      	ldr	r1, [pc, #200]	; (200001d0 <initSprites+0x19c>)
20000106:	6838      	ldr	r0, [r7, #0]
20000108:	231e      	movs	r3, #30
2000010a:	2232      	movs	r2, #50	; 0x32
2000010c:	f002 fb2c 	bl	20002768 <load_sprite>
	titleBlack = pointer10;	
20000110:	4b30      	ldr	r3, [pc, #192]	; (200001d4 <initSprites+0x1a0>)
20000112:	683a      	ldr	r2, [r7, #0]
20000114:	601a      	str	r2, [r3, #0]
	
	pointer8 = &tempPressLight;
20000116:	4b30      	ldr	r3, [pc, #192]	; (200001d8 <initSprites+0x1a4>)
20000118:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer8, press_light_bits, press_black_width, press_black_height);
2000011a:	4930      	ldr	r1, [pc, #192]	; (200001dc <initSprites+0x1a8>)
2000011c:	68b8      	ldr	r0, [r7, #8]
2000011e:	2323      	movs	r3, #35	; 0x23
20000120:	223c      	movs	r2, #60	; 0x3c
20000122:	f002 fb21 	bl	20002768 <load_sprite>
	pressLight = pointer8;
20000126:	4b2e      	ldr	r3, [pc, #184]	; (200001e0 <initSprites+0x1ac>)
20000128:	68ba      	ldr	r2, [r7, #8]
2000012a:	601a      	str	r2, [r3, #0]
	pointer9 = &tempPressGray;
2000012c:	4b2d      	ldr	r3, [pc, #180]	; (200001e4 <initSprites+0x1b0>)
2000012e:	607b      	str	r3, [r7, #4]
	load_sprite(pointer9, press_gray_bits, press_black_width, press_black_height);
20000130:	492d      	ldr	r1, [pc, #180]	; (200001e8 <initSprites+0x1b4>)
20000132:	6878      	ldr	r0, [r7, #4]
20000134:	2323      	movs	r3, #35	; 0x23
20000136:	223c      	movs	r2, #60	; 0x3c
20000138:	f002 fb16 	bl	20002768 <load_sprite>
	pressGray = pointer9;
2000013c:	4b2b      	ldr	r3, [pc, #172]	; (200001ec <initSprites+0x1b8>)
2000013e:	687a      	ldr	r2, [r7, #4]
20000140:	601a      	str	r2, [r3, #0]
	pointer10 = &tempPressBlack;
20000142:	4b2b      	ldr	r3, [pc, #172]	; (200001f0 <initSprites+0x1bc>)
20000144:	603b      	str	r3, [r7, #0]
	load_sprite(pointer10, press_black_bits, press_black_width, press_black_height);
20000146:	492b      	ldr	r1, [pc, #172]	; (200001f4 <initSprites+0x1c0>)
20000148:	6838      	ldr	r0, [r7, #0]
2000014a:	2323      	movs	r3, #35	; 0x23
2000014c:	223c      	movs	r2, #60	; 0x3c
2000014e:	f002 fb0b 	bl	20002768 <load_sprite>
	pressBlack = pointer10;	
20000152:	4b29      	ldr	r3, [pc, #164]	; (200001f8 <initSprites+0x1c4>)
20000154:	683a      	ldr	r2, [r7, #0]
20000156:	601a      	str	r2, [r3, #0]
	
	
}
20000158:	46c0      	nop			; (mov r8, r8)
2000015a:	46bd      	mov	sp, r7
2000015c:	b00a      	add	sp, #40	; 0x28
2000015e:	bd80      	pop	{r7, pc}
20000160:	2000319c 	mulcs	r0, ip, r1
20000164:	200054b0 			; <UNDEFINED> instruction: 0x200054b0
20000168:	20003170 	andcs	r3, r0, r0, ror r1
2000016c:	200031f4 	strdcs	r3, [r0], -r4
20000170:	20005528 	andcs	r5, r0, r8, lsr #10
20000174:	2000321c 	andcs	r3, r0, ip, lsl r2
20000178:	200031bc 			; <UNDEFINED> instruction: 0x200031bc
2000017c:	200055a0 	andcs	r5, r0, r0, lsr #11
20000180:	20003230 	andcs	r3, r0, r0, lsr r2
20000184:	20003234 	andcs	r3, r0, r4, lsr r2
20000188:	200067dc 	ldrdcs	r6, [r0], -ip
2000018c:	200031b8 			; <UNDEFINED> instruction: 0x200031b8
20000190:	20003174 	andcs	r3, r0, r4, ror r1
20000194:	20005960 	andcs	r5, r0, r0, ror #18
20000198:	20003198 	mulcs	r0, r8, r1
2000019c:	20003210 	andcs	r3, r0, r0, lsl r2
200001a0:	20005d60 	andcs	r5, r0, r0, ror #26
200001a4:	20003224 	andcs	r3, r0, r4, lsr #4
200001a8:	200031e4 	andcs	r3, r0, r4, ror #3
200001ac:	20006160 	andcs	r6, r0, r0, ror #2
200001b0:	200031d4 	ldrdcs	r3, [r0], -r4
200001b4:	200031c8 	andcs	r3, r0, r8, asr #3
200001b8:	20006560 	andcs	r6, r0, r0, ror #10
200001bc:	20003220 	andcs	r3, r0, r0, lsr #4
200001c0:	2000318c 	andcs	r3, r0, ip, lsl #3
200001c4:	20006634 	andcs	r6, r0, r4, lsr r6
200001c8:	2000320c 	andcs	r3, r0, ip, lsl #4
200001cc:	200031ac 	andcs	r3, r0, ip, lsr #3
200001d0:	20006708 	andcs	r6, r0, r8, lsl #14
200001d4:	20003240 	andcs	r3, r0, r0, asr #4
200001d8:	200031d8 	ldrdcs	r3, [r0], -r8
200001dc:	20005730 	andcs	r5, r0, r0, lsr r7
200001e0:	200031a8 	andcs	r3, r0, r8, lsr #3
200001e4:	20003180 	andcs	r3, r0, r0, lsl #3
200001e8:	20005848 	andcs	r5, r0, r8, asr #16
200001ec:	200031f0 	strdcs	r3, [r0], -r0
200001f0:	20003200 	andcs	r3, r0, r0, lsl #4
200001f4:	20005618 	andcs	r5, r0, r8, lsl r6
200001f8:	2000322c 	andcs	r3, r0, ip, lsr #4

200001fc <main>:
	
int counter = 0;
int current_screen = START_SCREEN;
void main(void)
{
200001fc:	b590      	push	{r4, r7, lr}
200001fe:	4cfe      	ldr	r4, [pc, #1016]	; (200005f8 <main+0x3fc>)
20000200:	44a5      	add	sp, r4
20000202:	af00      	add	r7, sp, #0
 * 2. Draw it with method above.
 * 3. Show frame with some long fram_length for testing.
 * 
 * */
	
	init_app();	
20000204:	f7ff ff04 	bl	20000010 <init_app>
	initSprites();
20000208:	f7ff ff14 	bl	20000034 <initSprites>
	
	GameObject monsterObj;
	Image monsterImage;
	Image monsterImages[] = {monsterImage};
2000020c:	23bf      	movs	r3, #191	; 0xbf
2000020e:	009b      	lsls	r3, r3, #2
20000210:	18fb      	adds	r3, r7, r3
20000212:	22c2      	movs	r2, #194	; 0xc2
20000214:	0092      	lsls	r2, r2, #2
20000216:	18ba      	adds	r2, r7, r2
20000218:	ca13      	ldmia	r2!, {r0, r1, r4}
2000021a:	c313      	stmia	r3!, {r0, r1, r4}
	monsterObj.images = monsterImages;
2000021c:	23c5      	movs	r3, #197	; 0xc5
2000021e:	009b      	lsls	r3, r3, #2
20000220:	18fb      	adds	r3, r7, r3
20000222:	22bf      	movs	r2, #191	; 0xbf
20000224:	0092      	lsls	r2, r2, #2
20000226:	18ba      	adds	r2, r7, r2
20000228:	601a      	str	r2, [r3, #0]
	load_image(&monsterObj.images[0], monster, monsterGray, monsterLight);
2000022a:	23c5      	movs	r3, #197	; 0xc5
2000022c:	009b      	lsls	r3, r3, #2
2000022e:	18fb      	adds	r3, r7, r3
20000230:	6818      	ldr	r0, [r3, #0]
20000232:	4bf2      	ldr	r3, [pc, #968]	; (200005fc <main+0x400>)
20000234:	6819      	ldr	r1, [r3, #0]
20000236:	4bf2      	ldr	r3, [pc, #968]	; (20000600 <main+0x404>)
20000238:	681a      	ldr	r2, [r3, #0]
2000023a:	4bf2      	ldr	r3, [pc, #968]	; (20000604 <main+0x408>)
2000023c:	681b      	ldr	r3, [r3, #0]
2000023e:	f002 fa7f 	bl	20002740 <load_image>
	monsterObj.xPos = 30;
20000242:	23c5      	movs	r3, #197	; 0xc5
20000244:	009b      	lsls	r3, r3, #2
20000246:	18fb      	adds	r3, r7, r3
20000248:	221e      	movs	r2, #30
2000024a:	605a      	str	r2, [r3, #4]
	monsterObj.yPos = 4;
2000024c:	23c5      	movs	r3, #197	; 0xc5
2000024e:	009b      	lsls	r3, r3, #2
20000250:	18fb      	adds	r3, r7, r3
20000252:	2204      	movs	r2, #4
20000254:	609a      	str	r2, [r3, #8]
	monsterObj.current_frame = 0;
20000256:	23c5      	movs	r3, #197	; 0xc5
20000258:	009b      	lsls	r3, r3, #2
2000025a:	18fb      	adds	r3, r7, r3
2000025c:	2200      	movs	r2, #0
2000025e:	615a      	str	r2, [r3, #20]
	monsterObj.update = playerUpdate;
20000260:	23c5      	movs	r3, #197	; 0xc5
20000262:	009b      	lsls	r3, r3, #2
20000264:	18fb      	adds	r3, r7, r3
20000266:	4ae8      	ldr	r2, [pc, #928]	; (20000608 <main+0x40c>)
20000268:	60da      	str	r2, [r3, #12]
	
	GameObject titleObj;
	Image titleImage;
	Image titleImages[] = {titleImage};
2000026a:	23b0      	movs	r3, #176	; 0xb0
2000026c:	009b      	lsls	r3, r3, #2
2000026e:	18fb      	adds	r3, r7, r3
20000270:	22b3      	movs	r2, #179	; 0xb3
20000272:	0092      	lsls	r2, r2, #2
20000274:	18ba      	adds	r2, r7, r2
20000276:	ca13      	ldmia	r2!, {r0, r1, r4}
20000278:	c313      	stmia	r3!, {r0, r1, r4}
	titleObj.images = titleImages;
2000027a:	23b6      	movs	r3, #182	; 0xb6
2000027c:	009b      	lsls	r3, r3, #2
2000027e:	18fb      	adds	r3, r7, r3
20000280:	22b0      	movs	r2, #176	; 0xb0
20000282:	0092      	lsls	r2, r2, #2
20000284:	18ba      	adds	r2, r7, r2
20000286:	601a      	str	r2, [r3, #0]
	load_image(&titleObj.images[0], titleBlack, titleGray, titleLight);
20000288:	23b6      	movs	r3, #182	; 0xb6
2000028a:	009b      	lsls	r3, r3, #2
2000028c:	18fb      	adds	r3, r7, r3
2000028e:	6818      	ldr	r0, [r3, #0]
20000290:	4bde      	ldr	r3, [pc, #888]	; (2000060c <main+0x410>)
20000292:	6819      	ldr	r1, [r3, #0]
20000294:	4bde      	ldr	r3, [pc, #888]	; (20000610 <main+0x414>)
20000296:	681a      	ldr	r2, [r3, #0]
20000298:	4bde      	ldr	r3, [pc, #888]	; (20000614 <main+0x418>)
2000029a:	681b      	ldr	r3, [r3, #0]
2000029c:	f002 fa50 	bl	20002740 <load_image>
	titleObj.xPos = 1;
200002a0:	23b6      	movs	r3, #182	; 0xb6
200002a2:	009b      	lsls	r3, r3, #2
200002a4:	18fb      	adds	r3, r7, r3
200002a6:	2201      	movs	r2, #1
200002a8:	605a      	str	r2, [r3, #4]
	titleObj.yPos = -40;
200002aa:	23b6      	movs	r3, #182	; 0xb6
200002ac:	009b      	lsls	r3, r3, #2
200002ae:	18fb      	adds	r3, r7, r3
200002b0:	2228      	movs	r2, #40	; 0x28
200002b2:	4252      	negs	r2, r2
200002b4:	609a      	str	r2, [r3, #8]
	titleObj.current_frame = 0;
200002b6:	23b6      	movs	r3, #182	; 0xb6
200002b8:	009b      	lsls	r3, r3, #2
200002ba:	18fb      	adds	r3, r7, r3
200002bc:	2200      	movs	r2, #0
200002be:	615a      	str	r2, [r3, #20]
	
	GameObject pressObj;
	Image pressImage;
	Image pressImages[] = {pressImage};
200002c0:	23a1      	movs	r3, #161	; 0xa1
200002c2:	009b      	lsls	r3, r3, #2
200002c4:	18fb      	adds	r3, r7, r3
200002c6:	22a4      	movs	r2, #164	; 0xa4
200002c8:	0092      	lsls	r2, r2, #2
200002ca:	18ba      	adds	r2, r7, r2
200002cc:	ca13      	ldmia	r2!, {r0, r1, r4}
200002ce:	c313      	stmia	r3!, {r0, r1, r4}
	pressObj.images = pressImages;
200002d0:	23a7      	movs	r3, #167	; 0xa7
200002d2:	009b      	lsls	r3, r3, #2
200002d4:	18fb      	adds	r3, r7, r3
200002d6:	22a1      	movs	r2, #161	; 0xa1
200002d8:	0092      	lsls	r2, r2, #2
200002da:	18ba      	adds	r2, r7, r2
200002dc:	601a      	str	r2, [r3, #0]
	load_image(&pressObj.images[0], pressBlack, pressLight, pressGray);
200002de:	23a7      	movs	r3, #167	; 0xa7
200002e0:	009b      	lsls	r3, r3, #2
200002e2:	18fb      	adds	r3, r7, r3
200002e4:	6818      	ldr	r0, [r3, #0]
200002e6:	4bcc      	ldr	r3, [pc, #816]	; (20000618 <main+0x41c>)
200002e8:	6819      	ldr	r1, [r3, #0]
200002ea:	4bcc      	ldr	r3, [pc, #816]	; (2000061c <main+0x420>)
200002ec:	681a      	ldr	r2, [r3, #0]
200002ee:	4bcc      	ldr	r3, [pc, #816]	; (20000620 <main+0x424>)
200002f0:	681b      	ldr	r3, [r3, #0]
200002f2:	f002 fa25 	bl	20002740 <load_image>
	pressObj.xPos = 65-30;
200002f6:	23a7      	movs	r3, #167	; 0xa7
200002f8:	009b      	lsls	r3, r3, #2
200002fa:	18fb      	adds	r3, r7, r3
200002fc:	2223      	movs	r2, #35	; 0x23
200002fe:	605a      	str	r2, [r3, #4]
	pressObj.yPos = 29-15;
20000300:	23a7      	movs	r3, #167	; 0xa7
20000302:	009b      	lsls	r3, r3, #2
20000304:	18fb      	adds	r3, r7, r3
20000306:	220e      	movs	r2, #14
20000308:	609a      	str	r2, [r3, #8]
	pressObj.current_frame = 0;
2000030a:	23a7      	movs	r3, #167	; 0xa7
2000030c:	009b      	lsls	r3, r3, #2
2000030e:	18fb      	adds	r3, r7, r3
20000310:	2200      	movs	r2, #0
20000312:	615a      	str	r2, [r3, #20]
	
	GameObject castleObj;
	Image castleImage;
	Image castleImages[] = {castleImage};
20000314:	4bc3      	ldr	r3, [pc, #780]	; (20000624 <main+0x428>)
20000316:	22d2      	movs	r2, #210	; 0xd2
20000318:	0092      	lsls	r2, r2, #2
2000031a:	4694      	mov	ip, r2
2000031c:	44bc      	add	ip, r7
2000031e:	4463      	add	r3, ip
20000320:	2295      	movs	r2, #149	; 0x95
20000322:	0092      	lsls	r2, r2, #2
20000324:	18ba      	adds	r2, r7, r2
20000326:	ca13      	ldmia	r2!, {r0, r1, r4}
20000328:	c313      	stmia	r3!, {r0, r1, r4}
	castleObj.images = castleImages;
2000032a:	2398      	movs	r3, #152	; 0x98
2000032c:	009b      	lsls	r3, r3, #2
2000032e:	18fb      	adds	r3, r7, r3
20000330:	2292      	movs	r2, #146	; 0x92
20000332:	0092      	lsls	r2, r2, #2
20000334:	18ba      	adds	r2, r7, r2
20000336:	601a      	str	r2, [r3, #0]
	load_image(&castleObj.images[0], castleBlack, castleGray, castleLight);
20000338:	2398      	movs	r3, #152	; 0x98
2000033a:	009b      	lsls	r3, r3, #2
2000033c:	18fb      	adds	r3, r7, r3
2000033e:	6818      	ldr	r0, [r3, #0]
20000340:	4bb9      	ldr	r3, [pc, #740]	; (20000628 <main+0x42c>)
20000342:	6819      	ldr	r1, [r3, #0]
20000344:	4bb9      	ldr	r3, [pc, #740]	; (2000062c <main+0x430>)
20000346:	681a      	ldr	r2, [r3, #0]
20000348:	4bb9      	ldr	r3, [pc, #740]	; (20000630 <main+0x434>)
2000034a:	681b      	ldr	r3, [r3, #0]
2000034c:	f002 f9f8 	bl	20002740 <load_image>
	castleObj.xPos = 1;
20000350:	2398      	movs	r3, #152	; 0x98
20000352:	009b      	lsls	r3, r3, #2
20000354:	18fb      	adds	r3, r7, r3
20000356:	2201      	movs	r2, #1
20000358:	605a      	str	r2, [r3, #4]
	castleObj.yPos = 1;
2000035a:	2398      	movs	r3, #152	; 0x98
2000035c:	009b      	lsls	r3, r3, #2
2000035e:	18fb      	adds	r3, r7, r3
20000360:	2201      	movs	r2, #1
20000362:	609a      	str	r2, [r3, #8]
	castleObj.current_frame = 0;
20000364:	2398      	movs	r3, #152	; 0x98
20000366:	009b      	lsls	r3, r3, #2
20000368:	18fb      	adds	r3, r7, r3
2000036a:	2200      	movs	r2, #0
2000036c:	615a      	str	r2, [r3, #20]
	
	GameObject indoors;
	init_indoors( &indoors );
2000036e:	2389      	movs	r3, #137	; 0x89
20000370:	009b      	lsls	r3, r3, #2
20000372:	18fb      	adds	r3, r7, r3
20000374:	0018      	movs	r0, r3
20000376:	f002 fd55 	bl	20002e24 <init_indoors>
	indoors.xPos = 1;
2000037a:	4bae      	ldr	r3, [pc, #696]	; (20000634 <main+0x438>)
2000037c:	22d2      	movs	r2, #210	; 0xd2
2000037e:	0092      	lsls	r2, r2, #2
20000380:	4694      	mov	ip, r2
20000382:	44bc      	add	ip, r7
20000384:	4463      	add	r3, ip
20000386:	2201      	movs	r2, #1
20000388:	605a      	str	r2, [r3, #4]
	indoors.yPos = 1;
2000038a:	4baa      	ldr	r3, [pc, #680]	; (20000634 <main+0x438>)
2000038c:	22d2      	movs	r2, #210	; 0xd2
2000038e:	0092      	lsls	r2, r2, #2
20000390:	4694      	mov	ip, r2
20000392:	44bc      	add	ip, r7
20000394:	4463      	add	r3, ip
20000396:	2201      	movs	r2, #1
20000398:	609a      	str	r2, [r3, #8]
	
	GameObject indoors2;
	init_indoors2( &indoors2 );
2000039a:	2380      	movs	r3, #128	; 0x80
2000039c:	009b      	lsls	r3, r3, #2
2000039e:	18fb      	adds	r3, r7, r3
200003a0:	0018      	movs	r0, r3
200003a2:	f002 fdb3 	bl	20002f0c <init_indoors2>
	indoors2.xPos = 1;
200003a6:	4ba4      	ldr	r3, [pc, #656]	; (20000638 <main+0x43c>)
200003a8:	22d2      	movs	r2, #210	; 0xd2
200003aa:	0092      	lsls	r2, r2, #2
200003ac:	4694      	mov	ip, r2
200003ae:	44bc      	add	ip, r7
200003b0:	4463      	add	r3, ip
200003b2:	2201      	movs	r2, #1
200003b4:	605a      	str	r2, [r3, #4]
	indoors2.yPos = 1;
200003b6:	4ba0      	ldr	r3, [pc, #640]	; (20000638 <main+0x43c>)
200003b8:	22d2      	movs	r2, #210	; 0xd2
200003ba:	0092      	lsls	r2, r2, #2
200003bc:	4694      	mov	ip, r2
200003be:	44bc      	add	ip, r7
200003c0:	4463      	add	r3, ip
200003c2:	2201      	movs	r2, #1
200003c4:	609a      	str	r2, [r3, #8]
	
	GameObject bird;
	init_bird( &bird );
200003c6:	23ee      	movs	r3, #238	; 0xee
200003c8:	005b      	lsls	r3, r3, #1
200003ca:	18fb      	adds	r3, r7, r3
200003cc:	0018      	movs	r0, r3
200003ce:	f001 f8cd 	bl	2000156c <init_bird>
	bird.xPos = 180;
200003d2:	4b9a      	ldr	r3, [pc, #616]	; (2000063c <main+0x440>)
200003d4:	22d2      	movs	r2, #210	; 0xd2
200003d6:	0092      	lsls	r2, r2, #2
200003d8:	4694      	mov	ip, r2
200003da:	44bc      	add	ip, r7
200003dc:	4463      	add	r3, ip
200003de:	22b4      	movs	r2, #180	; 0xb4
200003e0:	605a      	str	r2, [r3, #4]
	bird.yPos = 40;
200003e2:	4b96      	ldr	r3, [pc, #600]	; (2000063c <main+0x440>)
200003e4:	22d2      	movs	r2, #210	; 0xd2
200003e6:	0092      	lsls	r2, r2, #2
200003e8:	4694      	mov	ip, r2
200003ea:	44bc      	add	ip, r7
200003ec:	4463      	add	r3, ip
200003ee:	2228      	movs	r2, #40	; 0x28
200003f0:	609a      	str	r2, [r3, #8]
	bird.update = gameObjectUpdate;
200003f2:	4b92      	ldr	r3, [pc, #584]	; (2000063c <main+0x440>)
200003f4:	22d2      	movs	r2, #210	; 0xd2
200003f6:	0092      	lsls	r2, r2, #2
200003f8:	4694      	mov	ip, r2
200003fa:	44bc      	add	ip, r7
200003fc:	4463      	add	r3, ip
200003fe:	4a90      	ldr	r2, [pc, #576]	; (20000640 <main+0x444>)
20000400:	60da      	str	r2, [r3, #12]
	
	GameObject player;
	init_witch( &player );
20000402:	23dc      	movs	r3, #220	; 0xdc
20000404:	005b      	lsls	r3, r3, #1
20000406:	18fb      	adds	r3, r7, r3
20000408:	0018      	movs	r0, r3
2000040a:	f001 f9fb 	bl	20001804 <init_witch>
	player.xPos = 3;
2000040e:	4b8d      	ldr	r3, [pc, #564]	; (20000644 <main+0x448>)
20000410:	22d2      	movs	r2, #210	; 0xd2
20000412:	0092      	lsls	r2, r2, #2
20000414:	4694      	mov	ip, r2
20000416:	44bc      	add	ip, r7
20000418:	4463      	add	r3, ip
2000041a:	2203      	movs	r2, #3
2000041c:	605a      	str	r2, [r3, #4]
	player.yPos = 64-18-7; //player position
2000041e:	4b89      	ldr	r3, [pc, #548]	; (20000644 <main+0x448>)
20000420:	22d2      	movs	r2, #210	; 0xd2
20000422:	0092      	lsls	r2, r2, #2
20000424:	4694      	mov	ip, r2
20000426:	44bc      	add	ip, r7
20000428:	4463      	add	r3, ip
2000042a:	2227      	movs	r2, #39	; 0x27
2000042c:	609a      	str	r2, [r3, #8]
	player.update = playerUpdate;
2000042e:	4b85      	ldr	r3, [pc, #532]	; (20000644 <main+0x448>)
20000430:	22d2      	movs	r2, #210	; 0xd2
20000432:	0092      	lsls	r2, r2, #2
20000434:	4694      	mov	ip, r2
20000436:	44bc      	add	ip, r7
20000438:	4463      	add	r3, ip
2000043a:	4a73      	ldr	r2, [pc, #460]	; (20000608 <main+0x40c>)
2000043c:	60da      	str	r2, [r3, #12]
	
	GameObject fire2;
	init_fire( &fire2 );
2000043e:	23ca      	movs	r3, #202	; 0xca
20000440:	005b      	lsls	r3, r3, #1
20000442:	18fb      	adds	r3, r7, r3
20000444:	0018      	movs	r0, r3
20000446:	f000 fe7b 	bl	20001140 <init_fire>
	GameObject fire3;
	init_fire( &fire3 );
2000044a:	23b8      	movs	r3, #184	; 0xb8
2000044c:	005b      	lsls	r3, r3, #1
2000044e:	18fb      	adds	r3, r7, r3
20000450:	0018      	movs	r0, r3
20000452:	f000 fe75 	bl	20001140 <init_fire>
	GameObject fire4;
	init_fire( &fire4 );
20000456:	23a6      	movs	r3, #166	; 0xa6
20000458:	005b      	lsls	r3, r3, #1
2000045a:	18fb      	adds	r3, r7, r3
2000045c:	0018      	movs	r0, r3
2000045e:	f000 fe6f 	bl	20001140 <init_fire>
	GameObject fire1;
	init_fire( &fire1 );
20000462:	2394      	movs	r3, #148	; 0x94
20000464:	005b      	lsls	r3, r3, #1
20000466:	18fb      	adds	r3, r7, r3
20000468:	0018      	movs	r0, r3
2000046a:	f000 fe69 	bl	20001140 <init_fire>
	GameObject fire1_indoors;
	init_fire( &fire1_indoors );
2000046e:	1d7b      	adds	r3, r7, #5
20000470:	33ff      	adds	r3, #255	; 0xff
20000472:	0018      	movs	r0, r3
20000474:	f000 fe64 	bl	20001140 <init_fire>
	fire1_indoors.xPos = 50;		//FIRE1_INDO
20000478:	4b73      	ldr	r3, [pc, #460]	; (20000648 <main+0x44c>)
2000047a:	22d2      	movs	r2, #210	; 0xd2
2000047c:	0092      	lsls	r2, r2, #2
2000047e:	4694      	mov	ip, r2
20000480:	44bc      	add	ip, r7
20000482:	4463      	add	r3, ip
20000484:	2232      	movs	r2, #50	; 0x32
20000486:	605a      	str	r2, [r3, #4]
	fire1_indoors.yPos = 64-12-7;
20000488:	4b6f      	ldr	r3, [pc, #444]	; (20000648 <main+0x44c>)
2000048a:	22d2      	movs	r2, #210	; 0xd2
2000048c:	0092      	lsls	r2, r2, #2
2000048e:	4694      	mov	ip, r2
20000490:	44bc      	add	ip, r7
20000492:	4463      	add	r3, ip
20000494:	222d      	movs	r2, #45	; 0x2d
20000496:	609a      	str	r2, [r3, #8]
	fire1_indoors.update = gameObjectUpdate;
20000498:	4b6b      	ldr	r3, [pc, #428]	; (20000648 <main+0x44c>)
2000049a:	22d2      	movs	r2, #210	; 0xd2
2000049c:	0092      	lsls	r2, r2, #2
2000049e:	4694      	mov	ip, r2
200004a0:	44bc      	add	ip, r7
200004a2:	4463      	add	r3, ip
200004a4:	4a66      	ldr	r2, [pc, #408]	; (20000640 <main+0x444>)
200004a6:	60da      	str	r2, [r3, #12]
	
	fire2.xPos = 98;
200004a8:	4b68      	ldr	r3, [pc, #416]	; (2000064c <main+0x450>)
200004aa:	22d2      	movs	r2, #210	; 0xd2
200004ac:	0092      	lsls	r2, r2, #2
200004ae:	4694      	mov	ip, r2
200004b0:	44bc      	add	ip, r7
200004b2:	4463      	add	r3, ip
200004b4:	2262      	movs	r2, #98	; 0x62
200004b6:	605a      	str	r2, [r3, #4]
	fire2.yPos = 26-12;
200004b8:	4b64      	ldr	r3, [pc, #400]	; (2000064c <main+0x450>)
200004ba:	22d2      	movs	r2, #210	; 0xd2
200004bc:	0092      	lsls	r2, r2, #2
200004be:	4694      	mov	ip, r2
200004c0:	44bc      	add	ip, r7
200004c2:	4463      	add	r3, ip
200004c4:	220e      	movs	r2, #14
200004c6:	609a      	str	r2, [r3, #8]
	fire3.xPos = 115;
200004c8:	4b61      	ldr	r3, [pc, #388]	; (20000650 <main+0x454>)
200004ca:	22d2      	movs	r2, #210	; 0xd2
200004cc:	0092      	lsls	r2, r2, #2
200004ce:	4694      	mov	ip, r2
200004d0:	44bc      	add	ip, r7
200004d2:	4463      	add	r3, ip
200004d4:	2273      	movs	r2, #115	; 0x73
200004d6:	605a      	str	r2, [r3, #4]
	fire3.yPos = 34-12;
200004d8:	4b5d      	ldr	r3, [pc, #372]	; (20000650 <main+0x454>)
200004da:	22d2      	movs	r2, #210	; 0xd2
200004dc:	0092      	lsls	r2, r2, #2
200004de:	4694      	mov	ip, r2
200004e0:	44bc      	add	ip, r7
200004e2:	4463      	add	r3, ip
200004e4:	2216      	movs	r2, #22
200004e6:	609a      	str	r2, [r3, #8]
	
	fire1.xPos = 85;
200004e8:	4b5a      	ldr	r3, [pc, #360]	; (20000654 <main+0x458>)
200004ea:	22d2      	movs	r2, #210	; 0xd2
200004ec:	0092      	lsls	r2, r2, #2
200004ee:	4694      	mov	ip, r2
200004f0:	44bc      	add	ip, r7
200004f2:	4463      	add	r3, ip
200004f4:	2255      	movs	r2, #85	; 0x55
200004f6:	605a      	str	r2, [r3, #4]
	fire1.yPos = 23-12;
200004f8:	4b56      	ldr	r3, [pc, #344]	; (20000654 <main+0x458>)
200004fa:	22d2      	movs	r2, #210	; 0xd2
200004fc:	0092      	lsls	r2, r2, #2
200004fe:	4694      	mov	ip, r2
20000500:	44bc      	add	ip, r7
20000502:	4463      	add	r3, ip
20000504:	220b      	movs	r2, #11
20000506:	609a      	str	r2, [r3, #8]
	fire4.xPos = 71;
20000508:	4b53      	ldr	r3, [pc, #332]	; (20000658 <main+0x45c>)
2000050a:	22d2      	movs	r2, #210	; 0xd2
2000050c:	0092      	lsls	r2, r2, #2
2000050e:	4694      	mov	ip, r2
20000510:	44bc      	add	ip, r7
20000512:	4463      	add	r3, ip
20000514:	2247      	movs	r2, #71	; 0x47
20000516:	605a      	str	r2, [r3, #4]
	fire4.yPos = 27-11;
20000518:	4b4f      	ldr	r3, [pc, #316]	; (20000658 <main+0x45c>)
2000051a:	22d2      	movs	r2, #210	; 0xd2
2000051c:	0092      	lsls	r2, r2, #2
2000051e:	4694      	mov	ip, r2
20000520:	44bc      	add	ip, r7
20000522:	4463      	add	r3, ip
20000524:	2210      	movs	r2, #16
20000526:	609a      	str	r2, [r3, #8]
	//draw_game_object(&castleObj);
	
	fire2.animation_speed = 2;
20000528:	4b48      	ldr	r3, [pc, #288]	; (2000064c <main+0x450>)
2000052a:	22d2      	movs	r2, #210	; 0xd2
2000052c:	0092      	lsls	r2, r2, #2
2000052e:	4694      	mov	ip, r2
20000530:	44bc      	add	ip, r7
20000532:	4463      	add	r3, ip
20000534:	2202      	movs	r2, #2
20000536:	61da      	str	r2, [r3, #28]
	fire3.animation_speed = 2;
20000538:	4b45      	ldr	r3, [pc, #276]	; (20000650 <main+0x454>)
2000053a:	22d2      	movs	r2, #210	; 0xd2
2000053c:	0092      	lsls	r2, r2, #2
2000053e:	4694      	mov	ip, r2
20000540:	44bc      	add	ip, r7
20000542:	4463      	add	r3, ip
20000544:	2202      	movs	r2, #2
20000546:	61da      	str	r2, [r3, #28]
	fire1.animation_speed = 2;
20000548:	4b42      	ldr	r3, [pc, #264]	; (20000654 <main+0x458>)
2000054a:	22d2      	movs	r2, #210	; 0xd2
2000054c:	0092      	lsls	r2, r2, #2
2000054e:	4694      	mov	ip, r2
20000550:	44bc      	add	ip, r7
20000552:	4463      	add	r3, ip
20000554:	2202      	movs	r2, #2
20000556:	61da      	str	r2, [r3, #28]
	fire4.animation_speed = 2;
20000558:	4b3f      	ldr	r3, [pc, #252]	; (20000658 <main+0x45c>)
2000055a:	22d2      	movs	r2, #210	; 0xd2
2000055c:	0092      	lsls	r2, r2, #2
2000055e:	4694      	mov	ip, r2
20000560:	44bc      	add	ip, r7
20000562:	4463      	add	r3, ip
20000564:	2202      	movs	r2, #2
20000566:	61da      	str	r2, [r3, #28]
	
	fire2.update = gameObjectUpdate;
20000568:	4b38      	ldr	r3, [pc, #224]	; (2000064c <main+0x450>)
2000056a:	22d2      	movs	r2, #210	; 0xd2
2000056c:	0092      	lsls	r2, r2, #2
2000056e:	4694      	mov	ip, r2
20000570:	44bc      	add	ip, r7
20000572:	4463      	add	r3, ip
20000574:	4a32      	ldr	r2, [pc, #200]	; (20000640 <main+0x444>)
20000576:	60da      	str	r2, [r3, #12]
	fire3.update = gameObjectUpdate;
20000578:	4b35      	ldr	r3, [pc, #212]	; (20000650 <main+0x454>)
2000057a:	22d2      	movs	r2, #210	; 0xd2
2000057c:	0092      	lsls	r2, r2, #2
2000057e:	4694      	mov	ip, r2
20000580:	44bc      	add	ip, r7
20000582:	4463      	add	r3, ip
20000584:	4a2e      	ldr	r2, [pc, #184]	; (20000640 <main+0x444>)
20000586:	60da      	str	r2, [r3, #12]
	fire1.update = gameObjectUpdate;
20000588:	4b32      	ldr	r3, [pc, #200]	; (20000654 <main+0x458>)
2000058a:	22d2      	movs	r2, #210	; 0xd2
2000058c:	0092      	lsls	r2, r2, #2
2000058e:	4694      	mov	ip, r2
20000590:	44bc      	add	ip, r7
20000592:	4463      	add	r3, ip
20000594:	4a2a      	ldr	r2, [pc, #168]	; (20000640 <main+0x444>)
20000596:	60da      	str	r2, [r3, #12]
	fire4.update = gameObjectUpdate;
20000598:	4b2f      	ldr	r3, [pc, #188]	; (20000658 <main+0x45c>)
2000059a:	22d2      	movs	r2, #210	; 0xd2
2000059c:	0092      	lsls	r2, r2, #2
2000059e:	4694      	mov	ip, r2
200005a0:	44bc      	add	ip, r7
200005a2:	4463      	add	r3, ip
200005a4:	4a26      	ldr	r2, [pc, #152]	; (20000640 <main+0x444>)
200005a6:	60da      	str	r2, [r3, #12]
	SlowText text8;
	SlowText text9;
	SlowText text10;
	SlowText text11;
	SlowText text12;
	init_slow_text(&text_kra, "*KRA!* *KRA!*", "   ", 1);
200005a8:	4a2c      	ldr	r2, [pc, #176]	; (2000065c <main+0x460>)
200005aa:	492d      	ldr	r1, [pc, #180]	; (20000660 <main+0x464>)
200005ac:	23f0      	movs	r3, #240	; 0xf0
200005ae:	18f8      	adds	r0, r7, r3
200005b0:	2301      	movs	r3, #1
200005b2:	f002 fbe0 	bl	20002d76 <init_slow_text>
	init_slow_text(&text1, "For centuries the", "DILs-witches have", 1);
200005b6:	4a2b      	ldr	r2, [pc, #172]	; (20000664 <main+0x468>)
200005b8:	492b      	ldr	r1, [pc, #172]	; (20000668 <main+0x46c>)
200005ba:	23dc      	movs	r3, #220	; 0xdc
200005bc:	18f8      	adds	r0, r7, r3
200005be:	2301      	movs	r3, #1
200005c0:	f002 fbd9 	bl	20002d76 <init_slow_text>
	init_slow_text(&text2, "coiled in fear,", "    ", 1);
200005c4:	4a29      	ldr	r2, [pc, #164]	; (2000066c <main+0x470>)
200005c6:	492a      	ldr	r1, [pc, #168]	; (20000670 <main+0x474>)
200005c8:	23c8      	movs	r3, #200	; 0xc8
200005ca:	18f8      	adds	r0, r7, r3
200005cc:	2301      	movs	r3, #1
200005ce:	f002 fbd2 	bl	20002d76 <init_slow_text>
	init_slow_text(&text3, "whenever they hear", "that a DIPs-witch", 1);
200005d2:	4a28      	ldr	r2, [pc, #160]	; (20000674 <main+0x478>)
200005d4:	4928      	ldr	r1, [pc, #160]	; (20000678 <main+0x47c>)
200005d6:	23b4      	movs	r3, #180	; 0xb4
200005d8:	18f8      	adds	r0, r7, r3
200005da:	2301      	movs	r3, #1
200005dc:	f002 fbcb 	bl	20002d76 <init_slow_text>
	init_slow_text(&text4, "is near.", "   ", 1);
200005e0:	4a1e      	ldr	r2, [pc, #120]	; (2000065c <main+0x460>)
200005e2:	4926      	ldr	r1, [pc, #152]	; (2000067c <main+0x480>)
200005e4:	23a0      	movs	r3, #160	; 0xa0
200005e6:	18f8      	adds	r0, r7, r3
200005e8:	2301      	movs	r3, #1
200005ea:	f002 fbc4 	bl	20002d76 <init_slow_text>
	init_slow_text(&text5, "So it is quite", "surprising, finding", 1);
200005ee:	4a24      	ldr	r2, [pc, #144]	; (20000680 <main+0x484>)
200005f0:	4924      	ldr	r1, [pc, #144]	; (20000684 <main+0x488>)
200005f2:	238c      	movs	r3, #140	; 0x8c
200005f4:	18f8      	adds	r0, r7, r3
200005f6:	e047      	b.n	20000688 <main+0x48c>
200005f8:	fffffcb4 			; <UNDEFINED> instruction: 0xfffffcb4
200005fc:	20003170 	andcs	r3, r0, r0, ror r1
20000600:	20003230 	andcs	r3, r0, r0, lsr r2
20000604:	2000321c 	andcs	r3, r0, ip, lsl r2
20000608:	20001265 	andcs	r1, r0, r5, ror #4
2000060c:	20003240 	andcs	r3, r0, r0, asr #4
20000610:	2000320c 	andcs	r3, r0, ip, lsl #4
20000614:	20003220 	andcs	r3, r0, r0, lsr #4
20000618:	2000322c 	andcs	r3, r0, ip, lsr #4
2000061c:	200031a8 	andcs	r3, r0, r8, lsr #3
20000620:	200031f0 	strdcs	r3, [r0], -r0
20000624:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20000628:	20003198 	mulcs	r0, r8, r1
2000062c:	20003224 	andcs	r3, r0, r4, lsr #4
20000630:	200031d4 	ldrdcs	r3, [r0], -r4
20000634:	fffffedc 			; <UNDEFINED> instruction: 0xfffffedc
20000638:	fffffeb8 			; <UNDEFINED> instruction: 0xfffffeb8
2000063c:	fffffe94 			; <UNDEFINED> instruction: 0xfffffe94
20000640:	20000f75 	andcs	r0, r0, r5, ror pc
20000644:	fffffe70 			; <UNDEFINED> instruction: 0xfffffe70
20000648:	fffffdbc 			; <UNDEFINED> instruction: 0xfffffdbc
2000064c:	fffffe4c 			; <UNDEFINED> instruction: 0xfffffe4c
20000650:	fffffe28 			; <UNDEFINED> instruction: 0xfffffe28
20000654:	fffffde0 			; <UNDEFINED> instruction: 0xfffffde0
20000658:	fffffe04 			; <UNDEFINED> instruction: 0xfffffe04
2000065c:	20008c5c 	andcs	r8, r0, ip, asr ip
20000660:	20008c60 	andcs	r8, r0, r0, ror #24
20000664:	20008c70 	andcs	r8, r0, r0, ror ip
20000668:	20008c84 	andcs	r8, r0, r4, lsl #25
2000066c:	20008c98 	mulcs	r0, r8, ip
20000670:	20008ca0 	andcs	r8, r0, r0, lsr #25
20000674:	20008cb0 			; <UNDEFINED> instruction: 0x20008cb0
20000678:	20008cc4 	andcs	r8, r0, r4, asr #25
2000067c:	20008cd8 	ldrdcs	r8, [r0], -r8	; <UNPREDICTABLE>
20000680:	20008ce4 	andcs	r8, r0, r4, ror #25
20000684:	20008cf8 	strdcs	r8, [r0], -r8	; <UNPREDICTABLE>
20000688:	2301      	movs	r3, #1
2000068a:	f002 fb74 	bl	20002d76 <init_slow_text>
	init_slow_text(&text6, "you here,", "    ", 1);
2000068e:	4adf      	ldr	r2, [pc, #892]	; (20000a0c <main+0x810>)
20000690:	49df      	ldr	r1, [pc, #892]	; (20000a10 <main+0x814>)
20000692:	2378      	movs	r3, #120	; 0x78
20000694:	18f8      	adds	r0, r7, r3
20000696:	2301      	movs	r3, #1
20000698:	f002 fb6d 	bl	20002d76 <init_slow_text>
	init_slow_text(&text7, "queen Daffo of DILs,", "heir to king Lear.", 1);
2000069c:	4add      	ldr	r2, [pc, #884]	; (20000a14 <main+0x818>)
2000069e:	49de      	ldr	r1, [pc, #888]	; (20000a18 <main+0x81c>)
200006a0:	2364      	movs	r3, #100	; 0x64
200006a2:	18f8      	adds	r0, r7, r3
200006a4:	2301      	movs	r3, #1
200006a6:	f002 fb66 	bl	20002d76 <init_slow_text>
	init_slow_text(&text8, "But maybe you're", "tempted, to loot", 1);
200006aa:	4adc      	ldr	r2, [pc, #880]	; (20000a1c <main+0x820>)
200006ac:	49dc      	ldr	r1, [pc, #880]	; (20000a20 <main+0x824>)
200006ae:	2350      	movs	r3, #80	; 0x50
200006b0:	18f8      	adds	r0, r7, r3
200006b2:	2301      	movs	r3, #1
200006b4:	f002 fb5f 	bl	20002d76 <init_slow_text>
	init_slow_text(&text9, "from the riches,", "    ", 1);
200006b8:	4ad4      	ldr	r2, [pc, #848]	; (20000a0c <main+0x810>)
200006ba:	49da      	ldr	r1, [pc, #872]	; (20000a24 <main+0x828>)
200006bc:	233c      	movs	r3, #60	; 0x3c
200006be:	18f8      	adds	r0, r7, r3
200006c0:	2301      	movs	r3, #1
200006c2:	f002 fb58 	bl	20002d76 <init_slow_text>
	init_slow_text(&text12, "wicked DIPs-witches.", "    ", 1);
200006c6:	4ad1      	ldr	r2, [pc, #836]	; (20000a0c <main+0x810>)
200006c8:	49d7      	ldr	r1, [pc, #860]	; (20000a28 <main+0x82c>)
200006ca:	0038      	movs	r0, r7
200006cc:	2301      	movs	r3, #1
200006ce:	f002 fb52 	bl	20002d76 <init_slow_text>
	init_slow_text(&text10, "so grippily trea-", "sured by", 1);
200006d2:	4ad6      	ldr	r2, [pc, #856]	; (20000a2c <main+0x830>)
200006d4:	49d6      	ldr	r1, [pc, #856]	; (20000a30 <main+0x834>)
200006d6:	2328      	movs	r3, #40	; 0x28
200006d8:	18f8      	adds	r0, r7, r3
200006da:	2301      	movs	r3, #1
200006dc:	f002 fb4b 	bl	20002d76 <init_slow_text>
	init_slow_text(&text11, "Enter, brave witch,", "- reset the switch!", 1);
200006e0:	4ad4      	ldr	r2, [pc, #848]	; (20000a34 <main+0x838>)
200006e2:	49d5      	ldr	r1, [pc, #852]	; (20000a38 <main+0x83c>)
200006e4:	2314      	movs	r3, #20
200006e6:	18f8      	adds	r0, r7, r3
200006e8:	2301      	movs	r3, #1
200006ea:	f002 fb44 	bl	20002d76 <init_slow_text>
	//ascii_write_part("Yeeaaah!!!", "This is working! :)", 5, 10);
	set_up_ascii();
200006ee:	f002 fa1f 	bl	20002b30 <set_up_ascii>
	set_up_DIL();
200006f2:	f002 f84d 	bl	20002790 <set_up_DIL>
	clear_ascii();
200006f6:	f002 fa24 	bl	20002b42 <clear_ascii>
	
	int is_climbing = 0;
200006fa:	2300      	movs	r3, #0
200006fc:	22d1      	movs	r2, #209	; 0xd1
200006fe:	0092      	lsls	r2, r2, #2
20000700:	18ba      	adds	r2, r7, r2
20000702:	6013      	str	r3, [r2, #0]
	int has_climbed = 0;
20000704:	2300      	movs	r3, #0
20000706:	22d0      	movs	r2, #208	; 0xd0
20000708:	0092      	lsls	r2, r2, #2
2000070a:	18ba      	adds	r2, r7, r2
2000070c:	6013      	str	r3, [r2, #0]
	int game_over = 0;
2000070e:	2300      	movs	r3, #0
20000710:	22cf      	movs	r2, #207	; 0xcf
20000712:	0092      	lsls	r2, r2, #2
20000714:	18ba      	adds	r2, r7, r2
20000716:	6013      	str	r3, [r2, #0]
	int game_over_adder = 0;
20000718:	2300      	movs	r3, #0
2000071a:	22ce      	movs	r2, #206	; 0xce
2000071c:	0092      	lsls	r2, r2, #2
2000071e:	18ba      	adds	r2, r7, r2
20000720:	6013      	str	r3, [r2, #0]
	
	
	current_screen = RESET_GAME;
20000722:	4bc6      	ldr	r3, [pc, #792]	; (20000a3c <main+0x840>)
20000724:	220a      	movs	r2, #10
20000726:	601a      	str	r2, [r3, #0]
	
	//Game loop
	while(1) {
			
		switch(current_screen) {
20000728:	4bc4      	ldr	r3, [pc, #784]	; (20000a3c <main+0x840>)
2000072a:	681b      	ldr	r3, [r3, #0]
2000072c:	2b01      	cmp	r3, #1
2000072e:	d020      	beq.n	20000772 <main+0x576>
20000730:	dc02      	bgt.n	20000738 <main+0x53c>
20000732:	2b00      	cmp	r3, #0
20000734:	d011      	beq.n	2000075a <main+0x55e>
20000736:	e7f7      	b.n	20000728 <main+0x52c>
20000738:	2b02      	cmp	r3, #2
2000073a:	d100      	bne.n	2000073e <main+0x542>
2000073c:	e29c      	b.n	20000c78 <main+0xa7c>
2000073e:	2b0a      	cmp	r3, #10
20000740:	d101      	bne.n	20000746 <main+0x54a>
20000742:	f000 fbab 	bl	20000e9c <main+0xca0>
20000746:	e7ef      	b.n	20000728 <main+0x52c>
			
			case SWITCH_LOCK: //before

				while(read_DIL() == 0){
					draw_game_object(&pressObj);
20000748:	23a7      	movs	r3, #167	; 0xa7
2000074a:	009b      	lsls	r3, r3, #2
2000074c:	18fb      	adds	r3, r7, r3
2000074e:	0018      	movs	r0, r3
20000750:	f001 ff80 	bl	20002654 <draw_game_object>
					show_frame(1);
20000754:	2001      	movs	r0, #1
20000756:	f001 ffbe 	bl	200026d6 <show_frame>
				while(read_DIL() == 0){
2000075a:	f002 f825 	bl	200027a8 <read_DIL>
2000075e:	1e03      	subs	r3, r0, #0
20000760:	d0f2      	beq.n	20000748 <main+0x54c>
				}
				
				counter = 0;
20000762:	4bb7      	ldr	r3, [pc, #732]	; (20000a40 <main+0x844>)
20000764:	2200      	movs	r2, #0
20000766:	601a      	str	r2, [r3, #0]
				current_screen = START_SCREEN;
20000768:	4bb4      	ldr	r3, [pc, #720]	; (20000a3c <main+0x840>)
2000076a:	2201      	movs	r2, #1
2000076c:	601a      	str	r2, [r3, #0]
				break;
2000076e:	f000 fbeb 	bl	20000f48 <main+0xd4c>
			
			
			case START_SCREEN: //outside
				
				counter++;
20000772:	4bb3      	ldr	r3, [pc, #716]	; (20000a40 <main+0x844>)
20000774:	681b      	ldr	r3, [r3, #0]
20000776:	1c5a      	adds	r2, r3, #1
20000778:	4bb1      	ldr	r3, [pc, #708]	; (20000a40 <main+0x844>)
2000077a:	601a      	str	r2, [r3, #0]
				
				if(titleObj.yPos < 1) {
2000077c:	23b6      	movs	r3, #182	; 0xb6
2000077e:	009b      	lsls	r3, r3, #2
20000780:	18fb      	adds	r3, r7, r3
20000782:	689b      	ldr	r3, [r3, #8]
20000784:	2b00      	cmp	r3, #0
20000786:	dc08      	bgt.n	2000079a <main+0x59e>
					titleObj.yPos++;
20000788:	23b6      	movs	r3, #182	; 0xb6
2000078a:	009b      	lsls	r3, r3, #2
2000078c:	18fb      	adds	r3, r7, r3
2000078e:	689b      	ldr	r3, [r3, #8]
20000790:	1c5a      	adds	r2, r3, #1
20000792:	23b6      	movs	r3, #182	; 0xb6
20000794:	009b      	lsls	r3, r3, #2
20000796:	18fb      	adds	r3, r7, r3
20000798:	609a      	str	r2, [r3, #8]
				}
				
				draw_game_object(&castleObj);
2000079a:	2398      	movs	r3, #152	; 0x98
2000079c:	009b      	lsls	r3, r3, #2
2000079e:	18fb      	adds	r3, r7, r3
200007a0:	0018      	movs	r0, r3
200007a2:	f001 ff57 	bl	20002654 <draw_game_object>
				draw_game_object(&fire2);
200007a6:	23ca      	movs	r3, #202	; 0xca
200007a8:	005b      	lsls	r3, r3, #1
200007aa:	18fb      	adds	r3, r7, r3
200007ac:	0018      	movs	r0, r3
200007ae:	f001 ff51 	bl	20002654 <draw_game_object>
				draw_game_object(&fire3);
200007b2:	23b8      	movs	r3, #184	; 0xb8
200007b4:	005b      	lsls	r3, r3, #1
200007b6:	18fb      	adds	r3, r7, r3
200007b8:	0018      	movs	r0, r3
200007ba:	f001 ff4b 	bl	20002654 <draw_game_object>
				draw_game_object(&fire1);
200007be:	2394      	movs	r3, #148	; 0x94
200007c0:	005b      	lsls	r3, r3, #1
200007c2:	18fb      	adds	r3, r7, r3
200007c4:	0018      	movs	r0, r3
200007c6:	f001 ff45 	bl	20002654 <draw_game_object>
				draw_game_object(&fire4);
200007ca:	23a6      	movs	r3, #166	; 0xa6
200007cc:	005b      	lsls	r3, r3, #1
200007ce:	18fb      	adds	r3, r7, r3
200007d0:	0018      	movs	r0, r3
200007d2:	f001 ff3f 	bl	20002654 <draw_game_object>
				draw_game_object(&titleObj);
200007d6:	23b6      	movs	r3, #182	; 0xb6
200007d8:	009b      	lsls	r3, r3, #2
200007da:	18fb      	adds	r3, r7, r3
200007dc:	0018      	movs	r0, r3
200007de:	f001 ff39 	bl	20002654 <draw_game_object>
				draw_game_object(&bird);
200007e2:	23ee      	movs	r3, #238	; 0xee
200007e4:	005b      	lsls	r3, r3, #1
200007e6:	18fb      	adds	r3, r7, r3
200007e8:	0018      	movs	r0, r3
200007ea:	f001 ff33 	bl	20002654 <draw_game_object>
				show_frame(1);
200007ee:	2001      	movs	r0, #1
200007f0:	f001 ff71 	bl	200026d6 <show_frame>
				
				static int long_text = 40;
				static int short_text = 20;
				static int delay_until_text = 130;
				
				if (counter < delay_until_text - 55 && counter > delay_until_text - 90)
200007f4:	4b93      	ldr	r3, [pc, #588]	; (20000a44 <main+0x848>)
200007f6:	681b      	ldr	r3, [r3, #0]
200007f8:	3b37      	subs	r3, #55	; 0x37
200007fa:	001a      	movs	r2, r3
200007fc:	4b90      	ldr	r3, [pc, #576]	; (20000a40 <main+0x844>)
200007fe:	681b      	ldr	r3, [r3, #0]
20000800:	429a      	cmp	r2, r3
20000802:	dd13      	ble.n	2000082c <main+0x630>
20000804:	4b8f      	ldr	r3, [pc, #572]	; (20000a44 <main+0x848>)
20000806:	681b      	ldr	r3, [r3, #0]
20000808:	3b5a      	subs	r3, #90	; 0x5a
2000080a:	001a      	movs	r2, r3
2000080c:	4b8c      	ldr	r3, [pc, #560]	; (20000a40 <main+0x844>)
2000080e:	681b      	ldr	r3, [r3, #0]
20000810:	429a      	cmp	r2, r3
20000812:	da0b      	bge.n	2000082c <main+0x630>
					text_kra.display(&text_kra, 20);
20000814:	4b8c      	ldr	r3, [pc, #560]	; (20000a48 <main+0x84c>)
20000816:	22d2      	movs	r2, #210	; 0xd2
20000818:	0092      	lsls	r2, r2, #2
2000081a:	4694      	mov	ip, r2
2000081c:	44bc      	add	ip, r7
2000081e:	4463      	add	r3, ip
20000820:	691b      	ldr	r3, [r3, #16]
20000822:	22f0      	movs	r2, #240	; 0xf0
20000824:	18ba      	adds	r2, r7, r2
20000826:	2114      	movs	r1, #20
20000828:	0010      	movs	r0, r2
2000082a:	4798      	blx	r3
				if (counter == delay_until_text - 25)
2000082c:	4b85      	ldr	r3, [pc, #532]	; (20000a44 <main+0x848>)
2000082e:	681b      	ldr	r3, [r3, #0]
20000830:	3b19      	subs	r3, #25
20000832:	001a      	movs	r2, r3
20000834:	4b82      	ldr	r3, [pc, #520]	; (20000a40 <main+0x844>)
20000836:	681b      	ldr	r3, [r3, #0]
20000838:	429a      	cmp	r2, r3
2000083a:	d101      	bne.n	20000840 <main+0x644>
					clear_ascii();
2000083c:	f002 f981 	bl	20002b42 <clear_ascii>
				
				if (counter < delay_until_text);
20000840:	4b7f      	ldr	r3, [pc, #508]	; (20000a40 <main+0x844>)
20000842:	681a      	ldr	r2, [r3, #0]
20000844:	4b7f      	ldr	r3, [pc, #508]	; (20000a44 <main+0x848>)
20000846:	681b      	ldr	r3, [r3, #0]
20000848:	429a      	cmp	r2, r3
2000084a:	da00      	bge.n	2000084e <main+0x652>
2000084c:	e1a1      	b.n	20000b92 <main+0x996>
				else if (counter < delay_until_text + 1*long_text)
2000084e:	4b7d      	ldr	r3, [pc, #500]	; (20000a44 <main+0x848>)
20000850:	681a      	ldr	r2, [r3, #0]
20000852:	4b7e      	ldr	r3, [pc, #504]	; (20000a4c <main+0x850>)
20000854:	681b      	ldr	r3, [r3, #0]
20000856:	18d2      	adds	r2, r2, r3
20000858:	4b79      	ldr	r3, [pc, #484]	; (20000a40 <main+0x844>)
2000085a:	681b      	ldr	r3, [r3, #0]
2000085c:	429a      	cmp	r2, r3
2000085e:	dd0c      	ble.n	2000087a <main+0x67e>
					text1.display(&text1, 20);
20000860:	4b7b      	ldr	r3, [pc, #492]	; (20000a50 <main+0x854>)
20000862:	22d2      	movs	r2, #210	; 0xd2
20000864:	0092      	lsls	r2, r2, #2
20000866:	4694      	mov	ip, r2
20000868:	44bc      	add	ip, r7
2000086a:	4463      	add	r3, ip
2000086c:	691b      	ldr	r3, [r3, #16]
2000086e:	22dc      	movs	r2, #220	; 0xdc
20000870:	18ba      	adds	r2, r7, r2
20000872:	2114      	movs	r1, #20
20000874:	0010      	movs	r0, r2
20000876:	4798      	blx	r3
20000878:	e18b      	b.n	20000b92 <main+0x996>
				else if(counter < delay_until_text + 1*long_text + 1*short_text)
2000087a:	4b72      	ldr	r3, [pc, #456]	; (20000a44 <main+0x848>)
2000087c:	681a      	ldr	r2, [r3, #0]
2000087e:	4b73      	ldr	r3, [pc, #460]	; (20000a4c <main+0x850>)
20000880:	681b      	ldr	r3, [r3, #0]
20000882:	18d2      	adds	r2, r2, r3
20000884:	4b73      	ldr	r3, [pc, #460]	; (20000a54 <main+0x858>)
20000886:	681b      	ldr	r3, [r3, #0]
20000888:	18d2      	adds	r2, r2, r3
2000088a:	4b6d      	ldr	r3, [pc, #436]	; (20000a40 <main+0x844>)
2000088c:	681b      	ldr	r3, [r3, #0]
2000088e:	429a      	cmp	r2, r3
20000890:	dd0c      	ble.n	200008ac <main+0x6b0>
					text2.display(&text2, 20);
20000892:	4b71      	ldr	r3, [pc, #452]	; (20000a58 <main+0x85c>)
20000894:	22d2      	movs	r2, #210	; 0xd2
20000896:	0092      	lsls	r2, r2, #2
20000898:	4694      	mov	ip, r2
2000089a:	44bc      	add	ip, r7
2000089c:	4463      	add	r3, ip
2000089e:	691b      	ldr	r3, [r3, #16]
200008a0:	22c8      	movs	r2, #200	; 0xc8
200008a2:	18ba      	adds	r2, r7, r2
200008a4:	2114      	movs	r1, #20
200008a6:	0010      	movs	r0, r2
200008a8:	4798      	blx	r3
200008aa:	e172      	b.n	20000b92 <main+0x996>
				else if(counter < delay_until_text + 2*long_text + 1*short_text)
200008ac:	4b67      	ldr	r3, [pc, #412]	; (20000a4c <main+0x850>)
200008ae:	681b      	ldr	r3, [r3, #0]
200008b0:	005a      	lsls	r2, r3, #1
200008b2:	4b64      	ldr	r3, [pc, #400]	; (20000a44 <main+0x848>)
200008b4:	681b      	ldr	r3, [r3, #0]
200008b6:	18d2      	adds	r2, r2, r3
200008b8:	4b66      	ldr	r3, [pc, #408]	; (20000a54 <main+0x858>)
200008ba:	681b      	ldr	r3, [r3, #0]
200008bc:	18d2      	adds	r2, r2, r3
200008be:	4b60      	ldr	r3, [pc, #384]	; (20000a40 <main+0x844>)
200008c0:	681b      	ldr	r3, [r3, #0]
200008c2:	429a      	cmp	r2, r3
200008c4:	dd0c      	ble.n	200008e0 <main+0x6e4>
					text3.display(&text3, 20);
200008c6:	4b65      	ldr	r3, [pc, #404]	; (20000a5c <main+0x860>)
200008c8:	22d2      	movs	r2, #210	; 0xd2
200008ca:	0092      	lsls	r2, r2, #2
200008cc:	4694      	mov	ip, r2
200008ce:	44bc      	add	ip, r7
200008d0:	4463      	add	r3, ip
200008d2:	691b      	ldr	r3, [r3, #16]
200008d4:	22b4      	movs	r2, #180	; 0xb4
200008d6:	18ba      	adds	r2, r7, r2
200008d8:	2114      	movs	r1, #20
200008da:	0010      	movs	r0, r2
200008dc:	4798      	blx	r3
200008de:	e158      	b.n	20000b92 <main+0x996>
				else if(counter < delay_until_text + 2*long_text + 2*short_text)
200008e0:	4b5a      	ldr	r3, [pc, #360]	; (20000a4c <main+0x850>)
200008e2:	681b      	ldr	r3, [r3, #0]
200008e4:	005a      	lsls	r2, r3, #1
200008e6:	4b57      	ldr	r3, [pc, #348]	; (20000a44 <main+0x848>)
200008e8:	681b      	ldr	r3, [r3, #0]
200008ea:	18d2      	adds	r2, r2, r3
200008ec:	4b59      	ldr	r3, [pc, #356]	; (20000a54 <main+0x858>)
200008ee:	681b      	ldr	r3, [r3, #0]
200008f0:	005b      	lsls	r3, r3, #1
200008f2:	18d2      	adds	r2, r2, r3
200008f4:	4b52      	ldr	r3, [pc, #328]	; (20000a40 <main+0x844>)
200008f6:	681b      	ldr	r3, [r3, #0]
200008f8:	429a      	cmp	r2, r3
200008fa:	dd0c      	ble.n	20000916 <main+0x71a>
					text4.display(&text4, 20);
200008fc:	4b58      	ldr	r3, [pc, #352]	; (20000a60 <main+0x864>)
200008fe:	22d2      	movs	r2, #210	; 0xd2
20000900:	0092      	lsls	r2, r2, #2
20000902:	4694      	mov	ip, r2
20000904:	44bc      	add	ip, r7
20000906:	4463      	add	r3, ip
20000908:	691b      	ldr	r3, [r3, #16]
2000090a:	22a0      	movs	r2, #160	; 0xa0
2000090c:	18ba      	adds	r2, r7, r2
2000090e:	2114      	movs	r1, #20
20000910:	0010      	movs	r0, r2
20000912:	4798      	blx	r3
20000914:	e13d      	b.n	20000b92 <main+0x996>
				else if(counter < delay_until_text + 3*long_text + 2*short_text)
20000916:	4b4d      	ldr	r3, [pc, #308]	; (20000a4c <main+0x850>)
20000918:	681a      	ldr	r2, [r3, #0]
2000091a:	0013      	movs	r3, r2
2000091c:	005b      	lsls	r3, r3, #1
2000091e:	189a      	adds	r2, r3, r2
20000920:	4b48      	ldr	r3, [pc, #288]	; (20000a44 <main+0x848>)
20000922:	681b      	ldr	r3, [r3, #0]
20000924:	18d2      	adds	r2, r2, r3
20000926:	4b4b      	ldr	r3, [pc, #300]	; (20000a54 <main+0x858>)
20000928:	681b      	ldr	r3, [r3, #0]
2000092a:	005b      	lsls	r3, r3, #1
2000092c:	18d2      	adds	r2, r2, r3
2000092e:	4b44      	ldr	r3, [pc, #272]	; (20000a40 <main+0x844>)
20000930:	681b      	ldr	r3, [r3, #0]
20000932:	429a      	cmp	r2, r3
20000934:	dd0c      	ble.n	20000950 <main+0x754>
					text5.display(&text5, 15);
20000936:	4b4b      	ldr	r3, [pc, #300]	; (20000a64 <main+0x868>)
20000938:	22d2      	movs	r2, #210	; 0xd2
2000093a:	0092      	lsls	r2, r2, #2
2000093c:	4694      	mov	ip, r2
2000093e:	44bc      	add	ip, r7
20000940:	4463      	add	r3, ip
20000942:	691b      	ldr	r3, [r3, #16]
20000944:	228c      	movs	r2, #140	; 0x8c
20000946:	18ba      	adds	r2, r7, r2
20000948:	210f      	movs	r1, #15
2000094a:	0010      	movs	r0, r2
2000094c:	4798      	blx	r3
2000094e:	e120      	b.n	20000b92 <main+0x996>
				else if(counter < delay_until_text + 3*long_text + 3*short_text)
20000950:	4b3e      	ldr	r3, [pc, #248]	; (20000a4c <main+0x850>)
20000952:	681a      	ldr	r2, [r3, #0]
20000954:	0013      	movs	r3, r2
20000956:	005b      	lsls	r3, r3, #1
20000958:	189a      	adds	r2, r3, r2
2000095a:	4b3a      	ldr	r3, [pc, #232]	; (20000a44 <main+0x848>)
2000095c:	681b      	ldr	r3, [r3, #0]
2000095e:	18d1      	adds	r1, r2, r3
20000960:	4b3c      	ldr	r3, [pc, #240]	; (20000a54 <main+0x858>)
20000962:	681a      	ldr	r2, [r3, #0]
20000964:	0013      	movs	r3, r2
20000966:	005b      	lsls	r3, r3, #1
20000968:	189b      	adds	r3, r3, r2
2000096a:	18ca      	adds	r2, r1, r3
2000096c:	4b34      	ldr	r3, [pc, #208]	; (20000a40 <main+0x844>)
2000096e:	681b      	ldr	r3, [r3, #0]
20000970:	429a      	cmp	r2, r3
20000972:	dd0c      	ble.n	2000098e <main+0x792>
					text6.display(&text6, 20);
20000974:	4b3c      	ldr	r3, [pc, #240]	; (20000a68 <main+0x86c>)
20000976:	22d2      	movs	r2, #210	; 0xd2
20000978:	0092      	lsls	r2, r2, #2
2000097a:	4694      	mov	ip, r2
2000097c:	44bc      	add	ip, r7
2000097e:	4463      	add	r3, ip
20000980:	691b      	ldr	r3, [r3, #16]
20000982:	2278      	movs	r2, #120	; 0x78
20000984:	18ba      	adds	r2, r7, r2
20000986:	2114      	movs	r1, #20
20000988:	0010      	movs	r0, r2
2000098a:	4798      	blx	r3
2000098c:	e101      	b.n	20000b92 <main+0x996>
				else if(counter < delay_until_text + 4*long_text + 3*short_text + 3)
2000098e:	4b2f      	ldr	r3, [pc, #188]	; (20000a4c <main+0x850>)
20000990:	681b      	ldr	r3, [r3, #0]
20000992:	009a      	lsls	r2, r3, #2
20000994:	4b2b      	ldr	r3, [pc, #172]	; (20000a44 <main+0x848>)
20000996:	681b      	ldr	r3, [r3, #0]
20000998:	18d1      	adds	r1, r2, r3
2000099a:	4b2e      	ldr	r3, [pc, #184]	; (20000a54 <main+0x858>)
2000099c:	681a      	ldr	r2, [r3, #0]
2000099e:	0013      	movs	r3, r2
200009a0:	005b      	lsls	r3, r3, #1
200009a2:	189b      	adds	r3, r3, r2
200009a4:	18cb      	adds	r3, r1, r3
200009a6:	1cda      	adds	r2, r3, #3
200009a8:	4b25      	ldr	r3, [pc, #148]	; (20000a40 <main+0x844>)
200009aa:	681b      	ldr	r3, [r3, #0]
200009ac:	429a      	cmp	r2, r3
200009ae:	dd0c      	ble.n	200009ca <main+0x7ce>
					text7.display(&text7, 20);
200009b0:	4b2e      	ldr	r3, [pc, #184]	; (20000a6c <main+0x870>)
200009b2:	22d2      	movs	r2, #210	; 0xd2
200009b4:	0092      	lsls	r2, r2, #2
200009b6:	4694      	mov	ip, r2
200009b8:	44bc      	add	ip, r7
200009ba:	4463      	add	r3, ip
200009bc:	691b      	ldr	r3, [r3, #16]
200009be:	2264      	movs	r2, #100	; 0x64
200009c0:	18ba      	adds	r2, r7, r2
200009c2:	2114      	movs	r1, #20
200009c4:	0010      	movs	r0, r2
200009c6:	4798      	blx	r3
200009c8:	e0e3      	b.n	20000b92 <main+0x996>
				else if(counter < delay_until_text + 5*long_text + 3*short_text + 2)
200009ca:	4b20      	ldr	r3, [pc, #128]	; (20000a4c <main+0x850>)
200009cc:	681a      	ldr	r2, [r3, #0]
200009ce:	0013      	movs	r3, r2
200009d0:	009b      	lsls	r3, r3, #2
200009d2:	189a      	adds	r2, r3, r2
200009d4:	4b1b      	ldr	r3, [pc, #108]	; (20000a44 <main+0x848>)
200009d6:	681b      	ldr	r3, [r3, #0]
200009d8:	18d1      	adds	r1, r2, r3
200009da:	4b1e      	ldr	r3, [pc, #120]	; (20000a54 <main+0x858>)
200009dc:	681a      	ldr	r2, [r3, #0]
200009de:	0013      	movs	r3, r2
200009e0:	005b      	lsls	r3, r3, #1
200009e2:	189b      	adds	r3, r3, r2
200009e4:	18cb      	adds	r3, r1, r3
200009e6:	1c9a      	adds	r2, r3, #2
200009e8:	4b15      	ldr	r3, [pc, #84]	; (20000a40 <main+0x844>)
200009ea:	681b      	ldr	r3, [r3, #0]
200009ec:	429a      	cmp	r2, r3
200009ee:	dd41      	ble.n	20000a74 <main+0x878>
					text8.display(&text8, 20);
200009f0:	4b1f      	ldr	r3, [pc, #124]	; (20000a70 <main+0x874>)
200009f2:	22d2      	movs	r2, #210	; 0xd2
200009f4:	0092      	lsls	r2, r2, #2
200009f6:	4694      	mov	ip, r2
200009f8:	44bc      	add	ip, r7
200009fa:	4463      	add	r3, ip
200009fc:	691b      	ldr	r3, [r3, #16]
200009fe:	2250      	movs	r2, #80	; 0x50
20000a00:	18ba      	adds	r2, r7, r2
20000a02:	2114      	movs	r1, #20
20000a04:	0010      	movs	r0, r2
20000a06:	4798      	blx	r3
20000a08:	e0c3      	b.n	20000b92 <main+0x996>
20000a0a:	46c0      	nop			; (mov r8, r8)
20000a0c:	20008c98 	mulcs	r0, r8, ip
20000a10:	20008d08 	andcs	r8, r0, r8, lsl #26
20000a14:	20008d14 	andcs	r8, r0, r4, lsl sp
20000a18:	20008d28 	andcs	r8, r0, r8, lsr #26
20000a1c:	20008d40 	andcs	r8, r0, r0, asr #26
20000a20:	20008d54 	andcs	r8, r0, r4, asr sp
20000a24:	20008d68 	andcs	r8, r0, r8, ror #26
20000a28:	20008d7c 	andcs	r8, r0, ip, ror sp
20000a2c:	20008d94 	mulcs	r0, r4, sp
20000a30:	20008da0 	andcs	r8, r0, r0, lsr #27
20000a34:	20008db4 			; <UNDEFINED> instruction: 0x20008db4
20000a38:	20008dc8 	andcs	r8, r0, r8, asr #27
20000a3c:	20006bdc 	ldrdcs	r6, [r0], -ip
20000a40:	20003158 	andcs	r3, r0, r8, asr r1
20000a44:	20006be0 	andcs	r6, r0, r0, ror #23
20000a48:	fffffda8 			; <UNDEFINED> instruction: 0xfffffda8
20000a4c:	20006be4 	andcs	r6, r0, r4, ror #23
20000a50:	fffffd94 			; <UNDEFINED> instruction: 0xfffffd94
20000a54:	20006be8 	andcs	r6, r0, r8, ror #23
20000a58:	fffffd80 			; <UNDEFINED> instruction: 0xfffffd80
20000a5c:	fffffd6c 			; <UNDEFINED> instruction: 0xfffffd6c
20000a60:	fffffd58 			; <UNDEFINED> instruction: 0xfffffd58
20000a64:	fffffd44 			; <UNDEFINED> instruction: 0xfffffd44
20000a68:	fffffd30 			; <UNDEFINED> instruction: 0xfffffd30
20000a6c:	fffffd1c 			; <UNDEFINED> instruction: 0xfffffd1c
20000a70:	fffffd08 			; <UNDEFINED> instruction: 0xfffffd08
				else if(counter < delay_until_text + 5*long_text + 4*short_text + 2)
20000a74:	4bcc      	ldr	r3, [pc, #816]	; (20000da8 <main+0xbac>)
20000a76:	681a      	ldr	r2, [r3, #0]
20000a78:	0013      	movs	r3, r2
20000a7a:	009b      	lsls	r3, r3, #2
20000a7c:	189a      	adds	r2, r3, r2
20000a7e:	4bcb      	ldr	r3, [pc, #812]	; (20000dac <main+0xbb0>)
20000a80:	681b      	ldr	r3, [r3, #0]
20000a82:	18d2      	adds	r2, r2, r3
20000a84:	4bca      	ldr	r3, [pc, #808]	; (20000db0 <main+0xbb4>)
20000a86:	681b      	ldr	r3, [r3, #0]
20000a88:	009b      	lsls	r3, r3, #2
20000a8a:	18d3      	adds	r3, r2, r3
20000a8c:	1c9a      	adds	r2, r3, #2
20000a8e:	4bc9      	ldr	r3, [pc, #804]	; (20000db4 <main+0xbb8>)
20000a90:	681b      	ldr	r3, [r3, #0]
20000a92:	429a      	cmp	r2, r3
20000a94:	dd0c      	ble.n	20000ab0 <main+0x8b4>
					text9.display(&text9, 20);
20000a96:	4bc8      	ldr	r3, [pc, #800]	; (20000db8 <main+0xbbc>)
20000a98:	22d2      	movs	r2, #210	; 0xd2
20000a9a:	0092      	lsls	r2, r2, #2
20000a9c:	4694      	mov	ip, r2
20000a9e:	44bc      	add	ip, r7
20000aa0:	4463      	add	r3, ip
20000aa2:	691b      	ldr	r3, [r3, #16]
20000aa4:	223c      	movs	r2, #60	; 0x3c
20000aa6:	18ba      	adds	r2, r7, r2
20000aa8:	2114      	movs	r1, #20
20000aaa:	0010      	movs	r0, r2
20000aac:	4798      	blx	r3
20000aae:	e070      	b.n	20000b92 <main+0x996>
				else if(counter < delay_until_text + 6*long_text + 4*short_text - 2 + 2)
20000ab0:	4bbd      	ldr	r3, [pc, #756]	; (20000da8 <main+0xbac>)
20000ab2:	681a      	ldr	r2, [r3, #0]
20000ab4:	0013      	movs	r3, r2
20000ab6:	005b      	lsls	r3, r3, #1
20000ab8:	189b      	adds	r3, r3, r2
20000aba:	005b      	lsls	r3, r3, #1
20000abc:	001a      	movs	r2, r3
20000abe:	4bbb      	ldr	r3, [pc, #748]	; (20000dac <main+0xbb0>)
20000ac0:	681b      	ldr	r3, [r3, #0]
20000ac2:	18d2      	adds	r2, r2, r3
20000ac4:	4bba      	ldr	r3, [pc, #744]	; (20000db0 <main+0xbb4>)
20000ac6:	681b      	ldr	r3, [r3, #0]
20000ac8:	009b      	lsls	r3, r3, #2
20000aca:	18d2      	adds	r2, r2, r3
20000acc:	4bb9      	ldr	r3, [pc, #740]	; (20000db4 <main+0xbb8>)
20000ace:	681b      	ldr	r3, [r3, #0]
20000ad0:	429a      	cmp	r2, r3
20000ad2:	dd0c      	ble.n	20000aee <main+0x8f2>
					text10.display(&text10, 15);
20000ad4:	4bb9      	ldr	r3, [pc, #740]	; (20000dbc <main+0xbc0>)
20000ad6:	22d2      	movs	r2, #210	; 0xd2
20000ad8:	0092      	lsls	r2, r2, #2
20000ada:	4694      	mov	ip, r2
20000adc:	44bc      	add	ip, r7
20000ade:	4463      	add	r3, ip
20000ae0:	691b      	ldr	r3, [r3, #16]
20000ae2:	2228      	movs	r2, #40	; 0x28
20000ae4:	18ba      	adds	r2, r7, r2
20000ae6:	210f      	movs	r1, #15
20000ae8:	0010      	movs	r0, r2
20000aea:	4798      	blx	r3
20000aec:	e051      	b.n	20000b92 <main+0x996>
				else if(counter < delay_until_text + 6*long_text + 5*short_text + 3 + 2)
20000aee:	4bae      	ldr	r3, [pc, #696]	; (20000da8 <main+0xbac>)
20000af0:	681a      	ldr	r2, [r3, #0]
20000af2:	0013      	movs	r3, r2
20000af4:	005b      	lsls	r3, r3, #1
20000af6:	189b      	adds	r3, r3, r2
20000af8:	005b      	lsls	r3, r3, #1
20000afa:	001a      	movs	r2, r3
20000afc:	4bab      	ldr	r3, [pc, #684]	; (20000dac <main+0xbb0>)
20000afe:	681b      	ldr	r3, [r3, #0]
20000b00:	18d1      	adds	r1, r2, r3
20000b02:	4bab      	ldr	r3, [pc, #684]	; (20000db0 <main+0xbb4>)
20000b04:	681a      	ldr	r2, [r3, #0]
20000b06:	0013      	movs	r3, r2
20000b08:	009b      	lsls	r3, r3, #2
20000b0a:	189b      	adds	r3, r3, r2
20000b0c:	18cb      	adds	r3, r1, r3
20000b0e:	1d5a      	adds	r2, r3, #5
20000b10:	4ba8      	ldr	r3, [pc, #672]	; (20000db4 <main+0xbb8>)
20000b12:	681b      	ldr	r3, [r3, #0]
20000b14:	429a      	cmp	r2, r3
20000b16:	dd0b      	ble.n	20000b30 <main+0x934>
					text12.display(&text12, 15);
20000b18:	4ba9      	ldr	r3, [pc, #676]	; (20000dc0 <main+0xbc4>)
20000b1a:	22d2      	movs	r2, #210	; 0xd2
20000b1c:	0092      	lsls	r2, r2, #2
20000b1e:	4694      	mov	ip, r2
20000b20:	44bc      	add	ip, r7
20000b22:	4463      	add	r3, ip
20000b24:	691b      	ldr	r3, [r3, #16]
20000b26:	003a      	movs	r2, r7
20000b28:	210f      	movs	r1, #15
20000b2a:	0010      	movs	r0, r2
20000b2c:	4798      	blx	r3
20000b2e:	e030      	b.n	20000b92 <main+0x996>
				else if(counter < delay_until_text + 7*long_text + 5*short_text + 6 + 2) {
20000b30:	4b9d      	ldr	r3, [pc, #628]	; (20000da8 <main+0xbac>)
20000b32:	681a      	ldr	r2, [r3, #0]
20000b34:	0013      	movs	r3, r2
20000b36:	00db      	lsls	r3, r3, #3
20000b38:	1a9a      	subs	r2, r3, r2
20000b3a:	4b9c      	ldr	r3, [pc, #624]	; (20000dac <main+0xbb0>)
20000b3c:	681b      	ldr	r3, [r3, #0]
20000b3e:	18d1      	adds	r1, r2, r3
20000b40:	4b9b      	ldr	r3, [pc, #620]	; (20000db0 <main+0xbb4>)
20000b42:	681a      	ldr	r2, [r3, #0]
20000b44:	0013      	movs	r3, r2
20000b46:	009b      	lsls	r3, r3, #2
20000b48:	189b      	adds	r3, r3, r2
20000b4a:	18cb      	adds	r3, r1, r3
20000b4c:	3308      	adds	r3, #8
20000b4e:	001a      	movs	r2, r3
20000b50:	4b98      	ldr	r3, [pc, #608]	; (20000db4 <main+0xbb8>)
20000b52:	681b      	ldr	r3, [r3, #0]
20000b54:	429a      	cmp	r2, r3
20000b56:	dd0c      	ble.n	20000b72 <main+0x976>
					text11.display(&text11, 20);
20000b58:	4b9a      	ldr	r3, [pc, #616]	; (20000dc4 <main+0xbc8>)
20000b5a:	22d2      	movs	r2, #210	; 0xd2
20000b5c:	0092      	lsls	r2, r2, #2
20000b5e:	4694      	mov	ip, r2
20000b60:	44bc      	add	ip, r7
20000b62:	4463      	add	r3, ip
20000b64:	691b      	ldr	r3, [r3, #16]
20000b66:	2214      	movs	r2, #20
20000b68:	18ba      	adds	r2, r7, r2
20000b6a:	2114      	movs	r1, #20
20000b6c:	0010      	movs	r0, r2
20000b6e:	4798      	blx	r3
20000b70:	e00f      	b.n	20000b92 <main+0x996>
				} else {
					if (read_DIL() == 0) {
20000b72:	f001 fe19 	bl	200027a8 <read_DIL>
20000b76:	1e03      	subs	r3, r0, #0
20000b78:	d10b      	bne.n	20000b92 <main+0x996>
						current_screen = GAME_SCREEN;
20000b7a:	4b93      	ldr	r3, [pc, #588]	; (20000dc8 <main+0xbcc>)
20000b7c:	2202      	movs	r2, #2
20000b7e:	601a      	str	r2, [r3, #0]
						random_seed = counter;
20000b80:	4b8c      	ldr	r3, [pc, #560]	; (20000db4 <main+0xbb8>)
20000b82:	681a      	ldr	r2, [r3, #0]
20000b84:	4b91      	ldr	r3, [pc, #580]	; (20000dcc <main+0xbd0>)
20000b86:	601a      	str	r2, [r3, #0]
						counter = 0;
20000b88:	4b8a      	ldr	r3, [pc, #552]	; (20000db4 <main+0xbb8>)
20000b8a:	2200      	movs	r2, #0
20000b8c:	601a      	str	r2, [r3, #0]
						clear_ascii();
20000b8e:	f001 ffd8 	bl	20002b42 <clear_ascii>
					}
				}
				
				if(read_DIL() == SKIP_VALUE) {
20000b92:	f001 fe09 	bl	200027a8 <read_DIL>
20000b96:	0003      	movs	r3, r0
20000b98:	2b8f      	cmp	r3, #143	; 0x8f
20000b9a:	d10b      	bne.n	20000bb4 <main+0x9b8>
					current_screen = GAME_SCREEN;
20000b9c:	4b8a      	ldr	r3, [pc, #552]	; (20000dc8 <main+0xbcc>)
20000b9e:	2202      	movs	r2, #2
20000ba0:	601a      	str	r2, [r3, #0]
					random_seed = counter;
20000ba2:	4b84      	ldr	r3, [pc, #528]	; (20000db4 <main+0xbb8>)
20000ba4:	681a      	ldr	r2, [r3, #0]
20000ba6:	4b89      	ldr	r3, [pc, #548]	; (20000dcc <main+0xbd0>)
20000ba8:	601a      	str	r2, [r3, #0]
					counter = 0;
20000baa:	4b82      	ldr	r3, [pc, #520]	; (20000db4 <main+0xbb8>)
20000bac:	2200      	movs	r2, #0
20000bae:	601a      	str	r2, [r3, #0]
					clear_ascii();
20000bb0:	f001 ffc7 	bl	20002b42 <clear_ascii>
				}
				
				
				fire2.update(&fire2);
20000bb4:	4b86      	ldr	r3, [pc, #536]	; (20000dd0 <main+0xbd4>)
20000bb6:	22d2      	movs	r2, #210	; 0xd2
20000bb8:	0092      	lsls	r2, r2, #2
20000bba:	4694      	mov	ip, r2
20000bbc:	44bc      	add	ip, r7
20000bbe:	4463      	add	r3, ip
20000bc0:	68db      	ldr	r3, [r3, #12]
20000bc2:	22ca      	movs	r2, #202	; 0xca
20000bc4:	0052      	lsls	r2, r2, #1
20000bc6:	18ba      	adds	r2, r7, r2
20000bc8:	0010      	movs	r0, r2
20000bca:	4798      	blx	r3
				fire3.update(&fire3);
20000bcc:	4b81      	ldr	r3, [pc, #516]	; (20000dd4 <main+0xbd8>)
20000bce:	22d2      	movs	r2, #210	; 0xd2
20000bd0:	0092      	lsls	r2, r2, #2
20000bd2:	4694      	mov	ip, r2
20000bd4:	44bc      	add	ip, r7
20000bd6:	4463      	add	r3, ip
20000bd8:	68db      	ldr	r3, [r3, #12]
20000bda:	22b8      	movs	r2, #184	; 0xb8
20000bdc:	0052      	lsls	r2, r2, #1
20000bde:	18ba      	adds	r2, r7, r2
20000be0:	0010      	movs	r0, r2
20000be2:	4798      	blx	r3
				fire1.update(&fire1);
20000be4:	4b7c      	ldr	r3, [pc, #496]	; (20000dd8 <main+0xbdc>)
20000be6:	22d2      	movs	r2, #210	; 0xd2
20000be8:	0092      	lsls	r2, r2, #2
20000bea:	4694      	mov	ip, r2
20000bec:	44bc      	add	ip, r7
20000bee:	4463      	add	r3, ip
20000bf0:	68db      	ldr	r3, [r3, #12]
20000bf2:	2294      	movs	r2, #148	; 0x94
20000bf4:	0052      	lsls	r2, r2, #1
20000bf6:	18ba      	adds	r2, r7, r2
20000bf8:	0010      	movs	r0, r2
20000bfa:	4798      	blx	r3
				fire4.update(&fire4);
20000bfc:	4b77      	ldr	r3, [pc, #476]	; (20000ddc <main+0xbe0>)
20000bfe:	22d2      	movs	r2, #210	; 0xd2
20000c00:	0092      	lsls	r2, r2, #2
20000c02:	4694      	mov	ip, r2
20000c04:	44bc      	add	ip, r7
20000c06:	4463      	add	r3, ip
20000c08:	68db      	ldr	r3, [r3, #12]
20000c0a:	22a6      	movs	r2, #166	; 0xa6
20000c0c:	0052      	lsls	r2, r2, #1
20000c0e:	18ba      	adds	r2, r7, r2
20000c10:	0010      	movs	r0, r2
20000c12:	4798      	blx	r3
				bird.update(&bird);
20000c14:	4b72      	ldr	r3, [pc, #456]	; (20000de0 <main+0xbe4>)
20000c16:	22d2      	movs	r2, #210	; 0xd2
20000c18:	0092      	lsls	r2, r2, #2
20000c1a:	4694      	mov	ip, r2
20000c1c:	44bc      	add	ip, r7
20000c1e:	4463      	add	r3, ip
20000c20:	68db      	ldr	r3, [r3, #12]
20000c22:	22ee      	movs	r2, #238	; 0xee
20000c24:	0052      	lsls	r2, r2, #1
20000c26:	18ba      	adds	r2, r7, r2
20000c28:	0010      	movs	r0, r2
20000c2a:	4798      	blx	r3
				bird.xPos -= 2;
20000c2c:	4b6c      	ldr	r3, [pc, #432]	; (20000de0 <main+0xbe4>)
20000c2e:	22d2      	movs	r2, #210	; 0xd2
20000c30:	0092      	lsls	r2, r2, #2
20000c32:	4694      	mov	ip, r2
20000c34:	44bc      	add	ip, r7
20000c36:	4463      	add	r3, ip
20000c38:	685b      	ldr	r3, [r3, #4]
20000c3a:	1e9a      	subs	r2, r3, #2
20000c3c:	4b68      	ldr	r3, [pc, #416]	; (20000de0 <main+0xbe4>)
20000c3e:	21d2      	movs	r1, #210	; 0xd2
20000c40:	0089      	lsls	r1, r1, #2
20000c42:	468c      	mov	ip, r1
20000c44:	44bc      	add	ip, r7
20000c46:	4463      	add	r3, ip
20000c48:	605a      	str	r2, [r3, #4]
				if (counter % 2 == 0) {
20000c4a:	4b5a      	ldr	r3, [pc, #360]	; (20000db4 <main+0xbb8>)
20000c4c:	681b      	ldr	r3, [r3, #0]
20000c4e:	001a      	movs	r2, r3
20000c50:	2301      	movs	r3, #1
20000c52:	4013      	ands	r3, r2
20000c54:	d000      	beq.n	20000c58 <main+0xa5c>
20000c56:	e173      	b.n	20000f40 <main+0xd44>
					bird.yPos--;
20000c58:	4b61      	ldr	r3, [pc, #388]	; (20000de0 <main+0xbe4>)
20000c5a:	22d2      	movs	r2, #210	; 0xd2
20000c5c:	0092      	lsls	r2, r2, #2
20000c5e:	4694      	mov	ip, r2
20000c60:	44bc      	add	ip, r7
20000c62:	4463      	add	r3, ip
20000c64:	689b      	ldr	r3, [r3, #8]
20000c66:	1e5a      	subs	r2, r3, #1
20000c68:	4b5d      	ldr	r3, [pc, #372]	; (20000de0 <main+0xbe4>)
20000c6a:	21d2      	movs	r1, #210	; 0xd2
20000c6c:	0089      	lsls	r1, r1, #2
20000c6e:	468c      	mov	ip, r1
20000c70:	44bc      	add	ip, r7
20000c72:	4463      	add	r3, ip
20000c74:	609a      	str	r2, [r3, #8]
				}
				
				break;
20000c76:	e163      	b.n	20000f40 <main+0xd44>
				
			case GAME_SCREEN: //inside
				
				counter++;
20000c78:	4b4e      	ldr	r3, [pc, #312]	; (20000db4 <main+0xbb8>)
20000c7a:	681b      	ldr	r3, [r3, #0]
20000c7c:	1c5a      	adds	r2, r3, #1
20000c7e:	4b4d      	ldr	r3, [pc, #308]	; (20000db4 <main+0xbb8>)
20000c80:	601a      	str	r2, [r3, #0]
				if(read_DIL_single( LIGHT_TRIGGER )) {
20000c82:	2006      	movs	r0, #6
20000c84:	f001 fda0 	bl	200027c8 <read_DIL_single>
20000c88:	1e03      	subs	r3, r0, #0
20000c8a:	d006      	beq.n	20000c9a <main+0xa9e>
					draw_game_object( &indoors2 );
20000c8c:	2380      	movs	r3, #128	; 0x80
20000c8e:	009b      	lsls	r3, r3, #2
20000c90:	18fb      	adds	r3, r7, r3
20000c92:	0018      	movs	r0, r3
20000c94:	f001 fcde 	bl	20002654 <draw_game_object>
20000c98:	e00a      	b.n	20000cb0 <main+0xab4>
				} else {
					draw_game_object( &indoors );
20000c9a:	2389      	movs	r3, #137	; 0x89
20000c9c:	009b      	lsls	r3, r3, #2
20000c9e:	18fb      	adds	r3, r7, r3
20000ca0:	0018      	movs	r0, r3
20000ca2:	f001 fcd7 	bl	20002654 <draw_game_object>
					draw_game_object( &fire1_indoors );
20000ca6:	1d7b      	adds	r3, r7, #5
20000ca8:	33ff      	adds	r3, #255	; 0xff
20000caa:	0018      	movs	r0, r3
20000cac:	f001 fcd2 	bl	20002654 <draw_game_object>
				}
				
				draw_game_object( &player );
20000cb0:	23dc      	movs	r3, #220	; 0xdc
20000cb2:	005b      	lsls	r3, r3, #1
20000cb4:	18fb      	adds	r3, r7, r3
20000cb6:	0018      	movs	r0, r3
20000cb8:	f001 fccc 	bl	20002654 <draw_game_object>
				show_frame(1);
20000cbc:	2001      	movs	r0, #1
20000cbe:	f001 fd0a 	bl	200026d6 <show_frame>
				
				static int last_climb_value = 100;
				if((read_DIL_single(CLIMB_TRIGGER) != last_climb_value) && player.xPos > 90 && player.xPos < 108 && !has_climbed) {
20000cc2:	2004      	movs	r0, #4
20000cc4:	f001 fd80 	bl	200027c8 <read_DIL_single>
20000cc8:	0002      	movs	r2, r0
20000cca:	4b46      	ldr	r3, [pc, #280]	; (20000de4 <main+0xbe8>)
20000ccc:	681b      	ldr	r3, [r3, #0]
20000cce:	429a      	cmp	r2, r3
20000cd0:	d024      	beq.n	20000d1c <main+0xb20>
20000cd2:	4b45      	ldr	r3, [pc, #276]	; (20000de8 <main+0xbec>)
20000cd4:	22d2      	movs	r2, #210	; 0xd2
20000cd6:	0092      	lsls	r2, r2, #2
20000cd8:	4694      	mov	ip, r2
20000cda:	44bc      	add	ip, r7
20000cdc:	4463      	add	r3, ip
20000cde:	685b      	ldr	r3, [r3, #4]
20000ce0:	2b5a      	cmp	r3, #90	; 0x5a
20000ce2:	dd1b      	ble.n	20000d1c <main+0xb20>
20000ce4:	4b40      	ldr	r3, [pc, #256]	; (20000de8 <main+0xbec>)
20000ce6:	22d2      	movs	r2, #210	; 0xd2
20000ce8:	0092      	lsls	r2, r2, #2
20000cea:	4694      	mov	ip, r2
20000cec:	44bc      	add	ip, r7
20000cee:	4463      	add	r3, ip
20000cf0:	685b      	ldr	r3, [r3, #4]
20000cf2:	2b6b      	cmp	r3, #107	; 0x6b
20000cf4:	dc12      	bgt.n	20000d1c <main+0xb20>
20000cf6:	23d0      	movs	r3, #208	; 0xd0
20000cf8:	009b      	lsls	r3, r3, #2
20000cfa:	18fb      	adds	r3, r7, r3
20000cfc:	681b      	ldr	r3, [r3, #0]
20000cfe:	2b00      	cmp	r3, #0
20000d00:	d10c      	bne.n	20000d1c <main+0xb20>
					is_climbing = 1;
20000d02:	2301      	movs	r3, #1
20000d04:	22d1      	movs	r2, #209	; 0xd1
20000d06:	0092      	lsls	r2, r2, #2
20000d08:	18ba      	adds	r2, r7, r2
20000d0a:	6013      	str	r3, [r2, #0]
					player.xPos = 98;
20000d0c:	4b36      	ldr	r3, [pc, #216]	; (20000de8 <main+0xbec>)
20000d0e:	22d2      	movs	r2, #210	; 0xd2
20000d10:	0092      	lsls	r2, r2, #2
20000d12:	4694      	mov	ip, r2
20000d14:	44bc      	add	ip, r7
20000d16:	4463      	add	r3, ip
20000d18:	2262      	movs	r2, #98	; 0x62
20000d1a:	605a      	str	r2, [r3, #4]
				}
				last_climb_value = read_DIL_single(CLIMB_TRIGGER);
20000d1c:	2004      	movs	r0, #4
20000d1e:	f001 fd53 	bl	200027c8 <read_DIL_single>
20000d22:	0002      	movs	r2, r0
20000d24:	4b2f      	ldr	r3, [pc, #188]	; (20000de4 <main+0xbe8>)
20000d26:	601a      	str	r2, [r3, #0]
				
				if(is_climbing) {
20000d28:	23d1      	movs	r3, #209	; 0xd1
20000d2a:	009b      	lsls	r3, r3, #2
20000d2c:	18fb      	adds	r3, r7, r3
20000d2e:	681b      	ldr	r3, [r3, #0]
20000d30:	2b00      	cmp	r3, #0
20000d32:	d05b      	beq.n	20000dec <main+0xbf0>
					gameObjectUpdate( &player );
20000d34:	23dc      	movs	r3, #220	; 0xdc
20000d36:	005b      	lsls	r3, r3, #1
20000d38:	18fb      	adds	r3, r7, r3
20000d3a:	0018      	movs	r0, r3
20000d3c:	f000 f91a 	bl	20000f74 <gameObjectUpdate>
					if(player.yPos > 4) {
20000d40:	4b29      	ldr	r3, [pc, #164]	; (20000de8 <main+0xbec>)
20000d42:	22d2      	movs	r2, #210	; 0xd2
20000d44:	0092      	lsls	r2, r2, #2
20000d46:	4694      	mov	ip, r2
20000d48:	44bc      	add	ip, r7
20000d4a:	4463      	add	r3, ip
20000d4c:	689b      	ldr	r3, [r3, #8]
20000d4e:	2b04      	cmp	r3, #4
20000d50:	dd0f      	ble.n	20000d72 <main+0xb76>
						player.yPos--;
20000d52:	4b25      	ldr	r3, [pc, #148]	; (20000de8 <main+0xbec>)
20000d54:	22d2      	movs	r2, #210	; 0xd2
20000d56:	0092      	lsls	r2, r2, #2
20000d58:	4694      	mov	ip, r2
20000d5a:	44bc      	add	ip, r7
20000d5c:	4463      	add	r3, ip
20000d5e:	689b      	ldr	r3, [r3, #8]
20000d60:	1e5a      	subs	r2, r3, #1
20000d62:	4b21      	ldr	r3, [pc, #132]	; (20000de8 <main+0xbec>)
20000d64:	21d2      	movs	r1, #210	; 0xd2
20000d66:	0089      	lsls	r1, r1, #2
20000d68:	468c      	mov	ip, r1
20000d6a:	44bc      	add	ip, r7
20000d6c:	4463      	add	r3, ip
20000d6e:	609a      	str	r2, [r3, #8]
20000d70:	e048      	b.n	20000e04 <main+0xc08>
					} else {	//Stay at top level and disable climbing forever!
						player.yPos = 5;
20000d72:	4b1d      	ldr	r3, [pc, #116]	; (20000de8 <main+0xbec>)
20000d74:	22d2      	movs	r2, #210	; 0xd2
20000d76:	0092      	lsls	r2, r2, #2
20000d78:	4694      	mov	ip, r2
20000d7a:	44bc      	add	ip, r7
20000d7c:	4463      	add	r3, ip
20000d7e:	2205      	movs	r2, #5
20000d80:	609a      	str	r2, [r3, #8]
						player.xPos = 96;
20000d82:	4b19      	ldr	r3, [pc, #100]	; (20000de8 <main+0xbec>)
20000d84:	22d2      	movs	r2, #210	; 0xd2
20000d86:	0092      	lsls	r2, r2, #2
20000d88:	4694      	mov	ip, r2
20000d8a:	44bc      	add	ip, r7
20000d8c:	4463      	add	r3, ip
20000d8e:	2260      	movs	r2, #96	; 0x60
20000d90:	605a      	str	r2, [r3, #4]
						is_climbing = 0;
20000d92:	2300      	movs	r3, #0
20000d94:	22d1      	movs	r2, #209	; 0xd1
20000d96:	0092      	lsls	r2, r2, #2
20000d98:	18ba      	adds	r2, r7, r2
20000d9a:	6013      	str	r3, [r2, #0]
						has_climbed = 1;
20000d9c:	2301      	movs	r3, #1
20000d9e:	22d0      	movs	r2, #208	; 0xd0
20000da0:	0092      	lsls	r2, r2, #2
20000da2:	18ba      	adds	r2, r7, r2
20000da4:	6013      	str	r3, [r2, #0]
20000da6:	e02d      	b.n	20000e04 <main+0xc08>
20000da8:	20006be4 	andcs	r6, r0, r4, ror #23
20000dac:	20006be0 	andcs	r6, r0, r0, ror #23
20000db0:	20006be8 	andcs	r6, r0, r8, ror #23
20000db4:	20003158 	andcs	r3, r0, r8, asr r1
20000db8:	fffffcf4 			; <UNDEFINED> instruction: 0xfffffcf4
20000dbc:	fffffce0 			; <UNDEFINED> instruction: 0xfffffce0
20000dc0:	fffffcb8 			; <UNDEFINED> instruction: 0xfffffcb8
20000dc4:	fffffccc 			; <UNDEFINED> instruction: 0xfffffccc
20000dc8:	20006bdc 	ldrdcs	r6, [r0], -ip
20000dcc:	20003228 	andcs	r3, r0, r8, lsr #4
20000dd0:	fffffe4c 			; <UNDEFINED> instruction: 0xfffffe4c
20000dd4:	fffffe28 			; <UNDEFINED> instruction: 0xfffffe28
20000dd8:	fffffde0 			; <UNDEFINED> instruction: 0xfffffde0
20000ddc:	fffffe04 			; <UNDEFINED> instruction: 0xfffffe04
20000de0:	fffffe94 			; <UNDEFINED> instruction: 0xfffffe94
20000de4:	20006bec 	andcs	r6, r0, ip, ror #23
20000de8:	fffffe70 			; <UNDEFINED> instruction: 0xfffffe70
					}
				} else {
					player.update(&player);
20000dec:	4b57      	ldr	r3, [pc, #348]	; (20000f4c <main+0xd50>)
20000dee:	22d2      	movs	r2, #210	; 0xd2
20000df0:	0092      	lsls	r2, r2, #2
20000df2:	4694      	mov	ip, r2
20000df4:	44bc      	add	ip, r7
20000df6:	4463      	add	r3, ip
20000df8:	68db      	ldr	r3, [r3, #12]
20000dfa:	22dc      	movs	r2, #220	; 0xdc
20000dfc:	0052      	lsls	r2, r2, #1
20000dfe:	18ba      	adds	r2, r7, r2
20000e00:	0010      	movs	r0, r2
20000e02:	4798      	blx	r3
				}
				
				fire1_indoors.update(&fire1_indoors);
20000e04:	4b52      	ldr	r3, [pc, #328]	; (20000f50 <main+0xd54>)
20000e06:	22d2      	movs	r2, #210	; 0xd2
20000e08:	0092      	lsls	r2, r2, #2
20000e0a:	4694      	mov	ip, r2
20000e0c:	44bc      	add	ip, r7
20000e0e:	4463      	add	r3, ip
20000e10:	68db      	ldr	r3, [r3, #12]
20000e12:	1d7a      	adds	r2, r7, #5
20000e14:	32ff      	adds	r2, #255	; 0xff
20000e16:	0010      	movs	r0, r2
20000e18:	4798      	blx	r3
				
				static int distance_player_fire;
				distance_player_fire = (player.xPos + 9) - (fire1_indoors.xPos + 5);
20000e1a:	4b4c      	ldr	r3, [pc, #304]	; (20000f4c <main+0xd50>)
20000e1c:	22d2      	movs	r2, #210	; 0xd2
20000e1e:	0092      	lsls	r2, r2, #2
20000e20:	4694      	mov	ip, r2
20000e22:	44bc      	add	ip, r7
20000e24:	4463      	add	r3, ip
20000e26:	685b      	ldr	r3, [r3, #4]
20000e28:	3309      	adds	r3, #9
20000e2a:	001a      	movs	r2, r3
20000e2c:	4b48      	ldr	r3, [pc, #288]	; (20000f50 <main+0xd54>)
20000e2e:	21d2      	movs	r1, #210	; 0xd2
20000e30:	0089      	lsls	r1, r1, #2
20000e32:	468c      	mov	ip, r1
20000e34:	44bc      	add	ip, r7
20000e36:	4463      	add	r3, ip
20000e38:	685b      	ldr	r3, [r3, #4]
20000e3a:	3305      	adds	r3, #5
20000e3c:	1ad2      	subs	r2, r2, r3
20000e3e:	4b45      	ldr	r3, [pc, #276]	; (20000f54 <main+0xd58>)
20000e40:	601a      	str	r2, [r3, #0]
				if(player.yPos > (39-12) && distance_player_fire < 5 && distance_player_fire > -5) {
20000e42:	4b42      	ldr	r3, [pc, #264]	; (20000f4c <main+0xd50>)
20000e44:	22d2      	movs	r2, #210	; 0xd2
20000e46:	0092      	lsls	r2, r2, #2
20000e48:	4694      	mov	ip, r2
20000e4a:	44bc      	add	ip, r7
20000e4c:	4463      	add	r3, ip
20000e4e:	689b      	ldr	r3, [r3, #8]
20000e50:	2b1b      	cmp	r3, #27
20000e52:	dd0c      	ble.n	20000e6e <main+0xc72>
20000e54:	4b3f      	ldr	r3, [pc, #252]	; (20000f54 <main+0xd58>)
20000e56:	681b      	ldr	r3, [r3, #0]
20000e58:	2b04      	cmp	r3, #4
20000e5a:	dc08      	bgt.n	20000e6e <main+0xc72>
20000e5c:	4b3d      	ldr	r3, [pc, #244]	; (20000f54 <main+0xd58>)
20000e5e:	681b      	ldr	r3, [r3, #0]
20000e60:	3304      	adds	r3, #4
20000e62:	db04      	blt.n	20000e6e <main+0xc72>
					game_over_adder = 1;
20000e64:	2301      	movs	r3, #1
20000e66:	22ce      	movs	r2, #206	; 0xce
20000e68:	0092      	lsls	r2, r2, #2
20000e6a:	18ba      	adds	r2, r7, r2
20000e6c:	6013      	str	r3, [r2, #0]
				}
				
				game_over += game_over_adder;
20000e6e:	23cf      	movs	r3, #207	; 0xcf
20000e70:	009b      	lsls	r3, r3, #2
20000e72:	18fb      	adds	r3, r7, r3
20000e74:	681a      	ldr	r2, [r3, #0]
20000e76:	23ce      	movs	r3, #206	; 0xce
20000e78:	009b      	lsls	r3, r3, #2
20000e7a:	18fb      	adds	r3, r7, r3
20000e7c:	681b      	ldr	r3, [r3, #0]
20000e7e:	18d3      	adds	r3, r2, r3
20000e80:	22cf      	movs	r2, #207	; 0xcf
20000e82:	0092      	lsls	r2, r2, #2
20000e84:	18ba      	adds	r2, r7, r2
20000e86:	6013      	str	r3, [r2, #0]
				if(game_over == 1) {
20000e88:	23cf      	movs	r3, #207	; 0xcf
20000e8a:	009b      	lsls	r3, r3, #2
20000e8c:	18fb      	adds	r3, r7, r3
20000e8e:	681b      	ldr	r3, [r3, #0]
20000e90:	2b01      	cmp	r3, #1
20000e92:	d158      	bne.n	20000f46 <main+0xd4a>
					current_screen = RESET_GAME;
20000e94:	4b30      	ldr	r3, [pc, #192]	; (20000f58 <main+0xd5c>)
20000e96:	220a      	movs	r2, #10
20000e98:	601a      	str	r2, [r3, #0]
				}
				
				break;
20000e9a:	e054      	b.n	20000f46 <main+0xd4a>
				
			
			case RESET_GAME: //restart
				counter = 0;
20000e9c:	4b2f      	ldr	r3, [pc, #188]	; (20000f5c <main+0xd60>)
20000e9e:	2200      	movs	r2, #0
20000ea0:	601a      	str	r2, [r3, #0]
				current_screen = START_SCREEN;
20000ea2:	4b2d      	ldr	r3, [pc, #180]	; (20000f58 <main+0xd5c>)
20000ea4:	2201      	movs	r2, #1
20000ea6:	601a      	str	r2, [r3, #0]
				if(read_DIL() == 0) {
20000ea8:	f001 fc7e 	bl	200027a8 <read_DIL>
20000eac:	1e03      	subs	r3, r0, #0
20000eae:	d102      	bne.n	20000eb6 <main+0xcba>
					current_screen = SWITCH_LOCK; 
20000eb0:	4b29      	ldr	r3, [pc, #164]	; (20000f58 <main+0xd5c>)
20000eb2:	2200      	movs	r2, #0
20000eb4:	601a      	str	r2, [r3, #0]
				}
	
				is_climbing = 0;
20000eb6:	2300      	movs	r3, #0
20000eb8:	22d1      	movs	r2, #209	; 0xd1
20000eba:	0092      	lsls	r2, r2, #2
20000ebc:	18ba      	adds	r2, r7, r2
20000ebe:	6013      	str	r3, [r2, #0]
				has_climbed = 0;
20000ec0:	2300      	movs	r3, #0
20000ec2:	22d0      	movs	r2, #208	; 0xd0
20000ec4:	0092      	lsls	r2, r2, #2
20000ec6:	18ba      	adds	r2, r7, r2
20000ec8:	6013      	str	r3, [r2, #0]
				game_over = 0;
20000eca:	2300      	movs	r3, #0
20000ecc:	22cf      	movs	r2, #207	; 0xcf
20000ece:	0092      	lsls	r2, r2, #2
20000ed0:	18ba      	adds	r2, r7, r2
20000ed2:	6013      	str	r3, [r2, #0]
				game_over_adder = 0;
20000ed4:	2300      	movs	r3, #0
20000ed6:	22ce      	movs	r2, #206	; 0xce
20000ed8:	0092      	lsls	r2, r2, #2
20000eda:	18ba      	adds	r2, r7, r2
20000edc:	6013      	str	r3, [r2, #0]
				fire1_indoors.xPos = 40;		//FIRE1_INDO
20000ede:	4b1c      	ldr	r3, [pc, #112]	; (20000f50 <main+0xd54>)
20000ee0:	22d2      	movs	r2, #210	; 0xd2
20000ee2:	0092      	lsls	r2, r2, #2
20000ee4:	4694      	mov	ip, r2
20000ee6:	44bc      	add	ip, r7
20000ee8:	4463      	add	r3, ip
20000eea:	2228      	movs	r2, #40	; 0x28
20000eec:	605a      	str	r2, [r3, #4]
				fire1_indoors.yPos = 49;
20000eee:	4b18      	ldr	r3, [pc, #96]	; (20000f50 <main+0xd54>)
20000ef0:	22d2      	movs	r2, #210	; 0xd2
20000ef2:	0092      	lsls	r2, r2, #2
20000ef4:	4694      	mov	ip, r2
20000ef6:	44bc      	add	ip, r7
20000ef8:	4463      	add	r3, ip
20000efa:	2231      	movs	r2, #49	; 0x31
20000efc:	609a      	str	r2, [r3, #8]
				
				bird.xPos = 180;
20000efe:	4b18      	ldr	r3, [pc, #96]	; (20000f60 <main+0xd64>)
20000f00:	22d2      	movs	r2, #210	; 0xd2
20000f02:	0092      	lsls	r2, r2, #2
20000f04:	4694      	mov	ip, r2
20000f06:	44bc      	add	ip, r7
20000f08:	4463      	add	r3, ip
20000f0a:	22b4      	movs	r2, #180	; 0xb4
20000f0c:	605a      	str	r2, [r3, #4]
				bird.yPos = 40;
20000f0e:	4b14      	ldr	r3, [pc, #80]	; (20000f60 <main+0xd64>)
20000f10:	22d2      	movs	r2, #210	; 0xd2
20000f12:	0092      	lsls	r2, r2, #2
20000f14:	4694      	mov	ip, r2
20000f16:	44bc      	add	ip, r7
20000f18:	4463      	add	r3, ip
20000f1a:	2228      	movs	r2, #40	; 0x28
20000f1c:	609a      	str	r2, [r3, #8]
				
				player.xPos = 3;
20000f1e:	4b0b      	ldr	r3, [pc, #44]	; (20000f4c <main+0xd50>)
20000f20:	22d2      	movs	r2, #210	; 0xd2
20000f22:	0092      	lsls	r2, r2, #2
20000f24:	4694      	mov	ip, r2
20000f26:	44bc      	add	ip, r7
20000f28:	4463      	add	r3, ip
20000f2a:	2203      	movs	r2, #3
20000f2c:	605a      	str	r2, [r3, #4]
				player.yPos = 64-18-7; //player position
20000f2e:	4b07      	ldr	r3, [pc, #28]	; (20000f4c <main+0xd50>)
20000f30:	22d2      	movs	r2, #210	; 0xd2
20000f32:	0092      	lsls	r2, r2, #2
20000f34:	4694      	mov	ip, r2
20000f36:	44bc      	add	ip, r7
20000f38:	4463      	add	r3, ip
20000f3a:	2227      	movs	r2, #39	; 0x27
20000f3c:	609a      	str	r2, [r3, #8]
				
				break;
20000f3e:	e003      	b.n	20000f48 <main+0xd4c>
				break;
20000f40:	46c0      	nop			; (mov r8, r8)
20000f42:	f7ff fbf1 	bl	20000728 <main+0x52c>
				break;
20000f46:	46c0      	nop			; (mov r8, r8)
		switch(current_screen) {
20000f48:	f7ff fbee 	bl	20000728 <main+0x52c>
20000f4c:	fffffe70 			; <UNDEFINED> instruction: 0xfffffe70
20000f50:	fffffdbc 			; <UNDEFINED> instruction: 0xfffffdbc
20000f54:	2000315c 	andcs	r3, r0, ip, asr r1
20000f58:	20006bdc 	ldrdcs	r6, [r0], -ip
20000f5c:	20003158 	andcs	r3, r0, r8, asr r1
20000f60:	fffffe94 			; <UNDEFINED> instruction: 0xfffffe94

20000f64 <render>:
GameObject* gameObjects[100];
int nGameObjects = 0;


void render(GameObject* this)
{
20000f64:	b580      	push	{r7, lr}
20000f66:	b082      	sub	sp, #8
20000f68:	af00      	add	r7, sp, #0
20000f6a:	6078      	str	r0, [r7, #4]
    
}
20000f6c:	46c0      	nop			; (mov r8, r8)
20000f6e:	46bd      	mov	sp, r7
20000f70:	b002      	add	sp, #8
20000f72:	bd80      	pop	{r7, pc}

20000f74 <gameObjectUpdate>:

void gameObjectUpdate(GameObject *this) {
20000f74:	b580      	push	{r7, lr}
20000f76:	b082      	sub	sp, #8
20000f78:	af00      	add	r7, sp, #0
20000f7a:	6078      	str	r0, [r7, #4]
	this->animation_counter++;
20000f7c:	687b      	ldr	r3, [r7, #4]
20000f7e:	6a1b      	ldr	r3, [r3, #32]
20000f80:	1c5a      	adds	r2, r3, #1
20000f82:	687b      	ldr	r3, [r7, #4]
20000f84:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
20000f86:	687b      	ldr	r3, [r7, #4]
20000f88:	6a1a      	ldr	r2, [r3, #32]
20000f8a:	687b      	ldr	r3, [r7, #4]
20000f8c:	69db      	ldr	r3, [r3, #28]
20000f8e:	429a      	cmp	r2, r3
20000f90:	d10f      	bne.n	20000fb2 <gameObjectUpdate+0x3e>
		this->animation_counter = 0;
20000f92:	687b      	ldr	r3, [r7, #4]
20000f94:	2200      	movs	r2, #0
20000f96:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
20000f98:	687b      	ldr	r3, [r7, #4]
20000f9a:	695b      	ldr	r3, [r3, #20]
20000f9c:	1c5a      	adds	r2, r3, #1
20000f9e:	687b      	ldr	r3, [r7, #4]
20000fa0:	699b      	ldr	r3, [r3, #24]
20000fa2:	0019      	movs	r1, r3
20000fa4:	0010      	movs	r0, r2
20000fa6:	f002 f8d1 	bl	2000314c <__aeabi_idivmod>
20000faa:	000b      	movs	r3, r1
20000fac:	001a      	movs	r2, r3
20000fae:	687b      	ldr	r3, [r7, #4]
20000fb0:	615a      	str	r2, [r3, #20]
	}
}
20000fb2:	46c0      	nop			; (mov r8, r8)
20000fb4:	46bd      	mov	sp, r7
20000fb6:	b002      	add	sp, #8
20000fb8:	bd80      	pop	{r7, pc}
	...

20000fbc <initSprites>:
Image fire2Image;
Image fire3Image;
Image fire4Image;
Image fire5Image;
Image fireImages[5];
static void initSprites( void ) {	
20000fbc:	b580      	push	{r7, lr}
20000fbe:	b08c      	sub	sp, #48	; 0x30
20000fc0:	af00      	add	r7, sp, #0
	sprite *pointer0 = &tempFireBlack;
20000fc2:	4b3e      	ldr	r3, [pc, #248]	; (200010bc <initSprites+0x100>)
20000fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer0, fire_black_2_bits, fire1_gray_width, fire1_gray_height);
20000fc6:	493e      	ldr	r1, [pc, #248]	; (200010c0 <initSprites+0x104>)
20000fc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20000fca:	230c      	movs	r3, #12
20000fcc:	2208      	movs	r2, #8
20000fce:	f001 fbcb 	bl	20002768 <load_sprite>
	fireBlack = pointer0;
20000fd2:	4b3c      	ldr	r3, [pc, #240]	; (200010c4 <initSprites+0x108>)
20000fd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20000fd6:	601a      	str	r2, [r3, #0]
	
	sprite *pointer1 = &tempFire1Gray;
20000fd8:	4b3b      	ldr	r3, [pc, #236]	; (200010c8 <initSprites+0x10c>)
20000fda:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer1, fire1_gray_bits, fire1_gray_width, fire1_gray_height);
20000fdc:	493b      	ldr	r1, [pc, #236]	; (200010cc <initSprites+0x110>)
20000fde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20000fe0:	230c      	movs	r3, #12
20000fe2:	2208      	movs	r2, #8
20000fe4:	f001 fbc0 	bl	20002768 <load_sprite>
	fire1Gray = pointer1;
20000fe8:	4b39      	ldr	r3, [pc, #228]	; (200010d0 <initSprites+0x114>)
20000fea:	6aba      	ldr	r2, [r7, #40]	; 0x28
20000fec:	601a      	str	r2, [r3, #0]

	sprite *pointer2 = &tempFire1Light;
20000fee:	4b39      	ldr	r3, [pc, #228]	; (200010d4 <initSprites+0x118>)
20000ff0:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer2, fire1_light_bits, fire1_gray_width, fire1_gray_height);
20000ff2:	4939      	ldr	r1, [pc, #228]	; (200010d8 <initSprites+0x11c>)
20000ff4:	6a78      	ldr	r0, [r7, #36]	; 0x24
20000ff6:	230c      	movs	r3, #12
20000ff8:	2208      	movs	r2, #8
20000ffa:	f001 fbb5 	bl	20002768 <load_sprite>
	fire1Light = pointer2;
20000ffe:	4b37      	ldr	r3, [pc, #220]	; (200010dc <initSprites+0x120>)
20001000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001002:	601a      	str	r2, [r3, #0]

	sprite *pointer3 = &tempFire2Gray;
20001004:	4b36      	ldr	r3, [pc, #216]	; (200010e0 <initSprites+0x124>)
20001006:	623b      	str	r3, [r7, #32]
	load_sprite(pointer3, fire2_gray_bits, fire1_gray_width, fire1_gray_height);
20001008:	4936      	ldr	r1, [pc, #216]	; (200010e4 <initSprites+0x128>)
2000100a:	6a38      	ldr	r0, [r7, #32]
2000100c:	230c      	movs	r3, #12
2000100e:	2208      	movs	r2, #8
20001010:	f001 fbaa 	bl	20002768 <load_sprite>
	fire2Gray = pointer3;
20001014:	4b34      	ldr	r3, [pc, #208]	; (200010e8 <initSprites+0x12c>)
20001016:	6a3a      	ldr	r2, [r7, #32]
20001018:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempFire2Light;
2000101a:	4b34      	ldr	r3, [pc, #208]	; (200010ec <initSprites+0x130>)
2000101c:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer4, fire2_light_bits, fire1_gray_width, fire1_gray_height);
2000101e:	4934      	ldr	r1, [pc, #208]	; (200010f0 <initSprites+0x134>)
20001020:	69f8      	ldr	r0, [r7, #28]
20001022:	230c      	movs	r3, #12
20001024:	2208      	movs	r2, #8
20001026:	f001 fb9f 	bl	20002768 <load_sprite>
	fire2Light = pointer4;
2000102a:	4b32      	ldr	r3, [pc, #200]	; (200010f4 <initSprites+0x138>)
2000102c:	69fa      	ldr	r2, [r7, #28]
2000102e:	601a      	str	r2, [r3, #0]

	sprite *pointer5 = &tempFire3Gray;
20001030:	4b31      	ldr	r3, [pc, #196]	; (200010f8 <initSprites+0x13c>)
20001032:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer5, fire3_gray_bits, fire1_gray_width, fire1_gray_height);
20001034:	4931      	ldr	r1, [pc, #196]	; (200010fc <initSprites+0x140>)
20001036:	69b8      	ldr	r0, [r7, #24]
20001038:	230c      	movs	r3, #12
2000103a:	2208      	movs	r2, #8
2000103c:	f001 fb94 	bl	20002768 <load_sprite>
	fire3Gray = pointer5;
20001040:	4b2f      	ldr	r3, [pc, #188]	; (20001100 <initSprites+0x144>)
20001042:	69ba      	ldr	r2, [r7, #24]
20001044:	601a      	str	r2, [r3, #0]

	sprite *pointer6 = &tempFire3Light;
20001046:	4b2f      	ldr	r3, [pc, #188]	; (20001104 <initSprites+0x148>)
20001048:	617b      	str	r3, [r7, #20]
	load_sprite(pointer6, fire3_light_bits, fire1_gray_width, fire1_gray_height);
2000104a:	492f      	ldr	r1, [pc, #188]	; (20001108 <initSprites+0x14c>)
2000104c:	6978      	ldr	r0, [r7, #20]
2000104e:	230c      	movs	r3, #12
20001050:	2208      	movs	r2, #8
20001052:	f001 fb89 	bl	20002768 <load_sprite>
	fire3Light = pointer6;
20001056:	4b2d      	ldr	r3, [pc, #180]	; (2000110c <initSprites+0x150>)
20001058:	697a      	ldr	r2, [r7, #20]
2000105a:	601a      	str	r2, [r3, #0]

	sprite *pointer7 = &tempFire4Gray;
2000105c:	4b2c      	ldr	r3, [pc, #176]	; (20001110 <initSprites+0x154>)
2000105e:	613b      	str	r3, [r7, #16]
	load_sprite(pointer7, fire4_gray_bits, fire1_gray_width, fire1_gray_height);
20001060:	492c      	ldr	r1, [pc, #176]	; (20001114 <initSprites+0x158>)
20001062:	6938      	ldr	r0, [r7, #16]
20001064:	230c      	movs	r3, #12
20001066:	2208      	movs	r2, #8
20001068:	f001 fb7e 	bl	20002768 <load_sprite>
	fire4Gray = pointer7;
2000106c:	4b2a      	ldr	r3, [pc, #168]	; (20001118 <initSprites+0x15c>)
2000106e:	693a      	ldr	r2, [r7, #16]
20001070:	601a      	str	r2, [r3, #0]

	sprite *pointer8 = &tempFire4Light;
20001072:	4b2a      	ldr	r3, [pc, #168]	; (2000111c <initSprites+0x160>)
20001074:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer8, fire4_light_bits, fire1_gray_width, fire1_gray_height);
20001076:	492a      	ldr	r1, [pc, #168]	; (20001120 <initSprites+0x164>)
20001078:	68f8      	ldr	r0, [r7, #12]
2000107a:	230c      	movs	r3, #12
2000107c:	2208      	movs	r2, #8
2000107e:	f001 fb73 	bl	20002768 <load_sprite>
	fire4Light = pointer8;
20001082:	4b28      	ldr	r3, [pc, #160]	; (20001124 <initSprites+0x168>)
20001084:	68fa      	ldr	r2, [r7, #12]
20001086:	601a      	str	r2, [r3, #0]

	sprite *pointer9 = &tempFire5Gray;
20001088:	4b27      	ldr	r3, [pc, #156]	; (20001128 <initSprites+0x16c>)
2000108a:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer9, fire5_gray_bits, fire1_gray_width, fire1_gray_height);
2000108c:	4927      	ldr	r1, [pc, #156]	; (2000112c <initSprites+0x170>)
2000108e:	68b8      	ldr	r0, [r7, #8]
20001090:	230c      	movs	r3, #12
20001092:	2208      	movs	r2, #8
20001094:	f001 fb68 	bl	20002768 <load_sprite>
	fire5Gray = pointer9;
20001098:	4b25      	ldr	r3, [pc, #148]	; (20001130 <initSprites+0x174>)
2000109a:	68ba      	ldr	r2, [r7, #8]
2000109c:	601a      	str	r2, [r3, #0]

	sprite *pointer10 = &tempFire5Light;
2000109e:	4b25      	ldr	r3, [pc, #148]	; (20001134 <initSprites+0x178>)
200010a0:	607b      	str	r3, [r7, #4]
	load_sprite(pointer10, fire5_light_bits, fire1_gray_width, fire1_gray_height);
200010a2:	4925      	ldr	r1, [pc, #148]	; (20001138 <initSprites+0x17c>)
200010a4:	6878      	ldr	r0, [r7, #4]
200010a6:	230c      	movs	r3, #12
200010a8:	2208      	movs	r2, #8
200010aa:	f001 fb5d 	bl	20002768 <load_sprite>
	fire5Light = pointer10;
200010ae:	4b23      	ldr	r3, [pc, #140]	; (2000113c <initSprites+0x180>)
200010b0:	687a      	ldr	r2, [r7, #4]
200010b2:	601a      	str	r2, [r3, #0]
}
200010b4:	46c0      	nop			; (mov r8, r8)
200010b6:	46bd      	mov	sp, r7
200010b8:	b00c      	add	sp, #48	; 0x30
200010ba:	bd80      	pop	{r7, pc}
200010bc:	2000340c 	andcs	r3, r0, ip, lsl #8
200010c0:	20006bf0 	strdcs	r6, [r0], -r0
200010c4:	20003504 	andcs	r3, r0, r4, lsl #10
200010c8:	200034f8 	strdcs	r3, [r0], -r8
200010cc:	20006bfc 	strdcs	r6, [r0], -ip
200010d0:	2000351c 	andcs	r3, r0, ip, lsl r5
200010d4:	200034d4 	ldrdcs	r3, [r0], -r4
200010d8:	20006c08 	andcs	r6, r0, r8, lsl #24
200010dc:	200033d4 	ldrdcs	r3, [r0], -r4
200010e0:	20003400 	andcs	r3, r0, r0, lsl #8
200010e4:	20006c14 	andcs	r6, r0, r4, lsl ip
200010e8:	20003518 	andcs	r3, r0, r8, lsl r5
200010ec:	20003508 	andcs	r3, r0, r8, lsl #10
200010f0:	20006c20 	andcs	r6, r0, r0, lsr #24
200010f4:	200034f0 	strdcs	r3, [r0], -r0
200010f8:	200034b8 			; <UNDEFINED> instruction: 0x200034b8
200010fc:	20006c2c 	andcs	r6, r0, ip, lsr #24
20001100:	200033e4 	andcs	r3, r0, r4, ror #7
20001104:	200033d8 	ldrdcs	r3, [r0], -r8
20001108:	20006c38 	andcs	r6, r0, r8, lsr ip
2000110c:	20003514 	andcs	r3, r0, r4, lsl r5
20001110:	200033e8 	andcs	r3, r0, r8, ror #7
20001114:	20006c44 	andcs	r6, r0, r4, asr #24
20001118:	200034d0 	ldrdcs	r3, [r0], -r0
2000111c:	20003424 	andcs	r3, r0, r4, lsr #8
20001120:	20006c50 	andcs	r6, r0, r0, asr ip
20001124:	2000343c 	andcs	r3, r0, ip, lsr r4
20001128:	200034ac 	andcs	r3, r0, ip, lsr #9
2000112c:	20006c5c 	andcs	r6, r0, ip, asr ip
20001130:	200034ec 	andcs	r3, r0, ip, ror #9
20001134:	200034e0 	andcs	r3, r0, r0, ror #9
20001138:	20006c68 	andcs	r6, r0, r8, ror #24
2000113c:	200034f4 	strdcs	r3, [r0], -r4

20001140 <init_fire>:
	
void init_fire( GameObject *fireObj ) {
20001140:	b590      	push	{r4, r7, lr}
20001142:	b083      	sub	sp, #12
20001144:	af00      	add	r7, sp, #0
20001146:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20001148:	4b30      	ldr	r3, [pc, #192]	; (2000120c <init_fire+0xcc>)
2000114a:	681b      	ldr	r3, [r3, #0]
2000114c:	2b00      	cmp	r3, #0
2000114e:	d049      	beq.n	200011e4 <init_fire+0xa4>
		initSprites();
20001150:	f7ff ff34 	bl	20000fbc <initSprites>
		firstTime = 0;			
20001154:	4b2d      	ldr	r3, [pc, #180]	; (2000120c <init_fire+0xcc>)
20001156:	2200      	movs	r2, #0
20001158:	601a      	str	r2, [r3, #0]

		fireImages[0] = fire1Image;
2000115a:	4b2d      	ldr	r3, [pc, #180]	; (20001210 <init_fire+0xd0>)
2000115c:	4a2d      	ldr	r2, [pc, #180]	; (20001214 <init_fire+0xd4>)
2000115e:	ca13      	ldmia	r2!, {r0, r1, r4}
20001160:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[1] = fire2Image;
20001162:	4b2b      	ldr	r3, [pc, #172]	; (20001210 <init_fire+0xd0>)
20001164:	4a2c      	ldr	r2, [pc, #176]	; (20001218 <init_fire+0xd8>)
20001166:	330c      	adds	r3, #12
20001168:	ca13      	ldmia	r2!, {r0, r1, r4}
2000116a:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[2] = fire3Image;
2000116c:	4b28      	ldr	r3, [pc, #160]	; (20001210 <init_fire+0xd0>)
2000116e:	4a2b      	ldr	r2, [pc, #172]	; (2000121c <init_fire+0xdc>)
20001170:	3318      	adds	r3, #24
20001172:	ca13      	ldmia	r2!, {r0, r1, r4}
20001174:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[3] = fire4Image;
20001176:	4b26      	ldr	r3, [pc, #152]	; (20001210 <init_fire+0xd0>)
20001178:	4a29      	ldr	r2, [pc, #164]	; (20001220 <init_fire+0xe0>)
2000117a:	3324      	adds	r3, #36	; 0x24
2000117c:	ca13      	ldmia	r2!, {r0, r1, r4}
2000117e:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[4] = fire5Image;
20001180:	4b23      	ldr	r3, [pc, #140]	; (20001210 <init_fire+0xd0>)
20001182:	4a28      	ldr	r2, [pc, #160]	; (20001224 <init_fire+0xe4>)
20001184:	3330      	adds	r3, #48	; 0x30
20001186:	ca13      	ldmia	r2!, {r0, r1, r4}
20001188:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&fireImages[0], fire1Gray, fire1Light, fireBlack);
2000118a:	4b27      	ldr	r3, [pc, #156]	; (20001228 <init_fire+0xe8>)
2000118c:	6819      	ldr	r1, [r3, #0]
2000118e:	4b27      	ldr	r3, [pc, #156]	; (2000122c <init_fire+0xec>)
20001190:	681a      	ldr	r2, [r3, #0]
20001192:	4b27      	ldr	r3, [pc, #156]	; (20001230 <init_fire+0xf0>)
20001194:	681b      	ldr	r3, [r3, #0]
20001196:	481e      	ldr	r0, [pc, #120]	; (20001210 <init_fire+0xd0>)
20001198:	f001 fad2 	bl	20002740 <load_image>
		load_image(&fireImages[1], fire2Gray, fire2Light, fireBlack);
2000119c:	4b25      	ldr	r3, [pc, #148]	; (20001234 <init_fire+0xf4>)
2000119e:	6819      	ldr	r1, [r3, #0]
200011a0:	4b25      	ldr	r3, [pc, #148]	; (20001238 <init_fire+0xf8>)
200011a2:	681a      	ldr	r2, [r3, #0]
200011a4:	4b22      	ldr	r3, [pc, #136]	; (20001230 <init_fire+0xf0>)
200011a6:	681b      	ldr	r3, [r3, #0]
200011a8:	4824      	ldr	r0, [pc, #144]	; (2000123c <init_fire+0xfc>)
200011aa:	f001 fac9 	bl	20002740 <load_image>
		load_image(&fireImages[2], fire3Gray, fire3Light, fireBlack);
200011ae:	4b24      	ldr	r3, [pc, #144]	; (20001240 <init_fire+0x100>)
200011b0:	6819      	ldr	r1, [r3, #0]
200011b2:	4b24      	ldr	r3, [pc, #144]	; (20001244 <init_fire+0x104>)
200011b4:	681a      	ldr	r2, [r3, #0]
200011b6:	4b1e      	ldr	r3, [pc, #120]	; (20001230 <init_fire+0xf0>)
200011b8:	681b      	ldr	r3, [r3, #0]
200011ba:	4823      	ldr	r0, [pc, #140]	; (20001248 <init_fire+0x108>)
200011bc:	f001 fac0 	bl	20002740 <load_image>
		load_image(&fireImages[3], fire4Gray, fire4Light, fireBlack);
200011c0:	4b22      	ldr	r3, [pc, #136]	; (2000124c <init_fire+0x10c>)
200011c2:	6819      	ldr	r1, [r3, #0]
200011c4:	4b22      	ldr	r3, [pc, #136]	; (20001250 <init_fire+0x110>)
200011c6:	681a      	ldr	r2, [r3, #0]
200011c8:	4b19      	ldr	r3, [pc, #100]	; (20001230 <init_fire+0xf0>)
200011ca:	681b      	ldr	r3, [r3, #0]
200011cc:	4821      	ldr	r0, [pc, #132]	; (20001254 <init_fire+0x114>)
200011ce:	f001 fab7 	bl	20002740 <load_image>
		load_image(&fireImages[4], fire5Gray, fire5Light, fireBlack);
200011d2:	4b21      	ldr	r3, [pc, #132]	; (20001258 <init_fire+0x118>)
200011d4:	6819      	ldr	r1, [r3, #0]
200011d6:	4b21      	ldr	r3, [pc, #132]	; (2000125c <init_fire+0x11c>)
200011d8:	681a      	ldr	r2, [r3, #0]
200011da:	4b15      	ldr	r3, [pc, #84]	; (20001230 <init_fire+0xf0>)
200011dc:	681b      	ldr	r3, [r3, #0]
200011de:	4820      	ldr	r0, [pc, #128]	; (20001260 <init_fire+0x120>)
200011e0:	f001 faae 	bl	20002740 <load_image>
	}
	
	fireObj->images = fireImages;
200011e4:	687b      	ldr	r3, [r7, #4]
200011e6:	4a0a      	ldr	r2, [pc, #40]	; (20001210 <init_fire+0xd0>)
200011e8:	601a      	str	r2, [r3, #0]

	fireObj->current_frame = 0;
200011ea:	687b      	ldr	r3, [r7, #4]
200011ec:	2200      	movs	r2, #0
200011ee:	615a      	str	r2, [r3, #20]
	fireObj->n_frames = 5;
200011f0:	687b      	ldr	r3, [r7, #4]
200011f2:	2205      	movs	r2, #5
200011f4:	619a      	str	r2, [r3, #24]
	fireObj->animation_speed = 1;
200011f6:	687b      	ldr	r3, [r7, #4]
200011f8:	2201      	movs	r2, #1
200011fa:	61da      	str	r2, [r3, #28]
	fireObj->animation_counter = 0;
200011fc:	687b      	ldr	r3, [r7, #4]
200011fe:	2200      	movs	r2, #0
20001200:	621a      	str	r2, [r3, #32]
}
20001202:	46c0      	nop			; (mov r8, r8)
20001204:	46bd      	mov	sp, r7
20001206:	b003      	add	sp, #12
20001208:	bd90      	pop	{r4, r7, pc}
2000120a:	46c0      	nop			; (mov r8, r8)
2000120c:	20006c74 	andcs	r6, r0, r4, ror ip
20001210:	20003470 	andcs	r3, r0, r0, ror r4
20001214:	20003430 	andcs	r3, r0, r0, lsr r4
20001218:	200033f4 	strdcs	r3, [r0], -r4
2000121c:	20003418 	andcs	r3, r0, r8, lsl r4
20001220:	200034c4 	andcs	r3, r0, r4, asr #9
20001224:	20003464 	andcs	r3, r0, r4, ror #8
20001228:	2000351c 	andcs	r3, r0, ip, lsl r5
2000122c:	200033d4 	ldrdcs	r3, [r0], -r4
20001230:	20003504 	andcs	r3, r0, r4, lsl #10
20001234:	20003518 	andcs	r3, r0, r8, lsl r5
20001238:	200034f0 	strdcs	r3, [r0], -r0
2000123c:	2000347c 	andcs	r3, r0, ip, ror r4
20001240:	200033e4 	andcs	r3, r0, r4, ror #7
20001244:	20003514 	andcs	r3, r0, r4, lsl r5
20001248:	20003488 	andcs	r3, r0, r8, lsl #9
2000124c:	200034d0 	ldrdcs	r3, [r0], -r0
20001250:	2000343c 	andcs	r3, r0, ip, lsr r4
20001254:	20003494 	mulcs	r0, r4, r4
20001258:	200034ec 	andcs	r3, r0, ip, ror #9
2000125c:	200034f4 	strdcs	r3, [r0], -r4
20001260:	200034a0 	andcs	r3, r0, r0, lsr #9

20001264 <playerUpdate>:
#include "gpio.h"
#include "controls.h"
#include "gameobject.h"
#include "player.h"

void playerUpdate(GameObject *this) {
20001264:	b580      	push	{r7, lr}
20001266:	b082      	sub	sp, #8
20001268:	af00      	add	r7, sp, #0
2000126a:	6078      	str	r0, [r7, #4]
	this->animation_counter++;
2000126c:	687b      	ldr	r3, [r7, #4]
2000126e:	6a1b      	ldr	r3, [r3, #32]
20001270:	1c5a      	adds	r2, r3, #1
20001272:	687b      	ldr	r3, [r7, #4]
20001274:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
20001276:	687b      	ldr	r3, [r7, #4]
20001278:	6a1a      	ldr	r2, [r3, #32]
2000127a:	687b      	ldr	r3, [r7, #4]
2000127c:	69db      	ldr	r3, [r3, #28]
2000127e:	429a      	cmp	r2, r3
20001280:	d10f      	bne.n	200012a2 <playerUpdate+0x3e>
		this->animation_counter = 0;
20001282:	687b      	ldr	r3, [r7, #4]
20001284:	2200      	movs	r2, #0
20001286:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
20001288:	687b      	ldr	r3, [r7, #4]
2000128a:	695b      	ldr	r3, [r3, #20]
2000128c:	1c5a      	adds	r2, r3, #1
2000128e:	687b      	ldr	r3, [r7, #4]
20001290:	699b      	ldr	r3, [r3, #24]
20001292:	0019      	movs	r1, r3
20001294:	0010      	movs	r0, r2
20001296:	f001 ff59 	bl	2000314c <__aeabi_idivmod>
2000129a:	000b      	movs	r3, r1
2000129c:	001a      	movs	r2, r3
2000129e:	687b      	ldr	r3, [r7, #4]
200012a0:	615a      	str	r2, [r3, #20]
	
	static lastRightValue = 0;
	static lastLeftValue = 0; 
	static speed = 0;
	
	if (!lastRightValue && read_DIL_single(RIGHT_TRIGGER)){
200012a2:	4b2c      	ldr	r3, [pc, #176]	; (20001354 <playerUpdate+0xf0>)
200012a4:	681b      	ldr	r3, [r3, #0]
200012a6:	2b00      	cmp	r3, #0
200012a8:	d109      	bne.n	200012be <playerUpdate+0x5a>
200012aa:	2000      	movs	r0, #0
200012ac:	f001 fa8c 	bl	200027c8 <read_DIL_single>
200012b0:	1e03      	subs	r3, r0, #0
200012b2:	d004      	beq.n	200012be <playerUpdate+0x5a>
		speed += SPEED_ADD;
200012b4:	4b28      	ldr	r3, [pc, #160]	; (20001358 <playerUpdate+0xf4>)
200012b6:	681b      	ldr	r3, [r3, #0]
200012b8:	1cda      	adds	r2, r3, #3
200012ba:	4b27      	ldr	r3, [pc, #156]	; (20001358 <playerUpdate+0xf4>)
200012bc:	601a      	str	r2, [r3, #0]
	}
	
	if (!lastLeftValue && read_DIL_single(LEFT_TRIGGER)){
200012be:	4b27      	ldr	r3, [pc, #156]	; (2000135c <playerUpdate+0xf8>)
200012c0:	681b      	ldr	r3, [r3, #0]
200012c2:	2b00      	cmp	r3, #0
200012c4:	d109      	bne.n	200012da <playerUpdate+0x76>
200012c6:	2007      	movs	r0, #7
200012c8:	f001 fa7e 	bl	200027c8 <read_DIL_single>
200012cc:	1e03      	subs	r3, r0, #0
200012ce:	d004      	beq.n	200012da <playerUpdate+0x76>
		speed -= SPEED_ADD;
200012d0:	4b21      	ldr	r3, [pc, #132]	; (20001358 <playerUpdate+0xf4>)
200012d2:	681b      	ldr	r3, [r3, #0]
200012d4:	1eda      	subs	r2, r3, #3
200012d6:	4b20      	ldr	r3, [pc, #128]	; (20001358 <playerUpdate+0xf4>)
200012d8:	601a      	str	r2, [r3, #0]
	}
	
	if (this->xPos + speed > LIMIT_RIGHT || this->xPos + speed < LIMIT_LEFT){
200012da:	687b      	ldr	r3, [r7, #4]
200012dc:	685a      	ldr	r2, [r3, #4]
200012de:	4b1e      	ldr	r3, [pc, #120]	; (20001358 <playerUpdate+0xf4>)
200012e0:	681b      	ldr	r3, [r3, #0]
200012e2:	18d3      	adds	r3, r2, r3
200012e4:	2b6e      	cmp	r3, #110	; 0x6e
200012e6:	dc06      	bgt.n	200012f6 <playerUpdate+0x92>
200012e8:	687b      	ldr	r3, [r7, #4]
200012ea:	685a      	ldr	r2, [r3, #4]
200012ec:	4b1a      	ldr	r3, [pc, #104]	; (20001358 <playerUpdate+0xf4>)
200012ee:	681b      	ldr	r3, [r3, #0]
200012f0:	18d3      	adds	r3, r2, r3
200012f2:	2b00      	cmp	r3, #0
200012f4:	da04      	bge.n	20001300 <playerUpdate+0x9c>
		speed *= -1;	
200012f6:	4b18      	ldr	r3, [pc, #96]	; (20001358 <playerUpdate+0xf4>)
200012f8:	681b      	ldr	r3, [r3, #0]
200012fa:	425a      	negs	r2, r3
200012fc:	4b16      	ldr	r3, [pc, #88]	; (20001358 <playerUpdate+0xf4>)
200012fe:	601a      	str	r2, [r3, #0]
	}
	
	this->xPos += speed;	
20001300:	687b      	ldr	r3, [r7, #4]
20001302:	685a      	ldr	r2, [r3, #4]
20001304:	4b14      	ldr	r3, [pc, #80]	; (20001358 <playerUpdate+0xf4>)
20001306:	681b      	ldr	r3, [r3, #0]
20001308:	18d2      	adds	r2, r2, r3
2000130a:	687b      	ldr	r3, [r7, #4]
2000130c:	605a      	str	r2, [r3, #4]
	
	if (speed > 0){
2000130e:	4b12      	ldr	r3, [pc, #72]	; (20001358 <playerUpdate+0xf4>)
20001310:	681b      	ldr	r3, [r3, #0]
20001312:	2b00      	cmp	r3, #0
20001314:	dd05      	ble.n	20001322 <playerUpdate+0xbe>
		speed--;
20001316:	4b10      	ldr	r3, [pc, #64]	; (20001358 <playerUpdate+0xf4>)
20001318:	681b      	ldr	r3, [r3, #0]
2000131a:	1e5a      	subs	r2, r3, #1
2000131c:	4b0e      	ldr	r3, [pc, #56]	; (20001358 <playerUpdate+0xf4>)
2000131e:	601a      	str	r2, [r3, #0]
20001320:	e008      	b.n	20001334 <playerUpdate+0xd0>
	}
	else if (speed < 0){
20001322:	4b0d      	ldr	r3, [pc, #52]	; (20001358 <playerUpdate+0xf4>)
20001324:	681b      	ldr	r3, [r3, #0]
20001326:	2b00      	cmp	r3, #0
20001328:	da04      	bge.n	20001334 <playerUpdate+0xd0>
		speed++;
2000132a:	4b0b      	ldr	r3, [pc, #44]	; (20001358 <playerUpdate+0xf4>)
2000132c:	681b      	ldr	r3, [r3, #0]
2000132e:	1c5a      	adds	r2, r3, #1
20001330:	4b09      	ldr	r3, [pc, #36]	; (20001358 <playerUpdate+0xf4>)
20001332:	601a      	str	r2, [r3, #0]
	}
	
	lastRightValue = read_DIL_single(RIGHT_TRIGGER);
20001334:	2000      	movs	r0, #0
20001336:	f001 fa47 	bl	200027c8 <read_DIL_single>
2000133a:	0002      	movs	r2, r0
2000133c:	4b05      	ldr	r3, [pc, #20]	; (20001354 <playerUpdate+0xf0>)
2000133e:	601a      	str	r2, [r3, #0]
	lastLeftValue = read_DIL_single(LEFT_TRIGGER);
20001340:	2007      	movs	r0, #7
20001342:	f001 fa41 	bl	200027c8 <read_DIL_single>
20001346:	0002      	movs	r2, r0
20001348:	4b04      	ldr	r3, [pc, #16]	; (2000135c <playerUpdate+0xf8>)
2000134a:	601a      	str	r2, [r3, #0]
	
2000134c:	46c0      	nop			; (mov r8, r8)
2000134e:	46bd      	mov	sp, r7
20001350:	b002      	add	sp, #8
20001352:	bd80      	pop	{r7, pc}
20001354:	20003164 	andcs	r3, r0, r4, ror #2
20001358:	20003168 	andcs	r3, r0, r8, ror #2
2000135c:	2000316c 	andcs	r3, r0, ip, ror #2

20001360 <initSprites>:
Image bird5Image;
Image bird6Image;
//Image bird7Image;
//Image bird8Image;
Image birdImages[6];
static void initSprites( void ) {	
20001360:	b580      	push	{r7, lr}
20001362:	b090      	sub	sp, #64	; 0x40
20001364:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempBirdLight;
20001366:	4b54      	ldr	r3, [pc, #336]	; (200014b8 <initSprites+0x158>)
20001368:	63fb      	str	r3, [r7, #60]	; 0x3c
	load_sprite(pointer11, bird1_light_bits, bird1_black_width, bird1_black_height);
2000136a:	4954      	ldr	r1, [pc, #336]	; (200014bc <initSprites+0x15c>)
2000136c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
2000136e:	2319      	movs	r3, #25
20001370:	2219      	movs	r2, #25
20001372:	f001 f9f9 	bl	20002768 <load_sprite>
	bird1Light = pointer11;
20001376:	4b52      	ldr	r3, [pc, #328]	; (200014c0 <initSprites+0x160>)
20001378:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
2000137a:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempBirdGray;
2000137c:	4b51      	ldr	r3, [pc, #324]	; (200014c4 <initSprites+0x164>)
2000137e:	63bb      	str	r3, [r7, #56]	; 0x38
	load_sprite(pointer12, bird1_gray_bits, bird1_black_width, bird1_black_height);
20001380:	4951      	ldr	r1, [pc, #324]	; (200014c8 <initSprites+0x168>)
20001382:	6bb8      	ldr	r0, [r7, #56]	; 0x38
20001384:	2319      	movs	r3, #25
20001386:	2219      	movs	r2, #25
20001388:	f001 f9ee 	bl	20002768 <load_sprite>
	bird1Gray = pointer12;
2000138c:	4b4f      	ldr	r3, [pc, #316]	; (200014cc <initSprites+0x16c>)
2000138e:	6bba      	ldr	r2, [r7, #56]	; 0x38
20001390:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempBirdBlack;
20001392:	4b4f      	ldr	r3, [pc, #316]	; (200014d0 <initSprites+0x170>)
20001394:	637b      	str	r3, [r7, #52]	; 0x34
	load_sprite(pointer13, bird1_black_bits, bird1_black_width, bird1_black_height);
20001396:	494f      	ldr	r1, [pc, #316]	; (200014d4 <initSprites+0x174>)
20001398:	6b78      	ldr	r0, [r7, #52]	; 0x34
2000139a:	2319      	movs	r3, #25
2000139c:	2219      	movs	r2, #25
2000139e:	f001 f9e3 	bl	20002768 <load_sprite>
	bird1Black = pointer13;	
200013a2:	4b4d      	ldr	r3, [pc, #308]	; (200014d8 <initSprites+0x178>)
200013a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
200013a6:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempBird2Light;
200013a8:	4b4c      	ldr	r3, [pc, #304]	; (200014dc <initSprites+0x17c>)
200013aa:	633b      	str	r3, [r7, #48]	; 0x30
	load_sprite(pointer14, bird2_light_bits, bird2_black_width, bird2_black_height);
200013ac:	494c      	ldr	r1, [pc, #304]	; (200014e0 <initSprites+0x180>)
200013ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
200013b0:	2319      	movs	r3, #25
200013b2:	2219      	movs	r2, #25
200013b4:	f001 f9d8 	bl	20002768 <load_sprite>
	bird2Light = pointer14;
200013b8:	4b4a      	ldr	r3, [pc, #296]	; (200014e4 <initSprites+0x184>)
200013ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
200013bc:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempBird2Gray;
200013be:	4b4a      	ldr	r3, [pc, #296]	; (200014e8 <initSprites+0x188>)
200013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer15, bird2_gray_bits, bird2_black_width, bird2_black_height);
200013c2:	494a      	ldr	r1, [pc, #296]	; (200014ec <initSprites+0x18c>)
200013c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
200013c6:	2319      	movs	r3, #25
200013c8:	2219      	movs	r2, #25
200013ca:	f001 f9cd 	bl	20002768 <load_sprite>
	bird2Gray = pointer15;
200013ce:	4b48      	ldr	r3, [pc, #288]	; (200014f0 <initSprites+0x190>)
200013d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
200013d2:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempBird2Black;
200013d4:	4b47      	ldr	r3, [pc, #284]	; (200014f4 <initSprites+0x194>)
200013d6:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer16, bird2_black_bits, bird2_black_width, bird2_black_height);
200013d8:	4947      	ldr	r1, [pc, #284]	; (200014f8 <initSprites+0x198>)
200013da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
200013dc:	2319      	movs	r3, #25
200013de:	2219      	movs	r2, #25
200013e0:	f001 f9c2 	bl	20002768 <load_sprite>
	bird2Black = pointer16;
200013e4:	4b45      	ldr	r3, [pc, #276]	; (200014fc <initSprites+0x19c>)
200013e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
200013e8:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempBird3Light;
200013ea:	4b45      	ldr	r3, [pc, #276]	; (20001500 <initSprites+0x1a0>)
200013ec:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(finalPointer, bird3_light_bits, bird3_black_width, bird3_black_height);
200013ee:	4945      	ldr	r1, [pc, #276]	; (20001504 <initSprites+0x1a4>)
200013f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
200013f2:	2319      	movs	r3, #25
200013f4:	2219      	movs	r2, #25
200013f6:	f001 f9b7 	bl	20002768 <load_sprite>
	bird3Light = finalPointer;
200013fa:	4b43      	ldr	r3, [pc, #268]	; (20001508 <initSprites+0x1a8>)
200013fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200013fe:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempBird3Gray;
20001400:	4b42      	ldr	r3, [pc, #264]	; (2000150c <initSprites+0x1ac>)
20001402:	623b      	str	r3, [r7, #32]
	load_sprite(pointer17, bird3_gray_bits, bird3_black_width, bird3_black_height);
20001404:	4942      	ldr	r1, [pc, #264]	; (20001510 <initSprites+0x1b0>)
20001406:	6a38      	ldr	r0, [r7, #32]
20001408:	2319      	movs	r3, #25
2000140a:	2219      	movs	r2, #25
2000140c:	f001 f9ac 	bl	20002768 <load_sprite>
	bird3Gray = pointer17;
20001410:	4b40      	ldr	r3, [pc, #256]	; (20001514 <initSprites+0x1b4>)
20001412:	6a3a      	ldr	r2, [r7, #32]
20001414:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempBird3Black;
20001416:	4b40      	ldr	r3, [pc, #256]	; (20001518 <initSprites+0x1b8>)
20001418:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer18, bird3_black_bits, bird3_black_width, bird3_black_height);
2000141a:	4940      	ldr	r1, [pc, #256]	; (2000151c <initSprites+0x1bc>)
2000141c:	69f8      	ldr	r0, [r7, #28]
2000141e:	2319      	movs	r3, #25
20001420:	2219      	movs	r2, #25
20001422:	f001 f9a1 	bl	20002768 <load_sprite>
	bird3Black = pointer18;	
20001426:	4b3e      	ldr	r3, [pc, #248]	; (20001520 <initSprites+0x1c0>)
20001428:	69fa      	ldr	r2, [r7, #28]
2000142a:	601a      	str	r2, [r3, #0]
	
	sprite *pointer19 = &tempBird4Light;
2000142c:	4b3d      	ldr	r3, [pc, #244]	; (20001524 <initSprites+0x1c4>)
2000142e:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer19, bird4_light_bits, bird4_black_width, bird4_black_height);
20001430:	493d      	ldr	r1, [pc, #244]	; (20001528 <initSprites+0x1c8>)
20001432:	69b8      	ldr	r0, [r7, #24]
20001434:	2319      	movs	r3, #25
20001436:	2219      	movs	r2, #25
20001438:	f001 f996 	bl	20002768 <load_sprite>
	bird4Light = pointer19;
2000143c:	4b3b      	ldr	r3, [pc, #236]	; (2000152c <initSprites+0x1cc>)
2000143e:	69ba      	ldr	r2, [r7, #24]
20001440:	601a      	str	r2, [r3, #0]
	sprite *pointer20 = &tempBird4Gray;
20001442:	4b3b      	ldr	r3, [pc, #236]	; (20001530 <initSprites+0x1d0>)
20001444:	617b      	str	r3, [r7, #20]
	load_sprite(pointer20, bird4_gray_bits, bird4_black_width, bird4_black_height);
20001446:	493b      	ldr	r1, [pc, #236]	; (20001534 <initSprites+0x1d4>)
20001448:	6978      	ldr	r0, [r7, #20]
2000144a:	2319      	movs	r3, #25
2000144c:	2219      	movs	r2, #25
2000144e:	f001 f98b 	bl	20002768 <load_sprite>
	bird4Gray = pointer20;
20001452:	4b39      	ldr	r3, [pc, #228]	; (20001538 <initSprites+0x1d8>)
20001454:	697a      	ldr	r2, [r7, #20]
20001456:	601a      	str	r2, [r3, #0]
	sprite *pointer21 = &tempBird4Black;
20001458:	4b38      	ldr	r3, [pc, #224]	; (2000153c <initSprites+0x1dc>)
2000145a:	613b      	str	r3, [r7, #16]
	load_sprite(pointer21, bird4_black_bits, bird4_black_width, bird4_black_height);
2000145c:	4938      	ldr	r1, [pc, #224]	; (20001540 <initSprites+0x1e0>)
2000145e:	6938      	ldr	r0, [r7, #16]
20001460:	2319      	movs	r3, #25
20001462:	2219      	movs	r2, #25
20001464:	f001 f980 	bl	20002768 <load_sprite>
	bird4Black = pointer21;	
20001468:	4b36      	ldr	r3, [pc, #216]	; (20001544 <initSprites+0x1e4>)
2000146a:	693a      	ldr	r2, [r7, #16]
2000146c:	601a      	str	r2, [r3, #0]
	
	sprite *pointer22 = &tempBird5Light;
2000146e:	4b36      	ldr	r3, [pc, #216]	; (20001548 <initSprites+0x1e8>)
20001470:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer22, bird5_light_bits, bird5_black_width, bird5_black_height);
20001472:	4936      	ldr	r1, [pc, #216]	; (2000154c <initSprites+0x1ec>)
20001474:	68f8      	ldr	r0, [r7, #12]
20001476:	2319      	movs	r3, #25
20001478:	2219      	movs	r2, #25
2000147a:	f001 f975 	bl	20002768 <load_sprite>
	bird5Light = pointer22;
2000147e:	4b34      	ldr	r3, [pc, #208]	; (20001550 <initSprites+0x1f0>)
20001480:	68fa      	ldr	r2, [r7, #12]
20001482:	601a      	str	r2, [r3, #0]
	sprite *pointer23 = &tempBird5Gray;
20001484:	4b33      	ldr	r3, [pc, #204]	; (20001554 <initSprites+0x1f4>)
20001486:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer23, bird5_gray_bits, bird5_black_width, bird5_black_height);
20001488:	4933      	ldr	r1, [pc, #204]	; (20001558 <initSprites+0x1f8>)
2000148a:	68b8      	ldr	r0, [r7, #8]
2000148c:	2319      	movs	r3, #25
2000148e:	2219      	movs	r2, #25
20001490:	f001 f96a 	bl	20002768 <load_sprite>
	bird5Gray = pointer23;
20001494:	4b31      	ldr	r3, [pc, #196]	; (2000155c <initSprites+0x1fc>)
20001496:	68ba      	ldr	r2, [r7, #8]
20001498:	601a      	str	r2, [r3, #0]
	sprite *pointer24 = &tempBird5Black;
2000149a:	4b31      	ldr	r3, [pc, #196]	; (20001560 <initSprites+0x200>)
2000149c:	607b      	str	r3, [r7, #4]
	load_sprite(pointer24, bird5_black_bits, bird5_black_width, bird5_black_height);
2000149e:	4931      	ldr	r1, [pc, #196]	; (20001564 <initSprites+0x204>)
200014a0:	6878      	ldr	r0, [r7, #4]
200014a2:	2319      	movs	r3, #25
200014a4:	2219      	movs	r2, #25
200014a6:	f001 f95f 	bl	20002768 <load_sprite>
	bird5Black = pointer24;
200014aa:	4b2f      	ldr	r3, [pc, #188]	; (20001568 <initSprites+0x208>)
200014ac:	687a      	ldr	r2, [r7, #4]
200014ae:	601a      	str	r2, [r3, #0]
}
200014b0:	46c0      	nop			; (mov r8, r8)
200014b2:	46bd      	mov	sp, r7
200014b4:	b010      	add	sp, #64	; 0x40
200014b6:	bd80      	pop	{r7, pc}
200014b8:	20003610 	andcs	r3, r0, r0, lsl r6
200014bc:	20006d40 	andcs	r6, r0, r0, asr #26
200014c0:	2000361c 	andcs	r3, r0, ip, lsl r6
200014c4:	200035ac 	andcs	r3, r0, ip, lsr #11
200014c8:	20006cdc 	ldrdcs	r6, [r0], -ip
200014cc:	20003524 	andcs	r3, r0, r4, lsr #10
200014d0:	2000359c 	mulcs	r0, ip, r5
200014d4:	20006c78 	andcs	r6, r0, r8, ror ip
200014d8:	2000358c 	andcs	r3, r0, ip, lsl #11
200014dc:	20003620 	andcs	r3, r0, r0, lsr #12
200014e0:	20006e6c 	andcs	r6, r0, ip, ror #28
200014e4:	200036c0 	andcs	r3, r0, r0, asr #13
200014e8:	200035c8 	andcs	r3, r0, r8, asr #11
200014ec:	20006e08 	andcs	r6, r0, r8, lsl #28
200014f0:	2000360c 	andcs	r3, r0, ip, lsl #12
200014f4:	200036a8 	andcs	r3, r0, r8, lsr #13
200014f8:	20006da4 	andcs	r6, r0, r4, lsr #27
200014fc:	20003588 	andcs	r3, r0, r8, lsl #11
20001500:	20003644 	andcs	r3, r0, r4, asr #12
20001504:	20006f98 	mulcs	r0, r8, pc	; <UNPREDICTABLE>
20001508:	200035d4 	ldrdcs	r3, [r0], -r4
2000150c:	20003650 	andcs	r3, r0, r0, asr r6
20001510:	20006f34 	andcs	r6, r0, r4, lsr pc
20001514:	200035a8 	andcs	r3, r0, r8, lsr #11
20001518:	20003600 	andcs	r3, r0, r0, lsl #12
2000151c:	20006ed0 	ldrdcs	r6, [r0], -r0
20001520:	20003580 	andcs	r3, r0, r0, lsl #11
20001524:	20003638 	andcs	r3, r0, r8, lsr r6
20001528:	200070c4 	andcs	r7, r0, r4, asr #1
2000152c:	20003520 	andcs	r3, r0, r0, lsr #10
20001530:	200036b4 			; <UNDEFINED> instruction: 0x200036b4
20001534:	20007060 	andcs	r7, r0, r0, rrx
20001538:	20003584 	andcs	r3, r0, r4, lsl #11
2000153c:	20003538 	andcs	r3, r0, r8, lsr r5
20001540:	20006ffc 	strdcs	r6, [r0], -ip
20001544:	200036a4 	andcs	r3, r0, r4, lsr #13
20001548:	200035bc 			; <UNDEFINED> instruction: 0x200035bc
2000154c:	200071f0 	strdcs	r7, [r0], -r0
20001550:	200035fc 	strdcs	r3, [r0], -ip
20001554:	200035d8 	ldrdcs	r3, [r0], -r8
20001558:	2000718c 	andcs	r7, r0, ip, lsl #3
2000155c:	200035b8 			; <UNDEFINED> instruction: 0x200035b8
20001560:	200035e4 	andcs	r3, r0, r4, ror #11
20001564:	20007128 	andcs	r7, r0, r8, lsr #2
20001568:	20003534 	andcs	r3, r0, r4, lsr r5

2000156c <init_bird>:
	
void init_bird( GameObject *birdObj ) {
2000156c:	b590      	push	{r4, r7, lr}
2000156e:	b083      	sub	sp, #12
20001570:	af00      	add	r7, sp, #0
20001572:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20001574:	4b37      	ldr	r3, [pc, #220]	; (20001654 <init_bird+0xe8>)
20001576:	681b      	ldr	r3, [r3, #0]
20001578:	2b00      	cmp	r3, #0
2000157a:	d057      	beq.n	2000162c <init_bird+0xc0>
		initSprites();
2000157c:	f7ff fef0 	bl	20001360 <initSprites>
		firstTime = 0;			
20001580:	4b34      	ldr	r3, [pc, #208]	; (20001654 <init_bird+0xe8>)
20001582:	2200      	movs	r2, #0
20001584:	601a      	str	r2, [r3, #0]

		birdImages[0] = bird1Image;
20001586:	4b34      	ldr	r3, [pc, #208]	; (20001658 <init_bird+0xec>)
20001588:	4a34      	ldr	r2, [pc, #208]	; (2000165c <init_bird+0xf0>)
2000158a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000158c:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[1] = bird2Image;
2000158e:	4b32      	ldr	r3, [pc, #200]	; (20001658 <init_bird+0xec>)
20001590:	4a33      	ldr	r2, [pc, #204]	; (20001660 <init_bird+0xf4>)
20001592:	330c      	adds	r3, #12
20001594:	ca13      	ldmia	r2!, {r0, r1, r4}
20001596:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[2] = bird3Image;
20001598:	4b2f      	ldr	r3, [pc, #188]	; (20001658 <init_bird+0xec>)
2000159a:	4a32      	ldr	r2, [pc, #200]	; (20001664 <init_bird+0xf8>)
2000159c:	3318      	adds	r3, #24
2000159e:	ca13      	ldmia	r2!, {r0, r1, r4}
200015a0:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[3] = bird4Image;
200015a2:	4b2d      	ldr	r3, [pc, #180]	; (20001658 <init_bird+0xec>)
200015a4:	4a30      	ldr	r2, [pc, #192]	; (20001668 <init_bird+0xfc>)
200015a6:	3324      	adds	r3, #36	; 0x24
200015a8:	ca13      	ldmia	r2!, {r0, r1, r4}
200015aa:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[4] = bird5Image;
200015ac:	4b2a      	ldr	r3, [pc, #168]	; (20001658 <init_bird+0xec>)
200015ae:	4a2f      	ldr	r2, [pc, #188]	; (2000166c <init_bird+0x100>)
200015b0:	3330      	adds	r3, #48	; 0x30
200015b2:	ca13      	ldmia	r2!, {r0, r1, r4}
200015b4:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[5] = bird6Image;
200015b6:	4b28      	ldr	r3, [pc, #160]	; (20001658 <init_bird+0xec>)
200015b8:	4a2d      	ldr	r2, [pc, #180]	; (20001670 <init_bird+0x104>)
200015ba:	333c      	adds	r3, #60	; 0x3c
200015bc:	ca13      	ldmia	r2!, {r0, r1, r4}
200015be:	c313      	stmia	r3!, {r0, r1, r4}
//		birdImages[6] = bird7Image;
		//birdImages[7] = bird8Image;
		
		load_image(&birdImages[0], bird1Black, bird1Gray, bird1Light);
200015c0:	4b2c      	ldr	r3, [pc, #176]	; (20001674 <init_bird+0x108>)
200015c2:	6819      	ldr	r1, [r3, #0]
200015c4:	4b2c      	ldr	r3, [pc, #176]	; (20001678 <init_bird+0x10c>)
200015c6:	681a      	ldr	r2, [r3, #0]
200015c8:	4b2c      	ldr	r3, [pc, #176]	; (2000167c <init_bird+0x110>)
200015ca:	681b      	ldr	r3, [r3, #0]
200015cc:	4822      	ldr	r0, [pc, #136]	; (20001658 <init_bird+0xec>)
200015ce:	f001 f8b7 	bl	20002740 <load_image>
		load_image(&birdImages[1], bird2Black, bird2Gray, bird2Light);
200015d2:	4b2b      	ldr	r3, [pc, #172]	; (20001680 <init_bird+0x114>)
200015d4:	6819      	ldr	r1, [r3, #0]
200015d6:	4b2b      	ldr	r3, [pc, #172]	; (20001684 <init_bird+0x118>)
200015d8:	681a      	ldr	r2, [r3, #0]
200015da:	4b2b      	ldr	r3, [pc, #172]	; (20001688 <init_bird+0x11c>)
200015dc:	681b      	ldr	r3, [r3, #0]
200015de:	482b      	ldr	r0, [pc, #172]	; (2000168c <init_bird+0x120>)
200015e0:	f001 f8ae 	bl	20002740 <load_image>
		load_image(&birdImages[2], bird3Black, bird3Gray, bird3Light);
200015e4:	4b2a      	ldr	r3, [pc, #168]	; (20001690 <init_bird+0x124>)
200015e6:	6819      	ldr	r1, [r3, #0]
200015e8:	4b2a      	ldr	r3, [pc, #168]	; (20001694 <init_bird+0x128>)
200015ea:	681a      	ldr	r2, [r3, #0]
200015ec:	4b2a      	ldr	r3, [pc, #168]	; (20001698 <init_bird+0x12c>)
200015ee:	681b      	ldr	r3, [r3, #0]
200015f0:	482a      	ldr	r0, [pc, #168]	; (2000169c <init_bird+0x130>)
200015f2:	f001 f8a5 	bl	20002740 <load_image>
		load_image(&birdImages[3], bird4Black, bird4Gray, bird4Light);
200015f6:	4b2a      	ldr	r3, [pc, #168]	; (200016a0 <init_bird+0x134>)
200015f8:	6819      	ldr	r1, [r3, #0]
200015fa:	4b2a      	ldr	r3, [pc, #168]	; (200016a4 <init_bird+0x138>)
200015fc:	681a      	ldr	r2, [r3, #0]
200015fe:	4b2a      	ldr	r3, [pc, #168]	; (200016a8 <init_bird+0x13c>)
20001600:	681b      	ldr	r3, [r3, #0]
20001602:	482a      	ldr	r0, [pc, #168]	; (200016ac <init_bird+0x140>)
20001604:	f001 f89c 	bl	20002740 <load_image>
		load_image(&birdImages[4], bird5Black, bird5Gray, bird5Light);
20001608:	4b29      	ldr	r3, [pc, #164]	; (200016b0 <init_bird+0x144>)
2000160a:	6819      	ldr	r1, [r3, #0]
2000160c:	4b29      	ldr	r3, [pc, #164]	; (200016b4 <init_bird+0x148>)
2000160e:	681a      	ldr	r2, [r3, #0]
20001610:	4b29      	ldr	r3, [pc, #164]	; (200016b8 <init_bird+0x14c>)
20001612:	681b      	ldr	r3, [r3, #0]
20001614:	4829      	ldr	r0, [pc, #164]	; (200016bc <init_bird+0x150>)
20001616:	f001 f893 	bl	20002740 <load_image>
		
		//load_image(&birdImages[7], bird2Black, bird2Gray, bird2Light);
		load_image(&birdImages[5], bird3Black, bird3Gray, bird3Light);
2000161a:	4b1d      	ldr	r3, [pc, #116]	; (20001690 <init_bird+0x124>)
2000161c:	6819      	ldr	r1, [r3, #0]
2000161e:	4b1d      	ldr	r3, [pc, #116]	; (20001694 <init_bird+0x128>)
20001620:	681a      	ldr	r2, [r3, #0]
20001622:	4b1d      	ldr	r3, [pc, #116]	; (20001698 <init_bird+0x12c>)
20001624:	681b      	ldr	r3, [r3, #0]
20001626:	4826      	ldr	r0, [pc, #152]	; (200016c0 <init_bird+0x154>)
20001628:	f001 f88a 	bl	20002740 <load_image>
		//load_image(&birdImages[5], bird4Black, bird4Gray, bird4Light);
	}
	
	birdObj->images = birdImages;
2000162c:	687b      	ldr	r3, [r7, #4]
2000162e:	4a0a      	ldr	r2, [pc, #40]	; (20001658 <init_bird+0xec>)
20001630:	601a      	str	r2, [r3, #0]

	birdObj->current_frame = 0;
20001632:	687b      	ldr	r3, [r7, #4]
20001634:	2200      	movs	r2, #0
20001636:	615a      	str	r2, [r3, #20]
	birdObj->n_frames = 6;
20001638:	687b      	ldr	r3, [r7, #4]
2000163a:	2206      	movs	r2, #6
2000163c:	619a      	str	r2, [r3, #24]
	birdObj->animation_speed = 1;
2000163e:	687b      	ldr	r3, [r7, #4]
20001640:	2201      	movs	r2, #1
20001642:	61da      	str	r2, [r3, #28]
	birdObj->animation_counter = 0;
20001644:	687b      	ldr	r3, [r7, #4]
20001646:	2200      	movs	r2, #0
20001648:	621a      	str	r2, [r3, #32]
}
2000164a:	46c0      	nop			; (mov r8, r8)
2000164c:	46bd      	mov	sp, r7
2000164e:	b003      	add	sp, #12
20001650:	bd90      	pop	{r4, r7, pc}
20001652:	46c0      	nop			; (mov r8, r8)
20001654:	20007254 	andcs	r7, r0, r4, asr r2
20001658:	2000365c 	andcs	r3, r0, ip, asr r6
2000165c:	20003574 	andcs	r3, r0, r4, ror r5
20001660:	20003544 	andcs	r3, r0, r4, asr #10
20001664:	2000362c 	andcs	r3, r0, ip, lsr #12
20001668:	20003590 	mulcs	r0, r0, r5
2000166c:	200035f0 	strdcs	r3, [r0], -r0
20001670:	20003528 	andcs	r3, r0, r8, lsr #10
20001674:	2000358c 	andcs	r3, r0, ip, lsl #11
20001678:	20003524 	andcs	r3, r0, r4, lsr #10
2000167c:	2000361c 	andcs	r3, r0, ip, lsl r6
20001680:	20003588 	andcs	r3, r0, r8, lsl #11
20001684:	2000360c 	andcs	r3, r0, ip, lsl #12
20001688:	200036c0 	andcs	r3, r0, r0, asr #13
2000168c:	20003668 	andcs	r3, r0, r8, ror #12
20001690:	20003580 	andcs	r3, r0, r0, lsl #11
20001694:	200035a8 	andcs	r3, r0, r8, lsr #11
20001698:	200035d4 	ldrdcs	r3, [r0], -r4
2000169c:	20003674 	andcs	r3, r0, r4, ror r6
200016a0:	200036a4 	andcs	r3, r0, r4, lsr #13
200016a4:	20003584 	andcs	r3, r0, r4, lsl #11
200016a8:	20003520 	andcs	r3, r0, r0, lsr #10
200016ac:	20003680 	andcs	r3, r0, r0, lsl #13
200016b0:	20003534 	andcs	r3, r0, r4, lsr r5
200016b4:	200035b8 			; <UNDEFINED> instruction: 0x200035b8
200016b8:	200035fc 	strdcs	r3, [r0], -ip
200016bc:	2000368c 	andcs	r3, r0, ip, lsl #13
200016c0:	20003698 	mulcs	r0, r8, r6

200016c4 <initSprites>:
Image witch1Image;
Image witch2Image;
Image witch3Image;
Image witch4Image;
Image witchImages[4];
static void initSprites( void ) {	
200016c4:	b580      	push	{r7, lr}
200016c6:	b08a      	sub	sp, #40	; 0x28
200016c8:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempWitchLight;
200016ca:	4b33      	ldr	r3, [pc, #204]	; (20001798 <initSprites+0xd4>)
200016cc:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer11, witch1_light_bits, witch1_black_width, witch1_black_height);
200016ce:	4933      	ldr	r1, [pc, #204]	; (2000179c <initSprites+0xd8>)
200016d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
200016d2:	2312      	movs	r3, #18
200016d4:	2212      	movs	r2, #18
200016d6:	f001 f847 	bl	20002768 <load_sprite>
	witch1Light = pointer11;
200016da:	4b31      	ldr	r3, [pc, #196]	; (200017a0 <initSprites+0xdc>)
200016dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200016de:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempWitchGray;
200016e0:	4b30      	ldr	r3, [pc, #192]	; (200017a4 <initSprites+0xe0>)
200016e2:	623b      	str	r3, [r7, #32]
	load_sprite(pointer12, witch1_gray_bits, witch1_black_width, witch1_black_height);
200016e4:	4930      	ldr	r1, [pc, #192]	; (200017a8 <initSprites+0xe4>)
200016e6:	6a38      	ldr	r0, [r7, #32]
200016e8:	2312      	movs	r3, #18
200016ea:	2212      	movs	r2, #18
200016ec:	f001 f83c 	bl	20002768 <load_sprite>
	witch1Gray = pointer12;
200016f0:	4b2e      	ldr	r3, [pc, #184]	; (200017ac <initSprites+0xe8>)
200016f2:	6a3a      	ldr	r2, [r7, #32]
200016f4:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempWitchBlack;
200016f6:	4b2e      	ldr	r3, [pc, #184]	; (200017b0 <initSprites+0xec>)
200016f8:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer13, witch1_black_bits, witch1_black_width, witch1_black_height);
200016fa:	492e      	ldr	r1, [pc, #184]	; (200017b4 <initSprites+0xf0>)
200016fc:	69f8      	ldr	r0, [r7, #28]
200016fe:	2312      	movs	r3, #18
20001700:	2212      	movs	r2, #18
20001702:	f001 f831 	bl	20002768 <load_sprite>
	witch1Black = pointer13;	
20001706:	4b2c      	ldr	r3, [pc, #176]	; (200017b8 <initSprites+0xf4>)
20001708:	69fa      	ldr	r2, [r7, #28]
2000170a:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempWitch2Light;
2000170c:	4b2b      	ldr	r3, [pc, #172]	; (200017bc <initSprites+0xf8>)
2000170e:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer14, witch2_light_bits, witch2_black_width, witch2_black_height);
20001710:	492b      	ldr	r1, [pc, #172]	; (200017c0 <initSprites+0xfc>)
20001712:	69b8      	ldr	r0, [r7, #24]
20001714:	2312      	movs	r3, #18
20001716:	2212      	movs	r2, #18
20001718:	f001 f826 	bl	20002768 <load_sprite>
	witch2Light = pointer14;
2000171c:	4b29      	ldr	r3, [pc, #164]	; (200017c4 <initSprites+0x100>)
2000171e:	69ba      	ldr	r2, [r7, #24]
20001720:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempWitch2Gray;
20001722:	4b29      	ldr	r3, [pc, #164]	; (200017c8 <initSprites+0x104>)
20001724:	617b      	str	r3, [r7, #20]
	load_sprite(pointer15, witch2_gray_bits, witch2_black_width, witch2_black_height);
20001726:	4929      	ldr	r1, [pc, #164]	; (200017cc <initSprites+0x108>)
20001728:	6978      	ldr	r0, [r7, #20]
2000172a:	2312      	movs	r3, #18
2000172c:	2212      	movs	r2, #18
2000172e:	f001 f81b 	bl	20002768 <load_sprite>
	witch2Gray = pointer15;
20001732:	4b27      	ldr	r3, [pc, #156]	; (200017d0 <initSprites+0x10c>)
20001734:	697a      	ldr	r2, [r7, #20]
20001736:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempWitch2Black;
20001738:	4b26      	ldr	r3, [pc, #152]	; (200017d4 <initSprites+0x110>)
2000173a:	613b      	str	r3, [r7, #16]
	load_sprite(pointer16, witch2_black_bits, witch2_black_width, witch2_black_height);
2000173c:	4926      	ldr	r1, [pc, #152]	; (200017d8 <initSprites+0x114>)
2000173e:	6938      	ldr	r0, [r7, #16]
20001740:	2312      	movs	r3, #18
20001742:	2212      	movs	r2, #18
20001744:	f001 f810 	bl	20002768 <load_sprite>
	witch2Black = pointer16;
20001748:	4b24      	ldr	r3, [pc, #144]	; (200017dc <initSprites+0x118>)
2000174a:	693a      	ldr	r2, [r7, #16]
2000174c:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempWitch3Light;
2000174e:	4b24      	ldr	r3, [pc, #144]	; (200017e0 <initSprites+0x11c>)
20001750:	60fb      	str	r3, [r7, #12]
	load_sprite(finalPointer, witch3_light_bits, witch3_black_width, witch3_black_height);
20001752:	4924      	ldr	r1, [pc, #144]	; (200017e4 <initSprites+0x120>)
20001754:	68f8      	ldr	r0, [r7, #12]
20001756:	2312      	movs	r3, #18
20001758:	2212      	movs	r2, #18
2000175a:	f001 f805 	bl	20002768 <load_sprite>
	witch3Light = finalPointer;
2000175e:	4b22      	ldr	r3, [pc, #136]	; (200017e8 <initSprites+0x124>)
20001760:	68fa      	ldr	r2, [r7, #12]
20001762:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempWitch3Gray;
20001764:	4b21      	ldr	r3, [pc, #132]	; (200017ec <initSprites+0x128>)
20001766:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer17, witch3_gray_bits, witch3_black_width, witch3_black_height);
20001768:	4921      	ldr	r1, [pc, #132]	; (200017f0 <initSprites+0x12c>)
2000176a:	68b8      	ldr	r0, [r7, #8]
2000176c:	2312      	movs	r3, #18
2000176e:	2212      	movs	r2, #18
20001770:	f000 fffa 	bl	20002768 <load_sprite>
	witch3Gray = pointer17;
20001774:	4b1f      	ldr	r3, [pc, #124]	; (200017f4 <initSprites+0x130>)
20001776:	68ba      	ldr	r2, [r7, #8]
20001778:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempWitch3Black;
2000177a:	4b1f      	ldr	r3, [pc, #124]	; (200017f8 <initSprites+0x134>)
2000177c:	607b      	str	r3, [r7, #4]
	load_sprite(pointer18, witch3_black_bits, witch3_black_width, witch3_black_height);
2000177e:	491f      	ldr	r1, [pc, #124]	; (200017fc <initSprites+0x138>)
20001780:	6878      	ldr	r0, [r7, #4]
20001782:	2312      	movs	r3, #18
20001784:	2212      	movs	r2, #18
20001786:	f000 ffef 	bl	20002768 <load_sprite>
	witch3Black = pointer18;	
2000178a:	4b1d      	ldr	r3, [pc, #116]	; (20001800 <initSprites+0x13c>)
2000178c:	687a      	ldr	r2, [r7, #4]
2000178e:	601a      	str	r2, [r3, #0]
	
}
20001790:	46c0      	nop			; (mov r8, r8)
20001792:	46bd      	mov	sp, r7
20001794:	b00a      	add	sp, #40	; 0x28
20001796:	bd80      	pop	{r7, pc}
20001798:	200037ac 	andcs	r3, r0, ip, lsr #15
2000179c:	200072c8 	andcs	r7, r0, r8, asr #5
200017a0:	200037c4 	andcs	r3, r0, r4, asr #15
200017a4:	2000373c 	andcs	r3, r0, ip, lsr r7
200017a8:	20007290 	mulcs	r0, r0, r2
200017ac:	200036c4 	andcs	r3, r0, r4, asr #13
200017b0:	20003714 	andcs	r3, r0, r4, lsl r7
200017b4:	20007258 	andcs	r7, r0, r8, asr r2
200017b8:	20003798 	mulcs	r0, r8, r7
200017bc:	200037b8 			; <UNDEFINED> instruction: 0x200037b8
200017c0:	20007370 	andcs	r7, r0, r0, ror r3
200017c4:	200036c8 	andcs	r3, r0, r8, asr #13
200017c8:	20003754 	andcs	r3, r0, r4, asr r7
200017cc:	20007338 	andcs	r7, r0, r8, lsr r3
200017d0:	20003738 	andcs	r3, r0, r8, lsr r7
200017d4:	20003708 	andcs	r3, r0, r8, lsl #14
200017d8:	20007300 	andcs	r7, r0, r0, lsl #6
200017dc:	200037d4 	ldrdcs	r3, [r0], -r4
200017e0:	20003720 	andcs	r3, r0, r0, lsr #14
200017e4:	20007418 	andcs	r7, r0, r8, lsl r4
200017e8:	20003788 	andcs	r3, r0, r8, lsl #15
200017ec:	2000378c 	andcs	r3, r0, ip, lsl #15
200017f0:	200073e0 	andcs	r7, r0, r0, ror #7
200017f4:	2000379c 	mulcs	r0, ip, r7
200017f8:	20003748 	andcs	r3, r0, r8, asr #14
200017fc:	200073a8 	andcs	r7, r0, r8, lsr #7
20001800:	20003760 	andcs	r3, r0, r0, ror #14

20001804 <init_witch>:
	
void init_witch( GameObject *witchObj ) {
20001804:	b590      	push	{r4, r7, lr}
20001806:	b083      	sub	sp, #12
20001808:	af00      	add	r7, sp, #0
2000180a:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
2000180c:	4b29      	ldr	r3, [pc, #164]	; (200018b4 <init_witch+0xb0>)
2000180e:	681b      	ldr	r3, [r3, #0]
20001810:	2b00      	cmp	r3, #0
20001812:	d03b      	beq.n	2000188c <init_witch+0x88>
		initSprites();
20001814:	f7ff ff56 	bl	200016c4 <initSprites>
		firstTime = 0;			
20001818:	4b26      	ldr	r3, [pc, #152]	; (200018b4 <init_witch+0xb0>)
2000181a:	2200      	movs	r2, #0
2000181c:	601a      	str	r2, [r3, #0]

		witchImages[0] = witch1Image;
2000181e:	4b26      	ldr	r3, [pc, #152]	; (200018b8 <init_witch+0xb4>)
20001820:	4a26      	ldr	r2, [pc, #152]	; (200018bc <init_witch+0xb8>)
20001822:	ca13      	ldmia	r2!, {r0, r1, r4}
20001824:	c313      	stmia	r3!, {r0, r1, r4}
		witchImages[1] = witch2Image;
20001826:	4b24      	ldr	r3, [pc, #144]	; (200018b8 <init_witch+0xb4>)
20001828:	4a25      	ldr	r2, [pc, #148]	; (200018c0 <init_witch+0xbc>)
2000182a:	330c      	adds	r3, #12
2000182c:	ca13      	ldmia	r2!, {r0, r1, r4}
2000182e:	c313      	stmia	r3!, {r0, r1, r4}
		witchImages[2] = witch3Image;
20001830:	4b21      	ldr	r3, [pc, #132]	; (200018b8 <init_witch+0xb4>)
20001832:	4a24      	ldr	r2, [pc, #144]	; (200018c4 <init_witch+0xc0>)
20001834:	3318      	adds	r3, #24
20001836:	ca13      	ldmia	r2!, {r0, r1, r4}
20001838:	c313      	stmia	r3!, {r0, r1, r4}
		witchImages[3] = witch4Image;
2000183a:	4b1f      	ldr	r3, [pc, #124]	; (200018b8 <init_witch+0xb4>)
2000183c:	4a22      	ldr	r2, [pc, #136]	; (200018c8 <init_witch+0xc4>)
2000183e:	3324      	adds	r3, #36	; 0x24
20001840:	ca13      	ldmia	r2!, {r0, r1, r4}
20001842:	c313      	stmia	r3!, {r0, r1, r4}
		
		
		load_image(&witchImages[0], witch1Black, witch1Gray, witch1Light);
20001844:	4b21      	ldr	r3, [pc, #132]	; (200018cc <init_witch+0xc8>)
20001846:	6819      	ldr	r1, [r3, #0]
20001848:	4b21      	ldr	r3, [pc, #132]	; (200018d0 <init_witch+0xcc>)
2000184a:	681a      	ldr	r2, [r3, #0]
2000184c:	4b21      	ldr	r3, [pc, #132]	; (200018d4 <init_witch+0xd0>)
2000184e:	681b      	ldr	r3, [r3, #0]
20001850:	4819      	ldr	r0, [pc, #100]	; (200018b8 <init_witch+0xb4>)
20001852:	f000 ff75 	bl	20002740 <load_image>
		load_image(&witchImages[1], witch2Black, witch2Gray, witch2Light);
20001856:	4b20      	ldr	r3, [pc, #128]	; (200018d8 <init_witch+0xd4>)
20001858:	6819      	ldr	r1, [r3, #0]
2000185a:	4b20      	ldr	r3, [pc, #128]	; (200018dc <init_witch+0xd8>)
2000185c:	681a      	ldr	r2, [r3, #0]
2000185e:	4b20      	ldr	r3, [pc, #128]	; (200018e0 <init_witch+0xdc>)
20001860:	681b      	ldr	r3, [r3, #0]
20001862:	4820      	ldr	r0, [pc, #128]	; (200018e4 <init_witch+0xe0>)
20001864:	f000 ff6c 	bl	20002740 <load_image>
		load_image(&witchImages[2], witch3Black, witch3Gray, witch3Light);
20001868:	4b1f      	ldr	r3, [pc, #124]	; (200018e8 <init_witch+0xe4>)
2000186a:	6819      	ldr	r1, [r3, #0]
2000186c:	4b1f      	ldr	r3, [pc, #124]	; (200018ec <init_witch+0xe8>)
2000186e:	681a      	ldr	r2, [r3, #0]
20001870:	4b1f      	ldr	r3, [pc, #124]	; (200018f0 <init_witch+0xec>)
20001872:	681b      	ldr	r3, [r3, #0]
20001874:	481f      	ldr	r0, [pc, #124]	; (200018f4 <init_witch+0xf0>)
20001876:	f000 ff63 	bl	20002740 <load_image>
		load_image(&witchImages[3], witch2Black, witch2Gray, witch2Light);
2000187a:	4b17      	ldr	r3, [pc, #92]	; (200018d8 <init_witch+0xd4>)
2000187c:	6819      	ldr	r1, [r3, #0]
2000187e:	4b17      	ldr	r3, [pc, #92]	; (200018dc <init_witch+0xd8>)
20001880:	681a      	ldr	r2, [r3, #0]
20001882:	4b17      	ldr	r3, [pc, #92]	; (200018e0 <init_witch+0xdc>)
20001884:	681b      	ldr	r3, [r3, #0]
20001886:	481c      	ldr	r0, [pc, #112]	; (200018f8 <init_witch+0xf4>)
20001888:	f000 ff5a 	bl	20002740 <load_image>
		
	}
	
	witchObj->images = witchImages;
2000188c:	687b      	ldr	r3, [r7, #4]
2000188e:	4a0a      	ldr	r2, [pc, #40]	; (200018b8 <init_witch+0xb4>)
20001890:	601a      	str	r2, [r3, #0]

	witchObj->current_frame = 0;
20001892:	687b      	ldr	r3, [r7, #4]
20001894:	2200      	movs	r2, #0
20001896:	615a      	str	r2, [r3, #20]
	witchObj->n_frames = 4;
20001898:	687b      	ldr	r3, [r7, #4]
2000189a:	2204      	movs	r2, #4
2000189c:	619a      	str	r2, [r3, #24]
	witchObj->animation_speed = 1;
2000189e:	687b      	ldr	r3, [r7, #4]
200018a0:	2201      	movs	r2, #1
200018a2:	61da      	str	r2, [r3, #28]
	witchObj->animation_counter = 0;
200018a4:	687b      	ldr	r3, [r7, #4]
200018a6:	2200      	movs	r2, #0
200018a8:	621a      	str	r2, [r3, #32]
}
200018aa:	46c0      	nop			; (mov r8, r8)
200018ac:	46bd      	mov	sp, r7
200018ae:	b003      	add	sp, #12
200018b0:	bd90      	pop	{r4, r7, pc}
200018b2:	46c0      	nop			; (mov r8, r8)
200018b4:	20007450 	andcs	r7, r0, r0, asr r4
200018b8:	200036cc 	andcs	r3, r0, ip, asr #13
200018bc:	200037a0 	andcs	r3, r0, r0, lsr #15
200018c0:	200036fc 	strdcs	r3, [r0], -ip
200018c4:	200037c8 	andcs	r3, r0, r8, asr #15
200018c8:	2000372c 	andcs	r3, r0, ip, lsr #14
200018cc:	20003798 	mulcs	r0, r8, r7
200018d0:	200036c4 	andcs	r3, r0, r4, asr #13
200018d4:	200037c4 	andcs	r3, r0, r4, asr #15
200018d8:	200037d4 	ldrdcs	r3, [r0], -r4
200018dc:	20003738 	andcs	r3, r0, r8, lsr r7
200018e0:	200036c8 	andcs	r3, r0, r8, asr #13
200018e4:	200036d8 	ldrdcs	r3, [r0], -r8
200018e8:	20003760 	andcs	r3, r0, r0, ror #14
200018ec:	2000379c 	mulcs	r0, ip, r7
200018f0:	20003788 	andcs	r3, r0, r8, lsl #15
200018f4:	200036e4 	andcs	r3, r0, r4, ror #13
200018f8:	200036f0 	strdcs	r3, [r0], -r0

200018fc <delay_250ns>:
#include "graphics.h"


void delay_250ns(void){
200018fc:	b580      	push	{r7, lr}
200018fe:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
20001900:	4b0c      	ldr	r3, [pc, #48]	; (20001934 <delay_250ns+0x38>)
20001902:	2200      	movs	r2, #0
20001904:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/4) -1);
20001906:	4b0c      	ldr	r3, [pc, #48]	; (20001938 <delay_250ns+0x3c>)
20001908:	2229      	movs	r2, #41	; 0x29
2000190a:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
2000190c:	4b0b      	ldr	r3, [pc, #44]	; (2000193c <delay_250ns+0x40>)
2000190e:	2200      	movs	r2, #0
20001910:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20001912:	4b08      	ldr	r3, [pc, #32]	; (20001934 <delay_250ns+0x38>)
20001914:	2205      	movs	r2, #5
20001916:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
20001918:	46c0      	nop			; (mov r8, r8)
2000191a:	4b06      	ldr	r3, [pc, #24]	; (20001934 <delay_250ns+0x38>)
2000191c:	681a      	ldr	r2, [r3, #0]
2000191e:	2380      	movs	r3, #128	; 0x80
20001920:	025b      	lsls	r3, r3, #9
20001922:	4013      	ands	r3, r2
20001924:	d0f9      	beq.n	2000191a <delay_250ns+0x1e>
	*STK_CTRL = 0;
20001926:	4b03      	ldr	r3, [pc, #12]	; (20001934 <delay_250ns+0x38>)
20001928:	2200      	movs	r2, #0
2000192a:	601a      	str	r2, [r3, #0]
}
2000192c:	46c0      	nop			; (mov r8, r8)
2000192e:	46bd      	mov	sp, r7
20001930:	bd80      	pop	{r7, pc}
20001932:	46c0      	nop			; (mov r8, r8)
20001934:	e000e010 	and	lr, r0, r0, lsl r0
20001938:	e000e014 	and	lr, r0, r4, lsl r0
2000193c:	e000e018 	and	lr, r0, r8, lsl r0

20001940 <delay_500ns>:

void delay_500ns(void){
20001940:	b580      	push	{r7, lr}
20001942:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
20001944:	4b0c      	ldr	r3, [pc, #48]	; (20001978 <delay_500ns+0x38>)
20001946:	2200      	movs	r2, #0
20001948:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/2) -1);
2000194a:	4b0c      	ldr	r3, [pc, #48]	; (2000197c <delay_500ns+0x3c>)
2000194c:	2253      	movs	r2, #83	; 0x53
2000194e:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20001950:	4b0b      	ldr	r3, [pc, #44]	; (20001980 <delay_500ns+0x40>)
20001952:	2200      	movs	r2, #0
20001954:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20001956:	4b08      	ldr	r3, [pc, #32]	; (20001978 <delay_500ns+0x38>)
20001958:	2205      	movs	r2, #5
2000195a:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
2000195c:	46c0      	nop			; (mov r8, r8)
2000195e:	4b06      	ldr	r3, [pc, #24]	; (20001978 <delay_500ns+0x38>)
20001960:	681a      	ldr	r2, [r3, #0]
20001962:	2380      	movs	r3, #128	; 0x80
20001964:	025b      	lsls	r3, r3, #9
20001966:	4013      	ands	r3, r2
20001968:	d0f9      	beq.n	2000195e <delay_500ns+0x1e>
	*STK_CTRL = 0;
2000196a:	4b03      	ldr	r3, [pc, #12]	; (20001978 <delay_500ns+0x38>)
2000196c:	2200      	movs	r2, #0
2000196e:	601a      	str	r2, [r3, #0]
}
20001970:	46c0      	nop			; (mov r8, r8)
20001972:	46bd      	mov	sp, r7
20001974:	bd80      	pop	{r7, pc}
20001976:	46c0      	nop			; (mov r8, r8)
20001978:	e000e010 	and	lr, r0, r0, lsl r0
2000197c:	e000e014 	and	lr, r0, r4, lsl r0
20001980:	e000e018 	and	lr, r0, r8, lsl r0

20001984 <delay_micro>:

void delay_micro(unsigned int us){
20001984:	b580      	push	{r7, lr}
20001986:	b082      	sub	sp, #8
20001988:	af00      	add	r7, sp, #0
2000198a:	6078      	str	r0, [r7, #4]
	while(us--) {
2000198c:	e007      	b.n	2000199e <delay_micro+0x1a>
		delay_250ns();
2000198e:	f7ff ffb5 	bl	200018fc <delay_250ns>
		delay_250ns();
20001992:	f7ff ffb3 	bl	200018fc <delay_250ns>
		delay_250ns();
20001996:	f7ff ffb1 	bl	200018fc <delay_250ns>
		delay_250ns();
2000199a:	f7ff ffaf 	bl	200018fc <delay_250ns>
	while(us--) {
2000199e:	687b      	ldr	r3, [r7, #4]
200019a0:	1e5a      	subs	r2, r3, #1
200019a2:	607a      	str	r2, [r7, #4]
200019a4:	2b00      	cmp	r3, #0
200019a6:	d1f2      	bne.n	2000198e <delay_micro+0xa>
	}
}
200019a8:	46c0      	nop			; (mov r8, r8)
200019aa:	46bd      	mov	sp, r7
200019ac:	b002      	add	sp, #8
200019ae:	bd80      	pop	{r7, pc}

200019b0 <delay_milli>:

void delay_milli(unsigned int ms){
200019b0:	b580      	push	{r7, lr}
200019b2:	b082      	sub	sp, #8
200019b4:	af00      	add	r7, sp, #0
200019b6:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		while(ms--)
			delay_micro(1);
	#else
		while(ms--)
200019b8:	e004      	b.n	200019c4 <delay_milli+0x14>
			delay_micro(1000);
200019ba:	23fa      	movs	r3, #250	; 0xfa
200019bc:	009b      	lsls	r3, r3, #2
200019be:	0018      	movs	r0, r3
200019c0:	f7ff ffe0 	bl	20001984 <delay_micro>
		while(ms--)
200019c4:	687b      	ldr	r3, [r7, #4]
200019c6:	1e5a      	subs	r2, r3, #1
200019c8:	607a      	str	r2, [r7, #4]
200019ca:	2b00      	cmp	r3, #0
200019cc:	d1f5      	bne.n	200019ba <delay_milli+0xa>
	#endif
}
200019ce:	46c0      	nop			; (mov r8, r8)
200019d0:	46bd      	mov	sp, r7
200019d2:	b002      	add	sp, #8
200019d4:	bd80      	pop	{r7, pc}

200019d6 <clear_thisBackBuffer>:
uint8_t draw_buffer_black_light[1024]; // 128 * 64 / 8
uint8_t draw_buffer_black_gray_light[1024]; // 128 * 64 / 8
uint8_t backBuffer[1024]; // 128 * 64 / 8
uint8_t backBufferGray[1024]; // 128 * 64 / 8
uint8_t backBufferLight[1024]; // 128 * 64 / 8
void clear_thisBackBuffer(uint8_t *buffer) {
200019d6:	b580      	push	{r7, lr}
200019d8:	b084      	sub	sp, #16
200019da:	af00      	add	r7, sp, #0
200019dc:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < 1024; i++)
200019de:	2300      	movs	r3, #0
200019e0:	60fb      	str	r3, [r7, #12]
200019e2:	e007      	b.n	200019f4 <clear_thisBackBuffer+0x1e>
		buffer[i] = 0;
200019e4:	68fb      	ldr	r3, [r7, #12]
200019e6:	687a      	ldr	r2, [r7, #4]
200019e8:	18d3      	adds	r3, r2, r3
200019ea:	2200      	movs	r2, #0
200019ec:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 1024; i++)
200019ee:	68fb      	ldr	r3, [r7, #12]
200019f0:	3301      	adds	r3, #1
200019f2:	60fb      	str	r3, [r7, #12]
200019f4:	68fb      	ldr	r3, [r7, #12]
200019f6:	4a03      	ldr	r2, [pc, #12]	; (20001a04 <clear_thisBackBuffer+0x2e>)
200019f8:	4293      	cmp	r3, r2
200019fa:	ddf3      	ble.n	200019e4 <clear_thisBackBuffer+0xe>
}
200019fc:	46c0      	nop			; (mov r8, r8)
200019fe:	46bd      	mov	sp, r7
20001a00:	b004      	add	sp, #16
20001a02:	bd80      	pop	{r7, pc}
20001a04:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20001a08 <clear_backBuffer>:
void clear_backBuffer() {
20001a08:	b580      	push	{r7, lr}
20001a0a:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
20001a0c:	4b03      	ldr	r3, [pc, #12]	; (20001a1c <clear_backBuffer+0x14>)
20001a0e:	0018      	movs	r0, r3
20001a10:	f7ff ffe1 	bl	200019d6 <clear_thisBackBuffer>
}
20001a14:	46c0      	nop			; (mov r8, r8)
20001a16:	46bd      	mov	sp, r7
20001a18:	bd80      	pop	{r7, pc}
20001a1a:	46c0      	nop			; (mov r8, r8)
20001a1c:	20003fd8 	ldrdcs	r3, [r0], -r8

20001a20 <clear_all_backBuffers>:
void clear_all_backBuffers() {
20001a20:	b580      	push	{r7, lr}
20001a22:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
20001a24:	4b07      	ldr	r3, [pc, #28]	; (20001a44 <clear_all_backBuffers+0x24>)
20001a26:	0018      	movs	r0, r3
20001a28:	f7ff ffd5 	bl	200019d6 <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferGray);
20001a2c:	4b06      	ldr	r3, [pc, #24]	; (20001a48 <clear_all_backBuffers+0x28>)
20001a2e:	0018      	movs	r0, r3
20001a30:	f7ff ffd1 	bl	200019d6 <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferLight);
20001a34:	4b05      	ldr	r3, [pc, #20]	; (20001a4c <clear_all_backBuffers+0x2c>)
20001a36:	0018      	movs	r0, r3
20001a38:	f7ff ffcd 	bl	200019d6 <clear_thisBackBuffer>
}
20001a3c:	46c0      	nop			; (mov r8, r8)
20001a3e:	46bd      	mov	sp, r7
20001a40:	bd80      	pop	{r7, pc}
20001a42:	46c0      	nop			; (mov r8, r8)
20001a44:	20003fd8 	ldrdcs	r3, [r0], -r8
20001a48:	200037d8 	ldrdcs	r3, [r0], -r8
20001a4c:	20004fd8 	ldrdcs	r4, [r0], -r8

20001a50 <graphic_ctrl_bit_set>:

/* välj grafik-display och ettställ de bitar som är 1 i x */
static void graphic_ctrl_bit_set( uint8_t x) {
20001a50:	b580      	push	{r7, lr}
20001a52:	b084      	sub	sp, #16
20001a54:	af00      	add	r7, sp, #0
20001a56:	0002      	movs	r2, r0
20001a58:	1dfb      	adds	r3, r7, #7
20001a5a:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
20001a5c:	4a0f      	ldr	r2, [pc, #60]	; (20001a9c <graphic_ctrl_bit_set+0x4c>)
20001a5e:	230f      	movs	r3, #15
20001a60:	18fb      	adds	r3, r7, r3
20001a62:	7812      	ldrb	r2, [r2, #0]
20001a64:	701a      	strb	r2, [r3, #0]
	c |= x;
20001a66:	230f      	movs	r3, #15
20001a68:	18fb      	adds	r3, r7, r3
20001a6a:	220f      	movs	r2, #15
20001a6c:	18b9      	adds	r1, r7, r2
20001a6e:	1dfa      	adds	r2, r7, #7
20001a70:	7809      	ldrb	r1, [r1, #0]
20001a72:	7812      	ldrb	r2, [r2, #0]
20001a74:	430a      	orrs	r2, r1
20001a76:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
20001a78:	230f      	movs	r3, #15
20001a7a:	18fb      	adds	r3, r7, r3
20001a7c:	220f      	movs	r2, #15
20001a7e:	18ba      	adds	r2, r7, r2
20001a80:	7812      	ldrb	r2, [r2, #0]
20001a82:	2104      	movs	r1, #4
20001a84:	438a      	bics	r2, r1
20001a86:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20001a88:	4a04      	ldr	r2, [pc, #16]	; (20001a9c <graphic_ctrl_bit_set+0x4c>)
20001a8a:	230f      	movs	r3, #15
20001a8c:	18fb      	adds	r3, r7, r3
20001a8e:	781b      	ldrb	r3, [r3, #0]
20001a90:	7013      	strb	r3, [r2, #0]
}
20001a92:	46c0      	nop			; (mov r8, r8)
20001a94:	46bd      	mov	sp, r7
20001a96:	b004      	add	sp, #16
20001a98:	bd80      	pop	{r7, pc}
20001a9a:	46c0      	nop			; (mov r8, r8)
20001a9c:	40021014 	andmi	r1, r2, r4, lsl r0

20001aa0 <graphic_ctrl_bit_clear>:
/* välj grafik-display och nollställ de bitar som är 1 i x */
static void graphic_ctrl_bit_clear( uint8_t x) {
20001aa0:	b580      	push	{r7, lr}
20001aa2:	b084      	sub	sp, #16
20001aa4:	af00      	add	r7, sp, #0
20001aa6:	0002      	movs	r2, r0
20001aa8:	1dfb      	adds	r3, r7, #7
20001aaa:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
20001aac:	4a11      	ldr	r2, [pc, #68]	; (20001af4 <graphic_ctrl_bit_clear+0x54>)
20001aae:	230f      	movs	r3, #15
20001ab0:	18fb      	adds	r3, r7, r3
20001ab2:	7812      	ldrb	r2, [r2, #0]
20001ab4:	701a      	strb	r2, [r3, #0]
	c &= ~x;
20001ab6:	1dfb      	adds	r3, r7, #7
20001ab8:	781b      	ldrb	r3, [r3, #0]
20001aba:	b25b      	sxtb	r3, r3
20001abc:	43db      	mvns	r3, r3
20001abe:	b25b      	sxtb	r3, r3
20001ac0:	220f      	movs	r2, #15
20001ac2:	18ba      	adds	r2, r7, r2
20001ac4:	7812      	ldrb	r2, [r2, #0]
20001ac6:	b252      	sxtb	r2, r2
20001ac8:	4013      	ands	r3, r2
20001aca:	b25a      	sxtb	r2, r3
20001acc:	230f      	movs	r3, #15
20001ace:	18fb      	adds	r3, r7, r3
20001ad0:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
20001ad2:	230f      	movs	r3, #15
20001ad4:	18fb      	adds	r3, r7, r3
20001ad6:	220f      	movs	r2, #15
20001ad8:	18ba      	adds	r2, r7, r2
20001ada:	7812      	ldrb	r2, [r2, #0]
20001adc:	2104      	movs	r1, #4
20001ade:	438a      	bics	r2, r1
20001ae0:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20001ae2:	4a04      	ldr	r2, [pc, #16]	; (20001af4 <graphic_ctrl_bit_clear+0x54>)
20001ae4:	230f      	movs	r3, #15
20001ae6:	18fb      	adds	r3, r7, r3
20001ae8:	781b      	ldrb	r3, [r3, #0]
20001aea:	7013      	strb	r3, [r2, #0]
}
20001aec:	46c0      	nop			; (mov r8, r8)
20001aee:	46bd      	mov	sp, r7
20001af0:	b004      	add	sp, #16
20001af2:	bd80      	pop	{r7, pc}
20001af4:	40021014 	andmi	r1, r2, r4, lsl r0

20001af8 <select_controller>:
void select_controller( uint8_t controller) {
20001af8:	b580      	push	{r7, lr}
20001afa:	b082      	sub	sp, #8
20001afc:	af00      	add	r7, sp, #0
20001afe:	0002      	movs	r2, r0
20001b00:	1dfb      	adds	r3, r7, #7
20001b02:	701a      	strb	r2, [r3, #0]
	switch (controller) {
20001b04:	1dfb      	adds	r3, r7, #7
20001b06:	781b      	ldrb	r3, [r3, #0]
20001b08:	2b08      	cmp	r3, #8
20001b0a:	d00f      	beq.n	20001b2c <select_controller+0x34>
20001b0c:	dc02      	bgt.n	20001b14 <select_controller+0x1c>
20001b0e:	2b00      	cmp	r3, #0
20001b10:	d005      	beq.n	20001b1e <select_controller+0x26>
		case (B_CS1|B_CS2): 
			graphic_ctrl_bit_set(B_CS1); 
			graphic_ctrl_bit_set(B_CS2); 
			break;
	}
}
20001b12:	e020      	b.n	20001b56 <select_controller+0x5e>
	switch (controller) {
20001b14:	2b10      	cmp	r3, #16
20001b16:	d010      	beq.n	20001b3a <select_controller+0x42>
20001b18:	2b18      	cmp	r3, #24
20001b1a:	d015      	beq.n	20001b48 <select_controller+0x50>
}
20001b1c:	e01b      	b.n	20001b56 <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
20001b1e:	2008      	movs	r0, #8
20001b20:	f7ff ffbe 	bl	20001aa0 <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_clear(B_CS2); 
20001b24:	2010      	movs	r0, #16
20001b26:	f7ff ffbb 	bl	20001aa0 <graphic_ctrl_bit_clear>
			break;
20001b2a:	e014      	b.n	20001b56 <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
20001b2c:	2008      	movs	r0, #8
20001b2e:	f7ff ff8f 	bl	20001a50 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS2); 
20001b32:	2010      	movs	r0, #16
20001b34:	f7ff ffb4 	bl	20001aa0 <graphic_ctrl_bit_clear>
			break;
20001b38:	e00d      	b.n	20001b56 <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
20001b3a:	2008      	movs	r0, #8
20001b3c:	f7ff ffb0 	bl	20001aa0 <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_set(B_CS2); 
20001b40:	2010      	movs	r0, #16
20001b42:	f7ff ff85 	bl	20001a50 <graphic_ctrl_bit_set>
			break;
20001b46:	e006      	b.n	20001b56 <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
20001b48:	2008      	movs	r0, #8
20001b4a:	f7ff ff81 	bl	20001a50 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_set(B_CS2); 
20001b4e:	2010      	movs	r0, #16
20001b50:	f7ff ff7e 	bl	20001a50 <graphic_ctrl_bit_set>
			break;
20001b54:	46c0      	nop			; (mov r8, r8)
}
20001b56:	46c0      	nop			; (mov r8, r8)
20001b58:	46bd      	mov	sp, r7
20001b5a:	b002      	add	sp, #8
20001b5c:	bd80      	pop	{r7, pc}

20001b5e <graphic_wait_ready>:

void graphic_wait_ready( void ) {
20001b5e:	b580      	push	{r7, lr}
20001b60:	b082      	sub	sp, #8
20001b62:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
20001b64:	2040      	movs	r0, #64	; 0x40
20001b66:	f7ff ff9b 	bl	20001aa0 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
20001b6a:	4b14      	ldr	r3, [pc, #80]	; (20001bbc <graphic_wait_ready+0x5e>)
20001b6c:	4a14      	ldr	r2, [pc, #80]	; (20001bc0 <graphic_wait_ready+0x62>)
20001b6e:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
20001b70:	2001      	movs	r0, #1
20001b72:	f7ff ff95 	bl	20001aa0 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
20001b76:	2002      	movs	r0, #2
20001b78:	f7ff ff6a 	bl	20001a50 <graphic_ctrl_bit_set>
	delay_500ns();
20001b7c:	f7ff fee0 	bl	20001940 <delay_500ns>
	
	while(1) {
		graphic_ctrl_bit_set(B_E);
20001b80:	2040      	movs	r0, #64	; 0x40
20001b82:	f7ff ff65 	bl	20001a50 <graphic_ctrl_bit_set>
		delay_500ns();
20001b86:	f7ff fedb 	bl	20001940 <delay_500ns>
		c = *portIdrHigh & LCD_BUSY; //...
20001b8a:	4b0e      	ldr	r3, [pc, #56]	; (20001bc4 <graphic_wait_ready+0x66>)
20001b8c:	781b      	ldrb	r3, [r3, #0]
20001b8e:	b2da      	uxtb	r2, r3
20001b90:	1dfb      	adds	r3, r7, #7
20001b92:	217f      	movs	r1, #127	; 0x7f
20001b94:	438a      	bics	r2, r1
20001b96:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
20001b98:	2040      	movs	r0, #64	; 0x40
20001b9a:	f7ff ff81 	bl	20001aa0 <graphic_ctrl_bit_clear>
		delay_500ns();
20001b9e:	f7ff fecf 	bl	20001940 <delay_500ns>
		/*if (*portIdrHigh & 0x80 == 0x80) {
			break; }*/
		if (c == 0) break;
20001ba2:	1dfb      	adds	r3, r7, #7
20001ba4:	781b      	ldrb	r3, [r3, #0]
20001ba6:	2b00      	cmp	r3, #0
20001ba8:	d000      	beq.n	20001bac <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
20001baa:	e7e9      	b.n	20001b80 <graphic_wait_ready+0x22>
		if (c == 0) break;
20001bac:	46c0      	nop			; (mov r8, r8)
	}
	//graphic_ctrl_bit_set(B_E); //<--
	*portModer = 0x55555555;	
20001bae:	4b03      	ldr	r3, [pc, #12]	; (20001bbc <graphic_wait_ready+0x5e>)
20001bb0:	4a05      	ldr	r2, [pc, #20]	; (20001bc8 <graphic_wait_ready+0x6a>)
20001bb2:	601a      	str	r2, [r3, #0]
}
20001bb4:	46c0      	nop			; (mov r8, r8)
20001bb6:	46bd      	mov	sp, r7
20001bb8:	b002      	add	sp, #8
20001bba:	bd80      	pop	{r7, pc}
20001bbc:	40021000 	andmi	r1, r2, r0
20001bc0:	00005555 	andeq	r5, r0, r5, asr r5
20001bc4:	40021011 	andmi	r1, r2, r1, lsl r0
20001bc8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20001bcc <graphic_read>:

static uint8_t graphic_read(uint8_t controller) {
20001bcc:	b580      	push	{r7, lr}
20001bce:	b084      	sub	sp, #16
20001bd0:	af00      	add	r7, sp, #0
20001bd2:	0002      	movs	r2, r0
20001bd4:	1dfb      	adds	r3, r7, #7
20001bd6:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20001bd8:	2040      	movs	r0, #64	; 0x40
20001bda:	f7ff ff61 	bl	20001aa0 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
20001bde:	4b1c      	ldr	r3, [pc, #112]	; (20001c50 <graphic_read+0x84>)
20001be0:	4a1c      	ldr	r2, [pc, #112]	; (20001c54 <graphic_read+0x88>)
20001be2:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS);
20001be4:	2001      	movs	r0, #1
20001be6:	f7ff ff33 	bl	20001a50 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_set(B_RW);
20001bea:	2002      	movs	r0, #2
20001bec:	f7ff ff30 	bl	20001a50 <graphic_ctrl_bit_set>
	select_controller(controller);
20001bf0:	1dfb      	adds	r3, r7, #7
20001bf2:	781b      	ldrb	r3, [r3, #0]
20001bf4:	0018      	movs	r0, r3
20001bf6:	f7ff ff7f 	bl	20001af8 <select_controller>
	delay_500ns();
20001bfa:	f7ff fea1 	bl	20001940 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20001bfe:	2040      	movs	r0, #64	; 0x40
20001c00:	f7ff ff26 	bl	20001a50 <graphic_ctrl_bit_set>
	delay_500ns();
20001c04:	f7ff fe9c 	bl	20001940 <delay_500ns>
	unsigned char rv = *portIdrHigh;
20001c08:	4a13      	ldr	r2, [pc, #76]	; (20001c58 <graphic_read+0x8c>)
20001c0a:	230f      	movs	r3, #15
20001c0c:	18fb      	adds	r3, r7, r3
20001c0e:	7812      	ldrb	r2, [r2, #0]
20001c10:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20001c12:	2040      	movs	r0, #64	; 0x40
20001c14:	f7ff ff44 	bl	20001aa0 <graphic_ctrl_bit_clear>
	*portModer = 0x55555555;
20001c18:	4b0d      	ldr	r3, [pc, #52]	; (20001c50 <graphic_read+0x84>)
20001c1a:	4a10      	ldr	r2, [pc, #64]	; (20001c5c <graphic_read+0x90>)
20001c1c:	601a      	str	r2, [r3, #0]
	
	if(controller == B_CS1) {
20001c1e:	1dfb      	adds	r3, r7, #7
20001c20:	781b      	ldrb	r3, [r3, #0]
20001c22:	2b08      	cmp	r3, #8
20001c24:	d104      	bne.n	20001c30 <graphic_read+0x64>
		select_controller(B_CS1);
20001c26:	2008      	movs	r0, #8
20001c28:	f7ff ff66 	bl	20001af8 <select_controller>
		graphic_wait_ready();
20001c2c:	f7ff ff97 	bl	20001b5e <graphic_wait_ready>
	}
	if(controller == B_CS2) {
20001c30:	1dfb      	adds	r3, r7, #7
20001c32:	781b      	ldrb	r3, [r3, #0]
20001c34:	2b10      	cmp	r3, #16
20001c36:	d104      	bne.n	20001c42 <graphic_read+0x76>
		select_controller(B_CS2);
20001c38:	2010      	movs	r0, #16
20001c3a:	f7ff ff5d 	bl	20001af8 <select_controller>
		graphic_wait_ready();
20001c3e:	f7ff ff8e 	bl	20001b5e <graphic_wait_ready>
	}
	
	return rv;
20001c42:	230f      	movs	r3, #15
20001c44:	18fb      	adds	r3, r7, r3
20001c46:	781b      	ldrb	r3, [r3, #0]
}
20001c48:	0018      	movs	r0, r3
20001c4a:	46bd      	mov	sp, r7
20001c4c:	b004      	add	sp, #16
20001c4e:	bd80      	pop	{r7, pc}
20001c50:	40021000 	andmi	r1, r2, r0
20001c54:	00005555 	andeq	r5, r0, r5, asr r5
20001c58:	40021011 	andmi	r1, r2, r1, lsl r0
20001c5c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20001c60 <graphic_read_data>:

graphic_read_data(uint8_t controller) {
20001c60:	b580      	push	{r7, lr}
20001c62:	b082      	sub	sp, #8
20001c64:	af00      	add	r7, sp, #0
20001c66:	0002      	movs	r2, r0
20001c68:	1dfb      	adds	r3, r7, #7
20001c6a:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
20001c6c:	1dfb      	adds	r3, r7, #7
20001c6e:	781b      	ldrb	r3, [r3, #0]
20001c70:	0018      	movs	r0, r3
20001c72:	f7ff ffab 	bl	20001bcc <graphic_read>
	graphic_read(controller);
20001c76:	1dfb      	adds	r3, r7, #7
20001c78:	781b      	ldrb	r3, [r3, #0]
20001c7a:	0018      	movs	r0, r3
20001c7c:	f7ff ffa6 	bl	20001bcc <graphic_read>
}
20001c80:	46c0      	nop			; (mov r8, r8)
20001c82:	0018      	movs	r0, r3
20001c84:	46bd      	mov	sp, r7
20001c86:	b002      	add	sp, #8
20001c88:	bd80      	pop	{r7, pc}

20001c8a <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller) {
20001c8a:	b580      	push	{r7, lr}
20001c8c:	b082      	sub	sp, #8
20001c8e:	af00      	add	r7, sp, #0
20001c90:	0002      	movs	r2, r0
20001c92:	1dfb      	adds	r3, r7, #7
20001c94:	701a      	strb	r2, [r3, #0]
20001c96:	1dbb      	adds	r3, r7, #6
20001c98:	1c0a      	adds	r2, r1, #0
20001c9a:	701a      	strb	r2, [r3, #0]
	*portOdrHigh = value; //I
20001c9c:	4a19      	ldr	r2, [pc, #100]	; (20001d04 <graphic_write+0x7a>)
20001c9e:	1dfb      	adds	r3, r7, #7
20001ca0:	781b      	ldrb	r3, [r3, #0]
20001ca2:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
20001ca4:	1dbb      	adds	r3, r7, #6
20001ca6:	781b      	ldrb	r3, [r3, #0]
20001ca8:	0018      	movs	r0, r3
20001caa:	f7ff ff25 	bl	20001af8 <select_controller>
	delay_500ns();
20001cae:	f7ff fe47 	bl	20001940 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20001cb2:	2040      	movs	r0, #64	; 0x40
20001cb4:	f7ff fecc 	bl	20001a50 <graphic_ctrl_bit_set>
	delay_500ns();
20001cb8:	f7ff fe42 	bl	20001940 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
20001cbc:	2040      	movs	r0, #64	; 0x40
20001cbe:	f7ff feef 	bl	20001aa0 <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1) {
20001cc2:	1dbb      	adds	r3, r7, #6
20001cc4:	781b      	ldrb	r3, [r3, #0]
20001cc6:	2208      	movs	r2, #8
20001cc8:	4013      	ands	r3, r2
20001cca:	d004      	beq.n	20001cd6 <graphic_write+0x4c>
		select_controller(B_CS1);
20001ccc:	2008      	movs	r0, #8
20001cce:	f7ff ff13 	bl	20001af8 <select_controller>
		graphic_wait_ready();
20001cd2:	f7ff ff44 	bl	20001b5e <graphic_wait_ready>
	}
	if(controller & B_CS2) {
20001cd6:	1dbb      	adds	r3, r7, #6
20001cd8:	781b      	ldrb	r3, [r3, #0]
20001cda:	2210      	movs	r2, #16
20001cdc:	4013      	ands	r3, r2
20001cde:	d004      	beq.n	20001cea <graphic_write+0x60>
		select_controller(B_CS2);
20001ce0:	2010      	movs	r0, #16
20001ce2:	f7ff ff09 	bl	20001af8 <select_controller>
		graphic_wait_ready();
20001ce6:	f7ff ff3a 	bl	20001b5e <graphic_wait_ready>
	}
	
	*portOdrHigh = 0;	//I
20001cea:	4b06      	ldr	r3, [pc, #24]	; (20001d04 <graphic_write+0x7a>)
20001cec:	2200      	movs	r2, #0
20001cee:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
20001cf0:	2040      	movs	r0, #64	; 0x40
20001cf2:	f7ff fead 	bl	20001a50 <graphic_ctrl_bit_set>
	select_controller(0);
20001cf6:	2000      	movs	r0, #0
20001cf8:	f7ff fefe 	bl	20001af8 <select_controller>
}
20001cfc:	46c0      	nop			; (mov r8, r8)
20001cfe:	46bd      	mov	sp, r7
20001d00:	b002      	add	sp, #8
20001d02:	bd80      	pop	{r7, pc}
20001d04:	40021015 	andmi	r1, r2, r5, lsl r0

20001d08 <graphic_write_command>:
void graphic_write_command(uint8_t command, uint8_t controller) {
20001d08:	b580      	push	{r7, lr}
20001d0a:	b082      	sub	sp, #8
20001d0c:	af00      	add	r7, sp, #0
20001d0e:	0002      	movs	r2, r0
20001d10:	1dfb      	adds	r3, r7, #7
20001d12:	701a      	strb	r2, [r3, #0]
20001d14:	1dbb      	adds	r3, r7, #6
20001d16:	1c0a      	adds	r2, r1, #0
20001d18:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20001d1a:	2040      	movs	r0, #64	; 0x40
20001d1c:	f7ff fec0 	bl	20001aa0 <graphic_ctrl_bit_clear>
	select_controller(controller);
20001d20:	1dbb      	adds	r3, r7, #6
20001d22:	781b      	ldrb	r3, [r3, #0]
20001d24:	0018      	movs	r0, r3
20001d26:	f7ff fee7 	bl	20001af8 <select_controller>
	graphic_ctrl_bit_clear(B_RS);
20001d2a:	2001      	movs	r0, #1
20001d2c:	f7ff feb8 	bl	20001aa0 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RW);
20001d30:	2002      	movs	r0, #2
20001d32:	f7ff feb5 	bl	20001aa0 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20001d36:	1dbb      	adds	r3, r7, #6
20001d38:	781a      	ldrb	r2, [r3, #0]
20001d3a:	1dfb      	adds	r3, r7, #7
20001d3c:	781b      	ldrb	r3, [r3, #0]
20001d3e:	0011      	movs	r1, r2
20001d40:	0018      	movs	r0, r3
20001d42:	f7ff ffa2 	bl	20001c8a <graphic_write>
}
20001d46:	46c0      	nop			; (mov r8, r8)
20001d48:	46bd      	mov	sp, r7
20001d4a:	b002      	add	sp, #8
20001d4c:	bd80      	pop	{r7, pc}

20001d4e <graphic_write_data>:
void graphic_write_data(uint8_t command, uint8_t controller) {
20001d4e:	b580      	push	{r7, lr}
20001d50:	b082      	sub	sp, #8
20001d52:	af00      	add	r7, sp, #0
20001d54:	0002      	movs	r2, r0
20001d56:	1dfb      	adds	r3, r7, #7
20001d58:	701a      	strb	r2, [r3, #0]
20001d5a:	1dbb      	adds	r3, r7, #6
20001d5c:	1c0a      	adds	r2, r1, #0
20001d5e:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20001d60:	2040      	movs	r0, #64	; 0x40
20001d62:	f7ff fe9d 	bl	20001aa0 <graphic_ctrl_bit_clear>
	select_controller(controller);
20001d66:	1dbb      	adds	r3, r7, #6
20001d68:	781b      	ldrb	r3, [r3, #0]
20001d6a:	0018      	movs	r0, r3
20001d6c:	f7ff fec4 	bl	20001af8 <select_controller>
	graphic_ctrl_bit_set(B_RS);
20001d70:	2001      	movs	r0, #1
20001d72:	f7ff fe6d 	bl	20001a50 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20001d76:	2002      	movs	r0, #2
20001d78:	f7ff fe92 	bl	20001aa0 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20001d7c:	1dbb      	adds	r3, r7, #6
20001d7e:	781a      	ldrb	r2, [r3, #0]
20001d80:	1dfb      	adds	r3, r7, #7
20001d82:	781b      	ldrb	r3, [r3, #0]
20001d84:	0011      	movs	r1, r2
20001d86:	0018      	movs	r0, r3
20001d88:	f7ff ff7f 	bl	20001c8a <graphic_write>
}
20001d8c:	46c0      	nop			; (mov r8, r8)
20001d8e:	46bd      	mov	sp, r7
20001d90:	b002      	add	sp, #8
20001d92:	bd80      	pop	{r7, pc}

20001d94 <graphic_initialize>:

void graphic_initialize( void ) {
20001d94:	b580      	push	{r7, lr}
20001d96:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20001d98:	2040      	movs	r0, #64	; 0x40
20001d9a:	f7ff fe59 	bl	20001a50 <graphic_ctrl_bit_set>
	delay_micro(10);
20001d9e:	200a      	movs	r0, #10
20001da0:	f7ff fdf0 	bl	20001984 <delay_micro>
	
	graphic_ctrl_bit_clear(B_CS1);
20001da4:	2008      	movs	r0, #8
20001da6:	f7ff fe7b 	bl	20001aa0 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_CS2);
20001daa:	2010      	movs	r0, #16
20001dac:	f7ff fe78 	bl	20001aa0 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RST);
20001db0:	2020      	movs	r0, #32
20001db2:	f7ff fe75 	bl	20001aa0 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_E);
20001db6:	2040      	movs	r0, #64	; 0x40
20001db8:	f7ff fe72 	bl	20001aa0 <graphic_ctrl_bit_clear>
	//#define SIMULATOR
	delay_milli(30);
20001dbc:	201e      	movs	r0, #30
20001dbe:	f7ff fdf7 	bl	200019b0 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20001dc2:	2020      	movs	r0, #32
20001dc4:	f7ff fe44 	bl	20001a50 <graphic_ctrl_bit_set>
	delay_milli(100); //...
20001dc8:	2064      	movs	r0, #100	; 0x64
20001dca:	f7ff fdf1 	bl	200019b0 <delay_milli>
	
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
20001dce:	2118      	movs	r1, #24
20001dd0:	203e      	movs	r0, #62	; 0x3e
20001dd2:	f7ff ff99 	bl	20001d08 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
20001dd6:	2118      	movs	r1, #24
20001dd8:	203f      	movs	r0, #63	; 0x3f
20001dda:	f7ff ff95 	bl	20001d08 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20001dde:	2118      	movs	r1, #24
20001de0:	20c0      	movs	r0, #192	; 0xc0
20001de2:	f7ff ff91 	bl	20001d08 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
20001de6:	2118      	movs	r1, #24
20001de8:	2040      	movs	r0, #64	; 0x40
20001dea:	f7ff ff8d 	bl	20001d08 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20001dee:	2118      	movs	r1, #24
20001df0:	20b8      	movs	r0, #184	; 0xb8
20001df2:	f7ff ff89 	bl	20001d08 <graphic_write_command>
	select_controller(0);
20001df6:	2000      	movs	r0, #0
20001df8:	f7ff fe7e 	bl	20001af8 <select_controller>
}
20001dfc:	46c0      	nop			; (mov r8, r8)
20001dfe:	46bd      	mov	sp, r7
20001e00:	bd80      	pop	{r7, pc}

20001e02 <graphic_clear_screen>:
void graphic_clear_screen( void ) {	//Annat i slidesen
20001e02:	b580      	push	{r7, lr}
20001e04:	b082      	sub	sp, #8
20001e06:	af00      	add	r7, sp, #0
	uint8_t page;
	for (page = 0; page < 8; page++) {
20001e08:	1dfb      	adds	r3, r7, #7
20001e0a:	2200      	movs	r2, #0
20001e0c:	701a      	strb	r2, [r3, #0]
20001e0e:	e023      	b.n	20001e58 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
20001e10:	1dfb      	adds	r3, r7, #7
20001e12:	781b      	ldrb	r3, [r3, #0]
20001e14:	2248      	movs	r2, #72	; 0x48
20001e16:	4252      	negs	r2, r2
20001e18:	4313      	orrs	r3, r2
20001e1a:	b2db      	uxtb	r3, r3
20001e1c:	2118      	movs	r1, #24
20001e1e:	0018      	movs	r0, r3
20001e20:	f7ff ff72 	bl	20001d08 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
20001e24:	2118      	movs	r1, #24
20001e26:	2040      	movs	r0, #64	; 0x40
20001e28:	f7ff ff6e 	bl	20001d08 <graphic_write_command>
		uint8_t add;
		for (add = 0; add < 64; add++) {
20001e2c:	1dbb      	adds	r3, r7, #6
20001e2e:	2200      	movs	r2, #0
20001e30:	701a      	strb	r2, [r3, #0]
20001e32:	e008      	b.n	20001e46 <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1|B_CS2);
20001e34:	2118      	movs	r1, #24
20001e36:	2000      	movs	r0, #0
20001e38:	f7ff ff89 	bl	20001d4e <graphic_write_data>
		for (add = 0; add < 64; add++) {
20001e3c:	1dbb      	adds	r3, r7, #6
20001e3e:	781a      	ldrb	r2, [r3, #0]
20001e40:	1dbb      	adds	r3, r7, #6
20001e42:	3201      	adds	r2, #1
20001e44:	701a      	strb	r2, [r3, #0]
20001e46:	1dbb      	adds	r3, r7, #6
20001e48:	781b      	ldrb	r3, [r3, #0]
20001e4a:	2b3f      	cmp	r3, #63	; 0x3f
20001e4c:	d9f2      	bls.n	20001e34 <graphic_clear_screen+0x32>
	for (page = 0; page < 8; page++) {
20001e4e:	1dfb      	adds	r3, r7, #7
20001e50:	781a      	ldrb	r2, [r3, #0]
20001e52:	1dfb      	adds	r3, r7, #7
20001e54:	3201      	adds	r2, #1
20001e56:	701a      	strb	r2, [r3, #0]
20001e58:	1dfb      	adds	r3, r7, #7
20001e5a:	781b      	ldrb	r3, [r3, #0]
20001e5c:	2b07      	cmp	r3, #7
20001e5e:	d9d7      	bls.n	20001e10 <graphic_clear_screen+0xe>
		}
	}
}
20001e60:	46c0      	nop			; (mov r8, r8)
20001e62:	46bd      	mov	sp, r7
20001e64:	b002      	add	sp, #8
20001e66:	bd80      	pop	{r7, pc}

20001e68 <pixel>:

/** Color: 1=light 2=gray 3=black*/
void pixel(int x, int y, int set, int color) {
20001e68:	b580      	push	{r7, lr}
20001e6a:	b086      	sub	sp, #24
20001e6c:	af00      	add	r7, sp, #0
20001e6e:	60f8      	str	r0, [r7, #12]
20001e70:	60b9      	str	r1, [r7, #8]
20001e72:	607a      	str	r2, [r7, #4]
20001e74:	603b      	str	r3, [r7, #0]
	uint8_t mask;
	int index = 0;
20001e76:	2300      	movs	r3, #0
20001e78:	613b      	str	r3, [r7, #16]
	if( (x > 128 ) || (x < 1) || (y > 64) || (y < 1) ) 
20001e7a:	68fb      	ldr	r3, [r7, #12]
20001e7c:	2b80      	cmp	r3, #128	; 0x80
20001e7e:	dd00      	ble.n	20001e82 <pixel+0x1a>
20001e80:	e0a6      	b.n	20001fd0 <pixel+0x168>
20001e82:	68fb      	ldr	r3, [r7, #12]
20001e84:	2b00      	cmp	r3, #0
20001e86:	dc00      	bgt.n	20001e8a <pixel+0x22>
20001e88:	e0a2      	b.n	20001fd0 <pixel+0x168>
20001e8a:	68bb      	ldr	r3, [r7, #8]
20001e8c:	2b40      	cmp	r3, #64	; 0x40
20001e8e:	dd00      	ble.n	20001e92 <pixel+0x2a>
20001e90:	e09e      	b.n	20001fd0 <pixel+0x168>
20001e92:	68bb      	ldr	r3, [r7, #8]
20001e94:	2b00      	cmp	r3, #0
20001e96:	dc00      	bgt.n	20001e9a <pixel+0x32>
20001e98:	e09a      	b.n	20001fd0 <pixel+0x168>
		return;
	mask = 1 << ((y-1)%8);
20001e9a:	68bb      	ldr	r3, [r7, #8]
20001e9c:	3b01      	subs	r3, #1
20001e9e:	4a4e      	ldr	r2, [pc, #312]	; (20001fd8 <pixel+0x170>)
20001ea0:	4013      	ands	r3, r2
20001ea2:	d504      	bpl.n	20001eae <pixel+0x46>
20001ea4:	3b01      	subs	r3, #1
20001ea6:	2208      	movs	r2, #8
20001ea8:	4252      	negs	r2, r2
20001eaa:	4313      	orrs	r3, r2
20001eac:	3301      	adds	r3, #1
20001eae:	001a      	movs	r2, r3
20001eb0:	2301      	movs	r3, #1
20001eb2:	4093      	lsls	r3, r2
20001eb4:	001a      	movs	r2, r3
20001eb6:	2317      	movs	r3, #23
20001eb8:	18fb      	adds	r3, r7, r3
20001eba:	701a      	strb	r2, [r3, #0]
	if(x > 64) {
20001ebc:	68fb      	ldr	r3, [r7, #12]
20001ebe:	2b40      	cmp	r3, #64	; 0x40
20001ec0:	dd05      	ble.n	20001ece <pixel+0x66>
		x -= 65;
20001ec2:	68fb      	ldr	r3, [r7, #12]
20001ec4:	3b41      	subs	r3, #65	; 0x41
20001ec6:	60fb      	str	r3, [r7, #12]
		index = 512;
20001ec8:	2380      	movs	r3, #128	; 0x80
20001eca:	009b      	lsls	r3, r3, #2
20001ecc:	613b      	str	r3, [r7, #16]
	}
	index += x + ((y-1)/8)*64;
20001ece:	68bb      	ldr	r3, [r7, #8]
20001ed0:	3b01      	subs	r3, #1
20001ed2:	2b00      	cmp	r3, #0
20001ed4:	da00      	bge.n	20001ed8 <pixel+0x70>
20001ed6:	3307      	adds	r3, #7
20001ed8:	10db      	asrs	r3, r3, #3
20001eda:	019a      	lsls	r2, r3, #6
20001edc:	68fb      	ldr	r3, [r7, #12]
20001ede:	18d3      	adds	r3, r2, r3
20001ee0:	693a      	ldr	r2, [r7, #16]
20001ee2:	18d3      	adds	r3, r2, r3
20001ee4:	613b      	str	r3, [r7, #16]

	if(set == 0)
20001ee6:	687b      	ldr	r3, [r7, #4]
20001ee8:	2b00      	cmp	r3, #0
20001eea:	d106      	bne.n	20001efa <pixel+0x92>
		mask = ~mask;
20001eec:	2317      	movs	r3, #23
20001eee:	18fb      	adds	r3, r7, r3
20001ef0:	2217      	movs	r2, #23
20001ef2:	18ba      	adds	r2, r7, r2
20001ef4:	7812      	ldrb	r2, [r2, #0]
20001ef6:	43d2      	mvns	r2, r2
20001ef8:	701a      	strb	r2, [r3, #0]

	switch (color) {
20001efa:	683b      	ldr	r3, [r7, #0]
20001efc:	2b02      	cmp	r3, #2
20001efe:	d024      	beq.n	20001f4a <pixel+0xe2>
20001f00:	2b03      	cmp	r3, #3
20001f02:	d043      	beq.n	20001f8c <pixel+0x124>
20001f04:	2b01      	cmp	r3, #1
20001f06:	d164      	bne.n	20001fd2 <pixel+0x16a>
		case 1:	
			if(set)
20001f08:	687b      	ldr	r3, [r7, #4]
20001f0a:	2b00      	cmp	r3, #0
20001f0c:	d00e      	beq.n	20001f2c <pixel+0xc4>
				backBufferLight[index] |= mask;
20001f0e:	4a33      	ldr	r2, [pc, #204]	; (20001fdc <pixel+0x174>)
20001f10:	693b      	ldr	r3, [r7, #16]
20001f12:	18d3      	adds	r3, r2, r3
20001f14:	781a      	ldrb	r2, [r3, #0]
20001f16:	2317      	movs	r3, #23
20001f18:	18fb      	adds	r3, r7, r3
20001f1a:	781b      	ldrb	r3, [r3, #0]
20001f1c:	4313      	orrs	r3, r2
20001f1e:	b2d9      	uxtb	r1, r3
20001f20:	4a2e      	ldr	r2, [pc, #184]	; (20001fdc <pixel+0x174>)
20001f22:	693b      	ldr	r3, [r7, #16]
20001f24:	18d3      	adds	r3, r2, r3
20001f26:	1c0a      	adds	r2, r1, #0
20001f28:	701a      	strb	r2, [r3, #0]
			else
				backBufferLight[index] &= mask;
			break;
20001f2a:	e052      	b.n	20001fd2 <pixel+0x16a>
				backBufferLight[index] &= mask;
20001f2c:	4a2b      	ldr	r2, [pc, #172]	; (20001fdc <pixel+0x174>)
20001f2e:	693b      	ldr	r3, [r7, #16]
20001f30:	18d3      	adds	r3, r2, r3
20001f32:	781b      	ldrb	r3, [r3, #0]
20001f34:	2217      	movs	r2, #23
20001f36:	18ba      	adds	r2, r7, r2
20001f38:	7812      	ldrb	r2, [r2, #0]
20001f3a:	4013      	ands	r3, r2
20001f3c:	b2d9      	uxtb	r1, r3
20001f3e:	4a27      	ldr	r2, [pc, #156]	; (20001fdc <pixel+0x174>)
20001f40:	693b      	ldr	r3, [r7, #16]
20001f42:	18d3      	adds	r3, r2, r3
20001f44:	1c0a      	adds	r2, r1, #0
20001f46:	701a      	strb	r2, [r3, #0]
			break;
20001f48:	e043      	b.n	20001fd2 <pixel+0x16a>
		
		case 2:	
			if(set)
20001f4a:	687b      	ldr	r3, [r7, #4]
20001f4c:	2b00      	cmp	r3, #0
20001f4e:	d00e      	beq.n	20001f6e <pixel+0x106>
				backBufferGray[index] |= mask;
20001f50:	4a23      	ldr	r2, [pc, #140]	; (20001fe0 <pixel+0x178>)
20001f52:	693b      	ldr	r3, [r7, #16]
20001f54:	18d3      	adds	r3, r2, r3
20001f56:	781a      	ldrb	r2, [r3, #0]
20001f58:	2317      	movs	r3, #23
20001f5a:	18fb      	adds	r3, r7, r3
20001f5c:	781b      	ldrb	r3, [r3, #0]
20001f5e:	4313      	orrs	r3, r2
20001f60:	b2d9      	uxtb	r1, r3
20001f62:	4a1f      	ldr	r2, [pc, #124]	; (20001fe0 <pixel+0x178>)
20001f64:	693b      	ldr	r3, [r7, #16]
20001f66:	18d3      	adds	r3, r2, r3
20001f68:	1c0a      	adds	r2, r1, #0
20001f6a:	701a      	strb	r2, [r3, #0]
			else
				backBufferGray[index] &= mask;
			break;
20001f6c:	e031      	b.n	20001fd2 <pixel+0x16a>
				backBufferGray[index] &= mask;
20001f6e:	4a1c      	ldr	r2, [pc, #112]	; (20001fe0 <pixel+0x178>)
20001f70:	693b      	ldr	r3, [r7, #16]
20001f72:	18d3      	adds	r3, r2, r3
20001f74:	781b      	ldrb	r3, [r3, #0]
20001f76:	2217      	movs	r2, #23
20001f78:	18ba      	adds	r2, r7, r2
20001f7a:	7812      	ldrb	r2, [r2, #0]
20001f7c:	4013      	ands	r3, r2
20001f7e:	b2d9      	uxtb	r1, r3
20001f80:	4a17      	ldr	r2, [pc, #92]	; (20001fe0 <pixel+0x178>)
20001f82:	693b      	ldr	r3, [r7, #16]
20001f84:	18d3      	adds	r3, r2, r3
20001f86:	1c0a      	adds	r2, r1, #0
20001f88:	701a      	strb	r2, [r3, #0]
			break;
20001f8a:	e022      	b.n	20001fd2 <pixel+0x16a>
		
		case 3:	
			if(set)
20001f8c:	687b      	ldr	r3, [r7, #4]
20001f8e:	2b00      	cmp	r3, #0
20001f90:	d00e      	beq.n	20001fb0 <pixel+0x148>
				backBuffer[index] |= mask;
20001f92:	4a14      	ldr	r2, [pc, #80]	; (20001fe4 <pixel+0x17c>)
20001f94:	693b      	ldr	r3, [r7, #16]
20001f96:	18d3      	adds	r3, r2, r3
20001f98:	781a      	ldrb	r2, [r3, #0]
20001f9a:	2317      	movs	r3, #23
20001f9c:	18fb      	adds	r3, r7, r3
20001f9e:	781b      	ldrb	r3, [r3, #0]
20001fa0:	4313      	orrs	r3, r2
20001fa2:	b2d9      	uxtb	r1, r3
20001fa4:	4a0f      	ldr	r2, [pc, #60]	; (20001fe4 <pixel+0x17c>)
20001fa6:	693b      	ldr	r3, [r7, #16]
20001fa8:	18d3      	adds	r3, r2, r3
20001faa:	1c0a      	adds	r2, r1, #0
20001fac:	701a      	strb	r2, [r3, #0]
			else
				backBuffer[index] &= mask;
			break;
20001fae:	e010      	b.n	20001fd2 <pixel+0x16a>
				backBuffer[index] &= mask;
20001fb0:	4a0c      	ldr	r2, [pc, #48]	; (20001fe4 <pixel+0x17c>)
20001fb2:	693b      	ldr	r3, [r7, #16]
20001fb4:	18d3      	adds	r3, r2, r3
20001fb6:	781b      	ldrb	r3, [r3, #0]
20001fb8:	2217      	movs	r2, #23
20001fba:	18ba      	adds	r2, r7, r2
20001fbc:	7812      	ldrb	r2, [r2, #0]
20001fbe:	4013      	ands	r3, r2
20001fc0:	b2d9      	uxtb	r1, r3
20001fc2:	4a08      	ldr	r2, [pc, #32]	; (20001fe4 <pixel+0x17c>)
20001fc4:	693b      	ldr	r3, [r7, #16]
20001fc6:	18d3      	adds	r3, r2, r3
20001fc8:	1c0a      	adds	r2, r1, #0
20001fca:	701a      	strb	r2, [r3, #0]
			break;
20001fcc:	46c0      	nop			; (mov r8, r8)
20001fce:	e000      	b.n	20001fd2 <pixel+0x16a>
		return;
20001fd0:	46c0      	nop			; (mov r8, r8)
			
	}

}
20001fd2:	46bd      	mov	sp, r7
20001fd4:	b006      	add	sp, #24
20001fd6:	bd80      	pop	{r7, pc}
20001fd8:	80000007 	andhi	r0, r0, r7
20001fdc:	20004fd8 	ldrdcs	r4, [r0], -r8
20001fe0:	200037d8 	ldrdcs	r3, [r0], -r8
20001fe4:	20003fd8 	ldrdcs	r3, [r0], -r8

20001fe8 <pixel2>:


void pixel2(int x, int y, int set) {
20001fe8:	b580      	push	{r7, lr}
20001fea:	b088      	sub	sp, #32
20001fec:	af00      	add	r7, sp, #0
20001fee:	60f8      	str	r0, [r7, #12]
20001ff0:	60b9      	str	r1, [r7, #8]
20001ff2:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20001ff4:	68fb      	ldr	r3, [r7, #12]
20001ff6:	2b00      	cmp	r3, #0
20001ff8:	dc00      	bgt.n	20001ffc <pixel2+0x14>
20001ffa:	e0bc      	b.n	20002176 <pixel2+0x18e>
20001ffc:	68bb      	ldr	r3, [r7, #8]
20001ffe:	2b00      	cmp	r3, #0
20002000:	dc00      	bgt.n	20002004 <pixel2+0x1c>
20002002:	e0b8      	b.n	20002176 <pixel2+0x18e>
20002004:	68fb      	ldr	r3, [r7, #12]
20002006:	2b80      	cmp	r3, #128	; 0x80
20002008:	dd00      	ble.n	2000200c <pixel2+0x24>
2000200a:	e0b4      	b.n	20002176 <pixel2+0x18e>
2000200c:	68bb      	ldr	r3, [r7, #8]
2000200e:	2b40      	cmp	r3, #64	; 0x40
20002010:	dd00      	ble.n	20002014 <pixel2+0x2c>
20002012:	e0b0      	b.n	20002176 <pixel2+0x18e>
	index = (y-1)/8;
20002014:	68bb      	ldr	r3, [r7, #8]
20002016:	3b01      	subs	r3, #1
20002018:	2b00      	cmp	r3, #0
2000201a:	da00      	bge.n	2000201e <pixel2+0x36>
2000201c:	3307      	adds	r3, #7
2000201e:	10db      	asrs	r3, r3, #3
20002020:	61bb      	str	r3, [r7, #24]
	switch( (y-1)%8 ) {
20002022:	68bb      	ldr	r3, [r7, #8]
20002024:	3b01      	subs	r3, #1
20002026:	4a56      	ldr	r2, [pc, #344]	; (20002180 <pixel2+0x198>)
20002028:	4013      	ands	r3, r2
2000202a:	d504      	bpl.n	20002036 <pixel2+0x4e>
2000202c:	3b01      	subs	r3, #1
2000202e:	2208      	movs	r2, #8
20002030:	4252      	negs	r2, r2
20002032:	4313      	orrs	r3, r2
20002034:	3301      	adds	r3, #1
20002036:	2b07      	cmp	r3, #7
20002038:	d82c      	bhi.n	20002094 <pixel2+0xac>
2000203a:	009a      	lsls	r2, r3, #2
2000203c:	4b51      	ldr	r3, [pc, #324]	; (20002184 <pixel2+0x19c>)
2000203e:	18d3      	adds	r3, r2, r3
20002040:	681b      	ldr	r3, [r3, #0]
20002042:	469f      	mov	pc, r3
		case 0: mask = 1; break;
20002044:	231f      	movs	r3, #31
20002046:	18fb      	adds	r3, r7, r3
20002048:	2201      	movs	r2, #1
2000204a:	701a      	strb	r2, [r3, #0]
2000204c:	e022      	b.n	20002094 <pixel2+0xac>
		case 1: mask = 2; break;
2000204e:	231f      	movs	r3, #31
20002050:	18fb      	adds	r3, r7, r3
20002052:	2202      	movs	r2, #2
20002054:	701a      	strb	r2, [r3, #0]
20002056:	e01d      	b.n	20002094 <pixel2+0xac>
		case 2: mask = 4; break;
20002058:	231f      	movs	r3, #31
2000205a:	18fb      	adds	r3, r7, r3
2000205c:	2204      	movs	r2, #4
2000205e:	701a      	strb	r2, [r3, #0]
20002060:	e018      	b.n	20002094 <pixel2+0xac>
		case 3: mask = 8; break;
20002062:	231f      	movs	r3, #31
20002064:	18fb      	adds	r3, r7, r3
20002066:	2208      	movs	r2, #8
20002068:	701a      	strb	r2, [r3, #0]
2000206a:	e013      	b.n	20002094 <pixel2+0xac>
		case 4: mask = 0x10; break;
2000206c:	231f      	movs	r3, #31
2000206e:	18fb      	adds	r3, r7, r3
20002070:	2210      	movs	r2, #16
20002072:	701a      	strb	r2, [r3, #0]
20002074:	e00e      	b.n	20002094 <pixel2+0xac>
		case 5: mask = 0x20; break;
20002076:	231f      	movs	r3, #31
20002078:	18fb      	adds	r3, r7, r3
2000207a:	2220      	movs	r2, #32
2000207c:	701a      	strb	r2, [r3, #0]
2000207e:	e009      	b.n	20002094 <pixel2+0xac>
		case 6: mask = 0x40; break;
20002080:	231f      	movs	r3, #31
20002082:	18fb      	adds	r3, r7, r3
20002084:	2240      	movs	r2, #64	; 0x40
20002086:	701a      	strb	r2, [r3, #0]
20002088:	e004      	b.n	20002094 <pixel2+0xac>
		case 7: mask = 0x80; break;
2000208a:	231f      	movs	r3, #31
2000208c:	18fb      	adds	r3, r7, r3
2000208e:	2280      	movs	r2, #128	; 0x80
20002090:	701a      	strb	r2, [r3, #0]
20002092:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0)
20002094:	687b      	ldr	r3, [r7, #4]
20002096:	2b00      	cmp	r3, #0
20002098:	d106      	bne.n	200020a8 <pixel2+0xc0>
		mask = ~mask;
2000209a:	231f      	movs	r3, #31
2000209c:	18fb      	adds	r3, r7, r3
2000209e:	221f      	movs	r2, #31
200020a0:	18ba      	adds	r2, r7, r2
200020a2:	7812      	ldrb	r2, [r2, #0]
200020a4:	43d2      	mvns	r2, r2
200020a6:	701a      	strb	r2, [r3, #0]
	
	if(x > 64){
200020a8:	68fb      	ldr	r3, [r7, #12]
200020aa:	2b40      	cmp	r3, #64	; 0x40
200020ac:	dd07      	ble.n	200020be <pixel2+0xd6>
		controller = B_CS2;
200020ae:	231e      	movs	r3, #30
200020b0:	18fb      	adds	r3, r7, r3
200020b2:	2210      	movs	r2, #16
200020b4:	701a      	strb	r2, [r3, #0]
		x = x - 65;
200020b6:	68fb      	ldr	r3, [r7, #12]
200020b8:	3b41      	subs	r3, #65	; 0x41
200020ba:	60fb      	str	r3, [r7, #12]
200020bc:	e006      	b.n	200020cc <pixel2+0xe4>
	} else {
		controller = B_CS1;
200020be:	231e      	movs	r3, #30
200020c0:	18fb      	adds	r3, r7, r3
200020c2:	2208      	movs	r2, #8
200020c4:	701a      	strb	r2, [r3, #0]
		x = x-1;
200020c6:	68fb      	ldr	r3, [r7, #12]
200020c8:	3b01      	subs	r3, #1
200020ca:	60fb      	str	r3, [r7, #12]
	}
	graphic_write_command(LCD_SET_ADD | x, controller );
200020cc:	68fb      	ldr	r3, [r7, #12]
200020ce:	b25b      	sxtb	r3, r3
200020d0:	2240      	movs	r2, #64	; 0x40
200020d2:	4313      	orrs	r3, r2
200020d4:	b25b      	sxtb	r3, r3
200020d6:	b2da      	uxtb	r2, r3
200020d8:	231e      	movs	r3, #30
200020da:	18fb      	adds	r3, r7, r3
200020dc:	781b      	ldrb	r3, [r3, #0]
200020de:	0019      	movs	r1, r3
200020e0:	0010      	movs	r0, r2
200020e2:	f7ff fe11 	bl	20001d08 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller );
200020e6:	69bb      	ldr	r3, [r7, #24]
200020e8:	b25b      	sxtb	r3, r3
200020ea:	2248      	movs	r2, #72	; 0x48
200020ec:	4252      	negs	r2, r2
200020ee:	4313      	orrs	r3, r2
200020f0:	b25b      	sxtb	r3, r3
200020f2:	b2da      	uxtb	r2, r3
200020f4:	231e      	movs	r3, #30
200020f6:	18fb      	adds	r3, r7, r3
200020f8:	781b      	ldrb	r3, [r3, #0]
200020fa:	0019      	movs	r1, r3
200020fc:	0010      	movs	r0, r2
200020fe:	f7ff fe03 	bl	20001d08 <graphic_write_command>
	
	c = graphic_read_data(controller);
20002102:	231e      	movs	r3, #30
20002104:	18fb      	adds	r3, r7, r3
20002106:	781b      	ldrb	r3, [r3, #0]
20002108:	0018      	movs	r0, r3
2000210a:	f7ff fda9 	bl	20001c60 <graphic_read_data>
2000210e:	0002      	movs	r2, r0
20002110:	2317      	movs	r3, #23
20002112:	18fb      	adds	r3, r7, r3
20002114:	701a      	strb	r2, [r3, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
20002116:	68fb      	ldr	r3, [r7, #12]
20002118:	b25b      	sxtb	r3, r3
2000211a:	2240      	movs	r2, #64	; 0x40
2000211c:	4313      	orrs	r3, r2
2000211e:	b25b      	sxtb	r3, r3
20002120:	b2da      	uxtb	r2, r3
20002122:	231e      	movs	r3, #30
20002124:	18fb      	adds	r3, r7, r3
20002126:	781b      	ldrb	r3, [r3, #0]
20002128:	0019      	movs	r1, r3
2000212a:	0010      	movs	r0, r2
2000212c:	f7ff fdec 	bl	20001d08 <graphic_write_command>
	
	if(set)
20002130:	687b      	ldr	r3, [r7, #4]
20002132:	2b00      	cmp	r3, #0
20002134:	d00a      	beq.n	2000214c <pixel2+0x164>
		mask = mask | c;
20002136:	231f      	movs	r3, #31
20002138:	18fb      	adds	r3, r7, r3
2000213a:	221f      	movs	r2, #31
2000213c:	18b9      	adds	r1, r7, r2
2000213e:	2217      	movs	r2, #23
20002140:	18ba      	adds	r2, r7, r2
20002142:	7809      	ldrb	r1, [r1, #0]
20002144:	7812      	ldrb	r2, [r2, #0]
20002146:	430a      	orrs	r2, r1
20002148:	701a      	strb	r2, [r3, #0]
2000214a:	e009      	b.n	20002160 <pixel2+0x178>
	else
		mask = mask & c;
2000214c:	231f      	movs	r3, #31
2000214e:	18fb      	adds	r3, r7, r3
20002150:	221f      	movs	r2, #31
20002152:	18ba      	adds	r2, r7, r2
20002154:	2117      	movs	r1, #23
20002156:	1879      	adds	r1, r7, r1
20002158:	7812      	ldrb	r2, [r2, #0]
2000215a:	7809      	ldrb	r1, [r1, #0]
2000215c:	400a      	ands	r2, r1
2000215e:	701a      	strb	r2, [r3, #0]
	
	graphic_write_data(mask, controller);
20002160:	231e      	movs	r3, #30
20002162:	18fb      	adds	r3, r7, r3
20002164:	781a      	ldrb	r2, [r3, #0]
20002166:	231f      	movs	r3, #31
20002168:	18fb      	adds	r3, r7, r3
2000216a:	781b      	ldrb	r3, [r3, #0]
2000216c:	0011      	movs	r1, r2
2000216e:	0018      	movs	r0, r3
20002170:	f7ff fded 	bl	20001d4e <graphic_write_data>
20002174:	e000      	b.n	20002178 <pixel2+0x190>
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20002176:	46c0      	nop			; (mov r8, r8)
}
20002178:	46bd      	mov	sp, r7
2000217a:	b008      	add	sp, #32
2000217c:	bd80      	pop	{r7, pc}
2000217e:	46c0      	nop			; (mov r8, r8)
20002180:	80000007 	andhi	r0, r0, r7
20002184:	20008ddc 	ldrdcs	r8, [r0], -ip

20002188 <graphic_draw_screen>:

void graphic_draw_screen(uint8_t *buffer) {
20002188:	b580      	push	{r7, lr}
2000218a:	b086      	sub	sp, #24
2000218c:	af00      	add	r7, sp, #0
2000218e:	6078      	str	r0, [r7, #4]
	uint8_t i, j, controller, c;
	unsigned int k = 0;
20002190:	2300      	movs	r3, #0
20002192:	613b      	str	r3, [r7, #16]
	for(c = 0; c < 2; c++) {
20002194:	2315      	movs	r3, #21
20002196:	18fb      	adds	r3, r7, r3
20002198:	2200      	movs	r2, #0
2000219a:	701a      	strb	r2, [r3, #0]
2000219c:	e056      	b.n	2000224c <graphic_draw_screen+0xc4>
		controller = (c == 0) ? B_CS1 : B_CS2;
2000219e:	2315      	movs	r3, #21
200021a0:	18fb      	adds	r3, r7, r3
200021a2:	781b      	ldrb	r3, [r3, #0]
200021a4:	2b00      	cmp	r3, #0
200021a6:	d101      	bne.n	200021ac <graphic_draw_screen+0x24>
200021a8:	2208      	movs	r2, #8
200021aa:	e000      	b.n	200021ae <graphic_draw_screen+0x26>
200021ac:	2210      	movs	r2, #16
200021ae:	230f      	movs	r3, #15
200021b0:	18fb      	adds	r3, r7, r3
200021b2:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 8; j++) {
200021b4:	2316      	movs	r3, #22
200021b6:	18fb      	adds	r3, r7, r3
200021b8:	2200      	movs	r2, #0
200021ba:	701a      	strb	r2, [r3, #0]
200021bc:	e03a      	b.n	20002234 <graphic_draw_screen+0xac>
			graphic_write_command(LCD_SET_PAGE | j, controller);
200021be:	2316      	movs	r3, #22
200021c0:	18fb      	adds	r3, r7, r3
200021c2:	781b      	ldrb	r3, [r3, #0]
200021c4:	2248      	movs	r2, #72	; 0x48
200021c6:	4252      	negs	r2, r2
200021c8:	4313      	orrs	r3, r2
200021ca:	b2da      	uxtb	r2, r3
200021cc:	230f      	movs	r3, #15
200021ce:	18fb      	adds	r3, r7, r3
200021d0:	781b      	ldrb	r3, [r3, #0]
200021d2:	0019      	movs	r1, r3
200021d4:	0010      	movs	r0, r2
200021d6:	f7ff fd97 	bl	20001d08 <graphic_write_command>
			graphic_write_command(LCD_SET_ADD | 0, controller);
200021da:	230f      	movs	r3, #15
200021dc:	18fb      	adds	r3, r7, r3
200021de:	781b      	ldrb	r3, [r3, #0]
200021e0:	0019      	movs	r1, r3
200021e2:	2040      	movs	r0, #64	; 0x40
200021e4:	f7ff fd90 	bl	20001d08 <graphic_write_command>
			for(i = 0; i <= 63; i++, k++) {
200021e8:	2317      	movs	r3, #23
200021ea:	18fb      	adds	r3, r7, r3
200021ec:	2200      	movs	r2, #0
200021ee:	701a      	strb	r2, [r3, #0]
200021f0:	e014      	b.n	2000221c <graphic_draw_screen+0x94>
				graphic_write_data(buffer[k], controller);
200021f2:	687a      	ldr	r2, [r7, #4]
200021f4:	693b      	ldr	r3, [r7, #16]
200021f6:	18d3      	adds	r3, r2, r3
200021f8:	781a      	ldrb	r2, [r3, #0]
200021fa:	230f      	movs	r3, #15
200021fc:	18fb      	adds	r3, r7, r3
200021fe:	781b      	ldrb	r3, [r3, #0]
20002200:	0019      	movs	r1, r3
20002202:	0010      	movs	r0, r2
20002204:	f7ff fda3 	bl	20001d4e <graphic_write_data>
			for(i = 0; i <= 63; i++, k++) {
20002208:	2317      	movs	r3, #23
2000220a:	18fb      	adds	r3, r7, r3
2000220c:	781a      	ldrb	r2, [r3, #0]
2000220e:	2317      	movs	r3, #23
20002210:	18fb      	adds	r3, r7, r3
20002212:	3201      	adds	r2, #1
20002214:	701a      	strb	r2, [r3, #0]
20002216:	693b      	ldr	r3, [r7, #16]
20002218:	3301      	adds	r3, #1
2000221a:	613b      	str	r3, [r7, #16]
2000221c:	2317      	movs	r3, #23
2000221e:	18fb      	adds	r3, r7, r3
20002220:	781b      	ldrb	r3, [r3, #0]
20002222:	2b3f      	cmp	r3, #63	; 0x3f
20002224:	d9e5      	bls.n	200021f2 <graphic_draw_screen+0x6a>
		for(j = 0; j < 8; j++) {
20002226:	2316      	movs	r3, #22
20002228:	18fb      	adds	r3, r7, r3
2000222a:	781a      	ldrb	r2, [r3, #0]
2000222c:	2316      	movs	r3, #22
2000222e:	18fb      	adds	r3, r7, r3
20002230:	3201      	adds	r2, #1
20002232:	701a      	strb	r2, [r3, #0]
20002234:	2316      	movs	r3, #22
20002236:	18fb      	adds	r3, r7, r3
20002238:	781b      	ldrb	r3, [r3, #0]
2000223a:	2b07      	cmp	r3, #7
2000223c:	d9bf      	bls.n	200021be <graphic_draw_screen+0x36>
	for(c = 0; c < 2; c++) {
2000223e:	2315      	movs	r3, #21
20002240:	18fb      	adds	r3, r7, r3
20002242:	781a      	ldrb	r2, [r3, #0]
20002244:	2315      	movs	r3, #21
20002246:	18fb      	adds	r3, r7, r3
20002248:	3201      	adds	r2, #1
2000224a:	701a      	strb	r2, [r3, #0]
2000224c:	2315      	movs	r3, #21
2000224e:	18fb      	adds	r3, r7, r3
20002250:	781b      	ldrb	r3, [r3, #0]
20002252:	2b01      	cmp	r3, #1
20002254:	d9a3      	bls.n	2000219e <graphic_draw_screen+0x16>
			}
		}
	}
}
20002256:	46c0      	nop			; (mov r8, r8)
20002258:	46bd      	mov	sp, r7
2000225a:	b006      	add	sp, #24
2000225c:	bd80      	pop	{r7, pc}

2000225e <draw_sprite>:


void grayScaleTest( void );


void draw_sprite(sprite* s, int x, int y, int set, int color) {
2000225e:	b5b0      	push	{r4, r5, r7, lr}
20002260:	b08a      	sub	sp, #40	; 0x28
20002262:	af00      	add	r7, sp, #0
20002264:	60f8      	str	r0, [r7, #12]
20002266:	60b9      	str	r1, [r7, #8]
20002268:	607a      	str	r2, [r7, #4]
2000226a:	603b      	str	r3, [r7, #0]
	int i,j,k, width_in_bytes;
	if (s->width % 8 == 0)
2000226c:	68fb      	ldr	r3, [r7, #12]
2000226e:	681b      	ldr	r3, [r3, #0]
20002270:	2207      	movs	r2, #7
20002272:	4013      	ands	r3, r2
20002274:	d104      	bne.n	20002280 <draw_sprite+0x22>
		width_in_bytes = s->width / 8;
20002276:	68fb      	ldr	r3, [r7, #12]
20002278:	681b      	ldr	r3, [r3, #0]
2000227a:	08db      	lsrs	r3, r3, #3
2000227c:	61bb      	str	r3, [r7, #24]
2000227e:	e004      	b.n	2000228a <draw_sprite+0x2c>
	else
		width_in_bytes = (s->width / 8) + 1;
20002280:	68fb      	ldr	r3, [r7, #12]
20002282:	681b      	ldr	r3, [r3, #0]
20002284:	08db      	lsrs	r3, r3, #3
20002286:	3301      	adds	r3, #1
20002288:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < s->height; i++)
2000228a:	2300      	movs	r3, #0
2000228c:	627b      	str	r3, [r7, #36]	; 0x24
2000228e:	e06a      	b.n	20002366 <draw_sprite+0x108>
		for (j = 0; j < width_in_bytes; j++) {
20002290:	2300      	movs	r3, #0
20002292:	623b      	str	r3, [r7, #32]
20002294:	e060      	b.n	20002358 <draw_sprite+0xfa>
			unsigned char byte = s->data[i * width_in_bytes + j];
20002296:	68fb      	ldr	r3, [r7, #12]
20002298:	689b      	ldr	r3, [r3, #8]
2000229a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000229c:	69b9      	ldr	r1, [r7, #24]
2000229e:	4351      	muls	r1, r2
200022a0:	6a3a      	ldr	r2, [r7, #32]
200022a2:	188a      	adds	r2, r1, r2
200022a4:	189a      	adds	r2, r3, r2
200022a6:	2317      	movs	r3, #23
200022a8:	18fb      	adds	r3, r7, r3
200022aa:	7812      	ldrb	r2, [r2, #0]
200022ac:	701a      	strb	r2, [r3, #0]
			for (k =0; k < 8; k++) {
200022ae:	2300      	movs	r3, #0
200022b0:	61fb      	str	r3, [r7, #28]
200022b2:	e04b      	b.n	2000234c <draw_sprite+0xee>
				if (byte & (1 << k)){
200022b4:	2317      	movs	r3, #23
200022b6:	18fb      	adds	r3, r7, r3
200022b8:	781a      	ldrb	r2, [r3, #0]
200022ba:	69fb      	ldr	r3, [r7, #28]
200022bc:	411a      	asrs	r2, r3
200022be:	0013      	movs	r3, r2
200022c0:	2201      	movs	r2, #1
200022c2:	4013      	ands	r3, r2
200022c4:	d03f      	beq.n	20002346 <draw_sprite+0xe8>
					pixel(8 * j + k + x + 1, i + y + 1, set, color);
200022c6:	6a3b      	ldr	r3, [r7, #32]
200022c8:	00da      	lsls	r2, r3, #3
200022ca:	69fb      	ldr	r3, [r7, #28]
200022cc:	18d2      	adds	r2, r2, r3
200022ce:	68bb      	ldr	r3, [r7, #8]
200022d0:	18d3      	adds	r3, r2, r3
200022d2:	1c58      	adds	r0, r3, #1
200022d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200022d6:	687b      	ldr	r3, [r7, #4]
200022d8:	18d3      	adds	r3, r2, r3
200022da:	1c59      	adds	r1, r3, #1
200022dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200022de:	683a      	ldr	r2, [r7, #0]
200022e0:	f7ff fdc2 	bl	20001e68 <pixel>
					
					if(set) {	//Remove the other colors from this pixel
200022e4:	683b      	ldr	r3, [r7, #0]
200022e6:	2b00      	cmp	r3, #0
200022e8:	d02d      	beq.n	20002346 <draw_sprite+0xe8>
						pixel(8 * j + k + x + 1, i + y + 1, 0, (color+1) % 3);
200022ea:	6a3b      	ldr	r3, [r7, #32]
200022ec:	00da      	lsls	r2, r3, #3
200022ee:	69fb      	ldr	r3, [r7, #28]
200022f0:	18d2      	adds	r2, r2, r3
200022f2:	68bb      	ldr	r3, [r7, #8]
200022f4:	18d3      	adds	r3, r2, r3
200022f6:	1c5c      	adds	r4, r3, #1
200022f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200022fa:	687b      	ldr	r3, [r7, #4]
200022fc:	18d3      	adds	r3, r2, r3
200022fe:	1c5d      	adds	r5, r3, #1
20002300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20002302:	3301      	adds	r3, #1
20002304:	2103      	movs	r1, #3
20002306:	0018      	movs	r0, r3
20002308:	f000 ff20 	bl	2000314c <__aeabi_idivmod>
2000230c:	000b      	movs	r3, r1
2000230e:	2200      	movs	r2, #0
20002310:	0029      	movs	r1, r5
20002312:	0020      	movs	r0, r4
20002314:	f7ff fda8 	bl	20001e68 <pixel>
						pixel(8 * j + k + x + 1, i + y + 1, 0, (color+2) % 3);
20002318:	6a3b      	ldr	r3, [r7, #32]
2000231a:	00da      	lsls	r2, r3, #3
2000231c:	69fb      	ldr	r3, [r7, #28]
2000231e:	18d2      	adds	r2, r2, r3
20002320:	68bb      	ldr	r3, [r7, #8]
20002322:	18d3      	adds	r3, r2, r3
20002324:	1c5c      	adds	r4, r3, #1
20002326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20002328:	687b      	ldr	r3, [r7, #4]
2000232a:	18d3      	adds	r3, r2, r3
2000232c:	1c5d      	adds	r5, r3, #1
2000232e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20002330:	3302      	adds	r3, #2
20002332:	2103      	movs	r1, #3
20002334:	0018      	movs	r0, r3
20002336:	f000 ff09 	bl	2000314c <__aeabi_idivmod>
2000233a:	000b      	movs	r3, r1
2000233c:	2200      	movs	r2, #0
2000233e:	0029      	movs	r1, r5
20002340:	0020      	movs	r0, r4
20002342:	f7ff fd91 	bl	20001e68 <pixel>
			for (k =0; k < 8; k++) {
20002346:	69fb      	ldr	r3, [r7, #28]
20002348:	3301      	adds	r3, #1
2000234a:	61fb      	str	r3, [r7, #28]
2000234c:	69fb      	ldr	r3, [r7, #28]
2000234e:	2b07      	cmp	r3, #7
20002350:	ddb0      	ble.n	200022b4 <draw_sprite+0x56>
		for (j = 0; j < width_in_bytes; j++) {
20002352:	6a3b      	ldr	r3, [r7, #32]
20002354:	3301      	adds	r3, #1
20002356:	623b      	str	r3, [r7, #32]
20002358:	6a3a      	ldr	r2, [r7, #32]
2000235a:	69bb      	ldr	r3, [r7, #24]
2000235c:	429a      	cmp	r2, r3
2000235e:	db9a      	blt.n	20002296 <draw_sprite+0x38>
	for (i = 0; i < s->height; i++)
20002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002362:	3301      	adds	r3, #1
20002364:	627b      	str	r3, [r7, #36]	; 0x24
20002366:	68fb      	ldr	r3, [r7, #12]
20002368:	685a      	ldr	r2, [r3, #4]
2000236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000236c:	429a      	cmp	r2, r3
2000236e:	d88f      	bhi.n	20002290 <draw_sprite+0x32>
					}
				}
			}
		}
}
20002370:	46c0      	nop			; (mov r8, r8)
20002372:	46bd      	mov	sp, r7
20002374:	b00a      	add	sp, #40	; 0x28
20002376:	bdb0      	pop	{r4, r5, r7, pc}

20002378 <fillRectangle>:

void fillRectangle( int x, int y, int width, int height ){
20002378:	b580      	push	{r7, lr}
2000237a:	b086      	sub	sp, #24
2000237c:	af00      	add	r7, sp, #0
2000237e:	60f8      	str	r0, [r7, #12]
20002380:	60b9      	str	r1, [r7, #8]
20002382:	607a      	str	r2, [r7, #4]
20002384:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
20002386:	68fb      	ldr	r3, [r7, #12]
20002388:	617b      	str	r3, [r7, #20]
2000238a:	e014      	b.n	200023b6 <fillRectangle+0x3e>
		for (j = y; j < y + height; j++) {
2000238c:	68bb      	ldr	r3, [r7, #8]
2000238e:	613b      	str	r3, [r7, #16]
20002390:	e008      	b.n	200023a4 <fillRectangle+0x2c>
			pixel(i, j, 1, 3);
20002392:	6939      	ldr	r1, [r7, #16]
20002394:	6978      	ldr	r0, [r7, #20]
20002396:	2303      	movs	r3, #3
20002398:	2201      	movs	r2, #1
2000239a:	f7ff fd65 	bl	20001e68 <pixel>
		for (j = y; j < y + height; j++) {
2000239e:	693b      	ldr	r3, [r7, #16]
200023a0:	3301      	adds	r3, #1
200023a2:	613b      	str	r3, [r7, #16]
200023a4:	68ba      	ldr	r2, [r7, #8]
200023a6:	683b      	ldr	r3, [r7, #0]
200023a8:	18d2      	adds	r2, r2, r3
200023aa:	693b      	ldr	r3, [r7, #16]
200023ac:	429a      	cmp	r2, r3
200023ae:	dcf0      	bgt.n	20002392 <fillRectangle+0x1a>
	for (i = x; i < x + width; i++) {
200023b0:	697b      	ldr	r3, [r7, #20]
200023b2:	3301      	adds	r3, #1
200023b4:	617b      	str	r3, [r7, #20]
200023b6:	68fa      	ldr	r2, [r7, #12]
200023b8:	687b      	ldr	r3, [r7, #4]
200023ba:	18d2      	adds	r2, r2, r3
200023bc:	697b      	ldr	r3, [r7, #20]
200023be:	429a      	cmp	r2, r3
200023c0:	dce4      	bgt.n	2000238c <fillRectangle+0x14>
		}
	}
}
200023c2:	46c0      	nop			; (mov r8, r8)
200023c4:	46bd      	mov	sp, r7
200023c6:	b006      	add	sp, #24
200023c8:	bd80      	pop	{r7, pc}

200023ca <clearRectangle>:

void clearRectangle( int x, int y, int width, int height ){
200023ca:	b580      	push	{r7, lr}
200023cc:	b086      	sub	sp, #24
200023ce:	af00      	add	r7, sp, #0
200023d0:	60f8      	str	r0, [r7, #12]
200023d2:	60b9      	str	r1, [r7, #8]
200023d4:	607a      	str	r2, [r7, #4]
200023d6:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
200023d8:	68fb      	ldr	r3, [r7, #12]
200023da:	617b      	str	r3, [r7, #20]
200023dc:	e014      	b.n	20002408 <clearRectangle+0x3e>
		for (j = y; j < y + height; j++) {
200023de:	68bb      	ldr	r3, [r7, #8]
200023e0:	613b      	str	r3, [r7, #16]
200023e2:	e008      	b.n	200023f6 <clearRectangle+0x2c>
			pixel(i, j, 0, 3);
200023e4:	6939      	ldr	r1, [r7, #16]
200023e6:	6978      	ldr	r0, [r7, #20]
200023e8:	2303      	movs	r3, #3
200023ea:	2200      	movs	r2, #0
200023ec:	f7ff fd3c 	bl	20001e68 <pixel>
		for (j = y; j < y + height; j++) {
200023f0:	693b      	ldr	r3, [r7, #16]
200023f2:	3301      	adds	r3, #1
200023f4:	613b      	str	r3, [r7, #16]
200023f6:	68ba      	ldr	r2, [r7, #8]
200023f8:	683b      	ldr	r3, [r7, #0]
200023fa:	18d2      	adds	r2, r2, r3
200023fc:	693b      	ldr	r3, [r7, #16]
200023fe:	429a      	cmp	r2, r3
20002400:	dcf0      	bgt.n	200023e4 <clearRectangle+0x1a>
	for (i = x; i < x + width; i++) {
20002402:	697b      	ldr	r3, [r7, #20]
20002404:	3301      	adds	r3, #1
20002406:	617b      	str	r3, [r7, #20]
20002408:	68fa      	ldr	r2, [r7, #12]
2000240a:	687b      	ldr	r3, [r7, #4]
2000240c:	18d2      	adds	r2, r2, r3
2000240e:	697b      	ldr	r3, [r7, #20]
20002410:	429a      	cmp	r2, r3
20002412:	dce4      	bgt.n	200023de <clearRectangle+0x14>
		}
	}
}
20002414:	46c0      	nop			; (mov r8, r8)
20002416:	46bd      	mov	sp, r7
20002418:	b006      	add	sp, #24
2000241a:	bd80      	pop	{r7, pc}

2000241c <grayScaleTest>:


void grayScaleTest( void ) {
2000241c:	b590      	push	{r4, r7, lr}
2000241e:	b087      	sub	sp, #28
20002420:	af00      	add	r7, sp, #0
	int x = 10;
20002422:	230a      	movs	r3, #10
20002424:	617b      	str	r3, [r7, #20]
	int y = 10;
20002426:	230a      	movs	r3, #10
20002428:	613b      	str	r3, [r7, #16]
	int width = 70;
2000242a:	2346      	movs	r3, #70	; 0x46
2000242c:	60fb      	str	r3, [r7, #12]
	int height = 50;
2000242e:	2332      	movs	r3, #50	; 0x32
20002430:	60bb      	str	r3, [r7, #8]
	
	int x2 = 50;
20002432:	2332      	movs	r3, #50	; 0x32
20002434:	607b      	str	r3, [r7, #4]
	
	fillRectangle(x, y, width, height);
20002436:	68bb      	ldr	r3, [r7, #8]
20002438:	68fa      	ldr	r2, [r7, #12]
2000243a:	6939      	ldr	r1, [r7, #16]
2000243c:	6978      	ldr	r0, [r7, #20]
2000243e:	f7ff ff9b 	bl	20002378 <fillRectangle>
	
	int i;
	int k = 5;
20002442:	2305      	movs	r3, #5
20002444:	603b      	str	r3, [r7, #0]
	while(1) {
		clear_backBuffer();
20002446:	f7ff fadf 	bl	20001a08 <clear_backBuffer>
		fillRectangle(x, y, width, height);
2000244a:	68bb      	ldr	r3, [r7, #8]
2000244c:	68fa      	ldr	r2, [r7, #12]
2000244e:	6939      	ldr	r1, [r7, #16]
20002450:	6978      	ldr	r0, [r7, #20]
20002452:	f7ff ff91 	bl	20002378 <fillRectangle>
		clearRectangle(x+2+2, y+1, width-k, height-k); //outer square
20002456:	697b      	ldr	r3, [r7, #20]
20002458:	1d18      	adds	r0, r3, #4
2000245a:	693b      	ldr	r3, [r7, #16]
2000245c:	1c59      	adds	r1, r3, #1
2000245e:	68fa      	ldr	r2, [r7, #12]
20002460:	683b      	ldr	r3, [r7, #0]
20002462:	1ad4      	subs	r4, r2, r3
20002464:	68ba      	ldr	r2, [r7, #8]
20002466:	683b      	ldr	r3, [r7, #0]
20002468:	1ad3      	subs	r3, r2, r3
2000246a:	0022      	movs	r2, r4
2000246c:	f7ff ffad 	bl	200023ca <clearRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
20002470:	697b      	ldr	r3, [r7, #20]
20002472:	1c9a      	adds	r2, r3, #2
20002474:	683b      	ldr	r3, [r7, #0]
20002476:	18d0      	adds	r0, r2, r3
20002478:	693b      	ldr	r3, [r7, #16]
2000247a:	1c99      	adds	r1, r3, #2
2000247c:	68fb      	ldr	r3, [r7, #12]
2000247e:	1f1a      	subs	r2, r3, #4
20002480:	683b      	ldr	r3, [r7, #0]
20002482:	1ad4      	subs	r4, r2, r3
20002484:	68bb      	ldr	r3, [r7, #8]
20002486:	1f1a      	subs	r2, r3, #4
20002488:	683b      	ldr	r3, [r7, #0]
2000248a:	1ad3      	subs	r3, r2, r3
2000248c:	0022      	movs	r2, r4
2000248e:	f7ff ff9c 	bl	200023ca <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
20002492:	4b2d      	ldr	r3, [pc, #180]	; (20002548 <grayScaleTest+0x12c>)
20002494:	0018      	movs	r0, r3
20002496:	f7ff fe77 	bl	20002188 <graphic_draw_screen>
		clear_backBuffer();
2000249a:	f7ff fab5 	bl	20001a08 <clear_backBuffer>
		fillRectangle(x, y, width, height);
2000249e:	68bb      	ldr	r3, [r7, #8]
200024a0:	68fa      	ldr	r2, [r7, #12]
200024a2:	6939      	ldr	r1, [r7, #16]
200024a4:	6978      	ldr	r0, [r7, #20]
200024a6:	f7ff ff67 	bl	20002378 <fillRectangle>
		
		fillRectangle(x+2+2, y+1, width-k, height-k); //outer white square
200024aa:	697b      	ldr	r3, [r7, #20]
200024ac:	1d18      	adds	r0, r3, #4
200024ae:	693b      	ldr	r3, [r7, #16]
200024b0:	1c59      	adds	r1, r3, #1
200024b2:	68fa      	ldr	r2, [r7, #12]
200024b4:	683b      	ldr	r3, [r7, #0]
200024b6:	1ad4      	subs	r4, r2, r3
200024b8:	68ba      	ldr	r2, [r7, #8]
200024ba:	683b      	ldr	r3, [r7, #0]
200024bc:	1ad3      	subs	r3, r2, r3
200024be:	0022      	movs	r2, r4
200024c0:	f7ff ff5a 	bl	20002378 <fillRectangle>
		fillRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
200024c4:	697b      	ldr	r3, [r7, #20]
200024c6:	1c9a      	adds	r2, r3, #2
200024c8:	683b      	ldr	r3, [r7, #0]
200024ca:	18d0      	adds	r0, r2, r3
200024cc:	693b      	ldr	r3, [r7, #16]
200024ce:	1c99      	adds	r1, r3, #2
200024d0:	68fb      	ldr	r3, [r7, #12]
200024d2:	1f1a      	subs	r2, r3, #4
200024d4:	683b      	ldr	r3, [r7, #0]
200024d6:	1ad4      	subs	r4, r2, r3
200024d8:	68bb      	ldr	r3, [r7, #8]
200024da:	1f1a      	subs	r2, r3, #4
200024dc:	683b      	ldr	r3, [r7, #0]
200024de:	1ad3      	subs	r3, r2, r3
200024e0:	0022      	movs	r2, r4
200024e2:	f7ff ff49 	bl	20002378 <fillRectangle>
		clearRectangle(x+12, y+5, 5, 5);
200024e6:	697b      	ldr	r3, [r7, #20]
200024e8:	330c      	adds	r3, #12
200024ea:	0018      	movs	r0, r3
200024ec:	693b      	ldr	r3, [r7, #16]
200024ee:	1d59      	adds	r1, r3, #5
200024f0:	2305      	movs	r3, #5
200024f2:	2205      	movs	r2, #5
200024f4:	f7ff ff69 	bl	200023ca <clearRectangle>
		
		graphic_draw_screen(draw_buffer_black);
200024f8:	4b13      	ldr	r3, [pc, #76]	; (20002548 <grayScaleTest+0x12c>)
200024fa:	0018      	movs	r0, r3
200024fc:	f7ff fe44 	bl	20002188 <graphic_draw_screen>
		delay_milli(20);
20002500:	2014      	movs	r0, #20
20002502:	f7ff fa55 	bl	200019b0 <delay_milli>
		
		clear_backBuffer();
20002506:	f7ff fa7f 	bl	20001a08 <clear_backBuffer>
		fillRectangle(x, y, width, height);
2000250a:	68bb      	ldr	r3, [r7, #8]
2000250c:	68fa      	ldr	r2, [r7, #12]
2000250e:	6939      	ldr	r1, [r7, #16]
20002510:	6978      	ldr	r0, [r7, #20]
20002512:	f7ff ff31 	bl	20002378 <fillRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
20002516:	697b      	ldr	r3, [r7, #20]
20002518:	1c9a      	adds	r2, r3, #2
2000251a:	683b      	ldr	r3, [r7, #0]
2000251c:	18d0      	adds	r0, r2, r3
2000251e:	693b      	ldr	r3, [r7, #16]
20002520:	1c99      	adds	r1, r3, #2
20002522:	68fb      	ldr	r3, [r7, #12]
20002524:	1f1a      	subs	r2, r3, #4
20002526:	683b      	ldr	r3, [r7, #0]
20002528:	1ad4      	subs	r4, r2, r3
2000252a:	68bb      	ldr	r3, [r7, #8]
2000252c:	1f1a      	subs	r2, r3, #4
2000252e:	683b      	ldr	r3, [r7, #0]
20002530:	1ad3      	subs	r3, r2, r3
20002532:	0022      	movs	r2, r4
20002534:	f7ff ff49 	bl	200023ca <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
20002538:	4b03      	ldr	r3, [pc, #12]	; (20002548 <grayScaleTest+0x12c>)
2000253a:	0018      	movs	r0, r3
2000253c:	f7ff fe24 	bl	20002188 <graphic_draw_screen>
		
		delay_milli(20);
20002540:	2014      	movs	r0, #20
20002542:	f7ff fa35 	bl	200019b0 <delay_milli>
		clear_backBuffer();
20002546:	e77e      	b.n	20002446 <grayScaleTest+0x2a>
20002548:	200047d8 	ldrdcs	r4, [r0], -r8

2000254c <set_up_draw_buffers>:
	}
}

/** Should prepare the different drawing buffers, before the drawing of each frame.*/
void set_up_draw_buffers( void ) {
2000254c:	b580      	push	{r7, lr}
2000254e:	b082      	sub	sp, #8
20002550:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 1024; i++) {
20002552:	2300      	movs	r3, #0
20002554:	607b      	str	r3, [r7, #4]
20002556:	e065      	b.n	20002624 <set_up_draw_buffers+0xd8>
		draw_buffer_black[i] = backBuffer[i] & (~backBufferGray[i] & ~backBufferLight[i]); //Had to work a bit on these
20002558:	4a36      	ldr	r2, [pc, #216]	; (20002634 <set_up_draw_buffers+0xe8>)
2000255a:	687b      	ldr	r3, [r7, #4]
2000255c:	18d3      	adds	r3, r2, r3
2000255e:	781b      	ldrb	r3, [r3, #0]
20002560:	b25b      	sxtb	r3, r3
20002562:	4935      	ldr	r1, [pc, #212]	; (20002638 <set_up_draw_buffers+0xec>)
20002564:	687a      	ldr	r2, [r7, #4]
20002566:	188a      	adds	r2, r1, r2
20002568:	7811      	ldrb	r1, [r2, #0]
2000256a:	4834      	ldr	r0, [pc, #208]	; (2000263c <set_up_draw_buffers+0xf0>)
2000256c:	687a      	ldr	r2, [r7, #4]
2000256e:	1882      	adds	r2, r0, r2
20002570:	7812      	ldrb	r2, [r2, #0]
20002572:	430a      	orrs	r2, r1
20002574:	b2d2      	uxtb	r2, r2
20002576:	b252      	sxtb	r2, r2
20002578:	43d2      	mvns	r2, r2
2000257a:	b252      	sxtb	r2, r2
2000257c:	4013      	ands	r3, r2
2000257e:	b25b      	sxtb	r3, r3
20002580:	b2d9      	uxtb	r1, r3
20002582:	4a2f      	ldr	r2, [pc, #188]	; (20002640 <set_up_draw_buffers+0xf4>)
20002584:	687b      	ldr	r3, [r7, #4]
20002586:	18d3      	adds	r3, r2, r3
20002588:	1c0a      	adds	r2, r1, #0
2000258a:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray[i] = (backBuffer[i] | backBufferGray[i]) & ~backBufferLight[i]; //in order to make it possible
2000258c:	4a29      	ldr	r2, [pc, #164]	; (20002634 <set_up_draw_buffers+0xe8>)
2000258e:	687b      	ldr	r3, [r7, #4]
20002590:	18d3      	adds	r3, r2, r3
20002592:	781a      	ldrb	r2, [r3, #0]
20002594:	4928      	ldr	r1, [pc, #160]	; (20002638 <set_up_draw_buffers+0xec>)
20002596:	687b      	ldr	r3, [r7, #4]
20002598:	18cb      	adds	r3, r1, r3
2000259a:	781b      	ldrb	r3, [r3, #0]
2000259c:	4313      	orrs	r3, r2
2000259e:	b2db      	uxtb	r3, r3
200025a0:	b25b      	sxtb	r3, r3
200025a2:	4926      	ldr	r1, [pc, #152]	; (2000263c <set_up_draw_buffers+0xf0>)
200025a4:	687a      	ldr	r2, [r7, #4]
200025a6:	188a      	adds	r2, r1, r2
200025a8:	7812      	ldrb	r2, [r2, #0]
200025aa:	b252      	sxtb	r2, r2
200025ac:	43d2      	mvns	r2, r2
200025ae:	b252      	sxtb	r2, r2
200025b0:	4013      	ands	r3, r2
200025b2:	b25b      	sxtb	r3, r3
200025b4:	b2d9      	uxtb	r1, r3
200025b6:	4a23      	ldr	r2, [pc, #140]	; (20002644 <set_up_draw_buffers+0xf8>)
200025b8:	687b      	ldr	r3, [r7, #4]
200025ba:	18d3      	adds	r3, r2, r3
200025bc:	1c0a      	adds	r2, r1, #0
200025be:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_light[i] = (backBuffer[i] | backBufferLight[i]) & ~backBufferGray[i]; //to show a lighter sprite
200025c0:	4a1c      	ldr	r2, [pc, #112]	; (20002634 <set_up_draw_buffers+0xe8>)
200025c2:	687b      	ldr	r3, [r7, #4]
200025c4:	18d3      	adds	r3, r2, r3
200025c6:	781a      	ldrb	r2, [r3, #0]
200025c8:	491c      	ldr	r1, [pc, #112]	; (2000263c <set_up_draw_buffers+0xf0>)
200025ca:	687b      	ldr	r3, [r7, #4]
200025cc:	18cb      	adds	r3, r1, r3
200025ce:	781b      	ldrb	r3, [r3, #0]
200025d0:	4313      	orrs	r3, r2
200025d2:	b2db      	uxtb	r3, r3
200025d4:	b25b      	sxtb	r3, r3
200025d6:	4918      	ldr	r1, [pc, #96]	; (20002638 <set_up_draw_buffers+0xec>)
200025d8:	687a      	ldr	r2, [r7, #4]
200025da:	188a      	adds	r2, r1, r2
200025dc:	7812      	ldrb	r2, [r2, #0]
200025de:	b252      	sxtb	r2, r2
200025e0:	43d2      	mvns	r2, r2
200025e2:	b252      	sxtb	r2, r2
200025e4:	4013      	ands	r3, r2
200025e6:	b25b      	sxtb	r3, r3
200025e8:	b2d9      	uxtb	r1, r3
200025ea:	4a17      	ldr	r2, [pc, #92]	; (20002648 <set_up_draw_buffers+0xfc>)
200025ec:	687b      	ldr	r3, [r7, #4]
200025ee:	18d3      	adds	r3, r2, r3
200025f0:	1c0a      	adds	r2, r1, #0
200025f2:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray_light[i] = backBuffer[i] | backBufferGray[i] | backBufferLight[i]; //on top of a darker one.
200025f4:	4a0f      	ldr	r2, [pc, #60]	; (20002634 <set_up_draw_buffers+0xe8>)
200025f6:	687b      	ldr	r3, [r7, #4]
200025f8:	18d3      	adds	r3, r2, r3
200025fa:	781a      	ldrb	r2, [r3, #0]
200025fc:	490e      	ldr	r1, [pc, #56]	; (20002638 <set_up_draw_buffers+0xec>)
200025fe:	687b      	ldr	r3, [r7, #4]
20002600:	18cb      	adds	r3, r1, r3
20002602:	781b      	ldrb	r3, [r3, #0]
20002604:	4313      	orrs	r3, r2
20002606:	b2da      	uxtb	r2, r3
20002608:	490c      	ldr	r1, [pc, #48]	; (2000263c <set_up_draw_buffers+0xf0>)
2000260a:	687b      	ldr	r3, [r7, #4]
2000260c:	18cb      	adds	r3, r1, r3
2000260e:	781b      	ldrb	r3, [r3, #0]
20002610:	4313      	orrs	r3, r2
20002612:	b2d9      	uxtb	r1, r3
20002614:	4a0d      	ldr	r2, [pc, #52]	; (2000264c <set_up_draw_buffers+0x100>)
20002616:	687b      	ldr	r3, [r7, #4]
20002618:	18d3      	adds	r3, r2, r3
2000261a:	1c0a      	adds	r2, r1, #0
2000261c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 1024; i++) {
2000261e:	687b      	ldr	r3, [r7, #4]
20002620:	3301      	adds	r3, #1
20002622:	607b      	str	r3, [r7, #4]
20002624:	687b      	ldr	r3, [r7, #4]
20002626:	4a0a      	ldr	r2, [pc, #40]	; (20002650 <set_up_draw_buffers+0x104>)
20002628:	4293      	cmp	r3, r2
2000262a:	dd95      	ble.n	20002558 <set_up_draw_buffers+0xc>
	}
}
2000262c:	46c0      	nop			; (mov r8, r8)
2000262e:	46bd      	mov	sp, r7
20002630:	b002      	add	sp, #8
20002632:	bd80      	pop	{r7, pc}
20002634:	20003fd8 	ldrdcs	r3, [r0], -r8
20002638:	200037d8 	ldrdcs	r3, [r0], -r8
2000263c:	20004fd8 	ldrdcs	r4, [r0], -r8
20002640:	200047d8 	ldrdcs	r4, [r0], -r8
20002644:	20003bd8 	ldrdcs	r3, [r0], -r8
20002648:	200043d8 	ldrdcs	r4, [r0], -r8
2000264c:	20004bd8 	ldrdcs	r4, [r0], -r8
20002650:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20002654 <draw_game_object>:

void draw_game_object(GameObject *gObj) {
20002654:	b580      	push	{r7, lr}
20002656:	b086      	sub	sp, #24
20002658:	af02      	add	r7, sp, #8
2000265a:	6078      	str	r0, [r7, #4]
	int frame = gObj->current_frame;
2000265c:	687b      	ldr	r3, [r7, #4]
2000265e:	695b      	ldr	r3, [r3, #20]
20002660:	60fb      	str	r3, [r7, #12]
	draw_sprite(gObj->images[frame].blackImage, gObj->xPos, gObj->yPos, 1, 3);
20002662:	687b      	ldr	r3, [r7, #4]
20002664:	6819      	ldr	r1, [r3, #0]
20002666:	68fa      	ldr	r2, [r7, #12]
20002668:	0013      	movs	r3, r2
2000266a:	005b      	lsls	r3, r3, #1
2000266c:	189b      	adds	r3, r3, r2
2000266e:	009b      	lsls	r3, r3, #2
20002670:	18cb      	adds	r3, r1, r3
20002672:	6818      	ldr	r0, [r3, #0]
20002674:	687b      	ldr	r3, [r7, #4]
20002676:	6859      	ldr	r1, [r3, #4]
20002678:	687b      	ldr	r3, [r7, #4]
2000267a:	689a      	ldr	r2, [r3, #8]
2000267c:	2303      	movs	r3, #3
2000267e:	9300      	str	r3, [sp, #0]
20002680:	2301      	movs	r3, #1
20002682:	f7ff fdec 	bl	2000225e <draw_sprite>
	draw_sprite(gObj->images[frame].grayImage, gObj->xPos, gObj->yPos, 1, 2);
20002686:	687b      	ldr	r3, [r7, #4]
20002688:	6819      	ldr	r1, [r3, #0]
2000268a:	68fa      	ldr	r2, [r7, #12]
2000268c:	0013      	movs	r3, r2
2000268e:	005b      	lsls	r3, r3, #1
20002690:	189b      	adds	r3, r3, r2
20002692:	009b      	lsls	r3, r3, #2
20002694:	18cb      	adds	r3, r1, r3
20002696:	6858      	ldr	r0, [r3, #4]
20002698:	687b      	ldr	r3, [r7, #4]
2000269a:	6859      	ldr	r1, [r3, #4]
2000269c:	687b      	ldr	r3, [r7, #4]
2000269e:	689a      	ldr	r2, [r3, #8]
200026a0:	2302      	movs	r3, #2
200026a2:	9300      	str	r3, [sp, #0]
200026a4:	2301      	movs	r3, #1
200026a6:	f7ff fdda 	bl	2000225e <draw_sprite>
	draw_sprite(gObj->images[frame].lightImage, gObj->xPos, gObj->yPos, 1, 1);
200026aa:	687b      	ldr	r3, [r7, #4]
200026ac:	6819      	ldr	r1, [r3, #0]
200026ae:	68fa      	ldr	r2, [r7, #12]
200026b0:	0013      	movs	r3, r2
200026b2:	005b      	lsls	r3, r3, #1
200026b4:	189b      	adds	r3, r3, r2
200026b6:	009b      	lsls	r3, r3, #2
200026b8:	18cb      	adds	r3, r1, r3
200026ba:	6898      	ldr	r0, [r3, #8]
200026bc:	687b      	ldr	r3, [r7, #4]
200026be:	6859      	ldr	r1, [r3, #4]
200026c0:	687b      	ldr	r3, [r7, #4]
200026c2:	689a      	ldr	r2, [r3, #8]
200026c4:	2301      	movs	r3, #1
200026c6:	9300      	str	r3, [sp, #0]
200026c8:	2301      	movs	r3, #1
200026ca:	f7ff fdc8 	bl	2000225e <draw_sprite>
}
200026ce:	46c0      	nop			; (mov r8, r8)
200026d0:	46bd      	mov	sp, r7
200026d2:	b004      	add	sp, #16
200026d4:	bd80      	pop	{r7, pc}

200026d6 <show_frame>:


void show_frame(int frame_length) {
200026d6:	b580      	push	{r7, lr}
200026d8:	b082      	sub	sp, #8
200026da:	af00      	add	r7, sp, #0
200026dc:	6078      	str	r0, [r7, #4]
	set_up_draw_buffers();
200026de:	f7ff ff35 	bl	2000254c <set_up_draw_buffers>
	
	while(frame_length--) {
200026e2:	e01b      	b.n	2000271c <show_frame+0x46>
		graphic_draw_screen(draw_buffer_black_gray_light);
200026e4:	4b13      	ldr	r3, [pc, #76]	; (20002734 <show_frame+0x5e>)
200026e6:	0018      	movs	r0, r3
200026e8:	f7ff fd4e 	bl	20002188 <graphic_draw_screen>
		delay_milli(1);
200026ec:	2001      	movs	r0, #1
200026ee:	f7ff f95f 	bl	200019b0 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
200026f2:	4b11      	ldr	r3, [pc, #68]	; (20002738 <show_frame+0x62>)
200026f4:	0018      	movs	r0, r3
200026f6:	f7ff fd47 	bl	20002188 <graphic_draw_screen>
		delay_milli(1);
200026fa:	2001      	movs	r0, #1
200026fc:	f7ff f958 	bl	200019b0 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black_gray);
20002700:	4b0e      	ldr	r3, [pc, #56]	; (2000273c <show_frame+0x66>)
20002702:	0018      	movs	r0, r3
20002704:	f7ff fd40 	bl	20002188 <graphic_draw_screen>
		delay_milli(1);
20002708:	2001      	movs	r0, #1
2000270a:	f7ff f951 	bl	200019b0 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
2000270e:	4b0a      	ldr	r3, [pc, #40]	; (20002738 <show_frame+0x62>)
20002710:	0018      	movs	r0, r3
20002712:	f7ff fd39 	bl	20002188 <graphic_draw_screen>
		delay_milli(1);
20002716:	2001      	movs	r0, #1
20002718:	f7ff f94a 	bl	200019b0 <delay_milli>
	while(frame_length--) {
2000271c:	687b      	ldr	r3, [r7, #4]
2000271e:	1e5a      	subs	r2, r3, #1
20002720:	607a      	str	r2, [r7, #4]
20002722:	2b00      	cmp	r3, #0
20002724:	d1de      	bne.n	200026e4 <show_frame+0xe>
	}
	
	clear_all_backBuffers();	//Maybe we could be more effective by only clearing the necessary stuff,
20002726:	f7ff f97b 	bl	20001a20 <clear_all_backBuffers>
								//but let's keep it like this if it works.
2000272a:	46c0      	nop			; (mov r8, r8)
2000272c:	46bd      	mov	sp, r7
2000272e:	b002      	add	sp, #8
20002730:	bd80      	pop	{r7, pc}
20002732:	46c0      	nop			; (mov r8, r8)
20002734:	20004bd8 	ldrdcs	r4, [r0], -r8
20002738:	200047d8 	ldrdcs	r4, [r0], -r8
2000273c:	20003bd8 	ldrdcs	r3, [r0], -r8

20002740 <load_image>:
#include "image.h"

void load_image( Image *image, sprite *blackImage, sprite *grayImage, sprite *lightImage ) {
20002740:	b580      	push	{r7, lr}
20002742:	b084      	sub	sp, #16
20002744:	af00      	add	r7, sp, #0
20002746:	60f8      	str	r0, [r7, #12]
20002748:	60b9      	str	r1, [r7, #8]
2000274a:	607a      	str	r2, [r7, #4]
2000274c:	603b      	str	r3, [r7, #0]
	image->blackImage = blackImage;
2000274e:	68fb      	ldr	r3, [r7, #12]
20002750:	68ba      	ldr	r2, [r7, #8]
20002752:	601a      	str	r2, [r3, #0]
	image->grayImage = grayImage;
20002754:	68fb      	ldr	r3, [r7, #12]
20002756:	687a      	ldr	r2, [r7, #4]
20002758:	605a      	str	r2, [r3, #4]
	image->lightImage = lightImage;
2000275a:	68fb      	ldr	r3, [r7, #12]
2000275c:	683a      	ldr	r2, [r7, #0]
2000275e:	609a      	str	r2, [r3, #8]
}
20002760:	46c0      	nop			; (mov r8, r8)
20002762:	46bd      	mov	sp, r7
20002764:	b004      	add	sp, #16
20002766:	bd80      	pop	{r7, pc}

20002768 <load_sprite>:
#include "sprite.h"

void load_sprite(sprite* s, unsigned char* data, int width, int height)
{
20002768:	b580      	push	{r7, lr}
2000276a:	b084      	sub	sp, #16
2000276c:	af00      	add	r7, sp, #0
2000276e:	60f8      	str	r0, [r7, #12]
20002770:	60b9      	str	r1, [r7, #8]
20002772:	607a      	str	r2, [r7, #4]
20002774:	603b      	str	r3, [r7, #0]
	s->width = width;
20002776:	687a      	ldr	r2, [r7, #4]
20002778:	68fb      	ldr	r3, [r7, #12]
2000277a:	601a      	str	r2, [r3, #0]
	s->height = height;
2000277c:	683a      	ldr	r2, [r7, #0]
2000277e:	68fb      	ldr	r3, [r7, #12]
20002780:	605a      	str	r2, [r3, #4]
	s->data = data;
20002782:	68fb      	ldr	r3, [r7, #12]
20002784:	68ba      	ldr	r2, [r7, #8]
20002786:	609a      	str	r2, [r3, #8]
}
20002788:	46c0      	nop			; (mov r8, r8)
2000278a:	46bd      	mov	sp, r7
2000278c:	b004      	add	sp, #16
2000278e:	bd80      	pop	{r7, pc}

20002790 <set_up_DIL>:
#include "gpio.h"

/** Sets up PE0-7 as inports and PE8-15 as outports. */
void set_up_DIL( void ) {
20002790:	b580      	push	{r7, lr}
20002792:	af00      	add	r7, sp, #0
	GPIO_D.Moder = 0x55550000;
20002794:	4b02      	ldr	r3, [pc, #8]	; (200027a0 <set_up_DIL+0x10>)
20002796:	4a03      	ldr	r2, [pc, #12]	; (200027a4 <set_up_DIL+0x14>)
20002798:	601a      	str	r2, [r3, #0]
}
2000279a:	46c0      	nop			; (mov r8, r8)
2000279c:	46bd      	mov	sp, r7
2000279e:	bd80      	pop	{r7, pc}
200027a0:	40020c00 	andmi	r0, r2, r0, lsl #24
200027a4:	55550000 	ldrbpl	r0, [r5, #-0]

200027a8 <read_DIL>:

char read_DIL( void ) {
200027a8:	b580      	push	{r7, lr}
200027aa:	af00      	add	r7, sp, #0
	GPIO_D.odrHigh = GPIO_D.idrLow; //Show on bargraph
200027ac:	4b05      	ldr	r3, [pc, #20]	; (200027c4 <read_DIL+0x1c>)
200027ae:	4a05      	ldr	r2, [pc, #20]	; (200027c4 <read_DIL+0x1c>)
200027b0:	7c12      	ldrb	r2, [r2, #16]
200027b2:	b2d2      	uxtb	r2, r2
200027b4:	755a      	strb	r2, [r3, #21]
	return GPIO_D.idrLow;
200027b6:	4b03      	ldr	r3, [pc, #12]	; (200027c4 <read_DIL+0x1c>)
200027b8:	7c1b      	ldrb	r3, [r3, #16]
200027ba:	b2db      	uxtb	r3, r3
}
200027bc:	0018      	movs	r0, r3
200027be:	46bd      	mov	sp, r7
200027c0:	bd80      	pop	{r7, pc}
200027c2:	46c0      	nop			; (mov r8, r8)
200027c4:	40020c00 	andmi	r0, r2, r0, lsl #24

200027c8 <read_DIL_single>:


int read_DIL_single( int bit ) {
200027c8:	b590      	push	{r4, r7, lr}
200027ca:	b085      	sub	sp, #20
200027cc:	af00      	add	r7, sp, #0
200027ce:	6078      	str	r0, [r7, #4]
	char DIL = read_DIL();
200027d0:	230f      	movs	r3, #15
200027d2:	18fc      	adds	r4, r7, r3
200027d4:	f7ff ffe8 	bl	200027a8 <read_DIL>
200027d8:	0003      	movs	r3, r0
200027da:	7023      	strb	r3, [r4, #0]
	if (DIL & (1<<bit)) {
200027dc:	230f      	movs	r3, #15
200027de:	18fb      	adds	r3, r7, r3
200027e0:	781a      	ldrb	r2, [r3, #0]
200027e2:	687b      	ldr	r3, [r7, #4]
200027e4:	411a      	asrs	r2, r3
200027e6:	0013      	movs	r3, r2
200027e8:	2201      	movs	r2, #1
200027ea:	4013      	ands	r3, r2
200027ec:	d001      	beq.n	200027f2 <read_DIL_single+0x2a>
		return 1;
200027ee:	2301      	movs	r3, #1
200027f0:	e000      	b.n	200027f4 <read_DIL_single+0x2c>
	} else {
		return 0;
200027f2:	2300      	movs	r3, #0
	}
200027f4:	0018      	movs	r0, r3
200027f6:	46bd      	mov	sp, r7
200027f8:	b005      	add	sp, #20
200027fa:	bd90      	pop	{r4, r7, pc}

200027fc <ascii_ctrl_bit_set>:
void ascii_write_data(unsigned char data);
unsigned char ascii_read_status(void);
unsigned char ascii_read_data(void);


void ascii_ctrl_bit_set(unsigned char x){
200027fc:	b580      	push	{r7, lr}
200027fe:	b084      	sub	sp, #16
20002800:	af00      	add	r7, sp, #0
20002802:	0002      	movs	r2, r0
20002804:	1dfb      	adds	r3, r7, #7
20002806:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och ettstÃƒÂ¤ll de bitar som ÃƒÂ¤r 1 i x
	unsigned char c;
	c = *portOdrLow;
20002808:	4a0c      	ldr	r2, [pc, #48]	; (2000283c <ascii_ctrl_bit_set+0x40>)
2000280a:	230f      	movs	r3, #15
2000280c:	18fb      	adds	r3, r7, r3
2000280e:	7812      	ldrb	r2, [r2, #0]
20002810:	701a      	strb	r2, [r3, #0]
	c |= (B_SELECT | x);
20002812:	1dfa      	adds	r2, r7, #7
20002814:	230f      	movs	r3, #15
20002816:	18fb      	adds	r3, r7, r3
20002818:	7812      	ldrb	r2, [r2, #0]
2000281a:	781b      	ldrb	r3, [r3, #0]
2000281c:	4313      	orrs	r3, r2
2000281e:	b2da      	uxtb	r2, r3
20002820:	230f      	movs	r3, #15
20002822:	18fb      	adds	r3, r7, r3
20002824:	2104      	movs	r1, #4
20002826:	430a      	orrs	r2, r1
20002828:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
2000282a:	4a04      	ldr	r2, [pc, #16]	; (2000283c <ascii_ctrl_bit_set+0x40>)
2000282c:	230f      	movs	r3, #15
2000282e:	18fb      	adds	r3, r7, r3
20002830:	781b      	ldrb	r3, [r3, #0]
20002832:	7013      	strb	r3, [r2, #0]
}
20002834:	46c0      	nop			; (mov r8, r8)
20002836:	46bd      	mov	sp, r7
20002838:	b004      	add	sp, #16
2000283a:	bd80      	pop	{r7, pc}
2000283c:	40021014 	andmi	r1, r2, r4, lsl r0

20002840 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
20002840:	b580      	push	{r7, lr}
20002842:	b084      	sub	sp, #16
20002844:	af00      	add	r7, sp, #0
20002846:	0002      	movs	r2, r0
20002848:	1dfb      	adds	r3, r7, #7
2000284a:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och nollstÃ¤ll de bitar som Ã¤r 1 i x
	unsigned char c;
	c = *portOdrLow;
2000284c:	4a0f      	ldr	r2, [pc, #60]	; (2000288c <ascii_ctrl_bit_clear+0x4c>)
2000284e:	230f      	movs	r3, #15
20002850:	18fb      	adds	r3, r7, r3
20002852:	7812      	ldrb	r2, [r2, #0]
20002854:	701a      	strb	r2, [r3, #0]
	c = (B_SELECT | c & ~x);
20002856:	1dfb      	adds	r3, r7, #7
20002858:	781b      	ldrb	r3, [r3, #0]
2000285a:	b25b      	sxtb	r3, r3
2000285c:	43db      	mvns	r3, r3
2000285e:	b25b      	sxtb	r3, r3
20002860:	220f      	movs	r2, #15
20002862:	18ba      	adds	r2, r7, r2
20002864:	7812      	ldrb	r2, [r2, #0]
20002866:	b252      	sxtb	r2, r2
20002868:	4013      	ands	r3, r2
2000286a:	b25b      	sxtb	r3, r3
2000286c:	2204      	movs	r2, #4
2000286e:	4313      	orrs	r3, r2
20002870:	b25a      	sxtb	r2, r3
20002872:	230f      	movs	r3, #15
20002874:	18fb      	adds	r3, r7, r3
20002876:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20002878:	4a04      	ldr	r2, [pc, #16]	; (2000288c <ascii_ctrl_bit_clear+0x4c>)
2000287a:	230f      	movs	r3, #15
2000287c:	18fb      	adds	r3, r7, r3
2000287e:	781b      	ldrb	r3, [r3, #0]
20002880:	7013      	strb	r3, [r2, #0]
}
20002882:	46c0      	nop			; (mov r8, r8)
20002884:	46bd      	mov	sp, r7
20002886:	b004      	add	sp, #16
20002888:	bd80      	pop	{r7, pc}
2000288a:	46c0      	nop			; (mov r8, r8)
2000288c:	40021014 	andmi	r1, r2, r4, lsl r0

20002890 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20002890:	b580      	push	{r7, lr}
20002892:	b082      	sub	sp, #8
20002894:	af00      	add	r7, sp, #0
20002896:	0002      	movs	r2, r0
20002898:	1dfb      	adds	r3, r7, #7
2000289a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
2000289c:	2001      	movs	r0, #1
2000289e:	f7ff ffcf 	bl	20002840 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
200028a2:	2002      	movs	r0, #2
200028a4:	f7ff ffcc 	bl	20002840 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
200028a8:	1dfb      	adds	r3, r7, #7
200028aa:	781b      	ldrb	r3, [r3, #0]
200028ac:	0018      	movs	r0, r3
200028ae:	f000 f86d 	bl	2000298c <ascii_write_controller>
}
200028b2:	46c0      	nop			; (mov r8, r8)
200028b4:	46bd      	mov	sp, r7
200028b6:	b002      	add	sp, #8
200028b8:	bd80      	pop	{r7, pc}

200028ba <ascii_write_data>:

void ascii_write_data(unsigned char data){
200028ba:	b580      	push	{r7, lr}
200028bc:	b082      	sub	sp, #8
200028be:	af00      	add	r7, sp, #0
200028c0:	0002      	movs	r2, r0
200028c2:	1dfb      	adds	r3, r7, #7
200028c4:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
200028c6:	2001      	movs	r0, #1
200028c8:	f7ff ff98 	bl	200027fc <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
200028cc:	2002      	movs	r0, #2
200028ce:	f7ff ffb7 	bl	20002840 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
200028d2:	1dfb      	adds	r3, r7, #7
200028d4:	781b      	ldrb	r3, [r3, #0]
200028d6:	0018      	movs	r0, r3
200028d8:	f000 f858 	bl	2000298c <ascii_write_controller>
}
200028dc:	46c0      	nop			; (mov r8, r8)
200028de:	46bd      	mov	sp, r7
200028e0:	b002      	add	sp, #8
200028e2:	bd80      	pop	{r7, pc}

200028e4 <ascii_read_status>:

unsigned char ascii_read_status(void){
200028e4:	b590      	push	{r4, r7, lr}
200028e6:	b083      	sub	sp, #12
200028e8:	af00      	add	r7, sp, #0
	//sÃƒÂ¤tt Port E bit15-8 som ingÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
200028ea:	4b11      	ldr	r3, [pc, #68]	; (20002930 <ascii_read_status+0x4c>)
200028ec:	4a10      	ldr	r2, [pc, #64]	; (20002930 <ascii_read_status+0x4c>)
200028ee:	6812      	ldr	r2, [r2, #0]
200028f0:	0412      	lsls	r2, r2, #16
200028f2:	0c12      	lsrs	r2, r2, #16
200028f4:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
200028f6:	2001      	movs	r0, #1
200028f8:	f7ff ffa2 	bl	20002840 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
200028fc:	2002      	movs	r0, #2
200028fe:	f7ff ff7d 	bl	200027fc <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20002902:	1dfc      	adds	r4, r7, #7
20002904:	f000 f85a 	bl	200029bc <ascii_read_controller>
20002908:	0003      	movs	r3, r0
2000290a:	7023      	strb	r3, [r4, #0]
	//sÃƒÂ¤tt Port E bit15-8 som utgÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
2000290c:	4b08      	ldr	r3, [pc, #32]	; (20002930 <ascii_read_status+0x4c>)
2000290e:	4a08      	ldr	r2, [pc, #32]	; (20002930 <ascii_read_status+0x4c>)
20002910:	6812      	ldr	r2, [r2, #0]
20002912:	0412      	lsls	r2, r2, #16
20002914:	0c12      	lsrs	r2, r2, #16
20002916:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
20002918:	4b05      	ldr	r3, [pc, #20]	; (20002930 <ascii_read_status+0x4c>)
2000291a:	4a05      	ldr	r2, [pc, #20]	; (20002930 <ascii_read_status+0x4c>)
2000291c:	6812      	ldr	r2, [r2, #0]
2000291e:	4905      	ldr	r1, [pc, #20]	; (20002934 <ascii_read_status+0x50>)
20002920:	430a      	orrs	r2, r1
20002922:	601a      	str	r2, [r3, #0]
	return rv;
20002924:	1dfb      	adds	r3, r7, #7
20002926:	781b      	ldrb	r3, [r3, #0]
}
20002928:	0018      	movs	r0, r3
2000292a:	46bd      	mov	sp, r7
2000292c:	b003      	add	sp, #12
2000292e:	bd90      	pop	{r4, r7, pc}
20002930:	40021000 	andmi	r1, r2, r0
20002934:	55550000 	ldrbpl	r0, [r5, #-0]

20002938 <ascii_read_data>:

unsigned char ascii_read_data(void){
20002938:	b590      	push	{r4, r7, lr}
2000293a:	b083      	sub	sp, #12
2000293c:	af00      	add	r7, sp, #0
	//sÃƒÂ¤tt Port E bit15-8 som ingÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
2000293e:	4b11      	ldr	r3, [pc, #68]	; (20002984 <ascii_read_data+0x4c>)
20002940:	4a10      	ldr	r2, [pc, #64]	; (20002984 <ascii_read_data+0x4c>)
20002942:	6812      	ldr	r2, [r2, #0]
20002944:	0412      	lsls	r2, r2, #16
20002946:	0c12      	lsrs	r2, r2, #16
20002948:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
2000294a:	2001      	movs	r0, #1
2000294c:	f7ff ff56 	bl	200027fc <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20002950:	2002      	movs	r0, #2
20002952:	f7ff ff53 	bl	200027fc <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20002956:	1dfc      	adds	r4, r7, #7
20002958:	f000 f830 	bl	200029bc <ascii_read_controller>
2000295c:	0003      	movs	r3, r0
2000295e:	7023      	strb	r3, [r4, #0]
	//sÃƒÂ¤tt Port E bit15-8 som utgÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20002960:	4b08      	ldr	r3, [pc, #32]	; (20002984 <ascii_read_data+0x4c>)
20002962:	4a08      	ldr	r2, [pc, #32]	; (20002984 <ascii_read_data+0x4c>)
20002964:	6812      	ldr	r2, [r2, #0]
20002966:	0412      	lsls	r2, r2, #16
20002968:	0c12      	lsrs	r2, r2, #16
2000296a:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
2000296c:	4b05      	ldr	r3, [pc, #20]	; (20002984 <ascii_read_data+0x4c>)
2000296e:	4a05      	ldr	r2, [pc, #20]	; (20002984 <ascii_read_data+0x4c>)
20002970:	6812      	ldr	r2, [r2, #0]
20002972:	4905      	ldr	r1, [pc, #20]	; (20002988 <ascii_read_data+0x50>)
20002974:	430a      	orrs	r2, r1
20002976:	601a      	str	r2, [r3, #0]
	return rv;
20002978:	1dfb      	adds	r3, r7, #7
2000297a:	781b      	ldrb	r3, [r3, #0]
}
2000297c:	0018      	movs	r0, r3
2000297e:	46bd      	mov	sp, r7
20002980:	b003      	add	sp, #12
20002982:	bd90      	pop	{r4, r7, pc}
20002984:	40021000 	andmi	r1, r2, r0
20002988:	55550000 	ldrbpl	r0, [r5, #-0]

2000298c <ascii_write_controller>:

void ascii_write_controller(unsigned char c){
2000298c:	b580      	push	{r7, lr}
2000298e:	b082      	sub	sp, #8
20002990:	af00      	add	r7, sp, #0
20002992:	0002      	movs	r2, r0
20002994:	1dfb      	adds	r3, r7, #7
20002996:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
20002998:	2040      	movs	r0, #64	; 0x40
2000299a:	f7ff ff2f 	bl	200027fc <ascii_ctrl_bit_set>
	*portOdrHigh = c;
2000299e:	4a06      	ldr	r2, [pc, #24]	; (200029b8 <ascii_write_controller+0x2c>)
200029a0:	1dfb      	adds	r3, r7, #7
200029a2:	781b      	ldrb	r3, [r3, #0]
200029a4:	7013      	strb	r3, [r2, #0]
	delay_250ns();
200029a6:	f7fe ffa9 	bl	200018fc <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
200029aa:	2040      	movs	r0, #64	; 0x40
200029ac:	f7ff ff48 	bl	20002840 <ascii_ctrl_bit_clear>
}
200029b0:	46c0      	nop			; (mov r8, r8)
200029b2:	46bd      	mov	sp, r7
200029b4:	b002      	add	sp, #8
200029b6:	bd80      	pop	{r7, pc}
200029b8:	40021015 	andmi	r1, r2, r5, lsl r0

200029bc <ascii_read_controller>:

unsigned char ascii_read_controller(void){
200029bc:	b580      	push	{r7, lr}
200029be:	b082      	sub	sp, #8
200029c0:	af00      	add	r7, sp, #0
	unsigned char c;
	ascii_ctrl_bit_set(B_E);
200029c2:	2040      	movs	r0, #64	; 0x40
200029c4:	f7ff ff1a 	bl	200027fc <ascii_ctrl_bit_set>
	delay_250ns();
200029c8:	f7fe ff98 	bl	200018fc <delay_250ns>
	delay_250ns();
200029cc:	f7fe ff96 	bl	200018fc <delay_250ns>
	c = *portIdrHigh;
200029d0:	4a06      	ldr	r2, [pc, #24]	; (200029ec <ascii_read_controller+0x30>)
200029d2:	1dfb      	adds	r3, r7, #7
200029d4:	7812      	ldrb	r2, [r2, #0]
200029d6:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
200029d8:	2040      	movs	r0, #64	; 0x40
200029da:	f7ff ff31 	bl	20002840 <ascii_ctrl_bit_clear>
	return c;
200029de:	1dfb      	adds	r3, r7, #7
200029e0:	781b      	ldrb	r3, [r3, #0]
}
200029e2:	0018      	movs	r0, r3
200029e4:	46bd      	mov	sp, r7
200029e6:	b002      	add	sp, #8
200029e8:	bd80      	pop	{r7, pc}
200029ea:	46c0      	nop			; (mov r8, r8)
200029ec:	40021011 	andmi	r1, r2, r1, lsl r0

200029f0 <ascii_write_char>:

void ascii_write_char(unsigned char c){
200029f0:	b580      	push	{r7, lr}
200029f2:	b082      	sub	sp, #8
200029f4:	af00      	add	r7, sp, #0
200029f6:	0002      	movs	r2, r0
200029f8:	1dfb      	adds	r3, r7, #7
200029fa:	701a      	strb	r2, [r3, #0]
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
200029fc:	46c0      	nop			; (mov r8, r8)
200029fe:	f7ff ff71 	bl	200028e4 <ascii_read_status>
20002a02:	0003      	movs	r3, r0
20002a04:	001a      	movs	r2, r3
20002a06:	2380      	movs	r3, #128	; 0x80
20002a08:	4013      	ands	r3, r2
20002a0a:	2b80      	cmp	r3, #128	; 0x80
20002a0c:	d0f7      	beq.n	200029fe <ascii_write_char+0xe>
		delay_micro(8); //latenstid
20002a0e:	2008      	movs	r0, #8
20002a10:	f7fe ffb8 	bl	20001984 <delay_micro>
		ascii_write_data(c);
20002a14:	1dfb      	adds	r3, r7, #7
20002a16:	781b      	ldrb	r3, [r3, #0]
20002a18:	0018      	movs	r0, r3
20002a1a:	f7ff ff4e 	bl	200028ba <ascii_write_data>
		delay_micro(50); //istÃƒÂ¤llet fÃƒÂ¶r 43us
20002a1e:	2032      	movs	r0, #50	; 0x32
20002a20:	f7fe ffb0 	bl	20001984 <delay_micro>
}
20002a24:	46c0      	nop			; (mov r8, r8)
20002a26:	46bd      	mov	sp, r7
20002a28:	b002      	add	sp, #8
20002a2a:	bd80      	pop	{r7, pc}

20002a2c <ascii_goToXY>:

void ascii_goToXY(unsigned char row, unsigned char column){
20002a2c:	b580      	push	{r7, lr}
20002a2e:	b084      	sub	sp, #16
20002a30:	af00      	add	r7, sp, #0
20002a32:	0002      	movs	r2, r0
20002a34:	1dfb      	adds	r3, r7, #7
20002a36:	701a      	strb	r2, [r3, #0]
20002a38:	1dbb      	adds	r3, r7, #6
20002a3a:	1c0a      	adds	r2, r1, #0
20002a3c:	701a      	strb	r2, [r3, #0]
	unsigned char address = row-1;
20002a3e:	230f      	movs	r3, #15
20002a40:	18fb      	adds	r3, r7, r3
20002a42:	1dfa      	adds	r2, r7, #7
20002a44:	7812      	ldrb	r2, [r2, #0]
20002a46:	3a01      	subs	r2, #1
20002a48:	701a      	strb	r2, [r3, #0]
	if(column == 2){
20002a4a:	1dbb      	adds	r3, r7, #6
20002a4c:	781b      	ldrb	r3, [r3, #0]
20002a4e:	2b02      	cmp	r3, #2
20002a50:	d106      	bne.n	20002a60 <ascii_goToXY+0x34>
		address += 0x40;
20002a52:	230f      	movs	r3, #15
20002a54:	18fb      	adds	r3, r7, r3
20002a56:	220f      	movs	r2, #15
20002a58:	18ba      	adds	r2, r7, r2
20002a5a:	7812      	ldrb	r2, [r2, #0]
20002a5c:	3240      	adds	r2, #64	; 0x40
20002a5e:	701a      	strb	r2, [r3, #0]
	}
	ascii_write_cmd(0x80 | address);
20002a60:	230f      	movs	r3, #15
20002a62:	18fb      	adds	r3, r7, r3
20002a64:	781b      	ldrb	r3, [r3, #0]
20002a66:	2280      	movs	r2, #128	; 0x80
20002a68:	4252      	negs	r2, r2
20002a6a:	4313      	orrs	r3, r2
20002a6c:	b2db      	uxtb	r3, r3
20002a6e:	0018      	movs	r0, r3
20002a70:	f7ff ff0e 	bl	20002890 <ascii_write_cmd>
}
20002a74:	46c0      	nop			; (mov r8, r8)
20002a76:	46bd      	mov	sp, r7
20002a78:	b004      	add	sp, #16
20002a7a:	bd80      	pop	{r7, pc}

20002a7c <ascii_init>:

void ascii_init(void){
20002a7c:	b580      	push	{r7, lr}
20002a7e:	af00      	add	r7, sp, #0
	//initiera displayen:
		while((ascii_read_status() & 0x80) == 0x80){} //VÃ¤nta tills displayed Ã¤r redo
20002a80:	46c0      	nop			; (mov r8, r8)
20002a82:	f7ff ff2f 	bl	200028e4 <ascii_read_status>
20002a86:	0003      	movs	r3, r0
20002a88:	001a      	movs	r2, r3
20002a8a:	2380      	movs	r3, #128	; 0x80
20002a8c:	4013      	ands	r3, r2
20002a8e:	2b80      	cmp	r3, #128	; 0x80
20002a90:	d0f7      	beq.n	20002a82 <ascii_init+0x6>
		delay_micro(20); //latenstid 
20002a92:	2014      	movs	r0, #20
20002a94:	f7fe ff76 	bl	20001984 <delay_micro>
		ascii_write_cmd(0x38); //Function set (39us), 000011NFXX, N = antal rader = 2, F = -->0=5x8<--, 1=5x11
20002a98:	2038      	movs	r0, #56	; 0x38
20002a9a:	f7ff fef9 	bl	20002890 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20002a9e:	2064      	movs	r0, #100	; 0x64
20002aa0:	f7fe ff70 	bl	20001984 <delay_micro>
		
	// clear display
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20002aa4:	46c0      	nop			; (mov r8, r8)
20002aa6:	f7ff ff1d 	bl	200028e4 <ascii_read_status>
20002aaa:	0003      	movs	r3, r0
20002aac:	001a      	movs	r2, r3
20002aae:	2380      	movs	r3, #128	; 0x80
20002ab0:	4013      	ands	r3, r2
20002ab2:	2b80      	cmp	r3, #128	; 0x80
20002ab4:	d0f7      	beq.n	20002aa6 <ascii_init+0x2a>
		delay_micro(20); //latenstid
20002ab6:	2014      	movs	r0, #20
20002ab8:	f7fe ff64 	bl	20001984 <delay_micro>
		ascii_write_cmd(0x01); 
20002abc:	2001      	movs	r0, #1
20002abe:	f7ff fee7 	bl	20002890 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20002ac2:	2064      	movs	r0, #100	; 0x64
20002ac4:	f7fe ff5e 	bl	20001984 <delay_micro>

	//display control:
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20002ac8:	46c0      	nop			; (mov r8, r8)
20002aca:	f7ff ff0b 	bl	200028e4 <ascii_read_status>
20002ace:	0003      	movs	r3, r0
20002ad0:	001a      	movs	r2, r3
20002ad2:	2380      	movs	r3, #128	; 0x80
20002ad4:	4013      	ands	r3, r2
20002ad6:	2b80      	cmp	r3, #128	; 0x80
20002ad8:	d0f7      	beq.n	20002aca <ascii_init+0x4e>
		delay_micro(20); //latenstid
20002ada:	2014      	movs	r0, #20
20002adc:	f7fe ff52 	bl	20001984 <delay_micro>
		ascii_write_cmd(0x0C); //000001 + XXX. X:ena = 0:av / 1:pÃƒÂ¥ -  SkÃƒÂ¤rm/MarkÃƒÂ¶r/BlinkaMarkÃƒÂ¶ren
20002ae0:	200c      	movs	r0, #12
20002ae2:	f7ff fed5 	bl	20002890 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20002ae6:	2064      	movs	r0, #100	; 0x64
20002ae8:	f7fe ff4c 	bl	20001984 <delay_micro>
		
	// entry mode set
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20002aec:	46c0      	nop			; (mov r8, r8)
20002aee:	f7ff fef9 	bl	200028e4 <ascii_read_status>
20002af2:	0003      	movs	r3, r0
20002af4:	001a      	movs	r2, r3
20002af6:	2380      	movs	r3, #128	; 0x80
20002af8:	4013      	ands	r3, r2
20002afa:	2b80      	cmp	r3, #128	; 0x80
20002afc:	d0f7      	beq.n	20002aee <ascii_init+0x72>
		delay_micro(20); //latenstid
20002afe:	2014      	movs	r0, #20
20002b00:	f7fe ff40 	bl	20001984 <delay_micro>
		ascii_write_cmd(0x06); //00000001 + XY. X=0: markÃƒÂ¶ren vÃƒÂ¤nst. || X=1: marÃƒÂ¶kren hÃƒÂ¶g. - Y=0: skift av || Y=1: skift pÃƒÂ¥
20002b04:	2006      	movs	r0, #6
20002b06:	f7ff fec3 	bl	20002890 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20002b0a:	2064      	movs	r0, #100	; 0x64
20002b0c:	f7fe ff3a 	bl	20001984 <delay_micro>
		
		
}
20002b10:	46c0      	nop			; (mov r8, r8)
20002b12:	46bd      	mov	sp, r7
20002b14:	bd80      	pop	{r7, pc}

20002b16 <init_application>:

void init_application(void){
20002b16:	b580      	push	{r7, lr}
20002b18:	af00      	add	r7, sp, #0
	#ifdef USBDM
		*((unsigned long *) 0x40023830) = 0x18; //startar klockor pÃ¥ port D och E
		//__asm volatile ("LDR R0, =0x08000209\n BLX R0 \n"); //initiera PLL
	#endif
	//"initierar Port E med anvÃƒÂ¤ndning med LCD-modulen, dvs. sÃƒÂ¥vÃƒÂ¤l port E0-7 som E8-15 sÃƒÂ¤tts till utgÃƒÂ¥ngar
	* portModer = 0x55555555;
20002b1a:	4b03      	ldr	r3, [pc, #12]	; (20002b28 <init_application+0x12>)
20002b1c:	4a03      	ldr	r2, [pc, #12]	; (20002b2c <init_application+0x16>)
20002b1e:	601a      	str	r2, [r3, #0]
}
20002b20:	46c0      	nop			; (mov r8, r8)
20002b22:	46bd      	mov	sp, r7
20002b24:	bd80      	pop	{r7, pc}
20002b26:	46c0      	nop			; (mov r8, r8)
20002b28:	40021000 	andmi	r1, r2, r0
20002b2c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20002b30 <set_up_ascii>:

void set_up_ascii( void ) {
20002b30:	b580      	push	{r7, lr}
20002b32:	af00      	add	r7, sp, #0
	init_application();
20002b34:	f7ff ffef 	bl	20002b16 <init_application>
	ascii_init();
20002b38:	f7ff ffa0 	bl	20002a7c <ascii_init>
}
20002b3c:	46c0      	nop			; (mov r8, r8)
20002b3e:	46bd      	mov	sp, r7
20002b40:	bd80      	pop	{r7, pc}

20002b42 <clear_ascii>:

void clear_ascii( void ) {
20002b42:	b590      	push	{r4, r7, lr}
20002b44:	b089      	sub	sp, #36	; 0x24
20002b46:	af00      	add	r7, sp, #0
	char *s;
	char clear[] = "                    ";
20002b48:	1d3b      	adds	r3, r7, #4
20002b4a:	4a17      	ldr	r2, [pc, #92]	; (20002ba8 <clear_ascii+0x66>)
20002b4c:	ca13      	ldmia	r2!, {r0, r1, r4}
20002b4e:	c313      	stmia	r3!, {r0, r1, r4}
20002b50:	ca03      	ldmia	r2!, {r0, r1}
20002b52:	c303      	stmia	r3!, {r0, r1}
20002b54:	7812      	ldrb	r2, [r2, #0]
20002b56:	701a      	strb	r2, [r3, #0]
	
	s = clear;
20002b58:	1d3b      	adds	r3, r7, #4
20002b5a:	61fb      	str	r3, [r7, #28]
	ascii_goToXY(1,1);
20002b5c:	2101      	movs	r1, #1
20002b5e:	2001      	movs	r0, #1
20002b60:	f7ff ff64 	bl	20002a2c <ascii_goToXY>
	while(*s){
20002b64:	e006      	b.n	20002b74 <clear_ascii+0x32>
		ascii_write_char(*s++);
20002b66:	69fb      	ldr	r3, [r7, #28]
20002b68:	1c5a      	adds	r2, r3, #1
20002b6a:	61fa      	str	r2, [r7, #28]
20002b6c:	781b      	ldrb	r3, [r3, #0]
20002b6e:	0018      	movs	r0, r3
20002b70:	f7ff ff3e 	bl	200029f0 <ascii_write_char>
	while(*s){
20002b74:	69fb      	ldr	r3, [r7, #28]
20002b76:	781b      	ldrb	r3, [r3, #0]
20002b78:	2b00      	cmp	r3, #0
20002b7a:	d1f4      	bne.n	20002b66 <clear_ascii+0x24>
	}
	s = clear;
20002b7c:	1d3b      	adds	r3, r7, #4
20002b7e:	61fb      	str	r3, [r7, #28]
	ascii_goToXY(1,2);
20002b80:	2102      	movs	r1, #2
20002b82:	2001      	movs	r0, #1
20002b84:	f7ff ff52 	bl	20002a2c <ascii_goToXY>
	while(*s){
20002b88:	e006      	b.n	20002b98 <clear_ascii+0x56>
		ascii_write_char(*s++);
20002b8a:	69fb      	ldr	r3, [r7, #28]
20002b8c:	1c5a      	adds	r2, r3, #1
20002b8e:	61fa      	str	r2, [r7, #28]
20002b90:	781b      	ldrb	r3, [r3, #0]
20002b92:	0018      	movs	r0, r3
20002b94:	f7ff ff2c 	bl	200029f0 <ascii_write_char>
	while(*s){
20002b98:	69fb      	ldr	r3, [r7, #28]
20002b9a:	781b      	ldrb	r3, [r3, #0]
20002b9c:	2b00      	cmp	r3, #0
20002b9e:	d1f4      	bne.n	20002b8a <clear_ascii+0x48>
	}
}
20002ba0:	46c0      	nop			; (mov r8, r8)
20002ba2:	46bd      	mov	sp, r7
20002ba4:	b009      	add	sp, #36	; 0x24
20002ba6:	bd90      	pop	{r4, r7, pc}
20002ba8:	20008dfc 	strdcs	r8, [r0], -ip

20002bac <ascii_write>:

void ascii_write(char *row1, char *row2) {
20002bac:	b580      	push	{r7, lr}
20002bae:	b082      	sub	sp, #8
20002bb0:	af00      	add	r7, sp, #0
20002bb2:	6078      	str	r0, [r7, #4]
20002bb4:	6039      	str	r1, [r7, #0]
	clear_ascii();
20002bb6:	f7ff ffc4 	bl	20002b42 <clear_ascii>
	
	ascii_goToXY(1,1);
20002bba:	2101      	movs	r1, #1
20002bbc:	2001      	movs	r0, #1
20002bbe:	f7ff ff35 	bl	20002a2c <ascii_goToXY>
	while(*row1){
20002bc2:	e006      	b.n	20002bd2 <ascii_write+0x26>
		ascii_write_char(*row1++);
20002bc4:	687b      	ldr	r3, [r7, #4]
20002bc6:	1c5a      	adds	r2, r3, #1
20002bc8:	607a      	str	r2, [r7, #4]
20002bca:	781b      	ldrb	r3, [r3, #0]
20002bcc:	0018      	movs	r0, r3
20002bce:	f7ff ff0f 	bl	200029f0 <ascii_write_char>
	while(*row1){
20002bd2:	687b      	ldr	r3, [r7, #4]
20002bd4:	781b      	ldrb	r3, [r3, #0]
20002bd6:	2b00      	cmp	r3, #0
20002bd8:	d1f4      	bne.n	20002bc4 <ascii_write+0x18>
	}	
	ascii_goToXY(1,2);
20002bda:	2102      	movs	r1, #2
20002bdc:	2001      	movs	r0, #1
20002bde:	f7ff ff25 	bl	20002a2c <ascii_goToXY>
	while(*row2){
20002be2:	e006      	b.n	20002bf2 <ascii_write+0x46>
		ascii_write_char(*row2++);
20002be4:	683b      	ldr	r3, [r7, #0]
20002be6:	1c5a      	adds	r2, r3, #1
20002be8:	603a      	str	r2, [r7, #0]
20002bea:	781b      	ldrb	r3, [r3, #0]
20002bec:	0018      	movs	r0, r3
20002bee:	f7ff feff 	bl	200029f0 <ascii_write_char>
	while(*row2){
20002bf2:	683b      	ldr	r3, [r7, #0]
20002bf4:	781b      	ldrb	r3, [r3, #0]
20002bf6:	2b00      	cmp	r3, #0
20002bf8:	d1f4      	bne.n	20002be4 <ascii_write+0x38>
	}
	
	ascii_goToXY(21,1);
20002bfa:	2101      	movs	r1, #1
20002bfc:	2015      	movs	r0, #21
20002bfe:	f7ff ff15 	bl	20002a2c <ascii_goToXY>
}
20002c02:	46c0      	nop			; (mov r8, r8)
20002c04:	46bd      	mov	sp, r7
20002c06:	b002      	add	sp, #8
20002c08:	bd80      	pop	{r7, pc}

20002c0a <ascii_write_part>:

void ascii_write_part(char *row1, char *row2, int limit1, int limit2) {
20002c0a:	b580      	push	{r7, lr}
20002c0c:	b086      	sub	sp, #24
20002c0e:	af00      	add	r7, sp, #0
20002c10:	60f8      	str	r0, [r7, #12]
20002c12:	60b9      	str	r1, [r7, #8]
20002c14:	607a      	str	r2, [r7, #4]
20002c16:	603b      	str	r3, [r7, #0]
	clear_ascii();
20002c18:	f7ff ff93 	bl	20002b42 <clear_ascii>
	
	ascii_goToXY(1,1);
20002c1c:	2101      	movs	r1, #1
20002c1e:	2001      	movs	r0, #1
20002c20:	f7ff ff04 	bl	20002a2c <ascii_goToXY>
	int i = 0;
20002c24:	2300      	movs	r3, #0
20002c26:	617b      	str	r3, [r7, #20]
	if(limit1 > 0) {
20002c28:	687b      	ldr	r3, [r7, #4]
20002c2a:	2b00      	cmp	r3, #0
20002c2c:	dd11      	ble.n	20002c52 <ascii_write_part+0x48>
		while(*row1 && (i++ < limit1)){
20002c2e:	e006      	b.n	20002c3e <ascii_write_part+0x34>
			ascii_write_char(*row1++);
20002c30:	68fb      	ldr	r3, [r7, #12]
20002c32:	1c5a      	adds	r2, r3, #1
20002c34:	60fa      	str	r2, [r7, #12]
20002c36:	781b      	ldrb	r3, [r3, #0]
20002c38:	0018      	movs	r0, r3
20002c3a:	f7ff fed9 	bl	200029f0 <ascii_write_char>
		while(*row1 && (i++ < limit1)){
20002c3e:	68fb      	ldr	r3, [r7, #12]
20002c40:	781b      	ldrb	r3, [r3, #0]
20002c42:	2b00      	cmp	r3, #0
20002c44:	d005      	beq.n	20002c52 <ascii_write_part+0x48>
20002c46:	697b      	ldr	r3, [r7, #20]
20002c48:	1c5a      	adds	r2, r3, #1
20002c4a:	617a      	str	r2, [r7, #20]
20002c4c:	687a      	ldr	r2, [r7, #4]
20002c4e:	4293      	cmp	r3, r2
20002c50:	dbee      	blt.n	20002c30 <ascii_write_part+0x26>
		}			
	}

	ascii_goToXY(1,2);
20002c52:	2102      	movs	r1, #2
20002c54:	2001      	movs	r0, #1
20002c56:	f7ff fee9 	bl	20002a2c <ascii_goToXY>
	i = 0;
20002c5a:	2300      	movs	r3, #0
20002c5c:	617b      	str	r3, [r7, #20]
	if(limit2 > 0) {
20002c5e:	683b      	ldr	r3, [r7, #0]
20002c60:	2b00      	cmp	r3, #0
20002c62:	dd11      	ble.n	20002c88 <ascii_write_part+0x7e>
		while(*row2 && (i++ < limit2)){
20002c64:	e006      	b.n	20002c74 <ascii_write_part+0x6a>
			ascii_write_char(*row2++);
20002c66:	68bb      	ldr	r3, [r7, #8]
20002c68:	1c5a      	adds	r2, r3, #1
20002c6a:	60ba      	str	r2, [r7, #8]
20002c6c:	781b      	ldrb	r3, [r3, #0]
20002c6e:	0018      	movs	r0, r3
20002c70:	f7ff febe 	bl	200029f0 <ascii_write_char>
		while(*row2 && (i++ < limit2)){
20002c74:	68bb      	ldr	r3, [r7, #8]
20002c76:	781b      	ldrb	r3, [r3, #0]
20002c78:	2b00      	cmp	r3, #0
20002c7a:	d005      	beq.n	20002c88 <ascii_write_part+0x7e>
20002c7c:	697b      	ldr	r3, [r7, #20]
20002c7e:	1c5a      	adds	r2, r3, #1
20002c80:	617a      	str	r2, [r7, #20]
20002c82:	683a      	ldr	r2, [r7, #0]
20002c84:	4293      	cmp	r3, r2
20002c86:	dbee      	blt.n	20002c66 <ascii_write_part+0x5c>
		}
	}
	
	ascii_goToXY(21,1);
20002c88:	2101      	movs	r1, #1
20002c8a:	2015      	movs	r0, #21
20002c8c:	f7ff fece 	bl	20002a2c <ascii_goToXY>
}
20002c90:	46c0      	nop			; (mov r8, r8)
20002c92:	46bd      	mov	sp, r7
20002c94:	b006      	add	sp, #24
20002c96:	bd80      	pop	{r7, pc}

20002c98 <ascii_test>:



void ascii_test(void) {
20002c98:	b590      	push	{r4, r7, lr}
20002c9a:	b08b      	sub	sp, #44	; 0x2c
20002c9c:	af00      	add	r7, sp, #0
	char *s;
	char test1[] = "Alfanumerisk";
20002c9e:	2314      	movs	r3, #20
20002ca0:	18fb      	adds	r3, r7, r3
20002ca2:	4a1c      	ldr	r2, [pc, #112]	; (20002d14 <ascii_test+0x7c>)
20002ca4:	ca13      	ldmia	r2!, {r0, r1, r4}
20002ca6:	c313      	stmia	r3!, {r0, r1, r4}
20002ca8:	7812      	ldrb	r2, [r2, #0]
20002caa:	701a      	strb	r2, [r3, #0]
	char test2[] = "hardåäöare suger";
20002cac:	003b      	movs	r3, r7
20002cae:	4a1a      	ldr	r2, [pc, #104]	; (20002d18 <ascii_test+0x80>)
20002cb0:	ca13      	ldmia	r2!, {r0, r1, r4}
20002cb2:	c313      	stmia	r3!, {r0, r1, r4}
20002cb4:	ca03      	ldmia	r2!, {r0, r1}
20002cb6:	c303      	stmia	r3!, {r0, r1}
	
	init_application();
20002cb8:	f7ff ff2d 	bl	20002b16 <init_application>
	ascii_init();
20002cbc:	f7ff fede 	bl	20002a7c <ascii_init>
	ascii_goToXY(1,1);
20002cc0:	2101      	movs	r1, #1
20002cc2:	2001      	movs	r0, #1
20002cc4:	f7ff feb2 	bl	20002a2c <ascii_goToXY>
	s = test1;
20002cc8:	2314      	movs	r3, #20
20002cca:	18fb      	adds	r3, r7, r3
20002ccc:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
20002cce:	e006      	b.n	20002cde <ascii_test+0x46>
		ascii_write_char(*s++);
20002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002cd2:	1c5a      	adds	r2, r3, #1
20002cd4:	627a      	str	r2, [r7, #36]	; 0x24
20002cd6:	781b      	ldrb	r3, [r3, #0]
20002cd8:	0018      	movs	r0, r3
20002cda:	f7ff fe89 	bl	200029f0 <ascii_write_char>
	while(*s){
20002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002ce0:	781b      	ldrb	r3, [r3, #0]
20002ce2:	2b00      	cmp	r3, #0
20002ce4:	d1f4      	bne.n	20002cd0 <ascii_test+0x38>
	}
	ascii_goToXY(1,2);
20002ce6:	2102      	movs	r1, #2
20002ce8:	2001      	movs	r0, #1
20002cea:	f7ff fe9f 	bl	20002a2c <ascii_goToXY>
	s = test2;
20002cee:	003b      	movs	r3, r7
20002cf0:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
20002cf2:	e006      	b.n	20002d02 <ascii_test+0x6a>
		ascii_write_char(*s++);
20002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002cf6:	1c5a      	adds	r2, r3, #1
20002cf8:	627a      	str	r2, [r7, #36]	; 0x24
20002cfa:	781b      	ldrb	r3, [r3, #0]
20002cfc:	0018      	movs	r0, r3
20002cfe:	f7ff fe77 	bl	200029f0 <ascii_write_char>
	while(*s){
20002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002d04:	781b      	ldrb	r3, [r3, #0]
20002d06:	2b00      	cmp	r3, #0
20002d08:	d1f4      	bne.n	20002cf4 <ascii_test+0x5c>
	}
	return 0;
20002d0a:	46c0      	nop			; (mov r8, r8)
20002d0c:	46bd      	mov	sp, r7
20002d0e:	b00b      	add	sp, #44	; 0x2c
20002d10:	bd90      	pop	{r4, r7, pc}
20002d12:	46c0      	nop			; (mov r8, r8)
20002d14:	20008e14 	andcs	r8, r0, r4, lsl lr
20002d18:	20008e24 	andcs	r8, r0, r4, lsr #28

20002d1c <display>:
#include "slow_text.h"
#include "ascii_display.h"

void display(SlowText *this, int length_of_row1) {
20002d1c:	b580      	push	{r7, lr}
20002d1e:	b084      	sub	sp, #16
20002d20:	af00      	add	r7, sp, #0
20002d22:	6078      	str	r0, [r7, #4]
20002d24:	6039      	str	r1, [r7, #0]
	int limit1 = this->counter / this->speed;
20002d26:	687b      	ldr	r3, [r7, #4]
20002d28:	689a      	ldr	r2, [r3, #8]
20002d2a:	687b      	ldr	r3, [r7, #4]
20002d2c:	68db      	ldr	r3, [r3, #12]
20002d2e:	0019      	movs	r1, r3
20002d30:	0010      	movs	r0, r2
20002d32:	f000 f925 	bl	20002f80 <__divsi3>
20002d36:	0003      	movs	r3, r0
20002d38:	60fb      	str	r3, [r7, #12]
	int limit2 = this->counter / this->speed - length_of_row1;
20002d3a:	687b      	ldr	r3, [r7, #4]
20002d3c:	689a      	ldr	r2, [r3, #8]
20002d3e:	687b      	ldr	r3, [r7, #4]
20002d40:	68db      	ldr	r3, [r3, #12]
20002d42:	0019      	movs	r1, r3
20002d44:	0010      	movs	r0, r2
20002d46:	f000 f91b 	bl	20002f80 <__divsi3>
20002d4a:	0003      	movs	r3, r0
20002d4c:	001a      	movs	r2, r3
20002d4e:	683b      	ldr	r3, [r7, #0]
20002d50:	1ad3      	subs	r3, r2, r3
20002d52:	60bb      	str	r3, [r7, #8]
	ascii_write_part(this->row1, this->row2, limit1, limit2);
20002d54:	687b      	ldr	r3, [r7, #4]
20002d56:	6818      	ldr	r0, [r3, #0]
20002d58:	687b      	ldr	r3, [r7, #4]
20002d5a:	6859      	ldr	r1, [r3, #4]
20002d5c:	68bb      	ldr	r3, [r7, #8]
20002d5e:	68fa      	ldr	r2, [r7, #12]
20002d60:	f7ff ff53 	bl	20002c0a <ascii_write_part>
	
	this->counter++;
20002d64:	687b      	ldr	r3, [r7, #4]
20002d66:	689b      	ldr	r3, [r3, #8]
20002d68:	1c5a      	adds	r2, r3, #1
20002d6a:	687b      	ldr	r3, [r7, #4]
20002d6c:	609a      	str	r2, [r3, #8]
}
20002d6e:	46c0      	nop			; (mov r8, r8)
20002d70:	46bd      	mov	sp, r7
20002d72:	b004      	add	sp, #16
20002d74:	bd80      	pop	{r7, pc}

20002d76 <init_slow_text>:

void init_slow_text(SlowText *obj, char *row1, char *row2, int speed) {
20002d76:	b580      	push	{r7, lr}
20002d78:	b084      	sub	sp, #16
20002d7a:	af00      	add	r7, sp, #0
20002d7c:	60f8      	str	r0, [r7, #12]
20002d7e:	60b9      	str	r1, [r7, #8]
20002d80:	607a      	str	r2, [r7, #4]
20002d82:	603b      	str	r3, [r7, #0]
	obj->row1 = row1;
20002d84:	68fb      	ldr	r3, [r7, #12]
20002d86:	68ba      	ldr	r2, [r7, #8]
20002d88:	601a      	str	r2, [r3, #0]
	obj->row2 = row2;
20002d8a:	68fb      	ldr	r3, [r7, #12]
20002d8c:	687a      	ldr	r2, [r7, #4]
20002d8e:	605a      	str	r2, [r3, #4]
	obj->speed = speed;
20002d90:	68fb      	ldr	r3, [r7, #12]
20002d92:	683a      	ldr	r2, [r7, #0]
20002d94:	60da      	str	r2, [r3, #12]
	obj->counter = 0;
20002d96:	68fb      	ldr	r3, [r7, #12]
20002d98:	2200      	movs	r2, #0
20002d9a:	609a      	str	r2, [r3, #8]
	obj->display = display;
20002d9c:	68fb      	ldr	r3, [r7, #12]
20002d9e:	4a03      	ldr	r2, [pc, #12]	; (20002dac <init_slow_text+0x36>)
20002da0:	611a      	str	r2, [r3, #16]
20002da2:	46c0      	nop			; (mov r8, r8)
20002da4:	46bd      	mov	sp, r7
20002da6:	b004      	add	sp, #16
20002da8:	bd80      	pop	{r7, pc}
20002daa:	46c0      	nop			; (mov r8, r8)
20002dac:	20002d1d 	andcs	r2, r0, sp, lsl sp

20002db0 <initSprites>:


GameObject indoorsObj;
Image indoorsImage;
Image indoorsImages[1];
static void initSprites( void ) {	
20002db0:	b580      	push	{r7, lr}
20002db2:	b084      	sub	sp, #16
20002db4:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempIndoorsLight;
20002db6:	4b12      	ldr	r3, [pc, #72]	; (20002e00 <initSprites+0x50>)
20002db8:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer11, indoors_light_bits, indoors_black_width, indoors_black_height);
20002dba:	4912      	ldr	r1, [pc, #72]	; (20002e04 <initSprites+0x54>)
20002dbc:	68f8      	ldr	r0, [r7, #12]
20002dbe:	2340      	movs	r3, #64	; 0x40
20002dc0:	2280      	movs	r2, #128	; 0x80
20002dc2:	f7ff fcd1 	bl	20002768 <load_sprite>
	indoorsLight = pointer11;
20002dc6:	4b10      	ldr	r3, [pc, #64]	; (20002e08 <initSprites+0x58>)
20002dc8:	68fa      	ldr	r2, [r7, #12]
20002dca:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempIndoorsGray;
20002dcc:	4b0f      	ldr	r3, [pc, #60]	; (20002e0c <initSprites+0x5c>)
20002dce:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer12, indoors_gray_bits, indoors_black_width, indoors_black_height);
20002dd0:	490f      	ldr	r1, [pc, #60]	; (20002e10 <initSprites+0x60>)
20002dd2:	68b8      	ldr	r0, [r7, #8]
20002dd4:	2340      	movs	r3, #64	; 0x40
20002dd6:	2280      	movs	r2, #128	; 0x80
20002dd8:	f7ff fcc6 	bl	20002768 <load_sprite>
	indoorsGray = pointer12;
20002ddc:	4b0d      	ldr	r3, [pc, #52]	; (20002e14 <initSprites+0x64>)
20002dde:	68ba      	ldr	r2, [r7, #8]
20002de0:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempIndoorsBlack;
20002de2:	4b0d      	ldr	r3, [pc, #52]	; (20002e18 <initSprites+0x68>)
20002de4:	607b      	str	r3, [r7, #4]
	load_sprite(pointer13, indoors_black_bits, indoors_black_width, indoors_black_height);
20002de6:	490d      	ldr	r1, [pc, #52]	; (20002e1c <initSprites+0x6c>)
20002de8:	6878      	ldr	r0, [r7, #4]
20002dea:	2340      	movs	r3, #64	; 0x40
20002dec:	2280      	movs	r2, #128	; 0x80
20002dee:	f7ff fcbb 	bl	20002768 <load_sprite>
	indoorsBlack = pointer13;	
20002df2:	4b0b      	ldr	r3, [pc, #44]	; (20002e20 <initSprites+0x70>)
20002df4:	687a      	ldr	r2, [r7, #4]
20002df6:	601a      	str	r2, [r3, #0]
	
}
20002df8:	46c0      	nop			; (mov r8, r8)
20002dfa:	46bd      	mov	sp, r7
20002dfc:	b004      	add	sp, #16
20002dfe:	bd80      	pop	{r7, pc}
20002e00:	200053e4 	andcs	r5, r0, r4, ror #7
20002e04:	20007c54 	andcs	r7, r0, r4, asr ip
20002e08:	20005440 	andcs	r5, r0, r0, asr #8
20002e0c:	200053d8 	ldrdcs	r5, [r0], -r8
20002e10:	20007854 	andcs	r7, r0, r4, asr r8
20002e14:	200053fc 	strdcs	r5, [r0], -ip
20002e18:	200053f0 	strdcs	r5, [r0], -r0
20002e1c:	20007454 	andcs	r7, r0, r4, asr r4
20002e20:	20005430 	andcs	r5, r0, r0, lsr r4

20002e24 <init_indoors>:
	
void init_indoors( GameObject *indoorsObj ) {
20002e24:	b590      	push	{r4, r7, lr}
20002e26:	b083      	sub	sp, #12
20002e28:	af00      	add	r7, sp, #0
20002e2a:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20002e2c:	4b14      	ldr	r3, [pc, #80]	; (20002e80 <init_indoors+0x5c>)
20002e2e:	681b      	ldr	r3, [r3, #0]
20002e30:	2b00      	cmp	r3, #0
20002e32:	d011      	beq.n	20002e58 <init_indoors+0x34>
		initSprites();
20002e34:	f7ff ffbc 	bl	20002db0 <initSprites>
		firstTime = 0;			
20002e38:	4b11      	ldr	r3, [pc, #68]	; (20002e80 <init_indoors+0x5c>)
20002e3a:	2200      	movs	r2, #0
20002e3c:	601a      	str	r2, [r3, #0]

		indoorsImages[0] = indoorsImage;
20002e3e:	4b11      	ldr	r3, [pc, #68]	; (20002e84 <init_indoors+0x60>)
20002e40:	4a11      	ldr	r2, [pc, #68]	; (20002e88 <init_indoors+0x64>)
20002e42:	ca13      	ldmia	r2!, {r0, r1, r4}
20002e44:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&indoorsImages[0], indoorsBlack, indoorsGray, indoorsLight);
20002e46:	4b11      	ldr	r3, [pc, #68]	; (20002e8c <init_indoors+0x68>)
20002e48:	6819      	ldr	r1, [r3, #0]
20002e4a:	4b11      	ldr	r3, [pc, #68]	; (20002e90 <init_indoors+0x6c>)
20002e4c:	681a      	ldr	r2, [r3, #0]
20002e4e:	4b11      	ldr	r3, [pc, #68]	; (20002e94 <init_indoors+0x70>)
20002e50:	681b      	ldr	r3, [r3, #0]
20002e52:	480c      	ldr	r0, [pc, #48]	; (20002e84 <init_indoors+0x60>)
20002e54:	f7ff fc74 	bl	20002740 <load_image>
	}
	
	indoorsObj->images = indoorsImages;
20002e58:	687b      	ldr	r3, [r7, #4]
20002e5a:	4a0a      	ldr	r2, [pc, #40]	; (20002e84 <init_indoors+0x60>)
20002e5c:	601a      	str	r2, [r3, #0]

	indoorsObj->current_frame = 0;
20002e5e:	687b      	ldr	r3, [r7, #4]
20002e60:	2200      	movs	r2, #0
20002e62:	615a      	str	r2, [r3, #20]
	indoorsObj->n_frames = 1;
20002e64:	687b      	ldr	r3, [r7, #4]
20002e66:	2201      	movs	r2, #1
20002e68:	619a      	str	r2, [r3, #24]
	indoorsObj->animation_speed = 1;
20002e6a:	687b      	ldr	r3, [r7, #4]
20002e6c:	2201      	movs	r2, #1
20002e6e:	61da      	str	r2, [r3, #28]
	indoorsObj->animation_counter = 0;
20002e70:	687b      	ldr	r3, [r7, #4]
20002e72:	2200      	movs	r2, #0
20002e74:	621a      	str	r2, [r3, #32]
}
20002e76:	46c0      	nop			; (mov r8, r8)
20002e78:	46bd      	mov	sp, r7
20002e7a:	b003      	add	sp, #12
20002e7c:	bd90      	pop	{r4, r7, pc}
20002e7e:	46c0      	nop			; (mov r8, r8)
20002e80:	20008054 	andcs	r8, r0, r4, asr r0
20002e84:	20005424 	andcs	r5, r0, r4, lsr #8
20002e88:	20005434 	andcs	r5, r0, r4, lsr r4
20002e8c:	20005430 	andcs	r5, r0, r0, lsr r4
20002e90:	200053fc 	strdcs	r5, [r0], -ip
20002e94:	20005440 	andcs	r5, r0, r0, asr #8

20002e98 <initSprites>:


GameObject indoors2Obj;
Image indoors2Image;
Image indoors2Images[1];
static void initSprites( void ) {	
20002e98:	b580      	push	{r7, lr}
20002e9a:	b084      	sub	sp, #16
20002e9c:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempIndoors2Light;
20002e9e:	4b12      	ldr	r3, [pc, #72]	; (20002ee8 <initSprites+0x50>)
20002ea0:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer11, indoors2_light_bits, indoors2_black_width, indoors2_black_height);
20002ea2:	4912      	ldr	r1, [pc, #72]	; (20002eec <initSprites+0x54>)
20002ea4:	68f8      	ldr	r0, [r7, #12]
20002ea6:	2340      	movs	r3, #64	; 0x40
20002ea8:	2280      	movs	r2, #128	; 0x80
20002eaa:	f7ff fc5d 	bl	20002768 <load_sprite>
	indoors2Light = pointer11;
20002eae:	4b10      	ldr	r3, [pc, #64]	; (20002ef0 <initSprites+0x58>)
20002eb0:	68fa      	ldr	r2, [r7, #12]
20002eb2:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempIndoors2Gray;
20002eb4:	4b0f      	ldr	r3, [pc, #60]	; (20002ef4 <initSprites+0x5c>)
20002eb6:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer12, indoors2_gray_bits, indoors2_black_width, indoors2_black_height);
20002eb8:	490f      	ldr	r1, [pc, #60]	; (20002ef8 <initSprites+0x60>)
20002eba:	68b8      	ldr	r0, [r7, #8]
20002ebc:	2340      	movs	r3, #64	; 0x40
20002ebe:	2280      	movs	r2, #128	; 0x80
20002ec0:	f7ff fc52 	bl	20002768 <load_sprite>
	indoors2Gray = pointer12;
20002ec4:	4b0d      	ldr	r3, [pc, #52]	; (20002efc <initSprites+0x64>)
20002ec6:	68ba      	ldr	r2, [r7, #8]
20002ec8:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempIndoors2Black;
20002eca:	4b0d      	ldr	r3, [pc, #52]	; (20002f00 <initSprites+0x68>)
20002ecc:	607b      	str	r3, [r7, #4]
	load_sprite(pointer13, indoors2_black_bits, indoors2_black_width, indoors2_black_height);
20002ece:	490d      	ldr	r1, [pc, #52]	; (20002f04 <initSprites+0x6c>)
20002ed0:	6878      	ldr	r0, [r7, #4]
20002ed2:	2340      	movs	r3, #64	; 0x40
20002ed4:	2280      	movs	r2, #128	; 0x80
20002ed6:	f7ff fc47 	bl	20002768 <load_sprite>
	indoors2Black = pointer13;	
20002eda:	4b0b      	ldr	r3, [pc, #44]	; (20002f08 <initSprites+0x70>)
20002edc:	687a      	ldr	r2, [r7, #4]
20002ede:	601a      	str	r2, [r3, #0]
	
}
20002ee0:	46c0      	nop			; (mov r8, r8)
20002ee2:	46bd      	mov	sp, r7
20002ee4:	b004      	add	sp, #16
20002ee6:	bd80      	pop	{r7, pc}
20002ee8:	200054a0 	andcs	r5, r0, r0, lsr #9
20002eec:	20008858 	andcs	r8, r0, r8, asr r8
20002ef0:	20005490 	mulcs	r0, r0, r4
20002ef4:	20005484 	andcs	r5, r0, r4, lsl #9
20002ef8:	20008458 	andcs	r8, r0, r8, asr r4
20002efc:	20005468 	andcs	r5, r0, r8, ror #8
20002f00:	20005494 	mulcs	r0, r4, r4
20002f04:	20008058 	andcs	r8, r0, r8, asr r0
20002f08:	200054ac 	andcs	r5, r0, ip, lsr #9

20002f0c <init_indoors2>:
	
void init_indoors2( GameObject *indoors2Obj ) {
20002f0c:	b590      	push	{r4, r7, lr}
20002f0e:	b083      	sub	sp, #12
20002f10:	af00      	add	r7, sp, #0
20002f12:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20002f14:	4b14      	ldr	r3, [pc, #80]	; (20002f68 <init_indoors2+0x5c>)
20002f16:	681b      	ldr	r3, [r3, #0]
20002f18:	2b00      	cmp	r3, #0
20002f1a:	d011      	beq.n	20002f40 <init_indoors2+0x34>
		initSprites();
20002f1c:	f7ff ffbc 	bl	20002e98 <initSprites>
		firstTime = 0;			
20002f20:	4b11      	ldr	r3, [pc, #68]	; (20002f68 <init_indoors2+0x5c>)
20002f22:	2200      	movs	r2, #0
20002f24:	601a      	str	r2, [r3, #0]

		indoors2Images[0] = indoors2Image;
20002f26:	4b11      	ldr	r3, [pc, #68]	; (20002f6c <init_indoors2+0x60>)
20002f28:	4a11      	ldr	r2, [pc, #68]	; (20002f70 <init_indoors2+0x64>)
20002f2a:	ca13      	ldmia	r2!, {r0, r1, r4}
20002f2c:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&indoors2Images[0], indoors2Black, indoors2Gray, indoors2Light);
20002f2e:	4b11      	ldr	r3, [pc, #68]	; (20002f74 <init_indoors2+0x68>)
20002f30:	6819      	ldr	r1, [r3, #0]
20002f32:	4b11      	ldr	r3, [pc, #68]	; (20002f78 <init_indoors2+0x6c>)
20002f34:	681a      	ldr	r2, [r3, #0]
20002f36:	4b11      	ldr	r3, [pc, #68]	; (20002f7c <init_indoors2+0x70>)
20002f38:	681b      	ldr	r3, [r3, #0]
20002f3a:	480c      	ldr	r0, [pc, #48]	; (20002f6c <init_indoors2+0x60>)
20002f3c:	f7ff fc00 	bl	20002740 <load_image>
	}
	
	indoors2Obj->images = indoors2Images;
20002f40:	687b      	ldr	r3, [r7, #4]
20002f42:	4a0a      	ldr	r2, [pc, #40]	; (20002f6c <init_indoors2+0x60>)
20002f44:	601a      	str	r2, [r3, #0]

	indoors2Obj->current_frame = 0;
20002f46:	687b      	ldr	r3, [r7, #4]
20002f48:	2200      	movs	r2, #0
20002f4a:	615a      	str	r2, [r3, #20]
	indoors2Obj->n_frames = 1;
20002f4c:	687b      	ldr	r3, [r7, #4]
20002f4e:	2201      	movs	r2, #1
20002f50:	619a      	str	r2, [r3, #24]
	indoors2Obj->animation_speed = 1;
20002f52:	687b      	ldr	r3, [r7, #4]
20002f54:	2201      	movs	r2, #1
20002f56:	61da      	str	r2, [r3, #28]
	indoors2Obj->animation_counter = 0;
20002f58:	687b      	ldr	r3, [r7, #4]
20002f5a:	2200      	movs	r2, #0
20002f5c:	621a      	str	r2, [r3, #32]
}
20002f5e:	46c0      	nop			; (mov r8, r8)
20002f60:	46bd      	mov	sp, r7
20002f62:	b003      	add	sp, #12
20002f64:	bd90      	pop	{r4, r7, pc}
20002f66:	46c0      	nop			; (mov r8, r8)
20002f68:	20008c58 	andcs	r8, r0, r8, asr ip
20002f6c:	2000546c 	andcs	r5, r0, ip, ror #8
20002f70:	20005478 	andcs	r5, r0, r8, ror r4
20002f74:	200054ac 	andcs	r5, r0, ip, lsr #9
20002f78:	20005468 	andcs	r5, r0, r8, ror #8
20002f7c:	20005490 	mulcs	r0, r0, r4

20002f80 <__divsi3>:
20002f80:	4603      	mov	r3, r0
20002f82:	430b      	orrs	r3, r1
20002f84:	d47f      	bmi.n	20003086 <__divsi3+0x106>
20002f86:	2200      	movs	r2, #0
20002f88:	0843      	lsrs	r3, r0, #1
20002f8a:	428b      	cmp	r3, r1
20002f8c:	d374      	bcc.n	20003078 <__divsi3+0xf8>
20002f8e:	0903      	lsrs	r3, r0, #4
20002f90:	428b      	cmp	r3, r1
20002f92:	d35f      	bcc.n	20003054 <__divsi3+0xd4>
20002f94:	0a03      	lsrs	r3, r0, #8
20002f96:	428b      	cmp	r3, r1
20002f98:	d344      	bcc.n	20003024 <__divsi3+0xa4>
20002f9a:	0b03      	lsrs	r3, r0, #12
20002f9c:	428b      	cmp	r3, r1
20002f9e:	d328      	bcc.n	20002ff2 <__divsi3+0x72>
20002fa0:	0c03      	lsrs	r3, r0, #16
20002fa2:	428b      	cmp	r3, r1
20002fa4:	d30d      	bcc.n	20002fc2 <__divsi3+0x42>
20002fa6:	22ff      	movs	r2, #255	; 0xff
20002fa8:	0209      	lsls	r1, r1, #8
20002faa:	ba12      	rev	r2, r2
20002fac:	0c03      	lsrs	r3, r0, #16
20002fae:	428b      	cmp	r3, r1
20002fb0:	d302      	bcc.n	20002fb8 <__divsi3+0x38>
20002fb2:	1212      	asrs	r2, r2, #8
20002fb4:	0209      	lsls	r1, r1, #8
20002fb6:	d065      	beq.n	20003084 <__divsi3+0x104>
20002fb8:	0b03      	lsrs	r3, r0, #12
20002fba:	428b      	cmp	r3, r1
20002fbc:	d319      	bcc.n	20002ff2 <__divsi3+0x72>
20002fbe:	e000      	b.n	20002fc2 <__divsi3+0x42>
20002fc0:	0a09      	lsrs	r1, r1, #8
20002fc2:	0bc3      	lsrs	r3, r0, #15
20002fc4:	428b      	cmp	r3, r1
20002fc6:	d301      	bcc.n	20002fcc <__divsi3+0x4c>
20002fc8:	03cb      	lsls	r3, r1, #15
20002fca:	1ac0      	subs	r0, r0, r3
20002fcc:	4152      	adcs	r2, r2
20002fce:	0b83      	lsrs	r3, r0, #14
20002fd0:	428b      	cmp	r3, r1
20002fd2:	d301      	bcc.n	20002fd8 <__divsi3+0x58>
20002fd4:	038b      	lsls	r3, r1, #14
20002fd6:	1ac0      	subs	r0, r0, r3
20002fd8:	4152      	adcs	r2, r2
20002fda:	0b43      	lsrs	r3, r0, #13
20002fdc:	428b      	cmp	r3, r1
20002fde:	d301      	bcc.n	20002fe4 <__divsi3+0x64>
20002fe0:	034b      	lsls	r3, r1, #13
20002fe2:	1ac0      	subs	r0, r0, r3
20002fe4:	4152      	adcs	r2, r2
20002fe6:	0b03      	lsrs	r3, r0, #12
20002fe8:	428b      	cmp	r3, r1
20002fea:	d301      	bcc.n	20002ff0 <__divsi3+0x70>
20002fec:	030b      	lsls	r3, r1, #12
20002fee:	1ac0      	subs	r0, r0, r3
20002ff0:	4152      	adcs	r2, r2
20002ff2:	0ac3      	lsrs	r3, r0, #11
20002ff4:	428b      	cmp	r3, r1
20002ff6:	d301      	bcc.n	20002ffc <__divsi3+0x7c>
20002ff8:	02cb      	lsls	r3, r1, #11
20002ffa:	1ac0      	subs	r0, r0, r3
20002ffc:	4152      	adcs	r2, r2
20002ffe:	0a83      	lsrs	r3, r0, #10
20003000:	428b      	cmp	r3, r1
20003002:	d301      	bcc.n	20003008 <__divsi3+0x88>
20003004:	028b      	lsls	r3, r1, #10
20003006:	1ac0      	subs	r0, r0, r3
20003008:	4152      	adcs	r2, r2
2000300a:	0a43      	lsrs	r3, r0, #9
2000300c:	428b      	cmp	r3, r1
2000300e:	d301      	bcc.n	20003014 <__divsi3+0x94>
20003010:	024b      	lsls	r3, r1, #9
20003012:	1ac0      	subs	r0, r0, r3
20003014:	4152      	adcs	r2, r2
20003016:	0a03      	lsrs	r3, r0, #8
20003018:	428b      	cmp	r3, r1
2000301a:	d301      	bcc.n	20003020 <__divsi3+0xa0>
2000301c:	020b      	lsls	r3, r1, #8
2000301e:	1ac0      	subs	r0, r0, r3
20003020:	4152      	adcs	r2, r2
20003022:	d2cd      	bcs.n	20002fc0 <__divsi3+0x40>
20003024:	09c3      	lsrs	r3, r0, #7
20003026:	428b      	cmp	r3, r1
20003028:	d301      	bcc.n	2000302e <__divsi3+0xae>
2000302a:	01cb      	lsls	r3, r1, #7
2000302c:	1ac0      	subs	r0, r0, r3
2000302e:	4152      	adcs	r2, r2
20003030:	0983      	lsrs	r3, r0, #6
20003032:	428b      	cmp	r3, r1
20003034:	d301      	bcc.n	2000303a <__divsi3+0xba>
20003036:	018b      	lsls	r3, r1, #6
20003038:	1ac0      	subs	r0, r0, r3
2000303a:	4152      	adcs	r2, r2
2000303c:	0943      	lsrs	r3, r0, #5
2000303e:	428b      	cmp	r3, r1
20003040:	d301      	bcc.n	20003046 <__divsi3+0xc6>
20003042:	014b      	lsls	r3, r1, #5
20003044:	1ac0      	subs	r0, r0, r3
20003046:	4152      	adcs	r2, r2
20003048:	0903      	lsrs	r3, r0, #4
2000304a:	428b      	cmp	r3, r1
2000304c:	d301      	bcc.n	20003052 <__divsi3+0xd2>
2000304e:	010b      	lsls	r3, r1, #4
20003050:	1ac0      	subs	r0, r0, r3
20003052:	4152      	adcs	r2, r2
20003054:	08c3      	lsrs	r3, r0, #3
20003056:	428b      	cmp	r3, r1
20003058:	d301      	bcc.n	2000305e <__divsi3+0xde>
2000305a:	00cb      	lsls	r3, r1, #3
2000305c:	1ac0      	subs	r0, r0, r3
2000305e:	4152      	adcs	r2, r2
20003060:	0883      	lsrs	r3, r0, #2
20003062:	428b      	cmp	r3, r1
20003064:	d301      	bcc.n	2000306a <__divsi3+0xea>
20003066:	008b      	lsls	r3, r1, #2
20003068:	1ac0      	subs	r0, r0, r3
2000306a:	4152      	adcs	r2, r2
2000306c:	0843      	lsrs	r3, r0, #1
2000306e:	428b      	cmp	r3, r1
20003070:	d301      	bcc.n	20003076 <__divsi3+0xf6>
20003072:	004b      	lsls	r3, r1, #1
20003074:	1ac0      	subs	r0, r0, r3
20003076:	4152      	adcs	r2, r2
20003078:	1a41      	subs	r1, r0, r1
2000307a:	d200      	bcs.n	2000307e <__divsi3+0xfe>
2000307c:	4601      	mov	r1, r0
2000307e:	4152      	adcs	r2, r2
20003080:	4610      	mov	r0, r2
20003082:	4770      	bx	lr
20003084:	e05d      	b.n	20003142 <__divsi3+0x1c2>
20003086:	0fca      	lsrs	r2, r1, #31
20003088:	d000      	beq.n	2000308c <__divsi3+0x10c>
2000308a:	4249      	negs	r1, r1
2000308c:	1003      	asrs	r3, r0, #32
2000308e:	d300      	bcc.n	20003092 <__divsi3+0x112>
20003090:	4240      	negs	r0, r0
20003092:	4053      	eors	r3, r2
20003094:	2200      	movs	r2, #0
20003096:	469c      	mov	ip, r3
20003098:	0903      	lsrs	r3, r0, #4
2000309a:	428b      	cmp	r3, r1
2000309c:	d32d      	bcc.n	200030fa <__divsi3+0x17a>
2000309e:	0a03      	lsrs	r3, r0, #8
200030a0:	428b      	cmp	r3, r1
200030a2:	d312      	bcc.n	200030ca <__divsi3+0x14a>
200030a4:	22fc      	movs	r2, #252	; 0xfc
200030a6:	0189      	lsls	r1, r1, #6
200030a8:	ba12      	rev	r2, r2
200030aa:	0a03      	lsrs	r3, r0, #8
200030ac:	428b      	cmp	r3, r1
200030ae:	d30c      	bcc.n	200030ca <__divsi3+0x14a>
200030b0:	0189      	lsls	r1, r1, #6
200030b2:	1192      	asrs	r2, r2, #6
200030b4:	428b      	cmp	r3, r1
200030b6:	d308      	bcc.n	200030ca <__divsi3+0x14a>
200030b8:	0189      	lsls	r1, r1, #6
200030ba:	1192      	asrs	r2, r2, #6
200030bc:	428b      	cmp	r3, r1
200030be:	d304      	bcc.n	200030ca <__divsi3+0x14a>
200030c0:	0189      	lsls	r1, r1, #6
200030c2:	d03a      	beq.n	2000313a <__divsi3+0x1ba>
200030c4:	1192      	asrs	r2, r2, #6
200030c6:	e000      	b.n	200030ca <__divsi3+0x14a>
200030c8:	0989      	lsrs	r1, r1, #6
200030ca:	09c3      	lsrs	r3, r0, #7
200030cc:	428b      	cmp	r3, r1
200030ce:	d301      	bcc.n	200030d4 <__divsi3+0x154>
200030d0:	01cb      	lsls	r3, r1, #7
200030d2:	1ac0      	subs	r0, r0, r3
200030d4:	4152      	adcs	r2, r2
200030d6:	0983      	lsrs	r3, r0, #6
200030d8:	428b      	cmp	r3, r1
200030da:	d301      	bcc.n	200030e0 <__divsi3+0x160>
200030dc:	018b      	lsls	r3, r1, #6
200030de:	1ac0      	subs	r0, r0, r3
200030e0:	4152      	adcs	r2, r2
200030e2:	0943      	lsrs	r3, r0, #5
200030e4:	428b      	cmp	r3, r1
200030e6:	d301      	bcc.n	200030ec <__divsi3+0x16c>
200030e8:	014b      	lsls	r3, r1, #5
200030ea:	1ac0      	subs	r0, r0, r3
200030ec:	4152      	adcs	r2, r2
200030ee:	0903      	lsrs	r3, r0, #4
200030f0:	428b      	cmp	r3, r1
200030f2:	d301      	bcc.n	200030f8 <__divsi3+0x178>
200030f4:	010b      	lsls	r3, r1, #4
200030f6:	1ac0      	subs	r0, r0, r3
200030f8:	4152      	adcs	r2, r2
200030fa:	08c3      	lsrs	r3, r0, #3
200030fc:	428b      	cmp	r3, r1
200030fe:	d301      	bcc.n	20003104 <__divsi3+0x184>
20003100:	00cb      	lsls	r3, r1, #3
20003102:	1ac0      	subs	r0, r0, r3
20003104:	4152      	adcs	r2, r2
20003106:	0883      	lsrs	r3, r0, #2
20003108:	428b      	cmp	r3, r1
2000310a:	d301      	bcc.n	20003110 <__divsi3+0x190>
2000310c:	008b      	lsls	r3, r1, #2
2000310e:	1ac0      	subs	r0, r0, r3
20003110:	4152      	adcs	r2, r2
20003112:	d2d9      	bcs.n	200030c8 <__divsi3+0x148>
20003114:	0843      	lsrs	r3, r0, #1
20003116:	428b      	cmp	r3, r1
20003118:	d301      	bcc.n	2000311e <__divsi3+0x19e>
2000311a:	004b      	lsls	r3, r1, #1
2000311c:	1ac0      	subs	r0, r0, r3
2000311e:	4152      	adcs	r2, r2
20003120:	1a41      	subs	r1, r0, r1
20003122:	d200      	bcs.n	20003126 <__divsi3+0x1a6>
20003124:	4601      	mov	r1, r0
20003126:	4663      	mov	r3, ip
20003128:	4152      	adcs	r2, r2
2000312a:	105b      	asrs	r3, r3, #1
2000312c:	4610      	mov	r0, r2
2000312e:	d301      	bcc.n	20003134 <__divsi3+0x1b4>
20003130:	4240      	negs	r0, r0
20003132:	2b00      	cmp	r3, #0
20003134:	d500      	bpl.n	20003138 <__divsi3+0x1b8>
20003136:	4249      	negs	r1, r1
20003138:	4770      	bx	lr
2000313a:	4663      	mov	r3, ip
2000313c:	105b      	asrs	r3, r3, #1
2000313e:	d300      	bcc.n	20003142 <__divsi3+0x1c2>
20003140:	4240      	negs	r0, r0
20003142:	b501      	push	{r0, lr}
20003144:	2000      	movs	r0, #0
20003146:	f000 f805 	bl	20003154 <__aeabi_idiv0>
2000314a:	bd02      	pop	{r1, pc}

2000314c <__aeabi_idivmod>:
2000314c:	2900      	cmp	r1, #0
2000314e:	d0f8      	beq.n	20003142 <__divsi3+0x1c2>
20003150:	e716      	b.n	20002f80 <__divsi3>
20003152:	4770      	bx	lr

20003154 <__aeabi_idiv0>:
20003154:	4770      	bx	lr
20003156:	46c0      	nop			; (mov r8, r8)

20003158 <counter>:
20003158:	00000000 	andeq	r0, r0, r0

2000315c <distance_player_fire.4288>:
2000315c:	00000000 	andeq	r0, r0, r0

20003160 <nGameObjects>:
20003160:	00000000 	andeq	r0, r0, r0

20003164 <lastRightValue.4092>:
20003164:	00000000 	andeq	r0, r0, r0

20003168 <speed.4094>:
20003168:	00000000 	andeq	r0, r0, r0

2000316c <lastLeftValue.4093>:
2000316c:	00000000 	andeq	r0, r0, r0

20003170 <monster>:
20003170:	00000000 	andeq	r0, r0, r0

20003174 <tempCastleBlack>:
	...

20003180 <tempPressGray>:
	...

2000318c <tempTitleGray>:
	...

20003198 <castleBlack>:
20003198:	00000000 	andeq	r0, r0, r0

2000319c <tempMonster>:
	...

200031a8 <pressLight>:
200031a8:	00000000 	andeq	r0, r0, r0

200031ac <tempTitleBlack>:
	...

200031b8 <bg>:
200031b8:	00000000 	andeq	r0, r0, r0

200031bc <tempMonsterGray>:
	...

200031c8 <tempTitleLight>:
	...

200031d4 <castleLight>:
200031d4:	00000000 	andeq	r0, r0, r0

200031d8 <tempPressLight>:
	...

200031e4 <tempCastleLight>:
	...

200031f0 <pressGray>:
200031f0:	00000000 	andeq	r0, r0, r0

200031f4 <tempMonsterLight>:
	...

20003200 <tempPressBlack>:
	...

2000320c <titleGray>:
2000320c:	00000000 	andeq	r0, r0, r0

20003210 <tempCastleGray>:
	...

2000321c <monsterLight>:
2000321c:	00000000 	andeq	r0, r0, r0

20003220 <titleLight>:
20003220:	00000000 	andeq	r0, r0, r0

20003224 <castleGray>:
20003224:	00000000 	andeq	r0, r0, r0

20003228 <random_seed>:
20003228:	00000000 	andeq	r0, r0, r0

2000322c <pressBlack>:
2000322c:	00000000 	andeq	r0, r0, r0

20003230 <monsterGray>:
20003230:	00000000 	andeq	r0, r0, r0

20003234 <tempBg>:
	...

20003240 <titleBlack>:
20003240:	00000000 	andeq	r0, r0, r0

20003244 <gameObjects>:
	...

200033d4 <fire1Light>:
200033d4:	00000000 	andeq	r0, r0, r0

200033d8 <tempFire3Light>:
	...

200033e4 <fire3Gray>:
200033e4:	00000000 	andeq	r0, r0, r0

200033e8 <tempFire4Gray>:
	...

200033f4 <fire2Image>:
	...

20003400 <tempFire2Gray>:
	...

2000340c <tempFireBlack>:
	...

20003418 <fire3Image>:
	...

20003424 <tempFire4Light>:
	...

20003430 <fire1Image>:
	...

2000343c <fire4Light>:
2000343c:	00000000 	andeq	r0, r0, r0

20003440 <fireObj>:
	...

20003464 <fire5Image>:
	...

20003470 <fireImages>:
	...

200034ac <tempFire5Gray>:
	...

200034b8 <tempFire3Gray>:
	...

200034c4 <fire4Image>:
	...

200034d0 <fire4Gray>:
200034d0:	00000000 	andeq	r0, r0, r0

200034d4 <tempFire1Light>:
	...

200034e0 <tempFire5Light>:
	...

200034ec <fire5Gray>:
200034ec:	00000000 	andeq	r0, r0, r0

200034f0 <fire2Light>:
200034f0:	00000000 	andeq	r0, r0, r0

200034f4 <fire5Light>:
200034f4:	00000000 	andeq	r0, r0, r0

200034f8 <tempFire1Gray>:
	...

20003504 <fireBlack>:
20003504:	00000000 	andeq	r0, r0, r0

20003508 <tempFire2Light>:
	...

20003514 <fire3Light>:
20003514:	00000000 	andeq	r0, r0, r0

20003518 <fire2Gray>:
20003518:	00000000 	andeq	r0, r0, r0

2000351c <fire1Gray>:
2000351c:	00000000 	andeq	r0, r0, r0

20003520 <bird4Light>:
20003520:	00000000 	andeq	r0, r0, r0

20003524 <bird1Gray>:
20003524:	00000000 	andeq	r0, r0, r0

20003528 <bird6Image>:
	...

20003534 <bird5Black>:
20003534:	00000000 	andeq	r0, r0, r0

20003538 <tempBird4Black>:
	...

20003544 <bird2Image>:
	...

20003550 <birdObj>:
	...

20003574 <bird1Image>:
	...

20003580 <bird3Black>:
20003580:	00000000 	andeq	r0, r0, r0

20003584 <bird4Gray>:
20003584:	00000000 	andeq	r0, r0, r0

20003588 <bird2Black>:
20003588:	00000000 	andeq	r0, r0, r0

2000358c <bird1Black>:
2000358c:	00000000 	andeq	r0, r0, r0

20003590 <bird4Image>:
	...

2000359c <tempBirdBlack>:
	...

200035a8 <bird3Gray>:
200035a8:	00000000 	andeq	r0, r0, r0

200035ac <tempBirdGray>:
	...

200035b8 <bird5Gray>:
200035b8:	00000000 	andeq	r0, r0, r0

200035bc <tempBird5Light>:
	...

200035c8 <tempBird2Gray>:
	...

200035d4 <bird3Light>:
200035d4:	00000000 	andeq	r0, r0, r0

200035d8 <tempBird5Gray>:
	...

200035e4 <tempBird5Black>:
	...

200035f0 <bird5Image>:
	...

200035fc <bird5Light>:
200035fc:	00000000 	andeq	r0, r0, r0

20003600 <tempBird3Black>:
	...

2000360c <bird2Gray>:
2000360c:	00000000 	andeq	r0, r0, r0

20003610 <tempBirdLight>:
	...

2000361c <bird1Light>:
2000361c:	00000000 	andeq	r0, r0, r0

20003620 <tempBird2Light>:
	...

2000362c <bird3Image>:
	...

20003638 <tempBird4Light>:
	...

20003644 <tempBird3Light>:
	...

20003650 <tempBird3Gray>:
	...

2000365c <birdImages>:
	...

200036a4 <bird4Black>:
200036a4:	00000000 	andeq	r0, r0, r0

200036a8 <tempBird2Black>:
	...

200036b4 <tempBird4Gray>:
	...

200036c0 <bird2Light>:
200036c0:	00000000 	andeq	r0, r0, r0

200036c4 <witch1Gray>:
200036c4:	00000000 	andeq	r0, r0, r0

200036c8 <witch2Light>:
200036c8:	00000000 	andeq	r0, r0, r0

200036cc <witchImages>:
	...

200036fc <witch2Image>:
	...

20003708 <tempWitch2Black>:
	...

20003714 <tempWitchBlack>:
	...

20003720 <tempWitch3Light>:
	...

2000372c <witch4Image>:
	...

20003738 <witch2Gray>:
20003738:	00000000 	andeq	r0, r0, r0

2000373c <tempWitchGray>:
	...

20003748 <tempWitch3Black>:
	...

20003754 <tempWitch2Gray>:
	...

20003760 <witch3Black>:
20003760:	00000000 	andeq	r0, r0, r0

20003764 <witchObj>:
	...

20003788 <witch3Light>:
20003788:	00000000 	andeq	r0, r0, r0

2000378c <tempWitch3Gray>:
	...

20003798 <witch1Black>:
20003798:	00000000 	andeq	r0, r0, r0

2000379c <witch3Gray>:
2000379c:	00000000 	andeq	r0, r0, r0

200037a0 <witch1Image>:
	...

200037ac <tempWitchLight>:
	...

200037b8 <tempWitch2Light>:
	...

200037c4 <witch1Light>:
200037c4:	00000000 	andeq	r0, r0, r0

200037c8 <witch3Image>:
	...

200037d4 <witch2Black>:
200037d4:	00000000 	andeq	r0, r0, r0

200037d8 <backBufferGray>:
	...

20003bd8 <draw_buffer_black_gray>:
	...

20003fd8 <backBuffer>:
	...

200043d8 <draw_buffer_black_light>:
	...

200047d8 <draw_buffer_black>:
	...

20004bd8 <draw_buffer_black_gray_light>:
	...

20004fd8 <backBufferLight>:
	...

200053d8 <tempIndoorsGray>:
	...

200053e4 <tempIndoorsLight>:
	...

200053f0 <tempIndoorsBlack>:
	...

200053fc <indoorsGray>:
200053fc:	00000000 	andeq	r0, r0, r0

20005400 <indoorsObj>:
	...

20005424 <indoorsImages>:
	...

20005430 <indoorsBlack>:
20005430:	00000000 	andeq	r0, r0, r0

20005434 <indoorsImage>:
	...

20005440 <indoorsLight>:
20005440:	00000000 	andeq	r0, r0, r0

20005444 <indoors2Obj>:
	...

20005468 <indoors2Gray>:
20005468:	00000000 	andeq	r0, r0, r0

2000546c <indoors2Images>:
	...

20005478 <indoors2Image>:
	...

20005484 <tempIndoors2Gray>:
	...

20005490 <indoors2Light>:
20005490:	00000000 	andeq	r0, r0, r0

20005494 <tempIndoors2Black>:
	...

200054a0 <tempIndoors2Light>:
	...

200054ac <indoors2Black>:
200054ac:	00000000 	andeq	r0, r0, r0

200054b0 <monster_black_bits>:
	...
200054c0:	0001c000 	andeq	ip, r1, r0
200054c4:	00023000 	andeq	r3, r2, r0
200054c8:	00021000 	andeq	r1, r2, r0
200054cc:	00060800 	andeq	r0, r6, r0, lsl #16
200054d0:	00040800 	andeq	r0, r4, r0, lsl #16
200054d4:	00040800 	andeq	r0, r4, r0, lsl #16
200054d8:	00092800 	andeq	r2, r9, r0, lsl #16
200054dc:	00092800 	andeq	r2, r9, r0, lsl #16
200054e0:	00100400 	andseq	r0, r0, r0, lsl #8
200054e4:	00100400 	andseq	r0, r0, r0, lsl #8
200054e8:	00200200 	eoreq	r0, r0, r0, lsl #4
200054ec:	00661b00 	rsbeq	r1, r6, r0, lsl #22
200054f0:	0043b100 	subeq	fp, r3, r0, lsl #2
200054f4:	0080e080 	addeq	lr, r0, r0, lsl #1
200054f8:	01800080 	orreq	r0, r0, r0, lsl #1
200054fc:	01000040 	tsteq	r0, r0, asr #32
20005500:	02000040 	andeq	r0, r0, #64	; 0x40
20005504:	02000060 	andeq	r0, r0, #96	; 0x60
20005508:	02000020 	andeq	r0, r0, #32
2000550c:	03ff03e0 	mvnseq	r0, #224, 6	; 0x80000003
20005510:	0001fc00 	andeq	pc, r1, r0, lsl #24
	...

20005528 <monster_light_bits>:
	...
2000553c:	00010000 	andeq	r0, r1, r0
20005540:	00018000 	andeq	r8, r1, r0
20005544:	0001f000 	andeq	pc, r1, r0
20005548:	0001f000 	andeq	pc, r1, r0
2000554c:	00009000 	andeq	r9, r0, r0
20005550:	00009000 	andeq	r9, r0, r0
20005554:	0000d000 	andeq	sp, r0, r0
20005558:	0001f800 	andeq	pc, r1, r0, lsl #16
2000555c:	0003f800 	andeq	pc, r3, r0, lsl #16
20005560:	0003fc00 	andeq	pc, r3, r0, lsl #24
20005564:	0001e400 	andeq	lr, r1, r0, lsl #8
20005568:	00044c00 	andeq	r4, r4, r0, lsl #24
2000556c:	00060c00 	andeq	r0, r6, r0, lsl #24
20005570:	0006ee00 	andeq	lr, r6, r0, lsl #28
20005574:	000ffe00 	andeq	pc, pc, r0, lsl #28
20005578:	000f3f00 	andeq	r3, pc, r0, lsl #30
2000557c:	00000780 	andeq	r0, r0, r0, lsl #15
20005580:	000003c0 	andeq	r0, r0, r0, asr #7
	...

200055a0 <monster_gray_bits>:
	...
200055c0:	00020000 	andeq	r0, r2, r0
200055c4:	00000000 	andeq	r0, r0, r0
200055c8:	00040000 	andeq	r0, r4, r0
200055cc:	00060000 	andeq	r0, r6, r0
200055d0:	000e0000 	andeq	r0, lr, r0
200055d4:	000c0000 	andeq	r0, ip, r0
200055d8:	001c0000 	andseq	r0, ip, r0
200055dc:	00180000 	andseq	r0, r8, r0
200055e0:	00380000 	eorseq	r0, r8, r0
200055e4:	00780000 	rsbseq	r0, r8, r0
200055e8:	00780000 	rsbseq	r0, r8, r0
200055ec:	00f00000 	rscseq	r0, r0, r0
200055f0:	01f0c000 	mvnseq	ip, r0
200055f4:	01fff800 	mvnseq	pc, r0, lsl #16
200055f8:	01fffc00 	mvnseq	pc, r0, lsl #24
200055fc:	0000fc00 	andeq	pc, r0, r0, lsl #24
	...

20005618 <press_black_bits>:
	...
20005650:	001c0000 	andseq	r0, ip, r0
20005654:	00000000 	andeq	r0, r0, r0
20005658:	00240000 	eoreq	r0, r4, r0
2000565c:	00000000 	andeq	r0, r0, r0
20005660:	00440000 	subeq	r0, r4, r0
20005664:	00000000 	andeq	r0, r0, r0
20005668:	c5240000 	strgt	r0, [r4, #-0]!
2000566c:	00000198 	muleq	r0, r8, r1
20005670:	2b1c0000 	blcs	20705678 <firstTime.4040+0x6fca20>
20005674:	00000045 	andeq	r0, r0, r5, asr #32
20005678:	e1040000 	mrs	r0, (UNDEF: 4)
2000567c:	000000cd 	andeq	r0, r0, sp, asr #1
20005680:	21040000 	mrscs	r0, (UNDEF: 4)
20005684:	00000110 	andeq	r0, r0, r0, lsl r1
20005688:	c1040000 	mrsgt	r0, (UNDEF: 4)
2000568c:	000000cc 	andeq	r0, r0, ip, asr #1
	...
200056bc:	00000004 	andeq	r0, r0, r4
200056c0:	00000000 	andeq	r0, r0, r0
200056c4:	00000004 	andeq	r0, r0, r4
200056c8:	00000000 	andeq	r0, r0, r0
200056cc:	00000004 	andeq	r0, r0, r4
200056d0:	0494e000 	ldreq	lr, [r4], #0
200056d4:	00009334 	andeq	r9, r0, r4, lsr r3
200056d8:	04ac9000 	strteq	r9, [ip], #0
200056dc:	00009494 	muleq	r0, r4, r4
200056e0:	04a49000 	strteq	r9, [r4], #0
200056e4:	0000978c 	andeq	r9, r0, ip, lsl #15
200056e8:	04a49000 	strteq	r9, [r4], #0
200056ec:	00009094 	muleq	r0, r4, r0
200056f0:	07256000 	streq	r6, [r5, -r0]!
200056f4:	0000e324 	andeq	lr, r0, r4, lsr #6
200056f8:	04000000 	streq	r0, [r0], #-0
200056fc:	00008000 	andeq	r8, r0, r0
20005700:	04000000 	streq	r0, [r0], #-0
20005704:	00008000 	andeq	r8, r0, r0
20005708:	03000000 	movweq	r0, #0
2000570c:	00006000 	andeq	r6, r0, r0
	...

20005730 <press_light_bits>:
	...
20005770:	00000200 	andeq	r0, r0, r0, lsl #4
20005774:	00000000 	andeq	r0, r0, r0
20005778:	00000700 	andeq	r0, r0, r0, lsl #14
2000577c:	00000000 	andeq	r0, r0, r0
20005780:	00000200 	andeq	r0, r0, r0, lsl #4
	...
200057c4:	00800000 	addeq	r0, r0, r0
200057c8:	00000000 	andeq	r0, r0, r0
200057cc:	01c00000 	biceq	r0, r0, r0
200057d0:	00000000 	andeq	r0, r0, r0
200057d4:	00800000 	addeq	r0, r0, r0
200057d8:	00000010 	andeq	r0, r0, r0, lsl r0
200057dc:	00000000 	andeq	r0, r0, r0
200057e0:	00000038 	andeq	r0, r0, r8, lsr r0
200057e4:	00000000 	andeq	r0, r0, r0
200057e8:	00000010 	andeq	r0, r0, r0, lsl r0
	...

20005848 <press_gray_bits>:
	...
20005888:	00180000 	andseq	r0, r8, r0
2000588c:	00000000 	andeq	r0, r0, r0
20005890:	00380000 	eorseq	r0, r8, r0
20005894:	00000000 	andeq	r0, r0, r0
20005898:	00580000 	subseq	r0, r8, r0
2000589c:	00000020 	andeq	r0, r0, r0, lsr #32
200058a0:	d4200000 	strtle	r0, [r0], #-0
200058a4:	0000039a 	muleq	r0, sl, r3
200058a8:	0a380000 	beq	20e058b0 <firstTime.4040+0xdfcc58>
200058ac:	00000102 	andeq	r0, r0, r2, lsl #2
200058b0:	c2080000 	andgt	r0, r8, #0
200058b4:	00000223 	andeq	r0, r0, r3, lsr #4
200058b8:	02080000 	andeq	r0, r8, #0
200058bc:	00000311 	andeq	r0, r0, r1, lsl r3
200058c0:	c1080000 	mrsgt	r0, (UNDEF: 8)
200058c4:	000001dd 	ldrdeq	r0, [r0], -sp
	...
200058f4:	00000008 	andeq	r0, r0, r8
200058f8:	00000000 	andeq	r0, r0, r0
200058fc:	00000008 	andeq	r0, r0, r8
20005900:	00000000 	andeq	r0, r0, r0
20005904:	00000008 	andeq	r0, r0, r8
20005908:	09116000 	ldmdbeq	r1, {sp, lr}
2000590c:	00012328 	andeq	r2, r1, r8, lsr #6
20005910:	09596000 	ldmdbeq	r9, {sp, lr}^
20005914:	00012810 	andeq	r2, r1, r0, lsl r8
20005918:	0b492000 	bleq	2124d920 <firstTime.4040+0x1244cc8>
2000591c:	00012f08 	andeq	r2, r1, r8, lsl #30
20005920:	08488000 	stmdaeq	r8, {pc}^
20005924:	00010458 	andeq	r0, r1, r8, asr r4
20005928:	0b6be000 	bleq	21afd930 <firstTime.4040+0x1af4cd8>
2000592c:	00016768 	andeq	r6, r1, r8, ror #14
20005930:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
20005934:	00010000 	andeq	r0, r1, r0
20005938:	0c000000 	stceq	0, cr0, [r0], {-0}
2000593c:	00018000 	andeq	r8, r1, r0
20005940:	06000000 	streq	r0, [r0], -r0
20005944:	0000c000 	andeq	ip, r0, r0
	...

20005960 <castle_black_bits>:
20005960:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005964:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005968:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000596c:	00000000 	andeq	r0, r0, r0
20005970:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005974:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005978:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000597c:	00000000 	andeq	r0, r0, r0
20005980:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005984:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005988:	00000001 	andeq	r0, r0, r1
2000598c:	00000000 	andeq	r0, r0, r0
20005990:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005994:	7fffffff 	svcvc	0x00ffffff
	...
200059a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200059a4:	3fffffff 	svccc	0x00ffffff
	...
200059b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200059b4:	1fffffff 	svcne	0x00ffffff
	...
200059c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200059c4:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
	...
200059d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200059d4:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
	...
200059e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200059e4:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20005aeb <castle_black_bits+0x18b>	; <UNPREDICTABLE>
	...
200059f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200059f4:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
	...
20005a00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a04:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
	...
20005a10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a14:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20005a20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a24:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20005a30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a34:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20005a40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a44:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
20005a50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a54:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
20005a60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a64:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20005a70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a74:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20005a80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a84:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
20005a90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a94:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20005aa0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005aa4:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20005ab0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005ab4:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20005ac0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005ac4:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
20005ac8:	04900000 	ldreq	r0, [r0], #0
20005acc:	00000000 	andeq	r0, r0, r0
20005ad0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005ad4:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
20005ad8:	0b680000 	bleq	21a05ae0 <firstTime.4040+0x19fce88>
20005adc:	00000000 	andeq	r0, r0, r0
20005ae0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005ae4:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20005ae8:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
20005aec:	00000000 	andeq	r0, r0, r0
20005af0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005af4:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20005af8:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
20005afc:	00000092 	muleq	r0, r2, r0
20005b00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005b04:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20005b08:	04100000 	ldreq	r0, [r0], #-0
20005b0c:	0000016d 	andeq	r0, r0, sp, ror #2
20005b10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005b14:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20005b18:	04101240 	ldreq	r1, [r0], #-576	; 0xfffffdc0
20005b1c:	00000101 	andeq	r0, r0, r1, lsl #2
20005b20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005b24:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20005b28:	04102da0 	ldreq	r2, [r0], #-3488	; 0xfffff260
20005b2c:	00000101 	andeq	r0, r0, r1, lsl #2
20005b30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005b34:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20005b38:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
20005b3c:	00000101 	andeq	r0, r0, r1, lsl #2
20005b40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005b44:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20005b48:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
20005b4c:	00000101 	andeq	r0, r0, r1, lsl #2
20005b50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005b54:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20005b58:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20005b5c:	00000082 	andeq	r0, r0, r2, lsl #1
20005b60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005b64:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20005b68:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20005b6c:	00000092 	muleq	r0, r2, r0
20005b70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005b74:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20005b78:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20005b7c:	012400a2 	smulwbeq	r4, r2, r0
20005b80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005b84:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20005b88:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20005b8c:	02da00a2 	sbcseq	r0, sl, #162	; 0xa2
20005b90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005b94:	00004fff 	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
20005b98:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20005b9c:	020200a2 	andeq	r0, r2, #162	; 0xa2
20005ba0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005ba4:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005ba8:	08081040 	stmdaeq	r8, {r6, ip}
20005bac:	0202009a 	andeq	r0, r2, #154	; 0x9a
20005bb0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005bb4:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005bb8:	08082020 	stmdaeq	r8, {r5, sp}
20005bbc:	01040082 	smlabbeq	r4, r2, r0, r0
20005bc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005bc4:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005bc8:	48082020 	stmdami	r8, {r5, sp}
20005bcc:	01040102 	tsteq	r4, r2, lsl #2
20005bd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005bd4:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005bd8:	b0082020 	andlt	r2, r8, r0, lsr #32
20005bdc:	01040101 	tsteq	r4, r1, lsl #2
20005be0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005be4:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005be8:	00082220 	andeq	r2, r8, r0, lsr #4
20005bec:	01040100 	mrseq	r0, (UNDEF: 20)
20005bf0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005bf4:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005bf8:	00882420 	addeq	r2, r8, r0, lsr #8
20005bfc:	01040100 	mrseq	r0, (UNDEF: 20)
20005c00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005c04:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005c08:	01082420 	tsteq	r8, r0, lsr #8
20005c0c:	01045a00 	tsteq	r4, r0, lsl #20
20005c10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005c14:	0000007f 	andeq	r0, r0, pc, ror r0
20005c18:	01082420 	tsteq	r8, r0, lsr #8
20005c1c:	0104a400 	tsteq	r4, r0, lsl #8
20005c20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005c24:	00000001 	andeq	r0, r0, r1
20005c28:	010b2320 	tsteq	fp, r0, lsr #6
20005c2c:	01030001 	tsteq	r3, r1
20005c30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005c34:	00000000 	andeq	r0, r0, r0
20005c38:	00c4c020 	sbceq	ip, r4, r0, lsr #32
20005c3c:	02000002 	andeq	r0, r0, #2
20005c40:	3fffffff 	svccc	0x00ffffff
20005c44:	00000000 	andeq	r0, r0, r0
20005c48:	00000020 	andeq	r0, r0, r0, lsr #32
20005c4c:	02200002 	eoreq	r0, r0, #2
20005c50:	3fffffff 	svccc	0x00ffffff
20005c54:	00000000 	andeq	r0, r0, r0
20005c58:	00000020 	andeq	r0, r0, r0, lsr #32
20005c5c:	02400002 	subeq	r0, r0, #2
20005c60:	1fffffff 	svcne	0x00ffffff
20005c64:	00000000 	andeq	r0, r0, r0
20005c68:	80000020 	andhi	r0, r0, r0, lsr #32
20005c6c:	02400001 	subeq	r0, r0, #1
20005c70:	1fffffff 	svcne	0x00ffffff
20005c74:	00000000 	andeq	r0, r0, r0
20005c78:	00000010 	andeq	r0, r0, r0, lsl r0
20005c7c:	02400000 	subeq	r0, r0, #0
20005c80:	0fffffff 	svceq	0x00ffffff
20005c84:	00000000 	andeq	r0, r0, r0
20005c88:	00000010 	andeq	r0, r0, r0, lsl r0
20005c8c:	02300000 	eorseq	r0, r0, #0
20005c90:	0fffffff 	svceq	0x00ffffff
20005c94:	00000000 	andeq	r0, r0, r0
20005c98:	00000010 	andeq	r0, r0, r0, lsl r0
20005c9c:	02000000 	andeq	r0, r0, #0
20005ca0:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
20005ca4:	00000000 	andeq	r0, r0, r0
20005ca8:	00000010 	andeq	r0, r0, r0, lsl r0
20005cac:	04000000 	streq	r0, [r0], #-0
20005cb0:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
20005cb4:	00000000 	andeq	r0, r0, r0
20005cb8:	00000010 	andeq	r0, r0, r0, lsl r0
20005cbc:	04000000 	streq	r0, [r0], #-0
20005cc0:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20005dc7 <castle_gray_bits+0x67>	; <UNPREDICTABLE>
20005cc4:	00000000 	andeq	r0, r0, r0
20005cc8:	00000008 	andeq	r0, r0, r8
20005ccc:	04000000 	streq	r0, [r0], #-0
20005cd0:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20005dd7 <castle_gray_bits+0x77>	; <UNPREDICTABLE>
20005cd4:	00000000 	andeq	r0, r0, r0
20005cd8:	00000008 	andeq	r0, r0, r8
20005cdc:	04000000 	streq	r0, [r0], #-0
20005ce0:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20005ce4:	00000000 	andeq	r0, r0, r0
20005ce8:	00000008 	andeq	r0, r0, r8
20005cec:	060001c0 	streq	r0, [r0], -r0, asr #3
20005cf0:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20005cf4:	00000000 	andeq	r0, r0, r0
20005cf8:	00000008 	andeq	r0, r0, r8
20005cfc:	04000220 	streq	r0, [r0], #-544	; 0xfffffde0
20005d00:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
20005d04:	00000000 	andeq	r0, r0, r0
20005d08:	00000008 	andeq	r0, r0, r8
20005d0c:	04100400 	ldreq	r0, [r0], #-1024	; 0xfffffc00
20005d10:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
20005d14:	00000000 	andeq	r0, r0, r0
20005d18:	00000008 	andeq	r0, r0, r8
20005d1c:	04a00400 	strteq	r0, [r0], #1024	; 0x400
20005d20:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
20005d24:	00000000 	andeq	r0, r0, r0
20005d28:	00000008 	andeq	r0, r0, r8
20005d2c:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
20005d30:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
20005d34:	00000000 	andeq	r0, r0, r0
20005d38:	00000008 	andeq	r0, r0, r8
20005d3c:	07400400 	strbeq	r0, [r0, -r0, lsl #8]
20005d40:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20005d44:	00000000 	andeq	r0, r0, r0
20005d48:	00000008 	andeq	r0, r0, r8
20005d4c:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
20005d50:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20005d54:	00000000 	andeq	r0, r0, r0
20005d58:	00000008 	andeq	r0, r0, r8
20005d5c:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00

20005d60 <castle_gray_bits>:
	...
20005d68:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20005d6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
20005d78:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20005d7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
20005d88:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20005d8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005d90:	00000000 	andeq	r0, r0, r0
20005d94:	80000000 	andhi	r0, r0, r0
20005d98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005d9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005da0:	00000000 	andeq	r0, r0, r0
20005da4:	c0000000 	andgt	r0, r0, r0
20005da8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005dac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005db0:	00000000 	andeq	r0, r0, r0
20005db4:	e0000000 	and	r0, r0, r0
20005db8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005dbc:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
20005dc0:	00000000 	andeq	r0, r0, r0
20005dc4:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20005dc8:	f3ffcfff 			; <UNDEFINED> instruction: 0xf3ffcfff
20005dcc:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
20005dd0:	00000000 	andeq	r0, r0, r0
20005dd4:	fc000000 	stc2	0, cr0, [r0], {-0}
20005dd8:	f1ff8fff 			; <UNDEFINED> instruction: 0xf1ff8fff
20005ddc:	fff9ff3f 			; <UNDEFINED> instruction: 0xfff9ff3f
20005de0:	00000000 	andeq	r0, r0, r0
20005de4:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20005de8:	f0ff8fef 			; <UNDEFINED> instruction: 0xf0ff8fef
20005dec:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
20005df0:	00000000 	andeq	r0, r0, r0
20005df4:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20005df8:	e0ff87ef 	rscs	r8, pc, pc, ror #15
20005dfc:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
20005e00:	00000000 	andeq	r0, r0, r0
20005e04:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20005e08:	c07e07e7 	rsbsgt	r0, lr, r7, ror #15
20005e0c:	ffe0fc1f 			; <UNDEFINED> instruction: 0xffe0fc1f
20005e10:	00000000 	andeq	r0, r0, r0
20005e14:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20005e18:	001c07e7 	andseq	r0, ip, r7, ror #15
20005e1c:	ffe0380e 	vcmla.f32	d19, d0, d14[0], #170
20005e20:	00000000 	andeq	r0, r0, r0
20005e24:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20005e28:	000003e3 	andeq	r0, r0, r3, ror #7
20005e2c:	f7c00000 			; <UNDEFINED> instruction: 0xf7c00000
20005e30:	00000000 	andeq	r0, r0, r0
20005e34:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20005e38:	000001c3 	andeq	r0, r0, r3, asr #3
20005e3c:	e7800000 	str	r0, [r0, r0]
20005e40:	00000000 	andeq	r0, r0, r0
20005e44:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20005e48:	00000003 	andeq	r0, r0, r3
20005e4c:	c3800000 	orrgt	r0, r0, #0
20005e50:	00000000 	andeq	r0, r0, r0
20005e54:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20005e58:	00000001 	andeq	r0, r0, r1
20005e5c:	c0000000 	andgt	r0, r0, r0
20005e60:	00000000 	andeq	r0, r0, r0
20005e64:	9ff00000 	svcls	0x00f00000	; IMB
20005e68:	00000001 	andeq	r0, r0, r1
20005e6c:	80000000 	andhi	r0, r0, r0
20005e70:	00000000 	andeq	r0, r0, r0
20005e74:	8ff00000 	svchi	0x00f00000	; IMB
20005e78:	00000000 	andeq	r0, r0, r0
20005e7c:	80000000 	andhi	r0, r0, r0
20005e80:	00000000 	andeq	r0, r0, r0
20005e84:	8ff80000 	svchi	0x00f80000
	...
20005e94:	0ffc0000 	svceq	0x00fc0000
	...
20005ea4:	0ffc0000 	svceq	0x00fc0000
	...
20005eb4:	0ffc0000 	svceq	0x00fc0000
	...
20005ec4:	0ffc0000 	svceq	0x00fc0000
	...
20005ed4:	0ffc0000 	svceq	0x00fc0000
	...
20005ee4:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
20005ef4:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
20005f04:	07fe0000 	ldrbeq	r0, [lr, r0]!
20005f08:	03800000 	orreq	r0, r0, #0
	...
20005f14:	03fe0000 	mvnseq	r0, #0
20005f18:	02000000 	andeq	r0, r0, #0
	...
20005f24:	03ff0000 	mvnseq	r0, #0
20005f28:	02000000 	andeq	r0, r0, #0
	...
20005f34:	03ff0000 	mvnseq	r0, #0
20005f38:	02000000 	andeq	r0, r0, #0
	...
20005f44:	03ff0000 	mvnseq	r0, #0
20005f48:	02000000 	andeq	r0, r0, #0
	...
20005f54:	03ff0000 	mvnseq	r0, #0
20005f58:	02800c00 	addeq	r0, r0, #0, 24
20005f5c:	00000060 	andeq	r0, r0, r0, rrx
20005f60:	00000000 	andeq	r0, r0, r0
20005f64:	03ff0000 	mvnseq	r0, #0
20005f68:	03000800 	movweq	r0, #2048	; 0x800
20005f6c:	00000040 	andeq	r0, r0, r0, asr #32
20005f70:	00000000 	andeq	r0, r0, r0
20005f74:	03ff0000 	mvnseq	r0, #0
20005f78:	03000800 	movweq	r0, #2048	; 0x800
20005f7c:	00000040 	andeq	r0, r0, r0, asr #32
20005f80:	00000000 	andeq	r0, r0, r0
20005f84:	03ff8000 	mvnseq	r8, #0
20005f88:	03000a00 	movweq	r0, #2560	; 0xa00
20005f8c:	00000040 	andeq	r0, r0, r0, asr #32
20005f90:	00000000 	andeq	r0, r0, r0
20005f94:	01ffb000 	mvnseq	fp, r0
20005f98:	03000c00 	movweq	r0, #3072	; 0xc00
20005f9c:	00000040 	andeq	r0, r0, r0, asr #32
20005fa0:	00000000 	andeq	r0, r0, r0
20005fa4:	01fff800 	mvnseq	pc, r0, lsl #16
20005fa8:	07800c00 	streq	r0, [r0, r0, lsl #24]
20005fac:	00000060 	andeq	r0, r0, r0, rrx
20005fb0:	00000000 	andeq	r0, r0, r0
20005fb4:	01fffc00 	mvnseq	pc, r0, lsl #24
20005fb8:	04001800 	streq	r1, [r0], #-2048	; 0xfffff800
20005fbc:	00c00058 	sbceq	r0, r0, r8, asr r0
20005fc0:	00000000 	andeq	r0, r0, r0
20005fc4:	00fffc00 	rscseq	pc, pc, r0, lsl #24
20005fc8:	06001400 	streq	r1, [r0], -r0, lsl #8
20005fcc:	00c000c0 	sbceq	r0, r0, r0, asr #1
20005fd0:	00000000 	andeq	r0, r0, r0
20005fd4:	007ffc00 	rsbseq	pc, pc, r0, lsl #24
20005fd8:	45001000 	strmi	r1, [r0, #-0]
20005fdc:	008000a0 	addeq	r0, r0, r0, lsr #1
20005fe0:	00000000 	andeq	r0, r0, r0
20005fe4:	007ffe00 	rsbseq	pc, pc, r0, lsl #28
20005fe8:	80001000 	andhi	r1, r0, r0
20005fec:	008000c1 	addeq	r0, r0, r1, asr #1
20005ff0:	00000000 	andeq	r0, r0, r0
20005ff4:	003ffe00 	eorseq	pc, pc, r0, lsl #28
20005ff8:	00001000 	andeq	r1, r0, r0
20005ffc:	00a000f0 	strdeq	r0, [r0], r0	; <UNPREDICTABLE>
20006000:	00000000 	andeq	r0, r0, r0
20006004:	003fff00 	eorseq	pc, pc, r0, lsl #30
20006008:	00001000 	andeq	r1, r0, r0
2000600c:	00c000e0 	sbceq	r0, r0, r0, ror #1
20006010:	00000000 	andeq	r0, r0, r0
20006014:	001fff80 	andseq	pc, pc, r0, lsl #31
20006018:	02001800 	andeq	r1, r0, #0, 16
2000601c:	00c000c0 	sbceq	r0, r0, r0, asr #1
20006020:	00000000 	andeq	r0, r0, r0
20006024:	0019fffe 			; <UNDEFINED> instruction: 0x0019fffe
20006028:	02001400 	andeq	r1, r0, #0, 8
2000602c:	00803000 	addeq	r3, r0, r0
20006030:	00000000 	andeq	r0, r0, r0
20006034:	0018ffff 			; <UNDEFINED> instruction: 0x0018ffff
20006038:	05033f00 	streq	r3, [r3, #-3840]	; 0xfffff100
2000603c:	01000000 	mrseq	r0, (UNDEF: 0)
20006040:	c0000000 	andgt	r0, r0, r0
20006044:	0008ffff 	strdeq	pc, [r8], -pc	; <UNPREDICTABLE>
20006048:	00c0e400 	sbceq	lr, r0, r0, lsl #8
2000604c:	01000004 	tsteq	r0, r4
20006050:	c0000000 	andgt	r0, r0, r0
20006054:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20006058:	00002000 	andeq	r2, r0, r0
2000605c:	01000008 	tsteq	r0, r8
20006060:	e0000000 	and	r0, r0, r0
20006064:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20006068:	00001000 	andeq	r1, r0, r0
2000606c:	01000006 	tsteq	r0, r6
20006070:	e0000000 	and	r0, r0, r0
20006074:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
20006078:	80000000 	andhi	r0, r0, r0
2000607c:	01800001 	orreq	r0, r0, r1
20006080:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20006084:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
20006088:	00400000 	subeq	r0, r0, r0
2000608c:	01400000 	mrseq	r0, (UNDEF: 64)
20006090:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20006094:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
20006098:	03800000 	orreq	r0, r0, #0
2000609c:	01300000 	teqeq	r0, r0
200060a0:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200060a4:	00001bff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
200060a8:	10e00000 	rscne	r0, r0, r0
200060ac:	03000000 	movweq	r0, #0
200060b0:	fc000000 	stc2	0, cr0, [r0], {-0}
200060b4:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200060b8:	0f800000 	svceq	0x00800000
200060bc:	03900000 	orrseq	r0, r0, #0
200060c0:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
200060c4:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200060c8:	00000000 	andeq	r0, r0, r0
200060cc:	03e00000 	mvneq	r0, #0
200060d0:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
200060d4:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200060d8:	00000000 	andeq	r0, r0, r0
200060dc:	03f40000 	mvnseq	r0, #0
200060e0:	ff000000 			; <UNDEFINED> instruction: 0xff000000
200060e4:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200060e8:	00002000 	andeq	r2, r0, r0
200060ec:	01f80000 	mvnseq	r0, r0
200060f0:	ff000000 			; <UNDEFINED> instruction: 0xff000000
200060f4:	0000007f 	andeq	r0, r0, pc, ror r0
200060f8:	0010c000 	andseq	ip, r0, r0
200060fc:	03f80000 	mvnseq	r0, #0
20006100:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20006104:	0000003f 	andeq	r0, r0, pc, lsr r0
20006108:	000f0000 	andeq	r0, pc, r0
2000610c:	03e000e0 	mvneq	r0, #224	; 0xe0
20006110:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20006114:	0000001f 	andeq	r0, r0, pc, lsl r0
20006118:	00026000 	andeq	r6, r2, r0
2000611c:	035001f0 	cmpeq	r0, #240, 2	; 0x3c
20006120:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20006124:	0000001f 	andeq	r0, r0, pc, lsl r0
20006128:	00118000 	andseq	r8, r1, r0
2000612c:	03ec01f0 	mvneq	r0, #240, 2	; 0x3c
20006130:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
20006134:	0000000f 	andeq	r0, r0, pc
20006138:	200e0000 	andcs	r0, lr, r0
2000613c:	00a022f0 	strdeq	r2, [r0], r0	; <UNPREDICTABLE>
20006140:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
20006144:	00000007 	andeq	r0, r0, r7
20006148:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
2000614c:	03c0c170 	biceq	ip, r0, #112, 2
20006150:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
20006154:	00000003 	andeq	r0, r0, r3
20006158:	e4000000 	str	r0, [r0], #-0
2000615c:	03c270f3 	biceq	r7, r2, #243	; 0xf3

20006160 <castle_light_bits>:
	...
200061bc:	00000040 	andeq	r0, r0, r0, asr #32
	...
200061c8:	0c003000 	stceq	0, cr3, [r0], {-0}
200061cc:	00000040 	andeq	r0, r0, r0, asr #32
	...
200061d8:	0e007000 	cdpeq	0, 0, cr7, cr0, cr0, {0}
200061dc:	000600c0 	andeq	r0, r6, r0, asr #1
	...
200061e8:	0f007010 	svceq	0x00007010
200061ec:	000601e0 	andeq	r0, r6, r0, ror #3
	...
200061f8:	1f007810 	svcne	0x00007810
200061fc:	000601e0 	andeq	r0, r6, r0, ror #3
	...
20006208:	3f81f818 	svccc	0x0081f818
2000620c:	001f03e0 	andseq	r0, pc, r0, ror #7
	...
20006218:	ffe3f818 			; <UNDEFINED> instruction: 0xffe3f818
2000621c:	001fc7f1 			; <UNDEFINED> instruction: 0x001fc7f1
	...
20006228:	fffffc1c 			; <UNDEFINED> instruction: 0xfffffc1c
2000622c:	083fffff 	ldmdaeq	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
	...
20006238:	fffffe3c 			; <UNDEFINED> instruction: 0xfffffe3c
2000623c:	187fffff 	ldmdane	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
	...
20006248:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
2000624c:	3c7fffff 	ldclcc	15, cr15, [pc], #-1020	; 20005e58 <castle_gray_bits+0xf8>
	...
20006258:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
2000625c:	3fffffff 	svccc	0x00ffffff
20006260:	00000000 	andeq	r0, r0, r0
20006264:	60000000 	andvs	r0, r0, r0
20006268:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
2000626c:	7fffffff 	svcvc	0x00ffffff
20006270:	00000000 	andeq	r0, r0, r0
20006274:	70000000 	andvc	r0, r0, r0
20006278:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000627c:	7fffffff 	svcvc	0x00ffffff
20006280:	00000000 	andeq	r0, r0, r0
20006284:	70000000 	andvc	r0, r0, r0
20006288:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000628c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006290:	00000000 	andeq	r0, r0, r0
20006294:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20006298:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000629c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200062a0:	00000000 	andeq	r0, r0, r0
200062a4:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
200062a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200062ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200062b0:	00000000 	andeq	r0, r0, r0
200062b4:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
200062b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200062bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200062c0:	00000000 	andeq	r0, r0, r0
200062c4:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
200062c8:	fb6fffff 	blx	21c062ce <firstTime.4040+0x1bfd676>
200062cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200062d0:	00000000 	andeq	r0, r0, r0
200062d4:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
200062d8:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
200062dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200062e0:	00000000 	andeq	r0, r0, r0
200062e4:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200062e8:	f407ffff 			; <UNDEFINED> instruction: 0xf407ffff
200062ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200062f0:	00000000 	andeq	r0, r0, r0
200062f4:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200062f8:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
200062fc:	ffffff6d 			; <UNDEFINED> instruction: 0xffffff6d
20006300:	00000000 	andeq	r0, r0, r0
20006304:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20006308:	f80fffff 			; <UNDEFINED> instruction: 0xf80fffff
2000630c:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20006310:	00000000 	andeq	r0, r0, r0
20006314:	fc000000 	stc2	0, cr0, [r0], {-0}
20006318:	f80fedbf 			; <UNDEFINED> instruction: 0xf80fedbf
2000631c:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20006320:	00000000 	andeq	r0, r0, r0
20006324:	fc000000 	stc2	0, cr0, [r0], {-0}
20006328:	f80fc01f 			; <UNDEFINED> instruction: 0xf80fc01f
2000632c:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
20006330:	00000000 	andeq	r0, r0, r0
20006334:	fc000000 	stc2	0, cr0, [r0], {-0}
20006338:	f90fc81f 			; <UNDEFINED> instruction: 0xf90fc81f
2000633c:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
20006340:	00000000 	andeq	r0, r0, r0
20006344:	fc000000 	stc2	0, cr0, [r0], {-0}
20006348:	f90fd41f 			; <UNDEFINED> instruction: 0xf90fd41f
2000634c:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20006350:	00000000 	andeq	r0, r0, r0
20006354:	fc000000 	stc2	0, cr0, [r0], {-0}
20006358:	f90fe03f 			; <UNDEFINED> instruction: 0xf90fe03f
2000635c:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
20006360:	00000000 	andeq	r0, r0, r0
20006364:	fc000000 	stc2	0, cr0, [r0], {-0}
20006368:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
2000636c:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
20006370:	00000000 	andeq	r0, r0, r0
20006374:	fc000000 	stc2	0, cr0, [r0], {-0}
20006378:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
2000637c:	fedbff19 	mrc2	15, 6, pc, cr11, cr9, {0}
20006380:	00000000 	andeq	r0, r0, r0
20006384:	fc000000 	stc2	0, cr0, [r0], {-0}
20006388:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
2000638c:	fd01ff11 	stc2	15, cr15, [r1, #-68]	; 0xffffffbc
20006390:	00000000 	andeq	r0, r0, r0
20006394:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20006398:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
2000639c:	fd01ff19 	stc2	15, cr15, [r1, #-100]	; 0xffffff9c
200063a0:	00000000 	andeq	r0, r0, r0
200063a4:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
200063a8:	f007e03f 			; <UNDEFINED> instruction: 0xf007e03f
200063ac:	fc01ff01 	stc2	15, cr15, [r1], {1}
200063b0:	00000000 	andeq	r0, r0, r0
200063b4:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
200063b8:	f007c01f 			; <UNDEFINED> instruction: 0xf007c01f
200063bc:	fe03ff01 	cdp2	15, 0, cr15, cr3, cr1, {0}
200063c0:	00000000 	andeq	r0, r0, r0
200063c4:	ff000000 			; <UNDEFINED> instruction: 0xff000000
200063c8:	b007c01f 	andlt	ip, r7, pc, lsl r0
200063cc:	fe03fe01 	cdp2	14, 0, cr15, cr3, cr1, {0}
200063d0:	00000000 	andeq	r0, r0, r0
200063d4:	ff800000 			; <UNDEFINED> instruction: 0xff800000
200063d8:	0007c01f 	andeq	ip, r7, pc, lsl r0
200063dc:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
200063e0:	00000000 	andeq	r0, r0, r0
200063e4:	ff800000 			; <UNDEFINED> instruction: 0xff800000
200063e8:	0007c01f 	andeq	ip, r7, pc, lsl r0
200063ec:	fe03fe10 	mcr2	14, 0, pc, cr3, cr0, {0}	; <UNPREDICTABLE>
200063f0:	00000000 	andeq	r0, r0, r0
200063f4:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
200063f8:	0007c21f 	andeq	ip, r7, pc, lsl r2
200063fc:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
20006400:	00000000 	andeq	r0, r0, r0
20006404:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20006408:	0087c31f 	addeq	ip, r7, pc, lsl r3
2000640c:	fe03a400 	cdp2	4, 0, cr10, cr3, cr0, {0}
20006410:	00000000 	andeq	r0, r0, r0
20006414:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20006418:	00c7c31f 	sbceq	ip, r7, pc, lsl r3
2000641c:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
20006420:	00000000 	andeq	r0, r0, r0
20006424:	ffe60000 			; <UNDEFINED> instruction: 0xffe60000
20006428:	00c4c01f 	sbceq	ip, r4, pc, lsl r0
2000642c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20006430:	00000000 	andeq	r0, r0, r0
20006434:	ffe70000 			; <UNDEFINED> instruction: 0xffe70000
20006438:	8000001f 	andhi	r0, r0, pc, lsl r0
2000643c:	fc000001 	stc2	0, cr0, [r0], {1}
20006440:	00000000 	andeq	r0, r0, r0
20006444:	fff70000 			; <UNDEFINED> instruction: 0xfff70000
20006448:	8000001f 	andhi	r0, r0, pc, lsl r0
2000644c:	fc000009 	stc2	0, cr0, [r0], {9}
20006450:	00000000 	andeq	r0, r0, r0
20006454:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20006458:	8000001f 	andhi	r0, r0, pc, lsl r0
2000645c:	fc200001 	stc2	0, cr0, [r0], #-4
20006460:	00000000 	andeq	r0, r0, r0
20006464:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20006468:	0000001f 	andeq	r0, r0, pc, lsl r0
2000646c:	fc300000 	ldc2	0, cr0, [r0], #-0
20006470:	00000000 	andeq	r0, r0, r0
20006474:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20006478:	0000000f 	andeq	r0, r0, pc
2000647c:	fc300000 	ldc2	0, cr0, [r0], #-0
20006480:	00000000 	andeq	r0, r0, r0
20006484:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20006488:	0000000f 	andeq	r0, r0, pc
2000648c:	fc000000 	stc2	0, cr0, [r0], {-0}
20006490:	00000000 	andeq	r0, r0, r0
20006494:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
20006498:	1000000f 	andne	r0, r0, pc
2000649c:	fc000000 	stc2	0, cr0, [r0], {-0}
200064a0:	00000000 	andeq	r0, r0, r0
200064a4:	ffffe400 			; <UNDEFINED> instruction: 0xffffe400
200064a8:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
200064ac:	f8080000 			; <UNDEFINED> instruction: 0xf8080000
200064b0:	00000000 	andeq	r0, r0, r0
200064b4:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200064b8:	0000000f 	andeq	r0, r0, pc
200064bc:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200064c0:	00000000 	andeq	r0, r0, r0
200064c4:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200064c8:	00000007 	andeq	r0, r0, r7
200064cc:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
200064d0:	00000000 	andeq	r0, r0, r0
200064d4:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
200064d8:	00000007 	andeq	r0, r0, r7
200064dc:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
200064e0:	00000000 	andeq	r0, r0, r0
200064e4:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
200064e8:	00100007 	andseq	r0, r0, r7
200064ec:	f8040000 			; <UNDEFINED> instruction: 0xf8040000
200064f0:	00000000 	andeq	r0, r0, r0
200064f4:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
200064f8:	00080007 	andeq	r0, r8, r7
200064fc:	f80001c0 			; <UNDEFINED> instruction: 0xf80001c0
20006500:	00000000 	andeq	r0, r0, r0
20006504:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
20006508:	00000007 	andeq	r0, r0, r7
2000650c:	f8080300 			; <UNDEFINED> instruction: 0xf8080300
20006510:	00000000 	andeq	r0, r0, r0
20006514:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
20006518:	00200007 	eoreq	r0, r0, r7
2000651c:	f8080200 			; <UNDEFINED> instruction: 0xf8080200
20006520:	00000000 	andeq	r0, r0, r0
20006524:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
20006528:	00000007 	andeq	r0, r0, r7
2000652c:	f8000200 			; <UNDEFINED> instruction: 0xf8000200
20006530:	00000000 	andeq	r0, r0, r0
20006534:	fffffff0 			; <UNDEFINED> instruction: 0xfffffff0
20006538:	00000007 	andeq	r0, r0, r7
2000653c:	f8000100 			; <UNDEFINED> instruction: 0xf8000100
20006540:	00000000 	andeq	r0, r0, r0
20006544:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
20006548:	01000007 	tsteq	r0, r7
2000654c:	f8100280 			; <UNDEFINED> instruction: 0xf8100280
20006550:	00000000 	andeq	r0, r0, r0
20006554:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20006558:	02000007 	andeq	r0, r0, #7
2000655c:	f8000300 			; <UNDEFINED> instruction: 0xf8000300

20006560 <title_light_bits>:
	...
2000657c:	00000400 	andeq	r0, r0, r0, lsl #8
20006580:	30000000 	andcc	r0, r0, r0
20006584:	f80f9e06 			; <UNDEFINED> instruction: 0xf80f9e06
20006588:	06300000 	ldrteq	r0, [r0], -r0
2000658c:	00cb8cba 	strheq	r8, [fp], #202	; 0xca
20006590:	ba033000 	blt	200d2598 <firstTime.4040+0xc9940>
20006594:	0000eb4f 	andeq	lr, r0, pc, asr #22
20006598:	439ef3f0 	orrsmi	pc, lr, #240, 6	; 0xc0000003
2000659c:	f000003a 			; <UNDEFINED> instruction: 0xf000003a
200065a0:	5a478e9b 	bpl	211ea014 <firstTime.4040+0x11e13bc>
200065a4:	9b300000 	blls	20c065ac <firstTime.4040+0xbfd954>
200065a8:	019bcd36 	orrseq	ip, fp, r6, lsr sp
200065ac:	66db3000 	ldrbvs	r3, [fp], r0
200065b0:	000319d9 	ldrdeq	r1, [r3], -r9
200065b4:	19667330 	stmdbne	r6!, {r4, r5, r8, r9, ip, sp, lr}^
200065b8:	30000310 	andcc	r0, r0, r0, lsl r3
200065bc:	00000001 	andeq	r0, r0, r1
200065c0:	80000000 	andhi	r0, r0, r0
200065c4:	001d3e7b 	andseq	r3, sp, fp, ror lr
200065c8:	0ac00000 	beq	1f0065d0 <startup-0xff9a30>
200065cc:	00000528 	andeq	r0, r0, r8, lsr #10
200065d0:	ec3a4000 	ldc	0, cr4, [sl], #-0
200065d4:	0000000d 	andeq	r0, r0, sp
200065d8:	05240bc0 	streq	r0, [r4, #-3008]!	; 0xfffff440
200065dc:	00f00000 	rscseq	r0, r0, r0
200065e0:	001c0000 	andseq	r0, ip, r0
200065e4:	03ebb000 	mvneq	fp, #0
200065e8:	00000000 	andeq	r0, r0, r0
200065ec:	0c032330 	stceq	3, cr2, [r3], {48}	; 0x30
200065f0:	300123e4 	andcc	r2, r1, r4, ror #7
200065f4:	940c1b2a 	strls	r1, [ip], #-2858	; 0xfffff4d6
200065f8:	ea300120 	b	20c06a80 <firstTime.4040+0xbfde28>
200065fc:	ec860c3d 	stc	12, cr0, [r6], {61}	; 0x3d
20006600:	06ea3001 	strbteq	r3, [sl], r1
20006604:	01e69648 	mvneq	r9, r8, asr #12
20006608:	4b9e6b30 	blmi	1e7a12d0 <startup-0x185ed30>
2000660c:	30012696 	mulcc	r1, r6, r6
20006610:	92bbb06b 	adcsls	fp, fp, #107	; 0x6b
20006614:	69f00126 	ldmibvs	r0!, {r1, r2, r5, r8}^
20006618:	2691b832 			; <UNDEFINED> instruction: 0x2691b832
2000661c:	1e687001 	cdpne	0, 6, cr7, cr8, cr1, {0}
20006620:	010e9110 	tsteq	lr, r0, lsl r1
	...

20006634 <title_gray_bits>:
	...
2000663c:	40000000 	andmi	r0, r0, r0
20006640:	0f840000 	svceq	0x00840000
20006644:	00b0c3fe 	ldrshteq	ip, [r0], lr
20006648:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
2000664c:	001f8f1f 	andseq	r8, pc, pc, lsl pc	; <UNPREDICTABLE>
20006650:	fffffbf8 			; <UNDEFINED> instruction: 0xfffffbf8
20006654:	c8001fff 	stmdagt	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
20006658:	07f061f9 			; <UNDEFINED> instruction: 0x07f061f9
2000665c:	f1cc001f 			; <UNDEFINED> instruction: 0xf1cc001f
20006660:	be347305 	cdplt	3, 3, cr7, cr4, cr5, {0}
20006664:	05f0ce00 	ldrbeq	ip, [r0, #3584]!	; 0xe00
20006668:	007e1430 	rsbseq	r1, lr, r0, lsr r4
2000666c:	2041080f 	subcs	r0, r1, pc, lsl #16
20006670:	0e003e01 	cdpeq	14, 0, cr3, cr0, cr1, {0}
20006674:	01384060 	teqeq	r8, r0, rrx
20006678:	600c001e 	andvs	r0, ip, lr, lsl r0
2000667c:	1c4030c0 	mcrrne	0, 12, r3, r0, cr0
20006680:	10208c00 	eorne	r8, r0, r0, lsl #24
20006684:	0038c024 	eorseq	ip, r8, r4, lsr #32
20006688:	0411088c 	ldreq	r0, [r1], #-2188	; 0xfffff774
2000668c:	c800f8ce 	stmdagt	r0, {r1, r2, r3, r6, r7, fp, ip, sp, lr, pc}
20006690:	ffe6990c 			; <UNDEFINED> instruction: 0xffe6990c
20006694:	7cfa0178 	ldfvce	f0, [sl], #480	; 0x1e0
20006698:	3fe0c184 	svccc	0x00e0c184
2000669c:	013ff400 	teqeq	pc, r0, lsl #8	; <UNPREDICTABLE>
200066a0:	001fc0c7 	andseq	ip, pc, r7, asr #1
200066a4:	03c03ff0 	biceq	r3, r0, #240, 30	; 0x3c0
200066a8:	fc0007e0 	stc2	7, cr0, [r0], {224}	; 0xe0
200066ac:	e003803f 	and	r8, r3, pc, lsr r0
200066b0:	7f0c009f 	svcvc	0x000c009f
200066b4:	ffc1fbe4 			; <UNDEFINED> instruction: 0xffc1fbe4
200066b8:	fc140c03 	ldc2	12, cr0, [r4], {3}
200066bc:	03ffc7ff 	mvnseq	ip, #66846720	; 0x3fc0000
200066c0:	f3fc1c0c 	vdup.32	d17, d12[1]
200066c4:	0e02dc1b 	mcreq	12, 0, sp, cr2, cr11, {0}
200066c8:	63f3e490 	mvnsvs	lr, #144, 8	; 0x90000000
200066cc:	018e0218 	orreq	r0, lr, r8, lsl r2
200066d0:	1251e382 	subsne	lr, r1, #134217730	; 0x8000002
200066d4:	88018e02 	stmdahi	r1, {r1, r9, sl, fp, pc}
200066d8:	020061a7 	andeq	r6, r0, #-1073741783	; 0xc0000029
200066dc:	2460008e 	strbtcs	r0, [r0], #-142	; 0xffffff72
200066e0:	8e021041 	cdphi	0, 0, cr1, cr2, cr1, {2}
200066e4:	41000300 	mrsmi	r0, LR_irq
200066e8:	000e0290 	muleq	lr, r0, r2
200066ec:	9048008d 	subls	r0, r8, sp, lsl #1
200066f0:	81040c02 	tsthi	r4, r2, lsl #24
200066f4:	02a04c87 	adceq	r4, r0, #34560	; 0x8700
200066f8:	cffffffc 	svcgt	0x00fffffc
200066fc:	8203e2fc 	andhi	lr, r3, #252, 4	; 0xc000000f
20006700:	e3f81c07 	mvns	r1, #1792	; 0x700
20006704:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20006708 <title_black_bits>:
	...
20006730:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
20006734:	01000040 	tsteq	r0, r0, asr #32
20006738:	400c0000 	andmi	r0, ip, r0
2000673c:	00010080 	andeq	r0, r1, r0, lsl #1
20006740:	9c200400 	cfstrsls	mvf0, [r0], #-0
20006744:	000001c4 	andeq	r0, r0, r4, asr #3
20006748:	a4803104 	strge	r3, [r0], #260	; 0x104
2000674c:	04c00001 	strbeq	r0, [r0], #1
20006750:	02240209 	eoreq	r0, r4, #-1879048192	; 0x90000000
20006754:	89044000 	stmdbhi	r4, {lr}
20006758:	00042602 	andeq	r2, r4, r2, lsl #12
2000675c:	e2888440 	add	r8, r8, #64, 8	; 0x40000000
20006760:	00000421 	andeq	r0, r0, r1, lsr #8
20006764:	001966f2 			; <UNDEFINED> instruction: 0x001966f2
20006768:	03000007 	movweq	r0, #7
2000676c:	00020000 	andeq	r0, r2, r0
20006770:	f4000000 	vst4.8	{d0-d3}, [r0], r0
20006774:	00003a10 	andeq	r3, r0, r0, lsl sl
20006778:	10058000 	andne	r8, r5, r0
2000677c:	00000012 	andeq	r0, r0, r2, lsl r0
20006780:	1ad87400 	bne	1f623788 <startup-0x9dc878>
20006784:	80000000 	andhi	r0, r0, r0
20006788:	0022041b 	eoreq	r0, r2, fp, lsl r4
2000678c:	00004000 	andeq	r4, r0, r0
20006790:	00003800 	andeq	r3, r0, r0, lsl #16
20006794:	0000c0c0 	andeq	ip, r0, r0, asr #1
20006798:	c0000000 	andgt	r0, r0, r0
2000679c:	08000045 	stmdaeq	r0, {r0, r2, r6}
200067a0:	144000c7 	strbne	r0, [r0], #-199	; 0xffffff39
200067a4:	01281040 			; <UNDEFINED> instruction: 0x01281040
200067a8:	71144000 	tstvc	r4, r0
200067ac:	00190810 	andseq	r0, r9, r0, lsl r8
200067b0:	90019440 	andls	r9, r1, r0, asr #8
200067b4:	4000c928 	andmi	ip, r0, r8, lsr #18
200067b8:	2c444c94 	mcrrcs	12, 9, r4, r4, cr4
200067bc:	96000049 	strls	r0, [r0], -r9, asr #32
200067c0:	49264740 	stmdbmi	r6!, {r6, r8, r9, sl, lr}
200067c4:	60938000 	addsvs	r8, r3, r0
200067c8:	00512268 	subseq	r2, r1, r8, ror #4
200067cc:	30000000 	andcc	r0, r0, r0
200067d0:	00001d03 	andeq	r1, r0, r3, lsl #26
	...

200067dc <bg_bits>:
	...
200067ec:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
200067f0:	0000001f 	andeq	r0, r0, pc, lsl r0
	...
200067fc:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
20006800:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
2000680c:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
20006810:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
	...
2000681c:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20006820:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
	...
2000682c:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20006830:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
2000683c:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20006840:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
2000684c:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
20006850:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20006957 <bg_bits+0x17b>	; <UNPREDICTABLE>
20006854:	0001f000 	andeq	pc, r1, r0
20006858:	00000000 	andeq	r0, r0, r0
2000685c:	007fe000 	rsbseq	lr, pc, r0
20006860:	0ffffffe 	svceq	0x00fffffe
20006864:	0003f800 	andeq	pc, r3, r0, lsl #16
20006868:	00000000 	andeq	r0, r0, r0
2000686c:	003fe000 	eorseq	lr, pc, r0
20006870:	7fffffc0 	svcvc	0x00ffffc0
20006874:	0003f800 	andeq	pc, r3, r0, lsl #16
20006878:	001f8000 	andseq	r8, pc, r0
2000687c:	001fe000 	andseq	lr, pc, r0
20006880:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20006884:	0003f801 	andeq	pc, r3, r1, lsl #16
20006888:	003fc000 	eorseq	ip, pc, r0
2000688c:	003fe000 	eorseq	lr, pc, r0
20006890:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
20006894:	3f83f807 	svccc	0x0083f807
20006898:	003fe000 	eorseq	lr, pc, r0
2000689c:	01ffe000 	mvnseq	lr, r0
200068a0:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200068a4:	7fc3f80f 	svcvc	0x00c3f80f
200068a8:	003fe7f8 	ldrshteq	lr, [pc], -r8
200068ac:	07ffe000 	ldrbeq	lr, [pc, r0]!
200068b0:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
200068b4:	7fe1f01f 	svcvc	0x00e1f01f
200068b8:	003ffffc 	ldrshteq	pc, [pc], -ip	; <UNPREDICTABLE>
200068bc:	3fffc000 	svccc	0x00ffc000
200068c0:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
200068c4:	7ff0003f 	svcvc	0x00f0003f
200068c8:	007ffffc 	ldrshteq	pc, [pc], #-252	; <UNPREDICTABLE>
200068cc:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
200068d0:	ff000000 			; <UNDEFINED> instruction: 0xff000000
200068d4:	7ff8007f 	svcvc	0x00f8007f
200068d8:	3ffffffc 	svccc	0x00fffffc
200068dc:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
200068e0:	f8000003 			; <UNDEFINED> instruction: 0xf8000003
200068e4:	7ffc00ff 	svcvc	0x00fc00ff
200068e8:	7ffffffc 	svcvc	0x00fffffc
200068ec:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200068f0:	e000000f 	and	r0, r0, pc
200068f4:	7ffe01ff 	svcvc	0x00fe01ff
200068f8:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
200068fc:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
20006900:	8000001f 	andhi	r0, r0, pc, lsl r0
20006904:	7fff01ff 	svcvc	0x00ff01ff
20006908:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
2000690c:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20006910:	0000007f 	andeq	r0, r0, pc, ror r0
20006914:	7fff83ff 	svcvc	0x00ff83ff
20006918:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
2000691c:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20006920:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006924:	7fffc3fe 	svcvc	0x00ffc3fe
20006928:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
2000692c:	fc7ffff0 	ldc2l	15, cr15, [pc], #-960	; 20006574 <title_light_bits+0x14>
20006930:	07c001ff 			; <UNDEFINED> instruction: 0x07c001ff
20006934:	7fffe7fc 	svcvc	0x00ffe7fc
20006938:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
2000693c:	f0fffffe 			; <UNDEFINED> instruction: 0xf0fffffe
20006940:	0fe007ff 	svceq	0x00e007ff
20006944:	7ffff7fc 	svcvc	0x00fff7fc
20006948:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
2000694c:	c0ffffff 	ldrshtgt	pc, [pc], #255	; <UNPREDICTABLE>
20006950:	0fe00fff 	svceq	0x00e00fff
20006954:	7ffffff8 	svcvc	0x00fffff8
20006958:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
2000695c:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20006a63 <bg_bits+0x287>	; <UNPREDICTABLE>
20006960:	0fe01fff 	svceq	0x00e01fff
20006964:	7ffffff8 	svcvc	0x00fffff8
20006968:	7ffffc00 	svcvc	0x00fffc00
2000696c:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20006a73 <bg_bits+0x297>	; <UNPREDICTABLE>
20006970:	0fe03ffe 	svceq	0x00e03ffe
20006974:	3fdffff0 	svccc	0x00dffff0
20006978:	3ffffe00 	svccc	0x00fffe00
2000697c:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20006a83 <bg_bits+0x2a7>	; <UNPREDICTABLE>
20006980:	0fe03ff8 	svceq	0x00e03ff8
20006984:	3fe7fff0 	svccc	0x00e7fff0
20006988:	07fffe00 	ldrbeq	pc, [pc, r0, lsl #28]!	; <UNPREDICTABLE>
2000698c:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
20006990:	07c07ff0 			; <UNDEFINED> instruction: 0x07c07ff0
20006994:	1fe7fff0 	svcne	0x00e7fff0
20006998:	0ffffe00 	svceq	0x00fffe00
2000699c:	03fc00ff 	mvnseq	r0, #255	; 0xff
200069a0:	0000ffe0 	andeq	pc, r0, r0, ror #31
200069a4:	1ff3ffe0 	svcne	0x00f3ffe0
200069a8:	1ffffe00 	svcne	0x00fffe00
200069ac:	03fc001f 	mvnseq	r0, #31
200069b0:	0001ff80 	andeq	pc, r1, r0, lsl #31
200069b4:	1ff9ffe0 	svcne	0x00f9ffe0
200069b8:	3ffffe00 	svccc	0x00fffe00
200069bc:	03fc0007 	mvnseq	r0, #7
200069c0:	0001ff80 	andeq	pc, r1, r0, lsl #31
200069c4:	0ffcffe0 	svceq	0x00fcffe0
200069c8:	3ffdfe00 	svccc	0x00fdfe00
200069cc:	07f80007 	ldrbeq	r0, [r8, r7]!
200069d0:	0003ff00 	andeq	pc, r3, r0, lsl #30
200069d4:	0ffe7ff0 	svceq	0x00fe7ff0
200069d8:	3ffcfe00 	svccc	0x00fcfe00
200069dc:	07f80003 	ldrbeq	r0, [r8, r3]!
200069e0:	0007fe00 	andeq	pc, r7, r0, lsl #28
200069e4:	07fe7ff8 			; <UNDEFINED> instruction: 0x07fe7ff8
200069e8:	3ff8fe00 	svccc	0x00f8fe00
200069ec:	0ff80003 	svceq	0x00f80003
200069f0:	0007fc00 	andeq	pc, r7, r0, lsl #24
200069f4:	03fffffc 	mvnseq	pc, #252, 30	; 0x3f0
200069f8:	3ff87c00 	svccc	0x00f87c00
200069fc:	0ff80003 	svceq	0x00f80003
20006a00:	0007fc00 	andeq	pc, r7, r0, lsl #24
20006a04:	01fffffe 	ldrsheq	pc, [pc, #254]	; 20006b0a <bg_bits+0x32e>	; <UNPREDICTABLE>
20006a08:	1ff00000 	svcne	0x00f00000	; IMB
20006a0c:	0ff00007 	svceq	0x00f00007
20006a10:	000ff800 	andeq	pc, pc, r0, lsl #16
20006a14:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20006b1b <bg_bits+0x33f>	; <UNPREDICTABLE>
20006a18:	07f0003e 			; <UNDEFINED> instruction: 0x07f0003e
20006a1c:	0ff00007 	svceq	0x00f00007
20006a20:	800ff000 	andhi	pc, pc, r0
20006a24:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20006a28:	03e0007f 	mvneq	r0, #127	; 0x7f
20006a2c:	0fe00007 	svceq	0x00e00007
20006a30:	c00ff000 	andgt	pc, pc, r0
20006a34:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
20006a38:	0000007f 	andeq	r0, r0, pc, ror r0
20006a3c:	0fe00007 	svceq	0x00e00007
20006a40:	e00ff000 	and	pc, pc, r0
20006a44:	007ffeff 	ldrshteq	pc, [pc], #-239	; <UNPREDICTABLE>
20006a48:	0000007f 	andeq	r0, r0, pc, ror r0
20006a4c:	0fe00007 	svceq	0x00e00007
20006a50:	f00ff000 			; <UNDEFINED> instruction: 0xf00ff000
20006a54:	003ffe7f 	eorseq	pc, pc, pc, ror lr	; <UNPREDICTABLE>
20006a58:	0000007f 	andeq	r0, r0, pc, ror r0
20006a5c:	0fe00007 	svceq	0x00e00007
20006a60:	f80ff000 			; <UNDEFINED> instruction: 0xf80ff000
20006a64:	001ffc3f 	andseq	pc, pc, pc, lsr ip	; <UNPREDICTABLE>
20006a68:	0000007f 	andeq	r0, r0, pc, ror r0
20006a6c:	1fe0000f 	svcne	0x00e0000f
20006a70:	fc0ff000 	stc2	0, cr15, [pc], {-0}
20006a74:	000ff81f 	andeq	pc, pc, pc, lsl r8	; <UNPREDICTABLE>
20006a78:	0000003e 	andeq	r0, r0, lr, lsr r0
20006a7c:	1fe0000f 	svcne	0x00e0000f
20006a80:	fc07f000 	stc2	0, cr15, [r7], {-0}
20006a84:	0007f00f 	andeq	pc, r7, pc
20006a88:	00000000 	andeq	r0, r0, r0
20006a8c:	1fe0000f 	svcne	0x00e0000f
20006a90:	fc07f000 	stc2	0, cr15, [r7], {-0}
20006a94:	00000007 	andeq	r0, r0, r7
20006a98:	00000000 	andeq	r0, r0, r0
20006a9c:	1fe0000f 	svcne	0x00e0000f
20006aa0:	fc07f800 	stc2	8, cr15, [r7], {-0}
20006aa4:	00000003 	andeq	r0, r0, r3
20006aa8:	000ff800 	andeq	pc, pc, r0, lsl #16
20006aac:	1fc0001f 	svcne	0x00c0001f
20006ab0:	fc07fc00 	stc2	12, cr15, [r7], {-0}
20006ab4:	00000001 	andeq	r0, r0, r1
20006ab8:	001ffc00 	andseq	pc, pc, r0, lsl #24
20006abc:	1fc0003f 	svcne	0x00c0003f
20006ac0:	fc07ff80 	stc2	15, cr15, [r7], {128}	; 0x80
20006ac4:	00000001 	andeq	r0, r0, r1
20006ac8:	003fff00 	eorseq	pc, pc, r0, lsl #30
20006acc:	3fc0003f 	svccc	0x00c0003f
20006ad0:	fc07fffc 	stc2	15, cr15, [r7], {252}	; 0xfc
20006ad4:	00000001 	andeq	r0, r0, r1
20006ad8:	007fff80 	rsbseq	pc, pc, r0, lsl #31
20006adc:	ffc0003f 			; <UNDEFINED> instruction: 0xffc0003f
20006ae0:	fc03ffff 	stc2	15, cr15, [r3], {255}	; 0xff
20006ae4:	00000001 	andeq	r0, r0, r1
20006ae8:	00ffffe0 	rscseq	pc, pc, r0, ror #31
20006aec:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20006af0:	fc01ffff 	stc2	15, cr15, [r1], {255}	; 0xff
20006af4:	00000007 	andeq	r0, r0, r7
20006af8:	03fffff0 	mvnseq	pc, #240, 30	; 0x3c0
20006afc:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20006b00:	fc00ffff 	stc2	15, cr15, [r0], {255}	; 0xff
20006b04:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006b08:	07fffff8 			; <UNDEFINED> instruction: 0x07fffff8
20006b0c:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20006b10:	fc007fff 	stc2	15, cr7, [r0], {255}	; 0xff
20006b14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006b18:	07ff7ffd 			; <UNDEFINED> instruction: 0x07ff7ffd
20006b1c:	ff80007f 			; <UNDEFINED> instruction: 0xff80007f
20006b20:	fc003fff 	stc2	15, cr3, [r0], {255}	; 0xff
20006b24:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006b28:	0ffe3fff 	svceq	0x00fe3fff
20006b2c:	ff1f007f 			; <UNDEFINED> instruction: 0xff1f007f
20006b30:	f80007ff 			; <UNDEFINED> instruction: 0xf80007ff
20006b34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006b38:	1ffc3fff 	svcne	0x00fc3fff
20006b3c:	fc3f807f 	ldc2	0, cr8, [pc], #-508	; 20006948 <bg_bits+0x16c>
20006b40:	f800003f 			; <UNDEFINED> instruction: 0xf800003f
20006b44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006b48:	1ff83fff 	svcne	0x00f83fff
20006b4c:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
20006b50:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20006b54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006b58:	3ff03fff 	svccc	0x00f03fff
20006b5c:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
20006b60:	c0000000 	andgt	r0, r0, r0
20006b64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006b68:	7fe03fff 	svcvc	0x00e03fff
20006b6c:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
20006b70:	00000000 	andeq	r0, r0, r0
20006b74:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20006b78:	7fc03fff 	svcvc	0x00c03fff
20006b7c:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
20006b80:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
20006b84:	f800000f 			; <UNDEFINED> instruction: 0xf800000f
20006b88:	ffc01fff 			; <UNDEFINED> instruction: 0xffc01fff
20006b8c:	001f003f 	andseq	r0, pc, pc, lsr r0	; <UNPREDICTABLE>
20006b90:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20006b94:	f8007fff 			; <UNDEFINED> instruction: 0xf8007fff
20006b98:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
20006b9c:	0000003f 	andeq	r0, r0, pc, lsr r0
20006ba0:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20006ba4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006ba8:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
20006bac:	0000003f 	andeq	r0, r0, pc, lsr r0
20006bb0:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20006bb4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006bb8:	ff001fff 			; <UNDEFINED> instruction: 0xff001fff
20006bbc:	0000003f 	andeq	r0, r0, pc, lsr r0
20006bc0:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20006bc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006bc8:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}
20006bcc:	0000003f 	andeq	r0, r0, pc, lsr r0
20006bd0:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20006bd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006bd8:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}

20006bdc <current_screen>:
20006bdc:	00000001 	andeq	r0, r0, r1

20006be0 <delay_until_text.4285>:
20006be0:	00000082 	andeq	r0, r0, r2, lsl #1

20006be4 <long_text.4283>:
20006be4:	00000028 	andeq	r0, r0, r8, lsr #32

20006be8 <short_text.4284>:
20006be8:	00000014 	andeq	r0, r0, r4, lsl r0

20006bec <last_climb_value.4287>:
20006bec:	00000064 	andeq	r0, r0, r4, rrx

20006bf0 <fire_black_2_bits>:
	...
20006bf8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>

20006bfc <fire1_gray_bits>:
20006bfc:	00000000 	andeq	r0, r0, r0
20006c00:	06000804 	streq	r0, [r0], -r4, lsl #16
20006c04:	02494204 	subeq	r4, r9, #4, 4	; 0x40000000

20006c08 <fire1_light_bits>:
20006c08:	00002000 	andeq	r2, r0, r0
20006c0c:	48000010 	stmdami	r0, {r4}
20006c10:	2c243020 	stccs	0, cr3, [r4], #-128	; 0xffffff80

20006c14 <fire2_gray_bits>:
20006c14:	00000000 	andeq	r0, r0, r0
20006c18:	10220000 	eorne	r0, r2, r0
20006c1c:	00420444 	subeq	r0, r2, r4, asr #8

20006c20 <fire2_light_bits>:
20006c20:	04200000 	strteq	r0, [r0], #-0
20006c24:	240c0010 	strcs	r0, [ip], #-16
20006c28:	123c6008 	eorsne	r6, ip, #8

20006c2c <fire3_gray_bits>:
20006c2c:	00000000 	andeq	r0, r0, r0
20006c30:	24100802 	ldrcs	r0, [r0], #-2050	; 0xfffff7fe
20006c34:	00020260 	andeq	r0, r2, r0, ror #4

20006c38 <fire3_light_bits>:
20006c38:	10200000 	eorne	r0, r0, r0
20006c3c:	18040400 	stmdane	r4, {sl}
20006c40:	143c5812 	ldrtne	r5, [ip], #-2066	; 0xfffff7ee

20006c44 <fire4_gray_bits>:
20006c44:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
20006c48:	10320000 	eorsne	r0, r2, r0
20006c4c:	02400012 	subeq	r0, r0, #18

20006c50 <fire4_light_bits>:
20006c50:	00001000 	andeq	r1, r0, r0
20006c54:	04082000 	streq	r2, [r8], #-0
20006c58:	24283a0c 	strtcs	r3, [r8], #-2572	; 0xfffff5f4

20006c5c <fire5_gray_bits>:
20006c5c:	00000000 	andeq	r0, r0, r0
20006c60:	22001020 	andcs	r1, r0, #32
20006c64:	04044206 	streq	r4, [r4], #-518	; 0xfffffdfa

20006c68 <fire5_light_bits>:
20006c68:	00040000 	andeq	r0, r4, r0
20006c6c:	04240800 	strteq	r0, [r4], #-2048	; 0xfffff800
20006c70:	502a1810 	eorpl	r1, sl, r0, lsl r8

20006c74 <firstTime.4076>:
20006c74:	00000001 	andeq	r0, r0, r1

20006c78 <bird1_black_bits>:
	...
20006c88:	00010040 	andeq	r0, r1, r0, asr #32
20006c8c:	00118060 	andseq	r8, r1, r0, rrx
20006c90:	00118060 	andseq	r8, r1, r0, rrx
20006c94:	001b80ec 	andseq	r8, fp, ip, ror #1
20006c98:	003f81fc 	ldrshteq	r8, [pc], -ip
20006c9c:	007fe1f8 	ldrshteq	lr, [pc], #-24
20006ca0:	007ff3f8 	ldrshteq	pc, [pc], #-56	; <UNPREDICTABLE>
20006ca4:	003ffff8 	ldrshteq	pc, [pc], -r8	; <UNPREDICTABLE>
20006ca8:	003fedf8 	ldrshteq	lr, [pc], -r8
20006cac:	001ff1f0 			; <UNDEFINED> instruction: 0x001ff1f0
20006cb0:	000ff0e0 	andeq	pc, pc, r0, ror #1
20006cb4:	0007ff80 	andeq	pc, r7, r0, lsl #31
20006cb8:	00007c00 	andeq	r7, r0, r0, lsl #24
20006cbc:	00008800 	andeq	r8, r0, r0, lsl #16
20006cc0:	00033000 	andeq	r3, r3, r0
20006cc4:	00011000 	andeq	r1, r1, r0
	...

20006cdc <bird1_gray_bits>:
	...
20006d10:	00000e00 	andeq	r0, r0, r0, lsl #28
20006d14:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

20006d40 <bird1_light_bits>:
	...
20006d70:	00001200 	andeq	r1, r0, r0, lsl #4
	...

20006da4 <bird2_black_bits>:
	...
20006dbc:	000b0000 	andeq	r0, fp, r0
20006dc0:	001e0028 	andseq	r0, lr, r8, lsr #32
20006dc4:	003e0068 	eorseq	r0, lr, r8, rrx
20006dc8:	003e007c 	eorseq	r0, lr, ip, ror r0
20006dcc:	003e007c 	eorseq	r0, lr, ip, ror r0
20006dd0:	007e007c 	rsbseq	r0, lr, ip, ror r0
20006dd4:	007e7cfc 	ldrshteq	r7, [lr], #-204	; 0xffffff34
20006dd8:	007ffff8 	ldrshteq	pc, [pc], #-248	; <UNPREDICTABLE>
20006ddc:	003fd7f0 	ldrshteq	sp, [pc], -r0
20006de0:	003fc3c0 	eorseq	ip, pc, r0, asr #7
20006de4:	000fc100 	andeq	ip, pc, r0, lsl #2
20006de8:	00007000 	andeq	r7, r0, r0
20006dec:	0000a000 	andeq	sl, r0, r0
20006df0:	0001e000 	andeq	lr, r1, r0
20006df4:	0000a000 	andeq	sl, r0, r0
20006df8:	00008000 	andeq	r8, r0, r0
	...

20006e08 <bird2_gray_bits>:
	...
20006e44:	00003c00 	andeq	r3, r0, r0, lsl #24
20006e48:	00003e00 	andeq	r3, r0, r0, lsl #28
	...

20006e6c <bird2_light_bits>:
	...
20006ea4:	00002800 	andeq	r2, r0, r0, lsl #16
	...

20006ed0 <bird3_black_bits>:
	...
20006ef0:	00280000 	eoreq	r0, r8, r0
20006ef4:	00680020 	rsbeq	r0, r8, r0, lsr #32
20006ef8:	00f80038 	rscseq	r0, r8, r8, lsr r0
20006efc:	00fc0038 	rscseq	r0, ip, r8, lsr r0
20006f00:	00fc007c 	rscseq	r0, ip, ip, ror r0
20006f04:	00fe3dfe 	ldrshteq	r3, [lr], #222	; 0xde
20006f08:	00fffffe 	ldrshteq	pc, [pc], #254	; <UNPREDICTABLE>
20006f0c:	007febfc 	ldrshteq	lr, [pc], #-188
20006f10:	003ff1f0 	ldrshteq	pc, [pc], -r0	; <UNPREDICTABLE>
20006f14:	001ff0c0 	andseq	pc, pc, r0, asr #1
20006f18:	0001e800 	andeq	lr, r1, r0, lsl #16
20006f1c:	00005000 	andeq	r5, r0, r0
20006f20:	0000f000 	andeq	pc, r0, r0
20006f24:	00009000 	andeq	r9, r0, r0
	...

20006f34 <bird3_gray_bits>:
	...
20006f74:	00000e00 	andeq	r0, r0, r0, lsl #28
20006f78:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

20006f98 <bird3_light_bits>:
	...
20006fd4:	00001400 	andeq	r1, r0, r0, lsl #8
	...

20006ffc <bird4_black_bits>:
	...
20007030:	00007800 	andeq	r7, r0, r0, lsl #16
20007034:	0000ff80 	andeq	pc, r0, r0, lsl #31
20007038:	0003d7f4 	strdeq	sp, [r3], -r4
2000703c:	008fe3fc 	strdeq	lr, [pc], ip
20007040:	01ffc1fc 	ldrsheq	ip, [pc, #28]	; 20007064 <bird4_gray_bits+0x4>
20007044:	00ffd9f8 	ldrshteq	sp, [pc], #152
20007048:	007fb0f0 	ldrshteq	fp, [pc], #-0
2000704c:	007ea000 	rsbseq	sl, lr, r0
20007050:	00792000 	rsbseq	r2, r9, r0
20007054:	00300000 	eorseq	r0, r0, r0
	...

20007060 <bird4_gray_bits>:
	...
200070a0:	00001c00 	andeq	r1, r0, r0, lsl #24
200070a4:	00003e00 	andeq	r3, r0, r0, lsl #28
	...

200070c4 <bird4_light_bits>:
	...
20007100:	00002800 	andeq	r2, r0, r0, lsl #16
	...

20007128 <bird5_black_bits>:
	...
20007154:	00001c00 	andeq	r1, r0, r0, lsl #24
20007158:	0000ff00 	andeq	pc, r0, r0, lsl #30
2000715c:	0003eb00 	andeq	lr, r3, r0, lsl #22
20007160:	0007f180 	andeq	pc, r7, r0, lsl #3
20007164:	000ff080 	andeq	pc, pc, r0, lsl #1
20007168:	000fff80 	andeq	pc, pc, r0, lsl #31
2000716c:	001fd3c0 	andseq	sp, pc, r0, asr #7
20007170:	003fa3c0 	eorseq	sl, pc, r0, asr #7
20007174:	003fa3c0 	eorseq	sl, pc, r0, asr #7
20007178:	003fd3c0 	eorseq	sp, pc, r0, asr #7
2000717c:	003e8380 	eorseq	r8, lr, r0, lsl #7
20007180:	00778580 	rsbseq	r8, r7, r0, lsl #11
20007184:	00610000 	rsbeq	r0, r1, r0
20007188:	00000000 	andeq	r0, r0, r0

2000718c <bird5_gray_bits>:
	...
200071c4:	00000e00 	andeq	r0, r0, r0, lsl #28
200071c8:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

200071f0 <bird5_light_bits>:
	...
20007224:	00001400 	andeq	r1, r0, r0, lsl #8
	...

20007254 <firstTime.4093>:
20007254:	00000001 	andeq	r0, r0, r1

20007258 <witch1_black_bits>:
20007258:	200001f8 	strdcs	r0, [r0], -r8
2000725c:	03400001 	movteq	r0, #1
20007260:	00074000 	andeq	r4, r7, r0
20007264:	20000720 	andcs	r0, r0, r0, lsr #14
20007268:	3ff80066 	svccc	0x00f80066
2000726c:	00044000 	andeq	r4, r4, r0
20007270:	40000440 	andmi	r0, r0, r0, asr #8
20007274:	03800004 	orreq	r0, r0, #4
20007278:	00064000 	andeq	r4, r6, r0
2000727c:	20000640 	andcs	r0, r0, r0, asr #12
20007280:	0e200006 	cdpeq	0, 2, cr0, cr0, cr6, {0}
20007284:	000e1000 	andeq	r1, lr, r0
20007288:	f8000c10 			; <UNDEFINED> instruction: 0xf8000c10
2000728c:	0000001f 	andeq	r0, r0, pc, lsl r0

20007290 <witch1_gray_bits>:
20007290:	c0000000 	andgt	r0, r0, r0
20007294:	00800000 	addeq	r0, r0, r0
20007298:	00008000 	andeq	r8, r0, r0
2000729c:	c00000c0 	andgt	r0, r0, r0, asr #1
200072a0:	00000001 	andeq	r0, r0, r1
	...
200072b0:	00018000 	andeq	r8, r1, r0
200072b4:	c0000180 	andgt	r0, r0, r0, lsl #3
200072b8:	01c00001 	biceq	r0, r0, r1
200072bc:	0001e000 	andeq	lr, r1, r0
200072c0:	000003e0 	andeq	r0, r0, r0, ror #7
200072c4:	00000000 	andeq	r0, r0, r0

200072c8 <witch1_light_bits>:
	...
200072dc:	00038000 	andeq	r8, r3, r0
200072e0:	80000380 	andhi	r0, r0, r0, lsl #7
200072e4:	00000003 	andeq	r0, r0, r3
	...

20007300 <witch2_black_bits>:
20007300:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20007304:	01200001 			; <UNDEFINED> instruction: 0x01200001
20007308:	00034000 	andeq	r4, r3, r0
2000730c:	20000740 	andcs	r0, r0, r0, asr #14
20007310:	66200007 	strtvs	r0, [r0], -r7
20007314:	003ff800 	eorseq	pc, pc, r0, lsl #16
20007318:	40000440 	andmi	r0, r0, r0, asr #8
2000731c:	04400004 	strbeq	r0, [r0], #-4
20007320:	00038000 	andeq	r8, r3, r0
20007324:	20000660 	andcs	r0, r0, r0, ror #12
20007328:	0e100006 	cdpeq	0, 1, cr0, cr0, cr6, {0}
2000732c:	001c0800 	andseq	r0, ip, r0, lsl #16
20007330:	fc001c08 	stc2	12, cr1, [r0], {8}
20007334:	0000003f 	andeq	r0, r0, pc, lsr r0

20007338 <witch2_gray_bits>:
20007338:	00000000 	andeq	r0, r0, r0
2000733c:	00c00000 	sbceq	r0, r0, r0
20007340:	00008000 	andeq	r8, r0, r0
20007344:	c0000080 	andgt	r0, r0, r0, lsl #1
20007348:	01c00000 	biceq	r0, r0, r0
	...
2000735c:	c0000180 	andgt	r0, r0, r0, lsl #3
20007360:	01e00001 	mvneq	r0, r1
20007364:	0003f000 	andeq	pc, r3, r0
20007368:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
2000736c:	00000000 	andeq	r0, r0, r0

20007370 <witch2_light_bits>:
	...
20007388:	80000380 	andhi	r0, r0, r0, lsl #7
2000738c:	03800003 	orreq	r0, r0, #3
	...

200073a8 <witch3_black_bits>:
200073a8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200073ac:	01200001 			; <UNDEFINED> instruction: 0x01200001
200073b0:	00034000 	andeq	r4, r3, r0
200073b4:	20000740 	andcs	r0, r0, r0, asr #14
200073b8:	66200007 	strtvs	r0, [r0], -r7
200073bc:	003ff800 	eorseq	pc, pc, r0, lsl #16
200073c0:	40000440 	andmi	r0, r0, r0, asr #8
200073c4:	04400004 	strbeq	r0, [r0], #-4
200073c8:	00038000 	andeq	r8, r3, r0
200073cc:	10000660 	andne	r0, r0, r0, ror #12
200073d0:	1c08000e 	stcne	0, cr0, [r8], {14}
200073d4:	00380800 	eorseq	r0, r8, r0, lsl #16
200073d8:	fe003804 	vcmla.f16	d3, d0, d4[0], #0
200073dc:	0000007f 	andeq	r0, r0, pc, ror r0

200073e0 <witch3_gray_bits>:
200073e0:	00000000 	andeq	r0, r0, r0
200073e4:	00c00000 	sbceq	r0, r0, r0
200073e8:	00008000 	andeq	r8, r0, r0
200073ec:	c0000080 	andgt	r0, r0, r0, lsl #1
200073f0:	01c00000 	biceq	r0, r0, r0
	...
20007404:	e0000180 	and	r0, r0, r0, lsl #3
20007408:	03f00001 	mvnseq	r0, #1
2000740c:	0007f000 	andeq	pc, r7, r0
20007410:	000007f8 	strdeq	r0, [r0], -r8
20007414:	00000000 	andeq	r0, r0, r0

20007418 <witch3_light_bits>:
	...
20007430:	80000380 	andhi	r0, r0, r0, lsl #7
20007434:	03800003 	orreq	r0, r0, #3
	...

20007450 <firstTime.4067>:
20007450:	00000001 	andeq	r0, r0, r1

20007454 <indoors_black_bits>:
20007454:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20007464:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20007474:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20007484:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20007494:	00000100 	andeq	r0, r0, r0, lsl #2
	...
200074a4:	00000100 	andeq	r0, r0, r0, lsl #2
	...
200074b4:	00000280 	andeq	r0, r0, r0, lsl #5
	...
200074c4:	00000440 	andeq	r0, r0, r0, asr #8
	...
200074d4:	00002aa8 	andeq	r2, r0, r8, lsr #21
	...
200074e4:	00001290 	muleq	r0, r0, r2
	...
200074f4:	00002c68 	andeq	r2, r0, r8, ror #24
	...
20007504:	00002008 	andeq	r2, r0, r8
	...
20007514:	000027c8 	andeq	r2, r0, r8, asr #15
	...
20007524:	00001ff0 	strdeq	r1, [r0], -r0
	...
20007534:	00000d60 	andeq	r0, r0, r0, ror #26
	...
200075a4:	f7fbfe00 			; <UNDEFINED> instruction: 0xf7fbfe00
200075a8:	7fbfdfef 	svcvc	0x00bfdfef
200075ac:	fbfdfeff 	blx	1ff871b2 <startup-0x78e4e>
200075b0:	00ff703f 	rscseq	r7, pc, pc, lsr r0	; <UNPREDICTABLE>
200075b4:	0c060200 	sfmeq	f0, 4, [r6], {-0}
200075b8:	c0603018 	rsbgt	r3, r0, r8, lsl r0
200075bc:	06030180 	streq	r0, [r3], -r0, lsl #3
200075c0:	0080d02c 	addeq	sp, r0, ip, lsr #32
200075c4:	0c060200 	sfmeq	f0, 4, [r6], {-0}
200075c8:	c0603018 	rsbgt	r3, r0, r8, lsl r0
200075cc:	06030180 	streq	r0, [r3], -r0, lsl #3
200075d0:	0080d02c 	addeq	sp, r0, ip, lsr #32
200075d4:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200075d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200075dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200075e0:	00ffdfef 	rscseq	sp, pc, pc, ror #31
	...
200075f0:	000050e8 	andeq	r5, r0, r8, ror #1
	...
20007600:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
20007610:	00005028 	andeq	r5, r0, r8, lsr #32
	...
20007620:	00005028 	andeq	r5, r0, r8, lsr #32
	...
20007630:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
20007640:	03f050e8 	mvnseq	r5, #232	; 0xe8
	...
20007650:	0c0c5fe8 	stceq	15, cr5, [ip], {232}	; 0xe8
	...
20007660:	10025028 	andne	r5, r2, r8, lsr #32
	...
20007670:	13fa5028 	mvnsne	r5, #40	; 0x28
	...
20007680:	100a5fe8 	andne	r5, sl, r8, ror #31
	...
20007690:	100a50e8 	andne	r5, sl, r8, ror #1
	...
200076a0:	100a5fe8 	andne	r5, sl, r8, ror #31
	...
200076b0:	100a5028 	andne	r5, sl, r8, lsr #32
	...
200076c0:	100a5028 	andne	r5, sl, r8, lsr #32
	...
200076d0:	100a5fe8 	andne	r5, sl, r8, ror #31
	...
200076e0:	100a50e8 	andne	r5, sl, r8, ror #1
	...
200076f0:	100a5ee8 	andne	r5, sl, r8, ror #29
	...
20007700:	100a5028 	andne	r5, sl, r8, lsr #32
	...
20007710:	100a5028 	andne	r5, sl, r8, lsr #32
	...
20007720:	10025fe8 	andne	r5, r2, r8, ror #31
	...
20007730:	0ffc50e8 	svceq	0x00fc50e8
	...
20007740:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
20007750:	00005028 	andeq	r5, r0, r8, lsr #32
	...
20007760:	00005028 	andeq	r5, r0, r8, lsr #32
	...
20007770:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
20007780:	000050e8 	andeq	r5, r0, r8, ror #1
	...
20007790:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
200077a0:	00007028 	andeq	r7, r0, r8, lsr #32
	...
200077b0:	00007028 	andeq	r7, r0, r8, lsr #32
	...
200077c0:	00007038 	andeq	r7, r0, r8, lsr r0
200077c4:	f7fbfdfe 			; <UNDEFINED> instruction: 0xf7fbfdfe
200077c8:	7fbfdfef 	svcvc	0x00bfdfef
200077cc:	fbfdfeff 	blx	1ff873d2 <startup-0x78c2e>
200077d0:	bfbfeff7 	svclt	0x00bfeff7
200077d4:	0c060301 	stceq	3, cr0, [r6], {1}
200077d8:	c0603018 	rsbgt	r3, r0, r8, lsl r0
200077dc:	06030180 	streq	r0, [r3], -r0, lsl #3
200077e0:	6030180c 	eorsvs	r1, r0, ip, lsl #16
200077e4:	0c060301 	stceq	3, cr0, [r6], {1}
200077e8:	c0603018 	rsbgt	r3, r0, r8, lsl r0
200077ec:	06030180 	streq	r0, [r3], -r0, lsl #3
200077f0:	6030180c 	eorsvs	r1, r0, ip, lsl #16
200077f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200077f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200077fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007800:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007804:	c0603018 	rsbgt	r3, r0, r8, lsl r0
20007808:	06030180 	streq	r0, [r3], -r0, lsl #3
2000780c:	6030180c 	eorsvs	r1, r0, ip, lsl #16
20007810:	030180c0 	movweq	r8, #4288	; 0x10c0
20007814:	c0603018 	rsbgt	r3, r0, r8, lsl r0
20007818:	06030180 	streq	r0, [r3], -r0, lsl #3
2000781c:	6030180c 	eorsvs	r1, r0, ip, lsl #16
20007820:	030180c0 	movweq	r8, #4288	; 0x10c0
20007824:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007828:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000782c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007830:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007834:	030180c0 	movweq	r8, #4288	; 0x10c0
20007838:	30180c06 	andscc	r0, r8, r6, lsl #24
2000783c:	0180c060 	orreq	ip, r0, r0, rrx
20007840:	180c0603 	stmdane	ip, {r0, r1, r9, sl}
20007844:	030180c0 	movweq	r8, #4288	; 0x10c0
20007848:	30180c06 	andscc	r0, r8, r6, lsl #24
2000784c:	0180c060 	orreq	ip, r0, r0, rrx
20007850:	180c0603 	stmdane	ip, {r0, r1, r9, sl}

20007854 <indoors_gray_bits>:
	...
200078b4:	00001110 	andeq	r1, r0, r0, lsl r1
	...
200078c4:	00001090 	muleq	r0, r0, r0
	...
200078f4:	00000390 	muleq	r0, r0, r3
	...
20007904:	00001340 	andeq	r1, r0, r0, asr #6
	...
20007914:	00000830 	andeq	r0, r0, r0, lsr r8
	...
200079a4:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
200079a8:	80402010 	subhi	r2, r0, r0, lsl r0
200079ac:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
200079b0:	00008000 	andeq	r8, r0, r0
200079b4:	b0582c00 	subslt	r2, r8, r0, lsl #24
200079b8:	0582c160 	streq	ip, [r2, #352]	; 0x160
200079bc:	582c160b 	stmdapl	ip!, {r0, r1, r3, r9, sl, ip}
200079c0:	010b0000 	mrseq	r0, (UNDEF: 11)
200079c4:	71b8dc00 			; <UNDEFINED> instruction: 0x71b8dc00
200079c8:	1b8dc6e3 	blne	1e37955c <startup-0x1c86aa4>
200079cc:	b8dc6e37 	ldmlt	ip, {r0, r1, r2, r4, r5, r9, sl, fp, sp, lr}^
200079d0:	01370001 	teqeq	r7, r1
	...
200079e0:	01000000 	mrseq	r0, (UNDEF: 0)
200079e4:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
200079e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200079ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200079f0:	01ff8007 	mvnseq	r8, r7
	...
20007a00:	00008000 	andeq	r8, r0, r0
	...
20007a10:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20007a20:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20007a30:	00008000 	andeq	r8, r0, r0
	...
20007a40:	00008000 	andeq	r8, r0, r0
	...
20007a50:	00008000 	andeq	r8, r0, r0
	...
20007a60:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20007a70:	20008180 	andcs	r8, r0, r0, lsl #3
	...
20007a80:	20808000 	addcs	r8, r0, r0
	...
20007a90:	20c08100 	sbccs	r8, r0, r0, lsl #2
	...
20007aa0:	21e08000 	mvncs	r8, r0
	...
20007ab0:	2bf08180 	blcs	1fc280b8 <startup-0x3d7f48>
	...
20007ac0:	25c08180 	strbcs	r8, [r0, #384]	; 0x180
	...
20007ad0:	29e08000 	stmibcs	r0!, {pc}^
	...
20007ae0:	2bc08100 	blcs	1f027ee8 <startup-0xfd8118>
	...
20007af0:	20c08110 	sbccs	r8, r0, r0, lsl r1
	...
20007b00:	28e0a190 	stmiacs	r0!, {r4, r7, r8, sp, pc}^
	...
20007b10:	2bf08180 	blcs	1fc28118 <startup-0x3d7ee8>
	...
20007b20:	28008000 	stmdacs	r0, {pc}
	...
20007b30:	3000a010 	andcc	sl, r0, r0, lsl r0
	...
20007b40:	1fc0a000 	svcne	0x00c0a000
	...
20007b50:	0000a180 	andeq	sl, r0, r0, lsl #3
	...
20007b60:	00008190 	muleq	r0, r0, r1
	...
20007b70:	00008010 	andeq	r8, r0, r0, lsl r0
	...
20007b80:	00008110 	andeq	r8, r0, r0, lsl r1
	...
20007b90:	0000a010 	andeq	sl, r0, r0, lsl r0
	...
20007ba0:	00008190 	muleq	r0, r0, r1
	...
20007bb0:	00008190 	muleq	r0, r0, r1
	...
20007bc0:	00008180 	andeq	r8, r0, r0, lsl #3
20007bc4:	08040201 	stmdaeq	r4, {r0, r9}
20007bc8:	80402010 	subhi	r2, r0, r0, lsl r0
20007bcc:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
20007bd0:	40401008 	submi	r1, r0, r8
20007bd4:	b0582c16 	subslt	r2, r8, r6, lsl ip
20007bd8:	0582c160 	streq	ip, [r2, #352]	; 0x160
20007bdc:	582c160b 	stmdapl	ip!, {r0, r1, r3, r9, sl, ip}
20007be0:	82c160b0 	sbchi	r6, r1, #176	; 0xb0
20007be4:	71b8dc6e 			; <UNDEFINED> instruction: 0x71b8dc6e
20007be8:	1b8dc6e3 	blne	1e37977c <startup-0x1c86884>
20007bec:	b8dc6e37 	ldmlt	ip, {r0, r1, r2, r4, r5, r9, sl, fp, sp, lr}^
20007bf0:	8dc6e371 	stclhi	3, cr14, [r6, #452]	; 0x1c4
	...
20007c04:	0582c160 	streq	ip, [r2, #352]	; 0x160
20007c08:	582c160b 	stmdapl	ip!, {r0, r1, r3, r9, sl, ip}
20007c0c:	82c160b0 	sbchi	r6, r1, #176	; 0xb0
20007c10:	2c160b05 			; <UNDEFINED> instruction: 0x2c160b05
20007c14:	1b8dc6e3 	blne	1e3797a8 <startup-0x1c86858>
20007c18:	b8dc6e37 	ldmlt	ip, {r0, r1, r2, r4, r5, r9, sl, fp, sp, lr}^
20007c1c:	8dc6e371 	stclhi	3, cr14, [r6, #452]	; 0x1c4
20007c20:	dc6e371b 	stclle	7, cr3, [lr], #-108	; 0xffffff94
	...
20007c34:	2c160b05 			; <UNDEFINED> instruction: 0x2c160b05
20007c38:	c160b058 	qdsubgt	fp, r8, r0
20007c3c:	160b0582 	strne	r0, [fp], -r2, lsl #11
20007c40:	60b0582c 	adcsvs	r5, r0, ip, lsr #16
20007c44:	dc6e371b 	stclle	7, cr3, [lr], #-108	; 0xffffff94
20007c48:	c6e371b8 			; <UNDEFINED> instruction: 0xc6e371b8
20007c4c:	6e371b8d 	vaddvs.f64	d1, d23, d13
20007c50:	e371b8dc 	cmn	r1, #220, 16	; 0xdc0000

20007c54 <indoors_light_bits>:
	...
20007c94:	00001010 	andeq	r1, r0, r0, lsl r0
	...
20007cc4:	00000300 	andeq	r0, r0, r0, lsl #6
	...
20007cd4:	00001110 	andeq	r1, r0, r0, lsl r1
	...
20007ce4:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20007cf4:	00001000 	andeq	r1, r0, r0
	...
20007d04:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
	...
20007d14:	00001000 	andeq	r1, r0, r0
	...
20007db4:	43a1d000 			; <UNDEFINED> instruction: 0x43a1d000
20007db8:	3a1d0e87 	bcc	2074b7dc <firstTime.4040+0x742b84>
20007dbc:	a1d0e874 	bicsge	lr, r0, r4, ror r8
20007dc0:	00742013 	rsbseq	r2, r4, r3, lsl r0
20007dc4:	82412000 	subhi	r2, r1, #0
20007dc8:	24120904 	ldrcs	r0, [r2], #-2308	; 0xfffff6fc
20007dcc:	41209048 			; <UNDEFINED> instruction: 0x41209048
20007dd0:	00482012 	subeq	r2, r8, r2, lsl r0
	...
20007de0:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007df0:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
20007e00:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007e10:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007e20:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007e30:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007e40:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
20007e50:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007e60:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007e70:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007e80:	03702010 	cmneq	r0, #16
	...
20007e90:	03302e10 	teqeq	r0, #16, 28	; 0x100
	...
20007ea0:	02102010 	andseq	r2, r0, #16
	...
20007eb0:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007ec0:	02302010 	eorseq	r2, r0, #16
	...
20007ed0:	02102010 	andseq	r2, r0, #16
	...
20007ee0:	00302e10 	eorseq	r2, r0, r0, lsl lr
	...
20007ef0:	03302000 	teqeq	r0, #0
	...
20007f00:	03100000 	tsteq	r0, #0
	...
20007f10:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007f20:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007f30:	00000f00 	andeq	r0, r0, r0, lsl #30
	...
20007f40:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20007f50:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20007f60:	00002000 	andeq	r2, r0, r0
	...
20007f70:	00002000 	andeq	r2, r0, r0
	...
20007f80:	00002e00 	andeq	r2, r0, r0, lsl #28
	...
20007fd4:	43a1d0e8 			; <UNDEFINED> instruction: 0x43a1d0e8
20007fd8:	3a1d0e87 	bcc	2074b9fc <firstTime.4040+0x742da4>
20007fdc:	a1d0e874 	bicsge	lr, r0, r4, ror r8
20007fe0:	1d0e8743 	stcne	7, cr8, [lr, #-268]	; 0xfffffef4
20007fe4:	82412090 	subhi	r2, r1, #144	; 0x90
20007fe8:	24120904 	ldrcs	r0, [r2], #-2308	; 0xfffff6fc
20007fec:	41209048 			; <UNDEFINED> instruction: 0x41209048
20007ff0:	12090482 	andne	r0, r9, #-2113929216	; 0x82000000
	...
20008004:	3a1d0e87 	bcc	2074ba28 <firstTime.4040+0x742dd0>
20008008:	a1d0e874 	bicsge	lr, r0, r4, ror r8
2000800c:	1d0e8743 	stcne	7, cr8, [lr, #-268]	; 0xfffffef4
20008010:	d0e8743a 	rscle	r7, r8, sl, lsr r4
20008014:	24120904 	ldrcs	r0, [r2], #-2308	; 0xfffff6fc
20008018:	41209048 			; <UNDEFINED> instruction: 0x41209048
2000801c:	12090482 	andne	r0, r9, #-2113929216	; 0x82000000
20008020:	20904824 	addscs	r4, r0, r4, lsr #16
	...
20008034:	d0e8743a 	rscle	r7, r8, sl, lsr r4
20008038:	0e8743a1 	cdpeq	3, 8, cr4, cr7, cr1, {5}
2000803c:	e8743a1d 	ldmda	r4!, {r0, r2, r3, r4, r9, fp, ip, sp}^
20008040:	8743a1d0 			; <UNDEFINED> instruction: 0x8743a1d0
20008044:	20904824 	addscs	r4, r0, r4, lsr #16
20008048:	09048241 	stmdbeq	r4, {r0, r6, r9, pc}
2000804c:	90482412 	subls	r2, r8, r2, lsl r4
20008050:	04824120 	streq	r4, [r2], #288	; 0x120

20008054 <firstTime.4040>:
20008054:	00000001 	andeq	r0, r0, r1

20008058 <indoors2_black_bits>:
20008058:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000805c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008060:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008064:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008068:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000806c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008070:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008074:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008078:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000807c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008080:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008084:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008088:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000808c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008090:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008094:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008098:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000809c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080b8:	ffffeeef 			; <UNDEFINED> instruction: 0xffffeeef
200080bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080c8:	ffffec6f 			; <UNDEFINED> instruction: 0xffffec6f
200080cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080d8:	ffffeaaf 			; <UNDEFINED> instruction: 0xffffeaaf
200080dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080e8:	fffff29f 			; <UNDEFINED> instruction: 0xfffff29f
200080ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080f8:	ffffec6f 			; <UNDEFINED> instruction: 0xffffec6f
200080fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008100:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008104:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008108:	ffffe00f 			; <UNDEFINED> instruction: 0xffffe00f
2000810c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008110:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008114:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008118:	ffffe7cf 			; <UNDEFINED> instruction: 0xffffe7cf
2000811c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008120:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008124:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008128:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000812c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008130:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008134:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008138:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000813c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008140:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008144:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008148:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000814c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008150:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008154:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008158:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000815c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008160:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008164:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008168:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000816c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008170:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008174:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008178:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000817c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008180:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008184:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008188:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000818c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008190:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008194:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008198:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000819c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081a8:	f7fbffff 			; <UNDEFINED> instruction: 0xf7fbffff
200081ac:	7fbfdfef 	svcvc	0x00bfdfef
200081b0:	fbfdfeff 	blx	1ff87db6 <startup-0x7824a>
200081b4:	ffff7fff 			; <UNDEFINED> instruction: 0xffff7fff
200081b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081c4:	feffdfef 	cdp2	15, 15, cr13, cr15, cr15, {7}
200081c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081d4:	feffdfef 	cdp2	15, 15, cr13, cr15, cr15, {7}
200081d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081e4:	feffdfef 	cdp2	15, 15, cr13, cr15, cr15, {7}
200081e8:	00000fff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
200081f4:	fe0050e8 	cdp2	0, 0, cr5, cr0, cr8, {7}
200081f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200081fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008200:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008204:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
20008208:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000820c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008210:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008214:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
20008218:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000821c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008220:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008224:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
20008228:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000822c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008230:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008234:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
20008238:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000823c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008240:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008244:	ffff50ef 			; <UNDEFINED> instruction: 0xffff50ef
20008248:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000824c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008250:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008254:	ec0d5fef 	stc	15, cr5, [sp], {239}	; 0xef
20008258:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000825c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008260:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008264:	f003502f 			; <UNDEFINED> instruction: 0xf003502f
20008268:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000826c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008270:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008274:	d3fb502f 	mvnsle	r5, #47	; 0x2f
20008278:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000827c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008280:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008284:	d00b5fef 	andle	r5, fp, pc, ror #31
20008288:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000828c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008290:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008294:	d00b50ef 	andle	r5, fp, pc, ror #1
20008298:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000829c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082a4:	d00b5fef 	andle	r5, fp, pc, ror #31
200082a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082b4:	d00b502f 	andle	r5, fp, pc, lsr #32
200082b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082c4:	d00b502f 	andle	r5, fp, pc, lsr #32
200082c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082d4:	d00b5fef 	andle	r5, fp, pc, ror #31
200082d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082e4:	d00b50ef 	andle	r5, fp, pc, ror #1
200082e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082f4:	d00b5eef 	andle	r5, fp, pc, ror #29
200082f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008300:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008304:	d00b502f 	andle	r5, fp, pc, lsr #32
20008308:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000830c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008310:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008314:	d00b502f 	andle	r5, fp, pc, lsr #32
20008318:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000831c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008320:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008324:	d0035fef 	andle	r5, r3, pc, ror #31
20008328:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000832c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008330:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008334:	cffd50ef 	svcgt	0x00fd50ef
20008338:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000833c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008340:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008344:	e03f5fef 	eors	r5, pc, pc, ror #31
20008348:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000834c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008350:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008354:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
20008358:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000835c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008360:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008364:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
20008368:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000836c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008370:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008374:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
20008378:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000837c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008380:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008384:	ffff50ef 			; <UNDEFINED> instruction: 0xffff50ef
20008388:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000838c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008390:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008394:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
20008398:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000839c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083a4:	ffff7e6f 			; <UNDEFINED> instruction: 0xffff7e6f
200083a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083b4:	ffff7e6f 			; <UNDEFINED> instruction: 0xffff7e6f
200083b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083c4:	ffff7e7f 			; <UNDEFINED> instruction: 0xffff7e7f
200083c8:	f7fbfdfe 			; <UNDEFINED> instruction: 0xf7fbfdfe
200083cc:	7fbfdfef 	svcvc	0x00bfdfef
200083d0:	fbfdfeff 	blx	1ff87fd6 <startup-0x7802a>
200083d4:	bfbfeff7 	svclt	0x00bfeff7
200083d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200083fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008400:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008404:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008408:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000840c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008410:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008414:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008418:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000841c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008420:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008424:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008428:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000842c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008430:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008434:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008438:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000843c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008440:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008444:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008448:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000844c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008450:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008454:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20008458 <indoors2_gray_bits>:
	...
200084b8:	00001110 	andeq	r1, r0, r0, lsl r1
	...
200084c8:	00001090 	muleq	r0, r0, r0
	...
200084f8:	00000390 	muleq	r0, r0, r3
	...
20008508:	00001340 	andeq	r1, r0, r0, asr #6
	...
20008518:	00000830 	andeq	r0, r0, r0, lsr r8
	...
200085a8:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
200085ac:	80402010 	subhi	r2, r0, r0, lsl r0
200085b0:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
200085b4:	00008000 	andeq	r8, r0, r0
	...
200085c4:	01000000 	mrseq	r0, (UNDEF: 0)
	...
200085d4:	01000000 	mrseq	r0, (UNDEF: 0)
	...
200085e4:	01000000 	mrseq	r0, (UNDEF: 0)
200085e8:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
200085ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200085f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200085f4:	01ff8007 	mvnseq	r8, r7
	...
20008604:	00008000 	andeq	r8, r0, r0
	...
20008614:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20008624:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20008634:	00008000 	andeq	r8, r0, r0
	...
20008644:	00008000 	andeq	r8, r0, r0
	...
20008654:	00008000 	andeq	r8, r0, r0
	...
20008664:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20008674:	20008180 	andcs	r8, r0, r0, lsl #3
	...
20008684:	20808000 	addcs	r8, r0, r0
	...
20008694:	20c08100 	sbccs	r8, r0, r0, lsl #2
	...
200086a4:	21e08000 	mvncs	r8, r0
	...
200086b4:	2bf08180 	blcs	1fc28cbc <startup-0x3d7344>
	...
200086c4:	25c08180 	strbcs	r8, [r0, #384]	; 0x180
	...
200086d4:	29e08000 	stmibcs	r0!, {pc}^
	...
200086e4:	2bc08100 	blcs	1f028aec <startup-0xfd7514>
	...
200086f4:	20c08110 	sbccs	r8, r0, r0, lsl r1
	...
20008704:	28e0a190 	stmiacs	r0!, {r4, r7, r8, sp, pc}^
	...
20008714:	2bf08180 	blcs	1fc28d1c <startup-0x3d72e4>
	...
20008724:	28008000 	stmdacs	r0, {pc}
	...
20008734:	3000a010 	andcc	sl, r0, r0, lsl r0
	...
20008744:	1fc0a000 	svcne	0x00c0a000
	...
20008754:	0000a180 	andeq	sl, r0, r0, lsl #3
	...
20008764:	00008190 	muleq	r0, r0, r1
	...
20008774:	00008010 	andeq	r8, r0, r0, lsl r0
	...
20008784:	00008110 	andeq	r8, r0, r0, lsl r1
	...
20008794:	0000a010 	andeq	sl, r0, r0, lsl r0
	...
200087a4:	00008190 	muleq	r0, r0, r1
	...
200087b4:	00008190 	muleq	r0, r0, r1
	...
200087c4:	00008180 	andeq	r8, r0, r0, lsl #3
200087c8:	08040201 	stmdaeq	r4, {r0, r9}
200087cc:	80402010 	subhi	r2, r0, r0, lsl r0
200087d0:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
200087d4:	40401008 	submi	r1, r0, r8
	...

20008858 <indoors2_light_bits>:
	...
200088c8:	00000300 	andeq	r0, r0, r0, lsl #6
	...
200088d8:	00001110 	andeq	r1, r0, r0, lsl r1
	...
200088e8:	00000100 	andeq	r0, r0, r0, lsl #2
	...
200088f8:	00001000 	andeq	r1, r0, r0
	...
20008908:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
	...
20008918:	00001000 	andeq	r1, r0, r0
	...
200089c4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
200089d4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
200089e4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
200089f4:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
20008a04:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008a14:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008a24:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008a34:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008a44:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
20008a54:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008a64:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008a74:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008a84:	03702010 	cmneq	r0, #16
	...
20008a94:	03302e10 	teqeq	r0, #16, 28	; 0x100
	...
20008aa4:	02102010 	andseq	r2, r0, #16
	...
20008ab4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008ac4:	02302010 	eorseq	r2, r0, #16
	...
20008ad4:	02102010 	andseq	r2, r0, #16
	...
20008ae4:	00302e10 	eorseq	r2, r0, r0, lsl lr
	...
20008af4:	03302000 	teqeq	r0, #0
	...
20008b04:	03100000 	tsteq	r0, #0
	...
20008b14:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008b24:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008b34:	00000f00 	andeq	r0, r0, r0, lsl #30
	...
20008b44:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20008b54:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20008b64:	00002000 	andeq	r2, r0, r0
	...
20008b74:	00002000 	andeq	r2, r0, r0
	...
20008b84:	00002e00 	andeq	r2, r0, r0, lsl #28
	...

20008c58 <firstTime.4040>:
20008c58:	00000001 	andeq	r0, r0, r1
20008c5c:	00202020 	eoreq	r2, r0, r0, lsr #32
20008c60:	41524b2a 	cmpmi	r2, sl, lsr #22
20008c64:	2a202a21 	bcs	208134f0 <firstTime.4040+0x80a898>
20008c68:	2141524b 	cmpcs	r1, fp, asr #4
20008c6c:	0000002a 	andeq	r0, r0, sl, lsr #32
20008c70:	734c4944 	movtvc	r4, #51524	; 0xc944
20008c74:	7469772d 	strbtvc	r7, [r9], #-1837	; 0xfffff8d3
20008c78:	73656863 	cmnvc	r5, #6488064	; 0x630000
20008c7c:	76616820 	strbtvc	r6, [r1], -r0, lsr #16
20008c80:	00000065 	andeq	r0, r0, r5, rrx
20008c84:	20726f46 	rsbscs	r6, r2, r6, asr #30
20008c88:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
20008c8c:	65697275 	strbvs	r7, [r9, #-629]!	; 0xfffffd8b
20008c90:	68742073 	ldmdavs	r4!, {r0, r1, r4, r5, r6, sp}^
20008c94:	00000065 	andeq	r0, r0, r5, rrx
20008c98:	20202020 	eorcs	r2, r0, r0, lsr #32
20008c9c:	00000000 	andeq	r0, r0, r0
20008ca0:	6c696f63 	stclvs	15, cr6, [r9], #-396	; 0xfffffe74
20008ca4:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
20008ca8:	6566206e 	strbvs	r2, [r6, #-110]!	; 0xffffff92
20008cac:	002c7261 	eoreq	r7, ip, r1, ror #4
20008cb0:	74616874 	strbtvc	r6, [r1], #-2164	; 0xfffff78c
20008cb4:	44206120 	strtmi	r6, [r0], #-288	; 0xfffffee0
20008cb8:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
20008cbc:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
20008cc0:	00000068 	andeq	r0, r0, r8, rrx
20008cc4:	6e656877 	mcrvs	8, 3, r6, cr5, cr7, {3}
20008cc8:	72657665 	rsbvc	r7, r5, #105906176	; 0x6500000
20008ccc:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
20008cd0:	65682079 	strbvs	r2, [r8, #-121]!	; 0xffffff87
20008cd4:	00007261 	andeq	r7, r0, r1, ror #4
20008cd8:	6e207369 	cdpvs	3, 2, cr7, cr0, cr9, {3}
20008cdc:	2e726165 	rpwcssz	f6, f2, f5
20008ce0:	00000000 	andeq	r0, r0, r0
20008ce4:	70727573 	rsbsvc	r7, r2, r3, ror r5
20008ce8:	69736972 	ldmdbvs	r3!, {r1, r4, r5, r6, r8, fp, sp, lr}^
20008cec:	202c676e 	eorcs	r6, ip, lr, ror #14
20008cf0:	646e6966 	strbtvs	r6, [lr], #-2406	; 0xfffff69a
20008cf4:	00676e69 	rsbeq	r6, r7, r9, ror #28
20008cf8:	69206f53 	stmdbvs	r0!, {r0, r1, r4, r6, r8, r9, sl, fp, sp, lr}
20008cfc:	73692074 	cmnvc	r9, #116	; 0x74
20008d00:	69757120 	ldmdbvs	r5!, {r5, r8, ip, sp, lr}^
20008d04:	00006574 	andeq	r6, r0, r4, ror r5
20008d08:	20756f79 	rsbscs	r6, r5, r9, ror pc
20008d0c:	65726568 	ldrbvs	r6, [r2, #-1384]!	; 0xfffffa98
20008d10:	0000002c 	andeq	r0, r0, ip, lsr #32
20008d14:	72696568 	rsbvc	r6, r9, #104, 10	; 0x1a000000
20008d18:	206f7420 	rsbcs	r7, pc, r0, lsr #8
20008d1c:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
20008d20:	61654c20 	cmnvs	r5, r0, lsr #24
20008d24:	00002e72 	andeq	r2, r0, r2, ror lr
20008d28:	65657571 	strbvs	r7, [r5, #-1393]!	; 0xfffffa8f
20008d2c:	6144206e 	cmpvs	r4, lr, rrx
20008d30:	206f6666 	rsbcs	r6, pc, r6, ror #12
20008d34:	4420666f 	strtmi	r6, [r0], #-1647	; 0xfffff991
20008d38:	2c734c49 	ldclcs	12, cr4, [r3], #-292	; 0xfffffedc
20008d3c:	00000000 	andeq	r0, r0, r0
20008d40:	706d6574 	rsbvc	r6, sp, r4, ror r5
20008d44:	2c646574 	cfstr64cs	mvdx6, [r4], #-464	; 0xfffffe30
20008d48:	206f7420 	rsbcs	r7, pc, r0, lsr #8
20008d4c:	746f6f6c 	strbtvc	r6, [pc], #-3948	; 20008d54 <firstTime.4040+0xfc>
20008d50:	00000000 	andeq	r0, r0, r0
20008d54:	20747542 	rsbscs	r7, r4, r2, asr #10
20008d58:	6279616d 	rsbsvs	r6, r9, #1073741851	; 0x4000001b
20008d5c:	6f792065 	svcvs	0x00792065
20008d60:	65722775 	ldrbvs	r2, [r2, #-1909]!	; 0xfffff88b
20008d64:	00000000 	andeq	r0, r0, r0
20008d68:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 20008bd8 <indoors2_light_bits+0x380>
20008d6c:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
20008d70:	63697220 	cmnvs	r9, #32, 4
20008d74:	2c736568 	cfldr64cs	mvdx6, [r3], #-416	; 0xfffffe60
20008d78:	00000000 	andeq	r0, r0, r0
20008d7c:	6b636977 	blvs	218e3360 <firstTime.4040+0x18da708>
20008d80:	44206465 	strtmi	r6, [r0], #-1125	; 0xfffffb9b
20008d84:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
20008d88:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
20008d8c:	2e736568 	cdpcs	5, 7, cr6, cr3, cr8, {3}
20008d90:	00000000 	andeq	r0, r0, r0
20008d94:	65727573 	ldrbvs	r7, [r2, #-1395]!	; 0xfffffa8d
20008d98:	79622064 	stmdbvc	r2!, {r2, r5, r6, sp}^
20008d9c:	00000000 	andeq	r0, r0, r0
20008da0:	67206f73 			; <UNDEFINED> instruction: 0x67206f73
20008da4:	70706972 	rsbsvc	r6, r0, r2, ror r9
20008da8:	20796c69 	rsbscs	r6, r9, r9, ror #24
20008dac:	61657274 	smcvs	22308	; 0x5724
20008db0:	0000002d 	andeq	r0, r0, sp, lsr #32
20008db4:	6572202d 	ldrbvs	r2, [r2, #-45]!	; 0xffffffd3
20008db8:	20746573 	rsbscs	r6, r4, r3, ror r5
20008dbc:	20656874 	rsbcs	r6, r5, r4, ror r8
20008dc0:	74697773 	strbtvc	r7, [r9], #-1907	; 0xfffff88d
20008dc4:	00216863 	eoreq	r6, r1, r3, ror #16
20008dc8:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xfffff1bb
20008dcc:	62202c72 	eorvs	r2, r0, #29184	; 0x7200
20008dd0:	65766172 	ldrbvs	r6, [r6, #-370]!	; 0xfffffe8e
20008dd4:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
20008dd8:	002c6863 	eoreq	r6, ip, r3, ror #16
20008ddc:	20002044 	andcs	r2, r0, r4, asr #32
20008de0:	2000204e 	andcs	r2, r0, lr, asr #32
20008de4:	20002058 	andcs	r2, r0, r8, asr r0
20008de8:	20002062 	andcs	r2, r0, r2, rrx
20008dec:	2000206c 	andcs	r2, r0, ip, rrx
20008df0:	20002076 	andcs	r2, r0, r6, ror r0
20008df4:	20002080 	andcs	r2, r0, r0, lsl #1
20008df8:	2000208a 	andcs	r2, r0, sl, lsl #1
20008dfc:	20202020 	eorcs	r2, r0, r0, lsr #32
20008e00:	20202020 	eorcs	r2, r0, r0, lsr #32
20008e04:	20202020 	eorcs	r2, r0, r0, lsr #32
20008e08:	20202020 	eorcs	r2, r0, r0, lsr #32
20008e0c:	20202020 	eorcs	r2, r0, r0, lsr #32
20008e10:	00000000 	andeq	r0, r0, r0
20008e14:	61666c41 	cmnvs	r6, r1, asr #24
20008e18:	656d756e 	strbvs	r7, [sp, #-1390]!	; 0xfffffa92
20008e1c:	6b736972 	blvs	21ce33ec <firstTime.4040+0x1cda794>
20008e20:	00000000 	andeq	r0, r0, r0
20008e24:	64726168 	ldrbtvs	r6, [r2], #-360	; 0xfffffe98
20008e28:	a4c3a5c3 	strbge	sl, [r3], #1475	; 0x5c3
20008e2c:	7261b6c3 	rsbvc	fp, r1, #204472320	; 0xc300000
20008e30:	75732065 	ldrbvc	r2, [r3, #-101]!	; 0xffffff9b
20008e34:	00726567 	rsbseq	r6, r2, r7, ror #10

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000090e 	andeq	r0, r0, lr, lsl #18
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000081 	andeq	r0, r0, r1, lsl #1
      10:	0004940c 	andeq	r9, r4, ip, lsl #8
	...
      20:	020c0200 	andeq	r0, ip, #0, 4
      24:	00004e05 	andeq	r4, r0, r5, lsl #28
      28:	03060300 	movweq	r0, #25344	; 0x6300
      2c:	07020000 	streq	r0, [r2, -r0]
      30:	0000004e 	andeq	r0, r0, lr, asr #32
      34:	065f0300 	ldrbeq	r0, [pc], -r0, lsl #6
      38:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      3c:	0000004e 	andeq	r0, r0, lr, asr #32
      40:	10690304 	rsbne	r0, r9, r4, lsl #6
      44:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
      48:	00000055 	andeq	r0, r0, r5, asr r0
      4c:	04040008 	streq	r0, [r4], #-8
      50:	00032a07 	andeq	r2, r3, r7, lsl #20
      54:	5b040500 	blpl	10145c <startup-0x1fefeba4>
      58:	04000000 	streq	r0, [r0], #-0
      5c:	04410801 	strbeq	r0, [r1], #-2049	; 0xfffff7ff
      60:	bb060000 	bllt	180068 <startup-0x1fe7ff98>
      64:	02000011 	andeq	r0, r0, #17
      68:	0000210a 	andeq	r2, r0, sl, lsl #2
      6c:	00160700 	andseq	r0, r6, r0, lsl #14
      70:	030c0000 	movweq	r0, #49152	; 0xc000
      74:	00009e06 	andeq	r9, r0, r6, lsl #28
      78:	052c0300 	streq	r0, [ip, #-768]!	; 0xfffffd00
      7c:	07030000 	streq	r0, [r3, -r0]
      80:	0000009e 	muleq	r0, lr, r0
      84:	001d0300 	andseq	r0, sp, r0, lsl #6
      88:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
      8c:	0000009e 	muleq	r0, lr, r0
      90:	00120304 	andseq	r0, r2, r4, lsl #6
      94:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
      98:	0000009e 	muleq	r0, lr, r0
      9c:	04050008 	streq	r0, [r5], #-8
      a0:	00000062 	andeq	r0, r0, r2, rrx
      a4:	000c8e06 	andeq	r8, ip, r6, lsl #28
      a8:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
      ac:	07000000 	streq	r0, [r0, -r0]
      b0:	00000624 	andeq	r0, r0, r4, lsr #12
      b4:	28060424 	stmdacs	r6, {r2, r5, sl}
      b8:	03000001 	movweq	r0, #1
      bc:	000003de 	ldrdeq	r0, [r0], -lr
      c0:	01280704 			; <UNDEFINED> instruction: 0x01280704
      c4:	03000000 	movweq	r0, #0
      c8:	00000630 	andeq	r0, r0, r0, lsr r6
      cc:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
      d0:	03040000 	movweq	r0, #16384	; 0x4000
      d4:	00000597 	muleq	r0, r7, r5
      d8:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
      dc:	03080000 	movweq	r0, #32768	; 0x8000
      e0:	000005c3 	andeq	r0, r0, r3, asr #11
      e4:	01460c04 	cmpeq	r6, r4, lsl #24
      e8:	030c0000 	movweq	r0, #49152	; 0xc000
      ec:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
      f0:	01460d04 	cmpeq	r6, r4, lsl #26
      f4:	03100000 	tsteq	r0, #0
      f8:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
      fc:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
     100:	03140000 	tsteq	r4, #0
     104:	00000052 	andeq	r0, r0, r2, asr r0
     108:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
     10c:	03180000 	tsteq	r8, #0
     110:	0000036f 	andeq	r0, r0, pc, ror #6
     114:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
     118:	031c0000 	tsteq	ip, #0
     11c:	0000037f 	andeq	r0, r0, pc, ror r3
     120:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
     124:	00200000 	eoreq	r0, r0, r0
     128:	00a40405 	adceq	r0, r4, r5, lsl #8
     12c:	04080000 	streq	r0, [r8], #-0
     130:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     134:	01400900 	cmpeq	r0, r0, lsl #18
     138:	400a0000 	andmi	r0, sl, r0
     13c:	00000001 	andeq	r0, r0, r1
     140:	00af0405 	adceq	r0, pc, r5, lsl #8
     144:	04050000 	streq	r0, [r5], #-0
     148:	00000135 	andeq	r0, r0, r5, lsr r1
     14c:	00062506 	andeq	r2, r6, r6, lsl #10
     150:	af150400 	svcge	0x00150400
     154:	0b000000 	bleq	15c <startup-0x1ffffea4>
     158:	00000162 	andeq	r0, r0, r2, ror #2
     15c:	00000162 	andeq	r0, r0, r2, ror #2
     160:	0405000c 	streq	r0, [r5], #-12
     164:	0000014c 	andeq	r0, r0, ip, asr #2
     168:	0004c40d 	andeq	ip, r4, sp, lsl #8
     16c:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
     170:	0d000001 	stceq	0, cr0, [r0, #-4]
     174:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
     178:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
     17c:	ee060000 	cdp	0, 0, cr0, cr6, cr0, {0}
     180:	05000005 	streq	r0, [r0, #-5]
     184:	00005b24 	andeq	r5, r0, r4, lsr #22
     188:	017e0b00 	cmneq	lr, r0, lsl #22
     18c:	019a0000 	orrseq	r0, sl, r0
     190:	9a0e0000 	bls	380198 <startup-0x1fc7fe68>
     194:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     198:	04040003 	streq	r0, [r4], #-3
     19c:	00039c07 	andeq	r9, r3, r7, lsl #24
     1a0:	0f9f0d00 	svceq	0x009f0d00
     1a4:	2b050000 	blcs	1401ac <startup-0x1febfe54>
     1a8:	00000189 	andeq	r0, r0, r9, lsl #3
     1ac:	0002220d 	andeq	r2, r2, sp, lsl #4
     1b0:	892c0500 	stmdbhi	ip!, {r8, sl}
     1b4:	0d000001 	stceq	0, cr0, [r0, #-4]
     1b8:	0000044f 	andeq	r0, r0, pc, asr #8
     1bc:	01892d05 	orreq	r2, r9, r5, lsl #26
     1c0:	0c0d0000 	stceq	0, cr0, [sp], {-0}
     1c4:	05000003 	streq	r0, [r0, #-3]
     1c8:	0001892e 	andeq	r8, r1, lr, lsr #18
     1cc:	029c0d00 	addseq	r0, ip, #0, 26
     1d0:	2f050000 	svccs	0x00050000
     1d4:	00000189 	andeq	r0, r0, r9, lsl #3
     1d8:	0006060d 	andeq	r0, r6, sp, lsl #12
     1dc:	89300500 	ldmdbhi	r0!, {r8, sl}
     1e0:	0d000001 	stceq	0, cr0, [r0, #-4]
     1e4:	000005f6 	strdeq	r0, [r0], -r6
     1e8:	01893105 	orreq	r3, r9, r5, lsl #2
     1ec:	5b0b0000 	blpl	2c01f4 <startup-0x1fd3fe0c>
     1f0:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
     1f4:	0f000001 	svceq	0x00000001
     1f8:	0000019a 	muleq	r0, sl, r1
     1fc:	6d100077 	ldcvs	0, cr0, [r0, #-476]	; 0xfffffe24
     200:	06000002 	streq	r0, [r0], -r2
     204:	0001ee03 	andeq	lr, r1, r3, lsl #28
     208:	b0030500 	andlt	r0, r3, r0, lsl #10
     20c:	11200054 	qsubne	r0, r4, r0
     210:	00000466 	andeq	r0, r0, r6, ror #8
     214:	01ee0307 	mvneq	r0, r7, lsl #6
     218:	03050000 	movweq	r0, #20480	; 0x5000
     21c:	20005528 	andcs	r5, r0, r8, lsr #10
     220:	00053711 	andeq	r3, r5, r1, lsl r7
     224:	ee030800 	cdp	8, 0, cr0, cr3, cr0, {0}
     228:	05000001 	streq	r0, [r0, #-1]
     22c:	0055a003 	subseq	sl, r5, r3
     230:	005b0b20 	subseq	r0, fp, r0, lsr #22
     234:	02420000 	subeq	r0, r2, #0
     238:	9a0e0000 	bls	380240 <startup-0x1fc7fdc0>
     23c:	17000001 	strne	r0, [r0, -r1]
     240:	46110001 	ldrmi	r0, [r1], -r1
     244:	09000001 	stmdbeq	r0, {r0}
     248:	00023103 	andeq	r3, r2, r3, lsl #2
     24c:	18030500 	stmdane	r3, {r8, sl}
     250:	11200056 	qsubne	r0, r6, r0
     254:	000003c2 	andeq	r0, r0, r2, asr #7
     258:	0231030a 	eorseq	r0, r1, #671088640	; 0x28000000
     25c:	03050000 	movweq	r0, #20480	; 0x5000
     260:	20005730 	andcs	r5, r0, r0, lsr r7
     264:	00035f11 	andeq	r5, r3, r1, lsl pc
     268:	31030b00 	tstcc	r3, r0, lsl #22
     26c:	05000002 	streq	r0, [r0, #-2]
     270:	00584803 	subseq	r4, r8, r3, lsl #16
     274:	005b0b20 	subseq	r0, fp, r0, lsr #22
     278:	02860000 	addeq	r0, r6, #0
     27c:	9a0e0000 	bls	380284 <startup-0x1fc7fd7c>
     280:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     284:	79110003 	ldmdbvc	r1, {r0, r1}
     288:	0c000004 	stceq	0, cr0, [r0], {4}
     28c:	00027503 	andeq	r7, r2, r3, lsl #10
     290:	60030500 	andvs	r0, r3, r0, lsl #10
     294:	11200059 	qsubne	r0, r9, r0
     298:	00000027 	andeq	r0, r0, r7, lsr #32
     29c:	0275030d 	rsbseq	r0, r5, #872415232	; 0x34000000
     2a0:	03050000 	movweq	r0, #20480	; 0x5000
     2a4:	20005d60 	andcs	r5, r0, r0, ror #26
     2a8:	00000011 	andeq	r0, r0, r1, lsl r0
     2ac:	75030e00 	strvc	r0, [r3, #-3584]	; 0xfffff200
     2b0:	05000002 	streq	r0, [r0, #-2]
     2b4:	00616003 	rsbeq	r6, r1, r3
     2b8:	005b0b20 	subseq	r0, fp, r0, lsr #22
     2bc:	02c90000 	sbceq	r0, r9, #0
     2c0:	9a0f0000 	bls	3c02c8 <startup-0x1fc3fd38>
     2c4:	d1000001 	tstle	r0, r1
     2c8:	01981100 	orrseq	r1, r8, r0, lsl #2
     2cc:	030f0000 	movweq	r0, #61440	; 0xf000
     2d0:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
     2d4:	65600305 	strbvs	r0, [r0, #-773]!	; 0xfffffcfb
     2d8:	a5112000 	ldrge	r2, [r1, #-0]
     2dc:	10000003 	andne	r0, r0, r3
     2e0:	0002b903 	andeq	fp, r2, r3, lsl #18
     2e4:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
     2e8:	11200066 			; <UNDEFINED> instruction: 0x11200066
     2ec:	000001fa 	strdeq	r0, [r0], -sl
     2f0:	02b90311 	adcseq	r0, r9, #1140850688	; 0x44000000
     2f4:	03050000 	movweq	r0, #20480	; 0x5000
     2f8:	20006708 	andcs	r6, r0, r8, lsl #14
     2fc:	0005e407 	andeq	lr, r5, r7, lsl #8
     300:	04121400 	ldreq	r1, [r2], #-1024	; 0xfffffc00
     304:	00000345 	andeq	r0, r0, r5, asr #6
     308:	00142e03 	andseq	r2, r4, r3, lsl #28
     30c:	45051200 	strmi	r1, [r5, #-512]	; 0xfffffe00
     310:	00000003 	andeq	r0, r0, r3
     314:	00026003 	andeq	r6, r2, r3
     318:	45061200 	strmi	r1, [r6, #-512]	; 0xfffffe00
     31c:	04000003 	streq	r0, [r0], #-3
     320:	00038903 	andeq	r8, r3, r3, lsl #18
     324:	2e081200 	cdpcs	2, 0, cr1, cr8, cr0, {0}
     328:	08000001 	stmdaeq	r0, {r0}
     32c:	00037903 	andeq	r7, r3, r3, lsl #18
     330:	2e091200 	cdpcs	2, 0, cr1, cr9, cr0, {0}
     334:	0c000001 	stceq	0, cr0, [r0], {1}
     338:	00026503 	andeq	r6, r2, r3, lsl #10
     33c:	680c1200 	stmdavs	ip, {r9, ip}
     340:	10000003 	andne	r0, r0, r3
     344:	4b040500 	blmi	10174c <startup-0x1fefe8b4>
     348:	04000003 	streq	r0, [r0], #-3
     34c:	044a0801 	strbeq	r0, [sl], #-2049	; 0xfffff7ff
     350:	62090000 	andvs	r0, r9, #0
     354:	0a000003 	beq	368 <startup-0x1ffffc98>
     358:	00000362 	andeq	r0, r0, r2, ror #6
     35c:	00012e0a 	andeq	r2, r1, sl, lsl #28
     360:	04050000 	streq	r0, [r5], #-0
     364:	000002fc 	strdeq	r0, [r0], -ip
     368:	03520405 	cmpeq	r2, #83886080	; 0x5000000
     36c:	e5060000 	str	r0, [r6, #-0]
     370:	12000005 	andne	r0, r0, #5
     374:	0002fc0d 	andeq	pc, r2, sp, lsl #24
     378:	05241100 	streq	r1, [r4, #-256]!	; 0xffffff00
     37c:	03130000 	tsteq	r3, #0
     380:	00000275 	andeq	r0, r0, r5, ror r2
     384:	67dc0305 	ldrbvs	r0, [ip, r5, lsl #6]
     388:	02042000 	andeq	r2, r4, #0
     38c:	00032407 	andeq	r2, r3, r7, lsl #8
     390:	05611000 	strbeq	r1, [r1, #-0]!
     394:	25010000 	strcs	r0, [r1, #-0]
     398:	0000012e 	andeq	r0, r0, lr, lsr #2
     39c:	32280305 	eorcc	r0, r8, #335544320	; 0x14000000
     3a0:	19102000 	ldmdbne	r0, {sp}
     3a4:	01000001 	tsteq	r0, r1
     3a8:	00009e3d 	andeq	r9, r0, sp, lsr lr
     3ac:	70030500 	andvc	r0, r3, r0, lsl #10
     3b0:	10200031 	eorne	r0, r0, r1, lsr r0
     3b4:	0000018b 	andeq	r0, r0, fp, lsl #3
     3b8:	009e3e01 	addseq	r3, lr, r1, lsl #28
     3bc:	03050000 	movweq	r0, #20480	; 0x5000
     3c0:	2000321c 	andcs	r3, r0, ip, lsl r2
     3c4:	0004db10 	andeq	sp, r4, r0, lsl fp
     3c8:	9e3f0100 	rsflse	f0, f7, f0
     3cc:	05000000 	streq	r0, [r0, #-0]
     3d0:	00323003 	eorseq	r3, r2, r3
     3d4:	67621220 	strbvs	r1, [r2, -r0, lsr #4]!
     3d8:	9e400100 	dvflss	f0, f0, f0
     3dc:	05000000 	streq	r0, [r0, #-0]
     3e0:	0031b803 	eorseq	fp, r1, r3, lsl #16
     3e4:	06351020 	ldrteq	r1, [r5], -r0, lsr #32
     3e8:	43010000 	movwmi	r0, #4096	; 0x1000
     3ec:	0000009e 	muleq	r0, lr, r0
     3f0:	31980305 	orrscc	r0, r8, r5, lsl #6
     3f4:	d0102000 	andsle	r2, r0, r0
     3f8:	01000004 	tsteq	r0, r4
     3fc:	00009e44 	andeq	r9, r0, r4, asr #28
     400:	24030500 	strcs	r0, [r3], #-1280	; 0xfffffb00
     404:	10200032 	eorne	r0, r0, r2, lsr r0
     408:	0000005b 	andeq	r0, r0, fp, asr r0
     40c:	009e4501 	addseq	r4, lr, r1, lsl #10
     410:	03050000 	movweq	r0, #20480	; 0x5000
     414:	200031d4 	ldrdcs	r3, [r0], -r4
     418:	00035410 	andeq	r5, r3, r0, lsl r4
     41c:	9e460100 	dvflss	f0, f6, f0
     420:	05000000 	streq	r0, [r0, #-0]
     424:	00324003 	eorseq	r4, r2, r3
     428:	04e71020 	strbteq	r1, [r7], #32
     42c:	47010000 	strmi	r0, [r1, -r0]
     430:	0000009e 	muleq	r0, lr, r0
     434:	320c0305 	andcc	r0, ip, #335544320	; 0x14000000
     438:	fe102000 	cdp2	0, 1, cr2, cr0, cr0, {0}
     43c:	01000003 	tsteq	r0, r3
     440:	00009e48 	andeq	r9, r0, r8, asr #28
     444:	20030500 	andcs	r0, r3, r0, lsl #10
     448:	10200032 	eorne	r0, r0, r2, lsr r0
     44c:	0000057f 	andeq	r0, r0, pc, ror r5
     450:	009e4901 	addseq	r4, lr, r1, lsl #18
     454:	03050000 	movweq	r0, #20480	; 0x5000
     458:	2000322c 	andcs	r3, r0, ip, lsr #4
     45c:	0001bf10 	andeq	fp, r1, r0, lsl pc
     460:	9e4a0100 	dvflse	f0, f2, f0
     464:	05000000 	streq	r0, [r0, #-0]
     468:	0031f003 	eorseq	pc, r1, r3
     46c:	066b1020 	strbteq	r1, [fp], -r0, lsr #32
     470:	4b010000 	blmi	40478 <startup-0x1ffbfb88>
     474:	0000009e 	muleq	r0, lr, r0
     478:	31a80305 			; <UNDEFINED> instruction: 0x31a80305
     47c:	48102000 	ldmdami	r0, {sp}
     480:	01000003 	tsteq	r0, r3
     484:	0000624d 	andeq	r6, r0, sp, asr #4
     488:	9c030500 	cfstr32ls	mvfx0, [r3], {-0}
     48c:	10200031 	eorne	r0, r0, r1, lsr r0
     490:	0000020b 	andeq	r0, r0, fp, lsl #4
     494:	00624e01 	rsbeq	r4, r2, r1, lsl #28
     498:	03050000 	movweq	r0, #20480	; 0x5000
     49c:	200031f4 	strdcs	r3, [r0], -r4
     4a0:	0001a910 	andeq	sl, r1, r0, lsl r9
     4a4:	624f0100 	subvs	r0, pc, #0, 2
     4a8:	05000000 	streq	r0, [r0, #-0]
     4ac:	0031bc03 	eorseq	fp, r1, r3, lsl #24
     4b0:	01ed1020 	mvneq	r1, r0, lsr #32
     4b4:	51010000 	mrspl	r0, (UNDEF: 1)
     4b8:	00000062 	andeq	r0, r0, r2, rrx
     4bc:	32340305 	eorscc	r0, r4, #335544320	; 0x14000000
     4c0:	71102000 	tstvc	r0, r0
     4c4:	01000000 	mrseq	r0, (UNDEF: 0)
     4c8:	00006253 	andeq	r6, r0, r3, asr r2
     4cc:	74030500 	strvc	r0, [r3], #-1280	; 0xfffffb00
     4d0:	10200031 	eorne	r0, r0, r1, lsr r0
     4d4:	00000423 	andeq	r0, r0, r3, lsr #8
     4d8:	00625401 	rsbeq	r5, r2, r1, lsl #8
     4dc:	03050000 	movweq	r0, #20480	; 0x5000
     4e0:	20003210 	andcs	r3, r0, r0, lsl r2
     4e4:	0002ef10 	andeq	lr, r2, r0, lsl pc
     4e8:	62550100 	subsvs	r0, r5, #0, 2
     4ec:	05000000 	streq	r0, [r0, #-0]
     4f0:	0031e403 	eorseq	lr, r1, r3, lsl #8
     4f4:	04321020 	ldrteq	r1, [r2], #-32	; 0xffffffe0
     4f8:	56010000 	strpl	r0, [r1], -r0
     4fc:	00000062 	andeq	r0, r0, r2, rrx
     500:	31ac0305 			; <UNDEFINED> instruction: 0x31ac0305
     504:	d6102000 	ldrle	r2, [r0], -r0
     508:	01000005 	tsteq	r0, r5
     50c:	00006257 	andeq	r6, r0, r7, asr r2
     510:	8c030500 	cfstr32hi	mvfx0, [r3], {-0}
     514:	10200031 	eorne	r0, r0, r1, lsr r0
     518:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     51c:	00625801 	rsbeq	r5, r2, r1, lsl #16
     520:	03050000 	movweq	r0, #20480	; 0x5000
     524:	200031c8 	andcs	r3, r0, r8, asr #3
     528:	00051510 	andeq	r1, r5, r0, lsl r5
     52c:	62590100 	subsvs	r0, r9, #0, 2
     530:	05000000 	streq	r0, [r0, #-0]
     534:	00320003 	eorseq	r0, r2, r3
     538:	04091020 	streq	r1, [r9], #-32	; 0xffffffe0
     53c:	5a010000 	bpl	40544 <startup-0x1ffbfabc>
     540:	00000062 	andeq	r0, r0, r2, rrx
     544:	31800305 	orrcc	r0, r0, r5, lsl #6
     548:	15102000 	ldrne	r2, [r0, #-0]
     54c:	01000006 	tsteq	r0, r6
     550:	0000625b 	andeq	r6, r0, fp, asr r2
     554:	d8030500 	stmdale	r3, {r8, sl}
     558:	10200031 	eorne	r0, r0, r1, lsr r0
     55c:	00000389 	andeq	r0, r0, r9, lsl #7
     560:	012e9101 			; <UNDEFINED> instruction: 0x012e9101
     564:	03050000 	movweq	r0, #20480	; 0x5000
     568:	20003158 	andcs	r3, r0, r8, asr r1
     56c:	0004f110 	andeq	pc, r4, r0, lsl r1	; <UNPREDICTABLE>
     570:	2e920100 	fmlcss	f0, f2, f0
     574:	05000001 	streq	r0, [r0, #-1]
     578:	006bdc03 	rsbeq	sp, fp, r3, lsl #24
     57c:	06661320 	strbteq	r1, [r6], -r0, lsr #6
     580:	93010000 	movwls	r0, #4096	; 0x1000
     584:	200001fc 	strdcs	r0, [r0], -ip
     588:	00000d68 	andeq	r0, r0, r8, ror #26
     58c:	083d9c01 	ldmdaeq	sp!, {r0, sl, fp, ip, pc}
     590:	91110000 	tstls	r1, r0
     594:	01000003 	tsteq	r0, r3
     598:	00014ca1 	andeq	r4, r1, r1, lsr #25
     59c:	bc910300 	ldclt	3, cr0, [r1], {0}
     5a0:	058a117f 	streq	r1, [sl, #383]	; 0x17f
     5a4:	a2010000 	andge	r0, r1, #0
     5a8:	000000a4 	andeq	r0, r0, r4, lsr #1
     5ac:	7fb09103 	svcvc	0x00b09103
     5b0:	00067611 	andeq	r7, r6, r1, lsl r6
     5b4:	3da30100 	stfccs	f0, [r3]
     5b8:	03000008 	movweq	r0, #8
     5bc:	117fa491 			; <UNDEFINED> instruction: 0x117fa491
     5c0:	0000048b 	andeq	r0, r0, fp, lsl #9
     5c4:	014cab01 	cmpeq	ip, r1, lsl #22
     5c8:	91030000 	mrsls	r0, (UNDEF: 3)
     5cc:	72117f80 	andsvc	r7, r1, #128, 30	; 0x200
     5d0:	01000001 	tsteq	r0, r1
     5d4:	0000a4ac 	andeq	sl, r0, ip, lsr #9
     5d8:	f4910300 			; <UNDEFINED> instruction: 0xf4910300
     5dc:	0555117e 	ldrbeq	r1, [r5, #-382]	; 0xfffffe82
     5e0:	ad010000 	stcge	0, cr0, [r1, #-0]
     5e4:	0000083d 	andeq	r0, r0, sp, lsr r8
     5e8:	7ee89103 	urdvce	f1, f3
     5ec:	00029311 	andeq	r9, r2, r1, lsl r3
     5f0:	4cb40100 	ldfmis	f0, [r4]
     5f4:	03000001 	movweq	r0, #1
     5f8:	117ec491 			; <UNDEFINED> instruction: 0x117ec491
     5fc:	000003d3 	ldrdeq	r0, [r0], -r3
     600:	00a4b501 	adceq	fp, r4, r1, lsl #10
     604:	91030000 	mrsls	r0, (UNDEF: 3)
     608:	ca117eb8 	bgt	4600f0 <startup-0x1fb9ff10>
     60c:	01000005 	tsteq	r0, r5
     610:	00083db6 			; <UNDEFINED> instruction: 0x00083db6
     614:	ac910300 	ldcge	3, cr0, [r1], {0}
     618:	012d117e 			; <UNDEFINED> instruction: 0x012d117e
     61c:	bd010000 	stclt	0, cr0, [r1, #-0]
     620:	0000014c 	andeq	r0, r0, ip, asr #2
     624:	7e889103 	sinvce	f1, f3
     628:	00054911 	andeq	r4, r5, r1, lsl r9
     62c:	a4be0100 	ldrtge	r0, [lr], #256	; 0x100
     630:	03000000 	movweq	r0, #0
     634:	117dfc91 			; <UNDEFINED> instruction: 0x117dfc91
     638:	00000165 	andeq	r0, r0, r5, ror #2
     63c:	083dbf01 	ldmdaeq	sp!, {r0, r8, r9, sl, fp, ip, sp, pc}
     640:	91030000 	mrsls	r0, (UNDEF: 3)
     644:	5d117df0 	ldcpl	13, cr7, [r1, #-960]	; 0xfffffc40
     648:	01000001 	tsteq	r0, r1
     64c:	00014cc6 	andeq	r4, r1, r6, asr #25
     650:	cc910300 	ldcgt	3, cr0, [r1], {0}
     654:	15fd117d 	ldrbne	r1, [sp, #381]!	; 0x17d
     658:	cb010000 	blgt	40660 <startup-0x1ffbf9a0>
     65c:	0000014c 	andeq	r0, r0, ip, asr #2
     660:	7da89103 	stfvcd	f1, [r8, #12]!
     664:	000c4411 	andeq	r4, ip, r1, lsl r4
     668:	4cd00100 	ldfmie	f0, [r0], {0}
     66c:	03000001 	movweq	r0, #1
     670:	117d8491 			; <UNDEFINED> instruction: 0x117d8491
     674:	00000038 	andeq	r0, r0, r8, lsr r0
     678:	014cd601 	cmpeq	ip, r1, lsl #12
     67c:	91030000 	mrsls	r0, (UNDEF: 3)
     680:	6d117ce0 	ldcvs	12, cr7, [r1, #-896]	; 0xfffffc80
     684:	01000005 	tsteq	r0, r5
     688:	00014cdc 	ldrdeq	r4, [r1], -ip
     68c:	bc910300 	ldclt	3, cr0, [r1], {0}
     690:	0573117c 	ldrbeq	r1, [r3, #-380]!	; 0xfffffe84
     694:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
     698:	0000014c 	andeq	r0, r0, ip, asr #2
     69c:	7c989103 	ldfvcd	f1, [r8], {3}
     6a0:	00057911 	andeq	r7, r5, r1, lsl r9
     6a4:	4ce00100 	stfmie	f0, [r0]
     6a8:	03000001 	movweq	r0, #1
     6ac:	117bf491 			; <UNDEFINED> instruction: 0x117bf491
     6b0:	000001db 	ldrdeq	r0, [r0], -fp
     6b4:	014ce201 	cmpeq	ip, r1, lsl #4
     6b8:	91030000 	mrsls	r0, (UNDEF: 3)
     6bc:	57117bd0 			; <UNDEFINED> instruction: 0x57117bd0
     6c0:	01000001 	tsteq	r0, r1
     6c4:	00014ce4 	andeq	r4, r1, r4, ror #25
     6c8:	ac910300 	ldcge	3, cr0, [r1], {0}
     6cc:	003f117b 	eorseq	r1, pc, fp, ror r1	; <UNPREDICTABLE>
     6d0:	ff010000 			; <UNDEFINED> instruction: 0xff010000
     6d4:	0000036e 	andeq	r0, r0, lr, ror #6
     6d8:	7b989103 	blvc	fe624aec <firstTime.4040+0xde61be94>
     6dc:	00018514 	andeq	r8, r1, r4, lsl r5
     6e0:	01000100 	mrseq	r0, (UNDEF: 16)
     6e4:	0000036e 	andeq	r0, r0, lr, ror #6
     6e8:	7b849103 	blvc	fe124afc <firstTime.4040+0xde11bea4>
     6ec:	0001b914 	andeq	fp, r1, r4, lsl r9
     6f0:	01010100 	mrseq	r0, (UNDEF: 17)
     6f4:	0000036e 	andeq	r0, r0, lr, ror #6
     6f8:	7af09103 	bvc	ffc24b0c <firstTime.4040+0xdfc1beb4>
     6fc:	0001cf14 	andeq	ip, r1, r4, lsl pc
     700:	01020100 	mrseq	r0, (UNDEF: 18)
     704:	0000036e 	andeq	r0, r0, lr, ror #6
     708:	7adc9103 	bvc	ff724b1c <firstTime.4040+0xdf71bec4>
     70c:	0001c914 	andeq	ip, r1, r4, lsl r9
     710:	01030100 	mrseq	r0, (UNDEF: 19)
     714:	0000036e 	andeq	r0, r0, lr, ror #6
     718:	7ac89103 	bvc	ff224b2c <firstTime.4040+0xdf21bed4>
     71c:	0001d514 	andeq	sp, r1, r4, lsl r5
     720:	01040100 	mrseq	r0, (UNDEF: 20)
     724:	0000036e 	andeq	r0, r0, lr, ror #6
     728:	7ab49103 	bvc	fed24b3c <firstTime.4040+0xded1bee4>
     72c:	00023414 	andeq	r3, r2, r4, lsl r4
     730:	01050100 	mrseq	r0, (UNDEF: 21)
     734:	0000036e 	andeq	r0, r0, lr, ror #6
     738:	7aa09103 	bvc	fe824b4c <firstTime.4040+0xde81bef4>
     73c:	00021c14 	andeq	r1, r2, r4, lsl ip
     740:	01060100 	mrseq	r0, (UNDEF: 22)
     744:	0000036e 	andeq	r0, r0, lr, ror #6
     748:	7a8c9103 	bvc	fe324b5c <firstTime.4040+0xde31bf04>
     74c:	0001f414 	andeq	pc, r1, r4, lsl r4	; <UNPREDICTABLE>
     750:	01070100 	mrseq	r0, (UNDEF: 23)
     754:	0000036e 	andeq	r0, r0, lr, ror #6
     758:	79f89103 	ldmibvc	r8!, {r0, r1, r8, ip, pc}^
     75c:	00023a14 	andeq	r3, r2, r4, lsl sl
     760:	01080100 	mrseq	r0, (UNDEF: 24)
     764:	0000036e 	andeq	r0, r0, lr, ror #6
     768:	79e49103 	stmibvc	r4!, {r0, r1, r8, ip, pc}^
     76c:	00065114 	andeq	r5, r6, r4, lsl r1
     770:	01090100 	mrseq	r0, (UNDEF: 25)
     774:	0000036e 	andeq	r0, r0, lr, ror #6
     778:	79d09103 	ldmibvc	r0, {r0, r1, r8, ip, pc}^
     77c:	00065814 	andeq	r5, r6, r4, lsl r8
     780:	010a0100 	mrseq	r0, (UNDEF: 26)
     784:	0000036e 	andeq	r0, r0, lr, ror #6
     788:	79bc9103 	ldmibvc	ip!, {r0, r1, r8, ip, pc}
     78c:	0005ad14 	andeq	sl, r5, r4, lsl sp
     790:	010b0100 	mrseq	r0, (UNDEF: 27)
     794:	0000036e 	andeq	r0, r0, lr, ror #6
     798:	79a89103 	stmibvc	r8!, {r0, r1, r8, ip, pc}
     79c:	00012114 	andeq	r2, r1, r4, lsl r1
     7a0:	011e0100 	tsteq	lr, r0, lsl #2
     7a4:	0000012e 	andeq	r0, r0, lr, lsr #2
     7a8:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
     7ac:	000001e1 	andeq	r0, r0, r1, ror #3
     7b0:	2e011f01 	cdpcs	15, 0, cr1, cr1, cr1, {0}
     7b4:	02000001 	andeq	r0, r0, #1
     7b8:	48146891 	ldmdami	r4, {r0, r4, r7, fp, sp, lr}
     7bc:	01000000 	mrseq	r0, (UNDEF: 0)
     7c0:	012e0120 			; <UNDEFINED> instruction: 0x012e0120
     7c4:	91020000 	mrsls	r0, (UNDEF: 2)
     7c8:	06411464 	strbeq	r1, [r1], -r4, ror #8
     7cc:	21010000 	mrscs	r0, (UNDEF: 1)
     7d0:	00012e01 	andeq	r2, r1, r1, lsl #28
     7d4:	60910200 	addsvs	r0, r1, r0, lsl #4
     7d8:	00074815 	andeq	r4, r7, r5, lsl r8
     7dc:	00080020 	andeq	r0, r8, r0, lsr #32
     7e0:	02891400 	addeq	r1, r9, #0, 8
     7e4:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
     7e8:	00012e01 	andeq	r2, r1, r1, lsl #28
     7ec:	e4030500 	str	r0, [r3], #-1280	; 0xfffffb00
     7f0:	1420006b 	strtne	r0, [r0], #-107	; 0xffffff95
     7f4:	000003e5 	andeq	r0, r0, r5, ror #7
     7f8:	2e014901 	vmlacs.f16	s8, s2, s2	; <UNPREDICTABLE>
     7fc:	05000001 	streq	r0, [r0, #-1]
     800:	006be803 	rsbeq	lr, fp, r3, lsl #16
     804:	03371420 	teqeq	r7, #32, 8	; 0x20000000
     808:	4a010000 	bmi	40810 <startup-0x1ffbf7f0>
     80c:	00012e01 	andeq	r2, r1, r1, lsl #28
     810:	e0030500 	and	r0, r3, r0, lsl #10
     814:	1420006b 	strtne	r0, [r0], #-107	; 0xffffff95
     818:	0000059c 	muleq	r0, ip, r5
     81c:	2e019401 	cdpcs	4, 0, cr9, cr1, cr1, {0}
     820:	05000001 	streq	r0, [r0, #-1]
     824:	006bec03 	rsbeq	lr, fp, r3, lsl #24
     828:	05001420 	streq	r1, [r0, #-1056]	; 0xfffffbe0
     82c:	ab010000 	blge	40834 <startup-0x1ffbf7cc>
     830:	00012e01 	andeq	r2, r1, r1, lsl #28
     834:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
     838:	00200031 	eoreq	r0, r0, r1, lsr r0
     83c:	00a40b00 	adceq	r0, r4, r0, lsl #22
     840:	084d0000 	stmdaeq	sp, {}^	; <UNPREDICTABLE>
     844:	9a0f0000 	bls	3c084c <startup-0x1fc3f7b4>
     848:	00000001 	andeq	r0, r0, r1
     84c:	04171300 	ldreq	r1, [r7], #-768	; 0xfffffd00
     850:	5d010000 	stcpl	0, cr0, [r1, #-0]
     854:	20000034 	andcs	r0, r0, r4, lsr r0
     858:	000001c8 	andeq	r0, r0, r8, asr #3
     85c:	08ef9c01 	stmiaeq	pc!, {r0, sl, fp, ip, pc}^	; <UNPREDICTABLE>
     860:	37110000 	ldrcc	r0, [r1, -r0]
     864:	01000001 	tsteq	r0, r1
     868:	00009e5e 	andeq	r9, r0, lr, asr lr
     86c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     870:	00024011 	andeq	r4, r2, r1, lsl r0
     874:	9e620100 	powlss	f0, f2, f0
     878:	02000000 	andeq	r0, r0, #0
     87c:	50117091 	mulspl	r1, r1, r0
     880:	01000002 	tsteq	r0, r2
     884:	00009e66 	andeq	r9, r0, r6, ror #28
     888:	6c910200 	lfmvs	f0, 4, [r1], {0}
     88c:	0002b911 	andeq	fp, r2, r1, lsl r9
     890:	9e6a0100 	powlse	f0, f2, f0
     894:	02000000 	andeq	r0, r0, #0
     898:	c2116891 	andsgt	r6, r1, #9502720	; 0x910000
     89c:	01000002 	tsteq	r0, r2
     8a0:	00009e6e 	andeq	r9, r0, lr, ror #28
     8a4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     8a8:	0002cb11 	andeq	ip, r2, r1, lsl fp
     8ac:	9e720100 	rpwlss	f0, f2, f0
     8b0:	02000000 	andeq	r0, r0, #0
     8b4:	d4116091 	ldrle	r6, [r1], #-145	; 0xffffff6f
     8b8:	01000002 	tsteq	r0, r2
     8bc:	00009e76 	andeq	r9, r0, r6, ror lr
     8c0:	5c910200 	lfmpl	f0, 4, [r1], {0}
     8c4:	0002dd11 	andeq	sp, r2, r1, lsl sp
     8c8:	9e7a0100 	rpwlse	f0, f2, f0
     8cc:	02000000 	andeq	r0, r0, #0
     8d0:	e6115891 			; <UNDEFINED> instruction: 0xe6115891
     8d4:	01000002 	tsteq	r0, r2
     8d8:	00009e7d 	andeq	r9, r0, sp, ror lr
     8dc:	54910200 	ldrpl	r0, [r1], #512	; 0x200
     8e0:	00006711 	andeq	r6, r0, r1, lsl r7
     8e4:	9e800100 	rmflss	f0, f0, f0
     8e8:	02000000 	andeq	r0, r0, #0
     8ec:	16005091 			; <UNDEFINED> instruction: 0x16005091
     8f0:	00000280 	andeq	r0, r0, r0, lsl #5
     8f4:	00102901 	andseq	r2, r0, r1, lsl #18
     8f8:	00242000 	eoreq	r2, r4, r0
     8fc:	9c010000 	stcls	0, cr0, [r1], {-0}
     900:	00017d17 	andeq	r7, r1, r7, lsl sp
     904:	00330100 	eorseq	r0, r3, r0, lsl #2
     908:	0c200000 	stceq	0, cr0, [r0], #-0
     90c:	01000000 	mrseq	r0, (UNDEF: 0)
     910:	01e0009c 			; <UNDEFINED> instruction: 0x01e0009c
     914:	00040000 	andeq	r0, r4, r0
     918:	0000013d 	andeq	r0, r0, sp, lsr r1
     91c:	00810104 	addeq	r0, r1, r4, lsl #2
     920:	950c0000 	strls	r0, [ip, #-0]
     924:	64000006 	strvs	r0, [r0], #-6
     928:	5620000f 	strtpl	r0, [r0], -pc
     92c:	e2000000 	and	r0, r0, #0
     930:	02000002 	andeq	r0, r0, #2
     934:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
     938:	03000000 	movweq	r0, #0
     93c:	00000306 	andeq	r0, r0, r6, lsl #6
     940:	004e0702 	subeq	r0, lr, r2, lsl #14
     944:	03000000 	movweq	r0, #0
     948:	0000065f 	andeq	r0, r0, pc, asr r6
     94c:	004e0802 	subeq	r0, lr, r2, lsl #16
     950:	03040000 	movweq	r0, #16384	; 0x4000
     954:	00001069 	andeq	r1, r0, r9, rrx
     958:	00550902 	subseq	r0, r5, r2, lsl #18
     95c:	00080000 	andeq	r0, r8, r0
     960:	2a070404 	bcs	1c1978 <startup-0x1fe3e688>
     964:	05000003 	streq	r0, [r0, #-3]
     968:	00005b04 	andeq	r5, r0, r4, lsl #22
     96c:	08010400 	stmdaeq	r1, {sl}
     970:	00000441 	andeq	r0, r0, r1, asr #8
     974:	0011bb06 	andseq	fp, r1, r6, lsl #22
     978:	210a0200 	mrscs	r0, R10_fiq
     97c:	07000000 	streq	r0, [r0, -r0]
     980:	00000016 	andeq	r0, r0, r6, lsl r0
     984:	9e06030c 	cdpls	3, 0, cr0, cr6, cr12, {0}
     988:	03000000 	movweq	r0, #0
     98c:	0000052c 	andeq	r0, r0, ip, lsr #10
     990:	009e0703 	addseq	r0, lr, r3, lsl #14
     994:	03000000 	movweq	r0, #0
     998:	0000001d 	andeq	r0, r0, sp, lsl r0
     99c:	009e0803 	addseq	r0, lr, r3, lsl #16
     9a0:	03040000 	movweq	r0, #16384	; 0x4000
     9a4:	00000012 	andeq	r0, r0, r2, lsl r0
     9a8:	009e0903 	addseq	r0, lr, r3, lsl #18
     9ac:	00080000 	andeq	r0, r8, r0
     9b0:	00620405 	rsbeq	r0, r2, r5, lsl #8
     9b4:	8e060000 	cdphi	0, 0, cr0, cr6, cr0, {0}
     9b8:	0300000c 	movweq	r0, #12
     9bc:	00006d0a 	andeq	r6, r0, sl, lsl #26
     9c0:	06240700 	strteq	r0, [r4], -r0, lsl #14
     9c4:	04240000 	strteq	r0, [r4], #-0
     9c8:	00012806 	andeq	r2, r1, r6, lsl #16
     9cc:	03de0300 	bicseq	r0, lr, #0, 6
     9d0:	07040000 	streq	r0, [r4, -r0]
     9d4:	00000128 	andeq	r0, r0, r8, lsr #2
     9d8:	06300300 	ldrteq	r0, [r0], -r0, lsl #6
     9dc:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     9e0:	0000012e 	andeq	r0, r0, lr, lsr #2
     9e4:	05970304 	ldreq	r0, [r7, #772]	; 0x304
     9e8:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
     9ec:	0000012e 	andeq	r0, r0, lr, lsr #2
     9f0:	05c30308 	strbeq	r0, [r3, #776]	; 0x308
     9f4:	0c040000 	stceq	0, cr0, [r4], {-0}
     9f8:	00000146 	andeq	r0, r0, r6, asr #2
     9fc:	02ff030c 	rscseq	r0, pc, #12, 6	; 0x30000000
     a00:	0d040000 	stceq	0, cr0, [r4, #-0]
     a04:	00000146 	andeq	r0, r0, r6, asr #2
     a08:	03f00310 	mvnseq	r0, #16, 6	; 0x40000000
     a0c:	10040000 	andne	r0, r4, r0
     a10:	0000012e 	andeq	r0, r0, lr, lsr #2
     a14:	00520314 	subseq	r0, r2, r4, lsl r3
     a18:	11040000 	mrsne	r0, (UNDEF: 4)
     a1c:	0000012e 	andeq	r0, r0, lr, lsr #2
     a20:	036f0318 	cmneq	pc, #24, 6	; 0x60000000
     a24:	12040000 	andne	r0, r4, #0
     a28:	0000012e 	andeq	r0, r0, lr, lsr #2
     a2c:	037f031c 	cmneq	pc, #28, 6	; 0x70000000
     a30:	13040000 	movwne	r0, #16384	; 0x4000
     a34:	0000012e 	andeq	r0, r0, lr, lsr #2
     a38:	04050020 	streq	r0, [r5], #-32	; 0xffffffe0
     a3c:	000000a4 	andeq	r0, r0, r4, lsr #1
     a40:	69050408 	stmdbvs	r5, {r3, sl}
     a44:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     a48:	00000140 	andeq	r0, r0, r0, asr #2
     a4c:	0001400a 	andeq	r4, r1, sl
     a50:	04050000 	streq	r0, [r5], #-0
     a54:	000000af 	andeq	r0, r0, pc, lsr #1
     a58:	01350405 	teqeq	r5, r5, lsl #8
     a5c:	25060000 	strcs	r0, [r6, #-0]
     a60:	04000006 	streq	r0, [r0], #-6
     a64:	0000af15 	andeq	sl, r0, r5, lsl pc
     a68:	01620b00 	cmneq	r2, r0, lsl #22
     a6c:	01620000 	cmneq	r2, r0
     a70:	000c0000 	andeq	r0, ip, r0
     a74:	014c0405 	cmpeq	ip, r5, lsl #8
     a78:	c40d0000 	strgt	r0, [sp], #-0
     a7c:	04000004 	streq	r0, [r0], #-4
     a80:	0001571c 	andeq	r5, r1, ip, lsl r7
     a84:	03b50d00 			; <UNDEFINED> instruction: 0x03b50d00
     a88:	1d040000 	stcne	0, cr0, [r4, #-0]
     a8c:	0000012e 	andeq	r0, r0, lr, lsr #2
     a90:	9c070404 	cfstrsls	mvf0, [r7], {4}
     a94:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
     a98:	00000168 	andeq	r0, r0, r8, ror #2
     a9c:	03050301 	movweq	r0, #21249	; 0x5301
     aa0:	20003244 	andcs	r3, r0, r4, asr #4
     aa4:	0001730e 	andeq	r7, r1, lr, lsl #6
     aa8:	05040100 	streq	r0, [r4, #-256]	; 0xffffff00
     aac:	00316003 	eorseq	r6, r1, r3
     ab0:	06840f20 	streq	r0, [r4], r0, lsr #30
     ab4:	0c010000 	stceq	0, cr0, [r1], {-0}
     ab8:	20000f74 	andcs	r0, r0, r4, ror pc
     abc:	00000046 	andeq	r0, r0, r6, asr #32
     ac0:	01c39c01 	biceq	r9, r3, r1, lsl #24
     ac4:	c8100000 	ldmdagt	r0, {}	; <UNPREDICTABLE>
     ac8:	01000006 	tsteq	r0, r6
     acc:	0001620c 	andeq	r6, r1, ip, lsl #4
     ad0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     ad4:	02ff1100 	rscseq	r1, pc, #0, 2
     ad8:	07010000 	streq	r0, [r1, -r0]
     adc:	20000f64 	andcs	r0, r0, r4, ror #30
     ae0:	00000010 	andeq	r0, r0, r0, lsl r0
     ae4:	c8109c01 	ldmdagt	r0, {r0, sl, fp, ip, pc}
     ae8:	01000006 	tsteq	r0, r6
     aec:	00016207 	andeq	r6, r1, r7, lsl #4
     af0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     af4:	052b0000 	streq	r0, [fp, #-0]!
     af8:	00040000 	andeq	r0, r4, r0
     afc:	00000223 	andeq	r0, r0, r3, lsr #4
     b00:	00810104 	addeq	r0, r1, r4, lsl #2
     b04:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
     b08:	bc000009 	stclt	0, cr0, [r0], {9}
     b0c:	a820000f 	stmdage	r0!, {r0, r1, r2, r3}
     b10:	70000002 	andvc	r0, r0, r2
     b14:	02000003 	andeq	r0, r0, #3
     b18:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
     b1c:	03000000 	movweq	r0, #0
     b20:	00000306 	andeq	r0, r0, r6, lsl #6
     b24:	004e0702 	subeq	r0, lr, r2, lsl #14
     b28:	03000000 	movweq	r0, #0
     b2c:	0000065f 	andeq	r0, r0, pc, asr r6
     b30:	004e0802 	subeq	r0, lr, r2, lsl #16
     b34:	03040000 	movweq	r0, #16384	; 0x4000
     b38:	00001069 	andeq	r1, r0, r9, rrx
     b3c:	00550902 	subseq	r0, r5, r2, lsl #18
     b40:	00080000 	andeq	r0, r8, r0
     b44:	2a070404 	bcs	1c1b5c <startup-0x1fe3e4a4>
     b48:	05000003 	streq	r0, [r0, #-3]
     b4c:	00005b04 	andeq	r5, r0, r4, lsl #22
     b50:	08010400 	stmdaeq	r1, {sl}
     b54:	00000441 	andeq	r0, r0, r1, asr #8
     b58:	0011bb06 	andseq	fp, r1, r6, lsl #22
     b5c:	210a0200 	mrscs	r0, R10_fiq
     b60:	07000000 	streq	r0, [r0, -r0]
     b64:	00000016 	andeq	r0, r0, r6, lsl r0
     b68:	9e06030c 	cdpls	3, 0, cr0, cr6, cr12, {0}
     b6c:	03000000 	movweq	r0, #0
     b70:	0000052c 	andeq	r0, r0, ip, lsr #10
     b74:	009e0703 	addseq	r0, lr, r3, lsl #14
     b78:	03000000 	movweq	r0, #0
     b7c:	0000001d 	andeq	r0, r0, sp, lsl r0
     b80:	009e0803 	addseq	r0, lr, r3, lsl #16
     b84:	03040000 	movweq	r0, #16384	; 0x4000
     b88:	00000012 	andeq	r0, r0, r2, lsl r0
     b8c:	009e0903 	addseq	r0, lr, r3, lsl #18
     b90:	00080000 	andeq	r0, r8, r0
     b94:	00620405 	rsbeq	r0, r2, r5, lsl #8
     b98:	8e060000 	cdphi	0, 0, cr0, cr6, cr0, {0}
     b9c:	0300000c 	movweq	r0, #12
     ba0:	00006d0a 	andeq	r6, r0, sl, lsl #26
     ba4:	06240700 	strteq	r0, [r4], -r0, lsl #14
     ba8:	04240000 	strteq	r0, [r4], #-0
     bac:	00012806 	andeq	r2, r1, r6, lsl #16
     bb0:	03de0300 	bicseq	r0, lr, #0, 6
     bb4:	07040000 	streq	r0, [r4, -r0]
     bb8:	00000128 	andeq	r0, r0, r8, lsr #2
     bbc:	06300300 	ldrteq	r0, [r0], -r0, lsl #6
     bc0:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     bc4:	0000012e 	andeq	r0, r0, lr, lsr #2
     bc8:	05970304 	ldreq	r0, [r7, #772]	; 0x304
     bcc:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
     bd0:	0000012e 	andeq	r0, r0, lr, lsr #2
     bd4:	05c30308 	strbeq	r0, [r3, #776]	; 0x308
     bd8:	0c040000 	stceq	0, cr0, [r4], {-0}
     bdc:	00000146 	andeq	r0, r0, r6, asr #2
     be0:	02ff030c 	rscseq	r0, pc, #12, 6	; 0x30000000
     be4:	0d040000 	stceq	0, cr0, [r4, #-0]
     be8:	00000146 	andeq	r0, r0, r6, asr #2
     bec:	03f00310 	mvnseq	r0, #16, 6	; 0x40000000
     bf0:	10040000 	andne	r0, r4, r0
     bf4:	0000012e 	andeq	r0, r0, lr, lsr #2
     bf8:	00520314 	subseq	r0, r2, r4, lsl r3
     bfc:	11040000 	mrsne	r0, (UNDEF: 4)
     c00:	0000012e 	andeq	r0, r0, lr, lsr #2
     c04:	036f0318 	cmneq	pc, #24, 6	; 0x60000000
     c08:	12040000 	andne	r0, r4, #0
     c0c:	0000012e 	andeq	r0, r0, lr, lsr #2
     c10:	037f031c 	cmneq	pc, #28, 6	; 0x70000000
     c14:	13040000 	movwne	r0, #16384	; 0x4000
     c18:	0000012e 	andeq	r0, r0, lr, lsr #2
     c1c:	04050020 	streq	r0, [r5], #-32	; 0xffffffe0
     c20:	000000a4 	andeq	r0, r0, r4, lsr #1
     c24:	69050408 	stmdbvs	r5, {r3, sl}
     c28:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     c2c:	00000140 	andeq	r0, r0, r0, asr #2
     c30:	0001400a 	andeq	r4, r1, sl
     c34:	04050000 	streq	r0, [r5], #-0
     c38:	000000af 	andeq	r0, r0, pc, lsr #1
     c3c:	01350405 	teqeq	r5, r5, lsl #8
     c40:	25060000 	strcs	r0, [r6, #-0]
     c44:	04000006 	streq	r0, [r0], #-6
     c48:	0000af15 	andeq	sl, r0, r5, lsl pc
     c4c:	01620b00 	cmneq	r2, r0, lsl #22
     c50:	01620000 	cmneq	r2, r0
     c54:	000c0000 	andeq	r0, ip, r0
     c58:	014c0405 	cmpeq	ip, r5, lsl #8
     c5c:	c40d0000 	strgt	r0, [sp], #-0
     c60:	04000004 	streq	r0, [r0], #-4
     c64:	0001571c 	andeq	r5, r1, ip, lsl r7
     c68:	03b50d00 			; <UNDEFINED> instruction: 0x03b50d00
     c6c:	1d040000 	stcne	0, cr0, [r4, #-0]
     c70:	0000012e 	andeq	r0, r0, lr, lsr #2
     c74:	00005b0b 	andeq	r5, r0, fp, lsl #22
     c78:	00018e00 	andeq	r8, r1, r0, lsl #28
     c7c:	018e0e00 	orreq	r0, lr, r0, lsl #28
     c80:	000b0000 	andeq	r0, fp, r0
     c84:	9c070404 	cfstrsls	mvf0, [r7], {4}
     c88:	0f000003 	svceq	0x00000003
     c8c:	000008cd 	andeq	r0, r0, sp, asr #17
     c90:	017e0305 	cmneq	lr, r5, lsl #6
     c94:	03050000 	movweq	r0, #20480	; 0x5000
     c98:	20006bf0 	strdcs	r6, [r0], -r0
     c9c:	0007c70f 	andeq	ip, r7, pc, lsl #14
     ca0:	7e030600 	cfmadd32vc	mvax0, mvfx0, mvfx3, mvfx0
     ca4:	05000001 	streq	r0, [r0, #-1]
     ca8:	006bfc03 	rsbeq	pc, fp, r3, lsl #24
     cac:	07e20f20 	strbeq	r0, [r2, r0, lsr #30]!
     cb0:	03070000 	movweq	r0, #28672	; 0x7000
     cb4:	0000017e 	andeq	r0, r0, lr, ror r1
     cb8:	6c080305 	stcvs	3, cr0, [r8], {5}
     cbc:	430f2000 	movwmi	r2, #61440	; 0xf000
     cc0:	08000007 	stmdaeq	r0, {r0, r1, r2}
     cc4:	00017e03 	andeq	r7, r1, r3, lsl #28
     cc8:	14030500 	strne	r0, [r3], #-1280	; 0xfffffb00
     ccc:	0f20006c 	svceq	0x0020006c
     cd0:	000007f3 	strdeq	r0, [r0], -r3
     cd4:	017e0309 	cmneq	lr, r9, lsl #6
     cd8:	03050000 	movweq	r0, #20480	; 0x5000
     cdc:	20006c20 	andcs	r6, r0, r0, lsr #24
     ce0:	0009350f 	andeq	r3, r9, pc, lsl #10
     ce4:	7e030a00 	vmlavc.f32	s0, s6, s0
     ce8:	05000001 	streq	r0, [r0, #-1]
     cec:	006c2c03 	rsbeq	r2, ip, r3, lsl #24
     cf0:	08b10f20 	ldmeq	r1!, {r5, r8, r9, sl, fp}
     cf4:	030b0000 	movweq	r0, #45056	; 0xb000
     cf8:	0000017e 	andeq	r0, r0, lr, ror r1
     cfc:	6c380305 	ldcvs	3, cr0, [r8], #-20	; 0xffffffec
     d00:	160f2000 	strne	r2, [pc], -r0
     d04:	0c000008 	stceq	0, cr0, [r0], {8}
     d08:	00017e03 	andeq	r7, r1, r3, lsl #28
     d0c:	44030500 	strmi	r0, [r3], #-1280	; 0xfffffb00
     d10:	0f20006c 	svceq	0x0020006c
     d14:	00000753 	andeq	r0, r0, r3, asr r7
     d18:	017e030d 	cmneq	lr, sp, lsl #6
     d1c:	03050000 	movweq	r0, #20480	; 0x5000
     d20:	20006c50 	andcs	r6, r0, r0, asr ip
     d24:	0007810f 	andeq	r8, r7, pc, lsl #2
     d28:	7e030e00 	cdpvc	14, 0, cr0, cr3, cr0, {0}
     d2c:	05000001 	streq	r0, [r0, #-1]
     d30:	006c5c03 	rsbeq	r5, ip, r3, lsl #24
     d34:	08630f20 	stmdaeq	r3!, {r5, r8, r9, sl, fp}^
     d38:	030f0000 	movweq	r0, #61440	; 0xf000
     d3c:	0000017e 	andeq	r0, r0, lr, ror r1
     d40:	6c680305 	stclvs	3, cr0, [r8], #-20	; 0xffffffec
     d44:	07102000 	ldreq	r2, [r0, -r0]
     d48:	01000007 	tsteq	r0, r7
     d4c:	00009e11 	andeq	r9, r0, r1, lsl lr
     d50:	04030500 	streq	r0, [r3], #-1280	; 0xfffffb00
     d54:	10200035 	eorne	r0, r0, r5, lsr r0
     d58:	000006d7 	ldrdeq	r0, [r0], -r7
     d5c:	009e1201 	addseq	r1, lr, r1, lsl #4
     d60:	03050000 	movweq	r0, #20480	; 0x5000
     d64:	2000351c 	andcs	r3, r0, ip, lsl r5
     d68:	00072d10 	andeq	r2, r7, r0, lsl sp
     d6c:	9e130100 	muflss	f0, f3, f0
     d70:	05000000 	streq	r0, [r0, #-0]
     d74:	0033d403 	eorseq	sp, r3, r3, lsl #8
     d78:	080c1020 	stmdaeq	ip, {r5, ip}
     d7c:	14010000 	strne	r0, [r1], #-0
     d80:	0000009e 	muleq	r0, lr, r0
     d84:	35180305 	ldrcc	r0, [r8, #-773]	; 0xfffffcfb
     d88:	d7102000 	ldrle	r2, [r0, -r0]
     d8c:	01000007 	tsteq	r0, r7
     d90:	00009e15 	andeq	r9, r0, r5, lsl lr
     d94:	f0030500 			; <UNDEFINED> instruction: 0xf0030500
     d98:	10200034 	eorne	r0, r0, r4, lsr r0
     d9c:	000006ef 	andeq	r0, r0, pc, ror #13
     da0:	009e1601 	addseq	r1, lr, r1, lsl #12
     da4:	03050000 	movweq	r0, #20480	; 0x5000
     da8:	200033e4 	andcs	r3, r0, r4, ror #7
     dac:	00076410 	andeq	r6, r7, r0, lsl r4
     db0:	9e170100 	muflss	f0, f7, f0
     db4:	05000000 	streq	r0, [r0, #-0]
     db8:	00351403 	eorseq	r1, r5, r3, lsl #8
     dbc:	088a1020 	stmeq	sl, {r5, ip}
     dc0:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
     dc4:	0000009e 	muleq	r0, lr, r0
     dc8:	34d00305 	ldrbcc	r0, [r0], #773	; 0x305
     dcc:	38102000 	ldmdacc	r0, {sp}
     dd0:	01000007 	tsteq	r0, r7
     dd4:	00009e19 	andeq	r9, r0, r9, lsl lr
     dd8:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
     ddc:	10200034 	eorne	r0, r0, r4, lsr r0
     de0:	000006cd 	andeq	r0, r0, sp, asr #13
     de4:	009e1a01 	addseq	r1, lr, r1, lsl #20
     de8:	03050000 	movweq	r0, #20480	; 0x5000
     dec:	200034ec 	andcs	r3, r0, ip, ror #9
     df0:	0007a510 	andeq	sl, r7, r0, lsl r5
     df4:	9e1b0100 	muflse	f0, f3, f0
     df8:	05000000 	streq	r0, [r0, #-0]
     dfc:	0034f403 	eorseq	pc, r4, r3, lsl #8
     e00:	071f1020 	ldreq	r1, [pc, -r0, lsr #32]
     e04:	1d010000 	stcne	0, cr0, [r1, #-0]
     e08:	00000062 	andeq	r0, r0, r2, rrx
     e0c:	340c0305 	strcc	r0, [ip], #-773	; 0xfffffcfb
     e10:	94102000 	ldrls	r2, [r0], #-0
     e14:	01000008 	tsteq	r0, r8
     e18:	0000621e 	andeq	r6, r0, lr, lsl r2
     e1c:	f8030500 			; <UNDEFINED> instruction: 0xf8030500
     e20:	10200034 	eorne	r0, r0, r4, lsr r0
     e24:	00000840 	andeq	r0, r0, r0, asr #16
     e28:	00621f01 	rsbeq	r1, r2, r1, lsl #30
     e2c:	03050000 	movweq	r0, #20480	; 0x5000
     e30:	200034d4 	ldrdcs	r3, [r0], -r4
     e34:	0006e110 	andeq	lr, r6, r0, lsl r1
     e38:	62200100 	eorvs	r0, r0, #0, 2
     e3c:	05000000 	streq	r0, [r0, #-0]
     e40:	00340003 	eorseq	r0, r4, r3
     e44:	08df1020 	ldmeq	pc, {r5, ip}^	; <UNPREDICTABLE>
     e48:	21010000 	mrscs	r0, (UNDEF: 1)
     e4c:	00000062 	andeq	r0, r0, r2, rrx
     e50:	35080305 	strcc	r0, [r8, #-773]	; 0xfffffcfb
     e54:	11102000 	tstne	r0, r0
     e58:	01000007 	tsteq	r0, r7
     e5c:	00006222 	andeq	r6, r0, r2, lsr #4
     e60:	b8030500 	stmdalt	r3, {r8, sl}
     e64:	10200034 	eorne	r0, r0, r4, lsr r0
     e68:	00000826 	andeq	r0, r0, r6, lsr #16
     e6c:	00622301 	rsbeq	r2, r2, r1, lsl #6
     e70:	03050000 	movweq	r0, #20480	; 0x5000
     e74:	200033d8 	ldrdcs	r3, [r0], -r8
     e78:	0006f910 	andeq	pc, r6, r0, lsl r9	; <UNPREDICTABLE>
     e7c:	62240100 	eorvs	r0, r4, #0, 2
     e80:	05000000 	streq	r0, [r0, #-0]
     e84:	0033e803 	eorseq	lr, r3, r3, lsl #16
     e88:	08a21020 	stmiaeq	r2!, {r5, ip}
     e8c:	25010000 	strcs	r0, [r1, #-0]
     e90:	00000062 	andeq	r0, r0, r2, rrx
     e94:	34240305 	strtcc	r0, [r4], #-773	; 0xfffffcfb
     e98:	b9102000 	ldmdblt	r0, {sp}
     e9c:	01000007 	tsteq	r0, r7
     ea0:	00006226 	andeq	r6, r0, r6, lsr #4
     ea4:	ac030500 	cfstr32ge	mvfx0, [r3], {-0}
     ea8:	10200034 	eorne	r0, r0, r4, lsr r0
     eac:	000008f9 	strdeq	r0, [r0], -r9
     eb0:	00622701 	rsbeq	r2, r2, r1, lsl #14
     eb4:	03050000 	movweq	r0, #20480	; 0x5000
     eb8:	200034e0 	andcs	r3, r0, r0, ror #9
     ebc:	00080410 	andeq	r0, r8, r0, lsl r4
     ec0:	4c2a0100 	stfmis	f0, [sl], #-0
     ec4:	05000001 	streq	r0, [r0, #-1]
     ec8:	00344003 	eorseq	r4, r4, r3
     ecc:	087f1020 	ldmdaeq	pc!, {r5, ip}^	; <UNPREDICTABLE>
     ed0:	2b010000 	blcs	40ed8 <startup-0x1ffbf128>
     ed4:	000000a4 	andeq	r0, r0, r4, lsr #1
     ed8:	34300305 	ldrtcc	r0, [r0], #-773	; 0xfffffcfb
     edc:	ee102000 	cdp	0, 1, cr2, cr0, cr0, {0}
     ee0:	01000008 	tsteq	r0, r8
     ee4:	0000a42c 	andeq	sl, r0, ip, lsr #8
     ee8:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
     eec:	10200033 	eorne	r0, r0, r3, lsr r0
     ef0:	00000791 	muleq	r0, r1, r7
     ef4:	00a42d01 	adceq	r2, r4, r1, lsl #26
     ef8:	03050000 	movweq	r0, #20480	; 0x5000
     efc:	20003418 	andcs	r3, r0, r8, lsl r4
     f00:	00083510 	andeq	r3, r8, r0, lsl r5
     f04:	a42e0100 	strtge	r0, [lr], #-256	; 0xffffff00
     f08:	05000000 	streq	r0, [r0, #-0]
     f0c:	0034c403 	eorseq	ip, r4, r3, lsl #8
     f10:	08c21020 	stmiaeq	r2, {r5, ip}^
     f14:	2f010000 	svccs	0x00010000
     f18:	000000a4 	andeq	r0, r0, r4, lsr #1
     f1c:	34640305 	strbtcc	r0, [r4], #-773	; 0xfffffcfb
     f20:	a40b2000 	strge	r2, [fp], #-0
     f24:	3c000000 	stccc	0, cr0, [r0], {-0}
     f28:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
     f2c:	0000018e 	andeq	r0, r0, lr, lsl #3
     f30:	74100004 	ldrvc	r0, [r0], #-4
     f34:	01000008 	tsteq	r0, r8
     f38:	00042c30 	andeq	r2, r4, r0, lsr ip
     f3c:	70030500 	andvc	r0, r3, r0, lsl #10
     f40:	11200034 			; <UNDEFINED> instruction: 0x11200034
     f44:	00000859 	andeq	r0, r0, r9, asr r8
     f48:	11405f01 	cmpne	r0, r1, lsl #30
     f4c:	01242000 			; <UNDEFINED> instruction: 0x01242000
     f50:	9c010000 	stcls	0, cr0, [r1], {-0}
     f54:	00000482 	andeq	r0, r0, r2, lsl #9
     f58:	00080412 	andeq	r0, r8, r2, lsl r4
     f5c:	625f0100 	subsvs	r0, pc, #0, 2
     f60:	02000001 	andeq	r0, r0, #1
     f64:	4f0f6c91 	svcmi	0x000f6c91
     f68:	01000008 	tsteq	r0, r8
     f6c:	00012e60 	andeq	r2, r1, r0, ror #28
     f70:	74030500 	strvc	r0, [r3], #-1280	; 0xfffffb00
     f74:	0020006c 	eoreq	r0, r0, ip, rrx
     f78:	00041713 	andeq	r1, r4, r3, lsl r7
     f7c:	bc310100 	ldflts	f0, [r1], #-0
     f80:	8420000f 	strthi	r0, [r0], #-15
     f84:	01000001 	tsteq	r0, r1
     f88:	079c0f9c 			; <UNDEFINED> instruction: 0x079c0f9c
     f8c:	32010000 	andcc	r0, r1, #0
     f90:	0000009e 	muleq	r0, lr, r0
     f94:	0f749102 	svceq	0x00749102
     f98:	0000076f 	andeq	r0, r0, pc, ror #14
     f9c:	009e3601 	addseq	r3, lr, r1, lsl #12
     fa0:	91020000 	mrsls	r0, (UNDEF: 2)
     fa4:	07b00f70 			; <UNDEFINED> instruction: 0x07b00f70
     fa8:	3a010000 	bcc	40fb0 <startup-0x1ffbf050>
     fac:	0000009e 	muleq	r0, lr, r0
     fb0:	0f6c9102 	svceq	0x006c9102
     fb4:	00000778 	andeq	r0, r0, r8, ror r7
     fb8:	009e3e01 	addseq	r3, lr, r1, lsl #28
     fbc:	91020000 	mrsls	r0, (UNDEF: 2)
     fc0:	02b90f68 	adcseq	r0, r9, #104, 30	; 0x1a0
     fc4:	42010000 	andmi	r0, r1, #0
     fc8:	0000009e 	muleq	r0, lr, r0
     fcc:	0f649102 	svceq	0x00649102
     fd0:	000002c2 	andeq	r0, r0, r2, asr #5
     fd4:	009e4601 	addseq	r4, lr, r1, lsl #12
     fd8:	91020000 	mrsls	r0, (UNDEF: 2)
     fdc:	02cb0f60 	sbceq	r0, fp, #96, 30	; 0x180
     fe0:	4a010000 	bmi	40fe8 <startup-0x1ffbf018>
     fe4:	0000009e 	muleq	r0, lr, r0
     fe8:	0f5c9102 	svceq	0x005c9102
     fec:	000002d4 	ldrdeq	r0, [r0], -r4
     ff0:	009e4e01 	addseq	r4, lr, r1, lsl #28
     ff4:	91020000 	mrsls	r0, (UNDEF: 2)
     ff8:	02dd0f58 	sbcseq	r0, sp, #88, 30	; 0x160
     ffc:	52010000 	andpl	r0, r1, #0
    1000:	0000009e 	muleq	r0, lr, r0
    1004:	0f549102 	svceq	0x00549102
    1008:	000002e6 	andeq	r0, r0, r6, ror #5
    100c:	009e5601 	addseq	r5, lr, r1, lsl #12
    1010:	91020000 	mrsls	r0, (UNDEF: 2)
    1014:	00670f50 	rsbeq	r0, r7, r0, asr pc
    1018:	5a010000 	bpl	41020 <startup-0x1ffbefe0>
    101c:	0000009e 	muleq	r0, lr, r0
    1020:	004c9102 	subeq	r9, ip, r2, lsl #2
    1024:	0001d500 	andeq	sp, r1, r0, lsl #10
    1028:	23000400 	movwcs	r0, #1024	; 0x400
    102c:	04000003 	streq	r0, [r0], #-3
    1030:	00008101 	andeq	r8, r0, r1, lsl #2
    1034:	09620c00 	stmdbeq	r2!, {sl, fp}^
    1038:	12640000 	rsbne	r0, r4, #0
    103c:	00fc2000 	rscseq	r2, ip, r0
    1040:	04f80000 	ldrbteq	r0, [r8], #0
    1044:	04020000 	streq	r0, [r2], #-0
    1048:	00032a07 	andeq	r2, r3, r7, lsl #20
    104c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    1050:	00000324 	andeq	r0, r0, r4, lsr #6
    1054:	41080102 	tstmi	r8, r2, lsl #2
    1058:	03000004 	movweq	r0, #4
    105c:	6305020c 	movwvs	r0, #21004	; 0x520c
    1060:	04000000 	streq	r0, [r0], #-0
    1064:	00000306 	andeq	r0, r0, r6, lsl #6
    1068:	00210702 	eoreq	r0, r1, r2, lsl #14
    106c:	04000000 	streq	r0, [r0], #-0
    1070:	0000065f 	andeq	r0, r0, pc, asr r6
    1074:	00210802 	eoreq	r0, r1, r2, lsl #16
    1078:	04040000 	streq	r0, [r4], #-0
    107c:	00001069 	andeq	r1, r0, r9, rrx
    1080:	00630902 	rsbeq	r0, r3, r2, lsl #18
    1084:	00080000 	andeq	r0, r8, r0
    1088:	002f0405 	eoreq	r0, pc, r5, lsl #8
    108c:	bb060000 	bllt	181094 <startup-0x1fe7ef6c>
    1090:	02000011 	andeq	r0, r0, #17
    1094:	0000360a 	andeq	r3, r0, sl, lsl #12
    1098:	00160700 	andseq	r0, r6, r0, lsl #14
    109c:	030c0000 	movweq	r0, #49152	; 0xc000
    10a0:	0000a506 	andeq	sl, r0, r6, lsl #10
    10a4:	052c0400 	streq	r0, [ip, #-1024]!	; 0xfffffc00
    10a8:	07030000 	streq	r0, [r3, -r0]
    10ac:	000000a5 	andeq	r0, r0, r5, lsr #1
    10b0:	001d0400 	andseq	r0, sp, r0, lsl #8
    10b4:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    10b8:	000000a5 	andeq	r0, r0, r5, lsr #1
    10bc:	00120404 	andseq	r0, r2, r4, lsl #8
    10c0:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    10c4:	000000a5 	andeq	r0, r0, r5, lsr #1
    10c8:	04050008 	streq	r0, [r5], #-8
    10cc:	00000069 	andeq	r0, r0, r9, rrx
    10d0:	000c8e06 	andeq	r8, ip, r6, lsl #28
    10d4:	740a0300 	strvc	r0, [sl], #-768	; 0xfffffd00
    10d8:	07000000 	streq	r0, [r0, -r0]
    10dc:	00000624 	andeq	r0, r0, r4, lsr #12
    10e0:	2f060424 	svccs	0x00060424
    10e4:	04000001 	streq	r0, [r0], #-1
    10e8:	000003de 	ldrdeq	r0, [r0], -lr
    10ec:	012f0704 			; <UNDEFINED> instruction: 0x012f0704
    10f0:	04000000 	streq	r0, [r0], #-0
    10f4:	00000630 	andeq	r0, r0, r0, lsr r6
    10f8:	01350804 	teqeq	r5, r4, lsl #16
    10fc:	04040000 	streq	r0, [r4], #-0
    1100:	00000597 	muleq	r0, r7, r5
    1104:	01350904 	teqeq	r5, r4, lsl #18
    1108:	04080000 	streq	r0, [r8], #-0
    110c:	000005c3 	andeq	r0, r0, r3, asr #11
    1110:	014d0c04 	cmpeq	sp, r4, lsl #24
    1114:	040c0000 	streq	r0, [ip], #-0
    1118:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    111c:	014d0d04 	cmpeq	sp, r4, lsl #26
    1120:	04100000 	ldreq	r0, [r0], #-0
    1124:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1128:	01351004 	teqeq	r5, r4
    112c:	04140000 	ldreq	r0, [r4], #-0
    1130:	00000052 	andeq	r0, r0, r2, asr r0
    1134:	01351104 	teqeq	r5, r4, lsl #2
    1138:	04180000 	ldreq	r0, [r8], #-0
    113c:	0000036f 	andeq	r0, r0, pc, ror #6
    1140:	01351204 	teqeq	r5, r4, lsl #4
    1144:	041c0000 	ldreq	r0, [ip], #-0
    1148:	0000037f 	andeq	r0, r0, pc, ror r3
    114c:	01351304 	teqeq	r5, r4, lsl #6
    1150:	00200000 	eoreq	r0, r0, r0
    1154:	00ab0405 	adceq	r0, fp, r5, lsl #8
    1158:	04080000 	streq	r0, [r8], #-0
    115c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1160:	01470900 	cmpeq	r7, r0, lsl #18
    1164:	470a0000 	strmi	r0, [sl, -r0]
    1168:	00000001 	andeq	r0, r0, r1
    116c:	00b60405 	adcseq	r0, r6, r5, lsl #8
    1170:	04050000 	streq	r0, [r5], #-0
    1174:	0000013c 	andeq	r0, r0, ip, lsr r1
    1178:	00062506 	andeq	r2, r6, r6, lsl #10
    117c:	b6150400 	ldrlt	r0, [r5], -r0, lsl #8
    1180:	0b000000 	bleq	1188 <startup-0x1fffee78>
    1184:	00000169 	andeq	r0, r0, r9, ror #2
    1188:	00000169 	andeq	r0, r0, r9, ror #2
    118c:	0405000c 	streq	r0, [r5], #-12
    1190:	00000153 	andeq	r0, r0, r3, asr r1
    1194:	0004c40d 	andeq	ip, r4, sp, lsl #8
    1198:	5e1c0400 	cfmulspl	mvf0, mvf12, mvf0
    119c:	0d000001 	stceq	0, cr0, [r0, #-4]
    11a0:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
    11a4:	01351d04 	teqeq	r5, r4, lsl #26
    11a8:	910e0000 	mrsls	r0, (UNDEF: 14)
    11ac:	01000009 	tsteq	r0, r9
    11b0:	00126406 	andseq	r6, r2, r6, lsl #8
    11b4:	0000fc20 	andeq	pc, r0, r0, lsr #24
    11b8:	0f9c0100 	svceq	0x009c0100
    11bc:	000006c8 	andeq	r0, r0, r8, asr #13
    11c0:	01690601 	cmneq	r9, r1, lsl #12
    11c4:	91020000 	mrsls	r0, (UNDEF: 2)
    11c8:	09451074 	stmdbeq	r5, {r2, r4, r5, r6, ip}^
    11cc:	0d010000 	stceq	0, cr0, [r1, #-0]
    11d0:	00000135 	andeq	r0, r0, r5, lsr r1
    11d4:	31640305 	cmncc	r4, r5, lsl #6
    11d8:	54102000 	ldrpl	r2, [r0], #-0
    11dc:	01000009 	tsteq	r0, r9
    11e0:	0001350e 	andeq	r3, r1, lr, lsl #10
    11e4:	6c030500 	cfstr32vs	mvfx0, [r3], {-0}
    11e8:	10200031 	eorne	r0, r0, r1, lsr r0
    11ec:	00000379 	andeq	r0, r0, r9, ror r3
    11f0:	01350f01 	teqeq	r5, r1, lsl #30
    11f4:	03050000 	movweq	r0, #20480	; 0x5000
    11f8:	20003168 	andcs	r3, r0, r8, ror #2
    11fc:	06410000 	strbeq	r0, [r1], -r0
    1200:	00040000 	andeq	r0, r4, r0
    1204:	000003f1 	strdeq	r0, [r0], -r1
    1208:	00810104 	addeq	r0, r1, r4, lsl #2
    120c:	120c0000 	andne	r0, ip, #0
    1210:	6000000c 	andvs	r0, r0, ip
    1214:	64200013 	strtvs	r0, [r0], #-19	; 0xffffffed
    1218:	a2000003 	andge	r0, r0, #3
    121c:	02000005 	andeq	r0, r0, #5
    1220:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
    1224:	03000000 	movweq	r0, #0
    1228:	00000306 	andeq	r0, r0, r6, lsl #6
    122c:	004e0702 	subeq	r0, lr, r2, lsl #14
    1230:	03000000 	movweq	r0, #0
    1234:	0000065f 	andeq	r0, r0, pc, asr r6
    1238:	004e0802 	subeq	r0, lr, r2, lsl #16
    123c:	03040000 	movweq	r0, #16384	; 0x4000
    1240:	00001069 	andeq	r1, r0, r9, rrx
    1244:	00550902 	subseq	r0, r5, r2, lsl #18
    1248:	00080000 	andeq	r0, r8, r0
    124c:	2a070404 	bcs	1c2264 <startup-0x1fe3dd9c>
    1250:	05000003 	streq	r0, [r0, #-3]
    1254:	00005b04 	andeq	r5, r0, r4, lsl #22
    1258:	08010400 	stmdaeq	r1, {sl}
    125c:	00000441 	andeq	r0, r0, r1, asr #8
    1260:	0011bb06 	andseq	fp, r1, r6, lsl #22
    1264:	210a0200 	mrscs	r0, R10_fiq
    1268:	07000000 	streq	r0, [r0, -r0]
    126c:	00000016 	andeq	r0, r0, r6, lsl r0
    1270:	9e06030c 	cdpls	3, 0, cr0, cr6, cr12, {0}
    1274:	03000000 	movweq	r0, #0
    1278:	0000052c 	andeq	r0, r0, ip, lsr #10
    127c:	009e0703 	addseq	r0, lr, r3, lsl #14
    1280:	03000000 	movweq	r0, #0
    1284:	0000001d 	andeq	r0, r0, sp, lsl r0
    1288:	009e0803 	addseq	r0, lr, r3, lsl #16
    128c:	03040000 	movweq	r0, #16384	; 0x4000
    1290:	00000012 	andeq	r0, r0, r2, lsl r0
    1294:	009e0903 	addseq	r0, lr, r3, lsl #18
    1298:	00080000 	andeq	r0, r8, r0
    129c:	00620405 	rsbeq	r0, r2, r5, lsl #8
    12a0:	8e060000 	cdphi	0, 0, cr0, cr6, cr0, {0}
    12a4:	0300000c 	movweq	r0, #12
    12a8:	00006d0a 	andeq	r6, r0, sl, lsl #26
    12ac:	06240700 	strteq	r0, [r4], -r0, lsl #14
    12b0:	04240000 	strteq	r0, [r4], #-0
    12b4:	00012806 	andeq	r2, r1, r6, lsl #16
    12b8:	03de0300 	bicseq	r0, lr, #0, 6
    12bc:	07040000 	streq	r0, [r4, -r0]
    12c0:	00000128 	andeq	r0, r0, r8, lsr #2
    12c4:	06300300 	ldrteq	r0, [r0], -r0, lsl #6
    12c8:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    12cc:	0000012e 	andeq	r0, r0, lr, lsr #2
    12d0:	05970304 	ldreq	r0, [r7, #772]	; 0x304
    12d4:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    12d8:	0000012e 	andeq	r0, r0, lr, lsr #2
    12dc:	05c30308 	strbeq	r0, [r3, #776]	; 0x308
    12e0:	0c040000 	stceq	0, cr0, [r4], {-0}
    12e4:	00000146 	andeq	r0, r0, r6, asr #2
    12e8:	02ff030c 	rscseq	r0, pc, #12, 6	; 0x30000000
    12ec:	0d040000 	stceq	0, cr0, [r4, #-0]
    12f0:	00000146 	andeq	r0, r0, r6, asr #2
    12f4:	03f00310 	mvnseq	r0, #16, 6	; 0x40000000
    12f8:	10040000 	andne	r0, r4, r0
    12fc:	0000012e 	andeq	r0, r0, lr, lsr #2
    1300:	00520314 	subseq	r0, r2, r4, lsl r3
    1304:	11040000 	mrsne	r0, (UNDEF: 4)
    1308:	0000012e 	andeq	r0, r0, lr, lsr #2
    130c:	036f0318 	cmneq	pc, #24, 6	; 0x60000000
    1310:	12040000 	andne	r0, r4, #0
    1314:	0000012e 	andeq	r0, r0, lr, lsr #2
    1318:	037f031c 	cmneq	pc, #28, 6	; 0x70000000
    131c:	13040000 	movwne	r0, #16384	; 0x4000
    1320:	0000012e 	andeq	r0, r0, lr, lsr #2
    1324:	04050020 	streq	r0, [r5], #-32	; 0xffffffe0
    1328:	000000a4 	andeq	r0, r0, r4, lsr #1
    132c:	69050408 	stmdbvs	r5, {r3, sl}
    1330:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1334:	00000140 	andeq	r0, r0, r0, asr #2
    1338:	0001400a 	andeq	r4, r1, sl
    133c:	04050000 	streq	r0, [r5], #-0
    1340:	000000af 	andeq	r0, r0, pc, lsr #1
    1344:	01350405 	teqeq	r5, r5, lsl #8
    1348:	25060000 	strcs	r0, [r6, #-0]
    134c:	04000006 	streq	r0, [r0], #-6
    1350:	0000af15 	andeq	sl, r0, r5, lsl pc
    1354:	01620b00 	cmneq	r2, r0, lsl #22
    1358:	01620000 	cmneq	r2, r0
    135c:	000c0000 	andeq	r0, ip, r0
    1360:	014c0405 	cmpeq	ip, r5, lsl #8
    1364:	c40d0000 	strgt	r0, [sp], #-0
    1368:	04000004 	streq	r0, [r0], #-4
    136c:	0001571c 	andeq	r5, r1, ip, lsl r7
    1370:	03b50d00 			; <UNDEFINED> instruction: 0x03b50d00
    1374:	1d040000 	stcne	0, cr0, [r4, #-0]
    1378:	0000012e 	andeq	r0, r0, lr, lsr #2
    137c:	00005b0b 	andeq	r5, r0, fp, lsl #22
    1380:	00018e00 	andeq	r8, r1, r0, lsl #28
    1384:	018e0e00 	orreq	r0, lr, r0, lsl #28
    1388:	00630000 	rsbeq	r0, r3, r0
    138c:	9c070404 	cfstrsls	mvf0, [r7], {4}
    1390:	0f000003 	svceq	0x00000003
    1394:	00000c78 	andeq	r0, r0, r8, ror ip
    1398:	017e0305 	cmneq	lr, r5, lsl #6
    139c:	03050000 	movweq	r0, #20480	; 0x5000
    13a0:	20006c78 	andcs	r6, r0, r8, ror ip
    13a4:	000ae30f 	andeq	lr, sl, pc, lsl #6
    13a8:	7e030600 	cfmadd32vc	mvax0, mvfx0, mvfx3, mvfx0
    13ac:	05000001 	streq	r0, [r0, #-1]
    13b0:	006cdc03 	rsbeq	sp, ip, r3, lsl #24
    13b4:	0b2b0f20 	bleq	ac503c <startup-0x1f53afc4>
    13b8:	03070000 	movweq	r0, #28672	; 0x7000
    13bc:	0000017e 	andeq	r0, r0, lr, ror r1
    13c0:	6d400305 	stclvs	3, cr0, [r0, #-20]	; 0xffffffec
    13c4:	d20f2000 	andle	r2, pc, #0
    13c8:	0800000a 	stmdaeq	r0, {r1, r3}
    13cc:	00017e03 	andeq	r7, r1, r3, lsl #28
    13d0:	a4030500 	strge	r0, [r3], #-1280	; 0xfffffb00
    13d4:	0f20006d 	svceq	0x0020006d
    13d8:	00000c51 	andeq	r0, r0, r1, asr ip
    13dc:	017e0309 	cmneq	lr, r9, lsl #6
    13e0:	03050000 	movweq	r0, #20480	; 0x5000
    13e4:	20006e08 	andcs	r6, r0, r8, lsl #28
    13e8:	000d250f 	andeq	r2, sp, pc, lsl #10
    13ec:	7e030a00 	vmlavc.f32	s0, s6, s0
    13f0:	05000001 	streq	r0, [r0, #-1]
    13f4:	006e6c03 	rsbeq	r6, lr, r3, lsl #24
    13f8:	0afe0f20 	beq	fff85080 <firstTime.4040+0xdff7c428>
    13fc:	030b0000 	movweq	r0, #45056	; 0xb000
    1400:	0000017e 	andeq	r0, r0, lr, ror r1
    1404:	6ed00305 	cdpvs	3, 13, cr0, cr0, cr5, {0}
    1408:	ec0f2000 	stc	0, cr2, [pc], {-0}
    140c:	0c00000b 	stceq	0, cr0, [r0], {11}
    1410:	00017e03 	andeq	r7, r1, r3, lsl #28
    1414:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
    1418:	0f20006f 	svceq	0x0020006f
    141c:	000009ad 	andeq	r0, r0, sp, lsr #19
    1420:	017e030d 	cmneq	lr, sp, lsl #6
    1424:	03050000 	movweq	r0, #20480	; 0x5000
    1428:	20006f98 	mulcs	r0, r8, pc	; <UNPREDICTABLE>
    142c:	000b0f0f 	andeq	r0, fp, pc, lsl #30
    1430:	7e030e00 	cdpvc	14, 0, cr0, cr3, cr0, {0}
    1434:	05000001 	streq	r0, [r0, #-1]
    1438:	006ffc03 	rsbeq	pc, pc, r3, lsl #24
    143c:	0b930f20 	bleq	fe4c50c4 <firstTime.4040+0xde4bc46c>
    1440:	030f0000 	movweq	r0, #61440	; 0xf000
    1444:	0000017e 	andeq	r0, r0, lr, ror r1
    1448:	70600305 	rsbvc	r0, r0, r5, lsl #6
    144c:	c90f2000 	stmdbgt	pc, {sp}	; <UNPREDICTABLE>
    1450:	10000009 	andne	r0, r0, r9
    1454:	00017e03 	andeq	r7, r1, r3, lsl #28
    1458:	c4030500 	strgt	r0, [r3], #-1280	; 0xfffffb00
    145c:	0f200070 	svceq	0x00200070
    1460:	00000b3c 	andeq	r0, r0, ip, lsr fp
    1464:	017e0311 	cmneq	lr, r1, lsl r3
    1468:	03050000 	movweq	r0, #20480	; 0x5000
    146c:	20007128 	andcs	r7, r0, r8, lsr #2
    1470:	000b5c0f 	andeq	r5, fp, pc, lsl #24
    1474:	7e031200 	cdpvc	2, 0, cr1, cr3, cr0, {0}
    1478:	05000001 	streq	r0, [r0, #-1]
    147c:	00718c03 	rsbseq	r8, r1, r3, lsl #24
    1480:	09f30f20 	ldmibeq	r3!, {r5, r8, r9, sl, fp}^
    1484:	03130000 	tsteq	r3, #0
    1488:	0000017e 	andeq	r0, r0, lr, ror r1
    148c:	71f00305 	mvnsvc	r0, r5, lsl #6
    1490:	fc102000 	ldc2	0, cr2, [r0], {-0}
    1494:	0100000b 	tsteq	r0, fp
    1498:	00009e15 	andeq	r9, r0, r5, lsl lr
    149c:	8c030500 	cfstr32hi	mvfx0, [r3], {-0}
    14a0:	10200035 	eorne	r0, r0, r5, lsr r0
    14a4:	00000a2f 	andeq	r0, r0, pc, lsr #20
    14a8:	009e1601 	addseq	r1, lr, r1, lsl #12
    14ac:	03050000 	movweq	r0, #20480	; 0x5000
    14b0:	20003524 	andcs	r3, r0, r4, lsr #10
    14b4:	000a1910 	andeq	r1, sl, r0, lsl r9
    14b8:	9e170100 	muflss	f0, f7, f0
    14bc:	05000000 	streq	r0, [r0, #-0]
    14c0:	00361c03 	eorseq	r1, r6, r3, lsl #24
    14c4:	0a711020 	beq	1c4554c <startup-0x1e3baab4>
    14c8:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    14cc:	0000009e 	muleq	r0, lr, r0
    14d0:	35880305 	strcc	r0, [r8, #773]	; 0x305
    14d4:	6c102000 	ldcvs	0, cr2, [r0], {-0}
    14d8:	0100000b 	tsteq	r0, fp
    14dc:	00009e19 	andeq	r9, r0, r9, lsl lr
    14e0:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
    14e4:	10200036 	eorne	r0, r0, r6, lsr r0
    14e8:	00000c07 	andeq	r0, r0, r7, lsl #24
    14ec:	009e1a01 	addseq	r1, lr, r1, lsl #20
    14f0:	03050000 	movweq	r0, #20480	; 0x5000
    14f4:	200036c0 	andcs	r3, r0, r0, asr #13
    14f8:	000a2410 	andeq	r2, sl, r0, lsl r4
    14fc:	9e1b0100 	muflse	f0, f3, f0
    1500:	05000000 	streq	r0, [r0, #-0]
    1504:	00358003 	eorseq	r8, r5, r3
    1508:	0c941020 	ldceq	0, cr1, [r4], {32}
    150c:	1c010000 	stcne	0, cr0, [r1], {-0}
    1510:	0000009e 	muleq	r0, lr, r0
    1514:	35a80305 	strcc	r0, [r8, #773]!	; 0x305
    1518:	04102000 	ldreq	r2, [r0], #-0
    151c:	0100000a 	tsteq	r0, sl
    1520:	00009e1d 	andeq	r9, r0, sp, lsl lr
    1524:	d4030500 	strle	r0, [r3], #-1280	; 0xfffffb00
    1528:	10200035 	eorne	r0, r0, r5, lsr r0
    152c:	00000bd2 	ldrdeq	r0, [r0], -r2
    1530:	009e1e01 	addseq	r1, lr, r1, lsl #28
    1534:	03050000 	movweq	r0, #20480	; 0x5000
    1538:	200036a4 	andcs	r3, r0, r4, lsr #13
    153c:	000a6710 	andeq	r6, sl, r0, lsl r7
    1540:	9e1f0100 	muflse	f0, f7, f0
    1544:	05000000 	streq	r0, [r0, #-0]
    1548:	00358403 	eorseq	r8, r5, r3, lsl #8
    154c:	0cdc1020 	ldcleq	0, cr1, [ip], {32}
    1550:	20010000 	andcs	r0, r1, r0
    1554:	0000009e 	muleq	r0, lr, r0
    1558:	35200305 	strcc	r0, [r0, #-773]!	; 0xfffffcfb
    155c:	48102000 	ldmdami	r0, {sp}
    1560:	0100000a 	tsteq	r0, sl
    1564:	00009e21 	andeq	r9, r0, r1, lsr #28
    1568:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
    156c:	10200035 	eorne	r0, r0, r5, lsr r0
    1570:	00000c6e 	andeq	r0, r0, lr, ror #24
    1574:	009e2201 	addseq	r2, lr, r1, lsl #4
    1578:	03050000 	movweq	r0, #20480	; 0x5000
    157c:	200035b8 			; <UNDEFINED> instruction: 0x200035b8
    1580:	000bad10 	andeq	sl, fp, r0, lsl sp
    1584:	9e230100 	suflss	f0, f3, f0
    1588:	05000000 	streq	r0, [r0, #-0]
    158c:	0035fc03 	eorseq	pc, r5, r3, lsl #24
    1590:	0cab1020 	stceq	0, cr1, [fp], #128	; 0x80
    1594:	25010000 	strcs	r0, [r1, #-0]
    1598:	00000062 	andeq	r0, r0, r2, rrx
    159c:	359c0305 	ldrcc	r0, [ip, #773]	; 0x305
    15a0:	ac102000 	ldcge	0, cr2, [r0], {-0}
    15a4:	0100000a 	tsteq	r0, sl
    15a8:	00006226 	andeq	r6, r0, r6, lsr #4
    15ac:	10030500 	andne	r0, r3, r0, lsl #10
    15b0:	10200036 	eorne	r0, r0, r6, lsr r0
    15b4:	00000c61 	andeq	r0, r0, r1, ror #24
    15b8:	00622701 	rsbeq	r2, r2, r1, lsl #14
    15bc:	03050000 	movweq	r0, #20480	; 0x5000
    15c0:	200035ac 	andcs	r3, r0, ip, lsr #11
    15c4:	000bdd10 	andeq	sp, fp, r0, lsl sp
    15c8:	62280100 	eorvs	r0, r8, #0, 2
    15cc:	05000000 	streq	r0, [r0, #-0]
    15d0:	0036a803 	eorseq	sl, r6, r3, lsl #16
    15d4:	099e1020 	ldmibeq	lr, {r5, ip}
    15d8:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    15dc:	00000062 	andeq	r0, r0, r2, rrx
    15e0:	36200305 	strtcc	r0, [r0], -r5, lsl #6
    15e4:	90102000 	andsls	r2, r0, r0
    15e8:	0100000a 	tsteq	r0, sl
    15ec:	0000622a 	andeq	r6, r0, sl, lsr #4
    15f0:	c8030500 	stmdagt	r3, {r8, sl}
    15f4:	10200035 	eorne	r0, r0, r5, lsr r0
    15f8:	00000cb9 			; <UNDEFINED> instruction: 0x00000cb9
    15fc:	00622b01 	rsbeq	r2, r2, r1, lsl #22
    1600:	03050000 	movweq	r0, #20480	; 0x5000
    1604:	20003600 	andcs	r3, r0, r0, lsl #12
    1608:	000b4d10 	andeq	r4, fp, r0, lsl sp
    160c:	622c0100 	eorvs	r0, ip, #0, 2
    1610:	05000000 	streq	r0, [r0, #-0]
    1614:	00364403 	eorseq	r4, r6, r3, lsl #8
    1618:	0b851020 	bleq	fe1456a0 <firstTime.4040+0xde13ca48>
    161c:	2d010000 	stccs	0, cr0, [r1, #-0]
    1620:	00000062 	andeq	r0, r0, r2, rrx
    1624:	36500305 	ldrbcc	r0, [r0], -r5, lsl #6
    1628:	39102000 	ldmdbcc	r0, {sp}
    162c:	0100000a 	tsteq	r0, sl
    1630:	0000622e 	andeq	r6, r0, lr, lsr #4
    1634:	38030500 	stmdacc	r3, {r8, sl}
    1638:	10200035 	eorne	r0, r0, r5, lsr r0
    163c:	00000b76 	andeq	r0, r0, r6, ror fp
    1640:	00622f01 	rsbeq	r2, r2, r1, lsl #30
    1644:	03050000 	movweq	r0, #20480	; 0x5000
    1648:	20003638 	andcs	r3, r0, r8, lsr r6
    164c:	000a9e10 	andeq	r9, sl, r0, lsl lr
    1650:	62300100 	eorsvs	r0, r0, #0, 2
    1654:	05000000 	streq	r0, [r0, #-0]
    1658:	0036b403 	eorseq	fp, r6, r3, lsl #8
    165c:	0bc31020 	bleq	ff0c56e4 <firstTime.4040+0xdf0bca8c>
    1660:	31010000 	mrscc	r0, (UNDEF: 1)
    1664:	00000062 	andeq	r0, r0, r2, rrx
    1668:	35e40305 	strbcc	r0, [r4, #773]!	; 0x305
    166c:	da102000 	ble	409674 <startup-0x1fbf698c>
    1670:	01000009 	tsteq	r0, r9
    1674:	00006232 	andeq	r6, r0, r2, lsr r2
    1678:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
    167c:	10200035 	eorne	r0, r0, r5, lsr r0
    1680:	00000aba 			; <UNDEFINED> instruction: 0x00000aba
    1684:	00623301 	rsbeq	r3, r2, r1, lsl #6
    1688:	03050000 	movweq	r0, #20480	; 0x5000
    168c:	200035d8 	ldrdcs	r3, [r0], -r8
    1690:	000c4910 	andeq	r4, ip, r0, lsl r9
    1694:	4c360100 	ldfmis	f0, [r6], #-0
    1698:	05000001 	streq	r0, [r0, #-1]
    169c:	00355003 	eorseq	r5, r5, r3
    16a0:	0c891020 	stceq	0, cr1, [r9], {32}
    16a4:	37010000 	strcc	r0, [r1, -r0]
    16a8:	000000a4 	andeq	r0, r0, r4, lsr #1
    16ac:	35740305 	ldrbcc	r0, [r4, #-773]!	; 0xfffffcfb
    16b0:	10102000 	andsne	r2, r0, r0
    16b4:	0100000d 	tsteq	r0, sp
    16b8:	0000a438 	andeq	sl, r0, r8, lsr r4
    16bc:	44030500 	strmi	r0, [r3], #-1280	; 0xfffffb00
    16c0:	10200035 	eorne	r0, r0, r5, lsr r0
    16c4:	00000b20 	andeq	r0, r0, r0, lsr #22
    16c8:	00a43901 	adceq	r3, r4, r1, lsl #18
    16cc:	03050000 	movweq	r0, #20480	; 0x5000
    16d0:	2000362c 	andcs	r3, r0, ip, lsr #12
    16d4:	0009be10 	andeq	fp, r9, r0, lsl lr
    16d8:	a43a0100 	ldrtge	r0, [sl], #-256	; 0xffffff00
    16dc:	05000000 	streq	r0, [r0, #-0]
    16e0:	00359003 	eorseq	r9, r5, r3
    16e4:	0ce71020 	stcleq	0, cr1, [r7], #128	; 0x80
    16e8:	3b010000 	blcc	416f0 <startup-0x1ffbe910>
    16ec:	000000a4 	andeq	r0, r0, r4, lsr #1
    16f0:	35f00305 	ldrbcc	r0, [r0, #773]!	; 0x305
    16f4:	f3102000 	vhadd.u16	d2, d0, d0
    16f8:	0100000a 	tsteq	r0, sl
    16fc:	0000a43c 	andeq	sl, r0, ip, lsr r4
    1700:	28030500 	stmdacs	r3, {r8, sl}
    1704:	0b200035 	bleq	8017e0 <startup-0x1f7fe820>
    1708:	000000a4 	andeq	r0, r0, r4, lsr #1
    170c:	00000519 	andeq	r0, r0, r9, lsl r5
    1710:	00018e0e 	andeq	r8, r1, lr, lsl #28
    1714:	10000500 	andne	r0, r0, r0, lsl #10
    1718:	00000bb8 			; <UNDEFINED> instruction: 0x00000bb8
    171c:	05093f01 	streq	r3, [r9, #-3841]	; 0xfffff0ff
    1720:	03050000 	movweq	r0, #20480	; 0x5000
    1724:	2000365c 	andcs	r3, r0, ip, asr r6
    1728:	000c3f11 	andeq	r3, ip, r1, lsl pc
    172c:	6c760100 	ldfvse	f0, [r6], #-0
    1730:	58200015 	stmdapl	r0!, {r0, r2, r4}
    1734:	01000001 	tsteq	r0, r1
    1738:	00055f9c 	muleq	r5, ip, pc	; <UNPREDICTABLE>
    173c:	0c491200 	sfmeq	f1, 2, [r9], {-0}
    1740:	76010000 	strvc	r0, [r1], -r0
    1744:	00000162 	andeq	r0, r0, r2, ror #2
    1748:	0f6c9102 	svceq	0x006c9102
    174c:	0000084f 	andeq	r0, r0, pc, asr #16
    1750:	012e7701 			; <UNDEFINED> instruction: 0x012e7701
    1754:	03050000 	movweq	r0, #20480	; 0x5000
    1758:	20007254 	andcs	r7, r0, r4, asr r2
    175c:	04171300 	ldreq	r1, [r7], #-768	; 0xfffffd00
    1760:	40010000 	andmi	r0, r1, r0
    1764:	20001360 	andcs	r1, r0, r0, ror #6
    1768:	0000020c 	andeq	r0, r0, ip, lsl #4
    176c:	c80f9c01 	stmdagt	pc, {r0, sl, fp, ip, pc}	; <UNPREDICTABLE>
    1770:	0100000c 	tsteq	r0, ip
    1774:	00009e42 	andeq	r9, r0, r2, asr #28
    1778:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    177c:	000cd20f 	andeq	sp, ip, pc, lsl #4
    1780:	9e450100 	dvflss	f0, f5, f0
    1784:	02000000 	andeq	r0, r0, #0
    1788:	c80f7091 	stmdagt	pc, {r0, r4, r7, ip, sp, lr}	; <UNPREDICTABLE>
    178c:	0100000a 	tsteq	r0, sl
    1790:	00009e48 	andeq	r9, r0, r8, asr #28
    1794:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1798:	0009e90f 	andeq	lr, r9, pc, lsl #18
    179c:	9e4c0100 	dvflse	f0, f4, f0
    17a0:	02000000 	andeq	r0, r0, #0
    17a4:	f20f6891 	vtst.8	d6, d31, d1
    17a8:	0100000c 	tsteq	r0, ip
    17ac:	00009e4f 	andeq	r9, r0, pc, asr #28
    17b0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    17b4:	000a860f 	andeq	r8, sl, pc, lsl #12
    17b8:	9e520100 	rdflss	f0, f2, f0
    17bc:	02000000 	andeq	r0, r0, #0
    17c0:	9e0f6091 	mcrls	0, 0, r6, cr15, cr1, {4}
    17c4:	0100000c 	tsteq	r0, ip
    17c8:	00009e57 	andeq	r9, r0, r7, asr lr
    17cc:	5c910200 	lfmpl	f0, 4, [r1], {0}
    17d0:	000cfc0f 	andeq	pc, ip, pc, lsl #24
    17d4:	9e5a0100 	rdflse	f0, f2, f0
    17d8:	02000000 	andeq	r0, r0, #0
    17dc:	060f5891 			; <UNDEFINED> instruction: 0x060f5891
    17e0:	0100000d 	tsteq	r0, sp
    17e4:	00009e5d 	andeq	r9, r0, sp, asr lr
    17e8:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    17ec:	000a0f0f 	andeq	r0, sl, pc, lsl #30
    17f0:	9e610100 	powlss	f0, f1, f0
    17f4:	02000000 	andeq	r0, r0, #0
    17f8:	530f5091 	movwpl	r5, #61585	; 0xf091
    17fc:	0100000a 	tsteq	r0, sl
    1800:	00009e64 	andeq	r9, r0, r4, ror #28
    1804:	4c910200 	lfmmi	f0, 4, [r1], {0}
    1808:	000a5d0f 	andeq	r5, sl, pc, lsl #26
    180c:	9e670100 	powlss	f0, f7, f0
    1810:	02000000 	andeq	r0, r0, #0
    1814:	1b0f4891 	blne	3d3a60 <startup-0x1fc2c5a0>
    1818:	0100000d 	tsteq	r0, sp
    181c:	00009e6b 	andeq	r9, r0, fp, ror #28
    1820:	44910200 	ldrmi	r0, [r1], #512	; 0x200
    1824:	000ba30f 	andeq	sl, fp, pc, lsl #6
    1828:	9e6e0100 	powlse	f0, f6, f0
    182c:	02000000 	andeq	r0, r0, #0
    1830:	7c0f4091 	stcvc	0, cr4, [pc], {145}	; 0x91
    1834:	0100000a 	tsteq	r0, sl
    1838:	00009e71 	andeq	r9, r0, r1, ror lr
    183c:	bc910300 	ldclt	3, cr0, [r1], {0}
    1840:	9800007f 	stmdals	r0, {r0, r1, r2, r3, r4, r5, r6}
    1844:	04000004 	streq	r0, [r0], #-4
    1848:	0004f100 	andeq	pc, r4, r0, lsl #2
    184c:	81010400 	tsthi	r1, r0, lsl #8
    1850:	0c000000 	stceq	0, cr0, [r0], {-0}
    1854:	00000ee9 	andeq	r0, r0, r9, ror #29
    1858:	200016c4 	andcs	r1, r0, r4, asr #13
    185c:	00000238 	andeq	r0, r0, r8, lsr r2
    1860:	00000783 	andeq	r0, r0, r3, lsl #15
    1864:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
    1868:	0000004e 	andeq	r0, r0, lr, asr #32
    186c:	00030603 	andeq	r0, r3, r3, lsl #12
    1870:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
    1874:	00000000 	andeq	r0, r0, r0
    1878:	00065f03 	andeq	r5, r6, r3, lsl #30
    187c:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
    1880:	04000000 	streq	r0, [r0], #-0
    1884:	00106903 	andseq	r6, r0, r3, lsl #18
    1888:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
    188c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1890:	07040400 	streq	r0, [r4, -r0, lsl #8]
    1894:	0000032a 	andeq	r0, r0, sl, lsr #6
    1898:	005b0405 	subseq	r0, fp, r5, lsl #8
    189c:	01040000 	mrseq	r0, (UNDEF: 4)
    18a0:	00044108 	andeq	r4, r4, r8, lsl #2
    18a4:	11bb0600 			; <UNDEFINED> instruction: 0x11bb0600
    18a8:	0a020000 	beq	818b0 <startup-0x1ff7e750>
    18ac:	00000021 	andeq	r0, r0, r1, lsr #32
    18b0:	00001607 	andeq	r1, r0, r7, lsl #12
    18b4:	06030c00 	streq	r0, [r3], -r0, lsl #24
    18b8:	0000009e 	muleq	r0, lr, r0
    18bc:	00052c03 	andeq	r2, r5, r3, lsl #24
    18c0:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
    18c4:	00000000 	andeq	r0, r0, r0
    18c8:	00001d03 	andeq	r1, r0, r3, lsl #26
    18cc:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
    18d0:	04000000 	streq	r0, [r0], #-0
    18d4:	00001203 	andeq	r1, r0, r3, lsl #4
    18d8:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
    18dc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    18e0:	62040500 	andvs	r0, r4, #0, 10
    18e4:	06000000 	streq	r0, [r0], -r0
    18e8:	00000c8e 	andeq	r0, r0, lr, lsl #25
    18ec:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
    18f0:	24070000 	strcs	r0, [r7], #-0
    18f4:	24000006 	strcs	r0, [r0], #-6
    18f8:	01280604 			; <UNDEFINED> instruction: 0x01280604
    18fc:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    1900:	04000003 	streq	r0, [r0], #-3
    1904:	00012807 	andeq	r2, r1, r7, lsl #16
    1908:	30030000 	andcc	r0, r3, r0
    190c:	04000006 	streq	r0, [r0], #-6
    1910:	00012e08 	andeq	r2, r1, r8, lsl #28
    1914:	97030400 	strls	r0, [r3, -r0, lsl #8]
    1918:	04000005 	streq	r0, [r0], #-5
    191c:	00012e09 	andeq	r2, r1, r9, lsl #28
    1920:	c3030800 	movwgt	r0, #14336	; 0x3800
    1924:	04000005 	streq	r0, [r0], #-5
    1928:	0001460c 	andeq	r4, r1, ip, lsl #12
    192c:	ff030c00 			; <UNDEFINED> instruction: 0xff030c00
    1930:	04000002 	streq	r0, [r0], #-2
    1934:	0001460d 	andeq	r4, r1, sp, lsl #12
    1938:	f0031000 			; <UNDEFINED> instruction: 0xf0031000
    193c:	04000003 	streq	r0, [r0], #-3
    1940:	00012e10 	andeq	r2, r1, r0, lsl lr
    1944:	52031400 	andpl	r1, r3, #0, 8
    1948:	04000000 	streq	r0, [r0], #-0
    194c:	00012e11 	andeq	r2, r1, r1, lsl lr
    1950:	6f031800 	svcvs	0x00031800
    1954:	04000003 	streq	r0, [r0], #-3
    1958:	00012e12 	andeq	r2, r1, r2, lsl lr
    195c:	7f031c00 	svcvc	0x00031c00
    1960:	04000003 	streq	r0, [r0], #-3
    1964:	00012e13 	andeq	r2, r1, r3, lsl lr
    1968:	05002000 	streq	r2, [r0, #-0]
    196c:	0000a404 	andeq	sl, r0, r4, lsl #8
    1970:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
    1974:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1978:	00014009 	andeq	r4, r1, r9
    197c:	01400a00 	cmpeq	r0, r0, lsl #20
    1980:	05000000 	streq	r0, [r0, #-0]
    1984:	0000af04 	andeq	sl, r0, r4, lsl #30
    1988:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
    198c:	06000001 	streq	r0, [r0], -r1
    1990:	00000625 	andeq	r0, r0, r5, lsr #12
    1994:	00af1504 	adceq	r1, pc, r4, lsl #10
    1998:	620b0000 	andvs	r0, fp, #0
    199c:	62000001 	andvs	r0, r0, #1
    19a0:	0c000001 	stceq	0, cr0, [r0], {1}
    19a4:	4c040500 	cfstr32mi	mvfx0, [r4], {-0}
    19a8:	0d000001 	stceq	0, cr0, [r0, #-4]
    19ac:	000004c4 	andeq	r0, r0, r4, asr #9
    19b0:	01571c04 	cmpeq	r7, r4, lsl #24
    19b4:	b50d0000 	strlt	r0, [sp, #-0]
    19b8:	04000003 	streq	r0, [r0], #-3
    19bc:	00012e1d 	andeq	r2, r1, sp, lsl lr
    19c0:	005b0b00 	subseq	r0, fp, r0, lsl #22
    19c4:	018e0000 	orreq	r0, lr, r0
    19c8:	8e0e0000 	cdphi	0, 0, cr0, cr14, cr0, {0}
    19cc:	35000001 	strcc	r0, [r0, #-1]
    19d0:	07040400 	streq	r0, [r4, -r0, lsl #8]
    19d4:	0000039c 	muleq	r0, ip, r3
    19d8:	000d650f 	andeq	r6, sp, pc, lsl #10
    19dc:	7e030500 	cfsh32vc	mvfx0, mvfx3, #0
    19e0:	05000001 	streq	r0, [r0, #-1]
    19e4:	00725803 	rsbseq	r5, r2, r3, lsl #16
    19e8:	0f170f20 	svceq	0x00170f20
    19ec:	03060000 	movweq	r0, #24576	; 0x6000
    19f0:	0000017e 	andeq	r0, r0, lr, ror r1
    19f4:	72900305 	addsvc	r0, r0, #335544320	; 0x14000000
    19f8:	6f0f2000 	svcvs	0x000f2000
    19fc:	0700000e 	streq	r0, [r0, -lr]
    1a00:	00017e03 	andeq	r7, r1, r3, lsl #28
    1a04:	c8030500 	stmdagt	r3, {r8, sl}
    1a08:	0f200072 	svceq	0x00200072
    1a0c:	00000e08 	andeq	r0, r0, r8, lsl #28
    1a10:	017e0308 	cmneq	lr, r8, lsl #6
    1a14:	03050000 	movweq	r0, #20480	; 0x5000
    1a18:	20007300 	andcs	r7, r0, r0, lsl #6
    1a1c:	000e810f 	andeq	r8, lr, pc, lsl #2
    1a20:	7e030900 	vmlavc.f16	s0, s6, s0	; <UNPREDICTABLE>
    1a24:	05000001 	streq	r0, [r0, #-1]
    1a28:	00733803 	rsbseq	r3, r3, r3, lsl #16
    1a2c:	0db30f20 	ldceq	15, cr0, [r3, #128]!	; 0x80
    1a30:	030a0000 	movweq	r0, #40960	; 0xa000
    1a34:	0000017e 	andeq	r0, r0, lr, ror r1
    1a38:	73700305 	cmnvc	r0, #335544320	; 0x14000000
    1a3c:	280f2000 	stmdacs	pc, {sp}	; <UNPREDICTABLE>
    1a40:	0b00000f 	bleq	1a84 <startup-0x1fffe57c>
    1a44:	00017e03 	andeq	r7, r1, r3, lsl #28
    1a48:	a8030500 	stmdage	r3, {r8, sl}
    1a4c:	0f200073 	svceq	0x00200073
    1a50:	00000ddd 	ldrdeq	r0, [r0], -sp
    1a54:	017e030c 	cmneq	lr, ip, lsl #6
    1a58:	03050000 	movweq	r0, #20480	; 0x5000
    1a5c:	200073e0 	andcs	r7, r0, r0, ror #7
    1a60:	000e1a0f 	andeq	r1, lr, pc, lsl #20
    1a64:	7e030d00 	cdpvc	13, 0, cr0, cr3, cr0, {0}
    1a68:	05000001 	streq	r0, [r0, #-1]
    1a6c:	00741803 	rsbseq	r1, r4, r3, lsl #16
    1a70:	0eb61020 	cdpeq	0, 11, cr1, cr6, cr0, {1}
    1a74:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    1a78:	0000009e 	muleq	r0, lr, r0
    1a7c:	37980305 	ldrcc	r0, [r8, r5, lsl #6]
    1a80:	42102000 	andsmi	r2, r0, #0
    1a84:	0100000d 	tsteq	r0, sp
    1a88:	00009e0f 	andeq	r9, r0, pc, lsl #28
    1a8c:	c4030500 	strgt	r0, [r3], #-1280	; 0xfffffb00
    1a90:	10200036 	eorne	r0, r0, r6, lsr r0
    1a94:	00000d97 	muleq	r0, r7, sp
    1a98:	009e1001 	addseq	r1, lr, r1
    1a9c:	03050000 	movweq	r0, #20480	; 0x5000
    1aa0:	200037c4 	andcs	r3, r0, r4, asr #15
    1aa4:	000d3610 	andeq	r3, sp, r0, lsl r6
    1aa8:	9e110100 	muflss	f0, f1, f0
    1aac:	05000000 	streq	r0, [r0, #-0]
    1ab0:	0037d403 	eorseq	sp, r7, r3, lsl #8
    1ab4:	0e371020 	cdpeq	0, 3, cr1, cr7, cr0, {1}
    1ab8:	12010000 	andne	r0, r1, #0
    1abc:	0000009e 	muleq	r0, lr, r0
    1ac0:	37380305 	ldrcc	r0, [r8, -r5, lsl #6]!
    1ac4:	9e102000 	cdpls	0, 1, cr2, cr0, cr0, {0}
    1ac8:	0100000e 	tsteq	r0, lr
    1acc:	00009e13 	andeq	r9, r0, r3, lsl lr
    1ad0:	c8030500 	stmdagt	r3, {r8, sl}
    1ad4:	10200036 	eorne	r0, r0, r6, lsr r0
    1ad8:	00000dd1 	ldrdeq	r0, [r0], -r1
    1adc:	009e1401 	addseq	r1, lr, r1, lsl #8
    1ae0:	03050000 	movweq	r0, #20480	; 0x5000
    1ae4:	20003760 	andcs	r3, r0, r0, ror #14
    1ae8:	000e2c10 	andeq	r2, lr, r0, lsl ip
    1aec:	9e150100 	muflss	f0, f5, f0
    1af0:	05000000 	streq	r0, [r0, #-0]
    1af4:	00379c03 	eorseq	r9, r7, r3, lsl #24
    1af8:	0ec21020 	cdpeq	0, 12, cr1, cr2, cr0, {1}
    1afc:	16010000 	strne	r0, [r1], -r0
    1b00:	0000009e 	muleq	r0, lr, r0
    1b04:	37880305 	strcc	r0, [r8, r5, lsl #6]
    1b08:	f9102000 			; <UNDEFINED> instruction: 0xf9102000
    1b0c:	0100000d 	tsteq	r0, sp
    1b10:	00006218 	andeq	r6, r0, r8, lsl r2
    1b14:	14030500 	strne	r0, [r3], #-1280	; 0xfffffb00
    1b18:	10200037 	eorne	r0, r0, r7, lsr r0
    1b1c:	00000d4d 	andeq	r0, r0, sp, asr #26
    1b20:	00621901 	rsbeq	r1, r2, r1, lsl #18
    1b24:	03050000 	movweq	r0, #20480	; 0x5000
    1b28:	200037ac 	andcs	r3, r0, ip, lsr #15
    1b2c:	000e4210 	andeq	r4, lr, r0, lsl r2
    1b30:	621a0100 	andsvs	r0, sl, #0, 2
    1b34:	05000000 	streq	r0, [r0, #-0]
    1b38:	00373c03 	eorseq	r3, r7, r3, lsl #24
    1b3c:	0da31020 	stceq	0, cr1, [r3, #128]!	; 0x80
    1b40:	1b010000 	blne	41b48 <startup-0x1ffbe4b8>
    1b44:	00000062 	andeq	r0, r0, r2, rrx
    1b48:	37080305 	strcc	r0, [r8, -r5, lsl #6]
    1b4c:	87102000 	ldrhi	r2, [r0, -r0]
    1b50:	0100000d 	tsteq	r0, sp
    1b54:	0000621c 	andeq	r6, r0, ip, lsl r2
    1b58:	b8030500 	stmdalt	r3, {r8, sl}
    1b5c:	10200037 	eorne	r0, r0, r7, lsr r0
    1b60:	00000e50 	andeq	r0, r0, r0, asr lr
    1b64:	00621d01 	rsbeq	r1, r2, r1, lsl #26
    1b68:	03050000 	movweq	r0, #20480	; 0x5000
    1b6c:	20003754 	andcs	r3, r0, r4, asr r7
    1b70:	000e5f10 	andeq	r5, lr, r0, lsl pc
    1b74:	621e0100 	andsvs	r0, lr, #0, 2
    1b78:	05000000 	streq	r0, [r0, #-0]
    1b7c:	00374803 	eorseq	r4, r7, r3, lsl #16
    1b80:	0d771020 	ldcleq	0, cr1, [r7, #-128]!	; 0xffffff80
    1b84:	1f010000 	svcne	0x00010000
    1b88:	00000062 	andeq	r0, r0, r2, rrx
    1b8c:	37200305 	strcc	r0, [r0, -r5, lsl #6]!
    1b90:	da102000 	ble	409b98 <startup-0x1fbf6468>
    1b94:	0100000e 	tsteq	r0, lr
    1b98:	00006220 	andeq	r6, r0, r0, lsr #4
    1b9c:	8c030500 	cfstr32hi	mvfx0, [r3], {-0}
    1ba0:	10200037 	eorne	r0, r0, r7, lsr r0
    1ba4:	00000d5c 	andeq	r0, r0, ip, asr sp
    1ba8:	014c2301 	cmpeq	ip, r1, lsl #6
    1bac:	03050000 	movweq	r0, #20480	; 0x5000
    1bb0:	20003764 	andcs	r3, r0, r4, ror #14
    1bb4:	000eaa10 	andeq	sl, lr, r0, lsl sl
    1bb8:	a4240100 	strtge	r0, [r4], #-256	; 0xffffff00
    1bbc:	05000000 	streq	r0, [r0, #-0]
    1bc0:	0037a003 	eorseq	sl, r7, r3
    1bc4:	0f3a1020 	svceq	0x003a1020
    1bc8:	25010000 	strcs	r0, [r1, #-0]
    1bcc:	000000a4 	andeq	r0, r0, r4, lsr #1
    1bd0:	36fc0305 	ldrbtcc	r0, [ip], r5, lsl #6
    1bd4:	c5102000 	ldrgt	r2, [r0, #-0]
    1bd8:	0100000d 	tsteq	r0, sp
    1bdc:	0000a426 	andeq	sl, r0, r6, lsr #8
    1be0:	c8030500 	stmdagt	r3, {r8, sl}
    1be4:	10200037 	eorne	r0, r0, r7, lsr r0
    1be8:	00000e92 	muleq	r0, r2, lr
    1bec:	00a42701 	adceq	r2, r4, r1, lsl #14
    1bf0:	03050000 	movweq	r0, #20480	; 0x5000
    1bf4:	2000372c 	andcs	r3, r0, ip, lsr #14
    1bf8:	0000a40b 	andeq	sl, r0, fp, lsl #8
    1bfc:	0003c500 	andeq	ip, r3, r0, lsl #10
    1c00:	018e0e00 	orreq	r0, lr, r0, lsl #28
    1c04:	00030000 	andeq	r0, r3, r0
    1c08:	000ece10 	andeq	ip, lr, r0, lsl lr
    1c0c:	b5280100 	strlt	r0, [r8, #-256]!	; 0xffffff00
    1c10:	05000003 	streq	r0, [r0, #-3]
    1c14:	0036cc03 	eorseq	ip, r6, r3, lsl #24
    1c18:	0dee1120 	stfeqe	f1, [lr, #128]!	; 0x80
    1c1c:	4c010000 	stcmi	0, cr0, [r1], {-0}
    1c20:	20001804 	andcs	r1, r0, r4, lsl #16
    1c24:	000000f8 	strdeq	r0, [r0], -r8
    1c28:	040b9c01 	streq	r9, [fp], #-3073	; 0xfffff3ff
    1c2c:	5c120000 	ldcpl	0, cr0, [r2], {-0}
    1c30:	0100000d 	tsteq	r0, sp
    1c34:	0001624c 	andeq	r6, r1, ip, asr #4
    1c38:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1c3c:	00084f0f 	andeq	r4, r8, pc, lsl #30
    1c40:	2e4d0100 	dvfcse	f0, f5, f0
    1c44:	05000001 	streq	r0, [r0, #-1]
    1c48:	00745003 	rsbseq	r5, r4, r3
    1c4c:	17130020 	ldrne	r0, [r3, -r0, lsr #32]
    1c50:	01000004 	tsteq	r0, r4
    1c54:	0016c429 	andseq	ip, r6, r9, lsr #8
    1c58:	00014020 	andeq	r4, r1, r0, lsr #32
    1c5c:	0f9c0100 	svceq	0x009c0100
    1c60:	00000cc8 	andeq	r0, r0, r8, asr #25
    1c64:	009e2b01 	addseq	r2, lr, r1, lsl #22
    1c68:	91020000 	mrsls	r0, (UNDEF: 2)
    1c6c:	0cd20f74 	ldcleq	15, cr0, [r2], {116}	; 0x74
    1c70:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    1c74:	0000009e 	muleq	r0, lr, r0
    1c78:	0f709102 	svceq	0x00709102
    1c7c:	00000ac8 	andeq	r0, r0, r8, asr #21
    1c80:	009e3101 	addseq	r3, lr, r1, lsl #2
    1c84:	91020000 	mrsls	r0, (UNDEF: 2)
    1c88:	09e90f6c 	stmibeq	r9!, {r2, r3, r5, r6, r8, r9, sl, fp}^
    1c8c:	35010000 	strcc	r0, [r1, #-0]
    1c90:	0000009e 	muleq	r0, lr, r0
    1c94:	0f689102 	svceq	0x00689102
    1c98:	00000cf2 	strdeq	r0, [r0], -r2
    1c9c:	009e3801 	addseq	r3, lr, r1, lsl #16
    1ca0:	91020000 	mrsls	r0, (UNDEF: 2)
    1ca4:	0a860f64 	beq	fe185a3c <firstTime.4040+0xde17cde4>
    1ca8:	3b010000 	blcc	41cb0 <startup-0x1ffbe350>
    1cac:	0000009e 	muleq	r0, lr, r0
    1cb0:	0f609102 	svceq	0x00609102
    1cb4:	00000c9e 	muleq	r0, lr, ip
    1cb8:	009e4001 	addseq	r4, lr, r1
    1cbc:	91020000 	mrsls	r0, (UNDEF: 2)
    1cc0:	0cfc0f5c 	ldcleq	15, cr0, [ip], #368	; 0x170
    1cc4:	43010000 	movwmi	r0, #4096	; 0x1000
    1cc8:	0000009e 	muleq	r0, lr, r0
    1ccc:	0f589102 	svceq	0x00589102
    1cd0:	00000d06 	andeq	r0, r0, r6, lsl #26
    1cd4:	009e4601 	addseq	r4, lr, r1, lsl #12
    1cd8:	91020000 	mrsls	r0, (UNDEF: 2)
    1cdc:	9f000054 	svcls	0x00000054
    1ce0:	04000008 	streq	r0, [r0], #-8
    1ce4:	0005f100 	andeq	pc, r5, r0, lsl #2
    1ce8:	81010400 	tsthi	r1, r0, lsl #8
    1cec:	0c000000 	stceq	0, cr0, [r0], {-0}
    1cf0:	0000102b 	andeq	r1, r0, fp, lsr #32
    1cf4:	200018fc 	strdcs	r1, [r0], -ip
    1cf8:	00000e44 	andeq	r0, r0, r4, asr #28
    1cfc:	000008e8 	andeq	r0, r0, r8, ror #17
    1d00:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
    1d04:	0000004e 	andeq	r0, r0, lr, asr #32
    1d08:	00030603 	andeq	r0, r3, r3, lsl #12
    1d0c:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
    1d10:	00000000 	andeq	r0, r0, r0
    1d14:	00065f03 	andeq	r5, r6, r3, lsl #30
    1d18:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
    1d1c:	04000000 	streq	r0, [r0], #-0
    1d20:	00106903 	andseq	r6, r0, r3, lsl #18
    1d24:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
    1d28:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1d2c:	07040400 	streq	r0, [r4, -r0, lsl #8]
    1d30:	0000032a 	andeq	r0, r0, sl, lsr #6
    1d34:	005b0405 	subseq	r0, fp, r5, lsl #8
    1d38:	01040000 	mrseq	r0, (UNDEF: 4)
    1d3c:	00044108 	andeq	r4, r4, r8, lsl #2
    1d40:	11bb0600 			; <UNDEFINED> instruction: 0x11bb0600
    1d44:	0a020000 	beq	81d4c <startup-0x1ff7e2b4>
    1d48:	00000021 	andeq	r0, r0, r1, lsr #32
    1d4c:	00001607 	andeq	r1, r0, r7, lsl #12
    1d50:	06030c00 	streq	r0, [r3], -r0, lsl #24
    1d54:	0000009e 	muleq	r0, lr, r0
    1d58:	00052c03 	andeq	r2, r5, r3, lsl #24
    1d5c:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
    1d60:	00000000 	andeq	r0, r0, r0
    1d64:	00001d03 	andeq	r1, r0, r3, lsl #26
    1d68:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
    1d6c:	04000000 	streq	r0, [r0], #-0
    1d70:	00001203 	andeq	r1, r0, r3, lsl #4
    1d74:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
    1d78:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1d7c:	62040500 	andvs	r0, r4, #0, 10
    1d80:	06000000 	streq	r0, [r0], -r0
    1d84:	00000c8e 	andeq	r0, r0, lr, lsl #25
    1d88:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
    1d8c:	24070000 	strcs	r0, [r7], #-0
    1d90:	24000006 	strcs	r0, [r0], #-6
    1d94:	01280604 			; <UNDEFINED> instruction: 0x01280604
    1d98:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    1d9c:	04000003 	streq	r0, [r0], #-3
    1da0:	00012807 	andeq	r2, r1, r7, lsl #16
    1da4:	30030000 	andcc	r0, r3, r0
    1da8:	04000006 	streq	r0, [r0], #-6
    1dac:	00012e08 	andeq	r2, r1, r8, lsl #28
    1db0:	97030400 	strls	r0, [r3, -r0, lsl #8]
    1db4:	04000005 	streq	r0, [r0], #-5
    1db8:	00012e09 	andeq	r2, r1, r9, lsl #28
    1dbc:	c3030800 	movwgt	r0, #14336	; 0x3800
    1dc0:	04000005 	streq	r0, [r0], #-5
    1dc4:	0001460c 	andeq	r4, r1, ip, lsl #12
    1dc8:	ff030c00 			; <UNDEFINED> instruction: 0xff030c00
    1dcc:	04000002 	streq	r0, [r0], #-2
    1dd0:	0001460d 	andeq	r4, r1, sp, lsl #12
    1dd4:	f0031000 			; <UNDEFINED> instruction: 0xf0031000
    1dd8:	04000003 	streq	r0, [r0], #-3
    1ddc:	00012e10 	andeq	r2, r1, r0, lsl lr
    1de0:	52031400 	andpl	r1, r3, #0, 8
    1de4:	04000000 	streq	r0, [r0], #-0
    1de8:	00012e11 	andeq	r2, r1, r1, lsl lr
    1dec:	6f031800 	svcvs	0x00031800
    1df0:	04000003 	streq	r0, [r0], #-3
    1df4:	00012e12 	andeq	r2, r1, r2, lsl lr
    1df8:	7f031c00 	svcvc	0x00031c00
    1dfc:	04000003 	streq	r0, [r0], #-3
    1e00:	00012e13 	andeq	r2, r1, r3, lsl lr
    1e04:	05002000 	streq	r2, [r0, #-0]
    1e08:	0000a404 	andeq	sl, r0, r4, lsl #8
    1e0c:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
    1e10:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1e14:	00014009 	andeq	r4, r1, r9
    1e18:	01400a00 	cmpeq	r0, r0, lsl #20
    1e1c:	05000000 	streq	r0, [r0, #-0]
    1e20:	0000af04 	andeq	sl, r0, r4, lsl #30
    1e24:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
    1e28:	06000001 	streq	r0, [r0], -r1
    1e2c:	00000625 	andeq	r0, r0, r5, lsr #12
    1e30:	00af1504 	adceq	r1, pc, r4, lsl #10
    1e34:	620b0000 	andvs	r0, fp, #0
    1e38:	62000001 	andvs	r0, r0, #1
    1e3c:	0c000001 	stceq	0, cr0, [r0], {1}
    1e40:	4c040500 	cfstr32mi	mvfx0, [r4], {-0}
    1e44:	0d000001 	stceq	0, cr0, [r0, #-4]
    1e48:	000004c4 	andeq	r0, r0, r4, asr #9
    1e4c:	01571c04 	cmpeq	r7, r4, lsl #24
    1e50:	b50d0000 	strlt	r0, [sp, #-0]
    1e54:	04000003 	streq	r0, [r0], #-3
    1e58:	00012e1d 	andeq	r2, r1, sp, lsl lr
    1e5c:	05ee0600 	strbeq	r0, [lr, #1536]!	; 0x600
    1e60:	24050000 	strcs	r0, [r5], #-0
    1e64:	0000005b 	andeq	r0, r0, fp, asr r0
    1e68:	00017e0b 	andeq	r7, r1, fp, lsl #28
    1e6c:	00019a00 	andeq	r9, r1, r0, lsl #20
    1e70:	019a0e00 	orrseq	r0, sl, r0, lsl #28
    1e74:	03ff0000 	mvnseq	r0, #0
    1e78:	07040400 	streq	r0, [r4, -r0, lsl #8]
    1e7c:	0000039c 	muleq	r0, ip, r3
    1e80:	000f9f0d 	andeq	r9, pc, sp, lsl #30
    1e84:	892b0500 	stmdbhi	fp!, {r8, sl}
    1e88:	0d000001 	stceq	0, cr0, [r0, #-4]
    1e8c:	00000222 	andeq	r0, r0, r2, lsr #4
    1e90:	01892c05 	orreq	r2, r9, r5, lsl #24
    1e94:	4f0d0000 	svcmi	0x000d0000
    1e98:	05000004 	streq	r0, [r0, #-4]
    1e9c:	0001892d 	andeq	r8, r1, sp, lsr #18
    1ea0:	030c0d00 	movweq	r0, #52480	; 0xcd00
    1ea4:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    1ea8:	00000189 	andeq	r0, r0, r9, lsl #3
    1eac:	00029c0d 	andeq	r9, r2, sp, lsl #24
    1eb0:	892f0500 	stmdbhi	pc!, {r8, sl}	; <UNPREDICTABLE>
    1eb4:	0d000001 	stceq	0, cr0, [r0, #-4]
    1eb8:	00000606 	andeq	r0, r0, r6, lsl #12
    1ebc:	01893005 	orreq	r3, r9, r5
    1ec0:	f60d0000 			; <UNDEFINED> instruction: 0xf60d0000
    1ec4:	05000005 	streq	r0, [r0, #-5]
    1ec8:	00018931 	andeq	r8, r1, r1, lsr r9
    1ecc:	01ac0f00 			; <UNDEFINED> instruction: 0x01ac0f00
    1ed0:	2b010000 	blcs	41ed8 <startup-0x1ffbe128>
    1ed4:	47d80305 	ldrbmi	r0, [r8, r5, lsl #6]
    1ed8:	b70f2000 	strlt	r2, [pc, -r0]
    1edc:	01000001 	tsteq	r0, r1
    1ee0:	d803052c 	stmdale	r3, {r2, r3, r5, r8, sl}
    1ee4:	0f20003b 	svceq	0x0020003b
    1ee8:	000001c2 	andeq	r0, r0, r2, asr #3
    1eec:	03052d01 	movweq	r2, #23809	; 0x5d01
    1ef0:	200043d8 	ldrdcs	r4, [r0], -r8
    1ef4:	0001cd0f 	andeq	ip, r1, pc, lsl #26
    1ef8:	052e0100 	streq	r0, [lr, #-256]!	; 0xffffff00
    1efc:	004bd803 	subeq	sp, fp, r3, lsl #16
    1f00:	01a10f20 			; <UNDEFINED> instruction: 0x01a10f20
    1f04:	2f010000 	svccs	0x00010000
    1f08:	3fd80305 	svccc	0x00d80305
    1f0c:	d8102000 	ldmdale	r0, {sp}
    1f10:	01000001 	tsteq	r0, r1
    1f14:	37d80305 	ldrbcc	r0, [r8, r5, lsl #6]
    1f18:	e3102000 	tst	r0, #0
    1f1c:	01000001 	tsteq	r0, r1
    1f20:	4fd80305 	svcmi	0x00d80305
    1f24:	d5112000 	ldrle	r2, [r1, #-0]
    1f28:	0100000f 	tsteq	r0, pc
    1f2c:	26d601a8 	ldrbcs	r0, [r6], r8, lsr #3
    1f30:	006a2000 	rsbeq	r2, sl, r0
    1f34:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f38:	0000026d 	andeq	r0, r0, sp, ror #4
    1f3c:	0010bc12 	andseq	fp, r0, r2, lsl ip
    1f40:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
    1f44:	0000012e 	andeq	r0, r0, lr, lsr #2
    1f48:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1f4c:	000f6611 	andeq	r6, pc, r1, lsl r6	; <UNPREDICTABLE>
    1f50:	01a00100 	lsleq	r0, r0, #2
    1f54:	20002654 	andcs	r2, r0, r4, asr r6
    1f58:	00000082 	andeq	r0, r0, r2, lsl #1
    1f5c:	02a29c01 	adceq	r9, r2, #256	; 0x100
    1f60:	b0120000 	andslt	r0, r2, r0
    1f64:	0100000f 	tsteq	r0, pc
    1f68:	016201a0 	smultbeq	r2, r0, r1
    1f6c:	91020000 	mrsls	r0, (UNDEF: 2)
    1f70:	03f8136c 	mvnseq	r1, #108, 6	; 0xb0000001
    1f74:	a1010000 	mrsge	r0, (UNDEF: 1)
    1f78:	00012e01 	andeq	r2, r1, r1, lsl #28
    1f7c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1f80:	10741400 	rsbsne	r1, r4, r0, lsl #8
    1f84:	96010000 	strls	r0, [r1], -r0
    1f88:	00254c01 	eoreq	r4, r5, r1, lsl #24
    1f8c:	00010820 	andeq	r0, r1, r0, lsr #16
    1f90:	c69c0100 	ldrgt	r0, [ip], r0, lsl #2
    1f94:	15000002 	strne	r0, [r0, #-2]
    1f98:	97010069 	strls	r0, [r1, -r9, rrx]
    1f9c:	00012e01 	andeq	r2, r1, r1, lsl #28
    1fa0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1fa4:	10061100 	andne	r1, r6, r0, lsl #2
    1fa8:	70010000 	andvc	r0, r1, r0
    1fac:	00241c01 	eoreq	r1, r4, r1, lsl #24
    1fb0:	00013020 	andeq	r3, r1, r0, lsr #32
    1fb4:	3a9c0100 	bcc	fe7023bc <firstTime.4040+0xde6f9764>
    1fb8:	15000003 	strne	r0, [r0, #-3]
    1fbc:	71010078 	tstvc	r1, r8, ror r0
    1fc0:	00012e01 	andeq	r2, r1, r1, lsl #28
    1fc4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1fc8:	01007915 	tsteq	r0, r5, lsl r9
    1fcc:	012e0172 			; <UNDEFINED> instruction: 0x012e0172
    1fd0:	91020000 	mrsls	r0, (UNDEF: 2)
    1fd4:	03061368 	movweq	r1, #25448	; 0x6368
    1fd8:	73010000 	movwvc	r0, #4096	; 0x1000
    1fdc:	00012e01 	andeq	r2, r1, r1, lsl #28
    1fe0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1fe4:	00065f13 	andeq	r5, r6, r3, lsl pc
    1fe8:	01740100 	cmneq	r4, r0, lsl #2
    1fec:	0000012e 	andeq	r0, r0, lr, lsr #2
    1ff0:	15609102 	strbne	r9, [r0, #-258]!	; 0xfffffefe
    1ff4:	01003278 	tsteq	r0, r8, ror r2
    1ff8:	012e0176 			; <UNDEFINED> instruction: 0x012e0176
    1ffc:	91020000 	mrsls	r0, (UNDEF: 2)
    2000:	0069165c 	rsbeq	r1, r9, ip, asr r6
    2004:	2e017a01 	vmlacs.f32	s14, s2, s2
    2008:	15000001 	strne	r0, [r0, #-1]
    200c:	7b01006b 	blvc	421c0 <startup-0x1ffbde40>
    2010:	00012e01 	andeq	r2, r1, r1, lsl #28
    2014:	58910200 	ldmpl	r1, {r9}
    2018:	11061100 	mrsne	r1, (UNDEF: 22)
    201c:	65010000 	strvs	r0, [r1, #-0]
    2020:	0023ca01 	eoreq	ip, r3, r1, lsl #20
    2024:	00005220 	andeq	r5, r0, r0, lsr #4
    2028:	a39c0100 	orrsge	r0, ip, #0, 2
    202c:	17000003 	strne	r0, [r0, -r3]
    2030:	65010078 	strvs	r0, [r1, #-120]	; 0xffffff88
    2034:	00012e01 	andeq	r2, r1, r1, lsl #28
    2038:	6c910200 	lfmvs	f0, 4, [r1], {0}
    203c:	01007917 	tsteq	r0, r7, lsl r9
    2040:	012e0165 			; <UNDEFINED> instruction: 0x012e0165
    2044:	91020000 	mrsls	r0, (UNDEF: 2)
    2048:	03061268 	movweq	r1, #25192	; 0x6268
    204c:	65010000 	strvs	r0, [r1, #-0]
    2050:	00012e01 	andeq	r2, r1, r1, lsl #28
    2054:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2058:	00065f12 	andeq	r5, r6, r2, lsl pc
    205c:	01650100 	cmneq	r5, r0, lsl #2
    2060:	0000012e 	andeq	r0, r0, lr, lsr #2
    2064:	15609102 	strbne	r9, [r0, #-258]!	; 0xfffffefe
    2068:	66010069 	strvs	r0, [r1], -r9, rrx
    206c:	00012e01 	andeq	r2, r1, r1, lsl #28
    2070:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2074:	01006a15 	tsteq	r0, r5, lsl sl
    2078:	012e0167 			; <UNDEFINED> instruction: 0x012e0167
    207c:	91020000 	mrsls	r0, (UNDEF: 2)
    2080:	a9110070 	ldmdbge	r1, {r4, r5, r6}
    2084:	01000010 	tsteq	r0, r0, lsl r0
    2088:	2378015b 	cmncs	r8, #-1073741802	; 0xc0000016
    208c:	00522000 	subseq	r2, r2, r0
    2090:	9c010000 	stcls	0, cr0, [r1], {-0}
    2094:	0000040c 	andeq	r0, r0, ip, lsl #8
    2098:	01007817 	tsteq	r0, r7, lsl r8
    209c:	012e015b 			; <UNDEFINED> instruction: 0x012e015b
    20a0:	91020000 	mrsls	r0, (UNDEF: 2)
    20a4:	0079176c 	rsbseq	r1, r9, ip, ror #14
    20a8:	2e015b01 	vmlacs.f64	d5, d1, d1
    20ac:	02000001 	andeq	r0, r0, #1
    20b0:	06126891 			; <UNDEFINED> instruction: 0x06126891
    20b4:	01000003 	tsteq	r0, r3
    20b8:	012e015b 			; <UNDEFINED> instruction: 0x012e015b
    20bc:	91020000 	mrsls	r0, (UNDEF: 2)
    20c0:	065f1264 	ldrbeq	r1, [pc], -r4, ror #4
    20c4:	5b010000 	blpl	420cc <startup-0x1ffbdf34>
    20c8:	00012e01 	andeq	r2, r1, r1, lsl #28
    20cc:	60910200 	addsvs	r0, r1, r0, lsl #4
    20d0:	01006915 	tsteq	r0, r5, lsl r9
    20d4:	012e015c 			; <UNDEFINED> instruction: 0x012e015c
    20d8:	91020000 	mrsls	r0, (UNDEF: 2)
    20dc:	006a1574 	rsbeq	r1, sl, r4, ror r5
    20e0:	2e015d01 	cdpcs	13, 0, cr5, cr1, cr1, {0}
    20e4:	02000001 	andeq	r0, r0, #1
    20e8:	11007091 	swpne	r7, r1, [r0]
    20ec:	00000fe0 	andeq	r0, r0, r0, ror #31
    20f0:	5e014501 	cfsh32pl	mvfx4, mvfx1, #1
    20f4:	1a200022 	bne	802184 <startup-0x1f7fde7c>
    20f8:	01000001 	tsteq	r0, r1
    20fc:	0004b79c 	muleq	r4, ip, r7
    2100:	00731700 	rsbseq	r1, r3, r0, lsl #14
    2104:	9e014501 	cfsh32ls	mvfx4, mvfx1, #1
    2108:	02000000 	andeq	r0, r0, #0
    210c:	78175491 	ldmdavc	r7, {r0, r4, r7, sl, ip, lr}
    2110:	01450100 	mrseq	r0, (UNDEF: 85)
    2114:	0000012e 	andeq	r0, r0, lr, lsr #2
    2118:	17509102 	ldrbne	r9, [r0, -r2, lsl #2]
    211c:	45010079 	strmi	r0, [r1, #-121]	; 0xffffff87
    2120:	00012e01 	andeq	r2, r1, r1, lsl #28
    2124:	4c910200 	lfmmi	f0, 4, [r1], {0}
    2128:	74657317 	strbtvc	r7, [r5], #-791	; 0xfffffce9
    212c:	01450100 	mrseq	r0, (UNDEF: 85)
    2130:	0000012e 	andeq	r0, r0, lr, lsr #2
    2134:	12489102 	subne	r9, r8, #-2147483648	; 0x80000000
    2138:	0000106e 	andeq	r1, r0, lr, rrx
    213c:	2e014501 	cfsh32cs	mvfx4, mvfx1, #1
    2140:	02000001 	andeq	r0, r0, #1
    2144:	69150091 	ldmdbvs	r5, {r0, r4, r7}
    2148:	01460100 	mrseq	r0, (UNDEF: 86)
    214c:	0000012e 	andeq	r0, r0, lr, lsr #2
    2150:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    2154:	4601006a 	strmi	r0, [r1], -sl, rrx
    2158:	00012e01 	andeq	r2, r1, r1, lsl #28
    215c:	68910200 	ldmvs	r1, {r9}
    2160:	01006b15 	tsteq	r0, r5, lsl fp
    2164:	012e0146 			; <UNDEFINED> instruction: 0x012e0146
    2168:	91020000 	mrsls	r0, (UNDEF: 2)
    216c:	10e11364 	rscne	r1, r1, r4, ror #6
    2170:	46010000 	strmi	r0, [r1], -r0
    2174:	00012e01 	andeq	r2, r1, r1, lsl #28
    2178:	60910200 	addsvs	r0, r1, r0, lsl #4
    217c:	00229618 	eoreq	r9, r2, r8, lsl r6
    2180:	0000bc20 	andeq	fp, r0, r0, lsr #24
    2184:	10dc1300 	sbcsne	r1, ip, r0, lsl #6
    2188:	4d010000 	stcmi	0, cr0, [r1, #-0]
    218c:	00005b01 	andeq	r5, r0, r1, lsl #22
    2190:	5f910200 	svcpl	0x00910200
    2194:	b5110000 	ldrlt	r0, [r1, #-0]
    2198:	0100000f 	tsteq	r0, pc
    219c:	21880130 	orrcs	r0, r8, r0, lsr r1
    21a0:	00d62000 	sbcseq	r2, r6, r0
    21a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    21a8:	00000520 	andeq	r0, r0, r0, lsr #10
    21ac:	000f5812 	andeq	r5, pc, r2, lsl r8	; <UNPREDICTABLE>
    21b0:	01300100 	teqeq	r0, r0, lsl #2
    21b4:	00000520 	andeq	r0, r0, r0, lsr #10
    21b8:	15649102 	strbne	r9, [r4, #-258]!	; 0xfffffefe
    21bc:	31010069 	tstcc	r1, r9, rrx
    21c0:	00017e01 	andeq	r7, r1, r1, lsl #28
    21c4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    21c8:	01006a15 	tsteq	r0, r5, lsl sl
    21cc:	017e0131 	cmneq	lr, r1, lsr r1
    21d0:	91020000 	mrsls	r0, (UNDEF: 2)
    21d4:	13121376 	tstne	r2, #-671088639	; 0xd8000001
    21d8:	31010000 	mrscc	r0, (UNDEF: 1)
    21dc:	00017e01 	andeq	r7, r1, r1, lsl #28
    21e0:	6f910200 	svcvs	0x00910200
    21e4:	01006315 	tsteq	r0, r5, lsl r3
    21e8:	017e0131 	cmneq	lr, r1, lsr r1
    21ec:	91020000 	mrsls	r0, (UNDEF: 2)
    21f0:	006b1575 	rsbeq	r1, fp, r5, ror r5
    21f4:	4e013201 	cdpmi	2, 0, cr3, cr1, cr1, {0}
    21f8:	02000000 	andeq	r0, r0, #0
    21fc:	05007091 	streq	r7, [r0, #-145]	; 0xffffff6f
    2200:	00017e04 	andeq	r7, r1, r4, lsl #28
    2204:	0f5f1100 	svceq	0x005f1100
    2208:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    220c:	001fe801 	andseq	lr, pc, r1, lsl #16
    2210:	0001a020 	andeq	sl, r1, r0, lsr #32
    2214:	a09c0100 	addsge	r0, ip, r0, lsl #2
    2218:	17000005 	strne	r0, [r0, -r5]
    221c:	08010078 	stmdaeq	r1, {r3, r4, r5, r6}
    2220:	00012e01 	andeq	r2, r1, r1, lsl #28
    2224:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2228:	01007917 	tsteq	r0, r7, lsl r9
    222c:	012e0108 			; <UNDEFINED> instruction: 0x012e0108
    2230:	91020000 	mrsls	r0, (UNDEF: 2)
    2234:	65731760 	ldrbvs	r1, [r3, #-1888]!	; 0xfffff8a0
    2238:	08010074 	stmdaeq	r1, {r2, r4, r5, r6}
    223c:	00012e01 	andeq	r2, r1, r1, lsl #28
    2240:	5c910200 	lfmpl	f0, 4, [r1], {0}
    2244:	0010b713 	andseq	fp, r0, r3, lsl r7
    2248:	01090100 	mrseq	r0, (UNDEF: 25)
    224c:	0000017e 	andeq	r0, r0, lr, ror r1
    2250:	15779102 	ldrbne	r9, [r7, #-258]!	; 0xfffffefe
    2254:	09010063 	stmdbeq	r1, {r0, r1, r5, r6}
    2258:	00017e01 	andeq	r7, r1, r1, lsl #28
    225c:	6f910200 	svcvs	0x00910200
    2260:	00131213 	andseq	r1, r3, r3, lsl r2
    2264:	01090100 	mrseq	r0, (UNDEF: 25)
    2268:	0000017e 	andeq	r0, r0, lr, ror r1
    226c:	13769102 	cmnne	r6, #-2147483648	; 0x80000000
    2270:	00001115 	andeq	r1, r0, r5, lsl r1
    2274:	2e010a01 	vmlacs.f32	s0, s2, s2
    2278:	02000001 	andeq	r0, r0, #1
    227c:	19007091 	stmdbne	r0, {r0, r4, r7, ip, sp, lr}
    2280:	00000faa 	andeq	r0, r0, sl, lsr #31
    2284:	1e68de01 	cdpne	14, 6, cr13, cr8, cr1, {0}
    2288:	01802000 	orreq	r2, r0, r0
    228c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2290:	00000606 	andeq	r0, r0, r6, lsl #12
    2294:	0100781a 	tsteq	r0, sl, lsl r8
    2298:	00012ede 	ldrdeq	r2, [r1], -lr
    229c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    22a0:	0100791a 	tsteq	r0, sl, lsl r9
    22a4:	00012ede 	ldrdeq	r2, [r1], -lr
    22a8:	68910200 	ldmvs	r1, {r9}
    22ac:	7465731a 	strbtvc	r7, [r5], #-794	; 0xfffffce6
    22b0:	2ede0100 	cdpcs	1, 13, cr0, cr14, cr0, {0}
    22b4:	02000001 	andeq	r0, r0, #1
    22b8:	6e1b6491 	cfcmpsvs	r6, mvf11, mvf1
    22bc:	01000010 	tsteq	r0, r0, lsl r0
    22c0:	00012ede 	ldrdeq	r2, [r1], -lr
    22c4:	60910200 	addsvs	r0, r1, r0, lsl #4
    22c8:	0010b71c 	andseq	fp, r0, ip, lsl r7
    22cc:	7edf0100 	cdpvc	1, 13, cr0, cr15, cr0, {0}
    22d0:	02000001 	andeq	r0, r0, #1
    22d4:	151c7791 	ldrne	r7, [ip, #-1937]	; 0xfffff86f
    22d8:	01000011 	tsteq	r0, r1, lsl r0
    22dc:	00012ee0 	andeq	r2, r1, r0, ror #29
    22e0:	70910200 	addsvc	r0, r1, r0, lsl #4
    22e4:	11681d00 	cmnne	r8, r0, lsl #26
    22e8:	d1010000 	mrsle	r0, (UNDEF: 1)
    22ec:	20001e02 	andcs	r1, r0, r2, lsl #28
    22f0:	00000066 	andeq	r0, r0, r6, rrx
    22f4:	06429c01 	strbeq	r9, [r2], -r1, lsl #24
    22f8:	461c0000 	ldrmi	r0, [ip], -r0
    22fc:	0100000f 	tsteq	r0, pc
    2300:	00017ed2 	ldrdeq	r7, [r1], -r2
    2304:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2308:	001e1018 	andseq	r1, lr, r8, lsl r0
    230c:	00003e20 	andeq	r3, r0, r0, lsr #28
    2310:	64611e00 	strbtvs	r1, [r1], #-3584	; 0xfffff200
    2314:	d6010064 	strle	r0, [r1], -r4, rrx
    2318:	0000017e 	andeq	r0, r0, lr, ror r1
    231c:	00769102 	rsbseq	r9, r6, r2, lsl #2
    2320:	11551f00 	cmpne	r5, r0, lsl #30
    2324:	bd010000 	stclt	0, cr0, [r1, #-0]
    2328:	20001d94 	mulcs	r0, r4, sp
    232c:	0000006e 	andeq	r0, r0, lr, rrx
    2330:	c91d9c01 	ldmdbgt	sp, {r0, sl, fp, ip, pc}
    2334:	01000010 	tsteq	r0, r0, lsl r0
    2338:	001d4eb5 			; <UNDEFINED> instruction: 0x001d4eb5
    233c:	00004620 	andeq	r4, r0, r0, lsr #12
    2340:	859c0100 	ldrhi	r0, [ip, #256]	; 0x100
    2344:	1b000006 	blne	2364 <startup-0x1fffdc9c>
    2348:	00000f91 	muleq	r0, r1, pc	; <UNPREDICTABLE>
    234c:	017eb501 	cmneq	lr, r1, lsl #10
    2350:	91020000 	mrsls	r0, (UNDEF: 2)
    2354:	13121b77 	tstne	r2, #121856	; 0x1dc00
    2358:	b5010000 	strlt	r0, [r1, #-0]
    235c:	0000017e 	andeq	r0, r0, lr, ror r1
    2360:	00769102 	rsbseq	r9, r6, r2, lsl #2
    2364:	000f831d 	andeq	r8, pc, sp, lsl r3	; <UNPREDICTABLE>
    2368:	08ae0100 	stmiaeq	lr!, {r8}
    236c:	4620001d 			; <UNDEFINED> instruction: 0x4620001d
    2370:	01000000 	mrseq	r0, (UNDEF: 0)
    2374:	0006b79c 	muleq	r6, ip, r7
    2378:	0f911b00 	svceq	0x00911b00
    237c:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    2380:	0000017e 	andeq	r0, r0, lr, ror r1
    2384:	1b779102 	blne	1de6794 <startup-0x1e21986c>
    2388:	00001312 	andeq	r1, r0, r2, lsl r3
    238c:	017eae01 	cmneq	lr, r1, lsl #28
    2390:	91020000 	mrsls	r0, (UNDEF: 2)
    2394:	f81d0076 			; <UNDEFINED> instruction: 0xf81d0076
    2398:	0100000f 	tsteq	r0, pc
    239c:	001c8a99 	mulseq	ip, r9, sl
    23a0:	00007e20 	andeq	r7, r0, r0, lsr #28
    23a4:	e99c0100 	ldmib	ip, {r8}
    23a8:	1b000006 	blne	23c8 <startup-0x1fffdc38>
    23ac:	000005a7 	andeq	r0, r0, r7, lsr #11
    23b0:	017e9901 	cmneq	lr, r1, lsl #18
    23b4:	91020000 	mrsls	r0, (UNDEF: 2)
    23b8:	13121b77 	tstne	r2, #121856	; 0x1dc00
    23bc:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    23c0:	0000017e 	andeq	r0, r0, lr, ror r1
    23c4:	00769102 	rsbseq	r9, r6, r2, lsl #2
    23c8:	00105c20 	andseq	r5, r0, r0, lsr #24
    23cc:	2e940100 	fmlcss	f0, f4, f0
    23d0:	60000001 	andvs	r0, r0, r1
    23d4:	2a20001c 	bcs	80244c <startup-0x1f7fdbb4>
    23d8:	01000000 	mrseq	r0, (UNDEF: 0)
    23dc:	0007119c 	muleq	r7, ip, r1
    23e0:	13121b00 	tstne	r2, #0, 22
    23e4:	94010000 	strls	r0, [r1], #-0
    23e8:	0000017e 	andeq	r0, r0, lr, ror r1
    23ec:	00779102 	rsbseq	r9, r7, r2, lsl #2
    23f0:	000f4b21 	andeq	r4, pc, r1, lsr #22
    23f4:	7e7b0100 	rpwvce	f0, f3, f0
    23f8:	cc000001 	stcgt	0, cr0, [r0], {1}
    23fc:	9420001b 	strtls	r0, [r0], #-27	; 0xffffffe5
    2400:	01000000 	mrseq	r0, (UNDEF: 0)
    2404:	0007469c 	muleq	r7, ip, r6
    2408:	13121b00 	tstne	r2, #0, 22
    240c:	7b010000 	blvc	42414 <startup-0x1ffbdbec>
    2410:	0000017e 	andeq	r0, r0, lr, ror r1
    2414:	1e6f9102 	lgnnee	f1, f2
    2418:	01007672 	tsteq	r0, r2, ror r6
    241c:	00005b84 	andeq	r5, r0, r4, lsl #23
    2420:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2424:	112d1d00 			; <UNDEFINED> instruction: 0x112d1d00
    2428:	65010000 	strvs	r0, [r1, #-0]
    242c:	20001b5e 	andcs	r1, r0, lr, asr fp
    2430:	0000006e 	andeq	r0, r0, lr, rrx
    2434:	07689c01 	strbeq	r9, [r8, -r1, lsl #24]!
    2438:	631e0000 	tstvs	lr, #0
    243c:	7e660100 	powvcs	f0, f6, f0
    2440:	02000001 	andeq	r0, r0, #1
    2444:	1d007791 	stcne	7, cr7, [r0, #-580]	; 0xfffffdbc
    2448:	0000111b 	andeq	r1, r0, fp, lsl r1
    244c:	1af85001 	bne	ffe16458 <firstTime.4040+0xdfe0d800>
    2450:	00662000 	rsbeq	r2, r6, r0
    2454:	9c010000 	stcls	0, cr0, [r1], {-0}
    2458:	0000078c 	andeq	r0, r0, ip, lsl #15
    245c:	0013121b 	andseq	r1, r3, fp, lsl r2
    2460:	7e500100 	rdfvcs	f0, f0, f0
    2464:	02000001 	andeq	r0, r0, #1
    2468:	22007791 	andcs	r7, r0, #38010880	; 0x2440000
    246c:	00001014 	andeq	r1, r0, r4, lsl r0
    2470:	1aa04901 	bne	fe81487c <firstTime.4040+0xde80bc24>
    2474:	00582000 	subseq	r2, r8, r0
    2478:	9c010000 	stcls	0, cr0, [r1], {-0}
    247c:	000007ba 			; <UNDEFINED> instruction: 0x000007ba
    2480:	0100781a 	tsteq	r0, sl, lsl r8
    2484:	00017e49 	andeq	r7, r1, r9, asr #28
    2488:	6f910200 	svcvs	0x00910200
    248c:	0100631e 	tsteq	r0, lr, lsl r3
    2490:	00017e4a 	andeq	r7, r1, sl, asr #28
    2494:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2498:	10882200 	addne	r2, r8, r0, lsl #4
    249c:	41010000 	mrsmi	r0, (UNDEF: 1)
    24a0:	20001a50 	andcs	r1, r0, r0, asr sl
    24a4:	00000050 	andeq	r0, r0, r0, asr r0
    24a8:	07e89c01 	strbeq	r9, [r8, r1, lsl #24]!
    24ac:	781a0000 	ldmdavc	sl, {}	; <UNPREDICTABLE>
    24b0:	7e410100 	dvfvcs	f0, f1, f0
    24b4:	02000001 	andeq	r0, r0, #1
    24b8:	631e6f91 	tstvs	lr, #580	; 0x244
    24bc:	7e420100 	dvfvcs	f0, f2, f0
    24c0:	02000001 	andeq	r0, r0, #1
    24c4:	1f007791 	svcne	0x00007791
    24c8:	000010f0 	strdeq	r1, [r0], -r0
    24cc:	1a203a01 	bne	810cd8 <startup-0x1f7ef328>
    24d0:	00302000 	eorseq	r2, r0, r0
    24d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    24d8:	000f991f 	andeq	r9, pc, pc, lsl r9	; <UNPREDICTABLE>
    24dc:	08370100 	ldmdaeq	r7!, {r8}
    24e0:	1820001a 	stmdane	r0!, {r1, r3, r4}
    24e4:	01000000 	mrseq	r0, (UNDEF: 0)
    24e8:	1140199c 			; <UNDEFINED> instruction: 0x1140199c
    24ec:	32010000 	andcc	r0, r1, #0
    24f0:	200019d6 	ldrdcs	r1, [r0], -r6
    24f4:	00000032 	andeq	r0, r0, r2, lsr r0
    24f8:	083a9c01 	ldmdaeq	sl!, {r0, sl, fp, ip, pc}
    24fc:	581b0000 	ldmdapl	fp, {}	; <UNPREDICTABLE>
    2500:	0100000f 	tsteq	r0, pc
    2504:	00052032 	andeq	r2, r5, r2, lsr r0
    2508:	6c910200 	lfmvs	f0, 4, [r1], {0}
    250c:	0100691e 	tsteq	r0, lr, lsl r9
    2510:	00012e33 	andeq	r2, r1, r3, lsr lr
    2514:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2518:	0fc91d00 	svceq	0x00c91d00
    251c:	21010000 	mrscs	r0, (UNDEF: 1)
    2520:	200019b0 			; <UNDEFINED> instruction: 0x200019b0
    2524:	00000026 	andeq	r0, r0, r6, lsr #32
    2528:	085d9c01 	ldmdaeq	sp, {r0, sl, fp, ip, pc}^
    252c:	6d1a0000 	ldcvs	0, cr0, [sl, #-0]
    2530:	21010073 	tstcs	r1, r3, ror r0
    2534:	0000004e 	andeq	r0, r0, lr, asr #32
    2538:	00749102 	rsbseq	r9, r4, r2, lsl #2
    253c:	000f771d 	andeq	r7, pc, sp, lsl r7	; <UNPREDICTABLE>
    2540:	84180100 	ldrhi	r0, [r8], #-256	; 0xffffff00
    2544:	2c200019 	stccs	0, cr0, [r0], #-100	; 0xffffff9c
    2548:	01000000 	mrseq	r0, (UNDEF: 0)
    254c:	0008809c 	muleq	r8, ip, r0
    2550:	73751a00 	cmnvc	r5, #0, 20
    2554:	4e180100 	mufmie	f0, f0, f0
    2558:	02000000 	andeq	r0, r0, #0
    255c:	23007491 	movwcs	r7, #1169	; 0x491
    2560:	00000fec 	andeq	r0, r0, ip, ror #31
    2564:	19400e01 	stmdbne	r0, {r0, r9, sl, fp}^
    2568:	00442000 	subeq	r2, r4, r0
    256c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2570:	00109d23 	andseq	r9, r0, r3, lsr #26
    2574:	fc040100 	stc2	1, cr0, [r4], {-0}
    2578:	44200018 	strtmi	r0, [r0], #-24	; 0xffffffe8
    257c:	01000000 	mrseq	r0, (UNDEF: 0)
    2580:	0100009c 	swpeq	r0, ip, [r0]	; <UNPREDICTABLE>
    2584:	00040000 	andeq	r0, r4, r0
    2588:	0000081e 	andeq	r0, r0, lr, lsl r8
    258c:	00810104 	addeq	r0, r1, r4, lsl #2
    2590:	880c0000 	stmdahi	ip, {}	; <UNPREDICTABLE>
    2594:	40000011 	andmi	r0, r0, r1, lsl r0
    2598:	28200027 	stmdacs	r0!, {r0, r1, r2, r5}
    259c:	3a000000 	bcc	25a4 <startup-0x1fffda5c>
    25a0:	0200000c 	andeq	r0, r0, #12
    25a4:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
    25a8:	03000000 	movweq	r0, #0
    25ac:	00000306 	andeq	r0, r0, r6, lsl #6
    25b0:	004e0702 	subeq	r0, lr, r2, lsl #14
    25b4:	03000000 	movweq	r0, #0
    25b8:	0000065f 	andeq	r0, r0, pc, asr r6
    25bc:	004e0802 	subeq	r0, lr, r2, lsl #16
    25c0:	03040000 	movweq	r0, #16384	; 0x4000
    25c4:	00001069 	andeq	r1, r0, r9, rrx
    25c8:	00550902 	subseq	r0, r5, r2, lsl #18
    25cc:	00080000 	andeq	r0, r8, r0
    25d0:	2a070404 	bcs	1c35e8 <startup-0x1fe3ca18>
    25d4:	05000003 	streq	r0, [r0, #-3]
    25d8:	00005b04 	andeq	r5, r0, r4, lsl #22
    25dc:	08010400 	stmdaeq	r1, {sl}
    25e0:	00000441 	andeq	r0, r0, r1, asr #8
    25e4:	0011bb06 	andseq	fp, r1, r6, lsl #22
    25e8:	210a0200 	mrscs	r0, R10_fiq
    25ec:	07000000 	streq	r0, [r0, -r0]
    25f0:	00000016 	andeq	r0, r0, r6, lsl r0
    25f4:	9e06030c 	cdpls	3, 0, cr0, cr6, cr12, {0}
    25f8:	03000000 	movweq	r0, #0
    25fc:	0000052c 	andeq	r0, r0, ip, lsr #10
    2600:	009e0703 	addseq	r0, lr, r3, lsl #14
    2604:	03000000 	movweq	r0, #0
    2608:	0000001d 	andeq	r0, r0, sp, lsl r0
    260c:	009e0803 	addseq	r0, lr, r3, lsl #16
    2610:	03040000 	movweq	r0, #16384	; 0x4000
    2614:	00000012 	andeq	r0, r0, r2, lsl r0
    2618:	009e0903 	addseq	r0, lr, r3, lsl #18
    261c:	00080000 	andeq	r0, r8, r0
    2620:	00620405 	rsbeq	r0, r2, r5, lsl #8
    2624:	8e060000 	cdphi	0, 0, cr0, cr6, cr0, {0}
    2628:	0300000c 	movweq	r0, #12
    262c:	00006d0a 	andeq	r6, r0, sl, lsl #26
    2630:	117d0800 	cmnne	sp, r0, lsl #16
    2634:	03010000 	movweq	r0, #4096	; 0x1000
    2638:	20002740 	andcs	r2, r0, r0, asr #14
    263c:	00000028 	andeq	r0, r0, r8, lsr #32
    2640:	00fd9c01 	rscseq	r9, sp, r1, lsl #24
    2644:	82090000 	andhi	r0, r9, #0
    2648:	01000011 	tsteq	r0, r1, lsl r0
    264c:	0000fd03 	andeq	pc, r0, r3, lsl #26
    2650:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2654:	00052c09 	andeq	r2, r5, r9, lsl #24
    2658:	9e030100 	adflss	f0, f3, f0
    265c:	02000000 	andeq	r0, r0, #0
    2660:	1d097091 	stcne	0, cr7, [r9, #-580]	; 0xfffffdbc
    2664:	01000000 	mrseq	r0, (UNDEF: 0)
    2668:	00009e03 	andeq	r9, r0, r3, lsl #28
    266c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2670:	00001209 	andeq	r1, r0, r9, lsl #4
    2674:	9e030100 	adflss	f0, f3, f0
    2678:	02000000 	andeq	r0, r0, #0
    267c:	05006891 	streq	r6, [r0, #-2193]	; 0xfffff76f
    2680:	0000a404 	andeq	sl, r0, r4, lsl #8
    2684:	00c30000 	sbceq	r0, r3, r0
    2688:	00040000 	andeq	r0, r4, r0
    268c:	000008a5 	andeq	r0, r0, r5, lsr #17
    2690:	00810104 	addeq	r0, r1, r4, lsl #2
    2694:	c20c0000 	andgt	r0, ip, #0
    2698:	68000011 	stmdavs	r0, {r0, r4}
    269c:	28200027 	stmdacs	r0!, {r0, r1, r2, r5}
    26a0:	b0000000 	andlt	r0, r0, r0
    26a4:	0200000c 	andeq	r0, r0, #12
    26a8:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
    26ac:	03000000 	movweq	r0, #0
    26b0:	00000306 	andeq	r0, r0, r6, lsl #6
    26b4:	004e0702 	subeq	r0, lr, r2, lsl #14
    26b8:	03000000 	movweq	r0, #0
    26bc:	0000065f 	andeq	r0, r0, pc, asr r6
    26c0:	004e0802 	subeq	r0, lr, r2, lsl #16
    26c4:	03040000 	movweq	r0, #16384	; 0x4000
    26c8:	00001069 	andeq	r1, r0, r9, rrx
    26cc:	00550902 	subseq	r0, r5, r2, lsl #18
    26d0:	00080000 	andeq	r0, r8, r0
    26d4:	2a070404 	bcs	1c36ec <startup-0x1fe3c914>
    26d8:	05000003 	streq	r0, [r0, #-3]
    26dc:	00005b04 	andeq	r5, r0, r4, lsl #22
    26e0:	08010400 	stmdaeq	r1, {sl}
    26e4:	00000441 	andeq	r0, r0, r1, asr #8
    26e8:	0011bb06 	andseq	fp, r1, r6, lsl #22
    26ec:	210a0200 	mrscs	r0, R10_fiq
    26f0:	07000000 	streq	r0, [r0, -r0]
    26f4:	000011b6 			; <UNDEFINED> instruction: 0x000011b6
    26f8:	27680301 	strbcs	r0, [r8, -r1, lsl #6]!
    26fc:	00282000 	eoreq	r2, r8, r0
    2700:	9c010000 	stcls	0, cr0, [r1], {-0}
    2704:	000000b9 	strheq	r0, [r0], -r9
    2708:	01007308 	tsteq	r0, r8, lsl #6
    270c:	0000b903 	andeq	fp, r0, r3, lsl #18
    2710:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2714:	00106909 	andseq	r6, r0, r9, lsl #18
    2718:	55030100 	strpl	r0, [r3, #-256]	; 0xffffff00
    271c:	02000000 	andeq	r0, r0, #0
    2720:	06097091 			; <UNDEFINED> instruction: 0x06097091
    2724:	01000003 	tsteq	r0, r3
    2728:	0000bf03 	andeq	fp, r0, r3, lsl #30
    272c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2730:	00065f09 	andeq	r5, r6, r9, lsl #30
    2734:	bf030100 	svclt	0x00030100
    2738:	02000000 	andeq	r0, r0, #0
    273c:	05006891 	streq	r6, [r0, #-2193]	; 0xfffff76f
    2740:	00006204 	andeq	r6, r0, r4, lsl #4
    2744:	05040a00 	streq	r0, [r4, #-2560]	; 0xfffff600
    2748:	00746e69 	rsbseq	r6, r4, r9, ror #28
    274c:	00013500 	andeq	r3, r1, r0, lsl #10
    2750:	37000400 	strcc	r0, [r0, -r0, lsl #8]
    2754:	04000009 	streq	r0, [r0], #-9
    2758:	00008101 	andeq	r8, r0, r1, lsl #2
    275c:	12280c00 	eorne	r0, r8, #0, 24
    2760:	27900000 	ldrcs	r0, [r0, r0]
    2764:	006c2000 	rsbeq	r2, ip, r0
    2768:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    276c:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    2770:	00ae1302 	adceq	r1, lr, r2, lsl #6
    2774:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    2778:	02000011 	andeq	r0, r0, #17
    277c:	0000ae14 	andeq	sl, r0, r4, lsl lr
    2780:	0a030000 	beq	c2788 <startup-0x1ff3d878>
    2784:	02000012 	andeq	r0, r0, #18
    2788:	0000b515 	andeq	fp, r0, r5, lsl r5
    278c:	55030400 	strpl	r0, [r3, #-1024]	; 0xfffffc00
    2790:	02000012 	andeq	r0, r0, #18
    2794:	0000b516 	andeq	fp, r0, r6, lsl r5
    2798:	77030600 	strvc	r0, [r3, -r0, lsl #12]
    279c:	02000012 	andeq	r0, r0, #18
    27a0:	0000ae17 	andeq	sl, r0, r7, lsl lr
    27a4:	16030800 	strne	r0, [r3], -r0, lsl #16
    27a8:	02000012 	andeq	r0, r0, #18
    27ac:	0000ae18 	andeq	sl, r0, r8, lsl lr
    27b0:	87030c00 	strhi	r0, [r3, -r0, lsl #24]
    27b4:	02000012 	andeq	r0, r0, #18
    27b8:	0000bc19 	andeq	fp, r0, r9, lsl ip
    27bc:	7f031000 	svcvc	0x00031000
    27c0:	02000012 	andeq	r0, r0, #18
    27c4:	0000bc1a 	andeq	fp, r0, sl, lsl ip
    27c8:	1c031100 	stfnes	f1, [r3], {-0}
    27cc:	02000012 	andeq	r0, r0, #18
    27d0:	0000b51b 	andeq	fp, r0, fp, lsl r5
    27d4:	70031200 	andvc	r1, r3, r0, lsl #4
    27d8:	02000012 	andeq	r0, r0, #18
    27dc:	0000bc1c 	andeq	fp, r0, ip, lsl ip
    27e0:	02031400 	andeq	r1, r3, #0, 8
    27e4:	02000012 	andeq	r0, r0, #18
    27e8:	0000bc1d 	andeq	fp, r0, sp, lsl ip
    27ec:	8e031500 	cfsh32hi	mvfx1, mvfx3, #0
    27f0:	02000012 	andeq	r0, r0, #18
    27f4:	0000b51e 	andeq	fp, r0, lr, lsl r5
    27f8:	04001600 	streq	r1, [r0], #-1536	; 0xfffffa00
    27fc:	032a0704 			; <UNDEFINED> instruction: 0x032a0704
    2800:	02040000 	andeq	r0, r4, #0
    2804:	00032407 	andeq	r2, r3, r7, lsl #8
    2808:	08010400 	stmdaeq	r1, {sl}
    280c:	00000441 	andeq	r0, r0, r1, asr #8
    2810:	00121105 	andseq	r1, r2, r5, lsl #2
    2814:	211f0200 	tstcs	pc, r0, lsl #4
    2818:	06000000 	streq	r0, [r0], -r0
    281c:	00001260 	andeq	r1, r0, r0, ror #4
    2820:	01040e01 	tsteq	r4, r1, lsl #28
    2824:	27c80000 	strbcs	r0, [r8, r0]
    2828:	00342000 	eorseq	r2, r4, r0
    282c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2830:	00000104 	andeq	r0, r0, r4, lsl #2
    2834:	74696207 	strbtvc	r6, [r9], #-519	; 0xfffffdf9
    2838:	040e0100 	streq	r0, [lr], #-256	; 0xffffff00
    283c:	02000001 	andeq	r0, r0, #1
    2840:	44086491 	strmi	r6, [r8], #-1169	; 0xfffffb6f
    2844:	01004c49 	tsteq	r0, r9, asr #24
    2848:	00010b0f 	andeq	r0, r1, pc, lsl #22
    284c:	6f910200 	svcvs	0x00910200
    2850:	05040900 	streq	r0, [r4, #-2304]	; 0xfffff700
    2854:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2858:	4a080104 	bmi	202c70 <startup-0x1fdfd390>
    285c:	0a000004 	beq	2874 <startup-0x1fffd78c>
    2860:	0000129a 	muleq	r0, sl, r2
    2864:	010b0801 	tsteq	fp, r1, lsl #16
    2868:	27a80000 	strcs	r0, [r8, r0]!
    286c:	00202000 	eoreq	r2, r0, r0
    2870:	9c010000 	stcls	0, cr0, [r1], {-0}
    2874:	0011f70b 	andseq	pc, r1, fp, lsl #14
    2878:	90040100 	andls	r0, r4, r0, lsl #2
    287c:	18200027 	stmdane	r0!, {r0, r1, r2, r5}
    2880:	01000000 	mrseq	r0, (UNDEF: 0)
    2884:	04ed009c 	strbteq	r0, [sp], #156	; 0x9c
    2888:	00040000 	andeq	r0, r4, r0
    288c:	000009f4 	strdeq	r0, [r0], -r4
    2890:	00810104 	addeq	r0, r1, r4, lsl #2
    2894:	df0c0000 	svcle	0x000c0000
    2898:	fc000013 	stc2	0, cr0, [r0], {19}
    289c:	20200027 	eorcs	r0, r0, r7, lsr #32
    28a0:	8c000005 	stchi	0, cr0, [r0], {5}
    28a4:	0200000d 	andeq	r0, r0, #13
    28a8:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
    28ac:	03000000 	movweq	r0, #0
    28b0:	00000306 	andeq	r0, r0, r6, lsl #6
    28b4:	004e0702 	subeq	r0, lr, r2, lsl #14
    28b8:	03000000 	movweq	r0, #0
    28bc:	0000065f 	andeq	r0, r0, pc, asr r6
    28c0:	004e0802 	subeq	r0, lr, r2, lsl #16
    28c4:	03040000 	movweq	r0, #16384	; 0x4000
    28c8:	00001069 	andeq	r1, r0, r9, rrx
    28cc:	00550902 	subseq	r0, r5, r2, lsl #18
    28d0:	00080000 	andeq	r0, r8, r0
    28d4:	2a070404 	bcs	1c38ec <startup-0x1fe3c714>
    28d8:	05000003 	streq	r0, [r0, #-3]
    28dc:	00005b04 	andeq	r5, r0, r4, lsl #22
    28e0:	08010400 	stmdaeq	r1, {sl}
    28e4:	00000441 	andeq	r0, r0, r1, asr #8
    28e8:	0011bb06 	andseq	fp, r1, r6, lsl #22
    28ec:	210a0200 	mrscs	r0, R10_fiq
    28f0:	07000000 	streq	r0, [r0, -r0]
    28f4:	00000016 	andeq	r0, r0, r6, lsl r0
    28f8:	9e06030c 	cdpls	3, 0, cr0, cr6, cr12, {0}
    28fc:	03000000 	movweq	r0, #0
    2900:	0000052c 	andeq	r0, r0, ip, lsr #10
    2904:	009e0703 	addseq	r0, lr, r3, lsl #14
    2908:	03000000 	movweq	r0, #0
    290c:	0000001d 	andeq	r0, r0, sp, lsl r0
    2910:	009e0803 	addseq	r0, lr, r3, lsl #16
    2914:	03040000 	movweq	r0, #16384	; 0x4000
    2918:	00000012 	andeq	r0, r0, r2, lsl r0
    291c:	009e0903 	addseq	r0, lr, r3, lsl #18
    2920:	00080000 	andeq	r0, r8, r0
    2924:	00620405 	rsbeq	r0, r2, r5, lsl #8
    2928:	8e060000 	cdphi	0, 0, cr0, cr6, cr0, {0}
    292c:	0300000c 	movweq	r0, #12
    2930:	00006d0a 	andeq	r6, r0, sl, lsl #26
    2934:	06240700 	strteq	r0, [r4], -r0, lsl #14
    2938:	04240000 	strteq	r0, [r4], #-0
    293c:	00012806 	andeq	r2, r1, r6, lsl #16
    2940:	03de0300 	bicseq	r0, lr, #0, 6
    2944:	07040000 	streq	r0, [r4, -r0]
    2948:	00000128 	andeq	r0, r0, r8, lsr #2
    294c:	06300300 	ldrteq	r0, [r0], -r0, lsl #6
    2950:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    2954:	0000012e 	andeq	r0, r0, lr, lsr #2
    2958:	05970304 	ldreq	r0, [r7, #772]	; 0x304
    295c:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    2960:	0000012e 	andeq	r0, r0, lr, lsr #2
    2964:	05c30308 	strbeq	r0, [r3, #776]	; 0x308
    2968:	0c040000 	stceq	0, cr0, [r4], {-0}
    296c:	00000146 	andeq	r0, r0, r6, asr #2
    2970:	02ff030c 	rscseq	r0, pc, #12, 6	; 0x30000000
    2974:	0d040000 	stceq	0, cr0, [r4, #-0]
    2978:	00000146 	andeq	r0, r0, r6, asr #2
    297c:	03f00310 	mvnseq	r0, #16, 6	; 0x40000000
    2980:	10040000 	andne	r0, r4, r0
    2984:	0000012e 	andeq	r0, r0, lr, lsr #2
    2988:	00520314 	subseq	r0, r2, r4, lsl r3
    298c:	11040000 	mrsne	r0, (UNDEF: 4)
    2990:	0000012e 	andeq	r0, r0, lr, lsr #2
    2994:	036f0318 	cmneq	pc, #24, 6	; 0x60000000
    2998:	12040000 	andne	r0, r4, #0
    299c:	0000012e 	andeq	r0, r0, lr, lsr #2
    29a0:	037f031c 	cmneq	pc, #28, 6	; 0x70000000
    29a4:	13040000 	movwne	r0, #16384	; 0x4000
    29a8:	0000012e 	andeq	r0, r0, lr, lsr #2
    29ac:	04050020 	streq	r0, [r5], #-32	; 0xffffffe0
    29b0:	000000a4 	andeq	r0, r0, r4, lsr #1
    29b4:	69050408 	stmdbvs	r5, {r3, sl}
    29b8:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    29bc:	00000140 	andeq	r0, r0, r0, asr #2
    29c0:	0001400a 	andeq	r4, r1, sl
    29c4:	04050000 	streq	r0, [r5], #-0
    29c8:	000000af 	andeq	r0, r0, pc, lsr #1
    29cc:	01350405 	teqeq	r5, r5, lsl #8
    29d0:	25060000 	strcs	r0, [r6, #-0]
    29d4:	04000006 	streq	r0, [r0], #-6
    29d8:	0000af15 	andeq	sl, r0, r5, lsl pc
    29dc:	01620b00 	cmneq	r2, r0, lsl #22
    29e0:	01620000 	cmneq	r2, r0
    29e4:	000c0000 	andeq	r0, ip, r0
    29e8:	014c0405 	cmpeq	ip, r5, lsl #8
    29ec:	c40d0000 	strgt	r0, [sp], #-0
    29f0:	04000004 	streq	r0, [r0], #-4
    29f4:	0001571c 	andeq	r5, r1, ip, lsl r7
    29f8:	03b50d00 			; <UNDEFINED> instruction: 0x03b50d00
    29fc:	1d040000 	stcne	0, cr0, [r4, #-0]
    2a00:	0000012e 	andeq	r0, r0, lr, lsr #2
    2a04:	0005ee06 	andeq	lr, r5, r6, lsl #28
    2a08:	5b240500 	blpl	903e10 <startup-0x1f6fc1f0>
    2a0c:	0b000000 	bleq	2a14 <startup-0x1fffd5ec>
    2a10:	0000017e 	andeq	r0, r0, lr, ror r1
    2a14:	0000019a 	muleq	r0, sl, r1
    2a18:	00019a0e 	andeq	r9, r1, lr, lsl #20
    2a1c:	0003ff00 	andeq	pc, r3, r0, lsl #30
    2a20:	9c070404 	cfstrsls	mvf0, [r7], {4}
    2a24:	0d000003 	stceq	0, cr0, [r0, #-12]
    2a28:	00000f9f 	muleq	r0, pc, pc	; <UNPREDICTABLE>
    2a2c:	01892b05 	orreq	r2, r9, r5, lsl #22
    2a30:	220d0000 	andcs	r0, sp, #0
    2a34:	05000002 	streq	r0, [r0, #-2]
    2a38:	0001892c 	andeq	r8, r1, ip, lsr #18
    2a3c:	044f0d00 	strbeq	r0, [pc], #-3328	; 2a44 <startup-0x1fffd5bc>
    2a40:	2d050000 	stccs	0, cr0, [r5, #-0]
    2a44:	00000189 	andeq	r0, r0, r9, lsl #3
    2a48:	00030c0d 	andeq	r0, r3, sp, lsl #24
    2a4c:	892e0500 	stmdbhi	lr!, {r8, sl}
    2a50:	0d000001 	stceq	0, cr0, [r0, #-4]
    2a54:	0000029c 	muleq	r0, ip, r2
    2a58:	01892f05 	orreq	r2, r9, r5, lsl #30
    2a5c:	060d0000 	streq	r0, [sp], -r0
    2a60:	05000006 	streq	r0, [r0, #-6]
    2a64:	00018930 	andeq	r8, r1, r0, lsr r9
    2a68:	05f60d00 	ldrbeq	r0, [r6, #3328]!	; 0xd00
    2a6c:	31050000 	mrscc	r0, (UNDEF: 5)
    2a70:	00000189 	andeq	r0, r0, r9, lsl #3
    2a74:	0013650f 	andseq	r6, r3, pc, lsl #10
    2a78:	98e40100 	stmials	r4!, {r8}^
    2a7c:	8420002c 	strthi	r0, [r0], #-44	; 0xffffffd4
    2a80:	01000000 	mrseq	r0, (UNDEF: 0)
    2a84:	00022c9c 	muleq	r2, ip, ip
    2a88:	00731000 	rsbseq	r1, r3, r0
    2a8c:	022ce501 	eoreq	lr, ip, #4194304	; 0x400000
    2a90:	91020000 	mrsls	r0, (UNDEF: 2)
    2a94:	1340116c 	movtne	r1, #364	; 0x16c
    2a98:	e6010000 	str	r0, [r1], -r0
    2a9c:	00000239 	andeq	r0, r0, r9, lsr r2
    2aa0:	115c9102 	cmpne	ip, r2, lsl #2
    2aa4:	00001346 	andeq	r1, r0, r6, asr #6
    2aa8:	0249e701 	subeq	lr, r9, #262144	; 0x40000
    2aac:	91020000 	mrsls	r0, (UNDEF: 2)
    2ab0:	04050048 	streq	r0, [r5], #-72	; 0xffffffb8
    2ab4:	00000232 	andeq	r0, r0, r2, lsr r2
    2ab8:	4a080104 	bmi	202ed0 <startup-0x1fdfd130>
    2abc:	0b000004 	bleq	2ad4 <startup-0x1fffd52c>
    2ac0:	00000232 	andeq	r0, r0, r2, lsr r2
    2ac4:	00000249 	andeq	r0, r0, r9, asr #4
    2ac8:	00019a12 	andeq	r9, r1, r2, lsl sl
    2acc:	0b000c00 	bleq	5ad4 <startup-0x1fffa52c>
    2ad0:	00000232 	andeq	r0, r0, r2, lsr r2
    2ad4:	00000259 	andeq	r0, r0, r9, asr r2
    2ad8:	00019a12 	andeq	r9, r1, r2, lsl sl
    2adc:	0f001300 	svceq	0x00001300
    2ae0:	000012f6 	strdeq	r1, [r0], -r6
    2ae4:	2c0acc01 	stccs	12, cr12, [sl], {1}
    2ae8:	008e2000 	addeq	r2, lr, r0
    2aec:	9c010000 	stcls	0, cr0, [r1], {-0}
    2af0:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
    2af4:	00142e13 	andseq	r2, r4, r3, lsl lr
    2af8:	2ccc0100 	stfcse	f0, [ip], {0}
    2afc:	02000002 	andeq	r0, r0, #2
    2b00:	60136c91 	mulsvs	r3, r1, ip
    2b04:	01000002 	tsteq	r0, r2
    2b08:	00022ccc 	andeq	r2, r2, ip, asr #25
    2b0c:	68910200 	ldmvs	r1, {r9}
    2b10:	0013d813 	andseq	sp, r3, r3, lsl r8
    2b14:	2ecc0100 	polcse	f0, f4, f0
    2b18:	02000001 	andeq	r0, r0, #1
    2b1c:	b4136491 	ldrlt	r6, [r3], #-1169	; 0xfffffb6f
    2b20:	01000012 	tsteq	r0, r2, lsl r0
    2b24:	00012ecc 	andeq	r2, r1, ip, asr #29
    2b28:	60910200 	addsvs	r0, r1, r0, lsl #4
    2b2c:	01006910 	tsteq	r0, r0, lsl r9
    2b30:	00012ed0 	ldrdeq	r2, [r1], -r0
    2b34:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2b38:	13970f00 	orrsne	r0, r7, #0, 30
    2b3c:	bd010000 	stclt	0, cr0, [r1, #-0]
    2b40:	20002bac 	andcs	r2, r0, ip, lsr #23
    2b44:	0000005e 	andeq	r0, r0, lr, asr r0
    2b48:	02e59c01 	rsceq	r9, r5, #256	; 0x100
    2b4c:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    2b50:	01000014 	tsteq	r0, r4, lsl r0
    2b54:	00022cbd 			; <UNDEFINED> instruction: 0x00022cbd
    2b58:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2b5c:	00026013 	andeq	r6, r2, r3, lsl r0
    2b60:	2cbd0100 	ldfcss	f0, [sp]
    2b64:	02000002 	andeq	r0, r0, #2
    2b68:	0f007091 	svceq	0x00007091
    2b6c:	000012ea 	andeq	r1, r0, sl, ror #5
    2b70:	2b42ad01 	blcs	10adf7c <startup-0x1ef52084>
    2b74:	006a2000 	rsbeq	r2, sl, r0
    2b78:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b7c:	00000315 	andeq	r0, r0, r5, lsl r3
    2b80:	01007310 	tsteq	r0, r0, lsl r3
    2b84:	00022cae 	andeq	r2, r2, lr, lsr #25
    2b88:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2b8c:	00102511 	andseq	r2, r0, r1, lsl r5
    2b90:	15af0100 	strne	r0, [pc, #256]!	; 2c98 <startup-0x1fffd368>
    2b94:	02000003 	andeq	r0, r0, #3
    2b98:	0b005491 	bleq	17de4 <startup-0x1ffe821c>
    2b9c:	00000232 	andeq	r0, r0, r2, lsr r2
    2ba0:	00000325 	andeq	r0, r0, r5, lsr #6
    2ba4:	00019a12 	andeq	r9, r1, r2, lsl sl
    2ba8:	14001400 	strne	r1, [r0], #-1024	; 0xfffffc00
    2bac:	000012cb 	andeq	r1, r0, fp, asr #5
    2bb0:	2b30a801 	blcs	c2cbbc <startup-0x1f3d3444>
    2bb4:	00122000 	andseq	r2, r2, r0
    2bb8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2bbc:	0012a315 	andseq	sl, r2, r5, lsl r3
    2bc0:	169f0100 	ldrne	r0, [pc], r0, lsl #2
    2bc4:	1a20002b 	bne	802c78 <startup-0x1f7fd388>
    2bc8:	01000000 	mrseq	r0, (UNDEF: 0)
    2bcc:	12d8149c 	sbcsne	r1, r8, #156, 8	; 0x9c000000
    2bd0:	83010000 	movwhi	r0, #4096	; 0x1000
    2bd4:	20002a7c 	andcs	r2, r0, ip, ror sl
    2bd8:	0000009a 	muleq	r0, sl, r0
    2bdc:	a30f9c01 	movwge	r9, #64513	; 0xfc01
    2be0:	01000013 	tsteq	r0, r3, lsl r0
    2be4:	002a2c7b 	eoreq	r2, sl, fp, ror ip
    2be8:	00005020 	andeq	r5, r0, r0, lsr #32
    2bec:	989c0100 	ldmls	ip, {r8}
    2bf0:	16000003 	strne	r0, [r0], -r3
    2bf4:	00776f72 	rsbseq	r6, r7, r2, ror pc
    2bf8:	005b7b01 	subseq	r7, fp, r1, lsl #22
    2bfc:	91020000 	mrsls	r0, (UNDEF: 2)
    2c00:	12e3136f 	rscne	r1, r3, #-1140850687	; 0xbc000001
    2c04:	7b010000 	blvc	42c0c <startup-0x1ffbd3f4>
    2c08:	0000005b 	andeq	r0, r0, fp, asr r0
    2c0c:	116e9102 	cmnne	lr, r2, lsl #2
    2c10:	0000134c 	andeq	r1, r0, ip, asr #6
    2c14:	005b7c01 	subseq	r7, fp, r1, lsl #24
    2c18:	91020000 	mrsls	r0, (UNDEF: 2)
    2c1c:	c70f0077 	smlsdxgt	pc, r7, r0, r0	; <UNPREDICTABLE>
    2c20:	01000013 	tsteq	r0, r3, lsl r0
    2c24:	0029f074 	eoreq	pc, r9, r4, ror r0	; <UNPREDICTABLE>
    2c28:	00003c20 	andeq	r3, r0, r0, lsr #24
    2c2c:	ba9c0100 	blt	fe703034 <firstTime.4040+0xde6fa3dc>
    2c30:	16000003 	strne	r0, [r0], -r3
    2c34:	74010063 	strvc	r0, [r1], #-99	; 0xffffff9d
    2c38:	0000005b 	andeq	r0, r0, fp, asr r0
    2c3c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2c40:	00130717 	andseq	r0, r3, r7, lsl r7
    2c44:	5b6a0100 	blpl	1a8304c <startup-0x1e57cfb4>
    2c48:	bc000000 	stclt	0, cr0, [r0], {-0}
    2c4c:	34200029 	strtcc	r0, [r0], #-41	; 0xffffffd7
    2c50:	01000000 	mrseq	r0, (UNDEF: 0)
    2c54:	0003e09c 	muleq	r3, ip, r0
    2c58:	00631000 	rsbeq	r1, r3, r0
    2c5c:	005b6b01 	subseq	r6, fp, r1, lsl #22
    2c60:	91020000 	mrsls	r0, (UNDEF: 2)
    2c64:	b00f0077 	andlt	r0, pc, r7, ror r0	; <UNPREDICTABLE>
    2c68:	01000013 	tsteq	r0, r3, lsl r0
    2c6c:	00298c63 	eoreq	r8, r9, r3, ror #24
    2c70:	00003020 	andeq	r3, r0, r0, lsr #32
    2c74:	029c0100 	addseq	r0, ip, #0, 2
    2c78:	16000004 	strne	r0, [r0], -r4
    2c7c:	63010063 	movwvs	r0, #4195	; 0x1063
    2c80:	0000005b 	andeq	r0, r0, fp, asr r0
    2c84:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2c88:	0012bb17 	andseq	fp, r2, r7, lsl fp
    2c8c:	5b570100 	blpl	15c3094 <startup-0x1ea3cf6c>
    2c90:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2c94:	54200029 	strtpl	r0, [r0], #-41	; 0xffffffd7
    2c98:	01000000 	mrseq	r0, (UNDEF: 0)
    2c9c:	0004299c 	muleq	r4, ip, r9
    2ca0:	76721000 	ldrbtvc	r1, [r2], -r0
    2ca4:	5b5c0100 	blpl	17030ac <startup-0x1e8fcf54>
    2ca8:	02000000 	andeq	r0, r0, #0
    2cac:	17006f91 			; <UNDEFINED> instruction: 0x17006f91
    2cb0:	00001370 	andeq	r1, r0, r0, ror r3
    2cb4:	005b4b01 	subseq	r4, fp, r1, lsl #22
    2cb8:	28e40000 	stmiacs	r4!, {}^	; <UNPREDICTABLE>
    2cbc:	00542000 	subseq	r2, r4, r0
    2cc0:	9c010000 	stcls	0, cr0, [r1], {-0}
    2cc4:	00000450 	andeq	r0, r0, r0, asr r4
    2cc8:	00767210 	rsbseq	r7, r6, r0, lsl r2
    2ccc:	005b5001 	subseq	r5, fp, r1
    2cd0:	91020000 	mrsls	r0, (UNDEF: 2)
    2cd4:	540f006f 	strpl	r0, [pc], #-111	; 2cdc <startup-0x1fffd324>
    2cd8:	01000013 	tsteq	r0, r3, lsl r0
    2cdc:	0028ba45 	eoreq	fp, r8, r5, asr #20
    2ce0:	00002a20 	andeq	r2, r0, r0, lsr #20
    2ce4:	749c0100 	ldrvc	r0, [ip], #256	; 0x100
    2ce8:	13000004 	movwne	r0, #4
    2cec:	00001069 	andeq	r1, r0, r9, rrx
    2cf0:	005b4501 	subseq	r4, fp, r1, lsl #10
    2cf4:	91020000 	mrsls	r0, (UNDEF: 2)
    2cf8:	300f0077 	andcc	r0, pc, r7, ror r0	; <UNPREDICTABLE>
    2cfc:	01000013 	tsteq	r0, r3, lsl r0
    2d00:	0028903f 	eoreq	r9, r8, pc, lsr r0
    2d04:	00002a20 	andeq	r2, r0, r0, lsr #20
    2d08:	989c0100 	ldmls	ip, {r8}
    2d0c:	13000004 	movwne	r0, #4
    2d10:	00000f91 	muleq	r0, r1, pc	; <UNPREDICTABLE>
    2d14:	005b3f01 	subseq	r3, fp, r1, lsl #30
    2d18:	91020000 	mrsls	r0, (UNDEF: 2)
    2d1c:	82180077 	andshi	r0, r8, #119	; 0x77
    2d20:	01000013 	tsteq	r0, r3, lsl r0
    2d24:	00284037 	eoreq	r4, r8, r7, lsr r0
    2d28:	00005020 	andeq	r5, r0, r0, lsr #32
    2d2c:	c69c0100 	ldrgt	r0, [ip], r0, lsl #2
    2d30:	16000004 	strne	r0, [r0], -r4
    2d34:	37010078 	smlsdxcc	r1, r8, r0, r0
    2d38:	0000005b 	andeq	r0, r0, fp, asr r0
    2d3c:	106f9102 	rsbne	r9, pc, r2, lsl #2
    2d40:	39010063 	stmdbcc	r1, {r0, r1, r5, r6}
    2d44:	0000005b 	andeq	r0, r0, fp, asr r0
    2d48:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2d4c:	00131d19 	andseq	r1, r3, r9, lsl sp
    2d50:	fc2f0100 	stc2	1, cr0, [pc], #-0	; 2d58 <startup-0x1fffd2a8>
    2d54:	44200027 	strtmi	r0, [r0], #-39	; 0xffffffd9
    2d58:	01000000 	mrseq	r0, (UNDEF: 0)
    2d5c:	0078169c 			; <UNDEFINED> instruction: 0x0078169c
    2d60:	005b2f01 	subseq	r2, fp, r1, lsl #30
    2d64:	91020000 	mrsls	r0, (UNDEF: 2)
    2d68:	0063106f 	rsbeq	r1, r3, pc, rrx
    2d6c:	005b3101 	subseq	r3, fp, r1, lsl #2
    2d70:	91020000 	mrsls	r0, (UNDEF: 2)
    2d74:	40000077 	andmi	r0, r0, r7, ror r0
    2d78:	04000001 	streq	r0, [r0], #-1
    2d7c:	000b7200 	andeq	r7, fp, r0, lsl #4
    2d80:	81010400 	tsthi	r1, r0, lsl #8
    2d84:	0c000000 	stceq	0, cr0, [r0], {-0}
    2d88:	00001433 	andeq	r1, r0, r3, lsr r4
    2d8c:	20002d1c 	andcs	r2, r0, ip, lsl sp
    2d90:	00000094 	muleq	r0, r4, r0
    2d94:	00000eea 	andeq	r0, r0, sl, ror #29
    2d98:	0005e402 	andeq	lr, r5, r2, lsl #8
    2d9c:	04021400 	streq	r1, [r2], #-1024	; 0xfffffc00
    2da0:	0000006a 	andeq	r0, r0, sl, rrx
    2da4:	00142e03 	andseq	r2, r4, r3, lsl #28
    2da8:	6a050200 	bvs	1435b0 <startup-0x1febca50>
    2dac:	00000000 	andeq	r0, r0, r0
    2db0:	00026003 	andeq	r6, r2, r3
    2db4:	6a060200 	bvs	1835bc <startup-0x1fe7ca44>
    2db8:	04000000 	streq	r0, [r0], #-0
    2dbc:	00038903 	andeq	r8, r3, r3, lsl #18
    2dc0:	77080200 	strvc	r0, [r8, -r0, lsl #4]
    2dc4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2dc8:	00037903 	andeq	r7, r3, r3, lsl #18
    2dcc:	77090200 	strvc	r0, [r9, -r0, lsl #4]
    2dd0:	0c000000 	stceq	0, cr0, [r0], {-0}
    2dd4:	00026503 	andeq	r6, r2, r3, lsl #10
    2dd8:	940c0200 	strls	r0, [ip], #-512	; 0xfffffe00
    2ddc:	10000000 	andne	r0, r0, r0
    2de0:	70040400 	andvc	r0, r4, r0, lsl #8
    2de4:	05000000 	streq	r0, [r0, #-0]
    2de8:	044a0801 	strbeq	r0, [sl], #-2049	; 0xfffff7ff
    2dec:	04060000 	streq	r0, [r6], #-0
    2df0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    2df4:	008e0700 	addeq	r0, lr, r0, lsl #14
    2df8:	8e080000 	cdphi	0, 0, cr0, cr8, cr0, {0}
    2dfc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2e00:	00000077 	andeq	r0, r0, r7, ror r0
    2e04:	21040400 	tstcs	r4, r0, lsl #8
    2e08:	04000000 	streq	r0, [r0], #-0
    2e0c:	00007e04 	andeq	r7, r0, r4, lsl #28
    2e10:	05e50900 	strbeq	r0, [r5, #2304]!	; 0x900
    2e14:	0d020000 	stceq	0, cr0, [r2, #-0]
    2e18:	00000021 	andeq	r0, r0, r1, lsr #32
    2e1c:	0014150a 	andseq	r1, r4, sl, lsl #10
    2e20:	760c0100 	strvc	r0, [ip], -r0, lsl #2
    2e24:	3a20002d 	bcc	802ee0 <startup-0x1f7fd120>
    2e28:	01000000 	mrseq	r0, (UNDEF: 0)
    2e2c:	0000f39c 	muleq	r0, ip, r3
    2e30:	626f0b00 	rsbvs	r0, pc, #0, 22
    2e34:	0c01006a 	stceq	0, cr0, [r1], {106}	; 0x6a
    2e38:	000000f3 	strdeq	r0, [r0], -r3
    2e3c:	0c749102 	ldfeqp	f1, [r4], #-8
    2e40:	0000142e 	andeq	r1, r0, lr, lsr #8
    2e44:	006a0c01 	rsbeq	r0, sl, r1, lsl #24
    2e48:	91020000 	mrsls	r0, (UNDEF: 2)
    2e4c:	02600c70 	rsbeq	r0, r0, #112, 24	; 0x7000
    2e50:	0c010000 	stceq	0, cr0, [r1], {-0}
    2e54:	0000006a 	andeq	r0, r0, sl, rrx
    2e58:	0c6c9102 	stfeqp	f1, [ip], #-8
    2e5c:	00000379 	andeq	r0, r0, r9, ror r3
    2e60:	00770c01 	rsbseq	r0, r7, r1, lsl #24
    2e64:	91020000 	mrsls	r0, (UNDEF: 2)
    2e68:	04040068 	streq	r0, [r4], #-104	; 0xffffff98
    2e6c:	0000009a 	muleq	r0, sl, r0
    2e70:	0002650d 	andeq	r6, r2, sp, lsl #10
    2e74:	1c040100 	stfnes	f0, [r4], {-0}
    2e78:	5a20002d 	bpl	802f34 <startup-0x1f7fd0cc>
    2e7c:	01000000 	mrseq	r0, (UNDEF: 0)
    2e80:	06c80c9c 			; <UNDEFINED> instruction: 0x06c80c9c
    2e84:	04010000 	streq	r0, [r1], #-0
    2e88:	000000f3 	strdeq	r0, [r0], -r3
    2e8c:	0c6c9102 	stfeqp	f1, [ip], #-8
    2e90:	00001424 	andeq	r1, r0, r4, lsr #8
    2e94:	00770401 	rsbseq	r0, r7, r1, lsl #8
    2e98:	91020000 	mrsls	r0, (UNDEF: 2)
    2e9c:	13d80e68 	bicsne	r0, r8, #104, 28	; 0x680
    2ea0:	05010000 	streq	r0, [r1, #-0]
    2ea4:	00000077 	andeq	r0, r0, r7, ror r0
    2ea8:	0e749102 	expeqs	f1, f2
    2eac:	000012b4 			; <UNDEFINED> instruction: 0x000012b4
    2eb0:	00770601 	rsbseq	r0, r7, r1, lsl #12
    2eb4:	91020000 	mrsls	r0, (UNDEF: 2)
    2eb8:	e0000070 	and	r0, r0, r0, ror r0
    2ebc:	04000002 	streq	r0, [r0], #-2
    2ec0:	000c3d00 	andeq	r3, ip, r0, lsl #26
    2ec4:	81010400 	tsthi	r1, r0, lsl #8
    2ec8:	0c000000 	stceq	0, cr0, [r0], {-0}
    2ecc:	000014e0 	andeq	r1, r0, r0, ror #9
    2ed0:	20002db0 			; <UNDEFINED> instruction: 0x20002db0
    2ed4:	000000e8 	andeq	r0, r0, r8, ror #1
    2ed8:	00000f64 	andeq	r0, r0, r4, ror #30
    2edc:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
    2ee0:	0000004e 	andeq	r0, r0, lr, asr #32
    2ee4:	00030603 	andeq	r0, r3, r3, lsl #12
    2ee8:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
    2eec:	00000000 	andeq	r0, r0, r0
    2ef0:	00065f03 	andeq	r5, r6, r3, lsl #30
    2ef4:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
    2ef8:	04000000 	streq	r0, [r0], #-0
    2efc:	00106903 	andseq	r6, r0, r3, lsl #18
    2f00:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
    2f04:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2f08:	07040400 	streq	r0, [r4, -r0, lsl #8]
    2f0c:	0000032a 	andeq	r0, r0, sl, lsr #6
    2f10:	005b0405 	subseq	r0, fp, r5, lsl #8
    2f14:	01040000 	mrseq	r0, (UNDEF: 4)
    2f18:	00044108 	andeq	r4, r4, r8, lsl #2
    2f1c:	11bb0600 			; <UNDEFINED> instruction: 0x11bb0600
    2f20:	0a020000 	beq	82f28 <startup-0x1ff7d0d8>
    2f24:	00000021 	andeq	r0, r0, r1, lsr #32
    2f28:	00001607 	andeq	r1, r0, r7, lsl #12
    2f2c:	06030c00 	streq	r0, [r3], -r0, lsl #24
    2f30:	0000009e 	muleq	r0, lr, r0
    2f34:	00052c03 	andeq	r2, r5, r3, lsl #24
    2f38:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
    2f3c:	00000000 	andeq	r0, r0, r0
    2f40:	00001d03 	andeq	r1, r0, r3, lsl #26
    2f44:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
    2f48:	04000000 	streq	r0, [r0], #-0
    2f4c:	00001203 	andeq	r1, r0, r3, lsl #4
    2f50:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
    2f54:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2f58:	62040500 	andvs	r0, r4, #0, 10
    2f5c:	06000000 	streq	r0, [r0], -r0
    2f60:	00000c8e 	andeq	r0, r0, lr, lsl #25
    2f64:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
    2f68:	24070000 	strcs	r0, [r7], #-0
    2f6c:	24000006 	strcs	r0, [r0], #-6
    2f70:	01280604 			; <UNDEFINED> instruction: 0x01280604
    2f74:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    2f78:	04000003 	streq	r0, [r0], #-3
    2f7c:	00012807 	andeq	r2, r1, r7, lsl #16
    2f80:	30030000 	andcc	r0, r3, r0
    2f84:	04000006 	streq	r0, [r0], #-6
    2f88:	00012e08 	andeq	r2, r1, r8, lsl #28
    2f8c:	97030400 	strls	r0, [r3, -r0, lsl #8]
    2f90:	04000005 	streq	r0, [r0], #-5
    2f94:	00012e09 	andeq	r2, r1, r9, lsl #28
    2f98:	c3030800 	movwgt	r0, #14336	; 0x3800
    2f9c:	04000005 	streq	r0, [r0], #-5
    2fa0:	0001460c 	andeq	r4, r1, ip, lsl #12
    2fa4:	ff030c00 			; <UNDEFINED> instruction: 0xff030c00
    2fa8:	04000002 	streq	r0, [r0], #-2
    2fac:	0001460d 	andeq	r4, r1, sp, lsl #12
    2fb0:	f0031000 			; <UNDEFINED> instruction: 0xf0031000
    2fb4:	04000003 	streq	r0, [r0], #-3
    2fb8:	00012e10 	andeq	r2, r1, r0, lsl lr
    2fbc:	52031400 	andpl	r1, r3, #0, 8
    2fc0:	04000000 	streq	r0, [r0], #-0
    2fc4:	00012e11 	andeq	r2, r1, r1, lsl lr
    2fc8:	6f031800 	svcvs	0x00031800
    2fcc:	04000003 	streq	r0, [r0], #-3
    2fd0:	00012e12 	andeq	r2, r1, r2, lsl lr
    2fd4:	7f031c00 	svcvc	0x00031c00
    2fd8:	04000003 	streq	r0, [r0], #-3
    2fdc:	00012e13 	andeq	r2, r1, r3, lsl lr
    2fe0:	05002000 	streq	r2, [r0, #-0]
    2fe4:	0000a404 	andeq	sl, r0, r4, lsl #8
    2fe8:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
    2fec:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2ff0:	00014009 	andeq	r4, r1, r9
    2ff4:	01400a00 	cmpeq	r0, r0, lsl #20
    2ff8:	05000000 	streq	r0, [r0, #-0]
    2ffc:	0000af04 	andeq	sl, r0, r4, lsl #30
    3000:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
    3004:	06000001 	streq	r0, [r0], -r1
    3008:	00000625 	andeq	r0, r0, r5, lsr #12
    300c:	00af1504 	adceq	r1, pc, r4, lsl #10
    3010:	620b0000 	andvs	r0, fp, #0
    3014:	62000001 	andvs	r0, r0, #1
    3018:	0c000001 	stceq	0, cr0, [r0], {1}
    301c:	4c040500 	cfstr32mi	mvfx0, [r4], {-0}
    3020:	0d000001 	stceq	0, cr0, [r0, #-4]
    3024:	000004c4 	andeq	r0, r0, r4, asr #9
    3028:	01571c04 	cmpeq	r7, r4, lsl #24
    302c:	b50d0000 	strlt	r0, [sp, #-0]
    3030:	04000003 	streq	r0, [r0], #-3
    3034:	00012e1d 	andeq	r2, r1, sp, lsl lr
    3038:	005b0b00 	subseq	r0, fp, r0, lsl #22
    303c:	018f0000 	orreq	r0, pc, r0
    3040:	8f0e0000 	svchi	0x000e0000
    3044:	ff000001 			; <UNDEFINED> instruction: 0xff000001
    3048:	04040003 	streq	r0, [r4], #-3
    304c:	00039c07 	andeq	r9, r3, r7, lsl #24
    3050:	15100f00 	ldrne	r0, [r0, #-3840]	; 0xfffff100
    3054:	03050000 	movweq	r0, #20480	; 0x5000
    3058:	0000017e 	andeq	r0, r0, lr, ror r1
    305c:	74540305 	ldrbvc	r0, [r4], #-773	; 0xfffffcfb
    3060:	b00f2000 	andlt	r2, pc, r0
    3064:	06000014 			; <UNDEFINED> instruction: 0x06000014
    3068:	00017e03 	andeq	r7, r1, r3, lsl #28
    306c:	54030500 	strpl	r0, [r3], #-1280	; 0xfffffb00
    3070:	0f200078 	svceq	0x00200078
    3074:	0000148d 	andeq	r1, r0, sp, lsl #9
    3078:	017e0307 	cmneq	lr, r7, lsl #6
    307c:	03050000 	movweq	r0, #20480	; 0x5000
    3080:	20007c54 	andcs	r7, r0, r4, asr ip
    3084:	00147210 	andseq	r7, r4, r0, lsl r2
    3088:	9e080100 	adflse	f0, f0, f0
    308c:	05000000 	streq	r0, [r0, #-0]
    3090:	00543003 	subseq	r3, r4, r3
    3094:	154c1020 	strbne	r1, [ip, #-32]	; 0xffffffe0
    3098:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    309c:	0000009e 	muleq	r0, lr, r0
    30a0:	53fc0305 	mvnspl	r0, #335544320	; 0x14000000
    30a4:	d3102000 	tstle	r0, #0
    30a8:	01000014 	tsteq	r0, r4, lsl r0
    30ac:	00009e0a 	andeq	r9, r0, sl, lsl #28
    30b0:	40030500 	andmi	r0, r3, r0, lsl #10
    30b4:	10200054 	eorne	r0, r0, r4, asr r0
    30b8:	00001523 	andeq	r1, r0, r3, lsr #10
    30bc:	00620c01 	rsbeq	r0, r2, r1, lsl #24
    30c0:	03050000 	movweq	r0, #20480	; 0x5000
    30c4:	200053f0 	strdcs	r5, [r0], -r0
    30c8:	0014c210 	andseq	ip, r4, r0, lsl r2
    30cc:	620d0100 	andvs	r0, sp, #0, 2
    30d0:	05000000 	streq	r0, [r0, #-0]
    30d4:	0053e403 	subseq	lr, r3, r3, lsl #8
    30d8:	14a01020 	strtne	r1, [r0], #32
    30dc:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    30e0:	00000062 	andeq	r0, r0, r2, rrx
    30e4:	53d80305 	bicspl	r0, r8, #335544320	; 0x14000000
    30e8:	41102000 	tstmi	r0, r0
    30ec:	01000015 	tsteq	r0, r5, lsl r0
    30f0:	00014c11 	andeq	r4, r1, r1, lsl ip
    30f4:	00030500 	andeq	r0, r3, r0, lsl #10
    30f8:	10200054 	eorne	r0, r0, r4, asr r0
    30fc:	00001465 	andeq	r1, r0, r5, ror #8
    3100:	00a41201 	adceq	r1, r4, r1, lsl #4
    3104:	03050000 	movweq	r0, #20480	; 0x5000
    3108:	20005434 	andcs	r5, r0, r4, lsr r4
    310c:	0000a40b 	andeq	sl, r0, fp, lsl #8
    3110:	00026100 	andeq	r6, r2, r0, lsl #2
    3114:	018f1100 	orreq	r1, pc, r0, lsl #2
    3118:	00000000 	andeq	r0, r0, r0
    311c:	00147f10 	andseq	r7, r4, r0, lsl pc
    3120:	51130100 	tstpl	r3, r0, lsl #2
    3124:	05000002 	streq	r0, [r0, #-2]
    3128:	00542403 	subseq	r2, r4, r3, lsl #8
    312c:	15341220 	ldrne	r1, [r4, #-544]!	; 0xfffffde0
    3130:	22010000 	andcs	r0, r1, #0
    3134:	20002e24 	andcs	r2, r0, r4, lsr #28
    3138:	00000074 	andeq	r0, r0, r4, ror r0
    313c:	02a79c01 	adceq	r9, r7, #256	; 0x100
    3140:	41130000 	tstmi	r3, r0
    3144:	01000015 	tsteq	r0, r5, lsl r0
    3148:	00016222 	andeq	r6, r1, r2, lsr #4
    314c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3150:	00084f0f 	andeq	r4, r8, pc, lsl #30
    3154:	2e230100 	sufcss	f0, f3, f0
    3158:	05000001 	streq	r0, [r0, #-1]
    315c:	00805403 	addeq	r5, r0, r3, lsl #8
    3160:	17140020 	ldrne	r0, [r4, -r0, lsr #32]
    3164:	01000004 	tsteq	r0, r4
    3168:	002db014 	eoreq	fp, sp, r4, lsl r0
    316c:	00007420 	andeq	r7, r0, r0, lsr #8
    3170:	0f9c0100 	svceq	0x009c0100
    3174:	00000cc8 	andeq	r0, r0, r8, asr #25
    3178:	009e1601 	addseq	r1, lr, r1, lsl #12
    317c:	91020000 	mrsls	r0, (UNDEF: 2)
    3180:	0cd20f74 	ldcleq	15, cr0, [r2], {116}	; 0x74
    3184:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    3188:	0000009e 	muleq	r0, lr, r0
    318c:	0f709102 	svceq	0x00709102
    3190:	00000ac8 	andeq	r0, r0, r8, asr #21
    3194:	009e1c01 	addseq	r1, lr, r1, lsl #24
    3198:	91020000 	mrsls	r0, (UNDEF: 2)
    319c:	e000006c 	and	r0, r0, ip, rrx
    31a0:	04000002 	streq	r0, [r0], #-2
    31a4:	000d4600 	andeq	r4, sp, r0, lsl #12
    31a8:	81010400 	tsthi	r1, r0, lsl #8
    31ac:	0c000000 	stceq	0, cr0, [r0], {-0}
    31b0:	00001599 	muleq	r0, r9, r5
    31b4:	20002e98 	mulcs	r0, r8, lr
    31b8:	000000e8 	andeq	r0, r0, r8, ror #1
    31bc:	0000103e 	andeq	r1, r0, lr, lsr r0
    31c0:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
    31c4:	0000004e 	andeq	r0, r0, lr, asr #32
    31c8:	00030603 	andeq	r0, r3, r3, lsl #12
    31cc:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
    31d0:	00000000 	andeq	r0, r0, r0
    31d4:	00065f03 	andeq	r5, r6, r3, lsl #30
    31d8:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
    31dc:	04000000 	streq	r0, [r0], #-0
    31e0:	00106903 	andseq	r6, r0, r3, lsl #18
    31e4:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
    31e8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    31ec:	07040400 	streq	r0, [r4, -r0, lsl #8]
    31f0:	0000032a 	andeq	r0, r0, sl, lsr #6
    31f4:	005b0405 	subseq	r0, fp, r5, lsl #8
    31f8:	01040000 	mrseq	r0, (UNDEF: 4)
    31fc:	00044108 	andeq	r4, r4, r8, lsl #2
    3200:	11bb0600 			; <UNDEFINED> instruction: 0x11bb0600
    3204:	0a020000 	beq	8320c <startup-0x1ff7cdf4>
    3208:	00000021 	andeq	r0, r0, r1, lsr #32
    320c:	00001607 	andeq	r1, r0, r7, lsl #12
    3210:	06030c00 	streq	r0, [r3], -r0, lsl #24
    3214:	0000009e 	muleq	r0, lr, r0
    3218:	00052c03 	andeq	r2, r5, r3, lsl #24
    321c:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
    3220:	00000000 	andeq	r0, r0, r0
    3224:	00001d03 	andeq	r1, r0, r3, lsl #26
    3228:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
    322c:	04000000 	streq	r0, [r0], #-0
    3230:	00001203 	andeq	r1, r0, r3, lsl #4
    3234:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
    3238:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    323c:	62040500 	andvs	r0, r4, #0, 10
    3240:	06000000 	streq	r0, [r0], -r0
    3244:	00000c8e 	andeq	r0, r0, lr, lsl #25
    3248:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
    324c:	24070000 	strcs	r0, [r7], #-0
    3250:	24000006 	strcs	r0, [r0], #-6
    3254:	01280604 			; <UNDEFINED> instruction: 0x01280604
    3258:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    325c:	04000003 	streq	r0, [r0], #-3
    3260:	00012807 	andeq	r2, r1, r7, lsl #16
    3264:	30030000 	andcc	r0, r3, r0
    3268:	04000006 	streq	r0, [r0], #-6
    326c:	00012e08 	andeq	r2, r1, r8, lsl #28
    3270:	97030400 	strls	r0, [r3, -r0, lsl #8]
    3274:	04000005 	streq	r0, [r0], #-5
    3278:	00012e09 	andeq	r2, r1, r9, lsl #28
    327c:	c3030800 	movwgt	r0, #14336	; 0x3800
    3280:	04000005 	streq	r0, [r0], #-5
    3284:	0001460c 	andeq	r4, r1, ip, lsl #12
    3288:	ff030c00 			; <UNDEFINED> instruction: 0xff030c00
    328c:	04000002 	streq	r0, [r0], #-2
    3290:	0001460d 	andeq	r4, r1, sp, lsl #12
    3294:	f0031000 			; <UNDEFINED> instruction: 0xf0031000
    3298:	04000003 	streq	r0, [r0], #-3
    329c:	00012e10 	andeq	r2, r1, r0, lsl lr
    32a0:	52031400 	andpl	r1, r3, #0, 8
    32a4:	04000000 	streq	r0, [r0], #-0
    32a8:	00012e11 	andeq	r2, r1, r1, lsl lr
    32ac:	6f031800 	svcvs	0x00031800
    32b0:	04000003 	streq	r0, [r0], #-3
    32b4:	00012e12 	andeq	r2, r1, r2, lsl lr
    32b8:	7f031c00 	svcvc	0x00031c00
    32bc:	04000003 	streq	r0, [r0], #-3
    32c0:	00012e13 	andeq	r2, r1, r3, lsl lr
    32c4:	05002000 	streq	r2, [r0, #-0]
    32c8:	0000a404 	andeq	sl, r0, r4, lsl #8
    32cc:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
    32d0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    32d4:	00014009 	andeq	r4, r1, r9
    32d8:	01400a00 	cmpeq	r0, r0, lsl #20
    32dc:	05000000 	streq	r0, [r0, #-0]
    32e0:	0000af04 	andeq	sl, r0, r4, lsl #30
    32e4:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
    32e8:	06000001 	streq	r0, [r0], -r1
    32ec:	00000625 	andeq	r0, r0, r5, lsr #12
    32f0:	00af1504 	adceq	r1, pc, r4, lsl #10
    32f4:	620b0000 	andvs	r0, fp, #0
    32f8:	62000001 	andvs	r0, r0, #1
    32fc:	0c000001 	stceq	0, cr0, [r0], {1}
    3300:	4c040500 	cfstr32mi	mvfx0, [r4], {-0}
    3304:	0d000001 	stceq	0, cr0, [r0, #-4]
    3308:	000004c4 	andeq	r0, r0, r4, asr #9
    330c:	01571c04 	cmpeq	r7, r4, lsl #24
    3310:	b50d0000 	strlt	r0, [sp, #-0]
    3314:	04000003 	streq	r0, [r0], #-3
    3318:	00012e1d 	andeq	r2, r1, sp, lsl lr
    331c:	005b0b00 	subseq	r0, fp, r0, lsl #22
    3320:	018f0000 	orreq	r0, pc, r0
    3324:	8f0e0000 	svchi	0x000e0000
    3328:	ff000001 			; <UNDEFINED> instruction: 0xff000001
    332c:	04040003 	streq	r0, [r4], #-3
    3330:	00039c07 	andeq	r9, r3, r7, lsl #24
    3334:	15660f00 	strbne	r0, [r6, #-3840]!	; 0xfffff100
    3338:	03050000 	movweq	r0, #20480	; 0x5000
    333c:	0000017e 	andeq	r0, r0, lr, ror r1
    3340:	80580305 	subshi	r0, r8, r5, lsl #6
    3344:	290f2000 	stmdbcs	pc, {sp}	; <UNPREDICTABLE>
    3348:	06000016 			; <UNDEFINED> instruction: 0x06000016
    334c:	00017e03 	andeq	r7, r1, r3, lsl #28
    3350:	58030500 	stmdapl	r3, {r8, sl}
    3354:	0f200084 	svceq	0x00200084
    3358:	00001606 	andeq	r1, r0, r6, lsl #12
    335c:	017e0307 	cmneq	lr, r7, lsl #6
    3360:	03050000 	movweq	r0, #20480	; 0x5000
    3364:	20008858 	andcs	r8, r0, r8, asr r8
    3368:	0015dc10 	andseq	sp, r5, r0, lsl ip
    336c:	9e080100 	adflse	f0, f0, f0
    3370:	05000000 	streq	r0, [r0, #-0]
    3374:	0054ac03 	subseq	sl, r4, r3, lsl #24
    3378:	158c1020 	strne	r1, [ip, #32]
    337c:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    3380:	0000009e 	muleq	r0, lr, r0
    3384:	54680305 	strbtpl	r0, [r8], #-773	; 0xfffffcfb
    3388:	58102000 	ldmdapl	r0, {sp}
    338c:	01000015 	tsteq	r0, r5, lsl r0
    3390:	00009e0a 	andeq	r9, r0, sl, lsl #28
    3394:	90030500 	andls	r0, r3, r0, lsl #10
    3398:	10200054 	eorne	r0, r0, r4, asr r0
    339c:	000015ca 	andeq	r1, r0, sl, asr #11
    33a0:	00620c01 	rsbeq	r0, r2, r1, lsl #24
    33a4:	03050000 	movweq	r0, #20480	; 0x5000
    33a8:	20005494 	mulcs	r0, r4, r4
    33ac:	00157a10 	andseq	r7, r5, r0, lsl sl
    33b0:	620d0100 	andvs	r0, sp, #0, 2
    33b4:	05000000 	streq	r0, [r0, #-0]
    33b8:	0054a003 	subseq	sl, r4, r3
    33bc:	16481020 	strbne	r1, [r8], -r0, lsr #32
    33c0:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    33c4:	00000062 	andeq	r0, r0, r2, rrx
    33c8:	54840305 	strpl	r0, [r4], #773	; 0x305
    33cc:	3c102000 	ldccc	0, cr2, [r0], {-0}
    33d0:	01000016 	tsteq	r0, r6, lsl r0
    33d4:	00014c11 	andeq	r4, r1, r1, lsl ip
    33d8:	44030500 	strmi	r0, [r3], #-1280	; 0xfffffb00
    33dc:	10200054 	eorne	r0, r0, r4, asr r0
    33e0:	000015ea 	andeq	r1, r0, sl, ror #11
    33e4:	00a41201 	adceq	r1, r4, r1, lsl #4
    33e8:	03050000 	movweq	r0, #20480	; 0x5000
    33ec:	20005478 	andcs	r5, r0, r8, ror r4
    33f0:	0000a40b 	andeq	sl, r0, fp, lsl #8
    33f4:	00026100 	andeq	r6, r2, r0, lsl #2
    33f8:	018f1100 	orreq	r1, pc, r0, lsl #2
    33fc:	00000000 	andeq	r0, r0, r0
    3400:	00161a10 	andseq	r1, r6, r0, lsl sl
    3404:	51130100 	tstpl	r3, r0, lsl #2
    3408:	05000002 	streq	r0, [r0, #-2]
    340c:	00546c03 	subseq	r6, r4, r3, lsl #24
    3410:	15f81220 	ldrbne	r1, [r8, #544]!	; 0x220
    3414:	22010000 	andcs	r0, r1, #0
    3418:	20002f0c 	andcs	r2, r0, ip, lsl #30
    341c:	00000074 	andeq	r0, r0, r4, ror r0
    3420:	02a79c01 	adceq	r9, r7, #256	; 0x100
    3424:	3c130000 	ldccc	0, cr0, [r3], {-0}
    3428:	01000016 	tsteq	r0, r6, lsl r0
    342c:	00016222 	andeq	r6, r1, r2, lsr #4
    3430:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3434:	00084f0f 	andeq	r4, r8, pc, lsl #30
    3438:	2e230100 	sufcss	f0, f3, f0
    343c:	05000001 	streq	r0, [r0, #-1]
    3440:	008c5803 	addeq	r5, ip, r3, lsl #16
    3444:	17140020 	ldrne	r0, [r4, -r0, lsr #32]
    3448:	01000004 	tsteq	r0, r4
    344c:	002e9814 	eoreq	r9, lr, r4, lsl r8
    3450:	00007420 	andeq	r7, r0, r0, lsr #8
    3454:	0f9c0100 	svceq	0x009c0100
    3458:	00000cc8 	andeq	r0, r0, r8, asr #25
    345c:	009e1601 	addseq	r1, lr, r1, lsl #12
    3460:	91020000 	mrsls	r0, (UNDEF: 2)
    3464:	0cd20f74 	ldcleq	15, cr0, [r2], {116}	; 0x74
    3468:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    346c:	0000009e 	muleq	r0, lr, r0
    3470:	0f709102 	svceq	0x00709102
    3474:	00000ac8 	andeq	r0, r0, r8, asr #21
    3478:	009e1c01 	addseq	r1, lr, r1, lsl #24
    347c:	91020000 	mrsls	r0, (UNDEF: 2)
    3480:	Address 0x00003480 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	01130200 	tsteq	r3, r0, lsl #4
  14:	0b3a0b0b 	bleq	e82c48 <startup-0x1f17d3b8>
  18:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  1c:	0d030000 	stceq	0, cr0, [r3, #-0]
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	000b3813 	andeq	r3, fp, r3, lsl r8
  2c:	00240400 	eoreq	r0, r4, r0, lsl #8
  30:	0b3e0b0b 	bleq	f82c64 <startup-0x1f07d39c>
  34:	00000e03 	andeq	r0, r0, r3, lsl #28
  38:	0b000f05 	bleq	3c54 <startup-0x1fffc3ac>
  3c:	0013490b 	andseq	r4, r3, fp, lsl #18
  40:	00160600 	andseq	r0, r6, r0, lsl #12
  44:	0b3a0e03 	bleq	e83858 <startup-0x1f17c7a8>
  48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  4c:	13070000 	movwne	r0, #28672	; 0x7000
  50:	0b0e0301 	bleq	380c5c <startup-0x1fc7f3a4>
  54:	3b0b3a0b 	blcc	2ce888 <startup-0x1fd31778>
  58:	0013010b 	andseq	r0, r3, fp, lsl #2
  5c:	00240800 	eoreq	r0, r4, r0, lsl #16
  60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
  64:	00000803 	andeq	r0, r0, r3, lsl #16
  68:	27011509 	strcs	r1, [r1, -r9, lsl #10]
  6c:	00130119 	andseq	r0, r3, r9, lsl r1
  70:	00050a00 	andeq	r0, r5, r0, lsl #20
  74:	00001349 	andeq	r1, r0, r9, asr #6
  78:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
  7c:	00130113 	andseq	r0, r3, r3, lsl r1
  80:	00210c00 	eoreq	r0, r1, r0, lsl #24
  84:	340d0000 	strcc	r0, [sp], #-0
  88:	3a0e0300 	bcc	380c90 <startup-0x1fc7f370>
  8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  90:	3c193f13 	ldccc	15, cr3, [r9], {19}
  94:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
  98:	13490021 	movtne	r0, #36897	; 0x9021
  9c:	0000052f 	andeq	r0, r0, pc, lsr #10
  a0:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
  a4:	000b2f13 	andeq	r2, fp, r3, lsl pc
  a8:	00341000 	eorseq	r1, r4, r0
  ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
  b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  b4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  b8:	34110000 	ldrcc	r0, [r1], #-0
  bc:	3a0e0300 	bcc	380cc4 <startup-0x1fc7f33c>
  c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  c4:	00180213 	andseq	r0, r8, r3, lsl r2
  c8:	00341200 	eorseq	r1, r4, r0, lsl #4
  cc:	0b3a0803 	bleq	e820e0 <startup-0x1f17df20>
  d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  d4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  d8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
  dc:	03193f01 	tsteq	r9, #1, 30
  e0:	3b0b3a0e 	blcc	2ce920 <startup-0x1fd316e0>
  e4:	1119270b 	tstne	r9, fp, lsl #14
  e8:	40061201 	andmi	r1, r6, r1, lsl #4
  ec:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  f0:	00001301 	andeq	r1, r0, r1, lsl #6
  f4:	03003414 	movweq	r3, #1044	; 0x414
  f8:	3b0b3a0e 	blcc	2ce938 <startup-0x1fd316c8>
  fc:	02134905 	andseq	r4, r3, #81920	; 0x14000
 100:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 104:	0111010b 	tsteq	r1, fp, lsl #2
 108:	00000612 	andeq	r0, r0, r2, lsl r6
 10c:	3f002e16 	svccc	0x00002e16
 110:	3a0e0319 	bcc	380d7c <startup-0x1fc7f284>
 114:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 118:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 11c:	96184006 	ldrls	r4, [r8], -r6
 120:	00001942 	andeq	r1, r0, r2, asr #18
 124:	3f002e17 	svccc	0x00002e17
 128:	3a0e0319 	bcc	380d94 <startup-0x1fc7f26c>
 12c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 130:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 134:	97184006 	ldrls	r4, [r8, -r6]
 138:	00001942 	andeq	r1, r0, r2, asr #18
 13c:	01110100 	tsteq	r1, r0, lsl #2
 140:	0b130e25 	bleq	4c39dc <startup-0x1fb3c624>
 144:	01110e03 	tsteq	r1, r3, lsl #28
 148:	17100612 			; <UNDEFINED> instruction: 0x17100612
 14c:	13020000 	movwne	r0, #8192	; 0x2000
 150:	3a0b0b01 	bcc	2c2d5c <startup-0x1fd3d2a4>
 154:	010b3b0b 	tsteq	fp, fp, lsl #22
 158:	03000013 	movweq	r0, #19
 15c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 160:	0b3b0b3a 	bleq	ec2e50 <startup-0x1f13d1b0>
 164:	0b381349 	bleq	e04e90 <startup-0x1f1fb170>
 168:	24040000 	strcs	r0, [r4], #-0
 16c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 170:	000e030b 	andeq	r0, lr, fp, lsl #6
 174:	000f0500 	andeq	r0, pc, r0, lsl #10
 178:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 17c:	16060000 	strne	r0, [r6], -r0
 180:	3a0e0300 	bcc	380d88 <startup-0x1fc7f278>
 184:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 188:	07000013 	smladeq	r0, r3, r0, r0
 18c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 190:	0b3a0b0b 	bleq	e82dc4 <startup-0x1f17d23c>
 194:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 198:	24080000 	strcs	r0, [r8], #-0
 19c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 1a0:	0008030b 	andeq	r0, r8, fp, lsl #6
 1a4:	01150900 	tsteq	r5, r0, lsl #18
 1a8:	13011927 	movwne	r1, #6439	; 0x1927
 1ac:	050a0000 	streq	r0, [sl, #-0]
 1b0:	00134900 	andseq	r4, r3, r0, lsl #18
 1b4:	01010b00 	tsteq	r1, r0, lsl #22
 1b8:	13011349 	movwne	r1, #4937	; 0x1349
 1bc:	210c0000 	mrscs	r0, (UNDEF: 12)
 1c0:	0d000000 	stceq	0, cr0, [r0, #-0]
 1c4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 1c8:	0b3b0b3a 	bleq	ec2eb8 <startup-0x1f13d148>
 1cc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 1d0:	0000193c 	andeq	r1, r0, ip, lsr r9
 1d4:	4700340e 	strmi	r3, [r0, -lr, lsl #8]
 1d8:	3b0b3a13 	blcc	2cea2c <startup-0x1fd315d4>
 1dc:	0018020b 	andseq	r0, r8, fp, lsl #4
 1e0:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
 1e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1e8:	0b3b0b3a 	bleq	ec2ed8 <startup-0x1f13d128>
 1ec:	01111927 	tsteq	r1, r7, lsr #18
 1f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1f4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 1f8:	10000013 	andne	r0, r0, r3, lsl r0
 1fc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 200:	0b3b0b3a 	bleq	ec2ef0 <startup-0x1f13d110>
 204:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 208:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 20c:	03193f01 	tsteq	r9, #1, 30
 210:	3b0b3a0e 	blcc	2cea50 <startup-0x1fd315b0>
 214:	1119270b 	tstne	r9, fp, lsl #14
 218:	40061201 	andmi	r1, r6, r1, lsl #4
 21c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 220:	01000000 	mrseq	r0, (UNDEF: 0)
 224:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 228:	0e030b13 	vmoveq.32	d3[0], r0
 22c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 230:	00001710 	andeq	r1, r0, r0, lsl r7
 234:	0b011302 	bleq	44e44 <startup-0x1ffbb1bc>
 238:	3b0b3a0b 	blcc	2cea6c <startup-0x1fd31594>
 23c:	0013010b 	andseq	r0, r3, fp, lsl #2
 240:	000d0300 	andeq	r0, sp, r0, lsl #6
 244:	0b3a0e03 	bleq	e83a58 <startup-0x1f17c5a8>
 248:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 24c:	00000b38 	andeq	r0, r0, r8, lsr fp
 250:	0b002404 	bleq	9268 <startup-0x1fff6d98>
 254:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 258:	0500000e 	streq	r0, [r0, #-14]
 25c:	0b0b000f 	bleq	2c02a0 <startup-0x1fd3fd60>
 260:	00001349 	andeq	r1, r0, r9, asr #6
 264:	03001606 	movweq	r1, #1542	; 0x606
 268:	3b0b3a0e 	blcc	2ceaa8 <startup-0x1fd31558>
 26c:	0013490b 	andseq	r4, r3, fp, lsl #18
 270:	01130700 	tsteq	r3, r0, lsl #14
 274:	0b0b0e03 	bleq	2c3a88 <startup-0x1fd3c578>
 278:	0b3b0b3a 	bleq	ec2f68 <startup-0x1f13d098>
 27c:	00001301 	andeq	r1, r0, r1, lsl #6
 280:	0b002408 	bleq	92a8 <startup-0x1fff6d58>
 284:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 288:	09000008 	stmdbeq	r0, {r3}
 28c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 290:	00001301 	andeq	r1, r0, r1, lsl #6
 294:	4900050a 	stmdbmi	r0, {r1, r3, r8, sl}
 298:	0b000013 	bleq	2ec <startup-0x1ffffd14>
 29c:	13490101 	movtne	r0, #37121	; 0x9101
 2a0:	00001301 	andeq	r1, r0, r1, lsl #6
 2a4:	0000210c 	andeq	r2, r0, ip, lsl #2
 2a8:	00340d00 	eorseq	r0, r4, r0, lsl #26
 2ac:	0b3a0e03 	bleq	e83ac0 <startup-0x1f17c540>
 2b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2b4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 2b8:	210e0000 	mrscs	r0, (UNDEF: 14)
 2bc:	2f134900 	svccs	0x00134900
 2c0:	0f00000b 	svceq	0x0000000b
 2c4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 2c8:	0b3b0b3a 	bleq	ec2fb8 <startup-0x1f13d048>
 2cc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2d0:	34100000 	ldrcc	r0, [r0], #-0
 2d4:	3a0e0300 	bcc	380edc <startup-0x1fc7f124>
 2d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2dc:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 2e0:	11000018 	tstne	r0, r8, lsl r0
 2e4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2e8:	0b3a0e03 	bleq	e83afc <startup-0x1f17c504>
 2ec:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2f4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 2f8:	00130119 	andseq	r0, r3, r9, lsl r1
 2fc:	00051200 	andeq	r1, r5, r0, lsl #4
 300:	0b3a0e03 	bleq	e83b14 <startup-0x1f17c4ec>
 304:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 308:	00001802 	andeq	r1, r0, r2, lsl #16
 30c:	03012e13 	movweq	r2, #7699	; 0x1e13
 310:	3b0b3a0e 	blcc	2ceb50 <startup-0x1fd314b0>
 314:	1119270b 	tstne	r9, fp, lsl #14
 318:	40061201 	andmi	r1, r6, r1, lsl #4
 31c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 320:	01000000 	mrseq	r0, (UNDEF: 0)
 324:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 328:	0e030b13 	vmoveq.32	d3[0], r0
 32c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 330:	00001710 	andeq	r1, r0, r0, lsl r7
 334:	0b002402 	bleq	9344 <startup-0x1fff6cbc>
 338:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 33c:	0300000e 	movweq	r0, #14
 340:	0b0b0113 	bleq	2c0794 <startup-0x1fd3f86c>
 344:	0b3b0b3a 	bleq	ec3034 <startup-0x1f13cfcc>
 348:	00001301 	andeq	r1, r0, r1, lsl #6
 34c:	03000d04 	movweq	r0, #3332	; 0xd04
 350:	3b0b3a0e 	blcc	2ceb90 <startup-0x1fd31470>
 354:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 358:	0500000b 	streq	r0, [r0, #-11]
 35c:	0b0b000f 	bleq	2c03a0 <startup-0x1fd3fc60>
 360:	00001349 	andeq	r1, r0, r9, asr #6
 364:	03001606 	movweq	r1, #1542	; 0x606
 368:	3b0b3a0e 	blcc	2ceba8 <startup-0x1fd31458>
 36c:	0013490b 	andseq	r4, r3, fp, lsl #18
 370:	01130700 	tsteq	r3, r0, lsl #14
 374:	0b0b0e03 	bleq	2c3b88 <startup-0x1fd3c478>
 378:	0b3b0b3a 	bleq	ec3068 <startup-0x1f13cf98>
 37c:	00001301 	andeq	r1, r0, r1, lsl #6
 380:	0b002408 	bleq	93a8 <startup-0x1fff6c58>
 384:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 388:	09000008 	stmdbeq	r0, {r3}
 38c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 390:	00001301 	andeq	r1, r0, r1, lsl #6
 394:	4900050a 	stmdbmi	r0, {r1, r3, r8, sl}
 398:	0b000013 	bleq	3ec <startup-0x1ffffc14>
 39c:	13490101 	movtne	r0, #37121	; 0x9101
 3a0:	00001301 	andeq	r1, r0, r1, lsl #6
 3a4:	0000210c 	andeq	r2, r0, ip, lsl #2
 3a8:	00340d00 	eorseq	r0, r4, r0, lsl #26
 3ac:	0b3a0e03 	bleq	e83bc0 <startup-0x1f17c440>
 3b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3b4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 3b8:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 3bc:	03193f01 	tsteq	r9, #1, 30
 3c0:	3b0b3a0e 	blcc	2cec00 <startup-0x1fd31400>
 3c4:	1119270b 	tstne	r9, fp, lsl #14
 3c8:	40061201 	andmi	r1, r6, r1, lsl #4
 3cc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 3d0:	050f0000 	streq	r0, [pc, #-0]	; 3d8 <startup-0x1ffffc28>
 3d4:	3a0e0300 	bcc	380fdc <startup-0x1fc7f024>
 3d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3dc:	00180213 	andseq	r0, r8, r3, lsl r2
 3e0:	00341000 	eorseq	r1, r4, r0
 3e4:	0b3a0e03 	bleq	e83bf8 <startup-0x1f17c408>
 3e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3ec:	00001802 	andeq	r1, r0, r2, lsl #16
 3f0:	01110100 	tsteq	r1, r0, lsl #2
 3f4:	0b130e25 	bleq	4c3c90 <startup-0x1fb3c370>
 3f8:	01110e03 	tsteq	r1, r3, lsl #28
 3fc:	17100612 			; <UNDEFINED> instruction: 0x17100612
 400:	13020000 	movwne	r0, #8192	; 0x2000
 404:	3a0b0b01 	bcc	2c3010 <startup-0x1fd3cff0>
 408:	010b3b0b 	tsteq	fp, fp, lsl #22
 40c:	03000013 	movweq	r0, #19
 410:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 414:	0b3b0b3a 	bleq	ec3104 <startup-0x1f13cefc>
 418:	0b381349 	bleq	e05144 <startup-0x1f1faebc>
 41c:	24040000 	strcs	r0, [r4], #-0
 420:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 424:	000e030b 	andeq	r0, lr, fp, lsl #6
 428:	000f0500 	andeq	r0, pc, r0, lsl #10
 42c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 430:	16060000 	strne	r0, [r6], -r0
 434:	3a0e0300 	bcc	38103c <startup-0x1fc7efc4>
 438:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 43c:	07000013 	smladeq	r0, r3, r0, r0
 440:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 444:	0b3a0b0b 	bleq	e83078 <startup-0x1f17cf88>
 448:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 44c:	24080000 	strcs	r0, [r8], #-0
 450:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 454:	0008030b 	andeq	r0, r8, fp, lsl #6
 458:	01150900 	tsteq	r5, r0, lsl #18
 45c:	13011927 	movwne	r1, #6439	; 0x1927
 460:	050a0000 	streq	r0, [sl, #-0]
 464:	00134900 	andseq	r4, r3, r0, lsl #18
 468:	01010b00 	tsteq	r1, r0, lsl #22
 46c:	13011349 	movwne	r1, #4937	; 0x1349
 470:	210c0000 	mrscs	r0, (UNDEF: 12)
 474:	0d000000 	stceq	0, cr0, [r0, #-0]
 478:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 47c:	0b3b0b3a 	bleq	ec316c <startup-0x1f13ce94>
 480:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 484:	0000193c 	andeq	r1, r0, ip, lsr r9
 488:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 48c:	000b2f13 	andeq	r2, fp, r3, lsl pc
 490:	00340f00 	eorseq	r0, r4, r0, lsl #30
 494:	0b3a0e03 	bleq	e83ca8 <startup-0x1f17c358>
 498:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 49c:	00001802 	andeq	r1, r0, r2, lsl #16
 4a0:	03003410 	movweq	r3, #1040	; 0x410
 4a4:	3b0b3a0e 	blcc	2cece4 <startup-0x1fd3131c>
 4a8:	3f13490b 	svccc	0x0013490b
 4ac:	00180219 	andseq	r0, r8, r9, lsl r2
 4b0:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 4b4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4b8:	0b3b0b3a 	bleq	ec31a8 <startup-0x1f13ce58>
 4bc:	01111927 	tsteq	r1, r7, lsr #18
 4c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4c4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 4c8:	12000013 	andne	r0, r0, #19
 4cc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 4d0:	0b3b0b3a 	bleq	ec31c0 <startup-0x1f13ce40>
 4d4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 4d8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 4dc:	3a0e0301 	bcc	3810e8 <startup-0x1fc7ef18>
 4e0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 4e4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 4e8:	96184006 	ldrls	r4, [r8], -r6
 4ec:	00001942 	andeq	r1, r0, r2, asr #18
 4f0:	01110100 	tsteq	r1, r0, lsl #2
 4f4:	0b130e25 	bleq	4c3d90 <startup-0x1fb3c270>
 4f8:	01110e03 	tsteq	r1, r3, lsl #28
 4fc:	17100612 			; <UNDEFINED> instruction: 0x17100612
 500:	13020000 	movwne	r0, #8192	; 0x2000
 504:	3a0b0b01 	bcc	2c3110 <startup-0x1fd3cef0>
 508:	010b3b0b 	tsteq	fp, fp, lsl #22
 50c:	03000013 	movweq	r0, #19
 510:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 514:	0b3b0b3a 	bleq	ec3204 <startup-0x1f13cdfc>
 518:	0b381349 	bleq	e05244 <startup-0x1f1fadbc>
 51c:	24040000 	strcs	r0, [r4], #-0
 520:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 524:	000e030b 	andeq	r0, lr, fp, lsl #6
 528:	000f0500 	andeq	r0, pc, r0, lsl #10
 52c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 530:	16060000 	strne	r0, [r6], -r0
 534:	3a0e0300 	bcc	38113c <startup-0x1fc7eec4>
 538:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 53c:	07000013 	smladeq	r0, r3, r0, r0
 540:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 544:	0b3a0b0b 	bleq	e83178 <startup-0x1f17ce88>
 548:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 54c:	24080000 	strcs	r0, [r8], #-0
 550:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 554:	0008030b 	andeq	r0, r8, fp, lsl #6
 558:	01150900 	tsteq	r5, r0, lsl #18
 55c:	13011927 	movwne	r1, #6439	; 0x1927
 560:	050a0000 	streq	r0, [sl, #-0]
 564:	00134900 	andseq	r4, r3, r0, lsl #18
 568:	01010b00 	tsteq	r1, r0, lsl #22
 56c:	13011349 	movwne	r1, #4937	; 0x1349
 570:	210c0000 	mrscs	r0, (UNDEF: 12)
 574:	0d000000 	stceq	0, cr0, [r0, #-0]
 578:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 57c:	0b3b0b3a 	bleq	ec326c <startup-0x1f13cd94>
 580:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 584:	0000193c 	andeq	r1, r0, ip, lsr r9
 588:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 58c:	000b2f13 	andeq	r2, fp, r3, lsl pc
 590:	00340f00 	eorseq	r0, r4, r0, lsl #30
 594:	0b3a0e03 	bleq	e83da8 <startup-0x1f17c258>
 598:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 59c:	00001802 	andeq	r1, r0, r2, lsl #16
 5a0:	03003410 	movweq	r3, #1040	; 0x410
 5a4:	3b0b3a0e 	blcc	2cede4 <startup-0x1fd3121c>
 5a8:	3f13490b 	svccc	0x0013490b
 5ac:	00180219 	andseq	r0, r8, r9, lsl r2
 5b0:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 5b4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 5b8:	0b3b0b3a 	bleq	ec32a8 <startup-0x1f13cd58>
 5bc:	01111927 	tsteq	r1, r7, lsr #18
 5c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 5c4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 5c8:	12000013 	andne	r0, r0, #19
 5cc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 5d0:	0b3b0b3a 	bleq	ec32c0 <startup-0x1f13cd40>
 5d4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 5d8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 5dc:	3a0e0301 	bcc	3811e8 <startup-0x1fc7ee18>
 5e0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 5e4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 5e8:	96184006 	ldrls	r4, [r8], -r6
 5ec:	00001942 	andeq	r1, r0, r2, asr #18
 5f0:	01110100 	tsteq	r1, r0, lsl #2
 5f4:	0b130e25 	bleq	4c3e90 <startup-0x1fb3c170>
 5f8:	01110e03 	tsteq	r1, r3, lsl #28
 5fc:	17100612 			; <UNDEFINED> instruction: 0x17100612
 600:	13020000 	movwne	r0, #8192	; 0x2000
 604:	3a0b0b01 	bcc	2c3210 <startup-0x1fd3cdf0>
 608:	010b3b0b 	tsteq	fp, fp, lsl #22
 60c:	03000013 	movweq	r0, #19
 610:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 614:	0b3b0b3a 	bleq	ec3304 <startup-0x1f13ccfc>
 618:	0b381349 	bleq	e05344 <startup-0x1f1facbc>
 61c:	24040000 	strcs	r0, [r4], #-0
 620:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 624:	000e030b 	andeq	r0, lr, fp, lsl #6
 628:	000f0500 	andeq	r0, pc, r0, lsl #10
 62c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 630:	16060000 	strne	r0, [r6], -r0
 634:	3a0e0300 	bcc	38123c <startup-0x1fc7edc4>
 638:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 63c:	07000013 	smladeq	r0, r3, r0, r0
 640:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 644:	0b3a0b0b 	bleq	e83278 <startup-0x1f17cd88>
 648:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 64c:	24080000 	strcs	r0, [r8], #-0
 650:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 654:	0008030b 	andeq	r0, r8, fp, lsl #6
 658:	01150900 	tsteq	r5, r0, lsl #18
 65c:	13011927 	movwne	r1, #6439	; 0x1927
 660:	050a0000 	streq	r0, [sl, #-0]
 664:	00134900 	andseq	r4, r3, r0, lsl #18
 668:	01010b00 	tsteq	r1, r0, lsl #22
 66c:	13011349 	movwne	r1, #4937	; 0x1349
 670:	210c0000 	mrscs	r0, (UNDEF: 12)
 674:	0d000000 	stceq	0, cr0, [r0, #-0]
 678:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 67c:	0b3b0b3a 	bleq	ec336c <startup-0x1f13cc94>
 680:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 684:	0000193c 	andeq	r1, r0, ip, lsr r9
 688:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 68c:	00052f13 	andeq	r2, r5, r3, lsl pc
 690:	00340f00 	eorseq	r0, r4, r0, lsl #30
 694:	0b3a1347 	bleq	e853b8 <startup-0x1f17ac48>
 698:	18020b3b 	stmdane	r2, {r0, r1, r3, r4, r5, r8, r9, fp}
 69c:	34100000 	ldrcc	r0, [r0], #-0
 6a0:	3a134700 	bcc	4d22a8 <startup-0x1fb2dd58>
 6a4:	0018020b 	andseq	r0, r8, fp, lsl #4
 6a8:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 6ac:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 6b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 6b4:	01111927 	tsteq	r1, r7, lsr #18
 6b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 6bc:	01194296 			; <UNDEFINED> instruction: 0x01194296
 6c0:	12000013 	andne	r0, r0, #19
 6c4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 6c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 6cc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 6d0:	34130000 	ldrcc	r0, [r3], #-0
 6d4:	3a0e0300 	bcc	3812dc <startup-0x1fc7ed24>
 6d8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 6dc:	00180213 	andseq	r0, r8, r3, lsl r2
 6e0:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
 6e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 6e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 6ec:	01111927 	tsteq	r1, r7, lsr #18
 6f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 6f4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 6f8:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 6fc:	08030034 	stmdaeq	r3, {r2, r4, r5}
 700:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 704:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 708:	34160000 	ldrcc	r0, [r6], #-0
 70c:	3a080300 	bcc	201314 <startup-0x1fdfecec>
 710:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 714:	17000013 	smladne	r0, r3, r0, r0
 718:	08030005 	stmdaeq	r3, {r0, r2}
 71c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 720:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 724:	0b180000 	bleq	60072c <startup-0x1f9ff8d4>
 728:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 72c:	19000006 	stmdbne	r0, {r1, r2}
 730:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 734:	0b3a0e03 	bleq	e83f48 <startup-0x1f17c0b8>
 738:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 73c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 740:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 744:	00130119 	andseq	r0, r3, r9, lsl r1
 748:	00051a00 	andeq	r1, r5, r0, lsl #20
 74c:	0b3a0803 	bleq	e82760 <startup-0x1f17d8a0>
 750:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 754:	00001802 	andeq	r1, r0, r2, lsl #16
 758:	0300051b 	movweq	r0, #1307	; 0x51b
 75c:	3b0b3a0e 	blcc	2cef9c <startup-0x1fd31064>
 760:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 764:	1c000018 	stcne	0, cr0, [r0], {24}
 768:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 76c:	0b3b0b3a 	bleq	ec345c <startup-0x1f13cba4>
 770:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 774:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 778:	03193f01 	tsteq	r9, #1, 30
 77c:	3b0b3a0e 	blcc	2cefbc <startup-0x1fd31044>
 780:	1119270b 	tstne	r9, fp, lsl #14
 784:	40061201 	andmi	r1, r6, r1, lsl #4
 788:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 78c:	00001301 	andeq	r1, r0, r1, lsl #6
 790:	0300341e 	movweq	r3, #1054	; 0x41e
 794:	3b0b3a08 	blcc	2cefbc <startup-0x1fd31044>
 798:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 79c:	1f000018 	svcne	0x00000018
 7a0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 7a4:	0b3a0e03 	bleq	e83fb8 <startup-0x1f17c048>
 7a8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 7ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
 7b0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 7b4:	20000019 	andcs	r0, r0, r9, lsl r0
 7b8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 7bc:	0b3a0e03 	bleq	e83fd0 <startup-0x1f17c030>
 7c0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 7c4:	01111349 	tsteq	r1, r9, asr #6
 7c8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 7cc:	01194296 			; <UNDEFINED> instruction: 0x01194296
 7d0:	21000013 	tstcs	r0, r3, lsl r0
 7d4:	0e03012e 	adfeqsp	f0, f3, #0.5
 7d8:	0b3b0b3a 	bleq	ec34c8 <startup-0x1f13cb38>
 7dc:	13491927 	movtne	r1, #39207	; 0x9927
 7e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 7e4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 7e8:	00130119 	andseq	r0, r3, r9, lsl r1
 7ec:	012e2200 			; <UNDEFINED> instruction: 0x012e2200
 7f0:	0b3a0e03 	bleq	e84004 <startup-0x1f17bffc>
 7f4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 7f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 7fc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 800:	00130119 	andseq	r0, r3, r9, lsl r1
 804:	002e2300 	eoreq	r2, lr, r0, lsl #6
 808:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 80c:	0b3b0b3a 	bleq	ec34fc <startup-0x1f13cb04>
 810:	01111927 	tsteq	r1, r7, lsr #18
 814:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 818:	00194297 	mulseq	r9, r7, r2
 81c:	11010000 	mrsne	r0, (UNDEF: 1)
 820:	130e2501 	movwne	r2, #58625	; 0xe501
 824:	110e030b 	tstne	lr, fp, lsl #6
 828:	10061201 	andne	r1, r6, r1, lsl #4
 82c:	02000017 	andeq	r0, r0, #23
 830:	0b0b0113 	bleq	2c0c84 <startup-0x1fd3f37c>
 834:	0b3b0b3a 	bleq	ec3524 <startup-0x1f13cadc>
 838:	00001301 	andeq	r1, r0, r1, lsl #6
 83c:	03000d03 	movweq	r0, #3331	; 0xd03
 840:	3b0b3a0e 	blcc	2cf080 <startup-0x1fd30f80>
 844:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 848:	0400000b 	streq	r0, [r0], #-11
 84c:	0b0b0024 	bleq	2c08e4 <startup-0x1fd3f71c>
 850:	0e030b3e 	vmoveq.16	d3[0], r0
 854:	0f050000 	svceq	0x00050000
 858:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 85c:	06000013 			; <UNDEFINED> instruction: 0x06000013
 860:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 864:	0b3b0b3a 	bleq	ec3554 <startup-0x1f13caac>
 868:	00001349 	andeq	r1, r0, r9, asr #6
 86c:	03011307 	movweq	r1, #4871	; 0x1307
 870:	3a0b0b0e 	bcc	2c34b0 <startup-0x1fd3cb50>
 874:	010b3b0b 	tsteq	fp, fp, lsl #22
 878:	08000013 	stmdaeq	r0, {r0, r1, r4}
 87c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 880:	0b3a0e03 	bleq	e84094 <startup-0x1f17bf6c>
 884:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 888:	06120111 			; <UNDEFINED> instruction: 0x06120111
 88c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 890:	00130119 	andseq	r0, r3, r9, lsl r1
 894:	00050900 	andeq	r0, r5, r0, lsl #18
 898:	0b3a0e03 	bleq	e840ac <startup-0x1f17bf54>
 89c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 8a0:	00001802 	andeq	r1, r0, r2, lsl #16
 8a4:	01110100 	tsteq	r1, r0, lsl #2
 8a8:	0b130e25 	bleq	4c4144 <startup-0x1fb3bebc>
 8ac:	01110e03 	tsteq	r1, r3, lsl #28
 8b0:	17100612 			; <UNDEFINED> instruction: 0x17100612
 8b4:	13020000 	movwne	r0, #8192	; 0x2000
 8b8:	3a0b0b01 	bcc	2c34c4 <startup-0x1fd3cb3c>
 8bc:	010b3b0b 	tsteq	fp, fp, lsl #22
 8c0:	03000013 	movweq	r0, #19
 8c4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 8c8:	0b3b0b3a 	bleq	ec35b8 <startup-0x1f13ca48>
 8cc:	0b381349 	bleq	e055f8 <startup-0x1f1faa08>
 8d0:	24040000 	strcs	r0, [r4], #-0
 8d4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 8d8:	000e030b 	andeq	r0, lr, fp, lsl #6
 8dc:	000f0500 	andeq	r0, pc, r0, lsl #10
 8e0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 8e4:	16060000 	strne	r0, [r6], -r0
 8e8:	3a0e0300 	bcc	3814f0 <startup-0x1fc7eb10>
 8ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 8f0:	07000013 	smladeq	r0, r3, r0, r0
 8f4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 8f8:	0b3a0e03 	bleq	e8410c <startup-0x1f17bef4>
 8fc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 900:	06120111 			; <UNDEFINED> instruction: 0x06120111
 904:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 908:	00130119 	andseq	r0, r3, r9, lsl r1
 90c:	00050800 	andeq	r0, r5, r0, lsl #16
 910:	0b3a0803 	bleq	e82924 <startup-0x1f17d6dc>
 914:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 918:	00001802 	andeq	r1, r0, r2, lsl #16
 91c:	03000509 	movweq	r0, #1289	; 0x509
 920:	3b0b3a0e 	blcc	2cf160 <startup-0x1fd30ea0>
 924:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 928:	0a000018 	beq	990 <startup-0x1ffff670>
 92c:	0b0b0024 	bleq	2c09c4 <startup-0x1fd3f63c>
 930:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 934:	01000000 	mrseq	r0, (UNDEF: 0)
 938:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 93c:	0e030b13 	vmoveq.32	d3[0], r0
 940:	06120111 			; <UNDEFINED> instruction: 0x06120111
 944:	00001710 	andeq	r1, r0, r0, lsl r7
 948:	0b011302 	bleq	45558 <startup-0x1ffbaaa8>
 94c:	3b0b3a0b 	blcc	2cf180 <startup-0x1fd30e80>
 950:	0013010b 	andseq	r0, r3, fp, lsl #2
 954:	000d0300 	andeq	r0, sp, r0, lsl #6
 958:	0b3a0e03 	bleq	e8416c <startup-0x1f17be94>
 95c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 960:	00000b38 	andeq	r0, r0, r8, lsr fp
 964:	0b002404 	bleq	997c <startup-0x1fff6684>
 968:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 96c:	0500000e 	streq	r0, [r0, #-14]
 970:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 974:	0b3b0b3a 	bleq	ec3664 <startup-0x1f13c99c>
 978:	00001349 	andeq	r1, r0, r9, asr #6
 97c:	3f012e06 	svccc	0x00012e06
 980:	3a0e0319 	bcc	3815ec <startup-0x1fc7ea14>
 984:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 988:	11134919 	tstne	r3, r9, lsl r9
 98c:	40061201 	andmi	r1, r6, r1, lsl #4
 990:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 994:	00001301 	andeq	r1, r0, r1, lsl #6
 998:	03000507 	movweq	r0, #1287	; 0x507
 99c:	3b0b3a08 	blcc	2cf1c4 <startup-0x1fd30e3c>
 9a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 9a4:	08000018 	stmdaeq	r0, {r3, r4}
 9a8:	08030034 	stmdaeq	r3, {r2, r4, r5}
 9ac:	0b3b0b3a 	bleq	ec369c <startup-0x1f13c964>
 9b0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 9b4:	24090000 	strcs	r0, [r9], #-0
 9b8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 9bc:	0008030b 	andeq	r0, r8, fp, lsl #6
 9c0:	002e0a00 	eoreq	r0, lr, r0, lsl #20
 9c4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 9c8:	0b3b0b3a 	bleq	ec36b8 <startup-0x1f13c948>
 9cc:	13491927 	movtne	r1, #39207	; 0x9927
 9d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 9d4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 9d8:	0b000019 	bleq	a44 <startup-0x1ffff5bc>
 9dc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 9e0:	0b3a0e03 	bleq	e841f4 <startup-0x1f17be0c>
 9e4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 9e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 9ec:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 9f0:	00000019 	andeq	r0, r0, r9, lsl r0
 9f4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 9f8:	030b130e 	movweq	r1, #45838	; 0xb30e
 9fc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 a00:	00171006 	andseq	r1, r7, r6
 a04:	01130200 	tsteq	r3, r0, lsl #4
 a08:	0b3a0b0b 	bleq	e8363c <startup-0x1f17c9c4>
 a0c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 a10:	0d030000 	stceq	0, cr0, [r3, #-0]
 a14:	3a0e0300 	bcc	38161c <startup-0x1fc7e9e4>
 a18:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 a1c:	000b3813 	andeq	r3, fp, r3, lsl r8
 a20:	00240400 	eoreq	r0, r4, r0, lsl #8
 a24:	0b3e0b0b 	bleq	f83658 <startup-0x1f07c9a8>
 a28:	00000e03 	andeq	r0, r0, r3, lsl #28
 a2c:	0b000f05 	bleq	4648 <startup-0x1fffb9b8>
 a30:	0013490b 	andseq	r4, r3, fp, lsl #18
 a34:	00160600 	andseq	r0, r6, r0, lsl #12
 a38:	0b3a0e03 	bleq	e8424c <startup-0x1f17bdb4>
 a3c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 a40:	13070000 	movwne	r0, #28672	; 0x7000
 a44:	0b0e0301 	bleq	381650 <startup-0x1fc7e9b0>
 a48:	3b0b3a0b 	blcc	2cf27c <startup-0x1fd30d84>
 a4c:	0013010b 	andseq	r0, r3, fp, lsl #2
 a50:	00240800 	eoreq	r0, r4, r0, lsl #16
 a54:	0b3e0b0b 	bleq	f83688 <startup-0x1f07c978>
 a58:	00000803 	andeq	r0, r0, r3, lsl #16
 a5c:	27011509 	strcs	r1, [r1, -r9, lsl #10]
 a60:	00130119 	andseq	r0, r3, r9, lsl r1
 a64:	00050a00 	andeq	r0, r5, r0, lsl #20
 a68:	00001349 	andeq	r1, r0, r9, asr #6
 a6c:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
 a70:	00130113 	andseq	r0, r3, r3, lsl r1
 a74:	00210c00 	eoreq	r0, r1, r0, lsl #24
 a78:	340d0000 	strcc	r0, [sp], #-0
 a7c:	3a0e0300 	bcc	381684 <startup-0x1fc7e97c>
 a80:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 a84:	3c193f13 	ldccc	15, cr3, [r9], {19}
 a88:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
 a8c:	13490021 	movtne	r0, #36897	; 0x9021
 a90:	0000052f 	andeq	r0, r0, pc, lsr #10
 a94:	3f012e0f 	svccc	0x00012e0f
 a98:	3a0e0319 	bcc	381704 <startup-0x1fc7e8fc>
 a9c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 aa0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 aa4:	96184006 	ldrls	r4, [r8], -r6
 aa8:	13011942 	movwne	r1, #6466	; 0x1942
 aac:	34100000 	ldrcc	r0, [r0], #-0
 ab0:	3a080300 	bcc	2016b8 <startup-0x1fdfe948>
 ab4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 ab8:	00180213 	andseq	r0, r8, r3, lsl r2
 abc:	00341100 	eorseq	r1, r4, r0, lsl #2
 ac0:	0b3a0e03 	bleq	e842d4 <startup-0x1f17bd2c>
 ac4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 ac8:	00001802 	andeq	r1, r0, r2, lsl #16
 acc:	49002112 	stmdbmi	r0, {r1, r4, r8, sp}
 ad0:	000b2f13 	andeq	r2, fp, r3, lsl pc
 ad4:	00051300 	andeq	r1, r5, r0, lsl #6
 ad8:	0b3a0e03 	bleq	e842ec <startup-0x1f17bd14>
 adc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 ae0:	00001802 	andeq	r1, r0, r2, lsl #16
 ae4:	3f002e14 	svccc	0x00002e14
 ae8:	3a0e0319 	bcc	381754 <startup-0x1fc7e8ac>
 aec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 af0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 af4:	96184006 	ldrls	r4, [r8], -r6
 af8:	00001942 	andeq	r1, r0, r2, asr #18
 afc:	3f002e15 	svccc	0x00002e15
 b00:	3a0e0319 	bcc	38176c <startup-0x1fc7e894>
 b04:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 b08:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 b0c:	97184006 	ldrls	r4, [r8, -r6]
 b10:	00001942 	andeq	r1, r0, r2, asr #18
 b14:	03000516 	movweq	r0, #1302	; 0x516
 b18:	3b0b3a08 	blcc	2cf340 <startup-0x1fd30cc0>
 b1c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 b20:	17000018 	smladne	r0, r8, r0, r0
 b24:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 b28:	0b3a0e03 	bleq	e8433c <startup-0x1f17bcc4>
 b2c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 b30:	01111349 	tsteq	r1, r9, asr #6
 b34:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 b38:	01194296 			; <UNDEFINED> instruction: 0x01194296
 b3c:	18000013 	stmdane	r0, {r0, r1, r4}
 b40:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 b44:	0b3a0e03 	bleq	e84358 <startup-0x1f17bca8>
 b48:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 b4c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 b50:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 b54:	00130119 	andseq	r0, r3, r9, lsl r1
 b58:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
 b5c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 b60:	0b3b0b3a 	bleq	ec3850 <startup-0x1f13c7b0>
 b64:	01111927 	tsteq	r1, r7, lsr #18
 b68:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 b6c:	00194297 	mulseq	r9, r7, r2
 b70:	11010000 	mrsne	r0, (UNDEF: 1)
 b74:	130e2501 	movwne	r2, #58625	; 0xe501
 b78:	110e030b 	tstne	lr, fp, lsl #6
 b7c:	10061201 	andne	r1, r6, r1, lsl #4
 b80:	02000017 	andeq	r0, r0, #23
 b84:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 b88:	0b3a0b0b 	bleq	e837bc <startup-0x1f17c844>
 b8c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 b90:	0d030000 	stceq	0, cr0, [r3, #-0]
 b94:	3a0e0300 	bcc	38179c <startup-0x1fc7e864>
 b98:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 b9c:	000b3813 	andeq	r3, fp, r3, lsl r8
 ba0:	000f0400 	andeq	r0, pc, r0, lsl #8
 ba4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 ba8:	24050000 	strcs	r0, [r5], #-0
 bac:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 bb0:	000e030b 	andeq	r0, lr, fp, lsl #6
 bb4:	00240600 	eoreq	r0, r4, r0, lsl #12
 bb8:	0b3e0b0b 	bleq	f837ec <startup-0x1f07c814>
 bbc:	00000803 	andeq	r0, r0, r3, lsl #16
 bc0:	27011507 	strcs	r1, [r1, -r7, lsl #10]
 bc4:	00130119 	andseq	r0, r3, r9, lsl r1
 bc8:	00050800 	andeq	r0, r5, r0, lsl #16
 bcc:	00001349 	andeq	r1, r0, r9, asr #6
 bd0:	03001609 	movweq	r1, #1545	; 0x609
 bd4:	3b0b3a0e 	blcc	2cf414 <startup-0x1fd30bec>
 bd8:	0013490b 	andseq	r4, r3, fp, lsl #18
 bdc:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
 be0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 be4:	0b3b0b3a 	bleq	ec38d4 <startup-0x1f13c72c>
 be8:	01111927 	tsteq	r1, r7, lsr #18
 bec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 bf0:	01194297 			; <UNDEFINED> instruction: 0x01194297
 bf4:	0b000013 	bleq	c48 <startup-0x1ffff3b8>
 bf8:	08030005 	stmdaeq	r3, {r0, r2}
 bfc:	0b3b0b3a 	bleq	ec38ec <startup-0x1f13c714>
 c00:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 c04:	050c0000 	streq	r0, [ip, #-0]
 c08:	3a0e0300 	bcc	381810 <startup-0x1fc7e7f0>
 c0c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 c10:	00180213 	andseq	r0, r8, r3, lsl r2
 c14:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
 c18:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 c1c:	0b3b0b3a 	bleq	ec390c <startup-0x1f13c6f4>
 c20:	01111927 	tsteq	r1, r7, lsr #18
 c24:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 c28:	00194296 	mulseq	r9, r6, r2
 c2c:	00340e00 	eorseq	r0, r4, r0, lsl #28
 c30:	0b3a0e03 	bleq	e84444 <startup-0x1f17bbbc>
 c34:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 c38:	00001802 	andeq	r1, r0, r2, lsl #16
 c3c:	01110100 	tsteq	r1, r0, lsl #2
 c40:	0b130e25 	bleq	4c44dc <startup-0x1fb3bb24>
 c44:	01110e03 	tsteq	r1, r3, lsl #28
 c48:	17100612 			; <UNDEFINED> instruction: 0x17100612
 c4c:	13020000 	movwne	r0, #8192	; 0x2000
 c50:	3a0b0b01 	bcc	2c385c <startup-0x1fd3c7a4>
 c54:	010b3b0b 	tsteq	fp, fp, lsl #22
 c58:	03000013 	movweq	r0, #19
 c5c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 c60:	0b3b0b3a 	bleq	ec3950 <startup-0x1f13c6b0>
 c64:	0b381349 	bleq	e05990 <startup-0x1f1fa670>
 c68:	24040000 	strcs	r0, [r4], #-0
 c6c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 c70:	000e030b 	andeq	r0, lr, fp, lsl #6
 c74:	000f0500 	andeq	r0, pc, r0, lsl #10
 c78:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 c7c:	16060000 	strne	r0, [r6], -r0
 c80:	3a0e0300 	bcc	381888 <startup-0x1fc7e778>
 c84:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 c88:	07000013 	smladeq	r0, r3, r0, r0
 c8c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 c90:	0b3a0b0b 	bleq	e838c4 <startup-0x1f17c73c>
 c94:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 c98:	24080000 	strcs	r0, [r8], #-0
 c9c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 ca0:	0008030b 	andeq	r0, r8, fp, lsl #6
 ca4:	01150900 	tsteq	r5, r0, lsl #18
 ca8:	13011927 	movwne	r1, #6439	; 0x1927
 cac:	050a0000 	streq	r0, [sl, #-0]
 cb0:	00134900 	andseq	r4, r3, r0, lsl #18
 cb4:	01010b00 	tsteq	r1, r0, lsl #22
 cb8:	13011349 	movwne	r1, #4937	; 0x1349
 cbc:	210c0000 	mrscs	r0, (UNDEF: 12)
 cc0:	0d000000 	stceq	0, cr0, [r0, #-0]
 cc4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 cc8:	0b3b0b3a 	bleq	ec39b8 <startup-0x1f13c648>
 ccc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 cd0:	0000193c 	andeq	r1, r0, ip, lsr r9
 cd4:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 cd8:	00052f13 	andeq	r2, r5, r3, lsl pc
 cdc:	00340f00 	eorseq	r0, r4, r0, lsl #30
 ce0:	0b3a0e03 	bleq	e844f4 <startup-0x1f17bb0c>
 ce4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 ce8:	00001802 	andeq	r1, r0, r2, lsl #16
 cec:	03003410 	movweq	r3, #1040	; 0x410
 cf0:	3b0b3a0e 	blcc	2cf530 <startup-0x1fd30ad0>
 cf4:	3f13490b 	svccc	0x0013490b
 cf8:	00180219 	andseq	r0, r8, r9, lsl r2
 cfc:	00211100 	eoreq	r1, r1, r0, lsl #2
 d00:	0b2f1349 	bleq	bc5a2c <startup-0x1f43a5d4>
 d04:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 d08:	03193f01 	tsteq	r9, #1, 30
 d0c:	3b0b3a0e 	blcc	2cf54c <startup-0x1fd30ab4>
 d10:	1119270b 	tstne	r9, fp, lsl #14
 d14:	40061201 	andmi	r1, r6, r1, lsl #4
 d18:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 d1c:	00001301 	andeq	r1, r0, r1, lsl #6
 d20:	03000513 	movweq	r0, #1299	; 0x513
 d24:	3b0b3a0e 	blcc	2cf564 <startup-0x1fd30a9c>
 d28:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 d2c:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
 d30:	0e03012e 	adfeqsp	f0, f3, #0.5
 d34:	0b3b0b3a 	bleq	ec3a24 <startup-0x1f13c5dc>
 d38:	01111927 	tsteq	r1, r7, lsr #18
 d3c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 d40:	00194296 	mulseq	r9, r6, r2
 d44:	11010000 	mrsne	r0, (UNDEF: 1)
 d48:	130e2501 	movwne	r2, #58625	; 0xe501
 d4c:	110e030b 	tstne	lr, fp, lsl #6
 d50:	10061201 	andne	r1, r6, r1, lsl #4
 d54:	02000017 	andeq	r0, r0, #23
 d58:	0b0b0113 	bleq	2c11ac <startup-0x1fd3ee54>
 d5c:	0b3b0b3a 	bleq	ec3a4c <startup-0x1f13c5b4>
 d60:	00001301 	andeq	r1, r0, r1, lsl #6
 d64:	03000d03 	movweq	r0, #3331	; 0xd03
 d68:	3b0b3a0e 	blcc	2cf5a8 <startup-0x1fd30a58>
 d6c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 d70:	0400000b 	streq	r0, [r0], #-11
 d74:	0b0b0024 	bleq	2c0e0c <startup-0x1fd3f1f4>
 d78:	0e030b3e 	vmoveq.16	d3[0], r0
 d7c:	0f050000 	svceq	0x00050000
 d80:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 d84:	06000013 			; <UNDEFINED> instruction: 0x06000013
 d88:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 d8c:	0b3b0b3a 	bleq	ec3a7c <startup-0x1f13c584>
 d90:	00001349 	andeq	r1, r0, r9, asr #6
 d94:	03011307 	movweq	r1, #4871	; 0x1307
 d98:	3a0b0b0e 	bcc	2c39d8 <startup-0x1fd3c628>
 d9c:	010b3b0b 	tsteq	fp, fp, lsl #22
 da0:	08000013 	stmdaeq	r0, {r0, r1, r4}
 da4:	0b0b0024 	bleq	2c0e3c <startup-0x1fd3f1c4>
 da8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 dac:	15090000 	strne	r0, [r9, #-0]
 db0:	01192701 	tsteq	r9, r1, lsl #14
 db4:	0a000013 	beq	e08 <startup-0x1ffff1f8>
 db8:	13490005 	movtne	r0, #36869	; 0x9005
 dbc:	010b0000 	mrseq	r0, (UNDEF: 11)
 dc0:	01134901 	tsteq	r3, r1, lsl #18
 dc4:	0c000013 	stceq	0, cr0, [r0], {19}
 dc8:	00000021 	andeq	r0, r0, r1, lsr #32
 dcc:	0300340d 	movweq	r3, #1037	; 0x40d
 dd0:	3b0b3a0e 	blcc	2cf610 <startup-0x1fd309f0>
 dd4:	3f13490b 	svccc	0x0013490b
 dd8:	00193c19 	andseq	r3, r9, r9, lsl ip
 ddc:	00210e00 	eoreq	r0, r1, r0, lsl #28
 de0:	052f1349 	streq	r1, [pc, #-841]!	; a9f <startup-0x1ffff561>
 de4:	340f0000 	strcc	r0, [pc], #-0	; dec <startup-0x1ffff214>
 de8:	3a0e0300 	bcc	3819f0 <startup-0x1fc7e610>
 dec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 df0:	00180213 	andseq	r0, r8, r3, lsl r2
 df4:	00341000 	eorseq	r1, r4, r0
 df8:	0b3a0e03 	bleq	e8460c <startup-0x1f17b9f4>
 dfc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 e00:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 e04:	21110000 	tstcs	r1, r0
 e08:	2f134900 	svccs	0x00134900
 e0c:	1200000b 	andne	r0, r0, #11
 e10:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 e14:	0b3a0e03 	bleq	e84628 <startup-0x1f17b9d8>
 e18:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 e1c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 e20:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 e24:	00130119 	andseq	r0, r3, r9, lsl r1
 e28:	00051300 	andeq	r1, r5, r0, lsl #6
 e2c:	0b3a0e03 	bleq	e84640 <startup-0x1f17b9c0>
 e30:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 e34:	00001802 	andeq	r1, r0, r2, lsl #16
 e38:	03012e14 	movweq	r2, #7700	; 0x1e14
 e3c:	3b0b3a0e 	blcc	2cf67c <startup-0x1fd30984>
 e40:	1119270b 	tstne	r9, fp, lsl #14
 e44:	40061201 	andmi	r1, r6, r1, lsl #4
 e48:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 e4c:	Address 0x00000e4c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000f54 	andeq	r0, r0, r4, asr pc
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	09120002 	ldmdbeq	r2, {r1}
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000f64 	andcs	r0, r0, r4, ror #30
  3c:	00000056 	andeq	r0, r0, r6, asr r0
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	0af60002 	beq	ffd8005c <firstTime.4040+0xdfd77404>
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000fbc 			; <UNDEFINED> instruction: 0x20000fbc
  5c:	000002a8 	andeq	r0, r0, r8, lsr #5
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	10250002 	eorne	r0, r5, r2
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20001264 	andcs	r1, r0, r4, ror #4
  7c:	000000fc 	strdeq	r0, [r0], -ip
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	11fe0002 	mvnsne	r0, r2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20001360 	andcs	r1, r0, r0, ror #6
  9c:	00000364 	andeq	r0, r0, r4, ror #6
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	18430002 	stmdane	r3, {r1}^
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200016c4 	andcs	r1, r0, r4, asr #13
  bc:	00000238 	andeq	r0, r0, r8, lsr r2
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	1cdf0002 	ldclne	0, cr0, [pc], {2}
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	200018fc 	strdcs	r1, [r0], -ip
  dc:	00000e44 	andeq	r0, r0, r4, asr #28
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	25820002 	strcs	r0, [r2, #2]
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	20002740 	andcs	r2, r0, r0, asr #14
  fc:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	26860002 	strcs	r0, [r6], r2
 110:	00040000 	andeq	r0, r4, r0
 114:	00000000 	andeq	r0, r0, r0
 118:	20002768 	andcs	r2, r0, r8, ror #14
 11c:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	274d0002 	strbcs	r0, [sp, -r2]
 130:	00040000 	andeq	r0, r4, r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20002790 	mulcs	r0, r0, r7
 13c:	0000006c 	andeq	r0, r0, ip, rrx
	...
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	28860002 	stmcs	r6, {r1}
 150:	00040000 	andeq	r0, r4, r0
 154:	00000000 	andeq	r0, r0, r0
 158:	200027fc 	strdcs	r2, [r0], -ip
 15c:	00000520 	andeq	r0, r0, r0, lsr #10
	...
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
 16c:	2d770002 	ldclcs	0, cr0, [r7, #-8]!
 170:	00040000 	andeq	r0, r4, r0
 174:	00000000 	andeq	r0, r0, r0
 178:	20002d1c 	andcs	r2, r0, ip, lsl sp
 17c:	00000094 	muleq	r0, r4, r0
	...
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	2ebb0002 	cdpcs	0, 11, cr0, cr11, cr2, {0}
 190:	00040000 	andeq	r0, r4, r0
 194:	00000000 	andeq	r0, r0, r0
 198:	20002db0 			; <UNDEFINED> instruction: 0x20002db0
 19c:	000000e8 	andeq	r0, r0, r8, ror #1
	...
 1a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ac:	319f0002 	orrscc	r0, pc, r2
 1b0:	00040000 	andeq	r0, r4, r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	20002e98 	mulcs	r0, r8, lr
 1bc:	000000e8 	andeq	r0, r0, r8, ror #1
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000f64 	andcs	r0, r0, r4, ror #30
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000002de 	ldrdeq	r0, [r0], -lr
       4:	017d0002 	cmneq	sp, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	43010000 	movwmi	r0, #4096	; 0x1000
      1c:	6f6d2f3a 	svcvs	0x006d2f3a
      20:	2f632f70 	svccs	0x00632f70
      24:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
      28:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
      2c:	6f697461 	svcvs	0x00697461
      30:	2f72656e 	svccs	0x0072656e
      34:	73504944 	cmpvc	r0, #68, 18	; 0x110000
      38:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
      3c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
      40:	74730000 	ldrbtvc	r0, [r3], #-0
      44:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
      48:	00632e70 	rsbeq	r2, r3, r0, ror lr
      4c:	73000001 	movwvc	r0, #1
      50:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
      54:	00682e65 	rsbeq	r2, r8, r5, ror #28
      58:	69000001 	stmdbvs	r0, {r0}
      5c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
      60:	0100682e 	tsteq	r0, lr, lsr #16
      64:	61670000 	cmnvs	r7, r0
      68:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
      6c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
      70:	0100682e 	tsteq	r0, lr, lsr #16
      74:	72670000 	rsbvc	r0, r7, #0
      78:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
      7c:	682e7363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, ip, sp, lr}
      80:	00000100 	andeq	r0, r0, r0, lsl #2
      84:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
      88:	5f726574 	svcpl	0x00726574
      8c:	63616c62 	cmnvs	r1, #25088	; 0x6200
      90:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
      94:	0001006d 	andeq	r0, r1, sp, rrx
      98:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
      9c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
      a0:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
      a4:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
      a8:	01006d62 	tsteq	r0, r2, ror #26
      ac:	6f6d0000 	svcvs	0x006d0000
      b0:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
      b4:	72675f72 	rsbvc	r5, r7, #456	; 0x1c8
      b8:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
      bc:	01006d62 	tsteq	r0, r2, ror #26
      c0:	72700000 	rsbsvc	r0, r0, #0
      c4:	5f737365 	svcpl	0x00737365
      c8:	63616c62 	cmnvs	r1, #25088	; 0x6200
      cc:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
      d0:	0001006d 	andeq	r0, r1, sp, rrx
      d4:	65727000 	ldrbvs	r7, [r2, #-0]!
      d8:	6c5f7373 	mrrcvs	3, 7, r7, pc, cr3	; <UNPREDICTABLE>
      dc:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
      e0:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
      e4:	00000100 	andeq	r0, r0, r0, lsl #2
      e8:	73657270 	cmnvc	r5, #112, 4
      ec:	72675f73 	rsbvc	r5, r7, #460	; 0x1cc
      f0:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
      f4:	01006d62 	tsteq	r0, r2, ror #26
      f8:	61630000 	cmnvs	r3, r0
      fc:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     100:	616c625f 	cmnvs	ip, pc, asr r2
     104:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     108:	01006d62 	tsteq	r0, r2, ror #26
     10c:	61630000 	cmnvs	r3, r0
     110:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     114:	6172675f 	cmnvs	r2, pc, asr r7
     118:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     11c:	0001006d 	andeq	r0, r1, sp, rrx
     120:	73616300 	cmnvc	r1, #0, 6
     124:	5f656c74 	svcpl	0x00656c74
     128:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     12c:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     130:	0001006d 	andeq	r0, r1, sp, rrx
     134:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     138:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
     13c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     140:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     144:	00000100 	andeq	r0, r0, r0, lsl #2
     148:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     14c:	72675f65 	rsbvc	r5, r7, #404	; 0x194
     150:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     154:	01006d62 	tsteq	r0, r2, ror #26
     158:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
     15c:	5f656c74 	svcpl	0x00656c74
     160:	63616c62 	cmnvs	r1, #25088	; 0x6200
     164:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     168:	0001006d 	andeq	r0, r1, sp, rrx
     16c:	6f6c7300 	svcvs	0x006c7300
     170:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
     174:	682e7478 	stmdavs	lr!, {r3, r4, r5, r6, sl, ip, sp, lr}
     178:	00000100 	andeq	r0, r0, r0, lsl #2
     17c:	782e6762 	stmdavc	lr!, {r1, r5, r6, r8, r9, sl, sp, lr}
     180:	01006d62 	tsteq	r0, r2, ror #26
     184:	00000000 	andeq	r0, r0, r0
     188:	00000205 	andeq	r0, r0, r5, lsl #4
     18c:	33032000 	movwcc	r2, #12288	; 0x3000
     190:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
     194:	01010003 	tsteq	r1, r3
     198:	10020500 	andne	r0, r2, r0, lsl #10
     19c:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
     1a0:	3d2f0128 	stfccs	f0, [pc, #-160]!	; 108 <startup-0x1ffffef8>
     1a4:	03303030 	teqeq	r0, #48	; 0x30
     1a8:	2f3d742c 	svccs	0x003d742c
     1ac:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     1b0:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     1b4:	2f3e672f 	svccs	0x003e672f
     1b8:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     1bc:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     1c0:	2f3d672f 	svccs	0x003d672f
     1c4:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     1c8:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     1cc:	2f3d672f 	svccs	0x003d672f
     1d0:	52023f67 	andpl	r3, r2, #412	; 0x19c
     1d4:	4a0a0317 	bmi	280e38 <startup-0x1fd7f1c8>
     1d8:	7583322f 	strvc	r3, [r3, #559]	; 0x22f
     1dc:	595959bb 	ldmdbpl	r9, {r0, r1, r3, r4, r5, r7, r8, fp, ip, lr}^
     1e0:	bb75835c 	bllt	1d60f58 <startup-0x1e29f0a8>
     1e4:	835c6759 	cmphi	ip, #23330816	; 0x1640000
     1e8:	5959bb75 	ldmdbpl	r9, {r0, r2, r4, r5, r6, r8, r9, fp, ip, sp, pc}^
     1ec:	bb75ad5c 	bllt	1d6b764 <startup-0x1e29489c>
     1f0:	675b5959 			; <UNDEFINED> instruction: 0x675b5959
     1f4:	83678583 	cmnhi	r7, #549453824	; 0x20c00000
     1f8:	83836785 	orrhi	r6, r3, #34865152	; 0x2140000
     1fc:	83836785 	orrhi	r6, r3, #34865152	; 0x2140000
     200:	68686885 	stmdavs	r8!, {r0, r2, r7, fp, sp, lr}^
     204:	83835968 	orrhi	r5, r3, #104, 18	; 0x1a0000
     208:	83838384 	orrhi	r8, r3, #132, 6	; 0x10000002
     20c:	83838384 	orrhi	r8, r3, #132, 6	; 0x10000002
     210:	83838385 	orrhi	r8, r3, #335544322	; 0x14000002
     214:	83838384 	orrhi	r8, r3, #132, 6	; 0x10000002
     218:	75820f03 	strvc	r0, [r2, #3843]	; 0xf03
     21c:	75757575 	ldrbvc	r7, [r5, #-1397]!	; 0xfffffa8b
     220:	75135002 	ldrvc	r5, [r3, #-2]
     224:	67757575 			; <UNDEFINED> instruction: 0x67757575
     228:	2f2f7675 	svccs	0x002f7675
     22c:	59595930 	ldmdbpl	r9, {r4, r5, r8, fp, ip, lr}^
     230:	67f7415b 	ubfxvs	r4, fp, #2, #24
     234:	3d3d4f3a 	ldccc	15, cr4, [sp, #-232]!	; 0xffffff18
     238:	93675a33 	cmnls	r7, #208896	; 0x33000
     23c:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
     240:	42676767 	rsbmi	r6, r7, #27000832	; 0x19c0000
     244:	01040200 	mrseq	r0, R12_usr
     248:	83068206 	movwhi	r8, #25094	; 0x6206
     24c:	753083bb 	ldrvc	r8, [r0, #-955]!	; 0xfffffc45
     250:	c9bbc991 	ldmibgt	fp!, {r0, r4, r7, r8, fp, lr, pc}
     254:	c9d7c9c9 	ldmibgt	r7, {r0, r3, r6, r7, r8, fp, lr, pc}^
     258:	2108c9f3 	strdcs	ip, [r8, -r3]
     25c:	c91308c9 	ldmdbgt	r3, {r0, r3, r6, r7, fp}
     260:	42022f08 	andmi	r2, r2, #8, 30
     264:	c9130813 	ldmdbgt	r3, {r0, r1, r4, fp}
     268:	08c92108 	stmiaeq	r9, {r3, r8, sp}^
     26c:	3d08bb4b 	vstrcc	d11, [r8, #-300]	; 0xfffffed4
     270:	4b3d4bca 	blmi	f531a0 <startup-0x1f0ace60>
     274:	3d59323d 	lfmcc	f3, 2, [r9, #-244]	; 0xffffff0c
     278:	bb323d4b 	bllt	c8f7ac <startup-0x1f370854>
     27c:	bbbbbbbb 	bllt	feeef170 <firstTime.4040+0xdeee6518>
     280:	24e775e5 	strbtcs	r7, [r7], #1509	; 0x5e5
     284:	67765959 			; <UNDEFINED> instruction: 0x67765959
     288:	003f675b 	eorseq	r6, pc, fp, asr r7	; <UNPREDICTABLE>
     28c:	06010402 	streq	r0, [r1], -r2, lsl #8
     290:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
     294:	02009002 	andeq	r9, r0, #2
     298:	06900304 	ldreq	r0, [r0], r4, lsl #6
     29c:	68845967 	stmvs	r4, {r0, r1, r2, r5, r6, r8, fp, ip, lr}
     2a0:	f4916767 			; <UNDEFINED> instruction: 0xf4916767
     2a4:	02598383 	subseq	r8, r9, #201326594	; 0xc000002
     2a8:	afbd1528 	svcge	0x00bd1528
     2ac:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
     2b0:	90060104 	andls	r0, r6, r4, lsl #2
     2b4:	02040200 	andeq	r0, r4, #0, 4
     2b8:	5b4b064a 	blpl	12c1be8 <startup-0x1ed3e418>
     2bc:	243f67c9 	ldrtcs	r6, [pc], #-1993	; 2c4 <startup-0x1ffffd3c>
     2c0:	3f4b3d3d 	svccc	0x004b3d3d
     2c4:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
     2c8:	84838483 	strhi	r8, [r3], #1155	; 0x483
     2cc:	b8038483 	stmdalt	r3, {r0, r1, r7, sl, pc}
     2d0:	3103207f 	tstcc	r3, pc, ror r0
     2d4:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
     2d8:	7ef30301 	cdpvc	3, 15, cr0, cr3, cr1, {0}
     2dc:	000e0220 	andeq	r0, lr, r0, lsr #4
     2e0:	008a0101 	addeq	r0, sl, r1, lsl #2
     2e4:	00020000 	andeq	r0, r2, r0
     2e8:	00000070 	andeq	r0, r0, r0, ror r0
     2ec:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     2f0:	0101000d 	tsteq	r1, sp
     2f4:	00000101 	andeq	r0, r0, r1, lsl #2
     2f8:	00000100 	andeq	r0, r0, r0, lsl #2
     2fc:	2f3a4301 	svccs	0x003a4301
     300:	2f706f6d 	svccs	0x00706f6d
     304:	6f4d2f63 	svcvs	0x004d2f63
     308:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     30c:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     310:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     314:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     318:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     31c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     320:	0000432f 	andeq	r4, r0, pc, lsr #6
     324:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     328:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     32c:	632e7463 			; <UNDEFINED> instruction: 0x632e7463
     330:	00000100 	andeq	r0, r0, r0, lsl #2
     334:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     338:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
     33c:	00000100 	andeq	r0, r0, r0, lsl #2
     340:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     344:	00682e65 	rsbeq	r2, r8, r5, ror #28
     348:	67000001 	strvs	r0, [r0, -r1]
     34c:	6f656d61 	svcvs	0x00656d61
     350:	63656a62 	cmnvs	r5, #401408	; 0x62000
     354:	00682e74 	rsbeq	r2, r8, r4, ror lr
     358:	00000001 	andeq	r0, r0, r1
     35c:	64020500 	strvs	r0, [r2], #-1280	; 0xfffffb00
     360:	1920000f 	stmdbne	r0!, {r0, r1, r2, r3}
     364:	594b4c4c 	stmdbpl	fp, {r2, r3, r6, sl, fp, lr}^
     368:	02ca3d67 	sbceq	r3, sl, #6592	; 0x19c0
     36c:	01010004 	tsteq	r1, r4
     370:	00000184 	andeq	r0, r0, r4, lsl #3
     374:	01370002 	teqeq	r7, r2
     378:	01020000 	mrseq	r0, (UNDEF: 2)
     37c:	000d0efb 	strdeq	r0, [sp], -fp
     380:	01010101 	tsteq	r1, r1, lsl #2
     384:	01000000 	mrseq	r0, (UNDEF: 0)
     388:	43010000 	movwmi	r0, #4096	; 0x1000
     38c:	6f6d2f3a 	svcvs	0x006d2f3a
     390:	2f632f70 	svccs	0x00632f70
     394:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     398:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     39c:	6f697461 	svcvs	0x00697461
     3a0:	2f72656e 	svccs	0x0072656e
     3a4:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     3a8:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     3ac:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     3b0:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     3b4:	632e6572 			; <UNDEFINED> instruction: 0x632e6572
     3b8:	00000100 	andeq	r0, r0, r0, lsl #2
     3bc:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     3c0:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
     3c4:	00000100 	andeq	r0, r0, r0, lsl #2
     3c8:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     3cc:	00682e65 	rsbeq	r2, r8, r5, ror #28
     3d0:	67000001 	strvs	r0, [r0, -r1]
     3d4:	6f656d61 	svcvs	0x00656d61
     3d8:	63656a62 	cmnvs	r5, #401408	; 0x62000
     3dc:	00682e74 	rsbeq	r2, r8, r4, ror lr
     3e0:	66000001 	strvs	r0, [r0], -r1
     3e4:	5f657269 	svcpl	0x00657269
     3e8:	63616c62 	cmnvs	r1, #25088	; 0x6200
     3ec:	2e325f6b 	cdpcs	15, 3, cr5, cr2, cr11, {3}
     3f0:	006d6278 	rsbeq	r6, sp, r8, ror r2
     3f4:	66000001 	strvs	r0, [r0], -r1
     3f8:	31657269 	cmncc	r5, r9, ror #4
     3fc:	6172675f 	cmnvs	r2, pc, asr r7
     400:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     404:	0001006d 	andeq	r0, r1, sp, rrx
     408:	72696600 	rsbvc	r6, r9, #0, 12
     40c:	6c5f3165 	ldfvse	f3, [pc], {101}	; 0x65
     410:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     414:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     418:	00000100 	andeq	r0, r0, r0, lsl #2
     41c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     420:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
     424:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     428:	01006d62 	tsteq	r0, r2, ror #26
     42c:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     430:	5f326572 	svcpl	0x00326572
     434:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     438:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     43c:	0001006d 	andeq	r0, r1, sp, rrx
     440:	72696600 	rsbvc	r6, r9, #0, 12
     444:	675f3365 	ldrbvs	r3, [pc, -r5, ror #6]
     448:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     44c:	006d6278 	rsbeq	r6, sp, r8, ror r2
     450:	66000001 	strvs	r0, [r0], -r1
     454:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     458:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     45c:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     460:	01006d62 	tsteq	r0, r2, ror #26
     464:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     468:	5f346572 	svcpl	0x00346572
     46c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     470:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     474:	00000100 	andeq	r0, r0, r0, lsl #2
     478:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     47c:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     480:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     484:	006d6278 	rsbeq	r6, sp, r8, ror r2
     488:	66000001 	strvs	r0, [r0], -r1
     48c:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
     490:	6172675f 	cmnvs	r2, pc, asr r7
     494:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     498:	0001006d 	andeq	r0, r1, sp, rrx
     49c:	72696600 	rsbvc	r6, r9, #0, 12
     4a0:	6c5f3565 	cfldr64vs	mvdx3, [pc], {101}	; 0x65
     4a4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     4a8:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     4ac:	00000100 	andeq	r0, r0, r0, lsl #2
     4b0:	02050000 	andeq	r0, r5, #0
     4b4:	20000fbc 			; <UNDEFINED> instruction: 0x20000fbc
     4b8:	3d013003 	stccc	0, cr3, [r1, #-12]
     4bc:	2f3e672f 	svccs	0x003e672f
     4c0:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     4c4:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     4c8:	2f3e672f 	svccs	0x003e672f
     4cc:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     4d0:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     4d4:	2f3e672f 	svccs	0x003e672f
     4d8:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     4dc:	1446023d 	strbne	r0, [r6], #-573	; 0xfffffdc3
     4e0:	3e2f4b4c 	vnmulcc.f64	d4, d15, d12
     4e4:	5959594b 	ldmdbpl	r9, {r0, r1, r3, r6, r8, fp, ip, lr}^
     4e8:	9191915a 	orrsls	r9, r1, sl, asr r1
     4ec:	3d3e9391 	ldccc	3, cr9, [lr, #-580]!	; 0xfffffdbc
     4f0:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
     4f4:	01010031 	tsteq	r1, r1, lsr r0
     4f8:	000000a6 	andeq	r0, r0, r6, lsr #1
     4fc:	006c0002 	rsbeq	r0, ip, r2
     500:	01020000 	mrseq	r0, (UNDEF: 2)
     504:	000d0efb 	strdeq	r0, [sp], -fp
     508:	01010101 	tsteq	r1, r1, lsl #2
     50c:	01000000 	mrseq	r0, (UNDEF: 0)
     510:	43010000 	movwmi	r0, #4096	; 0x1000
     514:	6f6d2f3a 	svcvs	0x006d2f3a
     518:	2f632f70 	svccs	0x00632f70
     51c:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     520:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     524:	6f697461 	svcvs	0x00697461
     528:	2f72656e 	svccs	0x0072656e
     52c:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     530:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     534:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     538:	6c700000 	ldclvs	0, cr0, [r0], #-0
     53c:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
     540:	0100632e 	tsteq	r0, lr, lsr #6
     544:	70730000 	rsbsvc	r0, r3, r0
     548:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     54c:	0100682e 	tsteq	r0, lr, lsr #16
     550:	6d690000 	stclvs	0, cr0, [r9, #-0]
     554:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
     558:	00010068 	andeq	r0, r1, r8, rrx
     55c:	6d616700 	stclvs	7, cr6, [r1, #-0]
     560:	6a626f65 	bvs	189c2fc <startup-0x1e763d04>
     564:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
     568:	00010068 	andeq	r0, r1, r8, rrx
     56c:	05000000 	streq	r0, [r0, #-0]
     570:	00126402 	andseq	r6, r2, r2, lsl #8
     574:	594b1720 	stmdbpl	fp, {r5, r8, r9, sl, ip}^
     578:	00cf3d67 	sbceq	r3, pc, r7, ror #26
     57c:	06010402 	streq	r0, [r1], -r2, lsl #8
     580:	5b59064a 	blpl	1641eb0 <startup-0x1e9be150>
     584:	01040200 	mrseq	r0, R12_usr
     588:	59064a06 	stmdbpl	r6, {r1, r2, r9, fp, lr}
     58c:	0402005b 	streq	r0, [r2], #-91	; 0xffffffa5
     590:	06740601 	ldrbteq	r0, [r4], -r1, lsl #12
     594:	4b765b75 	blmi	1d97370 <startup-0x1e268c90>
     598:	675b4b68 	ldrbvs	r4, [fp, -r8, ror #22]
     59c:	000a0268 	andeq	r0, sl, r8, ror #4
     5a0:	01dd0101 	bicseq	r0, sp, r1, lsl #2
     5a4:	00020000 	andeq	r0, r2, r0
     5a8:	00000182 	andeq	r0, r0, r2, lsl #3
     5ac:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     5b0:	0101000d 	tsteq	r1, sp
     5b4:	00000101 	andeq	r0, r0, r1, lsl #2
     5b8:	00000100 	andeq	r0, r0, r0, lsl #2
     5bc:	2f3a4301 	svccs	0x003a4301
     5c0:	2f706f6d 	svccs	0x00706f6d
     5c4:	6f4d2f63 	svcvs	0x004d2f63
     5c8:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     5cc:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     5d0:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     5d4:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     5d8:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     5dc:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     5e0:	0000432f 	andeq	r4, r0, pc, lsr #6
     5e4:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     5e8:	0100632e 	tsteq	r0, lr, lsr #6
     5ec:	70730000 	rsbsvc	r0, r3, r0
     5f0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     5f4:	0100682e 	tsteq	r0, lr, lsr #16
     5f8:	6d690000 	stclvs	0, cr0, [r9, #-0]
     5fc:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
     600:	00010068 	andeq	r0, r1, r8, rrx
     604:	6d616700 	stclvs	7, cr6, [r1, #-0]
     608:	6a626f65 	bvs	189c3a4 <startup-0x1e763c5c>
     60c:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
     610:	00010068 	andeq	r0, r1, r8, rrx
     614:	72696200 	rsbvc	r6, r9, #0, 4
     618:	625f3164 	subsvs	r3, pc, #100, 2
     61c:	6b63616c 	blvs	18d8bd4 <startup-0x1e72742c>
     620:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     624:	00000100 	andeq	r0, r0, r0, lsl #2
     628:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     62c:	72675f31 	rsbvc	r5, r7, #49, 30	; 0xc4
     630:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     634:	01006d62 	tsteq	r0, r2, ror #26
     638:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     63c:	5f316472 	svcpl	0x00316472
     640:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     644:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     648:	0001006d 	andeq	r0, r1, sp, rrx
     64c:	72696200 	rsbvc	r6, r9, #0, 4
     650:	625f3264 	subsvs	r3, pc, #100, 4	; 0x40000006
     654:	6b63616c 	blvs	18d8c0c <startup-0x1e7273f4>
     658:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     65c:	00000100 	andeq	r0, r0, r0, lsl #2
     660:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     664:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
     668:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     66c:	01006d62 	tsteq	r0, r2, ror #26
     670:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     674:	5f326472 	svcpl	0x00326472
     678:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     67c:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     680:	0001006d 	andeq	r0, r1, sp, rrx
     684:	72696200 	rsbvc	r6, r9, #0, 4
     688:	625f3364 	subsvs	r3, pc, #100, 6	; 0x90000001
     68c:	6b63616c 	blvs	18d8c44 <startup-0x1e7273bc>
     690:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     694:	00000100 	andeq	r0, r0, r0, lsl #2
     698:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     69c:	72675f33 	rsbvc	r5, r7, #51, 30	; 0xcc
     6a0:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     6a4:	01006d62 	tsteq	r0, r2, ror #26
     6a8:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     6ac:	5f336472 	svcpl	0x00336472
     6b0:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     6b4:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     6b8:	0001006d 	andeq	r0, r1, sp, rrx
     6bc:	72696200 	rsbvc	r6, r9, #0, 4
     6c0:	625f3464 	subsvs	r3, pc, #100, 8	; 0x64000000
     6c4:	6b63616c 	blvs	18d8c7c <startup-0x1e727384>
     6c8:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     6cc:	00000100 	andeq	r0, r0, r0, lsl #2
     6d0:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     6d4:	72675f34 	rsbvc	r5, r7, #52, 30	; 0xd0
     6d8:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     6dc:	01006d62 	tsteq	r0, r2, ror #26
     6e0:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     6e4:	5f346472 	svcpl	0x00346472
     6e8:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     6ec:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     6f0:	0001006d 	andeq	r0, r1, sp, rrx
     6f4:	72696200 	rsbvc	r6, r9, #0, 4
     6f8:	625f3564 	subsvs	r3, pc, #100, 10	; 0x19000000
     6fc:	6b63616c 	blvs	18d8cb4 <startup-0x1e72734c>
     700:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     704:	00000100 	andeq	r0, r0, r0, lsl #2
     708:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     70c:	72675f35 	rsbvc	r5, r7, #53, 30	; 0xd4
     710:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     714:	01006d62 	tsteq	r0, r2, ror #26
     718:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     71c:	5f356472 	svcpl	0x00356472
     720:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     724:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     728:	0001006d 	andeq	r0, r1, sp, rrx
     72c:	05000000 	streq	r0, [r0, #-0]
     730:	00136002 	andseq	r6, r3, r2
     734:	013f0320 	teqeq	pc, r0, lsr #6
     738:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     73c:	2f3d672f 	svccs	0x003d672f
     740:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     744:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     748:	2f3f672f 	svccs	0x003f672f
     74c:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     750:	3e672f3d 	mcrcc	15, 3, r2, cr7, cr13, {1}
     754:	2f3d672f 	svccs	0x003d672f
     758:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     75c:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     760:	2f3d672f 	svccs	0x003d672f
     764:	5e023d67 	cdppl	13, 0, cr3, cr2, cr7, {3}
     768:	2f4b4c14 	svccs	0x004b4c14
     76c:	59594b3e 	ldmdbpl	r9, {r1, r2, r3, r4, r5, r8, r9, fp, lr}^
     770:	915c5959 	cmpls	ip, r9, asr r9
     774:	93919191 	orrsls	r9, r1, #1073741860	; 0x40000024
     778:	3d3d3e94 	ldccc	14, cr3, [sp, #-592]!	; 0xfffffdb0
     77c:	3d023d3d 	stccc	13, cr3, [r2, #-244]	; 0xffffff0c
     780:	61010100 	mrsvs	r0, (UNDEF: 17)
     784:	02000001 	andeq	r0, r0, #1
     788:	00011c00 	andeq	r1, r1, r0, lsl #24
     78c:	fb010200 	blx	40f96 <startup-0x1ffbf06a>
     790:	01000d0e 	tsteq	r0, lr, lsl #26
     794:	00010101 	andeq	r0, r1, r1, lsl #2
     798:	00010000 	andeq	r0, r1, r0
     79c:	3a430100 	bcc	10c0ba4 <startup-0x1ef3f45c>
     7a0:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     7a4:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 6f0 <startup-0x1ffff910>
     7a8:	616c706f 	cmnvs	ip, pc, rrx
     7ac:	61726f62 	cmnvs	r2, r2, ror #30
     7b0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     7b4:	442f7265 	strtmi	r7, [pc], #-613	; 7bc <startup-0x1ffff844>
     7b8:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     7bc:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     7c0:	00432f68 	subeq	r2, r3, r8, ror #30
     7c4:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     7c8:	632e6863 			; <UNDEFINED> instruction: 0x632e6863
     7cc:	00000100 	andeq	r0, r0, r0, lsl #2
     7d0:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     7d4:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
     7d8:	00000100 	andeq	r0, r0, r0, lsl #2
     7dc:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     7e0:	00682e65 	rsbeq	r2, r8, r5, ror #28
     7e4:	67000001 	strvs	r0, [r0, -r1]
     7e8:	6f656d61 	svcvs	0x00656d61
     7ec:	63656a62 	cmnvs	r5, #401408	; 0x62000
     7f0:	00682e74 	rsbeq	r2, r8, r4, ror lr
     7f4:	77000001 	strvc	r0, [r0, -r1]
     7f8:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     7fc:	6c625f31 	stclvs	15, cr5, [r2], #-196	; 0xffffff3c
     800:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     804:	006d6278 	rsbeq	r6, sp, r8, ror r2
     808:	77000001 	strvc	r0, [r0, -r1]
     80c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     810:	72675f31 	rsbvc	r5, r7, #49, 30	; 0xc4
     814:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     818:	01006d62 	tsteq	r0, r2, ror #26
     81c:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     820:	31686374 	smccc	34356	; 0x8634
     824:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     828:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     82c:	01006d62 	tsteq	r0, r2, ror #26
     830:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     834:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     838:	616c625f 	cmnvs	ip, pc, asr r2
     83c:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     840:	01006d62 	tsteq	r0, r2, ror #26
     844:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     848:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     84c:	6172675f 	cmnvs	r2, pc, asr r7
     850:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     854:	0001006d 	andeq	r0, r1, sp, rrx
     858:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     85c:	5f326863 	svcpl	0x00326863
     860:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     864:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     868:	0001006d 	andeq	r0, r1, sp, rrx
     86c:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     870:	5f336863 	svcpl	0x00336863
     874:	63616c62 	cmnvs	r1, #25088	; 0x6200
     878:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     87c:	0001006d 	andeq	r0, r1, sp, rrx
     880:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     884:	5f336863 	svcpl	0x00336863
     888:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     88c:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     890:	00000100 	andeq	r0, r0, r0, lsl #2
     894:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     898:	6c5f3368 	mrrcvs	3, 6, r3, pc, cr8	; <UNPREDICTABLE>
     89c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     8a0:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     8a4:	00000100 	andeq	r0, r0, r0, lsl #2
     8a8:	02050000 	andeq	r0, r5, #0
     8ac:	200016c4 	andcs	r1, r0, r4, asr #13
     8b0:	3e012803 	cdpcc	8, 0, cr2, cr1, cr3, {0}
     8b4:	2f3d672f 	svccs	0x003d672f
     8b8:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     8bc:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     8c0:	2f3d672f 	svccs	0x003d672f
     8c4:	672f3f67 	strvs	r3, [pc, -r7, ror #30]!
     8c8:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     8cc:	023e672f 	eorseq	r6, lr, #12320768	; 0xbc0000
     8d0:	4b4c143a 	blmi	13059c0 <startup-0x1ecfa640>
     8d4:	594b3e2f 	stmdbpl	fp, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}^
     8d8:	91915b59 	orrsls	r5, r1, r9, asr fp
     8dc:	3d3e9491 	cfldrscc	mvf9, [lr, #-580]!	; 0xfffffdbc
     8e0:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
     8e4:	01010029 	tsteq	r1, r9, lsr #32
     8e8:	0000034e 	andeq	r0, r0, lr, asr #6
     8ec:	007c0002 	rsbseq	r0, ip, r2
     8f0:	01020000 	mrseq	r0, (UNDEF: 2)
     8f4:	000d0efb 	strdeq	r0, [sp], -fp
     8f8:	01010101 	tsteq	r1, r1, lsl #2
     8fc:	01000000 	mrseq	r0, (UNDEF: 0)
     900:	43010000 	movwmi	r0, #4096	; 0x1000
     904:	6f6d2f3a 	svcvs	0x006d2f3a
     908:	2f632f70 	svccs	0x00632f70
     90c:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     910:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     914:	6f697461 	svcvs	0x00697461
     918:	2f72656e 	svccs	0x0072656e
     91c:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     920:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     924:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     928:	72670000 	rsbvc	r0, r7, #0
     92c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
     930:	632e7363 			; <UNDEFINED> instruction: 0x632e7363
     934:	00000100 	andeq	r0, r0, r0, lsl #2
     938:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     93c:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
     940:	00000100 	andeq	r0, r0, r0, lsl #2
     944:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     948:	00682e65 	rsbeq	r2, r8, r5, ror #28
     94c:	67000001 	strvs	r0, [r0, -r1]
     950:	6f656d61 	svcvs	0x00656d61
     954:	63656a62 	cmnvs	r5, #401408	; 0x62000
     958:	00682e74 	rsbeq	r2, r8, r4, ror lr
     95c:	67000001 	strvs	r0, [r0, -r1]
     960:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
     964:	2e736369 	cdpcs	3, 7, cr6, cr3, cr9, {3}
     968:	00010068 	andeq	r0, r1, r8, rrx
     96c:	05000000 	streq	r0, [r0, #-0]
     970:	0018fc02 	andseq	pc, r8, r2, lsl #24
     974:	3d301520 	cfldr32cc	mvfx1, [r0, #-128]!	; 0xffffff80
     978:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
     97c:	06010402 	streq	r0, [r1], -r2, lsl #8
     980:	3d670620 	stclcc	6, cr0, [r7, #-128]!	; 0xffffff80
     984:	3d3d30a0 	ldccc	0, cr3, [sp, #-640]!	; 0xfffffd80
     988:	02003d3d 	andeq	r3, r0, #3904	; 0xf40
     98c:	20060104 	andcs	r0, r6, r4, lsl #2
     990:	a03d6706 	eorsge	r6, sp, r6, lsl #14
     994:	2f2f214b 	svccs	0x002f214b
     998:	4c5e2a2f 	mrrcmi	10, 2, r2, lr, cr15
     99c:	5b57214f 	blpl	15c8ee0 <startup-0x1ea37120>
     9a0:	4c4a0903 	mcrrmi	9, 0, r0, sl, cr3	; <UNPREDICTABLE>
     9a4:	03040200 	movweq	r0, #16896	; 0x4200
     9a8:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     9ac:	02005703 	andeq	r5, r0, #786432	; 0xc0000
     9b0:	3c060104 	stfccs	f0, [r6], {4}
     9b4:	2f674c06 	svccs	0x00674c06
     9b8:	4b2f674b 	blmi	bda6ec <startup-0x1f425914>
     9bc:	68a14b4b 	stmiavs	r1!, {r0, r1, r3, r6, r8, r9, fp, lr}
     9c0:	59839159 	stmibpl	r3, {r0, r3, r4, r6, r8, ip, pc}
     9c4:	d7596876 			; <UNDEFINED> instruction: 0xd7596876
     9c8:	67675983 	strbvs	r5, [r7, -r3, lsl #19]!
     9cc:	03741203 	cmneq	r4, #805306368	; 0x30000000
     9d0:	1203206e 	andne	r2, r3, #110	; 0x6e
     9d4:	2070034a 	rsbscs	r0, r0, sl, asr #6
     9d8:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
     9dc:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
     9e0:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
     9e4:	3d3d3e4c 	ldccc	14, cr3, [sp, #-304]!	; 0xfffffed0
     9e8:	3d313d3d 	ldccc	13, cr3, [r1, #-244]!	; 0xffffff0c
     9ec:	313d752f 	teqcc	sp, pc, lsr #10
     9f0:	274a7903 	strbcs	r7, [sl, -r3, lsl #18]
     9f4:	67bc3d23 	ldrvs	r3, [ip, r3, lsr #26]!
     9f8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     9fc:	2f3d2f59 	svccs	0x003d2f59
     a00:	4b3e3d59 	blmi	f8ff6c <startup-0x1f070094>
     a04:	3d4b303d 	stclcc	0, cr3, [fp, #-244]	; 0xffffff0c
     a08:	67bc3d31 			; <UNDEFINED> instruction: 0x67bc3d31
     a0c:	915a5959 	cmpls	sl, r9, asr r9
     a10:	3d2f594b 			; <UNDEFINED> instruction: 0x3d2f594b
     a14:	3d593e2f 	ldclcc	14, cr3, [r9, #-188]	; 0xffffff44
     a18:	313d5930 	teqcc	sp, r0, lsr r9
     a1c:	673d3d3d 			; <UNDEFINED> instruction: 0x673d3d3d
     a20:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
     a24:	914b833d 	cmpls	fp, sp, lsr r3
     a28:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
     a2c:	3d2f4c83 	stccc	12, cr4, [pc, #-524]!	; 828 <startup-0x1ffff7d8>
     a30:	3d3d3d3e 	ldccc	13, cr3, [sp, #-248]!	; 0xffffff08
     a34:	3e3d3d3e 	mrccc	13, 1, r3, cr13, cr14, {1}
     a38:	4b4b4b4b 	blmi	12d376c <startup-0x1ed2c894>
     a3c:	3e3d3d4b 	cdpcc	13, 3, cr3, cr13, cr11, {2}
     a40:	004c9f4b 	subeq	r9, ip, fp, asr #30
     a44:	4b030402 	blmi	c1a54 <startup-0x1ff3e5ac>
     a48:	03040200 	movweq	r0, #16896	; 0x4200
     a4c:	04020049 	streq	r0, [r2], #-73	; 0xffffffb7
     a50:	00580601 	subseq	r0, r8, r1, lsl #12
     a54:	06020402 	streq	r0, [r2], -r2, lsl #8
     a58:	04020046 	streq	r0, [r2], #-70	; 0xffffffba
     a5c:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
     a60:	2f764d52 	svccs	0x00764d52
     a64:	01040200 	mrseq	r0, R12_usr
     a68:	02004a06 	andeq	r4, r0, #24576	; 0x6000
     a6c:	004a0204 	subeq	r0, sl, r4, lsl #4
     a70:	4a030402 	bmi	c1a80 <startup-0x1ff3e580>
     a74:	13084c06 	movwne	r4, #35846	; 0x8c06
     a78:	bc3e3d3d 	ldclt	13, cr3, [lr], #-244	; 0xffffff0c
     a7c:	3d76763d 	ldclcc	6, cr7, [r6, #-244]!	; 0xffffff0c
     a80:	23d71fd9 	bicscs	r1, r7, #868	; 0x364
     a84:	d71fd93d 			; <UNDEFINED> instruction: 0xd71fd93d
     a88:	1fd93d23 	svcne	0x00d93d23
     a8c:	2e6103d7 	mcrcs	3, 3, r0, cr1, cr7, {6}
     a90:	af202303 	svcge	0x00202303
     a94:	04020069 	streq	r0, [r2], #-105	; 0xffffff97
     a98:	004a0601 	subeq	r0, sl, r1, lsl #12
     a9c:	4a020402 	bmi	81aac <startup-0x1ff7e554>
     aa0:	03040200 	movweq	r0, #16896	; 0x4200
     aa4:	754b064a 	strbvc	r0, [fp, #-1610]	; 0xfffff9b6
     aa8:	59591308 	ldmdbpl	r9, {r3, r8, r9, ip}^
     aac:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
     ab0:	763d5b59 			; <UNDEFINED> instruction: 0x763d5b59
     ab4:	4b4c4b3d 	blmi	13137b0 <startup-0x1ecec850>
     ab8:	9fd8c93e 	svcls	0x00d8c93e
     abc:	a0ae3dca 	adcge	r3, lr, sl, asr #27
     ac0:	03ac5e03 			; <UNDEFINED> instruction: 0x03ac5e03
     ac4:	4c842023 	stcmi	0, cr2, [r4], {35}	; 0x23
     ac8:	0200592f 	andeq	r5, r0, #770048	; 0xbc000
     acc:	58060104 	stmdapl	r6, {r2, r8}
     ad0:	02040200 	andeq	r0, r4, #0, 4
     ad4:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
     ad8:	02002004 	andeq	r2, r0, #4
     adc:	3d060404 	cfstrscc	mvf0, [r6, #-16]
     ae0:	0075d759 	rsbseq	sp, r5, r9, asr r7
     ae4:	59030402 	stmdbpl	r3, {r1, sl}
     ae8:	03040200 	movweq	r0, #16896	; 0x4200
     aec:	040200ab 	streq	r0, [r2], #-171	; 0xffffff55
     af0:	009e0601 	addseq	r0, lr, r1, lsl #12
     af4:	06020402 	streq	r0, [r2], -r2, lsl #8
     af8:	04020055 	streq	r0, [r2], #-85	; 0xffffffab
     afc:	00740601 	rsbseq	r0, r4, r1, lsl #12
     b00:	06020402 	streq	r0, [r2], -r2, lsl #8
     b04:	04020056 	streq	r0, [r2], #-86	; 0xffffffaa
     b08:	06740601 	ldrbteq	r0, [r4], -r1, lsl #12
     b0c:	52580a03 	subspl	r0, r8, #12288	; 0x3000
     b10:	595a5976 	ldmdbpl	sl, {r1, r2, r4, r5, r6, r8, fp, ip, lr}^
     b14:	3dbb3d3d 	ldccc	13, cr3, [fp, #244]!	; 0xf4
     b18:	083de691 	ldmdaeq	sp!, {r0, r4, r7, r9, sl, sp, lr, pc}
     b1c:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
     b20:	087a0302 	ldmdaeq	sl!, {r1, r8, r9}^
     b24:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
     b28:	003c0601 	eorseq	r0, ip, r1, lsl #12
     b2c:	06020402 	streq	r0, [r2], -r2, lsl #8
     b30:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
     b34:	003c0601 	eorseq	r0, ip, r1, lsl #12
     b38:	06020402 	streq	r0, [r2], -r2, lsl #8
     b3c:	04020049 	streq	r0, [r2], #-73	; 0xffffffb7
     b40:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     b44:	4c580e03 	mrrcmi	14, 0, r0, r8, cr3
     b48:	02003d77 	andeq	r3, r0, #7616	; 0x1dc0
     b4c:	003d0304 	eorseq	r0, sp, r4, lsl #6
     b50:	65030402 	strvs	r0, [r3, #-1026]	; 0xfffffbfe
     b54:	01040200 	mrseq	r0, R12_usr
     b58:	02003c06 	andeq	r3, r0, #1536	; 0x600
     b5c:	65060204 	strvs	r0, [r6, #-516]	; 0xfffffdfc
     b60:	01040200 	mrseq	r0, R12_usr
     b64:	6b063c06 	blvs	18fb84 <startup-0x1fe7047c>
     b68:	003d774c 	eorseq	r7, sp, ip, asr #14
     b6c:	3d030402 	cfstrscc	mvf0, [r3, #-8]
     b70:	03040200 	movweq	r0, #16896	; 0x4200
     b74:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
     b78:	003c0601 	eorseq	r0, ip, r1, lsl #12
     b7c:	06020402 	streq	r0, [r2], -r2, lsl #8
     b80:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
     b84:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     b88:	2f3d4d6b 	svccs	0x003d4d6b
     b8c:	30302f2f 	eorscc	r2, r0, pc, lsr #30
     b90:	04020069 	streq	r0, [r2], #-105	; 0xffffff97
     b94:	02003001 	andeq	r3, r0, #1
     b98:	002f0104 	eoreq	r0, pc, r4, lsl #2
     b9c:	67010402 	strvs	r0, [r1, -r2, lsl #8]
     ba0:	01040200 	mrseq	r0, R12_usr
     ba4:	040200c9 	streq	r0, [r2], #-201	; 0xffffff37
     ba8:	00130801 	andseq	r0, r3, r1, lsl #16
     bac:	4b010402 	blmi	41bbc <startup-0x1ffbe444>
     bb0:	01040200 	mrseq	r0, R12_usr
     bb4:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
     bb8:	02006801 	andeq	r6, r0, #65536	; 0x10000
     bbc:	00c90104 	sbceq	r0, r9, r4, lsl #2
     bc0:	08010402 	stmdaeq	r1, {r1, sl}
     bc4:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
     bc8:	02009201 	andeq	r9, r0, #268435456	; 0x10000000
     bcc:	004b0104 	subeq	r0, fp, r4, lsl #2
     bd0:	3e010402 	cdpcc	4, 0, cr0, cr1, cr2, {0}
     bd4:	01040200 	mrseq	r0, R12_usr
     bd8:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
     bdc:	02006701 	andeq	r6, r0, #262144	; 0x40000
     be0:	13080104 	movwne	r0, #33028	; 0x8104
     be4:	01040200 	mrseq	r0, R12_usr
     be8:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
     bec:	3c6c0301 	stclcc	3, cr0, [ip], #-4
     bf0:	3e3c1903 	vaddcc.f16	s2, s24, s6	; <UNPREDICTABLE>
     bf4:	03040200 	movweq	r0, #16896	; 0x4200
     bf8:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     bfc:	00910803 	addseq	r0, r1, r3, lsl #16
     c00:	08030402 	stmdaeq	r3, {r1, sl}
     c04:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
     c08:	00910803 	addseq	r0, r1, r3, lsl #16
     c0c:	08030402 	stmdaeq	r3, {r1, sl}
     c10:	04020046 	streq	r0, [r2], #-70	; 0xffffffba
     c14:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     c18:	4b3e0850 	blmi	f82d60 <startup-0x1f07d2a0>
     c1c:	0821083d 	stmdaeq	r1!, {r0, r2, r3, r4, r5, fp}
     c20:	4d210821 	stcmi	8, cr0, [r1, #-132]!	; 0xffffff7c
     c24:	4b21304b 	blmi	84cd58 <startup-0x1f7b32a8>
     c28:	4b3e4b3e 	blmi	f93928 <startup-0x1f06c6d8>
     c2c:	75034b3e 	strvc	r4, [r3, #-2878]	; 0xfffff4c2
     c30:	580e033c 	stmdapl	lr, {r2, r3, r4, r5, r8, r9}
     c34:	000b0230 	andeq	r0, fp, r0, lsr r2
     c38:	00720101 	rsbseq	r0, r2, r1, lsl #2
     c3c:	00020000 	andeq	r0, r2, r0
     c40:	0000005b 	andeq	r0, r0, fp, asr r0
     c44:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     c48:	0101000d 	tsteq	r1, sp
     c4c:	00000101 	andeq	r0, r0, r1, lsl #2
     c50:	00000100 	andeq	r0, r0, r0, lsl #2
     c54:	2f3a4301 	svccs	0x003a4301
     c58:	2f706f6d 	svccs	0x00706f6d
     c5c:	6f4d2f63 	svcvs	0x004d2f63
     c60:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     c64:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     c68:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     c6c:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     c70:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     c74:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     c78:	0000432f 	andeq	r4, r0, pc, lsr #6
     c7c:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     c80:	00632e65 	rsbeq	r2, r3, r5, ror #28
     c84:	73000001 	movwvc	r0, #1
     c88:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
     c8c:	00682e65 	rsbeq	r2, r8, r5, ror #28
     c90:	69000001 	stmdbvs	r0, {r0}
     c94:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     c98:	0100682e 	tsteq	r0, lr, lsr #16
     c9c:	00000000 	andeq	r0, r0, r0
     ca0:	27400205 	strbcs	r0, [r0, -r5, lsl #4]
     ca4:	75142000 	ldrvc	r2, [r4, #-0]
     ca8:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
     cac:	01010004 	tsteq	r1, r4
     cb0:	00000068 	andeq	r0, r0, r8, rrx
     cb4:	00510002 	subseq	r0, r1, r2
     cb8:	01020000 	mrseq	r0, (UNDEF: 2)
     cbc:	000d0efb 	strdeq	r0, [sp], -fp
     cc0:	01010101 	tsteq	r1, r1, lsl #2
     cc4:	01000000 	mrseq	r0, (UNDEF: 0)
     cc8:	43010000 	movwmi	r0, #4096	; 0x1000
     ccc:	6f6d2f3a 	svcvs	0x006d2f3a
     cd0:	2f632f70 	svccs	0x00632f70
     cd4:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     cd8:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     cdc:	6f697461 	svcvs	0x00697461
     ce0:	2f72656e 	svccs	0x0072656e
     ce4:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     ce8:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     cec:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     cf0:	70730000 	rsbsvc	r0, r3, r0
     cf4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     cf8:	0100632e 	tsteq	r0, lr, lsr #6
     cfc:	70730000 	rsbsvc	r0, r3, r0
     d00:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     d04:	0100682e 	tsteq	r0, lr, lsr #16
     d08:	00000000 	andeq	r0, r0, r0
     d0c:	27680205 	strbcs	r0, [r8, -r5, lsl #4]!
     d10:	75152000 	ldrvc	r2, [r5, #-0]
     d14:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
     d18:	01010004 	tsteq	r1, r4
     d1c:	0000006c 	andeq	r0, r0, ip, rrx
     d20:	004d0002 	subeq	r0, sp, r2
     d24:	01020000 	mrseq	r0, (UNDEF: 2)
     d28:	000d0efb 	strdeq	r0, [sp], -fp
     d2c:	01010101 	tsteq	r1, r1, lsl #2
     d30:	01000000 	mrseq	r0, (UNDEF: 0)
     d34:	43010000 	movwmi	r0, #4096	; 0x1000
     d38:	6f6d2f3a 	svcvs	0x006d2f3a
     d3c:	2f632f70 	svccs	0x00632f70
     d40:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     d44:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     d48:	6f697461 	svcvs	0x00697461
     d4c:	2f72656e 	svccs	0x0072656e
     d50:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     d54:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     d58:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     d5c:	70670000 	rsbvc	r0, r7, r0
     d60:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
     d64:	00000100 	andeq	r0, r0, r0, lsl #2
     d68:	6f697067 	svcvs	0x00697067
     d6c:	0100682e 	tsteq	r0, lr, lsr #16
     d70:	00000000 	andeq	r0, r0, r0
     d74:	27900205 	ldrcs	r0, [r0, r5, lsl #4]
     d78:	2f152000 	svccs	0x00152000
     d7c:	592f763d 	stmdbpl	pc!, {r0, r2, r3, r4, r5, r9, sl, ip, sp, lr}	; <UNPREDICTABLE>
     d80:	674b693d 	smlaldxvs	r6, fp, sp, r9
     d84:	02223091 	eoreq	r3, r2, #145	; 0x91
     d88:	01010004 	tsteq	r1, r4
     d8c:	0000015a 	andeq	r0, r0, sl, asr r1
     d90:	00810002 	addeq	r0, r1, r2
     d94:	01020000 	mrseq	r0, (UNDEF: 2)
     d98:	000d0efb 	strdeq	r0, [sp], -fp
     d9c:	01010101 	tsteq	r1, r1, lsl #2
     da0:	01000000 	mrseq	r0, (UNDEF: 0)
     da4:	43010000 	movwmi	r0, #4096	; 0x1000
     da8:	6f6d2f3a 	svcvs	0x006d2f3a
     dac:	2f632f70 	svccs	0x00632f70
     db0:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     db4:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     db8:	6f697461 	svcvs	0x00697461
     dbc:	2f72656e 	svccs	0x0072656e
     dc0:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     dc4:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     dc8:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     dcc:	73610000 	cmnvc	r1, #0
     dd0:	5f696963 	svcpl	0x00696963
     dd4:	70736964 	rsbsvc	r6, r3, r4, ror #18
     dd8:	2e79616c 	rpwcsez	f6, f1, #4.0
     ddc:	00010063 	andeq	r0, r1, r3, rrx
     de0:	72707300 	rsbsvc	r7, r0, #0, 6
     de4:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
     de8:	00010068 	andeq	r0, r1, r8, rrx
     dec:	616d6900 	cmnvs	sp, r0, lsl #18
     df0:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     df4:	00000100 	andeq	r0, r0, r0, lsl #2
     df8:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     dfc:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     e00:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
     e04:	00000100 	andeq	r0, r0, r0, lsl #2
     e08:	70617267 	rsbvc	r7, r1, r7, ror #4
     e0c:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
     e10:	0100682e 	tsteq	r0, lr, lsr #16
     e14:	00000000 	andeq	r0, r0, r0
     e18:	27fc0205 	ldrbcs	r0, [ip, r5, lsl #4]!
     e1c:	2e032000 	cdpcs	0, 0, cr2, cr3, cr0, {0}
     e20:	bb596901 	bllt	165b22c <startup-0x1e9a4dd4>
     e24:	59696859 	stmdbpl	r9!, {r0, r3, r4, r6, fp, sp, lr}^
     e28:	76591308 	ldrbvc	r1, [r9], -r8, lsl #6
     e2c:	593d3d67 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}
     e30:	3d3d674c 	ldccc	7, cr6, [sp, #-304]!	; 0xfffffed0
     e34:	673e4c59 			; <UNDEFINED> instruction: 0x673e4c59
     e38:	675a3d3d 	smmlarvs	sl, sp, sp, r3
     e3c:	3e842f67 	cdpcc	15, 8, cr2, cr4, cr7, {3}
     e40:	5a3d3d67 	bpl	f503e4 <startup-0x1f0afc1c>
     e44:	842f6767 	strthi	r6, [pc], #-1895	; e4c <startup-0x1ffff1b4>
     e48:	2f4b3d67 	svccs	0x004b3d67
     e4c:	3d3e683d 	ldccc	8, cr6, [lr, #-244]!	; 0xffffff0c
     e50:	3d4b2f2f 	stclcc	15, cr2, [fp, #-188]	; 0xffffff44
     e54:	0067762f 	rsbeq	r7, r7, pc, lsr #12
     e58:	06010402 	streq	r0, [r1], -r2, lsl #8
     e5c:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
     e60:	914c3d59 	cmpls	ip, r9, asr sp
     e64:	9f764b67 	svcls	0x00764b67
     e68:	0200304c 	andeq	r3, r0, #76	; 0x4c
     e6c:	20060104 	andcs	r0, r6, r4, lsl #2
     e70:	3d3d8306 	ldccc	3, cr8, [sp, #-24]!	; 0xffffffe8
     e74:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
     e78:	06200601 	strteq	r0, [r0], -r1, lsl #12
     e7c:	3f3d3d83 	svccc	0x003d3d83
     e80:	01040200 	mrseq	r0, R12_usr
     e84:	83062006 	movwhi	r2, #24582	; 0x6006
     e88:	003f3d3d 	eorseq	r3, pc, sp, lsr sp	; <UNPREDICTABLE>
     e8c:	06010402 	streq	r0, [r1], -r2, lsl #8
     e90:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
     e94:	343e3f3d 	ldrtcc	r3, [lr], #-3901	; 0xfffff0c3
     e98:	2f2f843d 	svccs	0x002f843d
     e9c:	843e3e2f 	ldrthi	r3, [lr], #-3631	; 0xfffff1d1
     ea0:	73214b2f 			; <UNDEFINED> instruction: 0x73214b2f
     ea4:	214b2f4d 	cmpcs	fp, sp, asr #30
     ea8:	59684d73 	stmdbpl	r8!, {r0, r1, r4, r5, r6, r8, sl, fp, lr}^
     eac:	73214b30 			; <UNDEFINED> instruction: 0x73214b30
     eb0:	73214b4d 			; <UNDEFINED> instruction: 0x73214b4d
     eb4:	754c4b4e 	strbvc	r4, [ip, #-2894]	; 0xfffff4b2
     eb8:	3d2f4b30 	vstmdbcc	pc!, {d4-d27}
     ebc:	02007321 	andeq	r7, r0, #-2080374784	; 0x84000000
     ec0:	4a060104 	bmi	1812d8 <startup-0x1fe7ed28>
     ec4:	2f4b6b06 	svccs	0x004b6b06
     ec8:	0073213d 	rsbseq	r2, r3, sp, lsr r1
     ecc:	06010402 	streq	r0, [r1], -r2, lsl #8
     ed0:	4b6b064a 	blmi	1ac2800 <startup-0x1e53d800>
     ed4:	68753e4e 	ldmdavs	r5!, {r1, r2, r3, r6, r9, sl, fp, ip, sp}^
     ed8:	3d4b2f2f 	stclcc	15, cr2, [fp, #-188]	; 0xffffff44
     edc:	4b4d7321 	blmi	135db68 <startup-0x1eca2498>
     ee0:	4d73212f 	ldfmie	f2, [r3, #-188]!	; 0xffffff44
     ee4:	00080221 	andeq	r0, r8, r1, lsr #4
     ee8:	00760101 	rsbseq	r0, r6, r1, lsl #2
     eec:	00020000 	andeq	r0, r2, r0
     ef0:	00000057 	andeq	r0, r0, r7, asr r0
     ef4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     ef8:	0101000d 	tsteq	r1, sp
     efc:	00000101 	andeq	r0, r0, r1, lsl #2
     f00:	00000100 	andeq	r0, r0, r0, lsl #2
     f04:	2f3a4301 	svccs	0x003a4301
     f08:	2f706f6d 	svccs	0x00706f6d
     f0c:	6f4d2f63 	svcvs	0x004d2f63
     f10:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     f14:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     f18:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     f1c:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     f20:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     f24:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     f28:	0000432f 	andeq	r4, r0, pc, lsr #6
     f2c:	776f6c73 			; <UNDEFINED> instruction: 0x776f6c73
     f30:	7865745f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
     f34:	00632e74 	rsbeq	r2, r3, r4, ror lr
     f38:	73000001 	movwvc	r0, #1
     f3c:	5f776f6c 	svcpl	0x00776f6c
     f40:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     f44:	0100682e 	tsteq	r0, lr, lsr #16
     f48:	00000000 	andeq	r0, r0, r0
     f4c:	2d1c0205 	lfmcs	f0, 4, [ip, #-20]	; 0xffffffec
     f50:	59152000 	ldmdbpl	r5, {sp}
     f54:	5984c99f 	stmibpl	r4, {r0, r1, r2, r3, r4, r7, r8, fp, lr, pc}
     f58:	3d3d754c 	cfldr32cc	mvfx7, [sp, #-304]!	; 0xfffffed0
     f5c:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
     f60:	01010007 	tsteq	r1, r7
     f64:	000000d6 	ldrdeq	r0, [r0], -r6
     f68:	00ab0002 	adceq	r0, fp, r2
     f6c:	01020000 	mrseq	r0, (UNDEF: 2)
     f70:	000d0efb 	strdeq	r0, [sp], -fp
     f74:	01010101 	tsteq	r1, r1, lsl #2
     f78:	01000000 	mrseq	r0, (UNDEF: 0)
     f7c:	43010000 	movwmi	r0, #4096	; 0x1000
     f80:	6f6d2f3a 	svcvs	0x006d2f3a
     f84:	2f632f70 	svccs	0x00632f70
     f88:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     f8c:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     f90:	6f697461 	svcvs	0x00697461
     f94:	2f72656e 	svccs	0x0072656e
     f98:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     f9c:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     fa0:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     fa4:	6e690000 	cdpvs	0, 6, cr0, cr9, cr0, {0}
     fa8:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     fac:	00632e73 	rsbeq	r2, r3, r3, ror lr
     fb0:	73000001 	movwvc	r0, #1
     fb4:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
     fb8:	00682e65 	rsbeq	r2, r8, r5, ror #28
     fbc:	69000001 	stmdbvs	r0, {r0}
     fc0:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     fc4:	0100682e 	tsteq	r0, lr, lsr #16
     fc8:	61670000 	cmnvs	r7, r0
     fcc:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
     fd0:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     fd4:	0100682e 	tsteq	r0, lr, lsr #16
     fd8:	6e690000 	cdpvs	0, 6, cr0, cr9, cr0, {0}
     fdc:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     fe0:	6c625f73 	stclvs	15, cr5, [r2], #-460	; 0xfffffe34
     fe4:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     fe8:	006d6278 	rsbeq	r6, sp, r8, ror r2
     fec:	69000001 	stmdbvs	r0, {r0}
     ff0:	6f6f646e 	svcvs	0x006f646e
     ff4:	675f7372 			; <UNDEFINED> instruction: 0x675f7372
     ff8:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     ffc:	006d6278 	rsbeq	r6, sp, r8, ror r2
    1000:	69000001 	stmdbvs	r0, {r0}
    1004:	6f6f646e 	svcvs	0x006f646e
    1008:	6c5f7372 	mrrcvs	3, 7, r7, pc, cr2	; <UNPREDICTABLE>
    100c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1010:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
    1014:	00000100 	andeq	r0, r0, r0, lsl #2
    1018:	02050000 	andeq	r0, r5, #0
    101c:	20002db0 			; <UNDEFINED> instruction: 0x20002db0
    1020:	3e011303 	cdpcc	3, 0, cr1, cr1, cr3, {0}
    1024:	2f3d672f 	svccs	0x003d672f
    1028:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
    102c:	4c5a083e 	mrrcmi	8, 3, r0, sl, cr14
    1030:	4c3e2f4b 	ldcmi	15, cr2, [lr], #-300	; 0xfffffed4
    1034:	3d3d3e93 	ldccc	14, cr3, [sp, #-588]!	; 0xfffffdb4
    1038:	00083d3d 	andeq	r3, r8, sp, lsr sp
    103c:	00da0101 	sbcseq	r0, sl, r1, lsl #2
    1040:	00020000 	andeq	r0, r2, r0
    1044:	000000af 	andeq	r0, r0, pc, lsr #1
    1048:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    104c:	0101000d 	tsteq	r1, sp
    1050:	00000101 	andeq	r0, r0, r1, lsl #2
    1054:	00000100 	andeq	r0, r0, r0, lsl #2
    1058:	2f3a4301 	svccs	0x003a4301
    105c:	2f706f6d 	svccs	0x00706f6d
    1060:	6f4d2f63 	svcvs	0x004d2f63
    1064:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    1068:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    106c:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    1070:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1074:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    1078:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    107c:	0000432f 	andeq	r4, r0, pc, lsr #6
    1080:	6f646e69 	svcvs	0x00646e69
    1084:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1088:	0100632e 	tsteq	r0, lr, lsr #6
    108c:	70730000 	rsbsvc	r0, r3, r0
    1090:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1094:	0100682e 	tsteq	r0, lr, lsr #16
    1098:	6d690000 	stclvs	0, cr0, [r9, #-0]
    109c:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
    10a0:	00010068 	andeq	r0, r1, r8, rrx
    10a4:	6d616700 	stclvs	7, cr6, [r1, #-0]
    10a8:	6a626f65 	bvs	189ce44 <startup-0x1e7631bc>
    10ac:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
    10b0:	00010068 	andeq	r0, r1, r8, rrx
    10b4:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    10b8:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    10bc:	6c625f32 	stclvs	15, cr5, [r2], #-200	; 0xffffff38
    10c0:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
    10c4:	006d6278 	rsbeq	r6, sp, r8, ror r2
    10c8:	69000001 	stmdbvs	r0, {r0}
    10cc:	6f6f646e 	svcvs	0x006f646e
    10d0:	5f327372 	svcpl	0x00327372
    10d4:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
    10d8:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
    10dc:	00000100 	andeq	r0, r0, r0, lsl #2
    10e0:	6f646e69 	svcvs	0x00646e69
    10e4:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    10e8:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
    10ec:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
    10f0:	01006d62 	tsteq	r0, r2, ror #26
    10f4:	00000000 	andeq	r0, r0, r0
    10f8:	2e980205 	cdpcs	2, 9, cr0, cr8, cr5, {0}
    10fc:	13032000 	movwne	r2, #12288	; 0x3000
    1100:	672f3e01 	strvs	r3, [pc, -r1, lsl #28]!
    1104:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
    1108:	083e672f 	ldmdaeq	lr!, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}
    110c:	2f4b4c5a 	svccs	0x004b4c5a
    1110:	3e934c3e 	mrccc	12, 4, r4, cr3, cr14, {1}
    1114:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    1118:	01010008 	tsteq	r1, r8

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
       4:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
       8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
       c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
      10:	696c0073 	stmdbvs	ip!, {r0, r1, r4, r5, r6}^
      14:	49746867 	ldmdbmi	r4!, {r0, r1, r2, r5, r6, fp, sp, lr}^
      18:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
      1c:	61726700 	cmnvs	r2, r0, lsl #14
      20:	616d4979 	smcvs	54425	; 0xd499
      24:	63006567 	movwvs	r6, #1383	; 0x567
      28:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
      2c:	72675f65 	rsbvc	r5, r7, #404	; 0x194
      30:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
      34:	00737469 	rsbseq	r7, r3, r9, ror #8
      38:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
      3c:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
      40:	5f747865 	svcpl	0x00747865
      44:	0061726b 	rsbeq	r7, r1, fp, ror #4
      48:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
      4c:	65766f5f 	ldrbvs	r6, [r6, #-3935]!	; 0xfffff0a1
      50:	5f6e0072 	svcpl	0x006e0072
      54:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
      58:	63007365 	movwvs	r7, #869	; 0x365
      5c:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
      60:	67694c65 	strbvs	r4, [r9, -r5, ror #24]!
      64:	70007468 	andvc	r7, r0, r8, ror #8
      68:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
      6c:	30317265 	eorscc	r7, r1, r5, ror #4
      70:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
      74:	73614370 	cmnvc	r1, #112, 6	; 0xc0000001
      78:	42656c74 	rsbmi	r6, r5, #116, 24	; 0x7400
      7c:	6b63616c 	blvs	18d8634 <startup-0x1e7279cc>
      80:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
      84:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
      88:	332e3620 			; <UNDEFINED> instruction: 0x332e3620
      8c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
      90:	30373130 	eorscc	r3, r7, r0, lsr r1
      94:	20353132 	eorscs	r3, r5, r2, lsr r1
      98:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
      9c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
      a0:	415b2029 	cmpmi	fp, r9, lsr #32
      a4:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff35a <firstTime.4040+0xdfff6702>
      a8:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
      ac:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
      b0:	72622d36 	rsbvc	r2, r2, #3456	; 0xd80
      b4:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
      b8:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
      bc:	6f697369 	svcvs	0x00697369
      c0:	3432206e 	ldrtcc	r2, [r2], #-110	; 0xffffff92
      c4:	32313535 	eorscc	r3, r1, #222298112	; 0xd400000
      c8:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
      cc:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
      d0:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
      d4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
      d8:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
      dc:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
      e0:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
      e4:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
      e8:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
      ec:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
      f0:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
      f4:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
      f8:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
      fc:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     100:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
     104:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
     108:	20672d20 	rsbcs	r2, r7, r0, lsr #26
     10c:	20304f2d 	eorscs	r4, r0, sp, lsr #30
     110:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
     114:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
     118:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     11c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     120:	5f736900 	svcpl	0x00736900
     124:	6d696c63 	stclvs	12, cr6, [r9, #-396]!	; 0xfffffe74
     128:	676e6962 	strbvs	r6, [lr, -r2, ror #18]!
     12c:	73616300 	cmnvc	r1, #0, 6
     130:	4f656c74 	svcmi	0x00656c74
     134:	6d006a62 	vstrvs	s12, [r0, #-392]	; 0xfffffe78
     138:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     13c:	6f507265 	svcvs	0x00507265
     140:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     144:	72700072 	rsbsvc	r0, r0, #114	; 0x72
     148:	5f737365 	svcpl	0x00737365
     14c:	63616c62 	cmnvs	r1, #25088	; 0x6200
     150:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     154:	66007374 			; <UNDEFINED> instruction: 0x66007374
     158:	31657269 	cmncc	r5, r9, ror #4
     15c:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
     160:	73726f6f 	cmnvc	r2, #444	; 0x1bc
     164:	73616300 	cmnvc	r1, #0, 6
     168:	49656c74 	stmdbmi	r5!, {r2, r4, r5, r6, sl, fp, sp, lr}^
     16c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     170:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
     174:	49656c74 	stmdbmi	r5!, {r2, r4, r5, r6, sl, fp, sp, lr}^
     178:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     17c:	61747300 	cmnvs	r4, r0, lsl #6
     180:	70757472 	rsbsvc	r7, r5, r2, ror r4
     184:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     188:	6d003174 	stfvss	f3, [r0, #-464]	; 0xfffffe30
     18c:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     190:	694c7265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp, lr}^
     194:	00746867 	rsbseq	r6, r4, r7, ror #16
     198:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     19c:	696c5f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     1a0:	5f746867 	svcpl	0x00746867
     1a4:	73746962 	cmnvc	r4, #1605632	; 0x188000
     1a8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     1ac:	6e6f4d70 	mcrvs	13, 3, r4, cr15, cr0, {3}
     1b0:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     1b4:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     1b8:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     1bc:	70003274 	andvc	r3, r0, r4, ror r2
     1c0:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     1c4:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     1c8:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     1cc:	74003474 	strvc	r3, [r0], #-1140	; 0xfffffb8c
     1d0:	33747865 	cmncc	r4, #6619136	; 0x650000
     1d4:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     1d8:	66003574 			; <UNDEFINED> instruction: 0x66003574
     1dc:	31657269 	cmncc	r5, r9, ror #4
     1e0:	73616800 	cmnvc	r1, #0, 16
     1e4:	696c635f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
     1e8:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
     1ec:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     1f0:	00674270 	rsbeq	r4, r7, r0, ror r2
     1f4:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     1f8:	69740038 	ldmdbvs	r4!, {r3, r4, r5}^
     1fc:	5f656c74 	svcpl	0x00656c74
     200:	63616c62 	cmnvs	r1, #25088	; 0x6200
     204:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     208:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     20c:	4d706d65 	ldclmi	13, cr6, [r0, #-404]!	; 0xfffffe6c
     210:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     214:	694c7265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp, lr}^
     218:	00746867 	rsbseq	r6, r4, r7, ror #16
     21c:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     220:	72640037 	rsbvc	r0, r4, #55	; 0x37
     224:	625f7761 	subsvs	r7, pc, #25427968	; 0x1840000
     228:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     22c:	6c625f72 	stclvs	15, cr5, [r2], #-456	; 0xfffffe38
     230:	006b6361 	rsbeq	r6, fp, r1, ror #6
     234:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     238:	65740036 	ldrbvs	r0, [r4, #-54]!	; 0xffffffca
     23c:	00397478 	eorseq	r7, r9, r8, ror r4
     240:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
     244:	50726574 	rsbspl	r6, r2, r4, ror r5
     248:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     24c:	00327265 	eorseq	r7, r2, r5, ror #4
     250:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
     254:	50726574 	rsbspl	r6, r2, r4, ror r5
     258:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     25c:	00337265 	eorseq	r7, r3, r5, ror #4
     260:	32776f72 	rsbscc	r6, r7, #456	; 0x1c8
     264:	73696400 	cmnvc	r9, #0, 8
     268:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
     26c:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     270:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     274:	616c625f 	cmnvs	ip, pc, asr r2
     278:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
     27c:	00737469 	rsbseq	r7, r3, r9, ror #8
     280:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     284:	7070615f 	rsbsvc	r6, r0, pc, asr r1
     288:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     28c:	65745f67 	ldrbvs	r5, [r4, #-3943]!	; 0xfffff099
     290:	70007478 	andvc	r7, r0, r8, ror r4
     294:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     298:	006a624f 	rsbeq	r6, sl, pc, asr #4
     29c:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
     2a0:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     2a4:	5f726566 	svcpl	0x00726566
     2a8:	63616c62 	cmnvs	r1, #25088	; 0x6200
     2ac:	72675f6b 	rsbvc	r5, r7, #428	; 0x1ac
     2b0:	6c5f7961 	mrrcvs	9, 6, r7, pc, cr1	; <UNPREDICTABLE>
     2b4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     2b8:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     2bc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     2c0:	6f700034 	svcvs	0x00700034
     2c4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     2c8:	70003572 	andvc	r3, r0, r2, ror r5
     2cc:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     2d0:	00367265 	eorseq	r7, r6, r5, ror #4
     2d4:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     2d8:	37726574 			; <UNDEFINED> instruction: 0x37726574
     2dc:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     2e0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     2e4:	6f700038 	svcvs	0x00700038
     2e8:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     2ec:	74003972 	strvc	r3, [r0], #-2418	; 0xfffff68e
     2f0:	43706d65 	cmnmi	r0, #6464	; 0x1940
     2f4:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
     2f8:	67694c65 	strbvs	r4, [r9, -r5, ror #24]!
     2fc:	72007468 	andvc	r7, r0, #104, 8	; 0x68000000
     300:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
     304:	69770072 	ldmdbvs	r7!, {r1, r4, r5, r6}^
     308:	00687464 	rsbeq	r7, r8, r4, ror #8
     30c:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
     310:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     314:	5f726566 	svcpl	0x00726566
     318:	63616c62 	cmnvs	r1, #25088	; 0x6200
     31c:	696c5f6b 	stmdbvs	ip!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     320:	00746867 	rsbseq	r6, r4, r7, ror #16
     324:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     328:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
     32c:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     330:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
     334:	6400746e 	strvs	r7, [r0], #-1134	; 0xfffffb92
     338:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     33c:	746e755f 	strbtvc	r7, [lr], #-1375	; 0xfffffaa1
     340:	745f6c69 	ldrbvc	r6, [pc], #-3177	; 348 <startup-0x1ffffcb8>
     344:	00747865 	rsbseq	r7, r4, r5, ror #16
     348:	706d6574 	rsbvc	r6, sp, r4, ror r5
     34c:	736e6f4d 	cmnvc	lr, #308	; 0x134
     350:	00726574 	rsbseq	r6, r2, r4, ror r5
     354:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     358:	616c4265 	cmnvs	ip, r5, ror #4
     35c:	70006b63 	andvc	r6, r0, r3, ror #22
     360:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     364:	6172675f 	cmnvs	r2, pc, asr r7
     368:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     36c:	61007374 	tstvs	r0, r4, ror r3
     370:	616d696e 	cmnvs	sp, lr, ror #18
     374:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     378:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
     37c:	61006465 	tstvs	r0, r5, ror #8
     380:	616d696e 	cmnvs	sp, lr, ror #18
     384:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     388:	756f635f 	strbvc	r6, [pc, #-863]!	; 31 <startup-0x1fffffcf>
     38c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     390:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     394:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     398:	006a624f 	rsbeq	r6, sl, pc, asr #4
     39c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
     3a0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     3a4:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     3a8:	675f656c 	ldrbvs	r6, [pc, -ip, ror #10]
     3ac:	5f796172 	svcpl	0x00796172
     3b0:	73746962 	cmnvc	r4, #1605632	; 0x188000
     3b4:	61476e00 	cmpvs	r7, r0, lsl #28
     3b8:	624f656d 	subvs	r6, pc, #457179136	; 0x1b400000
     3bc:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     3c0:	72700073 	rsbsvc	r0, r0, #115	; 0x73
     3c4:	5f737365 	svcpl	0x00737365
     3c8:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     3cc:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     3d0:	70007374 	andvc	r7, r0, r4, ror r3
     3d4:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     3d8:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     3dc:	6d690065 	stclvs	0, cr0, [r9, #-404]!	; 0xfffffe6c
     3e0:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     3e4:	6f687300 	svcvs	0x00687300
     3e8:	745f7472 	ldrbvc	r7, [pc], #-1138	; 3f0 <startup-0x1ffffc10>
     3ec:	00747865 	rsbseq	r7, r4, r5, ror #16
     3f0:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
     3f4:	5f746e65 	svcpl	0x00746e65
     3f8:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
     3fc:	69740065 	ldmdbvs	r4!, {r0, r2, r5, r6}^
     400:	4c656c74 	stclmi	12, cr6, [r5], #-464	; 0xfffffe30
     404:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     408:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     40c:	65725070 	ldrbvs	r5, [r2, #-112]!	; 0xffffff90
     410:	72477373 	subvc	r7, r7, #-872415231	; 0xcc000001
     414:	69007961 	stmdbvs	r0, {r0, r5, r6, r8, fp, ip, sp, lr}
     418:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     41c:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
     420:	74007365 	strvc	r7, [r0], #-869	; 0xfffffc9b
     424:	43706d65 	cmnmi	r0, #6464	; 0x1940
     428:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
     42c:	61724765 	cmnvs	r2, r5, ror #14
     430:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     434:	6954706d 	ldmdbvs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
     438:	42656c74 	rsbmi	r6, r5, #116, 24	; 0x7400
     43c:	6b63616c 	blvs	18d89f4 <startup-0x1e72760c>
     440:	736e7500 	cmnvc	lr, #0, 10
     444:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     448:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
     44c:	64007261 	strvs	r7, [r0], #-609	; 0xfffffd9f
     450:	5f776172 	svcpl	0x00776172
     454:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     458:	625f7265 	subsvs	r7, pc, #1342177286	; 0x50000006
     45c:	6b63616c 	blvs	18d8a14 <startup-0x1e7275ec>
     460:	6172675f 	cmnvs	r2, pc, asr r7
     464:	6f6d0079 	svcvs	0x006d0079
     468:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     46c:	696c5f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     470:	5f746867 	svcpl	0x00746867
     474:	73746962 	cmnvc	r4, #1605632	; 0x188000
     478:	73616300 	cmnvc	r1, #0, 6
     47c:	5f656c74 	svcpl	0x00656c74
     480:	63616c62 	cmnvs	r1, #25088	; 0x6200
     484:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     488:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     48c:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     490:	006a624f 	rsbeq	r6, sl, pc, asr #4
     494:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     498:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     49c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     4a0:	6f62616c 	svcvs	0x0062616c
     4a4:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     4a8:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     4ac:	5049442f 	subpl	r4, r9, pc, lsr #8
     4b0:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     4b4:	2f686374 	svccs	0x00686374
     4b8:	74732f43 	ldrbtvc	r2, [r3], #-3907	; 0xfffff0bd
     4bc:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
     4c0:	00632e70 	rsbeq	r2, r3, r0, ror lr
     4c4:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     4c8:	656a624f 	strbvs	r6, [sl, #-591]!	; 0xfffffdb1
     4cc:	00737463 	rsbseq	r7, r3, r3, ror #8
     4d0:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
     4d4:	7247656c 	subvc	r6, r7, #108, 10	; 0x1b000000
     4d8:	6d007961 	vstrvs.16	s14, [r0, #-194]	; 0xffffff3e	; <UNPREDICTABLE>
     4dc:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     4e0:	72477265 	subvc	r7, r7, #1342177286	; 0x50000006
     4e4:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     4e8:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     4ec:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     4f0:	72756300 	rsbsvc	r6, r5, #0, 6
     4f4:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
     4f8:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
     4fc:	006e6565 	rsbeq	r6, lr, r5, ror #10
     500:	74736964 	ldrbtvc	r6, [r3], #-2404	; 0xfffff69c
     504:	65636e61 	strbvs	r6, [r3, #-3681]!	; 0xfffff19f
     508:	616c705f 	qdsubvs	r7, pc, ip	; <UNPREDICTABLE>
     50c:	5f726579 	svcpl	0x00726579
     510:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     514:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     518:	65725070 	ldrbvs	r5, [r2, #-112]!	; 0xffffff90
     51c:	6c427373 	mcrrvs	3, 7, r7, r2, cr3
     520:	006b6361 	rsbeq	r6, fp, r1, ror #6
     524:	625f6762 	subsvs	r6, pc, #25690112	; 0x1880000
     528:	00737469 	rsbseq	r7, r3, r9, ror #8
     52c:	63616c62 	cmnvs	r1, #25088	; 0x6200
     530:	616d496b 	cmnvs	sp, fp, ror #18
     534:	6d006567 	cfstr32vs	mvfx6, [r0, #-412]	; 0xfffffe64
     538:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     53c:	675f7265 	ldrbvs	r7, [pc, -r5, ror #4]
     540:	5f796172 	svcpl	0x00796172
     544:	73746962 	cmnvc	r4, #1605632	; 0x188000
     548:	73616300 	cmnvc	r1, #0, 6
     54c:	49656c74 	stmdbmi	r5!, {r2, r4, r5, r6, sl, fp, sp, lr}^
     550:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     554:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     558:	6d49656c 	cfstr64vs	mvdx6, [r9, #-432]	; 0xfffffe50
     55c:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     560:	6e617200 	cdpvs	2, 6, cr7, cr1, cr0, {0}
     564:	5f6d6f64 	svcpl	0x006d6f64
     568:	64656573 	strbtvs	r6, [r5], #-1395	; 0xfffffa8d
     56c:	72696600 	rsbvc	r6, r9, #0, 12
     570:	66003265 	strvs	r3, [r0], -r5, ror #4
     574:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     578:	72696600 	rsbvc	r6, r9, #0, 12
     57c:	70003465 	andvc	r3, r0, r5, ror #8
     580:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     584:	63616c42 	cmnvs	r1, #16896	; 0x4200
     588:	6f6d006b 	svcvs	0x006d006b
     58c:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     590:	616d4972 	smcvs	54418	; 0xd492
     594:	79006567 	stmdbvc	r0, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     598:	00736f50 	rsbseq	r6, r3, r0, asr pc
     59c:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
     5a0:	696c635f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
     5a4:	765f626d 	ldrbvc	r6, [pc], -sp, ror #4
     5a8:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     5ac:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     5b0:	00323174 	eorseq	r3, r2, r4, ror r1
     5b4:	706d6574 	rsbvc	r6, sp, r4, ror r5
     5b8:	6c746954 			; <UNDEFINED> instruction: 0x6c746954
     5bc:	67694c65 	strbvs	r4, [r9, -r5, ror #24]!
     5c0:	75007468 	strvc	r7, [r0, #-1128]	; 0xfffffb98
     5c4:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
     5c8:	72700065 	rsbsvc	r0, r0, #101	; 0x65
     5cc:	49737365 	ldmdbmi	r3!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
     5d0:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     5d4:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     5d8:	6954706d 	ldmdbvs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
     5dc:	47656c74 			; <UNDEFINED> instruction: 0x47656c74
     5e0:	00796172 	rsbseq	r6, r9, r2, ror r1
     5e4:	6f6c5374 	svcvs	0x006c5374
     5e8:	78655477 	stmdavc	r5!, {r0, r1, r2, r4, r5, r6, sl, ip, lr}^
     5ec:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
     5f0:	5f38746e 	svcpl	0x0038746e
     5f4:	61620074 	smcvs	8196	; 0x2004
     5f8:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
     5fc:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     600:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     604:	61620074 	smcvs	8196	; 0x2004
     608:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
     60c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     610:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     614:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     618:	65725070 	ldrbvs	r5, [r2, #-112]!	; 0xffffff90
     61c:	694c7373 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}^
     620:	00746867 	rsbseq	r6, r4, r7, ror #16
     624:	6d614774 	stclvs	7, cr4, [r1, #-464]!	; 0xfffffe30
     628:	6a624f65 	bvs	18943c4 <startup-0x1e76bc3c>
     62c:	00746365 	rsbseq	r6, r4, r5, ror #6
     630:	736f5078 	cmnvc	pc, #120	; 0x78
     634:	73616300 	cmnvc	r1, #0, 6
     638:	42656c74 	rsbmi	r6, r5, #116, 24	; 0x7400
     63c:	6b63616c 	blvs	18d8bf4 <startup-0x1e72740c>
     640:	6d616700 	stclvs	7, cr6, [r1, #-0]
     644:	766f5f65 	strbtvc	r5, [pc], -r5, ror #30
     648:	615f7265 	cmpvs	pc, r5, ror #4
     64c:	72656464 	rsbvc	r6, r5, #100, 8	; 0x64000000
     650:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     654:	00303174 	eorseq	r3, r0, r4, ror r1
     658:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     65c:	68003131 	stmdavs	r0, {r0, r4, r5, r8, ip, sp}
     660:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
     664:	616d0074 	smcvs	53252	; 0xd004
     668:	70006e69 	andvc	r6, r0, r9, ror #28
     66c:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     670:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     674:	6f6d0074 	svcvs	0x006d0074
     678:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     67c:	616d4972 	smcvs	54418	; 0xd492
     680:	00736567 	rsbseq	r6, r3, r7, ror #10
     684:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     688:	656a624f 	strbvs	r6, [sl, #-591]!	; 0xfffffdb1
     68c:	70557463 	subsvc	r7, r5, r3, ror #8
     690:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
     694:	2f3a4300 	svccs	0x003a4300
     698:	2f706f6d 	svccs	0x00706f6d
     69c:	6f4d2f63 	svcvs	0x004d2f63
     6a0:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     6a4:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     6a8:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     6ac:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     6b0:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     6b4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     6b8:	672f432f 	strvs	r4, [pc, -pc, lsr #6]!
     6bc:	6f656d61 	svcvs	0x00656d61
     6c0:	63656a62 	cmnvs	r5, #401408	; 0x62000
     6c4:	00632e74 	rsbeq	r2, r3, r4, ror lr
     6c8:	73696874 	cmnvc	r9, #116, 16	; 0x740000
     6cc:	72696600 	rsbvc	r6, r9, #0, 12
     6d0:	72473565 	subvc	r3, r7, #423624704	; 0x19400000
     6d4:	66007961 	strvs	r7, [r0], -r1, ror #18
     6d8:	31657269 	cmncc	r5, r9, ror #4
     6dc:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     6e0:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     6e4:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     6e8:	72473265 	subvc	r3, r7, #1342177286	; 0x50000006
     6ec:	66007961 	strvs	r7, [r0], -r1, ror #18
     6f0:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     6f4:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     6f8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     6fc:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     700:	72473465 	subvc	r3, r7, #1694498816	; 0x65000000
     704:	66007961 	strvs	r7, [r0], -r1, ror #18
     708:	42657269 	rsbmi	r7, r5, #-1879048186	; 0x90000006
     70c:	6b63616c 	blvs	18d8cc4 <startup-0x1e72733c>
     710:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     714:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     718:	72473365 	subvc	r3, r7, #-1811939327	; 0x94000001
     71c:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     720:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
     724:	42657269 	rsbmi	r7, r5, #-1879048186	; 0x90000006
     728:	6b63616c 	blvs	18d8ce0 <startup-0x1e727320>
     72c:	72696600 	rsbvc	r6, r9, #0, 12
     730:	694c3165 	stmdbvs	ip, {r0, r2, r5, r6, r8, ip, sp}^
     734:	00746867 	rsbseq	r6, r4, r7, ror #16
     738:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     73c:	67694c34 			; <UNDEFINED> instruction: 0x67694c34
     740:	66007468 	strvs	r7, [r0], -r8, ror #8
     744:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
     748:	6172675f 	cmnvs	r2, pc, asr r7
     74c:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     750:	66007374 			; <UNDEFINED> instruction: 0x66007374
     754:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
     758:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     75c:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     760:	00737469 	rsbseq	r7, r3, r9, ror #8
     764:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     768:	67694c33 			; <UNDEFINED> instruction: 0x67694c33
     76c:	70007468 	andvc	r7, r0, r8, ror #8
     770:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     774:	00317265 	eorseq	r7, r1, r5, ror #4
     778:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     77c:	33726574 	cmncc	r2, #116, 10	; 0x1d000000
     780:	72696600 	rsbvc	r6, r9, #0, 12
     784:	675f3565 	ldrbvs	r3, [pc, -r5, ror #10]
     788:	5f796172 	svcpl	0x00796172
     78c:	73746962 	cmnvc	r4, #1605632	; 0x188000
     790:	72696600 	rsbvc	r6, r9, #0, 12
     794:	6d493365 	stclvs	3, cr3, [r9, #-404]	; 0xfffffe6c
     798:	00656761 	rsbeq	r6, r5, r1, ror #14
     79c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     7a0:	30726574 	rsbscc	r6, r2, r4, ror r5
     7a4:	72696600 	rsbvc	r6, r9, #0, 12
     7a8:	694c3565 	stmdbvs	ip, {r0, r2, r5, r6, r8, sl, ip, sp}^
     7ac:	00746867 	rsbseq	r6, r4, r7, ror #16
     7b0:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     7b4:	32726574 	rsbscc	r6, r2, #116, 10	; 0x1d000000
     7b8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     7bc:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     7c0:	72473565 	subvc	r3, r7, #423624704	; 0x19400000
     7c4:	66007961 	strvs	r7, [r0], -r1, ror #18
     7c8:	31657269 	cmncc	r5, r9, ror #4
     7cc:	6172675f 	cmnvs	r2, pc, asr r7
     7d0:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     7d4:	66007374 			; <UNDEFINED> instruction: 0x66007374
     7d8:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
     7dc:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     7e0:	69660074 	stmdbvs	r6!, {r2, r4, r5, r6}^
     7e4:	5f316572 	svcpl	0x00316572
     7e8:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     7ec:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     7f0:	66007374 			; <UNDEFINED> instruction: 0x66007374
     7f4:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
     7f8:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     7fc:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     800:	00737469 	rsbseq	r7, r3, r9, ror #8
     804:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     808:	006a624f 	rsbeq	r6, sl, pc, asr #4
     80c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     810:	61724732 	cmnvs	r2, r2, lsr r7
     814:	69660079 	stmdbvs	r6!, {r0, r3, r4, r5, r6}^
     818:	5f346572 	svcpl	0x00346572
     81c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     820:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     824:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     828:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     82c:	4c336572 	cfldr32mi	mvfx6, [r3], #-456	; 0xfffffe38
     830:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     834:	72696600 	rsbvc	r6, r9, #0, 12
     838:	6d493465 	cfstrdvs	mvd3, [r9, #-404]	; 0xfffffe6c
     83c:	00656761 	rsbeq	r6, r5, r1, ror #14
     840:	706d6574 	rsbvc	r6, sp, r4, ror r5
     844:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     848:	67694c31 			; <UNDEFINED> instruction: 0x67694c31
     84c:	66007468 	strvs	r7, [r0], -r8, ror #8
     850:	74737269 	ldrbtvc	r7, [r3], #-617	; 0xfffffd97
     854:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     858:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     85c:	69665f74 	stmdbvs	r6!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     860:	66006572 			; <UNDEFINED> instruction: 0x66006572
     864:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
     868:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     86c:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     870:	00737469 	rsbseq	r7, r3, r9, ror #8
     874:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     878:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     87c:	66007365 	strvs	r7, [r0], -r5, ror #6
     880:	31657269 	cmncc	r5, r9, ror #4
     884:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     888:	69660065 	stmdbvs	r6!, {r0, r2, r5, r6}^
     88c:	47346572 			; <UNDEFINED> instruction: 0x47346572
     890:	00796172 	rsbseq	r6, r9, r2, ror r1
     894:	706d6574 	rsbvc	r6, sp, r4, ror r5
     898:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     89c:	61724731 	cmnvs	r2, r1, lsr r7
     8a0:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     8a4:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     8a8:	4c346572 	cfldr32mi	mvfx6, [r4], #-456	; 0xfffffe38
     8ac:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     8b0:	72696600 	rsbvc	r6, r9, #0, 12
     8b4:	6c5f3365 	mrrcvs	3, 6, r3, pc, cr5	; <UNPREDICTABLE>
     8b8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     8bc:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     8c0:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     8c4:	49356572 	ldmdbmi	r5!, {r1, r4, r5, r6, r8, sl, sp, lr}
     8c8:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     8cc:	72696600 	rsbvc	r6, r9, #0, 12
     8d0:	6c625f65 	stclvs	15, cr5, [r2], #-404	; 0xfffffe6c
     8d4:	5f6b6361 	svcpl	0x006b6361
     8d8:	69625f32 	stmdbvs	r2!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     8dc:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     8e0:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
     8e4:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
     8e8:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     8ec:	69660074 	stmdbvs	r6!, {r2, r4, r5, r6}^
     8f0:	49326572 	ldmdbmi	r2!, {r1, r4, r5, r6, r8, sl, sp, lr}
     8f4:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     8f8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     8fc:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     900:	694c3565 	stmdbvs	ip, {r0, r2, r5, r6, r8, sl, ip, sp}^
     904:	00746867 	rsbseq	r6, r4, r7, ror #16
     908:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     90c:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     910:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     914:	6f62616c 	svcvs	0x0062616c
     918:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     91c:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     920:	5049442f 	subpl	r4, r9, pc, lsr #8
     924:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     928:	2f686374 	svccs	0x00686374
     92c:	69662f43 	stmdbvs	r6!, {r0, r1, r6, r8, r9, sl, fp, sp}^
     930:	632e6572 			; <UNDEFINED> instruction: 0x632e6572
     934:	72696600 	rsbvc	r6, r9, #0, 12
     938:	675f3365 	ldrbvs	r3, [pc, -r5, ror #6]
     93c:	5f796172 	svcpl	0x00796172
     940:	73746962 	cmnvc	r4, #1605632	; 0x188000
     944:	73616c00 	cmnvc	r1, #0, 24
     948:	67695274 			; <UNDEFINED> instruction: 0x67695274
     94c:	61567468 	cmpvs	r6, r8, ror #8
     950:	0065756c 	rsbeq	r7, r5, ip, ror #10
     954:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
     958:	7466654c 	strbtvc	r6, [r6], #-1356	; 0xfffffab4
     95c:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
     960:	3a430065 	bcc	10c0afc <startup-0x1ef3f504>
     964:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     968:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 8b4 <startup-0x1ffff74c>
     96c:	616c706f 	cmnvs	ip, pc, rrx
     970:	61726f62 	cmnvs	r2, r2, ror #30
     974:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     978:	442f7265 	strtmi	r7, [pc], #-613	; 980 <startup-0x1ffff680>
     97c:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     980:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     984:	2f432f68 	svccs	0x00432f68
     988:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
     98c:	632e7265 			; <UNDEFINED> instruction: 0x632e7265
     990:	616c7000 	cmnvs	ip, r0
     994:	55726579 	ldrbpl	r6, [r2, #-1401]!	; 0xfffffa87
     998:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
     99c:	65740065 	ldrbvs	r0, [r4, #-101]!	; 0xffffff9b
     9a0:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     9a4:	4c326472 	cfldrsmi	mvf6, [r2], #-456	; 0xfffffe38
     9a8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     9ac:	72696200 	rsbvc	r6, r9, #0, 4
     9b0:	6c5f3364 	mrrcvs	3, 6, r3, pc, cr4	; <UNPREDICTABLE>
     9b4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     9b8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     9bc:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
     9c0:	49346472 	ldmdbmi	r4!, {r1, r4, r5, r6, sl, sp, lr}
     9c4:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     9c8:	72696200 	rsbvc	r6, r9, #0, 4
     9cc:	6c5f3464 	cfldrdvs	mvd3, [pc], {100}	; 0x64
     9d0:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     9d4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     9d8:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     9dc:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     9e0:	4c356472 	cfldrsmi	mvf6, [r5], #-456	; 0xfffffe38
     9e4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     9e8:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     9ec:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     9f0:	62003431 	andvs	r3, r0, #822083584	; 0x31000000
     9f4:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     9f8:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     9fc:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     a00:	00737469 	rsbseq	r7, r3, r9, ror #8
     a04:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     a08:	67694c33 			; <UNDEFINED> instruction: 0x67694c33
     a0c:	70007468 	andvc	r7, r0, r8, ror #8
     a10:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     a14:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
     a18:	72696200 	rsbvc	r6, r9, #0, 4
     a1c:	694c3164 	stmdbvs	ip, {r2, r5, r6, r8, ip, sp}^
     a20:	00746867 	rsbseq	r6, r4, r7, ror #16
     a24:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     a28:	616c4233 	cmnvs	ip, r3, lsr r2
     a2c:	62006b63 	andvs	r6, r0, #101376	; 0x18c00
     a30:	31647269 	cmncc	r4, r9, ror #4
     a34:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     a38:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     a3c:	72694270 	rsbvc	r4, r9, #112, 4
     a40:	6c423464 	cfstrdvs	mvd3, [r2], {100}	; 0x64
     a44:	006b6361 	rsbeq	r6, fp, r1, ror #6
     a48:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     a4c:	616c4235 	cmnvs	ip, r5, lsr r2
     a50:	70006b63 	andvc	r6, r0, r3, ror #22
     a54:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     a58:	30327265 	eorscc	r7, r2, r5, ror #4
     a5c:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     a60:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     a64:	62003132 	andvs	r3, r0, #-2147483636	; 0x8000000c
     a68:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     a6c:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     a70:	72696200 	rsbvc	r6, r9, #0, 4
     a74:	6c423264 	sfmvs	f3, 2, [r2], {100}	; 0x64
     a78:	006b6361 	rsbeq	r6, fp, r1, ror #6
     a7c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     a80:	32726574 	rsbscc	r6, r2, #116, 10	; 0x1d000000
     a84:	6f700034 	svcvs	0x00700034
     a88:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     a8c:	00363172 	eorseq	r3, r6, r2, ror r1
     a90:	706d6574 	rsbvc	r6, sp, r4, ror r5
     a94:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     a98:	61724732 	cmnvs	r2, r2, lsr r7
     a9c:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     aa0:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     aa4:	47346472 			; <UNDEFINED> instruction: 0x47346472
     aa8:	00796172 	rsbseq	r6, r9, r2, ror r1
     aac:	706d6574 	rsbvc	r6, sp, r4, ror r5
     ab0:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     ab4:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     ab8:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
     abc:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     ac0:	47356472 			; <UNDEFINED> instruction: 0x47356472
     ac4:	00796172 	rsbseq	r6, r9, r2, ror r1
     ac8:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     acc:	31726574 	cmncc	r2, r4, ror r5
     ad0:	69620033 	stmdbvs	r2!, {r0, r1, r4, r5}^
     ad4:	5f326472 	svcpl	0x00326472
     ad8:	63616c62 	cmnvs	r1, #25088	; 0x6200
     adc:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     ae0:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     ae4:	31647269 	cmncc	r4, r9, ror #4
     ae8:	6172675f 	cmnvs	r2, pc, asr r7
     aec:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     af0:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     af4:	36647269 	strbtcc	r7, [r4], -r9, ror #4
     af8:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     afc:	69620065 	stmdbvs	r2!, {r0, r2, r5, r6}^
     b00:	5f336472 	svcpl	0x00336472
     b04:	63616c62 	cmnvs	r1, #25088	; 0x6200
     b08:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     b0c:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     b10:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     b14:	616c625f 	cmnvs	ip, pc, asr r2
     b18:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
     b1c:	00737469 	rsbseq	r7, r3, r9, ror #8
     b20:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     b24:	616d4933 	cmnvs	sp, r3, lsr r9
     b28:	62006567 	andvs	r6, r0, #432013312	; 0x19c00000
     b2c:	31647269 	cmncc	r4, r9, ror #4
     b30:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     b34:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     b38:	00737469 	rsbseq	r7, r3, r9, ror #8
     b3c:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     b40:	6c625f35 	stclvs	15, cr5, [r2], #-212	; 0xffffff2c
     b44:	5f6b6361 	svcpl	0x006b6361
     b48:	73746962 	cmnvc	r4, #1605632	; 0x188000
     b4c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     b50:	72694270 	rsbvc	r4, r9, #112, 4
     b54:	694c3364 	stmdbvs	ip, {r2, r5, r6, r8, r9, ip, sp}^
     b58:	00746867 	rsbseq	r6, r4, r7, ror #16
     b5c:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     b60:	72675f35 	rsbvc	r5, r7, #53, 30	; 0xd4
     b64:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     b68:	00737469 	rsbseq	r7, r3, r9, ror #8
     b6c:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     b70:	61724732 	cmnvs	r2, r2, lsr r7
     b74:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     b78:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     b7c:	4c346472 	cfldrsmi	mvf6, [r4], #-456	; 0xfffffe38
     b80:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     b84:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     b88:	72694270 	rsbvc	r4, r9, #112, 4
     b8c:	72473364 	subvc	r3, r7, #100, 6	; 0x90000001
     b90:	62007961 	andvs	r7, r0, #1589248	; 0x184000
     b94:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     b98:	6172675f 	cmnvs	r2, pc, asr r7
     b9c:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     ba0:	70007374 	andvc	r7, r0, r4, ror r3
     ba4:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     ba8:	33327265 	teqcc	r2, #1342177286	; 0x50000006
     bac:	72696200 	rsbvc	r6, r9, #0, 4
     bb0:	694c3564 	stmdbvs	ip, {r2, r5, r6, r8, sl, ip, sp}^
     bb4:	00746867 	rsbseq	r6, r4, r7, ror #16
     bb8:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     bbc:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     bc0:	74007365 	strvc	r7, [r0], #-869	; 0xfffffc9b
     bc4:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     bc8:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     bcc:	63616c42 	cmnvs	r1, #16896	; 0x4200
     bd0:	6962006b 	stmdbvs	r2!, {r0, r1, r3, r5, r6}^
     bd4:	42346472 	eorsmi	r6, r4, #1912602624	; 0x72000000
     bd8:	6b63616c 	blvs	18d9190 <startup-0x1e726e70>
     bdc:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     be0:	72694270 	rsbvc	r4, r9, #112, 4
     be4:	6c423264 	sfmvs	f3, 2, [r2], {100}	; 0x64
     be8:	006b6361 	rsbeq	r6, fp, r1, ror #6
     bec:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     bf0:	72675f33 	rsbvc	r5, r7, #51, 30	; 0xcc
     bf4:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     bf8:	00737469 	rsbseq	r7, r3, r9, ror #8
     bfc:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     c00:	616c4231 	cmnvs	ip, r1, lsr r2
     c04:	62006b63 	andvs	r6, r0, #101376	; 0x18c00
     c08:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     c0c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     c10:	3a430074 	bcc	10c0de8 <startup-0x1ef3f218>
     c14:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     c18:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; b64 <startup-0x1ffff49c>
     c1c:	616c706f 	cmnvs	ip, pc, rrx
     c20:	61726f62 	cmnvs	r2, r2, ror #30
     c24:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     c28:	442f7265 	strtmi	r7, [pc], #-613	; c30 <startup-0x1ffff3d0>
     c2c:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     c30:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     c34:	2f432f68 	svccs	0x00432f68
     c38:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     c3c:	6900632e 	stmdbvs	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
     c40:	5f74696e 	svcpl	0x0074696e
     c44:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     c48:	72696200 	rsbvc	r6, r9, #0, 4
     c4c:	6a624f64 	bvs	18949e4 <startup-0x1e76b61c>
     c50:	72696200 	rsbvc	r6, r9, #0, 4
     c54:	675f3264 	ldrbvs	r3, [pc, -r4, ror #4]
     c58:	5f796172 	svcpl	0x00796172
     c5c:	73746962 	cmnvc	r4, #1605632	; 0x188000
     c60:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     c64:	72694270 	rsbvc	r4, r9, #112, 4
     c68:	61724764 	cmnvs	r2, r4, ror #14
     c6c:	69620079 	stmdbvs	r2!, {r0, r3, r4, r5, r6}^
     c70:	47356472 			; <UNDEFINED> instruction: 0x47356472
     c74:	00796172 	rsbseq	r6, r9, r2, ror r1
     c78:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     c7c:	6c625f31 	stclvs	15, cr5, [r2], #-196	; 0xffffff3c
     c80:	5f6b6361 	svcpl	0x006b6361
     c84:	73746962 	cmnvc	r4, #1605632	; 0x188000
     c88:	72696200 	rsbvc	r6, r9, #0, 4
     c8c:	6d493164 	stfvse	f3, [r9, #-400]	; 0xfffffe70
     c90:	00656761 	rsbeq	r6, r5, r1, ror #14
     c94:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     c98:	61724733 	cmnvs	r2, r3, lsr r7
     c9c:	69660079 	stmdbvs	r6!, {r0, r3, r4, r5, r6}^
     ca0:	506c616e 	rsbpl	r6, ip, lr, ror #2
     ca4:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     ca8:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
     cac:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     cb0:	42647269 	rsbmi	r7, r4, #-1879048186	; 0x90000006
     cb4:	6b63616c 	blvs	18d926c <startup-0x1e726d94>
     cb8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     cbc:	72694270 	rsbvc	r4, r9, #112, 4
     cc0:	6c423364 	mcrrvs	3, 6, r3, r2, cr4
     cc4:	006b6361 	rsbeq	r6, fp, r1, ror #6
     cc8:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     ccc:	31726574 	cmncc	r2, r4, ror r5
     cd0:	6f700031 	svcvs	0x00700031
     cd4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     cd8:	00323172 	eorseq	r3, r2, r2, ror r1
     cdc:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     ce0:	67694c34 			; <UNDEFINED> instruction: 0x67694c34
     ce4:	62007468 	andvs	r7, r0, #104, 8	; 0x68000000
     ce8:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     cec:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     cf0:	6f700065 	svcvs	0x00700065
     cf4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     cf8:	00353172 	eorseq	r3, r5, r2, ror r1
     cfc:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     d00:	31726574 	cmncc	r2, r4, ror r5
     d04:	6f700037 	svcvs	0x00700037
     d08:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     d0c:	00383172 	eorseq	r3, r8, r2, ror r1
     d10:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     d14:	616d4932 	cmnvs	sp, r2, lsr r9
     d18:	70006567 	andvc	r6, r0, r7, ror #10
     d1c:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     d20:	32327265 	eorscc	r7, r2, #1342177286	; 0x50000006
     d24:	72696200 	rsbvc	r6, r9, #0, 4
     d28:	6c5f3264 	lfmvs	f3, 2, [pc], {100}	; 0x64
     d2c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     d30:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     d34:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
     d38:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     d3c:	63616c42 	cmnvs	r1, #16896	; 0x4200
     d40:	6977006b 	ldmdbvs	r7!, {r0, r1, r3, r5, r6}^
     d44:	31686374 	smccc	34356	; 0x8634
     d48:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     d4c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     d50:	74695770 	strbtvc	r5, [r9], #-1904	; 0xfffff890
     d54:	694c6863 	stmdbvs	ip, {r0, r1, r5, r6, fp, sp, lr}^
     d58:	00746867 	rsbseq	r6, r4, r7, ror #16
     d5c:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     d60:	6a624f68 	bvs	1894b08 <startup-0x1e76b4f8>
     d64:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     d68:	5f316863 	svcpl	0x00316863
     d6c:	63616c62 	cmnvs	r1, #25088	; 0x6200
     d70:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     d74:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     d78:	57706d65 	ldrbpl	r6, [r0, -r5, ror #26]!
     d7c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     d80:	67694c33 			; <UNDEFINED> instruction: 0x67694c33
     d84:	74007468 	strvc	r7, [r0], #-1128	; 0xfffffb98
     d88:	57706d65 	ldrbpl	r6, [r0, -r5, ror #26]!
     d8c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     d90:	67694c32 			; <UNDEFINED> instruction: 0x67694c32
     d94:	77007468 	strvc	r7, [r0, -r8, ror #8]
     d98:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     d9c:	67694c31 			; <UNDEFINED> instruction: 0x67694c31
     da0:	74007468 	strvc	r7, [r0], #-1128	; 0xfffffb98
     da4:	57706d65 	ldrbpl	r6, [r0, -r5, ror #26]!
     da8:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     dac:	616c4232 	cmnvs	ip, r2, lsr r2
     db0:	77006b63 	strvc	r6, [r0, -r3, ror #22]
     db4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     db8:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     dbc:	5f746867 	svcpl	0x00746867
     dc0:	73746962 	cmnvc	r4, #1605632	; 0x188000
     dc4:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     dc8:	49336863 	ldmdbmi	r3!, {r0, r1, r5, r6, fp, sp, lr}
     dcc:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     dd0:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     dd4:	42336863 	eorsmi	r6, r3, #6488064	; 0x630000
     dd8:	6b63616c 	blvs	18d9390 <startup-0x1e726c70>
     ddc:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     de0:	5f336863 	svcpl	0x00336863
     de4:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     de8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     dec:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
     df0:	775f7469 	ldrbvc	r7, [pc, -r9, ror #8]
     df4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     df8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     dfc:	74695770 	strbtvc	r5, [r9], #-1904	; 0xfffff890
     e00:	6c426863 	mcrrvs	8, 6, r6, r2, cr3
     e04:	006b6361 	rsbeq	r6, fp, r1, ror #6
     e08:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     e0c:	625f3268 	subsvs	r3, pc, #104, 4	; 0x80000006
     e10:	6b63616c 	blvs	18d93c8 <startup-0x1e726c38>
     e14:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     e18:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
     e1c:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     e20:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     e24:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     e28:	00737469 	rsbseq	r7, r3, r9, ror #8
     e2c:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     e30:	72473368 	subvc	r3, r7, #104, 6	; 0xa0000001
     e34:	77007961 	strvc	r7, [r0, -r1, ror #18]
     e38:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     e3c:	61724732 	cmnvs	r2, r2, lsr r7
     e40:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     e44:	6957706d 	ldmdbvs	r7, {r0, r2, r3, r5, r6, ip, sp, lr}^
     e48:	47686374 			; <UNDEFINED> instruction: 0x47686374
     e4c:	00796172 	rsbseq	r6, r9, r2, ror r1
     e50:	706d6574 	rsbvc	r6, sp, r4, ror r5
     e54:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     e58:	72473268 	subvc	r3, r7, #104, 4	; 0x80000006
     e5c:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     e60:	57706d65 	ldrbpl	r6, [r0, -r5, ror #26]!
     e64:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     e68:	616c4233 	cmnvs	ip, r3, lsr r2
     e6c:	77006b63 	strvc	r6, [r0, -r3, ror #22]
     e70:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     e74:	696c5f31 	stmdbvs	ip!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     e78:	5f746867 	svcpl	0x00746867
     e7c:	73746962 	cmnvc	r4, #1605632	; 0x188000
     e80:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     e84:	5f326863 	svcpl	0x00326863
     e88:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     e8c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     e90:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
     e94:	34686374 	strbtcc	r6, [r8], #-884	; 0xfffffc8c
     e98:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     e9c:	69770065 	ldmdbvs	r7!, {r0, r2, r5, r6}^
     ea0:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     ea4:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     ea8:	69770074 	ldmdbvs	r7!, {r2, r4, r5, r6}^
     eac:	31686374 	smccc	34356	; 0x8634
     eb0:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     eb4:	69770065 	ldmdbvs	r7!, {r0, r2, r5, r6}^
     eb8:	31686374 	smccc	34356	; 0x8634
     ebc:	63616c42 	cmnvs	r1, #16896	; 0x4200
     ec0:	6977006b 	ldmdbvs	r7!, {r0, r1, r3, r5, r6}^
     ec4:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     ec8:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     ecc:	69770074 	ldmdbvs	r7!, {r2, r4, r5, r6}^
     ed0:	49686374 	stmdbmi	r8!, {r2, r4, r5, r6, r8, r9, sp, lr}^
     ed4:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     ed8:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     edc:	6957706d 	ldmdbvs	r7, {r0, r2, r3, r5, r6, ip, sp, lr}^
     ee0:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     ee4:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     ee8:	2f3a4300 	svccs	0x003a4300
     eec:	2f706f6d 	svccs	0x00706f6d
     ef0:	6f4d2f63 	svcvs	0x004d2f63
     ef4:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     ef8:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     efc:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     f00:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     f04:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     f08:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     f0c:	772f432f 	strvc	r4, [pc, -pc, lsr #6]!
     f10:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     f14:	7700632e 	strvc	r6, [r0, -lr, lsr #6]
     f18:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     f1c:	72675f31 	rsbvc	r5, r7, #49, 30	; 0xc4
     f20:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     f24:	00737469 	rsbseq	r7, r3, r9, ror #8
     f28:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     f2c:	625f3368 	subsvs	r3, pc, #104, 6	; 0xa0000001
     f30:	6b63616c 	blvs	18d94e8 <startup-0x1e726b18>
     f34:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     f38:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
     f3c:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     f40:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     f44:	61700065 	cmnvs	r0, r5, rrx
     f48:	67006567 	strvs	r6, [r0, -r7, ror #10]
     f4c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
     f50:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
     f54:	00646165 	rsbeq	r6, r4, r5, ror #2
     f58:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     f5c:	70007265 	andvc	r7, r0, r5, ror #4
     f60:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
     f64:	72640032 	rsbvc	r0, r4, #50	; 0x32
     f68:	675f7761 	ldrbvs	r7, [pc, -r1, ror #14]
     f6c:	5f656d61 	svcpl	0x00656d61
     f70:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     f74:	64007463 	strvs	r7, [r0], #-1123	; 0xfffffb9d
     f78:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     f7c:	63696d5f 	cmnvs	r9, #6080	; 0x17c0
     f80:	67006f72 	smlsdxvs	r0, r2, pc, r6	; <UNPREDICTABLE>
     f84:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
     f88:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
     f8c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     f90:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; e1c <startup-0x1ffff1e4>
     f94:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
     f98:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
     f9c:	625f7261 	subsvs	r7, pc, #268435462	; 0x10000006
     fa0:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
     fa4:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     fa8:	69700072 	ldmdbvs	r0!, {r1, r4, r5, r6}^
     fac:	006c6578 	rsbeq	r6, ip, r8, ror r5
     fb0:	6a624f67 	bvs	1894d54 <startup-0x1e76b2ac>
     fb4:	61726700 	cmnvs	r2, r0, lsl #14
     fb8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
     fbc:	6172645f 	cmnvs	r2, pc, asr r4
     fc0:	63735f77 	cmnvs	r3, #476	; 0x1dc
     fc4:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
     fc8:	6c656400 	cfstrdvs	mvd6, [r5], #-0
     fcc:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; f12 <startup-0x1ffff0ee>	; <UNPREDICTABLE>
     fd0:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
     fd4:	6f687300 	svcvs	0x00687300
     fd8:	72665f77 	rsbvc	r5, r6, #476	; 0x1dc
     fdc:	00656d61 	rsbeq	r6, r5, r1, ror #26
     fe0:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
     fe4:	7270735f 	rsbsvc	r7, r0, #2080374785	; 0x7c000001
     fe8:	00657469 	rsbeq	r7, r5, r9, ror #8
     fec:	616c6564 	cmnvs	ip, r4, ror #10
     ff0:	30355f79 	eorscc	r5, r5, r9, ror pc
     ff4:	00736e30 	rsbseq	r6, r3, r0, lsr lr
     ff8:	70617267 	rsbvc	r7, r1, r7, ror #4
     ffc:	5f636968 	svcpl	0x00636968
    1000:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    1004:	72670065 	rsbvc	r0, r7, #101	; 0x65
    1008:	63537961 	cmpvs	r3, #1589248	; 0x184000
    100c:	54656c61 	strbtpl	r6, [r5], #-3169	; 0xfffff39f
    1010:	00747365 	rsbseq	r7, r4, r5, ror #6
    1014:	70617267 	rsbvc	r7, r1, r7, ror #4
    1018:	5f636968 	svcpl	0x00636968
    101c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    1020:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1024:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
    1028:	43007261 	movwmi	r7, #609	; 0x261
    102c:	6f6d2f3a 	svcvs	0x006d2f3a
    1030:	2f632f70 	svccs	0x00632f70
    1034:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    1038:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    103c:	6f697461 	svcvs	0x00697461
    1040:	2f72656e 	svccs	0x0072656e
    1044:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    1048:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    104c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    1050:	6172672f 	cmnvs	r2, pc, lsr #14
    1054:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    1058:	00632e73 	rsbeq	r2, r3, r3, ror lr
    105c:	70617267 	rsbvc	r7, r1, r7, ror #4
    1060:	5f636968 	svcpl	0x00636968
    1064:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1068:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    106c:	6f630061 	svcvs	0x00630061
    1070:	00726f6c 	rsbseq	r6, r2, ip, ror #30
    1074:	5f746573 	svcpl	0x00746573
    1078:	645f7075 	ldrbvs	r7, [pc], #-117	; 1080 <startup-0x1fffef80>
    107c:	5f776172 	svcpl	0x00776172
    1080:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1084:	00737265 	rsbseq	r7, r3, r5, ror #4
    1088:	70617267 	rsbvc	r7, r1, r7, ror #4
    108c:	5f636968 	svcpl	0x00636968
    1090:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    1094:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1098:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    109c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    10a0:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
    10a4:	736e3035 	cmnvc	lr, #53	; 0x35
    10a8:	6c696600 	stclvs	6, cr6, [r9], #-0
    10ac:	6365526c 	cmnvs	r5, #108, 4	; 0xc0000006
    10b0:	676e6174 			; <UNDEFINED> instruction: 0x676e6174
    10b4:	6d00656c 	cfstr32vs	mvfx6, [r0, #-432]	; 0xfffffe50
    10b8:	006b7361 	rsbeq	r7, fp, r1, ror #6
    10bc:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
    10c0:	656c5f65 	strbvs	r5, [ip, #-3941]!	; 0xfffff09b
    10c4:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    10c8:	61726700 	cmnvs	r2, r0, lsl #14
    10cc:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    10d0:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    10d4:	645f6574 	ldrbvs	r6, [pc], #-1396	; 10dc <startup-0x1fffef24>
    10d8:	00617461 	rsbeq	r7, r1, r1, ror #8
    10dc:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    10e0:	64697700 	strbtvs	r7, [r9], #-1792	; 0xfffff900
    10e4:	695f6874 	ldmdbvs	pc, {r2, r4, r5, r6, fp, sp, lr}^	; <UNPREDICTABLE>
    10e8:	79625f6e 	stmdbvc	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    10ec:	00736574 	rsbseq	r6, r3, r4, ror r5
    10f0:	61656c63 	cmnvs	r5, r3, ror #24
    10f4:	6c615f72 	stclvs	15, cr5, [r1], #-456	; 0xfffffe38
    10f8:	61625f6c 	cmnvs	r2, ip, ror #30
    10fc:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
    1100:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1104:	6c630073 	stclvs	0, cr0, [r3], #-460	; 0xfffffe34
    1108:	52726165 	rsbspl	r6, r2, #1073741849	; 0x40000019
    110c:	61746365 	cmnvs	r4, r5, ror #6
    1110:	656c676e 	strbvs	r6, [ip, #-1902]!	; 0xfffff892
    1114:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1118:	73007865 	movwvc	r7, #2149	; 0x865
    111c:	63656c65 	cmnvs	r5, #25856	; 0x6500
    1120:	6f635f74 	svcvs	0x00635f74
    1124:	6f72746e 	svcvs	0x0072746e
    1128:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
    112c:	61726700 	cmnvs	r2, r0, lsl #14
    1130:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    1134:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    1138:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
    113c:	00796461 	rsbseq	r6, r9, r1, ror #8
    1140:	61656c63 	cmnvs	r5, r3, ror #24
    1144:	68745f72 	ldmdavs	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1148:	61427369 	cmpvs	r2, r9, ror #6
    114c:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
    1150:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1154:	61726700 	cmnvs	r2, r0, lsl #14
    1158:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    115c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    1160:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
    1164:	00657a69 	rsbeq	r7, r5, r9, ror #20
    1168:	70617267 	rsbvc	r7, r1, r7, ror #4
    116c:	5f636968 	svcpl	0x00636968
    1170:	61656c63 	cmnvs	r5, r3, ror #24
    1174:	63735f72 	cmnvs	r3, #456	; 0x1c8
    1178:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    117c:	616f6c00 	cmnvs	pc, r0, lsl #24
    1180:	6d695f64 	stclvs	15, cr5, [r9, #-400]!	; 0xfffffe70
    1184:	00656761 	rsbeq	r6, r5, r1, ror #14
    1188:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    118c:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    1190:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    1194:	6f62616c 	svcvs	0x0062616c
    1198:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    119c:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    11a0:	5049442f 	subpl	r4, r9, pc, lsr #8
    11a4:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    11a8:	2f686374 	svccs	0x00686374
    11ac:	6d692f43 	stclvs	15, cr2, [r9, #-268]!	; 0xfffffef4
    11b0:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
    11b4:	6f6c0063 	svcvs	0x006c0063
    11b8:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
    11bc:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
    11c0:	3a430065 	bcc	10c135c <startup-0x1ef3eca4>
    11c4:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
    11c8:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 1114 <startup-0x1fffeeec>
    11cc:	616c706f 	cmnvs	ip, pc, rrx
    11d0:	61726f62 	cmnvs	r2, r2, ror #30
    11d4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    11d8:	442f7265 	strtmi	r7, [pc], #-613	; 11e0 <startup-0x1fffee20>
    11dc:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
    11e0:	63746957 	cmnvs	r4, #1425408	; 0x15c000
    11e4:	2f432f68 	svccs	0x00432f68
    11e8:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
    11ec:	632e6574 			; <UNDEFINED> instruction: 0x632e6574
    11f0:	646f4d00 	strbtvs	r4, [pc], #-3328	; 11f8 <startup-0x1fffee08>
    11f4:	73007265 	movwvc	r7, #613	; 0x265
    11f8:	755f7465 	ldrbvc	r7, [pc, #-1125]	; d9b <startup-0x1ffff265>
    11fc:	49445f70 	stmdbmi	r4, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1200:	646f004c 	strbtvs	r0, [pc], #-76	; 1208 <startup-0x1fffedf8>
    1204:	67694872 			; <UNDEFINED> instruction: 0x67694872
    1208:	546f0068 	strbtpl	r0, [pc], #-104	; 1210 <startup-0x1fffedf0>
    120c:	72657079 	rsbvc	r7, r5, #121	; 0x79
    1210:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1214:	7550004f 	ldrbvc	r0, [r0, #-79]	; 0xffffffb1
    1218:	00726450 	rsbseq	r6, r2, r0, asr r4
    121c:	52726469 	rsbspl	r6, r2, #1761607680	; 0x69000000
    1220:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    1224:	00646576 	rsbeq	r6, r4, r6, ror r5
    1228:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    122c:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    1230:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    1234:	6f62616c 	svcvs	0x0062616c
    1238:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    123c:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    1240:	5049442f 	subpl	r4, r9, pc, lsr #8
    1244:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    1248:	2f686374 	svccs	0x00686374
    124c:	70672f43 	rsbvc	r2, r7, r3, asr #30
    1250:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
    1254:	52746f00 	rsbspl	r6, r4, #0, 30
    1258:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    125c:	00646576 	rsbeq	r6, r4, r6, ror r5
    1260:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1264:	4c49445f 	cfstrdmi	mvd4, [r9], {95}	; 0x5f
    1268:	6e69735f 	mcrvs	3, 3, r7, cr9, cr15, {2}
    126c:	00656c67 	rsbeq	r6, r5, r7, ror #24
    1270:	4c72646f 	cfldrdmi	mvd6, [r2], #-444	; 0xfffffe44
    1274:	6f00776f 	svcvs	0x0000776f
    1278:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
    127c:	69007264 	stmdbvs	r0, {r2, r5, r6, r9, ip, sp, lr}
    1280:	69487264 	stmdbvs	r8, {r2, r5, r6, r9, ip, sp, lr}^
    1284:	69006867 	stmdbvs	r0, {r0, r1, r2, r5, r6, fp, sp, lr}
    1288:	6f4c7264 	svcvs	0x004c7264
    128c:	646f0077 	strbtvs	r0, [pc], #-119	; 1294 <startup-0x1fffed6c>
    1290:	73655272 	cmnvc	r5, #536870919	; 0x20000007
    1294:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    1298:	65720064 	ldrbvs	r0, [r2, #-100]!	; 0xffffff9c
    129c:	445f6461 	ldrbmi	r6, [pc], #-1121	; 12a4 <startup-0x1fffed5c>
    12a0:	69004c49 	stmdbvs	r0, {r0, r3, r6, sl, fp, lr}
    12a4:	5f74696e 	svcpl	0x0074696e
    12a8:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
    12ac:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
    12b0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    12b4:	696d696c 	stmdbvs	sp!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    12b8:	61003274 	tstvs	r0, r4, ror r2
    12bc:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    12c0:	6165725f 	cmnvs	r5, pc, asr r2
    12c4:	61645f64 	cmnvs	r4, r4, ror #30
    12c8:	73006174 	movwvc	r6, #372	; 0x174
    12cc:	755f7465 	ldrbvc	r7, [pc, #-1125]	; e6f <startup-0x1ffff191>
    12d0:	73615f70 	cmnvc	r1, #112, 30	; 0x1c0
    12d4:	00696963 	rsbeq	r6, r9, r3, ror #18
    12d8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    12dc:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
    12e0:	63007469 	movwvs	r7, #1129	; 0x469
    12e4:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
    12e8:	6c63006e 	stclvs	0, cr0, [r3], #-440	; 0xfffffe48
    12ec:	5f726165 	svcpl	0x00726165
    12f0:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    12f4:	73610069 	cmnvc	r1, #105	; 0x69
    12f8:	5f696963 	svcpl	0x00696963
    12fc:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    1300:	61705f65 	cmnvs	r0, r5, ror #30
    1304:	61007472 	tstvs	r0, r2, ror r4
    1308:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    130c:	6165725f 	cmnvs	r5, pc, asr r2
    1310:	6f635f64 	svcvs	0x00635f64
    1314:	6f72746e 	svcvs	0x0072746e
    1318:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
    131c:	63736100 	cmnvs	r3, #0, 2
    1320:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
    1324:	5f6c7274 	svcpl	0x006c7274
    1328:	5f746962 	svcpl	0x00746962
    132c:	00746573 	rsbseq	r6, r4, r3, ror r5
    1330:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1334:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
    1338:	5f657469 	svcpl	0x00657469
    133c:	00646d63 	rsbeq	r6, r4, r3, ror #26
    1340:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
    1344:	65740031 	ldrbvs	r0, [r4, #-49]!	; 0xffffffcf
    1348:	00327473 	eorseq	r7, r2, r3, ror r4
    134c:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
    1350:	00737365 	rsbseq	r7, r3, r5, ror #6
    1354:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1358:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
    135c:	5f657469 	svcpl	0x00657469
    1360:	61746164 	cmnvs	r4, r4, ror #2
    1364:	63736100 	cmnvs	r3, #0, 2
    1368:	745f6969 	ldrbvc	r6, [pc], #-2409	; 1370 <startup-0x1fffec90>
    136c:	00747365 	rsbseq	r7, r4, r5, ror #6
    1370:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1374:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
    1378:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
    137c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    1380:	73610073 	cmnvc	r1, #115	; 0x73
    1384:	5f696963 	svcpl	0x00696963
    1388:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    138c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1390:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
    1394:	61007261 	tstvs	r0, r1, ror #4
    1398:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    139c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    13a0:	61006574 	tstvs	r0, r4, ror r5
    13a4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    13a8:	546f675f 	strbtpl	r6, [pc], #-1887	; 13b0 <startup-0x1fffec50>
    13ac:	0059586f 	subseq	r5, r9, pc, ror #16
    13b0:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    13b4:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
    13b8:	5f657469 	svcpl	0x00657469
    13bc:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
    13c0:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
    13c4:	61007265 	tstvs	r0, r5, ror #4
    13c8:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    13cc:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    13d0:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
    13d4:	00726168 	rsbseq	r6, r2, r8, ror #2
    13d8:	696d696c 	stmdbvs	sp!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    13dc:	43003174 	movwmi	r3, #372	; 0x174
    13e0:	6f6d2f3a 	svcvs	0x006d2f3a
    13e4:	2f632f70 	svccs	0x00632f70
    13e8:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    13ec:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    13f0:	6f697461 	svcvs	0x00697461
    13f4:	2f72656e 	svccs	0x0072656e
    13f8:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    13fc:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    1400:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    1404:	6373612f 	cmnvs	r3, #-1073741813	; 0xc000000b
    1408:	645f6969 	ldrbvs	r6, [pc], #-2409	; 1410 <startup-0x1fffebf0>
    140c:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
    1410:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
    1414:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
    1418:	6c735f74 	ldclvs	15, cr5, [r3], #-464	; 0xfffffe30
    141c:	745f776f 	ldrbvc	r7, [pc], #-1903	; 1424 <startup-0x1fffebdc>
    1420:	00747865 	rsbseq	r7, r4, r5, ror #16
    1424:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
    1428:	6f5f6874 	svcvs	0x005f6874
    142c:	6f725f66 	svcvs	0x00725f66
    1430:	43003177 	movwmi	r3, #375	; 0x177
    1434:	6f6d2f3a 	svcvs	0x006d2f3a
    1438:	2f632f70 	svccs	0x00632f70
    143c:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    1440:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    1444:	6f697461 	svcvs	0x00697461
    1448:	2f72656e 	svccs	0x0072656e
    144c:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    1450:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    1454:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    1458:	6f6c732f 	svcvs	0x006c732f
    145c:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
    1460:	632e7478 			; <UNDEFINED> instruction: 0x632e7478
    1464:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1468:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    146c:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    1470:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
    1474:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1478:	616c4273 	smcvs	50211	; 0xc423
    147c:	69006b63 	stmdbvs	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    1480:	6f6f646e 	svcvs	0x006f646e
    1484:	6d497372 	stclvs	3, cr7, [r9, #-456]	; 0xfffffe38
    1488:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    148c:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1490:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1494:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
    1498:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
    149c:	00737469 	rsbseq	r7, r3, r9, ror #8
    14a0:	706d6574 	rsbvc	r6, sp, r4, ror r5
    14a4:	6f646e49 	svcvs	0x00646e49
    14a8:	4773726f 	ldrbmi	r7, [r3, -pc, ror #4]!
    14ac:	00796172 	rsbseq	r6, r9, r2, ror r1
    14b0:	6f646e69 	svcvs	0x00646e69
    14b4:	5f73726f 	svcpl	0x0073726f
    14b8:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
    14bc:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    14c0:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    14c4:	6e49706d 	cdpvs	0, 4, cr7, cr9, cr13, {3}
    14c8:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    14cc:	67694c73 			; <UNDEFINED> instruction: 0x67694c73
    14d0:	69007468 	stmdbvs	r0, {r3, r5, r6, sl, ip, sp, lr}
    14d4:	6f6f646e 	svcvs	0x006f646e
    14d8:	694c7372 	stmdbvs	ip, {r1, r4, r5, r6, r8, r9, ip, sp, lr}^
    14dc:	00746867 	rsbseq	r6, r4, r7, ror #16
    14e0:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    14e4:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    14e8:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    14ec:	6f62616c 	svcvs	0x0062616c
    14f0:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    14f4:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    14f8:	5049442f 	subpl	r4, r9, pc, lsr #8
    14fc:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    1500:	2f686374 	svccs	0x00686374
    1504:	6e692f43 	cdpvs	15, 6, cr2, cr9, cr3, {2}
    1508:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    150c:	00632e73 	rsbeq	r2, r3, r3, ror lr
    1510:	6f646e69 	svcvs	0x00646e69
    1514:	5f73726f 	svcpl	0x0073726f
    1518:	63616c62 	cmnvs	r1, #25088	; 0x6200
    151c:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1520:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
    1524:	49706d65 	ldmdbmi	r0!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    1528:	6f6f646e 	svcvs	0x006f646e
    152c:	6c427372 	mcrrvs	3, 7, r7, r2, cr2
    1530:	006b6361 	rsbeq	r6, fp, r1, ror #6
    1534:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    1538:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
    153c:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1540:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1544:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1548:	006a624f 	rsbeq	r6, sl, pc, asr #4
    154c:	6f646e69 	svcvs	0x00646e69
    1550:	4773726f 	ldrbmi	r7, [r3, -pc, ror #4]!
    1554:	00796172 	rsbseq	r6, r9, r2, ror r1
    1558:	6f646e69 	svcvs	0x00646e69
    155c:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1560:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    1564:	6e690074 	mcrvs	0, 3, r0, cr9, cr4, {3}
    1568:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    156c:	625f3273 	subsvs	r3, pc, #805306375	; 0x30000007
    1570:	6b63616c 	blvs	18d9b28 <startup-0x1e7264d8>
    1574:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1578:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    157c:	6e49706d 	cdpvs	0, 4, cr7, cr9, cr13, {3}
    1580:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1584:	694c3273 	stmdbvs	ip, {r0, r1, r4, r5, r6, r9, ip, sp}^
    1588:	00746867 	rsbseq	r6, r4, r7, ror #16
    158c:	6f646e69 	svcvs	0x00646e69
    1590:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1594:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    1598:	2f3a4300 	svccs	0x003a4300
    159c:	2f706f6d 	svccs	0x00706f6d
    15a0:	6f4d2f63 	svcvs	0x004d2f63
    15a4:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    15a8:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    15ac:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    15b0:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    15b4:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    15b8:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    15bc:	692f432f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r8, r9, lr}	; <UNPREDICTABLE>
    15c0:	6f6f646e 	svcvs	0x006f646e
    15c4:	2e327372 	mrccs	3, 1, r7, cr2, cr2, {3}
    15c8:	65740063 	ldrbvs	r0, [r4, #-99]!	; 0xffffff9d
    15cc:	6e49706d 	cdpvs	0, 4, cr7, cr9, cr13, {3}
    15d0:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    15d4:	6c423273 	sfmvs	f3, 2, [r2], {115}	; 0x73
    15d8:	006b6361 	rsbeq	r6, fp, r1, ror #6
    15dc:	6f646e69 	svcvs	0x00646e69
    15e0:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    15e4:	63616c42 	cmnvs	r1, #16896	; 0x4200
    15e8:	6e69006b 	cdpvs	0, 6, cr0, cr9, cr11, {3}
    15ec:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    15f0:	6d493273 	sfmvs	f3, 2, [r9, #-460]	; 0xfffffe34
    15f4:	00656761 	rsbeq	r6, r5, r1, ror #14
    15f8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    15fc:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
    1600:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1604:	6e690032 	mcrvs	0, 3, r0, cr9, cr2, {1}
    1608:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    160c:	6c5f3273 	lfmvs	f3, 2, [pc], {115}	; 0x73
    1610:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1614:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1618:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
    161c:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1620:	6d493273 	sfmvs	f3, 2, [r9, #-460]	; 0xfffffe34
    1624:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    1628:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    162c:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1630:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
    1634:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
    1638:	00737469 	rsbseq	r7, r3, r9, ror #8
    163c:	6f646e69 	svcvs	0x00646e69
    1640:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1644:	006a624f 	rsbeq	r6, sl, pc, asr #4
    1648:	706d6574 	rsbvc	r6, sp, r4, ror r5
    164c:	6f646e49 	svcvs	0x00646e49
    1650:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1654:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000024 	andeq	r0, r0, r4, lsr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000034 	andcs	r0, r0, r4, lsr r0
  48:	000001c8 	andeq	r0, r0, r8, asr #3
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	300e4101 	andcc	r4, lr, r1, lsl #2
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	00000020 	andeq	r0, r0, r0, lsr #32
  60:	00000000 	andeq	r0, r0, r0
  64:	200001fc 	strdcs	r0, [r0], -ip
  68:	00000d68 	andeq	r0, r0, r8, ror #26
  6c:	400c0e41 	andmi	r0, ip, r1, asr #28
  70:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  74:	018e4002 	orreq	r4, lr, r2
  78:	06d80e42 	ldrbeq	r0, [r8], r2, asr #28
  7c:	00070d41 	andeq	r0, r7, r1, asr #26
  80:	0000000c 	andeq	r0, r0, ip
  84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  88:	7c020001 	stcvc	0, cr0, [r2], {1}
  8c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000080 	andeq	r0, r0, r0, lsl #1
  98:	20000f64 	andcs	r0, r0, r4, ror #30
  9c:	00000010 	andeq	r0, r0, r0, lsl r0
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	100e4101 	andne	r4, lr, r1, lsl #2
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000080 	andeq	r0, r0, r0, lsl #1
  b8:	20000f74 	andcs	r0, r0, r4, ror pc
  bc:	00000046 	andeq	r0, r0, r6, asr #32
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	100e4101 	andne	r4, lr, r1, lsl #2
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000000c 	andeq	r0, r0, ip
  d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  d8:	7c020001 	stcvc	0, cr0, [r2], {1}
  dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  e8:	20000fbc 			; <UNDEFINED> instruction: 0x20000fbc
  ec:	00000184 	andeq	r0, r0, r4, lsl #3
  f0:	40080e41 	andmi	r0, r8, r1, asr #28
  f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f8:	380e4101 	stmdacc	lr, {r0, r8, lr}
  fc:	00070d41 	andeq	r0, r7, r1, asr #26
 100:	00000020 	andeq	r0, r0, r0, lsr #32
 104:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 108:	20001140 	andcs	r1, r0, r0, asr #2
 10c:	00000124 	andeq	r0, r0, r4, lsr #2
 110:	400c0e41 	andmi	r0, ip, r1, asr #28
 114:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 118:	018e4002 	orreq	r4, lr, r2
 11c:	41180e41 	tstmi	r8, r1, asr #28
 120:	0000070d 	andeq	r0, r0, sp, lsl #14
 124:	0000000c 	andeq	r0, r0, ip
 128:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 12c:	7c020001 	stcvc	0, cr0, [r2], {1}
 130:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 134:	0000001c 	andeq	r0, r0, ip, lsl r0
 138:	00000124 	andeq	r0, r0, r4, lsr #2
 13c:	20001264 	andcs	r1, r0, r4, ror #4
 140:	000000fc 	strdeq	r0, [r0], -ip
 144:	40080e41 	andmi	r0, r8, r1, asr #28
 148:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 14c:	100e4101 	andne	r4, lr, r1, lsl #2
 150:	00070d41 	andeq	r0, r7, r1, asr #26
 154:	0000000c 	andeq	r0, r0, ip
 158:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 15c:	7c020001 	stcvc	0, cr0, [r2], {1}
 160:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 164:	0000001c 	andeq	r0, r0, ip, lsl r0
 168:	00000154 	andeq	r0, r0, r4, asr r1
 16c:	20001360 	andcs	r1, r0, r0, ror #6
 170:	0000020c 	andeq	r0, r0, ip, lsl #4
 174:	40080e41 	andmi	r0, r8, r1, asr #28
 178:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 17c:	480e4101 	stmdami	lr, {r0, r8, lr}
 180:	00070d41 	andeq	r0, r7, r1, asr #26
 184:	00000020 	andeq	r0, r0, r0, lsr #32
 188:	00000154 	andeq	r0, r0, r4, asr r1
 18c:	2000156c 	andcs	r1, r0, ip, ror #10
 190:	00000158 	andeq	r0, r0, r8, asr r1
 194:	400c0e41 	andmi	r0, ip, r1, asr #28
 198:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 19c:	018e4002 	orreq	r4, lr, r2
 1a0:	41180e41 	tstmi	r8, r1, asr #28
 1a4:	0000070d 	andeq	r0, r0, sp, lsl #14
 1a8:	0000000c 	andeq	r0, r0, ip
 1ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1b0:	7c020001 	stcvc	0, cr0, [r2], {1}
 1b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1bc:	000001a8 	andeq	r0, r0, r8, lsr #3
 1c0:	200016c4 	andcs	r1, r0, r4, asr #13
 1c4:	00000140 	andeq	r0, r0, r0, asr #2
 1c8:	40080e41 	andmi	r0, r8, r1, asr #28
 1cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d0:	300e4101 	andcc	r4, lr, r1, lsl #2
 1d4:	00070d41 	andeq	r0, r7, r1, asr #26
 1d8:	00000020 	andeq	r0, r0, r0, lsr #32
 1dc:	000001a8 	andeq	r0, r0, r8, lsr #3
 1e0:	20001804 	andcs	r1, r0, r4, lsl #16
 1e4:	000000f8 	strdeq	r0, [r0], -r8
 1e8:	400c0e41 	andmi	r0, ip, r1, asr #28
 1ec:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 1f0:	018e4002 	orreq	r4, lr, r2
 1f4:	41180e41 	tstmi	r8, r1, asr #28
 1f8:	0000070d 	andeq	r0, r0, sp, lsl #14
 1fc:	0000000c 	andeq	r0, r0, ip
 200:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 204:	7c020001 	stcvc	0, cr0, [r2], {1}
 208:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 20c:	00000018 	andeq	r0, r0, r8, lsl r0
 210:	000001fc 	strdeq	r0, [r0], -ip
 214:	200018fc 	strdcs	r1, [r0], -ip
 218:	00000044 	andeq	r0, r0, r4, asr #32
 21c:	40080e41 	andmi	r0, r8, r1, asr #28
 220:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 224:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 228:	00000018 	andeq	r0, r0, r8, lsl r0
 22c:	000001fc 	strdeq	r0, [r0], -ip
 230:	20001940 	andcs	r1, r0, r0, asr #18
 234:	00000044 	andeq	r0, r0, r4, asr #32
 238:	40080e41 	andmi	r0, r8, r1, asr #28
 23c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 240:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 244:	0000001c 	andeq	r0, r0, ip, lsl r0
 248:	000001fc 	strdeq	r0, [r0], -ip
 24c:	20001984 	andcs	r1, r0, r4, lsl #19
 250:	0000002c 	andeq	r0, r0, ip, lsr #32
 254:	40080e41 	andmi	r0, r8, r1, asr #28
 258:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 25c:	100e4101 	andne	r4, lr, r1, lsl #2
 260:	00070d41 	andeq	r0, r7, r1, asr #26
 264:	0000001c 	andeq	r0, r0, ip, lsl r0
 268:	000001fc 	strdeq	r0, [r0], -ip
 26c:	200019b0 			; <UNDEFINED> instruction: 0x200019b0
 270:	00000026 	andeq	r0, r0, r6, lsr #32
 274:	40080e41 	andmi	r0, r8, r1, asr #28
 278:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 27c:	100e4101 	andne	r4, lr, r1, lsl #2
 280:	00070d41 	andeq	r0, r7, r1, asr #26
 284:	0000001c 	andeq	r0, r0, ip, lsl r0
 288:	000001fc 	strdeq	r0, [r0], -ip
 28c:	200019d6 	ldrdcs	r1, [r0], -r6
 290:	00000032 	andeq	r0, r0, r2, lsr r0
 294:	40080e41 	andmi	r0, r8, r1, asr #28
 298:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 29c:	180e4101 	stmdane	lr, {r0, r8, lr}
 2a0:	00070d41 	andeq	r0, r7, r1, asr #26
 2a4:	00000018 	andeq	r0, r0, r8, lsl r0
 2a8:	000001fc 	strdeq	r0, [r0], -ip
 2ac:	20001a08 	andcs	r1, r0, r8, lsl #20
 2b0:	00000018 	andeq	r0, r0, r8, lsl r0
 2b4:	40080e41 	andmi	r0, r8, r1, asr #28
 2b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2bc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2c0:	00000018 	andeq	r0, r0, r8, lsl r0
 2c4:	000001fc 	strdeq	r0, [r0], -ip
 2c8:	20001a20 	andcs	r1, r0, r0, lsr #20
 2cc:	00000030 	andeq	r0, r0, r0, lsr r0
 2d0:	40080e41 	andmi	r0, r8, r1, asr #28
 2d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e0:	000001fc 	strdeq	r0, [r0], -ip
 2e4:	20001a50 	andcs	r1, r0, r0, asr sl
 2e8:	00000050 	andeq	r0, r0, r0, asr r0
 2ec:	40080e41 	andmi	r0, r8, r1, asr #28
 2f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2f8:	00070d41 	andeq	r0, r7, r1, asr #26
 2fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 300:	000001fc 	strdeq	r0, [r0], -ip
 304:	20001aa0 	andcs	r1, r0, r0, lsr #21
 308:	00000058 	andeq	r0, r0, r8, asr r0
 30c:	40080e41 	andmi	r0, r8, r1, asr #28
 310:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 314:	180e4101 	stmdane	lr, {r0, r8, lr}
 318:	00070d41 	andeq	r0, r7, r1, asr #26
 31c:	0000001c 	andeq	r0, r0, ip, lsl r0
 320:	000001fc 	strdeq	r0, [r0], -ip
 324:	20001af8 	strdcs	r1, [r0], -r8
 328:	00000066 	andeq	r0, r0, r6, rrx
 32c:	40080e41 	andmi	r0, r8, r1, asr #28
 330:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 334:	100e4101 	andne	r4, lr, r1, lsl #2
 338:	00070d41 	andeq	r0, r7, r1, asr #26
 33c:	0000001c 	andeq	r0, r0, ip, lsl r0
 340:	000001fc 	strdeq	r0, [r0], -ip
 344:	20001b5e 	andcs	r1, r0, lr, asr fp
 348:	0000006e 	andeq	r0, r0, lr, rrx
 34c:	40080e41 	andmi	r0, r8, r1, asr #28
 350:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 354:	100e4101 	andne	r4, lr, r1, lsl #2
 358:	00070d41 	andeq	r0, r7, r1, asr #26
 35c:	0000001c 	andeq	r0, r0, ip, lsl r0
 360:	000001fc 	strdeq	r0, [r0], -ip
 364:	20001bcc 	andcs	r1, r0, ip, asr #23
 368:	00000094 	muleq	r0, r4, r0
 36c:	40080e41 	andmi	r0, r8, r1, asr #28
 370:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 374:	180e4101 	stmdane	lr, {r0, r8, lr}
 378:	00070d41 	andeq	r0, r7, r1, asr #26
 37c:	0000001c 	andeq	r0, r0, ip, lsl r0
 380:	000001fc 	strdeq	r0, [r0], -ip
 384:	20001c60 	andcs	r1, r0, r0, ror #24
 388:	0000002a 	andeq	r0, r0, sl, lsr #32
 38c:	40080e41 	andmi	r0, r8, r1, asr #28
 390:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 394:	100e4101 	andne	r4, lr, r1, lsl #2
 398:	00070d41 	andeq	r0, r7, r1, asr #26
 39c:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a0:	000001fc 	strdeq	r0, [r0], -ip
 3a4:	20001c8a 	andcs	r1, r0, sl, lsl #25
 3a8:	0000007e 	andeq	r0, r0, lr, ror r0
 3ac:	40080e41 	andmi	r0, r8, r1, asr #28
 3b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3b4:	100e4101 	andne	r4, lr, r1, lsl #2
 3b8:	00070d41 	andeq	r0, r7, r1, asr #26
 3bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c0:	000001fc 	strdeq	r0, [r0], -ip
 3c4:	20001d08 	andcs	r1, r0, r8, lsl #26
 3c8:	00000046 	andeq	r0, r0, r6, asr #32
 3cc:	40080e41 	andmi	r0, r8, r1, asr #28
 3d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3d4:	100e4101 	andne	r4, lr, r1, lsl #2
 3d8:	00070d41 	andeq	r0, r7, r1, asr #26
 3dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e0:	000001fc 	strdeq	r0, [r0], -ip
 3e4:	20001d4e 	andcs	r1, r0, lr, asr #26
 3e8:	00000046 	andeq	r0, r0, r6, asr #32
 3ec:	40080e41 	andmi	r0, r8, r1, asr #28
 3f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3f4:	100e4101 	andne	r4, lr, r1, lsl #2
 3f8:	00070d41 	andeq	r0, r7, r1, asr #26
 3fc:	00000018 	andeq	r0, r0, r8, lsl r0
 400:	000001fc 	strdeq	r0, [r0], -ip
 404:	20001d94 	mulcs	r0, r4, sp
 408:	0000006e 	andeq	r0, r0, lr, rrx
 40c:	40080e41 	andmi	r0, r8, r1, asr #28
 410:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 414:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 418:	0000001c 	andeq	r0, r0, ip, lsl r0
 41c:	000001fc 	strdeq	r0, [r0], -ip
 420:	20001e02 	andcs	r1, r0, r2, lsl #28
 424:	00000066 	andeq	r0, r0, r6, rrx
 428:	40080e41 	andmi	r0, r8, r1, asr #28
 42c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 430:	100e4101 	andne	r4, lr, r1, lsl #2
 434:	00070d41 	andeq	r0, r7, r1, asr #26
 438:	0000001c 	andeq	r0, r0, ip, lsl r0
 43c:	000001fc 	strdeq	r0, [r0], -ip
 440:	20001e68 	andcs	r1, r0, r8, ror #28
 444:	00000180 	andeq	r0, r0, r0, lsl #3
 448:	40080e41 	andmi	r0, r8, r1, asr #28
 44c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 450:	200e4101 	andcs	r4, lr, r1, lsl #2
 454:	00070d41 	andeq	r0, r7, r1, asr #26
 458:	0000001c 	andeq	r0, r0, ip, lsl r0
 45c:	000001fc 	strdeq	r0, [r0], -ip
 460:	20001fe8 	andcs	r1, r0, r8, ror #31
 464:	000001a0 	andeq	r0, r0, r0, lsr #3
 468:	40080e41 	andmi	r0, r8, r1, asr #28
 46c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 470:	280e4101 	stmdacs	lr, {r0, r8, lr}
 474:	00070d41 	andeq	r0, r7, r1, asr #26
 478:	0000001c 	andeq	r0, r0, ip, lsl r0
 47c:	000001fc 	strdeq	r0, [r0], -ip
 480:	20002188 	andcs	r2, r0, r8, lsl #3
 484:	000000d6 	ldrdeq	r0, [r0], -r6
 488:	40080e41 	andmi	r0, r8, r1, asr #28
 48c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 490:	200e4101 	andcs	r4, lr, r1, lsl #2
 494:	00070d41 	andeq	r0, r7, r1, asr #26
 498:	00000024 	andeq	r0, r0, r4, lsr #32
 49c:	000001fc 	strdeq	r0, [r0], -ip
 4a0:	2000225e 	andcs	r2, r0, lr, asr r2
 4a4:	0000011a 	andeq	r0, r0, sl, lsl r1
 4a8:	40100e41 	andsmi	r0, r0, r1, asr #28
 4ac:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 4b0:	02874003 	addeq	r4, r7, #3
 4b4:	41018e40 	tstmi	r1, r0, asr #28
 4b8:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 4bc:	00000007 	andeq	r0, r0, r7
 4c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4c4:	000001fc 	strdeq	r0, [r0], -ip
 4c8:	20002378 	andcs	r2, r0, r8, ror r3
 4cc:	00000052 	andeq	r0, r0, r2, asr r0
 4d0:	40080e41 	andmi	r0, r8, r1, asr #28
 4d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4d8:	200e4101 	andcs	r4, lr, r1, lsl #2
 4dc:	00070d41 	andeq	r0, r7, r1, asr #26
 4e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4e4:	000001fc 	strdeq	r0, [r0], -ip
 4e8:	200023ca 	andcs	r2, r0, sl, asr #7
 4ec:	00000052 	andeq	r0, r0, r2, asr r0
 4f0:	40080e41 	andmi	r0, r8, r1, asr #28
 4f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4f8:	200e4101 	andcs	r4, lr, r1, lsl #2
 4fc:	00070d41 	andeq	r0, r7, r1, asr #26
 500:	00000020 	andeq	r0, r0, r0, lsr #32
 504:	000001fc 	strdeq	r0, [r0], -ip
 508:	2000241c 	andcs	r2, r0, ip, lsl r4
 50c:	00000130 	andeq	r0, r0, r0, lsr r1
 510:	400c0e41 	andmi	r0, ip, r1, asr #28
 514:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 518:	018e4002 	orreq	r4, lr, r2
 51c:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 520:	0000070d 	andeq	r0, r0, sp, lsl #14
 524:	0000001c 	andeq	r0, r0, ip, lsl r0
 528:	000001fc 	strdeq	r0, [r0], -ip
 52c:	2000254c 	andcs	r2, r0, ip, asr #10
 530:	00000108 	andeq	r0, r0, r8, lsl #2
 534:	40080e41 	andmi	r0, r8, r1, asr #28
 538:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 53c:	100e4101 	andne	r4, lr, r1, lsl #2
 540:	00070d41 	andeq	r0, r7, r1, asr #26
 544:	0000001c 	andeq	r0, r0, ip, lsl r0
 548:	000001fc 	strdeq	r0, [r0], -ip
 54c:	20002654 	andcs	r2, r0, r4, asr r6
 550:	00000082 	andeq	r0, r0, r2, lsl #1
 554:	40080e41 	andmi	r0, r8, r1, asr #28
 558:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 55c:	200e4101 	andcs	r4, lr, r1, lsl #2
 560:	18070c41 	stmdane	r7, {r0, r6, sl, fp}
 564:	0000001c 	andeq	r0, r0, ip, lsl r0
 568:	000001fc 	strdeq	r0, [r0], -ip
 56c:	200026d6 	ldrdcs	r2, [r0], -r6
 570:	0000006a 	andeq	r0, r0, sl, rrx
 574:	40080e41 	andmi	r0, r8, r1, asr #28
 578:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 57c:	100e4101 	andne	r4, lr, r1, lsl #2
 580:	00070d41 	andeq	r0, r7, r1, asr #26
 584:	0000000c 	andeq	r0, r0, ip
 588:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 58c:	7c020001 	stcvc	0, cr0, [r2], {1}
 590:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 594:	0000001c 	andeq	r0, r0, ip, lsl r0
 598:	00000584 	andeq	r0, r0, r4, lsl #11
 59c:	20002740 	andcs	r2, r0, r0, asr #14
 5a0:	00000028 	andeq	r0, r0, r8, lsr #32
 5a4:	40080e41 	andmi	r0, r8, r1, asr #28
 5a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5ac:	180e4101 	stmdane	lr, {r0, r8, lr}
 5b0:	00070d41 	andeq	r0, r7, r1, asr #26
 5b4:	0000000c 	andeq	r0, r0, ip
 5b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 5bc:	7c020001 	stcvc	0, cr0, [r2], {1}
 5c0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5c8:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
 5cc:	20002768 	andcs	r2, r0, r8, ror #14
 5d0:	00000028 	andeq	r0, r0, r8, lsr #32
 5d4:	40080e41 	andmi	r0, r8, r1, asr #28
 5d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5dc:	180e4101 	stmdane	lr, {r0, r8, lr}
 5e0:	00070d41 	andeq	r0, r7, r1, asr #26
 5e4:	0000000c 	andeq	r0, r0, ip
 5e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 5ec:	7c020001 	stcvc	0, cr0, [r2], {1}
 5f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5f4:	00000018 	andeq	r0, r0, r8, lsl r0
 5f8:	000005e4 	andeq	r0, r0, r4, ror #11
 5fc:	20002790 	mulcs	r0, r0, r7
 600:	00000018 	andeq	r0, r0, r8, lsl r0
 604:	40080e41 	andmi	r0, r8, r1, asr #28
 608:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 60c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 610:	00000018 	andeq	r0, r0, r8, lsl r0
 614:	000005e4 	andeq	r0, r0, r4, ror #11
 618:	200027a8 	andcs	r2, r0, r8, lsr #15
 61c:	00000020 	andeq	r0, r0, r0, lsr #32
 620:	40080e41 	andmi	r0, r8, r1, asr #28
 624:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 628:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 62c:	00000020 	andeq	r0, r0, r0, lsr #32
 630:	000005e4 	andeq	r0, r0, r4, ror #11
 634:	200027c8 	andcs	r2, r0, r8, asr #15
 638:	00000034 	andeq	r0, r0, r4, lsr r0
 63c:	400c0e41 	andmi	r0, ip, r1, asr #28
 640:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 644:	018e4002 	orreq	r4, lr, r2
 648:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 64c:	0000070d 	andeq	r0, r0, sp, lsl #14
 650:	0000000c 	andeq	r0, r0, ip
 654:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 658:	7c020001 	stcvc	0, cr0, [r2], {1}
 65c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 660:	0000001c 	andeq	r0, r0, ip, lsl r0
 664:	00000650 	andeq	r0, r0, r0, asr r6
 668:	200027fc 	strdcs	r2, [r0], -ip
 66c:	00000044 	andeq	r0, r0, r4, asr #32
 670:	40080e41 	andmi	r0, r8, r1, asr #28
 674:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 678:	180e4101 	stmdane	lr, {r0, r8, lr}
 67c:	00070d41 	andeq	r0, r7, r1, asr #26
 680:	0000001c 	andeq	r0, r0, ip, lsl r0
 684:	00000650 	andeq	r0, r0, r0, asr r6
 688:	20002840 	andcs	r2, r0, r0, asr #16
 68c:	00000050 	andeq	r0, r0, r0, asr r0
 690:	40080e41 	andmi	r0, r8, r1, asr #28
 694:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 698:	180e4101 	stmdane	lr, {r0, r8, lr}
 69c:	00070d41 	andeq	r0, r7, r1, asr #26
 6a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6a4:	00000650 	andeq	r0, r0, r0, asr r6
 6a8:	20002890 	mulcs	r0, r0, r8
 6ac:	0000002a 	andeq	r0, r0, sl, lsr #32
 6b0:	40080e41 	andmi	r0, r8, r1, asr #28
 6b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6b8:	100e4101 	andne	r4, lr, r1, lsl #2
 6bc:	00070d41 	andeq	r0, r7, r1, asr #26
 6c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6c4:	00000650 	andeq	r0, r0, r0, asr r6
 6c8:	200028ba 			; <UNDEFINED> instruction: 0x200028ba
 6cc:	0000002a 	andeq	r0, r0, sl, lsr #32
 6d0:	40080e41 	andmi	r0, r8, r1, asr #28
 6d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6d8:	100e4101 	andne	r4, lr, r1, lsl #2
 6dc:	00070d41 	andeq	r0, r7, r1, asr #26
 6e0:	00000020 	andeq	r0, r0, r0, lsr #32
 6e4:	00000650 	andeq	r0, r0, r0, asr r6
 6e8:	200028e4 	andcs	r2, r0, r4, ror #17
 6ec:	00000054 	andeq	r0, r0, r4, asr r0
 6f0:	400c0e41 	andmi	r0, ip, r1, asr #28
 6f4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 6f8:	018e4002 	orreq	r4, lr, r2
 6fc:	41180e41 	tstmi	r8, r1, asr #28
 700:	0000070d 	andeq	r0, r0, sp, lsl #14
 704:	00000020 	andeq	r0, r0, r0, lsr #32
 708:	00000650 	andeq	r0, r0, r0, asr r6
 70c:	20002938 	andcs	r2, r0, r8, lsr r9
 710:	00000054 	andeq	r0, r0, r4, asr r0
 714:	400c0e41 	andmi	r0, ip, r1, asr #28
 718:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 71c:	018e4002 	orreq	r4, lr, r2
 720:	41180e41 	tstmi	r8, r1, asr #28
 724:	0000070d 	andeq	r0, r0, sp, lsl #14
 728:	0000001c 	andeq	r0, r0, ip, lsl r0
 72c:	00000650 	andeq	r0, r0, r0, asr r6
 730:	2000298c 	andcs	r2, r0, ip, lsl #19
 734:	00000030 	andeq	r0, r0, r0, lsr r0
 738:	40080e41 	andmi	r0, r8, r1, asr #28
 73c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 740:	100e4101 	andne	r4, lr, r1, lsl #2
 744:	00070d41 	andeq	r0, r7, r1, asr #26
 748:	0000001c 	andeq	r0, r0, ip, lsl r0
 74c:	00000650 	andeq	r0, r0, r0, asr r6
 750:	200029bc 			; <UNDEFINED> instruction: 0x200029bc
 754:	00000034 	andeq	r0, r0, r4, lsr r0
 758:	40080e41 	andmi	r0, r8, r1, asr #28
 75c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 760:	100e4101 	andne	r4, lr, r1, lsl #2
 764:	00070d41 	andeq	r0, r7, r1, asr #26
 768:	0000001c 	andeq	r0, r0, ip, lsl r0
 76c:	00000650 	andeq	r0, r0, r0, asr r6
 770:	200029f0 	strdcs	r2, [r0], -r0
 774:	0000003c 	andeq	r0, r0, ip, lsr r0
 778:	40080e41 	andmi	r0, r8, r1, asr #28
 77c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 780:	100e4101 	andne	r4, lr, r1, lsl #2
 784:	00070d41 	andeq	r0, r7, r1, asr #26
 788:	0000001c 	andeq	r0, r0, ip, lsl r0
 78c:	00000650 	andeq	r0, r0, r0, asr r6
 790:	20002a2c 	andcs	r2, r0, ip, lsr #20
 794:	00000050 	andeq	r0, r0, r0, asr r0
 798:	40080e41 	andmi	r0, r8, r1, asr #28
 79c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7a0:	180e4101 	stmdane	lr, {r0, r8, lr}
 7a4:	00070d41 	andeq	r0, r7, r1, asr #26
 7a8:	00000018 	andeq	r0, r0, r8, lsl r0
 7ac:	00000650 	andeq	r0, r0, r0, asr r6
 7b0:	20002a7c 	andcs	r2, r0, ip, ror sl
 7b4:	0000009a 	muleq	r0, sl, r0
 7b8:	40080e41 	andmi	r0, r8, r1, asr #28
 7bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7c0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 7c4:	00000018 	andeq	r0, r0, r8, lsl r0
 7c8:	00000650 	andeq	r0, r0, r0, asr r6
 7cc:	20002b16 	andcs	r2, r0, r6, lsl fp
 7d0:	0000001a 	andeq	r0, r0, sl, lsl r0
 7d4:	40080e41 	andmi	r0, r8, r1, asr #28
 7d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7dc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 7e0:	00000018 	andeq	r0, r0, r8, lsl r0
 7e4:	00000650 	andeq	r0, r0, r0, asr r6
 7e8:	20002b30 	andcs	r2, r0, r0, lsr fp
 7ec:	00000012 	andeq	r0, r0, r2, lsl r0
 7f0:	40080e41 	andmi	r0, r8, r1, asr #28
 7f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7f8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 7fc:	00000020 	andeq	r0, r0, r0, lsr #32
 800:	00000650 	andeq	r0, r0, r0, asr r6
 804:	20002b42 	andcs	r2, r0, r2, asr #22
 808:	0000006a 	andeq	r0, r0, sl, rrx
 80c:	400c0e41 	andmi	r0, ip, r1, asr #28
 810:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 814:	018e4002 	orreq	r4, lr, r2
 818:	41300e41 	teqmi	r0, r1, asr #28
 81c:	0000070d 	andeq	r0, r0, sp, lsl #14
 820:	0000001c 	andeq	r0, r0, ip, lsl r0
 824:	00000650 	andeq	r0, r0, r0, asr r6
 828:	20002bac 	andcs	r2, r0, ip, lsr #23
 82c:	0000005e 	andeq	r0, r0, lr, asr r0
 830:	40080e41 	andmi	r0, r8, r1, asr #28
 834:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 838:	100e4101 	andne	r4, lr, r1, lsl #2
 83c:	00070d41 	andeq	r0, r7, r1, asr #26
 840:	0000001c 	andeq	r0, r0, ip, lsl r0
 844:	00000650 	andeq	r0, r0, r0, asr r6
 848:	20002c0a 	andcs	r2, r0, sl, lsl #24
 84c:	0000008e 	andeq	r0, r0, lr, lsl #1
 850:	40080e41 	andmi	r0, r8, r1, asr #28
 854:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 858:	200e4101 	andcs	r4, lr, r1, lsl #2
 85c:	00070d41 	andeq	r0, r7, r1, asr #26
 860:	00000020 	andeq	r0, r0, r0, lsr #32
 864:	00000650 	andeq	r0, r0, r0, asr r6
 868:	20002c98 	mulcs	r0, r8, ip
 86c:	00000084 	andeq	r0, r0, r4, lsl #1
 870:	400c0e41 	andmi	r0, ip, r1, asr #28
 874:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 878:	018e4002 	orreq	r4, lr, r2
 87c:	41380e41 	teqmi	r8, r1, asr #28
 880:	0000070d 	andeq	r0, r0, sp, lsl #14
 884:	0000000c 	andeq	r0, r0, ip
 888:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 88c:	7c020001 	stcvc	0, cr0, [r2], {1}
 890:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 894:	0000001c 	andeq	r0, r0, ip, lsl r0
 898:	00000884 	andeq	r0, r0, r4, lsl #17
 89c:	20002d1c 	andcs	r2, r0, ip, lsl sp
 8a0:	0000005a 	andeq	r0, r0, sl, asr r0
 8a4:	40080e41 	andmi	r0, r8, r1, asr #28
 8a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8ac:	180e4101 	stmdane	lr, {r0, r8, lr}
 8b0:	00070d41 	andeq	r0, r7, r1, asr #26
 8b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8b8:	00000884 	andeq	r0, r0, r4, lsl #17
 8bc:	20002d76 	andcs	r2, r0, r6, ror sp
 8c0:	0000003a 	andeq	r0, r0, sl, lsr r0
 8c4:	40080e41 	andmi	r0, r8, r1, asr #28
 8c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8cc:	180e4101 	stmdane	lr, {r0, r8, lr}
 8d0:	00070d41 	andeq	r0, r7, r1, asr #26
 8d4:	0000000c 	andeq	r0, r0, ip
 8d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8dc:	7c020001 	stcvc	0, cr0, [r2], {1}
 8e0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 8e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8e8:	000008d4 	ldrdeq	r0, [r0], -r4
 8ec:	20002db0 			; <UNDEFINED> instruction: 0x20002db0
 8f0:	00000074 	andeq	r0, r0, r4, ror r0
 8f4:	40080e41 	andmi	r0, r8, r1, asr #28
 8f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8fc:	180e4101 	stmdane	lr, {r0, r8, lr}
 900:	00070d41 	andeq	r0, r7, r1, asr #26
 904:	00000020 	andeq	r0, r0, r0, lsr #32
 908:	000008d4 	ldrdeq	r0, [r0], -r4
 90c:	20002e24 	andcs	r2, r0, r4, lsr #28
 910:	00000074 	andeq	r0, r0, r4, ror r0
 914:	400c0e41 	andmi	r0, ip, r1, asr #28
 918:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 91c:	018e4002 	orreq	r4, lr, r2
 920:	41180e41 	tstmi	r8, r1, asr #28
 924:	0000070d 	andeq	r0, r0, sp, lsl #14
 928:	0000000c 	andeq	r0, r0, ip
 92c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 930:	7c020001 	stcvc	0, cr0, [r2], {1}
 934:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 938:	0000001c 	andeq	r0, r0, ip, lsl r0
 93c:	00000928 	andeq	r0, r0, r8, lsr #18
 940:	20002e98 	mulcs	r0, r8, lr
 944:	00000074 	andeq	r0, r0, r4, ror r0
 948:	40080e41 	andmi	r0, r8, r1, asr #28
 94c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 950:	180e4101 	stmdane	lr, {r0, r8, lr}
 954:	00070d41 	andeq	r0, r7, r1, asr #26
 958:	00000020 	andeq	r0, r0, r0, lsr #32
 95c:	00000928 	andeq	r0, r0, r8, lsr #18
 960:	20002f0c 	andcs	r2, r0, ip, lsl #30
 964:	00000074 	andeq	r0, r0, r4, ror r0
 968:	400c0e41 	andmi	r0, ip, r1, asr #28
 96c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 970:	018e4002 	orreq	r4, lr, r2
 974:	41180e41 	tstmi	r8, r1, asr #28
 978:	0000070d 	andeq	r0, r0, sp, lsl #14
 97c:	0000000c 	andeq	r0, r0, ip
 980:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 984:	7c010001 	stcvc	0, cr0, [r1], {1}
 988:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 98c:	0000000c 	andeq	r0, r0, ip
 990:	0000097c 	andeq	r0, r0, ip, ror r9
 994:	20002f81 	andcs	r2, r0, r1, lsl #31
 998:	000001cc 	andeq	r0, r0, ip, asr #3
