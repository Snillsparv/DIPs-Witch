
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#endif
}

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f8c8 	bl	20000198 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:
void init_app( void ) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*portModer = 0x55555555;
20000014:	4b05      	ldr	r3, [pc, #20]	; (2000002c <init_app+0x1c>)
20000016:	4a06      	ldr	r2, [pc, #24]	; (20000030 <init_app+0x20>)
20000018:	601a      	str	r2, [r3, #0]
	set_up_DIL();
2000001a:	f001 fcfd 	bl	20001a18 <set_up_DIL>
	graphic_initialize();
2000001e:	f000 fffd 	bl	2000101c <graphic_initialize>
	graphic_clear_screen();
20000022:	f001 f832 	bl	2000108a <graphic_clear_screen>
}
20000026:	46c0      	nop			; (mov r8, r8)
20000028:	46bd      	mov	sp, r7
2000002a:	bd80      	pop	{r7, pc}
2000002c:	40021000 	andmi	r1, r2, r0
20000030:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000034 <initSprites>:
sprite tempCastleLight;
sprite tempTitleBlack;
sprite tempTitleGray;
sprite tempTitleLight;

void initSprites( void ) {
20000034:	b580      	push	{r7, lr}
20000036:	b08a      	sub	sp, #40	; 0x28
20000038:	af00      	add	r7, sp, #0
	sprite *monsterPointer = &tempMonster;
2000003a:	4b39      	ldr	r3, [pc, #228]	; (20000120 <initSprites+0xec>)
2000003c:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(monsterPointer, monster_black_bits, monster_black_width, monster_black_height);
2000003e:	4939      	ldr	r1, [pc, #228]	; (20000124 <initSprites+0xf0>)
20000040:	6a78      	ldr	r0, [r7, #36]	; 0x24
20000042:	231e      	movs	r3, #30
20000044:	221e      	movs	r2, #30
20000046:	f001 fcd3 	bl	200019f0 <load_sprite>
	monster = monsterPointer;
2000004a:	4b37      	ldr	r3, [pc, #220]	; (20000128 <initSprites+0xf4>)
2000004c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000004e:	601a      	str	r2, [r3, #0]
	
	sprite *monsterPointer2 = &tempMonsterLight;
20000050:	4b36      	ldr	r3, [pc, #216]	; (2000012c <initSprites+0xf8>)
20000052:	623b      	str	r3, [r7, #32]
	load_sprite(monsterPointer2, monster_light_bits, monster_light_width, monster_light_height);
20000054:	4936      	ldr	r1, [pc, #216]	; (20000130 <initSprites+0xfc>)
20000056:	6a38      	ldr	r0, [r7, #32]
20000058:	231e      	movs	r3, #30
2000005a:	221e      	movs	r2, #30
2000005c:	f001 fcc8 	bl	200019f0 <load_sprite>
	monsterLight = monsterPointer2;
20000060:	4b34      	ldr	r3, [pc, #208]	; (20000134 <initSprites+0x100>)
20000062:	6a3a      	ldr	r2, [r7, #32]
20000064:	601a      	str	r2, [r3, #0]

	sprite *monsterPointer3 = &tempMonsterGray;
20000066:	4b34      	ldr	r3, [pc, #208]	; (20000138 <initSprites+0x104>)
20000068:	61fb      	str	r3, [r7, #28]
	load_sprite(monsterPointer3, monster_gray_bits, monster_gray_width, monster_gray_height);
2000006a:	4934      	ldr	r1, [pc, #208]	; (2000013c <initSprites+0x108>)
2000006c:	69f8      	ldr	r0, [r7, #28]
2000006e:	231e      	movs	r3, #30
20000070:	221e      	movs	r2, #30
20000072:	f001 fcbd 	bl	200019f0 <load_sprite>
	monsterGray = monsterPointer3;
20000076:	4b32      	ldr	r3, [pc, #200]	; (20000140 <initSprites+0x10c>)
20000078:	69fa      	ldr	r2, [r7, #28]
2000007a:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempBg;
2000007c:	4b31      	ldr	r3, [pc, #196]	; (20000144 <initSprites+0x110>)
2000007e:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer4, bg_bits, bg_width, bg_height);
20000080:	4931      	ldr	r1, [pc, #196]	; (20000148 <initSprites+0x114>)
20000082:	69b8      	ldr	r0, [r7, #24]
20000084:	2340      	movs	r3, #64	; 0x40
20000086:	2280      	movs	r2, #128	; 0x80
20000088:	f001 fcb2 	bl	200019f0 <load_sprite>
	bg = pointer4;
2000008c:	4b2f      	ldr	r3, [pc, #188]	; (2000014c <initSprites+0x118>)
2000008e:	69ba      	ldr	r2, [r7, #24]
20000090:	601a      	str	r2, [r3, #0]
	
	sprite *pointer5 = &tempCastleBlack;
20000092:	4b2f      	ldr	r3, [pc, #188]	; (20000150 <initSprites+0x11c>)
20000094:	617b      	str	r3, [r7, #20]
	load_sprite(pointer5, castle_black_bits, castle_black_width, castle_black_height);
20000096:	492f      	ldr	r1, [pc, #188]	; (20000154 <initSprites+0x120>)
20000098:	6978      	ldr	r0, [r7, #20]
2000009a:	2340      	movs	r3, #64	; 0x40
2000009c:	2280      	movs	r2, #128	; 0x80
2000009e:	f001 fca7 	bl	200019f0 <load_sprite>
	castleBlack = pointer5;
200000a2:	4b2d      	ldr	r3, [pc, #180]	; (20000158 <initSprites+0x124>)
200000a4:	697a      	ldr	r2, [r7, #20]
200000a6:	601a      	str	r2, [r3, #0]
	
	sprite *pointer6 = &tempCastleGray;
200000a8:	4b2c      	ldr	r3, [pc, #176]	; (2000015c <initSprites+0x128>)
200000aa:	613b      	str	r3, [r7, #16]
	load_sprite(pointer6, castle_gray_bits, castle_black_width, castle_black_height);
200000ac:	492c      	ldr	r1, [pc, #176]	; (20000160 <initSprites+0x12c>)
200000ae:	6938      	ldr	r0, [r7, #16]
200000b0:	2340      	movs	r3, #64	; 0x40
200000b2:	2280      	movs	r2, #128	; 0x80
200000b4:	f001 fc9c 	bl	200019f0 <load_sprite>
	castleGray = pointer6;
200000b8:	4b2a      	ldr	r3, [pc, #168]	; (20000164 <initSprites+0x130>)
200000ba:	693a      	ldr	r2, [r7, #16]
200000bc:	601a      	str	r2, [r3, #0]
	
	sprite *pointer7 = &tempCastleLight;
200000be:	4b2a      	ldr	r3, [pc, #168]	; (20000168 <initSprites+0x134>)
200000c0:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer7, castle_light_bits, castle_black_width, castle_black_height);
200000c2:	492a      	ldr	r1, [pc, #168]	; (2000016c <initSprites+0x138>)
200000c4:	68f8      	ldr	r0, [r7, #12]
200000c6:	2340      	movs	r3, #64	; 0x40
200000c8:	2280      	movs	r2, #128	; 0x80
200000ca:	f001 fc91 	bl	200019f0 <load_sprite>
	castleLight = pointer7;
200000ce:	4b28      	ldr	r3, [pc, #160]	; (20000170 <initSprites+0x13c>)
200000d0:	68fa      	ldr	r2, [r7, #12]
200000d2:	601a      	str	r2, [r3, #0]
	
	sprite *pointer8 = &tempTitleLight;
200000d4:	4b27      	ldr	r3, [pc, #156]	; (20000174 <initSprites+0x140>)
200000d6:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer8, title_light_bits, title_black_width, title_black_height);
200000d8:	4927      	ldr	r1, [pc, #156]	; (20000178 <initSprites+0x144>)
200000da:	68b8      	ldr	r0, [r7, #8]
200000dc:	231e      	movs	r3, #30
200000de:	2232      	movs	r2, #50	; 0x32
200000e0:	f001 fc86 	bl	200019f0 <load_sprite>
	titleLight = pointer8;
200000e4:	4b25      	ldr	r3, [pc, #148]	; (2000017c <initSprites+0x148>)
200000e6:	68ba      	ldr	r2, [r7, #8]
200000e8:	601a      	str	r2, [r3, #0]
	sprite *pointer9 = &tempTitleGray;
200000ea:	4b25      	ldr	r3, [pc, #148]	; (20000180 <initSprites+0x14c>)
200000ec:	607b      	str	r3, [r7, #4]
	load_sprite(pointer9, title_gray_bits, title_black_width, title_black_height);
200000ee:	4925      	ldr	r1, [pc, #148]	; (20000184 <initSprites+0x150>)
200000f0:	6878      	ldr	r0, [r7, #4]
200000f2:	231e      	movs	r3, #30
200000f4:	2232      	movs	r2, #50	; 0x32
200000f6:	f001 fc7b 	bl	200019f0 <load_sprite>
	titleGray = pointer9;
200000fa:	4b23      	ldr	r3, [pc, #140]	; (20000188 <initSprites+0x154>)
200000fc:	687a      	ldr	r2, [r7, #4]
200000fe:	601a      	str	r2, [r3, #0]
	sprite *pointer10 = &tempTitleBlack;
20000100:	4b22      	ldr	r3, [pc, #136]	; (2000018c <initSprites+0x158>)
20000102:	603b      	str	r3, [r7, #0]
	load_sprite(pointer10, title_black_bits, title_black_width, title_black_height);
20000104:	4922      	ldr	r1, [pc, #136]	; (20000190 <initSprites+0x15c>)
20000106:	6838      	ldr	r0, [r7, #0]
20000108:	231e      	movs	r3, #30
2000010a:	2232      	movs	r2, #50	; 0x32
2000010c:	f001 fc70 	bl	200019f0 <load_sprite>
	titleBlack = pointer10;
20000110:	4b20      	ldr	r3, [pc, #128]	; (20000194 <initSprites+0x160>)
20000112:	683a      	ldr	r2, [r7, #0]
20000114:	601a      	str	r2, [r3, #0]
}
20000116:	46c0      	nop			; (mov r8, r8)
20000118:	46bd      	mov	sp, r7
2000011a:	b00a      	add	sp, #40	; 0x28
2000011c:	bd80      	pop	{r7, pc}
2000011e:	46c0      	nop			; (mov r8, r8)
20000120:	20002238 	andcs	r2, r0, r8, lsr r2
20000124:	20004194 	mulcs	r0, r4, r1
20000128:	20002218 	andcs	r2, r0, r8, lsl r2
2000012c:	2000227c 	andcs	r2, r0, ip, ror r2
20000130:	2000420c 	andcs	r4, r0, ip, lsl #4
20000134:	20002298 	mulcs	r0, r8, r2
20000138:	20002254 	andcs	r2, r0, r4, asr r2
2000013c:	20004284 	andcs	r4, r0, r4, lsl #5
20000140:	200022a4 	andcs	r2, r0, r4, lsr #5
20000144:	200022a8 	andcs	r2, r0, r8, lsr #5
20000148:	20005178 	andcs	r5, r0, r8, ror r1
2000014c:	20002250 	andcs	r2, r0, r0, asr r2
20000150:	2000221c 	andcs	r2, r0, ip, lsl r2
20000154:	200042fc 	strdcs	r4, [r0], -ip
20000158:	20002234 	andcs	r2, r0, r4, lsr r2
2000015c:	2000228c 	andcs	r2, r0, ip, lsl #5
20000160:	200046fc 	strdcs	r4, [r0], -ip
20000164:	200022a0 	andcs	r2, r0, r0, lsr #5
20000168:	20002270 	andcs	r2, r0, r0, ror r2
2000016c:	20004afc 	strdcs	r4, [r0], -ip
20000170:	2000226c 	andcs	r2, r0, ip, ror #4
20000174:	20002260 	andcs	r2, r0, r0, ror #4
20000178:	20004efc 	strdcs	r4, [r0], -ip
2000017c:	2000229c 	mulcs	r0, ip, r2
20000180:	20002228 	andcs	r2, r0, r8, lsr #4
20000184:	20004fd0 	ldrdcs	r4, [r0], -r0
20000188:	20002288 	andcs	r2, r0, r8, lsl #5
2000018c:	20002244 	andcs	r2, r0, r4, asr #4
20000190:	200050a4 	andcs	r5, r0, r4, lsr #1
20000194:	200022b4 			; <UNDEFINED> instruction: 0x200022b4

20000198 <main>:
	
int counter = 0;
int current_screen = START_SCREEN;
void main(void)
{
20000198:	b590      	push	{r4, r7, lr}
2000019a:	b0fd      	sub	sp, #500	; 0x1f4
2000019c:	af00      	add	r7, sp, #0
 * 2. Draw it with method above.
 * 3. Show frame with some long fram_length for testing.
 * 
 * */
	
	init_app();	
2000019e:	f7ff ff37 	bl	20000010 <init_app>
	initSprites();
200001a2:	f7ff ff47 	bl	20000034 <initSprites>
	
	GameObject monsterObj;
	Image monsterImage;
	Image monsterImages[] = {monsterImage};
200001a6:	23da      	movs	r3, #218	; 0xda
200001a8:	005b      	lsls	r3, r3, #1
200001aa:	18fb      	adds	r3, r7, r3
200001ac:	22e0      	movs	r2, #224	; 0xe0
200001ae:	0052      	lsls	r2, r2, #1
200001b0:	18ba      	adds	r2, r7, r2
200001b2:	ca13      	ldmia	r2!, {r0, r1, r4}
200001b4:	c313      	stmia	r3!, {r0, r1, r4}
	monsterObj.images = monsterImages;
200001b6:	23e6      	movs	r3, #230	; 0xe6
200001b8:	005b      	lsls	r3, r3, #1
200001ba:	18fb      	adds	r3, r7, r3
200001bc:	22da      	movs	r2, #218	; 0xda
200001be:	0052      	lsls	r2, r2, #1
200001c0:	18ba      	adds	r2, r7, r2
200001c2:	601a      	str	r2, [r3, #0]
	load_image(&monsterObj.images[0], monster, monsterGray, monsterLight);
200001c4:	23e6      	movs	r3, #230	; 0xe6
200001c6:	005b      	lsls	r3, r3, #1
200001c8:	18fb      	adds	r3, r7, r3
200001ca:	6818      	ldr	r0, [r3, #0]
200001cc:	4be6      	ldr	r3, [pc, #920]	; (20000568 <main+0x3d0>)
200001ce:	6819      	ldr	r1, [r3, #0]
200001d0:	4be6      	ldr	r3, [pc, #920]	; (2000056c <main+0x3d4>)
200001d2:	681a      	ldr	r2, [r3, #0]
200001d4:	4be6      	ldr	r3, [pc, #920]	; (20000570 <main+0x3d8>)
200001d6:	681b      	ldr	r3, [r3, #0]
200001d8:	f001 fbf6 	bl	200019c8 <load_image>
	monsterObj.xPos = 30;
200001dc:	23e6      	movs	r3, #230	; 0xe6
200001de:	005b      	lsls	r3, r3, #1
200001e0:	18fb      	adds	r3, r7, r3
200001e2:	221e      	movs	r2, #30
200001e4:	605a      	str	r2, [r3, #4]
	monsterObj.yPos = 4;
200001e6:	23e6      	movs	r3, #230	; 0xe6
200001e8:	005b      	lsls	r3, r3, #1
200001ea:	18fb      	adds	r3, r7, r3
200001ec:	2204      	movs	r2, #4
200001ee:	609a      	str	r2, [r3, #8]
	monsterObj.current_frame = 0;
200001f0:	23e6      	movs	r3, #230	; 0xe6
200001f2:	005b      	lsls	r3, r3, #1
200001f4:	18fb      	adds	r3, r7, r3
200001f6:	2200      	movs	r2, #0
200001f8:	615a      	str	r2, [r3, #20]
	monsterObj.update = playerUpdate;
200001fa:	23e6      	movs	r3, #230	; 0xe6
200001fc:	005b      	lsls	r3, r3, #1
200001fe:	18fb      	adds	r3, r7, r3
20000200:	4adc      	ldr	r2, [pc, #880]	; (20000574 <main+0x3dc>)
20000202:	60da      	str	r2, [r3, #12]
	
	GameObject titleObj;
	Image titleImage;
	Image titleImages[] = {titleImage};
20000204:	23bc      	movs	r3, #188	; 0xbc
20000206:	005b      	lsls	r3, r3, #1
20000208:	18fb      	adds	r3, r7, r3
2000020a:	22c2      	movs	r2, #194	; 0xc2
2000020c:	0052      	lsls	r2, r2, #1
2000020e:	18ba      	adds	r2, r7, r2
20000210:	ca13      	ldmia	r2!, {r0, r1, r4}
20000212:	c313      	stmia	r3!, {r0, r1, r4}
	titleObj.images = titleImages;
20000214:	23c8      	movs	r3, #200	; 0xc8
20000216:	005b      	lsls	r3, r3, #1
20000218:	18fb      	adds	r3, r7, r3
2000021a:	22bc      	movs	r2, #188	; 0xbc
2000021c:	0052      	lsls	r2, r2, #1
2000021e:	18ba      	adds	r2, r7, r2
20000220:	601a      	str	r2, [r3, #0]
	load_image(&titleObj.images[0], titleBlack, titleGray, titleLight);
20000222:	23c8      	movs	r3, #200	; 0xc8
20000224:	005b      	lsls	r3, r3, #1
20000226:	18fb      	adds	r3, r7, r3
20000228:	6818      	ldr	r0, [r3, #0]
2000022a:	4bd3      	ldr	r3, [pc, #844]	; (20000578 <main+0x3e0>)
2000022c:	6819      	ldr	r1, [r3, #0]
2000022e:	4bd3      	ldr	r3, [pc, #844]	; (2000057c <main+0x3e4>)
20000230:	681a      	ldr	r2, [r3, #0]
20000232:	4bd3      	ldr	r3, [pc, #844]	; (20000580 <main+0x3e8>)
20000234:	681b      	ldr	r3, [r3, #0]
20000236:	f001 fbc7 	bl	200019c8 <load_image>
	titleObj.xPos = 1;
2000023a:	23c8      	movs	r3, #200	; 0xc8
2000023c:	005b      	lsls	r3, r3, #1
2000023e:	18fb      	adds	r3, r7, r3
20000240:	2201      	movs	r2, #1
20000242:	605a      	str	r2, [r3, #4]
	titleObj.yPos = -40;
20000244:	23c8      	movs	r3, #200	; 0xc8
20000246:	005b      	lsls	r3, r3, #1
20000248:	18fb      	adds	r3, r7, r3
2000024a:	2228      	movs	r2, #40	; 0x28
2000024c:	4252      	negs	r2, r2
2000024e:	609a      	str	r2, [r3, #8]
	titleObj.current_frame = 0;
20000250:	23c8      	movs	r3, #200	; 0xc8
20000252:	005b      	lsls	r3, r3, #1
20000254:	18fb      	adds	r3, r7, r3
20000256:	2200      	movs	r2, #0
20000258:	615a      	str	r2, [r3, #20]
	monsterObj.image.grayImage = monsterGray;
	monsterObj.image.lightImage = monsterLight;
	*/
	GameObject castleObj;
	Image castleImage;
	Image castleImages[] = {castleImage};
2000025a:	239e      	movs	r3, #158	; 0x9e
2000025c:	005b      	lsls	r3, r3, #1
2000025e:	18fb      	adds	r3, r7, r3
20000260:	22a4      	movs	r2, #164	; 0xa4
20000262:	0052      	lsls	r2, r2, #1
20000264:	18ba      	adds	r2, r7, r2
20000266:	ca13      	ldmia	r2!, {r0, r1, r4}
20000268:	c313      	stmia	r3!, {r0, r1, r4}
	castleObj.images = castleImages;
2000026a:	23aa      	movs	r3, #170	; 0xaa
2000026c:	005b      	lsls	r3, r3, #1
2000026e:	18fb      	adds	r3, r7, r3
20000270:	229e      	movs	r2, #158	; 0x9e
20000272:	0052      	lsls	r2, r2, #1
20000274:	18ba      	adds	r2, r7, r2
20000276:	601a      	str	r2, [r3, #0]
	load_image(&castleObj.images[0], castleBlack, castleGray, castleLight);
20000278:	23aa      	movs	r3, #170	; 0xaa
2000027a:	005b      	lsls	r3, r3, #1
2000027c:	18fb      	adds	r3, r7, r3
2000027e:	6818      	ldr	r0, [r3, #0]
20000280:	4bc0      	ldr	r3, [pc, #768]	; (20000584 <main+0x3ec>)
20000282:	6819      	ldr	r1, [r3, #0]
20000284:	4bc0      	ldr	r3, [pc, #768]	; (20000588 <main+0x3f0>)
20000286:	681a      	ldr	r2, [r3, #0]
20000288:	4bc0      	ldr	r3, [pc, #768]	; (2000058c <main+0x3f4>)
2000028a:	681b      	ldr	r3, [r3, #0]
2000028c:	f001 fb9c 	bl	200019c8 <load_image>
	castleObj.xPos = 1;
20000290:	23aa      	movs	r3, #170	; 0xaa
20000292:	005b      	lsls	r3, r3, #1
20000294:	18fb      	adds	r3, r7, r3
20000296:	2201      	movs	r2, #1
20000298:	605a      	str	r2, [r3, #4]
	castleObj.yPos = 1;
2000029a:	23aa      	movs	r3, #170	; 0xaa
2000029c:	005b      	lsls	r3, r3, #1
2000029e:	18fb      	adds	r3, r7, r3
200002a0:	2201      	movs	r2, #1
200002a2:	609a      	str	r2, [r3, #8]
	castleObj.current_frame = 0;
200002a4:	23aa      	movs	r3, #170	; 0xaa
200002a6:	005b      	lsls	r3, r3, #1
200002a8:	18fb      	adds	r3, r7, r3
200002aa:	2200      	movs	r2, #0
200002ac:	615a      	str	r2, [r3, #20]
	
	GameObject fire2;
	init_fire( &fire2 );
200002ae:	238c      	movs	r3, #140	; 0x8c
200002b0:	005b      	lsls	r3, r3, #1
200002b2:	18fb      	adds	r3, r7, r3
200002b4:	0018      	movs	r0, r3
200002b6:	f000 fb67 	bl	20000988 <init_fire>
	GameObject fire3;
	init_fire( &fire3 );
200002ba:	23f4      	movs	r3, #244	; 0xf4
200002bc:	18fb      	adds	r3, r7, r3
200002be:	0018      	movs	r0, r3
200002c0:	f000 fb62 	bl	20000988 <init_fire>
	fire2.xPos = 94;
200002c4:	238c      	movs	r3, #140	; 0x8c
200002c6:	005b      	lsls	r3, r3, #1
200002c8:	18fb      	adds	r3, r7, r3
200002ca:	225e      	movs	r2, #94	; 0x5e
200002cc:	605a      	str	r2, [r3, #4]
	fire2.yPos = 64-12;
200002ce:	238c      	movs	r3, #140	; 0x8c
200002d0:	005b      	lsls	r3, r3, #1
200002d2:	18fb      	adds	r3, r7, r3
200002d4:	2234      	movs	r2, #52	; 0x34
200002d6:	609a      	str	r2, [r3, #8]
	fire3.xPos = 94+13;
200002d8:	23f4      	movs	r3, #244	; 0xf4
200002da:	18fb      	adds	r3, r7, r3
200002dc:	226b      	movs	r2, #107	; 0x6b
200002de:	605a      	str	r2, [r3, #4]
	fire3.yPos = 64-12;
200002e0:	23f4      	movs	r3, #244	; 0xf4
200002e2:	18fb      	adds	r3, r7, r3
200002e4:	2234      	movs	r2, #52	; 0x34
200002e6:	609a      	str	r2, [r3, #8]
	//draw_game_object(&castleObj);
	
	fire2.animation_speed = 2;
200002e8:	238c      	movs	r3, #140	; 0x8c
200002ea:	005b      	lsls	r3, r3, #1
200002ec:	18fb      	adds	r3, r7, r3
200002ee:	2202      	movs	r2, #2
200002f0:	61da      	str	r2, [r3, #28]
	fire3.animation_speed = 2;
200002f2:	23f4      	movs	r3, #244	; 0xf4
200002f4:	18fb      	adds	r3, r7, r3
200002f6:	2202      	movs	r2, #2
200002f8:	61da      	str	r2, [r3, #28]
	
	fire2.update = gameObjectUpdate;
200002fa:	238c      	movs	r3, #140	; 0x8c
200002fc:	005b      	lsls	r3, r3, #1
200002fe:	18fb      	adds	r3, r7, r3
20000300:	4aa3      	ldr	r2, [pc, #652]	; (20000590 <main+0x3f8>)
20000302:	60da      	str	r2, [r3, #12]
	fire3.update = gameObjectUpdate;
20000304:	23f4      	movs	r3, #244	; 0xf4
20000306:	18fb      	adds	r3, r7, r3
20000308:	4aa1      	ldr	r2, [pc, #644]	; (20000590 <main+0x3f8>)
2000030a:	60da      	str	r2, [r3, #12]
	SlowText text8;
	SlowText text9;
	SlowText text10;
	SlowText text11;
	SlowText text12;
	init_slow_text(&text1, "For centuries the", "DILs-witches have", 1);
2000030c:	4aa1      	ldr	r2, [pc, #644]	; (20000594 <main+0x3fc>)
2000030e:	49a2      	ldr	r1, [pc, #648]	; (20000598 <main+0x400>)
20000310:	23e0      	movs	r3, #224	; 0xe0
20000312:	18f8      	adds	r0, r7, r3
20000314:	2301      	movs	r3, #1
20000316:	f001 fe6c 	bl	20001ff2 <init_slow_text>
	init_slow_text(&text2, "coiled in fear,", "    ", 1);
2000031a:	4aa0      	ldr	r2, [pc, #640]	; (2000059c <main+0x404>)
2000031c:	49a0      	ldr	r1, [pc, #640]	; (200005a0 <main+0x408>)
2000031e:	23cc      	movs	r3, #204	; 0xcc
20000320:	18f8      	adds	r0, r7, r3
20000322:	2301      	movs	r3, #1
20000324:	f001 fe65 	bl	20001ff2 <init_slow_text>
	init_slow_text(&text3, "whenever they hear", "that a DIPs-witch", 1);
20000328:	4a9e      	ldr	r2, [pc, #632]	; (200005a4 <main+0x40c>)
2000032a:	499f      	ldr	r1, [pc, #636]	; (200005a8 <main+0x410>)
2000032c:	23b8      	movs	r3, #184	; 0xb8
2000032e:	18f8      	adds	r0, r7, r3
20000330:	2301      	movs	r3, #1
20000332:	f001 fe5e 	bl	20001ff2 <init_slow_text>
	init_slow_text(&text4, "is near.", "   ", 1);
20000336:	4a9d      	ldr	r2, [pc, #628]	; (200005ac <main+0x414>)
20000338:	499d      	ldr	r1, [pc, #628]	; (200005b0 <main+0x418>)
2000033a:	23a4      	movs	r3, #164	; 0xa4
2000033c:	18f8      	adds	r0, r7, r3
2000033e:	2301      	movs	r3, #1
20000340:	f001 fe57 	bl	20001ff2 <init_slow_text>
	init_slow_text(&text5, "So it is quite", "surprising, finding", 1);
20000344:	4a9b      	ldr	r2, [pc, #620]	; (200005b4 <main+0x41c>)
20000346:	499c      	ldr	r1, [pc, #624]	; (200005b8 <main+0x420>)
20000348:	2390      	movs	r3, #144	; 0x90
2000034a:	18f8      	adds	r0, r7, r3
2000034c:	2301      	movs	r3, #1
2000034e:	f001 fe50 	bl	20001ff2 <init_slow_text>
	init_slow_text(&text6, "you here,", "    ", 1);
20000352:	4a92      	ldr	r2, [pc, #584]	; (2000059c <main+0x404>)
20000354:	4999      	ldr	r1, [pc, #612]	; (200005bc <main+0x424>)
20000356:	237c      	movs	r3, #124	; 0x7c
20000358:	18f8      	adds	r0, r7, r3
2000035a:	2301      	movs	r3, #1
2000035c:	f001 fe49 	bl	20001ff2 <init_slow_text>
	init_slow_text(&text7, "queen Daffo of DILs,", "heir to king Lear.", 1);
20000360:	4a97      	ldr	r2, [pc, #604]	; (200005c0 <main+0x428>)
20000362:	4998      	ldr	r1, [pc, #608]	; (200005c4 <main+0x42c>)
20000364:	2368      	movs	r3, #104	; 0x68
20000366:	18f8      	adds	r0, r7, r3
20000368:	2301      	movs	r3, #1
2000036a:	f001 fe42 	bl	20001ff2 <init_slow_text>
	init_slow_text(&text8, "But maybe you're", "tempted, to loot", 1);
2000036e:	4a96      	ldr	r2, [pc, #600]	; (200005c8 <main+0x430>)
20000370:	4996      	ldr	r1, [pc, #600]	; (200005cc <main+0x434>)
20000372:	2354      	movs	r3, #84	; 0x54
20000374:	18f8      	adds	r0, r7, r3
20000376:	2301      	movs	r3, #1
20000378:	f001 fe3b 	bl	20001ff2 <init_slow_text>
	init_slow_text(&text9, "from the riches,", "    ", 1);
2000037c:	4a87      	ldr	r2, [pc, #540]	; (2000059c <main+0x404>)
2000037e:	4994      	ldr	r1, [pc, #592]	; (200005d0 <main+0x438>)
20000380:	2340      	movs	r3, #64	; 0x40
20000382:	18f8      	adds	r0, r7, r3
20000384:	2301      	movs	r3, #1
20000386:	f001 fe34 	bl	20001ff2 <init_slow_text>
	init_slow_text(&text12, "wicked DIPs-witches.", "    ", 1);
2000038a:	4a84      	ldr	r2, [pc, #528]	; (2000059c <main+0x404>)
2000038c:	4991      	ldr	r1, [pc, #580]	; (200005d4 <main+0x43c>)
2000038e:	1d38      	adds	r0, r7, #4
20000390:	2301      	movs	r3, #1
20000392:	f001 fe2e 	bl	20001ff2 <init_slow_text>
	init_slow_text(&text10, "so grippily trea-", "sured by", 1);
20000396:	4a90      	ldr	r2, [pc, #576]	; (200005d8 <main+0x440>)
20000398:	4990      	ldr	r1, [pc, #576]	; (200005dc <main+0x444>)
2000039a:	232c      	movs	r3, #44	; 0x2c
2000039c:	18f8      	adds	r0, r7, r3
2000039e:	2301      	movs	r3, #1
200003a0:	f001 fe27 	bl	20001ff2 <init_slow_text>
	init_slow_text(&text11, "Enter, brave witch,", "- reset the switch!", 1);
200003a4:	4a8e      	ldr	r2, [pc, #568]	; (200005e0 <main+0x448>)
200003a6:	498f      	ldr	r1, [pc, #572]	; (200005e4 <main+0x44c>)
200003a8:	2318      	movs	r3, #24
200003aa:	18f8      	adds	r0, r7, r3
200003ac:	2301      	movs	r3, #1
200003ae:	f001 fe20 	bl	20001ff2 <init_slow_text>
	//ascii_write_part("Yeeaaah!!!", "This is working! :)", 5, 10);
	
	clear_ascii();
200003b2:	f001 fd04 	bl	20001dbe <clear_ascii>
	//Game loop
	while(1) {
		
		switch(current_screen) {
200003b6:	4b8c      	ldr	r3, [pc, #560]	; (200005e8 <main+0x450>)
200003b8:	681b      	ldr	r3, [r3, #0]
200003ba:	2b01      	cmp	r3, #1
200003bc:	d1fb      	bne.n	200003b6 <main+0x21e>
			
			case START_SCREEN:
				
				counter++;
200003be:	4b8b      	ldr	r3, [pc, #556]	; (200005ec <main+0x454>)
200003c0:	681b      	ldr	r3, [r3, #0]
200003c2:	1c5a      	adds	r2, r3, #1
200003c4:	4b89      	ldr	r3, [pc, #548]	; (200005ec <main+0x454>)
200003c6:	601a      	str	r2, [r3, #0]
				
				if(titleObj.yPos < 1) {
200003c8:	23c8      	movs	r3, #200	; 0xc8
200003ca:	005b      	lsls	r3, r3, #1
200003cc:	18fb      	adds	r3, r7, r3
200003ce:	689b      	ldr	r3, [r3, #8]
200003d0:	2b00      	cmp	r3, #0
200003d2:	dc08      	bgt.n	200003e6 <main+0x24e>
					titleObj.yPos++;
200003d4:	23c8      	movs	r3, #200	; 0xc8
200003d6:	005b      	lsls	r3, r3, #1
200003d8:	18fb      	adds	r3, r7, r3
200003da:	689b      	ldr	r3, [r3, #8]
200003dc:	1c5a      	adds	r2, r3, #1
200003de:	23c8      	movs	r3, #200	; 0xc8
200003e0:	005b      	lsls	r3, r3, #1
200003e2:	18fb      	adds	r3, r7, r3
200003e4:	609a      	str	r2, [r3, #8]
				}
				
				draw_game_object(&castleObj);
200003e6:	23aa      	movs	r3, #170	; 0xaa
200003e8:	005b      	lsls	r3, r3, #1
200003ea:	18fb      	adds	r3, r7, r3
200003ec:	0018      	movs	r0, r3
200003ee:	f001 fa75 	bl	200018dc <draw_game_object>
				draw_game_object(&fire2);
200003f2:	238c      	movs	r3, #140	; 0x8c
200003f4:	005b      	lsls	r3, r3, #1
200003f6:	18fb      	adds	r3, r7, r3
200003f8:	0018      	movs	r0, r3
200003fa:	f001 fa6f 	bl	200018dc <draw_game_object>
				draw_game_object(&fire3);
200003fe:	23f4      	movs	r3, #244	; 0xf4
20000400:	18fb      	adds	r3, r7, r3
20000402:	0018      	movs	r0, r3
20000404:	f001 fa6a 	bl	200018dc <draw_game_object>
				draw_game_object(&titleObj);
20000408:	23c8      	movs	r3, #200	; 0xc8
2000040a:	005b      	lsls	r3, r3, #1
2000040c:	18fb      	adds	r3, r7, r3
2000040e:	0018      	movs	r0, r3
20000410:	f001 fa64 	bl	200018dc <draw_game_object>
				show_frame(1);
20000414:	2001      	movs	r0, #1
20000416:	f001 faa2 	bl	2000195e <show_frame>
				
				static int long_text = 40;
				static int short_text = 20;
				static int delay_until_text = 70;
				
				if (counter < delay_until_text);
2000041a:	4b74      	ldr	r3, [pc, #464]	; (200005ec <main+0x454>)
2000041c:	681a      	ldr	r2, [r3, #0]
2000041e:	4b74      	ldr	r3, [pc, #464]	; (200005f0 <main+0x458>)
20000420:	681b      	ldr	r3, [r3, #0]
20000422:	429a      	cmp	r2, r3
20000424:	da00      	bge.n	20000428 <main+0x290>
20000426:	e19b      	b.n	20000760 <main+0x5c8>
				else if (counter < delay_until_text + 1*long_text)
20000428:	4b71      	ldr	r3, [pc, #452]	; (200005f0 <main+0x458>)
2000042a:	681a      	ldr	r2, [r3, #0]
2000042c:	4b71      	ldr	r3, [pc, #452]	; (200005f4 <main+0x45c>)
2000042e:	681b      	ldr	r3, [r3, #0]
20000430:	18d2      	adds	r2, r2, r3
20000432:	4b6e      	ldr	r3, [pc, #440]	; (200005ec <main+0x454>)
20000434:	681b      	ldr	r3, [r3, #0]
20000436:	429a      	cmp	r2, r3
20000438:	dd0c      	ble.n	20000454 <main+0x2bc>
					text1.display(&text1, 20);
2000043a:	4b6f      	ldr	r3, [pc, #444]	; (200005f8 <main+0x460>)
2000043c:	22f8      	movs	r2, #248	; 0xf8
2000043e:	0052      	lsls	r2, r2, #1
20000440:	4694      	mov	ip, r2
20000442:	44bc      	add	ip, r7
20000444:	4463      	add	r3, ip
20000446:	691b      	ldr	r3, [r3, #16]
20000448:	22e0      	movs	r2, #224	; 0xe0
2000044a:	18ba      	adds	r2, r7, r2
2000044c:	2114      	movs	r1, #20
2000044e:	0010      	movs	r0, r2
20000450:	4798      	blx	r3
20000452:	e185      	b.n	20000760 <main+0x5c8>
				else if(counter < delay_until_text + 1*long_text + 1*short_text)
20000454:	4b66      	ldr	r3, [pc, #408]	; (200005f0 <main+0x458>)
20000456:	681a      	ldr	r2, [r3, #0]
20000458:	4b66      	ldr	r3, [pc, #408]	; (200005f4 <main+0x45c>)
2000045a:	681b      	ldr	r3, [r3, #0]
2000045c:	18d2      	adds	r2, r2, r3
2000045e:	4b67      	ldr	r3, [pc, #412]	; (200005fc <main+0x464>)
20000460:	681b      	ldr	r3, [r3, #0]
20000462:	18d2      	adds	r2, r2, r3
20000464:	4b61      	ldr	r3, [pc, #388]	; (200005ec <main+0x454>)
20000466:	681b      	ldr	r3, [r3, #0]
20000468:	429a      	cmp	r2, r3
2000046a:	dd0c      	ble.n	20000486 <main+0x2ee>
					text2.display(&text2, 20);
2000046c:	4b64      	ldr	r3, [pc, #400]	; (20000600 <main+0x468>)
2000046e:	22f8      	movs	r2, #248	; 0xf8
20000470:	0052      	lsls	r2, r2, #1
20000472:	4694      	mov	ip, r2
20000474:	44bc      	add	ip, r7
20000476:	4463      	add	r3, ip
20000478:	691b      	ldr	r3, [r3, #16]
2000047a:	22cc      	movs	r2, #204	; 0xcc
2000047c:	18ba      	adds	r2, r7, r2
2000047e:	2114      	movs	r1, #20
20000480:	0010      	movs	r0, r2
20000482:	4798      	blx	r3
20000484:	e16c      	b.n	20000760 <main+0x5c8>
				else if(counter < delay_until_text + 2*long_text + 1*short_text)
20000486:	4b5b      	ldr	r3, [pc, #364]	; (200005f4 <main+0x45c>)
20000488:	681b      	ldr	r3, [r3, #0]
2000048a:	005a      	lsls	r2, r3, #1
2000048c:	4b58      	ldr	r3, [pc, #352]	; (200005f0 <main+0x458>)
2000048e:	681b      	ldr	r3, [r3, #0]
20000490:	18d2      	adds	r2, r2, r3
20000492:	4b5a      	ldr	r3, [pc, #360]	; (200005fc <main+0x464>)
20000494:	681b      	ldr	r3, [r3, #0]
20000496:	18d2      	adds	r2, r2, r3
20000498:	4b54      	ldr	r3, [pc, #336]	; (200005ec <main+0x454>)
2000049a:	681b      	ldr	r3, [r3, #0]
2000049c:	429a      	cmp	r2, r3
2000049e:	dd0c      	ble.n	200004ba <main+0x322>
					text3.display(&text3, 20);
200004a0:	4b58      	ldr	r3, [pc, #352]	; (20000604 <main+0x46c>)
200004a2:	22f8      	movs	r2, #248	; 0xf8
200004a4:	0052      	lsls	r2, r2, #1
200004a6:	4694      	mov	ip, r2
200004a8:	44bc      	add	ip, r7
200004aa:	4463      	add	r3, ip
200004ac:	691b      	ldr	r3, [r3, #16]
200004ae:	22b8      	movs	r2, #184	; 0xb8
200004b0:	18ba      	adds	r2, r7, r2
200004b2:	2114      	movs	r1, #20
200004b4:	0010      	movs	r0, r2
200004b6:	4798      	blx	r3
200004b8:	e152      	b.n	20000760 <main+0x5c8>
				else if(counter < delay_until_text + 2*long_text + 2*short_text)
200004ba:	4b4e      	ldr	r3, [pc, #312]	; (200005f4 <main+0x45c>)
200004bc:	681b      	ldr	r3, [r3, #0]
200004be:	005a      	lsls	r2, r3, #1
200004c0:	4b4b      	ldr	r3, [pc, #300]	; (200005f0 <main+0x458>)
200004c2:	681b      	ldr	r3, [r3, #0]
200004c4:	18d2      	adds	r2, r2, r3
200004c6:	4b4d      	ldr	r3, [pc, #308]	; (200005fc <main+0x464>)
200004c8:	681b      	ldr	r3, [r3, #0]
200004ca:	005b      	lsls	r3, r3, #1
200004cc:	18d2      	adds	r2, r2, r3
200004ce:	4b47      	ldr	r3, [pc, #284]	; (200005ec <main+0x454>)
200004d0:	681b      	ldr	r3, [r3, #0]
200004d2:	429a      	cmp	r2, r3
200004d4:	dd0c      	ble.n	200004f0 <main+0x358>
					text4.display(&text4, 20);
200004d6:	4b4c      	ldr	r3, [pc, #304]	; (20000608 <main+0x470>)
200004d8:	22f8      	movs	r2, #248	; 0xf8
200004da:	0052      	lsls	r2, r2, #1
200004dc:	4694      	mov	ip, r2
200004de:	44bc      	add	ip, r7
200004e0:	4463      	add	r3, ip
200004e2:	691b      	ldr	r3, [r3, #16]
200004e4:	22a4      	movs	r2, #164	; 0xa4
200004e6:	18ba      	adds	r2, r7, r2
200004e8:	2114      	movs	r1, #20
200004ea:	0010      	movs	r0, r2
200004ec:	4798      	blx	r3
200004ee:	e137      	b.n	20000760 <main+0x5c8>
				else if(counter < delay_until_text + 3*long_text + 2*short_text)
200004f0:	4b40      	ldr	r3, [pc, #256]	; (200005f4 <main+0x45c>)
200004f2:	681a      	ldr	r2, [r3, #0]
200004f4:	0013      	movs	r3, r2
200004f6:	005b      	lsls	r3, r3, #1
200004f8:	189a      	adds	r2, r3, r2
200004fa:	4b3d      	ldr	r3, [pc, #244]	; (200005f0 <main+0x458>)
200004fc:	681b      	ldr	r3, [r3, #0]
200004fe:	18d2      	adds	r2, r2, r3
20000500:	4b3e      	ldr	r3, [pc, #248]	; (200005fc <main+0x464>)
20000502:	681b      	ldr	r3, [r3, #0]
20000504:	005b      	lsls	r3, r3, #1
20000506:	18d2      	adds	r2, r2, r3
20000508:	4b38      	ldr	r3, [pc, #224]	; (200005ec <main+0x454>)
2000050a:	681b      	ldr	r3, [r3, #0]
2000050c:	429a      	cmp	r2, r3
2000050e:	dd0c      	ble.n	2000052a <main+0x392>
					text5.display(&text5, 15);
20000510:	4b3e      	ldr	r3, [pc, #248]	; (2000060c <main+0x474>)
20000512:	22f8      	movs	r2, #248	; 0xf8
20000514:	0052      	lsls	r2, r2, #1
20000516:	4694      	mov	ip, r2
20000518:	44bc      	add	ip, r7
2000051a:	4463      	add	r3, ip
2000051c:	691b      	ldr	r3, [r3, #16]
2000051e:	2290      	movs	r2, #144	; 0x90
20000520:	18ba      	adds	r2, r7, r2
20000522:	210f      	movs	r1, #15
20000524:	0010      	movs	r0, r2
20000526:	4798      	blx	r3
20000528:	e11a      	b.n	20000760 <main+0x5c8>
				else if(counter < delay_until_text + 3*long_text + 3*short_text)
2000052a:	4b32      	ldr	r3, [pc, #200]	; (200005f4 <main+0x45c>)
2000052c:	681a      	ldr	r2, [r3, #0]
2000052e:	0013      	movs	r3, r2
20000530:	005b      	lsls	r3, r3, #1
20000532:	189a      	adds	r2, r3, r2
20000534:	4b2e      	ldr	r3, [pc, #184]	; (200005f0 <main+0x458>)
20000536:	681b      	ldr	r3, [r3, #0]
20000538:	18d1      	adds	r1, r2, r3
2000053a:	4b30      	ldr	r3, [pc, #192]	; (200005fc <main+0x464>)
2000053c:	681a      	ldr	r2, [r3, #0]
2000053e:	0013      	movs	r3, r2
20000540:	005b      	lsls	r3, r3, #1
20000542:	189b      	adds	r3, r3, r2
20000544:	18ca      	adds	r2, r1, r3
20000546:	4b29      	ldr	r3, [pc, #164]	; (200005ec <main+0x454>)
20000548:	681b      	ldr	r3, [r3, #0]
2000054a:	429a      	cmp	r2, r3
2000054c:	dd62      	ble.n	20000614 <main+0x47c>
					text6.display(&text6, 20);
2000054e:	4b30      	ldr	r3, [pc, #192]	; (20000610 <main+0x478>)
20000550:	22f8      	movs	r2, #248	; 0xf8
20000552:	0052      	lsls	r2, r2, #1
20000554:	4694      	mov	ip, r2
20000556:	44bc      	add	ip, r7
20000558:	4463      	add	r3, ip
2000055a:	691b      	ldr	r3, [r3, #16]
2000055c:	227c      	movs	r2, #124	; 0x7c
2000055e:	18ba      	adds	r2, r7, r2
20000560:	2114      	movs	r1, #20
20000562:	0010      	movs	r0, r2
20000564:	4798      	blx	r3
20000566:	e0fb      	b.n	20000760 <main+0x5c8>
20000568:	20002218 	andcs	r2, r0, r8, lsl r2
2000056c:	200022a4 	andcs	r2, r0, r4, lsr #5
20000570:	20002298 	mulcs	r0, r8, r2
20000574:	20000aad 	andcs	r0, r0, sp, lsr #21
20000578:	200022b4 			; <UNDEFINED> instruction: 0x200022b4
2000057c:	20002288 	andcs	r2, r0, r8, lsl #5
20000580:	2000229c 	mulcs	r0, ip, r2
20000584:	20002234 	andcs	r2, r0, r4, lsr r2
20000588:	200022a0 	andcs	r2, r0, r0, lsr #5
2000058c:	2000226c 	andcs	r2, r0, ip, ror #4
20000590:	200007bd 			; <UNDEFINED> instruction: 0x200007bd
20000594:	20005610 	andcs	r5, r0, r0, lsl r6
20000598:	20005624 	andcs	r5, r0, r4, lsr #12
2000059c:	20005638 	andcs	r5, r0, r8, lsr r6
200005a0:	20005640 	andcs	r5, r0, r0, asr #12
200005a4:	20005650 	andcs	r5, r0, r0, asr r6
200005a8:	20005664 	andcs	r5, r0, r4, ror #12
200005ac:	20005678 	andcs	r5, r0, r8, ror r6
200005b0:	2000567c 	andcs	r5, r0, ip, ror r6
200005b4:	20005688 	andcs	r5, r0, r8, lsl #13
200005b8:	2000569c 	mulcs	r0, ip, r6
200005bc:	200056ac 	andcs	r5, r0, ip, lsr #13
200005c0:	200056b8 			; <UNDEFINED> instruction: 0x200056b8
200005c4:	200056cc 	andcs	r5, r0, ip, asr #13
200005c8:	200056e4 	andcs	r5, r0, r4, ror #13
200005cc:	200056f8 	strdcs	r5, [r0], -r8
200005d0:	2000570c 	andcs	r5, r0, ip, lsl #14
200005d4:	20005720 	andcs	r5, r0, r0, lsr #14
200005d8:	20005738 	andcs	r5, r0, r8, lsr r7
200005dc:	20005744 	andcs	r5, r0, r4, asr #14
200005e0:	20005758 	andcs	r5, r0, r8, asr r7
200005e4:	2000576c 	andcs	r5, r0, ip, ror #14
200005e8:	20005578 	andcs	r5, r0, r8, ror r5
200005ec:	20002204 	andcs	r2, r0, r4, lsl #4
200005f0:	2000557c 	andcs	r5, r0, ip, ror r5
200005f4:	20005580 	andcs	r5, r0, r0, lsl #11
200005f8:	fffffef0 			; <UNDEFINED> instruction: 0xfffffef0
200005fc:	20005584 	andcs	r5, r0, r4, lsl #11
20000600:	fffffedc 			; <UNDEFINED> instruction: 0xfffffedc
20000604:	fffffec8 			; <UNDEFINED> instruction: 0xfffffec8
20000608:	fffffeb4 			; <UNDEFINED> instruction: 0xfffffeb4
2000060c:	fffffea0 			; <UNDEFINED> instruction: 0xfffffea0
20000610:	fffffe8c 			; <UNDEFINED> instruction: 0xfffffe8c
				else if(counter < delay_until_text + 4*long_text + 3*short_text)
20000614:	4b5b      	ldr	r3, [pc, #364]	; (20000784 <main+0x5ec>)
20000616:	681b      	ldr	r3, [r3, #0]
20000618:	009a      	lsls	r2, r3, #2
2000061a:	4b5b      	ldr	r3, [pc, #364]	; (20000788 <main+0x5f0>)
2000061c:	681b      	ldr	r3, [r3, #0]
2000061e:	18d1      	adds	r1, r2, r3
20000620:	4b5a      	ldr	r3, [pc, #360]	; (2000078c <main+0x5f4>)
20000622:	681a      	ldr	r2, [r3, #0]
20000624:	0013      	movs	r3, r2
20000626:	005b      	lsls	r3, r3, #1
20000628:	189b      	adds	r3, r3, r2
2000062a:	18ca      	adds	r2, r1, r3
2000062c:	4b58      	ldr	r3, [pc, #352]	; (20000790 <main+0x5f8>)
2000062e:	681b      	ldr	r3, [r3, #0]
20000630:	429a      	cmp	r2, r3
20000632:	dd0c      	ble.n	2000064e <main+0x4b6>
					text7.display(&text7, 20);
20000634:	4b57      	ldr	r3, [pc, #348]	; (20000794 <main+0x5fc>)
20000636:	22f8      	movs	r2, #248	; 0xf8
20000638:	0052      	lsls	r2, r2, #1
2000063a:	4694      	mov	ip, r2
2000063c:	44bc      	add	ip, r7
2000063e:	4463      	add	r3, ip
20000640:	691b      	ldr	r3, [r3, #16]
20000642:	2268      	movs	r2, #104	; 0x68
20000644:	18ba      	adds	r2, r7, r2
20000646:	2114      	movs	r1, #20
20000648:	0010      	movs	r0, r2
2000064a:	4798      	blx	r3
2000064c:	e088      	b.n	20000760 <main+0x5c8>
				else if(counter < delay_until_text + 5*long_text + 3*short_text + 3)
2000064e:	4b4d      	ldr	r3, [pc, #308]	; (20000784 <main+0x5ec>)
20000650:	681a      	ldr	r2, [r3, #0]
20000652:	0013      	movs	r3, r2
20000654:	009b      	lsls	r3, r3, #2
20000656:	189a      	adds	r2, r3, r2
20000658:	4b4b      	ldr	r3, [pc, #300]	; (20000788 <main+0x5f0>)
2000065a:	681b      	ldr	r3, [r3, #0]
2000065c:	18d1      	adds	r1, r2, r3
2000065e:	4b4b      	ldr	r3, [pc, #300]	; (2000078c <main+0x5f4>)
20000660:	681a      	ldr	r2, [r3, #0]
20000662:	0013      	movs	r3, r2
20000664:	005b      	lsls	r3, r3, #1
20000666:	189b      	adds	r3, r3, r2
20000668:	18cb      	adds	r3, r1, r3
2000066a:	1cda      	adds	r2, r3, #3
2000066c:	4b48      	ldr	r3, [pc, #288]	; (20000790 <main+0x5f8>)
2000066e:	681b      	ldr	r3, [r3, #0]
20000670:	429a      	cmp	r2, r3
20000672:	dd0c      	ble.n	2000068e <main+0x4f6>
					text8.display(&text8, 20);
20000674:	4b48      	ldr	r3, [pc, #288]	; (20000798 <main+0x600>)
20000676:	22f8      	movs	r2, #248	; 0xf8
20000678:	0052      	lsls	r2, r2, #1
2000067a:	4694      	mov	ip, r2
2000067c:	44bc      	add	ip, r7
2000067e:	4463      	add	r3, ip
20000680:	691b      	ldr	r3, [r3, #16]
20000682:	2254      	movs	r2, #84	; 0x54
20000684:	18ba      	adds	r2, r7, r2
20000686:	2114      	movs	r1, #20
20000688:	0010      	movs	r0, r2
2000068a:	4798      	blx	r3
2000068c:	e068      	b.n	20000760 <main+0x5c8>
				else if(counter < delay_until_text + 5*long_text + 4*short_text + 3)
2000068e:	4b3d      	ldr	r3, [pc, #244]	; (20000784 <main+0x5ec>)
20000690:	681a      	ldr	r2, [r3, #0]
20000692:	0013      	movs	r3, r2
20000694:	009b      	lsls	r3, r3, #2
20000696:	189a      	adds	r2, r3, r2
20000698:	4b3b      	ldr	r3, [pc, #236]	; (20000788 <main+0x5f0>)
2000069a:	681b      	ldr	r3, [r3, #0]
2000069c:	18d2      	adds	r2, r2, r3
2000069e:	4b3b      	ldr	r3, [pc, #236]	; (2000078c <main+0x5f4>)
200006a0:	681b      	ldr	r3, [r3, #0]
200006a2:	009b      	lsls	r3, r3, #2
200006a4:	18d3      	adds	r3, r2, r3
200006a6:	1cda      	adds	r2, r3, #3
200006a8:	4b39      	ldr	r3, [pc, #228]	; (20000790 <main+0x5f8>)
200006aa:	681b      	ldr	r3, [r3, #0]
200006ac:	429a      	cmp	r2, r3
200006ae:	dd0c      	ble.n	200006ca <main+0x532>
					text9.display(&text9, 20);
200006b0:	4b3a      	ldr	r3, [pc, #232]	; (2000079c <main+0x604>)
200006b2:	22f8      	movs	r2, #248	; 0xf8
200006b4:	0052      	lsls	r2, r2, #1
200006b6:	4694      	mov	ip, r2
200006b8:	44bc      	add	ip, r7
200006ba:	4463      	add	r3, ip
200006bc:	691b      	ldr	r3, [r3, #16]
200006be:	2240      	movs	r2, #64	; 0x40
200006c0:	18ba      	adds	r2, r7, r2
200006c2:	2114      	movs	r1, #20
200006c4:	0010      	movs	r0, r2
200006c6:	4798      	blx	r3
200006c8:	e04a      	b.n	20000760 <main+0x5c8>
				else if(counter < delay_until_text + 6*long_text + 4*short_text + 3)
200006ca:	4b2e      	ldr	r3, [pc, #184]	; (20000784 <main+0x5ec>)
200006cc:	681a      	ldr	r2, [r3, #0]
200006ce:	0013      	movs	r3, r2
200006d0:	005b      	lsls	r3, r3, #1
200006d2:	189b      	adds	r3, r3, r2
200006d4:	005b      	lsls	r3, r3, #1
200006d6:	001a      	movs	r2, r3
200006d8:	4b2b      	ldr	r3, [pc, #172]	; (20000788 <main+0x5f0>)
200006da:	681b      	ldr	r3, [r3, #0]
200006dc:	18d2      	adds	r2, r2, r3
200006de:	4b2b      	ldr	r3, [pc, #172]	; (2000078c <main+0x5f4>)
200006e0:	681b      	ldr	r3, [r3, #0]
200006e2:	009b      	lsls	r3, r3, #2
200006e4:	18d3      	adds	r3, r2, r3
200006e6:	1cda      	adds	r2, r3, #3
200006e8:	4b29      	ldr	r3, [pc, #164]	; (20000790 <main+0x5f8>)
200006ea:	681b      	ldr	r3, [r3, #0]
200006ec:	429a      	cmp	r2, r3
200006ee:	dd0c      	ble.n	2000070a <main+0x572>
					text10.display(&text10, 15);
200006f0:	4b2b      	ldr	r3, [pc, #172]	; (200007a0 <main+0x608>)
200006f2:	22f8      	movs	r2, #248	; 0xf8
200006f4:	0052      	lsls	r2, r2, #1
200006f6:	4694      	mov	ip, r2
200006f8:	44bc      	add	ip, r7
200006fa:	4463      	add	r3, ip
200006fc:	691b      	ldr	r3, [r3, #16]
200006fe:	222c      	movs	r2, #44	; 0x2c
20000700:	18ba      	adds	r2, r7, r2
20000702:	210f      	movs	r1, #15
20000704:	0010      	movs	r0, r2
20000706:	4798      	blx	r3
20000708:	e02a      	b.n	20000760 <main+0x5c8>
				else if(counter < delay_until_text + 7*long_text + 5*short_text + 3)
2000070a:	4b1e      	ldr	r3, [pc, #120]	; (20000784 <main+0x5ec>)
2000070c:	681a      	ldr	r2, [r3, #0]
2000070e:	0013      	movs	r3, r2
20000710:	00db      	lsls	r3, r3, #3
20000712:	1a9a      	subs	r2, r3, r2
20000714:	4b1c      	ldr	r3, [pc, #112]	; (20000788 <main+0x5f0>)
20000716:	681b      	ldr	r3, [r3, #0]
20000718:	18d1      	adds	r1, r2, r3
2000071a:	4b1c      	ldr	r3, [pc, #112]	; (2000078c <main+0x5f4>)
2000071c:	681a      	ldr	r2, [r3, #0]
2000071e:	0013      	movs	r3, r2
20000720:	009b      	lsls	r3, r3, #2
20000722:	189b      	adds	r3, r3, r2
20000724:	18cb      	adds	r3, r1, r3
20000726:	1cda      	adds	r2, r3, #3
20000728:	4b19      	ldr	r3, [pc, #100]	; (20000790 <main+0x5f8>)
2000072a:	681b      	ldr	r3, [r3, #0]
2000072c:	429a      	cmp	r2, r3
2000072e:	dd0b      	ble.n	20000748 <main+0x5b0>
					text12.display(&text12, 15);
20000730:	4b1c      	ldr	r3, [pc, #112]	; (200007a4 <main+0x60c>)
20000732:	22f8      	movs	r2, #248	; 0xf8
20000734:	0052      	lsls	r2, r2, #1
20000736:	4694      	mov	ip, r2
20000738:	44bc      	add	ip, r7
2000073a:	4463      	add	r3, ip
2000073c:	691b      	ldr	r3, [r3, #16]
2000073e:	1d3a      	adds	r2, r7, #4
20000740:	210f      	movs	r1, #15
20000742:	0010      	movs	r0, r2
20000744:	4798      	blx	r3
20000746:	e00b      	b.n	20000760 <main+0x5c8>
				else {
					text11.display(&text11, 20);
20000748:	4b17      	ldr	r3, [pc, #92]	; (200007a8 <main+0x610>)
2000074a:	22f8      	movs	r2, #248	; 0xf8
2000074c:	0052      	lsls	r2, r2, #1
2000074e:	4694      	mov	ip, r2
20000750:	44bc      	add	ip, r7
20000752:	4463      	add	r3, ip
20000754:	691b      	ldr	r3, [r3, #16]
20000756:	2218      	movs	r2, #24
20000758:	18ba      	adds	r2, r7, r2
2000075a:	2114      	movs	r1, #20
2000075c:	0010      	movs	r0, r2
2000075e:	4798      	blx	r3
				}
				
				
				fire2.update(&fire2);
20000760:	238c      	movs	r3, #140	; 0x8c
20000762:	005b      	lsls	r3, r3, #1
20000764:	18fb      	adds	r3, r7, r3
20000766:	68db      	ldr	r3, [r3, #12]
20000768:	228c      	movs	r2, #140	; 0x8c
2000076a:	0052      	lsls	r2, r2, #1
2000076c:	18ba      	adds	r2, r7, r2
2000076e:	0010      	movs	r0, r2
20000770:	4798      	blx	r3
				fire3.update(&fire3);
20000772:	23f4      	movs	r3, #244	; 0xf4
20000774:	18fb      	adds	r3, r7, r3
20000776:	68db      	ldr	r3, [r3, #12]
20000778:	22f4      	movs	r2, #244	; 0xf4
2000077a:	18ba      	adds	r2, r7, r2
2000077c:	0010      	movs	r0, r2
2000077e:	4798      	blx	r3
		switch(current_screen) {
20000780:	e619      	b.n	200003b6 <main+0x21e>
20000782:	46c0      	nop			; (mov r8, r8)
20000784:	20005580 	andcs	r5, r0, r0, lsl #11
20000788:	2000557c 	andcs	r5, r0, ip, ror r5
2000078c:	20005584 	andcs	r5, r0, r4, lsl #11
20000790:	20002204 	andcs	r2, r0, r4, lsl #4
20000794:	fffffe78 			; <UNDEFINED> instruction: 0xfffffe78
20000798:	fffffe64 			; <UNDEFINED> instruction: 0xfffffe64
2000079c:	fffffe50 			; <UNDEFINED> instruction: 0xfffffe50
200007a0:	fffffe3c 			; <UNDEFINED> instruction: 0xfffffe3c
200007a4:	fffffe14 			; <UNDEFINED> instruction: 0xfffffe14
200007a8:	fffffe28 			; <UNDEFINED> instruction: 0xfffffe28

200007ac <render>:
GameObject* gameObjects[100];
int nGameObjects = 0;


void render(GameObject* this)
{
200007ac:	b580      	push	{r7, lr}
200007ae:	b082      	sub	sp, #8
200007b0:	af00      	add	r7, sp, #0
200007b2:	6078      	str	r0, [r7, #4]
    
}
200007b4:	46c0      	nop			; (mov r8, r8)
200007b6:	46bd      	mov	sp, r7
200007b8:	b002      	add	sp, #8
200007ba:	bd80      	pop	{r7, pc}

200007bc <gameObjectUpdate>:

void gameObjectUpdate(GameObject *this) {
200007bc:	b580      	push	{r7, lr}
200007be:	b082      	sub	sp, #8
200007c0:	af00      	add	r7, sp, #0
200007c2:	6078      	str	r0, [r7, #4]
	this->animation_counter++;
200007c4:	687b      	ldr	r3, [r7, #4]
200007c6:	6a1b      	ldr	r3, [r3, #32]
200007c8:	1c5a      	adds	r2, r3, #1
200007ca:	687b      	ldr	r3, [r7, #4]
200007cc:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
200007ce:	687b      	ldr	r3, [r7, #4]
200007d0:	6a1a      	ldr	r2, [r3, #32]
200007d2:	687b      	ldr	r3, [r7, #4]
200007d4:	69db      	ldr	r3, [r3, #28]
200007d6:	429a      	cmp	r2, r3
200007d8:	d10f      	bne.n	200007fa <gameObjectUpdate+0x3e>
		this->animation_counter = 0;
200007da:	687b      	ldr	r3, [r7, #4]
200007dc:	2200      	movs	r2, #0
200007de:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
200007e0:	687b      	ldr	r3, [r7, #4]
200007e2:	695b      	ldr	r3, [r3, #20]
200007e4:	1c5a      	adds	r2, r3, #1
200007e6:	687b      	ldr	r3, [r7, #4]
200007e8:	699b      	ldr	r3, [r3, #24]
200007ea:	0019      	movs	r1, r3
200007ec:	0010      	movs	r0, r2
200007ee:	f001 fd03 	bl	200021f8 <__aeabi_idivmod>
200007f2:	000b      	movs	r3, r1
200007f4:	001a      	movs	r2, r3
200007f6:	687b      	ldr	r3, [r7, #4]
200007f8:	615a      	str	r2, [r3, #20]
	}
}
200007fa:	46c0      	nop			; (mov r8, r8)
200007fc:	46bd      	mov	sp, r7
200007fe:	b002      	add	sp, #8
20000800:	bd80      	pop	{r7, pc}
	...

20000804 <initSprites>:
Image fire2Image;
Image fire3Image;
Image fire4Image;
Image fire5Image;
Image fireImages[5];
static void initSprites( void ) {	
20000804:	b580      	push	{r7, lr}
20000806:	b08c      	sub	sp, #48	; 0x30
20000808:	af00      	add	r7, sp, #0
	sprite *pointer0 = &tempFireBlack;
2000080a:	4b3e      	ldr	r3, [pc, #248]	; (20000904 <initSprites+0x100>)
2000080c:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer0, fire_black_2_bits, fire1_gray_width, fire1_gray_height);
2000080e:	493e      	ldr	r1, [pc, #248]	; (20000908 <initSprites+0x104>)
20000810:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20000812:	230c      	movs	r3, #12
20000814:	2208      	movs	r2, #8
20000816:	f001 f8eb 	bl	200019f0 <load_sprite>
	fireBlack = pointer0;
2000081a:	4b3c      	ldr	r3, [pc, #240]	; (2000090c <initSprites+0x108>)
2000081c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
2000081e:	601a      	str	r2, [r3, #0]
	
	sprite *pointer1 = &tempFire1Gray;
20000820:	4b3b      	ldr	r3, [pc, #236]	; (20000910 <initSprites+0x10c>)
20000822:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer1, fire1_gray_bits, fire1_gray_width, fire1_gray_height);
20000824:	493b      	ldr	r1, [pc, #236]	; (20000914 <initSprites+0x110>)
20000826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20000828:	230c      	movs	r3, #12
2000082a:	2208      	movs	r2, #8
2000082c:	f001 f8e0 	bl	200019f0 <load_sprite>
	fire1Gray = pointer1;
20000830:	4b39      	ldr	r3, [pc, #228]	; (20000918 <initSprites+0x114>)
20000832:	6aba      	ldr	r2, [r7, #40]	; 0x28
20000834:	601a      	str	r2, [r3, #0]

	sprite *pointer2 = &tempFire1Light;
20000836:	4b39      	ldr	r3, [pc, #228]	; (2000091c <initSprites+0x118>)
20000838:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer2, fire1_light_bits, fire1_gray_width, fire1_gray_height);
2000083a:	4939      	ldr	r1, [pc, #228]	; (20000920 <initSprites+0x11c>)
2000083c:	6a78      	ldr	r0, [r7, #36]	; 0x24
2000083e:	230c      	movs	r3, #12
20000840:	2208      	movs	r2, #8
20000842:	f001 f8d5 	bl	200019f0 <load_sprite>
	fire1Light = pointer2;
20000846:	4b37      	ldr	r3, [pc, #220]	; (20000924 <initSprites+0x120>)
20000848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000084a:	601a      	str	r2, [r3, #0]

	sprite *pointer3 = &tempFire2Gray;
2000084c:	4b36      	ldr	r3, [pc, #216]	; (20000928 <initSprites+0x124>)
2000084e:	623b      	str	r3, [r7, #32]
	load_sprite(pointer3, fire2_gray_bits, fire1_gray_width, fire1_gray_height);
20000850:	4936      	ldr	r1, [pc, #216]	; (2000092c <initSprites+0x128>)
20000852:	6a38      	ldr	r0, [r7, #32]
20000854:	230c      	movs	r3, #12
20000856:	2208      	movs	r2, #8
20000858:	f001 f8ca 	bl	200019f0 <load_sprite>
	fire2Gray = pointer3;
2000085c:	4b34      	ldr	r3, [pc, #208]	; (20000930 <initSprites+0x12c>)
2000085e:	6a3a      	ldr	r2, [r7, #32]
20000860:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempFire2Light;
20000862:	4b34      	ldr	r3, [pc, #208]	; (20000934 <initSprites+0x130>)
20000864:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer4, fire2_light_bits, fire1_gray_width, fire1_gray_height);
20000866:	4934      	ldr	r1, [pc, #208]	; (20000938 <initSprites+0x134>)
20000868:	69f8      	ldr	r0, [r7, #28]
2000086a:	230c      	movs	r3, #12
2000086c:	2208      	movs	r2, #8
2000086e:	f001 f8bf 	bl	200019f0 <load_sprite>
	fire2Light = pointer4;
20000872:	4b32      	ldr	r3, [pc, #200]	; (2000093c <initSprites+0x138>)
20000874:	69fa      	ldr	r2, [r7, #28]
20000876:	601a      	str	r2, [r3, #0]

	sprite *pointer5 = &tempFire3Gray;
20000878:	4b31      	ldr	r3, [pc, #196]	; (20000940 <initSprites+0x13c>)
2000087a:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer5, fire3_gray_bits, fire1_gray_width, fire1_gray_height);
2000087c:	4931      	ldr	r1, [pc, #196]	; (20000944 <initSprites+0x140>)
2000087e:	69b8      	ldr	r0, [r7, #24]
20000880:	230c      	movs	r3, #12
20000882:	2208      	movs	r2, #8
20000884:	f001 f8b4 	bl	200019f0 <load_sprite>
	fire3Gray = pointer5;
20000888:	4b2f      	ldr	r3, [pc, #188]	; (20000948 <initSprites+0x144>)
2000088a:	69ba      	ldr	r2, [r7, #24]
2000088c:	601a      	str	r2, [r3, #0]

	sprite *pointer6 = &tempFire3Light;
2000088e:	4b2f      	ldr	r3, [pc, #188]	; (2000094c <initSprites+0x148>)
20000890:	617b      	str	r3, [r7, #20]
	load_sprite(pointer6, fire3_light_bits, fire1_gray_width, fire1_gray_height);
20000892:	492f      	ldr	r1, [pc, #188]	; (20000950 <initSprites+0x14c>)
20000894:	6978      	ldr	r0, [r7, #20]
20000896:	230c      	movs	r3, #12
20000898:	2208      	movs	r2, #8
2000089a:	f001 f8a9 	bl	200019f0 <load_sprite>
	fire3Light = pointer6;
2000089e:	4b2d      	ldr	r3, [pc, #180]	; (20000954 <initSprites+0x150>)
200008a0:	697a      	ldr	r2, [r7, #20]
200008a2:	601a      	str	r2, [r3, #0]

	sprite *pointer7 = &tempFire4Gray;
200008a4:	4b2c      	ldr	r3, [pc, #176]	; (20000958 <initSprites+0x154>)
200008a6:	613b      	str	r3, [r7, #16]
	load_sprite(pointer7, fire4_gray_bits, fire1_gray_width, fire1_gray_height);
200008a8:	492c      	ldr	r1, [pc, #176]	; (2000095c <initSprites+0x158>)
200008aa:	6938      	ldr	r0, [r7, #16]
200008ac:	230c      	movs	r3, #12
200008ae:	2208      	movs	r2, #8
200008b0:	f001 f89e 	bl	200019f0 <load_sprite>
	fire4Gray = pointer7;
200008b4:	4b2a      	ldr	r3, [pc, #168]	; (20000960 <initSprites+0x15c>)
200008b6:	693a      	ldr	r2, [r7, #16]
200008b8:	601a      	str	r2, [r3, #0]

	sprite *pointer8 = &tempFire4Light;
200008ba:	4b2a      	ldr	r3, [pc, #168]	; (20000964 <initSprites+0x160>)
200008bc:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer8, fire4_light_bits, fire1_gray_width, fire1_gray_height);
200008be:	492a      	ldr	r1, [pc, #168]	; (20000968 <initSprites+0x164>)
200008c0:	68f8      	ldr	r0, [r7, #12]
200008c2:	230c      	movs	r3, #12
200008c4:	2208      	movs	r2, #8
200008c6:	f001 f893 	bl	200019f0 <load_sprite>
	fire4Light = pointer8;
200008ca:	4b28      	ldr	r3, [pc, #160]	; (2000096c <initSprites+0x168>)
200008cc:	68fa      	ldr	r2, [r7, #12]
200008ce:	601a      	str	r2, [r3, #0]

	sprite *pointer9 = &tempFire5Gray;
200008d0:	4b27      	ldr	r3, [pc, #156]	; (20000970 <initSprites+0x16c>)
200008d2:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer9, fire5_gray_bits, fire1_gray_width, fire1_gray_height);
200008d4:	4927      	ldr	r1, [pc, #156]	; (20000974 <initSprites+0x170>)
200008d6:	68b8      	ldr	r0, [r7, #8]
200008d8:	230c      	movs	r3, #12
200008da:	2208      	movs	r2, #8
200008dc:	f001 f888 	bl	200019f0 <load_sprite>
	fire5Gray = pointer9;
200008e0:	4b25      	ldr	r3, [pc, #148]	; (20000978 <initSprites+0x174>)
200008e2:	68ba      	ldr	r2, [r7, #8]
200008e4:	601a      	str	r2, [r3, #0]

	sprite *pointer10 = &tempFire5Light;
200008e6:	4b25      	ldr	r3, [pc, #148]	; (2000097c <initSprites+0x178>)
200008e8:	607b      	str	r3, [r7, #4]
	load_sprite(pointer10, fire5_light_bits, fire1_gray_width, fire1_gray_height);
200008ea:	4925      	ldr	r1, [pc, #148]	; (20000980 <initSprites+0x17c>)
200008ec:	6878      	ldr	r0, [r7, #4]
200008ee:	230c      	movs	r3, #12
200008f0:	2208      	movs	r2, #8
200008f2:	f001 f87d 	bl	200019f0 <load_sprite>
	fire5Light = pointer10;
200008f6:	4b23      	ldr	r3, [pc, #140]	; (20000984 <initSprites+0x180>)
200008f8:	687a      	ldr	r2, [r7, #4]
200008fa:	601a      	str	r2, [r3, #0]
}
200008fc:	46c0      	nop			; (mov r8, r8)
200008fe:	46bd      	mov	sp, r7
20000900:	b00c      	add	sp, #48	; 0x30
20000902:	bd80      	pop	{r7, pc}
20000904:	20002480 	andcs	r2, r0, r0, lsl #9
20000908:	20005588 	andcs	r5, r0, r8, lsl #11
2000090c:	20002578 	andcs	r2, r0, r8, ror r5
20000910:	2000256c 	andcs	r2, r0, ip, ror #10
20000914:	20005594 	mulcs	r0, r4, r5
20000918:	20002590 	mulcs	r0, r0, r5
2000091c:	20002548 	andcs	r2, r0, r8, asr #10
20000920:	200055a0 	andcs	r5, r0, r0, lsr #11
20000924:	20002448 	andcs	r2, r0, r8, asr #8
20000928:	20002474 	andcs	r2, r0, r4, ror r4
2000092c:	200055ac 	andcs	r5, r0, ip, lsr #11
20000930:	2000258c 	andcs	r2, r0, ip, lsl #11
20000934:	2000257c 	andcs	r2, r0, ip, ror r5
20000938:	200055b8 			; <UNDEFINED> instruction: 0x200055b8
2000093c:	20002564 	andcs	r2, r0, r4, ror #10
20000940:	2000252c 	andcs	r2, r0, ip, lsr #10
20000944:	200055c4 	andcs	r5, r0, r4, asr #11
20000948:	20002458 	andcs	r2, r0, r8, asr r4
2000094c:	2000244c 	andcs	r2, r0, ip, asr #8
20000950:	200055d0 	ldrdcs	r5, [r0], -r0
20000954:	20002588 	andcs	r2, r0, r8, lsl #11
20000958:	2000245c 	andcs	r2, r0, ip, asr r4
2000095c:	200055dc 	ldrdcs	r5, [r0], -ip
20000960:	20002544 	andcs	r2, r0, r4, asr #10
20000964:	20002498 	mulcs	r0, r8, r4
20000968:	200055e8 	andcs	r5, r0, r8, ror #11
2000096c:	200024b0 			; <UNDEFINED> instruction: 0x200024b0
20000970:	20002520 	andcs	r2, r0, r0, lsr #10
20000974:	200055f4 	strdcs	r5, [r0], -r4
20000978:	20002560 	andcs	r2, r0, r0, ror #10
2000097c:	20002554 	andcs	r2, r0, r4, asr r5
20000980:	20005600 	andcs	r5, r0, r0, lsl #12
20000984:	20002568 	andcs	r2, r0, r8, ror #10

20000988 <init_fire>:
	
void init_fire( GameObject *fireObj ) {
20000988:	b590      	push	{r4, r7, lr}
2000098a:	b083      	sub	sp, #12
2000098c:	af00      	add	r7, sp, #0
2000098e:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20000990:	4b30      	ldr	r3, [pc, #192]	; (20000a54 <init_fire+0xcc>)
20000992:	681b      	ldr	r3, [r3, #0]
20000994:	2b00      	cmp	r3, #0
20000996:	d049      	beq.n	20000a2c <init_fire+0xa4>
		initSprites();
20000998:	f7ff ff34 	bl	20000804 <initSprites>
		firstTime = 0;			
2000099c:	4b2d      	ldr	r3, [pc, #180]	; (20000a54 <init_fire+0xcc>)
2000099e:	2200      	movs	r2, #0
200009a0:	601a      	str	r2, [r3, #0]

		fireImages[0] = fire1Image;
200009a2:	4b2d      	ldr	r3, [pc, #180]	; (20000a58 <init_fire+0xd0>)
200009a4:	4a2d      	ldr	r2, [pc, #180]	; (20000a5c <init_fire+0xd4>)
200009a6:	ca13      	ldmia	r2!, {r0, r1, r4}
200009a8:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[1] = fire2Image;
200009aa:	4b2b      	ldr	r3, [pc, #172]	; (20000a58 <init_fire+0xd0>)
200009ac:	4a2c      	ldr	r2, [pc, #176]	; (20000a60 <init_fire+0xd8>)
200009ae:	330c      	adds	r3, #12
200009b0:	ca13      	ldmia	r2!, {r0, r1, r4}
200009b2:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[2] = fire3Image;
200009b4:	4b28      	ldr	r3, [pc, #160]	; (20000a58 <init_fire+0xd0>)
200009b6:	4a2b      	ldr	r2, [pc, #172]	; (20000a64 <init_fire+0xdc>)
200009b8:	3318      	adds	r3, #24
200009ba:	ca13      	ldmia	r2!, {r0, r1, r4}
200009bc:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[3] = fire4Image;
200009be:	4b26      	ldr	r3, [pc, #152]	; (20000a58 <init_fire+0xd0>)
200009c0:	4a29      	ldr	r2, [pc, #164]	; (20000a68 <init_fire+0xe0>)
200009c2:	3324      	adds	r3, #36	; 0x24
200009c4:	ca13      	ldmia	r2!, {r0, r1, r4}
200009c6:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[4] = fire5Image;
200009c8:	4b23      	ldr	r3, [pc, #140]	; (20000a58 <init_fire+0xd0>)
200009ca:	4a28      	ldr	r2, [pc, #160]	; (20000a6c <init_fire+0xe4>)
200009cc:	3330      	adds	r3, #48	; 0x30
200009ce:	ca13      	ldmia	r2!, {r0, r1, r4}
200009d0:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&fireImages[0], fireBlack, fire1Gray, fire1Light);
200009d2:	4b27      	ldr	r3, [pc, #156]	; (20000a70 <init_fire+0xe8>)
200009d4:	6819      	ldr	r1, [r3, #0]
200009d6:	4b27      	ldr	r3, [pc, #156]	; (20000a74 <init_fire+0xec>)
200009d8:	681a      	ldr	r2, [r3, #0]
200009da:	4b27      	ldr	r3, [pc, #156]	; (20000a78 <init_fire+0xf0>)
200009dc:	681b      	ldr	r3, [r3, #0]
200009de:	481e      	ldr	r0, [pc, #120]	; (20000a58 <init_fire+0xd0>)
200009e0:	f000 fff2 	bl	200019c8 <load_image>
		load_image(&fireImages[1], fireBlack, fire2Gray, fire2Light);
200009e4:	4b22      	ldr	r3, [pc, #136]	; (20000a70 <init_fire+0xe8>)
200009e6:	6819      	ldr	r1, [r3, #0]
200009e8:	4b24      	ldr	r3, [pc, #144]	; (20000a7c <init_fire+0xf4>)
200009ea:	681a      	ldr	r2, [r3, #0]
200009ec:	4b24      	ldr	r3, [pc, #144]	; (20000a80 <init_fire+0xf8>)
200009ee:	681b      	ldr	r3, [r3, #0]
200009f0:	4824      	ldr	r0, [pc, #144]	; (20000a84 <init_fire+0xfc>)
200009f2:	f000 ffe9 	bl	200019c8 <load_image>
		load_image(&fireImages[2], fireBlack, fire3Gray, fire3Light);
200009f6:	4b1e      	ldr	r3, [pc, #120]	; (20000a70 <init_fire+0xe8>)
200009f8:	6819      	ldr	r1, [r3, #0]
200009fa:	4b23      	ldr	r3, [pc, #140]	; (20000a88 <init_fire+0x100>)
200009fc:	681a      	ldr	r2, [r3, #0]
200009fe:	4b23      	ldr	r3, [pc, #140]	; (20000a8c <init_fire+0x104>)
20000a00:	681b      	ldr	r3, [r3, #0]
20000a02:	4823      	ldr	r0, [pc, #140]	; (20000a90 <init_fire+0x108>)
20000a04:	f000 ffe0 	bl	200019c8 <load_image>
		load_image(&fireImages[3], fireBlack, fire4Gray, fire4Light);
20000a08:	4b19      	ldr	r3, [pc, #100]	; (20000a70 <init_fire+0xe8>)
20000a0a:	6819      	ldr	r1, [r3, #0]
20000a0c:	4b21      	ldr	r3, [pc, #132]	; (20000a94 <init_fire+0x10c>)
20000a0e:	681a      	ldr	r2, [r3, #0]
20000a10:	4b21      	ldr	r3, [pc, #132]	; (20000a98 <init_fire+0x110>)
20000a12:	681b      	ldr	r3, [r3, #0]
20000a14:	4821      	ldr	r0, [pc, #132]	; (20000a9c <init_fire+0x114>)
20000a16:	f000 ffd7 	bl	200019c8 <load_image>
		load_image(&fireImages[4], fireBlack, fire5Gray, fire5Light);
20000a1a:	4b15      	ldr	r3, [pc, #84]	; (20000a70 <init_fire+0xe8>)
20000a1c:	6819      	ldr	r1, [r3, #0]
20000a1e:	4b20      	ldr	r3, [pc, #128]	; (20000aa0 <init_fire+0x118>)
20000a20:	681a      	ldr	r2, [r3, #0]
20000a22:	4b20      	ldr	r3, [pc, #128]	; (20000aa4 <init_fire+0x11c>)
20000a24:	681b      	ldr	r3, [r3, #0]
20000a26:	4820      	ldr	r0, [pc, #128]	; (20000aa8 <init_fire+0x120>)
20000a28:	f000 ffce 	bl	200019c8 <load_image>
	}
	
	fireObj->images = fireImages;
20000a2c:	687b      	ldr	r3, [r7, #4]
20000a2e:	4a0a      	ldr	r2, [pc, #40]	; (20000a58 <init_fire+0xd0>)
20000a30:	601a      	str	r2, [r3, #0]

	fireObj->current_frame = 0;
20000a32:	687b      	ldr	r3, [r7, #4]
20000a34:	2200      	movs	r2, #0
20000a36:	615a      	str	r2, [r3, #20]
	fireObj->n_frames = 5;
20000a38:	687b      	ldr	r3, [r7, #4]
20000a3a:	2205      	movs	r2, #5
20000a3c:	619a      	str	r2, [r3, #24]
	fireObj->animation_speed = 1;
20000a3e:	687b      	ldr	r3, [r7, #4]
20000a40:	2201      	movs	r2, #1
20000a42:	61da      	str	r2, [r3, #28]
	fireObj->animation_counter = 0;
20000a44:	687b      	ldr	r3, [r7, #4]
20000a46:	2200      	movs	r2, #0
20000a48:	621a      	str	r2, [r3, #32]
}
20000a4a:	46c0      	nop			; (mov r8, r8)
20000a4c:	46bd      	mov	sp, r7
20000a4e:	b003      	add	sp, #12
20000a50:	bd90      	pop	{r4, r7, pc}
20000a52:	46c0      	nop			; (mov r8, r8)
20000a54:	2000560c 	andcs	r5, r0, ip, lsl #12
20000a58:	200024e4 	andcs	r2, r0, r4, ror #9
20000a5c:	200024a4 	andcs	r2, r0, r4, lsr #9
20000a60:	20002468 	andcs	r2, r0, r8, ror #8
20000a64:	2000248c 	andcs	r2, r0, ip, lsl #9
20000a68:	20002538 	andcs	r2, r0, r8, lsr r5
20000a6c:	200024d8 	ldrdcs	r2, [r0], -r8
20000a70:	20002578 	andcs	r2, r0, r8, ror r5
20000a74:	20002590 	mulcs	r0, r0, r5
20000a78:	20002448 	andcs	r2, r0, r8, asr #8
20000a7c:	2000258c 	andcs	r2, r0, ip, lsl #11
20000a80:	20002564 	andcs	r2, r0, r4, ror #10
20000a84:	200024f0 	strdcs	r2, [r0], -r0
20000a88:	20002458 	andcs	r2, r0, r8, asr r4
20000a8c:	20002588 	andcs	r2, r0, r8, lsl #11
20000a90:	200024fc 	strdcs	r2, [r0], -ip
20000a94:	20002544 	andcs	r2, r0, r4, asr #10
20000a98:	200024b0 			; <UNDEFINED> instruction: 0x200024b0
20000a9c:	20002508 	andcs	r2, r0, r8, lsl #10
20000aa0:	20002560 	andcs	r2, r0, r0, ror #10
20000aa4:	20002568 	andcs	r2, r0, r8, ror #10
20000aa8:	20002514 	andcs	r2, r0, r4, lsl r5

20000aac <playerUpdate>:
#include "gpio.h"
#include "controls.h"
#include "gameobject.h"
#include "player.h"

void playerUpdate(GameObject *this) {
20000aac:	b580      	push	{r7, lr}
20000aae:	b082      	sub	sp, #8
20000ab0:	af00      	add	r7, sp, #0
20000ab2:	6078      	str	r0, [r7, #4]
	this->animation_counter++;
20000ab4:	687b      	ldr	r3, [r7, #4]
20000ab6:	6a1b      	ldr	r3, [r3, #32]
20000ab8:	1c5a      	adds	r2, r3, #1
20000aba:	687b      	ldr	r3, [r7, #4]
20000abc:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
20000abe:	687b      	ldr	r3, [r7, #4]
20000ac0:	6a1a      	ldr	r2, [r3, #32]
20000ac2:	687b      	ldr	r3, [r7, #4]
20000ac4:	69db      	ldr	r3, [r3, #28]
20000ac6:	429a      	cmp	r2, r3
20000ac8:	d10f      	bne.n	20000aea <playerUpdate+0x3e>
		this->animation_counter = 0;
20000aca:	687b      	ldr	r3, [r7, #4]
20000acc:	2200      	movs	r2, #0
20000ace:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
20000ad0:	687b      	ldr	r3, [r7, #4]
20000ad2:	695b      	ldr	r3, [r3, #20]
20000ad4:	1c5a      	adds	r2, r3, #1
20000ad6:	687b      	ldr	r3, [r7, #4]
20000ad8:	699b      	ldr	r3, [r3, #24]
20000ada:	0019      	movs	r1, r3
20000adc:	0010      	movs	r0, r2
20000ade:	f001 fb8b 	bl	200021f8 <__aeabi_idivmod>
20000ae2:	000b      	movs	r3, r1
20000ae4:	001a      	movs	r2, r3
20000ae6:	687b      	ldr	r3, [r7, #4]
20000ae8:	615a      	str	r2, [r3, #20]
	
	static lastRightValue = 0;
	static lastLeftValue = 0; 
	static speed = 0;
	
	if (!lastRightValue && read_DIL_single(RIGHT_TRIGGER)){
20000aea:	4b23      	ldr	r3, [pc, #140]	; (20000b78 <playerUpdate+0xcc>)
20000aec:	681b      	ldr	r3, [r3, #0]
20000aee:	2b00      	cmp	r3, #0
20000af0:	d109      	bne.n	20000b06 <playerUpdate+0x5a>
20000af2:	2000      	movs	r0, #0
20000af4:	f000 ffa6 	bl	20001a44 <read_DIL_single>
20000af8:	1e03      	subs	r3, r0, #0
20000afa:	d004      	beq.n	20000b06 <playerUpdate+0x5a>
		speed += SPEED_ADD;
20000afc:	4b1f      	ldr	r3, [pc, #124]	; (20000b7c <playerUpdate+0xd0>)
20000afe:	681b      	ldr	r3, [r3, #0]
20000b00:	1cda      	adds	r2, r3, #3
20000b02:	4b1e      	ldr	r3, [pc, #120]	; (20000b7c <playerUpdate+0xd0>)
20000b04:	601a      	str	r2, [r3, #0]
	}
	
	if (!lastLeftValue && read_DIL_single(LEFT_TRIGGER)){
20000b06:	4b1e      	ldr	r3, [pc, #120]	; (20000b80 <playerUpdate+0xd4>)
20000b08:	681b      	ldr	r3, [r3, #0]
20000b0a:	2b00      	cmp	r3, #0
20000b0c:	d109      	bne.n	20000b22 <playerUpdate+0x76>
20000b0e:	2007      	movs	r0, #7
20000b10:	f000 ff98 	bl	20001a44 <read_DIL_single>
20000b14:	1e03      	subs	r3, r0, #0
20000b16:	d004      	beq.n	20000b22 <playerUpdate+0x76>
		speed -= SPEED_ADD;
20000b18:	4b18      	ldr	r3, [pc, #96]	; (20000b7c <playerUpdate+0xd0>)
20000b1a:	681b      	ldr	r3, [r3, #0]
20000b1c:	1eda      	subs	r2, r3, #3
20000b1e:	4b17      	ldr	r3, [pc, #92]	; (20000b7c <playerUpdate+0xd0>)
20000b20:	601a      	str	r2, [r3, #0]
	}
	
	this->xPos += speed;
20000b22:	687b      	ldr	r3, [r7, #4]
20000b24:	685a      	ldr	r2, [r3, #4]
20000b26:	4b15      	ldr	r3, [pc, #84]	; (20000b7c <playerUpdate+0xd0>)
20000b28:	681b      	ldr	r3, [r3, #0]
20000b2a:	18d2      	adds	r2, r2, r3
20000b2c:	687b      	ldr	r3, [r7, #4]
20000b2e:	605a      	str	r2, [r3, #4]
	
	if (speed > 0){
20000b30:	4b12      	ldr	r3, [pc, #72]	; (20000b7c <playerUpdate+0xd0>)
20000b32:	681b      	ldr	r3, [r3, #0]
20000b34:	2b00      	cmp	r3, #0
20000b36:	dd05      	ble.n	20000b44 <playerUpdate+0x98>
		speed--;
20000b38:	4b10      	ldr	r3, [pc, #64]	; (20000b7c <playerUpdate+0xd0>)
20000b3a:	681b      	ldr	r3, [r3, #0]
20000b3c:	1e5a      	subs	r2, r3, #1
20000b3e:	4b0f      	ldr	r3, [pc, #60]	; (20000b7c <playerUpdate+0xd0>)
20000b40:	601a      	str	r2, [r3, #0]
20000b42:	e008      	b.n	20000b56 <playerUpdate+0xaa>
	}
	else if (speed < 0){
20000b44:	4b0d      	ldr	r3, [pc, #52]	; (20000b7c <playerUpdate+0xd0>)
20000b46:	681b      	ldr	r3, [r3, #0]
20000b48:	2b00      	cmp	r3, #0
20000b4a:	da04      	bge.n	20000b56 <playerUpdate+0xaa>
		speed++;
20000b4c:	4b0b      	ldr	r3, [pc, #44]	; (20000b7c <playerUpdate+0xd0>)
20000b4e:	681b      	ldr	r3, [r3, #0]
20000b50:	1c5a      	adds	r2, r3, #1
20000b52:	4b0a      	ldr	r3, [pc, #40]	; (20000b7c <playerUpdate+0xd0>)
20000b54:	601a      	str	r2, [r3, #0]
	}
	
	lastRightValue = read_DIL_single(RIGHT_TRIGGER);
20000b56:	2000      	movs	r0, #0
20000b58:	f000 ff74 	bl	20001a44 <read_DIL_single>
20000b5c:	0002      	movs	r2, r0
20000b5e:	4b06      	ldr	r3, [pc, #24]	; (20000b78 <playerUpdate+0xcc>)
20000b60:	601a      	str	r2, [r3, #0]
	lastLeftValue = read_DIL_single(LEFT_TRIGGER);
20000b62:	2007      	movs	r0, #7
20000b64:	f000 ff6e 	bl	20001a44 <read_DIL_single>
20000b68:	0002      	movs	r2, r0
20000b6a:	4b05      	ldr	r3, [pc, #20]	; (20000b80 <playerUpdate+0xd4>)
20000b6c:	601a      	str	r2, [r3, #0]
	
20000b6e:	46c0      	nop			; (mov r8, r8)
20000b70:	46bd      	mov	sp, r7
20000b72:	b002      	add	sp, #8
20000b74:	bd80      	pop	{r7, pc}
20000b76:	46c0      	nop			; (mov r8, r8)
20000b78:	2000220c 	andcs	r2, r0, ip, lsl #4
20000b7c:	20002210 	andcs	r2, r0, r0, lsl r2
20000b80:	20002214 	andcs	r2, r0, r4, lsl r2

20000b84 <delay_250ns>:
#include "graphics.h"


void delay_250ns(void){
20000b84:	b580      	push	{r7, lr}
20000b86:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
20000b88:	4b0c      	ldr	r3, [pc, #48]	; (20000bbc <delay_250ns+0x38>)
20000b8a:	2200      	movs	r2, #0
20000b8c:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/4) -1);
20000b8e:	4b0c      	ldr	r3, [pc, #48]	; (20000bc0 <delay_250ns+0x3c>)
20000b90:	2229      	movs	r2, #41	; 0x29
20000b92:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000b94:	4b0b      	ldr	r3, [pc, #44]	; (20000bc4 <delay_250ns+0x40>)
20000b96:	2200      	movs	r2, #0
20000b98:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000b9a:	4b08      	ldr	r3, [pc, #32]	; (20000bbc <delay_250ns+0x38>)
20000b9c:	2205      	movs	r2, #5
20000b9e:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
20000ba0:	46c0      	nop			; (mov r8, r8)
20000ba2:	4b06      	ldr	r3, [pc, #24]	; (20000bbc <delay_250ns+0x38>)
20000ba4:	681a      	ldr	r2, [r3, #0]
20000ba6:	2380      	movs	r3, #128	; 0x80
20000ba8:	025b      	lsls	r3, r3, #9
20000baa:	4013      	ands	r3, r2
20000bac:	d0f9      	beq.n	20000ba2 <delay_250ns+0x1e>
	*STK_CTRL = 0;
20000bae:	4b03      	ldr	r3, [pc, #12]	; (20000bbc <delay_250ns+0x38>)
20000bb0:	2200      	movs	r2, #0
20000bb2:	601a      	str	r2, [r3, #0]
}
20000bb4:	46c0      	nop			; (mov r8, r8)
20000bb6:	46bd      	mov	sp, r7
20000bb8:	bd80      	pop	{r7, pc}
20000bba:	46c0      	nop			; (mov r8, r8)
20000bbc:	e000e010 	and	lr, r0, r0, lsl r0
20000bc0:	e000e014 	and	lr, r0, r4, lsl r0
20000bc4:	e000e018 	and	lr, r0, r8, lsl r0

20000bc8 <delay_500ns>:

void delay_500ns(void){
20000bc8:	b580      	push	{r7, lr}
20000bca:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
20000bcc:	4b0c      	ldr	r3, [pc, #48]	; (20000c00 <delay_500ns+0x38>)
20000bce:	2200      	movs	r2, #0
20000bd0:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/2) -1);
20000bd2:	4b0c      	ldr	r3, [pc, #48]	; (20000c04 <delay_500ns+0x3c>)
20000bd4:	2253      	movs	r2, #83	; 0x53
20000bd6:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000bd8:	4b0b      	ldr	r3, [pc, #44]	; (20000c08 <delay_500ns+0x40>)
20000bda:	2200      	movs	r2, #0
20000bdc:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000bde:	4b08      	ldr	r3, [pc, #32]	; (20000c00 <delay_500ns+0x38>)
20000be0:	2205      	movs	r2, #5
20000be2:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
20000be4:	46c0      	nop			; (mov r8, r8)
20000be6:	4b06      	ldr	r3, [pc, #24]	; (20000c00 <delay_500ns+0x38>)
20000be8:	681a      	ldr	r2, [r3, #0]
20000bea:	2380      	movs	r3, #128	; 0x80
20000bec:	025b      	lsls	r3, r3, #9
20000bee:	4013      	ands	r3, r2
20000bf0:	d0f9      	beq.n	20000be6 <delay_500ns+0x1e>
	*STK_CTRL = 0;
20000bf2:	4b03      	ldr	r3, [pc, #12]	; (20000c00 <delay_500ns+0x38>)
20000bf4:	2200      	movs	r2, #0
20000bf6:	601a      	str	r2, [r3, #0]
}
20000bf8:	46c0      	nop			; (mov r8, r8)
20000bfa:	46bd      	mov	sp, r7
20000bfc:	bd80      	pop	{r7, pc}
20000bfe:	46c0      	nop			; (mov r8, r8)
20000c00:	e000e010 	and	lr, r0, r0, lsl r0
20000c04:	e000e014 	and	lr, r0, r4, lsl r0
20000c08:	e000e018 	and	lr, r0, r8, lsl r0

20000c0c <delay_micro>:

void delay_micro(unsigned int us){
20000c0c:	b580      	push	{r7, lr}
20000c0e:	b082      	sub	sp, #8
20000c10:	af00      	add	r7, sp, #0
20000c12:	6078      	str	r0, [r7, #4]
	while(us--) {
20000c14:	e007      	b.n	20000c26 <delay_micro+0x1a>
		delay_250ns();
20000c16:	f7ff ffb5 	bl	20000b84 <delay_250ns>
		delay_250ns();
20000c1a:	f7ff ffb3 	bl	20000b84 <delay_250ns>
		delay_250ns();
20000c1e:	f7ff ffb1 	bl	20000b84 <delay_250ns>
		delay_250ns();
20000c22:	f7ff ffaf 	bl	20000b84 <delay_250ns>
	while(us--) {
20000c26:	687b      	ldr	r3, [r7, #4]
20000c28:	1e5a      	subs	r2, r3, #1
20000c2a:	607a      	str	r2, [r7, #4]
20000c2c:	2b00      	cmp	r3, #0
20000c2e:	d1f2      	bne.n	20000c16 <delay_micro+0xa>
	}
}
20000c30:	46c0      	nop			; (mov r8, r8)
20000c32:	46bd      	mov	sp, r7
20000c34:	b002      	add	sp, #8
20000c36:	bd80      	pop	{r7, pc}

20000c38 <delay_milli>:

void delay_milli(unsigned int ms){
20000c38:	b580      	push	{r7, lr}
20000c3a:	b082      	sub	sp, #8
20000c3c:	af00      	add	r7, sp, #0
20000c3e:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		while(ms--)
			delay_micro(1);
	#else
		while(ms--)
20000c40:	e004      	b.n	20000c4c <delay_milli+0x14>
			delay_micro(1000);
20000c42:	23fa      	movs	r3, #250	; 0xfa
20000c44:	009b      	lsls	r3, r3, #2
20000c46:	0018      	movs	r0, r3
20000c48:	f7ff ffe0 	bl	20000c0c <delay_micro>
		while(ms--)
20000c4c:	687b      	ldr	r3, [r7, #4]
20000c4e:	1e5a      	subs	r2, r3, #1
20000c50:	607a      	str	r2, [r7, #4]
20000c52:	2b00      	cmp	r3, #0
20000c54:	d1f5      	bne.n	20000c42 <delay_milli+0xa>
	#endif
}
20000c56:	46c0      	nop			; (mov r8, r8)
20000c58:	46bd      	mov	sp, r7
20000c5a:	b002      	add	sp, #8
20000c5c:	bd80      	pop	{r7, pc}

20000c5e <clear_thisBackBuffer>:
uint8_t draw_buffer_black_light[1024]; // 128 * 64 / 8
uint8_t draw_buffer_black_gray_light[1024]; // 128 * 64 / 8
uint8_t backBuffer[1024]; // 128 * 64 / 8
uint8_t backBufferGray[1024]; // 128 * 64 / 8
uint8_t backBufferLight[1024]; // 128 * 64 / 8
void clear_thisBackBuffer(uint8_t *buffer) {
20000c5e:	b580      	push	{r7, lr}
20000c60:	b084      	sub	sp, #16
20000c62:	af00      	add	r7, sp, #0
20000c64:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < 1024; i++)
20000c66:	2300      	movs	r3, #0
20000c68:	60fb      	str	r3, [r7, #12]
20000c6a:	e007      	b.n	20000c7c <clear_thisBackBuffer+0x1e>
		buffer[i] = 0;
20000c6c:	68fb      	ldr	r3, [r7, #12]
20000c6e:	687a      	ldr	r2, [r7, #4]
20000c70:	18d3      	adds	r3, r2, r3
20000c72:	2200      	movs	r2, #0
20000c74:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 1024; i++)
20000c76:	68fb      	ldr	r3, [r7, #12]
20000c78:	3301      	adds	r3, #1
20000c7a:	60fb      	str	r3, [r7, #12]
20000c7c:	68fb      	ldr	r3, [r7, #12]
20000c7e:	4a03      	ldr	r2, [pc, #12]	; (20000c8c <clear_thisBackBuffer+0x2e>)
20000c80:	4293      	cmp	r3, r2
20000c82:	ddf3      	ble.n	20000c6c <clear_thisBackBuffer+0xe>
}
20000c84:	46c0      	nop			; (mov r8, r8)
20000c86:	46bd      	mov	sp, r7
20000c88:	b004      	add	sp, #16
20000c8a:	bd80      	pop	{r7, pc}
20000c8c:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20000c90 <clear_backBuffer>:
void clear_backBuffer() {
20000c90:	b580      	push	{r7, lr}
20000c92:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
20000c94:	4b03      	ldr	r3, [pc, #12]	; (20000ca4 <clear_backBuffer+0x14>)
20000c96:	0018      	movs	r0, r3
20000c98:	f7ff ffe1 	bl	20000c5e <clear_thisBackBuffer>
}
20000c9c:	46c0      	nop			; (mov r8, r8)
20000c9e:	46bd      	mov	sp, r7
20000ca0:	bd80      	pop	{r7, pc}
20000ca2:	46c0      	nop			; (mov r8, r8)
20000ca4:	20002d94 	mulcs	r0, r4, sp

20000ca8 <clear_all_backBuffers>:
void clear_all_backBuffers() {
20000ca8:	b580      	push	{r7, lr}
20000caa:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
20000cac:	4b07      	ldr	r3, [pc, #28]	; (20000ccc <clear_all_backBuffers+0x24>)
20000cae:	0018      	movs	r0, r3
20000cb0:	f7ff ffd5 	bl	20000c5e <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferGray);
20000cb4:	4b06      	ldr	r3, [pc, #24]	; (20000cd0 <clear_all_backBuffers+0x28>)
20000cb6:	0018      	movs	r0, r3
20000cb8:	f7ff ffd1 	bl	20000c5e <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferLight);
20000cbc:	4b05      	ldr	r3, [pc, #20]	; (20000cd4 <clear_all_backBuffers+0x2c>)
20000cbe:	0018      	movs	r0, r3
20000cc0:	f7ff ffcd 	bl	20000c5e <clear_thisBackBuffer>
}
20000cc4:	46c0      	nop			; (mov r8, r8)
20000cc6:	46bd      	mov	sp, r7
20000cc8:	bd80      	pop	{r7, pc}
20000cca:	46c0      	nop			; (mov r8, r8)
20000ccc:	20002d94 	mulcs	r0, r4, sp
20000cd0:	20002594 	mulcs	r0, r4, r5
20000cd4:	20003d94 	mulcs	r0, r4, sp

20000cd8 <graphic_ctrl_bit_set>:

/* välj grafik-display och ettställ de bitar som är 1 i x */
static void graphic_ctrl_bit_set( uint8_t x) {
20000cd8:	b580      	push	{r7, lr}
20000cda:	b084      	sub	sp, #16
20000cdc:	af00      	add	r7, sp, #0
20000cde:	0002      	movs	r2, r0
20000ce0:	1dfb      	adds	r3, r7, #7
20000ce2:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
20000ce4:	4a0f      	ldr	r2, [pc, #60]	; (20000d24 <graphic_ctrl_bit_set+0x4c>)
20000ce6:	230f      	movs	r3, #15
20000ce8:	18fb      	adds	r3, r7, r3
20000cea:	7812      	ldrb	r2, [r2, #0]
20000cec:	701a      	strb	r2, [r3, #0]
	c |= x;
20000cee:	230f      	movs	r3, #15
20000cf0:	18fb      	adds	r3, r7, r3
20000cf2:	220f      	movs	r2, #15
20000cf4:	18b9      	adds	r1, r7, r2
20000cf6:	1dfa      	adds	r2, r7, #7
20000cf8:	7809      	ldrb	r1, [r1, #0]
20000cfa:	7812      	ldrb	r2, [r2, #0]
20000cfc:	430a      	orrs	r2, r1
20000cfe:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
20000d00:	230f      	movs	r3, #15
20000d02:	18fb      	adds	r3, r7, r3
20000d04:	220f      	movs	r2, #15
20000d06:	18ba      	adds	r2, r7, r2
20000d08:	7812      	ldrb	r2, [r2, #0]
20000d0a:	2104      	movs	r1, #4
20000d0c:	438a      	bics	r2, r1
20000d0e:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20000d10:	4a04      	ldr	r2, [pc, #16]	; (20000d24 <graphic_ctrl_bit_set+0x4c>)
20000d12:	230f      	movs	r3, #15
20000d14:	18fb      	adds	r3, r7, r3
20000d16:	781b      	ldrb	r3, [r3, #0]
20000d18:	7013      	strb	r3, [r2, #0]
}
20000d1a:	46c0      	nop			; (mov r8, r8)
20000d1c:	46bd      	mov	sp, r7
20000d1e:	b004      	add	sp, #16
20000d20:	bd80      	pop	{r7, pc}
20000d22:	46c0      	nop			; (mov r8, r8)
20000d24:	40021014 	andmi	r1, r2, r4, lsl r0

20000d28 <graphic_ctrl_bit_clear>:
/* välj grafik-display och nollställ de bitar som är 1 i x */
static void graphic_ctrl_bit_clear( uint8_t x) {
20000d28:	b580      	push	{r7, lr}
20000d2a:	b084      	sub	sp, #16
20000d2c:	af00      	add	r7, sp, #0
20000d2e:	0002      	movs	r2, r0
20000d30:	1dfb      	adds	r3, r7, #7
20000d32:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
20000d34:	4a11      	ldr	r2, [pc, #68]	; (20000d7c <graphic_ctrl_bit_clear+0x54>)
20000d36:	230f      	movs	r3, #15
20000d38:	18fb      	adds	r3, r7, r3
20000d3a:	7812      	ldrb	r2, [r2, #0]
20000d3c:	701a      	strb	r2, [r3, #0]
	c &= ~x;
20000d3e:	1dfb      	adds	r3, r7, #7
20000d40:	781b      	ldrb	r3, [r3, #0]
20000d42:	b25b      	sxtb	r3, r3
20000d44:	43db      	mvns	r3, r3
20000d46:	b25b      	sxtb	r3, r3
20000d48:	220f      	movs	r2, #15
20000d4a:	18ba      	adds	r2, r7, r2
20000d4c:	7812      	ldrb	r2, [r2, #0]
20000d4e:	b252      	sxtb	r2, r2
20000d50:	4013      	ands	r3, r2
20000d52:	b25a      	sxtb	r2, r3
20000d54:	230f      	movs	r3, #15
20000d56:	18fb      	adds	r3, r7, r3
20000d58:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
20000d5a:	230f      	movs	r3, #15
20000d5c:	18fb      	adds	r3, r7, r3
20000d5e:	220f      	movs	r2, #15
20000d60:	18ba      	adds	r2, r7, r2
20000d62:	7812      	ldrb	r2, [r2, #0]
20000d64:	2104      	movs	r1, #4
20000d66:	438a      	bics	r2, r1
20000d68:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20000d6a:	4a04      	ldr	r2, [pc, #16]	; (20000d7c <graphic_ctrl_bit_clear+0x54>)
20000d6c:	230f      	movs	r3, #15
20000d6e:	18fb      	adds	r3, r7, r3
20000d70:	781b      	ldrb	r3, [r3, #0]
20000d72:	7013      	strb	r3, [r2, #0]
}
20000d74:	46c0      	nop			; (mov r8, r8)
20000d76:	46bd      	mov	sp, r7
20000d78:	b004      	add	sp, #16
20000d7a:	bd80      	pop	{r7, pc}
20000d7c:	40021014 	andmi	r1, r2, r4, lsl r0

20000d80 <select_controller>:
void select_controller( uint8_t controller) {
20000d80:	b580      	push	{r7, lr}
20000d82:	b082      	sub	sp, #8
20000d84:	af00      	add	r7, sp, #0
20000d86:	0002      	movs	r2, r0
20000d88:	1dfb      	adds	r3, r7, #7
20000d8a:	701a      	strb	r2, [r3, #0]
	switch (controller) {
20000d8c:	1dfb      	adds	r3, r7, #7
20000d8e:	781b      	ldrb	r3, [r3, #0]
20000d90:	2b08      	cmp	r3, #8
20000d92:	d00f      	beq.n	20000db4 <select_controller+0x34>
20000d94:	dc02      	bgt.n	20000d9c <select_controller+0x1c>
20000d96:	2b00      	cmp	r3, #0
20000d98:	d005      	beq.n	20000da6 <select_controller+0x26>
		case (B_CS1|B_CS2): 
			graphic_ctrl_bit_set(B_CS1); 
			graphic_ctrl_bit_set(B_CS2); 
			break;
	}
}
20000d9a:	e020      	b.n	20000dde <select_controller+0x5e>
	switch (controller) {
20000d9c:	2b10      	cmp	r3, #16
20000d9e:	d010      	beq.n	20000dc2 <select_controller+0x42>
20000da0:	2b18      	cmp	r3, #24
20000da2:	d015      	beq.n	20000dd0 <select_controller+0x50>
}
20000da4:	e01b      	b.n	20000dde <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
20000da6:	2008      	movs	r0, #8
20000da8:	f7ff ffbe 	bl	20000d28 <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_clear(B_CS2); 
20000dac:	2010      	movs	r0, #16
20000dae:	f7ff ffbb 	bl	20000d28 <graphic_ctrl_bit_clear>
			break;
20000db2:	e014      	b.n	20000dde <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
20000db4:	2008      	movs	r0, #8
20000db6:	f7ff ff8f 	bl	20000cd8 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS2); 
20000dba:	2010      	movs	r0, #16
20000dbc:	f7ff ffb4 	bl	20000d28 <graphic_ctrl_bit_clear>
			break;
20000dc0:	e00d      	b.n	20000dde <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
20000dc2:	2008      	movs	r0, #8
20000dc4:	f7ff ffb0 	bl	20000d28 <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_set(B_CS2); 
20000dc8:	2010      	movs	r0, #16
20000dca:	f7ff ff85 	bl	20000cd8 <graphic_ctrl_bit_set>
			break;
20000dce:	e006      	b.n	20000dde <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
20000dd0:	2008      	movs	r0, #8
20000dd2:	f7ff ff81 	bl	20000cd8 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_set(B_CS2); 
20000dd6:	2010      	movs	r0, #16
20000dd8:	f7ff ff7e 	bl	20000cd8 <graphic_ctrl_bit_set>
			break;
20000ddc:	46c0      	nop			; (mov r8, r8)
}
20000dde:	46c0      	nop			; (mov r8, r8)
20000de0:	46bd      	mov	sp, r7
20000de2:	b002      	add	sp, #8
20000de4:	bd80      	pop	{r7, pc}

20000de6 <graphic_wait_ready>:

void graphic_wait_ready( void ) {
20000de6:	b580      	push	{r7, lr}
20000de8:	b082      	sub	sp, #8
20000dea:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
20000dec:	2040      	movs	r0, #64	; 0x40
20000dee:	f7ff ff9b 	bl	20000d28 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
20000df2:	4b14      	ldr	r3, [pc, #80]	; (20000e44 <graphic_wait_ready+0x5e>)
20000df4:	4a14      	ldr	r2, [pc, #80]	; (20000e48 <graphic_wait_ready+0x62>)
20000df6:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
20000df8:	2001      	movs	r0, #1
20000dfa:	f7ff ff95 	bl	20000d28 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
20000dfe:	2002      	movs	r0, #2
20000e00:	f7ff ff6a 	bl	20000cd8 <graphic_ctrl_bit_set>
	delay_500ns();
20000e04:	f7ff fee0 	bl	20000bc8 <delay_500ns>
	
	while(1) {
		graphic_ctrl_bit_set(B_E);
20000e08:	2040      	movs	r0, #64	; 0x40
20000e0a:	f7ff ff65 	bl	20000cd8 <graphic_ctrl_bit_set>
		delay_500ns();
20000e0e:	f7ff fedb 	bl	20000bc8 <delay_500ns>
		c = *portIdrHigh & LCD_BUSY; //...
20000e12:	4b0e      	ldr	r3, [pc, #56]	; (20000e4c <graphic_wait_ready+0x66>)
20000e14:	781b      	ldrb	r3, [r3, #0]
20000e16:	b2da      	uxtb	r2, r3
20000e18:	1dfb      	adds	r3, r7, #7
20000e1a:	217f      	movs	r1, #127	; 0x7f
20000e1c:	438a      	bics	r2, r1
20000e1e:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
20000e20:	2040      	movs	r0, #64	; 0x40
20000e22:	f7ff ff81 	bl	20000d28 <graphic_ctrl_bit_clear>
		delay_500ns();
20000e26:	f7ff fecf 	bl	20000bc8 <delay_500ns>
		/*if (*portIdrHigh & 0x80 == 0x80) {
			break; }*/
		if (c == 0) break;
20000e2a:	1dfb      	adds	r3, r7, #7
20000e2c:	781b      	ldrb	r3, [r3, #0]
20000e2e:	2b00      	cmp	r3, #0
20000e30:	d000      	beq.n	20000e34 <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
20000e32:	e7e9      	b.n	20000e08 <graphic_wait_ready+0x22>
		if (c == 0) break;
20000e34:	46c0      	nop			; (mov r8, r8)
	}
	//graphic_ctrl_bit_set(B_E); //<--
	*portModer = 0x55555555;	
20000e36:	4b03      	ldr	r3, [pc, #12]	; (20000e44 <graphic_wait_ready+0x5e>)
20000e38:	4a05      	ldr	r2, [pc, #20]	; (20000e50 <graphic_wait_ready+0x6a>)
20000e3a:	601a      	str	r2, [r3, #0]
}
20000e3c:	46c0      	nop			; (mov r8, r8)
20000e3e:	46bd      	mov	sp, r7
20000e40:	b002      	add	sp, #8
20000e42:	bd80      	pop	{r7, pc}
20000e44:	40021000 	andmi	r1, r2, r0
20000e48:	00005555 	andeq	r5, r0, r5, asr r5
20000e4c:	40021011 	andmi	r1, r2, r1, lsl r0
20000e50:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000e54 <graphic_read>:

static uint8_t graphic_read(uint8_t controller) {
20000e54:	b580      	push	{r7, lr}
20000e56:	b084      	sub	sp, #16
20000e58:	af00      	add	r7, sp, #0
20000e5a:	0002      	movs	r2, r0
20000e5c:	1dfb      	adds	r3, r7, #7
20000e5e:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000e60:	2040      	movs	r0, #64	; 0x40
20000e62:	f7ff ff61 	bl	20000d28 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
20000e66:	4b1c      	ldr	r3, [pc, #112]	; (20000ed8 <graphic_read+0x84>)
20000e68:	4a1c      	ldr	r2, [pc, #112]	; (20000edc <graphic_read+0x88>)
20000e6a:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS);
20000e6c:	2001      	movs	r0, #1
20000e6e:	f7ff ff33 	bl	20000cd8 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_set(B_RW);
20000e72:	2002      	movs	r0, #2
20000e74:	f7ff ff30 	bl	20000cd8 <graphic_ctrl_bit_set>
	select_controller(controller);
20000e78:	1dfb      	adds	r3, r7, #7
20000e7a:	781b      	ldrb	r3, [r3, #0]
20000e7c:	0018      	movs	r0, r3
20000e7e:	f7ff ff7f 	bl	20000d80 <select_controller>
	delay_500ns();
20000e82:	f7ff fea1 	bl	20000bc8 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000e86:	2040      	movs	r0, #64	; 0x40
20000e88:	f7ff ff26 	bl	20000cd8 <graphic_ctrl_bit_set>
	delay_500ns();
20000e8c:	f7ff fe9c 	bl	20000bc8 <delay_500ns>
	unsigned char rv = *portIdrHigh;
20000e90:	4a13      	ldr	r2, [pc, #76]	; (20000ee0 <graphic_read+0x8c>)
20000e92:	230f      	movs	r3, #15
20000e94:	18fb      	adds	r3, r7, r3
20000e96:	7812      	ldrb	r2, [r2, #0]
20000e98:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000e9a:	2040      	movs	r0, #64	; 0x40
20000e9c:	f7ff ff44 	bl	20000d28 <graphic_ctrl_bit_clear>
	*portModer = 0x55555555;
20000ea0:	4b0d      	ldr	r3, [pc, #52]	; (20000ed8 <graphic_read+0x84>)
20000ea2:	4a10      	ldr	r2, [pc, #64]	; (20000ee4 <graphic_read+0x90>)
20000ea4:	601a      	str	r2, [r3, #0]
	
	if(controller == B_CS1) {
20000ea6:	1dfb      	adds	r3, r7, #7
20000ea8:	781b      	ldrb	r3, [r3, #0]
20000eaa:	2b08      	cmp	r3, #8
20000eac:	d104      	bne.n	20000eb8 <graphic_read+0x64>
		select_controller(B_CS1);
20000eae:	2008      	movs	r0, #8
20000eb0:	f7ff ff66 	bl	20000d80 <select_controller>
		graphic_wait_ready();
20000eb4:	f7ff ff97 	bl	20000de6 <graphic_wait_ready>
	}
	if(controller == B_CS2) {
20000eb8:	1dfb      	adds	r3, r7, #7
20000eba:	781b      	ldrb	r3, [r3, #0]
20000ebc:	2b10      	cmp	r3, #16
20000ebe:	d104      	bne.n	20000eca <graphic_read+0x76>
		select_controller(B_CS2);
20000ec0:	2010      	movs	r0, #16
20000ec2:	f7ff ff5d 	bl	20000d80 <select_controller>
		graphic_wait_ready();
20000ec6:	f7ff ff8e 	bl	20000de6 <graphic_wait_ready>
	}
	
	return rv;
20000eca:	230f      	movs	r3, #15
20000ecc:	18fb      	adds	r3, r7, r3
20000ece:	781b      	ldrb	r3, [r3, #0]
}
20000ed0:	0018      	movs	r0, r3
20000ed2:	46bd      	mov	sp, r7
20000ed4:	b004      	add	sp, #16
20000ed6:	bd80      	pop	{r7, pc}
20000ed8:	40021000 	andmi	r1, r2, r0
20000edc:	00005555 	andeq	r5, r0, r5, asr r5
20000ee0:	40021011 	andmi	r1, r2, r1, lsl r0
20000ee4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000ee8 <graphic_read_data>:

graphic_read_data(uint8_t controller) {
20000ee8:	b580      	push	{r7, lr}
20000eea:	b082      	sub	sp, #8
20000eec:	af00      	add	r7, sp, #0
20000eee:	0002      	movs	r2, r0
20000ef0:	1dfb      	adds	r3, r7, #7
20000ef2:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
20000ef4:	1dfb      	adds	r3, r7, #7
20000ef6:	781b      	ldrb	r3, [r3, #0]
20000ef8:	0018      	movs	r0, r3
20000efa:	f7ff ffab 	bl	20000e54 <graphic_read>
	graphic_read(controller);
20000efe:	1dfb      	adds	r3, r7, #7
20000f00:	781b      	ldrb	r3, [r3, #0]
20000f02:	0018      	movs	r0, r3
20000f04:	f7ff ffa6 	bl	20000e54 <graphic_read>
}
20000f08:	46c0      	nop			; (mov r8, r8)
20000f0a:	0018      	movs	r0, r3
20000f0c:	46bd      	mov	sp, r7
20000f0e:	b002      	add	sp, #8
20000f10:	bd80      	pop	{r7, pc}

20000f12 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller) {
20000f12:	b580      	push	{r7, lr}
20000f14:	b082      	sub	sp, #8
20000f16:	af00      	add	r7, sp, #0
20000f18:	0002      	movs	r2, r0
20000f1a:	1dfb      	adds	r3, r7, #7
20000f1c:	701a      	strb	r2, [r3, #0]
20000f1e:	1dbb      	adds	r3, r7, #6
20000f20:	1c0a      	adds	r2, r1, #0
20000f22:	701a      	strb	r2, [r3, #0]
	*portOdrHigh = value; //I
20000f24:	4a19      	ldr	r2, [pc, #100]	; (20000f8c <graphic_write+0x7a>)
20000f26:	1dfb      	adds	r3, r7, #7
20000f28:	781b      	ldrb	r3, [r3, #0]
20000f2a:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
20000f2c:	1dbb      	adds	r3, r7, #6
20000f2e:	781b      	ldrb	r3, [r3, #0]
20000f30:	0018      	movs	r0, r3
20000f32:	f7ff ff25 	bl	20000d80 <select_controller>
	delay_500ns();
20000f36:	f7ff fe47 	bl	20000bc8 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000f3a:	2040      	movs	r0, #64	; 0x40
20000f3c:	f7ff fecc 	bl	20000cd8 <graphic_ctrl_bit_set>
	delay_500ns();
20000f40:	f7ff fe42 	bl	20000bc8 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
20000f44:	2040      	movs	r0, #64	; 0x40
20000f46:	f7ff feef 	bl	20000d28 <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1) {
20000f4a:	1dbb      	adds	r3, r7, #6
20000f4c:	781b      	ldrb	r3, [r3, #0]
20000f4e:	2208      	movs	r2, #8
20000f50:	4013      	ands	r3, r2
20000f52:	d004      	beq.n	20000f5e <graphic_write+0x4c>
		select_controller(B_CS1);
20000f54:	2008      	movs	r0, #8
20000f56:	f7ff ff13 	bl	20000d80 <select_controller>
		graphic_wait_ready();
20000f5a:	f7ff ff44 	bl	20000de6 <graphic_wait_ready>
	}
	if(controller & B_CS2) {
20000f5e:	1dbb      	adds	r3, r7, #6
20000f60:	781b      	ldrb	r3, [r3, #0]
20000f62:	2210      	movs	r2, #16
20000f64:	4013      	ands	r3, r2
20000f66:	d004      	beq.n	20000f72 <graphic_write+0x60>
		select_controller(B_CS2);
20000f68:	2010      	movs	r0, #16
20000f6a:	f7ff ff09 	bl	20000d80 <select_controller>
		graphic_wait_ready();
20000f6e:	f7ff ff3a 	bl	20000de6 <graphic_wait_ready>
	}
	
	*portOdrHigh = 0;	//I
20000f72:	4b06      	ldr	r3, [pc, #24]	; (20000f8c <graphic_write+0x7a>)
20000f74:	2200      	movs	r2, #0
20000f76:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
20000f78:	2040      	movs	r0, #64	; 0x40
20000f7a:	f7ff fead 	bl	20000cd8 <graphic_ctrl_bit_set>
	select_controller(0);
20000f7e:	2000      	movs	r0, #0
20000f80:	f7ff fefe 	bl	20000d80 <select_controller>
}
20000f84:	46c0      	nop			; (mov r8, r8)
20000f86:	46bd      	mov	sp, r7
20000f88:	b002      	add	sp, #8
20000f8a:	bd80      	pop	{r7, pc}
20000f8c:	40021015 	andmi	r1, r2, r5, lsl r0

20000f90 <graphic_write_command>:
void graphic_write_command(uint8_t command, uint8_t controller) {
20000f90:	b580      	push	{r7, lr}
20000f92:	b082      	sub	sp, #8
20000f94:	af00      	add	r7, sp, #0
20000f96:	0002      	movs	r2, r0
20000f98:	1dfb      	adds	r3, r7, #7
20000f9a:	701a      	strb	r2, [r3, #0]
20000f9c:	1dbb      	adds	r3, r7, #6
20000f9e:	1c0a      	adds	r2, r1, #0
20000fa0:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000fa2:	2040      	movs	r0, #64	; 0x40
20000fa4:	f7ff fec0 	bl	20000d28 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000fa8:	1dbb      	adds	r3, r7, #6
20000faa:	781b      	ldrb	r3, [r3, #0]
20000fac:	0018      	movs	r0, r3
20000fae:	f7ff fee7 	bl	20000d80 <select_controller>
	graphic_ctrl_bit_clear(B_RS);
20000fb2:	2001      	movs	r0, #1
20000fb4:	f7ff feb8 	bl	20000d28 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RW);
20000fb8:	2002      	movs	r0, #2
20000fba:	f7ff feb5 	bl	20000d28 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000fbe:	1dbb      	adds	r3, r7, #6
20000fc0:	781a      	ldrb	r2, [r3, #0]
20000fc2:	1dfb      	adds	r3, r7, #7
20000fc4:	781b      	ldrb	r3, [r3, #0]
20000fc6:	0011      	movs	r1, r2
20000fc8:	0018      	movs	r0, r3
20000fca:	f7ff ffa2 	bl	20000f12 <graphic_write>
}
20000fce:	46c0      	nop			; (mov r8, r8)
20000fd0:	46bd      	mov	sp, r7
20000fd2:	b002      	add	sp, #8
20000fd4:	bd80      	pop	{r7, pc}

20000fd6 <graphic_write_data>:
void graphic_write_data(uint8_t command, uint8_t controller) {
20000fd6:	b580      	push	{r7, lr}
20000fd8:	b082      	sub	sp, #8
20000fda:	af00      	add	r7, sp, #0
20000fdc:	0002      	movs	r2, r0
20000fde:	1dfb      	adds	r3, r7, #7
20000fe0:	701a      	strb	r2, [r3, #0]
20000fe2:	1dbb      	adds	r3, r7, #6
20000fe4:	1c0a      	adds	r2, r1, #0
20000fe6:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000fe8:	2040      	movs	r0, #64	; 0x40
20000fea:	f7ff fe9d 	bl	20000d28 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000fee:	1dbb      	adds	r3, r7, #6
20000ff0:	781b      	ldrb	r3, [r3, #0]
20000ff2:	0018      	movs	r0, r3
20000ff4:	f7ff fec4 	bl	20000d80 <select_controller>
	graphic_ctrl_bit_set(B_RS);
20000ff8:	2001      	movs	r0, #1
20000ffa:	f7ff fe6d 	bl	20000cd8 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20000ffe:	2002      	movs	r0, #2
20001000:	f7ff fe92 	bl	20000d28 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20001004:	1dbb      	adds	r3, r7, #6
20001006:	781a      	ldrb	r2, [r3, #0]
20001008:	1dfb      	adds	r3, r7, #7
2000100a:	781b      	ldrb	r3, [r3, #0]
2000100c:	0011      	movs	r1, r2
2000100e:	0018      	movs	r0, r3
20001010:	f7ff ff7f 	bl	20000f12 <graphic_write>
}
20001014:	46c0      	nop			; (mov r8, r8)
20001016:	46bd      	mov	sp, r7
20001018:	b002      	add	sp, #8
2000101a:	bd80      	pop	{r7, pc}

2000101c <graphic_initialize>:

void graphic_initialize( void ) {
2000101c:	b580      	push	{r7, lr}
2000101e:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20001020:	2040      	movs	r0, #64	; 0x40
20001022:	f7ff fe59 	bl	20000cd8 <graphic_ctrl_bit_set>
	delay_micro(10);
20001026:	200a      	movs	r0, #10
20001028:	f7ff fdf0 	bl	20000c0c <delay_micro>
	
	graphic_ctrl_bit_clear(B_CS1);
2000102c:	2008      	movs	r0, #8
2000102e:	f7ff fe7b 	bl	20000d28 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_CS2);
20001032:	2010      	movs	r0, #16
20001034:	f7ff fe78 	bl	20000d28 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RST);
20001038:	2020      	movs	r0, #32
2000103a:	f7ff fe75 	bl	20000d28 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_E);
2000103e:	2040      	movs	r0, #64	; 0x40
20001040:	f7ff fe72 	bl	20000d28 <graphic_ctrl_bit_clear>
	//#define SIMULATOR
	delay_milli(30);
20001044:	201e      	movs	r0, #30
20001046:	f7ff fdf7 	bl	20000c38 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
2000104a:	2020      	movs	r0, #32
2000104c:	f7ff fe44 	bl	20000cd8 <graphic_ctrl_bit_set>
	delay_milli(100); //...
20001050:	2064      	movs	r0, #100	; 0x64
20001052:	f7ff fdf1 	bl	20000c38 <delay_milli>
	
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
20001056:	2118      	movs	r1, #24
20001058:	203e      	movs	r0, #62	; 0x3e
2000105a:	f7ff ff99 	bl	20000f90 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
2000105e:	2118      	movs	r1, #24
20001060:	203f      	movs	r0, #63	; 0x3f
20001062:	f7ff ff95 	bl	20000f90 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20001066:	2118      	movs	r1, #24
20001068:	20c0      	movs	r0, #192	; 0xc0
2000106a:	f7ff ff91 	bl	20000f90 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
2000106e:	2118      	movs	r1, #24
20001070:	2040      	movs	r0, #64	; 0x40
20001072:	f7ff ff8d 	bl	20000f90 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20001076:	2118      	movs	r1, #24
20001078:	20b8      	movs	r0, #184	; 0xb8
2000107a:	f7ff ff89 	bl	20000f90 <graphic_write_command>
	select_controller(0);
2000107e:	2000      	movs	r0, #0
20001080:	f7ff fe7e 	bl	20000d80 <select_controller>
}
20001084:	46c0      	nop			; (mov r8, r8)
20001086:	46bd      	mov	sp, r7
20001088:	bd80      	pop	{r7, pc}

2000108a <graphic_clear_screen>:
void graphic_clear_screen( void ) {	//Annat i slidesen
2000108a:	b580      	push	{r7, lr}
2000108c:	b082      	sub	sp, #8
2000108e:	af00      	add	r7, sp, #0
	uint8_t page;
	for (page = 0; page < 8; page++) {
20001090:	1dfb      	adds	r3, r7, #7
20001092:	2200      	movs	r2, #0
20001094:	701a      	strb	r2, [r3, #0]
20001096:	e023      	b.n	200010e0 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
20001098:	1dfb      	adds	r3, r7, #7
2000109a:	781b      	ldrb	r3, [r3, #0]
2000109c:	2248      	movs	r2, #72	; 0x48
2000109e:	4252      	negs	r2, r2
200010a0:	4313      	orrs	r3, r2
200010a2:	b2db      	uxtb	r3, r3
200010a4:	2118      	movs	r1, #24
200010a6:	0018      	movs	r0, r3
200010a8:	f7ff ff72 	bl	20000f90 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
200010ac:	2118      	movs	r1, #24
200010ae:	2040      	movs	r0, #64	; 0x40
200010b0:	f7ff ff6e 	bl	20000f90 <graphic_write_command>
		uint8_t add;
		for (add = 0; add < 64; add++) {
200010b4:	1dbb      	adds	r3, r7, #6
200010b6:	2200      	movs	r2, #0
200010b8:	701a      	strb	r2, [r3, #0]
200010ba:	e008      	b.n	200010ce <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1|B_CS2);
200010bc:	2118      	movs	r1, #24
200010be:	2000      	movs	r0, #0
200010c0:	f7ff ff89 	bl	20000fd6 <graphic_write_data>
		for (add = 0; add < 64; add++) {
200010c4:	1dbb      	adds	r3, r7, #6
200010c6:	781a      	ldrb	r2, [r3, #0]
200010c8:	1dbb      	adds	r3, r7, #6
200010ca:	3201      	adds	r2, #1
200010cc:	701a      	strb	r2, [r3, #0]
200010ce:	1dbb      	adds	r3, r7, #6
200010d0:	781b      	ldrb	r3, [r3, #0]
200010d2:	2b3f      	cmp	r3, #63	; 0x3f
200010d4:	d9f2      	bls.n	200010bc <graphic_clear_screen+0x32>
	for (page = 0; page < 8; page++) {
200010d6:	1dfb      	adds	r3, r7, #7
200010d8:	781a      	ldrb	r2, [r3, #0]
200010da:	1dfb      	adds	r3, r7, #7
200010dc:	3201      	adds	r2, #1
200010de:	701a      	strb	r2, [r3, #0]
200010e0:	1dfb      	adds	r3, r7, #7
200010e2:	781b      	ldrb	r3, [r3, #0]
200010e4:	2b07      	cmp	r3, #7
200010e6:	d9d7      	bls.n	20001098 <graphic_clear_screen+0xe>
		}
	}
}
200010e8:	46c0      	nop			; (mov r8, r8)
200010ea:	46bd      	mov	sp, r7
200010ec:	b002      	add	sp, #8
200010ee:	bd80      	pop	{r7, pc}

200010f0 <pixel>:

/** Color: 1=light 2=gray 3=black*/
void pixel(int x, int y, int set, int color) {
200010f0:	b580      	push	{r7, lr}
200010f2:	b086      	sub	sp, #24
200010f4:	af00      	add	r7, sp, #0
200010f6:	60f8      	str	r0, [r7, #12]
200010f8:	60b9      	str	r1, [r7, #8]
200010fa:	607a      	str	r2, [r7, #4]
200010fc:	603b      	str	r3, [r7, #0]
	uint8_t mask;
	int index = 0;
200010fe:	2300      	movs	r3, #0
20001100:	613b      	str	r3, [r7, #16]
	if( (x > 128 ) || (x < 1) || (y > 64) || (y < 1) ) 
20001102:	68fb      	ldr	r3, [r7, #12]
20001104:	2b80      	cmp	r3, #128	; 0x80
20001106:	dd00      	ble.n	2000110a <pixel+0x1a>
20001108:	e0a6      	b.n	20001258 <pixel+0x168>
2000110a:	68fb      	ldr	r3, [r7, #12]
2000110c:	2b00      	cmp	r3, #0
2000110e:	dc00      	bgt.n	20001112 <pixel+0x22>
20001110:	e0a2      	b.n	20001258 <pixel+0x168>
20001112:	68bb      	ldr	r3, [r7, #8]
20001114:	2b40      	cmp	r3, #64	; 0x40
20001116:	dd00      	ble.n	2000111a <pixel+0x2a>
20001118:	e09e      	b.n	20001258 <pixel+0x168>
2000111a:	68bb      	ldr	r3, [r7, #8]
2000111c:	2b00      	cmp	r3, #0
2000111e:	dc00      	bgt.n	20001122 <pixel+0x32>
20001120:	e09a      	b.n	20001258 <pixel+0x168>
		return;
	mask = 1 << ((y-1)%8);
20001122:	68bb      	ldr	r3, [r7, #8]
20001124:	3b01      	subs	r3, #1
20001126:	4a4e      	ldr	r2, [pc, #312]	; (20001260 <pixel+0x170>)
20001128:	4013      	ands	r3, r2
2000112a:	d504      	bpl.n	20001136 <pixel+0x46>
2000112c:	3b01      	subs	r3, #1
2000112e:	2208      	movs	r2, #8
20001130:	4252      	negs	r2, r2
20001132:	4313      	orrs	r3, r2
20001134:	3301      	adds	r3, #1
20001136:	001a      	movs	r2, r3
20001138:	2301      	movs	r3, #1
2000113a:	4093      	lsls	r3, r2
2000113c:	001a      	movs	r2, r3
2000113e:	2317      	movs	r3, #23
20001140:	18fb      	adds	r3, r7, r3
20001142:	701a      	strb	r2, [r3, #0]
	if(x > 64) {
20001144:	68fb      	ldr	r3, [r7, #12]
20001146:	2b40      	cmp	r3, #64	; 0x40
20001148:	dd05      	ble.n	20001156 <pixel+0x66>
		x -= 65;
2000114a:	68fb      	ldr	r3, [r7, #12]
2000114c:	3b41      	subs	r3, #65	; 0x41
2000114e:	60fb      	str	r3, [r7, #12]
		index = 512;
20001150:	2380      	movs	r3, #128	; 0x80
20001152:	009b      	lsls	r3, r3, #2
20001154:	613b      	str	r3, [r7, #16]
	}
	index += x + ((y-1)/8)*64;
20001156:	68bb      	ldr	r3, [r7, #8]
20001158:	3b01      	subs	r3, #1
2000115a:	2b00      	cmp	r3, #0
2000115c:	da00      	bge.n	20001160 <pixel+0x70>
2000115e:	3307      	adds	r3, #7
20001160:	10db      	asrs	r3, r3, #3
20001162:	019a      	lsls	r2, r3, #6
20001164:	68fb      	ldr	r3, [r7, #12]
20001166:	18d3      	adds	r3, r2, r3
20001168:	693a      	ldr	r2, [r7, #16]
2000116a:	18d3      	adds	r3, r2, r3
2000116c:	613b      	str	r3, [r7, #16]

	if(set == 0)
2000116e:	687b      	ldr	r3, [r7, #4]
20001170:	2b00      	cmp	r3, #0
20001172:	d106      	bne.n	20001182 <pixel+0x92>
		mask = ~mask;
20001174:	2317      	movs	r3, #23
20001176:	18fb      	adds	r3, r7, r3
20001178:	2217      	movs	r2, #23
2000117a:	18ba      	adds	r2, r7, r2
2000117c:	7812      	ldrb	r2, [r2, #0]
2000117e:	43d2      	mvns	r2, r2
20001180:	701a      	strb	r2, [r3, #0]

	switch (color) {
20001182:	683b      	ldr	r3, [r7, #0]
20001184:	2b02      	cmp	r3, #2
20001186:	d024      	beq.n	200011d2 <pixel+0xe2>
20001188:	2b03      	cmp	r3, #3
2000118a:	d043      	beq.n	20001214 <pixel+0x124>
2000118c:	2b01      	cmp	r3, #1
2000118e:	d164      	bne.n	2000125a <pixel+0x16a>
		case 1:	
			if(set)
20001190:	687b      	ldr	r3, [r7, #4]
20001192:	2b00      	cmp	r3, #0
20001194:	d00e      	beq.n	200011b4 <pixel+0xc4>
				backBufferLight[index] |= mask;
20001196:	4a33      	ldr	r2, [pc, #204]	; (20001264 <pixel+0x174>)
20001198:	693b      	ldr	r3, [r7, #16]
2000119a:	18d3      	adds	r3, r2, r3
2000119c:	781a      	ldrb	r2, [r3, #0]
2000119e:	2317      	movs	r3, #23
200011a0:	18fb      	adds	r3, r7, r3
200011a2:	781b      	ldrb	r3, [r3, #0]
200011a4:	4313      	orrs	r3, r2
200011a6:	b2d9      	uxtb	r1, r3
200011a8:	4a2e      	ldr	r2, [pc, #184]	; (20001264 <pixel+0x174>)
200011aa:	693b      	ldr	r3, [r7, #16]
200011ac:	18d3      	adds	r3, r2, r3
200011ae:	1c0a      	adds	r2, r1, #0
200011b0:	701a      	strb	r2, [r3, #0]
			else
				backBufferLight[index] &= mask;
			break;
200011b2:	e052      	b.n	2000125a <pixel+0x16a>
				backBufferLight[index] &= mask;
200011b4:	4a2b      	ldr	r2, [pc, #172]	; (20001264 <pixel+0x174>)
200011b6:	693b      	ldr	r3, [r7, #16]
200011b8:	18d3      	adds	r3, r2, r3
200011ba:	781b      	ldrb	r3, [r3, #0]
200011bc:	2217      	movs	r2, #23
200011be:	18ba      	adds	r2, r7, r2
200011c0:	7812      	ldrb	r2, [r2, #0]
200011c2:	4013      	ands	r3, r2
200011c4:	b2d9      	uxtb	r1, r3
200011c6:	4a27      	ldr	r2, [pc, #156]	; (20001264 <pixel+0x174>)
200011c8:	693b      	ldr	r3, [r7, #16]
200011ca:	18d3      	adds	r3, r2, r3
200011cc:	1c0a      	adds	r2, r1, #0
200011ce:	701a      	strb	r2, [r3, #0]
			break;
200011d0:	e043      	b.n	2000125a <pixel+0x16a>
		
		case 2:	
			if(set)
200011d2:	687b      	ldr	r3, [r7, #4]
200011d4:	2b00      	cmp	r3, #0
200011d6:	d00e      	beq.n	200011f6 <pixel+0x106>
				backBufferGray[index] |= mask;
200011d8:	4a23      	ldr	r2, [pc, #140]	; (20001268 <pixel+0x178>)
200011da:	693b      	ldr	r3, [r7, #16]
200011dc:	18d3      	adds	r3, r2, r3
200011de:	781a      	ldrb	r2, [r3, #0]
200011e0:	2317      	movs	r3, #23
200011e2:	18fb      	adds	r3, r7, r3
200011e4:	781b      	ldrb	r3, [r3, #0]
200011e6:	4313      	orrs	r3, r2
200011e8:	b2d9      	uxtb	r1, r3
200011ea:	4a1f      	ldr	r2, [pc, #124]	; (20001268 <pixel+0x178>)
200011ec:	693b      	ldr	r3, [r7, #16]
200011ee:	18d3      	adds	r3, r2, r3
200011f0:	1c0a      	adds	r2, r1, #0
200011f2:	701a      	strb	r2, [r3, #0]
			else
				backBufferGray[index] &= mask;
			break;
200011f4:	e031      	b.n	2000125a <pixel+0x16a>
				backBufferGray[index] &= mask;
200011f6:	4a1c      	ldr	r2, [pc, #112]	; (20001268 <pixel+0x178>)
200011f8:	693b      	ldr	r3, [r7, #16]
200011fa:	18d3      	adds	r3, r2, r3
200011fc:	781b      	ldrb	r3, [r3, #0]
200011fe:	2217      	movs	r2, #23
20001200:	18ba      	adds	r2, r7, r2
20001202:	7812      	ldrb	r2, [r2, #0]
20001204:	4013      	ands	r3, r2
20001206:	b2d9      	uxtb	r1, r3
20001208:	4a17      	ldr	r2, [pc, #92]	; (20001268 <pixel+0x178>)
2000120a:	693b      	ldr	r3, [r7, #16]
2000120c:	18d3      	adds	r3, r2, r3
2000120e:	1c0a      	adds	r2, r1, #0
20001210:	701a      	strb	r2, [r3, #0]
			break;
20001212:	e022      	b.n	2000125a <pixel+0x16a>
		
		case 3:	
			if(set)
20001214:	687b      	ldr	r3, [r7, #4]
20001216:	2b00      	cmp	r3, #0
20001218:	d00e      	beq.n	20001238 <pixel+0x148>
				backBuffer[index] |= mask;
2000121a:	4a14      	ldr	r2, [pc, #80]	; (2000126c <pixel+0x17c>)
2000121c:	693b      	ldr	r3, [r7, #16]
2000121e:	18d3      	adds	r3, r2, r3
20001220:	781a      	ldrb	r2, [r3, #0]
20001222:	2317      	movs	r3, #23
20001224:	18fb      	adds	r3, r7, r3
20001226:	781b      	ldrb	r3, [r3, #0]
20001228:	4313      	orrs	r3, r2
2000122a:	b2d9      	uxtb	r1, r3
2000122c:	4a0f      	ldr	r2, [pc, #60]	; (2000126c <pixel+0x17c>)
2000122e:	693b      	ldr	r3, [r7, #16]
20001230:	18d3      	adds	r3, r2, r3
20001232:	1c0a      	adds	r2, r1, #0
20001234:	701a      	strb	r2, [r3, #0]
			else
				backBuffer[index] &= mask;
			break;
20001236:	e010      	b.n	2000125a <pixel+0x16a>
				backBuffer[index] &= mask;
20001238:	4a0c      	ldr	r2, [pc, #48]	; (2000126c <pixel+0x17c>)
2000123a:	693b      	ldr	r3, [r7, #16]
2000123c:	18d3      	adds	r3, r2, r3
2000123e:	781b      	ldrb	r3, [r3, #0]
20001240:	2217      	movs	r2, #23
20001242:	18ba      	adds	r2, r7, r2
20001244:	7812      	ldrb	r2, [r2, #0]
20001246:	4013      	ands	r3, r2
20001248:	b2d9      	uxtb	r1, r3
2000124a:	4a08      	ldr	r2, [pc, #32]	; (2000126c <pixel+0x17c>)
2000124c:	693b      	ldr	r3, [r7, #16]
2000124e:	18d3      	adds	r3, r2, r3
20001250:	1c0a      	adds	r2, r1, #0
20001252:	701a      	strb	r2, [r3, #0]
			break;
20001254:	46c0      	nop			; (mov r8, r8)
20001256:	e000      	b.n	2000125a <pixel+0x16a>
		return;
20001258:	46c0      	nop			; (mov r8, r8)
			
	}

}
2000125a:	46bd      	mov	sp, r7
2000125c:	b006      	add	sp, #24
2000125e:	bd80      	pop	{r7, pc}
20001260:	80000007 	andhi	r0, r0, r7
20001264:	20003d94 	mulcs	r0, r4, sp
20001268:	20002594 	mulcs	r0, r4, r5
2000126c:	20002d94 	mulcs	r0, r4, sp

20001270 <pixel2>:


void pixel2(int x, int y, int set) {
20001270:	b580      	push	{r7, lr}
20001272:	b088      	sub	sp, #32
20001274:	af00      	add	r7, sp, #0
20001276:	60f8      	str	r0, [r7, #12]
20001278:	60b9      	str	r1, [r7, #8]
2000127a:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
2000127c:	68fb      	ldr	r3, [r7, #12]
2000127e:	2b00      	cmp	r3, #0
20001280:	dc00      	bgt.n	20001284 <pixel2+0x14>
20001282:	e0bc      	b.n	200013fe <pixel2+0x18e>
20001284:	68bb      	ldr	r3, [r7, #8]
20001286:	2b00      	cmp	r3, #0
20001288:	dc00      	bgt.n	2000128c <pixel2+0x1c>
2000128a:	e0b8      	b.n	200013fe <pixel2+0x18e>
2000128c:	68fb      	ldr	r3, [r7, #12]
2000128e:	2b80      	cmp	r3, #128	; 0x80
20001290:	dd00      	ble.n	20001294 <pixel2+0x24>
20001292:	e0b4      	b.n	200013fe <pixel2+0x18e>
20001294:	68bb      	ldr	r3, [r7, #8]
20001296:	2b40      	cmp	r3, #64	; 0x40
20001298:	dd00      	ble.n	2000129c <pixel2+0x2c>
2000129a:	e0b0      	b.n	200013fe <pixel2+0x18e>
	index = (y-1)/8;
2000129c:	68bb      	ldr	r3, [r7, #8]
2000129e:	3b01      	subs	r3, #1
200012a0:	2b00      	cmp	r3, #0
200012a2:	da00      	bge.n	200012a6 <pixel2+0x36>
200012a4:	3307      	adds	r3, #7
200012a6:	10db      	asrs	r3, r3, #3
200012a8:	61bb      	str	r3, [r7, #24]
	switch( (y-1)%8 ) {
200012aa:	68bb      	ldr	r3, [r7, #8]
200012ac:	3b01      	subs	r3, #1
200012ae:	4a56      	ldr	r2, [pc, #344]	; (20001408 <pixel2+0x198>)
200012b0:	4013      	ands	r3, r2
200012b2:	d504      	bpl.n	200012be <pixel2+0x4e>
200012b4:	3b01      	subs	r3, #1
200012b6:	2208      	movs	r2, #8
200012b8:	4252      	negs	r2, r2
200012ba:	4313      	orrs	r3, r2
200012bc:	3301      	adds	r3, #1
200012be:	2b07      	cmp	r3, #7
200012c0:	d82c      	bhi.n	2000131c <pixel2+0xac>
200012c2:	009a      	lsls	r2, r3, #2
200012c4:	4b51      	ldr	r3, [pc, #324]	; (2000140c <pixel2+0x19c>)
200012c6:	18d3      	adds	r3, r2, r3
200012c8:	681b      	ldr	r3, [r3, #0]
200012ca:	469f      	mov	pc, r3
		case 0: mask = 1; break;
200012cc:	231f      	movs	r3, #31
200012ce:	18fb      	adds	r3, r7, r3
200012d0:	2201      	movs	r2, #1
200012d2:	701a      	strb	r2, [r3, #0]
200012d4:	e022      	b.n	2000131c <pixel2+0xac>
		case 1: mask = 2; break;
200012d6:	231f      	movs	r3, #31
200012d8:	18fb      	adds	r3, r7, r3
200012da:	2202      	movs	r2, #2
200012dc:	701a      	strb	r2, [r3, #0]
200012de:	e01d      	b.n	2000131c <pixel2+0xac>
		case 2: mask = 4; break;
200012e0:	231f      	movs	r3, #31
200012e2:	18fb      	adds	r3, r7, r3
200012e4:	2204      	movs	r2, #4
200012e6:	701a      	strb	r2, [r3, #0]
200012e8:	e018      	b.n	2000131c <pixel2+0xac>
		case 3: mask = 8; break;
200012ea:	231f      	movs	r3, #31
200012ec:	18fb      	adds	r3, r7, r3
200012ee:	2208      	movs	r2, #8
200012f0:	701a      	strb	r2, [r3, #0]
200012f2:	e013      	b.n	2000131c <pixel2+0xac>
		case 4: mask = 0x10; break;
200012f4:	231f      	movs	r3, #31
200012f6:	18fb      	adds	r3, r7, r3
200012f8:	2210      	movs	r2, #16
200012fa:	701a      	strb	r2, [r3, #0]
200012fc:	e00e      	b.n	2000131c <pixel2+0xac>
		case 5: mask = 0x20; break;
200012fe:	231f      	movs	r3, #31
20001300:	18fb      	adds	r3, r7, r3
20001302:	2220      	movs	r2, #32
20001304:	701a      	strb	r2, [r3, #0]
20001306:	e009      	b.n	2000131c <pixel2+0xac>
		case 6: mask = 0x40; break;
20001308:	231f      	movs	r3, #31
2000130a:	18fb      	adds	r3, r7, r3
2000130c:	2240      	movs	r2, #64	; 0x40
2000130e:	701a      	strb	r2, [r3, #0]
20001310:	e004      	b.n	2000131c <pixel2+0xac>
		case 7: mask = 0x80; break;
20001312:	231f      	movs	r3, #31
20001314:	18fb      	adds	r3, r7, r3
20001316:	2280      	movs	r2, #128	; 0x80
20001318:	701a      	strb	r2, [r3, #0]
2000131a:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0)
2000131c:	687b      	ldr	r3, [r7, #4]
2000131e:	2b00      	cmp	r3, #0
20001320:	d106      	bne.n	20001330 <pixel2+0xc0>
		mask = ~mask;
20001322:	231f      	movs	r3, #31
20001324:	18fb      	adds	r3, r7, r3
20001326:	221f      	movs	r2, #31
20001328:	18ba      	adds	r2, r7, r2
2000132a:	7812      	ldrb	r2, [r2, #0]
2000132c:	43d2      	mvns	r2, r2
2000132e:	701a      	strb	r2, [r3, #0]
	
	if(x > 64){
20001330:	68fb      	ldr	r3, [r7, #12]
20001332:	2b40      	cmp	r3, #64	; 0x40
20001334:	dd07      	ble.n	20001346 <pixel2+0xd6>
		controller = B_CS2;
20001336:	231e      	movs	r3, #30
20001338:	18fb      	adds	r3, r7, r3
2000133a:	2210      	movs	r2, #16
2000133c:	701a      	strb	r2, [r3, #0]
		x = x - 65;
2000133e:	68fb      	ldr	r3, [r7, #12]
20001340:	3b41      	subs	r3, #65	; 0x41
20001342:	60fb      	str	r3, [r7, #12]
20001344:	e006      	b.n	20001354 <pixel2+0xe4>
	} else {
		controller = B_CS1;
20001346:	231e      	movs	r3, #30
20001348:	18fb      	adds	r3, r7, r3
2000134a:	2208      	movs	r2, #8
2000134c:	701a      	strb	r2, [r3, #0]
		x = x-1;
2000134e:	68fb      	ldr	r3, [r7, #12]
20001350:	3b01      	subs	r3, #1
20001352:	60fb      	str	r3, [r7, #12]
	}
	graphic_write_command(LCD_SET_ADD | x, controller );
20001354:	68fb      	ldr	r3, [r7, #12]
20001356:	b25b      	sxtb	r3, r3
20001358:	2240      	movs	r2, #64	; 0x40
2000135a:	4313      	orrs	r3, r2
2000135c:	b25b      	sxtb	r3, r3
2000135e:	b2da      	uxtb	r2, r3
20001360:	231e      	movs	r3, #30
20001362:	18fb      	adds	r3, r7, r3
20001364:	781b      	ldrb	r3, [r3, #0]
20001366:	0019      	movs	r1, r3
20001368:	0010      	movs	r0, r2
2000136a:	f7ff fe11 	bl	20000f90 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller );
2000136e:	69bb      	ldr	r3, [r7, #24]
20001370:	b25b      	sxtb	r3, r3
20001372:	2248      	movs	r2, #72	; 0x48
20001374:	4252      	negs	r2, r2
20001376:	4313      	orrs	r3, r2
20001378:	b25b      	sxtb	r3, r3
2000137a:	b2da      	uxtb	r2, r3
2000137c:	231e      	movs	r3, #30
2000137e:	18fb      	adds	r3, r7, r3
20001380:	781b      	ldrb	r3, [r3, #0]
20001382:	0019      	movs	r1, r3
20001384:	0010      	movs	r0, r2
20001386:	f7ff fe03 	bl	20000f90 <graphic_write_command>
	
	c = graphic_read_data(controller);
2000138a:	231e      	movs	r3, #30
2000138c:	18fb      	adds	r3, r7, r3
2000138e:	781b      	ldrb	r3, [r3, #0]
20001390:	0018      	movs	r0, r3
20001392:	f7ff fda9 	bl	20000ee8 <graphic_read_data>
20001396:	0002      	movs	r2, r0
20001398:	2317      	movs	r3, #23
2000139a:	18fb      	adds	r3, r7, r3
2000139c:	701a      	strb	r2, [r3, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
2000139e:	68fb      	ldr	r3, [r7, #12]
200013a0:	b25b      	sxtb	r3, r3
200013a2:	2240      	movs	r2, #64	; 0x40
200013a4:	4313      	orrs	r3, r2
200013a6:	b25b      	sxtb	r3, r3
200013a8:	b2da      	uxtb	r2, r3
200013aa:	231e      	movs	r3, #30
200013ac:	18fb      	adds	r3, r7, r3
200013ae:	781b      	ldrb	r3, [r3, #0]
200013b0:	0019      	movs	r1, r3
200013b2:	0010      	movs	r0, r2
200013b4:	f7ff fdec 	bl	20000f90 <graphic_write_command>
	
	if(set)
200013b8:	687b      	ldr	r3, [r7, #4]
200013ba:	2b00      	cmp	r3, #0
200013bc:	d00a      	beq.n	200013d4 <pixel2+0x164>
		mask = mask | c;
200013be:	231f      	movs	r3, #31
200013c0:	18fb      	adds	r3, r7, r3
200013c2:	221f      	movs	r2, #31
200013c4:	18b9      	adds	r1, r7, r2
200013c6:	2217      	movs	r2, #23
200013c8:	18ba      	adds	r2, r7, r2
200013ca:	7809      	ldrb	r1, [r1, #0]
200013cc:	7812      	ldrb	r2, [r2, #0]
200013ce:	430a      	orrs	r2, r1
200013d0:	701a      	strb	r2, [r3, #0]
200013d2:	e009      	b.n	200013e8 <pixel2+0x178>
	else
		mask = mask & c;
200013d4:	231f      	movs	r3, #31
200013d6:	18fb      	adds	r3, r7, r3
200013d8:	221f      	movs	r2, #31
200013da:	18ba      	adds	r2, r7, r2
200013dc:	2117      	movs	r1, #23
200013de:	1879      	adds	r1, r7, r1
200013e0:	7812      	ldrb	r2, [r2, #0]
200013e2:	7809      	ldrb	r1, [r1, #0]
200013e4:	400a      	ands	r2, r1
200013e6:	701a      	strb	r2, [r3, #0]
	
	graphic_write_data(mask, controller);
200013e8:	231e      	movs	r3, #30
200013ea:	18fb      	adds	r3, r7, r3
200013ec:	781a      	ldrb	r2, [r3, #0]
200013ee:	231f      	movs	r3, #31
200013f0:	18fb      	adds	r3, r7, r3
200013f2:	781b      	ldrb	r3, [r3, #0]
200013f4:	0011      	movs	r1, r2
200013f6:	0018      	movs	r0, r3
200013f8:	f7ff fded 	bl	20000fd6 <graphic_write_data>
200013fc:	e000      	b.n	20001400 <pixel2+0x190>
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
200013fe:	46c0      	nop			; (mov r8, r8)
}
20001400:	46bd      	mov	sp, r7
20001402:	b008      	add	sp, #32
20001404:	bd80      	pop	{r7, pc}
20001406:	46c0      	nop			; (mov r8, r8)
20001408:	80000007 	andhi	r0, r0, r7
2000140c:	20005780 	andcs	r5, r0, r0, lsl #15

20001410 <graphic_draw_screen>:

void graphic_draw_screen(uint8_t *buffer) {
20001410:	b580      	push	{r7, lr}
20001412:	b086      	sub	sp, #24
20001414:	af00      	add	r7, sp, #0
20001416:	6078      	str	r0, [r7, #4]
	uint8_t i, j, controller, c;
	unsigned int k = 0;
20001418:	2300      	movs	r3, #0
2000141a:	613b      	str	r3, [r7, #16]
	for(c = 0; c < 2; c++) {
2000141c:	2315      	movs	r3, #21
2000141e:	18fb      	adds	r3, r7, r3
20001420:	2200      	movs	r2, #0
20001422:	701a      	strb	r2, [r3, #0]
20001424:	e056      	b.n	200014d4 <graphic_draw_screen+0xc4>
		controller = (c == 0) ? B_CS1 : B_CS2;
20001426:	2315      	movs	r3, #21
20001428:	18fb      	adds	r3, r7, r3
2000142a:	781b      	ldrb	r3, [r3, #0]
2000142c:	2b00      	cmp	r3, #0
2000142e:	d101      	bne.n	20001434 <graphic_draw_screen+0x24>
20001430:	2208      	movs	r2, #8
20001432:	e000      	b.n	20001436 <graphic_draw_screen+0x26>
20001434:	2210      	movs	r2, #16
20001436:	230f      	movs	r3, #15
20001438:	18fb      	adds	r3, r7, r3
2000143a:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 8; j++) {
2000143c:	2316      	movs	r3, #22
2000143e:	18fb      	adds	r3, r7, r3
20001440:	2200      	movs	r2, #0
20001442:	701a      	strb	r2, [r3, #0]
20001444:	e03a      	b.n	200014bc <graphic_draw_screen+0xac>
			graphic_write_command(LCD_SET_PAGE | j, controller);
20001446:	2316      	movs	r3, #22
20001448:	18fb      	adds	r3, r7, r3
2000144a:	781b      	ldrb	r3, [r3, #0]
2000144c:	2248      	movs	r2, #72	; 0x48
2000144e:	4252      	negs	r2, r2
20001450:	4313      	orrs	r3, r2
20001452:	b2da      	uxtb	r2, r3
20001454:	230f      	movs	r3, #15
20001456:	18fb      	adds	r3, r7, r3
20001458:	781b      	ldrb	r3, [r3, #0]
2000145a:	0019      	movs	r1, r3
2000145c:	0010      	movs	r0, r2
2000145e:	f7ff fd97 	bl	20000f90 <graphic_write_command>
			graphic_write_command(LCD_SET_ADD | 0, controller);
20001462:	230f      	movs	r3, #15
20001464:	18fb      	adds	r3, r7, r3
20001466:	781b      	ldrb	r3, [r3, #0]
20001468:	0019      	movs	r1, r3
2000146a:	2040      	movs	r0, #64	; 0x40
2000146c:	f7ff fd90 	bl	20000f90 <graphic_write_command>
			for(i = 0; i <= 63; i++, k++) {
20001470:	2317      	movs	r3, #23
20001472:	18fb      	adds	r3, r7, r3
20001474:	2200      	movs	r2, #0
20001476:	701a      	strb	r2, [r3, #0]
20001478:	e014      	b.n	200014a4 <graphic_draw_screen+0x94>
				graphic_write_data(buffer[k], controller);
2000147a:	687a      	ldr	r2, [r7, #4]
2000147c:	693b      	ldr	r3, [r7, #16]
2000147e:	18d3      	adds	r3, r2, r3
20001480:	781a      	ldrb	r2, [r3, #0]
20001482:	230f      	movs	r3, #15
20001484:	18fb      	adds	r3, r7, r3
20001486:	781b      	ldrb	r3, [r3, #0]
20001488:	0019      	movs	r1, r3
2000148a:	0010      	movs	r0, r2
2000148c:	f7ff fda3 	bl	20000fd6 <graphic_write_data>
			for(i = 0; i <= 63; i++, k++) {
20001490:	2317      	movs	r3, #23
20001492:	18fb      	adds	r3, r7, r3
20001494:	781a      	ldrb	r2, [r3, #0]
20001496:	2317      	movs	r3, #23
20001498:	18fb      	adds	r3, r7, r3
2000149a:	3201      	adds	r2, #1
2000149c:	701a      	strb	r2, [r3, #0]
2000149e:	693b      	ldr	r3, [r7, #16]
200014a0:	3301      	adds	r3, #1
200014a2:	613b      	str	r3, [r7, #16]
200014a4:	2317      	movs	r3, #23
200014a6:	18fb      	adds	r3, r7, r3
200014a8:	781b      	ldrb	r3, [r3, #0]
200014aa:	2b3f      	cmp	r3, #63	; 0x3f
200014ac:	d9e5      	bls.n	2000147a <graphic_draw_screen+0x6a>
		for(j = 0; j < 8; j++) {
200014ae:	2316      	movs	r3, #22
200014b0:	18fb      	adds	r3, r7, r3
200014b2:	781a      	ldrb	r2, [r3, #0]
200014b4:	2316      	movs	r3, #22
200014b6:	18fb      	adds	r3, r7, r3
200014b8:	3201      	adds	r2, #1
200014ba:	701a      	strb	r2, [r3, #0]
200014bc:	2316      	movs	r3, #22
200014be:	18fb      	adds	r3, r7, r3
200014c0:	781b      	ldrb	r3, [r3, #0]
200014c2:	2b07      	cmp	r3, #7
200014c4:	d9bf      	bls.n	20001446 <graphic_draw_screen+0x36>
	for(c = 0; c < 2; c++) {
200014c6:	2315      	movs	r3, #21
200014c8:	18fb      	adds	r3, r7, r3
200014ca:	781a      	ldrb	r2, [r3, #0]
200014cc:	2315      	movs	r3, #21
200014ce:	18fb      	adds	r3, r7, r3
200014d0:	3201      	adds	r2, #1
200014d2:	701a      	strb	r2, [r3, #0]
200014d4:	2315      	movs	r3, #21
200014d6:	18fb      	adds	r3, r7, r3
200014d8:	781b      	ldrb	r3, [r3, #0]
200014da:	2b01      	cmp	r3, #1
200014dc:	d9a3      	bls.n	20001426 <graphic_draw_screen+0x16>
			}
		}
	}
}
200014de:	46c0      	nop			; (mov r8, r8)
200014e0:	46bd      	mov	sp, r7
200014e2:	b006      	add	sp, #24
200014e4:	bd80      	pop	{r7, pc}

200014e6 <draw_sprite>:


void grayScaleTest( void );


void draw_sprite(sprite* s, int x, int y, int set, int color) {
200014e6:	b5b0      	push	{r4, r5, r7, lr}
200014e8:	b08a      	sub	sp, #40	; 0x28
200014ea:	af00      	add	r7, sp, #0
200014ec:	60f8      	str	r0, [r7, #12]
200014ee:	60b9      	str	r1, [r7, #8]
200014f0:	607a      	str	r2, [r7, #4]
200014f2:	603b      	str	r3, [r7, #0]
	int i,j,k, width_in_bytes;
	if (s->width % 8 == 0)
200014f4:	68fb      	ldr	r3, [r7, #12]
200014f6:	681b      	ldr	r3, [r3, #0]
200014f8:	2207      	movs	r2, #7
200014fa:	4013      	ands	r3, r2
200014fc:	d104      	bne.n	20001508 <draw_sprite+0x22>
		width_in_bytes = s->width / 8;
200014fe:	68fb      	ldr	r3, [r7, #12]
20001500:	681b      	ldr	r3, [r3, #0]
20001502:	08db      	lsrs	r3, r3, #3
20001504:	61bb      	str	r3, [r7, #24]
20001506:	e004      	b.n	20001512 <draw_sprite+0x2c>
	else
		width_in_bytes = (s->width / 8) + 1;
20001508:	68fb      	ldr	r3, [r7, #12]
2000150a:	681b      	ldr	r3, [r3, #0]
2000150c:	08db      	lsrs	r3, r3, #3
2000150e:	3301      	adds	r3, #1
20001510:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < s->height; i++)
20001512:	2300      	movs	r3, #0
20001514:	627b      	str	r3, [r7, #36]	; 0x24
20001516:	e06a      	b.n	200015ee <draw_sprite+0x108>
		for (j = 0; j < width_in_bytes; j++) {
20001518:	2300      	movs	r3, #0
2000151a:	623b      	str	r3, [r7, #32]
2000151c:	e060      	b.n	200015e0 <draw_sprite+0xfa>
			unsigned char byte = s->data[i * width_in_bytes + j];
2000151e:	68fb      	ldr	r3, [r7, #12]
20001520:	689b      	ldr	r3, [r3, #8]
20001522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001524:	69b9      	ldr	r1, [r7, #24]
20001526:	4351      	muls	r1, r2
20001528:	6a3a      	ldr	r2, [r7, #32]
2000152a:	188a      	adds	r2, r1, r2
2000152c:	189a      	adds	r2, r3, r2
2000152e:	2317      	movs	r3, #23
20001530:	18fb      	adds	r3, r7, r3
20001532:	7812      	ldrb	r2, [r2, #0]
20001534:	701a      	strb	r2, [r3, #0]
			for (k =0; k < 8; k++) {
20001536:	2300      	movs	r3, #0
20001538:	61fb      	str	r3, [r7, #28]
2000153a:	e04b      	b.n	200015d4 <draw_sprite+0xee>
				if (byte & (1 << k)){
2000153c:	2317      	movs	r3, #23
2000153e:	18fb      	adds	r3, r7, r3
20001540:	781a      	ldrb	r2, [r3, #0]
20001542:	69fb      	ldr	r3, [r7, #28]
20001544:	411a      	asrs	r2, r3
20001546:	0013      	movs	r3, r2
20001548:	2201      	movs	r2, #1
2000154a:	4013      	ands	r3, r2
2000154c:	d03f      	beq.n	200015ce <draw_sprite+0xe8>
					pixel(8 * j + k + x + 1, i + y + 1, set, color);
2000154e:	6a3b      	ldr	r3, [r7, #32]
20001550:	00da      	lsls	r2, r3, #3
20001552:	69fb      	ldr	r3, [r7, #28]
20001554:	18d2      	adds	r2, r2, r3
20001556:	68bb      	ldr	r3, [r7, #8]
20001558:	18d3      	adds	r3, r2, r3
2000155a:	1c58      	adds	r0, r3, #1
2000155c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000155e:	687b      	ldr	r3, [r7, #4]
20001560:	18d3      	adds	r3, r2, r3
20001562:	1c59      	adds	r1, r3, #1
20001564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001566:	683a      	ldr	r2, [r7, #0]
20001568:	f7ff fdc2 	bl	200010f0 <pixel>
					
					if(set) {	//Remove the other colors from this pixel
2000156c:	683b      	ldr	r3, [r7, #0]
2000156e:	2b00      	cmp	r3, #0
20001570:	d02d      	beq.n	200015ce <draw_sprite+0xe8>
						pixel(8 * j + k + x + 1, i + y + 1, 0, (color+1) % 3);
20001572:	6a3b      	ldr	r3, [r7, #32]
20001574:	00da      	lsls	r2, r3, #3
20001576:	69fb      	ldr	r3, [r7, #28]
20001578:	18d2      	adds	r2, r2, r3
2000157a:	68bb      	ldr	r3, [r7, #8]
2000157c:	18d3      	adds	r3, r2, r3
2000157e:	1c5c      	adds	r4, r3, #1
20001580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001582:	687b      	ldr	r3, [r7, #4]
20001584:	18d3      	adds	r3, r2, r3
20001586:	1c5d      	adds	r5, r3, #1
20001588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000158a:	3301      	adds	r3, #1
2000158c:	2103      	movs	r1, #3
2000158e:	0018      	movs	r0, r3
20001590:	f000 fe32 	bl	200021f8 <__aeabi_idivmod>
20001594:	000b      	movs	r3, r1
20001596:	2200      	movs	r2, #0
20001598:	0029      	movs	r1, r5
2000159a:	0020      	movs	r0, r4
2000159c:	f7ff fda8 	bl	200010f0 <pixel>
						pixel(8 * j + k + x + 1, i + y + 1, 0, (color+2) % 3);
200015a0:	6a3b      	ldr	r3, [r7, #32]
200015a2:	00da      	lsls	r2, r3, #3
200015a4:	69fb      	ldr	r3, [r7, #28]
200015a6:	18d2      	adds	r2, r2, r3
200015a8:	68bb      	ldr	r3, [r7, #8]
200015aa:	18d3      	adds	r3, r2, r3
200015ac:	1c5c      	adds	r4, r3, #1
200015ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200015b0:	687b      	ldr	r3, [r7, #4]
200015b2:	18d3      	adds	r3, r2, r3
200015b4:	1c5d      	adds	r5, r3, #1
200015b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200015b8:	3302      	adds	r3, #2
200015ba:	2103      	movs	r1, #3
200015bc:	0018      	movs	r0, r3
200015be:	f000 fe1b 	bl	200021f8 <__aeabi_idivmod>
200015c2:	000b      	movs	r3, r1
200015c4:	2200      	movs	r2, #0
200015c6:	0029      	movs	r1, r5
200015c8:	0020      	movs	r0, r4
200015ca:	f7ff fd91 	bl	200010f0 <pixel>
			for (k =0; k < 8; k++) {
200015ce:	69fb      	ldr	r3, [r7, #28]
200015d0:	3301      	adds	r3, #1
200015d2:	61fb      	str	r3, [r7, #28]
200015d4:	69fb      	ldr	r3, [r7, #28]
200015d6:	2b07      	cmp	r3, #7
200015d8:	ddb0      	ble.n	2000153c <draw_sprite+0x56>
		for (j = 0; j < width_in_bytes; j++) {
200015da:	6a3b      	ldr	r3, [r7, #32]
200015dc:	3301      	adds	r3, #1
200015de:	623b      	str	r3, [r7, #32]
200015e0:	6a3a      	ldr	r2, [r7, #32]
200015e2:	69bb      	ldr	r3, [r7, #24]
200015e4:	429a      	cmp	r2, r3
200015e6:	db9a      	blt.n	2000151e <draw_sprite+0x38>
	for (i = 0; i < s->height; i++)
200015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200015ea:	3301      	adds	r3, #1
200015ec:	627b      	str	r3, [r7, #36]	; 0x24
200015ee:	68fb      	ldr	r3, [r7, #12]
200015f0:	685a      	ldr	r2, [r3, #4]
200015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200015f4:	429a      	cmp	r2, r3
200015f6:	d88f      	bhi.n	20001518 <draw_sprite+0x32>
					}
				}
			}
		}
}
200015f8:	46c0      	nop			; (mov r8, r8)
200015fa:	46bd      	mov	sp, r7
200015fc:	b00a      	add	sp, #40	; 0x28
200015fe:	bdb0      	pop	{r4, r5, r7, pc}

20001600 <fillRectangle>:

void fillRectangle( int x, int y, int width, int height ){
20001600:	b580      	push	{r7, lr}
20001602:	b086      	sub	sp, #24
20001604:	af00      	add	r7, sp, #0
20001606:	60f8      	str	r0, [r7, #12]
20001608:	60b9      	str	r1, [r7, #8]
2000160a:	607a      	str	r2, [r7, #4]
2000160c:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
2000160e:	68fb      	ldr	r3, [r7, #12]
20001610:	617b      	str	r3, [r7, #20]
20001612:	e014      	b.n	2000163e <fillRectangle+0x3e>
		for (j = y; j < y + height; j++) {
20001614:	68bb      	ldr	r3, [r7, #8]
20001616:	613b      	str	r3, [r7, #16]
20001618:	e008      	b.n	2000162c <fillRectangle+0x2c>
			pixel(i, j, 1, 3);
2000161a:	6939      	ldr	r1, [r7, #16]
2000161c:	6978      	ldr	r0, [r7, #20]
2000161e:	2303      	movs	r3, #3
20001620:	2201      	movs	r2, #1
20001622:	f7ff fd65 	bl	200010f0 <pixel>
		for (j = y; j < y + height; j++) {
20001626:	693b      	ldr	r3, [r7, #16]
20001628:	3301      	adds	r3, #1
2000162a:	613b      	str	r3, [r7, #16]
2000162c:	68ba      	ldr	r2, [r7, #8]
2000162e:	683b      	ldr	r3, [r7, #0]
20001630:	18d2      	adds	r2, r2, r3
20001632:	693b      	ldr	r3, [r7, #16]
20001634:	429a      	cmp	r2, r3
20001636:	dcf0      	bgt.n	2000161a <fillRectangle+0x1a>
	for (i = x; i < x + width; i++) {
20001638:	697b      	ldr	r3, [r7, #20]
2000163a:	3301      	adds	r3, #1
2000163c:	617b      	str	r3, [r7, #20]
2000163e:	68fa      	ldr	r2, [r7, #12]
20001640:	687b      	ldr	r3, [r7, #4]
20001642:	18d2      	adds	r2, r2, r3
20001644:	697b      	ldr	r3, [r7, #20]
20001646:	429a      	cmp	r2, r3
20001648:	dce4      	bgt.n	20001614 <fillRectangle+0x14>
		}
	}
}
2000164a:	46c0      	nop			; (mov r8, r8)
2000164c:	46bd      	mov	sp, r7
2000164e:	b006      	add	sp, #24
20001650:	bd80      	pop	{r7, pc}

20001652 <clearRectangle>:

void clearRectangle( int x, int y, int width, int height ){
20001652:	b580      	push	{r7, lr}
20001654:	b086      	sub	sp, #24
20001656:	af00      	add	r7, sp, #0
20001658:	60f8      	str	r0, [r7, #12]
2000165a:	60b9      	str	r1, [r7, #8]
2000165c:	607a      	str	r2, [r7, #4]
2000165e:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
20001660:	68fb      	ldr	r3, [r7, #12]
20001662:	617b      	str	r3, [r7, #20]
20001664:	e014      	b.n	20001690 <clearRectangle+0x3e>
		for (j = y; j < y + height; j++) {
20001666:	68bb      	ldr	r3, [r7, #8]
20001668:	613b      	str	r3, [r7, #16]
2000166a:	e008      	b.n	2000167e <clearRectangle+0x2c>
			pixel(i, j, 0, 3);
2000166c:	6939      	ldr	r1, [r7, #16]
2000166e:	6978      	ldr	r0, [r7, #20]
20001670:	2303      	movs	r3, #3
20001672:	2200      	movs	r2, #0
20001674:	f7ff fd3c 	bl	200010f0 <pixel>
		for (j = y; j < y + height; j++) {
20001678:	693b      	ldr	r3, [r7, #16]
2000167a:	3301      	adds	r3, #1
2000167c:	613b      	str	r3, [r7, #16]
2000167e:	68ba      	ldr	r2, [r7, #8]
20001680:	683b      	ldr	r3, [r7, #0]
20001682:	18d2      	adds	r2, r2, r3
20001684:	693b      	ldr	r3, [r7, #16]
20001686:	429a      	cmp	r2, r3
20001688:	dcf0      	bgt.n	2000166c <clearRectangle+0x1a>
	for (i = x; i < x + width; i++) {
2000168a:	697b      	ldr	r3, [r7, #20]
2000168c:	3301      	adds	r3, #1
2000168e:	617b      	str	r3, [r7, #20]
20001690:	68fa      	ldr	r2, [r7, #12]
20001692:	687b      	ldr	r3, [r7, #4]
20001694:	18d2      	adds	r2, r2, r3
20001696:	697b      	ldr	r3, [r7, #20]
20001698:	429a      	cmp	r2, r3
2000169a:	dce4      	bgt.n	20001666 <clearRectangle+0x14>
		}
	}
}
2000169c:	46c0      	nop			; (mov r8, r8)
2000169e:	46bd      	mov	sp, r7
200016a0:	b006      	add	sp, #24
200016a2:	bd80      	pop	{r7, pc}

200016a4 <grayScaleTest>:


void grayScaleTest( void ) {
200016a4:	b590      	push	{r4, r7, lr}
200016a6:	b087      	sub	sp, #28
200016a8:	af00      	add	r7, sp, #0
	int x = 10;
200016aa:	230a      	movs	r3, #10
200016ac:	617b      	str	r3, [r7, #20]
	int y = 10;
200016ae:	230a      	movs	r3, #10
200016b0:	613b      	str	r3, [r7, #16]
	int width = 70;
200016b2:	2346      	movs	r3, #70	; 0x46
200016b4:	60fb      	str	r3, [r7, #12]
	int height = 50;
200016b6:	2332      	movs	r3, #50	; 0x32
200016b8:	60bb      	str	r3, [r7, #8]
	
	int x2 = 50;
200016ba:	2332      	movs	r3, #50	; 0x32
200016bc:	607b      	str	r3, [r7, #4]
	
	fillRectangle(x, y, width, height);
200016be:	68bb      	ldr	r3, [r7, #8]
200016c0:	68fa      	ldr	r2, [r7, #12]
200016c2:	6939      	ldr	r1, [r7, #16]
200016c4:	6978      	ldr	r0, [r7, #20]
200016c6:	f7ff ff9b 	bl	20001600 <fillRectangle>
	
	int i;
	int k = 5;
200016ca:	2305      	movs	r3, #5
200016cc:	603b      	str	r3, [r7, #0]
	while(1) {
		clear_backBuffer();
200016ce:	f7ff fadf 	bl	20000c90 <clear_backBuffer>
		fillRectangle(x, y, width, height);
200016d2:	68bb      	ldr	r3, [r7, #8]
200016d4:	68fa      	ldr	r2, [r7, #12]
200016d6:	6939      	ldr	r1, [r7, #16]
200016d8:	6978      	ldr	r0, [r7, #20]
200016da:	f7ff ff91 	bl	20001600 <fillRectangle>
		clearRectangle(x+2+2, y+1, width-k, height-k); //outer square
200016de:	697b      	ldr	r3, [r7, #20]
200016e0:	1d18      	adds	r0, r3, #4
200016e2:	693b      	ldr	r3, [r7, #16]
200016e4:	1c59      	adds	r1, r3, #1
200016e6:	68fa      	ldr	r2, [r7, #12]
200016e8:	683b      	ldr	r3, [r7, #0]
200016ea:	1ad4      	subs	r4, r2, r3
200016ec:	68ba      	ldr	r2, [r7, #8]
200016ee:	683b      	ldr	r3, [r7, #0]
200016f0:	1ad3      	subs	r3, r2, r3
200016f2:	0022      	movs	r2, r4
200016f4:	f7ff ffad 	bl	20001652 <clearRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
200016f8:	697b      	ldr	r3, [r7, #20]
200016fa:	1c9a      	adds	r2, r3, #2
200016fc:	683b      	ldr	r3, [r7, #0]
200016fe:	18d0      	adds	r0, r2, r3
20001700:	693b      	ldr	r3, [r7, #16]
20001702:	1c99      	adds	r1, r3, #2
20001704:	68fb      	ldr	r3, [r7, #12]
20001706:	1f1a      	subs	r2, r3, #4
20001708:	683b      	ldr	r3, [r7, #0]
2000170a:	1ad4      	subs	r4, r2, r3
2000170c:	68bb      	ldr	r3, [r7, #8]
2000170e:	1f1a      	subs	r2, r3, #4
20001710:	683b      	ldr	r3, [r7, #0]
20001712:	1ad3      	subs	r3, r2, r3
20001714:	0022      	movs	r2, r4
20001716:	f7ff ff9c 	bl	20001652 <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
2000171a:	4b2d      	ldr	r3, [pc, #180]	; (200017d0 <grayScaleTest+0x12c>)
2000171c:	0018      	movs	r0, r3
2000171e:	f7ff fe77 	bl	20001410 <graphic_draw_screen>
		clear_backBuffer();
20001722:	f7ff fab5 	bl	20000c90 <clear_backBuffer>
		fillRectangle(x, y, width, height);
20001726:	68bb      	ldr	r3, [r7, #8]
20001728:	68fa      	ldr	r2, [r7, #12]
2000172a:	6939      	ldr	r1, [r7, #16]
2000172c:	6978      	ldr	r0, [r7, #20]
2000172e:	f7ff ff67 	bl	20001600 <fillRectangle>
		
		fillRectangle(x+2+2, y+1, width-k, height-k); //outer white square
20001732:	697b      	ldr	r3, [r7, #20]
20001734:	1d18      	adds	r0, r3, #4
20001736:	693b      	ldr	r3, [r7, #16]
20001738:	1c59      	adds	r1, r3, #1
2000173a:	68fa      	ldr	r2, [r7, #12]
2000173c:	683b      	ldr	r3, [r7, #0]
2000173e:	1ad4      	subs	r4, r2, r3
20001740:	68ba      	ldr	r2, [r7, #8]
20001742:	683b      	ldr	r3, [r7, #0]
20001744:	1ad3      	subs	r3, r2, r3
20001746:	0022      	movs	r2, r4
20001748:	f7ff ff5a 	bl	20001600 <fillRectangle>
		fillRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
2000174c:	697b      	ldr	r3, [r7, #20]
2000174e:	1c9a      	adds	r2, r3, #2
20001750:	683b      	ldr	r3, [r7, #0]
20001752:	18d0      	adds	r0, r2, r3
20001754:	693b      	ldr	r3, [r7, #16]
20001756:	1c99      	adds	r1, r3, #2
20001758:	68fb      	ldr	r3, [r7, #12]
2000175a:	1f1a      	subs	r2, r3, #4
2000175c:	683b      	ldr	r3, [r7, #0]
2000175e:	1ad4      	subs	r4, r2, r3
20001760:	68bb      	ldr	r3, [r7, #8]
20001762:	1f1a      	subs	r2, r3, #4
20001764:	683b      	ldr	r3, [r7, #0]
20001766:	1ad3      	subs	r3, r2, r3
20001768:	0022      	movs	r2, r4
2000176a:	f7ff ff49 	bl	20001600 <fillRectangle>
		clearRectangle(x+12, y+5, 5, 5);
2000176e:	697b      	ldr	r3, [r7, #20]
20001770:	330c      	adds	r3, #12
20001772:	0018      	movs	r0, r3
20001774:	693b      	ldr	r3, [r7, #16]
20001776:	1d59      	adds	r1, r3, #5
20001778:	2305      	movs	r3, #5
2000177a:	2205      	movs	r2, #5
2000177c:	f7ff ff69 	bl	20001652 <clearRectangle>
		
		graphic_draw_screen(draw_buffer_black);
20001780:	4b13      	ldr	r3, [pc, #76]	; (200017d0 <grayScaleTest+0x12c>)
20001782:	0018      	movs	r0, r3
20001784:	f7ff fe44 	bl	20001410 <graphic_draw_screen>
		delay_milli(20);
20001788:	2014      	movs	r0, #20
2000178a:	f7ff fa55 	bl	20000c38 <delay_milli>
		
		clear_backBuffer();
2000178e:	f7ff fa7f 	bl	20000c90 <clear_backBuffer>
		fillRectangle(x, y, width, height);
20001792:	68bb      	ldr	r3, [r7, #8]
20001794:	68fa      	ldr	r2, [r7, #12]
20001796:	6939      	ldr	r1, [r7, #16]
20001798:	6978      	ldr	r0, [r7, #20]
2000179a:	f7ff ff31 	bl	20001600 <fillRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
2000179e:	697b      	ldr	r3, [r7, #20]
200017a0:	1c9a      	adds	r2, r3, #2
200017a2:	683b      	ldr	r3, [r7, #0]
200017a4:	18d0      	adds	r0, r2, r3
200017a6:	693b      	ldr	r3, [r7, #16]
200017a8:	1c99      	adds	r1, r3, #2
200017aa:	68fb      	ldr	r3, [r7, #12]
200017ac:	1f1a      	subs	r2, r3, #4
200017ae:	683b      	ldr	r3, [r7, #0]
200017b0:	1ad4      	subs	r4, r2, r3
200017b2:	68bb      	ldr	r3, [r7, #8]
200017b4:	1f1a      	subs	r2, r3, #4
200017b6:	683b      	ldr	r3, [r7, #0]
200017b8:	1ad3      	subs	r3, r2, r3
200017ba:	0022      	movs	r2, r4
200017bc:	f7ff ff49 	bl	20001652 <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
200017c0:	4b03      	ldr	r3, [pc, #12]	; (200017d0 <grayScaleTest+0x12c>)
200017c2:	0018      	movs	r0, r3
200017c4:	f7ff fe24 	bl	20001410 <graphic_draw_screen>
		
		delay_milli(20);
200017c8:	2014      	movs	r0, #20
200017ca:	f7ff fa35 	bl	20000c38 <delay_milli>
		clear_backBuffer();
200017ce:	e77e      	b.n	200016ce <grayScaleTest+0x2a>
200017d0:	20003594 	mulcs	r0, r4, r5

200017d4 <set_up_draw_buffers>:
	}
}

/** Should prepare the different drawing buffers, before the drawing of each frame.*/
void set_up_draw_buffers( void ) {
200017d4:	b580      	push	{r7, lr}
200017d6:	b082      	sub	sp, #8
200017d8:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 1024; i++) {
200017da:	2300      	movs	r3, #0
200017dc:	607b      	str	r3, [r7, #4]
200017de:	e065      	b.n	200018ac <set_up_draw_buffers+0xd8>
		draw_buffer_black[i] = backBuffer[i] & (~backBufferGray[i] & ~backBufferLight[i]); //Had to work a bit on these
200017e0:	4a36      	ldr	r2, [pc, #216]	; (200018bc <set_up_draw_buffers+0xe8>)
200017e2:	687b      	ldr	r3, [r7, #4]
200017e4:	18d3      	adds	r3, r2, r3
200017e6:	781b      	ldrb	r3, [r3, #0]
200017e8:	b25b      	sxtb	r3, r3
200017ea:	4935      	ldr	r1, [pc, #212]	; (200018c0 <set_up_draw_buffers+0xec>)
200017ec:	687a      	ldr	r2, [r7, #4]
200017ee:	188a      	adds	r2, r1, r2
200017f0:	7811      	ldrb	r1, [r2, #0]
200017f2:	4834      	ldr	r0, [pc, #208]	; (200018c4 <set_up_draw_buffers+0xf0>)
200017f4:	687a      	ldr	r2, [r7, #4]
200017f6:	1882      	adds	r2, r0, r2
200017f8:	7812      	ldrb	r2, [r2, #0]
200017fa:	430a      	orrs	r2, r1
200017fc:	b2d2      	uxtb	r2, r2
200017fe:	b252      	sxtb	r2, r2
20001800:	43d2      	mvns	r2, r2
20001802:	b252      	sxtb	r2, r2
20001804:	4013      	ands	r3, r2
20001806:	b25b      	sxtb	r3, r3
20001808:	b2d9      	uxtb	r1, r3
2000180a:	4a2f      	ldr	r2, [pc, #188]	; (200018c8 <set_up_draw_buffers+0xf4>)
2000180c:	687b      	ldr	r3, [r7, #4]
2000180e:	18d3      	adds	r3, r2, r3
20001810:	1c0a      	adds	r2, r1, #0
20001812:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray[i] = (backBuffer[i] | backBufferGray[i]) & ~backBufferLight[i]; //in order to make it possible
20001814:	4a29      	ldr	r2, [pc, #164]	; (200018bc <set_up_draw_buffers+0xe8>)
20001816:	687b      	ldr	r3, [r7, #4]
20001818:	18d3      	adds	r3, r2, r3
2000181a:	781a      	ldrb	r2, [r3, #0]
2000181c:	4928      	ldr	r1, [pc, #160]	; (200018c0 <set_up_draw_buffers+0xec>)
2000181e:	687b      	ldr	r3, [r7, #4]
20001820:	18cb      	adds	r3, r1, r3
20001822:	781b      	ldrb	r3, [r3, #0]
20001824:	4313      	orrs	r3, r2
20001826:	b2db      	uxtb	r3, r3
20001828:	b25b      	sxtb	r3, r3
2000182a:	4926      	ldr	r1, [pc, #152]	; (200018c4 <set_up_draw_buffers+0xf0>)
2000182c:	687a      	ldr	r2, [r7, #4]
2000182e:	188a      	adds	r2, r1, r2
20001830:	7812      	ldrb	r2, [r2, #0]
20001832:	b252      	sxtb	r2, r2
20001834:	43d2      	mvns	r2, r2
20001836:	b252      	sxtb	r2, r2
20001838:	4013      	ands	r3, r2
2000183a:	b25b      	sxtb	r3, r3
2000183c:	b2d9      	uxtb	r1, r3
2000183e:	4a23      	ldr	r2, [pc, #140]	; (200018cc <set_up_draw_buffers+0xf8>)
20001840:	687b      	ldr	r3, [r7, #4]
20001842:	18d3      	adds	r3, r2, r3
20001844:	1c0a      	adds	r2, r1, #0
20001846:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_light[i] = (backBuffer[i] | backBufferLight[i]) & ~backBufferGray[i]; //to show a lighter sprite
20001848:	4a1c      	ldr	r2, [pc, #112]	; (200018bc <set_up_draw_buffers+0xe8>)
2000184a:	687b      	ldr	r3, [r7, #4]
2000184c:	18d3      	adds	r3, r2, r3
2000184e:	781a      	ldrb	r2, [r3, #0]
20001850:	491c      	ldr	r1, [pc, #112]	; (200018c4 <set_up_draw_buffers+0xf0>)
20001852:	687b      	ldr	r3, [r7, #4]
20001854:	18cb      	adds	r3, r1, r3
20001856:	781b      	ldrb	r3, [r3, #0]
20001858:	4313      	orrs	r3, r2
2000185a:	b2db      	uxtb	r3, r3
2000185c:	b25b      	sxtb	r3, r3
2000185e:	4918      	ldr	r1, [pc, #96]	; (200018c0 <set_up_draw_buffers+0xec>)
20001860:	687a      	ldr	r2, [r7, #4]
20001862:	188a      	adds	r2, r1, r2
20001864:	7812      	ldrb	r2, [r2, #0]
20001866:	b252      	sxtb	r2, r2
20001868:	43d2      	mvns	r2, r2
2000186a:	b252      	sxtb	r2, r2
2000186c:	4013      	ands	r3, r2
2000186e:	b25b      	sxtb	r3, r3
20001870:	b2d9      	uxtb	r1, r3
20001872:	4a17      	ldr	r2, [pc, #92]	; (200018d0 <set_up_draw_buffers+0xfc>)
20001874:	687b      	ldr	r3, [r7, #4]
20001876:	18d3      	adds	r3, r2, r3
20001878:	1c0a      	adds	r2, r1, #0
2000187a:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray_light[i] = backBuffer[i] | backBufferGray[i] | backBufferLight[i]; //on top of a darker one.
2000187c:	4a0f      	ldr	r2, [pc, #60]	; (200018bc <set_up_draw_buffers+0xe8>)
2000187e:	687b      	ldr	r3, [r7, #4]
20001880:	18d3      	adds	r3, r2, r3
20001882:	781a      	ldrb	r2, [r3, #0]
20001884:	490e      	ldr	r1, [pc, #56]	; (200018c0 <set_up_draw_buffers+0xec>)
20001886:	687b      	ldr	r3, [r7, #4]
20001888:	18cb      	adds	r3, r1, r3
2000188a:	781b      	ldrb	r3, [r3, #0]
2000188c:	4313      	orrs	r3, r2
2000188e:	b2da      	uxtb	r2, r3
20001890:	490c      	ldr	r1, [pc, #48]	; (200018c4 <set_up_draw_buffers+0xf0>)
20001892:	687b      	ldr	r3, [r7, #4]
20001894:	18cb      	adds	r3, r1, r3
20001896:	781b      	ldrb	r3, [r3, #0]
20001898:	4313      	orrs	r3, r2
2000189a:	b2d9      	uxtb	r1, r3
2000189c:	4a0d      	ldr	r2, [pc, #52]	; (200018d4 <set_up_draw_buffers+0x100>)
2000189e:	687b      	ldr	r3, [r7, #4]
200018a0:	18d3      	adds	r3, r2, r3
200018a2:	1c0a      	adds	r2, r1, #0
200018a4:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 1024; i++) {
200018a6:	687b      	ldr	r3, [r7, #4]
200018a8:	3301      	adds	r3, #1
200018aa:	607b      	str	r3, [r7, #4]
200018ac:	687b      	ldr	r3, [r7, #4]
200018ae:	4a0a      	ldr	r2, [pc, #40]	; (200018d8 <set_up_draw_buffers+0x104>)
200018b0:	4293      	cmp	r3, r2
200018b2:	dd95      	ble.n	200017e0 <set_up_draw_buffers+0xc>
	}
}
200018b4:	46c0      	nop			; (mov r8, r8)
200018b6:	46bd      	mov	sp, r7
200018b8:	b002      	add	sp, #8
200018ba:	bd80      	pop	{r7, pc}
200018bc:	20002d94 	mulcs	r0, r4, sp
200018c0:	20002594 	mulcs	r0, r4, r5
200018c4:	20003d94 	mulcs	r0, r4, sp
200018c8:	20003594 	mulcs	r0, r4, r5
200018cc:	20002994 	mulcs	r0, r4, r9
200018d0:	20003194 	mulcs	r0, r4, r1
200018d4:	20003994 	mulcs	r0, r4, r9
200018d8:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

200018dc <draw_game_object>:

void draw_game_object(GameObject *gObj) {
200018dc:	b580      	push	{r7, lr}
200018de:	b086      	sub	sp, #24
200018e0:	af02      	add	r7, sp, #8
200018e2:	6078      	str	r0, [r7, #4]
	int frame = gObj->current_frame;
200018e4:	687b      	ldr	r3, [r7, #4]
200018e6:	695b      	ldr	r3, [r3, #20]
200018e8:	60fb      	str	r3, [r7, #12]
	draw_sprite(gObj->images[frame].blackImage, gObj->xPos, gObj->yPos, 1, 3);
200018ea:	687b      	ldr	r3, [r7, #4]
200018ec:	6819      	ldr	r1, [r3, #0]
200018ee:	68fa      	ldr	r2, [r7, #12]
200018f0:	0013      	movs	r3, r2
200018f2:	005b      	lsls	r3, r3, #1
200018f4:	189b      	adds	r3, r3, r2
200018f6:	009b      	lsls	r3, r3, #2
200018f8:	18cb      	adds	r3, r1, r3
200018fa:	6818      	ldr	r0, [r3, #0]
200018fc:	687b      	ldr	r3, [r7, #4]
200018fe:	6859      	ldr	r1, [r3, #4]
20001900:	687b      	ldr	r3, [r7, #4]
20001902:	689a      	ldr	r2, [r3, #8]
20001904:	2303      	movs	r3, #3
20001906:	9300      	str	r3, [sp, #0]
20001908:	2301      	movs	r3, #1
2000190a:	f7ff fdec 	bl	200014e6 <draw_sprite>
	draw_sprite(gObj->images[frame].grayImage, gObj->xPos, gObj->yPos, 1, 2);
2000190e:	687b      	ldr	r3, [r7, #4]
20001910:	6819      	ldr	r1, [r3, #0]
20001912:	68fa      	ldr	r2, [r7, #12]
20001914:	0013      	movs	r3, r2
20001916:	005b      	lsls	r3, r3, #1
20001918:	189b      	adds	r3, r3, r2
2000191a:	009b      	lsls	r3, r3, #2
2000191c:	18cb      	adds	r3, r1, r3
2000191e:	6858      	ldr	r0, [r3, #4]
20001920:	687b      	ldr	r3, [r7, #4]
20001922:	6859      	ldr	r1, [r3, #4]
20001924:	687b      	ldr	r3, [r7, #4]
20001926:	689a      	ldr	r2, [r3, #8]
20001928:	2302      	movs	r3, #2
2000192a:	9300      	str	r3, [sp, #0]
2000192c:	2301      	movs	r3, #1
2000192e:	f7ff fdda 	bl	200014e6 <draw_sprite>
	draw_sprite(gObj->images[frame].lightImage, gObj->xPos, gObj->yPos, 1, 1);
20001932:	687b      	ldr	r3, [r7, #4]
20001934:	6819      	ldr	r1, [r3, #0]
20001936:	68fa      	ldr	r2, [r7, #12]
20001938:	0013      	movs	r3, r2
2000193a:	005b      	lsls	r3, r3, #1
2000193c:	189b      	adds	r3, r3, r2
2000193e:	009b      	lsls	r3, r3, #2
20001940:	18cb      	adds	r3, r1, r3
20001942:	6898      	ldr	r0, [r3, #8]
20001944:	687b      	ldr	r3, [r7, #4]
20001946:	6859      	ldr	r1, [r3, #4]
20001948:	687b      	ldr	r3, [r7, #4]
2000194a:	689a      	ldr	r2, [r3, #8]
2000194c:	2301      	movs	r3, #1
2000194e:	9300      	str	r3, [sp, #0]
20001950:	2301      	movs	r3, #1
20001952:	f7ff fdc8 	bl	200014e6 <draw_sprite>
}
20001956:	46c0      	nop			; (mov r8, r8)
20001958:	46bd      	mov	sp, r7
2000195a:	b004      	add	sp, #16
2000195c:	bd80      	pop	{r7, pc}

2000195e <show_frame>:


void show_frame(int frame_length) {
2000195e:	b580      	push	{r7, lr}
20001960:	b082      	sub	sp, #8
20001962:	af00      	add	r7, sp, #0
20001964:	6078      	str	r0, [r7, #4]
	set_up_draw_buffers();
20001966:	f7ff ff35 	bl	200017d4 <set_up_draw_buffers>
	
	while(frame_length--) {
2000196a:	e01b      	b.n	200019a4 <show_frame+0x46>
		graphic_draw_screen(draw_buffer_black_gray_light);
2000196c:	4b13      	ldr	r3, [pc, #76]	; (200019bc <show_frame+0x5e>)
2000196e:	0018      	movs	r0, r3
20001970:	f7ff fd4e 	bl	20001410 <graphic_draw_screen>
		delay_milli(1);
20001974:	2001      	movs	r0, #1
20001976:	f7ff f95f 	bl	20000c38 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
2000197a:	4b11      	ldr	r3, [pc, #68]	; (200019c0 <show_frame+0x62>)
2000197c:	0018      	movs	r0, r3
2000197e:	f7ff fd47 	bl	20001410 <graphic_draw_screen>
		delay_milli(1);
20001982:	2001      	movs	r0, #1
20001984:	f7ff f958 	bl	20000c38 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black_gray);
20001988:	4b0e      	ldr	r3, [pc, #56]	; (200019c4 <show_frame+0x66>)
2000198a:	0018      	movs	r0, r3
2000198c:	f7ff fd40 	bl	20001410 <graphic_draw_screen>
		delay_milli(1);
20001990:	2001      	movs	r0, #1
20001992:	f7ff f951 	bl	20000c38 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
20001996:	4b0a      	ldr	r3, [pc, #40]	; (200019c0 <show_frame+0x62>)
20001998:	0018      	movs	r0, r3
2000199a:	f7ff fd39 	bl	20001410 <graphic_draw_screen>
		delay_milli(1);
2000199e:	2001      	movs	r0, #1
200019a0:	f7ff f94a 	bl	20000c38 <delay_milli>
	while(frame_length--) {
200019a4:	687b      	ldr	r3, [r7, #4]
200019a6:	1e5a      	subs	r2, r3, #1
200019a8:	607a      	str	r2, [r7, #4]
200019aa:	2b00      	cmp	r3, #0
200019ac:	d1de      	bne.n	2000196c <show_frame+0xe>
	}
	
	clear_all_backBuffers();	//Maybe we could be more effective by only clearing the necessary stuff,
200019ae:	f7ff f97b 	bl	20000ca8 <clear_all_backBuffers>
								//but let's keep it like this if it works.
200019b2:	46c0      	nop			; (mov r8, r8)
200019b4:	46bd      	mov	sp, r7
200019b6:	b002      	add	sp, #8
200019b8:	bd80      	pop	{r7, pc}
200019ba:	46c0      	nop			; (mov r8, r8)
200019bc:	20003994 	mulcs	r0, r4, r9
200019c0:	20003594 	mulcs	r0, r4, r5
200019c4:	20002994 	mulcs	r0, r4, r9

200019c8 <load_image>:
#include "image.h"

void load_image( Image *image, sprite *blackImage, sprite *grayImage, sprite *lightImage ) {
200019c8:	b580      	push	{r7, lr}
200019ca:	b084      	sub	sp, #16
200019cc:	af00      	add	r7, sp, #0
200019ce:	60f8      	str	r0, [r7, #12]
200019d0:	60b9      	str	r1, [r7, #8]
200019d2:	607a      	str	r2, [r7, #4]
200019d4:	603b      	str	r3, [r7, #0]
	image->blackImage = blackImage;
200019d6:	68fb      	ldr	r3, [r7, #12]
200019d8:	68ba      	ldr	r2, [r7, #8]
200019da:	601a      	str	r2, [r3, #0]
	image->grayImage = grayImage;
200019dc:	68fb      	ldr	r3, [r7, #12]
200019de:	687a      	ldr	r2, [r7, #4]
200019e0:	605a      	str	r2, [r3, #4]
	image->lightImage = lightImage;
200019e2:	68fb      	ldr	r3, [r7, #12]
200019e4:	683a      	ldr	r2, [r7, #0]
200019e6:	609a      	str	r2, [r3, #8]
}
200019e8:	46c0      	nop			; (mov r8, r8)
200019ea:	46bd      	mov	sp, r7
200019ec:	b004      	add	sp, #16
200019ee:	bd80      	pop	{r7, pc}

200019f0 <load_sprite>:
#include "sprite.h"

void load_sprite(sprite* s, unsigned char* data, int width, int height)
{
200019f0:	b580      	push	{r7, lr}
200019f2:	b084      	sub	sp, #16
200019f4:	af00      	add	r7, sp, #0
200019f6:	60f8      	str	r0, [r7, #12]
200019f8:	60b9      	str	r1, [r7, #8]
200019fa:	607a      	str	r2, [r7, #4]
200019fc:	603b      	str	r3, [r7, #0]
	s->width = width;
200019fe:	687a      	ldr	r2, [r7, #4]
20001a00:	68fb      	ldr	r3, [r7, #12]
20001a02:	601a      	str	r2, [r3, #0]
	s->height = height;
20001a04:	683a      	ldr	r2, [r7, #0]
20001a06:	68fb      	ldr	r3, [r7, #12]
20001a08:	605a      	str	r2, [r3, #4]
	s->data = data;
20001a0a:	68fb      	ldr	r3, [r7, #12]
20001a0c:	68ba      	ldr	r2, [r7, #8]
20001a0e:	609a      	str	r2, [r3, #8]
}
20001a10:	46c0      	nop			; (mov r8, r8)
20001a12:	46bd      	mov	sp, r7
20001a14:	b004      	add	sp, #16
20001a16:	bd80      	pop	{r7, pc}

20001a18 <set_up_DIL>:
#include "gpio.h"

/** Sets up PE0-7 as inports and PE8-15 as outports. */
void set_up_DIL( void ) {
20001a18:	b580      	push	{r7, lr}
20001a1a:	af00      	add	r7, sp, #0
	GPIO_D.Moder = 0x55550000;
20001a1c:	4b02      	ldr	r3, [pc, #8]	; (20001a28 <set_up_DIL+0x10>)
20001a1e:	4a03      	ldr	r2, [pc, #12]	; (20001a2c <set_up_DIL+0x14>)
20001a20:	601a      	str	r2, [r3, #0]
}
20001a22:	46c0      	nop			; (mov r8, r8)
20001a24:	46bd      	mov	sp, r7
20001a26:	bd80      	pop	{r7, pc}
20001a28:	40020c00 	andmi	r0, r2, r0, lsl #24
20001a2c:	55550000 	ldrbpl	r0, [r5, #-0]

20001a30 <read_DIL>:

char read_DIL( void ) {
20001a30:	b580      	push	{r7, lr}
20001a32:	af00      	add	r7, sp, #0
	return GPIO_D.idrLow;
20001a34:	4b02      	ldr	r3, [pc, #8]	; (20001a40 <read_DIL+0x10>)
20001a36:	7c1b      	ldrb	r3, [r3, #16]
20001a38:	b2db      	uxtb	r3, r3
}
20001a3a:	0018      	movs	r0, r3
20001a3c:	46bd      	mov	sp, r7
20001a3e:	bd80      	pop	{r7, pc}
20001a40:	40020c00 	andmi	r0, r2, r0, lsl #24

20001a44 <read_DIL_single>:


int read_DIL_single( int bit ) {
20001a44:	b590      	push	{r4, r7, lr}
20001a46:	b085      	sub	sp, #20
20001a48:	af00      	add	r7, sp, #0
20001a4a:	6078      	str	r0, [r7, #4]
	char DIL = read_DIL();
20001a4c:	230f      	movs	r3, #15
20001a4e:	18fc      	adds	r4, r7, r3
20001a50:	f7ff ffee 	bl	20001a30 <read_DIL>
20001a54:	0003      	movs	r3, r0
20001a56:	7023      	strb	r3, [r4, #0]
	if (DIL & (1<<bit)) {
20001a58:	230f      	movs	r3, #15
20001a5a:	18fb      	adds	r3, r7, r3
20001a5c:	781a      	ldrb	r2, [r3, #0]
20001a5e:	687b      	ldr	r3, [r7, #4]
20001a60:	411a      	asrs	r2, r3
20001a62:	0013      	movs	r3, r2
20001a64:	2201      	movs	r2, #1
20001a66:	4013      	ands	r3, r2
20001a68:	d001      	beq.n	20001a6e <read_DIL_single+0x2a>
		return 0;
20001a6a:	2300      	movs	r3, #0
20001a6c:	e000      	b.n	20001a70 <read_DIL_single+0x2c>
	} else {
		return 1;
20001a6e:	2301      	movs	r3, #1
	}
20001a70:	0018      	movs	r0, r3
20001a72:	46bd      	mov	sp, r7
20001a74:	b005      	add	sp, #20
20001a76:	bd90      	pop	{r4, r7, pc}

20001a78 <ascii_ctrl_bit_set>:
void ascii_write_data(unsigned char data);
unsigned char ascii_read_status(void);
unsigned char ascii_read_data(void);


void ascii_ctrl_bit_set(unsigned char x){
20001a78:	b580      	push	{r7, lr}
20001a7a:	b084      	sub	sp, #16
20001a7c:	af00      	add	r7, sp, #0
20001a7e:	0002      	movs	r2, r0
20001a80:	1dfb      	adds	r3, r7, #7
20001a82:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och ettstÃƒÂ¤ll de bitar som ÃƒÂ¤r 1 i x
	unsigned char c;
	c = *portOdrLow;
20001a84:	4a0c      	ldr	r2, [pc, #48]	; (20001ab8 <ascii_ctrl_bit_set+0x40>)
20001a86:	230f      	movs	r3, #15
20001a88:	18fb      	adds	r3, r7, r3
20001a8a:	7812      	ldrb	r2, [r2, #0]
20001a8c:	701a      	strb	r2, [r3, #0]
	c |= (B_SELECT | x);
20001a8e:	1dfa      	adds	r2, r7, #7
20001a90:	230f      	movs	r3, #15
20001a92:	18fb      	adds	r3, r7, r3
20001a94:	7812      	ldrb	r2, [r2, #0]
20001a96:	781b      	ldrb	r3, [r3, #0]
20001a98:	4313      	orrs	r3, r2
20001a9a:	b2da      	uxtb	r2, r3
20001a9c:	230f      	movs	r3, #15
20001a9e:	18fb      	adds	r3, r7, r3
20001aa0:	2104      	movs	r1, #4
20001aa2:	430a      	orrs	r2, r1
20001aa4:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20001aa6:	4a04      	ldr	r2, [pc, #16]	; (20001ab8 <ascii_ctrl_bit_set+0x40>)
20001aa8:	230f      	movs	r3, #15
20001aaa:	18fb      	adds	r3, r7, r3
20001aac:	781b      	ldrb	r3, [r3, #0]
20001aae:	7013      	strb	r3, [r2, #0]
}
20001ab0:	46c0      	nop			; (mov r8, r8)
20001ab2:	46bd      	mov	sp, r7
20001ab4:	b004      	add	sp, #16
20001ab6:	bd80      	pop	{r7, pc}
20001ab8:	40021014 	andmi	r1, r2, r4, lsl r0

20001abc <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
20001abc:	b580      	push	{r7, lr}
20001abe:	b084      	sub	sp, #16
20001ac0:	af00      	add	r7, sp, #0
20001ac2:	0002      	movs	r2, r0
20001ac4:	1dfb      	adds	r3, r7, #7
20001ac6:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och nollstÃ¤ll de bitar som Ã¤r 1 i x
	unsigned char c;
	c = *portOdrLow;
20001ac8:	4a0f      	ldr	r2, [pc, #60]	; (20001b08 <ascii_ctrl_bit_clear+0x4c>)
20001aca:	230f      	movs	r3, #15
20001acc:	18fb      	adds	r3, r7, r3
20001ace:	7812      	ldrb	r2, [r2, #0]
20001ad0:	701a      	strb	r2, [r3, #0]
	c = (B_SELECT | c & ~x);
20001ad2:	1dfb      	adds	r3, r7, #7
20001ad4:	781b      	ldrb	r3, [r3, #0]
20001ad6:	b25b      	sxtb	r3, r3
20001ad8:	43db      	mvns	r3, r3
20001ada:	b25b      	sxtb	r3, r3
20001adc:	220f      	movs	r2, #15
20001ade:	18ba      	adds	r2, r7, r2
20001ae0:	7812      	ldrb	r2, [r2, #0]
20001ae2:	b252      	sxtb	r2, r2
20001ae4:	4013      	ands	r3, r2
20001ae6:	b25b      	sxtb	r3, r3
20001ae8:	2204      	movs	r2, #4
20001aea:	4313      	orrs	r3, r2
20001aec:	b25a      	sxtb	r2, r3
20001aee:	230f      	movs	r3, #15
20001af0:	18fb      	adds	r3, r7, r3
20001af2:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20001af4:	4a04      	ldr	r2, [pc, #16]	; (20001b08 <ascii_ctrl_bit_clear+0x4c>)
20001af6:	230f      	movs	r3, #15
20001af8:	18fb      	adds	r3, r7, r3
20001afa:	781b      	ldrb	r3, [r3, #0]
20001afc:	7013      	strb	r3, [r2, #0]
}
20001afe:	46c0      	nop			; (mov r8, r8)
20001b00:	46bd      	mov	sp, r7
20001b02:	b004      	add	sp, #16
20001b04:	bd80      	pop	{r7, pc}
20001b06:	46c0      	nop			; (mov r8, r8)
20001b08:	40021014 	andmi	r1, r2, r4, lsl r0

20001b0c <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20001b0c:	b580      	push	{r7, lr}
20001b0e:	b082      	sub	sp, #8
20001b10:	af00      	add	r7, sp, #0
20001b12:	0002      	movs	r2, r0
20001b14:	1dfb      	adds	r3, r7, #7
20001b16:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20001b18:	2001      	movs	r0, #1
20001b1a:	f7ff ffcf 	bl	20001abc <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20001b1e:	2002      	movs	r0, #2
20001b20:	f7ff ffcc 	bl	20001abc <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20001b24:	1dfb      	adds	r3, r7, #7
20001b26:	781b      	ldrb	r3, [r3, #0]
20001b28:	0018      	movs	r0, r3
20001b2a:	f000 f86d 	bl	20001c08 <ascii_write_controller>
}
20001b2e:	46c0      	nop			; (mov r8, r8)
20001b30:	46bd      	mov	sp, r7
20001b32:	b002      	add	sp, #8
20001b34:	bd80      	pop	{r7, pc}

20001b36 <ascii_write_data>:

void ascii_write_data(unsigned char data){
20001b36:	b580      	push	{r7, lr}
20001b38:	b082      	sub	sp, #8
20001b3a:	af00      	add	r7, sp, #0
20001b3c:	0002      	movs	r2, r0
20001b3e:	1dfb      	adds	r3, r7, #7
20001b40:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20001b42:	2001      	movs	r0, #1
20001b44:	f7ff ff98 	bl	20001a78 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20001b48:	2002      	movs	r0, #2
20001b4a:	f7ff ffb7 	bl	20001abc <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20001b4e:	1dfb      	adds	r3, r7, #7
20001b50:	781b      	ldrb	r3, [r3, #0]
20001b52:	0018      	movs	r0, r3
20001b54:	f000 f858 	bl	20001c08 <ascii_write_controller>
}
20001b58:	46c0      	nop			; (mov r8, r8)
20001b5a:	46bd      	mov	sp, r7
20001b5c:	b002      	add	sp, #8
20001b5e:	bd80      	pop	{r7, pc}

20001b60 <ascii_read_status>:

unsigned char ascii_read_status(void){
20001b60:	b590      	push	{r4, r7, lr}
20001b62:	b083      	sub	sp, #12
20001b64:	af00      	add	r7, sp, #0
	//sÃƒÂ¤tt Port E bit15-8 som ingÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20001b66:	4b11      	ldr	r3, [pc, #68]	; (20001bac <ascii_read_status+0x4c>)
20001b68:	4a10      	ldr	r2, [pc, #64]	; (20001bac <ascii_read_status+0x4c>)
20001b6a:	6812      	ldr	r2, [r2, #0]
20001b6c:	0412      	lsls	r2, r2, #16
20001b6e:	0c12      	lsrs	r2, r2, #16
20001b70:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20001b72:	2001      	movs	r0, #1
20001b74:	f7ff ffa2 	bl	20001abc <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
20001b78:	2002      	movs	r0, #2
20001b7a:	f7ff ff7d 	bl	20001a78 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20001b7e:	1dfc      	adds	r4, r7, #7
20001b80:	f000 f85a 	bl	20001c38 <ascii_read_controller>
20001b84:	0003      	movs	r3, r0
20001b86:	7023      	strb	r3, [r4, #0]
	//sÃƒÂ¤tt Port E bit15-8 som utgÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20001b88:	4b08      	ldr	r3, [pc, #32]	; (20001bac <ascii_read_status+0x4c>)
20001b8a:	4a08      	ldr	r2, [pc, #32]	; (20001bac <ascii_read_status+0x4c>)
20001b8c:	6812      	ldr	r2, [r2, #0]
20001b8e:	0412      	lsls	r2, r2, #16
20001b90:	0c12      	lsrs	r2, r2, #16
20001b92:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
20001b94:	4b05      	ldr	r3, [pc, #20]	; (20001bac <ascii_read_status+0x4c>)
20001b96:	4a05      	ldr	r2, [pc, #20]	; (20001bac <ascii_read_status+0x4c>)
20001b98:	6812      	ldr	r2, [r2, #0]
20001b9a:	4905      	ldr	r1, [pc, #20]	; (20001bb0 <ascii_read_status+0x50>)
20001b9c:	430a      	orrs	r2, r1
20001b9e:	601a      	str	r2, [r3, #0]
	return rv;
20001ba0:	1dfb      	adds	r3, r7, #7
20001ba2:	781b      	ldrb	r3, [r3, #0]
}
20001ba4:	0018      	movs	r0, r3
20001ba6:	46bd      	mov	sp, r7
20001ba8:	b003      	add	sp, #12
20001baa:	bd90      	pop	{r4, r7, pc}
20001bac:	40021000 	andmi	r1, r2, r0
20001bb0:	55550000 	ldrbpl	r0, [r5, #-0]

20001bb4 <ascii_read_data>:

unsigned char ascii_read_data(void){
20001bb4:	b590      	push	{r4, r7, lr}
20001bb6:	b083      	sub	sp, #12
20001bb8:	af00      	add	r7, sp, #0
	//sÃƒÂ¤tt Port E bit15-8 som ingÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20001bba:	4b11      	ldr	r3, [pc, #68]	; (20001c00 <ascii_read_data+0x4c>)
20001bbc:	4a10      	ldr	r2, [pc, #64]	; (20001c00 <ascii_read_data+0x4c>)
20001bbe:	6812      	ldr	r2, [r2, #0]
20001bc0:	0412      	lsls	r2, r2, #16
20001bc2:	0c12      	lsrs	r2, r2, #16
20001bc4:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20001bc6:	2001      	movs	r0, #1
20001bc8:	f7ff ff56 	bl	20001a78 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20001bcc:	2002      	movs	r0, #2
20001bce:	f7ff ff53 	bl	20001a78 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20001bd2:	1dfc      	adds	r4, r7, #7
20001bd4:	f000 f830 	bl	20001c38 <ascii_read_controller>
20001bd8:	0003      	movs	r3, r0
20001bda:	7023      	strb	r3, [r4, #0]
	//sÃƒÂ¤tt Port E bit15-8 som utgÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20001bdc:	4b08      	ldr	r3, [pc, #32]	; (20001c00 <ascii_read_data+0x4c>)
20001bde:	4a08      	ldr	r2, [pc, #32]	; (20001c00 <ascii_read_data+0x4c>)
20001be0:	6812      	ldr	r2, [r2, #0]
20001be2:	0412      	lsls	r2, r2, #16
20001be4:	0c12      	lsrs	r2, r2, #16
20001be6:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
20001be8:	4b05      	ldr	r3, [pc, #20]	; (20001c00 <ascii_read_data+0x4c>)
20001bea:	4a05      	ldr	r2, [pc, #20]	; (20001c00 <ascii_read_data+0x4c>)
20001bec:	6812      	ldr	r2, [r2, #0]
20001bee:	4905      	ldr	r1, [pc, #20]	; (20001c04 <ascii_read_data+0x50>)
20001bf0:	430a      	orrs	r2, r1
20001bf2:	601a      	str	r2, [r3, #0]
	return rv;
20001bf4:	1dfb      	adds	r3, r7, #7
20001bf6:	781b      	ldrb	r3, [r3, #0]
}
20001bf8:	0018      	movs	r0, r3
20001bfa:	46bd      	mov	sp, r7
20001bfc:	b003      	add	sp, #12
20001bfe:	bd90      	pop	{r4, r7, pc}
20001c00:	40021000 	andmi	r1, r2, r0
20001c04:	55550000 	ldrbpl	r0, [r5, #-0]

20001c08 <ascii_write_controller>:

void ascii_write_controller(unsigned char c){
20001c08:	b580      	push	{r7, lr}
20001c0a:	b082      	sub	sp, #8
20001c0c:	af00      	add	r7, sp, #0
20001c0e:	0002      	movs	r2, r0
20001c10:	1dfb      	adds	r3, r7, #7
20001c12:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
20001c14:	2040      	movs	r0, #64	; 0x40
20001c16:	f7ff ff2f 	bl	20001a78 <ascii_ctrl_bit_set>
	*portOdrHigh = c;
20001c1a:	4a06      	ldr	r2, [pc, #24]	; (20001c34 <ascii_write_controller+0x2c>)
20001c1c:	1dfb      	adds	r3, r7, #7
20001c1e:	781b      	ldrb	r3, [r3, #0]
20001c20:	7013      	strb	r3, [r2, #0]
	delay_250ns();
20001c22:	f7fe ffaf 	bl	20000b84 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
20001c26:	2040      	movs	r0, #64	; 0x40
20001c28:	f7ff ff48 	bl	20001abc <ascii_ctrl_bit_clear>
}
20001c2c:	46c0      	nop			; (mov r8, r8)
20001c2e:	46bd      	mov	sp, r7
20001c30:	b002      	add	sp, #8
20001c32:	bd80      	pop	{r7, pc}
20001c34:	40021015 	andmi	r1, r2, r5, lsl r0

20001c38 <ascii_read_controller>:

unsigned char ascii_read_controller(void){
20001c38:	b580      	push	{r7, lr}
20001c3a:	b082      	sub	sp, #8
20001c3c:	af00      	add	r7, sp, #0
	unsigned char c;
	ascii_ctrl_bit_set(B_E);
20001c3e:	2040      	movs	r0, #64	; 0x40
20001c40:	f7ff ff1a 	bl	20001a78 <ascii_ctrl_bit_set>
	delay_250ns();
20001c44:	f7fe ff9e 	bl	20000b84 <delay_250ns>
	delay_250ns();
20001c48:	f7fe ff9c 	bl	20000b84 <delay_250ns>
	c = *portIdrHigh;
20001c4c:	4a06      	ldr	r2, [pc, #24]	; (20001c68 <ascii_read_controller+0x30>)
20001c4e:	1dfb      	adds	r3, r7, #7
20001c50:	7812      	ldrb	r2, [r2, #0]
20001c52:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20001c54:	2040      	movs	r0, #64	; 0x40
20001c56:	f7ff ff31 	bl	20001abc <ascii_ctrl_bit_clear>
	return c;
20001c5a:	1dfb      	adds	r3, r7, #7
20001c5c:	781b      	ldrb	r3, [r3, #0]
}
20001c5e:	0018      	movs	r0, r3
20001c60:	46bd      	mov	sp, r7
20001c62:	b002      	add	sp, #8
20001c64:	bd80      	pop	{r7, pc}
20001c66:	46c0      	nop			; (mov r8, r8)
20001c68:	40021011 	andmi	r1, r2, r1, lsl r0

20001c6c <ascii_write_char>:

void ascii_write_char(unsigned char c){
20001c6c:	b580      	push	{r7, lr}
20001c6e:	b082      	sub	sp, #8
20001c70:	af00      	add	r7, sp, #0
20001c72:	0002      	movs	r2, r0
20001c74:	1dfb      	adds	r3, r7, #7
20001c76:	701a      	strb	r2, [r3, #0]
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20001c78:	46c0      	nop			; (mov r8, r8)
20001c7a:	f7ff ff71 	bl	20001b60 <ascii_read_status>
20001c7e:	0003      	movs	r3, r0
20001c80:	001a      	movs	r2, r3
20001c82:	2380      	movs	r3, #128	; 0x80
20001c84:	4013      	ands	r3, r2
20001c86:	2b80      	cmp	r3, #128	; 0x80
20001c88:	d0f7      	beq.n	20001c7a <ascii_write_char+0xe>
		delay_micro(8); //latenstid
20001c8a:	2008      	movs	r0, #8
20001c8c:	f7fe ffbe 	bl	20000c0c <delay_micro>
		ascii_write_data(c);
20001c90:	1dfb      	adds	r3, r7, #7
20001c92:	781b      	ldrb	r3, [r3, #0]
20001c94:	0018      	movs	r0, r3
20001c96:	f7ff ff4e 	bl	20001b36 <ascii_write_data>
		delay_micro(50); //istÃƒÂ¤llet fÃƒÂ¶r 43us
20001c9a:	2032      	movs	r0, #50	; 0x32
20001c9c:	f7fe ffb6 	bl	20000c0c <delay_micro>
}
20001ca0:	46c0      	nop			; (mov r8, r8)
20001ca2:	46bd      	mov	sp, r7
20001ca4:	b002      	add	sp, #8
20001ca6:	bd80      	pop	{r7, pc}

20001ca8 <ascii_goToXY>:

void ascii_goToXY(unsigned char row, unsigned char column){
20001ca8:	b580      	push	{r7, lr}
20001caa:	b084      	sub	sp, #16
20001cac:	af00      	add	r7, sp, #0
20001cae:	0002      	movs	r2, r0
20001cb0:	1dfb      	adds	r3, r7, #7
20001cb2:	701a      	strb	r2, [r3, #0]
20001cb4:	1dbb      	adds	r3, r7, #6
20001cb6:	1c0a      	adds	r2, r1, #0
20001cb8:	701a      	strb	r2, [r3, #0]
	unsigned char address = row-1;
20001cba:	230f      	movs	r3, #15
20001cbc:	18fb      	adds	r3, r7, r3
20001cbe:	1dfa      	adds	r2, r7, #7
20001cc0:	7812      	ldrb	r2, [r2, #0]
20001cc2:	3a01      	subs	r2, #1
20001cc4:	701a      	strb	r2, [r3, #0]
	if(column == 2){
20001cc6:	1dbb      	adds	r3, r7, #6
20001cc8:	781b      	ldrb	r3, [r3, #0]
20001cca:	2b02      	cmp	r3, #2
20001ccc:	d106      	bne.n	20001cdc <ascii_goToXY+0x34>
		address += 0x40;
20001cce:	230f      	movs	r3, #15
20001cd0:	18fb      	adds	r3, r7, r3
20001cd2:	220f      	movs	r2, #15
20001cd4:	18ba      	adds	r2, r7, r2
20001cd6:	7812      	ldrb	r2, [r2, #0]
20001cd8:	3240      	adds	r2, #64	; 0x40
20001cda:	701a      	strb	r2, [r3, #0]
	}
	ascii_write_cmd(0x80 | address);
20001cdc:	230f      	movs	r3, #15
20001cde:	18fb      	adds	r3, r7, r3
20001ce0:	781b      	ldrb	r3, [r3, #0]
20001ce2:	2280      	movs	r2, #128	; 0x80
20001ce4:	4252      	negs	r2, r2
20001ce6:	4313      	orrs	r3, r2
20001ce8:	b2db      	uxtb	r3, r3
20001cea:	0018      	movs	r0, r3
20001cec:	f7ff ff0e 	bl	20001b0c <ascii_write_cmd>
}
20001cf0:	46c0      	nop			; (mov r8, r8)
20001cf2:	46bd      	mov	sp, r7
20001cf4:	b004      	add	sp, #16
20001cf6:	bd80      	pop	{r7, pc}

20001cf8 <ascii_init>:

void ascii_init(void){
20001cf8:	b580      	push	{r7, lr}
20001cfa:	af00      	add	r7, sp, #0
	//initiera displayen:
		while((ascii_read_status() & 0x80) == 0x80){} //VÃ¤nta tills displayed Ã¤r redo
20001cfc:	46c0      	nop			; (mov r8, r8)
20001cfe:	f7ff ff2f 	bl	20001b60 <ascii_read_status>
20001d02:	0003      	movs	r3, r0
20001d04:	001a      	movs	r2, r3
20001d06:	2380      	movs	r3, #128	; 0x80
20001d08:	4013      	ands	r3, r2
20001d0a:	2b80      	cmp	r3, #128	; 0x80
20001d0c:	d0f7      	beq.n	20001cfe <ascii_init+0x6>
		delay_micro(20); //latenstid 
20001d0e:	2014      	movs	r0, #20
20001d10:	f7fe ff7c 	bl	20000c0c <delay_micro>
		ascii_write_cmd(0b00111000); //Function set (39us), 000011NFXX, N = antal rader = 2, F = -->0=5x8<--, 1=5x11
20001d14:	2038      	movs	r0, #56	; 0x38
20001d16:	f7ff fef9 	bl	20001b0c <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20001d1a:	2064      	movs	r0, #100	; 0x64
20001d1c:	f7fe ff76 	bl	20000c0c <delay_micro>
		
	// clear display
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20001d20:	46c0      	nop			; (mov r8, r8)
20001d22:	f7ff ff1d 	bl	20001b60 <ascii_read_status>
20001d26:	0003      	movs	r3, r0
20001d28:	001a      	movs	r2, r3
20001d2a:	2380      	movs	r3, #128	; 0x80
20001d2c:	4013      	ands	r3, r2
20001d2e:	2b80      	cmp	r3, #128	; 0x80
20001d30:	d0f7      	beq.n	20001d22 <ascii_init+0x2a>
		delay_micro(20); //latenstid
20001d32:	2014      	movs	r0, #20
20001d34:	f7fe ff6a 	bl	20000c0c <delay_micro>
		ascii_write_cmd(0b00000001); 
20001d38:	2001      	movs	r0, #1
20001d3a:	f7ff fee7 	bl	20001b0c <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20001d3e:	2064      	movs	r0, #100	; 0x64
20001d40:	f7fe ff64 	bl	20000c0c <delay_micro>

	//display control:
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20001d44:	46c0      	nop			; (mov r8, r8)
20001d46:	f7ff ff0b 	bl	20001b60 <ascii_read_status>
20001d4a:	0003      	movs	r3, r0
20001d4c:	001a      	movs	r2, r3
20001d4e:	2380      	movs	r3, #128	; 0x80
20001d50:	4013      	ands	r3, r2
20001d52:	2b80      	cmp	r3, #128	; 0x80
20001d54:	d0f7      	beq.n	20001d46 <ascii_init+0x4e>
		delay_micro(20); //latenstid
20001d56:	2014      	movs	r0, #20
20001d58:	f7fe ff58 	bl	20000c0c <delay_micro>
		ascii_write_cmd(0b00001111); //000001 + XXX. X:ena = 0:av / 1:pÃƒÂ¥ -  SkÃƒÂ¤rm/MarkÃƒÂ¶r/BlinkaMarkÃƒÂ¶ren
20001d5c:	200f      	movs	r0, #15
20001d5e:	f7ff fed5 	bl	20001b0c <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20001d62:	2064      	movs	r0, #100	; 0x64
20001d64:	f7fe ff52 	bl	20000c0c <delay_micro>
		
	// entry mode set
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20001d68:	46c0      	nop			; (mov r8, r8)
20001d6a:	f7ff fef9 	bl	20001b60 <ascii_read_status>
20001d6e:	0003      	movs	r3, r0
20001d70:	001a      	movs	r2, r3
20001d72:	2380      	movs	r3, #128	; 0x80
20001d74:	4013      	ands	r3, r2
20001d76:	2b80      	cmp	r3, #128	; 0x80
20001d78:	d0f7      	beq.n	20001d6a <ascii_init+0x72>
		delay_micro(20); //latenstid
20001d7a:	2014      	movs	r0, #20
20001d7c:	f7fe ff46 	bl	20000c0c <delay_micro>
		ascii_write_cmd(0b00000110); //00000001 + XY. X=0: markÃƒÂ¶ren vÃƒÂ¤nst. || X=1: marÃƒÂ¶kren hÃƒÂ¶g. - Y=0: skift av || Y=1: skift pÃƒÂ¥
20001d80:	2006      	movs	r0, #6
20001d82:	f7ff fec3 	bl	20001b0c <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20001d86:	2064      	movs	r0, #100	; 0x64
20001d88:	f7fe ff40 	bl	20000c0c <delay_micro>
		
		
}
20001d8c:	46c0      	nop			; (mov r8, r8)
20001d8e:	46bd      	mov	sp, r7
20001d90:	bd80      	pop	{r7, pc}

20001d92 <init_application>:

void init_application(void){
20001d92:	b580      	push	{r7, lr}
20001d94:	af00      	add	r7, sp, #0
	#ifdef USBDM
		*((unsigned long *) 0x40023830) = 0x18; //startar klockor pÃ¥ port D och E
		//__asm volatile ("LDR R0, =0x08000209\n BLX R0 \n"); //initiera PLL
	#endif
	//"initierar Port E med anvÃƒÂ¤ndning med LCD-modulen, dvs. sÃƒÂ¥vÃƒÂ¤l port E0-7 som E8-15 sÃƒÂ¤tts till utgÃƒÂ¥ngar
	* portModer = 0x55555555;
20001d96:	4b03      	ldr	r3, [pc, #12]	; (20001da4 <init_application+0x12>)
20001d98:	4a03      	ldr	r2, [pc, #12]	; (20001da8 <init_application+0x16>)
20001d9a:	601a      	str	r2, [r3, #0]
}
20001d9c:	46c0      	nop			; (mov r8, r8)
20001d9e:	46bd      	mov	sp, r7
20001da0:	bd80      	pop	{r7, pc}
20001da2:	46c0      	nop			; (mov r8, r8)
20001da4:	40021000 	andmi	r1, r2, r0
20001da8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20001dac <set_up_ascii>:

void set_up_ascii( void ) {
20001dac:	b580      	push	{r7, lr}
20001dae:	af00      	add	r7, sp, #0
	init_application();
20001db0:	f7ff ffef 	bl	20001d92 <init_application>
	ascii_init();
20001db4:	f7ff ffa0 	bl	20001cf8 <ascii_init>
}
20001db8:	46c0      	nop			; (mov r8, r8)
20001dba:	46bd      	mov	sp, r7
20001dbc:	bd80      	pop	{r7, pc}

20001dbe <clear_ascii>:

void clear_ascii( void ) {
20001dbe:	b590      	push	{r4, r7, lr}
20001dc0:	b089      	sub	sp, #36	; 0x24
20001dc2:	af00      	add	r7, sp, #0
	char *s;
	char clear[] = "                    ";
20001dc4:	1d3b      	adds	r3, r7, #4
20001dc6:	4a17      	ldr	r2, [pc, #92]	; (20001e24 <clear_ascii+0x66>)
20001dc8:	ca13      	ldmia	r2!, {r0, r1, r4}
20001dca:	c313      	stmia	r3!, {r0, r1, r4}
20001dcc:	ca03      	ldmia	r2!, {r0, r1}
20001dce:	c303      	stmia	r3!, {r0, r1}
20001dd0:	7812      	ldrb	r2, [r2, #0]
20001dd2:	701a      	strb	r2, [r3, #0]
	
	s = clear;
20001dd4:	1d3b      	adds	r3, r7, #4
20001dd6:	61fb      	str	r3, [r7, #28]
	ascii_goToXY(1,1);
20001dd8:	2101      	movs	r1, #1
20001dda:	2001      	movs	r0, #1
20001ddc:	f7ff ff64 	bl	20001ca8 <ascii_goToXY>
	while(*s){
20001de0:	e006      	b.n	20001df0 <clear_ascii+0x32>
		ascii_write_char(*s++);
20001de2:	69fb      	ldr	r3, [r7, #28]
20001de4:	1c5a      	adds	r2, r3, #1
20001de6:	61fa      	str	r2, [r7, #28]
20001de8:	781b      	ldrb	r3, [r3, #0]
20001dea:	0018      	movs	r0, r3
20001dec:	f7ff ff3e 	bl	20001c6c <ascii_write_char>
	while(*s){
20001df0:	69fb      	ldr	r3, [r7, #28]
20001df2:	781b      	ldrb	r3, [r3, #0]
20001df4:	2b00      	cmp	r3, #0
20001df6:	d1f4      	bne.n	20001de2 <clear_ascii+0x24>
	}
	s = clear;
20001df8:	1d3b      	adds	r3, r7, #4
20001dfa:	61fb      	str	r3, [r7, #28]
	ascii_goToXY(1,2);
20001dfc:	2102      	movs	r1, #2
20001dfe:	2001      	movs	r0, #1
20001e00:	f7ff ff52 	bl	20001ca8 <ascii_goToXY>
	while(*s){
20001e04:	e006      	b.n	20001e14 <clear_ascii+0x56>
		ascii_write_char(*s++);
20001e06:	69fb      	ldr	r3, [r7, #28]
20001e08:	1c5a      	adds	r2, r3, #1
20001e0a:	61fa      	str	r2, [r7, #28]
20001e0c:	781b      	ldrb	r3, [r3, #0]
20001e0e:	0018      	movs	r0, r3
20001e10:	f7ff ff2c 	bl	20001c6c <ascii_write_char>
	while(*s){
20001e14:	69fb      	ldr	r3, [r7, #28]
20001e16:	781b      	ldrb	r3, [r3, #0]
20001e18:	2b00      	cmp	r3, #0
20001e1a:	d1f4      	bne.n	20001e06 <clear_ascii+0x48>
	}
}
20001e1c:	46c0      	nop			; (mov r8, r8)
20001e1e:	46bd      	mov	sp, r7
20001e20:	b009      	add	sp, #36	; 0x24
20001e22:	bd90      	pop	{r4, r7, pc}
20001e24:	200057a0 	andcs	r5, r0, r0, lsr #15

20001e28 <ascii_write>:

void ascii_write(char *row1, char *row2) {
20001e28:	b580      	push	{r7, lr}
20001e2a:	b082      	sub	sp, #8
20001e2c:	af00      	add	r7, sp, #0
20001e2e:	6078      	str	r0, [r7, #4]
20001e30:	6039      	str	r1, [r7, #0]
	clear_ascii();
20001e32:	f7ff ffc4 	bl	20001dbe <clear_ascii>
	
	ascii_goToXY(1,1);
20001e36:	2101      	movs	r1, #1
20001e38:	2001      	movs	r0, #1
20001e3a:	f7ff ff35 	bl	20001ca8 <ascii_goToXY>
	while(*row1){
20001e3e:	e006      	b.n	20001e4e <ascii_write+0x26>
		ascii_write_char(*row1++);
20001e40:	687b      	ldr	r3, [r7, #4]
20001e42:	1c5a      	adds	r2, r3, #1
20001e44:	607a      	str	r2, [r7, #4]
20001e46:	781b      	ldrb	r3, [r3, #0]
20001e48:	0018      	movs	r0, r3
20001e4a:	f7ff ff0f 	bl	20001c6c <ascii_write_char>
	while(*row1){
20001e4e:	687b      	ldr	r3, [r7, #4]
20001e50:	781b      	ldrb	r3, [r3, #0]
20001e52:	2b00      	cmp	r3, #0
20001e54:	d1f4      	bne.n	20001e40 <ascii_write+0x18>
	}	
	ascii_goToXY(1,2);
20001e56:	2102      	movs	r1, #2
20001e58:	2001      	movs	r0, #1
20001e5a:	f7ff ff25 	bl	20001ca8 <ascii_goToXY>
	while(*row2){
20001e5e:	e006      	b.n	20001e6e <ascii_write+0x46>
		ascii_write_char(*row2++);
20001e60:	683b      	ldr	r3, [r7, #0]
20001e62:	1c5a      	adds	r2, r3, #1
20001e64:	603a      	str	r2, [r7, #0]
20001e66:	781b      	ldrb	r3, [r3, #0]
20001e68:	0018      	movs	r0, r3
20001e6a:	f7ff feff 	bl	20001c6c <ascii_write_char>
	while(*row2){
20001e6e:	683b      	ldr	r3, [r7, #0]
20001e70:	781b      	ldrb	r3, [r3, #0]
20001e72:	2b00      	cmp	r3, #0
20001e74:	d1f4      	bne.n	20001e60 <ascii_write+0x38>
	}
	
	ascii_goToXY(21,2);
20001e76:	2102      	movs	r1, #2
20001e78:	2015      	movs	r0, #21
20001e7a:	f7ff ff15 	bl	20001ca8 <ascii_goToXY>
}
20001e7e:	46c0      	nop			; (mov r8, r8)
20001e80:	46bd      	mov	sp, r7
20001e82:	b002      	add	sp, #8
20001e84:	bd80      	pop	{r7, pc}

20001e86 <ascii_write_part>:

void ascii_write_part(char *row1, char *row2, int limit1, int limit2) {
20001e86:	b580      	push	{r7, lr}
20001e88:	b086      	sub	sp, #24
20001e8a:	af00      	add	r7, sp, #0
20001e8c:	60f8      	str	r0, [r7, #12]
20001e8e:	60b9      	str	r1, [r7, #8]
20001e90:	607a      	str	r2, [r7, #4]
20001e92:	603b      	str	r3, [r7, #0]
	clear_ascii();
20001e94:	f7ff ff93 	bl	20001dbe <clear_ascii>
	
	ascii_goToXY(1,1);
20001e98:	2101      	movs	r1, #1
20001e9a:	2001      	movs	r0, #1
20001e9c:	f7ff ff04 	bl	20001ca8 <ascii_goToXY>
	int i = 0;
20001ea0:	2300      	movs	r3, #0
20001ea2:	617b      	str	r3, [r7, #20]
	if(limit1 > 0) {
20001ea4:	687b      	ldr	r3, [r7, #4]
20001ea6:	2b00      	cmp	r3, #0
20001ea8:	dd11      	ble.n	20001ece <ascii_write_part+0x48>
		while(*row1 && (i++ < limit1)){
20001eaa:	e006      	b.n	20001eba <ascii_write_part+0x34>
			ascii_write_char(*row1++);
20001eac:	68fb      	ldr	r3, [r7, #12]
20001eae:	1c5a      	adds	r2, r3, #1
20001eb0:	60fa      	str	r2, [r7, #12]
20001eb2:	781b      	ldrb	r3, [r3, #0]
20001eb4:	0018      	movs	r0, r3
20001eb6:	f7ff fed9 	bl	20001c6c <ascii_write_char>
		while(*row1 && (i++ < limit1)){
20001eba:	68fb      	ldr	r3, [r7, #12]
20001ebc:	781b      	ldrb	r3, [r3, #0]
20001ebe:	2b00      	cmp	r3, #0
20001ec0:	d005      	beq.n	20001ece <ascii_write_part+0x48>
20001ec2:	697b      	ldr	r3, [r7, #20]
20001ec4:	1c5a      	adds	r2, r3, #1
20001ec6:	617a      	str	r2, [r7, #20]
20001ec8:	687a      	ldr	r2, [r7, #4]
20001eca:	4293      	cmp	r3, r2
20001ecc:	dbee      	blt.n	20001eac <ascii_write_part+0x26>
		}			
	}

	ascii_goToXY(1,2);
20001ece:	2102      	movs	r1, #2
20001ed0:	2001      	movs	r0, #1
20001ed2:	f7ff fee9 	bl	20001ca8 <ascii_goToXY>
	i = 0;
20001ed6:	2300      	movs	r3, #0
20001ed8:	617b      	str	r3, [r7, #20]
	if(limit2 > 0) {
20001eda:	683b      	ldr	r3, [r7, #0]
20001edc:	2b00      	cmp	r3, #0
20001ede:	dd11      	ble.n	20001f04 <ascii_write_part+0x7e>
		while(*row2 && (i++ < limit2)){
20001ee0:	e006      	b.n	20001ef0 <ascii_write_part+0x6a>
			ascii_write_char(*row2++);
20001ee2:	68bb      	ldr	r3, [r7, #8]
20001ee4:	1c5a      	adds	r2, r3, #1
20001ee6:	60ba      	str	r2, [r7, #8]
20001ee8:	781b      	ldrb	r3, [r3, #0]
20001eea:	0018      	movs	r0, r3
20001eec:	f7ff febe 	bl	20001c6c <ascii_write_char>
		while(*row2 && (i++ < limit2)){
20001ef0:	68bb      	ldr	r3, [r7, #8]
20001ef2:	781b      	ldrb	r3, [r3, #0]
20001ef4:	2b00      	cmp	r3, #0
20001ef6:	d005      	beq.n	20001f04 <ascii_write_part+0x7e>
20001ef8:	697b      	ldr	r3, [r7, #20]
20001efa:	1c5a      	adds	r2, r3, #1
20001efc:	617a      	str	r2, [r7, #20]
20001efe:	683a      	ldr	r2, [r7, #0]
20001f00:	4293      	cmp	r3, r2
20001f02:	dbee      	blt.n	20001ee2 <ascii_write_part+0x5c>
		}
	}
	
	ascii_goToXY(21,2);
20001f04:	2102      	movs	r1, #2
20001f06:	2015      	movs	r0, #21
20001f08:	f7ff fece 	bl	20001ca8 <ascii_goToXY>
}
20001f0c:	46c0      	nop			; (mov r8, r8)
20001f0e:	46bd      	mov	sp, r7
20001f10:	b006      	add	sp, #24
20001f12:	bd80      	pop	{r7, pc}

20001f14 <ascii_test>:



void ascii_test(void) {
20001f14:	b590      	push	{r4, r7, lr}
20001f16:	b08b      	sub	sp, #44	; 0x2c
20001f18:	af00      	add	r7, sp, #0
	char *s;
	char test1[] = "Alfanumerisk";
20001f1a:	2314      	movs	r3, #20
20001f1c:	18fb      	adds	r3, r7, r3
20001f1e:	4a1c      	ldr	r2, [pc, #112]	; (20001f90 <ascii_test+0x7c>)
20001f20:	ca13      	ldmia	r2!, {r0, r1, r4}
20001f22:	c313      	stmia	r3!, {r0, r1, r4}
20001f24:	7812      	ldrb	r2, [r2, #0]
20001f26:	701a      	strb	r2, [r3, #0]
	char test2[] = "hardåäöare suger";
20001f28:	003b      	movs	r3, r7
20001f2a:	4a1a      	ldr	r2, [pc, #104]	; (20001f94 <ascii_test+0x80>)
20001f2c:	ca13      	ldmia	r2!, {r0, r1, r4}
20001f2e:	c313      	stmia	r3!, {r0, r1, r4}
20001f30:	ca03      	ldmia	r2!, {r0, r1}
20001f32:	c303      	stmia	r3!, {r0, r1}
	
	init_application();
20001f34:	f7ff ff2d 	bl	20001d92 <init_application>
	ascii_init();
20001f38:	f7ff fede 	bl	20001cf8 <ascii_init>
	ascii_goToXY(1,1);
20001f3c:	2101      	movs	r1, #1
20001f3e:	2001      	movs	r0, #1
20001f40:	f7ff feb2 	bl	20001ca8 <ascii_goToXY>
	s = test1;
20001f44:	2314      	movs	r3, #20
20001f46:	18fb      	adds	r3, r7, r3
20001f48:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
20001f4a:	e006      	b.n	20001f5a <ascii_test+0x46>
		ascii_write_char(*s++);
20001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001f4e:	1c5a      	adds	r2, r3, #1
20001f50:	627a      	str	r2, [r7, #36]	; 0x24
20001f52:	781b      	ldrb	r3, [r3, #0]
20001f54:	0018      	movs	r0, r3
20001f56:	f7ff fe89 	bl	20001c6c <ascii_write_char>
	while(*s){
20001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001f5c:	781b      	ldrb	r3, [r3, #0]
20001f5e:	2b00      	cmp	r3, #0
20001f60:	d1f4      	bne.n	20001f4c <ascii_test+0x38>
	}
	ascii_goToXY(1,2);
20001f62:	2102      	movs	r1, #2
20001f64:	2001      	movs	r0, #1
20001f66:	f7ff fe9f 	bl	20001ca8 <ascii_goToXY>
	s = test2;
20001f6a:	003b      	movs	r3, r7
20001f6c:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
20001f6e:	e006      	b.n	20001f7e <ascii_test+0x6a>
		ascii_write_char(*s++);
20001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001f72:	1c5a      	adds	r2, r3, #1
20001f74:	627a      	str	r2, [r7, #36]	; 0x24
20001f76:	781b      	ldrb	r3, [r3, #0]
20001f78:	0018      	movs	r0, r3
20001f7a:	f7ff fe77 	bl	20001c6c <ascii_write_char>
	while(*s){
20001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001f80:	781b      	ldrb	r3, [r3, #0]
20001f82:	2b00      	cmp	r3, #0
20001f84:	d1f4      	bne.n	20001f70 <ascii_test+0x5c>
	}
	return 0;
20001f86:	46c0      	nop			; (mov r8, r8)
20001f88:	46bd      	mov	sp, r7
20001f8a:	b00b      	add	sp, #44	; 0x2c
20001f8c:	bd90      	pop	{r4, r7, pc}
20001f8e:	46c0      	nop			; (mov r8, r8)
20001f90:	200057b8 			; <UNDEFINED> instruction: 0x200057b8
20001f94:	200057c8 	andcs	r5, r0, r8, asr #15

20001f98 <display>:
#include "slow_text.h"
#include "ascii_display.h"

void display(SlowText *this, int length_of_row1) {
20001f98:	b580      	push	{r7, lr}
20001f9a:	b084      	sub	sp, #16
20001f9c:	af00      	add	r7, sp, #0
20001f9e:	6078      	str	r0, [r7, #4]
20001fa0:	6039      	str	r1, [r7, #0]
	int limit1 = this->counter / this->speed;
20001fa2:	687b      	ldr	r3, [r7, #4]
20001fa4:	689a      	ldr	r2, [r3, #8]
20001fa6:	687b      	ldr	r3, [r7, #4]
20001fa8:	68db      	ldr	r3, [r3, #12]
20001faa:	0019      	movs	r1, r3
20001fac:	0010      	movs	r0, r2
20001fae:	f000 f83d 	bl	2000202c <__divsi3>
20001fb2:	0003      	movs	r3, r0
20001fb4:	60fb      	str	r3, [r7, #12]
	int limit2 = this->counter / this->speed - length_of_row1;
20001fb6:	687b      	ldr	r3, [r7, #4]
20001fb8:	689a      	ldr	r2, [r3, #8]
20001fba:	687b      	ldr	r3, [r7, #4]
20001fbc:	68db      	ldr	r3, [r3, #12]
20001fbe:	0019      	movs	r1, r3
20001fc0:	0010      	movs	r0, r2
20001fc2:	f000 f833 	bl	2000202c <__divsi3>
20001fc6:	0003      	movs	r3, r0
20001fc8:	001a      	movs	r2, r3
20001fca:	683b      	ldr	r3, [r7, #0]
20001fcc:	1ad3      	subs	r3, r2, r3
20001fce:	60bb      	str	r3, [r7, #8]
	ascii_write_part(this->row1, this->row2, limit1, limit2);
20001fd0:	687b      	ldr	r3, [r7, #4]
20001fd2:	6818      	ldr	r0, [r3, #0]
20001fd4:	687b      	ldr	r3, [r7, #4]
20001fd6:	6859      	ldr	r1, [r3, #4]
20001fd8:	68bb      	ldr	r3, [r7, #8]
20001fda:	68fa      	ldr	r2, [r7, #12]
20001fdc:	f7ff ff53 	bl	20001e86 <ascii_write_part>
	
	this->counter++;
20001fe0:	687b      	ldr	r3, [r7, #4]
20001fe2:	689b      	ldr	r3, [r3, #8]
20001fe4:	1c5a      	adds	r2, r3, #1
20001fe6:	687b      	ldr	r3, [r7, #4]
20001fe8:	609a      	str	r2, [r3, #8]
}
20001fea:	46c0      	nop			; (mov r8, r8)
20001fec:	46bd      	mov	sp, r7
20001fee:	b004      	add	sp, #16
20001ff0:	bd80      	pop	{r7, pc}

20001ff2 <init_slow_text>:

void init_slow_text(SlowText *obj, char *row1, char *row2, int speed) {
20001ff2:	b580      	push	{r7, lr}
20001ff4:	b084      	sub	sp, #16
20001ff6:	af00      	add	r7, sp, #0
20001ff8:	60f8      	str	r0, [r7, #12]
20001ffa:	60b9      	str	r1, [r7, #8]
20001ffc:	607a      	str	r2, [r7, #4]
20001ffe:	603b      	str	r3, [r7, #0]
	obj->row1 = row1;
20002000:	68fb      	ldr	r3, [r7, #12]
20002002:	68ba      	ldr	r2, [r7, #8]
20002004:	601a      	str	r2, [r3, #0]
	obj->row2 = row2;
20002006:	68fb      	ldr	r3, [r7, #12]
20002008:	687a      	ldr	r2, [r7, #4]
2000200a:	605a      	str	r2, [r3, #4]
	obj->speed = speed;
2000200c:	68fb      	ldr	r3, [r7, #12]
2000200e:	683a      	ldr	r2, [r7, #0]
20002010:	60da      	str	r2, [r3, #12]
	obj->counter = 0;
20002012:	68fb      	ldr	r3, [r7, #12]
20002014:	2200      	movs	r2, #0
20002016:	609a      	str	r2, [r3, #8]
	obj->display = display;
20002018:	68fb      	ldr	r3, [r7, #12]
2000201a:	4a03      	ldr	r2, [pc, #12]	; (20002028 <init_slow_text+0x36>)
2000201c:	611a      	str	r2, [r3, #16]
2000201e:	46c0      	nop			; (mov r8, r8)
20002020:	46bd      	mov	sp, r7
20002022:	b004      	add	sp, #16
20002024:	bd80      	pop	{r7, pc}
20002026:	46c0      	nop			; (mov r8, r8)
20002028:	20001f99 	mulcs	r0, r9, pc	; <UNPREDICTABLE>

2000202c <__divsi3>:
2000202c:	4603      	mov	r3, r0
2000202e:	430b      	orrs	r3, r1
20002030:	d47f      	bmi.n	20002132 <__divsi3+0x106>
20002032:	2200      	movs	r2, #0
20002034:	0843      	lsrs	r3, r0, #1
20002036:	428b      	cmp	r3, r1
20002038:	d374      	bcc.n	20002124 <__divsi3+0xf8>
2000203a:	0903      	lsrs	r3, r0, #4
2000203c:	428b      	cmp	r3, r1
2000203e:	d35f      	bcc.n	20002100 <__divsi3+0xd4>
20002040:	0a03      	lsrs	r3, r0, #8
20002042:	428b      	cmp	r3, r1
20002044:	d344      	bcc.n	200020d0 <__divsi3+0xa4>
20002046:	0b03      	lsrs	r3, r0, #12
20002048:	428b      	cmp	r3, r1
2000204a:	d328      	bcc.n	2000209e <__divsi3+0x72>
2000204c:	0c03      	lsrs	r3, r0, #16
2000204e:	428b      	cmp	r3, r1
20002050:	d30d      	bcc.n	2000206e <__divsi3+0x42>
20002052:	22ff      	movs	r2, #255	; 0xff
20002054:	0209      	lsls	r1, r1, #8
20002056:	ba12      	rev	r2, r2
20002058:	0c03      	lsrs	r3, r0, #16
2000205a:	428b      	cmp	r3, r1
2000205c:	d302      	bcc.n	20002064 <__divsi3+0x38>
2000205e:	1212      	asrs	r2, r2, #8
20002060:	0209      	lsls	r1, r1, #8
20002062:	d065      	beq.n	20002130 <__divsi3+0x104>
20002064:	0b03      	lsrs	r3, r0, #12
20002066:	428b      	cmp	r3, r1
20002068:	d319      	bcc.n	2000209e <__divsi3+0x72>
2000206a:	e000      	b.n	2000206e <__divsi3+0x42>
2000206c:	0a09      	lsrs	r1, r1, #8
2000206e:	0bc3      	lsrs	r3, r0, #15
20002070:	428b      	cmp	r3, r1
20002072:	d301      	bcc.n	20002078 <__divsi3+0x4c>
20002074:	03cb      	lsls	r3, r1, #15
20002076:	1ac0      	subs	r0, r0, r3
20002078:	4152      	adcs	r2, r2
2000207a:	0b83      	lsrs	r3, r0, #14
2000207c:	428b      	cmp	r3, r1
2000207e:	d301      	bcc.n	20002084 <__divsi3+0x58>
20002080:	038b      	lsls	r3, r1, #14
20002082:	1ac0      	subs	r0, r0, r3
20002084:	4152      	adcs	r2, r2
20002086:	0b43      	lsrs	r3, r0, #13
20002088:	428b      	cmp	r3, r1
2000208a:	d301      	bcc.n	20002090 <__divsi3+0x64>
2000208c:	034b      	lsls	r3, r1, #13
2000208e:	1ac0      	subs	r0, r0, r3
20002090:	4152      	adcs	r2, r2
20002092:	0b03      	lsrs	r3, r0, #12
20002094:	428b      	cmp	r3, r1
20002096:	d301      	bcc.n	2000209c <__divsi3+0x70>
20002098:	030b      	lsls	r3, r1, #12
2000209a:	1ac0      	subs	r0, r0, r3
2000209c:	4152      	adcs	r2, r2
2000209e:	0ac3      	lsrs	r3, r0, #11
200020a0:	428b      	cmp	r3, r1
200020a2:	d301      	bcc.n	200020a8 <__divsi3+0x7c>
200020a4:	02cb      	lsls	r3, r1, #11
200020a6:	1ac0      	subs	r0, r0, r3
200020a8:	4152      	adcs	r2, r2
200020aa:	0a83      	lsrs	r3, r0, #10
200020ac:	428b      	cmp	r3, r1
200020ae:	d301      	bcc.n	200020b4 <__divsi3+0x88>
200020b0:	028b      	lsls	r3, r1, #10
200020b2:	1ac0      	subs	r0, r0, r3
200020b4:	4152      	adcs	r2, r2
200020b6:	0a43      	lsrs	r3, r0, #9
200020b8:	428b      	cmp	r3, r1
200020ba:	d301      	bcc.n	200020c0 <__divsi3+0x94>
200020bc:	024b      	lsls	r3, r1, #9
200020be:	1ac0      	subs	r0, r0, r3
200020c0:	4152      	adcs	r2, r2
200020c2:	0a03      	lsrs	r3, r0, #8
200020c4:	428b      	cmp	r3, r1
200020c6:	d301      	bcc.n	200020cc <__divsi3+0xa0>
200020c8:	020b      	lsls	r3, r1, #8
200020ca:	1ac0      	subs	r0, r0, r3
200020cc:	4152      	adcs	r2, r2
200020ce:	d2cd      	bcs.n	2000206c <__divsi3+0x40>
200020d0:	09c3      	lsrs	r3, r0, #7
200020d2:	428b      	cmp	r3, r1
200020d4:	d301      	bcc.n	200020da <__divsi3+0xae>
200020d6:	01cb      	lsls	r3, r1, #7
200020d8:	1ac0      	subs	r0, r0, r3
200020da:	4152      	adcs	r2, r2
200020dc:	0983      	lsrs	r3, r0, #6
200020de:	428b      	cmp	r3, r1
200020e0:	d301      	bcc.n	200020e6 <__divsi3+0xba>
200020e2:	018b      	lsls	r3, r1, #6
200020e4:	1ac0      	subs	r0, r0, r3
200020e6:	4152      	adcs	r2, r2
200020e8:	0943      	lsrs	r3, r0, #5
200020ea:	428b      	cmp	r3, r1
200020ec:	d301      	bcc.n	200020f2 <__divsi3+0xc6>
200020ee:	014b      	lsls	r3, r1, #5
200020f0:	1ac0      	subs	r0, r0, r3
200020f2:	4152      	adcs	r2, r2
200020f4:	0903      	lsrs	r3, r0, #4
200020f6:	428b      	cmp	r3, r1
200020f8:	d301      	bcc.n	200020fe <__divsi3+0xd2>
200020fa:	010b      	lsls	r3, r1, #4
200020fc:	1ac0      	subs	r0, r0, r3
200020fe:	4152      	adcs	r2, r2
20002100:	08c3      	lsrs	r3, r0, #3
20002102:	428b      	cmp	r3, r1
20002104:	d301      	bcc.n	2000210a <__divsi3+0xde>
20002106:	00cb      	lsls	r3, r1, #3
20002108:	1ac0      	subs	r0, r0, r3
2000210a:	4152      	adcs	r2, r2
2000210c:	0883      	lsrs	r3, r0, #2
2000210e:	428b      	cmp	r3, r1
20002110:	d301      	bcc.n	20002116 <__divsi3+0xea>
20002112:	008b      	lsls	r3, r1, #2
20002114:	1ac0      	subs	r0, r0, r3
20002116:	4152      	adcs	r2, r2
20002118:	0843      	lsrs	r3, r0, #1
2000211a:	428b      	cmp	r3, r1
2000211c:	d301      	bcc.n	20002122 <__divsi3+0xf6>
2000211e:	004b      	lsls	r3, r1, #1
20002120:	1ac0      	subs	r0, r0, r3
20002122:	4152      	adcs	r2, r2
20002124:	1a41      	subs	r1, r0, r1
20002126:	d200      	bcs.n	2000212a <__divsi3+0xfe>
20002128:	4601      	mov	r1, r0
2000212a:	4152      	adcs	r2, r2
2000212c:	4610      	mov	r0, r2
2000212e:	4770      	bx	lr
20002130:	e05d      	b.n	200021ee <__divsi3+0x1c2>
20002132:	0fca      	lsrs	r2, r1, #31
20002134:	d000      	beq.n	20002138 <__divsi3+0x10c>
20002136:	4249      	negs	r1, r1
20002138:	1003      	asrs	r3, r0, #32
2000213a:	d300      	bcc.n	2000213e <__divsi3+0x112>
2000213c:	4240      	negs	r0, r0
2000213e:	4053      	eors	r3, r2
20002140:	2200      	movs	r2, #0
20002142:	469c      	mov	ip, r3
20002144:	0903      	lsrs	r3, r0, #4
20002146:	428b      	cmp	r3, r1
20002148:	d32d      	bcc.n	200021a6 <__divsi3+0x17a>
2000214a:	0a03      	lsrs	r3, r0, #8
2000214c:	428b      	cmp	r3, r1
2000214e:	d312      	bcc.n	20002176 <__divsi3+0x14a>
20002150:	22fc      	movs	r2, #252	; 0xfc
20002152:	0189      	lsls	r1, r1, #6
20002154:	ba12      	rev	r2, r2
20002156:	0a03      	lsrs	r3, r0, #8
20002158:	428b      	cmp	r3, r1
2000215a:	d30c      	bcc.n	20002176 <__divsi3+0x14a>
2000215c:	0189      	lsls	r1, r1, #6
2000215e:	1192      	asrs	r2, r2, #6
20002160:	428b      	cmp	r3, r1
20002162:	d308      	bcc.n	20002176 <__divsi3+0x14a>
20002164:	0189      	lsls	r1, r1, #6
20002166:	1192      	asrs	r2, r2, #6
20002168:	428b      	cmp	r3, r1
2000216a:	d304      	bcc.n	20002176 <__divsi3+0x14a>
2000216c:	0189      	lsls	r1, r1, #6
2000216e:	d03a      	beq.n	200021e6 <__divsi3+0x1ba>
20002170:	1192      	asrs	r2, r2, #6
20002172:	e000      	b.n	20002176 <__divsi3+0x14a>
20002174:	0989      	lsrs	r1, r1, #6
20002176:	09c3      	lsrs	r3, r0, #7
20002178:	428b      	cmp	r3, r1
2000217a:	d301      	bcc.n	20002180 <__divsi3+0x154>
2000217c:	01cb      	lsls	r3, r1, #7
2000217e:	1ac0      	subs	r0, r0, r3
20002180:	4152      	adcs	r2, r2
20002182:	0983      	lsrs	r3, r0, #6
20002184:	428b      	cmp	r3, r1
20002186:	d301      	bcc.n	2000218c <__divsi3+0x160>
20002188:	018b      	lsls	r3, r1, #6
2000218a:	1ac0      	subs	r0, r0, r3
2000218c:	4152      	adcs	r2, r2
2000218e:	0943      	lsrs	r3, r0, #5
20002190:	428b      	cmp	r3, r1
20002192:	d301      	bcc.n	20002198 <__divsi3+0x16c>
20002194:	014b      	lsls	r3, r1, #5
20002196:	1ac0      	subs	r0, r0, r3
20002198:	4152      	adcs	r2, r2
2000219a:	0903      	lsrs	r3, r0, #4
2000219c:	428b      	cmp	r3, r1
2000219e:	d301      	bcc.n	200021a4 <__divsi3+0x178>
200021a0:	010b      	lsls	r3, r1, #4
200021a2:	1ac0      	subs	r0, r0, r3
200021a4:	4152      	adcs	r2, r2
200021a6:	08c3      	lsrs	r3, r0, #3
200021a8:	428b      	cmp	r3, r1
200021aa:	d301      	bcc.n	200021b0 <__divsi3+0x184>
200021ac:	00cb      	lsls	r3, r1, #3
200021ae:	1ac0      	subs	r0, r0, r3
200021b0:	4152      	adcs	r2, r2
200021b2:	0883      	lsrs	r3, r0, #2
200021b4:	428b      	cmp	r3, r1
200021b6:	d301      	bcc.n	200021bc <__divsi3+0x190>
200021b8:	008b      	lsls	r3, r1, #2
200021ba:	1ac0      	subs	r0, r0, r3
200021bc:	4152      	adcs	r2, r2
200021be:	d2d9      	bcs.n	20002174 <__divsi3+0x148>
200021c0:	0843      	lsrs	r3, r0, #1
200021c2:	428b      	cmp	r3, r1
200021c4:	d301      	bcc.n	200021ca <__divsi3+0x19e>
200021c6:	004b      	lsls	r3, r1, #1
200021c8:	1ac0      	subs	r0, r0, r3
200021ca:	4152      	adcs	r2, r2
200021cc:	1a41      	subs	r1, r0, r1
200021ce:	d200      	bcs.n	200021d2 <__divsi3+0x1a6>
200021d0:	4601      	mov	r1, r0
200021d2:	4663      	mov	r3, ip
200021d4:	4152      	adcs	r2, r2
200021d6:	105b      	asrs	r3, r3, #1
200021d8:	4610      	mov	r0, r2
200021da:	d301      	bcc.n	200021e0 <__divsi3+0x1b4>
200021dc:	4240      	negs	r0, r0
200021de:	2b00      	cmp	r3, #0
200021e0:	d500      	bpl.n	200021e4 <__divsi3+0x1b8>
200021e2:	4249      	negs	r1, r1
200021e4:	4770      	bx	lr
200021e6:	4663      	mov	r3, ip
200021e8:	105b      	asrs	r3, r3, #1
200021ea:	d300      	bcc.n	200021ee <__divsi3+0x1c2>
200021ec:	4240      	negs	r0, r0
200021ee:	b501      	push	{r0, lr}
200021f0:	2000      	movs	r0, #0
200021f2:	f000 f805 	bl	20002200 <__aeabi_idiv0>
200021f6:	bd02      	pop	{r1, pc}

200021f8 <__aeabi_idivmod>:
200021f8:	2900      	cmp	r1, #0
200021fa:	d0f8      	beq.n	200021ee <__divsi3+0x1c2>
200021fc:	e716      	b.n	2000202c <__divsi3>
200021fe:	4770      	bx	lr

20002200 <__aeabi_idiv0>:
20002200:	4770      	bx	lr
20002202:	46c0      	nop			; (mov r8, r8)

20002204 <counter>:
20002204:	00000000 	andeq	r0, r0, r0

20002208 <nGameObjects>:
20002208:	00000000 	andeq	r0, r0, r0

2000220c <lastRightValue.4092>:
2000220c:	00000000 	andeq	r0, r0, r0

20002210 <speed.4094>:
20002210:	00000000 	andeq	r0, r0, r0

20002214 <lastLeftValue.4093>:
20002214:	00000000 	andeq	r0, r0, r0

20002218 <monster>:
20002218:	00000000 	andeq	r0, r0, r0

2000221c <tempCastleBlack>:
	...

20002228 <tempTitleGray>:
	...

20002234 <castleBlack>:
20002234:	00000000 	andeq	r0, r0, r0

20002238 <tempMonster>:
	...

20002244 <tempTitleBlack>:
	...

20002250 <bg>:
20002250:	00000000 	andeq	r0, r0, r0

20002254 <tempMonsterGray>:
	...

20002260 <tempTitleLight>:
	...

2000226c <castleLight>:
2000226c:	00000000 	andeq	r0, r0, r0

20002270 <tempCastleLight>:
	...

2000227c <tempMonsterLight>:
	...

20002288 <titleGray>:
20002288:	00000000 	andeq	r0, r0, r0

2000228c <tempCastleGray>:
	...

20002298 <monsterLight>:
20002298:	00000000 	andeq	r0, r0, r0

2000229c <titleLight>:
2000229c:	00000000 	andeq	r0, r0, r0

200022a0 <castleGray>:
200022a0:	00000000 	andeq	r0, r0, r0

200022a4 <monsterGray>:
200022a4:	00000000 	andeq	r0, r0, r0

200022a8 <tempBg>:
	...

200022b4 <titleBlack>:
200022b4:	00000000 	andeq	r0, r0, r0

200022b8 <gameObjects>:
	...

20002448 <fire1Light>:
20002448:	00000000 	andeq	r0, r0, r0

2000244c <tempFire3Light>:
	...

20002458 <fire3Gray>:
20002458:	00000000 	andeq	r0, r0, r0

2000245c <tempFire4Gray>:
	...

20002468 <fire2Image>:
	...

20002474 <tempFire2Gray>:
	...

20002480 <tempFireBlack>:
	...

2000248c <fire3Image>:
	...

20002498 <tempFire4Light>:
	...

200024a4 <fire1Image>:
	...

200024b0 <fire4Light>:
200024b0:	00000000 	andeq	r0, r0, r0

200024b4 <fireObj>:
	...

200024d8 <fire5Image>:
	...

200024e4 <fireImages>:
	...

20002520 <tempFire5Gray>:
	...

2000252c <tempFire3Gray>:
	...

20002538 <fire4Image>:
	...

20002544 <fire4Gray>:
20002544:	00000000 	andeq	r0, r0, r0

20002548 <tempFire1Light>:
	...

20002554 <tempFire5Light>:
	...

20002560 <fire5Gray>:
20002560:	00000000 	andeq	r0, r0, r0

20002564 <fire2Light>:
20002564:	00000000 	andeq	r0, r0, r0

20002568 <fire5Light>:
20002568:	00000000 	andeq	r0, r0, r0

2000256c <tempFire1Gray>:
	...

20002578 <fireBlack>:
20002578:	00000000 	andeq	r0, r0, r0

2000257c <tempFire2Light>:
	...

20002588 <fire3Light>:
20002588:	00000000 	andeq	r0, r0, r0

2000258c <fire2Gray>:
2000258c:	00000000 	andeq	r0, r0, r0

20002590 <fire1Gray>:
20002590:	00000000 	andeq	r0, r0, r0

20002594 <backBufferGray>:
	...

20002994 <draw_buffer_black_gray>:
	...

20002d94 <backBuffer>:
	...

20003194 <draw_buffer_black_light>:
	...

20003594 <draw_buffer_black>:
	...

20003994 <draw_buffer_black_gray_light>:
	...

20003d94 <backBufferLight>:
	...

20004194 <monster_black_bits>:
	...
200041a4:	0001c000 	andeq	ip, r1, r0
200041a8:	00023000 	andeq	r3, r2, r0
200041ac:	00021000 	andeq	r1, r2, r0
200041b0:	00060800 	andeq	r0, r6, r0, lsl #16
200041b4:	00040800 	andeq	r0, r4, r0, lsl #16
200041b8:	00040800 	andeq	r0, r4, r0, lsl #16
200041bc:	00092800 	andeq	r2, r9, r0, lsl #16
200041c0:	00092800 	andeq	r2, r9, r0, lsl #16
200041c4:	00100400 	andseq	r0, r0, r0, lsl #8
200041c8:	00100400 	andseq	r0, r0, r0, lsl #8
200041cc:	00200200 	eoreq	r0, r0, r0, lsl #4
200041d0:	00661b00 	rsbeq	r1, r6, r0, lsl #22
200041d4:	0043b100 	subeq	fp, r3, r0, lsl #2
200041d8:	0080e080 	addeq	lr, r0, r0, lsl #1
200041dc:	01800080 	orreq	r0, r0, r0, lsl #1
200041e0:	01000040 	tsteq	r0, r0, asr #32
200041e4:	02000040 	andeq	r0, r0, #64	; 0x40
200041e8:	02000060 	andeq	r0, r0, #96	; 0x60
200041ec:	02000020 	andeq	r0, r0, #32
200041f0:	03ff03e0 	mvnseq	r0, #224, 6	; 0x80000003
200041f4:	0001fc00 	andeq	pc, r1, r0, lsl #24
	...

2000420c <monster_light_bits>:
	...
20004220:	00010000 	andeq	r0, r1, r0
20004224:	00018000 	andeq	r8, r1, r0
20004228:	0001f000 	andeq	pc, r1, r0
2000422c:	0001f000 	andeq	pc, r1, r0
20004230:	00009000 	andeq	r9, r0, r0
20004234:	00009000 	andeq	r9, r0, r0
20004238:	0000d000 	andeq	sp, r0, r0
2000423c:	0001f800 	andeq	pc, r1, r0, lsl #16
20004240:	0003f800 	andeq	pc, r3, r0, lsl #16
20004244:	0003fc00 	andeq	pc, r3, r0, lsl #24
20004248:	0001e400 	andeq	lr, r1, r0, lsl #8
2000424c:	00044c00 	andeq	r4, r4, r0, lsl #24
20004250:	00060c00 	andeq	r0, r6, r0, lsl #24
20004254:	0006ee00 	andeq	lr, r6, r0, lsl #28
20004258:	000ffe00 	andeq	pc, pc, r0, lsl #28
2000425c:	000f3f00 	andeq	r3, pc, r0, lsl #30
20004260:	00000780 	andeq	r0, r0, r0, lsl #15
20004264:	000003c0 	andeq	r0, r0, r0, asr #7
	...

20004284 <monster_gray_bits>:
	...
200042a4:	00020000 	andeq	r0, r2, r0
200042a8:	00000000 	andeq	r0, r0, r0
200042ac:	00040000 	andeq	r0, r4, r0
200042b0:	00060000 	andeq	r0, r6, r0
200042b4:	000e0000 	andeq	r0, lr, r0
200042b8:	000c0000 	andeq	r0, ip, r0
200042bc:	001c0000 	andseq	r0, ip, r0
200042c0:	00180000 	andseq	r0, r8, r0
200042c4:	00380000 	eorseq	r0, r8, r0
200042c8:	00780000 	rsbseq	r0, r8, r0
200042cc:	00780000 	rsbseq	r0, r8, r0
200042d0:	00f00000 	rscseq	r0, r0, r0
200042d4:	01f0c000 	mvnseq	ip, r0
200042d8:	01fff800 	mvnseq	pc, r0, lsl #16
200042dc:	01fffc00 	mvnseq	pc, r0, lsl #24
200042e0:	0000fc00 	andeq	pc, r0, r0, lsl #24
	...

200042fc <castle_black_bits>:
200042fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004300:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004304:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004308:	00000000 	andeq	r0, r0, r0
2000430c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004310:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004314:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004318:	00000000 	andeq	r0, r0, r0
2000431c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004320:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004324:	00000001 	andeq	r0, r0, r1
20004328:	00000000 	andeq	r0, r0, r0
2000432c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004330:	7fffffff 	svcvc	0x00ffffff
	...
2000433c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004340:	3fffffff 	svccc	0x00ffffff
	...
2000434c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004350:	1fffffff 	svcne	0x00ffffff
	...
2000435c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004360:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
	...
2000436c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004370:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
	...
2000437c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004380:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20004487 <castle_black_bits+0x18b>	; <UNPREDICTABLE>
	...
2000438c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004390:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
	...
2000439c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200043a0:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
	...
200043ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200043b0:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
200043bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200043c0:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
200043cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200043d0:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
200043dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200043e0:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
200043ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200043f0:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
200043fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004400:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
2000440c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004410:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
2000441c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004420:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
2000442c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004430:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
2000443c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004440:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
2000444c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004450:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
2000445c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004460:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
20004464:	04900000 	ldreq	r0, [r0], #0
20004468:	00000000 	andeq	r0, r0, r0
2000446c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004470:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
20004474:	0b680000 	bleq	21a0447c <firstTime.4076+0x19fee70>
20004478:	00000000 	andeq	r0, r0, r0
2000447c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004480:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20004484:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
20004488:	00000000 	andeq	r0, r0, r0
2000448c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004490:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20004494:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
20004498:	00000092 	muleq	r0, r2, r0
2000449c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200044a0:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
200044a4:	04100000 	ldreq	r0, [r0], #-0
200044a8:	0000016d 	andeq	r0, r0, sp, ror #2
200044ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200044b0:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
200044b4:	04101240 	ldreq	r1, [r0], #-576	; 0xfffffdc0
200044b8:	00000101 	andeq	r0, r0, r1, lsl #2
200044bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200044c0:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200044c4:	04102da0 	ldreq	r2, [r0], #-3488	; 0xfffff260
200044c8:	00000101 	andeq	r0, r0, r1, lsl #2
200044cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200044d0:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200044d4:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
200044d8:	00000101 	andeq	r0, r0, r1, lsl #2
200044dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200044e0:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200044e4:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
200044e8:	00000101 	andeq	r0, r0, r1, lsl #2
200044ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200044f0:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200044f4:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
200044f8:	00000082 	andeq	r0, r0, r2, lsl #1
200044fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004500:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20004504:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20004508:	00000092 	muleq	r0, r2, r0
2000450c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004510:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20004514:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20004518:	012400a2 	smulwbeq	r4, r2, r0
2000451c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004520:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20004524:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20004528:	02da00a2 	sbcseq	r0, sl, #162	; 0xa2
2000452c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004530:	00004fff 	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
20004534:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20004538:	020200a2 	andeq	r0, r2, #162	; 0xa2
2000453c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004540:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004544:	08081040 	stmdaeq	r8, {r6, ip}
20004548:	0202009a 	andeq	r0, r2, #154	; 0x9a
2000454c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004550:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004554:	08082020 	stmdaeq	r8, {r5, sp}
20004558:	01040082 	smlabbeq	r4, r2, r0, r0
2000455c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004560:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004564:	48082020 	stmdami	r8, {r5, sp}
20004568:	01040102 	tsteq	r4, r2, lsl #2
2000456c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004570:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004574:	b0082020 	andlt	r2, r8, r0, lsr #32
20004578:	01040101 	tsteq	r4, r1, lsl #2
2000457c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004580:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004584:	00082220 	andeq	r2, r8, r0, lsr #4
20004588:	01040100 	mrseq	r0, (UNDEF: 20)
2000458c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004590:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004594:	00882420 	addeq	r2, r8, r0, lsr #8
20004598:	01040100 	mrseq	r0, (UNDEF: 20)
2000459c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200045a0:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200045a4:	01082420 	tsteq	r8, r0, lsr #8
200045a8:	01045a00 	tsteq	r4, r0, lsl #20
200045ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200045b0:	0000007f 	andeq	r0, r0, pc, ror r0
200045b4:	01082420 	tsteq	r8, r0, lsr #8
200045b8:	0104a400 	tsteq	r4, r0, lsl #8
200045bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200045c0:	00000001 	andeq	r0, r0, r1
200045c4:	010b2320 	tsteq	fp, r0, lsr #6
200045c8:	01030001 	tsteq	r3, r1
200045cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200045d0:	00000000 	andeq	r0, r0, r0
200045d4:	00c4c020 	sbceq	ip, r4, r0, lsr #32
200045d8:	02000002 	andeq	r0, r0, #2
200045dc:	3fffffff 	svccc	0x00ffffff
200045e0:	00000000 	andeq	r0, r0, r0
200045e4:	00000020 	andeq	r0, r0, r0, lsr #32
200045e8:	02200002 	eoreq	r0, r0, #2
200045ec:	3fffffff 	svccc	0x00ffffff
200045f0:	00000000 	andeq	r0, r0, r0
200045f4:	00000020 	andeq	r0, r0, r0, lsr #32
200045f8:	02400002 	subeq	r0, r0, #2
200045fc:	1fffffff 	svcne	0x00ffffff
20004600:	00000000 	andeq	r0, r0, r0
20004604:	80000020 	andhi	r0, r0, r0, lsr #32
20004608:	02400001 	subeq	r0, r0, #1
2000460c:	1fffffff 	svcne	0x00ffffff
20004610:	00000000 	andeq	r0, r0, r0
20004614:	00000010 	andeq	r0, r0, r0, lsl r0
20004618:	02400000 	subeq	r0, r0, #0
2000461c:	0fffffff 	svceq	0x00ffffff
20004620:	00000000 	andeq	r0, r0, r0
20004624:	00000010 	andeq	r0, r0, r0, lsl r0
20004628:	02300000 	eorseq	r0, r0, #0
2000462c:	0fffffff 	svceq	0x00ffffff
20004630:	00000000 	andeq	r0, r0, r0
20004634:	00000010 	andeq	r0, r0, r0, lsl r0
20004638:	02000000 	andeq	r0, r0, #0
2000463c:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
20004640:	00000000 	andeq	r0, r0, r0
20004644:	00000010 	andeq	r0, r0, r0, lsl r0
20004648:	04000000 	streq	r0, [r0], #-0
2000464c:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
20004650:	00000000 	andeq	r0, r0, r0
20004654:	00000010 	andeq	r0, r0, r0, lsl r0
20004658:	04000000 	streq	r0, [r0], #-0
2000465c:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20004763 <castle_gray_bits+0x67>	; <UNPREDICTABLE>
20004660:	00000000 	andeq	r0, r0, r0
20004664:	00000008 	andeq	r0, r0, r8
20004668:	04000000 	streq	r0, [r0], #-0
2000466c:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20004773 <castle_gray_bits+0x77>	; <UNPREDICTABLE>
20004670:	00000000 	andeq	r0, r0, r0
20004674:	00000008 	andeq	r0, r0, r8
20004678:	04000000 	streq	r0, [r0], #-0
2000467c:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20004680:	00000000 	andeq	r0, r0, r0
20004684:	00000008 	andeq	r0, r0, r8
20004688:	060001c0 	streq	r0, [r0], -r0, asr #3
2000468c:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20004690:	00000000 	andeq	r0, r0, r0
20004694:	00000008 	andeq	r0, r0, r8
20004698:	04000220 	streq	r0, [r0], #-544	; 0xfffffde0
2000469c:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
200046a0:	00000000 	andeq	r0, r0, r0
200046a4:	00000008 	andeq	r0, r0, r8
200046a8:	04100400 	ldreq	r0, [r0], #-1024	; 0xfffffc00
200046ac:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
200046b0:	00000000 	andeq	r0, r0, r0
200046b4:	00000008 	andeq	r0, r0, r8
200046b8:	04a00400 	strteq	r0, [r0], #1024	; 0x400
200046bc:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
200046c0:	00000000 	andeq	r0, r0, r0
200046c4:	00000008 	andeq	r0, r0, r8
200046c8:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
200046cc:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
200046d0:	00000000 	andeq	r0, r0, r0
200046d4:	00000008 	andeq	r0, r0, r8
200046d8:	07400400 	strbeq	r0, [r0, -r0, lsl #8]
200046dc:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
200046e0:	00000000 	andeq	r0, r0, r0
200046e4:	00000008 	andeq	r0, r0, r8
200046e8:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
200046ec:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200046f0:	00000000 	andeq	r0, r0, r0
200046f4:	00000008 	andeq	r0, r0, r8
200046f8:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00

200046fc <castle_gray_bits>:
	...
20004704:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20004708:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
20004714:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20004718:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
20004724:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20004728:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000472c:	00000000 	andeq	r0, r0, r0
20004730:	80000000 	andhi	r0, r0, r0
20004734:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004738:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000473c:	00000000 	andeq	r0, r0, r0
20004740:	c0000000 	andgt	r0, r0, r0
20004744:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004748:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000474c:	00000000 	andeq	r0, r0, r0
20004750:	e0000000 	and	r0, r0, r0
20004754:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004758:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
2000475c:	00000000 	andeq	r0, r0, r0
20004760:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20004764:	f3ffcfff 			; <UNDEFINED> instruction: 0xf3ffcfff
20004768:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
2000476c:	00000000 	andeq	r0, r0, r0
20004770:	fc000000 	stc2	0, cr0, [r0], {-0}
20004774:	f1ff8fff 			; <UNDEFINED> instruction: 0xf1ff8fff
20004778:	fff9ff3f 			; <UNDEFINED> instruction: 0xfff9ff3f
2000477c:	00000000 	andeq	r0, r0, r0
20004780:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20004784:	f0ff8fef 			; <UNDEFINED> instruction: 0xf0ff8fef
20004788:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
2000478c:	00000000 	andeq	r0, r0, r0
20004790:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20004794:	e0ff87ef 	rscs	r8, pc, pc, ror #15
20004798:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
2000479c:	00000000 	andeq	r0, r0, r0
200047a0:	ff800000 			; <UNDEFINED> instruction: 0xff800000
200047a4:	c07e07e7 	rsbsgt	r0, lr, r7, ror #15
200047a8:	ffe0fc1f 			; <UNDEFINED> instruction: 0xffe0fc1f
200047ac:	00000000 	andeq	r0, r0, r0
200047b0:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
200047b4:	001c07e7 	andseq	r0, ip, r7, ror #15
200047b8:	ffe0380e 	vcmla.f32	d19, d0, d14[0], #170
200047bc:	00000000 	andeq	r0, r0, r0
200047c0:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
200047c4:	000003e3 	andeq	r0, r0, r3, ror #7
200047c8:	f7c00000 			; <UNDEFINED> instruction: 0xf7c00000
200047cc:	00000000 	andeq	r0, r0, r0
200047d0:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
200047d4:	000001c3 	andeq	r0, r0, r3, asr #3
200047d8:	e7800000 	str	r0, [r0, r0]
200047dc:	00000000 	andeq	r0, r0, r0
200047e0:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
200047e4:	00000003 	andeq	r0, r0, r3
200047e8:	c3800000 	orrgt	r0, r0, #0
200047ec:	00000000 	andeq	r0, r0, r0
200047f0:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
200047f4:	00000001 	andeq	r0, r0, r1
200047f8:	c0000000 	andgt	r0, r0, r0
200047fc:	00000000 	andeq	r0, r0, r0
20004800:	9ff00000 	svcls	0x00f00000	; IMB
20004804:	00000001 	andeq	r0, r0, r1
20004808:	80000000 	andhi	r0, r0, r0
2000480c:	00000000 	andeq	r0, r0, r0
20004810:	8ff00000 	svchi	0x00f00000	; IMB
20004814:	00000000 	andeq	r0, r0, r0
20004818:	80000000 	andhi	r0, r0, r0
2000481c:	00000000 	andeq	r0, r0, r0
20004820:	8ff80000 	svchi	0x00f80000
	...
20004830:	0ffc0000 	svceq	0x00fc0000
	...
20004840:	0ffc0000 	svceq	0x00fc0000
	...
20004850:	0ffc0000 	svceq	0x00fc0000
	...
20004860:	0ffc0000 	svceq	0x00fc0000
	...
20004870:	0ffc0000 	svceq	0x00fc0000
	...
20004880:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
20004890:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
200048a0:	07fe0000 	ldrbeq	r0, [lr, r0]!
200048a4:	03800000 	orreq	r0, r0, #0
	...
200048b0:	03fe0000 	mvnseq	r0, #0
200048b4:	02000000 	andeq	r0, r0, #0
	...
200048c0:	03ff0000 	mvnseq	r0, #0
200048c4:	02000000 	andeq	r0, r0, #0
	...
200048d0:	03ff0000 	mvnseq	r0, #0
200048d4:	02000000 	andeq	r0, r0, #0
	...
200048e0:	03ff0000 	mvnseq	r0, #0
200048e4:	02000000 	andeq	r0, r0, #0
	...
200048f0:	03ff0000 	mvnseq	r0, #0
200048f4:	02800c00 	addeq	r0, r0, #0, 24
200048f8:	00000060 	andeq	r0, r0, r0, rrx
200048fc:	00000000 	andeq	r0, r0, r0
20004900:	03ff0000 	mvnseq	r0, #0
20004904:	03000800 	movweq	r0, #2048	; 0x800
20004908:	00000040 	andeq	r0, r0, r0, asr #32
2000490c:	00000000 	andeq	r0, r0, r0
20004910:	03ff0000 	mvnseq	r0, #0
20004914:	03000800 	movweq	r0, #2048	; 0x800
20004918:	00000040 	andeq	r0, r0, r0, asr #32
2000491c:	00000000 	andeq	r0, r0, r0
20004920:	03ff8000 	mvnseq	r8, #0
20004924:	03000a00 	movweq	r0, #2560	; 0xa00
20004928:	00000040 	andeq	r0, r0, r0, asr #32
2000492c:	00000000 	andeq	r0, r0, r0
20004930:	01ffb000 	mvnseq	fp, r0
20004934:	03000c00 	movweq	r0, #3072	; 0xc00
20004938:	00000040 	andeq	r0, r0, r0, asr #32
2000493c:	00000000 	andeq	r0, r0, r0
20004940:	01fff800 	mvnseq	pc, r0, lsl #16
20004944:	07800c00 	streq	r0, [r0, r0, lsl #24]
20004948:	00000060 	andeq	r0, r0, r0, rrx
2000494c:	00000000 	andeq	r0, r0, r0
20004950:	01fffc00 	mvnseq	pc, r0, lsl #24
20004954:	04001800 	streq	r1, [r0], #-2048	; 0xfffff800
20004958:	00c00058 	sbceq	r0, r0, r8, asr r0
2000495c:	00000000 	andeq	r0, r0, r0
20004960:	00fffc00 	rscseq	pc, pc, r0, lsl #24
20004964:	06001400 	streq	r1, [r0], -r0, lsl #8
20004968:	00c000c0 	sbceq	r0, r0, r0, asr #1
2000496c:	00000000 	andeq	r0, r0, r0
20004970:	007ffc00 	rsbseq	pc, pc, r0, lsl #24
20004974:	45001000 	strmi	r1, [r0, #-0]
20004978:	008000a0 	addeq	r0, r0, r0, lsr #1
2000497c:	00000000 	andeq	r0, r0, r0
20004980:	007ffe00 	rsbseq	pc, pc, r0, lsl #28
20004984:	80001000 	andhi	r1, r0, r0
20004988:	008000c1 	addeq	r0, r0, r1, asr #1
2000498c:	00000000 	andeq	r0, r0, r0
20004990:	003ffe00 	eorseq	pc, pc, r0, lsl #28
20004994:	00001000 	andeq	r1, r0, r0
20004998:	00a000f0 	strdeq	r0, [r0], r0	; <UNPREDICTABLE>
2000499c:	00000000 	andeq	r0, r0, r0
200049a0:	003fff00 	eorseq	pc, pc, r0, lsl #30
200049a4:	00001000 	andeq	r1, r0, r0
200049a8:	00c000e0 	sbceq	r0, r0, r0, ror #1
200049ac:	00000000 	andeq	r0, r0, r0
200049b0:	001fff80 	andseq	pc, pc, r0, lsl #31
200049b4:	02001800 	andeq	r1, r0, #0, 16
200049b8:	00c000c0 	sbceq	r0, r0, r0, asr #1
200049bc:	00000000 	andeq	r0, r0, r0
200049c0:	0019fffe 			; <UNDEFINED> instruction: 0x0019fffe
200049c4:	02001400 	andeq	r1, r0, #0, 8
200049c8:	00803000 	addeq	r3, r0, r0
200049cc:	00000000 	andeq	r0, r0, r0
200049d0:	0018ffff 			; <UNDEFINED> instruction: 0x0018ffff
200049d4:	05033f00 	streq	r3, [r3, #-3840]	; 0xfffff100
200049d8:	01000000 	mrseq	r0, (UNDEF: 0)
200049dc:	c0000000 	andgt	r0, r0, r0
200049e0:	0008ffff 	strdeq	pc, [r8], -pc	; <UNPREDICTABLE>
200049e4:	00c0e400 	sbceq	lr, r0, r0, lsl #8
200049e8:	01000004 	tsteq	r0, r4
200049ec:	c0000000 	andgt	r0, r0, r0
200049f0:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
200049f4:	00002000 	andeq	r2, r0, r0
200049f8:	01000008 	tsteq	r0, r8
200049fc:	e0000000 	and	r0, r0, r0
20004a00:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20004a04:	00001000 	andeq	r1, r0, r0
20004a08:	01000006 	tsteq	r0, r6
20004a0c:	e0000000 	and	r0, r0, r0
20004a10:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
20004a14:	80000000 	andhi	r0, r0, r0
20004a18:	01800001 	orreq	r0, r0, r1
20004a1c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20004a20:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
20004a24:	00400000 	subeq	r0, r0, r0
20004a28:	01400000 	mrseq	r0, (UNDEF: 64)
20004a2c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20004a30:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
20004a34:	03800000 	orreq	r0, r0, #0
20004a38:	01300000 	teqeq	r0, r0
20004a3c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20004a40:	00001bff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
20004a44:	10e00000 	rscne	r0, r0, r0
20004a48:	03000000 	movweq	r0, #0
20004a4c:	fc000000 	stc2	0, cr0, [r0], {-0}
20004a50:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004a54:	0f800000 	svceq	0x00800000
20004a58:	03900000 	orrseq	r0, r0, #0
20004a5c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20004a60:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004a64:	00000000 	andeq	r0, r0, r0
20004a68:	03e00000 	mvneq	r0, #0
20004a6c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20004a70:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004a74:	00000000 	andeq	r0, r0, r0
20004a78:	03f40000 	mvnseq	r0, #0
20004a7c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20004a80:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004a84:	00002000 	andeq	r2, r0, r0
20004a88:	01f80000 	mvnseq	r0, r0
20004a8c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20004a90:	0000007f 	andeq	r0, r0, pc, ror r0
20004a94:	0010c000 	andseq	ip, r0, r0
20004a98:	03f80000 	mvnseq	r0, #0
20004a9c:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20004aa0:	0000003f 	andeq	r0, r0, pc, lsr r0
20004aa4:	000f0000 	andeq	r0, pc, r0
20004aa8:	03e000e0 	mvneq	r0, #224	; 0xe0
20004aac:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20004ab0:	0000001f 	andeq	r0, r0, pc, lsl r0
20004ab4:	00026000 	andeq	r6, r2, r0
20004ab8:	035001f0 	cmpeq	r0, #240, 2	; 0x3c
20004abc:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20004ac0:	0000001f 	andeq	r0, r0, pc, lsl r0
20004ac4:	00118000 	andseq	r8, r1, r0
20004ac8:	03ec01f0 	mvneq	r0, #240, 2	; 0x3c
20004acc:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
20004ad0:	0000000f 	andeq	r0, r0, pc
20004ad4:	200e0000 	andcs	r0, lr, r0
20004ad8:	00a022f0 	strdeq	r2, [r0], r0	; <UNPREDICTABLE>
20004adc:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
20004ae0:	00000007 	andeq	r0, r0, r7
20004ae4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
20004ae8:	03c0c170 	biceq	ip, r0, #112, 2
20004aec:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
20004af0:	00000003 	andeq	r0, r0, r3
20004af4:	e4000000 	str	r0, [r0], #-0
20004af8:	03c270f3 	biceq	r7, r2, #243	; 0xf3

20004afc <castle_light_bits>:
	...
20004b58:	00000040 	andeq	r0, r0, r0, asr #32
	...
20004b64:	0c003000 	stceq	0, cr3, [r0], {-0}
20004b68:	00000040 	andeq	r0, r0, r0, asr #32
	...
20004b74:	0e007000 	cdpeq	0, 0, cr7, cr0, cr0, {0}
20004b78:	000600c0 	andeq	r0, r6, r0, asr #1
	...
20004b84:	0f007010 	svceq	0x00007010
20004b88:	000601e0 	andeq	r0, r6, r0, ror #3
	...
20004b94:	1f007810 	svcne	0x00007810
20004b98:	000601e0 	andeq	r0, r6, r0, ror #3
	...
20004ba4:	3f81f818 	svccc	0x0081f818
20004ba8:	001f03e0 	andseq	r0, pc, r0, ror #7
	...
20004bb4:	ffe3f818 			; <UNDEFINED> instruction: 0xffe3f818
20004bb8:	001fc7f1 			; <UNDEFINED> instruction: 0x001fc7f1
	...
20004bc4:	fffffc1c 			; <UNDEFINED> instruction: 0xfffffc1c
20004bc8:	083fffff 	ldmdaeq	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
	...
20004bd4:	fffffe3c 			; <UNDEFINED> instruction: 0xfffffe3c
20004bd8:	187fffff 	ldmdane	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
	...
20004be4:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20004be8:	3c7fffff 	ldclcc	15, cr15, [pc], #-1020	; 200047f4 <castle_gray_bits+0xf8>
	...
20004bf4:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20004bf8:	3fffffff 	svccc	0x00ffffff
20004bfc:	00000000 	andeq	r0, r0, r0
20004c00:	60000000 	andvs	r0, r0, r0
20004c04:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20004c08:	7fffffff 	svcvc	0x00ffffff
20004c0c:	00000000 	andeq	r0, r0, r0
20004c10:	70000000 	andvc	r0, r0, r0
20004c14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004c18:	7fffffff 	svcvc	0x00ffffff
20004c1c:	00000000 	andeq	r0, r0, r0
20004c20:	70000000 	andvc	r0, r0, r0
20004c24:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004c28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004c2c:	00000000 	andeq	r0, r0, r0
20004c30:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20004c34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004c38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004c3c:	00000000 	andeq	r0, r0, r0
20004c40:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20004c44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004c48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004c4c:	00000000 	andeq	r0, r0, r0
20004c50:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20004c54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004c58:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004c5c:	00000000 	andeq	r0, r0, r0
20004c60:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20004c64:	fb6fffff 	blx	21c04c6a <firstTime.4076+0x1bff65e>
20004c68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004c6c:	00000000 	andeq	r0, r0, r0
20004c70:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20004c74:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
20004c78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004c7c:	00000000 	andeq	r0, r0, r0
20004c80:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20004c84:	f407ffff 			; <UNDEFINED> instruction: 0xf407ffff
20004c88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004c8c:	00000000 	andeq	r0, r0, r0
20004c90:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20004c94:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
20004c98:	ffffff6d 			; <UNDEFINED> instruction: 0xffffff6d
20004c9c:	00000000 	andeq	r0, r0, r0
20004ca0:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20004ca4:	f80fffff 			; <UNDEFINED> instruction: 0xf80fffff
20004ca8:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20004cac:	00000000 	andeq	r0, r0, r0
20004cb0:	fc000000 	stc2	0, cr0, [r0], {-0}
20004cb4:	f80fedbf 			; <UNDEFINED> instruction: 0xf80fedbf
20004cb8:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20004cbc:	00000000 	andeq	r0, r0, r0
20004cc0:	fc000000 	stc2	0, cr0, [r0], {-0}
20004cc4:	f80fc01f 			; <UNDEFINED> instruction: 0xf80fc01f
20004cc8:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
20004ccc:	00000000 	andeq	r0, r0, r0
20004cd0:	fc000000 	stc2	0, cr0, [r0], {-0}
20004cd4:	f90fc81f 			; <UNDEFINED> instruction: 0xf90fc81f
20004cd8:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
20004cdc:	00000000 	andeq	r0, r0, r0
20004ce0:	fc000000 	stc2	0, cr0, [r0], {-0}
20004ce4:	f90fd41f 			; <UNDEFINED> instruction: 0xf90fd41f
20004ce8:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20004cec:	00000000 	andeq	r0, r0, r0
20004cf0:	fc000000 	stc2	0, cr0, [r0], {-0}
20004cf4:	f90fe03f 			; <UNDEFINED> instruction: 0xf90fe03f
20004cf8:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
20004cfc:	00000000 	andeq	r0, r0, r0
20004d00:	fc000000 	stc2	0, cr0, [r0], {-0}
20004d04:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
20004d08:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
20004d0c:	00000000 	andeq	r0, r0, r0
20004d10:	fc000000 	stc2	0, cr0, [r0], {-0}
20004d14:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
20004d18:	fedbff19 	mrc2	15, 6, pc, cr11, cr9, {0}
20004d1c:	00000000 	andeq	r0, r0, r0
20004d20:	fc000000 	stc2	0, cr0, [r0], {-0}
20004d24:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
20004d28:	fd01ff11 	stc2	15, cr15, [r1, #-68]	; 0xffffffbc
20004d2c:	00000000 	andeq	r0, r0, r0
20004d30:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20004d34:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
20004d38:	fd01ff19 	stc2	15, cr15, [r1, #-100]	; 0xffffff9c
20004d3c:	00000000 	andeq	r0, r0, r0
20004d40:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20004d44:	f007e03f 			; <UNDEFINED> instruction: 0xf007e03f
20004d48:	fc01ff01 	stc2	15, cr15, [r1], {1}
20004d4c:	00000000 	andeq	r0, r0, r0
20004d50:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20004d54:	f007c01f 			; <UNDEFINED> instruction: 0xf007c01f
20004d58:	fe03ff01 	cdp2	15, 0, cr15, cr3, cr1, {0}
20004d5c:	00000000 	andeq	r0, r0, r0
20004d60:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20004d64:	b007c01f 	andlt	ip, r7, pc, lsl r0
20004d68:	fe03fe01 	cdp2	14, 0, cr15, cr3, cr1, {0}
20004d6c:	00000000 	andeq	r0, r0, r0
20004d70:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20004d74:	0007c01f 	andeq	ip, r7, pc, lsl r0
20004d78:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
20004d7c:	00000000 	andeq	r0, r0, r0
20004d80:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20004d84:	0007c01f 	andeq	ip, r7, pc, lsl r0
20004d88:	fe03fe10 	mcr2	14, 0, pc, cr3, cr0, {0}	; <UNPREDICTABLE>
20004d8c:	00000000 	andeq	r0, r0, r0
20004d90:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20004d94:	0007c21f 	andeq	ip, r7, pc, lsl r2
20004d98:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
20004d9c:	00000000 	andeq	r0, r0, r0
20004da0:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20004da4:	0087c31f 	addeq	ip, r7, pc, lsl r3
20004da8:	fe03a400 	cdp2	4, 0, cr10, cr3, cr0, {0}
20004dac:	00000000 	andeq	r0, r0, r0
20004db0:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20004db4:	00c7c31f 	sbceq	ip, r7, pc, lsl r3
20004db8:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
20004dbc:	00000000 	andeq	r0, r0, r0
20004dc0:	ffe60000 			; <UNDEFINED> instruction: 0xffe60000
20004dc4:	00c4c01f 	sbceq	ip, r4, pc, lsl r0
20004dc8:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20004dcc:	00000000 	andeq	r0, r0, r0
20004dd0:	ffe70000 			; <UNDEFINED> instruction: 0xffe70000
20004dd4:	8000001f 	andhi	r0, r0, pc, lsl r0
20004dd8:	fc000001 	stc2	0, cr0, [r0], {1}
20004ddc:	00000000 	andeq	r0, r0, r0
20004de0:	fff70000 			; <UNDEFINED> instruction: 0xfff70000
20004de4:	8000001f 	andhi	r0, r0, pc, lsl r0
20004de8:	fc000009 	stc2	0, cr0, [r0], {9}
20004dec:	00000000 	andeq	r0, r0, r0
20004df0:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20004df4:	8000001f 	andhi	r0, r0, pc, lsl r0
20004df8:	fc200001 	stc2	0, cr0, [r0], #-4
20004dfc:	00000000 	andeq	r0, r0, r0
20004e00:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20004e04:	0000001f 	andeq	r0, r0, pc, lsl r0
20004e08:	fc300000 	ldc2	0, cr0, [r0], #-0
20004e0c:	00000000 	andeq	r0, r0, r0
20004e10:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20004e14:	0000000f 	andeq	r0, r0, pc
20004e18:	fc300000 	ldc2	0, cr0, [r0], #-0
20004e1c:	00000000 	andeq	r0, r0, r0
20004e20:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20004e24:	0000000f 	andeq	r0, r0, pc
20004e28:	fc000000 	stc2	0, cr0, [r0], {-0}
20004e2c:	00000000 	andeq	r0, r0, r0
20004e30:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
20004e34:	1000000f 	andne	r0, r0, pc
20004e38:	fc000000 	stc2	0, cr0, [r0], {-0}
20004e3c:	00000000 	andeq	r0, r0, r0
20004e40:	ffffe400 			; <UNDEFINED> instruction: 0xffffe400
20004e44:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
20004e48:	f8080000 			; <UNDEFINED> instruction: 0xf8080000
20004e4c:	00000000 	andeq	r0, r0, r0
20004e50:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20004e54:	0000000f 	andeq	r0, r0, pc
20004e58:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20004e5c:	00000000 	andeq	r0, r0, r0
20004e60:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20004e64:	00000007 	andeq	r0, r0, r7
20004e68:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
20004e6c:	00000000 	andeq	r0, r0, r0
20004e70:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20004e74:	00000007 	andeq	r0, r0, r7
20004e78:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
20004e7c:	00000000 	andeq	r0, r0, r0
20004e80:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20004e84:	00100007 	andseq	r0, r0, r7
20004e88:	f8040000 			; <UNDEFINED> instruction: 0xf8040000
20004e8c:	00000000 	andeq	r0, r0, r0
20004e90:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
20004e94:	00080007 	andeq	r0, r8, r7
20004e98:	f80001c0 			; <UNDEFINED> instruction: 0xf80001c0
20004e9c:	00000000 	andeq	r0, r0, r0
20004ea0:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
20004ea4:	00000007 	andeq	r0, r0, r7
20004ea8:	f8080300 			; <UNDEFINED> instruction: 0xf8080300
20004eac:	00000000 	andeq	r0, r0, r0
20004eb0:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
20004eb4:	00200007 	eoreq	r0, r0, r7
20004eb8:	f8080200 			; <UNDEFINED> instruction: 0xf8080200
20004ebc:	00000000 	andeq	r0, r0, r0
20004ec0:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
20004ec4:	00000007 	andeq	r0, r0, r7
20004ec8:	f8000200 			; <UNDEFINED> instruction: 0xf8000200
20004ecc:	00000000 	andeq	r0, r0, r0
20004ed0:	fffffff0 			; <UNDEFINED> instruction: 0xfffffff0
20004ed4:	00000007 	andeq	r0, r0, r7
20004ed8:	f8000100 			; <UNDEFINED> instruction: 0xf8000100
20004edc:	00000000 	andeq	r0, r0, r0
20004ee0:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
20004ee4:	01000007 	tsteq	r0, r7
20004ee8:	f8100280 			; <UNDEFINED> instruction: 0xf8100280
20004eec:	00000000 	andeq	r0, r0, r0
20004ef0:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20004ef4:	02000007 	andeq	r0, r0, #7
20004ef8:	f8000300 			; <UNDEFINED> instruction: 0xf8000300

20004efc <title_light_bits>:
	...
20004f18:	00000400 	andeq	r0, r0, r0, lsl #8
20004f1c:	30000000 	andcc	r0, r0, r0
20004f20:	f80f9e06 			; <UNDEFINED> instruction: 0xf80f9e06
20004f24:	06300000 	ldrteq	r0, [r0], -r0
20004f28:	00cb8cba 	strheq	r8, [fp], #202	; 0xca
20004f2c:	ba033000 	blt	200d0f34 <firstTime.4076+0xcb928>
20004f30:	0000eb4f 	andeq	lr, r0, pc, asr #22
20004f34:	439ef3f0 	orrsmi	pc, lr, #240, 6	; 0xc0000003
20004f38:	f000003a 			; <UNDEFINED> instruction: 0xf000003a
20004f3c:	5a478e9b 	bpl	211e89b0 <firstTime.4076+0x11e33a4>
20004f40:	9b300000 	blls	20c04f48 <firstTime.4076+0xbff93c>
20004f44:	019bcd36 	orrseq	ip, fp, r6, lsr sp
20004f48:	66db3000 	ldrbvs	r3, [fp], r0
20004f4c:	000319d9 	ldrdeq	r1, [r3], -r9
20004f50:	19667330 	stmdbne	r6!, {r4, r5, r8, r9, ip, sp, lr}^
20004f54:	30000310 	andcc	r0, r0, r0, lsl r3
20004f58:	00000001 	andeq	r0, r0, r1
20004f5c:	80000000 	andhi	r0, r0, r0
20004f60:	001d3e7b 	andseq	r3, sp, fp, ror lr
20004f64:	0ac00000 	beq	1f004f6c <startup-0xffb094>
20004f68:	00000528 	andeq	r0, r0, r8, lsr #10
20004f6c:	ec3a4000 	ldc	0, cr4, [sl], #-0
20004f70:	0000000d 	andeq	r0, r0, sp
20004f74:	05240bc0 	streq	r0, [r4, #-3008]!	; 0xfffff440
20004f78:	00f00000 	rscseq	r0, r0, r0
20004f7c:	001c0000 	andseq	r0, ip, r0
20004f80:	03ebb000 	mvneq	fp, #0
20004f84:	00000000 	andeq	r0, r0, r0
20004f88:	0c032330 	stceq	3, cr2, [r3], {48}	; 0x30
20004f8c:	300123e4 	andcc	r2, r1, r4, ror #7
20004f90:	940c1b2a 	strls	r1, [ip], #-2858	; 0xfffff4d6
20004f94:	ea300120 	b	20c0541c <firstTime.4076+0xbffe10>
20004f98:	ec860c3d 	stc	12, cr0, [r6], {61}	; 0x3d
20004f9c:	06ea3001 	strbteq	r3, [sl], r1
20004fa0:	01e69648 	mvneq	r9, r8, asr #12
20004fa4:	4b9e6b30 	blmi	1e79fc6c <startup-0x1860394>
20004fa8:	30012696 	mulcc	r1, r6, r6
20004fac:	92bbb06b 	adcsls	fp, fp, #107	; 0x6b
20004fb0:	69f00126 	ldmibvs	r0!, {r1, r2, r5, r8}^
20004fb4:	2691b832 			; <UNDEFINED> instruction: 0x2691b832
20004fb8:	1e687001 	cdpne	0, 6, cr7, cr8, cr1, {0}
20004fbc:	010e9110 	tsteq	lr, r0, lsl r1
	...

20004fd0 <title_gray_bits>:
	...
20004fd8:	40000000 	andmi	r0, r0, r0
20004fdc:	0f840000 	svceq	0x00840000
20004fe0:	00b0c3fe 	ldrshteq	ip, [r0], lr
20004fe4:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20004fe8:	001f8f1f 	andseq	r8, pc, pc, lsl pc	; <UNPREDICTABLE>
20004fec:	fffffbf8 			; <UNDEFINED> instruction: 0xfffffbf8
20004ff0:	c8001fff 	stmdagt	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
20004ff4:	07f061f9 			; <UNDEFINED> instruction: 0x07f061f9
20004ff8:	f1cc001f 			; <UNDEFINED> instruction: 0xf1cc001f
20004ffc:	be347305 	cdplt	3, 3, cr7, cr4, cr5, {0}
20005000:	05f0ce00 	ldrbeq	ip, [r0, #3584]!	; 0xe00
20005004:	007e1430 	rsbseq	r1, lr, r0, lsr r4
20005008:	2041080f 	subcs	r0, r1, pc, lsl #16
2000500c:	0e003e01 	cdpeq	14, 0, cr3, cr0, cr1, {0}
20005010:	01384060 	teqeq	r8, r0, rrx
20005014:	600c001e 	andvs	r0, ip, lr, lsl r0
20005018:	1c4030c0 	mcrrne	0, 12, r3, r0, cr0
2000501c:	10208c00 	eorne	r8, r0, r0, lsl #24
20005020:	0038c024 	eorseq	ip, r8, r4, lsr #32
20005024:	0411088c 	ldreq	r0, [r1], #-2188	; 0xfffff774
20005028:	c800f8ce 	stmdagt	r0, {r1, r2, r3, r6, r7, fp, ip, sp, lr, pc}
2000502c:	ffe6990c 			; <UNDEFINED> instruction: 0xffe6990c
20005030:	7cfa0178 	ldfvce	f0, [sl], #480	; 0x1e0
20005034:	3fe0c184 	svccc	0x00e0c184
20005038:	013ff400 	teqeq	pc, r0, lsl #8	; <UNPREDICTABLE>
2000503c:	001fc0c7 	andseq	ip, pc, r7, asr #1
20005040:	03c03ff0 	biceq	r3, r0, #240, 30	; 0x3c0
20005044:	fc0007e0 	stc2	7, cr0, [r0], {224}	; 0xe0
20005048:	e003803f 	and	r8, r3, pc, lsr r0
2000504c:	7f0c009f 	svcvc	0x000c009f
20005050:	ffc1fbe4 			; <UNDEFINED> instruction: 0xffc1fbe4
20005054:	fc140c03 	ldc2	12, cr0, [r4], {3}
20005058:	03ffc7ff 	mvnseq	ip, #66846720	; 0x3fc0000
2000505c:	f3fc1c0c 	vdup.32	d17, d12[1]
20005060:	0e02dc1b 	mcreq	12, 0, sp, cr2, cr11, {0}
20005064:	63f3e490 	mvnsvs	lr, #144, 8	; 0x90000000
20005068:	018e0218 	orreq	r0, lr, r8, lsl r2
2000506c:	1251e382 	subsne	lr, r1, #134217730	; 0x8000002
20005070:	88018e02 	stmdahi	r1, {r1, r9, sl, fp, pc}
20005074:	020061a7 	andeq	r6, r0, #-1073741783	; 0xc0000029
20005078:	2460008e 	strbtcs	r0, [r0], #-142	; 0xffffff72
2000507c:	8e021041 	cdphi	0, 0, cr1, cr2, cr1, {2}
20005080:	41000300 	mrsmi	r0, LR_irq
20005084:	000e0290 	muleq	lr, r0, r2
20005088:	9048008d 	subls	r0, r8, sp, lsl #1
2000508c:	81040c02 	tsthi	r4, r2, lsl #24
20005090:	02a04c87 	adceq	r4, r0, #34560	; 0x8700
20005094:	cffffffc 	svcgt	0x00fffffc
20005098:	8203e2fc 	andhi	lr, r3, #252, 4	; 0xc000000f
2000509c:	e3f81c07 	mvns	r1, #1792	; 0x700
200050a0:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

200050a4 <title_black_bits>:
	...
200050cc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
200050d0:	01000040 	tsteq	r0, r0, asr #32
200050d4:	400c0000 	andmi	r0, ip, r0
200050d8:	00010080 	andeq	r0, r1, r0, lsl #1
200050dc:	9c200400 	cfstrsls	mvf0, [r0], #-0
200050e0:	000001c4 	andeq	r0, r0, r4, asr #3
200050e4:	a4803104 	strge	r3, [r0], #260	; 0x104
200050e8:	04c00001 	strbeq	r0, [r0], #1
200050ec:	02240209 	eoreq	r0, r4, #-1879048192	; 0x90000000
200050f0:	89044000 	stmdbhi	r4, {lr}
200050f4:	00042602 	andeq	r2, r4, r2, lsl #12
200050f8:	e2888440 	add	r8, r8, #64, 8	; 0x40000000
200050fc:	00000421 	andeq	r0, r0, r1, lsr #8
20005100:	001966f2 			; <UNDEFINED> instruction: 0x001966f2
20005104:	03000007 	movweq	r0, #7
20005108:	00020000 	andeq	r0, r2, r0
2000510c:	f4000000 	vst4.8	{d0-d3}, [r0], r0
20005110:	00003a10 	andeq	r3, r0, r0, lsl sl
20005114:	10058000 	andne	r8, r5, r0
20005118:	00000012 	andeq	r0, r0, r2, lsl r0
2000511c:	1ad87400 	bne	1f622124 <startup-0x9ddedc>
20005120:	80000000 	andhi	r0, r0, r0
20005124:	0022041b 	eoreq	r0, r2, fp, lsl r4
20005128:	00004000 	andeq	r4, r0, r0
2000512c:	00003800 	andeq	r3, r0, r0, lsl #16
20005130:	0000c0c0 	andeq	ip, r0, r0, asr #1
20005134:	c0000000 	andgt	r0, r0, r0
20005138:	08000045 	stmdaeq	r0, {r0, r2, r6}
2000513c:	144000c7 	strbne	r0, [r0], #-199	; 0xffffff39
20005140:	01281040 			; <UNDEFINED> instruction: 0x01281040
20005144:	71144000 	tstvc	r4, r0
20005148:	00190810 	andseq	r0, r9, r0, lsl r8
2000514c:	90019440 	andls	r9, r1, r0, asr #8
20005150:	4000c928 	andmi	ip, r0, r8, lsr #18
20005154:	2c444c94 	mcrrcs	12, 9, r4, r4, cr4
20005158:	96000049 	strls	r0, [r0], -r9, asr #32
2000515c:	49264740 	stmdbmi	r6!, {r6, r8, r9, sl, lr}
20005160:	60938000 	addsvs	r8, r3, r0
20005164:	00512268 	subseq	r2, r1, r8, ror #4
20005168:	30000000 	andcc	r0, r0, r0
2000516c:	00001d03 	andeq	r1, r0, r3, lsl #26
	...

20005178 <bg_bits>:
	...
20005188:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
2000518c:	0000001f 	andeq	r0, r0, pc, lsl r0
	...
20005198:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
2000519c:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
200051a8:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
200051ac:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
	...
200051b8:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200051bc:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
	...
200051c8:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200051cc:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
200051d8:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
200051dc:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
200051e8:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
200051ec:	01ffffff 	ldrsheq	pc, [pc, #255]	; 200052f3 <bg_bits+0x17b>	; <UNPREDICTABLE>
200051f0:	0001f000 	andeq	pc, r1, r0
200051f4:	00000000 	andeq	r0, r0, r0
200051f8:	007fe000 	rsbseq	lr, pc, r0
200051fc:	0ffffffe 	svceq	0x00fffffe
20005200:	0003f800 	andeq	pc, r3, r0, lsl #16
20005204:	00000000 	andeq	r0, r0, r0
20005208:	003fe000 	eorseq	lr, pc, r0
2000520c:	7fffffc0 	svcvc	0x00ffffc0
20005210:	0003f800 	andeq	pc, r3, r0, lsl #16
20005214:	001f8000 	andseq	r8, pc, r0
20005218:	001fe000 	andseq	lr, pc, r0
2000521c:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20005220:	0003f801 	andeq	pc, r3, r1, lsl #16
20005224:	003fc000 	eorseq	ip, pc, r0
20005228:	003fe000 	eorseq	lr, pc, r0
2000522c:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
20005230:	3f83f807 	svccc	0x0083f807
20005234:	003fe000 	eorseq	lr, pc, r0
20005238:	01ffe000 	mvnseq	lr, r0
2000523c:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20005240:	7fc3f80f 	svcvc	0x00c3f80f
20005244:	003fe7f8 	ldrshteq	lr, [pc], -r8
20005248:	07ffe000 	ldrbeq	lr, [pc, r0]!
2000524c:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
20005250:	7fe1f01f 	svcvc	0x00e1f01f
20005254:	003ffffc 	ldrshteq	pc, [pc], -ip	; <UNPREDICTABLE>
20005258:	3fffc000 	svccc	0x00ffc000
2000525c:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20005260:	7ff0003f 	svcvc	0x00f0003f
20005264:	007ffffc 	ldrshteq	pc, [pc], #-252	; <UNPREDICTABLE>
20005268:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
2000526c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20005270:	7ff8007f 	svcvc	0x00f8007f
20005274:	3ffffffc 	svccc	0x00fffffc
20005278:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
2000527c:	f8000003 			; <UNDEFINED> instruction: 0xf8000003
20005280:	7ffc00ff 	svcvc	0x00fc00ff
20005284:	7ffffffc 	svcvc	0x00fffffc
20005288:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
2000528c:	e000000f 	and	r0, r0, pc
20005290:	7ffe01ff 	svcvc	0x00fe01ff
20005294:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20005298:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
2000529c:	8000001f 	andhi	r0, r0, pc, lsl r0
200052a0:	7fff01ff 	svcvc	0x00ff01ff
200052a4:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
200052a8:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
200052ac:	0000007f 	andeq	r0, r0, pc, ror r0
200052b0:	7fff83ff 	svcvc	0x00ff83ff
200052b4:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
200052b8:	ff800000 			; <UNDEFINED> instruction: 0xff800000
200052bc:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200052c0:	7fffc3fe 	svcvc	0x00ffc3fe
200052c4:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
200052c8:	fc7ffff0 	ldc2l	15, cr15, [pc], #-960	; 20004f10 <title_light_bits+0x14>
200052cc:	07c001ff 			; <UNDEFINED> instruction: 0x07c001ff
200052d0:	7fffe7fc 	svcvc	0x00ffe7fc
200052d4:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
200052d8:	f0fffffe 			; <UNDEFINED> instruction: 0xf0fffffe
200052dc:	0fe007ff 	svceq	0x00e007ff
200052e0:	7ffff7fc 	svcvc	0x00fff7fc
200052e4:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
200052e8:	c0ffffff 	ldrshtgt	pc, [pc], #255	; <UNPREDICTABLE>
200052ec:	0fe00fff 	svceq	0x00e00fff
200052f0:	7ffffff8 	svcvc	0x00fffff8
200052f4:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
200052f8:	01ffffff 	ldrsheq	pc, [pc, #255]	; 200053ff <bg_bits+0x287>	; <UNPREDICTABLE>
200052fc:	0fe01fff 	svceq	0x00e01fff
20005300:	7ffffff8 	svcvc	0x00fffff8
20005304:	7ffffc00 	svcvc	0x00fffc00
20005308:	01ffffff 	ldrsheq	pc, [pc, #255]	; 2000540f <bg_bits+0x297>	; <UNPREDICTABLE>
2000530c:	0fe03ffe 	svceq	0x00e03ffe
20005310:	3fdffff0 	svccc	0x00dffff0
20005314:	3ffffe00 	svccc	0x00fffe00
20005318:	01ffffff 	ldrsheq	pc, [pc, #255]	; 2000541f <bg_bits+0x2a7>	; <UNPREDICTABLE>
2000531c:	0fe03ff8 	svceq	0x00e03ff8
20005320:	3fe7fff0 	svccc	0x00e7fff0
20005324:	07fffe00 	ldrbeq	pc, [pc, r0, lsl #28]!	; <UNPREDICTABLE>
20005328:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
2000532c:	07c07ff0 			; <UNDEFINED> instruction: 0x07c07ff0
20005330:	1fe7fff0 	svcne	0x00e7fff0
20005334:	0ffffe00 	svceq	0x00fffe00
20005338:	03fc00ff 	mvnseq	r0, #255	; 0xff
2000533c:	0000ffe0 	andeq	pc, r0, r0, ror #31
20005340:	1ff3ffe0 	svcne	0x00f3ffe0
20005344:	1ffffe00 	svcne	0x00fffe00
20005348:	03fc001f 	mvnseq	r0, #31
2000534c:	0001ff80 	andeq	pc, r1, r0, lsl #31
20005350:	1ff9ffe0 	svcne	0x00f9ffe0
20005354:	3ffffe00 	svccc	0x00fffe00
20005358:	03fc0007 	mvnseq	r0, #7
2000535c:	0001ff80 	andeq	pc, r1, r0, lsl #31
20005360:	0ffcffe0 	svceq	0x00fcffe0
20005364:	3ffdfe00 	svccc	0x00fdfe00
20005368:	07f80007 	ldrbeq	r0, [r8, r7]!
2000536c:	0003ff00 	andeq	pc, r3, r0, lsl #30
20005370:	0ffe7ff0 	svceq	0x00fe7ff0
20005374:	3ffcfe00 	svccc	0x00fcfe00
20005378:	07f80003 	ldrbeq	r0, [r8, r3]!
2000537c:	0007fe00 	andeq	pc, r7, r0, lsl #28
20005380:	07fe7ff8 			; <UNDEFINED> instruction: 0x07fe7ff8
20005384:	3ff8fe00 	svccc	0x00f8fe00
20005388:	0ff80003 	svceq	0x00f80003
2000538c:	0007fc00 	andeq	pc, r7, r0, lsl #24
20005390:	03fffffc 	mvnseq	pc, #252, 30	; 0x3f0
20005394:	3ff87c00 	svccc	0x00f87c00
20005398:	0ff80003 	svceq	0x00f80003
2000539c:	0007fc00 	andeq	pc, r7, r0, lsl #24
200053a0:	01fffffe 	ldrsheq	pc, [pc, #254]	; 200054a6 <bg_bits+0x32e>	; <UNPREDICTABLE>
200053a4:	1ff00000 	svcne	0x00f00000	; IMB
200053a8:	0ff00007 	svceq	0x00f00007
200053ac:	000ff800 	andeq	pc, pc, r0, lsl #16
200053b0:	01ffffff 	ldrsheq	pc, [pc, #255]	; 200054b7 <bg_bits+0x33f>	; <UNPREDICTABLE>
200053b4:	07f0003e 			; <UNDEFINED> instruction: 0x07f0003e
200053b8:	0ff00007 	svceq	0x00f00007
200053bc:	800ff000 	andhi	pc, pc, r0
200053c0:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
200053c4:	03e0007f 	mvneq	r0, #127	; 0x7f
200053c8:	0fe00007 	svceq	0x00e00007
200053cc:	c00ff000 	andgt	pc, pc, r0
200053d0:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
200053d4:	0000007f 	andeq	r0, r0, pc, ror r0
200053d8:	0fe00007 	svceq	0x00e00007
200053dc:	e00ff000 	and	pc, pc, r0
200053e0:	007ffeff 	ldrshteq	pc, [pc], #-239	; <UNPREDICTABLE>
200053e4:	0000007f 	andeq	r0, r0, pc, ror r0
200053e8:	0fe00007 	svceq	0x00e00007
200053ec:	f00ff000 			; <UNDEFINED> instruction: 0xf00ff000
200053f0:	003ffe7f 	eorseq	pc, pc, pc, ror lr	; <UNPREDICTABLE>
200053f4:	0000007f 	andeq	r0, r0, pc, ror r0
200053f8:	0fe00007 	svceq	0x00e00007
200053fc:	f80ff000 			; <UNDEFINED> instruction: 0xf80ff000
20005400:	001ffc3f 	andseq	pc, pc, pc, lsr ip	; <UNPREDICTABLE>
20005404:	0000007f 	andeq	r0, r0, pc, ror r0
20005408:	1fe0000f 	svcne	0x00e0000f
2000540c:	fc0ff000 	stc2	0, cr15, [pc], {-0}
20005410:	000ff81f 	andeq	pc, pc, pc, lsl r8	; <UNPREDICTABLE>
20005414:	0000003e 	andeq	r0, r0, lr, lsr r0
20005418:	1fe0000f 	svcne	0x00e0000f
2000541c:	fc07f000 	stc2	0, cr15, [r7], {-0}
20005420:	0007f00f 	andeq	pc, r7, pc
20005424:	00000000 	andeq	r0, r0, r0
20005428:	1fe0000f 	svcne	0x00e0000f
2000542c:	fc07f000 	stc2	0, cr15, [r7], {-0}
20005430:	00000007 	andeq	r0, r0, r7
20005434:	00000000 	andeq	r0, r0, r0
20005438:	1fe0000f 	svcne	0x00e0000f
2000543c:	fc07f800 	stc2	8, cr15, [r7], {-0}
20005440:	00000003 	andeq	r0, r0, r3
20005444:	000ff800 	andeq	pc, pc, r0, lsl #16
20005448:	1fc0001f 	svcne	0x00c0001f
2000544c:	fc07fc00 	stc2	12, cr15, [r7], {-0}
20005450:	00000001 	andeq	r0, r0, r1
20005454:	001ffc00 	andseq	pc, pc, r0, lsl #24
20005458:	1fc0003f 	svcne	0x00c0003f
2000545c:	fc07ff80 	stc2	15, cr15, [r7], {128}	; 0x80
20005460:	00000001 	andeq	r0, r0, r1
20005464:	003fff00 	eorseq	pc, pc, r0, lsl #30
20005468:	3fc0003f 	svccc	0x00c0003f
2000546c:	fc07fffc 	stc2	15, cr15, [r7], {252}	; 0xfc
20005470:	00000001 	andeq	r0, r0, r1
20005474:	007fff80 	rsbseq	pc, pc, r0, lsl #31
20005478:	ffc0003f 			; <UNDEFINED> instruction: 0xffc0003f
2000547c:	fc03ffff 	stc2	15, cr15, [r3], {255}	; 0xff
20005480:	00000001 	andeq	r0, r0, r1
20005484:	00ffffe0 	rscseq	pc, pc, r0, ror #31
20005488:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
2000548c:	fc01ffff 	stc2	15, cr15, [r1], {255}	; 0xff
20005490:	00000007 	andeq	r0, r0, r7
20005494:	03fffff0 	mvnseq	pc, #240, 30	; 0x3c0
20005498:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
2000549c:	fc00ffff 	stc2	15, cr15, [r0], {255}	; 0xff
200054a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200054a4:	07fffff8 			; <UNDEFINED> instruction: 0x07fffff8
200054a8:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
200054ac:	fc007fff 	stc2	15, cr7, [r0], {255}	; 0xff
200054b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200054b4:	07ff7ffd 			; <UNDEFINED> instruction: 0x07ff7ffd
200054b8:	ff80007f 			; <UNDEFINED> instruction: 0xff80007f
200054bc:	fc003fff 	stc2	15, cr3, [r0], {255}	; 0xff
200054c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200054c4:	0ffe3fff 	svceq	0x00fe3fff
200054c8:	ff1f007f 			; <UNDEFINED> instruction: 0xff1f007f
200054cc:	f80007ff 			; <UNDEFINED> instruction: 0xf80007ff
200054d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200054d4:	1ffc3fff 	svcne	0x00fc3fff
200054d8:	fc3f807f 	ldc2	0, cr8, [pc], #-508	; 200052e4 <bg_bits+0x16c>
200054dc:	f800003f 			; <UNDEFINED> instruction: 0xf800003f
200054e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200054e4:	1ff83fff 	svcne	0x00f83fff
200054e8:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
200054ec:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
200054f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200054f4:	3ff03fff 	svccc	0x00f03fff
200054f8:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
200054fc:	c0000000 	andgt	r0, r0, r0
20005500:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005504:	7fe03fff 	svcvc	0x00e03fff
20005508:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
2000550c:	00000000 	andeq	r0, r0, r0
20005510:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20005514:	7fc03fff 	svcvc	0x00c03fff
20005518:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
2000551c:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
20005520:	f800000f 			; <UNDEFINED> instruction: 0xf800000f
20005524:	ffc01fff 			; <UNDEFINED> instruction: 0xffc01fff
20005528:	001f003f 	andseq	r0, pc, pc, lsr r0	; <UNPREDICTABLE>
2000552c:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20005530:	f8007fff 			; <UNDEFINED> instruction: 0xf8007fff
20005534:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
20005538:	0000003f 	andeq	r0, r0, pc, lsr r0
2000553c:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20005540:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005544:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
20005548:	0000003f 	andeq	r0, r0, pc, lsr r0
2000554c:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20005550:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005554:	ff001fff 			; <UNDEFINED> instruction: 0xff001fff
20005558:	0000003f 	andeq	r0, r0, pc, lsr r0
2000555c:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20005560:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005564:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}
20005568:	0000003f 	andeq	r0, r0, pc, lsr r0
2000556c:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20005570:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005574:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}

20005578 <current_screen>:
20005578:	00000001 	andeq	r0, r0, r1

2000557c <delay_until_text.4247>:
2000557c:	00000046 	andeq	r0, r0, r6, asr #32

20005580 <long_text.4245>:
20005580:	00000028 	andeq	r0, r0, r8, lsr #32

20005584 <short_text.4246>:
20005584:	00000014 	andeq	r0, r0, r4, lsl r0

20005588 <fire_black_2_bits>:
	...
20005590:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>

20005594 <fire1_gray_bits>:
20005594:	00000000 	andeq	r0, r0, r0
20005598:	06000804 	streq	r0, [r0], -r4, lsl #16
2000559c:	02494204 	subeq	r4, r9, #4, 4	; 0x40000000

200055a0 <fire1_light_bits>:
200055a0:	00002000 	andeq	r2, r0, r0
200055a4:	48000010 	stmdami	r0, {r4}
200055a8:	2c243020 	stccs	0, cr3, [r4], #-128	; 0xffffff80

200055ac <fire2_gray_bits>:
200055ac:	00000000 	andeq	r0, r0, r0
200055b0:	10220000 	eorne	r0, r2, r0
200055b4:	00420444 	subeq	r0, r2, r4, asr #8

200055b8 <fire2_light_bits>:
200055b8:	04200000 	strteq	r0, [r0], #-0
200055bc:	240c0010 	strcs	r0, [ip], #-16
200055c0:	123c6008 	eorsne	r6, ip, #8

200055c4 <fire3_gray_bits>:
200055c4:	00000000 	andeq	r0, r0, r0
200055c8:	24100802 	ldrcs	r0, [r0], #-2050	; 0xfffff7fe
200055cc:	00020260 	andeq	r0, r2, r0, ror #4

200055d0 <fire3_light_bits>:
200055d0:	10200000 	eorne	r0, r0, r0
200055d4:	18040400 	stmdane	r4, {sl}
200055d8:	143c5812 	ldrtne	r5, [ip], #-2066	; 0xfffff7ee

200055dc <fire4_gray_bits>:
200055dc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
200055e0:	10320000 	eorsne	r0, r2, r0
200055e4:	02400012 	subeq	r0, r0, #18

200055e8 <fire4_light_bits>:
200055e8:	00001000 	andeq	r1, r0, r0
200055ec:	04082000 	streq	r2, [r8], #-0
200055f0:	24283a0c 	strtcs	r3, [r8], #-2572	; 0xfffff5f4

200055f4 <fire5_gray_bits>:
200055f4:	00000000 	andeq	r0, r0, r0
200055f8:	22001020 	andcs	r1, r0, #32
200055fc:	04044206 	streq	r4, [r4], #-518	; 0xfffffdfa

20005600 <fire5_light_bits>:
20005600:	00040000 	andeq	r0, r4, r0
20005604:	04240800 	strteq	r0, [r4], #-2048	; 0xfffff800
20005608:	502a1810 	eorpl	r1, sl, r0, lsl r8

2000560c <firstTime.4076>:
2000560c:	00000001 	andeq	r0, r0, r1
20005610:	734c4944 	movtvc	r4, #51524	; 0xc944
20005614:	7469772d 	strbtvc	r7, [r9], #-1837	; 0xfffff8d3
20005618:	73656863 	cmnvc	r5, #6488064	; 0x630000
2000561c:	76616820 	strbtvc	r6, [r1], -r0, lsr #16
20005620:	00000065 	andeq	r0, r0, r5, rrx
20005624:	20726f46 	rsbscs	r6, r2, r6, asr #30
20005628:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
2000562c:	65697275 	strbvs	r7, [r9, #-629]!	; 0xfffffd8b
20005630:	68742073 	ldmdavs	r4!, {r0, r1, r4, r5, r6, sp}^
20005634:	00000065 	andeq	r0, r0, r5, rrx
20005638:	20202020 	eorcs	r2, r0, r0, lsr #32
2000563c:	00000000 	andeq	r0, r0, r0
20005640:	6c696f63 	stclvs	15, cr6, [r9], #-396	; 0xfffffe74
20005644:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
20005648:	6566206e 	strbvs	r2, [r6, #-110]!	; 0xffffff92
2000564c:	002c7261 	eoreq	r7, ip, r1, ror #4
20005650:	74616874 	strbtvc	r6, [r1], #-2164	; 0xfffff78c
20005654:	44206120 	strtmi	r6, [r0], #-288	; 0xfffffee0
20005658:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
2000565c:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
20005660:	00000068 	andeq	r0, r0, r8, rrx
20005664:	6e656877 	mcrvs	8, 3, r6, cr5, cr7, {3}
20005668:	72657665 	rsbvc	r7, r5, #105906176	; 0x6500000
2000566c:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
20005670:	65682079 	strbvs	r2, [r8, #-121]!	; 0xffffff87
20005674:	00007261 	andeq	r7, r0, r1, ror #4
20005678:	00202020 	eoreq	r2, r0, r0, lsr #32
2000567c:	6e207369 	cdpvs	3, 2, cr7, cr0, cr9, {3}
20005680:	2e726165 	rpwcssz	f6, f2, f5
20005684:	00000000 	andeq	r0, r0, r0
20005688:	70727573 	rsbsvc	r7, r2, r3, ror r5
2000568c:	69736972 	ldmdbvs	r3!, {r1, r4, r5, r6, r8, fp, sp, lr}^
20005690:	202c676e 	eorcs	r6, ip, lr, ror #14
20005694:	646e6966 	strbtvs	r6, [lr], #-2406	; 0xfffff69a
20005698:	00676e69 	rsbeq	r6, r7, r9, ror #28
2000569c:	69206f53 	stmdbvs	r0!, {r0, r1, r4, r6, r8, r9, sl, fp, sp, lr}
200056a0:	73692074 	cmnvc	r9, #116	; 0x74
200056a4:	69757120 	ldmdbvs	r5!, {r5, r8, ip, sp, lr}^
200056a8:	00006574 	andeq	r6, r0, r4, ror r5
200056ac:	20756f79 	rsbscs	r6, r5, r9, ror pc
200056b0:	65726568 	ldrbvs	r6, [r2, #-1384]!	; 0xfffffa98
200056b4:	0000002c 	andeq	r0, r0, ip, lsr #32
200056b8:	72696568 	rsbvc	r6, r9, #104, 10	; 0x1a000000
200056bc:	206f7420 	rsbcs	r7, pc, r0, lsr #8
200056c0:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
200056c4:	61654c20 	cmnvs	r5, r0, lsr #24
200056c8:	00002e72 	andeq	r2, r0, r2, ror lr
200056cc:	65657571 	strbvs	r7, [r5, #-1393]!	; 0xfffffa8f
200056d0:	6144206e 	cmpvs	r4, lr, rrx
200056d4:	206f6666 	rsbcs	r6, pc, r6, ror #12
200056d8:	4420666f 	strtmi	r6, [r0], #-1647	; 0xfffff991
200056dc:	2c734c49 	ldclcs	12, cr4, [r3], #-292	; 0xfffffedc
200056e0:	00000000 	andeq	r0, r0, r0
200056e4:	706d6574 	rsbvc	r6, sp, r4, ror r5
200056e8:	2c646574 	cfstr64cs	mvdx6, [r4], #-464	; 0xfffffe30
200056ec:	206f7420 	rsbcs	r7, pc, r0, lsr #8
200056f0:	746f6f6c 	strbtvc	r6, [pc], #-3948	; 200056f8 <firstTime.4076+0xec>
200056f4:	00000000 	andeq	r0, r0, r0
200056f8:	20747542 	rsbscs	r7, r4, r2, asr #10
200056fc:	6279616d 	rsbsvs	r6, r9, #1073741851	; 0x4000001b
20005700:	6f792065 	svcvs	0x00792065
20005704:	65722775 	ldrbvs	r2, [r2, #-1909]!	; 0xfffff88b
20005708:	00000000 	andeq	r0, r0, r0
2000570c:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 2000557c <delay_until_text.4247>
20005710:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
20005714:	63697220 	cmnvs	r9, #32, 4
20005718:	2c736568 	cfldr64cs	mvdx6, [r3], #-416	; 0xfffffe60
2000571c:	00000000 	andeq	r0, r0, r0
20005720:	6b636977 	blvs	218dfd04 <firstTime.4076+0x18da6f8>
20005724:	44206465 	strtmi	r6, [r0], #-1125	; 0xfffffb9b
20005728:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
2000572c:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
20005730:	2e736568 	cdpcs	5, 7, cr6, cr3, cr8, {3}
20005734:	00000000 	andeq	r0, r0, r0
20005738:	65727573 	ldrbvs	r7, [r2, #-1395]!	; 0xfffffa8d
2000573c:	79622064 	stmdbvc	r2!, {r2, r5, r6, sp}^
20005740:	00000000 	andeq	r0, r0, r0
20005744:	67206f73 			; <UNDEFINED> instruction: 0x67206f73
20005748:	70706972 	rsbsvc	r6, r0, r2, ror r9
2000574c:	20796c69 	rsbscs	r6, r9, r9, ror #24
20005750:	61657274 	smcvs	22308	; 0x5724
20005754:	0000002d 	andeq	r0, r0, sp, lsr #32
20005758:	6572202d 	ldrbvs	r2, [r2, #-45]!	; 0xffffffd3
2000575c:	20746573 	rsbscs	r6, r4, r3, ror r5
20005760:	20656874 	rsbcs	r6, r5, r4, ror r8
20005764:	74697773 	strbtvc	r7, [r9], #-1907	; 0xfffff88d
20005768:	00216863 	eoreq	r6, r1, r3, ror #16
2000576c:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xfffff1bb
20005770:	62202c72 	eorvs	r2, r0, #29184	; 0x7200
20005774:	65766172 	ldrbvs	r6, [r6, #-370]!	; 0xfffffe8e
20005778:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
2000577c:	002c6863 	eoreq	r6, ip, r3, ror #16
20005780:	200012cc 	andcs	r1, r0, ip, asr #5
20005784:	200012d6 	ldrdcs	r1, [r0], -r6
20005788:	200012e0 	andcs	r1, r0, r0, ror #5
2000578c:	200012ea 	andcs	r1, r0, sl, ror #5
20005790:	200012f4 	strdcs	r1, [r0], -r4
20005794:	200012fe 	strdcs	r1, [r0], -lr
20005798:	20001308 	andcs	r1, r0, r8, lsl #6
2000579c:	20001312 	andcs	r1, r0, r2, lsl r3
200057a0:	20202020 	eorcs	r2, r0, r0, lsr #32
200057a4:	20202020 	eorcs	r2, r0, r0, lsr #32
200057a8:	20202020 	eorcs	r2, r0, r0, lsr #32
200057ac:	20202020 	eorcs	r2, r0, r0, lsr #32
200057b0:	20202020 	eorcs	r2, r0, r0, lsr #32
200057b4:	00000000 	andeq	r0, r0, r0
200057b8:	61666c41 	cmnvs	r6, r1, asr #24
200057bc:	656d756e 	strbvs	r7, [sp, #-1390]!	; 0xfffffa92
200057c0:	6b736972 	blvs	21cdfd90 <firstTime.4076+0x1cda784>
200057c4:	00000000 	andeq	r0, r0, r0
200057c8:	64726168 	ldrbtvs	r6, [r2], #-360	; 0xfffffe98
200057cc:	a4c3a5c3 	strbge	sl, [r3], #1475	; 0x5c3
200057d0:	7261b6c3 	rsbvc	fp, r1, #204472320	; 0xc300000
200057d4:	75732065 	ldrbvc	r2, [r3, #-101]!	; 0xffffff9b
200057d8:	00726567 	rsbseq	r6, r2, r7, ror #10

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000073d 	andeq	r0, r0, sp, lsr r7
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000048 	andeq	r0, r0, r8, asr #32
      10:	00025c0c 	andeq	r5, r2, ip, lsl #24
	...
      20:	020c0200 	andeq	r0, ip, #0, 4
      24:	00004e05 	andeq	r4, r0, r5, lsl #28
      28:	01d10300 	bicseq	r0, r1, r0, lsl #6
      2c:	07020000 	streq	r0, [r2, -r0]
      30:	0000004e 	andeq	r0, r0, lr, asr #32
      34:	02f30300 	rscseq	r0, r3, #0, 6
      38:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      3c:	0000004e 	andeq	r0, r0, lr, asr #32
      40:	099d0304 	ldmibeq	sp, {r2, r8, r9}
      44:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
      48:	00000055 	andeq	r0, r0, r5, asr r0
      4c:	04040008 	streq	r0, [r4], #-8
      50:	00031c07 	andeq	r1, r3, r7, lsl #24
      54:	5b040500 	blpl	10145c <startup-0x1fefeba4>
      58:	04000000 	streq	r0, [r0], #-0
      5c:	02bb0801 	adcseq	r0, fp, #65536	; 0x10000
      60:	ef060000 	svc	0x00060000
      64:	0200000a 	andeq	r0, r0, #10
      68:	0000210a 	andeq	r2, r0, sl, lsl #2
      6c:	02900700 	addseq	r0, r0, #0, 14
      70:	030c0000 	movweq	r0, #49152	; 0xc000
      74:	00009e06 	andeq	r9, r0, r6, lsl #28
      78:	041e0300 	ldreq	r0, [lr], #-768	; 0xfffffd00
      7c:	07030000 	streq	r0, [r3, -r0]
      80:	0000009e 	muleq	r0, lr, r0
      84:	04340300 	ldrteq	r0, [r4], #-768	; 0xfffffd00
      88:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
      8c:	0000009e 	muleq	r0, lr, r0
      90:	028c0304 	addeq	r0, ip, #4, 6	; 0x10000000
      94:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
      98:	0000009e 	muleq	r0, lr, r0
      9c:	04050008 	streq	r0, [r5], #-8
      a0:	00000062 	andeq	r0, r0, r2, rrx
      a4:	00075a06 	andeq	r5, r7, r6, lsl #20
      a8:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
      ac:	07000000 	streq	r0, [r0, -r0]
      b0:	0000014d 	andeq	r0, r0, sp, asr #2
      b4:	28060424 	stmdacs	r6, {r2, r5, sl}
      b8:	03000001 	movweq	r0, #1
      bc:	00000521 	andeq	r0, r0, r1, lsr #10
      c0:	01280704 			; <UNDEFINED> instruction: 0x01280704
      c4:	03000000 	movweq	r0, #0
      c8:	000000e0 	andeq	r0, r0, r0, ror #1
      cc:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
      d0:	03040000 	movweq	r0, #16384	; 0x4000
      d4:	00000207 	andeq	r0, r0, r7, lsl #4
      d8:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
      dc:	03080000 	movweq	r0, #32768	; 0x8000
      e0:	00000200 	andeq	r0, r0, r0, lsl #4
      e4:	01460c04 	cmpeq	r6, r4, lsl #24
      e8:	030c0000 	movweq	r0, #49152	; 0xc000
      ec:	0000023c 	andeq	r0, r0, ip, lsr r2
      f0:	01460d04 	cmpeq	r6, r4, lsl #26
      f4:	03100000 	tsteq	r0, #0
      f8:	00000108 	andeq	r0, r0, r8, lsl #2
      fc:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
     100:	03140000 	tsteq	r4, #0
     104:	000003d1 	ldrdeq	r0, [r0], -r1
     108:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
     10c:	03180000 	tsteq	r8, #0
     110:	000004da 	ldrdeq	r0, [r0], -sl
     114:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
     118:	031c0000 	tsteq	ip, #0
     11c:	00000024 	andeq	r0, r0, r4, lsr #32
     120:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
     124:	00200000 	eoreq	r0, r0, r0
     128:	00a40405 	adceq	r0, r4, r5, lsl #8
     12c:	04080000 	streq	r0, [r8], #-0
     130:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     134:	01400900 	cmpeq	r0, r0, lsl #18
     138:	400a0000 	andmi	r0, sl, r0
     13c:	00000001 	andeq	r0, r0, r1
     140:	00af0405 	adceq	r0, pc, r5, lsl #8
     144:	04050000 	streq	r0, [r5], #-0
     148:	00000135 	andeq	r0, r0, r5, lsr r1
     14c:	00014e06 	andeq	r4, r1, r6, lsl #28
     150:	af150400 	svcge	0x00150400
     154:	0b000000 	bleq	15c <startup-0x1ffffea4>
     158:	00000162 	andeq	r0, r0, r2, ror #2
     15c:	00000162 	andeq	r0, r0, r2, ror #2
     160:	0405000c 	streq	r0, [r5], #-12
     164:	0000014c 	andeq	r0, r0, ip, asr #2
     168:	0003fb0d 	andeq	pc, r3, sp, lsl #22
     16c:	571a0400 	ldrpl	r0, [sl, -r0, lsl #8]
     170:	0d000001 	stceq	0, cr0, [r0, #-4]
     174:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
     178:	012e1b04 			; <UNDEFINED> instruction: 0x012e1b04
     17c:	80060000 	andhi	r0, r6, r0
     180:	05000001 	streq	r0, [r0, #-1]
     184:	00005b24 	andeq	r5, r0, r4, lsr #22
     188:	017e0b00 	cmneq	lr, r0, lsl #22
     18c:	019a0000 	orrseq	r0, sl, r0
     190:	9a0e0000 	bls	380198 <startup-0x1fc7fe68>
     194:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     198:	04040003 	streq	r0, [r4], #-3
     19c:	0000f407 	andeq	pc, r0, r7, lsl #8
     1a0:	08d30d00 	ldmeq	r3, {r8, sl, fp}^
     1a4:	2b050000 	blcs	1401ac <startup-0x1febfe54>
     1a8:	00000189 	andeq	r0, r0, r9, lsl #3
     1ac:	0001160d 	andeq	r1, r1, sp, lsl #12
     1b0:	892c0500 	stmdbhi	ip!, {r8, sl}
     1b4:	0d000001 	stceq	0, cr0, [r0, #-4]
     1b8:	000004ab 	andeq	r0, r0, fp, lsr #9
     1bc:	01892d05 	orreq	r2, r9, r5, lsl #26
     1c0:	e80d0000 	stmda	sp, {}	; <UNPREDICTABLE>
     1c4:	05000001 	streq	r0, [r0, #-1]
     1c8:	0001892e 	andeq	r8, r1, lr, lsr #18
     1cc:	047b0d00 	ldrbteq	r0, [fp], #-3328	; 0xfffff300
     1d0:	2f050000 	svccs	0x00050000
     1d4:	00000189 	andeq	r0, r0, r9, lsl #3
     1d8:	0003c20d 	andeq	ip, r3, sp, lsl #4
     1dc:	89300500 	ldmdbhi	r0!, {r8, sl}
     1e0:	0d000001 	stceq	0, cr0, [r0, #-4]
     1e4:	00000170 	andeq	r0, r0, r0, ror r1
     1e8:	01893105 	orreq	r3, r9, r5, lsl #2
     1ec:	5b0b0000 	blpl	2c01f4 <startup-0x1fd3fe0c>
     1f0:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
     1f4:	0f000001 	svceq	0x00000001
     1f8:	0000019a 	muleq	r0, sl, r1
     1fc:	a8100077 	ldmdage	r0, {r0, r1, r2, r4, r5, r6}
     200:	06000001 	streq	r0, [r0], -r1
     204:	0001ee03 	andeq	lr, r1, r3, lsl #28
     208:	94030500 	strls	r0, [r3], #-1280	; 0xfffffb00
     20c:	11200041 			; <UNDEFINED> instruction: 0x11200041
     210:	00000498 	muleq	r0, r8, r4
     214:	01ee0307 	mvneq	r0, r7, lsl #6
     218:	03050000 	movweq	r0, #20480	; 0x5000
     21c:	2000420c 	andcs	r4, r0, ip, lsl #4
     220:	0004f711 	andeq	pc, r4, r1, lsl r7	; <UNPREDICTABLE>
     224:	ee030800 	cdp	8, 0, cr0, cr3, cr0, {0}
     228:	05000001 	streq	r0, [r0, #-1]
     22c:	00428403 	subeq	r8, r2, r3, lsl #8
     230:	005b0b20 	subseq	r0, fp, r0, lsr #22
     234:	02420000 	subeq	r0, r2, #0
     238:	9a0e0000 	bls	380240 <startup-0x1fc7fdc0>
     23c:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     240:	40110003 	andsmi	r0, r1, r3
     244:	09000005 	stmdbeq	r0, {r0, r2}
     248:	00023103 	andeq	r3, r2, r3, lsl #2
     24c:	fc030500 	stc2	5, cr0, [r3], {-0}
     250:	11200042 			; <UNDEFINED> instruction: 0x11200042
     254:	000003a1 	andeq	r0, r0, r1, lsr #7
     258:	0231030a 	eorseq	r0, r1, #671088640	; 0x28000000
     25c:	03050000 	movweq	r0, #20480	; 0x5000
     260:	200046fc 	strdcs	r4, [r0], -ip
     264:	00024a11 	andeq	r4, r2, r1, lsl sl
     268:	31030b00 	tstcc	r3, r0, lsl #22
     26c:	05000002 	streq	r0, [r0, #-2]
     270:	004afc03 	subeq	pc, sl, r3, lsl #24
     274:	005b0b20 	subseq	r0, fp, r0, lsr #22
     278:	02850000 	addeq	r0, r5, #0
     27c:	9a0f0000 	bls	3c0284 <startup-0x1fc3fd7c>
     280:	d1000001 	tstle	r0, r1
     284:	03741100 	cmneq	r4, #0, 2
     288:	030c0000 	movweq	r0, #49152	; 0xc000
     28c:	00000275 	andeq	r0, r0, r5, ror r2
     290:	4efc0305 	cdpmi	3, 15, cr0, cr12, cr5, {0}
     294:	06112000 	ldreq	r2, [r1], -r0
     298:	0d000003 	stceq	0, cr0, [r0, #-12]
     29c:	00027503 	andeq	r7, r2, r3, lsl #10
     2a0:	d0030500 	andle	r0, r3, r0, lsl #10
     2a4:	1120004f 			; <UNDEFINED> instruction: 0x1120004f
     2a8:	00000013 	andeq	r0, r0, r3, lsl r0
     2ac:	0275030e 	rsbseq	r0, r5, #939524096	; 0x38000000
     2b0:	03050000 	movweq	r0, #20480	; 0x5000
     2b4:	200050a4 	andcs	r5, r0, r4, lsr #1
     2b8:	00029d07 	andeq	r9, r2, r7, lsl #26
     2bc:	040f1400 	streq	r1, [pc], #-1024	; 2c4 <startup-0x1ffffd3c>
     2c0:	00000301 	andeq	r0, r0, r1, lsl #6
     2c4:	000d6203 	andeq	r6, sp, r3, lsl #4
     2c8:	01050f00 	tsteq	r5, r0, lsl #30
     2cc:	00000003 	andeq	r0, r0, r3
     2d0:	00043e03 	andeq	r3, r4, r3, lsl #28
     2d4:	01060f00 	tsteq	r6, r0, lsl #30
     2d8:	04000003 	streq	r0, [r0], #-3
     2dc:	00002e03 	andeq	r2, r0, r3, lsl #28
     2e0:	2e080f00 	cdpcs	15, 0, cr0, cr8, cr0, {0}
     2e4:	08000001 	stmdaeq	r0, {r0}
     2e8:	0004e403 	andeq	lr, r4, r3, lsl #8
     2ec:	2e090f00 	cdpcs	15, 0, cr0, cr9, cr0, {0}
     2f0:	0c000001 	stceq	0, cr0, [r0], {1}
     2f4:	0002b303 	andeq	fp, r2, r3, lsl #6
     2f8:	240c0f00 	strcs	r0, [ip], #-3840	; 0xfffff100
     2fc:	10000003 	andne	r0, r0, r3
     300:	07040500 	streq	r0, [r4, -r0, lsl #10]
     304:	04000003 	streq	r0, [r0], #-3
     308:	02c40801 	sbceq	r0, r4, #65536	; 0x10000
     30c:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
     310:	0a000003 	beq	324 <startup-0x1ffffcdc>
     314:	0000031e 	andeq	r0, r0, lr, lsl r3
     318:	00012e0a 	andeq	r2, r1, sl, lsl #28
     31c:	04050000 	streq	r0, [r5], #-0
     320:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
     324:	030e0405 	movweq	r0, #58373	; 0xe405
     328:	9e060000 	cdpls	0, 0, cr0, cr6, cr0, {0}
     32c:	0f000002 	svceq	0x00000002
     330:	0002b80d 	andeq	fp, r2, sp, lsl #16
     334:	05191100 	ldreq	r1, [r9, #-256]	; 0xffffff00
     338:	03100000 	tsteq	r0, #0
     33c:	00000231 	andeq	r0, r0, r1, lsr r2
     340:	51780305 	cmnpl	r8, r5, lsl #6
     344:	02042000 	andeq	r2, r4, #0
     348:	00031607 	andeq	r1, r3, r7, lsl #12
     34c:	01971000 	orrseq	r1, r7, r0
     350:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
     354:	0000009e 	muleq	r0, lr, r0
     358:	22180305 	andscs	r0, r8, #335544320	; 0x14000000
     35c:	3e102000 	cdpcc	0, 1, cr2, cr0, cr0, {0}
     360:	01000003 	tsteq	r0, r3
     364:	00009e2f 	andeq	r9, r0, pc, lsr #28
     368:	98030500 	stmdals	r3, {r8, sl}
     36c:	10200022 	eorne	r0, r0, r2, lsr #32
     370:	00000534 	andeq	r0, r0, r4, lsr r5
     374:	009e3001 	addseq	r3, lr, r1
     378:	03050000 	movweq	r0, #20480	; 0x5000
     37c:	200022a4 	andcs	r2, r0, r4, lsr #5
     380:	00676212 	rsbeq	r6, r7, r2, lsl r2
     384:	009e3101 	addseq	r3, lr, r1, lsl #2
     388:	03050000 	movweq	r0, #20480	; 0x5000
     38c:	20002250 	andcs	r2, r0, r0, asr r2
     390:	00015910 	andeq	r5, r1, r0, lsl r9
     394:	9e330100 	rsflss	f0, f3, f0
     398:	05000000 	streq	r0, [r0, #-0]
     39c:	00223403 	eoreq	r3, r2, r3, lsl #8
     3a0:	01651020 	cmneq	r5, r0, lsr #32
     3a4:	34010000 	strcc	r0, [r1], #-0
     3a8:	0000009e 	muleq	r0, lr, r0
     3ac:	22a00305 	adccs	r0, r0, #335544320	; 0x14000000
     3b0:	29102000 	ldmdbcs	r0, {sp}
     3b4:	01000003 	tsteq	r0, r3
     3b8:	00009e35 	andeq	r9, r0, r5, lsr lr
     3bc:	6c030500 	cfstr32vs	mvfx0, [r3], {-0}
     3c0:	10200022 	eorne	r0, r0, r2, lsr #32
     3c4:	000000fd 	strdeq	r0, [r0], -sp
     3c8:	009e3601 	addseq	r3, lr, r1, lsl #12
     3cc:	03050000 	movweq	r0, #20480	; 0x5000
     3d0:	200022b4 			; <UNDEFINED> instruction: 0x200022b4
     3d4:	00000010 	andeq	r0, r0, r0, lsl r0
     3d8:	9e370100 	rsflss	f0, f7, f0
     3dc:	05000000 	streq	r0, [r0, #-0]
     3e0:	00228803 	eoreq	r8, r2, r3, lsl #16
     3e4:	02e81020 	rsceq	r1, r8, #32
     3e8:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
     3ec:	0000009e 	muleq	r0, lr, r0
     3f0:	229c0305 	addscs	r0, ip, #335544320	; 0x14000000
     3f4:	12102000 	andsne	r2, r0, #0
     3f8:	01000004 	tsteq	r0, r4
     3fc:	0000623a 	andeq	r6, r0, sl, lsr r2
     400:	38030500 	stmdacc	r3, {r8, sl}
     404:	10200022 	eorne	r0, r0, r2, lsr #32
     408:	00000128 	andeq	r0, r0, r8, lsr #2
     40c:	00623b01 	rsbeq	r3, r2, r1, lsl #22
     410:	03050000 	movweq	r0, #20480	; 0x5000
     414:	2000227c 	andcs	r2, r0, ip, ror r2
     418:	0002c910 	andeq	ip, r2, r0, lsl r9
     41c:	623c0100 	eorsvs	r0, ip, #0, 2
     420:	05000000 	streq	r0, [r0, #-0]
     424:	00225403 	eoreq	r5, r2, r3, lsl #8
     428:	03da1020 	bicseq	r1, sl, #32
     42c:	3d010000 	stccc	0, cr0, [r1, #-0]
     430:	00000062 	andeq	r0, r0, r2, rrx
     434:	22a80305 	adccs	r0, r8, #335544320	; 0x14000000
     438:	91102000 	tstls	r0, r0
     43c:	01000003 	tsteq	r0, r3
     440:	0000623f 	andeq	r6, r0, pc, lsr r2
     444:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
     448:	10200022 	eorne	r0, r0, r2, lsr #32
     44c:	00000365 	andeq	r0, r0, r5, ror #6
     450:	00624001 	rsbeq	r4, r2, r1
     454:	03050000 	movweq	r0, #20480	; 0x5000
     458:	2000228c 	andcs	r2, r0, ip, lsl #5
     45c:	0003b210 	andeq	fp, r3, r0, lsl r2
     460:	62410100 	subvs	r0, r1, #0, 2
     464:	05000000 	streq	r0, [r0, #-0]
     468:	00227003 	eoreq	r7, r2, r3
     46c:	00e51020 	rsceq	r1, r5, r0, lsr #32
     470:	42010000 	andmi	r0, r1, #0
     474:	00000062 	andeq	r0, r0, r2, rrx
     478:	22440305 	subcs	r0, r4, #335544320	; 0x14000000
     47c:	e1102000 	tst	r0, r0
     480:	01000003 	tsteq	r0, r3
     484:	00006243 	andeq	r6, r0, r3, asr #4
     488:	28030500 	stmdacs	r3, {r8, sl}
     48c:	10200022 	eorne	r0, r0, r2, lsr #32
     490:	000002d9 	ldrdeq	r0, [r0], -r9
     494:	00624401 	rsbeq	r4, r2, r1, lsl #8
     498:	03050000 	movweq	r0, #20480	; 0x5000
     49c:	20002260 	andcs	r2, r0, r0, ror #4
     4a0:	00002e10 	andeq	r2, r0, r0, lsl lr
     4a4:	2e6e0100 	powcse	f0, f6, f0
     4a8:	05000001 	streq	r0, [r0, #-1]
     4ac:	00220403 	eoreq	r0, r2, r3, lsl #8
     4b0:	022d1020 	eoreq	r1, sp, #32
     4b4:	6f010000 	svcvs	0x00010000
     4b8:	0000012e 	andeq	r0, r0, lr, lsr #2
     4bc:	55780305 	ldrbpl	r0, [r8, #-773]!	; 0xfffffcfb
     4c0:	39132000 	ldmdbcc	r3, {sp}
     4c4:	01000001 	tsteq	r0, r1
     4c8:	00019870 	andeq	r9, r1, r0, ror r8
     4cc:	00061420 	andeq	r1, r6, r0, lsr #8
     4d0:	6c9c0100 	ldfvss	f0, [ip], {0}
     4d4:	11000006 	tstne	r0, r6
     4d8:	00000407 	andeq	r0, r0, r7, lsl #8
     4dc:	014c7e01 	cmpeq	ip, r1, lsl #28
     4e0:	91020000 	mrsls	r0, (UNDEF: 2)
     4e4:	0452114c 	ldrbeq	r1, [r2], #-332	; 0xfffffeb4
     4e8:	7f010000 	svcvc	0x00010000
     4ec:	000000a4 	andeq	r0, r0, r4, lsr #1
     4f0:	11409102 	cmpne	r0, r2, lsl #2
     4f4:	0000034b 	andeq	r0, r0, fp, asr #6
     4f8:	066c8001 	strbteq	r8, [ip], -r1
     4fc:	91030000 	mrsls	r0, (UNDEF: 3)
     500:	44117fb4 	ldrmi	r7, [r1], #-4020	; 0xfffff04c
     504:	01000001 	tsteq	r0, r1
     508:	00014c88 	andeq	r4, r1, r8, lsl #25
     50c:	90910300 	addsls	r0, r1, r0, lsl #6
     510:	0470117f 	ldrbteq	r1, [r0], #-383	; 0xfffffe81
     514:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
     518:	000000a4 	andeq	r0, r0, r4, lsr #1
     51c:	7f849103 	svcvc	0x00849103
     520:	0002fa11 	andeq	pc, r2, r1, lsl sl	; <UNPREDICTABLE>
     524:	6c8a0100 	stfvss	f0, [sl], {0}
     528:	03000006 	movweq	r0, #6
     52c:	117ef891 			; <UNDEFINED> instruction: 0x117ef891
     530:	00000213 	andeq	r0, r0, r3, lsl r2
     534:	014c9701 	cmpeq	ip, r1, lsl #14
     538:	91030000 	mrsls	r0, (UNDEF: 3)
     53c:	28117ed4 	ldmdacs	r1, {r2, r4, r6, r7, r9, sl, fp, ip, sp, lr}
     540:	01000005 	tsteq	r0, r5
     544:	0000a498 	muleq	r0, r8, r4
     548:	c8910300 	ldmgt	r1, {r8, r9}
     54c:	04ea117e 	strbteq	r1, [sl], #382	; 0x17e
     550:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
     554:	0000066c 	andeq	r0, r0, ip, ror #12
     558:	7ebc9103 	asnvce	f1, f3
     55c:	00051311 	andeq	r1, r5, r1, lsl r3
     560:	4ca00100 	stfmis	f0, [r0]
     564:	03000001 	movweq	r0, #1
     568:	117e9891 			; <UNDEFINED> instruction: 0x117e9891
     56c:	00000552 	andeq	r0, r0, r2, asr r5
     570:	014ca201 	cmpeq	ip, r1, lsl #4
     574:	91030000 	mrsls	r0, (UNDEF: 3)
     578:	59117df4 	ldmdbpl	r1, {r2, r4, r5, r6, r7, r8, sl, fp, ip, sp, lr}
     57c:	01000003 	tsteq	r0, r3
     580:	00032ab0 			; <UNDEFINED> instruction: 0x00032ab0
     584:	e0910300 	adds	r0, r1, r0, lsl #6
     588:	035f117d 	cmpeq	pc, #1073741855	; 0x4000001f
     58c:	b1010000 	mrslt	r0, (UNDEF: 1)
     590:	0000032a 	andeq	r0, r0, sl, lsr #6
     594:	7dcc9103 	stfvcp	f1, [ip, #12]
     598:	00013e11 	andeq	r3, r1, r1, lsl lr
     59c:	2ab20100 	bcs	fec809a4 <firstTime.4076+0xdec7b398>
     5a0:	03000003 	movweq	r0, #3
     5a4:	117db891 			; <UNDEFINED> instruction: 0x117db891
     5a8:	00000297 	muleq	r0, r7, r2
     5ac:	032ab301 			; <UNDEFINED> instruction: 0x032ab301
     5b0:	91030000 	mrsls	r0, (UNDEF: 3)
     5b4:	85117da4 	ldrhi	r7, [r1, #-3492]	; 0xfffff25c
     5b8:	01000003 	tsteq	r0, r3
     5bc:	00032ab4 			; <UNDEFINED> instruction: 0x00032ab4
     5c0:	90910300 	addsls	r0, r1, r0, lsl #6
     5c4:	038b117d 	orreq	r1, fp, #1073741855	; 0x4000001f
     5c8:	b5010000 	strlt	r0, [r1, #-0]
     5cc:	0000032a 	andeq	r0, r0, sl, lsr #6
     5d0:	7cfc9103 	ldfvcp	f1, [ip], #12
     5d4:	0002a711 	andeq	sl, r2, r1, lsl r7
     5d8:	2ab60100 	bcs	fed809e0 <firstTime.4076+0xded7b3d4>
     5dc:	03000003 	movweq	r0, #3
     5e0:	117ce891 			; <UNDEFINED> instruction: 0x117ce891
     5e4:	000002ad 	andeq	r0, r0, sp, lsr #5
     5e8:	032ab701 			; <UNDEFINED> instruction: 0x032ab701
     5ec:	91030000 	mrsls	r0, (UNDEF: 3)
     5f0:	88117cd4 	ldmdahi	r1, {r2, r4, r6, r7, sl, fp, ip, sp, lr}
     5f4:	01000001 	tsteq	r0, r1
     5f8:	00032ab8 			; <UNDEFINED> instruction: 0x00032ab8
     5fc:	c0910300 	addsgt	r0, r1, r0, lsl #6
     600:	020c117c 	andeq	r1, ip, #124, 2
     604:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
     608:	0000032a 	andeq	r0, r0, sl, lsr #6
     60c:	7cac9103 	stfvcd	f1, [ip], #12
     610:	0001e111 	andeq	lr, r1, r1, lsl r1
     614:	2aba0100 	bcs	fee80a1c <firstTime.4076+0xdee7b410>
     618:	03000003 	movweq	r0, #3
     61c:	117c9891 			; <UNDEFINED> instruction: 0x117c9891
     620:	00000243 	andeq	r0, r0, r3, asr #4
     624:	032abb01 			; <UNDEFINED> instruction: 0x032abb01
     628:	91030000 	mrsls	r0, (UNDEF: 3)
     62c:	be147c84 	cdplt	12, 1, cr7, cr4, cr4, {4}
     630:	c2200003 	eorgt	r0, r0, #3
     634:	11000003 	tstne	r0, r3
     638:	000001d7 	ldrdeq	r0, [r0], -r7
     63c:	012ede01 			; <UNDEFINED> instruction: 0x012ede01
     640:	03050000 	movweq	r0, #20480	; 0x5000
     644:	20005580 	andcs	r5, r0, r0, lsl #11
     648:	00042911 	andeq	r2, r4, r1, lsl r9
     64c:	2edf0100 	cdpcs	1, 13, cr0, cr15, cr0, {0}
     650:	05000001 	streq	r0, [r0, #-1]
     654:	00558403 	subseq	r8, r5, r3, lsl #8
     658:	045f1120 	ldrbeq	r1, [pc], #-288	; 660 <startup-0x1ffff9a0>
     65c:	e0010000 	and	r0, r1, r0
     660:	0000012e 	andeq	r0, r0, lr, lsr #2
     664:	557c0305 	ldrbpl	r0, [ip, #-773]!	; 0xfffffcfb
     668:	00002000 	andeq	r2, r0, r0
     66c:	0000a40b 	andeq	sl, r0, fp, lsl #8
     670:	00067c00 	andeq	r7, r6, r0, lsl #24
     674:	019a0f00 	orrseq	r0, sl, r0, lsl #30
     678:	00000000 	andeq	r0, r0, r0
     67c:	0003ef13 	andeq	lr, r3, r3, lsl pc
     680:	34460100 	strbcc	r0, [r6], #-256	; 0xffffff00
     684:	64200000 	strtvs	r0, [r0], #-0
     688:	01000001 	tsteq	r0, r1
     68c:	00071e9c 	muleq	r7, ip, lr
     690:	04431100 	strbeq	r1, [r3], #-256	; 0xffffff00
     694:	47010000 	strmi	r0, [r1, -r0]
     698:	0000009e 	muleq	r0, lr, r0
     69c:	11749102 	cmnne	r4, r2, lsl #2
     6a0:	0000021d 	andeq	r0, r0, sp, lsl r2
     6a4:	009e4b01 	addseq	r4, lr, r1, lsl #22
     6a8:	91020000 	mrsls	r0, (UNDEF: 2)
     6ac:	04c21170 	strbeq	r1, [r2], #368	; 0x170
     6b0:	4f010000 	svcmi	0x00010000
     6b4:	0000009e 	muleq	r0, lr, r0
     6b8:	116c9102 	cmnne	ip, r2, lsl #2
     6bc:	0000018e 	andeq	r0, r0, lr, lsl #3
     6c0:	009e5301 	addseq	r5, lr, r1, lsl #6
     6c4:	91020000 	mrsls	r0, (UNDEF: 2)
     6c8:	000a1168 	andeq	r1, sl, r8, ror #2
     6cc:	57010000 	strpl	r0, [r1, -r0]
     6d0:	0000009e 	muleq	r0, lr, r0
     6d4:	11649102 	cmnne	r4, r2, lsl #2
     6d8:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
     6dc:	009e5b01 	addseq	r5, lr, r1, lsl #22
     6e0:	91020000 	mrsls	r0, (UNDEF: 2)
     6e4:	00361160 	eorseq	r1, r6, r0, ror #2
     6e8:	5f010000 	svcpl	0x00010000
     6ec:	0000009e 	muleq	r0, lr, r0
     6f0:	115c9102 	cmpne	ip, r2, lsl #2
     6f4:	0000003f 	andeq	r0, r0, pc, lsr r0
     6f8:	009e6301 	addseq	r6, lr, r1, lsl #6
     6fc:	91020000 	mrsls	r0, (UNDEF: 2)
     700:	01c81158 	biceq	r1, r8, r8, asr r1
     704:	66010000 	strvs	r0, [r1], -r0
     708:	0000009e 	muleq	r0, lr, r0
     70c:	11549102 	cmpne	r4, r2, lsl #2
     710:	00000509 	andeq	r0, r0, r9, lsl #10
     714:	009e6901 	addseq	r6, lr, r1, lsl #18
     718:	91020000 	mrsls	r0, (UNDEF: 2)
     71c:	35150050 	ldrcc	r0, [r5, #-80]	; 0xffffffb0
     720:	01000003 	tsteq	r0, r3
     724:	0000101a 	andeq	r1, r0, sl, lsl r0
     728:	00002420 	andeq	r2, r0, r0, lsr #8
     72c:	169c0100 	ldrne	r0, [ip], r0, lsl #2
     730:	000004d2 	ldrdeq	r0, [r0], -r2
     734:	00002401 	andeq	r2, r0, r1, lsl #8
     738:	000c2000 	andeq	r2, ip, r0
     73c:	9c010000 	stcls	0, cr0, [r1], {-0}
     740:	0001e000 	andeq	lr, r1, r0
     744:	2e000400 	cfcpyscs	mvf0, mvf0
     748:	04000001 	streq	r0, [r0], #-1
     74c:	00004801 	andeq	r4, r0, r1, lsl #16
     750:	05690c00 	strbeq	r0, [r9, #-3072]!	; 0xfffff400
     754:	07ac0000 	streq	r0, [ip, r0]!
     758:	00562000 	subseq	r2, r6, r0
     75c:	01f80000 	mvnseq	r0, r0
     760:	0c020000 	stceq	0, cr0, [r2], {-0}
     764:	004e0502 	subeq	r0, lr, r2, lsl #10
     768:	d1030000 	mrsle	r0, (UNDEF: 3)
     76c:	02000001 	andeq	r0, r0, #1
     770:	00004e07 	andeq	r4, r0, r7, lsl #28
     774:	f3030000 	vhadd.u8	d0, d3, d0
     778:	02000002 	andeq	r0, r0, #2
     77c:	00004e08 	andeq	r4, r0, r8, lsl #28
     780:	9d030400 	cfstrsls	mvf0, [r3, #-0]
     784:	02000009 	andeq	r0, r0, #9
     788:	00005509 	andeq	r5, r0, r9, lsl #10
     78c:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
     790:	031c0704 	tsteq	ip, #4, 14	; 0x100000
     794:	04050000 	streq	r0, [r5], #-0
     798:	0000005b 	andeq	r0, r0, fp, asr r0
     79c:	bb080104 	bllt	200bb4 <startup-0x1fdff44c>
     7a0:	06000002 	streq	r0, [r0], -r2
     7a4:	00000aef 	andeq	r0, r0, pc, ror #21
     7a8:	00210a02 	eoreq	r0, r1, r2, lsl #20
     7ac:	90070000 	andls	r0, r7, r0
     7b0:	0c000002 	stceq	0, cr0, [r0], {2}
     7b4:	009e0603 	addseq	r0, lr, r3, lsl #12
     7b8:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
     7bc:	03000004 	movweq	r0, #4
     7c0:	00009e07 	andeq	r9, r0, r7, lsl #28
     7c4:	34030000 	strcc	r0, [r3], #-0
     7c8:	03000004 	movweq	r0, #4
     7cc:	00009e08 	andeq	r9, r0, r8, lsl #28
     7d0:	8c030400 	cfstrshi	mvf0, [r3], {-0}
     7d4:	03000002 	movweq	r0, #2
     7d8:	00009e09 	andeq	r9, r0, r9, lsl #28
     7dc:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
     7e0:	00006204 	andeq	r6, r0, r4, lsl #4
     7e4:	075a0600 	ldrbeq	r0, [sl, -r0, lsl #12]
     7e8:	0a030000 	beq	c07f0 <startup-0x1ff3f810>
     7ec:	0000006d 	andeq	r0, r0, sp, rrx
     7f0:	00014d07 	andeq	r4, r1, r7, lsl #26
     7f4:	06042400 	streq	r2, [r4], -r0, lsl #8
     7f8:	00000128 	andeq	r0, r0, r8, lsr #2
     7fc:	00052103 	andeq	r2, r5, r3, lsl #2
     800:	28070400 	stmdacs	r7, {sl}
     804:	00000001 	andeq	r0, r0, r1
     808:	0000e003 	andeq	lr, r0, r3
     80c:	2e080400 	cfcpyscs	mvf0, mvf8
     810:	04000001 	streq	r0, [r0], #-1
     814:	00020703 	andeq	r0, r2, r3, lsl #14
     818:	2e090400 	cfcpyscs	mvf0, mvf9
     81c:	08000001 	stmdaeq	r0, {r0}
     820:	00020003 	andeq	r0, r2, r3
     824:	460c0400 	strmi	r0, [ip], -r0, lsl #8
     828:	0c000001 	stceq	0, cr0, [r0], {1}
     82c:	00023c03 	andeq	r3, r2, r3, lsl #24
     830:	460d0400 	strmi	r0, [sp], -r0, lsl #8
     834:	10000001 	andne	r0, r0, r1
     838:	00010803 	andeq	r0, r1, r3, lsl #16
     83c:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
     840:	14000001 	strne	r0, [r0], #-1
     844:	0003d103 	andeq	sp, r3, r3, lsl #2
     848:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
     84c:	18000001 	stmdane	r0, {r0}
     850:	0004da03 	andeq	sp, r4, r3, lsl #20
     854:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
     858:	1c000001 	stcne	0, cr0, [r0], {1}
     85c:	00002403 	andeq	r2, r0, r3, lsl #8
     860:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
     864:	20000001 	andcs	r0, r0, r1
     868:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
     86c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     870:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     874:	40090074 	andmi	r0, r9, r4, ror r0
     878:	0a000001 	beq	884 <startup-0x1ffff77c>
     87c:	00000140 	andeq	r0, r0, r0, asr #2
     880:	af040500 	svcge	0x00040500
     884:	05000000 	streq	r0, [r0, #-0]
     888:	00013504 	andeq	r3, r1, r4, lsl #10
     88c:	014e0600 	cmpeq	lr, r0, lsl #12
     890:	15040000 	strne	r0, [r4, #-0]
     894:	000000af 	andeq	r0, r0, pc, lsr #1
     898:	0001620b 	andeq	r6, r1, fp, lsl #4
     89c:	00016200 	andeq	r6, r1, r0, lsl #4
     8a0:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
     8a4:	00014c04 	andeq	r4, r1, r4, lsl #24
     8a8:	03fb0d00 	mvnseq	r0, #0, 26
     8ac:	1a040000 	bne	1008b4 <startup-0x1feff74c>
     8b0:	00000157 	andeq	r0, r0, r7, asr r1
     8b4:	0001bb0d 	andeq	fp, r1, sp, lsl #22
     8b8:	2e1b0400 	cfmulscs	mvf0, mvf11, mvf0
     8bc:	04000001 	streq	r0, [r0], #-1
     8c0:	00f40704 	rscseq	r0, r4, r4, lsl #14
     8c4:	680e0000 	stmdavs	lr, {}	; <UNPREDICTABLE>
     8c8:	01000001 	tsteq	r0, r1
     8cc:	b8030503 	stmdalt	r3, {r0, r1, r8, sl}
     8d0:	0e200022 	cdpeq	0, 2, cr0, cr0, cr2, {1}
     8d4:	00000173 	andeq	r0, r0, r3, ror r1
     8d8:	03050401 	movweq	r0, #21505	; 0x5401
     8dc:	20002208 	andcs	r2, r0, r8, lsl #4
     8e0:	0005580f 	andeq	r5, r5, pc, lsl #16
     8e4:	bc0c0100 	stflts	f0, [ip], {-0}
     8e8:	46200007 	strtmi	r0, [r0], -r7
     8ec:	01000000 	mrseq	r0, (UNDEF: 0)
     8f0:	0001c39c 	muleq	r1, ip, r3
     8f4:	059e1000 	ldreq	r1, [lr]
     8f8:	0c010000 	stceq	0, cr0, [r1], {-0}
     8fc:	00000162 	andeq	r0, r0, r2, ror #2
     900:	00749102 	rsbseq	r9, r4, r2, lsl #2
     904:	00023c11 	andeq	r3, r2, r1, lsl ip
     908:	ac070100 	stfges	f0, [r7], {-0}
     90c:	10200007 	eorne	r0, r0, r7
     910:	01000000 	mrseq	r0, (UNDEF: 0)
     914:	059e109c 	ldreq	r1, [lr, #156]	; 0x9c
     918:	07010000 	streq	r0, [r1, -r0]
     91c:	00000162 	andeq	r0, r0, r2, ror #2
     920:	00749102 	rsbseq	r9, r4, r2, lsl #2
     924:	00052b00 	andeq	r2, r5, r0, lsl #22
     928:	14000400 	strne	r0, [r0], #-1024	; 0xfffffc00
     92c:	04000002 	streq	r0, [r0], #-2
     930:	00004801 	andeq	r4, r0, r1, lsl #16
     934:	07de0c00 	ldrbeq	r0, [lr, r0, lsl #24]
     938:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     93c:	02a82000 	adceq	r2, r8, #0
     940:	02880000 	addeq	r0, r8, #0
     944:	0c020000 	stceq	0, cr0, [r2], {-0}
     948:	004e0502 	subeq	r0, lr, r2, lsl #10
     94c:	d1030000 	mrsle	r0, (UNDEF: 3)
     950:	02000001 	andeq	r0, r0, #1
     954:	00004e07 	andeq	r4, r0, r7, lsl #28
     958:	f3030000 	vhadd.u8	d0, d3, d0
     95c:	02000002 	andeq	r0, r0, #2
     960:	00004e08 	andeq	r4, r0, r8, lsl #28
     964:	9d030400 	cfstrsls	mvf0, [r3, #-0]
     968:	02000009 	andeq	r0, r0, #9
     96c:	00005509 	andeq	r5, r0, r9, lsl #10
     970:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
     974:	031c0704 	tsteq	ip, #4, 14	; 0x100000
     978:	04050000 	streq	r0, [r5], #-0
     97c:	0000005b 	andeq	r0, r0, fp, asr r0
     980:	bb080104 	bllt	200d98 <startup-0x1fdff268>
     984:	06000002 	streq	r0, [r0], -r2
     988:	00000aef 	andeq	r0, r0, pc, ror #21
     98c:	00210a02 	eoreq	r0, r1, r2, lsl #20
     990:	90070000 	andls	r0, r7, r0
     994:	0c000002 	stceq	0, cr0, [r0], {2}
     998:	009e0603 	addseq	r0, lr, r3, lsl #12
     99c:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
     9a0:	03000004 	movweq	r0, #4
     9a4:	00009e07 	andeq	r9, r0, r7, lsl #28
     9a8:	34030000 	strcc	r0, [r3], #-0
     9ac:	03000004 	movweq	r0, #4
     9b0:	00009e08 	andeq	r9, r0, r8, lsl #28
     9b4:	8c030400 	cfstrshi	mvf0, [r3], {-0}
     9b8:	03000002 	movweq	r0, #2
     9bc:	00009e09 	andeq	r9, r0, r9, lsl #28
     9c0:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
     9c4:	00006204 	andeq	r6, r0, r4, lsl #4
     9c8:	075a0600 	ldrbeq	r0, [sl, -r0, lsl #12]
     9cc:	0a030000 	beq	c09d4 <startup-0x1ff3f62c>
     9d0:	0000006d 	andeq	r0, r0, sp, rrx
     9d4:	00014d07 	andeq	r4, r1, r7, lsl #26
     9d8:	06042400 	streq	r2, [r4], -r0, lsl #8
     9dc:	00000128 	andeq	r0, r0, r8, lsr #2
     9e0:	00052103 	andeq	r2, r5, r3, lsl #2
     9e4:	28070400 	stmdacs	r7, {sl}
     9e8:	00000001 	andeq	r0, r0, r1
     9ec:	0000e003 	andeq	lr, r0, r3
     9f0:	2e080400 	cfcpyscs	mvf0, mvf8
     9f4:	04000001 	streq	r0, [r0], #-1
     9f8:	00020703 	andeq	r0, r2, r3, lsl #14
     9fc:	2e090400 	cfcpyscs	mvf0, mvf9
     a00:	08000001 	stmdaeq	r0, {r0}
     a04:	00020003 	andeq	r0, r2, r3
     a08:	460c0400 	strmi	r0, [ip], -r0, lsl #8
     a0c:	0c000001 	stceq	0, cr0, [r0], {1}
     a10:	00023c03 	andeq	r3, r2, r3, lsl #24
     a14:	460d0400 	strmi	r0, [sp], -r0, lsl #8
     a18:	10000001 	andne	r0, r0, r1
     a1c:	00010803 	andeq	r0, r1, r3, lsl #16
     a20:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
     a24:	14000001 	strne	r0, [r0], #-1
     a28:	0003d103 	andeq	sp, r3, r3, lsl #2
     a2c:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
     a30:	18000001 	stmdane	r0, {r0}
     a34:	0004da03 	andeq	sp, r4, r3, lsl #20
     a38:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
     a3c:	1c000001 	stcne	0, cr0, [r0], {1}
     a40:	00002403 	andeq	r2, r0, r3, lsl #8
     a44:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
     a48:	20000001 	andcs	r0, r0, r1
     a4c:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
     a50:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     a54:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     a58:	40090074 	andmi	r0, r9, r4, ror r0
     a5c:	0a000001 	beq	a68 <startup-0x1ffff598>
     a60:	00000140 	andeq	r0, r0, r0, asr #2
     a64:	af040500 	svcge	0x00040500
     a68:	05000000 	streq	r0, [r0, #-0]
     a6c:	00013504 	andeq	r3, r1, r4, lsl #10
     a70:	014e0600 	cmpeq	lr, r0, lsl #12
     a74:	15040000 	strne	r0, [r4, #-0]
     a78:	000000af 	andeq	r0, r0, pc, lsr #1
     a7c:	0001620b 	andeq	r6, r1, fp, lsl #4
     a80:	00016200 	andeq	r6, r1, r0, lsl #4
     a84:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
     a88:	00014c04 	andeq	r4, r1, r4, lsl #24
     a8c:	03fb0d00 	mvnseq	r0, #0, 26
     a90:	1a040000 	bne	100a98 <startup-0x1feff568>
     a94:	00000157 	andeq	r0, r0, r7, asr r1
     a98:	0001bb0d 	andeq	fp, r1, sp, lsl #22
     a9c:	2e1b0400 	cfmulscs	mvf0, mvf11, mvf0
     aa0:	0b000001 	bleq	aac <startup-0x1ffff554>
     aa4:	0000005b 	andeq	r0, r0, fp, asr r0
     aa8:	0000018e 	andeq	r0, r0, lr, lsl #3
     aac:	00018e0e 	andeq	r8, r1, lr, lsl #28
     ab0:	04000b00 	streq	r0, [r0], #-2816	; 0xfffff500
     ab4:	00f40704 	rscseq	r0, r4, r4, lsl #14
     ab8:	a30f0000 	movwge	r0, #61440	; 0xf000
     abc:	05000007 	streq	r0, [r0, #-7]
     ac0:	00017e03 	andeq	r7, r1, r3, lsl #28
     ac4:	88030500 	stmdahi	r3, {r8, sl}
     ac8:	0f200055 	svceq	0x00200055
     acc:	0000069d 	muleq	r0, sp, r6
     ad0:	017e0306 	cmneq	lr, r6, lsl #6
     ad4:	03050000 	movweq	r0, #20480	; 0x5000
     ad8:	20005594 	mulcs	r0, r4, r5
     adc:	0006b80f 	andeq	fp, r6, pc, lsl #16
     ae0:	7e030700 	cdpvc	7, 0, cr0, cr3, cr0, {0}
     ae4:	05000001 	streq	r0, [r0, #-1]
     ae8:	0055a003 	subseq	sl, r5, r3
     aec:	06190f20 	ldreq	r0, [r9], -r0, lsr #30
     af0:	03080000 	movweq	r0, #32768	; 0x8000
     af4:	0000017e 	andeq	r0, r0, lr, ror r1
     af8:	55ac0305 	strpl	r0, [ip, #773]!	; 0x305
     afc:	c90f2000 	stmdbgt	pc, {sp}	; <UNPREDICTABLE>
     b00:	09000006 	stmdbeq	r0, {r1, r2}
     b04:	00017e03 	andeq	r7, r1, r3, lsl #28
     b08:	b8030500 	stmdalt	r3, {r8, sl}
     b0c:	0f200055 	svceq	0x00200055
     b10:	0000080b 	andeq	r0, r0, fp, lsl #16
     b14:	017e030a 	cmneq	lr, sl, lsl #6
     b18:	03050000 	movweq	r0, #20480	; 0x5000
     b1c:	200055c4 	andcs	r5, r0, r4, asr #11
     b20:	0007870f 	andeq	r8, r7, pc, lsl #14
     b24:	7e030b00 	vmlavc.f64	d0, d3, d0
     b28:	05000001 	streq	r0, [r0, #-1]
     b2c:	0055d003 	subseq	sp, r5, r3
     b30:	06ec0f20 	strbteq	r0, [ip], r0, lsr #30
     b34:	030c0000 	movweq	r0, #49152	; 0xc000
     b38:	0000017e 	andeq	r0, r0, lr, ror r1
     b3c:	55dc0305 	ldrbpl	r0, [ip, #773]	; 0x305
     b40:	290f2000 	stmdbcs	pc, {sp}	; <UNPREDICTABLE>
     b44:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
     b48:	00017e03 	andeq	r7, r1, r3, lsl #28
     b4c:	e8030500 	stmda	r3, {r8, sl}
     b50:	0f200055 	svceq	0x00200055
     b54:	00000657 	andeq	r0, r0, r7, asr r6
     b58:	017e030e 	cmneq	lr, lr, lsl #6
     b5c:	03050000 	movweq	r0, #20480	; 0x5000
     b60:	200055f4 	strdcs	r5, [r0], -r4
     b64:	0007390f 	andeq	r3, r7, pc, lsl #18
     b68:	7e030f00 	cdpvc	15, 0, cr0, cr3, cr0, {0}
     b6c:	05000001 	streq	r0, [r0, #-1]
     b70:	00560003 	subseq	r0, r6, r3
     b74:	05dd1020 	ldrbeq	r1, [sp, #32]
     b78:	11010000 	mrsne	r0, (UNDEF: 1)
     b7c:	0000009e 	muleq	r0, lr, r0
     b80:	25780305 	ldrbcs	r0, [r8, #-773]!	; 0xfffffcfb
     b84:	ad102000 	ldcge	0, cr2, [r0, #-0]
     b88:	01000005 	tsteq	r0, r5
     b8c:	00009e12 	andeq	r9, r0, r2, lsl lr
     b90:	90030500 	andls	r0, r3, r0, lsl #10
     b94:	10200025 	eorne	r0, r0, r5, lsr #32
     b98:	00000603 	andeq	r0, r0, r3, lsl #12
     b9c:	009e1301 	addseq	r1, lr, r1, lsl #6
     ba0:	03050000 	movweq	r0, #20480	; 0x5000
     ba4:	20002448 	andcs	r2, r0, r8, asr #8
     ba8:	0006e210 	andeq	lr, r6, r0, lsl r2
     bac:	9e140100 	muflss	f0, f4, f0
     bb0:	05000000 	streq	r0, [r0, #-0]
     bb4:	00258c03 	eoreq	r8, r5, r3, lsl #24
     bb8:	06ad1020 	strteq	r1, [sp], r0, lsr #32
     bbc:	15010000 	strne	r0, [r1, #-0]
     bc0:	0000009e 	muleq	r0, lr, r0
     bc4:	25640305 	strbcs	r0, [r4, #-773]!	; 0xfffffcfb
     bc8:	c5102000 	ldrgt	r2, [r0, #-0]
     bcc:	01000005 	tsteq	r0, r5
     bd0:	00009e16 	andeq	r9, r0, r6, lsl lr
     bd4:	58030500 	stmdapl	r3, {r8, sl}
     bd8:	10200024 	eorne	r0, r0, r4, lsr #32
     bdc:	0000063a 	andeq	r0, r0, sl, lsr r6
     be0:	009e1701 	addseq	r1, lr, r1, lsl #14
     be4:	03050000 	movweq	r0, #20480	; 0x5000
     be8:	20002588 	andcs	r2, r0, r8, lsl #11
     bec:	00076010 	andeq	r6, r7, r0, lsl r0
     bf0:	9e180100 	muflse	f0, f0, f0
     bf4:	05000000 	streq	r0, [r0, #-0]
     bf8:	00254403 	eoreq	r4, r5, r3, lsl #8
     bfc:	060e1020 	streq	r1, [lr], -r0, lsr #32
     c00:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
     c04:	0000009e 	muleq	r0, lr, r0
     c08:	24b00305 	ldrtcs	r0, [r0], #773	; 0x305
     c0c:	a3102000 	tstge	r0, #0
     c10:	01000005 	tsteq	r0, r5
     c14:	00009e1a 	andeq	r9, r0, sl, lsl lr
     c18:	60030500 	andvs	r0, r3, r0, lsl #10
     c1c:	10200025 	eorne	r0, r0, r5, lsr #32
     c20:	0000067b 	andeq	r0, r0, fp, ror r6
     c24:	009e1b01 	addseq	r1, lr, r1, lsl #22
     c28:	03050000 	movweq	r0, #20480	; 0x5000
     c2c:	20002568 	andcs	r2, r0, r8, ror #10
     c30:	0005f510 	andeq	pc, r5, r0, lsl r5	; <UNPREDICTABLE>
     c34:	621d0100 	andsvs	r0, sp, #0, 2
     c38:	05000000 	streq	r0, [r0, #-0]
     c3c:	00248003 	eoreq	r8, r4, r3
     c40:	076a1020 	strbeq	r1, [sl, -r0, lsr #32]!
     c44:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
     c48:	00000062 	andeq	r0, r0, r2, rrx
     c4c:	256c0305 	strbcs	r0, [ip, #-773]!	; 0xfffffcfb
     c50:	16102000 	ldrne	r2, [r0], -r0
     c54:	01000007 	tsteq	r0, r7
     c58:	0000621f 	andeq	r6, r0, pc, lsl r2
     c5c:	48030500 	stmdami	r3, {r8, sl}
     c60:	10200025 	eorne	r0, r0, r5, lsr #32
     c64:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
     c68:	00622001 	rsbeq	r2, r2, r1
     c6c:	03050000 	movweq	r0, #20480	; 0x5000
     c70:	20002474 	andcs	r2, r0, r4, ror r4
     c74:	0007b510 	andeq	fp, r7, r0, lsl r5
     c78:	62210100 	eorvs	r0, r1, #0, 2
     c7c:	05000000 	streq	r0, [r0, #-0]
     c80:	00257c03 	eoreq	r7, r5, r3, lsl #24
     c84:	05e71020 	strbeq	r1, [r7, #32]!
     c88:	22010000 	andcs	r0, r1, #0
     c8c:	00000062 	andeq	r0, r0, r2, rrx
     c90:	252c0305 	strcs	r0, [ip, #-773]!	; 0xfffffcfb
     c94:	fc102000 	ldc2	0, cr2, [r0], {-0}
     c98:	01000006 	tsteq	r0, r6
     c9c:	00006223 	andeq	r6, r0, r3, lsr #4
     ca0:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
     ca4:	10200024 	eorne	r0, r0, r4, lsr #32
     ca8:	000005cf 	andeq	r0, r0, pc, asr #11
     cac:	00622401 	rsbeq	r2, r2, r1, lsl #8
     cb0:	03050000 	movweq	r0, #20480	; 0x5000
     cb4:	2000245c 	andcs	r2, r0, ip, asr r4
     cb8:	00077810 	andeq	r7, r7, r0, lsl r8
     cbc:	62250100 	eorvs	r0, r5, #0, 2
     cc0:	05000000 	streq	r0, [r0, #-0]
     cc4:	00249803 	eoreq	r9, r4, r3, lsl #16
     cc8:	068f1020 	streq	r1, [pc], r0, lsr #32
     ccc:	26010000 	strcs	r0, [r1], -r0
     cd0:	00000062 	andeq	r0, r0, r2, rrx
     cd4:	25200305 	strcs	r0, [r0, #-773]!	; 0xfffffcfb
     cd8:	cf102000 	svcgt	0x00102000
     cdc:	01000007 	tsteq	r0, r7
     ce0:	00006227 	andeq	r6, r0, r7, lsr #4
     ce4:	54030500 	strpl	r0, [r3], #-1280	; 0xfffffb00
     ce8:	10200025 	eorne	r0, r0, r5, lsr #32
     cec:	000006da 	ldrdeq	r0, [r0], -sl
     cf0:	014c2a01 	cmpeq	ip, r1, lsl #20
     cf4:	03050000 	movweq	r0, #20480	; 0x5000
     cf8:	200024b4 			; <UNDEFINED> instruction: 0x200024b4
     cfc:	00075510 	andeq	r5, r7, r0, lsl r5
     d00:	a42b0100 	strtge	r0, [fp], #-256	; 0xffffff00
     d04:	05000000 	streq	r0, [r0, #-0]
     d08:	0024a403 	eoreq	sl, r4, r3, lsl #8
     d0c:	07c41020 	strbeq	r1, [r4, r0, lsr #32]
     d10:	2c010000 	stccs	0, cr0, [r1], {-0}
     d14:	000000a4 	andeq	r0, r0, r4, lsr #1
     d18:	24680305 	strbtcs	r0, [r8], #-773	; 0xfffffcfb
     d1c:	67102000 	ldrvs	r2, [r0, -r0]
     d20:	01000006 	tsteq	r0, r6
     d24:	0000a42d 	andeq	sl, r0, sp, lsr #8
     d28:	8c030500 	cfstr32hi	mvfx0, [r3], {-0}
     d2c:	10200024 	eorne	r0, r0, r4, lsr #32
     d30:	0000070b 	andeq	r0, r0, fp, lsl #14
     d34:	00a42e01 	adceq	r2, r4, r1, lsl #28
     d38:	03050000 	movweq	r0, #20480	; 0x5000
     d3c:	20002538 	andcs	r2, r0, r8, lsr r5
     d40:	00079810 	andeq	r9, r7, r0, lsl r8
     d44:	a42f0100 	strtge	r0, [pc], #-256	; d4c <startup-0x1ffff2b4>
     d48:	05000000 	streq	r0, [r0, #-0]
     d4c:	0024d803 	eoreq	sp, r4, r3, lsl #16
     d50:	00a40b20 	adceq	r0, r4, r0, lsr #22
     d54:	043c0000 	ldrteq	r0, [ip], #-0
     d58:	8e0e0000 	cdphi	0, 0, cr0, cr14, cr0, {0}
     d5c:	04000001 	streq	r0, [r0], #-1
     d60:	074a1000 	strbeq	r1, [sl, -r0]
     d64:	30010000 	andcc	r0, r1, r0
     d68:	0000042c 	andeq	r0, r0, ip, lsr #8
     d6c:	24e40305 	strbtcs	r0, [r4], #773	; 0x305
     d70:	2f112000 	svccs	0x00112000
     d74:	01000007 	tsteq	r0, r7
     d78:	0009885f 	andeq	r8, r9, pc, asr r8
     d7c:	00012420 	andeq	r2, r1, r0, lsr #8
     d80:	829c0100 	addshi	r0, ip, #0, 2
     d84:	12000004 	andne	r0, r0, #4
     d88:	000006da 	ldrdeq	r0, [r0], -sl
     d8c:	01625f01 	cmneq	r2, r1, lsl #30
     d90:	91020000 	mrsls	r0, (UNDEF: 2)
     d94:	07250f6c 	streq	r0, [r5, -ip, ror #30]!
     d98:	60010000 	andvs	r0, r1, r0
     d9c:	0000012e 	andeq	r0, r0, lr, lsr #2
     da0:	560c0305 	strpl	r0, [ip], -r5, lsl #6
     da4:	13002000 	movwne	r2, #0
     da8:	000003ef 	andeq	r0, r0, pc, ror #7
     dac:	08043101 	stmdaeq	r4, {r0, r8, ip, sp}
     db0:	01842000 	orreq	r2, r4, r0
     db4:	9c010000 	stcls	0, cr0, [r1], {-0}
     db8:	0006720f 	andeq	r7, r6, pc, lsl #4
     dbc:	9e320100 	rsflss	f0, f2, f0
     dc0:	02000000 	andeq	r0, r0, #0
     dc4:	450f7491 	strmi	r7, [pc, #-1169]	; 93b <startup-0x1ffff6c5>
     dc8:	01000006 	tsteq	r0, r6
     dcc:	00009e36 	andeq	r9, r0, r6, lsr lr
     dd0:	70910200 	addsvc	r0, r1, r0, lsl #4
     dd4:	0006860f 	andeq	r8, r6, pc, lsl #12
     dd8:	9e3a0100 	rsflse	f0, f2, f0
     ddc:	02000000 	andeq	r0, r0, #0
     de0:	4e0f6c91 	mcrmi	12, 0, r6, cr15, cr1, {4}
     de4:	01000006 	tsteq	r0, r6
     de8:	00009e3e 	andeq	r9, r0, lr, lsr lr
     dec:	68910200 	ldmvs	r1, {r9}
     df0:	00018e0f 	andeq	r8, r1, pc, lsl #28
     df4:	9e420100 	dvflss	f0, f2, f0
     df8:	02000000 	andeq	r0, r0, #0
     dfc:	0a0f6491 	beq	3da048 <startup-0x1fc25fb8>
     e00:	01000000 	mrseq	r0, (UNDEF: 0)
     e04:	00009e46 	andeq	r9, r0, r6, asr #28
     e08:	60910200 	addsvs	r0, r1, r0, lsl #4
     e0c:	00019f0f 	andeq	r9, r1, pc, lsl #30
     e10:	9e4a0100 	dvflse	f0, f2, f0
     e14:	02000000 	andeq	r0, r0, #0
     e18:	360f5c91 			; <UNDEFINED> instruction: 0x360f5c91
     e1c:	01000000 	mrseq	r0, (UNDEF: 0)
     e20:	00009e4e 	andeq	r9, r0, lr, asr #28
     e24:	58910200 	ldmpl	r1, {r9}
     e28:	00003f0f 	andeq	r3, r0, pc, lsl #30
     e2c:	9e520100 	rdflss	f0, f2, f0
     e30:	02000000 	andeq	r0, r0, #0
     e34:	c80f5491 	stmdagt	pc, {r0, r4, r7, sl, ip, lr}	; <UNPREDICTABLE>
     e38:	01000001 	tsteq	r0, r1
     e3c:	00009e56 	andeq	r9, r0, r6, asr lr
     e40:	50910200 	addspl	r0, r1, r0, lsl #4
     e44:	0005090f 	andeq	r0, r5, pc, lsl #18
     e48:	9e5a0100 	rdflse	f0, f2, f0
     e4c:	02000000 	andeq	r0, r0, #0
     e50:	00004c91 	muleq	r0, r1, ip
     e54:	000001d5 	ldrdeq	r0, [r0], -r5
     e58:	03140004 	tsteq	r4, #4
     e5c:	01040000 	mrseq	r0, (UNDEF: 4)
     e60:	00000048 	andeq	r0, r0, r8, asr #32
     e64:	0008380c 	andeq	r3, r8, ip, lsl #16
     e68:	000aac00 	andeq	sl, sl, r0, lsl #24
     e6c:	0000d820 	andeq	sp, r0, r0, lsr #16
     e70:	00041000 	andeq	r1, r4, r0
     e74:	07040200 	streq	r0, [r4, -r0, lsl #4]
     e78:	0000031c 	andeq	r0, r0, ip, lsl r3
     e7c:	16070202 	strne	r0, [r7], -r2, lsl #4
     e80:	02000003 	andeq	r0, r0, #3
     e84:	02bb0801 	adcseq	r0, fp, #65536	; 0x10000
     e88:	0c030000 	stceq	0, cr0, [r3], {-0}
     e8c:	00630502 	rsbeq	r0, r3, r2, lsl #10
     e90:	d1040000 	mrsle	r0, (UNDEF: 4)
     e94:	02000001 	andeq	r0, r0, #1
     e98:	00002107 	andeq	r2, r0, r7, lsl #2
     e9c:	f3040000 	vhadd.u8	d0, d4, d0
     ea0:	02000002 	andeq	r0, r0, #2
     ea4:	00002108 	andeq	r2, r0, r8, lsl #2
     ea8:	9d040400 	cfstrsls	mvf0, [r4, #-0]
     eac:	02000009 	andeq	r0, r0, #9
     eb0:	00006309 	andeq	r6, r0, r9, lsl #6
     eb4:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
     eb8:	00002f04 	andeq	r2, r0, r4, lsl #30
     ebc:	0aef0600 	beq	ffbc26c4 <firstTime.4076+0xdfbbd0b8>
     ec0:	0a020000 	beq	80ec8 <startup-0x1ff7f138>
     ec4:	00000036 	andeq	r0, r0, r6, lsr r0
     ec8:	00029007 	andeq	r9, r2, r7
     ecc:	06030c00 	streq	r0, [r3], -r0, lsl #24
     ed0:	000000a5 	andeq	r0, r0, r5, lsr #1
     ed4:	00041e04 	andeq	r1, r4, r4, lsl #28
     ed8:	a5070300 	strge	r0, [r7, #-768]	; 0xfffffd00
     edc:	00000000 	andeq	r0, r0, r0
     ee0:	00043404 	andeq	r3, r4, r4, lsl #8
     ee4:	a5080300 	strge	r0, [r8, #-768]	; 0xfffffd00
     ee8:	04000000 	streq	r0, [r0], #-0
     eec:	00028c04 	andeq	r8, r2, r4, lsl #24
     ef0:	a5090300 	strge	r0, [r9, #-768]	; 0xfffffd00
     ef4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     ef8:	69040500 	stmdbvs	r4, {r8, sl}
     efc:	06000000 	streq	r0, [r0], -r0
     f00:	0000075a 	andeq	r0, r0, sl, asr r7
     f04:	00740a03 	rsbseq	r0, r4, r3, lsl #20
     f08:	4d070000 	stcmi	0, cr0, [r7, #-0]
     f0c:	24000001 	strcs	r0, [r0], #-1
     f10:	012f0604 			; <UNDEFINED> instruction: 0x012f0604
     f14:	21040000 	mrscs	r0, (UNDEF: 4)
     f18:	04000005 	streq	r0, [r0], #-5
     f1c:	00012f07 	andeq	r2, r1, r7, lsl #30
     f20:	e0040000 	and	r0, r4, r0
     f24:	04000000 	streq	r0, [r0], #-0
     f28:	00013508 	andeq	r3, r1, r8, lsl #10
     f2c:	07040400 	streq	r0, [r4, -r0, lsl #8]
     f30:	04000002 	streq	r0, [r0], #-2
     f34:	00013509 	andeq	r3, r1, r9, lsl #10
     f38:	00040800 	andeq	r0, r4, r0, lsl #16
     f3c:	04000002 	streq	r0, [r0], #-2
     f40:	00014d0c 	andeq	r4, r1, ip, lsl #26
     f44:	3c040c00 	stccc	12, cr0, [r4], {-0}
     f48:	04000002 	streq	r0, [r0], #-2
     f4c:	00014d0d 	andeq	r4, r1, sp, lsl #26
     f50:	08041000 	stmdaeq	r4, {ip}
     f54:	04000001 	streq	r0, [r0], #-1
     f58:	00013510 	andeq	r3, r1, r0, lsl r5
     f5c:	d1041400 	tstle	r4, r0, lsl #8
     f60:	04000003 	streq	r0, [r0], #-3
     f64:	00013511 	andeq	r3, r1, r1, lsl r5
     f68:	da041800 	ble	106f70 <startup-0x1fef9090>
     f6c:	04000004 	streq	r0, [r0], #-4
     f70:	00013512 	andeq	r3, r1, r2, lsl r5
     f74:	24041c00 	strcs	r1, [r4], #-3072	; 0xfffff400
     f78:	04000000 	streq	r0, [r0], #-0
     f7c:	00013513 	andeq	r3, r1, r3, lsl r5
     f80:	05002000 	streq	r2, [r0, #-0]
     f84:	0000ab04 	andeq	sl, r0, r4, lsl #22
     f88:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
     f8c:	00746e69 	rsbseq	r6, r4, r9, ror #28
     f90:	00014709 	andeq	r4, r1, r9, lsl #14
     f94:	01470a00 	cmpeq	r7, r0, lsl #20
     f98:	05000000 	streq	r0, [r0, #-0]
     f9c:	0000b604 	andeq	fp, r0, r4, lsl #12
     fa0:	3c040500 	cfstr32cc	mvfx0, [r4], {-0}
     fa4:	06000001 	streq	r0, [r0], -r1
     fa8:	0000014e 	andeq	r0, r0, lr, asr #2
     fac:	00b61504 	adcseq	r1, r6, r4, lsl #10
     fb0:	690b0000 	stmdbvs	fp, {}	; <UNPREDICTABLE>
     fb4:	69000001 	stmdbvs	r0, {r0}
     fb8:	0c000001 	stceq	0, cr0, [r0], {1}
     fbc:	53040500 	movwpl	r0, #17664	; 0x4500
     fc0:	0d000001 	stceq	0, cr0, [r0, #-4]
     fc4:	000003fb 	strdeq	r0, [r0], -fp
     fc8:	015e1a04 	cmpeq	lr, r4, lsl #20
     fcc:	bb0d0000 	bllt	340fd4 <startup-0x1fcbf02c>
     fd0:	04000001 	streq	r0, [r0], #-1
     fd4:	0001351b 	andeq	r3, r1, fp, lsl r5
     fd8:	08670e00 	stmdaeq	r7!, {r9, sl, fp}^
     fdc:	06010000 	streq	r0, [r1], -r0
     fe0:	20000aac 	andcs	r0, r0, ip, lsr #21
     fe4:	000000d8 	ldrdeq	r0, [r0], -r8
     fe8:	9e0f9c01 	cdpls	12, 0, cr9, cr15, cr1, {0}
     fec:	01000005 	tsteq	r0, r5
     ff0:	00016906 	andeq	r6, r1, r6, lsl #18
     ff4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     ff8:	00081b10 	andeq	r1, r8, r0, lsl fp
     ffc:	350d0100 	strcc	r0, [sp, #-256]	; 0xffffff00
    1000:	05000001 	streq	r0, [r0, #-1]
    1004:	00220c03 	eoreq	r0, r2, r3, lsl #24
    1008:	082a1020 	stmdaeq	sl!, {r5, ip}
    100c:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    1010:	00000135 	andeq	r0, r0, r5, lsr r1
    1014:	22140305 	andscs	r0, r4, #335544320	; 0x14000000
    1018:	e4102000 	ldr	r2, [r0], #-0
    101c:	01000004 	tsteq	r0, r4
    1020:	0001350f 	andeq	r3, r1, pc, lsl #10
    1024:	10030500 	andne	r0, r3, r0, lsl #10
    1028:	00200022 	eoreq	r0, r0, r2, lsr #32
    102c:	00089f00 	andeq	r9, r8, r0, lsl #30
    1030:	e2000400 	and	r0, r0, #0, 8
    1034:	04000003 	streq	r0, [r0], #-3
    1038:	00004801 	andeq	r4, r0, r1, lsl #16
    103c:	095f0c00 	ldmdbeq	pc, {sl, fp}^	; <UNPREDICTABLE>
    1040:	0b840000 	bleq	fe101048 <firstTime.4076+0xde0fba3c>
    1044:	0e442000 	cdpeq	0, 4, cr2, cr4, cr0, {0}
    1048:	04b10000 	ldrteq	r0, [r1], #0
    104c:	0c020000 	stceq	0, cr0, [r2], {-0}
    1050:	004e0502 	subeq	r0, lr, r2, lsl #10
    1054:	d1030000 	mrsle	r0, (UNDEF: 3)
    1058:	02000001 	andeq	r0, r0, #1
    105c:	00004e07 	andeq	r4, r0, r7, lsl #28
    1060:	f3030000 	vhadd.u8	d0, d3, d0
    1064:	02000002 	andeq	r0, r0, #2
    1068:	00004e08 	andeq	r4, r0, r8, lsl #28
    106c:	9d030400 	cfstrsls	mvf0, [r3, #-0]
    1070:	02000009 	andeq	r0, r0, #9
    1074:	00005509 	andeq	r5, r0, r9, lsl #10
    1078:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    107c:	031c0704 	tsteq	ip, #4, 14	; 0x100000
    1080:	04050000 	streq	r0, [r5], #-0
    1084:	0000005b 	andeq	r0, r0, fp, asr r0
    1088:	bb080104 	bllt	2014a0 <startup-0x1fdfeb60>
    108c:	06000002 	streq	r0, [r0], -r2
    1090:	00000aef 	andeq	r0, r0, pc, ror #21
    1094:	00210a02 	eoreq	r0, r1, r2, lsl #20
    1098:	90070000 	andls	r0, r7, r0
    109c:	0c000002 	stceq	0, cr0, [r0], {2}
    10a0:	009e0603 	addseq	r0, lr, r3, lsl #12
    10a4:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
    10a8:	03000004 	movweq	r0, #4
    10ac:	00009e07 	andeq	r9, r0, r7, lsl #28
    10b0:	34030000 	strcc	r0, [r3], #-0
    10b4:	03000004 	movweq	r0, #4
    10b8:	00009e08 	andeq	r9, r0, r8, lsl #28
    10bc:	8c030400 	cfstrshi	mvf0, [r3], {-0}
    10c0:	03000002 	movweq	r0, #2
    10c4:	00009e09 	andeq	r9, r0, r9, lsl #28
    10c8:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    10cc:	00006204 	andeq	r6, r0, r4, lsl #4
    10d0:	075a0600 	ldrbeq	r0, [sl, -r0, lsl #12]
    10d4:	0a030000 	beq	c10dc <startup-0x1ff3ef24>
    10d8:	0000006d 	andeq	r0, r0, sp, rrx
    10dc:	00014d07 	andeq	r4, r1, r7, lsl #26
    10e0:	06042400 	streq	r2, [r4], -r0, lsl #8
    10e4:	00000128 	andeq	r0, r0, r8, lsr #2
    10e8:	00052103 	andeq	r2, r5, r3, lsl #2
    10ec:	28070400 	stmdacs	r7, {sl}
    10f0:	00000001 	andeq	r0, r0, r1
    10f4:	0000e003 	andeq	lr, r0, r3
    10f8:	2e080400 	cfcpyscs	mvf0, mvf8
    10fc:	04000001 	streq	r0, [r0], #-1
    1100:	00020703 	andeq	r0, r2, r3, lsl #14
    1104:	2e090400 	cfcpyscs	mvf0, mvf9
    1108:	08000001 	stmdaeq	r0, {r0}
    110c:	00020003 	andeq	r0, r2, r3
    1110:	460c0400 	strmi	r0, [ip], -r0, lsl #8
    1114:	0c000001 	stceq	0, cr0, [r0], {1}
    1118:	00023c03 	andeq	r3, r2, r3, lsl #24
    111c:	460d0400 	strmi	r0, [sp], -r0, lsl #8
    1120:	10000001 	andne	r0, r0, r1
    1124:	00010803 	andeq	r0, r1, r3, lsl #16
    1128:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
    112c:	14000001 	strne	r0, [r0], #-1
    1130:	0003d103 	andeq	sp, r3, r3, lsl #2
    1134:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
    1138:	18000001 	stmdane	r0, {r0}
    113c:	0004da03 	andeq	sp, r4, r3, lsl #20
    1140:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
    1144:	1c000001 	stcne	0, cr0, [r0], {1}
    1148:	00002403 	andeq	r2, r0, r3, lsl #8
    114c:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
    1150:	20000001 	andcs	r0, r0, r1
    1154:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    1158:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    115c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1160:	40090074 	andmi	r0, r9, r4, ror r0
    1164:	0a000001 	beq	1170 <startup-0x1fffee90>
    1168:	00000140 	andeq	r0, r0, r0, asr #2
    116c:	af040500 	svcge	0x00040500
    1170:	05000000 	streq	r0, [r0, #-0]
    1174:	00013504 	andeq	r3, r1, r4, lsl #10
    1178:	014e0600 	cmpeq	lr, r0, lsl #12
    117c:	15040000 	strne	r0, [r4, #-0]
    1180:	000000af 	andeq	r0, r0, pc, lsr #1
    1184:	0001620b 	andeq	r6, r1, fp, lsl #4
    1188:	00016200 	andeq	r6, r1, r0, lsl #4
    118c:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    1190:	00014c04 	andeq	r4, r1, r4, lsl #24
    1194:	03fb0d00 	mvnseq	r0, #0, 26
    1198:	1a040000 	bne	1011a0 <startup-0x1fefee60>
    119c:	00000157 	andeq	r0, r0, r7, asr r1
    11a0:	0001bb0d 	andeq	fp, r1, sp, lsl #22
    11a4:	2e1b0400 	cfmulscs	mvf0, mvf11, mvf0
    11a8:	06000001 	streq	r0, [r0], -r1
    11ac:	00000180 	andeq	r0, r0, r0, lsl #3
    11b0:	005b2405 	subseq	r2, fp, r5, lsl #8
    11b4:	7e0b0000 	cdpvc	0, 0, cr0, cr11, cr0, {0}
    11b8:	9a000001 	bls	11c4 <startup-0x1fffee3c>
    11bc:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    11c0:	0000019a 	muleq	r0, sl, r1
    11c4:	040003ff 	streq	r0, [r0], #-1023	; 0xfffffc01
    11c8:	00f40704 	rscseq	r0, r4, r4, lsl #14
    11cc:	d30d0000 	movwle	r0, #53248	; 0xd000
    11d0:	05000008 	streq	r0, [r0, #-8]
    11d4:	0001892b 	andeq	r8, r1, fp, lsr #18
    11d8:	01160d00 	tsteq	r6, r0, lsl #26
    11dc:	2c050000 	stccs	0, cr0, [r5], {-0}
    11e0:	00000189 	andeq	r0, r0, r9, lsl #3
    11e4:	0004ab0d 	andeq	sl, r4, sp, lsl #22
    11e8:	892d0500 	pushhi	{r8, sl}
    11ec:	0d000001 	stceq	0, cr0, [r0, #-4]
    11f0:	000001e8 	andeq	r0, r0, r8, ror #3
    11f4:	01892e05 	orreq	r2, r9, r5, lsl #28
    11f8:	7b0d0000 	blvc	341200 <startup-0x1fcbee00>
    11fc:	05000004 	streq	r0, [r0, #-4]
    1200:	0001892f 	andeq	r8, r1, pc, lsr #18
    1204:	03c20d00 	biceq	r0, r2, #0, 26
    1208:	30050000 	andcc	r0, r5, r0
    120c:	00000189 	andeq	r0, r0, r9, lsl #3
    1210:	0001700d 	andeq	r7, r1, sp
    1214:	89310500 	ldmdbhi	r1!, {r8, sl}
    1218:	0f000001 	svceq	0x00000001
    121c:	000001ac 	andeq	r0, r0, ip, lsr #3
    1220:	03052b01 	movweq	r2, #23297	; 0x5b01
    1224:	20003594 	mulcs	r0, r4, r5
    1228:	0001b70f 	andeq	fp, r1, pc, lsl #14
    122c:	052c0100 	streq	r0, [ip, #-256]!	; 0xffffff00
    1230:	00299403 	eoreq	r9, r9, r3, lsl #8
    1234:	01c20f20 	biceq	r0, r2, r0, lsr #30
    1238:	2d010000 	stccs	0, cr0, [r1, #-0]
    123c:	31940305 	orrscc	r0, r4, r5, lsl #6
    1240:	cd0f2000 	stcgt	0, cr2, [pc, #-0]	; 1248 <startup-0x1fffedb8>
    1244:	01000001 	tsteq	r0, r1
    1248:	9403052e 	strls	r0, [r3], #-1326	; 0xfffffad2
    124c:	0f200039 	svceq	0x00200039
    1250:	000001a1 	andeq	r0, r0, r1, lsr #3
    1254:	03052f01 	movweq	r2, #24321	; 0x5f01
    1258:	20002d94 	mulcs	r0, r4, sp
    125c:	0001d810 	andeq	sp, r1, r0, lsl r8
    1260:	03050100 	movweq	r0, #20736	; 0x5100
    1264:	20002594 	mulcs	r0, r4, r5
    1268:	0001e310 	andeq	lr, r1, r0, lsl r3
    126c:	03050100 	movweq	r0, #20736	; 0x5100
    1270:	20003d94 	mulcs	r0, r4, sp
    1274:	00090911 	andeq	r0, r9, r1, lsl r9
    1278:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
    127c:	2000195e 	andcs	r1, r0, lr, asr r9
    1280:	0000006a 	andeq	r0, r0, sl, rrx
    1284:	026d9c01 	rsbeq	r9, sp, #256	; 0x100
    1288:	f0120000 			; <UNDEFINED> instruction: 0xf0120000
    128c:	01000009 	tsteq	r0, r9
    1290:	012e01a8 	smulwbeq	lr, r8, r1
    1294:	91020000 	mrsls	r0, (UNDEF: 2)
    1298:	9a110074 	bls	441470 <startup-0x1fbbeb90>
    129c:	01000008 	tsteq	r0, r8
    12a0:	18dc01a0 	ldmne	ip, {r5, r7, r8}^
    12a4:	00822000 	addeq	r2, r2, r0
    12a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    12ac:	000002a2 	andeq	r0, r0, r2, lsr #5
    12b0:	0008e412 	andeq	lr, r8, r2, lsl r4
    12b4:	01a00100 	lsleq	r0, r0, #2
    12b8:	00000162 	andeq	r0, r0, r2, ror #2
    12bc:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    12c0:	00000110 	andeq	r0, r0, r0, lsl r1
    12c4:	2e01a101 	mvfcss	f2, f1
    12c8:	02000001 	andeq	r0, r0, #1
    12cc:	14007491 	strne	r7, [r0], #-1169	; 0xfffffb6f
    12d0:	000009a8 	andeq	r0, r0, r8, lsr #19
    12d4:	d4019601 	strle	r9, [r1], #-1537	; 0xfffff9ff
    12d8:	08200017 	stmdaeq	r0!, {r0, r1, r2, r4}
    12dc:	01000001 	tsteq	r0, r1
    12e0:	0002c69c 	muleq	r2, ip, r6
    12e4:	00691500 	rsbeq	r1, r9, r0, lsl #10
    12e8:	2e019701 	cdpcs	7, 0, cr9, cr1, cr1, {0}
    12ec:	02000001 	andeq	r0, r0, #1
    12f0:	11007491 			; <UNDEFINED> instruction: 0x11007491
    12f4:	0000093a 	andeq	r0, r0, sl, lsr r9
    12f8:	a4017001 	strge	r7, [r1], #-1
    12fc:	30200016 	eorcc	r0, r0, r6, lsl r0
    1300:	01000001 	tsteq	r0, r1
    1304:	00033a9c 	muleq	r3, ip, sl
    1308:	00781500 	rsbseq	r1, r8, r0, lsl #10
    130c:	2e017101 	adfcss	f7, f1, f1
    1310:	02000001 	andeq	r0, r0, #1
    1314:	79156c91 	ldmdbvc	r5, {r0, r4, r7, sl, fp, sp, lr}
    1318:	01720100 	cmneq	r2, r0, lsl #2
    131c:	0000012e 	andeq	r0, r0, lr, lsr #2
    1320:	13689102 	cmnne	r8, #-2147483648	; 0x80000000
    1324:	000001d1 	ldrdeq	r0, [r0], -r1
    1328:	2e017301 	cdpcs	3, 0, cr7, cr1, cr1, {0}
    132c:	02000001 	andeq	r0, r0, #1
    1330:	f3136491 	vqshl.u16	d6, d1, d19
    1334:	01000002 	tsteq	r0, r2
    1338:	012e0174 			; <UNDEFINED> instruction: 0x012e0174
    133c:	91020000 	mrsls	r0, (UNDEF: 2)
    1340:	32781560 	rsbscc	r1, r8, #96, 10	; 0x18000000
    1344:	01760100 	cmneq	r6, r0, lsl #2
    1348:	0000012e 	andeq	r0, r0, lr, lsr #2
    134c:	165c9102 	ldrbne	r9, [ip], -r2, lsl #2
    1350:	7a010069 	bvc	414fc <startup-0x1ffbeb04>
    1354:	00012e01 	andeq	r2, r1, r1, lsl #28
    1358:	006b1500 	rsbeq	r1, fp, r0, lsl #10
    135c:	2e017b01 	vmlacs.f64	d7, d1, d1
    1360:	02000001 	andeq	r0, r0, #1
    1364:	11005891 			; <UNDEFINED> instruction: 0x11005891
    1368:	00000a3a 	andeq	r0, r0, sl, lsr sl
    136c:	52016501 	andpl	r6, r1, #4194304	; 0x400000
    1370:	52200016 	eorpl	r0, r0, #22
    1374:	01000000 	mrseq	r0, (UNDEF: 0)
    1378:	0003a39c 	muleq	r3, ip, r3
    137c:	00781700 	rsbseq	r1, r8, r0, lsl #14
    1380:	2e016501 	cfsh32cs	mvfx6, mvfx1, #1
    1384:	02000001 	andeq	r0, r0, #1
    1388:	79176c91 	ldmdbvc	r7, {r0, r4, r7, sl, fp, sp, lr}
    138c:	01650100 	cmneq	r5, r0, lsl #2
    1390:	0000012e 	andeq	r0, r0, lr, lsr #2
    1394:	12689102 	rsbne	r9, r8, #-2147483648	; 0x80000000
    1398:	000001d1 	ldrdeq	r0, [r0], -r1
    139c:	2e016501 	cfsh32cs	mvfx6, mvfx1, #1
    13a0:	02000001 	andeq	r0, r0, #1
    13a4:	f3126491 	vqshl.u16	d6, d1, d18
    13a8:	01000002 	tsteq	r0, r2
    13ac:	012e0165 			; <UNDEFINED> instruction: 0x012e0165
    13b0:	91020000 	mrsls	r0, (UNDEF: 2)
    13b4:	00691560 	rsbeq	r1, r9, r0, ror #10
    13b8:	2e016601 	cfmadd32cs	mvax0, mvfx6, mvfx1, mvfx1
    13bc:	02000001 	andeq	r0, r0, #1
    13c0:	6a157491 	bvs	55e60c <startup-0x1faa19f4>
    13c4:	01670100 	cmneq	r7, r0, lsl #2
    13c8:	0000012e 	andeq	r0, r0, lr, lsr #2
    13cc:	00709102 	rsbseq	r9, r0, r2, lsl #2
    13d0:	0009dd11 	andeq	sp, r9, r1, lsl sp
    13d4:	015b0100 	cmpeq	fp, r0, lsl #2
    13d8:	20001600 	andcs	r1, r0, r0, lsl #12
    13dc:	00000052 	andeq	r0, r0, r2, asr r0
    13e0:	040c9c01 	streq	r9, [ip], #-3073	; 0xfffff3ff
    13e4:	78170000 	ldmdavc	r7, {}	; <UNPREDICTABLE>
    13e8:	015b0100 	cmpeq	fp, r0, lsl #2
    13ec:	0000012e 	andeq	r0, r0, lr, lsr #2
    13f0:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
    13f4:	5b010079 	blpl	415e0 <startup-0x1ffbea20>
    13f8:	00012e01 	andeq	r2, r1, r1, lsl #28
    13fc:	68910200 	ldmvs	r1, {r9}
    1400:	0001d112 	andeq	sp, r1, r2, lsl r1
    1404:	015b0100 	cmpeq	fp, r0, lsl #2
    1408:	0000012e 	andeq	r0, r0, lr, lsr #2
    140c:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
    1410:	000002f3 	strdeq	r0, [r0], -r3
    1414:	2e015b01 	vmlacs.f64	d5, d1, d1
    1418:	02000001 	andeq	r0, r0, #1
    141c:	69156091 	ldmdbvs	r5, {r0, r4, r7, sp, lr}
    1420:	015c0100 	cmpeq	ip, r0, lsl #2
    1424:	0000012e 	andeq	r0, r0, lr, lsr #2
    1428:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    142c:	5d01006a 	stcpl	0, cr0, [r1, #-424]	; 0xfffffe58
    1430:	00012e01 	andeq	r2, r1, r1, lsl #28
    1434:	70910200 	addsvc	r0, r1, r0, lsl #4
    1438:	09141100 	ldmdbeq	r4, {r8, ip}
    143c:	45010000 	strmi	r0, [r1, #-0]
    1440:	0014e601 	andseq	lr, r4, r1, lsl #12
    1444:	00011a20 	andeq	r1, r1, r0, lsr #20
    1448:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
    144c:	17000004 	strne	r0, [r0, -r4]
    1450:	45010073 	strmi	r0, [r1, #-115]	; 0xffffff8d
    1454:	00009e01 	andeq	r9, r0, r1, lsl #28
    1458:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    145c:	01007817 	tsteq	r0, r7, lsl r8
    1460:	012e0145 			; <UNDEFINED> instruction: 0x012e0145
    1464:	91020000 	mrsls	r0, (UNDEF: 2)
    1468:	00791750 	rsbseq	r1, r9, r0, asr r7
    146c:	2e014501 	cfsh32cs	mvfx4, mvfx1, #1
    1470:	02000001 	andeq	r0, r0, #1
    1474:	73174c91 	tstvc	r7, #37120	; 0x9100
    1478:	01007465 	tsteq	r0, r5, ror #8
    147c:	012e0145 			; <UNDEFINED> instruction: 0x012e0145
    1480:	91020000 	mrsls	r0, (UNDEF: 2)
    1484:	09a21248 	stmibeq	r2!, {r3, r6, r9, ip}
    1488:	45010000 	strmi	r0, [r1, #-0]
    148c:	00012e01 	andeq	r2, r1, r1, lsl #28
    1490:	00910200 	addseq	r0, r1, r0, lsl #4
    1494:	01006915 	tsteq	r0, r5, lsl r9
    1498:	012e0146 			; <UNDEFINED> instruction: 0x012e0146
    149c:	91020000 	mrsls	r0, (UNDEF: 2)
    14a0:	006a156c 	rsbeq	r1, sl, ip, ror #10
    14a4:	2e014601 	cfmadd32cs	mvax0, mvfx4, mvfx1, mvfx1
    14a8:	02000001 	andeq	r0, r0, #1
    14ac:	6b156891 	blvs	55b6f8 <startup-0x1faa4908>
    14b0:	01460100 	mrseq	r0, (UNDEF: 86)
    14b4:	0000012e 	andeq	r0, r0, lr, lsr #2
    14b8:	13649102 	cmnne	r4, #-2147483648	; 0x80000000
    14bc:	00000a15 	andeq	r0, r0, r5, lsl sl
    14c0:	2e014601 	cfmadd32cs	mvax0, mvfx4, mvfx1, mvfx1
    14c4:	02000001 	andeq	r0, r0, #1
    14c8:	1e186091 	mrcne	0, 0, r6, cr8, cr1, {4}
    14cc:	bc200015 	stclt	0, cr0, [r0], #-84	; 0xffffffac
    14d0:	13000000 	movwne	r0, #0
    14d4:	00000a10 	andeq	r0, r0, r0, lsl sl
    14d8:	5b014d01 	blpl	548e4 <startup-0x1ffab71c>
    14dc:	02000000 	andeq	r0, r0, #0
    14e0:	00005f91 	muleq	r0, r1, pc	; <UNPREDICTABLE>
    14e4:	0008e911 	andeq	lr, r8, r1, lsl r9
    14e8:	01300100 	teqeq	r0, r0, lsl #2
    14ec:	20001410 	andcs	r1, r0, r0, lsl r4
    14f0:	000000d6 	ldrdeq	r0, [r0], -r6
    14f4:	05209c01 	streq	r9, [r0, #-3073]!	; 0xfffff3ff
    14f8:	86120000 	ldrhi	r0, [r2], -r0
    14fc:	01000008 	tsteq	r0, r8
    1500:	05200130 	streq	r0, [r0, #-304]!	; 0xfffffed0
    1504:	91020000 	mrsls	r0, (UNDEF: 2)
    1508:	00691564 	rsbeq	r1, r9, r4, ror #10
    150c:	7e013101 	adfvcs	f3, f1, f1
    1510:	02000001 	andeq	r0, r0, #1
    1514:	6a157791 	bvs	55f360 <startup-0x1faa0ca0>
    1518:	01310100 	teqeq	r1, r0, lsl #2
    151c:	0000017e 	andeq	r0, r0, lr, ror r1
    1520:	13769102 	cmnne	r6, #-2147483648	; 0x80000000
    1524:	00000c46 	andeq	r0, r0, r6, asr #24
    1528:	7e013101 	adfvcs	f3, f1, f1
    152c:	02000001 	andeq	r0, r0, #1
    1530:	63156f91 	tstvs	r5, #580	; 0x244
    1534:	01310100 	teqeq	r1, r0, lsl #2
    1538:	0000017e 	andeq	r0, r0, lr, ror r1
    153c:	15759102 	ldrbne	r9, [r5, #-258]!	; 0xfffffefe
    1540:	3201006b 	andcc	r0, r1, #107	; 0x6b
    1544:	00004e01 	andeq	r4, r0, r1, lsl #28
    1548:	70910200 	addsvc	r0, r1, r0, lsl #4
    154c:	7e040500 	cfsh32vc	mvfx0, mvfx4, #0
    1550:	11000001 	tstne	r0, r1
    1554:	00000893 	muleq	r0, r3, r8
    1558:	70010801 	andvc	r0, r1, r1, lsl #16
    155c:	a0200012 	eorge	r0, r0, r2, lsl r0
    1560:	01000001 	tsteq	r0, r1
    1564:	0005a09c 	muleq	r5, ip, r0
    1568:	00781700 	rsbseq	r1, r8, r0, lsl #14
    156c:	2e010801 	cdpcs	8, 0, cr0, cr1, cr1, {0}
    1570:	02000001 	andeq	r0, r0, #1
    1574:	79176491 	ldmdbvc	r7, {r0, r4, r7, sl, sp, lr}
    1578:	01080100 	mrseq	r0, (UNDEF: 24)
    157c:	0000012e 	andeq	r0, r0, lr, lsr #2
    1580:	17609102 	strbne	r9, [r0, -r2, lsl #2]!
    1584:	00746573 	rsbseq	r6, r4, r3, ror r5
    1588:	2e010801 	cdpcs	8, 0, cr0, cr1, cr1, {0}
    158c:	02000001 	andeq	r0, r0, #1
    1590:	eb135c91 	bl	4d87dc <startup-0x1fb27824>
    1594:	01000009 	tsteq	r0, r9
    1598:	017e0109 	cmneq	lr, r9, lsl #2
    159c:	91020000 	mrsls	r0, (UNDEF: 2)
    15a0:	00631577 	rsbeq	r1, r3, r7, ror r5
    15a4:	7e010901 	vmlavc.f16	s0, s2, s2	; <UNPREDICTABLE>
    15a8:	02000001 	andeq	r0, r0, #1
    15ac:	46136f91 	sadd8mi	r6, r3, r1
    15b0:	0100000c 	tsteq	r0, ip
    15b4:	017e0109 	cmneq	lr, r9, lsl #2
    15b8:	91020000 	mrsls	r0, (UNDEF: 2)
    15bc:	0a491376 	beq	124639c <startup-0x1edb9c64>
    15c0:	0a010000 	beq	415c8 <startup-0x1ffbea38>
    15c4:	00012e01 	andeq	r2, r1, r1, lsl #28
    15c8:	70910200 	addsvc	r0, r1, r0, lsl #4
    15cc:	08de1900 	ldmeq	lr, {r8, fp, ip}^
    15d0:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    15d4:	200010f0 	strdcs	r1, [r0], -r0
    15d8:	00000180 	andeq	r0, r0, r0, lsl #3
    15dc:	06069c01 	streq	r9, [r6], -r1, lsl #24
    15e0:	781a0000 	ldmdavc	sl, {}	; <UNPREDICTABLE>
    15e4:	2ede0100 	cdpcs	1, 13, cr0, cr14, cr0, {0}
    15e8:	02000001 	andeq	r0, r0, #1
    15ec:	791a6c91 	ldmdbvc	sl, {r0, r4, r7, sl, fp, sp, lr}
    15f0:	2ede0100 	cdpcs	1, 13, cr0, cr14, cr0, {0}
    15f4:	02000001 	andeq	r0, r0, #1
    15f8:	731a6891 	tstvc	sl, #9502720	; 0x910000
    15fc:	01007465 	tsteq	r0, r5, ror #8
    1600:	00012ede 	ldrdeq	r2, [r1], -lr
    1604:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1608:	0009a21b 	andeq	sl, r9, fp, lsl r2
    160c:	2ede0100 	cdpcs	1, 13, cr0, cr14, cr0, {0}
    1610:	02000001 	andeq	r0, r0, #1
    1614:	eb1c6091 	bl	719860 <startup-0x1f8e67a0>
    1618:	01000009 	tsteq	r0, r9
    161c:	00017edf 	ldrdeq	r7, [r1], -pc	; <UNPREDICTABLE>
    1620:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1624:	000a491c 	andeq	r4, sl, ip, lsl r9
    1628:	2ee00100 	cdpcs	1, 14, cr0, cr0, cr0, {0}
    162c:	02000001 	andeq	r0, r0, #1
    1630:	1d007091 	stcne	0, cr7, [r0, #-580]	; 0xfffffdbc
    1634:	00000a9c 	muleq	r0, ip, sl
    1638:	108ad101 	addne	sp, sl, r1, lsl #2
    163c:	00662000 	rsbeq	r2, r6, r0
    1640:	9c010000 	stcls	0, cr0, [r1], {-0}
    1644:	00000642 	andeq	r0, r0, r2, asr #12
    1648:	0008741c 	andeq	r7, r8, ip, lsl r4
    164c:	7ed20100 	cdpvc	1, 13, cr0, cr2, cr0, {0}
    1650:	02000001 	andeq	r0, r0, #1
    1654:	98187791 	ldmdals	r8, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    1658:	3e200010 	miacc	acc0, r0, r0
    165c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1660:	00646461 	rsbeq	r6, r4, r1, ror #8
    1664:	017ed601 	cmneq	lr, r1, lsl #12
    1668:	91020000 	mrsls	r0, (UNDEF: 2)
    166c:	1f000076 	svcne	0x00000076
    1670:	00000a89 	andeq	r0, r0, r9, lsl #21
    1674:	101cbd01 	andsne	fp, ip, r1, lsl #26
    1678:	006e2000 	rsbeq	r2, lr, r0
    167c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1680:	0009fd1d 	andeq	pc, r9, sp, lsl sp	; <UNPREDICTABLE>
    1684:	d6b50100 	ldrtle	r0, [r5], r0, lsl #2
    1688:	4620000f 	strtmi	r0, [r0], -pc
    168c:	01000000 	mrseq	r0, (UNDEF: 0)
    1690:	0006859c 	muleq	r6, ip, r5
    1694:	08c51b00 	stmiaeq	r5, {r8, r9, fp, ip}^
    1698:	b5010000 	strlt	r0, [r1, #-0]
    169c:	0000017e 	andeq	r0, r0, lr, ror r1
    16a0:	1b779102 	blne	1de5ab0 <startup-0x1e21a550>
    16a4:	00000c46 	andeq	r0, r0, r6, asr #24
    16a8:	017eb501 	cmneq	lr, r1, lsl #10
    16ac:	91020000 	mrsls	r0, (UNDEF: 2)
    16b0:	b71d0076 			; <UNDEFINED> instruction: 0xb71d0076
    16b4:	01000008 	tsteq	r0, r8
    16b8:	000f90ae 	andeq	r9, pc, lr, lsr #1
    16bc:	00004620 	andeq	r4, r0, r0, lsr #12
    16c0:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
    16c4:	1b000006 	blne	16e4 <startup-0x1fffe91c>
    16c8:	000008c5 	andeq	r0, r0, r5, asr #17
    16cc:	017eae01 	cmneq	lr, r1, lsl #28
    16d0:	91020000 	mrsls	r0, (UNDEF: 2)
    16d4:	0c461b77 	mcrreq	11, 7, r1, r6, cr7
    16d8:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    16dc:	0000017e 	andeq	r0, r0, lr, ror r1
    16e0:	00769102 	rsbseq	r9, r6, r2, lsl #2
    16e4:	00092c1d 	andeq	r2, r9, sp, lsl ip
    16e8:	12990100 	addsne	r0, r9, #0, 2
    16ec:	7e20000f 	cdpvc	0, 2, cr0, cr0, cr15, {0}
    16f0:	01000000 	mrseq	r0, (UNDEF: 0)
    16f4:	0006e99c 	muleq	r6, ip, r9
    16f8:	088d1b00 	stmeq	sp, {r8, r9, fp, ip}
    16fc:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    1700:	0000017e 	andeq	r0, r0, lr, ror r1
    1704:	1b779102 	blne	1de5b14 <startup-0x1e21a4ec>
    1708:	00000c46 	andeq	r0, r0, r6, asr #24
    170c:	017e9901 	cmneq	lr, r1, lsl #18
    1710:	91020000 	mrsls	r0, (UNDEF: 2)
    1714:	90200076 	eorls	r0, r0, r6, ror r0
    1718:	01000009 	tsteq	r0, r9
    171c:	00012e94 	muleq	r1, r4, lr
    1720:	000ee800 	andeq	lr, lr, r0, lsl #16
    1724:	00002a20 	andeq	r2, r0, r0, lsr #20
    1728:	119c0100 	orrsne	r0, ip, r0, lsl #2
    172c:	1b000007 	blne	1750 <startup-0x1fffe8b0>
    1730:	00000c46 	andeq	r0, r0, r6, asr #24
    1734:	017e9401 	cmneq	lr, r1, lsl #8
    1738:	91020000 	mrsls	r0, (UNDEF: 2)
    173c:	79210077 	stmdbvc	r1!, {r0, r1, r2, r4, r5, r6}
    1740:	01000008 	tsteq	r0, r8
    1744:	00017e7b 	andeq	r7, r1, fp, ror lr
    1748:	000e5400 	andeq	r5, lr, r0, lsl #8
    174c:	00009420 	andeq	r9, r0, r0, lsr #8
    1750:	469c0100 	ldrmi	r0, [ip], r0, lsl #2
    1754:	1b000007 	blne	1778 <startup-0x1fffe888>
    1758:	00000c46 	andeq	r0, r0, r6, asr #24
    175c:	017e7b01 	cmneq	lr, r1, lsl #22
    1760:	91020000 	mrsls	r0, (UNDEF: 2)
    1764:	76721e6f 	ldrbtvc	r1, [r2], -pc, ror #28
    1768:	5b840100 	blpl	fe101b70 <firstTime.4076+0xde0fc564>
    176c:	02000000 	andeq	r0, r0, #0
    1770:	1d007791 	stcne	7, cr7, [r0, #-580]	; 0xfffffdbc
    1774:	00000a61 	andeq	r0, r0, r1, ror #20
    1778:	0de66501 	cfstr64eq	mvdx6, [r6, #4]!
    177c:	006e2000 	rsbeq	r2, lr, r0
    1780:	9c010000 	stcls	0, cr0, [r1], {-0}
    1784:	00000768 	andeq	r0, r0, r8, ror #14
    1788:	0100631e 	tsteq	r0, lr, lsl r3
    178c:	00017e66 	andeq	r7, r1, r6, ror #28
    1790:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1794:	0a4f1d00 	beq	13c8b9c <startup-0x1ec37464>
    1798:	50010000 	andpl	r0, r1, r0
    179c:	20000d80 	andcs	r0, r0, r0, lsl #27
    17a0:	00000066 	andeq	r0, r0, r6, rrx
    17a4:	078c9c01 	streq	r9, [ip, r1, lsl #24]
    17a8:	461b0000 	ldrmi	r0, [fp], -r0
    17ac:	0100000c 	tsteq	r0, ip
    17b0:	00017e50 	andeq	r7, r1, r0, asr lr
    17b4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    17b8:	09482200 	stmdbeq	r8, {r9, sp}^
    17bc:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    17c0:	20000d28 	andcs	r0, r0, r8, lsr #26
    17c4:	00000058 	andeq	r0, r0, r8, asr r0
    17c8:	07ba9c01 	ldreq	r9, [sl, r1, lsl #24]!
    17cc:	781a0000 	ldmdavc	sl, {}	; <UNPREDICTABLE>
    17d0:	7e490100 	dvfvce	f0, f1, f0
    17d4:	02000001 	andeq	r0, r0, #1
    17d8:	631e6f91 	tstvs	lr, #580	; 0x244
    17dc:	7e4a0100 	dvfvce	f0, f2, f0
    17e0:	02000001 	andeq	r0, r0, #1
    17e4:	22007791 	andcs	r7, r0, #38010880	; 0x2440000
    17e8:	000009bc 			; <UNDEFINED> instruction: 0x000009bc
    17ec:	0cd84101 	ldfeqe	f4, [r8], {1}
    17f0:	00502000 	subseq	r2, r0, r0
    17f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    17f8:	000007e8 	andeq	r0, r0, r8, ror #15
    17fc:	0100781a 	tsteq	r0, sl, lsl r8
    1800:	00017e41 	andeq	r7, r1, r1, asr #28
    1804:	6f910200 	svcvs	0x00910200
    1808:	0100631e 	tsteq	r0, lr, lsl r3
    180c:	00017e42 	andeq	r7, r1, r2, asr #28
    1810:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1814:	0a241f00 	beq	90941c <startup-0x1f6f6be4>
    1818:	3a010000 	bcc	41820 <startup-0x1ffbe7e0>
    181c:	20000ca8 	andcs	r0, r0, r8, lsr #25
    1820:	00000030 	andeq	r0, r0, r0, lsr r0
    1824:	cd1f9c01 	ldcgt	12, cr9, [pc, #-4]	; 1828 <startup-0x1fffe7d8>
    1828:	01000008 	tsteq	r0, r8
    182c:	000c9037 	andeq	r9, ip, r7, lsr r0
    1830:	00001820 	andeq	r1, r0, r0, lsr #16
    1834:	199c0100 	ldmibne	ip, {r8}
    1838:	00000a74 	andeq	r0, r0, r4, ror sl
    183c:	0c5e3201 	lfmeq	f3, 2, [lr], {1}
    1840:	00322000 	eorseq	r2, r2, r0
    1844:	9c010000 	stcls	0, cr0, [r1], {-0}
    1848:	0000083a 	andeq	r0, r0, sl, lsr r8
    184c:	0008861b 	andeq	r8, r8, fp, lsl r6
    1850:	20320100 	eorscs	r0, r2, r0, lsl #2
    1854:	02000005 	andeq	r0, r0, #5
    1858:	691e6c91 	ldmdbvs	lr, {r0, r4, r7, sl, fp, sp, lr}
    185c:	2e330100 	rsfcss	f0, f3, f0
    1860:	02000001 	andeq	r0, r0, #1
    1864:	1d007491 	cfstrsne	mvf7, [r0, #-580]	; 0xfffffdbc
    1868:	000008fd 	strdeq	r0, [r0], -sp
    186c:	0c382101 	ldfeqs	f2, [r8], #-4
    1870:	00262000 	eoreq	r2, r6, r0
    1874:	9c010000 	stcls	0, cr0, [r1], {-0}
    1878:	0000085d 	andeq	r0, r0, sp, asr r8
    187c:	00736d1a 	rsbseq	r6, r3, sl, lsl sp
    1880:	004e2101 	subeq	r2, lr, r1, lsl #2
    1884:	91020000 	mrsls	r0, (UNDEF: 2)
    1888:	ab1d0074 	blge	741a60 <startup-0x1f8be5a0>
    188c:	01000008 	tsteq	r0, r8
    1890:	000c0c18 	andeq	r0, ip, r8, lsl ip
    1894:	00002c20 	andeq	r2, r0, r0, lsr #24
    1898:	809c0100 	addshi	r0, ip, r0, lsl #2
    189c:	1a000008 	bne	18c4 <startup-0x1fffe73c>
    18a0:	01007375 	tsteq	r0, r5, ror r3
    18a4:	00004e18 	andeq	r4, r0, r8, lsl lr
    18a8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    18ac:	09202300 	stmdbeq	r0!, {r8, r9, sp}
    18b0:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    18b4:	20000bc8 	andcs	r0, r0, r8, asr #23
    18b8:	00000044 	andeq	r0, r0, r4, asr #32
    18bc:	d1239c01 			; <UNDEFINED> instruction: 0xd1239c01
    18c0:	01000009 	tsteq	r0, r9
    18c4:	000b8404 	andeq	r8, fp, r4, lsl #8
    18c8:	00004420 	andeq	r4, r0, r0, lsr #8
    18cc:	009c0100 	addseq	r0, ip, r0, lsl #2
    18d0:	00000100 	andeq	r0, r0, r0, lsl #2
    18d4:	060f0004 	streq	r0, [pc], -r4
    18d8:	01040000 	mrseq	r0, (UNDEF: 4)
    18dc:	00000048 	andeq	r0, r0, r8, asr #32
    18e0:	000abc0c 	andeq	fp, sl, ip, lsl #24
    18e4:	0019c800 	andseq	ip, r9, r0, lsl #16
    18e8:	00002820 	andeq	r2, r0, r0, lsr #16
    18ec:	00080300 	andeq	r0, r8, r0, lsl #6
    18f0:	020c0200 	andeq	r0, ip, #0, 4
    18f4:	00004e05 	andeq	r4, r0, r5, lsl #28
    18f8:	01d10300 	bicseq	r0, r1, r0, lsl #6
    18fc:	07020000 	streq	r0, [r2, -r0]
    1900:	0000004e 	andeq	r0, r0, lr, asr #32
    1904:	02f30300 	rscseq	r0, r3, #0, 6
    1908:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    190c:	0000004e 	andeq	r0, r0, lr, asr #32
    1910:	099d0304 	ldmibeq	sp, {r2, r8, r9}
    1914:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    1918:	00000055 	andeq	r0, r0, r5, asr r0
    191c:	04040008 	streq	r0, [r4], #-8
    1920:	00031c07 	andeq	r1, r3, r7, lsl #24
    1924:	5b040500 	blpl	102d2c <startup-0x1fefd2d4>
    1928:	04000000 	streq	r0, [r0], #-0
    192c:	02bb0801 	adcseq	r0, fp, #65536	; 0x10000
    1930:	ef060000 	svc	0x00060000
    1934:	0200000a 	andeq	r0, r0, #10
    1938:	0000210a 	andeq	r2, r0, sl, lsl #2
    193c:	02900700 	addseq	r0, r0, #0, 14
    1940:	030c0000 	movweq	r0, #49152	; 0xc000
    1944:	00009e06 	andeq	r9, r0, r6, lsl #28
    1948:	041e0300 	ldreq	r0, [lr], #-768	; 0xfffffd00
    194c:	07030000 	streq	r0, [r3, -r0]
    1950:	0000009e 	muleq	r0, lr, r0
    1954:	04340300 	ldrteq	r0, [r4], #-768	; 0xfffffd00
    1958:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    195c:	0000009e 	muleq	r0, lr, r0
    1960:	028c0304 	addeq	r0, ip, #4, 6	; 0x10000000
    1964:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    1968:	0000009e 	muleq	r0, lr, r0
    196c:	04050008 	streq	r0, [r5], #-8
    1970:	00000062 	andeq	r0, r0, r2, rrx
    1974:	00075a06 	andeq	r5, r7, r6, lsl #20
    1978:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
    197c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1980:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
    1984:	19c80301 	stmibne	r8, {r0, r8, r9}^
    1988:	00282000 	eoreq	r2, r8, r0
    198c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1990:	000000fd 	strdeq	r0, [r0], -sp
    1994:	000ab609 	andeq	fp, sl, r9, lsl #12
    1998:	fd030100 	stc2	1, cr0, [r3, #-0]
    199c:	02000000 	andeq	r0, r0, #0
    19a0:	1e097491 	mcrne	4, 0, r7, cr9, cr1, {4}
    19a4:	01000004 	tsteq	r0, r4
    19a8:	00009e03 	andeq	r9, r0, r3, lsl #28
    19ac:	70910200 	addsvc	r0, r1, r0, lsl #4
    19b0:	00043409 	andeq	r3, r4, r9, lsl #8
    19b4:	9e030100 	adflss	f0, f3, f0
    19b8:	02000000 	andeq	r0, r0, #0
    19bc:	8c096c91 	stchi	12, cr6, [r9], {145}	; 0x91
    19c0:	01000002 	tsteq	r0, r2
    19c4:	00009e03 	andeq	r9, r0, r3, lsl #28
    19c8:	68910200 	ldmvs	r1, {r9}
    19cc:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    19d0:	00000000 	andeq	r0, r0, r0
    19d4:	000000c3 	andeq	r0, r0, r3, asr #1
    19d8:	06960004 	ldreq	r0, [r6], r4
    19dc:	01040000 	mrseq	r0, (UNDEF: 4)
    19e0:	00000048 	andeq	r0, r0, r8, asr #32
    19e4:	000af60c 	andeq	pc, sl, ip, lsl #12
    19e8:	0019f000 	andseq	pc, r9, r0
    19ec:	00002820 	andeq	r2, r0, r0, lsr #16
    19f0:	00087900 	andeq	r7, r8, r0, lsl #18
    19f4:	020c0200 	andeq	r0, ip, #0, 4
    19f8:	00004e05 	andeq	r4, r0, r5, lsl #28
    19fc:	01d10300 	bicseq	r0, r1, r0, lsl #6
    1a00:	07020000 	streq	r0, [r2, -r0]
    1a04:	0000004e 	andeq	r0, r0, lr, asr #32
    1a08:	02f30300 	rscseq	r0, r3, #0, 6
    1a0c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1a10:	0000004e 	andeq	r0, r0, lr, asr #32
    1a14:	099d0304 	ldmibeq	sp, {r2, r8, r9}
    1a18:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    1a1c:	00000055 	andeq	r0, r0, r5, asr r0
    1a20:	04040008 	streq	r0, [r4], #-8
    1a24:	00031c07 	andeq	r1, r3, r7, lsl #24
    1a28:	5b040500 	blpl	102e30 <startup-0x1fefd1d0>
    1a2c:	04000000 	streq	r0, [r0], #-0
    1a30:	02bb0801 	adcseq	r0, fp, #65536	; 0x10000
    1a34:	ef060000 	svc	0x00060000
    1a38:	0200000a 	andeq	r0, r0, #10
    1a3c:	0000210a 	andeq	r2, r0, sl, lsl #2
    1a40:	0aea0700 	beq	ffa83648 <firstTime.4076+0xdfa7e03c>
    1a44:	03010000 	movweq	r0, #4096	; 0x1000
    1a48:	200019f0 	strdcs	r1, [r0], -r0
    1a4c:	00000028 	andeq	r0, r0, r8, lsr #32
    1a50:	00b99c01 	adcseq	r9, r9, r1, lsl #24
    1a54:	73080000 	movwvc	r0, #32768	; 0x8000
    1a58:	b9030100 	stmdblt	r3, {r8}
    1a5c:	02000000 	andeq	r0, r0, #0
    1a60:	9d097491 	cfstrsls	mvf7, [r9, #-580]	; 0xfffffdbc
    1a64:	01000009 	tsteq	r0, r9
    1a68:	00005503 	andeq	r5, r0, r3, lsl #10
    1a6c:	70910200 	addsvc	r0, r1, r0, lsl #4
    1a70:	0001d109 	andeq	sp, r1, r9, lsl #2
    1a74:	bf030100 	svclt	0x00030100
    1a78:	02000000 	andeq	r0, r0, #0
    1a7c:	f3096c91 	vqrdmlsh.s<illegal width 8>	d6, d25, d1
    1a80:	01000002 	tsteq	r0, r2
    1a84:	0000bf03 	andeq	fp, r0, r3, lsl #30
    1a88:	68910200 	ldmvs	r1, {r9}
    1a8c:	62040500 	andvs	r0, r4, #0, 10
    1a90:	0a000000 	beq	1a98 <startup-0x1fffe568>
    1a94:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1a98:	35000074 	strcc	r0, [r0, #-116]	; 0xffffff8c
    1a9c:	04000001 	streq	r0, [r0], #-1
    1aa0:	00072800 	andeq	r2, r7, r0, lsl #16
    1aa4:	48010400 	stmdami	r1, {sl}
    1aa8:	0c000000 	stceq	0, cr0, [r0], {-0}
    1aac:	00000b5c 	andeq	r0, r0, ip, asr fp
    1ab0:	20001a18 	andcs	r1, r0, r8, lsl sl
    1ab4:	00000060 	andeq	r0, r0, r0, rrx
    1ab8:	000008e5 	andeq	r0, r0, r5, ror #17
    1abc:	13021802 	movwne	r1, #10242	; 0x2802
    1ac0:	000000ae 	andeq	r0, r0, lr, lsr #1
    1ac4:	000b2503 	andeq	r2, fp, r3, lsl #10
    1ac8:	ae140200 	cdpge	2, 1, cr0, cr4, cr0, {0}
    1acc:	00000000 	andeq	r0, r0, r0
    1ad0:	000b3e03 	andeq	r3, fp, r3, lsl #28
    1ad4:	b5150200 	ldrlt	r0, [r5, #-512]	; 0xfffffe00
    1ad8:	04000000 	streq	r0, [r0], #-0
    1adc:	000b8903 	andeq	r8, fp, r3, lsl #18
    1ae0:	b5160200 	ldrlt	r0, [r6, #-512]	; 0xfffffe00
    1ae4:	06000000 	streq	r0, [r0], -r0
    1ae8:	000bab03 	andeq	sl, fp, r3, lsl #22
    1aec:	ae170200 	cdpge	2, 1, cr0, cr7, cr0, {0}
    1af0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1af4:	000b4a03 	andeq	r4, fp, r3, lsl #20
    1af8:	ae180200 	cdpge	2, 1, cr0, cr8, cr0, {0}
    1afc:	0c000000 	stceq	0, cr0, [r0], {-0}
    1b00:	000bbb03 	andeq	fp, fp, r3, lsl #22
    1b04:	bc190200 	lfmlt	f0, 4, [r9], {-0}
    1b08:	10000000 	andne	r0, r0, r0
    1b0c:	000bb303 	andeq	fp, fp, r3, lsl #6
    1b10:	bc1a0200 	lfmlt	f0, 4, [sl], {-0}
    1b14:	11000000 	mrsne	r0, (UNDEF: 0)
    1b18:	000b5003 	andeq	r5, fp, r3
    1b1c:	b51b0200 	ldrlt	r0, [fp, #-512]	; 0xfffffe00
    1b20:	12000000 	andne	r0, r0, #0
    1b24:	000ba403 	andeq	sl, fp, r3, lsl #8
    1b28:	bc1c0200 	lfmlt	f0, 4, [ip], {-0}
    1b2c:	14000000 	strne	r0, [r0], #-0
    1b30:	000b3603 	andeq	r3, fp, r3, lsl #12
    1b34:	bc1d0200 	lfmlt	f0, 4, [sp], {-0}
    1b38:	15000000 	strne	r0, [r0, #-0]
    1b3c:	000bc203 	andeq	ip, fp, r3, lsl #4
    1b40:	b51e0200 	ldrlt	r0, [lr, #-512]	; 0xfffffe00
    1b44:	16000000 	strne	r0, [r0], -r0
    1b48:	07040400 	streq	r0, [r4, -r0, lsl #8]
    1b4c:	0000031c 	andeq	r0, r0, ip, lsl r3
    1b50:	16070204 	strne	r0, [r7], -r4, lsl #4
    1b54:	04000003 	streq	r0, [r0], #-3
    1b58:	02bb0801 	adcseq	r0, fp, #65536	; 0x10000
    1b5c:	45050000 	strmi	r0, [r5, #-0]
    1b60:	0200000b 	andeq	r0, r0, #11
    1b64:	0000211f 	andeq	r2, r0, pc, lsl r1
    1b68:	0b940600 	bleq	fe503370 <firstTime.4076+0xde4fdd64>
    1b6c:	0d010000 	stceq	0, cr0, [r1, #-0]
    1b70:	00000104 	andeq	r0, r0, r4, lsl #2
    1b74:	20001a44 	andcs	r1, r0, r4, asr #20
    1b78:	00000034 	andeq	r0, r0, r4, lsr r0
    1b7c:	01049c01 	tsteq	r4, r1, lsl #24
    1b80:	62070000 	andvs	r0, r7, #0
    1b84:	01007469 	tsteq	r0, r9, ror #8
    1b88:	0001040d 	andeq	r0, r1, sp, lsl #8
    1b8c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1b90:	4c494408 	cfstrdmi	mvd4, [r9], {8}
    1b94:	0b0e0100 	bleq	381f9c <startup-0x1fc7e064>
    1b98:	02000001 	andeq	r0, r0, #1
    1b9c:	09006f91 	stmdbeq	r0, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
    1ba0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1ba4:	01040074 	tsteq	r4, r4, ror r0
    1ba8:	0002c408 	andeq	ip, r2, r8, lsl #8
    1bac:	0bce0a00 	bleq	ff3843b4 <firstTime.4076+0xdf37eda8>
    1bb0:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    1bb4:	0000010b 	andeq	r0, r0, fp, lsl #2
    1bb8:	20001a30 	andcs	r1, r0, r0, lsr sl
    1bbc:	00000014 	andeq	r0, r0, r4, lsl r0
    1bc0:	2b0b9c01 	blcs	2e8bcc <startup-0x1fd17434>
    1bc4:	0100000b 	tsteq	r0, fp
    1bc8:	001a1804 	andseq	r1, sl, r4, lsl #16
    1bcc:	00001820 	andeq	r1, r0, r0, lsr #16
    1bd0:	009c0100 	addseq	r0, ip, r0, lsl #2
    1bd4:	000004ed 	andeq	r0, r0, sp, ror #9
    1bd8:	07e50004 	strbeq	r0, [r5, r4]!
    1bdc:	01040000 	mrseq	r0, (UNDEF: 4)
    1be0:	00000048 	andeq	r0, r0, r8, asr #32
    1be4:	000d130c 	andeq	r1, sp, ip, lsl #6
    1be8:	001a7800 	andseq	r7, sl, r0, lsl #16
    1bec:	00052020 	andeq	r2, r5, r0, lsr #32
    1bf0:	00095400 	andeq	r5, r9, r0, lsl #8
    1bf4:	020c0200 	andeq	r0, ip, #0, 4
    1bf8:	00004e05 	andeq	r4, r0, r5, lsl #28
    1bfc:	01d10300 	bicseq	r0, r1, r0, lsl #6
    1c00:	07020000 	streq	r0, [r2, -r0]
    1c04:	0000004e 	andeq	r0, r0, lr, asr #32
    1c08:	02f30300 	rscseq	r0, r3, #0, 6
    1c0c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1c10:	0000004e 	andeq	r0, r0, lr, asr #32
    1c14:	099d0304 	ldmibeq	sp, {r2, r8, r9}
    1c18:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    1c1c:	00000055 	andeq	r0, r0, r5, asr r0
    1c20:	04040008 	streq	r0, [r4], #-8
    1c24:	00031c07 	andeq	r1, r3, r7, lsl #24
    1c28:	5b040500 	blpl	103030 <startup-0x1fefcfd0>
    1c2c:	04000000 	streq	r0, [r0], #-0
    1c30:	02bb0801 	adcseq	r0, fp, #65536	; 0x10000
    1c34:	ef060000 	svc	0x00060000
    1c38:	0200000a 	andeq	r0, r0, #10
    1c3c:	0000210a 	andeq	r2, r0, sl, lsl #2
    1c40:	02900700 	addseq	r0, r0, #0, 14
    1c44:	030c0000 	movweq	r0, #49152	; 0xc000
    1c48:	00009e06 	andeq	r9, r0, r6, lsl #28
    1c4c:	041e0300 	ldreq	r0, [lr], #-768	; 0xfffffd00
    1c50:	07030000 	streq	r0, [r3, -r0]
    1c54:	0000009e 	muleq	r0, lr, r0
    1c58:	04340300 	ldrteq	r0, [r4], #-768	; 0xfffffd00
    1c5c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1c60:	0000009e 	muleq	r0, lr, r0
    1c64:	028c0304 	addeq	r0, ip, #4, 6	; 0x10000000
    1c68:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    1c6c:	0000009e 	muleq	r0, lr, r0
    1c70:	04050008 	streq	r0, [r5], #-8
    1c74:	00000062 	andeq	r0, r0, r2, rrx
    1c78:	00075a06 	andeq	r5, r7, r6, lsl #20
    1c7c:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
    1c80:	07000000 	streq	r0, [r0, -r0]
    1c84:	0000014d 	andeq	r0, r0, sp, asr #2
    1c88:	28060424 	stmdacs	r6, {r2, r5, sl}
    1c8c:	03000001 	movweq	r0, #1
    1c90:	00000521 	andeq	r0, r0, r1, lsr #10
    1c94:	01280704 			; <UNDEFINED> instruction: 0x01280704
    1c98:	03000000 	movweq	r0, #0
    1c9c:	000000e0 	andeq	r0, r0, r0, ror #1
    1ca0:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
    1ca4:	03040000 	movweq	r0, #16384	; 0x4000
    1ca8:	00000207 	andeq	r0, r0, r7, lsl #4
    1cac:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
    1cb0:	03080000 	movweq	r0, #32768	; 0x8000
    1cb4:	00000200 	andeq	r0, r0, r0, lsl #4
    1cb8:	01460c04 	cmpeq	r6, r4, lsl #24
    1cbc:	030c0000 	movweq	r0, #49152	; 0xc000
    1cc0:	0000023c 	andeq	r0, r0, ip, lsr r2
    1cc4:	01460d04 	cmpeq	r6, r4, lsl #26
    1cc8:	03100000 	tsteq	r0, #0
    1ccc:	00000108 	andeq	r0, r0, r8, lsl #2
    1cd0:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
    1cd4:	03140000 	tsteq	r4, #0
    1cd8:	000003d1 	ldrdeq	r0, [r0], -r1
    1cdc:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
    1ce0:	03180000 	tsteq	r8, #0
    1ce4:	000004da 	ldrdeq	r0, [r0], -sl
    1ce8:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
    1cec:	031c0000 	tsteq	ip, #0
    1cf0:	00000024 	andeq	r0, r0, r4, lsr #32
    1cf4:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
    1cf8:	00200000 	eoreq	r0, r0, r0
    1cfc:	00a40405 	adceq	r0, r4, r5, lsl #8
    1d00:	04080000 	streq	r0, [r8], #-0
    1d04:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1d08:	01400900 	cmpeq	r0, r0, lsl #18
    1d0c:	400a0000 	andmi	r0, sl, r0
    1d10:	00000001 	andeq	r0, r0, r1
    1d14:	00af0405 	adceq	r0, pc, r5, lsl #8
    1d18:	04050000 	streq	r0, [r5], #-0
    1d1c:	00000135 	andeq	r0, r0, r5, lsr r1
    1d20:	00014e06 	andeq	r4, r1, r6, lsl #28
    1d24:	af150400 	svcge	0x00150400
    1d28:	0b000000 	bleq	1d30 <startup-0x1fffe2d0>
    1d2c:	00000162 	andeq	r0, r0, r2, ror #2
    1d30:	00000162 	andeq	r0, r0, r2, ror #2
    1d34:	0405000c 	streq	r0, [r5], #-12
    1d38:	0000014c 	andeq	r0, r0, ip, asr #2
    1d3c:	0003fb0d 	andeq	pc, r3, sp, lsl #22
    1d40:	571a0400 	ldrpl	r0, [sl, -r0, lsl #8]
    1d44:	0d000001 	stceq	0, cr0, [r0, #-4]
    1d48:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    1d4c:	012e1b04 			; <UNDEFINED> instruction: 0x012e1b04
    1d50:	80060000 	andhi	r0, r6, r0
    1d54:	05000001 	streq	r0, [r0, #-1]
    1d58:	00005b24 	andeq	r5, r0, r4, lsr #22
    1d5c:	017e0b00 	cmneq	lr, r0, lsl #22
    1d60:	019a0000 	orrseq	r0, sl, r0
    1d64:	9a0e0000 	bls	381d6c <startup-0x1fc7e294>
    1d68:	ff000001 			; <UNDEFINED> instruction: 0xff000001
    1d6c:	04040003 	streq	r0, [r4], #-3
    1d70:	0000f407 	andeq	pc, r0, r7, lsl #8
    1d74:	08d30d00 	ldmeq	r3, {r8, sl, fp}^
    1d78:	2b050000 	blcs	141d80 <startup-0x1febe280>
    1d7c:	00000189 	andeq	r0, r0, r9, lsl #3
    1d80:	0001160d 	andeq	r1, r1, sp, lsl #12
    1d84:	892c0500 	stmdbhi	ip!, {r8, sl}
    1d88:	0d000001 	stceq	0, cr0, [r0, #-4]
    1d8c:	000004ab 	andeq	r0, r0, fp, lsr #9
    1d90:	01892d05 	orreq	r2, r9, r5, lsl #26
    1d94:	e80d0000 	stmda	sp, {}	; <UNPREDICTABLE>
    1d98:	05000001 	streq	r0, [r0, #-1]
    1d9c:	0001892e 	andeq	r8, r1, lr, lsr #18
    1da0:	047b0d00 	ldrbteq	r0, [fp], #-3328	; 0xfffff300
    1da4:	2f050000 	svccs	0x00050000
    1da8:	00000189 	andeq	r0, r0, r9, lsl #3
    1dac:	0003c20d 	andeq	ip, r3, sp, lsl #4
    1db0:	89300500 	ldmdbhi	r0!, {r8, sl}
    1db4:	0d000001 	stceq	0, cr0, [r0, #-4]
    1db8:	00000170 	andeq	r0, r0, r0, ror r1
    1dbc:	01893105 	orreq	r3, r9, r5, lsl #2
    1dc0:	990f0000 	stmdbls	pc, {}	; <UNPREDICTABLE>
    1dc4:	0100000c 	tsteq	r0, ip
    1dc8:	001f14e4 	andseq	r1, pc, r4, ror #9
    1dcc:	00008420 	andeq	r8, r0, r0, lsr #8
    1dd0:	2c9c0100 	ldfcss	f0, [ip], {0}
    1dd4:	10000002 	andne	r0, r0, r2
    1dd8:	e5010073 	str	r0, [r1, #-115]	; 0xffffff8d
    1ddc:	0000022c 	andeq	r0, r0, ip, lsr #4
    1de0:	116c9102 	cmnne	ip, r2, lsl #2
    1de4:	00000c74 	andeq	r0, r0, r4, ror ip
    1de8:	0239e601 	eorseq	lr, r9, #1048576	; 0x100000
    1dec:	91020000 	mrsls	r0, (UNDEF: 2)
    1df0:	0c7a115c 	ldfeqe	f1, [sl], #-368	; 0xfffffe90
    1df4:	e7010000 	str	r0, [r1, -r0]
    1df8:	00000249 	andeq	r0, r0, r9, asr #4
    1dfc:	00489102 	subeq	r9, r8, r2, lsl #2
    1e00:	02320405 	eorseq	r0, r2, #83886080	; 0x5000000
    1e04:	01040000 	mrseq	r0, (UNDEF: 4)
    1e08:	0002c408 	andeq	ip, r2, r8, lsl #8
    1e0c:	02320b00 	eorseq	r0, r2, #0, 22
    1e10:	02490000 	subeq	r0, r9, #0
    1e14:	9a120000 	bls	481e1c <startup-0x1fb7e1e4>
    1e18:	0c000001 	stceq	0, cr0, [r0], {1}
    1e1c:	02320b00 	eorseq	r0, r2, #0, 22
    1e20:	02590000 	subseq	r0, r9, #0
    1e24:	9a120000 	bls	481e2c <startup-0x1fb7e1d4>
    1e28:	13000001 	movwne	r0, #1
    1e2c:	0c2a0f00 	stceq	15, cr0, [sl], #-0
    1e30:	cc010000 	stcgt	0, cr0, [r1], {-0}
    1e34:	20001e86 	andcs	r1, r0, r6, lsl #29
    1e38:	0000008e 	andeq	r0, r0, lr, lsl #1
    1e3c:	02b39c01 	adcseq	r9, r3, #256	; 0x100
    1e40:	62130000 	andsvs	r0, r3, #0
    1e44:	0100000d 	tsteq	r0, sp
    1e48:	00022ccc 	andeq	r2, r2, ip, asr #25
    1e4c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1e50:	00043e13 	andeq	r3, r4, r3, lsl lr
    1e54:	2ccc0100 	stfcse	f0, [ip], {0}
    1e58:	02000002 	andeq	r0, r0, #2
    1e5c:	0c136891 	ldceq	8, cr6, [r3], {145}	; 0x91
    1e60:	0100000d 	tsteq	r0, sp
    1e64:	00012ecc 	andeq	r2, r1, ip, asr #29
    1e68:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1e6c:	000be813 	andeq	lr, fp, r3, lsl r8
    1e70:	2ecc0100 	polcse	f0, f4, f0
    1e74:	02000001 	andeq	r0, r0, #1
    1e78:	69106091 	ldmdbvs	r0, {r0, r4, r7, sp, lr}
    1e7c:	2ed00100 	cdpcs	1, 13, cr0, cr0, cr0, {0}
    1e80:	02000001 	andeq	r0, r0, #1
    1e84:	0f007491 	svceq	0x00007491
    1e88:	00000ccb 	andeq	r0, r0, fp, asr #25
    1e8c:	1e28bd01 	cdpne	13, 2, cr11, cr8, cr1, {0}
    1e90:	005e2000 	subseq	r2, lr, r0
    1e94:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e98:	000002e5 	andeq	r0, r0, r5, ror #5
    1e9c:	000d6213 	andeq	r6, sp, r3, lsl r2
    1ea0:	2cbd0100 	ldfcss	f0, [sp]
    1ea4:	02000002 	andeq	r0, r0, #2
    1ea8:	3e137491 	cfcmpscc	r7, mvf3, mvf1
    1eac:	01000004 	tsteq	r0, r4
    1eb0:	00022cbd 			; <UNDEFINED> instruction: 0x00022cbd
    1eb4:	70910200 	addsvc	r0, r1, r0, lsl #4
    1eb8:	0c1e0f00 	ldceq	15, cr0, [lr], {-0}
    1ebc:	ad010000 	stcge	0, cr0, [r1, #-0]
    1ec0:	20001dbe 			; <UNDEFINED> instruction: 0x20001dbe
    1ec4:	0000006a 	andeq	r0, r0, sl, rrx
    1ec8:	03159c01 	tsteq	r5, #256	; 0x100
    1ecc:	73100000 	tstvc	r0, #0
    1ed0:	2cae0100 	stfcss	f0, [lr]
    1ed4:	02000002 	andeq	r0, r0, #2
    1ed8:	59116c91 	ldmdbpl	r1, {r0, r4, r7, sl, fp, sp, lr}
    1edc:	01000009 	tsteq	r0, r9
    1ee0:	000315af 	andeq	r1, r3, pc, lsr #11
    1ee4:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    1ee8:	02320b00 	eorseq	r0, r2, #0, 22
    1eec:	03250000 			; <UNDEFINED> instruction: 0x03250000
    1ef0:	9a120000 	bls	481ef8 <startup-0x1fb7e108>
    1ef4:	14000001 	strne	r0, [r0], #-1
    1ef8:	0bff1400 	bleq	fffc6f00 <firstTime.4076+0xdffc18f4>
    1efc:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    1f00:	20001dac 	andcs	r1, r0, ip, lsr #27
    1f04:	00000012 	andeq	r0, r0, r2, lsl r0
    1f08:	d7159c01 	ldrle	r9, [r5, -r1, lsl #24]
    1f0c:	0100000b 	tsteq	r0, fp
    1f10:	001d929f 	mulseq	sp, pc, r2	; <UNPREDICTABLE>
    1f14:	00001a20 	andeq	r1, r0, r0, lsr #20
    1f18:	149c0100 	ldrne	r0, [ip], #256	; 0x100
    1f1c:	00000c0c 	andeq	r0, r0, ip, lsl #24
    1f20:	1cf88301 	ldclne	3, cr8, [r8], #4
    1f24:	009a2000 	addseq	r2, sl, r0
    1f28:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f2c:	000cd70f 	andeq	sp, ip, pc, lsl #14
    1f30:	a87b0100 	ldmdage	fp!, {r8}^
    1f34:	5020001c 	eorpl	r0, r0, ip, lsl r0
    1f38:	01000000 	mrseq	r0, (UNDEF: 0)
    1f3c:	0003989c 	muleq	r3, ip, r8
    1f40:	6f721600 	svcvs	0x00721600
    1f44:	7b010077 	blvc	42128 <startup-0x1ffbded8>
    1f48:	0000005b 	andeq	r0, r0, fp, asr r0
    1f4c:	136f9102 	cmnne	pc, #-2147483648	; 0x80000000
    1f50:	00000c17 	andeq	r0, r0, r7, lsl ip
    1f54:	005b7b01 	subseq	r7, fp, r1, lsl #22
    1f58:	91020000 	mrsls	r0, (UNDEF: 2)
    1f5c:	0c80116e 	stfeqs	f1, [r0], {110}	; 0x6e
    1f60:	7c010000 	stcvc	0, cr0, [r1], {-0}
    1f64:	0000005b 	andeq	r0, r0, fp, asr r0
    1f68:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1f6c:	000cfb0f 	andeq	pc, ip, pc, lsl #22
    1f70:	6c740100 	ldfvse	f0, [r4], #-0
    1f74:	3c20001c 	stccc	0, cr0, [r0], #-112	; 0xffffff90
    1f78:	01000000 	mrseq	r0, (UNDEF: 0)
    1f7c:	0003ba9c 	muleq	r3, ip, sl
    1f80:	00631600 	rsbeq	r1, r3, r0, lsl #12
    1f84:	005b7401 	subseq	r7, fp, r1, lsl #8
    1f88:	91020000 	mrsls	r0, (UNDEF: 2)
    1f8c:	3b170077 	blcc	5c2170 <startup-0x1fa3de90>
    1f90:	0100000c 	tsteq	r0, ip
    1f94:	00005b6a 	andeq	r5, r0, sl, ror #22
    1f98:	001c3800 	andseq	r3, ip, r0, lsl #16
    1f9c:	00003420 	andeq	r3, r0, r0, lsr #8
    1fa0:	e09c0100 	adds	r0, ip, r0, lsl #2
    1fa4:	10000003 	andne	r0, r0, r3
    1fa8:	6b010063 	blvs	4213c <startup-0x1ffbdec4>
    1fac:	0000005b 	andeq	r0, r0, fp, asr r0
    1fb0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1fb4:	000ce40f 	andeq	lr, ip, pc, lsl #8
    1fb8:	08630100 	stmdaeq	r3!, {r8}^
    1fbc:	3020001c 	eorcc	r0, r0, ip, lsl r0
    1fc0:	01000000 	mrseq	r0, (UNDEF: 0)
    1fc4:	0004029c 	muleq	r4, ip, r2
    1fc8:	00631600 	rsbeq	r1, r3, r0, lsl #12
    1fcc:	005b6301 	subseq	r6, fp, r1, lsl #6
    1fd0:	91020000 	mrsls	r0, (UNDEF: 2)
    1fd4:	ef170077 	svc	0x00170077
    1fd8:	0100000b 	tsteq	r0, fp
    1fdc:	00005b57 	andeq	r5, r0, r7, asr fp
    1fe0:	001bb400 	andseq	fp, fp, r0, lsl #8
    1fe4:	00005420 	andeq	r5, r0, r0, lsr #8
    1fe8:	299c0100 	ldmibcs	ip, {r8}
    1fec:	10000004 	andne	r0, r0, r4
    1ff0:	01007672 	tsteq	r0, r2, ror r6
    1ff4:	00005b5c 	andeq	r5, r0, ip, asr fp
    1ff8:	6f910200 	svcvs	0x00910200
    1ffc:	0ca41700 	stceq	7, cr1, [r4]
    2000:	4b010000 	blmi	42008 <startup-0x1ffbdff8>
    2004:	0000005b 	andeq	r0, r0, fp, asr r0
    2008:	20001b60 	andcs	r1, r0, r0, ror #22
    200c:	00000054 	andeq	r0, r0, r4, asr r0
    2010:	04509c01 	ldrbeq	r9, [r0], #-3073	; 0xfffff3ff
    2014:	72100000 	andsvc	r0, r0, #0
    2018:	50010076 	andpl	r0, r1, r6, ror r0
    201c:	0000005b 	andeq	r0, r0, fp, asr r0
    2020:	006f9102 	rsbeq	r9, pc, r2, lsl #2
    2024:	000c880f 	andeq	r8, ip, pc, lsl #16
    2028:	36450100 	strbcc	r0, [r5], -r0, lsl #2
    202c:	2a20001b 	bcs	8020a0 <startup-0x1f7fdf60>
    2030:	01000000 	mrseq	r0, (UNDEF: 0)
    2034:	0004749c 	muleq	r4, ip, r4
    2038:	099d1300 	ldmibeq	sp, {r8, r9, ip}
    203c:	45010000 	strmi	r0, [r1, #-0]
    2040:	0000005b 	andeq	r0, r0, fp, asr r0
    2044:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2048:	000c640f 	andeq	r6, ip, pc, lsl #8
    204c:	0c3f0100 	ldfeqs	f0, [pc], #-0	; 2054 <startup-0x1fffdfac>
    2050:	2a20001b 	bcs	8020c4 <startup-0x1f7fdf3c>
    2054:	01000000 	mrseq	r0, (UNDEF: 0)
    2058:	0004989c 	muleq	r4, ip, r8
    205c:	08c51300 	stmiaeq	r5, {r8, r9, ip}^
    2060:	3f010000 	svccc	0x00010000
    2064:	0000005b 	andeq	r0, r0, fp, asr r0
    2068:	00779102 	rsbseq	r9, r7, r2, lsl #2
    206c:	000cb618 	andeq	fp, ip, r8, lsl r6
    2070:	bc370100 	ldflts	f0, [r7], #-0
    2074:	5020001a 	eorpl	r0, r0, sl, lsl r0
    2078:	01000000 	mrseq	r0, (UNDEF: 0)
    207c:	0004c69c 	muleq	r4, ip, r6
    2080:	00781600 	rsbseq	r1, r8, r0, lsl #12
    2084:	005b3701 	subseq	r3, fp, r1, lsl #14
    2088:	91020000 	mrsls	r0, (UNDEF: 2)
    208c:	0063106f 	rsbeq	r1, r3, pc, rrx
    2090:	005b3901 	subseq	r3, fp, r1, lsl #18
    2094:	91020000 	mrsls	r0, (UNDEF: 2)
    2098:	51190077 	tstpl	r9, r7, ror r0
    209c:	0100000c 	tsteq	r0, ip
    20a0:	001a782f 	andseq	r7, sl, pc, lsr #16
    20a4:	00004420 	andeq	r4, r0, r0, lsr #8
    20a8:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    20ac:	2f010078 	svccs	0x00010078
    20b0:	0000005b 	andeq	r0, r0, fp, asr r0
    20b4:	106f9102 	rsbne	r9, pc, r2, lsl #2
    20b8:	31010063 	tstcc	r1, r3, rrx
    20bc:	0000005b 	andeq	r0, r0, fp, asr r0
    20c0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    20c4:	00014000 	andeq	r4, r1, r0
    20c8:	63000400 	movwvs	r0, #1024	; 0x400
    20cc:	04000009 	streq	r0, [r0], #-9
    20d0:	00004801 	andeq	r4, r0, r1, lsl #16
    20d4:	0d670c00 	stcleq	12, cr0, [r7, #-0]
    20d8:	1f980000 	svcne	0x00980000
    20dc:	00942000 	addseq	r2, r4, r0
    20e0:	0ab20000 	beq	fec820e8 <firstTime.4076+0xdec7cadc>
    20e4:	9d020000 	stcls	0, cr0, [r2, #-0]
    20e8:	14000002 	strne	r0, [r0], #-2
    20ec:	006a0402 	rsbeq	r0, sl, r2, lsl #8
    20f0:	62030000 	andvs	r0, r3, #0
    20f4:	0200000d 	andeq	r0, r0, #13
    20f8:	00006a05 	andeq	r6, r0, r5, lsl #20
    20fc:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
    2100:	02000004 	andeq	r0, r0, #4
    2104:	00006a06 	andeq	r6, r0, r6, lsl #20
    2108:	2e030400 	cfcpyscs	mvf0, mvf3
    210c:	02000000 	andeq	r0, r0, #0
    2110:	00007708 	andeq	r7, r0, r8, lsl #14
    2114:	e4030800 	str	r0, [r3], #-2048	; 0xfffff800
    2118:	02000004 	andeq	r0, r0, #4
    211c:	00007709 	andeq	r7, r0, r9, lsl #14
    2120:	b3030c00 	movwlt	r0, #15360	; 0x3c00
    2124:	02000002 	andeq	r0, r0, #2
    2128:	0000940c 	andeq	r9, r0, ip, lsl #8
    212c:	04001000 	streq	r1, [r0], #-0
    2130:	00007004 	andeq	r7, r0, r4
    2134:	08010500 	stmdaeq	r1, {r8, sl}
    2138:	000002c4 	andeq	r0, r0, r4, asr #5
    213c:	69050406 	stmdbvs	r5, {r1, r2, sl}
    2140:	0700746e 	streq	r7, [r0, -lr, ror #8]
    2144:	0000008e 	andeq	r0, r0, lr, lsl #1
    2148:	00008e08 	andeq	r8, r0, r8, lsl #28
    214c:	00770800 	rsbseq	r0, r7, r0, lsl #16
    2150:	04000000 	streq	r0, [r0], #-0
    2154:	00002104 	andeq	r2, r0, r4, lsl #2
    2158:	7e040400 	cfcpysvc	mvf0, mvf4
    215c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2160:	0000029e 	muleq	r0, lr, r2
    2164:	00210d02 	eoreq	r0, r1, r2, lsl #26
    2168:	490a0000 	stmdbmi	sl, {}	; <UNPREDICTABLE>
    216c:	0100000d 	tsteq	r0, sp
    2170:	001ff20c 	andseq	pc, pc, ip, lsl #4
    2174:	00003a20 	andeq	r3, r0, r0, lsr #20
    2178:	f39c0100 	vaddw.u16	q0, q6, d0
    217c:	0b000000 	bleq	2184 <startup-0x1fffde7c>
    2180:	006a626f 	rsbeq	r6, sl, pc, ror #4
    2184:	00f30c01 	rscseq	r0, r3, r1, lsl #24
    2188:	91020000 	mrsls	r0, (UNDEF: 2)
    218c:	0d620c74 	stcleq	12, cr0, [r2, #-464]!	; 0xfffffe30
    2190:	0c010000 	stceq	0, cr0, [r1], {-0}
    2194:	0000006a 	andeq	r0, r0, sl, rrx
    2198:	0c709102 	ldfeqp	f1, [r0], #-8
    219c:	0000043e 	andeq	r0, r0, lr, lsr r4
    21a0:	006a0c01 	rsbeq	r0, sl, r1, lsl #24
    21a4:	91020000 	mrsls	r0, (UNDEF: 2)
    21a8:	04e40c6c 	strbteq	r0, [r4], #3180	; 0xc6c
    21ac:	0c010000 	stceq	0, cr0, [r1], {-0}
    21b0:	00000077 	andeq	r0, r0, r7, ror r0
    21b4:	00689102 	rsbeq	r9, r8, r2, lsl #2
    21b8:	009a0404 	addseq	r0, sl, r4, lsl #8
    21bc:	b30d0000 	movwlt	r0, #53248	; 0xd000
    21c0:	01000002 	tsteq	r0, r2
    21c4:	001f9804 	andseq	r9, pc, r4, lsl #16
    21c8:	00005a20 	andeq	r5, r0, r0, lsr #20
    21cc:	0c9c0100 	ldfeqs	f0, [ip], {0}
    21d0:	0000059e 	muleq	r0, lr, r5
    21d4:	00f30401 	rscseq	r0, r3, r1, lsl #8
    21d8:	91020000 	mrsls	r0, (UNDEF: 2)
    21dc:	0d580c6c 	ldcleq	12, cr0, [r8, #-432]	; 0xfffffe50
    21e0:	04010000 	streq	r0, [r1], #-0
    21e4:	00000077 	andeq	r0, r0, r7, ror r0
    21e8:	0e689102 	lgneqe	f1, f2
    21ec:	00000d0c 	andeq	r0, r0, ip, lsl #26
    21f0:	00770501 	rsbseq	r0, r7, r1, lsl #10
    21f4:	91020000 	mrsls	r0, (UNDEF: 2)
    21f8:	0be80e74 	bleq	ffa05bd0 <firstTime.4076+0xdfa005c4>
    21fc:	06010000 	streq	r0, [r1], -r0
    2200:	00000077 	andeq	r0, r0, r7, ror r0
    2204:	00709102 	rsbseq	r9, r0, r2, lsl #2
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	01130200 	tsteq	r3, r0, lsl #4
  14:	0b3a0b0b 	bleq	e82c48 <startup-0x1f17d3b8>
  18:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  1c:	0d030000 	stceq	0, cr0, [r3, #-0]
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	000b3813 	andeq	r3, fp, r3, lsl r8
  2c:	00240400 	eoreq	r0, r4, r0, lsl #8
  30:	0b3e0b0b 	bleq	f82c64 <startup-0x1f07d39c>
  34:	00000e03 	andeq	r0, r0, r3, lsl #28
  38:	0b000f05 	bleq	3c54 <startup-0x1fffc3ac>
  3c:	0013490b 	andseq	r4, r3, fp, lsl #18
  40:	00160600 	andseq	r0, r6, r0, lsl #12
  44:	0b3a0e03 	bleq	e83858 <startup-0x1f17c7a8>
  48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  4c:	13070000 	movwne	r0, #28672	; 0x7000
  50:	0b0e0301 	bleq	380c5c <startup-0x1fc7f3a4>
  54:	3b0b3a0b 	blcc	2ce888 <startup-0x1fd31778>
  58:	0013010b 	andseq	r0, r3, fp, lsl #2
  5c:	00240800 	eoreq	r0, r4, r0, lsl #16
  60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
  64:	00000803 	andeq	r0, r0, r3, lsl #16
  68:	27011509 	strcs	r1, [r1, -r9, lsl #10]
  6c:	00130119 	andseq	r0, r3, r9, lsl r1
  70:	00050a00 	andeq	r0, r5, r0, lsl #20
  74:	00001349 	andeq	r1, r0, r9, asr #6
  78:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
  7c:	00130113 	andseq	r0, r3, r3, lsl r1
  80:	00210c00 	eoreq	r0, r1, r0, lsl #24
  84:	340d0000 	strcc	r0, [sp], #-0
  88:	3a0e0300 	bcc	380c90 <startup-0x1fc7f370>
  8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  90:	3c193f13 	ldccc	15, cr3, [r9], {19}
  94:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
  98:	13490021 	movtne	r0, #36897	; 0x9021
  9c:	0000052f 	andeq	r0, r0, pc, lsr #10
  a0:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
  a4:	000b2f13 	andeq	r2, fp, r3, lsl pc
  a8:	00341000 	eorseq	r1, r4, r0
  ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
  b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  b4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  b8:	34110000 	ldrcc	r0, [r1], #-0
  bc:	3a0e0300 	bcc	380cc4 <startup-0x1fc7f33c>
  c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  c4:	00180213 	andseq	r0, r8, r3, lsl r2
  c8:	00341200 	eorseq	r1, r4, r0, lsl #4
  cc:	0b3a0803 	bleq	e820e0 <startup-0x1f17df20>
  d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  d4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  d8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
  dc:	03193f01 	tsteq	r9, #1, 30
  e0:	3b0b3a0e 	blcc	2ce920 <startup-0x1fd316e0>
  e4:	1119270b 	tstne	r9, fp, lsl #14
  e8:	40061201 	andmi	r1, r6, r1, lsl #4
  ec:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  f0:	00001301 	andeq	r1, r0, r1, lsl #6
  f4:	11010b14 	tstne	r1, r4, lsl fp
  f8:	00061201 	andeq	r1, r6, r1, lsl #4
  fc:	002e1500 	eoreq	r1, lr, r0, lsl #10
 100:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 104:	0b3b0b3a 	bleq	ec2df4 <startup-0x1f13d20c>
 108:	01111927 	tsteq	r1, r7, lsr #18
 10c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 110:	00194296 	mulseq	r9, r6, r2
 114:	002e1600 	eoreq	r1, lr, r0, lsl #12
 118:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 11c:	0b3b0b3a 	bleq	ec2e0c <startup-0x1f13d1f4>
 120:	01111927 	tsteq	r1, r7, lsr #18
 124:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 128:	00194297 	mulseq	r9, r7, r2
 12c:	11010000 	mrsne	r0, (UNDEF: 1)
 130:	130e2501 	movwne	r2, #58625	; 0xe501
 134:	110e030b 	tstne	lr, fp, lsl #6
 138:	10061201 	andne	r1, r6, r1, lsl #4
 13c:	02000017 	andeq	r0, r0, #23
 140:	0b0b0113 	bleq	2c0594 <startup-0x1fd3fa6c>
 144:	0b3b0b3a 	bleq	ec2e34 <startup-0x1f13d1cc>
 148:	00001301 	andeq	r1, r0, r1, lsl #6
 14c:	03000d03 	movweq	r0, #3331	; 0xd03
 150:	3b0b3a0e 	blcc	2ce990 <startup-0x1fd31670>
 154:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 158:	0400000b 	streq	r0, [r0], #-11
 15c:	0b0b0024 	bleq	2c01f4 <startup-0x1fd3fe0c>
 160:	0e030b3e 	vmoveq.16	d3[0], r0
 164:	0f050000 	svceq	0x00050000
 168:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 16c:	06000013 			; <UNDEFINED> instruction: 0x06000013
 170:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 174:	0b3b0b3a 	bleq	ec2e64 <startup-0x1f13d19c>
 178:	00001349 	andeq	r1, r0, r9, asr #6
 17c:	03011307 	movweq	r1, #4871	; 0x1307
 180:	3a0b0b0e 	bcc	2c2dc0 <startup-0x1fd3d240>
 184:	010b3b0b 	tsteq	fp, fp, lsl #22
 188:	08000013 	stmdaeq	r0, {r0, r1, r4}
 18c:	0b0b0024 	bleq	2c0224 <startup-0x1fd3fddc>
 190:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 194:	15090000 	strne	r0, [r9, #-0]
 198:	01192701 	tsteq	r9, r1, lsl #14
 19c:	0a000013 	beq	1f0 <startup-0x1ffffe10>
 1a0:	13490005 	movtne	r0, #36869	; 0x9005
 1a4:	010b0000 	mrseq	r0, (UNDEF: 11)
 1a8:	01134901 	tsteq	r3, r1, lsl #18
 1ac:	0c000013 	stceq	0, cr0, [r0], {19}
 1b0:	00000021 	andeq	r0, r0, r1, lsr #32
 1b4:	0300340d 	movweq	r3, #1037	; 0x40d
 1b8:	3b0b3a0e 	blcc	2ce9f8 <startup-0x1fd31608>
 1bc:	3f13490b 	svccc	0x0013490b
 1c0:	00193c19 	andseq	r3, r9, r9, lsl ip
 1c4:	00340e00 	eorseq	r0, r4, r0, lsl #28
 1c8:	0b3a1347 	bleq	e84eec <startup-0x1f17b114>
 1cc:	18020b3b 	stmdane	r2, {r0, r1, r3, r4, r5, r8, r9, fp}
 1d0:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 1d4:	03193f01 	tsteq	r9, #1, 30
 1d8:	3b0b3a0e 	blcc	2cea18 <startup-0x1fd315e8>
 1dc:	1119270b 	tstne	r9, fp, lsl #14
 1e0:	40061201 	andmi	r1, r6, r1, lsl #4
 1e4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1e8:	00001301 	andeq	r1, r0, r1, lsl #6
 1ec:	03000510 	movweq	r0, #1296	; 0x510
 1f0:	3b0b3a0e 	blcc	2cea30 <startup-0x1fd315d0>
 1f4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1f8:	11000018 	tstne	r0, r8, lsl r0
 1fc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 200:	0b3a0e03 	bleq	e83a14 <startup-0x1f17c5ec>
 204:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 208:	06120111 			; <UNDEFINED> instruction: 0x06120111
 20c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 210:	00000019 	andeq	r0, r0, r9, lsl r0
 214:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 218:	030b130e 	movweq	r1, #45838	; 0xb30e
 21c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 220:	00171006 	andseq	r1, r7, r6
 224:	01130200 	tsteq	r3, r0, lsl #4
 228:	0b3a0b0b 	bleq	e82e5c <startup-0x1f17d1a4>
 22c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 230:	0d030000 	stceq	0, cr0, [r3, #-0]
 234:	3a0e0300 	bcc	380e3c <startup-0x1fc7f1c4>
 238:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 23c:	000b3813 	andeq	r3, fp, r3, lsl r8
 240:	00240400 	eoreq	r0, r4, r0, lsl #8
 244:	0b3e0b0b 	bleq	f82e78 <startup-0x1f07d188>
 248:	00000e03 	andeq	r0, r0, r3, lsl #28
 24c:	0b000f05 	bleq	3e68 <startup-0x1fffc198>
 250:	0013490b 	andseq	r4, r3, fp, lsl #18
 254:	00160600 	andseq	r0, r6, r0, lsl #12
 258:	0b3a0e03 	bleq	e83a6c <startup-0x1f17c594>
 25c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 260:	13070000 	movwne	r0, #28672	; 0x7000
 264:	0b0e0301 	bleq	380e70 <startup-0x1fc7f190>
 268:	3b0b3a0b 	blcc	2cea9c <startup-0x1fd31564>
 26c:	0013010b 	andseq	r0, r3, fp, lsl #2
 270:	00240800 	eoreq	r0, r4, r0, lsl #16
 274:	0b3e0b0b 	bleq	f82ea8 <startup-0x1f07d158>
 278:	00000803 	andeq	r0, r0, r3, lsl #16
 27c:	27011509 	strcs	r1, [r1, -r9, lsl #10]
 280:	00130119 	andseq	r0, r3, r9, lsl r1
 284:	00050a00 	andeq	r0, r5, r0, lsl #20
 288:	00001349 	andeq	r1, r0, r9, asr #6
 28c:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
 290:	00130113 	andseq	r0, r3, r3, lsl r1
 294:	00210c00 	eoreq	r0, r1, r0, lsl #24
 298:	340d0000 	strcc	r0, [sp], #-0
 29c:	3a0e0300 	bcc	380ea4 <startup-0x1fc7f15c>
 2a0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2a4:	3c193f13 	ldccc	15, cr3, [r9], {19}
 2a8:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
 2ac:	13490021 	movtne	r0, #36897	; 0x9021
 2b0:	00000b2f 	andeq	r0, r0, pc, lsr #22
 2b4:	0300340f 	movweq	r3, #1039	; 0x40f
 2b8:	3b0b3a0e 	blcc	2ceaf8 <startup-0x1fd31508>
 2bc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 2c0:	10000018 	andne	r0, r0, r8, lsl r0
 2c4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 2c8:	0b3b0b3a 	bleq	ec2fb8 <startup-0x1f13d048>
 2cc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 2d0:	00001802 	andeq	r1, r0, r2, lsl #16
 2d4:	3f012e11 	svccc	0x00012e11
 2d8:	3a0e0319 	bcc	380f44 <startup-0x1fc7f0bc>
 2dc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 2e0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2e4:	96184006 	ldrls	r4, [r8], -r6
 2e8:	13011942 	movwne	r1, #6466	; 0x1942
 2ec:	05120000 	ldreq	r0, [r2, #-0]
 2f0:	3a0e0300 	bcc	380ef8 <startup-0x1fc7f108>
 2f4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2f8:	00180213 	andseq	r0, r8, r3, lsl r2
 2fc:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
 300:	0b3a0e03 	bleq	e83b14 <startup-0x1f17c4ec>
 304:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 308:	06120111 			; <UNDEFINED> instruction: 0x06120111
 30c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 310:	00000019 	andeq	r0, r0, r9, lsl r0
 314:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 318:	030b130e 	movweq	r1, #45838	; 0xb30e
 31c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 320:	00171006 	andseq	r1, r7, r6
 324:	00240200 	eoreq	r0, r4, r0, lsl #4
 328:	0b3e0b0b 	bleq	f82f5c <startup-0x1f07d0a4>
 32c:	00000e03 	andeq	r0, r0, r3, lsl #28
 330:	0b011303 	bleq	44f44 <startup-0x1ffbb0bc>
 334:	3b0b3a0b 	blcc	2ceb68 <startup-0x1fd31498>
 338:	0013010b 	andseq	r0, r3, fp, lsl #2
 33c:	000d0400 	andeq	r0, sp, r0, lsl #8
 340:	0b3a0e03 	bleq	e83b54 <startup-0x1f17c4ac>
 344:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 348:	00000b38 	andeq	r0, r0, r8, lsr fp
 34c:	0b000f05 	bleq	3f68 <startup-0x1fffc098>
 350:	0013490b 	andseq	r4, r3, fp, lsl #18
 354:	00160600 	andseq	r0, r6, r0, lsl #12
 358:	0b3a0e03 	bleq	e83b6c <startup-0x1f17c494>
 35c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 360:	13070000 	movwne	r0, #28672	; 0x7000
 364:	0b0e0301 	bleq	380f70 <startup-0x1fc7f090>
 368:	3b0b3a0b 	blcc	2ceb9c <startup-0x1fd31464>
 36c:	0013010b 	andseq	r0, r3, fp, lsl #2
 370:	00240800 	eoreq	r0, r4, r0, lsl #16
 374:	0b3e0b0b 	bleq	f82fa8 <startup-0x1f07d058>
 378:	00000803 	andeq	r0, r0, r3, lsl #16
 37c:	27011509 	strcs	r1, [r1, -r9, lsl #10]
 380:	00130119 	andseq	r0, r3, r9, lsl r1
 384:	00050a00 	andeq	r0, r5, r0, lsl #20
 388:	00001349 	andeq	r1, r0, r9, asr #6
 38c:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
 390:	00130113 	andseq	r0, r3, r3, lsl r1
 394:	00210c00 	eoreq	r0, r1, r0, lsl #24
 398:	340d0000 	strcc	r0, [sp], #-0
 39c:	3a0e0300 	bcc	380fa4 <startup-0x1fc7f05c>
 3a0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3a4:	3c193f13 	ldccc	15, cr3, [r9], {19}
 3a8:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
 3ac:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 3b0:	0b3a0e03 	bleq	e83bc4 <startup-0x1f17c43c>
 3b4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 3b8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3bc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 3c0:	0f000019 	svceq	0x00000019
 3c4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 3c8:	0b3b0b3a 	bleq	ec30b8 <startup-0x1f13cf48>
 3cc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 3d0:	34100000 	ldrcc	r0, [r0], #-0
 3d4:	3a0e0300 	bcc	380fdc <startup-0x1fc7f024>
 3d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3dc:	00180213 	andseq	r0, r8, r3, lsl r2
 3e0:	11010000 	mrsne	r0, (UNDEF: 1)
 3e4:	130e2501 	movwne	r2, #58625	; 0xe501
 3e8:	110e030b 	tstne	lr, fp, lsl #6
 3ec:	10061201 	andne	r1, r6, r1, lsl #4
 3f0:	02000017 	andeq	r0, r0, #23
 3f4:	0b0b0113 	bleq	2c0848 <startup-0x1fd3f7b8>
 3f8:	0b3b0b3a 	bleq	ec30e8 <startup-0x1f13cf18>
 3fc:	00001301 	andeq	r1, r0, r1, lsl #6
 400:	03000d03 	movweq	r0, #3331	; 0xd03
 404:	3b0b3a0e 	blcc	2cec44 <startup-0x1fd313bc>
 408:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 40c:	0400000b 	streq	r0, [r0], #-11
 410:	0b0b0024 	bleq	2c04a8 <startup-0x1fd3fb58>
 414:	0e030b3e 	vmoveq.16	d3[0], r0
 418:	0f050000 	svceq	0x00050000
 41c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 420:	06000013 			; <UNDEFINED> instruction: 0x06000013
 424:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 428:	0b3b0b3a 	bleq	ec3118 <startup-0x1f13cee8>
 42c:	00001349 	andeq	r1, r0, r9, asr #6
 430:	03011307 	movweq	r1, #4871	; 0x1307
 434:	3a0b0b0e 	bcc	2c3074 <startup-0x1fd3cf8c>
 438:	010b3b0b 	tsteq	fp, fp, lsl #22
 43c:	08000013 	stmdaeq	r0, {r0, r1, r4}
 440:	0b0b0024 	bleq	2c04d8 <startup-0x1fd3fb28>
 444:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 448:	15090000 	strne	r0, [r9, #-0]
 44c:	01192701 	tsteq	r9, r1, lsl #14
 450:	0a000013 	beq	4a4 <startup-0x1ffffb5c>
 454:	13490005 	movtne	r0, #36869	; 0x9005
 458:	010b0000 	mrseq	r0, (UNDEF: 11)
 45c:	01134901 	tsteq	r3, r1, lsl #18
 460:	0c000013 	stceq	0, cr0, [r0], {19}
 464:	00000021 	andeq	r0, r0, r1, lsr #32
 468:	0300340d 	movweq	r3, #1037	; 0x40d
 46c:	3b0b3a0e 	blcc	2cecac <startup-0x1fd31354>
 470:	3f13490b 	svccc	0x0013490b
 474:	00193c19 	andseq	r3, r9, r9, lsl ip
 478:	00210e00 	eoreq	r0, r1, r0, lsl #28
 47c:	052f1349 	streq	r1, [pc, #-841]!	; 13b <startup-0x1ffffec5>
 480:	340f0000 	strcc	r0, [pc], #-0	; 488 <startup-0x1ffffb78>
 484:	3a134700 	bcc	4d208c <startup-0x1fb2df74>
 488:	020b3b0b 	andeq	r3, fp, #11264	; 0x2c00
 48c:	10000018 	andne	r0, r0, r8, lsl r0
 490:	13470034 	movtne	r0, #28724	; 0x7034
 494:	18020b3a 	stmdane	r2, {r1, r3, r4, r5, r8, r9, fp}
 498:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 49c:	03193f01 	tsteq	r9, #1, 30
 4a0:	3b0b3a0e 	blcc	2cece0 <startup-0x1fd31320>
 4a4:	11192705 	tstne	r9, r5, lsl #14
 4a8:	40061201 	andmi	r1, r6, r1, lsl #4
 4ac:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 4b0:	00001301 	andeq	r1, r0, r1, lsl #6
 4b4:	03000512 	movweq	r0, #1298	; 0x512
 4b8:	3b0b3a0e 	blcc	2cecf8 <startup-0x1fd31308>
 4bc:	02134905 	andseq	r4, r3, #81920	; 0x14000
 4c0:	13000018 	movwne	r0, #24
 4c4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 4c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 4cc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 4d0:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 4d4:	03193f01 	tsteq	r9, #1, 30
 4d8:	3b0b3a0e 	blcc	2ced18 <startup-0x1fd312e8>
 4dc:	11192705 	tstne	r9, r5, lsl #14
 4e0:	40061201 	andmi	r1, r6, r1, lsl #4
 4e4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 4e8:	00001301 	andeq	r1, r0, r1, lsl #6
 4ec:	03003415 	movweq	r3, #1045	; 0x415
 4f0:	3b0b3a08 	blcc	2ced18 <startup-0x1fd312e8>
 4f4:	02134905 	andseq	r4, r3, #81920	; 0x14000
 4f8:	16000018 			; <UNDEFINED> instruction: 0x16000018
 4fc:	08030034 	stmdaeq	r3, {r2, r4, r5}
 500:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 504:	00001349 	andeq	r1, r0, r9, asr #6
 508:	03000517 	movweq	r0, #1303	; 0x517
 50c:	3b0b3a08 	blcc	2ced34 <startup-0x1fd312cc>
 510:	02134905 	andseq	r4, r3, #81920	; 0x14000
 514:	18000018 	stmdane	r0, {r3, r4}
 518:	0111010b 	tsteq	r1, fp, lsl #2
 51c:	00000612 	andeq	r0, r0, r2, lsl r6
 520:	3f012e19 	svccc	0x00012e19
 524:	3a0e0319 	bcc	381190 <startup-0x1fc7ee70>
 528:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 52c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 530:	97184006 	ldrls	r4, [r8, -r6]
 534:	13011942 	movwne	r1, #6466	; 0x1942
 538:	051a0000 	ldreq	r0, [sl, #-0]
 53c:	3a080300 	bcc	201144 <startup-0x1fdfeebc>
 540:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 544:	00180213 	andseq	r0, r8, r3, lsl r2
 548:	00051b00 	andeq	r1, r5, r0, lsl #22
 54c:	0b3a0e03 	bleq	e83d60 <startup-0x1f17c2a0>
 550:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 554:	00001802 	andeq	r1, r0, r2, lsl #16
 558:	0300341c 	movweq	r3, #1052	; 0x41c
 55c:	3b0b3a0e 	blcc	2ced9c <startup-0x1fd31264>
 560:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 564:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
 568:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 56c:	0b3a0e03 	bleq	e83d80 <startup-0x1f17c280>
 570:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 574:	06120111 			; <UNDEFINED> instruction: 0x06120111
 578:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 57c:	00130119 	andseq	r0, r3, r9, lsl r1
 580:	00341e00 	eorseq	r1, r4, r0, lsl #28
 584:	0b3a0803 	bleq	e82598 <startup-0x1f17da68>
 588:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 58c:	00001802 	andeq	r1, r0, r2, lsl #16
 590:	3f002e1f 	svccc	0x00002e1f
 594:	3a0e0319 	bcc	381200 <startup-0x1fc7ee00>
 598:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 59c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 5a0:	96184006 	ldrls	r4, [r8], -r6
 5a4:	00001942 	andeq	r1, r0, r2, asr #18
 5a8:	3f012e20 	svccc	0x00012e20
 5ac:	3a0e0319 	bcc	381218 <startup-0x1fc7ede8>
 5b0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 5b4:	11134919 	tstne	r3, r9, lsl r9
 5b8:	40061201 	andmi	r1, r6, r1, lsl #4
 5bc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 5c0:	00001301 	andeq	r1, r0, r1, lsl #6
 5c4:	03012e21 	movweq	r2, #7713	; 0x1e21
 5c8:	3b0b3a0e 	blcc	2cee08 <startup-0x1fd311f8>
 5cc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 5d0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 5d4:	96184006 	ldrls	r4, [r8], -r6
 5d8:	13011942 	movwne	r1, #6466	; 0x1942
 5dc:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
 5e0:	3a0e0301 	bcc	3811ec <startup-0x1fc7ee14>
 5e4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 5e8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 5ec:	97184006 	ldrls	r4, [r8, -r6]
 5f0:	13011942 	movwne	r1, #6466	; 0x1942
 5f4:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
 5f8:	03193f00 	tsteq	r9, #0, 30
 5fc:	3b0b3a0e 	blcc	2cee3c <startup-0x1fd311c4>
 600:	1119270b 	tstne	r9, fp, lsl #14
 604:	40061201 	andmi	r1, r6, r1, lsl #4
 608:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 60c:	01000000 	mrseq	r0, (UNDEF: 0)
 610:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 614:	0e030b13 	vmoveq.32	d3[0], r0
 618:	06120111 			; <UNDEFINED> instruction: 0x06120111
 61c:	00001710 	andeq	r1, r0, r0, lsl r7
 620:	0b011302 	bleq	45230 <startup-0x1ffbadd0>
 624:	3b0b3a0b 	blcc	2cee58 <startup-0x1fd311a8>
 628:	0013010b 	andseq	r0, r3, fp, lsl #2
 62c:	000d0300 	andeq	r0, sp, r0, lsl #6
 630:	0b3a0e03 	bleq	e83e44 <startup-0x1f17c1bc>
 634:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 638:	00000b38 	andeq	r0, r0, r8, lsr fp
 63c:	0b002404 	bleq	9654 <startup-0x1fff69ac>
 640:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 644:	0500000e 	streq	r0, [r0, #-14]
 648:	0b0b000f 	bleq	2c068c <startup-0x1fd3f974>
 64c:	00001349 	andeq	r1, r0, r9, asr #6
 650:	03001606 	movweq	r1, #1542	; 0x606
 654:	3b0b3a0e 	blcc	2cee94 <startup-0x1fd3116c>
 658:	0013490b 	andseq	r4, r3, fp, lsl #18
 65c:	01130700 	tsteq	r3, r0, lsl #14
 660:	0b0b0e03 	bleq	2c3e74 <startup-0x1fd3c18c>
 664:	0b3b0b3a 	bleq	ec3354 <startup-0x1f13ccac>
 668:	00001301 	andeq	r1, r0, r1, lsl #6
 66c:	3f012e08 	svccc	0x00012e08
 670:	3a0e0319 	bcc	3812dc <startup-0x1fc7ed24>
 674:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 678:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 67c:	97184006 	ldrls	r4, [r8, -r6]
 680:	13011942 	movwne	r1, #6466	; 0x1942
 684:	05090000 	streq	r0, [r9, #-0]
 688:	3a0e0300 	bcc	381290 <startup-0x1fc7ed70>
 68c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 690:	00180213 	andseq	r0, r8, r3, lsl r2
 694:	11010000 	mrsne	r0, (UNDEF: 1)
 698:	130e2501 	movwne	r2, #58625	; 0xe501
 69c:	110e030b 	tstne	lr, fp, lsl #6
 6a0:	10061201 	andne	r1, r6, r1, lsl #4
 6a4:	02000017 	andeq	r0, r0, #23
 6a8:	0b0b0113 	bleq	2c0afc <startup-0x1fd3f504>
 6ac:	0b3b0b3a 	bleq	ec339c <startup-0x1f13cc64>
 6b0:	00001301 	andeq	r1, r0, r1, lsl #6
 6b4:	03000d03 	movweq	r0, #3331	; 0xd03
 6b8:	3b0b3a0e 	blcc	2ceef8 <startup-0x1fd31108>
 6bc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 6c0:	0400000b 	streq	r0, [r0], #-11
 6c4:	0b0b0024 	bleq	2c075c <startup-0x1fd3f8a4>
 6c8:	0e030b3e 	vmoveq.16	d3[0], r0
 6cc:	0f050000 	svceq	0x00050000
 6d0:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 6d4:	06000013 			; <UNDEFINED> instruction: 0x06000013
 6d8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 6dc:	0b3b0b3a 	bleq	ec33cc <startup-0x1f13cc34>
 6e0:	00001349 	andeq	r1, r0, r9, asr #6
 6e4:	3f012e07 	svccc	0x00012e07
 6e8:	3a0e0319 	bcc	381354 <startup-0x1fc7ecac>
 6ec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 6f0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 6f4:	97184006 	ldrls	r4, [r8, -r6]
 6f8:	13011942 	movwne	r1, #6466	; 0x1942
 6fc:	05080000 	streq	r0, [r8, #-0]
 700:	3a080300 	bcc	201308 <startup-0x1fdfecf8>
 704:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 708:	00180213 	andseq	r0, r8, r3, lsl r2
 70c:	00050900 	andeq	r0, r5, r0, lsl #18
 710:	0b3a0e03 	bleq	e83f24 <startup-0x1f17c0dc>
 714:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 718:	00001802 	andeq	r1, r0, r2, lsl #16
 71c:	0b00240a 	bleq	974c <startup-0x1fff68b4>
 720:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 724:	00000008 	andeq	r0, r0, r8
 728:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 72c:	030b130e 	movweq	r1, #45838	; 0xb30e
 730:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 734:	00171006 	andseq	r1, r7, r6
 738:	01130200 	tsteq	r3, r0, lsl #4
 73c:	0b3a0b0b 	bleq	e83370 <startup-0x1f17cc90>
 740:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 744:	0d030000 	stceq	0, cr0, [r3, #-0]
 748:	3a0e0300 	bcc	381350 <startup-0x1fc7ecb0>
 74c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 750:	000b3813 	andeq	r3, fp, r3, lsl r8
 754:	00240400 	eoreq	r0, r4, r0, lsl #8
 758:	0b3e0b0b 	bleq	f8338c <startup-0x1f07cc74>
 75c:	00000e03 	andeq	r0, r0, r3, lsl #28
 760:	03001605 	movweq	r1, #1541	; 0x605
 764:	3b0b3a0e 	blcc	2cefa4 <startup-0x1fd3105c>
 768:	0013490b 	andseq	r4, r3, fp, lsl #18
 76c:	012e0600 			; <UNDEFINED> instruction: 0x012e0600
 770:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 774:	0b3b0b3a 	bleq	ec3464 <startup-0x1f13cb9c>
 778:	13491927 	movtne	r1, #39207	; 0x9927
 77c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 780:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 784:	00130119 	andseq	r0, r3, r9, lsl r1
 788:	00050700 	andeq	r0, r5, r0, lsl #14
 78c:	0b3a0803 	bleq	e827a0 <startup-0x1f17d860>
 790:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 794:	00001802 	andeq	r1, r0, r2, lsl #16
 798:	03003408 	movweq	r3, #1032	; 0x408
 79c:	3b0b3a08 	blcc	2cefc4 <startup-0x1fd3103c>
 7a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 7a4:	09000018 	stmdbeq	r0, {r3, r4}
 7a8:	0b0b0024 	bleq	2c0840 <startup-0x1fd3f7c0>
 7ac:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 7b0:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
 7b4:	03193f00 	tsteq	r9, #0, 30
 7b8:	3b0b3a0e 	blcc	2ceff8 <startup-0x1fd31008>
 7bc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 7c0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 7c4:	97184006 	ldrls	r4, [r8, -r6]
 7c8:	00001942 	andeq	r1, r0, r2, asr #18
 7cc:	3f002e0b 	svccc	0x00002e0b
 7d0:	3a0e0319 	bcc	38143c <startup-0x1fc7ebc4>
 7d4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 7d8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 7dc:	97184006 	ldrls	r4, [r8, -r6]
 7e0:	00001942 	andeq	r1, r0, r2, asr #18
 7e4:	01110100 	tsteq	r1, r0, lsl #2
 7e8:	0b130e25 	bleq	4c4084 <startup-0x1fb3bf7c>
 7ec:	01110e03 	tsteq	r1, r3, lsl #28
 7f0:	17100612 			; <UNDEFINED> instruction: 0x17100612
 7f4:	13020000 	movwne	r0, #8192	; 0x2000
 7f8:	3a0b0b01 	bcc	2c3404 <startup-0x1fd3cbfc>
 7fc:	010b3b0b 	tsteq	fp, fp, lsl #22
 800:	03000013 	movweq	r0, #19
 804:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 808:	0b3b0b3a 	bleq	ec34f8 <startup-0x1f13cb08>
 80c:	0b381349 	bleq	e05538 <startup-0x1f1faac8>
 810:	24040000 	strcs	r0, [r4], #-0
 814:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 818:	000e030b 	andeq	r0, lr, fp, lsl #6
 81c:	000f0500 	andeq	r0, pc, r0, lsl #10
 820:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 824:	16060000 	strne	r0, [r6], -r0
 828:	3a0e0300 	bcc	381430 <startup-0x1fc7ebd0>
 82c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 830:	07000013 	smladeq	r0, r3, r0, r0
 834:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 838:	0b3a0b0b 	bleq	e8346c <startup-0x1f17cb94>
 83c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 840:	24080000 	strcs	r0, [r8], #-0
 844:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 848:	0008030b 	andeq	r0, r8, fp, lsl #6
 84c:	01150900 	tsteq	r5, r0, lsl #18
 850:	13011927 	movwne	r1, #6439	; 0x1927
 854:	050a0000 	streq	r0, [sl, #-0]
 858:	00134900 	andseq	r4, r3, r0, lsl #18
 85c:	01010b00 	tsteq	r1, r0, lsl #22
 860:	13011349 	movwne	r1, #4937	; 0x1349
 864:	210c0000 	mrscs	r0, (UNDEF: 12)
 868:	0d000000 	stceq	0, cr0, [r0, #-0]
 86c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 870:	0b3b0b3a 	bleq	ec3560 <startup-0x1f13caa0>
 874:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 878:	0000193c 	andeq	r1, r0, ip, lsr r9
 87c:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 880:	00052f13 	andeq	r2, r5, r3, lsl pc
 884:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
 888:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 88c:	0b3b0b3a 	bleq	ec357c <startup-0x1f13ca84>
 890:	01111927 	tsteq	r1, r7, lsr #18
 894:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 898:	01194296 			; <UNDEFINED> instruction: 0x01194296
 89c:	10000013 	andne	r0, r0, r3, lsl r0
 8a0:	08030034 	stmdaeq	r3, {r2, r4, r5}
 8a4:	0b3b0b3a 	bleq	ec3594 <startup-0x1f13ca6c>
 8a8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 8ac:	34110000 	ldrcc	r0, [r1], #-0
 8b0:	3a0e0300 	bcc	3814b8 <startup-0x1fc7eb48>
 8b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 8b8:	00180213 	andseq	r0, r8, r3, lsl r2
 8bc:	00211200 	eoreq	r1, r1, r0, lsl #4
 8c0:	0b2f1349 	bleq	bc55ec <startup-0x1f43aa14>
 8c4:	05130000 	ldreq	r0, [r3, #-0]
 8c8:	3a0e0300 	bcc	3814d0 <startup-0x1fc7eb30>
 8cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 8d0:	00180213 	andseq	r0, r8, r3, lsl r2
 8d4:	002e1400 	eoreq	r1, lr, r0, lsl #8
 8d8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 8dc:	0b3b0b3a 	bleq	ec35cc <startup-0x1f13ca34>
 8e0:	01111927 	tsteq	r1, r7, lsr #18
 8e4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 8e8:	00194296 	mulseq	r9, r6, r2
 8ec:	002e1500 	eoreq	r1, lr, r0, lsl #10
 8f0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 8f4:	0b3b0b3a 	bleq	ec35e4 <startup-0x1f13ca1c>
 8f8:	01111927 	tsteq	r1, r7, lsr #18
 8fc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 900:	00194297 	mulseq	r9, r7, r2
 904:	00051600 	andeq	r1, r5, r0, lsl #12
 908:	0b3a0803 	bleq	e8291c <startup-0x1f17d6e4>
 90c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 910:	00001802 	andeq	r1, r0, r2, lsl #16
 914:	3f012e17 	svccc	0x00012e17
 918:	3a0e0319 	bcc	381584 <startup-0x1fc7ea7c>
 91c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 920:	11134919 	tstne	r3, r9, lsl r9
 924:	40061201 	andmi	r1, r6, r1, lsl #4
 928:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 92c:	00001301 	andeq	r1, r0, r1, lsl #6
 930:	3f012e18 	svccc	0x00012e18
 934:	3a0e0319 	bcc	3815a0 <startup-0x1fc7ea60>
 938:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 93c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 940:	97184006 	ldrls	r4, [r8, -r6]
 944:	13011942 	movwne	r1, #6466	; 0x1942
 948:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 94c:	03193f01 	tsteq	r9, #1, 30
 950:	3b0b3a0e 	blcc	2cf190 <startup-0x1fd30e70>
 954:	1119270b 	tstne	r9, fp, lsl #14
 958:	40061201 	andmi	r1, r6, r1, lsl #4
 95c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 960:	01000000 	mrseq	r0, (UNDEF: 0)
 964:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 968:	0e030b13 	vmoveq.32	d3[0], r0
 96c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 970:	00001710 	andeq	r1, r0, r0, lsl r7
 974:	03011302 	movweq	r1, #4866	; 0x1302
 978:	3a0b0b0e 	bcc	2c35b8 <startup-0x1fd3ca48>
 97c:	010b3b0b 	tsteq	fp, fp, lsl #22
 980:	03000013 	movweq	r0, #19
 984:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 988:	0b3b0b3a 	bleq	ec3678 <startup-0x1f13c988>
 98c:	0b381349 	bleq	e056b8 <startup-0x1f1fa948>
 990:	0f040000 	svceq	0x00040000
 994:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 998:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
 99c:	0b0b0024 	bleq	2c0a34 <startup-0x1fd3f5cc>
 9a0:	0e030b3e 	vmoveq.16	d3[0], r0
 9a4:	24060000 	strcs	r0, [r6], #-0
 9a8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 9ac:	0008030b 	andeq	r0, r8, fp, lsl #6
 9b0:	01150700 	tsteq	r5, r0, lsl #14
 9b4:	13011927 	movwne	r1, #6439	; 0x1927
 9b8:	05080000 	streq	r0, [r8, #-0]
 9bc:	00134900 	andseq	r4, r3, r0, lsl #18
 9c0:	00160900 	andseq	r0, r6, r0, lsl #18
 9c4:	0b3a0e03 	bleq	e841d8 <startup-0x1f17be28>
 9c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 9cc:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
 9d0:	03193f01 	tsteq	r9, #1, 30
 9d4:	3b0b3a0e 	blcc	2cf214 <startup-0x1fd30dec>
 9d8:	1119270b 	tstne	r9, fp, lsl #14
 9dc:	40061201 	andmi	r1, r6, r1, lsl #4
 9e0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 9e4:	00001301 	andeq	r1, r0, r1, lsl #6
 9e8:	0300050b 	movweq	r0, #1291	; 0x50b
 9ec:	3b0b3a08 	blcc	2cf214 <startup-0x1fd30dec>
 9f0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 9f4:	0c000018 	stceq	0, cr0, [r0], {24}
 9f8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 9fc:	0b3b0b3a 	bleq	ec36ec <startup-0x1f13c914>
 a00:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 a04:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
 a08:	03193f01 	tsteq	r9, #1, 30
 a0c:	3b0b3a0e 	blcc	2cf24c <startup-0x1fd30db4>
 a10:	1119270b 	tstne	r9, fp, lsl #14
 a14:	40061201 	andmi	r1, r6, r1, lsl #4
 a18:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 a1c:	340e0000 	strcc	r0, [lr], #-0
 a20:	3a0e0300 	bcc	381628 <startup-0x1fc7e9d8>
 a24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 a28:	00180213 	andseq	r0, r8, r3, lsl r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000079c 	muleq	r0, ip, r7
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	07410002 	strbeq	r0, [r1, -r2]
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	200007ac 	andcs	r0, r0, ip, lsr #15
  3c:	00000056 	andeq	r0, r0, r6, asr r0
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	09250002 	stmdbeq	r5!, {r1}
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000804 	andcs	r0, r0, r4, lsl #16
  5c:	000002a8 	andeq	r0, r0, r8, lsr #5
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	0e540002 	cdpeq	0, 5, cr0, cr4, cr2, {0}
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000aac 	andcs	r0, r0, ip, lsr #21
  7c:	000000d8 	ldrdeq	r0, [r0], -r8
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	102d0002 	eorne	r0, sp, r2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000b84 	andcs	r0, r0, r4, lsl #23
  9c:	00000e44 	andeq	r0, r0, r4, asr #28
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	18d00002 	ldmne	r0, {r1}^
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200019c8 	andcs	r1, r0, r8, asr #19
  bc:	00000028 	andeq	r0, r0, r8, lsr #32
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	19d40002 	ldmibne	r4, {r1}^
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	200019f0 	strdcs	r1, [r0], -r0
  dc:	00000028 	andeq	r0, r0, r8, lsr #32
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	1a9b0002 	bne	fe6c00fc <firstTime.4076+0xde6baaf0>
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	20001a18 	andcs	r1, r0, r8, lsl sl
  fc:	00000060 	andeq	r0, r0, r0, rrx
	...
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	1bd40002 	blne	ff50011c <firstTime.4076+0xdf4fab10>
 110:	00040000 	andeq	r0, r4, r0
 114:	00000000 	andeq	r0, r0, r0
 118:	20001a78 	andcs	r1, r0, r8, ror sl
 11c:	00000520 	andeq	r0, r0, r0, lsr #10
	...
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	20c50002 	sbccs	r0, r5, r2
 130:	00040000 	andeq	r0, r4, r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20001f98 	mulcs	r0, r8, pc	; <UNPREDICTABLE>
 13c:	00000094 	muleq	r0, r4, r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200007ac 	andcs	r0, r0, ip, lsr #15
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000001f4 	strdeq	r0, [r0], -r4
   4:	01450002 	cmpeq	r5, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	6f6d2f3a 	svcvs	0x006d2f3a
  20:	2f632f70 	svccs	0x00632f70
  24:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
  28:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
  2c:	6f697461 	svcvs	0x00697461
  30:	2f72656e 	svccs	0x0072656e
  34:	73504944 	cmpvc	r0, #68, 18	; 0x110000
  38:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
  3c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
  40:	74730000 	ldrbtvc	r0, [r3], #-0
  44:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  48:	00632e70 	rsbeq	r2, r3, r0, ror lr
  4c:	73000001 	movwvc	r0, #1
  50:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
  54:	00682e65 	rsbeq	r2, r8, r5, ror #28
  58:	69000001 	stmdbvs	r0, {r0}
  5c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
  60:	0100682e 	tsteq	r0, lr, lsr #16
  64:	61670000 	cmnvs	r7, r0
  68:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
  6c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
  70:	0100682e 	tsteq	r0, lr, lsr #16
  74:	72670000 	rsbvc	r0, r7, #0
  78:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  7c:	682e7363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, ip, sp, lr}
  80:	00000100 	andeq	r0, r0, r0, lsl #2
  84:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
  88:	5f726574 	svcpl	0x00726574
  8c:	63616c62 	cmnvs	r1, #25088	; 0x6200
  90:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
  94:	0001006d 	andeq	r0, r1, sp, rrx
  98:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
  9c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
  a0:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
  a4:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
  a8:	01006d62 	tsteq	r0, r2, ror #26
  ac:	6f6d0000 	svcvs	0x006d0000
  b0:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
  b4:	72675f72 	rsbvc	r5, r7, #456	; 0x1c8
  b8:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
  bc:	01006d62 	tsteq	r0, r2, ror #26
  c0:	61630000 	cmnvs	r3, r0
  c4:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
  c8:	616c625f 	cmnvs	ip, pc, asr r2
  cc:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
  d0:	01006d62 	tsteq	r0, r2, ror #26
  d4:	61630000 	cmnvs	r3, r0
  d8:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
  dc:	6172675f 	cmnvs	r2, pc, asr r7
  e0:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
  e4:	0001006d 	andeq	r0, r1, sp, rrx
  e8:	73616300 	cmnvc	r1, #0, 6
  ec:	5f656c74 	svcpl	0x00656c74
  f0:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
  f4:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
  f8:	0001006d 	andeq	r0, r1, sp, rrx
  fc:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
 100:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
 104:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 108:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 10c:	00000100 	andeq	r0, r0, r0, lsl #2
 110:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 114:	72675f65 	rsbvc	r5, r7, #404	; 0x194
 118:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
 11c:	01006d62 	tsteq	r0, r2, ror #26
 120:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
 124:	5f656c74 	svcpl	0x00656c74
 128:	63616c62 	cmnvs	r1, #25088	; 0x6200
 12c:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
 130:	0001006d 	andeq	r0, r1, sp, rrx
 134:	6f6c7300 	svcvs	0x006c7300
 138:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
 13c:	682e7478 	stmdavs	lr!, {r3, r4, r5, r6, sl, ip, sp, lr}
 140:	00000100 	andeq	r0, r0, r0, lsl #2
 144:	782e6762 	stmdavc	lr!, {r1, r5, r6, r8, r9, sl, sp, lr}
 148:	01006d62 	tsteq	r0, r2, ror #26
 14c:	00000000 	andeq	r0, r0, r0
 150:	00000205 	andeq	r0, r0, r5, lsl #4
 154:	24032000 	strcs	r2, [r3], #-0
 158:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
 15c:	01010003 	tsteq	r1, r3
 160:	10020500 	andne	r0, r2, r0, lsl #10
 164:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
 168:	3d2f0119 	stfccs	f0, [pc, #-100]!	; 10c <startup-0x1ffffef4>
 16c:	03303030 	teqeq	r0, #48	; 0x30
 170:	2f3d7424 	svccs	0x003d7424
 174:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
 178:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
 17c:	2f3e672f 	svccs	0x003e672f
 180:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
 184:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
 188:	2f3d672f 	svccs	0x003d672f
 18c:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
 190:	1741023d 	smlaldxne	r0, r1, sp, r2
 194:	2f3c0a03 	svccs	0x003c0a03
 198:	bb758332 	bllt	1d60e68 <startup-0x1e29f198>
 19c:	5c595959 	mrrcpl	9, 5, r5, r9, cr9	; <UNPREDICTABLE>
 1a0:	59bb7583 	ldmibpl	fp!, {r0, r1, r7, r8, sl, ip, sp, lr}
 1a4:	580a0367 	stmdapl	sl, {r0, r1, r2, r5, r6, r8, r9}
 1a8:	59bb7583 	ldmibpl	fp!, {r0, r1, r7, r8, sl, ip, sp, lr}
 1ac:	59685b59 	stmdbpl	r8!, {r0, r3, r4, r6, r8, r9, fp, ip, lr}^
 1b0:	4d4b5959 	vstrmi.16	s11, [fp, #-178]	; 0xffffff4e	; <UNPREDICTABLE>
 1b4:	03594c59 	cmpeq	r9, #22784	; 0x5900
 1b8:	75754a0e 	ldrbvc	r4, [r5, #-2574]!	; 0xfffff5f2
 1bc:	75757575 	ldrbvc	r7, [r5, #-1397]!	; 0xfffffa8b
 1c0:	67757575 			; <UNDEFINED> instruction: 0x67757575
 1c4:	4e327775 	mrcmi	7, 1, r7, cr2, cr5, {3}
 1c8:	6793675a 			; <UNDEFINED> instruction: 0x6793675a
 1cc:	42675967 	rsbmi	r5, r7, #1687552	; 0x19c000
 1d0:	bbc99175 	bllt	ff2647ac <firstTime.4076+0xdf25f1a0>
 1d4:	d7c9c9c9 	strble	ip, [r9, r9, asr #19]
 1d8:	08c9f3c9 	stmiaeq	r9, {r0, r3, r6, r7, r8, r9, ip, sp, lr, pc}^
 1dc:	13630221 	cmnne	r3, #268435458	; 0x10000002
 1e0:	2f08c9f3 	svccs	0x0008c9f3
 1e4:	c91308c9 	ldmdbgt	r3, {r0, r3, r6, r7, fp}
 1e8:	08c92f08 	stmiaeq	r9, {r3, r8, r9, sl, fp, sp}^
 1ec:	91bebc2f 			; <UNDEFINED> instruction: 0x91bebc2f
 1f0:	02744f03 	rsbseq	r4, r4, #3, 30
 1f4:	01010016 	tsteq	r1, r6, lsl r0
 1f8:	0000008c 	andeq	r0, r0, ip, lsl #1
 1fc:	00720002 	rsbseq	r0, r2, r2
 200:	01020000 	mrseq	r0, (UNDEF: 2)
 204:	000d0efb 	strdeq	r0, [sp], -fp
 208:	01010101 	tsteq	r1, r1, lsl #2
 20c:	01000000 	mrseq	r0, (UNDEF: 0)
 210:	43010000 	movwmi	r0, #4096	; 0x1000
 214:	6f6d2f3a 	svcvs	0x006d2f3a
 218:	2f632f70 	svccs	0x00632f70
 21c:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 220:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 224:	6f697461 	svcvs	0x00697461
 228:	2f72656e 	svccs	0x0072656e
 22c:	70617267 	rsbvc	r7, r1, r7, ror #4
 230:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 234:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 238:	00007961 	andeq	r7, r0, r1, ror #18
 23c:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 240:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 244:	632e7463 			; <UNDEFINED> instruction: 0x632e7463
 248:	00000100 	andeq	r0, r0, r0, lsl #2
 24c:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 250:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
 254:	00000100 	andeq	r0, r0, r0, lsl #2
 258:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
 25c:	00682e65 	rsbeq	r2, r8, r5, ror #28
 260:	67000001 	strvs	r0, [r0, -r1]
 264:	6f656d61 	svcvs	0x00656d61
 268:	63656a62 	cmnvs	r5, #401408	; 0x62000
 26c:	00682e74 	rsbeq	r2, r8, r4, ror lr
 270:	00000001 	andeq	r0, r0, r1
 274:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
 278:	19200007 	stmdbne	r0!, {r0, r1, r2}
 27c:	594b4c4c 	stmdbpl	fp, {r2, r3, r6, sl, fp, lr}^
 280:	02ca3d67 	sbceq	r3, sl, #6592	; 0x19c0
 284:	01010004 	tsteq	r1, r4
 288:	00000184 	andeq	r0, r0, r4, lsl #3
 28c:	01370002 	teqeq	r7, r2
 290:	01020000 	mrseq	r0, (UNDEF: 2)
 294:	000d0efb 	strdeq	r0, [sp], -fp
 298:	01010101 	tsteq	r1, r1, lsl #2
 29c:	01000000 	mrseq	r0, (UNDEF: 0)
 2a0:	43010000 	movwmi	r0, #4096	; 0x1000
 2a4:	6f6d2f3a 	svcvs	0x006d2f3a
 2a8:	2f632f70 	svccs	0x00632f70
 2ac:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 2b0:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 2b4:	6f697461 	svcvs	0x00697461
 2b8:	2f72656e 	svccs	0x0072656e
 2bc:	73504944 	cmpvc	r0, #68, 18	; 0x110000
 2c0:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
 2c4:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
 2c8:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
 2cc:	632e6572 			; <UNDEFINED> instruction: 0x632e6572
 2d0:	00000100 	andeq	r0, r0, r0, lsl #2
 2d4:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 2d8:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
 2dc:	00000100 	andeq	r0, r0, r0, lsl #2
 2e0:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
 2e4:	00682e65 	rsbeq	r2, r8, r5, ror #28
 2e8:	67000001 	strvs	r0, [r0, -r1]
 2ec:	6f656d61 	svcvs	0x00656d61
 2f0:	63656a62 	cmnvs	r5, #401408	; 0x62000
 2f4:	00682e74 	rsbeq	r2, r8, r4, ror lr
 2f8:	66000001 	strvs	r0, [r0], -r1
 2fc:	5f657269 	svcpl	0x00657269
 300:	63616c62 	cmnvs	r1, #25088	; 0x6200
 304:	2e325f6b 	cdpcs	15, 3, cr5, cr2, cr11, {3}
 308:	006d6278 	rsbeq	r6, sp, r8, ror r2
 30c:	66000001 	strvs	r0, [r0], -r1
 310:	31657269 	cmncc	r5, r9, ror #4
 314:	6172675f 	cmnvs	r2, pc, asr r7
 318:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
 31c:	0001006d 	andeq	r0, r1, sp, rrx
 320:	72696600 	rsbvc	r6, r9, #0, 12
 324:	6c5f3165 	ldfvse	f3, [pc], {101}	; 0x65
 328:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 32c:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 330:	00000100 	andeq	r0, r0, r0, lsl #2
 334:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 338:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
 33c:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
 340:	01006d62 	tsteq	r0, r2, ror #26
 344:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
 348:	5f326572 	svcpl	0x00326572
 34c:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 350:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
 354:	0001006d 	andeq	r0, r1, sp, rrx
 358:	72696600 	rsbvc	r6, r9, #0, 12
 35c:	675f3365 	ldrbvs	r3, [pc, -r5, ror #6]
 360:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
 364:	006d6278 	rsbeq	r6, sp, r8, ror r2
 368:	66000001 	strvs	r0, [r0], -r1
 36c:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
 370:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
 374:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
 378:	01006d62 	tsteq	r0, r2, ror #26
 37c:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
 380:	5f346572 	svcpl	0x00346572
 384:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
 388:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 38c:	00000100 	andeq	r0, r0, r0, lsl #2
 390:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 394:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 398:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
 39c:	006d6278 	rsbeq	r6, sp, r8, ror r2
 3a0:	66000001 	strvs	r0, [r0], -r1
 3a4:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
 3a8:	6172675f 	cmnvs	r2, pc, asr r7
 3ac:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
 3b0:	0001006d 	andeq	r0, r1, sp, rrx
 3b4:	72696600 	rsbvc	r6, r9, #0, 12
 3b8:	6c5f3565 	cfldr64vs	mvdx3, [pc], {101}	; 0x65
 3bc:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 3c0:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 3c4:	00000100 	andeq	r0, r0, r0, lsl #2
 3c8:	02050000 	andeq	r0, r5, #0
 3cc:	20000804 	andcs	r0, r0, r4, lsl #16
 3d0:	3d013003 	stccc	0, cr3, [r1, #-12]
 3d4:	2f3e672f 	svccs	0x003e672f
 3d8:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
 3dc:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
 3e0:	2f3e672f 	svccs	0x003e672f
 3e4:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
 3e8:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
 3ec:	2f3e672f 	svccs	0x003e672f
 3f0:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
 3f4:	1446023d 	strbne	r0, [r6], #-573	; 0xfffffdc3
 3f8:	3e2f4b4c 	vnmulcc.f64	d4, d15, d12
 3fc:	5959594b 	ldmdbpl	r9, {r0, r1, r3, r6, r8, fp, ip, lr}^
 400:	9191915a 	orrsls	r9, r1, sl, asr r1
 404:	3d3e9391 	ldccc	3, cr9, [lr, #-580]!	; 0xfffffdbc
 408:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
 40c:	01010031 	tsteq	r1, r1, lsr r0
 410:	0000009d 	muleq	r0, sp, r0
 414:	006c0002 	rsbeq	r0, ip, r2
 418:	01020000 	mrseq	r0, (UNDEF: 2)
 41c:	000d0efb 	strdeq	r0, [sp], -fp
 420:	01010101 	tsteq	r1, r1, lsl #2
 424:	01000000 	mrseq	r0, (UNDEF: 0)
 428:	43010000 	movwmi	r0, #4096	; 0x1000
 42c:	6f6d2f3a 	svcvs	0x006d2f3a
 430:	2f632f70 	svccs	0x00632f70
 434:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 438:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 43c:	6f697461 	svcvs	0x00697461
 440:	2f72656e 	svccs	0x0072656e
 444:	73504944 	cmpvc	r0, #68, 18	; 0x110000
 448:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
 44c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
 450:	6c700000 	ldclvs	0, cr0, [r0], #-0
 454:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
 458:	0100632e 	tsteq	r0, lr, lsr #6
 45c:	70730000 	rsbsvc	r0, r3, r0
 460:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 464:	0100682e 	tsteq	r0, lr, lsr #16
 468:	6d690000 	stclvs	0, cr0, [r9, #-0]
 46c:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
 470:	00010068 	andeq	r0, r1, r8, rrx
 474:	6d616700 	stclvs	7, cr6, [r1, #-0]
 478:	6a626f65 	bvs	189c214 <startup-0x1e763dec>
 47c:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 480:	00010068 	andeq	r0, r1, r8, rrx
 484:	05000000 	streq	r0, [r0, #-0]
 488:	000aac02 	andeq	sl, sl, r2, lsl #24
 48c:	594b1720 	stmdbpl	fp, {r5, r8, r9, sl, ip}^
 490:	00cf3d67 	sbceq	r3, pc, r7, ror #26
 494:	06010402 	streq	r0, [r1], -r2, lsl #8
 498:	5b59064a 	blpl	1641dc8 <startup-0x1e9be238>
 49c:	01040200 	mrseq	r0, R12_usr
 4a0:	59064a06 	stmdbpl	r6, {r1, r2, r9, fp, lr}
 4a4:	684b765b 	stmdavs	fp, {r0, r1, r3, r4, r6, r9, sl, ip, sp, lr}^
 4a8:	68675b4b 	stmdavs	r7!, {r0, r1, r3, r6, r8, r9, fp, ip, lr}^
 4ac:	01000b02 	tsteq	r0, r2, lsl #22
 4b0:	00034e01 	andeq	r4, r3, r1, lsl #28
 4b4:	7c000200 	sfmvc	f0, 4, [r0], {-0}
 4b8:	02000000 	andeq	r0, r0, #0
 4bc:	0d0efb01 	vstreq	d15, [lr, #-4]
 4c0:	01010100 	mrseq	r0, (UNDEF: 17)
 4c4:	00000001 	andeq	r0, r0, r1
 4c8:	01000001 	tsteq	r0, r1
 4cc:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
 4d0:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
 4d4:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 4d8:	6f62616c 	svcvs	0x0062616c
 4dc:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 4e0:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 4e4:	5049442f 	subpl	r4, r9, pc, lsr #8
 4e8:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
 4ec:	2f686374 	svccs	0x00686374
 4f0:	67000043 	strvs	r0, [r0, -r3, asr #32]
 4f4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 4f8:	2e736369 	cdpcs	3, 7, cr6, cr3, cr9, {3}
 4fc:	00010063 	andeq	r0, r1, r3, rrx
 500:	72707300 	rsbsvc	r7, r0, #0, 6
 504:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
 508:	00010068 	andeq	r0, r1, r8, rrx
 50c:	616d6900 	cmnvs	sp, r0, lsl #18
 510:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
 514:	00000100 	andeq	r0, r0, r0, lsl #2
 518:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 51c:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 520:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
 524:	00000100 	andeq	r0, r0, r0, lsl #2
 528:	70617267 	rsbvc	r7, r1, r7, ror #4
 52c:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
 530:	0100682e 	tsteq	r0, lr, lsr #16
 534:	00000000 	andeq	r0, r0, r0
 538:	0b840205 	bleq	fe100d54 <firstTime.4076+0xde0fb748>
 53c:	30152000 	andscc	r2, r5, r0
 540:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 544:	01040200 	mrseq	r0, R12_usr
 548:	67062006 	strvs	r2, [r6, -r6]
 54c:	3d30a03d 	ldccc	0, cr10, [r0, #-244]!	; 0xffffff0c
 550:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
 554:	06010402 	streq	r0, [r1], -r2, lsl #8
 558:	3d670620 	stclcc	6, cr0, [r7, #-128]!	; 0xffffff80
 55c:	2f214ba0 	svccs	0x00214ba0
 560:	5e2a2f2f 	cdppl	15, 2, cr2, cr10, cr15, {1}
 564:	57214f4c 	strpl	r4, [r1, -ip, asr #30]!
 568:	4a09035b 	bmi	2412dc <startup-0x1fdbed24>
 56c:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
 570:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 574:	00570304 	subseq	r0, r7, r4, lsl #6
 578:	06010402 	streq	r0, [r1], -r2, lsl #8
 57c:	674c063c 	smlaldxvs	r0, ip, ip, r6
 580:	2f674b2f 	svccs	0x00674b2f
 584:	a14b4b4b 	cmpge	fp, fp, asr #22
 588:	83915968 	orrshi	r5, r1, #104, 18	; 0x1a0000
 58c:	59687659 	stmdbpl	r8!, {r0, r3, r4, r6, r9, sl, ip, sp, lr}^
 590:	675983d7 	smmlsvs	r9, r7, r3, r8
 594:	74120367 	ldrvc	r0, [r2], #-871	; 0xfffffc99
 598:	03206e03 			; <UNDEFINED> instruction: 0x03206e03
 59c:	70034a12 	andvc	r4, r3, r2, lsl sl
 5a0:	223d3d20 	eorscs	r3, sp, #32, 26	; 0x800
 5a4:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 5a8:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
 5ac:	3d3e4c22 	ldccc	12, cr4, [lr, #-136]!	; 0xffffff78
 5b0:	313d3d3d 	teqcc	sp, sp, lsr sp
 5b4:	3d752f3d 	ldclcc	15, cr2, [r5, #-244]!	; 0xffffff0c
 5b8:	4a790331 	bmi	1e41284 <startup-0x1e1bed7c>
 5bc:	bc3d2327 	ldclt	3, cr2, [sp], #-156	; 0xffffff64
 5c0:	3d3d3d67 	ldccc	13, cr3, [sp, #-412]!	; 0xfffffe64
 5c4:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 5c8:	3e3d592f 	vaddcc.f16	s10, s26, s31	; <UNPREDICTABLE>
 5cc:	4b303d4b 	blmi	c0fb00 <startup-0x1f3f0500>
 5d0:	bc3d313d 	ldflts	f3, [sp], #-244	; 0xffffff0c
 5d4:	5a595967 	bpl	1656b78 <startup-0x1e9a9488>
 5d8:	2f594b91 	svccs	0x00594b91
 5dc:	593e2f3d 	ldmdbpl	lr!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}
 5e0:	3d59303d 	ldclcc	0, cr3, [r9, #-244]	; 0xffffff0c
 5e4:	3d3d3d31 	ldccc	13, cr3, [sp, #-196]!	; 0xffffff3c
 5e8:	593d9167 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, ip, pc}
 5ec:	4b833d3d 	blmi	fe0cfae8 <firstTime.4076+0xde0ca4dc>
 5f0:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 5f4:	2f4c833d 	svccs	0x004c833d
 5f8:	3d3d3e3d 	ldccc	14, cr3, [sp, #-244]!	; 0xffffff0c
 5fc:	3d3d3e3d 	ldccc	14, cr3, [sp, #-244]!	; 0xffffff0c
 600:	4b4b4b3e 	blmi	12d3300 <startup-0x1ed2cd00>
 604:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
 608:	4c9f4b3e 	vldmiami	pc, {d4-<overflow reg d34>}
 60c:	03040200 	movweq	r0, #16896	; 0x4200
 610:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 614:	02004903 	andeq	r4, r0, #49152	; 0xc000
 618:	58060104 	stmdapl	r6, {r2, r8}
 61c:	02040200 	andeq	r0, r4, #0, 4
 620:	02004606 	andeq	r4, r0, #6291456	; 0x600000
 624:	58060104 	stmdapl	r6, {r2, r8}
 628:	764d5206 	strbvc	r5, [sp], -r6, lsl #4
 62c:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 630:	004a0601 	subeq	r0, sl, r1, lsl #12
 634:	4a020402 	bmi	81644 <startup-0x1ff7e9bc>
 638:	03040200 	movweq	r0, #16896	; 0x4200
 63c:	084c064a 	stmdaeq	ip, {r1, r3, r6, r9, sl}^
 640:	3e3d3d13 	mrccc	13, 1, r3, cr13, cr3, {0}
 644:	76763dbc 			; <UNDEFINED> instruction: 0x76763dbc
 648:	d71fd93d 			; <UNDEFINED> instruction: 0xd71fd93d
 64c:	1fd93d23 	svcne	0x00d93d23
 650:	d93d23d7 	ldmdble	sp!, {r0, r1, r2, r4, r6, r7, r8, r9, sp}
 654:	6103d71f 	tstvs	r3, pc, lsl r7
 658:	2023032e 	eorcs	r0, r3, lr, lsr #6
 65c:	020069af 	andeq	r6, r0, #2867200	; 0x2bc000
 660:	4a060104 	bmi	180a78 <startup-0x1fe7f588>
 664:	02040200 	andeq	r0, r4, #0, 4
 668:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
 66c:	4b064a03 	blmi	192e80 <startup-0x1fe6d180>
 670:	59130875 	ldmdbpl	r3, {r0, r2, r4, r5, r6, fp}
 674:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 678:	3d5b5959 	vldrcc.16	s11, [fp, #-178]	; 0xffffff4e	; <UNPREDICTABLE>
 67c:	4c4b3d76 	mcrrmi	13, 7, r3, fp, cr6
 680:	d8c93e4b 	stmiale	r9, {r0, r1, r3, r6, r9, sl, fp, ip, sp}^
 684:	ae3dca9f 			; <UNDEFINED> instruction: 0xae3dca9f
 688:	ac5e03a0 	mrrcge	3, 10, r0, lr, cr0
 68c:	84202303 	strthi	r2, [r0], #-771	; 0xfffffcfd
 690:	00592f4c 	subseq	r2, r9, ip, asr #30
 694:	06010402 	streq	r0, [r1], -r2, lsl #8
 698:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 69c:	02002e02 	andeq	r2, r0, #2, 28
 6a0:	00200404 	eoreq	r0, r0, r4, lsl #8
 6a4:	06040402 	streq	r0, [r4], -r2, lsl #8
 6a8:	75d7593d 	ldrbvc	r5, [r7, #2365]	; 0x93d
 6ac:	03040200 	movweq	r0, #16896	; 0x4200
 6b0:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
 6b4:	0200ab03 	andeq	sl, r0, #3072	; 0xc00
 6b8:	9e060104 	adflss	f0, f6, f4
 6bc:	02040200 	andeq	r0, r4, #0, 4
 6c0:	02005506 	andeq	r5, r0, #25165824	; 0x1800000
 6c4:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
 6c8:	02040200 	andeq	r0, r4, #0, 4
 6cc:	02005606 	andeq	r5, r0, #6291456	; 0x600000
 6d0:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
 6d4:	580a0306 	stmdapl	sl, {r1, r2, r8, r9}
 6d8:	5a597652 	bpl	165e028 <startup-0x1e9a1fd8>
 6dc:	bb3d3d59 	bllt	f4fc48 <startup-0x1f0b03b8>
 6e0:	3de6913d 	stfccp	f1, [r6, #244]!	; 0xf4
 6e4:	02006708 	andeq	r6, r0, #8, 14	; 0x200000
 6e8:	7a030204 	bvc	c0f00 <startup-0x1ff3f100>
 6ec:	02006608 	andeq	r6, r0, #8, 12	; 0x800000
 6f0:	3c060104 	stfccs	f0, [r6], {4}
 6f4:	02040200 	andeq	r0, r4, #0, 4
 6f8:	02003a06 	andeq	r3, r0, #24576	; 0x6000
 6fc:	3c060104 	stfccs	f0, [r6], {4}
 700:	02040200 	andeq	r0, r4, #0, 4
 704:	02004906 	andeq	r4, r0, #98304	; 0x18000
 708:	3c060104 	stfccs	f0, [r6], {4}
 70c:	580e0306 	stmdapl	lr, {r1, r2, r8, r9}
 710:	003d774c 	eorseq	r7, sp, ip, asr #14
 714:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 718:	03040200 	movweq	r0, #16896	; 0x4200
 71c:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
 720:	003c0601 	eorseq	r0, ip, r1, lsl #12
 724:	06020402 	streq	r0, [r2], -r2, lsl #8
 728:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
 72c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 730:	3d774c6b 	ldclcc	12, cr4, [r7, #-428]!	; 0xfffffe54
 734:	03040200 	movweq	r0, #16896	; 0x4200
 738:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 73c:	02006503 	andeq	r6, r0, #12582912	; 0xc00000
 740:	3c060104 	stfccs	f0, [r6], {4}
 744:	02040200 	andeq	r0, r4, #0, 4
 748:	02006506 	andeq	r6, r0, #25165824	; 0x1800000
 74c:	3c060104 	stfccs	f0, [r6], {4}
 750:	3d4d6b06 	vstrcc	d22, [sp, #-24]	; 0xffffffe8
 754:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
 758:	02006930 	andeq	r6, r0, #48, 18	; 0xc0000
 75c:	00300104 	eorseq	r0, r0, r4, lsl #2
 760:	2f010402 	svccs	0x00010402
 764:	01040200 	mrseq	r0, R12_usr
 768:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 76c:	0200c901 	andeq	ip, r0, #16384	; 0x4000
 770:	13080104 	movwne	r0, #33028	; 0x8104
 774:	01040200 	mrseq	r0, R12_usr
 778:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 77c:	02002f01 	andeq	r2, r0, #1, 30
 780:	00680104 	rsbeq	r0, r8, r4, lsl #2
 784:	c9010402 	stmdbgt	r1, {r1, sl}
 788:	01040200 	mrseq	r0, R12_usr
 78c:	02001308 	andeq	r1, r0, #8, 6	; 0x20000000
 790:	00920104 	addseq	r0, r2, r4, lsl #2
 794:	4b010402 	blmi	417a4 <startup-0x1ffbe85c>
 798:	01040200 	mrseq	r0, R12_usr
 79c:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 7a0:	02002f01 	andeq	r2, r0, #1, 30
 7a4:	00670104 	rsbeq	r0, r7, r4, lsl #2
 7a8:	08010402 	stmdaeq	r1, {r1, sl}
 7ac:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 7b0:	02004c01 	andeq	r4, r0, #256	; 0x100
 7b4:	6c030104 	stfvss	f0, [r3], {4}
 7b8:	3c19033c 	ldccc	3, cr0, [r9], {60}	; 0x3c
 7bc:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 7c0:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 7c4:	91080304 	tstls	r8, r4, lsl #6
 7c8:	03040200 	movweq	r0, #16896	; 0x4200
 7cc:	02009108 	andeq	r9, r0, #8, 2
 7d0:	91080304 	tstls	r8, r4, lsl #6
 7d4:	03040200 	movweq	r0, #16896	; 0x4200
 7d8:	02004608 	andeq	r4, r0, #8, 12	; 0x800000
 7dc:	3c060104 	stfccs	f0, [r6], {4}
 7e0:	3e085006 	cdpcc	0, 0, cr5, cr8, cr6, {0}
 7e4:	21083d4b 	tstcs	r8, fp, asr #26
 7e8:	21082108 	tstcs	r8, r8, lsl #2
 7ec:	21304b4d 	teqcs	r0, sp, asr #22
 7f0:	3e4b3e4b 	cdpcc	14, 4, cr3, cr11, cr11, {2}
 7f4:	034b3e4b 	movteq	r3, #48715	; 0xbe4b
 7f8:	0e033c75 	mcreq	12, 0, r3, cr3, cr5, {3}
 7fc:	0b023058 	bleq	8c964 <startup-0x1ff7369c>
 800:	72010100 	andvc	r0, r1, #0, 2
 804:	02000000 	andeq	r0, r0, #0
 808:	00005b00 	andeq	r5, r0, r0, lsl #22
 80c:	fb010200 	blx	41016 <startup-0x1ffbefea>
 810:	01000d0e 	tsteq	r0, lr, lsl #26
 814:	00010101 	andeq	r0, r1, r1, lsl #2
 818:	00010000 	andeq	r0, r1, r0
 81c:	3a430100 	bcc	10c0c24 <startup-0x1ef3f3dc>
 820:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 824:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 770 <startup-0x1ffff890>
 828:	616c706f 	cmnvs	ip, pc, rrx
 82c:	61726f62 	cmnvs	r2, r2, ror #30
 830:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 834:	442f7265 	strtmi	r7, [pc], #-613	; 83c <startup-0x1ffff7c4>
 838:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
 83c:	63746957 	cmnvs	r4, #1425408	; 0x15c000
 840:	00432f68 	subeq	r2, r3, r8, ror #30
 844:	616d6900 	cmnvs	sp, r0, lsl #18
 848:	632e6567 			; <UNDEFINED> instruction: 0x632e6567
 84c:	00000100 	andeq	r0, r0, r0, lsl #2
 850:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 854:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
 858:	00000100 	andeq	r0, r0, r0, lsl #2
 85c:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
 860:	00682e65 	rsbeq	r2, r8, r5, ror #28
 864:	00000001 	andeq	r0, r0, r1
 868:	c8020500 	stmdagt	r2, {r8, sl}
 86c:	14200019 	strtne	r0, [r0], #-25	; 0xffffffe7
 870:	3d3d3d75 	ldccc	13, cr3, [sp, #-468]!	; 0xfffffe2c
 874:	01000402 	tsteq	r0, r2, lsl #8
 878:	00006801 	andeq	r6, r0, r1, lsl #16
 87c:	51000200 	mrspl	r0, R8_usr
 880:	02000000 	andeq	r0, r0, #0
 884:	0d0efb01 	vstreq	d15, [lr, #-4]
 888:	01010100 	mrseq	r0, (UNDEF: 17)
 88c:	00000001 	andeq	r0, r0, r1
 890:	01000001 	tsteq	r0, r1
 894:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
 898:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
 89c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 8a0:	6f62616c 	svcvs	0x0062616c
 8a4:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 8a8:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 8ac:	5049442f 	subpl	r4, r9, pc, lsr #8
 8b0:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
 8b4:	2f686374 	svccs	0x00686374
 8b8:	73000043 	movwvc	r0, #67	; 0x43
 8bc:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 8c0:	00632e65 	rsbeq	r2, r3, r5, ror #28
 8c4:	73000001 	movwvc	r0, #1
 8c8:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 8cc:	00682e65 	rsbeq	r2, r8, r5, ror #28
 8d0:	00000001 	andeq	r0, r0, r1
 8d4:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
 8d8:	15200019 	strne	r0, [r0, #-25]!	; 0xffffffe7
 8dc:	3d3d3d75 	ldccc	13, cr3, [sp, #-468]!	; 0xfffffe2c
 8e0:	01000402 	tsteq	r0, r2, lsl #8
 8e4:	00006b01 	andeq	r6, r0, r1, lsl #22
 8e8:	4d000200 	sfmmi	f0, 4, [r0, #-0]
 8ec:	02000000 	andeq	r0, r0, #0
 8f0:	0d0efb01 	vstreq	d15, [lr, #-4]
 8f4:	01010100 	mrseq	r0, (UNDEF: 17)
 8f8:	00000001 	andeq	r0, r0, r1
 8fc:	01000001 	tsteq	r0, r1
 900:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
 904:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
 908:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 90c:	6f62616c 	svcvs	0x0062616c
 910:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 914:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 918:	5049442f 	subpl	r4, r9, pc, lsr #8
 91c:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
 920:	2f686374 	svccs	0x00686374
 924:	67000043 	strvs	r0, [r0, -r3, asr #32]
 928:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 92c:	00010063 	andeq	r0, r1, r3, rrx
 930:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 934:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 938:	00000001 	andeq	r0, r0, r1
 93c:	18020500 	stmdane	r2, {r8, sl}
 940:	1520001a 	strne	r0, [r0, #-26]!	; 0xffffffe6
 944:	2f763d2f 	svccs	0x00763d2f
 948:	674b5b3d 	smlaldxvs	r5, fp, sp, fp
 94c:	02223091 	eoreq	r3, r2, #145	; 0x91
 950:	01010004 	tsteq	r1, r4
 954:	0000015a 	andeq	r0, r0, sl, asr r1
 958:	00810002 	addeq	r0, r1, r2
 95c:	01020000 	mrseq	r0, (UNDEF: 2)
 960:	000d0efb 	strdeq	r0, [sp], -fp
 964:	01010101 	tsteq	r1, r1, lsl #2
 968:	01000000 	mrseq	r0, (UNDEF: 0)
 96c:	43010000 	movwmi	r0, #4096	; 0x1000
 970:	6f6d2f3a 	svcvs	0x006d2f3a
 974:	2f632f70 	svccs	0x00632f70
 978:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 97c:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 980:	6f697461 	svcvs	0x00697461
 984:	2f72656e 	svccs	0x0072656e
 988:	73504944 	cmpvc	r0, #68, 18	; 0x110000
 98c:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
 990:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
 994:	73610000 	cmnvc	r1, #0
 998:	5f696963 	svcpl	0x00696963
 99c:	70736964 	rsbsvc	r6, r3, r4, ror #18
 9a0:	2e79616c 	rpwcsez	f6, f1, #4.0
 9a4:	00010063 	andeq	r0, r1, r3, rrx
 9a8:	72707300 	rsbsvc	r7, r0, #0, 6
 9ac:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
 9b0:	00010068 	andeq	r0, r1, r8, rrx
 9b4:	616d6900 	cmnvs	sp, r0, lsl #18
 9b8:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
 9bc:	00000100 	andeq	r0, r0, r0, lsl #2
 9c0:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 9c4:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 9c8:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
 9cc:	00000100 	andeq	r0, r0, r0, lsl #2
 9d0:	70617267 	rsbvc	r7, r1, r7, ror #4
 9d4:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
 9d8:	0100682e 	tsteq	r0, lr, lsr #16
 9dc:	00000000 	andeq	r0, r0, r0
 9e0:	1a780205 	bne	1e011fc <startup-0x1e1fee04>
 9e4:	2e032000 	cdpcs	0, 0, cr2, cr3, cr0, {0}
 9e8:	bb596901 	bllt	165adf4 <startup-0x1e9a520c>
 9ec:	59696859 	stmdbpl	r9!, {r0, r3, r4, r6, fp, sp, lr}^
 9f0:	76591308 	ldrbvc	r1, [r9], -r8, lsl #6
 9f4:	593d3d67 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}
 9f8:	3d3d674c 	ldccc	7, cr6, [sp, #-304]!	; 0xfffffed0
 9fc:	673e4c59 			; <UNDEFINED> instruction: 0x673e4c59
 a00:	675a3d3d 	smmlarvs	sl, sp, sp, r3
 a04:	3e842f67 	cdpcc	15, 8, cr2, cr4, cr7, {3}
 a08:	5a3d3d67 	bpl	f4ffac <startup-0x1f0b0054>
 a0c:	842f6767 	strthi	r6, [pc], #-1895	; a14 <startup-0x1ffff5ec>
 a10:	2f4b3d67 	svccs	0x004b3d67
 a14:	3d3e683d 	ldccc	8, cr6, [lr, #-244]!	; 0xffffff0c
 a18:	3d4b2f2f 	stclcc	15, cr2, [fp, #-188]	; 0xffffff44
 a1c:	0067762f 	rsbeq	r7, r7, pc, lsr #12
 a20:	06010402 	streq	r0, [r1], -r2, lsl #8
 a24:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
 a28:	914c3d59 	cmpls	ip, r9, asr sp
 a2c:	9f764b67 	svcls	0x00764b67
 a30:	0200304c 	andeq	r3, r0, #76	; 0x4c
 a34:	20060104 	andcs	r0, r6, r4, lsl #2
 a38:	3d3d8306 	ldccc	3, cr8, [sp, #-24]!	; 0xffffffe8
 a3c:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
 a40:	06200601 	strteq	r0, [r0], -r1, lsl #12
 a44:	3f3d3d83 	svccc	0x003d3d83
 a48:	01040200 	mrseq	r0, R12_usr
 a4c:	83062006 	movwhi	r2, #24582	; 0x6006
 a50:	003f3d3d 	eorseq	r3, pc, sp, lsr sp	; <UNPREDICTABLE>
 a54:	06010402 	streq	r0, [r1], -r2, lsl #8
 a58:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
 a5c:	343e3f3d 	ldrtcc	r3, [lr], #-3901	; 0xfffff0c3
 a60:	2f2f843d 	svccs	0x002f843d
 a64:	843e3e2f 	ldrthi	r3, [lr], #-3631	; 0xfffff1d1
 a68:	73214b2f 			; <UNDEFINED> instruction: 0x73214b2f
 a6c:	214b2f4d 	cmpcs	fp, sp, asr #30
 a70:	59684d73 	stmdbpl	r8!, {r0, r1, r4, r5, r6, r8, sl, fp, lr}^
 a74:	73214b30 			; <UNDEFINED> instruction: 0x73214b30
 a78:	73214b4d 			; <UNDEFINED> instruction: 0x73214b4d
 a7c:	754c4b4e 	strbvc	r4, [ip, #-2894]	; 0xfffff4b2
 a80:	3d2f4b30 	vstmdbcc	pc!, {d4-d27}
 a84:	02007321 	andeq	r7, r0, #-2080374784	; 0x84000000
 a88:	4a060104 	bmi	180ea0 <startup-0x1fe7f160>
 a8c:	2f4b6b06 	svccs	0x004b6b06
 a90:	0073213d 	rsbseq	r2, r3, sp, lsr r1
 a94:	06010402 	streq	r0, [r1], -r2, lsl #8
 a98:	4b6b064a 	blmi	1ac23c8 <startup-0x1e53dc38>
 a9c:	68753e4e 	ldmdavs	r5!, {r1, r2, r3, r6, r9, sl, fp, ip, sp}^
 aa0:	3d4b2f2f 	stclcc	15, cr2, [fp, #-188]	; 0xffffff44
 aa4:	4b4d7321 	blmi	135d730 <startup-0x1eca28d0>
 aa8:	4d73212f 	ldfmie	f2, [r3, #-188]!	; 0xffffff44
 aac:	00080221 	andeq	r0, r8, r1, lsr #4
 ab0:	00760101 	rsbseq	r0, r6, r1, lsl #2
 ab4:	00020000 	andeq	r0, r2, r0
 ab8:	00000057 	andeq	r0, r0, r7, asr r0
 abc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 ac0:	0101000d 	tsteq	r1, sp
 ac4:	00000101 	andeq	r0, r0, r1, lsl #2
 ac8:	00000100 	andeq	r0, r0, r0, lsl #2
 acc:	2f3a4301 	svccs	0x003a4301
 ad0:	2f706f6d 	svccs	0x00706f6d
 ad4:	6f4d2f63 	svcvs	0x004d2f63
 ad8:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
 adc:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
 ae0:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
 ae4:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 ae8:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
 aec:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
 af0:	0000432f 	andeq	r4, r0, pc, lsr #6
 af4:	776f6c73 			; <UNDEFINED> instruction: 0x776f6c73
 af8:	7865745f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
 afc:	00632e74 	rsbeq	r2, r3, r4, ror lr
 b00:	73000001 	movwvc	r0, #1
 b04:	5f776f6c 	svcpl	0x00776f6c
 b08:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 b0c:	0100682e 	tsteq	r0, lr, lsr #16
 b10:	00000000 	andeq	r0, r0, r0
 b14:	1f980205 	svcne	0x00980205
 b18:	59152000 	ldmdbpl	r5, {sp}
 b1c:	5984c99f 	stmibpl	r4, {r0, r1, r2, r3, r4, r7, r8, fp, lr, pc}
 b20:	3d3d754c 	cfldr32cc	mvfx7, [sp, #-304]!	; 0xfffffed0
 b24:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
 b28:	01010007 	tsteq	r1, r7

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
   4:	61724765 	cmnvs	r2, r5, ror #14
   8:	6f700079 	svcvs	0x00700079
   c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
  10:	74003572 	strvc	r3, [r0], #-1394	; 0xfffffa8e
  14:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
  18:	616c625f 	cmnvs	ip, pc, asr r2
  1c:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
  20:	00737469 	rsbseq	r7, r3, r9, ror #8
  24:	6d696e61 	stclvs	14, cr6, [r9, #-388]!	; 0xfffffe7c
  28:	6f697461 	svcvs	0x00697461
  2c:	6f635f6e 	svcvs	0x00635f6e
  30:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xfffff18b
  34:	6f700072 	svcvs	0x00700072
  38:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
  3c:	70003772 	andvc	r3, r0, r2, ror r7
  40:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
  44:	00387265 	eorseq	r7, r8, r5, ror #4
  48:	20554e47 	subscs	r4, r5, r7, asr #28
  4c:	20393943 	eorscs	r3, r9, r3, asr #18
  50:	2e332e36 	mrccs	14, 1, r2, cr3, cr6, {1}
  54:	30322031 	eorscc	r2, r2, r1, lsr r0
  58:	32303731 	eorscc	r3, r0, #12845056	; 0xc40000
  5c:	28203531 	stmdacs	r0!, {r0, r4, r5, r8, sl, ip, sp}
  60:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  64:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  68:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  6c:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
  70:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  74:	362d6465 	strtcc	r6, [sp], -r5, ror #8
  78:	6172622d 	cmnvs	r2, sp, lsr #4
  7c:	2068636e 	rsbcs	r6, r8, lr, ror #6
  80:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  84:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  88:	35343220 	ldrcc	r3, [r4, #-544]!	; 0xfffffde0
  8c:	5d323135 	ldfpls	f3, [r2, #-212]!	; 0xffffff2c
  90:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  94:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  98:	616d2d20 	cmnvs	sp, r0, lsr #26
  9c:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  a0:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  a4:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  a8:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  ac:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  b0:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  b4:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  b8:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  bc:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  c0:	616d2d20 	cmnvs	sp, r0, lsr #26
  c4:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  c8:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  cc:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  d0:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  d4:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  d8:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  dc:	00393963 	eorseq	r3, r9, r3, ror #18
  e0:	736f5078 	cmnvc	pc, #120	; 0x78
  e4:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
  e8:	74695470 	strbtvc	r5, [r9], #-1136	; 0xfffffb90
  ec:	6c42656c 	cfstr64vs	mvdx6, [r2], {108}	; 0x6c
  f0:	006b6361 	rsbeq	r6, fp, r1, ror #6
  f4:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
  f8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
  fc:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
 100:	6c42656c 	cfstr64vs	mvdx6, [r2], {108}	; 0x6c
 104:	006b6361 	rsbeq	r6, fp, r1, ror #6
 108:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
 10c:	5f746e65 	svcpl	0x00746e65
 110:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
 114:	72640065 	rsbvc	r0, r4, #101	; 0x65
 118:	625f7761 	subsvs	r7, pc, #25427968	; 0x1840000
 11c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 120:	6c625f72 	stclvs	15, cr5, [r2], #-456	; 0xfffffe38
 124:	006b6361 	rsbeq	r6, fp, r1, ror #6
 128:	706d6574 	rsbvc	r6, sp, r4, ror r5
 12c:	736e6f4d 	cmnvc	lr, #308	; 0x134
 130:	4c726574 	cfldr64mi	mvdx6, [r2], #-464	; 0xfffffe30
 134:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 138:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 13c:	6574006e 	ldrbvs	r0, [r4, #-110]!	; 0xffffff92
 140:	00337478 	eorseq	r7, r3, r8, ror r4
 144:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 148:	6a624f65 	bvs	1893ee4 <startup-0x1e76c11c>
 14c:	61477400 	cmpvs	r7, r0, lsl #8
 150:	624f656d 	subvs	r6, pc, #457179136	; 0x1b400000
 154:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 158:	73616300 	cmnvc	r1, #0, 6
 15c:	42656c74 	rsbmi	r6, r5, #116, 24	; 0x7400
 160:	6b63616c 	blvs	18d8718 <startup-0x1e7278e8>
 164:	73616300 	cmnvc	r1, #0, 6
 168:	47656c74 			; <UNDEFINED> instruction: 0x47656c74
 16c:	00796172 	rsbseq	r6, r9, r2, ror r1
 170:	6b636162 	blvs	18d8700 <startup-0x1e727900>
 174:	66667542 	strbtvs	r7, [r6], -r2, asr #10
 178:	694c7265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp, lr}^
 17c:	00746867 	rsbseq	r6, r4, r7, ror #16
 180:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 184:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 188:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 18c:	6f700039 	svcvs	0x00700039
 190:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 194:	6d003472 	cfstrsvs	mvf3, [r0, #-456]	; 0xfffffe38
 198:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
 19c:	70007265 	andvc	r7, r0, r5, ror #4
 1a0:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 1a4:	00367265 	eorseq	r7, r6, r5, ror #4
 1a8:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
 1ac:	5f726574 	svcpl	0x00726574
 1b0:	63616c62 	cmnvs	r1, #25088	; 0x6200
 1b4:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 1b8:	6e007374 	mcrvs	3, 0, r7, cr0, cr4, {3}
 1bc:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
 1c0:	656a624f 	strbvs	r6, [sl, #-591]!	; 0xfffffdb1
 1c4:	00737463 	rsbseq	r7, r3, r3, ror #8
 1c8:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 1cc:	39726574 	ldmdbcc	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
 1d0:	64697700 	strbtvs	r7, [r9], #-1792	; 0xfffff900
 1d4:	6c006874 	stcvs	8, cr6, [r0], {116}	; 0x74
 1d8:	5f676e6f 	svcpl	0x00676e6f
 1dc:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 1e0:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
 1e4:	00313174 	eorseq	r3, r1, r4, ror r1
 1e8:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 1ec:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
 1f0:	5f726566 	svcpl	0x00726566
 1f4:	63616c62 	cmnvs	r1, #25088	; 0x6200
 1f8:	696c5f6b 	stmdbvs	ip!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 1fc:	00746867 	rsbseq	r6, r4, r7, ror #16
 200:	61647075 	smcvs	18181	; 0x4705
 204:	79006574 	stmdbvc	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
 208:	00736f50 	rsbseq	r6, r3, r0, asr pc
 20c:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 210:	63003031 	movwvs	r3, #49	; 0x31
 214:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
 218:	6a624f65 	bvs	1893fb4 <startup-0x1e76c04c>
 21c:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
 220:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 224:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
 228:	32726574 	rsbscc	r6, r2, #116, 10	; 0x1d000000
 22c:	72756300 	rsbsvc	r6, r5, #0, 6
 230:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
 234:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 238:	006e6565 	rsbeq	r6, lr, r5, ror #10
 23c:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 240:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
 244:	31747865 	cmncc	r4, r5, ror #16
 248:	61630032 	cmnvs	r3, r2, lsr r0
 24c:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
 250:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
 254:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
 258:	00737469 	rsbseq	r7, r3, r9, ror #8
 25c:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
 260:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
 264:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 268:	6f62616c 	svcvs	0x0062616c
 26c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 270:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 274:	5049442f 	subpl	r4, r9, pc, lsr #8
 278:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
 27c:	2f686374 	svccs	0x00686374
 280:	74732f43 	ldrbtvc	r2, [r3], #-3907	; 0xfffff0bd
 284:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 288:	00632e70 	rsbeq	r2, r3, r0, ror lr
 28c:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 290:	616d4974 	smcvs	54420	; 0xd494
 294:	74006567 	strvc	r6, [r0], #-1383	; 0xfffffa99
 298:	34747865 	ldrbtcc	r7, [r4], #-2149	; 0xfffff79b
 29c:	6c537400 	cfldrdvs	mvd7, [r3], {-0}
 2a0:	6554776f 	ldrbvs	r7, [r4, #-1903]	; 0xfffff891
 2a4:	74007478 	strvc	r7, [r0], #-1144	; 0xfffffb88
 2a8:	37747865 	ldrbcc	r7, [r4, -r5, ror #16]!
 2ac:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
 2b0:	64003874 	strvs	r3, [r0], #-2164	; 0xfffff78c
 2b4:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 2b8:	75007961 	strvc	r7, [r0, #-2401]	; 0xfffff69f
 2bc:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 2c0:	2064656e 	rsbcs	r6, r4, lr, ror #10
 2c4:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 2c8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 2cc:	6e6f4d70 	mcrvs	13, 3, r4, cr15, cr0, {3}
 2d0:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 2d4:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
 2d8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 2dc:	74695470 	strbtvc	r5, [r9], #-1136	; 0xfffffb90
 2e0:	694c656c 	stmdbvs	ip, {r2, r3, r5, r6, r8, sl, sp, lr}^
 2e4:	00746867 	rsbseq	r6, r4, r7, ror #16
 2e8:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 2ec:	67694c65 	strbvs	r4, [r9, -r5, ror #24]!
 2f0:	68007468 	stmdavs	r0, {r3, r5, r6, sl, ip, sp, lr}
 2f4:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
 2f8:	69740074 	ldmdbvs	r4!, {r2, r4, r5, r6}^
 2fc:	49656c74 	stmdbmi	r5!, {r2, r4, r5, r6, sl, fp, sp, lr}^
 300:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
 304:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
 308:	5f656c74 	svcpl	0x00656c74
 30c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
 310:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 314:	68730073 	ldmdavs	r3!, {r0, r1, r4, r5, r6}^
 318:	2074726f 	rsbscs	r7, r4, pc, ror #4
 31c:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 320:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 324:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 328:	73616300 	cmnvc	r1, #0, 6
 32c:	4c656c74 	stclmi	12, cr6, [r5], #-464	; 0xfffffe30
 330:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 334:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 338:	70615f74 	rsbvc	r5, r1, r4, ror pc
 33c:	6f6d0070 	svcvs	0x006d0070
 340:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
 344:	67694c72 			; <UNDEFINED> instruction: 0x67694c72
 348:	6d007468 	cfstrsvs	mvf7, [r0, #-416]	; 0xfffffe60
 34c:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
 350:	6d497265 	sfmvs	f7, 2, [r9, #-404]	; 0xfffffe6c
 354:	73656761 	cmnvc	r5, #25427968	; 0x1840000
 358:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
 35c:	74003174 	strvc	r3, [r0], #-372	; 0xfffffe8c
 360:	32747865 	rsbscc	r7, r4, #6619136	; 0x650000
 364:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 368:	73614370 	cmnvc	r1, #112, 6	; 0xc0000001
 36c:	47656c74 			; <UNDEFINED> instruction: 0x47656c74
 370:	00796172 	rsbseq	r6, r9, r2, ror r1
 374:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 378:	696c5f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 37c:	5f746867 	svcpl	0x00746867
 380:	73746962 	cmnvc	r4, #1605632	; 0x188000
 384:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
 388:	74003574 	strvc	r3, [r0], #-1396	; 0xfffffa8c
 38c:	36747865 	ldrbtcc	r7, [r4], -r5, ror #16
 390:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 394:	73614370 	cmnvc	r1, #112, 6	; 0xc0000001
 398:	42656c74 	rsbmi	r6, r5, #116, 24	; 0x7400
 39c:	6b63616c 	blvs	18d8954 <startup-0x1e7276ac>
 3a0:	73616300 	cmnvc	r1, #0, 6
 3a4:	5f656c74 	svcpl	0x00656c74
 3a8:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
 3ac:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 3b0:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
 3b4:	6143706d 	cmpvs	r3, sp, rrx
 3b8:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
 3bc:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
 3c0:	61620074 	smcvs	8196	; 0x2004
 3c4:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
 3c8:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 3cc:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
 3d0:	665f6e00 	ldrbvs	r6, [pc], -r0, lsl #28
 3d4:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
 3d8:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
 3dc:	6742706d 	strbvs	r7, [r2, -sp, rrx]
 3e0:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 3e4:	74695470 	strbtvc	r5, [r9], #-1136	; 0xfffffb90
 3e8:	7247656c 	subvc	r6, r7, #108, 10	; 0x1b000000
 3ec:	69007961 	stmdbvs	r0, {r0, r5, r6, r8, fp, ip, sp, lr}
 3f0:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
 3f4:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 3f8:	67007365 	strvs	r7, [r0, -r5, ror #6]
 3fc:	4f656d61 	svcmi	0x00656d61
 400:	63656a62 	cmnvs	r5, #401408	; 0x62000
 404:	6d007374 	stcvs	3, cr7, [r0, #-464]	; 0xfffffe30
 408:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
 40c:	624f7265 	subvs	r7, pc, #1342177286	; 0x50000006
 410:	6574006a 	ldrbvs	r0, [r4, #-106]!	; 0xffffff96
 414:	6f4d706d 	svcvs	0x004d706d
 418:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
 41c:	6c620072 	stclvs	0, cr0, [r2], #-456	; 0xfffffe38
 420:	496b6361 	stmdbmi	fp!, {r0, r5, r6, r8, r9, sp, lr}^
 424:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
 428:	6f687300 	svcvs	0x00687300
 42c:	745f7472 	ldrbvc	r7, [pc], #-1138	; 434 <startup-0x1ffffbcc>
 430:	00747865 	rsbseq	r7, r4, r5, ror #16
 434:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
 438:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
 43c:	6f720065 	svcvs	0x00720065
 440:	6d003277 	sfmvs	f3, 4, [r0, #-476]	; 0xfffffe24
 444:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
 448:	6f507265 	svcvs	0x00507265
 44c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 450:	6f6d0072 	svcvs	0x006d0072
 454:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
 458:	616d4972 	smcvs	54418	; 0xd492
 45c:	64006567 	strvs	r6, [r0], #-1383	; 0xfffffa99
 460:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 464:	746e755f 	strbtvc	r7, [lr], #-1375	; 0xfffffaa1
 468:	745f6c69 	ldrbvc	r6, [pc], #-3177	; 470 <startup-0x1ffffb90>
 46c:	00747865 	rsbseq	r7, r4, r5, ror #16
 470:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 474:	616d4965 	cmnvs	sp, r5, ror #18
 478:	64006567 	strvs	r6, [r0], #-1383	; 0xfffffa99
 47c:	5f776172 	svcpl	0x00776172
 480:	66667562 	strbtvs	r7, [r6], -r2, ror #10
 484:	625f7265 	subsvs	r7, pc, #1342177286	; 0x50000006
 488:	6b63616c 	blvs	18d8a40 <startup-0x1e7275c0>
 48c:	6172675f 	cmnvs	r2, pc, asr r7
 490:	696c5f79 	stmdbvs	ip!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 494:	00746867 	rsbseq	r6, r4, r7, ror #16
 498:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
 49c:	5f726574 	svcpl	0x00726574
 4a0:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 4a4:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 4a8:	64007374 	strvs	r7, [r0], #-884	; 0xfffffc8c
 4ac:	5f776172 	svcpl	0x00776172
 4b0:	66667562 	strbtvs	r7, [r6], -r2, ror #10
 4b4:	625f7265 	subsvs	r7, pc, #1342177286	; 0x50000006
 4b8:	6b63616c 	blvs	18d8a70 <startup-0x1e727590>
 4bc:	6172675f 	cmnvs	r2, pc, asr r7
 4c0:	6f6d0079 	svcvs	0x006d0079
 4c4:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
 4c8:	696f5072 	stmdbvs	pc!, {r1, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
 4cc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 4d0:	74730033 	ldrbtvc	r0, [r3], #-51	; 0xffffffcd
 4d4:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 4d8:	6e610070 	mcrvs	0, 3, r0, cr1, cr0, {3}
 4dc:	74616d69 	strbtvc	r6, [r1], #-3433	; 0xfffff297
 4e0:	5f6e6f69 	svcpl	0x006e6f69
 4e4:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 4e8:	61630064 	cmnvs	r3, r4, rrx
 4ec:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
 4f0:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
 4f4:	6d007365 	stcvs	3, cr7, [r0, #-404]	; 0xfffffe6c
 4f8:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
 4fc:	675f7265 	ldrbvs	r7, [pc, -r5, ror #4]
 500:	5f796172 	svcpl	0x00796172
 504:	73746962 	cmnvc	r4, #1605632	; 0x188000
 508:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
 50c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 510:	66003031 			; <UNDEFINED> instruction: 0x66003031
 514:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
 518:	5f676200 	svcpl	0x00676200
 51c:	73746962 	cmnvc	r4, #1605632	; 0x188000
 520:	616d6900 	cmnvs	sp, r0, lsl #18
 524:	00736567 	rsbseq	r6, r3, r7, ror #10
 528:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
 52c:	6d49656c 	cfstr64vs	mvdx6, [r9, #-432]	; 0xfffffe50
 530:	00656761 	rsbeq	r6, r5, r1, ror #14
 534:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
 538:	47726574 			; <UNDEFINED> instruction: 0x47726574
 53c:	00796172 	rsbseq	r6, r9, r2, ror r1
 540:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
 544:	625f656c 	subsvs	r6, pc, #108, 10	; 0x1b000000
 548:	6b63616c 	blvs	18d8b00 <startup-0x1e727500>
 54c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 550:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
 554:	00336572 	eorseq	r6, r3, r2, ror r5
 558:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 55c:	656a624f 	strbvs	r6, [sl, #-591]!	; 0xfffffdb1
 560:	70557463 	subsvc	r7, r5, r3, ror #8
 564:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
 568:	2f3a4300 	svccs	0x003a4300
 56c:	2f706f6d 	svccs	0x00706f6d
 570:	6f4d2f63 	svcvs	0x004d2f63
 574:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
 578:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
 57c:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
 580:	72672f72 	rsbvc	r2, r7, #456	; 0x1c8
 584:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 588:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 58c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 590:	6d61672f 	stclvs	7, cr6, [r1, #-188]!	; 0xffffff44
 594:	6a626f65 	bvs	189c330 <startup-0x1e763cd0>
 598:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 59c:	68740063 	ldmdavs	r4!, {r0, r1, r5, r6}^
 5a0:	66007369 	strvs	r7, [r0], -r9, ror #6
 5a4:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
 5a8:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
 5ac:	72696600 	rsbvc	r6, r9, #0, 12
 5b0:	72473165 	subvc	r3, r7, #1073741849	; 0x40000019
 5b4:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
 5b8:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
 5bc:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
 5c0:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
 5c4:	72696600 	rsbvc	r6, r9, #0, 12
 5c8:	72473365 	subvc	r3, r7, #-1811939327	; 0x94000001
 5cc:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
 5d0:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
 5d4:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
 5d8:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
 5dc:	72696600 	rsbvc	r6, r9, #0, 12
 5e0:	616c4265 	cmnvs	ip, r5, ror #4
 5e4:	74006b63 	strvc	r6, [r0], #-2915	; 0xfffff49d
 5e8:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
 5ec:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
 5f0:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
 5f4:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 5f8:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
 5fc:	616c4265 	cmnvs	ip, r5, ror #4
 600:	66006b63 	strvs	r6, [r0], -r3, ror #22
 604:	31657269 	cmncc	r5, r9, ror #4
 608:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
 60c:	69660074 	stmdbvs	r6!, {r2, r4, r5, r6}^
 610:	4c346572 	cfldr32mi	mvfx6, [r4], #-456	; 0xfffffe38
 614:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 618:	72696600 	rsbvc	r6, r9, #0, 12
 61c:	675f3265 	ldrbvs	r3, [pc, -r5, ror #4]
 620:	5f796172 	svcpl	0x00796172
 624:	73746962 	cmnvc	r4, #1605632	; 0x188000
 628:	72696600 	rsbvc	r6, r9, #0, 12
 62c:	6c5f3465 	cfldrdvs	mvd3, [pc], {101}	; 0x65
 630:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 634:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 638:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
 63c:	4c336572 	cfldr32mi	mvfx6, [r3], #-456	; 0xfffffe38
 640:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 644:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
 648:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 64c:	6f700031 	svcvs	0x00700031
 650:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 654:	66003372 			; <UNDEFINED> instruction: 0x66003372
 658:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
 65c:	6172675f 	cmnvs	r2, pc, asr r7
 660:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 664:	66007374 			; <UNDEFINED> instruction: 0x66007374
 668:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
 66c:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
 670:	6f700065 	svcvs	0x00700065
 674:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 678:	66003072 			; <UNDEFINED> instruction: 0x66003072
 67c:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
 680:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
 684:	6f700074 	svcvs	0x00700074
 688:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 68c:	74003272 	strvc	r3, [r0], #-626	; 0xfffffd8e
 690:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
 694:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
 698:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
 69c:	72696600 	rsbvc	r6, r9, #0, 12
 6a0:	675f3165 	ldrbvs	r3, [pc, -r5, ror #2]
 6a4:	5f796172 	svcpl	0x00796172
 6a8:	73746962 	cmnvc	r4, #1605632	; 0x188000
 6ac:	72696600 	rsbvc	r6, r9, #0, 12
 6b0:	694c3265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp}^
 6b4:	00746867 	rsbseq	r6, r4, r7, ror #16
 6b8:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 6bc:	696c5f31 	stmdbvs	ip!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
 6c0:	5f746867 	svcpl	0x00746867
 6c4:	73746962 	cmnvc	r4, #1605632	; 0x188000
 6c8:	72696600 	rsbvc	r6, r9, #0, 12
 6cc:	6c5f3265 	lfmvs	f3, 2, [pc], {101}	; 0x65
 6d0:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 6d4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 6d8:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
 6dc:	624f6572 	subvs	r6, pc, #478150656	; 0x1c800000
 6e0:	6966006a 	stmdbvs	r6!, {r1, r3, r5, r6}^
 6e4:	47326572 			; <UNDEFINED> instruction: 0x47326572
 6e8:	00796172 	rsbseq	r6, r9, r2, ror r1
 6ec:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 6f0:	72675f34 	rsbvc	r5, r7, #52, 30	; 0xd0
 6f4:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
 6f8:	00737469 	rsbseq	r7, r3, r9, ror #8
 6fc:	706d6574 	rsbvc	r6, sp, r4, ror r5
 700:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
 704:	67694c33 			; <UNDEFINED> instruction: 0x67694c33
 708:	66007468 	strvs	r7, [r0], -r8, ror #8
 70c:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
 710:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
 714:	65740065 	ldrbvs	r0, [r4, #-101]!	; 0xffffff9b
 718:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
 71c:	4c316572 	cfldr32mi	mvfx6, [r1], #-456	; 0xfffffe38
 720:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 724:	72696600 	rsbvc	r6, r9, #0, 12
 728:	69547473 	ldmdbvs	r4, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 72c:	6900656d 	stmdbvs	r0, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
 730:	5f74696e 	svcpl	0x0074696e
 734:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 738:	72696600 	rsbvc	r6, r9, #0, 12
 73c:	6c5f3565 	cfldr64vs	mvdx3, [pc], {101}	; 0x65
 740:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 744:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 748:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
 74c:	6d496572 	cfstr64vs	mvdx6, [r9, #-456]	; 0xfffffe38
 750:	73656761 	cmnvc	r5, #25427968	; 0x1840000
 754:	72696600 	rsbvc	r6, r9, #0, 12
 758:	6d493165 	stfvse	f3, [r9, #-404]	; 0xfffffe6c
 75c:	00656761 	rsbeq	r6, r5, r1, ror #14
 760:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 764:	61724734 	cmnvs	r2, r4, lsr r7
 768:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
 76c:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
 770:	47316572 			; <UNDEFINED> instruction: 0x47316572
 774:	00796172 	rsbseq	r6, r9, r2, ror r1
 778:	706d6574 	rsbvc	r6, sp, r4, ror r5
 77c:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
 780:	67694c34 			; <UNDEFINED> instruction: 0x67694c34
 784:	66007468 	strvs	r7, [r0], -r8, ror #8
 788:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
 78c:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
 790:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
 794:	00737469 	rsbseq	r7, r3, r9, ror #8
 798:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 79c:	616d4935 	cmnvs	sp, r5, lsr r9
 7a0:	66006567 	strvs	r6, [r0], -r7, ror #10
 7a4:	5f657269 	svcpl	0x00657269
 7a8:	63616c62 	cmnvs	r1, #25088	; 0x6200
 7ac:	5f325f6b 	svcpl	0x00325f6b
 7b0:	73746962 	cmnvc	r4, #1605632	; 0x188000
 7b4:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 7b8:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
 7bc:	694c3265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp}^
 7c0:	00746867 	rsbseq	r6, r4, r7, ror #16
 7c4:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 7c8:	616d4932 	cmnvs	sp, r2, lsr r9
 7cc:	74006567 	strvc	r6, [r0], #-1383	; 0xfffffa99
 7d0:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
 7d4:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
 7d8:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
 7dc:	3a430074 	bcc	10c09b4 <startup-0x1ef3f64c>
 7e0:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 7e4:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 730 <startup-0x1ffff8d0>
 7e8:	616c706f 	cmnvs	ip, pc, rrx
 7ec:	61726f62 	cmnvs	r2, r2, ror #30
 7f0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 7f4:	442f7265 	strtmi	r7, [pc], #-613	; 7fc <startup-0x1ffff804>
 7f8:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
 7fc:	63746957 	cmnvs	r4, #1425408	; 0x15c000
 800:	2f432f68 	svccs	0x00432f68
 804:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 808:	6600632e 	strvs	r6, [r0], -lr, lsr #6
 80c:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
 810:	6172675f 	cmnvs	r2, pc, asr r7
 814:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 818:	6c007374 	stcvs	3, cr7, [r0], {116}	; 0x74
 81c:	52747361 	rsbspl	r7, r4, #-2080374783	; 0x84000001
 820:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 824:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
 828:	616c0065 	cmnvs	ip, r5, rrx
 82c:	654c7473 	strbvs	r7, [ip, #-1139]	; 0xfffffb8d
 830:	61567466 	cmpvs	r6, r6, ror #8
 834:	0065756c 	rsbeq	r7, r5, ip, ror #10
 838:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
 83c:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
 840:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 844:	6f62616c 	svcvs	0x0062616c
 848:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 84c:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 850:	5049442f 	subpl	r4, r9, pc, lsr #8
 854:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
 858:	2f686374 	svccs	0x00686374
 85c:	6c702f43 	ldclvs	15, cr2, [r0], #-268	; 0xfffffef4
 860:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
 864:	7000632e 	andvc	r6, r0, lr, lsr #6
 868:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
 86c:	64705572 	ldrbtvs	r5, [r0], #-1394	; 0xfffffa8e
 870:	00657461 	rsbeq	r7, r5, r1, ror #8
 874:	65676170 	strbvs	r6, [r7, #-368]!	; 0xfffffe90
 878:	61726700 	cmnvs	r2, r0, lsl #14
 87c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 880:	6165725f 	cmnvs	r5, pc, asr r2
 884:	75620064 	strbvc	r0, [r2, #-100]!	; 0xffffff9c
 888:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 88c:	6c617600 	stclvs	6, cr7, [r1], #-0
 890:	70006575 	andvc	r6, r0, r5, ror r5
 894:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 898:	72640032 	rsbvc	r0, r4, #50	; 0x32
 89c:	675f7761 	ldrbvs	r7, [pc, -r1, ror #14]
 8a0:	5f656d61 	svcpl	0x00656d61
 8a4:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 8a8:	64007463 	strvs	r7, [r0], #-1123	; 0xfffffb9d
 8ac:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 8b0:	63696d5f 	cmnvs	r9, #6080	; 0x17c0
 8b4:	67006f72 	smlsdxvs	r0, r2, pc, r6	; <UNPREDICTABLE>
 8b8:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 8bc:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 8c0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 8c4:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 750 <startup-0x1ffff8b0>
 8c8:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 8cc:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 8d0:	625f7261 	subsvs	r7, pc, #268435462	; 0x10000006
 8d4:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
 8d8:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 8dc:	69700072 	ldmdbvs	r0!, {r1, r4, r5, r6}^
 8e0:	006c6578 	rsbeq	r6, ip, r8, ror r5
 8e4:	6a624f67 	bvs	1894688 <startup-0x1e76b978>
 8e8:	61726700 	cmnvs	r2, r0, lsl #14
 8ec:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 8f0:	6172645f 	cmnvs	r2, pc, asr r4
 8f4:	63735f77 	cmnvs	r3, #476	; 0x1dc
 8f8:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 8fc:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 900:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 846 <startup-0x1ffff7ba>	; <UNPREDICTABLE>
 904:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 908:	6f687300 	svcvs	0x00687300
 90c:	72665f77 	rsbvc	r5, r6, #476	; 0x1dc
 910:	00656d61 	rsbeq	r6, r5, r1, ror #26
 914:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 918:	7270735f 	rsbsvc	r7, r0, #2080374785	; 0x7c000001
 91c:	00657469 	rsbeq	r7, r5, r9, ror #8
 920:	616c6564 	cmnvs	ip, r4, ror #10
 924:	30355f79 	eorscc	r5, r5, r9, ror pc
 928:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 92c:	70617267 	rsbvc	r7, r1, r7, ror #4
 930:	5f636968 	svcpl	0x00636968
 934:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 938:	72670065 	rsbvc	r0, r7, #101	; 0x65
 93c:	63537961 	cmpvs	r3, #1589248	; 0x184000
 940:	54656c61 	strbtpl	r6, [r5], #-3169	; 0xfffff39f
 944:	00747365 	rsbseq	r7, r4, r5, ror #6
 948:	70617267 	rsbvc	r7, r1, r7, ror #4
 94c:	5f636968 	svcpl	0x00636968
 950:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 954:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 958:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 95c:	43007261 	movwmi	r7, #609	; 0x261
 960:	6f6d2f3a 	svcvs	0x006d2f3a
 964:	2f632f70 	svccs	0x00632f70
 968:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 96c:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 970:	6f697461 	svcvs	0x00697461
 974:	2f72656e 	svccs	0x0072656e
 978:	73504944 	cmpvc	r0, #68, 18	; 0x110000
 97c:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
 980:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
 984:	6172672f 	cmnvs	r2, pc, lsr #14
 988:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 98c:	00632e73 	rsbeq	r2, r3, r3, ror lr
 990:	70617267 	rsbvc	r7, r1, r7, ror #4
 994:	5f636968 	svcpl	0x00636968
 998:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 99c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 9a0:	6f630061 	svcvs	0x00630061
 9a4:	00726f6c 	rsbseq	r6, r2, ip, ror #30
 9a8:	5f746573 	svcpl	0x00746573
 9ac:	645f7075 	ldrbvs	r7, [pc], #-117	; 9b4 <startup-0x1ffff64c>
 9b0:	5f776172 	svcpl	0x00776172
 9b4:	66667562 	strbtvs	r7, [r6], -r2, ror #10
 9b8:	00737265 	rsbseq	r7, r3, r5, ror #4
 9bc:	70617267 	rsbvc	r7, r1, r7, ror #4
 9c0:	5f636968 	svcpl	0x00636968
 9c4:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 9c8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 9cc:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 9d0:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 9d4:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 9d8:	736e3035 	cmnvc	lr, #53	; 0x35
 9dc:	6c696600 	stclvs	6, cr6, [r9], #-0
 9e0:	6365526c 	cmnvs	r5, #108, 4	; 0xc0000006
 9e4:	676e6174 			; <UNDEFINED> instruction: 0x676e6174
 9e8:	6d00656c 	cfstr32vs	mvfx6, [r0, #-432]	; 0xfffffe50
 9ec:	006b7361 	rsbeq	r7, fp, r1, ror #6
 9f0:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
 9f4:	656c5f65 	strbvs	r5, [ip, #-3941]!	; 0xfffff09b
 9f8:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
 9fc:	61726700 	cmnvs	r2, r0, lsl #14
 a00:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 a04:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 a08:	645f6574 	ldrbvs	r6, [pc], #-1396	; a10 <startup-0x1ffff5f0>
 a0c:	00617461 	rsbeq	r7, r1, r1, ror #8
 a10:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
 a14:	64697700 	strbtvs	r7, [r9], #-1792	; 0xfffff900
 a18:	695f6874 	ldmdbvs	pc, {r2, r4, r5, r6, fp, sp, lr}^	; <UNPREDICTABLE>
 a1c:	79625f6e 	stmdbvc	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 a20:	00736574 	rsbseq	r6, r3, r4, ror r5
 a24:	61656c63 	cmnvs	r5, r3, ror #24
 a28:	6c615f72 	stclvs	15, cr5, [r1], #-456	; 0xfffffe38
 a2c:	61625f6c 	cmnvs	r2, ip, ror #30
 a30:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
 a34:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 a38:	6c630073 	stclvs	0, cr0, [r3], #-460	; 0xfffffe34
 a3c:	52726165 	rsbspl	r6, r2, #1073741849	; 0x40000019
 a40:	61746365 	cmnvs	r4, r5, ror #6
 a44:	656c676e 	strbvs	r6, [ip, #-1902]!	; 0xfffff892
 a48:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 a4c:	73007865 	movwvc	r7, #2149	; 0x865
 a50:	63656c65 	cmnvs	r5, #25856	; 0x6500
 a54:	6f635f74 	svcvs	0x00635f74
 a58:	6f72746e 	svcvs	0x0072746e
 a5c:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 a60:	61726700 	cmnvs	r2, r0, lsl #14
 a64:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 a68:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 a6c:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
 a70:	00796461 	rsbseq	r6, r9, r1, ror #8
 a74:	61656c63 	cmnvs	r5, r3, ror #24
 a78:	68745f72 	ldmdavs	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 a7c:	61427369 	cmpvs	r2, r9, ror #6
 a80:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
 a84:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 a88:	61726700 	cmnvs	r2, r0, lsl #14
 a8c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 a90:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 a94:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
 a98:	00657a69 	rsbeq	r7, r5, r9, ror #20
 a9c:	70617267 	rsbvc	r7, r1, r7, ror #4
 aa0:	5f636968 	svcpl	0x00636968
 aa4:	61656c63 	cmnvs	r5, r3, ror #24
 aa8:	63735f72 	cmnvs	r3, #456	; 0x1c8
 aac:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 ab0:	616f6c00 	cmnvs	pc, r0, lsl #24
 ab4:	6d695f64 	stclvs	15, cr5, [r9, #-400]!	; 0xfffffe70
 ab8:	00656761 	rsbeq	r6, r5, r1, ror #14
 abc:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
 ac0:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
 ac4:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 ac8:	6f62616c 	svcvs	0x0062616c
 acc:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 ad0:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 ad4:	5049442f 	subpl	r4, r9, pc, lsr #8
 ad8:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
 adc:	2f686374 	svccs	0x00686374
 ae0:	6d692f43 	stclvs	15, cr2, [r9, #-268]!	; 0xfffffef4
 ae4:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
 ae8:	6f6c0063 	svcvs	0x006c0063
 aec:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
 af0:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 af4:	3a430065 	bcc	10c0c90 <startup-0x1ef3f370>
 af8:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 afc:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; a48 <startup-0x1ffff5b8>
 b00:	616c706f 	cmnvs	ip, pc, rrx
 b04:	61726f62 	cmnvs	r2, r2, ror #30
 b08:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 b0c:	442f7265 	strtmi	r7, [pc], #-613	; b14 <startup-0x1ffff4ec>
 b10:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
 b14:	63746957 	cmnvs	r4, #1425408	; 0x15c000
 b18:	2f432f68 	svccs	0x00432f68
 b1c:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 b20:	632e6574 			; <UNDEFINED> instruction: 0x632e6574
 b24:	646f4d00 	strbtvs	r4, [pc], #-3328	; b2c <startup-0x1ffff4d4>
 b28:	73007265 	movwvc	r7, #613	; 0x265
 b2c:	755f7465 	ldrbvc	r7, [pc, #-1125]	; 6cf <startup-0x1ffff931>
 b30:	49445f70 	stmdbmi	r4, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 b34:	646f004c 	strbtvs	r0, [pc], #-76	; b3c <startup-0x1ffff4c4>
 b38:	67694872 			; <UNDEFINED> instruction: 0x67694872
 b3c:	546f0068 	strbtpl	r0, [pc], #-104	; b44 <startup-0x1ffff4bc>
 b40:	72657079 	rsbvc	r7, r5, #121	; 0x79
 b44:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 b48:	7550004f 	ldrbvc	r0, [r0, #-79]	; 0xffffffb1
 b4c:	00726450 	rsbseq	r6, r2, r0, asr r4
 b50:	52726469 	rsbspl	r6, r2, #1761607680	; 0x69000000
 b54:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
 b58:	00646576 	rsbeq	r6, r4, r6, ror r5
 b5c:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
 b60:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
 b64:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 b68:	6f62616c 	svcvs	0x0062616c
 b6c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 b70:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 b74:	5049442f 	subpl	r4, r9, pc, lsr #8
 b78:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
 b7c:	2f686374 	svccs	0x00686374
 b80:	70672f43 	rsbvc	r2, r7, r3, asr #30
 b84:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
 b88:	52746f00 	rsbspl	r6, r4, #0, 30
 b8c:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
 b90:	00646576 	rsbeq	r6, r4, r6, ror r5
 b94:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 b98:	4c49445f 	cfstrdmi	mvd4, [r9], {95}	; 0x5f
 b9c:	6e69735f 	mcrvs	3, 3, r7, cr9, cr15, {2}
 ba0:	00656c67 	rsbeq	r6, r5, r7, ror #24
 ba4:	4c72646f 	cfldrdmi	mvd6, [r2], #-444	; 0xfffffe44
 ba8:	6f00776f 	svcvs	0x0000776f
 bac:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
 bb0:	69007264 	stmdbvs	r0, {r2, r5, r6, r9, ip, sp, lr}
 bb4:	69487264 	stmdbvs	r8, {r2, r5, r6, r9, ip, sp, lr}^
 bb8:	69006867 	stmdbvs	r0, {r0, r1, r2, r5, r6, fp, sp, lr}
 bbc:	6f4c7264 	svcvs	0x004c7264
 bc0:	646f0077 	strbtvs	r0, [pc], #-119	; bc8 <startup-0x1ffff438>
 bc4:	73655272 	cmnvc	r5, #536870919	; 0x20000007
 bc8:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
 bcc:	65720064 	ldrbvs	r0, [r2, #-100]!	; 0xffffff9c
 bd0:	445f6461 	ldrbmi	r6, [pc], #-1121	; bd8 <startup-0x1ffff428>
 bd4:	69004c49 	stmdbvs	r0, {r0, r3, r6, sl, fp, lr}
 bd8:	5f74696e 	svcpl	0x0074696e
 bdc:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
 be0:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
 be4:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 be8:	696d696c 	stmdbvs	sp!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 bec:	61003274 	tstvs	r0, r4, ror r2
 bf0:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 bf4:	6165725f 	cmnvs	r5, pc, asr r2
 bf8:	61645f64 	cmnvs	r4, r4, ror #30
 bfc:	73006174 	movwvc	r6, #372	; 0x174
 c00:	755f7465 	ldrbvc	r7, [pc, #-1125]	; 7a3 <startup-0x1ffff85d>
 c04:	73615f70 	cmnvc	r1, #112, 30	; 0x1c0
 c08:	00696963 	rsbeq	r6, r9, r3, ror #18
 c0c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 c10:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
 c14:	63007469 	movwvs	r7, #1129	; 0x469
 c18:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
 c1c:	6c63006e 	stclvs	0, cr0, [r3], #-440	; 0xfffffe48
 c20:	5f726165 	svcpl	0x00726165
 c24:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 c28:	73610069 	cmnvc	r1, #105	; 0x69
 c2c:	5f696963 	svcpl	0x00696963
 c30:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 c34:	61705f65 	cmnvs	r0, r5, ror #30
 c38:	61007472 	tstvs	r0, r2, ror r4
 c3c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 c40:	6165725f 	cmnvs	r5, pc, asr r2
 c44:	6f635f64 	svcvs	0x00635f64
 c48:	6f72746e 	svcvs	0x0072746e
 c4c:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 c50:	63736100 	cmnvs	r3, #0, 2
 c54:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 c58:	5f6c7274 	svcpl	0x006c7274
 c5c:	5f746962 	svcpl	0x00746962
 c60:	00746573 	rsbseq	r6, r4, r3, ror r5
 c64:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 c68:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 c6c:	5f657469 	svcpl	0x00657469
 c70:	00646d63 	rsbeq	r6, r4, r3, ror #26
 c74:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
 c78:	65740031 	ldrbvs	r0, [r4, #-49]!	; 0xffffffcf
 c7c:	00327473 	eorseq	r7, r2, r3, ror r4
 c80:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
 c84:	00737365 	rsbseq	r7, r3, r5, ror #6
 c88:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 c8c:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 c90:	5f657469 	svcpl	0x00657469
 c94:	61746164 	cmnvs	r4, r4, ror #2
 c98:	63736100 	cmnvs	r3, #0, 2
 c9c:	745f6969 	ldrbvc	r6, [pc], #-2409	; ca4 <startup-0x1ffff35c>
 ca0:	00747365 	rsbseq	r7, r4, r5, ror #6
 ca4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 ca8:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 cac:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
 cb0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
 cb4:	73610073 	cmnvc	r1, #115	; 0x73
 cb8:	5f696963 	svcpl	0x00696963
 cbc:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 cc0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 cc4:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 cc8:	61007261 	tstvs	r0, r1, ror #4
 ccc:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 cd0:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 cd4:	61006574 	tstvs	r0, r4, ror r5
 cd8:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 cdc:	546f675f 	strbtpl	r6, [pc], #-1887	; ce4 <startup-0x1ffff31c>
 ce0:	0059586f 	subseq	r5, r9, pc, ror #16
 ce4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 ce8:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 cec:	5f657469 	svcpl	0x00657469
 cf0:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 cf4:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 cf8:	61007265 	tstvs	r0, r5, ror #4
 cfc:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 d00:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 d04:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 d08:	00726168 	rsbseq	r6, r2, r8, ror #2
 d0c:	696d696c 	stmdbvs	sp!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 d10:	43003174 	movwmi	r3, #372	; 0x174
 d14:	6f6d2f3a 	svcvs	0x006d2f3a
 d18:	2f632f70 	svccs	0x00632f70
 d1c:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 d20:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 d24:	6f697461 	svcvs	0x00697461
 d28:	2f72656e 	svccs	0x0072656e
 d2c:	73504944 	cmpvc	r0, #68, 18	; 0x110000
 d30:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
 d34:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
 d38:	6373612f 	cmnvs	r3, #-1073741813	; 0xc000000b
 d3c:	645f6969 	ldrbvs	r6, [pc], #-2409	; d44 <startup-0x1ffff2bc>
 d40:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 d44:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 d48:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 d4c:	6c735f74 	ldclvs	15, cr5, [r3], #-464	; 0xfffffe30
 d50:	745f776f 	ldrbvc	r7, [pc], #-1903	; d58 <startup-0x1ffff2a8>
 d54:	00747865 	rsbseq	r7, r4, r5, ror #16
 d58:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
 d5c:	6f5f6874 	svcvs	0x005f6874
 d60:	6f725f66 	svcvs	0x00725f66
 d64:	43003177 	movwmi	r3, #375	; 0x177
 d68:	6f6d2f3a 	svcvs	0x006d2f3a
 d6c:	2f632f70 	svccs	0x00632f70
 d70:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 d74:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 d78:	6f697461 	svcvs	0x00697461
 d7c:	2f72656e 	svccs	0x0072656e
 d80:	73504944 	cmpvc	r0, #68, 18	; 0x110000
 d84:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
 d88:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
 d8c:	6f6c732f 	svcvs	0x006c732f
 d90:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
 d94:	632e7478 			; <UNDEFINED> instruction: 0x632e7478
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000024 	andeq	r0, r0, r4, lsr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000034 	andcs	r0, r0, r4, lsr r0
  48:	00000164 	andeq	r0, r0, r4, ror #2
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	300e4101 	andcc	r4, lr, r1, lsl #2
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	00000020 	andeq	r0, r0, r0, lsr #32
  60:	00000000 	andeq	r0, r0, r0
  64:	20000198 	mulcs	r0, r8, r1
  68:	00000614 	andeq	r0, r0, r4, lsl r6
  6c:	400c0e41 	andmi	r0, ip, r1, asr #28
  70:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  74:	018e4002 	orreq	r4, lr, r2
  78:	04800e41 	streq	r0, [r0], #3649	; 0xe41
  7c:	00070d41 	andeq	r0, r7, r1, asr #26
  80:	0000000c 	andeq	r0, r0, ip
  84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  88:	7c020001 	stcvc	0, cr0, [r2], {1}
  8c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000080 	andeq	r0, r0, r0, lsl #1
  98:	200007ac 	andcs	r0, r0, ip, lsr #15
  9c:	00000010 	andeq	r0, r0, r0, lsl r0
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	100e4101 	andne	r4, lr, r1, lsl #2
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000080 	andeq	r0, r0, r0, lsl #1
  b8:	200007bc 			; <UNDEFINED> instruction: 0x200007bc
  bc:	00000046 	andeq	r0, r0, r6, asr #32
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	100e4101 	andne	r4, lr, r1, lsl #2
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000000c 	andeq	r0, r0, ip
  d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  d8:	7c020001 	stcvc	0, cr0, [r2], {1}
  dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  e8:	20000804 	andcs	r0, r0, r4, lsl #16
  ec:	00000184 	andeq	r0, r0, r4, lsl #3
  f0:	40080e41 	andmi	r0, r8, r1, asr #28
  f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f8:	380e4101 	stmdacc	lr, {r0, r8, lr}
  fc:	00070d41 	andeq	r0, r7, r1, asr #26
 100:	00000020 	andeq	r0, r0, r0, lsr #32
 104:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 108:	20000988 	andcs	r0, r0, r8, lsl #19
 10c:	00000124 	andeq	r0, r0, r4, lsr #2
 110:	400c0e41 	andmi	r0, ip, r1, asr #28
 114:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 118:	018e4002 	orreq	r4, lr, r2
 11c:	41180e41 	tstmi	r8, r1, asr #28
 120:	0000070d 	andeq	r0, r0, sp, lsl #14
 124:	0000000c 	andeq	r0, r0, ip
 128:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 12c:	7c020001 	stcvc	0, cr0, [r2], {1}
 130:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 134:	0000001c 	andeq	r0, r0, ip, lsl r0
 138:	00000124 	andeq	r0, r0, r4, lsr #2
 13c:	20000aac 	andcs	r0, r0, ip, lsr #21
 140:	000000d8 	ldrdeq	r0, [r0], -r8
 144:	40080e41 	andmi	r0, r8, r1, asr #28
 148:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 14c:	100e4101 	andne	r4, lr, r1, lsl #2
 150:	00070d41 	andeq	r0, r7, r1, asr #26
 154:	0000000c 	andeq	r0, r0, ip
 158:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 15c:	7c020001 	stcvc	0, cr0, [r2], {1}
 160:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 164:	00000018 	andeq	r0, r0, r8, lsl r0
 168:	00000154 	andeq	r0, r0, r4, asr r1
 16c:	20000b84 	andcs	r0, r0, r4, lsl #23
 170:	00000044 	andeq	r0, r0, r4, asr #32
 174:	40080e41 	andmi	r0, r8, r1, asr #28
 178:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 17c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 180:	00000018 	andeq	r0, r0, r8, lsl r0
 184:	00000154 	andeq	r0, r0, r4, asr r1
 188:	20000bc8 	andcs	r0, r0, r8, asr #23
 18c:	00000044 	andeq	r0, r0, r4, asr #32
 190:	40080e41 	andmi	r0, r8, r1, asr #28
 194:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 198:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 19c:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a0:	00000154 	andeq	r0, r0, r4, asr r1
 1a4:	20000c0c 	andcs	r0, r0, ip, lsl #24
 1a8:	0000002c 	andeq	r0, r0, ip, lsr #32
 1ac:	40080e41 	andmi	r0, r8, r1, asr #28
 1b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b4:	100e4101 	andne	r4, lr, r1, lsl #2
 1b8:	00070d41 	andeq	r0, r7, r1, asr #26
 1bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c0:	00000154 	andeq	r0, r0, r4, asr r1
 1c4:	20000c38 	andcs	r0, r0, r8, lsr ip
 1c8:	00000026 	andeq	r0, r0, r6, lsr #32
 1cc:	40080e41 	andmi	r0, r8, r1, asr #28
 1d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d4:	100e4101 	andne	r4, lr, r1, lsl #2
 1d8:	00070d41 	andeq	r0, r7, r1, asr #26
 1dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e0:	00000154 	andeq	r0, r0, r4, asr r1
 1e4:	20000c5e 	andcs	r0, r0, lr, asr ip
 1e8:	00000032 	andeq	r0, r0, r2, lsr r0
 1ec:	40080e41 	andmi	r0, r8, r1, asr #28
 1f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f4:	180e4101 	stmdane	lr, {r0, r8, lr}
 1f8:	00070d41 	andeq	r0, r7, r1, asr #26
 1fc:	00000018 	andeq	r0, r0, r8, lsl r0
 200:	00000154 	andeq	r0, r0, r4, asr r1
 204:	20000c90 	mulcs	r0, r0, ip
 208:	00000018 	andeq	r0, r0, r8, lsl r0
 20c:	40080e41 	andmi	r0, r8, r1, asr #28
 210:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 214:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 218:	00000018 	andeq	r0, r0, r8, lsl r0
 21c:	00000154 	andeq	r0, r0, r4, asr r1
 220:	20000ca8 	andcs	r0, r0, r8, lsr #25
 224:	00000030 	andeq	r0, r0, r0, lsr r0
 228:	40080e41 	andmi	r0, r8, r1, asr #28
 22c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 230:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 234:	0000001c 	andeq	r0, r0, ip, lsl r0
 238:	00000154 	andeq	r0, r0, r4, asr r1
 23c:	20000cd8 	ldrdcs	r0, [r0], -r8
 240:	00000050 	andeq	r0, r0, r0, asr r0
 244:	40080e41 	andmi	r0, r8, r1, asr #28
 248:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 24c:	180e4101 	stmdane	lr, {r0, r8, lr}
 250:	00070d41 	andeq	r0, r7, r1, asr #26
 254:	0000001c 	andeq	r0, r0, ip, lsl r0
 258:	00000154 	andeq	r0, r0, r4, asr r1
 25c:	20000d28 	andcs	r0, r0, r8, lsr #26
 260:	00000058 	andeq	r0, r0, r8, asr r0
 264:	40080e41 	andmi	r0, r8, r1, asr #28
 268:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 26c:	180e4101 	stmdane	lr, {r0, r8, lr}
 270:	00070d41 	andeq	r0, r7, r1, asr #26
 274:	0000001c 	andeq	r0, r0, ip, lsl r0
 278:	00000154 	andeq	r0, r0, r4, asr r1
 27c:	20000d80 	andcs	r0, r0, r0, lsl #27
 280:	00000066 	andeq	r0, r0, r6, rrx
 284:	40080e41 	andmi	r0, r8, r1, asr #28
 288:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 28c:	100e4101 	andne	r4, lr, r1, lsl #2
 290:	00070d41 	andeq	r0, r7, r1, asr #26
 294:	0000001c 	andeq	r0, r0, ip, lsl r0
 298:	00000154 	andeq	r0, r0, r4, asr r1
 29c:	20000de6 	andcs	r0, r0, r6, ror #27
 2a0:	0000006e 	andeq	r0, r0, lr, rrx
 2a4:	40080e41 	andmi	r0, r8, r1, asr #28
 2a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2ac:	100e4101 	andne	r4, lr, r1, lsl #2
 2b0:	00070d41 	andeq	r0, r7, r1, asr #26
 2b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b8:	00000154 	andeq	r0, r0, r4, asr r1
 2bc:	20000e54 	andcs	r0, r0, r4, asr lr
 2c0:	00000094 	muleq	r0, r4, r0
 2c4:	40080e41 	andmi	r0, r8, r1, asr #28
 2c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2cc:	180e4101 	stmdane	lr, {r0, r8, lr}
 2d0:	00070d41 	andeq	r0, r7, r1, asr #26
 2d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d8:	00000154 	andeq	r0, r0, r4, asr r1
 2dc:	20000ee8 	andcs	r0, r0, r8, ror #29
 2e0:	0000002a 	andeq	r0, r0, sl, lsr #32
 2e4:	40080e41 	andmi	r0, r8, r1, asr #28
 2e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2ec:	100e4101 	andne	r4, lr, r1, lsl #2
 2f0:	00070d41 	andeq	r0, r7, r1, asr #26
 2f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f8:	00000154 	andeq	r0, r0, r4, asr r1
 2fc:	20000f12 	andcs	r0, r0, r2, lsl pc
 300:	0000007e 	andeq	r0, r0, lr, ror r0
 304:	40080e41 	andmi	r0, r8, r1, asr #28
 308:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 30c:	100e4101 	andne	r4, lr, r1, lsl #2
 310:	00070d41 	andeq	r0, r7, r1, asr #26
 314:	0000001c 	andeq	r0, r0, ip, lsl r0
 318:	00000154 	andeq	r0, r0, r4, asr r1
 31c:	20000f90 	mulcs	r0, r0, pc	; <UNPREDICTABLE>
 320:	00000046 	andeq	r0, r0, r6, asr #32
 324:	40080e41 	andmi	r0, r8, r1, asr #28
 328:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 32c:	100e4101 	andne	r4, lr, r1, lsl #2
 330:	00070d41 	andeq	r0, r7, r1, asr #26
 334:	0000001c 	andeq	r0, r0, ip, lsl r0
 338:	00000154 	andeq	r0, r0, r4, asr r1
 33c:	20000fd6 	ldrdcs	r0, [r0], -r6
 340:	00000046 	andeq	r0, r0, r6, asr #32
 344:	40080e41 	andmi	r0, r8, r1, asr #28
 348:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 34c:	100e4101 	andne	r4, lr, r1, lsl #2
 350:	00070d41 	andeq	r0, r7, r1, asr #26
 354:	00000018 	andeq	r0, r0, r8, lsl r0
 358:	00000154 	andeq	r0, r0, r4, asr r1
 35c:	2000101c 	andcs	r1, r0, ip, lsl r0
 360:	0000006e 	andeq	r0, r0, lr, rrx
 364:	40080e41 	andmi	r0, r8, r1, asr #28
 368:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 36c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 370:	0000001c 	andeq	r0, r0, ip, lsl r0
 374:	00000154 	andeq	r0, r0, r4, asr r1
 378:	2000108a 	andcs	r1, r0, sl, lsl #1
 37c:	00000066 	andeq	r0, r0, r6, rrx
 380:	40080e41 	andmi	r0, r8, r1, asr #28
 384:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 388:	100e4101 	andne	r4, lr, r1, lsl #2
 38c:	00070d41 	andeq	r0, r7, r1, asr #26
 390:	0000001c 	andeq	r0, r0, ip, lsl r0
 394:	00000154 	andeq	r0, r0, r4, asr r1
 398:	200010f0 	strdcs	r1, [r0], -r0
 39c:	00000180 	andeq	r0, r0, r0, lsl #3
 3a0:	40080e41 	andmi	r0, r8, r1, asr #28
 3a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3a8:	200e4101 	andcs	r4, lr, r1, lsl #2
 3ac:	00070d41 	andeq	r0, r7, r1, asr #26
 3b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b4:	00000154 	andeq	r0, r0, r4, asr r1
 3b8:	20001270 	andcs	r1, r0, r0, ror r2
 3bc:	000001a0 	andeq	r0, r0, r0, lsr #3
 3c0:	40080e41 	andmi	r0, r8, r1, asr #28
 3c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3c8:	280e4101 	stmdacs	lr, {r0, r8, lr}
 3cc:	00070d41 	andeq	r0, r7, r1, asr #26
 3d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d4:	00000154 	andeq	r0, r0, r4, asr r1
 3d8:	20001410 	andcs	r1, r0, r0, lsl r4
 3dc:	000000d6 	ldrdeq	r0, [r0], -r6
 3e0:	40080e41 	andmi	r0, r8, r1, asr #28
 3e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3e8:	200e4101 	andcs	r4, lr, r1, lsl #2
 3ec:	00070d41 	andeq	r0, r7, r1, asr #26
 3f0:	00000024 	andeq	r0, r0, r4, lsr #32
 3f4:	00000154 	andeq	r0, r0, r4, asr r1
 3f8:	200014e6 	andcs	r1, r0, r6, ror #9
 3fc:	0000011a 	andeq	r0, r0, sl, lsl r1
 400:	40100e41 	andsmi	r0, r0, r1, asr #28
 404:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 408:	02874003 	addeq	r4, r7, #3
 40c:	41018e40 	tstmi	r1, r0, asr #28
 410:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 414:	00000007 	andeq	r0, r0, r7
 418:	0000001c 	andeq	r0, r0, ip, lsl r0
 41c:	00000154 	andeq	r0, r0, r4, asr r1
 420:	20001600 	andcs	r1, r0, r0, lsl #12
 424:	00000052 	andeq	r0, r0, r2, asr r0
 428:	40080e41 	andmi	r0, r8, r1, asr #28
 42c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 430:	200e4101 	andcs	r4, lr, r1, lsl #2
 434:	00070d41 	andeq	r0, r7, r1, asr #26
 438:	0000001c 	andeq	r0, r0, ip, lsl r0
 43c:	00000154 	andeq	r0, r0, r4, asr r1
 440:	20001652 	andcs	r1, r0, r2, asr r6
 444:	00000052 	andeq	r0, r0, r2, asr r0
 448:	40080e41 	andmi	r0, r8, r1, asr #28
 44c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 450:	200e4101 	andcs	r4, lr, r1, lsl #2
 454:	00070d41 	andeq	r0, r7, r1, asr #26
 458:	00000020 	andeq	r0, r0, r0, lsr #32
 45c:	00000154 	andeq	r0, r0, r4, asr r1
 460:	200016a4 	andcs	r1, r0, r4, lsr #13
 464:	00000130 	andeq	r0, r0, r0, lsr r1
 468:	400c0e41 	andmi	r0, ip, r1, asr #28
 46c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 470:	018e4002 	orreq	r4, lr, r2
 474:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 478:	0000070d 	andeq	r0, r0, sp, lsl #14
 47c:	0000001c 	andeq	r0, r0, ip, lsl r0
 480:	00000154 	andeq	r0, r0, r4, asr r1
 484:	200017d4 	ldrdcs	r1, [r0], -r4
 488:	00000108 	andeq	r0, r0, r8, lsl #2
 48c:	40080e41 	andmi	r0, r8, r1, asr #28
 490:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 494:	100e4101 	andne	r4, lr, r1, lsl #2
 498:	00070d41 	andeq	r0, r7, r1, asr #26
 49c:	0000001c 	andeq	r0, r0, ip, lsl r0
 4a0:	00000154 	andeq	r0, r0, r4, asr r1
 4a4:	200018dc 	ldrdcs	r1, [r0], -ip
 4a8:	00000082 	andeq	r0, r0, r2, lsl #1
 4ac:	40080e41 	andmi	r0, r8, r1, asr #28
 4b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4b4:	200e4101 	andcs	r4, lr, r1, lsl #2
 4b8:	18070c41 	stmdane	r7, {r0, r6, sl, fp}
 4bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4c0:	00000154 	andeq	r0, r0, r4, asr r1
 4c4:	2000195e 	andcs	r1, r0, lr, asr r9
 4c8:	0000006a 	andeq	r0, r0, sl, rrx
 4cc:	40080e41 	andmi	r0, r8, r1, asr #28
 4d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4d4:	100e4101 	andne	r4, lr, r1, lsl #2
 4d8:	00070d41 	andeq	r0, r7, r1, asr #26
 4dc:	0000000c 	andeq	r0, r0, ip
 4e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4e4:	7c020001 	stcvc	0, cr0, [r2], {1}
 4e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f0:	000004dc 	ldrdeq	r0, [r0], -ip
 4f4:	200019c8 	andcs	r1, r0, r8, asr #19
 4f8:	00000028 	andeq	r0, r0, r8, lsr #32
 4fc:	40080e41 	andmi	r0, r8, r1, asr #28
 500:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 504:	180e4101 	stmdane	lr, {r0, r8, lr}
 508:	00070d41 	andeq	r0, r7, r1, asr #26
 50c:	0000000c 	andeq	r0, r0, ip
 510:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 514:	7c020001 	stcvc	0, cr0, [r2], {1}
 518:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 51c:	0000001c 	andeq	r0, r0, ip, lsl r0
 520:	0000050c 	andeq	r0, r0, ip, lsl #10
 524:	200019f0 	strdcs	r1, [r0], -r0
 528:	00000028 	andeq	r0, r0, r8, lsr #32
 52c:	40080e41 	andmi	r0, r8, r1, asr #28
 530:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 534:	180e4101 	stmdane	lr, {r0, r8, lr}
 538:	00070d41 	andeq	r0, r7, r1, asr #26
 53c:	0000000c 	andeq	r0, r0, ip
 540:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 544:	7c020001 	stcvc	0, cr0, [r2], {1}
 548:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 54c:	00000018 	andeq	r0, r0, r8, lsl r0
 550:	0000053c 	andeq	r0, r0, ip, lsr r5
 554:	20001a18 	andcs	r1, r0, r8, lsl sl
 558:	00000018 	andeq	r0, r0, r8, lsl r0
 55c:	40080e41 	andmi	r0, r8, r1, asr #28
 560:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 564:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 568:	00000018 	andeq	r0, r0, r8, lsl r0
 56c:	0000053c 	andeq	r0, r0, ip, lsr r5
 570:	20001a30 	andcs	r1, r0, r0, lsr sl
 574:	00000014 	andeq	r0, r0, r4, lsl r0
 578:	40080e41 	andmi	r0, r8, r1, asr #28
 57c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 580:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 584:	00000020 	andeq	r0, r0, r0, lsr #32
 588:	0000053c 	andeq	r0, r0, ip, lsr r5
 58c:	20001a44 	andcs	r1, r0, r4, asr #20
 590:	00000034 	andeq	r0, r0, r4, lsr r0
 594:	400c0e41 	andmi	r0, ip, r1, asr #28
 598:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 59c:	018e4002 	orreq	r4, lr, r2
 5a0:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 5a4:	0000070d 	andeq	r0, r0, sp, lsl #14
 5a8:	0000000c 	andeq	r0, r0, ip
 5ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 5b0:	7c020001 	stcvc	0, cr0, [r2], {1}
 5b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5bc:	000005a8 	andeq	r0, r0, r8, lsr #11
 5c0:	20001a78 	andcs	r1, r0, r8, ror sl
 5c4:	00000044 	andeq	r0, r0, r4, asr #32
 5c8:	40080e41 	andmi	r0, r8, r1, asr #28
 5cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5d0:	180e4101 	stmdane	lr, {r0, r8, lr}
 5d4:	00070d41 	andeq	r0, r7, r1, asr #26
 5d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5dc:	000005a8 	andeq	r0, r0, r8, lsr #11
 5e0:	20001abc 			; <UNDEFINED> instruction: 0x20001abc
 5e4:	00000050 	andeq	r0, r0, r0, asr r0
 5e8:	40080e41 	andmi	r0, r8, r1, asr #28
 5ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5f0:	180e4101 	stmdane	lr, {r0, r8, lr}
 5f4:	00070d41 	andeq	r0, r7, r1, asr #26
 5f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5fc:	000005a8 	andeq	r0, r0, r8, lsr #11
 600:	20001b0c 	andcs	r1, r0, ip, lsl #22
 604:	0000002a 	andeq	r0, r0, sl, lsr #32
 608:	40080e41 	andmi	r0, r8, r1, asr #28
 60c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 610:	100e4101 	andne	r4, lr, r1, lsl #2
 614:	00070d41 	andeq	r0, r7, r1, asr #26
 618:	0000001c 	andeq	r0, r0, ip, lsl r0
 61c:	000005a8 	andeq	r0, r0, r8, lsr #11
 620:	20001b36 	andcs	r1, r0, r6, lsr fp
 624:	0000002a 	andeq	r0, r0, sl, lsr #32
 628:	40080e41 	andmi	r0, r8, r1, asr #28
 62c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 630:	100e4101 	andne	r4, lr, r1, lsl #2
 634:	00070d41 	andeq	r0, r7, r1, asr #26
 638:	00000020 	andeq	r0, r0, r0, lsr #32
 63c:	000005a8 	andeq	r0, r0, r8, lsr #11
 640:	20001b60 	andcs	r1, r0, r0, ror #22
 644:	00000054 	andeq	r0, r0, r4, asr r0
 648:	400c0e41 	andmi	r0, ip, r1, asr #28
 64c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 650:	018e4002 	orreq	r4, lr, r2
 654:	41180e41 	tstmi	r8, r1, asr #28
 658:	0000070d 	andeq	r0, r0, sp, lsl #14
 65c:	00000020 	andeq	r0, r0, r0, lsr #32
 660:	000005a8 	andeq	r0, r0, r8, lsr #11
 664:	20001bb4 			; <UNDEFINED> instruction: 0x20001bb4
 668:	00000054 	andeq	r0, r0, r4, asr r0
 66c:	400c0e41 	andmi	r0, ip, r1, asr #28
 670:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 674:	018e4002 	orreq	r4, lr, r2
 678:	41180e41 	tstmi	r8, r1, asr #28
 67c:	0000070d 	andeq	r0, r0, sp, lsl #14
 680:	0000001c 	andeq	r0, r0, ip, lsl r0
 684:	000005a8 	andeq	r0, r0, r8, lsr #11
 688:	20001c08 	andcs	r1, r0, r8, lsl #24
 68c:	00000030 	andeq	r0, r0, r0, lsr r0
 690:	40080e41 	andmi	r0, r8, r1, asr #28
 694:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 698:	100e4101 	andne	r4, lr, r1, lsl #2
 69c:	00070d41 	andeq	r0, r7, r1, asr #26
 6a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6a4:	000005a8 	andeq	r0, r0, r8, lsr #11
 6a8:	20001c38 	andcs	r1, r0, r8, lsr ip
 6ac:	00000034 	andeq	r0, r0, r4, lsr r0
 6b0:	40080e41 	andmi	r0, r8, r1, asr #28
 6b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6b8:	100e4101 	andne	r4, lr, r1, lsl #2
 6bc:	00070d41 	andeq	r0, r7, r1, asr #26
 6c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6c4:	000005a8 	andeq	r0, r0, r8, lsr #11
 6c8:	20001c6c 	andcs	r1, r0, ip, ror #24
 6cc:	0000003c 	andeq	r0, r0, ip, lsr r0
 6d0:	40080e41 	andmi	r0, r8, r1, asr #28
 6d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6d8:	100e4101 	andne	r4, lr, r1, lsl #2
 6dc:	00070d41 	andeq	r0, r7, r1, asr #26
 6e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6e4:	000005a8 	andeq	r0, r0, r8, lsr #11
 6e8:	20001ca8 	andcs	r1, r0, r8, lsr #25
 6ec:	00000050 	andeq	r0, r0, r0, asr r0
 6f0:	40080e41 	andmi	r0, r8, r1, asr #28
 6f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6f8:	180e4101 	stmdane	lr, {r0, r8, lr}
 6fc:	00070d41 	andeq	r0, r7, r1, asr #26
 700:	00000018 	andeq	r0, r0, r8, lsl r0
 704:	000005a8 	andeq	r0, r0, r8, lsr #11
 708:	20001cf8 	strdcs	r1, [r0], -r8
 70c:	0000009a 	muleq	r0, sl, r0
 710:	40080e41 	andmi	r0, r8, r1, asr #28
 714:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 718:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 71c:	00000018 	andeq	r0, r0, r8, lsl r0
 720:	000005a8 	andeq	r0, r0, r8, lsr #11
 724:	20001d92 	mulcs	r0, r2, sp
 728:	0000001a 	andeq	r0, r0, sl, lsl r0
 72c:	40080e41 	andmi	r0, r8, r1, asr #28
 730:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 734:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 738:	00000018 	andeq	r0, r0, r8, lsl r0
 73c:	000005a8 	andeq	r0, r0, r8, lsr #11
 740:	20001dac 	andcs	r1, r0, ip, lsr #27
 744:	00000012 	andeq	r0, r0, r2, lsl r0
 748:	40080e41 	andmi	r0, r8, r1, asr #28
 74c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 750:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 754:	00000020 	andeq	r0, r0, r0, lsr #32
 758:	000005a8 	andeq	r0, r0, r8, lsr #11
 75c:	20001dbe 			; <UNDEFINED> instruction: 0x20001dbe
 760:	0000006a 	andeq	r0, r0, sl, rrx
 764:	400c0e41 	andmi	r0, ip, r1, asr #28
 768:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 76c:	018e4002 	orreq	r4, lr, r2
 770:	41300e41 	teqmi	r0, r1, asr #28
 774:	0000070d 	andeq	r0, r0, sp, lsl #14
 778:	0000001c 	andeq	r0, r0, ip, lsl r0
 77c:	000005a8 	andeq	r0, r0, r8, lsr #11
 780:	20001e28 	andcs	r1, r0, r8, lsr #28
 784:	0000005e 	andeq	r0, r0, lr, asr r0
 788:	40080e41 	andmi	r0, r8, r1, asr #28
 78c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 790:	100e4101 	andne	r4, lr, r1, lsl #2
 794:	00070d41 	andeq	r0, r7, r1, asr #26
 798:	0000001c 	andeq	r0, r0, ip, lsl r0
 79c:	000005a8 	andeq	r0, r0, r8, lsr #11
 7a0:	20001e86 	andcs	r1, r0, r6, lsl #29
 7a4:	0000008e 	andeq	r0, r0, lr, lsl #1
 7a8:	40080e41 	andmi	r0, r8, r1, asr #28
 7ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7b0:	200e4101 	andcs	r4, lr, r1, lsl #2
 7b4:	00070d41 	andeq	r0, r7, r1, asr #26
 7b8:	00000020 	andeq	r0, r0, r0, lsr #32
 7bc:	000005a8 	andeq	r0, r0, r8, lsr #11
 7c0:	20001f14 	andcs	r1, r0, r4, lsl pc
 7c4:	00000084 	andeq	r0, r0, r4, lsl #1
 7c8:	400c0e41 	andmi	r0, ip, r1, asr #28
 7cc:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 7d0:	018e4002 	orreq	r4, lr, r2
 7d4:	41380e41 	teqmi	r8, r1, asr #28
 7d8:	0000070d 	andeq	r0, r0, sp, lsl #14
 7dc:	0000000c 	andeq	r0, r0, ip
 7e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 7e4:	7c020001 	stcvc	0, cr0, [r2], {1}
 7e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 7ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 7f0:	000007dc 	ldrdeq	r0, [r0], -ip
 7f4:	20001f98 	mulcs	r0, r8, pc	; <UNPREDICTABLE>
 7f8:	0000005a 	andeq	r0, r0, sl, asr r0
 7fc:	40080e41 	andmi	r0, r8, r1, asr #28
 800:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 804:	180e4101 	stmdane	lr, {r0, r8, lr}
 808:	00070d41 	andeq	r0, r7, r1, asr #26
 80c:	0000001c 	andeq	r0, r0, ip, lsl r0
 810:	000007dc 	ldrdeq	r0, [r0], -ip
 814:	20001ff2 	strdcs	r1, [r0], -r2
 818:	0000003a 	andeq	r0, r0, sl, lsr r0
 81c:	40080e41 	andmi	r0, r8, r1, asr #28
 820:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 824:	180e4101 	stmdane	lr, {r0, r8, lr}
 828:	00070d41 	andeq	r0, r7, r1, asr #26
 82c:	0000000c 	andeq	r0, r0, ip
 830:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 834:	7c010001 	stcvc	0, cr0, [r1], {1}
 838:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 83c:	0000000c 	andeq	r0, r0, ip
 840:	0000082c 	andeq	r0, r0, ip, lsr #16
 844:	2000202d 	andcs	r2, r0, sp, lsr #32
 848:	000001cc 	andeq	r0, r0, ip, asr #3
