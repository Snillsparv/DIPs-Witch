
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#endif
}

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f8fa 	bl	200001fc <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:
void init_app( void ) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*portModer = 0x55555555;
20000014:	4b05      	ldr	r3, [pc, #20]	; (2000002c <init_app+0x1c>)
20000016:	4a06      	ldr	r2, [pc, #24]	; (20000030 <init_app+0x20>)
20000018:	601a      	str	r2, [r3, #0]
	set_up_DIL();
2000001a:	f003 f803 	bl	20003024 <set_up_DIL>
	graphic_initialize();
2000001e:	f002 fb03 	bl	20002628 <graphic_initialize>
	graphic_clear_screen();
20000022:	f002 fb38 	bl	20002696 <graphic_clear_screen>
}
20000026:	46c0      	nop			; (mov r8, r8)
20000028:	46bd      	mov	sp, r7
2000002a:	bd80      	pop	{r7, pc}
2000002c:	40021000 	andmi	r1, r2, r0
20000030:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000034 <initSprites>:
sprite tempTitleLight;
sprite tempPressBlack;
sprite tempPressGray;
sprite tempPressLight;

void initSprites( void ) {
20000034:	b580      	push	{r7, lr}
20000036:	b08a      	sub	sp, #40	; 0x28
20000038:	af00      	add	r7, sp, #0
	sprite *monsterPointer = &tempMonster;
2000003a:	4b49      	ldr	r3, [pc, #292]	; (20000160 <initSprites+0x12c>)
2000003c:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(monsterPointer, monster_black_bits, monster_black_width, monster_black_height);
2000003e:	4949      	ldr	r1, [pc, #292]	; (20000164 <initSprites+0x130>)
20000040:	6a78      	ldr	r0, [r7, #36]	; 0x24
20000042:	231e      	movs	r3, #30
20000044:	221e      	movs	r2, #30
20000046:	f002 ffd9 	bl	20002ffc <load_sprite>
	monster = monsterPointer;
2000004a:	4b47      	ldr	r3, [pc, #284]	; (20000168 <initSprites+0x134>)
2000004c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000004e:	601a      	str	r2, [r3, #0]
	
	sprite *monsterPointer2 = &tempMonsterLight;
20000050:	4b46      	ldr	r3, [pc, #280]	; (2000016c <initSprites+0x138>)
20000052:	623b      	str	r3, [r7, #32]
	load_sprite(monsterPointer2, monster_light_bits, monster_light_width, monster_light_height);
20000054:	4946      	ldr	r1, [pc, #280]	; (20000170 <initSprites+0x13c>)
20000056:	6a38      	ldr	r0, [r7, #32]
20000058:	231e      	movs	r3, #30
2000005a:	221e      	movs	r2, #30
2000005c:	f002 ffce 	bl	20002ffc <load_sprite>
	monsterLight = monsterPointer2;
20000060:	4b44      	ldr	r3, [pc, #272]	; (20000174 <initSprites+0x140>)
20000062:	6a3a      	ldr	r2, [r7, #32]
20000064:	601a      	str	r2, [r3, #0]

	sprite *monsterPointer3 = &tempMonsterGray;
20000066:	4b44      	ldr	r3, [pc, #272]	; (20000178 <initSprites+0x144>)
20000068:	61fb      	str	r3, [r7, #28]
	load_sprite(monsterPointer3, monster_gray_bits, monster_gray_width, monster_gray_height);
2000006a:	4944      	ldr	r1, [pc, #272]	; (2000017c <initSprites+0x148>)
2000006c:	69f8      	ldr	r0, [r7, #28]
2000006e:	231e      	movs	r3, #30
20000070:	221e      	movs	r2, #30
20000072:	f002 ffc3 	bl	20002ffc <load_sprite>
	monsterGray = monsterPointer3;
20000076:	4b42      	ldr	r3, [pc, #264]	; (20000180 <initSprites+0x14c>)
20000078:	69fa      	ldr	r2, [r7, #28]
2000007a:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempBg;
2000007c:	4b41      	ldr	r3, [pc, #260]	; (20000184 <initSprites+0x150>)
2000007e:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer4, bg_bits, bg_width, bg_height);
20000080:	4941      	ldr	r1, [pc, #260]	; (20000188 <initSprites+0x154>)
20000082:	69b8      	ldr	r0, [r7, #24]
20000084:	2340      	movs	r3, #64	; 0x40
20000086:	2280      	movs	r2, #128	; 0x80
20000088:	f002 ffb8 	bl	20002ffc <load_sprite>
	bg = pointer4;
2000008c:	4b3f      	ldr	r3, [pc, #252]	; (2000018c <initSprites+0x158>)
2000008e:	69ba      	ldr	r2, [r7, #24]
20000090:	601a      	str	r2, [r3, #0]
	
	sprite *pointer5 = &tempCastleBlack;
20000092:	4b3f      	ldr	r3, [pc, #252]	; (20000190 <initSprites+0x15c>)
20000094:	617b      	str	r3, [r7, #20]
	load_sprite(pointer5, castle_black_bits, castle_black_width, castle_black_height);
20000096:	493f      	ldr	r1, [pc, #252]	; (20000194 <initSprites+0x160>)
20000098:	6978      	ldr	r0, [r7, #20]
2000009a:	2340      	movs	r3, #64	; 0x40
2000009c:	2280      	movs	r2, #128	; 0x80
2000009e:	f002 ffad 	bl	20002ffc <load_sprite>
	castleBlack = pointer5;
200000a2:	4b3d      	ldr	r3, [pc, #244]	; (20000198 <initSprites+0x164>)
200000a4:	697a      	ldr	r2, [r7, #20]
200000a6:	601a      	str	r2, [r3, #0]
	
	sprite *pointer6 = &tempCastleGray;
200000a8:	4b3c      	ldr	r3, [pc, #240]	; (2000019c <initSprites+0x168>)
200000aa:	613b      	str	r3, [r7, #16]
	load_sprite(pointer6, castle_gray_bits, castle_black_width, castle_black_height);
200000ac:	493c      	ldr	r1, [pc, #240]	; (200001a0 <initSprites+0x16c>)
200000ae:	6938      	ldr	r0, [r7, #16]
200000b0:	2340      	movs	r3, #64	; 0x40
200000b2:	2280      	movs	r2, #128	; 0x80
200000b4:	f002 ffa2 	bl	20002ffc <load_sprite>
	castleGray = pointer6;
200000b8:	4b3a      	ldr	r3, [pc, #232]	; (200001a4 <initSprites+0x170>)
200000ba:	693a      	ldr	r2, [r7, #16]
200000bc:	601a      	str	r2, [r3, #0]
	
	sprite *pointer7 = &tempCastleLight;
200000be:	4b3a      	ldr	r3, [pc, #232]	; (200001a8 <initSprites+0x174>)
200000c0:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer7, castle_light_bits, castle_black_width, castle_black_height);
200000c2:	493a      	ldr	r1, [pc, #232]	; (200001ac <initSprites+0x178>)
200000c4:	68f8      	ldr	r0, [r7, #12]
200000c6:	2340      	movs	r3, #64	; 0x40
200000c8:	2280      	movs	r2, #128	; 0x80
200000ca:	f002 ff97 	bl	20002ffc <load_sprite>
	castleLight = pointer7;
200000ce:	4b38      	ldr	r3, [pc, #224]	; (200001b0 <initSprites+0x17c>)
200000d0:	68fa      	ldr	r2, [r7, #12]
200000d2:	601a      	str	r2, [r3, #0]
	
	sprite *pointer8 = &tempTitleLight;
200000d4:	4b37      	ldr	r3, [pc, #220]	; (200001b4 <initSprites+0x180>)
200000d6:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer8, title_light_bits, title_black_width, title_black_height);
200000d8:	4937      	ldr	r1, [pc, #220]	; (200001b8 <initSprites+0x184>)
200000da:	68b8      	ldr	r0, [r7, #8]
200000dc:	231e      	movs	r3, #30
200000de:	2232      	movs	r2, #50	; 0x32
200000e0:	f002 ff8c 	bl	20002ffc <load_sprite>
	titleLight = pointer8;
200000e4:	4b35      	ldr	r3, [pc, #212]	; (200001bc <initSprites+0x188>)
200000e6:	68ba      	ldr	r2, [r7, #8]
200000e8:	601a      	str	r2, [r3, #0]
	sprite *pointer9 = &tempTitleGray;
200000ea:	4b35      	ldr	r3, [pc, #212]	; (200001c0 <initSprites+0x18c>)
200000ec:	607b      	str	r3, [r7, #4]
	load_sprite(pointer9, title_gray_bits, title_black_width, title_black_height);
200000ee:	4935      	ldr	r1, [pc, #212]	; (200001c4 <initSprites+0x190>)
200000f0:	6878      	ldr	r0, [r7, #4]
200000f2:	231e      	movs	r3, #30
200000f4:	2232      	movs	r2, #50	; 0x32
200000f6:	f002 ff81 	bl	20002ffc <load_sprite>
	titleGray = pointer9;
200000fa:	4b33      	ldr	r3, [pc, #204]	; (200001c8 <initSprites+0x194>)
200000fc:	687a      	ldr	r2, [r7, #4]
200000fe:	601a      	str	r2, [r3, #0]
	sprite *pointer10 = &tempTitleBlack;
20000100:	4b32      	ldr	r3, [pc, #200]	; (200001cc <initSprites+0x198>)
20000102:	603b      	str	r3, [r7, #0]
	load_sprite(pointer10, title_black_bits, title_black_width, title_black_height);
20000104:	4932      	ldr	r1, [pc, #200]	; (200001d0 <initSprites+0x19c>)
20000106:	6838      	ldr	r0, [r7, #0]
20000108:	231e      	movs	r3, #30
2000010a:	2232      	movs	r2, #50	; 0x32
2000010c:	f002 ff76 	bl	20002ffc <load_sprite>
	titleBlack = pointer10;	
20000110:	4b30      	ldr	r3, [pc, #192]	; (200001d4 <initSprites+0x1a0>)
20000112:	683a      	ldr	r2, [r7, #0]
20000114:	601a      	str	r2, [r3, #0]
	
	pointer8 = &tempPressLight;
20000116:	4b30      	ldr	r3, [pc, #192]	; (200001d8 <initSprites+0x1a4>)
20000118:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer8, press_light_bits, press_black_width, press_black_height);
2000011a:	4930      	ldr	r1, [pc, #192]	; (200001dc <initSprites+0x1a8>)
2000011c:	68b8      	ldr	r0, [r7, #8]
2000011e:	2323      	movs	r3, #35	; 0x23
20000120:	223c      	movs	r2, #60	; 0x3c
20000122:	f002 ff6b 	bl	20002ffc <load_sprite>
	pressLight = pointer8;
20000126:	4b2e      	ldr	r3, [pc, #184]	; (200001e0 <initSprites+0x1ac>)
20000128:	68ba      	ldr	r2, [r7, #8]
2000012a:	601a      	str	r2, [r3, #0]
	pointer9 = &tempPressGray;
2000012c:	4b2d      	ldr	r3, [pc, #180]	; (200001e4 <initSprites+0x1b0>)
2000012e:	607b      	str	r3, [r7, #4]
	load_sprite(pointer9, press_gray_bits, press_black_width, press_black_height);
20000130:	492d      	ldr	r1, [pc, #180]	; (200001e8 <initSprites+0x1b4>)
20000132:	6878      	ldr	r0, [r7, #4]
20000134:	2323      	movs	r3, #35	; 0x23
20000136:	223c      	movs	r2, #60	; 0x3c
20000138:	f002 ff60 	bl	20002ffc <load_sprite>
	pressGray = pointer9;
2000013c:	4b2b      	ldr	r3, [pc, #172]	; (200001ec <initSprites+0x1b8>)
2000013e:	687a      	ldr	r2, [r7, #4]
20000140:	601a      	str	r2, [r3, #0]
	pointer10 = &tempPressBlack;
20000142:	4b2b      	ldr	r3, [pc, #172]	; (200001f0 <initSprites+0x1bc>)
20000144:	603b      	str	r3, [r7, #0]
	load_sprite(pointer10, press_black_bits, press_black_width, press_black_height);
20000146:	492b      	ldr	r1, [pc, #172]	; (200001f4 <initSprites+0x1c0>)
20000148:	6838      	ldr	r0, [r7, #0]
2000014a:	2323      	movs	r3, #35	; 0x23
2000014c:	223c      	movs	r2, #60	; 0x3c
2000014e:	f002 ff55 	bl	20002ffc <load_sprite>
	pressBlack = pointer10;	
20000152:	4b29      	ldr	r3, [pc, #164]	; (200001f8 <initSprites+0x1c4>)
20000154:	683a      	ldr	r2, [r7, #0]
20000156:	601a      	str	r2, [r3, #0]
	
	
}
20000158:	46c0      	nop			; (mov r8, r8)
2000015a:	46bd      	mov	sp, r7
2000015c:	b00a      	add	sp, #40	; 0x28
2000015e:	bd80      	pop	{r7, pc}
20000160:	20003b30 	andcs	r3, r0, r0, lsr fp
20000164:	20006108 	andcs	r6, r0, r8, lsl #2
20000168:	20003b04 	andcs	r3, r0, r4, lsl #22
2000016c:	20003b88 	andcs	r3, r0, r8, lsl #23
20000170:	20006180 	andcs	r6, r0, r0, lsl #3
20000174:	20003bb0 			; <UNDEFINED> instruction: 0x20003bb0
20000178:	20003b50 	andcs	r3, r0, r0, asr fp
2000017c:	200061f8 	strdcs	r6, [r0], -r8
20000180:	20003bc4 	andcs	r3, r0, r4, asr #23
20000184:	20003bc8 	andcs	r3, r0, r8, asr #23
20000188:	20007434 	andcs	r7, r0, r4, lsr r4
2000018c:	20003b4c 	andcs	r3, r0, ip, asr #22
20000190:	20003b08 	andcs	r3, r0, r8, lsl #22
20000194:	200065b8 			; <UNDEFINED> instruction: 0x200065b8
20000198:	20003b2c 	andcs	r3, r0, ip, lsr #22
2000019c:	20003ba4 	andcs	r3, r0, r4, lsr #23
200001a0:	200069b8 			; <UNDEFINED> instruction: 0x200069b8
200001a4:	20003bb8 			; <UNDEFINED> instruction: 0x20003bb8
200001a8:	20003b78 	andcs	r3, r0, r8, ror fp
200001ac:	20006db8 			; <UNDEFINED> instruction: 0x20006db8
200001b0:	20003b68 	andcs	r3, r0, r8, ror #22
200001b4:	20003b5c 	andcs	r3, r0, ip, asr fp
200001b8:	200071b8 			; <UNDEFINED> instruction: 0x200071b8
200001bc:	20003bb4 			; <UNDEFINED> instruction: 0x20003bb4
200001c0:	20003b20 	andcs	r3, r0, r0, lsr #22
200001c4:	2000728c 	andcs	r7, r0, ip, lsl #5
200001c8:	20003ba0 	andcs	r3, r0, r0, lsr #23
200001cc:	20003b40 	andcs	r3, r0, r0, asr #22
200001d0:	20007360 	andcs	r7, r0, r0, ror #6
200001d4:	20003bd4 	ldrdcs	r3, [r0], -r4
200001d8:	20003b6c 	andcs	r3, r0, ip, ror #22
200001dc:	20006388 	andcs	r6, r0, r8, lsl #7
200001e0:	20003b3c 	andcs	r3, r0, ip, lsr fp
200001e4:	20003b14 	andcs	r3, r0, r4, lsl fp
200001e8:	200064a0 	andcs	r6, r0, r0, lsr #9
200001ec:	20003b84 	andcs	r3, r0, r4, lsl #23
200001f0:	20003b94 	mulcs	r0, r4, fp
200001f4:	20006270 	andcs	r6, r0, r0, ror r2
200001f8:	20003bc0 	andcs	r3, r0, r0, asr #23

200001fc <main>:
	
int counter = 0;
int current_screen = START_SCREEN;
void main(void)
{
200001fc:	b590      	push	{r4, r7, lr}
200001fe:	4cfe      	ldr	r4, [pc, #1016]	; (200005f8 <main+0x3fc>)
20000200:	44a5      	add	sp, r4
20000202:	af00      	add	r7, sp, #0
	
	init_app();	
20000204:	f7ff ff04 	bl	20000010 <init_app>
	initSprites();
20000208:	f7ff ff14 	bl	20000034 <initSprites>
	
	GameObject monsterObj;
	Image monsterImage;
	Image monsterImages[] = {monsterImage};
2000020c:	23db      	movs	r3, #219	; 0xdb
2000020e:	009b      	lsls	r3, r3, #2
20000210:	18fb      	adds	r3, r7, r3
20000212:	22de      	movs	r2, #222	; 0xde
20000214:	0092      	lsls	r2, r2, #2
20000216:	18ba      	adds	r2, r7, r2
20000218:	ca13      	ldmia	r2!, {r0, r1, r4}
2000021a:	c313      	stmia	r3!, {r0, r1, r4}
	monsterObj.images = monsterImages;
2000021c:	23e1      	movs	r3, #225	; 0xe1
2000021e:	009b      	lsls	r3, r3, #2
20000220:	18fb      	adds	r3, r7, r3
20000222:	22db      	movs	r2, #219	; 0xdb
20000224:	0092      	lsls	r2, r2, #2
20000226:	18ba      	adds	r2, r7, r2
20000228:	601a      	str	r2, [r3, #0]
	load_image(&monsterObj.images[0], monster, monsterGray, monsterLight);
2000022a:	23e1      	movs	r3, #225	; 0xe1
2000022c:	009b      	lsls	r3, r3, #2
2000022e:	18fb      	adds	r3, r7, r3
20000230:	6818      	ldr	r0, [r3, #0]
20000232:	4bf2      	ldr	r3, [pc, #968]	; (200005fc <main+0x400>)
20000234:	6819      	ldr	r1, [r3, #0]
20000236:	4bf2      	ldr	r3, [pc, #968]	; (20000600 <main+0x404>)
20000238:	681a      	ldr	r2, [r3, #0]
2000023a:	4bf2      	ldr	r3, [pc, #968]	; (20000604 <main+0x408>)
2000023c:	681b      	ldr	r3, [r3, #0]
2000023e:	f002 fec9 	bl	20002fd4 <load_image>
	monsterObj.xPos = 30;
20000242:	23e1      	movs	r3, #225	; 0xe1
20000244:	009b      	lsls	r3, r3, #2
20000246:	18fb      	adds	r3, r7, r3
20000248:	221e      	movs	r2, #30
2000024a:	605a      	str	r2, [r3, #4]
	monsterObj.yPos = 4;
2000024c:	23e1      	movs	r3, #225	; 0xe1
2000024e:	009b      	lsls	r3, r3, #2
20000250:	18fb      	adds	r3, r7, r3
20000252:	2204      	movs	r2, #4
20000254:	609a      	str	r2, [r3, #8]
	monsterObj.current_frame = 0;
20000256:	23e1      	movs	r3, #225	; 0xe1
20000258:	009b      	lsls	r3, r3, #2
2000025a:	18fb      	adds	r3, r7, r3
2000025c:	2200      	movs	r2, #0
2000025e:	615a      	str	r2, [r3, #20]
	monsterObj.update = playerUpdate;
20000260:	23e1      	movs	r3, #225	; 0xe1
20000262:	009b      	lsls	r3, r3, #2
20000264:	18fb      	adds	r3, r7, r3
20000266:	4ae8      	ldr	r2, [pc, #928]	; (20000608 <main+0x40c>)
20000268:	60da      	str	r2, [r3, #12]
	
	GameObject titleObj;
	Image titleImage;
	Image titleImages[] = {titleImage};
2000026a:	23cc      	movs	r3, #204	; 0xcc
2000026c:	009b      	lsls	r3, r3, #2
2000026e:	18fb      	adds	r3, r7, r3
20000270:	22cf      	movs	r2, #207	; 0xcf
20000272:	0092      	lsls	r2, r2, #2
20000274:	18ba      	adds	r2, r7, r2
20000276:	ca13      	ldmia	r2!, {r0, r1, r4}
20000278:	c313      	stmia	r3!, {r0, r1, r4}
	titleObj.images = titleImages;
2000027a:	23d2      	movs	r3, #210	; 0xd2
2000027c:	009b      	lsls	r3, r3, #2
2000027e:	18fb      	adds	r3, r7, r3
20000280:	22cc      	movs	r2, #204	; 0xcc
20000282:	0092      	lsls	r2, r2, #2
20000284:	18ba      	adds	r2, r7, r2
20000286:	601a      	str	r2, [r3, #0]
	load_image(&titleObj.images[0], titleBlack, titleGray, titleLight);
20000288:	23d2      	movs	r3, #210	; 0xd2
2000028a:	009b      	lsls	r3, r3, #2
2000028c:	18fb      	adds	r3, r7, r3
2000028e:	6818      	ldr	r0, [r3, #0]
20000290:	4bde      	ldr	r3, [pc, #888]	; (2000060c <main+0x410>)
20000292:	6819      	ldr	r1, [r3, #0]
20000294:	4bde      	ldr	r3, [pc, #888]	; (20000610 <main+0x414>)
20000296:	681a      	ldr	r2, [r3, #0]
20000298:	4bde      	ldr	r3, [pc, #888]	; (20000614 <main+0x418>)
2000029a:	681b      	ldr	r3, [r3, #0]
2000029c:	f002 fe9a 	bl	20002fd4 <load_image>
	titleObj.xPos = 1;
200002a0:	23d2      	movs	r3, #210	; 0xd2
200002a2:	009b      	lsls	r3, r3, #2
200002a4:	18fb      	adds	r3, r7, r3
200002a6:	2201      	movs	r2, #1
200002a8:	605a      	str	r2, [r3, #4]
	titleObj.yPos = -40;
200002aa:	23d2      	movs	r3, #210	; 0xd2
200002ac:	009b      	lsls	r3, r3, #2
200002ae:	18fb      	adds	r3, r7, r3
200002b0:	2228      	movs	r2, #40	; 0x28
200002b2:	4252      	negs	r2, r2
200002b4:	609a      	str	r2, [r3, #8]
	titleObj.current_frame = 0;
200002b6:	23d2      	movs	r3, #210	; 0xd2
200002b8:	009b      	lsls	r3, r3, #2
200002ba:	18fb      	adds	r3, r7, r3
200002bc:	2200      	movs	r2, #0
200002be:	615a      	str	r2, [r3, #20]
	
	GameObject pressObj;
	Image pressImage;
	Image pressImages[] = {pressImage};
200002c0:	23bd      	movs	r3, #189	; 0xbd
200002c2:	009b      	lsls	r3, r3, #2
200002c4:	18fb      	adds	r3, r7, r3
200002c6:	22c0      	movs	r2, #192	; 0xc0
200002c8:	0092      	lsls	r2, r2, #2
200002ca:	18ba      	adds	r2, r7, r2
200002cc:	ca13      	ldmia	r2!, {r0, r1, r4}
200002ce:	c313      	stmia	r3!, {r0, r1, r4}
	pressObj.images = pressImages;
200002d0:	23c3      	movs	r3, #195	; 0xc3
200002d2:	009b      	lsls	r3, r3, #2
200002d4:	18fb      	adds	r3, r7, r3
200002d6:	22bd      	movs	r2, #189	; 0xbd
200002d8:	0092      	lsls	r2, r2, #2
200002da:	18ba      	adds	r2, r7, r2
200002dc:	601a      	str	r2, [r3, #0]
	load_image(&pressObj.images[0], pressBlack, pressLight, pressGray);
200002de:	23c3      	movs	r3, #195	; 0xc3
200002e0:	009b      	lsls	r3, r3, #2
200002e2:	18fb      	adds	r3, r7, r3
200002e4:	6818      	ldr	r0, [r3, #0]
200002e6:	4bcc      	ldr	r3, [pc, #816]	; (20000618 <main+0x41c>)
200002e8:	6819      	ldr	r1, [r3, #0]
200002ea:	4bcc      	ldr	r3, [pc, #816]	; (2000061c <main+0x420>)
200002ec:	681a      	ldr	r2, [r3, #0]
200002ee:	4bcc      	ldr	r3, [pc, #816]	; (20000620 <main+0x424>)
200002f0:	681b      	ldr	r3, [r3, #0]
200002f2:	f002 fe6f 	bl	20002fd4 <load_image>
	pressObj.xPos = 65-30;
200002f6:	23c3      	movs	r3, #195	; 0xc3
200002f8:	009b      	lsls	r3, r3, #2
200002fa:	18fb      	adds	r3, r7, r3
200002fc:	2223      	movs	r2, #35	; 0x23
200002fe:	605a      	str	r2, [r3, #4]
	pressObj.yPos = 29-15;
20000300:	23c3      	movs	r3, #195	; 0xc3
20000302:	009b      	lsls	r3, r3, #2
20000304:	18fb      	adds	r3, r7, r3
20000306:	220e      	movs	r2, #14
20000308:	609a      	str	r2, [r3, #8]
	pressObj.current_frame = 0;
2000030a:	23c3      	movs	r3, #195	; 0xc3
2000030c:	009b      	lsls	r3, r3, #2
2000030e:	18fb      	adds	r3, r7, r3
20000310:	2200      	movs	r2, #0
20000312:	615a      	str	r2, [r3, #20]
	
	GameObject castleObj;
	Image castleImage;
	Image castleImages[] = {castleImage};
20000314:	4bc3      	ldr	r3, [pc, #780]	; (20000624 <main+0x428>)
20000316:	22ee      	movs	r2, #238	; 0xee
20000318:	0092      	lsls	r2, r2, #2
2000031a:	4694      	mov	ip, r2
2000031c:	44bc      	add	ip, r7
2000031e:	4463      	add	r3, ip
20000320:	22b1      	movs	r2, #177	; 0xb1
20000322:	0092      	lsls	r2, r2, #2
20000324:	18ba      	adds	r2, r7, r2
20000326:	ca13      	ldmia	r2!, {r0, r1, r4}
20000328:	c313      	stmia	r3!, {r0, r1, r4}
	castleObj.images = castleImages;
2000032a:	23b4      	movs	r3, #180	; 0xb4
2000032c:	009b      	lsls	r3, r3, #2
2000032e:	18fb      	adds	r3, r7, r3
20000330:	22ae      	movs	r2, #174	; 0xae
20000332:	0092      	lsls	r2, r2, #2
20000334:	18ba      	adds	r2, r7, r2
20000336:	601a      	str	r2, [r3, #0]
	load_image(&castleObj.images[0], castleBlack, castleGray, castleLight);
20000338:	23b4      	movs	r3, #180	; 0xb4
2000033a:	009b      	lsls	r3, r3, #2
2000033c:	18fb      	adds	r3, r7, r3
2000033e:	6818      	ldr	r0, [r3, #0]
20000340:	4bb9      	ldr	r3, [pc, #740]	; (20000628 <main+0x42c>)
20000342:	6819      	ldr	r1, [r3, #0]
20000344:	4bb9      	ldr	r3, [pc, #740]	; (2000062c <main+0x430>)
20000346:	681a      	ldr	r2, [r3, #0]
20000348:	4bb9      	ldr	r3, [pc, #740]	; (20000630 <main+0x434>)
2000034a:	681b      	ldr	r3, [r3, #0]
2000034c:	f002 fe42 	bl	20002fd4 <load_image>
	castleObj.xPos = 1;
20000350:	23b4      	movs	r3, #180	; 0xb4
20000352:	009b      	lsls	r3, r3, #2
20000354:	18fb      	adds	r3, r7, r3
20000356:	2201      	movs	r2, #1
20000358:	605a      	str	r2, [r3, #4]
	castleObj.yPos = 1;
2000035a:	23b4      	movs	r3, #180	; 0xb4
2000035c:	009b      	lsls	r3, r3, #2
2000035e:	18fb      	adds	r3, r7, r3
20000360:	2201      	movs	r2, #1
20000362:	609a      	str	r2, [r3, #8]
	castleObj.current_frame = 0;
20000364:	23b4      	movs	r3, #180	; 0xb4
20000366:	009b      	lsls	r3, r3, #2
20000368:	18fb      	adds	r3, r7, r3
2000036a:	2200      	movs	r2, #0
2000036c:	615a      	str	r2, [r3, #20]
	
	GameObject indoors;
	init_indoors( &indoors );
2000036e:	23a5      	movs	r3, #165	; 0xa5
20000370:	009b      	lsls	r3, r3, #2
20000372:	18fb      	adds	r3, r7, r3
20000374:	0018      	movs	r0, r3
20000376:	f003 f99f 	bl	200036b8 <init_indoors>
	indoors.xPos = 1;
2000037a:	4bae      	ldr	r3, [pc, #696]	; (20000634 <main+0x438>)
2000037c:	22ee      	movs	r2, #238	; 0xee
2000037e:	0092      	lsls	r2, r2, #2
20000380:	4694      	mov	ip, r2
20000382:	44bc      	add	ip, r7
20000384:	4463      	add	r3, ip
20000386:	2201      	movs	r2, #1
20000388:	605a      	str	r2, [r3, #4]
	indoors.yPos = 1;
2000038a:	4baa      	ldr	r3, [pc, #680]	; (20000634 <main+0x438>)
2000038c:	22ee      	movs	r2, #238	; 0xee
2000038e:	0092      	lsls	r2, r2, #2
20000390:	4694      	mov	ip, r2
20000392:	44bc      	add	ip, r7
20000394:	4463      	add	r3, ip
20000396:	2201      	movs	r2, #1
20000398:	609a      	str	r2, [r3, #8]
	
	GameObject indoors2;
	init_indoors2( &indoors2 );
2000039a:	239c      	movs	r3, #156	; 0x9c
2000039c:	009b      	lsls	r3, r3, #2
2000039e:	18fb      	adds	r3, r7, r3
200003a0:	0018      	movs	r0, r3
200003a2:	f003 f9fd 	bl	200037a0 <init_indoors2>
	indoors2.xPos = 1;
200003a6:	4ba4      	ldr	r3, [pc, #656]	; (20000638 <main+0x43c>)
200003a8:	22ee      	movs	r2, #238	; 0xee
200003aa:	0092      	lsls	r2, r2, #2
200003ac:	4694      	mov	ip, r2
200003ae:	44bc      	add	ip, r7
200003b0:	4463      	add	r3, ip
200003b2:	2201      	movs	r2, #1
200003b4:	605a      	str	r2, [r3, #4]
	indoors2.yPos = 1;
200003b6:	4ba0      	ldr	r3, [pc, #640]	; (20000638 <main+0x43c>)
200003b8:	22ee      	movs	r2, #238	; 0xee
200003ba:	0092      	lsls	r2, r2, #2
200003bc:	4694      	mov	ip, r2
200003be:	44bc      	add	ip, r7
200003c0:	4463      	add	r3, ip
200003c2:	2201      	movs	r2, #1
200003c4:	609a      	str	r2, [r3, #8]
	
	GameObject trophy;
	init_trophy( &trophy );
200003c6:	2393      	movs	r3, #147	; 0x93
200003c8:	009b      	lsls	r3, r3, #2
200003ca:	18fb      	adds	r3, r7, r3
200003cc:	0018      	movs	r0, r3
200003ce:	f003 fa5b 	bl	20003888 <init_trophy>
	trophy.xPos = 19;
200003d2:	4b9a      	ldr	r3, [pc, #616]	; (2000063c <main+0x440>)
200003d4:	22ee      	movs	r2, #238	; 0xee
200003d6:	0092      	lsls	r2, r2, #2
200003d8:	4694      	mov	ip, r2
200003da:	44bc      	add	ip, r7
200003dc:	4463      	add	r3, ip
200003de:	2213      	movs	r2, #19
200003e0:	605a      	str	r2, [r3, #4]
	trophy.yPos = 5;
200003e2:	4b96      	ldr	r3, [pc, #600]	; (2000063c <main+0x440>)
200003e4:	22ee      	movs	r2, #238	; 0xee
200003e6:	0092      	lsls	r2, r2, #2
200003e8:	4694      	mov	ip, r2
200003ea:	44bc      	add	ip, r7
200003ec:	4463      	add	r3, ip
200003ee:	2205      	movs	r2, #5
200003f0:	609a      	str	r2, [r3, #8]
	
	GameObject hair;
	init_flame(&hair);
200003f2:	238a      	movs	r3, #138	; 0x8a
200003f4:	009b      	lsls	r3, r3, #2
200003f6:	18fb      	adds	r3, r7, r3
200003f8:	0018      	movs	r0, r3
200003fa:	f001 fe47 	bl	2000208c <init_flame>
	hair.xPos = 40;
200003fe:	4b90      	ldr	r3, [pc, #576]	; (20000640 <main+0x444>)
20000400:	22ee      	movs	r2, #238	; 0xee
20000402:	0092      	lsls	r2, r2, #2
20000404:	4694      	mov	ip, r2
20000406:	44bc      	add	ip, r7
20000408:	4463      	add	r3, ip
2000040a:	2228      	movs	r2, #40	; 0x28
2000040c:	605a      	str	r2, [r3, #4]
	hair.yPos = 10;
2000040e:	4b8c      	ldr	r3, [pc, #560]	; (20000640 <main+0x444>)
20000410:	22ee      	movs	r2, #238	; 0xee
20000412:	0092      	lsls	r2, r2, #2
20000414:	4694      	mov	ip, r2
20000416:	44bc      	add	ip, r7
20000418:	4463      	add	r3, ip
2000041a:	220a      	movs	r2, #10
2000041c:	609a      	str	r2, [r3, #8]
	hair.update = gameObjectUpdate;
2000041e:	4b88      	ldr	r3, [pc, #544]	; (20000640 <main+0x444>)
20000420:	22ee      	movs	r2, #238	; 0xee
20000422:	0092      	lsls	r2, r2, #2
20000424:	4694      	mov	ip, r2
20000426:	44bc      	add	ip, r7
20000428:	4463      	add	r3, ip
2000042a:	4a86      	ldr	r2, [pc, #536]	; (20000644 <main+0x448>)
2000042c:	60da      	str	r2, [r3, #12]
	
	GameObject bird;
	init_bird( &bird );
2000042e:	2381      	movs	r3, #129	; 0x81
20000430:	009b      	lsls	r3, r3, #2
20000432:	18fb      	adds	r3, r7, r3
20000434:	0018      	movs	r0, r3
20000436:	f001 f9f9 	bl	2000182c <init_bird>
	bird.xPos = 180;
2000043a:	4b83      	ldr	r3, [pc, #524]	; (20000648 <main+0x44c>)
2000043c:	22ee      	movs	r2, #238	; 0xee
2000043e:	0092      	lsls	r2, r2, #2
20000440:	4694      	mov	ip, r2
20000442:	44bc      	add	ip, r7
20000444:	4463      	add	r3, ip
20000446:	22b4      	movs	r2, #180	; 0xb4
20000448:	605a      	str	r2, [r3, #4]
	bird.yPos = 40;
2000044a:	4b7f      	ldr	r3, [pc, #508]	; (20000648 <main+0x44c>)
2000044c:	22ee      	movs	r2, #238	; 0xee
2000044e:	0092      	lsls	r2, r2, #2
20000450:	4694      	mov	ip, r2
20000452:	44bc      	add	ip, r7
20000454:	4463      	add	r3, ip
20000456:	2228      	movs	r2, #40	; 0x28
20000458:	609a      	str	r2, [r3, #8]
	bird.update = gameObjectUpdate;
2000045a:	4b7b      	ldr	r3, [pc, #492]	; (20000648 <main+0x44c>)
2000045c:	22ee      	movs	r2, #238	; 0xee
2000045e:	0092      	lsls	r2, r2, #2
20000460:	4694      	mov	ip, r2
20000462:	44bc      	add	ip, r7
20000464:	4463      	add	r3, ip
20000466:	4a77      	ldr	r2, [pc, #476]	; (20000644 <main+0x448>)
20000468:	60da      	str	r2, [r3, #12]
	
	GameObject DIP;
	init_DIP( &DIP );
2000046a:	23f0      	movs	r3, #240	; 0xf0
2000046c:	005b      	lsls	r3, r3, #1
2000046e:	18fb      	adds	r3, r7, r3
20000470:	0018      	movs	r0, r3
20000472:	f001 fc43 	bl	20001cfc <init_DIP>
	DIP.update = DIPUpdate;
20000476:	4b75      	ldr	r3, [pc, #468]	; (2000064c <main+0x450>)
20000478:	22ee      	movs	r2, #238	; 0xee
2000047a:	0092      	lsls	r2, r2, #2
2000047c:	4694      	mov	ip, r2
2000047e:	44bc      	add	ip, r7
20000480:	4463      	add	r3, ip
20000482:	4a73      	ldr	r2, [pc, #460]	; (20000650 <main+0x454>)
20000484:	60da      	str	r2, [r3, #12]
	
	GameObject player;
	init_witch( &player );
20000486:	23de      	movs	r3, #222	; 0xde
20000488:	005b      	lsls	r3, r3, #1
2000048a:	18fb      	adds	r3, r7, r3
2000048c:	0018      	movs	r0, r3
2000048e:	f001 fb19 	bl	20001ac4 <init_witch>
	player.xPos = 3;
20000492:	4b70      	ldr	r3, [pc, #448]	; (20000654 <main+0x458>)
20000494:	22ee      	movs	r2, #238	; 0xee
20000496:	0092      	lsls	r2, r2, #2
20000498:	4694      	mov	ip, r2
2000049a:	44bc      	add	ip, r7
2000049c:	4463      	add	r3, ip
2000049e:	2203      	movs	r2, #3
200004a0:	605a      	str	r2, [r3, #4]
	player.yPos = LIMIT_DOWN - 1; //player position
200004a2:	4b6c      	ldr	r3, [pc, #432]	; (20000654 <main+0x458>)
200004a4:	22ee      	movs	r2, #238	; 0xee
200004a6:	0092      	lsls	r2, r2, #2
200004a8:	4694      	mov	ip, r2
200004aa:	44bc      	add	ip, r7
200004ac:	4463      	add	r3, ip
200004ae:	2226      	movs	r2, #38	; 0x26
200004b0:	609a      	str	r2, [r3, #8]
	player.update = playerUpdate;
200004b2:	4b68      	ldr	r3, [pc, #416]	; (20000654 <main+0x458>)
200004b4:	22ee      	movs	r2, #238	; 0xee
200004b6:	0092      	lsls	r2, r2, #2
200004b8:	4694      	mov	ip, r2
200004ba:	44bc      	add	ip, r7
200004bc:	4463      	add	r3, ip
200004be:	4a52      	ldr	r2, [pc, #328]	; (20000608 <main+0x40c>)
200004c0:	60da      	str	r2, [r3, #12]
	
	GameObject fire2;
	init_fire( &fire2 );
200004c2:	23cc      	movs	r3, #204	; 0xcc
200004c4:	005b      	lsls	r3, r3, #1
200004c6:	18fb      	adds	r3, r7, r3
200004c8:	0018      	movs	r0, r3
200004ca:	f000 ff2d 	bl	20001328 <init_fire>
	GameObject fire3;
	init_fire( &fire3 );
200004ce:	23ba      	movs	r3, #186	; 0xba
200004d0:	005b      	lsls	r3, r3, #1
200004d2:	18fb      	adds	r3, r7, r3
200004d4:	0018      	movs	r0, r3
200004d6:	f000 ff27 	bl	20001328 <init_fire>
	GameObject fire4;
	init_fire( &fire4 );
200004da:	23a8      	movs	r3, #168	; 0xa8
200004dc:	005b      	lsls	r3, r3, #1
200004de:	18fb      	adds	r3, r7, r3
200004e0:	0018      	movs	r0, r3
200004e2:	f000 ff21 	bl	20001328 <init_fire>
	GameObject fire1;
	init_fire( &fire1 );
200004e6:	2396      	movs	r3, #150	; 0x96
200004e8:	005b      	lsls	r3, r3, #1
200004ea:	18fb      	adds	r3, r7, r3
200004ec:	0018      	movs	r0, r3
200004ee:	f000 ff1b 	bl	20001328 <init_fire>
	GameObject fire1_indoors;
	init_fire( &fire1_indoors );
200004f2:	2384      	movs	r3, #132	; 0x84
200004f4:	005b      	lsls	r3, r3, #1
200004f6:	18fb      	adds	r3, r7, r3
200004f8:	0018      	movs	r0, r3
200004fa:	f000 ff15 	bl	20001328 <init_fire>
	fire1_indoors.xPos = 50;		//FIRE1_INDO
200004fe:	4b56      	ldr	r3, [pc, #344]	; (20000658 <main+0x45c>)
20000500:	22ee      	movs	r2, #238	; 0xee
20000502:	0092      	lsls	r2, r2, #2
20000504:	4694      	mov	ip, r2
20000506:	44bc      	add	ip, r7
20000508:	4463      	add	r3, ip
2000050a:	2232      	movs	r2, #50	; 0x32
2000050c:	605a      	str	r2, [r3, #4]
	fire1_indoors.yPos = 64-12-7;
2000050e:	4b52      	ldr	r3, [pc, #328]	; (20000658 <main+0x45c>)
20000510:	22ee      	movs	r2, #238	; 0xee
20000512:	0092      	lsls	r2, r2, #2
20000514:	4694      	mov	ip, r2
20000516:	44bc      	add	ip, r7
20000518:	4463      	add	r3, ip
2000051a:	222d      	movs	r2, #45	; 0x2d
2000051c:	609a      	str	r2, [r3, #8]
	fire1_indoors.update = gameObjectUpdate;
2000051e:	4b4e      	ldr	r3, [pc, #312]	; (20000658 <main+0x45c>)
20000520:	22ee      	movs	r2, #238	; 0xee
20000522:	0092      	lsls	r2, r2, #2
20000524:	4694      	mov	ip, r2
20000526:	44bc      	add	ip, r7
20000528:	4463      	add	r3, ip
2000052a:	4a46      	ldr	r2, [pc, #280]	; (20000644 <main+0x448>)
2000052c:	60da      	str	r2, [r3, #12]
	
	fire2.xPos = 98;
2000052e:	4b4b      	ldr	r3, [pc, #300]	; (2000065c <main+0x460>)
20000530:	22ee      	movs	r2, #238	; 0xee
20000532:	0092      	lsls	r2, r2, #2
20000534:	4694      	mov	ip, r2
20000536:	44bc      	add	ip, r7
20000538:	4463      	add	r3, ip
2000053a:	2262      	movs	r2, #98	; 0x62
2000053c:	605a      	str	r2, [r3, #4]
	fire2.yPos = 26-12;
2000053e:	4b47      	ldr	r3, [pc, #284]	; (2000065c <main+0x460>)
20000540:	22ee      	movs	r2, #238	; 0xee
20000542:	0092      	lsls	r2, r2, #2
20000544:	4694      	mov	ip, r2
20000546:	44bc      	add	ip, r7
20000548:	4463      	add	r3, ip
2000054a:	220e      	movs	r2, #14
2000054c:	609a      	str	r2, [r3, #8]
	fire3.xPos = 115;
2000054e:	4b44      	ldr	r3, [pc, #272]	; (20000660 <main+0x464>)
20000550:	22ee      	movs	r2, #238	; 0xee
20000552:	0092      	lsls	r2, r2, #2
20000554:	4694      	mov	ip, r2
20000556:	44bc      	add	ip, r7
20000558:	4463      	add	r3, ip
2000055a:	2273      	movs	r2, #115	; 0x73
2000055c:	605a      	str	r2, [r3, #4]
	fire3.yPos = 34-12;
2000055e:	4b40      	ldr	r3, [pc, #256]	; (20000660 <main+0x464>)
20000560:	22ee      	movs	r2, #238	; 0xee
20000562:	0092      	lsls	r2, r2, #2
20000564:	4694      	mov	ip, r2
20000566:	44bc      	add	ip, r7
20000568:	4463      	add	r3, ip
2000056a:	2216      	movs	r2, #22
2000056c:	609a      	str	r2, [r3, #8]
	
	fire1.xPos = 85;
2000056e:	4b3d      	ldr	r3, [pc, #244]	; (20000664 <main+0x468>)
20000570:	22ee      	movs	r2, #238	; 0xee
20000572:	0092      	lsls	r2, r2, #2
20000574:	4694      	mov	ip, r2
20000576:	44bc      	add	ip, r7
20000578:	4463      	add	r3, ip
2000057a:	2255      	movs	r2, #85	; 0x55
2000057c:	605a      	str	r2, [r3, #4]
	fire1.yPos = 23-12;
2000057e:	4b39      	ldr	r3, [pc, #228]	; (20000664 <main+0x468>)
20000580:	22ee      	movs	r2, #238	; 0xee
20000582:	0092      	lsls	r2, r2, #2
20000584:	4694      	mov	ip, r2
20000586:	44bc      	add	ip, r7
20000588:	4463      	add	r3, ip
2000058a:	220b      	movs	r2, #11
2000058c:	609a      	str	r2, [r3, #8]
	fire4.xPos = 71;
2000058e:	4b36      	ldr	r3, [pc, #216]	; (20000668 <main+0x46c>)
20000590:	22ee      	movs	r2, #238	; 0xee
20000592:	0092      	lsls	r2, r2, #2
20000594:	4694      	mov	ip, r2
20000596:	44bc      	add	ip, r7
20000598:	4463      	add	r3, ip
2000059a:	2247      	movs	r2, #71	; 0x47
2000059c:	605a      	str	r2, [r3, #4]
	fire4.yPos = 27-11;
2000059e:	4b32      	ldr	r3, [pc, #200]	; (20000668 <main+0x46c>)
200005a0:	22ee      	movs	r2, #238	; 0xee
200005a2:	0092      	lsls	r2, r2, #2
200005a4:	4694      	mov	ip, r2
200005a6:	44bc      	add	ip, r7
200005a8:	4463      	add	r3, ip
200005aa:	2210      	movs	r2, #16
200005ac:	609a      	str	r2, [r3, #8]
	//draw_game_object(&castleObj);
	
	fire2.animation_speed = 2;
200005ae:	4b2b      	ldr	r3, [pc, #172]	; (2000065c <main+0x460>)
200005b0:	22ee      	movs	r2, #238	; 0xee
200005b2:	0092      	lsls	r2, r2, #2
200005b4:	4694      	mov	ip, r2
200005b6:	44bc      	add	ip, r7
200005b8:	4463      	add	r3, ip
200005ba:	2202      	movs	r2, #2
200005bc:	61da      	str	r2, [r3, #28]
	fire3.animation_speed = 2;
200005be:	4b28      	ldr	r3, [pc, #160]	; (20000660 <main+0x464>)
200005c0:	22ee      	movs	r2, #238	; 0xee
200005c2:	0092      	lsls	r2, r2, #2
200005c4:	4694      	mov	ip, r2
200005c6:	44bc      	add	ip, r7
200005c8:	4463      	add	r3, ip
200005ca:	2202      	movs	r2, #2
200005cc:	61da      	str	r2, [r3, #28]
	fire1.animation_speed = 2;
200005ce:	4b25      	ldr	r3, [pc, #148]	; (20000664 <main+0x468>)
200005d0:	22ee      	movs	r2, #238	; 0xee
200005d2:	0092      	lsls	r2, r2, #2
200005d4:	4694      	mov	ip, r2
200005d6:	44bc      	add	ip, r7
200005d8:	4463      	add	r3, ip
200005da:	2202      	movs	r2, #2
200005dc:	61da      	str	r2, [r3, #28]
	fire4.animation_speed = 2;
200005de:	4b22      	ldr	r3, [pc, #136]	; (20000668 <main+0x46c>)
200005e0:	22ee      	movs	r2, #238	; 0xee
200005e2:	0092      	lsls	r2, r2, #2
200005e4:	4694      	mov	ip, r2
200005e6:	44bc      	add	ip, r7
200005e8:	4463      	add	r3, ip
200005ea:	2202      	movs	r2, #2
200005ec:	61da      	str	r2, [r3, #28]
	
	fire2.update = gameObjectUpdate;
200005ee:	4b1b      	ldr	r3, [pc, #108]	; (2000065c <main+0x460>)
200005f0:	22ee      	movs	r2, #238	; 0xee
200005f2:	0092      	lsls	r2, r2, #2
200005f4:	4694      	mov	ip, r2
200005f6:	e039      	b.n	2000066c <main+0x470>
200005f8:	fffffc44 			; <UNDEFINED> instruction: 0xfffffc44
200005fc:	20003b04 	andcs	r3, r0, r4, lsl #22
20000600:	20003bc4 	andcs	r3, r0, r4, asr #23
20000604:	20003bb0 			; <UNDEFINED> instruction: 0x20003bb0
20000608:	2000144d 	andcs	r1, r0, sp, asr #8
2000060c:	20003bd4 	ldrdcs	r3, [r0], -r4
20000610:	20003ba0 	andcs	r3, r0, r0, lsr #23
20000614:	20003bb4 			; <UNDEFINED> instruction: 0x20003bb4
20000618:	20003bc0 	andcs	r3, r0, r0, asr #23
2000061c:	20003b3c 	andcs	r3, r0, ip, lsr fp
20000620:	20003b84 	andcs	r3, r0, r4, lsl #23
20000624:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20000628:	20003b2c 	andcs	r3, r0, ip, lsr #22
2000062c:	20003bb8 			; <UNDEFINED> instruction: 0x20003bb8
20000630:	20003b68 	andcs	r3, r0, r8, ror #22
20000634:	fffffedc 			; <UNDEFINED> instruction: 0xfffffedc
20000638:	fffffeb8 			; <UNDEFINED> instruction: 0xfffffeb8
2000063c:	fffffe94 			; <UNDEFINED> instruction: 0xfffffe94
20000640:	fffffe70 			; <UNDEFINED> instruction: 0xfffffe70
20000644:	2000115d 	andcs	r1, r0, sp, asr r1
20000648:	fffffe4c 			; <UNDEFINED> instruction: 0xfffffe4c
2000064c:	fffffe28 			; <UNDEFINED> instruction: 0xfffffe28
20000650:	20001e1d 	andcs	r1, r0, sp, lsl lr
20000654:	fffffe04 			; <UNDEFINED> instruction: 0xfffffe04
20000658:	fffffd50 			; <UNDEFINED> instruction: 0xfffffd50
2000065c:	fffffde0 			; <UNDEFINED> instruction: 0xfffffde0
20000660:	fffffdbc 			; <UNDEFINED> instruction: 0xfffffdbc
20000664:	fffffd74 			; <UNDEFINED> instruction: 0xfffffd74
20000668:	fffffd98 			; <UNDEFINED> instruction: 0xfffffd98
2000066c:	44bc      	add	ip, r7
2000066e:	4463      	add	r3, ip
20000670:	4ae1      	ldr	r2, [pc, #900]	; (200009f8 <main+0x7fc>)
20000672:	60da      	str	r2, [r3, #12]
	fire3.update = gameObjectUpdate;
20000674:	4be1      	ldr	r3, [pc, #900]	; (200009fc <main+0x800>)
20000676:	22ee      	movs	r2, #238	; 0xee
20000678:	0092      	lsls	r2, r2, #2
2000067a:	4694      	mov	ip, r2
2000067c:	44bc      	add	ip, r7
2000067e:	4463      	add	r3, ip
20000680:	4add      	ldr	r2, [pc, #884]	; (200009f8 <main+0x7fc>)
20000682:	60da      	str	r2, [r3, #12]
	fire1.update = gameObjectUpdate;
20000684:	4bde      	ldr	r3, [pc, #888]	; (20000a00 <main+0x804>)
20000686:	22ee      	movs	r2, #238	; 0xee
20000688:	0092      	lsls	r2, r2, #2
2000068a:	4694      	mov	ip, r2
2000068c:	44bc      	add	ip, r7
2000068e:	4463      	add	r3, ip
20000690:	4ad9      	ldr	r2, [pc, #868]	; (200009f8 <main+0x7fc>)
20000692:	60da      	str	r2, [r3, #12]
	fire4.update = gameObjectUpdate;
20000694:	4bdb      	ldr	r3, [pc, #876]	; (20000a04 <main+0x808>)
20000696:	22ee      	movs	r2, #238	; 0xee
20000698:	0092      	lsls	r2, r2, #2
2000069a:	4694      	mov	ip, r2
2000069c:	44bc      	add	ip, r7
2000069e:	4463      	add	r3, ip
200006a0:	4ad5      	ldr	r2, [pc, #852]	; (200009f8 <main+0x7fc>)
200006a2:	60da      	str	r2, [r3, #12]
	SlowText text8;
	SlowText text9;
	SlowText text10;
	SlowText text11;
	SlowText text12;
	init_slow_text(&text_kra, "*KRA!* *KRA!*", "   ", 1);
200006a4:	4ad8      	ldr	r2, [pc, #864]	; (20000a08 <main+0x80c>)
200006a6:	49d9      	ldr	r1, [pc, #868]	; (20000a0c <main+0x810>)
200006a8:	23f4      	movs	r3, #244	; 0xf4
200006aa:	18f8      	adds	r0, r7, r3
200006ac:	2301      	movs	r3, #1
200006ae:	f002 ffac 	bl	2000360a <init_slow_text>
	init_slow_text(&text1, "For centuries the", "DILs-witches have", 1);
200006b2:	4ad7      	ldr	r2, [pc, #860]	; (20000a10 <main+0x814>)
200006b4:	49d7      	ldr	r1, [pc, #860]	; (20000a14 <main+0x818>)
200006b6:	23e0      	movs	r3, #224	; 0xe0
200006b8:	18f8      	adds	r0, r7, r3
200006ba:	2301      	movs	r3, #1
200006bc:	f002 ffa5 	bl	2000360a <init_slow_text>
	init_slow_text(&text2, "coiled in fear,", "    ", 1);
200006c0:	4ad5      	ldr	r2, [pc, #852]	; (20000a18 <main+0x81c>)
200006c2:	49d6      	ldr	r1, [pc, #856]	; (20000a1c <main+0x820>)
200006c4:	23cc      	movs	r3, #204	; 0xcc
200006c6:	18f8      	adds	r0, r7, r3
200006c8:	2301      	movs	r3, #1
200006ca:	f002 ff9e 	bl	2000360a <init_slow_text>
	init_slow_text(&text3, "whenever they hear", "that a DIPs-witch", 1);
200006ce:	4ad4      	ldr	r2, [pc, #848]	; (20000a20 <main+0x824>)
200006d0:	49d4      	ldr	r1, [pc, #848]	; (20000a24 <main+0x828>)
200006d2:	23b8      	movs	r3, #184	; 0xb8
200006d4:	18f8      	adds	r0, r7, r3
200006d6:	2301      	movs	r3, #1
200006d8:	f002 ff97 	bl	2000360a <init_slow_text>
	init_slow_text(&text4, "is near.", "   ", 1);
200006dc:	4aca      	ldr	r2, [pc, #808]	; (20000a08 <main+0x80c>)
200006de:	49d2      	ldr	r1, [pc, #840]	; (20000a28 <main+0x82c>)
200006e0:	23a4      	movs	r3, #164	; 0xa4
200006e2:	18f8      	adds	r0, r7, r3
200006e4:	2301      	movs	r3, #1
200006e6:	f002 ff90 	bl	2000360a <init_slow_text>
	init_slow_text(&text5, "So it is quite", "surprising, finding", 1);
200006ea:	4ad0      	ldr	r2, [pc, #832]	; (20000a2c <main+0x830>)
200006ec:	49d0      	ldr	r1, [pc, #832]	; (20000a30 <main+0x834>)
200006ee:	2390      	movs	r3, #144	; 0x90
200006f0:	18f8      	adds	r0, r7, r3
200006f2:	2301      	movs	r3, #1
200006f4:	f002 ff89 	bl	2000360a <init_slow_text>
	init_slow_text(&text6, "you here,", "    ", 1);
200006f8:	4ac7      	ldr	r2, [pc, #796]	; (20000a18 <main+0x81c>)
200006fa:	49ce      	ldr	r1, [pc, #824]	; (20000a34 <main+0x838>)
200006fc:	237c      	movs	r3, #124	; 0x7c
200006fe:	18f8      	adds	r0, r7, r3
20000700:	2301      	movs	r3, #1
20000702:	f002 ff82 	bl	2000360a <init_slow_text>
	init_slow_text(&text7, "queen Daffo of DILs,", "heir to king Lear.", 1);
20000706:	4acc      	ldr	r2, [pc, #816]	; (20000a38 <main+0x83c>)
20000708:	49cc      	ldr	r1, [pc, #816]	; (20000a3c <main+0x840>)
2000070a:	2368      	movs	r3, #104	; 0x68
2000070c:	18f8      	adds	r0, r7, r3
2000070e:	2301      	movs	r3, #1
20000710:	f002 ff7b 	bl	2000360a <init_slow_text>
	init_slow_text(&text8, "But maybe you're", "tempted, to loot", 1);
20000714:	4aca      	ldr	r2, [pc, #808]	; (20000a40 <main+0x844>)
20000716:	49cb      	ldr	r1, [pc, #812]	; (20000a44 <main+0x848>)
20000718:	2354      	movs	r3, #84	; 0x54
2000071a:	18f8      	adds	r0, r7, r3
2000071c:	2301      	movs	r3, #1
2000071e:	f002 ff74 	bl	2000360a <init_slow_text>
	init_slow_text(&text9, "from the riches,", "    ", 1);
20000722:	4abd      	ldr	r2, [pc, #756]	; (20000a18 <main+0x81c>)
20000724:	49c8      	ldr	r1, [pc, #800]	; (20000a48 <main+0x84c>)
20000726:	2340      	movs	r3, #64	; 0x40
20000728:	18f8      	adds	r0, r7, r3
2000072a:	2301      	movs	r3, #1
2000072c:	f002 ff6d 	bl	2000360a <init_slow_text>
	init_slow_text(&text12, "wicked DIPs-witches.", "    ", 1);
20000730:	4ab9      	ldr	r2, [pc, #740]	; (20000a18 <main+0x81c>)
20000732:	49c6      	ldr	r1, [pc, #792]	; (20000a4c <main+0x850>)
20000734:	1d38      	adds	r0, r7, #4
20000736:	2301      	movs	r3, #1
20000738:	f002 ff67 	bl	2000360a <init_slow_text>
	init_slow_text(&text10, "so grippily trea-", "sured by", 1);
2000073c:	4ac4      	ldr	r2, [pc, #784]	; (20000a50 <main+0x854>)
2000073e:	49c5      	ldr	r1, [pc, #788]	; (20000a54 <main+0x858>)
20000740:	232c      	movs	r3, #44	; 0x2c
20000742:	18f8      	adds	r0, r7, r3
20000744:	2301      	movs	r3, #1
20000746:	f002 ff60 	bl	2000360a <init_slow_text>
	init_slow_text(&text11, "Enter, brave witch,", "- reset the switch!", 1);
2000074a:	4ac3      	ldr	r2, [pc, #780]	; (20000a58 <main+0x85c>)
2000074c:	49c3      	ldr	r1, [pc, #780]	; (20000a5c <main+0x860>)
2000074e:	2318      	movs	r3, #24
20000750:	18f8      	adds	r0, r7, r3
20000752:	2301      	movs	r3, #1
20000754:	f002 ff59 	bl	2000360a <init_slow_text>
	//ascii_write_part("Yeeaaah!!!", "This is working! :)", 5, 10);
	set_up_ascii();
20000758:	f002 fe34 	bl	200033c4 <set_up_ascii>
	set_up_DIL();
2000075c:	f002 fc62 	bl	20003024 <set_up_DIL>
	clear_ascii();
20000760:	f002 fe39 	bl	200033d6 <clear_ascii>
	
	int is_climbing = 0;
20000764:	2300      	movs	r3, #0
20000766:	22ed      	movs	r2, #237	; 0xed
20000768:	0092      	lsls	r2, r2, #2
2000076a:	18ba      	adds	r2, r7, r2
2000076c:	6013      	str	r3, [r2, #0]
	int has_climbed = 0;
2000076e:	2300      	movs	r3, #0
20000770:	22ec      	movs	r2, #236	; 0xec
20000772:	0092      	lsls	r2, r2, #2
20000774:	18ba      	adds	r2, r7, r2
20000776:	6013      	str	r3, [r2, #0]
	int game_over = 0;
20000778:	2300      	movs	r3, #0
2000077a:	22eb      	movs	r2, #235	; 0xeb
2000077c:	0092      	lsls	r2, r2, #2
2000077e:	18ba      	adds	r2, r7, r2
20000780:	6013      	str	r3, [r2, #0]
	int game_over_adder = 0;
20000782:	2300      	movs	r3, #0
20000784:	22ea      	movs	r2, #234	; 0xea
20000786:	0092      	lsls	r2, r2, #2
20000788:	18ba      	adds	r2, r7, r2
2000078a:	6013      	str	r3, [r2, #0]
	
	
	current_screen = RESET_GAME;
2000078c:	4bb4      	ldr	r3, [pc, #720]	; (20000a60 <main+0x864>)
2000078e:	220a      	movs	r2, #10
20000790:	601a      	str	r2, [r3, #0]
	
	//Game loop
	while(1) {
			
		switch(current_screen) {
20000792:	4bb3      	ldr	r3, [pc, #716]	; (20000a60 <main+0x864>)
20000794:	681b      	ldr	r3, [r3, #0]
20000796:	2b01      	cmp	r3, #1
20000798:	d020      	beq.n	200007dc <main+0x5e0>
2000079a:	dc02      	bgt.n	200007a2 <main+0x5a6>
2000079c:	2b00      	cmp	r3, #0
2000079e:	d011      	beq.n	200007c4 <main+0x5c8>
200007a0:	e7f7      	b.n	20000792 <main+0x596>
200007a2:	2b02      	cmp	r3, #2
200007a4:	d100      	bne.n	200007a8 <main+0x5ac>
200007a6:	e2b3      	b.n	20000d10 <main+0xb14>
200007a8:	2b0a      	cmp	r3, #10
200007aa:	d101      	bne.n	200007b0 <main+0x5b4>
200007ac:	f000 fc4e 	bl	2000104c <main+0xe50>
200007b0:	e7ef      	b.n	20000792 <main+0x596>
			
			case SWITCH_LOCK: //before

				while(read_DIL() == 0){
					draw_game_object(&pressObj);
200007b2:	23c3      	movs	r3, #195	; 0xc3
200007b4:	009b      	lsls	r3, r3, #2
200007b6:	18fb      	adds	r3, r7, r3
200007b8:	0018      	movs	r0, r3
200007ba:	f002 fb95 	bl	20002ee8 <draw_game_object>
					show_frame(1);
200007be:	2001      	movs	r0, #1
200007c0:	f002 fbd3 	bl	20002f6a <show_frame>
				while(read_DIL() == 0){
200007c4:	f002 fc3a 	bl	2000303c <read_DIL>
200007c8:	1e03      	subs	r3, r0, #0
200007ca:	d0f2      	beq.n	200007b2 <main+0x5b6>
				}
				
				counter = 0;
200007cc:	4ba5      	ldr	r3, [pc, #660]	; (20000a64 <main+0x868>)
200007ce:	2200      	movs	r2, #0
200007d0:	601a      	str	r2, [r3, #0]
				current_screen = START_SCREEN;
200007d2:	4ba3      	ldr	r3, [pc, #652]	; (20000a60 <main+0x864>)
200007d4:	2201      	movs	r2, #1
200007d6:	601a      	str	r2, [r3, #0]
				break;
200007d8:	f000 fca3 	bl	20001122 <main+0xf26>
			
			
			case START_SCREEN: //outside
				
				counter++;
200007dc:	4ba1      	ldr	r3, [pc, #644]	; (20000a64 <main+0x868>)
200007de:	681b      	ldr	r3, [r3, #0]
200007e0:	1c5a      	adds	r2, r3, #1
200007e2:	4ba0      	ldr	r3, [pc, #640]	; (20000a64 <main+0x868>)
200007e4:	601a      	str	r2, [r3, #0]
				
				if(titleObj.yPos < 1) {
200007e6:	23d2      	movs	r3, #210	; 0xd2
200007e8:	009b      	lsls	r3, r3, #2
200007ea:	18fb      	adds	r3, r7, r3
200007ec:	689b      	ldr	r3, [r3, #8]
200007ee:	2b00      	cmp	r3, #0
200007f0:	dc08      	bgt.n	20000804 <main+0x608>
					titleObj.yPos++;
200007f2:	23d2      	movs	r3, #210	; 0xd2
200007f4:	009b      	lsls	r3, r3, #2
200007f6:	18fb      	adds	r3, r7, r3
200007f8:	689b      	ldr	r3, [r3, #8]
200007fa:	1c5a      	adds	r2, r3, #1
200007fc:	23d2      	movs	r3, #210	; 0xd2
200007fe:	009b      	lsls	r3, r3, #2
20000800:	18fb      	adds	r3, r7, r3
20000802:	609a      	str	r2, [r3, #8]
				}
				
				draw_game_object(&castleObj);
20000804:	23b4      	movs	r3, #180	; 0xb4
20000806:	009b      	lsls	r3, r3, #2
20000808:	18fb      	adds	r3, r7, r3
2000080a:	0018      	movs	r0, r3
2000080c:	f002 fb6c 	bl	20002ee8 <draw_game_object>
				draw_game_object(&fire2);
20000810:	23cc      	movs	r3, #204	; 0xcc
20000812:	005b      	lsls	r3, r3, #1
20000814:	18fb      	adds	r3, r7, r3
20000816:	0018      	movs	r0, r3
20000818:	f002 fb66 	bl	20002ee8 <draw_game_object>
				draw_game_object(&fire3);
2000081c:	23ba      	movs	r3, #186	; 0xba
2000081e:	005b      	lsls	r3, r3, #1
20000820:	18fb      	adds	r3, r7, r3
20000822:	0018      	movs	r0, r3
20000824:	f002 fb60 	bl	20002ee8 <draw_game_object>
				draw_game_object(&fire1);
20000828:	2396      	movs	r3, #150	; 0x96
2000082a:	005b      	lsls	r3, r3, #1
2000082c:	18fb      	adds	r3, r7, r3
2000082e:	0018      	movs	r0, r3
20000830:	f002 fb5a 	bl	20002ee8 <draw_game_object>
				draw_game_object(&fire4);
20000834:	23a8      	movs	r3, #168	; 0xa8
20000836:	005b      	lsls	r3, r3, #1
20000838:	18fb      	adds	r3, r7, r3
2000083a:	0018      	movs	r0, r3
2000083c:	f002 fb54 	bl	20002ee8 <draw_game_object>
				draw_game_object(&titleObj);
20000840:	23d2      	movs	r3, #210	; 0xd2
20000842:	009b      	lsls	r3, r3, #2
20000844:	18fb      	adds	r3, r7, r3
20000846:	0018      	movs	r0, r3
20000848:	f002 fb4e 	bl	20002ee8 <draw_game_object>
				draw_game_object(&bird);
2000084c:	2381      	movs	r3, #129	; 0x81
2000084e:	009b      	lsls	r3, r3, #2
20000850:	18fb      	adds	r3, r7, r3
20000852:	0018      	movs	r0, r3
20000854:	f002 fb48 	bl	20002ee8 <draw_game_object>
				show_frame(1);
20000858:	2001      	movs	r0, #1
2000085a:	f002 fb86 	bl	20002f6a <show_frame>
				
				static int long_text = 40;
				static int short_text = 20;
				static int delay_until_text = 130;
				
				if (counter < delay_until_text - 55 && counter > delay_until_text - 90)
2000085e:	4b82      	ldr	r3, [pc, #520]	; (20000a68 <main+0x86c>)
20000860:	681b      	ldr	r3, [r3, #0]
20000862:	3b37      	subs	r3, #55	; 0x37
20000864:	001a      	movs	r2, r3
20000866:	4b7f      	ldr	r3, [pc, #508]	; (20000a64 <main+0x868>)
20000868:	681b      	ldr	r3, [r3, #0]
2000086a:	429a      	cmp	r2, r3
2000086c:	dd13      	ble.n	20000896 <main+0x69a>
2000086e:	4b7e      	ldr	r3, [pc, #504]	; (20000a68 <main+0x86c>)
20000870:	681b      	ldr	r3, [r3, #0]
20000872:	3b5a      	subs	r3, #90	; 0x5a
20000874:	001a      	movs	r2, r3
20000876:	4b7b      	ldr	r3, [pc, #492]	; (20000a64 <main+0x868>)
20000878:	681b      	ldr	r3, [r3, #0]
2000087a:	429a      	cmp	r2, r3
2000087c:	da0b      	bge.n	20000896 <main+0x69a>
					text_kra.display(&text_kra, 20);
2000087e:	4b7b      	ldr	r3, [pc, #492]	; (20000a6c <main+0x870>)
20000880:	22ee      	movs	r2, #238	; 0xee
20000882:	0092      	lsls	r2, r2, #2
20000884:	4694      	mov	ip, r2
20000886:	44bc      	add	ip, r7
20000888:	4463      	add	r3, ip
2000088a:	691b      	ldr	r3, [r3, #16]
2000088c:	22f4      	movs	r2, #244	; 0xf4
2000088e:	18ba      	adds	r2, r7, r2
20000890:	2114      	movs	r1, #20
20000892:	0010      	movs	r0, r2
20000894:	4798      	blx	r3
				if (counter == delay_until_text - 25)
20000896:	4b74      	ldr	r3, [pc, #464]	; (20000a68 <main+0x86c>)
20000898:	681b      	ldr	r3, [r3, #0]
2000089a:	3b19      	subs	r3, #25
2000089c:	001a      	movs	r2, r3
2000089e:	4b71      	ldr	r3, [pc, #452]	; (20000a64 <main+0x868>)
200008a0:	681b      	ldr	r3, [r3, #0]
200008a2:	429a      	cmp	r2, r3
200008a4:	d101      	bne.n	200008aa <main+0x6ae>
					clear_ascii();
200008a6:	f002 fd96 	bl	200033d6 <clear_ascii>
				
				if (counter < delay_until_text);
200008aa:	4b6e      	ldr	r3, [pc, #440]	; (20000a64 <main+0x868>)
200008ac:	681a      	ldr	r2, [r3, #0]
200008ae:	4b6e      	ldr	r3, [pc, #440]	; (20000a68 <main+0x86c>)
200008b0:	681b      	ldr	r3, [r3, #0]
200008b2:	429a      	cmp	r2, r3
200008b4:	da00      	bge.n	200008b8 <main+0x6bc>
200008b6:	e1b8      	b.n	20000c2a <main+0xa2e>
				else if (counter < delay_until_text + 1*long_text)
200008b8:	4b6b      	ldr	r3, [pc, #428]	; (20000a68 <main+0x86c>)
200008ba:	681a      	ldr	r2, [r3, #0]
200008bc:	4b6c      	ldr	r3, [pc, #432]	; (20000a70 <main+0x874>)
200008be:	681b      	ldr	r3, [r3, #0]
200008c0:	18d2      	adds	r2, r2, r3
200008c2:	4b68      	ldr	r3, [pc, #416]	; (20000a64 <main+0x868>)
200008c4:	681b      	ldr	r3, [r3, #0]
200008c6:	429a      	cmp	r2, r3
200008c8:	dd0c      	ble.n	200008e4 <main+0x6e8>
					text1.display(&text1, 20);
200008ca:	4b6a      	ldr	r3, [pc, #424]	; (20000a74 <main+0x878>)
200008cc:	22ee      	movs	r2, #238	; 0xee
200008ce:	0092      	lsls	r2, r2, #2
200008d0:	4694      	mov	ip, r2
200008d2:	44bc      	add	ip, r7
200008d4:	4463      	add	r3, ip
200008d6:	691b      	ldr	r3, [r3, #16]
200008d8:	22e0      	movs	r2, #224	; 0xe0
200008da:	18ba      	adds	r2, r7, r2
200008dc:	2114      	movs	r1, #20
200008de:	0010      	movs	r0, r2
200008e0:	4798      	blx	r3
200008e2:	e1a2      	b.n	20000c2a <main+0xa2e>
				else if(counter < delay_until_text + 1*long_text + 1*short_text)
200008e4:	4b60      	ldr	r3, [pc, #384]	; (20000a68 <main+0x86c>)
200008e6:	681a      	ldr	r2, [r3, #0]
200008e8:	4b61      	ldr	r3, [pc, #388]	; (20000a70 <main+0x874>)
200008ea:	681b      	ldr	r3, [r3, #0]
200008ec:	18d2      	adds	r2, r2, r3
200008ee:	4b62      	ldr	r3, [pc, #392]	; (20000a78 <main+0x87c>)
200008f0:	681b      	ldr	r3, [r3, #0]
200008f2:	18d2      	adds	r2, r2, r3
200008f4:	4b5b      	ldr	r3, [pc, #364]	; (20000a64 <main+0x868>)
200008f6:	681b      	ldr	r3, [r3, #0]
200008f8:	429a      	cmp	r2, r3
200008fa:	dd0c      	ble.n	20000916 <main+0x71a>
					text2.display(&text2, 20);
200008fc:	4b5f      	ldr	r3, [pc, #380]	; (20000a7c <main+0x880>)
200008fe:	22ee      	movs	r2, #238	; 0xee
20000900:	0092      	lsls	r2, r2, #2
20000902:	4694      	mov	ip, r2
20000904:	44bc      	add	ip, r7
20000906:	4463      	add	r3, ip
20000908:	691b      	ldr	r3, [r3, #16]
2000090a:	22cc      	movs	r2, #204	; 0xcc
2000090c:	18ba      	adds	r2, r7, r2
2000090e:	2114      	movs	r1, #20
20000910:	0010      	movs	r0, r2
20000912:	4798      	blx	r3
20000914:	e189      	b.n	20000c2a <main+0xa2e>
				else if(counter < delay_until_text + 2*long_text + 1*short_text)
20000916:	4b56      	ldr	r3, [pc, #344]	; (20000a70 <main+0x874>)
20000918:	681b      	ldr	r3, [r3, #0]
2000091a:	005a      	lsls	r2, r3, #1
2000091c:	4b52      	ldr	r3, [pc, #328]	; (20000a68 <main+0x86c>)
2000091e:	681b      	ldr	r3, [r3, #0]
20000920:	18d2      	adds	r2, r2, r3
20000922:	4b55      	ldr	r3, [pc, #340]	; (20000a78 <main+0x87c>)
20000924:	681b      	ldr	r3, [r3, #0]
20000926:	18d2      	adds	r2, r2, r3
20000928:	4b4e      	ldr	r3, [pc, #312]	; (20000a64 <main+0x868>)
2000092a:	681b      	ldr	r3, [r3, #0]
2000092c:	429a      	cmp	r2, r3
2000092e:	dd0c      	ble.n	2000094a <main+0x74e>
					text3.display(&text3, 20);
20000930:	4b53      	ldr	r3, [pc, #332]	; (20000a80 <main+0x884>)
20000932:	22ee      	movs	r2, #238	; 0xee
20000934:	0092      	lsls	r2, r2, #2
20000936:	4694      	mov	ip, r2
20000938:	44bc      	add	ip, r7
2000093a:	4463      	add	r3, ip
2000093c:	691b      	ldr	r3, [r3, #16]
2000093e:	22b8      	movs	r2, #184	; 0xb8
20000940:	18ba      	adds	r2, r7, r2
20000942:	2114      	movs	r1, #20
20000944:	0010      	movs	r0, r2
20000946:	4798      	blx	r3
20000948:	e16f      	b.n	20000c2a <main+0xa2e>
				else if(counter < delay_until_text + 2*long_text + 2*short_text)
2000094a:	4b49      	ldr	r3, [pc, #292]	; (20000a70 <main+0x874>)
2000094c:	681b      	ldr	r3, [r3, #0]
2000094e:	005a      	lsls	r2, r3, #1
20000950:	4b45      	ldr	r3, [pc, #276]	; (20000a68 <main+0x86c>)
20000952:	681b      	ldr	r3, [r3, #0]
20000954:	18d2      	adds	r2, r2, r3
20000956:	4b48      	ldr	r3, [pc, #288]	; (20000a78 <main+0x87c>)
20000958:	681b      	ldr	r3, [r3, #0]
2000095a:	005b      	lsls	r3, r3, #1
2000095c:	18d2      	adds	r2, r2, r3
2000095e:	4b41      	ldr	r3, [pc, #260]	; (20000a64 <main+0x868>)
20000960:	681b      	ldr	r3, [r3, #0]
20000962:	429a      	cmp	r2, r3
20000964:	dd0c      	ble.n	20000980 <main+0x784>
					text4.display(&text4, 20);
20000966:	4b47      	ldr	r3, [pc, #284]	; (20000a84 <main+0x888>)
20000968:	22ee      	movs	r2, #238	; 0xee
2000096a:	0092      	lsls	r2, r2, #2
2000096c:	4694      	mov	ip, r2
2000096e:	44bc      	add	ip, r7
20000970:	4463      	add	r3, ip
20000972:	691b      	ldr	r3, [r3, #16]
20000974:	22a4      	movs	r2, #164	; 0xa4
20000976:	18ba      	adds	r2, r7, r2
20000978:	2114      	movs	r1, #20
2000097a:	0010      	movs	r0, r2
2000097c:	4798      	blx	r3
2000097e:	e154      	b.n	20000c2a <main+0xa2e>
				else if(counter < delay_until_text + 3*long_text + 2*short_text)
20000980:	4b3b      	ldr	r3, [pc, #236]	; (20000a70 <main+0x874>)
20000982:	681a      	ldr	r2, [r3, #0]
20000984:	0013      	movs	r3, r2
20000986:	005b      	lsls	r3, r3, #1
20000988:	189a      	adds	r2, r3, r2
2000098a:	4b37      	ldr	r3, [pc, #220]	; (20000a68 <main+0x86c>)
2000098c:	681b      	ldr	r3, [r3, #0]
2000098e:	18d2      	adds	r2, r2, r3
20000990:	4b39      	ldr	r3, [pc, #228]	; (20000a78 <main+0x87c>)
20000992:	681b      	ldr	r3, [r3, #0]
20000994:	005b      	lsls	r3, r3, #1
20000996:	18d2      	adds	r2, r2, r3
20000998:	4b32      	ldr	r3, [pc, #200]	; (20000a64 <main+0x868>)
2000099a:	681b      	ldr	r3, [r3, #0]
2000099c:	429a      	cmp	r2, r3
2000099e:	dd0c      	ble.n	200009ba <main+0x7be>
					text5.display(&text5, 15);
200009a0:	4b39      	ldr	r3, [pc, #228]	; (20000a88 <main+0x88c>)
200009a2:	22ee      	movs	r2, #238	; 0xee
200009a4:	0092      	lsls	r2, r2, #2
200009a6:	4694      	mov	ip, r2
200009a8:	44bc      	add	ip, r7
200009aa:	4463      	add	r3, ip
200009ac:	691b      	ldr	r3, [r3, #16]
200009ae:	2290      	movs	r2, #144	; 0x90
200009b0:	18ba      	adds	r2, r7, r2
200009b2:	210f      	movs	r1, #15
200009b4:	0010      	movs	r0, r2
200009b6:	4798      	blx	r3
200009b8:	e137      	b.n	20000c2a <main+0xa2e>
				else if(counter < delay_until_text + 3*long_text + 3*short_text)
200009ba:	4b2d      	ldr	r3, [pc, #180]	; (20000a70 <main+0x874>)
200009bc:	681a      	ldr	r2, [r3, #0]
200009be:	0013      	movs	r3, r2
200009c0:	005b      	lsls	r3, r3, #1
200009c2:	189a      	adds	r2, r3, r2
200009c4:	4b28      	ldr	r3, [pc, #160]	; (20000a68 <main+0x86c>)
200009c6:	681b      	ldr	r3, [r3, #0]
200009c8:	18d1      	adds	r1, r2, r3
200009ca:	4b2b      	ldr	r3, [pc, #172]	; (20000a78 <main+0x87c>)
200009cc:	681a      	ldr	r2, [r3, #0]
200009ce:	0013      	movs	r3, r2
200009d0:	005b      	lsls	r3, r3, #1
200009d2:	189b      	adds	r3, r3, r2
200009d4:	18ca      	adds	r2, r1, r3
200009d6:	4b23      	ldr	r3, [pc, #140]	; (20000a64 <main+0x868>)
200009d8:	681b      	ldr	r3, [r3, #0]
200009da:	429a      	cmp	r2, r3
200009dc:	dd58      	ble.n	20000a90 <main+0x894>
					text6.display(&text6, 20);
200009de:	4b2b      	ldr	r3, [pc, #172]	; (20000a8c <main+0x890>)
200009e0:	22ee      	movs	r2, #238	; 0xee
200009e2:	0092      	lsls	r2, r2, #2
200009e4:	4694      	mov	ip, r2
200009e6:	44bc      	add	ip, r7
200009e8:	4463      	add	r3, ip
200009ea:	691b      	ldr	r3, [r3, #16]
200009ec:	227c      	movs	r2, #124	; 0x7c
200009ee:	18ba      	adds	r2, r7, r2
200009f0:	2114      	movs	r1, #20
200009f2:	0010      	movs	r0, r2
200009f4:	4798      	blx	r3
200009f6:	e118      	b.n	20000c2a <main+0xa2e>
200009f8:	2000115d 	andcs	r1, r0, sp, asr r1
200009fc:	fffffdbc 			; <UNDEFINED> instruction: 0xfffffdbc
20000a00:	fffffd74 			; <UNDEFINED> instruction: 0xfffffd74
20000a04:	fffffd98 			; <UNDEFINED> instruction: 0xfffffd98
20000a08:	2000a0c8 	andcs	sl, r0, r8, asr #1
20000a0c:	2000a0cc 	andcs	sl, r0, ip, asr #1
20000a10:	2000a0dc 	ldrdcs	sl, [r0], -ip
20000a14:	2000a0f0 	strdcs	sl, [r0], -r0
20000a18:	2000a104 	andcs	sl, r0, r4, lsl #2
20000a1c:	2000a10c 	andcs	sl, r0, ip, lsl #2
20000a20:	2000a11c 	andcs	sl, r0, ip, lsl r1
20000a24:	2000a130 	andcs	sl, r0, r0, lsr r1
20000a28:	2000a144 	andcs	sl, r0, r4, asr #2
20000a2c:	2000a150 	andcs	sl, r0, r0, asr r1
20000a30:	2000a164 	andcs	sl, r0, r4, ror #2
20000a34:	2000a174 	andcs	sl, r0, r4, ror r1
20000a38:	2000a180 	andcs	sl, r0, r0, lsl #3
20000a3c:	2000a194 	mulcs	r0, r4, r1
20000a40:	2000a1ac 	andcs	sl, r0, ip, lsr #3
20000a44:	2000a1c0 	andcs	sl, r0, r0, asr #3
20000a48:	2000a1d4 	ldrdcs	sl, [r0], -r4
20000a4c:	2000a1e8 	andcs	sl, r0, r8, ror #3
20000a50:	2000a200 	andcs	sl, r0, r0, lsl #4
20000a54:	2000a20c 	andcs	sl, r0, ip, lsl #4
20000a58:	2000a220 	andcs	sl, r0, r0, lsr #4
20000a5c:	2000a234 	andcs	sl, r0, r4, lsr r2
20000a60:	20007834 	andcs	r7, r0, r4, lsr r8
20000a64:	20003ad4 	ldrdcs	r3, [r0], -r4
20000a68:	20007838 	andcs	r7, r0, r8, lsr r8
20000a6c:	fffffd3c 			; <UNDEFINED> instruction: 0xfffffd3c
20000a70:	2000783c 	andcs	r7, r0, ip, lsr r8
20000a74:	fffffd28 			; <UNDEFINED> instruction: 0xfffffd28
20000a78:	20007840 	andcs	r7, r0, r0, asr #16
20000a7c:	fffffd14 			; <UNDEFINED> instruction: 0xfffffd14
20000a80:	fffffd00 			; <UNDEFINED> instruction: 0xfffffd00
20000a84:	fffffcec 			; <UNDEFINED> instruction: 0xfffffcec
20000a88:	fffffcd8 			; <UNDEFINED> instruction: 0xfffffcd8
20000a8c:	fffffcc4 			; <UNDEFINED> instruction: 0xfffffcc4
				else if(counter < delay_until_text + 4*long_text + 3*short_text + 3)
20000a90:	4be7      	ldr	r3, [pc, #924]	; (20000e30 <main+0xc34>)
20000a92:	681b      	ldr	r3, [r3, #0]
20000a94:	009a      	lsls	r2, r3, #2
20000a96:	4be7      	ldr	r3, [pc, #924]	; (20000e34 <main+0xc38>)
20000a98:	681b      	ldr	r3, [r3, #0]
20000a9a:	18d1      	adds	r1, r2, r3
20000a9c:	4be6      	ldr	r3, [pc, #920]	; (20000e38 <main+0xc3c>)
20000a9e:	681a      	ldr	r2, [r3, #0]
20000aa0:	0013      	movs	r3, r2
20000aa2:	005b      	lsls	r3, r3, #1
20000aa4:	189b      	adds	r3, r3, r2
20000aa6:	18cb      	adds	r3, r1, r3
20000aa8:	1cda      	adds	r2, r3, #3
20000aaa:	4be4      	ldr	r3, [pc, #912]	; (20000e3c <main+0xc40>)
20000aac:	681b      	ldr	r3, [r3, #0]
20000aae:	429a      	cmp	r2, r3
20000ab0:	dd0c      	ble.n	20000acc <main+0x8d0>
					text7.display(&text7, 20);
20000ab2:	4be3      	ldr	r3, [pc, #908]	; (20000e40 <main+0xc44>)
20000ab4:	22ee      	movs	r2, #238	; 0xee
20000ab6:	0092      	lsls	r2, r2, #2
20000ab8:	4694      	mov	ip, r2
20000aba:	44bc      	add	ip, r7
20000abc:	4463      	add	r3, ip
20000abe:	691b      	ldr	r3, [r3, #16]
20000ac0:	2268      	movs	r2, #104	; 0x68
20000ac2:	18ba      	adds	r2, r7, r2
20000ac4:	2114      	movs	r1, #20
20000ac6:	0010      	movs	r0, r2
20000ac8:	4798      	blx	r3
20000aca:	e0ae      	b.n	20000c2a <main+0xa2e>
				else if(counter < delay_until_text + 5*long_text + 3*short_text + 2)
20000acc:	4bd8      	ldr	r3, [pc, #864]	; (20000e30 <main+0xc34>)
20000ace:	681a      	ldr	r2, [r3, #0]
20000ad0:	0013      	movs	r3, r2
20000ad2:	009b      	lsls	r3, r3, #2
20000ad4:	189a      	adds	r2, r3, r2
20000ad6:	4bd7      	ldr	r3, [pc, #860]	; (20000e34 <main+0xc38>)
20000ad8:	681b      	ldr	r3, [r3, #0]
20000ada:	18d1      	adds	r1, r2, r3
20000adc:	4bd6      	ldr	r3, [pc, #856]	; (20000e38 <main+0xc3c>)
20000ade:	681a      	ldr	r2, [r3, #0]
20000ae0:	0013      	movs	r3, r2
20000ae2:	005b      	lsls	r3, r3, #1
20000ae4:	189b      	adds	r3, r3, r2
20000ae6:	18cb      	adds	r3, r1, r3
20000ae8:	1c9a      	adds	r2, r3, #2
20000aea:	4bd4      	ldr	r3, [pc, #848]	; (20000e3c <main+0xc40>)
20000aec:	681b      	ldr	r3, [r3, #0]
20000aee:	429a      	cmp	r2, r3
20000af0:	dd0c      	ble.n	20000b0c <main+0x910>
					text8.display(&text8, 20);
20000af2:	4bd4      	ldr	r3, [pc, #848]	; (20000e44 <main+0xc48>)
20000af4:	22ee      	movs	r2, #238	; 0xee
20000af6:	0092      	lsls	r2, r2, #2
20000af8:	4694      	mov	ip, r2
20000afa:	44bc      	add	ip, r7
20000afc:	4463      	add	r3, ip
20000afe:	691b      	ldr	r3, [r3, #16]
20000b00:	2254      	movs	r2, #84	; 0x54
20000b02:	18ba      	adds	r2, r7, r2
20000b04:	2114      	movs	r1, #20
20000b06:	0010      	movs	r0, r2
20000b08:	4798      	blx	r3
20000b0a:	e08e      	b.n	20000c2a <main+0xa2e>
				else if(counter < delay_until_text + 5*long_text + 4*short_text + 2)
20000b0c:	4bc8      	ldr	r3, [pc, #800]	; (20000e30 <main+0xc34>)
20000b0e:	681a      	ldr	r2, [r3, #0]
20000b10:	0013      	movs	r3, r2
20000b12:	009b      	lsls	r3, r3, #2
20000b14:	189a      	adds	r2, r3, r2
20000b16:	4bc7      	ldr	r3, [pc, #796]	; (20000e34 <main+0xc38>)
20000b18:	681b      	ldr	r3, [r3, #0]
20000b1a:	18d2      	adds	r2, r2, r3
20000b1c:	4bc6      	ldr	r3, [pc, #792]	; (20000e38 <main+0xc3c>)
20000b1e:	681b      	ldr	r3, [r3, #0]
20000b20:	009b      	lsls	r3, r3, #2
20000b22:	18d3      	adds	r3, r2, r3
20000b24:	1c9a      	adds	r2, r3, #2
20000b26:	4bc5      	ldr	r3, [pc, #788]	; (20000e3c <main+0xc40>)
20000b28:	681b      	ldr	r3, [r3, #0]
20000b2a:	429a      	cmp	r2, r3
20000b2c:	dd0c      	ble.n	20000b48 <main+0x94c>
					text9.display(&text9, 20);
20000b2e:	4bc6      	ldr	r3, [pc, #792]	; (20000e48 <main+0xc4c>)
20000b30:	22ee      	movs	r2, #238	; 0xee
20000b32:	0092      	lsls	r2, r2, #2
20000b34:	4694      	mov	ip, r2
20000b36:	44bc      	add	ip, r7
20000b38:	4463      	add	r3, ip
20000b3a:	691b      	ldr	r3, [r3, #16]
20000b3c:	2240      	movs	r2, #64	; 0x40
20000b3e:	18ba      	adds	r2, r7, r2
20000b40:	2114      	movs	r1, #20
20000b42:	0010      	movs	r0, r2
20000b44:	4798      	blx	r3
20000b46:	e070      	b.n	20000c2a <main+0xa2e>
				else if(counter < delay_until_text + 6*long_text + 4*short_text - 2 + 2)
20000b48:	4bb9      	ldr	r3, [pc, #740]	; (20000e30 <main+0xc34>)
20000b4a:	681a      	ldr	r2, [r3, #0]
20000b4c:	0013      	movs	r3, r2
20000b4e:	005b      	lsls	r3, r3, #1
20000b50:	189b      	adds	r3, r3, r2
20000b52:	005b      	lsls	r3, r3, #1
20000b54:	001a      	movs	r2, r3
20000b56:	4bb7      	ldr	r3, [pc, #732]	; (20000e34 <main+0xc38>)
20000b58:	681b      	ldr	r3, [r3, #0]
20000b5a:	18d2      	adds	r2, r2, r3
20000b5c:	4bb6      	ldr	r3, [pc, #728]	; (20000e38 <main+0xc3c>)
20000b5e:	681b      	ldr	r3, [r3, #0]
20000b60:	009b      	lsls	r3, r3, #2
20000b62:	18d2      	adds	r2, r2, r3
20000b64:	4bb5      	ldr	r3, [pc, #724]	; (20000e3c <main+0xc40>)
20000b66:	681b      	ldr	r3, [r3, #0]
20000b68:	429a      	cmp	r2, r3
20000b6a:	dd0c      	ble.n	20000b86 <main+0x98a>
					text10.display(&text10, 15);
20000b6c:	4bb7      	ldr	r3, [pc, #732]	; (20000e4c <main+0xc50>)
20000b6e:	22ee      	movs	r2, #238	; 0xee
20000b70:	0092      	lsls	r2, r2, #2
20000b72:	4694      	mov	ip, r2
20000b74:	44bc      	add	ip, r7
20000b76:	4463      	add	r3, ip
20000b78:	691b      	ldr	r3, [r3, #16]
20000b7a:	222c      	movs	r2, #44	; 0x2c
20000b7c:	18ba      	adds	r2, r7, r2
20000b7e:	210f      	movs	r1, #15
20000b80:	0010      	movs	r0, r2
20000b82:	4798      	blx	r3
20000b84:	e051      	b.n	20000c2a <main+0xa2e>
				else if(counter < delay_until_text + 6*long_text + 5*short_text + 3 + 2)
20000b86:	4baa      	ldr	r3, [pc, #680]	; (20000e30 <main+0xc34>)
20000b88:	681a      	ldr	r2, [r3, #0]
20000b8a:	0013      	movs	r3, r2
20000b8c:	005b      	lsls	r3, r3, #1
20000b8e:	189b      	adds	r3, r3, r2
20000b90:	005b      	lsls	r3, r3, #1
20000b92:	001a      	movs	r2, r3
20000b94:	4ba7      	ldr	r3, [pc, #668]	; (20000e34 <main+0xc38>)
20000b96:	681b      	ldr	r3, [r3, #0]
20000b98:	18d1      	adds	r1, r2, r3
20000b9a:	4ba7      	ldr	r3, [pc, #668]	; (20000e38 <main+0xc3c>)
20000b9c:	681a      	ldr	r2, [r3, #0]
20000b9e:	0013      	movs	r3, r2
20000ba0:	009b      	lsls	r3, r3, #2
20000ba2:	189b      	adds	r3, r3, r2
20000ba4:	18cb      	adds	r3, r1, r3
20000ba6:	1d5a      	adds	r2, r3, #5
20000ba8:	4ba4      	ldr	r3, [pc, #656]	; (20000e3c <main+0xc40>)
20000baa:	681b      	ldr	r3, [r3, #0]
20000bac:	429a      	cmp	r2, r3
20000bae:	dd0b      	ble.n	20000bc8 <main+0x9cc>
					text12.display(&text12, 15);
20000bb0:	4ba7      	ldr	r3, [pc, #668]	; (20000e50 <main+0xc54>)
20000bb2:	22ee      	movs	r2, #238	; 0xee
20000bb4:	0092      	lsls	r2, r2, #2
20000bb6:	4694      	mov	ip, r2
20000bb8:	44bc      	add	ip, r7
20000bba:	4463      	add	r3, ip
20000bbc:	691b      	ldr	r3, [r3, #16]
20000bbe:	1d3a      	adds	r2, r7, #4
20000bc0:	210f      	movs	r1, #15
20000bc2:	0010      	movs	r0, r2
20000bc4:	4798      	blx	r3
20000bc6:	e030      	b.n	20000c2a <main+0xa2e>
				else if(counter < delay_until_text + 7*long_text + 5*short_text + 6 + 2) {
20000bc8:	4b99      	ldr	r3, [pc, #612]	; (20000e30 <main+0xc34>)
20000bca:	681a      	ldr	r2, [r3, #0]
20000bcc:	0013      	movs	r3, r2
20000bce:	00db      	lsls	r3, r3, #3
20000bd0:	1a9a      	subs	r2, r3, r2
20000bd2:	4b98      	ldr	r3, [pc, #608]	; (20000e34 <main+0xc38>)
20000bd4:	681b      	ldr	r3, [r3, #0]
20000bd6:	18d1      	adds	r1, r2, r3
20000bd8:	4b97      	ldr	r3, [pc, #604]	; (20000e38 <main+0xc3c>)
20000bda:	681a      	ldr	r2, [r3, #0]
20000bdc:	0013      	movs	r3, r2
20000bde:	009b      	lsls	r3, r3, #2
20000be0:	189b      	adds	r3, r3, r2
20000be2:	18cb      	adds	r3, r1, r3
20000be4:	3308      	adds	r3, #8
20000be6:	001a      	movs	r2, r3
20000be8:	4b94      	ldr	r3, [pc, #592]	; (20000e3c <main+0xc40>)
20000bea:	681b      	ldr	r3, [r3, #0]
20000bec:	429a      	cmp	r2, r3
20000bee:	dd0c      	ble.n	20000c0a <main+0xa0e>
					text11.display(&text11, 20);
20000bf0:	4b98      	ldr	r3, [pc, #608]	; (20000e54 <main+0xc58>)
20000bf2:	22ee      	movs	r2, #238	; 0xee
20000bf4:	0092      	lsls	r2, r2, #2
20000bf6:	4694      	mov	ip, r2
20000bf8:	44bc      	add	ip, r7
20000bfa:	4463      	add	r3, ip
20000bfc:	691b      	ldr	r3, [r3, #16]
20000bfe:	2218      	movs	r2, #24
20000c00:	18ba      	adds	r2, r7, r2
20000c02:	2114      	movs	r1, #20
20000c04:	0010      	movs	r0, r2
20000c06:	4798      	blx	r3
20000c08:	e00f      	b.n	20000c2a <main+0xa2e>
				} else {
					if (read_DIL() == 0) {
20000c0a:	f002 fa17 	bl	2000303c <read_DIL>
20000c0e:	1e03      	subs	r3, r0, #0
20000c10:	d10b      	bne.n	20000c2a <main+0xa2e>
						current_screen = GAME_SCREEN;
20000c12:	4b91      	ldr	r3, [pc, #580]	; (20000e58 <main+0xc5c>)
20000c14:	2202      	movs	r2, #2
20000c16:	601a      	str	r2, [r3, #0]
						random_seed = counter;
20000c18:	4b88      	ldr	r3, [pc, #544]	; (20000e3c <main+0xc40>)
20000c1a:	681a      	ldr	r2, [r3, #0]
20000c1c:	4b8f      	ldr	r3, [pc, #572]	; (20000e5c <main+0xc60>)
20000c1e:	601a      	str	r2, [r3, #0]
						counter = 0;
20000c20:	4b86      	ldr	r3, [pc, #536]	; (20000e3c <main+0xc40>)
20000c22:	2200      	movs	r2, #0
20000c24:	601a      	str	r2, [r3, #0]
						clear_ascii();
20000c26:	f002 fbd6 	bl	200033d6 <clear_ascii>
					}
				}
				
				if(read_DIL() == SKIP_VALUE) {
20000c2a:	f002 fa07 	bl	2000303c <read_DIL>
20000c2e:	0003      	movs	r3, r0
20000c30:	2b81      	cmp	r3, #129	; 0x81
20000c32:	d10b      	bne.n	20000c4c <main+0xa50>
					current_screen = GAME_SCREEN;
20000c34:	4b88      	ldr	r3, [pc, #544]	; (20000e58 <main+0xc5c>)
20000c36:	2202      	movs	r2, #2
20000c38:	601a      	str	r2, [r3, #0]
					random_seed = counter;
20000c3a:	4b80      	ldr	r3, [pc, #512]	; (20000e3c <main+0xc40>)
20000c3c:	681a      	ldr	r2, [r3, #0]
20000c3e:	4b87      	ldr	r3, [pc, #540]	; (20000e5c <main+0xc60>)
20000c40:	601a      	str	r2, [r3, #0]
					counter = 0;
20000c42:	4b7e      	ldr	r3, [pc, #504]	; (20000e3c <main+0xc40>)
20000c44:	2200      	movs	r2, #0
20000c46:	601a      	str	r2, [r3, #0]
					clear_ascii();
20000c48:	f002 fbc5 	bl	200033d6 <clear_ascii>
				}
				
				
				fire2.update(&fire2);
20000c4c:	4b84      	ldr	r3, [pc, #528]	; (20000e60 <main+0xc64>)
20000c4e:	22ee      	movs	r2, #238	; 0xee
20000c50:	0092      	lsls	r2, r2, #2
20000c52:	4694      	mov	ip, r2
20000c54:	44bc      	add	ip, r7
20000c56:	4463      	add	r3, ip
20000c58:	68db      	ldr	r3, [r3, #12]
20000c5a:	22cc      	movs	r2, #204	; 0xcc
20000c5c:	0052      	lsls	r2, r2, #1
20000c5e:	18ba      	adds	r2, r7, r2
20000c60:	0010      	movs	r0, r2
20000c62:	4798      	blx	r3
				fire3.update(&fire3);
20000c64:	4b7f      	ldr	r3, [pc, #508]	; (20000e64 <main+0xc68>)
20000c66:	22ee      	movs	r2, #238	; 0xee
20000c68:	0092      	lsls	r2, r2, #2
20000c6a:	4694      	mov	ip, r2
20000c6c:	44bc      	add	ip, r7
20000c6e:	4463      	add	r3, ip
20000c70:	68db      	ldr	r3, [r3, #12]
20000c72:	22ba      	movs	r2, #186	; 0xba
20000c74:	0052      	lsls	r2, r2, #1
20000c76:	18ba      	adds	r2, r7, r2
20000c78:	0010      	movs	r0, r2
20000c7a:	4798      	blx	r3
				fire1.update(&fire1);
20000c7c:	4b7a      	ldr	r3, [pc, #488]	; (20000e68 <main+0xc6c>)
20000c7e:	22ee      	movs	r2, #238	; 0xee
20000c80:	0092      	lsls	r2, r2, #2
20000c82:	4694      	mov	ip, r2
20000c84:	44bc      	add	ip, r7
20000c86:	4463      	add	r3, ip
20000c88:	68db      	ldr	r3, [r3, #12]
20000c8a:	2296      	movs	r2, #150	; 0x96
20000c8c:	0052      	lsls	r2, r2, #1
20000c8e:	18ba      	adds	r2, r7, r2
20000c90:	0010      	movs	r0, r2
20000c92:	4798      	blx	r3
				fire4.update(&fire4);
20000c94:	4b75      	ldr	r3, [pc, #468]	; (20000e6c <main+0xc70>)
20000c96:	22ee      	movs	r2, #238	; 0xee
20000c98:	0092      	lsls	r2, r2, #2
20000c9a:	4694      	mov	ip, r2
20000c9c:	44bc      	add	ip, r7
20000c9e:	4463      	add	r3, ip
20000ca0:	68db      	ldr	r3, [r3, #12]
20000ca2:	22a8      	movs	r2, #168	; 0xa8
20000ca4:	0052      	lsls	r2, r2, #1
20000ca6:	18ba      	adds	r2, r7, r2
20000ca8:	0010      	movs	r0, r2
20000caa:	4798      	blx	r3
				bird.update(&bird);
20000cac:	4b70      	ldr	r3, [pc, #448]	; (20000e70 <main+0xc74>)
20000cae:	22ee      	movs	r2, #238	; 0xee
20000cb0:	0092      	lsls	r2, r2, #2
20000cb2:	4694      	mov	ip, r2
20000cb4:	44bc      	add	ip, r7
20000cb6:	4463      	add	r3, ip
20000cb8:	68db      	ldr	r3, [r3, #12]
20000cba:	2281      	movs	r2, #129	; 0x81
20000cbc:	0092      	lsls	r2, r2, #2
20000cbe:	18ba      	adds	r2, r7, r2
20000cc0:	0010      	movs	r0, r2
20000cc2:	4798      	blx	r3
				bird.xPos -= 2;
20000cc4:	4b6a      	ldr	r3, [pc, #424]	; (20000e70 <main+0xc74>)
20000cc6:	22ee      	movs	r2, #238	; 0xee
20000cc8:	0092      	lsls	r2, r2, #2
20000cca:	4694      	mov	ip, r2
20000ccc:	44bc      	add	ip, r7
20000cce:	4463      	add	r3, ip
20000cd0:	685b      	ldr	r3, [r3, #4]
20000cd2:	1e9a      	subs	r2, r3, #2
20000cd4:	4b66      	ldr	r3, [pc, #408]	; (20000e70 <main+0xc74>)
20000cd6:	21ee      	movs	r1, #238	; 0xee
20000cd8:	0089      	lsls	r1, r1, #2
20000cda:	468c      	mov	ip, r1
20000cdc:	44bc      	add	ip, r7
20000cde:	4463      	add	r3, ip
20000ce0:	605a      	str	r2, [r3, #4]
				if (counter % 2 == 0) {
20000ce2:	4b56      	ldr	r3, [pc, #344]	; (20000e3c <main+0xc40>)
20000ce4:	681b      	ldr	r3, [r3, #0]
20000ce6:	001a      	movs	r2, r3
20000ce8:	2301      	movs	r3, #1
20000cea:	4013      	ands	r3, r2
20000cec:	d000      	beq.n	20000cf0 <main+0xaf4>
20000cee:	e214      	b.n	2000111a <main+0xf1e>
					bird.yPos--;
20000cf0:	4b5f      	ldr	r3, [pc, #380]	; (20000e70 <main+0xc74>)
20000cf2:	22ee      	movs	r2, #238	; 0xee
20000cf4:	0092      	lsls	r2, r2, #2
20000cf6:	4694      	mov	ip, r2
20000cf8:	44bc      	add	ip, r7
20000cfa:	4463      	add	r3, ip
20000cfc:	689b      	ldr	r3, [r3, #8]
20000cfe:	1e5a      	subs	r2, r3, #1
20000d00:	4b5b      	ldr	r3, [pc, #364]	; (20000e70 <main+0xc74>)
20000d02:	21ee      	movs	r1, #238	; 0xee
20000d04:	0089      	lsls	r1, r1, #2
20000d06:	468c      	mov	ip, r1
20000d08:	44bc      	add	ip, r7
20000d0a:	4463      	add	r3, ip
20000d0c:	609a      	str	r2, [r3, #8]
				}
				
				break;
20000d0e:	e204      	b.n	2000111a <main+0xf1e>
				
			case GAME_SCREEN: //inside
				
				counter++;
20000d10:	4b4a      	ldr	r3, [pc, #296]	; (20000e3c <main+0xc40>)
20000d12:	681b      	ldr	r3, [r3, #0]
20000d14:	1c5a      	adds	r2, r3, #1
20000d16:	4b49      	ldr	r3, [pc, #292]	; (20000e3c <main+0xc40>)
20000d18:	601a      	str	r2, [r3, #0]
				if(read_DIL_single( LIGHT_TRIGGER )) {
20000d1a:	2006      	movs	r0, #6
20000d1c:	f002 f99e 	bl	2000305c <read_DIL_single>
20000d20:	1e03      	subs	r3, r0, #0
20000d22:	d006      	beq.n	20000d32 <main+0xb36>
					draw_game_object( &indoors2 );
20000d24:	239c      	movs	r3, #156	; 0x9c
20000d26:	009b      	lsls	r3, r3, #2
20000d28:	18fb      	adds	r3, r7, r3
20000d2a:	0018      	movs	r0, r3
20000d2c:	f002 f8dc 	bl	20002ee8 <draw_game_object>
20000d30:	e011      	b.n	20000d56 <main+0xb5a>
				} else {
					draw_game_object( &indoors );
20000d32:	23a5      	movs	r3, #165	; 0xa5
20000d34:	009b      	lsls	r3, r3, #2
20000d36:	18fb      	adds	r3, r7, r3
20000d38:	0018      	movs	r0, r3
20000d3a:	f002 f8d5 	bl	20002ee8 <draw_game_object>
					draw_game_object( &fire1_indoors );
20000d3e:	2384      	movs	r3, #132	; 0x84
20000d40:	005b      	lsls	r3, r3, #1
20000d42:	18fb      	adds	r3, r7, r3
20000d44:	0018      	movs	r0, r3
20000d46:	f002 f8cf 	bl	20002ee8 <draw_game_object>
					draw_game_object( &trophy );
20000d4a:	2393      	movs	r3, #147	; 0x93
20000d4c:	009b      	lsls	r3, r3, #2
20000d4e:	18fb      	adds	r3, r7, r3
20000d50:	0018      	movs	r0, r3
20000d52:	f002 f8c9 	bl	20002ee8 <draw_game_object>
				}
				draw_game_object( &DIP );
20000d56:	23f0      	movs	r3, #240	; 0xf0
20000d58:	005b      	lsls	r3, r3, #1
20000d5a:	18fb      	adds	r3, r7, r3
20000d5c:	0018      	movs	r0, r3
20000d5e:	f002 f8c3 	bl	20002ee8 <draw_game_object>
				draw_game_object( &player );
20000d62:	23de      	movs	r3, #222	; 0xde
20000d64:	005b      	lsls	r3, r3, #1
20000d66:	18fb      	adds	r3, r7, r3
20000d68:	0018      	movs	r0, r3
20000d6a:	f002 f8bd 	bl	20002ee8 <draw_game_object>
				draw_game_object( &hair );	//ta bort
20000d6e:	238a      	movs	r3, #138	; 0x8a
20000d70:	009b      	lsls	r3, r3, #2
20000d72:	18fb      	adds	r3, r7, r3
20000d74:	0018      	movs	r0, r3
20000d76:	f002 f8b7 	bl	20002ee8 <draw_game_object>
				show_frame(1);
20000d7a:	2001      	movs	r0, #1
20000d7c:	f002 f8f5 	bl	20002f6a <show_frame>
				
				static int last_climb_value = 100;
				if((read_DIL_single(CLIMB_TRIGGER) != last_climb_value) && player.xPos > 90 && player.xPos < 108 && !has_climbed) {
20000d80:	2004      	movs	r0, #4
20000d82:	f002 f96b 	bl	2000305c <read_DIL_single>
20000d86:	0002      	movs	r2, r0
20000d88:	4b3a      	ldr	r3, [pc, #232]	; (20000e74 <main+0xc78>)
20000d8a:	681b      	ldr	r3, [r3, #0]
20000d8c:	429a      	cmp	r2, r3
20000d8e:	d024      	beq.n	20000dda <main+0xbde>
20000d90:	4b39      	ldr	r3, [pc, #228]	; (20000e78 <main+0xc7c>)
20000d92:	22ee      	movs	r2, #238	; 0xee
20000d94:	0092      	lsls	r2, r2, #2
20000d96:	4694      	mov	ip, r2
20000d98:	44bc      	add	ip, r7
20000d9a:	4463      	add	r3, ip
20000d9c:	685b      	ldr	r3, [r3, #4]
20000d9e:	2b5a      	cmp	r3, #90	; 0x5a
20000da0:	dd1b      	ble.n	20000dda <main+0xbde>
20000da2:	4b35      	ldr	r3, [pc, #212]	; (20000e78 <main+0xc7c>)
20000da4:	22ee      	movs	r2, #238	; 0xee
20000da6:	0092      	lsls	r2, r2, #2
20000da8:	4694      	mov	ip, r2
20000daa:	44bc      	add	ip, r7
20000dac:	4463      	add	r3, ip
20000dae:	685b      	ldr	r3, [r3, #4]
20000db0:	2b6b      	cmp	r3, #107	; 0x6b
20000db2:	dc12      	bgt.n	20000dda <main+0xbde>
20000db4:	23ec      	movs	r3, #236	; 0xec
20000db6:	009b      	lsls	r3, r3, #2
20000db8:	18fb      	adds	r3, r7, r3
20000dba:	681b      	ldr	r3, [r3, #0]
20000dbc:	2b00      	cmp	r3, #0
20000dbe:	d10c      	bne.n	20000dda <main+0xbde>
					is_climbing = 1;
20000dc0:	2301      	movs	r3, #1
20000dc2:	22ed      	movs	r2, #237	; 0xed
20000dc4:	0092      	lsls	r2, r2, #2
20000dc6:	18ba      	adds	r2, r7, r2
20000dc8:	6013      	str	r3, [r2, #0]
					player.xPos = 98;
20000dca:	4b2b      	ldr	r3, [pc, #172]	; (20000e78 <main+0xc7c>)
20000dcc:	22ee      	movs	r2, #238	; 0xee
20000dce:	0092      	lsls	r2, r2, #2
20000dd0:	4694      	mov	ip, r2
20000dd2:	44bc      	add	ip, r7
20000dd4:	4463      	add	r3, ip
20000dd6:	2262      	movs	r2, #98	; 0x62
20000dd8:	605a      	str	r2, [r3, #4]
				}
				last_climb_value = read_DIL_single(CLIMB_TRIGGER);
20000dda:	2004      	movs	r0, #4
20000ddc:	f002 f93e 	bl	2000305c <read_DIL_single>
20000de0:	0002      	movs	r2, r0
20000de2:	4b24      	ldr	r3, [pc, #144]	; (20000e74 <main+0xc78>)
20000de4:	601a      	str	r2, [r3, #0]
				
				if(is_climbing) {
20000de6:	23ed      	movs	r3, #237	; 0xed
20000de8:	009b      	lsls	r3, r3, #2
20000dea:	18fb      	adds	r3, r7, r3
20000dec:	681b      	ldr	r3, [r3, #0]
20000dee:	2b00      	cmp	r3, #0
20000df0:	d05f      	beq.n	20000eb2 <main+0xcb6>
					gameObjectUpdate( &player );
20000df2:	23de      	movs	r3, #222	; 0xde
20000df4:	005b      	lsls	r3, r3, #1
20000df6:	18fb      	adds	r3, r7, r3
20000df8:	0018      	movs	r0, r3
20000dfa:	f000 f9af 	bl	2000115c <gameObjectUpdate>
					if(player.yPos > 4) {
20000dfe:	4b1e      	ldr	r3, [pc, #120]	; (20000e78 <main+0xc7c>)
20000e00:	22ee      	movs	r2, #238	; 0xee
20000e02:	0092      	lsls	r2, r2, #2
20000e04:	4694      	mov	ip, r2
20000e06:	44bc      	add	ip, r7
20000e08:	4463      	add	r3, ip
20000e0a:	689b      	ldr	r3, [r3, #8]
20000e0c:	2b04      	cmp	r3, #4
20000e0e:	dd35      	ble.n	20000e7c <main+0xc80>
						player.yPos--;
20000e10:	4b19      	ldr	r3, [pc, #100]	; (20000e78 <main+0xc7c>)
20000e12:	22ee      	movs	r2, #238	; 0xee
20000e14:	0092      	lsls	r2, r2, #2
20000e16:	4694      	mov	ip, r2
20000e18:	44bc      	add	ip, r7
20000e1a:	4463      	add	r3, ip
20000e1c:	689b      	ldr	r3, [r3, #8]
20000e1e:	1e5a      	subs	r2, r3, #1
20000e20:	4b15      	ldr	r3, [pc, #84]	; (20000e78 <main+0xc7c>)
20000e22:	21ee      	movs	r1, #238	; 0xee
20000e24:	0089      	lsls	r1, r1, #2
20000e26:	468c      	mov	ip, r1
20000e28:	44bc      	add	ip, r7
20000e2a:	4463      	add	r3, ip
20000e2c:	609a      	str	r2, [r3, #8]
20000e2e:	e04c      	b.n	20000eca <main+0xcce>
20000e30:	2000783c 	andcs	r7, r0, ip, lsr r8
20000e34:	20007838 	andcs	r7, r0, r8, lsr r8
20000e38:	20007840 	andcs	r7, r0, r0, asr #16
20000e3c:	20003ad4 	ldrdcs	r3, [r0], -r4
20000e40:	fffffcb0 			; <UNDEFINED> instruction: 0xfffffcb0
20000e44:	fffffc9c 			; <UNDEFINED> instruction: 0xfffffc9c
20000e48:	fffffc88 			; <UNDEFINED> instruction: 0xfffffc88
20000e4c:	fffffc74 			; <UNDEFINED> instruction: 0xfffffc74
20000e50:	fffffc4c 			; <UNDEFINED> instruction: 0xfffffc4c
20000e54:	fffffc60 			; <UNDEFINED> instruction: 0xfffffc60
20000e58:	20007834 	andcs	r7, r0, r4, lsr r8
20000e5c:	20003bbc 			; <UNDEFINED> instruction: 0x20003bbc
20000e60:	fffffde0 			; <UNDEFINED> instruction: 0xfffffde0
20000e64:	fffffdbc 			; <UNDEFINED> instruction: 0xfffffdbc
20000e68:	fffffd74 			; <UNDEFINED> instruction: 0xfffffd74
20000e6c:	fffffd98 			; <UNDEFINED> instruction: 0xfffffd98
20000e70:	fffffe4c 			; <UNDEFINED> instruction: 0xfffffe4c
20000e74:	20007844 	andcs	r7, r0, r4, asr #16
20000e78:	fffffe04 			; <UNDEFINED> instruction: 0xfffffe04
					} else {	//Stay at top level and disable climbing forever!
						player.yPos = 5;
20000e7c:	4baa      	ldr	r3, [pc, #680]	; (20001128 <main+0xf2c>)
20000e7e:	22ee      	movs	r2, #238	; 0xee
20000e80:	0092      	lsls	r2, r2, #2
20000e82:	4694      	mov	ip, r2
20000e84:	44bc      	add	ip, r7
20000e86:	4463      	add	r3, ip
20000e88:	2205      	movs	r2, #5
20000e8a:	609a      	str	r2, [r3, #8]
						player.xPos = 96;
20000e8c:	4ba6      	ldr	r3, [pc, #664]	; (20001128 <main+0xf2c>)
20000e8e:	22ee      	movs	r2, #238	; 0xee
20000e90:	0092      	lsls	r2, r2, #2
20000e92:	4694      	mov	ip, r2
20000e94:	44bc      	add	ip, r7
20000e96:	4463      	add	r3, ip
20000e98:	2260      	movs	r2, #96	; 0x60
20000e9a:	605a      	str	r2, [r3, #4]
						is_climbing = 0;
20000e9c:	2300      	movs	r3, #0
20000e9e:	22ed      	movs	r2, #237	; 0xed
20000ea0:	0092      	lsls	r2, r2, #2
20000ea2:	18ba      	adds	r2, r7, r2
20000ea4:	6013      	str	r3, [r2, #0]
						has_climbed = 1;
20000ea6:	2301      	movs	r3, #1
20000ea8:	22ec      	movs	r2, #236	; 0xec
20000eaa:	0092      	lsls	r2, r2, #2
20000eac:	18ba      	adds	r2, r7, r2
20000eae:	6013      	str	r3, [r2, #0]
20000eb0:	e00b      	b.n	20000eca <main+0xcce>
					}
				} else {
					player.update(&player);
20000eb2:	4b9d      	ldr	r3, [pc, #628]	; (20001128 <main+0xf2c>)
20000eb4:	22ee      	movs	r2, #238	; 0xee
20000eb6:	0092      	lsls	r2, r2, #2
20000eb8:	4694      	mov	ip, r2
20000eba:	44bc      	add	ip, r7
20000ebc:	4463      	add	r3, ip
20000ebe:	68db      	ldr	r3, [r3, #12]
20000ec0:	22de      	movs	r2, #222	; 0xde
20000ec2:	0052      	lsls	r2, r2, #1
20000ec4:	18ba      	adds	r2, r7, r2
20000ec6:	0010      	movs	r0, r2
20000ec8:	4798      	blx	r3
				}
				
				if (read_DIL_single(EXPLOSION_TRIGGER)){
20000eca:	2003      	movs	r0, #3
20000ecc:	f002 f8c6 	bl	2000305c <read_DIL_single>
20000ed0:	1e03      	subs	r3, r0, #0
20000ed2:	d004      	beq.n	20000ede <main+0xce2>
					game_over_adder = 1;
20000ed4:	2301      	movs	r3, #1
20000ed6:	22ea      	movs	r2, #234	; 0xea
20000ed8:	0092      	lsls	r2, r2, #2
20000eda:	18ba      	adds	r2, r7, r2
20000edc:	6013      	str	r3, [r2, #0]
				}
				
				fire1_indoors.update(&fire1_indoors);
20000ede:	4b93      	ldr	r3, [pc, #588]	; (2000112c <main+0xf30>)
20000ee0:	22ee      	movs	r2, #238	; 0xee
20000ee2:	0092      	lsls	r2, r2, #2
20000ee4:	4694      	mov	ip, r2
20000ee6:	44bc      	add	ip, r7
20000ee8:	4463      	add	r3, ip
20000eea:	68db      	ldr	r3, [r3, #12]
20000eec:	2284      	movs	r2, #132	; 0x84
20000eee:	0052      	lsls	r2, r2, #1
20000ef0:	18ba      	adds	r2, r7, r2
20000ef2:	0010      	movs	r0, r2
20000ef4:	4798      	blx	r3
				setPlayerPosition(player.xPos, player.yPos);
20000ef6:	4b8c      	ldr	r3, [pc, #560]	; (20001128 <main+0xf2c>)
20000ef8:	22ee      	movs	r2, #238	; 0xee
20000efa:	0092      	lsls	r2, r2, #2
20000efc:	4694      	mov	ip, r2
20000efe:	44bc      	add	ip, r7
20000f00:	4463      	add	r3, ip
20000f02:	685a      	ldr	r2, [r3, #4]
20000f04:	4b88      	ldr	r3, [pc, #544]	; (20001128 <main+0xf2c>)
20000f06:	21ee      	movs	r1, #238	; 0xee
20000f08:	0089      	lsls	r1, r1, #2
20000f0a:	468c      	mov	ip, r1
20000f0c:	44bc      	add	ip, r7
20000f0e:	4463      	add	r3, ip
20000f10:	689b      	ldr	r3, [r3, #8]
20000f12:	0019      	movs	r1, r3
20000f14:	0010      	movs	r0, r2
20000f16:	f000 ff6d 	bl	20001df4 <setPlayerPosition>
				DIP.update(&DIP);
20000f1a:	4b85      	ldr	r3, [pc, #532]	; (20001130 <main+0xf34>)
20000f1c:	22ee      	movs	r2, #238	; 0xee
20000f1e:	0092      	lsls	r2, r2, #2
20000f20:	4694      	mov	ip, r2
20000f22:	44bc      	add	ip, r7
20000f24:	4463      	add	r3, ip
20000f26:	68db      	ldr	r3, [r3, #12]
20000f28:	22f0      	movs	r2, #240	; 0xf0
20000f2a:	0052      	lsls	r2, r2, #1
20000f2c:	18ba      	adds	r2, r7, r2
20000f2e:	0010      	movs	r0, r2
20000f30:	4798      	blx	r3
				hair.update(&hair);
20000f32:	4b80      	ldr	r3, [pc, #512]	; (20001134 <main+0xf38>)
20000f34:	22ee      	movs	r2, #238	; 0xee
20000f36:	0092      	lsls	r2, r2, #2
20000f38:	4694      	mov	ip, r2
20000f3a:	44bc      	add	ip, r7
20000f3c:	4463      	add	r3, ip
20000f3e:	68db      	ldr	r3, [r3, #12]
20000f40:	228a      	movs	r2, #138	; 0x8a
20000f42:	0092      	lsls	r2, r2, #2
20000f44:	18ba      	adds	r2, r7, r2
20000f46:	0010      	movs	r0, r2
20000f48:	4798      	blx	r3
				
				if (DIP.yPos >= player.yPos && (player.xPos + DIP_WIDTH/2 >= DIP.xPos && player.xPos <= DIP.xPos + DIP_WIDTH/2 )){ // DIP_collision
20000f4a:	4b79      	ldr	r3, [pc, #484]	; (20001130 <main+0xf34>)
20000f4c:	22ee      	movs	r2, #238	; 0xee
20000f4e:	0092      	lsls	r2, r2, #2
20000f50:	4694      	mov	ip, r2
20000f52:	44bc      	add	ip, r7
20000f54:	4463      	add	r3, ip
20000f56:	689a      	ldr	r2, [r3, #8]
20000f58:	4b73      	ldr	r3, [pc, #460]	; (20001128 <main+0xf2c>)
20000f5a:	21ee      	movs	r1, #238	; 0xee
20000f5c:	0089      	lsls	r1, r1, #2
20000f5e:	468c      	mov	ip, r1
20000f60:	44bc      	add	ip, r7
20000f62:	4463      	add	r3, ip
20000f64:	689b      	ldr	r3, [r3, #8]
20000f66:	429a      	cmp	r2, r3
20000f68:	db27      	blt.n	20000fba <main+0xdbe>
20000f6a:	4b6f      	ldr	r3, [pc, #444]	; (20001128 <main+0xf2c>)
20000f6c:	22ee      	movs	r2, #238	; 0xee
20000f6e:	0092      	lsls	r2, r2, #2
20000f70:	4694      	mov	ip, r2
20000f72:	44bc      	add	ip, r7
20000f74:	4463      	add	r3, ip
20000f76:	685b      	ldr	r3, [r3, #4]
20000f78:	3309      	adds	r3, #9
20000f7a:	001a      	movs	r2, r3
20000f7c:	4b6c      	ldr	r3, [pc, #432]	; (20001130 <main+0xf34>)
20000f7e:	21ee      	movs	r1, #238	; 0xee
20000f80:	0089      	lsls	r1, r1, #2
20000f82:	468c      	mov	ip, r1
20000f84:	44bc      	add	ip, r7
20000f86:	4463      	add	r3, ip
20000f88:	685b      	ldr	r3, [r3, #4]
20000f8a:	429a      	cmp	r2, r3
20000f8c:	db15      	blt.n	20000fba <main+0xdbe>
20000f8e:	4b66      	ldr	r3, [pc, #408]	; (20001128 <main+0xf2c>)
20000f90:	22ee      	movs	r2, #238	; 0xee
20000f92:	0092      	lsls	r2, r2, #2
20000f94:	4694      	mov	ip, r2
20000f96:	44bc      	add	ip, r7
20000f98:	4463      	add	r3, ip
20000f9a:	685a      	ldr	r2, [r3, #4]
20000f9c:	4b64      	ldr	r3, [pc, #400]	; (20001130 <main+0xf34>)
20000f9e:	21ee      	movs	r1, #238	; 0xee
20000fa0:	0089      	lsls	r1, r1, #2
20000fa2:	468c      	mov	ip, r1
20000fa4:	44bc      	add	ip, r7
20000fa6:	4463      	add	r3, ip
20000fa8:	685b      	ldr	r3, [r3, #4]
20000faa:	3309      	adds	r3, #9
20000fac:	429a      	cmp	r2, r3
20000fae:	dc04      	bgt.n	20000fba <main+0xdbe>
					game_over_adder = 100;
20000fb0:	2364      	movs	r3, #100	; 0x64
20000fb2:	22ea      	movs	r2, #234	; 0xea
20000fb4:	0092      	lsls	r2, r2, #2
20000fb6:	18ba      	adds	r2, r7, r2
20000fb8:	6013      	str	r3, [r2, #0]
				}
				
				static int distance_player_fire;	//fire_collision
				distance_player_fire = (player.xPos + 9) - (fire1_indoors.xPos + 5);
20000fba:	4b5b      	ldr	r3, [pc, #364]	; (20001128 <main+0xf2c>)
20000fbc:	22ee      	movs	r2, #238	; 0xee
20000fbe:	0092      	lsls	r2, r2, #2
20000fc0:	4694      	mov	ip, r2
20000fc2:	44bc      	add	ip, r7
20000fc4:	4463      	add	r3, ip
20000fc6:	685b      	ldr	r3, [r3, #4]
20000fc8:	3309      	adds	r3, #9
20000fca:	001a      	movs	r2, r3
20000fcc:	4b57      	ldr	r3, [pc, #348]	; (2000112c <main+0xf30>)
20000fce:	21ee      	movs	r1, #238	; 0xee
20000fd0:	0089      	lsls	r1, r1, #2
20000fd2:	468c      	mov	ip, r1
20000fd4:	44bc      	add	ip, r7
20000fd6:	4463      	add	r3, ip
20000fd8:	685b      	ldr	r3, [r3, #4]
20000fda:	3305      	adds	r3, #5
20000fdc:	1ad2      	subs	r2, r2, r3
20000fde:	4b56      	ldr	r3, [pc, #344]	; (20001138 <main+0xf3c>)
20000fe0:	601a      	str	r2, [r3, #0]
				if(player.yPos > (fire1_indoors.yPos - 18 + 7) && distance_player_fire < 8 && distance_player_fire > -8) {
20000fe2:	4b51      	ldr	r3, [pc, #324]	; (20001128 <main+0xf2c>)
20000fe4:	22ee      	movs	r2, #238	; 0xee
20000fe6:	0092      	lsls	r2, r2, #2
20000fe8:	4694      	mov	ip, r2
20000fea:	44bc      	add	ip, r7
20000fec:	4463      	add	r3, ip
20000fee:	689a      	ldr	r2, [r3, #8]
20000ff0:	4b4e      	ldr	r3, [pc, #312]	; (2000112c <main+0xf30>)
20000ff2:	21ee      	movs	r1, #238	; 0xee
20000ff4:	0089      	lsls	r1, r1, #2
20000ff6:	468c      	mov	ip, r1
20000ff8:	44bc      	add	ip, r7
20000ffa:	4463      	add	r3, ip
20000ffc:	689b      	ldr	r3, [r3, #8]
20000ffe:	3b0b      	subs	r3, #11
20001000:	429a      	cmp	r2, r3
20001002:	dd0c      	ble.n	2000101e <main+0xe22>
20001004:	4b4c      	ldr	r3, [pc, #304]	; (20001138 <main+0xf3c>)
20001006:	681b      	ldr	r3, [r3, #0]
20001008:	2b07      	cmp	r3, #7
2000100a:	dc08      	bgt.n	2000101e <main+0xe22>
2000100c:	4b4a      	ldr	r3, [pc, #296]	; (20001138 <main+0xf3c>)
2000100e:	681b      	ldr	r3, [r3, #0]
20001010:	3307      	adds	r3, #7
20001012:	db04      	blt.n	2000101e <main+0xe22>
					game_over_adder = 100;
20001014:	2364      	movs	r3, #100	; 0x64
20001016:	22ea      	movs	r2, #234	; 0xea
20001018:	0092      	lsls	r2, r2, #2
2000101a:	18ba      	adds	r2, r7, r2
2000101c:	6013      	str	r3, [r2, #0]
				}
				
				game_over += game_over_adder;
2000101e:	23eb      	movs	r3, #235	; 0xeb
20001020:	009b      	lsls	r3, r3, #2
20001022:	18fb      	adds	r3, r7, r3
20001024:	681a      	ldr	r2, [r3, #0]
20001026:	23ea      	movs	r3, #234	; 0xea
20001028:	009b      	lsls	r3, r3, #2
2000102a:	18fb      	adds	r3, r7, r3
2000102c:	681b      	ldr	r3, [r3, #0]
2000102e:	18d3      	adds	r3, r2, r3
20001030:	22eb      	movs	r2, #235	; 0xeb
20001032:	0092      	lsls	r2, r2, #2
20001034:	18ba      	adds	r2, r7, r2
20001036:	6013      	str	r3, [r2, #0]
				
				if(game_over >= 100) {
20001038:	23eb      	movs	r3, #235	; 0xeb
2000103a:	009b      	lsls	r3, r3, #2
2000103c:	18fb      	adds	r3, r7, r3
2000103e:	681b      	ldr	r3, [r3, #0]
20001040:	2b63      	cmp	r3, #99	; 0x63
20001042:	dd6d      	ble.n	20001120 <main+0xf24>
					current_screen = RESET_GAME;
20001044:	4b3d      	ldr	r3, [pc, #244]	; (2000113c <main+0xf40>)
20001046:	220a      	movs	r2, #10
20001048:	601a      	str	r2, [r3, #0]
				}
				
				break;
2000104a:	e069      	b.n	20001120 <main+0xf24>
				
			
			case RESET_GAME: //restart
				counter = 0;
2000104c:	4b3c      	ldr	r3, [pc, #240]	; (20001140 <main+0xf44>)
2000104e:	2200      	movs	r2, #0
20001050:	601a      	str	r2, [r3, #0]
				current_screen = START_SCREEN;
20001052:	4b3a      	ldr	r3, [pc, #232]	; (2000113c <main+0xf40>)
20001054:	2201      	movs	r2, #1
20001056:	601a      	str	r2, [r3, #0]
				if(read_DIL() == 0) {
20001058:	f001 fff0 	bl	2000303c <read_DIL>
2000105c:	1e03      	subs	r3, r0, #0
2000105e:	d102      	bne.n	20001066 <main+0xe6a>
					current_screen = SWITCH_LOCK; 
20001060:	4b36      	ldr	r3, [pc, #216]	; (2000113c <main+0xf40>)
20001062:	2200      	movs	r2, #0
20001064:	601a      	str	r2, [r3, #0]
				}
	
				static int test = 0;
				test+=2;
20001066:	4b37      	ldr	r3, [pc, #220]	; (20001144 <main+0xf48>)
20001068:	681b      	ldr	r3, [r3, #0]
2000106a:	1c9a      	adds	r2, r3, #2
2000106c:	4b35      	ldr	r3, [pc, #212]	; (20001144 <main+0xf48>)
2000106e:	601a      	str	r2, [r3, #0]
	
				is_climbing = 0;
20001070:	2300      	movs	r3, #0
20001072:	22ed      	movs	r2, #237	; 0xed
20001074:	0092      	lsls	r2, r2, #2
20001076:	18ba      	adds	r2, r7, r2
20001078:	6013      	str	r3, [r2, #0]
				has_climbed = 0;
2000107a:	2300      	movs	r3, #0
2000107c:	22ec      	movs	r2, #236	; 0xec
2000107e:	0092      	lsls	r2, r2, #2
20001080:	18ba      	adds	r2, r7, r2
20001082:	6013      	str	r3, [r2, #0]
				game_over = 0;
20001084:	2300      	movs	r3, #0
20001086:	22eb      	movs	r2, #235	; 0xeb
20001088:	0092      	lsls	r2, r2, #2
2000108a:	18ba      	adds	r2, r7, r2
2000108c:	6013      	str	r3, [r2, #0]
				game_over_adder = 0;
2000108e:	2300      	movs	r3, #0
20001090:	22ea      	movs	r2, #234	; 0xea
20001092:	0092      	lsls	r2, r2, #2
20001094:	18ba      	adds	r2, r7, r2
20001096:	6013      	str	r3, [r2, #0]
				fire1_indoors.xPos = 40;		//FIRE1_INDO
20001098:	4b24      	ldr	r3, [pc, #144]	; (2000112c <main+0xf30>)
2000109a:	22ee      	movs	r2, #238	; 0xee
2000109c:	0092      	lsls	r2, r2, #2
2000109e:	4694      	mov	ip, r2
200010a0:	44bc      	add	ip, r7
200010a2:	4463      	add	r3, ip
200010a4:	2228      	movs	r2, #40	; 0x28
200010a6:	605a      	str	r2, [r3, #4]
				fire1_indoors.yPos = 64-12-8;
200010a8:	4b20      	ldr	r3, [pc, #128]	; (2000112c <main+0xf30>)
200010aa:	22ee      	movs	r2, #238	; 0xee
200010ac:	0092      	lsls	r2, r2, #2
200010ae:	4694      	mov	ip, r2
200010b0:	44bc      	add	ip, r7
200010b2:	4463      	add	r3, ip
200010b4:	222c      	movs	r2, #44	; 0x2c
200010b6:	609a      	str	r2, [r3, #8]
				
				bird.xPos = 180;
200010b8:	4b23      	ldr	r3, [pc, #140]	; (20001148 <main+0xf4c>)
200010ba:	22ee      	movs	r2, #238	; 0xee
200010bc:	0092      	lsls	r2, r2, #2
200010be:	4694      	mov	ip, r2
200010c0:	44bc      	add	ip, r7
200010c2:	4463      	add	r3, ip
200010c4:	22b4      	movs	r2, #180	; 0xb4
200010c6:	605a      	str	r2, [r3, #4]
				bird.yPos = 40;
200010c8:	4b1f      	ldr	r3, [pc, #124]	; (20001148 <main+0xf4c>)
200010ca:	22ee      	movs	r2, #238	; 0xee
200010cc:	0092      	lsls	r2, r2, #2
200010ce:	4694      	mov	ip, r2
200010d0:	44bc      	add	ip, r7
200010d2:	4463      	add	r3, ip
200010d4:	2228      	movs	r2, #40	; 0x28
200010d6:	609a      	str	r2, [r3, #8]
				
				DIP.xPos = 100;
200010d8:	4b15      	ldr	r3, [pc, #84]	; (20001130 <main+0xf34>)
200010da:	22ee      	movs	r2, #238	; 0xee
200010dc:	0092      	lsls	r2, r2, #2
200010de:	4694      	mov	ip, r2
200010e0:	44bc      	add	ip, r7
200010e2:	4463      	add	r3, ip
200010e4:	2264      	movs	r2, #100	; 0x64
200010e6:	605a      	str	r2, [r3, #4]
				DIP.yPos = 5;
200010e8:	4b11      	ldr	r3, [pc, #68]	; (20001130 <main+0xf34>)
200010ea:	22ee      	movs	r2, #238	; 0xee
200010ec:	0092      	lsls	r2, r2, #2
200010ee:	4694      	mov	ip, r2
200010f0:	44bc      	add	ip, r7
200010f2:	4463      	add	r3, ip
200010f4:	2205      	movs	r2, #5
200010f6:	609a      	str	r2, [r3, #8]
				player.xPos = 3;
200010f8:	4b0b      	ldr	r3, [pc, #44]	; (20001128 <main+0xf2c>)
200010fa:	22ee      	movs	r2, #238	; 0xee
200010fc:	0092      	lsls	r2, r2, #2
200010fe:	4694      	mov	ip, r2
20001100:	44bc      	add	ip, r7
20001102:	4463      	add	r3, ip
20001104:	2203      	movs	r2, #3
20001106:	605a      	str	r2, [r3, #4]
				player.yPos = 64-18-7; //player position
20001108:	4b07      	ldr	r3, [pc, #28]	; (20001128 <main+0xf2c>)
2000110a:	22ee      	movs	r2, #238	; 0xee
2000110c:	0092      	lsls	r2, r2, #2
2000110e:	4694      	mov	ip, r2
20001110:	44bc      	add	ip, r7
20001112:	4463      	add	r3, ip
20001114:	2227      	movs	r2, #39	; 0x27
20001116:	609a      	str	r2, [r3, #8]
				
				break;
20001118:	e003      	b.n	20001122 <main+0xf26>
				break;
2000111a:	46c0      	nop			; (mov r8, r8)
2000111c:	f7ff fb39 	bl	20000792 <main+0x596>
				break;
20001120:	46c0      	nop			; (mov r8, r8)
		switch(current_screen) {
20001122:	f7ff fb36 	bl	20000792 <main+0x596>
20001126:	46c0      	nop			; (mov r8, r8)
20001128:	fffffe04 			; <UNDEFINED> instruction: 0xfffffe04
2000112c:	fffffd50 			; <UNDEFINED> instruction: 0xfffffd50
20001130:	fffffe28 			; <UNDEFINED> instruction: 0xfffffe28
20001134:	fffffe70 			; <UNDEFINED> instruction: 0xfffffe70
20001138:	20003ad8 	ldrdcs	r3, [r0], -r8
2000113c:	20007834 	andcs	r7, r0, r4, lsr r8
20001140:	20003ad4 	ldrdcs	r3, [r0], -r4
20001144:	20003adc 	ldrdcs	r3, [r0], -ip
20001148:	fffffe4c 			; <UNDEFINED> instruction: 0xfffffe4c

2000114c <render>:
GameObject* gameObjects[100];
int nGameObjects = 0;


void render(GameObject* this)
{
2000114c:	b580      	push	{r7, lr}
2000114e:	b082      	sub	sp, #8
20001150:	af00      	add	r7, sp, #0
20001152:	6078      	str	r0, [r7, #4]
    
}
20001154:	46c0      	nop			; (mov r8, r8)
20001156:	46bd      	mov	sp, r7
20001158:	b002      	add	sp, #8
2000115a:	bd80      	pop	{r7, pc}

2000115c <gameObjectUpdate>:

void gameObjectUpdate(GameObject *this) {
2000115c:	b580      	push	{r7, lr}
2000115e:	b082      	sub	sp, #8
20001160:	af00      	add	r7, sp, #0
20001162:	6078      	str	r0, [r7, #4]
	this->animation_counter++;
20001164:	687b      	ldr	r3, [r7, #4]
20001166:	6a1b      	ldr	r3, [r3, #32]
20001168:	1c5a      	adds	r2, r3, #1
2000116a:	687b      	ldr	r3, [r7, #4]
2000116c:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
2000116e:	687b      	ldr	r3, [r7, #4]
20001170:	6a1a      	ldr	r2, [r3, #32]
20001172:	687b      	ldr	r3, [r7, #4]
20001174:	69db      	ldr	r3, [r3, #28]
20001176:	429a      	cmp	r2, r3
20001178:	d10f      	bne.n	2000119a <gameObjectUpdate+0x3e>
		this->animation_counter = 0;
2000117a:	687b      	ldr	r3, [r7, #4]
2000117c:	2200      	movs	r2, #0
2000117e:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
20001180:	687b      	ldr	r3, [r7, #4]
20001182:	695b      	ldr	r3, [r3, #20]
20001184:	1c5a      	adds	r2, r3, #1
20001186:	687b      	ldr	r3, [r7, #4]
20001188:	699b      	ldr	r3, [r3, #24]
2000118a:	0019      	movs	r1, r3
2000118c:	0010      	movs	r0, r2
2000118e:	f002 fc9b 	bl	20003ac8 <__aeabi_idivmod>
20001192:	000b      	movs	r3, r1
20001194:	001a      	movs	r2, r3
20001196:	687b      	ldr	r3, [r7, #4]
20001198:	615a      	str	r2, [r3, #20]
	}
}
2000119a:	46c0      	nop			; (mov r8, r8)
2000119c:	46bd      	mov	sp, r7
2000119e:	b002      	add	sp, #8
200011a0:	bd80      	pop	{r7, pc}
	...

200011a4 <initSprites>:
Image fire2Image;
Image fire3Image;
Image fire4Image;
Image fire5Image;
Image fireImages[5];
static void initSprites( void ) {	
200011a4:	b580      	push	{r7, lr}
200011a6:	b08c      	sub	sp, #48	; 0x30
200011a8:	af00      	add	r7, sp, #0
	sprite *pointer0 = &tempFireBlack;
200011aa:	4b3e      	ldr	r3, [pc, #248]	; (200012a4 <initSprites+0x100>)
200011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer0, fire_black_2_bits, fire1_gray_width, fire1_gray_height);
200011ae:	493e      	ldr	r1, [pc, #248]	; (200012a8 <initSprites+0x104>)
200011b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
200011b2:	230c      	movs	r3, #12
200011b4:	2208      	movs	r2, #8
200011b6:	f001 ff21 	bl	20002ffc <load_sprite>
	fireBlack = pointer0;
200011ba:	4b3c      	ldr	r3, [pc, #240]	; (200012ac <initSprites+0x108>)
200011bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
200011be:	601a      	str	r2, [r3, #0]
	
	sprite *pointer1 = &tempFire1Gray;
200011c0:	4b3b      	ldr	r3, [pc, #236]	; (200012b0 <initSprites+0x10c>)
200011c2:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer1, fire1_gray_bits, fire1_gray_width, fire1_gray_height);
200011c4:	493b      	ldr	r1, [pc, #236]	; (200012b4 <initSprites+0x110>)
200011c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
200011c8:	230c      	movs	r3, #12
200011ca:	2208      	movs	r2, #8
200011cc:	f001 ff16 	bl	20002ffc <load_sprite>
	fire1Gray = pointer1;
200011d0:	4b39      	ldr	r3, [pc, #228]	; (200012b8 <initSprites+0x114>)
200011d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
200011d4:	601a      	str	r2, [r3, #0]

	sprite *pointer2 = &tempFire1Light;
200011d6:	4b39      	ldr	r3, [pc, #228]	; (200012bc <initSprites+0x118>)
200011d8:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer2, fire1_light_bits, fire1_gray_width, fire1_gray_height);
200011da:	4939      	ldr	r1, [pc, #228]	; (200012c0 <initSprites+0x11c>)
200011dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
200011de:	230c      	movs	r3, #12
200011e0:	2208      	movs	r2, #8
200011e2:	f001 ff0b 	bl	20002ffc <load_sprite>
	fire1Light = pointer2;
200011e6:	4b37      	ldr	r3, [pc, #220]	; (200012c4 <initSprites+0x120>)
200011e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200011ea:	601a      	str	r2, [r3, #0]

	sprite *pointer3 = &tempFire2Gray;
200011ec:	4b36      	ldr	r3, [pc, #216]	; (200012c8 <initSprites+0x124>)
200011ee:	623b      	str	r3, [r7, #32]
	load_sprite(pointer3, fire2_gray_bits, fire1_gray_width, fire1_gray_height);
200011f0:	4936      	ldr	r1, [pc, #216]	; (200012cc <initSprites+0x128>)
200011f2:	6a38      	ldr	r0, [r7, #32]
200011f4:	230c      	movs	r3, #12
200011f6:	2208      	movs	r2, #8
200011f8:	f001 ff00 	bl	20002ffc <load_sprite>
	fire2Gray = pointer3;
200011fc:	4b34      	ldr	r3, [pc, #208]	; (200012d0 <initSprites+0x12c>)
200011fe:	6a3a      	ldr	r2, [r7, #32]
20001200:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempFire2Light;
20001202:	4b34      	ldr	r3, [pc, #208]	; (200012d4 <initSprites+0x130>)
20001204:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer4, fire2_light_bits, fire1_gray_width, fire1_gray_height);
20001206:	4934      	ldr	r1, [pc, #208]	; (200012d8 <initSprites+0x134>)
20001208:	69f8      	ldr	r0, [r7, #28]
2000120a:	230c      	movs	r3, #12
2000120c:	2208      	movs	r2, #8
2000120e:	f001 fef5 	bl	20002ffc <load_sprite>
	fire2Light = pointer4;
20001212:	4b32      	ldr	r3, [pc, #200]	; (200012dc <initSprites+0x138>)
20001214:	69fa      	ldr	r2, [r7, #28]
20001216:	601a      	str	r2, [r3, #0]

	sprite *pointer5 = &tempFire3Gray;
20001218:	4b31      	ldr	r3, [pc, #196]	; (200012e0 <initSprites+0x13c>)
2000121a:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer5, fire3_gray_bits, fire1_gray_width, fire1_gray_height);
2000121c:	4931      	ldr	r1, [pc, #196]	; (200012e4 <initSprites+0x140>)
2000121e:	69b8      	ldr	r0, [r7, #24]
20001220:	230c      	movs	r3, #12
20001222:	2208      	movs	r2, #8
20001224:	f001 feea 	bl	20002ffc <load_sprite>
	fire3Gray = pointer5;
20001228:	4b2f      	ldr	r3, [pc, #188]	; (200012e8 <initSprites+0x144>)
2000122a:	69ba      	ldr	r2, [r7, #24]
2000122c:	601a      	str	r2, [r3, #0]

	sprite *pointer6 = &tempFire3Light;
2000122e:	4b2f      	ldr	r3, [pc, #188]	; (200012ec <initSprites+0x148>)
20001230:	617b      	str	r3, [r7, #20]
	load_sprite(pointer6, fire3_light_bits, fire1_gray_width, fire1_gray_height);
20001232:	492f      	ldr	r1, [pc, #188]	; (200012f0 <initSprites+0x14c>)
20001234:	6978      	ldr	r0, [r7, #20]
20001236:	230c      	movs	r3, #12
20001238:	2208      	movs	r2, #8
2000123a:	f001 fedf 	bl	20002ffc <load_sprite>
	fire3Light = pointer6;
2000123e:	4b2d      	ldr	r3, [pc, #180]	; (200012f4 <initSprites+0x150>)
20001240:	697a      	ldr	r2, [r7, #20]
20001242:	601a      	str	r2, [r3, #0]

	sprite *pointer7 = &tempFire4Gray;
20001244:	4b2c      	ldr	r3, [pc, #176]	; (200012f8 <initSprites+0x154>)
20001246:	613b      	str	r3, [r7, #16]
	load_sprite(pointer7, fire4_gray_bits, fire1_gray_width, fire1_gray_height);
20001248:	492c      	ldr	r1, [pc, #176]	; (200012fc <initSprites+0x158>)
2000124a:	6938      	ldr	r0, [r7, #16]
2000124c:	230c      	movs	r3, #12
2000124e:	2208      	movs	r2, #8
20001250:	f001 fed4 	bl	20002ffc <load_sprite>
	fire4Gray = pointer7;
20001254:	4b2a      	ldr	r3, [pc, #168]	; (20001300 <initSprites+0x15c>)
20001256:	693a      	ldr	r2, [r7, #16]
20001258:	601a      	str	r2, [r3, #0]

	sprite *pointer8 = &tempFire4Light;
2000125a:	4b2a      	ldr	r3, [pc, #168]	; (20001304 <initSprites+0x160>)
2000125c:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer8, fire4_light_bits, fire1_gray_width, fire1_gray_height);
2000125e:	492a      	ldr	r1, [pc, #168]	; (20001308 <initSprites+0x164>)
20001260:	68f8      	ldr	r0, [r7, #12]
20001262:	230c      	movs	r3, #12
20001264:	2208      	movs	r2, #8
20001266:	f001 fec9 	bl	20002ffc <load_sprite>
	fire4Light = pointer8;
2000126a:	4b28      	ldr	r3, [pc, #160]	; (2000130c <initSprites+0x168>)
2000126c:	68fa      	ldr	r2, [r7, #12]
2000126e:	601a      	str	r2, [r3, #0]

	sprite *pointer9 = &tempFire5Gray;
20001270:	4b27      	ldr	r3, [pc, #156]	; (20001310 <initSprites+0x16c>)
20001272:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer9, fire5_gray_bits, fire1_gray_width, fire1_gray_height);
20001274:	4927      	ldr	r1, [pc, #156]	; (20001314 <initSprites+0x170>)
20001276:	68b8      	ldr	r0, [r7, #8]
20001278:	230c      	movs	r3, #12
2000127a:	2208      	movs	r2, #8
2000127c:	f001 febe 	bl	20002ffc <load_sprite>
	fire5Gray = pointer9;
20001280:	4b25      	ldr	r3, [pc, #148]	; (20001318 <initSprites+0x174>)
20001282:	68ba      	ldr	r2, [r7, #8]
20001284:	601a      	str	r2, [r3, #0]

	sprite *pointer10 = &tempFire5Light;
20001286:	4b25      	ldr	r3, [pc, #148]	; (2000131c <initSprites+0x178>)
20001288:	607b      	str	r3, [r7, #4]
	load_sprite(pointer10, fire5_light_bits, fire1_gray_width, fire1_gray_height);
2000128a:	4925      	ldr	r1, [pc, #148]	; (20001320 <initSprites+0x17c>)
2000128c:	6878      	ldr	r0, [r7, #4]
2000128e:	230c      	movs	r3, #12
20001290:	2208      	movs	r2, #8
20001292:	f001 feb3 	bl	20002ffc <load_sprite>
	fire5Light = pointer10;
20001296:	4b23      	ldr	r3, [pc, #140]	; (20001324 <initSprites+0x180>)
20001298:	687a      	ldr	r2, [r7, #4]
2000129a:	601a      	str	r2, [r3, #0]
}
2000129c:	46c0      	nop			; (mov r8, r8)
2000129e:	46bd      	mov	sp, r7
200012a0:	b00c      	add	sp, #48	; 0x30
200012a2:	bd80      	pop	{r7, pc}
200012a4:	20003da0 	andcs	r3, r0, r0, lsr #27
200012a8:	20007848 	andcs	r7, r0, r8, asr #16
200012ac:	20003e98 	mulcs	r0, r8, lr
200012b0:	20003e8c 	andcs	r3, r0, ip, lsl #29
200012b4:	20007854 	andcs	r7, r0, r4, asr r8
200012b8:	20003eb0 			; <UNDEFINED> instruction: 0x20003eb0
200012bc:	20003e68 	andcs	r3, r0, r8, ror #28
200012c0:	20007860 	andcs	r7, r0, r0, ror #16
200012c4:	20003d68 	andcs	r3, r0, r8, ror #26
200012c8:	20003d94 	mulcs	r0, r4, sp
200012cc:	2000786c 	andcs	r7, r0, ip, ror #16
200012d0:	20003eac 	andcs	r3, r0, ip, lsr #29
200012d4:	20003e9c 	mulcs	r0, ip, lr
200012d8:	20007878 	andcs	r7, r0, r8, ror r8
200012dc:	20003e84 	andcs	r3, r0, r4, lsl #29
200012e0:	20003e4c 	andcs	r3, r0, ip, asr #28
200012e4:	20007884 	andcs	r7, r0, r4, lsl #17
200012e8:	20003d78 	andcs	r3, r0, r8, ror sp
200012ec:	20003d6c 	andcs	r3, r0, ip, ror #26
200012f0:	20007890 	mulcs	r0, r0, r8
200012f4:	20003ea8 	andcs	r3, r0, r8, lsr #29
200012f8:	20003d7c 	andcs	r3, r0, ip, ror sp
200012fc:	2000789c 	mulcs	r0, ip, r8
20001300:	20003e64 	andcs	r3, r0, r4, ror #28
20001304:	20003db8 			; <UNDEFINED> instruction: 0x20003db8
20001308:	200078a8 	andcs	r7, r0, r8, lsr #17
2000130c:	20003dd0 	ldrdcs	r3, [r0], -r0
20001310:	20003e40 	andcs	r3, r0, r0, asr #28
20001314:	200078b4 			; <UNDEFINED> instruction: 0x200078b4
20001318:	20003e80 	andcs	r3, r0, r0, lsl #29
2000131c:	20003e74 	andcs	r3, r0, r4, ror lr
20001320:	200078c0 	andcs	r7, r0, r0, asr #17
20001324:	20003e88 	andcs	r3, r0, r8, lsl #29

20001328 <init_fire>:
	
void init_fire( GameObject *fireObj ) {
20001328:	b590      	push	{r4, r7, lr}
2000132a:	b083      	sub	sp, #12
2000132c:	af00      	add	r7, sp, #0
2000132e:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20001330:	4b30      	ldr	r3, [pc, #192]	; (200013f4 <init_fire+0xcc>)
20001332:	681b      	ldr	r3, [r3, #0]
20001334:	2b00      	cmp	r3, #0
20001336:	d049      	beq.n	200013cc <init_fire+0xa4>
		initSprites();
20001338:	f7ff ff34 	bl	200011a4 <initSprites>
		firstTime = 0;			
2000133c:	4b2d      	ldr	r3, [pc, #180]	; (200013f4 <init_fire+0xcc>)
2000133e:	2200      	movs	r2, #0
20001340:	601a      	str	r2, [r3, #0]

		fireImages[0] = fire1Image;
20001342:	4b2d      	ldr	r3, [pc, #180]	; (200013f8 <init_fire+0xd0>)
20001344:	4a2d      	ldr	r2, [pc, #180]	; (200013fc <init_fire+0xd4>)
20001346:	ca13      	ldmia	r2!, {r0, r1, r4}
20001348:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[1] = fire2Image;
2000134a:	4b2b      	ldr	r3, [pc, #172]	; (200013f8 <init_fire+0xd0>)
2000134c:	4a2c      	ldr	r2, [pc, #176]	; (20001400 <init_fire+0xd8>)
2000134e:	330c      	adds	r3, #12
20001350:	ca13      	ldmia	r2!, {r0, r1, r4}
20001352:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[2] = fire3Image;
20001354:	4b28      	ldr	r3, [pc, #160]	; (200013f8 <init_fire+0xd0>)
20001356:	4a2b      	ldr	r2, [pc, #172]	; (20001404 <init_fire+0xdc>)
20001358:	3318      	adds	r3, #24
2000135a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000135c:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[3] = fire4Image;
2000135e:	4b26      	ldr	r3, [pc, #152]	; (200013f8 <init_fire+0xd0>)
20001360:	4a29      	ldr	r2, [pc, #164]	; (20001408 <init_fire+0xe0>)
20001362:	3324      	adds	r3, #36	; 0x24
20001364:	ca13      	ldmia	r2!, {r0, r1, r4}
20001366:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[4] = fire5Image;
20001368:	4b23      	ldr	r3, [pc, #140]	; (200013f8 <init_fire+0xd0>)
2000136a:	4a28      	ldr	r2, [pc, #160]	; (2000140c <init_fire+0xe4>)
2000136c:	3330      	adds	r3, #48	; 0x30
2000136e:	ca13      	ldmia	r2!, {r0, r1, r4}
20001370:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&fireImages[0], fire1Gray, fire1Light, fireBlack);
20001372:	4b27      	ldr	r3, [pc, #156]	; (20001410 <init_fire+0xe8>)
20001374:	6819      	ldr	r1, [r3, #0]
20001376:	4b27      	ldr	r3, [pc, #156]	; (20001414 <init_fire+0xec>)
20001378:	681a      	ldr	r2, [r3, #0]
2000137a:	4b27      	ldr	r3, [pc, #156]	; (20001418 <init_fire+0xf0>)
2000137c:	681b      	ldr	r3, [r3, #0]
2000137e:	481e      	ldr	r0, [pc, #120]	; (200013f8 <init_fire+0xd0>)
20001380:	f001 fe28 	bl	20002fd4 <load_image>
		load_image(&fireImages[1], fire2Gray, fire2Light, fireBlack);
20001384:	4b25      	ldr	r3, [pc, #148]	; (2000141c <init_fire+0xf4>)
20001386:	6819      	ldr	r1, [r3, #0]
20001388:	4b25      	ldr	r3, [pc, #148]	; (20001420 <init_fire+0xf8>)
2000138a:	681a      	ldr	r2, [r3, #0]
2000138c:	4b22      	ldr	r3, [pc, #136]	; (20001418 <init_fire+0xf0>)
2000138e:	681b      	ldr	r3, [r3, #0]
20001390:	4824      	ldr	r0, [pc, #144]	; (20001424 <init_fire+0xfc>)
20001392:	f001 fe1f 	bl	20002fd4 <load_image>
		load_image(&fireImages[2], fire3Gray, fire3Light, fireBlack);
20001396:	4b24      	ldr	r3, [pc, #144]	; (20001428 <init_fire+0x100>)
20001398:	6819      	ldr	r1, [r3, #0]
2000139a:	4b24      	ldr	r3, [pc, #144]	; (2000142c <init_fire+0x104>)
2000139c:	681a      	ldr	r2, [r3, #0]
2000139e:	4b1e      	ldr	r3, [pc, #120]	; (20001418 <init_fire+0xf0>)
200013a0:	681b      	ldr	r3, [r3, #0]
200013a2:	4823      	ldr	r0, [pc, #140]	; (20001430 <init_fire+0x108>)
200013a4:	f001 fe16 	bl	20002fd4 <load_image>
		load_image(&fireImages[3], fire4Gray, fire4Light, fireBlack);
200013a8:	4b22      	ldr	r3, [pc, #136]	; (20001434 <init_fire+0x10c>)
200013aa:	6819      	ldr	r1, [r3, #0]
200013ac:	4b22      	ldr	r3, [pc, #136]	; (20001438 <init_fire+0x110>)
200013ae:	681a      	ldr	r2, [r3, #0]
200013b0:	4b19      	ldr	r3, [pc, #100]	; (20001418 <init_fire+0xf0>)
200013b2:	681b      	ldr	r3, [r3, #0]
200013b4:	4821      	ldr	r0, [pc, #132]	; (2000143c <init_fire+0x114>)
200013b6:	f001 fe0d 	bl	20002fd4 <load_image>
		load_image(&fireImages[4], fire5Gray, fire5Light, fireBlack);
200013ba:	4b21      	ldr	r3, [pc, #132]	; (20001440 <init_fire+0x118>)
200013bc:	6819      	ldr	r1, [r3, #0]
200013be:	4b21      	ldr	r3, [pc, #132]	; (20001444 <init_fire+0x11c>)
200013c0:	681a      	ldr	r2, [r3, #0]
200013c2:	4b15      	ldr	r3, [pc, #84]	; (20001418 <init_fire+0xf0>)
200013c4:	681b      	ldr	r3, [r3, #0]
200013c6:	4820      	ldr	r0, [pc, #128]	; (20001448 <init_fire+0x120>)
200013c8:	f001 fe04 	bl	20002fd4 <load_image>
	}
	
	fireObj->images = fireImages;
200013cc:	687b      	ldr	r3, [r7, #4]
200013ce:	4a0a      	ldr	r2, [pc, #40]	; (200013f8 <init_fire+0xd0>)
200013d0:	601a      	str	r2, [r3, #0]

	fireObj->current_frame = 0;
200013d2:	687b      	ldr	r3, [r7, #4]
200013d4:	2200      	movs	r2, #0
200013d6:	615a      	str	r2, [r3, #20]
	fireObj->n_frames = 5;
200013d8:	687b      	ldr	r3, [r7, #4]
200013da:	2205      	movs	r2, #5
200013dc:	619a      	str	r2, [r3, #24]
	fireObj->animation_speed = 1;
200013de:	687b      	ldr	r3, [r7, #4]
200013e0:	2201      	movs	r2, #1
200013e2:	61da      	str	r2, [r3, #28]
	fireObj->animation_counter = 0;
200013e4:	687b      	ldr	r3, [r7, #4]
200013e6:	2200      	movs	r2, #0
200013e8:	621a      	str	r2, [r3, #32]
}
200013ea:	46c0      	nop			; (mov r8, r8)
200013ec:	46bd      	mov	sp, r7
200013ee:	b003      	add	sp, #12
200013f0:	bd90      	pop	{r4, r7, pc}
200013f2:	46c0      	nop			; (mov r8, r8)
200013f4:	200078cc 	andcs	r7, r0, ip, asr #17
200013f8:	20003e04 	andcs	r3, r0, r4, lsl #28
200013fc:	20003dc4 	andcs	r3, r0, r4, asr #27
20001400:	20003d88 	andcs	r3, r0, r8, lsl #27
20001404:	20003dac 	andcs	r3, r0, ip, lsr #27
20001408:	20003e58 	andcs	r3, r0, r8, asr lr
2000140c:	20003df8 	strdcs	r3, [r0], -r8
20001410:	20003eb0 			; <UNDEFINED> instruction: 0x20003eb0
20001414:	20003d68 	andcs	r3, r0, r8, ror #26
20001418:	20003e98 	mulcs	r0, r8, lr
2000141c:	20003eac 	andcs	r3, r0, ip, lsr #29
20001420:	20003e84 	andcs	r3, r0, r4, lsl #29
20001424:	20003e10 	andcs	r3, r0, r0, lsl lr
20001428:	20003d78 	andcs	r3, r0, r8, ror sp
2000142c:	20003ea8 	andcs	r3, r0, r8, lsr #29
20001430:	20003e1c 	andcs	r3, r0, ip, lsl lr
20001434:	20003e64 	andcs	r3, r0, r4, ror #28
20001438:	20003dd0 	ldrdcs	r3, [r0], -r0
2000143c:	20003e28 	andcs	r3, r0, r8, lsr #28
20001440:	20003e80 	andcs	r3, r0, r0, lsl #29
20001444:	20003e88 	andcs	r3, r0, r8, lsl #29
20001448:	20003e34 	andcs	r3, r0, r4, lsr lr

2000144c <playerUpdate>:
#include "gpio.h"
#include "controls.h"
#include "gameobject.h"
#include "player.h"

void playerUpdate(GameObject *this) {
2000144c:	b580      	push	{r7, lr}
2000144e:	b082      	sub	sp, #8
20001450:	af00      	add	r7, sp, #0
20001452:	6078      	str	r0, [r7, #4]
	
	// Animate
	this->animation_counter++;
20001454:	687b      	ldr	r3, [r7, #4]
20001456:	6a1b      	ldr	r3, [r3, #32]
20001458:	1c5a      	adds	r2, r3, #1
2000145a:	687b      	ldr	r3, [r7, #4]
2000145c:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
2000145e:	687b      	ldr	r3, [r7, #4]
20001460:	6a1a      	ldr	r2, [r3, #32]
20001462:	687b      	ldr	r3, [r7, #4]
20001464:	69db      	ldr	r3, [r3, #28]
20001466:	429a      	cmp	r2, r3
20001468:	d10f      	bne.n	2000148a <playerUpdate+0x3e>
		this->animation_counter = 0;
2000146a:	687b      	ldr	r3, [r7, #4]
2000146c:	2200      	movs	r2, #0
2000146e:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
20001470:	687b      	ldr	r3, [r7, #4]
20001472:	695b      	ldr	r3, [r3, #20]
20001474:	1c5a      	adds	r2, r3, #1
20001476:	687b      	ldr	r3, [r7, #4]
20001478:	699b      	ldr	r3, [r3, #24]
2000147a:	0019      	movs	r1, r3
2000147c:	0010      	movs	r0, r2
2000147e:	f002 fb23 	bl	20003ac8 <__aeabi_idivmod>
20001482:	000b      	movs	r3, r1
20001484:	001a      	movs	r2, r3
20001486:	687b      	ldr	r3, [r7, #4]
20001488:	615a      	str	r2, [r3, #20]
	static xSpeed = 0;
	static ySpeed = 0;
	
	// Y position changes
	
	if (lastJumpValue != read_DIL_single(JUMP_TRIGGER) && (this->yPos == LIMIT_DOWN || this->yPos == PLATFORM_Y - PLAYER_HEIGHT)){
2000148a:	2005      	movs	r0, #5
2000148c:	f001 fde6 	bl	2000305c <read_DIL_single>
20001490:	0002      	movs	r2, r0
20001492:	4b5e      	ldr	r3, [pc, #376]	; (2000160c <playerUpdate+0x1c0>)
20001494:	681b      	ldr	r3, [r3, #0]
20001496:	429a      	cmp	r2, r3
20001498:	d00b      	beq.n	200014b2 <playerUpdate+0x66>
2000149a:	687b      	ldr	r3, [r7, #4]
2000149c:	689b      	ldr	r3, [r3, #8]
2000149e:	2b27      	cmp	r3, #39	; 0x27
200014a0:	d003      	beq.n	200014aa <playerUpdate+0x5e>
200014a2:	687b      	ldr	r3, [r7, #4]
200014a4:	689b      	ldr	r3, [r3, #8]
200014a6:	2b05      	cmp	r3, #5
200014a8:	d103      	bne.n	200014b2 <playerUpdate+0x66>
		ySpeed = -(SPEED_ADD_Y);
200014aa:	4b59      	ldr	r3, [pc, #356]	; (20001610 <playerUpdate+0x1c4>)
200014ac:	2204      	movs	r2, #4
200014ae:	4252      	negs	r2, r2
200014b0:	601a      	str	r2, [r3, #0]
	}
	
	if (this->yPos + ySpeed > LIMIT_DOWN){
200014b2:	687b      	ldr	r3, [r7, #4]
200014b4:	689a      	ldr	r2, [r3, #8]
200014b6:	4b56      	ldr	r3, [pc, #344]	; (20001610 <playerUpdate+0x1c4>)
200014b8:	681b      	ldr	r3, [r3, #0]
200014ba:	18d3      	adds	r3, r2, r3
200014bc:	2b27      	cmp	r3, #39	; 0x27
200014be:	dd06      	ble.n	200014ce <playerUpdate+0x82>
		this->yPos = LIMIT_DOWN;
200014c0:	687b      	ldr	r3, [r7, #4]
200014c2:	2227      	movs	r2, #39	; 0x27
200014c4:	609a      	str	r2, [r3, #8]
		ySpeed = 0;
200014c6:	4b52      	ldr	r3, [pc, #328]	; (20001610 <playerUpdate+0x1c4>)
200014c8:	2200      	movs	r2, #0
200014ca:	601a      	str	r2, [r3, #0]
200014cc:	e020      	b.n	20001510 <playerUpdate+0xc4>
	}
	else if (this->yPos + ySpeed > PLATFORM_Y - PLAYER_HEIGHT && this->yPos + ySpeed < PLATFORM_Y - PLAYER_HEIGHT + 2*SPEED_ADD_Y){
200014ce:	687b      	ldr	r3, [r7, #4]
200014d0:	689a      	ldr	r2, [r3, #8]
200014d2:	4b4f      	ldr	r3, [pc, #316]	; (20001610 <playerUpdate+0x1c4>)
200014d4:	681b      	ldr	r3, [r3, #0]
200014d6:	18d3      	adds	r3, r2, r3
200014d8:	2b05      	cmp	r3, #5
200014da:	dd0d      	ble.n	200014f8 <playerUpdate+0xac>
200014dc:	687b      	ldr	r3, [r7, #4]
200014de:	689a      	ldr	r2, [r3, #8]
200014e0:	4b4b      	ldr	r3, [pc, #300]	; (20001610 <playerUpdate+0x1c4>)
200014e2:	681b      	ldr	r3, [r3, #0]
200014e4:	18d3      	adds	r3, r2, r3
200014e6:	2b0c      	cmp	r3, #12
200014e8:	dc06      	bgt.n	200014f8 <playerUpdate+0xac>
		this->yPos = PLATFORM_Y - PLAYER_HEIGHT;
200014ea:	687b      	ldr	r3, [r7, #4]
200014ec:	2205      	movs	r2, #5
200014ee:	609a      	str	r2, [r3, #8]
		ySpeed = 0;
200014f0:	4b47      	ldr	r3, [pc, #284]	; (20001610 <playerUpdate+0x1c4>)
200014f2:	2200      	movs	r2, #0
200014f4:	601a      	str	r2, [r3, #0]
200014f6:	e00b      	b.n	20001510 <playerUpdate+0xc4>
	}
	else{
		this->yPos+=ySpeed;
200014f8:	687b      	ldr	r3, [r7, #4]
200014fa:	689a      	ldr	r2, [r3, #8]
200014fc:	4b44      	ldr	r3, [pc, #272]	; (20001610 <playerUpdate+0x1c4>)
200014fe:	681b      	ldr	r3, [r3, #0]
20001500:	18d2      	adds	r2, r2, r3
20001502:	687b      	ldr	r3, [r7, #4]
20001504:	609a      	str	r2, [r3, #8]
		ySpeed++;
20001506:	4b42      	ldr	r3, [pc, #264]	; (20001610 <playerUpdate+0x1c4>)
20001508:	681b      	ldr	r3, [r3, #0]
2000150a:	1c5a      	adds	r2, r3, #1
2000150c:	4b40      	ldr	r3, [pc, #256]	; (20001610 <playerUpdate+0x1c4>)
2000150e:	601a      	str	r2, [r3, #0]
	}

	// X position changes
	
	if (!lastRightValue && read_DIL_single(RIGHT_TRIGGER)){ 
20001510:	4b40      	ldr	r3, [pc, #256]	; (20001614 <playerUpdate+0x1c8>)
20001512:	681b      	ldr	r3, [r3, #0]
20001514:	2b00      	cmp	r3, #0
20001516:	d109      	bne.n	2000152c <playerUpdate+0xe0>
20001518:	2000      	movs	r0, #0
2000151a:	f001 fd9f 	bl	2000305c <read_DIL_single>
2000151e:	1e03      	subs	r3, r0, #0
20001520:	d004      	beq.n	2000152c <playerUpdate+0xe0>
		xSpeed += SPEED_ADD_X;
20001522:	4b3d      	ldr	r3, [pc, #244]	; (20001618 <playerUpdate+0x1cc>)
20001524:	681b      	ldr	r3, [r3, #0]
20001526:	1cda      	adds	r2, r3, #3
20001528:	4b3b      	ldr	r3, [pc, #236]	; (20001618 <playerUpdate+0x1cc>)
2000152a:	601a      	str	r2, [r3, #0]
	}
	
	if (!lastLeftValue && read_DIL_single(LEFT_TRIGGER)){
2000152c:	4b3b      	ldr	r3, [pc, #236]	; (2000161c <playerUpdate+0x1d0>)
2000152e:	681b      	ldr	r3, [r3, #0]
20001530:	2b00      	cmp	r3, #0
20001532:	d109      	bne.n	20001548 <playerUpdate+0xfc>
20001534:	2007      	movs	r0, #7
20001536:	f001 fd91 	bl	2000305c <read_DIL_single>
2000153a:	1e03      	subs	r3, r0, #0
2000153c:	d004      	beq.n	20001548 <playerUpdate+0xfc>
		xSpeed -= SPEED_ADD_X;
2000153e:	4b36      	ldr	r3, [pc, #216]	; (20001618 <playerUpdate+0x1cc>)
20001540:	681b      	ldr	r3, [r3, #0]
20001542:	1eda      	subs	r2, r3, #3
20001544:	4b34      	ldr	r3, [pc, #208]	; (20001618 <playerUpdate+0x1cc>)
20001546:	601a      	str	r2, [r3, #0]
	}
	
	if (((!lastLeftValue && read_DIL_single(LEFT_TRIGGER)) || (!lastRightValue && read_DIL_single(RIGHT_TRIGGER))) && this->yPos != PLATFORM_Y - PLAYER_HEIGHT && this->yPos != LIMIT_DOWN){
20001548:	4b34      	ldr	r3, [pc, #208]	; (2000161c <playerUpdate+0x1d0>)
2000154a:	681b      	ldr	r3, [r3, #0]
2000154c:	2b00      	cmp	r3, #0
2000154e:	d104      	bne.n	2000155a <playerUpdate+0x10e>
20001550:	2007      	movs	r0, #7
20001552:	f001 fd83 	bl	2000305c <read_DIL_single>
20001556:	1e03      	subs	r3, r0, #0
20001558:	d108      	bne.n	2000156c <playerUpdate+0x120>
2000155a:	4b2e      	ldr	r3, [pc, #184]	; (20001614 <playerUpdate+0x1c8>)
2000155c:	681b      	ldr	r3, [r3, #0]
2000155e:	2b00      	cmp	r3, #0
20001560:	d111      	bne.n	20001586 <playerUpdate+0x13a>
20001562:	2000      	movs	r0, #0
20001564:	f001 fd7a 	bl	2000305c <read_DIL_single>
20001568:	1e03      	subs	r3, r0, #0
2000156a:	d00c      	beq.n	20001586 <playerUpdate+0x13a>
2000156c:	687b      	ldr	r3, [r7, #4]
2000156e:	689b      	ldr	r3, [r3, #8]
20001570:	2b05      	cmp	r3, #5
20001572:	d008      	beq.n	20001586 <playerUpdate+0x13a>
20001574:	687b      	ldr	r3, [r7, #4]
20001576:	689b      	ldr	r3, [r3, #8]
20001578:	2b27      	cmp	r3, #39	; 0x27
2000157a:	d004      	beq.n	20001586 <playerUpdate+0x13a>
		xSpeed *=2;
2000157c:	4b26      	ldr	r3, [pc, #152]	; (20001618 <playerUpdate+0x1cc>)
2000157e:	681b      	ldr	r3, [r3, #0]
20001580:	005a      	lsls	r2, r3, #1
20001582:	4b25      	ldr	r3, [pc, #148]	; (20001618 <playerUpdate+0x1cc>)
20001584:	601a      	str	r2, [r3, #0]
	}
	
	if (this->xPos + xSpeed > LIMIT_RIGHT || this->xPos + xSpeed < LIMIT_LEFT){
20001586:	687b      	ldr	r3, [r7, #4]
20001588:	685a      	ldr	r2, [r3, #4]
2000158a:	4b23      	ldr	r3, [pc, #140]	; (20001618 <playerUpdate+0x1cc>)
2000158c:	681b      	ldr	r3, [r3, #0]
2000158e:	18d3      	adds	r3, r2, r3
20001590:	2b6e      	cmp	r3, #110	; 0x6e
20001592:	dc06      	bgt.n	200015a2 <playerUpdate+0x156>
20001594:	687b      	ldr	r3, [r7, #4]
20001596:	685a      	ldr	r2, [r3, #4]
20001598:	4b1f      	ldr	r3, [pc, #124]	; (20001618 <playerUpdate+0x1cc>)
2000159a:	681b      	ldr	r3, [r3, #0]
2000159c:	18d3      	adds	r3, r2, r3
2000159e:	2b00      	cmp	r3, #0
200015a0:	da04      	bge.n	200015ac <playerUpdate+0x160>
		xSpeed *= -1;	
200015a2:	4b1d      	ldr	r3, [pc, #116]	; (20001618 <playerUpdate+0x1cc>)
200015a4:	681b      	ldr	r3, [r3, #0]
200015a6:	425a      	negs	r2, r3
200015a8:	4b1b      	ldr	r3, [pc, #108]	; (20001618 <playerUpdate+0x1cc>)
200015aa:	601a      	str	r2, [r3, #0]
	}
	
	this->xPos += xSpeed;	
200015ac:	687b      	ldr	r3, [r7, #4]
200015ae:	685a      	ldr	r2, [r3, #4]
200015b0:	4b19      	ldr	r3, [pc, #100]	; (20001618 <playerUpdate+0x1cc>)
200015b2:	681b      	ldr	r3, [r3, #0]
200015b4:	18d2      	adds	r2, r2, r3
200015b6:	687b      	ldr	r3, [r7, #4]
200015b8:	605a      	str	r2, [r3, #4]
	
	if (xSpeed > 0){
200015ba:	4b17      	ldr	r3, [pc, #92]	; (20001618 <playerUpdate+0x1cc>)
200015bc:	681b      	ldr	r3, [r3, #0]
200015be:	2b00      	cmp	r3, #0
200015c0:	dd05      	ble.n	200015ce <playerUpdate+0x182>
		xSpeed--;
200015c2:	4b15      	ldr	r3, [pc, #84]	; (20001618 <playerUpdate+0x1cc>)
200015c4:	681b      	ldr	r3, [r3, #0]
200015c6:	1e5a      	subs	r2, r3, #1
200015c8:	4b13      	ldr	r3, [pc, #76]	; (20001618 <playerUpdate+0x1cc>)
200015ca:	601a      	str	r2, [r3, #0]
200015cc:	e008      	b.n	200015e0 <playerUpdate+0x194>
	}
	else if (xSpeed < 0){
200015ce:	4b12      	ldr	r3, [pc, #72]	; (20001618 <playerUpdate+0x1cc>)
200015d0:	681b      	ldr	r3, [r3, #0]
200015d2:	2b00      	cmp	r3, #0
200015d4:	da04      	bge.n	200015e0 <playerUpdate+0x194>
		xSpeed++;
200015d6:	4b10      	ldr	r3, [pc, #64]	; (20001618 <playerUpdate+0x1cc>)
200015d8:	681b      	ldr	r3, [r3, #0]
200015da:	1c5a      	adds	r2, r3, #1
200015dc:	4b0e      	ldr	r3, [pc, #56]	; (20001618 <playerUpdate+0x1cc>)
200015de:	601a      	str	r2, [r3, #0]
	}
	
	// Prepare values
	lastRightValue = read_DIL_single(RIGHT_TRIGGER);
200015e0:	2000      	movs	r0, #0
200015e2:	f001 fd3b 	bl	2000305c <read_DIL_single>
200015e6:	0002      	movs	r2, r0
200015e8:	4b0a      	ldr	r3, [pc, #40]	; (20001614 <playerUpdate+0x1c8>)
200015ea:	601a      	str	r2, [r3, #0]
	lastLeftValue = read_DIL_single(LEFT_TRIGGER);
200015ec:	2007      	movs	r0, #7
200015ee:	f001 fd35 	bl	2000305c <read_DIL_single>
200015f2:	0002      	movs	r2, r0
200015f4:	4b09      	ldr	r3, [pc, #36]	; (2000161c <playerUpdate+0x1d0>)
200015f6:	601a      	str	r2, [r3, #0]
	lastJumpValue = read_DIL_single(JUMP_TRIGGER);
200015f8:	2005      	movs	r0, #5
200015fa:	f001 fd2f 	bl	2000305c <read_DIL_single>
200015fe:	0002      	movs	r2, r0
20001600:	4b02      	ldr	r3, [pc, #8]	; (2000160c <playerUpdate+0x1c0>)
20001602:	601a      	str	r2, [r3, #0]
	
20001604:	46c0      	nop			; (mov r8, r8)
20001606:	46bd      	mov	sp, r7
20001608:	b002      	add	sp, #8
2000160a:	bd80      	pop	{r7, pc}
2000160c:	20003ae4 	andcs	r3, r0, r4, ror #21
20001610:	20003ae8 	andcs	r3, r0, r8, ror #21
20001614:	20003aec 	andcs	r3, r0, ip, ror #21
20001618:	20003af0 	strdcs	r3, [r0], -r0
2000161c:	20003af4 	strdcs	r3, [r0], -r4

20001620 <initSprites>:
Image bird5Image;
Image bird6Image;
//Image bird7Image;
//Image bird8Image;
Image birdImages[6];
static void initSprites( void ) {	
20001620:	b580      	push	{r7, lr}
20001622:	b090      	sub	sp, #64	; 0x40
20001624:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempBirdLight;
20001626:	4b54      	ldr	r3, [pc, #336]	; (20001778 <initSprites+0x158>)
20001628:	63fb      	str	r3, [r7, #60]	; 0x3c
	load_sprite(pointer11, bird1_light_bits, bird1_black_width, bird1_black_height);
2000162a:	4954      	ldr	r1, [pc, #336]	; (2000177c <initSprites+0x15c>)
2000162c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
2000162e:	2319      	movs	r3, #25
20001630:	2219      	movs	r2, #25
20001632:	f001 fce3 	bl	20002ffc <load_sprite>
	bird1Light = pointer11;
20001636:	4b52      	ldr	r3, [pc, #328]	; (20001780 <initSprites+0x160>)
20001638:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
2000163a:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempBirdGray;
2000163c:	4b51      	ldr	r3, [pc, #324]	; (20001784 <initSprites+0x164>)
2000163e:	63bb      	str	r3, [r7, #56]	; 0x38
	load_sprite(pointer12, bird1_gray_bits, bird1_black_width, bird1_black_height);
20001640:	4951      	ldr	r1, [pc, #324]	; (20001788 <initSprites+0x168>)
20001642:	6bb8      	ldr	r0, [r7, #56]	; 0x38
20001644:	2319      	movs	r3, #25
20001646:	2219      	movs	r2, #25
20001648:	f001 fcd8 	bl	20002ffc <load_sprite>
	bird1Gray = pointer12;
2000164c:	4b4f      	ldr	r3, [pc, #316]	; (2000178c <initSprites+0x16c>)
2000164e:	6bba      	ldr	r2, [r7, #56]	; 0x38
20001650:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempBirdBlack;
20001652:	4b4f      	ldr	r3, [pc, #316]	; (20001790 <initSprites+0x170>)
20001654:	637b      	str	r3, [r7, #52]	; 0x34
	load_sprite(pointer13, bird1_black_bits, bird1_black_width, bird1_black_height);
20001656:	494f      	ldr	r1, [pc, #316]	; (20001794 <initSprites+0x174>)
20001658:	6b78      	ldr	r0, [r7, #52]	; 0x34
2000165a:	2319      	movs	r3, #25
2000165c:	2219      	movs	r2, #25
2000165e:	f001 fccd 	bl	20002ffc <load_sprite>
	bird1Black = pointer13;	
20001662:	4b4d      	ldr	r3, [pc, #308]	; (20001798 <initSprites+0x178>)
20001664:	6b7a      	ldr	r2, [r7, #52]	; 0x34
20001666:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempBird2Light;
20001668:	4b4c      	ldr	r3, [pc, #304]	; (2000179c <initSprites+0x17c>)
2000166a:	633b      	str	r3, [r7, #48]	; 0x30
	load_sprite(pointer14, bird2_light_bits, bird2_black_width, bird2_black_height);
2000166c:	494c      	ldr	r1, [pc, #304]	; (200017a0 <initSprites+0x180>)
2000166e:	6b38      	ldr	r0, [r7, #48]	; 0x30
20001670:	2319      	movs	r3, #25
20001672:	2219      	movs	r2, #25
20001674:	f001 fcc2 	bl	20002ffc <load_sprite>
	bird2Light = pointer14;
20001678:	4b4a      	ldr	r3, [pc, #296]	; (200017a4 <initSprites+0x184>)
2000167a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
2000167c:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempBird2Gray;
2000167e:	4b4a      	ldr	r3, [pc, #296]	; (200017a8 <initSprites+0x188>)
20001680:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer15, bird2_gray_bits, bird2_black_width, bird2_black_height);
20001682:	494a      	ldr	r1, [pc, #296]	; (200017ac <initSprites+0x18c>)
20001684:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20001686:	2319      	movs	r3, #25
20001688:	2219      	movs	r2, #25
2000168a:	f001 fcb7 	bl	20002ffc <load_sprite>
	bird2Gray = pointer15;
2000168e:	4b48      	ldr	r3, [pc, #288]	; (200017b0 <initSprites+0x190>)
20001690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20001692:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempBird2Black;
20001694:	4b47      	ldr	r3, [pc, #284]	; (200017b4 <initSprites+0x194>)
20001696:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer16, bird2_black_bits, bird2_black_width, bird2_black_height);
20001698:	4947      	ldr	r1, [pc, #284]	; (200017b8 <initSprites+0x198>)
2000169a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
2000169c:	2319      	movs	r3, #25
2000169e:	2219      	movs	r2, #25
200016a0:	f001 fcac 	bl	20002ffc <load_sprite>
	bird2Black = pointer16;
200016a4:	4b45      	ldr	r3, [pc, #276]	; (200017bc <initSprites+0x19c>)
200016a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
200016a8:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempBird3Light;
200016aa:	4b45      	ldr	r3, [pc, #276]	; (200017c0 <initSprites+0x1a0>)
200016ac:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(finalPointer, bird3_light_bits, bird3_black_width, bird3_black_height);
200016ae:	4945      	ldr	r1, [pc, #276]	; (200017c4 <initSprites+0x1a4>)
200016b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
200016b2:	2319      	movs	r3, #25
200016b4:	2219      	movs	r2, #25
200016b6:	f001 fca1 	bl	20002ffc <load_sprite>
	bird3Light = finalPointer;
200016ba:	4b43      	ldr	r3, [pc, #268]	; (200017c8 <initSprites+0x1a8>)
200016bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200016be:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempBird3Gray;
200016c0:	4b42      	ldr	r3, [pc, #264]	; (200017cc <initSprites+0x1ac>)
200016c2:	623b      	str	r3, [r7, #32]
	load_sprite(pointer17, bird3_gray_bits, bird3_black_width, bird3_black_height);
200016c4:	4942      	ldr	r1, [pc, #264]	; (200017d0 <initSprites+0x1b0>)
200016c6:	6a38      	ldr	r0, [r7, #32]
200016c8:	2319      	movs	r3, #25
200016ca:	2219      	movs	r2, #25
200016cc:	f001 fc96 	bl	20002ffc <load_sprite>
	bird3Gray = pointer17;
200016d0:	4b40      	ldr	r3, [pc, #256]	; (200017d4 <initSprites+0x1b4>)
200016d2:	6a3a      	ldr	r2, [r7, #32]
200016d4:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempBird3Black;
200016d6:	4b40      	ldr	r3, [pc, #256]	; (200017d8 <initSprites+0x1b8>)
200016d8:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer18, bird3_black_bits, bird3_black_width, bird3_black_height);
200016da:	4940      	ldr	r1, [pc, #256]	; (200017dc <initSprites+0x1bc>)
200016dc:	69f8      	ldr	r0, [r7, #28]
200016de:	2319      	movs	r3, #25
200016e0:	2219      	movs	r2, #25
200016e2:	f001 fc8b 	bl	20002ffc <load_sprite>
	bird3Black = pointer18;	
200016e6:	4b3e      	ldr	r3, [pc, #248]	; (200017e0 <initSprites+0x1c0>)
200016e8:	69fa      	ldr	r2, [r7, #28]
200016ea:	601a      	str	r2, [r3, #0]
	
	sprite *pointer19 = &tempBird4Light;
200016ec:	4b3d      	ldr	r3, [pc, #244]	; (200017e4 <initSprites+0x1c4>)
200016ee:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer19, bird4_light_bits, bird4_black_width, bird4_black_height);
200016f0:	493d      	ldr	r1, [pc, #244]	; (200017e8 <initSprites+0x1c8>)
200016f2:	69b8      	ldr	r0, [r7, #24]
200016f4:	2319      	movs	r3, #25
200016f6:	2219      	movs	r2, #25
200016f8:	f001 fc80 	bl	20002ffc <load_sprite>
	bird4Light = pointer19;
200016fc:	4b3b      	ldr	r3, [pc, #236]	; (200017ec <initSprites+0x1cc>)
200016fe:	69ba      	ldr	r2, [r7, #24]
20001700:	601a      	str	r2, [r3, #0]
	sprite *pointer20 = &tempBird4Gray;
20001702:	4b3b      	ldr	r3, [pc, #236]	; (200017f0 <initSprites+0x1d0>)
20001704:	617b      	str	r3, [r7, #20]
	load_sprite(pointer20, bird4_gray_bits, bird4_black_width, bird4_black_height);
20001706:	493b      	ldr	r1, [pc, #236]	; (200017f4 <initSprites+0x1d4>)
20001708:	6978      	ldr	r0, [r7, #20]
2000170a:	2319      	movs	r3, #25
2000170c:	2219      	movs	r2, #25
2000170e:	f001 fc75 	bl	20002ffc <load_sprite>
	bird4Gray = pointer20;
20001712:	4b39      	ldr	r3, [pc, #228]	; (200017f8 <initSprites+0x1d8>)
20001714:	697a      	ldr	r2, [r7, #20]
20001716:	601a      	str	r2, [r3, #0]
	sprite *pointer21 = &tempBird4Black;
20001718:	4b38      	ldr	r3, [pc, #224]	; (200017fc <initSprites+0x1dc>)
2000171a:	613b      	str	r3, [r7, #16]
	load_sprite(pointer21, bird4_black_bits, bird4_black_width, bird4_black_height);
2000171c:	4938      	ldr	r1, [pc, #224]	; (20001800 <initSprites+0x1e0>)
2000171e:	6938      	ldr	r0, [r7, #16]
20001720:	2319      	movs	r3, #25
20001722:	2219      	movs	r2, #25
20001724:	f001 fc6a 	bl	20002ffc <load_sprite>
	bird4Black = pointer21;	
20001728:	4b36      	ldr	r3, [pc, #216]	; (20001804 <initSprites+0x1e4>)
2000172a:	693a      	ldr	r2, [r7, #16]
2000172c:	601a      	str	r2, [r3, #0]
	
	sprite *pointer22 = &tempBird5Light;
2000172e:	4b36      	ldr	r3, [pc, #216]	; (20001808 <initSprites+0x1e8>)
20001730:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer22, bird5_light_bits, bird5_black_width, bird5_black_height);
20001732:	4936      	ldr	r1, [pc, #216]	; (2000180c <initSprites+0x1ec>)
20001734:	68f8      	ldr	r0, [r7, #12]
20001736:	2319      	movs	r3, #25
20001738:	2219      	movs	r2, #25
2000173a:	f001 fc5f 	bl	20002ffc <load_sprite>
	bird5Light = pointer22;
2000173e:	4b34      	ldr	r3, [pc, #208]	; (20001810 <initSprites+0x1f0>)
20001740:	68fa      	ldr	r2, [r7, #12]
20001742:	601a      	str	r2, [r3, #0]
	sprite *pointer23 = &tempBird5Gray;
20001744:	4b33      	ldr	r3, [pc, #204]	; (20001814 <initSprites+0x1f4>)
20001746:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer23, bird5_gray_bits, bird5_black_width, bird5_black_height);
20001748:	4933      	ldr	r1, [pc, #204]	; (20001818 <initSprites+0x1f8>)
2000174a:	68b8      	ldr	r0, [r7, #8]
2000174c:	2319      	movs	r3, #25
2000174e:	2219      	movs	r2, #25
20001750:	f001 fc54 	bl	20002ffc <load_sprite>
	bird5Gray = pointer23;
20001754:	4b31      	ldr	r3, [pc, #196]	; (2000181c <initSprites+0x1fc>)
20001756:	68ba      	ldr	r2, [r7, #8]
20001758:	601a      	str	r2, [r3, #0]
	sprite *pointer24 = &tempBird5Black;
2000175a:	4b31      	ldr	r3, [pc, #196]	; (20001820 <initSprites+0x200>)
2000175c:	607b      	str	r3, [r7, #4]
	load_sprite(pointer24, bird5_black_bits, bird5_black_width, bird5_black_height);
2000175e:	4931      	ldr	r1, [pc, #196]	; (20001824 <initSprites+0x204>)
20001760:	6878      	ldr	r0, [r7, #4]
20001762:	2319      	movs	r3, #25
20001764:	2219      	movs	r2, #25
20001766:	f001 fc49 	bl	20002ffc <load_sprite>
	bird5Black = pointer24;
2000176a:	4b2f      	ldr	r3, [pc, #188]	; (20001828 <initSprites+0x208>)
2000176c:	687a      	ldr	r2, [r7, #4]
2000176e:	601a      	str	r2, [r3, #0]
}
20001770:	46c0      	nop			; (mov r8, r8)
20001772:	46bd      	mov	sp, r7
20001774:	b010      	add	sp, #64	; 0x40
20001776:	bd80      	pop	{r7, pc}
20001778:	20003fa4 	andcs	r3, r0, r4, lsr #31
2000177c:	20007998 	mulcs	r0, r8, r9
20001780:	20003fb0 			; <UNDEFINED> instruction: 0x20003fb0
20001784:	20003f40 	andcs	r3, r0, r0, asr #30
20001788:	20007934 	andcs	r7, r0, r4, lsr r9
2000178c:	20003eb8 			; <UNDEFINED> instruction: 0x20003eb8
20001790:	20003f30 	andcs	r3, r0, r0, lsr pc
20001794:	200078d0 	ldrdcs	r7, [r0], -r0
20001798:	20003f20 	andcs	r3, r0, r0, lsr #30
2000179c:	20003fb4 			; <UNDEFINED> instruction: 0x20003fb4
200017a0:	20007ac4 	andcs	r7, r0, r4, asr #21
200017a4:	20004054 	andcs	r4, r0, r4, asr r0
200017a8:	20003f5c 	andcs	r3, r0, ip, asr pc
200017ac:	20007a60 	andcs	r7, r0, r0, ror #20
200017b0:	20003fa0 	andcs	r3, r0, r0, lsr #31
200017b4:	2000403c 	andcs	r4, r0, ip, lsr r0
200017b8:	200079fc 	strdcs	r7, [r0], -ip
200017bc:	20003f1c 	andcs	r3, r0, ip, lsl pc
200017c0:	20003fd8 	ldrdcs	r3, [r0], -r8
200017c4:	20007bf0 	strdcs	r7, [r0], -r0
200017c8:	20003f68 	andcs	r3, r0, r8, ror #30
200017cc:	20003fe4 	andcs	r3, r0, r4, ror #31
200017d0:	20007b8c 	andcs	r7, r0, ip, lsl #23
200017d4:	20003f3c 	andcs	r3, r0, ip, lsr pc
200017d8:	20003f94 	mulcs	r0, r4, pc	; <UNPREDICTABLE>
200017dc:	20007b28 	andcs	r7, r0, r8, lsr #22
200017e0:	20003f14 	andcs	r3, r0, r4, lsl pc
200017e4:	20003fcc 	andcs	r3, r0, ip, asr #31
200017e8:	20007d1c 	andcs	r7, r0, ip, lsl sp
200017ec:	20003eb4 			; <UNDEFINED> instruction: 0x20003eb4
200017f0:	20004048 	andcs	r4, r0, r8, asr #32
200017f4:	20007cb8 			; <UNDEFINED> instruction: 0x20007cb8
200017f8:	20003f18 	andcs	r3, r0, r8, lsl pc
200017fc:	20003ecc 	andcs	r3, r0, ip, asr #29
20001800:	20007c54 	andcs	r7, r0, r4, asr ip
20001804:	20004038 	andcs	r4, r0, r8, lsr r0
20001808:	20003f50 	andcs	r3, r0, r0, asr pc
2000180c:	20007e48 	andcs	r7, r0, r8, asr #28
20001810:	20003f90 	mulcs	r0, r0, pc	; <UNPREDICTABLE>
20001814:	20003f6c 	andcs	r3, r0, ip, ror #30
20001818:	20007de4 	andcs	r7, r0, r4, ror #27
2000181c:	20003f4c 	andcs	r3, r0, ip, asr #30
20001820:	20003f78 	andcs	r3, r0, r8, ror pc
20001824:	20007d80 	andcs	r7, r0, r0, lsl #27
20001828:	20003ec8 	andcs	r3, r0, r8, asr #29

2000182c <init_bird>:
	
void init_bird( GameObject *birdObj ) {
2000182c:	b590      	push	{r4, r7, lr}
2000182e:	b083      	sub	sp, #12
20001830:	af00      	add	r7, sp, #0
20001832:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20001834:	4b37      	ldr	r3, [pc, #220]	; (20001914 <init_bird+0xe8>)
20001836:	681b      	ldr	r3, [r3, #0]
20001838:	2b00      	cmp	r3, #0
2000183a:	d057      	beq.n	200018ec <init_bird+0xc0>
		initSprites();
2000183c:	f7ff fef0 	bl	20001620 <initSprites>
		firstTime = 0;			
20001840:	4b34      	ldr	r3, [pc, #208]	; (20001914 <init_bird+0xe8>)
20001842:	2200      	movs	r2, #0
20001844:	601a      	str	r2, [r3, #0]

		birdImages[0] = bird1Image;
20001846:	4b34      	ldr	r3, [pc, #208]	; (20001918 <init_bird+0xec>)
20001848:	4a34      	ldr	r2, [pc, #208]	; (2000191c <init_bird+0xf0>)
2000184a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000184c:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[1] = bird2Image;
2000184e:	4b32      	ldr	r3, [pc, #200]	; (20001918 <init_bird+0xec>)
20001850:	4a33      	ldr	r2, [pc, #204]	; (20001920 <init_bird+0xf4>)
20001852:	330c      	adds	r3, #12
20001854:	ca13      	ldmia	r2!, {r0, r1, r4}
20001856:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[2] = bird3Image;
20001858:	4b2f      	ldr	r3, [pc, #188]	; (20001918 <init_bird+0xec>)
2000185a:	4a32      	ldr	r2, [pc, #200]	; (20001924 <init_bird+0xf8>)
2000185c:	3318      	adds	r3, #24
2000185e:	ca13      	ldmia	r2!, {r0, r1, r4}
20001860:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[3] = bird4Image;
20001862:	4b2d      	ldr	r3, [pc, #180]	; (20001918 <init_bird+0xec>)
20001864:	4a30      	ldr	r2, [pc, #192]	; (20001928 <init_bird+0xfc>)
20001866:	3324      	adds	r3, #36	; 0x24
20001868:	ca13      	ldmia	r2!, {r0, r1, r4}
2000186a:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[4] = bird5Image;
2000186c:	4b2a      	ldr	r3, [pc, #168]	; (20001918 <init_bird+0xec>)
2000186e:	4a2f      	ldr	r2, [pc, #188]	; (2000192c <init_bird+0x100>)
20001870:	3330      	adds	r3, #48	; 0x30
20001872:	ca13      	ldmia	r2!, {r0, r1, r4}
20001874:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[5] = bird6Image;
20001876:	4b28      	ldr	r3, [pc, #160]	; (20001918 <init_bird+0xec>)
20001878:	4a2d      	ldr	r2, [pc, #180]	; (20001930 <init_bird+0x104>)
2000187a:	333c      	adds	r3, #60	; 0x3c
2000187c:	ca13      	ldmia	r2!, {r0, r1, r4}
2000187e:	c313      	stmia	r3!, {r0, r1, r4}
//		birdImages[6] = bird7Image;
		//birdImages[7] = bird8Image;
		
		load_image(&birdImages[0], bird1Black, bird1Gray, bird1Light);
20001880:	4b2c      	ldr	r3, [pc, #176]	; (20001934 <init_bird+0x108>)
20001882:	6819      	ldr	r1, [r3, #0]
20001884:	4b2c      	ldr	r3, [pc, #176]	; (20001938 <init_bird+0x10c>)
20001886:	681a      	ldr	r2, [r3, #0]
20001888:	4b2c      	ldr	r3, [pc, #176]	; (2000193c <init_bird+0x110>)
2000188a:	681b      	ldr	r3, [r3, #0]
2000188c:	4822      	ldr	r0, [pc, #136]	; (20001918 <init_bird+0xec>)
2000188e:	f001 fba1 	bl	20002fd4 <load_image>
		load_image(&birdImages[1], bird2Black, bird2Gray, bird2Light);
20001892:	4b2b      	ldr	r3, [pc, #172]	; (20001940 <init_bird+0x114>)
20001894:	6819      	ldr	r1, [r3, #0]
20001896:	4b2b      	ldr	r3, [pc, #172]	; (20001944 <init_bird+0x118>)
20001898:	681a      	ldr	r2, [r3, #0]
2000189a:	4b2b      	ldr	r3, [pc, #172]	; (20001948 <init_bird+0x11c>)
2000189c:	681b      	ldr	r3, [r3, #0]
2000189e:	482b      	ldr	r0, [pc, #172]	; (2000194c <init_bird+0x120>)
200018a0:	f001 fb98 	bl	20002fd4 <load_image>
		load_image(&birdImages[2], bird3Black, bird3Gray, bird3Light);
200018a4:	4b2a      	ldr	r3, [pc, #168]	; (20001950 <init_bird+0x124>)
200018a6:	6819      	ldr	r1, [r3, #0]
200018a8:	4b2a      	ldr	r3, [pc, #168]	; (20001954 <init_bird+0x128>)
200018aa:	681a      	ldr	r2, [r3, #0]
200018ac:	4b2a      	ldr	r3, [pc, #168]	; (20001958 <init_bird+0x12c>)
200018ae:	681b      	ldr	r3, [r3, #0]
200018b0:	482a      	ldr	r0, [pc, #168]	; (2000195c <init_bird+0x130>)
200018b2:	f001 fb8f 	bl	20002fd4 <load_image>
		load_image(&birdImages[3], bird4Black, bird4Gray, bird4Light);
200018b6:	4b2a      	ldr	r3, [pc, #168]	; (20001960 <init_bird+0x134>)
200018b8:	6819      	ldr	r1, [r3, #0]
200018ba:	4b2a      	ldr	r3, [pc, #168]	; (20001964 <init_bird+0x138>)
200018bc:	681a      	ldr	r2, [r3, #0]
200018be:	4b2a      	ldr	r3, [pc, #168]	; (20001968 <init_bird+0x13c>)
200018c0:	681b      	ldr	r3, [r3, #0]
200018c2:	482a      	ldr	r0, [pc, #168]	; (2000196c <init_bird+0x140>)
200018c4:	f001 fb86 	bl	20002fd4 <load_image>
		load_image(&birdImages[4], bird5Black, bird5Gray, bird5Light);
200018c8:	4b29      	ldr	r3, [pc, #164]	; (20001970 <init_bird+0x144>)
200018ca:	6819      	ldr	r1, [r3, #0]
200018cc:	4b29      	ldr	r3, [pc, #164]	; (20001974 <init_bird+0x148>)
200018ce:	681a      	ldr	r2, [r3, #0]
200018d0:	4b29      	ldr	r3, [pc, #164]	; (20001978 <init_bird+0x14c>)
200018d2:	681b      	ldr	r3, [r3, #0]
200018d4:	4829      	ldr	r0, [pc, #164]	; (2000197c <init_bird+0x150>)
200018d6:	f001 fb7d 	bl	20002fd4 <load_image>
		
		//load_image(&birdImages[7], bird2Black, bird2Gray, bird2Light);
		load_image(&birdImages[5], bird3Black, bird3Gray, bird3Light);
200018da:	4b1d      	ldr	r3, [pc, #116]	; (20001950 <init_bird+0x124>)
200018dc:	6819      	ldr	r1, [r3, #0]
200018de:	4b1d      	ldr	r3, [pc, #116]	; (20001954 <init_bird+0x128>)
200018e0:	681a      	ldr	r2, [r3, #0]
200018e2:	4b1d      	ldr	r3, [pc, #116]	; (20001958 <init_bird+0x12c>)
200018e4:	681b      	ldr	r3, [r3, #0]
200018e6:	4826      	ldr	r0, [pc, #152]	; (20001980 <init_bird+0x154>)
200018e8:	f001 fb74 	bl	20002fd4 <load_image>
		//load_image(&birdImages[5], bird4Black, bird4Gray, bird4Light);
	}
	
	birdObj->images = birdImages;
200018ec:	687b      	ldr	r3, [r7, #4]
200018ee:	4a0a      	ldr	r2, [pc, #40]	; (20001918 <init_bird+0xec>)
200018f0:	601a      	str	r2, [r3, #0]

	birdObj->current_frame = 0;
200018f2:	687b      	ldr	r3, [r7, #4]
200018f4:	2200      	movs	r2, #0
200018f6:	615a      	str	r2, [r3, #20]
	birdObj->n_frames = 6;
200018f8:	687b      	ldr	r3, [r7, #4]
200018fa:	2206      	movs	r2, #6
200018fc:	619a      	str	r2, [r3, #24]
	birdObj->animation_speed = 1;
200018fe:	687b      	ldr	r3, [r7, #4]
20001900:	2201      	movs	r2, #1
20001902:	61da      	str	r2, [r3, #28]
	birdObj->animation_counter = 0;
20001904:	687b      	ldr	r3, [r7, #4]
20001906:	2200      	movs	r2, #0
20001908:	621a      	str	r2, [r3, #32]
}
2000190a:	46c0      	nop			; (mov r8, r8)
2000190c:	46bd      	mov	sp, r7
2000190e:	b003      	add	sp, #12
20001910:	bd90      	pop	{r4, r7, pc}
20001912:	46c0      	nop			; (mov r8, r8)
20001914:	20007eac 	andcs	r7, r0, ip, lsr #29
20001918:	20003ff0 	strdcs	r3, [r0], -r0
2000191c:	20003f08 	andcs	r3, r0, r8, lsl #30
20001920:	20003ed8 	ldrdcs	r3, [r0], -r8
20001924:	20003fc0 	andcs	r3, r0, r0, asr #31
20001928:	20003f24 	andcs	r3, r0, r4, lsr #30
2000192c:	20003f84 	andcs	r3, r0, r4, lsl #31
20001930:	20003ebc 			; <UNDEFINED> instruction: 0x20003ebc
20001934:	20003f20 	andcs	r3, r0, r0, lsr #30
20001938:	20003eb8 			; <UNDEFINED> instruction: 0x20003eb8
2000193c:	20003fb0 			; <UNDEFINED> instruction: 0x20003fb0
20001940:	20003f1c 	andcs	r3, r0, ip, lsl pc
20001944:	20003fa0 	andcs	r3, r0, r0, lsr #31
20001948:	20004054 	andcs	r4, r0, r4, asr r0
2000194c:	20003ffc 	strdcs	r3, [r0], -ip
20001950:	20003f14 	andcs	r3, r0, r4, lsl pc
20001954:	20003f3c 	andcs	r3, r0, ip, lsr pc
20001958:	20003f68 	andcs	r3, r0, r8, ror #30
2000195c:	20004008 	andcs	r4, r0, r8
20001960:	20004038 	andcs	r4, r0, r8, lsr r0
20001964:	20003f18 	andcs	r3, r0, r8, lsl pc
20001968:	20003eb4 			; <UNDEFINED> instruction: 0x20003eb4
2000196c:	20004014 	andcs	r4, r0, r4, lsl r0
20001970:	20003ec8 	andcs	r3, r0, r8, asr #29
20001974:	20003f4c 	andcs	r3, r0, ip, asr #30
20001978:	20003f90 	mulcs	r0, r0, pc	; <UNPREDICTABLE>
2000197c:	20004020 	andcs	r4, r0, r0, lsr #32
20001980:	2000402c 	andcs	r4, r0, ip, lsr #32

20001984 <initSprites>:
Image witch1Image;
Image witch2Image;
Image witch3Image;
Image witch4Image;
Image witchImages[4];
static void initSprites( void ) {	
20001984:	b580      	push	{r7, lr}
20001986:	b08a      	sub	sp, #40	; 0x28
20001988:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempWitchLight;
2000198a:	4b33      	ldr	r3, [pc, #204]	; (20001a58 <initSprites+0xd4>)
2000198c:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer11, witch1_light_bits, witch1_black_width, witch1_black_height);
2000198e:	4933      	ldr	r1, [pc, #204]	; (20001a5c <initSprites+0xd8>)
20001990:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001992:	2312      	movs	r3, #18
20001994:	2212      	movs	r2, #18
20001996:	f001 fb31 	bl	20002ffc <load_sprite>
	witch1Light = pointer11;
2000199a:	4b31      	ldr	r3, [pc, #196]	; (20001a60 <initSprites+0xdc>)
2000199c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000199e:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempWitchGray;
200019a0:	4b30      	ldr	r3, [pc, #192]	; (20001a64 <initSprites+0xe0>)
200019a2:	623b      	str	r3, [r7, #32]
	load_sprite(pointer12, witch1_gray_bits, witch1_black_width, witch1_black_height);
200019a4:	4930      	ldr	r1, [pc, #192]	; (20001a68 <initSprites+0xe4>)
200019a6:	6a38      	ldr	r0, [r7, #32]
200019a8:	2312      	movs	r3, #18
200019aa:	2212      	movs	r2, #18
200019ac:	f001 fb26 	bl	20002ffc <load_sprite>
	witch1Gray = pointer12;
200019b0:	4b2e      	ldr	r3, [pc, #184]	; (20001a6c <initSprites+0xe8>)
200019b2:	6a3a      	ldr	r2, [r7, #32]
200019b4:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempWitchBlack;
200019b6:	4b2e      	ldr	r3, [pc, #184]	; (20001a70 <initSprites+0xec>)
200019b8:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer13, witch1_black_bits, witch1_black_width, witch1_black_height);
200019ba:	492e      	ldr	r1, [pc, #184]	; (20001a74 <initSprites+0xf0>)
200019bc:	69f8      	ldr	r0, [r7, #28]
200019be:	2312      	movs	r3, #18
200019c0:	2212      	movs	r2, #18
200019c2:	f001 fb1b 	bl	20002ffc <load_sprite>
	witch1Black = pointer13;	
200019c6:	4b2c      	ldr	r3, [pc, #176]	; (20001a78 <initSprites+0xf4>)
200019c8:	69fa      	ldr	r2, [r7, #28]
200019ca:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempWitch2Light;
200019cc:	4b2b      	ldr	r3, [pc, #172]	; (20001a7c <initSprites+0xf8>)
200019ce:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer14, witch2_light_bits, witch2_black_width, witch2_black_height);
200019d0:	492b      	ldr	r1, [pc, #172]	; (20001a80 <initSprites+0xfc>)
200019d2:	69b8      	ldr	r0, [r7, #24]
200019d4:	2312      	movs	r3, #18
200019d6:	2212      	movs	r2, #18
200019d8:	f001 fb10 	bl	20002ffc <load_sprite>
	witch2Light = pointer14;
200019dc:	4b29      	ldr	r3, [pc, #164]	; (20001a84 <initSprites+0x100>)
200019de:	69ba      	ldr	r2, [r7, #24]
200019e0:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempWitch2Gray;
200019e2:	4b29      	ldr	r3, [pc, #164]	; (20001a88 <initSprites+0x104>)
200019e4:	617b      	str	r3, [r7, #20]
	load_sprite(pointer15, witch2_gray_bits, witch2_black_width, witch2_black_height);
200019e6:	4929      	ldr	r1, [pc, #164]	; (20001a8c <initSprites+0x108>)
200019e8:	6978      	ldr	r0, [r7, #20]
200019ea:	2312      	movs	r3, #18
200019ec:	2212      	movs	r2, #18
200019ee:	f001 fb05 	bl	20002ffc <load_sprite>
	witch2Gray = pointer15;
200019f2:	4b27      	ldr	r3, [pc, #156]	; (20001a90 <initSprites+0x10c>)
200019f4:	697a      	ldr	r2, [r7, #20]
200019f6:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempWitch2Black;
200019f8:	4b26      	ldr	r3, [pc, #152]	; (20001a94 <initSprites+0x110>)
200019fa:	613b      	str	r3, [r7, #16]
	load_sprite(pointer16, witch2_black_bits, witch2_black_width, witch2_black_height);
200019fc:	4926      	ldr	r1, [pc, #152]	; (20001a98 <initSprites+0x114>)
200019fe:	6938      	ldr	r0, [r7, #16]
20001a00:	2312      	movs	r3, #18
20001a02:	2212      	movs	r2, #18
20001a04:	f001 fafa 	bl	20002ffc <load_sprite>
	witch2Black = pointer16;
20001a08:	4b24      	ldr	r3, [pc, #144]	; (20001a9c <initSprites+0x118>)
20001a0a:	693a      	ldr	r2, [r7, #16]
20001a0c:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempWitch3Light;
20001a0e:	4b24      	ldr	r3, [pc, #144]	; (20001aa0 <initSprites+0x11c>)
20001a10:	60fb      	str	r3, [r7, #12]
	load_sprite(finalPointer, witch3_light_bits, witch3_black_width, witch3_black_height);
20001a12:	4924      	ldr	r1, [pc, #144]	; (20001aa4 <initSprites+0x120>)
20001a14:	68f8      	ldr	r0, [r7, #12]
20001a16:	2312      	movs	r3, #18
20001a18:	2212      	movs	r2, #18
20001a1a:	f001 faef 	bl	20002ffc <load_sprite>
	witch3Light = finalPointer;
20001a1e:	4b22      	ldr	r3, [pc, #136]	; (20001aa8 <initSprites+0x124>)
20001a20:	68fa      	ldr	r2, [r7, #12]
20001a22:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempWitch3Gray;
20001a24:	4b21      	ldr	r3, [pc, #132]	; (20001aac <initSprites+0x128>)
20001a26:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer17, witch3_gray_bits, witch3_black_width, witch3_black_height);
20001a28:	4921      	ldr	r1, [pc, #132]	; (20001ab0 <initSprites+0x12c>)
20001a2a:	68b8      	ldr	r0, [r7, #8]
20001a2c:	2312      	movs	r3, #18
20001a2e:	2212      	movs	r2, #18
20001a30:	f001 fae4 	bl	20002ffc <load_sprite>
	witch3Gray = pointer17;
20001a34:	4b1f      	ldr	r3, [pc, #124]	; (20001ab4 <initSprites+0x130>)
20001a36:	68ba      	ldr	r2, [r7, #8]
20001a38:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempWitch3Black;
20001a3a:	4b1f      	ldr	r3, [pc, #124]	; (20001ab8 <initSprites+0x134>)
20001a3c:	607b      	str	r3, [r7, #4]
	load_sprite(pointer18, witch3_black_bits, witch3_black_width, witch3_black_height);
20001a3e:	491f      	ldr	r1, [pc, #124]	; (20001abc <initSprites+0x138>)
20001a40:	6878      	ldr	r0, [r7, #4]
20001a42:	2312      	movs	r3, #18
20001a44:	2212      	movs	r2, #18
20001a46:	f001 fad9 	bl	20002ffc <load_sprite>
	witch3Black = pointer18;	
20001a4a:	4b1d      	ldr	r3, [pc, #116]	; (20001ac0 <initSprites+0x13c>)
20001a4c:	687a      	ldr	r2, [r7, #4]
20001a4e:	601a      	str	r2, [r3, #0]
	
}
20001a50:	46c0      	nop			; (mov r8, r8)
20001a52:	46bd      	mov	sp, r7
20001a54:	b00a      	add	sp, #40	; 0x28
20001a56:	bd80      	pop	{r7, pc}
20001a58:	20004140 	andcs	r4, r0, r0, asr #2
20001a5c:	20007f20 	andcs	r7, r0, r0, lsr #30
20001a60:	20004158 	andcs	r4, r0, r8, asr r1
20001a64:	200040d0 	ldrdcs	r4, [r0], -r0
20001a68:	20007ee8 	andcs	r7, r0, r8, ror #29
20001a6c:	20004058 	andcs	r4, r0, r8, asr r0
20001a70:	200040a8 	andcs	r4, r0, r8, lsr #1
20001a74:	20007eb0 			; <UNDEFINED> instruction: 0x20007eb0
20001a78:	2000412c 	andcs	r4, r0, ip, lsr #2
20001a7c:	2000414c 	andcs	r4, r0, ip, asr #2
20001a80:	20007fc8 	andcs	r7, r0, r8, asr #31
20001a84:	2000405c 	andcs	r4, r0, ip, asr r0
20001a88:	200040e8 	andcs	r4, r0, r8, ror #1
20001a8c:	20007f90 	mulcs	r0, r0, pc	; <UNPREDICTABLE>
20001a90:	200040cc 	andcs	r4, r0, ip, asr #1
20001a94:	2000409c 	mulcs	r0, ip, r0
20001a98:	20007f58 	andcs	r7, r0, r8, asr pc
20001a9c:	20004168 	andcs	r4, r0, r8, ror #2
20001aa0:	200040b4 	strhcs	r4, [r0], -r4	; <UNPREDICTABLE>
20001aa4:	20008070 	andcs	r8, r0, r0, ror r0
20001aa8:	2000411c 	andcs	r4, r0, ip, lsl r1
20001aac:	20004120 	andcs	r4, r0, r0, lsr #2
20001ab0:	20008038 	andcs	r8, r0, r8, lsr r0
20001ab4:	20004130 	andcs	r4, r0, r0, lsr r1
20001ab8:	200040dc 	ldrdcs	r4, [r0], -ip
20001abc:	20008000 	andcs	r8, r0, r0
20001ac0:	200040f4 	strdcs	r4, [r0], -r4	; <UNPREDICTABLE>

20001ac4 <init_witch>:
	
void init_witch( GameObject *witchObj ) {
20001ac4:	b590      	push	{r4, r7, lr}
20001ac6:	b083      	sub	sp, #12
20001ac8:	af00      	add	r7, sp, #0
20001aca:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20001acc:	4b29      	ldr	r3, [pc, #164]	; (20001b74 <init_witch+0xb0>)
20001ace:	681b      	ldr	r3, [r3, #0]
20001ad0:	2b00      	cmp	r3, #0
20001ad2:	d03b      	beq.n	20001b4c <init_witch+0x88>
		initSprites();
20001ad4:	f7ff ff56 	bl	20001984 <initSprites>
		firstTime = 0;			
20001ad8:	4b26      	ldr	r3, [pc, #152]	; (20001b74 <init_witch+0xb0>)
20001ada:	2200      	movs	r2, #0
20001adc:	601a      	str	r2, [r3, #0]

		witchImages[0] = witch1Image;
20001ade:	4b26      	ldr	r3, [pc, #152]	; (20001b78 <init_witch+0xb4>)
20001ae0:	4a26      	ldr	r2, [pc, #152]	; (20001b7c <init_witch+0xb8>)
20001ae2:	ca13      	ldmia	r2!, {r0, r1, r4}
20001ae4:	c313      	stmia	r3!, {r0, r1, r4}
		witchImages[1] = witch2Image;
20001ae6:	4b24      	ldr	r3, [pc, #144]	; (20001b78 <init_witch+0xb4>)
20001ae8:	4a25      	ldr	r2, [pc, #148]	; (20001b80 <init_witch+0xbc>)
20001aea:	330c      	adds	r3, #12
20001aec:	ca13      	ldmia	r2!, {r0, r1, r4}
20001aee:	c313      	stmia	r3!, {r0, r1, r4}
		witchImages[2] = witch3Image;
20001af0:	4b21      	ldr	r3, [pc, #132]	; (20001b78 <init_witch+0xb4>)
20001af2:	4a24      	ldr	r2, [pc, #144]	; (20001b84 <init_witch+0xc0>)
20001af4:	3318      	adds	r3, #24
20001af6:	ca13      	ldmia	r2!, {r0, r1, r4}
20001af8:	c313      	stmia	r3!, {r0, r1, r4}
		witchImages[3] = witch4Image;
20001afa:	4b1f      	ldr	r3, [pc, #124]	; (20001b78 <init_witch+0xb4>)
20001afc:	4a22      	ldr	r2, [pc, #136]	; (20001b88 <init_witch+0xc4>)
20001afe:	3324      	adds	r3, #36	; 0x24
20001b00:	ca13      	ldmia	r2!, {r0, r1, r4}
20001b02:	c313      	stmia	r3!, {r0, r1, r4}
		
		
		load_image(&witchImages[0], witch1Black, witch1Gray, witch1Light);
20001b04:	4b21      	ldr	r3, [pc, #132]	; (20001b8c <init_witch+0xc8>)
20001b06:	6819      	ldr	r1, [r3, #0]
20001b08:	4b21      	ldr	r3, [pc, #132]	; (20001b90 <init_witch+0xcc>)
20001b0a:	681a      	ldr	r2, [r3, #0]
20001b0c:	4b21      	ldr	r3, [pc, #132]	; (20001b94 <init_witch+0xd0>)
20001b0e:	681b      	ldr	r3, [r3, #0]
20001b10:	4819      	ldr	r0, [pc, #100]	; (20001b78 <init_witch+0xb4>)
20001b12:	f001 fa5f 	bl	20002fd4 <load_image>
		load_image(&witchImages[1], witch2Black, witch2Gray, witch2Light);
20001b16:	4b20      	ldr	r3, [pc, #128]	; (20001b98 <init_witch+0xd4>)
20001b18:	6819      	ldr	r1, [r3, #0]
20001b1a:	4b20      	ldr	r3, [pc, #128]	; (20001b9c <init_witch+0xd8>)
20001b1c:	681a      	ldr	r2, [r3, #0]
20001b1e:	4b20      	ldr	r3, [pc, #128]	; (20001ba0 <init_witch+0xdc>)
20001b20:	681b      	ldr	r3, [r3, #0]
20001b22:	4820      	ldr	r0, [pc, #128]	; (20001ba4 <init_witch+0xe0>)
20001b24:	f001 fa56 	bl	20002fd4 <load_image>
		load_image(&witchImages[2], witch3Black, witch3Gray, witch3Light);
20001b28:	4b1f      	ldr	r3, [pc, #124]	; (20001ba8 <init_witch+0xe4>)
20001b2a:	6819      	ldr	r1, [r3, #0]
20001b2c:	4b1f      	ldr	r3, [pc, #124]	; (20001bac <init_witch+0xe8>)
20001b2e:	681a      	ldr	r2, [r3, #0]
20001b30:	4b1f      	ldr	r3, [pc, #124]	; (20001bb0 <init_witch+0xec>)
20001b32:	681b      	ldr	r3, [r3, #0]
20001b34:	481f      	ldr	r0, [pc, #124]	; (20001bb4 <init_witch+0xf0>)
20001b36:	f001 fa4d 	bl	20002fd4 <load_image>
		load_image(&witchImages[3], witch2Black, witch2Gray, witch2Light);
20001b3a:	4b17      	ldr	r3, [pc, #92]	; (20001b98 <init_witch+0xd4>)
20001b3c:	6819      	ldr	r1, [r3, #0]
20001b3e:	4b17      	ldr	r3, [pc, #92]	; (20001b9c <init_witch+0xd8>)
20001b40:	681a      	ldr	r2, [r3, #0]
20001b42:	4b17      	ldr	r3, [pc, #92]	; (20001ba0 <init_witch+0xdc>)
20001b44:	681b      	ldr	r3, [r3, #0]
20001b46:	481c      	ldr	r0, [pc, #112]	; (20001bb8 <init_witch+0xf4>)
20001b48:	f001 fa44 	bl	20002fd4 <load_image>
		
	}
	
	witchObj->images = witchImages;
20001b4c:	687b      	ldr	r3, [r7, #4]
20001b4e:	4a0a      	ldr	r2, [pc, #40]	; (20001b78 <init_witch+0xb4>)
20001b50:	601a      	str	r2, [r3, #0]

	witchObj->current_frame = 0;
20001b52:	687b      	ldr	r3, [r7, #4]
20001b54:	2200      	movs	r2, #0
20001b56:	615a      	str	r2, [r3, #20]
	witchObj->n_frames = 4;
20001b58:	687b      	ldr	r3, [r7, #4]
20001b5a:	2204      	movs	r2, #4
20001b5c:	619a      	str	r2, [r3, #24]
	witchObj->animation_speed = 1;
20001b5e:	687b      	ldr	r3, [r7, #4]
20001b60:	2201      	movs	r2, #1
20001b62:	61da      	str	r2, [r3, #28]
	witchObj->animation_counter = 0;
20001b64:	687b      	ldr	r3, [r7, #4]
20001b66:	2200      	movs	r2, #0
20001b68:	621a      	str	r2, [r3, #32]
}
20001b6a:	46c0      	nop			; (mov r8, r8)
20001b6c:	46bd      	mov	sp, r7
20001b6e:	b003      	add	sp, #12
20001b70:	bd90      	pop	{r4, r7, pc}
20001b72:	46c0      	nop			; (mov r8, r8)
20001b74:	200080a8 	andcs	r8, r0, r8, lsr #1
20001b78:	20004060 	andcs	r4, r0, r0, rrx
20001b7c:	20004134 	andcs	r4, r0, r4, lsr r1
20001b80:	20004090 	mulcs	r0, r0, r0
20001b84:	2000415c 	andcs	r4, r0, ip, asr r1
20001b88:	200040c0 	andcs	r4, r0, r0, asr #1
20001b8c:	2000412c 	andcs	r4, r0, ip, lsr #2
20001b90:	20004058 	andcs	r4, r0, r8, asr r0
20001b94:	20004158 	andcs	r4, r0, r8, asr r1
20001b98:	20004168 	andcs	r4, r0, r8, ror #2
20001b9c:	200040cc 	andcs	r4, r0, ip, asr #1
20001ba0:	2000405c 	andcs	r4, r0, ip, asr r0
20001ba4:	2000406c 	andcs	r4, r0, ip, rrx
20001ba8:	200040f4 	strdcs	r4, [r0], -r4	; <UNPREDICTABLE>
20001bac:	20004130 	andcs	r4, r0, r0, lsr r1
20001bb0:	2000411c 	andcs	r4, r0, ip, lsl r1
20001bb4:	20004078 	andcs	r4, r0, r8, ror r0
20001bb8:	20004084 	andcs	r4, r0, r4, lsl #1

20001bbc <initSprites>:
Image DIP1Image;
Image DIP2Image;
Image DIP3Image;
Image DIP4Image;
Image DIPImages[4];
static void initSprites( void ) {	
20001bbc:	b580      	push	{r7, lr}
20001bbe:	b08a      	sub	sp, #40	; 0x28
20001bc0:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempDIPLight;
20001bc2:	4b33      	ldr	r3, [pc, #204]	; (20001c90 <initSprites+0xd4>)
20001bc4:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer11, witch1_light_bits, witch1_black_width, witch1_black_height);
20001bc6:	4933      	ldr	r1, [pc, #204]	; (20001c94 <initSprites+0xd8>)
20001bc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001bca:	2312      	movs	r3, #18
20001bcc:	2212      	movs	r2, #18
20001bce:	f001 fa15 	bl	20002ffc <load_sprite>
	DIP1Light = pointer11;
20001bd2:	4b31      	ldr	r3, [pc, #196]	; (20001c98 <initSprites+0xdc>)
20001bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001bd6:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempDIPGray;
20001bd8:	4b30      	ldr	r3, [pc, #192]	; (20001c9c <initSprites+0xe0>)
20001bda:	623b      	str	r3, [r7, #32]
	load_sprite(pointer12, witch1_gray_bits, witch1_black_width, witch1_black_height);
20001bdc:	4930      	ldr	r1, [pc, #192]	; (20001ca0 <initSprites+0xe4>)
20001bde:	6a38      	ldr	r0, [r7, #32]
20001be0:	2312      	movs	r3, #18
20001be2:	2212      	movs	r2, #18
20001be4:	f001 fa0a 	bl	20002ffc <load_sprite>
	DIP1Gray = pointer12;
20001be8:	4b2e      	ldr	r3, [pc, #184]	; (20001ca4 <initSprites+0xe8>)
20001bea:	6a3a      	ldr	r2, [r7, #32]
20001bec:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempDIPBlack;
20001bee:	4b2e      	ldr	r3, [pc, #184]	; (20001ca8 <initSprites+0xec>)
20001bf0:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer13, witch1_black_bits, witch1_black_width, witch1_black_height);
20001bf2:	492e      	ldr	r1, [pc, #184]	; (20001cac <initSprites+0xf0>)
20001bf4:	69f8      	ldr	r0, [r7, #28]
20001bf6:	2312      	movs	r3, #18
20001bf8:	2212      	movs	r2, #18
20001bfa:	f001 f9ff 	bl	20002ffc <load_sprite>
	DIP1Black = pointer13;	
20001bfe:	4b2c      	ldr	r3, [pc, #176]	; (20001cb0 <initSprites+0xf4>)
20001c00:	69fa      	ldr	r2, [r7, #28]
20001c02:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempDIP2Light;
20001c04:	4b2b      	ldr	r3, [pc, #172]	; (20001cb4 <initSprites+0xf8>)
20001c06:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer14, witch2_light_bits, witch2_black_width, witch2_black_height);
20001c08:	492b      	ldr	r1, [pc, #172]	; (20001cb8 <initSprites+0xfc>)
20001c0a:	69b8      	ldr	r0, [r7, #24]
20001c0c:	2312      	movs	r3, #18
20001c0e:	2212      	movs	r2, #18
20001c10:	f001 f9f4 	bl	20002ffc <load_sprite>
	DIP2Light = pointer14;
20001c14:	4b29      	ldr	r3, [pc, #164]	; (20001cbc <initSprites+0x100>)
20001c16:	69ba      	ldr	r2, [r7, #24]
20001c18:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempDIP2Gray;
20001c1a:	4b29      	ldr	r3, [pc, #164]	; (20001cc0 <initSprites+0x104>)
20001c1c:	617b      	str	r3, [r7, #20]
	load_sprite(pointer15, witch2_gray_bits, witch2_black_width, witch2_black_height);
20001c1e:	4929      	ldr	r1, [pc, #164]	; (20001cc4 <initSprites+0x108>)
20001c20:	6978      	ldr	r0, [r7, #20]
20001c22:	2312      	movs	r3, #18
20001c24:	2212      	movs	r2, #18
20001c26:	f001 f9e9 	bl	20002ffc <load_sprite>
	DIP2Gray = pointer15;
20001c2a:	4b27      	ldr	r3, [pc, #156]	; (20001cc8 <initSprites+0x10c>)
20001c2c:	697a      	ldr	r2, [r7, #20]
20001c2e:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempDIP2Black;
20001c30:	4b26      	ldr	r3, [pc, #152]	; (20001ccc <initSprites+0x110>)
20001c32:	613b      	str	r3, [r7, #16]
	load_sprite(pointer16, witch2_black_bits, witch2_black_width, witch2_black_height);
20001c34:	4926      	ldr	r1, [pc, #152]	; (20001cd0 <initSprites+0x114>)
20001c36:	6938      	ldr	r0, [r7, #16]
20001c38:	2312      	movs	r3, #18
20001c3a:	2212      	movs	r2, #18
20001c3c:	f001 f9de 	bl	20002ffc <load_sprite>
	DIP2Black = pointer16;
20001c40:	4b24      	ldr	r3, [pc, #144]	; (20001cd4 <initSprites+0x118>)
20001c42:	693a      	ldr	r2, [r7, #16]
20001c44:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempDIP3Light;
20001c46:	4b24      	ldr	r3, [pc, #144]	; (20001cd8 <initSprites+0x11c>)
20001c48:	60fb      	str	r3, [r7, #12]
	load_sprite(finalPointer, witch3_light_bits, witch3_black_width, witch3_black_height);
20001c4a:	4924      	ldr	r1, [pc, #144]	; (20001cdc <initSprites+0x120>)
20001c4c:	68f8      	ldr	r0, [r7, #12]
20001c4e:	2312      	movs	r3, #18
20001c50:	2212      	movs	r2, #18
20001c52:	f001 f9d3 	bl	20002ffc <load_sprite>
	DIP3Light = finalPointer;
20001c56:	4b22      	ldr	r3, [pc, #136]	; (20001ce0 <initSprites+0x124>)
20001c58:	68fa      	ldr	r2, [r7, #12]
20001c5a:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempDIP3Gray;
20001c5c:	4b21      	ldr	r3, [pc, #132]	; (20001ce4 <initSprites+0x128>)
20001c5e:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer17, witch3_gray_bits, witch3_black_width, witch3_black_height);
20001c60:	4921      	ldr	r1, [pc, #132]	; (20001ce8 <initSprites+0x12c>)
20001c62:	68b8      	ldr	r0, [r7, #8]
20001c64:	2312      	movs	r3, #18
20001c66:	2212      	movs	r2, #18
20001c68:	f001 f9c8 	bl	20002ffc <load_sprite>
	DIP3Gray = pointer17;
20001c6c:	4b1f      	ldr	r3, [pc, #124]	; (20001cec <initSprites+0x130>)
20001c6e:	68ba      	ldr	r2, [r7, #8]
20001c70:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempDIP3Black;
20001c72:	4b1f      	ldr	r3, [pc, #124]	; (20001cf0 <initSprites+0x134>)
20001c74:	607b      	str	r3, [r7, #4]
	load_sprite(pointer18, witch3_black_bits, witch3_black_width, witch3_black_height);
20001c76:	491f      	ldr	r1, [pc, #124]	; (20001cf4 <initSprites+0x138>)
20001c78:	6878      	ldr	r0, [r7, #4]
20001c7a:	2312      	movs	r3, #18
20001c7c:	2212      	movs	r2, #18
20001c7e:	f001 f9bd 	bl	20002ffc <load_sprite>
	DIP3Black = pointer18;	
20001c82:	4b1d      	ldr	r3, [pc, #116]	; (20001cf8 <initSprites+0x13c>)
20001c84:	687a      	ldr	r2, [r7, #4]
20001c86:	601a      	str	r2, [r3, #0]
	
}
20001c88:	46c0      	nop			; (mov r8, r8)
20001c8a:	46bd      	mov	sp, r7
20001c8c:	b00a      	add	sp, #40	; 0x28
20001c8e:	bd80      	pop	{r7, pc}
20001c90:	200041b4 			; <UNDEFINED> instruction: 0x200041b4
20001c94:	2000811c 	andcs	r8, r0, ip, lsl r1
20001c98:	20004220 	andcs	r4, r0, r0, lsr #4
20001c9c:	20004274 	andcs	r4, r0, r4, ror r2
20001ca0:	200080e4 	andcs	r8, r0, r4, ror #1
20001ca4:	20004248 	andcs	r4, r0, r8, asr #4
20001ca8:	2000423c 	andcs	r4, r0, ip, lsr r2
20001cac:	200080ac 	andcs	r8, r0, ip, lsr #1
20001cb0:	200041b0 			; <UNDEFINED> instruction: 0x200041b0
20001cb4:	20004268 	andcs	r4, r0, r8, ror #4
20001cb8:	200081c4 	andcs	r8, r0, r4, asr #3
20001cbc:	20004224 	andcs	r4, r0, r4, lsr #4
20001cc0:	200041a0 	andcs	r4, r0, r0, lsr #3
20001cc4:	2000818c 	andcs	r8, r0, ip, lsl #3
20001cc8:	2000419c 	mulcs	r0, ip, r1
20001ccc:	200041fc 	strdcs	r4, [r0], -ip
20001cd0:	20008154 	andcs	r8, r0, r4, asr r1
20001cd4:	2000422c 	andcs	r4, r0, ip, lsr #4
20001cd8:	200041c0 	andcs	r4, r0, r0, asr #3
20001cdc:	2000826c 	andcs	r8, r0, ip, ror #4
20001ce0:	20004228 	andcs	r4, r0, r8, lsr #4
20001ce4:	20004230 	andcs	r4, r0, r0, lsr r2
20001ce8:	20008234 	andcs	r8, r0, r4, lsr r2
20001cec:	20004258 	andcs	r4, r0, r8, asr r2
20001cf0:	2000424c 	andcs	r4, r0, ip, asr #4
20001cf4:	200081fc 	strdcs	r8, [r0], -ip
20001cf8:	200041ac 	andcs	r4, r0, ip, lsr #3

20001cfc <init_DIP>:
	
void init_DIP( GameObject *DIPObj ) {
20001cfc:	b590      	push	{r4, r7, lr}
20001cfe:	b083      	sub	sp, #12
20001d00:	af00      	add	r7, sp, #0
20001d02:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20001d04:	4b29      	ldr	r3, [pc, #164]	; (20001dac <init_DIP+0xb0>)
20001d06:	681b      	ldr	r3, [r3, #0]
20001d08:	2b00      	cmp	r3, #0
20001d0a:	d03b      	beq.n	20001d84 <init_DIP+0x88>
		initSprites();
20001d0c:	f7ff ff56 	bl	20001bbc <initSprites>
		firstTime = 0;			
20001d10:	4b26      	ldr	r3, [pc, #152]	; (20001dac <init_DIP+0xb0>)
20001d12:	2200      	movs	r2, #0
20001d14:	601a      	str	r2, [r3, #0]

		DIPImages[0] = DIP1Image;
20001d16:	4b26      	ldr	r3, [pc, #152]	; (20001db0 <init_DIP+0xb4>)
20001d18:	4a26      	ldr	r2, [pc, #152]	; (20001db4 <init_DIP+0xb8>)
20001d1a:	ca13      	ldmia	r2!, {r0, r1, r4}
20001d1c:	c313      	stmia	r3!, {r0, r1, r4}
		DIPImages[1] = DIP2Image;
20001d1e:	4b24      	ldr	r3, [pc, #144]	; (20001db0 <init_DIP+0xb4>)
20001d20:	4a25      	ldr	r2, [pc, #148]	; (20001db8 <init_DIP+0xbc>)
20001d22:	330c      	adds	r3, #12
20001d24:	ca13      	ldmia	r2!, {r0, r1, r4}
20001d26:	c313      	stmia	r3!, {r0, r1, r4}
		DIPImages[2] = DIP3Image;
20001d28:	4b21      	ldr	r3, [pc, #132]	; (20001db0 <init_DIP+0xb4>)
20001d2a:	4a24      	ldr	r2, [pc, #144]	; (20001dbc <init_DIP+0xc0>)
20001d2c:	3318      	adds	r3, #24
20001d2e:	ca13      	ldmia	r2!, {r0, r1, r4}
20001d30:	c313      	stmia	r3!, {r0, r1, r4}
		DIPImages[3] = DIP4Image;
20001d32:	4b1f      	ldr	r3, [pc, #124]	; (20001db0 <init_DIP+0xb4>)
20001d34:	4a22      	ldr	r2, [pc, #136]	; (20001dc0 <init_DIP+0xc4>)
20001d36:	3324      	adds	r3, #36	; 0x24
20001d38:	ca13      	ldmia	r2!, {r0, r1, r4}
20001d3a:	c313      	stmia	r3!, {r0, r1, r4}
		
		
		load_image(&DIPImages[0], DIP1Black, DIP1Light, DIP1Gray);
20001d3c:	4b21      	ldr	r3, [pc, #132]	; (20001dc4 <init_DIP+0xc8>)
20001d3e:	6819      	ldr	r1, [r3, #0]
20001d40:	4b21      	ldr	r3, [pc, #132]	; (20001dc8 <init_DIP+0xcc>)
20001d42:	681a      	ldr	r2, [r3, #0]
20001d44:	4b21      	ldr	r3, [pc, #132]	; (20001dcc <init_DIP+0xd0>)
20001d46:	681b      	ldr	r3, [r3, #0]
20001d48:	4819      	ldr	r0, [pc, #100]	; (20001db0 <init_DIP+0xb4>)
20001d4a:	f001 f943 	bl	20002fd4 <load_image>
		load_image(&DIPImages[1], DIP2Black, DIP2Light, DIP2Gray);
20001d4e:	4b20      	ldr	r3, [pc, #128]	; (20001dd0 <init_DIP+0xd4>)
20001d50:	6819      	ldr	r1, [r3, #0]
20001d52:	4b20      	ldr	r3, [pc, #128]	; (20001dd4 <init_DIP+0xd8>)
20001d54:	681a      	ldr	r2, [r3, #0]
20001d56:	4b20      	ldr	r3, [pc, #128]	; (20001dd8 <init_DIP+0xdc>)
20001d58:	681b      	ldr	r3, [r3, #0]
20001d5a:	4820      	ldr	r0, [pc, #128]	; (20001ddc <init_DIP+0xe0>)
20001d5c:	f001 f93a 	bl	20002fd4 <load_image>
		load_image(&DIPImages[2], DIP3Black, DIP3Light, DIP3Gray);
20001d60:	4b1f      	ldr	r3, [pc, #124]	; (20001de0 <init_DIP+0xe4>)
20001d62:	6819      	ldr	r1, [r3, #0]
20001d64:	4b1f      	ldr	r3, [pc, #124]	; (20001de4 <init_DIP+0xe8>)
20001d66:	681a      	ldr	r2, [r3, #0]
20001d68:	4b1f      	ldr	r3, [pc, #124]	; (20001de8 <init_DIP+0xec>)
20001d6a:	681b      	ldr	r3, [r3, #0]
20001d6c:	481f      	ldr	r0, [pc, #124]	; (20001dec <init_DIP+0xf0>)
20001d6e:	f001 f931 	bl	20002fd4 <load_image>
		load_image(&DIPImages[3], DIP2Black, DIP2Light, DIP2Gray);
20001d72:	4b17      	ldr	r3, [pc, #92]	; (20001dd0 <init_DIP+0xd4>)
20001d74:	6819      	ldr	r1, [r3, #0]
20001d76:	4b17      	ldr	r3, [pc, #92]	; (20001dd4 <init_DIP+0xd8>)
20001d78:	681a      	ldr	r2, [r3, #0]
20001d7a:	4b17      	ldr	r3, [pc, #92]	; (20001dd8 <init_DIP+0xdc>)
20001d7c:	681b      	ldr	r3, [r3, #0]
20001d7e:	481c      	ldr	r0, [pc, #112]	; (20001df0 <init_DIP+0xf4>)
20001d80:	f001 f928 	bl	20002fd4 <load_image>
		
	}
	
	DIPObj->images = DIPImages;
20001d84:	687b      	ldr	r3, [r7, #4]
20001d86:	4a0a      	ldr	r2, [pc, #40]	; (20001db0 <init_DIP+0xb4>)
20001d88:	601a      	str	r2, [r3, #0]

	DIPObj->current_frame = 0;
20001d8a:	687b      	ldr	r3, [r7, #4]
20001d8c:	2200      	movs	r2, #0
20001d8e:	615a      	str	r2, [r3, #20]
	DIPObj->n_frames = 4;
20001d90:	687b      	ldr	r3, [r7, #4]
20001d92:	2204      	movs	r2, #4
20001d94:	619a      	str	r2, [r3, #24]
	DIPObj->animation_speed = 1;
20001d96:	687b      	ldr	r3, [r7, #4]
20001d98:	2201      	movs	r2, #1
20001d9a:	61da      	str	r2, [r3, #28]
	DIPObj->animation_counter = 0;
20001d9c:	687b      	ldr	r3, [r7, #4]
20001d9e:	2200      	movs	r2, #0
20001da0:	621a      	str	r2, [r3, #32]
}
20001da2:	46c0      	nop			; (mov r8, r8)
20001da4:	46bd      	mov	sp, r7
20001da6:	b003      	add	sp, #12
20001da8:	bd90      	pop	{r4, r7, pc}
20001daa:	46c0      	nop			; (mov r8, r8)
20001dac:	200082a4 	andcs	r8, r0, r4, lsr #5
20001db0:	200041cc 	andcs	r4, r0, ip, asr #3
20001db4:	20004214 	andcs	r4, r0, r4, lsl r2
20001db8:	20004190 	mulcs	r0, r0, r1
20001dbc:	20004208 	andcs	r4, r0, r8, lsl #4
20001dc0:	2000425c 	andcs	r4, r0, ip, asr r2
20001dc4:	200041b0 			; <UNDEFINED> instruction: 0x200041b0
20001dc8:	20004220 	andcs	r4, r0, r0, lsr #4
20001dcc:	20004248 	andcs	r4, r0, r8, asr #4
20001dd0:	2000422c 	andcs	r4, r0, ip, lsr #4
20001dd4:	20004224 	andcs	r4, r0, r4, lsr #4
20001dd8:	2000419c 	mulcs	r0, ip, r1
20001ddc:	200041d8 	ldrdcs	r4, [r0], -r8
20001de0:	200041ac 	andcs	r4, r0, ip, lsr #3
20001de4:	20004228 	andcs	r4, r0, r8, lsr #4
20001de8:	20004258 	andcs	r4, r0, r8, asr r2
20001dec:	200041e4 	andcs	r4, r0, r4, ror #3
20001df0:	200041f0 	strdcs	r4, [r0], -r0

20001df4 <setPlayerPosition>:

static int playerPositionX = 0;
static int playerPositionY = 0;

void setPlayerPosition(int x, int y){
20001df4:	b580      	push	{r7, lr}
20001df6:	b082      	sub	sp, #8
20001df8:	af00      	add	r7, sp, #0
20001dfa:	6078      	str	r0, [r7, #4]
20001dfc:	6039      	str	r1, [r7, #0]
	playerPositionX = x;
20001dfe:	4b05      	ldr	r3, [pc, #20]	; (20001e14 <setPlayerPosition+0x20>)
20001e00:	687a      	ldr	r2, [r7, #4]
20001e02:	601a      	str	r2, [r3, #0]
	playerPositionY = y;
20001e04:	4b04      	ldr	r3, [pc, #16]	; (20001e18 <setPlayerPosition+0x24>)
20001e06:	683a      	ldr	r2, [r7, #0]
20001e08:	601a      	str	r2, [r3, #0]
}
20001e0a:	46c0      	nop			; (mov r8, r8)
20001e0c:	46bd      	mov	sp, r7
20001e0e:	b002      	add	sp, #8
20001e10:	bd80      	pop	{r7, pc}
20001e12:	46c0      	nop			; (mov r8, r8)
20001e14:	20003af8 	strdcs	r3, [r0], -r8
20001e18:	20003afc 	strdcs	r3, [r0], -ip

20001e1c <DIPUpdate>:


void DIPUpdate(GameObject *this) {
20001e1c:	b580      	push	{r7, lr}
20001e1e:	b082      	sub	sp, #8
20001e20:	af00      	add	r7, sp, #0
20001e22:	6078      	str	r0, [r7, #4]
	gameObjectUpdate(this);
20001e24:	687b      	ldr	r3, [r7, #4]
20001e26:	0018      	movs	r0, r3
20001e28:	f7ff f998 	bl	2000115c <gameObjectUpdate>
	static int counter = 0;
	static int direction = -1;
	counter++;
20001e2c:	4b28      	ldr	r3, [pc, #160]	; (20001ed0 <DIPUpdate+0xb4>)
20001e2e:	681b      	ldr	r3, [r3, #0]
20001e30:	1c5a      	adds	r2, r3, #1
20001e32:	4b27      	ldr	r3, [pc, #156]	; (20001ed0 <DIPUpdate+0xb4>)
20001e34:	601a      	str	r2, [r3, #0]
	
	if (!read_DIL_single(LIGHT_TRIGGER)){ // Only move if the light is off
20001e36:	2006      	movs	r0, #6
20001e38:	f001 f910 	bl	2000305c <read_DIL_single>
20001e3c:	1e03      	subs	r3, r0, #0
20001e3e:	d143      	bne.n	20001ec8 <DIPUpdate+0xac>
		
		if (this->yPos >= playerPositionY || (playerPositionX + DIP_WIDTH >= this->xPos && playerPositionX <= this->xPos + DIP_WIDTH )) { // Move faster if player is below or on the same level
20001e40:	687b      	ldr	r3, [r7, #4]
20001e42:	689a      	ldr	r2, [r3, #8]
20001e44:	4b23      	ldr	r3, [pc, #140]	; (20001ed4 <DIPUpdate+0xb8>)
20001e46:	681b      	ldr	r3, [r3, #0]
20001e48:	429a      	cmp	r2, r3
20001e4a:	da0f      	bge.n	20001e6c <DIPUpdate+0x50>
20001e4c:	4b22      	ldr	r3, [pc, #136]	; (20001ed8 <DIPUpdate+0xbc>)
20001e4e:	681b      	ldr	r3, [r3, #0]
20001e50:	3312      	adds	r3, #18
20001e52:	001a      	movs	r2, r3
20001e54:	687b      	ldr	r3, [r7, #4]
20001e56:	685b      	ldr	r3, [r3, #4]
20001e58:	429a      	cmp	r2, r3
20001e5a:	db12      	blt.n	20001e82 <DIPUpdate+0x66>
20001e5c:	687b      	ldr	r3, [r7, #4]
20001e5e:	685b      	ldr	r3, [r3, #4]
20001e60:	3312      	adds	r3, #18
20001e62:	001a      	movs	r2, r3
20001e64:	4b1c      	ldr	r3, [pc, #112]	; (20001ed8 <DIPUpdate+0xbc>)
20001e66:	681b      	ldr	r3, [r3, #0]
20001e68:	429a      	cmp	r2, r3
20001e6a:	db0a      	blt.n	20001e82 <DIPUpdate+0x66>
			this->xPos += direction*3;
20001e6c:	687b      	ldr	r3, [r7, #4]
20001e6e:	6859      	ldr	r1, [r3, #4]
20001e70:	4b1a      	ldr	r3, [pc, #104]	; (20001edc <DIPUpdate+0xc0>)
20001e72:	681a      	ldr	r2, [r3, #0]
20001e74:	0013      	movs	r3, r2
20001e76:	005b      	lsls	r3, r3, #1
20001e78:	189b      	adds	r3, r3, r2
20001e7a:	18ca      	adds	r2, r1, r3
20001e7c:	687b      	ldr	r3, [r7, #4]
20001e7e:	605a      	str	r2, [r3, #4]
20001e80:	e012      	b.n	20001ea8 <DIPUpdate+0x8c>
		} else {
			this->xPos += (counter % 2)*direction;
20001e82:	687b      	ldr	r3, [r7, #4]
20001e84:	685a      	ldr	r2, [r3, #4]
20001e86:	4b12      	ldr	r3, [pc, #72]	; (20001ed0 <DIPUpdate+0xb4>)
20001e88:	681b      	ldr	r3, [r3, #0]
20001e8a:	4915      	ldr	r1, [pc, #84]	; (20001ee0 <DIPUpdate+0xc4>)
20001e8c:	400b      	ands	r3, r1
20001e8e:	d504      	bpl.n	20001e9a <DIPUpdate+0x7e>
20001e90:	3b01      	subs	r3, #1
20001e92:	2102      	movs	r1, #2
20001e94:	4249      	negs	r1, r1
20001e96:	430b      	orrs	r3, r1
20001e98:	3301      	adds	r3, #1
20001e9a:	0019      	movs	r1, r3
20001e9c:	4b0f      	ldr	r3, [pc, #60]	; (20001edc <DIPUpdate+0xc0>)
20001e9e:	681b      	ldr	r3, [r3, #0]
20001ea0:	434b      	muls	r3, r1
20001ea2:	18d2      	adds	r2, r2, r3
20001ea4:	687b      	ldr	r3, [r7, #4]
20001ea6:	605a      	str	r2, [r3, #4]
		}
		
		if(this->xPos > RIGHT_POINT) {
20001ea8:	687b      	ldr	r3, [r7, #4]
20001eaa:	685b      	ldr	r3, [r3, #4]
20001eac:	2b6b      	cmp	r3, #107	; 0x6b
20001eae:	dd04      	ble.n	20001eba <DIPUpdate+0x9e>
			direction = -1;
20001eb0:	4b0a      	ldr	r3, [pc, #40]	; (20001edc <DIPUpdate+0xc0>)
20001eb2:	2201      	movs	r2, #1
20001eb4:	4252      	negs	r2, r2
20001eb6:	601a      	str	r2, [r3, #0]
		} else if(this->xPos < LEFT_POINT) {
			direction = 1;
		}
	}
}
20001eb8:	e006      	b.n	20001ec8 <DIPUpdate+0xac>
		} else if(this->xPos < LEFT_POINT) {
20001eba:	687b      	ldr	r3, [r7, #4]
20001ebc:	685b      	ldr	r3, [r3, #4]
20001ebe:	2b2d      	cmp	r3, #45	; 0x2d
20001ec0:	dc02      	bgt.n	20001ec8 <DIPUpdate+0xac>
			direction = 1;
20001ec2:	4b06      	ldr	r3, [pc, #24]	; (20001edc <DIPUpdate+0xc0>)
20001ec4:	2201      	movs	r2, #1
20001ec6:	601a      	str	r2, [r3, #0]
}
20001ec8:	46c0      	nop			; (mov r8, r8)
20001eca:	46bd      	mov	sp, r7
20001ecc:	b002      	add	sp, #8
20001ece:	bd80      	pop	{r7, pc}
20001ed0:	20003b00 	andcs	r3, r0, r0, lsl #22
20001ed4:	20003afc 	strdcs	r3, [r0], -ip
20001ed8:	20003af8 	strdcs	r3, [r0], -r8
20001edc:	200082a8 	andcs	r8, r0, r8, lsr #5
20001ee0:	80000001 	andhi	r0, r0, r1

20001ee4 <initSprites>:
Image flame1Image;
Image flame2Image;
Image flame3Image;
Image flame4Image;
Image flameImages[4];
static void initSprites( void ) {	
20001ee4:	b580      	push	{r7, lr}
20001ee6:	b08c      	sub	sp, #48	; 0x30
20001ee8:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempFlameLight;
20001eea:	4b44      	ldr	r3, [pc, #272]	; (20001ffc <initSprites+0x118>)
20001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer11, flame1_light_bits, flame1_black_width, flame1_black_height);
20001eee:	4944      	ldr	r1, [pc, #272]	; (20002000 <initSprites+0x11c>)
20001ef0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20001ef2:	2327      	movs	r3, #39	; 0x27
20001ef4:	2211      	movs	r2, #17
20001ef6:	f001 f881 	bl	20002ffc <load_sprite>
	flame1Light = pointer11;
20001efa:	4b42      	ldr	r3, [pc, #264]	; (20002004 <initSprites+0x120>)
20001efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20001efe:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempFlameGray;
20001f00:	4b41      	ldr	r3, [pc, #260]	; (20002008 <initSprites+0x124>)
20001f02:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer12, flame1_gray_bits, flame1_black_width, flame1_black_height);
20001f04:	4941      	ldr	r1, [pc, #260]	; (2000200c <initSprites+0x128>)
20001f06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20001f08:	2327      	movs	r3, #39	; 0x27
20001f0a:	2211      	movs	r2, #17
20001f0c:	f001 f876 	bl	20002ffc <load_sprite>
	flame1Gray = pointer12;
20001f10:	4b3f      	ldr	r3, [pc, #252]	; (20002010 <initSprites+0x12c>)
20001f12:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001f14:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempFlameBlack;
20001f16:	4b3f      	ldr	r3, [pc, #252]	; (20002014 <initSprites+0x130>)
20001f18:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer13, flame1_black_bits, flame1_black_width, flame1_black_height);
20001f1a:	493f      	ldr	r1, [pc, #252]	; (20002018 <initSprites+0x134>)
20001f1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001f1e:	2327      	movs	r3, #39	; 0x27
20001f20:	2211      	movs	r2, #17
20001f22:	f001 f86b 	bl	20002ffc <load_sprite>
	flame1Black = pointer13;	
20001f26:	4b3d      	ldr	r3, [pc, #244]	; (2000201c <initSprites+0x138>)
20001f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001f2a:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempFlame2Light;
20001f2c:	4b3c      	ldr	r3, [pc, #240]	; (20002020 <initSprites+0x13c>)
20001f2e:	623b      	str	r3, [r7, #32]
	load_sprite(pointer14, flame2_light_bits, flame2_black_width, flame2_black_height);
20001f30:	493c      	ldr	r1, [pc, #240]	; (20002024 <initSprites+0x140>)
20001f32:	6a38      	ldr	r0, [r7, #32]
20001f34:	2327      	movs	r3, #39	; 0x27
20001f36:	2211      	movs	r2, #17
20001f38:	f001 f860 	bl	20002ffc <load_sprite>
	flame2Light = pointer14;
20001f3c:	4b3a      	ldr	r3, [pc, #232]	; (20002028 <initSprites+0x144>)
20001f3e:	6a3a      	ldr	r2, [r7, #32]
20001f40:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempFlame2Gray;
20001f42:	4b3a      	ldr	r3, [pc, #232]	; (2000202c <initSprites+0x148>)
20001f44:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer15, flame2_gray_bits, flame2_black_width, flame2_black_height);
20001f46:	493a      	ldr	r1, [pc, #232]	; (20002030 <initSprites+0x14c>)
20001f48:	69f8      	ldr	r0, [r7, #28]
20001f4a:	2327      	movs	r3, #39	; 0x27
20001f4c:	2211      	movs	r2, #17
20001f4e:	f001 f855 	bl	20002ffc <load_sprite>
	flame2Gray = pointer15;
20001f52:	4b38      	ldr	r3, [pc, #224]	; (20002034 <initSprites+0x150>)
20001f54:	69fa      	ldr	r2, [r7, #28]
20001f56:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempFlame2Black;
20001f58:	4b37      	ldr	r3, [pc, #220]	; (20002038 <initSprites+0x154>)
20001f5a:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer16, flame2_black_bits, flame2_black_width, flame2_black_height);
20001f5c:	4937      	ldr	r1, [pc, #220]	; (2000203c <initSprites+0x158>)
20001f5e:	69b8      	ldr	r0, [r7, #24]
20001f60:	2327      	movs	r3, #39	; 0x27
20001f62:	2211      	movs	r2, #17
20001f64:	f001 f84a 	bl	20002ffc <load_sprite>
	flame2Black = pointer16;
20001f68:	4b35      	ldr	r3, [pc, #212]	; (20002040 <initSprites+0x15c>)
20001f6a:	69ba      	ldr	r2, [r7, #24]
20001f6c:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempFlame3Light;
20001f6e:	4b35      	ldr	r3, [pc, #212]	; (20002044 <initSprites+0x160>)
20001f70:	617b      	str	r3, [r7, #20]
	load_sprite(finalPointer, flame3_light_bits, flame3_black_width, flame3_black_height);
20001f72:	4935      	ldr	r1, [pc, #212]	; (20002048 <initSprites+0x164>)
20001f74:	6978      	ldr	r0, [r7, #20]
20001f76:	2327      	movs	r3, #39	; 0x27
20001f78:	2211      	movs	r2, #17
20001f7a:	f001 f83f 	bl	20002ffc <load_sprite>
	flame3Light = finalPointer;
20001f7e:	4b33      	ldr	r3, [pc, #204]	; (2000204c <initSprites+0x168>)
20001f80:	697a      	ldr	r2, [r7, #20]
20001f82:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempFlame3Gray;
20001f84:	4b32      	ldr	r3, [pc, #200]	; (20002050 <initSprites+0x16c>)
20001f86:	613b      	str	r3, [r7, #16]
	load_sprite(pointer17, flame3_gray_bits, flame3_black_width, flame3_black_height);
20001f88:	4932      	ldr	r1, [pc, #200]	; (20002054 <initSprites+0x170>)
20001f8a:	6938      	ldr	r0, [r7, #16]
20001f8c:	2327      	movs	r3, #39	; 0x27
20001f8e:	2211      	movs	r2, #17
20001f90:	f001 f834 	bl	20002ffc <load_sprite>
	flame3Gray = pointer17;
20001f94:	4b30      	ldr	r3, [pc, #192]	; (20002058 <initSprites+0x174>)
20001f96:	693a      	ldr	r2, [r7, #16]
20001f98:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempFlame3Black;
20001f9a:	4b30      	ldr	r3, [pc, #192]	; (2000205c <initSprites+0x178>)
20001f9c:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer18, flame3_black_bits, flame3_black_width, flame3_black_height);
20001f9e:	4930      	ldr	r1, [pc, #192]	; (20002060 <initSprites+0x17c>)
20001fa0:	68f8      	ldr	r0, [r7, #12]
20001fa2:	2327      	movs	r3, #39	; 0x27
20001fa4:	2211      	movs	r2, #17
20001fa6:	f001 f829 	bl	20002ffc <load_sprite>
	flame3Black = pointer18;	
20001faa:	4b2e      	ldr	r3, [pc, #184]	; (20002064 <initSprites+0x180>)
20001fac:	68fa      	ldr	r2, [r7, #12]
20001fae:	601a      	str	r2, [r3, #0]
	
	sprite *pointer19 = &tempFlame4Light;
20001fb0:	4b2d      	ldr	r3, [pc, #180]	; (20002068 <initSprites+0x184>)
20001fb2:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer19, flame4_light_bits, flame4_black_width, flame4_black_height);
20001fb4:	492d      	ldr	r1, [pc, #180]	; (2000206c <initSprites+0x188>)
20001fb6:	68b8      	ldr	r0, [r7, #8]
20001fb8:	2327      	movs	r3, #39	; 0x27
20001fba:	2211      	movs	r2, #17
20001fbc:	f001 f81e 	bl	20002ffc <load_sprite>
	flame4Light = pointer19;
20001fc0:	4b2b      	ldr	r3, [pc, #172]	; (20002070 <initSprites+0x18c>)
20001fc2:	68ba      	ldr	r2, [r7, #8]
20001fc4:	601a      	str	r2, [r3, #0]
	sprite *pointer20 = &tempFlame4Gray;
20001fc6:	4b2b      	ldr	r3, [pc, #172]	; (20002074 <initSprites+0x190>)
20001fc8:	607b      	str	r3, [r7, #4]
	load_sprite(pointer20, flame4_gray_bits, flame4_black_width, flame4_black_height);
20001fca:	492b      	ldr	r1, [pc, #172]	; (20002078 <initSprites+0x194>)
20001fcc:	6878      	ldr	r0, [r7, #4]
20001fce:	2327      	movs	r3, #39	; 0x27
20001fd0:	2211      	movs	r2, #17
20001fd2:	f001 f813 	bl	20002ffc <load_sprite>
	flame4Gray = pointer20;
20001fd6:	4b29      	ldr	r3, [pc, #164]	; (2000207c <initSprites+0x198>)
20001fd8:	687a      	ldr	r2, [r7, #4]
20001fda:	601a      	str	r2, [r3, #0]
	sprite *pointer21 = &tempFlame4Black;
20001fdc:	4b28      	ldr	r3, [pc, #160]	; (20002080 <initSprites+0x19c>)
20001fde:	603b      	str	r3, [r7, #0]
	load_sprite(pointer21, flame4_black_bits, flame4_black_width, flame4_black_height);
20001fe0:	4928      	ldr	r1, [pc, #160]	; (20002084 <initSprites+0x1a0>)
20001fe2:	6838      	ldr	r0, [r7, #0]
20001fe4:	2327      	movs	r3, #39	; 0x27
20001fe6:	2211      	movs	r2, #17
20001fe8:	f001 f808 	bl	20002ffc <load_sprite>
	flame4Black = pointer21;	
20001fec:	4b26      	ldr	r3, [pc, #152]	; (20002088 <initSprites+0x1a4>)
20001fee:	683a      	ldr	r2, [r7, #0]
20001ff0:	601a      	str	r2, [r3, #0]
	
}
20001ff2:	46c0      	nop			; (mov r8, r8)
20001ff4:	46bd      	mov	sp, r7
20001ff6:	b00c      	add	sp, #48	; 0x30
20001ff8:	bd80      	pop	{r7, pc}
20001ffa:	46c0      	nop			; (mov r8, r8)
20001ffc:	2000439c 	mulcs	r0, ip, r3
20002000:	2000839c 	mulcs	r0, ip, r3
20002004:	20004314 	andcs	r4, r0, r4, lsl r3
20002008:	20004280 	andcs	r4, r0, r0, lsl #5
2000200c:	20008324 	andcs	r8, r0, r4, lsr #6
20002010:	20004310 	andcs	r4, r0, r0, lsl r3
20002014:	200043b0 			; <UNDEFINED> instruction: 0x200043b0
20002018:	200082ac 	andcs	r8, r0, ip, lsr #5
2000201c:	20004398 	mulcs	r0, r8, r3
20002020:	200042e8 	andcs	r4, r0, r8, ror #5
20002024:	20008504 	andcs	r8, r0, r4, lsl #10
20002028:	200043a8 	andcs	r4, r0, r8, lsr #7
2000202c:	2000434c 	andcs	r4, r0, ip, asr #6
20002030:	2000848c 	andcs	r8, r0, ip, lsl #9
20002034:	2000430c 	andcs	r4, r0, ip, lsl #6
20002038:	20004300 	andcs	r4, r0, r0, lsl #6
2000203c:	20008414 	andcs	r8, r0, r4, lsl r4
20002040:	200043c0 	andcs	r4, r0, r0, asr #7
20002044:	200042a8 	andcs	r4, r0, r8, lsr #5
20002048:	2000866c 	andcs	r8, r0, ip, ror #12
2000204c:	200042a4 	andcs	r4, r0, r4, lsr #5
20002050:	200042f4 	strdcs	r4, [r0], -r4	; <UNPREDICTABLE>
20002054:	200085f4 	strdcs	r8, [r0], -r4
20002058:	200042c0 	andcs	r4, r0, r0, asr #5
2000205c:	20004388 	andcs	r4, r0, r8, lsl #7
20002060:	2000857c 	andcs	r8, r0, ip, ror r5
20002064:	200043ac 	andcs	r4, r0, ip, lsr #7
20002068:	2000428c 	andcs	r4, r0, ip, lsl #5
2000206c:	200087d4 	ldrdcs	r8, [r0], -r4
20002070:	200043bc 			; <UNDEFINED> instruction: 0x200043bc
20002074:	20004324 	andcs	r4, r0, r4, lsr #6
20002078:	2000875c 	andcs	r8, r0, ip, asr r7
2000207c:	20004330 	andcs	r4, r0, r0, lsr r3
20002080:	20004318 	andcs	r4, r0, r8, lsl r3
20002084:	200086e4 	andcs	r8, r0, r4, ror #13
20002088:	20004394 	mulcs	r0, r4, r3

2000208c <init_flame>:
	
void init_flame( GameObject *flameObj ) {
2000208c:	b590      	push	{r4, r7, lr}
2000208e:	b083      	sub	sp, #12
20002090:	af00      	add	r7, sp, #0
20002092:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20002094:	4b29      	ldr	r3, [pc, #164]	; (2000213c <init_flame+0xb0>)
20002096:	681b      	ldr	r3, [r3, #0]
20002098:	2b00      	cmp	r3, #0
2000209a:	d03b      	beq.n	20002114 <init_flame+0x88>
		initSprites();
2000209c:	f7ff ff22 	bl	20001ee4 <initSprites>
		firstTime = 0;			
200020a0:	4b26      	ldr	r3, [pc, #152]	; (2000213c <init_flame+0xb0>)
200020a2:	2200      	movs	r2, #0
200020a4:	601a      	str	r2, [r3, #0]

		flameImages[0] = flame1Image;
200020a6:	4b26      	ldr	r3, [pc, #152]	; (20002140 <init_flame+0xb4>)
200020a8:	4a26      	ldr	r2, [pc, #152]	; (20002144 <init_flame+0xb8>)
200020aa:	ca13      	ldmia	r2!, {r0, r1, r4}
200020ac:	c313      	stmia	r3!, {r0, r1, r4}
		flameImages[1] = flame2Image;
200020ae:	4b24      	ldr	r3, [pc, #144]	; (20002140 <init_flame+0xb4>)
200020b0:	4a25      	ldr	r2, [pc, #148]	; (20002148 <init_flame+0xbc>)
200020b2:	330c      	adds	r3, #12
200020b4:	ca13      	ldmia	r2!, {r0, r1, r4}
200020b6:	c313      	stmia	r3!, {r0, r1, r4}
		flameImages[2] = flame3Image;
200020b8:	4b21      	ldr	r3, [pc, #132]	; (20002140 <init_flame+0xb4>)
200020ba:	4a24      	ldr	r2, [pc, #144]	; (2000214c <init_flame+0xc0>)
200020bc:	3318      	adds	r3, #24
200020be:	ca13      	ldmia	r2!, {r0, r1, r4}
200020c0:	c313      	stmia	r3!, {r0, r1, r4}
		flameImages[3] = flame4Image;
200020c2:	4b1f      	ldr	r3, [pc, #124]	; (20002140 <init_flame+0xb4>)
200020c4:	4a22      	ldr	r2, [pc, #136]	; (20002150 <init_flame+0xc4>)
200020c6:	3324      	adds	r3, #36	; 0x24
200020c8:	ca13      	ldmia	r2!, {r0, r1, r4}
200020ca:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&flameImages[0], flame1Black, flame1Gray, flame1Light);
200020cc:	4b21      	ldr	r3, [pc, #132]	; (20002154 <init_flame+0xc8>)
200020ce:	6819      	ldr	r1, [r3, #0]
200020d0:	4b21      	ldr	r3, [pc, #132]	; (20002158 <init_flame+0xcc>)
200020d2:	681a      	ldr	r2, [r3, #0]
200020d4:	4b21      	ldr	r3, [pc, #132]	; (2000215c <init_flame+0xd0>)
200020d6:	681b      	ldr	r3, [r3, #0]
200020d8:	4819      	ldr	r0, [pc, #100]	; (20002140 <init_flame+0xb4>)
200020da:	f000 ff7b 	bl	20002fd4 <load_image>
		load_image(&flameImages[1], flame2Black, flame2Gray, flame2Light);
200020de:	4b20      	ldr	r3, [pc, #128]	; (20002160 <init_flame+0xd4>)
200020e0:	6819      	ldr	r1, [r3, #0]
200020e2:	4b20      	ldr	r3, [pc, #128]	; (20002164 <init_flame+0xd8>)
200020e4:	681a      	ldr	r2, [r3, #0]
200020e6:	4b20      	ldr	r3, [pc, #128]	; (20002168 <init_flame+0xdc>)
200020e8:	681b      	ldr	r3, [r3, #0]
200020ea:	4820      	ldr	r0, [pc, #128]	; (2000216c <init_flame+0xe0>)
200020ec:	f000 ff72 	bl	20002fd4 <load_image>
		load_image(&flameImages[2], flame3Black, flame3Gray, flame3Light);
200020f0:	4b1f      	ldr	r3, [pc, #124]	; (20002170 <init_flame+0xe4>)
200020f2:	6819      	ldr	r1, [r3, #0]
200020f4:	4b1f      	ldr	r3, [pc, #124]	; (20002174 <init_flame+0xe8>)
200020f6:	681a      	ldr	r2, [r3, #0]
200020f8:	4b1f      	ldr	r3, [pc, #124]	; (20002178 <init_flame+0xec>)
200020fa:	681b      	ldr	r3, [r3, #0]
200020fc:	481f      	ldr	r0, [pc, #124]	; (2000217c <init_flame+0xf0>)
200020fe:	f000 ff69 	bl	20002fd4 <load_image>
		load_image(&flameImages[3], flame4Black, flame4Gray, flame4Light);
20002102:	4b1f      	ldr	r3, [pc, #124]	; (20002180 <init_flame+0xf4>)
20002104:	6819      	ldr	r1, [r3, #0]
20002106:	4b1f      	ldr	r3, [pc, #124]	; (20002184 <init_flame+0xf8>)
20002108:	681a      	ldr	r2, [r3, #0]
2000210a:	4b1f      	ldr	r3, [pc, #124]	; (20002188 <init_flame+0xfc>)
2000210c:	681b      	ldr	r3, [r3, #0]
2000210e:	481f      	ldr	r0, [pc, #124]	; (2000218c <init_flame+0x100>)
20002110:	f000 ff60 	bl	20002fd4 <load_image>
}
	
	flameObj->images = flameImages;
20002114:	687b      	ldr	r3, [r7, #4]
20002116:	4a0a      	ldr	r2, [pc, #40]	; (20002140 <init_flame+0xb4>)
20002118:	601a      	str	r2, [r3, #0]

	flameObj->current_frame = 0;
2000211a:	687b      	ldr	r3, [r7, #4]
2000211c:	2200      	movs	r2, #0
2000211e:	615a      	str	r2, [r3, #20]
	flameObj->n_frames = 4;
20002120:	687b      	ldr	r3, [r7, #4]
20002122:	2204      	movs	r2, #4
20002124:	619a      	str	r2, [r3, #24]
	flameObj->animation_speed = 1;
20002126:	687b      	ldr	r3, [r7, #4]
20002128:	2201      	movs	r2, #1
2000212a:	61da      	str	r2, [r3, #28]
	flameObj->animation_counter = 0;
2000212c:	687b      	ldr	r3, [r7, #4]
2000212e:	2200      	movs	r2, #0
20002130:	621a      	str	r2, [r3, #32]
}
20002132:	46c0      	nop			; (mov r8, r8)
20002134:	46bd      	mov	sp, r7
20002136:	b003      	add	sp, #12
20002138:	bd90      	pop	{r4, r7, pc}
2000213a:	46c0      	nop			; (mov r8, r8)
2000213c:	2000884c 	andcs	r8, r0, ip, asr #16
20002140:	20004358 	andcs	r4, r0, r8, asr r3
20002144:	20004340 	andcs	r4, r0, r0, asr #6
20002148:	20004298 	mulcs	r0, r8, r2
2000214c:	200042b4 			; <UNDEFINED> instruction: 0x200042b4
20002150:	20004334 	andcs	r4, r0, r4, lsr r3
20002154:	20004398 	mulcs	r0, r8, r3
20002158:	20004310 	andcs	r4, r0, r0, lsl r3
2000215c:	20004314 	andcs	r4, r0, r4, lsl r3
20002160:	200043c0 	andcs	r4, r0, r0, asr #7
20002164:	2000430c 	andcs	r4, r0, ip, lsl #6
20002168:	200043a8 	andcs	r4, r0, r8, lsr #7
2000216c:	20004364 	andcs	r4, r0, r4, ror #6
20002170:	200043ac 	andcs	r4, r0, ip, lsr #7
20002174:	200042c0 	andcs	r4, r0, r0, asr #5
20002178:	200042a4 	andcs	r4, r0, r4, lsr #5
2000217c:	20004370 	andcs	r4, r0, r0, ror r3
20002180:	20004394 	mulcs	r0, r4, r3
20002184:	20004330 	andcs	r4, r0, r0, lsr r3
20002188:	200043bc 			; <UNDEFINED> instruction: 0x200043bc
2000218c:	2000437c 	andcs	r4, r0, ip, ror r3

20002190 <delay_250ns>:
#include "graphics.h"


void delay_250ns(void){
20002190:	b580      	push	{r7, lr}
20002192:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
20002194:	4b0c      	ldr	r3, [pc, #48]	; (200021c8 <delay_250ns+0x38>)
20002196:	2200      	movs	r2, #0
20002198:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/4) -1);
2000219a:	4b0c      	ldr	r3, [pc, #48]	; (200021cc <delay_250ns+0x3c>)
2000219c:	2229      	movs	r2, #41	; 0x29
2000219e:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
200021a0:	4b0b      	ldr	r3, [pc, #44]	; (200021d0 <delay_250ns+0x40>)
200021a2:	2200      	movs	r2, #0
200021a4:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
200021a6:	4b08      	ldr	r3, [pc, #32]	; (200021c8 <delay_250ns+0x38>)
200021a8:	2205      	movs	r2, #5
200021aa:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
200021ac:	46c0      	nop			; (mov r8, r8)
200021ae:	4b06      	ldr	r3, [pc, #24]	; (200021c8 <delay_250ns+0x38>)
200021b0:	681a      	ldr	r2, [r3, #0]
200021b2:	2380      	movs	r3, #128	; 0x80
200021b4:	025b      	lsls	r3, r3, #9
200021b6:	4013      	ands	r3, r2
200021b8:	d0f9      	beq.n	200021ae <delay_250ns+0x1e>
	*STK_CTRL = 0;
200021ba:	4b03      	ldr	r3, [pc, #12]	; (200021c8 <delay_250ns+0x38>)
200021bc:	2200      	movs	r2, #0
200021be:	601a      	str	r2, [r3, #0]
}
200021c0:	46c0      	nop			; (mov r8, r8)
200021c2:	46bd      	mov	sp, r7
200021c4:	bd80      	pop	{r7, pc}
200021c6:	46c0      	nop			; (mov r8, r8)
200021c8:	e000e010 	and	lr, r0, r0, lsl r0
200021cc:	e000e014 	and	lr, r0, r4, lsl r0
200021d0:	e000e018 	and	lr, r0, r8, lsl r0

200021d4 <delay_500ns>:

void delay_500ns(void){
200021d4:	b580      	push	{r7, lr}
200021d6:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
200021d8:	4b0c      	ldr	r3, [pc, #48]	; (2000220c <delay_500ns+0x38>)
200021da:	2200      	movs	r2, #0
200021dc:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/2) -1);
200021de:	4b0c      	ldr	r3, [pc, #48]	; (20002210 <delay_500ns+0x3c>)
200021e0:	2253      	movs	r2, #83	; 0x53
200021e2:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
200021e4:	4b0b      	ldr	r3, [pc, #44]	; (20002214 <delay_500ns+0x40>)
200021e6:	2200      	movs	r2, #0
200021e8:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
200021ea:	4b08      	ldr	r3, [pc, #32]	; (2000220c <delay_500ns+0x38>)
200021ec:	2205      	movs	r2, #5
200021ee:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
200021f0:	46c0      	nop			; (mov r8, r8)
200021f2:	4b06      	ldr	r3, [pc, #24]	; (2000220c <delay_500ns+0x38>)
200021f4:	681a      	ldr	r2, [r3, #0]
200021f6:	2380      	movs	r3, #128	; 0x80
200021f8:	025b      	lsls	r3, r3, #9
200021fa:	4013      	ands	r3, r2
200021fc:	d0f9      	beq.n	200021f2 <delay_500ns+0x1e>
	*STK_CTRL = 0;
200021fe:	4b03      	ldr	r3, [pc, #12]	; (2000220c <delay_500ns+0x38>)
20002200:	2200      	movs	r2, #0
20002202:	601a      	str	r2, [r3, #0]
}
20002204:	46c0      	nop			; (mov r8, r8)
20002206:	46bd      	mov	sp, r7
20002208:	bd80      	pop	{r7, pc}
2000220a:	46c0      	nop			; (mov r8, r8)
2000220c:	e000e010 	and	lr, r0, r0, lsl r0
20002210:	e000e014 	and	lr, r0, r4, lsl r0
20002214:	e000e018 	and	lr, r0, r8, lsl r0

20002218 <delay_micro>:

void delay_micro(unsigned int us){
20002218:	b580      	push	{r7, lr}
2000221a:	b082      	sub	sp, #8
2000221c:	af00      	add	r7, sp, #0
2000221e:	6078      	str	r0, [r7, #4]
	while(us--) {
20002220:	e007      	b.n	20002232 <delay_micro+0x1a>
		delay_250ns();
20002222:	f7ff ffb5 	bl	20002190 <delay_250ns>
		delay_250ns();
20002226:	f7ff ffb3 	bl	20002190 <delay_250ns>
		delay_250ns();
2000222a:	f7ff ffb1 	bl	20002190 <delay_250ns>
		delay_250ns();
2000222e:	f7ff ffaf 	bl	20002190 <delay_250ns>
	while(us--) {
20002232:	687b      	ldr	r3, [r7, #4]
20002234:	1e5a      	subs	r2, r3, #1
20002236:	607a      	str	r2, [r7, #4]
20002238:	2b00      	cmp	r3, #0
2000223a:	d1f2      	bne.n	20002222 <delay_micro+0xa>
	}
}
2000223c:	46c0      	nop			; (mov r8, r8)
2000223e:	46bd      	mov	sp, r7
20002240:	b002      	add	sp, #8
20002242:	bd80      	pop	{r7, pc}

20002244 <delay_milli>:

void delay_milli(unsigned int ms){
20002244:	b580      	push	{r7, lr}
20002246:	b082      	sub	sp, #8
20002248:	af00      	add	r7, sp, #0
2000224a:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		while(ms--)
			delay_micro(1);
	#else
		while(ms--)
2000224c:	e004      	b.n	20002258 <delay_milli+0x14>
			delay_micro(1000);
2000224e:	23fa      	movs	r3, #250	; 0xfa
20002250:	009b      	lsls	r3, r3, #2
20002252:	0018      	movs	r0, r3
20002254:	f7ff ffe0 	bl	20002218 <delay_micro>
		while(ms--)
20002258:	687b      	ldr	r3, [r7, #4]
2000225a:	1e5a      	subs	r2, r3, #1
2000225c:	607a      	str	r2, [r7, #4]
2000225e:	2b00      	cmp	r3, #0
20002260:	d1f5      	bne.n	2000224e <delay_milli+0xa>
	#endif
}
20002262:	46c0      	nop			; (mov r8, r8)
20002264:	46bd      	mov	sp, r7
20002266:	b002      	add	sp, #8
20002268:	bd80      	pop	{r7, pc}

2000226a <clear_thisBackBuffer>:
uint8_t draw_buffer_black_light[1024]; // 128 * 64 / 8
uint8_t draw_buffer_black_gray_light[1024]; // 128 * 64 / 8
uint8_t backBuffer[1024]; // 128 * 64 / 8
uint8_t backBufferGray[1024]; // 128 * 64 / 8
uint8_t backBufferLight[1024]; // 128 * 64 / 8
void clear_thisBackBuffer(uint8_t *buffer) {
2000226a:	b580      	push	{r7, lr}
2000226c:	b084      	sub	sp, #16
2000226e:	af00      	add	r7, sp, #0
20002270:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < 1024; i++)
20002272:	2300      	movs	r3, #0
20002274:	60fb      	str	r3, [r7, #12]
20002276:	e007      	b.n	20002288 <clear_thisBackBuffer+0x1e>
		buffer[i] = 0;
20002278:	68fb      	ldr	r3, [r7, #12]
2000227a:	687a      	ldr	r2, [r7, #4]
2000227c:	18d3      	adds	r3, r2, r3
2000227e:	2200      	movs	r2, #0
20002280:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 1024; i++)
20002282:	68fb      	ldr	r3, [r7, #12]
20002284:	3301      	adds	r3, #1
20002286:	60fb      	str	r3, [r7, #12]
20002288:	68fb      	ldr	r3, [r7, #12]
2000228a:	4a03      	ldr	r2, [pc, #12]	; (20002298 <clear_thisBackBuffer+0x2e>)
2000228c:	4293      	cmp	r3, r2
2000228e:	ddf3      	ble.n	20002278 <clear_thisBackBuffer+0xe>
}
20002290:	46c0      	nop			; (mov r8, r8)
20002292:	46bd      	mov	sp, r7
20002294:	b004      	add	sp, #16
20002296:	bd80      	pop	{r7, pc}
20002298:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

2000229c <clear_backBuffer>:
void clear_backBuffer() {
2000229c:	b580      	push	{r7, lr}
2000229e:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
200022a0:	4b03      	ldr	r3, [pc, #12]	; (200022b0 <clear_backBuffer+0x14>)
200022a2:	0018      	movs	r0, r3
200022a4:	f7ff ffe1 	bl	2000226a <clear_thisBackBuffer>
}
200022a8:	46c0      	nop			; (mov r8, r8)
200022aa:	46bd      	mov	sp, r7
200022ac:	bd80      	pop	{r7, pc}
200022ae:	46c0      	nop			; (mov r8, r8)
200022b0:	20004bc4 	andcs	r4, r0, r4, asr #23

200022b4 <clear_all_backBuffers>:
void clear_all_backBuffers() {
200022b4:	b580      	push	{r7, lr}
200022b6:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
200022b8:	4b07      	ldr	r3, [pc, #28]	; (200022d8 <clear_all_backBuffers+0x24>)
200022ba:	0018      	movs	r0, r3
200022bc:	f7ff ffd5 	bl	2000226a <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferGray);
200022c0:	4b06      	ldr	r3, [pc, #24]	; (200022dc <clear_all_backBuffers+0x28>)
200022c2:	0018      	movs	r0, r3
200022c4:	f7ff ffd1 	bl	2000226a <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferLight);
200022c8:	4b05      	ldr	r3, [pc, #20]	; (200022e0 <clear_all_backBuffers+0x2c>)
200022ca:	0018      	movs	r0, r3
200022cc:	f7ff ffcd 	bl	2000226a <clear_thisBackBuffer>
}
200022d0:	46c0      	nop			; (mov r8, r8)
200022d2:	46bd      	mov	sp, r7
200022d4:	bd80      	pop	{r7, pc}
200022d6:	46c0      	nop			; (mov r8, r8)
200022d8:	20004bc4 	andcs	r4, r0, r4, asr #23
200022dc:	200043c4 	andcs	r4, r0, r4, asr #7
200022e0:	20005bc4 	andcs	r5, r0, r4, asr #23

200022e4 <graphic_ctrl_bit_set>:

/* välj grafik-display och ettställ de bitar som är 1 i x */
static void graphic_ctrl_bit_set( uint8_t x) {
200022e4:	b580      	push	{r7, lr}
200022e6:	b084      	sub	sp, #16
200022e8:	af00      	add	r7, sp, #0
200022ea:	0002      	movs	r2, r0
200022ec:	1dfb      	adds	r3, r7, #7
200022ee:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
200022f0:	4a0f      	ldr	r2, [pc, #60]	; (20002330 <graphic_ctrl_bit_set+0x4c>)
200022f2:	230f      	movs	r3, #15
200022f4:	18fb      	adds	r3, r7, r3
200022f6:	7812      	ldrb	r2, [r2, #0]
200022f8:	701a      	strb	r2, [r3, #0]
	c |= x;
200022fa:	230f      	movs	r3, #15
200022fc:	18fb      	adds	r3, r7, r3
200022fe:	220f      	movs	r2, #15
20002300:	18b9      	adds	r1, r7, r2
20002302:	1dfa      	adds	r2, r7, #7
20002304:	7809      	ldrb	r1, [r1, #0]
20002306:	7812      	ldrb	r2, [r2, #0]
20002308:	430a      	orrs	r2, r1
2000230a:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
2000230c:	230f      	movs	r3, #15
2000230e:	18fb      	adds	r3, r7, r3
20002310:	220f      	movs	r2, #15
20002312:	18ba      	adds	r2, r7, r2
20002314:	7812      	ldrb	r2, [r2, #0]
20002316:	2104      	movs	r1, #4
20002318:	438a      	bics	r2, r1
2000231a:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
2000231c:	4a04      	ldr	r2, [pc, #16]	; (20002330 <graphic_ctrl_bit_set+0x4c>)
2000231e:	230f      	movs	r3, #15
20002320:	18fb      	adds	r3, r7, r3
20002322:	781b      	ldrb	r3, [r3, #0]
20002324:	7013      	strb	r3, [r2, #0]
}
20002326:	46c0      	nop			; (mov r8, r8)
20002328:	46bd      	mov	sp, r7
2000232a:	b004      	add	sp, #16
2000232c:	bd80      	pop	{r7, pc}
2000232e:	46c0      	nop			; (mov r8, r8)
20002330:	40021014 	andmi	r1, r2, r4, lsl r0

20002334 <graphic_ctrl_bit_clear>:
/* välj grafik-display och nollställ de bitar som är 1 i x */
static void graphic_ctrl_bit_clear( uint8_t x) {
20002334:	b580      	push	{r7, lr}
20002336:	b084      	sub	sp, #16
20002338:	af00      	add	r7, sp, #0
2000233a:	0002      	movs	r2, r0
2000233c:	1dfb      	adds	r3, r7, #7
2000233e:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
20002340:	4a11      	ldr	r2, [pc, #68]	; (20002388 <graphic_ctrl_bit_clear+0x54>)
20002342:	230f      	movs	r3, #15
20002344:	18fb      	adds	r3, r7, r3
20002346:	7812      	ldrb	r2, [r2, #0]
20002348:	701a      	strb	r2, [r3, #0]
	c &= ~x;
2000234a:	1dfb      	adds	r3, r7, #7
2000234c:	781b      	ldrb	r3, [r3, #0]
2000234e:	b25b      	sxtb	r3, r3
20002350:	43db      	mvns	r3, r3
20002352:	b25b      	sxtb	r3, r3
20002354:	220f      	movs	r2, #15
20002356:	18ba      	adds	r2, r7, r2
20002358:	7812      	ldrb	r2, [r2, #0]
2000235a:	b252      	sxtb	r2, r2
2000235c:	4013      	ands	r3, r2
2000235e:	b25a      	sxtb	r2, r3
20002360:	230f      	movs	r3, #15
20002362:	18fb      	adds	r3, r7, r3
20002364:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
20002366:	230f      	movs	r3, #15
20002368:	18fb      	adds	r3, r7, r3
2000236a:	220f      	movs	r2, #15
2000236c:	18ba      	adds	r2, r7, r2
2000236e:	7812      	ldrb	r2, [r2, #0]
20002370:	2104      	movs	r1, #4
20002372:	438a      	bics	r2, r1
20002374:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20002376:	4a04      	ldr	r2, [pc, #16]	; (20002388 <graphic_ctrl_bit_clear+0x54>)
20002378:	230f      	movs	r3, #15
2000237a:	18fb      	adds	r3, r7, r3
2000237c:	781b      	ldrb	r3, [r3, #0]
2000237e:	7013      	strb	r3, [r2, #0]
}
20002380:	46c0      	nop			; (mov r8, r8)
20002382:	46bd      	mov	sp, r7
20002384:	b004      	add	sp, #16
20002386:	bd80      	pop	{r7, pc}
20002388:	40021014 	andmi	r1, r2, r4, lsl r0

2000238c <select_controller>:
void select_controller( uint8_t controller) {
2000238c:	b580      	push	{r7, lr}
2000238e:	b082      	sub	sp, #8
20002390:	af00      	add	r7, sp, #0
20002392:	0002      	movs	r2, r0
20002394:	1dfb      	adds	r3, r7, #7
20002396:	701a      	strb	r2, [r3, #0]
	switch (controller) {
20002398:	1dfb      	adds	r3, r7, #7
2000239a:	781b      	ldrb	r3, [r3, #0]
2000239c:	2b08      	cmp	r3, #8
2000239e:	d00f      	beq.n	200023c0 <select_controller+0x34>
200023a0:	dc02      	bgt.n	200023a8 <select_controller+0x1c>
200023a2:	2b00      	cmp	r3, #0
200023a4:	d005      	beq.n	200023b2 <select_controller+0x26>
		case (B_CS1|B_CS2): 
			graphic_ctrl_bit_set(B_CS1); 
			graphic_ctrl_bit_set(B_CS2); 
			break;
	}
}
200023a6:	e020      	b.n	200023ea <select_controller+0x5e>
	switch (controller) {
200023a8:	2b10      	cmp	r3, #16
200023aa:	d010      	beq.n	200023ce <select_controller+0x42>
200023ac:	2b18      	cmp	r3, #24
200023ae:	d015      	beq.n	200023dc <select_controller+0x50>
}
200023b0:	e01b      	b.n	200023ea <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
200023b2:	2008      	movs	r0, #8
200023b4:	f7ff ffbe 	bl	20002334 <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_clear(B_CS2); 
200023b8:	2010      	movs	r0, #16
200023ba:	f7ff ffbb 	bl	20002334 <graphic_ctrl_bit_clear>
			break;
200023be:	e014      	b.n	200023ea <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
200023c0:	2008      	movs	r0, #8
200023c2:	f7ff ff8f 	bl	200022e4 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS2); 
200023c6:	2010      	movs	r0, #16
200023c8:	f7ff ffb4 	bl	20002334 <graphic_ctrl_bit_clear>
			break;
200023cc:	e00d      	b.n	200023ea <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
200023ce:	2008      	movs	r0, #8
200023d0:	f7ff ffb0 	bl	20002334 <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_set(B_CS2); 
200023d4:	2010      	movs	r0, #16
200023d6:	f7ff ff85 	bl	200022e4 <graphic_ctrl_bit_set>
			break;
200023da:	e006      	b.n	200023ea <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
200023dc:	2008      	movs	r0, #8
200023de:	f7ff ff81 	bl	200022e4 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_set(B_CS2); 
200023e2:	2010      	movs	r0, #16
200023e4:	f7ff ff7e 	bl	200022e4 <graphic_ctrl_bit_set>
			break;
200023e8:	46c0      	nop			; (mov r8, r8)
}
200023ea:	46c0      	nop			; (mov r8, r8)
200023ec:	46bd      	mov	sp, r7
200023ee:	b002      	add	sp, #8
200023f0:	bd80      	pop	{r7, pc}

200023f2 <graphic_wait_ready>:

void graphic_wait_ready( void ) {
200023f2:	b580      	push	{r7, lr}
200023f4:	b082      	sub	sp, #8
200023f6:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
200023f8:	2040      	movs	r0, #64	; 0x40
200023fa:	f7ff ff9b 	bl	20002334 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
200023fe:	4b14      	ldr	r3, [pc, #80]	; (20002450 <graphic_wait_ready+0x5e>)
20002400:	4a14      	ldr	r2, [pc, #80]	; (20002454 <graphic_wait_ready+0x62>)
20002402:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
20002404:	2001      	movs	r0, #1
20002406:	f7ff ff95 	bl	20002334 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
2000240a:	2002      	movs	r0, #2
2000240c:	f7ff ff6a 	bl	200022e4 <graphic_ctrl_bit_set>
	delay_500ns();
20002410:	f7ff fee0 	bl	200021d4 <delay_500ns>
	
	while(1) {
		graphic_ctrl_bit_set(B_E);
20002414:	2040      	movs	r0, #64	; 0x40
20002416:	f7ff ff65 	bl	200022e4 <graphic_ctrl_bit_set>
		delay_500ns();
2000241a:	f7ff fedb 	bl	200021d4 <delay_500ns>
		c = *portIdrHigh & LCD_BUSY; //...
2000241e:	4b0e      	ldr	r3, [pc, #56]	; (20002458 <graphic_wait_ready+0x66>)
20002420:	781b      	ldrb	r3, [r3, #0]
20002422:	b2da      	uxtb	r2, r3
20002424:	1dfb      	adds	r3, r7, #7
20002426:	217f      	movs	r1, #127	; 0x7f
20002428:	438a      	bics	r2, r1
2000242a:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
2000242c:	2040      	movs	r0, #64	; 0x40
2000242e:	f7ff ff81 	bl	20002334 <graphic_ctrl_bit_clear>
		delay_500ns();
20002432:	f7ff fecf 	bl	200021d4 <delay_500ns>
		/*if (*portIdrHigh & 0x80 == 0x80) {
			break; }*/
		if (c == 0) break;
20002436:	1dfb      	adds	r3, r7, #7
20002438:	781b      	ldrb	r3, [r3, #0]
2000243a:	2b00      	cmp	r3, #0
2000243c:	d000      	beq.n	20002440 <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
2000243e:	e7e9      	b.n	20002414 <graphic_wait_ready+0x22>
		if (c == 0) break;
20002440:	46c0      	nop			; (mov r8, r8)
	}
	//graphic_ctrl_bit_set(B_E); //<--
	*portModer = 0x55555555;	
20002442:	4b03      	ldr	r3, [pc, #12]	; (20002450 <graphic_wait_ready+0x5e>)
20002444:	4a05      	ldr	r2, [pc, #20]	; (2000245c <graphic_wait_ready+0x6a>)
20002446:	601a      	str	r2, [r3, #0]
}
20002448:	46c0      	nop			; (mov r8, r8)
2000244a:	46bd      	mov	sp, r7
2000244c:	b002      	add	sp, #8
2000244e:	bd80      	pop	{r7, pc}
20002450:	40021000 	andmi	r1, r2, r0
20002454:	00005555 	andeq	r5, r0, r5, asr r5
20002458:	40021011 	andmi	r1, r2, r1, lsl r0
2000245c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20002460 <graphic_read>:

static uint8_t graphic_read(uint8_t controller) {
20002460:	b580      	push	{r7, lr}
20002462:	b084      	sub	sp, #16
20002464:	af00      	add	r7, sp, #0
20002466:	0002      	movs	r2, r0
20002468:	1dfb      	adds	r3, r7, #7
2000246a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000246c:	2040      	movs	r0, #64	; 0x40
2000246e:	f7ff ff61 	bl	20002334 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
20002472:	4b1c      	ldr	r3, [pc, #112]	; (200024e4 <graphic_read+0x84>)
20002474:	4a1c      	ldr	r2, [pc, #112]	; (200024e8 <graphic_read+0x88>)
20002476:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS);
20002478:	2001      	movs	r0, #1
2000247a:	f7ff ff33 	bl	200022e4 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_set(B_RW);
2000247e:	2002      	movs	r0, #2
20002480:	f7ff ff30 	bl	200022e4 <graphic_ctrl_bit_set>
	select_controller(controller);
20002484:	1dfb      	adds	r3, r7, #7
20002486:	781b      	ldrb	r3, [r3, #0]
20002488:	0018      	movs	r0, r3
2000248a:	f7ff ff7f 	bl	2000238c <select_controller>
	delay_500ns();
2000248e:	f7ff fea1 	bl	200021d4 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20002492:	2040      	movs	r0, #64	; 0x40
20002494:	f7ff ff26 	bl	200022e4 <graphic_ctrl_bit_set>
	delay_500ns();
20002498:	f7ff fe9c 	bl	200021d4 <delay_500ns>
	unsigned char rv = *portIdrHigh;
2000249c:	4a13      	ldr	r2, [pc, #76]	; (200024ec <graphic_read+0x8c>)
2000249e:	230f      	movs	r3, #15
200024a0:	18fb      	adds	r3, r7, r3
200024a2:	7812      	ldrb	r2, [r2, #0]
200024a4:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200024a6:	2040      	movs	r0, #64	; 0x40
200024a8:	f7ff ff44 	bl	20002334 <graphic_ctrl_bit_clear>
	*portModer = 0x55555555;
200024ac:	4b0d      	ldr	r3, [pc, #52]	; (200024e4 <graphic_read+0x84>)
200024ae:	4a10      	ldr	r2, [pc, #64]	; (200024f0 <graphic_read+0x90>)
200024b0:	601a      	str	r2, [r3, #0]
	
	if(controller == B_CS1) {
200024b2:	1dfb      	adds	r3, r7, #7
200024b4:	781b      	ldrb	r3, [r3, #0]
200024b6:	2b08      	cmp	r3, #8
200024b8:	d104      	bne.n	200024c4 <graphic_read+0x64>
		select_controller(B_CS1);
200024ba:	2008      	movs	r0, #8
200024bc:	f7ff ff66 	bl	2000238c <select_controller>
		graphic_wait_ready();
200024c0:	f7ff ff97 	bl	200023f2 <graphic_wait_ready>
	}
	if(controller == B_CS2) {
200024c4:	1dfb      	adds	r3, r7, #7
200024c6:	781b      	ldrb	r3, [r3, #0]
200024c8:	2b10      	cmp	r3, #16
200024ca:	d104      	bne.n	200024d6 <graphic_read+0x76>
		select_controller(B_CS2);
200024cc:	2010      	movs	r0, #16
200024ce:	f7ff ff5d 	bl	2000238c <select_controller>
		graphic_wait_ready();
200024d2:	f7ff ff8e 	bl	200023f2 <graphic_wait_ready>
	}
	
	return rv;
200024d6:	230f      	movs	r3, #15
200024d8:	18fb      	adds	r3, r7, r3
200024da:	781b      	ldrb	r3, [r3, #0]
}
200024dc:	0018      	movs	r0, r3
200024de:	46bd      	mov	sp, r7
200024e0:	b004      	add	sp, #16
200024e2:	bd80      	pop	{r7, pc}
200024e4:	40021000 	andmi	r1, r2, r0
200024e8:	00005555 	andeq	r5, r0, r5, asr r5
200024ec:	40021011 	andmi	r1, r2, r1, lsl r0
200024f0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200024f4 <graphic_read_data>:

graphic_read_data(uint8_t controller) {
200024f4:	b580      	push	{r7, lr}
200024f6:	b082      	sub	sp, #8
200024f8:	af00      	add	r7, sp, #0
200024fa:	0002      	movs	r2, r0
200024fc:	1dfb      	adds	r3, r7, #7
200024fe:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
20002500:	1dfb      	adds	r3, r7, #7
20002502:	781b      	ldrb	r3, [r3, #0]
20002504:	0018      	movs	r0, r3
20002506:	f7ff ffab 	bl	20002460 <graphic_read>
	graphic_read(controller);
2000250a:	1dfb      	adds	r3, r7, #7
2000250c:	781b      	ldrb	r3, [r3, #0]
2000250e:	0018      	movs	r0, r3
20002510:	f7ff ffa6 	bl	20002460 <graphic_read>
}
20002514:	46c0      	nop			; (mov r8, r8)
20002516:	0018      	movs	r0, r3
20002518:	46bd      	mov	sp, r7
2000251a:	b002      	add	sp, #8
2000251c:	bd80      	pop	{r7, pc}

2000251e <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller) {
2000251e:	b580      	push	{r7, lr}
20002520:	b082      	sub	sp, #8
20002522:	af00      	add	r7, sp, #0
20002524:	0002      	movs	r2, r0
20002526:	1dfb      	adds	r3, r7, #7
20002528:	701a      	strb	r2, [r3, #0]
2000252a:	1dbb      	adds	r3, r7, #6
2000252c:	1c0a      	adds	r2, r1, #0
2000252e:	701a      	strb	r2, [r3, #0]
	*portOdrHigh = value; //I
20002530:	4a19      	ldr	r2, [pc, #100]	; (20002598 <graphic_write+0x7a>)
20002532:	1dfb      	adds	r3, r7, #7
20002534:	781b      	ldrb	r3, [r3, #0]
20002536:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
20002538:	1dbb      	adds	r3, r7, #6
2000253a:	781b      	ldrb	r3, [r3, #0]
2000253c:	0018      	movs	r0, r3
2000253e:	f7ff ff25 	bl	2000238c <select_controller>
	delay_500ns();
20002542:	f7ff fe47 	bl	200021d4 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20002546:	2040      	movs	r0, #64	; 0x40
20002548:	f7ff fecc 	bl	200022e4 <graphic_ctrl_bit_set>
	delay_500ns();
2000254c:	f7ff fe42 	bl	200021d4 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
20002550:	2040      	movs	r0, #64	; 0x40
20002552:	f7ff feef 	bl	20002334 <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1) {
20002556:	1dbb      	adds	r3, r7, #6
20002558:	781b      	ldrb	r3, [r3, #0]
2000255a:	2208      	movs	r2, #8
2000255c:	4013      	ands	r3, r2
2000255e:	d004      	beq.n	2000256a <graphic_write+0x4c>
		select_controller(B_CS1);
20002560:	2008      	movs	r0, #8
20002562:	f7ff ff13 	bl	2000238c <select_controller>
		graphic_wait_ready();
20002566:	f7ff ff44 	bl	200023f2 <graphic_wait_ready>
	}
	if(controller & B_CS2) {
2000256a:	1dbb      	adds	r3, r7, #6
2000256c:	781b      	ldrb	r3, [r3, #0]
2000256e:	2210      	movs	r2, #16
20002570:	4013      	ands	r3, r2
20002572:	d004      	beq.n	2000257e <graphic_write+0x60>
		select_controller(B_CS2);
20002574:	2010      	movs	r0, #16
20002576:	f7ff ff09 	bl	2000238c <select_controller>
		graphic_wait_ready();
2000257a:	f7ff ff3a 	bl	200023f2 <graphic_wait_ready>
	}
	
	*portOdrHigh = 0;	//I
2000257e:	4b06      	ldr	r3, [pc, #24]	; (20002598 <graphic_write+0x7a>)
20002580:	2200      	movs	r2, #0
20002582:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
20002584:	2040      	movs	r0, #64	; 0x40
20002586:	f7ff fead 	bl	200022e4 <graphic_ctrl_bit_set>
	select_controller(0);
2000258a:	2000      	movs	r0, #0
2000258c:	f7ff fefe 	bl	2000238c <select_controller>
}
20002590:	46c0      	nop			; (mov r8, r8)
20002592:	46bd      	mov	sp, r7
20002594:	b002      	add	sp, #8
20002596:	bd80      	pop	{r7, pc}
20002598:	40021015 	andmi	r1, r2, r5, lsl r0

2000259c <graphic_write_command>:
void graphic_write_command(uint8_t command, uint8_t controller) {
2000259c:	b580      	push	{r7, lr}
2000259e:	b082      	sub	sp, #8
200025a0:	af00      	add	r7, sp, #0
200025a2:	0002      	movs	r2, r0
200025a4:	1dfb      	adds	r3, r7, #7
200025a6:	701a      	strb	r2, [r3, #0]
200025a8:	1dbb      	adds	r3, r7, #6
200025aa:	1c0a      	adds	r2, r1, #0
200025ac:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200025ae:	2040      	movs	r0, #64	; 0x40
200025b0:	f7ff fec0 	bl	20002334 <graphic_ctrl_bit_clear>
	select_controller(controller);
200025b4:	1dbb      	adds	r3, r7, #6
200025b6:	781b      	ldrb	r3, [r3, #0]
200025b8:	0018      	movs	r0, r3
200025ba:	f7ff fee7 	bl	2000238c <select_controller>
	graphic_ctrl_bit_clear(B_RS);
200025be:	2001      	movs	r0, #1
200025c0:	f7ff feb8 	bl	20002334 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RW);
200025c4:	2002      	movs	r0, #2
200025c6:	f7ff feb5 	bl	20002334 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
200025ca:	1dbb      	adds	r3, r7, #6
200025cc:	781a      	ldrb	r2, [r3, #0]
200025ce:	1dfb      	adds	r3, r7, #7
200025d0:	781b      	ldrb	r3, [r3, #0]
200025d2:	0011      	movs	r1, r2
200025d4:	0018      	movs	r0, r3
200025d6:	f7ff ffa2 	bl	2000251e <graphic_write>
}
200025da:	46c0      	nop			; (mov r8, r8)
200025dc:	46bd      	mov	sp, r7
200025de:	b002      	add	sp, #8
200025e0:	bd80      	pop	{r7, pc}

200025e2 <graphic_write_data>:
void graphic_write_data(uint8_t command, uint8_t controller) {
200025e2:	b580      	push	{r7, lr}
200025e4:	b082      	sub	sp, #8
200025e6:	af00      	add	r7, sp, #0
200025e8:	0002      	movs	r2, r0
200025ea:	1dfb      	adds	r3, r7, #7
200025ec:	701a      	strb	r2, [r3, #0]
200025ee:	1dbb      	adds	r3, r7, #6
200025f0:	1c0a      	adds	r2, r1, #0
200025f2:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200025f4:	2040      	movs	r0, #64	; 0x40
200025f6:	f7ff fe9d 	bl	20002334 <graphic_ctrl_bit_clear>
	select_controller(controller);
200025fa:	1dbb      	adds	r3, r7, #6
200025fc:	781b      	ldrb	r3, [r3, #0]
200025fe:	0018      	movs	r0, r3
20002600:	f7ff fec4 	bl	2000238c <select_controller>
	graphic_ctrl_bit_set(B_RS);
20002604:	2001      	movs	r0, #1
20002606:	f7ff fe6d 	bl	200022e4 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
2000260a:	2002      	movs	r0, #2
2000260c:	f7ff fe92 	bl	20002334 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20002610:	1dbb      	adds	r3, r7, #6
20002612:	781a      	ldrb	r2, [r3, #0]
20002614:	1dfb      	adds	r3, r7, #7
20002616:	781b      	ldrb	r3, [r3, #0]
20002618:	0011      	movs	r1, r2
2000261a:	0018      	movs	r0, r3
2000261c:	f7ff ff7f 	bl	2000251e <graphic_write>
}
20002620:	46c0      	nop			; (mov r8, r8)
20002622:	46bd      	mov	sp, r7
20002624:	b002      	add	sp, #8
20002626:	bd80      	pop	{r7, pc}

20002628 <graphic_initialize>:

void graphic_initialize( void ) {
20002628:	b580      	push	{r7, lr}
2000262a:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
2000262c:	2040      	movs	r0, #64	; 0x40
2000262e:	f7ff fe59 	bl	200022e4 <graphic_ctrl_bit_set>
	delay_micro(10);
20002632:	200a      	movs	r0, #10
20002634:	f7ff fdf0 	bl	20002218 <delay_micro>
	
	graphic_ctrl_bit_clear(B_CS1);
20002638:	2008      	movs	r0, #8
2000263a:	f7ff fe7b 	bl	20002334 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_CS2);
2000263e:	2010      	movs	r0, #16
20002640:	f7ff fe78 	bl	20002334 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RST);
20002644:	2020      	movs	r0, #32
20002646:	f7ff fe75 	bl	20002334 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_E);
2000264a:	2040      	movs	r0, #64	; 0x40
2000264c:	f7ff fe72 	bl	20002334 <graphic_ctrl_bit_clear>
	//#define SIMULATOR
	delay_milli(30);
20002650:	201e      	movs	r0, #30
20002652:	f7ff fdf7 	bl	20002244 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20002656:	2020      	movs	r0, #32
20002658:	f7ff fe44 	bl	200022e4 <graphic_ctrl_bit_set>
	delay_milli(100); //...
2000265c:	2064      	movs	r0, #100	; 0x64
2000265e:	f7ff fdf1 	bl	20002244 <delay_milli>
	
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
20002662:	2118      	movs	r1, #24
20002664:	203e      	movs	r0, #62	; 0x3e
20002666:	f7ff ff99 	bl	2000259c <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
2000266a:	2118      	movs	r1, #24
2000266c:	203f      	movs	r0, #63	; 0x3f
2000266e:	f7ff ff95 	bl	2000259c <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20002672:	2118      	movs	r1, #24
20002674:	20c0      	movs	r0, #192	; 0xc0
20002676:	f7ff ff91 	bl	2000259c <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
2000267a:	2118      	movs	r1, #24
2000267c:	2040      	movs	r0, #64	; 0x40
2000267e:	f7ff ff8d 	bl	2000259c <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20002682:	2118      	movs	r1, #24
20002684:	20b8      	movs	r0, #184	; 0xb8
20002686:	f7ff ff89 	bl	2000259c <graphic_write_command>
	select_controller(0);
2000268a:	2000      	movs	r0, #0
2000268c:	f7ff fe7e 	bl	2000238c <select_controller>
}
20002690:	46c0      	nop			; (mov r8, r8)
20002692:	46bd      	mov	sp, r7
20002694:	bd80      	pop	{r7, pc}

20002696 <graphic_clear_screen>:
void graphic_clear_screen( void ) {	//Annat i slidesen
20002696:	b580      	push	{r7, lr}
20002698:	b082      	sub	sp, #8
2000269a:	af00      	add	r7, sp, #0
	uint8_t page;
	for (page = 0; page < 8; page++) {
2000269c:	1dfb      	adds	r3, r7, #7
2000269e:	2200      	movs	r2, #0
200026a0:	701a      	strb	r2, [r3, #0]
200026a2:	e023      	b.n	200026ec <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
200026a4:	1dfb      	adds	r3, r7, #7
200026a6:	781b      	ldrb	r3, [r3, #0]
200026a8:	2248      	movs	r2, #72	; 0x48
200026aa:	4252      	negs	r2, r2
200026ac:	4313      	orrs	r3, r2
200026ae:	b2db      	uxtb	r3, r3
200026b0:	2118      	movs	r1, #24
200026b2:	0018      	movs	r0, r3
200026b4:	f7ff ff72 	bl	2000259c <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
200026b8:	2118      	movs	r1, #24
200026ba:	2040      	movs	r0, #64	; 0x40
200026bc:	f7ff ff6e 	bl	2000259c <graphic_write_command>
		uint8_t add;
		for (add = 0; add < 64; add++) {
200026c0:	1dbb      	adds	r3, r7, #6
200026c2:	2200      	movs	r2, #0
200026c4:	701a      	strb	r2, [r3, #0]
200026c6:	e008      	b.n	200026da <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1|B_CS2);
200026c8:	2118      	movs	r1, #24
200026ca:	2000      	movs	r0, #0
200026cc:	f7ff ff89 	bl	200025e2 <graphic_write_data>
		for (add = 0; add < 64; add++) {
200026d0:	1dbb      	adds	r3, r7, #6
200026d2:	781a      	ldrb	r2, [r3, #0]
200026d4:	1dbb      	adds	r3, r7, #6
200026d6:	3201      	adds	r2, #1
200026d8:	701a      	strb	r2, [r3, #0]
200026da:	1dbb      	adds	r3, r7, #6
200026dc:	781b      	ldrb	r3, [r3, #0]
200026de:	2b3f      	cmp	r3, #63	; 0x3f
200026e0:	d9f2      	bls.n	200026c8 <graphic_clear_screen+0x32>
	for (page = 0; page < 8; page++) {
200026e2:	1dfb      	adds	r3, r7, #7
200026e4:	781a      	ldrb	r2, [r3, #0]
200026e6:	1dfb      	adds	r3, r7, #7
200026e8:	3201      	adds	r2, #1
200026ea:	701a      	strb	r2, [r3, #0]
200026ec:	1dfb      	adds	r3, r7, #7
200026ee:	781b      	ldrb	r3, [r3, #0]
200026f0:	2b07      	cmp	r3, #7
200026f2:	d9d7      	bls.n	200026a4 <graphic_clear_screen+0xe>
		}
	}
}
200026f4:	46c0      	nop			; (mov r8, r8)
200026f6:	46bd      	mov	sp, r7
200026f8:	b002      	add	sp, #8
200026fa:	bd80      	pop	{r7, pc}

200026fc <pixel>:

/** Color: 1=light 2=gray 3=black*/
void pixel(int x, int y, int set, int color) {
200026fc:	b580      	push	{r7, lr}
200026fe:	b086      	sub	sp, #24
20002700:	af00      	add	r7, sp, #0
20002702:	60f8      	str	r0, [r7, #12]
20002704:	60b9      	str	r1, [r7, #8]
20002706:	607a      	str	r2, [r7, #4]
20002708:	603b      	str	r3, [r7, #0]
	uint8_t mask;
	int index = 0;
2000270a:	2300      	movs	r3, #0
2000270c:	613b      	str	r3, [r7, #16]
	if( (x > 128 ) || (x < 1) || (y > 64) || (y < 1) ) 
2000270e:	68fb      	ldr	r3, [r7, #12]
20002710:	2b80      	cmp	r3, #128	; 0x80
20002712:	dd00      	ble.n	20002716 <pixel+0x1a>
20002714:	e0a6      	b.n	20002864 <pixel+0x168>
20002716:	68fb      	ldr	r3, [r7, #12]
20002718:	2b00      	cmp	r3, #0
2000271a:	dc00      	bgt.n	2000271e <pixel+0x22>
2000271c:	e0a2      	b.n	20002864 <pixel+0x168>
2000271e:	68bb      	ldr	r3, [r7, #8]
20002720:	2b40      	cmp	r3, #64	; 0x40
20002722:	dd00      	ble.n	20002726 <pixel+0x2a>
20002724:	e09e      	b.n	20002864 <pixel+0x168>
20002726:	68bb      	ldr	r3, [r7, #8]
20002728:	2b00      	cmp	r3, #0
2000272a:	dc00      	bgt.n	2000272e <pixel+0x32>
2000272c:	e09a      	b.n	20002864 <pixel+0x168>
		return;
	mask = 1 << ((y-1)%8);
2000272e:	68bb      	ldr	r3, [r7, #8]
20002730:	3b01      	subs	r3, #1
20002732:	4a4e      	ldr	r2, [pc, #312]	; (2000286c <pixel+0x170>)
20002734:	4013      	ands	r3, r2
20002736:	d504      	bpl.n	20002742 <pixel+0x46>
20002738:	3b01      	subs	r3, #1
2000273a:	2208      	movs	r2, #8
2000273c:	4252      	negs	r2, r2
2000273e:	4313      	orrs	r3, r2
20002740:	3301      	adds	r3, #1
20002742:	001a      	movs	r2, r3
20002744:	2301      	movs	r3, #1
20002746:	4093      	lsls	r3, r2
20002748:	001a      	movs	r2, r3
2000274a:	2317      	movs	r3, #23
2000274c:	18fb      	adds	r3, r7, r3
2000274e:	701a      	strb	r2, [r3, #0]
	if(x > 64) {
20002750:	68fb      	ldr	r3, [r7, #12]
20002752:	2b40      	cmp	r3, #64	; 0x40
20002754:	dd05      	ble.n	20002762 <pixel+0x66>
		x -= 65;
20002756:	68fb      	ldr	r3, [r7, #12]
20002758:	3b41      	subs	r3, #65	; 0x41
2000275a:	60fb      	str	r3, [r7, #12]
		index = 512;
2000275c:	2380      	movs	r3, #128	; 0x80
2000275e:	009b      	lsls	r3, r3, #2
20002760:	613b      	str	r3, [r7, #16]
	}
	index += x + ((y-1)/8)*64;
20002762:	68bb      	ldr	r3, [r7, #8]
20002764:	3b01      	subs	r3, #1
20002766:	2b00      	cmp	r3, #0
20002768:	da00      	bge.n	2000276c <pixel+0x70>
2000276a:	3307      	adds	r3, #7
2000276c:	10db      	asrs	r3, r3, #3
2000276e:	019a      	lsls	r2, r3, #6
20002770:	68fb      	ldr	r3, [r7, #12]
20002772:	18d3      	adds	r3, r2, r3
20002774:	693a      	ldr	r2, [r7, #16]
20002776:	18d3      	adds	r3, r2, r3
20002778:	613b      	str	r3, [r7, #16]

	if(set == 0)
2000277a:	687b      	ldr	r3, [r7, #4]
2000277c:	2b00      	cmp	r3, #0
2000277e:	d106      	bne.n	2000278e <pixel+0x92>
		mask = ~mask;
20002780:	2317      	movs	r3, #23
20002782:	18fb      	adds	r3, r7, r3
20002784:	2217      	movs	r2, #23
20002786:	18ba      	adds	r2, r7, r2
20002788:	7812      	ldrb	r2, [r2, #0]
2000278a:	43d2      	mvns	r2, r2
2000278c:	701a      	strb	r2, [r3, #0]

	switch (color) {
2000278e:	683b      	ldr	r3, [r7, #0]
20002790:	2b02      	cmp	r3, #2
20002792:	d024      	beq.n	200027de <pixel+0xe2>
20002794:	2b03      	cmp	r3, #3
20002796:	d043      	beq.n	20002820 <pixel+0x124>
20002798:	2b01      	cmp	r3, #1
2000279a:	d164      	bne.n	20002866 <pixel+0x16a>
		case 1:	
			if(set)
2000279c:	687b      	ldr	r3, [r7, #4]
2000279e:	2b00      	cmp	r3, #0
200027a0:	d00e      	beq.n	200027c0 <pixel+0xc4>
				backBufferLight[index] |= mask;
200027a2:	4a33      	ldr	r2, [pc, #204]	; (20002870 <pixel+0x174>)
200027a4:	693b      	ldr	r3, [r7, #16]
200027a6:	18d3      	adds	r3, r2, r3
200027a8:	781a      	ldrb	r2, [r3, #0]
200027aa:	2317      	movs	r3, #23
200027ac:	18fb      	adds	r3, r7, r3
200027ae:	781b      	ldrb	r3, [r3, #0]
200027b0:	4313      	orrs	r3, r2
200027b2:	b2d9      	uxtb	r1, r3
200027b4:	4a2e      	ldr	r2, [pc, #184]	; (20002870 <pixel+0x174>)
200027b6:	693b      	ldr	r3, [r7, #16]
200027b8:	18d3      	adds	r3, r2, r3
200027ba:	1c0a      	adds	r2, r1, #0
200027bc:	701a      	strb	r2, [r3, #0]
			else
				backBufferLight[index] &= mask;
			break;
200027be:	e052      	b.n	20002866 <pixel+0x16a>
				backBufferLight[index] &= mask;
200027c0:	4a2b      	ldr	r2, [pc, #172]	; (20002870 <pixel+0x174>)
200027c2:	693b      	ldr	r3, [r7, #16]
200027c4:	18d3      	adds	r3, r2, r3
200027c6:	781b      	ldrb	r3, [r3, #0]
200027c8:	2217      	movs	r2, #23
200027ca:	18ba      	adds	r2, r7, r2
200027cc:	7812      	ldrb	r2, [r2, #0]
200027ce:	4013      	ands	r3, r2
200027d0:	b2d9      	uxtb	r1, r3
200027d2:	4a27      	ldr	r2, [pc, #156]	; (20002870 <pixel+0x174>)
200027d4:	693b      	ldr	r3, [r7, #16]
200027d6:	18d3      	adds	r3, r2, r3
200027d8:	1c0a      	adds	r2, r1, #0
200027da:	701a      	strb	r2, [r3, #0]
			break;
200027dc:	e043      	b.n	20002866 <pixel+0x16a>
		
		case 2:	
			if(set)
200027de:	687b      	ldr	r3, [r7, #4]
200027e0:	2b00      	cmp	r3, #0
200027e2:	d00e      	beq.n	20002802 <pixel+0x106>
				backBufferGray[index] |= mask;
200027e4:	4a23      	ldr	r2, [pc, #140]	; (20002874 <pixel+0x178>)
200027e6:	693b      	ldr	r3, [r7, #16]
200027e8:	18d3      	adds	r3, r2, r3
200027ea:	781a      	ldrb	r2, [r3, #0]
200027ec:	2317      	movs	r3, #23
200027ee:	18fb      	adds	r3, r7, r3
200027f0:	781b      	ldrb	r3, [r3, #0]
200027f2:	4313      	orrs	r3, r2
200027f4:	b2d9      	uxtb	r1, r3
200027f6:	4a1f      	ldr	r2, [pc, #124]	; (20002874 <pixel+0x178>)
200027f8:	693b      	ldr	r3, [r7, #16]
200027fa:	18d3      	adds	r3, r2, r3
200027fc:	1c0a      	adds	r2, r1, #0
200027fe:	701a      	strb	r2, [r3, #0]
			else
				backBufferGray[index] &= mask;
			break;
20002800:	e031      	b.n	20002866 <pixel+0x16a>
				backBufferGray[index] &= mask;
20002802:	4a1c      	ldr	r2, [pc, #112]	; (20002874 <pixel+0x178>)
20002804:	693b      	ldr	r3, [r7, #16]
20002806:	18d3      	adds	r3, r2, r3
20002808:	781b      	ldrb	r3, [r3, #0]
2000280a:	2217      	movs	r2, #23
2000280c:	18ba      	adds	r2, r7, r2
2000280e:	7812      	ldrb	r2, [r2, #0]
20002810:	4013      	ands	r3, r2
20002812:	b2d9      	uxtb	r1, r3
20002814:	4a17      	ldr	r2, [pc, #92]	; (20002874 <pixel+0x178>)
20002816:	693b      	ldr	r3, [r7, #16]
20002818:	18d3      	adds	r3, r2, r3
2000281a:	1c0a      	adds	r2, r1, #0
2000281c:	701a      	strb	r2, [r3, #0]
			break;
2000281e:	e022      	b.n	20002866 <pixel+0x16a>
		
		case 3:	
			if(set)
20002820:	687b      	ldr	r3, [r7, #4]
20002822:	2b00      	cmp	r3, #0
20002824:	d00e      	beq.n	20002844 <pixel+0x148>
				backBuffer[index] |= mask;
20002826:	4a14      	ldr	r2, [pc, #80]	; (20002878 <pixel+0x17c>)
20002828:	693b      	ldr	r3, [r7, #16]
2000282a:	18d3      	adds	r3, r2, r3
2000282c:	781a      	ldrb	r2, [r3, #0]
2000282e:	2317      	movs	r3, #23
20002830:	18fb      	adds	r3, r7, r3
20002832:	781b      	ldrb	r3, [r3, #0]
20002834:	4313      	orrs	r3, r2
20002836:	b2d9      	uxtb	r1, r3
20002838:	4a0f      	ldr	r2, [pc, #60]	; (20002878 <pixel+0x17c>)
2000283a:	693b      	ldr	r3, [r7, #16]
2000283c:	18d3      	adds	r3, r2, r3
2000283e:	1c0a      	adds	r2, r1, #0
20002840:	701a      	strb	r2, [r3, #0]
			else
				backBuffer[index] &= mask;
			break;
20002842:	e010      	b.n	20002866 <pixel+0x16a>
				backBuffer[index] &= mask;
20002844:	4a0c      	ldr	r2, [pc, #48]	; (20002878 <pixel+0x17c>)
20002846:	693b      	ldr	r3, [r7, #16]
20002848:	18d3      	adds	r3, r2, r3
2000284a:	781b      	ldrb	r3, [r3, #0]
2000284c:	2217      	movs	r2, #23
2000284e:	18ba      	adds	r2, r7, r2
20002850:	7812      	ldrb	r2, [r2, #0]
20002852:	4013      	ands	r3, r2
20002854:	b2d9      	uxtb	r1, r3
20002856:	4a08      	ldr	r2, [pc, #32]	; (20002878 <pixel+0x17c>)
20002858:	693b      	ldr	r3, [r7, #16]
2000285a:	18d3      	adds	r3, r2, r3
2000285c:	1c0a      	adds	r2, r1, #0
2000285e:	701a      	strb	r2, [r3, #0]
			break;
20002860:	46c0      	nop			; (mov r8, r8)
20002862:	e000      	b.n	20002866 <pixel+0x16a>
		return;
20002864:	46c0      	nop			; (mov r8, r8)
			
	}

}
20002866:	46bd      	mov	sp, r7
20002868:	b006      	add	sp, #24
2000286a:	bd80      	pop	{r7, pc}
2000286c:	80000007 	andhi	r0, r0, r7
20002870:	20005bc4 	andcs	r5, r0, r4, asr #23
20002874:	200043c4 	andcs	r4, r0, r4, asr #7
20002878:	20004bc4 	andcs	r4, r0, r4, asr #23

2000287c <pixel2>:


void pixel2(int x, int y, int set) {
2000287c:	b580      	push	{r7, lr}
2000287e:	b088      	sub	sp, #32
20002880:	af00      	add	r7, sp, #0
20002882:	60f8      	str	r0, [r7, #12]
20002884:	60b9      	str	r1, [r7, #8]
20002886:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20002888:	68fb      	ldr	r3, [r7, #12]
2000288a:	2b00      	cmp	r3, #0
2000288c:	dc00      	bgt.n	20002890 <pixel2+0x14>
2000288e:	e0bc      	b.n	20002a0a <pixel2+0x18e>
20002890:	68bb      	ldr	r3, [r7, #8]
20002892:	2b00      	cmp	r3, #0
20002894:	dc00      	bgt.n	20002898 <pixel2+0x1c>
20002896:	e0b8      	b.n	20002a0a <pixel2+0x18e>
20002898:	68fb      	ldr	r3, [r7, #12]
2000289a:	2b80      	cmp	r3, #128	; 0x80
2000289c:	dd00      	ble.n	200028a0 <pixel2+0x24>
2000289e:	e0b4      	b.n	20002a0a <pixel2+0x18e>
200028a0:	68bb      	ldr	r3, [r7, #8]
200028a2:	2b40      	cmp	r3, #64	; 0x40
200028a4:	dd00      	ble.n	200028a8 <pixel2+0x2c>
200028a6:	e0b0      	b.n	20002a0a <pixel2+0x18e>
	index = (y-1)/8;
200028a8:	68bb      	ldr	r3, [r7, #8]
200028aa:	3b01      	subs	r3, #1
200028ac:	2b00      	cmp	r3, #0
200028ae:	da00      	bge.n	200028b2 <pixel2+0x36>
200028b0:	3307      	adds	r3, #7
200028b2:	10db      	asrs	r3, r3, #3
200028b4:	61bb      	str	r3, [r7, #24]
	switch( (y-1)%8 ) {
200028b6:	68bb      	ldr	r3, [r7, #8]
200028b8:	3b01      	subs	r3, #1
200028ba:	4a56      	ldr	r2, [pc, #344]	; (20002a14 <pixel2+0x198>)
200028bc:	4013      	ands	r3, r2
200028be:	d504      	bpl.n	200028ca <pixel2+0x4e>
200028c0:	3b01      	subs	r3, #1
200028c2:	2208      	movs	r2, #8
200028c4:	4252      	negs	r2, r2
200028c6:	4313      	orrs	r3, r2
200028c8:	3301      	adds	r3, #1
200028ca:	2b07      	cmp	r3, #7
200028cc:	d82c      	bhi.n	20002928 <pixel2+0xac>
200028ce:	009a      	lsls	r2, r3, #2
200028d0:	4b51      	ldr	r3, [pc, #324]	; (20002a18 <pixel2+0x19c>)
200028d2:	18d3      	adds	r3, r2, r3
200028d4:	681b      	ldr	r3, [r3, #0]
200028d6:	469f      	mov	pc, r3
		case 0: mask = 1; break;
200028d8:	231f      	movs	r3, #31
200028da:	18fb      	adds	r3, r7, r3
200028dc:	2201      	movs	r2, #1
200028de:	701a      	strb	r2, [r3, #0]
200028e0:	e022      	b.n	20002928 <pixel2+0xac>
		case 1: mask = 2; break;
200028e2:	231f      	movs	r3, #31
200028e4:	18fb      	adds	r3, r7, r3
200028e6:	2202      	movs	r2, #2
200028e8:	701a      	strb	r2, [r3, #0]
200028ea:	e01d      	b.n	20002928 <pixel2+0xac>
		case 2: mask = 4; break;
200028ec:	231f      	movs	r3, #31
200028ee:	18fb      	adds	r3, r7, r3
200028f0:	2204      	movs	r2, #4
200028f2:	701a      	strb	r2, [r3, #0]
200028f4:	e018      	b.n	20002928 <pixel2+0xac>
		case 3: mask = 8; break;
200028f6:	231f      	movs	r3, #31
200028f8:	18fb      	adds	r3, r7, r3
200028fa:	2208      	movs	r2, #8
200028fc:	701a      	strb	r2, [r3, #0]
200028fe:	e013      	b.n	20002928 <pixel2+0xac>
		case 4: mask = 0x10; break;
20002900:	231f      	movs	r3, #31
20002902:	18fb      	adds	r3, r7, r3
20002904:	2210      	movs	r2, #16
20002906:	701a      	strb	r2, [r3, #0]
20002908:	e00e      	b.n	20002928 <pixel2+0xac>
		case 5: mask = 0x20; break;
2000290a:	231f      	movs	r3, #31
2000290c:	18fb      	adds	r3, r7, r3
2000290e:	2220      	movs	r2, #32
20002910:	701a      	strb	r2, [r3, #0]
20002912:	e009      	b.n	20002928 <pixel2+0xac>
		case 6: mask = 0x40; break;
20002914:	231f      	movs	r3, #31
20002916:	18fb      	adds	r3, r7, r3
20002918:	2240      	movs	r2, #64	; 0x40
2000291a:	701a      	strb	r2, [r3, #0]
2000291c:	e004      	b.n	20002928 <pixel2+0xac>
		case 7: mask = 0x80; break;
2000291e:	231f      	movs	r3, #31
20002920:	18fb      	adds	r3, r7, r3
20002922:	2280      	movs	r2, #128	; 0x80
20002924:	701a      	strb	r2, [r3, #0]
20002926:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0)
20002928:	687b      	ldr	r3, [r7, #4]
2000292a:	2b00      	cmp	r3, #0
2000292c:	d106      	bne.n	2000293c <pixel2+0xc0>
		mask = ~mask;
2000292e:	231f      	movs	r3, #31
20002930:	18fb      	adds	r3, r7, r3
20002932:	221f      	movs	r2, #31
20002934:	18ba      	adds	r2, r7, r2
20002936:	7812      	ldrb	r2, [r2, #0]
20002938:	43d2      	mvns	r2, r2
2000293a:	701a      	strb	r2, [r3, #0]
	
	if(x > 64){
2000293c:	68fb      	ldr	r3, [r7, #12]
2000293e:	2b40      	cmp	r3, #64	; 0x40
20002940:	dd07      	ble.n	20002952 <pixel2+0xd6>
		controller = B_CS2;
20002942:	231e      	movs	r3, #30
20002944:	18fb      	adds	r3, r7, r3
20002946:	2210      	movs	r2, #16
20002948:	701a      	strb	r2, [r3, #0]
		x = x - 65;
2000294a:	68fb      	ldr	r3, [r7, #12]
2000294c:	3b41      	subs	r3, #65	; 0x41
2000294e:	60fb      	str	r3, [r7, #12]
20002950:	e006      	b.n	20002960 <pixel2+0xe4>
	} else {
		controller = B_CS1;
20002952:	231e      	movs	r3, #30
20002954:	18fb      	adds	r3, r7, r3
20002956:	2208      	movs	r2, #8
20002958:	701a      	strb	r2, [r3, #0]
		x = x-1;
2000295a:	68fb      	ldr	r3, [r7, #12]
2000295c:	3b01      	subs	r3, #1
2000295e:	60fb      	str	r3, [r7, #12]
	}
	graphic_write_command(LCD_SET_ADD | x, controller );
20002960:	68fb      	ldr	r3, [r7, #12]
20002962:	b25b      	sxtb	r3, r3
20002964:	2240      	movs	r2, #64	; 0x40
20002966:	4313      	orrs	r3, r2
20002968:	b25b      	sxtb	r3, r3
2000296a:	b2da      	uxtb	r2, r3
2000296c:	231e      	movs	r3, #30
2000296e:	18fb      	adds	r3, r7, r3
20002970:	781b      	ldrb	r3, [r3, #0]
20002972:	0019      	movs	r1, r3
20002974:	0010      	movs	r0, r2
20002976:	f7ff fe11 	bl	2000259c <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller );
2000297a:	69bb      	ldr	r3, [r7, #24]
2000297c:	b25b      	sxtb	r3, r3
2000297e:	2248      	movs	r2, #72	; 0x48
20002980:	4252      	negs	r2, r2
20002982:	4313      	orrs	r3, r2
20002984:	b25b      	sxtb	r3, r3
20002986:	b2da      	uxtb	r2, r3
20002988:	231e      	movs	r3, #30
2000298a:	18fb      	adds	r3, r7, r3
2000298c:	781b      	ldrb	r3, [r3, #0]
2000298e:	0019      	movs	r1, r3
20002990:	0010      	movs	r0, r2
20002992:	f7ff fe03 	bl	2000259c <graphic_write_command>
	
	c = graphic_read_data(controller);
20002996:	231e      	movs	r3, #30
20002998:	18fb      	adds	r3, r7, r3
2000299a:	781b      	ldrb	r3, [r3, #0]
2000299c:	0018      	movs	r0, r3
2000299e:	f7ff fda9 	bl	200024f4 <graphic_read_data>
200029a2:	0002      	movs	r2, r0
200029a4:	2317      	movs	r3, #23
200029a6:	18fb      	adds	r3, r7, r3
200029a8:	701a      	strb	r2, [r3, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
200029aa:	68fb      	ldr	r3, [r7, #12]
200029ac:	b25b      	sxtb	r3, r3
200029ae:	2240      	movs	r2, #64	; 0x40
200029b0:	4313      	orrs	r3, r2
200029b2:	b25b      	sxtb	r3, r3
200029b4:	b2da      	uxtb	r2, r3
200029b6:	231e      	movs	r3, #30
200029b8:	18fb      	adds	r3, r7, r3
200029ba:	781b      	ldrb	r3, [r3, #0]
200029bc:	0019      	movs	r1, r3
200029be:	0010      	movs	r0, r2
200029c0:	f7ff fdec 	bl	2000259c <graphic_write_command>
	
	if(set)
200029c4:	687b      	ldr	r3, [r7, #4]
200029c6:	2b00      	cmp	r3, #0
200029c8:	d00a      	beq.n	200029e0 <pixel2+0x164>
		mask = mask | c;
200029ca:	231f      	movs	r3, #31
200029cc:	18fb      	adds	r3, r7, r3
200029ce:	221f      	movs	r2, #31
200029d0:	18b9      	adds	r1, r7, r2
200029d2:	2217      	movs	r2, #23
200029d4:	18ba      	adds	r2, r7, r2
200029d6:	7809      	ldrb	r1, [r1, #0]
200029d8:	7812      	ldrb	r2, [r2, #0]
200029da:	430a      	orrs	r2, r1
200029dc:	701a      	strb	r2, [r3, #0]
200029de:	e009      	b.n	200029f4 <pixel2+0x178>
	else
		mask = mask & c;
200029e0:	231f      	movs	r3, #31
200029e2:	18fb      	adds	r3, r7, r3
200029e4:	221f      	movs	r2, #31
200029e6:	18ba      	adds	r2, r7, r2
200029e8:	2117      	movs	r1, #23
200029ea:	1879      	adds	r1, r7, r1
200029ec:	7812      	ldrb	r2, [r2, #0]
200029ee:	7809      	ldrb	r1, [r1, #0]
200029f0:	400a      	ands	r2, r1
200029f2:	701a      	strb	r2, [r3, #0]
	
	graphic_write_data(mask, controller);
200029f4:	231e      	movs	r3, #30
200029f6:	18fb      	adds	r3, r7, r3
200029f8:	781a      	ldrb	r2, [r3, #0]
200029fa:	231f      	movs	r3, #31
200029fc:	18fb      	adds	r3, r7, r3
200029fe:	781b      	ldrb	r3, [r3, #0]
20002a00:	0011      	movs	r1, r2
20002a02:	0018      	movs	r0, r3
20002a04:	f7ff fded 	bl	200025e2 <graphic_write_data>
20002a08:	e000      	b.n	20002a0c <pixel2+0x190>
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20002a0a:	46c0      	nop			; (mov r8, r8)
}
20002a0c:	46bd      	mov	sp, r7
20002a0e:	b008      	add	sp, #32
20002a10:	bd80      	pop	{r7, pc}
20002a12:	46c0      	nop			; (mov r8, r8)
20002a14:	80000007 	andhi	r0, r0, r7
20002a18:	2000a248 	andcs	sl, r0, r8, asr #4

20002a1c <graphic_draw_screen>:

void graphic_draw_screen(uint8_t *buffer) {
20002a1c:	b580      	push	{r7, lr}
20002a1e:	b086      	sub	sp, #24
20002a20:	af00      	add	r7, sp, #0
20002a22:	6078      	str	r0, [r7, #4]
	uint8_t i, j, controller, c;
	unsigned int k = 0;
20002a24:	2300      	movs	r3, #0
20002a26:	613b      	str	r3, [r7, #16]
	for(c = 0; c < 2; c++) {
20002a28:	2315      	movs	r3, #21
20002a2a:	18fb      	adds	r3, r7, r3
20002a2c:	2200      	movs	r2, #0
20002a2e:	701a      	strb	r2, [r3, #0]
20002a30:	e056      	b.n	20002ae0 <graphic_draw_screen+0xc4>
		controller = (c == 0) ? B_CS1 : B_CS2;
20002a32:	2315      	movs	r3, #21
20002a34:	18fb      	adds	r3, r7, r3
20002a36:	781b      	ldrb	r3, [r3, #0]
20002a38:	2b00      	cmp	r3, #0
20002a3a:	d101      	bne.n	20002a40 <graphic_draw_screen+0x24>
20002a3c:	2208      	movs	r2, #8
20002a3e:	e000      	b.n	20002a42 <graphic_draw_screen+0x26>
20002a40:	2210      	movs	r2, #16
20002a42:	230f      	movs	r3, #15
20002a44:	18fb      	adds	r3, r7, r3
20002a46:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 8; j++) {
20002a48:	2316      	movs	r3, #22
20002a4a:	18fb      	adds	r3, r7, r3
20002a4c:	2200      	movs	r2, #0
20002a4e:	701a      	strb	r2, [r3, #0]
20002a50:	e03a      	b.n	20002ac8 <graphic_draw_screen+0xac>
			graphic_write_command(LCD_SET_PAGE | j, controller);
20002a52:	2316      	movs	r3, #22
20002a54:	18fb      	adds	r3, r7, r3
20002a56:	781b      	ldrb	r3, [r3, #0]
20002a58:	2248      	movs	r2, #72	; 0x48
20002a5a:	4252      	negs	r2, r2
20002a5c:	4313      	orrs	r3, r2
20002a5e:	b2da      	uxtb	r2, r3
20002a60:	230f      	movs	r3, #15
20002a62:	18fb      	adds	r3, r7, r3
20002a64:	781b      	ldrb	r3, [r3, #0]
20002a66:	0019      	movs	r1, r3
20002a68:	0010      	movs	r0, r2
20002a6a:	f7ff fd97 	bl	2000259c <graphic_write_command>
			graphic_write_command(LCD_SET_ADD | 0, controller);
20002a6e:	230f      	movs	r3, #15
20002a70:	18fb      	adds	r3, r7, r3
20002a72:	781b      	ldrb	r3, [r3, #0]
20002a74:	0019      	movs	r1, r3
20002a76:	2040      	movs	r0, #64	; 0x40
20002a78:	f7ff fd90 	bl	2000259c <graphic_write_command>
			for(i = 0; i <= 63; i++, k++) {
20002a7c:	2317      	movs	r3, #23
20002a7e:	18fb      	adds	r3, r7, r3
20002a80:	2200      	movs	r2, #0
20002a82:	701a      	strb	r2, [r3, #0]
20002a84:	e014      	b.n	20002ab0 <graphic_draw_screen+0x94>
				graphic_write_data(buffer[k], controller);
20002a86:	687a      	ldr	r2, [r7, #4]
20002a88:	693b      	ldr	r3, [r7, #16]
20002a8a:	18d3      	adds	r3, r2, r3
20002a8c:	781a      	ldrb	r2, [r3, #0]
20002a8e:	230f      	movs	r3, #15
20002a90:	18fb      	adds	r3, r7, r3
20002a92:	781b      	ldrb	r3, [r3, #0]
20002a94:	0019      	movs	r1, r3
20002a96:	0010      	movs	r0, r2
20002a98:	f7ff fda3 	bl	200025e2 <graphic_write_data>
			for(i = 0; i <= 63; i++, k++) {
20002a9c:	2317      	movs	r3, #23
20002a9e:	18fb      	adds	r3, r7, r3
20002aa0:	781a      	ldrb	r2, [r3, #0]
20002aa2:	2317      	movs	r3, #23
20002aa4:	18fb      	adds	r3, r7, r3
20002aa6:	3201      	adds	r2, #1
20002aa8:	701a      	strb	r2, [r3, #0]
20002aaa:	693b      	ldr	r3, [r7, #16]
20002aac:	3301      	adds	r3, #1
20002aae:	613b      	str	r3, [r7, #16]
20002ab0:	2317      	movs	r3, #23
20002ab2:	18fb      	adds	r3, r7, r3
20002ab4:	781b      	ldrb	r3, [r3, #0]
20002ab6:	2b3f      	cmp	r3, #63	; 0x3f
20002ab8:	d9e5      	bls.n	20002a86 <graphic_draw_screen+0x6a>
		for(j = 0; j < 8; j++) {
20002aba:	2316      	movs	r3, #22
20002abc:	18fb      	adds	r3, r7, r3
20002abe:	781a      	ldrb	r2, [r3, #0]
20002ac0:	2316      	movs	r3, #22
20002ac2:	18fb      	adds	r3, r7, r3
20002ac4:	3201      	adds	r2, #1
20002ac6:	701a      	strb	r2, [r3, #0]
20002ac8:	2316      	movs	r3, #22
20002aca:	18fb      	adds	r3, r7, r3
20002acc:	781b      	ldrb	r3, [r3, #0]
20002ace:	2b07      	cmp	r3, #7
20002ad0:	d9bf      	bls.n	20002a52 <graphic_draw_screen+0x36>
	for(c = 0; c < 2; c++) {
20002ad2:	2315      	movs	r3, #21
20002ad4:	18fb      	adds	r3, r7, r3
20002ad6:	781a      	ldrb	r2, [r3, #0]
20002ad8:	2315      	movs	r3, #21
20002ada:	18fb      	adds	r3, r7, r3
20002adc:	3201      	adds	r2, #1
20002ade:	701a      	strb	r2, [r3, #0]
20002ae0:	2315      	movs	r3, #21
20002ae2:	18fb      	adds	r3, r7, r3
20002ae4:	781b      	ldrb	r3, [r3, #0]
20002ae6:	2b01      	cmp	r3, #1
20002ae8:	d9a3      	bls.n	20002a32 <graphic_draw_screen+0x16>
			}
		}
	}
}
20002aea:	46c0      	nop			; (mov r8, r8)
20002aec:	46bd      	mov	sp, r7
20002aee:	b006      	add	sp, #24
20002af0:	bd80      	pop	{r7, pc}

20002af2 <draw_sprite>:


void grayScaleTest( void );


void draw_sprite(sprite* s, int x, int y, int set, int color) {
20002af2:	b5b0      	push	{r4, r5, r7, lr}
20002af4:	b08a      	sub	sp, #40	; 0x28
20002af6:	af00      	add	r7, sp, #0
20002af8:	60f8      	str	r0, [r7, #12]
20002afa:	60b9      	str	r1, [r7, #8]
20002afc:	607a      	str	r2, [r7, #4]
20002afe:	603b      	str	r3, [r7, #0]
	int i,j,k, width_in_bytes;
	if (s->width % 8 == 0)
20002b00:	68fb      	ldr	r3, [r7, #12]
20002b02:	681b      	ldr	r3, [r3, #0]
20002b04:	2207      	movs	r2, #7
20002b06:	4013      	ands	r3, r2
20002b08:	d104      	bne.n	20002b14 <draw_sprite+0x22>
		width_in_bytes = s->width / 8;
20002b0a:	68fb      	ldr	r3, [r7, #12]
20002b0c:	681b      	ldr	r3, [r3, #0]
20002b0e:	08db      	lsrs	r3, r3, #3
20002b10:	61bb      	str	r3, [r7, #24]
20002b12:	e004      	b.n	20002b1e <draw_sprite+0x2c>
	else
		width_in_bytes = (s->width / 8) + 1;
20002b14:	68fb      	ldr	r3, [r7, #12]
20002b16:	681b      	ldr	r3, [r3, #0]
20002b18:	08db      	lsrs	r3, r3, #3
20002b1a:	3301      	adds	r3, #1
20002b1c:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < s->height; i++)
20002b1e:	2300      	movs	r3, #0
20002b20:	627b      	str	r3, [r7, #36]	; 0x24
20002b22:	e06a      	b.n	20002bfa <draw_sprite+0x108>
		for (j = 0; j < width_in_bytes; j++) {
20002b24:	2300      	movs	r3, #0
20002b26:	623b      	str	r3, [r7, #32]
20002b28:	e060      	b.n	20002bec <draw_sprite+0xfa>
			unsigned char byte = s->data[i * width_in_bytes + j];
20002b2a:	68fb      	ldr	r3, [r7, #12]
20002b2c:	689b      	ldr	r3, [r3, #8]
20002b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20002b30:	69b9      	ldr	r1, [r7, #24]
20002b32:	4351      	muls	r1, r2
20002b34:	6a3a      	ldr	r2, [r7, #32]
20002b36:	188a      	adds	r2, r1, r2
20002b38:	189a      	adds	r2, r3, r2
20002b3a:	2317      	movs	r3, #23
20002b3c:	18fb      	adds	r3, r7, r3
20002b3e:	7812      	ldrb	r2, [r2, #0]
20002b40:	701a      	strb	r2, [r3, #0]
			for (k =0; k < 8; k++) {
20002b42:	2300      	movs	r3, #0
20002b44:	61fb      	str	r3, [r7, #28]
20002b46:	e04b      	b.n	20002be0 <draw_sprite+0xee>
				if (byte & (1 << k)){
20002b48:	2317      	movs	r3, #23
20002b4a:	18fb      	adds	r3, r7, r3
20002b4c:	781a      	ldrb	r2, [r3, #0]
20002b4e:	69fb      	ldr	r3, [r7, #28]
20002b50:	411a      	asrs	r2, r3
20002b52:	0013      	movs	r3, r2
20002b54:	2201      	movs	r2, #1
20002b56:	4013      	ands	r3, r2
20002b58:	d03f      	beq.n	20002bda <draw_sprite+0xe8>
					pixel(8 * j + k + x + 1, i + y + 1, set, color);
20002b5a:	6a3b      	ldr	r3, [r7, #32]
20002b5c:	00da      	lsls	r2, r3, #3
20002b5e:	69fb      	ldr	r3, [r7, #28]
20002b60:	18d2      	adds	r2, r2, r3
20002b62:	68bb      	ldr	r3, [r7, #8]
20002b64:	18d3      	adds	r3, r2, r3
20002b66:	1c58      	adds	r0, r3, #1
20002b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20002b6a:	687b      	ldr	r3, [r7, #4]
20002b6c:	18d3      	adds	r3, r2, r3
20002b6e:	1c59      	adds	r1, r3, #1
20002b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20002b72:	683a      	ldr	r2, [r7, #0]
20002b74:	f7ff fdc2 	bl	200026fc <pixel>
					
					if(set) {	//Remove the other colors from this pixel
20002b78:	683b      	ldr	r3, [r7, #0]
20002b7a:	2b00      	cmp	r3, #0
20002b7c:	d02d      	beq.n	20002bda <draw_sprite+0xe8>
						pixel(8 * j + k + x + 1, i + y + 1, 0, (color+1) % 3);
20002b7e:	6a3b      	ldr	r3, [r7, #32]
20002b80:	00da      	lsls	r2, r3, #3
20002b82:	69fb      	ldr	r3, [r7, #28]
20002b84:	18d2      	adds	r2, r2, r3
20002b86:	68bb      	ldr	r3, [r7, #8]
20002b88:	18d3      	adds	r3, r2, r3
20002b8a:	1c5c      	adds	r4, r3, #1
20002b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20002b8e:	687b      	ldr	r3, [r7, #4]
20002b90:	18d3      	adds	r3, r2, r3
20002b92:	1c5d      	adds	r5, r3, #1
20002b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20002b96:	3301      	adds	r3, #1
20002b98:	2103      	movs	r1, #3
20002b9a:	0018      	movs	r0, r3
20002b9c:	f000 ff94 	bl	20003ac8 <__aeabi_idivmod>
20002ba0:	000b      	movs	r3, r1
20002ba2:	2200      	movs	r2, #0
20002ba4:	0029      	movs	r1, r5
20002ba6:	0020      	movs	r0, r4
20002ba8:	f7ff fda8 	bl	200026fc <pixel>
						pixel(8 * j + k + x + 1, i + y + 1, 0, (color+2) % 3);
20002bac:	6a3b      	ldr	r3, [r7, #32]
20002bae:	00da      	lsls	r2, r3, #3
20002bb0:	69fb      	ldr	r3, [r7, #28]
20002bb2:	18d2      	adds	r2, r2, r3
20002bb4:	68bb      	ldr	r3, [r7, #8]
20002bb6:	18d3      	adds	r3, r2, r3
20002bb8:	1c5c      	adds	r4, r3, #1
20002bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20002bbc:	687b      	ldr	r3, [r7, #4]
20002bbe:	18d3      	adds	r3, r2, r3
20002bc0:	1c5d      	adds	r5, r3, #1
20002bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20002bc4:	3302      	adds	r3, #2
20002bc6:	2103      	movs	r1, #3
20002bc8:	0018      	movs	r0, r3
20002bca:	f000 ff7d 	bl	20003ac8 <__aeabi_idivmod>
20002bce:	000b      	movs	r3, r1
20002bd0:	2200      	movs	r2, #0
20002bd2:	0029      	movs	r1, r5
20002bd4:	0020      	movs	r0, r4
20002bd6:	f7ff fd91 	bl	200026fc <pixel>
			for (k =0; k < 8; k++) {
20002bda:	69fb      	ldr	r3, [r7, #28]
20002bdc:	3301      	adds	r3, #1
20002bde:	61fb      	str	r3, [r7, #28]
20002be0:	69fb      	ldr	r3, [r7, #28]
20002be2:	2b07      	cmp	r3, #7
20002be4:	ddb0      	ble.n	20002b48 <draw_sprite+0x56>
		for (j = 0; j < width_in_bytes; j++) {
20002be6:	6a3b      	ldr	r3, [r7, #32]
20002be8:	3301      	adds	r3, #1
20002bea:	623b      	str	r3, [r7, #32]
20002bec:	6a3a      	ldr	r2, [r7, #32]
20002bee:	69bb      	ldr	r3, [r7, #24]
20002bf0:	429a      	cmp	r2, r3
20002bf2:	db9a      	blt.n	20002b2a <draw_sprite+0x38>
	for (i = 0; i < s->height; i++)
20002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002bf6:	3301      	adds	r3, #1
20002bf8:	627b      	str	r3, [r7, #36]	; 0x24
20002bfa:	68fb      	ldr	r3, [r7, #12]
20002bfc:	685a      	ldr	r2, [r3, #4]
20002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002c00:	429a      	cmp	r2, r3
20002c02:	d88f      	bhi.n	20002b24 <draw_sprite+0x32>
					}
				}
			}
		}
}
20002c04:	46c0      	nop			; (mov r8, r8)
20002c06:	46bd      	mov	sp, r7
20002c08:	b00a      	add	sp, #40	; 0x28
20002c0a:	bdb0      	pop	{r4, r5, r7, pc}

20002c0c <fillRectangle>:

void fillRectangle( int x, int y, int width, int height ){
20002c0c:	b580      	push	{r7, lr}
20002c0e:	b086      	sub	sp, #24
20002c10:	af00      	add	r7, sp, #0
20002c12:	60f8      	str	r0, [r7, #12]
20002c14:	60b9      	str	r1, [r7, #8]
20002c16:	607a      	str	r2, [r7, #4]
20002c18:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
20002c1a:	68fb      	ldr	r3, [r7, #12]
20002c1c:	617b      	str	r3, [r7, #20]
20002c1e:	e014      	b.n	20002c4a <fillRectangle+0x3e>
		for (j = y; j < y + height; j++) {
20002c20:	68bb      	ldr	r3, [r7, #8]
20002c22:	613b      	str	r3, [r7, #16]
20002c24:	e008      	b.n	20002c38 <fillRectangle+0x2c>
			pixel(i, j, 1, 3);
20002c26:	6939      	ldr	r1, [r7, #16]
20002c28:	6978      	ldr	r0, [r7, #20]
20002c2a:	2303      	movs	r3, #3
20002c2c:	2201      	movs	r2, #1
20002c2e:	f7ff fd65 	bl	200026fc <pixel>
		for (j = y; j < y + height; j++) {
20002c32:	693b      	ldr	r3, [r7, #16]
20002c34:	3301      	adds	r3, #1
20002c36:	613b      	str	r3, [r7, #16]
20002c38:	68ba      	ldr	r2, [r7, #8]
20002c3a:	683b      	ldr	r3, [r7, #0]
20002c3c:	18d2      	adds	r2, r2, r3
20002c3e:	693b      	ldr	r3, [r7, #16]
20002c40:	429a      	cmp	r2, r3
20002c42:	dcf0      	bgt.n	20002c26 <fillRectangle+0x1a>
	for (i = x; i < x + width; i++) {
20002c44:	697b      	ldr	r3, [r7, #20]
20002c46:	3301      	adds	r3, #1
20002c48:	617b      	str	r3, [r7, #20]
20002c4a:	68fa      	ldr	r2, [r7, #12]
20002c4c:	687b      	ldr	r3, [r7, #4]
20002c4e:	18d2      	adds	r2, r2, r3
20002c50:	697b      	ldr	r3, [r7, #20]
20002c52:	429a      	cmp	r2, r3
20002c54:	dce4      	bgt.n	20002c20 <fillRectangle+0x14>
		}
	}
}
20002c56:	46c0      	nop			; (mov r8, r8)
20002c58:	46bd      	mov	sp, r7
20002c5a:	b006      	add	sp, #24
20002c5c:	bd80      	pop	{r7, pc}

20002c5e <clearRectangle>:

void clearRectangle( int x, int y, int width, int height ){
20002c5e:	b580      	push	{r7, lr}
20002c60:	b086      	sub	sp, #24
20002c62:	af00      	add	r7, sp, #0
20002c64:	60f8      	str	r0, [r7, #12]
20002c66:	60b9      	str	r1, [r7, #8]
20002c68:	607a      	str	r2, [r7, #4]
20002c6a:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
20002c6c:	68fb      	ldr	r3, [r7, #12]
20002c6e:	617b      	str	r3, [r7, #20]
20002c70:	e014      	b.n	20002c9c <clearRectangle+0x3e>
		for (j = y; j < y + height; j++) {
20002c72:	68bb      	ldr	r3, [r7, #8]
20002c74:	613b      	str	r3, [r7, #16]
20002c76:	e008      	b.n	20002c8a <clearRectangle+0x2c>
			pixel(i, j, 0, 3);
20002c78:	6939      	ldr	r1, [r7, #16]
20002c7a:	6978      	ldr	r0, [r7, #20]
20002c7c:	2303      	movs	r3, #3
20002c7e:	2200      	movs	r2, #0
20002c80:	f7ff fd3c 	bl	200026fc <pixel>
		for (j = y; j < y + height; j++) {
20002c84:	693b      	ldr	r3, [r7, #16]
20002c86:	3301      	adds	r3, #1
20002c88:	613b      	str	r3, [r7, #16]
20002c8a:	68ba      	ldr	r2, [r7, #8]
20002c8c:	683b      	ldr	r3, [r7, #0]
20002c8e:	18d2      	adds	r2, r2, r3
20002c90:	693b      	ldr	r3, [r7, #16]
20002c92:	429a      	cmp	r2, r3
20002c94:	dcf0      	bgt.n	20002c78 <clearRectangle+0x1a>
	for (i = x; i < x + width; i++) {
20002c96:	697b      	ldr	r3, [r7, #20]
20002c98:	3301      	adds	r3, #1
20002c9a:	617b      	str	r3, [r7, #20]
20002c9c:	68fa      	ldr	r2, [r7, #12]
20002c9e:	687b      	ldr	r3, [r7, #4]
20002ca0:	18d2      	adds	r2, r2, r3
20002ca2:	697b      	ldr	r3, [r7, #20]
20002ca4:	429a      	cmp	r2, r3
20002ca6:	dce4      	bgt.n	20002c72 <clearRectangle+0x14>
		}
	}
}
20002ca8:	46c0      	nop			; (mov r8, r8)
20002caa:	46bd      	mov	sp, r7
20002cac:	b006      	add	sp, #24
20002cae:	bd80      	pop	{r7, pc}

20002cb0 <grayScaleTest>:


void grayScaleTest( void ) {
20002cb0:	b590      	push	{r4, r7, lr}
20002cb2:	b087      	sub	sp, #28
20002cb4:	af00      	add	r7, sp, #0
	int x = 10;
20002cb6:	230a      	movs	r3, #10
20002cb8:	617b      	str	r3, [r7, #20]
	int y = 10;
20002cba:	230a      	movs	r3, #10
20002cbc:	613b      	str	r3, [r7, #16]
	int width = 70;
20002cbe:	2346      	movs	r3, #70	; 0x46
20002cc0:	60fb      	str	r3, [r7, #12]
	int height = 50;
20002cc2:	2332      	movs	r3, #50	; 0x32
20002cc4:	60bb      	str	r3, [r7, #8]
	
	int x2 = 50;
20002cc6:	2332      	movs	r3, #50	; 0x32
20002cc8:	607b      	str	r3, [r7, #4]
	
	fillRectangle(x, y, width, height);
20002cca:	68bb      	ldr	r3, [r7, #8]
20002ccc:	68fa      	ldr	r2, [r7, #12]
20002cce:	6939      	ldr	r1, [r7, #16]
20002cd0:	6978      	ldr	r0, [r7, #20]
20002cd2:	f7ff ff9b 	bl	20002c0c <fillRectangle>
	
	int i;
	int k = 5;
20002cd6:	2305      	movs	r3, #5
20002cd8:	603b      	str	r3, [r7, #0]
	while(1) {
		clear_backBuffer();
20002cda:	f7ff fadf 	bl	2000229c <clear_backBuffer>
		fillRectangle(x, y, width, height);
20002cde:	68bb      	ldr	r3, [r7, #8]
20002ce0:	68fa      	ldr	r2, [r7, #12]
20002ce2:	6939      	ldr	r1, [r7, #16]
20002ce4:	6978      	ldr	r0, [r7, #20]
20002ce6:	f7ff ff91 	bl	20002c0c <fillRectangle>
		clearRectangle(x+2+2, y+1, width-k, height-k); //outer square
20002cea:	697b      	ldr	r3, [r7, #20]
20002cec:	1d18      	adds	r0, r3, #4
20002cee:	693b      	ldr	r3, [r7, #16]
20002cf0:	1c59      	adds	r1, r3, #1
20002cf2:	68fa      	ldr	r2, [r7, #12]
20002cf4:	683b      	ldr	r3, [r7, #0]
20002cf6:	1ad4      	subs	r4, r2, r3
20002cf8:	68ba      	ldr	r2, [r7, #8]
20002cfa:	683b      	ldr	r3, [r7, #0]
20002cfc:	1ad3      	subs	r3, r2, r3
20002cfe:	0022      	movs	r2, r4
20002d00:	f7ff ffad 	bl	20002c5e <clearRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
20002d04:	697b      	ldr	r3, [r7, #20]
20002d06:	1c9a      	adds	r2, r3, #2
20002d08:	683b      	ldr	r3, [r7, #0]
20002d0a:	18d0      	adds	r0, r2, r3
20002d0c:	693b      	ldr	r3, [r7, #16]
20002d0e:	1c99      	adds	r1, r3, #2
20002d10:	68fb      	ldr	r3, [r7, #12]
20002d12:	1f1a      	subs	r2, r3, #4
20002d14:	683b      	ldr	r3, [r7, #0]
20002d16:	1ad4      	subs	r4, r2, r3
20002d18:	68bb      	ldr	r3, [r7, #8]
20002d1a:	1f1a      	subs	r2, r3, #4
20002d1c:	683b      	ldr	r3, [r7, #0]
20002d1e:	1ad3      	subs	r3, r2, r3
20002d20:	0022      	movs	r2, r4
20002d22:	f7ff ff9c 	bl	20002c5e <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
20002d26:	4b2d      	ldr	r3, [pc, #180]	; (20002ddc <grayScaleTest+0x12c>)
20002d28:	0018      	movs	r0, r3
20002d2a:	f7ff fe77 	bl	20002a1c <graphic_draw_screen>
		clear_backBuffer();
20002d2e:	f7ff fab5 	bl	2000229c <clear_backBuffer>
		fillRectangle(x, y, width, height);
20002d32:	68bb      	ldr	r3, [r7, #8]
20002d34:	68fa      	ldr	r2, [r7, #12]
20002d36:	6939      	ldr	r1, [r7, #16]
20002d38:	6978      	ldr	r0, [r7, #20]
20002d3a:	f7ff ff67 	bl	20002c0c <fillRectangle>
		
		fillRectangle(x+2+2, y+1, width-k, height-k); //outer white square
20002d3e:	697b      	ldr	r3, [r7, #20]
20002d40:	1d18      	adds	r0, r3, #4
20002d42:	693b      	ldr	r3, [r7, #16]
20002d44:	1c59      	adds	r1, r3, #1
20002d46:	68fa      	ldr	r2, [r7, #12]
20002d48:	683b      	ldr	r3, [r7, #0]
20002d4a:	1ad4      	subs	r4, r2, r3
20002d4c:	68ba      	ldr	r2, [r7, #8]
20002d4e:	683b      	ldr	r3, [r7, #0]
20002d50:	1ad3      	subs	r3, r2, r3
20002d52:	0022      	movs	r2, r4
20002d54:	f7ff ff5a 	bl	20002c0c <fillRectangle>
		fillRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
20002d58:	697b      	ldr	r3, [r7, #20]
20002d5a:	1c9a      	adds	r2, r3, #2
20002d5c:	683b      	ldr	r3, [r7, #0]
20002d5e:	18d0      	adds	r0, r2, r3
20002d60:	693b      	ldr	r3, [r7, #16]
20002d62:	1c99      	adds	r1, r3, #2
20002d64:	68fb      	ldr	r3, [r7, #12]
20002d66:	1f1a      	subs	r2, r3, #4
20002d68:	683b      	ldr	r3, [r7, #0]
20002d6a:	1ad4      	subs	r4, r2, r3
20002d6c:	68bb      	ldr	r3, [r7, #8]
20002d6e:	1f1a      	subs	r2, r3, #4
20002d70:	683b      	ldr	r3, [r7, #0]
20002d72:	1ad3      	subs	r3, r2, r3
20002d74:	0022      	movs	r2, r4
20002d76:	f7ff ff49 	bl	20002c0c <fillRectangle>
		clearRectangle(x+12, y+5, 5, 5);
20002d7a:	697b      	ldr	r3, [r7, #20]
20002d7c:	330c      	adds	r3, #12
20002d7e:	0018      	movs	r0, r3
20002d80:	693b      	ldr	r3, [r7, #16]
20002d82:	1d59      	adds	r1, r3, #5
20002d84:	2305      	movs	r3, #5
20002d86:	2205      	movs	r2, #5
20002d88:	f7ff ff69 	bl	20002c5e <clearRectangle>
		
		graphic_draw_screen(draw_buffer_black);
20002d8c:	4b13      	ldr	r3, [pc, #76]	; (20002ddc <grayScaleTest+0x12c>)
20002d8e:	0018      	movs	r0, r3
20002d90:	f7ff fe44 	bl	20002a1c <graphic_draw_screen>
		delay_milli(20);
20002d94:	2014      	movs	r0, #20
20002d96:	f7ff fa55 	bl	20002244 <delay_milli>
		
		clear_backBuffer();
20002d9a:	f7ff fa7f 	bl	2000229c <clear_backBuffer>
		fillRectangle(x, y, width, height);
20002d9e:	68bb      	ldr	r3, [r7, #8]
20002da0:	68fa      	ldr	r2, [r7, #12]
20002da2:	6939      	ldr	r1, [r7, #16]
20002da4:	6978      	ldr	r0, [r7, #20]
20002da6:	f7ff ff31 	bl	20002c0c <fillRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
20002daa:	697b      	ldr	r3, [r7, #20]
20002dac:	1c9a      	adds	r2, r3, #2
20002dae:	683b      	ldr	r3, [r7, #0]
20002db0:	18d0      	adds	r0, r2, r3
20002db2:	693b      	ldr	r3, [r7, #16]
20002db4:	1c99      	adds	r1, r3, #2
20002db6:	68fb      	ldr	r3, [r7, #12]
20002db8:	1f1a      	subs	r2, r3, #4
20002dba:	683b      	ldr	r3, [r7, #0]
20002dbc:	1ad4      	subs	r4, r2, r3
20002dbe:	68bb      	ldr	r3, [r7, #8]
20002dc0:	1f1a      	subs	r2, r3, #4
20002dc2:	683b      	ldr	r3, [r7, #0]
20002dc4:	1ad3      	subs	r3, r2, r3
20002dc6:	0022      	movs	r2, r4
20002dc8:	f7ff ff49 	bl	20002c5e <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
20002dcc:	4b03      	ldr	r3, [pc, #12]	; (20002ddc <grayScaleTest+0x12c>)
20002dce:	0018      	movs	r0, r3
20002dd0:	f7ff fe24 	bl	20002a1c <graphic_draw_screen>
		
		delay_milli(20);
20002dd4:	2014      	movs	r0, #20
20002dd6:	f7ff fa35 	bl	20002244 <delay_milli>
		clear_backBuffer();
20002dda:	e77e      	b.n	20002cda <grayScaleTest+0x2a>
20002ddc:	200053c4 	andcs	r5, r0, r4, asr #7

20002de0 <set_up_draw_buffers>:
	}
}

/** Should prepare the different drawing buffers, before the drawing of each frame.*/
void set_up_draw_buffers( void ) {
20002de0:	b580      	push	{r7, lr}
20002de2:	b082      	sub	sp, #8
20002de4:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 1024; i++) {
20002de6:	2300      	movs	r3, #0
20002de8:	607b      	str	r3, [r7, #4]
20002dea:	e065      	b.n	20002eb8 <set_up_draw_buffers+0xd8>
		draw_buffer_black[i] = backBuffer[i] & (~backBufferGray[i] & ~backBufferLight[i]); //Had to work a bit on these
20002dec:	4a36      	ldr	r2, [pc, #216]	; (20002ec8 <set_up_draw_buffers+0xe8>)
20002dee:	687b      	ldr	r3, [r7, #4]
20002df0:	18d3      	adds	r3, r2, r3
20002df2:	781b      	ldrb	r3, [r3, #0]
20002df4:	b25b      	sxtb	r3, r3
20002df6:	4935      	ldr	r1, [pc, #212]	; (20002ecc <set_up_draw_buffers+0xec>)
20002df8:	687a      	ldr	r2, [r7, #4]
20002dfa:	188a      	adds	r2, r1, r2
20002dfc:	7811      	ldrb	r1, [r2, #0]
20002dfe:	4834      	ldr	r0, [pc, #208]	; (20002ed0 <set_up_draw_buffers+0xf0>)
20002e00:	687a      	ldr	r2, [r7, #4]
20002e02:	1882      	adds	r2, r0, r2
20002e04:	7812      	ldrb	r2, [r2, #0]
20002e06:	430a      	orrs	r2, r1
20002e08:	b2d2      	uxtb	r2, r2
20002e0a:	b252      	sxtb	r2, r2
20002e0c:	43d2      	mvns	r2, r2
20002e0e:	b252      	sxtb	r2, r2
20002e10:	4013      	ands	r3, r2
20002e12:	b25b      	sxtb	r3, r3
20002e14:	b2d9      	uxtb	r1, r3
20002e16:	4a2f      	ldr	r2, [pc, #188]	; (20002ed4 <set_up_draw_buffers+0xf4>)
20002e18:	687b      	ldr	r3, [r7, #4]
20002e1a:	18d3      	adds	r3, r2, r3
20002e1c:	1c0a      	adds	r2, r1, #0
20002e1e:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray[i] = (backBuffer[i] | backBufferGray[i]) & ~backBufferLight[i]; //in order to make it possible
20002e20:	4a29      	ldr	r2, [pc, #164]	; (20002ec8 <set_up_draw_buffers+0xe8>)
20002e22:	687b      	ldr	r3, [r7, #4]
20002e24:	18d3      	adds	r3, r2, r3
20002e26:	781a      	ldrb	r2, [r3, #0]
20002e28:	4928      	ldr	r1, [pc, #160]	; (20002ecc <set_up_draw_buffers+0xec>)
20002e2a:	687b      	ldr	r3, [r7, #4]
20002e2c:	18cb      	adds	r3, r1, r3
20002e2e:	781b      	ldrb	r3, [r3, #0]
20002e30:	4313      	orrs	r3, r2
20002e32:	b2db      	uxtb	r3, r3
20002e34:	b25b      	sxtb	r3, r3
20002e36:	4926      	ldr	r1, [pc, #152]	; (20002ed0 <set_up_draw_buffers+0xf0>)
20002e38:	687a      	ldr	r2, [r7, #4]
20002e3a:	188a      	adds	r2, r1, r2
20002e3c:	7812      	ldrb	r2, [r2, #0]
20002e3e:	b252      	sxtb	r2, r2
20002e40:	43d2      	mvns	r2, r2
20002e42:	b252      	sxtb	r2, r2
20002e44:	4013      	ands	r3, r2
20002e46:	b25b      	sxtb	r3, r3
20002e48:	b2d9      	uxtb	r1, r3
20002e4a:	4a23      	ldr	r2, [pc, #140]	; (20002ed8 <set_up_draw_buffers+0xf8>)
20002e4c:	687b      	ldr	r3, [r7, #4]
20002e4e:	18d3      	adds	r3, r2, r3
20002e50:	1c0a      	adds	r2, r1, #0
20002e52:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_light[i] = (backBuffer[i] | backBufferLight[i]) & ~backBufferGray[i]; //to show a lighter sprite
20002e54:	4a1c      	ldr	r2, [pc, #112]	; (20002ec8 <set_up_draw_buffers+0xe8>)
20002e56:	687b      	ldr	r3, [r7, #4]
20002e58:	18d3      	adds	r3, r2, r3
20002e5a:	781a      	ldrb	r2, [r3, #0]
20002e5c:	491c      	ldr	r1, [pc, #112]	; (20002ed0 <set_up_draw_buffers+0xf0>)
20002e5e:	687b      	ldr	r3, [r7, #4]
20002e60:	18cb      	adds	r3, r1, r3
20002e62:	781b      	ldrb	r3, [r3, #0]
20002e64:	4313      	orrs	r3, r2
20002e66:	b2db      	uxtb	r3, r3
20002e68:	b25b      	sxtb	r3, r3
20002e6a:	4918      	ldr	r1, [pc, #96]	; (20002ecc <set_up_draw_buffers+0xec>)
20002e6c:	687a      	ldr	r2, [r7, #4]
20002e6e:	188a      	adds	r2, r1, r2
20002e70:	7812      	ldrb	r2, [r2, #0]
20002e72:	b252      	sxtb	r2, r2
20002e74:	43d2      	mvns	r2, r2
20002e76:	b252      	sxtb	r2, r2
20002e78:	4013      	ands	r3, r2
20002e7a:	b25b      	sxtb	r3, r3
20002e7c:	b2d9      	uxtb	r1, r3
20002e7e:	4a17      	ldr	r2, [pc, #92]	; (20002edc <set_up_draw_buffers+0xfc>)
20002e80:	687b      	ldr	r3, [r7, #4]
20002e82:	18d3      	adds	r3, r2, r3
20002e84:	1c0a      	adds	r2, r1, #0
20002e86:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray_light[i] = backBuffer[i] | backBufferGray[i] | backBufferLight[i]; //on top of a darker one.
20002e88:	4a0f      	ldr	r2, [pc, #60]	; (20002ec8 <set_up_draw_buffers+0xe8>)
20002e8a:	687b      	ldr	r3, [r7, #4]
20002e8c:	18d3      	adds	r3, r2, r3
20002e8e:	781a      	ldrb	r2, [r3, #0]
20002e90:	490e      	ldr	r1, [pc, #56]	; (20002ecc <set_up_draw_buffers+0xec>)
20002e92:	687b      	ldr	r3, [r7, #4]
20002e94:	18cb      	adds	r3, r1, r3
20002e96:	781b      	ldrb	r3, [r3, #0]
20002e98:	4313      	orrs	r3, r2
20002e9a:	b2da      	uxtb	r2, r3
20002e9c:	490c      	ldr	r1, [pc, #48]	; (20002ed0 <set_up_draw_buffers+0xf0>)
20002e9e:	687b      	ldr	r3, [r7, #4]
20002ea0:	18cb      	adds	r3, r1, r3
20002ea2:	781b      	ldrb	r3, [r3, #0]
20002ea4:	4313      	orrs	r3, r2
20002ea6:	b2d9      	uxtb	r1, r3
20002ea8:	4a0d      	ldr	r2, [pc, #52]	; (20002ee0 <set_up_draw_buffers+0x100>)
20002eaa:	687b      	ldr	r3, [r7, #4]
20002eac:	18d3      	adds	r3, r2, r3
20002eae:	1c0a      	adds	r2, r1, #0
20002eb0:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 1024; i++) {
20002eb2:	687b      	ldr	r3, [r7, #4]
20002eb4:	3301      	adds	r3, #1
20002eb6:	607b      	str	r3, [r7, #4]
20002eb8:	687b      	ldr	r3, [r7, #4]
20002eba:	4a0a      	ldr	r2, [pc, #40]	; (20002ee4 <set_up_draw_buffers+0x104>)
20002ebc:	4293      	cmp	r3, r2
20002ebe:	dd95      	ble.n	20002dec <set_up_draw_buffers+0xc>
	}
}
20002ec0:	46c0      	nop			; (mov r8, r8)
20002ec2:	46bd      	mov	sp, r7
20002ec4:	b002      	add	sp, #8
20002ec6:	bd80      	pop	{r7, pc}
20002ec8:	20004bc4 	andcs	r4, r0, r4, asr #23
20002ecc:	200043c4 	andcs	r4, r0, r4, asr #7
20002ed0:	20005bc4 	andcs	r5, r0, r4, asr #23
20002ed4:	200053c4 	andcs	r5, r0, r4, asr #7
20002ed8:	200047c4 	andcs	r4, r0, r4, asr #15
20002edc:	20004fc4 	andcs	r4, r0, r4, asr #31
20002ee0:	200057c4 	andcs	r5, r0, r4, asr #15
20002ee4:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20002ee8 <draw_game_object>:

void draw_game_object(GameObject *gObj) {
20002ee8:	b580      	push	{r7, lr}
20002eea:	b086      	sub	sp, #24
20002eec:	af02      	add	r7, sp, #8
20002eee:	6078      	str	r0, [r7, #4]
	int frame = gObj->current_frame;
20002ef0:	687b      	ldr	r3, [r7, #4]
20002ef2:	695b      	ldr	r3, [r3, #20]
20002ef4:	60fb      	str	r3, [r7, #12]
	draw_sprite(gObj->images[frame].blackImage, gObj->xPos, gObj->yPos, 1, 3);
20002ef6:	687b      	ldr	r3, [r7, #4]
20002ef8:	6819      	ldr	r1, [r3, #0]
20002efa:	68fa      	ldr	r2, [r7, #12]
20002efc:	0013      	movs	r3, r2
20002efe:	005b      	lsls	r3, r3, #1
20002f00:	189b      	adds	r3, r3, r2
20002f02:	009b      	lsls	r3, r3, #2
20002f04:	18cb      	adds	r3, r1, r3
20002f06:	6818      	ldr	r0, [r3, #0]
20002f08:	687b      	ldr	r3, [r7, #4]
20002f0a:	6859      	ldr	r1, [r3, #4]
20002f0c:	687b      	ldr	r3, [r7, #4]
20002f0e:	689a      	ldr	r2, [r3, #8]
20002f10:	2303      	movs	r3, #3
20002f12:	9300      	str	r3, [sp, #0]
20002f14:	2301      	movs	r3, #1
20002f16:	f7ff fdec 	bl	20002af2 <draw_sprite>
	draw_sprite(gObj->images[frame].grayImage, gObj->xPos, gObj->yPos, 1, 2);
20002f1a:	687b      	ldr	r3, [r7, #4]
20002f1c:	6819      	ldr	r1, [r3, #0]
20002f1e:	68fa      	ldr	r2, [r7, #12]
20002f20:	0013      	movs	r3, r2
20002f22:	005b      	lsls	r3, r3, #1
20002f24:	189b      	adds	r3, r3, r2
20002f26:	009b      	lsls	r3, r3, #2
20002f28:	18cb      	adds	r3, r1, r3
20002f2a:	6858      	ldr	r0, [r3, #4]
20002f2c:	687b      	ldr	r3, [r7, #4]
20002f2e:	6859      	ldr	r1, [r3, #4]
20002f30:	687b      	ldr	r3, [r7, #4]
20002f32:	689a      	ldr	r2, [r3, #8]
20002f34:	2302      	movs	r3, #2
20002f36:	9300      	str	r3, [sp, #0]
20002f38:	2301      	movs	r3, #1
20002f3a:	f7ff fdda 	bl	20002af2 <draw_sprite>
	draw_sprite(gObj->images[frame].lightImage, gObj->xPos, gObj->yPos, 1, 1);
20002f3e:	687b      	ldr	r3, [r7, #4]
20002f40:	6819      	ldr	r1, [r3, #0]
20002f42:	68fa      	ldr	r2, [r7, #12]
20002f44:	0013      	movs	r3, r2
20002f46:	005b      	lsls	r3, r3, #1
20002f48:	189b      	adds	r3, r3, r2
20002f4a:	009b      	lsls	r3, r3, #2
20002f4c:	18cb      	adds	r3, r1, r3
20002f4e:	6898      	ldr	r0, [r3, #8]
20002f50:	687b      	ldr	r3, [r7, #4]
20002f52:	6859      	ldr	r1, [r3, #4]
20002f54:	687b      	ldr	r3, [r7, #4]
20002f56:	689a      	ldr	r2, [r3, #8]
20002f58:	2301      	movs	r3, #1
20002f5a:	9300      	str	r3, [sp, #0]
20002f5c:	2301      	movs	r3, #1
20002f5e:	f7ff fdc8 	bl	20002af2 <draw_sprite>
}
20002f62:	46c0      	nop			; (mov r8, r8)
20002f64:	46bd      	mov	sp, r7
20002f66:	b004      	add	sp, #16
20002f68:	bd80      	pop	{r7, pc}

20002f6a <show_frame>:


void show_frame(int frame_length) {
20002f6a:	b580      	push	{r7, lr}
20002f6c:	b082      	sub	sp, #8
20002f6e:	af00      	add	r7, sp, #0
20002f70:	6078      	str	r0, [r7, #4]
	set_up_draw_buffers();
20002f72:	f7ff ff35 	bl	20002de0 <set_up_draw_buffers>
	
	while(frame_length--) {
20002f76:	e01b      	b.n	20002fb0 <show_frame+0x46>
		graphic_draw_screen(draw_buffer_black_gray_light);
20002f78:	4b13      	ldr	r3, [pc, #76]	; (20002fc8 <show_frame+0x5e>)
20002f7a:	0018      	movs	r0, r3
20002f7c:	f7ff fd4e 	bl	20002a1c <graphic_draw_screen>
		delay_milli(1);
20002f80:	2001      	movs	r0, #1
20002f82:	f7ff f95f 	bl	20002244 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
20002f86:	4b11      	ldr	r3, [pc, #68]	; (20002fcc <show_frame+0x62>)
20002f88:	0018      	movs	r0, r3
20002f8a:	f7ff fd47 	bl	20002a1c <graphic_draw_screen>
		delay_milli(1);
20002f8e:	2001      	movs	r0, #1
20002f90:	f7ff f958 	bl	20002244 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black_gray);
20002f94:	4b0e      	ldr	r3, [pc, #56]	; (20002fd0 <show_frame+0x66>)
20002f96:	0018      	movs	r0, r3
20002f98:	f7ff fd40 	bl	20002a1c <graphic_draw_screen>
		delay_milli(1);
20002f9c:	2001      	movs	r0, #1
20002f9e:	f7ff f951 	bl	20002244 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
20002fa2:	4b0a      	ldr	r3, [pc, #40]	; (20002fcc <show_frame+0x62>)
20002fa4:	0018      	movs	r0, r3
20002fa6:	f7ff fd39 	bl	20002a1c <graphic_draw_screen>
		delay_milli(1);
20002faa:	2001      	movs	r0, #1
20002fac:	f7ff f94a 	bl	20002244 <delay_milli>
	while(frame_length--) {
20002fb0:	687b      	ldr	r3, [r7, #4]
20002fb2:	1e5a      	subs	r2, r3, #1
20002fb4:	607a      	str	r2, [r7, #4]
20002fb6:	2b00      	cmp	r3, #0
20002fb8:	d1de      	bne.n	20002f78 <show_frame+0xe>
	}
	
	clear_all_backBuffers();	//Maybe we could be more effective by only clearing the necessary stuff,
20002fba:	f7ff f97b 	bl	200022b4 <clear_all_backBuffers>
								//but let's keep it like this if it works.
20002fbe:	46c0      	nop			; (mov r8, r8)
20002fc0:	46bd      	mov	sp, r7
20002fc2:	b002      	add	sp, #8
20002fc4:	bd80      	pop	{r7, pc}
20002fc6:	46c0      	nop			; (mov r8, r8)
20002fc8:	200057c4 	andcs	r5, r0, r4, asr #15
20002fcc:	200053c4 	andcs	r5, r0, r4, asr #7
20002fd0:	200047c4 	andcs	r4, r0, r4, asr #15

20002fd4 <load_image>:
#include "image.h"

void load_image( Image *image, sprite *blackImage, sprite *grayImage, sprite *lightImage ) {
20002fd4:	b580      	push	{r7, lr}
20002fd6:	b084      	sub	sp, #16
20002fd8:	af00      	add	r7, sp, #0
20002fda:	60f8      	str	r0, [r7, #12]
20002fdc:	60b9      	str	r1, [r7, #8]
20002fde:	607a      	str	r2, [r7, #4]
20002fe0:	603b      	str	r3, [r7, #0]
	image->blackImage = blackImage;
20002fe2:	68fb      	ldr	r3, [r7, #12]
20002fe4:	68ba      	ldr	r2, [r7, #8]
20002fe6:	601a      	str	r2, [r3, #0]
	image->grayImage = grayImage;
20002fe8:	68fb      	ldr	r3, [r7, #12]
20002fea:	687a      	ldr	r2, [r7, #4]
20002fec:	605a      	str	r2, [r3, #4]
	image->lightImage = lightImage;
20002fee:	68fb      	ldr	r3, [r7, #12]
20002ff0:	683a      	ldr	r2, [r7, #0]
20002ff2:	609a      	str	r2, [r3, #8]
}
20002ff4:	46c0      	nop			; (mov r8, r8)
20002ff6:	46bd      	mov	sp, r7
20002ff8:	b004      	add	sp, #16
20002ffa:	bd80      	pop	{r7, pc}

20002ffc <load_sprite>:
#include "sprite.h"

void load_sprite(sprite* s, unsigned char* data, int width, int height)
{
20002ffc:	b580      	push	{r7, lr}
20002ffe:	b084      	sub	sp, #16
20003000:	af00      	add	r7, sp, #0
20003002:	60f8      	str	r0, [r7, #12]
20003004:	60b9      	str	r1, [r7, #8]
20003006:	607a      	str	r2, [r7, #4]
20003008:	603b      	str	r3, [r7, #0]
	s->width = width;
2000300a:	687a      	ldr	r2, [r7, #4]
2000300c:	68fb      	ldr	r3, [r7, #12]
2000300e:	601a      	str	r2, [r3, #0]
	s->height = height;
20003010:	683a      	ldr	r2, [r7, #0]
20003012:	68fb      	ldr	r3, [r7, #12]
20003014:	605a      	str	r2, [r3, #4]
	s->data = data;
20003016:	68fb      	ldr	r3, [r7, #12]
20003018:	68ba      	ldr	r2, [r7, #8]
2000301a:	609a      	str	r2, [r3, #8]
}
2000301c:	46c0      	nop			; (mov r8, r8)
2000301e:	46bd      	mov	sp, r7
20003020:	b004      	add	sp, #16
20003022:	bd80      	pop	{r7, pc}

20003024 <set_up_DIL>:
#include "gpio.h"

/** Sets up PE0-7 as inports and PE8-15 as outports. */
void set_up_DIL( void ) {
20003024:	b580      	push	{r7, lr}
20003026:	af00      	add	r7, sp, #0
	GPIO_D.Moder = 0x55550000;
20003028:	4b02      	ldr	r3, [pc, #8]	; (20003034 <set_up_DIL+0x10>)
2000302a:	4a03      	ldr	r2, [pc, #12]	; (20003038 <set_up_DIL+0x14>)
2000302c:	601a      	str	r2, [r3, #0]
}
2000302e:	46c0      	nop			; (mov r8, r8)
20003030:	46bd      	mov	sp, r7
20003032:	bd80      	pop	{r7, pc}
20003034:	40020c00 	andmi	r0, r2, r0, lsl #24
20003038:	55550000 	ldrbpl	r0, [r5, #-0]

2000303c <read_DIL>:

char read_DIL( void ) {
2000303c:	b580      	push	{r7, lr}
2000303e:	af00      	add	r7, sp, #0
	GPIO_D.odrHigh = GPIO_D.idrLow; //Show on bargraph
20003040:	4b05      	ldr	r3, [pc, #20]	; (20003058 <read_DIL+0x1c>)
20003042:	4a05      	ldr	r2, [pc, #20]	; (20003058 <read_DIL+0x1c>)
20003044:	7c12      	ldrb	r2, [r2, #16]
20003046:	b2d2      	uxtb	r2, r2
20003048:	755a      	strb	r2, [r3, #21]
	return GPIO_D.idrLow;
2000304a:	4b03      	ldr	r3, [pc, #12]	; (20003058 <read_DIL+0x1c>)
2000304c:	7c1b      	ldrb	r3, [r3, #16]
2000304e:	b2db      	uxtb	r3, r3
}
20003050:	0018      	movs	r0, r3
20003052:	46bd      	mov	sp, r7
20003054:	bd80      	pop	{r7, pc}
20003056:	46c0      	nop			; (mov r8, r8)
20003058:	40020c00 	andmi	r0, r2, r0, lsl #24

2000305c <read_DIL_single>:


int read_DIL_single( int bit ) {
2000305c:	b590      	push	{r4, r7, lr}
2000305e:	b085      	sub	sp, #20
20003060:	af00      	add	r7, sp, #0
20003062:	6078      	str	r0, [r7, #4]
	char DIL = read_DIL();
20003064:	230f      	movs	r3, #15
20003066:	18fc      	adds	r4, r7, r3
20003068:	f7ff ffe8 	bl	2000303c <read_DIL>
2000306c:	0003      	movs	r3, r0
2000306e:	7023      	strb	r3, [r4, #0]
	if (DIL & (1<<bit)) {
20003070:	230f      	movs	r3, #15
20003072:	18fb      	adds	r3, r7, r3
20003074:	781a      	ldrb	r2, [r3, #0]
20003076:	687b      	ldr	r3, [r7, #4]
20003078:	411a      	asrs	r2, r3
2000307a:	0013      	movs	r3, r2
2000307c:	2201      	movs	r2, #1
2000307e:	4013      	ands	r3, r2
20003080:	d001      	beq.n	20003086 <read_DIL_single+0x2a>
		return 1;
20003082:	2301      	movs	r3, #1
20003084:	e000      	b.n	20003088 <read_DIL_single+0x2c>
	} else {
		return 0;
20003086:	2300      	movs	r3, #0
	}
20003088:	0018      	movs	r0, r3
2000308a:	46bd      	mov	sp, r7
2000308c:	b005      	add	sp, #20
2000308e:	bd90      	pop	{r4, r7, pc}

20003090 <ascii_ctrl_bit_set>:
void ascii_write_data(unsigned char data);
unsigned char ascii_read_status(void);
unsigned char ascii_read_data(void);


void ascii_ctrl_bit_set(unsigned char x){
20003090:	b580      	push	{r7, lr}
20003092:	b084      	sub	sp, #16
20003094:	af00      	add	r7, sp, #0
20003096:	0002      	movs	r2, r0
20003098:	1dfb      	adds	r3, r7, #7
2000309a:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och ettstÃƒÂ¤ll de bitar som ÃƒÂ¤r 1 i x
	unsigned char c;
	c = *portOdrLow;
2000309c:	4a0c      	ldr	r2, [pc, #48]	; (200030d0 <ascii_ctrl_bit_set+0x40>)
2000309e:	230f      	movs	r3, #15
200030a0:	18fb      	adds	r3, r7, r3
200030a2:	7812      	ldrb	r2, [r2, #0]
200030a4:	701a      	strb	r2, [r3, #0]
	c |= (B_SELECT | x);
200030a6:	1dfa      	adds	r2, r7, #7
200030a8:	230f      	movs	r3, #15
200030aa:	18fb      	adds	r3, r7, r3
200030ac:	7812      	ldrb	r2, [r2, #0]
200030ae:	781b      	ldrb	r3, [r3, #0]
200030b0:	4313      	orrs	r3, r2
200030b2:	b2da      	uxtb	r2, r3
200030b4:	230f      	movs	r3, #15
200030b6:	18fb      	adds	r3, r7, r3
200030b8:	2104      	movs	r1, #4
200030ba:	430a      	orrs	r2, r1
200030bc:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
200030be:	4a04      	ldr	r2, [pc, #16]	; (200030d0 <ascii_ctrl_bit_set+0x40>)
200030c0:	230f      	movs	r3, #15
200030c2:	18fb      	adds	r3, r7, r3
200030c4:	781b      	ldrb	r3, [r3, #0]
200030c6:	7013      	strb	r3, [r2, #0]
}
200030c8:	46c0      	nop			; (mov r8, r8)
200030ca:	46bd      	mov	sp, r7
200030cc:	b004      	add	sp, #16
200030ce:	bd80      	pop	{r7, pc}
200030d0:	40021014 	andmi	r1, r2, r4, lsl r0

200030d4 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
200030d4:	b580      	push	{r7, lr}
200030d6:	b084      	sub	sp, #16
200030d8:	af00      	add	r7, sp, #0
200030da:	0002      	movs	r2, r0
200030dc:	1dfb      	adds	r3, r7, #7
200030de:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och nollstÃ¤ll de bitar som Ã¤r 1 i x
	unsigned char c;
	c = *portOdrLow;
200030e0:	4a0f      	ldr	r2, [pc, #60]	; (20003120 <ascii_ctrl_bit_clear+0x4c>)
200030e2:	230f      	movs	r3, #15
200030e4:	18fb      	adds	r3, r7, r3
200030e6:	7812      	ldrb	r2, [r2, #0]
200030e8:	701a      	strb	r2, [r3, #0]
	c = (B_SELECT | c & ~x);
200030ea:	1dfb      	adds	r3, r7, #7
200030ec:	781b      	ldrb	r3, [r3, #0]
200030ee:	b25b      	sxtb	r3, r3
200030f0:	43db      	mvns	r3, r3
200030f2:	b25b      	sxtb	r3, r3
200030f4:	220f      	movs	r2, #15
200030f6:	18ba      	adds	r2, r7, r2
200030f8:	7812      	ldrb	r2, [r2, #0]
200030fa:	b252      	sxtb	r2, r2
200030fc:	4013      	ands	r3, r2
200030fe:	b25b      	sxtb	r3, r3
20003100:	2204      	movs	r2, #4
20003102:	4313      	orrs	r3, r2
20003104:	b25a      	sxtb	r2, r3
20003106:	230f      	movs	r3, #15
20003108:	18fb      	adds	r3, r7, r3
2000310a:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
2000310c:	4a04      	ldr	r2, [pc, #16]	; (20003120 <ascii_ctrl_bit_clear+0x4c>)
2000310e:	230f      	movs	r3, #15
20003110:	18fb      	adds	r3, r7, r3
20003112:	781b      	ldrb	r3, [r3, #0]
20003114:	7013      	strb	r3, [r2, #0]
}
20003116:	46c0      	nop			; (mov r8, r8)
20003118:	46bd      	mov	sp, r7
2000311a:	b004      	add	sp, #16
2000311c:	bd80      	pop	{r7, pc}
2000311e:	46c0      	nop			; (mov r8, r8)
20003120:	40021014 	andmi	r1, r2, r4, lsl r0

20003124 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20003124:	b580      	push	{r7, lr}
20003126:	b082      	sub	sp, #8
20003128:	af00      	add	r7, sp, #0
2000312a:	0002      	movs	r2, r0
2000312c:	1dfb      	adds	r3, r7, #7
2000312e:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20003130:	2001      	movs	r0, #1
20003132:	f7ff ffcf 	bl	200030d4 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20003136:	2002      	movs	r0, #2
20003138:	f7ff ffcc 	bl	200030d4 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
2000313c:	1dfb      	adds	r3, r7, #7
2000313e:	781b      	ldrb	r3, [r3, #0]
20003140:	0018      	movs	r0, r3
20003142:	f000 f86d 	bl	20003220 <ascii_write_controller>
}
20003146:	46c0      	nop			; (mov r8, r8)
20003148:	46bd      	mov	sp, r7
2000314a:	b002      	add	sp, #8
2000314c:	bd80      	pop	{r7, pc}

2000314e <ascii_write_data>:

void ascii_write_data(unsigned char data){
2000314e:	b580      	push	{r7, lr}
20003150:	b082      	sub	sp, #8
20003152:	af00      	add	r7, sp, #0
20003154:	0002      	movs	r2, r0
20003156:	1dfb      	adds	r3, r7, #7
20003158:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
2000315a:	2001      	movs	r0, #1
2000315c:	f7ff ff98 	bl	20003090 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20003160:	2002      	movs	r0, #2
20003162:	f7ff ffb7 	bl	200030d4 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20003166:	1dfb      	adds	r3, r7, #7
20003168:	781b      	ldrb	r3, [r3, #0]
2000316a:	0018      	movs	r0, r3
2000316c:	f000 f858 	bl	20003220 <ascii_write_controller>
}
20003170:	46c0      	nop			; (mov r8, r8)
20003172:	46bd      	mov	sp, r7
20003174:	b002      	add	sp, #8
20003176:	bd80      	pop	{r7, pc}

20003178 <ascii_read_status>:

unsigned char ascii_read_status(void){
20003178:	b590      	push	{r4, r7, lr}
2000317a:	b083      	sub	sp, #12
2000317c:	af00      	add	r7, sp, #0
	//sÃƒÂ¤tt Port E bit15-8 som ingÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
2000317e:	4b11      	ldr	r3, [pc, #68]	; (200031c4 <ascii_read_status+0x4c>)
20003180:	4a10      	ldr	r2, [pc, #64]	; (200031c4 <ascii_read_status+0x4c>)
20003182:	6812      	ldr	r2, [r2, #0]
20003184:	0412      	lsls	r2, r2, #16
20003186:	0c12      	lsrs	r2, r2, #16
20003188:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
2000318a:	2001      	movs	r0, #1
2000318c:	f7ff ffa2 	bl	200030d4 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
20003190:	2002      	movs	r0, #2
20003192:	f7ff ff7d 	bl	20003090 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20003196:	1dfc      	adds	r4, r7, #7
20003198:	f000 f85a 	bl	20003250 <ascii_read_controller>
2000319c:	0003      	movs	r3, r0
2000319e:	7023      	strb	r3, [r4, #0]
	//sÃƒÂ¤tt Port E bit15-8 som utgÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
200031a0:	4b08      	ldr	r3, [pc, #32]	; (200031c4 <ascii_read_status+0x4c>)
200031a2:	4a08      	ldr	r2, [pc, #32]	; (200031c4 <ascii_read_status+0x4c>)
200031a4:	6812      	ldr	r2, [r2, #0]
200031a6:	0412      	lsls	r2, r2, #16
200031a8:	0c12      	lsrs	r2, r2, #16
200031aa:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
200031ac:	4b05      	ldr	r3, [pc, #20]	; (200031c4 <ascii_read_status+0x4c>)
200031ae:	4a05      	ldr	r2, [pc, #20]	; (200031c4 <ascii_read_status+0x4c>)
200031b0:	6812      	ldr	r2, [r2, #0]
200031b2:	4905      	ldr	r1, [pc, #20]	; (200031c8 <ascii_read_status+0x50>)
200031b4:	430a      	orrs	r2, r1
200031b6:	601a      	str	r2, [r3, #0]
	return rv;
200031b8:	1dfb      	adds	r3, r7, #7
200031ba:	781b      	ldrb	r3, [r3, #0]
}
200031bc:	0018      	movs	r0, r3
200031be:	46bd      	mov	sp, r7
200031c0:	b003      	add	sp, #12
200031c2:	bd90      	pop	{r4, r7, pc}
200031c4:	40021000 	andmi	r1, r2, r0
200031c8:	55550000 	ldrbpl	r0, [r5, #-0]

200031cc <ascii_read_data>:

unsigned char ascii_read_data(void){
200031cc:	b590      	push	{r4, r7, lr}
200031ce:	b083      	sub	sp, #12
200031d0:	af00      	add	r7, sp, #0
	//sÃƒÂ¤tt Port E bit15-8 som ingÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
200031d2:	4b11      	ldr	r3, [pc, #68]	; (20003218 <ascii_read_data+0x4c>)
200031d4:	4a10      	ldr	r2, [pc, #64]	; (20003218 <ascii_read_data+0x4c>)
200031d6:	6812      	ldr	r2, [r2, #0]
200031d8:	0412      	lsls	r2, r2, #16
200031da:	0c12      	lsrs	r2, r2, #16
200031dc:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
200031de:	2001      	movs	r0, #1
200031e0:	f7ff ff56 	bl	20003090 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
200031e4:	2002      	movs	r0, #2
200031e6:	f7ff ff53 	bl	20003090 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
200031ea:	1dfc      	adds	r4, r7, #7
200031ec:	f000 f830 	bl	20003250 <ascii_read_controller>
200031f0:	0003      	movs	r3, r0
200031f2:	7023      	strb	r3, [r4, #0]
	//sÃƒÂ¤tt Port E bit15-8 som utgÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
200031f4:	4b08      	ldr	r3, [pc, #32]	; (20003218 <ascii_read_data+0x4c>)
200031f6:	4a08      	ldr	r2, [pc, #32]	; (20003218 <ascii_read_data+0x4c>)
200031f8:	6812      	ldr	r2, [r2, #0]
200031fa:	0412      	lsls	r2, r2, #16
200031fc:	0c12      	lsrs	r2, r2, #16
200031fe:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
20003200:	4b05      	ldr	r3, [pc, #20]	; (20003218 <ascii_read_data+0x4c>)
20003202:	4a05      	ldr	r2, [pc, #20]	; (20003218 <ascii_read_data+0x4c>)
20003204:	6812      	ldr	r2, [r2, #0]
20003206:	4905      	ldr	r1, [pc, #20]	; (2000321c <ascii_read_data+0x50>)
20003208:	430a      	orrs	r2, r1
2000320a:	601a      	str	r2, [r3, #0]
	return rv;
2000320c:	1dfb      	adds	r3, r7, #7
2000320e:	781b      	ldrb	r3, [r3, #0]
}
20003210:	0018      	movs	r0, r3
20003212:	46bd      	mov	sp, r7
20003214:	b003      	add	sp, #12
20003216:	bd90      	pop	{r4, r7, pc}
20003218:	40021000 	andmi	r1, r2, r0
2000321c:	55550000 	ldrbpl	r0, [r5, #-0]

20003220 <ascii_write_controller>:

void ascii_write_controller(unsigned char c){
20003220:	b580      	push	{r7, lr}
20003222:	b082      	sub	sp, #8
20003224:	af00      	add	r7, sp, #0
20003226:	0002      	movs	r2, r0
20003228:	1dfb      	adds	r3, r7, #7
2000322a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
2000322c:	2040      	movs	r0, #64	; 0x40
2000322e:	f7ff ff2f 	bl	20003090 <ascii_ctrl_bit_set>
	*portOdrHigh = c;
20003232:	4a06      	ldr	r2, [pc, #24]	; (2000324c <ascii_write_controller+0x2c>)
20003234:	1dfb      	adds	r3, r7, #7
20003236:	781b      	ldrb	r3, [r3, #0]
20003238:	7013      	strb	r3, [r2, #0]
	delay_250ns();
2000323a:	f7fe ffa9 	bl	20002190 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
2000323e:	2040      	movs	r0, #64	; 0x40
20003240:	f7ff ff48 	bl	200030d4 <ascii_ctrl_bit_clear>
}
20003244:	46c0      	nop			; (mov r8, r8)
20003246:	46bd      	mov	sp, r7
20003248:	b002      	add	sp, #8
2000324a:	bd80      	pop	{r7, pc}
2000324c:	40021015 	andmi	r1, r2, r5, lsl r0

20003250 <ascii_read_controller>:

unsigned char ascii_read_controller(void){
20003250:	b580      	push	{r7, lr}
20003252:	b082      	sub	sp, #8
20003254:	af00      	add	r7, sp, #0
	unsigned char c;
	ascii_ctrl_bit_set(B_E);
20003256:	2040      	movs	r0, #64	; 0x40
20003258:	f7ff ff1a 	bl	20003090 <ascii_ctrl_bit_set>
	delay_250ns();
2000325c:	f7fe ff98 	bl	20002190 <delay_250ns>
	delay_250ns();
20003260:	f7fe ff96 	bl	20002190 <delay_250ns>
	c = *portIdrHigh;
20003264:	4a06      	ldr	r2, [pc, #24]	; (20003280 <ascii_read_controller+0x30>)
20003266:	1dfb      	adds	r3, r7, #7
20003268:	7812      	ldrb	r2, [r2, #0]
2000326a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
2000326c:	2040      	movs	r0, #64	; 0x40
2000326e:	f7ff ff31 	bl	200030d4 <ascii_ctrl_bit_clear>
	return c;
20003272:	1dfb      	adds	r3, r7, #7
20003274:	781b      	ldrb	r3, [r3, #0]
}
20003276:	0018      	movs	r0, r3
20003278:	46bd      	mov	sp, r7
2000327a:	b002      	add	sp, #8
2000327c:	bd80      	pop	{r7, pc}
2000327e:	46c0      	nop			; (mov r8, r8)
20003280:	40021011 	andmi	r1, r2, r1, lsl r0

20003284 <ascii_write_char>:

void ascii_write_char(unsigned char c){
20003284:	b580      	push	{r7, lr}
20003286:	b082      	sub	sp, #8
20003288:	af00      	add	r7, sp, #0
2000328a:	0002      	movs	r2, r0
2000328c:	1dfb      	adds	r3, r7, #7
2000328e:	701a      	strb	r2, [r3, #0]
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20003290:	46c0      	nop			; (mov r8, r8)
20003292:	f7ff ff71 	bl	20003178 <ascii_read_status>
20003296:	0003      	movs	r3, r0
20003298:	001a      	movs	r2, r3
2000329a:	2380      	movs	r3, #128	; 0x80
2000329c:	4013      	ands	r3, r2
2000329e:	2b80      	cmp	r3, #128	; 0x80
200032a0:	d0f7      	beq.n	20003292 <ascii_write_char+0xe>
		delay_micro(8); //latenstid
200032a2:	2008      	movs	r0, #8
200032a4:	f7fe ffb8 	bl	20002218 <delay_micro>
		ascii_write_data(c);
200032a8:	1dfb      	adds	r3, r7, #7
200032aa:	781b      	ldrb	r3, [r3, #0]
200032ac:	0018      	movs	r0, r3
200032ae:	f7ff ff4e 	bl	2000314e <ascii_write_data>
		delay_micro(50); //istÃƒÂ¤llet fÃƒÂ¶r 43us
200032b2:	2032      	movs	r0, #50	; 0x32
200032b4:	f7fe ffb0 	bl	20002218 <delay_micro>
}
200032b8:	46c0      	nop			; (mov r8, r8)
200032ba:	46bd      	mov	sp, r7
200032bc:	b002      	add	sp, #8
200032be:	bd80      	pop	{r7, pc}

200032c0 <ascii_goToXY>:

void ascii_goToXY(unsigned char row, unsigned char column){
200032c0:	b580      	push	{r7, lr}
200032c2:	b084      	sub	sp, #16
200032c4:	af00      	add	r7, sp, #0
200032c6:	0002      	movs	r2, r0
200032c8:	1dfb      	adds	r3, r7, #7
200032ca:	701a      	strb	r2, [r3, #0]
200032cc:	1dbb      	adds	r3, r7, #6
200032ce:	1c0a      	adds	r2, r1, #0
200032d0:	701a      	strb	r2, [r3, #0]
	unsigned char address = row-1;
200032d2:	230f      	movs	r3, #15
200032d4:	18fb      	adds	r3, r7, r3
200032d6:	1dfa      	adds	r2, r7, #7
200032d8:	7812      	ldrb	r2, [r2, #0]
200032da:	3a01      	subs	r2, #1
200032dc:	701a      	strb	r2, [r3, #0]
	if(column == 2){
200032de:	1dbb      	adds	r3, r7, #6
200032e0:	781b      	ldrb	r3, [r3, #0]
200032e2:	2b02      	cmp	r3, #2
200032e4:	d106      	bne.n	200032f4 <ascii_goToXY+0x34>
		address += 0x40;
200032e6:	230f      	movs	r3, #15
200032e8:	18fb      	adds	r3, r7, r3
200032ea:	220f      	movs	r2, #15
200032ec:	18ba      	adds	r2, r7, r2
200032ee:	7812      	ldrb	r2, [r2, #0]
200032f0:	3240      	adds	r2, #64	; 0x40
200032f2:	701a      	strb	r2, [r3, #0]
	}
	ascii_write_cmd(0x80 | address);
200032f4:	230f      	movs	r3, #15
200032f6:	18fb      	adds	r3, r7, r3
200032f8:	781b      	ldrb	r3, [r3, #0]
200032fa:	2280      	movs	r2, #128	; 0x80
200032fc:	4252      	negs	r2, r2
200032fe:	4313      	orrs	r3, r2
20003300:	b2db      	uxtb	r3, r3
20003302:	0018      	movs	r0, r3
20003304:	f7ff ff0e 	bl	20003124 <ascii_write_cmd>
}
20003308:	46c0      	nop			; (mov r8, r8)
2000330a:	46bd      	mov	sp, r7
2000330c:	b004      	add	sp, #16
2000330e:	bd80      	pop	{r7, pc}

20003310 <ascii_init>:

void ascii_init(void){
20003310:	b580      	push	{r7, lr}
20003312:	af00      	add	r7, sp, #0
	//initiera displayen:
		while((ascii_read_status() & 0x80) == 0x80){} //VÃ¤nta tills displayed Ã¤r redo
20003314:	46c0      	nop			; (mov r8, r8)
20003316:	f7ff ff2f 	bl	20003178 <ascii_read_status>
2000331a:	0003      	movs	r3, r0
2000331c:	001a      	movs	r2, r3
2000331e:	2380      	movs	r3, #128	; 0x80
20003320:	4013      	ands	r3, r2
20003322:	2b80      	cmp	r3, #128	; 0x80
20003324:	d0f7      	beq.n	20003316 <ascii_init+0x6>
		delay_micro(20); //latenstid 
20003326:	2014      	movs	r0, #20
20003328:	f7fe ff76 	bl	20002218 <delay_micro>
		ascii_write_cmd(0x38); //Function set (39us), 000011NFXX, N = antal rader = 2, F = -->0=5x8<--, 1=5x11
2000332c:	2038      	movs	r0, #56	; 0x38
2000332e:	f7ff fef9 	bl	20003124 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20003332:	2064      	movs	r0, #100	; 0x64
20003334:	f7fe ff70 	bl	20002218 <delay_micro>
		
	// clear display
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20003338:	46c0      	nop			; (mov r8, r8)
2000333a:	f7ff ff1d 	bl	20003178 <ascii_read_status>
2000333e:	0003      	movs	r3, r0
20003340:	001a      	movs	r2, r3
20003342:	2380      	movs	r3, #128	; 0x80
20003344:	4013      	ands	r3, r2
20003346:	2b80      	cmp	r3, #128	; 0x80
20003348:	d0f7      	beq.n	2000333a <ascii_init+0x2a>
		delay_micro(20); //latenstid
2000334a:	2014      	movs	r0, #20
2000334c:	f7fe ff64 	bl	20002218 <delay_micro>
		ascii_write_cmd(0x01); 
20003350:	2001      	movs	r0, #1
20003352:	f7ff fee7 	bl	20003124 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20003356:	2064      	movs	r0, #100	; 0x64
20003358:	f7fe ff5e 	bl	20002218 <delay_micro>

	//display control:
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
2000335c:	46c0      	nop			; (mov r8, r8)
2000335e:	f7ff ff0b 	bl	20003178 <ascii_read_status>
20003362:	0003      	movs	r3, r0
20003364:	001a      	movs	r2, r3
20003366:	2380      	movs	r3, #128	; 0x80
20003368:	4013      	ands	r3, r2
2000336a:	2b80      	cmp	r3, #128	; 0x80
2000336c:	d0f7      	beq.n	2000335e <ascii_init+0x4e>
		delay_micro(20); //latenstid
2000336e:	2014      	movs	r0, #20
20003370:	f7fe ff52 	bl	20002218 <delay_micro>
		ascii_write_cmd(0x0C); //000001 + XXX. X:ena = 0:av / 1:pÃƒÂ¥ -  SkÃƒÂ¤rm/MarkÃƒÂ¶r/BlinkaMarkÃƒÂ¶ren
20003374:	200c      	movs	r0, #12
20003376:	f7ff fed5 	bl	20003124 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
2000337a:	2064      	movs	r0, #100	; 0x64
2000337c:	f7fe ff4c 	bl	20002218 <delay_micro>
		
	// entry mode set
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20003380:	46c0      	nop			; (mov r8, r8)
20003382:	f7ff fef9 	bl	20003178 <ascii_read_status>
20003386:	0003      	movs	r3, r0
20003388:	001a      	movs	r2, r3
2000338a:	2380      	movs	r3, #128	; 0x80
2000338c:	4013      	ands	r3, r2
2000338e:	2b80      	cmp	r3, #128	; 0x80
20003390:	d0f7      	beq.n	20003382 <ascii_init+0x72>
		delay_micro(20); //latenstid
20003392:	2014      	movs	r0, #20
20003394:	f7fe ff40 	bl	20002218 <delay_micro>
		ascii_write_cmd(0x06); //00000001 + XY. X=0: markÃƒÂ¶ren vÃƒÂ¤nst. || X=1: marÃƒÂ¶kren hÃƒÂ¶g. - Y=0: skift av || Y=1: skift pÃƒÂ¥
20003398:	2006      	movs	r0, #6
2000339a:	f7ff fec3 	bl	20003124 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
2000339e:	2064      	movs	r0, #100	; 0x64
200033a0:	f7fe ff3a 	bl	20002218 <delay_micro>
		
		
}
200033a4:	46c0      	nop			; (mov r8, r8)
200033a6:	46bd      	mov	sp, r7
200033a8:	bd80      	pop	{r7, pc}

200033aa <init_application>:

void init_application(void){
200033aa:	b580      	push	{r7, lr}
200033ac:	af00      	add	r7, sp, #0
	#ifdef USBDM
		*((unsigned long *) 0x40023830) = 0x18; //startar klockor pÃ¥ port D och E
		//__asm volatile ("LDR R0, =0x08000209\n BLX R0 \n"); //initiera PLL
	#endif
	//"initierar Port E med anvÃƒÂ¤ndning med LCD-modulen, dvs. sÃƒÂ¥vÃƒÂ¤l port E0-7 som E8-15 sÃƒÂ¤tts till utgÃƒÂ¥ngar
	* portModer = 0x55555555;
200033ae:	4b03      	ldr	r3, [pc, #12]	; (200033bc <init_application+0x12>)
200033b0:	4a03      	ldr	r2, [pc, #12]	; (200033c0 <init_application+0x16>)
200033b2:	601a      	str	r2, [r3, #0]
}
200033b4:	46c0      	nop			; (mov r8, r8)
200033b6:	46bd      	mov	sp, r7
200033b8:	bd80      	pop	{r7, pc}
200033ba:	46c0      	nop			; (mov r8, r8)
200033bc:	40021000 	andmi	r1, r2, r0
200033c0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200033c4 <set_up_ascii>:

void set_up_ascii( void ) {
200033c4:	b580      	push	{r7, lr}
200033c6:	af00      	add	r7, sp, #0
	init_application();
200033c8:	f7ff ffef 	bl	200033aa <init_application>
	ascii_init();
200033cc:	f7ff ffa0 	bl	20003310 <ascii_init>
}
200033d0:	46c0      	nop			; (mov r8, r8)
200033d2:	46bd      	mov	sp, r7
200033d4:	bd80      	pop	{r7, pc}

200033d6 <clear_ascii>:

void clear_ascii( void ) {
200033d6:	b590      	push	{r4, r7, lr}
200033d8:	b089      	sub	sp, #36	; 0x24
200033da:	af00      	add	r7, sp, #0
	char *s;
	char clear[] = "                    ";
200033dc:	1d3b      	adds	r3, r7, #4
200033de:	4a17      	ldr	r2, [pc, #92]	; (2000343c <clear_ascii+0x66>)
200033e0:	ca13      	ldmia	r2!, {r0, r1, r4}
200033e2:	c313      	stmia	r3!, {r0, r1, r4}
200033e4:	ca03      	ldmia	r2!, {r0, r1}
200033e6:	c303      	stmia	r3!, {r0, r1}
200033e8:	7812      	ldrb	r2, [r2, #0]
200033ea:	701a      	strb	r2, [r3, #0]
	
	s = clear;
200033ec:	1d3b      	adds	r3, r7, #4
200033ee:	61fb      	str	r3, [r7, #28]
	ascii_goToXY(1,1);
200033f0:	2101      	movs	r1, #1
200033f2:	2001      	movs	r0, #1
200033f4:	f7ff ff64 	bl	200032c0 <ascii_goToXY>
	while(*s){
200033f8:	e006      	b.n	20003408 <clear_ascii+0x32>
		ascii_write_char(*s++);
200033fa:	69fb      	ldr	r3, [r7, #28]
200033fc:	1c5a      	adds	r2, r3, #1
200033fe:	61fa      	str	r2, [r7, #28]
20003400:	781b      	ldrb	r3, [r3, #0]
20003402:	0018      	movs	r0, r3
20003404:	f7ff ff3e 	bl	20003284 <ascii_write_char>
	while(*s){
20003408:	69fb      	ldr	r3, [r7, #28]
2000340a:	781b      	ldrb	r3, [r3, #0]
2000340c:	2b00      	cmp	r3, #0
2000340e:	d1f4      	bne.n	200033fa <clear_ascii+0x24>
	}
	s = clear;
20003410:	1d3b      	adds	r3, r7, #4
20003412:	61fb      	str	r3, [r7, #28]
	ascii_goToXY(1,2);
20003414:	2102      	movs	r1, #2
20003416:	2001      	movs	r0, #1
20003418:	f7ff ff52 	bl	200032c0 <ascii_goToXY>
	while(*s){
2000341c:	e006      	b.n	2000342c <clear_ascii+0x56>
		ascii_write_char(*s++);
2000341e:	69fb      	ldr	r3, [r7, #28]
20003420:	1c5a      	adds	r2, r3, #1
20003422:	61fa      	str	r2, [r7, #28]
20003424:	781b      	ldrb	r3, [r3, #0]
20003426:	0018      	movs	r0, r3
20003428:	f7ff ff2c 	bl	20003284 <ascii_write_char>
	while(*s){
2000342c:	69fb      	ldr	r3, [r7, #28]
2000342e:	781b      	ldrb	r3, [r3, #0]
20003430:	2b00      	cmp	r3, #0
20003432:	d1f4      	bne.n	2000341e <clear_ascii+0x48>
	}
}
20003434:	46c0      	nop			; (mov r8, r8)
20003436:	46bd      	mov	sp, r7
20003438:	b009      	add	sp, #36	; 0x24
2000343a:	bd90      	pop	{r4, r7, pc}
2000343c:	2000a268 	andcs	sl, r0, r8, ror #4

20003440 <ascii_write>:

void ascii_write(char *row1, char *row2) {
20003440:	b580      	push	{r7, lr}
20003442:	b082      	sub	sp, #8
20003444:	af00      	add	r7, sp, #0
20003446:	6078      	str	r0, [r7, #4]
20003448:	6039      	str	r1, [r7, #0]
	clear_ascii();
2000344a:	f7ff ffc4 	bl	200033d6 <clear_ascii>
	
	ascii_goToXY(1,1);
2000344e:	2101      	movs	r1, #1
20003450:	2001      	movs	r0, #1
20003452:	f7ff ff35 	bl	200032c0 <ascii_goToXY>
	while(*row1){
20003456:	e006      	b.n	20003466 <ascii_write+0x26>
		ascii_write_char(*row1++);
20003458:	687b      	ldr	r3, [r7, #4]
2000345a:	1c5a      	adds	r2, r3, #1
2000345c:	607a      	str	r2, [r7, #4]
2000345e:	781b      	ldrb	r3, [r3, #0]
20003460:	0018      	movs	r0, r3
20003462:	f7ff ff0f 	bl	20003284 <ascii_write_char>
	while(*row1){
20003466:	687b      	ldr	r3, [r7, #4]
20003468:	781b      	ldrb	r3, [r3, #0]
2000346a:	2b00      	cmp	r3, #0
2000346c:	d1f4      	bne.n	20003458 <ascii_write+0x18>
	}	
	ascii_goToXY(1,2);
2000346e:	2102      	movs	r1, #2
20003470:	2001      	movs	r0, #1
20003472:	f7ff ff25 	bl	200032c0 <ascii_goToXY>
	while(*row2){
20003476:	e006      	b.n	20003486 <ascii_write+0x46>
		ascii_write_char(*row2++);
20003478:	683b      	ldr	r3, [r7, #0]
2000347a:	1c5a      	adds	r2, r3, #1
2000347c:	603a      	str	r2, [r7, #0]
2000347e:	781b      	ldrb	r3, [r3, #0]
20003480:	0018      	movs	r0, r3
20003482:	f7ff feff 	bl	20003284 <ascii_write_char>
	while(*row2){
20003486:	683b      	ldr	r3, [r7, #0]
20003488:	781b      	ldrb	r3, [r3, #0]
2000348a:	2b00      	cmp	r3, #0
2000348c:	d1f4      	bne.n	20003478 <ascii_write+0x38>
	}
	
	ascii_goToXY(21,1);
2000348e:	2101      	movs	r1, #1
20003490:	2015      	movs	r0, #21
20003492:	f7ff ff15 	bl	200032c0 <ascii_goToXY>
}
20003496:	46c0      	nop			; (mov r8, r8)
20003498:	46bd      	mov	sp, r7
2000349a:	b002      	add	sp, #8
2000349c:	bd80      	pop	{r7, pc}

2000349e <ascii_write_part>:

void ascii_write_part(char *row1, char *row2, int limit1, int limit2) {
2000349e:	b580      	push	{r7, lr}
200034a0:	b086      	sub	sp, #24
200034a2:	af00      	add	r7, sp, #0
200034a4:	60f8      	str	r0, [r7, #12]
200034a6:	60b9      	str	r1, [r7, #8]
200034a8:	607a      	str	r2, [r7, #4]
200034aa:	603b      	str	r3, [r7, #0]
	clear_ascii();
200034ac:	f7ff ff93 	bl	200033d6 <clear_ascii>
	
	ascii_goToXY(1,1);
200034b0:	2101      	movs	r1, #1
200034b2:	2001      	movs	r0, #1
200034b4:	f7ff ff04 	bl	200032c0 <ascii_goToXY>
	int i = 0;
200034b8:	2300      	movs	r3, #0
200034ba:	617b      	str	r3, [r7, #20]
	if(limit1 > 0) {
200034bc:	687b      	ldr	r3, [r7, #4]
200034be:	2b00      	cmp	r3, #0
200034c0:	dd11      	ble.n	200034e6 <ascii_write_part+0x48>
		while(*row1 && (i++ < limit1)){
200034c2:	e006      	b.n	200034d2 <ascii_write_part+0x34>
			ascii_write_char(*row1++);
200034c4:	68fb      	ldr	r3, [r7, #12]
200034c6:	1c5a      	adds	r2, r3, #1
200034c8:	60fa      	str	r2, [r7, #12]
200034ca:	781b      	ldrb	r3, [r3, #0]
200034cc:	0018      	movs	r0, r3
200034ce:	f7ff fed9 	bl	20003284 <ascii_write_char>
		while(*row1 && (i++ < limit1)){
200034d2:	68fb      	ldr	r3, [r7, #12]
200034d4:	781b      	ldrb	r3, [r3, #0]
200034d6:	2b00      	cmp	r3, #0
200034d8:	d005      	beq.n	200034e6 <ascii_write_part+0x48>
200034da:	697b      	ldr	r3, [r7, #20]
200034dc:	1c5a      	adds	r2, r3, #1
200034de:	617a      	str	r2, [r7, #20]
200034e0:	687a      	ldr	r2, [r7, #4]
200034e2:	4293      	cmp	r3, r2
200034e4:	dbee      	blt.n	200034c4 <ascii_write_part+0x26>
		}			
	}

	ascii_goToXY(1,2);
200034e6:	2102      	movs	r1, #2
200034e8:	2001      	movs	r0, #1
200034ea:	f7ff fee9 	bl	200032c0 <ascii_goToXY>
	i = 0;
200034ee:	2300      	movs	r3, #0
200034f0:	617b      	str	r3, [r7, #20]
	if(limit2 > 0) {
200034f2:	683b      	ldr	r3, [r7, #0]
200034f4:	2b00      	cmp	r3, #0
200034f6:	dd11      	ble.n	2000351c <ascii_write_part+0x7e>
		while(*row2 && (i++ < limit2)){
200034f8:	e006      	b.n	20003508 <ascii_write_part+0x6a>
			ascii_write_char(*row2++);
200034fa:	68bb      	ldr	r3, [r7, #8]
200034fc:	1c5a      	adds	r2, r3, #1
200034fe:	60ba      	str	r2, [r7, #8]
20003500:	781b      	ldrb	r3, [r3, #0]
20003502:	0018      	movs	r0, r3
20003504:	f7ff febe 	bl	20003284 <ascii_write_char>
		while(*row2 && (i++ < limit2)){
20003508:	68bb      	ldr	r3, [r7, #8]
2000350a:	781b      	ldrb	r3, [r3, #0]
2000350c:	2b00      	cmp	r3, #0
2000350e:	d005      	beq.n	2000351c <ascii_write_part+0x7e>
20003510:	697b      	ldr	r3, [r7, #20]
20003512:	1c5a      	adds	r2, r3, #1
20003514:	617a      	str	r2, [r7, #20]
20003516:	683a      	ldr	r2, [r7, #0]
20003518:	4293      	cmp	r3, r2
2000351a:	dbee      	blt.n	200034fa <ascii_write_part+0x5c>
		}
	}
	
	ascii_goToXY(21,1);
2000351c:	2101      	movs	r1, #1
2000351e:	2015      	movs	r0, #21
20003520:	f7ff fece 	bl	200032c0 <ascii_goToXY>
}
20003524:	46c0      	nop			; (mov r8, r8)
20003526:	46bd      	mov	sp, r7
20003528:	b006      	add	sp, #24
2000352a:	bd80      	pop	{r7, pc}

2000352c <ascii_test>:



void ascii_test(void) {
2000352c:	b590      	push	{r4, r7, lr}
2000352e:	b08b      	sub	sp, #44	; 0x2c
20003530:	af00      	add	r7, sp, #0
	char *s;
	char test1[] = "Alfanumerisk";
20003532:	2314      	movs	r3, #20
20003534:	18fb      	adds	r3, r7, r3
20003536:	4a1c      	ldr	r2, [pc, #112]	; (200035a8 <ascii_test+0x7c>)
20003538:	ca13      	ldmia	r2!, {r0, r1, r4}
2000353a:	c313      	stmia	r3!, {r0, r1, r4}
2000353c:	7812      	ldrb	r2, [r2, #0]
2000353e:	701a      	strb	r2, [r3, #0]
	char test2[] = "hardåäöare suger";
20003540:	003b      	movs	r3, r7
20003542:	4a1a      	ldr	r2, [pc, #104]	; (200035ac <ascii_test+0x80>)
20003544:	ca13      	ldmia	r2!, {r0, r1, r4}
20003546:	c313      	stmia	r3!, {r0, r1, r4}
20003548:	ca03      	ldmia	r2!, {r0, r1}
2000354a:	c303      	stmia	r3!, {r0, r1}
	
	init_application();
2000354c:	f7ff ff2d 	bl	200033aa <init_application>
	ascii_init();
20003550:	f7ff fede 	bl	20003310 <ascii_init>
	ascii_goToXY(1,1);
20003554:	2101      	movs	r1, #1
20003556:	2001      	movs	r0, #1
20003558:	f7ff feb2 	bl	200032c0 <ascii_goToXY>
	s = test1;
2000355c:	2314      	movs	r3, #20
2000355e:	18fb      	adds	r3, r7, r3
20003560:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
20003562:	e006      	b.n	20003572 <ascii_test+0x46>
		ascii_write_char(*s++);
20003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003566:	1c5a      	adds	r2, r3, #1
20003568:	627a      	str	r2, [r7, #36]	; 0x24
2000356a:	781b      	ldrb	r3, [r3, #0]
2000356c:	0018      	movs	r0, r3
2000356e:	f7ff fe89 	bl	20003284 <ascii_write_char>
	while(*s){
20003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003574:	781b      	ldrb	r3, [r3, #0]
20003576:	2b00      	cmp	r3, #0
20003578:	d1f4      	bne.n	20003564 <ascii_test+0x38>
	}
	ascii_goToXY(1,2);
2000357a:	2102      	movs	r1, #2
2000357c:	2001      	movs	r0, #1
2000357e:	f7ff fe9f 	bl	200032c0 <ascii_goToXY>
	s = test2;
20003582:	003b      	movs	r3, r7
20003584:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
20003586:	e006      	b.n	20003596 <ascii_test+0x6a>
		ascii_write_char(*s++);
20003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000358a:	1c5a      	adds	r2, r3, #1
2000358c:	627a      	str	r2, [r7, #36]	; 0x24
2000358e:	781b      	ldrb	r3, [r3, #0]
20003590:	0018      	movs	r0, r3
20003592:	f7ff fe77 	bl	20003284 <ascii_write_char>
	while(*s){
20003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003598:	781b      	ldrb	r3, [r3, #0]
2000359a:	2b00      	cmp	r3, #0
2000359c:	d1f4      	bne.n	20003588 <ascii_test+0x5c>
	}
	return 0;
2000359e:	46c0      	nop			; (mov r8, r8)
200035a0:	46bd      	mov	sp, r7
200035a2:	b00b      	add	sp, #44	; 0x2c
200035a4:	bd90      	pop	{r4, r7, pc}
200035a6:	46c0      	nop			; (mov r8, r8)
200035a8:	2000a280 	andcs	sl, r0, r0, lsl #5
200035ac:	2000a290 	mulcs	r0, r0, r2

200035b0 <display>:
#include "slow_text.h"
#include "ascii_display.h"

void display(SlowText *this, int length_of_row1) {
200035b0:	b580      	push	{r7, lr}
200035b2:	b084      	sub	sp, #16
200035b4:	af00      	add	r7, sp, #0
200035b6:	6078      	str	r0, [r7, #4]
200035b8:	6039      	str	r1, [r7, #0]
	int limit1 = this->counter / this->speed;
200035ba:	687b      	ldr	r3, [r7, #4]
200035bc:	689a      	ldr	r2, [r3, #8]
200035be:	687b      	ldr	r3, [r7, #4]
200035c0:	68db      	ldr	r3, [r3, #12]
200035c2:	0019      	movs	r1, r3
200035c4:	0010      	movs	r0, r2
200035c6:	f000 f999 	bl	200038fc <__divsi3>
200035ca:	0003      	movs	r3, r0
200035cc:	60fb      	str	r3, [r7, #12]
	int limit2 = this->counter / this->speed - length_of_row1;
200035ce:	687b      	ldr	r3, [r7, #4]
200035d0:	689a      	ldr	r2, [r3, #8]
200035d2:	687b      	ldr	r3, [r7, #4]
200035d4:	68db      	ldr	r3, [r3, #12]
200035d6:	0019      	movs	r1, r3
200035d8:	0010      	movs	r0, r2
200035da:	f000 f98f 	bl	200038fc <__divsi3>
200035de:	0003      	movs	r3, r0
200035e0:	001a      	movs	r2, r3
200035e2:	683b      	ldr	r3, [r7, #0]
200035e4:	1ad3      	subs	r3, r2, r3
200035e6:	60bb      	str	r3, [r7, #8]
	ascii_write_part(this->row1, this->row2, limit1, limit2);
200035e8:	687b      	ldr	r3, [r7, #4]
200035ea:	6818      	ldr	r0, [r3, #0]
200035ec:	687b      	ldr	r3, [r7, #4]
200035ee:	6859      	ldr	r1, [r3, #4]
200035f0:	68bb      	ldr	r3, [r7, #8]
200035f2:	68fa      	ldr	r2, [r7, #12]
200035f4:	f7ff ff53 	bl	2000349e <ascii_write_part>
	
	this->counter++;
200035f8:	687b      	ldr	r3, [r7, #4]
200035fa:	689b      	ldr	r3, [r3, #8]
200035fc:	1c5a      	adds	r2, r3, #1
200035fe:	687b      	ldr	r3, [r7, #4]
20003600:	609a      	str	r2, [r3, #8]
}
20003602:	46c0      	nop			; (mov r8, r8)
20003604:	46bd      	mov	sp, r7
20003606:	b004      	add	sp, #16
20003608:	bd80      	pop	{r7, pc}

2000360a <init_slow_text>:

void init_slow_text(SlowText *obj, char *row1, char *row2, int speed) {
2000360a:	b580      	push	{r7, lr}
2000360c:	b084      	sub	sp, #16
2000360e:	af00      	add	r7, sp, #0
20003610:	60f8      	str	r0, [r7, #12]
20003612:	60b9      	str	r1, [r7, #8]
20003614:	607a      	str	r2, [r7, #4]
20003616:	603b      	str	r3, [r7, #0]
	obj->row1 = row1;
20003618:	68fb      	ldr	r3, [r7, #12]
2000361a:	68ba      	ldr	r2, [r7, #8]
2000361c:	601a      	str	r2, [r3, #0]
	obj->row2 = row2;
2000361e:	68fb      	ldr	r3, [r7, #12]
20003620:	687a      	ldr	r2, [r7, #4]
20003622:	605a      	str	r2, [r3, #4]
	obj->speed = speed;
20003624:	68fb      	ldr	r3, [r7, #12]
20003626:	683a      	ldr	r2, [r7, #0]
20003628:	60da      	str	r2, [r3, #12]
	obj->counter = 0;
2000362a:	68fb      	ldr	r3, [r7, #12]
2000362c:	2200      	movs	r2, #0
2000362e:	609a      	str	r2, [r3, #8]
	obj->display = display;
20003630:	68fb      	ldr	r3, [r7, #12]
20003632:	4a03      	ldr	r2, [pc, #12]	; (20003640 <init_slow_text+0x36>)
20003634:	611a      	str	r2, [r3, #16]
20003636:	46c0      	nop			; (mov r8, r8)
20003638:	46bd      	mov	sp, r7
2000363a:	b004      	add	sp, #16
2000363c:	bd80      	pop	{r7, pc}
2000363e:	46c0      	nop			; (mov r8, r8)
20003640:	200035b1 			; <UNDEFINED> instruction: 0x200035b1

20003644 <initSprites>:


GameObject indoorsObj;
Image indoorsImage;
Image indoorsImages[1];
static void initSprites( void ) {	
20003644:	b580      	push	{r7, lr}
20003646:	b084      	sub	sp, #16
20003648:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempIndoorsLight;
2000364a:	4b12      	ldr	r3, [pc, #72]	; (20003694 <initSprites+0x50>)
2000364c:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer11, indoors_light_bits, indoors_black_width, indoors_black_height);
2000364e:	4912      	ldr	r1, [pc, #72]	; (20003698 <initSprites+0x54>)
20003650:	68f8      	ldr	r0, [r7, #12]
20003652:	2340      	movs	r3, #64	; 0x40
20003654:	2280      	movs	r2, #128	; 0x80
20003656:	f7ff fcd1 	bl	20002ffc <load_sprite>
	indoorsLight = pointer11;
2000365a:	4b10      	ldr	r3, [pc, #64]	; (2000369c <initSprites+0x58>)
2000365c:	68fa      	ldr	r2, [r7, #12]
2000365e:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempIndoorsGray;
20003660:	4b0f      	ldr	r3, [pc, #60]	; (200036a0 <initSprites+0x5c>)
20003662:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer12, indoors_gray_bits, indoors_black_width, indoors_black_height);
20003664:	490f      	ldr	r1, [pc, #60]	; (200036a4 <initSprites+0x60>)
20003666:	68b8      	ldr	r0, [r7, #8]
20003668:	2340      	movs	r3, #64	; 0x40
2000366a:	2280      	movs	r2, #128	; 0x80
2000366c:	f7ff fcc6 	bl	20002ffc <load_sprite>
	indoorsGray = pointer12;
20003670:	4b0d      	ldr	r3, [pc, #52]	; (200036a8 <initSprites+0x64>)
20003672:	68ba      	ldr	r2, [r7, #8]
20003674:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempIndoorsBlack;
20003676:	4b0d      	ldr	r3, [pc, #52]	; (200036ac <initSprites+0x68>)
20003678:	607b      	str	r3, [r7, #4]
	load_sprite(pointer13, indoors_black_bits, indoors_black_width, indoors_black_height);
2000367a:	490d      	ldr	r1, [pc, #52]	; (200036b0 <initSprites+0x6c>)
2000367c:	6878      	ldr	r0, [r7, #4]
2000367e:	2340      	movs	r3, #64	; 0x40
20003680:	2280      	movs	r2, #128	; 0x80
20003682:	f7ff fcbb 	bl	20002ffc <load_sprite>
	indoorsBlack = pointer13;	
20003686:	4b0b      	ldr	r3, [pc, #44]	; (200036b4 <initSprites+0x70>)
20003688:	687a      	ldr	r2, [r7, #4]
2000368a:	601a      	str	r2, [r3, #0]
	
}
2000368c:	46c0      	nop			; (mov r8, r8)
2000368e:	46bd      	mov	sp, r7
20003690:	b004      	add	sp, #16
20003692:	bd80      	pop	{r7, pc}
20003694:	20005fd0 	ldrdcs	r5, [r0], -r0
20003698:	20009050 	andcs	r9, r0, r0, asr r0
2000369c:	2000602c 	andcs	r6, r0, ip, lsr #32
200036a0:	20005fc4 	andcs	r5, r0, r4, asr #31
200036a4:	20008c50 	andcs	r8, r0, r0, asr ip
200036a8:	20005fe8 	andcs	r5, r0, r8, ror #31
200036ac:	20005fdc 	ldrdcs	r5, [r0], -ip
200036b0:	20008850 	andcs	r8, r0, r0, asr r8
200036b4:	2000601c 	andcs	r6, r0, ip, lsl r0

200036b8 <init_indoors>:
	
void init_indoors( GameObject *indoorsObj ) {
200036b8:	b590      	push	{r4, r7, lr}
200036ba:	b083      	sub	sp, #12
200036bc:	af00      	add	r7, sp, #0
200036be:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
200036c0:	4b14      	ldr	r3, [pc, #80]	; (20003714 <init_indoors+0x5c>)
200036c2:	681b      	ldr	r3, [r3, #0]
200036c4:	2b00      	cmp	r3, #0
200036c6:	d011      	beq.n	200036ec <init_indoors+0x34>
		initSprites();
200036c8:	f7ff ffbc 	bl	20003644 <initSprites>
		firstTime = 0;			
200036cc:	4b11      	ldr	r3, [pc, #68]	; (20003714 <init_indoors+0x5c>)
200036ce:	2200      	movs	r2, #0
200036d0:	601a      	str	r2, [r3, #0]

		indoorsImages[0] = indoorsImage;
200036d2:	4b11      	ldr	r3, [pc, #68]	; (20003718 <init_indoors+0x60>)
200036d4:	4a11      	ldr	r2, [pc, #68]	; (2000371c <init_indoors+0x64>)
200036d6:	ca13      	ldmia	r2!, {r0, r1, r4}
200036d8:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&indoorsImages[0], indoorsBlack, indoorsGray, indoorsLight);
200036da:	4b11      	ldr	r3, [pc, #68]	; (20003720 <init_indoors+0x68>)
200036dc:	6819      	ldr	r1, [r3, #0]
200036de:	4b11      	ldr	r3, [pc, #68]	; (20003724 <init_indoors+0x6c>)
200036e0:	681a      	ldr	r2, [r3, #0]
200036e2:	4b11      	ldr	r3, [pc, #68]	; (20003728 <init_indoors+0x70>)
200036e4:	681b      	ldr	r3, [r3, #0]
200036e6:	480c      	ldr	r0, [pc, #48]	; (20003718 <init_indoors+0x60>)
200036e8:	f7ff fc74 	bl	20002fd4 <load_image>
	}
	
	indoorsObj->images = indoorsImages;
200036ec:	687b      	ldr	r3, [r7, #4]
200036ee:	4a0a      	ldr	r2, [pc, #40]	; (20003718 <init_indoors+0x60>)
200036f0:	601a      	str	r2, [r3, #0]

	indoorsObj->current_frame = 0;
200036f2:	687b      	ldr	r3, [r7, #4]
200036f4:	2200      	movs	r2, #0
200036f6:	615a      	str	r2, [r3, #20]
	indoorsObj->n_frames = 1;
200036f8:	687b      	ldr	r3, [r7, #4]
200036fa:	2201      	movs	r2, #1
200036fc:	619a      	str	r2, [r3, #24]
	indoorsObj->animation_speed = 1;
200036fe:	687b      	ldr	r3, [r7, #4]
20003700:	2201      	movs	r2, #1
20003702:	61da      	str	r2, [r3, #28]
	indoorsObj->animation_counter = 0;
20003704:	687b      	ldr	r3, [r7, #4]
20003706:	2200      	movs	r2, #0
20003708:	621a      	str	r2, [r3, #32]
}
2000370a:	46c0      	nop			; (mov r8, r8)
2000370c:	46bd      	mov	sp, r7
2000370e:	b003      	add	sp, #12
20003710:	bd90      	pop	{r4, r7, pc}
20003712:	46c0      	nop			; (mov r8, r8)
20003714:	20009450 	andcs	r9, r0, r0, asr r4
20003718:	20006010 	andcs	r6, r0, r0, lsl r0
2000371c:	20006020 	andcs	r6, r0, r0, lsr #32
20003720:	2000601c 	andcs	r6, r0, ip, lsl r0
20003724:	20005fe8 	andcs	r5, r0, r8, ror #31
20003728:	2000602c 	andcs	r6, r0, ip, lsr #32

2000372c <initSprites>:


GameObject indoors2Obj;
Image indoors2Image;
Image indoors2Images[1];
static void initSprites( void ) {	
2000372c:	b580      	push	{r7, lr}
2000372e:	b084      	sub	sp, #16
20003730:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempIndoors2Light;
20003732:	4b12      	ldr	r3, [pc, #72]	; (2000377c <initSprites+0x50>)
20003734:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer11, indoors2_light_bits, indoors2_black_width, indoors2_black_height);
20003736:	4912      	ldr	r1, [pc, #72]	; (20003780 <initSprites+0x54>)
20003738:	68f8      	ldr	r0, [r7, #12]
2000373a:	2340      	movs	r3, #64	; 0x40
2000373c:	2280      	movs	r2, #128	; 0x80
2000373e:	f7ff fc5d 	bl	20002ffc <load_sprite>
	indoors2Light = pointer11;
20003742:	4b10      	ldr	r3, [pc, #64]	; (20003784 <initSprites+0x58>)
20003744:	68fa      	ldr	r2, [r7, #12]
20003746:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempIndoors2Gray;
20003748:	4b0f      	ldr	r3, [pc, #60]	; (20003788 <initSprites+0x5c>)
2000374a:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer12, indoors2_gray_bits, indoors2_black_width, indoors2_black_height);
2000374c:	490f      	ldr	r1, [pc, #60]	; (2000378c <initSprites+0x60>)
2000374e:	68b8      	ldr	r0, [r7, #8]
20003750:	2340      	movs	r3, #64	; 0x40
20003752:	2280      	movs	r2, #128	; 0x80
20003754:	f7ff fc52 	bl	20002ffc <load_sprite>
	indoors2Gray = pointer12;
20003758:	4b0d      	ldr	r3, [pc, #52]	; (20003790 <initSprites+0x64>)
2000375a:	68ba      	ldr	r2, [r7, #8]
2000375c:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempIndoors2Black;
2000375e:	4b0d      	ldr	r3, [pc, #52]	; (20003794 <initSprites+0x68>)
20003760:	607b      	str	r3, [r7, #4]
	load_sprite(pointer13, indoors2_black_bits, indoors2_black_width, indoors2_black_height);
20003762:	490d      	ldr	r1, [pc, #52]	; (20003798 <initSprites+0x6c>)
20003764:	6878      	ldr	r0, [r7, #4]
20003766:	2340      	movs	r3, #64	; 0x40
20003768:	2280      	movs	r2, #128	; 0x80
2000376a:	f7ff fc47 	bl	20002ffc <load_sprite>
	indoors2Black = pointer13;	
2000376e:	4b0b      	ldr	r3, [pc, #44]	; (2000379c <initSprites+0x70>)
20003770:	687a      	ldr	r2, [r7, #4]
20003772:	601a      	str	r2, [r3, #0]
	
}
20003774:	46c0      	nop			; (mov r8, r8)
20003776:	46bd      	mov	sp, r7
20003778:	b004      	add	sp, #16
2000377a:	bd80      	pop	{r7, pc}
2000377c:	2000608c 	andcs	r6, r0, ip, lsl #1
20003780:	20009c54 	andcs	r9, r0, r4, asr ip
20003784:	2000607c 	andcs	r6, r0, ip, ror r0
20003788:	20006070 	andcs	r6, r0, r0, ror r0
2000378c:	20009854 	andcs	r9, r0, r4, asr r8
20003790:	20006054 	andcs	r6, r0, r4, asr r0
20003794:	20006080 	andcs	r6, r0, r0, lsl #1
20003798:	20009454 	andcs	r9, r0, r4, asr r4
2000379c:	20006098 	mulcs	r0, r8, r0

200037a0 <init_indoors2>:
	
void init_indoors2( GameObject *indoors2Obj ) {
200037a0:	b590      	push	{r4, r7, lr}
200037a2:	b083      	sub	sp, #12
200037a4:	af00      	add	r7, sp, #0
200037a6:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
200037a8:	4b14      	ldr	r3, [pc, #80]	; (200037fc <init_indoors2+0x5c>)
200037aa:	681b      	ldr	r3, [r3, #0]
200037ac:	2b00      	cmp	r3, #0
200037ae:	d011      	beq.n	200037d4 <init_indoors2+0x34>
		initSprites();
200037b0:	f7ff ffbc 	bl	2000372c <initSprites>
		firstTime = 0;			
200037b4:	4b11      	ldr	r3, [pc, #68]	; (200037fc <init_indoors2+0x5c>)
200037b6:	2200      	movs	r2, #0
200037b8:	601a      	str	r2, [r3, #0]

		indoors2Images[0] = indoors2Image;
200037ba:	4b11      	ldr	r3, [pc, #68]	; (20003800 <init_indoors2+0x60>)
200037bc:	4a11      	ldr	r2, [pc, #68]	; (20003804 <init_indoors2+0x64>)
200037be:	ca13      	ldmia	r2!, {r0, r1, r4}
200037c0:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&indoors2Images[0], indoors2Black, indoors2Gray, indoors2Light);
200037c2:	4b11      	ldr	r3, [pc, #68]	; (20003808 <init_indoors2+0x68>)
200037c4:	6819      	ldr	r1, [r3, #0]
200037c6:	4b11      	ldr	r3, [pc, #68]	; (2000380c <init_indoors2+0x6c>)
200037c8:	681a      	ldr	r2, [r3, #0]
200037ca:	4b11      	ldr	r3, [pc, #68]	; (20003810 <init_indoors2+0x70>)
200037cc:	681b      	ldr	r3, [r3, #0]
200037ce:	480c      	ldr	r0, [pc, #48]	; (20003800 <init_indoors2+0x60>)
200037d0:	f7ff fc00 	bl	20002fd4 <load_image>
	}
	
	indoors2Obj->images = indoors2Images;
200037d4:	687b      	ldr	r3, [r7, #4]
200037d6:	4a0a      	ldr	r2, [pc, #40]	; (20003800 <init_indoors2+0x60>)
200037d8:	601a      	str	r2, [r3, #0]

	indoors2Obj->current_frame = 0;
200037da:	687b      	ldr	r3, [r7, #4]
200037dc:	2200      	movs	r2, #0
200037de:	615a      	str	r2, [r3, #20]
	indoors2Obj->n_frames = 1;
200037e0:	687b      	ldr	r3, [r7, #4]
200037e2:	2201      	movs	r2, #1
200037e4:	619a      	str	r2, [r3, #24]
	indoors2Obj->animation_speed = 1;
200037e6:	687b      	ldr	r3, [r7, #4]
200037e8:	2201      	movs	r2, #1
200037ea:	61da      	str	r2, [r3, #28]
	indoors2Obj->animation_counter = 0;
200037ec:	687b      	ldr	r3, [r7, #4]
200037ee:	2200      	movs	r2, #0
200037f0:	621a      	str	r2, [r3, #32]
}
200037f2:	46c0      	nop			; (mov r8, r8)
200037f4:	46bd      	mov	sp, r7
200037f6:	b003      	add	sp, #12
200037f8:	bd90      	pop	{r4, r7, pc}
200037fa:	46c0      	nop			; (mov r8, r8)
200037fc:	2000a054 	andcs	sl, r0, r4, asr r0
20003800:	20006058 	andcs	r6, r0, r8, asr r0
20003804:	20006064 	andcs	r6, r0, r4, rrx
20003808:	20006098 	mulcs	r0, r8, r0
2000380c:	20006054 	andcs	r6, r0, r4, asr r0
20003810:	2000607c 	andcs	r6, r0, ip, ror r0

20003814 <initSprites>:


GameObject trophyObj;
Image trophyImage;
Image trophyImages[1];
static void initSprites( void ) {	
20003814:	b580      	push	{r7, lr}
20003816:	b084      	sub	sp, #16
20003818:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempTrophyLight;
2000381a:	4b12      	ldr	r3, [pc, #72]	; (20003864 <initSprites+0x50>)
2000381c:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer11, trophy_light_bits, trophy_black_width, trophy_black_height);
2000381e:	4912      	ldr	r1, [pc, #72]	; (20003868 <initSprites+0x54>)
20003820:	68f8      	ldr	r0, [r7, #12]
20003822:	2311      	movs	r3, #17
20003824:	220b      	movs	r2, #11
20003826:	f7ff fbe9 	bl	20002ffc <load_sprite>
	trophyLight = pointer11;
2000382a:	4b10      	ldr	r3, [pc, #64]	; (2000386c <initSprites+0x58>)
2000382c:	68fa      	ldr	r2, [r7, #12]
2000382e:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempTrophyGray;
20003830:	4b0f      	ldr	r3, [pc, #60]	; (20003870 <initSprites+0x5c>)
20003832:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer12, trophy_gray_bits, trophy_black_width, trophy_black_height);
20003834:	490f      	ldr	r1, [pc, #60]	; (20003874 <initSprites+0x60>)
20003836:	68b8      	ldr	r0, [r7, #8]
20003838:	2311      	movs	r3, #17
2000383a:	220b      	movs	r2, #11
2000383c:	f7ff fbde 	bl	20002ffc <load_sprite>
	trophyGray = pointer12;
20003840:	4b0d      	ldr	r3, [pc, #52]	; (20003878 <initSprites+0x64>)
20003842:	68ba      	ldr	r2, [r7, #8]
20003844:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempTrophyBlack;
20003846:	4b0d      	ldr	r3, [pc, #52]	; (2000387c <initSprites+0x68>)
20003848:	607b      	str	r3, [r7, #4]
	load_sprite(pointer13, trophy_black_bits, trophy_black_width, trophy_black_height);
2000384a:	490d      	ldr	r1, [pc, #52]	; (20003880 <initSprites+0x6c>)
2000384c:	6878      	ldr	r0, [r7, #4]
2000384e:	2311      	movs	r3, #17
20003850:	220b      	movs	r2, #11
20003852:	f7ff fbd3 	bl	20002ffc <load_sprite>
	trophyBlack = pointer13;	
20003856:	4b0b      	ldr	r3, [pc, #44]	; (20003884 <initSprites+0x70>)
20003858:	687a      	ldr	r2, [r7, #4]
2000385a:	601a      	str	r2, [r3, #0]
	
}
2000385c:	46c0      	nop			; (mov r8, r8)
2000385e:	46bd      	mov	sp, r7
20003860:	b004      	add	sp, #16
20003862:	bd80      	pop	{r7, pc}
20003864:	200060b8 	strhcs	r6, [r0], -r8
20003868:	2000a0a0 	andcs	sl, r0, r0, lsr #1
2000386c:	20006104 	andcs	r6, r0, r4, lsl #2
20003870:	200060f8 	strdcs	r6, [r0], -r8
20003874:	2000a07c 	andcs	sl, r0, ip, ror r0
20003878:	200060e8 	andcs	r6, r0, r8, ror #1
2000387c:	200060ec 	andcs	r6, r0, ip, ror #1
20003880:	2000a058 	andcs	sl, r0, r8, asr r0
20003884:	200060a8 	andcs	r6, r0, r8, lsr #1

20003888 <init_trophy>:
	
void init_trophy( GameObject *trophyObj ) {
20003888:	b590      	push	{r4, r7, lr}
2000388a:	b083      	sub	sp, #12
2000388c:	af00      	add	r7, sp, #0
2000388e:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20003890:	4b14      	ldr	r3, [pc, #80]	; (200038e4 <init_trophy+0x5c>)
20003892:	681b      	ldr	r3, [r3, #0]
20003894:	2b00      	cmp	r3, #0
20003896:	d011      	beq.n	200038bc <init_trophy+0x34>
		initSprites();
20003898:	f7ff ffbc 	bl	20003814 <initSprites>
		firstTime = 0;			
2000389c:	4b11      	ldr	r3, [pc, #68]	; (200038e4 <init_trophy+0x5c>)
2000389e:	2200      	movs	r2, #0
200038a0:	601a      	str	r2, [r3, #0]

		trophyImages[0] = trophyImage;
200038a2:	4b11      	ldr	r3, [pc, #68]	; (200038e8 <init_trophy+0x60>)
200038a4:	4a11      	ldr	r2, [pc, #68]	; (200038ec <init_trophy+0x64>)
200038a6:	ca13      	ldmia	r2!, {r0, r1, r4}
200038a8:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&trophyImages[0], trophyBlack, trophyGray, trophyLight);
200038aa:	4b11      	ldr	r3, [pc, #68]	; (200038f0 <init_trophy+0x68>)
200038ac:	6819      	ldr	r1, [r3, #0]
200038ae:	4b11      	ldr	r3, [pc, #68]	; (200038f4 <init_trophy+0x6c>)
200038b0:	681a      	ldr	r2, [r3, #0]
200038b2:	4b11      	ldr	r3, [pc, #68]	; (200038f8 <init_trophy+0x70>)
200038b4:	681b      	ldr	r3, [r3, #0]
200038b6:	480c      	ldr	r0, [pc, #48]	; (200038e8 <init_trophy+0x60>)
200038b8:	f7ff fb8c 	bl	20002fd4 <load_image>
	}
	
	trophyObj->images = trophyImages;
200038bc:	687b      	ldr	r3, [r7, #4]
200038be:	4a0a      	ldr	r2, [pc, #40]	; (200038e8 <init_trophy+0x60>)
200038c0:	601a      	str	r2, [r3, #0]

	trophyObj->current_frame = 0;
200038c2:	687b      	ldr	r3, [r7, #4]
200038c4:	2200      	movs	r2, #0
200038c6:	615a      	str	r2, [r3, #20]
	trophyObj->n_frames = 1;
200038c8:	687b      	ldr	r3, [r7, #4]
200038ca:	2201      	movs	r2, #1
200038cc:	619a      	str	r2, [r3, #24]
	trophyObj->animation_speed = 1;
200038ce:	687b      	ldr	r3, [r7, #4]
200038d0:	2201      	movs	r2, #1
200038d2:	61da      	str	r2, [r3, #28]
	trophyObj->animation_counter = 0;
200038d4:	687b      	ldr	r3, [r7, #4]
200038d6:	2200      	movs	r2, #0
200038d8:	621a      	str	r2, [r3, #32]
}
200038da:	46c0      	nop			; (mov r8, r8)
200038dc:	46bd      	mov	sp, r7
200038de:	b003      	add	sp, #12
200038e0:	bd90      	pop	{r4, r7, pc}
200038e2:	46c0      	nop			; (mov r8, r8)
200038e4:	2000a0c4 	andcs	sl, r0, r4, asr #1
200038e8:	2000609c 	mulcs	r0, ip, r0
200038ec:	200060ac 	andcs	r6, r0, ip, lsr #1
200038f0:	200060a8 	andcs	r6, r0, r8, lsr #1
200038f4:	200060e8 	andcs	r6, r0, r8, ror #1
200038f8:	20006104 	andcs	r6, r0, r4, lsl #2

200038fc <__divsi3>:
200038fc:	4603      	mov	r3, r0
200038fe:	430b      	orrs	r3, r1
20003900:	d47f      	bmi.n	20003a02 <__divsi3+0x106>
20003902:	2200      	movs	r2, #0
20003904:	0843      	lsrs	r3, r0, #1
20003906:	428b      	cmp	r3, r1
20003908:	d374      	bcc.n	200039f4 <__divsi3+0xf8>
2000390a:	0903      	lsrs	r3, r0, #4
2000390c:	428b      	cmp	r3, r1
2000390e:	d35f      	bcc.n	200039d0 <__divsi3+0xd4>
20003910:	0a03      	lsrs	r3, r0, #8
20003912:	428b      	cmp	r3, r1
20003914:	d344      	bcc.n	200039a0 <__divsi3+0xa4>
20003916:	0b03      	lsrs	r3, r0, #12
20003918:	428b      	cmp	r3, r1
2000391a:	d328      	bcc.n	2000396e <__divsi3+0x72>
2000391c:	0c03      	lsrs	r3, r0, #16
2000391e:	428b      	cmp	r3, r1
20003920:	d30d      	bcc.n	2000393e <__divsi3+0x42>
20003922:	22ff      	movs	r2, #255	; 0xff
20003924:	0209      	lsls	r1, r1, #8
20003926:	ba12      	rev	r2, r2
20003928:	0c03      	lsrs	r3, r0, #16
2000392a:	428b      	cmp	r3, r1
2000392c:	d302      	bcc.n	20003934 <__divsi3+0x38>
2000392e:	1212      	asrs	r2, r2, #8
20003930:	0209      	lsls	r1, r1, #8
20003932:	d065      	beq.n	20003a00 <__divsi3+0x104>
20003934:	0b03      	lsrs	r3, r0, #12
20003936:	428b      	cmp	r3, r1
20003938:	d319      	bcc.n	2000396e <__divsi3+0x72>
2000393a:	e000      	b.n	2000393e <__divsi3+0x42>
2000393c:	0a09      	lsrs	r1, r1, #8
2000393e:	0bc3      	lsrs	r3, r0, #15
20003940:	428b      	cmp	r3, r1
20003942:	d301      	bcc.n	20003948 <__divsi3+0x4c>
20003944:	03cb      	lsls	r3, r1, #15
20003946:	1ac0      	subs	r0, r0, r3
20003948:	4152      	adcs	r2, r2
2000394a:	0b83      	lsrs	r3, r0, #14
2000394c:	428b      	cmp	r3, r1
2000394e:	d301      	bcc.n	20003954 <__divsi3+0x58>
20003950:	038b      	lsls	r3, r1, #14
20003952:	1ac0      	subs	r0, r0, r3
20003954:	4152      	adcs	r2, r2
20003956:	0b43      	lsrs	r3, r0, #13
20003958:	428b      	cmp	r3, r1
2000395a:	d301      	bcc.n	20003960 <__divsi3+0x64>
2000395c:	034b      	lsls	r3, r1, #13
2000395e:	1ac0      	subs	r0, r0, r3
20003960:	4152      	adcs	r2, r2
20003962:	0b03      	lsrs	r3, r0, #12
20003964:	428b      	cmp	r3, r1
20003966:	d301      	bcc.n	2000396c <__divsi3+0x70>
20003968:	030b      	lsls	r3, r1, #12
2000396a:	1ac0      	subs	r0, r0, r3
2000396c:	4152      	adcs	r2, r2
2000396e:	0ac3      	lsrs	r3, r0, #11
20003970:	428b      	cmp	r3, r1
20003972:	d301      	bcc.n	20003978 <__divsi3+0x7c>
20003974:	02cb      	lsls	r3, r1, #11
20003976:	1ac0      	subs	r0, r0, r3
20003978:	4152      	adcs	r2, r2
2000397a:	0a83      	lsrs	r3, r0, #10
2000397c:	428b      	cmp	r3, r1
2000397e:	d301      	bcc.n	20003984 <__divsi3+0x88>
20003980:	028b      	lsls	r3, r1, #10
20003982:	1ac0      	subs	r0, r0, r3
20003984:	4152      	adcs	r2, r2
20003986:	0a43      	lsrs	r3, r0, #9
20003988:	428b      	cmp	r3, r1
2000398a:	d301      	bcc.n	20003990 <__divsi3+0x94>
2000398c:	024b      	lsls	r3, r1, #9
2000398e:	1ac0      	subs	r0, r0, r3
20003990:	4152      	adcs	r2, r2
20003992:	0a03      	lsrs	r3, r0, #8
20003994:	428b      	cmp	r3, r1
20003996:	d301      	bcc.n	2000399c <__divsi3+0xa0>
20003998:	020b      	lsls	r3, r1, #8
2000399a:	1ac0      	subs	r0, r0, r3
2000399c:	4152      	adcs	r2, r2
2000399e:	d2cd      	bcs.n	2000393c <__divsi3+0x40>
200039a0:	09c3      	lsrs	r3, r0, #7
200039a2:	428b      	cmp	r3, r1
200039a4:	d301      	bcc.n	200039aa <__divsi3+0xae>
200039a6:	01cb      	lsls	r3, r1, #7
200039a8:	1ac0      	subs	r0, r0, r3
200039aa:	4152      	adcs	r2, r2
200039ac:	0983      	lsrs	r3, r0, #6
200039ae:	428b      	cmp	r3, r1
200039b0:	d301      	bcc.n	200039b6 <__divsi3+0xba>
200039b2:	018b      	lsls	r3, r1, #6
200039b4:	1ac0      	subs	r0, r0, r3
200039b6:	4152      	adcs	r2, r2
200039b8:	0943      	lsrs	r3, r0, #5
200039ba:	428b      	cmp	r3, r1
200039bc:	d301      	bcc.n	200039c2 <__divsi3+0xc6>
200039be:	014b      	lsls	r3, r1, #5
200039c0:	1ac0      	subs	r0, r0, r3
200039c2:	4152      	adcs	r2, r2
200039c4:	0903      	lsrs	r3, r0, #4
200039c6:	428b      	cmp	r3, r1
200039c8:	d301      	bcc.n	200039ce <__divsi3+0xd2>
200039ca:	010b      	lsls	r3, r1, #4
200039cc:	1ac0      	subs	r0, r0, r3
200039ce:	4152      	adcs	r2, r2
200039d0:	08c3      	lsrs	r3, r0, #3
200039d2:	428b      	cmp	r3, r1
200039d4:	d301      	bcc.n	200039da <__divsi3+0xde>
200039d6:	00cb      	lsls	r3, r1, #3
200039d8:	1ac0      	subs	r0, r0, r3
200039da:	4152      	adcs	r2, r2
200039dc:	0883      	lsrs	r3, r0, #2
200039de:	428b      	cmp	r3, r1
200039e0:	d301      	bcc.n	200039e6 <__divsi3+0xea>
200039e2:	008b      	lsls	r3, r1, #2
200039e4:	1ac0      	subs	r0, r0, r3
200039e6:	4152      	adcs	r2, r2
200039e8:	0843      	lsrs	r3, r0, #1
200039ea:	428b      	cmp	r3, r1
200039ec:	d301      	bcc.n	200039f2 <__divsi3+0xf6>
200039ee:	004b      	lsls	r3, r1, #1
200039f0:	1ac0      	subs	r0, r0, r3
200039f2:	4152      	adcs	r2, r2
200039f4:	1a41      	subs	r1, r0, r1
200039f6:	d200      	bcs.n	200039fa <__divsi3+0xfe>
200039f8:	4601      	mov	r1, r0
200039fa:	4152      	adcs	r2, r2
200039fc:	4610      	mov	r0, r2
200039fe:	4770      	bx	lr
20003a00:	e05d      	b.n	20003abe <__divsi3+0x1c2>
20003a02:	0fca      	lsrs	r2, r1, #31
20003a04:	d000      	beq.n	20003a08 <__divsi3+0x10c>
20003a06:	4249      	negs	r1, r1
20003a08:	1003      	asrs	r3, r0, #32
20003a0a:	d300      	bcc.n	20003a0e <__divsi3+0x112>
20003a0c:	4240      	negs	r0, r0
20003a0e:	4053      	eors	r3, r2
20003a10:	2200      	movs	r2, #0
20003a12:	469c      	mov	ip, r3
20003a14:	0903      	lsrs	r3, r0, #4
20003a16:	428b      	cmp	r3, r1
20003a18:	d32d      	bcc.n	20003a76 <__divsi3+0x17a>
20003a1a:	0a03      	lsrs	r3, r0, #8
20003a1c:	428b      	cmp	r3, r1
20003a1e:	d312      	bcc.n	20003a46 <__divsi3+0x14a>
20003a20:	22fc      	movs	r2, #252	; 0xfc
20003a22:	0189      	lsls	r1, r1, #6
20003a24:	ba12      	rev	r2, r2
20003a26:	0a03      	lsrs	r3, r0, #8
20003a28:	428b      	cmp	r3, r1
20003a2a:	d30c      	bcc.n	20003a46 <__divsi3+0x14a>
20003a2c:	0189      	lsls	r1, r1, #6
20003a2e:	1192      	asrs	r2, r2, #6
20003a30:	428b      	cmp	r3, r1
20003a32:	d308      	bcc.n	20003a46 <__divsi3+0x14a>
20003a34:	0189      	lsls	r1, r1, #6
20003a36:	1192      	asrs	r2, r2, #6
20003a38:	428b      	cmp	r3, r1
20003a3a:	d304      	bcc.n	20003a46 <__divsi3+0x14a>
20003a3c:	0189      	lsls	r1, r1, #6
20003a3e:	d03a      	beq.n	20003ab6 <__divsi3+0x1ba>
20003a40:	1192      	asrs	r2, r2, #6
20003a42:	e000      	b.n	20003a46 <__divsi3+0x14a>
20003a44:	0989      	lsrs	r1, r1, #6
20003a46:	09c3      	lsrs	r3, r0, #7
20003a48:	428b      	cmp	r3, r1
20003a4a:	d301      	bcc.n	20003a50 <__divsi3+0x154>
20003a4c:	01cb      	lsls	r3, r1, #7
20003a4e:	1ac0      	subs	r0, r0, r3
20003a50:	4152      	adcs	r2, r2
20003a52:	0983      	lsrs	r3, r0, #6
20003a54:	428b      	cmp	r3, r1
20003a56:	d301      	bcc.n	20003a5c <__divsi3+0x160>
20003a58:	018b      	lsls	r3, r1, #6
20003a5a:	1ac0      	subs	r0, r0, r3
20003a5c:	4152      	adcs	r2, r2
20003a5e:	0943      	lsrs	r3, r0, #5
20003a60:	428b      	cmp	r3, r1
20003a62:	d301      	bcc.n	20003a68 <__divsi3+0x16c>
20003a64:	014b      	lsls	r3, r1, #5
20003a66:	1ac0      	subs	r0, r0, r3
20003a68:	4152      	adcs	r2, r2
20003a6a:	0903      	lsrs	r3, r0, #4
20003a6c:	428b      	cmp	r3, r1
20003a6e:	d301      	bcc.n	20003a74 <__divsi3+0x178>
20003a70:	010b      	lsls	r3, r1, #4
20003a72:	1ac0      	subs	r0, r0, r3
20003a74:	4152      	adcs	r2, r2
20003a76:	08c3      	lsrs	r3, r0, #3
20003a78:	428b      	cmp	r3, r1
20003a7a:	d301      	bcc.n	20003a80 <__divsi3+0x184>
20003a7c:	00cb      	lsls	r3, r1, #3
20003a7e:	1ac0      	subs	r0, r0, r3
20003a80:	4152      	adcs	r2, r2
20003a82:	0883      	lsrs	r3, r0, #2
20003a84:	428b      	cmp	r3, r1
20003a86:	d301      	bcc.n	20003a8c <__divsi3+0x190>
20003a88:	008b      	lsls	r3, r1, #2
20003a8a:	1ac0      	subs	r0, r0, r3
20003a8c:	4152      	adcs	r2, r2
20003a8e:	d2d9      	bcs.n	20003a44 <__divsi3+0x148>
20003a90:	0843      	lsrs	r3, r0, #1
20003a92:	428b      	cmp	r3, r1
20003a94:	d301      	bcc.n	20003a9a <__divsi3+0x19e>
20003a96:	004b      	lsls	r3, r1, #1
20003a98:	1ac0      	subs	r0, r0, r3
20003a9a:	4152      	adcs	r2, r2
20003a9c:	1a41      	subs	r1, r0, r1
20003a9e:	d200      	bcs.n	20003aa2 <__divsi3+0x1a6>
20003aa0:	4601      	mov	r1, r0
20003aa2:	4663      	mov	r3, ip
20003aa4:	4152      	adcs	r2, r2
20003aa6:	105b      	asrs	r3, r3, #1
20003aa8:	4610      	mov	r0, r2
20003aaa:	d301      	bcc.n	20003ab0 <__divsi3+0x1b4>
20003aac:	4240      	negs	r0, r0
20003aae:	2b00      	cmp	r3, #0
20003ab0:	d500      	bpl.n	20003ab4 <__divsi3+0x1b8>
20003ab2:	4249      	negs	r1, r1
20003ab4:	4770      	bx	lr
20003ab6:	4663      	mov	r3, ip
20003ab8:	105b      	asrs	r3, r3, #1
20003aba:	d300      	bcc.n	20003abe <__divsi3+0x1c2>
20003abc:	4240      	negs	r0, r0
20003abe:	b501      	push	{r0, lr}
20003ac0:	2000      	movs	r0, #0
20003ac2:	f000 f805 	bl	20003ad0 <__aeabi_idiv0>
20003ac6:	bd02      	pop	{r1, pc}

20003ac8 <__aeabi_idivmod>:
20003ac8:	2900      	cmp	r1, #0
20003aca:	d0f8      	beq.n	20003abe <__divsi3+0x1c2>
20003acc:	e716      	b.n	200038fc <__divsi3>
20003ace:	4770      	bx	lr

20003ad0 <__aeabi_idiv0>:
20003ad0:	4770      	bx	lr
20003ad2:	46c0      	nop			; (mov r8, r8)

20003ad4 <counter>:
20003ad4:	00000000 	andeq	r0, r0, r0

20003ad8 <distance_player_fire.4300>:
20003ad8:	00000000 	andeq	r0, r0, r0

20003adc <test.4302>:
20003adc:	00000000 	andeq	r0, r0, r0

20003ae0 <nGameObjects>:
20003ae0:	00000000 	andeq	r0, r0, r0

20003ae4 <lastJumpValue.4092>:
20003ae4:	00000000 	andeq	r0, r0, r0

20003ae8 <ySpeed.4096>:
20003ae8:	00000000 	andeq	r0, r0, r0

20003aec <lastRightValue.4093>:
20003aec:	00000000 	andeq	r0, r0, r0

20003af0 <xSpeed.4095>:
20003af0:	00000000 	andeq	r0, r0, r0

20003af4 <lastLeftValue.4094>:
20003af4:	00000000 	andeq	r0, r0, r0

20003af8 <playerPositionX>:
20003af8:	00000000 	andeq	r0, r0, r0

20003afc <playerPositionY>:
20003afc:	00000000 	andeq	r0, r0, r0

20003b00 <counter.4152>:
20003b00:	00000000 	andeq	r0, r0, r0

20003b04 <monster>:
20003b04:	00000000 	andeq	r0, r0, r0

20003b08 <tempCastleBlack>:
	...

20003b14 <tempPressGray>:
	...

20003b20 <tempTitleGray>:
	...

20003b2c <castleBlack>:
20003b2c:	00000000 	andeq	r0, r0, r0

20003b30 <tempMonster>:
	...

20003b3c <pressLight>:
20003b3c:	00000000 	andeq	r0, r0, r0

20003b40 <tempTitleBlack>:
	...

20003b4c <bg>:
20003b4c:	00000000 	andeq	r0, r0, r0

20003b50 <tempMonsterGray>:
	...

20003b5c <tempTitleLight>:
	...

20003b68 <castleLight>:
20003b68:	00000000 	andeq	r0, r0, r0

20003b6c <tempPressLight>:
	...

20003b78 <tempCastleLight>:
	...

20003b84 <pressGray>:
20003b84:	00000000 	andeq	r0, r0, r0

20003b88 <tempMonsterLight>:
	...

20003b94 <tempPressBlack>:
	...

20003ba0 <titleGray>:
20003ba0:	00000000 	andeq	r0, r0, r0

20003ba4 <tempCastleGray>:
	...

20003bb0 <monsterLight>:
20003bb0:	00000000 	andeq	r0, r0, r0

20003bb4 <titleLight>:
20003bb4:	00000000 	andeq	r0, r0, r0

20003bb8 <castleGray>:
20003bb8:	00000000 	andeq	r0, r0, r0

20003bbc <random_seed>:
20003bbc:	00000000 	andeq	r0, r0, r0

20003bc0 <pressBlack>:
20003bc0:	00000000 	andeq	r0, r0, r0

20003bc4 <monsterGray>:
20003bc4:	00000000 	andeq	r0, r0, r0

20003bc8 <tempBg>:
	...

20003bd4 <titleBlack>:
20003bd4:	00000000 	andeq	r0, r0, r0

20003bd8 <gameObjects>:
	...

20003d68 <fire1Light>:
20003d68:	00000000 	andeq	r0, r0, r0

20003d6c <tempFire3Light>:
	...

20003d78 <fire3Gray>:
20003d78:	00000000 	andeq	r0, r0, r0

20003d7c <tempFire4Gray>:
	...

20003d88 <fire2Image>:
	...

20003d94 <tempFire2Gray>:
	...

20003da0 <tempFireBlack>:
	...

20003dac <fire3Image>:
	...

20003db8 <tempFire4Light>:
	...

20003dc4 <fire1Image>:
	...

20003dd0 <fire4Light>:
20003dd0:	00000000 	andeq	r0, r0, r0

20003dd4 <fireObj>:
	...

20003df8 <fire5Image>:
	...

20003e04 <fireImages>:
	...

20003e40 <tempFire5Gray>:
	...

20003e4c <tempFire3Gray>:
	...

20003e58 <fire4Image>:
	...

20003e64 <fire4Gray>:
20003e64:	00000000 	andeq	r0, r0, r0

20003e68 <tempFire1Light>:
	...

20003e74 <tempFire5Light>:
	...

20003e80 <fire5Gray>:
20003e80:	00000000 	andeq	r0, r0, r0

20003e84 <fire2Light>:
20003e84:	00000000 	andeq	r0, r0, r0

20003e88 <fire5Light>:
20003e88:	00000000 	andeq	r0, r0, r0

20003e8c <tempFire1Gray>:
	...

20003e98 <fireBlack>:
20003e98:	00000000 	andeq	r0, r0, r0

20003e9c <tempFire2Light>:
	...

20003ea8 <fire3Light>:
20003ea8:	00000000 	andeq	r0, r0, r0

20003eac <fire2Gray>:
20003eac:	00000000 	andeq	r0, r0, r0

20003eb0 <fire1Gray>:
20003eb0:	00000000 	andeq	r0, r0, r0

20003eb4 <bird4Light>:
20003eb4:	00000000 	andeq	r0, r0, r0

20003eb8 <bird1Gray>:
20003eb8:	00000000 	andeq	r0, r0, r0

20003ebc <bird6Image>:
	...

20003ec8 <bird5Black>:
20003ec8:	00000000 	andeq	r0, r0, r0

20003ecc <tempBird4Black>:
	...

20003ed8 <bird2Image>:
	...

20003ee4 <birdObj>:
	...

20003f08 <bird1Image>:
	...

20003f14 <bird3Black>:
20003f14:	00000000 	andeq	r0, r0, r0

20003f18 <bird4Gray>:
20003f18:	00000000 	andeq	r0, r0, r0

20003f1c <bird2Black>:
20003f1c:	00000000 	andeq	r0, r0, r0

20003f20 <bird1Black>:
20003f20:	00000000 	andeq	r0, r0, r0

20003f24 <bird4Image>:
	...

20003f30 <tempBirdBlack>:
	...

20003f3c <bird3Gray>:
20003f3c:	00000000 	andeq	r0, r0, r0

20003f40 <tempBirdGray>:
	...

20003f4c <bird5Gray>:
20003f4c:	00000000 	andeq	r0, r0, r0

20003f50 <tempBird5Light>:
	...

20003f5c <tempBird2Gray>:
	...

20003f68 <bird3Light>:
20003f68:	00000000 	andeq	r0, r0, r0

20003f6c <tempBird5Gray>:
	...

20003f78 <tempBird5Black>:
	...

20003f84 <bird5Image>:
	...

20003f90 <bird5Light>:
20003f90:	00000000 	andeq	r0, r0, r0

20003f94 <tempBird3Black>:
	...

20003fa0 <bird2Gray>:
20003fa0:	00000000 	andeq	r0, r0, r0

20003fa4 <tempBirdLight>:
	...

20003fb0 <bird1Light>:
20003fb0:	00000000 	andeq	r0, r0, r0

20003fb4 <tempBird2Light>:
	...

20003fc0 <bird3Image>:
	...

20003fcc <tempBird4Light>:
	...

20003fd8 <tempBird3Light>:
	...

20003fe4 <tempBird3Gray>:
	...

20003ff0 <birdImages>:
	...

20004038 <bird4Black>:
20004038:	00000000 	andeq	r0, r0, r0

2000403c <tempBird2Black>:
	...

20004048 <tempBird4Gray>:
	...

20004054 <bird2Light>:
20004054:	00000000 	andeq	r0, r0, r0

20004058 <witch1Gray>:
20004058:	00000000 	andeq	r0, r0, r0

2000405c <witch2Light>:
2000405c:	00000000 	andeq	r0, r0, r0

20004060 <witchImages>:
	...

20004090 <witch2Image>:
	...

2000409c <tempWitch2Black>:
	...

200040a8 <tempWitchBlack>:
	...

200040b4 <tempWitch3Light>:
	...

200040c0 <witch4Image>:
	...

200040cc <witch2Gray>:
200040cc:	00000000 	andeq	r0, r0, r0

200040d0 <tempWitchGray>:
	...

200040dc <tempWitch3Black>:
	...

200040e8 <tempWitch2Gray>:
	...

200040f4 <witch3Black>:
200040f4:	00000000 	andeq	r0, r0, r0

200040f8 <witchObj>:
	...

2000411c <witch3Light>:
2000411c:	00000000 	andeq	r0, r0, r0

20004120 <tempWitch3Gray>:
	...

2000412c <witch1Black>:
2000412c:	00000000 	andeq	r0, r0, r0

20004130 <witch3Gray>:
20004130:	00000000 	andeq	r0, r0, r0

20004134 <witch1Image>:
	...

20004140 <tempWitchLight>:
	...

2000414c <tempWitch2Light>:
	...

20004158 <witch1Light>:
20004158:	00000000 	andeq	r0, r0, r0

2000415c <witch3Image>:
	...

20004168 <witch2Black>:
20004168:	00000000 	andeq	r0, r0, r0

2000416c <DIPObj>:
	...

20004190 <DIP2Image>:
	...

2000419c <DIP2Gray>:
2000419c:	00000000 	andeq	r0, r0, r0

200041a0 <tempDIP2Gray>:
	...

200041ac <DIP3Black>:
200041ac:	00000000 	andeq	r0, r0, r0

200041b0 <DIP1Black>:
200041b0:	00000000 	andeq	r0, r0, r0

200041b4 <tempDIPLight>:
	...

200041c0 <tempDIP3Light>:
	...

200041cc <DIPImages>:
	...

200041fc <tempDIP2Black>:
	...

20004208 <DIP3Image>:
	...

20004214 <DIP1Image>:
	...

20004220 <DIP1Light>:
20004220:	00000000 	andeq	r0, r0, r0

20004224 <DIP2Light>:
20004224:	00000000 	andeq	r0, r0, r0

20004228 <DIP3Light>:
20004228:	00000000 	andeq	r0, r0, r0

2000422c <DIP2Black>:
2000422c:	00000000 	andeq	r0, r0, r0

20004230 <tempDIP3Gray>:
	...

2000423c <tempDIPBlack>:
	...

20004248 <DIP1Gray>:
20004248:	00000000 	andeq	r0, r0, r0

2000424c <tempDIP3Black>:
	...

20004258 <DIP3Gray>:
20004258:	00000000 	andeq	r0, r0, r0

2000425c <DIP4Image>:
	...

20004268 <tempDIP2Light>:
	...

20004274 <tempDIPGray>:
	...

20004280 <tempFlameGray>:
	...

2000428c <tempFlame4Light>:
	...

20004298 <flame2Image>:
	...

200042a4 <flame3Light>:
200042a4:	00000000 	andeq	r0, r0, r0

200042a8 <tempFlame3Light>:
	...

200042b4 <flame3Image>:
	...

200042c0 <flame3Gray>:
200042c0:	00000000 	andeq	r0, r0, r0

200042c4 <flameObj>:
	...

200042e8 <tempFlame2Light>:
	...

200042f4 <tempFlame3Gray>:
	...

20004300 <tempFlame2Black>:
	...

2000430c <flame2Gray>:
2000430c:	00000000 	andeq	r0, r0, r0

20004310 <flame1Gray>:
20004310:	00000000 	andeq	r0, r0, r0

20004314 <flame1Light>:
20004314:	00000000 	andeq	r0, r0, r0

20004318 <tempFlame4Black>:
	...

20004324 <tempFlame4Gray>:
	...

20004330 <flame4Gray>:
20004330:	00000000 	andeq	r0, r0, r0

20004334 <flame4Image>:
	...

20004340 <flame1Image>:
	...

2000434c <tempFlame2Gray>:
	...

20004358 <flameImages>:
	...

20004388 <tempFlame3Black>:
	...

20004394 <flame4Black>:
20004394:	00000000 	andeq	r0, r0, r0

20004398 <flame1Black>:
20004398:	00000000 	andeq	r0, r0, r0

2000439c <tempFlameLight>:
	...

200043a8 <flame2Light>:
200043a8:	00000000 	andeq	r0, r0, r0

200043ac <flame3Black>:
200043ac:	00000000 	andeq	r0, r0, r0

200043b0 <tempFlameBlack>:
	...

200043bc <flame4Light>:
200043bc:	00000000 	andeq	r0, r0, r0

200043c0 <flame2Black>:
200043c0:	00000000 	andeq	r0, r0, r0

200043c4 <backBufferGray>:
	...

200047c4 <draw_buffer_black_gray>:
	...

20004bc4 <backBuffer>:
	...

20004fc4 <draw_buffer_black_light>:
	...

200053c4 <draw_buffer_black>:
	...

200057c4 <draw_buffer_black_gray_light>:
	...

20005bc4 <backBufferLight>:
	...

20005fc4 <tempIndoorsGray>:
	...

20005fd0 <tempIndoorsLight>:
	...

20005fdc <tempIndoorsBlack>:
	...

20005fe8 <indoorsGray>:
20005fe8:	00000000 	andeq	r0, r0, r0

20005fec <indoorsObj>:
	...

20006010 <indoorsImages>:
	...

2000601c <indoorsBlack>:
2000601c:	00000000 	andeq	r0, r0, r0

20006020 <indoorsImage>:
	...

2000602c <indoorsLight>:
2000602c:	00000000 	andeq	r0, r0, r0

20006030 <indoors2Obj>:
	...

20006054 <indoors2Gray>:
20006054:	00000000 	andeq	r0, r0, r0

20006058 <indoors2Images>:
	...

20006064 <indoors2Image>:
	...

20006070 <tempIndoors2Gray>:
	...

2000607c <indoors2Light>:
2000607c:	00000000 	andeq	r0, r0, r0

20006080 <tempIndoors2Black>:
	...

2000608c <tempIndoors2Light>:
	...

20006098 <indoors2Black>:
20006098:	00000000 	andeq	r0, r0, r0

2000609c <trophyImages>:
	...

200060a8 <trophyBlack>:
200060a8:	00000000 	andeq	r0, r0, r0

200060ac <trophyImage>:
	...

200060b8 <tempTrophyLight>:
	...

200060c4 <trophyObj>:
	...

200060e8 <trophyGray>:
200060e8:	00000000 	andeq	r0, r0, r0

200060ec <tempTrophyBlack>:
	...

200060f8 <tempTrophyGray>:
	...

20006104 <trophyLight>:
20006104:	00000000 	andeq	r0, r0, r0

20006108 <monster_black_bits>:
	...
20006118:	0001c000 	andeq	ip, r1, r0
2000611c:	00023000 	andeq	r3, r2, r0
20006120:	00021000 	andeq	r1, r2, r0
20006124:	00060800 	andeq	r0, r6, r0, lsl #16
20006128:	00040800 	andeq	r0, r4, r0, lsl #16
2000612c:	00040800 	andeq	r0, r4, r0, lsl #16
20006130:	00092800 	andeq	r2, r9, r0, lsl #16
20006134:	00092800 	andeq	r2, r9, r0, lsl #16
20006138:	00100400 	andseq	r0, r0, r0, lsl #8
2000613c:	00100400 	andseq	r0, r0, r0, lsl #8
20006140:	00200200 	eoreq	r0, r0, r0, lsl #4
20006144:	00661b00 	rsbeq	r1, r6, r0, lsl #22
20006148:	0043b100 	subeq	fp, r3, r0, lsl #2
2000614c:	0080e080 	addeq	lr, r0, r0, lsl #1
20006150:	01800080 	orreq	r0, r0, r0, lsl #1
20006154:	01000040 	tsteq	r0, r0, asr #32
20006158:	02000040 	andeq	r0, r0, #64	; 0x40
2000615c:	02000060 	andeq	r0, r0, #96	; 0x60
20006160:	02000020 	andeq	r0, r0, #32
20006164:	03ff03e0 	mvnseq	r0, #224, 6	; 0x80000003
20006168:	0001fc00 	andeq	pc, r1, r0, lsl #24
	...

20006180 <monster_light_bits>:
	...
20006194:	00010000 	andeq	r0, r1, r0
20006198:	00018000 	andeq	r8, r1, r0
2000619c:	0001f000 	andeq	pc, r1, r0
200061a0:	0001f000 	andeq	pc, r1, r0
200061a4:	00009000 	andeq	r9, r0, r0
200061a8:	00009000 	andeq	r9, r0, r0
200061ac:	0000d000 	andeq	sp, r0, r0
200061b0:	0001f800 	andeq	pc, r1, r0, lsl #16
200061b4:	0003f800 	andeq	pc, r3, r0, lsl #16
200061b8:	0003fc00 	andeq	pc, r3, r0, lsl #24
200061bc:	0001e400 	andeq	lr, r1, r0, lsl #8
200061c0:	00044c00 	andeq	r4, r4, r0, lsl #24
200061c4:	00060c00 	andeq	r0, r6, r0, lsl #24
200061c8:	0006ee00 	andeq	lr, r6, r0, lsl #28
200061cc:	000ffe00 	andeq	pc, pc, r0, lsl #28
200061d0:	000f3f00 	andeq	r3, pc, r0, lsl #30
200061d4:	00000780 	andeq	r0, r0, r0, lsl #15
200061d8:	000003c0 	andeq	r0, r0, r0, asr #7
	...

200061f8 <monster_gray_bits>:
	...
20006218:	00020000 	andeq	r0, r2, r0
2000621c:	00000000 	andeq	r0, r0, r0
20006220:	00040000 	andeq	r0, r4, r0
20006224:	00060000 	andeq	r0, r6, r0
20006228:	000e0000 	andeq	r0, lr, r0
2000622c:	000c0000 	andeq	r0, ip, r0
20006230:	001c0000 	andseq	r0, ip, r0
20006234:	00180000 	andseq	r0, r8, r0
20006238:	00380000 	eorseq	r0, r8, r0
2000623c:	00780000 	rsbseq	r0, r8, r0
20006240:	00780000 	rsbseq	r0, r8, r0
20006244:	00f00000 	rscseq	r0, r0, r0
20006248:	01f0c000 	mvnseq	ip, r0
2000624c:	01fff800 	mvnseq	pc, r0, lsl #16
20006250:	01fffc00 	mvnseq	pc, r0, lsl #24
20006254:	0000fc00 	andeq	pc, r0, r0, lsl #24
	...

20006270 <press_black_bits>:
	...
200062a8:	001c0000 	andseq	r0, ip, r0
200062ac:	00000000 	andeq	r0, r0, r0
200062b0:	00240000 	eoreq	r0, r4, r0
200062b4:	00000000 	andeq	r0, r0, r0
200062b8:	00440000 	subeq	r0, r4, r0
200062bc:	00000000 	andeq	r0, r0, r0
200062c0:	c5240000 	strgt	r0, [r4, #-0]!
200062c4:	00000198 	muleq	r0, r8, r1
200062c8:	2b1c0000 	blcs	207062d0 <firstTime.4040+0x6fc20c>
200062cc:	00000045 	andeq	r0, r0, r5, asr #32
200062d0:	e1040000 	mrs	r0, (UNDEF: 4)
200062d4:	000000cd 	andeq	r0, r0, sp, asr #1
200062d8:	21040000 	mrscs	r0, (UNDEF: 4)
200062dc:	00000110 	andeq	r0, r0, r0, lsl r1
200062e0:	c1040000 	mrsgt	r0, (UNDEF: 4)
200062e4:	000000cc 	andeq	r0, r0, ip, asr #1
	...
20006314:	00000004 	andeq	r0, r0, r4
20006318:	00000000 	andeq	r0, r0, r0
2000631c:	00000004 	andeq	r0, r0, r4
20006320:	00000000 	andeq	r0, r0, r0
20006324:	00000004 	andeq	r0, r0, r4
20006328:	0494e000 	ldreq	lr, [r4], #0
2000632c:	00009334 	andeq	r9, r0, r4, lsr r3
20006330:	04ac9000 	strteq	r9, [ip], #0
20006334:	00009494 	muleq	r0, r4, r4
20006338:	04a49000 	strteq	r9, [r4], #0
2000633c:	0000978c 	andeq	r9, r0, ip, lsl #15
20006340:	04a49000 	strteq	r9, [r4], #0
20006344:	00009094 	muleq	r0, r4, r0
20006348:	07256000 	streq	r6, [r5, -r0]!
2000634c:	0000e324 	andeq	lr, r0, r4, lsr #6
20006350:	04000000 	streq	r0, [r0], #-0
20006354:	00008000 	andeq	r8, r0, r0
20006358:	04000000 	streq	r0, [r0], #-0
2000635c:	00008000 	andeq	r8, r0, r0
20006360:	03000000 	movweq	r0, #0
20006364:	00006000 	andeq	r6, r0, r0
	...

20006388 <press_light_bits>:
	...
200063c8:	00000200 	andeq	r0, r0, r0, lsl #4
200063cc:	00000000 	andeq	r0, r0, r0
200063d0:	00000700 	andeq	r0, r0, r0, lsl #14
200063d4:	00000000 	andeq	r0, r0, r0
200063d8:	00000200 	andeq	r0, r0, r0, lsl #4
	...
2000641c:	00800000 	addeq	r0, r0, r0
20006420:	00000000 	andeq	r0, r0, r0
20006424:	01c00000 	biceq	r0, r0, r0
20006428:	00000000 	andeq	r0, r0, r0
2000642c:	00800000 	addeq	r0, r0, r0
20006430:	00000010 	andeq	r0, r0, r0, lsl r0
20006434:	00000000 	andeq	r0, r0, r0
20006438:	00000038 	andeq	r0, r0, r8, lsr r0
2000643c:	00000000 	andeq	r0, r0, r0
20006440:	00000010 	andeq	r0, r0, r0, lsl r0
	...

200064a0 <press_gray_bits>:
	...
200064e0:	00180000 	andseq	r0, r8, r0
200064e4:	00000000 	andeq	r0, r0, r0
200064e8:	00380000 	eorseq	r0, r8, r0
200064ec:	00000000 	andeq	r0, r0, r0
200064f0:	00580000 	subseq	r0, r8, r0
200064f4:	00000020 	andeq	r0, r0, r0, lsr #32
200064f8:	d4200000 	strtle	r0, [r0], #-0
200064fc:	0000039a 	muleq	r0, sl, r3
20006500:	0a380000 	beq	20e06508 <firstTime.4040+0xdfc444>
20006504:	00000102 	andeq	r0, r0, r2, lsl #2
20006508:	c2080000 	andgt	r0, r8, #0
2000650c:	00000223 	andeq	r0, r0, r3, lsr #4
20006510:	02080000 	andeq	r0, r8, #0
20006514:	00000311 	andeq	r0, r0, r1, lsl r3
20006518:	c1080000 	mrsgt	r0, (UNDEF: 8)
2000651c:	000001dd 	ldrdeq	r0, [r0], -sp
	...
2000654c:	00000008 	andeq	r0, r0, r8
20006550:	00000000 	andeq	r0, r0, r0
20006554:	00000008 	andeq	r0, r0, r8
20006558:	00000000 	andeq	r0, r0, r0
2000655c:	00000008 	andeq	r0, r0, r8
20006560:	09116000 	ldmdbeq	r1, {sp, lr}
20006564:	00012328 	andeq	r2, r1, r8, lsr #6
20006568:	09596000 	ldmdbeq	r9, {sp, lr}^
2000656c:	00012810 	andeq	r2, r1, r0, lsl r8
20006570:	0b492000 	bleq	2124e578 <firstTime.4040+0x12444b4>
20006574:	00012f08 	andeq	r2, r1, r8, lsl #30
20006578:	08488000 	stmdaeq	r8, {pc}^
2000657c:	00010458 	andeq	r0, r1, r8, asr r4
20006580:	0b6be000 	bleq	21afe588 <firstTime.4040+0x1af44c4>
20006584:	00016768 	andeq	r6, r1, r8, ror #14
20006588:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
2000658c:	00010000 	andeq	r0, r1, r0
20006590:	0c000000 	stceq	0, cr0, [r0], {-0}
20006594:	00018000 	andeq	r8, r1, r0
20006598:	06000000 	streq	r0, [r0], -r0
2000659c:	0000c000 	andeq	ip, r0, r0
	...

200065b8 <castle_black_bits>:
200065b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200065bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200065c0:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200065c4:	00000000 	andeq	r0, r0, r0
200065c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200065cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200065d0:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200065d4:	00000000 	andeq	r0, r0, r0
200065d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200065dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200065e0:	00000001 	andeq	r0, r0, r1
200065e4:	00000000 	andeq	r0, r0, r0
200065e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200065ec:	7fffffff 	svcvc	0x00ffffff
	...
200065f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200065fc:	3fffffff 	svccc	0x00ffffff
	...
20006608:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000660c:	1fffffff 	svcne	0x00ffffff
	...
20006618:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000661c:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
	...
20006628:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000662c:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
	...
20006638:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000663c:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20006743 <castle_black_bits+0x18b>	; <UNPREDICTABLE>
	...
20006648:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000664c:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
	...
20006658:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000665c:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
	...
20006668:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000666c:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20006678:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000667c:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20006688:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000668c:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20006698:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000669c:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
200066a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200066ac:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
200066b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200066bc:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
200066c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200066cc:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
200066d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200066dc:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
200066e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200066ec:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
200066f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200066fc:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20006708:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000670c:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20006718:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000671c:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
20006720:	04900000 	ldreq	r0, [r0], #0
20006724:	00000000 	andeq	r0, r0, r0
20006728:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000672c:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
20006730:	0b680000 	bleq	21a06738 <firstTime.4040+0x19fc674>
20006734:	00000000 	andeq	r0, r0, r0
20006738:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000673c:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20006740:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
20006744:	00000000 	andeq	r0, r0, r0
20006748:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000674c:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20006750:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
20006754:	00000092 	muleq	r0, r2, r0
20006758:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000675c:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20006760:	04100000 	ldreq	r0, [r0], #-0
20006764:	0000016d 	andeq	r0, r0, sp, ror #2
20006768:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000676c:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20006770:	04101240 	ldreq	r1, [r0], #-576	; 0xfffffdc0
20006774:	00000101 	andeq	r0, r0, r1, lsl #2
20006778:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000677c:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20006780:	04102da0 	ldreq	r2, [r0], #-3488	; 0xfffff260
20006784:	00000101 	andeq	r0, r0, r1, lsl #2
20006788:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000678c:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20006790:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
20006794:	00000101 	andeq	r0, r0, r1, lsl #2
20006798:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000679c:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200067a0:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
200067a4:	00000101 	andeq	r0, r0, r1, lsl #2
200067a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200067ac:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200067b0:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
200067b4:	00000082 	andeq	r0, r0, r2, lsl #1
200067b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200067bc:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200067c0:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
200067c4:	00000092 	muleq	r0, r2, r0
200067c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200067cc:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200067d0:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
200067d4:	012400a2 	smulwbeq	r4, r2, r0
200067d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200067dc:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
200067e0:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
200067e4:	02da00a2 	sbcseq	r0, sl, #162	; 0xa2
200067e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200067ec:	00004fff 	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
200067f0:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
200067f4:	020200a2 	andeq	r0, r2, #162	; 0xa2
200067f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200067fc:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006800:	08081040 	stmdaeq	r8, {r6, ip}
20006804:	0202009a 	andeq	r0, r2, #154	; 0x9a
20006808:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000680c:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006810:	08082020 	stmdaeq	r8, {r5, sp}
20006814:	01040082 	smlabbeq	r4, r2, r0, r0
20006818:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000681c:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006820:	48082020 	stmdami	r8, {r5, sp}
20006824:	01040102 	tsteq	r4, r2, lsl #2
20006828:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000682c:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006830:	b0082020 	andlt	r2, r8, r0, lsr #32
20006834:	01040101 	tsteq	r4, r1, lsl #2
20006838:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000683c:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006840:	00082220 	andeq	r2, r8, r0, lsr #4
20006844:	01040100 	mrseq	r0, (UNDEF: 20)
20006848:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000684c:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006850:	00882420 	addeq	r2, r8, r0, lsr #8
20006854:	01040100 	mrseq	r0, (UNDEF: 20)
20006858:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000685c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006860:	01082420 	tsteq	r8, r0, lsr #8
20006864:	01045a00 	tsteq	r4, r0, lsl #20
20006868:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000686c:	0000007f 	andeq	r0, r0, pc, ror r0
20006870:	01082420 	tsteq	r8, r0, lsr #8
20006874:	0104a400 	tsteq	r4, r0, lsl #8
20006878:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000687c:	00000001 	andeq	r0, r0, r1
20006880:	010b2320 	tsteq	fp, r0, lsr #6
20006884:	01030001 	tsteq	r3, r1
20006888:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000688c:	00000000 	andeq	r0, r0, r0
20006890:	00c4c020 	sbceq	ip, r4, r0, lsr #32
20006894:	02000002 	andeq	r0, r0, #2
20006898:	3fffffff 	svccc	0x00ffffff
2000689c:	00000000 	andeq	r0, r0, r0
200068a0:	00000020 	andeq	r0, r0, r0, lsr #32
200068a4:	02200002 	eoreq	r0, r0, #2
200068a8:	3fffffff 	svccc	0x00ffffff
200068ac:	00000000 	andeq	r0, r0, r0
200068b0:	00000020 	andeq	r0, r0, r0, lsr #32
200068b4:	02400002 	subeq	r0, r0, #2
200068b8:	1fffffff 	svcne	0x00ffffff
200068bc:	00000000 	andeq	r0, r0, r0
200068c0:	80000020 	andhi	r0, r0, r0, lsr #32
200068c4:	02400001 	subeq	r0, r0, #1
200068c8:	1fffffff 	svcne	0x00ffffff
200068cc:	00000000 	andeq	r0, r0, r0
200068d0:	00000010 	andeq	r0, r0, r0, lsl r0
200068d4:	02400000 	subeq	r0, r0, #0
200068d8:	0fffffff 	svceq	0x00ffffff
200068dc:	00000000 	andeq	r0, r0, r0
200068e0:	00000010 	andeq	r0, r0, r0, lsl r0
200068e4:	02300000 	eorseq	r0, r0, #0
200068e8:	0fffffff 	svceq	0x00ffffff
200068ec:	00000000 	andeq	r0, r0, r0
200068f0:	00000010 	andeq	r0, r0, r0, lsl r0
200068f4:	02000000 	andeq	r0, r0, #0
200068f8:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
200068fc:	00000000 	andeq	r0, r0, r0
20006900:	00000010 	andeq	r0, r0, r0, lsl r0
20006904:	04000000 	streq	r0, [r0], #-0
20006908:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
2000690c:	00000000 	andeq	r0, r0, r0
20006910:	00000010 	andeq	r0, r0, r0, lsl r0
20006914:	04000000 	streq	r0, [r0], #-0
20006918:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20006a1f <castle_gray_bits+0x67>	; <UNPREDICTABLE>
2000691c:	00000000 	andeq	r0, r0, r0
20006920:	00000008 	andeq	r0, r0, r8
20006924:	04000000 	streq	r0, [r0], #-0
20006928:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20006a2f <castle_gray_bits+0x77>	; <UNPREDICTABLE>
2000692c:	00000000 	andeq	r0, r0, r0
20006930:	00000008 	andeq	r0, r0, r8
20006934:	04000000 	streq	r0, [r0], #-0
20006938:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
2000693c:	00000000 	andeq	r0, r0, r0
20006940:	00000008 	andeq	r0, r0, r8
20006944:	060001c0 	streq	r0, [r0], -r0, asr #3
20006948:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
2000694c:	00000000 	andeq	r0, r0, r0
20006950:	00000008 	andeq	r0, r0, r8
20006954:	04000220 	streq	r0, [r0], #-544	; 0xfffffde0
20006958:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
2000695c:	00000000 	andeq	r0, r0, r0
20006960:	00000008 	andeq	r0, r0, r8
20006964:	04100400 	ldreq	r0, [r0], #-1024	; 0xfffffc00
20006968:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
2000696c:	00000000 	andeq	r0, r0, r0
20006970:	00000008 	andeq	r0, r0, r8
20006974:	04a00400 	strteq	r0, [r0], #1024	; 0x400
20006978:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
2000697c:	00000000 	andeq	r0, r0, r0
20006980:	00000008 	andeq	r0, r0, r8
20006984:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
20006988:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
2000698c:	00000000 	andeq	r0, r0, r0
20006990:	00000008 	andeq	r0, r0, r8
20006994:	07400400 	strbeq	r0, [r0, -r0, lsl #8]
20006998:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
2000699c:	00000000 	andeq	r0, r0, r0
200069a0:	00000008 	andeq	r0, r0, r8
200069a4:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
200069a8:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200069ac:	00000000 	andeq	r0, r0, r0
200069b0:	00000008 	andeq	r0, r0, r8
200069b4:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00

200069b8 <castle_gray_bits>:
	...
200069c0:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
200069c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
200069d0:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200069d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
200069e0:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
200069e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200069e8:	00000000 	andeq	r0, r0, r0
200069ec:	80000000 	andhi	r0, r0, r0
200069f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200069f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200069f8:	00000000 	andeq	r0, r0, r0
200069fc:	c0000000 	andgt	r0, r0, r0
20006a00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006a04:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006a08:	00000000 	andeq	r0, r0, r0
20006a0c:	e0000000 	and	r0, r0, r0
20006a10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006a14:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
20006a18:	00000000 	andeq	r0, r0, r0
20006a1c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20006a20:	f3ffcfff 			; <UNDEFINED> instruction: 0xf3ffcfff
20006a24:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
20006a28:	00000000 	andeq	r0, r0, r0
20006a2c:	fc000000 	stc2	0, cr0, [r0], {-0}
20006a30:	f1ff8fff 			; <UNDEFINED> instruction: 0xf1ff8fff
20006a34:	fff9ff3f 			; <UNDEFINED> instruction: 0xfff9ff3f
20006a38:	00000000 	andeq	r0, r0, r0
20006a3c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20006a40:	f0ff8fef 			; <UNDEFINED> instruction: 0xf0ff8fef
20006a44:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
20006a48:	00000000 	andeq	r0, r0, r0
20006a4c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20006a50:	e0ff87ef 	rscs	r8, pc, pc, ror #15
20006a54:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
20006a58:	00000000 	andeq	r0, r0, r0
20006a5c:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20006a60:	c07e07e7 	rsbsgt	r0, lr, r7, ror #15
20006a64:	ffe0fc1f 			; <UNDEFINED> instruction: 0xffe0fc1f
20006a68:	00000000 	andeq	r0, r0, r0
20006a6c:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20006a70:	001c07e7 	andseq	r0, ip, r7, ror #15
20006a74:	ffe0380e 	vcmla.f32	d19, d0, d14[0], #170
20006a78:	00000000 	andeq	r0, r0, r0
20006a7c:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20006a80:	000003e3 	andeq	r0, r0, r3, ror #7
20006a84:	f7c00000 			; <UNDEFINED> instruction: 0xf7c00000
20006a88:	00000000 	andeq	r0, r0, r0
20006a8c:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20006a90:	000001c3 	andeq	r0, r0, r3, asr #3
20006a94:	e7800000 	str	r0, [r0, r0]
20006a98:	00000000 	andeq	r0, r0, r0
20006a9c:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20006aa0:	00000003 	andeq	r0, r0, r3
20006aa4:	c3800000 	orrgt	r0, r0, #0
20006aa8:	00000000 	andeq	r0, r0, r0
20006aac:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20006ab0:	00000001 	andeq	r0, r0, r1
20006ab4:	c0000000 	andgt	r0, r0, r0
20006ab8:	00000000 	andeq	r0, r0, r0
20006abc:	9ff00000 	svcls	0x00f00000	; IMB
20006ac0:	00000001 	andeq	r0, r0, r1
20006ac4:	80000000 	andhi	r0, r0, r0
20006ac8:	00000000 	andeq	r0, r0, r0
20006acc:	8ff00000 	svchi	0x00f00000	; IMB
20006ad0:	00000000 	andeq	r0, r0, r0
20006ad4:	80000000 	andhi	r0, r0, r0
20006ad8:	00000000 	andeq	r0, r0, r0
20006adc:	8ff80000 	svchi	0x00f80000
	...
20006aec:	0ffc0000 	svceq	0x00fc0000
	...
20006afc:	0ffc0000 	svceq	0x00fc0000
	...
20006b0c:	0ffc0000 	svceq	0x00fc0000
	...
20006b1c:	0ffc0000 	svceq	0x00fc0000
	...
20006b2c:	0ffc0000 	svceq	0x00fc0000
	...
20006b3c:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
20006b4c:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
20006b5c:	07fe0000 	ldrbeq	r0, [lr, r0]!
20006b60:	03800000 	orreq	r0, r0, #0
	...
20006b6c:	03fe0000 	mvnseq	r0, #0
20006b70:	02000000 	andeq	r0, r0, #0
	...
20006b7c:	03ff0000 	mvnseq	r0, #0
20006b80:	02000000 	andeq	r0, r0, #0
	...
20006b8c:	03ff0000 	mvnseq	r0, #0
20006b90:	02000000 	andeq	r0, r0, #0
	...
20006b9c:	03ff0000 	mvnseq	r0, #0
20006ba0:	02000000 	andeq	r0, r0, #0
	...
20006bac:	03ff0000 	mvnseq	r0, #0
20006bb0:	02800c00 	addeq	r0, r0, #0, 24
20006bb4:	00000060 	andeq	r0, r0, r0, rrx
20006bb8:	00000000 	andeq	r0, r0, r0
20006bbc:	03ff0000 	mvnseq	r0, #0
20006bc0:	03000800 	movweq	r0, #2048	; 0x800
20006bc4:	00000040 	andeq	r0, r0, r0, asr #32
20006bc8:	00000000 	andeq	r0, r0, r0
20006bcc:	03ff0000 	mvnseq	r0, #0
20006bd0:	03000800 	movweq	r0, #2048	; 0x800
20006bd4:	00000040 	andeq	r0, r0, r0, asr #32
20006bd8:	00000000 	andeq	r0, r0, r0
20006bdc:	03ff8000 	mvnseq	r8, #0
20006be0:	03000a00 	movweq	r0, #2560	; 0xa00
20006be4:	00000040 	andeq	r0, r0, r0, asr #32
20006be8:	00000000 	andeq	r0, r0, r0
20006bec:	01ffb000 	mvnseq	fp, r0
20006bf0:	03000c00 	movweq	r0, #3072	; 0xc00
20006bf4:	00000040 	andeq	r0, r0, r0, asr #32
20006bf8:	00000000 	andeq	r0, r0, r0
20006bfc:	01fff800 	mvnseq	pc, r0, lsl #16
20006c00:	07800c00 	streq	r0, [r0, r0, lsl #24]
20006c04:	00000060 	andeq	r0, r0, r0, rrx
20006c08:	00000000 	andeq	r0, r0, r0
20006c0c:	01fffc00 	mvnseq	pc, r0, lsl #24
20006c10:	04001800 	streq	r1, [r0], #-2048	; 0xfffff800
20006c14:	00c00058 	sbceq	r0, r0, r8, asr r0
20006c18:	00000000 	andeq	r0, r0, r0
20006c1c:	00fffc00 	rscseq	pc, pc, r0, lsl #24
20006c20:	06001400 	streq	r1, [r0], -r0, lsl #8
20006c24:	00c000c0 	sbceq	r0, r0, r0, asr #1
20006c28:	00000000 	andeq	r0, r0, r0
20006c2c:	007ffc00 	rsbseq	pc, pc, r0, lsl #24
20006c30:	45001000 	strmi	r1, [r0, #-0]
20006c34:	008000a0 	addeq	r0, r0, r0, lsr #1
20006c38:	00000000 	andeq	r0, r0, r0
20006c3c:	007ffe00 	rsbseq	pc, pc, r0, lsl #28
20006c40:	80001000 	andhi	r1, r0, r0
20006c44:	008000c1 	addeq	r0, r0, r1, asr #1
20006c48:	00000000 	andeq	r0, r0, r0
20006c4c:	003ffe00 	eorseq	pc, pc, r0, lsl #28
20006c50:	00001000 	andeq	r1, r0, r0
20006c54:	00a000f0 	strdeq	r0, [r0], r0	; <UNPREDICTABLE>
20006c58:	00000000 	andeq	r0, r0, r0
20006c5c:	003fff00 	eorseq	pc, pc, r0, lsl #30
20006c60:	00001000 	andeq	r1, r0, r0
20006c64:	00c000e0 	sbceq	r0, r0, r0, ror #1
20006c68:	00000000 	andeq	r0, r0, r0
20006c6c:	001fff80 	andseq	pc, pc, r0, lsl #31
20006c70:	02001800 	andeq	r1, r0, #0, 16
20006c74:	00c000c0 	sbceq	r0, r0, r0, asr #1
20006c78:	00000000 	andeq	r0, r0, r0
20006c7c:	0019fffe 			; <UNDEFINED> instruction: 0x0019fffe
20006c80:	02001400 	andeq	r1, r0, #0, 8
20006c84:	00803000 	addeq	r3, r0, r0
20006c88:	00000000 	andeq	r0, r0, r0
20006c8c:	0018ffff 			; <UNDEFINED> instruction: 0x0018ffff
20006c90:	05033f00 	streq	r3, [r3, #-3840]	; 0xfffff100
20006c94:	01000000 	mrseq	r0, (UNDEF: 0)
20006c98:	c0000000 	andgt	r0, r0, r0
20006c9c:	0008ffff 	strdeq	pc, [r8], -pc	; <UNPREDICTABLE>
20006ca0:	00c0e400 	sbceq	lr, r0, r0, lsl #8
20006ca4:	01000004 	tsteq	r0, r4
20006ca8:	c0000000 	andgt	r0, r0, r0
20006cac:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20006cb0:	00002000 	andeq	r2, r0, r0
20006cb4:	01000008 	tsteq	r0, r8
20006cb8:	e0000000 	and	r0, r0, r0
20006cbc:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20006cc0:	00001000 	andeq	r1, r0, r0
20006cc4:	01000006 	tsteq	r0, r6
20006cc8:	e0000000 	and	r0, r0, r0
20006ccc:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
20006cd0:	80000000 	andhi	r0, r0, r0
20006cd4:	01800001 	orreq	r0, r0, r1
20006cd8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20006cdc:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
20006ce0:	00400000 	subeq	r0, r0, r0
20006ce4:	01400000 	mrseq	r0, (UNDEF: 64)
20006ce8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20006cec:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
20006cf0:	03800000 	orreq	r0, r0, #0
20006cf4:	01300000 	teqeq	r0, r0
20006cf8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20006cfc:	00001bff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
20006d00:	10e00000 	rscne	r0, r0, r0
20006d04:	03000000 	movweq	r0, #0
20006d08:	fc000000 	stc2	0, cr0, [r0], {-0}
20006d0c:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006d10:	0f800000 	svceq	0x00800000
20006d14:	03900000 	orrseq	r0, r0, #0
20006d18:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20006d1c:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006d20:	00000000 	andeq	r0, r0, r0
20006d24:	03e00000 	mvneq	r0, #0
20006d28:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20006d2c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006d30:	00000000 	andeq	r0, r0, r0
20006d34:	03f40000 	mvnseq	r0, #0
20006d38:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20006d3c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006d40:	00002000 	andeq	r2, r0, r0
20006d44:	01f80000 	mvnseq	r0, r0
20006d48:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20006d4c:	0000007f 	andeq	r0, r0, pc, ror r0
20006d50:	0010c000 	andseq	ip, r0, r0
20006d54:	03f80000 	mvnseq	r0, #0
20006d58:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20006d5c:	0000003f 	andeq	r0, r0, pc, lsr r0
20006d60:	000f0000 	andeq	r0, pc, r0
20006d64:	03e000e0 	mvneq	r0, #224	; 0xe0
20006d68:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20006d6c:	0000001f 	andeq	r0, r0, pc, lsl r0
20006d70:	00026000 	andeq	r6, r2, r0
20006d74:	035001f0 	cmpeq	r0, #240, 2	; 0x3c
20006d78:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20006d7c:	0000001f 	andeq	r0, r0, pc, lsl r0
20006d80:	00118000 	andseq	r8, r1, r0
20006d84:	03ec01f0 	mvneq	r0, #240, 2	; 0x3c
20006d88:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
20006d8c:	0000000f 	andeq	r0, r0, pc
20006d90:	200e0000 	andcs	r0, lr, r0
20006d94:	00a022f0 	strdeq	r2, [r0], r0	; <UNPREDICTABLE>
20006d98:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
20006d9c:	00000007 	andeq	r0, r0, r7
20006da0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
20006da4:	03c0c170 	biceq	ip, r0, #112, 2
20006da8:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
20006dac:	00000003 	andeq	r0, r0, r3
20006db0:	e4000000 	str	r0, [r0], #-0
20006db4:	03c270f3 	biceq	r7, r2, #243	; 0xf3

20006db8 <castle_light_bits>:
	...
20006e14:	00000040 	andeq	r0, r0, r0, asr #32
	...
20006e20:	0c003000 	stceq	0, cr3, [r0], {-0}
20006e24:	00000040 	andeq	r0, r0, r0, asr #32
	...
20006e30:	0e007000 	cdpeq	0, 0, cr7, cr0, cr0, {0}
20006e34:	000600c0 	andeq	r0, r6, r0, asr #1
	...
20006e40:	0f007010 	svceq	0x00007010
20006e44:	000601e0 	andeq	r0, r6, r0, ror #3
	...
20006e50:	1f007810 	svcne	0x00007810
20006e54:	000601e0 	andeq	r0, r6, r0, ror #3
	...
20006e60:	3f81f818 	svccc	0x0081f818
20006e64:	001f03e0 	andseq	r0, pc, r0, ror #7
	...
20006e70:	ffe3f818 			; <UNDEFINED> instruction: 0xffe3f818
20006e74:	001fc7f1 			; <UNDEFINED> instruction: 0x001fc7f1
	...
20006e80:	fffffc1c 			; <UNDEFINED> instruction: 0xfffffc1c
20006e84:	083fffff 	ldmdaeq	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
	...
20006e90:	fffffe3c 			; <UNDEFINED> instruction: 0xfffffe3c
20006e94:	187fffff 	ldmdane	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
	...
20006ea0:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20006ea4:	3c7fffff 	ldclcc	15, cr15, [pc], #-1020	; 20006ab0 <castle_gray_bits+0xf8>
	...
20006eb0:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20006eb4:	3fffffff 	svccc	0x00ffffff
20006eb8:	00000000 	andeq	r0, r0, r0
20006ebc:	60000000 	andvs	r0, r0, r0
20006ec0:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20006ec4:	7fffffff 	svcvc	0x00ffffff
20006ec8:	00000000 	andeq	r0, r0, r0
20006ecc:	70000000 	andvc	r0, r0, r0
20006ed0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006ed4:	7fffffff 	svcvc	0x00ffffff
20006ed8:	00000000 	andeq	r0, r0, r0
20006edc:	70000000 	andvc	r0, r0, r0
20006ee0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006ee4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006ee8:	00000000 	andeq	r0, r0, r0
20006eec:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20006ef0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006ef4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006ef8:	00000000 	andeq	r0, r0, r0
20006efc:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20006f00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006f04:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006f08:	00000000 	andeq	r0, r0, r0
20006f0c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20006f10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006f14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006f18:	00000000 	andeq	r0, r0, r0
20006f1c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20006f20:	fb6fffff 	blx	21c06f26 <firstTime.4040+0x1bfce62>
20006f24:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006f28:	00000000 	andeq	r0, r0, r0
20006f2c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20006f30:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
20006f34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006f38:	00000000 	andeq	r0, r0, r0
20006f3c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20006f40:	f407ffff 			; <UNDEFINED> instruction: 0xf407ffff
20006f44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006f48:	00000000 	andeq	r0, r0, r0
20006f4c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20006f50:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
20006f54:	ffffff6d 			; <UNDEFINED> instruction: 0xffffff6d
20006f58:	00000000 	andeq	r0, r0, r0
20006f5c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20006f60:	f80fffff 			; <UNDEFINED> instruction: 0xf80fffff
20006f64:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20006f68:	00000000 	andeq	r0, r0, r0
20006f6c:	fc000000 	stc2	0, cr0, [r0], {-0}
20006f70:	f80fedbf 			; <UNDEFINED> instruction: 0xf80fedbf
20006f74:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20006f78:	00000000 	andeq	r0, r0, r0
20006f7c:	fc000000 	stc2	0, cr0, [r0], {-0}
20006f80:	f80fc01f 			; <UNDEFINED> instruction: 0xf80fc01f
20006f84:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
20006f88:	00000000 	andeq	r0, r0, r0
20006f8c:	fc000000 	stc2	0, cr0, [r0], {-0}
20006f90:	f90fc81f 			; <UNDEFINED> instruction: 0xf90fc81f
20006f94:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
20006f98:	00000000 	andeq	r0, r0, r0
20006f9c:	fc000000 	stc2	0, cr0, [r0], {-0}
20006fa0:	f90fd41f 			; <UNDEFINED> instruction: 0xf90fd41f
20006fa4:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20006fa8:	00000000 	andeq	r0, r0, r0
20006fac:	fc000000 	stc2	0, cr0, [r0], {-0}
20006fb0:	f90fe03f 			; <UNDEFINED> instruction: 0xf90fe03f
20006fb4:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
20006fb8:	00000000 	andeq	r0, r0, r0
20006fbc:	fc000000 	stc2	0, cr0, [r0], {-0}
20006fc0:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
20006fc4:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
20006fc8:	00000000 	andeq	r0, r0, r0
20006fcc:	fc000000 	stc2	0, cr0, [r0], {-0}
20006fd0:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
20006fd4:	fedbff19 	mrc2	15, 6, pc, cr11, cr9, {0}
20006fd8:	00000000 	andeq	r0, r0, r0
20006fdc:	fc000000 	stc2	0, cr0, [r0], {-0}
20006fe0:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
20006fe4:	fd01ff11 	stc2	15, cr15, [r1, #-68]	; 0xffffffbc
20006fe8:	00000000 	andeq	r0, r0, r0
20006fec:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20006ff0:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
20006ff4:	fd01ff19 	stc2	15, cr15, [r1, #-100]	; 0xffffff9c
20006ff8:	00000000 	andeq	r0, r0, r0
20006ffc:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20007000:	f007e03f 			; <UNDEFINED> instruction: 0xf007e03f
20007004:	fc01ff01 	stc2	15, cr15, [r1], {1}
20007008:	00000000 	andeq	r0, r0, r0
2000700c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20007010:	f007c01f 			; <UNDEFINED> instruction: 0xf007c01f
20007014:	fe03ff01 	cdp2	15, 0, cr15, cr3, cr1, {0}
20007018:	00000000 	andeq	r0, r0, r0
2000701c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20007020:	b007c01f 	andlt	ip, r7, pc, lsl r0
20007024:	fe03fe01 	cdp2	14, 0, cr15, cr3, cr1, {0}
20007028:	00000000 	andeq	r0, r0, r0
2000702c:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20007030:	0007c01f 	andeq	ip, r7, pc, lsl r0
20007034:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
20007038:	00000000 	andeq	r0, r0, r0
2000703c:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20007040:	0007c01f 	andeq	ip, r7, pc, lsl r0
20007044:	fe03fe10 	mcr2	14, 0, pc, cr3, cr0, {0}	; <UNPREDICTABLE>
20007048:	00000000 	andeq	r0, r0, r0
2000704c:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20007050:	0007c21f 	andeq	ip, r7, pc, lsl r2
20007054:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
20007058:	00000000 	andeq	r0, r0, r0
2000705c:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20007060:	0087c31f 	addeq	ip, r7, pc, lsl r3
20007064:	fe03a400 	cdp2	4, 0, cr10, cr3, cr0, {0}
20007068:	00000000 	andeq	r0, r0, r0
2000706c:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20007070:	00c7c31f 	sbceq	ip, r7, pc, lsl r3
20007074:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
20007078:	00000000 	andeq	r0, r0, r0
2000707c:	ffe60000 			; <UNDEFINED> instruction: 0xffe60000
20007080:	00c4c01f 	sbceq	ip, r4, pc, lsl r0
20007084:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20007088:	00000000 	andeq	r0, r0, r0
2000708c:	ffe70000 			; <UNDEFINED> instruction: 0xffe70000
20007090:	8000001f 	andhi	r0, r0, pc, lsl r0
20007094:	fc000001 	stc2	0, cr0, [r0], {1}
20007098:	00000000 	andeq	r0, r0, r0
2000709c:	fff70000 			; <UNDEFINED> instruction: 0xfff70000
200070a0:	8000001f 	andhi	r0, r0, pc, lsl r0
200070a4:	fc000009 	stc2	0, cr0, [r0], {9}
200070a8:	00000000 	andeq	r0, r0, r0
200070ac:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200070b0:	8000001f 	andhi	r0, r0, pc, lsl r0
200070b4:	fc200001 	stc2	0, cr0, [r0], #-4
200070b8:	00000000 	andeq	r0, r0, r0
200070bc:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200070c0:	0000001f 	andeq	r0, r0, pc, lsl r0
200070c4:	fc300000 	ldc2	0, cr0, [r0], #-0
200070c8:	00000000 	andeq	r0, r0, r0
200070cc:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
200070d0:	0000000f 	andeq	r0, r0, pc
200070d4:	fc300000 	ldc2	0, cr0, [r0], #-0
200070d8:	00000000 	andeq	r0, r0, r0
200070dc:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
200070e0:	0000000f 	andeq	r0, r0, pc
200070e4:	fc000000 	stc2	0, cr0, [r0], {-0}
200070e8:	00000000 	andeq	r0, r0, r0
200070ec:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
200070f0:	1000000f 	andne	r0, r0, pc
200070f4:	fc000000 	stc2	0, cr0, [r0], {-0}
200070f8:	00000000 	andeq	r0, r0, r0
200070fc:	ffffe400 			; <UNDEFINED> instruction: 0xffffe400
20007100:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
20007104:	f8080000 			; <UNDEFINED> instruction: 0xf8080000
20007108:	00000000 	andeq	r0, r0, r0
2000710c:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20007110:	0000000f 	andeq	r0, r0, pc
20007114:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20007118:	00000000 	andeq	r0, r0, r0
2000711c:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20007120:	00000007 	andeq	r0, r0, r7
20007124:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
20007128:	00000000 	andeq	r0, r0, r0
2000712c:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20007130:	00000007 	andeq	r0, r0, r7
20007134:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
20007138:	00000000 	andeq	r0, r0, r0
2000713c:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20007140:	00100007 	andseq	r0, r0, r7
20007144:	f8040000 			; <UNDEFINED> instruction: 0xf8040000
20007148:	00000000 	andeq	r0, r0, r0
2000714c:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
20007150:	00080007 	andeq	r0, r8, r7
20007154:	f80001c0 			; <UNDEFINED> instruction: 0xf80001c0
20007158:	00000000 	andeq	r0, r0, r0
2000715c:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
20007160:	00000007 	andeq	r0, r0, r7
20007164:	f8080300 			; <UNDEFINED> instruction: 0xf8080300
20007168:	00000000 	andeq	r0, r0, r0
2000716c:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
20007170:	00200007 	eoreq	r0, r0, r7
20007174:	f8080200 			; <UNDEFINED> instruction: 0xf8080200
20007178:	00000000 	andeq	r0, r0, r0
2000717c:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
20007180:	00000007 	andeq	r0, r0, r7
20007184:	f8000200 			; <UNDEFINED> instruction: 0xf8000200
20007188:	00000000 	andeq	r0, r0, r0
2000718c:	fffffff0 			; <UNDEFINED> instruction: 0xfffffff0
20007190:	00000007 	andeq	r0, r0, r7
20007194:	f8000100 			; <UNDEFINED> instruction: 0xf8000100
20007198:	00000000 	andeq	r0, r0, r0
2000719c:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
200071a0:	01000007 	tsteq	r0, r7
200071a4:	f8100280 			; <UNDEFINED> instruction: 0xf8100280
200071a8:	00000000 	andeq	r0, r0, r0
200071ac:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
200071b0:	02000007 	andeq	r0, r0, #7
200071b4:	f8000300 			; <UNDEFINED> instruction: 0xf8000300

200071b8 <title_light_bits>:
	...
200071d4:	00000400 	andeq	r0, r0, r0, lsl #8
200071d8:	30000000 	andcc	r0, r0, r0
200071dc:	f80f9e06 			; <UNDEFINED> instruction: 0xf80f9e06
200071e0:	06300000 	ldrteq	r0, [r0], -r0
200071e4:	00cb8cba 	strheq	r8, [fp], #202	; 0xca
200071e8:	ba033000 	blt	200d31f0 <firstTime.4040+0xc912c>
200071ec:	0000eb4f 	andeq	lr, r0, pc, asr #22
200071f0:	439ef3f0 	orrsmi	pc, lr, #240, 6	; 0xc0000003
200071f4:	f000003a 			; <UNDEFINED> instruction: 0xf000003a
200071f8:	5a478e9b 	bpl	211eac6c <firstTime.4040+0x11e0ba8>
200071fc:	9b300000 	blls	20c07204 <firstTime.4040+0xbfd140>
20007200:	019bcd36 	orrseq	ip, fp, r6, lsr sp
20007204:	66db3000 	ldrbvs	r3, [fp], r0
20007208:	000319d9 	ldrdeq	r1, [r3], -r9
2000720c:	19667330 	stmdbne	r6!, {r4, r5, r8, r9, ip, sp, lr}^
20007210:	30000310 	andcc	r0, r0, r0, lsl r3
20007214:	00000001 	andeq	r0, r0, r1
20007218:	80000000 	andhi	r0, r0, r0
2000721c:	001d3e7b 	andseq	r3, sp, fp, ror lr
20007220:	0ac00000 	beq	1f007228 <startup-0xff8dd8>
20007224:	00000528 	andeq	r0, r0, r8, lsr #10
20007228:	ec3a4000 	ldc	0, cr4, [sl], #-0
2000722c:	0000000d 	andeq	r0, r0, sp
20007230:	05240bc0 	streq	r0, [r4, #-3008]!	; 0xfffff440
20007234:	00f00000 	rscseq	r0, r0, r0
20007238:	001c0000 	andseq	r0, ip, r0
2000723c:	03ebb000 	mvneq	fp, #0
20007240:	00000000 	andeq	r0, r0, r0
20007244:	0c032330 	stceq	3, cr2, [r3], {48}	; 0x30
20007248:	300123e4 	andcc	r2, r1, r4, ror #7
2000724c:	940c1b2a 	strls	r1, [ip], #-2858	; 0xfffff4d6
20007250:	ea300120 	b	20c076d8 <firstTime.4040+0xbfd614>
20007254:	ec860c3d 	stc	12, cr0, [r6], {61}	; 0x3d
20007258:	06ea3001 	strbteq	r3, [sl], r1
2000725c:	01e69648 	mvneq	r9, r8, asr #12
20007260:	4b9e6b30 	blmi	1e7a1f28 <startup-0x185e0d8>
20007264:	30012696 	mulcc	r1, r6, r6
20007268:	92bbb06b 	adcsls	fp, fp, #107	; 0x6b
2000726c:	69f00126 	ldmibvs	r0!, {r1, r2, r5, r8}^
20007270:	2691b832 			; <UNDEFINED> instruction: 0x2691b832
20007274:	1e687001 	cdpne	0, 6, cr7, cr8, cr1, {0}
20007278:	010e9110 	tsteq	lr, r0, lsl r1
	...

2000728c <title_gray_bits>:
	...
20007294:	40000000 	andmi	r0, r0, r0
20007298:	0f840000 	svceq	0x00840000
2000729c:	00b0c3fe 	ldrshteq	ip, [r0], lr
200072a0:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
200072a4:	001f8f1f 	andseq	r8, pc, pc, lsl pc	; <UNPREDICTABLE>
200072a8:	fffffbf8 			; <UNDEFINED> instruction: 0xfffffbf8
200072ac:	c8001fff 	stmdagt	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
200072b0:	07f061f9 			; <UNDEFINED> instruction: 0x07f061f9
200072b4:	f1cc001f 			; <UNDEFINED> instruction: 0xf1cc001f
200072b8:	be347305 	cdplt	3, 3, cr7, cr4, cr5, {0}
200072bc:	05f0ce00 	ldrbeq	ip, [r0, #3584]!	; 0xe00
200072c0:	007e1430 	rsbseq	r1, lr, r0, lsr r4
200072c4:	2041080f 	subcs	r0, r1, pc, lsl #16
200072c8:	0e003e01 	cdpeq	14, 0, cr3, cr0, cr1, {0}
200072cc:	01384060 	teqeq	r8, r0, rrx
200072d0:	600c001e 	andvs	r0, ip, lr, lsl r0
200072d4:	1c4030c0 	mcrrne	0, 12, r3, r0, cr0
200072d8:	10208c00 	eorne	r8, r0, r0, lsl #24
200072dc:	0038c024 	eorseq	ip, r8, r4, lsr #32
200072e0:	0411088c 	ldreq	r0, [r1], #-2188	; 0xfffff774
200072e4:	c800f8ce 	stmdagt	r0, {r1, r2, r3, r6, r7, fp, ip, sp, lr, pc}
200072e8:	ffe6990c 			; <UNDEFINED> instruction: 0xffe6990c
200072ec:	7cfa0178 	ldfvce	f0, [sl], #480	; 0x1e0
200072f0:	3fe0c184 	svccc	0x00e0c184
200072f4:	013ff400 	teqeq	pc, r0, lsl #8	; <UNPREDICTABLE>
200072f8:	001fc0c7 	andseq	ip, pc, r7, asr #1
200072fc:	03c03ff0 	biceq	r3, r0, #240, 30	; 0x3c0
20007300:	fc0007e0 	stc2	7, cr0, [r0], {224}	; 0xe0
20007304:	e003803f 	and	r8, r3, pc, lsr r0
20007308:	7f0c009f 	svcvc	0x000c009f
2000730c:	ffc1fbe4 			; <UNDEFINED> instruction: 0xffc1fbe4
20007310:	fc140c03 	ldc2	12, cr0, [r4], {3}
20007314:	03ffc7ff 	mvnseq	ip, #66846720	; 0x3fc0000
20007318:	f3fc1c0c 	vdup.32	d17, d12[1]
2000731c:	0e02dc1b 	mcreq	12, 0, sp, cr2, cr11, {0}
20007320:	63f3e490 	mvnsvs	lr, #144, 8	; 0x90000000
20007324:	018e0218 	orreq	r0, lr, r8, lsl r2
20007328:	1251e382 	subsne	lr, r1, #134217730	; 0x8000002
2000732c:	88018e02 	stmdahi	r1, {r1, r9, sl, fp, pc}
20007330:	020061a7 	andeq	r6, r0, #-1073741783	; 0xc0000029
20007334:	2460008e 	strbtcs	r0, [r0], #-142	; 0xffffff72
20007338:	8e021041 	cdphi	0, 0, cr1, cr2, cr1, {2}
2000733c:	41000300 	mrsmi	r0, LR_irq
20007340:	000e0290 	muleq	lr, r0, r2
20007344:	9048008d 	subls	r0, r8, sp, lsl #1
20007348:	81040c02 	tsthi	r4, r2, lsl #24
2000734c:	02a04c87 	adceq	r4, r0, #34560	; 0x8700
20007350:	cffffffc 	svcgt	0x00fffffc
20007354:	8203e2fc 	andhi	lr, r3, #252, 4	; 0xc000000f
20007358:	e3f81c07 	mvns	r1, #1792	; 0x700
2000735c:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20007360 <title_black_bits>:
	...
20007388:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
2000738c:	01000040 	tsteq	r0, r0, asr #32
20007390:	400c0000 	andmi	r0, ip, r0
20007394:	00010080 	andeq	r0, r1, r0, lsl #1
20007398:	9c200400 	cfstrsls	mvf0, [r0], #-0
2000739c:	000001c4 	andeq	r0, r0, r4, asr #3
200073a0:	a4803104 	strge	r3, [r0], #260	; 0x104
200073a4:	04c00001 	strbeq	r0, [r0], #1
200073a8:	02240209 	eoreq	r0, r4, #-1879048192	; 0x90000000
200073ac:	89044000 	stmdbhi	r4, {lr}
200073b0:	00042602 	andeq	r2, r4, r2, lsl #12
200073b4:	e2888440 	add	r8, r8, #64, 8	; 0x40000000
200073b8:	00000421 	andeq	r0, r0, r1, lsr #8
200073bc:	001966f2 			; <UNDEFINED> instruction: 0x001966f2
200073c0:	03000007 	movweq	r0, #7
200073c4:	00020000 	andeq	r0, r2, r0
200073c8:	f4000000 	vst4.8	{d0-d3}, [r0], r0
200073cc:	00003a10 	andeq	r3, r0, r0, lsl sl
200073d0:	10058000 	andne	r8, r5, r0
200073d4:	00000012 	andeq	r0, r0, r2, lsl r0
200073d8:	1ad87400 	bne	1f6243e0 <startup-0x9dbc20>
200073dc:	80000000 	andhi	r0, r0, r0
200073e0:	0022041b 	eoreq	r0, r2, fp, lsl r4
200073e4:	00004000 	andeq	r4, r0, r0
200073e8:	00003800 	andeq	r3, r0, r0, lsl #16
200073ec:	0000c0c0 	andeq	ip, r0, r0, asr #1
200073f0:	c0000000 	andgt	r0, r0, r0
200073f4:	08000045 	stmdaeq	r0, {r0, r2, r6}
200073f8:	144000c7 	strbne	r0, [r0], #-199	; 0xffffff39
200073fc:	01281040 			; <UNDEFINED> instruction: 0x01281040
20007400:	71144000 	tstvc	r4, r0
20007404:	00190810 	andseq	r0, r9, r0, lsl r8
20007408:	90019440 	andls	r9, r1, r0, asr #8
2000740c:	4000c928 	andmi	ip, r0, r8, lsr #18
20007410:	2c444c94 	mcrrcs	12, 9, r4, r4, cr4
20007414:	96000049 	strls	r0, [r0], -r9, asr #32
20007418:	49264740 	stmdbmi	r6!, {r6, r8, r9, sl, lr}
2000741c:	60938000 	addsvs	r8, r3, r0
20007420:	00512268 	subseq	r2, r1, r8, ror #4
20007424:	30000000 	andcc	r0, r0, r0
20007428:	00001d03 	andeq	r1, r0, r3, lsl #26
	...

20007434 <bg_bits>:
	...
20007444:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
20007448:	0000001f 	andeq	r0, r0, pc, lsl r0
	...
20007454:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
20007458:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
20007464:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
20007468:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
	...
20007474:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20007478:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
	...
20007484:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20007488:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
20007494:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20007498:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
200074a4:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
200074a8:	01ffffff 	ldrsheq	pc, [pc, #255]	; 200075af <bg_bits+0x17b>	; <UNPREDICTABLE>
200074ac:	0001f000 	andeq	pc, r1, r0
200074b0:	00000000 	andeq	r0, r0, r0
200074b4:	007fe000 	rsbseq	lr, pc, r0
200074b8:	0ffffffe 	svceq	0x00fffffe
200074bc:	0003f800 	andeq	pc, r3, r0, lsl #16
200074c0:	00000000 	andeq	r0, r0, r0
200074c4:	003fe000 	eorseq	lr, pc, r0
200074c8:	7fffffc0 	svcvc	0x00ffffc0
200074cc:	0003f800 	andeq	pc, r3, r0, lsl #16
200074d0:	001f8000 	andseq	r8, pc, r0
200074d4:	001fe000 	andseq	lr, pc, r0
200074d8:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200074dc:	0003f801 	andeq	pc, r3, r1, lsl #16
200074e0:	003fc000 	eorseq	ip, pc, r0
200074e4:	003fe000 	eorseq	lr, pc, r0
200074e8:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
200074ec:	3f83f807 	svccc	0x0083f807
200074f0:	003fe000 	eorseq	lr, pc, r0
200074f4:	01ffe000 	mvnseq	lr, r0
200074f8:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200074fc:	7fc3f80f 	svcvc	0x00c3f80f
20007500:	003fe7f8 	ldrshteq	lr, [pc], -r8
20007504:	07ffe000 	ldrbeq	lr, [pc, r0]!
20007508:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
2000750c:	7fe1f01f 	svcvc	0x00e1f01f
20007510:	003ffffc 	ldrshteq	pc, [pc], -ip	; <UNPREDICTABLE>
20007514:	3fffc000 	svccc	0x00ffc000
20007518:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
2000751c:	7ff0003f 	svcvc	0x00f0003f
20007520:	007ffffc 	ldrshteq	pc, [pc], #-252	; <UNPREDICTABLE>
20007524:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20007528:	ff000000 			; <UNDEFINED> instruction: 0xff000000
2000752c:	7ff8007f 	svcvc	0x00f8007f
20007530:	3ffffffc 	svccc	0x00fffffc
20007534:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20007538:	f8000003 			; <UNDEFINED> instruction: 0xf8000003
2000753c:	7ffc00ff 	svcvc	0x00fc00ff
20007540:	7ffffffc 	svcvc	0x00fffffc
20007544:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20007548:	e000000f 	and	r0, r0, pc
2000754c:	7ffe01ff 	svcvc	0x00fe01ff
20007550:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20007554:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
20007558:	8000001f 	andhi	r0, r0, pc, lsl r0
2000755c:	7fff01ff 	svcvc	0x00ff01ff
20007560:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20007564:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20007568:	0000007f 	andeq	r0, r0, pc, ror r0
2000756c:	7fff83ff 	svcvc	0x00ff83ff
20007570:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
20007574:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20007578:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000757c:	7fffc3fe 	svcvc	0x00ffc3fe
20007580:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
20007584:	fc7ffff0 	ldc2l	15, cr15, [pc], #-960	; 200071cc <title_light_bits+0x14>
20007588:	07c001ff 			; <UNDEFINED> instruction: 0x07c001ff
2000758c:	7fffe7fc 	svcvc	0x00ffe7fc
20007590:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
20007594:	f0fffffe 			; <UNDEFINED> instruction: 0xf0fffffe
20007598:	0fe007ff 	svceq	0x00e007ff
2000759c:	7ffff7fc 	svcvc	0x00fff7fc
200075a0:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
200075a4:	c0ffffff 	ldrshtgt	pc, [pc], #255	; <UNPREDICTABLE>
200075a8:	0fe00fff 	svceq	0x00e00fff
200075ac:	7ffffff8 	svcvc	0x00fffff8
200075b0:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
200075b4:	01ffffff 	ldrsheq	pc, [pc, #255]	; 200076bb <bg_bits+0x287>	; <UNPREDICTABLE>
200075b8:	0fe01fff 	svceq	0x00e01fff
200075bc:	7ffffff8 	svcvc	0x00fffff8
200075c0:	7ffffc00 	svcvc	0x00fffc00
200075c4:	01ffffff 	ldrsheq	pc, [pc, #255]	; 200076cb <bg_bits+0x297>	; <UNPREDICTABLE>
200075c8:	0fe03ffe 	svceq	0x00e03ffe
200075cc:	3fdffff0 	svccc	0x00dffff0
200075d0:	3ffffe00 	svccc	0x00fffe00
200075d4:	01ffffff 	ldrsheq	pc, [pc, #255]	; 200076db <bg_bits+0x2a7>	; <UNPREDICTABLE>
200075d8:	0fe03ff8 	svceq	0x00e03ff8
200075dc:	3fe7fff0 	svccc	0x00e7fff0
200075e0:	07fffe00 	ldrbeq	pc, [pc, r0, lsl #28]!	; <UNPREDICTABLE>
200075e4:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
200075e8:	07c07ff0 			; <UNDEFINED> instruction: 0x07c07ff0
200075ec:	1fe7fff0 	svcne	0x00e7fff0
200075f0:	0ffffe00 	svceq	0x00fffe00
200075f4:	03fc00ff 	mvnseq	r0, #255	; 0xff
200075f8:	0000ffe0 	andeq	pc, r0, r0, ror #31
200075fc:	1ff3ffe0 	svcne	0x00f3ffe0
20007600:	1ffffe00 	svcne	0x00fffe00
20007604:	03fc001f 	mvnseq	r0, #31
20007608:	0001ff80 	andeq	pc, r1, r0, lsl #31
2000760c:	1ff9ffe0 	svcne	0x00f9ffe0
20007610:	3ffffe00 	svccc	0x00fffe00
20007614:	03fc0007 	mvnseq	r0, #7
20007618:	0001ff80 	andeq	pc, r1, r0, lsl #31
2000761c:	0ffcffe0 	svceq	0x00fcffe0
20007620:	3ffdfe00 	svccc	0x00fdfe00
20007624:	07f80007 	ldrbeq	r0, [r8, r7]!
20007628:	0003ff00 	andeq	pc, r3, r0, lsl #30
2000762c:	0ffe7ff0 	svceq	0x00fe7ff0
20007630:	3ffcfe00 	svccc	0x00fcfe00
20007634:	07f80003 	ldrbeq	r0, [r8, r3]!
20007638:	0007fe00 	andeq	pc, r7, r0, lsl #28
2000763c:	07fe7ff8 			; <UNDEFINED> instruction: 0x07fe7ff8
20007640:	3ff8fe00 	svccc	0x00f8fe00
20007644:	0ff80003 	svceq	0x00f80003
20007648:	0007fc00 	andeq	pc, r7, r0, lsl #24
2000764c:	03fffffc 	mvnseq	pc, #252, 30	; 0x3f0
20007650:	3ff87c00 	svccc	0x00f87c00
20007654:	0ff80003 	svceq	0x00f80003
20007658:	0007fc00 	andeq	pc, r7, r0, lsl #24
2000765c:	01fffffe 	ldrsheq	pc, [pc, #254]	; 20007762 <bg_bits+0x32e>	; <UNPREDICTABLE>
20007660:	1ff00000 	svcne	0x00f00000	; IMB
20007664:	0ff00007 	svceq	0x00f00007
20007668:	000ff800 	andeq	pc, pc, r0, lsl #16
2000766c:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20007773 <bg_bits+0x33f>	; <UNPREDICTABLE>
20007670:	07f0003e 			; <UNDEFINED> instruction: 0x07f0003e
20007674:	0ff00007 	svceq	0x00f00007
20007678:	800ff000 	andhi	pc, pc, r0
2000767c:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20007680:	03e0007f 	mvneq	r0, #127	; 0x7f
20007684:	0fe00007 	svceq	0x00e00007
20007688:	c00ff000 	andgt	pc, pc, r0
2000768c:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
20007690:	0000007f 	andeq	r0, r0, pc, ror r0
20007694:	0fe00007 	svceq	0x00e00007
20007698:	e00ff000 	and	pc, pc, r0
2000769c:	007ffeff 	ldrshteq	pc, [pc], #-239	; <UNPREDICTABLE>
200076a0:	0000007f 	andeq	r0, r0, pc, ror r0
200076a4:	0fe00007 	svceq	0x00e00007
200076a8:	f00ff000 			; <UNDEFINED> instruction: 0xf00ff000
200076ac:	003ffe7f 	eorseq	pc, pc, pc, ror lr	; <UNPREDICTABLE>
200076b0:	0000007f 	andeq	r0, r0, pc, ror r0
200076b4:	0fe00007 	svceq	0x00e00007
200076b8:	f80ff000 			; <UNDEFINED> instruction: 0xf80ff000
200076bc:	001ffc3f 	andseq	pc, pc, pc, lsr ip	; <UNPREDICTABLE>
200076c0:	0000007f 	andeq	r0, r0, pc, ror r0
200076c4:	1fe0000f 	svcne	0x00e0000f
200076c8:	fc0ff000 	stc2	0, cr15, [pc], {-0}
200076cc:	000ff81f 	andeq	pc, pc, pc, lsl r8	; <UNPREDICTABLE>
200076d0:	0000003e 	andeq	r0, r0, lr, lsr r0
200076d4:	1fe0000f 	svcne	0x00e0000f
200076d8:	fc07f000 	stc2	0, cr15, [r7], {-0}
200076dc:	0007f00f 	andeq	pc, r7, pc
200076e0:	00000000 	andeq	r0, r0, r0
200076e4:	1fe0000f 	svcne	0x00e0000f
200076e8:	fc07f000 	stc2	0, cr15, [r7], {-0}
200076ec:	00000007 	andeq	r0, r0, r7
200076f0:	00000000 	andeq	r0, r0, r0
200076f4:	1fe0000f 	svcne	0x00e0000f
200076f8:	fc07f800 	stc2	8, cr15, [r7], {-0}
200076fc:	00000003 	andeq	r0, r0, r3
20007700:	000ff800 	andeq	pc, pc, r0, lsl #16
20007704:	1fc0001f 	svcne	0x00c0001f
20007708:	fc07fc00 	stc2	12, cr15, [r7], {-0}
2000770c:	00000001 	andeq	r0, r0, r1
20007710:	001ffc00 	andseq	pc, pc, r0, lsl #24
20007714:	1fc0003f 	svcne	0x00c0003f
20007718:	fc07ff80 	stc2	15, cr15, [r7], {128}	; 0x80
2000771c:	00000001 	andeq	r0, r0, r1
20007720:	003fff00 	eorseq	pc, pc, r0, lsl #30
20007724:	3fc0003f 	svccc	0x00c0003f
20007728:	fc07fffc 	stc2	15, cr15, [r7], {252}	; 0xfc
2000772c:	00000001 	andeq	r0, r0, r1
20007730:	007fff80 	rsbseq	pc, pc, r0, lsl #31
20007734:	ffc0003f 			; <UNDEFINED> instruction: 0xffc0003f
20007738:	fc03ffff 	stc2	15, cr15, [r3], {255}	; 0xff
2000773c:	00000001 	andeq	r0, r0, r1
20007740:	00ffffe0 	rscseq	pc, pc, r0, ror #31
20007744:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20007748:	fc01ffff 	stc2	15, cr15, [r1], {255}	; 0xff
2000774c:	00000007 	andeq	r0, r0, r7
20007750:	03fffff0 	mvnseq	pc, #240, 30	; 0x3c0
20007754:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20007758:	fc00ffff 	stc2	15, cr15, [r0], {255}	; 0xff
2000775c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007760:	07fffff8 			; <UNDEFINED> instruction: 0x07fffff8
20007764:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20007768:	fc007fff 	stc2	15, cr7, [r0], {255}	; 0xff
2000776c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007770:	07ff7ffd 			; <UNDEFINED> instruction: 0x07ff7ffd
20007774:	ff80007f 			; <UNDEFINED> instruction: 0xff80007f
20007778:	fc003fff 	stc2	15, cr3, [r0], {255}	; 0xff
2000777c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007780:	0ffe3fff 	svceq	0x00fe3fff
20007784:	ff1f007f 			; <UNDEFINED> instruction: 0xff1f007f
20007788:	f80007ff 			; <UNDEFINED> instruction: 0xf80007ff
2000778c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007790:	1ffc3fff 	svcne	0x00fc3fff
20007794:	fc3f807f 	ldc2	0, cr8, [pc], #-508	; 200075a0 <bg_bits+0x16c>
20007798:	f800003f 			; <UNDEFINED> instruction: 0xf800003f
2000779c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200077a0:	1ff83fff 	svcne	0x00f83fff
200077a4:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
200077a8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
200077ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200077b0:	3ff03fff 	svccc	0x00f03fff
200077b4:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
200077b8:	c0000000 	andgt	r0, r0, r0
200077bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200077c0:	7fe03fff 	svcvc	0x00e03fff
200077c4:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
200077c8:	00000000 	andeq	r0, r0, r0
200077cc:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200077d0:	7fc03fff 	svcvc	0x00c03fff
200077d4:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
200077d8:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
200077dc:	f800000f 			; <UNDEFINED> instruction: 0xf800000f
200077e0:	ffc01fff 			; <UNDEFINED> instruction: 0xffc01fff
200077e4:	001f003f 	andseq	r0, pc, pc, lsr r0	; <UNPREDICTABLE>
200077e8:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
200077ec:	f8007fff 			; <UNDEFINED> instruction: 0xf8007fff
200077f0:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
200077f4:	0000003f 	andeq	r0, r0, pc, lsr r0
200077f8:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
200077fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007800:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
20007804:	0000003f 	andeq	r0, r0, pc, lsr r0
20007808:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
2000780c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007810:	ff001fff 			; <UNDEFINED> instruction: 0xff001fff
20007814:	0000003f 	andeq	r0, r0, pc, lsr r0
20007818:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
2000781c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007820:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}
20007824:	0000003f 	andeq	r0, r0, pc, lsr r0
20007828:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
2000782c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007830:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}

20007834 <current_screen>:
20007834:	00000001 	andeq	r0, r0, r1

20007838 <delay_until_text.4297>:
20007838:	00000082 	andeq	r0, r0, r2, lsl #1

2000783c <long_text.4295>:
2000783c:	00000028 	andeq	r0, r0, r8, lsr #32

20007840 <short_text.4296>:
20007840:	00000014 	andeq	r0, r0, r4, lsl r0

20007844 <last_climb_value.4299>:
20007844:	00000064 	andeq	r0, r0, r4, rrx

20007848 <fire_black_2_bits>:
	...
20007850:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>

20007854 <fire1_gray_bits>:
20007854:	00000000 	andeq	r0, r0, r0
20007858:	06000804 	streq	r0, [r0], -r4, lsl #16
2000785c:	02494204 	subeq	r4, r9, #4, 4	; 0x40000000

20007860 <fire1_light_bits>:
20007860:	00002000 	andeq	r2, r0, r0
20007864:	48000010 	stmdami	r0, {r4}
20007868:	2c243020 	stccs	0, cr3, [r4], #-128	; 0xffffff80

2000786c <fire2_gray_bits>:
2000786c:	00000000 	andeq	r0, r0, r0
20007870:	10220000 	eorne	r0, r2, r0
20007874:	00420444 	subeq	r0, r2, r4, asr #8

20007878 <fire2_light_bits>:
20007878:	04200000 	strteq	r0, [r0], #-0
2000787c:	240c0010 	strcs	r0, [ip], #-16
20007880:	123c6008 	eorsne	r6, ip, #8

20007884 <fire3_gray_bits>:
20007884:	00000000 	andeq	r0, r0, r0
20007888:	24100802 	ldrcs	r0, [r0], #-2050	; 0xfffff7fe
2000788c:	00020260 	andeq	r0, r2, r0, ror #4

20007890 <fire3_light_bits>:
20007890:	10200000 	eorne	r0, r0, r0
20007894:	18040400 	stmdane	r4, {sl}
20007898:	143c5812 	ldrtne	r5, [ip], #-2066	; 0xfffff7ee

2000789c <fire4_gray_bits>:
2000789c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
200078a0:	10320000 	eorsne	r0, r2, r0
200078a4:	02400012 	subeq	r0, r0, #18

200078a8 <fire4_light_bits>:
200078a8:	00001000 	andeq	r1, r0, r0
200078ac:	04082000 	streq	r2, [r8], #-0
200078b0:	24283a0c 	strtcs	r3, [r8], #-2572	; 0xfffff5f4

200078b4 <fire5_gray_bits>:
200078b4:	00000000 	andeq	r0, r0, r0
200078b8:	22001020 	andcs	r1, r0, #32
200078bc:	04044206 	streq	r4, [r4], #-518	; 0xfffffdfa

200078c0 <fire5_light_bits>:
200078c0:	00040000 	andeq	r0, r4, r0
200078c4:	04240800 	strteq	r0, [r4], #-2048	; 0xfffff800
200078c8:	502a1810 	eorpl	r1, sl, r0, lsl r8

200078cc <firstTime.4076>:
200078cc:	00000001 	andeq	r0, r0, r1

200078d0 <bird1_black_bits>:
	...
200078e0:	00010040 	andeq	r0, r1, r0, asr #32
200078e4:	00118060 	andseq	r8, r1, r0, rrx
200078e8:	00118060 	andseq	r8, r1, r0, rrx
200078ec:	001b80ec 	andseq	r8, fp, ip, ror #1
200078f0:	003f81fc 	ldrshteq	r8, [pc], -ip
200078f4:	007fe1f8 	ldrshteq	lr, [pc], #-24
200078f8:	007ff3f8 	ldrshteq	pc, [pc], #-56	; <UNPREDICTABLE>
200078fc:	003ffff8 	ldrshteq	pc, [pc], -r8	; <UNPREDICTABLE>
20007900:	003fedf8 	ldrshteq	lr, [pc], -r8
20007904:	001ff1f0 			; <UNDEFINED> instruction: 0x001ff1f0
20007908:	000ff0e0 	andeq	pc, pc, r0, ror #1
2000790c:	0007ff80 	andeq	pc, r7, r0, lsl #31
20007910:	00007c00 	andeq	r7, r0, r0, lsl #24
20007914:	00008800 	andeq	r8, r0, r0, lsl #16
20007918:	00033000 	andeq	r3, r3, r0
2000791c:	00011000 	andeq	r1, r1, r0
	...

20007934 <bird1_gray_bits>:
	...
20007968:	00000e00 	andeq	r0, r0, r0, lsl #28
2000796c:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

20007998 <bird1_light_bits>:
	...
200079c8:	00001200 	andeq	r1, r0, r0, lsl #4
	...

200079fc <bird2_black_bits>:
	...
20007a14:	000b0000 	andeq	r0, fp, r0
20007a18:	001e0028 	andseq	r0, lr, r8, lsr #32
20007a1c:	003e0068 	eorseq	r0, lr, r8, rrx
20007a20:	003e007c 	eorseq	r0, lr, ip, ror r0
20007a24:	003e007c 	eorseq	r0, lr, ip, ror r0
20007a28:	007e007c 	rsbseq	r0, lr, ip, ror r0
20007a2c:	007e7cfc 	ldrshteq	r7, [lr], #-204	; 0xffffff34
20007a30:	007ffff8 	ldrshteq	pc, [pc], #-248	; <UNPREDICTABLE>
20007a34:	003fd7f0 	ldrshteq	sp, [pc], -r0
20007a38:	003fc3c0 	eorseq	ip, pc, r0, asr #7
20007a3c:	000fc100 	andeq	ip, pc, r0, lsl #2
20007a40:	00007000 	andeq	r7, r0, r0
20007a44:	0000a000 	andeq	sl, r0, r0
20007a48:	0001e000 	andeq	lr, r1, r0
20007a4c:	0000a000 	andeq	sl, r0, r0
20007a50:	00008000 	andeq	r8, r0, r0
	...

20007a60 <bird2_gray_bits>:
	...
20007a9c:	00003c00 	andeq	r3, r0, r0, lsl #24
20007aa0:	00003e00 	andeq	r3, r0, r0, lsl #28
	...

20007ac4 <bird2_light_bits>:
	...
20007afc:	00002800 	andeq	r2, r0, r0, lsl #16
	...

20007b28 <bird3_black_bits>:
	...
20007b48:	00280000 	eoreq	r0, r8, r0
20007b4c:	00680020 	rsbeq	r0, r8, r0, lsr #32
20007b50:	00f80038 	rscseq	r0, r8, r8, lsr r0
20007b54:	00fc0038 	rscseq	r0, ip, r8, lsr r0
20007b58:	00fc007c 	rscseq	r0, ip, ip, ror r0
20007b5c:	00fe3dfe 	ldrshteq	r3, [lr], #222	; 0xde
20007b60:	00fffffe 	ldrshteq	pc, [pc], #254	; <UNPREDICTABLE>
20007b64:	007febfc 	ldrshteq	lr, [pc], #-188
20007b68:	003ff1f0 	ldrshteq	pc, [pc], -r0	; <UNPREDICTABLE>
20007b6c:	001ff0c0 	andseq	pc, pc, r0, asr #1
20007b70:	0001e800 	andeq	lr, r1, r0, lsl #16
20007b74:	00005000 	andeq	r5, r0, r0
20007b78:	0000f000 	andeq	pc, r0, r0
20007b7c:	00009000 	andeq	r9, r0, r0
	...

20007b8c <bird3_gray_bits>:
	...
20007bcc:	00000e00 	andeq	r0, r0, r0, lsl #28
20007bd0:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

20007bf0 <bird3_light_bits>:
	...
20007c2c:	00001400 	andeq	r1, r0, r0, lsl #8
	...

20007c54 <bird4_black_bits>:
	...
20007c88:	00007800 	andeq	r7, r0, r0, lsl #16
20007c8c:	0000ff80 	andeq	pc, r0, r0, lsl #31
20007c90:	0003d7f4 	strdeq	sp, [r3], -r4
20007c94:	008fe3fc 	strdeq	lr, [pc], ip
20007c98:	01ffc1fc 	ldrsheq	ip, [pc, #28]	; 20007cbc <bird4_gray_bits+0x4>
20007c9c:	00ffd9f8 	ldrshteq	sp, [pc], #152
20007ca0:	007fb0f0 	ldrshteq	fp, [pc], #-0
20007ca4:	007ea000 	rsbseq	sl, lr, r0
20007ca8:	00792000 	rsbseq	r2, r9, r0
20007cac:	00300000 	eorseq	r0, r0, r0
	...

20007cb8 <bird4_gray_bits>:
	...
20007cf8:	00001c00 	andeq	r1, r0, r0, lsl #24
20007cfc:	00003e00 	andeq	r3, r0, r0, lsl #28
	...

20007d1c <bird4_light_bits>:
	...
20007d58:	00002800 	andeq	r2, r0, r0, lsl #16
	...

20007d80 <bird5_black_bits>:
	...
20007dac:	00001c00 	andeq	r1, r0, r0, lsl #24
20007db0:	0000ff00 	andeq	pc, r0, r0, lsl #30
20007db4:	0003eb00 	andeq	lr, r3, r0, lsl #22
20007db8:	0007f180 	andeq	pc, r7, r0, lsl #3
20007dbc:	000ff080 	andeq	pc, pc, r0, lsl #1
20007dc0:	000fff80 	andeq	pc, pc, r0, lsl #31
20007dc4:	001fd3c0 	andseq	sp, pc, r0, asr #7
20007dc8:	003fa3c0 	eorseq	sl, pc, r0, asr #7
20007dcc:	003fa3c0 	eorseq	sl, pc, r0, asr #7
20007dd0:	003fd3c0 	eorseq	sp, pc, r0, asr #7
20007dd4:	003e8380 	eorseq	r8, lr, r0, lsl #7
20007dd8:	00778580 	rsbseq	r8, r7, r0, lsl #11
20007ddc:	00610000 	rsbeq	r0, r1, r0
20007de0:	00000000 	andeq	r0, r0, r0

20007de4 <bird5_gray_bits>:
	...
20007e1c:	00000e00 	andeq	r0, r0, r0, lsl #28
20007e20:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

20007e48 <bird5_light_bits>:
	...
20007e7c:	00001400 	andeq	r1, r0, r0, lsl #8
	...

20007eac <firstTime.4093>:
20007eac:	00000001 	andeq	r0, r0, r1

20007eb0 <witch1_black_bits>:
20007eb0:	200001f8 	strdcs	r0, [r0], -r8
20007eb4:	03400001 	movteq	r0, #1
20007eb8:	00074000 	andeq	r4, r7, r0
20007ebc:	20000720 	andcs	r0, r0, r0, lsr #14
20007ec0:	3ff80066 	svccc	0x00f80066
20007ec4:	00044000 	andeq	r4, r4, r0
20007ec8:	40000440 	andmi	r0, r0, r0, asr #8
20007ecc:	03800004 	orreq	r0, r0, #4
20007ed0:	00064000 	andeq	r4, r6, r0
20007ed4:	20000640 	andcs	r0, r0, r0, asr #12
20007ed8:	0e200006 	cdpeq	0, 2, cr0, cr0, cr6, {0}
20007edc:	000e1000 	andeq	r1, lr, r0
20007ee0:	f8000c10 			; <UNDEFINED> instruction: 0xf8000c10
20007ee4:	0000001f 	andeq	r0, r0, pc, lsl r0

20007ee8 <witch1_gray_bits>:
20007ee8:	c0000000 	andgt	r0, r0, r0
20007eec:	00800000 	addeq	r0, r0, r0
20007ef0:	00008000 	andeq	r8, r0, r0
20007ef4:	c00000c0 	andgt	r0, r0, r0, asr #1
20007ef8:	00000001 	andeq	r0, r0, r1
	...
20007f08:	00018000 	andeq	r8, r1, r0
20007f0c:	c0000180 	andgt	r0, r0, r0, lsl #3
20007f10:	01c00001 	biceq	r0, r0, r1
20007f14:	0001e000 	andeq	lr, r1, r0
20007f18:	000003e0 	andeq	r0, r0, r0, ror #7
20007f1c:	00000000 	andeq	r0, r0, r0

20007f20 <witch1_light_bits>:
	...
20007f34:	00038000 	andeq	r8, r3, r0
20007f38:	80000380 	andhi	r0, r0, r0, lsl #7
20007f3c:	00000003 	andeq	r0, r0, r3
	...

20007f58 <witch2_black_bits>:
20007f58:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20007f5c:	01200001 			; <UNDEFINED> instruction: 0x01200001
20007f60:	00034000 	andeq	r4, r3, r0
20007f64:	20000740 	andcs	r0, r0, r0, asr #14
20007f68:	66200007 	strtvs	r0, [r0], -r7
20007f6c:	003ff800 	eorseq	pc, pc, r0, lsl #16
20007f70:	40000440 	andmi	r0, r0, r0, asr #8
20007f74:	04400004 	strbeq	r0, [r0], #-4
20007f78:	00038000 	andeq	r8, r3, r0
20007f7c:	20000660 	andcs	r0, r0, r0, ror #12
20007f80:	0e100006 	cdpeq	0, 1, cr0, cr0, cr6, {0}
20007f84:	001c0800 	andseq	r0, ip, r0, lsl #16
20007f88:	fc001c08 	stc2	12, cr1, [r0], {8}
20007f8c:	0000003f 	andeq	r0, r0, pc, lsr r0

20007f90 <witch2_gray_bits>:
20007f90:	00000000 	andeq	r0, r0, r0
20007f94:	00c00000 	sbceq	r0, r0, r0
20007f98:	00008000 	andeq	r8, r0, r0
20007f9c:	c0000080 	andgt	r0, r0, r0, lsl #1
20007fa0:	01c00000 	biceq	r0, r0, r0
	...
20007fb4:	c0000180 	andgt	r0, r0, r0, lsl #3
20007fb8:	01e00001 	mvneq	r0, r1
20007fbc:	0003f000 	andeq	pc, r3, r0
20007fc0:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
20007fc4:	00000000 	andeq	r0, r0, r0

20007fc8 <witch2_light_bits>:
	...
20007fe0:	80000380 	andhi	r0, r0, r0, lsl #7
20007fe4:	03800003 	orreq	r0, r0, #3
	...

20008000 <witch3_black_bits>:
20008000:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20008004:	01200001 			; <UNDEFINED> instruction: 0x01200001
20008008:	00034000 	andeq	r4, r3, r0
2000800c:	20000740 	andcs	r0, r0, r0, asr #14
20008010:	66200007 	strtvs	r0, [r0], -r7
20008014:	003ff800 	eorseq	pc, pc, r0, lsl #16
20008018:	40000440 	andmi	r0, r0, r0, asr #8
2000801c:	04400004 	strbeq	r0, [r0], #-4
20008020:	00038000 	andeq	r8, r3, r0
20008024:	10000660 	andne	r0, r0, r0, ror #12
20008028:	1c08000e 	stcne	0, cr0, [r8], {14}
2000802c:	00380800 	eorseq	r0, r8, r0, lsl #16
20008030:	fe003804 	vcmla.f16	d3, d0, d4[0], #0
20008034:	0000007f 	andeq	r0, r0, pc, ror r0

20008038 <witch3_gray_bits>:
20008038:	00000000 	andeq	r0, r0, r0
2000803c:	00c00000 	sbceq	r0, r0, r0
20008040:	00008000 	andeq	r8, r0, r0
20008044:	c0000080 	andgt	r0, r0, r0, lsl #1
20008048:	01c00000 	biceq	r0, r0, r0
	...
2000805c:	e0000180 	and	r0, r0, r0, lsl #3
20008060:	03f00001 	mvnseq	r0, #1
20008064:	0007f000 	andeq	pc, r7, r0
20008068:	000007f8 	strdeq	r0, [r0], -r8
2000806c:	00000000 	andeq	r0, r0, r0

20008070 <witch3_light_bits>:
	...
20008088:	80000380 	andhi	r0, r0, r0, lsl #7
2000808c:	03800003 	orreq	r0, r0, #3
	...

200080a8 <firstTime.4067>:
200080a8:	00000001 	andeq	r0, r0, r1

200080ac <witch1_black_bits>:
200080ac:	200001f8 	strdcs	r0, [r0], -r8
200080b0:	03400001 	movteq	r0, #1
200080b4:	00074000 	andeq	r4, r7, r0
200080b8:	20000720 	andcs	r0, r0, r0, lsr #14
200080bc:	3ff80066 	svccc	0x00f80066
200080c0:	00044000 	andeq	r4, r4, r0
200080c4:	40000440 	andmi	r0, r0, r0, asr #8
200080c8:	03800004 	orreq	r0, r0, #4
200080cc:	00064000 	andeq	r4, r6, r0
200080d0:	20000640 	andcs	r0, r0, r0, asr #12
200080d4:	0e200006 	cdpeq	0, 2, cr0, cr0, cr6, {0}
200080d8:	000e1000 	andeq	r1, lr, r0
200080dc:	f8000c10 			; <UNDEFINED> instruction: 0xf8000c10
200080e0:	0000001f 	andeq	r0, r0, pc, lsl r0

200080e4 <witch1_gray_bits>:
200080e4:	c0000000 	andgt	r0, r0, r0
200080e8:	00800000 	addeq	r0, r0, r0
200080ec:	00008000 	andeq	r8, r0, r0
200080f0:	c00000c0 	andgt	r0, r0, r0, asr #1
200080f4:	00000001 	andeq	r0, r0, r1
	...
20008104:	00018000 	andeq	r8, r1, r0
20008108:	c0000180 	andgt	r0, r0, r0, lsl #3
2000810c:	01c00001 	biceq	r0, r0, r1
20008110:	0001e000 	andeq	lr, r1, r0
20008114:	000003e0 	andeq	r0, r0, r0, ror #7
20008118:	00000000 	andeq	r0, r0, r0

2000811c <witch1_light_bits>:
	...
20008130:	00038000 	andeq	r8, r3, r0
20008134:	80000380 	andhi	r0, r0, r0, lsl #7
20008138:	00000003 	andeq	r0, r0, r3
	...

20008154 <witch2_black_bits>:
20008154:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20008158:	01200001 			; <UNDEFINED> instruction: 0x01200001
2000815c:	00034000 	andeq	r4, r3, r0
20008160:	20000740 	andcs	r0, r0, r0, asr #14
20008164:	66200007 	strtvs	r0, [r0], -r7
20008168:	003ff800 	eorseq	pc, pc, r0, lsl #16
2000816c:	40000440 	andmi	r0, r0, r0, asr #8
20008170:	04400004 	strbeq	r0, [r0], #-4
20008174:	00038000 	andeq	r8, r3, r0
20008178:	20000660 	andcs	r0, r0, r0, ror #12
2000817c:	0e100006 	cdpeq	0, 1, cr0, cr0, cr6, {0}
20008180:	001c0800 	andseq	r0, ip, r0, lsl #16
20008184:	fc001c08 	stc2	12, cr1, [r0], {8}
20008188:	0000003f 	andeq	r0, r0, pc, lsr r0

2000818c <witch2_gray_bits>:
2000818c:	00000000 	andeq	r0, r0, r0
20008190:	00c00000 	sbceq	r0, r0, r0
20008194:	00008000 	andeq	r8, r0, r0
20008198:	c0000080 	andgt	r0, r0, r0, lsl #1
2000819c:	01c00000 	biceq	r0, r0, r0
	...
200081b0:	c0000180 	andgt	r0, r0, r0, lsl #3
200081b4:	01e00001 	mvneq	r0, r1
200081b8:	0003f000 	andeq	pc, r3, r0
200081bc:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
200081c0:	00000000 	andeq	r0, r0, r0

200081c4 <witch2_light_bits>:
	...
200081dc:	80000380 	andhi	r0, r0, r0, lsl #7
200081e0:	03800003 	orreq	r0, r0, #3
	...

200081fc <witch3_black_bits>:
200081fc:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20008200:	01200001 			; <UNDEFINED> instruction: 0x01200001
20008204:	00034000 	andeq	r4, r3, r0
20008208:	20000740 	andcs	r0, r0, r0, asr #14
2000820c:	66200007 	strtvs	r0, [r0], -r7
20008210:	003ff800 	eorseq	pc, pc, r0, lsl #16
20008214:	40000440 	andmi	r0, r0, r0, asr #8
20008218:	04400004 	strbeq	r0, [r0], #-4
2000821c:	00038000 	andeq	r8, r3, r0
20008220:	10000660 	andne	r0, r0, r0, ror #12
20008224:	1c08000e 	stcne	0, cr0, [r8], {14}
20008228:	00380800 	eorseq	r0, r8, r0, lsl #16
2000822c:	fe003804 	vcmla.f16	d3, d0, d4[0], #0
20008230:	0000007f 	andeq	r0, r0, pc, ror r0

20008234 <witch3_gray_bits>:
20008234:	00000000 	andeq	r0, r0, r0
20008238:	00c00000 	sbceq	r0, r0, r0
2000823c:	00008000 	andeq	r8, r0, r0
20008240:	c0000080 	andgt	r0, r0, r0, lsl #1
20008244:	01c00000 	biceq	r0, r0, r0
	...
20008258:	e0000180 	and	r0, r0, r0, lsl #3
2000825c:	03f00001 	mvnseq	r0, #1
20008260:	0007f000 	andeq	pc, r7, r0
20008264:	000007f8 	strdeq	r0, [r0], -r8
20008268:	00000000 	andeq	r0, r0, r0

2000826c <witch3_light_bits>:
	...
20008284:	80000380 	andhi	r0, r0, r0, lsl #7
20008288:	03800003 	orreq	r0, r0, #3
	...

200082a4 <firstTime.4142>:
200082a4:	00000001 	andeq	r0, r0, r1

200082a8 <direction.4153>:
200082a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

200082ac <flame1_black_bits>:
200082ac:	80000000 	andhi	r0, r0, r0
200082b0:	00000008 	andeq	r0, r0, r8
200082b4:	00004800 	andeq	r4, r0, r0, lsl #16
200082b8:	48004a08 	stmdami	r0, {r3, r9, fp, lr}
200082bc:	02400002 	subeq	r0, r0, #2
200082c0:	00541400 	subseq	r1, r4, r0, lsl #8
200082c4:	22005040 	andcs	r5, r0, #64	; 0x40
200082c8:	a01200b0 	ldrhge	r0, [r2], -r0	; <UNPREDICTABLE>
200082cc:	00011200 	andeq	r1, r1, r0, lsl #4
200082d0:	01001000 	mrseq	r1, (UNDEF: 0)
200082d4:	01000000 	mrseq	r0, (UNDEF: 0)
200082d8:	00210001 	eoreq	r0, r1, r1
200082dc:	40000042 	andmi	r0, r0, r2, asr #32
200082e0:	20410000 	subcs	r0, r1, r0
200082e4:	01200101 			; <UNDEFINED> instruction: 0x01200101
200082e8:	12012001 	andne	r2, r1, #1
200082ec:	90400000 	subls	r0, r0, r0
200082f0:	00800200 	addeq	r0, r0, r0, lsl #4
200082f4:	04008000 	streq	r8, [r0], #-0
200082f8:	20080001 	andcs	r0, r8, r1
200082fc:	00080800 	andeq	r0, r8, r0, lsl #16
	...
20008308:	00001000 	andeq	r1, r0, r0
2000830c:	3200001c 	andcc	r0, r0, #28
20008310:	002f0000 	eoreq	r0, pc, r0
20008314:	00003f00 	andeq	r3, r0, r0, lsl #30
20008318:	01000007 	tsteq	r0, r7
2000831c:	00010000 	andeq	r0, r1, r0
20008320:	00000000 	andeq	r0, r0, r0

20008324 <flame1_gray_bits>:
	...
20008344:	00080000 	andeq	r0, r8, r0
20008348:	00000000 	andeq	r0, r0, r0
2000834c:	00900008 	addseq	r0, r0, r8
20008350:	0002a000 	andeq	sl, r2, r0
20008354:	b0001bb0 			; <UNDEFINED> instruction: 0xb0001bb0
20008358:	0fb0001f 	svceq	0x00b0001f
2000835c:	000fe000 	andeq	lr, pc, r0
20008360:	e0000fe0 	and	r0, r0, r0, ror #31
20008364:	0fa0000f 	svceq	0x00a0000f
20008368:	0007e000 	andeq	lr, r7, r0
2000836c:	800003c0 	andhi	r0, r0, r0, asr #7
20008370:	07c00002 	strbeq	r0, [r0, r2]
20008374:	00078000 	andeq	r8, r7, r0
20008378:	80000380 	andhi	r0, r0, r0, lsl #7
2000837c:	09800003 	stmibeq	r0, {r0, r1}
20008380:	00018000 	andeq	r8, r1, r0
20008384:	0c000000 	stceq	0, cr0, [r0], {-0}
20008388:	00100000 	andseq	r0, r0, r0
	...

2000839c <flame1_light_bits>:
	...
200083a4:	00080000 	andeq	r0, r8, r0
200083a8:	80000080 	andhi	r0, r0, r0, lsl #1
200083ac:	0c88000c 	stceq	0, cr0, [r8], {12}
200083b0:	00098800 	andeq	r8, r9, r0, lsl #16
200083b4:	c8000db8 	stmdagt	r0, {r3, r4, r5, r7, r8, sl, fp}
200083b8:	5fe8004d 	svcpl	0x00e8004d
200083bc:	00f6e800 	rscseq	lr, r6, r0, lsl #16
200083c0:	fc00eff8 	stc2	15, cr14, [r0], {248}	; 0xf8
200083c4:	fe6c00f7 	mcr2	0, 3, r0, cr12, cr7, {7}
200083c8:	00dc5c00 	sbcseq	r5, ip, r0, lsl #24
200083cc:	0c00e40c 	cfstrseq	mvf14, [r0], {12}
200083d0:	d00e01e0 	andle	r0, lr, r0, ror #3
200083d4:	00d01e00 	sbcseq	r1, r0, r0, lsl #28
200083d8:	0c00d01a 	stceq	0, cr13, [r0], {26}
200083dc:	600e00f0 	strdvs	r0, [lr], -r0	; <UNPREDICTABLE>
200083e0:	00681c00 	rsbeq	r1, r8, r0, lsl #24
200083e4:	70003c3c 	andvc	r3, r0, ip, lsr ip
200083e8:	1830003c 	ldmdane	r0!, {r2, r3, r4, r5}
200083ec:	00307000 	eorseq	r7, r0, r0
200083f0:	78003c78 	stmdavc	r0, {r3, r4, r5, r6, sl, fp, ip, sp}
200083f4:	16700038 			; <UNDEFINED> instruction: 0x16700038
200083f8:	001e6000 	andseq	r6, lr, r0
200083fc:	c0000fe0 	andgt	r0, r0, r0, ror #31
20008400:	0fc0000f 	svceq	0x00c0000f
	...

20008414 <flame2_black_bits>:
20008414:	00000000 	andeq	r0, r0, r0
20008418:	40040042 	andmi	r0, r4, r2, asr #32
2000841c:	00044400 	andeq	r4, r4, r0, lsl #8
20008420:	04000440 	streq	r0, [r0], #-1088	; 0xfffffbc0
20008424:	22a00022 	adccs	r0, r0, #34	; 0x22
20008428:	00aaa800 	adceq	sl, sl, r0, lsl #16
2000842c:	00009108 	andeq	r9, r0, r8, lsl #2
20008430:	84800090 	strhi	r0, [r0], #144	; 0x90
20008434:	00040400 	andeq	r0, r4, r0, lsl #8
20008438:	20008004 	andcs	r8, r0, r4
2000843c:	00850090 	umulleq	r0, r5, r0, r0
20008440:	01000000 	mrseq	r0, (UNDEF: 0)
20008444:	20000002 	andcs	r0, r0, r2
20008448:	84200084 	strthi	r0, [r0], #-132	; 0xffffff7c
2000844c:	00000200 	andeq	r0, r0, r0, lsl #4
20008450:	02004004 	andeq	r4, r0, #4
20008454:	a00a0080 	andge	r0, sl, r0, lsl #1
20008458:	00240800 	eoreq	r0, r4, r0, lsl #16
2000845c:	08002048 	stmdaeq	r0, {r3, r6, sp}
20008460:	00000000 	andeq	r0, r0, r0
20008464:	00101000 	andseq	r1, r0, r0
20008468:	00004050 	andeq	r4, r0, r0, asr r0
2000846c:	10000040 	andne	r0, r0, r0, asr #32
20008470:	00001000 	andeq	r1, r0, r0
20008474:	3200001c 	andcc	r0, r0, #28
20008478:	002f0000 	eoreq	r0, pc, r0
2000847c:	00003f00 	andeq	r3, r0, r0, lsl #30
20008480:	01000007 	tsteq	r0, r7
20008484:	00010000 	andeq	r0, r1, r0
20008488:	00000000 	andeq	r0, r0, r0

2000848c <flame2_gray_bits>:
	...
200084ac:	00002000 	andeq	r2, r0, r0
200084b0:	40000010 	andmi	r0, r0, r0, lsl r0
200084b4:	27600002 	strbcs	r0, [r0, -r2]!
200084b8:	001fe000 	andseq	lr, pc, r0
200084bc:	c0000fe0 	andgt	r0, r0, r0, ror #31
200084c0:	0bc00003 	bleq	1f0084d4 <startup-0xff7b2c>
200084c4:	000fe000 	andeq	lr, pc, r0
200084c8:	c0000fd0 	ldrdgt	r0, [r0], -r0	; <UNPREDICTABLE>
200084cc:	0fc0000f 	svceq	0x00c0000f
200084d0:	0003e000 	andeq	lr, r3, r0
200084d4:	c00007a0 	andgt	r0, r0, r0, lsr #15
200084d8:	0b800007 	bleq	1e0084fc <startup-0x1ff7b04>
200084dc:	0003c000 	andeq	ip, r3, r0
200084e0:	80000380 	andhi	r0, r0, r0, lsl #7
200084e4:	03800003 	orreq	r0, r0, #3
200084e8:	00000000 	andeq	r0, r0, r0
200084ec:	0c000000 	stceq	0, cr0, [r0], {-0}
200084f0:	00100000 	andseq	r0, r0, r0
	...

20008504 <flame2_light_bits>:
	...
2000850c:	00020000 	andeq	r0, r2, r0
20008510:	20000220 	andcs	r0, r0, r0, lsr #4
20008514:	05400005 	strbeq	r0, [r0, #-5]
20008518:	00054000 	andeq	r4, r5, r0
2000851c:	fc0026f4 	stc2	6, cr2, [r0], {244}	; 0xf4
20008520:	137c0027 	cmnne	ip, #39	; 0x27
20008524:	00fbda00 	rscseq	sp, fp, r0, lsl #20
20008528:	9e007fea 	cdpls	15, 0, cr7, cr0, cr10, {7}
2000852c:	d818006d 	ldmdale	r8, {r0, r2, r3, r5, r6}
20008530:	00e01c00 	rsceq	r1, r0, r0, lsl #24
20008534:	1e00f01c 	mcrne	0, 0, pc, cr0, cr12, {0}	; <UNPREDICTABLE>
20008538:	701e0078 	andsvc	r0, lr, r8, ror r0
2000853c:	00f01c00 	rscseq	r1, r0, r0, lsl #24
20008540:	3c003028 	stccc	0, cr3, [r0], {40}	; 0x28
20008544:	50240070 	eorpl	r0, r4, r0, ror r0
20008548:	01d81001 	bicseq	r1, r8, r1
2000854c:	30004810 	andcc	r4, r0, r0, lsl r8
20008550:	34780038 	ldrbtcc	r0, [r8], #-56	; 0xffffffc8
20008554:	002c2000 	eoreq	r2, ip, r0
20008558:	50003c20 	andpl	r3, r0, r0, lsr #24
2000855c:	0c700038 	ldcleq	0, cr0, [r0], #-224	; 0xffffff20
20008560:	001fe000 	andseq	lr, pc, r0
20008564:	c0000fe0 	andgt	r0, r0, r0, ror #31
20008568:	0fc0000f 	svceq	0x00c0000f
	...

2000857c <flame3_black_bits>:
2000857c:	02000400 	andeq	r0, r0, #0, 8
20008580:	04000000 	streq	r0, [r0], #-0
20008584:	00044000 	andeq	r4, r4, r0
20008588:	a4000404 	strge	r0, [r0], #-1028	; 0xfffffbfc
2000858c:	52a00098 	adcpl	r0, r0, #152	; 0x98
20008590:	01028a00 	tsteq	r2, r0, lsl #20
20008594:	00012028 	andeq	r2, r1, r8, lsr #32
20008598:	00020100 	andeq	r0, r2, r0, lsl #2
2000859c:	01028200 	mrseq	r8, R10_usr
200085a0:	80000092 	mulhi	r0, r2, r0
200085a4:	00810000 	addeq	r0, r1, r0
200085a8:	01400901 	cmpeq	r0, r1, lsl #18
200085ac:	01004008 	tsteq	r0, r8
200085b0:	02000002 	andeq	r0, r0, #2
200085b4:	01004001 	tsteq	r0, r1
200085b8:	02000002 	andeq	r0, r0, #2
200085bc:	a1000000 	mrsge	r0, (UNDEF: 0)
200085c0:	00002400 	andeq	r2, r0, r0, lsl #8
200085c4:	10004000 	andne	r4, r0, r0
200085c8:	40000044 	andmi	r0, r0, r4, asr #32
200085cc:	00400800 	subeq	r0, r0, r0, lsl #16
200085d0:	00000808 	andeq	r0, r0, r8, lsl #16
200085d4:	00000000 	andeq	r0, r0, r0
200085d8:	00001000 	andeq	r1, r0, r0
200085dc:	3200001c 	andcc	r0, r0, #28
200085e0:	002f0000 	eoreq	r0, pc, r0
200085e4:	00003f00 	andeq	r3, r0, r0, lsl #30
200085e8:	01000007 	tsteq	r0, r7
200085ec:	00010000 	andeq	r0, r1, r0
200085f0:	00000000 	andeq	r0, r0, r0

200085f4 <flame3_gray_bits>:
	...
20008614:	00002000 	andeq	r2, r0, r0
20008618:	00000040 	andeq	r0, r0, r0, asr #32
2000861c:	17600023 	strbne	r0, [r0, -r3, lsr #32]!
20008620:	0017e000 	andseq	lr, r7, r0
20008624:	e0000fe0 	and	r0, r0, r0, ror #31
20008628:	3de0003d 	stclcc	0, cr0, [r0, #244]!	; 0xf4
2000862c:	001fa000 	andseq	sl, pc, r0
20008630:	f0001fe8 			; <UNDEFINED> instruction: 0xf0001fe8
20008634:	0ee0000f 	cdpeq	0, 14, cr0, cr0, cr15, {0}
20008638:	000fc000 	andeq	ip, pc, r0
2000863c:	c0000fe0 	andgt	r0, r0, r0, ror #31
20008640:	17c0000b 	strbne	r0, [r0, fp]
20008644:	00078000 	andeq	r8, r7, r0
20008648:	80000780 	andhi	r0, r0, r0, lsl #15
2000864c:	03400003 	movteq	r0, #3
20008650:	00030000 	andeq	r0, r3, r0
20008654:	0c000000 	stceq	0, cr0, [r0], {-0}
20008658:	00100000 	andseq	r0, r0, r0
	...

2000866c <flame3_light_bits>:
2000866c:	00000000 	andeq	r0, r0, r0
20008670:	00400000 	subeq	r0, r0, r0
20008674:	00020000 	andeq	r0, r2, r0
20008678:	40000240 	andmi	r0, r0, r0, asr #4
2000867c:	014c0002 	cmpeq	ip, r2
20008680:	00317400 	eorseq	r7, r1, r0, lsl #8
20008684:	fc0017d4 	stc2	7, cr1, [r0], {212}	; 0xd4
20008688:	bff8003f 	svclt	0x00f8003f
2000868c:	00fd5800 	rscseq	r5, sp, r0, lsl #16
20008690:	7800ff28 	stmdavc	r0, {r3, r5, r8, r9, sl, fp, ip, sp, lr, pc}
20008694:	e81c00dc 	ldmda	ip, {r2, r3, r4, r6, r7}
20008698:	00a81600 	adceq	r1, r8, r0, lsl #12
2000869c:	1e00b016 	mcrne	0, 0, fp, cr0, cr6, {0}
200086a0:	c01e00c0 	andsgt	r0, lr, r0, asr #1
200086a4:	00e01c00 	rsceq	r1, r0, r0, lsl #24
200086a8:	0c00c014 	stceq	0, cr12, [r0], {20}
200086ac:	401c00f0 	ldrshmi	r0, [ip], -r0	; <UNPREDICTABLE>
200086b0:	00f01800 	rscseq	r1, r0, r0, lsl #16
200086b4:	2800b01c 	stmdacs	r0, {r2, r3, r4, ip, sp, pc}
200086b8:	283c0030 	ldmdacs	ip!, {r4, r5}
200086bc:	00385400 	eorseq	r5, r8, r0, lsl #8
200086c0:	70003070 	andvc	r3, r0, r0, ror r0
200086c4:	3cb0001c 	ldccc	0, cr0, [r0], #112	; 0x70
200086c8:	003ce000 	eorseq	lr, ip, r0
200086cc:	c0001fe0 	andgt	r1, r0, r0, ror #31
200086d0:	0fc0000f 	svceq	0x00c0000f
	...

200086e4 <flame4_black_bits>:
200086e4:	00000100 	andeq	r0, r0, r0, lsl #2
200086e8:	10820000 	addne	r0, r2, r0
200086ec:	00008000 	andeq	r8, r0, r0
200086f0:	000028c8 	andeq	r2, r0, r8, asr #17
200086f4:	05540004 	ldrbeq	r0, [r4, #-4]
200086f8:	00a55400 	adceq	r5, r5, r0, lsl #8
200086fc:	08002420 	stmdaeq	r0, {r5, sl, sp}
20008700:	50000082 	andpl	r0, r0, r2, lsl #1
20008704:	01000400 	tsteq	r0, r0, lsl #8
20008708:	00010444 	andeq	r0, r1, r4, asr #8
2000870c:	84120124 	ldrhi	r0, [r2], #-292	; 0xfffffedc
20008710:	00841000 	addeq	r1, r4, r0
20008714:	01008001 	tsteq	r0, r1
20008718:	200100a0 	andcs	r0, r1, r0, lsr #1
2000871c:	01000000 	mrseq	r0, (UNDEF: 0)
20008720:	00000022 	andeq	r0, r0, r2, lsr #32
20008724:	80020000 	andhi	r0, r2, r0
20008728:	00808a00 	addeq	r8, r0, r0, lsl #20
2000872c:	04004000 	streq	r4, [r0], #-0
20008730:	20440000 	subcs	r0, r4, r0
20008734:	00200000 	eoreq	r0, r0, r0
20008738:	00000008 	andeq	r0, r0, r8
2000873c:	00000010 	andeq	r0, r0, r0, lsl r0
20008740:	00001000 	andeq	r1, r0, r0
20008744:	3200001c 	andcc	r0, r0, #28
20008748:	002f0000 	eoreq	r0, pc, r0
2000874c:	00003f00 	andeq	r3, r0, r0, lsl #30
20008750:	01000007 	tsteq	r0, r7
20008754:	00010000 	andeq	r0, r1, r0
20008758:	00000000 	andeq	r0, r0, r0

2000875c <flame4_gray_bits>:
	...
20008780:	40000000 	andmi	r0, r0, r0
20008784:	08200010 	stmdaeq	r0!, {r4}
20008788:	0008c000 	andeq	ip, r8, r0
2000878c:	f0000fc4 			; <UNDEFINED> instruction: 0xf0000fc4
20008790:	1ff80007 	svcne	0x00f80007
20008794:	001ff000 	andseq	pc, pc, r0
20008798:	f0001fd0 			; <UNDEFINED> instruction: 0xf0001fd0
2000879c:	1fc0001f 	svcne	0x00c0001f
200087a0:	001f5000 	andseq	r5, pc, r0
200087a4:	e0000fe0 	and	r0, r0, r0, ror #31
200087a8:	07800007 	streq	r0, [r0, r7]
200087ac:	00078000 	andeq	r8, r7, r0
200087b0:	00000780 	andeq	r0, r0, r0, lsl #15
200087b4:	0300000b 	movweq	r0, #11
200087b8:	00010000 	andeq	r0, r1, r0
200087bc:	0c000000 	stceq	0, cr0, [r0], {-0}
200087c0:	00100000 	andseq	r0, r0, r0
	...

200087d4 <flame4_light_bits>:
	...
200087dc:	00040000 	andeq	r0, r4, r0
200087e0:	40000400 	andmi	r0, r0, r0, lsl #8
200087e4:	c8800048 	stmgt	r0, {r3, r6}
200087e8:	00488000 	subeq	r8, r8, r0
200087ec:	e4004ac4 	str	r4, [r0], #-2756	; 0xfffff53c
200087f0:	2fec007d 	svccs	0x00ec007d
200087f4:	00fff800 	rscseq	pc, pc, r0, lsl #16
200087f8:	be00fbb8 	vmovlt.16	d16[0], pc
200087fc:	73cc00cb 	bicvc	r0, ip, #203	; 0xcb
20008800:	00732e00 	rsbseq	r2, r3, r0, lsl #28
20008804:	0e00703a 	mcreq	0, 0, r7, cr0, cr10, {1}
20008808:	c0060050 	andgt	r0, r6, r0, asr r0
2000880c:	00e00e00 	rsceq	r0, r0, r0, lsl #28
20008810:	0e00a00c 	cdpeq	0, 0, cr10, cr0, cr12, {0}
20008814:	601c00e0 	andsvs	r0, ip, r0, ror #1
20008818:	00602400 	rsbeq	r2, r0, r0, lsl #8
2000881c:	1800301c 	stmdane	r0, {r2, r3, r4, ip, sp}
20008820:	50380078 	eorspl	r0, r8, r8, ror r0
20008824:	00587000 	subseq	r7, r8, r0
20008828:	f0003830 			; <UNDEFINED> instruction: 0xf0003830
2000882c:	1cf00024 	ldclne	0, cr0, [r0], #144	; 0x90
20008830:	001ee000 	andseq	lr, lr, r0
20008834:	c0001fe0 	andgt	r1, r0, r0, ror #31
20008838:	0fc0000f 	svceq	0x00c0000f
	...

2000884c <firstTime.4079>:
2000884c:	00000001 	andeq	r0, r0, r1

20008850 <indoors_black_bits>:
20008850:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20008860:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20008870:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20008880:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20008890:	00000100 	andeq	r0, r0, r0, lsl #2
	...
200088a0:	00000100 	andeq	r0, r0, r0, lsl #2
	...
200088b0:	00000280 	andeq	r0, r0, r0, lsl #5
	...
200088c0:	00000440 	andeq	r0, r0, r0, asr #8
	...
200088d0:	00002aa8 	andeq	r2, r0, r8, lsr #21
	...
200088e0:	00001290 	muleq	r0, r0, r2
	...
200088f0:	00002c68 	andeq	r2, r0, r8, ror #24
	...
20008900:	00002008 	andeq	r2, r0, r8
	...
20008910:	000027c8 	andeq	r2, r0, r8, asr #15
	...
20008920:	00001ff0 	strdeq	r1, [r0], -r0
	...
20008930:	00000d60 	andeq	r0, r0, r0, ror #26
	...
200089a0:	f7fbfe00 			; <UNDEFINED> instruction: 0xf7fbfe00
200089a4:	7fbfdfef 	svcvc	0x00bfdfef
200089a8:	fbfdfeff 	blx	1ff885ae <startup-0x77a52>
200089ac:	00ff703f 	rscseq	r7, pc, pc, lsr r0	; <UNPREDICTABLE>
200089b0:	0c060200 	sfmeq	f0, 4, [r6], {-0}
200089b4:	c0603018 	rsbgt	r3, r0, r8, lsl r0
200089b8:	06030180 	streq	r0, [r3], -r0, lsl #3
200089bc:	0080d02c 	addeq	sp, r0, ip, lsr #32
200089c0:	0c060200 	sfmeq	f0, 4, [r6], {-0}
200089c4:	c0603018 	rsbgt	r3, r0, r8, lsl r0
200089c8:	06030180 	streq	r0, [r3], -r0, lsl #3
200089cc:	0080d02c 	addeq	sp, r0, ip, lsr #32
200089d0:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200089d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200089d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200089dc:	00ffdfef 	rscseq	sp, pc, pc, ror #31
	...
200089ec:	000050e8 	andeq	r5, r0, r8, ror #1
	...
200089fc:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
20008a0c:	00005028 	andeq	r5, r0, r8, lsr #32
	...
20008a1c:	00005028 	andeq	r5, r0, r8, lsr #32
	...
20008a2c:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
20008a3c:	03f050e8 	mvnseq	r5, #232	; 0xe8
	...
20008a4c:	0c0c5fe8 	stceq	15, cr5, [ip], {232}	; 0xe8
	...
20008a5c:	10025028 	andne	r5, r2, r8, lsr #32
	...
20008a6c:	13fa5028 	mvnsne	r5, #40	; 0x28
	...
20008a7c:	100a5fe8 	andne	r5, sl, r8, ror #31
	...
20008a8c:	100a50e8 	andne	r5, sl, r8, ror #1
	...
20008a9c:	100a5fe8 	andne	r5, sl, r8, ror #31
	...
20008aac:	100a5028 	andne	r5, sl, r8, lsr #32
	...
20008abc:	100a5028 	andne	r5, sl, r8, lsr #32
	...
20008acc:	100a5fe8 	andne	r5, sl, r8, ror #31
	...
20008adc:	100a50e8 	andne	r5, sl, r8, ror #1
	...
20008aec:	100a5ee8 	andne	r5, sl, r8, ror #29
	...
20008afc:	100a5028 	andne	r5, sl, r8, lsr #32
	...
20008b0c:	100a5028 	andne	r5, sl, r8, lsr #32
	...
20008b1c:	10025fe8 	andne	r5, r2, r8, ror #31
	...
20008b2c:	0ffc50e8 	svceq	0x00fc50e8
	...
20008b3c:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
20008b4c:	00005028 	andeq	r5, r0, r8, lsr #32
	...
20008b5c:	00005028 	andeq	r5, r0, r8, lsr #32
	...
20008b6c:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
20008b7c:	000050e8 	andeq	r5, r0, r8, ror #1
	...
20008b8c:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
20008b9c:	00007028 	andeq	r7, r0, r8, lsr #32
	...
20008bac:	00007028 	andeq	r7, r0, r8, lsr #32
	...
20008bbc:	00007038 	andeq	r7, r0, r8, lsr r0
20008bc0:	f7fbfdfe 			; <UNDEFINED> instruction: 0xf7fbfdfe
20008bc4:	7fbfdfef 	svcvc	0x00bfdfef
20008bc8:	fbfdfeff 	blx	1ff887ce <startup-0x77832>
20008bcc:	bfbfeff7 	svclt	0x00bfeff7
20008bd0:	0c060301 	stceq	3, cr0, [r6], {1}
20008bd4:	c0603018 	rsbgt	r3, r0, r8, lsl r0
20008bd8:	06030180 	streq	r0, [r3], -r0, lsl #3
20008bdc:	6030180c 	eorsvs	r1, r0, ip, lsl #16
20008be0:	0c060301 	stceq	3, cr0, [r6], {1}
20008be4:	c0603018 	rsbgt	r3, r0, r8, lsl r0
20008be8:	06030180 	streq	r0, [r3], -r0, lsl #3
20008bec:	6030180c 	eorsvs	r1, r0, ip, lsl #16
20008bf0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008bf4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008bf8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008bfc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008c00:	c0603018 	rsbgt	r3, r0, r8, lsl r0
20008c04:	06030180 	streq	r0, [r3], -r0, lsl #3
20008c08:	6030180c 	eorsvs	r1, r0, ip, lsl #16
20008c0c:	030180c0 	movweq	r8, #4288	; 0x10c0
20008c10:	c0603018 	rsbgt	r3, r0, r8, lsl r0
20008c14:	06030180 	streq	r0, [r3], -r0, lsl #3
20008c18:	6030180c 	eorsvs	r1, r0, ip, lsl #16
20008c1c:	030180c0 	movweq	r8, #4288	; 0x10c0
20008c20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008c24:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008c28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008c2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008c30:	030180c0 	movweq	r8, #4288	; 0x10c0
20008c34:	30180c06 	andscc	r0, r8, r6, lsl #24
20008c38:	0180c060 	orreq	ip, r0, r0, rrx
20008c3c:	180c0603 	stmdane	ip, {r0, r1, r9, sl}
20008c40:	030180c0 	movweq	r8, #4288	; 0x10c0
20008c44:	30180c06 	andscc	r0, r8, r6, lsl #24
20008c48:	0180c060 	orreq	ip, r0, r0, rrx
20008c4c:	180c0603 	stmdane	ip, {r0, r1, r9, sl}

20008c50 <indoors_gray_bits>:
	...
20008cb0:	00001110 	andeq	r1, r0, r0, lsl r1
	...
20008cc0:	00001090 	muleq	r0, r0, r0
	...
20008cf0:	00000390 	muleq	r0, r0, r3
	...
20008d00:	00001340 	andeq	r1, r0, r0, asr #6
	...
20008d10:	00000830 	andeq	r0, r0, r0, lsr r8
	...
20008da0:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
20008da4:	80402010 	subhi	r2, r0, r0, lsl r0
20008da8:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
20008dac:	00008000 	andeq	r8, r0, r0
20008db0:	b0582c00 	subslt	r2, r8, r0, lsl #24
20008db4:	0582c160 	streq	ip, [r2, #352]	; 0x160
20008db8:	582c160b 	stmdapl	ip!, {r0, r1, r3, r9, sl, ip}
20008dbc:	010b0000 	mrseq	r0, (UNDEF: 11)
20008dc0:	71b8dc00 			; <UNDEFINED> instruction: 0x71b8dc00
20008dc4:	1b8dc6e3 	blne	1e37a958 <startup-0x1c856a8>
20008dc8:	b8dc6e37 	ldmlt	ip, {r0, r1, r2, r4, r5, r9, sl, fp, sp, lr}^
20008dcc:	01370001 	teqeq	r7, r1
	...
20008ddc:	01000000 	mrseq	r0, (UNDEF: 0)
20008de0:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
20008de4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008de8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008dec:	01ff8007 	mvnseq	r8, r7
	...
20008dfc:	00008000 	andeq	r8, r0, r0
	...
20008e0c:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20008e1c:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20008e2c:	00008000 	andeq	r8, r0, r0
	...
20008e3c:	00008000 	andeq	r8, r0, r0
	...
20008e4c:	00008000 	andeq	r8, r0, r0
	...
20008e5c:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20008e6c:	20008180 	andcs	r8, r0, r0, lsl #3
	...
20008e7c:	20808000 	addcs	r8, r0, r0
	...
20008e8c:	20c08100 	sbccs	r8, r0, r0, lsl #2
	...
20008e9c:	21e08000 	mvncs	r8, r0
	...
20008eac:	2bf08180 	blcs	1fc294b4 <startup-0x3d6b4c>
	...
20008ebc:	25c08180 	strbcs	r8, [r0, #384]	; 0x180
	...
20008ecc:	29e08000 	stmibcs	r0!, {pc}^
	...
20008edc:	2bc08100 	blcs	1f0292e4 <startup-0xfd6d1c>
	...
20008eec:	20c08110 	sbccs	r8, r0, r0, lsl r1
	...
20008efc:	28e0a190 	stmiacs	r0!, {r4, r7, r8, sp, pc}^
	...
20008f0c:	2bf08180 	blcs	1fc29514 <startup-0x3d6aec>
	...
20008f1c:	28008000 	stmdacs	r0, {pc}
	...
20008f2c:	3000a010 	andcc	sl, r0, r0, lsl r0
	...
20008f3c:	1fc0a000 	svcne	0x00c0a000
	...
20008f4c:	0000a180 	andeq	sl, r0, r0, lsl #3
	...
20008f5c:	00008190 	muleq	r0, r0, r1
	...
20008f6c:	00008010 	andeq	r8, r0, r0, lsl r0
	...
20008f7c:	00008110 	andeq	r8, r0, r0, lsl r1
	...
20008f8c:	0000a010 	andeq	sl, r0, r0, lsl r0
	...
20008f9c:	00008190 	muleq	r0, r0, r1
	...
20008fac:	00008190 	muleq	r0, r0, r1
	...
20008fbc:	00008180 	andeq	r8, r0, r0, lsl #3
20008fc0:	08040201 	stmdaeq	r4, {r0, r9}
20008fc4:	80402010 	subhi	r2, r0, r0, lsl r0
20008fc8:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
20008fcc:	40401008 	submi	r1, r0, r8
20008fd0:	b0582c16 	subslt	r2, r8, r6, lsl ip
20008fd4:	0582c160 	streq	ip, [r2, #352]	; 0x160
20008fd8:	582c160b 	stmdapl	ip!, {r0, r1, r3, r9, sl, ip}
20008fdc:	82c160b0 	sbchi	r6, r1, #176	; 0xb0
20008fe0:	71b8dc6e 			; <UNDEFINED> instruction: 0x71b8dc6e
20008fe4:	1b8dc6e3 	blne	1e37ab78 <startup-0x1c85488>
20008fe8:	b8dc6e37 	ldmlt	ip, {r0, r1, r2, r4, r5, r9, sl, fp, sp, lr}^
20008fec:	8dc6e371 	stclhi	3, cr14, [r6, #452]	; 0x1c4
	...
20009000:	0582c160 	streq	ip, [r2, #352]	; 0x160
20009004:	582c160b 	stmdapl	ip!, {r0, r1, r3, r9, sl, ip}
20009008:	82c160b0 	sbchi	r6, r1, #176	; 0xb0
2000900c:	2c160b05 			; <UNDEFINED> instruction: 0x2c160b05
20009010:	1b8dc6e3 	blne	1e37aba4 <startup-0x1c8545c>
20009014:	b8dc6e37 	ldmlt	ip, {r0, r1, r2, r4, r5, r9, sl, fp, sp, lr}^
20009018:	8dc6e371 	stclhi	3, cr14, [r6, #452]	; 0x1c4
2000901c:	dc6e371b 	stclle	7, cr3, [lr], #-108	; 0xffffff94
	...
20009030:	2c160b05 			; <UNDEFINED> instruction: 0x2c160b05
20009034:	c160b058 	qdsubgt	fp, r8, r0
20009038:	160b0582 	strne	r0, [fp], -r2, lsl #11
2000903c:	60b0582c 	adcsvs	r5, r0, ip, lsr #16
20009040:	dc6e371b 	stclle	7, cr3, [lr], #-108	; 0xffffff94
20009044:	c6e371b8 			; <UNDEFINED> instruction: 0xc6e371b8
20009048:	6e371b8d 	vaddvs.f64	d1, d23, d13
2000904c:	e371b8dc 	cmn	r1, #220, 16	; 0xdc0000

20009050 <indoors_light_bits>:
	...
20009090:	00001010 	andeq	r1, r0, r0, lsl r0
	...
200090c0:	00000300 	andeq	r0, r0, r0, lsl #6
	...
200090d0:	00001110 	andeq	r1, r0, r0, lsl r1
	...
200090e0:	00000100 	andeq	r0, r0, r0, lsl #2
	...
200090f0:	00001000 	andeq	r1, r0, r0
	...
20009100:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
	...
20009110:	00001000 	andeq	r1, r0, r0
	...
200091b0:	43a1d000 			; <UNDEFINED> instruction: 0x43a1d000
200091b4:	3a1d0e87 	bcc	2074cbd8 <firstTime.4040+0x742b14>
200091b8:	a1d0e874 	bicsge	lr, r0, r4, ror r8
200091bc:	00742013 	rsbseq	r2, r4, r3, lsl r0
200091c0:	82412000 	subhi	r2, r1, #0
200091c4:	24120904 	ldrcs	r0, [r2], #-2308	; 0xfffff6fc
200091c8:	41209048 			; <UNDEFINED> instruction: 0x41209048
200091cc:	00482012 	subeq	r2, r8, r2, lsl r0
	...
200091dc:	00002010 	andeq	r2, r0, r0, lsl r0
	...
200091ec:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
200091fc:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000920c:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000921c:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000922c:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000923c:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
2000924c:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000925c:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000926c:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000927c:	03702010 	cmneq	r0, #16
	...
2000928c:	03302e10 	teqeq	r0, #16, 28	; 0x100
	...
2000929c:	02102010 	andseq	r2, r0, #16
	...
200092ac:	00002010 	andeq	r2, r0, r0, lsl r0
	...
200092bc:	02302010 	eorseq	r2, r0, #16
	...
200092cc:	02102010 	andseq	r2, r0, #16
	...
200092dc:	00302e10 	eorseq	r2, r0, r0, lsl lr
	...
200092ec:	03302000 	teqeq	r0, #0
	...
200092fc:	03100000 	tsteq	r0, #0
	...
2000930c:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000931c:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000932c:	00000f00 	andeq	r0, r0, r0, lsl #30
	...
2000933c:	00000010 	andeq	r0, r0, r0, lsl r0
	...
2000934c:	00000010 	andeq	r0, r0, r0, lsl r0
	...
2000935c:	00002000 	andeq	r2, r0, r0
	...
2000936c:	00002000 	andeq	r2, r0, r0
	...
2000937c:	00002e00 	andeq	r2, r0, r0, lsl #28
	...
200093d0:	43a1d0e8 			; <UNDEFINED> instruction: 0x43a1d0e8
200093d4:	3a1d0e87 	bcc	2074cdf8 <firstTime.4040+0x742d34>
200093d8:	a1d0e874 	bicsge	lr, r0, r4, ror r8
200093dc:	1d0e8743 	stcne	7, cr8, [lr, #-268]	; 0xfffffef4
200093e0:	82412090 	subhi	r2, r1, #144	; 0x90
200093e4:	24120904 	ldrcs	r0, [r2], #-2308	; 0xfffff6fc
200093e8:	41209048 			; <UNDEFINED> instruction: 0x41209048
200093ec:	12090482 	andne	r0, r9, #-2113929216	; 0x82000000
	...
20009400:	3a1d0e87 	bcc	2074ce24 <firstTime.4040+0x742d60>
20009404:	a1d0e874 	bicsge	lr, r0, r4, ror r8
20009408:	1d0e8743 	stcne	7, cr8, [lr, #-268]	; 0xfffffef4
2000940c:	d0e8743a 	rscle	r7, r8, sl, lsr r4
20009410:	24120904 	ldrcs	r0, [r2], #-2308	; 0xfffff6fc
20009414:	41209048 			; <UNDEFINED> instruction: 0x41209048
20009418:	12090482 	andne	r0, r9, #-2113929216	; 0x82000000
2000941c:	20904824 	addscs	r4, r0, r4, lsr #16
	...
20009430:	d0e8743a 	rscle	r7, r8, sl, lsr r4
20009434:	0e8743a1 	cdpeq	3, 8, cr4, cr7, cr1, {5}
20009438:	e8743a1d 	ldmda	r4!, {r0, r2, r3, r4, r9, fp, ip, sp}^
2000943c:	8743a1d0 			; <UNDEFINED> instruction: 0x8743a1d0
20009440:	20904824 	addscs	r4, r0, r4, lsr #16
20009444:	09048241 	stmdbeq	r4, {r0, r6, r9, pc}
20009448:	90482412 	subls	r2, r8, r2, lsl r4
2000944c:	04824120 	streq	r4, [r2], #288	; 0x120

20009450 <firstTime.4040>:
20009450:	00000001 	andeq	r0, r0, r1

20009454 <indoors2_black_bits>:
20009454:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009458:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000945c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009460:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009464:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009468:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000946c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009470:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009474:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009478:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000947c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009480:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009484:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009488:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000948c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009490:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009494:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009498:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000949c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200094a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200094a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200094a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200094ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200094b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200094b4:	ffffeeef 			; <UNDEFINED> instruction: 0xffffeeef
200094b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200094bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200094c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200094c4:	ffffec6f 			; <UNDEFINED> instruction: 0xffffec6f
200094c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200094cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200094d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200094d4:	ffffeaaf 			; <UNDEFINED> instruction: 0xffffeaaf
200094d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200094dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200094e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200094e4:	fffff29f 			; <UNDEFINED> instruction: 0xfffff29f
200094e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200094ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200094f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200094f4:	ffffec6f 			; <UNDEFINED> instruction: 0xffffec6f
200094f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200094fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009500:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009504:	ffffe00f 			; <UNDEFINED> instruction: 0xffffe00f
20009508:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000950c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009510:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009514:	ffffe7cf 			; <UNDEFINED> instruction: 0xffffe7cf
20009518:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000951c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009520:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009524:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009528:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000952c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009530:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009534:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009538:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000953c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009540:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009544:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009548:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000954c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009550:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009554:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009558:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000955c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009560:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009564:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009568:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000956c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009570:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009574:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009578:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000957c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009580:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009584:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009588:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000958c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009590:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009594:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009598:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000959c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200095a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200095a4:	f7fbffff 			; <UNDEFINED> instruction: 0xf7fbffff
200095a8:	7fbfdfef 	svcvc	0x00bfdfef
200095ac:	fbfdfeff 	blx	1ff891b2 <startup-0x76e4e>
200095b0:	ffff7fff 			; <UNDEFINED> instruction: 0xffff7fff
200095b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200095b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200095bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200095c0:	feffdfef 	cdp2	15, 15, cr13, cr15, cr15, {7}
200095c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200095c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200095cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200095d0:	feffdfef 	cdp2	15, 15, cr13, cr15, cr15, {7}
200095d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200095d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200095dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200095e0:	feffdfef 	cdp2	15, 15, cr13, cr15, cr15, {7}
200095e4:	00000fff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
200095f0:	fe0050e8 	cdp2	0, 0, cr5, cr0, cr8, {7}
200095f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200095f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200095fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009600:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
20009604:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009608:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000960c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009610:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
20009614:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009618:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000961c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009620:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
20009624:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009628:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000962c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009630:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
20009634:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009638:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000963c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009640:	ffff50ef 			; <UNDEFINED> instruction: 0xffff50ef
20009644:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009648:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000964c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009650:	ec0d5fef 	stc	15, cr5, [sp], {239}	; 0xef
20009654:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009658:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000965c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009660:	f003502f 			; <UNDEFINED> instruction: 0xf003502f
20009664:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009668:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000966c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009670:	d3fb502f 	mvnsle	r5, #47	; 0x2f
20009674:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009678:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000967c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009680:	d00b5fef 	andle	r5, fp, pc, ror #31
20009684:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009688:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000968c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009690:	d00b50ef 	andle	r5, fp, pc, ror #1
20009694:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009698:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000969c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200096a0:	d00b5fef 	andle	r5, fp, pc, ror #31
200096a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200096a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200096ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200096b0:	d00b502f 	andle	r5, fp, pc, lsr #32
200096b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200096b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200096bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200096c0:	d00b502f 	andle	r5, fp, pc, lsr #32
200096c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200096c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200096cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200096d0:	d00b5fef 	andle	r5, fp, pc, ror #31
200096d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200096d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200096dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200096e0:	d00b50ef 	andle	r5, fp, pc, ror #1
200096e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200096e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200096ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200096f0:	d00b5eef 	andle	r5, fp, pc, ror #29
200096f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200096f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200096fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009700:	d00b502f 	andle	r5, fp, pc, lsr #32
20009704:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009708:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000970c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009710:	d00b502f 	andle	r5, fp, pc, lsr #32
20009714:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009718:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000971c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009720:	d0035fef 	andle	r5, r3, pc, ror #31
20009724:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009728:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000972c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009730:	cffd50ef 	svcgt	0x00fd50ef
20009734:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009738:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000973c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009740:	e03f5fef 	eors	r5, pc, pc, ror #31
20009744:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009748:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000974c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009750:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
20009754:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009758:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000975c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009760:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
20009764:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009768:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000976c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009770:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
20009774:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009778:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000977c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009780:	ffff50ef 			; <UNDEFINED> instruction: 0xffff50ef
20009784:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009788:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000978c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009790:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
20009794:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009798:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000979c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200097a0:	ffff7e6f 			; <UNDEFINED> instruction: 0xffff7e6f
200097a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200097a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200097ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200097b0:	ffff7e6f 			; <UNDEFINED> instruction: 0xffff7e6f
200097b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200097b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200097bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200097c0:	ffff7e7f 			; <UNDEFINED> instruction: 0xffff7e7f
200097c4:	f7fbfdfe 			; <UNDEFINED> instruction: 0xf7fbfdfe
200097c8:	7fbfdfef 	svcvc	0x00bfdfef
200097cc:	fbfdfeff 	blx	1ff893d2 <startup-0x76c2e>
200097d0:	bfbfeff7 	svclt	0x00bfeff7
200097d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200097d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200097dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200097e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200097e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200097e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200097ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200097f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200097f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200097f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200097fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009800:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009804:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009808:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000980c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009810:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009814:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009818:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000981c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009820:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009824:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009828:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000982c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009830:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009834:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009838:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000983c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009840:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009844:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009848:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000984c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009850:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20009854 <indoors2_gray_bits>:
	...
200098b4:	00001110 	andeq	r1, r0, r0, lsl r1
	...
200098c4:	00001090 	muleq	r0, r0, r0
	...
200098f4:	00000390 	muleq	r0, r0, r3
	...
20009904:	00001340 	andeq	r1, r0, r0, asr #6
	...
20009914:	00000830 	andeq	r0, r0, r0, lsr r8
	...
200099a4:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
200099a8:	80402010 	subhi	r2, r0, r0, lsl r0
200099ac:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
200099b0:	00008000 	andeq	r8, r0, r0
	...
200099c0:	01000000 	mrseq	r0, (UNDEF: 0)
	...
200099d0:	01000000 	mrseq	r0, (UNDEF: 0)
	...
200099e0:	01000000 	mrseq	r0, (UNDEF: 0)
200099e4:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
200099e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200099ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200099f0:	01ff8007 	mvnseq	r8, r7
	...
20009a00:	00008000 	andeq	r8, r0, r0
	...
20009a10:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20009a20:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20009a30:	00008000 	andeq	r8, r0, r0
	...
20009a40:	00008000 	andeq	r8, r0, r0
	...
20009a50:	00008000 	andeq	r8, r0, r0
	...
20009a60:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20009a70:	20008180 	andcs	r8, r0, r0, lsl #3
	...
20009a80:	20808000 	addcs	r8, r0, r0
	...
20009a90:	20c08100 	sbccs	r8, r0, r0, lsl #2
	...
20009aa0:	21e08000 	mvncs	r8, r0
	...
20009ab0:	2bf08180 	blcs	1fc2a0b8 <startup-0x3d5f48>
	...
20009ac0:	25c08180 	strbcs	r8, [r0, #384]	; 0x180
	...
20009ad0:	29e08000 	stmibcs	r0!, {pc}^
	...
20009ae0:	2bc08100 	blcs	1f029ee8 <startup-0xfd6118>
	...
20009af0:	20c08110 	sbccs	r8, r0, r0, lsl r1
	...
20009b00:	28e0a190 	stmiacs	r0!, {r4, r7, r8, sp, pc}^
	...
20009b10:	2bf08180 	blcs	1fc2a118 <startup-0x3d5ee8>
	...
20009b20:	28008000 	stmdacs	r0, {pc}
	...
20009b30:	3000a010 	andcc	sl, r0, r0, lsl r0
	...
20009b40:	1fc0a000 	svcne	0x00c0a000
	...
20009b50:	0000a180 	andeq	sl, r0, r0, lsl #3
	...
20009b60:	00008190 	muleq	r0, r0, r1
	...
20009b70:	00008010 	andeq	r8, r0, r0, lsl r0
	...
20009b80:	00008110 	andeq	r8, r0, r0, lsl r1
	...
20009b90:	0000a010 	andeq	sl, r0, r0, lsl r0
	...
20009ba0:	00008190 	muleq	r0, r0, r1
	...
20009bb0:	00008190 	muleq	r0, r0, r1
	...
20009bc0:	00008180 	andeq	r8, r0, r0, lsl #3
20009bc4:	08040201 	stmdaeq	r4, {r0, r9}
20009bc8:	80402010 	subhi	r2, r0, r0, lsl r0
20009bcc:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
20009bd0:	40401008 	submi	r1, r0, r8
	...

20009c54 <indoors2_light_bits>:
	...
20009cc4:	00000300 	andeq	r0, r0, r0, lsl #6
	...
20009cd4:	00001110 	andeq	r1, r0, r0, lsl r1
	...
20009ce4:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20009cf4:	00001000 	andeq	r1, r0, r0
	...
20009d04:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
	...
20009d14:	00001000 	andeq	r1, r0, r0
	...
20009dc0:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009dd0:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009de0:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009df0:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
20009e00:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009e10:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009e20:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009e30:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009e40:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
20009e50:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009e60:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009e70:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009e80:	03702010 	cmneq	r0, #16
	...
20009e90:	03302e10 	teqeq	r0, #16, 28	; 0x100
	...
20009ea0:	02102010 	andseq	r2, r0, #16
	...
20009eb0:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009ec0:	02302010 	eorseq	r2, r0, #16
	...
20009ed0:	02102010 	andseq	r2, r0, #16
	...
20009ee0:	00302e10 	eorseq	r2, r0, r0, lsl lr
	...
20009ef0:	03302000 	teqeq	r0, #0
	...
20009f00:	03100000 	tsteq	r0, #0
	...
20009f10:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009f20:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009f30:	00000f00 	andeq	r0, r0, r0, lsl #30
	...
20009f40:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20009f50:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20009f60:	00002000 	andeq	r2, r0, r0
	...
20009f70:	00002000 	andeq	r2, r0, r0
	...
20009f80:	00002e00 	andeq	r2, r0, r0, lsl #28
	...

2000a054 <firstTime.4040>:
2000a054:	00000001 	andeq	r0, r0, r1

2000a058 <trophy_black_bits>:
2000a058:	00d40028 	sbcseq	r0, r4, r8, lsr #32
2000a05c:	03fe01aa 	mvnseq	r0, #-2147483606	; 0x8000002a
2000a060:	02220401 	eoreq	r0, r2, #16777216	; 0x1000000
2000a064:	02220232 	eoreq	r0, r2, #536870915	; 0x20000003
2000a068:	00880124 	addeq	r0, r8, r4, lsr #2
2000a06c:	00500088 	subseq	r0, r0, r8, lsl #1
2000a070:	00880088 	addeq	r0, r8, r8, lsl #1
2000a074:	020201fc 	andeq	r0, r2, #252, 2	; 0x3f
2000a078:	00000202 	andeq	r0, r0, r2, lsl #4

2000a07c <trophy_gray_bits>:
	...
2000a084:	01000300 	mrseq	r0, LR_irq
2000a088:	01000100 	mrseq	r0, (UNDEF: 16)
2000a08c:	00000080 	andeq	r0, r0, r0, lsl #1
2000a090:	00000000 	andeq	r0, r0, r0
2000a094:	00400040 	subeq	r0, r0, r0, asr #32
2000a098:	01f00000 	mvnseq	r0, r0
2000a09c:	000001e8 	andeq	r0, r0, r8, ror #3

2000a0a0 <trophy_light_bits>:
2000a0a0:	00000000 	andeq	r0, r0, r0
2000a0a4:	00000050 	andeq	r0, r0, r0, asr r0
2000a0a8:	008800ec 	addeq	r0, r8, ip, ror #1
2000a0ac:	008800c0 	addeq	r0, r8, r0, asr #1
2000a0b0:	00600048 	rsbeq	r0, r0, r8, asr #32
2000a0b4:	00200060 	eoreq	r0, r0, r0, rrx
2000a0b8:	00200020 	eoreq	r0, r0, r0, lsr #32
2000a0bc:	000c0000 	andeq	r0, ip, r0
2000a0c0:	00000014 	andeq	r0, r0, r4, lsl r0

2000a0c4 <firstTime.4040>:
2000a0c4:	00000001 	andeq	r0, r0, r1
2000a0c8:	00202020 	eoreq	r2, r0, r0, lsr #32
2000a0cc:	41524b2a 	cmpmi	r2, sl, lsr #22
2000a0d0:	2a202a21 	bcs	2081495c <firstTime.4040+0x80a898>
2000a0d4:	2141524b 	cmpcs	r1, fp, asr #4
2000a0d8:	0000002a 	andeq	r0, r0, sl, lsr #32
2000a0dc:	734c4944 	movtvc	r4, #51524	; 0xc944
2000a0e0:	7469772d 	strbtvc	r7, [r9], #-1837	; 0xfffff8d3
2000a0e4:	73656863 	cmnvc	r5, #6488064	; 0x630000
2000a0e8:	76616820 	strbtvc	r6, [r1], -r0, lsr #16
2000a0ec:	00000065 	andeq	r0, r0, r5, rrx
2000a0f0:	20726f46 	rsbscs	r6, r2, r6, asr #30
2000a0f4:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
2000a0f8:	65697275 	strbvs	r7, [r9, #-629]!	; 0xfffffd8b
2000a0fc:	68742073 	ldmdavs	r4!, {r0, r1, r4, r5, r6, sp}^
2000a100:	00000065 	andeq	r0, r0, r5, rrx
2000a104:	20202020 	eorcs	r2, r0, r0, lsr #32
2000a108:	00000000 	andeq	r0, r0, r0
2000a10c:	6c696f63 	stclvs	15, cr6, [r9], #-396	; 0xfffffe74
2000a110:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
2000a114:	6566206e 	strbvs	r2, [r6, #-110]!	; 0xffffff92
2000a118:	002c7261 	eoreq	r7, ip, r1, ror #4
2000a11c:	74616874 	strbtvc	r6, [r1], #-2164	; 0xfffff78c
2000a120:	44206120 	strtmi	r6, [r0], #-288	; 0xfffffee0
2000a124:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
2000a128:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
2000a12c:	00000068 	andeq	r0, r0, r8, rrx
2000a130:	6e656877 	mcrvs	8, 3, r6, cr5, cr7, {3}
2000a134:	72657665 	rsbvc	r7, r5, #105906176	; 0x6500000
2000a138:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
2000a13c:	65682079 	strbvs	r2, [r8, #-121]!	; 0xffffff87
2000a140:	00007261 	andeq	r7, r0, r1, ror #4
2000a144:	6e207369 	cdpvs	3, 2, cr7, cr0, cr9, {3}
2000a148:	2e726165 	rpwcssz	f6, f2, f5
2000a14c:	00000000 	andeq	r0, r0, r0
2000a150:	70727573 	rsbsvc	r7, r2, r3, ror r5
2000a154:	69736972 	ldmdbvs	r3!, {r1, r4, r5, r6, r8, fp, sp, lr}^
2000a158:	202c676e 	eorcs	r6, ip, lr, ror #14
2000a15c:	646e6966 	strbtvs	r6, [lr], #-2406	; 0xfffff69a
2000a160:	00676e69 	rsbeq	r6, r7, r9, ror #28
2000a164:	69206f53 	stmdbvs	r0!, {r0, r1, r4, r6, r8, r9, sl, fp, sp, lr}
2000a168:	73692074 	cmnvc	r9, #116	; 0x74
2000a16c:	69757120 	ldmdbvs	r5!, {r5, r8, ip, sp, lr}^
2000a170:	00006574 	andeq	r6, r0, r4, ror r5
2000a174:	20756f79 	rsbscs	r6, r5, r9, ror pc
2000a178:	65726568 	ldrbvs	r6, [r2, #-1384]!	; 0xfffffa98
2000a17c:	0000002c 	andeq	r0, r0, ip, lsr #32
2000a180:	72696568 	rsbvc	r6, r9, #104, 10	; 0x1a000000
2000a184:	206f7420 	rsbcs	r7, pc, r0, lsr #8
2000a188:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
2000a18c:	61654c20 	cmnvs	r5, r0, lsr #24
2000a190:	00002e72 	andeq	r2, r0, r2, ror lr
2000a194:	65657571 	strbvs	r7, [r5, #-1393]!	; 0xfffffa8f
2000a198:	6144206e 	cmpvs	r4, lr, rrx
2000a19c:	206f6666 	rsbcs	r6, pc, r6, ror #12
2000a1a0:	4420666f 	strtmi	r6, [r0], #-1647	; 0xfffff991
2000a1a4:	2c734c49 	ldclcs	12, cr4, [r3], #-292	; 0xfffffedc
2000a1a8:	00000000 	andeq	r0, r0, r0
2000a1ac:	706d6574 	rsbvc	r6, sp, r4, ror r5
2000a1b0:	2c646574 	cfstr64cs	mvdx6, [r4], #-464	; 0xfffffe30
2000a1b4:	206f7420 	rsbcs	r7, pc, r0, lsr #8
2000a1b8:	746f6f6c 	strbtvc	r6, [pc], #-3948	; 2000a1c0 <firstTime.4040+0xfc>
2000a1bc:	00000000 	andeq	r0, r0, r0
2000a1c0:	20747542 	rsbscs	r7, r4, r2, asr #10
2000a1c4:	6279616d 	rsbsvs	r6, r9, #1073741851	; 0x4000001b
2000a1c8:	6f792065 	svcvs	0x00792065
2000a1cc:	65722775 	ldrbvs	r2, [r2, #-1909]!	; 0xfffff88b
2000a1d0:	00000000 	andeq	r0, r0, r0
2000a1d4:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 2000a044 <indoors2_light_bits+0x3f0>
2000a1d8:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
2000a1dc:	63697220 	cmnvs	r9, #32, 4
2000a1e0:	2c736568 	cfldr64cs	mvdx6, [r3], #-416	; 0xfffffe60
2000a1e4:	00000000 	andeq	r0, r0, r0
2000a1e8:	6b636977 	blvs	218e47cc <firstTime.4040+0x18da708>
2000a1ec:	44206465 	strtmi	r6, [r0], #-1125	; 0xfffffb9b
2000a1f0:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
2000a1f4:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
2000a1f8:	2e736568 	cdpcs	5, 7, cr6, cr3, cr8, {3}
2000a1fc:	00000000 	andeq	r0, r0, r0
2000a200:	65727573 	ldrbvs	r7, [r2, #-1395]!	; 0xfffffa8d
2000a204:	79622064 	stmdbvc	r2!, {r2, r5, r6, sp}^
2000a208:	00000000 	andeq	r0, r0, r0
2000a20c:	67206f73 			; <UNDEFINED> instruction: 0x67206f73
2000a210:	70706972 	rsbsvc	r6, r0, r2, ror r9
2000a214:	20796c69 	rsbscs	r6, r9, r9, ror #24
2000a218:	61657274 	smcvs	22308	; 0x5724
2000a21c:	0000002d 	andeq	r0, r0, sp, lsr #32
2000a220:	6572202d 	ldrbvs	r2, [r2, #-45]!	; 0xffffffd3
2000a224:	20746573 	rsbscs	r6, r4, r3, ror r5
2000a228:	20656874 	rsbcs	r6, r5, r4, ror r8
2000a22c:	74697773 	strbtvc	r7, [r9], #-1907	; 0xfffff88d
2000a230:	00216863 	eoreq	r6, r1, r3, ror #16
2000a234:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xfffff1bb
2000a238:	62202c72 	eorvs	r2, r0, #29184	; 0x7200
2000a23c:	65766172 	ldrbvs	r6, [r6, #-370]!	; 0xfffffe8e
2000a240:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
2000a244:	002c6863 	eoreq	r6, ip, r3, ror #16
2000a248:	200028d8 	ldrdcs	r2, [r0], -r8
2000a24c:	200028e2 	andcs	r2, r0, r2, ror #17
2000a250:	200028ec 	andcs	r2, r0, ip, ror #17
2000a254:	200028f6 	strdcs	r2, [r0], -r6
2000a258:	20002900 	andcs	r2, r0, r0, lsl #18
2000a25c:	2000290a 	andcs	r2, r0, sl, lsl #18
2000a260:	20002914 	andcs	r2, r0, r4, lsl r9
2000a264:	2000291e 	andcs	r2, r0, lr, lsl r9
2000a268:	20202020 	eorcs	r2, r0, r0, lsr #32
2000a26c:	20202020 	eorcs	r2, r0, r0, lsr #32
2000a270:	20202020 	eorcs	r2, r0, r0, lsr #32
2000a274:	20202020 	eorcs	r2, r0, r0, lsr #32
2000a278:	20202020 	eorcs	r2, r0, r0, lsr #32
2000a27c:	00000000 	andeq	r0, r0, r0
2000a280:	61666c41 	cmnvs	r6, r1, asr #24
2000a284:	656d756e 	strbvs	r7, [sp, #-1390]!	; 0xfffffa92
2000a288:	6b736972 	blvs	21ce4858 <firstTime.4040+0x1cda794>
2000a28c:	00000000 	andeq	r0, r0, r0
2000a290:	64726168 	ldrbtvs	r6, [r2], #-360	; 0xfffffe98
2000a294:	a4c3a5c3 	strbge	sl, [r3], #1475	; 0x5c3
2000a298:	7261b6c3 	rsbvc	fp, r1, #204472320	; 0xc300000
2000a29c:	75732065 	ldrbvc	r2, [r3, #-101]!	; 0xffffff9b
2000a2a0:	00726567 	rsbseq	r6, r2, r7, ror #10

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000970 	andeq	r0, r0, r0, ror r9
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000081 	andeq	r0, r0, r1, lsl #1
      10:	0004b00c 	andeq	fp, r4, ip
	...
      20:	020c0200 	andeq	r0, ip, #0, 4
      24:	00004e05 	andeq	r4, r0, r5, lsl #28
      28:	03090300 	movweq	r0, #37632	; 0x9300
      2c:	07020000 	streq	r0, [r2, -r0]
      30:	0000004e 	andeq	r0, r0, lr, asr #32
      34:	067b0300 	ldrbteq	r0, [fp], -r0, lsl #6
      38:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      3c:	0000004e 	andeq	r0, r0, lr, asr #32
      40:	14760304 	ldrbtne	r0, [r6], #-772	; 0xfffffcfc
      44:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
      48:	00000055 	andeq	r0, r0, r5, asr r0
      4c:	04040008 	streq	r0, [r4], #-8
      50:	00032d07 	andeq	r2, r3, r7, lsl #26
      54:	5b040500 	blpl	10145c <startup-0x1fefeba4>
      58:	04000000 	streq	r0, [r0], #-0
      5c:	045d0801 	ldrbeq	r0, [sp], #-2049	; 0xfffff7ff
      60:	c8060000 	stmdagt	r6, {}	; <UNPREDICTABLE>
      64:	02000015 	andeq	r0, r0, #21
      68:	0000210a 	andeq	r2, r0, sl, lsl #2
      6c:	00160700 	andseq	r0, r6, r0, lsl #14
      70:	030c0000 	movweq	r0, #49152	; 0xc000
      74:	00009e06 	andeq	r9, r0, r6, lsl #28
      78:	05480300 	strbeq	r0, [r8, #-768]	; 0xfffffd00
      7c:	07030000 	streq	r0, [r3, -r0]
      80:	0000009e 	muleq	r0, lr, r0
      84:	001d0300 	andseq	r0, sp, r0, lsl #6
      88:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
      8c:	0000009e 	muleq	r0, lr, r0
      90:	00120304 	andseq	r0, r2, r4, lsl #6
      94:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
      98:	0000009e 	muleq	r0, lr, r0
      9c:	04050008 	streq	r0, [r5], #-8
      a0:	00000062 	andeq	r0, r0, r2, rrx
      a4:	000f9606 	andeq	r9, pc, r6, lsl #12
      a8:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
      ac:	07000000 	streq	r0, [r0, -r0]
      b0:	00000640 	andeq	r0, r0, r0, asr #12
      b4:	28060424 	stmdacs	r6, {r2, r5, sl}
      b8:	03000001 	movweq	r0, #1
      bc:	000003fa 	strdeq	r0, [r0], -sl
      c0:	01280704 			; <UNDEFINED> instruction: 0x01280704
      c4:	03000000 	movweq	r0, #0
      c8:	0000064c 	andeq	r0, r0, ip, asr #12
      cc:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
      d0:	03040000 	movweq	r0, #16384	; 0x4000
      d4:	000005b3 			; <UNDEFINED> instruction: 0x000005b3
      d8:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
      dc:	03080000 	movweq	r0, #32768	; 0x8000
      e0:	000005df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
      e4:	01460c04 	cmpeq	r6, r4, lsl #24
      e8:	030c0000 	movweq	r0, #49152	; 0xc000
      ec:	00000302 	andeq	r0, r0, r2, lsl #6
      f0:	01460d04 	cmpeq	r6, r4, lsl #26
      f4:	03100000 	tsteq	r0, #0
      f8:	0000040c 	andeq	r0, r0, ip, lsl #8
      fc:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
     100:	03140000 	tsteq	r4, #0
     104:	00000052 	andeq	r0, r0, r2, asr r0
     108:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
     10c:	03180000 	tsteq	r8, #0
     110:	0000037d 	andeq	r0, r0, sp, ror r3
     114:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
     118:	031c0000 	tsteq	ip, #0
     11c:	0000038d 	andeq	r0, r0, sp, lsl #7
     120:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
     124:	00200000 	eoreq	r0, r0, r0
     128:	00a40405 	adceq	r0, r4, r5, lsl #8
     12c:	04080000 	streq	r0, [r8], #-0
     130:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     134:	01400900 	cmpeq	r0, r0, lsl #18
     138:	400a0000 	andmi	r0, sl, r0
     13c:	00000001 	andeq	r0, r0, r1
     140:	00af0405 	adceq	r0, pc, r5, lsl #8
     144:	04050000 	streq	r0, [r5], #-0
     148:	00000135 	andeq	r0, r0, r5, lsr r1
     14c:	00064106 	andeq	r4, r6, r6, lsl #2
     150:	af150400 	svcge	0x00150400
     154:	0b000000 	bleq	15c <startup-0x1ffffea4>
     158:	00000162 	andeq	r0, r0, r2, ror #2
     15c:	00000162 	andeq	r0, r0, r2, ror #2
     160:	0405000c 	streq	r0, [r5], #-12
     164:	0000014c 	andeq	r0, r0, ip, asr #2
     168:	0004e00d 	andeq	lr, r4, sp
     16c:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
     170:	0d000001 	stceq	0, cr0, [r0, #-4]
     174:	000003c8 	andeq	r0, r0, r8, asr #7
     178:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
     17c:	0a060000 	beq	180184 <startup-0x1fe7fe7c>
     180:	05000006 	streq	r0, [r0, #-6]
     184:	00005b24 	andeq	r5, r0, r4, lsr #22
     188:	017e0b00 	cmneq	lr, r0, lsl #22
     18c:	019a0000 	orrseq	r0, sl, r0
     190:	9a0e0000 	bls	380198 <startup-0x1fc7fe68>
     194:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     198:	04040003 	streq	r0, [r4], #-3
     19c:	0003aa07 	andeq	sl, r3, r7, lsl #20
     1a0:	13ac0d00 			; <UNDEFINED> instruction: 0x13ac0d00
     1a4:	2b050000 	blcs	1401ac <startup-0x1febfe54>
     1a8:	00000189 	andeq	r0, r0, r9, lsl #3
     1ac:	0002220d 	andeq	r2, r2, sp, lsl #4
     1b0:	892c0500 	stmdbhi	ip!, {r8, sl}
     1b4:	0d000001 	stceq	0, cr0, [r0, #-4]
     1b8:	0000046b 	andeq	r0, r0, fp, ror #8
     1bc:	01892d05 	orreq	r2, r9, r5, lsl #26
     1c0:	0f0d0000 	svceq	0x000d0000
     1c4:	05000003 	streq	r0, [r0, #-3]
     1c8:	0001892e 	andeq	r8, r1, lr, lsr #18
     1cc:	029c0d00 	addseq	r0, ip, #0, 26
     1d0:	2f050000 	svccs	0x00050000
     1d4:	00000189 	andeq	r0, r0, r9, lsl #3
     1d8:	0006220d 	andeq	r2, r6, sp, lsl #4
     1dc:	89300500 	ldmdbhi	r0!, {r8, sl}
     1e0:	0d000001 	stceq	0, cr0, [r0, #-4]
     1e4:	00000612 	andeq	r0, r0, r2, lsl r6
     1e8:	01893105 	orreq	r3, r9, r5, lsl #2
     1ec:	5b0b0000 	blpl	2c01f4 <startup-0x1fd3fe0c>
     1f0:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
     1f4:	0f000001 	svceq	0x00000001
     1f8:	0000019a 	muleq	r0, sl, r1
     1fc:	6d100077 	ldcvs	0, cr0, [r0, #-476]	; 0xfffffe24
     200:	06000002 	streq	r0, [r0], -r2
     204:	0001ee03 	andeq	lr, r1, r3, lsl #28
     208:	08030500 	stmdaeq	r3, {r8, sl}
     20c:	11200061 			; <UNDEFINED> instruction: 0x11200061
     210:	00000482 	andeq	r0, r0, r2, lsl #9
     214:	01ee0307 	mvneq	r0, r7, lsl #6
     218:	03050000 	movweq	r0, #20480	; 0x5000
     21c:	20006180 	andcs	r6, r0, r0, lsl #3
     220:	00055311 	andeq	r5, r5, r1, lsl r3
     224:	ee030800 	cdp	8, 0, cr0, cr3, cr0, {0}
     228:	05000001 	streq	r0, [r0, #-1]
     22c:	0061f803 	rsbeq	pc, r1, r3, lsl #16
     230:	005b0b20 	subseq	r0, fp, r0, lsr #22
     234:	02420000 	subeq	r0, r2, #0
     238:	9a0e0000 	bls	380240 <startup-0x1fc7fdc0>
     23c:	17000001 	strne	r0, [r0, -r1]
     240:	46110001 	ldrmi	r0, [r1], -r1
     244:	09000001 	stmdbeq	r0, {r0}
     248:	00023103 	andeq	r3, r2, r3, lsl #2
     24c:	70030500 	andvc	r0, r3, r0, lsl #10
     250:	11200062 			; <UNDEFINED> instruction: 0x11200062
     254:	000003d5 	ldrdeq	r0, [r0], -r5
     258:	0231030a 	eorseq	r0, r1, #671088640	; 0x28000000
     25c:	03050000 	movweq	r0, #20480	; 0x5000
     260:	20006388 	andcs	r6, r0, r8, lsl #7
     264:	00036211 	andeq	r6, r3, r1, lsl r2
     268:	31030b00 	tstcc	r3, r0, lsl #22
     26c:	05000002 	streq	r0, [r0, #-2]
     270:	0064a003 	rsbeq	sl, r4, r3
     274:	005b0b20 	subseq	r0, fp, r0, lsr #22
     278:	02860000 	addeq	r0, r6, #0
     27c:	9a0e0000 	bls	380284 <startup-0x1fc7fd7c>
     280:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     284:	95110003 	ldrls	r0, [r1, #-3]
     288:	0c000004 	stceq	0, cr0, [r0], {4}
     28c:	00027503 	andeq	r7, r2, r3, lsl #10
     290:	b8030500 	stmdalt	r3, {r8, sl}
     294:	11200065 			; <UNDEFINED> instruction: 0x11200065
     298:	00000027 	andeq	r0, r0, r7, lsr #32
     29c:	0275030d 	rsbseq	r0, r5, #872415232	; 0x34000000
     2a0:	03050000 	movweq	r0, #20480	; 0x5000
     2a4:	200069b8 			; <UNDEFINED> instruction: 0x200069b8
     2a8:	00000011 	andeq	r0, r0, r1, lsl r0
     2ac:	75030e00 	strvc	r0, [r3, #-3584]	; 0xfffff200
     2b0:	05000002 	streq	r0, [r0, #-2]
     2b4:	006db803 	rsbeq	fp, sp, r3, lsl #16
     2b8:	005b0b20 	subseq	r0, fp, r0, lsr #22
     2bc:	02c90000 	sbceq	r0, r9, #0
     2c0:	9a0f0000 	bls	3c02c8 <startup-0x1fc3fd38>
     2c4:	d1000001 	tstle	r0, r1
     2c8:	01981100 	orrseq	r1, r8, r0, lsl #2
     2cc:	030f0000 	movweq	r0, #61440	; 0xf000
     2d0:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
     2d4:	71b80305 			; <UNDEFINED> instruction: 0x71b80305
     2d8:	b3112000 	tstlt	r1, #0
     2dc:	10000003 	andne	r0, r0, r3
     2e0:	0002b903 	andeq	fp, r2, r3, lsl #18
     2e4:	8c030500 	cfstr32hi	mvfx0, [r3], {-0}
     2e8:	11200072 			; <UNDEFINED> instruction: 0x11200072
     2ec:	000001fa 	strdeq	r0, [r0], -sl
     2f0:	02b90311 	adcseq	r0, r9, #1140850688	; 0x44000000
     2f4:	03050000 	movweq	r0, #20480	; 0x5000
     2f8:	20007360 	andcs	r7, r0, r0, ror #6
     2fc:	00060007 	andeq	r0, r6, r7
     300:	04121400 	ldreq	r1, [r2], #-1024	; 0xfffffc00
     304:	00000345 	andeq	r0, r0, r5, asr #6
     308:	00183b03 	andseq	r3, r8, r3, lsl #22
     30c:	45051200 	strmi	r1, [r5, #-512]	; 0xfffffe00
     310:	00000003 	andeq	r0, r0, r3
     314:	00026003 	andeq	r6, r2, r3
     318:	45061200 	strmi	r1, [r6, #-512]	; 0xfffffe00
     31c:	04000003 	streq	r0, [r0], #-3
     320:	00039703 	andeq	r9, r3, r3, lsl #14
     324:	2e081200 	cdpcs	2, 0, cr1, cr8, cr0, {0}
     328:	08000001 	stmdaeq	r0, {r0}
     32c:	00038703 	andeq	r8, r3, r3, lsl #14
     330:	2e091200 	cdpcs	2, 0, cr1, cr9, cr0, {0}
     334:	0c000001 	stceq	0, cr0, [r0], {1}
     338:	00026503 	andeq	r6, r2, r3, lsl #10
     33c:	680c1200 	stmdavs	ip, {r9, ip}
     340:	10000003 	andne	r0, r0, r3
     344:	4b040500 	blmi	10174c <startup-0x1fefe8b4>
     348:	04000003 	streq	r0, [r0], #-3
     34c:	04660801 	strbteq	r0, [r6], #-2049	; 0xfffff7ff
     350:	62090000 	andvs	r0, r9, #0
     354:	0a000003 	beq	368 <startup-0x1ffffc98>
     358:	00000362 	andeq	r0, r0, r2, ror #6
     35c:	00012e0a 	andeq	r2, r1, sl, lsl #28
     360:	04050000 	streq	r0, [r5], #-0
     364:	000002fc 	strdeq	r0, [r0], -ip
     368:	03520405 	cmpeq	r2, #83886080	; 0x5000000
     36c:	01060000 	mrseq	r0, (UNDEF: 6)
     370:	12000006 	andne	r0, r0, #6
     374:	0002fc0d 	andeq	pc, r2, sp, lsl #24
     378:	05401100 	strbeq	r1, [r0, #-256]	; 0xffffff00
     37c:	03130000 	tsteq	r3, #0
     380:	00000275 	andeq	r0, r0, r5, ror r2
     384:	74340305 	ldrtvc	r0, [r4], #-773	; 0xfffffcfb
     388:	02042000 	andeq	r2, r4, #0
     38c:	00032707 	andeq	r2, r3, r7, lsl #14
     390:	057d1000 	ldrbeq	r1, [sp, #-0]!
     394:	20010000 	andcs	r0, r1, r0
     398:	0000012e 	andeq	r0, r0, lr, lsr #2
     39c:	3bbc0305 	blcc	fef00fb8 <firstTime.4040+0xdeef6ef4>
     3a0:	19102000 	ldmdbne	r0, {sp}
     3a4:	01000001 	tsteq	r0, r1
     3a8:	00009e38 	andeq	r9, r0, r8, lsr lr
     3ac:	04030500 	streq	r0, [r3], #-1280	; 0xfffffb00
     3b0:	1020003b 	eorne	r0, r0, fp, lsr r0
     3b4:	0000018b 	andeq	r0, r0, fp, lsl #3
     3b8:	009e3901 	addseq	r3, lr, r1, lsl #18
     3bc:	03050000 	movweq	r0, #20480	; 0x5000
     3c0:	20003bb0 			; <UNDEFINED> instruction: 0x20003bb0
     3c4:	0004f710 	andeq	pc, r4, r0, lsl r7	; <UNPREDICTABLE>
     3c8:	9e3a0100 	rsflse	f0, f2, f0
     3cc:	05000000 	streq	r0, [r0, #-0]
     3d0:	003bc403 	eorseq	ip, fp, r3, lsl #8
     3d4:	67621220 	strbvs	r1, [r2, -r0, lsr #4]!
     3d8:	9e3b0100 	rsflse	f0, f3, f0
     3dc:	05000000 	streq	r0, [r0, #-0]
     3e0:	003b4c03 	eorseq	r4, fp, r3, lsl #24
     3e4:	06511020 	ldrbeq	r1, [r1], -r0, lsr #32
     3e8:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
     3ec:	0000009e 	muleq	r0, lr, r0
     3f0:	3b2c0305 	blcc	b0100c <startup-0x1f4feff4>
     3f4:	ec102000 	ldc	0, cr2, [r0], {-0}
     3f8:	01000004 	tsteq	r0, r4
     3fc:	00009e3f 	andeq	r9, r0, pc, lsr lr
     400:	b8030500 	stmdalt	r3, {r8, sl}
     404:	1020003b 	eorne	r0, r0, fp, lsr r0
     408:	0000005b 	andeq	r0, r0, fp, asr r0
     40c:	009e4001 	addseq	r4, lr, r1
     410:	03050000 	movweq	r0, #20480	; 0x5000
     414:	20003b68 	andcs	r3, r0, r8, ror #22
     418:	00035710 	andeq	r5, r3, r0, lsl r7
     41c:	9e410100 	dvflss	f0, f1, f0
     420:	05000000 	streq	r0, [r0, #-0]
     424:	003bd403 	eorseq	sp, fp, r3, lsl #8
     428:	05031020 	streq	r1, [r3, #-32]	; 0xffffffe0
     42c:	42010000 	andmi	r0, r1, #0
     430:	0000009e 	muleq	r0, lr, r0
     434:	3ba00305 	blcc	fe801050 <firstTime.4040+0xde7f6f8c>
     438:	1a102000 	bne	408440 <startup-0x1fbf7bc0>
     43c:	01000004 	tsteq	r0, r4
     440:	00009e43 	andeq	r9, r0, r3, asr #28
     444:	b4030500 	strlt	r0, [r3], #-1280	; 0xfffffb00
     448:	1020003b 	eorne	r0, r0, fp, lsr r0
     44c:	0000059b 	muleq	r0, fp, r5
     450:	009e4401 	addseq	r4, lr, r1, lsl #8
     454:	03050000 	movweq	r0, #20480	; 0x5000
     458:	20003bc0 	andcs	r3, r0, r0, asr #23
     45c:	0001bf10 	andeq	fp, r1, r0, lsl pc
     460:	9e450100 	dvflss	f0, f5, f0
     464:	05000000 	streq	r0, [r0, #-0]
     468:	003b8403 	eorseq	r8, fp, r3, lsl #8
     46c:	06871020 	streq	r1, [r7], r0, lsr #32
     470:	46010000 	strmi	r0, [r1], -r0
     474:	0000009e 	muleq	r0, lr, r0
     478:	3b3c0305 	blcc	f01094 <startup-0x1f0fef6c>
     47c:	4b102000 	blmi	408484 <startup-0x1fbf7b7c>
     480:	01000003 	tsteq	r0, r3
     484:	00006248 	andeq	r6, r0, r8, asr #4
     488:	30030500 	andcc	r0, r3, r0, lsl #10
     48c:	1020003b 	eorne	r0, r0, fp, lsr r0
     490:	0000020b 	andeq	r0, r0, fp, lsl #4
     494:	00624901 	rsbeq	r4, r2, r1, lsl #18
     498:	03050000 	movweq	r0, #20480	; 0x5000
     49c:	20003b88 	andcs	r3, r0, r8, lsl #23
     4a0:	0001a910 	andeq	sl, r1, r0, lsl r9
     4a4:	624a0100 	subvs	r0, sl, #0, 2
     4a8:	05000000 	streq	r0, [r0, #-0]
     4ac:	003b5003 	eorseq	r5, fp, r3
     4b0:	01e71020 	mvneq	r1, r0, lsr #32
     4b4:	4c010000 	stcmi	0, cr0, [r1], {-0}
     4b8:	00000062 	andeq	r0, r0, r2, rrx
     4bc:	3bc80305 	blcc	ff2010d8 <firstTime.4040+0xdf1f7014>
     4c0:	71102000 	tstvc	r0, r0
     4c4:	01000000 	mrseq	r0, (UNDEF: 0)
     4c8:	0000624e 	andeq	r6, r0, lr, asr #4
     4cc:	08030500 	stmdaeq	r3, {r8, sl}
     4d0:	1020003b 	eorne	r0, r0, fp, lsr r0
     4d4:	0000043f 	andeq	r0, r0, pc, lsr r4
     4d8:	00624f01 	rsbeq	r4, r2, r1, lsl #30
     4dc:	03050000 	movweq	r0, #20480	; 0x5000
     4e0:	20003ba4 	andcs	r3, r0, r4, lsr #23
     4e4:	0002f210 	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
     4e8:	62500100 	subsvs	r0, r0, #0, 2
     4ec:	05000000 	streq	r0, [r0, #-0]
     4f0:	003b7803 	eorseq	r7, fp, r3, lsl #16
     4f4:	044e1020 	strbeq	r1, [lr], #-32	; 0xffffffe0
     4f8:	51010000 	mrspl	r0, (UNDEF: 1)
     4fc:	00000062 	andeq	r0, r0, r2, rrx
     500:	3b400305 	blcc	100111c <startup-0x1effeee4>
     504:	f2102000 	vhadd.s16	d2, d0, d0
     508:	01000005 	tsteq	r0, r5
     50c:	00006252 	andeq	r6, r0, r2, asr r2
     510:	20030500 	andcs	r0, r3, r0, lsl #10
     514:	1020003b 	eorne	r0, r0, fp, lsr r0
     518:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     51c:	00625301 	rsbeq	r5, r2, r1, lsl #6
     520:	03050000 	movweq	r0, #20480	; 0x5000
     524:	20003b5c 	andcs	r3, r0, ip, asr fp
     528:	00053110 	andeq	r3, r5, r0, lsl r1
     52c:	62540100 	subsvs	r0, r4, #0, 2
     530:	05000000 	streq	r0, [r0, #-0]
     534:	003b9403 	eorseq	r9, fp, r3, lsl #8
     538:	04251020 	strteq	r1, [r5], #-32	; 0xffffffe0
     53c:	55010000 	strpl	r0, [r1, #-0]
     540:	00000062 	andeq	r0, r0, r2, rrx
     544:	3b140305 	blcc	501160 <startup-0x1fafeea0>
     548:	31102000 	tstcc	r0, r0
     54c:	01000006 	tsteq	r0, r6
     550:	00006256 	andeq	r6, r0, r6, asr r2
     554:	6c030500 	cfstr32vs	mvfx0, [r3], {-0}
     558:	1020003b 	eorne	r0, r0, fp, lsr r0
     55c:	00000397 	muleq	r0, r7, r3
     560:	012e8c01 			; <UNDEFINED> instruction: 0x012e8c01
     564:	03050000 	movweq	r0, #20480	; 0x5000
     568:	20003ad4 	ldrdcs	r3, [r0], -r4
     56c:	00050d10 	andeq	r0, r5, r0, lsl sp
     570:	2e8d0100 	rmfcse	f0, f5, f0
     574:	05000001 	streq	r0, [r0, #-1]
     578:	00783403 	rsbseq	r3, r8, r3, lsl #8
     57c:	06821320 	streq	r1, [r2], r0, lsr #6
     580:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
     584:	200001fc 	strdcs	r0, [r0], -ip
     588:	00000f50 	andeq	r0, r0, r0, asr pc
     58c:	089f9c01 	ldmeq	pc, {r0, sl, fp, ip, pc}	; <UNPREDICTABLE>
     590:	9f110000 	svcls	0x00110000
     594:	01000003 	tsteq	r0, r3
     598:	00014c94 	muleq	r1, r4, ip
     59c:	bc910300 	ldclt	3, cr0, [r1], {0}
     5a0:	05a6117f 	streq	r1, [r6, #383]!	; 0x17f
     5a4:	95010000 	strls	r0, [r1, #-0]
     5a8:	000000a4 	andeq	r0, r0, r4, lsr #1
     5ac:	7fb09103 	svcvc	0x00b09103
     5b0:	00069211 	andeq	r9, r6, r1, lsl r2
     5b4:	9f960100 	svcls	0x00960100
     5b8:	03000008 	movweq	r0, #8
     5bc:	117fa491 			; <UNDEFINED> instruction: 0x117fa491
     5c0:	000004a7 	andeq	r0, r0, r7, lsr #9
     5c4:	014c9e01 	cmpeq	ip, r1, lsl #28
     5c8:	91030000 	mrsls	r0, (UNDEF: 3)
     5cc:	72117f80 	andsvc	r7, r1, #128, 30	; 0x200
     5d0:	01000001 	tsteq	r0, r1
     5d4:	0000a49f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
     5d8:	f4910300 			; <UNDEFINED> instruction: 0xf4910300
     5dc:	0571117e 	ldrbeq	r1, [r1, #-382]!	; 0xfffffe82
     5e0:	a0010000 	andge	r0, r1, r0
     5e4:	0000089f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
     5e8:	7ee89103 	urdvce	f1, f3
     5ec:	00029311 	andeq	r9, r2, r1, lsl r3
     5f0:	4ca70100 	stfmis	f0, [r7]
     5f4:	03000001 	movweq	r0, #1
     5f8:	117ec491 			; <UNDEFINED> instruction: 0x117ec491
     5fc:	000003ef 	andeq	r0, r0, pc, ror #7
     600:	00a4a801 	adceq	sl, r4, r1, lsl #16
     604:	91030000 	mrsls	r0, (UNDEF: 3)
     608:	e6117eb8 			; <UNDEFINED> instruction: 0xe6117eb8
     60c:	01000005 	tsteq	r0, r5
     610:	00089fa9 	andeq	r9, r8, r9, lsr #31
     614:	ac910300 	ldcge	3, cr0, [r1], {0}
     618:	012d117e 			; <UNDEFINED> instruction: 0x012d117e
     61c:	b0010000 	andlt	r0, r1, r0
     620:	0000014c 	andeq	r0, r0, ip, asr #2
     624:	7e889103 	sinvce	f1, f3
     628:	00056511 	andeq	r6, r5, r1, lsl r5
     62c:	a4b10100 	ldrtge	r0, [r1], #256	; 0x100
     630:	03000000 	movweq	r0, #0
     634:	117dfc91 			; <UNDEFINED> instruction: 0x117dfc91
     638:	00000165 	andeq	r0, r0, r5, ror #2
     63c:	089fb201 	ldmeq	pc, {r0, r9, ip, sp, pc}	; <UNPREDICTABLE>
     640:	91030000 	mrsls	r0, (UNDEF: 3)
     644:	5d117df0 	ldcpl	13, cr7, [r1, #-960]	; 0xfffffc40
     648:	01000001 	tsteq	r0, r1
     64c:	00014cb9 			; <UNDEFINED> instruction: 0x00014cb9
     650:	cc910300 	ldcgt	3, cr0, [r1], {0}
     654:	1a0a117d 	bne	284c50 <startup-0x1fd7b3b0>
     658:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
     65c:	0000014c 	andeq	r0, r0, ip, asr #2
     660:	7da89103 	stfvcd	f1, [r8, #12]!
     664:	0002be11 	andeq	fp, r2, r1, lsl lr
     668:	4cc30100 	stfmie	f0, [r3], {0}
     66c:	03000001 	movweq	r0, #1
     670:	147d8491 	ldrbtne	r8, [sp], #-1169	; 0xfffffb6f
     674:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
     678:	012ec401 			; <UNDEFINED> instruction: 0x012ec401
     67c:	06840000 	streq	r0, [r4], r0
     680:	00150000 	andseq	r0, r5, r0
     684:	0003c311 	andeq	ip, r3, r1, lsl r3
     688:	4cc80100 	stfmie	f0, [r8], {0}
     68c:	03000001 	movweq	r0, #1
     690:	147ce091 	ldrbtne	lr, [ip], #-145	; 0xffffff6f
     694:	00000372 	andeq	r0, r0, r2, ror r3
     698:	012ec901 			; <UNDEFINED> instruction: 0x012ec901
     69c:	06a40000 	strteq	r0, [r4], r0
     6a0:	00150000 	andseq	r0, r5, r0
     6a4:	000c7c11 	andeq	r7, ip, r1, lsl ip
     6a8:	4cce0100 	stfmie	f0, [lr], {0}
     6ac:	03000001 	movweq	r0, #1
     6b0:	167cbc91 			; <UNDEFINED> instruction: 0x167cbc91
     6b4:	00504944 	subseq	r4, r0, r4, asr #18
     6b8:	014cd401 	cmpeq	ip, r1, lsl #8
     6bc:	91030000 	mrsls	r0, (UNDEF: 3)
     6c0:	38117c98 	ldmdacc	r1, {r3, r4, r7, sl, fp, ip, sp, lr}
     6c4:	01000000 	mrseq	r0, (UNDEF: 0)
     6c8:	00014cd8 	ldrdeq	r4, [r1], -r8
     6cc:	f4910300 			; <UNDEFINED> instruction: 0xf4910300
     6d0:	0589117b 	streq	r1, [r9, #379]	; 0x17b
     6d4:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
     6d8:	0000014c 	andeq	r0, r0, ip, asr #2
     6dc:	7bd09103 	blvc	ff424af0 <firstTime.4040+0xdf41aa2c>
     6e0:	00058f11 	andeq	r8, r5, r1, lsl pc
     6e4:	4ce00100 	stfmie	f0, [r0]
     6e8:	03000001 	movweq	r0, #1
     6ec:	117bac91 			; <UNDEFINED> instruction: 0x117bac91
     6f0:	00000595 	muleq	r0, r5, r5
     6f4:	014ce201 	cmpeq	ip, r1, lsl #4
     6f8:	91030000 	mrsls	r0, (UNDEF: 3)
     6fc:	d5117b88 	ldrle	r7, [r1, #-2952]	; 0xfffff478
     700:	01000001 	tsteq	r0, r1
     704:	00014ce4 	andeq	r4, r1, r4, ror #25
     708:	e4910300 	ldr	r0, [r1], #768	; 0x300
     70c:	0157117a 	cmpeq	r7, sl, ror r1
     710:	e6010000 	str	r0, [r1], -r0
     714:	0000014c 	andeq	r0, r0, ip, asr #2
     718:	7ac09103 	bvc	ff024b2c <firstTime.4040+0xdf01aa68>
     71c:	00003f17 	andeq	r3, r0, r7, lsl pc
     720:	01010100 	mrseq	r0, (UNDEF: 17)
     724:	0000036e 	andeq	r0, r0, lr, ror #6
     728:	7aac9103 	bvc	feb24b3c <firstTime.4040+0xdeb1aa78>
     72c:	00018517 	andeq	r8, r1, r7, lsl r5
     730:	01020100 	mrseq	r0, (UNDEF: 18)
     734:	0000036e 	andeq	r0, r0, lr, ror #6
     738:	7a989103 	bvc	fe624b4c <firstTime.4040+0xde61aa88>
     73c:	0001b917 	andeq	fp, r1, r7, lsl r9
     740:	01030100 	mrseq	r0, (UNDEF: 19)
     744:	0000036e 	andeq	r0, r0, lr, ror #6
     748:	7a849103 	bvc	fe124b5c <firstTime.4040+0xde11aa98>
     74c:	0001ee17 	andeq	lr, r1, r7, lsl lr
     750:	01040100 	mrseq	r0, (UNDEF: 20)
     754:	0000036e 	andeq	r0, r0, lr, ror #6
     758:	79f09103 	ldmibvc	r0!, {r0, r1, r8, ip, pc}^
     75c:	0001c917 	andeq	ip, r1, r7, lsl r9
     760:	01050100 	mrseq	r0, (UNDEF: 21)
     764:	0000036e 	andeq	r0, r0, lr, ror #6
     768:	79dc9103 	ldmibvc	ip, {r0, r1, r8, ip, pc}^
     76c:	0001cf17 	andeq	ip, r1, r7, lsl pc
     770:	01060100 	mrseq	r0, (UNDEF: 22)
     774:	0000036e 	andeq	r0, r0, lr, ror #6
     778:	79c89103 	stmibvc	r8, {r0, r1, r8, ip, pc}^
     77c:	00023417 	andeq	r3, r2, r7, lsl r4
     780:	01070100 	mrseq	r0, (UNDEF: 23)
     784:	0000036e 	andeq	r0, r0, lr, ror #6
     788:	79b49103 	ldmibvc	r4!, {r0, r1, r8, ip, pc}
     78c:	00021c17 	andeq	r1, r2, r7, lsl ip
     790:	01080100 	mrseq	r0, (UNDEF: 24)
     794:	0000036e 	andeq	r0, r0, lr, ror #6
     798:	79a09103 	stmibvc	r0!, {r0, r1, r8, ip, pc}
     79c:	0001f417 	andeq	pc, r1, r7, lsl r4	; <UNPREDICTABLE>
     7a0:	01090100 	mrseq	r0, (UNDEF: 25)
     7a4:	0000036e 	andeq	r0, r0, lr, ror #6
     7a8:	798c9103 	stmibvc	ip, {r0, r1, r8, ip, pc}
     7ac:	00023a17 	andeq	r3, r2, r7, lsl sl
     7b0:	010a0100 	mrseq	r0, (UNDEF: 26)
     7b4:	0000036e 	andeq	r0, r0, lr, ror #6
     7b8:	78f89103 	ldmvc	r8!, {r0, r1, r8, ip, pc}^
     7bc:	00066d17 	andeq	r6, r6, r7, lsl sp
     7c0:	010b0100 	mrseq	r0, (UNDEF: 27)
     7c4:	0000036e 	andeq	r0, r0, lr, ror #6
     7c8:	78e49103 	stmiavc	r4!, {r0, r1, r8, ip, pc}^
     7cc:	00067417 	andeq	r7, r6, r7, lsl r4
     7d0:	010c0100 	mrseq	r0, (UNDEF: 28)
     7d4:	0000036e 	andeq	r0, r0, lr, ror #6
     7d8:	78d09103 	ldmvc	r0, {r0, r1, r8, ip, pc}^
     7dc:	0005c917 	andeq	ip, r5, r7, lsl r9
     7e0:	010d0100 	mrseq	r0, (UNDEF: 29)
     7e4:	0000036e 	andeq	r0, r0, lr, ror #6
     7e8:	78bc9103 	ldmvc	ip!, {r0, r1, r8, ip, pc}
     7ec:	00012117 	andeq	r2, r1, r7, lsl r1
     7f0:	01200100 			; <UNDEFINED> instruction: 0x01200100
     7f4:	0000012e 	andeq	r0, r0, lr, lsr #2
     7f8:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
     7fc:	000001db 	ldrdeq	r0, [r0], -fp
     800:	2e012101 	adfcss	f2, f1, f1
     804:	02000001 	andeq	r0, r0, #1
     808:	48176891 	ldmdami	r7, {r0, r4, r7, fp, sp, lr}
     80c:	01000000 	mrseq	r0, (UNDEF: 0)
     810:	012e0122 			; <UNDEFINED> instruction: 0x012e0122
     814:	91020000 	mrsls	r0, (UNDEF: 2)
     818:	065d1764 	ldrbeq	r1, [sp], -r4, ror #14
     81c:	23010000 	movwcs	r0, #4096	; 0x1000
     820:	00012e01 	andeq	r2, r1, r1, lsl #28
     824:	60910200 	addsvs	r0, r1, r0, lsl #4
     828:	0007b218 	andeq	fp, r7, r8, lsl r2
     82c:	00097020 	andeq	r7, r9, r0, lsr #32
     830:	02891700 	addeq	r1, r9, #0, 14
     834:	4a010000 	bmi	4083c <startup-0x1ffbf7c4>
     838:	00012e01 	andeq	r2, r1, r1, lsl #28
     83c:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
     840:	17200078 			; <UNDEFINED> instruction: 0x17200078
     844:	00000401 	andeq	r0, r0, r1, lsl #8
     848:	2e014b01 	vmlacs.f64	d4, d1, d1
     84c:	05000001 	streq	r0, [r0, #-1]
     850:	00784003 	rsbseq	r4, r8, r3
     854:	033a1720 	teqeq	sl, #32, 14	; 0x800000
     858:	4c010000 	stcmi	0, cr0, [r1], {-0}
     85c:	00012e01 	andeq	r2, r1, r1, lsl #28
     860:	38030500 	stmdacc	r3, {r8, sl}
     864:	17200078 			; <UNDEFINED> instruction: 0x17200078
     868:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
     86c:	2e019801 	cdpcs	8, 0, cr9, cr1, cr1, {0}
     870:	05000001 	streq	r0, [r0, #-1]
     874:	00784403 	rsbseq	r4, r8, r3, lsl #8
     878:	051c1720 	ldreq	r1, [ip, #-1824]	; 0xfffff8e0
     87c:	ba010000 	blt	40884 <startup-0x1ffbf77c>
     880:	00012e01 	andeq	r2, r1, r1, lsl #28
     884:	d8030500 	stmdale	r3, {r8, sl}
     888:	1720003a 			; <UNDEFINED> instruction: 0x1720003a
     88c:	00001778 	andeq	r1, r0, r8, ror r7
     890:	2e01d001 	cdpcs	0, 0, cr13, cr1, cr1, {0}
     894:	05000001 	streq	r0, [r0, #-1]
     898:	003adc03 	eorseq	sp, sl, r3, lsl #24
     89c:	0b000020 	bleq	924 <startup-0x1ffff6dc>
     8a0:	000000a4 	andeq	r0, r0, r4, lsr #1
     8a4:	000008af 	andeq	r0, r0, pc, lsr #17
     8a8:	00019a0f 	andeq	r9, r1, pc, lsl #20
     8ac:	13000000 	movwne	r0, #0
     8b0:	00000433 	andeq	r0, r0, r3, lsr r4
     8b4:	00345801 	eorseq	r5, r4, r1, lsl #16
     8b8:	01c82000 	biceq	r2, r8, r0
     8bc:	9c010000 	stcls	0, cr0, [r1], {-0}
     8c0:	00000951 	andeq	r0, r0, r1, asr r9
     8c4:	00013711 	andeq	r3, r1, r1, lsl r7
     8c8:	9e590100 	rdflse	f0, f1, f0
     8cc:	02000000 	andeq	r0, r0, #0
     8d0:	40117491 	mulsmi	r1, r1, r4
     8d4:	01000002 	tsteq	r0, r2
     8d8:	00009e5d 	andeq	r9, r0, sp, asr lr
     8dc:	70910200 	addsvc	r0, r1, r0, lsl #4
     8e0:	00025011 	andeq	r5, r2, r1, lsl r0
     8e4:	9e610100 	powlss	f0, f1, f0
     8e8:	02000000 	andeq	r0, r0, #0
     8ec:	e6116c91 			; <UNDEFINED> instruction: 0xe6116c91
     8f0:	01000003 	tsteq	r0, r3
     8f4:	00009e65 	andeq	r9, r0, r5, ror #28
     8f8:	68910200 	ldmvs	r1, {r9}
     8fc:	0002c511 	andeq	ip, r2, r1, lsl r5
     900:	9e690100 	powlse	f0, f1, f0
     904:	02000000 	andeq	r0, r0, #0
     908:	ce116491 	cfcmpsgt	r6, mvf1, mvf1
     90c:	01000002 	tsteq	r0, r2
     910:	00009e6d 	andeq	r9, r0, sp, ror #28
     914:	60910200 	addsvs	r0, r1, r0, lsl #4
     918:	0002d711 	andeq	sp, r2, r1, lsl r7
     91c:	9e710100 	rpwlss	f0, f1, f0
     920:	02000000 	andeq	r0, r0, #0
     924:	e0115c91 	muls	r1, r1, ip
     928:	01000002 	tsteq	r0, r2
     92c:	00009e75 	andeq	r9, r0, r5, ror lr
     930:	58910200 	ldmpl	r1, {r9}
     934:	0002e911 	andeq	lr, r2, r1, lsl r9
     938:	9e780100 	rpwlse	f0, f0, f0
     93c:	02000000 	andeq	r0, r0, #0
     940:	67115491 			; <UNDEFINED> instruction: 0x67115491
     944:	01000000 	mrseq	r0, (UNDEF: 0)
     948:	00009e7b 	andeq	r9, r0, fp, ror lr
     94c:	50910200 	addspl	r0, r1, r0, lsl #4
     950:	02801900 	addeq	r1, r0, #0, 18
     954:	24010000 	strcs	r0, [r1], #-0
     958:	20000010 	andcs	r0, r0, r0, lsl r0
     95c:	00000024 	andeq	r0, r0, r4, lsr #32
     960:	7d1a9c01 	ldcvc	12, cr9, [sl, #-4]
     964:	01000001 	tsteq	r0, r1
     968:	0000002e 	andeq	r0, r0, lr, lsr #32
     96c:	00000c20 	andeq	r0, r0, r0, lsr #24
     970:	009c0100 	addseq	r0, ip, r0, lsl #2
     974:	000001e0 	andeq	r0, r0, r0, ror #3
     978:	01640004 	cmneq	r4, r4
     97c:	01040000 	mrseq	r0, (UNDEF: 4)
     980:	00000081 	andeq	r0, r0, r1, lsl #1
     984:	0006b10c 	andeq	fp, r6, ip, lsl #2
     988:	00114c00 	andseq	r4, r1, r0, lsl #24
     98c:	00005620 	andeq	r5, r0, r0, lsr #12
     990:	00030600 	andeq	r0, r3, r0, lsl #12
     994:	020c0200 	andeq	r0, ip, #0, 4
     998:	00004e05 	andeq	r4, r0, r5, lsl #28
     99c:	03090300 	movweq	r0, #37632	; 0x9300
     9a0:	07020000 	streq	r0, [r2, -r0]
     9a4:	0000004e 	andeq	r0, r0, lr, asr #32
     9a8:	067b0300 	ldrbteq	r0, [fp], -r0, lsl #6
     9ac:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     9b0:	0000004e 	andeq	r0, r0, lr, asr #32
     9b4:	14760304 	ldrbtne	r0, [r6], #-772	; 0xfffffcfc
     9b8:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     9bc:	00000055 	andeq	r0, r0, r5, asr r0
     9c0:	04040008 	streq	r0, [r4], #-8
     9c4:	00032d07 	andeq	r2, r3, r7, lsl #26
     9c8:	5b040500 	blpl	101dd0 <startup-0x1fefe230>
     9cc:	04000000 	streq	r0, [r0], #-0
     9d0:	045d0801 	ldrbeq	r0, [sp], #-2049	; 0xfffff7ff
     9d4:	c8060000 	stmdagt	r6, {}	; <UNPREDICTABLE>
     9d8:	02000015 	andeq	r0, r0, #21
     9dc:	0000210a 	andeq	r2, r0, sl, lsl #2
     9e0:	00160700 	andseq	r0, r6, r0, lsl #14
     9e4:	030c0000 	movweq	r0, #49152	; 0xc000
     9e8:	00009e06 	andeq	r9, r0, r6, lsl #28
     9ec:	05480300 	strbeq	r0, [r8, #-768]	; 0xfffffd00
     9f0:	07030000 	streq	r0, [r3, -r0]
     9f4:	0000009e 	muleq	r0, lr, r0
     9f8:	001d0300 	andseq	r0, sp, r0, lsl #6
     9fc:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     a00:	0000009e 	muleq	r0, lr, r0
     a04:	00120304 	andseq	r0, r2, r4, lsl #6
     a08:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
     a0c:	0000009e 	muleq	r0, lr, r0
     a10:	04050008 	streq	r0, [r5], #-8
     a14:	00000062 	andeq	r0, r0, r2, rrx
     a18:	000f9606 	andeq	r9, pc, r6, lsl #12
     a1c:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
     a20:	07000000 	streq	r0, [r0, -r0]
     a24:	00000640 	andeq	r0, r0, r0, asr #12
     a28:	28060424 	stmdacs	r6, {r2, r5, sl}
     a2c:	03000001 	movweq	r0, #1
     a30:	000003fa 	strdeq	r0, [r0], -sl
     a34:	01280704 			; <UNDEFINED> instruction: 0x01280704
     a38:	03000000 	movweq	r0, #0
     a3c:	0000064c 	andeq	r0, r0, ip, asr #12
     a40:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
     a44:	03040000 	movweq	r0, #16384	; 0x4000
     a48:	000005b3 			; <UNDEFINED> instruction: 0x000005b3
     a4c:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
     a50:	03080000 	movweq	r0, #32768	; 0x8000
     a54:	000005df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     a58:	01460c04 	cmpeq	r6, r4, lsl #24
     a5c:	030c0000 	movweq	r0, #49152	; 0xc000
     a60:	00000302 	andeq	r0, r0, r2, lsl #6
     a64:	01460d04 	cmpeq	r6, r4, lsl #26
     a68:	03100000 	tsteq	r0, #0
     a6c:	0000040c 	andeq	r0, r0, ip, lsl #8
     a70:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
     a74:	03140000 	tsteq	r4, #0
     a78:	00000052 	andeq	r0, r0, r2, asr r0
     a7c:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
     a80:	03180000 	tsteq	r8, #0
     a84:	0000037d 	andeq	r0, r0, sp, ror r3
     a88:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
     a8c:	031c0000 	tsteq	ip, #0
     a90:	0000038d 	andeq	r0, r0, sp, lsl #7
     a94:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
     a98:	00200000 	eoreq	r0, r0, r0
     a9c:	00a40405 	adceq	r0, r4, r5, lsl #8
     aa0:	04080000 	streq	r0, [r8], #-0
     aa4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     aa8:	01400900 	cmpeq	r0, r0, lsl #18
     aac:	400a0000 	andmi	r0, sl, r0
     ab0:	00000001 	andeq	r0, r0, r1
     ab4:	00af0405 	adceq	r0, pc, r5, lsl #8
     ab8:	04050000 	streq	r0, [r5], #-0
     abc:	00000135 	andeq	r0, r0, r5, lsr r1
     ac0:	00064106 	andeq	r4, r6, r6, lsl #2
     ac4:	af150400 	svcge	0x00150400
     ac8:	0b000000 	bleq	ad0 <startup-0x1ffff530>
     acc:	00000162 	andeq	r0, r0, r2, ror #2
     ad0:	00000162 	andeq	r0, r0, r2, ror #2
     ad4:	0405000c 	streq	r0, [r5], #-12
     ad8:	0000014c 	andeq	r0, r0, ip, asr #2
     adc:	0004e00d 	andeq	lr, r4, sp
     ae0:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
     ae4:	0d000001 	stceq	0, cr0, [r0, #-4]
     ae8:	000003c8 	andeq	r0, r0, r8, asr #7
     aec:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
     af0:	04040000 	streq	r0, [r4], #-0
     af4:	0003aa07 	andeq	sl, r3, r7, lsl #20
     af8:	01680e00 	cmneq	r8, r0, lsl #28
     afc:	03010000 	movweq	r0, #4096	; 0x1000
     b00:	3bd80305 	blcc	ff60171c <firstTime.4040+0xdf5f7658>
     b04:	730e2000 	movwvc	r2, #57344	; 0xe000
     b08:	01000001 	tsteq	r0, r1
     b0c:	e0030504 	and	r0, r3, r4, lsl #10
     b10:	0f20003a 	svceq	0x0020003a
     b14:	000006a0 	andeq	r0, r0, r0, lsr #13
     b18:	115c0c01 	cmpne	ip, r1, lsl #24
     b1c:	00462000 	subeq	r2, r6, r0
     b20:	9c010000 	stcls	0, cr0, [r1], {-0}
     b24:	000001c3 	andeq	r0, r0, r3, asr #3
     b28:	0006e410 	andeq	lr, r6, r0, lsl r4
     b2c:	620c0100 	andvs	r0, ip, #0, 2
     b30:	02000001 	andeq	r0, r0, #1
     b34:	11007491 			; <UNDEFINED> instruction: 0x11007491
     b38:	00000302 	andeq	r0, r0, r2, lsl #6
     b3c:	114c0701 	cmpne	ip, r1, lsl #14
     b40:	00102000 	andseq	r2, r0, r0
     b44:	9c010000 	stcls	0, cr0, [r1], {-0}
     b48:	0006e410 	andeq	lr, r6, r0, lsl r4
     b4c:	62070100 	andvs	r0, r7, #0, 2
     b50:	02000001 	andeq	r0, r0, #1
     b54:	00007491 	muleq	r0, r1, r4
     b58:	0000052b 	andeq	r0, r0, fp, lsr #10
     b5c:	024a0004 	subeq	r0, sl, #4
     b60:	01040000 	mrseq	r0, (UNDEF: 4)
     b64:	00000081 	andeq	r0, r0, r1, lsl #1
     b68:	0009240c 	andeq	r2, r9, ip, lsl #8
     b6c:	0011a400 	andseq	sl, r1, r0, lsl #8
     b70:	0002a820 	andeq	sl, r2, r0, lsr #16
     b74:	00039400 	andeq	r9, r3, r0, lsl #8
     b78:	020c0200 	andeq	r0, ip, #0, 4
     b7c:	00004e05 	andeq	r4, r0, r5, lsl #28
     b80:	03090300 	movweq	r0, #37632	; 0x9300
     b84:	07020000 	streq	r0, [r2, -r0]
     b88:	0000004e 	andeq	r0, r0, lr, asr #32
     b8c:	067b0300 	ldrbteq	r0, [fp], -r0, lsl #6
     b90:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     b94:	0000004e 	andeq	r0, r0, lr, asr #32
     b98:	14760304 	ldrbtne	r0, [r6], #-772	; 0xfffffcfc
     b9c:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     ba0:	00000055 	andeq	r0, r0, r5, asr r0
     ba4:	04040008 	streq	r0, [r4], #-8
     ba8:	00032d07 	andeq	r2, r3, r7, lsl #26
     bac:	5b040500 	blpl	101fb4 <startup-0x1fefe04c>
     bb0:	04000000 	streq	r0, [r0], #-0
     bb4:	045d0801 	ldrbeq	r0, [sp], #-2049	; 0xfffff7ff
     bb8:	c8060000 	stmdagt	r6, {}	; <UNPREDICTABLE>
     bbc:	02000015 	andeq	r0, r0, #21
     bc0:	0000210a 	andeq	r2, r0, sl, lsl #2
     bc4:	00160700 	andseq	r0, r6, r0, lsl #14
     bc8:	030c0000 	movweq	r0, #49152	; 0xc000
     bcc:	00009e06 	andeq	r9, r0, r6, lsl #28
     bd0:	05480300 	strbeq	r0, [r8, #-768]	; 0xfffffd00
     bd4:	07030000 	streq	r0, [r3, -r0]
     bd8:	0000009e 	muleq	r0, lr, r0
     bdc:	001d0300 	andseq	r0, sp, r0, lsl #6
     be0:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     be4:	0000009e 	muleq	r0, lr, r0
     be8:	00120304 	andseq	r0, r2, r4, lsl #6
     bec:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
     bf0:	0000009e 	muleq	r0, lr, r0
     bf4:	04050008 	streq	r0, [r5], #-8
     bf8:	00000062 	andeq	r0, r0, r2, rrx
     bfc:	000f9606 	andeq	r9, pc, r6, lsl #12
     c00:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
     c04:	07000000 	streq	r0, [r0, -r0]
     c08:	00000640 	andeq	r0, r0, r0, asr #12
     c0c:	28060424 	stmdacs	r6, {r2, r5, sl}
     c10:	03000001 	movweq	r0, #1
     c14:	000003fa 	strdeq	r0, [r0], -sl
     c18:	01280704 			; <UNDEFINED> instruction: 0x01280704
     c1c:	03000000 	movweq	r0, #0
     c20:	0000064c 	andeq	r0, r0, ip, asr #12
     c24:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
     c28:	03040000 	movweq	r0, #16384	; 0x4000
     c2c:	000005b3 			; <UNDEFINED> instruction: 0x000005b3
     c30:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
     c34:	03080000 	movweq	r0, #32768	; 0x8000
     c38:	000005df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     c3c:	01460c04 	cmpeq	r6, r4, lsl #24
     c40:	030c0000 	movweq	r0, #49152	; 0xc000
     c44:	00000302 	andeq	r0, r0, r2, lsl #6
     c48:	01460d04 	cmpeq	r6, r4, lsl #26
     c4c:	03100000 	tsteq	r0, #0
     c50:	0000040c 	andeq	r0, r0, ip, lsl #8
     c54:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
     c58:	03140000 	tsteq	r4, #0
     c5c:	00000052 	andeq	r0, r0, r2, asr r0
     c60:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
     c64:	03180000 	tsteq	r8, #0
     c68:	0000037d 	andeq	r0, r0, sp, ror r3
     c6c:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
     c70:	031c0000 	tsteq	ip, #0
     c74:	0000038d 	andeq	r0, r0, sp, lsl #7
     c78:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
     c7c:	00200000 	eoreq	r0, r0, r0
     c80:	00a40405 	adceq	r0, r4, r5, lsl #8
     c84:	04080000 	streq	r0, [r8], #-0
     c88:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     c8c:	01400900 	cmpeq	r0, r0, lsl #18
     c90:	400a0000 	andmi	r0, sl, r0
     c94:	00000001 	andeq	r0, r0, r1
     c98:	00af0405 	adceq	r0, pc, r5, lsl #8
     c9c:	04050000 	streq	r0, [r5], #-0
     ca0:	00000135 	andeq	r0, r0, r5, lsr r1
     ca4:	00064106 	andeq	r4, r6, r6, lsl #2
     ca8:	af150400 	svcge	0x00150400
     cac:	0b000000 	bleq	cb4 <startup-0x1ffff34c>
     cb0:	00000162 	andeq	r0, r0, r2, ror #2
     cb4:	00000162 	andeq	r0, r0, r2, ror #2
     cb8:	0405000c 	streq	r0, [r5], #-12
     cbc:	0000014c 	andeq	r0, r0, ip, asr #2
     cc0:	0004e00d 	andeq	lr, r4, sp
     cc4:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
     cc8:	0d000001 	stceq	0, cr0, [r0, #-4]
     ccc:	000003c8 	andeq	r0, r0, r8, asr #7
     cd0:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
     cd4:	5b0b0000 	blpl	2c0cdc <startup-0x1fd3f324>
     cd8:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
     cdc:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     ce0:	0000018e 	andeq	r0, r0, lr, lsl #3
     ce4:	0404000b 	streq	r0, [r4], #-11
     ce8:	0003aa07 	andeq	sl, r3, r7, lsl #20
     cec:	08e90f00 	stmiaeq	r9!, {r8, r9, sl, fp}^
     cf0:	03050000 	movweq	r0, #20480	; 0x5000
     cf4:	0000017e 	andeq	r0, r0, lr, ror r1
     cf8:	78480305 	stmdavc	r8, {r0, r2, r8, r9}^
     cfc:	e30f2000 	movw	r2, #61440	; 0xf000
     d00:	06000007 	streq	r0, [r0], -r7
     d04:	00017e03 	andeq	r7, r1, r3, lsl #28
     d08:	54030500 	strpl	r0, [r3], #-1280	; 0xfffffb00
     d0c:	0f200078 	svceq	0x00200078
     d10:	000007fe 	strdeq	r0, [r0], -lr
     d14:	017e0307 	cmneq	lr, r7, lsl #6
     d18:	03050000 	movweq	r0, #20480	; 0x5000
     d1c:	20007860 	andcs	r7, r0, r0, ror #16
     d20:	00075f0f 	andeq	r5, r7, pc, lsl #30
     d24:	7e030800 	cdpvc	8, 0, cr0, cr3, cr0, {0}
     d28:	05000001 	streq	r0, [r0, #-1]
     d2c:	00786c03 	rsbseq	r6, r8, r3, lsl #24
     d30:	080f0f20 	stmdaeq	pc, {r5, r8, r9, sl, fp}	; <UNPREDICTABLE>
     d34:	03090000 	movweq	r0, #36864	; 0x9000
     d38:	0000017e 	andeq	r0, r0, lr, ror r1
     d3c:	78780305 	ldmdavc	r8!, {r0, r2, r8, r9}^
     d40:	510f2000 	mrspl	r2, CPSR
     d44:	0a000009 	beq	d70 <startup-0x1ffff290>
     d48:	00017e03 	andeq	r7, r1, r3, lsl #28
     d4c:	84030500 	strhi	r0, [r3], #-1280	; 0xfffffb00
     d50:	0f200078 	svceq	0x00200078
     d54:	000008cd 	andeq	r0, r0, sp, asr #17
     d58:	017e030b 	cmneq	lr, fp, lsl #6
     d5c:	03050000 	movweq	r0, #20480	; 0x5000
     d60:	20007890 	mulcs	r0, r0, r8
     d64:	0008320f 	andeq	r3, r8, pc, lsl #4
     d68:	7e030c00 	cdpvc	12, 0, cr0, cr3, cr0, {0}
     d6c:	05000001 	streq	r0, [r0, #-1]
     d70:	00789c03 	rsbseq	r9, r8, r3, lsl #24
     d74:	076f0f20 	strbeq	r0, [pc, -r0, lsr #30]!
     d78:	030d0000 	movweq	r0, #53248	; 0xd000
     d7c:	0000017e 	andeq	r0, r0, lr, ror r1
     d80:	78a80305 	stmiavc	r8!, {r0, r2, r8, r9}
     d84:	9d0f2000 	stcls	0, cr2, [pc, #-0]	; d8c <startup-0x1ffff274>
     d88:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
     d8c:	00017e03 	andeq	r7, r1, r3, lsl #28
     d90:	b4030500 	strlt	r0, [r3], #-1280	; 0xfffffb00
     d94:	0f200078 	svceq	0x00200078
     d98:	0000087f 	andeq	r0, r0, pc, ror r8
     d9c:	017e030f 	cmneq	lr, pc, lsl #6
     da0:	03050000 	movweq	r0, #20480	; 0x5000
     da4:	200078c0 	andcs	r7, r0, r0, asr #17
     da8:	00072310 	andeq	r2, r7, r0, lsl r3
     dac:	9e110100 	muflss	f0, f1, f0
     db0:	05000000 	streq	r0, [r0, #-0]
     db4:	003e9803 	eorseq	r9, lr, r3, lsl #16
     db8:	06f31020 	ldrbteq	r1, [r3], r0, lsr #32
     dbc:	12010000 	andne	r0, r1, #0
     dc0:	0000009e 	muleq	r0, lr, r0
     dc4:	3eb00305 	cdpcc	3, 11, cr0, cr0, cr5, {0}
     dc8:	49102000 	ldmdbmi	r0, {sp}
     dcc:	01000007 	tsteq	r0, r7
     dd0:	00009e13 	andeq	r9, r0, r3, lsl lr
     dd4:	68030500 	stmdavs	r3, {r8, sl}
     dd8:	1020003d 	eorne	r0, r0, sp, lsr r0
     ddc:	00000828 	andeq	r0, r0, r8, lsr #16
     de0:	009e1401 	addseq	r1, lr, r1, lsl #8
     de4:	03050000 	movweq	r0, #20480	; 0x5000
     de8:	20003eac 	andcs	r3, r0, ip, lsr #29
     dec:	0007f310 	andeq	pc, r7, r0, lsl r3	; <UNPREDICTABLE>
     df0:	9e150100 	muflss	f0, f5, f0
     df4:	05000000 	streq	r0, [r0, #-0]
     df8:	003e8403 	eorseq	r8, lr, r3, lsl #8
     dfc:	070b1020 	streq	r1, [fp, -r0, lsr #32]
     e00:	16010000 	strne	r0, [r1], -r0
     e04:	0000009e 	muleq	r0, lr, r0
     e08:	3d780305 	ldclcc	3, cr0, [r8, #-20]!	; 0xffffffec
     e0c:	80102000 	andshi	r2, r0, r0
     e10:	01000007 	tsteq	r0, r7
     e14:	00009e17 	andeq	r9, r0, r7, lsl lr
     e18:	a8030500 	stmdage	r3, {r8, sl}
     e1c:	1020003e 	eorne	r0, r0, lr, lsr r0
     e20:	000008a6 	andeq	r0, r0, r6, lsr #17
     e24:	009e1801 	addseq	r1, lr, r1, lsl #16
     e28:	03050000 	movweq	r0, #20480	; 0x5000
     e2c:	20003e64 	andcs	r3, r0, r4, ror #28
     e30:	00075410 	andeq	r5, r7, r0, lsl r4
     e34:	9e190100 	muflse	f0, f1, f0
     e38:	05000000 	streq	r0, [r0, #-0]
     e3c:	003dd003 	eorseq	sp, sp, r3
     e40:	06e91020 	strbteq	r1, [r9], r0, lsr #32
     e44:	1a010000 	bne	40e4c <startup-0x1ffbf1b4>
     e48:	0000009e 	muleq	r0, lr, r0
     e4c:	3e800305 	cdpcc	3, 8, cr0, cr0, cr5, {0}
     e50:	c1102000 	tstgt	r0, r0
     e54:	01000007 	tsteq	r0, r7
     e58:	00009e1b 	andeq	r9, r0, fp, lsl lr
     e5c:	88030500 	stmdahi	r3, {r8, sl}
     e60:	1020003e 	eorne	r0, r0, lr, lsr r0
     e64:	0000073b 	andeq	r0, r0, fp, lsr r7
     e68:	00621d01 	rsbeq	r1, r2, r1, lsl #26
     e6c:	03050000 	movweq	r0, #20480	; 0x5000
     e70:	20003da0 	andcs	r3, r0, r0, lsr #27
     e74:	0008b010 	andeq	fp, r8, r0, lsl r0
     e78:	621e0100 	andsvs	r0, lr, #0, 2
     e7c:	05000000 	streq	r0, [r0, #-0]
     e80:	003e8c03 	eorseq	r8, lr, r3, lsl #24
     e84:	085c1020 	ldmdaeq	ip, {r5, ip}^
     e88:	1f010000 	svcne	0x00010000
     e8c:	00000062 	andeq	r0, r0, r2, rrx
     e90:	3e680305 	cdpcc	3, 6, cr0, cr8, cr5, {0}
     e94:	fd102000 	ldc2	0, cr2, [r0, #-0]
     e98:	01000006 	tsteq	r0, r6
     e9c:	00006220 	andeq	r6, r0, r0, lsr #4
     ea0:	94030500 	strls	r0, [r3], #-1280	; 0xfffffb00
     ea4:	1020003d 	eorne	r0, r0, sp, lsr r0
     ea8:	000008fb 	strdeq	r0, [r0], -fp
     eac:	00622101 	rsbeq	r2, r2, r1, lsl #2
     eb0:	03050000 	movweq	r0, #20480	; 0x5000
     eb4:	20003e9c 	mulcs	r0, ip, lr
     eb8:	00072d10 	andeq	r2, r7, r0, lsl sp
     ebc:	62220100 	eorvs	r0, r2, #0, 2
     ec0:	05000000 	streq	r0, [r0, #-0]
     ec4:	003e4c03 	eorseq	r4, lr, r3, lsl #24
     ec8:	08421020 	stmdaeq	r2, {r5, ip}^
     ecc:	23010000 	movwcs	r0, #4096	; 0x1000
     ed0:	00000062 	andeq	r0, r0, r2, rrx
     ed4:	3d6c0305 	stclcc	3, cr0, [ip, #-20]!	; 0xffffffec
     ed8:	15102000 	ldrne	r2, [r0, #-0]
     edc:	01000007 	tsteq	r0, r7
     ee0:	00006224 	andeq	r6, r0, r4, lsr #4
     ee4:	7c030500 	cfstr32vc	mvfx0, [r3], {-0}
     ee8:	1020003d 	eorne	r0, r0, sp, lsr r0
     eec:	000008be 			; <UNDEFINED> instruction: 0x000008be
     ef0:	00622501 	rsbeq	r2, r2, r1, lsl #10
     ef4:	03050000 	movweq	r0, #20480	; 0x5000
     ef8:	20003db8 			; <UNDEFINED> instruction: 0x20003db8
     efc:	0007d510 	andeq	sp, r7, r0, lsl r5
     f00:	62260100 	eorvs	r0, r6, #0, 2
     f04:	05000000 	streq	r0, [r0, #-0]
     f08:	003e4003 	eorseq	r4, lr, r3
     f0c:	09151020 	ldmdbeq	r5, {r5, ip}
     f10:	27010000 	strcs	r0, [r1, -r0]
     f14:	00000062 	andeq	r0, r0, r2, rrx
     f18:	3e740305 	cdpcc	3, 7, cr0, cr4, cr5, {0}
     f1c:	20102000 	andscs	r2, r0, r0
     f20:	01000008 	tsteq	r0, r8
     f24:	00014c2a 	andeq	r4, r1, sl, lsr #24
     f28:	d4030500 	strle	r0, [r3], #-1280	; 0xfffffb00
     f2c:	1020003d 	eorne	r0, r0, sp, lsr r0
     f30:	0000089b 	muleq	r0, fp, r8
     f34:	00a42b01 	adceq	r2, r4, r1, lsl #22
     f38:	03050000 	movweq	r0, #20480	; 0x5000
     f3c:	20003dc4 	andcs	r3, r0, r4, asr #27
     f40:	00090a10 	andeq	r0, r9, r0, lsl sl
     f44:	a42c0100 	strtge	r0, [ip], #-256	; 0xffffff00
     f48:	05000000 	streq	r0, [r0, #-0]
     f4c:	003d8803 	eorseq	r8, sp, r3, lsl #16
     f50:	07ad1020 	streq	r1, [sp, r0, lsr #32]!
     f54:	2d010000 	stccs	0, cr0, [r1, #-0]
     f58:	000000a4 	andeq	r0, r0, r4, lsr #1
     f5c:	3dac0305 	stccc	3, cr0, [ip, #20]!
     f60:	51102000 	tstpl	r0, r0
     f64:	01000008 	tsteq	r0, r8
     f68:	0000a42e 	andeq	sl, r0, lr, lsr #8
     f6c:	58030500 	stmdapl	r3, {r8, sl}
     f70:	1020003e 	eorne	r0, r0, lr, lsr r0
     f74:	000008de 	ldrdeq	r0, [r0], -lr
     f78:	00a42f01 	adceq	r2, r4, r1, lsl #30
     f7c:	03050000 	movweq	r0, #20480	; 0x5000
     f80:	20003df8 	strdcs	r3, [r0], -r8
     f84:	0000a40b 	andeq	sl, r0, fp, lsl #8
     f88:	00043c00 	andeq	r3, r4, r0, lsl #24
     f8c:	018e0e00 	orreq	r0, lr, r0, lsl #28
     f90:	00040000 	andeq	r0, r4, r0
     f94:	00089010 	andeq	r9, r8, r0, lsl r0
     f98:	2c300100 	ldfcss	f0, [r0], #-0
     f9c:	05000004 	streq	r0, [r0, #-4]
     fa0:	003e0403 	eorseq	r0, lr, r3, lsl #8
     fa4:	08751120 	ldmdaeq	r5!, {r5, r8, ip}^
     fa8:	5f010000 	svcpl	0x00010000
     fac:	20001328 	andcs	r1, r0, r8, lsr #6
     fb0:	00000124 	andeq	r0, r0, r4, lsr #2
     fb4:	04829c01 	streq	r9, [r2], #3073	; 0xc01
     fb8:	20120000 	andscs	r0, r2, r0
     fbc:	01000008 	tsteq	r0, r8
     fc0:	0001625f 	andeq	r6, r1, pc, asr r2
     fc4:	6c910200 	lfmvs	f0, 4, [r1], {0}
     fc8:	00086b0f 	andeq	r6, r8, pc, lsl #22
     fcc:	2e600100 	powcss	f0, f0, f0
     fd0:	05000001 	streq	r0, [r0, #-1]
     fd4:	0078cc03 	rsbseq	ip, r8, r3, lsl #24
     fd8:	33130020 	tstcc	r3, #32
     fdc:	01000004 	tsteq	r0, r4
     fe0:	0011a431 	andseq	sl, r1, r1, lsr r4
     fe4:	00018420 	andeq	r8, r1, r0, lsr #8
     fe8:	0f9c0100 	svceq	0x009c0100
     fec:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
     ff0:	009e3201 	addseq	r3, lr, r1, lsl #4
     ff4:	91020000 	mrsls	r0, (UNDEF: 2)
     ff8:	078b0f74 			; <UNDEFINED> instruction: 0x078b0f74
     ffc:	36010000 	strcc	r0, [r1], -r0
    1000:	0000009e 	muleq	r0, lr, r0
    1004:	0f709102 	svceq	0x00709102
    1008:	000007cc 	andeq	r0, r0, ip, asr #15
    100c:	009e3a01 	addseq	r3, lr, r1, lsl #20
    1010:	91020000 	mrsls	r0, (UNDEF: 2)
    1014:	07940f6c 	ldreq	r0, [r4, ip, ror #30]
    1018:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    101c:	0000009e 	muleq	r0, lr, r0
    1020:	0f689102 	svceq	0x00689102
    1024:	000003e6 	andeq	r0, r0, r6, ror #7
    1028:	009e4201 	addseq	r4, lr, r1, lsl #4
    102c:	91020000 	mrsls	r0, (UNDEF: 2)
    1030:	02c50f64 	sbceq	r0, r5, #100, 30	; 0x190
    1034:	46010000 	strmi	r0, [r1], -r0
    1038:	0000009e 	muleq	r0, lr, r0
    103c:	0f609102 	svceq	0x00609102
    1040:	000002ce 	andeq	r0, r0, lr, asr #5
    1044:	009e4a01 	addseq	r4, lr, r1, lsl #20
    1048:	91020000 	mrsls	r0, (UNDEF: 2)
    104c:	02d70f5c 	sbcseq	r0, r7, #92, 30	; 0x170
    1050:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    1054:	0000009e 	muleq	r0, lr, r0
    1058:	0f589102 	svceq	0x00589102
    105c:	000002e0 	andeq	r0, r0, r0, ror #5
    1060:	009e5201 	addseq	r5, lr, r1, lsl #4
    1064:	91020000 	mrsls	r0, (UNDEF: 2)
    1068:	02e90f54 	rsceq	r0, r9, #84, 30	; 0x150
    106c:	56010000 	strpl	r0, [r1], -r0
    1070:	0000009e 	muleq	r0, lr, r0
    1074:	0f509102 	svceq	0x00509102
    1078:	00000067 	andeq	r0, r0, r7, rrx
    107c:	009e5a01 	addseq	r5, lr, r1, lsl #20
    1080:	91020000 	mrsls	r0, (UNDEF: 2)
    1084:	f700004c 			; <UNDEFINED> instruction: 0xf700004c
    1088:	04000001 	streq	r0, [r0], #-1
    108c:	00034a00 	andeq	r4, r3, r0, lsl #20
    1090:	81010400 	tsthi	r1, r0, lsl #8
    1094:	0c000000 	stceq	0, cr0, [r0], {-0}
    1098:	0000099a 	muleq	r0, sl, r9
    109c:	2000144c 	andcs	r1, r0, ip, asr #8
    10a0:	000001d4 	ldrdeq	r0, [r0], -r4
    10a4:	0000051c 	andeq	r0, r0, ip, lsl r5
    10a8:	2d070402 	cfstrscs	mvf0, [r7, #-8]
    10ac:	02000003 	andeq	r0, r0, #3
    10b0:	03270702 			; <UNDEFINED> instruction: 0x03270702
    10b4:	01020000 	mrseq	r0, (UNDEF: 2)
    10b8:	00045d08 	andeq	r5, r4, r8, lsl #26
    10bc:	020c0300 	andeq	r0, ip, #0, 6
    10c0:	00006305 	andeq	r6, r0, r5, lsl #6
    10c4:	03090400 	movweq	r0, #37888	; 0x9400
    10c8:	07020000 	streq	r0, [r2, -r0]
    10cc:	00000021 	andeq	r0, r0, r1, lsr #32
    10d0:	067b0400 	ldrbteq	r0, [fp], -r0, lsl #8
    10d4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    10d8:	00000021 	andeq	r0, r0, r1, lsr #32
    10dc:	14760404 	ldrbtne	r0, [r6], #-1028	; 0xfffffbfc
    10e0:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    10e4:	00000063 	andeq	r0, r0, r3, rrx
    10e8:	04050008 	streq	r0, [r5], #-8
    10ec:	0000002f 	andeq	r0, r0, pc, lsr #32
    10f0:	0015c806 	andseq	ip, r5, r6, lsl #16
    10f4:	360a0200 	strcc	r0, [sl], -r0, lsl #4
    10f8:	07000000 	streq	r0, [r0, -r0]
    10fc:	00000016 	andeq	r0, r0, r6, lsl r0
    1100:	a506030c 	strge	r0, [r6, #-780]	; 0xfffffcf4
    1104:	04000000 	streq	r0, [r0], #-0
    1108:	00000548 	andeq	r0, r0, r8, asr #10
    110c:	00a50703 	adceq	r0, r5, r3, lsl #14
    1110:	04000000 	streq	r0, [r0], #-0
    1114:	0000001d 	andeq	r0, r0, sp, lsl r0
    1118:	00a50803 	adceq	r0, r5, r3, lsl #16
    111c:	04040000 	streq	r0, [r4], #-0
    1120:	00000012 	andeq	r0, r0, r2, lsl r0
    1124:	00a50903 	adceq	r0, r5, r3, lsl #18
    1128:	00080000 	andeq	r0, r8, r0
    112c:	00690405 	rsbeq	r0, r9, r5, lsl #8
    1130:	96060000 	strls	r0, [r6], -r0
    1134:	0300000f 	movweq	r0, #15
    1138:	0000740a 	andeq	r7, r0, sl, lsl #8
    113c:	06400700 	strbeq	r0, [r0], -r0, lsl #14
    1140:	04240000 	strteq	r0, [r4], #-0
    1144:	00012f06 	andeq	r2, r1, r6, lsl #30
    1148:	03fa0400 	mvnseq	r0, #0, 8
    114c:	07040000 	streq	r0, [r4, -r0]
    1150:	0000012f 	andeq	r0, r0, pc, lsr #2
    1154:	064c0400 	strbeq	r0, [ip], -r0, lsl #8
    1158:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    115c:	00000135 	andeq	r0, r0, r5, lsr r1
    1160:	05b30404 	ldreq	r0, [r3, #1028]!	; 0x404
    1164:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    1168:	00000135 	andeq	r0, r0, r5, lsr r1
    116c:	05df0408 	ldrbeq	r0, [pc, #1032]	; 157c <startup-0x1fffea84>
    1170:	0c040000 	stceq	0, cr0, [r4], {-0}
    1174:	0000014d 	andeq	r0, r0, sp, asr #2
    1178:	0302040c 	movweq	r0, #9228	; 0x240c
    117c:	0d040000 	stceq	0, cr0, [r4, #-0]
    1180:	0000014d 	andeq	r0, r0, sp, asr #2
    1184:	040c0410 	streq	r0, [ip], #-1040	; 0xfffffbf0
    1188:	10040000 	andne	r0, r4, r0
    118c:	00000135 	andeq	r0, r0, r5, lsr r1
    1190:	00520414 	subseq	r0, r2, r4, lsl r4
    1194:	11040000 	mrsne	r0, (UNDEF: 4)
    1198:	00000135 	andeq	r0, r0, r5, lsr r1
    119c:	037d0418 	cmneq	sp, #24, 8	; 0x18000000
    11a0:	12040000 	andne	r0, r4, #0
    11a4:	00000135 	andeq	r0, r0, r5, lsr r1
    11a8:	038d041c 	orreq	r0, sp, #28, 8	; 0x1c000000
    11ac:	13040000 	movwne	r0, #16384	; 0x4000
    11b0:	00000135 	andeq	r0, r0, r5, lsr r1
    11b4:	04050020 	streq	r0, [r5], #-32	; 0xffffffe0
    11b8:	000000ab 	andeq	r0, r0, fp, lsr #1
    11bc:	69050408 	stmdbvs	r5, {r3, sl}
    11c0:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    11c4:	00000147 	andeq	r0, r0, r7, asr #2
    11c8:	0001470a 	andeq	r4, r1, sl, lsl #14
    11cc:	04050000 	streq	r0, [r5], #-0
    11d0:	000000b6 	strheq	r0, [r0], -r6
    11d4:	013c0405 	teqeq	ip, r5, lsl #8
    11d8:	41060000 	mrsmi	r0, (UNDEF: 6)
    11dc:	04000006 	streq	r0, [r0], #-6
    11e0:	0000b615 	andeq	fp, r0, r5, lsl r6
    11e4:	01690b00 	cmneq	r9, r0, lsl #22
    11e8:	01690000 	cmneq	r9, r0
    11ec:	000c0000 	andeq	r0, ip, r0
    11f0:	01530405 	cmpeq	r3, r5, lsl #8
    11f4:	e00d0000 	and	r0, sp, r0
    11f8:	04000004 	streq	r0, [r0], #-4
    11fc:	00015e1c 	andeq	r5, r1, ip, lsl lr
    1200:	03c80d00 	biceq	r0, r8, #0, 26
    1204:	1d040000 	stcne	0, cr0, [r4, #-0]
    1208:	00000135 	andeq	r0, r0, r5, lsr r1
    120c:	0009c90e 	andeq	ip, r9, lr, lsl #18
    1210:	4c060100 	stfmis	f0, [r6], {-0}
    1214:	d4200014 	strtle	r0, [r0], #-20	; 0xffffffec
    1218:	01000001 	tsteq	r0, r1
    121c:	06e40f9c 	usateq	r0, #4, ip, lsl #31
    1220:	06010000 	streq	r0, [r1], -r0
    1224:	00000169 	andeq	r0, r0, r9, ror #2
    1228:	10749102 	rsbsne	r9, r4, r2, lsl #2
    122c:	00000970 	andeq	r0, r0, r0, ror r9
    1230:	01351001 	teqeq	r5, r1
    1234:	03050000 	movweq	r0, #20480	; 0x5000
    1238:	20003ae4 	andcs	r3, r0, r4, ror #21
    123c:	00096110 	andeq	r6, r9, r0, lsl r1
    1240:	35110100 	ldrcc	r0, [r1, #-256]	; 0xffffff00
    1244:	05000001 	streq	r0, [r0, #-1]
    1248:	003aec03 	eorseq	lr, sl, r3, lsl #24
    124c:	098c1020 	stmibeq	ip, {r5, ip}
    1250:	12010000 	andne	r0, r1, #0
    1254:	00000135 	andeq	r0, r0, r5, lsr r1
    1258:	3af40305 	bcc	ffd01e74 <firstTime.4040+0xdfcf7db0>
    125c:	85102000 	ldrhi	r2, [r0, #-0]
    1260:	01000009 	tsteq	r0, r9
    1264:	00013513 	andeq	r3, r1, r3, lsl r5
    1268:	f0030500 			; <UNDEFINED> instruction: 0xf0030500
    126c:	1020003a 	eorne	r0, r0, sl, lsr r0
    1270:	0000097e 	andeq	r0, r0, lr, ror r9
    1274:	01351401 	teqeq	r5, r1, lsl #8
    1278:	03050000 	movweq	r0, #20480	; 0x5000
    127c:	20003ae8 	andcs	r3, r0, r8, ror #21
    1280:	06410000 	strbeq	r0, [r1], -r0
    1284:	00040000 	andeq	r0, r4, r0
    1288:	00000418 	andeq	r0, r0, r8, lsl r4
    128c:	00810104 	addeq	r0, r1, r4, lsl #2
    1290:	4a0c0000 	bmi	301298 <startup-0x1fcfed68>
    1294:	2000000c 	andcs	r0, r0, ip
    1298:	64200016 	strtvs	r0, [r0], #-22	; 0xffffffea
    129c:	03000003 	movweq	r0, #3
    12a0:	02000006 	andeq	r0, r0, #6
    12a4:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
    12a8:	03000000 	movweq	r0, #0
    12ac:	00000309 	andeq	r0, r0, r9, lsl #6
    12b0:	004e0702 	subeq	r0, lr, r2, lsl #14
    12b4:	03000000 	movweq	r0, #0
    12b8:	0000067b 	andeq	r0, r0, fp, ror r6
    12bc:	004e0802 	subeq	r0, lr, r2, lsl #16
    12c0:	03040000 	movweq	r0, #16384	; 0x4000
    12c4:	00001476 	andeq	r1, r0, r6, ror r4
    12c8:	00550902 	subseq	r0, r5, r2, lsl #18
    12cc:	00080000 	andeq	r0, r8, r0
    12d0:	2d070404 	cfstrscs	mvf0, [r7, #-16]
    12d4:	05000003 	streq	r0, [r0, #-3]
    12d8:	00005b04 	andeq	r5, r0, r4, lsl #22
    12dc:	08010400 	stmdaeq	r1, {sl}
    12e0:	0000045d 	andeq	r0, r0, sp, asr r4
    12e4:	0015c806 	andseq	ip, r5, r6, lsl #16
    12e8:	210a0200 	mrscs	r0, R10_fiq
    12ec:	07000000 	streq	r0, [r0, -r0]
    12f0:	00000016 	andeq	r0, r0, r6, lsl r0
    12f4:	9e06030c 	cdpls	3, 0, cr0, cr6, cr12, {0}
    12f8:	03000000 	movweq	r0, #0
    12fc:	00000548 	andeq	r0, r0, r8, asr #10
    1300:	009e0703 	addseq	r0, lr, r3, lsl #14
    1304:	03000000 	movweq	r0, #0
    1308:	0000001d 	andeq	r0, r0, sp, lsl r0
    130c:	009e0803 	addseq	r0, lr, r3, lsl #16
    1310:	03040000 	movweq	r0, #16384	; 0x4000
    1314:	00000012 	andeq	r0, r0, r2, lsl r0
    1318:	009e0903 	addseq	r0, lr, r3, lsl #18
    131c:	00080000 	andeq	r0, r8, r0
    1320:	00620405 	rsbeq	r0, r2, r5, lsl #8
    1324:	96060000 	strls	r0, [r6], -r0
    1328:	0300000f 	movweq	r0, #15
    132c:	00006d0a 	andeq	r6, r0, sl, lsl #26
    1330:	06400700 	strbeq	r0, [r0], -r0, lsl #14
    1334:	04240000 	strteq	r0, [r4], #-0
    1338:	00012806 	andeq	r2, r1, r6, lsl #16
    133c:	03fa0300 	mvnseq	r0, #0, 6
    1340:	07040000 	streq	r0, [r4, -r0]
    1344:	00000128 	andeq	r0, r0, r8, lsr #2
    1348:	064c0300 	strbeq	r0, [ip], -r0, lsl #6
    134c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    1350:	0000012e 	andeq	r0, r0, lr, lsr #2
    1354:	05b30304 	ldreq	r0, [r3, #772]!	; 0x304
    1358:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    135c:	0000012e 	andeq	r0, r0, lr, lsr #2
    1360:	05df0308 	ldrbeq	r0, [pc, #776]	; 1670 <startup-0x1fffe990>
    1364:	0c040000 	stceq	0, cr0, [r4], {-0}
    1368:	00000146 	andeq	r0, r0, r6, asr #2
    136c:	0302030c 	movweq	r0, #8972	; 0x230c
    1370:	0d040000 	stceq	0, cr0, [r4, #-0]
    1374:	00000146 	andeq	r0, r0, r6, asr #2
    1378:	040c0310 	streq	r0, [ip], #-784	; 0xfffffcf0
    137c:	10040000 	andne	r0, r4, r0
    1380:	0000012e 	andeq	r0, r0, lr, lsr #2
    1384:	00520314 	subseq	r0, r2, r4, lsl r3
    1388:	11040000 	mrsne	r0, (UNDEF: 4)
    138c:	0000012e 	andeq	r0, r0, lr, lsr #2
    1390:	037d0318 	cmneq	sp, #24, 6	; 0x60000000
    1394:	12040000 	andne	r0, r4, #0
    1398:	0000012e 	andeq	r0, r0, lr, lsr #2
    139c:	038d031c 	orreq	r0, sp, #28, 6	; 0x70000000
    13a0:	13040000 	movwne	r0, #16384	; 0x4000
    13a4:	0000012e 	andeq	r0, r0, lr, lsr #2
    13a8:	04050020 	streq	r0, [r5], #-32	; 0xffffffe0
    13ac:	000000a4 	andeq	r0, r0, r4, lsr #1
    13b0:	69050408 	stmdbvs	r5, {r3, sl}
    13b4:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    13b8:	00000140 	andeq	r0, r0, r0, asr #2
    13bc:	0001400a 	andeq	r4, r1, sl
    13c0:	04050000 	streq	r0, [r5], #-0
    13c4:	000000af 	andeq	r0, r0, pc, lsr #1
    13c8:	01350405 	teqeq	r5, r5, lsl #8
    13cc:	41060000 	mrsmi	r0, (UNDEF: 6)
    13d0:	04000006 	streq	r0, [r0], #-6
    13d4:	0000af15 	andeq	sl, r0, r5, lsl pc
    13d8:	01620b00 	cmneq	r2, r0, lsl #22
    13dc:	01620000 	cmneq	r2, r0
    13e0:	000c0000 	andeq	r0, ip, r0
    13e4:	014c0405 	cmpeq	ip, r5, lsl #8
    13e8:	e00d0000 	and	r0, sp, r0
    13ec:	04000004 	streq	r0, [r0], #-4
    13f0:	0001571c 	andeq	r5, r1, ip, lsl r7
    13f4:	03c80d00 	biceq	r0, r8, #0, 26
    13f8:	1d040000 	stcne	0, cr0, [r4, #-0]
    13fc:	0000012e 	andeq	r0, r0, lr, lsr #2
    1400:	00005b0b 	andeq	r5, r0, fp, lsl #22
    1404:	00018e00 	andeq	r8, r1, r0, lsl #28
    1408:	018e0e00 	orreq	r0, lr, r0, lsl #28
    140c:	00630000 	rsbeq	r0, r3, r0
    1410:	aa070404 	bge	1c2428 <startup-0x1fe3dbd8>
    1414:	0f000003 	svceq	0x00000003
    1418:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
    141c:	017e0305 	cmneq	lr, r5, lsl #6
    1420:	03050000 	movweq	r0, #20480	; 0x5000
    1424:	200078d0 	ldrdcs	r7, [r0], -r0
    1428:	000b1b0f 	andeq	r1, fp, pc, lsl #22
    142c:	7e030600 	cfmadd32vc	mvax0, mvfx0, mvfx3, mvfx0
    1430:	05000001 	streq	r0, [r0, #-1]
    1434:	00793403 	rsbseq	r3, r9, r3, lsl #8
    1438:	0b630f20 	bleq	18c50c0 <startup-0x1e73af40>
    143c:	03070000 	movweq	r0, #28672	; 0x7000
    1440:	0000017e 	andeq	r0, r0, lr, ror r1
    1444:	79980305 	ldmibvc	r8, {r0, r2, r8, r9}
    1448:	0a0f2000 	beq	3c9450 <startup-0x1fc36bb0>
    144c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1450:	00017e03 	andeq	r7, r1, r3, lsl #28
    1454:	fc030500 	stc2	5, cr0, [r3], {-0}
    1458:	0f200079 	svceq	0x00200079
    145c:	00000c89 	andeq	r0, r0, r9, lsl #25
    1460:	017e0309 	cmneq	lr, r9, lsl #6
    1464:	03050000 	movweq	r0, #20480	; 0x5000
    1468:	20007a60 	andcs	r7, r0, r0, ror #20
    146c:	000d5d0f 	andeq	r5, sp, pc, lsl #26
    1470:	7e030a00 	vmlavc.f32	s0, s6, s0
    1474:	05000001 	streq	r0, [r0, #-1]
    1478:	007ac403 	rsbseq	ip, sl, r3, lsl #8
    147c:	0b360f20 	bleq	d85104 <startup-0x1f27aefc>
    1480:	030b0000 	movweq	r0, #45056	; 0xb000
    1484:	0000017e 	andeq	r0, r0, lr, ror r1
    1488:	7b280305 	blvc	a020a4 <startup-0x1f5fdf5c>
    148c:	240f2000 	strcs	r2, [pc], #-0	; 1494 <startup-0x1fffeb6c>
    1490:	0c00000c 	stceq	0, cr0, [r0], {12}
    1494:	00017e03 	andeq	r7, r1, r3, lsl #28
    1498:	8c030500 	cfstr32hi	mvfx0, [r3], {-0}
    149c:	0f20007b 	svceq	0x0020007b
    14a0:	000009e5 	andeq	r0, r0, r5, ror #19
    14a4:	017e030d 	cmneq	lr, sp, lsl #6
    14a8:	03050000 	movweq	r0, #20480	; 0x5000
    14ac:	20007bf0 	strdcs	r7, [r0], -r0
    14b0:	000b470f 	andeq	r4, fp, pc, lsl #14
    14b4:	7e030e00 	cdpvc	14, 0, cr0, cr3, cr0, {0}
    14b8:	05000001 	streq	r0, [r0, #-1]
    14bc:	007c5403 	rsbseq	r5, ip, r3, lsl #8
    14c0:	0bcb0f20 	bleq	ff2c5148 <firstTime.4040+0xdf2bb084>
    14c4:	030f0000 	movweq	r0, #61440	; 0xf000
    14c8:	0000017e 	andeq	r0, r0, lr, ror r1
    14cc:	7cb80305 	ldcvc	3, cr0, [r8], #20
    14d0:	010f2000 	mrseq	r2, CPSR
    14d4:	1000000a 	andne	r0, r0, sl
    14d8:	00017e03 	andeq	r7, r1, r3, lsl #28
    14dc:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
    14e0:	0f20007d 	svceq	0x0020007d
    14e4:	00000b74 	andeq	r0, r0, r4, ror fp
    14e8:	017e0311 	cmneq	lr, r1, lsl r3
    14ec:	03050000 	movweq	r0, #20480	; 0x5000
    14f0:	20007d80 	andcs	r7, r0, r0, lsl #27
    14f4:	000b940f 	andeq	r9, fp, pc, lsl #8
    14f8:	7e031200 	cdpvc	2, 0, cr1, cr3, cr0, {0}
    14fc:	05000001 	streq	r0, [r0, #-1]
    1500:	007de403 	rsbseq	lr, sp, r3, lsl #8
    1504:	0a2b0f20 	beq	ac518c <startup-0x1f53ae74>
    1508:	03130000 	tsteq	r3, #0
    150c:	0000017e 	andeq	r0, r0, lr, ror r1
    1510:	7e480305 	cdpvc	3, 4, cr0, cr8, cr5, {0}
    1514:	34102000 	ldrcc	r2, [r0], #-0
    1518:	0100000c 	tsteq	r0, ip
    151c:	00009e15 	andeq	r9, r0, r5, lsl lr
    1520:	20030500 	andcs	r0, r3, r0, lsl #10
    1524:	1020003f 	eorne	r0, r0, pc, lsr r0
    1528:	00000a67 	andeq	r0, r0, r7, ror #20
    152c:	009e1601 	addseq	r1, lr, r1, lsl #12
    1530:	03050000 	movweq	r0, #20480	; 0x5000
    1534:	20003eb8 			; <UNDEFINED> instruction: 0x20003eb8
    1538:	000a5110 	andeq	r5, sl, r0, lsl r1
    153c:	9e170100 	muflss	f0, f7, f0
    1540:	05000000 	streq	r0, [r0, #-0]
    1544:	003fb003 	eorseq	fp, pc, r3
    1548:	0aa91020 	beq	fea455d0 <firstTime.4040+0xdea3b50c>
    154c:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    1550:	0000009e 	muleq	r0, lr, r0
    1554:	3f1c0305 	svccc	0x001c0305
    1558:	a4102000 	ldrge	r2, [r0], #-0
    155c:	0100000b 	tsteq	r0, fp
    1560:	00009e19 	andeq	r9, r0, r9, lsl lr
    1564:	a0030500 	andge	r0, r3, r0, lsl #10
    1568:	1020003f 	eorne	r0, r0, pc, lsr r0
    156c:	00000c3f 	andeq	r0, r0, pc, lsr ip
    1570:	009e1a01 	addseq	r1, lr, r1, lsl #20
    1574:	03050000 	movweq	r0, #20480	; 0x5000
    1578:	20004054 	andcs	r4, r0, r4, asr r0
    157c:	000a5c10 	andeq	r5, sl, r0, lsl ip
    1580:	9e1b0100 	muflse	f0, f3, f0
    1584:	05000000 	streq	r0, [r0, #-0]
    1588:	003f1403 	eorseq	r1, pc, r3, lsl #8
    158c:	0ccc1020 	stcleq	0, cr1, [ip], {32}
    1590:	1c010000 	stcne	0, cr0, [r1], {-0}
    1594:	0000009e 	muleq	r0, lr, r0
    1598:	3f3c0305 	svccc	0x003c0305
    159c:	3c102000 	ldccc	0, cr2, [r0], {-0}
    15a0:	0100000a 	tsteq	r0, sl
    15a4:	00009e1d 	andeq	r9, r0, sp, lsl lr
    15a8:	68030500 	stmdavs	r3, {r8, sl}
    15ac:	1020003f 	eorne	r0, r0, pc, lsr r0
    15b0:	00000c0a 	andeq	r0, r0, sl, lsl #24
    15b4:	009e1e01 	addseq	r1, lr, r1, lsl #28
    15b8:	03050000 	movweq	r0, #20480	; 0x5000
    15bc:	20004038 	andcs	r4, r0, r8, lsr r0
    15c0:	000a9f10 	andeq	r9, sl, r0, lsl pc
    15c4:	9e1f0100 	muflse	f0, f7, f0
    15c8:	05000000 	streq	r0, [r0, #-0]
    15cc:	003f1803 	eorseq	r1, pc, r3, lsl #16
    15d0:	0d141020 	ldceq	0, cr1, [r4, #-128]	; 0xffffff80
    15d4:	20010000 	andcs	r0, r1, r0
    15d8:	0000009e 	muleq	r0, lr, r0
    15dc:	3eb40305 	cdpcc	3, 11, cr0, cr4, cr5, {0}
    15e0:	80102000 	andshi	r2, r0, r0
    15e4:	0100000a 	tsteq	r0, sl
    15e8:	00009e21 	andeq	r9, r0, r1, lsr #28
    15ec:	c8030500 	stmdagt	r3, {r8, sl}
    15f0:	1020003e 	eorne	r0, r0, lr, lsr r0
    15f4:	00000ca6 	andeq	r0, r0, r6, lsr #25
    15f8:	009e2201 	addseq	r2, lr, r1, lsl #4
    15fc:	03050000 	movweq	r0, #20480	; 0x5000
    1600:	20003f4c 	andcs	r3, r0, ip, asr #30
    1604:	000be510 	andeq	lr, fp, r0, lsl r5
    1608:	9e230100 	suflss	f0, f3, f0
    160c:	05000000 	streq	r0, [r0, #-0]
    1610:	003f9003 	eorseq	r9, pc, r3
    1614:	0ce31020 	stcleq	0, cr1, [r3], #128	; 0x80
    1618:	25010000 	strcs	r0, [r1, #-0]
    161c:	00000062 	andeq	r0, r0, r2, rrx
    1620:	3f300305 	svccc	0x00300305
    1624:	e4102000 	ldr	r2, [r0], #-0
    1628:	0100000a 	tsteq	r0, sl
    162c:	00006226 	andeq	r6, r0, r6, lsr #4
    1630:	a4030500 	strge	r0, [r3], #-1280	; 0xfffffb00
    1634:	1020003f 	eorne	r0, r0, pc, lsr r0
    1638:	00000c99 	muleq	r0, r9, ip
    163c:	00622701 	rsbeq	r2, r2, r1, lsl #14
    1640:	03050000 	movweq	r0, #20480	; 0x5000
    1644:	20003f40 	andcs	r3, r0, r0, asr #30
    1648:	000c1510 	andeq	r1, ip, r0, lsl r5
    164c:	62280100 	eorvs	r0, r8, #0, 2
    1650:	05000000 	streq	r0, [r0, #-0]
    1654:	00403c03 	subeq	r3, r0, r3, lsl #24
    1658:	09d61020 	ldmibeq	r6, {r5, ip}^
    165c:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    1660:	00000062 	andeq	r0, r0, r2, rrx
    1664:	3fb40305 	svccc	0x00b40305
    1668:	c8102000 	ldmdagt	r0, {sp}
    166c:	0100000a 	tsteq	r0, sl
    1670:	0000622a 	andeq	r6, r0, sl, lsr #4
    1674:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
    1678:	1020003f 	eorne	r0, r0, pc, lsr r0
    167c:	00000cf1 	strdeq	r0, [r0], -r1
    1680:	00622b01 	rsbeq	r2, r2, r1, lsl #22
    1684:	03050000 	movweq	r0, #20480	; 0x5000
    1688:	20003f94 	mulcs	r0, r4, pc	; <UNPREDICTABLE>
    168c:	000b8510 	andeq	r8, fp, r0, lsl r5
    1690:	622c0100 	eorvs	r0, ip, #0, 2
    1694:	05000000 	streq	r0, [r0, #-0]
    1698:	003fd803 	eorseq	sp, pc, r3, lsl #16
    169c:	0bbd1020 	bleq	fef45724 <firstTime.4040+0xdef3b660>
    16a0:	2d010000 	stccs	0, cr0, [r1, #-0]
    16a4:	00000062 	andeq	r0, r0, r2, rrx
    16a8:	3fe40305 	svccc	0x00e40305
    16ac:	71102000 	tstvc	r0, r0
    16b0:	0100000a 	tsteq	r0, sl
    16b4:	0000622e 	andeq	r6, r0, lr, lsr #4
    16b8:	cc030500 	cfstr32gt	mvfx0, [r3], {-0}
    16bc:	1020003e 	eorne	r0, r0, lr, lsr r0
    16c0:	00000bae 	andeq	r0, r0, lr, lsr #23
    16c4:	00622f01 	rsbeq	r2, r2, r1, lsl #30
    16c8:	03050000 	movweq	r0, #20480	; 0x5000
    16cc:	20003fcc 	andcs	r3, r0, ip, asr #31
    16d0:	000ad610 	andeq	sp, sl, r0, lsl r6
    16d4:	62300100 	eorsvs	r0, r0, #0, 2
    16d8:	05000000 	streq	r0, [r0, #-0]
    16dc:	00404803 	subeq	r4, r0, r3, lsl #16
    16e0:	0bfb1020 	bleq	ffec5768 <firstTime.4040+0xdfebb6a4>
    16e4:	31010000 	mrscc	r0, (UNDEF: 1)
    16e8:	00000062 	andeq	r0, r0, r2, rrx
    16ec:	3f780305 	svccc	0x00780305
    16f0:	12102000 	andsne	r2, r0, #0
    16f4:	0100000a 	tsteq	r0, sl
    16f8:	00006232 	andeq	r6, r0, r2, lsr r2
    16fc:	50030500 	andpl	r0, r3, r0, lsl #10
    1700:	1020003f 	eorne	r0, r0, pc, lsr r0
    1704:	00000af2 	strdeq	r0, [r0], -r2
    1708:	00623301 	rsbeq	r3, r2, r1, lsl #6
    170c:	03050000 	movweq	r0, #20480	; 0x5000
    1710:	20003f6c 	andcs	r3, r0, ip, ror #30
    1714:	000c8110 	andeq	r8, ip, r0, lsl r1
    1718:	4c360100 	ldfmis	f0, [r6], #-0
    171c:	05000001 	streq	r0, [r0, #-1]
    1720:	003ee403 	eorseq	lr, lr, r3, lsl #8
    1724:	0cc11020 	stcleq	0, cr1, [r1], {32}
    1728:	37010000 	strcc	r0, [r1, -r0]
    172c:	000000a4 	andeq	r0, r0, r4, lsr #1
    1730:	3f080305 	svccc	0x00080305
    1734:	48102000 	ldmdami	r0, {sp}
    1738:	0100000d 	tsteq	r0, sp
    173c:	0000a438 	andeq	sl, r0, r8, lsr r4
    1740:	d8030500 	stmdale	r3, {r8, sl}
    1744:	1020003e 	eorne	r0, r0, lr, lsr r0
    1748:	00000b58 	andeq	r0, r0, r8, asr fp
    174c:	00a43901 	adceq	r3, r4, r1, lsl #18
    1750:	03050000 	movweq	r0, #20480	; 0x5000
    1754:	20003fc0 	andcs	r3, r0, r0, asr #31
    1758:	0009f610 	andeq	pc, r9, r0, lsl r6	; <UNPREDICTABLE>
    175c:	a43a0100 	ldrtge	r0, [sl], #-256	; 0xffffff00
    1760:	05000000 	streq	r0, [r0, #-0]
    1764:	003f2403 	eorseq	r2, pc, r3, lsl #8
    1768:	0d1f1020 	ldceq	0, cr1, [pc, #-128]	; 16f0 <startup-0x1fffe910>
    176c:	3b010000 	blcc	41774 <startup-0x1ffbe88c>
    1770:	000000a4 	andeq	r0, r0, r4, lsr #1
    1774:	3f840305 	svccc	0x00840305
    1778:	2b102000 	blcs	409780 <startup-0x1fbf6880>
    177c:	0100000b 	tsteq	r0, fp
    1780:	0000a43c 	andeq	sl, r0, ip, lsr r4
    1784:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
    1788:	0b20003e 	bleq	801888 <startup-0x1f7fe778>
    178c:	000000a4 	andeq	r0, r0, r4, lsr #1
    1790:	00000519 	andeq	r0, r0, r9, lsl r5
    1794:	00018e0e 	andeq	r8, r1, lr, lsl #28
    1798:	10000500 	andne	r0, r0, r0, lsl #10
    179c:	00000bf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    17a0:	05093f01 	streq	r3, [r9, #-3841]	; 0xfffff0ff
    17a4:	03050000 	movweq	r0, #20480	; 0x5000
    17a8:	20003ff0 	strdcs	r3, [r0], -r0
    17ac:	000c7711 	andeq	r7, ip, r1, lsl r7
    17b0:	2c760100 	ldfcse	f0, [r6], #-0
    17b4:	58200018 	stmdapl	r0!, {r3, r4}
    17b8:	01000001 	tsteq	r0, r1
    17bc:	00055f9c 	muleq	r5, ip, pc	; <UNPREDICTABLE>
    17c0:	0c811200 	sfmeq	f1, 4, [r1], {0}
    17c4:	76010000 	strvc	r0, [r1], -r0
    17c8:	00000162 	andeq	r0, r0, r2, ror #2
    17cc:	0f6c9102 	svceq	0x006c9102
    17d0:	0000086b 	andeq	r0, r0, fp, ror #16
    17d4:	012e7701 			; <UNDEFINED> instruction: 0x012e7701
    17d8:	03050000 	movweq	r0, #20480	; 0x5000
    17dc:	20007eac 	andcs	r7, r0, ip, lsr #29
    17e0:	04331300 	ldrteq	r1, [r3], #-768	; 0xfffffd00
    17e4:	40010000 	andmi	r0, r1, r0
    17e8:	20001620 	andcs	r1, r0, r0, lsr #12
    17ec:	0000020c 	andeq	r0, r0, ip, lsl #4
    17f0:	000f9c01 	andeq	r9, pc, r1, lsl #24
    17f4:	0100000d 	tsteq	r0, sp
    17f8:	00009e42 	andeq	r9, r0, r2, asr #28
    17fc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1800:	000d0a0f 	andeq	r0, sp, pc, lsl #20
    1804:	9e450100 	dvflss	f0, f5, f0
    1808:	02000000 	andeq	r0, r0, #0
    180c:	000f7091 	muleq	pc, r1, r0	; <UNPREDICTABLE>
    1810:	0100000b 	tsteq	r0, fp
    1814:	00009e48 	andeq	r9, r0, r8, asr #28
    1818:	6c910200 	lfmvs	f0, 4, [r1], {0}
    181c:	000a210f 	andeq	r2, sl, pc, lsl #2
    1820:	9e4c0100 	dvflse	f0, f4, f0
    1824:	02000000 	andeq	r0, r0, #0
    1828:	2a0f6891 	bcs	3dba74 <startup-0x1fc2458c>
    182c:	0100000d 	tsteq	r0, sp
    1830:	00009e4f 	andeq	r9, r0, pc, asr #28
    1834:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1838:	000abe0f 	andeq	fp, sl, pc, lsl #28
    183c:	9e520100 	rdflss	f0, f2, f0
    1840:	02000000 	andeq	r0, r0, #0
    1844:	d60f6091 			; <UNDEFINED> instruction: 0xd60f6091
    1848:	0100000c 	tsteq	r0, ip
    184c:	00009e57 	andeq	r9, r0, r7, asr lr
    1850:	5c910200 	lfmpl	f0, 4, [r1], {0}
    1854:	000d340f 	andeq	r3, sp, pc, lsl #8
    1858:	9e5a0100 	rdflse	f0, f2, f0
    185c:	02000000 	andeq	r0, r0, #0
    1860:	3e0f5891 	mcrcc	8, 0, r5, cr15, cr1, {4}
    1864:	0100000d 	tsteq	r0, sp
    1868:	00009e5d 	andeq	r9, r0, sp, asr lr
    186c:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    1870:	000a470f 	andeq	r4, sl, pc, lsl #14
    1874:	9e610100 	powlss	f0, f1, f0
    1878:	02000000 	andeq	r0, r0, #0
    187c:	8b0f5091 	blhi	3d5ac8 <startup-0x1fc2a538>
    1880:	0100000a 	tsteq	r0, sl
    1884:	00009e64 	andeq	r9, r0, r4, ror #28
    1888:	4c910200 	lfmmi	f0, 4, [r1], {0}
    188c:	000a950f 	andeq	r9, sl, pc, lsl #10
    1890:	9e670100 	powlss	f0, f7, f0
    1894:	02000000 	andeq	r0, r0, #0
    1898:	530f4891 	movwpl	r4, #63633	; 0xf891
    189c:	0100000d 	tsteq	r0, sp
    18a0:	00009e6b 	andeq	r9, r0, fp, ror #28
    18a4:	44910200 	ldrmi	r0, [r1], #512	; 0x200
    18a8:	000bdb0f 	andeq	sp, fp, pc, lsl #22
    18ac:	9e6e0100 	powlse	f0, f6, f0
    18b0:	02000000 	andeq	r0, r0, #0
    18b4:	b40f4091 	strlt	r4, [pc], #-145	; 18bc <startup-0x1fffe744>
    18b8:	0100000a 	tsteq	r0, sl
    18bc:	00009e71 	andeq	r9, r0, r1, ror lr
    18c0:	bc910300 	ldclt	3, cr0, [r1], {0}
    18c4:	9800007f 	stmdals	r0, {r0, r1, r2, r3, r4, r5, r6}
    18c8:	04000004 	streq	r0, [r0], #-4
    18cc:	00051800 	andeq	r1, r5, r0, lsl #16
    18d0:	81010400 	tsthi	r1, r0, lsl #8
    18d4:	0c000000 	stceq	0, cr0, [r0], {-0}
    18d8:	00000f21 	andeq	r0, r0, r1, lsr #30
    18dc:	20001984 	andcs	r1, r0, r4, lsl #19
    18e0:	00000238 	andeq	r0, r0, r8, lsr r2
    18e4:	000007e4 	andeq	r0, r0, r4, ror #15
    18e8:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
    18ec:	0000004e 	andeq	r0, r0, lr, asr #32
    18f0:	00030903 	andeq	r0, r3, r3, lsl #18
    18f4:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
    18f8:	00000000 	andeq	r0, r0, r0
    18fc:	00067b03 	andeq	r7, r6, r3, lsl #22
    1900:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
    1904:	04000000 	streq	r0, [r0], #-0
    1908:	00147603 	andseq	r7, r4, r3, lsl #12
    190c:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
    1910:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1914:	07040400 	streq	r0, [r4, -r0, lsl #8]
    1918:	0000032d 	andeq	r0, r0, sp, lsr #6
    191c:	005b0405 	subseq	r0, fp, r5, lsl #8
    1920:	01040000 	mrseq	r0, (UNDEF: 4)
    1924:	00045d08 	andeq	r5, r4, r8, lsl #26
    1928:	15c80600 	strbne	r0, [r8, #1536]	; 0x600
    192c:	0a020000 	beq	81934 <startup-0x1ff7e6cc>
    1930:	00000021 	andeq	r0, r0, r1, lsr #32
    1934:	00001607 	andeq	r1, r0, r7, lsl #12
    1938:	06030c00 	streq	r0, [r3], -r0, lsl #24
    193c:	0000009e 	muleq	r0, lr, r0
    1940:	00054803 	andeq	r4, r5, r3, lsl #16
    1944:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
    1948:	00000000 	andeq	r0, r0, r0
    194c:	00001d03 	andeq	r1, r0, r3, lsl #26
    1950:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
    1954:	04000000 	streq	r0, [r0], #-0
    1958:	00001203 	andeq	r1, r0, r3, lsl #4
    195c:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
    1960:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1964:	62040500 	andvs	r0, r4, #0, 10
    1968:	06000000 	streq	r0, [r0], -r0
    196c:	00000f96 	muleq	r0, r6, pc	; <UNPREDICTABLE>
    1970:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
    1974:	40070000 	andmi	r0, r7, r0
    1978:	24000006 	strcs	r0, [r0], #-6
    197c:	01280604 			; <UNDEFINED> instruction: 0x01280604
    1980:	fa030000 	blx	c1988 <startup-0x1ff3e678>
    1984:	04000003 	streq	r0, [r0], #-3
    1988:	00012807 	andeq	r2, r1, r7, lsl #16
    198c:	4c030000 	stcmi	0, cr0, [r3], {-0}
    1990:	04000006 	streq	r0, [r0], #-6
    1994:	00012e08 	andeq	r2, r1, r8, lsl #28
    1998:	b3030400 	movwlt	r0, #13312	; 0x3400
    199c:	04000005 	streq	r0, [r0], #-5
    19a0:	00012e09 	andeq	r2, r1, r9, lsl #28
    19a4:	df030800 	svcle	0x00030800
    19a8:	04000005 	streq	r0, [r0], #-5
    19ac:	0001460c 	andeq	r4, r1, ip, lsl #12
    19b0:	02030c00 	andeq	r0, r3, #0, 24
    19b4:	04000003 	streq	r0, [r0], #-3
    19b8:	0001460d 	andeq	r4, r1, sp, lsl #12
    19bc:	0c031000 	stceq	0, cr1, [r3], {-0}
    19c0:	04000004 	streq	r0, [r0], #-4
    19c4:	00012e10 	andeq	r2, r1, r0, lsl lr
    19c8:	52031400 	andpl	r1, r3, #0, 8
    19cc:	04000000 	streq	r0, [r0], #-0
    19d0:	00012e11 	andeq	r2, r1, r1, lsl lr
    19d4:	7d031800 	stcvc	8, cr1, [r3, #-0]
    19d8:	04000003 	streq	r0, [r0], #-3
    19dc:	00012e12 	andeq	r2, r1, r2, lsl lr
    19e0:	8d031c00 	stchi	12, cr1, [r3, #-0]
    19e4:	04000003 	streq	r0, [r0], #-3
    19e8:	00012e13 	andeq	r2, r1, r3, lsl lr
    19ec:	05002000 	streq	r2, [r0, #-0]
    19f0:	0000a404 	andeq	sl, r0, r4, lsl #8
    19f4:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
    19f8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    19fc:	00014009 	andeq	r4, r1, r9
    1a00:	01400a00 	cmpeq	r0, r0, lsl #20
    1a04:	05000000 	streq	r0, [r0, #-0]
    1a08:	0000af04 	andeq	sl, r0, r4, lsl #30
    1a0c:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
    1a10:	06000001 	streq	r0, [r0], -r1
    1a14:	00000641 	andeq	r0, r0, r1, asr #12
    1a18:	00af1504 	adceq	r1, pc, r4, lsl #10
    1a1c:	620b0000 	andvs	r0, fp, #0
    1a20:	62000001 	andvs	r0, r0, #1
    1a24:	0c000001 	stceq	0, cr0, [r0], {1}
    1a28:	4c040500 	cfstr32mi	mvfx0, [r4], {-0}
    1a2c:	0d000001 	stceq	0, cr0, [r0, #-4]
    1a30:	000004e0 	andeq	r0, r0, r0, ror #9
    1a34:	01571c04 	cmpeq	r7, r4, lsl #24
    1a38:	c80d0000 	stmdagt	sp, {}	; <UNPREDICTABLE>
    1a3c:	04000003 	streq	r0, [r0], #-3
    1a40:	00012e1d 	andeq	r2, r1, sp, lsl lr
    1a44:	005b0b00 	subseq	r0, fp, r0, lsl #22
    1a48:	018e0000 	orreq	r0, lr, r0
    1a4c:	8e0e0000 	cdphi	0, 0, cr0, cr14, cr0, {0}
    1a50:	35000001 	strcc	r0, [r0, #-1]
    1a54:	07040400 	streq	r0, [r4, -r0, lsl #8]
    1a58:	000003aa 	andeq	r0, r0, sl, lsr #7
    1a5c:	000d9d0f 	andeq	r9, sp, pc, lsl #26
    1a60:	7e030500 	cfsh32vc	mvfx0, mvfx3, #0
    1a64:	05000001 	streq	r0, [r0, #-1]
    1a68:	007eb003 	rsbseq	fp, lr, r3
    1a6c:	0f4f0f20 	svceq	0x004f0f20
    1a70:	03060000 	movweq	r0, #24576	; 0x6000
    1a74:	0000017e 	andeq	r0, r0, lr, ror r1
    1a78:	7ee80305 	cdpvc	3, 14, cr0, cr8, cr5, {0}
    1a7c:	a70f2000 	strge	r2, [pc, -r0]
    1a80:	0700000e 	streq	r0, [r0, -lr]
    1a84:	00017e03 	andeq	r7, r1, r3, lsl #28
    1a88:	20030500 	andcs	r0, r3, r0, lsl #10
    1a8c:	0f20007f 	svceq	0x0020007f
    1a90:	00000e40 	andeq	r0, r0, r0, asr #28
    1a94:	017e0308 	cmneq	lr, r8, lsl #6
    1a98:	03050000 	movweq	r0, #20480	; 0x5000
    1a9c:	20007f58 	andcs	r7, r0, r8, asr pc
    1aa0:	000eb90f 	andeq	fp, lr, pc, lsl #18
    1aa4:	7e030900 	vmlavc.f16	s0, s6, s0	; <UNPREDICTABLE>
    1aa8:	05000001 	streq	r0, [r0, #-1]
    1aac:	007f9003 	rsbseq	r9, pc, r3
    1ab0:	0deb0f20 	stcleq	15, cr0, [fp, #128]!	; 0x80
    1ab4:	030a0000 	movweq	r0, #40960	; 0xa000
    1ab8:	0000017e 	andeq	r0, r0, lr, ror r1
    1abc:	7fc80305 	svcvc	0x00c80305
    1ac0:	600f2000 	andvs	r2, pc, r0
    1ac4:	0b00000f 	bleq	1b08 <startup-0x1fffe4f8>
    1ac8:	00017e03 	andeq	r7, r1, r3, lsl #28
    1acc:	00030500 	andeq	r0, r3, r0, lsl #10
    1ad0:	0f200080 	svceq	0x00200080
    1ad4:	00000e15 	andeq	r0, r0, r5, lsl lr
    1ad8:	017e030c 	cmneq	lr, ip, lsl #6
    1adc:	03050000 	movweq	r0, #20480	; 0x5000
    1ae0:	20008038 	andcs	r8, r0, r8, lsr r0
    1ae4:	000e520f 	andeq	r5, lr, pc, lsl #4
    1ae8:	7e030d00 	cdpvc	13, 0, cr0, cr3, cr0, {0}
    1aec:	05000001 	streq	r0, [r0, #-1]
    1af0:	00807003 	addeq	r7, r0, r3
    1af4:	0eee1020 	cdpeq	0, 14, cr1, cr14, cr0, {1}
    1af8:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    1afc:	0000009e 	muleq	r0, lr, r0
    1b00:	412c0305 			; <UNDEFINED> instruction: 0x412c0305
    1b04:	7a102000 	bvc	409b0c <startup-0x1fbf64f4>
    1b08:	0100000d 	tsteq	r0, sp
    1b0c:	00009e0f 	andeq	r9, r0, pc, lsl #28
    1b10:	58030500 	stmdapl	r3, {r8, sl}
    1b14:	10200040 	eorne	r0, r0, r0, asr #32
    1b18:	00000dcf 	andeq	r0, r0, pc, asr #27
    1b1c:	009e1001 	addseq	r1, lr, r1
    1b20:	03050000 	movweq	r0, #20480	; 0x5000
    1b24:	20004158 	andcs	r4, r0, r8, asr r1
    1b28:	000d6e10 	andeq	r6, sp, r0, lsl lr
    1b2c:	9e110100 	muflss	f0, f1, f0
    1b30:	05000000 	streq	r0, [r0, #-0]
    1b34:	00416803 	subeq	r6, r1, r3, lsl #16
    1b38:	0e6f1020 	cdpeq	0, 6, cr1, cr15, cr0, {1}
    1b3c:	12010000 	andne	r0, r1, #0
    1b40:	0000009e 	muleq	r0, lr, r0
    1b44:	40cc0305 	sbcmi	r0, ip, r5, lsl #6
    1b48:	d6102000 	ldrle	r2, [r0], -r0
    1b4c:	0100000e 	tsteq	r0, lr
    1b50:	00009e13 	andeq	r9, r0, r3, lsl lr
    1b54:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
    1b58:	10200040 	eorne	r0, r0, r0, asr #32
    1b5c:	00000e09 	andeq	r0, r0, r9, lsl #28
    1b60:	009e1401 	addseq	r1, lr, r1, lsl #8
    1b64:	03050000 	movweq	r0, #20480	; 0x5000
    1b68:	200040f4 	strdcs	r4, [r0], -r4	; <UNPREDICTABLE>
    1b6c:	000e6410 	andeq	r6, lr, r0, lsl r4
    1b70:	9e150100 	muflss	f0, f5, f0
    1b74:	05000000 	streq	r0, [r0, #-0]
    1b78:	00413003 	subeq	r3, r1, r3
    1b7c:	0efa1020 	cdpeq	0, 15, cr1, cr10, cr0, {1}
    1b80:	16010000 	strne	r0, [r1], -r0
    1b84:	0000009e 	muleq	r0, lr, r0
    1b88:	411c0305 	tstmi	ip, r5, lsl #6
    1b8c:	31102000 	tstcc	r0, r0
    1b90:	0100000e 	tsteq	r0, lr
    1b94:	00006218 	andeq	r6, r0, r8, lsl r2
    1b98:	a8030500 	stmdage	r3, {r8, sl}
    1b9c:	10200040 	eorne	r0, r0, r0, asr #32
    1ba0:	00000d85 	andeq	r0, r0, r5, lsl #27
    1ba4:	00621901 	rsbeq	r1, r2, r1, lsl #18
    1ba8:	03050000 	movweq	r0, #20480	; 0x5000
    1bac:	20004140 	andcs	r4, r0, r0, asr #2
    1bb0:	000e7a10 	andeq	r7, lr, r0, lsl sl
    1bb4:	621a0100 	andsvs	r0, sl, #0, 2
    1bb8:	05000000 	streq	r0, [r0, #-0]
    1bbc:	0040d003 	subeq	sp, r0, r3
    1bc0:	0ddb1020 	ldcleq	0, cr1, [fp, #128]	; 0x80
    1bc4:	1b010000 	blne	41bcc <startup-0x1ffbe434>
    1bc8:	00000062 	andeq	r0, r0, r2, rrx
    1bcc:	409c0305 	addsmi	r0, ip, r5, lsl #6
    1bd0:	bf102000 	svclt	0x00102000
    1bd4:	0100000d 	tsteq	r0, sp
    1bd8:	0000621c 	andeq	r6, r0, ip, lsl r2
    1bdc:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
    1be0:	10200041 	eorne	r0, r0, r1, asr #32
    1be4:	00000e88 	andeq	r0, r0, r8, lsl #29
    1be8:	00621d01 	rsbeq	r1, r2, r1, lsl #26
    1bec:	03050000 	movweq	r0, #20480	; 0x5000
    1bf0:	200040e8 	andcs	r4, r0, r8, ror #1
    1bf4:	000e9710 	andeq	r9, lr, r0, lsl r7
    1bf8:	621e0100 	andsvs	r0, lr, #0, 2
    1bfc:	05000000 	streq	r0, [r0, #-0]
    1c00:	0040dc03 	subeq	sp, r0, r3, lsl #24
    1c04:	0daf1020 	stceq	0, cr1, [pc, #128]!	; 1c8c <startup-0x1fffe374>
    1c08:	1f010000 	svcne	0x00010000
    1c0c:	00000062 	andeq	r0, r0, r2, rrx
    1c10:	40b40305 	adcsmi	r0, r4, r5, lsl #6
    1c14:	12102000 	andsne	r2, r0, #0
    1c18:	0100000f 	tsteq	r0, pc
    1c1c:	00006220 	andeq	r6, r0, r0, lsr #4
    1c20:	20030500 	andcs	r0, r3, r0, lsl #10
    1c24:	10200041 	eorne	r0, r0, r1, asr #32
    1c28:	00000d94 	muleq	r0, r4, sp
    1c2c:	014c2301 	cmpeq	ip, r1, lsl #6
    1c30:	03050000 	movweq	r0, #20480	; 0x5000
    1c34:	200040f8 	strdcs	r4, [r0], -r8
    1c38:	000ee210 	andeq	lr, lr, r0, lsl r2
    1c3c:	a4240100 	strtge	r0, [r4], #-256	; 0xffffff00
    1c40:	05000000 	streq	r0, [r0, #-0]
    1c44:	00413403 	subeq	r3, r1, r3, lsl #8
    1c48:	0f721020 	svceq	0x00721020
    1c4c:	25010000 	strcs	r0, [r1, #-0]
    1c50:	000000a4 	andeq	r0, r0, r4, lsr #1
    1c54:	40900305 	addsmi	r0, r0, r5, lsl #6
    1c58:	fd102000 	ldc2	0, cr2, [r0, #-0]
    1c5c:	0100000d 	tsteq	r0, sp
    1c60:	0000a426 	andeq	sl, r0, r6, lsr #8
    1c64:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
    1c68:	10200041 	eorne	r0, r0, r1, asr #32
    1c6c:	00000eca 	andeq	r0, r0, sl, asr #29
    1c70:	00a42701 	adceq	r2, r4, r1, lsl #14
    1c74:	03050000 	movweq	r0, #20480	; 0x5000
    1c78:	200040c0 	andcs	r4, r0, r0, asr #1
    1c7c:	0000a40b 	andeq	sl, r0, fp, lsl #8
    1c80:	0003c500 	andeq	ip, r3, r0, lsl #10
    1c84:	018e0e00 	orreq	r0, lr, r0, lsl #28
    1c88:	00030000 	andeq	r0, r3, r0
    1c8c:	000f0610 	andeq	r0, pc, r0, lsl r6	; <UNPREDICTABLE>
    1c90:	b5280100 	strlt	r0, [r8, #-256]!	; 0xffffff00
    1c94:	05000003 	streq	r0, [r0, #-3]
    1c98:	00406003 	subeq	r6, r0, r3
    1c9c:	0e261120 	sufeqsp	f1, f6, f0
    1ca0:	4c010000 	stcmi	0, cr0, [r1], {-0}
    1ca4:	20001ac4 	andcs	r1, r0, r4, asr #21
    1ca8:	000000f8 	strdeq	r0, [r0], -r8
    1cac:	040b9c01 	streq	r9, [fp], #-3073	; 0xfffff3ff
    1cb0:	94120000 	ldrls	r0, [r2], #-0
    1cb4:	0100000d 	tsteq	r0, sp
    1cb8:	0001624c 	andeq	r6, r1, ip, asr #4
    1cbc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1cc0:	00086b0f 	andeq	r6, r8, pc, lsl #22
    1cc4:	2e4d0100 	dvfcse	f0, f5, f0
    1cc8:	05000001 	streq	r0, [r0, #-1]
    1ccc:	0080a803 	addeq	sl, r0, r3, lsl #16
    1cd0:	33130020 	tstcc	r3, #32
    1cd4:	01000004 	tsteq	r0, r4
    1cd8:	00198429 	andseq	r8, r9, r9, lsr #8
    1cdc:	00014020 	andeq	r4, r1, r0, lsr #32
    1ce0:	0f9c0100 	svceq	0x009c0100
    1ce4:	00000d00 	andeq	r0, r0, r0, lsl #26
    1ce8:	009e2b01 	addseq	r2, lr, r1, lsl #22
    1cec:	91020000 	mrsls	r0, (UNDEF: 2)
    1cf0:	0d0a0f74 	stceq	15, cr0, [sl, #-464]	; 0xfffffe30
    1cf4:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    1cf8:	0000009e 	muleq	r0, lr, r0
    1cfc:	0f709102 	svceq	0x00709102
    1d00:	00000b00 	andeq	r0, r0, r0, lsl #22
    1d04:	009e3101 	addseq	r3, lr, r1, lsl #2
    1d08:	91020000 	mrsls	r0, (UNDEF: 2)
    1d0c:	0a210f6c 	beq	845ac4 <startup-0x1f7ba53c>
    1d10:	35010000 	strcc	r0, [r1, #-0]
    1d14:	0000009e 	muleq	r0, lr, r0
    1d18:	0f689102 	svceq	0x00689102
    1d1c:	00000d2a 	andeq	r0, r0, sl, lsr #26
    1d20:	009e3801 	addseq	r3, lr, r1, lsl #16
    1d24:	91020000 	mrsls	r0, (UNDEF: 2)
    1d28:	0abe0f64 	beq	fef85ac0 <firstTime.4040+0xdef7b9fc>
    1d2c:	3b010000 	blcc	41d34 <startup-0x1ffbe2cc>
    1d30:	0000009e 	muleq	r0, lr, r0
    1d34:	0f609102 	svceq	0x00609102
    1d38:	00000cd6 	ldrdeq	r0, [r0], -r6
    1d3c:	009e4001 	addseq	r4, lr, r1
    1d40:	91020000 	mrsls	r0, (UNDEF: 2)
    1d44:	0d340f5c 	ldceq	15, cr0, [r4, #-368]!	; 0xfffffe90
    1d48:	43010000 	movwmi	r0, #4096	; 0x1000
    1d4c:	0000009e 	muleq	r0, lr, r0
    1d50:	0f589102 	svceq	0x00589102
    1d54:	00000d3e 	andeq	r0, r0, lr, lsr sp
    1d58:	009e4601 	addseq	r4, lr, r1, lsl #12
    1d5c:	91020000 	mrsls	r0, (UNDEF: 2)
    1d60:	35000054 	strcc	r0, [r0, #-84]	; 0xffffffac
    1d64:	04000005 	streq	r0, [r0], #-5
    1d68:	00061800 	andeq	r1, r6, r0, lsl #16
    1d6c:	81010400 	tsthi	r1, r0, lsl #8
    1d70:	0c000000 	stceq	0, cr0, [r0], {-0}
    1d74:	0000105b 	andeq	r1, r0, fp, asr r0
    1d78:	20001bbc 			; <UNDEFINED> instruction: 0x20001bbc
    1d7c:	00000328 	andeq	r0, r0, r8, lsr #6
    1d80:	00000949 	andeq	r0, r0, r9, asr #18
    1d84:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
    1d88:	0000004e 	andeq	r0, r0, lr, asr #32
    1d8c:	00030903 	andeq	r0, r3, r3, lsl #18
    1d90:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
    1d94:	00000000 	andeq	r0, r0, r0
    1d98:	00067b03 	andeq	r7, r6, r3, lsl #22
    1d9c:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
    1da0:	04000000 	streq	r0, [r0], #-0
    1da4:	00147603 	andseq	r7, r4, r3, lsl #12
    1da8:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
    1dac:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1db0:	07040400 	streq	r0, [r4, -r0, lsl #8]
    1db4:	0000032d 	andeq	r0, r0, sp, lsr #6
    1db8:	005b0405 	subseq	r0, fp, r5, lsl #8
    1dbc:	01040000 	mrseq	r0, (UNDEF: 4)
    1dc0:	00045d08 	andeq	r5, r4, r8, lsl #26
    1dc4:	15c80600 	strbne	r0, [r8, #1536]	; 0x600
    1dc8:	0a020000 	beq	81dd0 <startup-0x1ff7e230>
    1dcc:	00000021 	andeq	r0, r0, r1, lsr #32
    1dd0:	00001607 	andeq	r1, r0, r7, lsl #12
    1dd4:	06030c00 	streq	r0, [r3], -r0, lsl #24
    1dd8:	0000009e 	muleq	r0, lr, r0
    1ddc:	00054803 	andeq	r4, r5, r3, lsl #16
    1de0:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
    1de4:	00000000 	andeq	r0, r0, r0
    1de8:	00001d03 	andeq	r1, r0, r3, lsl #26
    1dec:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
    1df0:	04000000 	streq	r0, [r0], #-0
    1df4:	00001203 	andeq	r1, r0, r3, lsl #4
    1df8:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
    1dfc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1e00:	62040500 	andvs	r0, r4, #0, 10
    1e04:	06000000 	streq	r0, [r0], -r0
    1e08:	00000f96 	muleq	r0, r6, pc	; <UNPREDICTABLE>
    1e0c:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
    1e10:	40070000 	andmi	r0, r7, r0
    1e14:	24000006 	strcs	r0, [r0], #-6
    1e18:	01280604 			; <UNDEFINED> instruction: 0x01280604
    1e1c:	fa030000 	blx	c1e24 <startup-0x1ff3e1dc>
    1e20:	04000003 	streq	r0, [r0], #-3
    1e24:	00012807 	andeq	r2, r1, r7, lsl #16
    1e28:	4c030000 	stcmi	0, cr0, [r3], {-0}
    1e2c:	04000006 	streq	r0, [r0], #-6
    1e30:	00012e08 	andeq	r2, r1, r8, lsl #28
    1e34:	b3030400 	movwlt	r0, #13312	; 0x3400
    1e38:	04000005 	streq	r0, [r0], #-5
    1e3c:	00012e09 	andeq	r2, r1, r9, lsl #28
    1e40:	df030800 	svcle	0x00030800
    1e44:	04000005 	streq	r0, [r0], #-5
    1e48:	0001460c 	andeq	r4, r1, ip, lsl #12
    1e4c:	02030c00 	andeq	r0, r3, #0, 24
    1e50:	04000003 	streq	r0, [r0], #-3
    1e54:	0001460d 	andeq	r4, r1, sp, lsl #12
    1e58:	0c031000 	stceq	0, cr1, [r3], {-0}
    1e5c:	04000004 	streq	r0, [r0], #-4
    1e60:	00012e10 	andeq	r2, r1, r0, lsl lr
    1e64:	52031400 	andpl	r1, r3, #0, 8
    1e68:	04000000 	streq	r0, [r0], #-0
    1e6c:	00012e11 	andeq	r2, r1, r1, lsl lr
    1e70:	7d031800 	stcvc	8, cr1, [r3, #-0]
    1e74:	04000003 	streq	r0, [r0], #-3
    1e78:	00012e12 	andeq	r2, r1, r2, lsl lr
    1e7c:	8d031c00 	stchi	12, cr1, [r3, #-0]
    1e80:	04000003 	streq	r0, [r0], #-3
    1e84:	00012e13 	andeq	r2, r1, r3, lsl lr
    1e88:	05002000 	streq	r2, [r0, #-0]
    1e8c:	0000a404 	andeq	sl, r0, r4, lsl #8
    1e90:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
    1e94:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1e98:	00014009 	andeq	r4, r1, r9
    1e9c:	01400a00 	cmpeq	r0, r0, lsl #20
    1ea0:	05000000 	streq	r0, [r0, #-0]
    1ea4:	0000af04 	andeq	sl, r0, r4, lsl #30
    1ea8:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
    1eac:	06000001 	streq	r0, [r0], -r1
    1eb0:	00000641 	andeq	r0, r0, r1, asr #12
    1eb4:	00af1504 	adceq	r1, pc, r4, lsl #10
    1eb8:	620b0000 	andvs	r0, fp, #0
    1ebc:	62000001 	andvs	r0, r0, #1
    1ec0:	0c000001 	stceq	0, cr0, [r0], {1}
    1ec4:	4c040500 	cfstr32mi	mvfx0, [r4], {-0}
    1ec8:	0d000001 	stceq	0, cr0, [r0, #-4]
    1ecc:	000004e0 	andeq	r0, r0, r0, ror #9
    1ed0:	01571c04 	cmpeq	r7, r4, lsl #24
    1ed4:	c80d0000 	stmdagt	sp, {}	; <UNPREDICTABLE>
    1ed8:	04000003 	streq	r0, [r0], #-3
    1edc:	00012e1d 	andeq	r2, r1, sp, lsl lr
    1ee0:	07020400 	streq	r0, [r2, -r0, lsl #8]
    1ee4:	00000327 	andeq	r0, r0, r7, lsr #6
    1ee8:	00005b0b 	andeq	r5, r0, fp, lsl #22
    1eec:	00019500 	andeq	r9, r1, r0, lsl #10
    1ef0:	01950e00 	orrseq	r0, r5, r0, lsl #28
    1ef4:	00350000 	eorseq	r0, r5, r0
    1ef8:	aa070404 	bge	1c2f10 <startup-0x1fe3d0f0>
    1efc:	0f000003 	svceq	0x00000003
    1f00:	00000d9d 	muleq	r0, sp, sp
    1f04:	01850305 	orreq	r0, r5, r5, lsl #6
    1f08:	03050000 	movweq	r0, #20480	; 0x5000
    1f0c:	200080ac 	andcs	r8, r0, ip, lsr #1
    1f10:	000f4f0f 	andeq	r4, pc, pc, lsl #30
    1f14:	85030600 	strhi	r0, [r3, #-1536]	; 0xfffffa00
    1f18:	05000001 	streq	r0, [r0, #-1]
    1f1c:	0080e403 	addeq	lr, r0, r3, lsl #8
    1f20:	0ea70f20 	cdpeq	15, 10, cr0, cr7, cr0, {1}
    1f24:	03070000 	movweq	r0, #28672	; 0x7000
    1f28:	00000185 	andeq	r0, r0, r5, lsl #3
    1f2c:	811c0305 	tsthi	ip, r5, lsl #6
    1f30:	400f2000 	andmi	r2, pc, r0
    1f34:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    1f38:	00018503 	andeq	r8, r1, r3, lsl #10
    1f3c:	54030500 	strpl	r0, [r3], #-1280	; 0xfffffb00
    1f40:	0f200081 	svceq	0x00200081
    1f44:	00000eb9 			; <UNDEFINED> instruction: 0x00000eb9
    1f48:	01850309 	orreq	r0, r5, r9, lsl #6
    1f4c:	03050000 	movweq	r0, #20480	; 0x5000
    1f50:	2000818c 	andcs	r8, r0, ip, lsl #3
    1f54:	000deb0f 	andeq	lr, sp, pc, lsl #22
    1f58:	85030a00 	strhi	r0, [r3, #-2560]	; 0xfffff600
    1f5c:	05000001 	streq	r0, [r0, #-1]
    1f60:	0081c403 	addeq	ip, r1, r3, lsl #8
    1f64:	0f600f20 	svceq	0x00600f20
    1f68:	030b0000 	movweq	r0, #45056	; 0xb000
    1f6c:	00000185 	andeq	r0, r0, r5, lsl #3
    1f70:	81fc0305 	mvnshi	r0, r5, lsl #6
    1f74:	150f2000 	strne	r2, [pc, #-0]	; 1f7c <startup-0x1fffe084>
    1f78:	0c00000e 	stceq	0, cr0, [r0], {14}
    1f7c:	00018503 	andeq	r8, r1, r3, lsl #10
    1f80:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
    1f84:	0f200082 	svceq	0x00200082
    1f88:	00000e52 	andeq	r0, r0, r2, asr lr
    1f8c:	0185030d 	orreq	r0, r5, sp, lsl #6
    1f90:	03050000 	movweq	r0, #20480	; 0x5000
    1f94:	2000826c 	andcs	r8, r0, ip, ror #4
    1f98:	000ffa10 	andeq	pc, pc, r0, lsl sl	; <UNPREDICTABLE>
    1f9c:	9e120100 	muflss	f0, f2, f0
    1fa0:	05000000 	streq	r0, [r0, #-0]
    1fa4:	0041b003 	subeq	fp, r1, r3
    1fa8:	0fc51020 	svceq	0x00c51020
    1fac:	13010000 	movwne	r0, #4096	; 0x1000
    1fb0:	0000009e 	muleq	r0, lr, r0
    1fb4:	42480305 	submi	r0, r8, #335544320	; 0x14000000
    1fb8:	87102000 	ldrhi	r2, [r0, -r0]
    1fbc:	01000010 	tsteq	r0, r0, lsl r0
    1fc0:	00009e14 	andeq	r9, r0, r4, lsl lr
    1fc4:	20030500 	andcs	r0, r3, r0, lsl #10
    1fc8:	10200042 	eorne	r0, r0, r2, asr #32
    1fcc:	00001047 	andeq	r1, r0, r7, asr #32
    1fd0:	009e1501 	addseq	r1, lr, r1, lsl #10
    1fd4:	03050000 	movweq	r0, #20480	; 0x5000
    1fd8:	2000422c 	andcs	r4, r0, ip, lsr #4
    1fdc:	000fbc10 	andeq	fp, pc, r0, lsl ip	; <UNPREDICTABLE>
    1fe0:	9e160100 	muflss	f0, f6, f0
    1fe4:	05000000 	streq	r0, [r0, #-0]
    1fe8:	00419c03 	subeq	r9, r1, r3, lsl #24
    1fec:	0fa01020 	svceq	0x00a01020
    1ff0:	17010000 	strne	r0, [r1, -r0]
    1ff4:	0000009e 	muleq	r0, lr, r0
    1ff8:	42240305 	eormi	r0, r4, #335544320	; 0x14000000
    1ffc:	ae102000 	cdpge	0, 1, cr2, cr0, cr0, {0}
    2000:	0100000f 	tsteq	r0, pc
    2004:	00009e18 	andeq	r9, r0, r8, lsl lr
    2008:	ac030500 	cfstr32ge	mvfx0, [r3], {-0}
    200c:	10200041 	eorne	r0, r0, r1, asr #32
    2010:	00001018 	andeq	r1, r0, r8, lsl r0
    2014:	009e1901 	addseq	r1, lr, r1, lsl #18
    2018:	03050000 	movweq	r0, #20480	; 0x5000
    201c:	20004258 	andcs	r4, r0, r8, asr r2
    2020:	00102f10 	andseq	r2, r0, r0, lsl pc
    2024:	9e1a0100 	muflse	f0, f2, f0
    2028:	05000000 	streq	r0, [r0, #-0]
    202c:	00422803 	subeq	r2, r2, r3, lsl #16
    2030:	10981020 	addsne	r1, r8, r0, lsr #32
    2034:	1c010000 	stcne	0, cr0, [r1], {-0}
    2038:	00000062 	andeq	r0, r0, r2, rrx
    203c:	423c0305 	eorsmi	r0, ip, #335544320	; 0x14000000
    2040:	ce102000 	cdpgt	0, 1, cr2, cr0, cr0, {0}
    2044:	0100000f 	tsteq	r0, pc
    2048:	0000621d 	andeq	r6, r0, sp, lsl r2
    204c:	b4030500 	strlt	r0, [r3], #-1280	; 0xfffffb00
    2050:	10200041 	eorne	r0, r0, r1, asr #32
    2054:	00000fee 	andeq	r0, r0, lr, ror #31
    2058:	00621e01 	rsbeq	r1, r2, r1, lsl #28
    205c:	03050000 	movweq	r0, #20480	; 0x5000
    2060:	20004274 	andcs	r4, r0, r4, ror r2
    2064:	00104310 	andseq	r4, r0, r0, lsl r3
    2068:	621f0100 	andsvs	r0, pc, #0, 2
    206c:	05000000 	streq	r0, [r0, #-0]
    2070:	0041fc03 	subeq	pc, r1, r3, lsl #24
    2074:	0f9c1020 	svceq	0x009c1020
    2078:	20010000 	andcs	r0, r1, r0
    207c:	00000062 	andeq	r0, r0, r2, rrx
    2080:	42680305 	rsbmi	r0, r8, #335544320	; 0x14000000
    2084:	b8102000 	ldmdalt	r0, {sp}
    2088:	0100000f 	tsteq	r0, pc
    208c:	00006221 	andeq	r6, r0, r1, lsr #4
    2090:	a0030500 	andge	r0, r3, r0, lsl #10
    2094:	10200041 	eorne	r0, r0, r1, asr #32
    2098:	00000faa 	andeq	r0, r0, sl, lsr #31
    209c:	00622201 	rsbeq	r2, r2, r1, lsl #4
    20a0:	03050000 	movweq	r0, #20480	; 0x5000
    20a4:	2000424c 	andcs	r4, r0, ip, asr #4
    20a8:	00102b10 	andseq	r2, r0, r0, lsl fp
    20ac:	62230100 	eorvs	r0, r3, #0, 2
    20b0:	05000000 	streq	r0, [r0, #-0]
    20b4:	0041c003 	subeq	ip, r1, r3
    20b8:	10141020 	andsne	r1, r4, r0, lsr #32
    20bc:	24010000 	strcs	r0, [r1], #-0
    20c0:	00000062 	andeq	r0, r0, r2, rrx
    20c4:	42300305 	eorsmi	r0, r0, #335544320	; 0x14000000
    20c8:	91102000 	tstls	r0, r0
    20cc:	01000010 	tsteq	r0, r0, lsl r0
    20d0:	00014c27 	andeq	r4, r1, r7, lsr #24
    20d4:	6c030500 	cfstr32vs	mvfx0, [r3], {-0}
    20d8:	10200041 	eorne	r0, r0, r1, asr #32
    20dc:	00000f92 	muleq	r0, r2, pc	; <UNPREDICTABLE>
    20e0:	00a42801 	adceq	r2, r4, r1, lsl #16
    20e4:	03050000 	movweq	r0, #20480	; 0x5000
    20e8:	20004214 	andcs	r4, r0, r4, lsl r2
    20ec:	00105110 	andseq	r5, r0, r0, lsl r1
    20f0:	a4290100 	strtge	r0, [r9], #-256	; 0xffffff00
    20f4:	05000000 	streq	r0, [r0, #-0]
    20f8:	00419003 	subeq	r9, r1, r3
    20fc:	10211020 	eorne	r1, r1, r0, lsr #32
    2100:	2a010000 	bcs	42108 <startup-0x1ffbdef8>
    2104:	000000a4 	andeq	r0, r0, r4, lsr #1
    2108:	42080305 	andmi	r0, r8, #335544320	; 0x14000000
    210c:	88102000 	ldmdahi	r0, {sp}
    2110:	0100000f 	tsteq	r0, pc
    2114:	0000a42b 	andeq	sl, r0, fp, lsr #8
    2118:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
    211c:	0b200042 	bleq	80222c <startup-0x1f7fddd4>
    2120:	000000a4 	andeq	r0, r0, r4, lsr #1
    2124:	000003cc 	andeq	r0, r0, ip, asr #7
    2128:	0001950e 	andeq	r9, r1, lr, lsl #10
    212c:	10000300 	andne	r0, r0, r0, lsl #6
    2130:	00000fdb 	ldrdeq	r0, [r0], -fp
    2134:	03bc2c01 			; <UNDEFINED> instruction: 0x03bc2c01
    2138:	03050000 	movweq	r0, #20480	; 0x5000
    213c:	200041cc 	andcs	r4, r0, ip, asr #3
    2140:	0010a50f 	andseq	sl, r0, pc, lsl #10
    2144:	2e6b0100 	powcse	f0, f3, f0
    2148:	05000001 	streq	r0, [r0, #-1]
    214c:	003af803 	eorseq	pc, sl, r3, lsl #16
    2150:	10040f20 	andne	r0, r4, r0, lsr #30
    2154:	6c010000 	stcvs	0, cr0, [r1], {-0}
    2158:	0000012e 	andeq	r0, r0, lr, lsr #2
    215c:	3afc0305 	bcc	fff02d78 <firstTime.4040+0xdfef8cb4>
    2160:	39112000 	ldmdbcc	r1, {sp}
    2164:	01000010 	tsteq	r0, r0, lsl r0
    2168:	001e1c74 	andseq	r1, lr, r4, ror ip
    216c:	0000c820 	andeq	ip, r0, r0, lsr #16
    2170:	459c0100 	ldrmi	r0, [ip, #256]	; 0x100
    2174:	12000004 	andne	r0, r0, #4
    2178:	000006e4 	andeq	r0, r0, r4, ror #13
    217c:	01627401 	cmneq	r2, r1, lsl #8
    2180:	91020000 	mrsls	r0, (UNDEF: 2)
    2184:	03970f74 	orrseq	r0, r7, #116, 30	; 0x1d0
    2188:	76010000 	strvc	r0, [r1], -r0
    218c:	0000012e 	andeq	r0, r0, lr, lsr #2
    2190:	3b000305 	blcc	2dac <startup-0x1fffd254>
    2194:	7e0f2000 	cdpvc	0, 0, cr2, cr15, cr0, {0}
    2198:	0100000f 	tsteq	r0, pc
    219c:	00012e77 	andeq	r2, r1, r7, ror lr
    21a0:	a8030500 	stmdage	r3, {r8, sl}
    21a4:	00200082 	eoreq	r0, r0, r2, lsl #1
    21a8:	0010b513 	andseq	fp, r0, r3, lsl r5
    21ac:	f46e0100 	vld4.8	{d16,d18,d20,d22}, [lr], r0
    21b0:	2820001d 	stmdacs	r0!, {r0, r2, r3, r4}
    21b4:	01000000 	mrseq	r0, (UNDEF: 0)
    21b8:	0004739c 	muleq	r4, ip, r3
    21bc:	00781400 	rsbseq	r1, r8, r0, lsl #8
    21c0:	012e6e01 			; <UNDEFINED> instruction: 0x012e6e01
    21c4:	91020000 	mrsls	r0, (UNDEF: 2)
    21c8:	00791474 	rsbseq	r1, r9, r4, ror r4
    21cc:	012e6e01 			; <UNDEFINED> instruction: 0x012e6e01
    21d0:	91020000 	mrsls	r0, (UNDEF: 2)
    21d4:	e5110070 	ldr	r0, [r1, #-112]	; 0xffffff90
    21d8:	0100000f 	tsteq	r0, pc
    21dc:	001cfc50 	andseq	pc, ip, r0, asr ip	; <UNPREDICTABLE>
    21e0:	0000f820 	andeq	pc, r0, r0, lsr #16
    21e4:	a89c0100 	ldmge	ip, {r8}
    21e8:	12000004 	andne	r0, r0, #4
    21ec:	00001091 	muleq	r0, r1, r0
    21f0:	01625001 	cmneq	r2, r1
    21f4:	91020000 	mrsls	r0, (UNDEF: 2)
    21f8:	086b0f6c 	stmdaeq	fp!, {r2, r3, r5, r6, r8, r9, sl, fp}^
    21fc:	51010000 	mrspl	r0, (UNDEF: 1)
    2200:	0000012e 	andeq	r0, r0, lr, lsr #2
    2204:	82a40305 	adchi	r0, r4, #335544320	; 0x14000000
    2208:	15002000 	strne	r2, [r0, #-0]
    220c:	00000433 	andeq	r0, r0, r3, lsr r4
    2210:	1bbc2d01 	blne	fef0d61c <firstTime.4040+0xdef03558>
    2214:	01402000 	mrseq	r2, (UNDEF: 64)
    2218:	9c010000 	stcls	0, cr0, [r1], {-0}
    221c:	000d000f 	andeq	r0, sp, pc
    2220:	9e2f0100 	suflse	f0, f7, f0
    2224:	02000000 	andeq	r0, r0, #0
    2228:	0a0f7491 	beq	3df474 <startup-0x1fc20b8c>
    222c:	0100000d 	tsteq	r0, sp
    2230:	00009e32 	andeq	r9, r0, r2, lsr lr
    2234:	70910200 	addsvc	r0, r1, r0, lsl #4
    2238:	000b000f 	andeq	r0, fp, pc
    223c:	9e350100 	rsflss	f0, f5, f0
    2240:	02000000 	andeq	r0, r0, #0
    2244:	210f6c91 			; <UNDEFINED> instruction: 0x210f6c91
    2248:	0100000a 	tsteq	r0, sl
    224c:	00009e39 	andeq	r9, r0, r9, lsr lr
    2250:	68910200 	ldmvs	r1, {r9}
    2254:	000d2a0f 	andeq	r2, sp, pc, lsl #20
    2258:	9e3c0100 	rsflse	f0, f4, f0
    225c:	02000000 	andeq	r0, r0, #0
    2260:	be0f6491 	mcrlt	4, 0, r6, cr15, cr1, {4}
    2264:	0100000a 	tsteq	r0, sl
    2268:	00009e3f 	andeq	r9, r0, pc, lsr lr
    226c:	60910200 	addsvs	r0, r1, r0, lsl #4
    2270:	000cd60f 	andeq	sp, ip, pc, lsl #12
    2274:	9e440100 	dvflss	f0, f4, f0
    2278:	02000000 	andeq	r0, r0, #0
    227c:	340f5c91 	strcc	r5, [pc], #-3217	; 2284 <startup-0x1fffdd7c>
    2280:	0100000d 	tsteq	r0, sp
    2284:	00009e47 	andeq	r9, r0, r7, asr #28
    2288:	58910200 	ldmpl	r1, {r9}
    228c:	000d3e0f 	andeq	r3, sp, pc, lsl #28
    2290:	9e4a0100 	dvflse	f0, f2, f0
    2294:	02000000 	andeq	r0, r0, #0
    2298:	00005491 	muleq	r0, r1, r4
    229c:	0000055b 	andeq	r0, r0, fp, asr r5
    22a0:	07410004 	strbeq	r0, [r1, -r4]
    22a4:	01040000 	mrseq	r0, (UNDEF: 4)
    22a8:	00000081 	andeq	r0, r0, r1, lsl #1
    22ac:	0012ff0c 	andseq	pc, r2, ip, lsl #30
    22b0:	001ee400 	andseq	lr, lr, r0, lsl #8
    22b4:	0002ac20 	andeq	sl, r2, r0, lsr #24
    22b8:	000acc00 	andeq	ip, sl, r0, lsl #24
    22bc:	020c0200 	andeq	r0, ip, #0, 4
    22c0:	00004e05 	andeq	r4, r0, r5, lsl #28
    22c4:	03090300 	movweq	r0, #37632	; 0x9300
    22c8:	07020000 	streq	r0, [r2, -r0]
    22cc:	0000004e 	andeq	r0, r0, lr, asr #32
    22d0:	067b0300 	ldrbteq	r0, [fp], -r0, lsl #6
    22d4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    22d8:	0000004e 	andeq	r0, r0, lr, asr #32
    22dc:	14760304 	ldrbtne	r0, [r6], #-772	; 0xfffffcfc
    22e0:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    22e4:	00000055 	andeq	r0, r0, r5, asr r0
    22e8:	04040008 	streq	r0, [r4], #-8
    22ec:	00032d07 	andeq	r2, r3, r7, lsl #26
    22f0:	5b040500 	blpl	1036f8 <startup-0x1fefc908>
    22f4:	04000000 	streq	r0, [r0], #-0
    22f8:	045d0801 	ldrbeq	r0, [sp], #-2049	; 0xfffff7ff
    22fc:	c8060000 	stmdagt	r6, {}	; <UNPREDICTABLE>
    2300:	02000015 	andeq	r0, r0, #21
    2304:	0000210a 	andeq	r2, r0, sl, lsl #2
    2308:	00160700 	andseq	r0, r6, r0, lsl #14
    230c:	030c0000 	movweq	r0, #49152	; 0xc000
    2310:	00009e06 	andeq	r9, r0, r6, lsl #28
    2314:	05480300 	strbeq	r0, [r8, #-768]	; 0xfffffd00
    2318:	07030000 	streq	r0, [r3, -r0]
    231c:	0000009e 	muleq	r0, lr, r0
    2320:	001d0300 	andseq	r0, sp, r0, lsl #6
    2324:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2328:	0000009e 	muleq	r0, lr, r0
    232c:	00120304 	andseq	r0, r2, r4, lsl #6
    2330:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    2334:	0000009e 	muleq	r0, lr, r0
    2338:	04050008 	streq	r0, [r5], #-8
    233c:	00000062 	andeq	r0, r0, r2, rrx
    2340:	000f9606 	andeq	r9, pc, r6, lsl #12
    2344:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
    2348:	07000000 	streq	r0, [r0, -r0]
    234c:	00000640 	andeq	r0, r0, r0, asr #12
    2350:	28060424 	stmdacs	r6, {r2, r5, sl}
    2354:	03000001 	movweq	r0, #1
    2358:	000003fa 	strdeq	r0, [r0], -sl
    235c:	01280704 			; <UNDEFINED> instruction: 0x01280704
    2360:	03000000 	movweq	r0, #0
    2364:	0000064c 	andeq	r0, r0, ip, asr #12
    2368:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
    236c:	03040000 	movweq	r0, #16384	; 0x4000
    2370:	000005b3 			; <UNDEFINED> instruction: 0x000005b3
    2374:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
    2378:	03080000 	movweq	r0, #32768	; 0x8000
    237c:	000005df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2380:	01460c04 	cmpeq	r6, r4, lsl #24
    2384:	030c0000 	movweq	r0, #49152	; 0xc000
    2388:	00000302 	andeq	r0, r0, r2, lsl #6
    238c:	01460d04 	cmpeq	r6, r4, lsl #26
    2390:	03100000 	tsteq	r0, #0
    2394:	0000040c 	andeq	r0, r0, ip, lsl #8
    2398:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
    239c:	03140000 	tsteq	r4, #0
    23a0:	00000052 	andeq	r0, r0, r2, asr r0
    23a4:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
    23a8:	03180000 	tsteq	r8, #0
    23ac:	0000037d 	andeq	r0, r0, sp, ror r3
    23b0:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
    23b4:	031c0000 	tsteq	ip, #0
    23b8:	0000038d 	andeq	r0, r0, sp, lsl #7
    23bc:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
    23c0:	00200000 	eoreq	r0, r0, r0
    23c4:	00a40405 	adceq	r0, r4, r5, lsl #8
    23c8:	04080000 	streq	r0, [r8], #-0
    23cc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    23d0:	01400900 	cmpeq	r0, r0, lsl #18
    23d4:	400a0000 	andmi	r0, sl, r0
    23d8:	00000001 	andeq	r0, r0, r1
    23dc:	00af0405 	adceq	r0, pc, r5, lsl #8
    23e0:	04050000 	streq	r0, [r5], #-0
    23e4:	00000135 	andeq	r0, r0, r5, lsr r1
    23e8:	00064106 	andeq	r4, r6, r6, lsl #2
    23ec:	af150400 	svcge	0x00150400
    23f0:	0b000000 	bleq	23f8 <startup-0x1fffdc08>
    23f4:	00000162 	andeq	r0, r0, r2, ror #2
    23f8:	00000162 	andeq	r0, r0, r2, ror #2
    23fc:	0405000c 	streq	r0, [r5], #-12
    2400:	0000014c 	andeq	r0, r0, ip, asr #2
    2404:	0004e00d 	andeq	lr, r4, sp
    2408:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
    240c:	0d000001 	stceq	0, cr0, [r0, #-4]
    2410:	000003c8 	andeq	r0, r0, r8, asr #7
    2414:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
    2418:	5b0b0000 	blpl	2c2420 <startup-0x1fd3dbe0>
    241c:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    2420:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    2424:	0000018e 	andeq	r0, r0, lr, lsl #3
    2428:	04040074 	streq	r0, [r4], #-116	; 0xffffff8c
    242c:	0003aa07 	andeq	sl, r3, r7, lsl #20
    2430:	128e0f00 	addne	r0, lr, #0, 30
    2434:	03050000 	movweq	r0, #20480	; 0x5000
    2438:	0000017e 	andeq	r0, r0, lr, ror r1
    243c:	82ac0305 	adchi	r0, ip, #335544320	; 0x14000000
    2440:	c70f2000 	strgt	r2, [pc, -r0]
    2444:	06000010 			; <UNDEFINED> instruction: 0x06000010
    2448:	00017e03 	andeq	r7, r1, r3, lsl #28
    244c:	24030500 	strcs	r0, [r3], #-1280	; 0xfffffb00
    2450:	0f200083 	svceq	0x00200083
    2454:	00001184 	andeq	r1, r0, r4, lsl #3
    2458:	017e0307 	cmneq	lr, r7, lsl #6
    245c:	03050000 	movweq	r0, #20480	; 0x5000
    2460:	2000839c 	mulcs	r0, ip, r3
    2464:	0012500f 	andseq	r5, r2, pc
    2468:	7e030800 	cdpvc	8, 0, cr0, cr3, cr0, {0}
    246c:	05000001 	streq	r0, [r0, #-1]
    2470:	00841403 	addeq	r1, r4, r3, lsl #8
    2474:	10e40f20 	rscne	r0, r4, r0, lsr #30
    2478:	03090000 	movweq	r0, #36864	; 0x9000
    247c:	0000017e 	andeq	r0, r0, lr, ror r1
    2480:	848c0305 	strhi	r0, [ip], #773	; 0x305
    2484:	040f2000 	streq	r2, [pc], #-0	; 248c <startup-0x1fffdb74>
    2488:	0a000011 	beq	24d4 <startup-0x1fffdb2c>
    248c:	00017e03 	andeq	r7, r1, r3, lsl #28
    2490:	04030500 	streq	r0, [r3], #-1280	; 0xfffffb00
    2494:	0f200085 	svceq	0x00200085
    2498:	000011f5 	strdeq	r1, [r0], -r5
    249c:	017e030b 	cmneq	lr, fp, lsl #6
    24a0:	03050000 	movweq	r0, #20480	; 0x5000
    24a4:	2000857c 	andcs	r8, r0, ip, ror r5
    24a8:	0012190f 	andseq	r1, r2, pc, lsl #18
    24ac:	7e030c00 	cdpvc	12, 0, cr0, cr3, cr0, {0}
    24b0:	05000001 	streq	r0, [r0, #-1]
    24b4:	0085f403 	addeq	pc, r5, r3, lsl #8
    24b8:	114e0f20 	cmpne	lr, r0, lsr #30
    24bc:	030d0000 	movweq	r0, #53248	; 0xd000
    24c0:	0000017e 	andeq	r0, r0, lr, ror r1
    24c4:	866c0305 	strbthi	r0, [ip], -r5, lsl #6
    24c8:	710f2000 	mrsvc	r2, CPSR
    24cc:	0e000012 	mcreq	0, 0, r0, cr0, cr2, {0}
    24d0:	00017e03 	andeq	r7, r1, r3, lsl #28
    24d4:	e4030500 	str	r0, [r3], #-1280	; 0xfffffb00
    24d8:	0f200086 	svceq	0x00200086
    24dc:	000012ac 	andeq	r1, r0, ip, lsr #5
    24e0:	017e030f 	cmneq	lr, pc, lsl #6
    24e4:	03050000 	movweq	r0, #20480	; 0x5000
    24e8:	2000875c 	andcs	r8, r0, ip, asr r7
    24ec:	0012070f 	andseq	r0, r2, pc, lsl #14
    24f0:	7e031000 	cdpvc	0, 0, cr1, cr3, cr0, {0}
    24f4:	05000001 	streq	r0, [r0, #-1]
    24f8:	0087d403 	addeq	sp, r7, r3, lsl #8
    24fc:	10d81020 	sbcsne	r1, r8, r0, lsr #32
    2500:	11010000 	mrsne	r0, (UNDEF: 1)
    2504:	0000009e 	muleq	r0, lr, r0
    2508:	43980305 	orrsmi	r0, r8, #335544320	; 0x14000000
    250c:	45102000 	ldrmi	r2, [r0, #-0]
    2510:	01000012 	tsteq	r0, r2, lsl r0
    2514:	00009e12 	andeq	r9, r0, r2, lsl lr
    2518:	10030500 	andne	r0, r3, r0, lsl #10
    251c:	10200043 	eorne	r0, r0, r3, asr #32
    2520:	000012a0 	andeq	r1, r0, r0, lsr #5
    2524:	009e1301 	addseq	r1, lr, r1, lsl #6
    2528:	03050000 	movweq	r0, #20480	; 0x5000
    252c:	20004314 	andcs	r4, r0, r4, lsl r3
    2530:	00112210 	andseq	r2, r1, r0, lsl r2
    2534:	9e140100 	muflss	f0, f4, f0
    2538:	05000000 	streq	r0, [r0, #-0]
    253c:	0043c003 	subeq	ip, r3, r3
    2540:	12f41020 	rscsne	r1, r4, #32
    2544:	15010000 	strne	r0, [r1, #-0]
    2548:	0000009e 	muleq	r0, lr, r0
    254c:	430c0305 	movwmi	r0, #49925	; 0xc305
    2550:	47102000 	ldrmi	r2, [r0, -r0]
    2554:	01000013 	tsteq	r0, r3, lsl r0
    2558:	00009e16 	andeq	r9, r0, r6, lsl lr
    255c:	a8030500 	stmdage	r3, {r8, sl}
    2560:	10200043 	eorne	r0, r0, r3, asr #32
    2564:	000011a2 	andeq	r1, r0, r2, lsr #3
    2568:	009e1701 	addseq	r1, lr, r1, lsl #14
    256c:	03050000 	movweq	r0, #20480	; 0x5000
    2570:	200043ac 	andcs	r4, r0, ip, lsr #7
    2574:	0011be10 	andseq	fp, r1, r0, lsl lr
    2578:	9e180100 	muflse	f0, f0, f0
    257c:	05000000 	streq	r0, [r0, #-0]
    2580:	0042c003 	subeq	ip, r2, r3
    2584:	11161020 	tstne	r6, r0, lsr #32
    2588:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    258c:	0000009e 	muleq	r0, lr, r0
    2590:	42a40305 	adcmi	r0, r4, #335544320	; 0x14000000
    2594:	3b102000 	blcc	40a59c <startup-0x1fbf5a64>
    2598:	01000013 	tsteq	r0, r3, lsl r0
    259c:	00009e1a 	andeq	r9, r0, sl, lsl lr
    25a0:	94030500 	strls	r0, [r3], #-1280	; 0xfffffb00
    25a4:	10200043 	eorne	r0, r0, r3, asr #32
    25a8:	00001283 	andeq	r1, r0, r3, lsl #5
    25ac:	009e1b01 	addseq	r1, lr, r1, lsl #22
    25b0:	03050000 	movweq	r0, #20480	; 0x5000
    25b4:	20004330 	andcs	r4, r0, r0, lsr r3
    25b8:	0012bd10 	andseq	fp, r2, r0, lsl sp
    25bc:	9e1c0100 	muflse	f0, f4, f0
    25c0:	05000000 	streq	r0, [r0, #-0]
    25c4:	0043bc03 	subeq	fp, r3, r3, lsl #24
    25c8:	12621020 	rsbne	r1, r2, #32
    25cc:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    25d0:	00000062 	andeq	r0, r0, r2, rrx
    25d4:	43b00305 	movsmi	r0, #335544320	; 0x14000000
    25d8:	f5102000 			; <UNDEFINED> instruction: 0xf5102000
    25dc:	01000010 	tsteq	r0, r0, lsl r0
    25e0:	0000621f 	andeq	r6, r0, pc, lsl r2
    25e4:	9c030500 	cfstr32ls	mvfx0, [r3], {-0}
    25e8:	10200043 	eorne	r0, r0, r3, asr #32
    25ec:	0000132d 	andeq	r1, r0, sp, lsr #6
    25f0:	00622001 	rsbeq	r2, r2, r1
    25f4:	03050000 	movweq	r0, #20480	; 0x5000
    25f8:	20004280 	andcs	r4, r0, r0, lsl #5
    25fc:	00112e10 	andseq	r2, r1, r0, lsl lr
    2600:	62210100 	eorvs	r0, r1, #0, 2
    2604:	05000000 	streq	r0, [r0, #-0]
    2608:	00430003 	subeq	r0, r3, r3
    260c:	113e1020 	teqne	lr, r0, lsr #32
    2610:	22010000 	andcs	r0, r1, #0
    2614:	00000062 	andeq	r0, r0, r2, rrx
    2618:	42e80305 	rscmi	r0, r8, #335544320	; 0x14000000
    261c:	69102000 	ldmdbvs	r0, {sp}
    2620:	01000011 	tsteq	r0, r1, lsl r0
    2624:	00006223 	andeq	r6, r0, r3, lsr #4
    2628:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
    262c:	10200043 	eorne	r0, r0, r3, asr #32
    2630:	000012e4 	andeq	r1, r0, r4, ror #5
    2634:	00622401 	rsbeq	r2, r2, r1, lsl #8
    2638:	03050000 	movweq	r0, #20480	; 0x5000
    263c:	20004388 	andcs	r4, r0, r8, lsl #7
    2640:	0011ae10 	andseq	sl, r1, r0, lsl lr
    2644:	62250100 	eorvs	r0, r5, #0, 2
    2648:	05000000 	streq	r0, [r0, #-0]
    264c:	0042a803 	subeq	sl, r2, r3, lsl #16
    2650:	12c91020 	sbcne	r1, r9, #32
    2654:	26010000 	strcs	r0, [r1], -r0
    2658:	00000062 	andeq	r0, r0, r2, rrx
    265c:	42f40305 	rscsmi	r0, r4, #335544320	; 0x14000000
    2660:	c9102000 	ldmdbgt	r0, {sp}
    2664:	01000011 	tsteq	r0, r1, lsl r0
    2668:	00006227 	andeq	r6, r0, r7, lsr #4
    266c:	18030500 	stmdane	r3, {r8, sl}
    2670:	10200043 	eorne	r0, r0, r3, asr #32
    2674:	000011d9 	ldrdeq	r1, [r0], -r9
    2678:	00622801 	rsbeq	r2, r2, r1, lsl #16
    267c:	03050000 	movweq	r0, #20480	; 0x5000
    2680:	2000428c 	andcs	r4, r0, ip, lsl #5
    2684:	00122a10 	andseq	r2, r2, r0, lsl sl
    2688:	62290100 	eorvs	r0, r9, #0, 2
    268c:	05000000 	streq	r0, [r0, #-0]
    2690:	00432403 	subeq	r2, r3, r3, lsl #8
    2694:	11601020 	cmnne	r0, r0, lsr #32
    2698:	2c010000 	stccs	0, cr0, [r1], {-0}
    269c:	0000014c 	andeq	r0, r0, ip, asr #2
    26a0:	42c40305 	sbcmi	r0, r4, #335544320	; 0x14000000
    26a4:	96102000 	ldrls	r2, [r0], -r0
    26a8:	01000011 	tsteq	r0, r1, lsl r0
    26ac:	0000a42d 	andeq	sl, r0, sp, lsr #8
    26b0:	40030500 	andmi	r0, r3, r0, lsl #10
    26b4:	10200043 	eorne	r0, r0, r3, asr #32
    26b8:	00001239 	andeq	r1, r0, r9, lsr r2
    26bc:	00a42e01 	adceq	r2, r4, r1, lsl #28
    26c0:	03050000 	movweq	r0, #20480	; 0x5000
    26c4:	20004298 	mulcs	r0, r8, r2
    26c8:	0011e910 	andseq	lr, r1, r0, lsl r9
    26cc:	a42f0100 	strtge	r0, [pc], #-256	; 26d4 <startup-0x1fffd92c>
    26d0:	05000000 	streq	r0, [r0, #-0]
    26d4:	0042b403 	subeq	fp, r2, r3, lsl #8
    26d8:	11781020 	cmnne	r8, r0, lsr #32
    26dc:	30010000 	andcc	r0, r1, r0
    26e0:	000000a4 	andeq	r0, r0, r4, lsr #1
    26e4:	43340305 	teqmi	r4, #335544320	; 0x14000000
    26e8:	a40b2000 	strge	r2, [fp], #-0
    26ec:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    26f0:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    26f4:	0000018e 	andeq	r0, r0, lr, lsl #3
    26f8:	d8100003 	ldmdale	r0, {r0, r1}
    26fc:	01000012 	tsteq	r0, r2, lsl r0
    2700:	00044e31 	andeq	r4, r4, r1, lsr lr
    2704:	58030500 	stmdapl	r3, {r8, sl}
    2708:	11200043 			; <UNDEFINED> instruction: 0x11200043
    270c:	00000372 	andeq	r0, r0, r2, ror r3
    2710:	208c5f01 	addcs	r5, ip, r1, lsl #30
    2714:	01042000 	mrseq	r2, (UNDEF: 4)
    2718:	9c010000 	stcls	0, cr0, [r1], {-0}
    271c:	000004a4 	andeq	r0, r0, r4, lsr #9
    2720:	00116012 	andseq	r6, r1, r2, lsl r0
    2724:	625f0100 	subsvs	r0, pc, #0, 2
    2728:	02000001 	andeq	r0, r0, #1
    272c:	6b0f6c91 	blvs	3dd978 <startup-0x1fc22688>
    2730:	01000008 	tsteq	r0, r8
    2734:	00012e60 	andeq	r2, r1, r0, ror #28
    2738:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
    273c:	00200088 	eoreq	r0, r0, r8, lsl #1
    2740:	00043313 	andeq	r3, r4, r3, lsl r3
    2744:	e4320100 	ldrt	r0, [r2], #-256	; 0xffffff00
    2748:	a820001e 	stmdage	r0!, {r1, r2, r3, r4}
    274c:	01000001 	tsteq	r0, r1
    2750:	0d000f9c 	stceq	15, cr0, [r0, #-624]	; 0xfffffd90
    2754:	34010000 	strcc	r0, [r1], #-0
    2758:	0000009e 	muleq	r0, lr, r0
    275c:	0f749102 	svceq	0x00749102
    2760:	00000d0a 	andeq	r0, r0, sl, lsl #26
    2764:	009e3701 	addseq	r3, lr, r1, lsl #14
    2768:	91020000 	mrsls	r0, (UNDEF: 2)
    276c:	0b000f70 	bleq	6534 <startup-0x1fff9acc>
    2770:	3a010000 	bcc	42778 <startup-0x1ffbd888>
    2774:	0000009e 	muleq	r0, lr, r0
    2778:	0f6c9102 	svceq	0x006c9102
    277c:	00000a21 	andeq	r0, r0, r1, lsr #20
    2780:	009e3e01 	addseq	r3, lr, r1, lsl #28
    2784:	91020000 	mrsls	r0, (UNDEF: 2)
    2788:	0d2a0f68 	stceq	15, cr0, [sl, #-416]!	; 0xfffffe60
    278c:	41010000 	mrsmi	r0, (UNDEF: 1)
    2790:	0000009e 	muleq	r0, lr, r0
    2794:	0f649102 	svceq	0x00649102
    2798:	00000abe 			; <UNDEFINED> instruction: 0x00000abe
    279c:	009e4401 	addseq	r4, lr, r1, lsl #8
    27a0:	91020000 	mrsls	r0, (UNDEF: 2)
    27a4:	0cd60f60 	ldcleq	15, cr0, [r6], {96}	; 0x60
    27a8:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    27ac:	0000009e 	muleq	r0, lr, r0
    27b0:	0f5c9102 	svceq	0x005c9102
    27b4:	00000d34 	andeq	r0, r0, r4, lsr sp
    27b8:	009e4c01 	addseq	r4, lr, r1, lsl #24
    27bc:	91020000 	mrsls	r0, (UNDEF: 2)
    27c0:	0d3e0f58 	ldceq	15, cr0, [lr, #-352]!	; 0xfffffea0
    27c4:	4f010000 	svcmi	0x00010000
    27c8:	0000009e 	muleq	r0, lr, r0
    27cc:	0f549102 	svceq	0x00549102
    27d0:	00000a47 	andeq	r0, r0, r7, asr #20
    27d4:	009e5301 	addseq	r5, lr, r1, lsl #6
    27d8:	91020000 	mrsls	r0, (UNDEF: 2)
    27dc:	0a8b0f50 	beq	fe2c6524 <firstTime.4040+0xde2bc460>
    27e0:	56010000 	strpl	r0, [r1], -r0
    27e4:	0000009e 	muleq	r0, lr, r0
    27e8:	0f4c9102 	svceq	0x004c9102
    27ec:	00000a95 	muleq	r0, r5, sl
    27f0:	009e5901 	addseq	r5, lr, r1, lsl #18
    27f4:	91020000 	mrsls	r0, (UNDEF: 2)
    27f8:	9f000048 	svcls	0x00000048
    27fc:	04000008 	streq	r0, [r0], #-8
    2800:	00084100 	andeq	r4, r8, r0, lsl #2
    2804:	81010400 	tsthi	r1, r0, lsl #8
    2808:	0c000000 	stceq	0, cr0, [r0], {-0}
    280c:	00001438 	andeq	r1, r0, r8, lsr r4
    2810:	20002190 	mulcs	r0, r0, r1
    2814:	00000e44 	andeq	r0, r0, r4, asr #28
    2818:	00000c75 	andeq	r0, r0, r5, ror ip
    281c:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
    2820:	0000004e 	andeq	r0, r0, lr, asr #32
    2824:	00030903 	andeq	r0, r3, r3, lsl #18
    2828:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
    282c:	00000000 	andeq	r0, r0, r0
    2830:	00067b03 	andeq	r7, r6, r3, lsl #22
    2834:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
    2838:	04000000 	streq	r0, [r0], #-0
    283c:	00147603 	andseq	r7, r4, r3, lsl #12
    2840:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
    2844:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2848:	07040400 	streq	r0, [r4, -r0, lsl #8]
    284c:	0000032d 	andeq	r0, r0, sp, lsr #6
    2850:	005b0405 	subseq	r0, fp, r5, lsl #8
    2854:	01040000 	mrseq	r0, (UNDEF: 4)
    2858:	00045d08 	andeq	r5, r4, r8, lsl #26
    285c:	15c80600 	strbne	r0, [r8, #1536]	; 0x600
    2860:	0a020000 	beq	82868 <startup-0x1ff7d798>
    2864:	00000021 	andeq	r0, r0, r1, lsr #32
    2868:	00001607 	andeq	r1, r0, r7, lsl #12
    286c:	06030c00 	streq	r0, [r3], -r0, lsl #24
    2870:	0000009e 	muleq	r0, lr, r0
    2874:	00054803 	andeq	r4, r5, r3, lsl #16
    2878:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
    287c:	00000000 	andeq	r0, r0, r0
    2880:	00001d03 	andeq	r1, r0, r3, lsl #26
    2884:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
    2888:	04000000 	streq	r0, [r0], #-0
    288c:	00001203 	andeq	r1, r0, r3, lsl #4
    2890:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
    2894:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2898:	62040500 	andvs	r0, r4, #0, 10
    289c:	06000000 	streq	r0, [r0], -r0
    28a0:	00000f96 	muleq	r0, r6, pc	; <UNPREDICTABLE>
    28a4:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
    28a8:	40070000 	andmi	r0, r7, r0
    28ac:	24000006 	strcs	r0, [r0], #-6
    28b0:	01280604 			; <UNDEFINED> instruction: 0x01280604
    28b4:	fa030000 	blx	c28bc <startup-0x1ff3d744>
    28b8:	04000003 	streq	r0, [r0], #-3
    28bc:	00012807 	andeq	r2, r1, r7, lsl #16
    28c0:	4c030000 	stcmi	0, cr0, [r3], {-0}
    28c4:	04000006 	streq	r0, [r0], #-6
    28c8:	00012e08 	andeq	r2, r1, r8, lsl #28
    28cc:	b3030400 	movwlt	r0, #13312	; 0x3400
    28d0:	04000005 	streq	r0, [r0], #-5
    28d4:	00012e09 	andeq	r2, r1, r9, lsl #28
    28d8:	df030800 	svcle	0x00030800
    28dc:	04000005 	streq	r0, [r0], #-5
    28e0:	0001460c 	andeq	r4, r1, ip, lsl #12
    28e4:	02030c00 	andeq	r0, r3, #0, 24
    28e8:	04000003 	streq	r0, [r0], #-3
    28ec:	0001460d 	andeq	r4, r1, sp, lsl #12
    28f0:	0c031000 	stceq	0, cr1, [r3], {-0}
    28f4:	04000004 	streq	r0, [r0], #-4
    28f8:	00012e10 	andeq	r2, r1, r0, lsl lr
    28fc:	52031400 	andpl	r1, r3, #0, 8
    2900:	04000000 	streq	r0, [r0], #-0
    2904:	00012e11 	andeq	r2, r1, r1, lsl lr
    2908:	7d031800 	stcvc	8, cr1, [r3, #-0]
    290c:	04000003 	streq	r0, [r0], #-3
    2910:	00012e12 	andeq	r2, r1, r2, lsl lr
    2914:	8d031c00 	stchi	12, cr1, [r3, #-0]
    2918:	04000003 	streq	r0, [r0], #-3
    291c:	00012e13 	andeq	r2, r1, r3, lsl lr
    2920:	05002000 	streq	r2, [r0, #-0]
    2924:	0000a404 	andeq	sl, r0, r4, lsl #8
    2928:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
    292c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2930:	00014009 	andeq	r4, r1, r9
    2934:	01400a00 	cmpeq	r0, r0, lsl #20
    2938:	05000000 	streq	r0, [r0, #-0]
    293c:	0000af04 	andeq	sl, r0, r4, lsl #30
    2940:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
    2944:	06000001 	streq	r0, [r0], -r1
    2948:	00000641 	andeq	r0, r0, r1, asr #12
    294c:	00af1504 	adceq	r1, pc, r4, lsl #10
    2950:	620b0000 	andvs	r0, fp, #0
    2954:	62000001 	andvs	r0, r0, #1
    2958:	0c000001 	stceq	0, cr0, [r0], {1}
    295c:	4c040500 	cfstr32mi	mvfx0, [r4], {-0}
    2960:	0d000001 	stceq	0, cr0, [r0, #-4]
    2964:	000004e0 	andeq	r0, r0, r0, ror #9
    2968:	01571c04 	cmpeq	r7, r4, lsl #24
    296c:	c80d0000 	stmdagt	sp, {}	; <UNPREDICTABLE>
    2970:	04000003 	streq	r0, [r0], #-3
    2974:	00012e1d 	andeq	r2, r1, sp, lsl lr
    2978:	060a0600 	streq	r0, [sl], -r0, lsl #12
    297c:	24050000 	strcs	r0, [r5], #-0
    2980:	0000005b 	andeq	r0, r0, fp, asr r0
    2984:	00017e0b 	andeq	r7, r1, fp, lsl #28
    2988:	00019a00 	andeq	r9, r1, r0, lsl #20
    298c:	019a0e00 	orrseq	r0, sl, r0, lsl #28
    2990:	03ff0000 	mvnseq	r0, #0
    2994:	07040400 	streq	r0, [r4, -r0, lsl #8]
    2998:	000003aa 	andeq	r0, r0, sl, lsr #7
    299c:	0013ac0d 	andseq	sl, r3, sp, lsl #24
    29a0:	892b0500 	stmdbhi	fp!, {r8, sl}
    29a4:	0d000001 	stceq	0, cr0, [r0, #-4]
    29a8:	00000222 	andeq	r0, r0, r2, lsr #4
    29ac:	01892c05 	orreq	r2, r9, r5, lsl #24
    29b0:	6b0d0000 	blvs	3429b8 <startup-0x1fcbd648>
    29b4:	05000004 	streq	r0, [r0, #-4]
    29b8:	0001892d 	andeq	r8, r1, sp, lsr #18
    29bc:	030f0d00 	movweq	r0, #64768	; 0xfd00
    29c0:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    29c4:	00000189 	andeq	r0, r0, r9, lsl #3
    29c8:	00029c0d 	andeq	r9, r2, sp, lsl #24
    29cc:	892f0500 	stmdbhi	pc!, {r8, sl}	; <UNPREDICTABLE>
    29d0:	0d000001 	stceq	0, cr0, [r0, #-4]
    29d4:	00000622 	andeq	r0, r0, r2, lsr #12
    29d8:	01893005 	orreq	r3, r9, r5
    29dc:	120d0000 	andne	r0, sp, #0
    29e0:	05000006 	streq	r0, [r0, #-6]
    29e4:	00018931 	andeq	r8, r1, r1, lsr r9
    29e8:	01ac0f00 			; <UNDEFINED> instruction: 0x01ac0f00
    29ec:	2b010000 	blcs	429f4 <startup-0x1ffbd60c>
    29f0:	53c40305 	bicpl	r0, r4, #335544320	; 0x14000000
    29f4:	b70f2000 	strlt	r2, [pc, -r0]
    29f8:	01000001 	tsteq	r0, r1
    29fc:	c403052c 	strgt	r0, [r3], #-1324	; 0xfffffad4
    2a00:	0f200047 	svceq	0x00200047
    2a04:	000001c2 	andeq	r0, r0, r2, asr #3
    2a08:	03052d01 	movweq	r2, #23809	; 0x5d01
    2a0c:	20004fc4 	andcs	r4, r0, r4, asr #31
    2a10:	0001cd0f 	andeq	ip, r1, pc, lsl #26
    2a14:	052e0100 	streq	r0, [lr, #-256]!	; 0xffffff00
    2a18:	0057c403 	subseq	ip, r7, r3, lsl #8
    2a1c:	01a10f20 			; <UNDEFINED> instruction: 0x01a10f20
    2a20:	2f010000 	svccs	0x00010000
    2a24:	4bc40305 	blmi	ff103640 <firstTime.4040+0xdf0f957c>
    2a28:	d8102000 	ldmdale	r0, {sp}
    2a2c:	01000001 	tsteq	r0, r1
    2a30:	43c40305 	bicmi	r0, r4, #335544320	; 0x14000000
    2a34:	e3102000 	tst	r0, #0
    2a38:	01000001 	tsteq	r0, r1
    2a3c:	5bc40305 	blpl	ff103658 <firstTime.4040+0xdf0f9594>
    2a40:	e2112000 	ands	r2, r1, #0
    2a44:	01000013 	tsteq	r0, r3, lsl r0
    2a48:	2f6a01a8 	svccs	0x006a01a8
    2a4c:	006a2000 	rsbeq	r2, sl, r0
    2a50:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a54:	0000026d 	andeq	r0, r0, sp, ror #4
    2a58:	0014c912 	andseq	ip, r4, r2, lsl r9
    2a5c:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
    2a60:	0000012e 	andeq	r0, r0, lr, lsr #2
    2a64:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2a68:	00137311 	andseq	r7, r3, r1, lsl r3
    2a6c:	01a00100 	lsleq	r0, r0, #2
    2a70:	20002ee8 	andcs	r2, r0, r8, ror #29
    2a74:	00000082 	andeq	r0, r0, r2, lsl #1
    2a78:	02a29c01 	adceq	r9, r2, #256	; 0x100
    2a7c:	bd120000 	ldclt	0, cr0, [r2, #-0]
    2a80:	01000013 	tsteq	r0, r3, lsl r0
    2a84:	016201a0 	smultbeq	r2, r0, r1
    2a88:	91020000 	mrsls	r0, (UNDEF: 2)
    2a8c:	0414136c 	ldreq	r1, [r4], #-876	; 0xfffffc94
    2a90:	a1010000 	mrsge	r0, (UNDEF: 1)
    2a94:	00012e01 	andeq	r2, r1, r1, lsl #28
    2a98:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2a9c:	14811400 	strne	r1, [r1], #1024	; 0x400
    2aa0:	96010000 	strls	r0, [r1], -r0
    2aa4:	002de001 	eoreq	lr, sp, r1
    2aa8:	00010820 	andeq	r0, r1, r0, lsr #16
    2aac:	c69c0100 	ldrgt	r0, [ip], r0, lsl #2
    2ab0:	15000002 	strne	r0, [r0, #-2]
    2ab4:	97010069 	strls	r0, [r1, -r9, rrx]
    2ab8:	00012e01 	andeq	r2, r1, r1, lsl #28
    2abc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2ac0:	14131100 	ldrne	r1, [r3], #-256	; 0xffffff00
    2ac4:	70010000 	andvc	r0, r1, r0
    2ac8:	002cb001 	eoreq	fp, ip, r1
    2acc:	00013020 	andeq	r3, r1, r0, lsr #32
    2ad0:	3a9c0100 	bcc	fe702ed8 <firstTime.4040+0xde6f8e14>
    2ad4:	15000003 	strne	r0, [r0, #-3]
    2ad8:	71010078 	tstvc	r1, r8, ror r0
    2adc:	00012e01 	andeq	r2, r1, r1, lsl #28
    2ae0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2ae4:	01007915 	tsteq	r0, r5, lsl r9
    2ae8:	012e0172 			; <UNDEFINED> instruction: 0x012e0172
    2aec:	91020000 	mrsls	r0, (UNDEF: 2)
    2af0:	03091368 	movweq	r1, #37736	; 0x9368
    2af4:	73010000 	movwvc	r0, #4096	; 0x1000
    2af8:	00012e01 	andeq	r2, r1, r1, lsl #28
    2afc:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2b00:	00067b13 	andeq	r7, r6, r3, lsl fp
    2b04:	01740100 	cmneq	r4, r0, lsl #2
    2b08:	0000012e 	andeq	r0, r0, lr, lsr #2
    2b0c:	15609102 	strbne	r9, [r0, #-258]!	; 0xfffffefe
    2b10:	01003278 	tsteq	r0, r8, ror r2
    2b14:	012e0176 			; <UNDEFINED> instruction: 0x012e0176
    2b18:	91020000 	mrsls	r0, (UNDEF: 2)
    2b1c:	0069165c 	rsbeq	r1, r9, ip, asr r6
    2b20:	2e017a01 	vmlacs.f32	s14, s2, s2
    2b24:	15000001 	strne	r0, [r0, #-1]
    2b28:	7b01006b 	blvc	42cdc <startup-0x1ffbd324>
    2b2c:	00012e01 	andeq	r2, r1, r1, lsl #28
    2b30:	58910200 	ldmpl	r1, {r9}
    2b34:	15131100 	ldrne	r1, [r3, #-256]	; 0xffffff00
    2b38:	65010000 	strvs	r0, [r1, #-0]
    2b3c:	002c5e01 	eoreq	r5, ip, r1, lsl #28
    2b40:	00005220 	andeq	r5, r0, r0, lsr #4
    2b44:	a39c0100 	orrsge	r0, ip, #0, 2
    2b48:	17000003 	strne	r0, [r0, -r3]
    2b4c:	65010078 	strvs	r0, [r1, #-120]	; 0xffffff88
    2b50:	00012e01 	andeq	r2, r1, r1, lsl #28
    2b54:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2b58:	01007917 	tsteq	r0, r7, lsl r9
    2b5c:	012e0165 			; <UNDEFINED> instruction: 0x012e0165
    2b60:	91020000 	mrsls	r0, (UNDEF: 2)
    2b64:	03091268 	movweq	r1, #37480	; 0x9268
    2b68:	65010000 	strvs	r0, [r1, #-0]
    2b6c:	00012e01 	andeq	r2, r1, r1, lsl #28
    2b70:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2b74:	00067b12 	andeq	r7, r6, r2, lsl fp
    2b78:	01650100 	cmneq	r5, r0, lsl #2
    2b7c:	0000012e 	andeq	r0, r0, lr, lsr #2
    2b80:	15609102 	strbne	r9, [r0, #-258]!	; 0xfffffefe
    2b84:	66010069 	strvs	r0, [r1], -r9, rrx
    2b88:	00012e01 	andeq	r2, r1, r1, lsl #28
    2b8c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2b90:	01006a15 	tsteq	r0, r5, lsl sl
    2b94:	012e0167 			; <UNDEFINED> instruction: 0x012e0167
    2b98:	91020000 	mrsls	r0, (UNDEF: 2)
    2b9c:	b6110070 			; <UNDEFINED> instruction: 0xb6110070
    2ba0:	01000014 	tsteq	r0, r4, lsl r0
    2ba4:	2c0c015b 	stfcss	f0, [ip], {91}	; 0x5b
    2ba8:	00522000 	subseq	r2, r2, r0
    2bac:	9c010000 	stcls	0, cr0, [r1], {-0}
    2bb0:	0000040c 	andeq	r0, r0, ip, lsl #8
    2bb4:	01007817 	tsteq	r0, r7, lsl r8
    2bb8:	012e015b 			; <UNDEFINED> instruction: 0x012e015b
    2bbc:	91020000 	mrsls	r0, (UNDEF: 2)
    2bc0:	0079176c 	rsbseq	r1, r9, ip, ror #14
    2bc4:	2e015b01 	vmlacs.f64	d5, d1, d1
    2bc8:	02000001 	andeq	r0, r0, #1
    2bcc:	09126891 	ldmdbeq	r2, {r0, r4, r7, fp, sp, lr}
    2bd0:	01000003 	tsteq	r0, r3
    2bd4:	012e015b 			; <UNDEFINED> instruction: 0x012e015b
    2bd8:	91020000 	mrsls	r0, (UNDEF: 2)
    2bdc:	067b1264 	ldrbteq	r1, [fp], -r4, ror #4
    2be0:	5b010000 	blpl	42be8 <startup-0x1ffbd418>
    2be4:	00012e01 	andeq	r2, r1, r1, lsl #28
    2be8:	60910200 	addsvs	r0, r1, r0, lsl #4
    2bec:	01006915 	tsteq	r0, r5, lsl r9
    2bf0:	012e015c 			; <UNDEFINED> instruction: 0x012e015c
    2bf4:	91020000 	mrsls	r0, (UNDEF: 2)
    2bf8:	006a1574 	rsbeq	r1, sl, r4, ror r5
    2bfc:	2e015d01 	cdpcs	13, 0, cr5, cr1, cr1, {0}
    2c00:	02000001 	andeq	r0, r0, #1
    2c04:	11007091 	swpne	r7, r1, [r0]
    2c08:	000013ed 	andeq	r1, r0, sp, ror #7
    2c0c:	f2014501 	vrshl.s8	d4, d1, d1
    2c10:	1a20002a 	bne	802cc0 <startup-0x1f7fd340>
    2c14:	01000001 	tsteq	r0, r1
    2c18:	0004b79c 	muleq	r4, ip, r7
    2c1c:	00731700 	rsbseq	r1, r3, r0, lsl #14
    2c20:	9e014501 	cfsh32ls	mvfx4, mvfx1, #1
    2c24:	02000000 	andeq	r0, r0, #0
    2c28:	78175491 	ldmdavc	r7, {r0, r4, r7, sl, ip, lr}
    2c2c:	01450100 	mrseq	r0, (UNDEF: 85)
    2c30:	0000012e 	andeq	r0, r0, lr, lsr #2
    2c34:	17509102 	ldrbne	r9, [r0, -r2, lsl #2]
    2c38:	45010079 	strmi	r0, [r1, #-121]	; 0xffffff87
    2c3c:	00012e01 	andeq	r2, r1, r1, lsl #28
    2c40:	4c910200 	lfmmi	f0, 4, [r1], {0}
    2c44:	74657317 	strbtvc	r7, [r5], #-791	; 0xfffffce9
    2c48:	01450100 	mrseq	r0, (UNDEF: 85)
    2c4c:	0000012e 	andeq	r0, r0, lr, lsr #2
    2c50:	12489102 	subne	r9, r8, #-2147483648	; 0x80000000
    2c54:	0000147b 	andeq	r1, r0, fp, ror r4
    2c58:	2e014501 	cfsh32cs	mvfx4, mvfx1, #1
    2c5c:	02000001 	andeq	r0, r0, #1
    2c60:	69150091 	ldmdbvs	r5, {r0, r4, r7}
    2c64:	01460100 	mrseq	r0, (UNDEF: 86)
    2c68:	0000012e 	andeq	r0, r0, lr, lsr #2
    2c6c:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    2c70:	4601006a 	strmi	r0, [r1], -sl, rrx
    2c74:	00012e01 	andeq	r2, r1, r1, lsl #28
    2c78:	68910200 	ldmvs	r1, {r9}
    2c7c:	01006b15 	tsteq	r0, r5, lsl fp
    2c80:	012e0146 			; <UNDEFINED> instruction: 0x012e0146
    2c84:	91020000 	mrsls	r0, (UNDEF: 2)
    2c88:	14ee1364 	strbtne	r1, [lr], #868	; 0x364
    2c8c:	46010000 	strmi	r0, [r1], -r0
    2c90:	00012e01 	andeq	r2, r1, r1, lsl #28
    2c94:	60910200 	addsvs	r0, r1, r0, lsl #4
    2c98:	002b2a18 	eoreq	r2, fp, r8, lsl sl
    2c9c:	0000bc20 	andeq	fp, r0, r0, lsr #24
    2ca0:	14e91300 	strbtne	r1, [r9], #768	; 0x300
    2ca4:	4d010000 	stcmi	0, cr0, [r1, #-0]
    2ca8:	00005b01 	andeq	r5, r0, r1, lsl #22
    2cac:	5f910200 	svcpl	0x00910200
    2cb0:	c2110000 	andsgt	r0, r1, #0
    2cb4:	01000013 	tsteq	r0, r3, lsl r0
    2cb8:	2a1c0130 	bcs	703180 <startup-0x1f8fce80>
    2cbc:	00d62000 	sbcseq	r2, r6, r0
    2cc0:	9c010000 	stcls	0, cr0, [r1], {-0}
    2cc4:	00000520 	andeq	r0, r0, r0, lsr #10
    2cc8:	00136512 	andseq	r6, r3, r2, lsl r5
    2ccc:	01300100 	teqeq	r0, r0, lsl #2
    2cd0:	00000520 	andeq	r0, r0, r0, lsr #10
    2cd4:	15649102 	strbne	r9, [r4, #-258]!	; 0xfffffefe
    2cd8:	31010069 	tstcc	r1, r9, rrx
    2cdc:	00017e01 	andeq	r7, r1, r1, lsl #28
    2ce0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2ce4:	01006a15 	tsteq	r0, r5, lsl sl
    2ce8:	017e0131 	cmneq	lr, r1, lsr r1
    2cec:	91020000 	mrsls	r0, (UNDEF: 2)
    2cf0:	171f1376 			; <UNDEFINED> instruction: 0x171f1376
    2cf4:	31010000 	mrscc	r0, (UNDEF: 1)
    2cf8:	00017e01 	andeq	r7, r1, r1, lsl #28
    2cfc:	6f910200 	svcvs	0x00910200
    2d00:	01006315 	tsteq	r0, r5, lsl r3
    2d04:	017e0131 	cmneq	lr, r1, lsr r1
    2d08:	91020000 	mrsls	r0, (UNDEF: 2)
    2d0c:	006b1575 	rsbeq	r1, fp, r5, ror r5
    2d10:	4e013201 	cdpmi	2, 0, cr3, cr1, cr1, {0}
    2d14:	02000000 	andeq	r0, r0, #0
    2d18:	05007091 	streq	r7, [r0, #-145]	; 0xffffff6f
    2d1c:	00017e04 	andeq	r7, r1, r4, lsl #28
    2d20:	136c1100 	cmnne	ip, #0, 2
    2d24:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    2d28:	00287c01 	eoreq	r7, r8, r1, lsl #24
    2d2c:	0001a020 	andeq	sl, r1, r0, lsr #32
    2d30:	a09c0100 	addsge	r0, ip, r0, lsl #2
    2d34:	17000005 	strne	r0, [r0, -r5]
    2d38:	08010078 	stmdaeq	r1, {r3, r4, r5, r6}
    2d3c:	00012e01 	andeq	r2, r1, r1, lsl #28
    2d40:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2d44:	01007917 	tsteq	r0, r7, lsl r9
    2d48:	012e0108 			; <UNDEFINED> instruction: 0x012e0108
    2d4c:	91020000 	mrsls	r0, (UNDEF: 2)
    2d50:	65731760 	ldrbvs	r1, [r3, #-1888]!	; 0xfffff8a0
    2d54:	08010074 	stmdaeq	r1, {r2, r4, r5, r6}
    2d58:	00012e01 	andeq	r2, r1, r1, lsl #28
    2d5c:	5c910200 	lfmpl	f0, 4, [r1], {0}
    2d60:	0014c413 	andseq	ip, r4, r3, lsl r4
    2d64:	01090100 	mrseq	r0, (UNDEF: 25)
    2d68:	0000017e 	andeq	r0, r0, lr, ror r1
    2d6c:	15779102 	ldrbne	r9, [r7, #-258]!	; 0xfffffefe
    2d70:	09010063 	stmdbeq	r1, {r0, r1, r5, r6}
    2d74:	00017e01 	andeq	r7, r1, r1, lsl #28
    2d78:	6f910200 	svcvs	0x00910200
    2d7c:	00171f13 	andseq	r1, r7, r3, lsl pc
    2d80:	01090100 	mrseq	r0, (UNDEF: 25)
    2d84:	0000017e 	andeq	r0, r0, lr, ror r1
    2d88:	13769102 	cmnne	r6, #-2147483648	; 0x80000000
    2d8c:	00001522 	andeq	r1, r0, r2, lsr #10
    2d90:	2e010a01 	vmlacs.f32	s0, s2, s2
    2d94:	02000001 	andeq	r0, r0, #1
    2d98:	19007091 	stmdbne	r0, {r0, r4, r7, ip, sp, lr}
    2d9c:	000013b7 			; <UNDEFINED> instruction: 0x000013b7
    2da0:	26fcde01 	ldrbtcs	sp, [ip], r1, lsl #28
    2da4:	01802000 	orreq	r2, r0, r0
    2da8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2dac:	00000606 	andeq	r0, r0, r6, lsl #12
    2db0:	0100781a 	tsteq	r0, sl, lsl r8
    2db4:	00012ede 	ldrdeq	r2, [r1], -lr
    2db8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2dbc:	0100791a 	tsteq	r0, sl, lsl r9
    2dc0:	00012ede 	ldrdeq	r2, [r1], -lr
    2dc4:	68910200 	ldmvs	r1, {r9}
    2dc8:	7465731a 	strbtvc	r7, [r5], #-794	; 0xfffffce6
    2dcc:	2ede0100 	cdpcs	1, 13, cr0, cr14, cr0, {0}
    2dd0:	02000001 	andeq	r0, r0, #1
    2dd4:	7b1b6491 	blvc	6dc020 <startup-0x1f923fe0>
    2dd8:	01000014 	tsteq	r0, r4, lsl r0
    2ddc:	00012ede 	ldrdeq	r2, [r1], -lr
    2de0:	60910200 	addsvs	r0, r1, r0, lsl #4
    2de4:	0014c41c 	andseq	ip, r4, ip, lsl r4
    2de8:	7edf0100 	cdpvc	1, 13, cr0, cr15, cr0, {0}
    2dec:	02000001 	andeq	r0, r0, #1
    2df0:	221c7791 	andscs	r7, ip, #38010880	; 0x2440000
    2df4:	01000015 	tsteq	r0, r5, lsl r0
    2df8:	00012ee0 	andeq	r2, r1, r0, ror #29
    2dfc:	70910200 	addsvc	r0, r1, r0, lsl #4
    2e00:	15751d00 	ldrbne	r1, [r5, #-3328]!	; 0xfffff300
    2e04:	d1010000 	mrsle	r0, (UNDEF: 1)
    2e08:	20002696 	mulcs	r0, r6, r6
    2e0c:	00000066 	andeq	r0, r0, r6, rrx
    2e10:	06429c01 	strbeq	r9, [r2], -r1, lsl #24
    2e14:	531c0000 	tstpl	ip, #0
    2e18:	01000013 	tsteq	r0, r3, lsl r0
    2e1c:	00017ed2 	ldrdeq	r7, [r1], -r2
    2e20:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2e24:	0026a418 	eoreq	sl, r6, r8, lsl r4
    2e28:	00003e20 	andeq	r3, r0, r0, lsr #28
    2e2c:	64611e00 	strbtvs	r1, [r1], #-3584	; 0xfffff200
    2e30:	d6010064 	strle	r0, [r1], -r4, rrx
    2e34:	0000017e 	andeq	r0, r0, lr, ror r1
    2e38:	00769102 	rsbseq	r9, r6, r2, lsl #2
    2e3c:	15621f00 	strbne	r1, [r2, #-3840]!	; 0xfffff100
    2e40:	bd010000 	stclt	0, cr0, [r1, #-0]
    2e44:	20002628 	andcs	r2, r0, r8, lsr #12
    2e48:	0000006e 	andeq	r0, r0, lr, rrx
    2e4c:	d61d9c01 	ldrle	r9, [sp], -r1, lsl #24
    2e50:	01000014 	tsteq	r0, r4, lsl r0
    2e54:	0025e2b5 	strhteq	lr, [r5], -r5
    2e58:	00004620 	andeq	r4, r0, r0, lsr #12
    2e5c:	859c0100 	ldrhi	r0, [ip, #256]	; 0x100
    2e60:	1b000006 	blne	2e80 <startup-0x1fffd180>
    2e64:	0000139e 	muleq	r0, lr, r3
    2e68:	017eb501 	cmneq	lr, r1, lsl #10
    2e6c:	91020000 	mrsls	r0, (UNDEF: 2)
    2e70:	171f1b77 			; <UNDEFINED> instruction: 0x171f1b77
    2e74:	b5010000 	strlt	r0, [r1, #-0]
    2e78:	0000017e 	andeq	r0, r0, lr, ror r1
    2e7c:	00769102 	rsbseq	r9, r6, r2, lsl #2
    2e80:	0013901d 	andseq	r9, r3, sp, lsl r0
    2e84:	9cae0100 	stflss	f0, [lr]
    2e88:	46200025 	strtmi	r0, [r0], -r5, lsr #32
    2e8c:	01000000 	mrseq	r0, (UNDEF: 0)
    2e90:	0006b79c 	muleq	r6, ip, r7
    2e94:	139e1b00 	orrsne	r1, lr, #0, 22
    2e98:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    2e9c:	0000017e 	andeq	r0, r0, lr, ror r1
    2ea0:	1b779102 	blne	1de72b0 <startup-0x1e218d50>
    2ea4:	0000171f 	andeq	r1, r0, pc, lsl r7
    2ea8:	017eae01 	cmneq	lr, r1, lsl #28
    2eac:	91020000 	mrsls	r0, (UNDEF: 2)
    2eb0:	051d0076 	ldreq	r0, [sp, #-118]	; 0xffffff8a
    2eb4:	01000014 	tsteq	r0, r4, lsl r0
    2eb8:	00251e99 	mlaeq	r5, r9, lr, r1
    2ebc:	00007e20 	andeq	r7, r0, r0, lsr #28
    2ec0:	e99c0100 	ldmib	ip, {r8}
    2ec4:	1b000006 	blne	2ee4 <startup-0x1fffd11c>
    2ec8:	000005c3 	andeq	r0, r0, r3, asr #11
    2ecc:	017e9901 	cmneq	lr, r1, lsl #18
    2ed0:	91020000 	mrsls	r0, (UNDEF: 2)
    2ed4:	171f1b77 			; <UNDEFINED> instruction: 0x171f1b77
    2ed8:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    2edc:	0000017e 	andeq	r0, r0, lr, ror r1
    2ee0:	00769102 	rsbseq	r9, r6, r2, lsl #2
    2ee4:	00146920 	andseq	r6, r4, r0, lsr #18
    2ee8:	2e940100 	fmlcss	f0, f4, f0
    2eec:	f4000001 	vst4.8	{d0-d3}, [r0], r1
    2ef0:	2a200024 	bcs	802f88 <startup-0x1f7fd078>
    2ef4:	01000000 	mrseq	r0, (UNDEF: 0)
    2ef8:	0007119c 	muleq	r7, ip, r1
    2efc:	171f1b00 	ldrne	r1, [pc, -r0, lsl #22]
    2f00:	94010000 	strls	r0, [r1], #-0
    2f04:	0000017e 	andeq	r0, r0, lr, ror r1
    2f08:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2f0c:	00135821 	andseq	r5, r3, r1, lsr #16
    2f10:	7e7b0100 	rpwvce	f0, f3, f0
    2f14:	60000001 	andvs	r0, r0, r1
    2f18:	94200024 	strtls	r0, [r0], #-36	; 0xffffffdc
    2f1c:	01000000 	mrseq	r0, (UNDEF: 0)
    2f20:	0007469c 	muleq	r7, ip, r6
    2f24:	171f1b00 	ldrne	r1, [pc, -r0, lsl #22]
    2f28:	7b010000 	blvc	42f30 <startup-0x1ffbd0d0>
    2f2c:	0000017e 	andeq	r0, r0, lr, ror r1
    2f30:	1e6f9102 	lgnnee	f1, f2
    2f34:	01007672 	tsteq	r0, r2, ror r6
    2f38:	00005b84 	andeq	r5, r0, r4, lsl #23
    2f3c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2f40:	153a1d00 	ldrne	r1, [sl, #-3328]!	; 0xfffff300
    2f44:	65010000 	strvs	r0, [r1, #-0]
    2f48:	200023f2 	strdcs	r2, [r0], -r2	; <UNPREDICTABLE>
    2f4c:	0000006e 	andeq	r0, r0, lr, rrx
    2f50:	07689c01 	strbeq	r9, [r8, -r1, lsl #24]!
    2f54:	631e0000 	tstvs	lr, #0
    2f58:	7e660100 	powvcs	f0, f6, f0
    2f5c:	02000001 	andeq	r0, r0, #1
    2f60:	1d007791 	stcne	7, cr7, [r0, #-580]	; 0xfffffdbc
    2f64:	00001528 	andeq	r1, r0, r8, lsr #10
    2f68:	238c5001 	orrcs	r5, ip, #1
    2f6c:	00662000 	rsbeq	r2, r6, r0
    2f70:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f74:	0000078c 	andeq	r0, r0, ip, lsl #15
    2f78:	00171f1b 	andseq	r1, r7, fp, lsl pc
    2f7c:	7e500100 	rdfvcs	f0, f0, f0
    2f80:	02000001 	andeq	r0, r0, #1
    2f84:	22007791 	andcs	r7, r0, #38010880	; 0x2440000
    2f88:	00001421 	andeq	r1, r0, r1, lsr #8
    2f8c:	23344901 	teqcs	r4, #16384	; 0x4000
    2f90:	00582000 	subseq	r2, r8, r0
    2f94:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f98:	000007ba 			; <UNDEFINED> instruction: 0x000007ba
    2f9c:	0100781a 	tsteq	r0, sl, lsl r8
    2fa0:	00017e49 	andeq	r7, r1, r9, asr #28
    2fa4:	6f910200 	svcvs	0x00910200
    2fa8:	0100631e 	tsteq	r0, lr, lsl r3
    2fac:	00017e4a 	andeq	r7, r1, sl, asr #28
    2fb0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2fb4:	14952200 	ldrne	r2, [r5], #512	; 0x200
    2fb8:	41010000 	mrsmi	r0, (UNDEF: 1)
    2fbc:	200022e4 	andcs	r2, r0, r4, ror #5
    2fc0:	00000050 	andeq	r0, r0, r0, asr r0
    2fc4:	07e89c01 	strbeq	r9, [r8, r1, lsl #24]!
    2fc8:	781a0000 	ldmdavc	sl, {}	; <UNPREDICTABLE>
    2fcc:	7e410100 	dvfvcs	f0, f1, f0
    2fd0:	02000001 	andeq	r0, r0, #1
    2fd4:	631e6f91 	tstvs	lr, #580	; 0x244
    2fd8:	7e420100 	dvfvcs	f0, f2, f0
    2fdc:	02000001 	andeq	r0, r0, #1
    2fe0:	1f007791 	svcne	0x00007791
    2fe4:	000014fd 	strdeq	r1, [r0], -sp
    2fe8:	22b43a01 	adcscs	r3, r4, #4096	; 0x1000
    2fec:	00302000 	eorseq	r2, r0, r0
    2ff0:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ff4:	0013a61f 	andseq	sl, r3, pc, lsl r6
    2ff8:	9c370100 	ldflss	f0, [r7], #-0
    2ffc:	18200022 	stmdane	r0!, {r1, r5}
    3000:	01000000 	mrseq	r0, (UNDEF: 0)
    3004:	154d199c 	strbne	r1, [sp, #-2460]	; 0xfffff664
    3008:	32010000 	andcc	r0, r1, #0
    300c:	2000226a 	andcs	r2, r0, sl, ror #4
    3010:	00000032 	andeq	r0, r0, r2, lsr r0
    3014:	083a9c01 	ldmdaeq	sl!, {r0, sl, fp, ip, pc}
    3018:	651b0000 	ldrvs	r0, [fp, #-0]
    301c:	01000013 	tsteq	r0, r3, lsl r0
    3020:	00052032 	andeq	r2, r5, r2, lsr r0
    3024:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3028:	0100691e 	tsteq	r0, lr, lsl r9
    302c:	00012e33 	andeq	r2, r1, r3, lsr lr
    3030:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3034:	13d61d00 	bicsne	r1, r6, #0, 26
    3038:	21010000 	mrscs	r0, (UNDEF: 1)
    303c:	20002244 	andcs	r2, r0, r4, asr #4
    3040:	00000026 	andeq	r0, r0, r6, lsr #32
    3044:	085d9c01 	ldmdaeq	sp, {r0, sl, fp, ip, pc}^
    3048:	6d1a0000 	ldcvs	0, cr0, [sl, #-0]
    304c:	21010073 	tstcs	r1, r3, ror r0
    3050:	0000004e 	andeq	r0, r0, lr, asr #32
    3054:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3058:	0013841d 	andseq	r8, r3, sp, lsl r4
    305c:	18180100 	ldmdane	r8, {r8}
    3060:	2c200022 	stccs	0, cr0, [r0], #-136	; 0xffffff78
    3064:	01000000 	mrseq	r0, (UNDEF: 0)
    3068:	0008809c 	muleq	r8, ip, r0
    306c:	73751a00 	cmnvc	r5, #0, 20
    3070:	4e180100 	mufmie	f0, f0, f0
    3074:	02000000 	andeq	r0, r0, #0
    3078:	23007491 	movwcs	r7, #1169	; 0x491
    307c:	000013f9 	strdeq	r1, [r0], -r9
    3080:	21d40e01 	bicscs	r0, r4, r1, lsl #28
    3084:	00442000 	subeq	r2, r4, r0
    3088:	9c010000 	stcls	0, cr0, [r1], {-0}
    308c:	0014aa23 	andseq	sl, r4, r3, lsr #20
    3090:	90040100 	andls	r0, r4, r0, lsl #2
    3094:	44200021 	strtmi	r0, [r0], #-33	; 0xffffffdf
    3098:	01000000 	mrseq	r0, (UNDEF: 0)
    309c:	0100009c 	swpeq	r0, ip, [r0]	; <UNPREDICTABLE>
    30a0:	00040000 	andeq	r0, r4, r0
    30a4:	00000a6e 	andeq	r0, r0, lr, ror #20
    30a8:	00810104 	addeq	r0, r1, r4, lsl #2
    30ac:	950c0000 	strls	r0, [ip, #-0]
    30b0:	d4000015 	strle	r0, [r0], #-21	; 0xffffffeb
    30b4:	2820002f 	stmdacs	r0!, {r0, r1, r2, r3, r5}
    30b8:	c7000000 	strgt	r0, [r0, -r0]
    30bc:	0200000f 	andeq	r0, r0, #15
    30c0:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
    30c4:	03000000 	movweq	r0, #0
    30c8:	00000309 	andeq	r0, r0, r9, lsl #6
    30cc:	004e0702 	subeq	r0, lr, r2, lsl #14
    30d0:	03000000 	movweq	r0, #0
    30d4:	0000067b 	andeq	r0, r0, fp, ror r6
    30d8:	004e0802 	subeq	r0, lr, r2, lsl #16
    30dc:	03040000 	movweq	r0, #16384	; 0x4000
    30e0:	00001476 	andeq	r1, r0, r6, ror r4
    30e4:	00550902 	subseq	r0, r5, r2, lsl #18
    30e8:	00080000 	andeq	r0, r8, r0
    30ec:	2d070404 	cfstrscs	mvf0, [r7, #-16]
    30f0:	05000003 	streq	r0, [r0, #-3]
    30f4:	00005b04 	andeq	r5, r0, r4, lsl #22
    30f8:	08010400 	stmdaeq	r1, {sl}
    30fc:	0000045d 	andeq	r0, r0, sp, asr r4
    3100:	0015c806 	andseq	ip, r5, r6, lsl #16
    3104:	210a0200 	mrscs	r0, R10_fiq
    3108:	07000000 	streq	r0, [r0, -r0]
    310c:	00000016 	andeq	r0, r0, r6, lsl r0
    3110:	9e06030c 	cdpls	3, 0, cr0, cr6, cr12, {0}
    3114:	03000000 	movweq	r0, #0
    3118:	00000548 	andeq	r0, r0, r8, asr #10
    311c:	009e0703 	addseq	r0, lr, r3, lsl #14
    3120:	03000000 	movweq	r0, #0
    3124:	0000001d 	andeq	r0, r0, sp, lsl r0
    3128:	009e0803 	addseq	r0, lr, r3, lsl #16
    312c:	03040000 	movweq	r0, #16384	; 0x4000
    3130:	00000012 	andeq	r0, r0, r2, lsl r0
    3134:	009e0903 	addseq	r0, lr, r3, lsl #18
    3138:	00080000 	andeq	r0, r8, r0
    313c:	00620405 	rsbeq	r0, r2, r5, lsl #8
    3140:	96060000 	strls	r0, [r6], -r0
    3144:	0300000f 	movweq	r0, #15
    3148:	00006d0a 	andeq	r6, r0, sl, lsl #26
    314c:	158a0800 	strne	r0, [sl, #2048]	; 0x800
    3150:	03010000 	movweq	r0, #4096	; 0x1000
    3154:	20002fd4 	ldrdcs	r2, [r0], -r4
    3158:	00000028 	andeq	r0, r0, r8, lsr #32
    315c:	00fd9c01 	rscseq	r9, sp, r1, lsl #24
    3160:	8f090000 	svchi	0x00090000
    3164:	01000015 	tsteq	r0, r5, lsl r0
    3168:	0000fd03 	andeq	pc, r0, r3, lsl #26
    316c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3170:	00054809 	andeq	r4, r5, r9, lsl #16
    3174:	9e030100 	adflss	f0, f3, f0
    3178:	02000000 	andeq	r0, r0, #0
    317c:	1d097091 	stcne	0, cr7, [r9, #-580]	; 0xfffffdbc
    3180:	01000000 	mrseq	r0, (UNDEF: 0)
    3184:	00009e03 	andeq	r9, r0, r3, lsl #28
    3188:	6c910200 	lfmvs	f0, 4, [r1], {0}
    318c:	00001209 	andeq	r1, r0, r9, lsl #4
    3190:	9e030100 	adflss	f0, f3, f0
    3194:	02000000 	andeq	r0, r0, #0
    3198:	05006891 	streq	r6, [r0, #-2193]	; 0xfffff76f
    319c:	0000a404 	andeq	sl, r0, r4, lsl #8
    31a0:	00c30000 	sbceq	r0, r3, r0
    31a4:	00040000 	andeq	r0, r4, r0
    31a8:	00000af5 	strdeq	r0, [r0], -r5
    31ac:	00810104 	addeq	r0, r1, r4, lsl #2
    31b0:	cf0c0000 	svcgt	0x000c0000
    31b4:	fc000015 	stc2	0, cr0, [r0], {21}
    31b8:	2820002f 	stmdacs	r0!, {r0, r1, r2, r3, r5}
    31bc:	3d000000 	stccc	0, cr0, [r0, #-0]
    31c0:	02000010 	andeq	r0, r0, #16
    31c4:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
    31c8:	03000000 	movweq	r0, #0
    31cc:	00000309 	andeq	r0, r0, r9, lsl #6
    31d0:	004e0702 	subeq	r0, lr, r2, lsl #14
    31d4:	03000000 	movweq	r0, #0
    31d8:	0000067b 	andeq	r0, r0, fp, ror r6
    31dc:	004e0802 	subeq	r0, lr, r2, lsl #16
    31e0:	03040000 	movweq	r0, #16384	; 0x4000
    31e4:	00001476 	andeq	r1, r0, r6, ror r4
    31e8:	00550902 	subseq	r0, r5, r2, lsl #18
    31ec:	00080000 	andeq	r0, r8, r0
    31f0:	2d070404 	cfstrscs	mvf0, [r7, #-16]
    31f4:	05000003 	streq	r0, [r0, #-3]
    31f8:	00005b04 	andeq	r5, r0, r4, lsl #22
    31fc:	08010400 	stmdaeq	r1, {sl}
    3200:	0000045d 	andeq	r0, r0, sp, asr r4
    3204:	0015c806 	andseq	ip, r5, r6, lsl #16
    3208:	210a0200 	mrscs	r0, R10_fiq
    320c:	07000000 	streq	r0, [r0, -r0]
    3210:	000015c3 	andeq	r1, r0, r3, asr #11
    3214:	2ffc0301 	svccs	0x00fc0301
    3218:	00282000 	eoreq	r2, r8, r0
    321c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3220:	000000b9 	strheq	r0, [r0], -r9
    3224:	01007308 	tsteq	r0, r8, lsl #6
    3228:	0000b903 	andeq	fp, r0, r3, lsl #18
    322c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3230:	00147609 	andseq	r7, r4, r9, lsl #12
    3234:	55030100 	strpl	r0, [r3, #-256]	; 0xffffff00
    3238:	02000000 	andeq	r0, r0, #0
    323c:	09097091 	stmdbeq	r9, {r0, r4, r7, ip, sp, lr}
    3240:	01000003 	tsteq	r0, r3
    3244:	0000bf03 	andeq	fp, r0, r3, lsl #30
    3248:	6c910200 	lfmvs	f0, 4, [r1], {0}
    324c:	00067b09 	andeq	r7, r6, r9, lsl #22
    3250:	bf030100 	svclt	0x00030100
    3254:	02000000 	andeq	r0, r0, #0
    3258:	05006891 	streq	r6, [r0, #-2193]	; 0xfffff76f
    325c:	00006204 	andeq	r6, r0, r4, lsl #4
    3260:	05040a00 	streq	r0, [r4, #-2560]	; 0xfffff600
    3264:	00746e69 	rsbseq	r6, r4, r9, ror #28
    3268:	00013500 	andeq	r3, r1, r0, lsl #10
    326c:	87000400 	strhi	r0, [r0, -r0, lsl #8]
    3270:	0400000b 	streq	r0, [r0], #-11
    3274:	00008101 	andeq	r8, r0, r1, lsl #2
    3278:	16350c00 	ldrtne	r0, [r5], -r0, lsl #24
    327c:	30240000 	eorcc	r0, r4, r0
    3280:	006c2000 	rsbeq	r2, ip, r0
    3284:	10a90000 	adcne	r0, r9, r0
    3288:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    328c:	00ae1302 	adceq	r1, lr, r2, lsl #6
    3290:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    3294:	02000015 	andeq	r0, r0, #21
    3298:	0000ae14 	andeq	sl, r0, r4, lsl lr
    329c:	17030000 	strne	r0, [r3, -r0]
    32a0:	02000016 	andeq	r0, r0, #22
    32a4:	0000b515 	andeq	fp, r0, r5, lsl r5
    32a8:	62030400 	andvs	r0, r3, #0, 8
    32ac:	02000016 	andeq	r0, r0, #22
    32b0:	0000b516 	andeq	fp, r0, r6, lsl r5
    32b4:	84030600 	strhi	r0, [r3], #-1536	; 0xfffffa00
    32b8:	02000016 	andeq	r0, r0, #22
    32bc:	0000ae17 	andeq	sl, r0, r7, lsl lr
    32c0:	23030800 	movwcs	r0, #14336	; 0x3800
    32c4:	02000016 	andeq	r0, r0, #22
    32c8:	0000ae18 	andeq	sl, r0, r8, lsl lr
    32cc:	94030c00 	strls	r0, [r3], #-3072	; 0xfffff400
    32d0:	02000016 	andeq	r0, r0, #22
    32d4:	0000bc19 	andeq	fp, r0, r9, lsl ip
    32d8:	8c031000 	stchi	0, cr1, [r3], {-0}
    32dc:	02000016 	andeq	r0, r0, #22
    32e0:	0000bc1a 	andeq	fp, r0, sl, lsl ip
    32e4:	29031100 	stmdbcs	r3, {r8, ip}
    32e8:	02000016 	andeq	r0, r0, #22
    32ec:	0000b51b 	andeq	fp, r0, fp, lsl r5
    32f0:	7d031200 	sfmvc	f1, 4, [r3, #-0]
    32f4:	02000016 	andeq	r0, r0, #22
    32f8:	0000bc1c 	andeq	fp, r0, ip, lsl ip
    32fc:	0f031400 	svceq	0x00031400
    3300:	02000016 	andeq	r0, r0, #22
    3304:	0000bc1d 	andeq	fp, r0, sp, lsl ip
    3308:	9b031500 	blls	c8710 <startup-0x1ff378f0>
    330c:	02000016 	andeq	r0, r0, #22
    3310:	0000b51e 	andeq	fp, r0, lr, lsl r5
    3314:	04001600 	streq	r1, [r0], #-1536	; 0xfffffa00
    3318:	032d0704 			; <UNDEFINED> instruction: 0x032d0704
    331c:	02040000 	andeq	r0, r4, #0
    3320:	00032707 	andeq	r2, r3, r7, lsl #14
    3324:	08010400 	stmdaeq	r1, {sl}
    3328:	0000045d 	andeq	r0, r0, sp, asr r4
    332c:	00161e05 	andseq	r1, r6, r5, lsl #28
    3330:	211f0200 	tstcs	pc, r0, lsl #4
    3334:	06000000 	streq	r0, [r0], -r0
    3338:	0000166d 	andeq	r1, r0, sp, ror #12
    333c:	01040e01 	tsteq	r4, r1, lsl #28
    3340:	305c0000 	subscc	r0, ip, r0
    3344:	00342000 	eorseq	r2, r4, r0
    3348:	9c010000 	stcls	0, cr0, [r1], {-0}
    334c:	00000104 	andeq	r0, r0, r4, lsl #2
    3350:	74696207 	strbtvc	r6, [r9], #-519	; 0xfffffdf9
    3354:	040e0100 	streq	r0, [lr], #-256	; 0xffffff00
    3358:	02000001 	andeq	r0, r0, #1
    335c:	44086491 	strmi	r6, [r8], #-1169	; 0xfffffb6f
    3360:	01004c49 	tsteq	r0, r9, asr #24
    3364:	00010b0f 	andeq	r0, r1, pc, lsl #22
    3368:	6f910200 	svcvs	0x00910200
    336c:	05040900 	streq	r0, [r4, #-2304]	; 0xfffff700
    3370:	00746e69 	rsbseq	r6, r4, r9, ror #28
    3374:	66080104 	strvs	r0, [r8], -r4, lsl #2
    3378:	0a000004 	beq	3390 <startup-0x1fffcc70>
    337c:	000016a7 	andeq	r1, r0, r7, lsr #13
    3380:	010b0801 	tsteq	fp, r1, lsl #16
    3384:	303c0000 	eorscc	r0, ip, r0
    3388:	00202000 	eoreq	r2, r0, r0
    338c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3390:	0016040b 	andseq	r0, r6, fp, lsl #8
    3394:	24040100 	strcs	r0, [r4], #-256	; 0xffffff00
    3398:	18200030 	stmdane	r0!, {r4, r5}
    339c:	01000000 	mrseq	r0, (UNDEF: 0)
    33a0:	04ed009c 	strbteq	r0, [sp], #156	; 0x9c
    33a4:	00040000 	andeq	r0, r4, r0
    33a8:	00000c44 	andeq	r0, r0, r4, asr #24
    33ac:	00810104 	addeq	r0, r1, r4, lsl #2
    33b0:	ec0c0000 	stc	0, cr0, [ip], {-0}
    33b4:	90000017 	andls	r0, r0, r7, lsl r0
    33b8:	20200030 	eorcs	r0, r0, r0, lsr r0
    33bc:	19000005 	stmdbne	r0, {r0, r2}
    33c0:	02000011 	andeq	r0, r0, #17
    33c4:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
    33c8:	03000000 	movweq	r0, #0
    33cc:	00000309 	andeq	r0, r0, r9, lsl #6
    33d0:	004e0702 	subeq	r0, lr, r2, lsl #14
    33d4:	03000000 	movweq	r0, #0
    33d8:	0000067b 	andeq	r0, r0, fp, ror r6
    33dc:	004e0802 	subeq	r0, lr, r2, lsl #16
    33e0:	03040000 	movweq	r0, #16384	; 0x4000
    33e4:	00001476 	andeq	r1, r0, r6, ror r4
    33e8:	00550902 	subseq	r0, r5, r2, lsl #18
    33ec:	00080000 	andeq	r0, r8, r0
    33f0:	2d070404 	cfstrscs	mvf0, [r7, #-16]
    33f4:	05000003 	streq	r0, [r0, #-3]
    33f8:	00005b04 	andeq	r5, r0, r4, lsl #22
    33fc:	08010400 	stmdaeq	r1, {sl}
    3400:	0000045d 	andeq	r0, r0, sp, asr r4
    3404:	0015c806 	andseq	ip, r5, r6, lsl #16
    3408:	210a0200 	mrscs	r0, R10_fiq
    340c:	07000000 	streq	r0, [r0, -r0]
    3410:	00000016 	andeq	r0, r0, r6, lsl r0
    3414:	9e06030c 	cdpls	3, 0, cr0, cr6, cr12, {0}
    3418:	03000000 	movweq	r0, #0
    341c:	00000548 	andeq	r0, r0, r8, asr #10
    3420:	009e0703 	addseq	r0, lr, r3, lsl #14
    3424:	03000000 	movweq	r0, #0
    3428:	0000001d 	andeq	r0, r0, sp, lsl r0
    342c:	009e0803 	addseq	r0, lr, r3, lsl #16
    3430:	03040000 	movweq	r0, #16384	; 0x4000
    3434:	00000012 	andeq	r0, r0, r2, lsl r0
    3438:	009e0903 	addseq	r0, lr, r3, lsl #18
    343c:	00080000 	andeq	r0, r8, r0
    3440:	00620405 	rsbeq	r0, r2, r5, lsl #8
    3444:	96060000 	strls	r0, [r6], -r0
    3448:	0300000f 	movweq	r0, #15
    344c:	00006d0a 	andeq	r6, r0, sl, lsl #26
    3450:	06400700 	strbeq	r0, [r0], -r0, lsl #14
    3454:	04240000 	strteq	r0, [r4], #-0
    3458:	00012806 	andeq	r2, r1, r6, lsl #16
    345c:	03fa0300 	mvnseq	r0, #0, 6
    3460:	07040000 	streq	r0, [r4, -r0]
    3464:	00000128 	andeq	r0, r0, r8, lsr #2
    3468:	064c0300 	strbeq	r0, [ip], -r0, lsl #6
    346c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    3470:	0000012e 	andeq	r0, r0, lr, lsr #2
    3474:	05b30304 	ldreq	r0, [r3, #772]!	; 0x304
    3478:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    347c:	0000012e 	andeq	r0, r0, lr, lsr #2
    3480:	05df0308 	ldrbeq	r0, [pc, #776]	; 3790 <startup-0x1fffc870>
    3484:	0c040000 	stceq	0, cr0, [r4], {-0}
    3488:	00000146 	andeq	r0, r0, r6, asr #2
    348c:	0302030c 	movweq	r0, #8972	; 0x230c
    3490:	0d040000 	stceq	0, cr0, [r4, #-0]
    3494:	00000146 	andeq	r0, r0, r6, asr #2
    3498:	040c0310 	streq	r0, [ip], #-784	; 0xfffffcf0
    349c:	10040000 	andne	r0, r4, r0
    34a0:	0000012e 	andeq	r0, r0, lr, lsr #2
    34a4:	00520314 	subseq	r0, r2, r4, lsl r3
    34a8:	11040000 	mrsne	r0, (UNDEF: 4)
    34ac:	0000012e 	andeq	r0, r0, lr, lsr #2
    34b0:	037d0318 	cmneq	sp, #24, 6	; 0x60000000
    34b4:	12040000 	andne	r0, r4, #0
    34b8:	0000012e 	andeq	r0, r0, lr, lsr #2
    34bc:	038d031c 	orreq	r0, sp, #28, 6	; 0x70000000
    34c0:	13040000 	movwne	r0, #16384	; 0x4000
    34c4:	0000012e 	andeq	r0, r0, lr, lsr #2
    34c8:	04050020 	streq	r0, [r5], #-32	; 0xffffffe0
    34cc:	000000a4 	andeq	r0, r0, r4, lsr #1
    34d0:	69050408 	stmdbvs	r5, {r3, sl}
    34d4:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    34d8:	00000140 	andeq	r0, r0, r0, asr #2
    34dc:	0001400a 	andeq	r4, r1, sl
    34e0:	04050000 	streq	r0, [r5], #-0
    34e4:	000000af 	andeq	r0, r0, pc, lsr #1
    34e8:	01350405 	teqeq	r5, r5, lsl #8
    34ec:	41060000 	mrsmi	r0, (UNDEF: 6)
    34f0:	04000006 	streq	r0, [r0], #-6
    34f4:	0000af15 	andeq	sl, r0, r5, lsl pc
    34f8:	01620b00 	cmneq	r2, r0, lsl #22
    34fc:	01620000 	cmneq	r2, r0
    3500:	000c0000 	andeq	r0, ip, r0
    3504:	014c0405 	cmpeq	ip, r5, lsl #8
    3508:	e00d0000 	and	r0, sp, r0
    350c:	04000004 	streq	r0, [r0], #-4
    3510:	0001571c 	andeq	r5, r1, ip, lsl r7
    3514:	03c80d00 	biceq	r0, r8, #0, 26
    3518:	1d040000 	stcne	0, cr0, [r4, #-0]
    351c:	0000012e 	andeq	r0, r0, lr, lsr #2
    3520:	00060a06 	andeq	r0, r6, r6, lsl #20
    3524:	5b240500 	blpl	90492c <startup-0x1f6fb6d4>
    3528:	0b000000 	bleq	3530 <startup-0x1fffcad0>
    352c:	0000017e 	andeq	r0, r0, lr, ror r1
    3530:	0000019a 	muleq	r0, sl, r1
    3534:	00019a0e 	andeq	r9, r1, lr, lsl #20
    3538:	0003ff00 	andeq	pc, r3, r0, lsl #30
    353c:	aa070404 	bge	1c4554 <startup-0x1fe3baac>
    3540:	0d000003 	stceq	0, cr0, [r0, #-12]
    3544:	000013ac 	andeq	r1, r0, ip, lsr #7
    3548:	01892b05 	orreq	r2, r9, r5, lsl #22
    354c:	220d0000 	andcs	r0, sp, #0
    3550:	05000002 	streq	r0, [r0, #-2]
    3554:	0001892c 	andeq	r8, r1, ip, lsr #18
    3558:	046b0d00 	strbteq	r0, [fp], #-3328	; 0xfffff300
    355c:	2d050000 	stccs	0, cr0, [r5, #-0]
    3560:	00000189 	andeq	r0, r0, r9, lsl #3
    3564:	00030f0d 	andeq	r0, r3, sp, lsl #30
    3568:	892e0500 	stmdbhi	lr!, {r8, sl}
    356c:	0d000001 	stceq	0, cr0, [r0, #-4]
    3570:	0000029c 	muleq	r0, ip, r2
    3574:	01892f05 	orreq	r2, r9, r5, lsl #30
    3578:	220d0000 	andcs	r0, sp, #0
    357c:	05000006 	streq	r0, [r0, #-6]
    3580:	00018930 	andeq	r8, r1, r0, lsr r9
    3584:	06120d00 	ldreq	r0, [r2], -r0, lsl #26
    3588:	31050000 	mrscc	r0, (UNDEF: 5)
    358c:	00000189 	andeq	r0, r0, r9, lsl #3
    3590:	0017720f 	andseq	r7, r7, pc, lsl #4
    3594:	2ce40100 	stfcse	f0, [r4]
    3598:	84200035 	strthi	r0, [r0], #-53	; 0xffffffcb
    359c:	01000000 	mrseq	r0, (UNDEF: 0)
    35a0:	00022c9c 	muleq	r2, ip, ip
    35a4:	00731000 	rsbseq	r1, r3, r0
    35a8:	022ce501 	eoreq	lr, ip, #4194304	; 0x400000
    35ac:	91020000 	mrsls	r0, (UNDEF: 2)
    35b0:	174d116c 	strbne	r1, [sp, -ip, ror #2]
    35b4:	e6010000 	str	r0, [r1], -r0
    35b8:	00000239 	andeq	r0, r0, r9, lsr r2
    35bc:	115c9102 	cmpne	ip, r2, lsl #2
    35c0:	00001753 	andeq	r1, r0, r3, asr r7
    35c4:	0249e701 	subeq	lr, r9, #262144	; 0x40000
    35c8:	91020000 	mrsls	r0, (UNDEF: 2)
    35cc:	04050048 	streq	r0, [r5], #-72	; 0xffffffb8
    35d0:	00000232 	andeq	r0, r0, r2, lsr r2
    35d4:	66080104 	strvs	r0, [r8], -r4, lsl #2
    35d8:	0b000004 	bleq	35f0 <startup-0x1fffca10>
    35dc:	00000232 	andeq	r0, r0, r2, lsr r2
    35e0:	00000249 	andeq	r0, r0, r9, asr #4
    35e4:	00019a12 	andeq	r9, r1, r2, lsl sl
    35e8:	0b000c00 	bleq	65f0 <startup-0x1fff9a10>
    35ec:	00000232 	andeq	r0, r0, r2, lsr r2
    35f0:	00000259 	andeq	r0, r0, r9, asr r2
    35f4:	00019a12 	andeq	r9, r1, r2, lsl sl
    35f8:	0f001300 	svceq	0x00001300
    35fc:	00001703 	andeq	r1, r0, r3, lsl #14
    3600:	349ecc01 	ldrcc	ip, [lr], #3073	; 0xc01
    3604:	008e2000 	addeq	r2, lr, r0
    3608:	9c010000 	stcls	0, cr0, [r1], {-0}
    360c:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
    3610:	00183b13 	andseq	r3, r8, r3, lsl fp
    3614:	2ccc0100 	stfcse	f0, [ip], {0}
    3618:	02000002 	andeq	r0, r0, #2
    361c:	60136c91 	mulsvs	r3, r1, ip
    3620:	01000002 	tsteq	r0, r2
    3624:	00022ccc 	andeq	r2, r2, ip, asr #25
    3628:	68910200 	ldmvs	r1, {r9}
    362c:	0017e513 	andseq	lr, r7, r3, lsl r5
    3630:	2ecc0100 	polcse	f0, f4, f0
    3634:	02000001 	andeq	r0, r0, #1
    3638:	c1136491 			; <UNDEFINED> instruction: 0xc1136491
    363c:	01000016 	tsteq	r0, r6, lsl r0
    3640:	00012ecc 	andeq	r2, r1, ip, asr #29
    3644:	60910200 	addsvs	r0, r1, r0, lsl #4
    3648:	01006910 	tsteq	r0, r0, lsl r9
    364c:	00012ed0 	ldrdeq	r2, [r1], -r0
    3650:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3654:	17a40f00 	strne	r0, [r4, r0, lsl #30]!
    3658:	bd010000 	stclt	0, cr0, [r1, #-0]
    365c:	20003440 	andcs	r3, r0, r0, asr #8
    3660:	0000005e 	andeq	r0, r0, lr, asr r0
    3664:	02e59c01 	rsceq	r9, r5, #256	; 0x100
    3668:	3b130000 	blcc	4c3670 <startup-0x1fb3c990>
    366c:	01000018 	tsteq	r0, r8, lsl r0
    3670:	00022cbd 			; <UNDEFINED> instruction: 0x00022cbd
    3674:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3678:	00026013 	andeq	r6, r2, r3, lsl r0
    367c:	2cbd0100 	ldfcss	f0, [sp]
    3680:	02000002 	andeq	r0, r0, #2
    3684:	0f007091 	svceq	0x00007091
    3688:	000016f7 	strdeq	r1, [r0], -r7
    368c:	33d6ad01 	bicscc	sl, r6, #1, 26	; 0x40
    3690:	006a2000 	rsbeq	r2, sl, r0
    3694:	9c010000 	stcls	0, cr0, [r1], {-0}
    3698:	00000315 	andeq	r0, r0, r5, lsl r3
    369c:	01007310 	tsteq	r0, r0, lsl r3
    36a0:	00022cae 	andeq	r2, r2, lr, lsr #25
    36a4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    36a8:	00143211 	andseq	r3, r4, r1, lsl r2
    36ac:	15af0100 	strne	r0, [pc, #256]!	; 37b4 <startup-0x1fffc84c>
    36b0:	02000003 	andeq	r0, r0, #3
    36b4:	0b005491 	bleq	18900 <startup-0x1ffe7700>
    36b8:	00000232 	andeq	r0, r0, r2, lsr r2
    36bc:	00000325 	andeq	r0, r0, r5, lsr #6
    36c0:	00019a12 	andeq	r9, r1, r2, lsl sl
    36c4:	14001400 	strne	r1, [r0], #-1024	; 0xfffffc00
    36c8:	000016d8 	ldrdeq	r1, [r0], -r8
    36cc:	33c4a801 	biccc	sl, r4, #65536	; 0x10000
    36d0:	00122000 	andseq	r2, r2, r0
    36d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    36d8:	0016b015 	andseq	fp, r6, r5, lsl r0
    36dc:	aa9f0100 	bge	fe7c3ae4 <firstTime.4040+0xde7b9a20>
    36e0:	1a200033 	bne	8037b4 <startup-0x1f7fc84c>
    36e4:	01000000 	mrseq	r0, (UNDEF: 0)
    36e8:	16e5149c 	usatne	r1, #5, ip, lsl #9
    36ec:	83010000 	movwhi	r0, #4096	; 0x1000
    36f0:	20003310 	andcs	r3, r0, r0, lsl r3
    36f4:	0000009a 	muleq	r0, sl, r0
    36f8:	b00f9c01 	andlt	r9, pc, r1, lsl #24
    36fc:	01000017 	tsteq	r0, r7, lsl r0
    3700:	0032c07b 	eorseq	ip, r2, fp, ror r0
    3704:	00005020 	andeq	r5, r0, r0, lsr #32
    3708:	989c0100 	ldmls	ip, {r8}
    370c:	16000003 	strne	r0, [r0], -r3
    3710:	00776f72 	rsbseq	r6, r7, r2, ror pc
    3714:	005b7b01 	subseq	r7, fp, r1, lsl #22
    3718:	91020000 	mrsls	r0, (UNDEF: 2)
    371c:	16f0136f 	ldrbtne	r1, [r0], pc, ror #6
    3720:	7b010000 	blvc	43728 <startup-0x1ffbc8d8>
    3724:	0000005b 	andeq	r0, r0, fp, asr r0
    3728:	116e9102 	cmnne	lr, r2, lsl #2
    372c:	00001759 	andeq	r1, r0, r9, asr r7
    3730:	005b7c01 	subseq	r7, fp, r1, lsl #24
    3734:	91020000 	mrsls	r0, (UNDEF: 2)
    3738:	d40f0077 	strle	r0, [pc], #-119	; 3740 <startup-0x1fffc8c0>
    373c:	01000017 	tsteq	r0, r7, lsl r0
    3740:	00328474 	eorseq	r8, r2, r4, ror r4
    3744:	00003c20 	andeq	r3, r0, r0, lsr #24
    3748:	ba9c0100 	blt	fe703b50 <firstTime.4040+0xde6f9a8c>
    374c:	16000003 	strne	r0, [r0], -r3
    3750:	74010063 	strvc	r0, [r1], #-99	; 0xffffff9d
    3754:	0000005b 	andeq	r0, r0, fp, asr r0
    3758:	00779102 	rsbseq	r9, r7, r2, lsl #2
    375c:	00171417 	andseq	r1, r7, r7, lsl r4
    3760:	5b6a0100 	blpl	1a83b68 <startup-0x1e57c498>
    3764:	50000000 	andpl	r0, r0, r0
    3768:	34200032 	strtcc	r0, [r0], #-50	; 0xffffffce
    376c:	01000000 	mrseq	r0, (UNDEF: 0)
    3770:	0003e09c 	muleq	r3, ip, r0
    3774:	00631000 	rsbeq	r1, r3, r0
    3778:	005b6b01 	subseq	r6, fp, r1, lsl #22
    377c:	91020000 	mrsls	r0, (UNDEF: 2)
    3780:	bd0f0077 	stclt	0, cr0, [pc, #-476]	; 35ac <startup-0x1fffca54>
    3784:	01000017 	tsteq	r0, r7, lsl r0
    3788:	00322063 	eorseq	r2, r2, r3, rrx
    378c:	00003020 	andeq	r3, r0, r0, lsr #32
    3790:	029c0100 	addseq	r0, ip, #0, 2
    3794:	16000004 	strne	r0, [r0], -r4
    3798:	63010063 	movwvs	r0, #4195	; 0x1063
    379c:	0000005b 	andeq	r0, r0, fp, asr r0
    37a0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    37a4:	0016c817 	andseq	ip, r6, r7, lsl r8
    37a8:	5b570100 	blpl	15c3bb0 <startup-0x1ea3c450>
    37ac:	cc000000 	stcgt	0, cr0, [r0], {-0}
    37b0:	54200031 	strtpl	r0, [r0], #-49	; 0xffffffcf
    37b4:	01000000 	mrseq	r0, (UNDEF: 0)
    37b8:	0004299c 	muleq	r4, ip, r9
    37bc:	76721000 	ldrbtvc	r1, [r2], -r0
    37c0:	5b5c0100 	blpl	1703bc8 <startup-0x1e8fc438>
    37c4:	02000000 	andeq	r0, r0, #0
    37c8:	17006f91 			; <UNDEFINED> instruction: 0x17006f91
    37cc:	0000177d 	andeq	r1, r0, sp, ror r7
    37d0:	005b4b01 	subseq	r4, fp, r1, lsl #22
    37d4:	31780000 	cmncc	r8, r0
    37d8:	00542000 	subseq	r2, r4, r0
    37dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    37e0:	00000450 	andeq	r0, r0, r0, asr r4
    37e4:	00767210 	rsbseq	r7, r6, r0, lsl r2
    37e8:	005b5001 	subseq	r5, fp, r1
    37ec:	91020000 	mrsls	r0, (UNDEF: 2)
    37f0:	610f006f 	tstvs	pc, pc, rrx
    37f4:	01000017 	tsteq	r0, r7, lsl r0
    37f8:	00314e45 	eorseq	r4, r1, r5, asr #28
    37fc:	00002a20 	andeq	r2, r0, r0, lsr #20
    3800:	749c0100 	ldrvc	r0, [ip], #256	; 0x100
    3804:	13000004 	movwne	r0, #4
    3808:	00001476 	andeq	r1, r0, r6, ror r4
    380c:	005b4501 	subseq	r4, fp, r1, lsl #10
    3810:	91020000 	mrsls	r0, (UNDEF: 2)
    3814:	3d0f0077 	stccc	0, cr0, [pc, #-476]	; 3640 <startup-0x1fffc9c0>
    3818:	01000017 	tsteq	r0, r7, lsl r0
    381c:	0031243f 	eorseq	r2, r1, pc, lsr r4
    3820:	00002a20 	andeq	r2, r0, r0, lsr #20
    3824:	989c0100 	ldmls	ip, {r8}
    3828:	13000004 	movwne	r0, #4
    382c:	0000139e 	muleq	r0, lr, r3
    3830:	005b3f01 	subseq	r3, fp, r1, lsl #30
    3834:	91020000 	mrsls	r0, (UNDEF: 2)
    3838:	8f180077 	svchi	0x00180077
    383c:	01000017 	tsteq	r0, r7, lsl r0
    3840:	0030d437 	eorseq	sp, r0, r7, lsr r4
    3844:	00005020 	andeq	r5, r0, r0, lsr #32
    3848:	c69c0100 	ldrgt	r0, [ip], r0, lsl #2
    384c:	16000004 	strne	r0, [r0], -r4
    3850:	37010078 	smlsdxcc	r1, r8, r0, r0
    3854:	0000005b 	andeq	r0, r0, fp, asr r0
    3858:	106f9102 	rsbne	r9, pc, r2, lsl #2
    385c:	39010063 	stmdbcc	r1, {r0, r1, r5, r6}
    3860:	0000005b 	andeq	r0, r0, fp, asr r0
    3864:	00779102 	rsbseq	r9, r7, r2, lsl #2
    3868:	00172a19 	andseq	r2, r7, r9, lsl sl
    386c:	902f0100 	eorls	r0, pc, r0, lsl #2
    3870:	44200030 	strtmi	r0, [r0], #-48	; 0xffffffd0
    3874:	01000000 	mrseq	r0, (UNDEF: 0)
    3878:	0078169c 			; <UNDEFINED> instruction: 0x0078169c
    387c:	005b2f01 	subseq	r2, fp, r1, lsl #30
    3880:	91020000 	mrsls	r0, (UNDEF: 2)
    3884:	0063106f 	rsbeq	r1, r3, pc, rrx
    3888:	005b3101 	subseq	r3, fp, r1, lsl #2
    388c:	91020000 	mrsls	r0, (UNDEF: 2)
    3890:	40000077 	andmi	r0, r0, r7, ror r0
    3894:	04000001 	streq	r0, [r0], #-1
    3898:	000dc200 	andeq	ip, sp, r0, lsl #4
    389c:	81010400 	tsthi	r1, r0, lsl #8
    38a0:	0c000000 	stceq	0, cr0, [r0], {-0}
    38a4:	00001840 	andeq	r1, r0, r0, asr #16
    38a8:	200035b0 			; <UNDEFINED> instruction: 0x200035b0
    38ac:	00000094 	muleq	r0, r4, r0
    38b0:	00001277 	andeq	r1, r0, r7, ror r2
    38b4:	00060002 	andeq	r0, r6, r2
    38b8:	04021400 	streq	r1, [r2], #-1024	; 0xfffffc00
    38bc:	0000006a 	andeq	r0, r0, sl, rrx
    38c0:	00183b03 	andseq	r3, r8, r3, lsl #22
    38c4:	6a050200 	bvs	1440cc <startup-0x1febbf34>
    38c8:	00000000 	andeq	r0, r0, r0
    38cc:	00026003 	andeq	r6, r2, r3
    38d0:	6a060200 	bvs	1840d8 <startup-0x1fe7bf28>
    38d4:	04000000 	streq	r0, [r0], #-0
    38d8:	00039703 	andeq	r9, r3, r3, lsl #14
    38dc:	77080200 	strvc	r0, [r8, -r0, lsl #4]
    38e0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    38e4:	00038703 	andeq	r8, r3, r3, lsl #14
    38e8:	77090200 	strvc	r0, [r9, -r0, lsl #4]
    38ec:	0c000000 	stceq	0, cr0, [r0], {-0}
    38f0:	00026503 	andeq	r6, r2, r3, lsl #10
    38f4:	940c0200 	strls	r0, [ip], #-512	; 0xfffffe00
    38f8:	10000000 	andne	r0, r0, r0
    38fc:	70040400 	andvc	r0, r4, r0, lsl #8
    3900:	05000000 	streq	r0, [r0, #-0]
    3904:	04660801 	strbteq	r0, [r6], #-2049	; 0xfffff7ff
    3908:	04060000 	streq	r0, [r6], #-0
    390c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    3910:	008e0700 	addeq	r0, lr, r0, lsl #14
    3914:	8e080000 	cdphi	0, 0, cr0, cr8, cr0, {0}
    3918:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    391c:	00000077 	andeq	r0, r0, r7, ror r0
    3920:	21040400 	tstcs	r4, r0, lsl #8
    3924:	04000000 	streq	r0, [r0], #-0
    3928:	00007e04 	andeq	r7, r0, r4, lsl #28
    392c:	06010900 	streq	r0, [r1], -r0, lsl #18
    3930:	0d020000 	stceq	0, cr0, [r2, #-0]
    3934:	00000021 	andeq	r0, r0, r1, lsr #32
    3938:	0018220a 	andseq	r2, r8, sl, lsl #4
    393c:	0a0c0100 	beq	303d44 <startup-0x1fcfc2bc>
    3940:	3a200036 	bcc	803a20 <startup-0x1f7fc5e0>
    3944:	01000000 	mrseq	r0, (UNDEF: 0)
    3948:	0000f39c 	muleq	r0, ip, r3
    394c:	626f0b00 	rsbvs	r0, pc, #0, 22
    3950:	0c01006a 	stceq	0, cr0, [r1], {106}	; 0x6a
    3954:	000000f3 	strdeq	r0, [r0], -r3
    3958:	0c749102 	ldfeqp	f1, [r4], #-8
    395c:	0000183b 	andeq	r1, r0, fp, lsr r8
    3960:	006a0c01 	rsbeq	r0, sl, r1, lsl #24
    3964:	91020000 	mrsls	r0, (UNDEF: 2)
    3968:	02600c70 	rsbeq	r0, r0, #112, 24	; 0x7000
    396c:	0c010000 	stceq	0, cr0, [r1], {-0}
    3970:	0000006a 	andeq	r0, r0, sl, rrx
    3974:	0c6c9102 	stfeqp	f1, [ip], #-8
    3978:	00000387 	andeq	r0, r0, r7, lsl #7
    397c:	00770c01 	rsbseq	r0, r7, r1, lsl #24
    3980:	91020000 	mrsls	r0, (UNDEF: 2)
    3984:	04040068 	streq	r0, [r4], #-104	; 0xffffff98
    3988:	0000009a 	muleq	r0, sl, r0
    398c:	0002650d 	andeq	r6, r2, sp, lsl #10
    3990:	b0040100 	andlt	r0, r4, r0, lsl #2
    3994:	5a200035 	bpl	803a70 <startup-0x1f7fc590>
    3998:	01000000 	mrseq	r0, (UNDEF: 0)
    399c:	06e40c9c 	usateq	r0, #4, ip, lsl #25
    39a0:	04010000 	streq	r0, [r1], #-0
    39a4:	000000f3 	strdeq	r0, [r0], -r3
    39a8:	0c6c9102 	stfeqp	f1, [ip], #-8
    39ac:	00001831 	andeq	r1, r0, r1, lsr r8
    39b0:	00770401 	rsbseq	r0, r7, r1, lsl #8
    39b4:	91020000 	mrsls	r0, (UNDEF: 2)
    39b8:	17e50e68 	strbne	r0, [r5, r8, ror #28]!
    39bc:	05010000 	streq	r0, [r1, #-0]
    39c0:	00000077 	andeq	r0, r0, r7, ror r0
    39c4:	0e749102 	expeqs	f1, f2
    39c8:	000016c1 	andeq	r1, r0, r1, asr #13
    39cc:	00770601 	rsbseq	r0, r7, r1, lsl #12
    39d0:	91020000 	mrsls	r0, (UNDEF: 2)
    39d4:	e0000070 	and	r0, r0, r0, ror r0
    39d8:	04000002 	streq	r0, [r0], #-2
    39dc:	000e8d00 	andeq	r8, lr, r0, lsl #26
    39e0:	81010400 	tsthi	r1, r0, lsl #8
    39e4:	0c000000 	stceq	0, cr0, [r0], {-0}
    39e8:	000018ed 	andeq	r1, r0, sp, ror #17
    39ec:	20003644 	andcs	r3, r0, r4, asr #12
    39f0:	000000e8 	andeq	r0, r0, r8, ror #1
    39f4:	000012f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    39f8:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
    39fc:	0000004e 	andeq	r0, r0, lr, asr #32
    3a00:	00030903 	andeq	r0, r3, r3, lsl #18
    3a04:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
    3a08:	00000000 	andeq	r0, r0, r0
    3a0c:	00067b03 	andeq	r7, r6, r3, lsl #22
    3a10:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
    3a14:	04000000 	streq	r0, [r0], #-0
    3a18:	00147603 	andseq	r7, r4, r3, lsl #12
    3a1c:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
    3a20:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3a24:	07040400 	streq	r0, [r4, -r0, lsl #8]
    3a28:	0000032d 	andeq	r0, r0, sp, lsr #6
    3a2c:	005b0405 	subseq	r0, fp, r5, lsl #8
    3a30:	01040000 	mrseq	r0, (UNDEF: 4)
    3a34:	00045d08 	andeq	r5, r4, r8, lsl #26
    3a38:	15c80600 	strbne	r0, [r8, #1536]	; 0x600
    3a3c:	0a020000 	beq	83a44 <startup-0x1ff7c5bc>
    3a40:	00000021 	andeq	r0, r0, r1, lsr #32
    3a44:	00001607 	andeq	r1, r0, r7, lsl #12
    3a48:	06030c00 	streq	r0, [r3], -r0, lsl #24
    3a4c:	0000009e 	muleq	r0, lr, r0
    3a50:	00054803 	andeq	r4, r5, r3, lsl #16
    3a54:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
    3a58:	00000000 	andeq	r0, r0, r0
    3a5c:	00001d03 	andeq	r1, r0, r3, lsl #26
    3a60:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
    3a64:	04000000 	streq	r0, [r0], #-0
    3a68:	00001203 	andeq	r1, r0, r3, lsl #4
    3a6c:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
    3a70:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3a74:	62040500 	andvs	r0, r4, #0, 10
    3a78:	06000000 	streq	r0, [r0], -r0
    3a7c:	00000f96 	muleq	r0, r6, pc	; <UNPREDICTABLE>
    3a80:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
    3a84:	40070000 	andmi	r0, r7, r0
    3a88:	24000006 	strcs	r0, [r0], #-6
    3a8c:	01280604 			; <UNDEFINED> instruction: 0x01280604
    3a90:	fa030000 	blx	c3a98 <startup-0x1ff3c568>
    3a94:	04000003 	streq	r0, [r0], #-3
    3a98:	00012807 	andeq	r2, r1, r7, lsl #16
    3a9c:	4c030000 	stcmi	0, cr0, [r3], {-0}
    3aa0:	04000006 	streq	r0, [r0], #-6
    3aa4:	00012e08 	andeq	r2, r1, r8, lsl #28
    3aa8:	b3030400 	movwlt	r0, #13312	; 0x3400
    3aac:	04000005 	streq	r0, [r0], #-5
    3ab0:	00012e09 	andeq	r2, r1, r9, lsl #28
    3ab4:	df030800 	svcle	0x00030800
    3ab8:	04000005 	streq	r0, [r0], #-5
    3abc:	0001460c 	andeq	r4, r1, ip, lsl #12
    3ac0:	02030c00 	andeq	r0, r3, #0, 24
    3ac4:	04000003 	streq	r0, [r0], #-3
    3ac8:	0001460d 	andeq	r4, r1, sp, lsl #12
    3acc:	0c031000 	stceq	0, cr1, [r3], {-0}
    3ad0:	04000004 	streq	r0, [r0], #-4
    3ad4:	00012e10 	andeq	r2, r1, r0, lsl lr
    3ad8:	52031400 	andpl	r1, r3, #0, 8
    3adc:	04000000 	streq	r0, [r0], #-0
    3ae0:	00012e11 	andeq	r2, r1, r1, lsl lr
    3ae4:	7d031800 	stcvc	8, cr1, [r3, #-0]
    3ae8:	04000003 	streq	r0, [r0], #-3
    3aec:	00012e12 	andeq	r2, r1, r2, lsl lr
    3af0:	8d031c00 	stchi	12, cr1, [r3, #-0]
    3af4:	04000003 	streq	r0, [r0], #-3
    3af8:	00012e13 	andeq	r2, r1, r3, lsl lr
    3afc:	05002000 	streq	r2, [r0, #-0]
    3b00:	0000a404 	andeq	sl, r0, r4, lsl #8
    3b04:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
    3b08:	00746e69 	rsbseq	r6, r4, r9, ror #28
    3b0c:	00014009 	andeq	r4, r1, r9
    3b10:	01400a00 	cmpeq	r0, r0, lsl #20
    3b14:	05000000 	streq	r0, [r0, #-0]
    3b18:	0000af04 	andeq	sl, r0, r4, lsl #30
    3b1c:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
    3b20:	06000001 	streq	r0, [r0], -r1
    3b24:	00000641 	andeq	r0, r0, r1, asr #12
    3b28:	00af1504 	adceq	r1, pc, r4, lsl #10
    3b2c:	620b0000 	andvs	r0, fp, #0
    3b30:	62000001 	andvs	r0, r0, #1
    3b34:	0c000001 	stceq	0, cr0, [r0], {1}
    3b38:	4c040500 	cfstr32mi	mvfx0, [r4], {-0}
    3b3c:	0d000001 	stceq	0, cr0, [r0, #-4]
    3b40:	000004e0 	andeq	r0, r0, r0, ror #9
    3b44:	01571c04 	cmpeq	r7, r4, lsl #24
    3b48:	c80d0000 	stmdagt	sp, {}	; <UNPREDICTABLE>
    3b4c:	04000003 	streq	r0, [r0], #-3
    3b50:	00012e1d 	andeq	r2, r1, sp, lsl lr
    3b54:	005b0b00 	subseq	r0, fp, r0, lsl #22
    3b58:	018f0000 	orreq	r0, pc, r0
    3b5c:	8f0e0000 	svchi	0x000e0000
    3b60:	ff000001 			; <UNDEFINED> instruction: 0xff000001
    3b64:	04040003 	streq	r0, [r4], #-3
    3b68:	0003aa07 	andeq	sl, r3, r7, lsl #20
    3b6c:	191d0f00 	ldmdbne	sp, {r8, r9, sl, fp}
    3b70:	03050000 	movweq	r0, #20480	; 0x5000
    3b74:	0000017e 	andeq	r0, r0, lr, ror r1
    3b78:	88500305 	ldmdahi	r0, {r0, r2, r8, r9}^
    3b7c:	bd0f2000 	stclt	0, cr2, [pc, #-0]	; 3b84 <startup-0x1fffc47c>
    3b80:	06000018 			; <UNDEFINED> instruction: 0x06000018
    3b84:	00017e03 	andeq	r7, r1, r3, lsl #28
    3b88:	50030500 	andpl	r0, r3, r0, lsl #10
    3b8c:	0f20008c 	svceq	0x0020008c
    3b90:	0000189a 	muleq	r0, sl, r8
    3b94:	017e0307 	cmneq	lr, r7, lsl #6
    3b98:	03050000 	movweq	r0, #20480	; 0x5000
    3b9c:	20009050 	andcs	r9, r0, r0, asr r0
    3ba0:	00187f10 	andseq	r7, r8, r0, lsl pc
    3ba4:	9e080100 	adflse	f0, f0, f0
    3ba8:	05000000 	streq	r0, [r0, #-0]
    3bac:	00601c03 	rsbeq	r1, r0, r3, lsl #24
    3bb0:	19591020 	ldmdbne	r9, {r5, ip}^
    3bb4:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    3bb8:	0000009e 	muleq	r0, lr, r0
    3bbc:	5fe80305 	svcpl	0x00e80305
    3bc0:	e0102000 	ands	r2, r0, r0
    3bc4:	01000018 	tsteq	r0, r8, lsl r0
    3bc8:	00009e0a 	andeq	r9, r0, sl, lsl #28
    3bcc:	2c030500 	cfstr32cs	mvfx0, [r3], {-0}
    3bd0:	10200060 	eorne	r0, r0, r0, rrx
    3bd4:	00001930 	andeq	r1, r0, r0, lsr r9
    3bd8:	00620c01 	rsbeq	r0, r2, r1, lsl #24
    3bdc:	03050000 	movweq	r0, #20480	; 0x5000
    3be0:	20005fdc 	ldrdcs	r5, [r0], -ip
    3be4:	0018cf10 	andseq	ip, r8, r0, lsl pc
    3be8:	620d0100 	andvs	r0, sp, #0, 2
    3bec:	05000000 	streq	r0, [r0, #-0]
    3bf0:	005fd003 	subseq	sp, pc, r3
    3bf4:	18ad1020 	stmiane	sp!, {r5, ip}
    3bf8:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    3bfc:	00000062 	andeq	r0, r0, r2, rrx
    3c00:	5fc40305 	svcpl	0x00c40305
    3c04:	4e102000 	cdpmi	0, 1, cr2, cr0, cr0, {0}
    3c08:	01000019 	tsteq	r0, r9, lsl r0
    3c0c:	00014c11 	andeq	r4, r1, r1, lsl ip
    3c10:	ec030500 	cfstr32	mvfx0, [r3], {-0}
    3c14:	1020005f 	eorne	r0, r0, pc, asr r0
    3c18:	00001872 	andeq	r1, r0, r2, ror r8
    3c1c:	00a41201 	adceq	r1, r4, r1, lsl #4
    3c20:	03050000 	movweq	r0, #20480	; 0x5000
    3c24:	20006020 	andcs	r6, r0, r0, lsr #32
    3c28:	0000a40b 	andeq	sl, r0, fp, lsl #8
    3c2c:	00026100 	andeq	r6, r2, r0, lsl #2
    3c30:	018f1100 	orreq	r1, pc, r0, lsl #2
    3c34:	00000000 	andeq	r0, r0, r0
    3c38:	00188c10 	andseq	r8, r8, r0, lsl ip
    3c3c:	51130100 	tstpl	r3, r0, lsl #2
    3c40:	05000002 	streq	r0, [r0, #-2]
    3c44:	00601003 	rsbeq	r1, r0, r3
    3c48:	19411220 	stmdbne	r1, {r5, r9, ip}^
    3c4c:	22010000 	andcs	r0, r1, #0
    3c50:	200036b8 			; <UNDEFINED> instruction: 0x200036b8
    3c54:	00000074 	andeq	r0, r0, r4, ror r0
    3c58:	02a79c01 	adceq	r9, r7, #256	; 0x100
    3c5c:	4e130000 	cdpmi	0, 1, cr0, cr3, cr0, {0}
    3c60:	01000019 	tsteq	r0, r9, lsl r0
    3c64:	00016222 	andeq	r6, r1, r2, lsr #4
    3c68:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3c6c:	00086b0f 	andeq	r6, r8, pc, lsl #22
    3c70:	2e230100 	sufcss	f0, f3, f0
    3c74:	05000001 	streq	r0, [r0, #-1]
    3c78:	00945003 	addseq	r5, r4, r3
    3c7c:	33140020 	tstcc	r4, #32
    3c80:	01000004 	tsteq	r0, r4
    3c84:	00364414 	eorseq	r4, r6, r4, lsl r4
    3c88:	00007420 	andeq	r7, r0, r0, lsr #8
    3c8c:	0f9c0100 	svceq	0x009c0100
    3c90:	00000d00 	andeq	r0, r0, r0, lsl #26
    3c94:	009e1601 	addseq	r1, lr, r1, lsl #12
    3c98:	91020000 	mrsls	r0, (UNDEF: 2)
    3c9c:	0d0a0f74 	stceq	15, cr0, [sl, #-464]	; 0xfffffe30
    3ca0:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    3ca4:	0000009e 	muleq	r0, lr, r0
    3ca8:	0f709102 	svceq	0x00709102
    3cac:	00000b00 	andeq	r0, r0, r0, lsl #22
    3cb0:	009e1c01 	addseq	r1, lr, r1, lsl #24
    3cb4:	91020000 	mrsls	r0, (UNDEF: 2)
    3cb8:	e000006c 	and	r0, r0, ip, rrx
    3cbc:	04000002 	streq	r0, [r0], #-2
    3cc0:	000f9600 	andeq	r9, pc, r0, lsl #12
    3cc4:	81010400 	tsthi	r1, r0, lsl #8
    3cc8:	0c000000 	stceq	0, cr0, [r0], {-0}
    3ccc:	000019a6 	andeq	r1, r0, r6, lsr #19
    3cd0:	2000372c 	andcs	r3, r0, ip, lsr #14
    3cd4:	000000e8 	andeq	r0, r0, r8, ror #1
    3cd8:	000013cb 	andeq	r1, r0, fp, asr #7
    3cdc:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
    3ce0:	0000004e 	andeq	r0, r0, lr, asr #32
    3ce4:	00030903 	andeq	r0, r3, r3, lsl #18
    3ce8:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
    3cec:	00000000 	andeq	r0, r0, r0
    3cf0:	00067b03 	andeq	r7, r6, r3, lsl #22
    3cf4:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
    3cf8:	04000000 	streq	r0, [r0], #-0
    3cfc:	00147603 	andseq	r7, r4, r3, lsl #12
    3d00:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
    3d04:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3d08:	07040400 	streq	r0, [r4, -r0, lsl #8]
    3d0c:	0000032d 	andeq	r0, r0, sp, lsr #6
    3d10:	005b0405 	subseq	r0, fp, r5, lsl #8
    3d14:	01040000 	mrseq	r0, (UNDEF: 4)
    3d18:	00045d08 	andeq	r5, r4, r8, lsl #26
    3d1c:	15c80600 	strbne	r0, [r8, #1536]	; 0x600
    3d20:	0a020000 	beq	83d28 <startup-0x1ff7c2d8>
    3d24:	00000021 	andeq	r0, r0, r1, lsr #32
    3d28:	00001607 	andeq	r1, r0, r7, lsl #12
    3d2c:	06030c00 	streq	r0, [r3], -r0, lsl #24
    3d30:	0000009e 	muleq	r0, lr, r0
    3d34:	00054803 	andeq	r4, r5, r3, lsl #16
    3d38:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
    3d3c:	00000000 	andeq	r0, r0, r0
    3d40:	00001d03 	andeq	r1, r0, r3, lsl #26
    3d44:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
    3d48:	04000000 	streq	r0, [r0], #-0
    3d4c:	00001203 	andeq	r1, r0, r3, lsl #4
    3d50:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
    3d54:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3d58:	62040500 	andvs	r0, r4, #0, 10
    3d5c:	06000000 	streq	r0, [r0], -r0
    3d60:	00000f96 	muleq	r0, r6, pc	; <UNPREDICTABLE>
    3d64:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
    3d68:	40070000 	andmi	r0, r7, r0
    3d6c:	24000006 	strcs	r0, [r0], #-6
    3d70:	01280604 			; <UNDEFINED> instruction: 0x01280604
    3d74:	fa030000 	blx	c3d7c <startup-0x1ff3c284>
    3d78:	04000003 	streq	r0, [r0], #-3
    3d7c:	00012807 	andeq	r2, r1, r7, lsl #16
    3d80:	4c030000 	stcmi	0, cr0, [r3], {-0}
    3d84:	04000006 	streq	r0, [r0], #-6
    3d88:	00012e08 	andeq	r2, r1, r8, lsl #28
    3d8c:	b3030400 	movwlt	r0, #13312	; 0x3400
    3d90:	04000005 	streq	r0, [r0], #-5
    3d94:	00012e09 	andeq	r2, r1, r9, lsl #28
    3d98:	df030800 	svcle	0x00030800
    3d9c:	04000005 	streq	r0, [r0], #-5
    3da0:	0001460c 	andeq	r4, r1, ip, lsl #12
    3da4:	02030c00 	andeq	r0, r3, #0, 24
    3da8:	04000003 	streq	r0, [r0], #-3
    3dac:	0001460d 	andeq	r4, r1, sp, lsl #12
    3db0:	0c031000 	stceq	0, cr1, [r3], {-0}
    3db4:	04000004 	streq	r0, [r0], #-4
    3db8:	00012e10 	andeq	r2, r1, r0, lsl lr
    3dbc:	52031400 	andpl	r1, r3, #0, 8
    3dc0:	04000000 	streq	r0, [r0], #-0
    3dc4:	00012e11 	andeq	r2, r1, r1, lsl lr
    3dc8:	7d031800 	stcvc	8, cr1, [r3, #-0]
    3dcc:	04000003 	streq	r0, [r0], #-3
    3dd0:	00012e12 	andeq	r2, r1, r2, lsl lr
    3dd4:	8d031c00 	stchi	12, cr1, [r3, #-0]
    3dd8:	04000003 	streq	r0, [r0], #-3
    3ddc:	00012e13 	andeq	r2, r1, r3, lsl lr
    3de0:	05002000 	streq	r2, [r0, #-0]
    3de4:	0000a404 	andeq	sl, r0, r4, lsl #8
    3de8:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
    3dec:	00746e69 	rsbseq	r6, r4, r9, ror #28
    3df0:	00014009 	andeq	r4, r1, r9
    3df4:	01400a00 	cmpeq	r0, r0, lsl #20
    3df8:	05000000 	streq	r0, [r0, #-0]
    3dfc:	0000af04 	andeq	sl, r0, r4, lsl #30
    3e00:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
    3e04:	06000001 	streq	r0, [r0], -r1
    3e08:	00000641 	andeq	r0, r0, r1, asr #12
    3e0c:	00af1504 	adceq	r1, pc, r4, lsl #10
    3e10:	620b0000 	andvs	r0, fp, #0
    3e14:	62000001 	andvs	r0, r0, #1
    3e18:	0c000001 	stceq	0, cr0, [r0], {1}
    3e1c:	4c040500 	cfstr32mi	mvfx0, [r4], {-0}
    3e20:	0d000001 	stceq	0, cr0, [r0, #-4]
    3e24:	000004e0 	andeq	r0, r0, r0, ror #9
    3e28:	01571c04 	cmpeq	r7, r4, lsl #24
    3e2c:	c80d0000 	stmdagt	sp, {}	; <UNPREDICTABLE>
    3e30:	04000003 	streq	r0, [r0], #-3
    3e34:	00012e1d 	andeq	r2, r1, sp, lsl lr
    3e38:	005b0b00 	subseq	r0, fp, r0, lsl #22
    3e3c:	018f0000 	orreq	r0, pc, r0
    3e40:	8f0e0000 	svchi	0x000e0000
    3e44:	ff000001 			; <UNDEFINED> instruction: 0xff000001
    3e48:	04040003 	streq	r0, [r4], #-3
    3e4c:	0003aa07 	andeq	sl, r3, r7, lsl #20
    3e50:	19730f00 	ldmdbne	r3!, {r8, r9, sl, fp}^
    3e54:	03050000 	movweq	r0, #20480	; 0x5000
    3e58:	0000017e 	andeq	r0, r0, lr, ror r1
    3e5c:	94540305 	ldrbls	r0, [r4], #-773	; 0xfffffcfb
    3e60:	360f2000 	strcc	r2, [pc], -r0
    3e64:	0600001a 			; <UNDEFINED> instruction: 0x0600001a
    3e68:	00017e03 	andeq	r7, r1, r3, lsl #28
    3e6c:	54030500 	strpl	r0, [r3], #-1280	; 0xfffffb00
    3e70:	0f200098 	svceq	0x00200098
    3e74:	00001a13 	andeq	r1, r0, r3, lsl sl
    3e78:	017e0307 	cmneq	lr, r7, lsl #6
    3e7c:	03050000 	movweq	r0, #20480	; 0x5000
    3e80:	20009c54 	andcs	r9, r0, r4, asr ip
    3e84:	0019e910 	andseq	lr, r9, r0, lsl r9
    3e88:	9e080100 	adflse	f0, f0, f0
    3e8c:	05000000 	streq	r0, [r0, #-0]
    3e90:	00609803 	rsbeq	r9, r0, r3, lsl #16
    3e94:	19991020 	ldmibne	r9, {r5, ip}
    3e98:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    3e9c:	0000009e 	muleq	r0, lr, r0
    3ea0:	60540305 	subsvs	r0, r4, r5, lsl #6
    3ea4:	65102000 	ldrvs	r2, [r0, #-0]
    3ea8:	01000019 	tsteq	r0, r9, lsl r0
    3eac:	00009e0a 	andeq	r9, r0, sl, lsl #28
    3eb0:	7c030500 	cfstr32vc	mvfx0, [r3], {-0}
    3eb4:	10200060 	eorne	r0, r0, r0, rrx
    3eb8:	000019d7 	ldrdeq	r1, [r0], -r7
    3ebc:	00620c01 	rsbeq	r0, r2, r1, lsl #24
    3ec0:	03050000 	movweq	r0, #20480	; 0x5000
    3ec4:	20006080 	andcs	r6, r0, r0, lsl #1
    3ec8:	00198710 	andseq	r8, r9, r0, lsl r7
    3ecc:	620d0100 	andvs	r0, sp, #0, 2
    3ed0:	05000000 	streq	r0, [r0, #-0]
    3ed4:	00608c03 	rsbeq	r8, r0, r3, lsl #24
    3ed8:	1a551020 	bne	1547f60 <startup-0x1eab80a0>
    3edc:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    3ee0:	00000062 	andeq	r0, r0, r2, rrx
    3ee4:	60700305 	rsbsvs	r0, r0, r5, lsl #6
    3ee8:	49102000 	ldmdbmi	r0, {sp}
    3eec:	0100001a 	tsteq	r0, sl, lsl r0
    3ef0:	00014c11 	andeq	r4, r1, r1, lsl ip
    3ef4:	30030500 	andcc	r0, r3, r0, lsl #10
    3ef8:	10200060 	eorne	r0, r0, r0, rrx
    3efc:	000019f7 	strdeq	r1, [r0], -r7
    3f00:	00a41201 	adceq	r1, r4, r1, lsl #4
    3f04:	03050000 	movweq	r0, #20480	; 0x5000
    3f08:	20006064 	andcs	r6, r0, r4, rrx
    3f0c:	0000a40b 	andeq	sl, r0, fp, lsl #8
    3f10:	00026100 	andeq	r6, r2, r0, lsl #2
    3f14:	018f1100 	orreq	r1, pc, r0, lsl #2
    3f18:	00000000 	andeq	r0, r0, r0
    3f1c:	001a2710 	andseq	r2, sl, r0, lsl r7
    3f20:	51130100 	tstpl	r3, r0, lsl #2
    3f24:	05000002 	streq	r0, [r0, #-2]
    3f28:	00605803 	rsbeq	r5, r0, r3, lsl #16
    3f2c:	1a051220 	bne	1487b4 <startup-0x1feb784c>
    3f30:	22010000 	andcs	r0, r1, #0
    3f34:	200037a0 	andcs	r3, r0, r0, lsr #15
    3f38:	00000074 	andeq	r0, r0, r4, ror r0
    3f3c:	02a79c01 	adceq	r9, r7, #256	; 0x100
    3f40:	49130000 	ldmdbmi	r3, {}	; <UNPREDICTABLE>
    3f44:	0100001a 	tsteq	r0, sl, lsl r0
    3f48:	00016222 	andeq	r6, r1, r2, lsr #4
    3f4c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3f50:	00086b0f 	andeq	r6, r8, pc, lsl #22
    3f54:	2e230100 	sufcss	f0, f3, f0
    3f58:	05000001 	streq	r0, [r0, #-1]
    3f5c:	00a05403 	adceq	r5, r0, r3, lsl #8
    3f60:	33140020 	tstcc	r4, #32
    3f64:	01000004 	tsteq	r0, r4
    3f68:	00372c14 	eorseq	r2, r7, r4, lsl ip
    3f6c:	00007420 	andeq	r7, r0, r0, lsr #8
    3f70:	0f9c0100 	svceq	0x009c0100
    3f74:	00000d00 	andeq	r0, r0, r0, lsl #26
    3f78:	009e1601 	addseq	r1, lr, r1, lsl #12
    3f7c:	91020000 	mrsls	r0, (UNDEF: 2)
    3f80:	0d0a0f74 	stceq	15, cr0, [sl, #-464]	; 0xfffffe30
    3f84:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    3f88:	0000009e 	muleq	r0, lr, r0
    3f8c:	0f709102 	svceq	0x00709102
    3f90:	00000b00 	andeq	r0, r0, r0, lsl #22
    3f94:	009e1c01 	addseq	r1, lr, r1, lsl #24
    3f98:	91020000 	mrsls	r0, (UNDEF: 2)
    3f9c:	df00006c 	svcle	0x0000006c
    3fa0:	04000002 	streq	r0, [r0], #-2
    3fa4:	00109f00 	andseq	r9, r0, r0, lsl #30
    3fa8:	81010400 	tsthi	r1, r0, lsl #8
    3fac:	0c000000 	stceq	0, cr0, [r0], {-0}
    3fb0:	00001a66 	andeq	r1, r0, r6, ror #20
    3fb4:	20003814 	andcs	r3, r0, r4, lsl r8
    3fb8:	000000e8 	andeq	r0, r0, r8, ror #1
    3fbc:	000014a9 	andeq	r1, r0, r9, lsr #9
    3fc0:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
    3fc4:	0000004e 	andeq	r0, r0, lr, asr #32
    3fc8:	00030903 	andeq	r0, r3, r3, lsl #18
    3fcc:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
    3fd0:	00000000 	andeq	r0, r0, r0
    3fd4:	00067b03 	andeq	r7, r6, r3, lsl #22
    3fd8:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
    3fdc:	04000000 	streq	r0, [r0], #-0
    3fe0:	00147603 	andseq	r7, r4, r3, lsl #12
    3fe4:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
    3fe8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3fec:	07040400 	streq	r0, [r4, -r0, lsl #8]
    3ff0:	0000032d 	andeq	r0, r0, sp, lsr #6
    3ff4:	005b0405 	subseq	r0, fp, r5, lsl #8
    3ff8:	01040000 	mrseq	r0, (UNDEF: 4)
    3ffc:	00045d08 	andeq	r5, r4, r8, lsl #26
    4000:	15c80600 	strbne	r0, [r8, #1536]	; 0x600
    4004:	0a020000 	beq	8400c <startup-0x1ff7bff4>
    4008:	00000021 	andeq	r0, r0, r1, lsr #32
    400c:	00001607 	andeq	r1, r0, r7, lsl #12
    4010:	06030c00 	streq	r0, [r3], -r0, lsl #24
    4014:	0000009e 	muleq	r0, lr, r0
    4018:	00054803 	andeq	r4, r5, r3, lsl #16
    401c:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
    4020:	00000000 	andeq	r0, r0, r0
    4024:	00001d03 	andeq	r1, r0, r3, lsl #26
    4028:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
    402c:	04000000 	streq	r0, [r0], #-0
    4030:	00001203 	andeq	r1, r0, r3, lsl #4
    4034:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
    4038:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    403c:	62040500 	andvs	r0, r4, #0, 10
    4040:	06000000 	streq	r0, [r0], -r0
    4044:	00000f96 	muleq	r0, r6, pc	; <UNPREDICTABLE>
    4048:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
    404c:	40070000 	andmi	r0, r7, r0
    4050:	24000006 	strcs	r0, [r0], #-6
    4054:	01280604 			; <UNDEFINED> instruction: 0x01280604
    4058:	fa030000 	blx	c4060 <startup-0x1ff3bfa0>
    405c:	04000003 	streq	r0, [r0], #-3
    4060:	00012807 	andeq	r2, r1, r7, lsl #16
    4064:	4c030000 	stcmi	0, cr0, [r3], {-0}
    4068:	04000006 	streq	r0, [r0], #-6
    406c:	00012e08 	andeq	r2, r1, r8, lsl #28
    4070:	b3030400 	movwlt	r0, #13312	; 0x3400
    4074:	04000005 	streq	r0, [r0], #-5
    4078:	00012e09 	andeq	r2, r1, r9, lsl #28
    407c:	df030800 	svcle	0x00030800
    4080:	04000005 	streq	r0, [r0], #-5
    4084:	0001460c 	andeq	r4, r1, ip, lsl #12
    4088:	02030c00 	andeq	r0, r3, #0, 24
    408c:	04000003 	streq	r0, [r0], #-3
    4090:	0001460d 	andeq	r4, r1, sp, lsl #12
    4094:	0c031000 	stceq	0, cr1, [r3], {-0}
    4098:	04000004 	streq	r0, [r0], #-4
    409c:	00012e10 	andeq	r2, r1, r0, lsl lr
    40a0:	52031400 	andpl	r1, r3, #0, 8
    40a4:	04000000 	streq	r0, [r0], #-0
    40a8:	00012e11 	andeq	r2, r1, r1, lsl lr
    40ac:	7d031800 	stcvc	8, cr1, [r3, #-0]
    40b0:	04000003 	streq	r0, [r0], #-3
    40b4:	00012e12 	andeq	r2, r1, r2, lsl lr
    40b8:	8d031c00 	stchi	12, cr1, [r3, #-0]
    40bc:	04000003 	streq	r0, [r0], #-3
    40c0:	00012e13 	andeq	r2, r1, r3, lsl lr
    40c4:	05002000 	streq	r2, [r0, #-0]
    40c8:	0000a404 	andeq	sl, r0, r4, lsl #8
    40cc:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
    40d0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    40d4:	00014009 	andeq	r4, r1, r9
    40d8:	01400a00 	cmpeq	r0, r0, lsl #20
    40dc:	05000000 	streq	r0, [r0, #-0]
    40e0:	0000af04 	andeq	sl, r0, r4, lsl #30
    40e4:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
    40e8:	06000001 	streq	r0, [r0], -r1
    40ec:	00000641 	andeq	r0, r0, r1, asr #12
    40f0:	00af1504 	adceq	r1, pc, r4, lsl #10
    40f4:	620b0000 	andvs	r0, fp, #0
    40f8:	62000001 	andvs	r0, r0, #1
    40fc:	0c000001 	stceq	0, cr0, [r0], {1}
    4100:	4c040500 	cfstr32mi	mvfx0, [r4], {-0}
    4104:	0d000001 	stceq	0, cr0, [r0, #-4]
    4108:	000004e0 	andeq	r0, r0, r0, ror #9
    410c:	01571c04 	cmpeq	r7, r4, lsl #24
    4110:	c80d0000 	stmdagt	sp, {}	; <UNPREDICTABLE>
    4114:	04000003 	streq	r0, [r0], #-3
    4118:	00012e1d 	andeq	r2, r1, sp, lsl lr
    411c:	005b0b00 	subseq	r0, fp, r0, lsl #22
    4120:	018e0000 	orreq	r0, lr, r0
    4124:	8e0e0000 	cdphi	0, 0, cr0, cr14, cr0, {0}
    4128:	21000001 	tstcs	r0, r1
    412c:	07040400 	streq	r0, [r4, -r0, lsl #8]
    4130:	000003aa 	andeq	r0, r0, sl, lsr #7
    4134:	001a950f 	andseq	r9, sl, pc, lsl #10
    4138:	7e030500 	cfsh32vc	mvfx0, mvfx3, #0
    413c:	05000001 	streq	r0, [r0, #-1]
    4140:	00a05803 	adceq	r5, r0, r3, lsl #16
    4144:	1adf0f20 	bne	ff7c7dcc <firstTime.4040+0xdf7bdd08>
    4148:	03060000 	movweq	r0, #24576	; 0x6000
    414c:	0000017e 	andeq	r0, r0, lr, ror r1
    4150:	a07c0305 	rsbsge	r0, ip, r5, lsl #6
    4154:	bd0f2000 	stclt	0, cr2, [pc, #-0]	; 415c <startup-0x1fffbea4>
    4158:	0700001a 	smladeq	r0, sl, r0, r0
    415c:	00017e03 	andeq	r7, r1, r3, lsl #28
    4160:	a0030500 	andge	r0, r3, r0, lsl #10
    4164:	102000a0 	eorne	r0, r0, r0, lsr #1
    4168:	00001b24 	andeq	r1, r0, r4, lsr #22
    416c:	009e0801 	addseq	r0, lr, r1, lsl #16
    4170:	03050000 	movweq	r0, #20480	; 0x5000
    4174:	200060a8 	andcs	r6, r0, r8, lsr #1
    4178:	001b0010 	andseq	r0, fp, r0, lsl r0
    417c:	9e090100 	adflse	f0, f1, f0
    4180:	05000000 	streq	r0, [r0, #-0]
    4184:	0060e803 	rsbeq	lr, r0, r3, lsl #16
    4188:	1aa71020 	bne	fe9c8210 <firstTime.4040+0xde9be14c>
    418c:	0a010000 	beq	44194 <startup-0x1ffbbe6c>
    4190:	0000009e 	muleq	r0, lr, r0
    4194:	61040305 	tstvs	r4, r5, lsl #6
    4198:	cf102000 	svcgt	0x00102000
    419c:	0100001a 	tsteq	r0, sl, lsl r0
    41a0:	0000620c 	andeq	r6, r0, ip, lsl #4
    41a4:	ec030500 	cfstr32	mvfx0, [r3], {-0}
    41a8:	10200060 	eorne	r0, r0, r0, rrx
    41ac:	00001af0 	strdeq	r1, [r0], -r0
    41b0:	00620d01 	rsbeq	r0, r2, r1, lsl #26
    41b4:	03050000 	movweq	r0, #20480	; 0x5000
    41b8:	200060b8 	strhcs	r6, [r0], -r8
    41bc:	001b3010 	andseq	r3, fp, r0, lsl r0
    41c0:	620e0100 	andvs	r0, lr, #0, 2
    41c4:	05000000 	streq	r0, [r0, #-0]
    41c8:	0060f803 	rsbeq	pc, r0, r3, lsl #16
    41cc:	1ab31020 	bne	fecc8254 <firstTime.4040+0xdecbe190>
    41d0:	11010000 	mrsne	r0, (UNDEF: 1)
    41d4:	0000014c 	andeq	r0, r0, ip, asr #2
    41d8:	60c40305 	sbcvs	r0, r4, r5, lsl #6
    41dc:	18102000 	ldmdane	r0, {sp}
    41e0:	0100001b 	tsteq	r0, fp, lsl r0
    41e4:	0000a412 	andeq	sl, r0, r2, lsl r4
    41e8:	ac030500 	cfstr32ge	mvfx0, [r3], {-0}
    41ec:	0b200060 	bleq	804374 <startup-0x1f7fbc8c>
    41f0:	000000a4 	andeq	r0, r0, r4, lsr #1
    41f4:	00000260 	andeq	r0, r0, r0, ror #4
    41f8:	00018e0e 	andeq	r8, r1, lr, lsl #28
    41fc:	10000000 	andne	r0, r0, r0
    4200:	00001b0b 	andeq	r1, r0, fp, lsl #22
    4204:	02501301 	subseq	r1, r0, #67108864	; 0x4000000
    4208:	03050000 	movweq	r0, #20480	; 0x5000
    420c:	2000609c 	mulcs	r0, ip, r0
    4210:	0002b911 	andeq	fp, r2, r1, lsl r9
    4214:	88220100 	stmdahi	r2!, {r8}
    4218:	74200038 	strtvc	r0, [r0], #-56	; 0xffffffc8
    421c:	01000000 	mrseq	r0, (UNDEF: 0)
    4220:	0002a69c 	muleq	r2, ip, r6
    4224:	1ab31200 	bne	fecc8a2c <firstTime.4040+0xdecbe968>
    4228:	22010000 	andcs	r0, r1, #0
    422c:	00000162 	andeq	r0, r0, r2, ror #2
    4230:	0f6c9102 	svceq	0x006c9102
    4234:	0000086b 	andeq	r0, r0, fp, ror #16
    4238:	012e2301 			; <UNDEFINED> instruction: 0x012e2301
    423c:	03050000 	movweq	r0, #20480	; 0x5000
    4240:	2000a0c4 	andcs	sl, r0, r4, asr #1
    4244:	04331300 	ldrteq	r1, [r3], #-768	; 0xfffffd00
    4248:	14010000 	strne	r0, [r1], #-0
    424c:	20003814 	andcs	r3, r0, r4, lsl r8
    4250:	00000074 	andeq	r0, r0, r4, ror r0
    4254:	000f9c01 	andeq	r9, pc, r1, lsl #24
    4258:	0100000d 	tsteq	r0, sp
    425c:	00009e16 	andeq	r9, r0, r6, lsl lr
    4260:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4264:	000d0a0f 	andeq	r0, sp, pc, lsl #20
    4268:	9e190100 	muflse	f0, f1, f0
    426c:	02000000 	andeq	r0, r0, #0
    4270:	000f7091 	muleq	pc, r1, r0	; <UNPREDICTABLE>
    4274:	0100000b 	tsteq	r0, fp
    4278:	00009e1c 	andeq	r9, r0, ip, lsl lr
    427c:	6c910200 	lfmvs	f0, 4, [r1], {0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	1117550e 	tstne	r7, lr, lsl #10
       c:	00171001 	andseq	r1, r7, r1
      10:	01130200 	tsteq	r3, r0, lsl #4
      14:	0b3a0b0b 	bleq	e82c48 <startup-0x1f17d3b8>
      18:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      1c:	0d030000 	stceq	0, cr0, [r3, #-0]
      20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
      24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      28:	000b3813 	andeq	r3, fp, r3, lsl r8
      2c:	00240400 	eoreq	r0, r4, r0, lsl #8
      30:	0b3e0b0b 	bleq	f82c64 <startup-0x1f07d39c>
      34:	00000e03 	andeq	r0, r0, r3, lsl #28
      38:	0b000f05 	bleq	3c54 <startup-0x1fffc3ac>
      3c:	0013490b 	andseq	r4, r3, fp, lsl #18
      40:	00160600 	andseq	r0, r6, r0, lsl #12
      44:	0b3a0e03 	bleq	e83858 <startup-0x1f17c7a8>
      48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      4c:	13070000 	movwne	r0, #28672	; 0x7000
      50:	0b0e0301 	bleq	380c5c <startup-0x1fc7f3a4>
      54:	3b0b3a0b 	blcc	2ce888 <startup-0x1fd31778>
      58:	0013010b 	andseq	r0, r3, fp, lsl #2
      5c:	00240800 	eoreq	r0, r4, r0, lsl #16
      60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
      64:	00000803 	andeq	r0, r0, r3, lsl #16
      68:	27011509 	strcs	r1, [r1, -r9, lsl #10]
      6c:	00130119 	andseq	r0, r3, r9, lsl r1
      70:	00050a00 	andeq	r0, r5, r0, lsl #20
      74:	00001349 	andeq	r1, r0, r9, asr #6
      78:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
      7c:	00130113 	andseq	r0, r3, r3, lsl r1
      80:	00210c00 	eoreq	r0, r1, r0, lsl #24
      84:	340d0000 	strcc	r0, [sp], #-0
      88:	3a0e0300 	bcc	380c90 <startup-0x1fc7f370>
      8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      90:	3c193f13 	ldccc	15, cr3, [r9], {19}
      94:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
      98:	13490021 	movtne	r0, #36897	; 0x9021
      9c:	0000052f 	andeq	r0, r0, pc, lsr #10
      a0:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
      a4:	000b2f13 	andeq	r2, fp, r3, lsl pc
      a8:	00341000 	eorseq	r1, r4, r0
      ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
      b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      b4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
      b8:	34110000 	ldrcc	r0, [r1], #-0
      bc:	3a0e0300 	bcc	380cc4 <startup-0x1fc7f33c>
      c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      c4:	00180213 	andseq	r0, r8, r3, lsl r2
      c8:	00341200 	eorseq	r1, r4, r0, lsl #4
      cc:	0b3a0803 	bleq	e820e0 <startup-0x1f17df20>
      d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      d4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
      d8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
      dc:	03193f01 	tsteq	r9, #1, 30
      e0:	3b0b3a0e 	blcc	2ce920 <startup-0x1fd316e0>
      e4:	1119270b 	tstne	r9, fp, lsl #14
      e8:	40061201 	andmi	r1, r6, r1, lsl #4
      ec:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
      f0:	00001301 	andeq	r1, r0, r1, lsl #6
      f4:	3f012e14 	svccc	0x00012e14
      f8:	3a0e0319 	bcc	380d64 <startup-0x1fc7f29c>
      fc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     100:	01193c13 	tsteq	r9, r3, lsl ip
     104:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
     108:	00000018 	andeq	r0, r0, r8, lsl r0
     10c:	03003416 	movweq	r3, #1046	; 0x416
     110:	3b0b3a08 	blcc	2ce938 <startup-0x1fd316c8>
     114:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     118:	17000018 	smladne	r0, r8, r0, r0
     11c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     120:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     124:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     128:	0b180000 	bleq	600130 <startup-0x1f9ffed0>
     12c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     130:	19000006 	stmdbne	r0, {r1, r2}
     134:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     138:	0b3a0e03 	bleq	e8394c <startup-0x1f17c6b4>
     13c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     140:	06120111 			; <UNDEFINED> instruction: 0x06120111
     144:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     148:	1a000019 	bne	1b4 <startup-0x1ffffe4c>
     14c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     150:	0b3a0e03 	bleq	e83964 <startup-0x1f17c69c>
     154:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     158:	06120111 			; <UNDEFINED> instruction: 0x06120111
     15c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     160:	00000019 	andeq	r0, r0, r9, lsl r0
     164:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     168:	030b130e 	movweq	r1, #45838	; 0xb30e
     16c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     170:	00171006 	andseq	r1, r7, r6
     174:	01130200 	tsteq	r3, r0, lsl #4
     178:	0b3a0b0b 	bleq	e82dac <startup-0x1f17d254>
     17c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     180:	0d030000 	stceq	0, cr0, [r3, #-0]
     184:	3a0e0300 	bcc	380d8c <startup-0x1fc7f274>
     188:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     18c:	000b3813 	andeq	r3, fp, r3, lsl r8
     190:	00240400 	eoreq	r0, r4, r0, lsl #8
     194:	0b3e0b0b 	bleq	f82dc8 <startup-0x1f07d238>
     198:	00000e03 	andeq	r0, r0, r3, lsl #28
     19c:	0b000f05 	bleq	3db8 <startup-0x1fffc248>
     1a0:	0013490b 	andseq	r4, r3, fp, lsl #18
     1a4:	00160600 	andseq	r0, r6, r0, lsl #12
     1a8:	0b3a0e03 	bleq	e839bc <startup-0x1f17c644>
     1ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     1b0:	13070000 	movwne	r0, #28672	; 0x7000
     1b4:	0b0e0301 	bleq	380dc0 <startup-0x1fc7f240>
     1b8:	3b0b3a0b 	blcc	2ce9ec <startup-0x1fd31614>
     1bc:	0013010b 	andseq	r0, r3, fp, lsl #2
     1c0:	00240800 	eoreq	r0, r4, r0, lsl #16
     1c4:	0b3e0b0b 	bleq	f82df8 <startup-0x1f07d208>
     1c8:	00000803 	andeq	r0, r0, r3, lsl #16
     1cc:	27011509 	strcs	r1, [r1, -r9, lsl #10]
     1d0:	00130119 	andseq	r0, r3, r9, lsl r1
     1d4:	00050a00 	andeq	r0, r5, r0, lsl #20
     1d8:	00001349 	andeq	r1, r0, r9, asr #6
     1dc:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
     1e0:	00130113 	andseq	r0, r3, r3, lsl r1
     1e4:	00210c00 	eoreq	r0, r1, r0, lsl #24
     1e8:	340d0000 	strcc	r0, [sp], #-0
     1ec:	3a0e0300 	bcc	380df4 <startup-0x1fc7f20c>
     1f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     1f4:	3c193f13 	ldccc	15, cr3, [r9], {19}
     1f8:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
     1fc:	13470034 	movtne	r0, #28724	; 0x7034
     200:	0b3b0b3a 	bleq	ec2ef0 <startup-0x1f13d110>
     204:	00001802 	andeq	r1, r0, r2, lsl #16
     208:	3f012e0f 	svccc	0x00012e0f
     20c:	3a0e0319 	bcc	380e78 <startup-0x1fc7f188>
     210:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     214:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     218:	96184006 	ldrls	r4, [r8], -r6
     21c:	13011942 	movwne	r1, #6466	; 0x1942
     220:	05100000 	ldreq	r0, [r0, #-0]
     224:	3a0e0300 	bcc	380e2c <startup-0x1fc7f1d4>
     228:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     22c:	00180213 	andseq	r0, r8, r3, lsl r2
     230:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
     234:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     238:	0b3b0b3a 	bleq	ec2f28 <startup-0x1f13d0d8>
     23c:	01111927 	tsteq	r1, r7, lsr #18
     240:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     244:	00194297 	mulseq	r9, r7, r2
     248:	11010000 	mrsne	r0, (UNDEF: 1)
     24c:	130e2501 	movwne	r2, #58625	; 0xe501
     250:	110e030b 	tstne	lr, fp, lsl #6
     254:	10061201 	andne	r1, r6, r1, lsl #4
     258:	02000017 	andeq	r0, r0, #23
     25c:	0b0b0113 	bleq	2c06b0 <startup-0x1fd3f950>
     260:	0b3b0b3a 	bleq	ec2f50 <startup-0x1f13d0b0>
     264:	00001301 	andeq	r1, r0, r1, lsl #6
     268:	03000d03 	movweq	r0, #3331	; 0xd03
     26c:	3b0b3a0e 	blcc	2ceaac <startup-0x1fd31554>
     270:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     274:	0400000b 	streq	r0, [r0], #-11
     278:	0b0b0024 	bleq	2c0310 <startup-0x1fd3fcf0>
     27c:	0e030b3e 	vmoveq.16	d3[0], r0
     280:	0f050000 	svceq	0x00050000
     284:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     288:	06000013 			; <UNDEFINED> instruction: 0x06000013
     28c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     290:	0b3b0b3a 	bleq	ec2f80 <startup-0x1f13d080>
     294:	00001349 	andeq	r1, r0, r9, asr #6
     298:	03011307 	movweq	r1, #4871	; 0x1307
     29c:	3a0b0b0e 	bcc	2c2edc <startup-0x1fd3d124>
     2a0:	010b3b0b 	tsteq	fp, fp, lsl #22
     2a4:	08000013 	stmdaeq	r0, {r0, r1, r4}
     2a8:	0b0b0024 	bleq	2c0340 <startup-0x1fd3fcc0>
     2ac:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     2b0:	15090000 	strne	r0, [r9, #-0]
     2b4:	01192701 	tsteq	r9, r1, lsl #14
     2b8:	0a000013 	beq	30c <startup-0x1ffffcf4>
     2bc:	13490005 	movtne	r0, #36869	; 0x9005
     2c0:	010b0000 	mrseq	r0, (UNDEF: 11)
     2c4:	01134901 	tsteq	r3, r1, lsl #18
     2c8:	0c000013 	stceq	0, cr0, [r0], {19}
     2cc:	00000021 	andeq	r0, r0, r1, lsr #32
     2d0:	0300340d 	movweq	r3, #1037	; 0x40d
     2d4:	3b0b3a0e 	blcc	2ceb14 <startup-0x1fd314ec>
     2d8:	3f13490b 	svccc	0x0013490b
     2dc:	00193c19 	andseq	r3, r9, r9, lsl ip
     2e0:	00210e00 	eoreq	r0, r1, r0, lsl #28
     2e4:	0b2f1349 	bleq	bc5010 <startup-0x1f43aff0>
     2e8:	340f0000 	strcc	r0, [pc], #-0	; 2f0 <startup-0x1ffffd10>
     2ec:	3a0e0300 	bcc	380ef4 <startup-0x1fc7f10c>
     2f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2f4:	00180213 	andseq	r0, r8, r3, lsl r2
     2f8:	00341000 	eorseq	r1, r4, r0
     2fc:	0b3a0e03 	bleq	e83b10 <startup-0x1f17c4f0>
     300:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     304:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     308:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     30c:	03193f01 	tsteq	r9, #1, 30
     310:	3b0b3a0e 	blcc	2ceb50 <startup-0x1fd314b0>
     314:	1119270b 	tstne	r9, fp, lsl #14
     318:	40061201 	andmi	r1, r6, r1, lsl #4
     31c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     320:	00001301 	andeq	r1, r0, r1, lsl #6
     324:	03000512 	movweq	r0, #1298	; 0x512
     328:	3b0b3a0e 	blcc	2ceb68 <startup-0x1fd31498>
     32c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     330:	13000018 	movwne	r0, #24
     334:	0e03012e 	adfeqsp	f0, f3, #0.5
     338:	0b3b0b3a 	bleq	ec3028 <startup-0x1f13cfd8>
     33c:	01111927 	tsteq	r1, r7, lsr #18
     340:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     344:	00194296 	mulseq	r9, r6, r2
     348:	11010000 	mrsne	r0, (UNDEF: 1)
     34c:	130e2501 	movwne	r2, #58625	; 0xe501
     350:	110e030b 	tstne	lr, fp, lsl #6
     354:	10061201 	andne	r1, r6, r1, lsl #4
     358:	02000017 	andeq	r0, r0, #23
     35c:	0b0b0024 	bleq	2c03f4 <startup-0x1fd3fc0c>
     360:	0e030b3e 	vmoveq.16	d3[0], r0
     364:	13030000 	movwne	r0, #12288	; 0x3000
     368:	3a0b0b01 	bcc	2c2f74 <startup-0x1fd3d08c>
     36c:	010b3b0b 	tsteq	fp, fp, lsl #22
     370:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     374:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     378:	0b3b0b3a 	bleq	ec3068 <startup-0x1f13cf98>
     37c:	0b381349 	bleq	e050a8 <startup-0x1f1faf58>
     380:	0f050000 	svceq	0x00050000
     384:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     388:	06000013 			; <UNDEFINED> instruction: 0x06000013
     38c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     390:	0b3b0b3a 	bleq	ec3080 <startup-0x1f13cf80>
     394:	00001349 	andeq	r1, r0, r9, asr #6
     398:	03011307 	movweq	r1, #4871	; 0x1307
     39c:	3a0b0b0e 	bcc	2c2fdc <startup-0x1fd3d024>
     3a0:	010b3b0b 	tsteq	fp, fp, lsl #22
     3a4:	08000013 	stmdaeq	r0, {r0, r1, r4}
     3a8:	0b0b0024 	bleq	2c0440 <startup-0x1fd3fbc0>
     3ac:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     3b0:	15090000 	strne	r0, [r9, #-0]
     3b4:	01192701 	tsteq	r9, r1, lsl #14
     3b8:	0a000013 	beq	40c <startup-0x1ffffbf4>
     3bc:	13490005 	movtne	r0, #36869	; 0x9005
     3c0:	010b0000 	mrseq	r0, (UNDEF: 11)
     3c4:	01134901 	tsteq	r3, r1, lsl #18
     3c8:	0c000013 	stceq	0, cr0, [r0], {19}
     3cc:	00000021 	andeq	r0, r0, r1, lsr #32
     3d0:	0300340d 	movweq	r3, #1037	; 0x40d
     3d4:	3b0b3a0e 	blcc	2cec14 <startup-0x1fd313ec>
     3d8:	3f13490b 	svccc	0x0013490b
     3dc:	00193c19 	andseq	r3, r9, r9, lsl ip
     3e0:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
     3e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     3e8:	0b3b0b3a 	bleq	ec30d8 <startup-0x1f13cf28>
     3ec:	01111927 	tsteq	r1, r7, lsr #18
     3f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     3f4:	00194296 	mulseq	r9, r6, r2
     3f8:	00050f00 	andeq	r0, r5, r0, lsl #30
     3fc:	0b3a0e03 	bleq	e83c10 <startup-0x1f17c3f0>
     400:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     404:	00001802 	andeq	r1, r0, r2, lsl #16
     408:	03003410 	movweq	r3, #1040	; 0x410
     40c:	3b0b3a0e 	blcc	2cec4c <startup-0x1fd313b4>
     410:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     414:	00000018 	andeq	r0, r0, r8, lsl r0
     418:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     41c:	030b130e 	movweq	r1, #45838	; 0xb30e
     420:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     424:	00171006 	andseq	r1, r7, r6
     428:	01130200 	tsteq	r3, r0, lsl #4
     42c:	0b3a0b0b 	bleq	e83060 <startup-0x1f17cfa0>
     430:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     434:	0d030000 	stceq	0, cr0, [r3, #-0]
     438:	3a0e0300 	bcc	381040 <startup-0x1fc7efc0>
     43c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     440:	000b3813 	andeq	r3, fp, r3, lsl r8
     444:	00240400 	eoreq	r0, r4, r0, lsl #8
     448:	0b3e0b0b 	bleq	f8307c <startup-0x1f07cf84>
     44c:	00000e03 	andeq	r0, r0, r3, lsl #28
     450:	0b000f05 	bleq	406c <startup-0x1fffbf94>
     454:	0013490b 	andseq	r4, r3, fp, lsl #18
     458:	00160600 	andseq	r0, r6, r0, lsl #12
     45c:	0b3a0e03 	bleq	e83c70 <startup-0x1f17c390>
     460:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     464:	13070000 	movwne	r0, #28672	; 0x7000
     468:	0b0e0301 	bleq	381074 <startup-0x1fc7ef8c>
     46c:	3b0b3a0b 	blcc	2ceca0 <startup-0x1fd31360>
     470:	0013010b 	andseq	r0, r3, fp, lsl #2
     474:	00240800 	eoreq	r0, r4, r0, lsl #16
     478:	0b3e0b0b 	bleq	f830ac <startup-0x1f07cf54>
     47c:	00000803 	andeq	r0, r0, r3, lsl #16
     480:	27011509 	strcs	r1, [r1, -r9, lsl #10]
     484:	00130119 	andseq	r0, r3, r9, lsl r1
     488:	00050a00 	andeq	r0, r5, r0, lsl #20
     48c:	00001349 	andeq	r1, r0, r9, asr #6
     490:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
     494:	00130113 	andseq	r0, r3, r3, lsl r1
     498:	00210c00 	eoreq	r0, r1, r0, lsl #24
     49c:	340d0000 	strcc	r0, [sp], #-0
     4a0:	3a0e0300 	bcc	3810a8 <startup-0x1fc7ef58>
     4a4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4a8:	3c193f13 	ldccc	15, cr3, [r9], {19}
     4ac:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
     4b0:	13490021 	movtne	r0, #36897	; 0x9021
     4b4:	00000b2f 	andeq	r0, r0, pc, lsr #22
     4b8:	0300340f 	movweq	r3, #1039	; 0x40f
     4bc:	3b0b3a0e 	blcc	2cecfc <startup-0x1fd31304>
     4c0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     4c4:	10000018 	andne	r0, r0, r8, lsl r0
     4c8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     4cc:	0b3b0b3a 	bleq	ec31bc <startup-0x1f13ce44>
     4d0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     4d4:	00001802 	andeq	r1, r0, r2, lsl #16
     4d8:	3f012e11 	svccc	0x00012e11
     4dc:	3a0e0319 	bcc	381148 <startup-0x1fc7eeb8>
     4e0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     4e4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     4e8:	96184006 	ldrls	r4, [r8], -r6
     4ec:	13011942 	movwne	r1, #6466	; 0x1942
     4f0:	05120000 	ldreq	r0, [r2, #-0]
     4f4:	3a0e0300 	bcc	3810fc <startup-0x1fc7ef04>
     4f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4fc:	00180213 	andseq	r0, r8, r3, lsl r2
     500:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
     504:	0b3a0e03 	bleq	e83d18 <startup-0x1f17c2e8>
     508:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     50c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     510:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     514:	00000019 	andeq	r0, r0, r9, lsl r0
     518:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     51c:	030b130e 	movweq	r1, #45838	; 0xb30e
     520:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     524:	00171006 	andseq	r1, r7, r6
     528:	01130200 	tsteq	r3, r0, lsl #4
     52c:	0b3a0b0b 	bleq	e83160 <startup-0x1f17cea0>
     530:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     534:	0d030000 	stceq	0, cr0, [r3, #-0]
     538:	3a0e0300 	bcc	381140 <startup-0x1fc7eec0>
     53c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     540:	000b3813 	andeq	r3, fp, r3, lsl r8
     544:	00240400 	eoreq	r0, r4, r0, lsl #8
     548:	0b3e0b0b 	bleq	f8317c <startup-0x1f07ce84>
     54c:	00000e03 	andeq	r0, r0, r3, lsl #28
     550:	0b000f05 	bleq	416c <startup-0x1fffbe94>
     554:	0013490b 	andseq	r4, r3, fp, lsl #18
     558:	00160600 	andseq	r0, r6, r0, lsl #12
     55c:	0b3a0e03 	bleq	e83d70 <startup-0x1f17c290>
     560:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     564:	13070000 	movwne	r0, #28672	; 0x7000
     568:	0b0e0301 	bleq	381174 <startup-0x1fc7ee8c>
     56c:	3b0b3a0b 	blcc	2ceda0 <startup-0x1fd31260>
     570:	0013010b 	andseq	r0, r3, fp, lsl #2
     574:	00240800 	eoreq	r0, r4, r0, lsl #16
     578:	0b3e0b0b 	bleq	f831ac <startup-0x1f07ce54>
     57c:	00000803 	andeq	r0, r0, r3, lsl #16
     580:	27011509 	strcs	r1, [r1, -r9, lsl #10]
     584:	00130119 	andseq	r0, r3, r9, lsl r1
     588:	00050a00 	andeq	r0, r5, r0, lsl #20
     58c:	00001349 	andeq	r1, r0, r9, asr #6
     590:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
     594:	00130113 	andseq	r0, r3, r3, lsl r1
     598:	00210c00 	eoreq	r0, r1, r0, lsl #24
     59c:	340d0000 	strcc	r0, [sp], #-0
     5a0:	3a0e0300 	bcc	3811a8 <startup-0x1fc7ee58>
     5a4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     5a8:	3c193f13 	ldccc	15, cr3, [r9], {19}
     5ac:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
     5b0:	13490021 	movtne	r0, #36897	; 0x9021
     5b4:	00000b2f 	andeq	r0, r0, pc, lsr #22
     5b8:	0300340f 	movweq	r3, #1039	; 0x40f
     5bc:	3b0b3a0e 	blcc	2cedfc <startup-0x1fd31204>
     5c0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     5c4:	10000018 	andne	r0, r0, r8, lsl r0
     5c8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     5cc:	0b3b0b3a 	bleq	ec32bc <startup-0x1f13cd44>
     5d0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     5d4:	00001802 	andeq	r1, r0, r2, lsl #16
     5d8:	3f012e11 	svccc	0x00012e11
     5dc:	3a0e0319 	bcc	381248 <startup-0x1fc7edb8>
     5e0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     5e4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     5e8:	96184006 	ldrls	r4, [r8], -r6
     5ec:	13011942 	movwne	r1, #6466	; 0x1942
     5f0:	05120000 	ldreq	r0, [r2, #-0]
     5f4:	3a0e0300 	bcc	3811fc <startup-0x1fc7ee04>
     5f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     5fc:	00180213 	andseq	r0, r8, r3, lsl r2
     600:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
     604:	0b3a0e03 	bleq	e83e18 <startup-0x1f17c1e8>
     608:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     60c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     610:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     614:	00000019 	andeq	r0, r0, r9, lsl r0
     618:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     61c:	030b130e 	movweq	r1, #45838	; 0xb30e
     620:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     624:	00171006 	andseq	r1, r7, r6
     628:	01130200 	tsteq	r3, r0, lsl #4
     62c:	0b3a0b0b 	bleq	e83260 <startup-0x1f17cda0>
     630:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     634:	0d030000 	stceq	0, cr0, [r3, #-0]
     638:	3a0e0300 	bcc	381240 <startup-0x1fc7edc0>
     63c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     640:	000b3813 	andeq	r3, fp, r3, lsl r8
     644:	00240400 	eoreq	r0, r4, r0, lsl #8
     648:	0b3e0b0b 	bleq	f8327c <startup-0x1f07cd84>
     64c:	00000e03 	andeq	r0, r0, r3, lsl #28
     650:	0b000f05 	bleq	426c <startup-0x1fffbd94>
     654:	0013490b 	andseq	r4, r3, fp, lsl #18
     658:	00160600 	andseq	r0, r6, r0, lsl #12
     65c:	0b3a0e03 	bleq	e83e70 <startup-0x1f17c190>
     660:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     664:	13070000 	movwne	r0, #28672	; 0x7000
     668:	0b0e0301 	bleq	381274 <startup-0x1fc7ed8c>
     66c:	3b0b3a0b 	blcc	2ceea0 <startup-0x1fd31160>
     670:	0013010b 	andseq	r0, r3, fp, lsl #2
     674:	00240800 	eoreq	r0, r4, r0, lsl #16
     678:	0b3e0b0b 	bleq	f832ac <startup-0x1f07cd54>
     67c:	00000803 	andeq	r0, r0, r3, lsl #16
     680:	27011509 	strcs	r1, [r1, -r9, lsl #10]
     684:	00130119 	andseq	r0, r3, r9, lsl r1
     688:	00050a00 	andeq	r0, r5, r0, lsl #20
     68c:	00001349 	andeq	r1, r0, r9, asr #6
     690:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
     694:	00130113 	andseq	r0, r3, r3, lsl r1
     698:	00210c00 	eoreq	r0, r1, r0, lsl #24
     69c:	340d0000 	strcc	r0, [sp], #-0
     6a0:	3a0e0300 	bcc	3812a8 <startup-0x1fc7ed58>
     6a4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6a8:	3c193f13 	ldccc	15, cr3, [r9], {19}
     6ac:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
     6b0:	13490021 	movtne	r0, #36897	; 0x9021
     6b4:	00000b2f 	andeq	r0, r0, pc, lsr #22
     6b8:	0300340f 	movweq	r3, #1039	; 0x40f
     6bc:	3b0b3a0e 	blcc	2ceefc <startup-0x1fd31104>
     6c0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     6c4:	10000018 	andne	r0, r0, r8, lsl r0
     6c8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     6cc:	0b3b0b3a 	bleq	ec33bc <startup-0x1f13cc44>
     6d0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     6d4:	00001802 	andeq	r1, r0, r2, lsl #16
     6d8:	3f012e11 	svccc	0x00012e11
     6dc:	3a0e0319 	bcc	381348 <startup-0x1fc7ecb8>
     6e0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     6e4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     6e8:	96184006 	ldrls	r4, [r8], -r6
     6ec:	13011942 	movwne	r1, #6466	; 0x1942
     6f0:	05120000 	ldreq	r0, [r2, #-0]
     6f4:	3a0e0300 	bcc	3812fc <startup-0x1fc7ed04>
     6f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6fc:	00180213 	andseq	r0, r8, r3, lsl r2
     700:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
     704:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     708:	0b3b0b3a 	bleq	ec33f8 <startup-0x1f13cc08>
     70c:	01111927 	tsteq	r1, r7, lsr #18
     710:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     714:	01194297 			; <UNDEFINED> instruction: 0x01194297
     718:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
     71c:	08030005 	stmdaeq	r3, {r0, r2}
     720:	0b3b0b3a 	bleq	ec3410 <startup-0x1f13cbf0>
     724:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     728:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
     72c:	3a0e0301 	bcc	381338 <startup-0x1fc7ecc8>
     730:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     734:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     738:	96184006 	ldrls	r4, [r8], -r6
     73c:	00001942 	andeq	r1, r0, r2, asr #18
     740:	01110100 	tsteq	r1, r0, lsl #2
     744:	0b130e25 	bleq	4c3fe0 <startup-0x1fb3c020>
     748:	01110e03 	tsteq	r1, r3, lsl #28
     74c:	17100612 			; <UNDEFINED> instruction: 0x17100612
     750:	13020000 	movwne	r0, #8192	; 0x2000
     754:	3a0b0b01 	bcc	2c3360 <startup-0x1fd3cca0>
     758:	010b3b0b 	tsteq	fp, fp, lsl #22
     75c:	03000013 	movweq	r0, #19
     760:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     764:	0b3b0b3a 	bleq	ec3454 <startup-0x1f13cbac>
     768:	0b381349 	bleq	e05494 <startup-0x1f1fab6c>
     76c:	24040000 	strcs	r0, [r4], #-0
     770:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     774:	000e030b 	andeq	r0, lr, fp, lsl #6
     778:	000f0500 	andeq	r0, pc, r0, lsl #10
     77c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     780:	16060000 	strne	r0, [r6], -r0
     784:	3a0e0300 	bcc	38138c <startup-0x1fc7ec74>
     788:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     78c:	07000013 	smladeq	r0, r3, r0, r0
     790:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     794:	0b3a0b0b 	bleq	e833c8 <startup-0x1f17cc38>
     798:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     79c:	24080000 	strcs	r0, [r8], #-0
     7a0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     7a4:	0008030b 	andeq	r0, r8, fp, lsl #6
     7a8:	01150900 	tsteq	r5, r0, lsl #18
     7ac:	13011927 	movwne	r1, #6439	; 0x1927
     7b0:	050a0000 	streq	r0, [sl, #-0]
     7b4:	00134900 	andseq	r4, r3, r0, lsl #18
     7b8:	01010b00 	tsteq	r1, r0, lsl #22
     7bc:	13011349 	movwne	r1, #4937	; 0x1349
     7c0:	210c0000 	mrscs	r0, (UNDEF: 12)
     7c4:	0d000000 	stceq	0, cr0, [r0, #-0]
     7c8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     7cc:	0b3b0b3a 	bleq	ec34bc <startup-0x1f13cb44>
     7d0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     7d4:	0000193c 	andeq	r1, r0, ip, lsr r9
     7d8:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
     7dc:	000b2f13 	andeq	r2, fp, r3, lsl pc
     7e0:	00340f00 	eorseq	r0, r4, r0, lsl #30
     7e4:	0b3a0e03 	bleq	e83ff8 <startup-0x1f17c008>
     7e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     7ec:	00001802 	andeq	r1, r0, r2, lsl #16
     7f0:	03003410 	movweq	r3, #1040	; 0x410
     7f4:	3b0b3a0e 	blcc	2cf034 <startup-0x1fd30fcc>
     7f8:	3f13490b 	svccc	0x0013490b
     7fc:	00180219 	andseq	r0, r8, r9, lsl r2
     800:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
     804:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     808:	0b3b0b3a 	bleq	ec34f8 <startup-0x1f13cb08>
     80c:	01111927 	tsteq	r1, r7, lsr #18
     810:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     814:	01194296 			; <UNDEFINED> instruction: 0x01194296
     818:	12000013 	andne	r0, r0, #19
     81c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     820:	0b3b0b3a 	bleq	ec3510 <startup-0x1f13caf0>
     824:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     828:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
     82c:	3a0e0301 	bcc	381438 <startup-0x1fc7ebc8>
     830:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     834:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     838:	96184006 	ldrls	r4, [r8], -r6
     83c:	00001942 	andeq	r1, r0, r2, asr #18
     840:	01110100 	tsteq	r1, r0, lsl #2
     844:	0b130e25 	bleq	4c40e0 <startup-0x1fb3bf20>
     848:	01110e03 	tsteq	r1, r3, lsl #28
     84c:	17100612 			; <UNDEFINED> instruction: 0x17100612
     850:	13020000 	movwne	r0, #8192	; 0x2000
     854:	3a0b0b01 	bcc	2c3460 <startup-0x1fd3cba0>
     858:	010b3b0b 	tsteq	fp, fp, lsl #22
     85c:	03000013 	movweq	r0, #19
     860:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     864:	0b3b0b3a 	bleq	ec3554 <startup-0x1f13caac>
     868:	0b381349 	bleq	e05594 <startup-0x1f1faa6c>
     86c:	24040000 	strcs	r0, [r4], #-0
     870:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     874:	000e030b 	andeq	r0, lr, fp, lsl #6
     878:	000f0500 	andeq	r0, pc, r0, lsl #10
     87c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     880:	16060000 	strne	r0, [r6], -r0
     884:	3a0e0300 	bcc	38148c <startup-0x1fc7eb74>
     888:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     88c:	07000013 	smladeq	r0, r3, r0, r0
     890:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     894:	0b3a0b0b 	bleq	e834c8 <startup-0x1f17cb38>
     898:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     89c:	24080000 	strcs	r0, [r8], #-0
     8a0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     8a4:	0008030b 	andeq	r0, r8, fp, lsl #6
     8a8:	01150900 	tsteq	r5, r0, lsl #18
     8ac:	13011927 	movwne	r1, #6439	; 0x1927
     8b0:	050a0000 	streq	r0, [sl, #-0]
     8b4:	00134900 	andseq	r4, r3, r0, lsl #18
     8b8:	01010b00 	tsteq	r1, r0, lsl #22
     8bc:	13011349 	movwne	r1, #4937	; 0x1349
     8c0:	210c0000 	mrscs	r0, (UNDEF: 12)
     8c4:	0d000000 	stceq	0, cr0, [r0, #-0]
     8c8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     8cc:	0b3b0b3a 	bleq	ec35bc <startup-0x1f13ca44>
     8d0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     8d4:	0000193c 	andeq	r1, r0, ip, lsr r9
     8d8:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
     8dc:	00052f13 	andeq	r2, r5, r3, lsl pc
     8e0:	00340f00 	eorseq	r0, r4, r0, lsl #30
     8e4:	0b3a1347 	bleq	e85608 <startup-0x1f17a9f8>
     8e8:	18020b3b 	stmdane	r2, {r0, r1, r3, r4, r5, r8, r9, fp}
     8ec:	34100000 	ldrcc	r0, [r0], #-0
     8f0:	3a134700 	bcc	4d24f8 <startup-0x1fb2db08>
     8f4:	0018020b 	andseq	r0, r8, fp, lsl #4
     8f8:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
     8fc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     900:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     904:	01111927 	tsteq	r1, r7, lsr #18
     908:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     90c:	01194296 			; <UNDEFINED> instruction: 0x01194296
     910:	12000013 	andne	r0, r0, #19
     914:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     918:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     91c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     920:	34130000 	ldrcc	r0, [r3], #-0
     924:	3a0e0300 	bcc	38152c <startup-0x1fc7ead4>
     928:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     92c:	00180213 	andseq	r0, r8, r3, lsl r2
     930:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
     934:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     938:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     93c:	01111927 	tsteq	r1, r7, lsr #18
     940:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     944:	01194297 			; <UNDEFINED> instruction: 0x01194297
     948:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
     94c:	08030034 	stmdaeq	r3, {r2, r4, r5}
     950:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     954:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     958:	34160000 	ldrcc	r0, [r6], #-0
     95c:	3a080300 	bcc	201564 <startup-0x1fdfea9c>
     960:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     964:	17000013 	smladne	r0, r3, r0, r0
     968:	08030005 	stmdaeq	r3, {r0, r2}
     96c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     970:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     974:	0b180000 	bleq	60097c <startup-0x1f9ff684>
     978:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     97c:	19000006 	stmdbne	r0, {r1, r2}
     980:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     984:	0b3a0e03 	bleq	e84198 <startup-0x1f17be68>
     988:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     98c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     990:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     994:	00130119 	andseq	r0, r3, r9, lsl r1
     998:	00051a00 	andeq	r1, r5, r0, lsl #20
     99c:	0b3a0803 	bleq	e829b0 <startup-0x1f17d650>
     9a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     9a4:	00001802 	andeq	r1, r0, r2, lsl #16
     9a8:	0300051b 	movweq	r0, #1307	; 0x51b
     9ac:	3b0b3a0e 	blcc	2cf1ec <startup-0x1fd30e14>
     9b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     9b4:	1c000018 	stcne	0, cr0, [r0], {24}
     9b8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     9bc:	0b3b0b3a 	bleq	ec36ac <startup-0x1f13c954>
     9c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     9c4:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
     9c8:	03193f01 	tsteq	r9, #1, 30
     9cc:	3b0b3a0e 	blcc	2cf20c <startup-0x1fd30df4>
     9d0:	1119270b 	tstne	r9, fp, lsl #14
     9d4:	40061201 	andmi	r1, r6, r1, lsl #4
     9d8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     9dc:	00001301 	andeq	r1, r0, r1, lsl #6
     9e0:	0300341e 	movweq	r3, #1054	; 0x41e
     9e4:	3b0b3a08 	blcc	2cf20c <startup-0x1fd30df4>
     9e8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     9ec:	1f000018 	svcne	0x00000018
     9f0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     9f4:	0b3a0e03 	bleq	e84208 <startup-0x1f17bdf8>
     9f8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     9fc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     a00:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     a04:	20000019 	andcs	r0, r0, r9, lsl r0
     a08:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     a0c:	0b3a0e03 	bleq	e84220 <startup-0x1f17bde0>
     a10:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     a14:	01111349 	tsteq	r1, r9, asr #6
     a18:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a1c:	01194296 			; <UNDEFINED> instruction: 0x01194296
     a20:	21000013 	tstcs	r0, r3, lsl r0
     a24:	0e03012e 	adfeqsp	f0, f3, #0.5
     a28:	0b3b0b3a 	bleq	ec3718 <startup-0x1f13c8e8>
     a2c:	13491927 	movtne	r1, #39207	; 0x9927
     a30:	06120111 			; <UNDEFINED> instruction: 0x06120111
     a34:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     a38:	00130119 	andseq	r0, r3, r9, lsl r1
     a3c:	012e2200 			; <UNDEFINED> instruction: 0x012e2200
     a40:	0b3a0e03 	bleq	e84254 <startup-0x1f17bdac>
     a44:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     a48:	06120111 			; <UNDEFINED> instruction: 0x06120111
     a4c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     a50:	00130119 	andseq	r0, r3, r9, lsl r1
     a54:	002e2300 	eoreq	r2, lr, r0, lsl #6
     a58:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     a5c:	0b3b0b3a 	bleq	ec374c <startup-0x1f13c8b4>
     a60:	01111927 	tsteq	r1, r7, lsr #18
     a64:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a68:	00194297 	mulseq	r9, r7, r2
     a6c:	11010000 	mrsne	r0, (UNDEF: 1)
     a70:	130e2501 	movwne	r2, #58625	; 0xe501
     a74:	110e030b 	tstne	lr, fp, lsl #6
     a78:	10061201 	andne	r1, r6, r1, lsl #4
     a7c:	02000017 	andeq	r0, r0, #23
     a80:	0b0b0113 	bleq	2c0ed4 <startup-0x1fd3f12c>
     a84:	0b3b0b3a 	bleq	ec3774 <startup-0x1f13c88c>
     a88:	00001301 	andeq	r1, r0, r1, lsl #6
     a8c:	03000d03 	movweq	r0, #3331	; 0xd03
     a90:	3b0b3a0e 	blcc	2cf2d0 <startup-0x1fd30d30>
     a94:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     a98:	0400000b 	streq	r0, [r0], #-11
     a9c:	0b0b0024 	bleq	2c0b34 <startup-0x1fd3f4cc>
     aa0:	0e030b3e 	vmoveq.16	d3[0], r0
     aa4:	0f050000 	svceq	0x00050000
     aa8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     aac:	06000013 			; <UNDEFINED> instruction: 0x06000013
     ab0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     ab4:	0b3b0b3a 	bleq	ec37a4 <startup-0x1f13c85c>
     ab8:	00001349 	andeq	r1, r0, r9, asr #6
     abc:	03011307 	movweq	r1, #4871	; 0x1307
     ac0:	3a0b0b0e 	bcc	2c3700 <startup-0x1fd3c900>
     ac4:	010b3b0b 	tsteq	fp, fp, lsl #22
     ac8:	08000013 	stmdaeq	r0, {r0, r1, r4}
     acc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     ad0:	0b3a0e03 	bleq	e842e4 <startup-0x1f17bd1c>
     ad4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     ad8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     adc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     ae0:	00130119 	andseq	r0, r3, r9, lsl r1
     ae4:	00050900 	andeq	r0, r5, r0, lsl #18
     ae8:	0b3a0e03 	bleq	e842fc <startup-0x1f17bd04>
     aec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     af0:	00001802 	andeq	r1, r0, r2, lsl #16
     af4:	01110100 	tsteq	r1, r0, lsl #2
     af8:	0b130e25 	bleq	4c4394 <startup-0x1fb3bc6c>
     afc:	01110e03 	tsteq	r1, r3, lsl #28
     b00:	17100612 			; <UNDEFINED> instruction: 0x17100612
     b04:	13020000 	movwne	r0, #8192	; 0x2000
     b08:	3a0b0b01 	bcc	2c3714 <startup-0x1fd3c8ec>
     b0c:	010b3b0b 	tsteq	fp, fp, lsl #22
     b10:	03000013 	movweq	r0, #19
     b14:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     b18:	0b3b0b3a 	bleq	ec3808 <startup-0x1f13c7f8>
     b1c:	0b381349 	bleq	e05848 <startup-0x1f1fa7b8>
     b20:	24040000 	strcs	r0, [r4], #-0
     b24:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     b28:	000e030b 	andeq	r0, lr, fp, lsl #6
     b2c:	000f0500 	andeq	r0, pc, r0, lsl #10
     b30:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     b34:	16060000 	strne	r0, [r6], -r0
     b38:	3a0e0300 	bcc	381740 <startup-0x1fc7e8c0>
     b3c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b40:	07000013 	smladeq	r0, r3, r0, r0
     b44:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     b48:	0b3a0e03 	bleq	e8435c <startup-0x1f17bca4>
     b4c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     b50:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b54:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     b58:	00130119 	andseq	r0, r3, r9, lsl r1
     b5c:	00050800 	andeq	r0, r5, r0, lsl #16
     b60:	0b3a0803 	bleq	e82b74 <startup-0x1f17d48c>
     b64:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     b68:	00001802 	andeq	r1, r0, r2, lsl #16
     b6c:	03000509 	movweq	r0, #1289	; 0x509
     b70:	3b0b3a0e 	blcc	2cf3b0 <startup-0x1fd30c50>
     b74:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     b78:	0a000018 	beq	be0 <startup-0x1ffff420>
     b7c:	0b0b0024 	bleq	2c0c14 <startup-0x1fd3f3ec>
     b80:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     b84:	01000000 	mrseq	r0, (UNDEF: 0)
     b88:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     b8c:	0e030b13 	vmoveq.32	d3[0], r0
     b90:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b94:	00001710 	andeq	r1, r0, r0, lsl r7
     b98:	0b011302 	bleq	457a8 <startup-0x1ffba858>
     b9c:	3b0b3a0b 	blcc	2cf3d0 <startup-0x1fd30c30>
     ba0:	0013010b 	andseq	r0, r3, fp, lsl #2
     ba4:	000d0300 	andeq	r0, sp, r0, lsl #6
     ba8:	0b3a0e03 	bleq	e843bc <startup-0x1f17bc44>
     bac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     bb0:	00000b38 	andeq	r0, r0, r8, lsr fp
     bb4:	0b002404 	bleq	9bcc <startup-0x1fff6434>
     bb8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     bbc:	0500000e 	streq	r0, [r0, #-14]
     bc0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     bc4:	0b3b0b3a 	bleq	ec38b4 <startup-0x1f13c74c>
     bc8:	00001349 	andeq	r1, r0, r9, asr #6
     bcc:	3f012e06 	svccc	0x00012e06
     bd0:	3a0e0319 	bcc	38183c <startup-0x1fc7e7c4>
     bd4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     bd8:	11134919 	tstne	r3, r9, lsl r9
     bdc:	40061201 	andmi	r1, r6, r1, lsl #4
     be0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     be4:	00001301 	andeq	r1, r0, r1, lsl #6
     be8:	03000507 	movweq	r0, #1287	; 0x507
     bec:	3b0b3a08 	blcc	2cf414 <startup-0x1fd30bec>
     bf0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     bf4:	08000018 	stmdaeq	r0, {r3, r4}
     bf8:	08030034 	stmdaeq	r3, {r2, r4, r5}
     bfc:	0b3b0b3a 	bleq	ec38ec <startup-0x1f13c714>
     c00:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     c04:	24090000 	strcs	r0, [r9], #-0
     c08:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     c0c:	0008030b 	andeq	r0, r8, fp, lsl #6
     c10:	002e0a00 	eoreq	r0, lr, r0, lsl #20
     c14:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     c18:	0b3b0b3a 	bleq	ec3908 <startup-0x1f13c6f8>
     c1c:	13491927 	movtne	r1, #39207	; 0x9927
     c20:	06120111 			; <UNDEFINED> instruction: 0x06120111
     c24:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     c28:	0b000019 	bleq	c94 <startup-0x1ffff36c>
     c2c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     c30:	0b3a0e03 	bleq	e84444 <startup-0x1f17bbbc>
     c34:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     c38:	06120111 			; <UNDEFINED> instruction: 0x06120111
     c3c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     c40:	00000019 	andeq	r0, r0, r9, lsl r0
     c44:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     c48:	030b130e 	movweq	r1, #45838	; 0xb30e
     c4c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     c50:	00171006 	andseq	r1, r7, r6
     c54:	01130200 	tsteq	r3, r0, lsl #4
     c58:	0b3a0b0b 	bleq	e8388c <startup-0x1f17c774>
     c5c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     c60:	0d030000 	stceq	0, cr0, [r3, #-0]
     c64:	3a0e0300 	bcc	38186c <startup-0x1fc7e794>
     c68:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c6c:	000b3813 	andeq	r3, fp, r3, lsl r8
     c70:	00240400 	eoreq	r0, r4, r0, lsl #8
     c74:	0b3e0b0b 	bleq	f838a8 <startup-0x1f07c758>
     c78:	00000e03 	andeq	r0, r0, r3, lsl #28
     c7c:	0b000f05 	bleq	4898 <startup-0x1fffb768>
     c80:	0013490b 	andseq	r4, r3, fp, lsl #18
     c84:	00160600 	andseq	r0, r6, r0, lsl #12
     c88:	0b3a0e03 	bleq	e8449c <startup-0x1f17bb64>
     c8c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     c90:	13070000 	movwne	r0, #28672	; 0x7000
     c94:	0b0e0301 	bleq	3818a0 <startup-0x1fc7e760>
     c98:	3b0b3a0b 	blcc	2cf4cc <startup-0x1fd30b34>
     c9c:	0013010b 	andseq	r0, r3, fp, lsl #2
     ca0:	00240800 	eoreq	r0, r4, r0, lsl #16
     ca4:	0b3e0b0b 	bleq	f838d8 <startup-0x1f07c728>
     ca8:	00000803 	andeq	r0, r0, r3, lsl #16
     cac:	27011509 	strcs	r1, [r1, -r9, lsl #10]
     cb0:	00130119 	andseq	r0, r3, r9, lsl r1
     cb4:	00050a00 	andeq	r0, r5, r0, lsl #20
     cb8:	00001349 	andeq	r1, r0, r9, asr #6
     cbc:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
     cc0:	00130113 	andseq	r0, r3, r3, lsl r1
     cc4:	00210c00 	eoreq	r0, r1, r0, lsl #24
     cc8:	340d0000 	strcc	r0, [sp], #-0
     ccc:	3a0e0300 	bcc	3818d4 <startup-0x1fc7e72c>
     cd0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     cd4:	3c193f13 	ldccc	15, cr3, [r9], {19}
     cd8:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
     cdc:	13490021 	movtne	r0, #36897	; 0x9021
     ce0:	0000052f 	andeq	r0, r0, pc, lsr #10
     ce4:	3f012e0f 	svccc	0x00012e0f
     ce8:	3a0e0319 	bcc	381954 <startup-0x1fc7e6ac>
     cec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     cf0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     cf4:	96184006 	ldrls	r4, [r8], -r6
     cf8:	13011942 	movwne	r1, #6466	; 0x1942
     cfc:	34100000 	ldrcc	r0, [r0], #-0
     d00:	3a080300 	bcc	201908 <startup-0x1fdfe6f8>
     d04:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d08:	00180213 	andseq	r0, r8, r3, lsl r2
     d0c:	00341100 	eorseq	r1, r4, r0, lsl #2
     d10:	0b3a0e03 	bleq	e84524 <startup-0x1f17badc>
     d14:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     d18:	00001802 	andeq	r1, r0, r2, lsl #16
     d1c:	49002112 	stmdbmi	r0, {r1, r4, r8, sp}
     d20:	000b2f13 	andeq	r2, fp, r3, lsl pc
     d24:	00051300 	andeq	r1, r5, r0, lsl #6
     d28:	0b3a0e03 	bleq	e8453c <startup-0x1f17bac4>
     d2c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     d30:	00001802 	andeq	r1, r0, r2, lsl #16
     d34:	3f002e14 	svccc	0x00002e14
     d38:	3a0e0319 	bcc	3819a4 <startup-0x1fc7e65c>
     d3c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     d40:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     d44:	96184006 	ldrls	r4, [r8], -r6
     d48:	00001942 	andeq	r1, r0, r2, asr #18
     d4c:	3f002e15 	svccc	0x00002e15
     d50:	3a0e0319 	bcc	3819bc <startup-0x1fc7e644>
     d54:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     d58:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     d5c:	97184006 	ldrls	r4, [r8, -r6]
     d60:	00001942 	andeq	r1, r0, r2, asr #18
     d64:	03000516 	movweq	r0, #1302	; 0x516
     d68:	3b0b3a08 	blcc	2cf590 <startup-0x1fd30a70>
     d6c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     d70:	17000018 	smladne	r0, r8, r0, r0
     d74:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     d78:	0b3a0e03 	bleq	e8458c <startup-0x1f17ba74>
     d7c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     d80:	01111349 	tsteq	r1, r9, asr #6
     d84:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     d88:	01194296 			; <UNDEFINED> instruction: 0x01194296
     d8c:	18000013 	stmdane	r0, {r0, r1, r4}
     d90:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     d94:	0b3a0e03 	bleq	e845a8 <startup-0x1f17ba58>
     d98:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     d9c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     da0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     da4:	00130119 	andseq	r0, r3, r9, lsl r1
     da8:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
     dac:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     db0:	0b3b0b3a 	bleq	ec3aa0 <startup-0x1f13c560>
     db4:	01111927 	tsteq	r1, r7, lsr #18
     db8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     dbc:	00194297 	mulseq	r9, r7, r2
     dc0:	11010000 	mrsne	r0, (UNDEF: 1)
     dc4:	130e2501 	movwne	r2, #58625	; 0xe501
     dc8:	110e030b 	tstne	lr, fp, lsl #6
     dcc:	10061201 	andne	r1, r6, r1, lsl #4
     dd0:	02000017 	andeq	r0, r0, #23
     dd4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     dd8:	0b3a0b0b 	bleq	e83a0c <startup-0x1f17c5f4>
     ddc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     de0:	0d030000 	stceq	0, cr0, [r3, #-0]
     de4:	3a0e0300 	bcc	3819ec <startup-0x1fc7e614>
     de8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     dec:	000b3813 	andeq	r3, fp, r3, lsl r8
     df0:	000f0400 	andeq	r0, pc, r0, lsl #8
     df4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     df8:	24050000 	strcs	r0, [r5], #-0
     dfc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     e00:	000e030b 	andeq	r0, lr, fp, lsl #6
     e04:	00240600 	eoreq	r0, r4, r0, lsl #12
     e08:	0b3e0b0b 	bleq	f83a3c <startup-0x1f07c5c4>
     e0c:	00000803 	andeq	r0, r0, r3, lsl #16
     e10:	27011507 	strcs	r1, [r1, -r7, lsl #10]
     e14:	00130119 	andseq	r0, r3, r9, lsl r1
     e18:	00050800 	andeq	r0, r5, r0, lsl #16
     e1c:	00001349 	andeq	r1, r0, r9, asr #6
     e20:	03001609 	movweq	r1, #1545	; 0x609
     e24:	3b0b3a0e 	blcc	2cf664 <startup-0x1fd3099c>
     e28:	0013490b 	andseq	r4, r3, fp, lsl #18
     e2c:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
     e30:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     e34:	0b3b0b3a 	bleq	ec3b24 <startup-0x1f13c4dc>
     e38:	01111927 	tsteq	r1, r7, lsr #18
     e3c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     e40:	01194297 			; <UNDEFINED> instruction: 0x01194297
     e44:	0b000013 	bleq	e98 <startup-0x1ffff168>
     e48:	08030005 	stmdaeq	r3, {r0, r2}
     e4c:	0b3b0b3a 	bleq	ec3b3c <startup-0x1f13c4c4>
     e50:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     e54:	050c0000 	streq	r0, [ip, #-0]
     e58:	3a0e0300 	bcc	381a60 <startup-0x1fc7e5a0>
     e5c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e60:	00180213 	andseq	r0, r8, r3, lsl r2
     e64:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
     e68:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     e6c:	0b3b0b3a 	bleq	ec3b5c <startup-0x1f13c4a4>
     e70:	01111927 	tsteq	r1, r7, lsr #18
     e74:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     e78:	00194296 	mulseq	r9, r6, r2
     e7c:	00340e00 	eorseq	r0, r4, r0, lsl #28
     e80:	0b3a0e03 	bleq	e84694 <startup-0x1f17b96c>
     e84:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e88:	00001802 	andeq	r1, r0, r2, lsl #16
     e8c:	01110100 	tsteq	r1, r0, lsl #2
     e90:	0b130e25 	bleq	4c472c <startup-0x1fb3b8d4>
     e94:	01110e03 	tsteq	r1, r3, lsl #28
     e98:	17100612 			; <UNDEFINED> instruction: 0x17100612
     e9c:	13020000 	movwne	r0, #8192	; 0x2000
     ea0:	3a0b0b01 	bcc	2c3aac <startup-0x1fd3c554>
     ea4:	010b3b0b 	tsteq	fp, fp, lsl #22
     ea8:	03000013 	movweq	r0, #19
     eac:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     eb0:	0b3b0b3a 	bleq	ec3ba0 <startup-0x1f13c460>
     eb4:	0b381349 	bleq	e05be0 <startup-0x1f1fa420>
     eb8:	24040000 	strcs	r0, [r4], #-0
     ebc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     ec0:	000e030b 	andeq	r0, lr, fp, lsl #6
     ec4:	000f0500 	andeq	r0, pc, r0, lsl #10
     ec8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     ecc:	16060000 	strne	r0, [r6], -r0
     ed0:	3a0e0300 	bcc	381ad8 <startup-0x1fc7e528>
     ed4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ed8:	07000013 	smladeq	r0, r3, r0, r0
     edc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     ee0:	0b3a0b0b 	bleq	e83b14 <startup-0x1f17c4ec>
     ee4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     ee8:	24080000 	strcs	r0, [r8], #-0
     eec:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     ef0:	0008030b 	andeq	r0, r8, fp, lsl #6
     ef4:	01150900 	tsteq	r5, r0, lsl #18
     ef8:	13011927 	movwne	r1, #6439	; 0x1927
     efc:	050a0000 	streq	r0, [sl, #-0]
     f00:	00134900 	andseq	r4, r3, r0, lsl #18
     f04:	01010b00 	tsteq	r1, r0, lsl #22
     f08:	13011349 	movwne	r1, #4937	; 0x1349
     f0c:	210c0000 	mrscs	r0, (UNDEF: 12)
     f10:	0d000000 	stceq	0, cr0, [r0, #-0]
     f14:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     f18:	0b3b0b3a 	bleq	ec3c08 <startup-0x1f13c3f8>
     f1c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     f20:	0000193c 	andeq	r1, r0, ip, lsr r9
     f24:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
     f28:	00052f13 	andeq	r2, r5, r3, lsl pc
     f2c:	00340f00 	eorseq	r0, r4, r0, lsl #30
     f30:	0b3a0e03 	bleq	e84744 <startup-0x1f17b8bc>
     f34:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f38:	00001802 	andeq	r1, r0, r2, lsl #16
     f3c:	03003410 	movweq	r3, #1040	; 0x410
     f40:	3b0b3a0e 	blcc	2cf780 <startup-0x1fd30880>
     f44:	3f13490b 	svccc	0x0013490b
     f48:	00180219 	andseq	r0, r8, r9, lsl r2
     f4c:	00211100 	eoreq	r1, r1, r0, lsl #2
     f50:	0b2f1349 	bleq	bc5c7c <startup-0x1f43a384>
     f54:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
     f58:	03193f01 	tsteq	r9, #1, 30
     f5c:	3b0b3a0e 	blcc	2cf79c <startup-0x1fd30864>
     f60:	1119270b 	tstne	r9, fp, lsl #14
     f64:	40061201 	andmi	r1, r6, r1, lsl #4
     f68:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     f6c:	00001301 	andeq	r1, r0, r1, lsl #6
     f70:	03000513 	movweq	r0, #1299	; 0x513
     f74:	3b0b3a0e 	blcc	2cf7b4 <startup-0x1fd3084c>
     f78:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     f7c:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
     f80:	0e03012e 	adfeqsp	f0, f3, #0.5
     f84:	0b3b0b3a 	bleq	ec3c74 <startup-0x1f13c38c>
     f88:	01111927 	tsteq	r1, r7, lsr #18
     f8c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     f90:	00194296 	mulseq	r9, r6, r2
     f94:	11010000 	mrsne	r0, (UNDEF: 1)
     f98:	130e2501 	movwne	r2, #58625	; 0xe501
     f9c:	110e030b 	tstne	lr, fp, lsl #6
     fa0:	10061201 	andne	r1, r6, r1, lsl #4
     fa4:	02000017 	andeq	r0, r0, #23
     fa8:	0b0b0113 	bleq	2c13fc <startup-0x1fd3ec04>
     fac:	0b3b0b3a 	bleq	ec3c9c <startup-0x1f13c364>
     fb0:	00001301 	andeq	r1, r0, r1, lsl #6
     fb4:	03000d03 	movweq	r0, #3331	; 0xd03
     fb8:	3b0b3a0e 	blcc	2cf7f8 <startup-0x1fd30808>
     fbc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     fc0:	0400000b 	streq	r0, [r0], #-11
     fc4:	0b0b0024 	bleq	2c105c <startup-0x1fd3efa4>
     fc8:	0e030b3e 	vmoveq.16	d3[0], r0
     fcc:	0f050000 	svceq	0x00050000
     fd0:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     fd4:	06000013 			; <UNDEFINED> instruction: 0x06000013
     fd8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     fdc:	0b3b0b3a 	bleq	ec3ccc <startup-0x1f13c334>
     fe0:	00001349 	andeq	r1, r0, r9, asr #6
     fe4:	03011307 	movweq	r1, #4871	; 0x1307
     fe8:	3a0b0b0e 	bcc	2c3c28 <startup-0x1fd3c3d8>
     fec:	010b3b0b 	tsteq	fp, fp, lsl #22
     ff0:	08000013 	stmdaeq	r0, {r0, r1, r4}
     ff4:	0b0b0024 	bleq	2c108c <startup-0x1fd3ef74>
     ff8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     ffc:	15090000 	strne	r0, [r9, #-0]
    1000:	01192701 	tsteq	r9, r1, lsl #14
    1004:	0a000013 	beq	1058 <startup-0x1fffefa8>
    1008:	13490005 	movtne	r0, #36869	; 0x9005
    100c:	010b0000 	mrseq	r0, (UNDEF: 11)
    1010:	01134901 	tsteq	r3, r1, lsl #18
    1014:	0c000013 	stceq	0, cr0, [r0], {19}
    1018:	00000021 	andeq	r0, r0, r1, lsr #32
    101c:	0300340d 	movweq	r3, #1037	; 0x40d
    1020:	3b0b3a0e 	blcc	2cf860 <startup-0x1fd307a0>
    1024:	3f13490b 	svccc	0x0013490b
    1028:	00193c19 	andseq	r3, r9, r9, lsl ip
    102c:	00210e00 	eoreq	r0, r1, r0, lsl #28
    1030:	052f1349 	streq	r1, [pc, #-841]!	; cef <startup-0x1ffff311>
    1034:	340f0000 	strcc	r0, [pc], #-0	; 103c <startup-0x1fffefc4>
    1038:	3a0e0300 	bcc	381c40 <startup-0x1fc7e3c0>
    103c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1040:	00180213 	andseq	r0, r8, r3, lsl r2
    1044:	00341000 	eorseq	r1, r4, r0
    1048:	0b3a0e03 	bleq	e8485c <startup-0x1f17b7a4>
    104c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1050:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1054:	21110000 	tstcs	r1, r0
    1058:	2f134900 	svccs	0x00134900
    105c:	1200000b 	andne	r0, r0, #11
    1060:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1064:	0b3a0e03 	bleq	e84878 <startup-0x1f17b788>
    1068:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    106c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1070:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1074:	00130119 	andseq	r0, r3, r9, lsl r1
    1078:	00051300 	andeq	r1, r5, r0, lsl #6
    107c:	0b3a0e03 	bleq	e84890 <startup-0x1f17b770>
    1080:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1084:	00001802 	andeq	r1, r0, r2, lsl #16
    1088:	03012e14 	movweq	r2, #7700	; 0x1e14
    108c:	3b0b3a0e 	blcc	2cf8cc <startup-0x1fd30734>
    1090:	1119270b 	tstne	r9, fp, lsl #14
    1094:	40061201 	andmi	r1, r6, r1, lsl #4
    1098:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    109c:	01000000 	mrseq	r0, (UNDEF: 0)
    10a0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    10a4:	0e030b13 	vmoveq.32	d3[0], r0
    10a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    10ac:	00001710 	andeq	r1, r0, r0, lsl r7
    10b0:	0b011302 	bleq	45cc0 <startup-0x1ffba340>
    10b4:	3b0b3a0b 	blcc	2cf8e8 <startup-0x1fd30718>
    10b8:	0013010b 	andseq	r0, r3, fp, lsl #2
    10bc:	000d0300 	andeq	r0, sp, r0, lsl #6
    10c0:	0b3a0e03 	bleq	e848d4 <startup-0x1f17b72c>
    10c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    10c8:	00000b38 	andeq	r0, r0, r8, lsr fp
    10cc:	0b002404 	bleq	a0e4 <startup-0x1fff5f1c>
    10d0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    10d4:	0500000e 	streq	r0, [r0, #-14]
    10d8:	0b0b000f 	bleq	2c111c <startup-0x1fd3eee4>
    10dc:	00001349 	andeq	r1, r0, r9, asr #6
    10e0:	03001606 	movweq	r1, #1542	; 0x606
    10e4:	3b0b3a0e 	blcc	2cf924 <startup-0x1fd306dc>
    10e8:	0013490b 	andseq	r4, r3, fp, lsl #18
    10ec:	01130700 	tsteq	r3, r0, lsl #14
    10f0:	0b0b0e03 	bleq	2c4904 <startup-0x1fd3b6fc>
    10f4:	0b3b0b3a 	bleq	ec3de4 <startup-0x1f13c21c>
    10f8:	00001301 	andeq	r1, r0, r1, lsl #6
    10fc:	0b002408 	bleq	a124 <startup-0x1fff5edc>
    1100:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1104:	09000008 	stmdbeq	r0, {r3}
    1108:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    110c:	00001301 	andeq	r1, r0, r1, lsl #6
    1110:	4900050a 	stmdbmi	r0, {r1, r3, r8, sl}
    1114:	0b000013 	bleq	1168 <startup-0x1fffee98>
    1118:	13490101 	movtne	r0, #37121	; 0x9101
    111c:	00001301 	andeq	r1, r0, r1, lsl #6
    1120:	0000210c 	andeq	r2, r0, ip, lsl #2
    1124:	00340d00 	eorseq	r0, r4, r0, lsl #26
    1128:	0b3a0e03 	bleq	e8493c <startup-0x1f17b6c4>
    112c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1130:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1134:	210e0000 	mrscs	r0, (UNDEF: 14)
    1138:	2f134900 	svccs	0x00134900
    113c:	0f00000b 	svceq	0x0000000b
    1140:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1144:	0b3b0b3a 	bleq	ec3e34 <startup-0x1f13c1cc>
    1148:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    114c:	34100000 	ldrcc	r0, [r0], #-0
    1150:	3a0e0300 	bcc	381d58 <startup-0x1fc7e2a8>
    1154:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1158:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    115c:	11000018 	tstne	r0, r8, lsl r0
    1160:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1164:	0b3a0e03 	bleq	e84978 <startup-0x1f17b688>
    1168:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    116c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1170:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1174:	00130119 	andseq	r0, r3, r9, lsl r1
    1178:	00051200 	andeq	r1, r5, r0, lsl #4
    117c:	0b3a0e03 	bleq	e84990 <startup-0x1f17b670>
    1180:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1184:	00001802 	andeq	r1, r0, r2, lsl #16
    1188:	03012e13 	movweq	r2, #7699	; 0x1e13
    118c:	3b0b3a0e 	blcc	2cf9cc <startup-0x1fd30634>
    1190:	1119270b 	tstne	r9, fp, lsl #14
    1194:	40061201 	andmi	r1, r6, r1, lsl #4
    1198:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    119c:	Address 0x0000119c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000113c 	andeq	r1, r0, ip, lsr r1
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	09740002 	ldmdbeq	r4!, {r1}^
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	2000114c 	andcs	r1, r0, ip, asr #2
  3c:	00000056 	andeq	r0, r0, r6, asr r0
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	0b580002 	bleq	160005c <startup-0x1e9fffa4>
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200011a4 	andcs	r1, r0, r4, lsr #3
  5c:	000002a8 	andeq	r0, r0, r8, lsr #5
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	10870002 	addne	r0, r7, r2
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	2000144c 	andcs	r1, r0, ip, asr #8
  7c:	000001d4 	ldrdeq	r0, [r0], -r4
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	12820002 	addne	r0, r2, #2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20001620 	andcs	r1, r0, r0, lsr #12
  9c:	00000364 	andeq	r0, r0, r4, ror #6
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	18c70002 	stmiane	r7, {r1}^
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20001984 	andcs	r1, r0, r4, lsl #19
  bc:	00000238 	andeq	r0, r0, r8, lsr r2
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	1d630002 	stclne	0, cr0, [r3, #-8]!
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	20001bbc 			; <UNDEFINED> instruction: 0x20001bbc
  dc:	00000328 	andeq	r0, r0, r8, lsr #6
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	229c0002 	addscs	r0, ip, #2
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	20001ee4 	andcs	r1, r0, r4, ror #29
  fc:	000002ac 	andeq	r0, r0, ip, lsr #5
	...
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	27fb0002 	ldrbcs	r0, [fp, r2]!
 110:	00040000 	andeq	r0, r4, r0
 114:	00000000 	andeq	r0, r0, r0
 118:	20002190 	mulcs	r0, r0, r1
 11c:	00000e44 	andeq	r0, r0, r4, asr #28
	...
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	309e0002 	addscc	r0, lr, r2
 130:	00040000 	andeq	r0, r4, r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20002fd4 	ldrdcs	r2, [r0], -r4
 13c:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	31a20002 			; <UNDEFINED> instruction: 0x31a20002
 150:	00040000 	andeq	r0, r4, r0
 154:	00000000 	andeq	r0, r0, r0
 158:	20002ffc 	strdcs	r2, [r0], -ip
 15c:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
 16c:	32690002 	rsbcc	r0, r9, #2
 170:	00040000 	andeq	r0, r4, r0
 174:	00000000 	andeq	r0, r0, r0
 178:	20003024 	andcs	r3, r0, r4, lsr #32
 17c:	0000006c 	andeq	r0, r0, ip, rrx
	...
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	33a20002 			; <UNDEFINED> instruction: 0x33a20002
 190:	00040000 	andeq	r0, r4, r0
 194:	00000000 	andeq	r0, r0, r0
 198:	20003090 	mulcs	r0, r0, r0
 19c:	00000520 	andeq	r0, r0, r0, lsr #10
	...
 1a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ac:	38930002 	ldmcc	r3, {r1}
 1b0:	00040000 	andeq	r0, r4, r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	200035b0 			; <UNDEFINED> instruction: 0x200035b0
 1bc:	00000094 	muleq	r0, r4, r0
	...
 1c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1cc:	39d70002 	ldmibcc	r7, {r1}^
 1d0:	00040000 	andeq	r0, r4, r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	20003644 	andcs	r3, r0, r4, asr #12
 1dc:	000000e8 	andeq	r0, r0, r8, ror #1
	...
 1e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ec:	3cbb0002 	ldccc	0, cr0, [fp], #8
 1f0:	00040000 	andeq	r0, r4, r0
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	2000372c 	andcs	r3, r0, ip, lsr #14
 1fc:	000000e8 	andeq	r0, r0, r8, ror #1
	...
 208:	0000001c 	andeq	r0, r0, ip, lsl r0
 20c:	3f9f0002 	svccc	0x009f0002
 210:	00040000 	andeq	r0, r4, r0
 214:	00000000 	andeq	r0, r0, r0
 218:	20003814 	andcs	r3, r0, r4, lsl r8
 21c:	000000e8 	andeq	r0, r0, r8, ror #1
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	2000114c 	andcs	r1, r0, ip, asr #2
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000302 	andeq	r0, r0, r2, lsl #6
       4:	017d0002 	cmneq	sp, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	43010000 	movwmi	r0, #4096	; 0x1000
      1c:	6f6d2f3a 	svcvs	0x006d2f3a
      20:	2f632f70 	svccs	0x00632f70
      24:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
      28:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
      2c:	6f697461 	svcvs	0x00697461
      30:	2f72656e 	svccs	0x0072656e
      34:	73504944 	cmpvc	r0, #68, 18	; 0x110000
      38:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
      3c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
      40:	74730000 	ldrbtvc	r0, [r3], #-0
      44:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
      48:	00632e70 	rsbeq	r2, r3, r0, ror lr
      4c:	73000001 	movwvc	r0, #1
      50:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
      54:	00682e65 	rsbeq	r2, r8, r5, ror #28
      58:	69000001 	stmdbvs	r0, {r0}
      5c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
      60:	0100682e 	tsteq	r0, lr, lsr #16
      64:	61670000 	cmnvs	r7, r0
      68:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
      6c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
      70:	0100682e 	tsteq	r0, lr, lsr #16
      74:	72670000 	rsbvc	r0, r7, #0
      78:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
      7c:	682e7363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, ip, sp, lr}
      80:	00000100 	andeq	r0, r0, r0, lsl #2
      84:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
      88:	5f726574 	svcpl	0x00726574
      8c:	63616c62 	cmnvs	r1, #25088	; 0x6200
      90:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
      94:	0001006d 	andeq	r0, r1, sp, rrx
      98:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
      9c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
      a0:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
      a4:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
      a8:	01006d62 	tsteq	r0, r2, ror #26
      ac:	6f6d0000 	svcvs	0x006d0000
      b0:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
      b4:	72675f72 	rsbvc	r5, r7, #456	; 0x1c8
      b8:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
      bc:	01006d62 	tsteq	r0, r2, ror #26
      c0:	72700000 	rsbsvc	r0, r0, #0
      c4:	5f737365 	svcpl	0x00737365
      c8:	63616c62 	cmnvs	r1, #25088	; 0x6200
      cc:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
      d0:	0001006d 	andeq	r0, r1, sp, rrx
      d4:	65727000 	ldrbvs	r7, [r2, #-0]!
      d8:	6c5f7373 	mrrcvs	3, 7, r7, pc, cr3	; <UNPREDICTABLE>
      dc:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
      e0:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
      e4:	00000100 	andeq	r0, r0, r0, lsl #2
      e8:	73657270 	cmnvc	r5, #112, 4
      ec:	72675f73 	rsbvc	r5, r7, #460	; 0x1cc
      f0:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
      f4:	01006d62 	tsteq	r0, r2, ror #26
      f8:	61630000 	cmnvs	r3, r0
      fc:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     100:	616c625f 	cmnvs	ip, pc, asr r2
     104:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     108:	01006d62 	tsteq	r0, r2, ror #26
     10c:	61630000 	cmnvs	r3, r0
     110:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     114:	6172675f 	cmnvs	r2, pc, asr r7
     118:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     11c:	0001006d 	andeq	r0, r1, sp, rrx
     120:	73616300 	cmnvc	r1, #0, 6
     124:	5f656c74 	svcpl	0x00656c74
     128:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     12c:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     130:	0001006d 	andeq	r0, r1, sp, rrx
     134:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     138:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
     13c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     140:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     144:	00000100 	andeq	r0, r0, r0, lsl #2
     148:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     14c:	72675f65 	rsbvc	r5, r7, #404	; 0x194
     150:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     154:	01006d62 	tsteq	r0, r2, ror #26
     158:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
     15c:	5f656c74 	svcpl	0x00656c74
     160:	63616c62 	cmnvs	r1, #25088	; 0x6200
     164:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     168:	0001006d 	andeq	r0, r1, sp, rrx
     16c:	6f6c7300 	svcvs	0x006c7300
     170:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
     174:	682e7478 	stmdavs	lr!, {r3, r4, r5, r6, sl, ip, sp, lr}
     178:	00000100 	andeq	r0, r0, r0, lsl #2
     17c:	782e6762 	stmdavc	lr!, {r1, r5, r6, r8, r9, sl, sp, lr}
     180:	01006d62 	tsteq	r0, r2, ror #26
     184:	00000000 	andeq	r0, r0, r0
     188:	00000205 	andeq	r0, r0, r5, lsl #4
     18c:	2e032000 	cdpcs	0, 0, cr2, cr3, cr0, {0}
     190:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
     194:	01010003 	tsteq	r1, r3
     198:	10020500 	andne	r0, r2, r0, lsl #10
     19c:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
     1a0:	3d2f0123 	stfccs	f0, [pc, #-140]!	; 11c <startup-0x1ffffee4>
     1a4:	03303030 	teqeq	r0, #48	; 0x30
     1a8:	2f3d742c 	svccs	0x003d742c
     1ac:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     1b0:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     1b4:	2f3e672f 	svccs	0x003e672f
     1b8:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     1bc:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     1c0:	2f3d672f 	svccs	0x003d672f
     1c4:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     1c8:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     1cc:	2f3d672f 	svccs	0x003d672f
     1d0:	52023f67 	andpl	r3, r2, #412	; 0x19c
     1d4:	322f4c17 	eorcc	r4, pc, #5888	; 0x1700
     1d8:	59bb7583 	ldmibpl	fp!, {r0, r1, r7, r8, sl, ip, sp, lr}
     1dc:	835c5959 	cmphi	ip, #1458176	; 0x164000
     1e0:	6759bb75 			; <UNDEFINED> instruction: 0x6759bb75
     1e4:	bb75835c 	bllt	1d60f5c <startup-0x1e29f0a4>
     1e8:	ad5c5959 	vldrge.16	s11, [ip, #-178]	; 0xffffff4e	; <UNPREDICTABLE>
     1ec:	5959bb75 	ldmdbpl	r9, {r0, r2, r4, r5, r6, r8, r9, fp, ip, sp, pc}^
     1f0:	8583675b 	strhi	r6, [r3, #1883]	; 0x75b
     1f4:	67858367 	strvs	r8, [r5, r7, ror #6]
     1f8:	83678583 	cmnhi	r7, #549453824	; 0x20c00000
     1fc:	83678583 	cmnhi	r7, #549453824	; 0x20c00000
     200:	85678583 	strbhi	r8, [r7, #-1411]!	; 0xfffffa7d
     204:	85838367 	strhi	r8, [r3, #871]	; 0x367
     208:	68686868 	stmdavs	r8!, {r3, r5, r6, fp, sp, lr}^
     20c:	84838367 	strhi	r8, [r3], #871	; 0x367
     210:	84838383 	strhi	r8, [r3], #899	; 0x383
     214:	85838383 	strhi	r8, [r3, #899]	; 0x383
     218:	84838383 	strhi	r8, [r3], #899	; 0x383
     21c:	83134302 	tsthi	r3, #134217728	; 0x8000000
     220:	820f0383 	andhi	r0, pc, #201326594	; 0xc000002
     224:	75757575 	ldrbvc	r7, [r5, #-1397]!	; 0xfffffa8b
     228:	75757575 	ldrbvc	r7, [r5, #-1397]!	; 0xfffffa8b
     22c:	75677575 	strbvc	r7, [r7, #-1397]!	; 0xfffffa8b
     230:	302f2f76 	eorcc	r2, pc, r6, ror pc	; <UNPREDICTABLE>
     234:	5b595959 	blpl	16567a0 <startup-0x1e9a9860>
     238:	3a67f741 	bcc	19fdf44 <startup-0x1e6020bc>
     23c:	333d3d4f 	teqcc	sp, #5056	; 0x13c0
     240:	6793675a 			; <UNDEFINED> instruction: 0x6793675a
     244:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
     248:	00426767 	subeq	r6, r2, r7, ror #14
     24c:	06010402 	streq	r0, [r1], -r2, lsl #8
     250:	bb830682 	bllt	fe0c1c60 <firstTime.4040+0xde0b7b9c>
     254:	91753083 	cmnls	r5, r3, lsl #1
     258:	c9c9bbc9 	stmibgt	r9, {r0, r3, r6, r7, r8, r9, fp, ip, sp, pc}^
     25c:	f3c9d7c9 			; <UNDEFINED> instruction: 0xf3c9d7c9
     260:	022108c9 	eoreq	r0, r1, #13172736	; 0xc90000
     264:	13081359 	movwne	r1, #33625	; 0x8359
     268:	c92f08c9 	stmdbgt	pc!, {r0, r3, r6, r7, fp}	; <UNPREDICTABLE>
     26c:	08c91308 	stmiaeq	r9, {r3, r8, r9, ip}^
     270:	4b08c921 	blmi	2326fc <startup-0x1fdcd904>
     274:	ca3d08bb 	bgt	f42568 <startup-0x1f0bda98>
     278:	3d4b3d4b 	stclcc	13, cr3, [fp, #-300]	; 0xfffffed4
     27c:	4b3d5932 	blmi	f5674c <startup-0x1f0a98b4>
     280:	bbbb323d 	bllt	feeccb7c <firstTime.4040+0xdeec2ab8>
     284:	e5bbbbbb 	ldr	fp, [fp, #3003]!	; 0xbbb
     288:	5924e775 	stmdbpl	r4!, {r0, r2, r4, r5, r6, r8, r9, sl, sp, lr, pc}
     28c:	67677659 			; <UNDEFINED> instruction: 0x67677659
     290:	67676768 	strbvs	r6, [r7, -r8, ror #14]!
     294:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
     298:	00820601 	addeq	r0, r2, r1, lsl #12
     29c:	90020402 	andls	r0, r2, r2, lsl #8
     2a0:	03040200 	movweq	r0, #16896	; 0x4200
     2a4:	59670690 	stmdbpl	r7!, {r4, r7, r9, sl}^
     2a8:	67676884 	strbvs	r6, [r7, -r4, lsl #17]!
     2ac:	14360291 	ldrtne	r0, [r6], #-657	; 0xfffffd6f
     2b0:	69598383 	ldmdbvs	r9, {r0, r1, r7, r8, r9, pc}^
     2b4:	bb5b59bd 	bllt	16d69b0 <startup-0x1e929650>
     2b8:	bcbb2108 	ldflts	f2, [fp], #32
     2bc:	01040200 	mrseq	r0, R12_usr
     2c0:	0200f206 	andeq	pc, r0, #1610612736	; 0x60000000
     2c4:	20080204 	andcs	r0, r8, r4, lsl #4
     2c8:	5c130806 	ldcpl	8, cr0, [r3], {6}
     2cc:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
     2d0:	08060104 	stmdaeq	r6, {r2, r8}
     2d4:	04020012 	streq	r0, [r2], #-18	; 0xffffffee
     2d8:	4b064a02 	blmi	192ae8 <startup-0x1fe6d518>
     2dc:	3f67ca5b 	svccc	0x0067ca5b
     2e0:	4b3d3d24 	blmi	f4f778 <startup-0x1f0b0888>
     2e4:	59595a40 	ldmdbpl	r9, {r6, r9, fp, ip, lr}^
     2e8:	84835959 	strhi	r5, [r3], #2393	; 0x959
     2ec:	83838483 	orrhi	r8, r3, #-2097152000	; 0x83000000
     2f0:	a5038483 	strge	r8, [r3, #-1155]	; 0xfffffb7d
     2f4:	3f03207f 	svccc	0x0003207f
     2f8:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
     2fc:	7ee50301 	cdpvc	3, 14, cr0, cr5, cr1, {0}
     300:	00150220 	andseq	r0, r5, r0, lsr #4
     304:	008a0101 	addeq	r0, sl, r1, lsl #2
     308:	00020000 	andeq	r0, r2, r0
     30c:	00000070 	andeq	r0, r0, r0, ror r0
     310:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     314:	0101000d 	tsteq	r1, sp
     318:	00000101 	andeq	r0, r0, r1, lsl #2
     31c:	00000100 	andeq	r0, r0, r0, lsl #2
     320:	2f3a4301 	svccs	0x003a4301
     324:	2f706f6d 	svccs	0x00706f6d
     328:	6f4d2f63 	svcvs	0x004d2f63
     32c:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     330:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     334:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     338:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     33c:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     340:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     344:	0000432f 	andeq	r4, r0, pc, lsr #6
     348:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     34c:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     350:	632e7463 			; <UNDEFINED> instruction: 0x632e7463
     354:	00000100 	andeq	r0, r0, r0, lsl #2
     358:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     35c:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
     360:	00000100 	andeq	r0, r0, r0, lsl #2
     364:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     368:	00682e65 	rsbeq	r2, r8, r5, ror #28
     36c:	67000001 	strvs	r0, [r0, -r1]
     370:	6f656d61 	svcvs	0x00656d61
     374:	63656a62 	cmnvs	r5, #401408	; 0x62000
     378:	00682e74 	rsbeq	r2, r8, r4, ror lr
     37c:	00000001 	andeq	r0, r0, r1
     380:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
     384:	19200011 	stmdbne	r0!, {r0, r4}
     388:	594b4c4c 	stmdbpl	fp, {r2, r3, r6, sl, fp, lr}^
     38c:	02ca3d67 	sbceq	r3, sl, #6592	; 0x19c0
     390:	01010004 	tsteq	r1, r4
     394:	00000184 	andeq	r0, r0, r4, lsl #3
     398:	01370002 	teqeq	r7, r2
     39c:	01020000 	mrseq	r0, (UNDEF: 2)
     3a0:	000d0efb 	strdeq	r0, [sp], -fp
     3a4:	01010101 	tsteq	r1, r1, lsl #2
     3a8:	01000000 	mrseq	r0, (UNDEF: 0)
     3ac:	43010000 	movwmi	r0, #4096	; 0x1000
     3b0:	6f6d2f3a 	svcvs	0x006d2f3a
     3b4:	2f632f70 	svccs	0x00632f70
     3b8:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     3bc:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     3c0:	6f697461 	svcvs	0x00697461
     3c4:	2f72656e 	svccs	0x0072656e
     3c8:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     3cc:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     3d0:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     3d4:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     3d8:	632e6572 			; <UNDEFINED> instruction: 0x632e6572
     3dc:	00000100 	andeq	r0, r0, r0, lsl #2
     3e0:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     3e4:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
     3e8:	00000100 	andeq	r0, r0, r0, lsl #2
     3ec:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     3f0:	00682e65 	rsbeq	r2, r8, r5, ror #28
     3f4:	67000001 	strvs	r0, [r0, -r1]
     3f8:	6f656d61 	svcvs	0x00656d61
     3fc:	63656a62 	cmnvs	r5, #401408	; 0x62000
     400:	00682e74 	rsbeq	r2, r8, r4, ror lr
     404:	66000001 	strvs	r0, [r0], -r1
     408:	5f657269 	svcpl	0x00657269
     40c:	63616c62 	cmnvs	r1, #25088	; 0x6200
     410:	2e325f6b 	cdpcs	15, 3, cr5, cr2, cr11, {3}
     414:	006d6278 	rsbeq	r6, sp, r8, ror r2
     418:	66000001 	strvs	r0, [r0], -r1
     41c:	31657269 	cmncc	r5, r9, ror #4
     420:	6172675f 	cmnvs	r2, pc, asr r7
     424:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     428:	0001006d 	andeq	r0, r1, sp, rrx
     42c:	72696600 	rsbvc	r6, r9, #0, 12
     430:	6c5f3165 	ldfvse	f3, [pc], {101}	; 0x65
     434:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     438:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     43c:	00000100 	andeq	r0, r0, r0, lsl #2
     440:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     444:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
     448:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     44c:	01006d62 	tsteq	r0, r2, ror #26
     450:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     454:	5f326572 	svcpl	0x00326572
     458:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     45c:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     460:	0001006d 	andeq	r0, r1, sp, rrx
     464:	72696600 	rsbvc	r6, r9, #0, 12
     468:	675f3365 	ldrbvs	r3, [pc, -r5, ror #6]
     46c:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     470:	006d6278 	rsbeq	r6, sp, r8, ror r2
     474:	66000001 	strvs	r0, [r0], -r1
     478:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     47c:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     480:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     484:	01006d62 	tsteq	r0, r2, ror #26
     488:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     48c:	5f346572 	svcpl	0x00346572
     490:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     494:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     498:	00000100 	andeq	r0, r0, r0, lsl #2
     49c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     4a0:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     4a4:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     4a8:	006d6278 	rsbeq	r6, sp, r8, ror r2
     4ac:	66000001 	strvs	r0, [r0], -r1
     4b0:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
     4b4:	6172675f 	cmnvs	r2, pc, asr r7
     4b8:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     4bc:	0001006d 	andeq	r0, r1, sp, rrx
     4c0:	72696600 	rsbvc	r6, r9, #0, 12
     4c4:	6c5f3565 	cfldr64vs	mvdx3, [pc], {101}	; 0x65
     4c8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     4cc:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     4d0:	00000100 	andeq	r0, r0, r0, lsl #2
     4d4:	02050000 	andeq	r0, r5, #0
     4d8:	200011a4 	andcs	r1, r0, r4, lsr #3
     4dc:	3d013003 	stccc	0, cr3, [r1, #-12]
     4e0:	2f3e672f 	svccs	0x003e672f
     4e4:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     4e8:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     4ec:	2f3e672f 	svccs	0x003e672f
     4f0:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     4f4:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     4f8:	2f3e672f 	svccs	0x003e672f
     4fc:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     500:	1446023d 	strbne	r0, [r6], #-573	; 0xfffffdc3
     504:	3e2f4b4c 	vnmulcc.f64	d4, d15, d12
     508:	5959594b 	ldmdbpl	r9, {r0, r1, r3, r6, r8, fp, ip, lr}^
     50c:	9191915a 	orrsls	r9, r1, sl, asr r1
     510:	3d3e9391 	ldccc	3, cr9, [lr, #-580]!	; 0xfffffdbc
     514:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
     518:	01010031 	tsteq	r1, r1, lsr r0
     51c:	000000e3 	andeq	r0, r0, r3, ror #1
     520:	006c0002 	rsbeq	r0, ip, r2
     524:	01020000 	mrseq	r0, (UNDEF: 2)
     528:	000d0efb 	strdeq	r0, [sp], -fp
     52c:	01010101 	tsteq	r1, r1, lsl #2
     530:	01000000 	mrseq	r0, (UNDEF: 0)
     534:	43010000 	movwmi	r0, #4096	; 0x1000
     538:	6f6d2f3a 	svcvs	0x006d2f3a
     53c:	2f632f70 	svccs	0x00632f70
     540:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     544:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     548:	6f697461 	svcvs	0x00697461
     54c:	2f72656e 	svccs	0x0072656e
     550:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     554:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     558:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     55c:	6c700000 	ldclvs	0, cr0, [r0], #-0
     560:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
     564:	0100632e 	tsteq	r0, lr, lsr #6
     568:	70730000 	rsbsvc	r0, r3, r0
     56c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     570:	0100682e 	tsteq	r0, lr, lsr #16
     574:	6d690000 	stclvs	0, cr0, [r9, #-0]
     578:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
     57c:	00010068 	andeq	r0, r1, r8, rrx
     580:	6d616700 	stclvs	7, cr6, [r1, #-0]
     584:	6a626f65 	bvs	189c320 <startup-0x1e763ce0>
     588:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
     58c:	00010068 	andeq	r0, r1, r8, rrx
     590:	05000000 	streq	r0, [r0, #-0]
     594:	00144c02 	andseq	r4, r4, r2, lsl #24
     598:	594d1720 	stmdbpl	sp, {r5, r8, r9, sl, ip}^
     59c:	0c033d67 	stceq	13, cr3, [r3], {103}	; 0x67
     5a0:	040200c8 	streq	r0, [r2], #-200	; 0xffffff38
     5a4:	00820601 	addeq	r0, r2, r1, lsl #12
     5a8:	4a020402 	bmi	815b8 <startup-0x1ff7ea48>
     5ac:	754d4b06 	strbvc	r4, [sp, #-2822]	; 0xfffff4fa
     5b0:	02004c3d 	andeq	r4, r0, #15616	; 0x3d00
     5b4:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
     5b8:	4d3d7506 	cfldr32mi	mvfx7, [sp, #-24]!	; 0xffffffe8
     5bc:	02005d75 	andeq	r5, r0, #7488	; 0x1d40
     5c0:	4a060104 	bmi	1809d8 <startup-0x1fe7f628>
     5c4:	005b5906 	subseq	r5, fp, r6, lsl #18
     5c8:	06010402 	streq	r0, [r1], -r2, lsl #8
     5cc:	5b59064a 	blpl	1641efc <startup-0x1e9be104>
     5d0:	01040200 	mrseq	r0, R12_usr
     5d4:	02004a06 	andeq	r4, r0, #24576	; 0x6000
     5d8:	00580404 	subseq	r0, r8, r4, lsl #8
     5dc:	4a050402 	bmi	1415ec <startup-0x1febea14>
     5e0:	06040200 	streq	r0, [r4], -r0, lsl #4
     5e4:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
     5e8:	4b064a07 	blmi	192e0c <startup-0x1fe6d1f4>
     5ec:	0402005b 	streq	r0, [r2], #-91	; 0xffffffa5
     5f0:	06740601 	ldrbteq	r0, [r4], -r1, lsl #12
     5f4:	4b765b75 	blmi	1d973d0 <startup-0x1e268c30>
     5f8:	675c4b68 	ldrbvs	r4, [ip, -r8, ror #22]
     5fc:	0e026867 	cdpeq	8, 0, cr6, cr2, cr7, {3}
     600:	dd010100 	stfles	f0, [r1, #-0]
     604:	02000001 	andeq	r0, r0, #1
     608:	00018200 	andeq	r8, r1, r0, lsl #4
     60c:	fb010200 	blx	40e16 <startup-0x1ffbf1ea>
     610:	01000d0e 	tsteq	r0, lr, lsl #26
     614:	00010101 	andeq	r0, r1, r1, lsl #2
     618:	00010000 	andeq	r0, r1, r0
     61c:	3a430100 	bcc	10c0a24 <startup-0x1ef3f5dc>
     620:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     624:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 570 <startup-0x1ffffa90>
     628:	616c706f 	cmnvs	ip, pc, rrx
     62c:	61726f62 	cmnvs	r2, r2, ror #30
     630:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     634:	442f7265 	strtmi	r7, [pc], #-613	; 63c <startup-0x1ffff9c4>
     638:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     63c:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     640:	00432f68 	subeq	r2, r3, r8, ror #30
     644:	72696200 	rsbvc	r6, r9, #0, 4
     648:	00632e64 	rsbeq	r2, r3, r4, ror #28
     64c:	73000001 	movwvc	r0, #1
     650:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
     654:	00682e65 	rsbeq	r2, r8, r5, ror #28
     658:	69000001 	stmdbvs	r0, {r0}
     65c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     660:	0100682e 	tsteq	r0, lr, lsr #16
     664:	61670000 	cmnvs	r7, r0
     668:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
     66c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     670:	0100682e 	tsteq	r0, lr, lsr #16
     674:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     678:	5f316472 	svcpl	0x00316472
     67c:	63616c62 	cmnvs	r1, #25088	; 0x6200
     680:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     684:	0001006d 	andeq	r0, r1, sp, rrx
     688:	72696200 	rsbvc	r6, r9, #0, 4
     68c:	675f3164 	ldrbvs	r3, [pc, -r4, ror #2]
     690:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     694:	006d6278 	rsbeq	r6, sp, r8, ror r2
     698:	62000001 	andvs	r0, r0, #1
     69c:	31647269 	cmncc	r4, r9, ror #4
     6a0:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     6a4:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     6a8:	01006d62 	tsteq	r0, r2, ror #26
     6ac:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     6b0:	5f326472 	svcpl	0x00326472
     6b4:	63616c62 	cmnvs	r1, #25088	; 0x6200
     6b8:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     6bc:	0001006d 	andeq	r0, r1, sp, rrx
     6c0:	72696200 	rsbvc	r6, r9, #0, 4
     6c4:	675f3264 	ldrbvs	r3, [pc, -r4, ror #4]
     6c8:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     6cc:	006d6278 	rsbeq	r6, sp, r8, ror r2
     6d0:	62000001 	andvs	r0, r0, #1
     6d4:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     6d8:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     6dc:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     6e0:	01006d62 	tsteq	r0, r2, ror #26
     6e4:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     6e8:	5f336472 	svcpl	0x00336472
     6ec:	63616c62 	cmnvs	r1, #25088	; 0x6200
     6f0:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     6f4:	0001006d 	andeq	r0, r1, sp, rrx
     6f8:	72696200 	rsbvc	r6, r9, #0, 4
     6fc:	675f3364 	ldrbvs	r3, [pc, -r4, ror #6]
     700:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     704:	006d6278 	rsbeq	r6, sp, r8, ror r2
     708:	62000001 	andvs	r0, r0, #1
     70c:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     710:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     714:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     718:	01006d62 	tsteq	r0, r2, ror #26
     71c:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     720:	5f346472 	svcpl	0x00346472
     724:	63616c62 	cmnvs	r1, #25088	; 0x6200
     728:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     72c:	0001006d 	andeq	r0, r1, sp, rrx
     730:	72696200 	rsbvc	r6, r9, #0, 4
     734:	675f3464 	ldrbvs	r3, [pc, -r4, ror #8]
     738:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     73c:	006d6278 	rsbeq	r6, sp, r8, ror r2
     740:	62000001 	andvs	r0, r0, #1
     744:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     748:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     74c:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     750:	01006d62 	tsteq	r0, r2, ror #26
     754:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     758:	5f356472 	svcpl	0x00356472
     75c:	63616c62 	cmnvs	r1, #25088	; 0x6200
     760:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     764:	0001006d 	andeq	r0, r1, sp, rrx
     768:	72696200 	rsbvc	r6, r9, #0, 4
     76c:	675f3564 	ldrbvs	r3, [pc, -r4, ror #10]
     770:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     774:	006d6278 	rsbeq	r6, sp, r8, ror r2
     778:	62000001 	andvs	r0, r0, #1
     77c:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     780:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     784:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     788:	01006d62 	tsteq	r0, r2, ror #26
     78c:	00000000 	andeq	r0, r0, r0
     790:	16200205 	strtne	r0, [r0], -r5, lsl #4
     794:	3f032000 	svccc	0x00032000
     798:	672f3e01 	strvs	r3, [pc, -r1, lsl #28]!
     79c:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     7a0:	2f3e672f 	svccs	0x003e672f
     7a4:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     7a8:	3f672f3d 	svccc	0x00672f3d
     7ac:	2f3d672f 	svccs	0x003d672f
     7b0:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     7b4:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     7b8:	2f3d672f 	svccs	0x003d672f
     7bc:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     7c0:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     7c4:	023d672f 	eorseq	r6, sp, #12320768	; 0xbc0000
     7c8:	4b4c145e 	blmi	1305948 <startup-0x1ecfa6b8>
     7cc:	594b3e2f 	stmdbpl	fp, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}^
     7d0:	5c595959 	mrrcpl	9, 5, r5, r9, cr9	; <UNPREDICTABLE>
     7d4:	91919191 			; <UNDEFINED> instruction: 0x91919191
     7d8:	3d3e9493 	cfldrscc	mvf9, [lr, #-588]!	; 0xfffffdb4
     7dc:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
     7e0:	0101003d 	tsteq	r1, sp, lsr r0
     7e4:	00000161 	andeq	r0, r0, r1, ror #2
     7e8:	011c0002 	tsteq	ip, r2
     7ec:	01020000 	mrseq	r0, (UNDEF: 2)
     7f0:	000d0efb 	strdeq	r0, [sp], -fp
     7f4:	01010101 	tsteq	r1, r1, lsl #2
     7f8:	01000000 	mrseq	r0, (UNDEF: 0)
     7fc:	43010000 	movwmi	r0, #4096	; 0x1000
     800:	6f6d2f3a 	svcvs	0x006d2f3a
     804:	2f632f70 	svccs	0x00632f70
     808:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     80c:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     810:	6f697461 	svcvs	0x00697461
     814:	2f72656e 	svccs	0x0072656e
     818:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     81c:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     820:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     824:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     828:	2e686374 	mcrcs	3, 3, r6, cr8, cr4, {3}
     82c:	00010063 	andeq	r0, r1, r3, rrx
     830:	72707300 	rsbsvc	r7, r0, #0, 6
     834:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
     838:	00010068 	andeq	r0, r1, r8, rrx
     83c:	616d6900 	cmnvs	sp, r0, lsl #18
     840:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     844:	00000100 	andeq	r0, r0, r0, lsl #2
     848:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     84c:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     850:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
     854:	00000100 	andeq	r0, r0, r0, lsl #2
     858:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     85c:	625f3168 	subsvs	r3, pc, #104, 2
     860:	6b63616c 	blvs	18d8e18 <startup-0x1e7271e8>
     864:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     868:	00000100 	andeq	r0, r0, r0, lsl #2
     86c:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     870:	675f3168 	ldrbvs	r3, [pc, -r8, ror #2]
     874:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     878:	006d6278 	rsbeq	r6, sp, r8, ror r2
     87c:	77000001 	strvc	r0, [r0, -r1]
     880:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     884:	696c5f31 	stmdbvs	ip!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     888:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     88c:	006d6278 	rsbeq	r6, sp, r8, ror r2
     890:	77000001 	strvc	r0, [r0, -r1]
     894:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     898:	6c625f32 	stclvs	15, cr5, [r2], #-200	; 0xffffff38
     89c:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     8a0:	006d6278 	rsbeq	r6, sp, r8, ror r2
     8a4:	77000001 	strvc	r0, [r0, -r1]
     8a8:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     8ac:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
     8b0:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     8b4:	01006d62 	tsteq	r0, r2, ror #26
     8b8:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     8bc:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     8c0:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     8c4:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     8c8:	01006d62 	tsteq	r0, r2, ror #26
     8cc:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     8d0:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     8d4:	616c625f 	cmnvs	ip, pc, asr r2
     8d8:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     8dc:	01006d62 	tsteq	r0, r2, ror #26
     8e0:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     8e4:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     8e8:	6172675f 	cmnvs	r2, pc, asr r7
     8ec:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     8f0:	0001006d 	andeq	r0, r1, sp, rrx
     8f4:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     8f8:	5f336863 	svcpl	0x00336863
     8fc:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     900:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     904:	0001006d 	andeq	r0, r1, sp, rrx
     908:	05000000 	streq	r0, [r0, #-0]
     90c:	00198402 	andseq	r8, r9, r2, lsl #8
     910:	01280320 			; <UNDEFINED> instruction: 0x01280320
     914:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     918:	2f3d672f 	svccs	0x003d672f
     91c:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     920:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     924:	2f3f672f 	svccs	0x003f672f
     928:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     92c:	3e672f3d 	mcrcc	15, 3, r2, cr7, cr13, {1}
     930:	4c143a02 			; <UNDEFINED> instruction: 0x4c143a02
     934:	4b3e2f4b 	blmi	f8c668 <startup-0x1f073998>
     938:	915b5959 	cmpls	fp, r9, asr r9
     93c:	3e949191 	mrccc	1, 4, r9, cr4, cr1, {4}
     940:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     944:	01002902 	tsteq	r0, r2, lsl #18
     948:	00017f01 	andeq	r7, r1, r1, lsl #30
     94c:	1a000200 	bne	1154 <startup-0x1fffeeac>
     950:	02000001 	andeq	r0, r0, #1
     954:	0d0efb01 	vstreq	d15, [lr, #-4]
     958:	01010100 	mrseq	r0, (UNDEF: 17)
     95c:	00000001 	andeq	r0, r0, r1
     960:	01000001 	tsteq	r0, r1
     964:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     968:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     96c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     970:	6f62616c 	svcvs	0x0062616c
     974:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     978:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     97c:	5049442f 	subpl	r4, r9, pc, lsr #8
     980:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     984:	2f686374 	svccs	0x00686374
     988:	44000043 	strmi	r0, [r0], #-67	; 0xffffffbd
     98c:	632e5049 			; <UNDEFINED> instruction: 0x632e5049
     990:	00000100 	andeq	r0, r0, r0, lsl #2
     994:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     998:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
     99c:	00000100 	andeq	r0, r0, r0, lsl #2
     9a0:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     9a4:	00682e65 	rsbeq	r2, r8, r5, ror #28
     9a8:	67000001 	strvs	r0, [r0, -r1]
     9ac:	6f656d61 	svcvs	0x00656d61
     9b0:	63656a62 	cmnvs	r5, #401408	; 0x62000
     9b4:	00682e74 	rsbeq	r2, r8, r4, ror lr
     9b8:	77000001 	strvc	r0, [r0, -r1]
     9bc:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     9c0:	6c625f31 	stclvs	15, cr5, [r2], #-196	; 0xffffff3c
     9c4:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     9c8:	006d6278 	rsbeq	r6, sp, r8, ror r2
     9cc:	77000001 	strvc	r0, [r0, -r1]
     9d0:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     9d4:	72675f31 	rsbvc	r5, r7, #49, 30	; 0xc4
     9d8:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     9dc:	01006d62 	tsteq	r0, r2, ror #26
     9e0:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     9e4:	31686374 	smccc	34356	; 0x8634
     9e8:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     9ec:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     9f0:	01006d62 	tsteq	r0, r2, ror #26
     9f4:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     9f8:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     9fc:	616c625f 	cmnvs	ip, pc, asr r2
     a00:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     a04:	01006d62 	tsteq	r0, r2, ror #26
     a08:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     a0c:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     a10:	6172675f 	cmnvs	r2, pc, asr r7
     a14:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     a18:	0001006d 	andeq	r0, r1, sp, rrx
     a1c:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     a20:	5f326863 	svcpl	0x00326863
     a24:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     a28:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     a2c:	0001006d 	andeq	r0, r1, sp, rrx
     a30:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     a34:	5f336863 	svcpl	0x00336863
     a38:	63616c62 	cmnvs	r1, #25088	; 0x6200
     a3c:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     a40:	0001006d 	andeq	r0, r1, sp, rrx
     a44:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     a48:	5f336863 	svcpl	0x00336863
     a4c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     a50:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     a54:	00000100 	andeq	r0, r0, r0, lsl #2
     a58:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     a5c:	6c5f3368 	mrrcvs	3, 6, r3, pc, cr8	; <UNPREDICTABLE>
     a60:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     a64:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     a68:	00000100 	andeq	r0, r0, r0, lsl #2
     a6c:	02050000 	andeq	r0, r5, #0
     a70:	20001bbc 			; <UNDEFINED> instruction: 0x20001bbc
     a74:	3e012c03 	cdpcc	12, 0, cr2, cr1, cr3, {0}
     a78:	2f3d672f 	svccs	0x003d672f
     a7c:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     a80:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     a84:	2f3d672f 	svccs	0x003d672f
     a88:	672f3f67 	strvs	r3, [pc, -r7, ror #30]!
     a8c:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     a90:	023e672f 	eorseq	r6, lr, #12320768	; 0xbc0000
     a94:	4b4c143a 	blmi	1305b84 <startup-0x1ecfa47c>
     a98:	594b3e2f 	stmdbpl	fp, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}^
     a9c:	91915b59 	orrsls	r5, r1, r9, asr fp
     aa0:	3d3e9491 	cfldrscc	mvf9, [lr, #-580]!	; 0xfffffdbc
     aa4:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
     aa8:	3d591729 	ldclcc	7, cr1, [r9, #-164]	; 0xffffff5c
     aac:	4d4b933d 	stclmi	3, cr9, [fp, #-244]	; 0xffffff0c
     ab0:	02005a5a 	andeq	r5, r0, #368640	; 0x5a000
     ab4:	66060104 	strvs	r0, [r6], -r4, lsl #2
     ab8:	02040200 	andeq	r0, r4, #0, 4
     abc:	ae830682 	cdpge	6, 8, cr0, cr3, cr2, {4}
     ac0:	4f4b3108 	svcmi	0x004b3108
     ac4:	023f4b1c 	eorseq	r4, pc, #28, 22	; 0x7000
     ac8:	0101000e 	tsteq	r1, lr
     acc:	000001a5 	andeq	r0, r0, r5, lsr #3
     ad0:	01570002 	cmpeq	r7, r2
     ad4:	01020000 	mrseq	r0, (UNDEF: 2)
     ad8:	000d0efb 	strdeq	r0, [sp], -fp
     adc:	01010101 	tsteq	r1, r1, lsl #2
     ae0:	01000000 	mrseq	r0, (UNDEF: 0)
     ae4:	43010000 	movwmi	r0, #4096	; 0x1000
     ae8:	6f6d2f3a 	svcvs	0x006d2f3a
     aec:	2f632f70 	svccs	0x00632f70
     af0:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     af4:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     af8:	6f697461 	svcvs	0x00697461
     afc:	2f72656e 	svccs	0x0072656e
     b00:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     b04:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     b08:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     b0c:	6c660000 	stclvs	0, cr0, [r6], #-0
     b10:	2e656d61 	cdpcs	13, 6, cr6, cr5, cr1, {3}
     b14:	00010063 	andeq	r0, r1, r3, rrx
     b18:	72707300 	rsbsvc	r7, r0, #0, 6
     b1c:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
     b20:	00010068 	andeq	r0, r1, r8, rrx
     b24:	616d6900 	cmnvs	sp, r0, lsl #18
     b28:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     b2c:	00000100 	andeq	r0, r0, r0, lsl #2
     b30:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     b34:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     b38:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
     b3c:	00000100 	andeq	r0, r0, r0, lsl #2
     b40:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
     b44:	625f3165 	subsvs	r3, pc, #1073741849	; 0x40000019
     b48:	6b63616c 	blvs	18d9100 <startup-0x1e726f00>
     b4c:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     b50:	00000100 	andeq	r0, r0, r0, lsl #2
     b54:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
     b58:	675f3165 	ldrbvs	r3, [pc, -r5, ror #2]
     b5c:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     b60:	006d6278 	rsbeq	r6, sp, r8, ror r2
     b64:	66000001 	strvs	r0, [r0], -r1
     b68:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
     b6c:	696c5f31 	stmdbvs	ip!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     b70:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     b74:	006d6278 	rsbeq	r6, sp, r8, ror r2
     b78:	66000001 	strvs	r0, [r0], -r1
     b7c:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
     b80:	6c625f32 	stclvs	15, cr5, [r2], #-200	; 0xffffff38
     b84:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     b88:	006d6278 	rsbeq	r6, sp, r8, ror r2
     b8c:	66000001 	strvs	r0, [r0], -r1
     b90:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
     b94:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
     b98:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     b9c:	01006d62 	tsteq	r0, r2, ror #26
     ba0:	6c660000 	stclvs	0, cr0, [r6], #-0
     ba4:	32656d61 	rsbcc	r6, r5, #6208	; 0x1840
     ba8:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     bac:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     bb0:	01006d62 	tsteq	r0, r2, ror #26
     bb4:	6c660000 	stclvs	0, cr0, [r6], #-0
     bb8:	33656d61 	cmncc	r5, #6208	; 0x1840
     bbc:	616c625f 	cmnvs	ip, pc, asr r2
     bc0:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     bc4:	01006d62 	tsteq	r0, r2, ror #26
     bc8:	6c660000 	stclvs	0, cr0, [r6], #-0
     bcc:	33656d61 	cmncc	r5, #6208	; 0x1840
     bd0:	6172675f 	cmnvs	r2, pc, asr r7
     bd4:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     bd8:	0001006d 	andeq	r0, r1, sp, rrx
     bdc:	616c6600 	cmnvs	ip, r0, lsl #12
     be0:	5f33656d 	svcpl	0x0033656d
     be4:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     be8:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     bec:	0001006d 	andeq	r0, r1, sp, rrx
     bf0:	616c6600 	cmnvs	ip, r0, lsl #12
     bf4:	5f34656d 	svcpl	0x0034656d
     bf8:	63616c62 	cmnvs	r1, #25088	; 0x6200
     bfc:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     c00:	0001006d 	andeq	r0, r1, sp, rrx
     c04:	616c6600 	cmnvs	ip, r0, lsl #12
     c08:	5f34656d 	svcpl	0x0034656d
     c0c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     c10:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     c14:	00000100 	andeq	r0, r0, r0, lsl #2
     c18:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
     c1c:	6c5f3465 	cfldrdvs	mvd3, [pc], {101}	; 0x65
     c20:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     c24:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     c28:	00000100 	andeq	r0, r0, r0, lsl #2
     c2c:	02050000 	andeq	r0, r5, #0
     c30:	20001ee4 	andcs	r1, r0, r4, ror #29
     c34:	3e013103 	adfccs	f3, f1, f3
     c38:	2f3d672f 	svccs	0x003d672f
     c3c:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     c40:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     c44:	2f3d672f 	svccs	0x003d672f
     c48:	672f3f67 	strvs	r3, [pc, -r7, ror #30]!
     c4c:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     c50:	2f3e672f 	svccs	0x003e672f
     c54:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     c58:	3e672f3d 	mcrcc	15, 3, r2, cr7, cr13, {1}
     c5c:	4c144d02 	ldcmi	13, cr4, [r4], {2}
     c60:	4b3e2f4b 	blmi	f8c994 <startup-0x1f07366c>
     c64:	915a5959 	cmpls	sl, r9, asr r9
     c68:	3e939191 	mrccc	1, 4, r9, cr3, cr1, {4}
     c6c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     c70:	01002f02 	tsteq	r0, r2, lsl #30
     c74:	00034e01 	andeq	r4, r3, r1, lsl #28
     c78:	7c000200 	sfmvc	f0, 4, [r0], {-0}
     c7c:	02000000 	andeq	r0, r0, #0
     c80:	0d0efb01 	vstreq	d15, [lr, #-4]
     c84:	01010100 	mrseq	r0, (UNDEF: 17)
     c88:	00000001 	andeq	r0, r0, r1
     c8c:	01000001 	tsteq	r0, r1
     c90:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     c94:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     c98:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     c9c:	6f62616c 	svcvs	0x0062616c
     ca0:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     ca4:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     ca8:	5049442f 	subpl	r4, r9, pc, lsr #8
     cac:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     cb0:	2f686374 	svccs	0x00686374
     cb4:	67000043 	strvs	r0, [r0, -r3, asr #32]
     cb8:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
     cbc:	2e736369 	cdpcs	3, 7, cr6, cr3, cr9, {3}
     cc0:	00010063 	andeq	r0, r1, r3, rrx
     cc4:	72707300 	rsbsvc	r7, r0, #0, 6
     cc8:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
     ccc:	00010068 	andeq	r0, r1, r8, rrx
     cd0:	616d6900 	cmnvs	sp, r0, lsl #18
     cd4:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     cd8:	00000100 	andeq	r0, r0, r0, lsl #2
     cdc:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     ce0:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     ce4:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
     ce8:	00000100 	andeq	r0, r0, r0, lsl #2
     cec:	70617267 	rsbvc	r7, r1, r7, ror #4
     cf0:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
     cf4:	0100682e 	tsteq	r0, lr, lsr #16
     cf8:	00000000 	andeq	r0, r0, r0
     cfc:	21900205 	orrscs	r0, r0, r5, lsl #4
     d00:	30152000 	andscc	r2, r5, r0
     d04:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     d08:	01040200 	mrseq	r0, R12_usr
     d0c:	67062006 	strvs	r2, [r6, -r6]
     d10:	3d30a03d 	ldccc	0, cr10, [r0, #-244]!	; 0xffffff0c
     d14:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
     d18:	06010402 	streq	r0, [r1], -r2, lsl #8
     d1c:	3d670620 	stclcc	6, cr0, [r7, #-128]!	; 0xffffff80
     d20:	2f214ba0 	svccs	0x00214ba0
     d24:	5e2a2f2f 	cdppl	15, 2, cr2, cr10, cr15, {1}
     d28:	57214f4c 	strpl	r4, [r1, -ip, asr #30]!
     d2c:	4a09035b 	bmi	241aa0 <startup-0x1fdbe560>
     d30:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
     d34:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
     d38:	00570304 	subseq	r0, r7, r4, lsl #6
     d3c:	06010402 	streq	r0, [r1], -r2, lsl #8
     d40:	674c063c 	smlaldxvs	r0, ip, ip, r6
     d44:	2f674b2f 	svccs	0x00674b2f
     d48:	a14b4b4b 	cmpge	fp, fp, asr #22
     d4c:	83915968 	orrshi	r5, r1, #104, 18	; 0x1a0000
     d50:	59687659 	stmdbpl	r8!, {r0, r3, r4, r6, r9, sl, ip, sp, lr}^
     d54:	675983d7 	smmlsvs	r9, r7, r3, r8
     d58:	74120367 	ldrvc	r0, [r2], #-871	; 0xfffffc99
     d5c:	03206e03 			; <UNDEFINED> instruction: 0x03206e03
     d60:	70034a12 	andvc	r4, r3, r2, lsl sl
     d64:	223d3d20 	eorscs	r3, sp, #32, 26	; 0x800
     d68:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
     d6c:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
     d70:	3d3e4c22 	ldccc	12, cr4, [lr, #-136]!	; 0xffffff78
     d74:	313d3d3d 	teqcc	sp, sp, lsr sp
     d78:	3d752f3d 	ldclcc	15, cr2, [r5, #-244]!	; 0xffffff0c
     d7c:	4a790331 	bmi	1e41a48 <startup-0x1e1be5b8>
     d80:	bc3d2327 	ldclt	3, cr2, [sp], #-156	; 0xffffff64
     d84:	3d3d3d67 	ldccc	13, cr3, [sp, #-412]!	; 0xfffffe64
     d88:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
     d8c:	3e3d592f 	vaddcc.f16	s10, s26, s31	; <UNPREDICTABLE>
     d90:	4b303d4b 	blmi	c102c4 <startup-0x1f3efd3c>
     d94:	bc3d313d 	ldflts	f3, [sp], #-244	; 0xffffff0c
     d98:	5a595967 	bpl	165733c <startup-0x1e9a8cc4>
     d9c:	2f594b91 	svccs	0x00594b91
     da0:	593e2f3d 	ldmdbpl	lr!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}
     da4:	3d59303d 	ldclcc	0, cr3, [r9, #-244]	; 0xffffff0c
     da8:	3d3d3d31 	ldccc	13, cr3, [sp, #-196]!	; 0xffffff3c
     dac:	593d9167 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, ip, pc}
     db0:	4b833d3d 	blmi	fe0d02ac <firstTime.4040+0xde0c61e8>
     db4:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
     db8:	2f4c833d 	svccs	0x004c833d
     dbc:	3d3d3e3d 	ldccc	14, cr3, [sp, #-244]!	; 0xffffff0c
     dc0:	3d3d3e3d 	ldccc	14, cr3, [sp, #-244]!	; 0xffffff0c
     dc4:	4b4b4b3e 	blmi	12d3ac4 <startup-0x1ed2c53c>
     dc8:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
     dcc:	4c9f4b3e 	vldmiami	pc, {d4-<overflow reg d34>}
     dd0:	03040200 	movweq	r0, #16896	; 0x4200
     dd4:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
     dd8:	02004903 	andeq	r4, r0, #49152	; 0xc000
     ddc:	58060104 	stmdapl	r6, {r2, r8}
     de0:	02040200 	andeq	r0, r4, #0, 4
     de4:	02004606 	andeq	r4, r0, #6291456	; 0x600000
     de8:	58060104 	stmdapl	r6, {r2, r8}
     dec:	764d5206 	strbvc	r5, [sp], -r6, lsl #4
     df0:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
     df4:	004a0601 	subeq	r0, sl, r1, lsl #12
     df8:	4a020402 	bmi	81e08 <startup-0x1ff7e1f8>
     dfc:	03040200 	movweq	r0, #16896	; 0x4200
     e00:	084c064a 	stmdaeq	ip, {r1, r3, r6, r9, sl}^
     e04:	3e3d3d13 	mrccc	13, 1, r3, cr13, cr3, {0}
     e08:	76763dbc 			; <UNDEFINED> instruction: 0x76763dbc
     e0c:	d71fd93d 			; <UNDEFINED> instruction: 0xd71fd93d
     e10:	1fd93d23 	svcne	0x00d93d23
     e14:	d93d23d7 	ldmdble	sp!, {r0, r1, r2, r4, r6, r7, r8, r9, sp}
     e18:	6103d71f 	tstvs	r3, pc, lsl r7
     e1c:	2023032e 	eorcs	r0, r3, lr, lsr #6
     e20:	020069af 	andeq	r6, r0, #2867200	; 0x2bc000
     e24:	4a060104 	bmi	18123c <startup-0x1fe7edc4>
     e28:	02040200 	andeq	r0, r4, #0, 4
     e2c:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
     e30:	4b064a03 	blmi	193644 <startup-0x1fe6c9bc>
     e34:	59130875 	ldmdbpl	r3, {r0, r2, r4, r5, r6, fp}
     e38:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
     e3c:	3d5b5959 	vldrcc.16	s11, [fp, #-178]	; 0xffffff4e	; <UNPREDICTABLE>
     e40:	4c4b3d76 	mcrrmi	13, 7, r3, fp, cr6
     e44:	d8c93e4b 	stmiale	r9, {r0, r1, r3, r6, r9, sl, fp, ip, sp}^
     e48:	ae3dca9f 			; <UNDEFINED> instruction: 0xae3dca9f
     e4c:	ac5e03a0 	mrrcge	3, 10, r0, lr, cr0
     e50:	84202303 	strthi	r2, [r0], #-771	; 0xfffffcfd
     e54:	00592f4c 	subseq	r2, r9, ip, asr #30
     e58:	06010402 	streq	r0, [r1], -r2, lsl #8
     e5c:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
     e60:	02002e02 	andeq	r2, r0, #2, 28
     e64:	00200404 	eoreq	r0, r0, r4, lsl #8
     e68:	06040402 	streq	r0, [r4], -r2, lsl #8
     e6c:	75d7593d 	ldrbvc	r5, [r7, #2365]	; 0x93d
     e70:	03040200 	movweq	r0, #16896	; 0x4200
     e74:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
     e78:	0200ab03 	andeq	sl, r0, #3072	; 0xc00
     e7c:	9e060104 	adflss	f0, f6, f4
     e80:	02040200 	andeq	r0, r4, #0, 4
     e84:	02005506 	andeq	r5, r0, #25165824	; 0x1800000
     e88:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
     e8c:	02040200 	andeq	r0, r4, #0, 4
     e90:	02005606 	andeq	r5, r0, #6291456	; 0x600000
     e94:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
     e98:	580a0306 	stmdapl	sl, {r1, r2, r8, r9}
     e9c:	5a597652 	bpl	165e7ec <startup-0x1e9a1814>
     ea0:	bb3d3d59 	bllt	f5040c <startup-0x1f0afbf4>
     ea4:	3de6913d 	stfccp	f1, [r6, #244]!	; 0xf4
     ea8:	02006708 	andeq	r6, r0, #8, 14	; 0x200000
     eac:	7a030204 	bvc	c16c4 <startup-0x1ff3e93c>
     eb0:	02006608 	andeq	r6, r0, #8, 12	; 0x800000
     eb4:	3c060104 	stfccs	f0, [r6], {4}
     eb8:	02040200 	andeq	r0, r4, #0, 4
     ebc:	02003a06 	andeq	r3, r0, #24576	; 0x6000
     ec0:	3c060104 	stfccs	f0, [r6], {4}
     ec4:	02040200 	andeq	r0, r4, #0, 4
     ec8:	02004906 	andeq	r4, r0, #98304	; 0x18000
     ecc:	3c060104 	stfccs	f0, [r6], {4}
     ed0:	580e0306 	stmdapl	lr, {r1, r2, r8, r9}
     ed4:	003d774c 	eorseq	r7, sp, ip, asr #14
     ed8:	3d030402 	cfstrscc	mvf0, [r3, #-8]
     edc:	03040200 	movweq	r0, #16896	; 0x4200
     ee0:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
     ee4:	003c0601 	eorseq	r0, ip, r1, lsl #12
     ee8:	06020402 	streq	r0, [r2], -r2, lsl #8
     eec:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
     ef0:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     ef4:	3d774c6b 	ldclcc	12, cr4, [r7, #-428]!	; 0xfffffe54
     ef8:	03040200 	movweq	r0, #16896	; 0x4200
     efc:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     f00:	02006503 	andeq	r6, r0, #12582912	; 0xc00000
     f04:	3c060104 	stfccs	f0, [r6], {4}
     f08:	02040200 	andeq	r0, r4, #0, 4
     f0c:	02006506 	andeq	r6, r0, #25165824	; 0x1800000
     f10:	3c060104 	stfccs	f0, [r6], {4}
     f14:	3d4d6b06 	vstrcc	d22, [sp, #-24]	; 0xffffffe8
     f18:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
     f1c:	02006930 	andeq	r6, r0, #48, 18	; 0xc0000
     f20:	00300104 	eorseq	r0, r0, r4, lsl #2
     f24:	2f010402 	svccs	0x00010402
     f28:	01040200 	mrseq	r0, R12_usr
     f2c:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
     f30:	0200c901 	andeq	ip, r0, #16384	; 0x4000
     f34:	13080104 	movwne	r0, #33028	; 0x8104
     f38:	01040200 	mrseq	r0, R12_usr
     f3c:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
     f40:	02002f01 	andeq	r2, r0, #1, 30
     f44:	00680104 	rsbeq	r0, r8, r4, lsl #2
     f48:	c9010402 	stmdbgt	r1, {r1, sl}
     f4c:	01040200 	mrseq	r0, R12_usr
     f50:	02001308 	andeq	r1, r0, #8, 6	; 0x20000000
     f54:	00920104 	addseq	r0, r2, r4, lsl #2
     f58:	4b010402 	blmi	41f68 <startup-0x1ffbe098>
     f5c:	01040200 	mrseq	r0, R12_usr
     f60:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
     f64:	02002f01 	andeq	r2, r0, #1, 30
     f68:	00670104 	rsbeq	r0, r7, r4, lsl #2
     f6c:	08010402 	stmdaeq	r1, {r1, sl}
     f70:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
     f74:	02004c01 	andeq	r4, r0, #256	; 0x100
     f78:	6c030104 	stfvss	f0, [r3], {4}
     f7c:	3c19033c 	ldccc	3, cr0, [r9], {60}	; 0x3c
     f80:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
     f84:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
     f88:	91080304 	tstls	r8, r4, lsl #6
     f8c:	03040200 	movweq	r0, #16896	; 0x4200
     f90:	02009108 	andeq	r9, r0, #8, 2
     f94:	91080304 	tstls	r8, r4, lsl #6
     f98:	03040200 	movweq	r0, #16896	; 0x4200
     f9c:	02004608 	andeq	r4, r0, #8, 12	; 0x800000
     fa0:	3c060104 	stfccs	f0, [r6], {4}
     fa4:	3e085006 	cdpcc	0, 0, cr5, cr8, cr6, {0}
     fa8:	21083d4b 	tstcs	r8, fp, asr #26
     fac:	21082108 	tstcs	r8, r8, lsl #2
     fb0:	21304b4d 	teqcs	r0, sp, asr #22
     fb4:	3e4b3e4b 	cdpcc	14, 4, cr3, cr11, cr11, {2}
     fb8:	034b3e4b 	movteq	r3, #48715	; 0xbe4b
     fbc:	0e033c75 	mcreq	12, 0, r3, cr3, cr5, {3}
     fc0:	0b023058 	bleq	8d128 <startup-0x1ff72ed8>
     fc4:	72010100 	andvc	r0, r1, #0, 2
     fc8:	02000000 	andeq	r0, r0, #0
     fcc:	00005b00 	andeq	r5, r0, r0, lsl #22
     fd0:	fb010200 	blx	417da <startup-0x1ffbe826>
     fd4:	01000d0e 	tsteq	r0, lr, lsl #26
     fd8:	00010101 	andeq	r0, r1, r1, lsl #2
     fdc:	00010000 	andeq	r0, r1, r0
     fe0:	3a430100 	bcc	10c13e8 <startup-0x1ef3ec18>
     fe4:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     fe8:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; f34 <startup-0x1ffff0cc>
     fec:	616c706f 	cmnvs	ip, pc, rrx
     ff0:	61726f62 	cmnvs	r2, r2, ror #30
     ff4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     ff8:	442f7265 	strtmi	r7, [pc], #-613	; 1000 <startup-0x1ffff000>
     ffc:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
    1000:	63746957 	cmnvs	r4, #1425408	; 0x15c000
    1004:	00432f68 	subeq	r2, r3, r8, ror #30
    1008:	616d6900 	cmnvs	sp, r0, lsl #18
    100c:	632e6567 			; <UNDEFINED> instruction: 0x632e6567
    1010:	00000100 	andeq	r0, r0, r0, lsl #2
    1014:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
    1018:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
    101c:	00000100 	andeq	r0, r0, r0, lsl #2
    1020:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
    1024:	00682e65 	rsbeq	r2, r8, r5, ror #28
    1028:	00000001 	andeq	r0, r0, r1
    102c:	d4020500 	strle	r0, [r2], #-1280	; 0xfffffb00
    1030:	1420002f 	strtne	r0, [r0], #-47	; 0xffffffd1
    1034:	3d3d3d75 	ldccc	13, cr3, [sp, #-468]!	; 0xfffffe2c
    1038:	01000402 	tsteq	r0, r2, lsl #8
    103c:	00006801 	andeq	r6, r0, r1, lsl #16
    1040:	51000200 	mrspl	r0, R8_usr
    1044:	02000000 	andeq	r0, r0, #0
    1048:	0d0efb01 	vstreq	d15, [lr, #-4]
    104c:	01010100 	mrseq	r0, (UNDEF: 17)
    1050:	00000001 	andeq	r0, r0, r1
    1054:	01000001 	tsteq	r0, r1
    1058:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    105c:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    1060:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    1064:	6f62616c 	svcvs	0x0062616c
    1068:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    106c:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    1070:	5049442f 	subpl	r4, r9, pc, lsr #8
    1074:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    1078:	2f686374 	svccs	0x00686374
    107c:	73000043 	movwvc	r0, #67	; 0x43
    1080:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
    1084:	00632e65 	rsbeq	r2, r3, r5, ror #28
    1088:	73000001 	movwvc	r0, #1
    108c:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
    1090:	00682e65 	rsbeq	r2, r8, r5, ror #28
    1094:	00000001 	andeq	r0, r0, r1
    1098:	fc020500 	stc2	5, cr0, [r2], {-0}
    109c:	1520002f 	strne	r0, [r0, #-47]!	; 0xffffffd1
    10a0:	3d3d3d75 	ldccc	13, cr3, [sp, #-468]!	; 0xfffffe2c
    10a4:	01000402 	tsteq	r0, r2, lsl #8
    10a8:	00006c01 	andeq	r6, r0, r1, lsl #24
    10ac:	4d000200 	sfmmi	f0, 4, [r0, #-0]
    10b0:	02000000 	andeq	r0, r0, #0
    10b4:	0d0efb01 	vstreq	d15, [lr, #-4]
    10b8:	01010100 	mrseq	r0, (UNDEF: 17)
    10bc:	00000001 	andeq	r0, r0, r1
    10c0:	01000001 	tsteq	r0, r1
    10c4:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    10c8:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    10cc:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    10d0:	6f62616c 	svcvs	0x0062616c
    10d4:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    10d8:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    10dc:	5049442f 	subpl	r4, r9, pc, lsr #8
    10e0:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    10e4:	2f686374 	svccs	0x00686374
    10e8:	67000043 	strvs	r0, [r0, -r3, asr #32]
    10ec:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    10f0:	00010063 	andeq	r0, r1, r3, rrx
    10f4:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    10f8:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    10fc:	00000001 	andeq	r0, r0, r1
    1100:	24020500 	strcs	r0, [r2], #-1280	; 0xfffffb00
    1104:	15200030 	strne	r0, [r0, #-48]!	; 0xffffffd0
    1108:	2f763d2f 	svccs	0x00763d2f
    110c:	4b693d59 	blmi	1a50678 <startup-0x1e5af988>
    1110:	22309167 	eorscs	r9, r0, #-1073741799	; 0xc0000019
    1114:	01000402 	tsteq	r0, r2, lsl #8
    1118:	00015a01 	andeq	r5, r1, r1, lsl #20
    111c:	81000200 	mrshi	r0, R8_usr
    1120:	02000000 	andeq	r0, r0, #0
    1124:	0d0efb01 	vstreq	d15, [lr, #-4]
    1128:	01010100 	mrseq	r0, (UNDEF: 17)
    112c:	00000001 	andeq	r0, r0, r1
    1130:	01000001 	tsteq	r0, r1
    1134:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    1138:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    113c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    1140:	6f62616c 	svcvs	0x0062616c
    1144:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1148:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    114c:	5049442f 	subpl	r4, r9, pc, lsr #8
    1150:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    1154:	2f686374 	svccs	0x00686374
    1158:	61000043 	tstvs	r0, r3, asr #32
    115c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1160:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    1164:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
    1168:	0100632e 	tsteq	r0, lr, lsr #6
    116c:	70730000 	rsbsvc	r0, r3, r0
    1170:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1174:	0100682e 	tsteq	r0, lr, lsr #16
    1178:	6d690000 	stclvs	0, cr0, [r9, #-0]
    117c:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
    1180:	00010068 	andeq	r0, r1, r8, rrx
    1184:	6d616700 	stclvs	7, cr6, [r1, #-0]
    1188:	6a626f65 	bvs	189cf24 <startup-0x1e7630dc>
    118c:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
    1190:	00010068 	andeq	r0, r1, r8, rrx
    1194:	61726700 	cmnvs	r2, r0, lsl #14
    1198:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    119c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    11a0:	00000001 	andeq	r0, r0, r1
    11a4:	90020500 	andls	r0, r2, r0, lsl #10
    11a8:	03200030 			; <UNDEFINED> instruction: 0x03200030
    11ac:	5969012e 	stmdbpl	r9!, {r1, r2, r3, r5, r8}^
    11b0:	696859bb 	stmdbvs	r8!, {r0, r1, r3, r4, r5, r7, r8, fp, ip, lr}^
    11b4:	59130859 	ldmdbpl	r3, {r0, r3, r4, r6, fp}
    11b8:	3d3d6776 	ldccc	7, cr6, [sp, #-472]!	; 0xfffffe28
    11bc:	3d674c59 	stclcc	12, cr4, [r7, #-356]!	; 0xfffffe9c
    11c0:	3e4c593d 			; <UNDEFINED> instruction: 0x3e4c593d
    11c4:	5a3d3d67 	bpl	f50768 <startup-0x1f0af898>
    11c8:	842f6767 	strthi	r6, [pc], #-1895	; 11d0 <startup-0x1fffee30>
    11cc:	3d3d673e 	ldccc	7, cr6, [sp, #-248]!	; 0xffffff08
    11d0:	2f67675a 	svccs	0x0067675a
    11d4:	4b3d6784 	blmi	f5afec <startup-0x1f0a5014>
    11d8:	3e683d2f 	cdpcc	13, 6, cr3, cr8, cr15, {1}
    11dc:	4b2f2f3d 	blmi	bcced8 <startup-0x1f433128>
    11e0:	67762f3d 			; <UNDEFINED> instruction: 0x67762f3d
    11e4:	01040200 	mrseq	r0, R12_usr
    11e8:	83062006 	movwhi	r2, #24582	; 0x6006
    11ec:	4c3d593d 			; <UNDEFINED> instruction: 0x4c3d593d
    11f0:	764b6791 			; <UNDEFINED> instruction: 0x764b6791
    11f4:	00304c9f 	mlaseq	r0, pc, ip, r4	; <UNPREDICTABLE>
    11f8:	06010402 	streq	r0, [r1], -r2, lsl #8
    11fc:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
    1200:	02003f3d 	andeq	r3, r0, #61, 30	; 0xf4
    1204:	20060104 	andcs	r0, r6, r4, lsl #2
    1208:	3d3d8306 	ldccc	3, cr8, [sp, #-24]!	; 0xffffffe8
    120c:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
    1210:	06200601 	strteq	r0, [r0], -r1, lsl #12
    1214:	3f3d3d83 	svccc	0x003d3d83
    1218:	01040200 	mrseq	r0, R12_usr
    121c:	83062006 	movwhi	r2, #24582	; 0x6006
    1220:	3e3f3d3d 	mrccc	13, 1, r3, cr15, cr13, {1}
    1224:	2f843d34 	svccs	0x00843d34
    1228:	3e3e2f2f 	cdpcc	15, 3, cr2, cr14, cr15, {1}
    122c:	214b2f84 	smlalbbcs	r2, fp, r4, pc	; <UNPREDICTABLE>
    1230:	4b2f4d73 	blmi	bd4804 <startup-0x1f42b7fc>
    1234:	684d7321 	stmdavs	sp, {r0, r5, r8, r9, ip, sp, lr}^
    1238:	214b3059 	qdaddcs	r3, r9, fp
    123c:	214b4d73 	hvccs	46291	; 0xb4d3
    1240:	4c4b4e73 	mcrrmi	14, 7, r4, fp, cr3
    1244:	2f4b3075 	svccs	0x004b3075
    1248:	0073213d 	rsbseq	r2, r3, sp, lsr r1
    124c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1250:	4b6b064a 	blmi	1ac2b80 <startup-0x1e53d480>
    1254:	73213d2f 			; <UNDEFINED> instruction: 0x73213d2f
    1258:	01040200 	mrseq	r0, R12_usr
    125c:	6b064a06 	blvs	193a7c <startup-0x1fe6c584>
    1260:	753e4e4b 	ldrvc	r4, [lr, #-3659]!	; 0xfffff1b5
    1264:	4b2f2f68 	blmi	bcd00c <startup-0x1f432ff4>
    1268:	4d73213d 	ldfmie	f2, [r3, #-244]!	; 0xffffff0c
    126c:	73212f4b 			; <UNDEFINED> instruction: 0x73212f4b
    1270:	0802214d 	stmdaeq	r2, {r0, r2, r3, r6, r8, sp}
    1274:	76010100 	strvc	r0, [r1], -r0, lsl #2
    1278:	02000000 	andeq	r0, r0, #0
    127c:	00005700 	andeq	r5, r0, r0, lsl #14
    1280:	fb010200 	blx	41a8a <startup-0x1ffbe576>
    1284:	01000d0e 	tsteq	r0, lr, lsl #26
    1288:	00010101 	andeq	r0, r1, r1, lsl #2
    128c:	00010000 	andeq	r0, r1, r0
    1290:	3a430100 	bcc	10c1698 <startup-0x1ef3e968>
    1294:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
    1298:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 11e4 <startup-0x1fffee1c>
    129c:	616c706f 	cmnvs	ip, pc, rrx
    12a0:	61726f62 	cmnvs	r2, r2, ror #30
    12a4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    12a8:	442f7265 	strtmi	r7, [pc], #-613	; 12b0 <startup-0x1fffed50>
    12ac:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
    12b0:	63746957 	cmnvs	r4, #1425408	; 0x15c000
    12b4:	00432f68 	subeq	r2, r3, r8, ror #30
    12b8:	6f6c7300 	svcvs	0x006c7300
    12bc:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
    12c0:	632e7478 			; <UNDEFINED> instruction: 0x632e7478
    12c4:	00000100 	andeq	r0, r0, r0, lsl #2
    12c8:	776f6c73 			; <UNDEFINED> instruction: 0x776f6c73
    12cc:	7865745f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
    12d0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    12d4:	00000001 	andeq	r0, r0, r1
    12d8:	b0020500 	andlt	r0, r2, r0, lsl #10
    12dc:	15200035 	strne	r0, [r0, #-53]!	; 0xffffffcb
    12e0:	84c99f59 	strbhi	r9, [r9], #3929	; 0xf59
    12e4:	3d754c59 	ldclcc	12, cr4, [r5, #-356]!	; 0xfffffe9c
    12e8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    12ec:	01000702 	tsteq	r0, r2, lsl #14
    12f0:	0000d601 	andeq	sp, r0, r1, lsl #12
    12f4:	ab000200 	blge	1afc <startup-0x1fffe504>
    12f8:	02000000 	andeq	r0, r0, #0
    12fc:	0d0efb01 	vstreq	d15, [lr, #-4]
    1300:	01010100 	mrseq	r0, (UNDEF: 17)
    1304:	00000001 	andeq	r0, r0, r1
    1308:	01000001 	tsteq	r0, r1
    130c:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    1310:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    1314:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    1318:	6f62616c 	svcvs	0x0062616c
    131c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1320:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    1324:	5049442f 	subpl	r4, r9, pc, lsr #8
    1328:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    132c:	2f686374 	svccs	0x00686374
    1330:	69000043 	stmdbvs	r0, {r0, r1, r6}
    1334:	6f6f646e 	svcvs	0x006f646e
    1338:	632e7372 			; <UNDEFINED> instruction: 0x632e7372
    133c:	00000100 	andeq	r0, r0, r0, lsl #2
    1340:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
    1344:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
    1348:	00000100 	andeq	r0, r0, r0, lsl #2
    134c:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
    1350:	00682e65 	rsbeq	r2, r8, r5, ror #28
    1354:	67000001 	strvs	r0, [r0, -r1]
    1358:	6f656d61 	svcvs	0x00656d61
    135c:	63656a62 	cmnvs	r5, #401408	; 0x62000
    1360:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1364:	69000001 	stmdbvs	r0, {r0}
    1368:	6f6f646e 	svcvs	0x006f646e
    136c:	625f7372 	subsvs	r7, pc, #-939524095	; 0xc8000001
    1370:	6b63616c 	blvs	18d9928 <startup-0x1e7266d8>
    1374:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
    1378:	00000100 	andeq	r0, r0, r0, lsl #2
    137c:	6f646e69 	svcvs	0x00646e69
    1380:	5f73726f 	svcpl	0x0073726f
    1384:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
    1388:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
    138c:	00000100 	andeq	r0, r0, r0, lsl #2
    1390:	6f646e69 	svcvs	0x00646e69
    1394:	5f73726f 	svcpl	0x0073726f
    1398:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    139c:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
    13a0:	0001006d 	andeq	r0, r1, sp, rrx
    13a4:	05000000 	streq	r0, [r0, #-0]
    13a8:	00364402 	eorseq	r4, r6, r2, lsl #8
    13ac:	01130320 	tsteq	r3, r0, lsr #6
    13b0:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
    13b4:	2f3d672f 	svccs	0x003d672f
    13b8:	5a083e67 	bpl	210d5c <startup-0x1fdef2a4>
    13bc:	3e2f4b4c 	vnmulcc.f64	d4, d15, d12
    13c0:	3d3e934c 	ldccc	3, cr9, [lr, #-304]!	; 0xfffffed0
    13c4:	083d3d3d 	ldmdaeq	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
    13c8:	da010100 	ble	417d0 <startup-0x1ffbe830>
    13cc:	02000000 	andeq	r0, r0, #0
    13d0:	0000af00 	andeq	sl, r0, r0, lsl #30
    13d4:	fb010200 	blx	41bde <startup-0x1ffbe422>
    13d8:	01000d0e 	tsteq	r0, lr, lsl #26
    13dc:	00010101 	andeq	r0, r1, r1, lsl #2
    13e0:	00010000 	andeq	r0, r1, r0
    13e4:	3a430100 	bcc	10c17ec <startup-0x1ef3e814>
    13e8:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
    13ec:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 1338 <startup-0x1fffecc8>
    13f0:	616c706f 	cmnvs	ip, pc, rrx
    13f4:	61726f62 	cmnvs	r2, r2, ror #30
    13f8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    13fc:	442f7265 	strtmi	r7, [pc], #-613	; 1404 <startup-0x1fffebfc>
    1400:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
    1404:	63746957 	cmnvs	r4, #1425408	; 0x15c000
    1408:	00432f68 	subeq	r2, r3, r8, ror #30
    140c:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1410:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1414:	00632e32 	rsbeq	r2, r3, r2, lsr lr
    1418:	73000001 	movwvc	r0, #1
    141c:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
    1420:	00682e65 	rsbeq	r2, r8, r5, ror #28
    1424:	69000001 	stmdbvs	r0, {r0}
    1428:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    142c:	0100682e 	tsteq	r0, lr, lsr #16
    1430:	61670000 	cmnvs	r7, r0
    1434:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
    1438:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
    143c:	0100682e 	tsteq	r0, lr, lsr #16
    1440:	6e690000 	cdpvs	0, 6, cr0, cr9, cr0, {0}
    1444:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1448:	625f3273 	subsvs	r3, pc, #805306375	; 0x30000007
    144c:	6b63616c 	blvs	18d9a04 <startup-0x1e7265fc>
    1450:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
    1454:	00000100 	andeq	r0, r0, r0, lsl #2
    1458:	6f646e69 	svcvs	0x00646e69
    145c:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1460:	6172675f 	cmnvs	r2, pc, asr r7
    1464:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
    1468:	0001006d 	andeq	r0, r1, sp, rrx
    146c:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1470:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1474:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    1478:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
    147c:	006d6278 	rsbeq	r6, sp, r8, ror r2
    1480:	00000001 	andeq	r0, r0, r1
    1484:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
    1488:	03200037 			; <UNDEFINED> instruction: 0x03200037
    148c:	2f3e0113 	svccs	0x003e0113
    1490:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
    1494:	3e672f3d 	mcrcc	15, 3, r2, cr7, cr13, {1}
    1498:	4b4c5a08 	blmi	1317cc0 <startup-0x1ece8340>
    149c:	934c3e2f 	movtls	r3, #52783	; 0xce2f
    14a0:	3d3d3d3e 	ldccc	13, cr3, [sp, #-248]!	; 0xffffff08
    14a4:	0100083d 	tsteq	r0, sp, lsr r8
    14a8:	0000d201 	andeq	sp, r0, r1, lsl #4
    14ac:	a7000200 	strge	r0, [r0, -r0, lsl #4]
    14b0:	02000000 	andeq	r0, r0, #0
    14b4:	0d0efb01 	vstreq	d15, [lr, #-4]
    14b8:	01010100 	mrseq	r0, (UNDEF: 17)
    14bc:	00000001 	andeq	r0, r0, r1
    14c0:	01000001 	tsteq	r0, r1
    14c4:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    14c8:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    14cc:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    14d0:	6f62616c 	svcvs	0x0062616c
    14d4:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    14d8:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    14dc:	5049442f 	subpl	r4, r9, pc, lsr #8
    14e0:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    14e4:	2f686374 	svccs	0x00686374
    14e8:	74000043 	strvc	r0, [r0], #-67	; 0xffffffbd
    14ec:	68706f72 	ldmdavs	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    14f0:	00632e79 	rsbeq	r2, r3, r9, ror lr
    14f4:	73000001 	movwvc	r0, #1
    14f8:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
    14fc:	00682e65 	rsbeq	r2, r8, r5, ror #28
    1500:	69000001 	stmdbvs	r0, {r0}
    1504:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1508:	0100682e 	tsteq	r0, lr, lsr #16
    150c:	61670000 	cmnvs	r7, r0
    1510:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
    1514:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
    1518:	0100682e 	tsteq	r0, lr, lsr #16
    151c:	72740000 	rsbsvc	r0, r4, #0
    1520:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1524:	616c625f 	cmnvs	ip, pc, asr r2
    1528:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    152c:	01006d62 	tsteq	r0, r2, ror #26
    1530:	72740000 	rsbsvc	r0, r4, #0
    1534:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1538:	6172675f 	cmnvs	r2, pc, asr r7
    153c:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
    1540:	0001006d 	andeq	r0, r1, sp, rrx
    1544:	6f727400 	svcvs	0x00727400
    1548:	5f796870 	svcpl	0x00796870
    154c:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    1550:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
    1554:	0001006d 	andeq	r0, r1, sp, rrx
    1558:	05000000 	streq	r0, [r0, #-0]
    155c:	00381402 	eorseq	r1, r8, r2, lsl #8
    1560:	01130320 	tsteq	r3, r0, lsr #6
    1564:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
    1568:	2f3d672f 	svccs	0x003d672f
    156c:	5a083e67 	bpl	210f10 <startup-0x1fdef0f0>
    1570:	3e2f4b4c 	vnmulcc.f64	d4, d15, d12
    1574:	3d3e934c 	ldccc	3, cr9, [lr, #-304]!	; 0xfffffed0
    1578:	083d3d3d 	ldmdaeq	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
    157c:	Address 0x0000157c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
       4:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
       8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
       c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
      10:	696c0073 	stmdbvs	ip!, {r0, r1, r4, r5, r6}^
      14:	49746867 	ldmdbmi	r4!, {r0, r1, r2, r5, r6, fp, sp, lr}^
      18:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
      1c:	61726700 	cmnvs	r2, r0, lsl #14
      20:	616d4979 	smcvs	54425	; 0xd499
      24:	63006567 	movwvs	r6, #1383	; 0x567
      28:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
      2c:	72675f65 	rsbvc	r5, r7, #404	; 0x194
      30:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
      34:	00737469 	rsbseq	r7, r3, r9, ror #8
      38:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
      3c:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
      40:	5f747865 	svcpl	0x00747865
      44:	0061726b 	rsbeq	r7, r1, fp, ror #4
      48:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
      4c:	65766f5f 	ldrbvs	r6, [r6, #-3935]!	; 0xfffff0a1
      50:	5f6e0072 	svcpl	0x006e0072
      54:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
      58:	63007365 	movwvs	r7, #869	; 0x365
      5c:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
      60:	67694c65 	strbvs	r4, [r9, -r5, ror #24]!
      64:	70007468 	andvc	r7, r0, r8, ror #8
      68:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
      6c:	30317265 	eorscc	r7, r1, r5, ror #4
      70:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
      74:	73614370 	cmnvc	r1, #112, 6	; 0xc0000001
      78:	42656c74 	rsbmi	r6, r5, #116, 24	; 0x7400
      7c:	6b63616c 	blvs	18d8634 <startup-0x1e7279cc>
      80:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
      84:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
      88:	332e3620 			; <UNDEFINED> instruction: 0x332e3620
      8c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
      90:	30373130 	eorscc	r3, r7, r0, lsr r1
      94:	20353132 	eorscs	r3, r5, r2, lsr r1
      98:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
      9c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
      a0:	415b2029 	cmpmi	fp, r9, lsr #32
      a4:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff35a <firstTime.4040+0xdfff5296>
      a8:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
      ac:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
      b0:	72622d36 	rsbvc	r2, r2, #3456	; 0xd80
      b4:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
      b8:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
      bc:	6f697369 	svcvs	0x00697369
      c0:	3432206e 	ldrtcc	r2, [r2], #-110	; 0xffffff92
      c4:	32313535 	eorscc	r3, r1, #222298112	; 0xd400000
      c8:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
      cc:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
      d0:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
      d4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
      d8:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
      dc:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
      e0:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
      e4:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
      e8:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
      ec:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
      f0:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
      f4:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
      f8:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
      fc:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     100:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
     104:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
     108:	20672d20 	rsbcs	r2, r7, r0, lsr #26
     10c:	20304f2d 	eorscs	r4, r0, sp, lsr #30
     110:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
     114:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
     118:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     11c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     120:	5f736900 	svcpl	0x00736900
     124:	6d696c63 	stclvs	12, cr6, [r9, #-396]!	; 0xfffffe74
     128:	676e6962 	strbvs	r6, [lr, -r2, ror #18]!
     12c:	73616300 	cmnvc	r1, #0, 6
     130:	4f656c74 	svcmi	0x00656c74
     134:	6d006a62 	vstrvs	s12, [r0, #-392]	; 0xfffffe78
     138:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     13c:	6f507265 	svcvs	0x00507265
     140:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     144:	72700072 	rsbsvc	r0, r0, #114	; 0x72
     148:	5f737365 	svcpl	0x00737365
     14c:	63616c62 	cmnvs	r1, #25088	; 0x6200
     150:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     154:	66007374 			; <UNDEFINED> instruction: 0x66007374
     158:	31657269 	cmncc	r5, r9, ror #4
     15c:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
     160:	73726f6f 	cmnvc	r2, #444	; 0x1bc
     164:	73616300 	cmnvc	r1, #0, 6
     168:	49656c74 	stmdbmi	r5!, {r2, r4, r5, r6, sl, fp, sp, lr}^
     16c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     170:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
     174:	49656c74 	stmdbmi	r5!, {r2, r4, r5, r6, sl, fp, sp, lr}^
     178:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     17c:	61747300 	cmnvs	r4, r0, lsl #6
     180:	70757472 	rsbsvc	r7, r5, r2, ror r4
     184:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     188:	6d003174 	stfvss	f3, [r0, #-464]	; 0xfffffe30
     18c:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     190:	694c7265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp, lr}^
     194:	00746867 	rsbseq	r6, r4, r7, ror #16
     198:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     19c:	696c5f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     1a0:	5f746867 	svcpl	0x00746867
     1a4:	73746962 	cmnvc	r4, #1605632	; 0x188000
     1a8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     1ac:	6e6f4d70 	mcrvs	13, 3, r4, cr15, cr0, {3}
     1b0:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     1b4:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     1b8:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     1bc:	70003274 	andvc	r3, r0, r4, ror r2
     1c0:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     1c4:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     1c8:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     1cc:	74003474 	strvc	r3, [r0], #-1140	; 0xfffffb8c
     1d0:	35747865 	ldrbcc	r7, [r4, #-2149]!	; 0xfffff79b
     1d4:	72696600 	rsbvc	r6, r9, #0, 12
     1d8:	68003165 	stmdavs	r0, {r0, r2, r5, r6, r8, ip, sp}
     1dc:	635f7361 	cmpvs	pc, #-2080374783	; 0x84000001
     1e0:	626d696c 	rsbvs	r6, sp, #108, 18	; 0x1b0000
     1e4:	74006465 	strvc	r6, [r0], #-1125	; 0xfffffb9b
     1e8:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     1ec:	65740067 	ldrbvs	r0, [r4, #-103]!	; 0xffffff99
     1f0:	00337478 	eorseq	r7, r3, r8, ror r4
     1f4:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     1f8:	69740038 	ldmdbvs	r4!, {r3, r4, r5}^
     1fc:	5f656c74 	svcpl	0x00656c74
     200:	63616c62 	cmnvs	r1, #25088	; 0x6200
     204:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     208:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     20c:	4d706d65 	ldclmi	13, cr6, [r0, #-404]!	; 0xfffffe6c
     210:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     214:	694c7265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp, lr}^
     218:	00746867 	rsbseq	r6, r4, r7, ror #16
     21c:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     220:	72640037 	rsbvc	r0, r4, #55	; 0x37
     224:	625f7761 	subsvs	r7, pc, #25427968	; 0x1840000
     228:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     22c:	6c625f72 	stclvs	15, cr5, [r2], #-456	; 0xfffffe38
     230:	006b6361 	rsbeq	r6, fp, r1, ror #6
     234:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     238:	65740036 	ldrbvs	r0, [r4, #-54]!	; 0xffffffca
     23c:	00397478 	eorseq	r7, r9, r8, ror r4
     240:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
     244:	50726574 	rsbspl	r6, r2, r4, ror r5
     248:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     24c:	00327265 	eorseq	r7, r2, r5, ror #4
     250:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
     254:	50726574 	rsbspl	r6, r2, r4, ror r5
     258:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     25c:	00337265 	eorseq	r7, r3, r5, ror #4
     260:	32776f72 	rsbscc	r6, r7, #456	; 0x1c8
     264:	73696400 	cmnvc	r9, #0, 8
     268:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
     26c:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     270:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     274:	616c625f 	cmnvs	ip, pc, asr r2
     278:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
     27c:	00737469 	rsbseq	r7, r3, r9, ror #8
     280:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     284:	7070615f 	rsbsvc	r6, r0, pc, asr r1
     288:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     28c:	65745f67 	ldrbvs	r5, [r4, #-3943]!	; 0xfffff099
     290:	70007478 	andvc	r7, r0, r8, ror r4
     294:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     298:	006a624f 	rsbeq	r6, sl, pc, asr #4
     29c:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
     2a0:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     2a4:	5f726566 	svcpl	0x00726566
     2a8:	63616c62 	cmnvs	r1, #25088	; 0x6200
     2ac:	72675f6b 	rsbvc	r5, r7, #428	; 0x1ac
     2b0:	6c5f7961 	mrrcvs	9, 6, r7, pc, cr1	; <UNPREDICTABLE>
     2b4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     2b8:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     2bc:	72745f74 	rsbsvc	r5, r4, #116, 30	; 0x1d0
     2c0:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
     2c4:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     2c8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     2cc:	6f700035 	svcvs	0x00700035
     2d0:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     2d4:	70003672 	andvc	r3, r0, r2, ror r6
     2d8:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     2dc:	00377265 	eorseq	r7, r7, r5, ror #4
     2e0:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     2e4:	38726574 	ldmdacc	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     2e8:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     2ec:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     2f0:	65740039 	ldrbvs	r0, [r4, #-57]!	; 0xffffffc7
     2f4:	6143706d 	cmpvs	r3, sp, rrx
     2f8:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     2fc:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     300:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
     304:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
     308:	64697700 	strbtvs	r7, [r9], #-1792	; 0xfffff900
     30c:	64006874 	strvs	r6, [r0], #-2164	; 0xfffff78c
     310:	5f776172 	svcpl	0x00776172
     314:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     318:	625f7265 	subsvs	r7, pc, #1342177286	; 0x50000006
     31c:	6b63616c 	blvs	18d88d4 <startup-0x1e72772c>
     320:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     324:	73007468 	movwvc	r7, #1128	; 0x468
     328:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
     32c:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     330:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     334:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     338:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
     33c:	5f79616c 	svcpl	0x0079616c
     340:	69746e75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     344:	65745f6c 	ldrbvs	r5, [r4, #-3948]!	; 0xfffff094
     348:	74007478 	strvc	r7, [r0], #-1144	; 0xfffffb88
     34c:	4d706d65 	ldclmi	13, cr6, [r0, #-404]!	; 0xfffffe6c
     350:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     354:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
     358:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     35c:	63616c42 	cmnvs	r1, #16896	; 0x4200
     360:	7270006b 	rsbsvc	r0, r0, #107	; 0x6b
     364:	5f737365 	svcpl	0x00737365
     368:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     36c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     370:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
     374:	665f7469 	ldrbvs	r7, [pc], -r9, ror #8
     378:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
     37c:	696e6100 	stmdbvs	lr!, {r8, sp, lr}^
     380:	6974616d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     384:	735f6e6f 	cmpvc	pc, #1776	; 0x6f0
     388:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     38c:	696e6100 	stmdbvs	lr!, {r8, sp, lr}^
     390:	6974616d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     394:	635f6e6f 	cmpvs	pc, #1776	; 0x6f0
     398:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     39c:	6d007265 	sfmvs	f7, 4, [r0, #-404]	; 0xfffffe6c
     3a0:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     3a4:	624f7265 	subvs	r7, pc, #1342177286	; 0x50000006
     3a8:	6973006a 	ldmdbvs	r3!, {r1, r3, r5, r6}^
     3ac:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
     3b0:	74006570 	strvc	r6, [r0], #-1392	; 0xfffffa90
     3b4:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     3b8:	6172675f 	cmnvs	r2, pc, asr r7
     3bc:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     3c0:	68007374 	stmdavs	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
     3c4:	00726961 	rsbseq	r6, r2, r1, ror #18
     3c8:	6d61476e 	stclvs	7, cr4, [r1, #-440]!	; 0xfffffe48
     3cc:	6a624f65 	bvs	1894168 <startup-0x1e76be98>
     3d0:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
     3d4:	65727000 	ldrbvs	r7, [r2, #-0]!
     3d8:	6c5f7373 	mrrcvs	3, 7, r7, pc, cr3	; <UNPREDICTABLE>
     3dc:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     3e0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     3e4:	6f700073 	svcvs	0x00700073
     3e8:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     3ec:	70003472 	andvc	r3, r0, r2, ror r4
     3f0:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     3f4:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     3f8:	6d690065 	stclvs	0, cr0, [r9, #-404]!	; 0xfffffe6c
     3fc:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     400:	6f687300 	svcvs	0x00687300
     404:	745f7472 	ldrbvc	r7, [pc], #-1138	; 40c <startup-0x1ffffbf4>
     408:	00747865 	rsbseq	r7, r4, r5, ror #16
     40c:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
     410:	5f746e65 	svcpl	0x00746e65
     414:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
     418:	69740065 	ldmdbvs	r4!, {r0, r2, r5, r6}^
     41c:	4c656c74 	stclmi	12, cr6, [r5], #-464	; 0xfffffe30
     420:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     424:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     428:	65725070 	ldrbvs	r5, [r2, #-112]!	; 0xffffff90
     42c:	72477373 	subvc	r7, r7, #-872415231	; 0xcc000001
     430:	69007961 	stmdbvs	r0, {r0, r5, r6, r8, fp, ip, sp, lr}
     434:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     438:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
     43c:	74007365 	strvc	r7, [r0], #-869	; 0xfffffc9b
     440:	43706d65 	cmnmi	r0, #6464	; 0x1940
     444:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
     448:	61724765 	cmnvs	r2, r5, ror #14
     44c:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     450:	6954706d 	ldmdbvs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
     454:	42656c74 	rsbmi	r6, r5, #116, 24	; 0x7400
     458:	6b63616c 	blvs	18d8a10 <startup-0x1e7275f0>
     45c:	736e7500 	cmnvc	lr, #0, 10
     460:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     464:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
     468:	64007261 	strvs	r7, [r0], #-609	; 0xfffffd9f
     46c:	5f776172 	svcpl	0x00776172
     470:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     474:	625f7265 	subsvs	r7, pc, #1342177286	; 0x50000006
     478:	6b63616c 	blvs	18d8a30 <startup-0x1e7275d0>
     47c:	6172675f 	cmnvs	r2, pc, asr r7
     480:	6f6d0079 	svcvs	0x006d0079
     484:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     488:	696c5f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     48c:	5f746867 	svcpl	0x00746867
     490:	73746962 	cmnvc	r4, #1605632	; 0x188000
     494:	73616300 	cmnvc	r1, #0, 6
     498:	5f656c74 	svcpl	0x00656c74
     49c:	63616c62 	cmnvs	r1, #25088	; 0x6200
     4a0:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     4a4:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     4a8:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     4ac:	006a624f 	rsbeq	r6, sl, pc, asr #4
     4b0:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     4b4:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     4b8:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     4bc:	6f62616c 	svcvs	0x0062616c
     4c0:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     4c4:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     4c8:	5049442f 	subpl	r4, r9, pc, lsr #8
     4cc:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     4d0:	2f686374 	svccs	0x00686374
     4d4:	74732f43 	ldrbtvc	r2, [r3], #-3907	; 0xfffff0bd
     4d8:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
     4dc:	00632e70 	rsbeq	r2, r3, r0, ror lr
     4e0:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     4e4:	656a624f 	strbvs	r6, [sl, #-591]!	; 0xfffffdb1
     4e8:	00737463 	rsbseq	r7, r3, r3, ror #8
     4ec:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
     4f0:	7247656c 	subvc	r6, r7, #108, 10	; 0x1b000000
     4f4:	6d007961 	vstrvs.16	s14, [r0, #-194]	; 0xffffff3e	; <UNPREDICTABLE>
     4f8:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     4fc:	72477265 	subvc	r7, r7, #1342177286	; 0x50000006
     500:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     504:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     508:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     50c:	72756300 	rsbsvc	r6, r5, #0, 6
     510:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
     514:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
     518:	006e6565 	rsbeq	r6, lr, r5, ror #10
     51c:	74736964 	ldrbtvc	r6, [r3], #-2404	; 0xfffff69c
     520:	65636e61 	strbvs	r6, [r3, #-3681]!	; 0xfffff19f
     524:	616c705f 	qdsubvs	r7, pc, ip	; <UNPREDICTABLE>
     528:	5f726579 	svcpl	0x00726579
     52c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     530:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     534:	65725070 	ldrbvs	r5, [r2, #-112]!	; 0xffffff90
     538:	6c427373 	mcrrvs	3, 7, r7, r2, cr3
     53c:	006b6361 	rsbeq	r6, fp, r1, ror #6
     540:	625f6762 	subsvs	r6, pc, #25690112	; 0x1880000
     544:	00737469 	rsbseq	r7, r3, r9, ror #8
     548:	63616c62 	cmnvs	r1, #25088	; 0x6200
     54c:	616d496b 	cmnvs	sp, fp, ror #18
     550:	6d006567 	cfstr32vs	mvfx6, [r0, #-412]	; 0xfffffe64
     554:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     558:	675f7265 	ldrbvs	r7, [pc, -r5, ror #4]
     55c:	5f796172 	svcpl	0x00796172
     560:	73746962 	cmnvc	r4, #1605632	; 0x188000
     564:	73616300 	cmnvc	r1, #0, 6
     568:	49656c74 	stmdbmi	r5!, {r2, r4, r5, r6, sl, fp, sp, lr}^
     56c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     570:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     574:	6d49656c 	cfstr64vs	mvdx6, [r9, #-432]	; 0xfffffe50
     578:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     57c:	6e617200 	cdpvs	2, 6, cr7, cr1, cr0, {0}
     580:	5f6d6f64 	svcpl	0x006d6f64
     584:	64656573 	strbtvs	r6, [r5], #-1395	; 0xfffffa8d
     588:	72696600 	rsbvc	r6, r9, #0, 12
     58c:	66003265 	strvs	r3, [r0], -r5, ror #4
     590:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     594:	72696600 	rsbvc	r6, r9, #0, 12
     598:	70003465 	andvc	r3, r0, r5, ror #8
     59c:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     5a0:	63616c42 	cmnvs	r1, #16896	; 0x4200
     5a4:	6f6d006b 	svcvs	0x006d006b
     5a8:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     5ac:	616d4972 	smcvs	54418	; 0xd492
     5b0:	79006567 	stmdbvc	r0, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     5b4:	00736f50 	rsbseq	r6, r3, r0, asr pc
     5b8:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
     5bc:	696c635f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
     5c0:	765f626d 	ldrbvc	r6, [pc], -sp, ror #4
     5c4:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     5c8:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     5cc:	00323174 	eorseq	r3, r2, r4, ror r1
     5d0:	706d6574 	rsbvc	r6, sp, r4, ror r5
     5d4:	6c746954 			; <UNDEFINED> instruction: 0x6c746954
     5d8:	67694c65 	strbvs	r4, [r9, -r5, ror #24]!
     5dc:	75007468 	strvc	r7, [r0, #-1128]	; 0xfffffb98
     5e0:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
     5e4:	72700065 	rsbsvc	r0, r0, #101	; 0x65
     5e8:	49737365 	ldmdbmi	r3!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
     5ec:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     5f0:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     5f4:	6954706d 	ldmdbvs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
     5f8:	47656c74 			; <UNDEFINED> instruction: 0x47656c74
     5fc:	00796172 	rsbseq	r6, r9, r2, ror r1
     600:	6f6c5374 	svcvs	0x006c5374
     604:	78655477 	stmdavc	r5!, {r0, r1, r2, r4, r5, r6, sl, ip, lr}^
     608:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
     60c:	5f38746e 	svcpl	0x0038746e
     610:	61620074 	smcvs	8196	; 0x2004
     614:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
     618:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     61c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     620:	61620074 	smcvs	8196	; 0x2004
     624:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
     628:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     62c:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     630:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     634:	65725070 	ldrbvs	r5, [r2, #-112]!	; 0xffffff90
     638:	694c7373 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}^
     63c:	00746867 	rsbseq	r6, r4, r7, ror #16
     640:	6d614774 	stclvs	7, cr4, [r1, #-464]!	; 0xfffffe30
     644:	6a624f65 	bvs	18943e0 <startup-0x1e76bc20>
     648:	00746365 	rsbseq	r6, r4, r5, ror #6
     64c:	736f5078 	cmnvc	pc, #120	; 0x78
     650:	73616300 	cmnvc	r1, #0, 6
     654:	42656c74 	rsbmi	r6, r5, #116, 24	; 0x7400
     658:	6b63616c 	blvs	18d8c10 <startup-0x1e7273f0>
     65c:	6d616700 	stclvs	7, cr6, [r1, #-0]
     660:	766f5f65 	strbtvc	r5, [pc], -r5, ror #30
     664:	615f7265 	cmpvs	pc, r5, ror #4
     668:	72656464 	rsbvc	r6, r5, #100, 8	; 0x64000000
     66c:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     670:	00303174 	eorseq	r3, r0, r4, ror r1
     674:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     678:	68003131 	stmdavs	r0, {r0, r4, r5, r8, ip, sp}
     67c:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
     680:	616d0074 	smcvs	53252	; 0xd004
     684:	70006e69 	andvc	r6, r0, r9, ror #28
     688:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     68c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     690:	6f6d0074 	svcvs	0x006d0074
     694:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     698:	616d4972 	smcvs	54418	; 0xd492
     69c:	00736567 	rsbseq	r6, r3, r7, ror #10
     6a0:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     6a4:	656a624f 	strbvs	r6, [sl, #-591]!	; 0xfffffdb1
     6a8:	70557463 	subsvc	r7, r5, r3, ror #8
     6ac:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
     6b0:	2f3a4300 	svccs	0x003a4300
     6b4:	2f706f6d 	svccs	0x00706f6d
     6b8:	6f4d2f63 	svcvs	0x004d2f63
     6bc:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     6c0:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     6c4:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     6c8:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     6cc:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     6d0:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     6d4:	672f432f 	strvs	r4, [pc, -pc, lsr #6]!
     6d8:	6f656d61 	svcvs	0x00656d61
     6dc:	63656a62 	cmnvs	r5, #401408	; 0x62000
     6e0:	00632e74 	rsbeq	r2, r3, r4, ror lr
     6e4:	73696874 	cmnvc	r9, #116, 16	; 0x740000
     6e8:	72696600 	rsbvc	r6, r9, #0, 12
     6ec:	72473565 	subvc	r3, r7, #423624704	; 0x19400000
     6f0:	66007961 	strvs	r7, [r0], -r1, ror #18
     6f4:	31657269 	cmncc	r5, r9, ror #4
     6f8:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     6fc:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     700:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     704:	72473265 	subvc	r3, r7, #1342177286	; 0x50000006
     708:	66007961 	strvs	r7, [r0], -r1, ror #18
     70c:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     710:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     714:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     718:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     71c:	72473465 	subvc	r3, r7, #1694498816	; 0x65000000
     720:	66007961 	strvs	r7, [r0], -r1, ror #18
     724:	42657269 	rsbmi	r7, r5, #-1879048186	; 0x90000006
     728:	6b63616c 	blvs	18d8ce0 <startup-0x1e727320>
     72c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     730:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     734:	72473365 	subvc	r3, r7, #-1811939327	; 0x94000001
     738:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     73c:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
     740:	42657269 	rsbmi	r7, r5, #-1879048186	; 0x90000006
     744:	6b63616c 	blvs	18d8cfc <startup-0x1e727304>
     748:	72696600 	rsbvc	r6, r9, #0, 12
     74c:	694c3165 	stmdbvs	ip, {r0, r2, r5, r6, r8, ip, sp}^
     750:	00746867 	rsbseq	r6, r4, r7, ror #16
     754:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     758:	67694c34 			; <UNDEFINED> instruction: 0x67694c34
     75c:	66007468 	strvs	r7, [r0], -r8, ror #8
     760:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
     764:	6172675f 	cmnvs	r2, pc, asr r7
     768:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     76c:	66007374 			; <UNDEFINED> instruction: 0x66007374
     770:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
     774:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     778:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     77c:	00737469 	rsbseq	r7, r3, r9, ror #8
     780:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     784:	67694c33 			; <UNDEFINED> instruction: 0x67694c33
     788:	70007468 	andvc	r7, r0, r8, ror #8
     78c:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     790:	00317265 	eorseq	r7, r1, r5, ror #4
     794:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     798:	33726574 	cmncc	r2, #116, 10	; 0x1d000000
     79c:	72696600 	rsbvc	r6, r9, #0, 12
     7a0:	675f3565 	ldrbvs	r3, [pc, -r5, ror #10]
     7a4:	5f796172 	svcpl	0x00796172
     7a8:	73746962 	cmnvc	r4, #1605632	; 0x188000
     7ac:	72696600 	rsbvc	r6, r9, #0, 12
     7b0:	6d493365 	stclvs	3, cr3, [r9, #-404]	; 0xfffffe6c
     7b4:	00656761 	rsbeq	r6, r5, r1, ror #14
     7b8:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     7bc:	30726574 	rsbscc	r6, r2, r4, ror r5
     7c0:	72696600 	rsbvc	r6, r9, #0, 12
     7c4:	694c3565 	stmdbvs	ip, {r0, r2, r5, r6, r8, sl, ip, sp}^
     7c8:	00746867 	rsbseq	r6, r4, r7, ror #16
     7cc:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     7d0:	32726574 	rsbscc	r6, r2, #116, 10	; 0x1d000000
     7d4:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     7d8:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     7dc:	72473565 	subvc	r3, r7, #423624704	; 0x19400000
     7e0:	66007961 	strvs	r7, [r0], -r1, ror #18
     7e4:	31657269 	cmncc	r5, r9, ror #4
     7e8:	6172675f 	cmnvs	r2, pc, asr r7
     7ec:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     7f0:	66007374 			; <UNDEFINED> instruction: 0x66007374
     7f4:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
     7f8:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     7fc:	69660074 	stmdbvs	r6!, {r2, r4, r5, r6}^
     800:	5f316572 	svcpl	0x00316572
     804:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     808:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     80c:	66007374 			; <UNDEFINED> instruction: 0x66007374
     810:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
     814:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     818:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     81c:	00737469 	rsbseq	r7, r3, r9, ror #8
     820:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     824:	006a624f 	rsbeq	r6, sl, pc, asr #4
     828:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     82c:	61724732 	cmnvs	r2, r2, lsr r7
     830:	69660079 	stmdbvs	r6!, {r0, r3, r4, r5, r6}^
     834:	5f346572 	svcpl	0x00346572
     838:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     83c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     840:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     844:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     848:	4c336572 	cfldr32mi	mvfx6, [r3], #-456	; 0xfffffe38
     84c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     850:	72696600 	rsbvc	r6, r9, #0, 12
     854:	6d493465 	cfstrdvs	mvd3, [r9, #-404]	; 0xfffffe6c
     858:	00656761 	rsbeq	r6, r5, r1, ror #14
     85c:	706d6574 	rsbvc	r6, sp, r4, ror r5
     860:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     864:	67694c31 			; <UNDEFINED> instruction: 0x67694c31
     868:	66007468 	strvs	r7, [r0], -r8, ror #8
     86c:	74737269 	ldrbtvc	r7, [r3], #-617	; 0xfffffd97
     870:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     874:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     878:	69665f74 	stmdbvs	r6!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     87c:	66006572 			; <UNDEFINED> instruction: 0x66006572
     880:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
     884:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     888:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     88c:	00737469 	rsbseq	r7, r3, r9, ror #8
     890:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     894:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     898:	66007365 	strvs	r7, [r0], -r5, ror #6
     89c:	31657269 	cmncc	r5, r9, ror #4
     8a0:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     8a4:	69660065 	stmdbvs	r6!, {r0, r2, r5, r6}^
     8a8:	47346572 			; <UNDEFINED> instruction: 0x47346572
     8ac:	00796172 	rsbseq	r6, r9, r2, ror r1
     8b0:	706d6574 	rsbvc	r6, sp, r4, ror r5
     8b4:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     8b8:	61724731 	cmnvs	r2, r1, lsr r7
     8bc:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     8c0:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     8c4:	4c346572 	cfldr32mi	mvfx6, [r4], #-456	; 0xfffffe38
     8c8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     8cc:	72696600 	rsbvc	r6, r9, #0, 12
     8d0:	6c5f3365 	mrrcvs	3, 6, r3, pc, cr5	; <UNPREDICTABLE>
     8d4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     8d8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     8dc:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     8e0:	49356572 	ldmdbmi	r5!, {r1, r4, r5, r6, r8, sl, sp, lr}
     8e4:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     8e8:	72696600 	rsbvc	r6, r9, #0, 12
     8ec:	6c625f65 	stclvs	15, cr5, [r2], #-404	; 0xfffffe6c
     8f0:	5f6b6361 	svcpl	0x006b6361
     8f4:	69625f32 	stmdbvs	r2!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     8f8:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     8fc:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
     900:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
     904:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     908:	69660074 	stmdbvs	r6!, {r2, r4, r5, r6}^
     90c:	49326572 	ldmdbmi	r2!, {r1, r4, r5, r6, r8, sl, sp, lr}
     910:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     914:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     918:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     91c:	694c3565 	stmdbvs	ip, {r0, r2, r5, r6, r8, sl, ip, sp}^
     920:	00746867 	rsbseq	r6, r4, r7, ror #16
     924:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     928:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     92c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     930:	6f62616c 	svcvs	0x0062616c
     934:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     938:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     93c:	5049442f 	subpl	r4, r9, pc, lsr #8
     940:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     944:	2f686374 	svccs	0x00686374
     948:	69662f43 	stmdbvs	r6!, {r0, r1, r6, r8, r9, sl, fp, sp}^
     94c:	632e6572 			; <UNDEFINED> instruction: 0x632e6572
     950:	72696600 	rsbvc	r6, r9, #0, 12
     954:	675f3365 	ldrbvs	r3, [pc, -r5, ror #6]
     958:	5f796172 	svcpl	0x00796172
     95c:	73746962 	cmnvc	r4, #1605632	; 0x188000
     960:	73616c00 	cmnvc	r1, #0, 24
     964:	67695274 			; <UNDEFINED> instruction: 0x67695274
     968:	61567468 	cmpvs	r6, r8, ror #8
     96c:	0065756c 	rsbeq	r7, r5, ip, ror #10
     970:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
     974:	706d754a 	rsbvc	r7, sp, sl, asr #10
     978:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
     97c:	53790065 	cmnpl	r9, #101	; 0x65
     980:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     984:	70537800 	subsvc	r7, r3, r0, lsl #16
     988:	00646565 	rsbeq	r6, r4, r5, ror #10
     98c:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
     990:	7466654c 	strbtvc	r6, [r6], #-1356	; 0xfffffab4
     994:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
     998:	3a430065 	bcc	10c0b34 <startup-0x1ef3f4cc>
     99c:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     9a0:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 8ec <startup-0x1ffff714>
     9a4:	616c706f 	cmnvs	ip, pc, rrx
     9a8:	61726f62 	cmnvs	r2, r2, ror #30
     9ac:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     9b0:	442f7265 	strtmi	r7, [pc], #-613	; 9b8 <startup-0x1ffff648>
     9b4:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     9b8:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     9bc:	2f432f68 	svccs	0x00432f68
     9c0:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
     9c4:	632e7265 			; <UNDEFINED> instruction: 0x632e7265
     9c8:	616c7000 	cmnvs	ip, r0
     9cc:	55726579 	ldrbpl	r6, [r2, #-1401]!	; 0xfffffa87
     9d0:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
     9d4:	65740065 	ldrbvs	r0, [r4, #-101]!	; 0xffffff9b
     9d8:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     9dc:	4c326472 	cfldrsmi	mvf6, [r2], #-456	; 0xfffffe38
     9e0:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     9e4:	72696200 	rsbvc	r6, r9, #0, 4
     9e8:	6c5f3364 	mrrcvs	3, 6, r3, pc, cr4	; <UNPREDICTABLE>
     9ec:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     9f0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     9f4:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
     9f8:	49346472 	ldmdbmi	r4!, {r1, r4, r5, r6, sl, sp, lr}
     9fc:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     a00:	72696200 	rsbvc	r6, r9, #0, 4
     a04:	6c5f3464 	cfldrdvs	mvd3, [pc], {100}	; 0x64
     a08:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     a0c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     a10:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     a14:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     a18:	4c356472 	cfldrsmi	mvf6, [r5], #-456	; 0xfffffe38
     a1c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     a20:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     a24:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     a28:	62003431 	andvs	r3, r0, #822083584	; 0x31000000
     a2c:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     a30:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     a34:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     a38:	00737469 	rsbseq	r7, r3, r9, ror #8
     a3c:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     a40:	67694c33 			; <UNDEFINED> instruction: 0x67694c33
     a44:	70007468 	andvc	r7, r0, r8, ror #8
     a48:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     a4c:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
     a50:	72696200 	rsbvc	r6, r9, #0, 4
     a54:	694c3164 	stmdbvs	ip, {r2, r5, r6, r8, ip, sp}^
     a58:	00746867 	rsbseq	r6, r4, r7, ror #16
     a5c:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     a60:	616c4233 	cmnvs	ip, r3, lsr r2
     a64:	62006b63 	andvs	r6, r0, #101376	; 0x18c00
     a68:	31647269 	cmncc	r4, r9, ror #4
     a6c:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     a70:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     a74:	72694270 	rsbvc	r4, r9, #112, 4
     a78:	6c423464 	cfstrdvs	mvd3, [r2], {100}	; 0x64
     a7c:	006b6361 	rsbeq	r6, fp, r1, ror #6
     a80:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     a84:	616c4235 	cmnvs	ip, r5, lsr r2
     a88:	70006b63 	andvc	r6, r0, r3, ror #22
     a8c:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     a90:	30327265 	eorscc	r7, r2, r5, ror #4
     a94:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     a98:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     a9c:	62003132 	andvs	r3, r0, #-2147483636	; 0x8000000c
     aa0:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     aa4:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     aa8:	72696200 	rsbvc	r6, r9, #0, 4
     aac:	6c423264 	sfmvs	f3, 2, [r2], {100}	; 0x64
     ab0:	006b6361 	rsbeq	r6, fp, r1, ror #6
     ab4:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     ab8:	32726574 	rsbscc	r6, r2, #116, 10	; 0x1d000000
     abc:	6f700034 	svcvs	0x00700034
     ac0:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     ac4:	00363172 	eorseq	r3, r6, r2, ror r1
     ac8:	706d6574 	rsbvc	r6, sp, r4, ror r5
     acc:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     ad0:	61724732 	cmnvs	r2, r2, lsr r7
     ad4:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     ad8:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     adc:	47346472 			; <UNDEFINED> instruction: 0x47346472
     ae0:	00796172 	rsbseq	r6, r9, r2, ror r1
     ae4:	706d6574 	rsbvc	r6, sp, r4, ror r5
     ae8:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     aec:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     af0:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
     af4:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     af8:	47356472 			; <UNDEFINED> instruction: 0x47356472
     afc:	00796172 	rsbseq	r6, r9, r2, ror r1
     b00:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     b04:	31726574 	cmncc	r2, r4, ror r5
     b08:	69620033 	stmdbvs	r2!, {r0, r1, r4, r5}^
     b0c:	5f326472 	svcpl	0x00326472
     b10:	63616c62 	cmnvs	r1, #25088	; 0x6200
     b14:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     b18:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     b1c:	31647269 	cmncc	r4, r9, ror #4
     b20:	6172675f 	cmnvs	r2, pc, asr r7
     b24:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     b28:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     b2c:	36647269 	strbtcc	r7, [r4], -r9, ror #4
     b30:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     b34:	69620065 	stmdbvs	r2!, {r0, r2, r5, r6}^
     b38:	5f336472 	svcpl	0x00336472
     b3c:	63616c62 	cmnvs	r1, #25088	; 0x6200
     b40:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     b44:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     b48:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     b4c:	616c625f 	cmnvs	ip, pc, asr r2
     b50:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
     b54:	00737469 	rsbseq	r7, r3, r9, ror #8
     b58:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     b5c:	616d4933 	cmnvs	sp, r3, lsr r9
     b60:	62006567 	andvs	r6, r0, #432013312	; 0x19c00000
     b64:	31647269 	cmncc	r4, r9, ror #4
     b68:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     b6c:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     b70:	00737469 	rsbseq	r7, r3, r9, ror #8
     b74:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     b78:	6c625f35 	stclvs	15, cr5, [r2], #-212	; 0xffffff2c
     b7c:	5f6b6361 	svcpl	0x006b6361
     b80:	73746962 	cmnvc	r4, #1605632	; 0x188000
     b84:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     b88:	72694270 	rsbvc	r4, r9, #112, 4
     b8c:	694c3364 	stmdbvs	ip, {r2, r5, r6, r8, r9, ip, sp}^
     b90:	00746867 	rsbseq	r6, r4, r7, ror #16
     b94:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     b98:	72675f35 	rsbvc	r5, r7, #53, 30	; 0xd4
     b9c:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     ba0:	00737469 	rsbseq	r7, r3, r9, ror #8
     ba4:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     ba8:	61724732 	cmnvs	r2, r2, lsr r7
     bac:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     bb0:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     bb4:	4c346472 	cfldrsmi	mvf6, [r4], #-456	; 0xfffffe38
     bb8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     bbc:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     bc0:	72694270 	rsbvc	r4, r9, #112, 4
     bc4:	72473364 	subvc	r3, r7, #100, 6	; 0x90000001
     bc8:	62007961 	andvs	r7, r0, #1589248	; 0x184000
     bcc:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     bd0:	6172675f 	cmnvs	r2, pc, asr r7
     bd4:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     bd8:	70007374 	andvc	r7, r0, r4, ror r3
     bdc:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     be0:	33327265 	teqcc	r2, #1342177286	; 0x50000006
     be4:	72696200 	rsbvc	r6, r9, #0, 4
     be8:	694c3564 	stmdbvs	ip, {r2, r5, r6, r8, sl, ip, sp}^
     bec:	00746867 	rsbseq	r6, r4, r7, ror #16
     bf0:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     bf4:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     bf8:	74007365 	strvc	r7, [r0], #-869	; 0xfffffc9b
     bfc:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     c00:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     c04:	63616c42 	cmnvs	r1, #16896	; 0x4200
     c08:	6962006b 	stmdbvs	r2!, {r0, r1, r3, r5, r6}^
     c0c:	42346472 	eorsmi	r6, r4, #1912602624	; 0x72000000
     c10:	6b63616c 	blvs	18d91c8 <startup-0x1e726e38>
     c14:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     c18:	72694270 	rsbvc	r4, r9, #112, 4
     c1c:	6c423264 	sfmvs	f3, 2, [r2], {100}	; 0x64
     c20:	006b6361 	rsbeq	r6, fp, r1, ror #6
     c24:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     c28:	72675f33 	rsbvc	r5, r7, #51, 30	; 0xcc
     c2c:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     c30:	00737469 	rsbseq	r7, r3, r9, ror #8
     c34:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     c38:	616c4231 	cmnvs	ip, r1, lsr r2
     c3c:	62006b63 	andvs	r6, r0, #101376	; 0x18c00
     c40:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     c44:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     c48:	3a430074 	bcc	10c0e20 <startup-0x1ef3f1e0>
     c4c:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     c50:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; b9c <startup-0x1ffff464>
     c54:	616c706f 	cmnvs	ip, pc, rrx
     c58:	61726f62 	cmnvs	r2, r2, ror #30
     c5c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     c60:	442f7265 	strtmi	r7, [pc], #-613	; c68 <startup-0x1ffff398>
     c64:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     c68:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     c6c:	2f432f68 	svccs	0x00432f68
     c70:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     c74:	6900632e 	stmdbvs	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
     c78:	5f74696e 	svcpl	0x0074696e
     c7c:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     c80:	72696200 	rsbvc	r6, r9, #0, 4
     c84:	6a624f64 	bvs	1894a1c <startup-0x1e76b5e4>
     c88:	72696200 	rsbvc	r6, r9, #0, 4
     c8c:	675f3264 	ldrbvs	r3, [pc, -r4, ror #4]
     c90:	5f796172 	svcpl	0x00796172
     c94:	73746962 	cmnvc	r4, #1605632	; 0x188000
     c98:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     c9c:	72694270 	rsbvc	r4, r9, #112, 4
     ca0:	61724764 	cmnvs	r2, r4, ror #14
     ca4:	69620079 	stmdbvs	r2!, {r0, r3, r4, r5, r6}^
     ca8:	47356472 			; <UNDEFINED> instruction: 0x47356472
     cac:	00796172 	rsbseq	r6, r9, r2, ror r1
     cb0:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     cb4:	6c625f31 	stclvs	15, cr5, [r2], #-196	; 0xffffff3c
     cb8:	5f6b6361 	svcpl	0x006b6361
     cbc:	73746962 	cmnvc	r4, #1605632	; 0x188000
     cc0:	72696200 	rsbvc	r6, r9, #0, 4
     cc4:	6d493164 	stfvse	f3, [r9, #-400]	; 0xfffffe70
     cc8:	00656761 	rsbeq	r6, r5, r1, ror #14
     ccc:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     cd0:	61724733 	cmnvs	r2, r3, lsr r7
     cd4:	69660079 	stmdbvs	r6!, {r0, r3, r4, r5, r6}^
     cd8:	506c616e 	rsbpl	r6, ip, lr, ror #2
     cdc:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     ce0:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
     ce4:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     ce8:	42647269 	rsbmi	r7, r4, #-1879048186	; 0x90000006
     cec:	6b63616c 	blvs	18d92a4 <startup-0x1e726d5c>
     cf0:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     cf4:	72694270 	rsbvc	r4, r9, #112, 4
     cf8:	6c423364 	mcrrvs	3, 6, r3, r2, cr4
     cfc:	006b6361 	rsbeq	r6, fp, r1, ror #6
     d00:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     d04:	31726574 	cmncc	r2, r4, ror r5
     d08:	6f700031 	svcvs	0x00700031
     d0c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     d10:	00323172 	eorseq	r3, r2, r2, ror r1
     d14:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     d18:	67694c34 			; <UNDEFINED> instruction: 0x67694c34
     d1c:	62007468 	andvs	r7, r0, #104, 8	; 0x68000000
     d20:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     d24:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     d28:	6f700065 	svcvs	0x00700065
     d2c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     d30:	00353172 	eorseq	r3, r5, r2, ror r1
     d34:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     d38:	31726574 	cmncc	r2, r4, ror r5
     d3c:	6f700037 	svcvs	0x00700037
     d40:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     d44:	00383172 	eorseq	r3, r8, r2, ror r1
     d48:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     d4c:	616d4932 	cmnvs	sp, r2, lsr r9
     d50:	70006567 	andvc	r6, r0, r7, ror #10
     d54:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     d58:	32327265 	eorscc	r7, r2, #1342177286	; 0x50000006
     d5c:	72696200 	rsbvc	r6, r9, #0, 4
     d60:	6c5f3264 	lfmvs	f3, 2, [pc], {100}	; 0x64
     d64:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     d68:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     d6c:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
     d70:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     d74:	63616c42 	cmnvs	r1, #16896	; 0x4200
     d78:	6977006b 	ldmdbvs	r7!, {r0, r1, r3, r5, r6}^
     d7c:	31686374 	smccc	34356	; 0x8634
     d80:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     d84:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     d88:	74695770 	strbtvc	r5, [r9], #-1904	; 0xfffff890
     d8c:	694c6863 	stmdbvs	ip, {r0, r1, r5, r6, fp, sp, lr}^
     d90:	00746867 	rsbseq	r6, r4, r7, ror #16
     d94:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     d98:	6a624f68 	bvs	1894b40 <startup-0x1e76b4c0>
     d9c:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     da0:	5f316863 	svcpl	0x00316863
     da4:	63616c62 	cmnvs	r1, #25088	; 0x6200
     da8:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     dac:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     db0:	57706d65 	ldrbpl	r6, [r0, -r5, ror #26]!
     db4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     db8:	67694c33 			; <UNDEFINED> instruction: 0x67694c33
     dbc:	74007468 	strvc	r7, [r0], #-1128	; 0xfffffb98
     dc0:	57706d65 	ldrbpl	r6, [r0, -r5, ror #26]!
     dc4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     dc8:	67694c32 			; <UNDEFINED> instruction: 0x67694c32
     dcc:	77007468 	strvc	r7, [r0, -r8, ror #8]
     dd0:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     dd4:	67694c31 			; <UNDEFINED> instruction: 0x67694c31
     dd8:	74007468 	strvc	r7, [r0], #-1128	; 0xfffffb98
     ddc:	57706d65 	ldrbpl	r6, [r0, -r5, ror #26]!
     de0:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     de4:	616c4232 	cmnvs	ip, r2, lsr r2
     de8:	77006b63 	strvc	r6, [r0, -r3, ror #22]
     dec:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     df0:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     df4:	5f746867 	svcpl	0x00746867
     df8:	73746962 	cmnvc	r4, #1605632	; 0x188000
     dfc:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     e00:	49336863 	ldmdbmi	r3!, {r0, r1, r5, r6, fp, sp, lr}
     e04:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     e08:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     e0c:	42336863 	eorsmi	r6, r3, #6488064	; 0x630000
     e10:	6b63616c 	blvs	18d93c8 <startup-0x1e726c38>
     e14:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     e18:	5f336863 	svcpl	0x00336863
     e1c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     e20:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     e24:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
     e28:	775f7469 	ldrbvc	r7, [pc, -r9, ror #8]
     e2c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     e30:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     e34:	74695770 	strbtvc	r5, [r9], #-1904	; 0xfffff890
     e38:	6c426863 	mcrrvs	8, 6, r6, r2, cr3
     e3c:	006b6361 	rsbeq	r6, fp, r1, ror #6
     e40:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     e44:	625f3268 	subsvs	r3, pc, #104, 4	; 0x80000006
     e48:	6b63616c 	blvs	18d9400 <startup-0x1e726c00>
     e4c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     e50:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
     e54:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     e58:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     e5c:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     e60:	00737469 	rsbseq	r7, r3, r9, ror #8
     e64:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     e68:	72473368 	subvc	r3, r7, #104, 6	; 0xa0000001
     e6c:	77007961 	strvc	r7, [r0, -r1, ror #18]
     e70:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     e74:	61724732 	cmnvs	r2, r2, lsr r7
     e78:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     e7c:	6957706d 	ldmdbvs	r7, {r0, r2, r3, r5, r6, ip, sp, lr}^
     e80:	47686374 			; <UNDEFINED> instruction: 0x47686374
     e84:	00796172 	rsbseq	r6, r9, r2, ror r1
     e88:	706d6574 	rsbvc	r6, sp, r4, ror r5
     e8c:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     e90:	72473268 	subvc	r3, r7, #104, 4	; 0x80000006
     e94:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     e98:	57706d65 	ldrbpl	r6, [r0, -r5, ror #26]!
     e9c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     ea0:	616c4233 	cmnvs	ip, r3, lsr r2
     ea4:	77006b63 	strvc	r6, [r0, -r3, ror #22]
     ea8:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     eac:	696c5f31 	stmdbvs	ip!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     eb0:	5f746867 	svcpl	0x00746867
     eb4:	73746962 	cmnvc	r4, #1605632	; 0x188000
     eb8:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     ebc:	5f326863 	svcpl	0x00326863
     ec0:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     ec4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     ec8:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
     ecc:	34686374 	strbtcc	r6, [r8], #-884	; 0xfffffc8c
     ed0:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     ed4:	69770065 	ldmdbvs	r7!, {r0, r2, r5, r6}^
     ed8:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     edc:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     ee0:	69770074 	ldmdbvs	r7!, {r2, r4, r5, r6}^
     ee4:	31686374 	smccc	34356	; 0x8634
     ee8:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     eec:	69770065 	ldmdbvs	r7!, {r0, r2, r5, r6}^
     ef0:	31686374 	smccc	34356	; 0x8634
     ef4:	63616c42 	cmnvs	r1, #16896	; 0x4200
     ef8:	6977006b 	ldmdbvs	r7!, {r0, r1, r3, r5, r6}^
     efc:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     f00:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     f04:	69770074 	ldmdbvs	r7!, {r2, r4, r5, r6}^
     f08:	49686374 	stmdbmi	r8!, {r2, r4, r5, r6, r8, r9, sp, lr}^
     f0c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     f10:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     f14:	6957706d 	ldmdbvs	r7, {r0, r2, r3, r5, r6, ip, sp, lr}^
     f18:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     f1c:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     f20:	2f3a4300 	svccs	0x003a4300
     f24:	2f706f6d 	svccs	0x00706f6d
     f28:	6f4d2f63 	svcvs	0x004d2f63
     f2c:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     f30:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     f34:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     f38:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     f3c:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     f40:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     f44:	772f432f 	strvc	r4, [pc, -pc, lsr #6]!
     f48:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     f4c:	7700632e 	strvc	r6, [r0, -lr, lsr #6]
     f50:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     f54:	72675f31 	rsbvc	r5, r7, #49, 30	; 0xc4
     f58:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     f5c:	00737469 	rsbseq	r7, r3, r9, ror #8
     f60:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     f64:	625f3368 	subsvs	r3, pc, #104, 6	; 0xa0000001
     f68:	6b63616c 	blvs	18d9520 <startup-0x1e726ae0>
     f6c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     f70:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
     f74:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     f78:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     f7c:	69640065 	stmdbvs	r4!, {r0, r2, r5, r6}^
     f80:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
     f84:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     f88:	34504944 	ldrbcc	r4, [r0], #-2372	; 0xfffff6bc
     f8c:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     f90:	49440065 	stmdbmi	r4, {r0, r2, r5, r6}^
     f94:	6d493150 	stfvse	f3, [r9, #-320]	; 0xfffffec0
     f98:	00656761 	rsbeq	r6, r5, r1, ror #14
     f9c:	706d6574 	rsbvc	r6, sp, r4, ror r5
     fa0:	32504944 	subscc	r4, r0, #68, 18	; 0x110000
     fa4:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     fa8:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
     fac:	4944706d 	stmdbmi	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
     fb0:	6c423350 	mcrrvs	3, 5, r3, r2, cr0
     fb4:	006b6361 	rsbeq	r6, fp, r1, ror #6
     fb8:	706d6574 	rsbvc	r6, sp, r4, ror r5
     fbc:	32504944 	subscc	r4, r0, #68, 18	; 0x110000
     fc0:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     fc4:	50494400 	subpl	r4, r9, r0, lsl #8
     fc8:	61724731 	cmnvs	r2, r1, lsr r7
     fcc:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     fd0:	4944706d 	stmdbmi	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
     fd4:	67694c50 			; <UNDEFINED> instruction: 0x67694c50
     fd8:	44007468 	strmi	r7, [r0], #-1128	; 0xfffffb98
     fdc:	6d495049 	stclvs	0, cr5, [r9, #-292]	; 0xfffffedc
     fe0:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     fe4:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     fe8:	49445f74 	stmdbmi	r4, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     fec:	65740050 	ldrbvs	r0, [r4, #-80]!	; 0xffffffb0
     ff0:	4944706d 	stmdbmi	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
     ff4:	61724750 	cmnvs	r2, r0, asr r7
     ff8:	49440079 	stmdbmi	r4, {r0, r3, r4, r5, r6}^
     ffc:	6c423150 	stfvse	f3, [r2], {80}	; 0x50
    1000:	006b6361 	rsbeq	r6, fp, r1, ror #6
    1004:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
    1008:	6f507265 	svcvs	0x00507265
    100c:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    1010:	00596e6f 	subseq	r6, r9, pc, ror #28
    1014:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1018:	33504944 	cmpcc	r0, #68, 18	; 0x110000
    101c:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    1020:	50494400 	subpl	r4, r9, r0, lsl #8
    1024:	616d4933 	cmnvs	sp, r3, lsr r9
    1028:	74006567 	strvc	r6, [r0], #-1383	; 0xfffffa99
    102c:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
    1030:	4c335049 	ldcmi	0, cr5, [r3], #-292	; 0xfffffedc
    1034:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1038:	50494400 	subpl	r4, r9, r0, lsl #8
    103c:	61647055 	qdsubvs	r7, r5, r4
    1040:	74006574 	strvc	r6, [r0], #-1396	; 0xfffffa8c
    1044:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
    1048:	42325049 	eorsmi	r5, r2, #73	; 0x49
    104c:	6b63616c 	blvs	18d9604 <startup-0x1e7269fc>
    1050:	50494400 	subpl	r4, r9, r0, lsl #8
    1054:	616d4932 	cmnvs	sp, r2, lsr r9
    1058:	43006567 	movwmi	r6, #1383	; 0x567
    105c:	6f6d2f3a 	svcvs	0x006d2f3a
    1060:	2f632f70 	svccs	0x00632f70
    1064:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    1068:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    106c:	6f697461 	svcvs	0x00697461
    1070:	2f72656e 	svccs	0x0072656e
    1074:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    1078:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    107c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    1080:	5049442f 	subpl	r4, r9, pc, lsr #8
    1084:	4400632e 	strmi	r6, [r0], #-814	; 0xfffffcd2
    1088:	4c315049 	ldcmi	0, cr5, [r1], #-292	; 0xfffffedc
    108c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1090:	50494400 	subpl	r4, r9, r0, lsl #8
    1094:	006a624f 	rsbeq	r6, sl, pc, asr #4
    1098:	706d6574 	rsbvc	r6, sp, r4, ror r5
    109c:	42504944 	subsmi	r4, r0, #68, 18	; 0x110000
    10a0:	6b63616c 	blvs	18d9658 <startup-0x1e7269a8>
    10a4:	616c7000 	cmnvs	ip, r0
    10a8:	50726579 	rsbspl	r6, r2, r9, ror r5
    10ac:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
    10b0:	586e6f69 	stmdapl	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    10b4:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    10b8:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
    10bc:	6f507265 	svcvs	0x00507265
    10c0:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    10c4:	66006e6f 	strvs	r6, [r0], -pc, ror #28
    10c8:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    10cc:	72675f31 	rsbvc	r5, r7, #49, 30	; 0xc4
    10d0:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
    10d4:	00737469 	rsbseq	r7, r3, r9, ror #8
    10d8:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    10dc:	6c423165 	stfvse	f3, [r2], {101}	; 0x65
    10e0:	006b6361 	rsbeq	r6, fp, r1, ror #6
    10e4:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    10e8:	675f3265 	ldrbvs	r3, [pc, -r5, ror #4]
    10ec:	5f796172 	svcpl	0x00796172
    10f0:	73746962 	cmnvc	r4, #1605632	; 0x188000
    10f4:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    10f8:	616c4670 	smcvs	50272	; 0xc460
    10fc:	694c656d 	stmdbvs	ip, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
    1100:	00746867 	rsbseq	r6, r4, r7, ror #16
    1104:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    1108:	6c5f3265 	lfmvs	f3, 2, [pc], {101}	; 0x65
    110c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1110:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1114:	6c660073 	stclvs	0, cr0, [r6], #-460	; 0xfffffe34
    1118:	33656d61 	cmncc	r5, #6208	; 0x1840
    111c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    1120:	6c660074 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30
    1124:	32656d61 	rsbcc	r6, r5, #6208	; 0x1840
    1128:	63616c42 	cmnvs	r1, #16896	; 0x4200
    112c:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
    1130:	6c46706d 	mcrrvs	0, 6, r7, r6, cr13
    1134:	32656d61 	rsbcc	r6, r5, #6208	; 0x1840
    1138:	63616c42 	cmnvs	r1, #16896	; 0x4200
    113c:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
    1140:	6c46706d 	mcrrvs	0, 6, r7, r6, cr13
    1144:	32656d61 	rsbcc	r6, r5, #6208	; 0x1840
    1148:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    114c:	6c660074 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30
    1150:	33656d61 	cmncc	r5, #6208	; 0x1840
    1154:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
    1158:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
    115c:	00737469 	rsbseq	r7, r3, r9, ror #8
    1160:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    1164:	6a624f65 	bvs	1894f00 <startup-0x1e76b100>
    1168:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    116c:	616c4670 	smcvs	50272	; 0xc460
    1170:	4732656d 	ldrmi	r6, [r2, -sp, ror #10]!
    1174:	00796172 	rsbseq	r6, r9, r2, ror r1
    1178:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    117c:	6d493465 	cfstrdvs	mvd3, [r9, #-404]	; 0xfffffe6c
    1180:	00656761 	rsbeq	r6, r5, r1, ror #14
    1184:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    1188:	6c5f3165 	ldfvse	f3, [pc], {101}	; 0x65
    118c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1190:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1194:	6c660073 	stclvs	0, cr0, [r6], #-460	; 0xfffffe34
    1198:	31656d61 	cmncc	r5, r1, ror #26
    119c:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    11a0:	6c660065 	stclvs	0, cr0, [r6], #-404	; 0xfffffe6c
    11a4:	33656d61 	cmncc	r5, #6208	; 0x1840
    11a8:	63616c42 	cmnvs	r1, #16896	; 0x4200
    11ac:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
    11b0:	6c46706d 	mcrrvs	0, 6, r7, r6, cr13
    11b4:	33656d61 	cmncc	r5, #6208	; 0x1840
    11b8:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    11bc:	6c660074 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30
    11c0:	33656d61 	cmncc	r5, #6208	; 0x1840
    11c4:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    11c8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    11cc:	616c4670 	smcvs	50272	; 0xc460
    11d0:	4234656d 	eorsmi	r6, r4, #457179136	; 0x1b400000
    11d4:	6b63616c 	blvs	18d978c <startup-0x1e726874>
    11d8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    11dc:	616c4670 	smcvs	50272	; 0xc460
    11e0:	4c34656d 	cfldr32mi	mvfx6, [r4], #-436	; 0xfffffe4c
    11e4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    11e8:	616c6600 	cmnvs	ip, r0, lsl #12
    11ec:	4933656d 	ldmdbmi	r3!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
    11f0:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    11f4:	616c6600 	cmnvs	ip, r0, lsl #12
    11f8:	5f33656d 	svcpl	0x0033656d
    11fc:	63616c62 	cmnvs	r1, #25088	; 0x6200
    1200:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1204:	66007374 			; <UNDEFINED> instruction: 0x66007374
    1208:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    120c:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1210:	5f746867 	svcpl	0x00746867
    1214:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1218:	616c6600 	cmnvs	ip, r0, lsl #12
    121c:	5f33656d 	svcpl	0x0033656d
    1220:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
    1224:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1228:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    122c:	6c46706d 	mcrrvs	0, 6, r7, r6, cr13
    1230:	34656d61 	strbtcc	r6, [r5], #-3425	; 0xfffff29f
    1234:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    1238:	616c6600 	cmnvs	ip, r0, lsl #12
    123c:	4932656d 	ldmdbmi	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
    1240:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1244:	616c6600 	cmnvs	ip, r0, lsl #12
    1248:	4731656d 	ldrmi	r6, [r1, -sp, ror #10]!
    124c:	00796172 	rsbseq	r6, r9, r2, ror r1
    1250:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    1254:	625f3265 	subsvs	r3, pc, #1342177286	; 0x50000006
    1258:	6b63616c 	blvs	18d9810 <startup-0x1e7267f0>
    125c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1260:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    1264:	6c46706d 	mcrrvs	0, 6, r7, r6, cr13
    1268:	42656d61 	rsbmi	r6, r5, #6208	; 0x1840
    126c:	6b63616c 	blvs	18d9824 <startup-0x1e7267dc>
    1270:	616c6600 	cmnvs	ip, r0, lsl #12
    1274:	5f34656d 	svcpl	0x0034656d
    1278:	63616c62 	cmnvs	r1, #25088	; 0x6200
    127c:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1280:	66007374 			; <UNDEFINED> instruction: 0x66007374
    1284:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    1288:	61724734 	cmnvs	r2, r4, lsr r7
    128c:	6c660079 	stclvs	0, cr0, [r6], #-484	; 0xfffffe1c
    1290:	31656d61 	cmncc	r5, r1, ror #26
    1294:	616c625f 	cmnvs	ip, pc, asr r2
    1298:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
    129c:	00737469 	rsbseq	r7, r3, r9, ror #8
    12a0:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    12a4:	694c3165 	stmdbvs	ip, {r0, r2, r5, r6, r8, ip, sp}^
    12a8:	00746867 	rsbseq	r6, r4, r7, ror #16
    12ac:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    12b0:	675f3465 	ldrbvs	r3, [pc, -r5, ror #8]
    12b4:	5f796172 	svcpl	0x00796172
    12b8:	73746962 	cmnvc	r4, #1605632	; 0x188000
    12bc:	616c6600 	cmnvs	ip, r0, lsl #12
    12c0:	4c34656d 	cfldr32mi	mvfx6, [r4], #-436	; 0xfffffe4c
    12c4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    12c8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    12cc:	616c4670 	smcvs	50272	; 0xc460
    12d0:	4733656d 	ldrmi	r6, [r3, -sp, ror #10]!
    12d4:	00796172 	rsbseq	r6, r9, r2, ror r1
    12d8:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    12dc:	616d4965 	cmnvs	sp, r5, ror #18
    12e0:	00736567 	rsbseq	r6, r3, r7, ror #10
    12e4:	706d6574 	rsbvc	r6, sp, r4, ror r5
    12e8:	6d616c46 	stclvs	12, cr6, [r1, #-280]!	; 0xfffffee8
    12ec:	6c423365 	mcrrvs	3, 6, r3, r2, cr5
    12f0:	006b6361 	rsbeq	r6, fp, r1, ror #6
    12f4:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    12f8:	72473265 	subvc	r3, r7, #1342177286	; 0x50000006
    12fc:	43007961 	movwmi	r7, #2401	; 0x961
    1300:	6f6d2f3a 	svcvs	0x006d2f3a
    1304:	2f632f70 	svccs	0x00632f70
    1308:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    130c:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    1310:	6f697461 	svcvs	0x00697461
    1314:	2f72656e 	svccs	0x0072656e
    1318:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    131c:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    1320:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    1324:	616c662f 	cmnvs	ip, pc, lsr #12
    1328:	632e656d 			; <UNDEFINED> instruction: 0x632e656d
    132c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1330:	616c4670 	smcvs	50272	; 0xc460
    1334:	7247656d 	subvc	r6, r7, #457179136	; 0x1b400000
    1338:	66007961 	strvs	r7, [r0], -r1, ror #18
    133c:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    1340:	616c4234 	cmnvs	ip, r4, lsr r2
    1344:	66006b63 	strvs	r6, [r0], -r3, ror #22
    1348:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    134c:	67694c32 			; <UNDEFINED> instruction: 0x67694c32
    1350:	70007468 	andvc	r7, r0, r8, ror #8
    1354:	00656761 	rsbeq	r6, r5, r1, ror #14
    1358:	70617267 	rsbvc	r7, r1, r7, ror #4
    135c:	5f636968 	svcpl	0x00636968
    1360:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1364:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    1368:	00726566 	rsbseq	r6, r2, r6, ror #10
    136c:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
    1370:	6400326c 	strvs	r3, [r0], #-620	; 0xfffffd94
    1374:	5f776172 	svcpl	0x00776172
    1378:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
    137c:	6a626f5f 	bvs	189d100 <startup-0x1e762f00>
    1380:	00746365 	rsbseq	r6, r4, r5, ror #6
    1384:	616c6564 	cmnvs	ip, r4, ror #10
    1388:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    138c:	006f7263 	rsbeq	r7, pc, r3, ror #4
    1390:	70617267 	rsbvc	r7, r1, r7, ror #4
    1394:	5f636968 	svcpl	0x00636968
    1398:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    139c:	6f635f65 	svcvs	0x00635f65
    13a0:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
    13a4:	6c630064 	stclvs	0, cr0, [r3], #-400	; 0xfffffe70
    13a8:	5f726165 	svcpl	0x00726165
    13ac:	6b636162 	blvs	18d993c <startup-0x1e7266c4>
    13b0:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    13b4:	70007265 	andvc	r7, r0, r5, ror #4
    13b8:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
    13bc:	624f6700 	subvs	r6, pc, #0, 14
    13c0:	7267006a 	rsbvc	r0, r7, #106	; 0x6a
    13c4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
    13c8:	72645f63 	rsbvc	r5, r4, #396	; 0x18c
    13cc:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
    13d0:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
    13d4:	6564006e 	strbvs	r0, [r4, #-110]!	; 0xffffff92
    13d8:	5f79616c 	svcpl	0x0079616c
    13dc:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
    13e0:	68730069 	ldmdavs	r3!, {r0, r3, r5, r6}^
    13e4:	665f776f 	ldrbvs	r7, [pc], -pc, ror #14
    13e8:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
    13ec:	61726400 	cmnvs	r2, r0, lsl #8
    13f0:	70735f77 	rsbsvc	r5, r3, r7, ror pc
    13f4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    13f8:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    13fc:	355f7961 	ldrbcc	r7, [pc, #-2401]	; aa3 <startup-0x1ffff55d>
    1400:	736e3030 	cmnvc	lr, #48	; 0x30
    1404:	61726700 	cmnvs	r2, r0, lsl #14
    1408:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    140c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    1410:	67006574 	smlsdxvs	r0, r4, r5, r6
    1414:	53796172 	cmnpl	r9, #-2147483620	; 0x8000001c
    1418:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    141c:	74736554 	ldrbtvc	r6, [r3], #-1364	; 0xfffffaac
    1420:	61726700 	cmnvs	r2, r0, lsl #14
    1424:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    1428:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
    142c:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1430:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
    1434:	00726165 	rsbseq	r6, r2, r5, ror #2
    1438:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    143c:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    1440:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    1444:	6f62616c 	svcvs	0x0062616c
    1448:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    144c:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    1450:	5049442f 	subpl	r4, r9, pc, lsr #8
    1454:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    1458:	2f686374 	svccs	0x00686374
    145c:	72672f43 	rsbvc	r2, r7, #268	; 0x10c
    1460:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
    1464:	632e7363 			; <UNDEFINED> instruction: 0x632e7363
    1468:	61726700 	cmnvs	r2, r0, lsl #14
    146c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    1470:	6165725f 	cmnvs	r5, pc, asr r2
    1474:	61645f64 	cmnvs	r4, r4, ror #30
    1478:	63006174 	movwvs	r6, #372	; 0x174
    147c:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
    1480:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    1484:	5f70755f 	svcpl	0x0070755f
    1488:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
    148c:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
    1490:	73726566 	cmnvc	r2, #427819008	; 0x19800000
    1494:	61726700 	cmnvs	r2, r0, lsl #14
    1498:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    149c:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
    14a0:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    14a4:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
    14a8:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
    14ac:	5f79616c 	svcpl	0x0079616c
    14b0:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
    14b4:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
    14b8:	65526c6c 	ldrbvs	r6, [r2, #-3180]	; 0xfffff394
    14bc:	6e617463 	cdpvs	4, 6, cr7, cr1, cr3, {3}
    14c0:	00656c67 	rsbeq	r6, r5, r7, ror #24
    14c4:	6b73616d 	blvs	1cd9a80 <startup-0x1e326580>
    14c8:	61726600 	cmnvs	r2, r0, lsl #12
    14cc:	6c5f656d 	cfldr64vs	mvdx6, [pc], {109}	; 0x6d
    14d0:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
    14d4:	72670068 	rsbvc	r0, r7, #104	; 0x68
    14d8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
    14dc:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
    14e0:	5f657469 	svcpl	0x00657469
    14e4:	61746164 	cmnvs	r4, r4, ror #2
    14e8:	74796200 	ldrbtvc	r6, [r9], #-512	; 0xfffffe00
    14ec:	69770065 	ldmdbvs	r7!, {r0, r2, r5, r6}^
    14f0:	5f687464 	svcpl	0x00687464
    14f4:	625f6e69 	subsvs	r6, pc, #1680	; 0x690
    14f8:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
    14fc:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
    1500:	615f7261 	cmpvs	pc, r1, ror #4
    1504:	625f6c6c 	subsvs	r6, pc, #108, 24	; 0x6c00
    1508:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
    150c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    1510:	63007372 	movwvs	r7, #882	; 0x372
    1514:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1518:	74636552 	strbtvc	r6, [r3], #-1362	; 0xfffffaae
    151c:	6c676e61 	stclvs	14, cr6, [r7], #-388	; 0xfffffe7c
    1520:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
    1524:	00786564 	rsbseq	r6, r8, r4, ror #10
    1528:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
    152c:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
    1530:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    1534:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
    1538:	72670072 	rsbvc	r0, r7, #114	; 0x72
    153c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
    1540:	61775f63 	cmnvs	r7, r3, ror #30
    1544:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
    1548:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    154c:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
    1550:	745f7261 	ldrbvc	r7, [pc], #-609	; 1558 <startup-0x1fffeaa8>
    1554:	42736968 	rsbsmi	r6, r3, #104, 18	; 0x1a0000
    1558:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
    155c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    1560:	72670072 	rsbvc	r0, r7, #114	; 0x72
    1564:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
    1568:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
    156c:	61697469 	cmnvs	r9, r9, ror #8
    1570:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
    1574:	61726700 	cmnvs	r2, r0, lsl #14
    1578:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    157c:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
    1580:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
    1584:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
    1588:	6f6c006e 	svcvs	0x006c006e
    158c:	695f6461 	ldmdbvs	pc, {r0, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
    1590:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1594:	2f3a4300 	svccs	0x003a4300
    1598:	2f706f6d 	svccs	0x00706f6d
    159c:	6f4d2f63 	svcvs	0x004d2f63
    15a0:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    15a4:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    15a8:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    15ac:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    15b0:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    15b4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    15b8:	692f432f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r8, r9, lr}	; <UNPREDICTABLE>
    15bc:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    15c0:	6c00632e 	stcvs	3, cr6, [r0], {46}	; 0x2e
    15c4:	5f64616f 	svcpl	0x0064616f
    15c8:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
    15cc:	43006574 	movwmi	r6, #1396	; 0x574
    15d0:	6f6d2f3a 	svcvs	0x006d2f3a
    15d4:	2f632f70 	svccs	0x00632f70
    15d8:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    15dc:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    15e0:	6f697461 	svcvs	0x00697461
    15e4:	2f72656e 	svccs	0x0072656e
    15e8:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    15ec:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    15f0:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    15f4:	7270732f 	rsbsvc	r7, r0, #-1140850688	; 0xbc000000
    15f8:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
    15fc:	6f4d0063 	svcvs	0x004d0063
    1600:	00726564 	rsbseq	r6, r2, r4, ror #10
    1604:	5f746573 	svcpl	0x00746573
    1608:	445f7075 	ldrbmi	r7, [pc], #-117	; 1610 <startup-0x1fffe9f0>
    160c:	6f004c49 	svcvs	0x00004c49
    1610:	69487264 	stmdbvs	r8, {r2, r5, r6, r9, ip, sp, lr}^
    1614:	6f006867 	svcvs	0x00006867
    1618:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    161c:	50470072 	subpl	r0, r7, r2, ror r0
    1620:	50004f49 	andpl	r4, r0, r9, asr #30
    1624:	72645075 	rsbvc	r5, r4, #117	; 0x75
    1628:	72646900 	rsbvc	r6, r4, #0, 18
    162c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1630:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    1634:	2f3a4300 	svccs	0x003a4300
    1638:	2f706f6d 	svccs	0x00706f6d
    163c:	6f4d2f63 	svcvs	0x004d2f63
    1640:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    1644:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    1648:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    164c:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1650:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    1654:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1658:	672f432f 	strvs	r4, [pc, -pc, lsr #6]!
    165c:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    1660:	746f0063 	strbtvc	r0, [pc], #-99	; 1668 <startup-0x1fffe998>
    1664:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1668:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    166c:	61657200 	cmnvs	r5, r0, lsl #4
    1670:	49445f64 	stmdbmi	r4, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    1674:	69735f4c 	ldmdbvs	r3!, {r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1678:	656c676e 	strbvs	r6, [ip, #-1902]!	; 0xfffff892
    167c:	72646f00 	rsbvc	r6, r4, #0, 30
    1680:	00776f4c 	rsbseq	r6, r7, ip, asr #30
    1684:	6570536f 	ldrbvs	r5, [r0, #-879]!	; 0xfffffc91
    1688:	00726465 	rsbseq	r6, r2, r5, ror #8
    168c:	48726469 	ldmdami	r2!, {r0, r3, r5, r6, sl, sp, lr}^
    1690:	00686769 	rsbeq	r6, r8, r9, ror #14
    1694:	4c726469 	cfldrdmi	mvd6, [r2], #-420	; 0xfffffe5c
    1698:	6f00776f 	svcvs	0x0000776f
    169c:	65527264 	ldrbvs	r7, [r2, #-612]	; 0xfffffd9c
    16a0:	76726573 			; <UNDEFINED> instruction: 0x76726573
    16a4:	72006465 	andvc	r6, r0, #1694498816	; 0x65000000
    16a8:	5f646165 	svcpl	0x00646165
    16ac:	004c4944 	subeq	r4, ip, r4, asr #18
    16b0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    16b4:	7070615f 	rsbsvc	r6, r0, pc, asr r1
    16b8:	6163696c 	cmnvs	r3, ip, ror #18
    16bc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    16c0:	6d696c00 	stclvs	12, cr6, [r9, #-0]
    16c4:	00327469 	eorseq	r7, r2, r9, ror #8
    16c8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    16cc:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
    16d0:	645f6461 	ldrbvs	r6, [pc], #-1121	; 16d8 <startup-0x1fffe928>
    16d4:	00617461 	rsbeq	r7, r1, r1, ror #8
    16d8:	5f746573 	svcpl	0x00746573
    16dc:	615f7075 	cmpvs	pc, r5, ror r0	; <UNPREDICTABLE>
    16e0:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    16e4:	63736100 	cmnvs	r3, #0, 2
    16e8:	695f6969 	ldmdbvs	pc, {r0, r3, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
    16ec:	0074696e 	rsbseq	r6, r4, lr, ror #18
    16f0:	756c6f63 	strbvc	r6, [ip, #-3939]!	; 0xfffff09d
    16f4:	63006e6d 	movwvs	r6, #3693	; 0xe6d
    16f8:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    16fc:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
    1700:	61006969 	tstvs	r0, r9, ror #18
    1704:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1708:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    170c:	705f6574 	subsvc	r6, pc, r4, ror r5	; <UNPREDICTABLE>
    1710:	00747261 	rsbseq	r7, r4, r1, ror #4
    1714:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1718:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
    171c:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
    1720:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    1724:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
    1728:	73610072 	cmnvc	r1, #114	; 0x72
    172c:	5f696963 	svcpl	0x00696963
    1730:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    1734:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1738:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    173c:	63736100 	cmnvs	r3, #0, 2
    1740:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
    1744:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1748:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    174c:	73657400 	cmnvc	r5, #0, 8
    1750:	74003174 	strvc	r3, [r0], #-372	; 0xfffffe8c
    1754:	32747365 	rsbscc	r7, r4, #-1811939327	; 0x94000001
    1758:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
    175c:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    1760:	63736100 	cmnvs	r3, #0, 2
    1764:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
    1768:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    176c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    1770:	73610061 	cmnvc	r1, #97	; 0x61
    1774:	5f696963 	svcpl	0x00696963
    1778:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
    177c:	63736100 	cmnvs	r3, #0, 2
    1780:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
    1784:	5f646165 	svcpl	0x00646165
    1788:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    178c:	61007375 	tstvs	r0, r5, ror r3
    1790:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1794:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
    1798:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    179c:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
    17a0:	00726165 	rsbseq	r6, r2, r5, ror #2
    17a4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    17a8:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
    17ac:	00657469 	rsbeq	r7, r5, r9, ror #8
    17b0:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    17b4:	6f675f69 	svcvs	0x00675f69
    17b8:	59586f54 	ldmdbpl	r8, {r2, r4, r6, r8, r9, sl, fp, sp, lr}^
    17bc:	63736100 	cmnvs	r3, #0, 2
    17c0:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
    17c4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    17c8:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    17cc:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 1604 <startup-0x1fffe9fc>
    17d0:	0072656c 	rsbseq	r6, r2, ip, ror #10
    17d4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    17d8:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
    17dc:	5f657469 	svcpl	0x00657469
    17e0:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    17e4:	6d696c00 	stclvs	12, cr6, [r9, #-0]
    17e8:	00317469 	eorseq	r7, r1, r9, ror #8
    17ec:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    17f0:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    17f4:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    17f8:	6f62616c 	svcvs	0x0062616c
    17fc:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1800:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    1804:	5049442f 	subpl	r4, r9, pc, lsr #8
    1808:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    180c:	2f686374 	svccs	0x00686374
    1810:	73612f43 	cmnvc	r1, #268	; 0x10c
    1814:	5f696963 	svcpl	0x00696963
    1818:	70736964 	rsbsvc	r6, r3, r4, ror #18
    181c:	2e79616c 	rpwcsez	f6, f1, #4.0
    1820:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
    1824:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
    1828:	5f776f6c 	svcpl	0x00776f6c
    182c:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
    1830:	6e656c00 	cdpvs	12, 6, cr6, cr5, cr0, {0}
    1834:	5f687467 	svcpl	0x00687467
    1838:	725f666f 	subsvc	r6, pc, #116391936	; 0x6f00000
    183c:	0031776f 	eorseq	r7, r1, pc, ror #14
    1840:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    1844:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    1848:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    184c:	6f62616c 	svcvs	0x0062616c
    1850:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1854:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    1858:	5049442f 	subpl	r4, r9, pc, lsr #8
    185c:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    1860:	2f686374 	svccs	0x00686374
    1864:	6c732f43 	ldclvs	15, cr2, [r3], #-268	; 0xfffffef4
    1868:	745f776f 	ldrbvc	r7, [pc], #-1903	; 1870 <startup-0x1fffe790>
    186c:	2e747865 	cdpcs	8, 7, cr7, cr4, cr5, {3}
    1870:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
    1874:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1878:	616d4973 	smcvs	54419	; 0xd493
    187c:	69006567 	stmdbvs	r0, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
    1880:	6f6f646e 	svcvs	0x006f646e
    1884:	6c427372 	mcrrvs	3, 7, r7, r2, cr2
    1888:	006b6361 	rsbeq	r6, fp, r1, ror #6
    188c:	6f646e69 	svcvs	0x00646e69
    1890:	4973726f 	ldmdbmi	r3!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    1894:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1898:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
    189c:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    18a0:	696c5f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    18a4:	5f746867 	svcpl	0x00746867
    18a8:	73746962 	cmnvc	r4, #1605632	; 0x188000
    18ac:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    18b0:	646e4970 	strbtvs	r4, [lr], #-2416	; 0xfffff690
    18b4:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    18b8:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    18bc:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    18c0:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    18c4:	6172675f 	cmnvs	r2, pc, asr r7
    18c8:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    18cc:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
    18d0:	49706d65 	ldmdbmi	r0!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    18d4:	6f6f646e 	svcvs	0x006f646e
    18d8:	694c7372 	stmdbvs	ip, {r1, r4, r5, r6, r8, r9, ip, sp, lr}^
    18dc:	00746867 	rsbseq	r6, r4, r7, ror #16
    18e0:	6f646e69 	svcvs	0x00646e69
    18e4:	4c73726f 	lfmmi	f7, 2, [r3], #-444	; 0xfffffe44
    18e8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    18ec:	2f3a4300 	svccs	0x003a4300
    18f0:	2f706f6d 	svccs	0x00706f6d
    18f4:	6f4d2f63 	svcvs	0x004d2f63
    18f8:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    18fc:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    1900:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    1904:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1908:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    190c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1910:	692f432f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r8, r9, lr}	; <UNPREDICTABLE>
    1914:	6f6f646e 	svcvs	0x006f646e
    1918:	632e7372 			; <UNDEFINED> instruction: 0x632e7372
    191c:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1920:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1924:	616c625f 	cmnvs	ip, pc, asr r2
    1928:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
    192c:	00737469 	rsbseq	r7, r3, r9, ror #8
    1930:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1934:	6f646e49 	svcvs	0x00646e49
    1938:	4273726f 	rsbsmi	r7, r3, #-268435450	; 0xf0000006
    193c:	6b63616c 	blvs	18d9ef4 <startup-0x1e72610c>
    1940:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
    1944:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    1948:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    194c:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
    1950:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1954:	6a624f73 	bvs	1895728 <startup-0x1e76a8d8>
    1958:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    195c:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1960:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    1964:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1968:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    196c:	67694c32 			; <UNDEFINED> instruction: 0x67694c32
    1970:	69007468 	stmdbvs	r0, {r3, r5, r6, sl, ip, sp, lr}
    1974:	6f6f646e 	svcvs	0x006f646e
    1978:	5f327372 	svcpl	0x00327372
    197c:	63616c62 	cmnvs	r1, #25088	; 0x6200
    1980:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1984:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
    1988:	49706d65 	ldmdbmi	r0!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    198c:	6f6f646e 	svcvs	0x006f646e
    1990:	4c327372 	ldcmi	3, cr7, [r2], #-456	; 0xfffffe38
    1994:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1998:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    199c:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    19a0:	61724732 	cmnvs	r2, r2, lsr r7
    19a4:	3a430079 	bcc	10c1b90 <startup-0x1ef3e470>
    19a8:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
    19ac:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 18f8 <startup-0x1fffe708>
    19b0:	616c706f 	cmnvs	ip, pc, rrx
    19b4:	61726f62 	cmnvs	r2, r2, ror #30
    19b8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    19bc:	442f7265 	strtmi	r7, [pc], #-613	; 19c4 <startup-0x1fffe63c>
    19c0:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
    19c4:	63746957 	cmnvs	r4, #1425408	; 0x15c000
    19c8:	2f432f68 	svccs	0x00432f68
    19cc:	6f646e69 	svcvs	0x00646e69
    19d0:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    19d4:	7400632e 	strvc	r6, [r0], #-814	; 0xfffffcd2
    19d8:	49706d65 	ldmdbmi	r0!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    19dc:	6f6f646e 	svcvs	0x006f646e
    19e0:	42327372 	eorsmi	r7, r2, #-939524095	; 0xc8000001
    19e4:	6b63616c 	blvs	18d9f9c <startup-0x1e726064>
    19e8:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    19ec:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    19f0:	616c4232 	cmnvs	ip, r2, lsr r2
    19f4:	69006b63 	stmdbvs	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    19f8:	6f6f646e 	svcvs	0x006f646e
    19fc:	49327372 	ldmdbmi	r2!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}
    1a00:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1a04:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
    1a08:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    1a0c:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1a10:	69003273 	stmdbvs	r0, {r0, r1, r4, r5, r6, r9, ip, sp}
    1a14:	6f6f646e 	svcvs	0x006f646e
    1a18:	5f327372 	svcpl	0x00327372
    1a1c:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    1a20:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1a24:	69007374 	stmdbvs	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
    1a28:	6f6f646e 	svcvs	0x006f646e
    1a2c:	49327372 	ldmdbmi	r2!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}
    1a30:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1a34:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
    1a38:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1a3c:	675f3273 			; <UNDEFINED> instruction: 0x675f3273
    1a40:	5f796172 	svcpl	0x00796172
    1a44:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1a48:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1a4c:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1a50:	6a624f32 	bvs	1895720 <startup-0x1e76a8e0>
    1a54:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1a58:	646e4970 	strbtvs	r4, [lr], #-2416	; 0xfffff690
    1a5c:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1a60:	61724732 	cmnvs	r2, r2, lsr r7
    1a64:	3a430079 	bcc	10c1c50 <startup-0x1ef3e3b0>
    1a68:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
    1a6c:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 19b8 <startup-0x1fffe648>
    1a70:	616c706f 	cmnvs	ip, pc, rrx
    1a74:	61726f62 	cmnvs	r2, r2, ror #30
    1a78:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1a7c:	442f7265 	strtmi	r7, [pc], #-613	; 1a84 <startup-0x1fffe57c>
    1a80:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
    1a84:	63746957 	cmnvs	r4, #1425408	; 0x15c000
    1a88:	2f432f68 	svccs	0x00432f68
    1a8c:	706f7274 	rsbvc	r7, pc, r4, ror r2	; <UNPREDICTABLE>
    1a90:	632e7968 			; <UNDEFINED> instruction: 0x632e7968
    1a94:	6f727400 	svcvs	0x00727400
    1a98:	5f796870 	svcpl	0x00796870
    1a9c:	63616c62 	cmnvs	r1, #25088	; 0x6200
    1aa0:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1aa4:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
    1aa8:	68706f72 	ldmdavs	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    1aac:	67694c79 			; <UNDEFINED> instruction: 0x67694c79
    1ab0:	74007468 	strvc	r7, [r0], #-1128	; 0xfffffb98
    1ab4:	68706f72 	ldmdavs	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    1ab8:	6a624f79 	bvs	18958a4 <startup-0x1e76a75c>
    1abc:	6f727400 	svcvs	0x00727400
    1ac0:	5f796870 	svcpl	0x00796870
    1ac4:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    1ac8:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1acc:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
    1ad0:	54706d65 	ldrbtpl	r6, [r0], #-3429	; 0xfffff29b
    1ad4:	68706f72 	ldmdavs	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    1ad8:	616c4279 	smcvs	50217	; 0xc429
    1adc:	74006b63 	strvc	r6, [r0], #-2915	; 0xfffff49d
    1ae0:	68706f72 	ldmdavs	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    1ae4:	72675f79 	rsbvc	r5, r7, #484	; 0x1e4
    1ae8:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
    1aec:	00737469 	rsbseq	r7, r3, r9, ror #8
    1af0:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1af4:	706f7254 	rsbvc	r7, pc, r4, asr r2	; <UNPREDICTABLE>
    1af8:	694c7968 	stmdbvs	ip, {r3, r5, r6, r8, fp, ip, sp, lr}^
    1afc:	00746867 	rsbseq	r6, r4, r7, ror #16
    1b00:	706f7274 	rsbvc	r7, pc, r4, ror r2	; <UNPREDICTABLE>
    1b04:	72477968 	subvc	r7, r7, #104, 18	; 0x1a0000
    1b08:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
    1b0c:	68706f72 	ldmdavs	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    1b10:	616d4979 	smcvs	54425	; 0xd499
    1b14:	00736567 	rsbseq	r6, r3, r7, ror #10
    1b18:	706f7274 	rsbvc	r7, pc, r4, ror r2	; <UNPREDICTABLE>
    1b1c:	6d497968 	vstrvs.16	s15, [r9, #-208]	; 0xffffff30	; <UNPREDICTABLE>
    1b20:	00656761 	rsbeq	r6, r5, r1, ror #14
    1b24:	706f7274 	rsbvc	r7, pc, r4, ror r2	; <UNPREDICTABLE>
    1b28:	6c427968 	mcrrvs	9, 6, r7, r2, cr8	; <UNPREDICTABLE>
    1b2c:	006b6361 	rsbeq	r6, fp, r1, ror #6
    1b30:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1b34:	706f7254 	rsbvc	r7, pc, r4, asr r2	; <UNPREDICTABLE>
    1b38:	72477968 	subvc	r7, r7, #104, 18	; 0x1a0000
    1b3c:	Address 0x00001b3c is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000024 	andeq	r0, r0, r4, lsr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000034 	andcs	r0, r0, r4, lsr r0
  48:	000001c8 	andeq	r0, r0, r8, asr #3
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	300e4101 	andcc	r4, lr, r1, lsl #2
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	00000020 	andeq	r0, r0, r0, lsr #32
  60:	00000000 	andeq	r0, r0, r0
  64:	200001fc 	strdcs	r0, [r0], -ip
  68:	00000f50 	andeq	r0, r0, r0, asr pc
  6c:	400c0e41 	andmi	r0, ip, r1, asr #28
  70:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  74:	018e4002 	orreq	r4, lr, r2
  78:	07c80e42 	strbeq	r0, [r8, r2, asr #28]
  7c:	00070d41 	andeq	r0, r7, r1, asr #26
  80:	0000000c 	andeq	r0, r0, ip
  84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  88:	7c020001 	stcvc	0, cr0, [r2], {1}
  8c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000080 	andeq	r0, r0, r0, lsl #1
  98:	2000114c 	andcs	r1, r0, ip, asr #2
  9c:	00000010 	andeq	r0, r0, r0, lsl r0
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	100e4101 	andne	r4, lr, r1, lsl #2
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000080 	andeq	r0, r0, r0, lsl #1
  b8:	2000115c 	andcs	r1, r0, ip, asr r1
  bc:	00000046 	andeq	r0, r0, r6, asr #32
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	100e4101 	andne	r4, lr, r1, lsl #2
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000000c 	andeq	r0, r0, ip
  d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  d8:	7c020001 	stcvc	0, cr0, [r2], {1}
  dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  e8:	200011a4 	andcs	r1, r0, r4, lsr #3
  ec:	00000184 	andeq	r0, r0, r4, lsl #3
  f0:	40080e41 	andmi	r0, r8, r1, asr #28
  f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f8:	380e4101 	stmdacc	lr, {r0, r8, lr}
  fc:	00070d41 	andeq	r0, r7, r1, asr #26
 100:	00000020 	andeq	r0, r0, r0, lsr #32
 104:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 108:	20001328 	andcs	r1, r0, r8, lsr #6
 10c:	00000124 	andeq	r0, r0, r4, lsr #2
 110:	400c0e41 	andmi	r0, ip, r1, asr #28
 114:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 118:	018e4002 	orreq	r4, lr, r2
 11c:	41180e41 	tstmi	r8, r1, asr #28
 120:	0000070d 	andeq	r0, r0, sp, lsl #14
 124:	0000000c 	andeq	r0, r0, ip
 128:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 12c:	7c020001 	stcvc	0, cr0, [r2], {1}
 130:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 134:	0000001c 	andeq	r0, r0, ip, lsl r0
 138:	00000124 	andeq	r0, r0, r4, lsr #2
 13c:	2000144c 	andcs	r1, r0, ip, asr #8
 140:	000001d4 	ldrdeq	r0, [r0], -r4
 144:	40080e41 	andmi	r0, r8, r1, asr #28
 148:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 14c:	100e4101 	andne	r4, lr, r1, lsl #2
 150:	00070d41 	andeq	r0, r7, r1, asr #26
 154:	0000000c 	andeq	r0, r0, ip
 158:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 15c:	7c020001 	stcvc	0, cr0, [r2], {1}
 160:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 164:	0000001c 	andeq	r0, r0, ip, lsl r0
 168:	00000154 	andeq	r0, r0, r4, asr r1
 16c:	20001620 	andcs	r1, r0, r0, lsr #12
 170:	0000020c 	andeq	r0, r0, ip, lsl #4
 174:	40080e41 	andmi	r0, r8, r1, asr #28
 178:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 17c:	480e4101 	stmdami	lr, {r0, r8, lr}
 180:	00070d41 	andeq	r0, r7, r1, asr #26
 184:	00000020 	andeq	r0, r0, r0, lsr #32
 188:	00000154 	andeq	r0, r0, r4, asr r1
 18c:	2000182c 	andcs	r1, r0, ip, lsr #16
 190:	00000158 	andeq	r0, r0, r8, asr r1
 194:	400c0e41 	andmi	r0, ip, r1, asr #28
 198:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 19c:	018e4002 	orreq	r4, lr, r2
 1a0:	41180e41 	tstmi	r8, r1, asr #28
 1a4:	0000070d 	andeq	r0, r0, sp, lsl #14
 1a8:	0000000c 	andeq	r0, r0, ip
 1ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1b0:	7c020001 	stcvc	0, cr0, [r2], {1}
 1b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1bc:	000001a8 	andeq	r0, r0, r8, lsr #3
 1c0:	20001984 	andcs	r1, r0, r4, lsl #19
 1c4:	00000140 	andeq	r0, r0, r0, asr #2
 1c8:	40080e41 	andmi	r0, r8, r1, asr #28
 1cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d0:	300e4101 	andcc	r4, lr, r1, lsl #2
 1d4:	00070d41 	andeq	r0, r7, r1, asr #26
 1d8:	00000020 	andeq	r0, r0, r0, lsr #32
 1dc:	000001a8 	andeq	r0, r0, r8, lsr #3
 1e0:	20001ac4 	andcs	r1, r0, r4, asr #21
 1e4:	000000f8 	strdeq	r0, [r0], -r8
 1e8:	400c0e41 	andmi	r0, ip, r1, asr #28
 1ec:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 1f0:	018e4002 	orreq	r4, lr, r2
 1f4:	41180e41 	tstmi	r8, r1, asr #28
 1f8:	0000070d 	andeq	r0, r0, sp, lsl #14
 1fc:	0000000c 	andeq	r0, r0, ip
 200:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 204:	7c020001 	stcvc	0, cr0, [r2], {1}
 208:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 20c:	0000001c 	andeq	r0, r0, ip, lsl r0
 210:	000001fc 	strdeq	r0, [r0], -ip
 214:	20001bbc 			; <UNDEFINED> instruction: 0x20001bbc
 218:	00000140 	andeq	r0, r0, r0, asr #2
 21c:	40080e41 	andmi	r0, r8, r1, asr #28
 220:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 224:	300e4101 	andcc	r4, lr, r1, lsl #2
 228:	00070d41 	andeq	r0, r7, r1, asr #26
 22c:	00000020 	andeq	r0, r0, r0, lsr #32
 230:	000001fc 	strdeq	r0, [r0], -ip
 234:	20001cfc 	strdcs	r1, [r0], -ip
 238:	000000f8 	strdeq	r0, [r0], -r8
 23c:	400c0e41 	andmi	r0, ip, r1, asr #28
 240:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 244:	018e4002 	orreq	r4, lr, r2
 248:	41180e41 	tstmi	r8, r1, asr #28
 24c:	0000070d 	andeq	r0, r0, sp, lsl #14
 250:	0000001c 	andeq	r0, r0, ip, lsl r0
 254:	000001fc 	strdeq	r0, [r0], -ip
 258:	20001df4 	strdcs	r1, [r0], -r4
 25c:	00000028 	andeq	r0, r0, r8, lsr #32
 260:	40080e41 	andmi	r0, r8, r1, asr #28
 264:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 268:	100e4101 	andne	r4, lr, r1, lsl #2
 26c:	00070d41 	andeq	r0, r7, r1, asr #26
 270:	0000001c 	andeq	r0, r0, ip, lsl r0
 274:	000001fc 	strdeq	r0, [r0], -ip
 278:	20001e1c 	andcs	r1, r0, ip, lsl lr
 27c:	000000c8 	andeq	r0, r0, r8, asr #1
 280:	40080e41 	andmi	r0, r8, r1, asr #28
 284:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 288:	100e4101 	andne	r4, lr, r1, lsl #2
 28c:	00070d41 	andeq	r0, r7, r1, asr #26
 290:	0000000c 	andeq	r0, r0, ip
 294:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 298:	7c020001 	stcvc	0, cr0, [r2], {1}
 29c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a4:	00000290 	muleq	r0, r0, r2
 2a8:	20001ee4 	andcs	r1, r0, r4, ror #29
 2ac:	000001a8 	andeq	r0, r0, r8, lsr #3
 2b0:	40080e41 	andmi	r0, r8, r1, asr #28
 2b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b8:	380e4101 	stmdacc	lr, {r0, r8, lr}
 2bc:	00070d41 	andeq	r0, r7, r1, asr #26
 2c0:	00000020 	andeq	r0, r0, r0, lsr #32
 2c4:	00000290 	muleq	r0, r0, r2
 2c8:	2000208c 	andcs	r2, r0, ip, lsl #1
 2cc:	00000104 	andeq	r0, r0, r4, lsl #2
 2d0:	400c0e41 	andmi	r0, ip, r1, asr #28
 2d4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 2d8:	018e4002 	orreq	r4, lr, r2
 2dc:	41180e41 	tstmi	r8, r1, asr #28
 2e0:	0000070d 	andeq	r0, r0, sp, lsl #14
 2e4:	0000000c 	andeq	r0, r0, ip
 2e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2ec:	7c020001 	stcvc	0, cr0, [r2], {1}
 2f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2f4:	00000018 	andeq	r0, r0, r8, lsl r0
 2f8:	000002e4 	andeq	r0, r0, r4, ror #5
 2fc:	20002190 	mulcs	r0, r0, r1
 300:	00000044 	andeq	r0, r0, r4, asr #32
 304:	40080e41 	andmi	r0, r8, r1, asr #28
 308:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 30c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 310:	00000018 	andeq	r0, r0, r8, lsl r0
 314:	000002e4 	andeq	r0, r0, r4, ror #5
 318:	200021d4 	ldrdcs	r2, [r0], -r4
 31c:	00000044 	andeq	r0, r0, r4, asr #32
 320:	40080e41 	andmi	r0, r8, r1, asr #28
 324:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 328:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 32c:	0000001c 	andeq	r0, r0, ip, lsl r0
 330:	000002e4 	andeq	r0, r0, r4, ror #5
 334:	20002218 	andcs	r2, r0, r8, lsl r2
 338:	0000002c 	andeq	r0, r0, ip, lsr #32
 33c:	40080e41 	andmi	r0, r8, r1, asr #28
 340:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 344:	100e4101 	andne	r4, lr, r1, lsl #2
 348:	00070d41 	andeq	r0, r7, r1, asr #26
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	000002e4 	andeq	r0, r0, r4, ror #5
 354:	20002244 	andcs	r2, r0, r4, asr #4
 358:	00000026 	andeq	r0, r0, r6, lsr #32
 35c:	40080e41 	andmi	r0, r8, r1, asr #28
 360:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 364:	100e4101 	andne	r4, lr, r1, lsl #2
 368:	00070d41 	andeq	r0, r7, r1, asr #26
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	000002e4 	andeq	r0, r0, r4, ror #5
 374:	2000226a 	andcs	r2, r0, sl, ror #4
 378:	00000032 	andeq	r0, r0, r2, lsr r0
 37c:	40080e41 	andmi	r0, r8, r1, asr #28
 380:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 384:	180e4101 	stmdane	lr, {r0, r8, lr}
 388:	00070d41 	andeq	r0, r7, r1, asr #26
 38c:	00000018 	andeq	r0, r0, r8, lsl r0
 390:	000002e4 	andeq	r0, r0, r4, ror #5
 394:	2000229c 	mulcs	r0, ip, r2
 398:	00000018 	andeq	r0, r0, r8, lsl r0
 39c:	40080e41 	andmi	r0, r8, r1, asr #28
 3a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3a4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 3a8:	00000018 	andeq	r0, r0, r8, lsl r0
 3ac:	000002e4 	andeq	r0, r0, r4, ror #5
 3b0:	200022b4 			; <UNDEFINED> instruction: 0x200022b4
 3b4:	00000030 	andeq	r0, r0, r0, lsr r0
 3b8:	40080e41 	andmi	r0, r8, r1, asr #28
 3bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3c0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 3c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c8:	000002e4 	andeq	r0, r0, r4, ror #5
 3cc:	200022e4 	andcs	r2, r0, r4, ror #5
 3d0:	00000050 	andeq	r0, r0, r0, asr r0
 3d4:	40080e41 	andmi	r0, r8, r1, asr #28
 3d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3dc:	180e4101 	stmdane	lr, {r0, r8, lr}
 3e0:	00070d41 	andeq	r0, r7, r1, asr #26
 3e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e8:	000002e4 	andeq	r0, r0, r4, ror #5
 3ec:	20002334 	andcs	r2, r0, r4, lsr r3
 3f0:	00000058 	andeq	r0, r0, r8, asr r0
 3f4:	40080e41 	andmi	r0, r8, r1, asr #28
 3f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3fc:	180e4101 	stmdane	lr, {r0, r8, lr}
 400:	00070d41 	andeq	r0, r7, r1, asr #26
 404:	0000001c 	andeq	r0, r0, ip, lsl r0
 408:	000002e4 	andeq	r0, r0, r4, ror #5
 40c:	2000238c 	andcs	r2, r0, ip, lsl #7
 410:	00000066 	andeq	r0, r0, r6, rrx
 414:	40080e41 	andmi	r0, r8, r1, asr #28
 418:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 41c:	100e4101 	andne	r4, lr, r1, lsl #2
 420:	00070d41 	andeq	r0, r7, r1, asr #26
 424:	0000001c 	andeq	r0, r0, ip, lsl r0
 428:	000002e4 	andeq	r0, r0, r4, ror #5
 42c:	200023f2 	strdcs	r2, [r0], -r2	; <UNPREDICTABLE>
 430:	0000006e 	andeq	r0, r0, lr, rrx
 434:	40080e41 	andmi	r0, r8, r1, asr #28
 438:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 43c:	100e4101 	andne	r4, lr, r1, lsl #2
 440:	00070d41 	andeq	r0, r7, r1, asr #26
 444:	0000001c 	andeq	r0, r0, ip, lsl r0
 448:	000002e4 	andeq	r0, r0, r4, ror #5
 44c:	20002460 	andcs	r2, r0, r0, ror #8
 450:	00000094 	muleq	r0, r4, r0
 454:	40080e41 	andmi	r0, r8, r1, asr #28
 458:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 45c:	180e4101 	stmdane	lr, {r0, r8, lr}
 460:	00070d41 	andeq	r0, r7, r1, asr #26
 464:	0000001c 	andeq	r0, r0, ip, lsl r0
 468:	000002e4 	andeq	r0, r0, r4, ror #5
 46c:	200024f4 	strdcs	r2, [r0], -r4
 470:	0000002a 	andeq	r0, r0, sl, lsr #32
 474:	40080e41 	andmi	r0, r8, r1, asr #28
 478:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 47c:	100e4101 	andne	r4, lr, r1, lsl #2
 480:	00070d41 	andeq	r0, r7, r1, asr #26
 484:	0000001c 	andeq	r0, r0, ip, lsl r0
 488:	000002e4 	andeq	r0, r0, r4, ror #5
 48c:	2000251e 	andcs	r2, r0, lr, lsl r5
 490:	0000007e 	andeq	r0, r0, lr, ror r0
 494:	40080e41 	andmi	r0, r8, r1, asr #28
 498:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 49c:	100e4101 	andne	r4, lr, r1, lsl #2
 4a0:	00070d41 	andeq	r0, r7, r1, asr #26
 4a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4a8:	000002e4 	andeq	r0, r0, r4, ror #5
 4ac:	2000259c 	mulcs	r0, ip, r5
 4b0:	00000046 	andeq	r0, r0, r6, asr #32
 4b4:	40080e41 	andmi	r0, r8, r1, asr #28
 4b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4bc:	100e4101 	andne	r4, lr, r1, lsl #2
 4c0:	00070d41 	andeq	r0, r7, r1, asr #26
 4c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4c8:	000002e4 	andeq	r0, r0, r4, ror #5
 4cc:	200025e2 	andcs	r2, r0, r2, ror #11
 4d0:	00000046 	andeq	r0, r0, r6, asr #32
 4d4:	40080e41 	andmi	r0, r8, r1, asr #28
 4d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4dc:	100e4101 	andne	r4, lr, r1, lsl #2
 4e0:	00070d41 	andeq	r0, r7, r1, asr #26
 4e4:	00000018 	andeq	r0, r0, r8, lsl r0
 4e8:	000002e4 	andeq	r0, r0, r4, ror #5
 4ec:	20002628 	andcs	r2, r0, r8, lsr #12
 4f0:	0000006e 	andeq	r0, r0, lr, rrx
 4f4:	40080e41 	andmi	r0, r8, r1, asr #28
 4f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4fc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 500:	0000001c 	andeq	r0, r0, ip, lsl r0
 504:	000002e4 	andeq	r0, r0, r4, ror #5
 508:	20002696 	mulcs	r0, r6, r6
 50c:	00000066 	andeq	r0, r0, r6, rrx
 510:	40080e41 	andmi	r0, r8, r1, asr #28
 514:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 518:	100e4101 	andne	r4, lr, r1, lsl #2
 51c:	00070d41 	andeq	r0, r7, r1, asr #26
 520:	0000001c 	andeq	r0, r0, ip, lsl r0
 524:	000002e4 	andeq	r0, r0, r4, ror #5
 528:	200026fc 	strdcs	r2, [r0], -ip
 52c:	00000180 	andeq	r0, r0, r0, lsl #3
 530:	40080e41 	andmi	r0, r8, r1, asr #28
 534:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 538:	200e4101 	andcs	r4, lr, r1, lsl #2
 53c:	00070d41 	andeq	r0, r7, r1, asr #26
 540:	0000001c 	andeq	r0, r0, ip, lsl r0
 544:	000002e4 	andeq	r0, r0, r4, ror #5
 548:	2000287c 	andcs	r2, r0, ip, ror r8
 54c:	000001a0 	andeq	r0, r0, r0, lsr #3
 550:	40080e41 	andmi	r0, r8, r1, asr #28
 554:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 558:	280e4101 	stmdacs	lr, {r0, r8, lr}
 55c:	00070d41 	andeq	r0, r7, r1, asr #26
 560:	0000001c 	andeq	r0, r0, ip, lsl r0
 564:	000002e4 	andeq	r0, r0, r4, ror #5
 568:	20002a1c 	andcs	r2, r0, ip, lsl sl
 56c:	000000d6 	ldrdeq	r0, [r0], -r6
 570:	40080e41 	andmi	r0, r8, r1, asr #28
 574:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 578:	200e4101 	andcs	r4, lr, r1, lsl #2
 57c:	00070d41 	andeq	r0, r7, r1, asr #26
 580:	00000024 	andeq	r0, r0, r4, lsr #32
 584:	000002e4 	andeq	r0, r0, r4, ror #5
 588:	20002af2 	strdcs	r2, [r0], -r2	; <UNPREDICTABLE>
 58c:	0000011a 	andeq	r0, r0, sl, lsl r1
 590:	40100e41 	andsmi	r0, r0, r1, asr #28
 594:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 598:	02874003 	addeq	r4, r7, #3
 59c:	41018e40 	tstmi	r1, r0, asr #28
 5a0:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 5a4:	00000007 	andeq	r0, r0, r7
 5a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5ac:	000002e4 	andeq	r0, r0, r4, ror #5
 5b0:	20002c0c 	andcs	r2, r0, ip, lsl #24
 5b4:	00000052 	andeq	r0, r0, r2, asr r0
 5b8:	40080e41 	andmi	r0, r8, r1, asr #28
 5bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5c0:	200e4101 	andcs	r4, lr, r1, lsl #2
 5c4:	00070d41 	andeq	r0, r7, r1, asr #26
 5c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5cc:	000002e4 	andeq	r0, r0, r4, ror #5
 5d0:	20002c5e 	andcs	r2, r0, lr, asr ip
 5d4:	00000052 	andeq	r0, r0, r2, asr r0
 5d8:	40080e41 	andmi	r0, r8, r1, asr #28
 5dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5e0:	200e4101 	andcs	r4, lr, r1, lsl #2
 5e4:	00070d41 	andeq	r0, r7, r1, asr #26
 5e8:	00000020 	andeq	r0, r0, r0, lsr #32
 5ec:	000002e4 	andeq	r0, r0, r4, ror #5
 5f0:	20002cb0 			; <UNDEFINED> instruction: 0x20002cb0
 5f4:	00000130 	andeq	r0, r0, r0, lsr r1
 5f8:	400c0e41 	andmi	r0, ip, r1, asr #28
 5fc:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 600:	018e4002 	orreq	r4, lr, r2
 604:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 608:	0000070d 	andeq	r0, r0, sp, lsl #14
 60c:	0000001c 	andeq	r0, r0, ip, lsl r0
 610:	000002e4 	andeq	r0, r0, r4, ror #5
 614:	20002de0 	andcs	r2, r0, r0, ror #27
 618:	00000108 	andeq	r0, r0, r8, lsl #2
 61c:	40080e41 	andmi	r0, r8, r1, asr #28
 620:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 624:	100e4101 	andne	r4, lr, r1, lsl #2
 628:	00070d41 	andeq	r0, r7, r1, asr #26
 62c:	0000001c 	andeq	r0, r0, ip, lsl r0
 630:	000002e4 	andeq	r0, r0, r4, ror #5
 634:	20002ee8 	andcs	r2, r0, r8, ror #29
 638:	00000082 	andeq	r0, r0, r2, lsl #1
 63c:	40080e41 	andmi	r0, r8, r1, asr #28
 640:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 644:	200e4101 	andcs	r4, lr, r1, lsl #2
 648:	18070c41 	stmdane	r7, {r0, r6, sl, fp}
 64c:	0000001c 	andeq	r0, r0, ip, lsl r0
 650:	000002e4 	andeq	r0, r0, r4, ror #5
 654:	20002f6a 	andcs	r2, r0, sl, ror #30
 658:	0000006a 	andeq	r0, r0, sl, rrx
 65c:	40080e41 	andmi	r0, r8, r1, asr #28
 660:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 664:	100e4101 	andne	r4, lr, r1, lsl #2
 668:	00070d41 	andeq	r0, r7, r1, asr #26
 66c:	0000000c 	andeq	r0, r0, ip
 670:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 674:	7c020001 	stcvc	0, cr0, [r2], {1}
 678:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 67c:	0000001c 	andeq	r0, r0, ip, lsl r0
 680:	0000066c 	andeq	r0, r0, ip, ror #12
 684:	20002fd4 	ldrdcs	r2, [r0], -r4
 688:	00000028 	andeq	r0, r0, r8, lsr #32
 68c:	40080e41 	andmi	r0, r8, r1, asr #28
 690:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 694:	180e4101 	stmdane	lr, {r0, r8, lr}
 698:	00070d41 	andeq	r0, r7, r1, asr #26
 69c:	0000000c 	andeq	r0, r0, ip
 6a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 6a4:	7c020001 	stcvc	0, cr0, [r2], {1}
 6a8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 6ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 6b0:	0000069c 	muleq	r0, ip, r6
 6b4:	20002ffc 	strdcs	r2, [r0], -ip
 6b8:	00000028 	andeq	r0, r0, r8, lsr #32
 6bc:	40080e41 	andmi	r0, r8, r1, asr #28
 6c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 6c8:	00070d41 	andeq	r0, r7, r1, asr #26
 6cc:	0000000c 	andeq	r0, r0, ip
 6d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 6d4:	7c020001 	stcvc	0, cr0, [r2], {1}
 6d8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 6dc:	00000018 	andeq	r0, r0, r8, lsl r0
 6e0:	000006cc 	andeq	r0, r0, ip, asr #13
 6e4:	20003024 	andcs	r3, r0, r4, lsr #32
 6e8:	00000018 	andeq	r0, r0, r8, lsl r0
 6ec:	40080e41 	andmi	r0, r8, r1, asr #28
 6f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6f4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 6f8:	00000018 	andeq	r0, r0, r8, lsl r0
 6fc:	000006cc 	andeq	r0, r0, ip, asr #13
 700:	2000303c 	andcs	r3, r0, ip, lsr r0
 704:	00000020 	andeq	r0, r0, r0, lsr #32
 708:	40080e41 	andmi	r0, r8, r1, asr #28
 70c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 710:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 714:	00000020 	andeq	r0, r0, r0, lsr #32
 718:	000006cc 	andeq	r0, r0, ip, asr #13
 71c:	2000305c 	andcs	r3, r0, ip, asr r0
 720:	00000034 	andeq	r0, r0, r4, lsr r0
 724:	400c0e41 	andmi	r0, ip, r1, asr #28
 728:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 72c:	018e4002 	orreq	r4, lr, r2
 730:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 734:	0000070d 	andeq	r0, r0, sp, lsl #14
 738:	0000000c 	andeq	r0, r0, ip
 73c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 740:	7c020001 	stcvc	0, cr0, [r2], {1}
 744:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 748:	0000001c 	andeq	r0, r0, ip, lsl r0
 74c:	00000738 	andeq	r0, r0, r8, lsr r7
 750:	20003090 	mulcs	r0, r0, r0
 754:	00000044 	andeq	r0, r0, r4, asr #32
 758:	40080e41 	andmi	r0, r8, r1, asr #28
 75c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 760:	180e4101 	stmdane	lr, {r0, r8, lr}
 764:	00070d41 	andeq	r0, r7, r1, asr #26
 768:	0000001c 	andeq	r0, r0, ip, lsl r0
 76c:	00000738 	andeq	r0, r0, r8, lsr r7
 770:	200030d4 	ldrdcs	r3, [r0], -r4
 774:	00000050 	andeq	r0, r0, r0, asr r0
 778:	40080e41 	andmi	r0, r8, r1, asr #28
 77c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 780:	180e4101 	stmdane	lr, {r0, r8, lr}
 784:	00070d41 	andeq	r0, r7, r1, asr #26
 788:	0000001c 	andeq	r0, r0, ip, lsl r0
 78c:	00000738 	andeq	r0, r0, r8, lsr r7
 790:	20003124 	andcs	r3, r0, r4, lsr #2
 794:	0000002a 	andeq	r0, r0, sl, lsr #32
 798:	40080e41 	andmi	r0, r8, r1, asr #28
 79c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7a0:	100e4101 	andne	r4, lr, r1, lsl #2
 7a4:	00070d41 	andeq	r0, r7, r1, asr #26
 7a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 7ac:	00000738 	andeq	r0, r0, r8, lsr r7
 7b0:	2000314e 	andcs	r3, r0, lr, asr #2
 7b4:	0000002a 	andeq	r0, r0, sl, lsr #32
 7b8:	40080e41 	andmi	r0, r8, r1, asr #28
 7bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7c0:	100e4101 	andne	r4, lr, r1, lsl #2
 7c4:	00070d41 	andeq	r0, r7, r1, asr #26
 7c8:	00000020 	andeq	r0, r0, r0, lsr #32
 7cc:	00000738 	andeq	r0, r0, r8, lsr r7
 7d0:	20003178 	andcs	r3, r0, r8, ror r1
 7d4:	00000054 	andeq	r0, r0, r4, asr r0
 7d8:	400c0e41 	andmi	r0, ip, r1, asr #28
 7dc:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 7e0:	018e4002 	orreq	r4, lr, r2
 7e4:	41180e41 	tstmi	r8, r1, asr #28
 7e8:	0000070d 	andeq	r0, r0, sp, lsl #14
 7ec:	00000020 	andeq	r0, r0, r0, lsr #32
 7f0:	00000738 	andeq	r0, r0, r8, lsr r7
 7f4:	200031cc 	andcs	r3, r0, ip, asr #3
 7f8:	00000054 	andeq	r0, r0, r4, asr r0
 7fc:	400c0e41 	andmi	r0, ip, r1, asr #28
 800:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 804:	018e4002 	orreq	r4, lr, r2
 808:	41180e41 	tstmi	r8, r1, asr #28
 80c:	0000070d 	andeq	r0, r0, sp, lsl #14
 810:	0000001c 	andeq	r0, r0, ip, lsl r0
 814:	00000738 	andeq	r0, r0, r8, lsr r7
 818:	20003220 	andcs	r3, r0, r0, lsr #4
 81c:	00000030 	andeq	r0, r0, r0, lsr r0
 820:	40080e41 	andmi	r0, r8, r1, asr #28
 824:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 828:	100e4101 	andne	r4, lr, r1, lsl #2
 82c:	00070d41 	andeq	r0, r7, r1, asr #26
 830:	0000001c 	andeq	r0, r0, ip, lsl r0
 834:	00000738 	andeq	r0, r0, r8, lsr r7
 838:	20003250 	andcs	r3, r0, r0, asr r2
 83c:	00000034 	andeq	r0, r0, r4, lsr r0
 840:	40080e41 	andmi	r0, r8, r1, asr #28
 844:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 848:	100e4101 	andne	r4, lr, r1, lsl #2
 84c:	00070d41 	andeq	r0, r7, r1, asr #26
 850:	0000001c 	andeq	r0, r0, ip, lsl r0
 854:	00000738 	andeq	r0, r0, r8, lsr r7
 858:	20003284 	andcs	r3, r0, r4, lsl #5
 85c:	0000003c 	andeq	r0, r0, ip, lsr r0
 860:	40080e41 	andmi	r0, r8, r1, asr #28
 864:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 868:	100e4101 	andne	r4, lr, r1, lsl #2
 86c:	00070d41 	andeq	r0, r7, r1, asr #26
 870:	0000001c 	andeq	r0, r0, ip, lsl r0
 874:	00000738 	andeq	r0, r0, r8, lsr r7
 878:	200032c0 	andcs	r3, r0, r0, asr #5
 87c:	00000050 	andeq	r0, r0, r0, asr r0
 880:	40080e41 	andmi	r0, r8, r1, asr #28
 884:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 888:	180e4101 	stmdane	lr, {r0, r8, lr}
 88c:	00070d41 	andeq	r0, r7, r1, asr #26
 890:	00000018 	andeq	r0, r0, r8, lsl r0
 894:	00000738 	andeq	r0, r0, r8, lsr r7
 898:	20003310 	andcs	r3, r0, r0, lsl r3
 89c:	0000009a 	muleq	r0, sl, r0
 8a0:	40080e41 	andmi	r0, r8, r1, asr #28
 8a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8a8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 8ac:	00000018 	andeq	r0, r0, r8, lsl r0
 8b0:	00000738 	andeq	r0, r0, r8, lsr r7
 8b4:	200033aa 	andcs	r3, r0, sl, lsr #7
 8b8:	0000001a 	andeq	r0, r0, sl, lsl r0
 8bc:	40080e41 	andmi	r0, r8, r1, asr #28
 8c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8c4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 8c8:	00000018 	andeq	r0, r0, r8, lsl r0
 8cc:	00000738 	andeq	r0, r0, r8, lsr r7
 8d0:	200033c4 	andcs	r3, r0, r4, asr #7
 8d4:	00000012 	andeq	r0, r0, r2, lsl r0
 8d8:	40080e41 	andmi	r0, r8, r1, asr #28
 8dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8e0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 8e4:	00000020 	andeq	r0, r0, r0, lsr #32
 8e8:	00000738 	andeq	r0, r0, r8, lsr r7
 8ec:	200033d6 	ldrdcs	r3, [r0], -r6
 8f0:	0000006a 	andeq	r0, r0, sl, rrx
 8f4:	400c0e41 	andmi	r0, ip, r1, asr #28
 8f8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 8fc:	018e4002 	orreq	r4, lr, r2
 900:	41300e41 	teqmi	r0, r1, asr #28
 904:	0000070d 	andeq	r0, r0, sp, lsl #14
 908:	0000001c 	andeq	r0, r0, ip, lsl r0
 90c:	00000738 	andeq	r0, r0, r8, lsr r7
 910:	20003440 	andcs	r3, r0, r0, asr #8
 914:	0000005e 	andeq	r0, r0, lr, asr r0
 918:	40080e41 	andmi	r0, r8, r1, asr #28
 91c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 920:	100e4101 	andne	r4, lr, r1, lsl #2
 924:	00070d41 	andeq	r0, r7, r1, asr #26
 928:	0000001c 	andeq	r0, r0, ip, lsl r0
 92c:	00000738 	andeq	r0, r0, r8, lsr r7
 930:	2000349e 	mulcs	r0, lr, r4
 934:	0000008e 	andeq	r0, r0, lr, lsl #1
 938:	40080e41 	andmi	r0, r8, r1, asr #28
 93c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 940:	200e4101 	andcs	r4, lr, r1, lsl #2
 944:	00070d41 	andeq	r0, r7, r1, asr #26
 948:	00000020 	andeq	r0, r0, r0, lsr #32
 94c:	00000738 	andeq	r0, r0, r8, lsr r7
 950:	2000352c 	andcs	r3, r0, ip, lsr #10
 954:	00000084 	andeq	r0, r0, r4, lsl #1
 958:	400c0e41 	andmi	r0, ip, r1, asr #28
 95c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 960:	018e4002 	orreq	r4, lr, r2
 964:	41380e41 	teqmi	r8, r1, asr #28
 968:	0000070d 	andeq	r0, r0, sp, lsl #14
 96c:	0000000c 	andeq	r0, r0, ip
 970:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 974:	7c020001 	stcvc	0, cr0, [r2], {1}
 978:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 97c:	0000001c 	andeq	r0, r0, ip, lsl r0
 980:	0000096c 	andeq	r0, r0, ip, ror #18
 984:	200035b0 			; <UNDEFINED> instruction: 0x200035b0
 988:	0000005a 	andeq	r0, r0, sl, asr r0
 98c:	40080e41 	andmi	r0, r8, r1, asr #28
 990:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 994:	180e4101 	stmdane	lr, {r0, r8, lr}
 998:	00070d41 	andeq	r0, r7, r1, asr #26
 99c:	0000001c 	andeq	r0, r0, ip, lsl r0
 9a0:	0000096c 	andeq	r0, r0, ip, ror #18
 9a4:	2000360a 	andcs	r3, r0, sl, lsl #12
 9a8:	0000003a 	andeq	r0, r0, sl, lsr r0
 9ac:	40080e41 	andmi	r0, r8, r1, asr #28
 9b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 9b4:	180e4101 	stmdane	lr, {r0, r8, lr}
 9b8:	00070d41 	andeq	r0, r7, r1, asr #26
 9bc:	0000000c 	andeq	r0, r0, ip
 9c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 9c4:	7c020001 	stcvc	0, cr0, [r2], {1}
 9c8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 9cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 9d0:	000009bc 			; <UNDEFINED> instruction: 0x000009bc
 9d4:	20003644 	andcs	r3, r0, r4, asr #12
 9d8:	00000074 	andeq	r0, r0, r4, ror r0
 9dc:	40080e41 	andmi	r0, r8, r1, asr #28
 9e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 9e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 9e8:	00070d41 	andeq	r0, r7, r1, asr #26
 9ec:	00000020 	andeq	r0, r0, r0, lsr #32
 9f0:	000009bc 			; <UNDEFINED> instruction: 0x000009bc
 9f4:	200036b8 			; <UNDEFINED> instruction: 0x200036b8
 9f8:	00000074 	andeq	r0, r0, r4, ror r0
 9fc:	400c0e41 	andmi	r0, ip, r1, asr #28
 a00:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 a04:	018e4002 	orreq	r4, lr, r2
 a08:	41180e41 	tstmi	r8, r1, asr #28
 a0c:	0000070d 	andeq	r0, r0, sp, lsl #14
 a10:	0000000c 	andeq	r0, r0, ip
 a14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a18:	7c020001 	stcvc	0, cr0, [r2], {1}
 a1c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a20:	0000001c 	andeq	r0, r0, ip, lsl r0
 a24:	00000a10 	andeq	r0, r0, r0, lsl sl
 a28:	2000372c 	andcs	r3, r0, ip, lsr #14
 a2c:	00000074 	andeq	r0, r0, r4, ror r0
 a30:	40080e41 	andmi	r0, r8, r1, asr #28
 a34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a38:	180e4101 	stmdane	lr, {r0, r8, lr}
 a3c:	00070d41 	andeq	r0, r7, r1, asr #26
 a40:	00000020 	andeq	r0, r0, r0, lsr #32
 a44:	00000a10 	andeq	r0, r0, r0, lsl sl
 a48:	200037a0 	andcs	r3, r0, r0, lsr #15
 a4c:	00000074 	andeq	r0, r0, r4, ror r0
 a50:	400c0e41 	andmi	r0, ip, r1, asr #28
 a54:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 a58:	018e4002 	orreq	r4, lr, r2
 a5c:	41180e41 	tstmi	r8, r1, asr #28
 a60:	0000070d 	andeq	r0, r0, sp, lsl #14
 a64:	0000000c 	andeq	r0, r0, ip
 a68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a6c:	7c020001 	stcvc	0, cr0, [r2], {1}
 a70:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a74:	0000001c 	andeq	r0, r0, ip, lsl r0
 a78:	00000a64 	andeq	r0, r0, r4, ror #20
 a7c:	20003814 	andcs	r3, r0, r4, lsl r8
 a80:	00000074 	andeq	r0, r0, r4, ror r0
 a84:	40080e41 	andmi	r0, r8, r1, asr #28
 a88:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a8c:	180e4101 	stmdane	lr, {r0, r8, lr}
 a90:	00070d41 	andeq	r0, r7, r1, asr #26
 a94:	00000020 	andeq	r0, r0, r0, lsr #32
 a98:	00000a64 	andeq	r0, r0, r4, ror #20
 a9c:	20003888 	andcs	r3, r0, r8, lsl #17
 aa0:	00000074 	andeq	r0, r0, r4, ror r0
 aa4:	400c0e41 	andmi	r0, ip, r1, asr #28
 aa8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 aac:	018e4002 	orreq	r4, lr, r2
 ab0:	41180e41 	tstmi	r8, r1, asr #28
 ab4:	0000070d 	andeq	r0, r0, sp, lsl #14
 ab8:	0000000c 	andeq	r0, r0, ip
 abc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 ac0:	7c010001 	stcvc	0, cr0, [r1], {1}
 ac4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 ac8:	0000000c 	andeq	r0, r0, ip
 acc:	00000ab8 			; <UNDEFINED> instruction: 0x00000ab8
 ad0:	200038fd 	strdcs	r3, [r0], -sp
 ad4:	000001cc 	andeq	r0, r0, ip, asr #3
