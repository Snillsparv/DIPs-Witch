
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#endif
}

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f894 	bl	20000130 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:
void init_app( void ) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*portModer = 0x55555555;
20000014:	4b05      	ldr	r3, [pc, #20]	; (2000002c <init_app+0x1c>)
20000016:	4a06      	ldr	r2, [pc, #24]	; (20000030 <init_app+0x20>)
20000018:	601a      	str	r2, [r3, #0]
	set_up_DIL();
2000001a:	f001 f87f 	bl	2000111c <set_up_DIL>
	graphic_initialize();
2000001e:	f000 fbab 	bl	20000778 <graphic_initialize>
	graphic_clear_screen();
20000022:	f000 fbe0 	bl	200007e6 <graphic_clear_screen>
}
20000026:	46c0      	nop			; (mov r8, r8)
20000028:	46bd      	mov	sp, r7
2000002a:	bd80      	pop	{r7, pc}
2000002c:	40021000 	andmi	r1, r2, r0
20000030:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000034 <initSprites>:

sprite tempCastleBlack;
sprite tempCastleGray;
sprite tempCastleLight;

void initSprites( void ) {
20000034:	b580      	push	{r7, lr}
20000036:	b088      	sub	sp, #32
20000038:	af00      	add	r7, sp, #0
	sprite *monsterPointer = &tempMonster;
2000003a:	4b28      	ldr	r3, [pc, #160]	; (200000dc <initSprites+0xa8>)
2000003c:	61fb      	str	r3, [r7, #28]
	load_sprite(monsterPointer, monster_black_bits, monster_black_width, monster_black_height);
2000003e:	4928      	ldr	r1, [pc, #160]	; (200000e0 <initSprites+0xac>)
20000040:	69f8      	ldr	r0, [r7, #28]
20000042:	231e      	movs	r3, #30
20000044:	221e      	movs	r2, #30
20000046:	f000 f937 	bl	200002b8 <load_sprite>
	monster = monsterPointer;
2000004a:	4b26      	ldr	r3, [pc, #152]	; (200000e4 <initSprites+0xb0>)
2000004c:	69fa      	ldr	r2, [r7, #28]
2000004e:	601a      	str	r2, [r3, #0]
	
	sprite *monsterPointer2 = &tempMonsterLight;
20000050:	4b25      	ldr	r3, [pc, #148]	; (200000e8 <initSprites+0xb4>)
20000052:	61bb      	str	r3, [r7, #24]
	load_sprite(monsterPointer2, monster_light_bits, monster_light_width, monster_light_height);
20000054:	4925      	ldr	r1, [pc, #148]	; (200000ec <initSprites+0xb8>)
20000056:	69b8      	ldr	r0, [r7, #24]
20000058:	231e      	movs	r3, #30
2000005a:	221e      	movs	r2, #30
2000005c:	f000 f92c 	bl	200002b8 <load_sprite>
	monsterLight = monsterPointer2;
20000060:	4b23      	ldr	r3, [pc, #140]	; (200000f0 <initSprites+0xbc>)
20000062:	69ba      	ldr	r2, [r7, #24]
20000064:	601a      	str	r2, [r3, #0]

	sprite *monsterPointer3 = &tempMonsterGray;
20000066:	4b23      	ldr	r3, [pc, #140]	; (200000f4 <initSprites+0xc0>)
20000068:	617b      	str	r3, [r7, #20]
	load_sprite(monsterPointer3, monster_gray_bits, monster_gray_width, monster_gray_height);
2000006a:	4923      	ldr	r1, [pc, #140]	; (200000f8 <initSprites+0xc4>)
2000006c:	6978      	ldr	r0, [r7, #20]
2000006e:	231e      	movs	r3, #30
20000070:	221e      	movs	r2, #30
20000072:	f000 f921 	bl	200002b8 <load_sprite>
	monsterGray = monsterPointer3;
20000076:	4b21      	ldr	r3, [pc, #132]	; (200000fc <initSprites+0xc8>)
20000078:	697a      	ldr	r2, [r7, #20]
2000007a:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempBg;
2000007c:	4b20      	ldr	r3, [pc, #128]	; (20000100 <initSprites+0xcc>)
2000007e:	613b      	str	r3, [r7, #16]
	load_sprite(pointer4, bg_bits, bg_width, bg_height);
20000080:	4920      	ldr	r1, [pc, #128]	; (20000104 <initSprites+0xd0>)
20000082:	6938      	ldr	r0, [r7, #16]
20000084:	2340      	movs	r3, #64	; 0x40
20000086:	2280      	movs	r2, #128	; 0x80
20000088:	f000 f916 	bl	200002b8 <load_sprite>
	bg = pointer4;
2000008c:	4b1e      	ldr	r3, [pc, #120]	; (20000108 <initSprites+0xd4>)
2000008e:	693a      	ldr	r2, [r7, #16]
20000090:	601a      	str	r2, [r3, #0]
	
	sprite *pointer5 = &tempCastleBlack;
20000092:	4b1e      	ldr	r3, [pc, #120]	; (2000010c <initSprites+0xd8>)
20000094:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer5, castle_black_bits, castle_black_width, castle_black_height);
20000096:	491e      	ldr	r1, [pc, #120]	; (20000110 <initSprites+0xdc>)
20000098:	68f8      	ldr	r0, [r7, #12]
2000009a:	2340      	movs	r3, #64	; 0x40
2000009c:	2280      	movs	r2, #128	; 0x80
2000009e:	f000 f90b 	bl	200002b8 <load_sprite>
	castleBlack = pointer5;
200000a2:	4b1c      	ldr	r3, [pc, #112]	; (20000114 <initSprites+0xe0>)
200000a4:	68fa      	ldr	r2, [r7, #12]
200000a6:	601a      	str	r2, [r3, #0]
	
	sprite *pointer6 = &tempCastleGray;
200000a8:	4b1b      	ldr	r3, [pc, #108]	; (20000118 <initSprites+0xe4>)
200000aa:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer6, castle_gray_bits, castle_black_width, castle_black_height);
200000ac:	491b      	ldr	r1, [pc, #108]	; (2000011c <initSprites+0xe8>)
200000ae:	68b8      	ldr	r0, [r7, #8]
200000b0:	2340      	movs	r3, #64	; 0x40
200000b2:	2280      	movs	r2, #128	; 0x80
200000b4:	f000 f900 	bl	200002b8 <load_sprite>
	castleGray = pointer6;
200000b8:	4b19      	ldr	r3, [pc, #100]	; (20000120 <initSprites+0xec>)
200000ba:	68ba      	ldr	r2, [r7, #8]
200000bc:	601a      	str	r2, [r3, #0]
	
	sprite *pointer7 = &tempCastleLight;
200000be:	4b19      	ldr	r3, [pc, #100]	; (20000124 <initSprites+0xf0>)
200000c0:	607b      	str	r3, [r7, #4]
	load_sprite(pointer7, castle_light_bits, castle_black_width, castle_black_height);
200000c2:	4919      	ldr	r1, [pc, #100]	; (20000128 <initSprites+0xf4>)
200000c4:	6878      	ldr	r0, [r7, #4]
200000c6:	2340      	movs	r3, #64	; 0x40
200000c8:	2280      	movs	r2, #128	; 0x80
200000ca:	f000 f8f5 	bl	200002b8 <load_sprite>
	castleLight = pointer7;
200000ce:	4b17      	ldr	r3, [pc, #92]	; (2000012c <initSprites+0xf8>)
200000d0:	687a      	ldr	r2, [r7, #4]
200000d2:	601a      	str	r2, [r3, #0]
}
200000d4:	46c0      	nop			; (mov r8, r8)
200000d6:	46bd      	mov	sp, r7
200000d8:	b008      	add	sp, #32
200000da:	bd80      	pop	{r7, pc}
200000dc:	20001640 	andcs	r1, r0, r0, asr #12
200000e0:	20003578 	andcs	r3, r0, r8, ror r5
200000e4:	2000162c 	andcs	r1, r0, ip, lsr #12
200000e8:	2000166c 	andcs	r1, r0, ip, ror #12
200000ec:	200035f0 	strdcs	r3, [r0], -r0
200000f0:	20001684 	andcs	r1, r0, r4, lsl #13
200000f4:	20001650 	andcs	r1, r0, r0, asr r6
200000f8:	20003668 	andcs	r3, r0, r8, ror #12
200000fc:	2000168c 	andcs	r1, r0, ip, lsl #13
20000100:	20001690 	mulcs	r0, r0, r6
20000104:	200042e0 	andcs	r4, r0, r0, ror #5
20000108:	2000164c 	andcs	r1, r0, ip, asr #12
2000010c:	20001630 	andcs	r1, r0, r0, lsr r6
20000110:	200036e0 	andcs	r3, r0, r0, ror #13
20000114:	2000163c 	andcs	r1, r0, ip, lsr r6
20000118:	20001678 	andcs	r1, r0, r8, ror r6
2000011c:	20003ae0 	andcs	r3, r0, r0, ror #21
20000120:	20001688 	andcs	r1, r0, r8, lsl #13
20000124:	20001660 	andcs	r1, r0, r0, ror #12
20000128:	20003ee0 	andcs	r3, r0, r0, ror #29
2000012c:	2000165c 	andcs	r1, r0, ip, asr r6

20000130 <main>:
	
void main(void)
{
20000130:	b590      	push	{r4, r7, lr}
20000132:	b0b3      	sub	sp, #204	; 0xcc
20000134:	af00      	add	r7, sp, #0
 * 2. Draw it with method above.
 * 3. Show frame with some long fram_length for testing.
 * 
 * */
	
	init_app();	
20000136:	f7ff ff6b 	bl	20000010 <init_app>
	initSprites();
2000013a:	f7ff ff7b 	bl	20000034 <initSprites>
	
	GameObject monsterObj;
	Image monsterImage;
	Image monsterImages[] = {monsterImage};
2000013e:	2388      	movs	r3, #136	; 0x88
20000140:	18fb      	adds	r3, r7, r3
20000142:	2294      	movs	r2, #148	; 0x94
20000144:	18ba      	adds	r2, r7, r2
20000146:	ca13      	ldmia	r2!, {r0, r1, r4}
20000148:	c313      	stmia	r3!, {r0, r1, r4}
	monsterObj.images = monsterImages;
2000014a:	23a0      	movs	r3, #160	; 0xa0
2000014c:	18fb      	adds	r3, r7, r3
2000014e:	2288      	movs	r2, #136	; 0x88
20000150:	18ba      	adds	r2, r7, r2
20000152:	601a      	str	r2, [r3, #0]
	load_image(&monsterObj.images[0], monster, monsterGray, monsterLight);
20000154:	23a0      	movs	r3, #160	; 0xa0
20000156:	18fb      	adds	r3, r7, r3
20000158:	6818      	ldr	r0, [r3, #0]
2000015a:	4b4f      	ldr	r3, [pc, #316]	; (20000298 <main+0x168>)
2000015c:	6819      	ldr	r1, [r3, #0]
2000015e:	4b4f      	ldr	r3, [pc, #316]	; (2000029c <main+0x16c>)
20000160:	681a      	ldr	r2, [r3, #0]
20000162:	4b4f      	ldr	r3, [pc, #316]	; (200002a0 <main+0x170>)
20000164:	681b      	ldr	r3, [r3, #0]
20000166:	f001 f809 	bl	2000117c <load_image>
	monsterObj.xPos = 30;
2000016a:	23a0      	movs	r3, #160	; 0xa0
2000016c:	18fb      	adds	r3, r7, r3
2000016e:	221e      	movs	r2, #30
20000170:	605a      	str	r2, [r3, #4]
	monsterObj.yPos = 4;
20000172:	23a0      	movs	r3, #160	; 0xa0
20000174:	18fb      	adds	r3, r7, r3
20000176:	2204      	movs	r2, #4
20000178:	609a      	str	r2, [r3, #8]
	monsterObj.current_frame = 0;
2000017a:	23a0      	movs	r3, #160	; 0xa0
2000017c:	18fb      	adds	r3, r7, r3
2000017e:	2200      	movs	r2, #0
20000180:	615a      	str	r2, [r3, #20]
	monsterObj.image.grayImage = monsterGray;
	monsterObj.image.lightImage = monsterLight;
	*/
	GameObject castleObj;
	Image castleImage;
	Image castleImages[] = {castleImage};
20000182:	234c      	movs	r3, #76	; 0x4c
20000184:	18fb      	adds	r3, r7, r3
20000186:	2258      	movs	r2, #88	; 0x58
20000188:	18ba      	adds	r2, r7, r2
2000018a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000018c:	c313      	stmia	r3!, {r0, r1, r4}
	castleObj.images = castleImages;
2000018e:	2364      	movs	r3, #100	; 0x64
20000190:	18fb      	adds	r3, r7, r3
20000192:	224c      	movs	r2, #76	; 0x4c
20000194:	18ba      	adds	r2, r7, r2
20000196:	601a      	str	r2, [r3, #0]
	load_image(&castleObj.images[0], castleBlack, castleGray, castleLight);
20000198:	2364      	movs	r3, #100	; 0x64
2000019a:	18fb      	adds	r3, r7, r3
2000019c:	6818      	ldr	r0, [r3, #0]
2000019e:	4b41      	ldr	r3, [pc, #260]	; (200002a4 <main+0x174>)
200001a0:	6819      	ldr	r1, [r3, #0]
200001a2:	4b41      	ldr	r3, [pc, #260]	; (200002a8 <main+0x178>)
200001a4:	681a      	ldr	r2, [r3, #0]
200001a6:	4b41      	ldr	r3, [pc, #260]	; (200002ac <main+0x17c>)
200001a8:	681b      	ldr	r3, [r3, #0]
200001aa:	f000 ffe7 	bl	2000117c <load_image>
	castleObj.xPos = 1;
200001ae:	2364      	movs	r3, #100	; 0x64
200001b0:	18fb      	adds	r3, r7, r3
200001b2:	2201      	movs	r2, #1
200001b4:	605a      	str	r2, [r3, #4]
	castleObj.yPos = 1;
200001b6:	2364      	movs	r3, #100	; 0x64
200001b8:	18fb      	adds	r3, r7, r3
200001ba:	2201      	movs	r2, #1
200001bc:	609a      	str	r2, [r3, #8]
	castleObj.current_frame = 0;
200001be:	2364      	movs	r3, #100	; 0x64
200001c0:	18fb      	adds	r3, r7, r3
200001c2:	2200      	movs	r2, #0
200001c4:	615a      	str	r2, [r3, #20]
	
	GameObject fire2;
	init_fire( &fire2 );
200001c6:	2328      	movs	r3, #40	; 0x28
200001c8:	18fb      	adds	r3, r7, r3
200001ca:	0018      	movs	r0, r3
200001cc:	f001 f8ac 	bl	20001328 <init_fire>
	GameObject fire3;
	init_fire( &fire3 );
200001d0:	1d3b      	adds	r3, r7, #4
200001d2:	0018      	movs	r0, r3
200001d4:	f001 f8a8 	bl	20001328 <init_fire>
	fire2.xPos = 94;
200001d8:	2328      	movs	r3, #40	; 0x28
200001da:	18fb      	adds	r3, r7, r3
200001dc:	225e      	movs	r2, #94	; 0x5e
200001de:	605a      	str	r2, [r3, #4]
	fire2.yPos = 64-12;
200001e0:	2328      	movs	r3, #40	; 0x28
200001e2:	18fb      	adds	r3, r7, r3
200001e4:	2234      	movs	r2, #52	; 0x34
200001e6:	609a      	str	r2, [r3, #8]
	fire3.xPos = 94+13;
200001e8:	1d3b      	adds	r3, r7, #4
200001ea:	226b      	movs	r2, #107	; 0x6b
200001ec:	605a      	str	r2, [r3, #4]
	fire3.yPos = 64-12;
200001ee:	1d3b      	adds	r3, r7, #4
200001f0:	2234      	movs	r2, #52	; 0x34
200001f2:	609a      	str	r2, [r3, #8]
	//draw_game_object(&castleObj);
	
	fire2.animation_speed = 2;
200001f4:	2328      	movs	r3, #40	; 0x28
200001f6:	18fb      	adds	r3, r7, r3
200001f8:	2202      	movs	r2, #2
200001fa:	61da      	str	r2, [r3, #28]
	fire3.animation_speed = 2;
200001fc:	1d3b      	adds	r3, r7, #4
200001fe:	2202      	movs	r2, #2
20000200:	61da      	str	r2, [r3, #28]
	
	fire2.update = gameObjectUpdate;
20000202:	2328      	movs	r3, #40	; 0x28
20000204:	18fb      	adds	r3, r7, r3
20000206:	4a2a      	ldr	r2, [pc, #168]	; (200002b0 <main+0x180>)
20000208:	60da      	str	r2, [r3, #12]
	fire3.update = gameObjectUpdate;
2000020a:	1d3b      	adds	r3, r7, #4
2000020c:	4a28      	ldr	r2, [pc, #160]	; (200002b0 <main+0x180>)
2000020e:	60da      	str	r2, [r3, #12]
	
	while(1) {
		draw_game_object(&castleObj);
20000210:	2364      	movs	r3, #100	; 0x64
20000212:	18fb      	adds	r3, r7, r3
20000214:	0018      	movs	r0, r3
20000216:	f000 fedf 	bl	20000fd8 <draw_game_object>
		draw_game_object(&fire2);
2000021a:	2328      	movs	r3, #40	; 0x28
2000021c:	18fb      	adds	r3, r7, r3
2000021e:	0018      	movs	r0, r3
20000220:	f000 feda 	bl	20000fd8 <draw_game_object>
		draw_game_object(&fire3);
20000224:	1d3b      	adds	r3, r7, #4
20000226:	0018      	movs	r0, r3
20000228:	f000 fed6 	bl	20000fd8 <draw_game_object>
		draw_game_object(&monsterObj);
2000022c:	23a0      	movs	r3, #160	; 0xa0
2000022e:	18fb      	adds	r3, r7, r3
20000230:	0018      	movs	r0, r3
20000232:	f000 fed1 	bl	20000fd8 <draw_game_object>
		show_frame(1);
20000236:	2001      	movs	r0, #1
20000238:	f000 ff0f 	bl	2000105a <show_frame>
		
		fire2.update(&fire2);
2000023c:	2328      	movs	r3, #40	; 0x28
2000023e:	18fb      	adds	r3, r7, r3
20000240:	68db      	ldr	r3, [r3, #12]
20000242:	2228      	movs	r2, #40	; 0x28
20000244:	18ba      	adds	r2, r7, r2
20000246:	0010      	movs	r0, r2
20000248:	4798      	blx	r3
		fire3.update(&fire3);
2000024a:	1d3b      	adds	r3, r7, #4
2000024c:	68db      	ldr	r3, [r3, #12]
2000024e:	1d3a      	adds	r2, r7, #4
20000250:	0010      	movs	r0, r2
20000252:	4798      	blx	r3
		/*fireObj.animation_counter++;
		if (fireObj.animation_counter == fireObj.animation_speed) {
			fireObj.animation_counter = 0;
			fireObj.current_frame = (fireObj.current_frame + 1) % fireObj.n_frames;
		}*/
		int switch_zero = read_DIL_single(0);
20000254:	2000      	movs	r0, #0
20000256:	f000 ff77 	bl	20001148 <read_DIL_single>
2000025a:	0003      	movs	r3, r0
2000025c:	22c4      	movs	r2, #196	; 0xc4
2000025e:	18ba      	adds	r2, r7, r2
20000260:	6013      	str	r3, [r2, #0]
		GPIO_D.odrHigh = read_DIL();
20000262:	4c14      	ldr	r4, [pc, #80]	; (200002b4 <main+0x184>)
20000264:	f000 ff66 	bl	20001134 <read_DIL>
20000268:	0003      	movs	r3, r0
2000026a:	7563      	strb	r3, [r4, #21]
		if (switch_zero) {
2000026c:	23c4      	movs	r3, #196	; 0xc4
2000026e:	18fb      	adds	r3, r7, r3
20000270:	681b      	ldr	r3, [r3, #0]
20000272:	2b00      	cmp	r3, #0
20000274:	d007      	beq.n	20000286 <main+0x156>
			monsterObj.xPos--;	
20000276:	23a0      	movs	r3, #160	; 0xa0
20000278:	18fb      	adds	r3, r7, r3
2000027a:	685b      	ldr	r3, [r3, #4]
2000027c:	1e5a      	subs	r2, r3, #1
2000027e:	23a0      	movs	r3, #160	; 0xa0
20000280:	18fb      	adds	r3, r7, r3
20000282:	605a      	str	r2, [r3, #4]
20000284:	e7c4      	b.n	20000210 <main+0xe0>
		} else {
			monsterObj.xPos++;
20000286:	23a0      	movs	r3, #160	; 0xa0
20000288:	18fb      	adds	r3, r7, r3
2000028a:	685b      	ldr	r3, [r3, #4]
2000028c:	1c5a      	adds	r2, r3, #1
2000028e:	23a0      	movs	r3, #160	; 0xa0
20000290:	18fb      	adds	r3, r7, r3
20000292:	605a      	str	r2, [r3, #4]
	while(1) {
20000294:	e7bc      	b.n	20000210 <main+0xe0>
20000296:	46c0      	nop			; (mov r8, r8)
20000298:	2000162c 	andcs	r1, r0, ip, lsr #12
2000029c:	2000168c 	andcs	r1, r0, ip, lsl #13
200002a0:	20001684 	andcs	r1, r0, r4, lsl #13
200002a4:	2000163c 	andcs	r1, r0, ip, lsr r6
200002a8:	20001688 	andcs	r1, r0, r8, lsl #13
200002ac:	2000165c 	andcs	r1, r0, ip, asr r6
200002b0:	200010d5 	ldrdcs	r1, [r0], -r5
200002b4:	40020c00 	andmi	r0, r2, r0, lsl #24

200002b8 <load_sprite>:
#include "sprite.h"

void load_sprite(sprite* s, unsigned char* data, int width, int height)
{
200002b8:	b580      	push	{r7, lr}
200002ba:	b084      	sub	sp, #16
200002bc:	af00      	add	r7, sp, #0
200002be:	60f8      	str	r0, [r7, #12]
200002c0:	60b9      	str	r1, [r7, #8]
200002c2:	607a      	str	r2, [r7, #4]
200002c4:	603b      	str	r3, [r7, #0]
	s->width = width;
200002c6:	687a      	ldr	r2, [r7, #4]
200002c8:	68fb      	ldr	r3, [r7, #12]
200002ca:	601a      	str	r2, [r3, #0]
	s->height = height;
200002cc:	683a      	ldr	r2, [r7, #0]
200002ce:	68fb      	ldr	r3, [r7, #12]
200002d0:	605a      	str	r2, [r3, #4]
	s->data = data;
200002d2:	68fb      	ldr	r3, [r7, #12]
200002d4:	68ba      	ldr	r2, [r7, #8]
200002d6:	609a      	str	r2, [r3, #8]
}
200002d8:	46c0      	nop			; (mov r8, r8)
200002da:	46bd      	mov	sp, r7
200002dc:	b004      	add	sp, #16
200002de:	bd80      	pop	{r7, pc}

200002e0 <delay_250ns>:
#include "graphics.h"


void delay_250ns(void){
200002e0:	b580      	push	{r7, lr}
200002e2:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
200002e4:	4b0c      	ldr	r3, [pc, #48]	; (20000318 <delay_250ns+0x38>)
200002e6:	2200      	movs	r2, #0
200002e8:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/4) -1);
200002ea:	4b0c      	ldr	r3, [pc, #48]	; (2000031c <delay_250ns+0x3c>)
200002ec:	2229      	movs	r2, #41	; 0x29
200002ee:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
200002f0:	4b0b      	ldr	r3, [pc, #44]	; (20000320 <delay_250ns+0x40>)
200002f2:	2200      	movs	r2, #0
200002f4:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
200002f6:	4b08      	ldr	r3, [pc, #32]	; (20000318 <delay_250ns+0x38>)
200002f8:	2205      	movs	r2, #5
200002fa:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
200002fc:	46c0      	nop			; (mov r8, r8)
200002fe:	4b06      	ldr	r3, [pc, #24]	; (20000318 <delay_250ns+0x38>)
20000300:	681a      	ldr	r2, [r3, #0]
20000302:	2380      	movs	r3, #128	; 0x80
20000304:	025b      	lsls	r3, r3, #9
20000306:	4013      	ands	r3, r2
20000308:	d0f9      	beq.n	200002fe <delay_250ns+0x1e>
	*STK_CTRL = 0;
2000030a:	4b03      	ldr	r3, [pc, #12]	; (20000318 <delay_250ns+0x38>)
2000030c:	2200      	movs	r2, #0
2000030e:	601a      	str	r2, [r3, #0]
}
20000310:	46c0      	nop			; (mov r8, r8)
20000312:	46bd      	mov	sp, r7
20000314:	bd80      	pop	{r7, pc}
20000316:	46c0      	nop			; (mov r8, r8)
20000318:	e000e010 	and	lr, r0, r0, lsl r0
2000031c:	e000e014 	and	lr, r0, r4, lsl r0
20000320:	e000e018 	and	lr, r0, r8, lsl r0

20000324 <delay_500ns>:

void delay_500ns(void){
20000324:	b580      	push	{r7, lr}
20000326:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
20000328:	4b0c      	ldr	r3, [pc, #48]	; (2000035c <delay_500ns+0x38>)
2000032a:	2200      	movs	r2, #0
2000032c:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/2) -1);
2000032e:	4b0c      	ldr	r3, [pc, #48]	; (20000360 <delay_500ns+0x3c>)
20000330:	2253      	movs	r2, #83	; 0x53
20000332:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000334:	4b0b      	ldr	r3, [pc, #44]	; (20000364 <delay_500ns+0x40>)
20000336:	2200      	movs	r2, #0
20000338:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
2000033a:	4b08      	ldr	r3, [pc, #32]	; (2000035c <delay_500ns+0x38>)
2000033c:	2205      	movs	r2, #5
2000033e:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
20000340:	46c0      	nop			; (mov r8, r8)
20000342:	4b06      	ldr	r3, [pc, #24]	; (2000035c <delay_500ns+0x38>)
20000344:	681a      	ldr	r2, [r3, #0]
20000346:	2380      	movs	r3, #128	; 0x80
20000348:	025b      	lsls	r3, r3, #9
2000034a:	4013      	ands	r3, r2
2000034c:	d0f9      	beq.n	20000342 <delay_500ns+0x1e>
	*STK_CTRL = 0;
2000034e:	4b03      	ldr	r3, [pc, #12]	; (2000035c <delay_500ns+0x38>)
20000350:	2200      	movs	r2, #0
20000352:	601a      	str	r2, [r3, #0]
}
20000354:	46c0      	nop			; (mov r8, r8)
20000356:	46bd      	mov	sp, r7
20000358:	bd80      	pop	{r7, pc}
2000035a:	46c0      	nop			; (mov r8, r8)
2000035c:	e000e010 	and	lr, r0, r0, lsl r0
20000360:	e000e014 	and	lr, r0, r4, lsl r0
20000364:	e000e018 	and	lr, r0, r8, lsl r0

20000368 <delay_micro>:

void delay_micro(unsigned int us){
20000368:	b580      	push	{r7, lr}
2000036a:	b082      	sub	sp, #8
2000036c:	af00      	add	r7, sp, #0
2000036e:	6078      	str	r0, [r7, #4]
	while(us--) {
20000370:	e007      	b.n	20000382 <delay_micro+0x1a>
		delay_250ns();
20000372:	f7ff ffb5 	bl	200002e0 <delay_250ns>
		delay_250ns();
20000376:	f7ff ffb3 	bl	200002e0 <delay_250ns>
		delay_250ns();
2000037a:	f7ff ffb1 	bl	200002e0 <delay_250ns>
		delay_250ns();
2000037e:	f7ff ffaf 	bl	200002e0 <delay_250ns>
	while(us--) {
20000382:	687b      	ldr	r3, [r7, #4]
20000384:	1e5a      	subs	r2, r3, #1
20000386:	607a      	str	r2, [r7, #4]
20000388:	2b00      	cmp	r3, #0
2000038a:	d1f2      	bne.n	20000372 <delay_micro+0xa>
	}
}
2000038c:	46c0      	nop			; (mov r8, r8)
2000038e:	46bd      	mov	sp, r7
20000390:	b002      	add	sp, #8
20000392:	bd80      	pop	{r7, pc}

20000394 <delay_milli>:

void delay_milli(unsigned int ms){
20000394:	b580      	push	{r7, lr}
20000396:	b082      	sub	sp, #8
20000398:	af00      	add	r7, sp, #0
2000039a:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		while(ms--)
			delay_micro(1);
	#else
		while(ms--)
2000039c:	e004      	b.n	200003a8 <delay_milli+0x14>
			delay_micro(1000);
2000039e:	23fa      	movs	r3, #250	; 0xfa
200003a0:	009b      	lsls	r3, r3, #2
200003a2:	0018      	movs	r0, r3
200003a4:	f7ff ffe0 	bl	20000368 <delay_micro>
		while(ms--)
200003a8:	687b      	ldr	r3, [r7, #4]
200003aa:	1e5a      	subs	r2, r3, #1
200003ac:	607a      	str	r2, [r7, #4]
200003ae:	2b00      	cmp	r3, #0
200003b0:	d1f5      	bne.n	2000039e <delay_milli+0xa>
	#endif
}
200003b2:	46c0      	nop			; (mov r8, r8)
200003b4:	46bd      	mov	sp, r7
200003b6:	b002      	add	sp, #8
200003b8:	bd80      	pop	{r7, pc}

200003ba <clear_thisBackBuffer>:
uint8_t draw_buffer_black_light[1024]; // 128 * 64 / 8
uint8_t draw_buffer_black_gray_light[1024]; // 128 * 64 / 8
uint8_t backBuffer[1024]; // 128 * 64 / 8
uint8_t backBufferGray[1024]; // 128 * 64 / 8
uint8_t backBufferLight[1024]; // 128 * 64 / 8
void clear_thisBackBuffer(uint8_t *buffer) {
200003ba:	b580      	push	{r7, lr}
200003bc:	b084      	sub	sp, #16
200003be:	af00      	add	r7, sp, #0
200003c0:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < 1024; i++)
200003c2:	2300      	movs	r3, #0
200003c4:	60fb      	str	r3, [r7, #12]
200003c6:	e007      	b.n	200003d8 <clear_thisBackBuffer+0x1e>
		buffer[i] = 0;
200003c8:	68fb      	ldr	r3, [r7, #12]
200003ca:	687a      	ldr	r2, [r7, #4]
200003cc:	18d3      	adds	r3, r2, r3
200003ce:	2200      	movs	r2, #0
200003d0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 1024; i++)
200003d2:	68fb      	ldr	r3, [r7, #12]
200003d4:	3301      	adds	r3, #1
200003d6:	60fb      	str	r3, [r7, #12]
200003d8:	68fb      	ldr	r3, [r7, #12]
200003da:	4a03      	ldr	r2, [pc, #12]	; (200003e8 <clear_thisBackBuffer+0x2e>)
200003dc:	4293      	cmp	r3, r2
200003de:	ddf3      	ble.n	200003c8 <clear_thisBackBuffer+0xe>
}
200003e0:	46c0      	nop			; (mov r8, r8)
200003e2:	46bd      	mov	sp, r7
200003e4:	b004      	add	sp, #16
200003e6:	bd80      	pop	{r7, pc}
200003e8:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

200003ec <clear_backBuffer>:
void clear_backBuffer() {
200003ec:	b580      	push	{r7, lr}
200003ee:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
200003f0:	4b03      	ldr	r3, [pc, #12]	; (20000400 <clear_backBuffer+0x14>)
200003f2:	0018      	movs	r0, r3
200003f4:	f7ff ffe1 	bl	200003ba <clear_thisBackBuffer>
}
200003f8:	46c0      	nop			; (mov r8, r8)
200003fa:	46bd      	mov	sp, r7
200003fc:	bd80      	pop	{r7, pc}
200003fe:	46c0      	nop			; (mov r8, r8)
20000400:	20001e9c 	mulcs	r0, ip, lr

20000404 <clear_all_backBuffers>:
void clear_all_backBuffers() {
20000404:	b580      	push	{r7, lr}
20000406:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
20000408:	4b07      	ldr	r3, [pc, #28]	; (20000428 <clear_all_backBuffers+0x24>)
2000040a:	0018      	movs	r0, r3
2000040c:	f7ff ffd5 	bl	200003ba <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferGray);
20000410:	4b06      	ldr	r3, [pc, #24]	; (2000042c <clear_all_backBuffers+0x28>)
20000412:	0018      	movs	r0, r3
20000414:	f7ff ffd1 	bl	200003ba <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferLight);
20000418:	4b05      	ldr	r3, [pc, #20]	; (20000430 <clear_all_backBuffers+0x2c>)
2000041a:	0018      	movs	r0, r3
2000041c:	f7ff ffcd 	bl	200003ba <clear_thisBackBuffer>
}
20000420:	46c0      	nop			; (mov r8, r8)
20000422:	46bd      	mov	sp, r7
20000424:	bd80      	pop	{r7, pc}
20000426:	46c0      	nop			; (mov r8, r8)
20000428:	20001e9c 	mulcs	r0, ip, lr
2000042c:	2000169c 	mulcs	r0, ip, r6
20000430:	20002e9c 	mulcs	r0, ip, lr

20000434 <graphic_ctrl_bit_set>:

/* välj grafik-display och ettställ de bitar som är 1 i x */
static void graphic_ctrl_bit_set( uint8_t x) {
20000434:	b580      	push	{r7, lr}
20000436:	b084      	sub	sp, #16
20000438:	af00      	add	r7, sp, #0
2000043a:	0002      	movs	r2, r0
2000043c:	1dfb      	adds	r3, r7, #7
2000043e:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
20000440:	4a0f      	ldr	r2, [pc, #60]	; (20000480 <graphic_ctrl_bit_set+0x4c>)
20000442:	230f      	movs	r3, #15
20000444:	18fb      	adds	r3, r7, r3
20000446:	7812      	ldrb	r2, [r2, #0]
20000448:	701a      	strb	r2, [r3, #0]
	c |= x;
2000044a:	230f      	movs	r3, #15
2000044c:	18fb      	adds	r3, r7, r3
2000044e:	220f      	movs	r2, #15
20000450:	18b9      	adds	r1, r7, r2
20000452:	1dfa      	adds	r2, r7, #7
20000454:	7809      	ldrb	r1, [r1, #0]
20000456:	7812      	ldrb	r2, [r2, #0]
20000458:	430a      	orrs	r2, r1
2000045a:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
2000045c:	230f      	movs	r3, #15
2000045e:	18fb      	adds	r3, r7, r3
20000460:	220f      	movs	r2, #15
20000462:	18ba      	adds	r2, r7, r2
20000464:	7812      	ldrb	r2, [r2, #0]
20000466:	2104      	movs	r1, #4
20000468:	438a      	bics	r2, r1
2000046a:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
2000046c:	4a04      	ldr	r2, [pc, #16]	; (20000480 <graphic_ctrl_bit_set+0x4c>)
2000046e:	230f      	movs	r3, #15
20000470:	18fb      	adds	r3, r7, r3
20000472:	781b      	ldrb	r3, [r3, #0]
20000474:	7013      	strb	r3, [r2, #0]
}
20000476:	46c0      	nop			; (mov r8, r8)
20000478:	46bd      	mov	sp, r7
2000047a:	b004      	add	sp, #16
2000047c:	bd80      	pop	{r7, pc}
2000047e:	46c0      	nop			; (mov r8, r8)
20000480:	40021014 	andmi	r1, r2, r4, lsl r0

20000484 <graphic_ctrl_bit_clear>:
/* välj grafik-display och nollställ de bitar som är 1 i x */
static void graphic_ctrl_bit_clear( uint8_t x) {
20000484:	b580      	push	{r7, lr}
20000486:	b084      	sub	sp, #16
20000488:	af00      	add	r7, sp, #0
2000048a:	0002      	movs	r2, r0
2000048c:	1dfb      	adds	r3, r7, #7
2000048e:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
20000490:	4a11      	ldr	r2, [pc, #68]	; (200004d8 <graphic_ctrl_bit_clear+0x54>)
20000492:	230f      	movs	r3, #15
20000494:	18fb      	adds	r3, r7, r3
20000496:	7812      	ldrb	r2, [r2, #0]
20000498:	701a      	strb	r2, [r3, #0]
	c &= ~x;
2000049a:	1dfb      	adds	r3, r7, #7
2000049c:	781b      	ldrb	r3, [r3, #0]
2000049e:	b25b      	sxtb	r3, r3
200004a0:	43db      	mvns	r3, r3
200004a2:	b25b      	sxtb	r3, r3
200004a4:	220f      	movs	r2, #15
200004a6:	18ba      	adds	r2, r7, r2
200004a8:	7812      	ldrb	r2, [r2, #0]
200004aa:	b252      	sxtb	r2, r2
200004ac:	4013      	ands	r3, r2
200004ae:	b25a      	sxtb	r2, r3
200004b0:	230f      	movs	r3, #15
200004b2:	18fb      	adds	r3, r7, r3
200004b4:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
200004b6:	230f      	movs	r3, #15
200004b8:	18fb      	adds	r3, r7, r3
200004ba:	220f      	movs	r2, #15
200004bc:	18ba      	adds	r2, r7, r2
200004be:	7812      	ldrb	r2, [r2, #0]
200004c0:	2104      	movs	r1, #4
200004c2:	438a      	bics	r2, r1
200004c4:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
200004c6:	4a04      	ldr	r2, [pc, #16]	; (200004d8 <graphic_ctrl_bit_clear+0x54>)
200004c8:	230f      	movs	r3, #15
200004ca:	18fb      	adds	r3, r7, r3
200004cc:	781b      	ldrb	r3, [r3, #0]
200004ce:	7013      	strb	r3, [r2, #0]
}
200004d0:	46c0      	nop			; (mov r8, r8)
200004d2:	46bd      	mov	sp, r7
200004d4:	b004      	add	sp, #16
200004d6:	bd80      	pop	{r7, pc}
200004d8:	40021014 	andmi	r1, r2, r4, lsl r0

200004dc <select_controller>:
void select_controller( uint8_t controller) {
200004dc:	b580      	push	{r7, lr}
200004de:	b082      	sub	sp, #8
200004e0:	af00      	add	r7, sp, #0
200004e2:	0002      	movs	r2, r0
200004e4:	1dfb      	adds	r3, r7, #7
200004e6:	701a      	strb	r2, [r3, #0]
	switch (controller) {
200004e8:	1dfb      	adds	r3, r7, #7
200004ea:	781b      	ldrb	r3, [r3, #0]
200004ec:	2b08      	cmp	r3, #8
200004ee:	d00f      	beq.n	20000510 <select_controller+0x34>
200004f0:	dc02      	bgt.n	200004f8 <select_controller+0x1c>
200004f2:	2b00      	cmp	r3, #0
200004f4:	d005      	beq.n	20000502 <select_controller+0x26>
		case (B_CS1|B_CS2): 
			graphic_ctrl_bit_set(B_CS1); 
			graphic_ctrl_bit_set(B_CS2); 
			break;
	}
}
200004f6:	e020      	b.n	2000053a <select_controller+0x5e>
	switch (controller) {
200004f8:	2b10      	cmp	r3, #16
200004fa:	d010      	beq.n	2000051e <select_controller+0x42>
200004fc:	2b18      	cmp	r3, #24
200004fe:	d015      	beq.n	2000052c <select_controller+0x50>
}
20000500:	e01b      	b.n	2000053a <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
20000502:	2008      	movs	r0, #8
20000504:	f7ff ffbe 	bl	20000484 <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_clear(B_CS2); 
20000508:	2010      	movs	r0, #16
2000050a:	f7ff ffbb 	bl	20000484 <graphic_ctrl_bit_clear>
			break;
2000050e:	e014      	b.n	2000053a <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
20000510:	2008      	movs	r0, #8
20000512:	f7ff ff8f 	bl	20000434 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS2); 
20000516:	2010      	movs	r0, #16
20000518:	f7ff ffb4 	bl	20000484 <graphic_ctrl_bit_clear>
			break;
2000051c:	e00d      	b.n	2000053a <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
2000051e:	2008      	movs	r0, #8
20000520:	f7ff ffb0 	bl	20000484 <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_set(B_CS2); 
20000524:	2010      	movs	r0, #16
20000526:	f7ff ff85 	bl	20000434 <graphic_ctrl_bit_set>
			break;
2000052a:	e006      	b.n	2000053a <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
2000052c:	2008      	movs	r0, #8
2000052e:	f7ff ff81 	bl	20000434 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_set(B_CS2); 
20000532:	2010      	movs	r0, #16
20000534:	f7ff ff7e 	bl	20000434 <graphic_ctrl_bit_set>
			break;
20000538:	46c0      	nop			; (mov r8, r8)
}
2000053a:	46c0      	nop			; (mov r8, r8)
2000053c:	46bd      	mov	sp, r7
2000053e:	b002      	add	sp, #8
20000540:	bd80      	pop	{r7, pc}

20000542 <graphic_wait_ready>:

void graphic_wait_ready( void ) {
20000542:	b580      	push	{r7, lr}
20000544:	b082      	sub	sp, #8
20000546:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
20000548:	2040      	movs	r0, #64	; 0x40
2000054a:	f7ff ff9b 	bl	20000484 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
2000054e:	4b14      	ldr	r3, [pc, #80]	; (200005a0 <graphic_wait_ready+0x5e>)
20000550:	4a14      	ldr	r2, [pc, #80]	; (200005a4 <graphic_wait_ready+0x62>)
20000552:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
20000554:	2001      	movs	r0, #1
20000556:	f7ff ff95 	bl	20000484 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
2000055a:	2002      	movs	r0, #2
2000055c:	f7ff ff6a 	bl	20000434 <graphic_ctrl_bit_set>
	delay_500ns();
20000560:	f7ff fee0 	bl	20000324 <delay_500ns>
	
	while(1) {
		graphic_ctrl_bit_set(B_E);
20000564:	2040      	movs	r0, #64	; 0x40
20000566:	f7ff ff65 	bl	20000434 <graphic_ctrl_bit_set>
		delay_500ns();
2000056a:	f7ff fedb 	bl	20000324 <delay_500ns>
		c = *portIdrHigh & LCD_BUSY; //...
2000056e:	4b0e      	ldr	r3, [pc, #56]	; (200005a8 <graphic_wait_ready+0x66>)
20000570:	781b      	ldrb	r3, [r3, #0]
20000572:	b2da      	uxtb	r2, r3
20000574:	1dfb      	adds	r3, r7, #7
20000576:	217f      	movs	r1, #127	; 0x7f
20000578:	438a      	bics	r2, r1
2000057a:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
2000057c:	2040      	movs	r0, #64	; 0x40
2000057e:	f7ff ff81 	bl	20000484 <graphic_ctrl_bit_clear>
		delay_500ns();
20000582:	f7ff fecf 	bl	20000324 <delay_500ns>
		/*if (*portIdrHigh & 0x80 == 0x80) {
			break; }*/
		if (c == 0) break;
20000586:	1dfb      	adds	r3, r7, #7
20000588:	781b      	ldrb	r3, [r3, #0]
2000058a:	2b00      	cmp	r3, #0
2000058c:	d000      	beq.n	20000590 <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
2000058e:	e7e9      	b.n	20000564 <graphic_wait_ready+0x22>
		if (c == 0) break;
20000590:	46c0      	nop			; (mov r8, r8)
	}
	//graphic_ctrl_bit_set(B_E); //<--
	*portModer = 0x55555555;	
20000592:	4b03      	ldr	r3, [pc, #12]	; (200005a0 <graphic_wait_ready+0x5e>)
20000594:	4a05      	ldr	r2, [pc, #20]	; (200005ac <graphic_wait_ready+0x6a>)
20000596:	601a      	str	r2, [r3, #0]
}
20000598:	46c0      	nop			; (mov r8, r8)
2000059a:	46bd      	mov	sp, r7
2000059c:	b002      	add	sp, #8
2000059e:	bd80      	pop	{r7, pc}
200005a0:	40021000 	andmi	r1, r2, r0
200005a4:	00005555 	andeq	r5, r0, r5, asr r5
200005a8:	40021011 	andmi	r1, r2, r1, lsl r0
200005ac:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200005b0 <graphic_read>:

static uint8_t graphic_read(uint8_t controller) {
200005b0:	b580      	push	{r7, lr}
200005b2:	b084      	sub	sp, #16
200005b4:	af00      	add	r7, sp, #0
200005b6:	0002      	movs	r2, r0
200005b8:	1dfb      	adds	r3, r7, #7
200005ba:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200005bc:	2040      	movs	r0, #64	; 0x40
200005be:	f7ff ff61 	bl	20000484 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
200005c2:	4b1c      	ldr	r3, [pc, #112]	; (20000634 <graphic_read+0x84>)
200005c4:	4a1c      	ldr	r2, [pc, #112]	; (20000638 <graphic_read+0x88>)
200005c6:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS);
200005c8:	2001      	movs	r0, #1
200005ca:	f7ff ff33 	bl	20000434 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_set(B_RW);
200005ce:	2002      	movs	r0, #2
200005d0:	f7ff ff30 	bl	20000434 <graphic_ctrl_bit_set>
	select_controller(controller);
200005d4:	1dfb      	adds	r3, r7, #7
200005d6:	781b      	ldrb	r3, [r3, #0]
200005d8:	0018      	movs	r0, r3
200005da:	f7ff ff7f 	bl	200004dc <select_controller>
	delay_500ns();
200005de:	f7ff fea1 	bl	20000324 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200005e2:	2040      	movs	r0, #64	; 0x40
200005e4:	f7ff ff26 	bl	20000434 <graphic_ctrl_bit_set>
	delay_500ns();
200005e8:	f7ff fe9c 	bl	20000324 <delay_500ns>
	unsigned char rv = *portIdrHigh;
200005ec:	4a13      	ldr	r2, [pc, #76]	; (2000063c <graphic_read+0x8c>)
200005ee:	230f      	movs	r3, #15
200005f0:	18fb      	adds	r3, r7, r3
200005f2:	7812      	ldrb	r2, [r2, #0]
200005f4:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200005f6:	2040      	movs	r0, #64	; 0x40
200005f8:	f7ff ff44 	bl	20000484 <graphic_ctrl_bit_clear>
	*portModer = 0x55555555;
200005fc:	4b0d      	ldr	r3, [pc, #52]	; (20000634 <graphic_read+0x84>)
200005fe:	4a10      	ldr	r2, [pc, #64]	; (20000640 <graphic_read+0x90>)
20000600:	601a      	str	r2, [r3, #0]
	
	if(controller == B_CS1) {
20000602:	1dfb      	adds	r3, r7, #7
20000604:	781b      	ldrb	r3, [r3, #0]
20000606:	2b08      	cmp	r3, #8
20000608:	d104      	bne.n	20000614 <graphic_read+0x64>
		select_controller(B_CS1);
2000060a:	2008      	movs	r0, #8
2000060c:	f7ff ff66 	bl	200004dc <select_controller>
		graphic_wait_ready();
20000610:	f7ff ff97 	bl	20000542 <graphic_wait_ready>
	}
	if(controller == B_CS2) {
20000614:	1dfb      	adds	r3, r7, #7
20000616:	781b      	ldrb	r3, [r3, #0]
20000618:	2b10      	cmp	r3, #16
2000061a:	d104      	bne.n	20000626 <graphic_read+0x76>
		select_controller(B_CS2);
2000061c:	2010      	movs	r0, #16
2000061e:	f7ff ff5d 	bl	200004dc <select_controller>
		graphic_wait_ready();
20000622:	f7ff ff8e 	bl	20000542 <graphic_wait_ready>
	}
	
	return rv;
20000626:	230f      	movs	r3, #15
20000628:	18fb      	adds	r3, r7, r3
2000062a:	781b      	ldrb	r3, [r3, #0]
}
2000062c:	0018      	movs	r0, r3
2000062e:	46bd      	mov	sp, r7
20000630:	b004      	add	sp, #16
20000632:	bd80      	pop	{r7, pc}
20000634:	40021000 	andmi	r1, r2, r0
20000638:	00005555 	andeq	r5, r0, r5, asr r5
2000063c:	40021011 	andmi	r1, r2, r1, lsl r0
20000640:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000644 <graphic_read_data>:

graphic_read_data(uint8_t controller) {
20000644:	b580      	push	{r7, lr}
20000646:	b082      	sub	sp, #8
20000648:	af00      	add	r7, sp, #0
2000064a:	0002      	movs	r2, r0
2000064c:	1dfb      	adds	r3, r7, #7
2000064e:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
20000650:	1dfb      	adds	r3, r7, #7
20000652:	781b      	ldrb	r3, [r3, #0]
20000654:	0018      	movs	r0, r3
20000656:	f7ff ffab 	bl	200005b0 <graphic_read>
	graphic_read(controller);
2000065a:	1dfb      	adds	r3, r7, #7
2000065c:	781b      	ldrb	r3, [r3, #0]
2000065e:	0018      	movs	r0, r3
20000660:	f7ff ffa6 	bl	200005b0 <graphic_read>
}
20000664:	46c0      	nop			; (mov r8, r8)
20000666:	0018      	movs	r0, r3
20000668:	46bd      	mov	sp, r7
2000066a:	b002      	add	sp, #8
2000066c:	bd80      	pop	{r7, pc}

2000066e <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller) {
2000066e:	b580      	push	{r7, lr}
20000670:	b082      	sub	sp, #8
20000672:	af00      	add	r7, sp, #0
20000674:	0002      	movs	r2, r0
20000676:	1dfb      	adds	r3, r7, #7
20000678:	701a      	strb	r2, [r3, #0]
2000067a:	1dbb      	adds	r3, r7, #6
2000067c:	1c0a      	adds	r2, r1, #0
2000067e:	701a      	strb	r2, [r3, #0]
	*portOdrHigh = value; //I
20000680:	4a19      	ldr	r2, [pc, #100]	; (200006e8 <graphic_write+0x7a>)
20000682:	1dfb      	adds	r3, r7, #7
20000684:	781b      	ldrb	r3, [r3, #0]
20000686:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
20000688:	1dbb      	adds	r3, r7, #6
2000068a:	781b      	ldrb	r3, [r3, #0]
2000068c:	0018      	movs	r0, r3
2000068e:	f7ff ff25 	bl	200004dc <select_controller>
	delay_500ns();
20000692:	f7ff fe47 	bl	20000324 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000696:	2040      	movs	r0, #64	; 0x40
20000698:	f7ff fecc 	bl	20000434 <graphic_ctrl_bit_set>
	delay_500ns();
2000069c:	f7ff fe42 	bl	20000324 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
200006a0:	2040      	movs	r0, #64	; 0x40
200006a2:	f7ff feef 	bl	20000484 <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1) {
200006a6:	1dbb      	adds	r3, r7, #6
200006a8:	781b      	ldrb	r3, [r3, #0]
200006aa:	2208      	movs	r2, #8
200006ac:	4013      	ands	r3, r2
200006ae:	d004      	beq.n	200006ba <graphic_write+0x4c>
		select_controller(B_CS1);
200006b0:	2008      	movs	r0, #8
200006b2:	f7ff ff13 	bl	200004dc <select_controller>
		graphic_wait_ready();
200006b6:	f7ff ff44 	bl	20000542 <graphic_wait_ready>
	}
	if(controller & B_CS2) {
200006ba:	1dbb      	adds	r3, r7, #6
200006bc:	781b      	ldrb	r3, [r3, #0]
200006be:	2210      	movs	r2, #16
200006c0:	4013      	ands	r3, r2
200006c2:	d004      	beq.n	200006ce <graphic_write+0x60>
		select_controller(B_CS2);
200006c4:	2010      	movs	r0, #16
200006c6:	f7ff ff09 	bl	200004dc <select_controller>
		graphic_wait_ready();
200006ca:	f7ff ff3a 	bl	20000542 <graphic_wait_ready>
	}
	
	*portOdrHigh = 0;	//I
200006ce:	4b06      	ldr	r3, [pc, #24]	; (200006e8 <graphic_write+0x7a>)
200006d0:	2200      	movs	r2, #0
200006d2:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
200006d4:	2040      	movs	r0, #64	; 0x40
200006d6:	f7ff fead 	bl	20000434 <graphic_ctrl_bit_set>
	select_controller(0);
200006da:	2000      	movs	r0, #0
200006dc:	f7ff fefe 	bl	200004dc <select_controller>
}
200006e0:	46c0      	nop			; (mov r8, r8)
200006e2:	46bd      	mov	sp, r7
200006e4:	b002      	add	sp, #8
200006e6:	bd80      	pop	{r7, pc}
200006e8:	40021015 	andmi	r1, r2, r5, lsl r0

200006ec <graphic_write_command>:
void graphic_write_command(uint8_t command, uint8_t controller) {
200006ec:	b580      	push	{r7, lr}
200006ee:	b082      	sub	sp, #8
200006f0:	af00      	add	r7, sp, #0
200006f2:	0002      	movs	r2, r0
200006f4:	1dfb      	adds	r3, r7, #7
200006f6:	701a      	strb	r2, [r3, #0]
200006f8:	1dbb      	adds	r3, r7, #6
200006fa:	1c0a      	adds	r2, r1, #0
200006fc:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200006fe:	2040      	movs	r0, #64	; 0x40
20000700:	f7ff fec0 	bl	20000484 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000704:	1dbb      	adds	r3, r7, #6
20000706:	781b      	ldrb	r3, [r3, #0]
20000708:	0018      	movs	r0, r3
2000070a:	f7ff fee7 	bl	200004dc <select_controller>
	graphic_ctrl_bit_clear(B_RS);
2000070e:	2001      	movs	r0, #1
20000710:	f7ff feb8 	bl	20000484 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RW);
20000714:	2002      	movs	r0, #2
20000716:	f7ff feb5 	bl	20000484 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
2000071a:	1dbb      	adds	r3, r7, #6
2000071c:	781a      	ldrb	r2, [r3, #0]
2000071e:	1dfb      	adds	r3, r7, #7
20000720:	781b      	ldrb	r3, [r3, #0]
20000722:	0011      	movs	r1, r2
20000724:	0018      	movs	r0, r3
20000726:	f7ff ffa2 	bl	2000066e <graphic_write>
}
2000072a:	46c0      	nop			; (mov r8, r8)
2000072c:	46bd      	mov	sp, r7
2000072e:	b002      	add	sp, #8
20000730:	bd80      	pop	{r7, pc}

20000732 <graphic_write_data>:
void graphic_write_data(uint8_t command, uint8_t controller) {
20000732:	b580      	push	{r7, lr}
20000734:	b082      	sub	sp, #8
20000736:	af00      	add	r7, sp, #0
20000738:	0002      	movs	r2, r0
2000073a:	1dfb      	adds	r3, r7, #7
2000073c:	701a      	strb	r2, [r3, #0]
2000073e:	1dbb      	adds	r3, r7, #6
20000740:	1c0a      	adds	r2, r1, #0
20000742:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000744:	2040      	movs	r0, #64	; 0x40
20000746:	f7ff fe9d 	bl	20000484 <graphic_ctrl_bit_clear>
	select_controller(controller);
2000074a:	1dbb      	adds	r3, r7, #6
2000074c:	781b      	ldrb	r3, [r3, #0]
2000074e:	0018      	movs	r0, r3
20000750:	f7ff fec4 	bl	200004dc <select_controller>
	graphic_ctrl_bit_set(B_RS);
20000754:	2001      	movs	r0, #1
20000756:	f7ff fe6d 	bl	20000434 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
2000075a:	2002      	movs	r0, #2
2000075c:	f7ff fe92 	bl	20000484 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000760:	1dbb      	adds	r3, r7, #6
20000762:	781a      	ldrb	r2, [r3, #0]
20000764:	1dfb      	adds	r3, r7, #7
20000766:	781b      	ldrb	r3, [r3, #0]
20000768:	0011      	movs	r1, r2
2000076a:	0018      	movs	r0, r3
2000076c:	f7ff ff7f 	bl	2000066e <graphic_write>
}
20000770:	46c0      	nop			; (mov r8, r8)
20000772:	46bd      	mov	sp, r7
20000774:	b002      	add	sp, #8
20000776:	bd80      	pop	{r7, pc}

20000778 <graphic_initialize>:

void graphic_initialize( void ) {
20000778:	b580      	push	{r7, lr}
2000077a:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
2000077c:	2040      	movs	r0, #64	; 0x40
2000077e:	f7ff fe59 	bl	20000434 <graphic_ctrl_bit_set>
	delay_micro(10);
20000782:	200a      	movs	r0, #10
20000784:	f7ff fdf0 	bl	20000368 <delay_micro>
	
	graphic_ctrl_bit_clear(B_CS1);
20000788:	2008      	movs	r0, #8
2000078a:	f7ff fe7b 	bl	20000484 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_CS2);
2000078e:	2010      	movs	r0, #16
20000790:	f7ff fe78 	bl	20000484 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RST);
20000794:	2020      	movs	r0, #32
20000796:	f7ff fe75 	bl	20000484 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_E);
2000079a:	2040      	movs	r0, #64	; 0x40
2000079c:	f7ff fe72 	bl	20000484 <graphic_ctrl_bit_clear>
	//#define SIMULATOR
	delay_milli(30);
200007a0:	201e      	movs	r0, #30
200007a2:	f7ff fdf7 	bl	20000394 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
200007a6:	2020      	movs	r0, #32
200007a8:	f7ff fe44 	bl	20000434 <graphic_ctrl_bit_set>
	delay_milli(100); //...
200007ac:	2064      	movs	r0, #100	; 0x64
200007ae:	f7ff fdf1 	bl	20000394 <delay_milli>
	
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
200007b2:	2118      	movs	r1, #24
200007b4:	203e      	movs	r0, #62	; 0x3e
200007b6:	f7ff ff99 	bl	200006ec <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
200007ba:	2118      	movs	r1, #24
200007bc:	203f      	movs	r0, #63	; 0x3f
200007be:	f7ff ff95 	bl	200006ec <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
200007c2:	2118      	movs	r1, #24
200007c4:	20c0      	movs	r0, #192	; 0xc0
200007c6:	f7ff ff91 	bl	200006ec <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
200007ca:	2118      	movs	r1, #24
200007cc:	2040      	movs	r0, #64	; 0x40
200007ce:	f7ff ff8d 	bl	200006ec <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
200007d2:	2118      	movs	r1, #24
200007d4:	20b8      	movs	r0, #184	; 0xb8
200007d6:	f7ff ff89 	bl	200006ec <graphic_write_command>
	select_controller(0);
200007da:	2000      	movs	r0, #0
200007dc:	f7ff fe7e 	bl	200004dc <select_controller>
}
200007e0:	46c0      	nop			; (mov r8, r8)
200007e2:	46bd      	mov	sp, r7
200007e4:	bd80      	pop	{r7, pc}

200007e6 <graphic_clear_screen>:
void graphic_clear_screen( void ) {	//Annat i slidesen
200007e6:	b580      	push	{r7, lr}
200007e8:	b082      	sub	sp, #8
200007ea:	af00      	add	r7, sp, #0
	uint8_t page;
	for (page = 0; page < 8; page++) {
200007ec:	1dfb      	adds	r3, r7, #7
200007ee:	2200      	movs	r2, #0
200007f0:	701a      	strb	r2, [r3, #0]
200007f2:	e023      	b.n	2000083c <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
200007f4:	1dfb      	adds	r3, r7, #7
200007f6:	781b      	ldrb	r3, [r3, #0]
200007f8:	2248      	movs	r2, #72	; 0x48
200007fa:	4252      	negs	r2, r2
200007fc:	4313      	orrs	r3, r2
200007fe:	b2db      	uxtb	r3, r3
20000800:	2118      	movs	r1, #24
20000802:	0018      	movs	r0, r3
20000804:	f7ff ff72 	bl	200006ec <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
20000808:	2118      	movs	r1, #24
2000080a:	2040      	movs	r0, #64	; 0x40
2000080c:	f7ff ff6e 	bl	200006ec <graphic_write_command>
		uint8_t add;
		for (add = 0; add < 64; add++) {
20000810:	1dbb      	adds	r3, r7, #6
20000812:	2200      	movs	r2, #0
20000814:	701a      	strb	r2, [r3, #0]
20000816:	e008      	b.n	2000082a <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1|B_CS2);
20000818:	2118      	movs	r1, #24
2000081a:	2000      	movs	r0, #0
2000081c:	f7ff ff89 	bl	20000732 <graphic_write_data>
		for (add = 0; add < 64; add++) {
20000820:	1dbb      	adds	r3, r7, #6
20000822:	781a      	ldrb	r2, [r3, #0]
20000824:	1dbb      	adds	r3, r7, #6
20000826:	3201      	adds	r2, #1
20000828:	701a      	strb	r2, [r3, #0]
2000082a:	1dbb      	adds	r3, r7, #6
2000082c:	781b      	ldrb	r3, [r3, #0]
2000082e:	2b3f      	cmp	r3, #63	; 0x3f
20000830:	d9f2      	bls.n	20000818 <graphic_clear_screen+0x32>
	for (page = 0; page < 8; page++) {
20000832:	1dfb      	adds	r3, r7, #7
20000834:	781a      	ldrb	r2, [r3, #0]
20000836:	1dfb      	adds	r3, r7, #7
20000838:	3201      	adds	r2, #1
2000083a:	701a      	strb	r2, [r3, #0]
2000083c:	1dfb      	adds	r3, r7, #7
2000083e:	781b      	ldrb	r3, [r3, #0]
20000840:	2b07      	cmp	r3, #7
20000842:	d9d7      	bls.n	200007f4 <graphic_clear_screen+0xe>
		}
	}
}
20000844:	46c0      	nop			; (mov r8, r8)
20000846:	46bd      	mov	sp, r7
20000848:	b002      	add	sp, #8
2000084a:	bd80      	pop	{r7, pc}

2000084c <pixel>:

/** Color: 1=light 2=gray 3=black*/
void pixel(int x, int y, int set, int color) {
2000084c:	b580      	push	{r7, lr}
2000084e:	b086      	sub	sp, #24
20000850:	af00      	add	r7, sp, #0
20000852:	60f8      	str	r0, [r7, #12]
20000854:	60b9      	str	r1, [r7, #8]
20000856:	607a      	str	r2, [r7, #4]
20000858:	603b      	str	r3, [r7, #0]
	uint8_t mask;
	int index = 0;
2000085a:	2300      	movs	r3, #0
2000085c:	613b      	str	r3, [r7, #16]
	if( (x > 128 ) || (x < 1) || (y > 64) || (y < 1) ) 
2000085e:	68fb      	ldr	r3, [r7, #12]
20000860:	2b80      	cmp	r3, #128	; 0x80
20000862:	dd00      	ble.n	20000866 <pixel+0x1a>
20000864:	e0a6      	b.n	200009b4 <pixel+0x168>
20000866:	68fb      	ldr	r3, [r7, #12]
20000868:	2b00      	cmp	r3, #0
2000086a:	dc00      	bgt.n	2000086e <pixel+0x22>
2000086c:	e0a2      	b.n	200009b4 <pixel+0x168>
2000086e:	68bb      	ldr	r3, [r7, #8]
20000870:	2b40      	cmp	r3, #64	; 0x40
20000872:	dd00      	ble.n	20000876 <pixel+0x2a>
20000874:	e09e      	b.n	200009b4 <pixel+0x168>
20000876:	68bb      	ldr	r3, [r7, #8]
20000878:	2b00      	cmp	r3, #0
2000087a:	dc00      	bgt.n	2000087e <pixel+0x32>
2000087c:	e09a      	b.n	200009b4 <pixel+0x168>
		return;
	mask = 1 << ((y-1)%8);
2000087e:	68bb      	ldr	r3, [r7, #8]
20000880:	3b01      	subs	r3, #1
20000882:	4a4e      	ldr	r2, [pc, #312]	; (200009bc <pixel+0x170>)
20000884:	4013      	ands	r3, r2
20000886:	d504      	bpl.n	20000892 <pixel+0x46>
20000888:	3b01      	subs	r3, #1
2000088a:	2208      	movs	r2, #8
2000088c:	4252      	negs	r2, r2
2000088e:	4313      	orrs	r3, r2
20000890:	3301      	adds	r3, #1
20000892:	001a      	movs	r2, r3
20000894:	2301      	movs	r3, #1
20000896:	4093      	lsls	r3, r2
20000898:	001a      	movs	r2, r3
2000089a:	2317      	movs	r3, #23
2000089c:	18fb      	adds	r3, r7, r3
2000089e:	701a      	strb	r2, [r3, #0]
	if(x > 64) {
200008a0:	68fb      	ldr	r3, [r7, #12]
200008a2:	2b40      	cmp	r3, #64	; 0x40
200008a4:	dd05      	ble.n	200008b2 <pixel+0x66>
		x -= 65;
200008a6:	68fb      	ldr	r3, [r7, #12]
200008a8:	3b41      	subs	r3, #65	; 0x41
200008aa:	60fb      	str	r3, [r7, #12]
		index = 512;
200008ac:	2380      	movs	r3, #128	; 0x80
200008ae:	009b      	lsls	r3, r3, #2
200008b0:	613b      	str	r3, [r7, #16]
	}
	index += x + ((y-1)/8)*64;
200008b2:	68bb      	ldr	r3, [r7, #8]
200008b4:	3b01      	subs	r3, #1
200008b6:	2b00      	cmp	r3, #0
200008b8:	da00      	bge.n	200008bc <pixel+0x70>
200008ba:	3307      	adds	r3, #7
200008bc:	10db      	asrs	r3, r3, #3
200008be:	019a      	lsls	r2, r3, #6
200008c0:	68fb      	ldr	r3, [r7, #12]
200008c2:	18d3      	adds	r3, r2, r3
200008c4:	693a      	ldr	r2, [r7, #16]
200008c6:	18d3      	adds	r3, r2, r3
200008c8:	613b      	str	r3, [r7, #16]

	if(set == 0)
200008ca:	687b      	ldr	r3, [r7, #4]
200008cc:	2b00      	cmp	r3, #0
200008ce:	d106      	bne.n	200008de <pixel+0x92>
		mask = ~mask;
200008d0:	2317      	movs	r3, #23
200008d2:	18fb      	adds	r3, r7, r3
200008d4:	2217      	movs	r2, #23
200008d6:	18ba      	adds	r2, r7, r2
200008d8:	7812      	ldrb	r2, [r2, #0]
200008da:	43d2      	mvns	r2, r2
200008dc:	701a      	strb	r2, [r3, #0]

	switch (color) {
200008de:	683b      	ldr	r3, [r7, #0]
200008e0:	2b02      	cmp	r3, #2
200008e2:	d024      	beq.n	2000092e <pixel+0xe2>
200008e4:	2b03      	cmp	r3, #3
200008e6:	d043      	beq.n	20000970 <pixel+0x124>
200008e8:	2b01      	cmp	r3, #1
200008ea:	d164      	bne.n	200009b6 <pixel+0x16a>
		case 1:	
			if(set)
200008ec:	687b      	ldr	r3, [r7, #4]
200008ee:	2b00      	cmp	r3, #0
200008f0:	d00e      	beq.n	20000910 <pixel+0xc4>
				backBufferLight[index] |= mask;
200008f2:	4a33      	ldr	r2, [pc, #204]	; (200009c0 <pixel+0x174>)
200008f4:	693b      	ldr	r3, [r7, #16]
200008f6:	18d3      	adds	r3, r2, r3
200008f8:	781a      	ldrb	r2, [r3, #0]
200008fa:	2317      	movs	r3, #23
200008fc:	18fb      	adds	r3, r7, r3
200008fe:	781b      	ldrb	r3, [r3, #0]
20000900:	4313      	orrs	r3, r2
20000902:	b2d9      	uxtb	r1, r3
20000904:	4a2e      	ldr	r2, [pc, #184]	; (200009c0 <pixel+0x174>)
20000906:	693b      	ldr	r3, [r7, #16]
20000908:	18d3      	adds	r3, r2, r3
2000090a:	1c0a      	adds	r2, r1, #0
2000090c:	701a      	strb	r2, [r3, #0]
			else
				backBufferLight[index] &= mask;
			break;
2000090e:	e052      	b.n	200009b6 <pixel+0x16a>
				backBufferLight[index] &= mask;
20000910:	4a2b      	ldr	r2, [pc, #172]	; (200009c0 <pixel+0x174>)
20000912:	693b      	ldr	r3, [r7, #16]
20000914:	18d3      	adds	r3, r2, r3
20000916:	781b      	ldrb	r3, [r3, #0]
20000918:	2217      	movs	r2, #23
2000091a:	18ba      	adds	r2, r7, r2
2000091c:	7812      	ldrb	r2, [r2, #0]
2000091e:	4013      	ands	r3, r2
20000920:	b2d9      	uxtb	r1, r3
20000922:	4a27      	ldr	r2, [pc, #156]	; (200009c0 <pixel+0x174>)
20000924:	693b      	ldr	r3, [r7, #16]
20000926:	18d3      	adds	r3, r2, r3
20000928:	1c0a      	adds	r2, r1, #0
2000092a:	701a      	strb	r2, [r3, #0]
			break;
2000092c:	e043      	b.n	200009b6 <pixel+0x16a>
		
		case 2:	
			if(set)
2000092e:	687b      	ldr	r3, [r7, #4]
20000930:	2b00      	cmp	r3, #0
20000932:	d00e      	beq.n	20000952 <pixel+0x106>
				backBufferGray[index] |= mask;
20000934:	4a23      	ldr	r2, [pc, #140]	; (200009c4 <pixel+0x178>)
20000936:	693b      	ldr	r3, [r7, #16]
20000938:	18d3      	adds	r3, r2, r3
2000093a:	781a      	ldrb	r2, [r3, #0]
2000093c:	2317      	movs	r3, #23
2000093e:	18fb      	adds	r3, r7, r3
20000940:	781b      	ldrb	r3, [r3, #0]
20000942:	4313      	orrs	r3, r2
20000944:	b2d9      	uxtb	r1, r3
20000946:	4a1f      	ldr	r2, [pc, #124]	; (200009c4 <pixel+0x178>)
20000948:	693b      	ldr	r3, [r7, #16]
2000094a:	18d3      	adds	r3, r2, r3
2000094c:	1c0a      	adds	r2, r1, #0
2000094e:	701a      	strb	r2, [r3, #0]
			else
				backBufferGray[index] &= mask;
			break;
20000950:	e031      	b.n	200009b6 <pixel+0x16a>
				backBufferGray[index] &= mask;
20000952:	4a1c      	ldr	r2, [pc, #112]	; (200009c4 <pixel+0x178>)
20000954:	693b      	ldr	r3, [r7, #16]
20000956:	18d3      	adds	r3, r2, r3
20000958:	781b      	ldrb	r3, [r3, #0]
2000095a:	2217      	movs	r2, #23
2000095c:	18ba      	adds	r2, r7, r2
2000095e:	7812      	ldrb	r2, [r2, #0]
20000960:	4013      	ands	r3, r2
20000962:	b2d9      	uxtb	r1, r3
20000964:	4a17      	ldr	r2, [pc, #92]	; (200009c4 <pixel+0x178>)
20000966:	693b      	ldr	r3, [r7, #16]
20000968:	18d3      	adds	r3, r2, r3
2000096a:	1c0a      	adds	r2, r1, #0
2000096c:	701a      	strb	r2, [r3, #0]
			break;
2000096e:	e022      	b.n	200009b6 <pixel+0x16a>
		
		case 3:	
			if(set)
20000970:	687b      	ldr	r3, [r7, #4]
20000972:	2b00      	cmp	r3, #0
20000974:	d00e      	beq.n	20000994 <pixel+0x148>
				backBuffer[index] |= mask;
20000976:	4a14      	ldr	r2, [pc, #80]	; (200009c8 <pixel+0x17c>)
20000978:	693b      	ldr	r3, [r7, #16]
2000097a:	18d3      	adds	r3, r2, r3
2000097c:	781a      	ldrb	r2, [r3, #0]
2000097e:	2317      	movs	r3, #23
20000980:	18fb      	adds	r3, r7, r3
20000982:	781b      	ldrb	r3, [r3, #0]
20000984:	4313      	orrs	r3, r2
20000986:	b2d9      	uxtb	r1, r3
20000988:	4a0f      	ldr	r2, [pc, #60]	; (200009c8 <pixel+0x17c>)
2000098a:	693b      	ldr	r3, [r7, #16]
2000098c:	18d3      	adds	r3, r2, r3
2000098e:	1c0a      	adds	r2, r1, #0
20000990:	701a      	strb	r2, [r3, #0]
			else
				backBuffer[index] &= mask;
			break;
20000992:	e010      	b.n	200009b6 <pixel+0x16a>
				backBuffer[index] &= mask;
20000994:	4a0c      	ldr	r2, [pc, #48]	; (200009c8 <pixel+0x17c>)
20000996:	693b      	ldr	r3, [r7, #16]
20000998:	18d3      	adds	r3, r2, r3
2000099a:	781b      	ldrb	r3, [r3, #0]
2000099c:	2217      	movs	r2, #23
2000099e:	18ba      	adds	r2, r7, r2
200009a0:	7812      	ldrb	r2, [r2, #0]
200009a2:	4013      	ands	r3, r2
200009a4:	b2d9      	uxtb	r1, r3
200009a6:	4a08      	ldr	r2, [pc, #32]	; (200009c8 <pixel+0x17c>)
200009a8:	693b      	ldr	r3, [r7, #16]
200009aa:	18d3      	adds	r3, r2, r3
200009ac:	1c0a      	adds	r2, r1, #0
200009ae:	701a      	strb	r2, [r3, #0]
			break;
200009b0:	46c0      	nop			; (mov r8, r8)
200009b2:	e000      	b.n	200009b6 <pixel+0x16a>
		return;
200009b4:	46c0      	nop			; (mov r8, r8)
			
	}

}
200009b6:	46bd      	mov	sp, r7
200009b8:	b006      	add	sp, #24
200009ba:	bd80      	pop	{r7, pc}
200009bc:	80000007 	andhi	r0, r0, r7
200009c0:	20002e9c 	mulcs	r0, ip, lr
200009c4:	2000169c 	mulcs	r0, ip, r6
200009c8:	20001e9c 	mulcs	r0, ip, lr

200009cc <pixel2>:


void pixel2(int x, int y, int set) {
200009cc:	b580      	push	{r7, lr}
200009ce:	b088      	sub	sp, #32
200009d0:	af00      	add	r7, sp, #0
200009d2:	60f8      	str	r0, [r7, #12]
200009d4:	60b9      	str	r1, [r7, #8]
200009d6:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
200009d8:	68fb      	ldr	r3, [r7, #12]
200009da:	2b00      	cmp	r3, #0
200009dc:	dc00      	bgt.n	200009e0 <pixel2+0x14>
200009de:	e0bc      	b.n	20000b5a <pixel2+0x18e>
200009e0:	68bb      	ldr	r3, [r7, #8]
200009e2:	2b00      	cmp	r3, #0
200009e4:	dc00      	bgt.n	200009e8 <pixel2+0x1c>
200009e6:	e0b8      	b.n	20000b5a <pixel2+0x18e>
200009e8:	68fb      	ldr	r3, [r7, #12]
200009ea:	2b80      	cmp	r3, #128	; 0x80
200009ec:	dd00      	ble.n	200009f0 <pixel2+0x24>
200009ee:	e0b4      	b.n	20000b5a <pixel2+0x18e>
200009f0:	68bb      	ldr	r3, [r7, #8]
200009f2:	2b40      	cmp	r3, #64	; 0x40
200009f4:	dd00      	ble.n	200009f8 <pixel2+0x2c>
200009f6:	e0b0      	b.n	20000b5a <pixel2+0x18e>
	index = (y-1)/8;
200009f8:	68bb      	ldr	r3, [r7, #8]
200009fa:	3b01      	subs	r3, #1
200009fc:	2b00      	cmp	r3, #0
200009fe:	da00      	bge.n	20000a02 <pixel2+0x36>
20000a00:	3307      	adds	r3, #7
20000a02:	10db      	asrs	r3, r3, #3
20000a04:	61bb      	str	r3, [r7, #24]
	switch( (y-1)%8 ) {
20000a06:	68bb      	ldr	r3, [r7, #8]
20000a08:	3b01      	subs	r3, #1
20000a0a:	4a56      	ldr	r2, [pc, #344]	; (20000b64 <pixel2+0x198>)
20000a0c:	4013      	ands	r3, r2
20000a0e:	d504      	bpl.n	20000a1a <pixel2+0x4e>
20000a10:	3b01      	subs	r3, #1
20000a12:	2208      	movs	r2, #8
20000a14:	4252      	negs	r2, r2
20000a16:	4313      	orrs	r3, r2
20000a18:	3301      	adds	r3, #1
20000a1a:	2b07      	cmp	r3, #7
20000a1c:	d82c      	bhi.n	20000a78 <pixel2+0xac>
20000a1e:	009a      	lsls	r2, r3, #2
20000a20:	4b51      	ldr	r3, [pc, #324]	; (20000b68 <pixel2+0x19c>)
20000a22:	18d3      	adds	r3, r2, r3
20000a24:	681b      	ldr	r3, [r3, #0]
20000a26:	469f      	mov	pc, r3
		case 0: mask = 1; break;
20000a28:	231f      	movs	r3, #31
20000a2a:	18fb      	adds	r3, r7, r3
20000a2c:	2201      	movs	r2, #1
20000a2e:	701a      	strb	r2, [r3, #0]
20000a30:	e022      	b.n	20000a78 <pixel2+0xac>
		case 1: mask = 2; break;
20000a32:	231f      	movs	r3, #31
20000a34:	18fb      	adds	r3, r7, r3
20000a36:	2202      	movs	r2, #2
20000a38:	701a      	strb	r2, [r3, #0]
20000a3a:	e01d      	b.n	20000a78 <pixel2+0xac>
		case 2: mask = 4; break;
20000a3c:	231f      	movs	r3, #31
20000a3e:	18fb      	adds	r3, r7, r3
20000a40:	2204      	movs	r2, #4
20000a42:	701a      	strb	r2, [r3, #0]
20000a44:	e018      	b.n	20000a78 <pixel2+0xac>
		case 3: mask = 8; break;
20000a46:	231f      	movs	r3, #31
20000a48:	18fb      	adds	r3, r7, r3
20000a4a:	2208      	movs	r2, #8
20000a4c:	701a      	strb	r2, [r3, #0]
20000a4e:	e013      	b.n	20000a78 <pixel2+0xac>
		case 4: mask = 0x10; break;
20000a50:	231f      	movs	r3, #31
20000a52:	18fb      	adds	r3, r7, r3
20000a54:	2210      	movs	r2, #16
20000a56:	701a      	strb	r2, [r3, #0]
20000a58:	e00e      	b.n	20000a78 <pixel2+0xac>
		case 5: mask = 0x20; break;
20000a5a:	231f      	movs	r3, #31
20000a5c:	18fb      	adds	r3, r7, r3
20000a5e:	2220      	movs	r2, #32
20000a60:	701a      	strb	r2, [r3, #0]
20000a62:	e009      	b.n	20000a78 <pixel2+0xac>
		case 6: mask = 0x40; break;
20000a64:	231f      	movs	r3, #31
20000a66:	18fb      	adds	r3, r7, r3
20000a68:	2240      	movs	r2, #64	; 0x40
20000a6a:	701a      	strb	r2, [r3, #0]
20000a6c:	e004      	b.n	20000a78 <pixel2+0xac>
		case 7: mask = 0x80; break;
20000a6e:	231f      	movs	r3, #31
20000a70:	18fb      	adds	r3, r7, r3
20000a72:	2280      	movs	r2, #128	; 0x80
20000a74:	701a      	strb	r2, [r3, #0]
20000a76:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0)
20000a78:	687b      	ldr	r3, [r7, #4]
20000a7a:	2b00      	cmp	r3, #0
20000a7c:	d106      	bne.n	20000a8c <pixel2+0xc0>
		mask = ~mask;
20000a7e:	231f      	movs	r3, #31
20000a80:	18fb      	adds	r3, r7, r3
20000a82:	221f      	movs	r2, #31
20000a84:	18ba      	adds	r2, r7, r2
20000a86:	7812      	ldrb	r2, [r2, #0]
20000a88:	43d2      	mvns	r2, r2
20000a8a:	701a      	strb	r2, [r3, #0]
	
	if(x > 64){
20000a8c:	68fb      	ldr	r3, [r7, #12]
20000a8e:	2b40      	cmp	r3, #64	; 0x40
20000a90:	dd07      	ble.n	20000aa2 <pixel2+0xd6>
		controller = B_CS2;
20000a92:	231e      	movs	r3, #30
20000a94:	18fb      	adds	r3, r7, r3
20000a96:	2210      	movs	r2, #16
20000a98:	701a      	strb	r2, [r3, #0]
		x = x - 65;
20000a9a:	68fb      	ldr	r3, [r7, #12]
20000a9c:	3b41      	subs	r3, #65	; 0x41
20000a9e:	60fb      	str	r3, [r7, #12]
20000aa0:	e006      	b.n	20000ab0 <pixel2+0xe4>
	} else {
		controller = B_CS1;
20000aa2:	231e      	movs	r3, #30
20000aa4:	18fb      	adds	r3, r7, r3
20000aa6:	2208      	movs	r2, #8
20000aa8:	701a      	strb	r2, [r3, #0]
		x = x-1;
20000aaa:	68fb      	ldr	r3, [r7, #12]
20000aac:	3b01      	subs	r3, #1
20000aae:	60fb      	str	r3, [r7, #12]
	}
	graphic_write_command(LCD_SET_ADD | x, controller );
20000ab0:	68fb      	ldr	r3, [r7, #12]
20000ab2:	b25b      	sxtb	r3, r3
20000ab4:	2240      	movs	r2, #64	; 0x40
20000ab6:	4313      	orrs	r3, r2
20000ab8:	b25b      	sxtb	r3, r3
20000aba:	b2da      	uxtb	r2, r3
20000abc:	231e      	movs	r3, #30
20000abe:	18fb      	adds	r3, r7, r3
20000ac0:	781b      	ldrb	r3, [r3, #0]
20000ac2:	0019      	movs	r1, r3
20000ac4:	0010      	movs	r0, r2
20000ac6:	f7ff fe11 	bl	200006ec <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller );
20000aca:	69bb      	ldr	r3, [r7, #24]
20000acc:	b25b      	sxtb	r3, r3
20000ace:	2248      	movs	r2, #72	; 0x48
20000ad0:	4252      	negs	r2, r2
20000ad2:	4313      	orrs	r3, r2
20000ad4:	b25b      	sxtb	r3, r3
20000ad6:	b2da      	uxtb	r2, r3
20000ad8:	231e      	movs	r3, #30
20000ada:	18fb      	adds	r3, r7, r3
20000adc:	781b      	ldrb	r3, [r3, #0]
20000ade:	0019      	movs	r1, r3
20000ae0:	0010      	movs	r0, r2
20000ae2:	f7ff fe03 	bl	200006ec <graphic_write_command>
	
	c = graphic_read_data(controller);
20000ae6:	231e      	movs	r3, #30
20000ae8:	18fb      	adds	r3, r7, r3
20000aea:	781b      	ldrb	r3, [r3, #0]
20000aec:	0018      	movs	r0, r3
20000aee:	f7ff fda9 	bl	20000644 <graphic_read_data>
20000af2:	0002      	movs	r2, r0
20000af4:	2317      	movs	r3, #23
20000af6:	18fb      	adds	r3, r7, r3
20000af8:	701a      	strb	r2, [r3, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
20000afa:	68fb      	ldr	r3, [r7, #12]
20000afc:	b25b      	sxtb	r3, r3
20000afe:	2240      	movs	r2, #64	; 0x40
20000b00:	4313      	orrs	r3, r2
20000b02:	b25b      	sxtb	r3, r3
20000b04:	b2da      	uxtb	r2, r3
20000b06:	231e      	movs	r3, #30
20000b08:	18fb      	adds	r3, r7, r3
20000b0a:	781b      	ldrb	r3, [r3, #0]
20000b0c:	0019      	movs	r1, r3
20000b0e:	0010      	movs	r0, r2
20000b10:	f7ff fdec 	bl	200006ec <graphic_write_command>
	
	if(set)
20000b14:	687b      	ldr	r3, [r7, #4]
20000b16:	2b00      	cmp	r3, #0
20000b18:	d00a      	beq.n	20000b30 <pixel2+0x164>
		mask = mask | c;
20000b1a:	231f      	movs	r3, #31
20000b1c:	18fb      	adds	r3, r7, r3
20000b1e:	221f      	movs	r2, #31
20000b20:	18b9      	adds	r1, r7, r2
20000b22:	2217      	movs	r2, #23
20000b24:	18ba      	adds	r2, r7, r2
20000b26:	7809      	ldrb	r1, [r1, #0]
20000b28:	7812      	ldrb	r2, [r2, #0]
20000b2a:	430a      	orrs	r2, r1
20000b2c:	701a      	strb	r2, [r3, #0]
20000b2e:	e009      	b.n	20000b44 <pixel2+0x178>
	else
		mask = mask & c;
20000b30:	231f      	movs	r3, #31
20000b32:	18fb      	adds	r3, r7, r3
20000b34:	221f      	movs	r2, #31
20000b36:	18ba      	adds	r2, r7, r2
20000b38:	2117      	movs	r1, #23
20000b3a:	1879      	adds	r1, r7, r1
20000b3c:	7812      	ldrb	r2, [r2, #0]
20000b3e:	7809      	ldrb	r1, [r1, #0]
20000b40:	400a      	ands	r2, r1
20000b42:	701a      	strb	r2, [r3, #0]
	
	graphic_write_data(mask, controller);
20000b44:	231e      	movs	r3, #30
20000b46:	18fb      	adds	r3, r7, r3
20000b48:	781a      	ldrb	r2, [r3, #0]
20000b4a:	231f      	movs	r3, #31
20000b4c:	18fb      	adds	r3, r7, r3
20000b4e:	781b      	ldrb	r3, [r3, #0]
20000b50:	0011      	movs	r1, r2
20000b52:	0018      	movs	r0, r3
20000b54:	f7ff fded 	bl	20000732 <graphic_write_data>
20000b58:	e000      	b.n	20000b5c <pixel2+0x190>
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20000b5a:	46c0      	nop			; (mov r8, r8)
}
20000b5c:	46bd      	mov	sp, r7
20000b5e:	b008      	add	sp, #32
20000b60:	bd80      	pop	{r7, pc}
20000b62:	46c0      	nop			; (mov r8, r8)
20000b64:	80000007 	andhi	r0, r0, r7
20000b68:	20004768 	andcs	r4, r0, r8, ror #14

20000b6c <graphic_draw_screen>:

void graphic_draw_screen(uint8_t *buffer) {
20000b6c:	b580      	push	{r7, lr}
20000b6e:	b086      	sub	sp, #24
20000b70:	af00      	add	r7, sp, #0
20000b72:	6078      	str	r0, [r7, #4]
	uint8_t i, j, controller, c;
	unsigned int k = 0;
20000b74:	2300      	movs	r3, #0
20000b76:	613b      	str	r3, [r7, #16]
	for(c = 0; c < 2; c++) {
20000b78:	2315      	movs	r3, #21
20000b7a:	18fb      	adds	r3, r7, r3
20000b7c:	2200      	movs	r2, #0
20000b7e:	701a      	strb	r2, [r3, #0]
20000b80:	e056      	b.n	20000c30 <graphic_draw_screen+0xc4>
		controller = (c == 0) ? B_CS1 : B_CS2;
20000b82:	2315      	movs	r3, #21
20000b84:	18fb      	adds	r3, r7, r3
20000b86:	781b      	ldrb	r3, [r3, #0]
20000b88:	2b00      	cmp	r3, #0
20000b8a:	d101      	bne.n	20000b90 <graphic_draw_screen+0x24>
20000b8c:	2208      	movs	r2, #8
20000b8e:	e000      	b.n	20000b92 <graphic_draw_screen+0x26>
20000b90:	2210      	movs	r2, #16
20000b92:	230f      	movs	r3, #15
20000b94:	18fb      	adds	r3, r7, r3
20000b96:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 8; j++) {
20000b98:	2316      	movs	r3, #22
20000b9a:	18fb      	adds	r3, r7, r3
20000b9c:	2200      	movs	r2, #0
20000b9e:	701a      	strb	r2, [r3, #0]
20000ba0:	e03a      	b.n	20000c18 <graphic_draw_screen+0xac>
			graphic_write_command(LCD_SET_PAGE | j, controller);
20000ba2:	2316      	movs	r3, #22
20000ba4:	18fb      	adds	r3, r7, r3
20000ba6:	781b      	ldrb	r3, [r3, #0]
20000ba8:	2248      	movs	r2, #72	; 0x48
20000baa:	4252      	negs	r2, r2
20000bac:	4313      	orrs	r3, r2
20000bae:	b2da      	uxtb	r2, r3
20000bb0:	230f      	movs	r3, #15
20000bb2:	18fb      	adds	r3, r7, r3
20000bb4:	781b      	ldrb	r3, [r3, #0]
20000bb6:	0019      	movs	r1, r3
20000bb8:	0010      	movs	r0, r2
20000bba:	f7ff fd97 	bl	200006ec <graphic_write_command>
			graphic_write_command(LCD_SET_ADD | 0, controller);
20000bbe:	230f      	movs	r3, #15
20000bc0:	18fb      	adds	r3, r7, r3
20000bc2:	781b      	ldrb	r3, [r3, #0]
20000bc4:	0019      	movs	r1, r3
20000bc6:	2040      	movs	r0, #64	; 0x40
20000bc8:	f7ff fd90 	bl	200006ec <graphic_write_command>
			for(i = 0; i <= 63; i++, k++) {
20000bcc:	2317      	movs	r3, #23
20000bce:	18fb      	adds	r3, r7, r3
20000bd0:	2200      	movs	r2, #0
20000bd2:	701a      	strb	r2, [r3, #0]
20000bd4:	e014      	b.n	20000c00 <graphic_draw_screen+0x94>
				graphic_write_data(buffer[k], controller);
20000bd6:	687a      	ldr	r2, [r7, #4]
20000bd8:	693b      	ldr	r3, [r7, #16]
20000bda:	18d3      	adds	r3, r2, r3
20000bdc:	781a      	ldrb	r2, [r3, #0]
20000bde:	230f      	movs	r3, #15
20000be0:	18fb      	adds	r3, r7, r3
20000be2:	781b      	ldrb	r3, [r3, #0]
20000be4:	0019      	movs	r1, r3
20000be6:	0010      	movs	r0, r2
20000be8:	f7ff fda3 	bl	20000732 <graphic_write_data>
			for(i = 0; i <= 63; i++, k++) {
20000bec:	2317      	movs	r3, #23
20000bee:	18fb      	adds	r3, r7, r3
20000bf0:	781a      	ldrb	r2, [r3, #0]
20000bf2:	2317      	movs	r3, #23
20000bf4:	18fb      	adds	r3, r7, r3
20000bf6:	3201      	adds	r2, #1
20000bf8:	701a      	strb	r2, [r3, #0]
20000bfa:	693b      	ldr	r3, [r7, #16]
20000bfc:	3301      	adds	r3, #1
20000bfe:	613b      	str	r3, [r7, #16]
20000c00:	2317      	movs	r3, #23
20000c02:	18fb      	adds	r3, r7, r3
20000c04:	781b      	ldrb	r3, [r3, #0]
20000c06:	2b3f      	cmp	r3, #63	; 0x3f
20000c08:	d9e5      	bls.n	20000bd6 <graphic_draw_screen+0x6a>
		for(j = 0; j < 8; j++) {
20000c0a:	2316      	movs	r3, #22
20000c0c:	18fb      	adds	r3, r7, r3
20000c0e:	781a      	ldrb	r2, [r3, #0]
20000c10:	2316      	movs	r3, #22
20000c12:	18fb      	adds	r3, r7, r3
20000c14:	3201      	adds	r2, #1
20000c16:	701a      	strb	r2, [r3, #0]
20000c18:	2316      	movs	r3, #22
20000c1a:	18fb      	adds	r3, r7, r3
20000c1c:	781b      	ldrb	r3, [r3, #0]
20000c1e:	2b07      	cmp	r3, #7
20000c20:	d9bf      	bls.n	20000ba2 <graphic_draw_screen+0x36>
	for(c = 0; c < 2; c++) {
20000c22:	2315      	movs	r3, #21
20000c24:	18fb      	adds	r3, r7, r3
20000c26:	781a      	ldrb	r2, [r3, #0]
20000c28:	2315      	movs	r3, #21
20000c2a:	18fb      	adds	r3, r7, r3
20000c2c:	3201      	adds	r2, #1
20000c2e:	701a      	strb	r2, [r3, #0]
20000c30:	2315      	movs	r3, #21
20000c32:	18fb      	adds	r3, r7, r3
20000c34:	781b      	ldrb	r3, [r3, #0]
20000c36:	2b01      	cmp	r3, #1
20000c38:	d9a3      	bls.n	20000b82 <graphic_draw_screen+0x16>
			}
		}
	}
}
20000c3a:	46c0      	nop			; (mov r8, r8)
20000c3c:	46bd      	mov	sp, r7
20000c3e:	b006      	add	sp, #24
20000c40:	bd80      	pop	{r7, pc}

20000c42 <draw_sprite>:


void grayScaleTest( void );


void draw_sprite(sprite* s, int x, int y, int set, int color) {
20000c42:	b580      	push	{r7, lr}
20000c44:	b08a      	sub	sp, #40	; 0x28
20000c46:	af00      	add	r7, sp, #0
20000c48:	60f8      	str	r0, [r7, #12]
20000c4a:	60b9      	str	r1, [r7, #8]
20000c4c:	607a      	str	r2, [r7, #4]
20000c4e:	603b      	str	r3, [r7, #0]
	int i,j,k, width_in_bytes;
	if (s->width % 8 == 0)
20000c50:	68fb      	ldr	r3, [r7, #12]
20000c52:	681b      	ldr	r3, [r3, #0]
20000c54:	2207      	movs	r2, #7
20000c56:	4013      	ands	r3, r2
20000c58:	d104      	bne.n	20000c64 <draw_sprite+0x22>
		width_in_bytes = s->width / 8;
20000c5a:	68fb      	ldr	r3, [r7, #12]
20000c5c:	681b      	ldr	r3, [r3, #0]
20000c5e:	08db      	lsrs	r3, r3, #3
20000c60:	61bb      	str	r3, [r7, #24]
20000c62:	e004      	b.n	20000c6e <draw_sprite+0x2c>
	else
		width_in_bytes = (s->width / 8) + 1;
20000c64:	68fb      	ldr	r3, [r7, #12]
20000c66:	681b      	ldr	r3, [r3, #0]
20000c68:	08db      	lsrs	r3, r3, #3
20000c6a:	3301      	adds	r3, #1
20000c6c:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < s->height; i++)
20000c6e:	2300      	movs	r3, #0
20000c70:	627b      	str	r3, [r7, #36]	; 0x24
20000c72:	e039      	b.n	20000ce8 <draw_sprite+0xa6>
		for (j = 0; j < width_in_bytes; j++) {
20000c74:	2300      	movs	r3, #0
20000c76:	623b      	str	r3, [r7, #32]
20000c78:	e02f      	b.n	20000cda <draw_sprite+0x98>
			unsigned char byte = s->data[i * width_in_bytes + j];
20000c7a:	68fb      	ldr	r3, [r7, #12]
20000c7c:	689b      	ldr	r3, [r3, #8]
20000c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000c80:	69b9      	ldr	r1, [r7, #24]
20000c82:	4351      	muls	r1, r2
20000c84:	6a3a      	ldr	r2, [r7, #32]
20000c86:	188a      	adds	r2, r1, r2
20000c88:	189a      	adds	r2, r3, r2
20000c8a:	2317      	movs	r3, #23
20000c8c:	18fb      	adds	r3, r7, r3
20000c8e:	7812      	ldrb	r2, [r2, #0]
20000c90:	701a      	strb	r2, [r3, #0]
			for (k =0; k < 8; k++) {
20000c92:	2300      	movs	r3, #0
20000c94:	61fb      	str	r3, [r7, #28]
20000c96:	e01a      	b.n	20000cce <draw_sprite+0x8c>
				if (byte & (1 << k)){
20000c98:	2317      	movs	r3, #23
20000c9a:	18fb      	adds	r3, r7, r3
20000c9c:	781a      	ldrb	r2, [r3, #0]
20000c9e:	69fb      	ldr	r3, [r7, #28]
20000ca0:	411a      	asrs	r2, r3
20000ca2:	0013      	movs	r3, r2
20000ca4:	2201      	movs	r2, #1
20000ca6:	4013      	ands	r3, r2
20000ca8:	d00e      	beq.n	20000cc8 <draw_sprite+0x86>
					pixel(8 * j + k + x + 1, i + y + 1, set, color);
20000caa:	6a3b      	ldr	r3, [r7, #32]
20000cac:	00da      	lsls	r2, r3, #3
20000cae:	69fb      	ldr	r3, [r7, #28]
20000cb0:	18d2      	adds	r2, r2, r3
20000cb2:	68bb      	ldr	r3, [r7, #8]
20000cb4:	18d3      	adds	r3, r2, r3
20000cb6:	1c58      	adds	r0, r3, #1
20000cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000cba:	687b      	ldr	r3, [r7, #4]
20000cbc:	18d3      	adds	r3, r2, r3
20000cbe:	1c59      	adds	r1, r3, #1
20000cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20000cc2:	683a      	ldr	r2, [r7, #0]
20000cc4:	f7ff fdc2 	bl	2000084c <pixel>
			for (k =0; k < 8; k++) {
20000cc8:	69fb      	ldr	r3, [r7, #28]
20000cca:	3301      	adds	r3, #1
20000ccc:	61fb      	str	r3, [r7, #28]
20000cce:	69fb      	ldr	r3, [r7, #28]
20000cd0:	2b07      	cmp	r3, #7
20000cd2:	dde1      	ble.n	20000c98 <draw_sprite+0x56>
		for (j = 0; j < width_in_bytes; j++) {
20000cd4:	6a3b      	ldr	r3, [r7, #32]
20000cd6:	3301      	adds	r3, #1
20000cd8:	623b      	str	r3, [r7, #32]
20000cda:	6a3a      	ldr	r2, [r7, #32]
20000cdc:	69bb      	ldr	r3, [r7, #24]
20000cde:	429a      	cmp	r2, r3
20000ce0:	dbcb      	blt.n	20000c7a <draw_sprite+0x38>
	for (i = 0; i < s->height; i++)
20000ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000ce4:	3301      	adds	r3, #1
20000ce6:	627b      	str	r3, [r7, #36]	; 0x24
20000ce8:	68fb      	ldr	r3, [r7, #12]
20000cea:	685a      	ldr	r2, [r3, #4]
20000cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000cee:	429a      	cmp	r2, r3
20000cf0:	d8c0      	bhi.n	20000c74 <draw_sprite+0x32>
					
				}
			}
		}
}
20000cf2:	46c0      	nop			; (mov r8, r8)
20000cf4:	46bd      	mov	sp, r7
20000cf6:	b00a      	add	sp, #40	; 0x28
20000cf8:	bd80      	pop	{r7, pc}

20000cfa <fillRectangle>:

void fillRectangle( int x, int y, int width, int height ){
20000cfa:	b580      	push	{r7, lr}
20000cfc:	b086      	sub	sp, #24
20000cfe:	af00      	add	r7, sp, #0
20000d00:	60f8      	str	r0, [r7, #12]
20000d02:	60b9      	str	r1, [r7, #8]
20000d04:	607a      	str	r2, [r7, #4]
20000d06:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
20000d08:	68fb      	ldr	r3, [r7, #12]
20000d0a:	617b      	str	r3, [r7, #20]
20000d0c:	e014      	b.n	20000d38 <fillRectangle+0x3e>
		for (j = y; j < y + height; j++) {
20000d0e:	68bb      	ldr	r3, [r7, #8]
20000d10:	613b      	str	r3, [r7, #16]
20000d12:	e008      	b.n	20000d26 <fillRectangle+0x2c>
			pixel(i, j, 1, 3);
20000d14:	6939      	ldr	r1, [r7, #16]
20000d16:	6978      	ldr	r0, [r7, #20]
20000d18:	2303      	movs	r3, #3
20000d1a:	2201      	movs	r2, #1
20000d1c:	f7ff fd96 	bl	2000084c <pixel>
		for (j = y; j < y + height; j++) {
20000d20:	693b      	ldr	r3, [r7, #16]
20000d22:	3301      	adds	r3, #1
20000d24:	613b      	str	r3, [r7, #16]
20000d26:	68ba      	ldr	r2, [r7, #8]
20000d28:	683b      	ldr	r3, [r7, #0]
20000d2a:	18d2      	adds	r2, r2, r3
20000d2c:	693b      	ldr	r3, [r7, #16]
20000d2e:	429a      	cmp	r2, r3
20000d30:	dcf0      	bgt.n	20000d14 <fillRectangle+0x1a>
	for (i = x; i < x + width; i++) {
20000d32:	697b      	ldr	r3, [r7, #20]
20000d34:	3301      	adds	r3, #1
20000d36:	617b      	str	r3, [r7, #20]
20000d38:	68fa      	ldr	r2, [r7, #12]
20000d3a:	687b      	ldr	r3, [r7, #4]
20000d3c:	18d2      	adds	r2, r2, r3
20000d3e:	697b      	ldr	r3, [r7, #20]
20000d40:	429a      	cmp	r2, r3
20000d42:	dce4      	bgt.n	20000d0e <fillRectangle+0x14>
		}
	}
}
20000d44:	46c0      	nop			; (mov r8, r8)
20000d46:	46bd      	mov	sp, r7
20000d48:	b006      	add	sp, #24
20000d4a:	bd80      	pop	{r7, pc}

20000d4c <clearRectangle>:

void clearRectangle( int x, int y, int width, int height ){
20000d4c:	b580      	push	{r7, lr}
20000d4e:	b086      	sub	sp, #24
20000d50:	af00      	add	r7, sp, #0
20000d52:	60f8      	str	r0, [r7, #12]
20000d54:	60b9      	str	r1, [r7, #8]
20000d56:	607a      	str	r2, [r7, #4]
20000d58:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
20000d5a:	68fb      	ldr	r3, [r7, #12]
20000d5c:	617b      	str	r3, [r7, #20]
20000d5e:	e014      	b.n	20000d8a <clearRectangle+0x3e>
		for (j = y; j < y + height; j++) {
20000d60:	68bb      	ldr	r3, [r7, #8]
20000d62:	613b      	str	r3, [r7, #16]
20000d64:	e008      	b.n	20000d78 <clearRectangle+0x2c>
			pixel(i, j, 0, 3);
20000d66:	6939      	ldr	r1, [r7, #16]
20000d68:	6978      	ldr	r0, [r7, #20]
20000d6a:	2303      	movs	r3, #3
20000d6c:	2200      	movs	r2, #0
20000d6e:	f7ff fd6d 	bl	2000084c <pixel>
		for (j = y; j < y + height; j++) {
20000d72:	693b      	ldr	r3, [r7, #16]
20000d74:	3301      	adds	r3, #1
20000d76:	613b      	str	r3, [r7, #16]
20000d78:	68ba      	ldr	r2, [r7, #8]
20000d7a:	683b      	ldr	r3, [r7, #0]
20000d7c:	18d2      	adds	r2, r2, r3
20000d7e:	693b      	ldr	r3, [r7, #16]
20000d80:	429a      	cmp	r2, r3
20000d82:	dcf0      	bgt.n	20000d66 <clearRectangle+0x1a>
	for (i = x; i < x + width; i++) {
20000d84:	697b      	ldr	r3, [r7, #20]
20000d86:	3301      	adds	r3, #1
20000d88:	617b      	str	r3, [r7, #20]
20000d8a:	68fa      	ldr	r2, [r7, #12]
20000d8c:	687b      	ldr	r3, [r7, #4]
20000d8e:	18d2      	adds	r2, r2, r3
20000d90:	697b      	ldr	r3, [r7, #20]
20000d92:	429a      	cmp	r2, r3
20000d94:	dce4      	bgt.n	20000d60 <clearRectangle+0x14>
		}
	}
}
20000d96:	46c0      	nop			; (mov r8, r8)
20000d98:	46bd      	mov	sp, r7
20000d9a:	b006      	add	sp, #24
20000d9c:	bd80      	pop	{r7, pc}

20000d9e <grayScaleTest>:


void grayScaleTest( void ) {
20000d9e:	b590      	push	{r4, r7, lr}
20000da0:	b087      	sub	sp, #28
20000da2:	af00      	add	r7, sp, #0
	int x = 10;
20000da4:	230a      	movs	r3, #10
20000da6:	617b      	str	r3, [r7, #20]
	int y = 10;
20000da8:	230a      	movs	r3, #10
20000daa:	613b      	str	r3, [r7, #16]
	int width = 70;
20000dac:	2346      	movs	r3, #70	; 0x46
20000dae:	60fb      	str	r3, [r7, #12]
	int height = 50;
20000db0:	2332      	movs	r3, #50	; 0x32
20000db2:	60bb      	str	r3, [r7, #8]
	
	int x2 = 50;
20000db4:	2332      	movs	r3, #50	; 0x32
20000db6:	607b      	str	r3, [r7, #4]
	
	fillRectangle(x, y, width, height);
20000db8:	68bb      	ldr	r3, [r7, #8]
20000dba:	68fa      	ldr	r2, [r7, #12]
20000dbc:	6939      	ldr	r1, [r7, #16]
20000dbe:	6978      	ldr	r0, [r7, #20]
20000dc0:	f7ff ff9b 	bl	20000cfa <fillRectangle>
	
	int i;
	int k = 5;
20000dc4:	2305      	movs	r3, #5
20000dc6:	603b      	str	r3, [r7, #0]
	while(1) {
		clear_backBuffer();
20000dc8:	f7ff fb10 	bl	200003ec <clear_backBuffer>
		fillRectangle(x, y, width, height);
20000dcc:	68bb      	ldr	r3, [r7, #8]
20000dce:	68fa      	ldr	r2, [r7, #12]
20000dd0:	6939      	ldr	r1, [r7, #16]
20000dd2:	6978      	ldr	r0, [r7, #20]
20000dd4:	f7ff ff91 	bl	20000cfa <fillRectangle>
		clearRectangle(x+2+2, y+1, width-k, height-k); //outer square
20000dd8:	697b      	ldr	r3, [r7, #20]
20000dda:	1d18      	adds	r0, r3, #4
20000ddc:	693b      	ldr	r3, [r7, #16]
20000dde:	1c59      	adds	r1, r3, #1
20000de0:	68fa      	ldr	r2, [r7, #12]
20000de2:	683b      	ldr	r3, [r7, #0]
20000de4:	1ad4      	subs	r4, r2, r3
20000de6:	68ba      	ldr	r2, [r7, #8]
20000de8:	683b      	ldr	r3, [r7, #0]
20000dea:	1ad3      	subs	r3, r2, r3
20000dec:	0022      	movs	r2, r4
20000dee:	f7ff ffad 	bl	20000d4c <clearRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
20000df2:	697b      	ldr	r3, [r7, #20]
20000df4:	1c9a      	adds	r2, r3, #2
20000df6:	683b      	ldr	r3, [r7, #0]
20000df8:	18d0      	adds	r0, r2, r3
20000dfa:	693b      	ldr	r3, [r7, #16]
20000dfc:	1c99      	adds	r1, r3, #2
20000dfe:	68fb      	ldr	r3, [r7, #12]
20000e00:	1f1a      	subs	r2, r3, #4
20000e02:	683b      	ldr	r3, [r7, #0]
20000e04:	1ad4      	subs	r4, r2, r3
20000e06:	68bb      	ldr	r3, [r7, #8]
20000e08:	1f1a      	subs	r2, r3, #4
20000e0a:	683b      	ldr	r3, [r7, #0]
20000e0c:	1ad3      	subs	r3, r2, r3
20000e0e:	0022      	movs	r2, r4
20000e10:	f7ff ff9c 	bl	20000d4c <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
20000e14:	4b2d      	ldr	r3, [pc, #180]	; (20000ecc <grayScaleTest+0x12e>)
20000e16:	0018      	movs	r0, r3
20000e18:	f7ff fea8 	bl	20000b6c <graphic_draw_screen>
		clear_backBuffer();
20000e1c:	f7ff fae6 	bl	200003ec <clear_backBuffer>
		fillRectangle(x, y, width, height);
20000e20:	68bb      	ldr	r3, [r7, #8]
20000e22:	68fa      	ldr	r2, [r7, #12]
20000e24:	6939      	ldr	r1, [r7, #16]
20000e26:	6978      	ldr	r0, [r7, #20]
20000e28:	f7ff ff67 	bl	20000cfa <fillRectangle>
		
		fillRectangle(x+2+2, y+1, width-k, height-k); //outer white square
20000e2c:	697b      	ldr	r3, [r7, #20]
20000e2e:	1d18      	adds	r0, r3, #4
20000e30:	693b      	ldr	r3, [r7, #16]
20000e32:	1c59      	adds	r1, r3, #1
20000e34:	68fa      	ldr	r2, [r7, #12]
20000e36:	683b      	ldr	r3, [r7, #0]
20000e38:	1ad4      	subs	r4, r2, r3
20000e3a:	68ba      	ldr	r2, [r7, #8]
20000e3c:	683b      	ldr	r3, [r7, #0]
20000e3e:	1ad3      	subs	r3, r2, r3
20000e40:	0022      	movs	r2, r4
20000e42:	f7ff ff5a 	bl	20000cfa <fillRectangle>
		fillRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
20000e46:	697b      	ldr	r3, [r7, #20]
20000e48:	1c9a      	adds	r2, r3, #2
20000e4a:	683b      	ldr	r3, [r7, #0]
20000e4c:	18d0      	adds	r0, r2, r3
20000e4e:	693b      	ldr	r3, [r7, #16]
20000e50:	1c99      	adds	r1, r3, #2
20000e52:	68fb      	ldr	r3, [r7, #12]
20000e54:	1f1a      	subs	r2, r3, #4
20000e56:	683b      	ldr	r3, [r7, #0]
20000e58:	1ad4      	subs	r4, r2, r3
20000e5a:	68bb      	ldr	r3, [r7, #8]
20000e5c:	1f1a      	subs	r2, r3, #4
20000e5e:	683b      	ldr	r3, [r7, #0]
20000e60:	1ad3      	subs	r3, r2, r3
20000e62:	0022      	movs	r2, r4
20000e64:	f7ff ff49 	bl	20000cfa <fillRectangle>
		clearRectangle(x+12, y+5, 5, 5);
20000e68:	697b      	ldr	r3, [r7, #20]
20000e6a:	330c      	adds	r3, #12
20000e6c:	0018      	movs	r0, r3
20000e6e:	693b      	ldr	r3, [r7, #16]
20000e70:	1d59      	adds	r1, r3, #5
20000e72:	2305      	movs	r3, #5
20000e74:	2205      	movs	r2, #5
20000e76:	f7ff ff69 	bl	20000d4c <clearRectangle>
		
		graphic_draw_screen(draw_buffer_black);
20000e7a:	4b14      	ldr	r3, [pc, #80]	; (20000ecc <grayScaleTest+0x12e>)
20000e7c:	0018      	movs	r0, r3
20000e7e:	f7ff fe75 	bl	20000b6c <graphic_draw_screen>
		delay_milli(20);
20000e82:	2014      	movs	r0, #20
20000e84:	f7ff fa86 	bl	20000394 <delay_milli>
		
		clear_backBuffer();
20000e88:	f7ff fab0 	bl	200003ec <clear_backBuffer>
		fillRectangle(x, y, width, height);
20000e8c:	68bb      	ldr	r3, [r7, #8]
20000e8e:	68fa      	ldr	r2, [r7, #12]
20000e90:	6939      	ldr	r1, [r7, #16]
20000e92:	6978      	ldr	r0, [r7, #20]
20000e94:	f7ff ff31 	bl	20000cfa <fillRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
20000e98:	697b      	ldr	r3, [r7, #20]
20000e9a:	1c9a      	adds	r2, r3, #2
20000e9c:	683b      	ldr	r3, [r7, #0]
20000e9e:	18d0      	adds	r0, r2, r3
20000ea0:	693b      	ldr	r3, [r7, #16]
20000ea2:	1c99      	adds	r1, r3, #2
20000ea4:	68fb      	ldr	r3, [r7, #12]
20000ea6:	1f1a      	subs	r2, r3, #4
20000ea8:	683b      	ldr	r3, [r7, #0]
20000eaa:	1ad4      	subs	r4, r2, r3
20000eac:	68bb      	ldr	r3, [r7, #8]
20000eae:	1f1a      	subs	r2, r3, #4
20000eb0:	683b      	ldr	r3, [r7, #0]
20000eb2:	1ad3      	subs	r3, r2, r3
20000eb4:	0022      	movs	r2, r4
20000eb6:	f7ff ff49 	bl	20000d4c <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
20000eba:	4b04      	ldr	r3, [pc, #16]	; (20000ecc <grayScaleTest+0x12e>)
20000ebc:	0018      	movs	r0, r3
20000ebe:	f7ff fe55 	bl	20000b6c <graphic_draw_screen>
		
		delay_milli(20);
20000ec2:	2014      	movs	r0, #20
20000ec4:	f7ff fa66 	bl	20000394 <delay_milli>
		clear_backBuffer();
20000ec8:	e77e      	b.n	20000dc8 <grayScaleTest+0x2a>
20000eca:	46c0      	nop			; (mov r8, r8)
20000ecc:	2000269c 	mulcs	r0, ip, r6

20000ed0 <set_up_draw_buffers>:
	}
}

/** Should prepare the different drawing buffers, before the drawing of each frame.*/
void set_up_draw_buffers( void ) {
20000ed0:	b580      	push	{r7, lr}
20000ed2:	b082      	sub	sp, #8
20000ed4:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 1024; i++) {
20000ed6:	2300      	movs	r3, #0
20000ed8:	607b      	str	r3, [r7, #4]
20000eda:	e065      	b.n	20000fa8 <set_up_draw_buffers+0xd8>
		draw_buffer_black[i] = backBuffer[i] & (~backBufferGray[i] & ~backBufferLight[i]); //Had to work a bit on these
20000edc:	4a36      	ldr	r2, [pc, #216]	; (20000fb8 <set_up_draw_buffers+0xe8>)
20000ede:	687b      	ldr	r3, [r7, #4]
20000ee0:	18d3      	adds	r3, r2, r3
20000ee2:	781b      	ldrb	r3, [r3, #0]
20000ee4:	b25b      	sxtb	r3, r3
20000ee6:	4935      	ldr	r1, [pc, #212]	; (20000fbc <set_up_draw_buffers+0xec>)
20000ee8:	687a      	ldr	r2, [r7, #4]
20000eea:	188a      	adds	r2, r1, r2
20000eec:	7811      	ldrb	r1, [r2, #0]
20000eee:	4834      	ldr	r0, [pc, #208]	; (20000fc0 <set_up_draw_buffers+0xf0>)
20000ef0:	687a      	ldr	r2, [r7, #4]
20000ef2:	1882      	adds	r2, r0, r2
20000ef4:	7812      	ldrb	r2, [r2, #0]
20000ef6:	430a      	orrs	r2, r1
20000ef8:	b2d2      	uxtb	r2, r2
20000efa:	b252      	sxtb	r2, r2
20000efc:	43d2      	mvns	r2, r2
20000efe:	b252      	sxtb	r2, r2
20000f00:	4013      	ands	r3, r2
20000f02:	b25b      	sxtb	r3, r3
20000f04:	b2d9      	uxtb	r1, r3
20000f06:	4a2f      	ldr	r2, [pc, #188]	; (20000fc4 <set_up_draw_buffers+0xf4>)
20000f08:	687b      	ldr	r3, [r7, #4]
20000f0a:	18d3      	adds	r3, r2, r3
20000f0c:	1c0a      	adds	r2, r1, #0
20000f0e:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray[i] = (backBuffer[i] | backBufferGray[i]) & ~backBufferLight[i]; //in order to make it possible
20000f10:	4a29      	ldr	r2, [pc, #164]	; (20000fb8 <set_up_draw_buffers+0xe8>)
20000f12:	687b      	ldr	r3, [r7, #4]
20000f14:	18d3      	adds	r3, r2, r3
20000f16:	781a      	ldrb	r2, [r3, #0]
20000f18:	4928      	ldr	r1, [pc, #160]	; (20000fbc <set_up_draw_buffers+0xec>)
20000f1a:	687b      	ldr	r3, [r7, #4]
20000f1c:	18cb      	adds	r3, r1, r3
20000f1e:	781b      	ldrb	r3, [r3, #0]
20000f20:	4313      	orrs	r3, r2
20000f22:	b2db      	uxtb	r3, r3
20000f24:	b25b      	sxtb	r3, r3
20000f26:	4926      	ldr	r1, [pc, #152]	; (20000fc0 <set_up_draw_buffers+0xf0>)
20000f28:	687a      	ldr	r2, [r7, #4]
20000f2a:	188a      	adds	r2, r1, r2
20000f2c:	7812      	ldrb	r2, [r2, #0]
20000f2e:	b252      	sxtb	r2, r2
20000f30:	43d2      	mvns	r2, r2
20000f32:	b252      	sxtb	r2, r2
20000f34:	4013      	ands	r3, r2
20000f36:	b25b      	sxtb	r3, r3
20000f38:	b2d9      	uxtb	r1, r3
20000f3a:	4a23      	ldr	r2, [pc, #140]	; (20000fc8 <set_up_draw_buffers+0xf8>)
20000f3c:	687b      	ldr	r3, [r7, #4]
20000f3e:	18d3      	adds	r3, r2, r3
20000f40:	1c0a      	adds	r2, r1, #0
20000f42:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_light[i] = (backBuffer[i] | backBufferLight[i]) & ~backBufferGray[i]; //to show a lighter sprite
20000f44:	4a1c      	ldr	r2, [pc, #112]	; (20000fb8 <set_up_draw_buffers+0xe8>)
20000f46:	687b      	ldr	r3, [r7, #4]
20000f48:	18d3      	adds	r3, r2, r3
20000f4a:	781a      	ldrb	r2, [r3, #0]
20000f4c:	491c      	ldr	r1, [pc, #112]	; (20000fc0 <set_up_draw_buffers+0xf0>)
20000f4e:	687b      	ldr	r3, [r7, #4]
20000f50:	18cb      	adds	r3, r1, r3
20000f52:	781b      	ldrb	r3, [r3, #0]
20000f54:	4313      	orrs	r3, r2
20000f56:	b2db      	uxtb	r3, r3
20000f58:	b25b      	sxtb	r3, r3
20000f5a:	4918      	ldr	r1, [pc, #96]	; (20000fbc <set_up_draw_buffers+0xec>)
20000f5c:	687a      	ldr	r2, [r7, #4]
20000f5e:	188a      	adds	r2, r1, r2
20000f60:	7812      	ldrb	r2, [r2, #0]
20000f62:	b252      	sxtb	r2, r2
20000f64:	43d2      	mvns	r2, r2
20000f66:	b252      	sxtb	r2, r2
20000f68:	4013      	ands	r3, r2
20000f6a:	b25b      	sxtb	r3, r3
20000f6c:	b2d9      	uxtb	r1, r3
20000f6e:	4a17      	ldr	r2, [pc, #92]	; (20000fcc <set_up_draw_buffers+0xfc>)
20000f70:	687b      	ldr	r3, [r7, #4]
20000f72:	18d3      	adds	r3, r2, r3
20000f74:	1c0a      	adds	r2, r1, #0
20000f76:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray_light[i] = backBuffer[i] | backBufferGray[i] | backBufferLight[i]; //on top of a darker one.
20000f78:	4a0f      	ldr	r2, [pc, #60]	; (20000fb8 <set_up_draw_buffers+0xe8>)
20000f7a:	687b      	ldr	r3, [r7, #4]
20000f7c:	18d3      	adds	r3, r2, r3
20000f7e:	781a      	ldrb	r2, [r3, #0]
20000f80:	490e      	ldr	r1, [pc, #56]	; (20000fbc <set_up_draw_buffers+0xec>)
20000f82:	687b      	ldr	r3, [r7, #4]
20000f84:	18cb      	adds	r3, r1, r3
20000f86:	781b      	ldrb	r3, [r3, #0]
20000f88:	4313      	orrs	r3, r2
20000f8a:	b2da      	uxtb	r2, r3
20000f8c:	490c      	ldr	r1, [pc, #48]	; (20000fc0 <set_up_draw_buffers+0xf0>)
20000f8e:	687b      	ldr	r3, [r7, #4]
20000f90:	18cb      	adds	r3, r1, r3
20000f92:	781b      	ldrb	r3, [r3, #0]
20000f94:	4313      	orrs	r3, r2
20000f96:	b2d9      	uxtb	r1, r3
20000f98:	4a0d      	ldr	r2, [pc, #52]	; (20000fd0 <set_up_draw_buffers+0x100>)
20000f9a:	687b      	ldr	r3, [r7, #4]
20000f9c:	18d3      	adds	r3, r2, r3
20000f9e:	1c0a      	adds	r2, r1, #0
20000fa0:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 1024; i++) {
20000fa2:	687b      	ldr	r3, [r7, #4]
20000fa4:	3301      	adds	r3, #1
20000fa6:	607b      	str	r3, [r7, #4]
20000fa8:	687b      	ldr	r3, [r7, #4]
20000faa:	4a0a      	ldr	r2, [pc, #40]	; (20000fd4 <set_up_draw_buffers+0x104>)
20000fac:	4293      	cmp	r3, r2
20000fae:	dd95      	ble.n	20000edc <set_up_draw_buffers+0xc>
	}
}
20000fb0:	46c0      	nop			; (mov r8, r8)
20000fb2:	46bd      	mov	sp, r7
20000fb4:	b002      	add	sp, #8
20000fb6:	bd80      	pop	{r7, pc}
20000fb8:	20001e9c 	mulcs	r0, ip, lr
20000fbc:	2000169c 	mulcs	r0, ip, r6
20000fc0:	20002e9c 	mulcs	r0, ip, lr
20000fc4:	2000269c 	mulcs	r0, ip, r6
20000fc8:	20001a9c 	mulcs	r0, ip, sl
20000fcc:	2000229c 	mulcs	r0, ip, r2
20000fd0:	20002a9c 	mulcs	r0, ip, sl
20000fd4:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20000fd8 <draw_game_object>:

void draw_game_object(GameObject *gObj) {
20000fd8:	b580      	push	{r7, lr}
20000fda:	b086      	sub	sp, #24
20000fdc:	af02      	add	r7, sp, #8
20000fde:	6078      	str	r0, [r7, #4]
	int frame = gObj->current_frame;
20000fe0:	687b      	ldr	r3, [r7, #4]
20000fe2:	695b      	ldr	r3, [r3, #20]
20000fe4:	60fb      	str	r3, [r7, #12]
	draw_sprite(gObj->images[frame].blackImage, gObj->xPos, gObj->yPos, 1, 3);
20000fe6:	687b      	ldr	r3, [r7, #4]
20000fe8:	6819      	ldr	r1, [r3, #0]
20000fea:	68fa      	ldr	r2, [r7, #12]
20000fec:	0013      	movs	r3, r2
20000fee:	005b      	lsls	r3, r3, #1
20000ff0:	189b      	adds	r3, r3, r2
20000ff2:	009b      	lsls	r3, r3, #2
20000ff4:	18cb      	adds	r3, r1, r3
20000ff6:	6818      	ldr	r0, [r3, #0]
20000ff8:	687b      	ldr	r3, [r7, #4]
20000ffa:	6859      	ldr	r1, [r3, #4]
20000ffc:	687b      	ldr	r3, [r7, #4]
20000ffe:	689a      	ldr	r2, [r3, #8]
20001000:	2303      	movs	r3, #3
20001002:	9300      	str	r3, [sp, #0]
20001004:	2301      	movs	r3, #1
20001006:	f7ff fe1c 	bl	20000c42 <draw_sprite>
	draw_sprite(gObj->images[frame].grayImage, gObj->xPos, gObj->yPos, 1, 2);
2000100a:	687b      	ldr	r3, [r7, #4]
2000100c:	6819      	ldr	r1, [r3, #0]
2000100e:	68fa      	ldr	r2, [r7, #12]
20001010:	0013      	movs	r3, r2
20001012:	005b      	lsls	r3, r3, #1
20001014:	189b      	adds	r3, r3, r2
20001016:	009b      	lsls	r3, r3, #2
20001018:	18cb      	adds	r3, r1, r3
2000101a:	6858      	ldr	r0, [r3, #4]
2000101c:	687b      	ldr	r3, [r7, #4]
2000101e:	6859      	ldr	r1, [r3, #4]
20001020:	687b      	ldr	r3, [r7, #4]
20001022:	689a      	ldr	r2, [r3, #8]
20001024:	2302      	movs	r3, #2
20001026:	9300      	str	r3, [sp, #0]
20001028:	2301      	movs	r3, #1
2000102a:	f7ff fe0a 	bl	20000c42 <draw_sprite>
	draw_sprite(gObj->images[frame].lightImage, gObj->xPos, gObj->yPos, 1, 1);
2000102e:	687b      	ldr	r3, [r7, #4]
20001030:	6819      	ldr	r1, [r3, #0]
20001032:	68fa      	ldr	r2, [r7, #12]
20001034:	0013      	movs	r3, r2
20001036:	005b      	lsls	r3, r3, #1
20001038:	189b      	adds	r3, r3, r2
2000103a:	009b      	lsls	r3, r3, #2
2000103c:	18cb      	adds	r3, r1, r3
2000103e:	6898      	ldr	r0, [r3, #8]
20001040:	687b      	ldr	r3, [r7, #4]
20001042:	6859      	ldr	r1, [r3, #4]
20001044:	687b      	ldr	r3, [r7, #4]
20001046:	689a      	ldr	r2, [r3, #8]
20001048:	2301      	movs	r3, #1
2000104a:	9300      	str	r3, [sp, #0]
2000104c:	2301      	movs	r3, #1
2000104e:	f7ff fdf8 	bl	20000c42 <draw_sprite>
}
20001052:	46c0      	nop			; (mov r8, r8)
20001054:	46bd      	mov	sp, r7
20001056:	b004      	add	sp, #16
20001058:	bd80      	pop	{r7, pc}

2000105a <show_frame>:


void show_frame(int frame_length) {
2000105a:	b580      	push	{r7, lr}
2000105c:	b082      	sub	sp, #8
2000105e:	af00      	add	r7, sp, #0
20001060:	6078      	str	r0, [r7, #4]
	set_up_draw_buffers();
20001062:	f7ff ff35 	bl	20000ed0 <set_up_draw_buffers>
	
	while(frame_length--) {
20001066:	e01b      	b.n	200010a0 <show_frame+0x46>
		graphic_draw_screen(draw_buffer_black_gray_light);
20001068:	4b13      	ldr	r3, [pc, #76]	; (200010b8 <show_frame+0x5e>)
2000106a:	0018      	movs	r0, r3
2000106c:	f7ff fd7e 	bl	20000b6c <graphic_draw_screen>
		delay_milli(1);
20001070:	2001      	movs	r0, #1
20001072:	f7ff f98f 	bl	20000394 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
20001076:	4b11      	ldr	r3, [pc, #68]	; (200010bc <show_frame+0x62>)
20001078:	0018      	movs	r0, r3
2000107a:	f7ff fd77 	bl	20000b6c <graphic_draw_screen>
		delay_milli(1);
2000107e:	2001      	movs	r0, #1
20001080:	f7ff f988 	bl	20000394 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black_gray);
20001084:	4b0e      	ldr	r3, [pc, #56]	; (200010c0 <show_frame+0x66>)
20001086:	0018      	movs	r0, r3
20001088:	f7ff fd70 	bl	20000b6c <graphic_draw_screen>
		delay_milli(1);
2000108c:	2001      	movs	r0, #1
2000108e:	f7ff f981 	bl	20000394 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
20001092:	4b0a      	ldr	r3, [pc, #40]	; (200010bc <show_frame+0x62>)
20001094:	0018      	movs	r0, r3
20001096:	f7ff fd69 	bl	20000b6c <graphic_draw_screen>
		delay_milli(1);
2000109a:	2001      	movs	r0, #1
2000109c:	f7ff f97a 	bl	20000394 <delay_milli>
	while(frame_length--) {
200010a0:	687b      	ldr	r3, [r7, #4]
200010a2:	1e5a      	subs	r2, r3, #1
200010a4:	607a      	str	r2, [r7, #4]
200010a6:	2b00      	cmp	r3, #0
200010a8:	d1de      	bne.n	20001068 <show_frame+0xe>
	}
	
	clear_all_backBuffers();	//Maybe we could be more effective by only clearing the necessary stuff,
200010aa:	f7ff f9ab 	bl	20000404 <clear_all_backBuffers>
								//but let's keep it like this if it works.
200010ae:	46c0      	nop			; (mov r8, r8)
200010b0:	46bd      	mov	sp, r7
200010b2:	b002      	add	sp, #8
200010b4:	bd80      	pop	{r7, pc}
200010b6:	46c0      	nop			; (mov r8, r8)
200010b8:	20002a9c 	mulcs	r0, ip, sl
200010bc:	2000269c 	mulcs	r0, ip, r6
200010c0:	20001a9c 	mulcs	r0, ip, sl

200010c4 <render>:
GameObject* gameObjects[100];
int nGameObjects = 0;


void render(GameObject* this)
{
200010c4:	b580      	push	{r7, lr}
200010c6:	b082      	sub	sp, #8
200010c8:	af00      	add	r7, sp, #0
200010ca:	6078      	str	r0, [r7, #4]
    
}
200010cc:	46c0      	nop			; (mov r8, r8)
200010ce:	46bd      	mov	sp, r7
200010d0:	b002      	add	sp, #8
200010d2:	bd80      	pop	{r7, pc}

200010d4 <gameObjectUpdate>:

void gameObjectUpdate(GameObject *this) {
200010d4:	b580      	push	{r7, lr}
200010d6:	b082      	sub	sp, #8
200010d8:	af00      	add	r7, sp, #0
200010da:	6078      	str	r0, [r7, #4]
	this->animation_counter++;
200010dc:	687b      	ldr	r3, [r7, #4]
200010de:	6a1b      	ldr	r3, [r3, #32]
200010e0:	1c5a      	adds	r2, r3, #1
200010e2:	687b      	ldr	r3, [r7, #4]
200010e4:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
200010e6:	687b      	ldr	r3, [r7, #4]
200010e8:	6a1a      	ldr	r2, [r3, #32]
200010ea:	687b      	ldr	r3, [r7, #4]
200010ec:	69db      	ldr	r3, [r3, #28]
200010ee:	429a      	cmp	r2, r3
200010f0:	d10f      	bne.n	20001112 <gameObjectUpdate+0x3e>
		this->animation_counter = 0;
200010f2:	687b      	ldr	r3, [r7, #4]
200010f4:	2200      	movs	r2, #0
200010f6:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
200010f8:	687b      	ldr	r3, [r7, #4]
200010fa:	695b      	ldr	r3, [r3, #20]
200010fc:	1c5a      	adds	r2, r3, #1
200010fe:	687b      	ldr	r3, [r7, #4]
20001100:	699b      	ldr	r3, [r3, #24]
20001102:	0019      	movs	r1, r3
20001104:	0010      	movs	r0, r2
20001106:	f000 fa87 	bl	20001618 <__aeabi_idivmod>
2000110a:	000b      	movs	r3, r1
2000110c:	001a      	movs	r2, r3
2000110e:	687b      	ldr	r3, [r7, #4]
20001110:	615a      	str	r2, [r3, #20]
	}
}
20001112:	46c0      	nop			; (mov r8, r8)
20001114:	46bd      	mov	sp, r7
20001116:	b002      	add	sp, #8
20001118:	bd80      	pop	{r7, pc}
	...

2000111c <set_up_DIL>:
#include "gpio.h"

/** Sets up PE0-7 as inports and PE8-15 as outports. */
void set_up_DIL( void ) {
2000111c:	b580      	push	{r7, lr}
2000111e:	af00      	add	r7, sp, #0
	GPIO_D.Moder = 0x55550000;
20001120:	4b02      	ldr	r3, [pc, #8]	; (2000112c <set_up_DIL+0x10>)
20001122:	4a03      	ldr	r2, [pc, #12]	; (20001130 <set_up_DIL+0x14>)
20001124:	601a      	str	r2, [r3, #0]
}
20001126:	46c0      	nop			; (mov r8, r8)
20001128:	46bd      	mov	sp, r7
2000112a:	bd80      	pop	{r7, pc}
2000112c:	40020c00 	andmi	r0, r2, r0, lsl #24
20001130:	55550000 	ldrbpl	r0, [r5, #-0]

20001134 <read_DIL>:

char read_DIL( void ) {
20001134:	b580      	push	{r7, lr}
20001136:	af00      	add	r7, sp, #0
	return GPIO_D.idrLow;
20001138:	4b02      	ldr	r3, [pc, #8]	; (20001144 <read_DIL+0x10>)
2000113a:	7c1b      	ldrb	r3, [r3, #16]
2000113c:	b2db      	uxtb	r3, r3
}
2000113e:	0018      	movs	r0, r3
20001140:	46bd      	mov	sp, r7
20001142:	bd80      	pop	{r7, pc}
20001144:	40020c00 	andmi	r0, r2, r0, lsl #24

20001148 <read_DIL_single>:


int read_DIL_single( int bit ) {
20001148:	b590      	push	{r4, r7, lr}
2000114a:	b085      	sub	sp, #20
2000114c:	af00      	add	r7, sp, #0
2000114e:	6078      	str	r0, [r7, #4]
	char DIL = read_DIL();
20001150:	230f      	movs	r3, #15
20001152:	18fc      	adds	r4, r7, r3
20001154:	f7ff ffee 	bl	20001134 <read_DIL>
20001158:	0003      	movs	r3, r0
2000115a:	7023      	strb	r3, [r4, #0]
	if (DIL & (1<<bit)) {
2000115c:	230f      	movs	r3, #15
2000115e:	18fb      	adds	r3, r7, r3
20001160:	781a      	ldrb	r2, [r3, #0]
20001162:	687b      	ldr	r3, [r7, #4]
20001164:	411a      	asrs	r2, r3
20001166:	0013      	movs	r3, r2
20001168:	2201      	movs	r2, #1
2000116a:	4013      	ands	r3, r2
2000116c:	d001      	beq.n	20001172 <read_DIL_single+0x2a>
		return 0;
2000116e:	2300      	movs	r3, #0
20001170:	e000      	b.n	20001174 <read_DIL_single+0x2c>
	} else {
		return 1;
20001172:	2301      	movs	r3, #1
	}
20001174:	0018      	movs	r0, r3
20001176:	46bd      	mov	sp, r7
20001178:	b005      	add	sp, #20
2000117a:	bd90      	pop	{r4, r7, pc}

2000117c <load_image>:
#include "image.h"

void load_image( Image *image, sprite *blackImage, sprite *grayImage, sprite *lightImage ) {
2000117c:	b580      	push	{r7, lr}
2000117e:	b084      	sub	sp, #16
20001180:	af00      	add	r7, sp, #0
20001182:	60f8      	str	r0, [r7, #12]
20001184:	60b9      	str	r1, [r7, #8]
20001186:	607a      	str	r2, [r7, #4]
20001188:	603b      	str	r3, [r7, #0]
	image->blackImage = blackImage;
2000118a:	68fb      	ldr	r3, [r7, #12]
2000118c:	68ba      	ldr	r2, [r7, #8]
2000118e:	601a      	str	r2, [r3, #0]
	image->grayImage = grayImage;
20001190:	68fb      	ldr	r3, [r7, #12]
20001192:	687a      	ldr	r2, [r7, #4]
20001194:	605a      	str	r2, [r3, #4]
	image->lightImage = lightImage;
20001196:	68fb      	ldr	r3, [r7, #12]
20001198:	683a      	ldr	r2, [r7, #0]
2000119a:	609a      	str	r2, [r3, #8]
}
2000119c:	46c0      	nop			; (mov r8, r8)
2000119e:	46bd      	mov	sp, r7
200011a0:	b004      	add	sp, #16
200011a2:	bd80      	pop	{r7, pc}

200011a4 <initSprites>:
Image fire2Image;
Image fire3Image;
Image fire4Image;
Image fire5Image;
Image fireImages[5];
static void initSprites( void ) {	
200011a4:	b580      	push	{r7, lr}
200011a6:	b08c      	sub	sp, #48	; 0x30
200011a8:	af00      	add	r7, sp, #0
	sprite *pointer0 = &tempFireBlack;
200011aa:	4b3e      	ldr	r3, [pc, #248]	; (200012a4 <initSprites+0x100>)
200011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer0, fire_black_2_bits, fire1_gray_width, fire1_gray_height);
200011ae:	493e      	ldr	r1, [pc, #248]	; (200012a8 <initSprites+0x104>)
200011b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
200011b2:	230c      	movs	r3, #12
200011b4:	2208      	movs	r2, #8
200011b6:	f7ff f87f 	bl	200002b8 <load_sprite>
	fireBlack = pointer0;
200011ba:	4b3c      	ldr	r3, [pc, #240]	; (200012ac <initSprites+0x108>)
200011bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
200011be:	601a      	str	r2, [r3, #0]
	
	sprite *pointer1 = &tempFire1Gray;
200011c0:	4b3b      	ldr	r3, [pc, #236]	; (200012b0 <initSprites+0x10c>)
200011c2:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer1, fire1_gray_bits, fire1_gray_width, fire1_gray_height);
200011c4:	493b      	ldr	r1, [pc, #236]	; (200012b4 <initSprites+0x110>)
200011c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
200011c8:	230c      	movs	r3, #12
200011ca:	2208      	movs	r2, #8
200011cc:	f7ff f874 	bl	200002b8 <load_sprite>
	fire1Gray = pointer1;
200011d0:	4b39      	ldr	r3, [pc, #228]	; (200012b8 <initSprites+0x114>)
200011d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
200011d4:	601a      	str	r2, [r3, #0]

	sprite *pointer2 = &tempFire1Light;
200011d6:	4b39      	ldr	r3, [pc, #228]	; (200012bc <initSprites+0x118>)
200011d8:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer2, fire1_light_bits, fire1_gray_width, fire1_gray_height);
200011da:	4939      	ldr	r1, [pc, #228]	; (200012c0 <initSprites+0x11c>)
200011dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
200011de:	230c      	movs	r3, #12
200011e0:	2208      	movs	r2, #8
200011e2:	f7ff f869 	bl	200002b8 <load_sprite>
	fire1Light = pointer2;
200011e6:	4b37      	ldr	r3, [pc, #220]	; (200012c4 <initSprites+0x120>)
200011e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200011ea:	601a      	str	r2, [r3, #0]

	sprite *pointer3 = &tempFire2Gray;
200011ec:	4b36      	ldr	r3, [pc, #216]	; (200012c8 <initSprites+0x124>)
200011ee:	623b      	str	r3, [r7, #32]
	load_sprite(pointer3, fire2_gray_bits, fire1_gray_width, fire1_gray_height);
200011f0:	4936      	ldr	r1, [pc, #216]	; (200012cc <initSprites+0x128>)
200011f2:	6a38      	ldr	r0, [r7, #32]
200011f4:	230c      	movs	r3, #12
200011f6:	2208      	movs	r2, #8
200011f8:	f7ff f85e 	bl	200002b8 <load_sprite>
	fire2Gray = pointer3;
200011fc:	4b34      	ldr	r3, [pc, #208]	; (200012d0 <initSprites+0x12c>)
200011fe:	6a3a      	ldr	r2, [r7, #32]
20001200:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempFire2Light;
20001202:	4b34      	ldr	r3, [pc, #208]	; (200012d4 <initSprites+0x130>)
20001204:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer4, fire2_light_bits, fire1_gray_width, fire1_gray_height);
20001206:	4934      	ldr	r1, [pc, #208]	; (200012d8 <initSprites+0x134>)
20001208:	69f8      	ldr	r0, [r7, #28]
2000120a:	230c      	movs	r3, #12
2000120c:	2208      	movs	r2, #8
2000120e:	f7ff f853 	bl	200002b8 <load_sprite>
	fire2Light = pointer4;
20001212:	4b32      	ldr	r3, [pc, #200]	; (200012dc <initSprites+0x138>)
20001214:	69fa      	ldr	r2, [r7, #28]
20001216:	601a      	str	r2, [r3, #0]

	sprite *pointer5 = &tempFire3Gray;
20001218:	4b31      	ldr	r3, [pc, #196]	; (200012e0 <initSprites+0x13c>)
2000121a:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer5, fire3_gray_bits, fire1_gray_width, fire1_gray_height);
2000121c:	4931      	ldr	r1, [pc, #196]	; (200012e4 <initSprites+0x140>)
2000121e:	69b8      	ldr	r0, [r7, #24]
20001220:	230c      	movs	r3, #12
20001222:	2208      	movs	r2, #8
20001224:	f7ff f848 	bl	200002b8 <load_sprite>
	fire3Gray = pointer5;
20001228:	4b2f      	ldr	r3, [pc, #188]	; (200012e8 <initSprites+0x144>)
2000122a:	69ba      	ldr	r2, [r7, #24]
2000122c:	601a      	str	r2, [r3, #0]

	sprite *pointer6 = &tempFire3Light;
2000122e:	4b2f      	ldr	r3, [pc, #188]	; (200012ec <initSprites+0x148>)
20001230:	617b      	str	r3, [r7, #20]
	load_sprite(pointer6, fire3_light_bits, fire1_gray_width, fire1_gray_height);
20001232:	492f      	ldr	r1, [pc, #188]	; (200012f0 <initSprites+0x14c>)
20001234:	6978      	ldr	r0, [r7, #20]
20001236:	230c      	movs	r3, #12
20001238:	2208      	movs	r2, #8
2000123a:	f7ff f83d 	bl	200002b8 <load_sprite>
	fire3Light = pointer6;
2000123e:	4b2d      	ldr	r3, [pc, #180]	; (200012f4 <initSprites+0x150>)
20001240:	697a      	ldr	r2, [r7, #20]
20001242:	601a      	str	r2, [r3, #0]

	sprite *pointer7 = &tempFire4Gray;
20001244:	4b2c      	ldr	r3, [pc, #176]	; (200012f8 <initSprites+0x154>)
20001246:	613b      	str	r3, [r7, #16]
	load_sprite(pointer7, fire4_gray_bits, fire1_gray_width, fire1_gray_height);
20001248:	492c      	ldr	r1, [pc, #176]	; (200012fc <initSprites+0x158>)
2000124a:	6938      	ldr	r0, [r7, #16]
2000124c:	230c      	movs	r3, #12
2000124e:	2208      	movs	r2, #8
20001250:	f7ff f832 	bl	200002b8 <load_sprite>
	fire4Gray = pointer7;
20001254:	4b2a      	ldr	r3, [pc, #168]	; (20001300 <initSprites+0x15c>)
20001256:	693a      	ldr	r2, [r7, #16]
20001258:	601a      	str	r2, [r3, #0]

	sprite *pointer8 = &tempFire4Light;
2000125a:	4b2a      	ldr	r3, [pc, #168]	; (20001304 <initSprites+0x160>)
2000125c:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer8, fire4_light_bits, fire1_gray_width, fire1_gray_height);
2000125e:	492a      	ldr	r1, [pc, #168]	; (20001308 <initSprites+0x164>)
20001260:	68f8      	ldr	r0, [r7, #12]
20001262:	230c      	movs	r3, #12
20001264:	2208      	movs	r2, #8
20001266:	f7ff f827 	bl	200002b8 <load_sprite>
	fire4Light = pointer8;
2000126a:	4b28      	ldr	r3, [pc, #160]	; (2000130c <initSprites+0x168>)
2000126c:	68fa      	ldr	r2, [r7, #12]
2000126e:	601a      	str	r2, [r3, #0]

	sprite *pointer9 = &tempFire5Gray;
20001270:	4b27      	ldr	r3, [pc, #156]	; (20001310 <initSprites+0x16c>)
20001272:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer9, fire5_gray_bits, fire1_gray_width, fire1_gray_height);
20001274:	4927      	ldr	r1, [pc, #156]	; (20001314 <initSprites+0x170>)
20001276:	68b8      	ldr	r0, [r7, #8]
20001278:	230c      	movs	r3, #12
2000127a:	2208      	movs	r2, #8
2000127c:	f7ff f81c 	bl	200002b8 <load_sprite>
	fire5Gray = pointer9;
20001280:	4b25      	ldr	r3, [pc, #148]	; (20001318 <initSprites+0x174>)
20001282:	68ba      	ldr	r2, [r7, #8]
20001284:	601a      	str	r2, [r3, #0]

	sprite *pointer10 = &tempFire5Light;
20001286:	4b25      	ldr	r3, [pc, #148]	; (2000131c <initSprites+0x178>)
20001288:	607b      	str	r3, [r7, #4]
	load_sprite(pointer10, fire5_light_bits, fire1_gray_width, fire1_gray_height);
2000128a:	4925      	ldr	r1, [pc, #148]	; (20001320 <initSprites+0x17c>)
2000128c:	6878      	ldr	r0, [r7, #4]
2000128e:	230c      	movs	r3, #12
20001290:	2208      	movs	r2, #8
20001292:	f7ff f811 	bl	200002b8 <load_sprite>
	fire5Light = pointer10;
20001296:	4b23      	ldr	r3, [pc, #140]	; (20001324 <initSprites+0x180>)
20001298:	687a      	ldr	r2, [r7, #4]
2000129a:	601a      	str	r2, [r3, #0]
}
2000129c:	46c0      	nop			; (mov r8, r8)
2000129e:	46bd      	mov	sp, r7
200012a0:	b00c      	add	sp, #48	; 0x30
200012a2:	bd80      	pop	{r7, pc}
200012a4:	20003464 	andcs	r3, r0, r4, ror #8
200012a8:	200046e0 	andcs	r4, r0, r0, ror #13
200012ac:	2000355c 	andcs	r3, r0, ip, asr r5
200012b0:	20003550 	andcs	r3, r0, r0, asr r5
200012b4:	200046ec 	andcs	r4, r0, ip, ror #13
200012b8:	20003574 	andcs	r3, r0, r4, ror r5
200012bc:	2000352c 	andcs	r3, r0, ip, lsr #10
200012c0:	200046f8 	strdcs	r4, [r0], -r8
200012c4:	2000342c 	andcs	r3, r0, ip, lsr #8
200012c8:	20003458 	andcs	r3, r0, r8, asr r4
200012cc:	20004704 	andcs	r4, r0, r4, lsl #14
200012d0:	20003570 	andcs	r3, r0, r0, ror r5
200012d4:	20003560 	andcs	r3, r0, r0, ror #10
200012d8:	20004710 	andcs	r4, r0, r0, lsl r7
200012dc:	20003548 	andcs	r3, r0, r8, asr #10
200012e0:	20003510 	andcs	r3, r0, r0, lsl r5
200012e4:	2000471c 	andcs	r4, r0, ip, lsl r7
200012e8:	2000343c 	andcs	r3, r0, ip, lsr r4
200012ec:	20003430 	andcs	r3, r0, r0, lsr r4
200012f0:	20004728 	andcs	r4, r0, r8, lsr #14
200012f4:	2000356c 	andcs	r3, r0, ip, ror #10
200012f8:	20003440 	andcs	r3, r0, r0, asr #8
200012fc:	20004734 	andcs	r4, r0, r4, lsr r7
20001300:	20003528 	andcs	r3, r0, r8, lsr #10
20001304:	2000347c 	andcs	r3, r0, ip, ror r4
20001308:	20004740 	andcs	r4, r0, r0, asr #14
2000130c:	20003494 	mulcs	r0, r4, r4
20001310:	20003504 	andcs	r3, r0, r4, lsl #10
20001314:	2000474c 	andcs	r4, r0, ip, asr #14
20001318:	20003544 	andcs	r3, r0, r4, asr #10
2000131c:	20003538 	andcs	r3, r0, r8, lsr r5
20001320:	20004758 	andcs	r4, r0, r8, asr r7
20001324:	2000354c 	andcs	r3, r0, ip, asr #10

20001328 <init_fire>:
	
void init_fire( GameObject *fireObj ) {
20001328:	b590      	push	{r4, r7, lr}
2000132a:	b083      	sub	sp, #12
2000132c:	af00      	add	r7, sp, #0
2000132e:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20001330:	4b30      	ldr	r3, [pc, #192]	; (200013f4 <init_fire+0xcc>)
20001332:	681b      	ldr	r3, [r3, #0]
20001334:	2b00      	cmp	r3, #0
20001336:	d049      	beq.n	200013cc <init_fire+0xa4>
		initSprites();
20001338:	f7ff ff34 	bl	200011a4 <initSprites>
		firstTime = 0;			
2000133c:	4b2d      	ldr	r3, [pc, #180]	; (200013f4 <init_fire+0xcc>)
2000133e:	2200      	movs	r2, #0
20001340:	601a      	str	r2, [r3, #0]

		fireImages[0] = fire1Image;
20001342:	4b2d      	ldr	r3, [pc, #180]	; (200013f8 <init_fire+0xd0>)
20001344:	4a2d      	ldr	r2, [pc, #180]	; (200013fc <init_fire+0xd4>)
20001346:	ca13      	ldmia	r2!, {r0, r1, r4}
20001348:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[1] = fire2Image;
2000134a:	4b2b      	ldr	r3, [pc, #172]	; (200013f8 <init_fire+0xd0>)
2000134c:	4a2c      	ldr	r2, [pc, #176]	; (20001400 <init_fire+0xd8>)
2000134e:	330c      	adds	r3, #12
20001350:	ca13      	ldmia	r2!, {r0, r1, r4}
20001352:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[2] = fire3Image;
20001354:	4b28      	ldr	r3, [pc, #160]	; (200013f8 <init_fire+0xd0>)
20001356:	4a2b      	ldr	r2, [pc, #172]	; (20001404 <init_fire+0xdc>)
20001358:	3318      	adds	r3, #24
2000135a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000135c:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[3] = fire4Image;
2000135e:	4b26      	ldr	r3, [pc, #152]	; (200013f8 <init_fire+0xd0>)
20001360:	4a29      	ldr	r2, [pc, #164]	; (20001408 <init_fire+0xe0>)
20001362:	3324      	adds	r3, #36	; 0x24
20001364:	ca13      	ldmia	r2!, {r0, r1, r4}
20001366:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[4] = fire5Image;
20001368:	4b23      	ldr	r3, [pc, #140]	; (200013f8 <init_fire+0xd0>)
2000136a:	4a28      	ldr	r2, [pc, #160]	; (2000140c <init_fire+0xe4>)
2000136c:	3330      	adds	r3, #48	; 0x30
2000136e:	ca13      	ldmia	r2!, {r0, r1, r4}
20001370:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&fireImages[0], fireBlack, fire1Gray, fire1Light);
20001372:	4b27      	ldr	r3, [pc, #156]	; (20001410 <init_fire+0xe8>)
20001374:	6819      	ldr	r1, [r3, #0]
20001376:	4b27      	ldr	r3, [pc, #156]	; (20001414 <init_fire+0xec>)
20001378:	681a      	ldr	r2, [r3, #0]
2000137a:	4b27      	ldr	r3, [pc, #156]	; (20001418 <init_fire+0xf0>)
2000137c:	681b      	ldr	r3, [r3, #0]
2000137e:	481e      	ldr	r0, [pc, #120]	; (200013f8 <init_fire+0xd0>)
20001380:	f7ff fefc 	bl	2000117c <load_image>
		load_image(&fireImages[1], fireBlack, fire2Gray, fire2Light);
20001384:	4b22      	ldr	r3, [pc, #136]	; (20001410 <init_fire+0xe8>)
20001386:	6819      	ldr	r1, [r3, #0]
20001388:	4b24      	ldr	r3, [pc, #144]	; (2000141c <init_fire+0xf4>)
2000138a:	681a      	ldr	r2, [r3, #0]
2000138c:	4b24      	ldr	r3, [pc, #144]	; (20001420 <init_fire+0xf8>)
2000138e:	681b      	ldr	r3, [r3, #0]
20001390:	4824      	ldr	r0, [pc, #144]	; (20001424 <init_fire+0xfc>)
20001392:	f7ff fef3 	bl	2000117c <load_image>
		load_image(&fireImages[2], fireBlack, fire3Gray, fire3Light);
20001396:	4b1e      	ldr	r3, [pc, #120]	; (20001410 <init_fire+0xe8>)
20001398:	6819      	ldr	r1, [r3, #0]
2000139a:	4b23      	ldr	r3, [pc, #140]	; (20001428 <init_fire+0x100>)
2000139c:	681a      	ldr	r2, [r3, #0]
2000139e:	4b23      	ldr	r3, [pc, #140]	; (2000142c <init_fire+0x104>)
200013a0:	681b      	ldr	r3, [r3, #0]
200013a2:	4823      	ldr	r0, [pc, #140]	; (20001430 <init_fire+0x108>)
200013a4:	f7ff feea 	bl	2000117c <load_image>
		load_image(&fireImages[3], fireBlack, fire4Gray, fire4Light);
200013a8:	4b19      	ldr	r3, [pc, #100]	; (20001410 <init_fire+0xe8>)
200013aa:	6819      	ldr	r1, [r3, #0]
200013ac:	4b21      	ldr	r3, [pc, #132]	; (20001434 <init_fire+0x10c>)
200013ae:	681a      	ldr	r2, [r3, #0]
200013b0:	4b21      	ldr	r3, [pc, #132]	; (20001438 <init_fire+0x110>)
200013b2:	681b      	ldr	r3, [r3, #0]
200013b4:	4821      	ldr	r0, [pc, #132]	; (2000143c <init_fire+0x114>)
200013b6:	f7ff fee1 	bl	2000117c <load_image>
		load_image(&fireImages[4], fireBlack, fire5Gray, fire5Light);
200013ba:	4b15      	ldr	r3, [pc, #84]	; (20001410 <init_fire+0xe8>)
200013bc:	6819      	ldr	r1, [r3, #0]
200013be:	4b20      	ldr	r3, [pc, #128]	; (20001440 <init_fire+0x118>)
200013c0:	681a      	ldr	r2, [r3, #0]
200013c2:	4b20      	ldr	r3, [pc, #128]	; (20001444 <init_fire+0x11c>)
200013c4:	681b      	ldr	r3, [r3, #0]
200013c6:	4820      	ldr	r0, [pc, #128]	; (20001448 <init_fire+0x120>)
200013c8:	f7ff fed8 	bl	2000117c <load_image>
	}
	
	fireObj->images = fireImages;
200013cc:	687b      	ldr	r3, [r7, #4]
200013ce:	4a0a      	ldr	r2, [pc, #40]	; (200013f8 <init_fire+0xd0>)
200013d0:	601a      	str	r2, [r3, #0]

	fireObj->current_frame = 0;
200013d2:	687b      	ldr	r3, [r7, #4]
200013d4:	2200      	movs	r2, #0
200013d6:	615a      	str	r2, [r3, #20]
	fireObj->n_frames = 5;
200013d8:	687b      	ldr	r3, [r7, #4]
200013da:	2205      	movs	r2, #5
200013dc:	619a      	str	r2, [r3, #24]
	fireObj->animation_speed = 1;
200013de:	687b      	ldr	r3, [r7, #4]
200013e0:	2201      	movs	r2, #1
200013e2:	61da      	str	r2, [r3, #28]
	fireObj->animation_counter = 0;
200013e4:	687b      	ldr	r3, [r7, #4]
200013e6:	2200      	movs	r2, #0
200013e8:	621a      	str	r2, [r3, #32]
}
200013ea:	46c0      	nop			; (mov r8, r8)
200013ec:	46bd      	mov	sp, r7
200013ee:	b003      	add	sp, #12
200013f0:	bd90      	pop	{r4, r7, pc}
200013f2:	46c0      	nop			; (mov r8, r8)
200013f4:	20004764 	andcs	r4, r0, r4, ror #14
200013f8:	200034c8 	andcs	r3, r0, r8, asr #9
200013fc:	20003488 	andcs	r3, r0, r8, lsl #9
20001400:	2000344c 	andcs	r3, r0, ip, asr #8
20001404:	20003470 	andcs	r3, r0, r0, ror r4
20001408:	2000351c 	andcs	r3, r0, ip, lsl r5
2000140c:	200034bc 			; <UNDEFINED> instruction: 0x200034bc
20001410:	2000355c 	andcs	r3, r0, ip, asr r5
20001414:	20003574 	andcs	r3, r0, r4, ror r5
20001418:	2000342c 	andcs	r3, r0, ip, lsr #8
2000141c:	20003570 	andcs	r3, r0, r0, ror r5
20001420:	20003548 	andcs	r3, r0, r8, asr #10
20001424:	200034d4 	ldrdcs	r3, [r0], -r4
20001428:	2000343c 	andcs	r3, r0, ip, lsr r4
2000142c:	2000356c 	andcs	r3, r0, ip, ror #10
20001430:	200034e0 	andcs	r3, r0, r0, ror #9
20001434:	20003528 	andcs	r3, r0, r8, lsr #10
20001438:	20003494 	mulcs	r0, r4, r4
2000143c:	200034ec 	andcs	r3, r0, ip, ror #9
20001440:	20003544 	andcs	r3, r0, r4, asr #10
20001444:	2000354c 	andcs	r3, r0, ip, asr #10
20001448:	200034f8 	strdcs	r3, [r0], -r8

2000144c <__divsi3>:
2000144c:	4603      	mov	r3, r0
2000144e:	430b      	orrs	r3, r1
20001450:	d47f      	bmi.n	20001552 <__divsi3+0x106>
20001452:	2200      	movs	r2, #0
20001454:	0843      	lsrs	r3, r0, #1
20001456:	428b      	cmp	r3, r1
20001458:	d374      	bcc.n	20001544 <__divsi3+0xf8>
2000145a:	0903      	lsrs	r3, r0, #4
2000145c:	428b      	cmp	r3, r1
2000145e:	d35f      	bcc.n	20001520 <__divsi3+0xd4>
20001460:	0a03      	lsrs	r3, r0, #8
20001462:	428b      	cmp	r3, r1
20001464:	d344      	bcc.n	200014f0 <__divsi3+0xa4>
20001466:	0b03      	lsrs	r3, r0, #12
20001468:	428b      	cmp	r3, r1
2000146a:	d328      	bcc.n	200014be <__divsi3+0x72>
2000146c:	0c03      	lsrs	r3, r0, #16
2000146e:	428b      	cmp	r3, r1
20001470:	d30d      	bcc.n	2000148e <__divsi3+0x42>
20001472:	22ff      	movs	r2, #255	; 0xff
20001474:	0209      	lsls	r1, r1, #8
20001476:	ba12      	rev	r2, r2
20001478:	0c03      	lsrs	r3, r0, #16
2000147a:	428b      	cmp	r3, r1
2000147c:	d302      	bcc.n	20001484 <__divsi3+0x38>
2000147e:	1212      	asrs	r2, r2, #8
20001480:	0209      	lsls	r1, r1, #8
20001482:	d065      	beq.n	20001550 <__divsi3+0x104>
20001484:	0b03      	lsrs	r3, r0, #12
20001486:	428b      	cmp	r3, r1
20001488:	d319      	bcc.n	200014be <__divsi3+0x72>
2000148a:	e000      	b.n	2000148e <__divsi3+0x42>
2000148c:	0a09      	lsrs	r1, r1, #8
2000148e:	0bc3      	lsrs	r3, r0, #15
20001490:	428b      	cmp	r3, r1
20001492:	d301      	bcc.n	20001498 <__divsi3+0x4c>
20001494:	03cb      	lsls	r3, r1, #15
20001496:	1ac0      	subs	r0, r0, r3
20001498:	4152      	adcs	r2, r2
2000149a:	0b83      	lsrs	r3, r0, #14
2000149c:	428b      	cmp	r3, r1
2000149e:	d301      	bcc.n	200014a4 <__divsi3+0x58>
200014a0:	038b      	lsls	r3, r1, #14
200014a2:	1ac0      	subs	r0, r0, r3
200014a4:	4152      	adcs	r2, r2
200014a6:	0b43      	lsrs	r3, r0, #13
200014a8:	428b      	cmp	r3, r1
200014aa:	d301      	bcc.n	200014b0 <__divsi3+0x64>
200014ac:	034b      	lsls	r3, r1, #13
200014ae:	1ac0      	subs	r0, r0, r3
200014b0:	4152      	adcs	r2, r2
200014b2:	0b03      	lsrs	r3, r0, #12
200014b4:	428b      	cmp	r3, r1
200014b6:	d301      	bcc.n	200014bc <__divsi3+0x70>
200014b8:	030b      	lsls	r3, r1, #12
200014ba:	1ac0      	subs	r0, r0, r3
200014bc:	4152      	adcs	r2, r2
200014be:	0ac3      	lsrs	r3, r0, #11
200014c0:	428b      	cmp	r3, r1
200014c2:	d301      	bcc.n	200014c8 <__divsi3+0x7c>
200014c4:	02cb      	lsls	r3, r1, #11
200014c6:	1ac0      	subs	r0, r0, r3
200014c8:	4152      	adcs	r2, r2
200014ca:	0a83      	lsrs	r3, r0, #10
200014cc:	428b      	cmp	r3, r1
200014ce:	d301      	bcc.n	200014d4 <__divsi3+0x88>
200014d0:	028b      	lsls	r3, r1, #10
200014d2:	1ac0      	subs	r0, r0, r3
200014d4:	4152      	adcs	r2, r2
200014d6:	0a43      	lsrs	r3, r0, #9
200014d8:	428b      	cmp	r3, r1
200014da:	d301      	bcc.n	200014e0 <__divsi3+0x94>
200014dc:	024b      	lsls	r3, r1, #9
200014de:	1ac0      	subs	r0, r0, r3
200014e0:	4152      	adcs	r2, r2
200014e2:	0a03      	lsrs	r3, r0, #8
200014e4:	428b      	cmp	r3, r1
200014e6:	d301      	bcc.n	200014ec <__divsi3+0xa0>
200014e8:	020b      	lsls	r3, r1, #8
200014ea:	1ac0      	subs	r0, r0, r3
200014ec:	4152      	adcs	r2, r2
200014ee:	d2cd      	bcs.n	2000148c <__divsi3+0x40>
200014f0:	09c3      	lsrs	r3, r0, #7
200014f2:	428b      	cmp	r3, r1
200014f4:	d301      	bcc.n	200014fa <__divsi3+0xae>
200014f6:	01cb      	lsls	r3, r1, #7
200014f8:	1ac0      	subs	r0, r0, r3
200014fa:	4152      	adcs	r2, r2
200014fc:	0983      	lsrs	r3, r0, #6
200014fe:	428b      	cmp	r3, r1
20001500:	d301      	bcc.n	20001506 <__divsi3+0xba>
20001502:	018b      	lsls	r3, r1, #6
20001504:	1ac0      	subs	r0, r0, r3
20001506:	4152      	adcs	r2, r2
20001508:	0943      	lsrs	r3, r0, #5
2000150a:	428b      	cmp	r3, r1
2000150c:	d301      	bcc.n	20001512 <__divsi3+0xc6>
2000150e:	014b      	lsls	r3, r1, #5
20001510:	1ac0      	subs	r0, r0, r3
20001512:	4152      	adcs	r2, r2
20001514:	0903      	lsrs	r3, r0, #4
20001516:	428b      	cmp	r3, r1
20001518:	d301      	bcc.n	2000151e <__divsi3+0xd2>
2000151a:	010b      	lsls	r3, r1, #4
2000151c:	1ac0      	subs	r0, r0, r3
2000151e:	4152      	adcs	r2, r2
20001520:	08c3      	lsrs	r3, r0, #3
20001522:	428b      	cmp	r3, r1
20001524:	d301      	bcc.n	2000152a <__divsi3+0xde>
20001526:	00cb      	lsls	r3, r1, #3
20001528:	1ac0      	subs	r0, r0, r3
2000152a:	4152      	adcs	r2, r2
2000152c:	0883      	lsrs	r3, r0, #2
2000152e:	428b      	cmp	r3, r1
20001530:	d301      	bcc.n	20001536 <__divsi3+0xea>
20001532:	008b      	lsls	r3, r1, #2
20001534:	1ac0      	subs	r0, r0, r3
20001536:	4152      	adcs	r2, r2
20001538:	0843      	lsrs	r3, r0, #1
2000153a:	428b      	cmp	r3, r1
2000153c:	d301      	bcc.n	20001542 <__divsi3+0xf6>
2000153e:	004b      	lsls	r3, r1, #1
20001540:	1ac0      	subs	r0, r0, r3
20001542:	4152      	adcs	r2, r2
20001544:	1a41      	subs	r1, r0, r1
20001546:	d200      	bcs.n	2000154a <__divsi3+0xfe>
20001548:	4601      	mov	r1, r0
2000154a:	4152      	adcs	r2, r2
2000154c:	4610      	mov	r0, r2
2000154e:	4770      	bx	lr
20001550:	e05d      	b.n	2000160e <__divsi3+0x1c2>
20001552:	0fca      	lsrs	r2, r1, #31
20001554:	d000      	beq.n	20001558 <__divsi3+0x10c>
20001556:	4249      	negs	r1, r1
20001558:	1003      	asrs	r3, r0, #32
2000155a:	d300      	bcc.n	2000155e <__divsi3+0x112>
2000155c:	4240      	negs	r0, r0
2000155e:	4053      	eors	r3, r2
20001560:	2200      	movs	r2, #0
20001562:	469c      	mov	ip, r3
20001564:	0903      	lsrs	r3, r0, #4
20001566:	428b      	cmp	r3, r1
20001568:	d32d      	bcc.n	200015c6 <__divsi3+0x17a>
2000156a:	0a03      	lsrs	r3, r0, #8
2000156c:	428b      	cmp	r3, r1
2000156e:	d312      	bcc.n	20001596 <__divsi3+0x14a>
20001570:	22fc      	movs	r2, #252	; 0xfc
20001572:	0189      	lsls	r1, r1, #6
20001574:	ba12      	rev	r2, r2
20001576:	0a03      	lsrs	r3, r0, #8
20001578:	428b      	cmp	r3, r1
2000157a:	d30c      	bcc.n	20001596 <__divsi3+0x14a>
2000157c:	0189      	lsls	r1, r1, #6
2000157e:	1192      	asrs	r2, r2, #6
20001580:	428b      	cmp	r3, r1
20001582:	d308      	bcc.n	20001596 <__divsi3+0x14a>
20001584:	0189      	lsls	r1, r1, #6
20001586:	1192      	asrs	r2, r2, #6
20001588:	428b      	cmp	r3, r1
2000158a:	d304      	bcc.n	20001596 <__divsi3+0x14a>
2000158c:	0189      	lsls	r1, r1, #6
2000158e:	d03a      	beq.n	20001606 <__divsi3+0x1ba>
20001590:	1192      	asrs	r2, r2, #6
20001592:	e000      	b.n	20001596 <__divsi3+0x14a>
20001594:	0989      	lsrs	r1, r1, #6
20001596:	09c3      	lsrs	r3, r0, #7
20001598:	428b      	cmp	r3, r1
2000159a:	d301      	bcc.n	200015a0 <__divsi3+0x154>
2000159c:	01cb      	lsls	r3, r1, #7
2000159e:	1ac0      	subs	r0, r0, r3
200015a0:	4152      	adcs	r2, r2
200015a2:	0983      	lsrs	r3, r0, #6
200015a4:	428b      	cmp	r3, r1
200015a6:	d301      	bcc.n	200015ac <__divsi3+0x160>
200015a8:	018b      	lsls	r3, r1, #6
200015aa:	1ac0      	subs	r0, r0, r3
200015ac:	4152      	adcs	r2, r2
200015ae:	0943      	lsrs	r3, r0, #5
200015b0:	428b      	cmp	r3, r1
200015b2:	d301      	bcc.n	200015b8 <__divsi3+0x16c>
200015b4:	014b      	lsls	r3, r1, #5
200015b6:	1ac0      	subs	r0, r0, r3
200015b8:	4152      	adcs	r2, r2
200015ba:	0903      	lsrs	r3, r0, #4
200015bc:	428b      	cmp	r3, r1
200015be:	d301      	bcc.n	200015c4 <__divsi3+0x178>
200015c0:	010b      	lsls	r3, r1, #4
200015c2:	1ac0      	subs	r0, r0, r3
200015c4:	4152      	adcs	r2, r2
200015c6:	08c3      	lsrs	r3, r0, #3
200015c8:	428b      	cmp	r3, r1
200015ca:	d301      	bcc.n	200015d0 <__divsi3+0x184>
200015cc:	00cb      	lsls	r3, r1, #3
200015ce:	1ac0      	subs	r0, r0, r3
200015d0:	4152      	adcs	r2, r2
200015d2:	0883      	lsrs	r3, r0, #2
200015d4:	428b      	cmp	r3, r1
200015d6:	d301      	bcc.n	200015dc <__divsi3+0x190>
200015d8:	008b      	lsls	r3, r1, #2
200015da:	1ac0      	subs	r0, r0, r3
200015dc:	4152      	adcs	r2, r2
200015de:	d2d9      	bcs.n	20001594 <__divsi3+0x148>
200015e0:	0843      	lsrs	r3, r0, #1
200015e2:	428b      	cmp	r3, r1
200015e4:	d301      	bcc.n	200015ea <__divsi3+0x19e>
200015e6:	004b      	lsls	r3, r1, #1
200015e8:	1ac0      	subs	r0, r0, r3
200015ea:	4152      	adcs	r2, r2
200015ec:	1a41      	subs	r1, r0, r1
200015ee:	d200      	bcs.n	200015f2 <__divsi3+0x1a6>
200015f0:	4601      	mov	r1, r0
200015f2:	4663      	mov	r3, ip
200015f4:	4152      	adcs	r2, r2
200015f6:	105b      	asrs	r3, r3, #1
200015f8:	4610      	mov	r0, r2
200015fa:	d301      	bcc.n	20001600 <__divsi3+0x1b4>
200015fc:	4240      	negs	r0, r0
200015fe:	2b00      	cmp	r3, #0
20001600:	d500      	bpl.n	20001604 <__divsi3+0x1b8>
20001602:	4249      	negs	r1, r1
20001604:	4770      	bx	lr
20001606:	4663      	mov	r3, ip
20001608:	105b      	asrs	r3, r3, #1
2000160a:	d300      	bcc.n	2000160e <__divsi3+0x1c2>
2000160c:	4240      	negs	r0, r0
2000160e:	b501      	push	{r0, lr}
20001610:	2000      	movs	r0, #0
20001612:	f000 f805 	bl	20001620 <__aeabi_idiv0>
20001616:	bd02      	pop	{r1, pc}

20001618 <__aeabi_idivmod>:
20001618:	2900      	cmp	r1, #0
2000161a:	d0f8      	beq.n	2000160e <__divsi3+0x1c2>
2000161c:	e716      	b.n	2000144c <__divsi3>
2000161e:	4770      	bx	lr

20001620 <__aeabi_idiv0>:
20001620:	4770      	bx	lr
20001622:	46c0      	nop			; (mov r8, r8)

20001624 <i.4188>:
20001624:	00000000 	andeq	r0, r0, r0

20001628 <nGameObjects>:
20001628:	00000000 	andeq	r0, r0, r0

2000162c <monster>:
2000162c:	00000000 	andeq	r0, r0, r0

20001630 <tempCastleBlack>:
	...

2000163c <castleBlack>:
2000163c:	00000000 	andeq	r0, r0, r0

20001640 <tempMonster>:
	...

2000164c <bg>:
2000164c:	00000000 	andeq	r0, r0, r0

20001650 <tempMonsterGray>:
	...

2000165c <castleLight>:
2000165c:	00000000 	andeq	r0, r0, r0

20001660 <tempCastleLight>:
	...

2000166c <tempMonsterLight>:
	...

20001678 <tempCastleGray>:
	...

20001684 <monsterLight>:
20001684:	00000000 	andeq	r0, r0, r0

20001688 <castleGray>:
20001688:	00000000 	andeq	r0, r0, r0

2000168c <monsterGray>:
2000168c:	00000000 	andeq	r0, r0, r0

20001690 <tempBg>:
	...

2000169c <backBufferGray>:
	...

20001a9c <draw_buffer_black_gray>:
	...

20001e9c <backBuffer>:
	...

2000229c <draw_buffer_black_light>:
	...

2000269c <draw_buffer_black>:
	...

20002a9c <draw_buffer_black_gray_light>:
	...

20002e9c <backBufferLight>:
	...

2000329c <gameObjects>:
	...

2000342c <fire1Light>:
2000342c:	00000000 	andeq	r0, r0, r0

20003430 <tempFire3Light>:
	...

2000343c <fire3Gray>:
2000343c:	00000000 	andeq	r0, r0, r0

20003440 <tempFire4Gray>:
	...

2000344c <fire2Image>:
	...

20003458 <tempFire2Gray>:
	...

20003464 <tempFireBlack>:
	...

20003470 <fire3Image>:
	...

2000347c <tempFire4Light>:
	...

20003488 <fire1Image>:
	...

20003494 <fire4Light>:
20003494:	00000000 	andeq	r0, r0, r0

20003498 <fireObj>:
	...

200034bc <fire5Image>:
	...

200034c8 <fireImages>:
	...

20003504 <tempFire5Gray>:
	...

20003510 <tempFire3Gray>:
	...

2000351c <fire4Image>:
	...

20003528 <fire4Gray>:
20003528:	00000000 	andeq	r0, r0, r0

2000352c <tempFire1Light>:
	...

20003538 <tempFire5Light>:
	...

20003544 <fire5Gray>:
20003544:	00000000 	andeq	r0, r0, r0

20003548 <fire2Light>:
20003548:	00000000 	andeq	r0, r0, r0

2000354c <fire5Light>:
2000354c:	00000000 	andeq	r0, r0, r0

20003550 <tempFire1Gray>:
	...

2000355c <fireBlack>:
2000355c:	00000000 	andeq	r0, r0, r0

20003560 <tempFire2Light>:
	...

2000356c <fire3Light>:
2000356c:	00000000 	andeq	r0, r0, r0

20003570 <fire2Gray>:
20003570:	00000000 	andeq	r0, r0, r0

20003574 <fire1Gray>:
20003574:	00000000 	andeq	r0, r0, r0

20003578 <monster_black_bits>:
	...
20003588:	0001c000 	andeq	ip, r1, r0
2000358c:	00023000 	andeq	r3, r2, r0
20003590:	00021000 	andeq	r1, r2, r0
20003594:	00060800 	andeq	r0, r6, r0, lsl #16
20003598:	00040800 	andeq	r0, r4, r0, lsl #16
2000359c:	00040800 	andeq	r0, r4, r0, lsl #16
200035a0:	00092800 	andeq	r2, r9, r0, lsl #16
200035a4:	00092800 	andeq	r2, r9, r0, lsl #16
200035a8:	00100400 	andseq	r0, r0, r0, lsl #8
200035ac:	00100400 	andseq	r0, r0, r0, lsl #8
200035b0:	00200200 	eoreq	r0, r0, r0, lsl #4
200035b4:	00661b00 	rsbeq	r1, r6, r0, lsl #22
200035b8:	0043b100 	subeq	fp, r3, r0, lsl #2
200035bc:	0080e080 	addeq	lr, r0, r0, lsl #1
200035c0:	01800080 	orreq	r0, r0, r0, lsl #1
200035c4:	01000040 	tsteq	r0, r0, asr #32
200035c8:	02000040 	andeq	r0, r0, #64	; 0x40
200035cc:	02000060 	andeq	r0, r0, #96	; 0x60
200035d0:	02000020 	andeq	r0, r0, #32
200035d4:	03ff03e0 	mvnseq	r0, #224, 6	; 0x80000003
200035d8:	0001fc00 	andeq	pc, r1, r0, lsl #24
	...

200035f0 <monster_light_bits>:
	...
20003604:	00010000 	andeq	r0, r1, r0
20003608:	00018000 	andeq	r8, r1, r0
2000360c:	0001f000 	andeq	pc, r1, r0
20003610:	0001f000 	andeq	pc, r1, r0
20003614:	00009000 	andeq	r9, r0, r0
20003618:	00009000 	andeq	r9, r0, r0
2000361c:	0000d000 	andeq	sp, r0, r0
20003620:	0001f800 	andeq	pc, r1, r0, lsl #16
20003624:	0003f800 	andeq	pc, r3, r0, lsl #16
20003628:	0003fc00 	andeq	pc, r3, r0, lsl #24
2000362c:	0001e400 	andeq	lr, r1, r0, lsl #8
20003630:	00044c00 	andeq	r4, r4, r0, lsl #24
20003634:	00060c00 	andeq	r0, r6, r0, lsl #24
20003638:	0006ee00 	andeq	lr, r6, r0, lsl #28
2000363c:	000ffe00 	andeq	pc, pc, r0, lsl #28
20003640:	000f3f00 	andeq	r3, pc, r0, lsl #30
20003644:	00000780 	andeq	r0, r0, r0, lsl #15
20003648:	000003c0 	andeq	r0, r0, r0, asr #7
	...

20003668 <monster_gray_bits>:
	...
20003688:	00020000 	andeq	r0, r2, r0
2000368c:	00000000 	andeq	r0, r0, r0
20003690:	00040000 	andeq	r0, r4, r0
20003694:	00060000 	andeq	r0, r6, r0
20003698:	000e0000 	andeq	r0, lr, r0
2000369c:	000c0000 	andeq	r0, ip, r0
200036a0:	001c0000 	andseq	r0, ip, r0
200036a4:	00180000 	andseq	r0, r8, r0
200036a8:	00380000 	eorseq	r0, r8, r0
200036ac:	00780000 	rsbseq	r0, r8, r0
200036b0:	00780000 	rsbseq	r0, r8, r0
200036b4:	00f00000 	rscseq	r0, r0, r0
200036b8:	01f0c000 	mvnseq	ip, r0
200036bc:	01fff800 	mvnseq	pc, r0, lsl #16
200036c0:	01fffc00 	mvnseq	pc, r0, lsl #24
200036c4:	0000fc00 	andeq	pc, r0, r0, lsl #24
	...

200036e0 <castle_black_bits>:
200036e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200036e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200036e8:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200036ec:	00000000 	andeq	r0, r0, r0
200036f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200036f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200036f8:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200036fc:	00000000 	andeq	r0, r0, r0
20003700:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003704:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003708:	00000001 	andeq	r0, r0, r1
2000370c:	00000000 	andeq	r0, r0, r0
20003710:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003714:	7fffffff 	svcvc	0x00ffffff
	...
20003720:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003724:	3fffffff 	svccc	0x00ffffff
	...
20003730:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003734:	1fffffff 	svcne	0x00ffffff
	...
20003740:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003744:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
	...
20003750:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003754:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
	...
20003760:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003764:	01ffffff 	ldrsheq	pc, [pc, #255]	; 2000386b <castle_black_bits+0x18b>	; <UNPREDICTABLE>
	...
20003770:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003774:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
	...
20003780:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003784:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
	...
20003790:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003794:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
200037a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200037a4:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
200037b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200037b4:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
200037c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200037c4:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
200037d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200037d4:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
200037e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200037e4:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
200037f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200037f4:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20003800:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003804:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
20003810:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003814:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20003820:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003824:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20003830:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003834:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20003840:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003844:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
20003848:	04900000 	ldreq	r0, [r0], #0
2000384c:	00000000 	andeq	r0, r0, r0
20003850:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003854:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
20003858:	0b680000 	bleq	21a03860 <firstTime.4076+0x19ff0fc>
2000385c:	00000000 	andeq	r0, r0, r0
20003860:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003864:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20003868:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
2000386c:	00000000 	andeq	r0, r0, r0
20003870:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003874:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20003878:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
2000387c:	00000092 	muleq	r0, r2, r0
20003880:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003884:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20003888:	04100000 	ldreq	r0, [r0], #-0
2000388c:	0000016d 	andeq	r0, r0, sp, ror #2
20003890:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003894:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20003898:	04101240 	ldreq	r1, [r0], #-576	; 0xfffffdc0
2000389c:	00000101 	andeq	r0, r0, r1, lsl #2
200038a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200038a4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200038a8:	04102da0 	ldreq	r2, [r0], #-3488	; 0xfffff260
200038ac:	00000101 	andeq	r0, r0, r1, lsl #2
200038b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200038b4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200038b8:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
200038bc:	00000101 	andeq	r0, r0, r1, lsl #2
200038c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200038c4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200038c8:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
200038cc:	00000101 	andeq	r0, r0, r1, lsl #2
200038d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200038d4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200038d8:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
200038dc:	00000082 	andeq	r0, r0, r2, lsl #1
200038e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200038e4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200038e8:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
200038ec:	00000092 	muleq	r0, r2, r0
200038f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200038f4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200038f8:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
200038fc:	012400a2 	smulwbeq	r4, r2, r0
20003900:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003904:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20003908:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
2000390c:	02da00a2 	sbcseq	r0, sl, #162	; 0xa2
20003910:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003914:	00004fff 	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
20003918:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
2000391c:	020200a2 	andeq	r0, r2, #162	; 0xa2
20003920:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003924:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20003928:	08081040 	stmdaeq	r8, {r6, ip}
2000392c:	0202009a 	andeq	r0, r2, #154	; 0x9a
20003930:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003934:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20003938:	08082020 	stmdaeq	r8, {r5, sp}
2000393c:	01040082 	smlabbeq	r4, r2, r0, r0
20003940:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003944:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20003948:	48082020 	stmdami	r8, {r5, sp}
2000394c:	01040102 	tsteq	r4, r2, lsl #2
20003950:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003954:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20003958:	b0082020 	andlt	r2, r8, r0, lsr #32
2000395c:	01040101 	tsteq	r4, r1, lsl #2
20003960:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003964:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20003968:	00082220 	andeq	r2, r8, r0, lsr #4
2000396c:	01040100 	mrseq	r0, (UNDEF: 20)
20003970:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003974:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20003978:	00882420 	addeq	r2, r8, r0, lsr #8
2000397c:	01040100 	mrseq	r0, (UNDEF: 20)
20003980:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003984:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20003988:	01082420 	tsteq	r8, r0, lsr #8
2000398c:	01045a00 	tsteq	r4, r0, lsl #20
20003990:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003994:	0000007f 	andeq	r0, r0, pc, ror r0
20003998:	01082420 	tsteq	r8, r0, lsr #8
2000399c:	0104a400 	tsteq	r4, r0, lsl #8
200039a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200039a4:	00000001 	andeq	r0, r0, r1
200039a8:	010b2320 	tsteq	fp, r0, lsr #6
200039ac:	01030001 	tsteq	r3, r1
200039b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200039b4:	00000000 	andeq	r0, r0, r0
200039b8:	00c4c020 	sbceq	ip, r4, r0, lsr #32
200039bc:	02000002 	andeq	r0, r0, #2
200039c0:	3fffffff 	svccc	0x00ffffff
200039c4:	00000000 	andeq	r0, r0, r0
200039c8:	00000020 	andeq	r0, r0, r0, lsr #32
200039cc:	02200002 	eoreq	r0, r0, #2
200039d0:	3fffffff 	svccc	0x00ffffff
200039d4:	00000000 	andeq	r0, r0, r0
200039d8:	00000020 	andeq	r0, r0, r0, lsr #32
200039dc:	02400002 	subeq	r0, r0, #2
200039e0:	1fffffff 	svcne	0x00ffffff
200039e4:	00000000 	andeq	r0, r0, r0
200039e8:	80000020 	andhi	r0, r0, r0, lsr #32
200039ec:	02400001 	subeq	r0, r0, #1
200039f0:	1fffffff 	svcne	0x00ffffff
200039f4:	00000000 	andeq	r0, r0, r0
200039f8:	00000010 	andeq	r0, r0, r0, lsl r0
200039fc:	02400000 	subeq	r0, r0, #0
20003a00:	0fffffff 	svceq	0x00ffffff
20003a04:	00000000 	andeq	r0, r0, r0
20003a08:	00000010 	andeq	r0, r0, r0, lsl r0
20003a0c:	02300000 	eorseq	r0, r0, #0
20003a10:	0fffffff 	svceq	0x00ffffff
20003a14:	00000000 	andeq	r0, r0, r0
20003a18:	00000010 	andeq	r0, r0, r0, lsl r0
20003a1c:	02000000 	andeq	r0, r0, #0
20003a20:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
20003a24:	00000000 	andeq	r0, r0, r0
20003a28:	00000010 	andeq	r0, r0, r0, lsl r0
20003a2c:	04000000 	streq	r0, [r0], #-0
20003a30:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
20003a34:	00000000 	andeq	r0, r0, r0
20003a38:	00000010 	andeq	r0, r0, r0, lsl r0
20003a3c:	04000000 	streq	r0, [r0], #-0
20003a40:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20003b47 <castle_gray_bits+0x67>	; <UNPREDICTABLE>
20003a44:	00000000 	andeq	r0, r0, r0
20003a48:	00000008 	andeq	r0, r0, r8
20003a4c:	04000000 	streq	r0, [r0], #-0
20003a50:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20003b57 <castle_gray_bits+0x77>	; <UNPREDICTABLE>
20003a54:	00000000 	andeq	r0, r0, r0
20003a58:	00000008 	andeq	r0, r0, r8
20003a5c:	04000000 	streq	r0, [r0], #-0
20003a60:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20003a64:	00000000 	andeq	r0, r0, r0
20003a68:	00000008 	andeq	r0, r0, r8
20003a6c:	060001c0 	streq	r0, [r0], -r0, asr #3
20003a70:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20003a74:	00000000 	andeq	r0, r0, r0
20003a78:	00000008 	andeq	r0, r0, r8
20003a7c:	04000220 	streq	r0, [r0], #-544	; 0xfffffde0
20003a80:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
20003a84:	00000000 	andeq	r0, r0, r0
20003a88:	00000008 	andeq	r0, r0, r8
20003a8c:	04100400 	ldreq	r0, [r0], #-1024	; 0xfffffc00
20003a90:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
20003a94:	00000000 	andeq	r0, r0, r0
20003a98:	00000008 	andeq	r0, r0, r8
20003a9c:	04a00400 	strteq	r0, [r0], #1024	; 0x400
20003aa0:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
20003aa4:	00000000 	andeq	r0, r0, r0
20003aa8:	00000008 	andeq	r0, r0, r8
20003aac:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
20003ab0:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
20003ab4:	00000000 	andeq	r0, r0, r0
20003ab8:	00000008 	andeq	r0, r0, r8
20003abc:	07400400 	strbeq	r0, [r0, -r0, lsl #8]
20003ac0:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20003ac4:	00000000 	andeq	r0, r0, r0
20003ac8:	00000008 	andeq	r0, r0, r8
20003acc:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
20003ad0:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20003ad4:	00000000 	andeq	r0, r0, r0
20003ad8:	00000008 	andeq	r0, r0, r8
20003adc:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00

20003ae0 <castle_gray_bits>:
	...
20003ae8:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20003aec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
20003af8:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20003afc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
20003b08:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20003b0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003b10:	00000000 	andeq	r0, r0, r0
20003b14:	80000000 	andhi	r0, r0, r0
20003b18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003b1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003b20:	00000000 	andeq	r0, r0, r0
20003b24:	c0000000 	andgt	r0, r0, r0
20003b28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003b2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003b30:	00000000 	andeq	r0, r0, r0
20003b34:	e0000000 	and	r0, r0, r0
20003b38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003b3c:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
20003b40:	00000000 	andeq	r0, r0, r0
20003b44:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20003b48:	f3ffcfff 			; <UNDEFINED> instruction: 0xf3ffcfff
20003b4c:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
20003b50:	00000000 	andeq	r0, r0, r0
20003b54:	fc000000 	stc2	0, cr0, [r0], {-0}
20003b58:	f1ff8fff 			; <UNDEFINED> instruction: 0xf1ff8fff
20003b5c:	fff9ff3f 			; <UNDEFINED> instruction: 0xfff9ff3f
20003b60:	00000000 	andeq	r0, r0, r0
20003b64:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20003b68:	f0ff8fef 			; <UNDEFINED> instruction: 0xf0ff8fef
20003b6c:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
20003b70:	00000000 	andeq	r0, r0, r0
20003b74:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20003b78:	e0ff87ef 	rscs	r8, pc, pc, ror #15
20003b7c:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
20003b80:	00000000 	andeq	r0, r0, r0
20003b84:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20003b88:	c07e07e7 	rsbsgt	r0, lr, r7, ror #15
20003b8c:	ffe0fc1f 			; <UNDEFINED> instruction: 0xffe0fc1f
20003b90:	00000000 	andeq	r0, r0, r0
20003b94:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20003b98:	001c07e7 	andseq	r0, ip, r7, ror #15
20003b9c:	ffe0380e 	vcmla.f32	d19, d0, d14[0], #170
20003ba0:	00000000 	andeq	r0, r0, r0
20003ba4:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20003ba8:	000003e3 	andeq	r0, r0, r3, ror #7
20003bac:	f7c00000 			; <UNDEFINED> instruction: 0xf7c00000
20003bb0:	00000000 	andeq	r0, r0, r0
20003bb4:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20003bb8:	000001c3 	andeq	r0, r0, r3, asr #3
20003bbc:	e7800000 	str	r0, [r0, r0]
20003bc0:	00000000 	andeq	r0, r0, r0
20003bc4:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20003bc8:	00000003 	andeq	r0, r0, r3
20003bcc:	c3800000 	orrgt	r0, r0, #0
20003bd0:	00000000 	andeq	r0, r0, r0
20003bd4:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20003bd8:	00000001 	andeq	r0, r0, r1
20003bdc:	c0000000 	andgt	r0, r0, r0
20003be0:	00000000 	andeq	r0, r0, r0
20003be4:	9ff00000 	svcls	0x00f00000	; IMB
20003be8:	00000001 	andeq	r0, r0, r1
20003bec:	80000000 	andhi	r0, r0, r0
20003bf0:	00000000 	andeq	r0, r0, r0
20003bf4:	8ff00000 	svchi	0x00f00000	; IMB
20003bf8:	00000000 	andeq	r0, r0, r0
20003bfc:	80000000 	andhi	r0, r0, r0
20003c00:	00000000 	andeq	r0, r0, r0
20003c04:	8ff80000 	svchi	0x00f80000
	...
20003c14:	0ffc0000 	svceq	0x00fc0000
	...
20003c24:	0ffc0000 	svceq	0x00fc0000
	...
20003c34:	0ffc0000 	svceq	0x00fc0000
	...
20003c44:	0ffc0000 	svceq	0x00fc0000
	...
20003c54:	0ffc0000 	svceq	0x00fc0000
	...
20003c64:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
20003c74:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
20003c84:	07fe0000 	ldrbeq	r0, [lr, r0]!
20003c88:	03800000 	orreq	r0, r0, #0
	...
20003c94:	03fe0000 	mvnseq	r0, #0
20003c98:	02000000 	andeq	r0, r0, #0
	...
20003ca4:	03ff0000 	mvnseq	r0, #0
20003ca8:	02000000 	andeq	r0, r0, #0
	...
20003cb4:	03ff0000 	mvnseq	r0, #0
20003cb8:	02000000 	andeq	r0, r0, #0
	...
20003cc4:	03ff0000 	mvnseq	r0, #0
20003cc8:	02000000 	andeq	r0, r0, #0
	...
20003cd4:	03ff0000 	mvnseq	r0, #0
20003cd8:	02800c00 	addeq	r0, r0, #0, 24
20003cdc:	00000060 	andeq	r0, r0, r0, rrx
20003ce0:	00000000 	andeq	r0, r0, r0
20003ce4:	03ff0000 	mvnseq	r0, #0
20003ce8:	03000800 	movweq	r0, #2048	; 0x800
20003cec:	00000040 	andeq	r0, r0, r0, asr #32
20003cf0:	00000000 	andeq	r0, r0, r0
20003cf4:	03ff0000 	mvnseq	r0, #0
20003cf8:	03000800 	movweq	r0, #2048	; 0x800
20003cfc:	00000040 	andeq	r0, r0, r0, asr #32
20003d00:	00000000 	andeq	r0, r0, r0
20003d04:	03ff8000 	mvnseq	r8, #0
20003d08:	03000a00 	movweq	r0, #2560	; 0xa00
20003d0c:	00000040 	andeq	r0, r0, r0, asr #32
20003d10:	00000000 	andeq	r0, r0, r0
20003d14:	01ffb000 	mvnseq	fp, r0
20003d18:	03000c00 	movweq	r0, #3072	; 0xc00
20003d1c:	00000040 	andeq	r0, r0, r0, asr #32
20003d20:	00000000 	andeq	r0, r0, r0
20003d24:	01fff800 	mvnseq	pc, r0, lsl #16
20003d28:	07800c00 	streq	r0, [r0, r0, lsl #24]
20003d2c:	00000060 	andeq	r0, r0, r0, rrx
20003d30:	00000000 	andeq	r0, r0, r0
20003d34:	01fffc00 	mvnseq	pc, r0, lsl #24
20003d38:	04001800 	streq	r1, [r0], #-2048	; 0xfffff800
20003d3c:	00c00058 	sbceq	r0, r0, r8, asr r0
20003d40:	00000000 	andeq	r0, r0, r0
20003d44:	00fffc00 	rscseq	pc, pc, r0, lsl #24
20003d48:	06001400 	streq	r1, [r0], -r0, lsl #8
20003d4c:	00c000c0 	sbceq	r0, r0, r0, asr #1
20003d50:	00000000 	andeq	r0, r0, r0
20003d54:	007ffc00 	rsbseq	pc, pc, r0, lsl #24
20003d58:	45001000 	strmi	r1, [r0, #-0]
20003d5c:	008000a0 	addeq	r0, r0, r0, lsr #1
20003d60:	00000000 	andeq	r0, r0, r0
20003d64:	007ffe00 	rsbseq	pc, pc, r0, lsl #28
20003d68:	80001000 	andhi	r1, r0, r0
20003d6c:	008000c1 	addeq	r0, r0, r1, asr #1
20003d70:	00000000 	andeq	r0, r0, r0
20003d74:	003ffe00 	eorseq	pc, pc, r0, lsl #28
20003d78:	00001000 	andeq	r1, r0, r0
20003d7c:	00a000f0 	strdeq	r0, [r0], r0	; <UNPREDICTABLE>
20003d80:	00000000 	andeq	r0, r0, r0
20003d84:	003fff00 	eorseq	pc, pc, r0, lsl #30
20003d88:	00001000 	andeq	r1, r0, r0
20003d8c:	00c000e0 	sbceq	r0, r0, r0, ror #1
20003d90:	00000000 	andeq	r0, r0, r0
20003d94:	001fff80 	andseq	pc, pc, r0, lsl #31
20003d98:	02001800 	andeq	r1, r0, #0, 16
20003d9c:	00c000c0 	sbceq	r0, r0, r0, asr #1
20003da0:	00000000 	andeq	r0, r0, r0
20003da4:	0019fffe 			; <UNDEFINED> instruction: 0x0019fffe
20003da8:	02001400 	andeq	r1, r0, #0, 8
20003dac:	00803000 	addeq	r3, r0, r0
20003db0:	00000000 	andeq	r0, r0, r0
20003db4:	0018ffff 			; <UNDEFINED> instruction: 0x0018ffff
20003db8:	05033f00 	streq	r3, [r3, #-3840]	; 0xfffff100
20003dbc:	01000000 	mrseq	r0, (UNDEF: 0)
20003dc0:	c0000000 	andgt	r0, r0, r0
20003dc4:	0008ffff 	strdeq	pc, [r8], -pc	; <UNPREDICTABLE>
20003dc8:	00c0e400 	sbceq	lr, r0, r0, lsl #8
20003dcc:	01000004 	tsteq	r0, r4
20003dd0:	c0000000 	andgt	r0, r0, r0
20003dd4:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20003dd8:	00002000 	andeq	r2, r0, r0
20003ddc:	01000008 	tsteq	r0, r8
20003de0:	e0000000 	and	r0, r0, r0
20003de4:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20003de8:	00001000 	andeq	r1, r0, r0
20003dec:	01000006 	tsteq	r0, r6
20003df0:	e0000000 	and	r0, r0, r0
20003df4:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
20003df8:	80000000 	andhi	r0, r0, r0
20003dfc:	01800001 	orreq	r0, r0, r1
20003e00:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20003e04:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
20003e08:	00400000 	subeq	r0, r0, r0
20003e0c:	01400000 	mrseq	r0, (UNDEF: 64)
20003e10:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20003e14:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
20003e18:	03800000 	orreq	r0, r0, #0
20003e1c:	01300000 	teqeq	r0, r0
20003e20:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20003e24:	00001bff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
20003e28:	10e00000 	rscne	r0, r0, r0
20003e2c:	03000000 	movweq	r0, #0
20003e30:	fc000000 	stc2	0, cr0, [r0], {-0}
20003e34:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20003e38:	0f800000 	svceq	0x00800000
20003e3c:	03900000 	orrseq	r0, r0, #0
20003e40:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20003e44:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20003e48:	00000000 	andeq	r0, r0, r0
20003e4c:	03e00000 	mvneq	r0, #0
20003e50:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20003e54:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20003e58:	00000000 	andeq	r0, r0, r0
20003e5c:	03f40000 	mvnseq	r0, #0
20003e60:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20003e64:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20003e68:	00002000 	andeq	r2, r0, r0
20003e6c:	01f80000 	mvnseq	r0, r0
20003e70:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20003e74:	0000007f 	andeq	r0, r0, pc, ror r0
20003e78:	0010c000 	andseq	ip, r0, r0
20003e7c:	03f80000 	mvnseq	r0, #0
20003e80:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20003e84:	0000003f 	andeq	r0, r0, pc, lsr r0
20003e88:	000f0000 	andeq	r0, pc, r0
20003e8c:	03e000e0 	mvneq	r0, #224	; 0xe0
20003e90:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20003e94:	0000001f 	andeq	r0, r0, pc, lsl r0
20003e98:	00026000 	andeq	r6, r2, r0
20003e9c:	035001f0 	cmpeq	r0, #240, 2	; 0x3c
20003ea0:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20003ea4:	0000001f 	andeq	r0, r0, pc, lsl r0
20003ea8:	00118000 	andseq	r8, r1, r0
20003eac:	03ec01f0 	mvneq	r0, #240, 2	; 0x3c
20003eb0:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
20003eb4:	0000000f 	andeq	r0, r0, pc
20003eb8:	200e0000 	andcs	r0, lr, r0
20003ebc:	00a022f0 	strdeq	r2, [r0], r0	; <UNPREDICTABLE>
20003ec0:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
20003ec4:	00000007 	andeq	r0, r0, r7
20003ec8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
20003ecc:	03c0c170 	biceq	ip, r0, #112, 2
20003ed0:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
20003ed4:	00000003 	andeq	r0, r0, r3
20003ed8:	e4000000 	str	r0, [r0], #-0
20003edc:	03c270f3 	biceq	r7, r2, #243	; 0xf3

20003ee0 <castle_light_bits>:
	...
20003f3c:	00000040 	andeq	r0, r0, r0, asr #32
	...
20003f48:	0c003000 	stceq	0, cr3, [r0], {-0}
20003f4c:	00000040 	andeq	r0, r0, r0, asr #32
	...
20003f58:	0e007000 	cdpeq	0, 0, cr7, cr0, cr0, {0}
20003f5c:	000600c0 	andeq	r0, r6, r0, asr #1
	...
20003f68:	0f007010 	svceq	0x00007010
20003f6c:	000601e0 	andeq	r0, r6, r0, ror #3
	...
20003f78:	1f007810 	svcne	0x00007810
20003f7c:	000601e0 	andeq	r0, r6, r0, ror #3
	...
20003f88:	3f81f818 	svccc	0x0081f818
20003f8c:	001f03e0 	andseq	r0, pc, r0, ror #7
	...
20003f98:	ffe3f818 			; <UNDEFINED> instruction: 0xffe3f818
20003f9c:	001fc7f1 			; <UNDEFINED> instruction: 0x001fc7f1
	...
20003fa8:	fffffc1c 			; <UNDEFINED> instruction: 0xfffffc1c
20003fac:	083fffff 	ldmdaeq	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
	...
20003fb8:	fffffe3c 			; <UNDEFINED> instruction: 0xfffffe3c
20003fbc:	187fffff 	ldmdane	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
	...
20003fc8:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20003fcc:	3c7fffff 	ldclcc	15, cr15, [pc], #-1020	; 20003bd8 <castle_gray_bits+0xf8>
	...
20003fd8:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20003fdc:	3fffffff 	svccc	0x00ffffff
20003fe0:	00000000 	andeq	r0, r0, r0
20003fe4:	60000000 	andvs	r0, r0, r0
20003fe8:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20003fec:	7fffffff 	svcvc	0x00ffffff
20003ff0:	00000000 	andeq	r0, r0, r0
20003ff4:	70000000 	andvc	r0, r0, r0
20003ff8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003ffc:	7fffffff 	svcvc	0x00ffffff
20004000:	00000000 	andeq	r0, r0, r0
20004004:	70000000 	andvc	r0, r0, r0
20004008:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000400c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004010:	00000000 	andeq	r0, r0, r0
20004014:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20004018:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000401c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004020:	00000000 	andeq	r0, r0, r0
20004024:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20004028:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000402c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004030:	00000000 	andeq	r0, r0, r0
20004034:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20004038:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000403c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004040:	00000000 	andeq	r0, r0, r0
20004044:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20004048:	fb6fffff 	blx	21c0404e <firstTime.4076+0x1bff8ea>
2000404c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004050:	00000000 	andeq	r0, r0, r0
20004054:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20004058:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
2000405c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004060:	00000000 	andeq	r0, r0, r0
20004064:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20004068:	f407ffff 			; <UNDEFINED> instruction: 0xf407ffff
2000406c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004070:	00000000 	andeq	r0, r0, r0
20004074:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20004078:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
2000407c:	ffffff6d 			; <UNDEFINED> instruction: 0xffffff6d
20004080:	00000000 	andeq	r0, r0, r0
20004084:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20004088:	f80fffff 			; <UNDEFINED> instruction: 0xf80fffff
2000408c:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20004090:	00000000 	andeq	r0, r0, r0
20004094:	fc000000 	stc2	0, cr0, [r0], {-0}
20004098:	f80fedbf 			; <UNDEFINED> instruction: 0xf80fedbf
2000409c:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200040a0:	00000000 	andeq	r0, r0, r0
200040a4:	fc000000 	stc2	0, cr0, [r0], {-0}
200040a8:	f80fc01f 			; <UNDEFINED> instruction: 0xf80fc01f
200040ac:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
200040b0:	00000000 	andeq	r0, r0, r0
200040b4:	fc000000 	stc2	0, cr0, [r0], {-0}
200040b8:	f90fc81f 			; <UNDEFINED> instruction: 0xf90fc81f
200040bc:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
200040c0:	00000000 	andeq	r0, r0, r0
200040c4:	fc000000 	stc2	0, cr0, [r0], {-0}
200040c8:	f90fd41f 			; <UNDEFINED> instruction: 0xf90fd41f
200040cc:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200040d0:	00000000 	andeq	r0, r0, r0
200040d4:	fc000000 	stc2	0, cr0, [r0], {-0}
200040d8:	f90fe03f 			; <UNDEFINED> instruction: 0xf90fe03f
200040dc:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
200040e0:	00000000 	andeq	r0, r0, r0
200040e4:	fc000000 	stc2	0, cr0, [r0], {-0}
200040e8:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
200040ec:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
200040f0:	00000000 	andeq	r0, r0, r0
200040f4:	fc000000 	stc2	0, cr0, [r0], {-0}
200040f8:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
200040fc:	fedbff19 	mrc2	15, 6, pc, cr11, cr9, {0}
20004100:	00000000 	andeq	r0, r0, r0
20004104:	fc000000 	stc2	0, cr0, [r0], {-0}
20004108:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
2000410c:	fd01ff11 	stc2	15, cr15, [r1, #-68]	; 0xffffffbc
20004110:	00000000 	andeq	r0, r0, r0
20004114:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20004118:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
2000411c:	fd01ff19 	stc2	15, cr15, [r1, #-100]	; 0xffffff9c
20004120:	00000000 	andeq	r0, r0, r0
20004124:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20004128:	f007e03f 			; <UNDEFINED> instruction: 0xf007e03f
2000412c:	fc01ff01 	stc2	15, cr15, [r1], {1}
20004130:	00000000 	andeq	r0, r0, r0
20004134:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20004138:	f007c01f 			; <UNDEFINED> instruction: 0xf007c01f
2000413c:	fe03ff01 	cdp2	15, 0, cr15, cr3, cr1, {0}
20004140:	00000000 	andeq	r0, r0, r0
20004144:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20004148:	b007c01f 	andlt	ip, r7, pc, lsl r0
2000414c:	fe03fe01 	cdp2	14, 0, cr15, cr3, cr1, {0}
20004150:	00000000 	andeq	r0, r0, r0
20004154:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20004158:	0007c01f 	andeq	ip, r7, pc, lsl r0
2000415c:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
20004160:	00000000 	andeq	r0, r0, r0
20004164:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20004168:	0007c01f 	andeq	ip, r7, pc, lsl r0
2000416c:	fe03fe10 	mcr2	14, 0, pc, cr3, cr0, {0}	; <UNPREDICTABLE>
20004170:	00000000 	andeq	r0, r0, r0
20004174:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20004178:	0007c21f 	andeq	ip, r7, pc, lsl r2
2000417c:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
20004180:	00000000 	andeq	r0, r0, r0
20004184:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20004188:	0087c31f 	addeq	ip, r7, pc, lsl r3
2000418c:	fe03a400 	cdp2	4, 0, cr10, cr3, cr0, {0}
20004190:	00000000 	andeq	r0, r0, r0
20004194:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20004198:	00c7c31f 	sbceq	ip, r7, pc, lsl r3
2000419c:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
200041a0:	00000000 	andeq	r0, r0, r0
200041a4:	ffe60000 			; <UNDEFINED> instruction: 0xffe60000
200041a8:	00c4c01f 	sbceq	ip, r4, pc, lsl r0
200041ac:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
200041b0:	00000000 	andeq	r0, r0, r0
200041b4:	ffe70000 			; <UNDEFINED> instruction: 0xffe70000
200041b8:	8000001f 	andhi	r0, r0, pc, lsl r0
200041bc:	fc000001 	stc2	0, cr0, [r0], {1}
200041c0:	00000000 	andeq	r0, r0, r0
200041c4:	fff70000 			; <UNDEFINED> instruction: 0xfff70000
200041c8:	8000001f 	andhi	r0, r0, pc, lsl r0
200041cc:	fc000009 	stc2	0, cr0, [r0], {9}
200041d0:	00000000 	andeq	r0, r0, r0
200041d4:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200041d8:	8000001f 	andhi	r0, r0, pc, lsl r0
200041dc:	fc200001 	stc2	0, cr0, [r0], #-4
200041e0:	00000000 	andeq	r0, r0, r0
200041e4:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200041e8:	0000001f 	andeq	r0, r0, pc, lsl r0
200041ec:	fc300000 	ldc2	0, cr0, [r0], #-0
200041f0:	00000000 	andeq	r0, r0, r0
200041f4:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
200041f8:	0000000f 	andeq	r0, r0, pc
200041fc:	fc300000 	ldc2	0, cr0, [r0], #-0
20004200:	00000000 	andeq	r0, r0, r0
20004204:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20004208:	0000000f 	andeq	r0, r0, pc
2000420c:	fc000000 	stc2	0, cr0, [r0], {-0}
20004210:	00000000 	andeq	r0, r0, r0
20004214:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
20004218:	1000000f 	andne	r0, r0, pc
2000421c:	fc000000 	stc2	0, cr0, [r0], {-0}
20004220:	00000000 	andeq	r0, r0, r0
20004224:	ffffe400 			; <UNDEFINED> instruction: 0xffffe400
20004228:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
2000422c:	f8080000 			; <UNDEFINED> instruction: 0xf8080000
20004230:	00000000 	andeq	r0, r0, r0
20004234:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20004238:	0000000f 	andeq	r0, r0, pc
2000423c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20004240:	00000000 	andeq	r0, r0, r0
20004244:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20004248:	00000007 	andeq	r0, r0, r7
2000424c:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
20004250:	00000000 	andeq	r0, r0, r0
20004254:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20004258:	00000007 	andeq	r0, r0, r7
2000425c:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
20004260:	00000000 	andeq	r0, r0, r0
20004264:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20004268:	00100007 	andseq	r0, r0, r7
2000426c:	f8040000 			; <UNDEFINED> instruction: 0xf8040000
20004270:	00000000 	andeq	r0, r0, r0
20004274:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
20004278:	00080007 	andeq	r0, r8, r7
2000427c:	f80001c0 			; <UNDEFINED> instruction: 0xf80001c0
20004280:	00000000 	andeq	r0, r0, r0
20004284:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
20004288:	00000007 	andeq	r0, r0, r7
2000428c:	f8080300 			; <UNDEFINED> instruction: 0xf8080300
20004290:	00000000 	andeq	r0, r0, r0
20004294:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
20004298:	00200007 	eoreq	r0, r0, r7
2000429c:	f8080200 			; <UNDEFINED> instruction: 0xf8080200
200042a0:	00000000 	andeq	r0, r0, r0
200042a4:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
200042a8:	00000007 	andeq	r0, r0, r7
200042ac:	f8000200 			; <UNDEFINED> instruction: 0xf8000200
200042b0:	00000000 	andeq	r0, r0, r0
200042b4:	fffffff0 			; <UNDEFINED> instruction: 0xfffffff0
200042b8:	00000007 	andeq	r0, r0, r7
200042bc:	f8000100 			; <UNDEFINED> instruction: 0xf8000100
200042c0:	00000000 	andeq	r0, r0, r0
200042c4:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
200042c8:	01000007 	tsteq	r0, r7
200042cc:	f8100280 			; <UNDEFINED> instruction: 0xf8100280
200042d0:	00000000 	andeq	r0, r0, r0
200042d4:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
200042d8:	02000007 	andeq	r0, r0, #7
200042dc:	f8000300 			; <UNDEFINED> instruction: 0xf8000300

200042e0 <bg_bits>:
	...
200042f0:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
200042f4:	0000001f 	andeq	r0, r0, pc, lsl r0
	...
20004300:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
20004304:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
20004310:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
20004314:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
	...
20004320:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20004324:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
	...
20004330:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20004334:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
20004340:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20004344:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20004350:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
20004354:	01ffffff 	ldrsheq	pc, [pc, #255]	; 2000445b <bg_bits+0x17b>	; <UNPREDICTABLE>
20004358:	0001f000 	andeq	pc, r1, r0
2000435c:	00000000 	andeq	r0, r0, r0
20004360:	007fe000 	rsbseq	lr, pc, r0
20004364:	0ffffffe 	svceq	0x00fffffe
20004368:	0003f800 	andeq	pc, r3, r0, lsl #16
2000436c:	00000000 	andeq	r0, r0, r0
20004370:	003fe000 	eorseq	lr, pc, r0
20004374:	7fffffc0 	svcvc	0x00ffffc0
20004378:	0003f800 	andeq	pc, r3, r0, lsl #16
2000437c:	001f8000 	andseq	r8, pc, r0
20004380:	001fe000 	andseq	lr, pc, r0
20004384:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20004388:	0003f801 	andeq	pc, r3, r1, lsl #16
2000438c:	003fc000 	eorseq	ip, pc, r0
20004390:	003fe000 	eorseq	lr, pc, r0
20004394:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
20004398:	3f83f807 	svccc	0x0083f807
2000439c:	003fe000 	eorseq	lr, pc, r0
200043a0:	01ffe000 	mvnseq	lr, r0
200043a4:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200043a8:	7fc3f80f 	svcvc	0x00c3f80f
200043ac:	003fe7f8 	ldrshteq	lr, [pc], -r8
200043b0:	07ffe000 	ldrbeq	lr, [pc, r0]!
200043b4:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
200043b8:	7fe1f01f 	svcvc	0x00e1f01f
200043bc:	003ffffc 	ldrshteq	pc, [pc], -ip	; <UNPREDICTABLE>
200043c0:	3fffc000 	svccc	0x00ffc000
200043c4:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
200043c8:	7ff0003f 	svcvc	0x00f0003f
200043cc:	007ffffc 	ldrshteq	pc, [pc], #-252	; <UNPREDICTABLE>
200043d0:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
200043d4:	ff000000 			; <UNDEFINED> instruction: 0xff000000
200043d8:	7ff8007f 	svcvc	0x00f8007f
200043dc:	3ffffffc 	svccc	0x00fffffc
200043e0:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
200043e4:	f8000003 			; <UNDEFINED> instruction: 0xf8000003
200043e8:	7ffc00ff 	svcvc	0x00fc00ff
200043ec:	7ffffffc 	svcvc	0x00fffffc
200043f0:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200043f4:	e000000f 	and	r0, r0, pc
200043f8:	7ffe01ff 	svcvc	0x00fe01ff
200043fc:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20004400:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
20004404:	8000001f 	andhi	r0, r0, pc, lsl r0
20004408:	7fff01ff 	svcvc	0x00ff01ff
2000440c:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20004410:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20004414:	0000007f 	andeq	r0, r0, pc, ror r0
20004418:	7fff83ff 	svcvc	0x00ff83ff
2000441c:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
20004420:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20004424:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004428:	7fffc3fe 	svcvc	0x00ffc3fe
2000442c:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
20004430:	fc7ffff0 	ldc2l	15, cr15, [pc], #-960	; 20004078 <castle_light_bits+0x198>
20004434:	07c001ff 			; <UNDEFINED> instruction: 0x07c001ff
20004438:	7fffe7fc 	svcvc	0x00ffe7fc
2000443c:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
20004440:	f0fffffe 			; <UNDEFINED> instruction: 0xf0fffffe
20004444:	0fe007ff 	svceq	0x00e007ff
20004448:	7ffff7fc 	svcvc	0x00fff7fc
2000444c:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
20004450:	c0ffffff 	ldrshtgt	pc, [pc], #255	; <UNPREDICTABLE>
20004454:	0fe00fff 	svceq	0x00e00fff
20004458:	7ffffff8 	svcvc	0x00fffff8
2000445c:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20004460:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20004567 <bg_bits+0x287>	; <UNPREDICTABLE>
20004464:	0fe01fff 	svceq	0x00e01fff
20004468:	7ffffff8 	svcvc	0x00fffff8
2000446c:	7ffffc00 	svcvc	0x00fffc00
20004470:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20004577 <bg_bits+0x297>	; <UNPREDICTABLE>
20004474:	0fe03ffe 	svceq	0x00e03ffe
20004478:	3fdffff0 	svccc	0x00dffff0
2000447c:	3ffffe00 	svccc	0x00fffe00
20004480:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20004587 <bg_bits+0x2a7>	; <UNPREDICTABLE>
20004484:	0fe03ff8 	svceq	0x00e03ff8
20004488:	3fe7fff0 	svccc	0x00e7fff0
2000448c:	07fffe00 	ldrbeq	pc, [pc, r0, lsl #28]!	; <UNPREDICTABLE>
20004490:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
20004494:	07c07ff0 			; <UNDEFINED> instruction: 0x07c07ff0
20004498:	1fe7fff0 	svcne	0x00e7fff0
2000449c:	0ffffe00 	svceq	0x00fffe00
200044a0:	03fc00ff 	mvnseq	r0, #255	; 0xff
200044a4:	0000ffe0 	andeq	pc, r0, r0, ror #31
200044a8:	1ff3ffe0 	svcne	0x00f3ffe0
200044ac:	1ffffe00 	svcne	0x00fffe00
200044b0:	03fc001f 	mvnseq	r0, #31
200044b4:	0001ff80 	andeq	pc, r1, r0, lsl #31
200044b8:	1ff9ffe0 	svcne	0x00f9ffe0
200044bc:	3ffffe00 	svccc	0x00fffe00
200044c0:	03fc0007 	mvnseq	r0, #7
200044c4:	0001ff80 	andeq	pc, r1, r0, lsl #31
200044c8:	0ffcffe0 	svceq	0x00fcffe0
200044cc:	3ffdfe00 	svccc	0x00fdfe00
200044d0:	07f80007 	ldrbeq	r0, [r8, r7]!
200044d4:	0003ff00 	andeq	pc, r3, r0, lsl #30
200044d8:	0ffe7ff0 	svceq	0x00fe7ff0
200044dc:	3ffcfe00 	svccc	0x00fcfe00
200044e0:	07f80003 	ldrbeq	r0, [r8, r3]!
200044e4:	0007fe00 	andeq	pc, r7, r0, lsl #28
200044e8:	07fe7ff8 			; <UNDEFINED> instruction: 0x07fe7ff8
200044ec:	3ff8fe00 	svccc	0x00f8fe00
200044f0:	0ff80003 	svceq	0x00f80003
200044f4:	0007fc00 	andeq	pc, r7, r0, lsl #24
200044f8:	03fffffc 	mvnseq	pc, #252, 30	; 0x3f0
200044fc:	3ff87c00 	svccc	0x00f87c00
20004500:	0ff80003 	svceq	0x00f80003
20004504:	0007fc00 	andeq	pc, r7, r0, lsl #24
20004508:	01fffffe 	ldrsheq	pc, [pc, #254]	; 2000460e <bg_bits+0x32e>	; <UNPREDICTABLE>
2000450c:	1ff00000 	svcne	0x00f00000	; IMB
20004510:	0ff00007 	svceq	0x00f00007
20004514:	000ff800 	andeq	pc, pc, r0, lsl #16
20004518:	01ffffff 	ldrsheq	pc, [pc, #255]	; 2000461f <bg_bits+0x33f>	; <UNPREDICTABLE>
2000451c:	07f0003e 			; <UNDEFINED> instruction: 0x07f0003e
20004520:	0ff00007 	svceq	0x00f00007
20004524:	800ff000 	andhi	pc, pc, r0
20004528:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
2000452c:	03e0007f 	mvneq	r0, #127	; 0x7f
20004530:	0fe00007 	svceq	0x00e00007
20004534:	c00ff000 	andgt	pc, pc, r0
20004538:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
2000453c:	0000007f 	andeq	r0, r0, pc, ror r0
20004540:	0fe00007 	svceq	0x00e00007
20004544:	e00ff000 	and	pc, pc, r0
20004548:	007ffeff 	ldrshteq	pc, [pc], #-239	; <UNPREDICTABLE>
2000454c:	0000007f 	andeq	r0, r0, pc, ror r0
20004550:	0fe00007 	svceq	0x00e00007
20004554:	f00ff000 			; <UNDEFINED> instruction: 0xf00ff000
20004558:	003ffe7f 	eorseq	pc, pc, pc, ror lr	; <UNPREDICTABLE>
2000455c:	0000007f 	andeq	r0, r0, pc, ror r0
20004560:	0fe00007 	svceq	0x00e00007
20004564:	f80ff000 			; <UNDEFINED> instruction: 0xf80ff000
20004568:	001ffc3f 	andseq	pc, pc, pc, lsr ip	; <UNPREDICTABLE>
2000456c:	0000007f 	andeq	r0, r0, pc, ror r0
20004570:	1fe0000f 	svcne	0x00e0000f
20004574:	fc0ff000 	stc2	0, cr15, [pc], {-0}
20004578:	000ff81f 	andeq	pc, pc, pc, lsl r8	; <UNPREDICTABLE>
2000457c:	0000003e 	andeq	r0, r0, lr, lsr r0
20004580:	1fe0000f 	svcne	0x00e0000f
20004584:	fc07f000 	stc2	0, cr15, [r7], {-0}
20004588:	0007f00f 	andeq	pc, r7, pc
2000458c:	00000000 	andeq	r0, r0, r0
20004590:	1fe0000f 	svcne	0x00e0000f
20004594:	fc07f000 	stc2	0, cr15, [r7], {-0}
20004598:	00000007 	andeq	r0, r0, r7
2000459c:	00000000 	andeq	r0, r0, r0
200045a0:	1fe0000f 	svcne	0x00e0000f
200045a4:	fc07f800 	stc2	8, cr15, [r7], {-0}
200045a8:	00000003 	andeq	r0, r0, r3
200045ac:	000ff800 	andeq	pc, pc, r0, lsl #16
200045b0:	1fc0001f 	svcne	0x00c0001f
200045b4:	fc07fc00 	stc2	12, cr15, [r7], {-0}
200045b8:	00000001 	andeq	r0, r0, r1
200045bc:	001ffc00 	andseq	pc, pc, r0, lsl #24
200045c0:	1fc0003f 	svcne	0x00c0003f
200045c4:	fc07ff80 	stc2	15, cr15, [r7], {128}	; 0x80
200045c8:	00000001 	andeq	r0, r0, r1
200045cc:	003fff00 	eorseq	pc, pc, r0, lsl #30
200045d0:	3fc0003f 	svccc	0x00c0003f
200045d4:	fc07fffc 	stc2	15, cr15, [r7], {252}	; 0xfc
200045d8:	00000001 	andeq	r0, r0, r1
200045dc:	007fff80 	rsbseq	pc, pc, r0, lsl #31
200045e0:	ffc0003f 			; <UNDEFINED> instruction: 0xffc0003f
200045e4:	fc03ffff 	stc2	15, cr15, [r3], {255}	; 0xff
200045e8:	00000001 	andeq	r0, r0, r1
200045ec:	00ffffe0 	rscseq	pc, pc, r0, ror #31
200045f0:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
200045f4:	fc01ffff 	stc2	15, cr15, [r1], {255}	; 0xff
200045f8:	00000007 	andeq	r0, r0, r7
200045fc:	03fffff0 	mvnseq	pc, #240, 30	; 0x3c0
20004600:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20004604:	fc00ffff 	stc2	15, cr15, [r0], {255}	; 0xff
20004608:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000460c:	07fffff8 			; <UNDEFINED> instruction: 0x07fffff8
20004610:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20004614:	fc007fff 	stc2	15, cr7, [r0], {255}	; 0xff
20004618:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000461c:	07ff7ffd 			; <UNDEFINED> instruction: 0x07ff7ffd
20004620:	ff80007f 			; <UNDEFINED> instruction: 0xff80007f
20004624:	fc003fff 	stc2	15, cr3, [r0], {255}	; 0xff
20004628:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000462c:	0ffe3fff 	svceq	0x00fe3fff
20004630:	ff1f007f 			; <UNDEFINED> instruction: 0xff1f007f
20004634:	f80007ff 			; <UNDEFINED> instruction: 0xf80007ff
20004638:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000463c:	1ffc3fff 	svcne	0x00fc3fff
20004640:	fc3f807f 	ldc2	0, cr8, [pc], #-508	; 2000444c <bg_bits+0x16c>
20004644:	f800003f 			; <UNDEFINED> instruction: 0xf800003f
20004648:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000464c:	1ff83fff 	svcne	0x00f83fff
20004650:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
20004654:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20004658:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000465c:	3ff03fff 	svccc	0x00f03fff
20004660:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
20004664:	c0000000 	andgt	r0, r0, r0
20004668:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000466c:	7fe03fff 	svcvc	0x00e03fff
20004670:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
20004674:	00000000 	andeq	r0, r0, r0
20004678:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
2000467c:	7fc03fff 	svcvc	0x00c03fff
20004680:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
20004684:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
20004688:	f800000f 			; <UNDEFINED> instruction: 0xf800000f
2000468c:	ffc01fff 			; <UNDEFINED> instruction: 0xffc01fff
20004690:	001f003f 	andseq	r0, pc, pc, lsr r0	; <UNPREDICTABLE>
20004694:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20004698:	f8007fff 			; <UNDEFINED> instruction: 0xf8007fff
2000469c:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
200046a0:	0000003f 	andeq	r0, r0, pc, lsr r0
200046a4:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
200046a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200046ac:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
200046b0:	0000003f 	andeq	r0, r0, pc, lsr r0
200046b4:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
200046b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200046bc:	ff001fff 			; <UNDEFINED> instruction: 0xff001fff
200046c0:	0000003f 	andeq	r0, r0, pc, lsr r0
200046c4:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
200046c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200046cc:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}
200046d0:	0000003f 	andeq	r0, r0, pc, lsr r0
200046d4:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
200046d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200046dc:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}

200046e0 <fire_black_2_bits>:
	...
200046e8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>

200046ec <fire1_gray_bits>:
200046ec:	00000000 	andeq	r0, r0, r0
200046f0:	06000804 	streq	r0, [r0], -r4, lsl #16
200046f4:	02494204 	subeq	r4, r9, #4, 4	; 0x40000000

200046f8 <fire1_light_bits>:
200046f8:	00002000 	andeq	r2, r0, r0
200046fc:	48000010 	stmdami	r0, {r4}
20004700:	2c243020 	stccs	0, cr3, [r4], #-128	; 0xffffff80

20004704 <fire2_gray_bits>:
20004704:	00000000 	andeq	r0, r0, r0
20004708:	10220000 	eorne	r0, r2, r0
2000470c:	00420444 	subeq	r0, r2, r4, asr #8

20004710 <fire2_light_bits>:
20004710:	04200000 	strteq	r0, [r0], #-0
20004714:	240c0010 	strcs	r0, [ip], #-16
20004718:	123c6008 	eorsne	r6, ip, #8

2000471c <fire3_gray_bits>:
2000471c:	00000000 	andeq	r0, r0, r0
20004720:	24100802 	ldrcs	r0, [r0], #-2050	; 0xfffff7fe
20004724:	00020260 	andeq	r0, r2, r0, ror #4

20004728 <fire3_light_bits>:
20004728:	10200000 	eorne	r0, r0, r0
2000472c:	18040400 	stmdane	r4, {sl}
20004730:	143c5812 	ldrtne	r5, [ip], #-2066	; 0xfffff7ee

20004734 <fire4_gray_bits>:
20004734:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
20004738:	10320000 	eorsne	r0, r2, r0
2000473c:	02400012 	subeq	r0, r0, #18

20004740 <fire4_light_bits>:
20004740:	00001000 	andeq	r1, r0, r0
20004744:	04082000 	streq	r2, [r8], #-0
20004748:	24283a0c 	strtcs	r3, [r8], #-2572	; 0xfffff5f4

2000474c <fire5_gray_bits>:
2000474c:	00000000 	andeq	r0, r0, r0
20004750:	22001020 	andcs	r1, r0, #32
20004754:	04044206 	streq	r4, [r4], #-518	; 0xfffffdfa

20004758 <fire5_light_bits>:
20004758:	00040000 	andeq	r0, r4, r0
2000475c:	04240800 	strteq	r0, [r4], #-2048	; 0xfffff800
20004760:	502a1810 	eorpl	r1, sl, r0, lsl r8

20004764 <firstTime.4076>:
20004764:	00000001 	andeq	r0, r0, r1
20004768:	20000a28 	andcs	r0, r0, r8, lsr #20
2000476c:	20000a32 	andcs	r0, r0, r2, lsr sl
20004770:	20000a3c 	andcs	r0, r0, ip, lsr sl
20004774:	20000a46 	andcs	r0, r0, r6, asr #20
20004778:	20000a50 	andcs	r0, r0, r0, asr sl
2000477c:	20000a5a 	andcs	r0, r0, sl, asr sl
20004780:	20000a64 	andcs	r0, r0, r4, ror #20
20004784:	20000a6e 	andcs	r0, r0, lr, ror #20

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000059a 	muleq	r0, sl, r5
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000044 	andeq	r0, r0, r4, asr #32
      10:	0001a60c 	andeq	sl, r1, ip, lsl #12
	...
      20:	020c0200 	andeq	r0, ip, #0, 4
      24:	00004e05 	andeq	r4, r0, r5, lsl #28
      28:	019a0300 	orrseq	r0, sl, r0, lsl #6
      2c:	07020000 	streq	r0, [r2, -r0]
      30:	0000004e 	andeq	r0, r0, lr, asr #32
      34:	02760300 	rsbseq	r0, r6, #0, 6
      38:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      3c:	0000004e 	andeq	r0, r0, lr, asr #32
      40:	05e50304 	strbeq	r0, [r5, #772]!	; 0x304
      44:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
      48:	00000055 	andeq	r0, r0, r5, asr r0
      4c:	04040008 	streq	r0, [r4], #-8
      50:	00029707 	andeq	r9, r2, r7, lsl #14
      54:	5b040500 	blpl	10145c <startup-0x1fefeba4>
      58:	04000000 	streq	r0, [r0], #-0
      5c:	02580801 	subseq	r0, r8, #65536	; 0x10000
      60:	b1060000 	mrslt	r0, (UNDEF: 6)
      64:	02000004 	andeq	r0, r0, #4
      68:	0000210a 	andeq	r2, r0, sl, lsl #2
      6c:	02450700 	subeq	r0, r5, #0, 14
      70:	030c0000 	movweq	r0, #49152	; 0xc000
      74:	00009e06 	andeq	r9, r0, r6, lsl #28
      78:	03810300 	orreq	r0, r1, #0, 6
      7c:	07030000 	streq	r0, [r3, -r0]
      80:	0000009e 	muleq	r0, lr, r0
      84:	038c0300 	orreq	r0, ip, #0, 6
      88:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
      8c:	0000009e 	muleq	r0, lr, r0
      90:	02410304 	subeq	r0, r1, #4, 6	; 0x10000000
      94:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
      98:	0000009e 	muleq	r0, lr, r0
      9c:	04050008 	streq	r0, [r5], #-8
      a0:	00000062 	andeq	r0, r0, r2, rrx
      a4:	0009c706 	andeq	ip, r9, r6, lsl #14
      a8:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
      ac:	07000000 	streq	r0, [r0, -r0]
      b0:	00000125 	andeq	r0, r0, r5, lsr #2
      b4:	28060424 	stmdacs	r6, {r2, r5, sl}
      b8:	03000001 	movweq	r0, #1
      bc:	00000449 	andeq	r0, r0, r9, asr #8
      c0:	01280704 			; <UNDEFINED> instruction: 0x01280704
      c4:	03000000 	movweq	r0, #0
      c8:	000000dc 	ldrdeq	r0, [r0], -ip
      cc:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
      d0:	03040000 	movweq	r0, #16384	; 0x4000
      d4:	00000209 	andeq	r0, r0, r9, lsl #4
      d8:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
      dc:	03080000 	movweq	r0, #32768	; 0x8000
      e0:	00000202 	andeq	r0, r0, r2, lsl #4
      e4:	01460c04 	cmpeq	r6, r4, lsl #24
      e8:	030c0000 	movweq	r0, #49152	; 0xc000
      ec:	00000228 	andeq	r0, r0, r8, lsr #4
      f0:	01460d04 	cmpeq	r6, r4, lsl #26
      f4:	03100000 	tsteq	r0, #0
      f8:	000000ea 	andeq	r0, r0, sl, ror #1
      fc:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
     100:	03140000 	tsteq	r4, #0
     104:	00000342 	andeq	r0, r0, r2, asr #6
     108:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
     10c:	03180000 	tsteq	r8, #0
     110:	00000404 	andeq	r0, r0, r4, lsl #8
     114:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
     118:	031c0000 	tsteq	ip, #0
     11c:	00000029 	andeq	r0, r0, r9, lsr #32
     120:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
     124:	00200000 	eoreq	r0, r0, r0
     128:	00a40405 	adceq	r0, r4, r5, lsl #8
     12c:	04080000 	streq	r0, [r8], #-0
     130:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     134:	01400900 	cmpeq	r0, r0, lsl #18
     138:	400a0000 	andmi	r0, sl, r0
     13c:	00000001 	andeq	r0, r0, r1
     140:	00af0405 	adceq	r0, pc, r5, lsl #8
     144:	04050000 	streq	r0, [r5], #-0
     148:	00000135 	andeq	r0, r0, r5, lsr r1
     14c:	00012606 	andeq	r2, r1, r6, lsl #12
     150:	af150400 	svcge	0x00150400
     154:	0b000000 	bleq	15c <startup-0x1ffffea4>
     158:	00000162 	andeq	r0, r0, r2, ror #2
     15c:	00000162 	andeq	r0, r0, r2, ror #2
     160:	0405000c 	streq	r0, [r5], #-12
     164:	0000014c 	andeq	r0, r0, ip, asr #2
     168:	00035e0d 	andeq	r5, r3, sp, lsl #28
     16c:	571a0400 	ldrpl	r0, [sl, -r0, lsl #8]
     170:	0d000001 	stceq	0, cr0, [r0, #-4]
     174:	0000018d 	andeq	r0, r0, sp, lsl #3
     178:	012e1b04 			; <UNDEFINED> instruction: 0x012e1b04
     17c:	58060000 	stmdapl	r6, {}	; <UNPREDICTABLE>
     180:	05000001 	streq	r0, [r0, #-1]
     184:	00005b24 	andeq	r5, r0, r4, lsr #22
     188:	017e0b00 	cmneq	lr, r0, lsl #22
     18c:	019a0000 	orrseq	r0, sl, r0
     190:	9a0e0000 	bls	380198 <startup-0x1fc7fe68>
     194:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     198:	04040003 	streq	r0, [r4], #-3
     19c:	0000e107 	andeq	lr, r0, r7, lsl #2
     1a0:	052b0d00 	streq	r0, [fp, #-3328]!	; 0xfffff300
     1a4:	2b050000 	blcs	1401ac <startup-0x1febfe54>
     1a8:	00000189 	andeq	r0, r0, r9, lsl #3
     1ac:	0000f80d 	andeq	pc, r0, sp, lsl #16
     1b0:	892c0500 	stmdbhi	ip!, {r8, sl}
     1b4:	0d000001 	stceq	0, cr0, [r0, #-4]
     1b8:	000003d5 	ldrdeq	r0, [r0], -r5
     1bc:	01892d05 	orreq	r2, r9, r5, lsl #26
     1c0:	ea0d0000 	b	3401c8 <startup-0x1fcbfe38>
     1c4:	05000001 	streq	r0, [r0, #-1]
     1c8:	0001892e 	andeq	r8, r1, lr, lsr #18
     1cc:	03a50d00 			; <UNDEFINED> instruction: 0x03a50d00
     1d0:	2f050000 	svccs	0x00050000
     1d4:	00000189 	andeq	r0, r0, r9, lsl #3
     1d8:	0003330d 	andeq	r3, r3, sp, lsl #6
     1dc:	89300500 	ldmdbhi	r0!, {r8, sl}
     1e0:	0d000001 	stceq	0, cr0, [r0, #-4]
     1e4:	00000148 	andeq	r0, r0, r8, asr #2
     1e8:	01893105 	orreq	r3, r9, r5, lsl #2
     1ec:	5b0b0000 	blpl	2c01f4 <startup-0x1fd3fe0c>
     1f0:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
     1f4:	0f000001 	svceq	0x00000001
     1f8:	0000019a 	muleq	r0, sl, r1
     1fc:	7a100077 	bvc	4003e0 <startup-0x1fbffc20>
     200:	06000001 	streq	r0, [r0], -r1
     204:	0001ee03 	andeq	lr, r1, r3, lsl #28
     208:	78030500 	stmdavc	r3, {r8, sl}
     20c:	11200035 			; <UNDEFINED> instruction: 0x11200035
     210:	000003c2 	andeq	r0, r0, r2, asr #7
     214:	01ee0307 	mvneq	r0, r7, lsl #6
     218:	03050000 	movweq	r0, #20480	; 0x5000
     21c:	200035f0 	strdcs	r3, [r0], -r0
     220:	00042111 	andeq	r2, r4, r1, lsl r1
     224:	ee030800 	cdp	8, 0, cr0, cr3, cr0, {0}
     228:	05000001 	streq	r0, [r0, #-1]
     22c:	00366803 	eorseq	r6, r6, r3, lsl #16
     230:	005b0b20 	subseq	r0, fp, r0, lsr #22
     234:	02420000 	subeq	r0, r2, #0
     238:	9a0e0000 	bls	380240 <startup-0x1fc7fdc0>
     23c:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     240:	63110003 	tstvs	r1, #3
     244:	09000004 	stmdbeq	r0, {r2}
     248:	00023103 	andeq	r3, r2, r3, lsl #2
     24c:	e0030500 	and	r0, r3, r0, lsl #10
     250:	11200036 			; <UNDEFINED> instruction: 0x11200036
     254:	00000312 	andeq	r0, r0, r2, lsl r3
     258:	0231030a 	eorseq	r0, r1, #671088640	; 0x28000000
     25c:	03050000 	movweq	r0, #20480	; 0x5000
     260:	20003ae0 	andcs	r3, r0, r0, ror #21
     264:	00022f11 	andeq	r2, r2, r1, lsl pc
     268:	31030b00 	tstcc	r3, r0, lsl #22
     26c:	05000002 	streq	r0, [r0, #-2]
     270:	003ee003 	eorseq	lr, lr, r3
     274:	04411120 	strbeq	r1, [r1], #-288	; 0xfffffee0
     278:	030c0000 	movweq	r0, #49152	; 0xc000
     27c:	00000231 	andeq	r0, r0, r1, lsr r2
     280:	42e00305 	rscmi	r0, r0, #335544320	; 0x14000000
     284:	18022000 	stmdane	r2, {sp}
     288:	03130e0d 	tsteq	r3, #13, 28	; 0xd0
     28c:	be030000 	cdplt	0, 0, cr0, cr3, cr0, {0}
     290:	0d000002 	stceq	0, cr0, [r0, #-8]
     294:	00004e0f 	andeq	r4, r0, pc, lsl #28
     298:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
     29c:	0d000001 	stceq	0, cr0, [r0, #-4]
     2a0:	00031310 	andeq	r1, r3, r0, lsl r3
     2a4:	df030400 	svcle	0x00030400
     2a8:	0d000001 	stceq	0, cr0, [r0, #-4]
     2ac:	00031311 	andeq	r1, r3, r1, lsl r3
     2b0:	7d030600 	stcvc	6, cr0, [r3, #-0]
     2b4:	0d000002 	stceq	0, cr0, [r0, #-8]
     2b8:	00004e12 	andeq	r4, r0, r2, lsl lr
     2bc:	a0030800 	andge	r0, r3, r0, lsl #16
     2c0:	0d000001 	stceq	0, cr0, [r0, #-4]
     2c4:	00004e13 	andeq	r4, r0, r3, lsl lr
     2c8:	0d030c00 	stceq	12, cr0, [r3, #-0]
     2cc:	0d000000 	stceq	0, cr0, [r0, #-0]
     2d0:	00005b14 	andeq	r5, r0, r4, lsl fp
     2d4:	fa031000 	blx	c42dc <startup-0x1ff3bd24>
     2d8:	0d000002 	stceq	0, cr0, [r0, #-8]
     2dc:	00005b15 	andeq	r5, r0, r5, lsl fp
     2e0:	a9031100 	stmdbge	r3, {r8, ip}
     2e4:	0d000002 	stceq	0, cr0, [r0, #-8]
     2e8:	00031316 	andeq	r1, r3, r6, lsl r3
     2ec:	5c031200 	sfmpl	f1, 4, [r3], {-0}
     2f0:	0d000004 	stceq	0, cr0, [r0, #-16]
     2f4:	00005b17 	andeq	r5, r0, r7, lsl fp
     2f8:	39031400 	stmdbcc	r3, {sl, ip}
     2fc:	0d000004 	stceq	0, cr0, [r0, #-16]
     300:	00005b18 	andeq	r5, r0, r8, lsl fp
     304:	14031500 	strne	r1, [r3], #-1280	; 0xfffffb00
     308:	0d000000 	stceq	0, cr0, [r0, #-0]
     30c:	00031319 	andeq	r1, r3, r9, lsl r3
     310:	04001600 	streq	r1, [r0], #-1536	; 0xfffffa00
     314:	02910702 	addseq	r0, r1, #524288	; 0x80000
     318:	a4060000 	strge	r0, [r6], #-0
     31c:	0d000002 	stceq	0, cr0, [r0, #-8]
     320:	0002861a 	andeq	r8, r2, sl, lsl r6
     324:	01691000 	cmneq	r9, r0
     328:	23010000 	movwcs	r0, #4096	; 0x1000
     32c:	0000009e 	muleq	r0, lr, r0
     330:	162c0305 	strtne	r0, [ip], -r5, lsl #6
     334:	c4102000 	ldrgt	r2, [r0], #-0
     338:	01000002 	tsteq	r0, r2
     33c:	00009e24 	andeq	r9, r0, r4, lsr #28
     340:	84030500 	strhi	r0, [r3], #-1280	; 0xfffffb00
     344:	10200016 	eorne	r0, r0, r6, lsl r0
     348:	0000024c 	andeq	r0, r0, ip, asr #4
     34c:	009e2501 	addseq	r2, lr, r1, lsl #10
     350:	03050000 	movweq	r0, #20480	; 0x5000
     354:	2000168c 	andcs	r1, r0, ip, lsl #13
     358:	00676212 	rsbeq	r6, r7, r2, lsl r2
     35c:	009e2601 	addseq	r2, lr, r1, lsl #12
     360:	03050000 	movweq	r0, #20480	; 0x5000
     364:	2000164c 	andcs	r1, r0, ip, asr #12
     368:	00013110 	andeq	r3, r1, r0, lsl r1
     36c:	9e280100 	suflse	f0, f0, f0
     370:	05000000 	streq	r0, [r0, #-0]
     374:	00163c03 	andseq	r3, r6, r3, lsl #24
     378:	013d1020 	teqeq	sp, r0, lsr #32
     37c:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
     380:	0000009e 	muleq	r0, lr, r0
     384:	16880305 	strne	r0, [r8], r5, lsl #6
     388:	df102000 	svcle	0x00102000
     38c:	01000002 	tsteq	r0, r2
     390:	00009e2a 	andeq	r9, r0, sl, lsr #28
     394:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
     398:	10200016 	eorne	r0, r0, r6, lsl r0
     39c:	00000375 	andeq	r0, r0, r5, ror r3
     3a0:	00622c01 	rsbeq	r2, r2, r1, lsl #24
     3a4:	03050000 	movweq	r0, #20480	; 0x5000
     3a8:	20001640 	andcs	r1, r0, r0, asr #12
     3ac:	00010a10 	andeq	r0, r1, r0, lsl sl
     3b0:	622d0100 	eorvs	r0, sp, #0, 2
     3b4:	05000000 	streq	r0, [r0, #-0]
     3b8:	00166c03 	andseq	r6, r6, r3, lsl #24
     3bc:	02661020 	rsbeq	r1, r6, #32
     3c0:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
     3c4:	00000062 	andeq	r0, r0, r2, rrx
     3c8:	16500305 	ldrbne	r0, [r0], -r5, lsl #6
     3cc:	4b102000 	blmi	4083d4 <startup-0x1fbf7c2c>
     3d0:	01000003 	tsteq	r0, r3
     3d4:	0000622f 	andeq	r6, r0, pc, lsr #4
     3d8:	90030500 	andls	r0, r3, r0, lsl #10
     3dc:	10200016 	eorne	r0, r0, r6, lsl r0
     3e0:	00000302 	andeq	r0, r0, r2, lsl #6
     3e4:	00623101 	rsbeq	r3, r2, r1, lsl #2
     3e8:	03050000 	movweq	r0, #20480	; 0x5000
     3ec:	20001630 	andcs	r1, r0, r0, lsr r6
     3f0:	0002eb10 	andeq	lr, r2, r0, lsl fp
     3f4:	62320100 	eorsvs	r0, r2, #0, 2
     3f8:	05000000 	streq	r0, [r0, #-0]
     3fc:	00167803 	andseq	r7, r6, r3, lsl #16
     400:	03231020 			; <UNDEFINED> instruction: 0x03231020
     404:	33010000 	movwcc	r0, #4096	; 0x1000
     408:	00000062 	andeq	r0, r0, r2, rrx
     40c:	16600305 	strbtne	r0, [r0], -r5, lsl #6
     410:	1b132000 	blne	4c8418 <startup-0x1fb37be8>
     414:	01000001 	tsteq	r0, r1
     418:	00013053 	andeq	r3, r1, r3, asr r0
     41c:	00018820 	andeq	r8, r1, r0, lsr #16
     420:	f39c0100 	vaddw.u16	q0, q6, d0
     424:	11000004 	tstne	r0, r4
     428:	0000036a 	andeq	r0, r0, sl, ror #6
     42c:	014c6101 	cmpeq	ip, r1, lsl #2
     430:	91020000 	mrsls	r0, (UNDEF: 2)
     434:	00001148 	andeq	r1, r0, r8, asr #2
     438:	62010000 	andvs	r0, r1, #0
     43c:	000000a4 	andeq	r0, r0, r4, lsr #1
     440:	7fbc9103 	svcvc	0x00bc9103
     444:	0002d111 	andeq	sp, r2, r1, lsl r1
     448:	f3630100 	vrhadd.u32	d16, d3, d0
     44c:	03000004 	movweq	r0, #4
     450:	117fb091 			; <UNDEFINED> instruction: 0x117fb091
     454:	0000020e 	andeq	r0, r0, lr, lsl #4
     458:	014c7001 	cmpeq	ip, r1
     45c:	91030000 	mrsls	r0, (UNDEF: 3)
     460:	50117f8c 	andspl	r7, r1, ip, lsl #31
     464:	01000004 	tsteq	r0, r4
     468:	0000a471 	andeq	sl, r0, r1, ror r4
     46c:	80910300 	addshi	r0, r1, r0, lsl #6
     470:	0414117f 	ldreq	r1, [r4], #-383	; 0xfffffe81
     474:	72010000 	andvc	r0, r1, #0
     478:	000004f3 	strdeq	r0, [r0], -r3
     47c:	7ef49103 	nrmvcs	f1, f3
     480:	00043311 	andeq	r3, r4, r1, lsl r3
     484:	4c790100 	ldfmie	f0, [r9], #-0
     488:	03000001 	movweq	r0, #1
     48c:	117ed091 			; <UNDEFINED> instruction: 0x117ed091
     490:	00000475 	andeq	r0, r0, r5, ror r4
     494:	014c7b01 	cmpeq	ip, r1, lsl #22
     498:	91030000 	mrsls	r0, (UNDEF: 3)
     49c:	dc147eac 	ldcle	14, cr7, [r4], {172}	; 0xac
     4a0:	01000000 	mrseq	r0, (UNDEF: 0)
     4a4:	00012ebf 			; <UNDEFINED> instruction: 0x00012ebf
     4a8:	01201400 			; <UNDEFINED> instruction: 0x01201400
     4ac:	c0010000 	andgt	r0, r1, r0
     4b0:	0000012e 	andeq	r0, r0, lr, lsr #2
     4b4:	00021015 	andeq	r1, r2, r5, lsl r0
     4b8:	00008420 	andeq	r8, r0, r0, lsr #8
     4bc:	0004d000 	andeq	sp, r4, r0
     4c0:	02851100 	addeq	r1, r5, #0, 2
     4c4:	97010000 	strls	r0, [r1, -r0]
     4c8:	0000012e 	andeq	r0, r0, lr, lsr #2
     4cc:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     4d0:	0004e116 	andeq	lr, r4, r6, lsl r1
     4d4:	02851400 	addeq	r1, r5, #0, 8
     4d8:	a5010000 	strge	r0, [r1, #-0]
     4dc:	0000012e 	andeq	r0, r0, lr, lsr #2
     4e0:	69181700 	ldmdbvs	r8, {r8, r9, sl, ip}
     4e4:	2ec70100 	polcss	f0, f7, f0
     4e8:	05000001 	streq	r0, [r0, #-1]
     4ec:	00162403 	andseq	r2, r6, r3, lsl #8
     4f0:	0b000020 	bleq	578 <startup-0x1ffffa88>
     4f4:	000000a4 	andeq	r0, r0, r4, lsr #1
     4f8:	00000503 	andeq	r0, r0, r3, lsl #10
     4fc:	00019a0f 	andeq	r9, r1, pc, lsl #20
     500:	13000000 	movwne	r0, #0
     504:	00000352 	andeq	r0, r0, r2, asr r3
     508:	00343501 	eorseq	r3, r4, r1, lsl #10
     50c:	00fc2000 	rscseq	r2, ip, r0
     510:	9c010000 	stcls	0, cr0, [r1], {-0}
     514:	0000057b 	andeq	r0, r0, fp, ror r5
     518:	00039611 	andeq	r9, r3, r1, lsl r6
     51c:	9e360100 	rsflss	f0, f6, f0
     520:	02000000 	andeq	r0, r0, #0
     524:	18117491 	ldmdane	r1, {r0, r4, r7, sl, ip, sp, lr}
     528:	01000002 	tsteq	r0, r2
     52c:	00009e3a 	andeq	r9, r0, sl, lsr lr
     530:	70910200 	addsvc	r0, r1, r0, lsl #4
     534:	0003ec11 	andeq	lr, r3, r1, lsl ip
     538:	9e3e0100 	rsflse	f0, f6, f0
     53c:	02000000 	andeq	r0, r0, #0
     540:	60116c91 	mulsvs	r1, r1, ip
     544:	01000001 	tsteq	r0, r1
     548:	00009e42 	andeq	r9, r0, r2, asr #28
     54c:	68910200 	ldmvs	r1, {r9}
     550:	00002011 	andeq	r2, r0, r1, lsl r0
     554:	9e460100 	dvflss	f0, f6, f0
     558:	02000000 	andeq	r0, r0, #0
     55c:	71116491 			; <UNDEFINED> instruction: 0x71116491
     560:	01000001 	tsteq	r0, r1
     564:	00009e4a 	andeq	r9, r0, sl, asr #28
     568:	60910200 	addsvs	r0, r1, r0, lsl #4
     56c:	00003b11 	andeq	r3, r0, r1, lsl fp
     570:	9e4e0100 	dvflse	f0, f6, f0
     574:	02000000 	andeq	r0, r0, #0
     578:	19005c91 	stmdbne	r0, {r0, r4, r7, sl, fp, ip, lr}
     57c:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
     580:	00100f01 	andseq	r0, r0, r1, lsl #30
     584:	00242000 	eoreq	r2, r4, r0
     588:	9c010000 	stcls	0, cr0, [r1], {-0}
     58c:	0003fc1a 	andeq	pc, r3, sl, lsl ip	; <UNPREDICTABLE>
     590:	00190100 	andseq	r0, r9, r0, lsl #2
     594:	0c200000 	stceq	0, cr0, [r0], #-0
     598:	01000000 	mrseq	r0, (UNDEF: 0)
     59c:	00c3009c 	smulleq	r0, r3, ip, r0
     5a0:	00040000 	andeq	r0, r4, r0
     5a4:	00000158 	andeq	r0, r0, r8, asr r1
     5a8:	00440104 	subeq	r0, r4, r4, lsl #2
     5ac:	7b0c0000 	blvc	3005b4 <startup-0x1fcffa4c>
     5b0:	b8000004 	stmdalt	r0, {r2}
     5b4:	28200002 	stmdacs	r0!, {r1}
     5b8:	80000000 	andhi	r0, r0, r0
     5bc:	02000001 	andeq	r0, r0, #1
     5c0:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
     5c4:	03000000 	movweq	r0, #0
     5c8:	0000019a 	muleq	r0, sl, r1
     5cc:	004e0702 	subeq	r0, lr, r2, lsl #14
     5d0:	03000000 	movweq	r0, #0
     5d4:	00000276 	andeq	r0, r0, r6, ror r2
     5d8:	004e0802 	subeq	r0, lr, r2, lsl #16
     5dc:	03040000 	movweq	r0, #16384	; 0x4000
     5e0:	000005e5 	andeq	r0, r0, r5, ror #11
     5e4:	00550902 	subseq	r0, r5, r2, lsl #18
     5e8:	00080000 	andeq	r0, r8, r0
     5ec:	97070404 	strls	r0, [r7, -r4, lsl #8]
     5f0:	05000002 	streq	r0, [r0, #-2]
     5f4:	00005b04 	andeq	r5, r0, r4, lsl #22
     5f8:	08010400 	stmdaeq	r1, {sl}
     5fc:	00000258 	andeq	r0, r0, r8, asr r2
     600:	0004b106 	andeq	fp, r4, r6, lsl #2
     604:	210a0200 	mrscs	r0, R10_fiq
     608:	07000000 	streq	r0, [r0, -r0]
     60c:	000004ac 	andeq	r0, r0, ip, lsr #9
     610:	02b80301 	adcseq	r0, r8, #67108864	; 0x4000000
     614:	00282000 	eoreq	r2, r8, r0
     618:	9c010000 	stcls	0, cr0, [r1], {-0}
     61c:	000000b9 	strheq	r0, [r0], -r9
     620:	01007308 	tsteq	r0, r8, lsl #6
     624:	0000b903 	andeq	fp, r0, r3, lsl #18
     628:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     62c:	0005e509 	andeq	lr, r5, r9, lsl #10
     630:	55030100 	strpl	r0, [r3, #-256]	; 0xffffff00
     634:	02000000 	andeq	r0, r0, #0
     638:	9a097091 	bls	25c884 <startup-0x1fda377c>
     63c:	01000001 	tsteq	r0, r1
     640:	0000bf03 	andeq	fp, r0, r3, lsl #30
     644:	6c910200 	lfmvs	f0, 4, [r1], {0}
     648:	00027609 	andeq	r7, r2, r9, lsl #12
     64c:	bf030100 	svclt	0x00030100
     650:	02000000 	andeq	r0, r0, #0
     654:	05006891 	streq	r6, [r0, #-2193]	; 0xfffff76f
     658:	00006204 	andeq	r6, r0, r4, lsl #4
     65c:	05040a00 	streq	r0, [r4, #-2560]	; 0xfffff600
     660:	00746e69 	rsbseq	r6, r4, r9, ror #28
     664:	00089f00 	andeq	r9, r8, r0, lsl #30
     668:	ea000400 	b	1670 <startup-0x1fffe990>
     66c:	04000001 	streq	r0, [r0], #-1
     670:	00004401 	andeq	r4, r0, r1, lsl #8
     674:	05800c00 	streq	r0, [r0, #3072]	; 0xc00
     678:	02e00000 	rsceq	r0, r0, #0
     67c:	0de42000 	stcleq	0, cr2, [r4]
     680:	01ee0000 	mvneq	r0, r0
     684:	0c020000 	stceq	0, cr0, [r2], {-0}
     688:	004e0502 	subeq	r0, lr, r2, lsl #10
     68c:	9a030000 	bls	c0694 <startup-0x1ff3f96c>
     690:	02000001 	andeq	r0, r0, #1
     694:	00004e07 	andeq	r4, r0, r7, lsl #28
     698:	76030000 	strvc	r0, [r3], -r0
     69c:	02000002 	andeq	r0, r0, #2
     6a0:	00004e08 	andeq	r4, r0, r8, lsl #28
     6a4:	e5030400 	str	r0, [r3, #-1024]	; 0xfffffc00
     6a8:	02000005 	andeq	r0, r0, #5
     6ac:	00005509 	andeq	r5, r0, r9, lsl #10
     6b0:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
     6b4:	02970704 	addseq	r0, r7, #4, 14	; 0x100000
     6b8:	04050000 	streq	r0, [r5], #-0
     6bc:	0000005b 	andeq	r0, r0, fp, asr r0
     6c0:	58080104 	stmdapl	r8, {r2, r8}
     6c4:	06000002 	streq	r0, [r0], -r2
     6c8:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
     6cc:	00210a02 	eoreq	r0, r1, r2, lsl #20
     6d0:	45070000 	strmi	r0, [r7, #-0]
     6d4:	0c000002 	stceq	0, cr0, [r0], {2}
     6d8:	009e0603 	addseq	r0, lr, r3, lsl #12
     6dc:	81030000 	mrshi	r0, (UNDEF: 3)
     6e0:	03000003 	movweq	r0, #3
     6e4:	00009e07 	andeq	r9, r0, r7, lsl #28
     6e8:	8c030000 	stchi	0, cr0, [r3], {-0}
     6ec:	03000003 	movweq	r0, #3
     6f0:	00009e08 	andeq	r9, r0, r8, lsl #28
     6f4:	41030400 	tstmi	r3, r0, lsl #8
     6f8:	03000002 	movweq	r0, #2
     6fc:	00009e09 	andeq	r9, r0, r9, lsl #28
     700:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
     704:	00006204 	andeq	r6, r0, r4, lsl #4
     708:	09c70600 	stmibeq	r7, {r9, sl}^
     70c:	0a030000 	beq	c0714 <startup-0x1ff3f8ec>
     710:	0000006d 	andeq	r0, r0, sp, rrx
     714:	00012507 	andeq	r2, r1, r7, lsl #10
     718:	06042400 	streq	r2, [r4], -r0, lsl #8
     71c:	00000128 	andeq	r0, r0, r8, lsr #2
     720:	00044903 	andeq	r4, r4, r3, lsl #18
     724:	28070400 	stmdacs	r7, {sl}
     728:	00000001 	andeq	r0, r0, r1
     72c:	0000dc03 	andeq	sp, r0, r3, lsl #24
     730:	2e080400 	cfcpyscs	mvf0, mvf8
     734:	04000001 	streq	r0, [r0], #-1
     738:	00020903 	andeq	r0, r2, r3, lsl #18
     73c:	2e090400 	cfcpyscs	mvf0, mvf9
     740:	08000001 	stmdaeq	r0, {r0}
     744:	00020203 	andeq	r0, r2, r3, lsl #4
     748:	460c0400 	strmi	r0, [ip], -r0, lsl #8
     74c:	0c000001 	stceq	0, cr0, [r0], {1}
     750:	00022803 	andeq	r2, r2, r3, lsl #16
     754:	460d0400 	strmi	r0, [sp], -r0, lsl #8
     758:	10000001 	andne	r0, r0, r1
     75c:	0000ea03 	andeq	lr, r0, r3, lsl #20
     760:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
     764:	14000001 	strne	r0, [r0], #-1
     768:	00034203 	andeq	r4, r3, r3, lsl #4
     76c:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
     770:	18000001 	stmdane	r0, {r0}
     774:	00040403 	andeq	r0, r4, r3, lsl #8
     778:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
     77c:	1c000001 	stcne	0, cr0, [r0], {1}
     780:	00002903 	andeq	r2, r0, r3, lsl #18
     784:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
     788:	20000001 	andcs	r0, r0, r1
     78c:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
     790:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     794:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     798:	40090074 	andmi	r0, r9, r4, ror r0
     79c:	0a000001 	beq	7a8 <startup-0x1ffff858>
     7a0:	00000140 	andeq	r0, r0, r0, asr #2
     7a4:	af040500 	svcge	0x00040500
     7a8:	05000000 	streq	r0, [r0, #-0]
     7ac:	00013504 	andeq	r3, r1, r4, lsl #10
     7b0:	01260600 			; <UNDEFINED> instruction: 0x01260600
     7b4:	15040000 	strne	r0, [r4, #-0]
     7b8:	000000af 	andeq	r0, r0, pc, lsr #1
     7bc:	0001620b 	andeq	r6, r1, fp, lsl #4
     7c0:	00016200 	andeq	r6, r1, r0, lsl #4
     7c4:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
     7c8:	00014c04 	andeq	r4, r1, r4, lsl #24
     7cc:	035e0d00 	cmpeq	lr, #0, 26
     7d0:	1a040000 	bne	1007d8 <startup-0x1feff828>
     7d4:	00000157 	andeq	r0, r0, r7, asr r1
     7d8:	00018d0d 	andeq	r8, r1, sp, lsl #26
     7dc:	2e1b0400 	cfmulscs	mvf0, mvf11, mvf0
     7e0:	06000001 	streq	r0, [r0], -r1
     7e4:	00000158 	andeq	r0, r0, r8, asr r1
     7e8:	005b2405 	subseq	r2, fp, r5, lsl #8
     7ec:	7e0b0000 	cdpvc	0, 0, cr0, cr11, cr0, {0}
     7f0:	9a000001 	bls	7fc <startup-0x1ffff804>
     7f4:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     7f8:	0000019a 	muleq	r0, sl, r1
     7fc:	040003ff 	streq	r0, [r0], #-1023	; 0xfffffc01
     800:	00e10704 	rsceq	r0, r1, r4, lsl #14
     804:	2b0d0000 	blcs	34080c <startup-0x1fcbf7f4>
     808:	05000005 	streq	r0, [r0, #-5]
     80c:	0001892b 	andeq	r8, r1, fp, lsr #18
     810:	00f80d00 	rscseq	r0, r8, r0, lsl #26
     814:	2c050000 	stccs	0, cr0, [r5], {-0}
     818:	00000189 	andeq	r0, r0, r9, lsl #3
     81c:	0003d50d 	andeq	sp, r3, sp, lsl #10
     820:	892d0500 	pushhi	{r8, sl}
     824:	0d000001 	stceq	0, cr0, [r0, #-4]
     828:	000001ea 	andeq	r0, r0, sl, ror #3
     82c:	01892e05 	orreq	r2, r9, r5, lsl #28
     830:	a50d0000 	strge	r0, [sp, #-0]
     834:	05000003 	streq	r0, [r0, #-3]
     838:	0001892f 	andeq	r8, r1, pc, lsr #18
     83c:	03330d00 	teqeq	r3, #0, 26
     840:	30050000 	andcc	r0, r5, r0
     844:	00000189 	andeq	r0, r0, r9, lsl #3
     848:	0001480d 	andeq	r4, r1, sp, lsl #16
     84c:	89310500 	ldmdbhi	r1!, {r8, sl}
     850:	0f000001 	svceq	0x00000001
     854:	000001ac 	andeq	r0, r0, ip, lsr #3
     858:	03052b01 	movweq	r2, #23297	; 0x5b01
     85c:	2000269c 	mulcs	r0, ip, r6
     860:	0001b70f 	andeq	fp, r1, pc, lsl #14
     864:	052c0100 	streq	r0, [ip, #-256]!	; 0xffffff00
     868:	001a9c03 	andseq	r9, sl, r3, lsl #24
     86c:	01c20f20 	biceq	r0, r2, r0, lsr #30
     870:	2d010000 	stccs	0, cr0, [r1, #-0]
     874:	229c0305 	addscs	r0, ip, #335544320	; 0x14000000
     878:	cd0f2000 	stcgt	0, cr2, [pc, #-0]	; 880 <startup-0x1ffff780>
     87c:	01000001 	tsteq	r0, r1
     880:	9c03052e 	cfstr32ls	mvfx0, [r3], {46}	; 0x2e
     884:	0f20002a 	svceq	0x0020002a
     888:	000001a1 	andeq	r0, r0, r1, lsr #3
     88c:	03052f01 	movweq	r2, #24321	; 0x5f01
     890:	20001e9c 	mulcs	r0, ip, lr
     894:	0001d810 	andeq	sp, r1, r0, lsl r8
     898:	03050100 	movweq	r0, #20736	; 0x5100
     89c:	2000169c 	mulcs	r0, ip, r6
     8a0:	0001e310 	andeq	lr, r1, r0, lsl r3
     8a4:	03050100 	movweq	r0, #20736	; 0x5100
     8a8:	20002e9c 	mulcs	r0, ip, lr
     8ac:	00054f11 	andeq	r4, r5, r1, lsl pc
     8b0:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
     8b4:	2000105a 	andcs	r1, r0, sl, asr r0
     8b8:	0000006a 	andeq	r0, r0, sl, rrx
     8bc:	026d9c01 	rsbeq	r9, sp, #256	; 0x100
     8c0:	40120000 	andsmi	r0, r2, r0
     8c4:	01000006 	tsteq	r0, r6
     8c8:	012e01a4 	smulwbeq	lr, r4, r1
     8cc:	91020000 	mrsls	r0, (UNDEF: 2)
     8d0:	f2110074 	vqadd.s16	q0, <illegal reg q0.5>, q10
     8d4:	01000004 	tsteq	r0, r4
     8d8:	0fd8019c 	svceq	0x00d8019c
     8dc:	00822000 	addeq	r2, r2, r0
     8e0:	9c010000 	stcls	0, cr0, [r1], {-0}
     8e4:	000002a2 	andeq	r0, r0, r2, lsr #5
     8e8:	00053612 	andeq	r3, r5, r2, lsl r6
     8ec:	019c0100 	orrseq	r0, ip, r0, lsl #2
     8f0:	00000162 	andeq	r0, r0, r2, ror #2
     8f4:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
     8f8:	000000f2 	strdeq	r0, [r0], -r2
     8fc:	2e019d01 	cdpcs	13, 0, cr9, cr1, cr1, {0}
     900:	02000001 	andeq	r0, r0, #1
     904:	14007491 	strne	r7, [r0], #-1169	; 0xfffffb6f
     908:	000004ca 	andeq	r0, r0, sl, asr #9
     90c:	d0019201 	andle	r9, r1, r1, lsl #4
     910:	0820000e 	stmdaeq	r0!, {r1, r2, r3}
     914:	01000001 	tsteq	r0, r1
     918:	0002c69c 	muleq	r2, ip, r6
     91c:	00691500 	rsbeq	r1, r9, r0, lsl #10
     920:	2e019301 	cdpcs	3, 0, cr9, cr1, cr1, {0}
     924:	02000001 	andeq	r0, r0, #1
     928:	11007491 			; <UNDEFINED> instruction: 0x11007491
     92c:	000005b3 			; <UNDEFINED> instruction: 0x000005b3
     930:	9e016c01 	cdpls	12, 0, cr6, cr1, cr1, {0}
     934:	3220000d 	eorcc	r0, r0, #13
     938:	01000001 	tsteq	r0, r1
     93c:	00033a9c 	muleq	r3, ip, sl
     940:	00781500 	rsbseq	r1, r8, r0, lsl #10
     944:	2e016d01 	cdpcs	13, 0, cr6, cr1, cr1, {0}
     948:	02000001 	andeq	r0, r0, #1
     94c:	79156c91 	ldmdbvc	r5, {r0, r4, r7, sl, fp, sp, lr}
     950:	016e0100 	cmneq	lr, r0, lsl #2
     954:	0000012e 	andeq	r0, r0, lr, lsr #2
     958:	13689102 	cmnne	r8, #-2147483648	; 0x80000000
     95c:	0000019a 	muleq	r0, sl, r1
     960:	2e016f01 	cdpcs	15, 0, cr6, cr1, cr1, {0}
     964:	02000001 	andeq	r0, r0, #1
     968:	76136491 			; <UNDEFINED> instruction: 0x76136491
     96c:	01000002 	tsteq	r0, r2
     970:	012e0170 			; <UNDEFINED> instruction: 0x012e0170
     974:	91020000 	mrsls	r0, (UNDEF: 2)
     978:	32781560 	rsbscc	r1, r8, #96, 10	; 0x18000000
     97c:	01720100 	cmneq	r2, r0, lsl #2
     980:	0000012e 	andeq	r0, r0, lr, lsr #2
     984:	165c9102 	ldrbne	r9, [ip], -r2, lsl #2
     988:	76010069 	strvc	r0, [r1], -r9, rrx
     98c:	00012e01 	andeq	r2, r1, r1, lsl #28
     990:	006b1500 	rsbeq	r1, fp, r0, lsl #10
     994:	2e017701 	cdpcs	7, 0, cr7, cr1, cr1, {0}
     998:	02000001 	andeq	r0, r0, #1
     99c:	11005891 			; <UNDEFINED> instruction: 0x11005891
     9a0:	00000674 	andeq	r0, r0, r4, ror r6
     9a4:	4c016101 	stfmis	f6, [r1], {1}
     9a8:	5220000d 	eorpl	r0, r0, #13
     9ac:	01000000 	mrseq	r0, (UNDEF: 0)
     9b0:	0003a39c 	muleq	r3, ip, r3
     9b4:	00781700 	rsbseq	r1, r8, r0, lsl #14
     9b8:	2e016101 	adfcss	f6, f1, f1
     9bc:	02000001 	andeq	r0, r0, #1
     9c0:	79176c91 	ldmdbvc	r7, {r0, r4, r7, sl, fp, sp, lr}
     9c4:	01610100 	cmneq	r1, r0, lsl #2
     9c8:	0000012e 	andeq	r0, r0, lr, lsr #2
     9cc:	12689102 	rsbne	r9, r8, #-2147483648	; 0x80000000
     9d0:	0000019a 	muleq	r0, sl, r1
     9d4:	2e016101 	adfcss	f6, f1, f1
     9d8:	02000001 	andeq	r0, r0, #1
     9dc:	76126491 			; <UNDEFINED> instruction: 0x76126491
     9e0:	01000002 	tsteq	r0, r2
     9e4:	012e0161 			; <UNDEFINED> instruction: 0x012e0161
     9e8:	91020000 	mrsls	r0, (UNDEF: 2)
     9ec:	00691560 	rsbeq	r1, r9, r0, ror #10
     9f0:	2e016201 	cdpcs	2, 0, cr6, cr1, cr1, {0}
     9f4:	02000001 	andeq	r0, r0, #1
     9f8:	6a157491 	bvs	55dc44 <startup-0x1faa23bc>
     9fc:	01630100 	cmneq	r3, r0, lsl #2
     a00:	0000012e 	andeq	r0, r0, lr, lsr #2
     a04:	00709102 	rsbseq	r9, r0, r2, lsl #2
     a08:	0005f011 	andeq	pc, r5, r1, lsl r0	; <UNPREDICTABLE>
     a0c:	01570100 	cmpeq	r7, r0, lsl #2
     a10:	20000cfa 	strdcs	r0, [r0], -sl
     a14:	00000052 	andeq	r0, r0, r2, asr r0
     a18:	040c9c01 	streq	r9, [ip], #-3073	; 0xfffff3ff
     a1c:	78170000 	ldmdavc	r7, {}	; <UNPREDICTABLE>
     a20:	01570100 	cmpeq	r7, r0, lsl #2
     a24:	0000012e 	andeq	r0, r0, lr, lsr #2
     a28:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
     a2c:	57010079 	smlsdxpl	r1, r9, r0, r0
     a30:	00012e01 	andeq	r2, r1, r1, lsl #28
     a34:	68910200 	ldmvs	r1, {r9}
     a38:	00019a12 	andeq	r9, r1, r2, lsl sl
     a3c:	01570100 	cmpeq	r7, r0, lsl #2
     a40:	0000012e 	andeq	r0, r0, lr, lsr #2
     a44:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
     a48:	00000276 	andeq	r0, r0, r6, ror r2
     a4c:	2e015701 	cdpcs	7, 0, cr5, cr1, cr1, {0}
     a50:	02000001 	andeq	r0, r0, #1
     a54:	69156091 	ldmdbvs	r5, {r0, r4, r7, sp, lr}
     a58:	01580100 	cmpeq	r8, r0, lsl #2
     a5c:	0000012e 	andeq	r0, r0, lr, lsr #2
     a60:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
     a64:	5901006a 	stmdbpl	r1, {r1, r3, r5, r6}
     a68:	00012e01 	andeq	r2, r1, r1, lsl #28
     a6c:	70910200 	addsvc	r0, r1, r0, lsl #4
     a70:	055a1100 	ldrbeq	r1, [sl, #-256]	; 0xffffff00
     a74:	45010000 	strmi	r0, [r1, #-0]
     a78:	000c4201 	andeq	r4, ip, r1, lsl #4
     a7c:	0000b820 	andeq	fp, r0, r0, lsr #16
     a80:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
     a84:	17000004 	strne	r0, [r0, -r4]
     a88:	45010073 	strmi	r0, [r1, #-115]	; 0xffffff8d
     a8c:	00009e01 	andeq	r9, r0, r1, lsl #28
     a90:	5c910200 	lfmpl	f0, 4, [r1], {0}
     a94:	01007817 	tsteq	r0, r7, lsl r8
     a98:	012e0145 			; <UNDEFINED> instruction: 0x012e0145
     a9c:	91020000 	mrsls	r0, (UNDEF: 2)
     aa0:	00791758 	rsbseq	r1, r9, r8, asr r7
     aa4:	2e014501 	cfsh32cs	mvfx4, mvfx1, #1
     aa8:	02000001 	andeq	r0, r0, #1
     aac:	73175491 	tstvc	r7, #-1862270976	; 0x91000000
     ab0:	01007465 	tsteq	r0, r5, ror #8
     ab4:	012e0145 			; <UNDEFINED> instruction: 0x012e0145
     ab8:	91020000 	mrsls	r0, (UNDEF: 2)
     abc:	05ea1250 	strbeq	r1, [sl, #592]!	; 0x250
     ac0:	45010000 	strmi	r0, [r1, #-0]
     ac4:	00012e01 	andeq	r2, r1, r1, lsl #28
     ac8:	00910200 	addseq	r0, r1, r0, lsl #4
     acc:	01006915 	tsteq	r0, r5, lsl r9
     ad0:	012e0146 			; <UNDEFINED> instruction: 0x012e0146
     ad4:	91020000 	mrsls	r0, (UNDEF: 2)
     ad8:	006a1574 	rsbeq	r1, sl, r4, ror r5
     adc:	2e014601 	cfmadd32cs	mvax0, mvfx4, mvfx1, mvfx1
     ae0:	02000001 	andeq	r0, r0, #1
     ae4:	6b157091 	blvs	55cd30 <startup-0x1faa32d0>
     ae8:	01460100 	mrseq	r0, (UNDEF: 86)
     aec:	0000012e 	andeq	r0, r0, lr, lsr #2
     af0:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
     af4:	00000665 	andeq	r0, r0, r5, ror #12
     af8:	2e014601 	cfmadd32cs	mvax0, mvfx4, mvfx1, mvfx1
     afc:	02000001 	andeq	r0, r0, #1
     b00:	7a186891 	bvc	61ad4c <startup-0x1f9e52b4>
     b04:	5a20000c 	bpl	800b3c <startup-0x1f7ff4c4>
     b08:	13000000 	movwne	r0, #0
     b0c:	00000660 	andeq	r0, r0, r0, ror #12
     b10:	5b014d01 	blpl	53f1c <startup-0x1ffac0e4>
     b14:	02000000 	andeq	r0, r0, #0
     b18:	00006791 	muleq	r0, r1, r7
     b1c:	00053b11 	andeq	r3, r5, r1, lsl fp
     b20:	01300100 	teqeq	r0, r0, lsl #2
     b24:	20000b6c 	andcs	r0, r0, ip, ror #22
     b28:	000000d6 	ldrdeq	r0, [r0], -r6
     b2c:	05209c01 	streq	r9, [r0, #-3073]!	; 0xfffff3ff
     b30:	de120000 	cdple	0, 1, cr0, cr2, cr0, {0}
     b34:	01000004 	tsteq	r0, r4
     b38:	05200130 	streq	r0, [r0, #-304]!	; 0xfffffed0
     b3c:	91020000 	mrsls	r0, (UNDEF: 2)
     b40:	00691564 	rsbeq	r1, r9, r4, ror #10
     b44:	7e013101 	adfvcs	f3, f1, f1
     b48:	02000001 	andeq	r0, r0, #1
     b4c:	6a157791 	bvs	55e998 <startup-0x1faa1668>
     b50:	01310100 	teqeq	r1, r0, lsl #2
     b54:	0000017e 	andeq	r0, r0, lr, ror r1
     b58:	13769102 	cmnne	r6, #-2147483648	; 0x80000000
     b5c:	00000690 	muleq	r0, r0, r6
     b60:	7e013101 	adfvcs	f3, f1, f1
     b64:	02000001 	andeq	r0, r0, #1
     b68:	63156f91 	tstvs	r5, #580	; 0x244
     b6c:	01310100 	teqeq	r1, r0, lsl #2
     b70:	0000017e 	andeq	r0, r0, lr, ror r1
     b74:	15759102 	ldrbne	r9, [r5, #-258]!	; 0xfffffefe
     b78:	3201006b 	andcc	r0, r1, #107	; 0x6b
     b7c:	00004e01 	andeq	r4, r0, r1, lsl #28
     b80:	70910200 	addsvc	r0, r1, r0, lsl #4
     b84:	7e040500 	cfsh32vc	mvfx0, mvfx4, #0
     b88:	11000001 	tstne	r0, r1
     b8c:	000004eb 	andeq	r0, r0, fp, ror #9
     b90:	cc010801 	stcgt	8, cr0, [r1], {1}
     b94:	a0200009 	eorge	r0, r0, r9
     b98:	01000001 	tsteq	r0, r1
     b9c:	0005a09c 	muleq	r5, ip, r0
     ba0:	00781700 	rsbseq	r1, r8, r0, lsl #14
     ba4:	2e010801 	cdpcs	8, 0, cr0, cr1, cr1, {0}
     ba8:	02000001 	andeq	r0, r0, #1
     bac:	79176491 	ldmdbvc	r7, {r0, r4, r7, sl, sp, lr}
     bb0:	01080100 	mrseq	r0, (UNDEF: 24)
     bb4:	0000012e 	andeq	r0, r0, lr, lsr #2
     bb8:	17609102 	strbne	r9, [r0, -r2, lsl #2]!
     bbc:	00746573 	rsbseq	r6, r4, r3, ror r5
     bc0:	2e010801 	cdpcs	8, 0, cr0, cr1, cr1, {0}
     bc4:	02000001 	andeq	r0, r0, #1
     bc8:	3b135c91 	blcc	4d7e14 <startup-0x1fb281ec>
     bcc:	01000006 	tsteq	r0, r6
     bd0:	017e0109 	cmneq	lr, r9, lsl #2
     bd4:	91020000 	mrsls	r0, (UNDEF: 2)
     bd8:	00631577 	rsbeq	r1, r3, r7, ror r5
     bdc:	7e010901 	vmlavc.f16	s0, s2, s2	; <UNPREDICTABLE>
     be0:	02000001 	andeq	r0, r0, #1
     be4:	90136f91 	mulsls	r3, r1, pc	; <UNPREDICTABLE>
     be8:	01000006 	tsteq	r0, r6
     bec:	017e0109 	cmneq	lr, r9, lsl #2
     bf0:	91020000 	mrsls	r0, (UNDEF: 2)
     bf4:	06831376 			; <UNDEFINED> instruction: 0x06831376
     bf8:	0a010000 	beq	40c00 <startup-0x1ffbf400>
     bfc:	00012e01 	andeq	r2, r1, r1, lsl #28
     c00:	70910200 	addsvc	r0, r1, r0, lsl #4
     c04:	06351900 	ldrteq	r1, [r5], -r0, lsl #18
     c08:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
     c0c:	2000084c 	andcs	r0, r0, ip, asr #16
     c10:	00000180 	andeq	r0, r0, r0, lsl #3
     c14:	06069c01 	streq	r9, [r6], -r1, lsl #24
     c18:	781a0000 	ldmdavc	sl, {}	; <UNPREDICTABLE>
     c1c:	2ede0100 	cdpcs	1, 13, cr0, cr14, cr0, {0}
     c20:	02000001 	andeq	r0, r0, #1
     c24:	791a6c91 	ldmdbvc	sl, {r0, r4, r7, sl, fp, sp, lr}
     c28:	2ede0100 	cdpcs	1, 13, cr0, cr14, cr0, {0}
     c2c:	02000001 	andeq	r0, r0, #1
     c30:	731a6891 	tstvc	sl, #9502720	; 0x910000
     c34:	01007465 	tsteq	r0, r5, ror #8
     c38:	00012ede 	ldrdeq	r2, [r1], -lr
     c3c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     c40:	0005ea1b 	andeq	lr, r5, fp, lsl sl
     c44:	2ede0100 	cdpcs	1, 13, cr0, cr14, cr0, {0}
     c48:	02000001 	andeq	r0, r0, #1
     c4c:	3b1c6091 	blcc	718e98 <startup-0x1f8e7168>
     c50:	01000006 	tsteq	r0, r6
     c54:	00017edf 	ldrdeq	r7, [r1], -pc	; <UNPREDICTABLE>
     c58:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     c5c:	0006831c 	andeq	r8, r6, ip, lsl r3
     c60:	2ee00100 	cdpcs	1, 14, cr0, cr0, cr0, {0}
     c64:	02000001 	andeq	r0, r0, #1
     c68:	1d007091 	stcne	0, cr7, [r0, #-580]	; 0xfffffdbc
     c6c:	000006e2 	andeq	r0, r0, r2, ror #13
     c70:	07e6d101 	strbeq	sp, [r6, r1, lsl #2]!
     c74:	00662000 	rsbeq	r2, r6, r0
     c78:	9c010000 	stcls	0, cr0, [r1], {-0}
     c7c:	00000642 	andeq	r0, r0, r2, asr #12
     c80:	0004b81c 	andeq	fp, r4, ip, lsl r8
     c84:	7ed20100 	cdpvc	1, 13, cr0, cr2, cr0, {0}
     c88:	02000001 	andeq	r0, r0, #1
     c8c:	f4187791 			; <UNDEFINED> instruction: 0xf4187791
     c90:	3e200007 	cdpcc	0, 2, cr0, cr0, cr7, {0}
     c94:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     c98:	00646461 	rsbeq	r6, r4, r1, ror #8
     c9c:	017ed601 	cmneq	lr, r1, lsl #12
     ca0:	91020000 	mrsls	r0, (UNDEF: 2)
     ca4:	1f000076 	svcne	0x00000076
     ca8:	000006c3 	andeq	r0, r0, r3, asr #13
     cac:	0778bd01 	ldrbeq	fp, [r8, -r1, lsl #26]!
     cb0:	006e2000 	rsbeq	r2, lr, r0
     cb4:	9c010000 	stcls	0, cr0, [r1], {-0}
     cb8:	00064d1d 	andeq	r4, r6, sp, lsl sp
     cbc:	32b50100 	adcscc	r0, r5, #0, 2
     cc0:	46200007 	strtmi	r0, [r0], -r7
     cc4:	01000000 	mrseq	r0, (UNDEF: 0)
     cc8:	0006859c 	muleq	r6, ip, r5
     ccc:	051d1b00 	ldreq	r1, [sp, #-2816]	; 0xfffff500
     cd0:	b5010000 	strlt	r0, [r1, #-0]
     cd4:	0000017e 	andeq	r0, r0, lr, ror r1
     cd8:	1b779102 	blne	1de50e8 <startup-0x1e21af18>
     cdc:	00000690 	muleq	r0, r0, r6
     ce0:	017eb501 	cmneq	lr, r1, lsl #10
     ce4:	91020000 	mrsls	r0, (UNDEF: 2)
     ce8:	0f1d0076 	svceq	0x001d0076
     cec:	01000005 	tsteq	r0, r5
     cf0:	0006ecae 	andeq	lr, r6, lr, lsr #25
     cf4:	00004620 	andeq	r4, r0, r0, lsr #12
     cf8:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
     cfc:	1b000006 	blne	d1c <startup-0x1ffff2e4>
     d00:	0000051d 	andeq	r0, r0, sp, lsl r5
     d04:	017eae01 	cmneq	lr, r1, lsl #28
     d08:	91020000 	mrsls	r0, (UNDEF: 2)
     d0c:	06901b77 			; <UNDEFINED> instruction: 0x06901b77
     d10:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
     d14:	0000017e 	andeq	r0, r0, lr, ror r1
     d18:	00769102 	rsbseq	r9, r6, r2, lsl #2
     d1c:	0005721d 	andeq	r7, r5, sp, lsl r2
     d20:	6e990100 	fmlvse	f0, f1, f0
     d24:	7e200006 	cdpvc	0, 2, cr0, cr0, cr6, {0}
     d28:	01000000 	mrseq	r0, (UNDEF: 0)
     d2c:	0006e99c 	muleq	r6, ip, r9
     d30:	04e51b00 	strbteq	r1, [r5], #2816	; 0xb00
     d34:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
     d38:	0000017e 	andeq	r0, r0, lr, ror r1
     d3c:	1b779102 	blne	1de514c <startup-0x1e21aeb4>
     d40:	00000690 	muleq	r0, r0, r6
     d44:	017e9901 	cmneq	lr, r1, lsl #18
     d48:	91020000 	mrsls	r0, (UNDEF: 2)
     d4c:	d8200076 	stmdale	r0!, {r1, r2, r4, r5, r6}
     d50:	01000005 	tsteq	r0, r5
     d54:	00012e94 	muleq	r1, r4, lr
     d58:	00064400 	andeq	r4, r6, r0, lsl #8
     d5c:	00002a20 	andeq	r2, r0, r0, lsr #20
     d60:	119c0100 	orrsne	r0, ip, r0, lsl #2
     d64:	1b000007 	blne	d88 <startup-0x1ffff278>
     d68:	00000690 	muleq	r0, r0, r6
     d6c:	017e9401 	cmneq	lr, r1, lsl #8
     d70:	91020000 	mrsls	r0, (UNDEF: 2)
     d74:	bd210077 	stclt	0, cr0, [r1, #-476]!	; 0xfffffe24
     d78:	01000004 	tsteq	r0, r4
     d7c:	00017e7b 	andeq	r7, r1, fp, ror lr
     d80:	0005b000 	andeq	fp, r5, r0
     d84:	00009420 	andeq	r9, r0, r0, lsr #8
     d88:	469c0100 	ldrmi	r0, [ip], r0, lsl #2
     d8c:	1b000007 	blne	db0 <startup-0x1ffff250>
     d90:	00000690 	muleq	r0, r0, r6
     d94:	017e7b01 	cmneq	lr, r1, lsl #22
     d98:	91020000 	mrsls	r0, (UNDEF: 2)
     d9c:	76721e6f 	ldrbtvc	r1, [r2], -pc, ror #28
     da0:	5b840100 	blpl	fe1011a8 <firstTime.4076+0xde0fca44>
     da4:	02000000 	andeq	r0, r0, #0
     da8:	1d007791 	stcne	7, cr7, [r0, #-580]	; 0xfffffdbc
     dac:	0000069b 	muleq	r0, fp, r6
     db0:	05426501 	strbeq	r6, [r2, #-1281]	; 0xfffffaff
     db4:	006e2000 	rsbeq	r2, lr, r0
     db8:	9c010000 	stcls	0, cr0, [r1], {-0}
     dbc:	00000768 	andeq	r0, r0, r8, ror #14
     dc0:	0100631e 	tsteq	r0, lr, lsl r3
     dc4:	00017e66 	andeq	r7, r1, r6, ror #28
     dc8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     dcc:	06891d00 	streq	r1, [r9], r0, lsl #26
     dd0:	50010000 	andpl	r0, r1, r0
     dd4:	200004dc 	ldrdcs	r0, [r0], -ip
     dd8:	00000066 	andeq	r0, r0, r6, rrx
     ddc:	078c9c01 	streq	r9, [ip, r1, lsl #24]
     de0:	901b0000 	andsls	r0, fp, r0
     de4:	01000006 	tsteq	r0, r6
     de8:	00017e50 	andeq	r7, r1, r0, asr lr
     dec:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     df0:	05c12200 	strbeq	r2, [r1, #512]	; 0x200
     df4:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
     df8:	20000484 	andcs	r0, r0, r4, lsl #9
     dfc:	00000058 	andeq	r0, r0, r8, asr r0
     e00:	07ba9c01 	ldreq	r9, [sl, r1, lsl #24]!
     e04:	781a0000 	ldmdavc	sl, {}	; <UNPREDICTABLE>
     e08:	7e490100 	dvfvce	f0, f1, f0
     e0c:	02000001 	andeq	r0, r0, #1
     e10:	631e6f91 	tstvs	lr, #580	; 0x244
     e14:	7e4a0100 	dvfvce	f0, f2, f0
     e18:	02000001 	andeq	r0, r0, #1
     e1c:	22007791 	andcs	r7, r0, #38010880	; 0x2440000
     e20:	000005fe 	strdeq	r0, [r0], -lr
     e24:	04344101 	ldrteq	r4, [r4], #-257	; 0xfffffeff
     e28:	00502000 	subseq	r2, r0, r0
     e2c:	9c010000 	stcls	0, cr0, [r1], {-0}
     e30:	000007e8 	andeq	r0, r0, r8, ror #15
     e34:	0100781a 	tsteq	r0, sl, lsl r8
     e38:	00017e41 	andeq	r7, r1, r1, asr #28
     e3c:	6f910200 	svcvs	0x00910200
     e40:	0100631e 	tsteq	r0, lr, lsl r3
     e44:	00017e42 	andeq	r7, r1, r2, asr #28
     e48:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     e4c:	061f1f00 	ldreq	r1, [pc], -r0, lsl #30
     e50:	3a010000 	bcc	40e58 <startup-0x1ffbf1a8>
     e54:	20000404 	andcs	r0, r0, r4, lsl #8
     e58:	00000030 	andeq	r0, r0, r0, lsr r0
     e5c:	251f9c01 	ldrcs	r9, [pc, #-3073]	; 263 <startup-0x1ffffd9d>
     e60:	01000005 	tsteq	r0, r5
     e64:	0003ec37 	andeq	lr, r3, r7, lsr ip
     e68:	00001820 	andeq	r1, r0, r0, lsr #16
     e6c:	199c0100 	ldmibne	ip, {r8}
     e70:	000006ae 	andeq	r0, r0, lr, lsr #13
     e74:	03ba3201 			; <UNDEFINED> instruction: 0x03ba3201
     e78:	00322000 	eorseq	r2, r2, r0
     e7c:	9c010000 	stcls	0, cr0, [r1], {-0}
     e80:	0000083a 	andeq	r0, r0, sl, lsr r8
     e84:	0004de1b 	andeq	sp, r4, fp, lsl lr
     e88:	20320100 	eorscs	r0, r2, r0, lsl #2
     e8c:	02000005 	andeq	r0, r0, #5
     e90:	691e6c91 	ldmdbvs	lr, {r0, r4, r7, sl, fp, sp, lr}
     e94:	2e330100 	rsfcss	f0, f3, f0
     e98:	02000001 	andeq	r0, r0, #1
     e9c:	1d007491 	cfstrsne	mvf7, [r0, #-580]	; 0xfffffdbc
     ea0:	00000566 	andeq	r0, r0, r6, ror #10
     ea4:	03942101 	orrseq	r2, r4, #1073741824	; 0x40000000
     ea8:	00262000 	eoreq	r2, r6, r0
     eac:	9c010000 	stcls	0, cr0, [r1], {-0}
     eb0:	0000085d 	andeq	r0, r0, sp, asr r8
     eb4:	00736d1a 	rsbseq	r6, r3, sl, lsl sp
     eb8:	004e2101 	subeq	r2, lr, r1, lsl #2
     ebc:	91020000 	mrsls	r0, (UNDEF: 2)
     ec0:	031d0074 	tsteq	sp, #116	; 0x74
     ec4:	01000005 	tsteq	r0, r5
     ec8:	00036818 	andeq	r6, r3, r8, lsl r8
     ecc:	00002c20 	andeq	r2, r0, r0, lsr #24
     ed0:	809c0100 	addshi	r0, ip, r0, lsl #2
     ed4:	1a000008 	bne	efc <startup-0x1ffff104>
     ed8:	01007375 	tsteq	r0, r5, ror r3
     edc:	00004e18 	andeq	r4, r0, r8, lsl lr
     ee0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     ee4:	06d62300 	ldrbeq	r2, [r6], r0, lsl #6
     ee8:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
     eec:	20000324 	andcs	r0, r0, r4, lsr #6
     ef0:	00000044 	andeq	r0, r0, r4, asr #32
     ef4:	13239c01 			; <UNDEFINED> instruction: 0x13239c01
     ef8:	01000006 	tsteq	r0, r6
     efc:	0002e004 	andeq	lr, r2, r4
     f00:	00004420 	andeq	r4, r0, r0, lsr #8
     f04:	009c0100 	addseq	r0, ip, r0, lsl #2
     f08:	000001e0 	andeq	r0, r0, r0, ror #3
     f0c:	04170004 	ldreq	r0, [r7], #-4
     f10:	01040000 	mrseq	r0, (UNDEF: 4)
     f14:	00000044 	andeq	r0, r0, r4, asr #32
     f18:	0007080c 	andeq	r0, r7, ip, lsl #16
     f1c:	0010c400 	andseq	ip, r0, r0, lsl #8
     f20:	00005620 	andeq	r5, r0, r0, lsr #12
     f24:	00053b00 	andeq	r3, r5, r0, lsl #22
     f28:	020c0200 	andeq	r0, ip, #0, 4
     f2c:	00004e05 	andeq	r4, r0, r5, lsl #28
     f30:	019a0300 	orrseq	r0, sl, r0, lsl #6
     f34:	07020000 	streq	r0, [r2, -r0]
     f38:	0000004e 	andeq	r0, r0, lr, asr #32
     f3c:	02760300 	rsbseq	r0, r6, #0, 6
     f40:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     f44:	0000004e 	andeq	r0, r0, lr, asr #32
     f48:	05e50304 	strbeq	r0, [r5, #772]!	; 0x304
     f4c:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     f50:	00000055 	andeq	r0, r0, r5, asr r0
     f54:	04040008 	streq	r0, [r4], #-8
     f58:	00029707 	andeq	r9, r2, r7, lsl #14
     f5c:	5b040500 	blpl	102364 <startup-0x1fefdc9c>
     f60:	04000000 	streq	r0, [r0], #-0
     f64:	02580801 	subseq	r0, r8, #65536	; 0x10000
     f68:	b1060000 	mrslt	r0, (UNDEF: 6)
     f6c:	02000004 	andeq	r0, r0, #4
     f70:	0000210a 	andeq	r2, r0, sl, lsl #2
     f74:	02450700 	subeq	r0, r5, #0, 14
     f78:	030c0000 	movweq	r0, #49152	; 0xc000
     f7c:	00009e06 	andeq	r9, r0, r6, lsl #28
     f80:	03810300 	orreq	r0, r1, #0, 6
     f84:	07030000 	streq	r0, [r3, -r0]
     f88:	0000009e 	muleq	r0, lr, r0
     f8c:	038c0300 	orreq	r0, ip, #0, 6
     f90:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     f94:	0000009e 	muleq	r0, lr, r0
     f98:	02410304 	subeq	r0, r1, #4, 6	; 0x10000000
     f9c:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
     fa0:	0000009e 	muleq	r0, lr, r0
     fa4:	04050008 	streq	r0, [r5], #-8
     fa8:	00000062 	andeq	r0, r0, r2, rrx
     fac:	0009c706 	andeq	ip, r9, r6, lsl #14
     fb0:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
     fb4:	07000000 	streq	r0, [r0, -r0]
     fb8:	00000125 	andeq	r0, r0, r5, lsr #2
     fbc:	28060424 	stmdacs	r6, {r2, r5, sl}
     fc0:	03000001 	movweq	r0, #1
     fc4:	00000449 	andeq	r0, r0, r9, asr #8
     fc8:	01280704 			; <UNDEFINED> instruction: 0x01280704
     fcc:	03000000 	movweq	r0, #0
     fd0:	000000dc 	ldrdeq	r0, [r0], -ip
     fd4:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
     fd8:	03040000 	movweq	r0, #16384	; 0x4000
     fdc:	00000209 	andeq	r0, r0, r9, lsl #4
     fe0:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
     fe4:	03080000 	movweq	r0, #32768	; 0x8000
     fe8:	00000202 	andeq	r0, r0, r2, lsl #4
     fec:	01460c04 	cmpeq	r6, r4, lsl #24
     ff0:	030c0000 	movweq	r0, #49152	; 0xc000
     ff4:	00000228 	andeq	r0, r0, r8, lsr #4
     ff8:	01460d04 	cmpeq	r6, r4, lsl #26
     ffc:	03100000 	tsteq	r0, #0
    1000:	000000ea 	andeq	r0, r0, sl, ror #1
    1004:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
    1008:	03140000 	tsteq	r4, #0
    100c:	00000342 	andeq	r0, r0, r2, asr #6
    1010:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
    1014:	03180000 	tsteq	r8, #0
    1018:	00000404 	andeq	r0, r0, r4, lsl #8
    101c:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
    1020:	031c0000 	tsteq	ip, #0
    1024:	00000029 	andeq	r0, r0, r9, lsr #32
    1028:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
    102c:	00200000 	eoreq	r0, r0, r0
    1030:	00a40405 	adceq	r0, r4, r5, lsl #8
    1034:	04080000 	streq	r0, [r8], #-0
    1038:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    103c:	01400900 	cmpeq	r0, r0, lsl #18
    1040:	400a0000 	andmi	r0, sl, r0
    1044:	00000001 	andeq	r0, r0, r1
    1048:	00af0405 	adceq	r0, pc, r5, lsl #8
    104c:	04050000 	streq	r0, [r5], #-0
    1050:	00000135 	andeq	r0, r0, r5, lsr r1
    1054:	00012606 	andeq	r2, r1, r6, lsl #12
    1058:	af150400 	svcge	0x00150400
    105c:	0b000000 	bleq	1064 <startup-0x1fffef9c>
    1060:	00000162 	andeq	r0, r0, r2, ror #2
    1064:	00000162 	andeq	r0, r0, r2, ror #2
    1068:	0405000c 	streq	r0, [r5], #-12
    106c:	0000014c 	andeq	r0, r0, ip, asr #2
    1070:	00035e0d 	andeq	r5, r3, sp, lsl #28
    1074:	571a0400 	ldrpl	r0, [sl, -r0, lsl #8]
    1078:	0d000001 	stceq	0, cr0, [r0, #-4]
    107c:	0000018d 	andeq	r0, r0, sp, lsl #3
    1080:	012e1b04 			; <UNDEFINED> instruction: 0x012e1b04
    1084:	04040000 	streq	r0, [r4], #-0
    1088:	0000e107 	andeq	lr, r0, r7, lsl #2
    108c:	01680e00 	cmneq	r8, r0, lsl #28
    1090:	03010000 	movweq	r0, #4096	; 0x1000
    1094:	329c0305 	addscc	r0, ip, #335544320	; 0x14000000
    1098:	730e2000 	movwvc	r2, #57344	; 0xe000
    109c:	01000001 	tsteq	r0, r1
    10a0:	28030504 	stmdacs	r3, {r2, r8, sl}
    10a4:	0f200016 	svceq	0x00200016
    10a8:	000006f7 	strdeq	r0, [r0], -r7
    10ac:	10d40c01 	sbcsne	r0, r4, r1, lsl #24
    10b0:	00462000 	subeq	r2, r6, r0
    10b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    10b8:	000001c3 	andeq	r0, r0, r3, asr #3
    10bc:	00073d10 	andeq	r3, r7, r0, lsl sp
    10c0:	620c0100 	andvs	r0, ip, #0, 2
    10c4:	02000001 	andeq	r0, r0, #1
    10c8:	11007491 			; <UNDEFINED> instruction: 0x11007491
    10cc:	00000228 	andeq	r0, r0, r8, lsr #4
    10d0:	10c40701 	sbcne	r0, r4, r1, lsl #14
    10d4:	00102000 	andseq	r2, r0, r0
    10d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    10dc:	00073d10 	andeq	r3, r7, r0, lsl sp
    10e0:	62070100 	andvs	r0, r7, #0, 2
    10e4:	02000001 	andeq	r0, r0, #1
    10e8:	00007491 	muleq	r0, r1, r4
    10ec:	00000135 	andeq	r0, r0, r5, lsr r1
    10f0:	04fd0004 	ldrbteq	r0, [sp], #4
    10f4:	01040000 	mrseq	r0, (UNDEF: 4)
    10f8:	00000044 	andeq	r0, r0, r4, asr #32
    10fc:	00075d0c 	andeq	r5, r7, ip, lsl #26
    1100:	00111c00 	andseq	r1, r1, r0, lsl #24
    1104:	00006020 	andeq	r6, r0, r0, lsr #32
    1108:	0005cb00 	andeq	ip, r5, r0, lsl #22
    110c:	02180200 	andseq	r0, r8, #0, 4
    1110:	0000ae0e 	andeq	sl, r0, lr, lsl #28
    1114:	02be0300 	adcseq	r0, lr, #0, 6
    1118:	0f020000 	svceq	0x00020000
    111c:	000000ae 	andeq	r0, r0, lr, lsr #1
    1120:	01d80300 	bicseq	r0, r8, r0, lsl #6
    1124:	10020000 	andne	r0, r2, r0
    1128:	000000b5 	strheq	r0, [r0], -r5
    112c:	01df0304 	bicseq	r0, pc, r4, lsl #6
    1130:	11020000 	mrsne	r0, (UNDEF: 2)
    1134:	000000b5 	strheq	r0, [r0], -r5
    1138:	027d0306 	rsbseq	r0, sp, #402653184	; 0x18000000
    113c:	12020000 	andne	r0, r2, #0
    1140:	000000ae 	andeq	r0, r0, lr, lsr #1
    1144:	01a00308 	lsleq	r0, r8, #6
    1148:	13020000 	movwne	r0, #8192	; 0x2000
    114c:	000000ae 	andeq	r0, r0, lr, lsr #1
    1150:	000d030c 	andeq	r0, sp, ip, lsl #6
    1154:	14020000 	strne	r0, [r2], #-0
    1158:	000000bc 	strheq	r0, [r0], -ip
    115c:	02fa0310 	rscseq	r0, sl, #16, 6	; 0x40000000
    1160:	15020000 	strne	r0, [r2, #-0]
    1164:	000000bc 	strheq	r0, [r0], -ip
    1168:	02a90311 	adceq	r0, r9, #1140850688	; 0x44000000
    116c:	16020000 	strne	r0, [r2], -r0
    1170:	000000b5 	strheq	r0, [r0], -r5
    1174:	045c0312 	ldrbeq	r0, [ip], #-786	; 0xfffffcee
    1178:	17020000 	strne	r0, [r2, -r0]
    117c:	000000bc 	strheq	r0, [r0], -ip
    1180:	04390314 	ldrteq	r0, [r9], #-788	; 0xfffffcec
    1184:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    1188:	000000bc 	strheq	r0, [r0], -ip
    118c:	00140315 	andseq	r0, r4, r5, lsl r3
    1190:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
    1194:	000000b5 	strheq	r0, [r0], -r5
    1198:	04040016 	streq	r0, [r4], #-22	; 0xffffffea
    119c:	00029707 	andeq	r9, r2, r7, lsl #14
    11a0:	07020400 	streq	r0, [r2, -r0, lsl #8]
    11a4:	00000291 	muleq	r0, r1, r2
    11a8:	58080104 	stmdapl	r8, {r2, r8}
    11ac:	05000002 	streq	r0, [r0, #-2]
    11b0:	000002a4 	andeq	r0, r0, r4, lsr #5
    11b4:	00211a02 	eoreq	r1, r1, r2, lsl #20
    11b8:	4d060000 	stcmi	0, cr0, [r6, #-0]
    11bc:	01000007 	tsteq	r0, r7
    11c0:	0001040d 	andeq	r0, r1, sp, lsl #8
    11c4:	00114800 	andseq	r4, r1, r0, lsl #16
    11c8:	00003420 	andeq	r3, r0, r0, lsr #8
    11cc:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    11d0:	07000001 	streq	r0, [r0, -r1]
    11d4:	00746962 	rsbseq	r6, r4, r2, ror #18
    11d8:	01040d01 	tsteq	r4, r1, lsl #26
    11dc:	91020000 	mrsls	r0, (UNDEF: 2)
    11e0:	49440864 	stmdbmi	r4, {r2, r5, r6, fp}^
    11e4:	0e01004c 	cdpeq	0, 0, cr0, cr1, cr12, {2}
    11e8:	0000010b 	andeq	r0, r0, fp, lsl #2
    11ec:	006f9102 	rsbeq	r9, pc, r2, lsl #2
    11f0:	69050409 	stmdbvs	r5, {r0, r3, sl}
    11f4:	0400746e 	streq	r7, [r0], #-1134	; 0xfffffb92
    11f8:	02610801 	rsbeq	r0, r1, #65536	; 0x10000
    11fc:	8c0a0000 	stchi	0, cr0, [sl], {-0}
    1200:	01000007 	tsteq	r0, r7
    1204:	00010b08 	andeq	r0, r1, r8, lsl #22
    1208:	00113400 	andseq	r3, r1, r0, lsl #8
    120c:	00001420 	andeq	r1, r0, r0, lsr #8
    1210:	0b9c0100 	bleq	fe701618 <firstTime.4076+0xde6fceb4>
    1214:	00000742 	andeq	r0, r0, r2, asr #14
    1218:	111c0401 	tstne	ip, r1, lsl #8
    121c:	00182000 	andseq	r2, r8, r0
    1220:	9c010000 	stcls	0, cr0, [r1], {-0}
    1224:	00010000 	andeq	r0, r1, r0
    1228:	ba000400 	blt	2230 <startup-0x1fffddd0>
    122c:	04000005 	streq	r0, [r0], #-5
    1230:	00004401 	andeq	r4, r0, r1, lsl #8
    1234:	07950c00 	ldreq	r0, [r5, r0, lsl #24]
    1238:	117c0000 	cmnne	ip, r0
    123c:	00282000 	eoreq	r2, r8, r0
    1240:	063c0000 	ldrteq	r0, [ip], -r0
    1244:	0c020000 	stceq	0, cr0, [r2], {-0}
    1248:	004e0502 	subeq	r0, lr, r2, lsl #10
    124c:	9a030000 	bls	c1254 <startup-0x1ff3edac>
    1250:	02000001 	andeq	r0, r0, #1
    1254:	00004e07 	andeq	r4, r0, r7, lsl #28
    1258:	76030000 	strvc	r0, [r3], -r0
    125c:	02000002 	andeq	r0, r0, #2
    1260:	00004e08 	andeq	r4, r0, r8, lsl #28
    1264:	e5030400 	str	r0, [r3, #-1024]	; 0xfffffc00
    1268:	02000005 	andeq	r0, r0, #5
    126c:	00005509 	andeq	r5, r0, r9, lsl #10
    1270:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    1274:	02970704 	addseq	r0, r7, #4, 14	; 0x100000
    1278:	04050000 	streq	r0, [r5], #-0
    127c:	0000005b 	andeq	r0, r0, fp, asr r0
    1280:	58080104 	stmdapl	r8, {r2, r8}
    1284:	06000002 	streq	r0, [r0], -r2
    1288:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    128c:	00210a02 	eoreq	r0, r1, r2, lsl #20
    1290:	45070000 	strmi	r0, [r7, #-0]
    1294:	0c000002 	stceq	0, cr0, [r0], {2}
    1298:	009e0603 	addseq	r0, lr, r3, lsl #12
    129c:	81030000 	mrshi	r0, (UNDEF: 3)
    12a0:	03000003 	movweq	r0, #3
    12a4:	00009e07 	andeq	r9, r0, r7, lsl #28
    12a8:	8c030000 	stchi	0, cr0, [r3], {-0}
    12ac:	03000003 	movweq	r0, #3
    12b0:	00009e08 	andeq	r9, r0, r8, lsl #28
    12b4:	41030400 	tstmi	r3, r0, lsl #8
    12b8:	03000002 	movweq	r0, #2
    12bc:	00009e09 	andeq	r9, r0, r9, lsl #28
    12c0:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    12c4:	00006204 	andeq	r6, r0, r4, lsl #4
    12c8:	09c70600 	stmibeq	r7, {r9, sl}^
    12cc:	0a030000 	beq	c12d4 <startup-0x1ff3ed2c>
    12d0:	0000006d 	andeq	r0, r0, sp, rrx
    12d4:	0007c508 	andeq	ip, r7, r8, lsl #10
    12d8:	7c030100 	stfvcs	f0, [r3], {-0}
    12dc:	28200011 	stmdacs	r0!, {r0, r4}
    12e0:	01000000 	mrseq	r0, (UNDEF: 0)
    12e4:	0000fd9c 	muleq	r0, ip, sp
    12e8:	07ca0900 	strbeq	r0, [sl, r0, lsl #18]
    12ec:	03010000 	movweq	r0, #4096	; 0x1000
    12f0:	000000fd 	strdeq	r0, [r0], -sp
    12f4:	09749102 	ldmdbeq	r4!, {r1, r8, ip, pc}^
    12f8:	00000381 	andeq	r0, r0, r1, lsl #7
    12fc:	009e0301 	addseq	r0, lr, r1, lsl #6
    1300:	91020000 	mrsls	r0, (UNDEF: 2)
    1304:	038c0970 	orreq	r0, ip, #112, 18	; 0x1c0000
    1308:	03010000 	movweq	r0, #4096	; 0x1000
    130c:	0000009e 	muleq	r0, lr, r0
    1310:	096c9102 	stmdbeq	ip!, {r1, r8, ip, pc}^
    1314:	00000241 	andeq	r0, r0, r1, asr #4
    1318:	009e0301 	addseq	r0, lr, r1, lsl #6
    131c:	91020000 	mrsls	r0, (UNDEF: 2)
    1320:	04050068 	streq	r0, [r5], #-104	; 0xffffff98
    1324:	000000a4 	andeq	r0, r0, r4, lsr #1
    1328:	00052b00 	andeq	r2, r5, r0, lsl #22
    132c:	41000400 	tstmi	r0, r0, lsl #8
    1330:	04000006 	streq	r0, [r0], #-6
    1334:	00004401 	andeq	r4, r0, r1, lsl #8
    1338:	085c0c00 	ldmdaeq	ip, {sl, fp}^
    133c:	11a40000 			; <UNDEFINED> instruction: 0x11a40000
    1340:	02a82000 	adceq	r2, r8, #0
    1344:	06b40000 	ldrteq	r0, [r4], r0
    1348:	0c020000 	stceq	0, cr0, [r2], {-0}
    134c:	004e0502 	subeq	r0, lr, r2, lsl #10
    1350:	9a030000 	bls	c1358 <startup-0x1ff3eca8>
    1354:	02000001 	andeq	r0, r0, #1
    1358:	00004e07 	andeq	r4, r0, r7, lsl #28
    135c:	76030000 	strvc	r0, [r3], -r0
    1360:	02000002 	andeq	r0, r0, #2
    1364:	00004e08 	andeq	r4, r0, r8, lsl #28
    1368:	e5030400 	str	r0, [r3, #-1024]	; 0xfffffc00
    136c:	02000005 	andeq	r0, r0, #5
    1370:	00005509 	andeq	r5, r0, r9, lsl #10
    1374:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    1378:	02970704 	addseq	r0, r7, #4, 14	; 0x100000
    137c:	04050000 	streq	r0, [r5], #-0
    1380:	0000005b 	andeq	r0, r0, fp, asr r0
    1384:	58080104 	stmdapl	r8, {r2, r8}
    1388:	06000002 	streq	r0, [r0], -r2
    138c:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    1390:	00210a02 	eoreq	r0, r1, r2, lsl #20
    1394:	45070000 	strmi	r0, [r7, #-0]
    1398:	0c000002 	stceq	0, cr0, [r0], {2}
    139c:	009e0603 	addseq	r0, lr, r3, lsl #12
    13a0:	81030000 	mrshi	r0, (UNDEF: 3)
    13a4:	03000003 	movweq	r0, #3
    13a8:	00009e07 	andeq	r9, r0, r7, lsl #28
    13ac:	8c030000 	stchi	0, cr0, [r3], {-0}
    13b0:	03000003 	movweq	r0, #3
    13b4:	00009e08 	andeq	r9, r0, r8, lsl #28
    13b8:	41030400 	tstmi	r3, r0, lsl #8
    13bc:	03000002 	movweq	r0, #2
    13c0:	00009e09 	andeq	r9, r0, r9, lsl #28
    13c4:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    13c8:	00006204 	andeq	r6, r0, r4, lsl #4
    13cc:	09c70600 	stmibeq	r7, {r9, sl}^
    13d0:	0a030000 	beq	c13d8 <startup-0x1ff3ec28>
    13d4:	0000006d 	andeq	r0, r0, sp, rrx
    13d8:	00012507 	andeq	r2, r1, r7, lsl #10
    13dc:	06042400 	streq	r2, [r4], -r0, lsl #8
    13e0:	00000128 	andeq	r0, r0, r8, lsr #2
    13e4:	00044903 	andeq	r4, r4, r3, lsl #18
    13e8:	28070400 	stmdacs	r7, {sl}
    13ec:	00000001 	andeq	r0, r0, r1
    13f0:	0000dc03 	andeq	sp, r0, r3, lsl #24
    13f4:	2e080400 	cfcpyscs	mvf0, mvf8
    13f8:	04000001 	streq	r0, [r0], #-1
    13fc:	00020903 	andeq	r0, r2, r3, lsl #18
    1400:	2e090400 	cfcpyscs	mvf0, mvf9
    1404:	08000001 	stmdaeq	r0, {r0}
    1408:	00020203 	andeq	r0, r2, r3, lsl #4
    140c:	460c0400 	strmi	r0, [ip], -r0, lsl #8
    1410:	0c000001 	stceq	0, cr0, [r0], {1}
    1414:	00022803 	andeq	r2, r2, r3, lsl #16
    1418:	460d0400 	strmi	r0, [sp], -r0, lsl #8
    141c:	10000001 	andne	r0, r0, r1
    1420:	0000ea03 	andeq	lr, r0, r3, lsl #20
    1424:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
    1428:	14000001 	strne	r0, [r0], #-1
    142c:	00034203 	andeq	r4, r3, r3, lsl #4
    1430:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
    1434:	18000001 	stmdane	r0, {r0}
    1438:	00040403 	andeq	r0, r4, r3, lsl #8
    143c:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
    1440:	1c000001 	stcne	0, cr0, [r0], {1}
    1444:	00002903 	andeq	r2, r0, r3, lsl #18
    1448:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
    144c:	20000001 	andcs	r0, r0, r1
    1450:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    1454:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1458:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    145c:	40090074 	andmi	r0, r9, r4, ror r0
    1460:	0a000001 	beq	146c <startup-0x1fffeb94>
    1464:	00000140 	andeq	r0, r0, r0, asr #2
    1468:	af040500 	svcge	0x00040500
    146c:	05000000 	streq	r0, [r0, #-0]
    1470:	00013504 	andeq	r3, r1, r4, lsl #10
    1474:	01260600 			; <UNDEFINED> instruction: 0x01260600
    1478:	15040000 	strne	r0, [r4, #-0]
    147c:	000000af 	andeq	r0, r0, pc, lsr #1
    1480:	0001620b 	andeq	r6, r1, fp, lsl #4
    1484:	00016200 	andeq	r6, r1, r0, lsl #4
    1488:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    148c:	00014c04 	andeq	r4, r1, r4, lsl #24
    1490:	035e0d00 	cmpeq	lr, #0, 26
    1494:	1a040000 	bne	10149c <startup-0x1fefeb64>
    1498:	00000157 	andeq	r0, r0, r7, asr r1
    149c:	00018d0d 	andeq	r8, r1, sp, lsl #26
    14a0:	2e1b0400 	cfmulscs	mvf0, mvf11, mvf0
    14a4:	0b000001 	bleq	14b0 <startup-0x1fffeb50>
    14a8:	0000005b 	andeq	r0, r0, fp, asr r0
    14ac:	0000018e 	andeq	r0, r0, lr, lsl #3
    14b0:	00018e0e 	andeq	r8, r1, lr, lsl #28
    14b4:	04000b00 	streq	r0, [r0], #-2816	; 0xfffff500
    14b8:	00e10704 	rsceq	r0, r1, r4, lsl #14
    14bc:	1b0f0000 	blne	3c14c4 <startup-0x1fc3eb3c>
    14c0:	0500000a 	streq	r0, [r0, #-10]
    14c4:	00017e03 	andeq	r7, r1, r3, lsl #28
    14c8:	e0030500 	and	r0, r3, r0, lsl #10
    14cc:	0f200046 	svceq	0x00200046
    14d0:	00000900 	andeq	r0, r0, r0, lsl #18
    14d4:	017e0306 	cmneq	lr, r6, lsl #6
    14d8:	03050000 	movweq	r0, #20480	; 0x5000
    14dc:	200046ec 	andcs	r4, r0, ip, ror #13
    14e0:	00091b0f 	andeq	r1, r9, pc, lsl #22
    14e4:	7e030700 	cdpvc	7, 0, cr0, cr3, cr0, {0}
    14e8:	05000001 	streq	r0, [r0, #-1]
    14ec:	0046f803 	subeq	pc, r6, r3, lsl #16
    14f0:	083b0f20 	ldmdaeq	fp!, {r5, r8, r9, sl, fp}
    14f4:	03080000 	movweq	r0, #32768	; 0x8000
    14f8:	0000017e 	andeq	r0, r0, lr, ror r1
    14fc:	47040305 	strmi	r0, [r4, -r5, lsl #6]
    1500:	2c0f2000 	stccs	0, cr2, [pc], {-0}
    1504:	09000009 	stmdbeq	r0, {r0, r3}
    1508:	00017e03 	andeq	r7, r1, r3, lsl #28
    150c:	10030500 	andne	r0, r3, r0, lsl #10
    1510:	0f200047 	svceq	0x00200047
    1514:	00000a56 	andeq	r0, r0, r6, asr sl
    1518:	017e030a 	cmneq	lr, sl, lsl #6
    151c:	03050000 	movweq	r0, #20480	; 0x5000
    1520:	2000471c 	andcs	r4, r0, ip, lsl r7
    1524:	0009f40f 	andeq	pc, r9, pc, lsl #8
    1528:	7e030b00 	vmlavc.f64	d0, d3, d0
    152c:	05000001 	streq	r0, [r0, #-1]
    1530:	00472803 	subeq	r2, r7, r3, lsl #16
    1534:	094f0f20 	stmdbeq	pc, {r5, r8, r9, sl, fp}^	; <UNPREDICTABLE>
    1538:	030c0000 	movweq	r0, #49152	; 0xc000
    153c:	0000017e 	andeq	r0, r0, lr, ror r1
    1540:	47340305 	ldrmi	r0, [r4, -r5, lsl #6]!
    1544:	4b0f2000 	blmi	3c954c <startup-0x1fc36ab4>
    1548:	0d000008 	stceq	0, cr0, [r0, #-32]	; 0xffffffe0
    154c:	00017e03 	andeq	r7, r1, r3, lsl #28
    1550:	40030500 	andmi	r0, r3, r0, lsl #10
    1554:	0f200047 	svceq	0x00200047
    1558:	000008a8 	andeq	r0, r0, r8, lsr #17
    155c:	017e030e 	cmneq	lr, lr, lsl #6
    1560:	03050000 	movweq	r0, #20480	; 0x5000
    1564:	2000474c 	andcs	r4, r0, ip, asr #14
    1568:	0009a60f 	andeq	sl, r9, pc, lsl #12
    156c:	7e030f00 	cdpvc	15, 0, cr0, cr3, cr0, {0}
    1570:	05000001 	streq	r0, [r0, #-1]
    1574:	00475803 	subeq	r5, r7, r3, lsl #16
    1578:	080a1020 	stmdaeq	sl, {r5, ip}
    157c:	11010000 	mrsne	r0, (UNDEF: 1)
    1580:	0000009e 	muleq	r0, lr, r0
    1584:	355c0305 	ldrbcc	r0, [ip, #-773]	; 0xfffffcfb
    1588:	da102000 	ble	409590 <startup-0x1fbf6a70>
    158c:	01000007 	tsteq	r0, r7
    1590:	00009e12 	andeq	r9, r0, r2, lsl lr
    1594:	74030500 	strvc	r0, [r3], #-1280	; 0xfffffb00
    1598:	10200035 	eorne	r0, r0, r5, lsr r0
    159c:	00000a10 	andeq	r0, r0, r0, lsl sl
    15a0:	009e1301 	addseq	r1, lr, r1, lsl #6
    15a4:	03050000 	movweq	r0, #20480	; 0x5000
    15a8:	2000342c 	andcs	r3, r0, ip, lsr #8
    15ac:	00094510 	andeq	r4, r9, r0, lsl r5
    15b0:	9e140100 	muflss	f0, f4, f0
    15b4:	05000000 	streq	r0, [r0, #-0]
    15b8:	00357003 	eorseq	r7, r5, r3
    15bc:	09101020 	ldmdbeq	r0, {r5, ip}
    15c0:	15010000 	strne	r0, [r1, #-0]
    15c4:	0000009e 	muleq	r0, lr, r0
    15c8:	35480305 	strbcc	r0, [r8, #-773]	; 0xfffffcfb
    15cc:	f2102000 	vhadd.s16	d2, d0, d0
    15d0:	01000007 	tsteq	r0, r7
    15d4:	00009e16 	andeq	r9, r0, r6, lsl lr
    15d8:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
    15dc:	10200034 	eorne	r0, r0, r4, lsr r0
    15e0:	0000088b 	andeq	r0, r0, fp, lsl #17
    15e4:	009e1701 	addseq	r1, lr, r1, lsl #14
    15e8:	03050000 	movweq	r0, #20480	; 0x5000
    15ec:	2000356c 	andcs	r3, r0, ip, ror #10
    15f0:	0009cd10 	andeq	ip, r9, r0, lsl sp
    15f4:	9e180100 	muflse	f0, f0, f0
    15f8:	05000000 	streq	r0, [r0, #-0]
    15fc:	00352803 	eorseq	r2, r5, r3, lsl #16
    1600:	08301020 	ldmdaeq	r0!, {r5, ip}
    1604:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    1608:	0000009e 	muleq	r0, lr, r0
    160c:	34940305 	ldrcc	r0, [r4], #773	; 0x305
    1610:	d0102000 	andsle	r2, r0, r0
    1614:	01000007 	tsteq	r0, r7
    1618:	00009e1a 	andeq	r9, r0, sl, lsl lr
    161c:	44030500 	strmi	r0, [r3], #-1280	; 0xfffffb00
    1620:	10200035 	eorne	r0, r0, r5, lsr r0
    1624:	000008de 	ldrdeq	r0, [r0], -lr
    1628:	009e1b01 	addseq	r1, lr, r1, lsl #22
    162c:	03050000 	movweq	r0, #20480	; 0x5000
    1630:	2000354c 	andcs	r3, r0, ip, asr #10
    1634:	00082210 	andeq	r2, r8, r0, lsl r2
    1638:	621d0100 	andsvs	r0, sp, #0, 2
    163c:	05000000 	streq	r0, [r0, #-0]
    1640:	00346403 	eorseq	r6, r4, r3, lsl #8
    1644:	09d71020 	ldmibeq	r7, {r5, ip}^
    1648:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    164c:	00000062 	andeq	r0, r0, r2, rrx
    1650:	35500305 	ldrbcc	r0, [r0, #-773]	; 0xfffffcfb
    1654:	83102000 	tsthi	r0, #0
    1658:	01000009 	tsteq	r0, r9
    165c:	0000621f 	andeq	r6, r0, pc, lsl r2
    1660:	2c030500 	cfstr32cs	mvfx0, [r3], {-0}
    1664:	10200035 	eorne	r0, r0, r5, lsr r0
    1668:	000007e4 	andeq	r0, r0, r4, ror #15
    166c:	00622001 	rsbeq	r2, r2, r1
    1670:	03050000 	movweq	r0, #20480	; 0x5000
    1674:	20003458 	andcs	r3, r0, r8, asr r4
    1678:	000a2d10 	andeq	r2, sl, r0, lsl sp
    167c:	62210100 	eorvs	r0, r1, #0, 2
    1680:	05000000 	streq	r0, [r0, #-0]
    1684:	00356003 	eorseq	r6, r5, r3
    1688:	08141020 	ldmdaeq	r4, {r5, ip}
    168c:	22010000 	andcs	r0, r1, #0
    1690:	00000062 	andeq	r0, r0, r2, rrx
    1694:	35100305 	ldrcc	r0, [r0, #-773]	; 0xfffffcfb
    1698:	5f102000 	svcpl	0x00102000
    169c:	01000009 	tsteq	r0, r9
    16a0:	00006223 	andeq	r6, r0, r3, lsr #4
    16a4:	30030500 	andcc	r0, r3, r0, lsl #10
    16a8:	10200034 	eorne	r0, r0, r4, lsr r0
    16ac:	000007fc 	strdeq	r0, [r0], -ip
    16b0:	00622401 	rsbeq	r2, r2, r1, lsl #8
    16b4:	03050000 	movweq	r0, #20480	; 0x5000
    16b8:	20003440 	andcs	r3, r0, r0, asr #8
    16bc:	0009e510 	andeq	lr, r9, r0, lsl r5
    16c0:	62250100 	eorvs	r0, r5, #0, 2
    16c4:	05000000 	streq	r0, [r0, #-0]
    16c8:	00347c03 	eorseq	r7, r4, r3, lsl #24
    16cc:	08f21020 	ldmeq	r2!, {r5, ip}^
    16d0:	26010000 	strcs	r0, [r1], -r0
    16d4:	00000062 	andeq	r0, r0, r2, rrx
    16d8:	35040305 	strcc	r0, [r4, #-773]	; 0xfffffcfb
    16dc:	47102000 	ldrmi	r2, [r0, -r0]
    16e0:	0100000a 	tsteq	r0, sl
    16e4:	00006227 	andeq	r6, r0, r7, lsr #4
    16e8:	38030500 	stmdacc	r3, {r8, sl}
    16ec:	10200035 	eorne	r0, r0, r5, lsr r0
    16f0:	0000093d 	andeq	r0, r0, sp, lsr r9
    16f4:	014c2a01 	cmpeq	ip, r1, lsl #20
    16f8:	03050000 	movweq	r0, #20480	; 0x5000
    16fc:	20003498 	mulcs	r0, r8, r4
    1700:	0009c210 	andeq	ip, r9, r0, lsl r2
    1704:	a42b0100 	strtge	r0, [fp], #-256	; 0xffffff00
    1708:	05000000 	streq	r0, [r0, #-0]
    170c:	00348803 	eorseq	r8, r4, r3, lsl #16
    1710:	0a3c1020 	beq	f05798 <startup-0x1f0fa868>
    1714:	2c010000 	stccs	0, cr0, [r1], {-0}
    1718:	000000a4 	andeq	r0, r0, r4, lsr #1
    171c:	344c0305 	strbcc	r0, [ip], #-773	; 0xfffffcfb
    1720:	ca102000 	bgt	409728 <startup-0x1fbf68d8>
    1724:	01000008 	tsteq	r0, r8
    1728:	0000a42d 	andeq	sl, r0, sp, lsr #8
    172c:	70030500 	andvc	r0, r3, r0, lsl #10
    1730:	10200034 	eorne	r0, r0, r4, lsr r0
    1734:	0000096e 	andeq	r0, r0, lr, ror #18
    1738:	00a42e01 	adceq	r2, r4, r1, lsl #28
    173c:	03050000 	movweq	r0, #20480	; 0x5000
    1740:	2000351c 	andcs	r3, r0, ip, lsl r5
    1744:	000a0510 	andeq	r0, sl, r0, lsl r5
    1748:	a42f0100 	strtge	r0, [pc], #-256	; 1750 <startup-0x1fffe8b0>
    174c:	05000000 	streq	r0, [r0, #-0]
    1750:	0034bc03 	eorseq	fp, r4, r3, lsl #24
    1754:	00a40b20 	adceq	r0, r4, r0, lsr #22
    1758:	043c0000 	ldrteq	r0, [ip], #-0
    175c:	8e0e0000 	cdphi	0, 0, cr0, cr14, cr0, {0}
    1760:	04000001 	streq	r0, [r0], #-1
    1764:	09b71000 	ldmibeq	r7!, {ip}
    1768:	30010000 	andcc	r0, r1, r0
    176c:	0000042c 	andeq	r0, r0, ip, lsr #8
    1770:	34c80305 	strbcc	r0, [r8], #773	; 0x305
    1774:	9c112000 	ldcls	0, cr2, [r1], {-0}
    1778:	01000009 	tsteq	r0, r9
    177c:	0013285f 	andseq	r2, r3, pc, asr r8
    1780:	00012420 	andeq	r2, r1, r0, lsr #8
    1784:	829c0100 	addshi	r0, ip, #0, 2
    1788:	12000004 	andne	r0, r0, #4
    178c:	0000093d 	andeq	r0, r0, sp, lsr r9
    1790:	01625f01 	cmneq	r2, r1, lsl #30
    1794:	91020000 	mrsls	r0, (UNDEF: 2)
    1798:	09920f6c 	ldmibeq	r2, {r2, r3, r5, r6, r8, r9, sl, fp}
    179c:	60010000 	andvs	r0, r1, r0
    17a0:	0000012e 	andeq	r0, r0, lr, lsr #2
    17a4:	47640305 	strbmi	r0, [r4, -r5, lsl #6]!
    17a8:	13002000 	movwne	r2, #0
    17ac:	00000352 	andeq	r0, r0, r2, asr r3
    17b0:	11a43101 			; <UNDEFINED> instruction: 0x11a43101
    17b4:	01842000 	orreq	r2, r4, r0
    17b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    17bc:	0008d50f 	andeq	sp, r8, pc, lsl #10
    17c0:	9e320100 	rsflss	f0, f2, f0
    17c4:	02000000 	andeq	r0, r0, #0
    17c8:	960f7491 			; <UNDEFINED> instruction: 0x960f7491
    17cc:	01000008 	tsteq	r0, r8
    17d0:	00009e36 	andeq	r9, r0, r6, lsr lr
    17d4:	70910200 	addsvc	r0, r1, r0, lsl #4
    17d8:	0008e90f 	andeq	lr, r8, pc, lsl #18
    17dc:	9e3a0100 	rsflse	f0, f2, f0
    17e0:	02000000 	andeq	r0, r0, #0
    17e4:	9f0f6c91 	svcls	0x000f6c91
    17e8:	01000008 	tsteq	r0, r8
    17ec:	00009e3e 	andeq	r9, r0, lr, lsr lr
    17f0:	68910200 	ldmvs	r1, {r9}
    17f4:	0001600f 	andeq	r6, r1, pc
    17f8:	9e420100 	dvflss	f0, f2, f0
    17fc:	02000000 	andeq	r0, r0, #0
    1800:	200f6491 	mulcs	pc, r1, r4	; <UNPREDICTABLE>
    1804:	01000000 	mrseq	r0, (UNDEF: 0)
    1808:	00009e46 	andeq	r9, r0, r6, asr #28
    180c:	60910200 	addsvs	r0, r1, r0, lsl #4
    1810:	0001710f 	andeq	r7, r1, pc, lsl #2
    1814:	9e4a0100 	dvflse	f0, f2, f0
    1818:	02000000 	andeq	r0, r0, #0
    181c:	3b0f5c91 	blcc	3d8a68 <startup-0x1fc27598>
    1820:	01000000 	mrseq	r0, (UNDEF: 0)
    1824:	00009e4e 	andeq	r9, r0, lr, asr #28
    1828:	58910200 	ldmpl	r1, {r9}
    182c:	0008b80f 	andeq	fp, r8, pc, lsl #16
    1830:	9e520100 	rdflss	f0, f2, f0
    1834:	02000000 	andeq	r0, r0, #0
    1838:	c10f5491 			; <UNDEFINED> instruction: 0xc10f5491
    183c:	01000008 	tsteq	r0, r8
    1840:	00009e56 	andeq	r9, r0, r6, asr lr
    1844:	50910200 	addspl	r0, r1, r0, lsl #4
    1848:	0009790f 	andeq	r7, r9, pc, lsl #18
    184c:	9e5a0100 	rdflse	f0, f2, f0
    1850:	02000000 	andeq	r0, r0, #0
    1854:	00004c91 	muleq	r0, r1, ip

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	01130200 	tsteq	r3, r0, lsl #4
  14:	0b3a0b0b 	bleq	e82c48 <startup-0x1f17d3b8>
  18:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  1c:	0d030000 	stceq	0, cr0, [r3, #-0]
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	000b3813 	andeq	r3, fp, r3, lsl r8
  2c:	00240400 	eoreq	r0, r4, r0, lsl #8
  30:	0b3e0b0b 	bleq	f82c64 <startup-0x1f07d39c>
  34:	00000e03 	andeq	r0, r0, r3, lsl #28
  38:	0b000f05 	bleq	3c54 <startup-0x1fffc3ac>
  3c:	0013490b 	andseq	r4, r3, fp, lsl #18
  40:	00160600 	andseq	r0, r6, r0, lsl #12
  44:	0b3a0e03 	bleq	e83858 <startup-0x1f17c7a8>
  48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  4c:	13070000 	movwne	r0, #28672	; 0x7000
  50:	0b0e0301 	bleq	380c5c <startup-0x1fc7f3a4>
  54:	3b0b3a0b 	blcc	2ce888 <startup-0x1fd31778>
  58:	0013010b 	andseq	r0, r3, fp, lsl #2
  5c:	00240800 	eoreq	r0, r4, r0, lsl #16
  60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
  64:	00000803 	andeq	r0, r0, r3, lsl #16
  68:	27011509 	strcs	r1, [r1, -r9, lsl #10]
  6c:	00130119 	andseq	r0, r3, r9, lsl r1
  70:	00050a00 	andeq	r0, r5, r0, lsl #20
  74:	00001349 	andeq	r1, r0, r9, asr #6
  78:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
  7c:	00130113 	andseq	r0, r3, r3, lsl r1
  80:	00210c00 	eoreq	r0, r1, r0, lsl #24
  84:	340d0000 	strcc	r0, [sp], #-0
  88:	3a0e0300 	bcc	380c90 <startup-0x1fc7f370>
  8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  90:	3c193f13 	ldccc	15, cr3, [r9], {19}
  94:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
  98:	13490021 	movtne	r0, #36897	; 0x9021
  9c:	0000052f 	andeq	r0, r0, pc, lsr #10
  a0:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
  a4:	000b2f13 	andeq	r2, fp, r3, lsl pc
  a8:	00341000 	eorseq	r1, r4, r0
  ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
  b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  b4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  b8:	34110000 	ldrcc	r0, [r1], #-0
  bc:	3a0e0300 	bcc	380cc4 <startup-0x1fc7f33c>
  c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  c4:	00180213 	andseq	r0, r8, r3, lsl r2
  c8:	00341200 	eorseq	r1, r4, r0, lsl #4
  cc:	0b3a0803 	bleq	e820e0 <startup-0x1f17df20>
  d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  d4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  d8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
  dc:	03193f01 	tsteq	r9, #1, 30
  e0:	3b0b3a0e 	blcc	2ce920 <startup-0x1fd316e0>
  e4:	1119270b 	tstne	r9, fp, lsl #14
  e8:	40061201 	andmi	r1, r6, r1, lsl #4
  ec:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  f0:	00001301 	andeq	r1, r0, r1, lsl #6
  f4:	03003414 	movweq	r3, #1044	; 0x414
  f8:	3b0b3a0e 	blcc	2ce938 <startup-0x1fd316c8>
  fc:	0013490b 	andseq	r4, r3, fp, lsl #18
 100:	010b1500 	tsteq	fp, r0, lsl #10
 104:	06120111 			; <UNDEFINED> instruction: 0x06120111
 108:	00001301 	andeq	r1, r0, r1, lsl #6
 10c:	01010b16 	tsteq	r1, r6, lsl fp
 110:	17000013 	smladne	r0, r3, r0, r0
 114:	0000010b 	andeq	r0, r0, fp, lsl #2
 118:	03003418 	movweq	r3, #1048	; 0x418
 11c:	3b0b3a08 	blcc	2ce944 <startup-0x1fd316bc>
 120:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 124:	19000018 	stmdbne	r0, {r3, r4}
 128:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 12c:	0b3a0e03 	bleq	e83940 <startup-0x1f17c6c0>
 130:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 134:	06120111 			; <UNDEFINED> instruction: 0x06120111
 138:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 13c:	1a000019 	bne	1a8 <startup-0x1ffffe58>
 140:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 144:	0b3a0e03 	bleq	e83958 <startup-0x1f17c6a8>
 148:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 14c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 150:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 154:	00000019 	andeq	r0, r0, r9, lsl r0
 158:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 15c:	030b130e 	movweq	r1, #45838	; 0xb30e
 160:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 164:	00171006 	andseq	r1, r7, r6
 168:	01130200 	tsteq	r3, r0, lsl #4
 16c:	0b3a0b0b 	bleq	e82da0 <startup-0x1f17d260>
 170:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 174:	0d030000 	stceq	0, cr0, [r3, #-0]
 178:	3a0e0300 	bcc	380d80 <startup-0x1fc7f280>
 17c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 180:	000b3813 	andeq	r3, fp, r3, lsl r8
 184:	00240400 	eoreq	r0, r4, r0, lsl #8
 188:	0b3e0b0b 	bleq	f82dbc <startup-0x1f07d244>
 18c:	00000e03 	andeq	r0, r0, r3, lsl #28
 190:	0b000f05 	bleq	3dac <startup-0x1fffc254>
 194:	0013490b 	andseq	r4, r3, fp, lsl #18
 198:	00160600 	andseq	r0, r6, r0, lsl #12
 19c:	0b3a0e03 	bleq	e839b0 <startup-0x1f17c650>
 1a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1a4:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
 1a8:	03193f01 	tsteq	r9, #1, 30
 1ac:	3b0b3a0e 	blcc	2ce9ec <startup-0x1fd31614>
 1b0:	1119270b 	tstne	r9, fp, lsl #14
 1b4:	40061201 	andmi	r1, r6, r1, lsl #4
 1b8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 1bc:	00001301 	andeq	r1, r0, r1, lsl #6
 1c0:	03000508 	movweq	r0, #1288	; 0x508
 1c4:	3b0b3a08 	blcc	2ce9ec <startup-0x1fd31614>
 1c8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1cc:	09000018 	stmdbeq	r0, {r3, r4}
 1d0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 1d4:	0b3b0b3a 	bleq	ec2ec4 <startup-0x1f13d13c>
 1d8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1dc:	240a0000 	strcs	r0, [sl], #-0
 1e0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 1e4:	0008030b 	andeq	r0, r8, fp, lsl #6
 1e8:	11010000 	mrsne	r0, (UNDEF: 1)
 1ec:	130e2501 	movwne	r2, #58625	; 0xe501
 1f0:	110e030b 	tstne	lr, fp, lsl #6
 1f4:	10061201 	andne	r1, r6, r1, lsl #4
 1f8:	02000017 	andeq	r0, r0, #23
 1fc:	0b0b0113 	bleq	2c0650 <startup-0x1fd3f9b0>
 200:	0b3b0b3a 	bleq	ec2ef0 <startup-0x1f13d110>
 204:	00001301 	andeq	r1, r0, r1, lsl #6
 208:	03000d03 	movweq	r0, #3331	; 0xd03
 20c:	3b0b3a0e 	blcc	2cea4c <startup-0x1fd315b4>
 210:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 214:	0400000b 	streq	r0, [r0], #-11
 218:	0b0b0024 	bleq	2c02b0 <startup-0x1fd3fd50>
 21c:	0e030b3e 	vmoveq.16	d3[0], r0
 220:	0f050000 	svceq	0x00050000
 224:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 228:	06000013 			; <UNDEFINED> instruction: 0x06000013
 22c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 230:	0b3b0b3a 	bleq	ec2f20 <startup-0x1f13d0e0>
 234:	00001349 	andeq	r1, r0, r9, asr #6
 238:	03011307 	movweq	r1, #4871	; 0x1307
 23c:	3a0b0b0e 	bcc	2c2e7c <startup-0x1fd3d184>
 240:	010b3b0b 	tsteq	fp, fp, lsl #22
 244:	08000013 	stmdaeq	r0, {r0, r1, r4}
 248:	0b0b0024 	bleq	2c02e0 <startup-0x1fd3fd20>
 24c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 250:	15090000 	strne	r0, [r9, #-0]
 254:	01192701 	tsteq	r9, r1, lsl #14
 258:	0a000013 	beq	2ac <startup-0x1ffffd54>
 25c:	13490005 	movtne	r0, #36869	; 0x9005
 260:	010b0000 	mrseq	r0, (UNDEF: 11)
 264:	01134901 	tsteq	r3, r1, lsl #18
 268:	0c000013 	stceq	0, cr0, [r0], {19}
 26c:	00000021 	andeq	r0, r0, r1, lsr #32
 270:	0300340d 	movweq	r3, #1037	; 0x40d
 274:	3b0b3a0e 	blcc	2ceab4 <startup-0x1fd3154c>
 278:	3f13490b 	svccc	0x0013490b
 27c:	00193c19 	andseq	r3, r9, r9, lsl ip
 280:	00210e00 	eoreq	r0, r1, r0, lsl #28
 284:	052f1349 	streq	r1, [pc, #-841]!	; ffffff43 <firstTime.4076+0xdfffb7df>
 288:	340f0000 	strcc	r0, [pc], #-0	; 290 <startup-0x1ffffd70>
 28c:	3a134700 	bcc	4d1e94 <startup-0x1fb2e16c>
 290:	020b3b0b 	andeq	r3, fp, #11264	; 0x2c00
 294:	10000018 	andne	r0, r0, r8, lsl r0
 298:	13470034 	movtne	r0, #28724	; 0x7034
 29c:	18020b3a 	stmdane	r2, {r1, r3, r4, r5, r8, r9, fp}
 2a0:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 2a4:	03193f01 	tsteq	r9, #1, 30
 2a8:	3b0b3a0e 	blcc	2ceae8 <startup-0x1fd31518>
 2ac:	11192705 	tstne	r9, r5, lsl #14
 2b0:	40061201 	andmi	r1, r6, r1, lsl #4
 2b4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2b8:	00001301 	andeq	r1, r0, r1, lsl #6
 2bc:	03000512 	movweq	r0, #1298	; 0x512
 2c0:	3b0b3a0e 	blcc	2ceb00 <startup-0x1fd31500>
 2c4:	02134905 	andseq	r4, r3, #81920	; 0x14000
 2c8:	13000018 	movwne	r0, #24
 2cc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 2d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 2d4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2d8:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 2dc:	03193f01 	tsteq	r9, #1, 30
 2e0:	3b0b3a0e 	blcc	2ceb20 <startup-0x1fd314e0>
 2e4:	11192705 	tstne	r9, r5, lsl #14
 2e8:	40061201 	andmi	r1, r6, r1, lsl #4
 2ec:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 2f0:	00001301 	andeq	r1, r0, r1, lsl #6
 2f4:	03003415 	movweq	r3, #1045	; 0x415
 2f8:	3b0b3a08 	blcc	2ceb20 <startup-0x1fd314e0>
 2fc:	02134905 	andseq	r4, r3, #81920	; 0x14000
 300:	16000018 			; <UNDEFINED> instruction: 0x16000018
 304:	08030034 	stmdaeq	r3, {r2, r4, r5}
 308:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 30c:	00001349 	andeq	r1, r0, r9, asr #6
 310:	03000517 	movweq	r0, #1303	; 0x517
 314:	3b0b3a08 	blcc	2ceb3c <startup-0x1fd314c4>
 318:	02134905 	andseq	r4, r3, #81920	; 0x14000
 31c:	18000018 	stmdane	r0, {r3, r4}
 320:	0111010b 	tsteq	r1, fp, lsl #2
 324:	00000612 	andeq	r0, r0, r2, lsl r6
 328:	3f012e19 	svccc	0x00012e19
 32c:	3a0e0319 	bcc	380f98 <startup-0x1fc7f068>
 330:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 334:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 338:	97184006 	ldrls	r4, [r8, -r6]
 33c:	13011942 	movwne	r1, #6466	; 0x1942
 340:	051a0000 	ldreq	r0, [sl, #-0]
 344:	3a080300 	bcc	200f4c <startup-0x1fdff0b4>
 348:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 34c:	00180213 	andseq	r0, r8, r3, lsl r2
 350:	00051b00 	andeq	r1, r5, r0, lsl #22
 354:	0b3a0e03 	bleq	e83b68 <startup-0x1f17c498>
 358:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 35c:	00001802 	andeq	r1, r0, r2, lsl #16
 360:	0300341c 	movweq	r3, #1052	; 0x41c
 364:	3b0b3a0e 	blcc	2ceba4 <startup-0x1fd3145c>
 368:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 36c:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
 370:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 374:	0b3a0e03 	bleq	e83b88 <startup-0x1f17c478>
 378:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 37c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 380:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 384:	00130119 	andseq	r0, r3, r9, lsl r1
 388:	00341e00 	eorseq	r1, r4, r0, lsl #28
 38c:	0b3a0803 	bleq	e823a0 <startup-0x1f17dc60>
 390:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 394:	00001802 	andeq	r1, r0, r2, lsl #16
 398:	3f002e1f 	svccc	0x00002e1f
 39c:	3a0e0319 	bcc	381008 <startup-0x1fc7eff8>
 3a0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 3a4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 3a8:	96184006 	ldrls	r4, [r8], -r6
 3ac:	00001942 	andeq	r1, r0, r2, asr #18
 3b0:	3f012e20 	svccc	0x00012e20
 3b4:	3a0e0319 	bcc	381020 <startup-0x1fc7efe0>
 3b8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 3bc:	11134919 	tstne	r3, r9, lsl r9
 3c0:	40061201 	andmi	r1, r6, r1, lsl #4
 3c4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 3c8:	00001301 	andeq	r1, r0, r1, lsl #6
 3cc:	03012e21 	movweq	r2, #7713	; 0x1e21
 3d0:	3b0b3a0e 	blcc	2cec10 <startup-0x1fd313f0>
 3d4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 3d8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 3dc:	96184006 	ldrls	r4, [r8], -r6
 3e0:	13011942 	movwne	r1, #6466	; 0x1942
 3e4:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
 3e8:	3a0e0301 	bcc	380ff4 <startup-0x1fc7f00c>
 3ec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 3f0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 3f4:	97184006 	ldrls	r4, [r8, -r6]
 3f8:	13011942 	movwne	r1, #6466	; 0x1942
 3fc:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
 400:	03193f00 	tsteq	r9, #0, 30
 404:	3b0b3a0e 	blcc	2cec44 <startup-0x1fd313bc>
 408:	1119270b 	tstne	r9, fp, lsl #14
 40c:	40061201 	andmi	r1, r6, r1, lsl #4
 410:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 414:	01000000 	mrseq	r0, (UNDEF: 0)
 418:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 41c:	0e030b13 	vmoveq.32	d3[0], r0
 420:	06120111 			; <UNDEFINED> instruction: 0x06120111
 424:	00001710 	andeq	r1, r0, r0, lsl r7
 428:	0b011302 	bleq	45038 <startup-0x1ffbafc8>
 42c:	3b0b3a0b 	blcc	2cec60 <startup-0x1fd313a0>
 430:	0013010b 	andseq	r0, r3, fp, lsl #2
 434:	000d0300 	andeq	r0, sp, r0, lsl #6
 438:	0b3a0e03 	bleq	e83c4c <startup-0x1f17c3b4>
 43c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 440:	00000b38 	andeq	r0, r0, r8, lsr fp
 444:	0b002404 	bleq	945c <startup-0x1fff6ba4>
 448:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 44c:	0500000e 	streq	r0, [r0, #-14]
 450:	0b0b000f 	bleq	2c0494 <startup-0x1fd3fb6c>
 454:	00001349 	andeq	r1, r0, r9, asr #6
 458:	03001606 	movweq	r1, #1542	; 0x606
 45c:	3b0b3a0e 	blcc	2cec9c <startup-0x1fd31364>
 460:	0013490b 	andseq	r4, r3, fp, lsl #18
 464:	01130700 	tsteq	r3, r0, lsl #14
 468:	0b0b0e03 	bleq	2c3c7c <startup-0x1fd3c384>
 46c:	0b3b0b3a 	bleq	ec315c <startup-0x1f13cea4>
 470:	00001301 	andeq	r1, r0, r1, lsl #6
 474:	0b002408 	bleq	949c <startup-0x1fff6b64>
 478:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 47c:	09000008 	stmdbeq	r0, {r3}
 480:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 484:	00001301 	andeq	r1, r0, r1, lsl #6
 488:	4900050a 	stmdbmi	r0, {r1, r3, r8, sl}
 48c:	0b000013 	bleq	4e0 <startup-0x1ffffb20>
 490:	13490101 	movtne	r0, #37121	; 0x9101
 494:	00001301 	andeq	r1, r0, r1, lsl #6
 498:	0000210c 	andeq	r2, r0, ip, lsl #2
 49c:	00340d00 	eorseq	r0, r4, r0, lsl #26
 4a0:	0b3a0e03 	bleq	e83cb4 <startup-0x1f17c34c>
 4a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 4a8:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 4ac:	340e0000 	strcc	r0, [lr], #-0
 4b0:	3a134700 	bcc	4d20b8 <startup-0x1fb2df48>
 4b4:	020b3b0b 	andeq	r3, fp, #11264	; 0x2c00
 4b8:	0f000018 	svceq	0x00000018
 4bc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 4c0:	0b3a0e03 	bleq	e83cd4 <startup-0x1f17c32c>
 4c4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 4c8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 4cc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 4d0:	00130119 	andseq	r0, r3, r9, lsl r1
 4d4:	00051000 	andeq	r1, r5, r0
 4d8:	0b3a0e03 	bleq	e83cec <startup-0x1f17c314>
 4dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 4e0:	00001802 	andeq	r1, r0, r2, lsl #16
 4e4:	3f012e11 	svccc	0x00012e11
 4e8:	3a0e0319 	bcc	381154 <startup-0x1fc7eeac>
 4ec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 4f0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 4f4:	97184006 	ldrls	r4, [r8, -r6]
 4f8:	00001942 	andeq	r1, r0, r2, asr #18
 4fc:	01110100 	tsteq	r1, r0, lsl #2
 500:	0b130e25 	bleq	4c3d9c <startup-0x1fb3c264>
 504:	01110e03 	tsteq	r1, r3, lsl #28
 508:	17100612 			; <UNDEFINED> instruction: 0x17100612
 50c:	13020000 	movwne	r0, #8192	; 0x2000
 510:	3a0b0b01 	bcc	2c311c <startup-0x1fd3cee4>
 514:	010b3b0b 	tsteq	fp, fp, lsl #22
 518:	03000013 	movweq	r0, #19
 51c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 520:	0b3b0b3a 	bleq	ec3210 <startup-0x1f13cdf0>
 524:	0b381349 	bleq	e05250 <startup-0x1f1fadb0>
 528:	24040000 	strcs	r0, [r4], #-0
 52c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 530:	000e030b 	andeq	r0, lr, fp, lsl #6
 534:	00160500 	andseq	r0, r6, r0, lsl #10
 538:	0b3a0e03 	bleq	e83d4c <startup-0x1f17c2b4>
 53c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 540:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
 544:	03193f01 	tsteq	r9, #1, 30
 548:	3b0b3a0e 	blcc	2ced88 <startup-0x1fd31278>
 54c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 550:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 554:	96184006 	ldrls	r4, [r8], -r6
 558:	13011942 	movwne	r1, #6466	; 0x1942
 55c:	05070000 	streq	r0, [r7, #-0]
 560:	3a080300 	bcc	201168 <startup-0x1fdfee98>
 564:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 568:	00180213 	andseq	r0, r8, r3, lsl r2
 56c:	00340800 	eorseq	r0, r4, r0, lsl #16
 570:	0b3a0803 	bleq	e82584 <startup-0x1f17da7c>
 574:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 578:	00001802 	andeq	r1, r0, r2, lsl #16
 57c:	0b002409 	bleq	95a8 <startup-0x1fff6a58>
 580:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 584:	0a000008 	beq	5ac <startup-0x1ffffa54>
 588:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 58c:	0b3a0e03 	bleq	e83da0 <startup-0x1f17c260>
 590:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 594:	01111349 	tsteq	r1, r9, asr #6
 598:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 59c:	00194297 	mulseq	r9, r7, r2
 5a0:	002e0b00 	eoreq	r0, lr, r0, lsl #22
 5a4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 5a8:	0b3b0b3a 	bleq	ec3298 <startup-0x1f13cd68>
 5ac:	01111927 	tsteq	r1, r7, lsr #18
 5b0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 5b4:	00194297 	mulseq	r9, r7, r2
 5b8:	11010000 	mrsne	r0, (UNDEF: 1)
 5bc:	130e2501 	movwne	r2, #58625	; 0xe501
 5c0:	110e030b 	tstne	lr, fp, lsl #6
 5c4:	10061201 	andne	r1, r6, r1, lsl #4
 5c8:	02000017 	andeq	r0, r0, #23
 5cc:	0b0b0113 	bleq	2c0a20 <startup-0x1fd3f5e0>
 5d0:	0b3b0b3a 	bleq	ec32c0 <startup-0x1f13cd40>
 5d4:	00001301 	andeq	r1, r0, r1, lsl #6
 5d8:	03000d03 	movweq	r0, #3331	; 0xd03
 5dc:	3b0b3a0e 	blcc	2cee1c <startup-0x1fd311e4>
 5e0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 5e4:	0400000b 	streq	r0, [r0], #-11
 5e8:	0b0b0024 	bleq	2c0680 <startup-0x1fd3f980>
 5ec:	0e030b3e 	vmoveq.16	d3[0], r0
 5f0:	0f050000 	svceq	0x00050000
 5f4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 5f8:	06000013 			; <UNDEFINED> instruction: 0x06000013
 5fc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 600:	0b3b0b3a 	bleq	ec32f0 <startup-0x1f13cd10>
 604:	00001349 	andeq	r1, r0, r9, asr #6
 608:	03011307 	movweq	r1, #4871	; 0x1307
 60c:	3a0b0b0e 	bcc	2c324c <startup-0x1fd3cdb4>
 610:	010b3b0b 	tsteq	fp, fp, lsl #22
 614:	08000013 	stmdaeq	r0, {r0, r1, r4}
 618:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 61c:	0b3a0e03 	bleq	e83e30 <startup-0x1f17c1d0>
 620:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 624:	06120111 			; <UNDEFINED> instruction: 0x06120111
 628:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 62c:	00130119 	andseq	r0, r3, r9, lsl r1
 630:	00050900 	andeq	r0, r5, r0, lsl #18
 634:	0b3a0e03 	bleq	e83e48 <startup-0x1f17c1b8>
 638:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 63c:	00001802 	andeq	r1, r0, r2, lsl #16
 640:	01110100 	tsteq	r1, r0, lsl #2
 644:	0b130e25 	bleq	4c3ee0 <startup-0x1fb3c120>
 648:	01110e03 	tsteq	r1, r3, lsl #28
 64c:	17100612 			; <UNDEFINED> instruction: 0x17100612
 650:	13020000 	movwne	r0, #8192	; 0x2000
 654:	3a0b0b01 	bcc	2c3260 <startup-0x1fd3cda0>
 658:	010b3b0b 	tsteq	fp, fp, lsl #22
 65c:	03000013 	movweq	r0, #19
 660:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 664:	0b3b0b3a 	bleq	ec3354 <startup-0x1f13ccac>
 668:	0b381349 	bleq	e05394 <startup-0x1f1fac6c>
 66c:	24040000 	strcs	r0, [r4], #-0
 670:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 674:	000e030b 	andeq	r0, lr, fp, lsl #6
 678:	000f0500 	andeq	r0, pc, r0, lsl #10
 67c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 680:	16060000 	strne	r0, [r6], -r0
 684:	3a0e0300 	bcc	38128c <startup-0x1fc7ed74>
 688:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 68c:	07000013 	smladeq	r0, r3, r0, r0
 690:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 694:	0b3a0b0b 	bleq	e832c8 <startup-0x1f17cd38>
 698:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 69c:	24080000 	strcs	r0, [r8], #-0
 6a0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 6a4:	0008030b 	andeq	r0, r8, fp, lsl #6
 6a8:	01150900 	tsteq	r5, r0, lsl #18
 6ac:	13011927 	movwne	r1, #6439	; 0x1927
 6b0:	050a0000 	streq	r0, [sl, #-0]
 6b4:	00134900 	andseq	r4, r3, r0, lsl #18
 6b8:	01010b00 	tsteq	r1, r0, lsl #22
 6bc:	13011349 	movwne	r1, #4937	; 0x1349
 6c0:	210c0000 	mrscs	r0, (UNDEF: 12)
 6c4:	0d000000 	stceq	0, cr0, [r0, #-0]
 6c8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 6cc:	0b3b0b3a 	bleq	ec33bc <startup-0x1f13cc44>
 6d0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 6d4:	0000193c 	andeq	r1, r0, ip, lsr r9
 6d8:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 6dc:	000b2f13 	andeq	r2, fp, r3, lsl pc
 6e0:	00340f00 	eorseq	r0, r4, r0, lsl #30
 6e4:	0b3a0e03 	bleq	e83ef8 <startup-0x1f17c108>
 6e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 6ec:	00001802 	andeq	r1, r0, r2, lsl #16
 6f0:	03003410 	movweq	r3, #1040	; 0x410
 6f4:	3b0b3a0e 	blcc	2cef34 <startup-0x1fd310cc>
 6f8:	3f13490b 	svccc	0x0013490b
 6fc:	00180219 	andseq	r0, r8, r9, lsl r2
 700:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 704:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 708:	0b3b0b3a 	bleq	ec33f8 <startup-0x1f13cc08>
 70c:	01111927 	tsteq	r1, r7, lsr #18
 710:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 714:	01194296 			; <UNDEFINED> instruction: 0x01194296
 718:	12000013 	andne	r0, r0, #19
 71c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 720:	0b3b0b3a 	bleq	ec3410 <startup-0x1f13cbf0>
 724:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 728:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 72c:	3a0e0301 	bcc	381338 <startup-0x1fc7ecc8>
 730:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 734:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 738:	96184006 	ldrls	r4, [r8], -r6
 73c:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000002a8 	andeq	r0, r0, r8, lsr #5
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	059e0002 	ldreq	r0, [lr, #2]
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	200002b8 			; <UNDEFINED> instruction: 0x200002b8
  3c:	00000028 	andeq	r0, r0, r8, lsr #32
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	06650002 	strbteq	r0, [r5], -r2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200002e0 	andcs	r0, r0, r0, ror #5
  5c:	00000de4 	andeq	r0, r0, r4, ror #27
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	0f080002 	svceq	0x00080002
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200010c4 	andcs	r1, r0, r4, asr #1
  7c:	00000056 	andeq	r0, r0, r6, asr r0
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	10ec0002 	rscne	r0, ip, r2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	2000111c 	andcs	r1, r0, ip, lsl r1
  9c:	00000060 	andeq	r0, r0, r0, rrx
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	12250002 	eorne	r0, r5, #2
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	2000117c 	andcs	r1, r0, ip, ror r1
  bc:	00000028 	andeq	r0, r0, r8, lsr #32
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	13290002 			; <UNDEFINED> instruction: 0x13290002
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	200011a4 	andcs	r1, r0, r4, lsr #3
  dc:	000002a8 	andeq	r0, r0, r8, lsr #5
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200002b8 			; <UNDEFINED> instruction: 0x200002b8
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000017c 	andeq	r0, r0, ip, ror r1
   4:	010a0002 	tsteq	sl, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	6f6d2f3a 	svcvs	0x006d2f3a
  20:	2f632f70 	svccs	0x00632f70
  24:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
  28:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
  2c:	6f697461 	svcvs	0x00697461
  30:	2f72656e 	svccs	0x0072656e
  34:	70617267 	rsbvc	r7, r1, r7, ror #4
  38:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
  3c:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
  40:	00007961 	andeq	r7, r0, r1, ror #18
  44:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  48:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
  4c:	00010063 	andeq	r0, r1, r3, rrx
  50:	72707300 	rsbsvc	r7, r0, #0, 6
  54:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
  58:	00010068 	andeq	r0, r1, r8, rrx
  5c:	616d6900 	cmnvs	sp, r0, lsl #18
  60:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
  64:	00000100 	andeq	r0, r0, r0, lsl #2
  68:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
  6c:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
  70:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
  74:	00000100 	andeq	r0, r0, r0, lsl #2
  78:	70617267 	rsbvc	r7, r1, r7, ror #4
  7c:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
  80:	0100682e 	tsteq	r0, lr, lsr #16
  84:	6f6d0000 	svcvs	0x006d0000
  88:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
  8c:	6c625f72 	stclvs	15, cr5, [r2], #-456	; 0xfffffe38
  90:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
  94:	006d6278 	rsbeq	r6, sp, r8, ror r2
  98:	6d000001 	stcvs	0, cr0, [r0, #-4]
  9c:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
  a0:	6c5f7265 	lfmvs	f7, 2, [pc], {101}	; 0x65
  a4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
  a8:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
  ac:	00000100 	andeq	r0, r0, r0, lsl #2
  b0:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
  b4:	5f726574 	svcpl	0x00726574
  b8:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
  bc:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
  c0:	00000100 	andeq	r0, r0, r0, lsl #2
  c4:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
  c8:	625f656c 	subsvs	r6, pc, #108, 10	; 0x1b000000
  cc:	6b63616c 	blvs	18d8684 <startup-0x1e72797c>
  d0:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
  d4:	00000100 	andeq	r0, r0, r0, lsl #2
  d8:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
  dc:	675f656c 	ldrbvs	r6, [pc, -ip, ror #10]
  e0:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
  e4:	006d6278 	rsbeq	r6, sp, r8, ror r2
  e8:	63000001 	movwvs	r0, #1
  ec:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
  f0:	696c5f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
  f4:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
  f8:	006d6278 	rsbeq	r6, sp, r8, ror r2
  fc:	62000001 	andvs	r0, r0, #1
 100:	62782e67 	rsbsvs	r2, r8, #1648	; 0x670
 104:	0001006d 	andeq	r0, r1, sp, rrx
 108:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 10c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 110:	00000001 	andeq	r0, r0, r1
 114:	00020500 	andeq	r0, r2, r0, lsl #10
 118:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
 11c:	5e130119 	mrcpl	1, 0, r0, cr3, cr9, {0}
 120:	01000302 	tsteq	r0, r2, lsl #6
 124:	02050001 	andeq	r0, r5, #1
 128:	20000010 	andcs	r0, r0, r0, lsl r0
 12c:	2f010e03 	svccs	0x00010e03
 130:	3030303d 	eorscc	r3, r0, sp, lsr r0
 134:	3d741e03 	ldclcc	14, cr1, [r4, #-12]!
 138:	2f3e672f 	svccs	0x003e672f
 13c:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
 140:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
 144:	2f3e672f 	svccs	0x003e672f
 148:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
 14c:	152e023d 	strne	r0, [lr, #-573]!	; 0xfffffdc3
 150:	2f3c0a03 	svccs	0x003c0a03
 154:	ad596732 	ldclge	7, cr6, [r9, #-200]	; 0xffffff38
 158:	0a034b4b 	beq	d2e8c <startup-0x1ff2d174>
 15c:	ad59674a 	ldclge	7, cr6, [r9, #-296]	; 0xfffffed8
 160:	5a4d4b4b 	bpl	1352e94 <startup-0x1ecad16c>
 164:	3d4b4b4b 	vstrcc	d20, [fp, #-300]	; 0xfffffed4
 168:	4b3e4b3f 	blmi	f92e6c <startup-0x1f06d194>
 16c:	4b59593f 	blmi	1656670 <startup-0x1e9a9990>
 170:	5e753e59 	mrcpl	14, 3, r3, cr5, cr9, {2}
 174:	84595975 	ldrbhi	r5, [r9], #-2421	; 0xfffff68b
 178:	02746d03 	rsbseq	r6, r4, #3, 26	; 0xc0
 17c:	01010012 	tsteq	r1, r2, lsl r0
 180:	0000006a 	andeq	r0, r0, sl, rrx
 184:	00530002 	subseq	r0, r3, r2
 188:	01020000 	mrseq	r0, (UNDEF: 2)
 18c:	000d0efb 	strdeq	r0, [sp], -fp
 190:	01010101 	tsteq	r1, r1, lsl #2
 194:	01000000 	mrseq	r0, (UNDEF: 0)
 198:	43010000 	movwmi	r0, #4096	; 0x1000
 19c:	6f6d2f3a 	svcvs	0x006d2f3a
 1a0:	2f632f70 	svccs	0x00632f70
 1a4:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 1a8:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 1ac:	6f697461 	svcvs	0x00697461
 1b0:	2f72656e 	svccs	0x0072656e
 1b4:	70617267 	rsbvc	r7, r1, r7, ror #4
 1b8:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 1bc:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 1c0:	00007961 	andeq	r7, r0, r1, ror #18
 1c4:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 1c8:	632e6574 			; <UNDEFINED> instruction: 0x632e6574
 1cc:	00000100 	andeq	r0, r0, r0, lsl #2
 1d0:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 1d4:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
 1d8:	00000100 	andeq	r0, r0, r0, lsl #2
 1dc:	02050000 	andeq	r0, r5, #0
 1e0:	200002b8 			; <UNDEFINED> instruction: 0x200002b8
 1e4:	3d3d7515 	cfldr32cc	mvfx7, [sp, #-84]!	; 0xffffffac
 1e8:	0004023d 	andeq	r0, r4, sp, lsr r2
 1ec:	03490101 	movteq	r0, #37121	; 0x9101
 1f0:	00020000 	andeq	r0, r2, r0
 1f4:	0000007e 	andeq	r0, r0, lr, ror r0
 1f8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 1fc:	0101000d 	tsteq	r1, sp
 200:	00000101 	andeq	r0, r0, r1, lsl #2
 204:	00000100 	andeq	r0, r0, r0, lsl #2
 208:	2f3a4301 	svccs	0x003a4301
 20c:	2f706f6d 	svccs	0x00706f6d
 210:	6f4d2f63 	svcvs	0x004d2f63
 214:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
 218:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
 21c:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
 220:	72672f72 	rsbvc	r2, r7, #456	; 0x1c8
 224:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 228:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 22c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 230:	72670000 	rsbvc	r0, r7, #0
 234:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 238:	632e7363 			; <UNDEFINED> instruction: 0x632e7363
 23c:	00000100 	andeq	r0, r0, r0, lsl #2
 240:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 244:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
 248:	00000100 	andeq	r0, r0, r0, lsl #2
 24c:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
 250:	00682e65 	rsbeq	r2, r8, r5, ror #28
 254:	67000001 	strvs	r0, [r0, -r1]
 258:	6f656d61 	svcvs	0x00656d61
 25c:	63656a62 	cmnvs	r5, #401408	; 0x62000
 260:	00682e74 	rsbeq	r2, r8, r4, ror lr
 264:	67000001 	strvs	r0, [r0, -r1]
 268:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 26c:	2e736369 	cdpcs	3, 7, cr6, cr3, cr9, {3}
 270:	00010068 	andeq	r0, r1, r8, rrx
 274:	05000000 	streq	r0, [r0, #-0]
 278:	0002e002 	andeq	lr, r2, r2
 27c:	3d301520 	cfldr32cc	mvfx1, [r0, #-128]!	; 0xffffff80
 280:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
 284:	06010402 	streq	r0, [r1], -r2, lsl #8
 288:	3d670620 	stclcc	6, cr0, [r7, #-128]!	; 0xffffff80
 28c:	3d3d30a0 	ldccc	0, cr3, [sp, #-640]!	; 0xfffffd80
 290:	02003d3d 	andeq	r3, r0, #3904	; 0xf40
 294:	20060104 	andcs	r0, r6, r4, lsl #2
 298:	a03d6706 	eorsge	r6, sp, r6, lsl #14
 29c:	2f2f214b 	svccs	0x002f214b
 2a0:	4c5e2a2f 	mrrcmi	10, 2, r2, lr, cr15
 2a4:	5b57214f 	blpl	15c87e8 <startup-0x1ea37818>
 2a8:	4c4a0903 	mcrrmi	9, 0, r0, sl, cr3	; <UNPREDICTABLE>
 2ac:	03040200 	movweq	r0, #16896	; 0x4200
 2b0:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 2b4:	02005703 	andeq	r5, r0, #786432	; 0xc0000
 2b8:	3c060104 	stfccs	f0, [r6], {4}
 2bc:	2f674c06 	svccs	0x00674c06
 2c0:	4b2f674b 	blmi	bd9ff4 <startup-0x1f42600c>
 2c4:	68a14b4b 	stmiavs	r1!, {r0, r1, r3, r6, r8, r9, fp, lr}
 2c8:	59839159 	stmibpl	r3, {r0, r3, r4, r6, r8, ip, pc}
 2cc:	d7596876 			; <UNDEFINED> instruction: 0xd7596876
 2d0:	67675983 	strbvs	r5, [r7, -r3, lsl #19]!
 2d4:	03741203 	cmneq	r4, #805306368	; 0x30000000
 2d8:	1203206e 	andne	r2, r3, #110	; 0x6e
 2dc:	2070034a 	rsbscs	r0, r0, sl, asr #6
 2e0:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 2e4:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
 2e8:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
 2ec:	3d3d3e4c 	ldccc	14, cr3, [sp, #-304]!	; 0xfffffed0
 2f0:	3d313d3d 	ldccc	13, cr3, [r1, #-244]!	; 0xffffff0c
 2f4:	313d752f 	teqcc	sp, pc, lsr #10
 2f8:	274a7903 	strbcs	r7, [sl, -r3, lsl #18]
 2fc:	67bc3d23 	ldrvs	r3, [ip, r3, lsr #26]!
 300:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 304:	2f3d2f59 	svccs	0x003d2f59
 308:	4b3e3d59 	blmi	f8f874 <startup-0x1f07078c>
 30c:	3d4b303d 	stclcc	0, cr3, [fp, #-244]	; 0xffffff0c
 310:	67bc3d31 			; <UNDEFINED> instruction: 0x67bc3d31
 314:	915a5959 	cmpls	sl, r9, asr r9
 318:	3d2f594b 			; <UNDEFINED> instruction: 0x3d2f594b
 31c:	3d593e2f 	ldclcc	14, cr3, [r9, #-188]	; 0xffffff44
 320:	313d5930 	teqcc	sp, r0, lsr r9
 324:	673d3d3d 			; <UNDEFINED> instruction: 0x673d3d3d
 328:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 32c:	914b833d 	cmpls	fp, sp, lsr r3
 330:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
 334:	3d2f4c83 	stccc	12, cr4, [pc, #-524]!	; 130 <startup-0x1ffffed0>
 338:	3d3d3d3e 	ldccc	13, cr3, [sp, #-248]!	; 0xffffff08
 33c:	3e3d3d3e 	mrccc	13, 1, r3, cr13, cr14, {1}
 340:	4b4b4b4b 	blmi	12d3074 <startup-0x1ed2cf8c>
 344:	3e3d3d4b 	cdpcc	13, 3, cr3, cr13, cr11, {2}
 348:	004c9f4b 	subeq	r9, ip, fp, asr #30
 34c:	4b030402 	blmi	c135c <startup-0x1ff3eca4>
 350:	03040200 	movweq	r0, #16896	; 0x4200
 354:	04020049 	streq	r0, [r2], #-73	; 0xffffffb7
 358:	00580601 	subseq	r0, r8, r1, lsl #12
 35c:	06020402 	streq	r0, [r2], -r2, lsl #8
 360:	04020046 	streq	r0, [r2], #-70	; 0xffffffba
 364:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 368:	2f764d52 	svccs	0x00764d52
 36c:	01040200 	mrseq	r0, R12_usr
 370:	02004a06 	andeq	r4, r0, #24576	; 0x6000
 374:	004a0204 	subeq	r0, sl, r4, lsl #4
 378:	4a030402 	bmi	c1388 <startup-0x1ff3ec78>
 37c:	13084c06 	movwne	r4, #35846	; 0x8c06
 380:	bc3e3d3d 	ldclt	13, cr3, [lr], #-244	; 0xffffff0c
 384:	3d76763d 	ldclcc	6, cr7, [r6, #-244]!	; 0xffffff0c
 388:	23d71fd9 	bicscs	r1, r7, #868	; 0x364
 38c:	d71fd93d 			; <UNDEFINED> instruction: 0xd71fd93d
 390:	1fd93d23 	svcne	0x00d93d23
 394:	2e6103d7 	mcrcs	3, 3, r0, cr1, cr7, {6}
 398:	af202303 	svcge	0x00202303
 39c:	04020069 	streq	r0, [r2], #-105	; 0xffffff97
 3a0:	004a0601 	subeq	r0, sl, r1, lsl #12
 3a4:	4a020402 	bmi	813b4 <startup-0x1ff7ec4c>
 3a8:	03040200 	movweq	r0, #16896	; 0x4200
 3ac:	754b064a 	strbvc	r0, [fp, #-1610]	; 0xfffff9b6
 3b0:	59591308 	ldmdbpl	r9, {r3, r8, r9, ip}^
 3b4:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 3b8:	763d5b59 			; <UNDEFINED> instruction: 0x763d5b59
 3bc:	4b4c4b3d 	blmi	13130b8 <startup-0x1ececf48>
 3c0:	9fd8c93e 	svcls	0x00d8c93e
 3c4:	a0ae3dca 	adcge	r3, lr, sl, asr #27
 3c8:	03ac5e03 			; <UNDEFINED> instruction: 0x03ac5e03
 3cc:	4c842023 	stcmi	0, cr2, [r4], {35}	; 0x23
 3d0:	0200592f 	andeq	r5, r0, #770048	; 0xbc000
 3d4:	58060104 	stmdapl	r6, {r2, r8}
 3d8:	02040200 	andeq	r0, r4, #0, 4
 3dc:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
 3e0:	02002004 	andeq	r2, r0, #4
 3e4:	3d060404 	cfstrscc	mvf0, [r6, #-16]
 3e8:	0075d759 	rsbseq	sp, r5, r9, asr r7
 3ec:	59030402 	stmdbpl	r3, {r1, sl}
 3f0:	03040200 	movweq	r0, #16896	; 0x4200
 3f4:	040200ab 	streq	r0, [r2], #-171	; 0xffffff55
 3f8:	009e0601 	addseq	r0, lr, r1, lsl #12
 3fc:	06020402 	streq	r0, [r2], -r2, lsl #8
 400:	04020055 	streq	r0, [r2], #-85	; 0xffffffab
 404:	00740601 	rsbseq	r0, r4, r1, lsl #12
 408:	06020402 	streq	r0, [r2], -r2, lsl #8
 40c:	04020056 	streq	r0, [r2], #-86	; 0xffffffaa
 410:	06740601 	ldrbteq	r0, [r4], -r1, lsl #12
 414:	52580a03 	subspl	r0, r8, #12288	; 0x3000
 418:	595a5976 	ldmdbpl	sl, {r1, r2, r4, r5, r6, r8, fp, ip, lr}^
 41c:	3dbb3d3d 	ldccc	13, cr3, [fp, #244]!	; 0xf4
 420:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
 424:	0200e202 	andeq	lr, r0, #536870912	; 0x20000000
 428:	3c060104 	stfccs	f0, [r6], {4}
 42c:	02040200 	andeq	r0, r4, #0, 4
 430:	02003a06 	andeq	r3, r0, #24576	; 0x6000
 434:	3c060104 	stfccs	f0, [r6], {4}
 438:	02040200 	andeq	r0, r4, #0, 4
 43c:	02004906 	andeq	r4, r0, #98304	; 0x18000
 440:	3c060104 	stfccs	f0, [r6], {4}
 444:	580a0306 	stmdapl	sl, {r1, r2, r8, r9}
 448:	003d774c 	eorseq	r7, sp, ip, asr #14
 44c:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 450:	03040200 	movweq	r0, #16896	; 0x4200
 454:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
 458:	003c0601 	eorseq	r0, ip, r1, lsl #12
 45c:	06020402 	streq	r0, [r2], -r2, lsl #8
 460:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
 464:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 468:	3d774c6b 	ldclcc	12, cr4, [r7, #-428]!	; 0xfffffe54
 46c:	03040200 	movweq	r0, #16896	; 0x4200
 470:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 474:	02006503 	andeq	r6, r0, #12582912	; 0xc00000
 478:	3c060104 	stfccs	f0, [r6], {4}
 47c:	02040200 	andeq	r0, r4, #0, 4
 480:	02006506 	andeq	r6, r0, #25165824	; 0x1800000
 484:	3c060104 	stfccs	f0, [r6], {4}
 488:	3d4d6b06 	vstrcc	d22, [sp, #-24]	; 0xffffffe8
 48c:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
 490:	02006930 	andeq	r6, r0, #48, 18	; 0xc0000
 494:	00300104 	eorseq	r0, r0, r4, lsl #2
 498:	2f010402 	svccs	0x00010402
 49c:	01040200 	mrseq	r0, R12_usr
 4a0:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 4a4:	0200c901 	andeq	ip, r0, #16384	; 0x4000
 4a8:	13080104 	movwne	r0, #33028	; 0x8104
 4ac:	01040200 	mrseq	r0, R12_usr
 4b0:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 4b4:	02002f01 	andeq	r2, r0, #1, 30
 4b8:	00680104 	rsbeq	r0, r8, r4, lsl #2
 4bc:	c9010402 	stmdbgt	r1, {r1, sl}
 4c0:	01040200 	mrseq	r0, R12_usr
 4c4:	02001308 	andeq	r1, r0, #8, 6	; 0x20000000
 4c8:	00920104 	addseq	r0, r2, r4, lsl #2
 4cc:	4b010402 	blmi	414dc <startup-0x1ffbeb24>
 4d0:	01040200 	mrseq	r0, R12_usr
 4d4:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 4d8:	02002f01 	andeq	r2, r0, #1, 30
 4dc:	00670104 	rsbeq	r0, r7, r4, lsl #2
 4e0:	08010402 	stmdaeq	r1, {r1, sl}
 4e4:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 4e8:	02004c01 	andeq	r4, r0, #256	; 0x100
 4ec:	6c030104 	stfvss	f0, [r3], {4}
 4f0:	4a19033c 	bmi	6411e8 <startup-0x1f9bee18>
 4f4:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 4f8:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 4fc:	91080304 	tstls	r8, r4, lsl #6
 500:	03040200 	movweq	r0, #16896	; 0x4200
 504:	02009108 	andeq	r9, r0, #8, 2
 508:	91080304 	tstls	r8, r4, lsl #6
 50c:	03040200 	movweq	r0, #16896	; 0x4200
 510:	02004608 	andeq	r4, r0, #8, 12	; 0x800000
 514:	3c060104 	stfccs	f0, [r6], {4}
 518:	3e085006 	cdpcc	0, 0, cr5, cr8, cr6, {0}
 51c:	21083d4b 	tstcs	r8, fp, asr #26
 520:	21082108 	tstcs	r8, r8, lsl #2
 524:	21304b4d 	teqcs	r0, sp, asr #22
 528:	3e4b3e4b 	cdpcc	14, 4, cr3, cr11, cr11, {2}
 52c:	034b3e4b 	movteq	r3, #48715	; 0xbe4b
 530:	0e033c75 	mcreq	12, 0, r3, cr3, cr5, {3}
 534:	0b023058 	bleq	8c69c <startup-0x1ff73964>
 538:	8c010100 	stfhis	f0, [r1], {-0}
 53c:	02000000 	andeq	r0, r0, #0
 540:	00007200 	andeq	r7, r0, r0, lsl #4
 544:	fb010200 	blx	40d4e <startup-0x1ffbf2b2>
 548:	01000d0e 	tsteq	r0, lr, lsl #26
 54c:	00010101 	andeq	r0, r1, r1, lsl #2
 550:	00010000 	andeq	r0, r1, r0
 554:	3a430100 	bcc	10c095c <startup-0x1ef3f6a4>
 558:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 55c:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 4a8 <startup-0x1ffffb58>
 560:	616c706f 	cmnvs	ip, pc, rrx
 564:	61726f62 	cmnvs	r2, r2, ror #30
 568:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 56c:	672f7265 	strvs	r7, [pc, -r5, ror #4]!
 570:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 574:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 578:	616c7073 	smcvs	50947	; 0xc703
 57c:	67000079 	smlsdxvs	r0, r9, r0, r0
 580:	6f656d61 	svcvs	0x00656d61
 584:	63656a62 	cmnvs	r5, #401408	; 0x62000
 588:	00632e74 	rsbeq	r2, r3, r4, ror lr
 58c:	73000001 	movwvc	r0, #1
 590:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 594:	00682e65 	rsbeq	r2, r8, r5, ror #28
 598:	69000001 	stmdbvs	r0, {r0}
 59c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
 5a0:	0100682e 	tsteq	r0, lr, lsr #16
 5a4:	61670000 	cmnvs	r7, r0
 5a8:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
 5ac:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 5b0:	0100682e 	tsteq	r0, lr, lsr #16
 5b4:	00000000 	andeq	r0, r0, r0
 5b8:	10c40205 	sbcne	r0, r4, r5, lsl #4
 5bc:	4c192000 	ldcmi	0, cr2, [r9], {-0}
 5c0:	67594b4c 	ldrbvs	r4, [r9, -ip, asr #22]
 5c4:	0402ca3d 	streq	ip, [r2], #-2621	; 0xfffff5c3
 5c8:	6d010100 	stfvss	f0, [r1, #-0]
 5cc:	02000000 	andeq	r0, r0, #0
 5d0:	00004f00 	andeq	r4, r0, r0, lsl #30
 5d4:	fb010200 	blx	40dde <startup-0x1ffbf222>
 5d8:	01000d0e 	tsteq	r0, lr, lsl #26
 5dc:	00010101 	andeq	r0, r1, r1, lsl #2
 5e0:	00010000 	andeq	r0, r1, r0
 5e4:	3a430100 	bcc	10c09ec <startup-0x1ef3f614>
 5e8:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 5ec:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 538 <startup-0x1ffffac8>
 5f0:	616c706f 	cmnvs	ip, pc, rrx
 5f4:	61726f62 	cmnvs	r2, r2, ror #30
 5f8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 5fc:	672f7265 	strvs	r7, [pc, -r5, ror #4]!
 600:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 604:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 608:	616c7073 	smcvs	50947	; 0xc703
 60c:	67000079 	smlsdxvs	r0, r9, r0, r0
 610:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 614:	00010063 	andeq	r0, r1, r3, rrx
 618:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 61c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 620:	00000001 	andeq	r0, r0, r1
 624:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
 628:	15200011 	strne	r0, [r0, #-17]!	; 0xffffffef
 62c:	2f763d2f 	svccs	0x00763d2f
 630:	674b5b3d 	smlaldxvs	r5, fp, sp, fp
 634:	02223091 	eoreq	r3, r2, #145	; 0x91
 638:	01010004 	tsteq	r1, r4
 63c:	00000074 	andeq	r0, r0, r4, ror r0
 640:	005d0002 	subseq	r0, sp, r2
 644:	01020000 	mrseq	r0, (UNDEF: 2)
 648:	000d0efb 	strdeq	r0, [sp], -fp
 64c:	01010101 	tsteq	r1, r1, lsl #2
 650:	01000000 	mrseq	r0, (UNDEF: 0)
 654:	43010000 	movwmi	r0, #4096	; 0x1000
 658:	6f6d2f3a 	svcvs	0x006d2f3a
 65c:	2f632f70 	svccs	0x00632f70
 660:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 664:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 668:	6f697461 	svcvs	0x00697461
 66c:	2f72656e 	svccs	0x0072656e
 670:	70617267 	rsbvc	r7, r1, r7, ror #4
 674:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 678:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 67c:	00007961 	andeq	r7, r0, r1, ror #18
 680:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
 684:	00632e65 	rsbeq	r2, r3, r5, ror #28
 688:	73000001 	movwvc	r0, #1
 68c:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 690:	00682e65 	rsbeq	r2, r8, r5, ror #28
 694:	69000001 	stmdbvs	r0, {r0}
 698:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
 69c:	0100682e 	tsteq	r0, lr, lsr #16
 6a0:	00000000 	andeq	r0, r0, r0
 6a4:	117c0205 	cmnne	ip, r5, lsl #4
 6a8:	75142000 	ldrvc	r2, [r4, #-0]
 6ac:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
 6b0:	01010004 	tsteq	r1, r4
 6b4:	00000186 	andeq	r0, r0, r6, lsl #3
 6b8:	01390002 	teqeq	r9, r2
 6bc:	01020000 	mrseq	r0, (UNDEF: 2)
 6c0:	000d0efb 	strdeq	r0, [sp], -fp
 6c4:	01010101 	tsteq	r1, r1, lsl #2
 6c8:	01000000 	mrseq	r0, (UNDEF: 0)
 6cc:	43010000 	movwmi	r0, #4096	; 0x1000
 6d0:	6f6d2f3a 	svcvs	0x006d2f3a
 6d4:	2f632f70 	svccs	0x00632f70
 6d8:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 6dc:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 6e0:	6f697461 	svcvs	0x00697461
 6e4:	2f72656e 	svccs	0x0072656e
 6e8:	70617267 	rsbvc	r7, r1, r7, ror #4
 6ec:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 6f0:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 6f4:	00007961 	andeq	r7, r0, r1, ror #18
 6f8:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 6fc:	0100632e 	tsteq	r0, lr, lsr #6
 700:	70730000 	rsbsvc	r0, r3, r0
 704:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 708:	0100682e 	tsteq	r0, lr, lsr #16
 70c:	6d690000 	stclvs	0, cr0, [r9, #-0]
 710:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
 714:	00010068 	andeq	r0, r1, r8, rrx
 718:	6d616700 	stclvs	7, cr6, [r1, #-0]
 71c:	6a626f65 	bvs	189c4b8 <startup-0x1e763b48>
 720:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 724:	00010068 	andeq	r0, r1, r8, rrx
 728:	72696600 	rsbvc	r6, r9, #0, 12
 72c:	6c625f65 	stclvs	15, cr5, [r2], #-404	; 0xfffffe6c
 730:	5f6b6361 	svcpl	0x006b6361
 734:	62782e32 	rsbsvs	r2, r8, #800	; 0x320
 738:	0001006d 	andeq	r0, r1, sp, rrx
 73c:	72696600 	rsbvc	r6, r9, #0, 12
 740:	675f3165 	ldrbvs	r3, [pc, -r5, ror #2]
 744:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
 748:	006d6278 	rsbeq	r6, sp, r8, ror r2
 74c:	66000001 	strvs	r0, [r0], -r1
 750:	31657269 	cmncc	r5, r9, ror #4
 754:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
 758:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
 75c:	01006d62 	tsteq	r0, r2, ror #26
 760:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
 764:	5f326572 	svcpl	0x00326572
 768:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
 76c:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 770:	00000100 	andeq	r0, r0, r0, lsl #2
 774:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 778:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
 77c:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
 780:	006d6278 	rsbeq	r6, sp, r8, ror r2
 784:	66000001 	strvs	r0, [r0], -r1
 788:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
 78c:	6172675f 	cmnvs	r2, pc, asr r7
 790:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
 794:	0001006d 	andeq	r0, r1, sp, rrx
 798:	72696600 	rsbvc	r6, r9, #0, 12
 79c:	6c5f3365 	mrrcvs	3, 6, r3, pc, cr5	; <UNPREDICTABLE>
 7a0:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 7a4:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 7a8:	00000100 	andeq	r0, r0, r0, lsl #2
 7ac:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 7b0:	72675f34 	rsbvc	r5, r7, #52, 30	; 0xd0
 7b4:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
 7b8:	01006d62 	tsteq	r0, r2, ror #26
 7bc:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
 7c0:	5f346572 	svcpl	0x00346572
 7c4:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 7c8:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
 7cc:	0001006d 	andeq	r0, r1, sp, rrx
 7d0:	72696600 	rsbvc	r6, r9, #0, 12
 7d4:	675f3565 	ldrbvs	r3, [pc, -r5, ror #10]
 7d8:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
 7dc:	006d6278 	rsbeq	r6, sp, r8, ror r2
 7e0:	66000001 	strvs	r0, [r0], -r1
 7e4:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
 7e8:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
 7ec:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
 7f0:	01006d62 	tsteq	r0, r2, ror #26
 7f4:	00000000 	andeq	r0, r0, r0
 7f8:	11a40205 			; <UNDEFINED> instruction: 0x11a40205
 7fc:	30032000 	andcc	r2, r3, r0
 800:	672f3d01 	strvs	r3, [pc, -r1, lsl #26]!
 804:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
 808:	2f3e672f 	svccs	0x003e672f
 80c:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
 810:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
 814:	2f3e672f 	svccs	0x003e672f
 818:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
 81c:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
 820:	023d672f 	eorseq	r6, sp, #12320768	; 0xbc0000
 824:	4b4c1446 	blmi	1305944 <startup-0x1ecfa6bc>
 828:	594b3e2f 	stmdbpl	fp, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}^
 82c:	915a5959 	cmpls	sl, r9, asr r9
 830:	93919191 	orrsls	r9, r1, #1073741860	; 0x40000024
 834:	3d3d3d3e 	ldccc	13, cr3, [sp, #-248]!	; 0xffffff08
 838:	0031023d 	eorseq	r0, r1, sp, lsr r2
 83c:	Address 0x0000083c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
   4:	49726574 	ldmdbmi	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
   8:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
   c:	72646900 	rsbvc	r6, r4, #0, 18
  10:	00776f4c 	rsbseq	r6, r7, ip, asr #30
  14:	5272646f 	rsbspl	r6, r2, #1862270976	; 0x6f000000
  18:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
  1c:	00646576 	rsbeq	r6, r4, r6, ror r5
  20:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
  24:	35726574 	ldrbcc	r6, [r2, #-1396]!	; 0xfffffa8c
  28:	696e6100 	stmdbvs	lr!, {r8, sp, lr}^
  2c:	6974616d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
  30:	635f6e6f 	cmpvs	pc, #1776	; 0x6f0
  34:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
  38:	70007265 	andvc	r7, r0, r5, ror #4
  3c:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
  40:	00377265 	eorseq	r7, r7, r5, ror #4
  44:	20554e47 	subscs	r4, r5, r7, asr #28
  48:	20393943 	eorscs	r3, r9, r3, asr #18
  4c:	2e332e36 	mrccs	14, 1, r2, cr3, cr6, {1}
  50:	30322031 	eorscc	r2, r2, r1, lsr r0
  54:	32303731 	eorscc	r3, r0, #12845056	; 0xc40000
  58:	28203531 	stmdacs	r0!, {r0, r4, r5, r8, sl, ip, sp}
  5c:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  60:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  64:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  68:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
  6c:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  70:	362d6465 	strtcc	r6, [sp], -r5, ror #8
  74:	6172622d 	cmnvs	r2, sp, lsr #4
  78:	2068636e 	rsbcs	r6, r8, lr, ror #6
  7c:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  80:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  84:	35343220 	ldrcc	r3, [r4, #-544]!	; 0xfffffde0
  88:	5d323135 	ldfpls	f3, [r2, #-212]!	; 0xffffff2c
  8c:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  90:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  94:	616d2d20 	cmnvs	sp, r0, lsr #26
  98:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  9c:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  a0:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  a4:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  a8:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  ac:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  b0:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  b4:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  b8:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  bc:	616d2d20 	cmnvs	sp, r0, lsr #26
  c0:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  c4:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  c8:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  cc:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  d0:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  d4:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  d8:	00393963 	eorseq	r3, r9, r3, ror #18
  dc:	736f5078 	cmnvc	pc, #120	; 0x78
  e0:	7a697300 	bvc	1a5cce8 <startup-0x1e5a3318>
  e4:	70797465 	rsbsvc	r7, r9, r5, ror #8
  e8:	75630065 	strbvc	r0, [r3, #-101]!	; 0xffffff9b
  ec:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
  f0:	72665f74 	rsbvc	r5, r6, #116, 30	; 0x1d0
  f4:	00656d61 	rsbeq	r6, r5, r1, ror #26
  f8:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
  fc:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
 100:	5f726566 	svcpl	0x00726566
 104:	63616c62 	cmnvs	r1, #25088	; 0x6200
 108:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
 10c:	6f4d706d 	svcvs	0x004d706d
 110:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
 114:	67694c72 			; <UNDEFINED> instruction: 0x67694c72
 118:	6d007468 	cfstrsvs	mvf7, [r0, #-416]	; 0xfffffe60
 11c:	006e6961 	rsbeq	r6, lr, r1, ror #18
 120:	636e4978 	cmnvs	lr, #120, 18	; 0x1e0000
 124:	61477400 	cmpvs	r7, r0, lsl #8
 128:	624f656d 	subvs	r6, pc, #457179136	; 0x1b400000
 12c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 130:	73616300 	cmnvc	r1, #0, 6
 134:	42656c74 	rsbmi	r6, r5, #116, 24	; 0x7400
 138:	6b63616c 	blvs	18d86f0 <startup-0x1e727910>
 13c:	73616300 	cmnvc	r1, #0, 6
 140:	47656c74 			; <UNDEFINED> instruction: 0x47656c74
 144:	00796172 	rsbseq	r6, r9, r2, ror r1
 148:	6b636162 	blvs	18d86d8 <startup-0x1e727928>
 14c:	66667542 	strbtvs	r7, [r6], -r2, asr #10
 150:	694c7265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp, lr}^
 154:	00746867 	rsbseq	r6, r4, r7, ror #16
 158:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 15c:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 160:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 164:	34726574 	ldrbtcc	r6, [r2], #-1396	; 0xfffffa8c
 168:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
 16c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 170:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
 174:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 178:	6f6d0036 	svcvs	0x006d0036
 17c:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
 180:	6c625f72 	stclvs	15, cr5, [r2], #-456	; 0xfffffe38
 184:	5f6b6361 	svcpl	0x006b6361
 188:	73746962 	cmnvc	r4, #1605632	; 0x188000
 18c:	61476e00 	cmpvs	r7, r0, lsl #28
 190:	624f656d 	subvs	r6, pc, #457179136	; 0x1b400000
 194:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 198:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
 19c:	00687464 	rsbeq	r7, r8, r4, ror #8
 1a0:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
 1a4:	3a430072 	bcc	10c0374 <startup-0x1ef3fc8c>
 1a8:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 1ac:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; f8 <startup-0x1fffff08>
 1b0:	616c706f 	cmnvs	ip, pc, rrx
 1b4:	61726f62 	cmnvs	r2, r2, ror #30
 1b8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 1bc:	672f7265 	strvs	r7, [pc, -r5, ror #4]!
 1c0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 1c4:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 1c8:	616c7073 	smcvs	50947	; 0xc703
 1cc:	74732f79 	ldrbtvc	r2, [r3], #-3961	; 0xfffff087
 1d0:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 1d4:	00632e70 	rsbeq	r2, r3, r0, ror lr
 1d8:	7079546f 	rsbsvc	r5, r9, pc, ror #8
 1dc:	6f007265 	svcvs	0x00007265
 1e0:	73655274 	cmnvc	r5, #116, 4	; 0x40000007
 1e4:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
 1e8:	72640064 	rsbvc	r0, r4, #100	; 0x64
 1ec:	625f7761 	subsvs	r7, pc, #25427968	; 0x1840000
 1f0:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 1f4:	6c625f72 	stclvs	15, cr5, [r2], #-456	; 0xfffffe38
 1f8:	5f6b6361 	svcpl	0x006b6361
 1fc:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 200:	70750074 	rsbsvc	r0, r5, r4, ror r0
 204:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
 208:	6f507900 	svcvs	0x00507900
 20c:	61630073 	smcvs	12291	; 0x3003
 210:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
 214:	006a624f 	rsbeq	r6, sl, pc, asr #4
 218:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
 21c:	50726574 	rsbspl	r6, r2, r4, ror r5
 220:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 224:	00327265 	eorseq	r7, r2, r5, ror #4
 228:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 22c:	63007265 	movwvs	r7, #613	; 0x265
 230:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
 234:	696c5f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 238:	5f746867 	svcpl	0x00746867
 23c:	73746962 	cmnvc	r4, #1605632	; 0x188000
 240:	67696c00 	strbvs	r6, [r9, -r0, lsl #24]!
 244:	6d497468 	cfstrdvs	mvd7, [r9, #-416]	; 0xfffffe60
 248:	00656761 	rsbeq	r6, r5, r1, ror #14
 24c:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
 250:	47726574 			; <UNDEFINED> instruction: 0x47726574
 254:	00796172 	rsbseq	r6, r9, r2, ror r1
 258:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 25c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 260:	61686320 	cmnvs	r8, r0, lsr #6
 264:	65740072 	ldrbvs	r0, [r4, #-114]!	; 0xffffff8e
 268:	6f4d706d 	svcvs	0x004d706d
 26c:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
 270:	61724772 	cmnvs	r2, r2, ror r7
 274:	65680079 	strbvs	r0, [r8, #-121]!	; 0xffffff87
 278:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 27c:	70536f00 	subsvc	r6, r3, r0, lsl #30
 280:	72646565 	rsbvc	r6, r4, #423624704	; 0x19400000
 284:	69777300 	ldmdbvs	r7!, {r8, r9, ip, sp, lr}^
 288:	5f686374 	svcpl	0x00686374
 28c:	6f72657a 	svcvs	0x0072657a
 290:	6f687300 	svcvs	0x00687300
 294:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
 298:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 29c:	2064656e 	rsbcs	r6, r4, lr, ror #10
 2a0:	00746e69 	rsbseq	r6, r4, r9, ror #28
 2a4:	4f495047 	svcmi	0x00495047
 2a8:	72646900 	rsbvc	r6, r4, #0, 18
 2ac:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
 2b0:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
 2b4:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 2b8:	70615f74 	rsbvc	r5, r1, r4, ror pc
 2bc:	6f4d0070 	svcvs	0x004d0070
 2c0:	00726564 	rsbseq	r6, r2, r4, ror #10
 2c4:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
 2c8:	4c726574 	cfldr64mi	mvdx6, [r2], #-464	; 0xfffffe30
 2cc:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 2d0:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
 2d4:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 2d8:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
 2dc:	63007365 	movwvs	r7, #869	; 0x365
 2e0:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
 2e4:	67694c65 	strbvs	r4, [r9, -r5, ror #24]!
 2e8:	74007468 	strvc	r7, [r0], #-1128	; 0xfffffb98
 2ec:	43706d65 	cmnmi	r0, #6464	; 0x1940
 2f0:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
 2f4:	61724765 	cmnvs	r2, r5, ror #14
 2f8:	64690079 	strbtvs	r0, [r9], #-121	; 0xffffff87
 2fc:	67694872 			; <UNDEFINED> instruction: 0x67694872
 300:	65740068 	ldrbvs	r0, [r4, #-104]!	; 0xffffff98
 304:	6143706d 	cmpvs	r3, sp, rrx
 308:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
 30c:	63616c42 	cmnvs	r1, #16896	; 0x4200
 310:	6163006b 	cmnvs	r3, fp, rrx
 314:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
 318:	6172675f 	cmnvs	r2, pc, asr r7
 31c:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 320:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
 324:	43706d65 	cmnmi	r0, #6464	; 0x1940
 328:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
 32c:	67694c65 	strbvs	r4, [r9, -r5, ror #24]!
 330:	62007468 	andvs	r7, r0, #104, 8	; 0x68000000
 334:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
 338:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 33c:	61724772 	cmnvs	r2, r2, ror r7
 340:	5f6e0079 	svcpl	0x006e0079
 344:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
 348:	74007365 	strvc	r7, [r0], #-869	; 0xfffffc9b
 34c:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
 350:	6e690067 	cdpvs	0, 6, cr0, cr9, cr7, {3}
 354:	70537469 	subsvc	r7, r3, r9, ror #8
 358:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 35c:	61670073 	smcvs	28675	; 0x7003
 360:	624f656d 	subvs	r6, pc, #457179136	; 0x1b400000
 364:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 368:	6f6d0073 	svcvs	0x006d0073
 36c:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
 370:	6a624f72 	bvs	1894140 <startup-0x1e76bec0>
 374:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 378:	6e6f4d70 	mcrvs	13, 3, r4, cr15, cr0, {3}
 37c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 380:	616c6200 	cmnvs	ip, r0, lsl #4
 384:	6d496b63 	vstrvs	d22, [r9, #-396]	; 0xfffffe74
 388:	00656761 	rsbeq	r6, r5, r1, ror #14
 38c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
 390:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
 394:	6f6d0065 	svcvs	0x006d0065
 398:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
 39c:	696f5072 	stmdbvs	pc!, {r1, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
 3a0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 3a4:	61726400 	cmnvs	r2, r0, lsl #8
 3a8:	75625f77 	strbvc	r5, [r2, #-3959]!	; 0xfffff089
 3ac:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 3b0:	616c625f 	cmnvs	ip, pc, asr r2
 3b4:	675f6b63 	ldrbvs	r6, [pc, -r3, ror #22]
 3b8:	5f796172 	svcpl	0x00796172
 3bc:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 3c0:	6f6d0074 	svcvs	0x006d0074
 3c4:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
 3c8:	696c5f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 3cc:	5f746867 	svcpl	0x00746867
 3d0:	73746962 	cmnvc	r4, #1605632	; 0x188000
 3d4:	61726400 	cmnvs	r2, r0, lsl #8
 3d8:	75625f77 	strbvc	r5, [r2, #-3959]!	; 0xfffff089
 3dc:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 3e0:	616c625f 	cmnvs	ip, pc, asr r2
 3e4:	675f6b63 	ldrbvs	r6, [pc, -r3, ror #22]
 3e8:	00796172 	rsbseq	r6, r9, r2, ror r1
 3ec:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
 3f0:	50726574 	rsbspl	r6, r2, r4, ror r5
 3f4:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 3f8:	00337265 	eorseq	r7, r3, r5, ror #4
 3fc:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 400:	00707574 	rsbseq	r7, r0, r4, ror r5
 404:	6d696e61 	stclvs	14, cr6, [r9, #-388]!	; 0xfffffe7c
 408:	6f697461 	svcvs	0x00697461
 40c:	70735f6e 	rsbsvc	r5, r3, lr, ror #30
 410:	00646565 	rsbeq	r6, r4, r5, ror #10
 414:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
 418:	6d49656c 	cfstr64vs	mvdx6, [r9, #-432]	; 0xfffffe50
 41c:	73656761 	cmnvc	r5, #25427968	; 0x1840000
 420:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
 424:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 428:	6172675f 	cmnvs	r2, pc, asr r7
 42c:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 430:	66007374 			; <UNDEFINED> instruction: 0x66007374
 434:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
 438:	72646f00 	rsbvc	r6, r4, #0, 30
 43c:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
 440:	5f676200 	svcpl	0x00676200
 444:	73746962 	cmnvc	r4, #1605632	; 0x188000
 448:	616d6900 	cmnvs	sp, r0, lsl #18
 44c:	00736567 	rsbseq	r6, r3, r7, ror #10
 450:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
 454:	6d49656c 	cfstr64vs	mvdx6, [r9, #-432]	; 0xfffffe50
 458:	00656761 	rsbeq	r6, r5, r1, ror #14
 45c:	4c72646f 	cfldrdmi	mvd6, [r2], #-444	; 0xfffffe44
 460:	6300776f 	movwvs	r7, #1903	; 0x76f
 464:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
 468:	6c625f65 	stclvs	15, cr5, [r2], #-404	; 0xfffffe6c
 46c:	5f6b6361 	svcpl	0x006b6361
 470:	73746962 	cmnvc	r4, #1605632	; 0x188000
 474:	72696600 	rsbvc	r6, r9, #0, 12
 478:	43003365 	movwmi	r3, #869	; 0x365
 47c:	6f6d2f3a 	svcvs	0x006d2f3a
 480:	2f632f70 	svccs	0x00632f70
 484:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 488:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 48c:	6f697461 	svcvs	0x00697461
 490:	2f72656e 	svccs	0x0072656e
 494:	70617267 	rsbvc	r7, r1, r7, ror #4
 498:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 49c:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 4a0:	732f7961 			; <UNDEFINED> instruction: 0x732f7961
 4a4:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 4a8:	00632e65 	rsbeq	r2, r3, r5, ror #28
 4ac:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
 4b0:	7270735f 	rsbsvc	r7, r0, #2080374785	; 0x7c000001
 4b4:	00657469 	rsbeq	r7, r5, r9, ror #8
 4b8:	65676170 	strbvs	r6, [r7, #-368]!	; 0xfffffe90
 4bc:	61726700 	cmnvs	r2, r0, lsl #14
 4c0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 4c4:	6165725f 	cmnvs	r5, pc, asr r2
 4c8:	65730064 	ldrbvs	r0, [r3, #-100]!	; 0xffffff9c
 4cc:	70755f74 	rsbsvc	r5, r5, r4, ror pc
 4d0:	6172645f 	cmnvs	r2, pc, asr r4
 4d4:	75625f77 	strbvc	r5, [r2, #-3959]!	; 0xfffff089
 4d8:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 4dc:	75620073 	strbvc	r0, [r2, #-115]!	; 0xffffff8d
 4e0:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 4e4:	6c617600 	stclvs	6, cr7, [r1], #-0
 4e8:	70006575 	andvc	r6, r0, r5, ror r5
 4ec:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 4f0:	72640032 	rsbvc	r0, r4, #50	; 0x32
 4f4:	675f7761 	ldrbvs	r7, [pc, -r1, ror #14]
 4f8:	5f656d61 	svcpl	0x00656d61
 4fc:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 500:	64007463 	strvs	r7, [r0], #-1123	; 0xfffffb9d
 504:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 508:	63696d5f 	cmnvs	r9, #6080	; 0x17c0
 50c:	67006f72 	smlsdxvs	r0, r2, pc, r6	; <UNPREDICTABLE>
 510:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 514:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 518:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 51c:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 3a8 <startup-0x1ffffc58>
 520:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 524:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 528:	625f7261 	subsvs	r7, pc, #268435462	; 0x10000006
 52c:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
 530:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 534:	4f670072 	svcmi	0x00670072
 538:	67006a62 	strvs	r6, [r0, -r2, ror #20]
 53c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 540:	645f6369 	ldrbvs	r6, [pc], #-873	; 548 <startup-0x1ffffab8>
 544:	5f776172 	svcpl	0x00776172
 548:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 54c:	73006e65 	movwvc	r6, #3685	; 0xe65
 550:	5f776f68 	svcpl	0x00776f68
 554:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
 558:	72640065 	rsbvc	r0, r4, #101	; 0x65
 55c:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
 560:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 564:	65640065 	strbvs	r0, [r4, #-101]!	; 0xffffff9b
 568:	5f79616c 	svcpl	0x0079616c
 56c:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
 570:	72670069 	rsbvc	r0, r7, #105	; 0x69
 574:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 578:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 57c:	00657469 	rsbeq	r7, r5, r9, ror #8
 580:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
 584:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
 588:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 58c:	6f62616c 	svcvs	0x0062616c
 590:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 594:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 598:	6172672f 	cmnvs	r2, pc, lsr #14
 59c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 5a0:	70736964 	rsbsvc	r6, r3, r4, ror #18
 5a4:	2f79616c 	svccs	0x0079616c
 5a8:	70617267 	rsbvc	r7, r1, r7, ror #4
 5ac:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
 5b0:	6700632e 	strvs	r6, [r0, -lr, lsr #6]
 5b4:	53796172 	cmnpl	r9, #-2147483620	; 0x8000001c
 5b8:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
 5bc:	74736554 	ldrbtvc	r6, [r3], #-1364	; 0xfffffaac
 5c0:	61726700 	cmnvs	r2, r0, lsl #14
 5c4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 5c8:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 5cc:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 5d0:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 5d4:	00726165 	rsbseq	r6, r2, r5, ror #2
 5d8:	70617267 	rsbvc	r7, r1, r7, ror #4
 5dc:	5f636968 	svcpl	0x00636968
 5e0:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 5e4:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 5e8:	6f630061 	svcvs	0x00630061
 5ec:	00726f6c 	rsbseq	r6, r2, ip, ror #30
 5f0:	6c6c6966 			; <UNDEFINED> instruction: 0x6c6c6966
 5f4:	74636552 	strbtvc	r6, [r3], #-1362	; 0xfffffaae
 5f8:	6c676e61 	stclvs	14, cr6, [r7], #-388	; 0xfffffe7c
 5fc:	72670065 	rsbvc	r0, r7, #101	; 0x65
 600:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 604:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 608:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 60c:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 610:	64007465 	strvs	r7, [r0], #-1125	; 0xfffffb9b
 614:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 618:	3035325f 	eorscc	r3, r5, pc, asr r2
 61c:	6300736e 	movwvs	r7, #878	; 0x36e
 620:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 624:	6c6c615f 	stfvse	f6, [ip], #-380	; 0xfffffe84
 628:	6361625f 	cmnvs	r1, #-268435451	; 0xf0000005
 62c:	6675426b 	ldrbtvs	r4, [r5], -fp, ror #4
 630:	73726566 	cmnvc	r2, #427819008	; 0x19800000
 634:	78697000 	stmdavc	r9!, {ip, sp, lr}^
 638:	6d006c65 	stcvs	12, cr6, [r0, #-404]	; 0xfffffe6c
 63c:	006b7361 	rsbeq	r7, fp, r1, ror #6
 640:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
 644:	656c5f65 	strbvs	r5, [ip, #-3941]!	; 0xfffff09b
 648:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
 64c:	61726700 	cmnvs	r2, r0, lsl #14
 650:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 654:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 658:	645f6574 	ldrbvs	r6, [pc], #-1396	; 660 <startup-0x1ffff9a0>
 65c:	00617461 	rsbeq	r7, r1, r1, ror #8
 660:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
 664:	64697700 	strbtvs	r7, [r9], #-1792	; 0xfffff900
 668:	695f6874 	ldmdbvs	pc, {r2, r4, r5, r6, fp, sp, lr}^	; <UNPREDICTABLE>
 66c:	79625f6e 	stmdbvc	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 670:	00736574 	rsbseq	r6, r3, r4, ror r5
 674:	61656c63 	cmnvs	r5, r3, ror #24
 678:	63655272 	cmnvs	r5, #536870919	; 0x20000007
 67c:	676e6174 			; <UNDEFINED> instruction: 0x676e6174
 680:	6900656c 	stmdbvs	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
 684:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 688:	6c657300 	stclvs	3, cr7, [r5], #-0
 68c:	5f746365 	svcpl	0x00746365
 690:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 694:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 698:	67007265 	strvs	r7, [r0, -r5, ror #4]
 69c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 6a0:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 6a4:	5f746961 	svcpl	0x00746961
 6a8:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 6ac:	6c630079 	stclvs	0, cr0, [r3], #-484	; 0xfffffe1c
 6b0:	5f726165 	svcpl	0x00726165
 6b4:	73696874 	cmnvc	r9, #116, 16	; 0x740000
 6b8:	6b636142 	blvs	18d8bc8 <startup-0x1e727438>
 6bc:	66667542 	strbtvs	r7, [r6], -r2, asr #10
 6c0:	67007265 	strvs	r7, [r0, -r5, ror #4]
 6c4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 6c8:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 6cc:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
 6d0:	7a696c61 	bvc	1a5b85c <startup-0x1e5a47a4>
 6d4:	65640065 	strbvs	r0, [r4, #-101]!	; 0xffffff9b
 6d8:	5f79616c 	svcpl	0x0079616c
 6dc:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
 6e0:	72670073 	rsbvc	r0, r7, #115	; 0x73
 6e4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 6e8:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 6ec:	5f726165 	svcpl	0x00726165
 6f0:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 6f4:	67006e65 	strvs	r6, [r0, -r5, ror #28]
 6f8:	4f656d61 	svcmi	0x00656d61
 6fc:	63656a62 	cmnvs	r5, #401408	; 0x62000
 700:	64705574 	ldrbtvs	r5, [r0], #-1396	; 0xfffffa8c
 704:	00657461 	rsbeq	r7, r5, r1, ror #8
 708:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
 70c:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
 710:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 714:	6f62616c 	svcvs	0x0062616c
 718:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 71c:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 720:	6172672f 	cmnvs	r2, pc, lsr #14
 724:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 728:	70736964 	rsbsvc	r6, r3, r4, ror #18
 72c:	2f79616c 	svccs	0x0079616c
 730:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 734:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 738:	632e7463 			; <UNDEFINED> instruction: 0x632e7463
 73c:	69687400 	stmdbvs	r8!, {sl, ip, sp, lr}^
 740:	65730073 	ldrbvs	r0, [r3, #-115]!	; 0xffffff8d
 744:	70755f74 	rsbsvc	r5, r5, r4, ror pc
 748:	4c49445f 	cfstrdmi	mvd4, [r9], {95}	; 0x5f
 74c:	61657200 	cmnvs	r5, r0, lsl #4
 750:	49445f64 	stmdbmi	r4, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 754:	69735f4c 	ldmdbvs	r3!, {r2, r3, r6, r8, r9, sl, fp, ip, lr}^
 758:	656c676e 	strbvs	r6, [ip, #-1902]!	; 0xfffff892
 75c:	2f3a4300 	svccs	0x003a4300
 760:	2f706f6d 	svccs	0x00706f6d
 764:	6f4d2f63 	svcvs	0x004d2f63
 768:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
 76c:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
 770:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
 774:	72672f72 	rsbvc	r2, r7, #456	; 0x1c8
 778:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 77c:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 780:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 784:	6970672f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}^
 788:	00632e6f 	rsbeq	r2, r3, pc, ror #28
 78c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 790:	4c49445f 	cfstrdmi	mvd4, [r9], {95}	; 0x5f
 794:	2f3a4300 	svccs	0x003a4300
 798:	2f706f6d 	svccs	0x00706f6d
 79c:	6f4d2f63 	svcvs	0x004d2f63
 7a0:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
 7a4:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
 7a8:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
 7ac:	72672f72 	rsbvc	r2, r7, #456	; 0x1c8
 7b0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 7b4:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 7b8:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 7bc:	616d692f 	cmnvs	sp, pc, lsr #18
 7c0:	632e6567 			; <UNDEFINED> instruction: 0x632e6567
 7c4:	616f6c00 	cmnvs	pc, r0, lsl #24
 7c8:	6d695f64 	stclvs	15, cr5, [r9, #-400]!	; 0xfffffe70
 7cc:	00656761 	rsbeq	r6, r5, r1, ror #14
 7d0:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 7d4:	61724735 	cmnvs	r2, r5, lsr r7
 7d8:	69660079 	stmdbvs	r6!, {r0, r3, r4, r5, r6}^
 7dc:	47316572 			; <UNDEFINED> instruction: 0x47316572
 7e0:	00796172 	rsbseq	r6, r9, r2, ror r1
 7e4:	706d6574 	rsbvc	r6, sp, r4, ror r5
 7e8:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
 7ec:	61724732 	cmnvs	r2, r2, lsr r7
 7f0:	69660079 	stmdbvs	r6!, {r0, r3, r4, r5, r6}^
 7f4:	47336572 			; <UNDEFINED> instruction: 0x47336572
 7f8:	00796172 	rsbseq	r6, r9, r2, ror r1
 7fc:	706d6574 	rsbvc	r6, sp, r4, ror r5
 800:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
 804:	61724734 	cmnvs	r2, r4, lsr r7
 808:	69660079 	stmdbvs	r6!, {r0, r3, r4, r5, r6}^
 80c:	6c426572 	cfstr64vs	mvdx6, [r2], {114}	; 0x72
 810:	006b6361 	rsbeq	r6, fp, r1, ror #6
 814:	706d6574 	rsbvc	r6, sp, r4, ror r5
 818:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
 81c:	61724733 	cmnvs	r2, r3, lsr r7
 820:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
 824:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
 828:	6c426572 	cfstr64vs	mvdx6, [r2], {114}	; 0x72
 82c:	006b6361 	rsbeq	r6, fp, r1, ror #6
 830:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 834:	67694c34 			; <UNDEFINED> instruction: 0x67694c34
 838:	66007468 	strvs	r7, [r0], -r8, ror #8
 83c:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
 840:	6172675f 	cmnvs	r2, pc, asr r7
 844:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 848:	66007374 			; <UNDEFINED> instruction: 0x66007374
 84c:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
 850:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
 854:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
 858:	00737469 	rsbseq	r7, r3, r9, ror #8
 85c:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
 860:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
 864:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 868:	6f62616c 	svcvs	0x0062616c
 86c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 870:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 874:	6172672f 	cmnvs	r2, pc, lsr #14
 878:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 87c:	70736964 	rsbsvc	r6, r3, r4, ror #18
 880:	2f79616c 	svccs	0x0079616c
 884:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 888:	6600632e 	strvs	r6, [r0], -lr, lsr #6
 88c:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
 890:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
 894:	6f700074 	svcvs	0x00700074
 898:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 89c:	70003172 	andvc	r3, r0, r2, ror r1
 8a0:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 8a4:	00337265 	eorseq	r7, r3, r5, ror #4
 8a8:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 8ac:	72675f35 	rsbvc	r5, r7, #53, 30	; 0xd4
 8b0:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
 8b4:	00737469 	rsbseq	r7, r3, r9, ror #8
 8b8:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 8bc:	38726574 	ldmdacc	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
 8c0:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
 8c4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 8c8:	69660039 	stmdbvs	r6!, {r0, r3, r4, r5}^
 8cc:	49336572 	ldmdbmi	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}
 8d0:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
 8d4:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
 8d8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 8dc:	69660030 	stmdbvs	r6!, {r4, r5}^
 8e0:	4c356572 	cfldr32mi	mvfx6, [r5], #-456	; 0xfffffe38
 8e4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 8e8:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
 8ec:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 8f0:	65740032 	ldrbvs	r0, [r4, #-50]!	; 0xffffffce
 8f4:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
 8f8:	47356572 			; <UNDEFINED> instruction: 0x47356572
 8fc:	00796172 	rsbseq	r6, r9, r2, ror r1
 900:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 904:	72675f31 	rsbvc	r5, r7, #49, 30	; 0xc4
 908:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
 90c:	00737469 	rsbseq	r7, r3, r9, ror #8
 910:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 914:	67694c32 			; <UNDEFINED> instruction: 0x67694c32
 918:	66007468 	strvs	r7, [r0], -r8, ror #8
 91c:	31657269 	cmncc	r5, r9, ror #4
 920:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
 924:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
 928:	00737469 	rsbseq	r7, r3, r9, ror #8
 92c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 930:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
 934:	5f746867 	svcpl	0x00746867
 938:	73746962 	cmnvc	r4, #1605632	; 0x188000
 93c:	72696600 	rsbvc	r6, r9, #0, 12
 940:	6a624f65 	bvs	18946dc <startup-0x1e76b924>
 944:	72696600 	rsbvc	r6, r9, #0, 12
 948:	72473265 	subvc	r3, r7, #1342177286	; 0x50000006
 94c:	66007961 	strvs	r7, [r0], -r1, ror #18
 950:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
 954:	6172675f 	cmnvs	r2, pc, asr r7
 958:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 95c:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
 960:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
 964:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
 968:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
 96c:	69660074 	stmdbvs	r6!, {r2, r4, r5, r6}^
 970:	49346572 	ldmdbmi	r4!, {r1, r4, r5, r6, r8, sl, sp, lr}
 974:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
 978:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
 97c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 980:	74003031 	strvc	r3, [r0], #-49	; 0xffffffcf
 984:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
 988:	31657269 	cmncc	r5, r9, ror #4
 98c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
 990:	69660074 	stmdbvs	r6!, {r2, r4, r5, r6}^
 994:	54747372 	ldrbtpl	r7, [r4], #-882	; 0xfffffc8e
 998:	00656d69 	rsbeq	r6, r5, r9, ror #26
 99c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 9a0:	7269665f 	rsbvc	r6, r9, #99614720	; 0x5f00000
 9a4:	69660065 	stmdbvs	r6!, {r0, r2, r5, r6}^
 9a8:	5f356572 	svcpl	0x00356572
 9ac:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 9b0:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 9b4:	66007374 			; <UNDEFINED> instruction: 0x66007374
 9b8:	49657269 	stmdbmi	r5!, {r0, r3, r5, r6, r9, ip, sp, lr}^
 9bc:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
 9c0:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
 9c4:	49316572 	ldmdbmi	r1!, {r1, r4, r5, r6, r8, sl, sp, lr}
 9c8:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
 9cc:	72696600 	rsbvc	r6, r9, #0, 12
 9d0:	72473465 	subvc	r3, r7, #1694498816	; 0x65000000
 9d4:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
 9d8:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
 9dc:	31657269 	cmncc	r5, r9, ror #4
 9e0:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
 9e4:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 9e8:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
 9ec:	694c3465 	stmdbvs	ip, {r0, r2, r5, r6, sl, ip, sp}^
 9f0:	00746867 	rsbseq	r6, r4, r7, ror #16
 9f4:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 9f8:	696c5f33 	stmdbvs	ip!, {r0, r1, r4, r5, r8, r9, sl, fp, ip, lr}^
 9fc:	5f746867 	svcpl	0x00746867
 a00:	73746962 	cmnvc	r4, #1605632	; 0x188000
 a04:	72696600 	rsbvc	r6, r9, #0, 12
 a08:	6d493565 	cfstr64vs	mvdx3, [r9, #-404]	; 0xfffffe6c
 a0c:	00656761 	rsbeq	r6, r5, r1, ror #14
 a10:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 a14:	67694c31 			; <UNDEFINED> instruction: 0x67694c31
 a18:	66007468 	strvs	r7, [r0], -r8, ror #8
 a1c:	5f657269 	svcpl	0x00657269
 a20:	63616c62 	cmnvs	r1, #25088	; 0x6200
 a24:	5f325f6b 	svcpl	0x00325f6b
 a28:	73746962 	cmnvc	r4, #1605632	; 0x188000
 a2c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 a30:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
 a34:	694c3265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp}^
 a38:	00746867 	rsbseq	r6, r4, r7, ror #16
 a3c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 a40:	616d4932 	cmnvs	sp, r2, lsr r9
 a44:	74006567 	strvc	r6, [r0], #-1383	; 0xfffffa99
 a48:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
 a4c:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
 a50:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
 a54:	69660074 	stmdbvs	r6!, {r2, r4, r5, r6}^
 a58:	5f336572 	svcpl	0x00336572
 a5c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
 a60:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 a64:	Address 0x00000a64 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000024 	andeq	r0, r0, r4, lsr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000034 	andcs	r0, r0, r4, lsr r0
  48:	000000fc 	strdeq	r0, [r0], -ip
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	280e4101 	stmdacs	lr, {r0, r8, lr}
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	00000020 	andeq	r0, r0, r0, lsr #32
  60:	00000000 	andeq	r0, r0, r0
  64:	20000130 	andcs	r0, r0, r0, lsr r1
  68:	00000188 	andeq	r0, r0, r8, lsl #3
  6c:	400c0e41 	andmi	r0, ip, r1, asr #28
  70:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  74:	018e4002 	orreq	r4, lr, r2
  78:	01d80e41 	bicseq	r0, r8, r1, asr #28
  7c:	00070d41 	andeq	r0, r7, r1, asr #26
  80:	0000000c 	andeq	r0, r0, ip
  84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  88:	7c020001 	stcvc	0, cr0, [r2], {1}
  8c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000080 	andeq	r0, r0, r0, lsl #1
  98:	200002b8 			; <UNDEFINED> instruction: 0x200002b8
  9c:	00000028 	andeq	r0, r0, r8, lsr #32
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	180e4101 	stmdane	lr, {r0, r8, lr}
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	0000000c 	andeq	r0, r0, ip
  b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  b8:	7c020001 	stcvc	0, cr0, [r2], {1}
  bc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  c0:	00000018 	andeq	r0, r0, r8, lsl r0
  c4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
  c8:	200002e0 	andcs	r0, r0, r0, ror #5
  cc:	00000044 	andeq	r0, r0, r4, asr #32
  d0:	40080e41 	andmi	r0, r8, r1, asr #28
  d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  dc:	00000018 	andeq	r0, r0, r8, lsl r0
  e0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
  e4:	20000324 	andcs	r0, r0, r4, lsr #6
  e8:	00000044 	andeq	r0, r0, r4, asr #32
  ec:	40080e41 	andmi	r0, r8, r1, asr #28
  f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 100:	20000368 	andcs	r0, r0, r8, ror #6
 104:	0000002c 	andeq	r0, r0, ip, lsr #32
 108:	40080e41 	andmi	r0, r8, r1, asr #28
 10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 110:	100e4101 	andne	r4, lr, r1, lsl #2
 114:	00070d41 	andeq	r0, r7, r1, asr #26
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 120:	20000394 	mulcs	r0, r4, r3
 124:	00000026 	andeq	r0, r0, r6, lsr #32
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	100e4101 	andne	r4, lr, r1, lsl #2
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 140:	200003ba 			; <UNDEFINED> instruction: 0x200003ba
 144:	00000032 	andeq	r0, r0, r2, lsr r0
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	180e4101 	stmdane	lr, {r0, r8, lr}
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	00000018 	andeq	r0, r0, r8, lsl r0
 15c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 160:	200003ec 	andcs	r0, r0, ip, ror #7
 164:	00000018 	andeq	r0, r0, r8, lsl r0
 168:	40080e41 	andmi	r0, r8, r1, asr #28
 16c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 170:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 174:	00000018 	andeq	r0, r0, r8, lsl r0
 178:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 17c:	20000404 	andcs	r0, r0, r4, lsl #8
 180:	00000030 	andeq	r0, r0, r0, lsr r0
 184:	40080e41 	andmi	r0, r8, r1, asr #28
 188:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 18c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 198:	20000434 	andcs	r0, r0, r4, lsr r4
 19c:	00000050 	andeq	r0, r0, r0, asr r0
 1a0:	40080e41 	andmi	r0, r8, r1, asr #28
 1a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1ac:	00070d41 	andeq	r0, r7, r1, asr #26
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 1b8:	20000484 	andcs	r0, r0, r4, lsl #9
 1bc:	00000058 	andeq	r0, r0, r8, asr r0
 1c0:	40080e41 	andmi	r0, r8, r1, asr #28
 1c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1cc:	00070d41 	andeq	r0, r7, r1, asr #26
 1d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 1d8:	200004dc 	ldrdcs	r0, [r0], -ip
 1dc:	00000066 	andeq	r0, r0, r6, rrx
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ec:	00070d41 	andeq	r0, r7, r1, asr #26
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 1f8:	20000542 	andcs	r0, r0, r2, asr #10
 1fc:	0000006e 	andeq	r0, r0, lr, rrx
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	100e4101 	andne	r4, lr, r1, lsl #2
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	0000001c 	andeq	r0, r0, ip, lsl r0
 214:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 218:	200005b0 			; <UNDEFINED> instruction: 0x200005b0
 21c:	00000094 	muleq	r0, r4, r0
 220:	40080e41 	andmi	r0, r8, r1, asr #28
 224:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 228:	180e4101 	stmdane	lr, {r0, r8, lr}
 22c:	00070d41 	andeq	r0, r7, r1, asr #26
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 238:	20000644 	andcs	r0, r0, r4, asr #12
 23c:	0000002a 	andeq	r0, r0, sl, lsr #32
 240:	40080e41 	andmi	r0, r8, r1, asr #28
 244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 248:	100e4101 	andne	r4, lr, r1, lsl #2
 24c:	00070d41 	andeq	r0, r7, r1, asr #26
 250:	0000001c 	andeq	r0, r0, ip, lsl r0
 254:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 258:	2000066e 	andcs	r0, r0, lr, ror #12
 25c:	0000007e 	andeq	r0, r0, lr, ror r0
 260:	40080e41 	andmi	r0, r8, r1, asr #28
 264:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 268:	100e4101 	andne	r4, lr, r1, lsl #2
 26c:	00070d41 	andeq	r0, r7, r1, asr #26
 270:	0000001c 	andeq	r0, r0, ip, lsl r0
 274:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 278:	200006ec 	andcs	r0, r0, ip, ror #13
 27c:	00000046 	andeq	r0, r0, r6, asr #32
 280:	40080e41 	andmi	r0, r8, r1, asr #28
 284:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 288:	100e4101 	andne	r4, lr, r1, lsl #2
 28c:	00070d41 	andeq	r0, r7, r1, asr #26
 290:	0000001c 	andeq	r0, r0, ip, lsl r0
 294:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 298:	20000732 	andcs	r0, r0, r2, lsr r7
 29c:	00000046 	andeq	r0, r0, r6, asr #32
 2a0:	40080e41 	andmi	r0, r8, r1, asr #28
 2a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a8:	100e4101 	andne	r4, lr, r1, lsl #2
 2ac:	00070d41 	andeq	r0, r7, r1, asr #26
 2b0:	00000018 	andeq	r0, r0, r8, lsl r0
 2b4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 2b8:	20000778 	andcs	r0, r0, r8, ror r7
 2bc:	0000006e 	andeq	r0, r0, lr, rrx
 2c0:	40080e41 	andmi	r0, r8, r1, asr #28
 2c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2c8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 2d4:	200007e6 	andcs	r0, r0, r6, ror #15
 2d8:	00000066 	andeq	r0, r0, r6, rrx
 2dc:	40080e41 	andmi	r0, r8, r1, asr #28
 2e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e4:	100e4101 	andne	r4, lr, r1, lsl #2
 2e8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 2f4:	2000084c 	andcs	r0, r0, ip, asr #16
 2f8:	00000180 	andeq	r0, r0, r0, lsl #3
 2fc:	40080e41 	andmi	r0, r8, r1, asr #28
 300:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 304:	200e4101 	andcs	r4, lr, r1, lsl #2
 308:	00070d41 	andeq	r0, r7, r1, asr #26
 30c:	0000001c 	andeq	r0, r0, ip, lsl r0
 310:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 314:	200009cc 	andcs	r0, r0, ip, asr #19
 318:	000001a0 	andeq	r0, r0, r0, lsr #3
 31c:	40080e41 	andmi	r0, r8, r1, asr #28
 320:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 324:	280e4101 	stmdacs	lr, {r0, r8, lr}
 328:	00070d41 	andeq	r0, r7, r1, asr #26
 32c:	0000001c 	andeq	r0, r0, ip, lsl r0
 330:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 334:	20000b6c 	andcs	r0, r0, ip, ror #22
 338:	000000d6 	ldrdeq	r0, [r0], -r6
 33c:	40080e41 	andmi	r0, r8, r1, asr #28
 340:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 344:	200e4101 	andcs	r4, lr, r1, lsl #2
 348:	00070d41 	andeq	r0, r7, r1, asr #26
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 354:	20000c42 	andcs	r0, r0, r2, asr #24
 358:	000000b8 	strheq	r0, [r0], -r8
 35c:	40080e41 	andmi	r0, r8, r1, asr #28
 360:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 364:	300e4101 	andcc	r4, lr, r1, lsl #2
 368:	00070d41 	andeq	r0, r7, r1, asr #26
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 374:	20000cfa 	strdcs	r0, [r0], -sl
 378:	00000052 	andeq	r0, r0, r2, asr r0
 37c:	40080e41 	andmi	r0, r8, r1, asr #28
 380:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 384:	200e4101 	andcs	r4, lr, r1, lsl #2
 388:	00070d41 	andeq	r0, r7, r1, asr #26
 38c:	0000001c 	andeq	r0, r0, ip, lsl r0
 390:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 394:	20000d4c 	andcs	r0, r0, ip, asr #26
 398:	00000052 	andeq	r0, r0, r2, asr r0
 39c:	40080e41 	andmi	r0, r8, r1, asr #28
 3a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3a4:	200e4101 	andcs	r4, lr, r1, lsl #2
 3a8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ac:	00000020 	andeq	r0, r0, r0, lsr #32
 3b0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 3b4:	20000d9e 	mulcs	r0, lr, sp
 3b8:	00000132 	andeq	r0, r0, r2, lsr r1
 3bc:	400c0e41 	andmi	r0, ip, r1, asr #28
 3c0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 3c4:	018e4002 	orreq	r4, lr, r2
 3c8:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 3cc:	0000070d 	andeq	r0, r0, sp, lsl #14
 3d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 3d8:	20000ed0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 3dc:	00000108 	andeq	r0, r0, r8, lsl #2
 3e0:	40080e41 	andmi	r0, r8, r1, asr #28
 3e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3e8:	100e4101 	andne	r4, lr, r1, lsl #2
 3ec:	00070d41 	andeq	r0, r7, r1, asr #26
 3f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 3f8:	20000fd8 	ldrdcs	r0, [r0], -r8
 3fc:	00000082 	andeq	r0, r0, r2, lsl #1
 400:	40080e41 	andmi	r0, r8, r1, asr #28
 404:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 408:	200e4101 	andcs	r4, lr, r1, lsl #2
 40c:	18070c41 	stmdane	r7, {r0, r6, sl, fp}
 410:	0000001c 	andeq	r0, r0, ip, lsl r0
 414:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 418:	2000105a 	andcs	r1, r0, sl, asr r0
 41c:	0000006a 	andeq	r0, r0, sl, rrx
 420:	40080e41 	andmi	r0, r8, r1, asr #28
 424:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 428:	100e4101 	andne	r4, lr, r1, lsl #2
 42c:	00070d41 	andeq	r0, r7, r1, asr #26
 430:	0000000c 	andeq	r0, r0, ip
 434:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 438:	7c020001 	stcvc	0, cr0, [r2], {1}
 43c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 440:	0000001c 	andeq	r0, r0, ip, lsl r0
 444:	00000430 	andeq	r0, r0, r0, lsr r4
 448:	200010c4 	andcs	r1, r0, r4, asr #1
 44c:	00000010 	andeq	r0, r0, r0, lsl r0
 450:	40080e41 	andmi	r0, r8, r1, asr #28
 454:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 458:	100e4101 	andne	r4, lr, r1, lsl #2
 45c:	00070d41 	andeq	r0, r7, r1, asr #26
 460:	0000001c 	andeq	r0, r0, ip, lsl r0
 464:	00000430 	andeq	r0, r0, r0, lsr r4
 468:	200010d4 	ldrdcs	r1, [r0], -r4
 46c:	00000046 	andeq	r0, r0, r6, asr #32
 470:	40080e41 	andmi	r0, r8, r1, asr #28
 474:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 478:	100e4101 	andne	r4, lr, r1, lsl #2
 47c:	00070d41 	andeq	r0, r7, r1, asr #26
 480:	0000000c 	andeq	r0, r0, ip
 484:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 488:	7c020001 	stcvc	0, cr0, [r2], {1}
 48c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 490:	00000018 	andeq	r0, r0, r8, lsl r0
 494:	00000480 	andeq	r0, r0, r0, lsl #9
 498:	2000111c 	andcs	r1, r0, ip, lsl r1
 49c:	00000018 	andeq	r0, r0, r8, lsl r0
 4a0:	40080e41 	andmi	r0, r8, r1, asr #28
 4a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4a8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 4ac:	00000018 	andeq	r0, r0, r8, lsl r0
 4b0:	00000480 	andeq	r0, r0, r0, lsl #9
 4b4:	20001134 	andcs	r1, r0, r4, lsr r1
 4b8:	00000014 	andeq	r0, r0, r4, lsl r0
 4bc:	40080e41 	andmi	r0, r8, r1, asr #28
 4c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4c4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 4c8:	00000020 	andeq	r0, r0, r0, lsr #32
 4cc:	00000480 	andeq	r0, r0, r0, lsl #9
 4d0:	20001148 	andcs	r1, r0, r8, asr #2
 4d4:	00000034 	andeq	r0, r0, r4, lsr r0
 4d8:	400c0e41 	andmi	r0, ip, r1, asr #28
 4dc:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 4e0:	018e4002 	orreq	r4, lr, r2
 4e4:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 4e8:	0000070d 	andeq	r0, r0, sp, lsl #14
 4ec:	0000000c 	andeq	r0, r0, ip
 4f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4f4:	7c020001 	stcvc	0, cr0, [r2], {1}
 4f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 500:	000004ec 	andeq	r0, r0, ip, ror #9
 504:	2000117c 	andcs	r1, r0, ip, ror r1
 508:	00000028 	andeq	r0, r0, r8, lsr #32
 50c:	40080e41 	andmi	r0, r8, r1, asr #28
 510:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 514:	180e4101 	stmdane	lr, {r0, r8, lr}
 518:	00070d41 	andeq	r0, r7, r1, asr #26
 51c:	0000000c 	andeq	r0, r0, ip
 520:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 524:	7c020001 	stcvc	0, cr0, [r2], {1}
 528:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 52c:	0000001c 	andeq	r0, r0, ip, lsl r0
 530:	0000051c 	andeq	r0, r0, ip, lsl r5
 534:	200011a4 	andcs	r1, r0, r4, lsr #3
 538:	00000184 	andeq	r0, r0, r4, lsl #3
 53c:	40080e41 	andmi	r0, r8, r1, asr #28
 540:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 544:	380e4101 	stmdacc	lr, {r0, r8, lr}
 548:	00070d41 	andeq	r0, r7, r1, asr #26
 54c:	00000020 	andeq	r0, r0, r0, lsr #32
 550:	0000051c 	andeq	r0, r0, ip, lsl r5
 554:	20001328 	andcs	r1, r0, r8, lsr #6
 558:	00000124 	andeq	r0, r0, r4, lsr #2
 55c:	400c0e41 	andmi	r0, ip, r1, asr #28
 560:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 564:	018e4002 	orreq	r4, lr, r2
 568:	41180e41 	tstmi	r8, r1, asr #28
 56c:	0000070d 	andeq	r0, r0, sp, lsl #14
 570:	0000000c 	andeq	r0, r0, ip
 574:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 578:	7c010001 	stcvc	0, cr0, [r1], {1}
 57c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 580:	0000000c 	andeq	r0, r0, ip
 584:	00000570 	andeq	r0, r0, r0, ror r5
 588:	2000144d 	andcs	r1, r0, sp, asr #8
 58c:	000001cc 	andeq	r0, r0, ip, asr #3
