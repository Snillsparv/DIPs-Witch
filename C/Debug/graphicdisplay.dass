
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#endif
}

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f8fa 	bl	200001fc <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:
void init_app( void ) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*portModer = 0x55555555;
20000014:	4b05      	ldr	r3, [pc, #20]	; (2000002c <init_app+0x1c>)
20000016:	4a06      	ldr	r2, [pc, #24]	; (20000030 <init_app+0x20>)
20000018:	601a      	str	r2, [r3, #0]
	set_up_DIL();
2000001a:	f003 f9f3 	bl	20003404 <set_up_DIL>
	graphic_initialize();
2000001e:	f002 fcf3 	bl	20002a08 <graphic_initialize>
	graphic_clear_screen();
20000022:	f002 fd28 	bl	20002a76 <graphic_clear_screen>
}
20000026:	46c0      	nop			; (mov r8, r8)
20000028:	46bd      	mov	sp, r7
2000002a:	bd80      	pop	{r7, pc}
2000002c:	40021000 	andmi	r1, r2, r0
20000030:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000034 <initSprites>:
sprite tempTitleLight;
sprite tempPressBlack;
sprite tempPressGray;
sprite tempPressLight;

void initSprites( void ) {
20000034:	b580      	push	{r7, lr}
20000036:	b08a      	sub	sp, #40	; 0x28
20000038:	af00      	add	r7, sp, #0
	sprite *monsterPointer = &tempMonster;
2000003a:	4b49      	ldr	r3, [pc, #292]	; (20000160 <initSprites+0x12c>)
2000003c:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(monsterPointer, monster_black_bits, monster_black_width, monster_black_height);
2000003e:	4949      	ldr	r1, [pc, #292]	; (20000164 <initSprites+0x130>)
20000040:	6a78      	ldr	r0, [r7, #36]	; 0x24
20000042:	231e      	movs	r3, #30
20000044:	221e      	movs	r2, #30
20000046:	f003 f9c9 	bl	200033dc <load_sprite>
	monster = monsterPointer;
2000004a:	4b47      	ldr	r3, [pc, #284]	; (20000168 <initSprites+0x134>)
2000004c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000004e:	601a      	str	r2, [r3, #0]
	
	sprite *monsterPointer2 = &tempMonsterLight;
20000050:	4b46      	ldr	r3, [pc, #280]	; (2000016c <initSprites+0x138>)
20000052:	623b      	str	r3, [r7, #32]
	load_sprite(monsterPointer2, monster_light_bits, monster_light_width, monster_light_height);
20000054:	4946      	ldr	r1, [pc, #280]	; (20000170 <initSprites+0x13c>)
20000056:	6a38      	ldr	r0, [r7, #32]
20000058:	231e      	movs	r3, #30
2000005a:	221e      	movs	r2, #30
2000005c:	f003 f9be 	bl	200033dc <load_sprite>
	monsterLight = monsterPointer2;
20000060:	4b44      	ldr	r3, [pc, #272]	; (20000174 <initSprites+0x140>)
20000062:	6a3a      	ldr	r2, [r7, #32]
20000064:	601a      	str	r2, [r3, #0]

	sprite *monsterPointer3 = &tempMonsterGray;
20000066:	4b44      	ldr	r3, [pc, #272]	; (20000178 <initSprites+0x144>)
20000068:	61fb      	str	r3, [r7, #28]
	load_sprite(monsterPointer3, monster_gray_bits, monster_gray_width, monster_gray_height);
2000006a:	4944      	ldr	r1, [pc, #272]	; (2000017c <initSprites+0x148>)
2000006c:	69f8      	ldr	r0, [r7, #28]
2000006e:	231e      	movs	r3, #30
20000070:	221e      	movs	r2, #30
20000072:	f003 f9b3 	bl	200033dc <load_sprite>
	monsterGray = monsterPointer3;
20000076:	4b42      	ldr	r3, [pc, #264]	; (20000180 <initSprites+0x14c>)
20000078:	69fa      	ldr	r2, [r7, #28]
2000007a:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempBg;
2000007c:	4b41      	ldr	r3, [pc, #260]	; (20000184 <initSprites+0x150>)
2000007e:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer4, bg_bits, bg_width, bg_height);
20000080:	4941      	ldr	r1, [pc, #260]	; (20000188 <initSprites+0x154>)
20000082:	69b8      	ldr	r0, [r7, #24]
20000084:	2340      	movs	r3, #64	; 0x40
20000086:	2280      	movs	r2, #128	; 0x80
20000088:	f003 f9a8 	bl	200033dc <load_sprite>
	bg = pointer4;
2000008c:	4b3f      	ldr	r3, [pc, #252]	; (2000018c <initSprites+0x158>)
2000008e:	69ba      	ldr	r2, [r7, #24]
20000090:	601a      	str	r2, [r3, #0]
	
	sprite *pointer5 = &tempCastleBlack;
20000092:	4b3f      	ldr	r3, [pc, #252]	; (20000190 <initSprites+0x15c>)
20000094:	617b      	str	r3, [r7, #20]
	load_sprite(pointer5, castle_black_bits, castle_black_width, castle_black_height);
20000096:	493f      	ldr	r1, [pc, #252]	; (20000194 <initSprites+0x160>)
20000098:	6978      	ldr	r0, [r7, #20]
2000009a:	2340      	movs	r3, #64	; 0x40
2000009c:	2280      	movs	r2, #128	; 0x80
2000009e:	f003 f99d 	bl	200033dc <load_sprite>
	castleBlack = pointer5;
200000a2:	4b3d      	ldr	r3, [pc, #244]	; (20000198 <initSprites+0x164>)
200000a4:	697a      	ldr	r2, [r7, #20]
200000a6:	601a      	str	r2, [r3, #0]
	
	sprite *pointer6 = &tempCastleGray;
200000a8:	4b3c      	ldr	r3, [pc, #240]	; (2000019c <initSprites+0x168>)
200000aa:	613b      	str	r3, [r7, #16]
	load_sprite(pointer6, castle_gray_bits, castle_black_width, castle_black_height);
200000ac:	493c      	ldr	r1, [pc, #240]	; (200001a0 <initSprites+0x16c>)
200000ae:	6938      	ldr	r0, [r7, #16]
200000b0:	2340      	movs	r3, #64	; 0x40
200000b2:	2280      	movs	r2, #128	; 0x80
200000b4:	f003 f992 	bl	200033dc <load_sprite>
	castleGray = pointer6;
200000b8:	4b3a      	ldr	r3, [pc, #232]	; (200001a4 <initSprites+0x170>)
200000ba:	693a      	ldr	r2, [r7, #16]
200000bc:	601a      	str	r2, [r3, #0]
	
	sprite *pointer7 = &tempCastleLight;
200000be:	4b3a      	ldr	r3, [pc, #232]	; (200001a8 <initSprites+0x174>)
200000c0:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer7, castle_light_bits, castle_black_width, castle_black_height);
200000c2:	493a      	ldr	r1, [pc, #232]	; (200001ac <initSprites+0x178>)
200000c4:	68f8      	ldr	r0, [r7, #12]
200000c6:	2340      	movs	r3, #64	; 0x40
200000c8:	2280      	movs	r2, #128	; 0x80
200000ca:	f003 f987 	bl	200033dc <load_sprite>
	castleLight = pointer7;
200000ce:	4b38      	ldr	r3, [pc, #224]	; (200001b0 <initSprites+0x17c>)
200000d0:	68fa      	ldr	r2, [r7, #12]
200000d2:	601a      	str	r2, [r3, #0]
	
	sprite *pointer8 = &tempTitleLight;
200000d4:	4b37      	ldr	r3, [pc, #220]	; (200001b4 <initSprites+0x180>)
200000d6:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer8, title_light_bits, title_black_width, title_black_height);
200000d8:	4937      	ldr	r1, [pc, #220]	; (200001b8 <initSprites+0x184>)
200000da:	68b8      	ldr	r0, [r7, #8]
200000dc:	231e      	movs	r3, #30
200000de:	2232      	movs	r2, #50	; 0x32
200000e0:	f003 f97c 	bl	200033dc <load_sprite>
	titleLight = pointer8;
200000e4:	4b35      	ldr	r3, [pc, #212]	; (200001bc <initSprites+0x188>)
200000e6:	68ba      	ldr	r2, [r7, #8]
200000e8:	601a      	str	r2, [r3, #0]
	sprite *pointer9 = &tempTitleGray;
200000ea:	4b35      	ldr	r3, [pc, #212]	; (200001c0 <initSprites+0x18c>)
200000ec:	607b      	str	r3, [r7, #4]
	load_sprite(pointer9, title_gray_bits, title_black_width, title_black_height);
200000ee:	4935      	ldr	r1, [pc, #212]	; (200001c4 <initSprites+0x190>)
200000f0:	6878      	ldr	r0, [r7, #4]
200000f2:	231e      	movs	r3, #30
200000f4:	2232      	movs	r2, #50	; 0x32
200000f6:	f003 f971 	bl	200033dc <load_sprite>
	titleGray = pointer9;
200000fa:	4b33      	ldr	r3, [pc, #204]	; (200001c8 <initSprites+0x194>)
200000fc:	687a      	ldr	r2, [r7, #4]
200000fe:	601a      	str	r2, [r3, #0]
	sprite *pointer10 = &tempTitleBlack;
20000100:	4b32      	ldr	r3, [pc, #200]	; (200001cc <initSprites+0x198>)
20000102:	603b      	str	r3, [r7, #0]
	load_sprite(pointer10, title_black_bits, title_black_width, title_black_height);
20000104:	4932      	ldr	r1, [pc, #200]	; (200001d0 <initSprites+0x19c>)
20000106:	6838      	ldr	r0, [r7, #0]
20000108:	231e      	movs	r3, #30
2000010a:	2232      	movs	r2, #50	; 0x32
2000010c:	f003 f966 	bl	200033dc <load_sprite>
	titleBlack = pointer10;	
20000110:	4b30      	ldr	r3, [pc, #192]	; (200001d4 <initSprites+0x1a0>)
20000112:	683a      	ldr	r2, [r7, #0]
20000114:	601a      	str	r2, [r3, #0]
	
	pointer8 = &tempPressLight;
20000116:	4b30      	ldr	r3, [pc, #192]	; (200001d8 <initSprites+0x1a4>)
20000118:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer8, press_light_bits, press_black_width, press_black_height);
2000011a:	4930      	ldr	r1, [pc, #192]	; (200001dc <initSprites+0x1a8>)
2000011c:	68b8      	ldr	r0, [r7, #8]
2000011e:	2323      	movs	r3, #35	; 0x23
20000120:	223c      	movs	r2, #60	; 0x3c
20000122:	f003 f95b 	bl	200033dc <load_sprite>
	pressLight = pointer8;
20000126:	4b2e      	ldr	r3, [pc, #184]	; (200001e0 <initSprites+0x1ac>)
20000128:	68ba      	ldr	r2, [r7, #8]
2000012a:	601a      	str	r2, [r3, #0]
	pointer9 = &tempPressGray;
2000012c:	4b2d      	ldr	r3, [pc, #180]	; (200001e4 <initSprites+0x1b0>)
2000012e:	607b      	str	r3, [r7, #4]
	load_sprite(pointer9, press_gray_bits, press_black_width, press_black_height);
20000130:	492d      	ldr	r1, [pc, #180]	; (200001e8 <initSprites+0x1b4>)
20000132:	6878      	ldr	r0, [r7, #4]
20000134:	2323      	movs	r3, #35	; 0x23
20000136:	223c      	movs	r2, #60	; 0x3c
20000138:	f003 f950 	bl	200033dc <load_sprite>
	pressGray = pointer9;
2000013c:	4b2b      	ldr	r3, [pc, #172]	; (200001ec <initSprites+0x1b8>)
2000013e:	687a      	ldr	r2, [r7, #4]
20000140:	601a      	str	r2, [r3, #0]
	pointer10 = &tempPressBlack;
20000142:	4b2b      	ldr	r3, [pc, #172]	; (200001f0 <initSprites+0x1bc>)
20000144:	603b      	str	r3, [r7, #0]
	load_sprite(pointer10, press_black_bits, press_black_width, press_black_height);
20000146:	492b      	ldr	r1, [pc, #172]	; (200001f4 <initSprites+0x1c0>)
20000148:	6838      	ldr	r0, [r7, #0]
2000014a:	2323      	movs	r3, #35	; 0x23
2000014c:	223c      	movs	r2, #60	; 0x3c
2000014e:	f003 f945 	bl	200033dc <load_sprite>
	pressBlack = pointer10;	
20000152:	4b29      	ldr	r3, [pc, #164]	; (200001f8 <initSprites+0x1c4>)
20000154:	683a      	ldr	r2, [r7, #0]
20000156:	601a      	str	r2, [r3, #0]
	
	
}
20000158:	46c0      	nop			; (mov r8, r8)
2000015a:	46bd      	mov	sp, r7
2000015c:	b00a      	add	sp, #40	; 0x28
2000015e:	bd80      	pop	{r7, pc}
20000160:	20003f28 	andcs	r3, r0, r8, lsr #30
20000164:	20006500 	andcs	r6, r0, r0, lsl #10
20000168:	20003efc 	strdcs	r3, [r0], -ip
2000016c:	20003f80 	andcs	r3, r0, r0, lsl #31
20000170:	20006578 	andcs	r6, r0, r8, ror r5
20000174:	20003fa8 	andcs	r3, r0, r8, lsr #31
20000178:	20003f48 	andcs	r3, r0, r8, asr #30
2000017c:	200065f0 	strdcs	r6, [r0], -r0
20000180:	20003fbc 			; <UNDEFINED> instruction: 0x20003fbc
20000184:	20003fc0 	andcs	r3, r0, r0, asr #31
20000188:	2000782c 	andcs	r7, r0, ip, lsr #16
2000018c:	20003f44 	andcs	r3, r0, r4, asr #30
20000190:	20003f00 	andcs	r3, r0, r0, lsl #30
20000194:	200069b0 			; <UNDEFINED> instruction: 0x200069b0
20000198:	20003f24 	andcs	r3, r0, r4, lsr #30
2000019c:	20003f9c 	mulcs	r0, ip, pc	; <UNPREDICTABLE>
200001a0:	20006db0 			; <UNDEFINED> instruction: 0x20006db0
200001a4:	20003fb0 			; <UNDEFINED> instruction: 0x20003fb0
200001a8:	20003f70 	andcs	r3, r0, r0, ror pc
200001ac:	200071b0 			; <UNDEFINED> instruction: 0x200071b0
200001b0:	20003f60 	andcs	r3, r0, r0, ror #30
200001b4:	20003f54 	andcs	r3, r0, r4, asr pc
200001b8:	200075b0 			; <UNDEFINED> instruction: 0x200075b0
200001bc:	20003fac 	andcs	r3, r0, ip, lsr #31
200001c0:	20003f18 	andcs	r3, r0, r8, lsl pc
200001c4:	20007684 	andcs	r7, r0, r4, lsl #13
200001c8:	20003f98 	mulcs	r0, r8, pc	; <UNPREDICTABLE>
200001cc:	20003f38 	andcs	r3, r0, r8, lsr pc
200001d0:	20007758 	andcs	r7, r0, r8, asr r7
200001d4:	20003fcc 	andcs	r3, r0, ip, asr #31
200001d8:	20003f64 	andcs	r3, r0, r4, ror #30
200001dc:	20006780 	andcs	r6, r0, r0, lsl #15
200001e0:	20003f34 	andcs	r3, r0, r4, lsr pc
200001e4:	20003f0c 	andcs	r3, r0, ip, lsl #30
200001e8:	20006898 	mulcs	r0, r8, r8
200001ec:	20003f7c 	andcs	r3, r0, ip, ror pc
200001f0:	20003f8c 	andcs	r3, r0, ip, lsl #31
200001f4:	20006668 	andcs	r6, r0, r8, ror #12
200001f8:	20003fb8 			; <UNDEFINED> instruction: 0x20003fb8

200001fc <main>:
	
int counter = 0;
int current_screen = START_SCREEN;
void main(void)
{
200001fc:	b590      	push	{r4, r7, lr}
200001fe:	4cfd      	ldr	r4, [pc, #1012]	; (200005f4 <main+0x3f8>)
20000200:	44a5      	add	sp, r4
20000202:	af00      	add	r7, sp, #0
	
	init_app();	
20000204:	f7ff ff04 	bl	20000010 <init_app>
	initSprites();
20000208:	f7ff ff14 	bl	20000034 <initSprites>
	
	GameObject monsterObj;
	Image monsterImage;
	Image monsterImages[] = {monsterImage};
2000020c:	2384      	movs	r3, #132	; 0x84
2000020e:	00db      	lsls	r3, r3, #3
20000210:	18fb      	adds	r3, r7, r3
20000212:	4af9      	ldr	r2, [pc, #996]	; (200005f8 <main+0x3fc>)
20000214:	18ba      	adds	r2, r7, r2
20000216:	ca13      	ldmia	r2!, {r0, r1, r4}
20000218:	c313      	stmia	r3!, {r0, r1, r4}
	monsterObj.images = monsterImages;
2000021a:	2387      	movs	r3, #135	; 0x87
2000021c:	00db      	lsls	r3, r3, #3
2000021e:	18fb      	adds	r3, r7, r3
20000220:	2284      	movs	r2, #132	; 0x84
20000222:	00d2      	lsls	r2, r2, #3
20000224:	18ba      	adds	r2, r7, r2
20000226:	601a      	str	r2, [r3, #0]
	load_image(&monsterObj.images[0], monster, monsterGray, monsterLight);
20000228:	2387      	movs	r3, #135	; 0x87
2000022a:	00db      	lsls	r3, r3, #3
2000022c:	18fb      	adds	r3, r7, r3
2000022e:	6818      	ldr	r0, [r3, #0]
20000230:	4bf2      	ldr	r3, [pc, #968]	; (200005fc <main+0x400>)
20000232:	6819      	ldr	r1, [r3, #0]
20000234:	4bf2      	ldr	r3, [pc, #968]	; (20000600 <main+0x404>)
20000236:	681a      	ldr	r2, [r3, #0]
20000238:	4bf2      	ldr	r3, [pc, #968]	; (20000604 <main+0x408>)
2000023a:	681b      	ldr	r3, [r3, #0]
2000023c:	f003 f8ba 	bl	200033b4 <load_image>
	monsterObj.xPos = 30;
20000240:	2387      	movs	r3, #135	; 0x87
20000242:	00db      	lsls	r3, r3, #3
20000244:	18fb      	adds	r3, r7, r3
20000246:	221e      	movs	r2, #30
20000248:	605a      	str	r2, [r3, #4]
	monsterObj.yPos = 4;
2000024a:	2387      	movs	r3, #135	; 0x87
2000024c:	00db      	lsls	r3, r3, #3
2000024e:	18fb      	adds	r3, r7, r3
20000250:	2204      	movs	r2, #4
20000252:	609a      	str	r2, [r3, #8]
	monsterObj.current_frame = 0;
20000254:	2387      	movs	r3, #135	; 0x87
20000256:	00db      	lsls	r3, r3, #3
20000258:	18fb      	adds	r3, r7, r3
2000025a:	2200      	movs	r2, #0
2000025c:	615a      	str	r2, [r3, #20]
	monsterObj.update = playerUpdate;
2000025e:	2387      	movs	r3, #135	; 0x87
20000260:	00db      	lsls	r3, r3, #3
20000262:	18fb      	adds	r3, r7, r3
20000264:	4ae8      	ldr	r2, [pc, #928]	; (20000608 <main+0x40c>)
20000266:	60da      	str	r2, [r3, #12]
	
	GameObject titleObj;
	Image titleImage;
	Image titleImages[] = {titleImage};
20000268:	23f9      	movs	r3, #249	; 0xf9
2000026a:	009b      	lsls	r3, r3, #2
2000026c:	18fb      	adds	r3, r7, r3
2000026e:	22fc      	movs	r2, #252	; 0xfc
20000270:	0092      	lsls	r2, r2, #2
20000272:	18ba      	adds	r2, r7, r2
20000274:	ca13      	ldmia	r2!, {r0, r1, r4}
20000276:	c313      	stmia	r3!, {r0, r1, r4}
	titleObj.images = titleImages;
20000278:	23ff      	movs	r3, #255	; 0xff
2000027a:	009b      	lsls	r3, r3, #2
2000027c:	18fb      	adds	r3, r7, r3
2000027e:	22f9      	movs	r2, #249	; 0xf9
20000280:	0092      	lsls	r2, r2, #2
20000282:	18ba      	adds	r2, r7, r2
20000284:	601a      	str	r2, [r3, #0]
	load_image(&titleObj.images[0], titleBlack, titleGray, titleLight);
20000286:	23ff      	movs	r3, #255	; 0xff
20000288:	009b      	lsls	r3, r3, #2
2000028a:	18fb      	adds	r3, r7, r3
2000028c:	6818      	ldr	r0, [r3, #0]
2000028e:	4bdf      	ldr	r3, [pc, #892]	; (2000060c <main+0x410>)
20000290:	6819      	ldr	r1, [r3, #0]
20000292:	4bdf      	ldr	r3, [pc, #892]	; (20000610 <main+0x414>)
20000294:	681a      	ldr	r2, [r3, #0]
20000296:	4bdf      	ldr	r3, [pc, #892]	; (20000614 <main+0x418>)
20000298:	681b      	ldr	r3, [r3, #0]
2000029a:	f003 f88b 	bl	200033b4 <load_image>
	titleObj.xPos = 1;
2000029e:	23ff      	movs	r3, #255	; 0xff
200002a0:	009b      	lsls	r3, r3, #2
200002a2:	18fb      	adds	r3, r7, r3
200002a4:	2201      	movs	r2, #1
200002a6:	605a      	str	r2, [r3, #4]
	titleObj.yPos = -40;
200002a8:	23ff      	movs	r3, #255	; 0xff
200002aa:	009b      	lsls	r3, r3, #2
200002ac:	18fb      	adds	r3, r7, r3
200002ae:	2228      	movs	r2, #40	; 0x28
200002b0:	4252      	negs	r2, r2
200002b2:	609a      	str	r2, [r3, #8]
	titleObj.current_frame = 0;
200002b4:	23ff      	movs	r3, #255	; 0xff
200002b6:	009b      	lsls	r3, r3, #2
200002b8:	18fb      	adds	r3, r7, r3
200002ba:	2200      	movs	r2, #0
200002bc:	615a      	str	r2, [r3, #20]
	
	GameObject pressObj;
	Image pressImage;
	Image pressImages[] = {pressImage};
200002be:	23ea      	movs	r3, #234	; 0xea
200002c0:	009b      	lsls	r3, r3, #2
200002c2:	18fb      	adds	r3, r7, r3
200002c4:	22ed      	movs	r2, #237	; 0xed
200002c6:	0092      	lsls	r2, r2, #2
200002c8:	18ba      	adds	r2, r7, r2
200002ca:	ca13      	ldmia	r2!, {r0, r1, r4}
200002cc:	c313      	stmia	r3!, {r0, r1, r4}
	pressObj.images = pressImages;
200002ce:	23f0      	movs	r3, #240	; 0xf0
200002d0:	009b      	lsls	r3, r3, #2
200002d2:	18fb      	adds	r3, r7, r3
200002d4:	22ea      	movs	r2, #234	; 0xea
200002d6:	0092      	lsls	r2, r2, #2
200002d8:	18ba      	adds	r2, r7, r2
200002da:	601a      	str	r2, [r3, #0]
	load_image(&pressObj.images[0], pressBlack, pressLight, pressGray);
200002dc:	23f0      	movs	r3, #240	; 0xf0
200002de:	009b      	lsls	r3, r3, #2
200002e0:	18fb      	adds	r3, r7, r3
200002e2:	6818      	ldr	r0, [r3, #0]
200002e4:	4bcc      	ldr	r3, [pc, #816]	; (20000618 <main+0x41c>)
200002e6:	6819      	ldr	r1, [r3, #0]
200002e8:	4bcc      	ldr	r3, [pc, #816]	; (2000061c <main+0x420>)
200002ea:	681a      	ldr	r2, [r3, #0]
200002ec:	4bcc      	ldr	r3, [pc, #816]	; (20000620 <main+0x424>)
200002ee:	681b      	ldr	r3, [r3, #0]
200002f0:	f003 f860 	bl	200033b4 <load_image>
	pressObj.xPos = 65-30;
200002f4:	23f0      	movs	r3, #240	; 0xf0
200002f6:	009b      	lsls	r3, r3, #2
200002f8:	18fb      	adds	r3, r7, r3
200002fa:	2223      	movs	r2, #35	; 0x23
200002fc:	605a      	str	r2, [r3, #4]
	pressObj.yPos = 29-15;
200002fe:	23f0      	movs	r3, #240	; 0xf0
20000300:	009b      	lsls	r3, r3, #2
20000302:	18fb      	adds	r3, r7, r3
20000304:	220e      	movs	r2, #14
20000306:	609a      	str	r2, [r3, #8]
	pressObj.current_frame = 0;
20000308:	23f0      	movs	r3, #240	; 0xf0
2000030a:	009b      	lsls	r3, r3, #2
2000030c:	18fb      	adds	r3, r7, r3
2000030e:	2200      	movs	r2, #0
20000310:	615a      	str	r2, [r3, #20]
	
	GameObject castleObj;
	Image castleImage;
	Image castleImages[] = {castleImage};
20000312:	4bc4      	ldr	r3, [pc, #784]	; (20000624 <main+0x428>)
20000314:	228e      	movs	r2, #142	; 0x8e
20000316:	00d2      	lsls	r2, r2, #3
20000318:	4694      	mov	ip, r2
2000031a:	44bc      	add	ip, r7
2000031c:	4463      	add	r3, ip
2000031e:	22de      	movs	r2, #222	; 0xde
20000320:	0092      	lsls	r2, r2, #2
20000322:	18ba      	adds	r2, r7, r2
20000324:	ca13      	ldmia	r2!, {r0, r1, r4}
20000326:	c313      	stmia	r3!, {r0, r1, r4}
	castleObj.images = castleImages;
20000328:	23e1      	movs	r3, #225	; 0xe1
2000032a:	009b      	lsls	r3, r3, #2
2000032c:	18fb      	adds	r3, r7, r3
2000032e:	22db      	movs	r2, #219	; 0xdb
20000330:	0092      	lsls	r2, r2, #2
20000332:	18ba      	adds	r2, r7, r2
20000334:	601a      	str	r2, [r3, #0]
	load_image(&castleObj.images[0], castleBlack, castleGray, castleLight);
20000336:	23e1      	movs	r3, #225	; 0xe1
20000338:	009b      	lsls	r3, r3, #2
2000033a:	18fb      	adds	r3, r7, r3
2000033c:	6818      	ldr	r0, [r3, #0]
2000033e:	4bba      	ldr	r3, [pc, #744]	; (20000628 <main+0x42c>)
20000340:	6819      	ldr	r1, [r3, #0]
20000342:	4bba      	ldr	r3, [pc, #744]	; (2000062c <main+0x430>)
20000344:	681a      	ldr	r2, [r3, #0]
20000346:	4bba      	ldr	r3, [pc, #744]	; (20000630 <main+0x434>)
20000348:	681b      	ldr	r3, [r3, #0]
2000034a:	f003 f833 	bl	200033b4 <load_image>
	castleObj.xPos = 1;
2000034e:	23e1      	movs	r3, #225	; 0xe1
20000350:	009b      	lsls	r3, r3, #2
20000352:	18fb      	adds	r3, r7, r3
20000354:	2201      	movs	r2, #1
20000356:	605a      	str	r2, [r3, #4]
	castleObj.yPos = 1;
20000358:	23e1      	movs	r3, #225	; 0xe1
2000035a:	009b      	lsls	r3, r3, #2
2000035c:	18fb      	adds	r3, r7, r3
2000035e:	2201      	movs	r2, #1
20000360:	609a      	str	r2, [r3, #8]
	castleObj.current_frame = 0;
20000362:	23e1      	movs	r3, #225	; 0xe1
20000364:	009b      	lsls	r3, r3, #2
20000366:	18fb      	adds	r3, r7, r3
20000368:	2200      	movs	r2, #0
2000036a:	615a      	str	r2, [r3, #20]
	
	GameObject indoors;
	init_indoors( &indoors );
2000036c:	23d2      	movs	r3, #210	; 0xd2
2000036e:	009b      	lsls	r3, r3, #2
20000370:	18fb      	adds	r3, r7, r3
20000372:	0018      	movs	r0, r3
20000374:	f003 fb90 	bl	20003a98 <init_indoors>
	indoors.xPos = 1;
20000378:	4bae      	ldr	r3, [pc, #696]	; (20000634 <main+0x438>)
2000037a:	228e      	movs	r2, #142	; 0x8e
2000037c:	00d2      	lsls	r2, r2, #3
2000037e:	4694      	mov	ip, r2
20000380:	44bc      	add	ip, r7
20000382:	4463      	add	r3, ip
20000384:	2201      	movs	r2, #1
20000386:	605a      	str	r2, [r3, #4]
	indoors.yPos = 1;
20000388:	4baa      	ldr	r3, [pc, #680]	; (20000634 <main+0x438>)
2000038a:	228e      	movs	r2, #142	; 0x8e
2000038c:	00d2      	lsls	r2, r2, #3
2000038e:	4694      	mov	ip, r2
20000390:	44bc      	add	ip, r7
20000392:	4463      	add	r3, ip
20000394:	2201      	movs	r2, #1
20000396:	609a      	str	r2, [r3, #8]
	
	GameObject indoors2;
	init_indoors2( &indoors2 );
20000398:	23c9      	movs	r3, #201	; 0xc9
2000039a:	009b      	lsls	r3, r3, #2
2000039c:	18fb      	adds	r3, r7, r3
2000039e:	0018      	movs	r0, r3
200003a0:	f003 fbee 	bl	20003b80 <init_indoors2>
	indoors2.xPos = 1;
200003a4:	4ba4      	ldr	r3, [pc, #656]	; (20000638 <main+0x43c>)
200003a6:	228e      	movs	r2, #142	; 0x8e
200003a8:	00d2      	lsls	r2, r2, #3
200003aa:	4694      	mov	ip, r2
200003ac:	44bc      	add	ip, r7
200003ae:	4463      	add	r3, ip
200003b0:	2201      	movs	r2, #1
200003b2:	605a      	str	r2, [r3, #4]
	indoors2.yPos = 1;
200003b4:	4ba0      	ldr	r3, [pc, #640]	; (20000638 <main+0x43c>)
200003b6:	228e      	movs	r2, #142	; 0x8e
200003b8:	00d2      	lsls	r2, r2, #3
200003ba:	4694      	mov	ip, r2
200003bc:	44bc      	add	ip, r7
200003be:	4463      	add	r3, ip
200003c0:	2201      	movs	r2, #1
200003c2:	609a      	str	r2, [r3, #8]
	
	GameObject trophy;
	init_trophy( &trophy );
200003c4:	23c0      	movs	r3, #192	; 0xc0
200003c6:	009b      	lsls	r3, r3, #2
200003c8:	18fb      	adds	r3, r7, r3
200003ca:	0018      	movs	r0, r3
200003cc:	f003 fc4c 	bl	20003c68 <init_trophy>

	
	GameObject hair;
	init_flame(&hair);
200003d0:	23b7      	movs	r3, #183	; 0xb7
200003d2:	009b      	lsls	r3, r3, #2
200003d4:	18fb      	adds	r3, r7, r3
200003d6:	0018      	movs	r0, r3
200003d8:	f002 f848 	bl	2000246c <init_flame>
	hair.xPos = 40;
200003dc:	4b97      	ldr	r3, [pc, #604]	; (2000063c <main+0x440>)
200003de:	228e      	movs	r2, #142	; 0x8e
200003e0:	00d2      	lsls	r2, r2, #3
200003e2:	4694      	mov	ip, r2
200003e4:	44bc      	add	ip, r7
200003e6:	4463      	add	r3, ip
200003e8:	2228      	movs	r2, #40	; 0x28
200003ea:	605a      	str	r2, [r3, #4]
	hair.yPos = 10;
200003ec:	4b93      	ldr	r3, [pc, #588]	; (2000063c <main+0x440>)
200003ee:	228e      	movs	r2, #142	; 0x8e
200003f0:	00d2      	lsls	r2, r2, #3
200003f2:	4694      	mov	ip, r2
200003f4:	44bc      	add	ip, r7
200003f6:	4463      	add	r3, ip
200003f8:	220a      	movs	r2, #10
200003fa:	609a      	str	r2, [r3, #8]
	hair.update = gameObjectUpdate;
200003fc:	4b8f      	ldr	r3, [pc, #572]	; (2000063c <main+0x440>)
200003fe:	228e      	movs	r2, #142	; 0x8e
20000400:	00d2      	lsls	r2, r2, #3
20000402:	4694      	mov	ip, r2
20000404:	44bc      	add	ip, r7
20000406:	4463      	add	r3, ip
20000408:	4a8d      	ldr	r2, [pc, #564]	; (20000640 <main+0x444>)
2000040a:	60da      	str	r2, [r3, #12]
	
	GameObject bird;
	init_bird( &bird );
2000040c:	23ae      	movs	r3, #174	; 0xae
2000040e:	009b      	lsls	r3, r3, #2
20000410:	18fb      	adds	r3, r7, r3
20000412:	0018      	movs	r0, r3
20000414:	f001 fbfa 	bl	20001c0c <init_bird>
	bird.xPos = 180;
20000418:	4b8a      	ldr	r3, [pc, #552]	; (20000644 <main+0x448>)
2000041a:	228e      	movs	r2, #142	; 0x8e
2000041c:	00d2      	lsls	r2, r2, #3
2000041e:	4694      	mov	ip, r2
20000420:	44bc      	add	ip, r7
20000422:	4463      	add	r3, ip
20000424:	22b4      	movs	r2, #180	; 0xb4
20000426:	605a      	str	r2, [r3, #4]
	bird.yPos = 40;
20000428:	4b86      	ldr	r3, [pc, #536]	; (20000644 <main+0x448>)
2000042a:	228e      	movs	r2, #142	; 0x8e
2000042c:	00d2      	lsls	r2, r2, #3
2000042e:	4694      	mov	ip, r2
20000430:	44bc      	add	ip, r7
20000432:	4463      	add	r3, ip
20000434:	2228      	movs	r2, #40	; 0x28
20000436:	609a      	str	r2, [r3, #8]
	bird.update = gameObjectUpdate;
20000438:	4b82      	ldr	r3, [pc, #520]	; (20000644 <main+0x448>)
2000043a:	228e      	movs	r2, #142	; 0x8e
2000043c:	00d2      	lsls	r2, r2, #3
2000043e:	4694      	mov	ip, r2
20000440:	44bc      	add	ip, r7
20000442:	4463      	add	r3, ip
20000444:	4a7e      	ldr	r2, [pc, #504]	; (20000640 <main+0x444>)
20000446:	60da      	str	r2, [r3, #12]
	
	GameObject DIP;
	init_DIP( &DIP );
20000448:	23a5      	movs	r3, #165	; 0xa5
2000044a:	009b      	lsls	r3, r3, #2
2000044c:	18fb      	adds	r3, r7, r3
2000044e:	0018      	movs	r0, r3
20000450:	f001 fe44 	bl	200020dc <init_DIP>
	DIP.update = DIPUpdate;
20000454:	4b7c      	ldr	r3, [pc, #496]	; (20000648 <main+0x44c>)
20000456:	228e      	movs	r2, #142	; 0x8e
20000458:	00d2      	lsls	r2, r2, #3
2000045a:	4694      	mov	ip, r2
2000045c:	44bc      	add	ip, r7
2000045e:	4463      	add	r3, ip
20000460:	4a7a      	ldr	r2, [pc, #488]	; (2000064c <main+0x450>)
20000462:	60da      	str	r2, [r3, #12]
	
	GameObject player;
	init_witch( &player );
20000464:	239c      	movs	r3, #156	; 0x9c
20000466:	009b      	lsls	r3, r3, #2
20000468:	18fb      	adds	r3, r7, r3
2000046a:	0018      	movs	r0, r3
2000046c:	f001 fd1a 	bl	20001ea4 <init_witch>
	player.xPos = 3;
20000470:	4b77      	ldr	r3, [pc, #476]	; (20000650 <main+0x454>)
20000472:	228e      	movs	r2, #142	; 0x8e
20000474:	00d2      	lsls	r2, r2, #3
20000476:	4694      	mov	ip, r2
20000478:	44bc      	add	ip, r7
2000047a:	4463      	add	r3, ip
2000047c:	2203      	movs	r2, #3
2000047e:	605a      	str	r2, [r3, #4]
	player.yPos = LIMIT_DOWN - 1; //player position
20000480:	4b73      	ldr	r3, [pc, #460]	; (20000650 <main+0x454>)
20000482:	228e      	movs	r2, #142	; 0x8e
20000484:	00d2      	lsls	r2, r2, #3
20000486:	4694      	mov	ip, r2
20000488:	44bc      	add	ip, r7
2000048a:	4463      	add	r3, ip
2000048c:	2226      	movs	r2, #38	; 0x26
2000048e:	609a      	str	r2, [r3, #8]
	player.update = playerUpdate;
20000490:	4b6f      	ldr	r3, [pc, #444]	; (20000650 <main+0x454>)
20000492:	228e      	movs	r2, #142	; 0x8e
20000494:	00d2      	lsls	r2, r2, #3
20000496:	4694      	mov	ip, r2
20000498:	44bc      	add	ip, r7
2000049a:	4463      	add	r3, ip
2000049c:	4a5a      	ldr	r2, [pc, #360]	; (20000608 <main+0x40c>)
2000049e:	60da      	str	r2, [r3, #12]
	
	GameObject fire2;
	init_fire( &fire2 );
200004a0:	2393      	movs	r3, #147	; 0x93
200004a2:	009b      	lsls	r3, r3, #2
200004a4:	18fb      	adds	r3, r7, r3
200004a6:	0018      	movs	r0, r3
200004a8:	f001 f92e 	bl	20001708 <init_fire>
	GameObject fire3;
	init_fire( &fire3 );
200004ac:	238a      	movs	r3, #138	; 0x8a
200004ae:	009b      	lsls	r3, r3, #2
200004b0:	18fb      	adds	r3, r7, r3
200004b2:	0018      	movs	r0, r3
200004b4:	f001 f928 	bl	20001708 <init_fire>
	GameObject fire4;
	init_fire( &fire4 );
200004b8:	2381      	movs	r3, #129	; 0x81
200004ba:	009b      	lsls	r3, r3, #2
200004bc:	18fb      	adds	r3, r7, r3
200004be:	0018      	movs	r0, r3
200004c0:	f001 f922 	bl	20001708 <init_fire>
	GameObject fire1;
	init_fire( &fire1 );
200004c4:	23f0      	movs	r3, #240	; 0xf0
200004c6:	005b      	lsls	r3, r3, #1
200004c8:	18fb      	adds	r3, r7, r3
200004ca:	0018      	movs	r0, r3
200004cc:	f001 f91c 	bl	20001708 <init_fire>
	
	GameObject fire1_indoors;
	init_fire( &fire1_indoors );
200004d0:	23de      	movs	r3, #222	; 0xde
200004d2:	005b      	lsls	r3, r3, #1
200004d4:	18fb      	adds	r3, r7, r3
200004d6:	0018      	movs	r0, r3
200004d8:	f001 f916 	bl	20001708 <init_fire>
	fire1_indoors.xPos = 50;		//FIRE1_INDO
200004dc:	4b5d      	ldr	r3, [pc, #372]	; (20000654 <main+0x458>)
200004de:	228e      	movs	r2, #142	; 0x8e
200004e0:	00d2      	lsls	r2, r2, #3
200004e2:	4694      	mov	ip, r2
200004e4:	44bc      	add	ip, r7
200004e6:	4463      	add	r3, ip
200004e8:	2232      	movs	r2, #50	; 0x32
200004ea:	605a      	str	r2, [r3, #4]
	fire1_indoors.yPos = 64-12-7;
200004ec:	4b59      	ldr	r3, [pc, #356]	; (20000654 <main+0x458>)
200004ee:	228e      	movs	r2, #142	; 0x8e
200004f0:	00d2      	lsls	r2, r2, #3
200004f2:	4694      	mov	ip, r2
200004f4:	44bc      	add	ip, r7
200004f6:	4463      	add	r3, ip
200004f8:	222d      	movs	r2, #45	; 0x2d
200004fa:	609a      	str	r2, [r3, #8]
	fire1_indoors.update = gameObjectUpdate;
200004fc:	4b55      	ldr	r3, [pc, #340]	; (20000654 <main+0x458>)
200004fe:	228e      	movs	r2, #142	; 0x8e
20000500:	00d2      	lsls	r2, r2, #3
20000502:	4694      	mov	ip, r2
20000504:	44bc      	add	ip, r7
20000506:	4463      	add	r3, ip
20000508:	4a4d      	ldr	r2, [pc, #308]	; (20000640 <main+0x444>)
2000050a:	60da      	str	r2, [r3, #12]
	GameObject fire2_indoors;
	init_fire( &fire2_indoors );
2000050c:	23cc      	movs	r3, #204	; 0xcc
2000050e:	005b      	lsls	r3, r3, #1
20000510:	18fb      	adds	r3, r7, r3
20000512:	0018      	movs	r0, r3
20000514:	f001 f8f8 	bl	20001708 <init_fire>
	fire2_indoors.update = gameObjectUpdate;
20000518:	4b4f      	ldr	r3, [pc, #316]	; (20000658 <main+0x45c>)
2000051a:	228e      	movs	r2, #142	; 0x8e
2000051c:	00d2      	lsls	r2, r2, #3
2000051e:	4694      	mov	ip, r2
20000520:	44bc      	add	ip, r7
20000522:	4463      	add	r3, ip
20000524:	4a46      	ldr	r2, [pc, #280]	; (20000640 <main+0x444>)
20000526:	60da      	str	r2, [r3, #12]
	GameObject fire3_indoors;
	init_fire( &fire3_indoors );
20000528:	23ba      	movs	r3, #186	; 0xba
2000052a:	005b      	lsls	r3, r3, #1
2000052c:	18fb      	adds	r3, r7, r3
2000052e:	0018      	movs	r0, r3
20000530:	f001 f8ea 	bl	20001708 <init_fire>
	fire3_indoors.update = gameObjectUpdate;
20000534:	4b49      	ldr	r3, [pc, #292]	; (2000065c <main+0x460>)
20000536:	228e      	movs	r2, #142	; 0x8e
20000538:	00d2      	lsls	r2, r2, #3
2000053a:	4694      	mov	ip, r2
2000053c:	44bc      	add	ip, r7
2000053e:	4463      	add	r3, ip
20000540:	4a3f      	ldr	r2, [pc, #252]	; (20000640 <main+0x444>)
20000542:	60da      	str	r2, [r3, #12]
	GameObject fires[] = {fire1_indoors, fire2_indoors, fire3_indoors};
20000544:	4b46      	ldr	r3, [pc, #280]	; (20000660 <main+0x464>)
20000546:	228e      	movs	r2, #142	; 0x8e
20000548:	00d2      	lsls	r2, r2, #3
2000054a:	18ba      	adds	r2, r7, r2
2000054c:	18d1      	adds	r1, r2, r3
2000054e:	4b41      	ldr	r3, [pc, #260]	; (20000654 <main+0x458>)
20000550:	228e      	movs	r2, #142	; 0x8e
20000552:	00d2      	lsls	r2, r2, #3
20000554:	18ba      	adds	r2, r7, r2
20000556:	18d2      	adds	r2, r2, r3
20000558:	000b      	movs	r3, r1
2000055a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000055c:	c313      	stmia	r3!, {r0, r1, r4}
2000055e:	ca13      	ldmia	r2!, {r0, r1, r4}
20000560:	c313      	stmia	r3!, {r0, r1, r4}
20000562:	ca13      	ldmia	r2!, {r0, r1, r4}
20000564:	c313      	stmia	r3!, {r0, r1, r4}
20000566:	4b3e      	ldr	r3, [pc, #248]	; (20000660 <main+0x464>)
20000568:	228e      	movs	r2, #142	; 0x8e
2000056a:	00d2      	lsls	r2, r2, #3
2000056c:	4694      	mov	ip, r2
2000056e:	44bc      	add	ip, r7
20000570:	4463      	add	r3, ip
20000572:	4a39      	ldr	r2, [pc, #228]	; (20000658 <main+0x45c>)
20000574:	218e      	movs	r1, #142	; 0x8e
20000576:	00c9      	lsls	r1, r1, #3
20000578:	468c      	mov	ip, r1
2000057a:	44bc      	add	ip, r7
2000057c:	4462      	add	r2, ip
2000057e:	3324      	adds	r3, #36	; 0x24
20000580:	ca13      	ldmia	r2!, {r0, r1, r4}
20000582:	c313      	stmia	r3!, {r0, r1, r4}
20000584:	ca13      	ldmia	r2!, {r0, r1, r4}
20000586:	c313      	stmia	r3!, {r0, r1, r4}
20000588:	ca13      	ldmia	r2!, {r0, r1, r4}
2000058a:	c313      	stmia	r3!, {r0, r1, r4}
2000058c:	4b34      	ldr	r3, [pc, #208]	; (20000660 <main+0x464>)
2000058e:	228e      	movs	r2, #142	; 0x8e
20000590:	00d2      	lsls	r2, r2, #3
20000592:	4694      	mov	ip, r2
20000594:	44bc      	add	ip, r7
20000596:	4463      	add	r3, ip
20000598:	4a30      	ldr	r2, [pc, #192]	; (2000065c <main+0x460>)
2000059a:	218e      	movs	r1, #142	; 0x8e
2000059c:	00c9      	lsls	r1, r1, #3
2000059e:	468c      	mov	ip, r1
200005a0:	44bc      	add	ip, r7
200005a2:	4462      	add	r2, ip
200005a4:	3348      	adds	r3, #72	; 0x48
200005a6:	ca13      	ldmia	r2!, {r0, r1, r4}
200005a8:	c313      	stmia	r3!, {r0, r1, r4}
200005aa:	ca13      	ldmia	r2!, {r0, r1, r4}
200005ac:	c313      	stmia	r3!, {r0, r1, r4}
200005ae:	ca13      	ldmia	r2!, {r0, r1, r4}
200005b0:	c313      	stmia	r3!, {r0, r1, r4}
	
	
	fire2.xPos = 98;
200005b2:	4b2c      	ldr	r3, [pc, #176]	; (20000664 <main+0x468>)
200005b4:	228e      	movs	r2, #142	; 0x8e
200005b6:	00d2      	lsls	r2, r2, #3
200005b8:	4694      	mov	ip, r2
200005ba:	44bc      	add	ip, r7
200005bc:	4463      	add	r3, ip
200005be:	2262      	movs	r2, #98	; 0x62
200005c0:	605a      	str	r2, [r3, #4]
	fire2.yPos = 26-12;
200005c2:	4b28      	ldr	r3, [pc, #160]	; (20000664 <main+0x468>)
200005c4:	228e      	movs	r2, #142	; 0x8e
200005c6:	00d2      	lsls	r2, r2, #3
200005c8:	4694      	mov	ip, r2
200005ca:	44bc      	add	ip, r7
200005cc:	4463      	add	r3, ip
200005ce:	220e      	movs	r2, #14
200005d0:	609a      	str	r2, [r3, #8]
	fire3.xPos = 115;
200005d2:	4b25      	ldr	r3, [pc, #148]	; (20000668 <main+0x46c>)
200005d4:	228e      	movs	r2, #142	; 0x8e
200005d6:	00d2      	lsls	r2, r2, #3
200005d8:	4694      	mov	ip, r2
200005da:	44bc      	add	ip, r7
200005dc:	4463      	add	r3, ip
200005de:	2273      	movs	r2, #115	; 0x73
200005e0:	605a      	str	r2, [r3, #4]
	fire3.yPos = 34-12;
200005e2:	4b21      	ldr	r3, [pc, #132]	; (20000668 <main+0x46c>)
200005e4:	228e      	movs	r2, #142	; 0x8e
200005e6:	00d2      	lsls	r2, r2, #3
200005e8:	4694      	mov	ip, r2
200005ea:	44bc      	add	ip, r7
200005ec:	4463      	add	r3, ip
200005ee:	2216      	movs	r2, #22
200005f0:	609a      	str	r2, [r3, #8]
200005f2:	e03b      	b.n	2000066c <main+0x470>
200005f4:	fffffb8c 			; <UNDEFINED> instruction: 0xfffffb8c
200005f8:	0000042c 	andeq	r0, r0, ip, lsr #8
200005fc:	20003efc 	strdcs	r3, [r0], -ip
20000600:	20003fbc 			; <UNDEFINED> instruction: 0x20003fbc
20000604:	20003fa8 	andcs	r3, r0, r8, lsr #31
20000608:	2000182d 	andcs	r1, r0, sp, lsr #16
2000060c:	20003fcc 	andcs	r3, r0, ip, asr #31
20000610:	20003f98 	mulcs	r0, r8, pc	; <UNPREDICTABLE>
20000614:	20003fac 	andcs	r3, r0, ip, lsr #31
20000618:	20003fb8 			; <UNDEFINED> instruction: 0x20003fb8
2000061c:	20003f34 	andcs	r3, r0, r4, lsr pc
20000620:	20003f7c 	andcs	r3, r0, ip, ror pc
20000624:	fffffefc 			; <UNDEFINED> instruction: 0xfffffefc
20000628:	20003f24 	andcs	r3, r0, r4, lsr #30
2000062c:	20003fb0 			; <UNDEFINED> instruction: 0x20003fb0
20000630:	20003f60 	andcs	r3, r0, r0, ror #30
20000634:	fffffed8 			; <UNDEFINED> instruction: 0xfffffed8
20000638:	fffffeb4 			; <UNDEFINED> instruction: 0xfffffeb4
2000063c:	fffffe6c 			; <UNDEFINED> instruction: 0xfffffe6c
20000640:	2000153d 	andcs	r1, r0, sp, lsr r5
20000644:	fffffe48 			; <UNDEFINED> instruction: 0xfffffe48
20000648:	fffffe24 			; <UNDEFINED> instruction: 0xfffffe24
2000064c:	200021fd 	strdcs	r2, [r0], -sp
20000650:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20000654:	fffffd4c 			; <UNDEFINED> instruction: 0xfffffd4c
20000658:	fffffd28 			; <UNDEFINED> instruction: 0xfffffd28
2000065c:	fffffd04 			; <UNDEFINED> instruction: 0xfffffd04
20000660:	fffffc98 			; <UNDEFINED> instruction: 0xfffffc98
20000664:	fffffddc 			; <UNDEFINED> instruction: 0xfffffddc
20000668:	fffffdb8 			; <UNDEFINED> instruction: 0xfffffdb8
	
	fire1.xPos = 85;
2000066c:	4be7      	ldr	r3, [pc, #924]	; (20000a0c <main+0x810>)
2000066e:	228e      	movs	r2, #142	; 0x8e
20000670:	00d2      	lsls	r2, r2, #3
20000672:	4694      	mov	ip, r2
20000674:	44bc      	add	ip, r7
20000676:	4463      	add	r3, ip
20000678:	2255      	movs	r2, #85	; 0x55
2000067a:	605a      	str	r2, [r3, #4]
	fire1.yPos = 23-12;
2000067c:	4be3      	ldr	r3, [pc, #908]	; (20000a0c <main+0x810>)
2000067e:	228e      	movs	r2, #142	; 0x8e
20000680:	00d2      	lsls	r2, r2, #3
20000682:	4694      	mov	ip, r2
20000684:	44bc      	add	ip, r7
20000686:	4463      	add	r3, ip
20000688:	220b      	movs	r2, #11
2000068a:	609a      	str	r2, [r3, #8]
	fire4.xPos = 71;
2000068c:	4be0      	ldr	r3, [pc, #896]	; (20000a10 <main+0x814>)
2000068e:	228e      	movs	r2, #142	; 0x8e
20000690:	00d2      	lsls	r2, r2, #3
20000692:	4694      	mov	ip, r2
20000694:	44bc      	add	ip, r7
20000696:	4463      	add	r3, ip
20000698:	2247      	movs	r2, #71	; 0x47
2000069a:	605a      	str	r2, [r3, #4]
	fire4.yPos = 27-11;
2000069c:	4bdc      	ldr	r3, [pc, #880]	; (20000a10 <main+0x814>)
2000069e:	228e      	movs	r2, #142	; 0x8e
200006a0:	00d2      	lsls	r2, r2, #3
200006a2:	4694      	mov	ip, r2
200006a4:	44bc      	add	ip, r7
200006a6:	4463      	add	r3, ip
200006a8:	2210      	movs	r2, #16
200006aa:	609a      	str	r2, [r3, #8]
	//draw_game_object(&castleObj);
	
	fire2.animation_speed = 2;
200006ac:	4bd9      	ldr	r3, [pc, #868]	; (20000a14 <main+0x818>)
200006ae:	228e      	movs	r2, #142	; 0x8e
200006b0:	00d2      	lsls	r2, r2, #3
200006b2:	4694      	mov	ip, r2
200006b4:	44bc      	add	ip, r7
200006b6:	4463      	add	r3, ip
200006b8:	2202      	movs	r2, #2
200006ba:	61da      	str	r2, [r3, #28]
	fire3.animation_speed = 2;
200006bc:	4bd6      	ldr	r3, [pc, #856]	; (20000a18 <main+0x81c>)
200006be:	228e      	movs	r2, #142	; 0x8e
200006c0:	00d2      	lsls	r2, r2, #3
200006c2:	4694      	mov	ip, r2
200006c4:	44bc      	add	ip, r7
200006c6:	4463      	add	r3, ip
200006c8:	2202      	movs	r2, #2
200006ca:	61da      	str	r2, [r3, #28]
	fire1.animation_speed = 2;
200006cc:	4bcf      	ldr	r3, [pc, #828]	; (20000a0c <main+0x810>)
200006ce:	228e      	movs	r2, #142	; 0x8e
200006d0:	00d2      	lsls	r2, r2, #3
200006d2:	4694      	mov	ip, r2
200006d4:	44bc      	add	ip, r7
200006d6:	4463      	add	r3, ip
200006d8:	2202      	movs	r2, #2
200006da:	61da      	str	r2, [r3, #28]
	fire4.animation_speed = 2;
200006dc:	4bcc      	ldr	r3, [pc, #816]	; (20000a10 <main+0x814>)
200006de:	228e      	movs	r2, #142	; 0x8e
200006e0:	00d2      	lsls	r2, r2, #3
200006e2:	4694      	mov	ip, r2
200006e4:	44bc      	add	ip, r7
200006e6:	4463      	add	r3, ip
200006e8:	2202      	movs	r2, #2
200006ea:	61da      	str	r2, [r3, #28]
	
	fire2.update = gameObjectUpdate;
200006ec:	4bc9      	ldr	r3, [pc, #804]	; (20000a14 <main+0x818>)
200006ee:	228e      	movs	r2, #142	; 0x8e
200006f0:	00d2      	lsls	r2, r2, #3
200006f2:	4694      	mov	ip, r2
200006f4:	44bc      	add	ip, r7
200006f6:	4463      	add	r3, ip
200006f8:	4ac8      	ldr	r2, [pc, #800]	; (20000a1c <main+0x820>)
200006fa:	60da      	str	r2, [r3, #12]
	fire3.update = gameObjectUpdate;
200006fc:	4bc6      	ldr	r3, [pc, #792]	; (20000a18 <main+0x81c>)
200006fe:	228e      	movs	r2, #142	; 0x8e
20000700:	00d2      	lsls	r2, r2, #3
20000702:	4694      	mov	ip, r2
20000704:	44bc      	add	ip, r7
20000706:	4463      	add	r3, ip
20000708:	4ac4      	ldr	r2, [pc, #784]	; (20000a1c <main+0x820>)
2000070a:	60da      	str	r2, [r3, #12]
	fire1.update = gameObjectUpdate;
2000070c:	4bbf      	ldr	r3, [pc, #764]	; (20000a0c <main+0x810>)
2000070e:	228e      	movs	r2, #142	; 0x8e
20000710:	00d2      	lsls	r2, r2, #3
20000712:	4694      	mov	ip, r2
20000714:	44bc      	add	ip, r7
20000716:	4463      	add	r3, ip
20000718:	4ac0      	ldr	r2, [pc, #768]	; (20000a1c <main+0x820>)
2000071a:	60da      	str	r2, [r3, #12]
	fire4.update = gameObjectUpdate;
2000071c:	4bbc      	ldr	r3, [pc, #752]	; (20000a10 <main+0x814>)
2000071e:	228e      	movs	r2, #142	; 0x8e
20000720:	00d2      	lsls	r2, r2, #3
20000722:	4694      	mov	ip, r2
20000724:	44bc      	add	ip, r7
20000726:	4463      	add	r3, ip
20000728:	4abc      	ldr	r2, [pc, #752]	; (20000a1c <main+0x820>)
2000072a:	60da      	str	r2, [r3, #12]
	SlowText text8;
	SlowText text9;
	SlowText text10;
	SlowText text11;
	SlowText text12;
	init_slow_text(&text_kra, "*KRA!* *KRA!*", "   ", 1);
2000072c:	4abc      	ldr	r2, [pc, #752]	; (20000a20 <main+0x824>)
2000072e:	49bd      	ldr	r1, [pc, #756]	; (20000a24 <main+0x828>)
20000730:	23f4      	movs	r3, #244	; 0xf4
20000732:	18f8      	adds	r0, r7, r3
20000734:	2301      	movs	r3, #1
20000736:	f003 f958 	bl	200039ea <init_slow_text>
	init_slow_text(&text1, "For centuries the", "DILs-witches have", 1);
2000073a:	4abb      	ldr	r2, [pc, #748]	; (20000a28 <main+0x82c>)
2000073c:	49bb      	ldr	r1, [pc, #748]	; (20000a2c <main+0x830>)
2000073e:	23e0      	movs	r3, #224	; 0xe0
20000740:	18f8      	adds	r0, r7, r3
20000742:	2301      	movs	r3, #1
20000744:	f003 f951 	bl	200039ea <init_slow_text>
	init_slow_text(&text2, "coiled in fear,", "    ", 1);
20000748:	4ab9      	ldr	r2, [pc, #740]	; (20000a30 <main+0x834>)
2000074a:	49ba      	ldr	r1, [pc, #744]	; (20000a34 <main+0x838>)
2000074c:	23cc      	movs	r3, #204	; 0xcc
2000074e:	18f8      	adds	r0, r7, r3
20000750:	2301      	movs	r3, #1
20000752:	f003 f94a 	bl	200039ea <init_slow_text>
	init_slow_text(&text3, "whenever they hear", "that a DIPs-witch", 1);
20000756:	4ab8      	ldr	r2, [pc, #736]	; (20000a38 <main+0x83c>)
20000758:	49b8      	ldr	r1, [pc, #736]	; (20000a3c <main+0x840>)
2000075a:	23b8      	movs	r3, #184	; 0xb8
2000075c:	18f8      	adds	r0, r7, r3
2000075e:	2301      	movs	r3, #1
20000760:	f003 f943 	bl	200039ea <init_slow_text>
	init_slow_text(&text4, "is near.", "   ", 1);
20000764:	4aae      	ldr	r2, [pc, #696]	; (20000a20 <main+0x824>)
20000766:	49b6      	ldr	r1, [pc, #728]	; (20000a40 <main+0x844>)
20000768:	23a4      	movs	r3, #164	; 0xa4
2000076a:	18f8      	adds	r0, r7, r3
2000076c:	2301      	movs	r3, #1
2000076e:	f003 f93c 	bl	200039ea <init_slow_text>
	init_slow_text(&text5, "So it is quite", "surprising, finding", 1);
20000772:	4ab4      	ldr	r2, [pc, #720]	; (20000a44 <main+0x848>)
20000774:	49b4      	ldr	r1, [pc, #720]	; (20000a48 <main+0x84c>)
20000776:	2390      	movs	r3, #144	; 0x90
20000778:	18f8      	adds	r0, r7, r3
2000077a:	2301      	movs	r3, #1
2000077c:	f003 f935 	bl	200039ea <init_slow_text>
	init_slow_text(&text6, "you here,", "    ", 1);
20000780:	4aab      	ldr	r2, [pc, #684]	; (20000a30 <main+0x834>)
20000782:	49b2      	ldr	r1, [pc, #712]	; (20000a4c <main+0x850>)
20000784:	237c      	movs	r3, #124	; 0x7c
20000786:	18f8      	adds	r0, r7, r3
20000788:	2301      	movs	r3, #1
2000078a:	f003 f92e 	bl	200039ea <init_slow_text>
	init_slow_text(&text7, "queen Daffo of DILs,", "heir to king Lear.", 1);
2000078e:	4ab0      	ldr	r2, [pc, #704]	; (20000a50 <main+0x854>)
20000790:	49b0      	ldr	r1, [pc, #704]	; (20000a54 <main+0x858>)
20000792:	2368      	movs	r3, #104	; 0x68
20000794:	18f8      	adds	r0, r7, r3
20000796:	2301      	movs	r3, #1
20000798:	f003 f927 	bl	200039ea <init_slow_text>
	init_slow_text(&text8, "But maybe you're", "tempted, to loot", 1);
2000079c:	4aae      	ldr	r2, [pc, #696]	; (20000a58 <main+0x85c>)
2000079e:	49af      	ldr	r1, [pc, #700]	; (20000a5c <main+0x860>)
200007a0:	2354      	movs	r3, #84	; 0x54
200007a2:	18f8      	adds	r0, r7, r3
200007a4:	2301      	movs	r3, #1
200007a6:	f003 f920 	bl	200039ea <init_slow_text>
	init_slow_text(&text9, "from the riches,", "    ", 1);
200007aa:	4aa1      	ldr	r2, [pc, #644]	; (20000a30 <main+0x834>)
200007ac:	49ac      	ldr	r1, [pc, #688]	; (20000a60 <main+0x864>)
200007ae:	2340      	movs	r3, #64	; 0x40
200007b0:	18f8      	adds	r0, r7, r3
200007b2:	2301      	movs	r3, #1
200007b4:	f003 f919 	bl	200039ea <init_slow_text>
	init_slow_text(&text12, "wicked DIPs-witches.", "    ", 1);
200007b8:	4a9d      	ldr	r2, [pc, #628]	; (20000a30 <main+0x834>)
200007ba:	49aa      	ldr	r1, [pc, #680]	; (20000a64 <main+0x868>)
200007bc:	1d38      	adds	r0, r7, #4
200007be:	2301      	movs	r3, #1
200007c0:	f003 f913 	bl	200039ea <init_slow_text>
	init_slow_text(&text10, "so grippily trea-", "sured by", 1);
200007c4:	4aa8      	ldr	r2, [pc, #672]	; (20000a68 <main+0x86c>)
200007c6:	49a9      	ldr	r1, [pc, #676]	; (20000a6c <main+0x870>)
200007c8:	232c      	movs	r3, #44	; 0x2c
200007ca:	18f8      	adds	r0, r7, r3
200007cc:	2301      	movs	r3, #1
200007ce:	f003 f90c 	bl	200039ea <init_slow_text>
	init_slow_text(&text11, "Enter, brave witch,", "- reset the switch!", 1);
200007d2:	4aa7      	ldr	r2, [pc, #668]	; (20000a70 <main+0x874>)
200007d4:	49a7      	ldr	r1, [pc, #668]	; (20000a74 <main+0x878>)
200007d6:	2318      	movs	r3, #24
200007d8:	18f8      	adds	r0, r7, r3
200007da:	2301      	movs	r3, #1
200007dc:	f003 f905 	bl	200039ea <init_slow_text>
	//ascii_write_part("Yeeaaah!!!", "This is working! :)", 5, 10);
	set_up_ascii();
200007e0:	f002 ffe0 	bl	200037a4 <set_up_ascii>
	set_up_DIL();
200007e4:	f002 fe0e 	bl	20003404 <set_up_DIL>
	clear_ascii();
200007e8:	f002 ffe5 	bl	200037b6 <clear_ascii>
	
	int is_climbing = 0;
200007ec:	2300      	movs	r3, #0
200007ee:	4aa2      	ldr	r2, [pc, #648]	; (20000a78 <main+0x87c>)
200007f0:	18ba      	adds	r2, r7, r2
200007f2:	6013      	str	r3, [r2, #0]
	int has_climbed = 0;
200007f4:	2300      	movs	r3, #0
200007f6:	228d      	movs	r2, #141	; 0x8d
200007f8:	00d2      	lsls	r2, r2, #3
200007fa:	18ba      	adds	r2, r7, r2
200007fc:	6013      	str	r3, [r2, #0]
	int game_over = 0;
200007fe:	2300      	movs	r3, #0
20000800:	4a9e      	ldr	r2, [pc, #632]	; (20000a7c <main+0x880>)
20000802:	18ba      	adds	r2, r7, r2
20000804:	6013      	str	r3, [r2, #0]
	int game_over_adder = 0;
20000806:	2300      	movs	r3, #0
20000808:	228c      	movs	r2, #140	; 0x8c
2000080a:	00d2      	lsls	r2, r2, #3
2000080c:	18ba      	adds	r2, r7, r2
2000080e:	6013      	str	r3, [r2, #0]
	int no_DIP = 0;
20000810:	2300      	movs	r3, #0
20000812:	4a9b      	ldr	r2, [pc, #620]	; (20000a80 <main+0x884>)
20000814:	18ba      	adds	r2, r7, r2
20000816:	6013      	str	r3, [r2, #0]
	
	
	current_screen = RESET_GAME;
20000818:	4b9a      	ldr	r3, [pc, #616]	; (20000a84 <main+0x888>)
2000081a:	220a      	movs	r2, #10
2000081c:	601a      	str	r2, [r3, #0]
	
	//Game loop
	while(1) {
			
		switch(current_screen) {
2000081e:	4b99      	ldr	r3, [pc, #612]	; (20000a84 <main+0x888>)
20000820:	681b      	ldr	r3, [r3, #0]
20000822:	2b01      	cmp	r3, #1
20000824:	d020      	beq.n	20000868 <main+0x66c>
20000826:	dc02      	bgt.n	2000082e <main+0x632>
20000828:	2b00      	cmp	r3, #0
2000082a:	d011      	beq.n	20000850 <main+0x654>
2000082c:	e7f7      	b.n	2000081e <main+0x622>
2000082e:	2b02      	cmp	r3, #2
20000830:	d100      	bne.n	20000834 <main+0x638>
20000832:	e2b7      	b.n	20000da4 <main+0xba8>
20000834:	2b0a      	cmp	r3, #10
20000836:	d101      	bne.n	2000083c <main+0x640>
20000838:	f000 fd98 	bl	2000136c <main+0x1170>
2000083c:	e7ef      	b.n	2000081e <main+0x622>
			
			case SWITCH_LOCK: //before

				while(read_DIL() == 0){
					draw_game_object(&pressObj);
2000083e:	23f0      	movs	r3, #240	; 0xf0
20000840:	009b      	lsls	r3, r3, #2
20000842:	18fb      	adds	r3, r7, r3
20000844:	0018      	movs	r0, r3
20000846:	f002 fd3f 	bl	200032c8 <draw_game_object>
					show_frame(1);
2000084a:	2001      	movs	r0, #1
2000084c:	f002 fd7d 	bl	2000334a <show_frame>
				while(read_DIL() == 0){
20000850:	f002 fde4 	bl	2000341c <read_DIL>
20000854:	1e03      	subs	r3, r0, #0
20000856:	d0f2      	beq.n	2000083e <main+0x642>
				}
				
				counter = 0;
20000858:	4b8b      	ldr	r3, [pc, #556]	; (20000a88 <main+0x88c>)
2000085a:	2200      	movs	r2, #0
2000085c:	601a      	str	r2, [r3, #0]
				current_screen = START_SCREEN;
2000085e:	4b89      	ldr	r3, [pc, #548]	; (20000a84 <main+0x888>)
20000860:	2201      	movs	r2, #1
20000862:	601a      	str	r2, [r3, #0]
				break;
20000864:	f000 fe2b 	bl	200014be <main+0x12c2>
			
			
			case START_SCREEN: //outside
				
				counter++;
20000868:	4b87      	ldr	r3, [pc, #540]	; (20000a88 <main+0x88c>)
2000086a:	681b      	ldr	r3, [r3, #0]
2000086c:	1c5a      	adds	r2, r3, #1
2000086e:	4b86      	ldr	r3, [pc, #536]	; (20000a88 <main+0x88c>)
20000870:	601a      	str	r2, [r3, #0]
				
				if(titleObj.yPos < 1) {
20000872:	23ff      	movs	r3, #255	; 0xff
20000874:	009b      	lsls	r3, r3, #2
20000876:	18fb      	adds	r3, r7, r3
20000878:	689b      	ldr	r3, [r3, #8]
2000087a:	2b00      	cmp	r3, #0
2000087c:	dc08      	bgt.n	20000890 <main+0x694>
					titleObj.yPos++;
2000087e:	23ff      	movs	r3, #255	; 0xff
20000880:	009b      	lsls	r3, r3, #2
20000882:	18fb      	adds	r3, r7, r3
20000884:	689b      	ldr	r3, [r3, #8]
20000886:	1c5a      	adds	r2, r3, #1
20000888:	23ff      	movs	r3, #255	; 0xff
2000088a:	009b      	lsls	r3, r3, #2
2000088c:	18fb      	adds	r3, r7, r3
2000088e:	609a      	str	r2, [r3, #8]
				}
				
				draw_game_object(&castleObj);
20000890:	23e1      	movs	r3, #225	; 0xe1
20000892:	009b      	lsls	r3, r3, #2
20000894:	18fb      	adds	r3, r7, r3
20000896:	0018      	movs	r0, r3
20000898:	f002 fd16 	bl	200032c8 <draw_game_object>
				draw_game_object(&fire2);
2000089c:	2393      	movs	r3, #147	; 0x93
2000089e:	009b      	lsls	r3, r3, #2
200008a0:	18fb      	adds	r3, r7, r3
200008a2:	0018      	movs	r0, r3
200008a4:	f002 fd10 	bl	200032c8 <draw_game_object>
				draw_game_object(&fire3);
200008a8:	238a      	movs	r3, #138	; 0x8a
200008aa:	009b      	lsls	r3, r3, #2
200008ac:	18fb      	adds	r3, r7, r3
200008ae:	0018      	movs	r0, r3
200008b0:	f002 fd0a 	bl	200032c8 <draw_game_object>
				draw_game_object(&fire1);
200008b4:	23f0      	movs	r3, #240	; 0xf0
200008b6:	005b      	lsls	r3, r3, #1
200008b8:	18fb      	adds	r3, r7, r3
200008ba:	0018      	movs	r0, r3
200008bc:	f002 fd04 	bl	200032c8 <draw_game_object>
				draw_game_object(&fire4);
200008c0:	2381      	movs	r3, #129	; 0x81
200008c2:	009b      	lsls	r3, r3, #2
200008c4:	18fb      	adds	r3, r7, r3
200008c6:	0018      	movs	r0, r3
200008c8:	f002 fcfe 	bl	200032c8 <draw_game_object>
				draw_game_object(&titleObj);
200008cc:	23ff      	movs	r3, #255	; 0xff
200008ce:	009b      	lsls	r3, r3, #2
200008d0:	18fb      	adds	r3, r7, r3
200008d2:	0018      	movs	r0, r3
200008d4:	f002 fcf8 	bl	200032c8 <draw_game_object>
				draw_game_object(&bird);
200008d8:	23ae      	movs	r3, #174	; 0xae
200008da:	009b      	lsls	r3, r3, #2
200008dc:	18fb      	adds	r3, r7, r3
200008de:	0018      	movs	r0, r3
200008e0:	f002 fcf2 	bl	200032c8 <draw_game_object>
				show_frame(1);
200008e4:	2001      	movs	r0, #1
200008e6:	f002 fd30 	bl	2000334a <show_frame>
				
				static int long_text = 40;
				static int short_text = 20;
				static int delay_until_text = 130;
				
				if (counter < delay_until_text - 55 && counter > delay_until_text - 90)
200008ea:	4b68      	ldr	r3, [pc, #416]	; (20000a8c <main+0x890>)
200008ec:	681b      	ldr	r3, [r3, #0]
200008ee:	3b37      	subs	r3, #55	; 0x37
200008f0:	001a      	movs	r2, r3
200008f2:	4b65      	ldr	r3, [pc, #404]	; (20000a88 <main+0x88c>)
200008f4:	681b      	ldr	r3, [r3, #0]
200008f6:	429a      	cmp	r2, r3
200008f8:	dd13      	ble.n	20000922 <main+0x726>
200008fa:	4b64      	ldr	r3, [pc, #400]	; (20000a8c <main+0x890>)
200008fc:	681b      	ldr	r3, [r3, #0]
200008fe:	3b5a      	subs	r3, #90	; 0x5a
20000900:	001a      	movs	r2, r3
20000902:	4b61      	ldr	r3, [pc, #388]	; (20000a88 <main+0x88c>)
20000904:	681b      	ldr	r3, [r3, #0]
20000906:	429a      	cmp	r2, r3
20000908:	da0b      	bge.n	20000922 <main+0x726>
					text_kra.display(&text_kra, 20);
2000090a:	4b61      	ldr	r3, [pc, #388]	; (20000a90 <main+0x894>)
2000090c:	228e      	movs	r2, #142	; 0x8e
2000090e:	00d2      	lsls	r2, r2, #3
20000910:	4694      	mov	ip, r2
20000912:	44bc      	add	ip, r7
20000914:	4463      	add	r3, ip
20000916:	691b      	ldr	r3, [r3, #16]
20000918:	22f4      	movs	r2, #244	; 0xf4
2000091a:	18ba      	adds	r2, r7, r2
2000091c:	2114      	movs	r1, #20
2000091e:	0010      	movs	r0, r2
20000920:	4798      	blx	r3
				if (counter == delay_until_text - 25)
20000922:	4b5a      	ldr	r3, [pc, #360]	; (20000a8c <main+0x890>)
20000924:	681b      	ldr	r3, [r3, #0]
20000926:	3b19      	subs	r3, #25
20000928:	001a      	movs	r2, r3
2000092a:	4b57      	ldr	r3, [pc, #348]	; (20000a88 <main+0x88c>)
2000092c:	681b      	ldr	r3, [r3, #0]
2000092e:	429a      	cmp	r2, r3
20000930:	d101      	bne.n	20000936 <main+0x73a>
					clear_ascii();
20000932:	f002 ff40 	bl	200037b6 <clear_ascii>
				
				if (counter < delay_until_text);
20000936:	4b54      	ldr	r3, [pc, #336]	; (20000a88 <main+0x88c>)
20000938:	681a      	ldr	r2, [r3, #0]
2000093a:	4b54      	ldr	r3, [pc, #336]	; (20000a8c <main+0x890>)
2000093c:	681b      	ldr	r3, [r3, #0]
2000093e:	429a      	cmp	r2, r3
20000940:	da00      	bge.n	20000944 <main+0x748>
20000942:	e1bc      	b.n	20000cbe <main+0xac2>
				else if (counter < delay_until_text + 1*long_text)
20000944:	4b51      	ldr	r3, [pc, #324]	; (20000a8c <main+0x890>)
20000946:	681a      	ldr	r2, [r3, #0]
20000948:	4b52      	ldr	r3, [pc, #328]	; (20000a94 <main+0x898>)
2000094a:	681b      	ldr	r3, [r3, #0]
2000094c:	18d2      	adds	r2, r2, r3
2000094e:	4b4e      	ldr	r3, [pc, #312]	; (20000a88 <main+0x88c>)
20000950:	681b      	ldr	r3, [r3, #0]
20000952:	429a      	cmp	r2, r3
20000954:	dd0c      	ble.n	20000970 <main+0x774>
					text1.display(&text1, 20);
20000956:	4b50      	ldr	r3, [pc, #320]	; (20000a98 <main+0x89c>)
20000958:	228e      	movs	r2, #142	; 0x8e
2000095a:	00d2      	lsls	r2, r2, #3
2000095c:	4694      	mov	ip, r2
2000095e:	44bc      	add	ip, r7
20000960:	4463      	add	r3, ip
20000962:	691b      	ldr	r3, [r3, #16]
20000964:	22e0      	movs	r2, #224	; 0xe0
20000966:	18ba      	adds	r2, r7, r2
20000968:	2114      	movs	r1, #20
2000096a:	0010      	movs	r0, r2
2000096c:	4798      	blx	r3
2000096e:	e1a6      	b.n	20000cbe <main+0xac2>
				else if(counter < delay_until_text + 1*long_text + 1*short_text)
20000970:	4b46      	ldr	r3, [pc, #280]	; (20000a8c <main+0x890>)
20000972:	681a      	ldr	r2, [r3, #0]
20000974:	4b47      	ldr	r3, [pc, #284]	; (20000a94 <main+0x898>)
20000976:	681b      	ldr	r3, [r3, #0]
20000978:	18d2      	adds	r2, r2, r3
2000097a:	4b48      	ldr	r3, [pc, #288]	; (20000a9c <main+0x8a0>)
2000097c:	681b      	ldr	r3, [r3, #0]
2000097e:	18d2      	adds	r2, r2, r3
20000980:	4b41      	ldr	r3, [pc, #260]	; (20000a88 <main+0x88c>)
20000982:	681b      	ldr	r3, [r3, #0]
20000984:	429a      	cmp	r2, r3
20000986:	dd0c      	ble.n	200009a2 <main+0x7a6>
					text2.display(&text2, 20);
20000988:	4b45      	ldr	r3, [pc, #276]	; (20000aa0 <main+0x8a4>)
2000098a:	228e      	movs	r2, #142	; 0x8e
2000098c:	00d2      	lsls	r2, r2, #3
2000098e:	4694      	mov	ip, r2
20000990:	44bc      	add	ip, r7
20000992:	4463      	add	r3, ip
20000994:	691b      	ldr	r3, [r3, #16]
20000996:	22cc      	movs	r2, #204	; 0xcc
20000998:	18ba      	adds	r2, r7, r2
2000099a:	2114      	movs	r1, #20
2000099c:	0010      	movs	r0, r2
2000099e:	4798      	blx	r3
200009a0:	e18d      	b.n	20000cbe <main+0xac2>
				else if(counter < delay_until_text + 2*long_text + 1*short_text)
200009a2:	4b3c      	ldr	r3, [pc, #240]	; (20000a94 <main+0x898>)
200009a4:	681b      	ldr	r3, [r3, #0]
200009a6:	005a      	lsls	r2, r3, #1
200009a8:	4b38      	ldr	r3, [pc, #224]	; (20000a8c <main+0x890>)
200009aa:	681b      	ldr	r3, [r3, #0]
200009ac:	18d2      	adds	r2, r2, r3
200009ae:	4b3b      	ldr	r3, [pc, #236]	; (20000a9c <main+0x8a0>)
200009b0:	681b      	ldr	r3, [r3, #0]
200009b2:	18d2      	adds	r2, r2, r3
200009b4:	4b34      	ldr	r3, [pc, #208]	; (20000a88 <main+0x88c>)
200009b6:	681b      	ldr	r3, [r3, #0]
200009b8:	429a      	cmp	r2, r3
200009ba:	dd0c      	ble.n	200009d6 <main+0x7da>
					text3.display(&text3, 20);
200009bc:	4b39      	ldr	r3, [pc, #228]	; (20000aa4 <main+0x8a8>)
200009be:	228e      	movs	r2, #142	; 0x8e
200009c0:	00d2      	lsls	r2, r2, #3
200009c2:	4694      	mov	ip, r2
200009c4:	44bc      	add	ip, r7
200009c6:	4463      	add	r3, ip
200009c8:	691b      	ldr	r3, [r3, #16]
200009ca:	22b8      	movs	r2, #184	; 0xb8
200009cc:	18ba      	adds	r2, r7, r2
200009ce:	2114      	movs	r1, #20
200009d0:	0010      	movs	r0, r2
200009d2:	4798      	blx	r3
200009d4:	e173      	b.n	20000cbe <main+0xac2>
				else if(counter < delay_until_text + 2*long_text + 2*short_text)
200009d6:	4b2f      	ldr	r3, [pc, #188]	; (20000a94 <main+0x898>)
200009d8:	681b      	ldr	r3, [r3, #0]
200009da:	005a      	lsls	r2, r3, #1
200009dc:	4b2b      	ldr	r3, [pc, #172]	; (20000a8c <main+0x890>)
200009de:	681b      	ldr	r3, [r3, #0]
200009e0:	18d2      	adds	r2, r2, r3
200009e2:	4b2e      	ldr	r3, [pc, #184]	; (20000a9c <main+0x8a0>)
200009e4:	681b      	ldr	r3, [r3, #0]
200009e6:	005b      	lsls	r3, r3, #1
200009e8:	18d2      	adds	r2, r2, r3
200009ea:	4b27      	ldr	r3, [pc, #156]	; (20000a88 <main+0x88c>)
200009ec:	681b      	ldr	r3, [r3, #0]
200009ee:	429a      	cmp	r2, r3
200009f0:	dd5c      	ble.n	20000aac <main+0x8b0>
					text4.display(&text4, 20);
200009f2:	4b2d      	ldr	r3, [pc, #180]	; (20000aa8 <main+0x8ac>)
200009f4:	228e      	movs	r2, #142	; 0x8e
200009f6:	00d2      	lsls	r2, r2, #3
200009f8:	4694      	mov	ip, r2
200009fa:	44bc      	add	ip, r7
200009fc:	4463      	add	r3, ip
200009fe:	691b      	ldr	r3, [r3, #16]
20000a00:	22a4      	movs	r2, #164	; 0xa4
20000a02:	18ba      	adds	r2, r7, r2
20000a04:	2114      	movs	r1, #20
20000a06:	0010      	movs	r0, r2
20000a08:	4798      	blx	r3
20000a0a:	e158      	b.n	20000cbe <main+0xac2>
20000a0c:	fffffd70 			; <UNDEFINED> instruction: 0xfffffd70
20000a10:	fffffd94 			; <UNDEFINED> instruction: 0xfffffd94
20000a14:	fffffddc 			; <UNDEFINED> instruction: 0xfffffddc
20000a18:	fffffdb8 			; <UNDEFINED> instruction: 0xfffffdb8
20000a1c:	2000153d 	andcs	r1, r0, sp, lsr r5
20000a20:	2000a4c0 	andcs	sl, r0, r0, asr #9
20000a24:	2000a4c4 	andcs	sl, r0, r4, asr #9
20000a28:	2000a4d4 	ldrdcs	sl, [r0], -r4
20000a2c:	2000a4e8 	andcs	sl, r0, r8, ror #9
20000a30:	2000a4fc 	strdcs	sl, [r0], -ip
20000a34:	2000a504 	andcs	sl, r0, r4, lsl #10
20000a38:	2000a514 	andcs	sl, r0, r4, lsl r5
20000a3c:	2000a528 	andcs	sl, r0, r8, lsr #10
20000a40:	2000a53c 	andcs	sl, r0, ip, lsr r5
20000a44:	2000a548 	andcs	sl, r0, r8, asr #10
20000a48:	2000a55c 	andcs	sl, r0, ip, asr r5
20000a4c:	2000a56c 	andcs	sl, r0, ip, ror #10
20000a50:	2000a578 	andcs	sl, r0, r8, ror r5
20000a54:	2000a58c 	andcs	sl, r0, ip, lsl #11
20000a58:	2000a5a4 	andcs	sl, r0, r4, lsr #11
20000a5c:	2000a5b8 			; <UNDEFINED> instruction: 0x2000a5b8
20000a60:	2000a5cc 	andcs	sl, r0, ip, asr #11
20000a64:	2000a5e0 	andcs	sl, r0, r0, ror #11
20000a68:	2000a5f8 	strdcs	sl, [r0], -r8
20000a6c:	2000a604 	andcs	sl, r0, r4, lsl #12
20000a70:	2000a618 	andcs	sl, r0, r8, lsl r6
20000a74:	2000a62c 	andcs	sl, r0, ip, lsr #12
20000a78:	0000046c 	andeq	r0, r0, ip, ror #8
20000a7c:	00000464 	andeq	r0, r0, r4, ror #8
20000a80:	0000045c 	andeq	r0, r0, ip, asr r4
20000a84:	20007c2c 	andcs	r7, r0, ip, lsr #24
20000a88:	20003eb4 			; <UNDEFINED> instruction: 0x20003eb4
20000a8c:	20007c30 	andcs	r7, r0, r0, lsr ip
20000a90:	fffffc84 			; <UNDEFINED> instruction: 0xfffffc84
20000a94:	20007c34 	andcs	r7, r0, r4, lsr ip
20000a98:	fffffc70 			; <UNDEFINED> instruction: 0xfffffc70
20000a9c:	20007c38 	andcs	r7, r0, r8, lsr ip
20000aa0:	fffffc5c 			; <UNDEFINED> instruction: 0xfffffc5c
20000aa4:	fffffc48 			; <UNDEFINED> instruction: 0xfffffc48
20000aa8:	fffffc34 			; <UNDEFINED> instruction: 0xfffffc34
				else if(counter < delay_until_text + 3*long_text + 2*short_text)
20000aac:	4bd6      	ldr	r3, [pc, #856]	; (20000e08 <main+0xc0c>)
20000aae:	681a      	ldr	r2, [r3, #0]
20000ab0:	0013      	movs	r3, r2
20000ab2:	005b      	lsls	r3, r3, #1
20000ab4:	189a      	adds	r2, r3, r2
20000ab6:	4bd5      	ldr	r3, [pc, #852]	; (20000e0c <main+0xc10>)
20000ab8:	681b      	ldr	r3, [r3, #0]
20000aba:	18d2      	adds	r2, r2, r3
20000abc:	4bd4      	ldr	r3, [pc, #848]	; (20000e10 <main+0xc14>)
20000abe:	681b      	ldr	r3, [r3, #0]
20000ac0:	005b      	lsls	r3, r3, #1
20000ac2:	18d2      	adds	r2, r2, r3
20000ac4:	4bd3      	ldr	r3, [pc, #844]	; (20000e14 <main+0xc18>)
20000ac6:	681b      	ldr	r3, [r3, #0]
20000ac8:	429a      	cmp	r2, r3
20000aca:	dd0c      	ble.n	20000ae6 <main+0x8ea>
					text5.display(&text5, 15);
20000acc:	4bd2      	ldr	r3, [pc, #840]	; (20000e18 <main+0xc1c>)
20000ace:	228e      	movs	r2, #142	; 0x8e
20000ad0:	00d2      	lsls	r2, r2, #3
20000ad2:	4694      	mov	ip, r2
20000ad4:	44bc      	add	ip, r7
20000ad6:	4463      	add	r3, ip
20000ad8:	691b      	ldr	r3, [r3, #16]
20000ada:	2290      	movs	r2, #144	; 0x90
20000adc:	18ba      	adds	r2, r7, r2
20000ade:	210f      	movs	r1, #15
20000ae0:	0010      	movs	r0, r2
20000ae2:	4798      	blx	r3
20000ae4:	e0eb      	b.n	20000cbe <main+0xac2>
				else if(counter < delay_until_text + 3*long_text + 3*short_text)
20000ae6:	4bc8      	ldr	r3, [pc, #800]	; (20000e08 <main+0xc0c>)
20000ae8:	681a      	ldr	r2, [r3, #0]
20000aea:	0013      	movs	r3, r2
20000aec:	005b      	lsls	r3, r3, #1
20000aee:	189a      	adds	r2, r3, r2
20000af0:	4bc6      	ldr	r3, [pc, #792]	; (20000e0c <main+0xc10>)
20000af2:	681b      	ldr	r3, [r3, #0]
20000af4:	18d1      	adds	r1, r2, r3
20000af6:	4bc6      	ldr	r3, [pc, #792]	; (20000e10 <main+0xc14>)
20000af8:	681a      	ldr	r2, [r3, #0]
20000afa:	0013      	movs	r3, r2
20000afc:	005b      	lsls	r3, r3, #1
20000afe:	189b      	adds	r3, r3, r2
20000b00:	18ca      	adds	r2, r1, r3
20000b02:	4bc4      	ldr	r3, [pc, #784]	; (20000e14 <main+0xc18>)
20000b04:	681b      	ldr	r3, [r3, #0]
20000b06:	429a      	cmp	r2, r3
20000b08:	dd0c      	ble.n	20000b24 <main+0x928>
					text6.display(&text6, 20);
20000b0a:	4bc4      	ldr	r3, [pc, #784]	; (20000e1c <main+0xc20>)
20000b0c:	228e      	movs	r2, #142	; 0x8e
20000b0e:	00d2      	lsls	r2, r2, #3
20000b10:	4694      	mov	ip, r2
20000b12:	44bc      	add	ip, r7
20000b14:	4463      	add	r3, ip
20000b16:	691b      	ldr	r3, [r3, #16]
20000b18:	227c      	movs	r2, #124	; 0x7c
20000b1a:	18ba      	adds	r2, r7, r2
20000b1c:	2114      	movs	r1, #20
20000b1e:	0010      	movs	r0, r2
20000b20:	4798      	blx	r3
20000b22:	e0cc      	b.n	20000cbe <main+0xac2>
				else if(counter < delay_until_text + 4*long_text + 3*short_text + 3)
20000b24:	4bb8      	ldr	r3, [pc, #736]	; (20000e08 <main+0xc0c>)
20000b26:	681b      	ldr	r3, [r3, #0]
20000b28:	009a      	lsls	r2, r3, #2
20000b2a:	4bb8      	ldr	r3, [pc, #736]	; (20000e0c <main+0xc10>)
20000b2c:	681b      	ldr	r3, [r3, #0]
20000b2e:	18d1      	adds	r1, r2, r3
20000b30:	4bb7      	ldr	r3, [pc, #732]	; (20000e10 <main+0xc14>)
20000b32:	681a      	ldr	r2, [r3, #0]
20000b34:	0013      	movs	r3, r2
20000b36:	005b      	lsls	r3, r3, #1
20000b38:	189b      	adds	r3, r3, r2
20000b3a:	18cb      	adds	r3, r1, r3
20000b3c:	1cda      	adds	r2, r3, #3
20000b3e:	4bb5      	ldr	r3, [pc, #724]	; (20000e14 <main+0xc18>)
20000b40:	681b      	ldr	r3, [r3, #0]
20000b42:	429a      	cmp	r2, r3
20000b44:	dd0c      	ble.n	20000b60 <main+0x964>
					text7.display(&text7, 20);
20000b46:	4bb6      	ldr	r3, [pc, #728]	; (20000e20 <main+0xc24>)
20000b48:	228e      	movs	r2, #142	; 0x8e
20000b4a:	00d2      	lsls	r2, r2, #3
20000b4c:	4694      	mov	ip, r2
20000b4e:	44bc      	add	ip, r7
20000b50:	4463      	add	r3, ip
20000b52:	691b      	ldr	r3, [r3, #16]
20000b54:	2268      	movs	r2, #104	; 0x68
20000b56:	18ba      	adds	r2, r7, r2
20000b58:	2114      	movs	r1, #20
20000b5a:	0010      	movs	r0, r2
20000b5c:	4798      	blx	r3
20000b5e:	e0ae      	b.n	20000cbe <main+0xac2>
				else if(counter < delay_until_text + 5*long_text + 3*short_text + 2)
20000b60:	4ba9      	ldr	r3, [pc, #676]	; (20000e08 <main+0xc0c>)
20000b62:	681a      	ldr	r2, [r3, #0]
20000b64:	0013      	movs	r3, r2
20000b66:	009b      	lsls	r3, r3, #2
20000b68:	189a      	adds	r2, r3, r2
20000b6a:	4ba8      	ldr	r3, [pc, #672]	; (20000e0c <main+0xc10>)
20000b6c:	681b      	ldr	r3, [r3, #0]
20000b6e:	18d1      	adds	r1, r2, r3
20000b70:	4ba7      	ldr	r3, [pc, #668]	; (20000e10 <main+0xc14>)
20000b72:	681a      	ldr	r2, [r3, #0]
20000b74:	0013      	movs	r3, r2
20000b76:	005b      	lsls	r3, r3, #1
20000b78:	189b      	adds	r3, r3, r2
20000b7a:	18cb      	adds	r3, r1, r3
20000b7c:	1c9a      	adds	r2, r3, #2
20000b7e:	4ba5      	ldr	r3, [pc, #660]	; (20000e14 <main+0xc18>)
20000b80:	681b      	ldr	r3, [r3, #0]
20000b82:	429a      	cmp	r2, r3
20000b84:	dd0c      	ble.n	20000ba0 <main+0x9a4>
					text8.display(&text8, 20);
20000b86:	4ba7      	ldr	r3, [pc, #668]	; (20000e24 <main+0xc28>)
20000b88:	228e      	movs	r2, #142	; 0x8e
20000b8a:	00d2      	lsls	r2, r2, #3
20000b8c:	4694      	mov	ip, r2
20000b8e:	44bc      	add	ip, r7
20000b90:	4463      	add	r3, ip
20000b92:	691b      	ldr	r3, [r3, #16]
20000b94:	2254      	movs	r2, #84	; 0x54
20000b96:	18ba      	adds	r2, r7, r2
20000b98:	2114      	movs	r1, #20
20000b9a:	0010      	movs	r0, r2
20000b9c:	4798      	blx	r3
20000b9e:	e08e      	b.n	20000cbe <main+0xac2>
				else if(counter < delay_until_text + 5*long_text + 4*short_text + 2)
20000ba0:	4b99      	ldr	r3, [pc, #612]	; (20000e08 <main+0xc0c>)
20000ba2:	681a      	ldr	r2, [r3, #0]
20000ba4:	0013      	movs	r3, r2
20000ba6:	009b      	lsls	r3, r3, #2
20000ba8:	189a      	adds	r2, r3, r2
20000baa:	4b98      	ldr	r3, [pc, #608]	; (20000e0c <main+0xc10>)
20000bac:	681b      	ldr	r3, [r3, #0]
20000bae:	18d2      	adds	r2, r2, r3
20000bb0:	4b97      	ldr	r3, [pc, #604]	; (20000e10 <main+0xc14>)
20000bb2:	681b      	ldr	r3, [r3, #0]
20000bb4:	009b      	lsls	r3, r3, #2
20000bb6:	18d3      	adds	r3, r2, r3
20000bb8:	1c9a      	adds	r2, r3, #2
20000bba:	4b96      	ldr	r3, [pc, #600]	; (20000e14 <main+0xc18>)
20000bbc:	681b      	ldr	r3, [r3, #0]
20000bbe:	429a      	cmp	r2, r3
20000bc0:	dd0c      	ble.n	20000bdc <main+0x9e0>
					text9.display(&text9, 20);
20000bc2:	4b99      	ldr	r3, [pc, #612]	; (20000e28 <main+0xc2c>)
20000bc4:	228e      	movs	r2, #142	; 0x8e
20000bc6:	00d2      	lsls	r2, r2, #3
20000bc8:	4694      	mov	ip, r2
20000bca:	44bc      	add	ip, r7
20000bcc:	4463      	add	r3, ip
20000bce:	691b      	ldr	r3, [r3, #16]
20000bd0:	2240      	movs	r2, #64	; 0x40
20000bd2:	18ba      	adds	r2, r7, r2
20000bd4:	2114      	movs	r1, #20
20000bd6:	0010      	movs	r0, r2
20000bd8:	4798      	blx	r3
20000bda:	e070      	b.n	20000cbe <main+0xac2>
				else if(counter < delay_until_text + 6*long_text + 4*short_text - 2 + 2)
20000bdc:	4b8a      	ldr	r3, [pc, #552]	; (20000e08 <main+0xc0c>)
20000bde:	681a      	ldr	r2, [r3, #0]
20000be0:	0013      	movs	r3, r2
20000be2:	005b      	lsls	r3, r3, #1
20000be4:	189b      	adds	r3, r3, r2
20000be6:	005b      	lsls	r3, r3, #1
20000be8:	001a      	movs	r2, r3
20000bea:	4b88      	ldr	r3, [pc, #544]	; (20000e0c <main+0xc10>)
20000bec:	681b      	ldr	r3, [r3, #0]
20000bee:	18d2      	adds	r2, r2, r3
20000bf0:	4b87      	ldr	r3, [pc, #540]	; (20000e10 <main+0xc14>)
20000bf2:	681b      	ldr	r3, [r3, #0]
20000bf4:	009b      	lsls	r3, r3, #2
20000bf6:	18d2      	adds	r2, r2, r3
20000bf8:	4b86      	ldr	r3, [pc, #536]	; (20000e14 <main+0xc18>)
20000bfa:	681b      	ldr	r3, [r3, #0]
20000bfc:	429a      	cmp	r2, r3
20000bfe:	dd0c      	ble.n	20000c1a <main+0xa1e>
					text10.display(&text10, 15);
20000c00:	4b8a      	ldr	r3, [pc, #552]	; (20000e2c <main+0xc30>)
20000c02:	228e      	movs	r2, #142	; 0x8e
20000c04:	00d2      	lsls	r2, r2, #3
20000c06:	4694      	mov	ip, r2
20000c08:	44bc      	add	ip, r7
20000c0a:	4463      	add	r3, ip
20000c0c:	691b      	ldr	r3, [r3, #16]
20000c0e:	222c      	movs	r2, #44	; 0x2c
20000c10:	18ba      	adds	r2, r7, r2
20000c12:	210f      	movs	r1, #15
20000c14:	0010      	movs	r0, r2
20000c16:	4798      	blx	r3
20000c18:	e051      	b.n	20000cbe <main+0xac2>
				else if(counter < delay_until_text + 6*long_text + 5*short_text + 3 + 2)
20000c1a:	4b7b      	ldr	r3, [pc, #492]	; (20000e08 <main+0xc0c>)
20000c1c:	681a      	ldr	r2, [r3, #0]
20000c1e:	0013      	movs	r3, r2
20000c20:	005b      	lsls	r3, r3, #1
20000c22:	189b      	adds	r3, r3, r2
20000c24:	005b      	lsls	r3, r3, #1
20000c26:	001a      	movs	r2, r3
20000c28:	4b78      	ldr	r3, [pc, #480]	; (20000e0c <main+0xc10>)
20000c2a:	681b      	ldr	r3, [r3, #0]
20000c2c:	18d1      	adds	r1, r2, r3
20000c2e:	4b78      	ldr	r3, [pc, #480]	; (20000e10 <main+0xc14>)
20000c30:	681a      	ldr	r2, [r3, #0]
20000c32:	0013      	movs	r3, r2
20000c34:	009b      	lsls	r3, r3, #2
20000c36:	189b      	adds	r3, r3, r2
20000c38:	18cb      	adds	r3, r1, r3
20000c3a:	1d5a      	adds	r2, r3, #5
20000c3c:	4b75      	ldr	r3, [pc, #468]	; (20000e14 <main+0xc18>)
20000c3e:	681b      	ldr	r3, [r3, #0]
20000c40:	429a      	cmp	r2, r3
20000c42:	dd0b      	ble.n	20000c5c <main+0xa60>
					text12.display(&text12, 15);
20000c44:	4b7a      	ldr	r3, [pc, #488]	; (20000e30 <main+0xc34>)
20000c46:	228e      	movs	r2, #142	; 0x8e
20000c48:	00d2      	lsls	r2, r2, #3
20000c4a:	4694      	mov	ip, r2
20000c4c:	44bc      	add	ip, r7
20000c4e:	4463      	add	r3, ip
20000c50:	691b      	ldr	r3, [r3, #16]
20000c52:	1d3a      	adds	r2, r7, #4
20000c54:	210f      	movs	r1, #15
20000c56:	0010      	movs	r0, r2
20000c58:	4798      	blx	r3
20000c5a:	e030      	b.n	20000cbe <main+0xac2>
				else if(counter < delay_until_text + 7*long_text + 5*short_text + 6 + 2) {
20000c5c:	4b6a      	ldr	r3, [pc, #424]	; (20000e08 <main+0xc0c>)
20000c5e:	681a      	ldr	r2, [r3, #0]
20000c60:	0013      	movs	r3, r2
20000c62:	00db      	lsls	r3, r3, #3
20000c64:	1a9a      	subs	r2, r3, r2
20000c66:	4b69      	ldr	r3, [pc, #420]	; (20000e0c <main+0xc10>)
20000c68:	681b      	ldr	r3, [r3, #0]
20000c6a:	18d1      	adds	r1, r2, r3
20000c6c:	4b68      	ldr	r3, [pc, #416]	; (20000e10 <main+0xc14>)
20000c6e:	681a      	ldr	r2, [r3, #0]
20000c70:	0013      	movs	r3, r2
20000c72:	009b      	lsls	r3, r3, #2
20000c74:	189b      	adds	r3, r3, r2
20000c76:	18cb      	adds	r3, r1, r3
20000c78:	3308      	adds	r3, #8
20000c7a:	001a      	movs	r2, r3
20000c7c:	4b65      	ldr	r3, [pc, #404]	; (20000e14 <main+0xc18>)
20000c7e:	681b      	ldr	r3, [r3, #0]
20000c80:	429a      	cmp	r2, r3
20000c82:	dd0c      	ble.n	20000c9e <main+0xaa2>
					text11.display(&text11, 20);
20000c84:	4b6b      	ldr	r3, [pc, #428]	; (20000e34 <main+0xc38>)
20000c86:	228e      	movs	r2, #142	; 0x8e
20000c88:	00d2      	lsls	r2, r2, #3
20000c8a:	4694      	mov	ip, r2
20000c8c:	44bc      	add	ip, r7
20000c8e:	4463      	add	r3, ip
20000c90:	691b      	ldr	r3, [r3, #16]
20000c92:	2218      	movs	r2, #24
20000c94:	18ba      	adds	r2, r7, r2
20000c96:	2114      	movs	r1, #20
20000c98:	0010      	movs	r0, r2
20000c9a:	4798      	blx	r3
20000c9c:	e00f      	b.n	20000cbe <main+0xac2>
				} else {
					if (read_DIL() == 0) {
20000c9e:	f002 fbbd 	bl	2000341c <read_DIL>
20000ca2:	1e03      	subs	r3, r0, #0
20000ca4:	d10b      	bne.n	20000cbe <main+0xac2>
						current_screen = GAME_SCREEN;
20000ca6:	4b64      	ldr	r3, [pc, #400]	; (20000e38 <main+0xc3c>)
20000ca8:	2202      	movs	r2, #2
20000caa:	601a      	str	r2, [r3, #0]
						random_seed = counter;
20000cac:	4b59      	ldr	r3, [pc, #356]	; (20000e14 <main+0xc18>)
20000cae:	681a      	ldr	r2, [r3, #0]
20000cb0:	4b62      	ldr	r3, [pc, #392]	; (20000e3c <main+0xc40>)
20000cb2:	601a      	str	r2, [r3, #0]
						counter = 0;
20000cb4:	4b57      	ldr	r3, [pc, #348]	; (20000e14 <main+0xc18>)
20000cb6:	2200      	movs	r2, #0
20000cb8:	601a      	str	r2, [r3, #0]
						clear_ascii();
20000cba:	f002 fd7c 	bl	200037b6 <clear_ascii>
					}
				}
				
				if(read_DIL() == SKIP_VALUE) {
20000cbe:	f002 fbad 	bl	2000341c <read_DIL>
20000cc2:	0003      	movs	r3, r0
20000cc4:	2b81      	cmp	r3, #129	; 0x81
20000cc6:	d10b      	bne.n	20000ce0 <main+0xae4>
					current_screen = GAME_SCREEN;
20000cc8:	4b5b      	ldr	r3, [pc, #364]	; (20000e38 <main+0xc3c>)
20000cca:	2202      	movs	r2, #2
20000ccc:	601a      	str	r2, [r3, #0]
					random_seed = counter;
20000cce:	4b51      	ldr	r3, [pc, #324]	; (20000e14 <main+0xc18>)
20000cd0:	681a      	ldr	r2, [r3, #0]
20000cd2:	4b5a      	ldr	r3, [pc, #360]	; (20000e3c <main+0xc40>)
20000cd4:	601a      	str	r2, [r3, #0]
					counter = 0;
20000cd6:	4b4f      	ldr	r3, [pc, #316]	; (20000e14 <main+0xc18>)
20000cd8:	2200      	movs	r2, #0
20000cda:	601a      	str	r2, [r3, #0]
					clear_ascii();
20000cdc:	f002 fd6b 	bl	200037b6 <clear_ascii>
				}
				
				
				fire2.update(&fire2);
20000ce0:	4b57      	ldr	r3, [pc, #348]	; (20000e40 <main+0xc44>)
20000ce2:	228e      	movs	r2, #142	; 0x8e
20000ce4:	00d2      	lsls	r2, r2, #3
20000ce6:	4694      	mov	ip, r2
20000ce8:	44bc      	add	ip, r7
20000cea:	4463      	add	r3, ip
20000cec:	68db      	ldr	r3, [r3, #12]
20000cee:	2293      	movs	r2, #147	; 0x93
20000cf0:	0092      	lsls	r2, r2, #2
20000cf2:	18ba      	adds	r2, r7, r2
20000cf4:	0010      	movs	r0, r2
20000cf6:	4798      	blx	r3
				fire3.update(&fire3);
20000cf8:	4b52      	ldr	r3, [pc, #328]	; (20000e44 <main+0xc48>)
20000cfa:	228e      	movs	r2, #142	; 0x8e
20000cfc:	00d2      	lsls	r2, r2, #3
20000cfe:	4694      	mov	ip, r2
20000d00:	44bc      	add	ip, r7
20000d02:	4463      	add	r3, ip
20000d04:	68db      	ldr	r3, [r3, #12]
20000d06:	228a      	movs	r2, #138	; 0x8a
20000d08:	0092      	lsls	r2, r2, #2
20000d0a:	18ba      	adds	r2, r7, r2
20000d0c:	0010      	movs	r0, r2
20000d0e:	4798      	blx	r3
				fire1.update(&fire1);
20000d10:	4b4d      	ldr	r3, [pc, #308]	; (20000e48 <main+0xc4c>)
20000d12:	228e      	movs	r2, #142	; 0x8e
20000d14:	00d2      	lsls	r2, r2, #3
20000d16:	4694      	mov	ip, r2
20000d18:	44bc      	add	ip, r7
20000d1a:	4463      	add	r3, ip
20000d1c:	68db      	ldr	r3, [r3, #12]
20000d1e:	22f0      	movs	r2, #240	; 0xf0
20000d20:	0052      	lsls	r2, r2, #1
20000d22:	18ba      	adds	r2, r7, r2
20000d24:	0010      	movs	r0, r2
20000d26:	4798      	blx	r3
				fire4.update(&fire4);
20000d28:	4b48      	ldr	r3, [pc, #288]	; (20000e4c <main+0xc50>)
20000d2a:	228e      	movs	r2, #142	; 0x8e
20000d2c:	00d2      	lsls	r2, r2, #3
20000d2e:	4694      	mov	ip, r2
20000d30:	44bc      	add	ip, r7
20000d32:	4463      	add	r3, ip
20000d34:	68db      	ldr	r3, [r3, #12]
20000d36:	2281      	movs	r2, #129	; 0x81
20000d38:	0092      	lsls	r2, r2, #2
20000d3a:	18ba      	adds	r2, r7, r2
20000d3c:	0010      	movs	r0, r2
20000d3e:	4798      	blx	r3
				bird.update(&bird);
20000d40:	4b43      	ldr	r3, [pc, #268]	; (20000e50 <main+0xc54>)
20000d42:	228e      	movs	r2, #142	; 0x8e
20000d44:	00d2      	lsls	r2, r2, #3
20000d46:	4694      	mov	ip, r2
20000d48:	44bc      	add	ip, r7
20000d4a:	4463      	add	r3, ip
20000d4c:	68db      	ldr	r3, [r3, #12]
20000d4e:	22ae      	movs	r2, #174	; 0xae
20000d50:	0092      	lsls	r2, r2, #2
20000d52:	18ba      	adds	r2, r7, r2
20000d54:	0010      	movs	r0, r2
20000d56:	4798      	blx	r3
				bird.xPos -= 2;
20000d58:	4b3d      	ldr	r3, [pc, #244]	; (20000e50 <main+0xc54>)
20000d5a:	228e      	movs	r2, #142	; 0x8e
20000d5c:	00d2      	lsls	r2, r2, #3
20000d5e:	4694      	mov	ip, r2
20000d60:	44bc      	add	ip, r7
20000d62:	4463      	add	r3, ip
20000d64:	685b      	ldr	r3, [r3, #4]
20000d66:	1e9a      	subs	r2, r3, #2
20000d68:	4b39      	ldr	r3, [pc, #228]	; (20000e50 <main+0xc54>)
20000d6a:	218e      	movs	r1, #142	; 0x8e
20000d6c:	00c9      	lsls	r1, r1, #3
20000d6e:	468c      	mov	ip, r1
20000d70:	44bc      	add	ip, r7
20000d72:	4463      	add	r3, ip
20000d74:	605a      	str	r2, [r3, #4]
				if (counter % 2 == 0) {
20000d76:	4b27      	ldr	r3, [pc, #156]	; (20000e14 <main+0xc18>)
20000d78:	681b      	ldr	r3, [r3, #0]
20000d7a:	001a      	movs	r2, r3
20000d7c:	2301      	movs	r3, #1
20000d7e:	4013      	ands	r3, r2
20000d80:	d000      	beq.n	20000d84 <main+0xb88>
20000d82:	e398      	b.n	200014b6 <main+0x12ba>
					bird.yPos--;
20000d84:	4b32      	ldr	r3, [pc, #200]	; (20000e50 <main+0xc54>)
20000d86:	228e      	movs	r2, #142	; 0x8e
20000d88:	00d2      	lsls	r2, r2, #3
20000d8a:	4694      	mov	ip, r2
20000d8c:	44bc      	add	ip, r7
20000d8e:	4463      	add	r3, ip
20000d90:	689b      	ldr	r3, [r3, #8]
20000d92:	1e5a      	subs	r2, r3, #1
20000d94:	4b2e      	ldr	r3, [pc, #184]	; (20000e50 <main+0xc54>)
20000d96:	218e      	movs	r1, #142	; 0x8e
20000d98:	00c9      	lsls	r1, r1, #3
20000d9a:	468c      	mov	ip, r1
20000d9c:	44bc      	add	ip, r7
20000d9e:	4463      	add	r3, ip
20000da0:	609a      	str	r2, [r3, #8]
				}
				
				break;
20000da2:	e388      	b.n	200014b6 <main+0x12ba>
				
			case GAME_SCREEN: //inside
				
				counter++;
20000da4:	4b1b      	ldr	r3, [pc, #108]	; (20000e14 <main+0xc18>)
20000da6:	681b      	ldr	r3, [r3, #0]
20000da8:	1c5a      	adds	r2, r3, #1
20000daa:	4b1a      	ldr	r3, [pc, #104]	; (20000e14 <main+0xc18>)
20000dac:	601a      	str	r2, [r3, #0]
				if(read_DIL_single( LIGHT_TRIGGER )) {
20000dae:	2006      	movs	r0, #6
20000db0:	f002 fb44 	bl	2000343c <read_DIL_single>
20000db4:	1e03      	subs	r3, r0, #0
20000db6:	d006      	beq.n	20000dc6 <main+0xbca>
					draw_game_object( &indoors2 );
20000db8:	23c9      	movs	r3, #201	; 0xc9
20000dba:	009b      	lsls	r3, r3, #2
20000dbc:	18fb      	adds	r3, r7, r3
20000dbe:	0018      	movs	r0, r3
20000dc0:	f002 fa82 	bl	200032c8 <draw_game_object>
20000dc4:	e00b      	b.n	20000dde <main+0xbe2>
				} else {
					draw_game_object( &indoors );
20000dc6:	23d2      	movs	r3, #210	; 0xd2
20000dc8:	009b      	lsls	r3, r3, #2
20000dca:	18fb      	adds	r3, r7, r3
20000dcc:	0018      	movs	r0, r3
20000dce:	f002 fa7b 	bl	200032c8 <draw_game_object>
					draw_game_object( &trophy );
20000dd2:	23c0      	movs	r3, #192	; 0xc0
20000dd4:	009b      	lsls	r3, r3, #2
20000dd6:	18fb      	adds	r3, r7, r3
20000dd8:	0018      	movs	r0, r3
20000dda:	f002 fa75 	bl	200032c8 <draw_game_object>
				}
				
				if(!no_DIP)
20000dde:	4b1d      	ldr	r3, [pc, #116]	; (20000e54 <main+0xc58>)
20000de0:	18fb      	adds	r3, r7, r3
20000de2:	681b      	ldr	r3, [r3, #0]
20000de4:	2b00      	cmp	r3, #0
20000de6:	d105      	bne.n	20000df4 <main+0xbf8>
					draw_game_object( &DIP );
20000de8:	23a5      	movs	r3, #165	; 0xa5
20000dea:	009b      	lsls	r3, r3, #2
20000dec:	18fb      	adds	r3, r7, r3
20000dee:	0018      	movs	r0, r3
20000df0:	f002 fa6a 	bl	200032c8 <draw_game_object>
				draw_game_object( &player );
20000df4:	239c      	movs	r3, #156	; 0x9c
20000df6:	009b      	lsls	r3, r3, #2
20000df8:	18fb      	adds	r3, r7, r3
20000dfa:	0018      	movs	r0, r3
20000dfc:	f002 fa64 	bl	200032c8 <draw_game_object>
				static int i;
				for(i = 0; i < 3; i++) {
20000e00:	4b15      	ldr	r3, [pc, #84]	; (20000e58 <main+0xc5c>)
20000e02:	2200      	movs	r2, #0
20000e04:	601a      	str	r2, [r3, #0]
20000e06:	e055      	b.n	20000eb4 <main+0xcb8>
20000e08:	20007c34 	andcs	r7, r0, r4, lsr ip
20000e0c:	20007c30 	andcs	r7, r0, r0, lsr ip
20000e10:	20007c38 	andcs	r7, r0, r8, lsr ip
20000e14:	20003eb4 			; <UNDEFINED> instruction: 0x20003eb4
20000e18:	fffffc20 			; <UNDEFINED> instruction: 0xfffffc20
20000e1c:	fffffc0c 			; <UNDEFINED> instruction: 0xfffffc0c
20000e20:	fffffbf8 			; <UNDEFINED> instruction: 0xfffffbf8
20000e24:	fffffbe4 			; <UNDEFINED> instruction: 0xfffffbe4
20000e28:	fffffbd0 			; <UNDEFINED> instruction: 0xfffffbd0
20000e2c:	fffffbbc 			; <UNDEFINED> instruction: 0xfffffbbc
20000e30:	fffffb94 			; <UNDEFINED> instruction: 0xfffffb94
20000e34:	fffffba8 			; <UNDEFINED> instruction: 0xfffffba8
20000e38:	20007c2c 	andcs	r7, r0, ip, lsr #24
20000e3c:	20003fb4 			; <UNDEFINED> instruction: 0x20003fb4
20000e40:	fffffddc 			; <UNDEFINED> instruction: 0xfffffddc
20000e44:	fffffdb8 			; <UNDEFINED> instruction: 0xfffffdb8
20000e48:	fffffd70 			; <UNDEFINED> instruction: 0xfffffd70
20000e4c:	fffffd94 			; <UNDEFINED> instruction: 0xfffffd94
20000e50:	fffffe48 			; <UNDEFINED> instruction: 0xfffffe48
20000e54:	0000045c 	andeq	r0, r0, ip, asr r4
20000e58:	20003eb8 			; <UNDEFINED> instruction: 0x20003eb8
					draw_game_object( &fires[i] );
20000e5c:	4bb2      	ldr	r3, [pc, #712]	; (20001128 <main+0xf2c>)
20000e5e:	681a      	ldr	r2, [r3, #0]
20000e60:	2384      	movs	r3, #132	; 0x84
20000e62:	005b      	lsls	r3, r3, #1
20000e64:	18f9      	adds	r1, r7, r3
20000e66:	0013      	movs	r3, r2
20000e68:	00db      	lsls	r3, r3, #3
20000e6a:	189b      	adds	r3, r3, r2
20000e6c:	009b      	lsls	r3, r3, #2
20000e6e:	18cb      	adds	r3, r1, r3
20000e70:	0018      	movs	r0, r3
20000e72:	f002 fa29 	bl	200032c8 <draw_game_object>
					fires[i].update( &fires[i] );
20000e76:	4bac      	ldr	r3, [pc, #688]	; (20001128 <main+0xf2c>)
20000e78:	681a      	ldr	r2, [r3, #0]
20000e7a:	4bac      	ldr	r3, [pc, #688]	; (2000112c <main+0xf30>)
20000e7c:	218e      	movs	r1, #142	; 0x8e
20000e7e:	00c9      	lsls	r1, r1, #3
20000e80:	1879      	adds	r1, r7, r1
20000e82:	18c9      	adds	r1, r1, r3
20000e84:	0013      	movs	r3, r2
20000e86:	00db      	lsls	r3, r3, #3
20000e88:	189b      	adds	r3, r3, r2
20000e8a:	009b      	lsls	r3, r3, #2
20000e8c:	18cb      	adds	r3, r1, r3
20000e8e:	330c      	adds	r3, #12
20000e90:	6819      	ldr	r1, [r3, #0]
20000e92:	4ba5      	ldr	r3, [pc, #660]	; (20001128 <main+0xf2c>)
20000e94:	681a      	ldr	r2, [r3, #0]
20000e96:	2384      	movs	r3, #132	; 0x84
20000e98:	005b      	lsls	r3, r3, #1
20000e9a:	18f8      	adds	r0, r7, r3
20000e9c:	0013      	movs	r3, r2
20000e9e:	00db      	lsls	r3, r3, #3
20000ea0:	189b      	adds	r3, r3, r2
20000ea2:	009b      	lsls	r3, r3, #2
20000ea4:	18c3      	adds	r3, r0, r3
20000ea6:	0018      	movs	r0, r3
20000ea8:	4788      	blx	r1
				for(i = 0; i < 3; i++) {
20000eaa:	4b9f      	ldr	r3, [pc, #636]	; (20001128 <main+0xf2c>)
20000eac:	681b      	ldr	r3, [r3, #0]
20000eae:	1c5a      	adds	r2, r3, #1
20000eb0:	4b9d      	ldr	r3, [pc, #628]	; (20001128 <main+0xf2c>)
20000eb2:	601a      	str	r2, [r3, #0]
20000eb4:	4b9c      	ldr	r3, [pc, #624]	; (20001128 <main+0xf2c>)
20000eb6:	681b      	ldr	r3, [r3, #0]
20000eb8:	2b02      	cmp	r3, #2
20000eba:	ddcf      	ble.n	20000e5c <main+0xc60>
				}
				draw_game_object( &hair );
20000ebc:	23b7      	movs	r3, #183	; 0xb7
20000ebe:	009b      	lsls	r3, r3, #2
20000ec0:	18fb      	adds	r3, r7, r3
20000ec2:	0018      	movs	r0, r3
20000ec4:	f002 fa00 	bl	200032c8 <draw_game_object>
				show_frame(1);
20000ec8:	2001      	movs	r0, #1
20000eca:	f002 fa3e 	bl	2000334a <show_frame>
				
				static int last_climb_value = 100;
				if((read_DIL_single(CLIMB_TRIGGER) != last_climb_value) && player.xPos > 90 && player.xPos < 108 && !has_climbed) {
20000ece:	2004      	movs	r0, #4
20000ed0:	f002 fab4 	bl	2000343c <read_DIL_single>
20000ed4:	0002      	movs	r2, r0
20000ed6:	4b96      	ldr	r3, [pc, #600]	; (20001130 <main+0xf34>)
20000ed8:	681b      	ldr	r3, [r3, #0]
20000eda:	429a      	cmp	r2, r3
20000edc:	d023      	beq.n	20000f26 <main+0xd2a>
20000ede:	4b95      	ldr	r3, [pc, #596]	; (20001134 <main+0xf38>)
20000ee0:	228e      	movs	r2, #142	; 0x8e
20000ee2:	00d2      	lsls	r2, r2, #3
20000ee4:	4694      	mov	ip, r2
20000ee6:	44bc      	add	ip, r7
20000ee8:	4463      	add	r3, ip
20000eea:	685b      	ldr	r3, [r3, #4]
20000eec:	2b5a      	cmp	r3, #90	; 0x5a
20000eee:	dd1a      	ble.n	20000f26 <main+0xd2a>
20000ef0:	4b90      	ldr	r3, [pc, #576]	; (20001134 <main+0xf38>)
20000ef2:	228e      	movs	r2, #142	; 0x8e
20000ef4:	00d2      	lsls	r2, r2, #3
20000ef6:	4694      	mov	ip, r2
20000ef8:	44bc      	add	ip, r7
20000efa:	4463      	add	r3, ip
20000efc:	685b      	ldr	r3, [r3, #4]
20000efe:	2b6b      	cmp	r3, #107	; 0x6b
20000f00:	dc11      	bgt.n	20000f26 <main+0xd2a>
20000f02:	238d      	movs	r3, #141	; 0x8d
20000f04:	00db      	lsls	r3, r3, #3
20000f06:	18fb      	adds	r3, r7, r3
20000f08:	681b      	ldr	r3, [r3, #0]
20000f0a:	2b00      	cmp	r3, #0
20000f0c:	d10b      	bne.n	20000f26 <main+0xd2a>
					is_climbing = 1;
20000f0e:	2301      	movs	r3, #1
20000f10:	4a89      	ldr	r2, [pc, #548]	; (20001138 <main+0xf3c>)
20000f12:	18ba      	adds	r2, r7, r2
20000f14:	6013      	str	r3, [r2, #0]
					player.xPos = 98;
20000f16:	4b87      	ldr	r3, [pc, #540]	; (20001134 <main+0xf38>)
20000f18:	228e      	movs	r2, #142	; 0x8e
20000f1a:	00d2      	lsls	r2, r2, #3
20000f1c:	4694      	mov	ip, r2
20000f1e:	44bc      	add	ip, r7
20000f20:	4463      	add	r3, ip
20000f22:	2262      	movs	r2, #98	; 0x62
20000f24:	605a      	str	r2, [r3, #4]
				}
				last_climb_value = read_DIL_single(CLIMB_TRIGGER);
20000f26:	2004      	movs	r0, #4
20000f28:	f002 fa88 	bl	2000343c <read_DIL_single>
20000f2c:	0002      	movs	r2, r0
20000f2e:	4b80      	ldr	r3, [pc, #512]	; (20001130 <main+0xf34>)
20000f30:	601a      	str	r2, [r3, #0]
				
				if(is_climbing) {
20000f32:	4b81      	ldr	r3, [pc, #516]	; (20001138 <main+0xf3c>)
20000f34:	18fb      	adds	r3, r7, r3
20000f36:	681b      	ldr	r3, [r3, #0]
20000f38:	2b00      	cmp	r3, #0
20000f3a:	d038      	beq.n	20000fae <main+0xdb2>
					gameObjectUpdate( &player );
20000f3c:	239c      	movs	r3, #156	; 0x9c
20000f3e:	009b      	lsls	r3, r3, #2
20000f40:	18fb      	adds	r3, r7, r3
20000f42:	0018      	movs	r0, r3
20000f44:	f000 fafa 	bl	2000153c <gameObjectUpdate>
					if(player.yPos > 4) {
20000f48:	4b7a      	ldr	r3, [pc, #488]	; (20001134 <main+0xf38>)
20000f4a:	228e      	movs	r2, #142	; 0x8e
20000f4c:	00d2      	lsls	r2, r2, #3
20000f4e:	4694      	mov	ip, r2
20000f50:	44bc      	add	ip, r7
20000f52:	4463      	add	r3, ip
20000f54:	689b      	ldr	r3, [r3, #8]
20000f56:	2b04      	cmp	r3, #4
20000f58:	dd0f      	ble.n	20000f7a <main+0xd7e>
						player.yPos--;
20000f5a:	4b76      	ldr	r3, [pc, #472]	; (20001134 <main+0xf38>)
20000f5c:	228e      	movs	r2, #142	; 0x8e
20000f5e:	00d2      	lsls	r2, r2, #3
20000f60:	4694      	mov	ip, r2
20000f62:	44bc      	add	ip, r7
20000f64:	4463      	add	r3, ip
20000f66:	689b      	ldr	r3, [r3, #8]
20000f68:	1e5a      	subs	r2, r3, #1
20000f6a:	4b72      	ldr	r3, [pc, #456]	; (20001134 <main+0xf38>)
20000f6c:	218e      	movs	r1, #142	; 0x8e
20000f6e:	00c9      	lsls	r1, r1, #3
20000f70:	468c      	mov	ip, r1
20000f72:	44bc      	add	ip, r7
20000f74:	4463      	add	r3, ip
20000f76:	609a      	str	r2, [r3, #8]
20000f78:	e025      	b.n	20000fc6 <main+0xdca>
					} else {	//Stay at top level and disable climbing forever!
						player.yPos = 5;
20000f7a:	4b6e      	ldr	r3, [pc, #440]	; (20001134 <main+0xf38>)
20000f7c:	228e      	movs	r2, #142	; 0x8e
20000f7e:	00d2      	lsls	r2, r2, #3
20000f80:	4694      	mov	ip, r2
20000f82:	44bc      	add	ip, r7
20000f84:	4463      	add	r3, ip
20000f86:	2205      	movs	r2, #5
20000f88:	609a      	str	r2, [r3, #8]
						player.xPos = 96;
20000f8a:	4b6a      	ldr	r3, [pc, #424]	; (20001134 <main+0xf38>)
20000f8c:	228e      	movs	r2, #142	; 0x8e
20000f8e:	00d2      	lsls	r2, r2, #3
20000f90:	4694      	mov	ip, r2
20000f92:	44bc      	add	ip, r7
20000f94:	4463      	add	r3, ip
20000f96:	2260      	movs	r2, #96	; 0x60
20000f98:	605a      	str	r2, [r3, #4]
						is_climbing = 0;
20000f9a:	2300      	movs	r3, #0
20000f9c:	4a66      	ldr	r2, [pc, #408]	; (20001138 <main+0xf3c>)
20000f9e:	18ba      	adds	r2, r7, r2
20000fa0:	6013      	str	r3, [r2, #0]
						has_climbed = 1;
20000fa2:	2301      	movs	r3, #1
20000fa4:	228d      	movs	r2, #141	; 0x8d
20000fa6:	00d2      	lsls	r2, r2, #3
20000fa8:	18ba      	adds	r2, r7, r2
20000faa:	6013      	str	r3, [r2, #0]
20000fac:	e00b      	b.n	20000fc6 <main+0xdca>
					}
				} else {
					player.update(&player);
20000fae:	4b61      	ldr	r3, [pc, #388]	; (20001134 <main+0xf38>)
20000fb0:	228e      	movs	r2, #142	; 0x8e
20000fb2:	00d2      	lsls	r2, r2, #3
20000fb4:	4694      	mov	ip, r2
20000fb6:	44bc      	add	ip, r7
20000fb8:	4463      	add	r3, ip
20000fba:	68db      	ldr	r3, [r3, #12]
20000fbc:	229c      	movs	r2, #156	; 0x9c
20000fbe:	0092      	lsls	r2, r2, #2
20000fc0:	18ba      	adds	r2, r7, r2
20000fc2:	0010      	movs	r0, r2
20000fc4:	4798      	blx	r3
				}
				
				if (read_DIL_single(EXPLOSION_TRIGGER)){
20000fc6:	2003      	movs	r0, #3
20000fc8:	f002 fa38 	bl	2000343c <read_DIL_single>
20000fcc:	1e03      	subs	r3, r0, #0
20000fce:	d004      	beq.n	20000fda <main+0xdde>
					game_over_adder = 1;
20000fd0:	2301      	movs	r3, #1
20000fd2:	228c      	movs	r2, #140	; 0x8c
20000fd4:	00d2      	lsls	r2, r2, #3
20000fd6:	18ba      	adds	r2, r7, r2
20000fd8:	6013      	str	r3, [r2, #0]
				}
				
				//fire1_indoors.update(&fire1_indoors);
				//fire updates done above
				if(!no_DIP) {
20000fda:	4b58      	ldr	r3, [pc, #352]	; (2000113c <main+0xf40>)
20000fdc:	18fb      	adds	r3, r7, r3
20000fde:	681b      	ldr	r3, [r3, #0]
20000fe0:	2b00      	cmp	r3, #0
20000fe2:	d11d      	bne.n	20001020 <main+0xe24>
					setPlayerPosition(player.xPos, player.yPos);
20000fe4:	4b53      	ldr	r3, [pc, #332]	; (20001134 <main+0xf38>)
20000fe6:	228e      	movs	r2, #142	; 0x8e
20000fe8:	00d2      	lsls	r2, r2, #3
20000fea:	4694      	mov	ip, r2
20000fec:	44bc      	add	ip, r7
20000fee:	4463      	add	r3, ip
20000ff0:	685a      	ldr	r2, [r3, #4]
20000ff2:	4b50      	ldr	r3, [pc, #320]	; (20001134 <main+0xf38>)
20000ff4:	218e      	movs	r1, #142	; 0x8e
20000ff6:	00c9      	lsls	r1, r1, #3
20000ff8:	468c      	mov	ip, r1
20000ffa:	44bc      	add	ip, r7
20000ffc:	4463      	add	r3, ip
20000ffe:	689b      	ldr	r3, [r3, #8]
20001000:	0019      	movs	r1, r3
20001002:	0010      	movs	r0, r2
20001004:	f001 f8e6 	bl	200021d4 <setPlayerPosition>
					DIP.update(&DIP);					
20001008:	4b4d      	ldr	r3, [pc, #308]	; (20001140 <main+0xf44>)
2000100a:	228e      	movs	r2, #142	; 0x8e
2000100c:	00d2      	lsls	r2, r2, #3
2000100e:	4694      	mov	ip, r2
20001010:	44bc      	add	ip, r7
20001012:	4463      	add	r3, ip
20001014:	68db      	ldr	r3, [r3, #12]
20001016:	22a5      	movs	r2, #165	; 0xa5
20001018:	0092      	lsls	r2, r2, #2
2000101a:	18ba      	adds	r2, r7, r2
2000101c:	0010      	movs	r0, r2
2000101e:	4798      	blx	r3
				}
				hair.update(&hair);
20001020:	4b48      	ldr	r3, [pc, #288]	; (20001144 <main+0xf48>)
20001022:	228e      	movs	r2, #142	; 0x8e
20001024:	00d2      	lsls	r2, r2, #3
20001026:	4694      	mov	ip, r2
20001028:	44bc      	add	ip, r7
2000102a:	4463      	add	r3, ip
2000102c:	68db      	ldr	r3, [r3, #12]
2000102e:	22b7      	movs	r2, #183	; 0xb7
20001030:	0092      	lsls	r2, r2, #2
20001032:	18ba      	adds	r2, r7, r2
20001034:	0010      	movs	r0, r2
20001036:	4798      	blx	r3
				if(read_DIL_single(HAIR_TRIGGER)) {
20001038:	2001      	movs	r0, #1
2000103a:	f002 f9ff 	bl	2000343c <read_DIL_single>
2000103e:	1e03      	subs	r3, r0, #0
20001040:	d01e      	beq.n	20001080 <main+0xe84>
					hair.xPos = player.xPos;
20001042:	4b3c      	ldr	r3, [pc, #240]	; (20001134 <main+0xf38>)
20001044:	228e      	movs	r2, #142	; 0x8e
20001046:	00d2      	lsls	r2, r2, #3
20001048:	4694      	mov	ip, r2
2000104a:	44bc      	add	ip, r7
2000104c:	4463      	add	r3, ip
2000104e:	685a      	ldr	r2, [r3, #4]
20001050:	4b3c      	ldr	r3, [pc, #240]	; (20001144 <main+0xf48>)
20001052:	218e      	movs	r1, #142	; 0x8e
20001054:	00c9      	lsls	r1, r1, #3
20001056:	468c      	mov	ip, r1
20001058:	44bc      	add	ip, r7
2000105a:	4463      	add	r3, ip
2000105c:	605a      	str	r2, [r3, #4]
					hair.yPos = player.yPos - 28;
2000105e:	4b35      	ldr	r3, [pc, #212]	; (20001134 <main+0xf38>)
20001060:	228e      	movs	r2, #142	; 0x8e
20001062:	00d2      	lsls	r2, r2, #3
20001064:	4694      	mov	ip, r2
20001066:	44bc      	add	ip, r7
20001068:	4463      	add	r3, ip
2000106a:	689b      	ldr	r3, [r3, #8]
2000106c:	3b1c      	subs	r3, #28
2000106e:	001a      	movs	r2, r3
20001070:	4b34      	ldr	r3, [pc, #208]	; (20001144 <main+0xf48>)
20001072:	218e      	movs	r1, #142	; 0x8e
20001074:	00c9      	lsls	r1, r1, #3
20001076:	468c      	mov	ip, r1
20001078:	44bc      	add	ip, r7
2000107a:	4463      	add	r3, ip
2000107c:	609a      	str	r2, [r3, #8]
2000107e:	e011      	b.n	200010a4 <main+0xea8>
				} else {
					hair.xPos = -100;
20001080:	4b30      	ldr	r3, [pc, #192]	; (20001144 <main+0xf48>)
20001082:	228e      	movs	r2, #142	; 0x8e
20001084:	00d2      	lsls	r2, r2, #3
20001086:	4694      	mov	ip, r2
20001088:	44bc      	add	ip, r7
2000108a:	4463      	add	r3, ip
2000108c:	2264      	movs	r2, #100	; 0x64
2000108e:	4252      	negs	r2, r2
20001090:	605a      	str	r2, [r3, #4]
					hair.yPos = -100;
20001092:	4b2c      	ldr	r3, [pc, #176]	; (20001144 <main+0xf48>)
20001094:	228e      	movs	r2, #142	; 0x8e
20001096:	00d2      	lsls	r2, r2, #3
20001098:	4694      	mov	ip, r2
2000109a:	44bc      	add	ip, r7
2000109c:	4463      	add	r3, ip
2000109e:	2264      	movs	r2, #100	; 0x64
200010a0:	4252      	negs	r2, r2
200010a2:	609a      	str	r2, [r3, #8]
				}
				
				
				
				if (!no_DIP && DIP.yPos >= player.yPos && (player.xPos + DIP_WIDTH/2 >= DIP.xPos && player.xPos <= DIP.xPos + DIP_WIDTH/2 )){ // DIP_collision
200010a4:	4b25      	ldr	r3, [pc, #148]	; (2000113c <main+0xf40>)
200010a6:	18fb      	adds	r3, r7, r3
200010a8:	681b      	ldr	r3, [r3, #0]
200010aa:	2b00      	cmp	r3, #0
200010ac:	d137      	bne.n	2000111e <main+0xf22>
200010ae:	4b24      	ldr	r3, [pc, #144]	; (20001140 <main+0xf44>)
200010b0:	228e      	movs	r2, #142	; 0x8e
200010b2:	00d2      	lsls	r2, r2, #3
200010b4:	4694      	mov	ip, r2
200010b6:	44bc      	add	ip, r7
200010b8:	4463      	add	r3, ip
200010ba:	689a      	ldr	r2, [r3, #8]
200010bc:	4b1d      	ldr	r3, [pc, #116]	; (20001134 <main+0xf38>)
200010be:	218e      	movs	r1, #142	; 0x8e
200010c0:	00c9      	lsls	r1, r1, #3
200010c2:	468c      	mov	ip, r1
200010c4:	44bc      	add	ip, r7
200010c6:	4463      	add	r3, ip
200010c8:	689b      	ldr	r3, [r3, #8]
200010ca:	429a      	cmp	r2, r3
200010cc:	db27      	blt.n	2000111e <main+0xf22>
200010ce:	4b19      	ldr	r3, [pc, #100]	; (20001134 <main+0xf38>)
200010d0:	228e      	movs	r2, #142	; 0x8e
200010d2:	00d2      	lsls	r2, r2, #3
200010d4:	4694      	mov	ip, r2
200010d6:	44bc      	add	ip, r7
200010d8:	4463      	add	r3, ip
200010da:	685b      	ldr	r3, [r3, #4]
200010dc:	3309      	adds	r3, #9
200010de:	001a      	movs	r2, r3
200010e0:	4b17      	ldr	r3, [pc, #92]	; (20001140 <main+0xf44>)
200010e2:	218e      	movs	r1, #142	; 0x8e
200010e4:	00c9      	lsls	r1, r1, #3
200010e6:	468c      	mov	ip, r1
200010e8:	44bc      	add	ip, r7
200010ea:	4463      	add	r3, ip
200010ec:	685b      	ldr	r3, [r3, #4]
200010ee:	429a      	cmp	r2, r3
200010f0:	db15      	blt.n	2000111e <main+0xf22>
200010f2:	4b10      	ldr	r3, [pc, #64]	; (20001134 <main+0xf38>)
200010f4:	228e      	movs	r2, #142	; 0x8e
200010f6:	00d2      	lsls	r2, r2, #3
200010f8:	4694      	mov	ip, r2
200010fa:	44bc      	add	ip, r7
200010fc:	4463      	add	r3, ip
200010fe:	685a      	ldr	r2, [r3, #4]
20001100:	4b0f      	ldr	r3, [pc, #60]	; (20001140 <main+0xf44>)
20001102:	218e      	movs	r1, #142	; 0x8e
20001104:	00c9      	lsls	r1, r1, #3
20001106:	468c      	mov	ip, r1
20001108:	44bc      	add	ip, r7
2000110a:	4463      	add	r3, ip
2000110c:	685b      	ldr	r3, [r3, #4]
2000110e:	3309      	adds	r3, #9
20001110:	429a      	cmp	r2, r3
20001112:	dc04      	bgt.n	2000111e <main+0xf22>
					game_over_adder = 100;
20001114:	2364      	movs	r3, #100	; 0x64
20001116:	228c      	movs	r2, #140	; 0x8c
20001118:	00d2      	lsls	r2, r2, #3
2000111a:	18ba      	adds	r2, r7, r2
2000111c:	6013      	str	r3, [r2, #0]
				}
				
				static int distance_player_fire;	//fire_collision
				static int j;
				for(j = 0; j < 3; j++) {
2000111e:	4b0a      	ldr	r3, [pc, #40]	; (20001148 <main+0xf4c>)
20001120:	2200      	movs	r2, #0
20001122:	601a      	str	r2, [r3, #0]
20001124:	e06e      	b.n	20001204 <main+0x1008>
20001126:	46c0      	nop			; (mov r8, r8)
20001128:	20003eb8 			; <UNDEFINED> instruction: 0x20003eb8
2000112c:	fffffc98 			; <UNDEFINED> instruction: 0xfffffc98
20001130:	20007c3c 	andcs	r7, r0, ip, lsr ip
20001134:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20001138:	0000046c 	andeq	r0, r0, ip, ror #8
2000113c:	0000045c 	andeq	r0, r0, ip, asr r4
20001140:	fffffe24 			; <UNDEFINED> instruction: 0xfffffe24
20001144:	fffffe6c 			; <UNDEFINED> instruction: 0xfffffe6c
20001148:	20003ebc 			; <UNDEFINED> instruction: 0x20003ebc
					distance_player_fire = (player.xPos + 9) - (fires[j].xPos + 5);
2000114c:	4bdd      	ldr	r3, [pc, #884]	; (200014c4 <main+0x12c8>)
2000114e:	228e      	movs	r2, #142	; 0x8e
20001150:	00d2      	lsls	r2, r2, #3
20001152:	4694      	mov	ip, r2
20001154:	44bc      	add	ip, r7
20001156:	4463      	add	r3, ip
20001158:	685b      	ldr	r3, [r3, #4]
2000115a:	3309      	adds	r3, #9
2000115c:	0019      	movs	r1, r3
2000115e:	4bda      	ldr	r3, [pc, #872]	; (200014c8 <main+0x12cc>)
20001160:	681a      	ldr	r2, [r3, #0]
20001162:	4bda      	ldr	r3, [pc, #872]	; (200014cc <main+0x12d0>)
20001164:	208e      	movs	r0, #142	; 0x8e
20001166:	00c0      	lsls	r0, r0, #3
20001168:	1838      	adds	r0, r7, r0
2000116a:	18c0      	adds	r0, r0, r3
2000116c:	0013      	movs	r3, r2
2000116e:	00db      	lsls	r3, r3, #3
20001170:	189b      	adds	r3, r3, r2
20001172:	009b      	lsls	r3, r3, #2
20001174:	18c3      	adds	r3, r0, r3
20001176:	3304      	adds	r3, #4
20001178:	681b      	ldr	r3, [r3, #0]
2000117a:	3305      	adds	r3, #5
2000117c:	1aca      	subs	r2, r1, r3
2000117e:	4bd4      	ldr	r3, [pc, #848]	; (200014d0 <main+0x12d4>)
20001180:	601a      	str	r2, [r3, #0]
					if(player.yPos > (fires[j].yPos - 18 + 7) && 
20001182:	4bd0      	ldr	r3, [pc, #832]	; (200014c4 <main+0x12c8>)
20001184:	228e      	movs	r2, #142	; 0x8e
20001186:	00d2      	lsls	r2, r2, #3
20001188:	4694      	mov	ip, r2
2000118a:	44bc      	add	ip, r7
2000118c:	4463      	add	r3, ip
2000118e:	6899      	ldr	r1, [r3, #8]
20001190:	4bcd      	ldr	r3, [pc, #820]	; (200014c8 <main+0x12cc>)
20001192:	681a      	ldr	r2, [r3, #0]
20001194:	4bcd      	ldr	r3, [pc, #820]	; (200014cc <main+0x12d0>)
20001196:	208e      	movs	r0, #142	; 0x8e
20001198:	00c0      	lsls	r0, r0, #3
2000119a:	1838      	adds	r0, r7, r0
2000119c:	18c0      	adds	r0, r0, r3
2000119e:	0013      	movs	r3, r2
200011a0:	00db      	lsls	r3, r3, #3
200011a2:	189b      	adds	r3, r3, r2
200011a4:	009b      	lsls	r3, r3, #2
200011a6:	18c3      	adds	r3, r0, r3
200011a8:	3308      	adds	r3, #8
200011aa:	681b      	ldr	r3, [r3, #0]
200011ac:	3b0b      	subs	r3, #11
200011ae:	4299      	cmp	r1, r3
200011b0:	dd23      	ble.n	200011fa <main+0xffe>
							player.yPos < fires[j].yPos && distance_player_fire < 8 && distance_player_fire > -8) {
200011b2:	4bc4      	ldr	r3, [pc, #784]	; (200014c4 <main+0x12c8>)
200011b4:	228e      	movs	r2, #142	; 0x8e
200011b6:	00d2      	lsls	r2, r2, #3
200011b8:	4694      	mov	ip, r2
200011ba:	44bc      	add	ip, r7
200011bc:	4463      	add	r3, ip
200011be:	6899      	ldr	r1, [r3, #8]
200011c0:	4bc1      	ldr	r3, [pc, #772]	; (200014c8 <main+0x12cc>)
200011c2:	681a      	ldr	r2, [r3, #0]
200011c4:	4bc1      	ldr	r3, [pc, #772]	; (200014cc <main+0x12d0>)
200011c6:	208e      	movs	r0, #142	; 0x8e
200011c8:	00c0      	lsls	r0, r0, #3
200011ca:	1838      	adds	r0, r7, r0
200011cc:	18c0      	adds	r0, r0, r3
200011ce:	0013      	movs	r3, r2
200011d0:	00db      	lsls	r3, r3, #3
200011d2:	189b      	adds	r3, r3, r2
200011d4:	009b      	lsls	r3, r3, #2
200011d6:	18c3      	adds	r3, r0, r3
200011d8:	3308      	adds	r3, #8
200011da:	681b      	ldr	r3, [r3, #0]
					if(player.yPos > (fires[j].yPos - 18 + 7) && 
200011dc:	4299      	cmp	r1, r3
200011de:	da0c      	bge.n	200011fa <main+0xffe>
							player.yPos < fires[j].yPos && distance_player_fire < 8 && distance_player_fire > -8) {
200011e0:	4bbb      	ldr	r3, [pc, #748]	; (200014d0 <main+0x12d4>)
200011e2:	681b      	ldr	r3, [r3, #0]
200011e4:	2b07      	cmp	r3, #7
200011e6:	dc08      	bgt.n	200011fa <main+0xffe>
200011e8:	4bb9      	ldr	r3, [pc, #740]	; (200014d0 <main+0x12d4>)
200011ea:	681b      	ldr	r3, [r3, #0]
200011ec:	3307      	adds	r3, #7
200011ee:	db04      	blt.n	200011fa <main+0xffe>
						game_over_adder = 100;
200011f0:	2364      	movs	r3, #100	; 0x64
200011f2:	228c      	movs	r2, #140	; 0x8c
200011f4:	00d2      	lsls	r2, r2, #3
200011f6:	18ba      	adds	r2, r7, r2
200011f8:	6013      	str	r3, [r2, #0]
				for(j = 0; j < 3; j++) {
200011fa:	4bb3      	ldr	r3, [pc, #716]	; (200014c8 <main+0x12cc>)
200011fc:	681b      	ldr	r3, [r3, #0]
200011fe:	1c5a      	adds	r2, r3, #1
20001200:	4bb1      	ldr	r3, [pc, #708]	; (200014c8 <main+0x12cc>)
20001202:	601a      	str	r2, [r3, #0]
20001204:	4bb0      	ldr	r3, [pc, #704]	; (200014c8 <main+0x12cc>)
20001206:	681b      	ldr	r3, [r3, #0]
20001208:	2b02      	cmp	r3, #2
2000120a:	dd9f      	ble.n	2000114c <main+0xf50>
					}					
				}
				
				static int trophy_burned = 0;	//trophy burning
				static int distance_hair_trophy;
				distance_hair_trophy = (hair.xPos + 9) - (trophy.xPos + 5);
2000120c:	4bb1      	ldr	r3, [pc, #708]	; (200014d4 <main+0x12d8>)
2000120e:	228e      	movs	r2, #142	; 0x8e
20001210:	00d2      	lsls	r2, r2, #3
20001212:	4694      	mov	ip, r2
20001214:	44bc      	add	ip, r7
20001216:	4463      	add	r3, ip
20001218:	685b      	ldr	r3, [r3, #4]
2000121a:	3309      	adds	r3, #9
2000121c:	001a      	movs	r2, r3
2000121e:	4bae      	ldr	r3, [pc, #696]	; (200014d8 <main+0x12dc>)
20001220:	218e      	movs	r1, #142	; 0x8e
20001222:	00c9      	lsls	r1, r1, #3
20001224:	468c      	mov	ip, r1
20001226:	44bc      	add	ip, r7
20001228:	4463      	add	r3, ip
2000122a:	685b      	ldr	r3, [r3, #4]
2000122c:	3305      	adds	r3, #5
2000122e:	1ad2      	subs	r2, r2, r3
20001230:	4baa      	ldr	r3, [pc, #680]	; (200014dc <main+0x12e0>)
20001232:	601a      	str	r2, [r3, #0]
				if(!trophy_burned && abs(distance_hair_trophy) < 5) {
20001234:	4baa      	ldr	r3, [pc, #680]	; (200014e0 <main+0x12e4>)
20001236:	681b      	ldr	r3, [r3, #0]
20001238:	2b00      	cmp	r3, #0
2000123a:	d130      	bne.n	2000129e <main+0x10a2>
2000123c:	4ba7      	ldr	r3, [pc, #668]	; (200014dc <main+0x12e0>)
2000123e:	681b      	ldr	r3, [r3, #0]
20001240:	3304      	adds	r3, #4
20001242:	db2c      	blt.n	2000129e <main+0x10a2>
20001244:	4ba5      	ldr	r3, [pc, #660]	; (200014dc <main+0x12e0>)
20001246:	681b      	ldr	r3, [r3, #0]
20001248:	2b04      	cmp	r3, #4
2000124a:	dc28      	bgt.n	2000129e <main+0x10a2>
					trophy_burned = 1;
2000124c:	4ba4      	ldr	r3, [pc, #656]	; (200014e0 <main+0x12e4>)
2000124e:	2201      	movs	r2, #1
20001250:	601a      	str	r2, [r3, #0]
					fires[1].xPos = trophy.xPos;
20001252:	4ba1      	ldr	r3, [pc, #644]	; (200014d8 <main+0x12dc>)
20001254:	228e      	movs	r2, #142	; 0x8e
20001256:	00d2      	lsls	r2, r2, #3
20001258:	4694      	mov	ip, r2
2000125a:	44bc      	add	ip, r7
2000125c:	4463      	add	r3, ip
2000125e:	685a      	ldr	r2, [r3, #4]
20001260:	4b9a      	ldr	r3, [pc, #616]	; (200014cc <main+0x12d0>)
20001262:	218e      	movs	r1, #142	; 0x8e
20001264:	00c9      	lsls	r1, r1, #3
20001266:	468c      	mov	ip, r1
20001268:	44bc      	add	ip, r7
2000126a:	4463      	add	r3, ip
2000126c:	629a      	str	r2, [r3, #40]	; 0x28
					fires[1].yPos = trophy.yPos + 5;
2000126e:	4b9a      	ldr	r3, [pc, #616]	; (200014d8 <main+0x12dc>)
20001270:	228e      	movs	r2, #142	; 0x8e
20001272:	00d2      	lsls	r2, r2, #3
20001274:	4694      	mov	ip, r2
20001276:	44bc      	add	ip, r7
20001278:	4463      	add	r3, ip
2000127a:	689b      	ldr	r3, [r3, #8]
2000127c:	1d5a      	adds	r2, r3, #5
2000127e:	4b93      	ldr	r3, [pc, #588]	; (200014cc <main+0x12d0>)
20001280:	218e      	movs	r1, #142	; 0x8e
20001282:	00c9      	lsls	r1, r1, #3
20001284:	468c      	mov	ip, r1
20001286:	44bc      	add	ip, r7
20001288:	4463      	add	r3, ip
2000128a:	62da      	str	r2, [r3, #44]	; 0x2c
					trophy.xPos = 500;
2000128c:	4b92      	ldr	r3, [pc, #584]	; (200014d8 <main+0x12dc>)
2000128e:	228e      	movs	r2, #142	; 0x8e
20001290:	00d2      	lsls	r2, r2, #3
20001292:	4694      	mov	ip, r2
20001294:	44bc      	add	ip, r7
20001296:	4463      	add	r3, ip
20001298:	22fa      	movs	r2, #250	; 0xfa
2000129a:	0052      	lsls	r2, r2, #1
2000129c:	605a      	str	r2, [r3, #4]
				}
				
				static int DIP_burned = 0;
				static int distance_hair_DIP;
				distance_hair_DIP = (hair.xPos + 9) - (DIP.xPos + 9);
2000129e:	4b8d      	ldr	r3, [pc, #564]	; (200014d4 <main+0x12d8>)
200012a0:	228e      	movs	r2, #142	; 0x8e
200012a2:	00d2      	lsls	r2, r2, #3
200012a4:	4694      	mov	ip, r2
200012a6:	44bc      	add	ip, r7
200012a8:	4463      	add	r3, ip
200012aa:	685b      	ldr	r3, [r3, #4]
200012ac:	3309      	adds	r3, #9
200012ae:	001a      	movs	r2, r3
200012b0:	4b8c      	ldr	r3, [pc, #560]	; (200014e4 <main+0x12e8>)
200012b2:	218e      	movs	r1, #142	; 0x8e
200012b4:	00c9      	lsls	r1, r1, #3
200012b6:	468c      	mov	ip, r1
200012b8:	44bc      	add	ip, r7
200012ba:	4463      	add	r3, ip
200012bc:	685b      	ldr	r3, [r3, #4]
200012be:	3309      	adds	r3, #9
200012c0:	1ad2      	subs	r2, r2, r3
200012c2:	4b89      	ldr	r3, [pc, #548]	; (200014e8 <main+0x12ec>)
200012c4:	601a      	str	r2, [r3, #0]
				if(!DIP_burned && read_DIL_single(LIGHT_TRIGGER) && player.yPos > 10 && abs(distance_hair_DIP) < 5) {
200012c6:	4b89      	ldr	r3, [pc, #548]	; (200014ec <main+0x12f0>)
200012c8:	681b      	ldr	r3, [r3, #0]
200012ca:	2b00      	cmp	r3, #0
200012cc:	d139      	bne.n	20001342 <main+0x1146>
200012ce:	2006      	movs	r0, #6
200012d0:	f002 f8b4 	bl	2000343c <read_DIL_single>
200012d4:	1e03      	subs	r3, r0, #0
200012d6:	d034      	beq.n	20001342 <main+0x1146>
200012d8:	4b7a      	ldr	r3, [pc, #488]	; (200014c4 <main+0x12c8>)
200012da:	228e      	movs	r2, #142	; 0x8e
200012dc:	00d2      	lsls	r2, r2, #3
200012de:	4694      	mov	ip, r2
200012e0:	44bc      	add	ip, r7
200012e2:	4463      	add	r3, ip
200012e4:	689b      	ldr	r3, [r3, #8]
200012e6:	2b0a      	cmp	r3, #10
200012e8:	dd2b      	ble.n	20001342 <main+0x1146>
200012ea:	4b7f      	ldr	r3, [pc, #508]	; (200014e8 <main+0x12ec>)
200012ec:	681b      	ldr	r3, [r3, #0]
200012ee:	3304      	adds	r3, #4
200012f0:	db27      	blt.n	20001342 <main+0x1146>
200012f2:	4b7d      	ldr	r3, [pc, #500]	; (200014e8 <main+0x12ec>)
200012f4:	681b      	ldr	r3, [r3, #0]
200012f6:	2b04      	cmp	r3, #4
200012f8:	dc23      	bgt.n	20001342 <main+0x1146>
					DIP_burned = 1;
200012fa:	4b7c      	ldr	r3, [pc, #496]	; (200014ec <main+0x12f0>)
200012fc:	2201      	movs	r2, #1
200012fe:	601a      	str	r2, [r3, #0]
					fires[2].xPos = DIP.xPos;
20001300:	4b78      	ldr	r3, [pc, #480]	; (200014e4 <main+0x12e8>)
20001302:	228e      	movs	r2, #142	; 0x8e
20001304:	00d2      	lsls	r2, r2, #3
20001306:	4694      	mov	ip, r2
20001308:	44bc      	add	ip, r7
2000130a:	4463      	add	r3, ip
2000130c:	685a      	ldr	r2, [r3, #4]
2000130e:	4b6f      	ldr	r3, [pc, #444]	; (200014cc <main+0x12d0>)
20001310:	218e      	movs	r1, #142	; 0x8e
20001312:	00c9      	lsls	r1, r1, #3
20001314:	468c      	mov	ip, r1
20001316:	44bc      	add	ip, r7
20001318:	4463      	add	r3, ip
2000131a:	64da      	str	r2, [r3, #76]	; 0x4c
					fires[2].yPos = DIP.yPos + 6;
2000131c:	4b71      	ldr	r3, [pc, #452]	; (200014e4 <main+0x12e8>)
2000131e:	228e      	movs	r2, #142	; 0x8e
20001320:	00d2      	lsls	r2, r2, #3
20001322:	4694      	mov	ip, r2
20001324:	44bc      	add	ip, r7
20001326:	4463      	add	r3, ip
20001328:	689b      	ldr	r3, [r3, #8]
2000132a:	1d9a      	adds	r2, r3, #6
2000132c:	4b67      	ldr	r3, [pc, #412]	; (200014cc <main+0x12d0>)
2000132e:	218e      	movs	r1, #142	; 0x8e
20001330:	00c9      	lsls	r1, r1, #3
20001332:	468c      	mov	ip, r1
20001334:	44bc      	add	ip, r7
20001336:	4463      	add	r3, ip
20001338:	651a      	str	r2, [r3, #80]	; 0x50
					no_DIP = 1;
2000133a:	2301      	movs	r3, #1
2000133c:	4a6c      	ldr	r2, [pc, #432]	; (200014f0 <main+0x12f4>)
2000133e:	18ba      	adds	r2, r7, r2
20001340:	6013      	str	r3, [r2, #0]
				}
				
				game_over += game_over_adder;
20001342:	4b6c      	ldr	r3, [pc, #432]	; (200014f4 <main+0x12f8>)
20001344:	18fb      	adds	r3, r7, r3
20001346:	681a      	ldr	r2, [r3, #0]
20001348:	238c      	movs	r3, #140	; 0x8c
2000134a:	00db      	lsls	r3, r3, #3
2000134c:	18fb      	adds	r3, r7, r3
2000134e:	681b      	ldr	r3, [r3, #0]
20001350:	18d3      	adds	r3, r2, r3
20001352:	4a68      	ldr	r2, [pc, #416]	; (200014f4 <main+0x12f8>)
20001354:	18ba      	adds	r2, r7, r2
20001356:	6013      	str	r3, [r2, #0]
				
				if(game_over >= 100) {
20001358:	4b66      	ldr	r3, [pc, #408]	; (200014f4 <main+0x12f8>)
2000135a:	18fb      	adds	r3, r7, r3
2000135c:	681b      	ldr	r3, [r3, #0]
2000135e:	2b63      	cmp	r3, #99	; 0x63
20001360:	dc00      	bgt.n	20001364 <main+0x1168>
20001362:	e0ab      	b.n	200014bc <main+0x12c0>
					current_screen = RESET_GAME;
20001364:	4b64      	ldr	r3, [pc, #400]	; (200014f8 <main+0x12fc>)
20001366:	220a      	movs	r2, #10
20001368:	601a      	str	r2, [r3, #0]
				}
				
				break;
2000136a:	e0a7      	b.n	200014bc <main+0x12c0>
				
			
			case RESET_GAME: //restart
				counter = 0;
2000136c:	4b63      	ldr	r3, [pc, #396]	; (200014fc <main+0x1300>)
2000136e:	2200      	movs	r2, #0
20001370:	601a      	str	r2, [r3, #0]
				current_screen = START_SCREEN;
20001372:	4b61      	ldr	r3, [pc, #388]	; (200014f8 <main+0x12fc>)
20001374:	2201      	movs	r2, #1
20001376:	601a      	str	r2, [r3, #0]
				if(read_DIL() == 0) {
20001378:	f002 f850 	bl	2000341c <read_DIL>
2000137c:	1e03      	subs	r3, r0, #0
2000137e:	d102      	bne.n	20001386 <main+0x118a>
					current_screen = SWITCH_LOCK; 
20001380:	4b5d      	ldr	r3, [pc, #372]	; (200014f8 <main+0x12fc>)
20001382:	2200      	movs	r2, #0
20001384:	601a      	str	r2, [r3, #0]
				}
	
				static int test = 0;
				test+=2;
20001386:	4b5e      	ldr	r3, [pc, #376]	; (20001500 <main+0x1304>)
20001388:	681b      	ldr	r3, [r3, #0]
2000138a:	1c9a      	adds	r2, r3, #2
2000138c:	4b5c      	ldr	r3, [pc, #368]	; (20001500 <main+0x1304>)
2000138e:	601a      	str	r2, [r3, #0]
	
				is_climbing = 0;
20001390:	2300      	movs	r3, #0
20001392:	4a5c      	ldr	r2, [pc, #368]	; (20001504 <main+0x1308>)
20001394:	18ba      	adds	r2, r7, r2
20001396:	6013      	str	r3, [r2, #0]
				has_climbed = 0;
20001398:	2300      	movs	r3, #0
2000139a:	228d      	movs	r2, #141	; 0x8d
2000139c:	00d2      	lsls	r2, r2, #3
2000139e:	18ba      	adds	r2, r7, r2
200013a0:	6013      	str	r3, [r2, #0]
				game_over = 0;
200013a2:	2300      	movs	r3, #0
200013a4:	4a53      	ldr	r2, [pc, #332]	; (200014f4 <main+0x12f8>)
200013a6:	18ba      	adds	r2, r7, r2
200013a8:	6013      	str	r3, [r2, #0]
				game_over_adder = 0;
200013aa:	2300      	movs	r3, #0
200013ac:	228c      	movs	r2, #140	; 0x8c
200013ae:	00d2      	lsls	r2, r2, #3
200013b0:	18ba      	adds	r2, r7, r2
200013b2:	6013      	str	r3, [r2, #0]
				fires[0].xPos = 40;		//FIRE1_INDO
200013b4:	4b45      	ldr	r3, [pc, #276]	; (200014cc <main+0x12d0>)
200013b6:	228e      	movs	r2, #142	; 0x8e
200013b8:	00d2      	lsls	r2, r2, #3
200013ba:	4694      	mov	ip, r2
200013bc:	44bc      	add	ip, r7
200013be:	4463      	add	r3, ip
200013c0:	2228      	movs	r2, #40	; 0x28
200013c2:	605a      	str	r2, [r3, #4]
				fires[0].yPos = 64-12-8;
200013c4:	4b41      	ldr	r3, [pc, #260]	; (200014cc <main+0x12d0>)
200013c6:	228e      	movs	r2, #142	; 0x8e
200013c8:	00d2      	lsls	r2, r2, #3
200013ca:	4694      	mov	ip, r2
200013cc:	44bc      	add	ip, r7
200013ce:	4463      	add	r3, ip
200013d0:	222c      	movs	r2, #44	; 0x2c
200013d2:	609a      	str	r2, [r3, #8]
				fires[2].xPos = -50;		//FIRE1_INDO
200013d4:	4b3d      	ldr	r3, [pc, #244]	; (200014cc <main+0x12d0>)
200013d6:	228e      	movs	r2, #142	; 0x8e
200013d8:	00d2      	lsls	r2, r2, #3
200013da:	4694      	mov	ip, r2
200013dc:	44bc      	add	ip, r7
200013de:	4463      	add	r3, ip
200013e0:	2232      	movs	r2, #50	; 0x32
200013e2:	4252      	negs	r2, r2
200013e4:	64da      	str	r2, [r3, #76]	; 0x4c
				fires[2].yPos = -50;
200013e6:	4b39      	ldr	r3, [pc, #228]	; (200014cc <main+0x12d0>)
200013e8:	228e      	movs	r2, #142	; 0x8e
200013ea:	00d2      	lsls	r2, r2, #3
200013ec:	4694      	mov	ip, r2
200013ee:	44bc      	add	ip, r7
200013f0:	4463      	add	r3, ip
200013f2:	2232      	movs	r2, #50	; 0x32
200013f4:	4252      	negs	r2, r2
200013f6:	651a      	str	r2, [r3, #80]	; 0x50
				fires[1].xPos = -50;		//FIRE1_INDO
200013f8:	4b34      	ldr	r3, [pc, #208]	; (200014cc <main+0x12d0>)
200013fa:	228e      	movs	r2, #142	; 0x8e
200013fc:	00d2      	lsls	r2, r2, #3
200013fe:	4694      	mov	ip, r2
20001400:	44bc      	add	ip, r7
20001402:	4463      	add	r3, ip
20001404:	2232      	movs	r2, #50	; 0x32
20001406:	4252      	negs	r2, r2
20001408:	629a      	str	r2, [r3, #40]	; 0x28
				fires[1].yPos = -50;
2000140a:	4b30      	ldr	r3, [pc, #192]	; (200014cc <main+0x12d0>)
2000140c:	228e      	movs	r2, #142	; 0x8e
2000140e:	00d2      	lsls	r2, r2, #3
20001410:	4694      	mov	ip, r2
20001412:	44bc      	add	ip, r7
20001414:	4463      	add	r3, ip
20001416:	2232      	movs	r2, #50	; 0x32
20001418:	4252      	negs	r2, r2
2000141a:	62da      	str	r2, [r3, #44]	; 0x2c
				bird.xPos = 180;
2000141c:	4b3a      	ldr	r3, [pc, #232]	; (20001508 <main+0x130c>)
2000141e:	228e      	movs	r2, #142	; 0x8e
20001420:	00d2      	lsls	r2, r2, #3
20001422:	4694      	mov	ip, r2
20001424:	44bc      	add	ip, r7
20001426:	4463      	add	r3, ip
20001428:	22b4      	movs	r2, #180	; 0xb4
2000142a:	605a      	str	r2, [r3, #4]
				bird.yPos = 40;
2000142c:	4b36      	ldr	r3, [pc, #216]	; (20001508 <main+0x130c>)
2000142e:	228e      	movs	r2, #142	; 0x8e
20001430:	00d2      	lsls	r2, r2, #3
20001432:	4694      	mov	ip, r2
20001434:	44bc      	add	ip, r7
20001436:	4463      	add	r3, ip
20001438:	2228      	movs	r2, #40	; 0x28
2000143a:	609a      	str	r2, [r3, #8]
				
				trophy.xPos = 19;
2000143c:	4b26      	ldr	r3, [pc, #152]	; (200014d8 <main+0x12dc>)
2000143e:	228e      	movs	r2, #142	; 0x8e
20001440:	00d2      	lsls	r2, r2, #3
20001442:	4694      	mov	ip, r2
20001444:	44bc      	add	ip, r7
20001446:	4463      	add	r3, ip
20001448:	2213      	movs	r2, #19
2000144a:	605a      	str	r2, [r3, #4]
				trophy.yPos = 5;
2000144c:	4b22      	ldr	r3, [pc, #136]	; (200014d8 <main+0x12dc>)
2000144e:	228e      	movs	r2, #142	; 0x8e
20001450:	00d2      	lsls	r2, r2, #3
20001452:	4694      	mov	ip, r2
20001454:	44bc      	add	ip, r7
20001456:	4463      	add	r3, ip
20001458:	2205      	movs	r2, #5
2000145a:	609a      	str	r2, [r3, #8]
				trophy_burned = 0;
2000145c:	4b20      	ldr	r3, [pc, #128]	; (200014e0 <main+0x12e4>)
2000145e:	2200      	movs	r2, #0
20001460:	601a      	str	r2, [r3, #0]
				
				DIP.xPos = 100;
20001462:	4b20      	ldr	r3, [pc, #128]	; (200014e4 <main+0x12e8>)
20001464:	228e      	movs	r2, #142	; 0x8e
20001466:	00d2      	lsls	r2, r2, #3
20001468:	4694      	mov	ip, r2
2000146a:	44bc      	add	ip, r7
2000146c:	4463      	add	r3, ip
2000146e:	2264      	movs	r2, #100	; 0x64
20001470:	605a      	str	r2, [r3, #4]
				DIP.yPos = 5;
20001472:	4b1c      	ldr	r3, [pc, #112]	; (200014e4 <main+0x12e8>)
20001474:	228e      	movs	r2, #142	; 0x8e
20001476:	00d2      	lsls	r2, r2, #3
20001478:	4694      	mov	ip, r2
2000147a:	44bc      	add	ip, r7
2000147c:	4463      	add	r3, ip
2000147e:	2205      	movs	r2, #5
20001480:	609a      	str	r2, [r3, #8]
				DIP_burned = 0;
20001482:	4b1a      	ldr	r3, [pc, #104]	; (200014ec <main+0x12f0>)
20001484:	2200      	movs	r2, #0
20001486:	601a      	str	r2, [r3, #0]
				no_DIP = 0;
20001488:	2300      	movs	r3, #0
2000148a:	4a19      	ldr	r2, [pc, #100]	; (200014f0 <main+0x12f4>)
2000148c:	18ba      	adds	r2, r7, r2
2000148e:	6013      	str	r3, [r2, #0]
				
				player.xPos = 3;
20001490:	4b0c      	ldr	r3, [pc, #48]	; (200014c4 <main+0x12c8>)
20001492:	228e      	movs	r2, #142	; 0x8e
20001494:	00d2      	lsls	r2, r2, #3
20001496:	4694      	mov	ip, r2
20001498:	44bc      	add	ip, r7
2000149a:	4463      	add	r3, ip
2000149c:	2203      	movs	r2, #3
2000149e:	605a      	str	r2, [r3, #4]
				player.yPos = 64-18-7; //player position
200014a0:	4b08      	ldr	r3, [pc, #32]	; (200014c4 <main+0x12c8>)
200014a2:	228e      	movs	r2, #142	; 0x8e
200014a4:	00d2      	lsls	r2, r2, #3
200014a6:	4694      	mov	ip, r2
200014a8:	44bc      	add	ip, r7
200014aa:	4463      	add	r3, ip
200014ac:	2227      	movs	r2, #39	; 0x27
200014ae:	609a      	str	r2, [r3, #8]
				clear_ascii();
200014b0:	f002 f981 	bl	200037b6 <clear_ascii>
				break;
200014b4:	e003      	b.n	200014be <main+0x12c2>
				break;
200014b6:	46c0      	nop			; (mov r8, r8)
200014b8:	f7ff f9b1 	bl	2000081e <main+0x622>
				break;
200014bc:	46c0      	nop			; (mov r8, r8)
		switch(current_screen) {
200014be:	f7ff f9ae 	bl	2000081e <main+0x622>
200014c2:	46c0      	nop			; (mov r8, r8)
200014c4:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200014c8:	20003ebc 			; <UNDEFINED> instruction: 0x20003ebc
200014cc:	fffffc98 			; <UNDEFINED> instruction: 0xfffffc98
200014d0:	20003ec0 	andcs	r3, r0, r0, asr #29
200014d4:	fffffe6c 			; <UNDEFINED> instruction: 0xfffffe6c
200014d8:	fffffe90 			; <UNDEFINED> instruction: 0xfffffe90
200014dc:	20003ec4 	andcs	r3, r0, r4, asr #29
200014e0:	20003ec8 	andcs	r3, r0, r8, asr #29
200014e4:	fffffe24 			; <UNDEFINED> instruction: 0xfffffe24
200014e8:	20003ecc 	andcs	r3, r0, ip, asr #29
200014ec:	20003ed0 	ldrdcs	r3, [r0], -r0
200014f0:	0000045c 	andeq	r0, r0, ip, asr r4
200014f4:	00000464 	andeq	r0, r0, r4, ror #8
200014f8:	20007c2c 	andcs	r7, r0, ip, lsr #24
200014fc:	20003eb4 			; <UNDEFINED> instruction: 0x20003eb4
20001500:	20003ed4 	ldrdcs	r3, [r0], -r4
20001504:	0000046c 	andeq	r0, r0, ip, ror #8
20001508:	fffffe48 			; <UNDEFINED> instruction: 0xfffffe48

2000150c <abs>:
		
	}
	
}

int abs(int value) {
2000150c:	b580      	push	{r7, lr}
2000150e:	b082      	sub	sp, #8
20001510:	af00      	add	r7, sp, #0
20001512:	6078      	str	r0, [r7, #4]
	if(value < 0) {
20001514:	687b      	ldr	r3, [r7, #4]
20001516:	2b00      	cmp	r3, #0
20001518:	da02      	bge.n	20001520 <abs+0x14>
		return -value;
2000151a:	687b      	ldr	r3, [r7, #4]
2000151c:	425b      	negs	r3, r3
2000151e:	e000      	b.n	20001522 <abs+0x16>
	}
	return value;
20001520:	687b      	ldr	r3, [r7, #4]
}
20001522:	0018      	movs	r0, r3
20001524:	46bd      	mov	sp, r7
20001526:	b002      	add	sp, #8
20001528:	bd80      	pop	{r7, pc}
2000152a:	46c0      	nop			; (mov r8, r8)

2000152c <render>:
GameObject* gameObjects[100];
int nGameObjects = 0;


void render(GameObject* this)
{
2000152c:	b580      	push	{r7, lr}
2000152e:	b082      	sub	sp, #8
20001530:	af00      	add	r7, sp, #0
20001532:	6078      	str	r0, [r7, #4]
    
}
20001534:	46c0      	nop			; (mov r8, r8)
20001536:	46bd      	mov	sp, r7
20001538:	b002      	add	sp, #8
2000153a:	bd80      	pop	{r7, pc}

2000153c <gameObjectUpdate>:

void gameObjectUpdate(GameObject *this) {
2000153c:	b580      	push	{r7, lr}
2000153e:	b082      	sub	sp, #8
20001540:	af00      	add	r7, sp, #0
20001542:	6078      	str	r0, [r7, #4]
	this->animation_counter++;
20001544:	687b      	ldr	r3, [r7, #4]
20001546:	6a1b      	ldr	r3, [r3, #32]
20001548:	1c5a      	adds	r2, r3, #1
2000154a:	687b      	ldr	r3, [r7, #4]
2000154c:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
2000154e:	687b      	ldr	r3, [r7, #4]
20001550:	6a1a      	ldr	r2, [r3, #32]
20001552:	687b      	ldr	r3, [r7, #4]
20001554:	69db      	ldr	r3, [r3, #28]
20001556:	429a      	cmp	r2, r3
20001558:	d10f      	bne.n	2000157a <gameObjectUpdate+0x3e>
		this->animation_counter = 0;
2000155a:	687b      	ldr	r3, [r7, #4]
2000155c:	2200      	movs	r2, #0
2000155e:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
20001560:	687b      	ldr	r3, [r7, #4]
20001562:	695b      	ldr	r3, [r3, #20]
20001564:	1c5a      	adds	r2, r3, #1
20001566:	687b      	ldr	r3, [r7, #4]
20001568:	699b      	ldr	r3, [r3, #24]
2000156a:	0019      	movs	r1, r3
2000156c:	0010      	movs	r0, r2
2000156e:	f002 fc9b 	bl	20003ea8 <__aeabi_idivmod>
20001572:	000b      	movs	r3, r1
20001574:	001a      	movs	r2, r3
20001576:	687b      	ldr	r3, [r7, #4]
20001578:	615a      	str	r2, [r3, #20]
	}
}
2000157a:	46c0      	nop			; (mov r8, r8)
2000157c:	46bd      	mov	sp, r7
2000157e:	b002      	add	sp, #8
20001580:	bd80      	pop	{r7, pc}
	...

20001584 <initSprites>:
Image fire2Image;
Image fire3Image;
Image fire4Image;
Image fire5Image;
Image fireImages[5];
static void initSprites( void ) {	
20001584:	b580      	push	{r7, lr}
20001586:	b08c      	sub	sp, #48	; 0x30
20001588:	af00      	add	r7, sp, #0
	sprite *pointer0 = &tempFireBlack;
2000158a:	4b3e      	ldr	r3, [pc, #248]	; (20001684 <initSprites+0x100>)
2000158c:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer0, fire_black_2_bits, fire1_gray_width, fire1_gray_height);
2000158e:	493e      	ldr	r1, [pc, #248]	; (20001688 <initSprites+0x104>)
20001590:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20001592:	230c      	movs	r3, #12
20001594:	2208      	movs	r2, #8
20001596:	f001 ff21 	bl	200033dc <load_sprite>
	fireBlack = pointer0;
2000159a:	4b3c      	ldr	r3, [pc, #240]	; (2000168c <initSprites+0x108>)
2000159c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
2000159e:	601a      	str	r2, [r3, #0]
	
	sprite *pointer1 = &tempFire1Gray;
200015a0:	4b3b      	ldr	r3, [pc, #236]	; (20001690 <initSprites+0x10c>)
200015a2:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer1, fire1_gray_bits, fire1_gray_width, fire1_gray_height);
200015a4:	493b      	ldr	r1, [pc, #236]	; (20001694 <initSprites+0x110>)
200015a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
200015a8:	230c      	movs	r3, #12
200015aa:	2208      	movs	r2, #8
200015ac:	f001 ff16 	bl	200033dc <load_sprite>
	fire1Gray = pointer1;
200015b0:	4b39      	ldr	r3, [pc, #228]	; (20001698 <initSprites+0x114>)
200015b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
200015b4:	601a      	str	r2, [r3, #0]

	sprite *pointer2 = &tempFire1Light;
200015b6:	4b39      	ldr	r3, [pc, #228]	; (2000169c <initSprites+0x118>)
200015b8:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer2, fire1_light_bits, fire1_gray_width, fire1_gray_height);
200015ba:	4939      	ldr	r1, [pc, #228]	; (200016a0 <initSprites+0x11c>)
200015bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
200015be:	230c      	movs	r3, #12
200015c0:	2208      	movs	r2, #8
200015c2:	f001 ff0b 	bl	200033dc <load_sprite>
	fire1Light = pointer2;
200015c6:	4b37      	ldr	r3, [pc, #220]	; (200016a4 <initSprites+0x120>)
200015c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200015ca:	601a      	str	r2, [r3, #0]

	sprite *pointer3 = &tempFire2Gray;
200015cc:	4b36      	ldr	r3, [pc, #216]	; (200016a8 <initSprites+0x124>)
200015ce:	623b      	str	r3, [r7, #32]
	load_sprite(pointer3, fire2_gray_bits, fire1_gray_width, fire1_gray_height);
200015d0:	4936      	ldr	r1, [pc, #216]	; (200016ac <initSprites+0x128>)
200015d2:	6a38      	ldr	r0, [r7, #32]
200015d4:	230c      	movs	r3, #12
200015d6:	2208      	movs	r2, #8
200015d8:	f001 ff00 	bl	200033dc <load_sprite>
	fire2Gray = pointer3;
200015dc:	4b34      	ldr	r3, [pc, #208]	; (200016b0 <initSprites+0x12c>)
200015de:	6a3a      	ldr	r2, [r7, #32]
200015e0:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempFire2Light;
200015e2:	4b34      	ldr	r3, [pc, #208]	; (200016b4 <initSprites+0x130>)
200015e4:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer4, fire2_light_bits, fire1_gray_width, fire1_gray_height);
200015e6:	4934      	ldr	r1, [pc, #208]	; (200016b8 <initSprites+0x134>)
200015e8:	69f8      	ldr	r0, [r7, #28]
200015ea:	230c      	movs	r3, #12
200015ec:	2208      	movs	r2, #8
200015ee:	f001 fef5 	bl	200033dc <load_sprite>
	fire2Light = pointer4;
200015f2:	4b32      	ldr	r3, [pc, #200]	; (200016bc <initSprites+0x138>)
200015f4:	69fa      	ldr	r2, [r7, #28]
200015f6:	601a      	str	r2, [r3, #0]

	sprite *pointer5 = &tempFire3Gray;
200015f8:	4b31      	ldr	r3, [pc, #196]	; (200016c0 <initSprites+0x13c>)
200015fa:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer5, fire3_gray_bits, fire1_gray_width, fire1_gray_height);
200015fc:	4931      	ldr	r1, [pc, #196]	; (200016c4 <initSprites+0x140>)
200015fe:	69b8      	ldr	r0, [r7, #24]
20001600:	230c      	movs	r3, #12
20001602:	2208      	movs	r2, #8
20001604:	f001 feea 	bl	200033dc <load_sprite>
	fire3Gray = pointer5;
20001608:	4b2f      	ldr	r3, [pc, #188]	; (200016c8 <initSprites+0x144>)
2000160a:	69ba      	ldr	r2, [r7, #24]
2000160c:	601a      	str	r2, [r3, #0]

	sprite *pointer6 = &tempFire3Light;
2000160e:	4b2f      	ldr	r3, [pc, #188]	; (200016cc <initSprites+0x148>)
20001610:	617b      	str	r3, [r7, #20]
	load_sprite(pointer6, fire3_light_bits, fire1_gray_width, fire1_gray_height);
20001612:	492f      	ldr	r1, [pc, #188]	; (200016d0 <initSprites+0x14c>)
20001614:	6978      	ldr	r0, [r7, #20]
20001616:	230c      	movs	r3, #12
20001618:	2208      	movs	r2, #8
2000161a:	f001 fedf 	bl	200033dc <load_sprite>
	fire3Light = pointer6;
2000161e:	4b2d      	ldr	r3, [pc, #180]	; (200016d4 <initSprites+0x150>)
20001620:	697a      	ldr	r2, [r7, #20]
20001622:	601a      	str	r2, [r3, #0]

	sprite *pointer7 = &tempFire4Gray;
20001624:	4b2c      	ldr	r3, [pc, #176]	; (200016d8 <initSprites+0x154>)
20001626:	613b      	str	r3, [r7, #16]
	load_sprite(pointer7, fire4_gray_bits, fire1_gray_width, fire1_gray_height);
20001628:	492c      	ldr	r1, [pc, #176]	; (200016dc <initSprites+0x158>)
2000162a:	6938      	ldr	r0, [r7, #16]
2000162c:	230c      	movs	r3, #12
2000162e:	2208      	movs	r2, #8
20001630:	f001 fed4 	bl	200033dc <load_sprite>
	fire4Gray = pointer7;
20001634:	4b2a      	ldr	r3, [pc, #168]	; (200016e0 <initSprites+0x15c>)
20001636:	693a      	ldr	r2, [r7, #16]
20001638:	601a      	str	r2, [r3, #0]

	sprite *pointer8 = &tempFire4Light;
2000163a:	4b2a      	ldr	r3, [pc, #168]	; (200016e4 <initSprites+0x160>)
2000163c:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer8, fire4_light_bits, fire1_gray_width, fire1_gray_height);
2000163e:	492a      	ldr	r1, [pc, #168]	; (200016e8 <initSprites+0x164>)
20001640:	68f8      	ldr	r0, [r7, #12]
20001642:	230c      	movs	r3, #12
20001644:	2208      	movs	r2, #8
20001646:	f001 fec9 	bl	200033dc <load_sprite>
	fire4Light = pointer8;
2000164a:	4b28      	ldr	r3, [pc, #160]	; (200016ec <initSprites+0x168>)
2000164c:	68fa      	ldr	r2, [r7, #12]
2000164e:	601a      	str	r2, [r3, #0]

	sprite *pointer9 = &tempFire5Gray;
20001650:	4b27      	ldr	r3, [pc, #156]	; (200016f0 <initSprites+0x16c>)
20001652:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer9, fire5_gray_bits, fire1_gray_width, fire1_gray_height);
20001654:	4927      	ldr	r1, [pc, #156]	; (200016f4 <initSprites+0x170>)
20001656:	68b8      	ldr	r0, [r7, #8]
20001658:	230c      	movs	r3, #12
2000165a:	2208      	movs	r2, #8
2000165c:	f001 febe 	bl	200033dc <load_sprite>
	fire5Gray = pointer9;
20001660:	4b25      	ldr	r3, [pc, #148]	; (200016f8 <initSprites+0x174>)
20001662:	68ba      	ldr	r2, [r7, #8]
20001664:	601a      	str	r2, [r3, #0]

	sprite *pointer10 = &tempFire5Light;
20001666:	4b25      	ldr	r3, [pc, #148]	; (200016fc <initSprites+0x178>)
20001668:	607b      	str	r3, [r7, #4]
	load_sprite(pointer10, fire5_light_bits, fire1_gray_width, fire1_gray_height);
2000166a:	4925      	ldr	r1, [pc, #148]	; (20001700 <initSprites+0x17c>)
2000166c:	6878      	ldr	r0, [r7, #4]
2000166e:	230c      	movs	r3, #12
20001670:	2208      	movs	r2, #8
20001672:	f001 feb3 	bl	200033dc <load_sprite>
	fire5Light = pointer10;
20001676:	4b23      	ldr	r3, [pc, #140]	; (20001704 <initSprites+0x180>)
20001678:	687a      	ldr	r2, [r7, #4]
2000167a:	601a      	str	r2, [r3, #0]
}
2000167c:	46c0      	nop			; (mov r8, r8)
2000167e:	46bd      	mov	sp, r7
20001680:	b00c      	add	sp, #48	; 0x30
20001682:	bd80      	pop	{r7, pc}
20001684:	20004198 	mulcs	r0, r8, r1
20001688:	20007c40 	andcs	r7, r0, r0, asr #24
2000168c:	20004290 	mulcs	r0, r0, r2
20001690:	20004284 	andcs	r4, r0, r4, lsl #5
20001694:	20007c4c 	andcs	r7, r0, ip, asr #24
20001698:	200042a8 	andcs	r4, r0, r8, lsr #5
2000169c:	20004260 	andcs	r4, r0, r0, ror #4
200016a0:	20007c58 	andcs	r7, r0, r8, asr ip
200016a4:	20004160 	andcs	r4, r0, r0, ror #2
200016a8:	2000418c 	andcs	r4, r0, ip, lsl #3
200016ac:	20007c64 	andcs	r7, r0, r4, ror #24
200016b0:	200042a4 	andcs	r4, r0, r4, lsr #5
200016b4:	20004294 	mulcs	r0, r4, r2
200016b8:	20007c70 	andcs	r7, r0, r0, ror ip
200016bc:	2000427c 	andcs	r4, r0, ip, ror r2
200016c0:	20004244 	andcs	r4, r0, r4, asr #4
200016c4:	20007c7c 	andcs	r7, r0, ip, ror ip
200016c8:	20004170 	andcs	r4, r0, r0, ror r1
200016cc:	20004164 	andcs	r4, r0, r4, ror #2
200016d0:	20007c88 	andcs	r7, r0, r8, lsl #25
200016d4:	200042a0 	andcs	r4, r0, r0, lsr #5
200016d8:	20004174 	andcs	r4, r0, r4, ror r1
200016dc:	20007c94 	mulcs	r0, r4, ip
200016e0:	2000425c 	andcs	r4, r0, ip, asr r2
200016e4:	200041b0 			; <UNDEFINED> instruction: 0x200041b0
200016e8:	20007ca0 	andcs	r7, r0, r0, lsr #25
200016ec:	200041c8 	andcs	r4, r0, r8, asr #3
200016f0:	20004238 	andcs	r4, r0, r8, lsr r2
200016f4:	20007cac 	andcs	r7, r0, ip, lsr #25
200016f8:	20004278 	andcs	r4, r0, r8, ror r2
200016fc:	2000426c 	andcs	r4, r0, ip, ror #4
20001700:	20007cb8 			; <UNDEFINED> instruction: 0x20007cb8
20001704:	20004280 	andcs	r4, r0, r0, lsl #5

20001708 <init_fire>:
	
void init_fire( GameObject *fireObj ) {
20001708:	b590      	push	{r4, r7, lr}
2000170a:	b083      	sub	sp, #12
2000170c:	af00      	add	r7, sp, #0
2000170e:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20001710:	4b30      	ldr	r3, [pc, #192]	; (200017d4 <init_fire+0xcc>)
20001712:	681b      	ldr	r3, [r3, #0]
20001714:	2b00      	cmp	r3, #0
20001716:	d049      	beq.n	200017ac <init_fire+0xa4>
		initSprites();
20001718:	f7ff ff34 	bl	20001584 <initSprites>
		firstTime = 0;			
2000171c:	4b2d      	ldr	r3, [pc, #180]	; (200017d4 <init_fire+0xcc>)
2000171e:	2200      	movs	r2, #0
20001720:	601a      	str	r2, [r3, #0]

		fireImages[0] = fire1Image;
20001722:	4b2d      	ldr	r3, [pc, #180]	; (200017d8 <init_fire+0xd0>)
20001724:	4a2d      	ldr	r2, [pc, #180]	; (200017dc <init_fire+0xd4>)
20001726:	ca13      	ldmia	r2!, {r0, r1, r4}
20001728:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[1] = fire2Image;
2000172a:	4b2b      	ldr	r3, [pc, #172]	; (200017d8 <init_fire+0xd0>)
2000172c:	4a2c      	ldr	r2, [pc, #176]	; (200017e0 <init_fire+0xd8>)
2000172e:	330c      	adds	r3, #12
20001730:	ca13      	ldmia	r2!, {r0, r1, r4}
20001732:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[2] = fire3Image;
20001734:	4b28      	ldr	r3, [pc, #160]	; (200017d8 <init_fire+0xd0>)
20001736:	4a2b      	ldr	r2, [pc, #172]	; (200017e4 <init_fire+0xdc>)
20001738:	3318      	adds	r3, #24
2000173a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000173c:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[3] = fire4Image;
2000173e:	4b26      	ldr	r3, [pc, #152]	; (200017d8 <init_fire+0xd0>)
20001740:	4a29      	ldr	r2, [pc, #164]	; (200017e8 <init_fire+0xe0>)
20001742:	3324      	adds	r3, #36	; 0x24
20001744:	ca13      	ldmia	r2!, {r0, r1, r4}
20001746:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[4] = fire5Image;
20001748:	4b23      	ldr	r3, [pc, #140]	; (200017d8 <init_fire+0xd0>)
2000174a:	4a28      	ldr	r2, [pc, #160]	; (200017ec <init_fire+0xe4>)
2000174c:	3330      	adds	r3, #48	; 0x30
2000174e:	ca13      	ldmia	r2!, {r0, r1, r4}
20001750:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&fireImages[0], fire1Gray, fire1Light, fireBlack);
20001752:	4b27      	ldr	r3, [pc, #156]	; (200017f0 <init_fire+0xe8>)
20001754:	6819      	ldr	r1, [r3, #0]
20001756:	4b27      	ldr	r3, [pc, #156]	; (200017f4 <init_fire+0xec>)
20001758:	681a      	ldr	r2, [r3, #0]
2000175a:	4b27      	ldr	r3, [pc, #156]	; (200017f8 <init_fire+0xf0>)
2000175c:	681b      	ldr	r3, [r3, #0]
2000175e:	481e      	ldr	r0, [pc, #120]	; (200017d8 <init_fire+0xd0>)
20001760:	f001 fe28 	bl	200033b4 <load_image>
		load_image(&fireImages[1], fire2Gray, fire2Light, fireBlack);
20001764:	4b25      	ldr	r3, [pc, #148]	; (200017fc <init_fire+0xf4>)
20001766:	6819      	ldr	r1, [r3, #0]
20001768:	4b25      	ldr	r3, [pc, #148]	; (20001800 <init_fire+0xf8>)
2000176a:	681a      	ldr	r2, [r3, #0]
2000176c:	4b22      	ldr	r3, [pc, #136]	; (200017f8 <init_fire+0xf0>)
2000176e:	681b      	ldr	r3, [r3, #0]
20001770:	4824      	ldr	r0, [pc, #144]	; (20001804 <init_fire+0xfc>)
20001772:	f001 fe1f 	bl	200033b4 <load_image>
		load_image(&fireImages[2], fire3Gray, fire3Light, fireBlack);
20001776:	4b24      	ldr	r3, [pc, #144]	; (20001808 <init_fire+0x100>)
20001778:	6819      	ldr	r1, [r3, #0]
2000177a:	4b24      	ldr	r3, [pc, #144]	; (2000180c <init_fire+0x104>)
2000177c:	681a      	ldr	r2, [r3, #0]
2000177e:	4b1e      	ldr	r3, [pc, #120]	; (200017f8 <init_fire+0xf0>)
20001780:	681b      	ldr	r3, [r3, #0]
20001782:	4823      	ldr	r0, [pc, #140]	; (20001810 <init_fire+0x108>)
20001784:	f001 fe16 	bl	200033b4 <load_image>
		load_image(&fireImages[3], fire4Gray, fire4Light, fireBlack);
20001788:	4b22      	ldr	r3, [pc, #136]	; (20001814 <init_fire+0x10c>)
2000178a:	6819      	ldr	r1, [r3, #0]
2000178c:	4b22      	ldr	r3, [pc, #136]	; (20001818 <init_fire+0x110>)
2000178e:	681a      	ldr	r2, [r3, #0]
20001790:	4b19      	ldr	r3, [pc, #100]	; (200017f8 <init_fire+0xf0>)
20001792:	681b      	ldr	r3, [r3, #0]
20001794:	4821      	ldr	r0, [pc, #132]	; (2000181c <init_fire+0x114>)
20001796:	f001 fe0d 	bl	200033b4 <load_image>
		load_image(&fireImages[4], fire5Gray, fire5Light, fireBlack);
2000179a:	4b21      	ldr	r3, [pc, #132]	; (20001820 <init_fire+0x118>)
2000179c:	6819      	ldr	r1, [r3, #0]
2000179e:	4b21      	ldr	r3, [pc, #132]	; (20001824 <init_fire+0x11c>)
200017a0:	681a      	ldr	r2, [r3, #0]
200017a2:	4b15      	ldr	r3, [pc, #84]	; (200017f8 <init_fire+0xf0>)
200017a4:	681b      	ldr	r3, [r3, #0]
200017a6:	4820      	ldr	r0, [pc, #128]	; (20001828 <init_fire+0x120>)
200017a8:	f001 fe04 	bl	200033b4 <load_image>
	}
	
	fireObj->images = fireImages;
200017ac:	687b      	ldr	r3, [r7, #4]
200017ae:	4a0a      	ldr	r2, [pc, #40]	; (200017d8 <init_fire+0xd0>)
200017b0:	601a      	str	r2, [r3, #0]

	fireObj->current_frame = 0;
200017b2:	687b      	ldr	r3, [r7, #4]
200017b4:	2200      	movs	r2, #0
200017b6:	615a      	str	r2, [r3, #20]
	fireObj->n_frames = 5;
200017b8:	687b      	ldr	r3, [r7, #4]
200017ba:	2205      	movs	r2, #5
200017bc:	619a      	str	r2, [r3, #24]
	fireObj->animation_speed = 1;
200017be:	687b      	ldr	r3, [r7, #4]
200017c0:	2201      	movs	r2, #1
200017c2:	61da      	str	r2, [r3, #28]
	fireObj->animation_counter = 0;
200017c4:	687b      	ldr	r3, [r7, #4]
200017c6:	2200      	movs	r2, #0
200017c8:	621a      	str	r2, [r3, #32]
}
200017ca:	46c0      	nop			; (mov r8, r8)
200017cc:	46bd      	mov	sp, r7
200017ce:	b003      	add	sp, #12
200017d0:	bd90      	pop	{r4, r7, pc}
200017d2:	46c0      	nop			; (mov r8, r8)
200017d4:	20007cc4 	andcs	r7, r0, r4, asr #25
200017d8:	200041fc 	strdcs	r4, [r0], -ip
200017dc:	200041bc 			; <UNDEFINED> instruction: 0x200041bc
200017e0:	20004180 	andcs	r4, r0, r0, lsl #3
200017e4:	200041a4 	andcs	r4, r0, r4, lsr #3
200017e8:	20004250 	andcs	r4, r0, r0, asr r2
200017ec:	200041f0 	strdcs	r4, [r0], -r0
200017f0:	200042a8 	andcs	r4, r0, r8, lsr #5
200017f4:	20004160 	andcs	r4, r0, r0, ror #2
200017f8:	20004290 	mulcs	r0, r0, r2
200017fc:	200042a4 	andcs	r4, r0, r4, lsr #5
20001800:	2000427c 	andcs	r4, r0, ip, ror r2
20001804:	20004208 	andcs	r4, r0, r8, lsl #4
20001808:	20004170 	andcs	r4, r0, r0, ror r1
2000180c:	200042a0 	andcs	r4, r0, r0, lsr #5
20001810:	20004214 	andcs	r4, r0, r4, lsl r2
20001814:	2000425c 	andcs	r4, r0, ip, asr r2
20001818:	200041c8 	andcs	r4, r0, r8, asr #3
2000181c:	20004220 	andcs	r4, r0, r0, lsr #4
20001820:	20004278 	andcs	r4, r0, r8, ror r2
20001824:	20004280 	andcs	r4, r0, r0, lsl #5
20001828:	2000422c 	andcs	r4, r0, ip, lsr #4

2000182c <playerUpdate>:
#include "gpio.h"
#include "controls.h"
#include "gameobject.h"
#include "player.h"

void playerUpdate(GameObject *this) {
2000182c:	b580      	push	{r7, lr}
2000182e:	b082      	sub	sp, #8
20001830:	af00      	add	r7, sp, #0
20001832:	6078      	str	r0, [r7, #4]
	
	// Animate
	this->animation_counter++;
20001834:	687b      	ldr	r3, [r7, #4]
20001836:	6a1b      	ldr	r3, [r3, #32]
20001838:	1c5a      	adds	r2, r3, #1
2000183a:	687b      	ldr	r3, [r7, #4]
2000183c:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
2000183e:	687b      	ldr	r3, [r7, #4]
20001840:	6a1a      	ldr	r2, [r3, #32]
20001842:	687b      	ldr	r3, [r7, #4]
20001844:	69db      	ldr	r3, [r3, #28]
20001846:	429a      	cmp	r2, r3
20001848:	d10f      	bne.n	2000186a <playerUpdate+0x3e>
		this->animation_counter = 0;
2000184a:	687b      	ldr	r3, [r7, #4]
2000184c:	2200      	movs	r2, #0
2000184e:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
20001850:	687b      	ldr	r3, [r7, #4]
20001852:	695b      	ldr	r3, [r3, #20]
20001854:	1c5a      	adds	r2, r3, #1
20001856:	687b      	ldr	r3, [r7, #4]
20001858:	699b      	ldr	r3, [r3, #24]
2000185a:	0019      	movs	r1, r3
2000185c:	0010      	movs	r0, r2
2000185e:	f002 fb23 	bl	20003ea8 <__aeabi_idivmod>
20001862:	000b      	movs	r3, r1
20001864:	001a      	movs	r2, r3
20001866:	687b      	ldr	r3, [r7, #4]
20001868:	615a      	str	r2, [r3, #20]
	static xSpeed = 0;
	static ySpeed = 0;
	
	// Y position changes
	
	if (lastJumpValue != read_DIL_single(JUMP_TRIGGER) && (this->yPos == LIMIT_DOWN || this->yPos == PLATFORM_Y - PLAYER_HEIGHT)){
2000186a:	2005      	movs	r0, #5
2000186c:	f001 fde6 	bl	2000343c <read_DIL_single>
20001870:	0002      	movs	r2, r0
20001872:	4b5e      	ldr	r3, [pc, #376]	; (200019ec <playerUpdate+0x1c0>)
20001874:	681b      	ldr	r3, [r3, #0]
20001876:	429a      	cmp	r2, r3
20001878:	d00b      	beq.n	20001892 <playerUpdate+0x66>
2000187a:	687b      	ldr	r3, [r7, #4]
2000187c:	689b      	ldr	r3, [r3, #8]
2000187e:	2b27      	cmp	r3, #39	; 0x27
20001880:	d003      	beq.n	2000188a <playerUpdate+0x5e>
20001882:	687b      	ldr	r3, [r7, #4]
20001884:	689b      	ldr	r3, [r3, #8]
20001886:	2b05      	cmp	r3, #5
20001888:	d103      	bne.n	20001892 <playerUpdate+0x66>
		ySpeed = -(SPEED_ADD_Y);
2000188a:	4b59      	ldr	r3, [pc, #356]	; (200019f0 <playerUpdate+0x1c4>)
2000188c:	2204      	movs	r2, #4
2000188e:	4252      	negs	r2, r2
20001890:	601a      	str	r2, [r3, #0]
	}
	
	if (this->yPos + ySpeed > LIMIT_DOWN){
20001892:	687b      	ldr	r3, [r7, #4]
20001894:	689a      	ldr	r2, [r3, #8]
20001896:	4b56      	ldr	r3, [pc, #344]	; (200019f0 <playerUpdate+0x1c4>)
20001898:	681b      	ldr	r3, [r3, #0]
2000189a:	18d3      	adds	r3, r2, r3
2000189c:	2b27      	cmp	r3, #39	; 0x27
2000189e:	dd06      	ble.n	200018ae <playerUpdate+0x82>
		this->yPos = LIMIT_DOWN;
200018a0:	687b      	ldr	r3, [r7, #4]
200018a2:	2227      	movs	r2, #39	; 0x27
200018a4:	609a      	str	r2, [r3, #8]
		ySpeed = 0;
200018a6:	4b52      	ldr	r3, [pc, #328]	; (200019f0 <playerUpdate+0x1c4>)
200018a8:	2200      	movs	r2, #0
200018aa:	601a      	str	r2, [r3, #0]
200018ac:	e020      	b.n	200018f0 <playerUpdate+0xc4>
	}
	else if (this->yPos + ySpeed > PLATFORM_Y - PLAYER_HEIGHT && this->yPos + ySpeed < PLATFORM_Y - PLAYER_HEIGHT + 2*SPEED_ADD_Y){
200018ae:	687b      	ldr	r3, [r7, #4]
200018b0:	689a      	ldr	r2, [r3, #8]
200018b2:	4b4f      	ldr	r3, [pc, #316]	; (200019f0 <playerUpdate+0x1c4>)
200018b4:	681b      	ldr	r3, [r3, #0]
200018b6:	18d3      	adds	r3, r2, r3
200018b8:	2b05      	cmp	r3, #5
200018ba:	dd0d      	ble.n	200018d8 <playerUpdate+0xac>
200018bc:	687b      	ldr	r3, [r7, #4]
200018be:	689a      	ldr	r2, [r3, #8]
200018c0:	4b4b      	ldr	r3, [pc, #300]	; (200019f0 <playerUpdate+0x1c4>)
200018c2:	681b      	ldr	r3, [r3, #0]
200018c4:	18d3      	adds	r3, r2, r3
200018c6:	2b0c      	cmp	r3, #12
200018c8:	dc06      	bgt.n	200018d8 <playerUpdate+0xac>
		this->yPos = PLATFORM_Y - PLAYER_HEIGHT;
200018ca:	687b      	ldr	r3, [r7, #4]
200018cc:	2205      	movs	r2, #5
200018ce:	609a      	str	r2, [r3, #8]
		ySpeed = 0;
200018d0:	4b47      	ldr	r3, [pc, #284]	; (200019f0 <playerUpdate+0x1c4>)
200018d2:	2200      	movs	r2, #0
200018d4:	601a      	str	r2, [r3, #0]
200018d6:	e00b      	b.n	200018f0 <playerUpdate+0xc4>
	}
	else{
		this->yPos+=ySpeed;
200018d8:	687b      	ldr	r3, [r7, #4]
200018da:	689a      	ldr	r2, [r3, #8]
200018dc:	4b44      	ldr	r3, [pc, #272]	; (200019f0 <playerUpdate+0x1c4>)
200018de:	681b      	ldr	r3, [r3, #0]
200018e0:	18d2      	adds	r2, r2, r3
200018e2:	687b      	ldr	r3, [r7, #4]
200018e4:	609a      	str	r2, [r3, #8]
		ySpeed++;
200018e6:	4b42      	ldr	r3, [pc, #264]	; (200019f0 <playerUpdate+0x1c4>)
200018e8:	681b      	ldr	r3, [r3, #0]
200018ea:	1c5a      	adds	r2, r3, #1
200018ec:	4b40      	ldr	r3, [pc, #256]	; (200019f0 <playerUpdate+0x1c4>)
200018ee:	601a      	str	r2, [r3, #0]
	}

	// X position changes
	
	if (!lastRightValue && read_DIL_single(RIGHT_TRIGGER)){ 
200018f0:	4b40      	ldr	r3, [pc, #256]	; (200019f4 <playerUpdate+0x1c8>)
200018f2:	681b      	ldr	r3, [r3, #0]
200018f4:	2b00      	cmp	r3, #0
200018f6:	d109      	bne.n	2000190c <playerUpdate+0xe0>
200018f8:	2000      	movs	r0, #0
200018fa:	f001 fd9f 	bl	2000343c <read_DIL_single>
200018fe:	1e03      	subs	r3, r0, #0
20001900:	d004      	beq.n	2000190c <playerUpdate+0xe0>
		xSpeed += SPEED_ADD_X;
20001902:	4b3d      	ldr	r3, [pc, #244]	; (200019f8 <playerUpdate+0x1cc>)
20001904:	681b      	ldr	r3, [r3, #0]
20001906:	1cda      	adds	r2, r3, #3
20001908:	4b3b      	ldr	r3, [pc, #236]	; (200019f8 <playerUpdate+0x1cc>)
2000190a:	601a      	str	r2, [r3, #0]
	}
	
	if (!lastLeftValue && read_DIL_single(LEFT_TRIGGER)){
2000190c:	4b3b      	ldr	r3, [pc, #236]	; (200019fc <playerUpdate+0x1d0>)
2000190e:	681b      	ldr	r3, [r3, #0]
20001910:	2b00      	cmp	r3, #0
20001912:	d109      	bne.n	20001928 <playerUpdate+0xfc>
20001914:	2007      	movs	r0, #7
20001916:	f001 fd91 	bl	2000343c <read_DIL_single>
2000191a:	1e03      	subs	r3, r0, #0
2000191c:	d004      	beq.n	20001928 <playerUpdate+0xfc>
		xSpeed -= SPEED_ADD_X;
2000191e:	4b36      	ldr	r3, [pc, #216]	; (200019f8 <playerUpdate+0x1cc>)
20001920:	681b      	ldr	r3, [r3, #0]
20001922:	1eda      	subs	r2, r3, #3
20001924:	4b34      	ldr	r3, [pc, #208]	; (200019f8 <playerUpdate+0x1cc>)
20001926:	601a      	str	r2, [r3, #0]
	}
	
	if (((!lastLeftValue && read_DIL_single(LEFT_TRIGGER)) || (!lastRightValue && read_DIL_single(RIGHT_TRIGGER))) && this->yPos != PLATFORM_Y - PLAYER_HEIGHT && this->yPos != LIMIT_DOWN){
20001928:	4b34      	ldr	r3, [pc, #208]	; (200019fc <playerUpdate+0x1d0>)
2000192a:	681b      	ldr	r3, [r3, #0]
2000192c:	2b00      	cmp	r3, #0
2000192e:	d104      	bne.n	2000193a <playerUpdate+0x10e>
20001930:	2007      	movs	r0, #7
20001932:	f001 fd83 	bl	2000343c <read_DIL_single>
20001936:	1e03      	subs	r3, r0, #0
20001938:	d108      	bne.n	2000194c <playerUpdate+0x120>
2000193a:	4b2e      	ldr	r3, [pc, #184]	; (200019f4 <playerUpdate+0x1c8>)
2000193c:	681b      	ldr	r3, [r3, #0]
2000193e:	2b00      	cmp	r3, #0
20001940:	d111      	bne.n	20001966 <playerUpdate+0x13a>
20001942:	2000      	movs	r0, #0
20001944:	f001 fd7a 	bl	2000343c <read_DIL_single>
20001948:	1e03      	subs	r3, r0, #0
2000194a:	d00c      	beq.n	20001966 <playerUpdate+0x13a>
2000194c:	687b      	ldr	r3, [r7, #4]
2000194e:	689b      	ldr	r3, [r3, #8]
20001950:	2b05      	cmp	r3, #5
20001952:	d008      	beq.n	20001966 <playerUpdate+0x13a>
20001954:	687b      	ldr	r3, [r7, #4]
20001956:	689b      	ldr	r3, [r3, #8]
20001958:	2b27      	cmp	r3, #39	; 0x27
2000195a:	d004      	beq.n	20001966 <playerUpdate+0x13a>
		xSpeed *=2;
2000195c:	4b26      	ldr	r3, [pc, #152]	; (200019f8 <playerUpdate+0x1cc>)
2000195e:	681b      	ldr	r3, [r3, #0]
20001960:	005a      	lsls	r2, r3, #1
20001962:	4b25      	ldr	r3, [pc, #148]	; (200019f8 <playerUpdate+0x1cc>)
20001964:	601a      	str	r2, [r3, #0]
	}
	
	if (this->xPos + xSpeed > LIMIT_RIGHT || this->xPos + xSpeed < LIMIT_LEFT){
20001966:	687b      	ldr	r3, [r7, #4]
20001968:	685a      	ldr	r2, [r3, #4]
2000196a:	4b23      	ldr	r3, [pc, #140]	; (200019f8 <playerUpdate+0x1cc>)
2000196c:	681b      	ldr	r3, [r3, #0]
2000196e:	18d3      	adds	r3, r2, r3
20001970:	2b6e      	cmp	r3, #110	; 0x6e
20001972:	dc06      	bgt.n	20001982 <playerUpdate+0x156>
20001974:	687b      	ldr	r3, [r7, #4]
20001976:	685a      	ldr	r2, [r3, #4]
20001978:	4b1f      	ldr	r3, [pc, #124]	; (200019f8 <playerUpdate+0x1cc>)
2000197a:	681b      	ldr	r3, [r3, #0]
2000197c:	18d3      	adds	r3, r2, r3
2000197e:	2b00      	cmp	r3, #0
20001980:	da04      	bge.n	2000198c <playerUpdate+0x160>
		xSpeed *= -1;	
20001982:	4b1d      	ldr	r3, [pc, #116]	; (200019f8 <playerUpdate+0x1cc>)
20001984:	681b      	ldr	r3, [r3, #0]
20001986:	425a      	negs	r2, r3
20001988:	4b1b      	ldr	r3, [pc, #108]	; (200019f8 <playerUpdate+0x1cc>)
2000198a:	601a      	str	r2, [r3, #0]
	}
	
	this->xPos += xSpeed;	
2000198c:	687b      	ldr	r3, [r7, #4]
2000198e:	685a      	ldr	r2, [r3, #4]
20001990:	4b19      	ldr	r3, [pc, #100]	; (200019f8 <playerUpdate+0x1cc>)
20001992:	681b      	ldr	r3, [r3, #0]
20001994:	18d2      	adds	r2, r2, r3
20001996:	687b      	ldr	r3, [r7, #4]
20001998:	605a      	str	r2, [r3, #4]
	
	if (xSpeed > 0){
2000199a:	4b17      	ldr	r3, [pc, #92]	; (200019f8 <playerUpdate+0x1cc>)
2000199c:	681b      	ldr	r3, [r3, #0]
2000199e:	2b00      	cmp	r3, #0
200019a0:	dd05      	ble.n	200019ae <playerUpdate+0x182>
		xSpeed--;
200019a2:	4b15      	ldr	r3, [pc, #84]	; (200019f8 <playerUpdate+0x1cc>)
200019a4:	681b      	ldr	r3, [r3, #0]
200019a6:	1e5a      	subs	r2, r3, #1
200019a8:	4b13      	ldr	r3, [pc, #76]	; (200019f8 <playerUpdate+0x1cc>)
200019aa:	601a      	str	r2, [r3, #0]
200019ac:	e008      	b.n	200019c0 <playerUpdate+0x194>
	}
	else if (xSpeed < 0){
200019ae:	4b12      	ldr	r3, [pc, #72]	; (200019f8 <playerUpdate+0x1cc>)
200019b0:	681b      	ldr	r3, [r3, #0]
200019b2:	2b00      	cmp	r3, #0
200019b4:	da04      	bge.n	200019c0 <playerUpdate+0x194>
		xSpeed++;
200019b6:	4b10      	ldr	r3, [pc, #64]	; (200019f8 <playerUpdate+0x1cc>)
200019b8:	681b      	ldr	r3, [r3, #0]
200019ba:	1c5a      	adds	r2, r3, #1
200019bc:	4b0e      	ldr	r3, [pc, #56]	; (200019f8 <playerUpdate+0x1cc>)
200019be:	601a      	str	r2, [r3, #0]
	}
	
	// Prepare values
	lastRightValue = read_DIL_single(RIGHT_TRIGGER);
200019c0:	2000      	movs	r0, #0
200019c2:	f001 fd3b 	bl	2000343c <read_DIL_single>
200019c6:	0002      	movs	r2, r0
200019c8:	4b0a      	ldr	r3, [pc, #40]	; (200019f4 <playerUpdate+0x1c8>)
200019ca:	601a      	str	r2, [r3, #0]
	lastLeftValue = read_DIL_single(LEFT_TRIGGER);
200019cc:	2007      	movs	r0, #7
200019ce:	f001 fd35 	bl	2000343c <read_DIL_single>
200019d2:	0002      	movs	r2, r0
200019d4:	4b09      	ldr	r3, [pc, #36]	; (200019fc <playerUpdate+0x1d0>)
200019d6:	601a      	str	r2, [r3, #0]
	lastJumpValue = read_DIL_single(JUMP_TRIGGER);
200019d8:	2005      	movs	r0, #5
200019da:	f001 fd2f 	bl	2000343c <read_DIL_single>
200019de:	0002      	movs	r2, r0
200019e0:	4b02      	ldr	r3, [pc, #8]	; (200019ec <playerUpdate+0x1c0>)
200019e2:	601a      	str	r2, [r3, #0]
	
200019e4:	46c0      	nop			; (mov r8, r8)
200019e6:	46bd      	mov	sp, r7
200019e8:	b002      	add	sp, #8
200019ea:	bd80      	pop	{r7, pc}
200019ec:	20003edc 	ldrdcs	r3, [r0], -ip
200019f0:	20003ee0 	andcs	r3, r0, r0, ror #29
200019f4:	20003ee4 	andcs	r3, r0, r4, ror #29
200019f8:	20003ee8 	andcs	r3, r0, r8, ror #29
200019fc:	20003eec 	andcs	r3, r0, ip, ror #29

20001a00 <initSprites>:
Image bird5Image;
Image bird6Image;
//Image bird7Image;
//Image bird8Image;
Image birdImages[6];
static void initSprites( void ) {	
20001a00:	b580      	push	{r7, lr}
20001a02:	b090      	sub	sp, #64	; 0x40
20001a04:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempBirdLight;
20001a06:	4b54      	ldr	r3, [pc, #336]	; (20001b58 <initSprites+0x158>)
20001a08:	63fb      	str	r3, [r7, #60]	; 0x3c
	load_sprite(pointer11, bird1_light_bits, bird1_black_width, bird1_black_height);
20001a0a:	4954      	ldr	r1, [pc, #336]	; (20001b5c <initSprites+0x15c>)
20001a0c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
20001a0e:	2319      	movs	r3, #25
20001a10:	2219      	movs	r2, #25
20001a12:	f001 fce3 	bl	200033dc <load_sprite>
	bird1Light = pointer11;
20001a16:	4b52      	ldr	r3, [pc, #328]	; (20001b60 <initSprites+0x160>)
20001a18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
20001a1a:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempBirdGray;
20001a1c:	4b51      	ldr	r3, [pc, #324]	; (20001b64 <initSprites+0x164>)
20001a1e:	63bb      	str	r3, [r7, #56]	; 0x38
	load_sprite(pointer12, bird1_gray_bits, bird1_black_width, bird1_black_height);
20001a20:	4951      	ldr	r1, [pc, #324]	; (20001b68 <initSprites+0x168>)
20001a22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
20001a24:	2319      	movs	r3, #25
20001a26:	2219      	movs	r2, #25
20001a28:	f001 fcd8 	bl	200033dc <load_sprite>
	bird1Gray = pointer12;
20001a2c:	4b4f      	ldr	r3, [pc, #316]	; (20001b6c <initSprites+0x16c>)
20001a2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
20001a30:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempBirdBlack;
20001a32:	4b4f      	ldr	r3, [pc, #316]	; (20001b70 <initSprites+0x170>)
20001a34:	637b      	str	r3, [r7, #52]	; 0x34
	load_sprite(pointer13, bird1_black_bits, bird1_black_width, bird1_black_height);
20001a36:	494f      	ldr	r1, [pc, #316]	; (20001b74 <initSprites+0x174>)
20001a38:	6b78      	ldr	r0, [r7, #52]	; 0x34
20001a3a:	2319      	movs	r3, #25
20001a3c:	2219      	movs	r2, #25
20001a3e:	f001 fccd 	bl	200033dc <load_sprite>
	bird1Black = pointer13;	
20001a42:	4b4d      	ldr	r3, [pc, #308]	; (20001b78 <initSprites+0x178>)
20001a44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
20001a46:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempBird2Light;
20001a48:	4b4c      	ldr	r3, [pc, #304]	; (20001b7c <initSprites+0x17c>)
20001a4a:	633b      	str	r3, [r7, #48]	; 0x30
	load_sprite(pointer14, bird2_light_bits, bird2_black_width, bird2_black_height);
20001a4c:	494c      	ldr	r1, [pc, #304]	; (20001b80 <initSprites+0x180>)
20001a4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
20001a50:	2319      	movs	r3, #25
20001a52:	2219      	movs	r2, #25
20001a54:	f001 fcc2 	bl	200033dc <load_sprite>
	bird2Light = pointer14;
20001a58:	4b4a      	ldr	r3, [pc, #296]	; (20001b84 <initSprites+0x184>)
20001a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20001a5c:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempBird2Gray;
20001a5e:	4b4a      	ldr	r3, [pc, #296]	; (20001b88 <initSprites+0x188>)
20001a60:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer15, bird2_gray_bits, bird2_black_width, bird2_black_height);
20001a62:	494a      	ldr	r1, [pc, #296]	; (20001b8c <initSprites+0x18c>)
20001a64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20001a66:	2319      	movs	r3, #25
20001a68:	2219      	movs	r2, #25
20001a6a:	f001 fcb7 	bl	200033dc <load_sprite>
	bird2Gray = pointer15;
20001a6e:	4b48      	ldr	r3, [pc, #288]	; (20001b90 <initSprites+0x190>)
20001a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20001a72:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempBird2Black;
20001a74:	4b47      	ldr	r3, [pc, #284]	; (20001b94 <initSprites+0x194>)
20001a76:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer16, bird2_black_bits, bird2_black_width, bird2_black_height);
20001a78:	4947      	ldr	r1, [pc, #284]	; (20001b98 <initSprites+0x198>)
20001a7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20001a7c:	2319      	movs	r3, #25
20001a7e:	2219      	movs	r2, #25
20001a80:	f001 fcac 	bl	200033dc <load_sprite>
	bird2Black = pointer16;
20001a84:	4b45      	ldr	r3, [pc, #276]	; (20001b9c <initSprites+0x19c>)
20001a86:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001a88:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempBird3Light;
20001a8a:	4b45      	ldr	r3, [pc, #276]	; (20001ba0 <initSprites+0x1a0>)
20001a8c:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(finalPointer, bird3_light_bits, bird3_black_width, bird3_black_height);
20001a8e:	4945      	ldr	r1, [pc, #276]	; (20001ba4 <initSprites+0x1a4>)
20001a90:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001a92:	2319      	movs	r3, #25
20001a94:	2219      	movs	r2, #25
20001a96:	f001 fca1 	bl	200033dc <load_sprite>
	bird3Light = finalPointer;
20001a9a:	4b43      	ldr	r3, [pc, #268]	; (20001ba8 <initSprites+0x1a8>)
20001a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001a9e:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempBird3Gray;
20001aa0:	4b42      	ldr	r3, [pc, #264]	; (20001bac <initSprites+0x1ac>)
20001aa2:	623b      	str	r3, [r7, #32]
	load_sprite(pointer17, bird3_gray_bits, bird3_black_width, bird3_black_height);
20001aa4:	4942      	ldr	r1, [pc, #264]	; (20001bb0 <initSprites+0x1b0>)
20001aa6:	6a38      	ldr	r0, [r7, #32]
20001aa8:	2319      	movs	r3, #25
20001aaa:	2219      	movs	r2, #25
20001aac:	f001 fc96 	bl	200033dc <load_sprite>
	bird3Gray = pointer17;
20001ab0:	4b40      	ldr	r3, [pc, #256]	; (20001bb4 <initSprites+0x1b4>)
20001ab2:	6a3a      	ldr	r2, [r7, #32]
20001ab4:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempBird3Black;
20001ab6:	4b40      	ldr	r3, [pc, #256]	; (20001bb8 <initSprites+0x1b8>)
20001ab8:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer18, bird3_black_bits, bird3_black_width, bird3_black_height);
20001aba:	4940      	ldr	r1, [pc, #256]	; (20001bbc <initSprites+0x1bc>)
20001abc:	69f8      	ldr	r0, [r7, #28]
20001abe:	2319      	movs	r3, #25
20001ac0:	2219      	movs	r2, #25
20001ac2:	f001 fc8b 	bl	200033dc <load_sprite>
	bird3Black = pointer18;	
20001ac6:	4b3e      	ldr	r3, [pc, #248]	; (20001bc0 <initSprites+0x1c0>)
20001ac8:	69fa      	ldr	r2, [r7, #28]
20001aca:	601a      	str	r2, [r3, #0]
	
	sprite *pointer19 = &tempBird4Light;
20001acc:	4b3d      	ldr	r3, [pc, #244]	; (20001bc4 <initSprites+0x1c4>)
20001ace:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer19, bird4_light_bits, bird4_black_width, bird4_black_height);
20001ad0:	493d      	ldr	r1, [pc, #244]	; (20001bc8 <initSprites+0x1c8>)
20001ad2:	69b8      	ldr	r0, [r7, #24]
20001ad4:	2319      	movs	r3, #25
20001ad6:	2219      	movs	r2, #25
20001ad8:	f001 fc80 	bl	200033dc <load_sprite>
	bird4Light = pointer19;
20001adc:	4b3b      	ldr	r3, [pc, #236]	; (20001bcc <initSprites+0x1cc>)
20001ade:	69ba      	ldr	r2, [r7, #24]
20001ae0:	601a      	str	r2, [r3, #0]
	sprite *pointer20 = &tempBird4Gray;
20001ae2:	4b3b      	ldr	r3, [pc, #236]	; (20001bd0 <initSprites+0x1d0>)
20001ae4:	617b      	str	r3, [r7, #20]
	load_sprite(pointer20, bird4_gray_bits, bird4_black_width, bird4_black_height);
20001ae6:	493b      	ldr	r1, [pc, #236]	; (20001bd4 <initSprites+0x1d4>)
20001ae8:	6978      	ldr	r0, [r7, #20]
20001aea:	2319      	movs	r3, #25
20001aec:	2219      	movs	r2, #25
20001aee:	f001 fc75 	bl	200033dc <load_sprite>
	bird4Gray = pointer20;
20001af2:	4b39      	ldr	r3, [pc, #228]	; (20001bd8 <initSprites+0x1d8>)
20001af4:	697a      	ldr	r2, [r7, #20]
20001af6:	601a      	str	r2, [r3, #0]
	sprite *pointer21 = &tempBird4Black;
20001af8:	4b38      	ldr	r3, [pc, #224]	; (20001bdc <initSprites+0x1dc>)
20001afa:	613b      	str	r3, [r7, #16]
	load_sprite(pointer21, bird4_black_bits, bird4_black_width, bird4_black_height);
20001afc:	4938      	ldr	r1, [pc, #224]	; (20001be0 <initSprites+0x1e0>)
20001afe:	6938      	ldr	r0, [r7, #16]
20001b00:	2319      	movs	r3, #25
20001b02:	2219      	movs	r2, #25
20001b04:	f001 fc6a 	bl	200033dc <load_sprite>
	bird4Black = pointer21;	
20001b08:	4b36      	ldr	r3, [pc, #216]	; (20001be4 <initSprites+0x1e4>)
20001b0a:	693a      	ldr	r2, [r7, #16]
20001b0c:	601a      	str	r2, [r3, #0]
	
	sprite *pointer22 = &tempBird5Light;
20001b0e:	4b36      	ldr	r3, [pc, #216]	; (20001be8 <initSprites+0x1e8>)
20001b10:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer22, bird5_light_bits, bird5_black_width, bird5_black_height);
20001b12:	4936      	ldr	r1, [pc, #216]	; (20001bec <initSprites+0x1ec>)
20001b14:	68f8      	ldr	r0, [r7, #12]
20001b16:	2319      	movs	r3, #25
20001b18:	2219      	movs	r2, #25
20001b1a:	f001 fc5f 	bl	200033dc <load_sprite>
	bird5Light = pointer22;
20001b1e:	4b34      	ldr	r3, [pc, #208]	; (20001bf0 <initSprites+0x1f0>)
20001b20:	68fa      	ldr	r2, [r7, #12]
20001b22:	601a      	str	r2, [r3, #0]
	sprite *pointer23 = &tempBird5Gray;
20001b24:	4b33      	ldr	r3, [pc, #204]	; (20001bf4 <initSprites+0x1f4>)
20001b26:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer23, bird5_gray_bits, bird5_black_width, bird5_black_height);
20001b28:	4933      	ldr	r1, [pc, #204]	; (20001bf8 <initSprites+0x1f8>)
20001b2a:	68b8      	ldr	r0, [r7, #8]
20001b2c:	2319      	movs	r3, #25
20001b2e:	2219      	movs	r2, #25
20001b30:	f001 fc54 	bl	200033dc <load_sprite>
	bird5Gray = pointer23;
20001b34:	4b31      	ldr	r3, [pc, #196]	; (20001bfc <initSprites+0x1fc>)
20001b36:	68ba      	ldr	r2, [r7, #8]
20001b38:	601a      	str	r2, [r3, #0]
	sprite *pointer24 = &tempBird5Black;
20001b3a:	4b31      	ldr	r3, [pc, #196]	; (20001c00 <initSprites+0x200>)
20001b3c:	607b      	str	r3, [r7, #4]
	load_sprite(pointer24, bird5_black_bits, bird5_black_width, bird5_black_height);
20001b3e:	4931      	ldr	r1, [pc, #196]	; (20001c04 <initSprites+0x204>)
20001b40:	6878      	ldr	r0, [r7, #4]
20001b42:	2319      	movs	r3, #25
20001b44:	2219      	movs	r2, #25
20001b46:	f001 fc49 	bl	200033dc <load_sprite>
	bird5Black = pointer24;
20001b4a:	4b2f      	ldr	r3, [pc, #188]	; (20001c08 <initSprites+0x208>)
20001b4c:	687a      	ldr	r2, [r7, #4]
20001b4e:	601a      	str	r2, [r3, #0]
}
20001b50:	46c0      	nop			; (mov r8, r8)
20001b52:	46bd      	mov	sp, r7
20001b54:	b010      	add	sp, #64	; 0x40
20001b56:	bd80      	pop	{r7, pc}
20001b58:	2000439c 	mulcs	r0, ip, r3
20001b5c:	20007d90 	mulcs	r0, r0, sp
20001b60:	200043a8 	andcs	r4, r0, r8, lsr #7
20001b64:	20004338 	andcs	r4, r0, r8, lsr r3
20001b68:	20007d2c 	andcs	r7, r0, ip, lsr #26
20001b6c:	200042b0 			; <UNDEFINED> instruction: 0x200042b0
20001b70:	20004328 	andcs	r4, r0, r8, lsr #6
20001b74:	20007cc8 	andcs	r7, r0, r8, asr #25
20001b78:	20004318 	andcs	r4, r0, r8, lsl r3
20001b7c:	200043ac 	andcs	r4, r0, ip, lsr #7
20001b80:	20007ebc 			; <UNDEFINED> instruction: 0x20007ebc
20001b84:	2000444c 	andcs	r4, r0, ip, asr #8
20001b88:	20004354 	andcs	r4, r0, r4, asr r3
20001b8c:	20007e58 	andcs	r7, r0, r8, asr lr
20001b90:	20004398 	mulcs	r0, r8, r3
20001b94:	20004434 	andcs	r4, r0, r4, lsr r4
20001b98:	20007df4 	strdcs	r7, [r0], -r4
20001b9c:	20004314 	andcs	r4, r0, r4, lsl r3
20001ba0:	200043d0 	ldrdcs	r4, [r0], -r0
20001ba4:	20007fe8 	andcs	r7, r0, r8, ror #31
20001ba8:	20004360 	andcs	r4, r0, r0, ror #6
20001bac:	200043dc 	ldrdcs	r4, [r0], -ip
20001bb0:	20007f84 	andcs	r7, r0, r4, lsl #31
20001bb4:	20004334 	andcs	r4, r0, r4, lsr r3
20001bb8:	2000438c 	andcs	r4, r0, ip, lsl #7
20001bbc:	20007f20 	andcs	r7, r0, r0, lsr #30
20001bc0:	2000430c 	andcs	r4, r0, ip, lsl #6
20001bc4:	200043c4 	andcs	r4, r0, r4, asr #7
20001bc8:	20008114 	andcs	r8, r0, r4, lsl r1
20001bcc:	200042ac 	andcs	r4, r0, ip, lsr #5
20001bd0:	20004440 	andcs	r4, r0, r0, asr #8
20001bd4:	200080b0 	strhcs	r8, [r0], -r0
20001bd8:	20004310 	andcs	r4, r0, r0, lsl r3
20001bdc:	200042c4 	andcs	r4, r0, r4, asr #5
20001be0:	2000804c 	andcs	r8, r0, ip, asr #32
20001be4:	20004430 	andcs	r4, r0, r0, lsr r4
20001be8:	20004348 	andcs	r4, r0, r8, asr #6
20001bec:	20008240 	andcs	r8, r0, r0, asr #4
20001bf0:	20004388 	andcs	r4, r0, r8, lsl #7
20001bf4:	20004364 	andcs	r4, r0, r4, ror #6
20001bf8:	200081dc 	ldrdcs	r8, [r0], -ip
20001bfc:	20004344 	andcs	r4, r0, r4, asr #6
20001c00:	20004370 	andcs	r4, r0, r0, ror r3
20001c04:	20008178 	andcs	r8, r0, r8, ror r1
20001c08:	200042c0 	andcs	r4, r0, r0, asr #5

20001c0c <init_bird>:
	
void init_bird( GameObject *birdObj ) {
20001c0c:	b590      	push	{r4, r7, lr}
20001c0e:	b083      	sub	sp, #12
20001c10:	af00      	add	r7, sp, #0
20001c12:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20001c14:	4b37      	ldr	r3, [pc, #220]	; (20001cf4 <init_bird+0xe8>)
20001c16:	681b      	ldr	r3, [r3, #0]
20001c18:	2b00      	cmp	r3, #0
20001c1a:	d057      	beq.n	20001ccc <init_bird+0xc0>
		initSprites();
20001c1c:	f7ff fef0 	bl	20001a00 <initSprites>
		firstTime = 0;			
20001c20:	4b34      	ldr	r3, [pc, #208]	; (20001cf4 <init_bird+0xe8>)
20001c22:	2200      	movs	r2, #0
20001c24:	601a      	str	r2, [r3, #0]

		birdImages[0] = bird1Image;
20001c26:	4b34      	ldr	r3, [pc, #208]	; (20001cf8 <init_bird+0xec>)
20001c28:	4a34      	ldr	r2, [pc, #208]	; (20001cfc <init_bird+0xf0>)
20001c2a:	ca13      	ldmia	r2!, {r0, r1, r4}
20001c2c:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[1] = bird2Image;
20001c2e:	4b32      	ldr	r3, [pc, #200]	; (20001cf8 <init_bird+0xec>)
20001c30:	4a33      	ldr	r2, [pc, #204]	; (20001d00 <init_bird+0xf4>)
20001c32:	330c      	adds	r3, #12
20001c34:	ca13      	ldmia	r2!, {r0, r1, r4}
20001c36:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[2] = bird3Image;
20001c38:	4b2f      	ldr	r3, [pc, #188]	; (20001cf8 <init_bird+0xec>)
20001c3a:	4a32      	ldr	r2, [pc, #200]	; (20001d04 <init_bird+0xf8>)
20001c3c:	3318      	adds	r3, #24
20001c3e:	ca13      	ldmia	r2!, {r0, r1, r4}
20001c40:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[3] = bird4Image;
20001c42:	4b2d      	ldr	r3, [pc, #180]	; (20001cf8 <init_bird+0xec>)
20001c44:	4a30      	ldr	r2, [pc, #192]	; (20001d08 <init_bird+0xfc>)
20001c46:	3324      	adds	r3, #36	; 0x24
20001c48:	ca13      	ldmia	r2!, {r0, r1, r4}
20001c4a:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[4] = bird5Image;
20001c4c:	4b2a      	ldr	r3, [pc, #168]	; (20001cf8 <init_bird+0xec>)
20001c4e:	4a2f      	ldr	r2, [pc, #188]	; (20001d0c <init_bird+0x100>)
20001c50:	3330      	adds	r3, #48	; 0x30
20001c52:	ca13      	ldmia	r2!, {r0, r1, r4}
20001c54:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[5] = bird6Image;
20001c56:	4b28      	ldr	r3, [pc, #160]	; (20001cf8 <init_bird+0xec>)
20001c58:	4a2d      	ldr	r2, [pc, #180]	; (20001d10 <init_bird+0x104>)
20001c5a:	333c      	adds	r3, #60	; 0x3c
20001c5c:	ca13      	ldmia	r2!, {r0, r1, r4}
20001c5e:	c313      	stmia	r3!, {r0, r1, r4}
//		birdImages[6] = bird7Image;
		//birdImages[7] = bird8Image;
		
		load_image(&birdImages[0], bird1Black, bird1Gray, bird1Light);
20001c60:	4b2c      	ldr	r3, [pc, #176]	; (20001d14 <init_bird+0x108>)
20001c62:	6819      	ldr	r1, [r3, #0]
20001c64:	4b2c      	ldr	r3, [pc, #176]	; (20001d18 <init_bird+0x10c>)
20001c66:	681a      	ldr	r2, [r3, #0]
20001c68:	4b2c      	ldr	r3, [pc, #176]	; (20001d1c <init_bird+0x110>)
20001c6a:	681b      	ldr	r3, [r3, #0]
20001c6c:	4822      	ldr	r0, [pc, #136]	; (20001cf8 <init_bird+0xec>)
20001c6e:	f001 fba1 	bl	200033b4 <load_image>
		load_image(&birdImages[1], bird2Black, bird2Gray, bird2Light);
20001c72:	4b2b      	ldr	r3, [pc, #172]	; (20001d20 <init_bird+0x114>)
20001c74:	6819      	ldr	r1, [r3, #0]
20001c76:	4b2b      	ldr	r3, [pc, #172]	; (20001d24 <init_bird+0x118>)
20001c78:	681a      	ldr	r2, [r3, #0]
20001c7a:	4b2b      	ldr	r3, [pc, #172]	; (20001d28 <init_bird+0x11c>)
20001c7c:	681b      	ldr	r3, [r3, #0]
20001c7e:	482b      	ldr	r0, [pc, #172]	; (20001d2c <init_bird+0x120>)
20001c80:	f001 fb98 	bl	200033b4 <load_image>
		load_image(&birdImages[2], bird3Black, bird3Gray, bird3Light);
20001c84:	4b2a      	ldr	r3, [pc, #168]	; (20001d30 <init_bird+0x124>)
20001c86:	6819      	ldr	r1, [r3, #0]
20001c88:	4b2a      	ldr	r3, [pc, #168]	; (20001d34 <init_bird+0x128>)
20001c8a:	681a      	ldr	r2, [r3, #0]
20001c8c:	4b2a      	ldr	r3, [pc, #168]	; (20001d38 <init_bird+0x12c>)
20001c8e:	681b      	ldr	r3, [r3, #0]
20001c90:	482a      	ldr	r0, [pc, #168]	; (20001d3c <init_bird+0x130>)
20001c92:	f001 fb8f 	bl	200033b4 <load_image>
		load_image(&birdImages[3], bird4Black, bird4Gray, bird4Light);
20001c96:	4b2a      	ldr	r3, [pc, #168]	; (20001d40 <init_bird+0x134>)
20001c98:	6819      	ldr	r1, [r3, #0]
20001c9a:	4b2a      	ldr	r3, [pc, #168]	; (20001d44 <init_bird+0x138>)
20001c9c:	681a      	ldr	r2, [r3, #0]
20001c9e:	4b2a      	ldr	r3, [pc, #168]	; (20001d48 <init_bird+0x13c>)
20001ca0:	681b      	ldr	r3, [r3, #0]
20001ca2:	482a      	ldr	r0, [pc, #168]	; (20001d4c <init_bird+0x140>)
20001ca4:	f001 fb86 	bl	200033b4 <load_image>
		load_image(&birdImages[4], bird5Black, bird5Gray, bird5Light);
20001ca8:	4b29      	ldr	r3, [pc, #164]	; (20001d50 <init_bird+0x144>)
20001caa:	6819      	ldr	r1, [r3, #0]
20001cac:	4b29      	ldr	r3, [pc, #164]	; (20001d54 <init_bird+0x148>)
20001cae:	681a      	ldr	r2, [r3, #0]
20001cb0:	4b29      	ldr	r3, [pc, #164]	; (20001d58 <init_bird+0x14c>)
20001cb2:	681b      	ldr	r3, [r3, #0]
20001cb4:	4829      	ldr	r0, [pc, #164]	; (20001d5c <init_bird+0x150>)
20001cb6:	f001 fb7d 	bl	200033b4 <load_image>
		
		//load_image(&birdImages[7], bird2Black, bird2Gray, bird2Light);
		load_image(&birdImages[5], bird3Black, bird3Gray, bird3Light);
20001cba:	4b1d      	ldr	r3, [pc, #116]	; (20001d30 <init_bird+0x124>)
20001cbc:	6819      	ldr	r1, [r3, #0]
20001cbe:	4b1d      	ldr	r3, [pc, #116]	; (20001d34 <init_bird+0x128>)
20001cc0:	681a      	ldr	r2, [r3, #0]
20001cc2:	4b1d      	ldr	r3, [pc, #116]	; (20001d38 <init_bird+0x12c>)
20001cc4:	681b      	ldr	r3, [r3, #0]
20001cc6:	4826      	ldr	r0, [pc, #152]	; (20001d60 <init_bird+0x154>)
20001cc8:	f001 fb74 	bl	200033b4 <load_image>
		//load_image(&birdImages[5], bird4Black, bird4Gray, bird4Light);
	}
	
	birdObj->images = birdImages;
20001ccc:	687b      	ldr	r3, [r7, #4]
20001cce:	4a0a      	ldr	r2, [pc, #40]	; (20001cf8 <init_bird+0xec>)
20001cd0:	601a      	str	r2, [r3, #0]

	birdObj->current_frame = 0;
20001cd2:	687b      	ldr	r3, [r7, #4]
20001cd4:	2200      	movs	r2, #0
20001cd6:	615a      	str	r2, [r3, #20]
	birdObj->n_frames = 6;
20001cd8:	687b      	ldr	r3, [r7, #4]
20001cda:	2206      	movs	r2, #6
20001cdc:	619a      	str	r2, [r3, #24]
	birdObj->animation_speed = 1;
20001cde:	687b      	ldr	r3, [r7, #4]
20001ce0:	2201      	movs	r2, #1
20001ce2:	61da      	str	r2, [r3, #28]
	birdObj->animation_counter = 0;
20001ce4:	687b      	ldr	r3, [r7, #4]
20001ce6:	2200      	movs	r2, #0
20001ce8:	621a      	str	r2, [r3, #32]
}
20001cea:	46c0      	nop			; (mov r8, r8)
20001cec:	46bd      	mov	sp, r7
20001cee:	b003      	add	sp, #12
20001cf0:	bd90      	pop	{r4, r7, pc}
20001cf2:	46c0      	nop			; (mov r8, r8)
20001cf4:	200082a4 	andcs	r8, r0, r4, lsr #5
20001cf8:	200043e8 	andcs	r4, r0, r8, ror #7
20001cfc:	20004300 	andcs	r4, r0, r0, lsl #6
20001d00:	200042d0 	ldrdcs	r4, [r0], -r0
20001d04:	200043b8 			; <UNDEFINED> instruction: 0x200043b8
20001d08:	2000431c 	andcs	r4, r0, ip, lsl r3
20001d0c:	2000437c 	andcs	r4, r0, ip, ror r3
20001d10:	200042b4 			; <UNDEFINED> instruction: 0x200042b4
20001d14:	20004318 	andcs	r4, r0, r8, lsl r3
20001d18:	200042b0 			; <UNDEFINED> instruction: 0x200042b0
20001d1c:	200043a8 	andcs	r4, r0, r8, lsr #7
20001d20:	20004314 	andcs	r4, r0, r4, lsl r3
20001d24:	20004398 	mulcs	r0, r8, r3
20001d28:	2000444c 	andcs	r4, r0, ip, asr #8
20001d2c:	200043f4 	strdcs	r4, [r0], -r4	; <UNPREDICTABLE>
20001d30:	2000430c 	andcs	r4, r0, ip, lsl #6
20001d34:	20004334 	andcs	r4, r0, r4, lsr r3
20001d38:	20004360 	andcs	r4, r0, r0, ror #6
20001d3c:	20004400 	andcs	r4, r0, r0, lsl #8
20001d40:	20004430 	andcs	r4, r0, r0, lsr r4
20001d44:	20004310 	andcs	r4, r0, r0, lsl r3
20001d48:	200042ac 	andcs	r4, r0, ip, lsr #5
20001d4c:	2000440c 	andcs	r4, r0, ip, lsl #8
20001d50:	200042c0 	andcs	r4, r0, r0, asr #5
20001d54:	20004344 	andcs	r4, r0, r4, asr #6
20001d58:	20004388 	andcs	r4, r0, r8, lsl #7
20001d5c:	20004418 	andcs	r4, r0, r8, lsl r4
20001d60:	20004424 	andcs	r4, r0, r4, lsr #8

20001d64 <initSprites>:
Image witch1Image;
Image witch2Image;
Image witch3Image;
Image witch4Image;
Image witchImages[4];
static void initSprites( void ) {	
20001d64:	b580      	push	{r7, lr}
20001d66:	b08a      	sub	sp, #40	; 0x28
20001d68:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempWitchLight;
20001d6a:	4b33      	ldr	r3, [pc, #204]	; (20001e38 <initSprites+0xd4>)
20001d6c:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer11, witch1_light_bits, witch1_black_width, witch1_black_height);
20001d6e:	4933      	ldr	r1, [pc, #204]	; (20001e3c <initSprites+0xd8>)
20001d70:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001d72:	2312      	movs	r3, #18
20001d74:	2212      	movs	r2, #18
20001d76:	f001 fb31 	bl	200033dc <load_sprite>
	witch1Light = pointer11;
20001d7a:	4b31      	ldr	r3, [pc, #196]	; (20001e40 <initSprites+0xdc>)
20001d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001d7e:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempWitchGray;
20001d80:	4b30      	ldr	r3, [pc, #192]	; (20001e44 <initSprites+0xe0>)
20001d82:	623b      	str	r3, [r7, #32]
	load_sprite(pointer12, witch1_gray_bits, witch1_black_width, witch1_black_height);
20001d84:	4930      	ldr	r1, [pc, #192]	; (20001e48 <initSprites+0xe4>)
20001d86:	6a38      	ldr	r0, [r7, #32]
20001d88:	2312      	movs	r3, #18
20001d8a:	2212      	movs	r2, #18
20001d8c:	f001 fb26 	bl	200033dc <load_sprite>
	witch1Gray = pointer12;
20001d90:	4b2e      	ldr	r3, [pc, #184]	; (20001e4c <initSprites+0xe8>)
20001d92:	6a3a      	ldr	r2, [r7, #32]
20001d94:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempWitchBlack;
20001d96:	4b2e      	ldr	r3, [pc, #184]	; (20001e50 <initSprites+0xec>)
20001d98:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer13, witch1_black_bits, witch1_black_width, witch1_black_height);
20001d9a:	492e      	ldr	r1, [pc, #184]	; (20001e54 <initSprites+0xf0>)
20001d9c:	69f8      	ldr	r0, [r7, #28]
20001d9e:	2312      	movs	r3, #18
20001da0:	2212      	movs	r2, #18
20001da2:	f001 fb1b 	bl	200033dc <load_sprite>
	witch1Black = pointer13;	
20001da6:	4b2c      	ldr	r3, [pc, #176]	; (20001e58 <initSprites+0xf4>)
20001da8:	69fa      	ldr	r2, [r7, #28]
20001daa:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempWitch2Light;
20001dac:	4b2b      	ldr	r3, [pc, #172]	; (20001e5c <initSprites+0xf8>)
20001dae:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer14, witch2_light_bits, witch2_black_width, witch2_black_height);
20001db0:	492b      	ldr	r1, [pc, #172]	; (20001e60 <initSprites+0xfc>)
20001db2:	69b8      	ldr	r0, [r7, #24]
20001db4:	2312      	movs	r3, #18
20001db6:	2212      	movs	r2, #18
20001db8:	f001 fb10 	bl	200033dc <load_sprite>
	witch2Light = pointer14;
20001dbc:	4b29      	ldr	r3, [pc, #164]	; (20001e64 <initSprites+0x100>)
20001dbe:	69ba      	ldr	r2, [r7, #24]
20001dc0:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempWitch2Gray;
20001dc2:	4b29      	ldr	r3, [pc, #164]	; (20001e68 <initSprites+0x104>)
20001dc4:	617b      	str	r3, [r7, #20]
	load_sprite(pointer15, witch2_gray_bits, witch2_black_width, witch2_black_height);
20001dc6:	4929      	ldr	r1, [pc, #164]	; (20001e6c <initSprites+0x108>)
20001dc8:	6978      	ldr	r0, [r7, #20]
20001dca:	2312      	movs	r3, #18
20001dcc:	2212      	movs	r2, #18
20001dce:	f001 fb05 	bl	200033dc <load_sprite>
	witch2Gray = pointer15;
20001dd2:	4b27      	ldr	r3, [pc, #156]	; (20001e70 <initSprites+0x10c>)
20001dd4:	697a      	ldr	r2, [r7, #20]
20001dd6:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempWitch2Black;
20001dd8:	4b26      	ldr	r3, [pc, #152]	; (20001e74 <initSprites+0x110>)
20001dda:	613b      	str	r3, [r7, #16]
	load_sprite(pointer16, witch2_black_bits, witch2_black_width, witch2_black_height);
20001ddc:	4926      	ldr	r1, [pc, #152]	; (20001e78 <initSprites+0x114>)
20001dde:	6938      	ldr	r0, [r7, #16]
20001de0:	2312      	movs	r3, #18
20001de2:	2212      	movs	r2, #18
20001de4:	f001 fafa 	bl	200033dc <load_sprite>
	witch2Black = pointer16;
20001de8:	4b24      	ldr	r3, [pc, #144]	; (20001e7c <initSprites+0x118>)
20001dea:	693a      	ldr	r2, [r7, #16]
20001dec:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempWitch3Light;
20001dee:	4b24      	ldr	r3, [pc, #144]	; (20001e80 <initSprites+0x11c>)
20001df0:	60fb      	str	r3, [r7, #12]
	load_sprite(finalPointer, witch3_light_bits, witch3_black_width, witch3_black_height);
20001df2:	4924      	ldr	r1, [pc, #144]	; (20001e84 <initSprites+0x120>)
20001df4:	68f8      	ldr	r0, [r7, #12]
20001df6:	2312      	movs	r3, #18
20001df8:	2212      	movs	r2, #18
20001dfa:	f001 faef 	bl	200033dc <load_sprite>
	witch3Light = finalPointer;
20001dfe:	4b22      	ldr	r3, [pc, #136]	; (20001e88 <initSprites+0x124>)
20001e00:	68fa      	ldr	r2, [r7, #12]
20001e02:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempWitch3Gray;
20001e04:	4b21      	ldr	r3, [pc, #132]	; (20001e8c <initSprites+0x128>)
20001e06:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer17, witch3_gray_bits, witch3_black_width, witch3_black_height);
20001e08:	4921      	ldr	r1, [pc, #132]	; (20001e90 <initSprites+0x12c>)
20001e0a:	68b8      	ldr	r0, [r7, #8]
20001e0c:	2312      	movs	r3, #18
20001e0e:	2212      	movs	r2, #18
20001e10:	f001 fae4 	bl	200033dc <load_sprite>
	witch3Gray = pointer17;
20001e14:	4b1f      	ldr	r3, [pc, #124]	; (20001e94 <initSprites+0x130>)
20001e16:	68ba      	ldr	r2, [r7, #8]
20001e18:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempWitch3Black;
20001e1a:	4b1f      	ldr	r3, [pc, #124]	; (20001e98 <initSprites+0x134>)
20001e1c:	607b      	str	r3, [r7, #4]
	load_sprite(pointer18, witch3_black_bits, witch3_black_width, witch3_black_height);
20001e1e:	491f      	ldr	r1, [pc, #124]	; (20001e9c <initSprites+0x138>)
20001e20:	6878      	ldr	r0, [r7, #4]
20001e22:	2312      	movs	r3, #18
20001e24:	2212      	movs	r2, #18
20001e26:	f001 fad9 	bl	200033dc <load_sprite>
	witch3Black = pointer18;	
20001e2a:	4b1d      	ldr	r3, [pc, #116]	; (20001ea0 <initSprites+0x13c>)
20001e2c:	687a      	ldr	r2, [r7, #4]
20001e2e:	601a      	str	r2, [r3, #0]
	
}
20001e30:	46c0      	nop			; (mov r8, r8)
20001e32:	46bd      	mov	sp, r7
20001e34:	b00a      	add	sp, #40	; 0x28
20001e36:	bd80      	pop	{r7, pc}
20001e38:	20004538 	andcs	r4, r0, r8, lsr r5
20001e3c:	20008318 	andcs	r8, r0, r8, lsl r3
20001e40:	20004550 	andcs	r4, r0, r0, asr r5
20001e44:	200044c8 	andcs	r4, r0, r8, asr #9
20001e48:	200082e0 	andcs	r8, r0, r0, ror #5
20001e4c:	20004450 	andcs	r4, r0, r0, asr r4
20001e50:	200044a0 	andcs	r4, r0, r0, lsr #9
20001e54:	200082a8 	andcs	r8, r0, r8, lsr #5
20001e58:	20004524 	andcs	r4, r0, r4, lsr #10
20001e5c:	20004544 	andcs	r4, r0, r4, asr #10
20001e60:	200083c0 	andcs	r8, r0, r0, asr #7
20001e64:	20004454 	andcs	r4, r0, r4, asr r4
20001e68:	200044e0 	andcs	r4, r0, r0, ror #9
20001e6c:	20008388 	andcs	r8, r0, r8, lsl #7
20001e70:	200044c4 	andcs	r4, r0, r4, asr #9
20001e74:	20004494 	mulcs	r0, r4, r4
20001e78:	20008350 	andcs	r8, r0, r0, asr r3
20001e7c:	20004560 	andcs	r4, r0, r0, ror #10
20001e80:	200044ac 	andcs	r4, r0, ip, lsr #9
20001e84:	20008468 	andcs	r8, r0, r8, ror #8
20001e88:	20004514 	andcs	r4, r0, r4, lsl r5
20001e8c:	20004518 	andcs	r4, r0, r8, lsl r5
20001e90:	20008430 	andcs	r8, r0, r0, lsr r4
20001e94:	20004528 	andcs	r4, r0, r8, lsr #10
20001e98:	200044d4 	ldrdcs	r4, [r0], -r4	; <UNPREDICTABLE>
20001e9c:	200083f8 	strdcs	r8, [r0], -r8	; <UNPREDICTABLE>
20001ea0:	200044ec 	andcs	r4, r0, ip, ror #9

20001ea4 <init_witch>:
	
void init_witch( GameObject *witchObj ) {
20001ea4:	b590      	push	{r4, r7, lr}
20001ea6:	b083      	sub	sp, #12
20001ea8:	af00      	add	r7, sp, #0
20001eaa:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20001eac:	4b29      	ldr	r3, [pc, #164]	; (20001f54 <init_witch+0xb0>)
20001eae:	681b      	ldr	r3, [r3, #0]
20001eb0:	2b00      	cmp	r3, #0
20001eb2:	d03b      	beq.n	20001f2c <init_witch+0x88>
		initSprites();
20001eb4:	f7ff ff56 	bl	20001d64 <initSprites>
		firstTime = 0;			
20001eb8:	4b26      	ldr	r3, [pc, #152]	; (20001f54 <init_witch+0xb0>)
20001eba:	2200      	movs	r2, #0
20001ebc:	601a      	str	r2, [r3, #0]

		witchImages[0] = witch1Image;
20001ebe:	4b26      	ldr	r3, [pc, #152]	; (20001f58 <init_witch+0xb4>)
20001ec0:	4a26      	ldr	r2, [pc, #152]	; (20001f5c <init_witch+0xb8>)
20001ec2:	ca13      	ldmia	r2!, {r0, r1, r4}
20001ec4:	c313      	stmia	r3!, {r0, r1, r4}
		witchImages[1] = witch2Image;
20001ec6:	4b24      	ldr	r3, [pc, #144]	; (20001f58 <init_witch+0xb4>)
20001ec8:	4a25      	ldr	r2, [pc, #148]	; (20001f60 <init_witch+0xbc>)
20001eca:	330c      	adds	r3, #12
20001ecc:	ca13      	ldmia	r2!, {r0, r1, r4}
20001ece:	c313      	stmia	r3!, {r0, r1, r4}
		witchImages[2] = witch3Image;
20001ed0:	4b21      	ldr	r3, [pc, #132]	; (20001f58 <init_witch+0xb4>)
20001ed2:	4a24      	ldr	r2, [pc, #144]	; (20001f64 <init_witch+0xc0>)
20001ed4:	3318      	adds	r3, #24
20001ed6:	ca13      	ldmia	r2!, {r0, r1, r4}
20001ed8:	c313      	stmia	r3!, {r0, r1, r4}
		witchImages[3] = witch4Image;
20001eda:	4b1f      	ldr	r3, [pc, #124]	; (20001f58 <init_witch+0xb4>)
20001edc:	4a22      	ldr	r2, [pc, #136]	; (20001f68 <init_witch+0xc4>)
20001ede:	3324      	adds	r3, #36	; 0x24
20001ee0:	ca13      	ldmia	r2!, {r0, r1, r4}
20001ee2:	c313      	stmia	r3!, {r0, r1, r4}
		
		
		load_image(&witchImages[0], witch1Black, witch1Gray, witch1Light);
20001ee4:	4b21      	ldr	r3, [pc, #132]	; (20001f6c <init_witch+0xc8>)
20001ee6:	6819      	ldr	r1, [r3, #0]
20001ee8:	4b21      	ldr	r3, [pc, #132]	; (20001f70 <init_witch+0xcc>)
20001eea:	681a      	ldr	r2, [r3, #0]
20001eec:	4b21      	ldr	r3, [pc, #132]	; (20001f74 <init_witch+0xd0>)
20001eee:	681b      	ldr	r3, [r3, #0]
20001ef0:	4819      	ldr	r0, [pc, #100]	; (20001f58 <init_witch+0xb4>)
20001ef2:	f001 fa5f 	bl	200033b4 <load_image>
		load_image(&witchImages[1], witch2Black, witch2Gray, witch2Light);
20001ef6:	4b20      	ldr	r3, [pc, #128]	; (20001f78 <init_witch+0xd4>)
20001ef8:	6819      	ldr	r1, [r3, #0]
20001efa:	4b20      	ldr	r3, [pc, #128]	; (20001f7c <init_witch+0xd8>)
20001efc:	681a      	ldr	r2, [r3, #0]
20001efe:	4b20      	ldr	r3, [pc, #128]	; (20001f80 <init_witch+0xdc>)
20001f00:	681b      	ldr	r3, [r3, #0]
20001f02:	4820      	ldr	r0, [pc, #128]	; (20001f84 <init_witch+0xe0>)
20001f04:	f001 fa56 	bl	200033b4 <load_image>
		load_image(&witchImages[2], witch3Black, witch3Gray, witch3Light);
20001f08:	4b1f      	ldr	r3, [pc, #124]	; (20001f88 <init_witch+0xe4>)
20001f0a:	6819      	ldr	r1, [r3, #0]
20001f0c:	4b1f      	ldr	r3, [pc, #124]	; (20001f8c <init_witch+0xe8>)
20001f0e:	681a      	ldr	r2, [r3, #0]
20001f10:	4b1f      	ldr	r3, [pc, #124]	; (20001f90 <init_witch+0xec>)
20001f12:	681b      	ldr	r3, [r3, #0]
20001f14:	481f      	ldr	r0, [pc, #124]	; (20001f94 <init_witch+0xf0>)
20001f16:	f001 fa4d 	bl	200033b4 <load_image>
		load_image(&witchImages[3], witch2Black, witch2Gray, witch2Light);
20001f1a:	4b17      	ldr	r3, [pc, #92]	; (20001f78 <init_witch+0xd4>)
20001f1c:	6819      	ldr	r1, [r3, #0]
20001f1e:	4b17      	ldr	r3, [pc, #92]	; (20001f7c <init_witch+0xd8>)
20001f20:	681a      	ldr	r2, [r3, #0]
20001f22:	4b17      	ldr	r3, [pc, #92]	; (20001f80 <init_witch+0xdc>)
20001f24:	681b      	ldr	r3, [r3, #0]
20001f26:	481c      	ldr	r0, [pc, #112]	; (20001f98 <init_witch+0xf4>)
20001f28:	f001 fa44 	bl	200033b4 <load_image>
		
	}
	
	witchObj->images = witchImages;
20001f2c:	687b      	ldr	r3, [r7, #4]
20001f2e:	4a0a      	ldr	r2, [pc, #40]	; (20001f58 <init_witch+0xb4>)
20001f30:	601a      	str	r2, [r3, #0]

	witchObj->current_frame = 0;
20001f32:	687b      	ldr	r3, [r7, #4]
20001f34:	2200      	movs	r2, #0
20001f36:	615a      	str	r2, [r3, #20]
	witchObj->n_frames = 4;
20001f38:	687b      	ldr	r3, [r7, #4]
20001f3a:	2204      	movs	r2, #4
20001f3c:	619a      	str	r2, [r3, #24]
	witchObj->animation_speed = 1;
20001f3e:	687b      	ldr	r3, [r7, #4]
20001f40:	2201      	movs	r2, #1
20001f42:	61da      	str	r2, [r3, #28]
	witchObj->animation_counter = 0;
20001f44:	687b      	ldr	r3, [r7, #4]
20001f46:	2200      	movs	r2, #0
20001f48:	621a      	str	r2, [r3, #32]
}
20001f4a:	46c0      	nop			; (mov r8, r8)
20001f4c:	46bd      	mov	sp, r7
20001f4e:	b003      	add	sp, #12
20001f50:	bd90      	pop	{r4, r7, pc}
20001f52:	46c0      	nop			; (mov r8, r8)
20001f54:	200084a0 	andcs	r8, r0, r0, lsr #9
20001f58:	20004458 	andcs	r4, r0, r8, asr r4
20001f5c:	2000452c 	andcs	r4, r0, ip, lsr #10
20001f60:	20004488 	andcs	r4, r0, r8, lsl #9
20001f64:	20004554 	andcs	r4, r0, r4, asr r5
20001f68:	200044b8 			; <UNDEFINED> instruction: 0x200044b8
20001f6c:	20004524 	andcs	r4, r0, r4, lsr #10
20001f70:	20004450 	andcs	r4, r0, r0, asr r4
20001f74:	20004550 	andcs	r4, r0, r0, asr r5
20001f78:	20004560 	andcs	r4, r0, r0, ror #10
20001f7c:	200044c4 	andcs	r4, r0, r4, asr #9
20001f80:	20004454 	andcs	r4, r0, r4, asr r4
20001f84:	20004464 	andcs	r4, r0, r4, ror #8
20001f88:	200044ec 	andcs	r4, r0, ip, ror #9
20001f8c:	20004528 	andcs	r4, r0, r8, lsr #10
20001f90:	20004514 	andcs	r4, r0, r4, lsl r5
20001f94:	20004470 	andcs	r4, r0, r0, ror r4
20001f98:	2000447c 	andcs	r4, r0, ip, ror r4

20001f9c <initSprites>:
Image DIP1Image;
Image DIP2Image;
Image DIP3Image;
Image DIP4Image;
Image DIPImages[4];
static void initSprites( void ) {	
20001f9c:	b580      	push	{r7, lr}
20001f9e:	b08a      	sub	sp, #40	; 0x28
20001fa0:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempDIPLight;
20001fa2:	4b33      	ldr	r3, [pc, #204]	; (20002070 <initSprites+0xd4>)
20001fa4:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer11, witch1_light_bits, witch1_black_width, witch1_black_height);
20001fa6:	4933      	ldr	r1, [pc, #204]	; (20002074 <initSprites+0xd8>)
20001fa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001faa:	2312      	movs	r3, #18
20001fac:	2212      	movs	r2, #18
20001fae:	f001 fa15 	bl	200033dc <load_sprite>
	DIP1Light = pointer11;
20001fb2:	4b31      	ldr	r3, [pc, #196]	; (20002078 <initSprites+0xdc>)
20001fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001fb6:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempDIPGray;
20001fb8:	4b30      	ldr	r3, [pc, #192]	; (2000207c <initSprites+0xe0>)
20001fba:	623b      	str	r3, [r7, #32]
	load_sprite(pointer12, witch1_gray_bits, witch1_black_width, witch1_black_height);
20001fbc:	4930      	ldr	r1, [pc, #192]	; (20002080 <initSprites+0xe4>)
20001fbe:	6a38      	ldr	r0, [r7, #32]
20001fc0:	2312      	movs	r3, #18
20001fc2:	2212      	movs	r2, #18
20001fc4:	f001 fa0a 	bl	200033dc <load_sprite>
	DIP1Gray = pointer12;
20001fc8:	4b2e      	ldr	r3, [pc, #184]	; (20002084 <initSprites+0xe8>)
20001fca:	6a3a      	ldr	r2, [r7, #32]
20001fcc:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempDIPBlack;
20001fce:	4b2e      	ldr	r3, [pc, #184]	; (20002088 <initSprites+0xec>)
20001fd0:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer13, witch1_black_bits, witch1_black_width, witch1_black_height);
20001fd2:	492e      	ldr	r1, [pc, #184]	; (2000208c <initSprites+0xf0>)
20001fd4:	69f8      	ldr	r0, [r7, #28]
20001fd6:	2312      	movs	r3, #18
20001fd8:	2212      	movs	r2, #18
20001fda:	f001 f9ff 	bl	200033dc <load_sprite>
	DIP1Black = pointer13;	
20001fde:	4b2c      	ldr	r3, [pc, #176]	; (20002090 <initSprites+0xf4>)
20001fe0:	69fa      	ldr	r2, [r7, #28]
20001fe2:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempDIP2Light;
20001fe4:	4b2b      	ldr	r3, [pc, #172]	; (20002094 <initSprites+0xf8>)
20001fe6:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer14, witch2_light_bits, witch2_black_width, witch2_black_height);
20001fe8:	492b      	ldr	r1, [pc, #172]	; (20002098 <initSprites+0xfc>)
20001fea:	69b8      	ldr	r0, [r7, #24]
20001fec:	2312      	movs	r3, #18
20001fee:	2212      	movs	r2, #18
20001ff0:	f001 f9f4 	bl	200033dc <load_sprite>
	DIP2Light = pointer14;
20001ff4:	4b29      	ldr	r3, [pc, #164]	; (2000209c <initSprites+0x100>)
20001ff6:	69ba      	ldr	r2, [r7, #24]
20001ff8:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempDIP2Gray;
20001ffa:	4b29      	ldr	r3, [pc, #164]	; (200020a0 <initSprites+0x104>)
20001ffc:	617b      	str	r3, [r7, #20]
	load_sprite(pointer15, witch2_gray_bits, witch2_black_width, witch2_black_height);
20001ffe:	4929      	ldr	r1, [pc, #164]	; (200020a4 <initSprites+0x108>)
20002000:	6978      	ldr	r0, [r7, #20]
20002002:	2312      	movs	r3, #18
20002004:	2212      	movs	r2, #18
20002006:	f001 f9e9 	bl	200033dc <load_sprite>
	DIP2Gray = pointer15;
2000200a:	4b27      	ldr	r3, [pc, #156]	; (200020a8 <initSprites+0x10c>)
2000200c:	697a      	ldr	r2, [r7, #20]
2000200e:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempDIP2Black;
20002010:	4b26      	ldr	r3, [pc, #152]	; (200020ac <initSprites+0x110>)
20002012:	613b      	str	r3, [r7, #16]
	load_sprite(pointer16, witch2_black_bits, witch2_black_width, witch2_black_height);
20002014:	4926      	ldr	r1, [pc, #152]	; (200020b0 <initSprites+0x114>)
20002016:	6938      	ldr	r0, [r7, #16]
20002018:	2312      	movs	r3, #18
2000201a:	2212      	movs	r2, #18
2000201c:	f001 f9de 	bl	200033dc <load_sprite>
	DIP2Black = pointer16;
20002020:	4b24      	ldr	r3, [pc, #144]	; (200020b4 <initSprites+0x118>)
20002022:	693a      	ldr	r2, [r7, #16]
20002024:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempDIP3Light;
20002026:	4b24      	ldr	r3, [pc, #144]	; (200020b8 <initSprites+0x11c>)
20002028:	60fb      	str	r3, [r7, #12]
	load_sprite(finalPointer, witch3_light_bits, witch3_black_width, witch3_black_height);
2000202a:	4924      	ldr	r1, [pc, #144]	; (200020bc <initSprites+0x120>)
2000202c:	68f8      	ldr	r0, [r7, #12]
2000202e:	2312      	movs	r3, #18
20002030:	2212      	movs	r2, #18
20002032:	f001 f9d3 	bl	200033dc <load_sprite>
	DIP3Light = finalPointer;
20002036:	4b22      	ldr	r3, [pc, #136]	; (200020c0 <initSprites+0x124>)
20002038:	68fa      	ldr	r2, [r7, #12]
2000203a:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempDIP3Gray;
2000203c:	4b21      	ldr	r3, [pc, #132]	; (200020c4 <initSprites+0x128>)
2000203e:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer17, witch3_gray_bits, witch3_black_width, witch3_black_height);
20002040:	4921      	ldr	r1, [pc, #132]	; (200020c8 <initSprites+0x12c>)
20002042:	68b8      	ldr	r0, [r7, #8]
20002044:	2312      	movs	r3, #18
20002046:	2212      	movs	r2, #18
20002048:	f001 f9c8 	bl	200033dc <load_sprite>
	DIP3Gray = pointer17;
2000204c:	4b1f      	ldr	r3, [pc, #124]	; (200020cc <initSprites+0x130>)
2000204e:	68ba      	ldr	r2, [r7, #8]
20002050:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempDIP3Black;
20002052:	4b1f      	ldr	r3, [pc, #124]	; (200020d0 <initSprites+0x134>)
20002054:	607b      	str	r3, [r7, #4]
	load_sprite(pointer18, witch3_black_bits, witch3_black_width, witch3_black_height);
20002056:	491f      	ldr	r1, [pc, #124]	; (200020d4 <initSprites+0x138>)
20002058:	6878      	ldr	r0, [r7, #4]
2000205a:	2312      	movs	r3, #18
2000205c:	2212      	movs	r2, #18
2000205e:	f001 f9bd 	bl	200033dc <load_sprite>
	DIP3Black = pointer18;	
20002062:	4b1d      	ldr	r3, [pc, #116]	; (200020d8 <initSprites+0x13c>)
20002064:	687a      	ldr	r2, [r7, #4]
20002066:	601a      	str	r2, [r3, #0]
	
}
20002068:	46c0      	nop			; (mov r8, r8)
2000206a:	46bd      	mov	sp, r7
2000206c:	b00a      	add	sp, #40	; 0x28
2000206e:	bd80      	pop	{r7, pc}
20002070:	200045ac 	andcs	r4, r0, ip, lsr #11
20002074:	20008514 	andcs	r8, r0, r4, lsl r5
20002078:	20004618 	andcs	r4, r0, r8, lsl r6
2000207c:	2000466c 	andcs	r4, r0, ip, ror #12
20002080:	200084dc 	ldrdcs	r8, [r0], -ip
20002084:	20004640 	andcs	r4, r0, r0, asr #12
20002088:	20004634 	andcs	r4, r0, r4, lsr r6
2000208c:	200084a4 	andcs	r8, r0, r4, lsr #9
20002090:	200045a8 	andcs	r4, r0, r8, lsr #11
20002094:	20004660 	andcs	r4, r0, r0, ror #12
20002098:	200085bc 			; <UNDEFINED> instruction: 0x200085bc
2000209c:	2000461c 	andcs	r4, r0, ip, lsl r6
200020a0:	20004598 	mulcs	r0, r8, r5
200020a4:	20008584 	andcs	r8, r0, r4, lsl #11
200020a8:	20004594 	mulcs	r0, r4, r5
200020ac:	200045f4 	strdcs	r4, [r0], -r4	; <UNPREDICTABLE>
200020b0:	2000854c 	andcs	r8, r0, ip, asr #10
200020b4:	20004624 	andcs	r4, r0, r4, lsr #12
200020b8:	200045b8 			; <UNDEFINED> instruction: 0x200045b8
200020bc:	20008664 	andcs	r8, r0, r4, ror #12
200020c0:	20004620 	andcs	r4, r0, r0, lsr #12
200020c4:	20004628 	andcs	r4, r0, r8, lsr #12
200020c8:	2000862c 	andcs	r8, r0, ip, lsr #12
200020cc:	20004650 	andcs	r4, r0, r0, asr r6
200020d0:	20004644 	andcs	r4, r0, r4, asr #12
200020d4:	200085f4 	strdcs	r8, [r0], -r4
200020d8:	200045a4 	andcs	r4, r0, r4, lsr #11

200020dc <init_DIP>:
	
void init_DIP( GameObject *DIPObj ) {
200020dc:	b590      	push	{r4, r7, lr}
200020de:	b083      	sub	sp, #12
200020e0:	af00      	add	r7, sp, #0
200020e2:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
200020e4:	4b29      	ldr	r3, [pc, #164]	; (2000218c <init_DIP+0xb0>)
200020e6:	681b      	ldr	r3, [r3, #0]
200020e8:	2b00      	cmp	r3, #0
200020ea:	d03b      	beq.n	20002164 <init_DIP+0x88>
		initSprites();
200020ec:	f7ff ff56 	bl	20001f9c <initSprites>
		firstTime = 0;			
200020f0:	4b26      	ldr	r3, [pc, #152]	; (2000218c <init_DIP+0xb0>)
200020f2:	2200      	movs	r2, #0
200020f4:	601a      	str	r2, [r3, #0]

		DIPImages[0] = DIP1Image;
200020f6:	4b26      	ldr	r3, [pc, #152]	; (20002190 <init_DIP+0xb4>)
200020f8:	4a26      	ldr	r2, [pc, #152]	; (20002194 <init_DIP+0xb8>)
200020fa:	ca13      	ldmia	r2!, {r0, r1, r4}
200020fc:	c313      	stmia	r3!, {r0, r1, r4}
		DIPImages[1] = DIP2Image;
200020fe:	4b24      	ldr	r3, [pc, #144]	; (20002190 <init_DIP+0xb4>)
20002100:	4a25      	ldr	r2, [pc, #148]	; (20002198 <init_DIP+0xbc>)
20002102:	330c      	adds	r3, #12
20002104:	ca13      	ldmia	r2!, {r0, r1, r4}
20002106:	c313      	stmia	r3!, {r0, r1, r4}
		DIPImages[2] = DIP3Image;
20002108:	4b21      	ldr	r3, [pc, #132]	; (20002190 <init_DIP+0xb4>)
2000210a:	4a24      	ldr	r2, [pc, #144]	; (2000219c <init_DIP+0xc0>)
2000210c:	3318      	adds	r3, #24
2000210e:	ca13      	ldmia	r2!, {r0, r1, r4}
20002110:	c313      	stmia	r3!, {r0, r1, r4}
		DIPImages[3] = DIP4Image;
20002112:	4b1f      	ldr	r3, [pc, #124]	; (20002190 <init_DIP+0xb4>)
20002114:	4a22      	ldr	r2, [pc, #136]	; (200021a0 <init_DIP+0xc4>)
20002116:	3324      	adds	r3, #36	; 0x24
20002118:	ca13      	ldmia	r2!, {r0, r1, r4}
2000211a:	c313      	stmia	r3!, {r0, r1, r4}
		
		
		load_image(&DIPImages[0], DIP1Black, DIP1Light, DIP1Gray);
2000211c:	4b21      	ldr	r3, [pc, #132]	; (200021a4 <init_DIP+0xc8>)
2000211e:	6819      	ldr	r1, [r3, #0]
20002120:	4b21      	ldr	r3, [pc, #132]	; (200021a8 <init_DIP+0xcc>)
20002122:	681a      	ldr	r2, [r3, #0]
20002124:	4b21      	ldr	r3, [pc, #132]	; (200021ac <init_DIP+0xd0>)
20002126:	681b      	ldr	r3, [r3, #0]
20002128:	4819      	ldr	r0, [pc, #100]	; (20002190 <init_DIP+0xb4>)
2000212a:	f001 f943 	bl	200033b4 <load_image>
		load_image(&DIPImages[1], DIP2Black, DIP2Light, DIP2Gray);
2000212e:	4b20      	ldr	r3, [pc, #128]	; (200021b0 <init_DIP+0xd4>)
20002130:	6819      	ldr	r1, [r3, #0]
20002132:	4b20      	ldr	r3, [pc, #128]	; (200021b4 <init_DIP+0xd8>)
20002134:	681a      	ldr	r2, [r3, #0]
20002136:	4b20      	ldr	r3, [pc, #128]	; (200021b8 <init_DIP+0xdc>)
20002138:	681b      	ldr	r3, [r3, #0]
2000213a:	4820      	ldr	r0, [pc, #128]	; (200021bc <init_DIP+0xe0>)
2000213c:	f001 f93a 	bl	200033b4 <load_image>
		load_image(&DIPImages[2], DIP3Black, DIP3Light, DIP3Gray);
20002140:	4b1f      	ldr	r3, [pc, #124]	; (200021c0 <init_DIP+0xe4>)
20002142:	6819      	ldr	r1, [r3, #0]
20002144:	4b1f      	ldr	r3, [pc, #124]	; (200021c4 <init_DIP+0xe8>)
20002146:	681a      	ldr	r2, [r3, #0]
20002148:	4b1f      	ldr	r3, [pc, #124]	; (200021c8 <init_DIP+0xec>)
2000214a:	681b      	ldr	r3, [r3, #0]
2000214c:	481f      	ldr	r0, [pc, #124]	; (200021cc <init_DIP+0xf0>)
2000214e:	f001 f931 	bl	200033b4 <load_image>
		load_image(&DIPImages[3], DIP2Black, DIP2Light, DIP2Gray);
20002152:	4b17      	ldr	r3, [pc, #92]	; (200021b0 <init_DIP+0xd4>)
20002154:	6819      	ldr	r1, [r3, #0]
20002156:	4b17      	ldr	r3, [pc, #92]	; (200021b4 <init_DIP+0xd8>)
20002158:	681a      	ldr	r2, [r3, #0]
2000215a:	4b17      	ldr	r3, [pc, #92]	; (200021b8 <init_DIP+0xdc>)
2000215c:	681b      	ldr	r3, [r3, #0]
2000215e:	481c      	ldr	r0, [pc, #112]	; (200021d0 <init_DIP+0xf4>)
20002160:	f001 f928 	bl	200033b4 <load_image>
		
	}
	
	DIPObj->images = DIPImages;
20002164:	687b      	ldr	r3, [r7, #4]
20002166:	4a0a      	ldr	r2, [pc, #40]	; (20002190 <init_DIP+0xb4>)
20002168:	601a      	str	r2, [r3, #0]

	DIPObj->current_frame = 0;
2000216a:	687b      	ldr	r3, [r7, #4]
2000216c:	2200      	movs	r2, #0
2000216e:	615a      	str	r2, [r3, #20]
	DIPObj->n_frames = 4;
20002170:	687b      	ldr	r3, [r7, #4]
20002172:	2204      	movs	r2, #4
20002174:	619a      	str	r2, [r3, #24]
	DIPObj->animation_speed = 1;
20002176:	687b      	ldr	r3, [r7, #4]
20002178:	2201      	movs	r2, #1
2000217a:	61da      	str	r2, [r3, #28]
	DIPObj->animation_counter = 0;
2000217c:	687b      	ldr	r3, [r7, #4]
2000217e:	2200      	movs	r2, #0
20002180:	621a      	str	r2, [r3, #32]
}
20002182:	46c0      	nop			; (mov r8, r8)
20002184:	46bd      	mov	sp, r7
20002186:	b003      	add	sp, #12
20002188:	bd90      	pop	{r4, r7, pc}
2000218a:	46c0      	nop			; (mov r8, r8)
2000218c:	2000869c 	mulcs	r0, ip, r6
20002190:	200045c4 	andcs	r4, r0, r4, asr #11
20002194:	2000460c 	andcs	r4, r0, ip, lsl #12
20002198:	20004588 	andcs	r4, r0, r8, lsl #11
2000219c:	20004600 	andcs	r4, r0, r0, lsl #12
200021a0:	20004654 	andcs	r4, r0, r4, asr r6
200021a4:	200045a8 	andcs	r4, r0, r8, lsr #11
200021a8:	20004618 	andcs	r4, r0, r8, lsl r6
200021ac:	20004640 	andcs	r4, r0, r0, asr #12
200021b0:	20004624 	andcs	r4, r0, r4, lsr #12
200021b4:	2000461c 	andcs	r4, r0, ip, lsl r6
200021b8:	20004594 	mulcs	r0, r4, r5
200021bc:	200045d0 	ldrdcs	r4, [r0], -r0
200021c0:	200045a4 	andcs	r4, r0, r4, lsr #11
200021c4:	20004620 	andcs	r4, r0, r0, lsr #12
200021c8:	20004650 	andcs	r4, r0, r0, asr r6
200021cc:	200045dc 	ldrdcs	r4, [r0], -ip
200021d0:	200045e8 	andcs	r4, r0, r8, ror #11

200021d4 <setPlayerPosition>:

static int playerPositionX = 0;
static int playerPositionY = 0;

void setPlayerPosition(int x, int y){
200021d4:	b580      	push	{r7, lr}
200021d6:	b082      	sub	sp, #8
200021d8:	af00      	add	r7, sp, #0
200021da:	6078      	str	r0, [r7, #4]
200021dc:	6039      	str	r1, [r7, #0]
	playerPositionX = x;
200021de:	4b05      	ldr	r3, [pc, #20]	; (200021f4 <setPlayerPosition+0x20>)
200021e0:	687a      	ldr	r2, [r7, #4]
200021e2:	601a      	str	r2, [r3, #0]
	playerPositionY = y;
200021e4:	4b04      	ldr	r3, [pc, #16]	; (200021f8 <setPlayerPosition+0x24>)
200021e6:	683a      	ldr	r2, [r7, #0]
200021e8:	601a      	str	r2, [r3, #0]
}
200021ea:	46c0      	nop			; (mov r8, r8)
200021ec:	46bd      	mov	sp, r7
200021ee:	b002      	add	sp, #8
200021f0:	bd80      	pop	{r7, pc}
200021f2:	46c0      	nop			; (mov r8, r8)
200021f4:	20003ef0 	strdcs	r3, [r0], -r0
200021f8:	20003ef4 	strdcs	r3, [r0], -r4

200021fc <DIPUpdate>:


void DIPUpdate(GameObject *this) {
200021fc:	b580      	push	{r7, lr}
200021fe:	b082      	sub	sp, #8
20002200:	af00      	add	r7, sp, #0
20002202:	6078      	str	r0, [r7, #4]
	gameObjectUpdate(this);
20002204:	687b      	ldr	r3, [r7, #4]
20002206:	0018      	movs	r0, r3
20002208:	f7ff f998 	bl	2000153c <gameObjectUpdate>
	static int counter = 0;
	static int direction = -1;
	counter++;
2000220c:	4b28      	ldr	r3, [pc, #160]	; (200022b0 <DIPUpdate+0xb4>)
2000220e:	681b      	ldr	r3, [r3, #0]
20002210:	1c5a      	adds	r2, r3, #1
20002212:	4b27      	ldr	r3, [pc, #156]	; (200022b0 <DIPUpdate+0xb4>)
20002214:	601a      	str	r2, [r3, #0]
	
	if (!read_DIL_single(LIGHT_TRIGGER)){ // Only move if the light is off
20002216:	2006      	movs	r0, #6
20002218:	f001 f910 	bl	2000343c <read_DIL_single>
2000221c:	1e03      	subs	r3, r0, #0
2000221e:	d143      	bne.n	200022a8 <DIPUpdate+0xac>
		
		if (this->yPos >= playerPositionY || (playerPositionX + DIP_WIDTH >= this->xPos && playerPositionX <= this->xPos + DIP_WIDTH )) { // Move faster if player is below or on the same level
20002220:	687b      	ldr	r3, [r7, #4]
20002222:	689a      	ldr	r2, [r3, #8]
20002224:	4b23      	ldr	r3, [pc, #140]	; (200022b4 <DIPUpdate+0xb8>)
20002226:	681b      	ldr	r3, [r3, #0]
20002228:	429a      	cmp	r2, r3
2000222a:	da0f      	bge.n	2000224c <DIPUpdate+0x50>
2000222c:	4b22      	ldr	r3, [pc, #136]	; (200022b8 <DIPUpdate+0xbc>)
2000222e:	681b      	ldr	r3, [r3, #0]
20002230:	3312      	adds	r3, #18
20002232:	001a      	movs	r2, r3
20002234:	687b      	ldr	r3, [r7, #4]
20002236:	685b      	ldr	r3, [r3, #4]
20002238:	429a      	cmp	r2, r3
2000223a:	db12      	blt.n	20002262 <DIPUpdate+0x66>
2000223c:	687b      	ldr	r3, [r7, #4]
2000223e:	685b      	ldr	r3, [r3, #4]
20002240:	3312      	adds	r3, #18
20002242:	001a      	movs	r2, r3
20002244:	4b1c      	ldr	r3, [pc, #112]	; (200022b8 <DIPUpdate+0xbc>)
20002246:	681b      	ldr	r3, [r3, #0]
20002248:	429a      	cmp	r2, r3
2000224a:	db0a      	blt.n	20002262 <DIPUpdate+0x66>
			this->xPos += direction*3;
2000224c:	687b      	ldr	r3, [r7, #4]
2000224e:	6859      	ldr	r1, [r3, #4]
20002250:	4b1a      	ldr	r3, [pc, #104]	; (200022bc <DIPUpdate+0xc0>)
20002252:	681a      	ldr	r2, [r3, #0]
20002254:	0013      	movs	r3, r2
20002256:	005b      	lsls	r3, r3, #1
20002258:	189b      	adds	r3, r3, r2
2000225a:	18ca      	adds	r2, r1, r3
2000225c:	687b      	ldr	r3, [r7, #4]
2000225e:	605a      	str	r2, [r3, #4]
20002260:	e012      	b.n	20002288 <DIPUpdate+0x8c>
		} else {
			this->xPos += (counter % 2)*direction;
20002262:	687b      	ldr	r3, [r7, #4]
20002264:	685a      	ldr	r2, [r3, #4]
20002266:	4b12      	ldr	r3, [pc, #72]	; (200022b0 <DIPUpdate+0xb4>)
20002268:	681b      	ldr	r3, [r3, #0]
2000226a:	4915      	ldr	r1, [pc, #84]	; (200022c0 <DIPUpdate+0xc4>)
2000226c:	400b      	ands	r3, r1
2000226e:	d504      	bpl.n	2000227a <DIPUpdate+0x7e>
20002270:	3b01      	subs	r3, #1
20002272:	2102      	movs	r1, #2
20002274:	4249      	negs	r1, r1
20002276:	430b      	orrs	r3, r1
20002278:	3301      	adds	r3, #1
2000227a:	0019      	movs	r1, r3
2000227c:	4b0f      	ldr	r3, [pc, #60]	; (200022bc <DIPUpdate+0xc0>)
2000227e:	681b      	ldr	r3, [r3, #0]
20002280:	434b      	muls	r3, r1
20002282:	18d2      	adds	r2, r2, r3
20002284:	687b      	ldr	r3, [r7, #4]
20002286:	605a      	str	r2, [r3, #4]
		}
		
		if(this->xPos > RIGHT_POINT) {
20002288:	687b      	ldr	r3, [r7, #4]
2000228a:	685b      	ldr	r3, [r3, #4]
2000228c:	2b6b      	cmp	r3, #107	; 0x6b
2000228e:	dd04      	ble.n	2000229a <DIPUpdate+0x9e>
			direction = -1;
20002290:	4b0a      	ldr	r3, [pc, #40]	; (200022bc <DIPUpdate+0xc0>)
20002292:	2201      	movs	r2, #1
20002294:	4252      	negs	r2, r2
20002296:	601a      	str	r2, [r3, #0]
		} else if(this->xPos < LEFT_POINT) {
			direction = 1;
		}
	}
}
20002298:	e006      	b.n	200022a8 <DIPUpdate+0xac>
		} else if(this->xPos < LEFT_POINT) {
2000229a:	687b      	ldr	r3, [r7, #4]
2000229c:	685b      	ldr	r3, [r3, #4]
2000229e:	2b2d      	cmp	r3, #45	; 0x2d
200022a0:	dc02      	bgt.n	200022a8 <DIPUpdate+0xac>
			direction = 1;
200022a2:	4b06      	ldr	r3, [pc, #24]	; (200022bc <DIPUpdate+0xc0>)
200022a4:	2201      	movs	r2, #1
200022a6:	601a      	str	r2, [r3, #0]
}
200022a8:	46c0      	nop			; (mov r8, r8)
200022aa:	46bd      	mov	sp, r7
200022ac:	b002      	add	sp, #8
200022ae:	bd80      	pop	{r7, pc}
200022b0:	20003ef8 	strdcs	r3, [r0], -r8
200022b4:	20003ef4 	strdcs	r3, [r0], -r4
200022b8:	20003ef0 	strdcs	r3, [r0], -r0
200022bc:	200086a0 	andcs	r8, r0, r0, lsr #13
200022c0:	80000001 	andhi	r0, r0, r1

200022c4 <initSprites>:
Image flame1Image;
Image flame2Image;
Image flame3Image;
Image flame4Image;
Image flameImages[4];
static void initSprites( void ) {	
200022c4:	b580      	push	{r7, lr}
200022c6:	b08c      	sub	sp, #48	; 0x30
200022c8:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempFlameLight;
200022ca:	4b44      	ldr	r3, [pc, #272]	; (200023dc <initSprites+0x118>)
200022cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer11, flame1_light_bits, flame1_black_width, flame1_black_height);
200022ce:	4944      	ldr	r1, [pc, #272]	; (200023e0 <initSprites+0x11c>)
200022d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
200022d2:	2327      	movs	r3, #39	; 0x27
200022d4:	2211      	movs	r2, #17
200022d6:	f001 f881 	bl	200033dc <load_sprite>
	flame1Light = pointer11;
200022da:	4b42      	ldr	r3, [pc, #264]	; (200023e4 <initSprites+0x120>)
200022dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
200022de:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempFlameGray;
200022e0:	4b41      	ldr	r3, [pc, #260]	; (200023e8 <initSprites+0x124>)
200022e2:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer12, flame1_gray_bits, flame1_black_width, flame1_black_height);
200022e4:	4941      	ldr	r1, [pc, #260]	; (200023ec <initSprites+0x128>)
200022e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
200022e8:	2327      	movs	r3, #39	; 0x27
200022ea:	2211      	movs	r2, #17
200022ec:	f001 f876 	bl	200033dc <load_sprite>
	flame1Gray = pointer12;
200022f0:	4b3f      	ldr	r3, [pc, #252]	; (200023f0 <initSprites+0x12c>)
200022f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
200022f4:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempFlameBlack;
200022f6:	4b3f      	ldr	r3, [pc, #252]	; (200023f4 <initSprites+0x130>)
200022f8:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer13, flame1_black_bits, flame1_black_width, flame1_black_height);
200022fa:	493f      	ldr	r1, [pc, #252]	; (200023f8 <initSprites+0x134>)
200022fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
200022fe:	2327      	movs	r3, #39	; 0x27
20002300:	2211      	movs	r2, #17
20002302:	f001 f86b 	bl	200033dc <load_sprite>
	flame1Black = pointer13;	
20002306:	4b3d      	ldr	r3, [pc, #244]	; (200023fc <initSprites+0x138>)
20002308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000230a:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempFlame2Light;
2000230c:	4b3c      	ldr	r3, [pc, #240]	; (20002400 <initSprites+0x13c>)
2000230e:	623b      	str	r3, [r7, #32]
	load_sprite(pointer14, flame2_light_bits, flame2_black_width, flame2_black_height);
20002310:	493c      	ldr	r1, [pc, #240]	; (20002404 <initSprites+0x140>)
20002312:	6a38      	ldr	r0, [r7, #32]
20002314:	2327      	movs	r3, #39	; 0x27
20002316:	2211      	movs	r2, #17
20002318:	f001 f860 	bl	200033dc <load_sprite>
	flame2Light = pointer14;
2000231c:	4b3a      	ldr	r3, [pc, #232]	; (20002408 <initSprites+0x144>)
2000231e:	6a3a      	ldr	r2, [r7, #32]
20002320:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempFlame2Gray;
20002322:	4b3a      	ldr	r3, [pc, #232]	; (2000240c <initSprites+0x148>)
20002324:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer15, flame2_gray_bits, flame2_black_width, flame2_black_height);
20002326:	493a      	ldr	r1, [pc, #232]	; (20002410 <initSprites+0x14c>)
20002328:	69f8      	ldr	r0, [r7, #28]
2000232a:	2327      	movs	r3, #39	; 0x27
2000232c:	2211      	movs	r2, #17
2000232e:	f001 f855 	bl	200033dc <load_sprite>
	flame2Gray = pointer15;
20002332:	4b38      	ldr	r3, [pc, #224]	; (20002414 <initSprites+0x150>)
20002334:	69fa      	ldr	r2, [r7, #28]
20002336:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempFlame2Black;
20002338:	4b37      	ldr	r3, [pc, #220]	; (20002418 <initSprites+0x154>)
2000233a:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer16, flame2_black_bits, flame2_black_width, flame2_black_height);
2000233c:	4937      	ldr	r1, [pc, #220]	; (2000241c <initSprites+0x158>)
2000233e:	69b8      	ldr	r0, [r7, #24]
20002340:	2327      	movs	r3, #39	; 0x27
20002342:	2211      	movs	r2, #17
20002344:	f001 f84a 	bl	200033dc <load_sprite>
	flame2Black = pointer16;
20002348:	4b35      	ldr	r3, [pc, #212]	; (20002420 <initSprites+0x15c>)
2000234a:	69ba      	ldr	r2, [r7, #24]
2000234c:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempFlame3Light;
2000234e:	4b35      	ldr	r3, [pc, #212]	; (20002424 <initSprites+0x160>)
20002350:	617b      	str	r3, [r7, #20]
	load_sprite(finalPointer, flame3_light_bits, flame3_black_width, flame3_black_height);
20002352:	4935      	ldr	r1, [pc, #212]	; (20002428 <initSprites+0x164>)
20002354:	6978      	ldr	r0, [r7, #20]
20002356:	2327      	movs	r3, #39	; 0x27
20002358:	2211      	movs	r2, #17
2000235a:	f001 f83f 	bl	200033dc <load_sprite>
	flame3Light = finalPointer;
2000235e:	4b33      	ldr	r3, [pc, #204]	; (2000242c <initSprites+0x168>)
20002360:	697a      	ldr	r2, [r7, #20]
20002362:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempFlame3Gray;
20002364:	4b32      	ldr	r3, [pc, #200]	; (20002430 <initSprites+0x16c>)
20002366:	613b      	str	r3, [r7, #16]
	load_sprite(pointer17, flame3_gray_bits, flame3_black_width, flame3_black_height);
20002368:	4932      	ldr	r1, [pc, #200]	; (20002434 <initSprites+0x170>)
2000236a:	6938      	ldr	r0, [r7, #16]
2000236c:	2327      	movs	r3, #39	; 0x27
2000236e:	2211      	movs	r2, #17
20002370:	f001 f834 	bl	200033dc <load_sprite>
	flame3Gray = pointer17;
20002374:	4b30      	ldr	r3, [pc, #192]	; (20002438 <initSprites+0x174>)
20002376:	693a      	ldr	r2, [r7, #16]
20002378:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempFlame3Black;
2000237a:	4b30      	ldr	r3, [pc, #192]	; (2000243c <initSprites+0x178>)
2000237c:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer18, flame3_black_bits, flame3_black_width, flame3_black_height);
2000237e:	4930      	ldr	r1, [pc, #192]	; (20002440 <initSprites+0x17c>)
20002380:	68f8      	ldr	r0, [r7, #12]
20002382:	2327      	movs	r3, #39	; 0x27
20002384:	2211      	movs	r2, #17
20002386:	f001 f829 	bl	200033dc <load_sprite>
	flame3Black = pointer18;	
2000238a:	4b2e      	ldr	r3, [pc, #184]	; (20002444 <initSprites+0x180>)
2000238c:	68fa      	ldr	r2, [r7, #12]
2000238e:	601a      	str	r2, [r3, #0]
	
	sprite *pointer19 = &tempFlame4Light;
20002390:	4b2d      	ldr	r3, [pc, #180]	; (20002448 <initSprites+0x184>)
20002392:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer19, flame4_light_bits, flame4_black_width, flame4_black_height);
20002394:	492d      	ldr	r1, [pc, #180]	; (2000244c <initSprites+0x188>)
20002396:	68b8      	ldr	r0, [r7, #8]
20002398:	2327      	movs	r3, #39	; 0x27
2000239a:	2211      	movs	r2, #17
2000239c:	f001 f81e 	bl	200033dc <load_sprite>
	flame4Light = pointer19;
200023a0:	4b2b      	ldr	r3, [pc, #172]	; (20002450 <initSprites+0x18c>)
200023a2:	68ba      	ldr	r2, [r7, #8]
200023a4:	601a      	str	r2, [r3, #0]
	sprite *pointer20 = &tempFlame4Gray;
200023a6:	4b2b      	ldr	r3, [pc, #172]	; (20002454 <initSprites+0x190>)
200023a8:	607b      	str	r3, [r7, #4]
	load_sprite(pointer20, flame4_gray_bits, flame4_black_width, flame4_black_height);
200023aa:	492b      	ldr	r1, [pc, #172]	; (20002458 <initSprites+0x194>)
200023ac:	6878      	ldr	r0, [r7, #4]
200023ae:	2327      	movs	r3, #39	; 0x27
200023b0:	2211      	movs	r2, #17
200023b2:	f001 f813 	bl	200033dc <load_sprite>
	flame4Gray = pointer20;
200023b6:	4b29      	ldr	r3, [pc, #164]	; (2000245c <initSprites+0x198>)
200023b8:	687a      	ldr	r2, [r7, #4]
200023ba:	601a      	str	r2, [r3, #0]
	sprite *pointer21 = &tempFlame4Black;
200023bc:	4b28      	ldr	r3, [pc, #160]	; (20002460 <initSprites+0x19c>)
200023be:	603b      	str	r3, [r7, #0]
	load_sprite(pointer21, flame4_black_bits, flame4_black_width, flame4_black_height);
200023c0:	4928      	ldr	r1, [pc, #160]	; (20002464 <initSprites+0x1a0>)
200023c2:	6838      	ldr	r0, [r7, #0]
200023c4:	2327      	movs	r3, #39	; 0x27
200023c6:	2211      	movs	r2, #17
200023c8:	f001 f808 	bl	200033dc <load_sprite>
	flame4Black = pointer21;	
200023cc:	4b26      	ldr	r3, [pc, #152]	; (20002468 <initSprites+0x1a4>)
200023ce:	683a      	ldr	r2, [r7, #0]
200023d0:	601a      	str	r2, [r3, #0]
	
}
200023d2:	46c0      	nop			; (mov r8, r8)
200023d4:	46bd      	mov	sp, r7
200023d6:	b00c      	add	sp, #48	; 0x30
200023d8:	bd80      	pop	{r7, pc}
200023da:	46c0      	nop			; (mov r8, r8)
200023dc:	20004794 	mulcs	r0, r4, r7
200023e0:	20008794 	mulcs	r0, r4, r7
200023e4:	2000470c 	andcs	r4, r0, ip, lsl #14
200023e8:	20004678 	andcs	r4, r0, r8, ror r6
200023ec:	2000871c 	andcs	r8, r0, ip, lsl r7
200023f0:	20004708 	andcs	r4, r0, r8, lsl #14
200023f4:	200047a8 	andcs	r4, r0, r8, lsr #15
200023f8:	200086a4 	andcs	r8, r0, r4, lsr #13
200023fc:	20004790 	mulcs	r0, r0, r7
20002400:	200046e0 	andcs	r4, r0, r0, ror #13
20002404:	200088fc 	strdcs	r8, [r0], -ip
20002408:	200047a0 	andcs	r4, r0, r0, lsr #15
2000240c:	20004744 	andcs	r4, r0, r4, asr #14
20002410:	20008884 	andcs	r8, r0, r4, lsl #17
20002414:	20004704 	andcs	r4, r0, r4, lsl #14
20002418:	200046f8 	strdcs	r4, [r0], -r8
2000241c:	2000880c 	andcs	r8, r0, ip, lsl #16
20002420:	200047b8 			; <UNDEFINED> instruction: 0x200047b8
20002424:	200046a0 	andcs	r4, r0, r0, lsr #13
20002428:	20008a64 	andcs	r8, r0, r4, ror #20
2000242c:	2000469c 	mulcs	r0, ip, r6
20002430:	200046ec 	andcs	r4, r0, ip, ror #13
20002434:	200089ec 	andcs	r8, r0, ip, ror #19
20002438:	200046b8 			; <UNDEFINED> instruction: 0x200046b8
2000243c:	20004780 	andcs	r4, r0, r0, lsl #15
20002440:	20008974 	andcs	r8, r0, r4, ror r9
20002444:	200047a4 	andcs	r4, r0, r4, lsr #15
20002448:	20004684 	andcs	r4, r0, r4, lsl #13
2000244c:	20008bcc 	andcs	r8, r0, ip, asr #23
20002450:	200047b4 			; <UNDEFINED> instruction: 0x200047b4
20002454:	2000471c 	andcs	r4, r0, ip, lsl r7
20002458:	20008b54 	andcs	r8, r0, r4, asr fp
2000245c:	20004728 	andcs	r4, r0, r8, lsr #14
20002460:	20004710 	andcs	r4, r0, r0, lsl r7
20002464:	20008adc 	ldrdcs	r8, [r0], -ip
20002468:	2000478c 	andcs	r4, r0, ip, lsl #15

2000246c <init_flame>:
	
void init_flame( GameObject *flameObj ) {
2000246c:	b590      	push	{r4, r7, lr}
2000246e:	b083      	sub	sp, #12
20002470:	af00      	add	r7, sp, #0
20002472:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20002474:	4b29      	ldr	r3, [pc, #164]	; (2000251c <init_flame+0xb0>)
20002476:	681b      	ldr	r3, [r3, #0]
20002478:	2b00      	cmp	r3, #0
2000247a:	d03b      	beq.n	200024f4 <init_flame+0x88>
		initSprites();
2000247c:	f7ff ff22 	bl	200022c4 <initSprites>
		firstTime = 0;			
20002480:	4b26      	ldr	r3, [pc, #152]	; (2000251c <init_flame+0xb0>)
20002482:	2200      	movs	r2, #0
20002484:	601a      	str	r2, [r3, #0]

		flameImages[0] = flame1Image;
20002486:	4b26      	ldr	r3, [pc, #152]	; (20002520 <init_flame+0xb4>)
20002488:	4a26      	ldr	r2, [pc, #152]	; (20002524 <init_flame+0xb8>)
2000248a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000248c:	c313      	stmia	r3!, {r0, r1, r4}
		flameImages[1] = flame2Image;
2000248e:	4b24      	ldr	r3, [pc, #144]	; (20002520 <init_flame+0xb4>)
20002490:	4a25      	ldr	r2, [pc, #148]	; (20002528 <init_flame+0xbc>)
20002492:	330c      	adds	r3, #12
20002494:	ca13      	ldmia	r2!, {r0, r1, r4}
20002496:	c313      	stmia	r3!, {r0, r1, r4}
		flameImages[2] = flame3Image;
20002498:	4b21      	ldr	r3, [pc, #132]	; (20002520 <init_flame+0xb4>)
2000249a:	4a24      	ldr	r2, [pc, #144]	; (2000252c <init_flame+0xc0>)
2000249c:	3318      	adds	r3, #24
2000249e:	ca13      	ldmia	r2!, {r0, r1, r4}
200024a0:	c313      	stmia	r3!, {r0, r1, r4}
		flameImages[3] = flame4Image;
200024a2:	4b1f      	ldr	r3, [pc, #124]	; (20002520 <init_flame+0xb4>)
200024a4:	4a22      	ldr	r2, [pc, #136]	; (20002530 <init_flame+0xc4>)
200024a6:	3324      	adds	r3, #36	; 0x24
200024a8:	ca13      	ldmia	r2!, {r0, r1, r4}
200024aa:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&flameImages[0], flame1Black, flame1Gray, flame1Light);
200024ac:	4b21      	ldr	r3, [pc, #132]	; (20002534 <init_flame+0xc8>)
200024ae:	6819      	ldr	r1, [r3, #0]
200024b0:	4b21      	ldr	r3, [pc, #132]	; (20002538 <init_flame+0xcc>)
200024b2:	681a      	ldr	r2, [r3, #0]
200024b4:	4b21      	ldr	r3, [pc, #132]	; (2000253c <init_flame+0xd0>)
200024b6:	681b      	ldr	r3, [r3, #0]
200024b8:	4819      	ldr	r0, [pc, #100]	; (20002520 <init_flame+0xb4>)
200024ba:	f000 ff7b 	bl	200033b4 <load_image>
		load_image(&flameImages[1], flame2Black, flame2Gray, flame2Light);
200024be:	4b20      	ldr	r3, [pc, #128]	; (20002540 <init_flame+0xd4>)
200024c0:	6819      	ldr	r1, [r3, #0]
200024c2:	4b20      	ldr	r3, [pc, #128]	; (20002544 <init_flame+0xd8>)
200024c4:	681a      	ldr	r2, [r3, #0]
200024c6:	4b20      	ldr	r3, [pc, #128]	; (20002548 <init_flame+0xdc>)
200024c8:	681b      	ldr	r3, [r3, #0]
200024ca:	4820      	ldr	r0, [pc, #128]	; (2000254c <init_flame+0xe0>)
200024cc:	f000 ff72 	bl	200033b4 <load_image>
		load_image(&flameImages[2], flame3Black, flame3Gray, flame3Light);
200024d0:	4b1f      	ldr	r3, [pc, #124]	; (20002550 <init_flame+0xe4>)
200024d2:	6819      	ldr	r1, [r3, #0]
200024d4:	4b1f      	ldr	r3, [pc, #124]	; (20002554 <init_flame+0xe8>)
200024d6:	681a      	ldr	r2, [r3, #0]
200024d8:	4b1f      	ldr	r3, [pc, #124]	; (20002558 <init_flame+0xec>)
200024da:	681b      	ldr	r3, [r3, #0]
200024dc:	481f      	ldr	r0, [pc, #124]	; (2000255c <init_flame+0xf0>)
200024de:	f000 ff69 	bl	200033b4 <load_image>
		load_image(&flameImages[3], flame4Black, flame4Gray, flame4Light);
200024e2:	4b1f      	ldr	r3, [pc, #124]	; (20002560 <init_flame+0xf4>)
200024e4:	6819      	ldr	r1, [r3, #0]
200024e6:	4b1f      	ldr	r3, [pc, #124]	; (20002564 <init_flame+0xf8>)
200024e8:	681a      	ldr	r2, [r3, #0]
200024ea:	4b1f      	ldr	r3, [pc, #124]	; (20002568 <init_flame+0xfc>)
200024ec:	681b      	ldr	r3, [r3, #0]
200024ee:	481f      	ldr	r0, [pc, #124]	; (2000256c <init_flame+0x100>)
200024f0:	f000 ff60 	bl	200033b4 <load_image>
}
	
	flameObj->images = flameImages;
200024f4:	687b      	ldr	r3, [r7, #4]
200024f6:	4a0a      	ldr	r2, [pc, #40]	; (20002520 <init_flame+0xb4>)
200024f8:	601a      	str	r2, [r3, #0]

	flameObj->current_frame = 0;
200024fa:	687b      	ldr	r3, [r7, #4]
200024fc:	2200      	movs	r2, #0
200024fe:	615a      	str	r2, [r3, #20]
	flameObj->n_frames = 4;
20002500:	687b      	ldr	r3, [r7, #4]
20002502:	2204      	movs	r2, #4
20002504:	619a      	str	r2, [r3, #24]
	flameObj->animation_speed = 1;
20002506:	687b      	ldr	r3, [r7, #4]
20002508:	2201      	movs	r2, #1
2000250a:	61da      	str	r2, [r3, #28]
	flameObj->animation_counter = 0;
2000250c:	687b      	ldr	r3, [r7, #4]
2000250e:	2200      	movs	r2, #0
20002510:	621a      	str	r2, [r3, #32]
}
20002512:	46c0      	nop			; (mov r8, r8)
20002514:	46bd      	mov	sp, r7
20002516:	b003      	add	sp, #12
20002518:	bd90      	pop	{r4, r7, pc}
2000251a:	46c0      	nop			; (mov r8, r8)
2000251c:	20008c44 	andcs	r8, r0, r4, asr #24
20002520:	20004750 	andcs	r4, r0, r0, asr r7
20002524:	20004738 	andcs	r4, r0, r8, lsr r7
20002528:	20004690 	mulcs	r0, r0, r6
2000252c:	200046ac 	andcs	r4, r0, ip, lsr #13
20002530:	2000472c 	andcs	r4, r0, ip, lsr #14
20002534:	20004790 	mulcs	r0, r0, r7
20002538:	20004708 	andcs	r4, r0, r8, lsl #14
2000253c:	2000470c 	andcs	r4, r0, ip, lsl #14
20002540:	200047b8 			; <UNDEFINED> instruction: 0x200047b8
20002544:	20004704 	andcs	r4, r0, r4, lsl #14
20002548:	200047a0 	andcs	r4, r0, r0, lsr #15
2000254c:	2000475c 	andcs	r4, r0, ip, asr r7
20002550:	200047a4 	andcs	r4, r0, r4, lsr #15
20002554:	200046b8 			; <UNDEFINED> instruction: 0x200046b8
20002558:	2000469c 	mulcs	r0, ip, r6
2000255c:	20004768 	andcs	r4, r0, r8, ror #14
20002560:	2000478c 	andcs	r4, r0, ip, lsl #15
20002564:	20004728 	andcs	r4, r0, r8, lsr #14
20002568:	200047b4 			; <UNDEFINED> instruction: 0x200047b4
2000256c:	20004774 	andcs	r4, r0, r4, ror r7

20002570 <delay_250ns>:
#include "graphics.h"


void delay_250ns(void){
20002570:	b580      	push	{r7, lr}
20002572:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
20002574:	4b0c      	ldr	r3, [pc, #48]	; (200025a8 <delay_250ns+0x38>)
20002576:	2200      	movs	r2, #0
20002578:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/4) -1);
2000257a:	4b0c      	ldr	r3, [pc, #48]	; (200025ac <delay_250ns+0x3c>)
2000257c:	2229      	movs	r2, #41	; 0x29
2000257e:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20002580:	4b0b      	ldr	r3, [pc, #44]	; (200025b0 <delay_250ns+0x40>)
20002582:	2200      	movs	r2, #0
20002584:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20002586:	4b08      	ldr	r3, [pc, #32]	; (200025a8 <delay_250ns+0x38>)
20002588:	2205      	movs	r2, #5
2000258a:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
2000258c:	46c0      	nop			; (mov r8, r8)
2000258e:	4b06      	ldr	r3, [pc, #24]	; (200025a8 <delay_250ns+0x38>)
20002590:	681a      	ldr	r2, [r3, #0]
20002592:	2380      	movs	r3, #128	; 0x80
20002594:	025b      	lsls	r3, r3, #9
20002596:	4013      	ands	r3, r2
20002598:	d0f9      	beq.n	2000258e <delay_250ns+0x1e>
	*STK_CTRL = 0;
2000259a:	4b03      	ldr	r3, [pc, #12]	; (200025a8 <delay_250ns+0x38>)
2000259c:	2200      	movs	r2, #0
2000259e:	601a      	str	r2, [r3, #0]
}
200025a0:	46c0      	nop			; (mov r8, r8)
200025a2:	46bd      	mov	sp, r7
200025a4:	bd80      	pop	{r7, pc}
200025a6:	46c0      	nop			; (mov r8, r8)
200025a8:	e000e010 	and	lr, r0, r0, lsl r0
200025ac:	e000e014 	and	lr, r0, r4, lsl r0
200025b0:	e000e018 	and	lr, r0, r8, lsl r0

200025b4 <delay_500ns>:

void delay_500ns(void){
200025b4:	b580      	push	{r7, lr}
200025b6:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
200025b8:	4b0c      	ldr	r3, [pc, #48]	; (200025ec <delay_500ns+0x38>)
200025ba:	2200      	movs	r2, #0
200025bc:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/2) -1);
200025be:	4b0c      	ldr	r3, [pc, #48]	; (200025f0 <delay_500ns+0x3c>)
200025c0:	2253      	movs	r2, #83	; 0x53
200025c2:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
200025c4:	4b0b      	ldr	r3, [pc, #44]	; (200025f4 <delay_500ns+0x40>)
200025c6:	2200      	movs	r2, #0
200025c8:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
200025ca:	4b08      	ldr	r3, [pc, #32]	; (200025ec <delay_500ns+0x38>)
200025cc:	2205      	movs	r2, #5
200025ce:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
200025d0:	46c0      	nop			; (mov r8, r8)
200025d2:	4b06      	ldr	r3, [pc, #24]	; (200025ec <delay_500ns+0x38>)
200025d4:	681a      	ldr	r2, [r3, #0]
200025d6:	2380      	movs	r3, #128	; 0x80
200025d8:	025b      	lsls	r3, r3, #9
200025da:	4013      	ands	r3, r2
200025dc:	d0f9      	beq.n	200025d2 <delay_500ns+0x1e>
	*STK_CTRL = 0;
200025de:	4b03      	ldr	r3, [pc, #12]	; (200025ec <delay_500ns+0x38>)
200025e0:	2200      	movs	r2, #0
200025e2:	601a      	str	r2, [r3, #0]
}
200025e4:	46c0      	nop			; (mov r8, r8)
200025e6:	46bd      	mov	sp, r7
200025e8:	bd80      	pop	{r7, pc}
200025ea:	46c0      	nop			; (mov r8, r8)
200025ec:	e000e010 	and	lr, r0, r0, lsl r0
200025f0:	e000e014 	and	lr, r0, r4, lsl r0
200025f4:	e000e018 	and	lr, r0, r8, lsl r0

200025f8 <delay_micro>:

void delay_micro(unsigned int us){
200025f8:	b580      	push	{r7, lr}
200025fa:	b082      	sub	sp, #8
200025fc:	af00      	add	r7, sp, #0
200025fe:	6078      	str	r0, [r7, #4]
	while(us--) {
20002600:	e007      	b.n	20002612 <delay_micro+0x1a>
		delay_250ns();
20002602:	f7ff ffb5 	bl	20002570 <delay_250ns>
		delay_250ns();
20002606:	f7ff ffb3 	bl	20002570 <delay_250ns>
		delay_250ns();
2000260a:	f7ff ffb1 	bl	20002570 <delay_250ns>
		delay_250ns();
2000260e:	f7ff ffaf 	bl	20002570 <delay_250ns>
	while(us--) {
20002612:	687b      	ldr	r3, [r7, #4]
20002614:	1e5a      	subs	r2, r3, #1
20002616:	607a      	str	r2, [r7, #4]
20002618:	2b00      	cmp	r3, #0
2000261a:	d1f2      	bne.n	20002602 <delay_micro+0xa>
	}
}
2000261c:	46c0      	nop			; (mov r8, r8)
2000261e:	46bd      	mov	sp, r7
20002620:	b002      	add	sp, #8
20002622:	bd80      	pop	{r7, pc}

20002624 <delay_milli>:

void delay_milli(unsigned int ms){
20002624:	b580      	push	{r7, lr}
20002626:	b082      	sub	sp, #8
20002628:	af00      	add	r7, sp, #0
2000262a:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		while(ms--)
			delay_micro(1);
	#else
		while(ms--)
2000262c:	e004      	b.n	20002638 <delay_milli+0x14>
			delay_micro(1000);
2000262e:	23fa      	movs	r3, #250	; 0xfa
20002630:	009b      	lsls	r3, r3, #2
20002632:	0018      	movs	r0, r3
20002634:	f7ff ffe0 	bl	200025f8 <delay_micro>
		while(ms--)
20002638:	687b      	ldr	r3, [r7, #4]
2000263a:	1e5a      	subs	r2, r3, #1
2000263c:	607a      	str	r2, [r7, #4]
2000263e:	2b00      	cmp	r3, #0
20002640:	d1f5      	bne.n	2000262e <delay_milli+0xa>
	#endif
}
20002642:	46c0      	nop			; (mov r8, r8)
20002644:	46bd      	mov	sp, r7
20002646:	b002      	add	sp, #8
20002648:	bd80      	pop	{r7, pc}

2000264a <clear_thisBackBuffer>:
uint8_t draw_buffer_black_light[1024]; // 128 * 64 / 8
uint8_t draw_buffer_black_gray_light[1024]; // 128 * 64 / 8
uint8_t backBuffer[1024]; // 128 * 64 / 8
uint8_t backBufferGray[1024]; // 128 * 64 / 8
uint8_t backBufferLight[1024]; // 128 * 64 / 8
void clear_thisBackBuffer(uint8_t *buffer) {
2000264a:	b580      	push	{r7, lr}
2000264c:	b084      	sub	sp, #16
2000264e:	af00      	add	r7, sp, #0
20002650:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < 1024; i++)
20002652:	2300      	movs	r3, #0
20002654:	60fb      	str	r3, [r7, #12]
20002656:	e007      	b.n	20002668 <clear_thisBackBuffer+0x1e>
		buffer[i] = 0;
20002658:	68fb      	ldr	r3, [r7, #12]
2000265a:	687a      	ldr	r2, [r7, #4]
2000265c:	18d3      	adds	r3, r2, r3
2000265e:	2200      	movs	r2, #0
20002660:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 1024; i++)
20002662:	68fb      	ldr	r3, [r7, #12]
20002664:	3301      	adds	r3, #1
20002666:	60fb      	str	r3, [r7, #12]
20002668:	68fb      	ldr	r3, [r7, #12]
2000266a:	4a03      	ldr	r2, [pc, #12]	; (20002678 <clear_thisBackBuffer+0x2e>)
2000266c:	4293      	cmp	r3, r2
2000266e:	ddf3      	ble.n	20002658 <clear_thisBackBuffer+0xe>
}
20002670:	46c0      	nop			; (mov r8, r8)
20002672:	46bd      	mov	sp, r7
20002674:	b004      	add	sp, #16
20002676:	bd80      	pop	{r7, pc}
20002678:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

2000267c <clear_backBuffer>:
void clear_backBuffer() {
2000267c:	b580      	push	{r7, lr}
2000267e:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
20002680:	4b03      	ldr	r3, [pc, #12]	; (20002690 <clear_backBuffer+0x14>)
20002682:	0018      	movs	r0, r3
20002684:	f7ff ffe1 	bl	2000264a <clear_thisBackBuffer>
}
20002688:	46c0      	nop			; (mov r8, r8)
2000268a:	46bd      	mov	sp, r7
2000268c:	bd80      	pop	{r7, pc}
2000268e:	46c0      	nop			; (mov r8, r8)
20002690:	20004fbc 			; <UNDEFINED> instruction: 0x20004fbc

20002694 <clear_all_backBuffers>:
void clear_all_backBuffers() {
20002694:	b580      	push	{r7, lr}
20002696:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
20002698:	4b07      	ldr	r3, [pc, #28]	; (200026b8 <clear_all_backBuffers+0x24>)
2000269a:	0018      	movs	r0, r3
2000269c:	f7ff ffd5 	bl	2000264a <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferGray);
200026a0:	4b06      	ldr	r3, [pc, #24]	; (200026bc <clear_all_backBuffers+0x28>)
200026a2:	0018      	movs	r0, r3
200026a4:	f7ff ffd1 	bl	2000264a <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferLight);
200026a8:	4b05      	ldr	r3, [pc, #20]	; (200026c0 <clear_all_backBuffers+0x2c>)
200026aa:	0018      	movs	r0, r3
200026ac:	f7ff ffcd 	bl	2000264a <clear_thisBackBuffer>
}
200026b0:	46c0      	nop			; (mov r8, r8)
200026b2:	46bd      	mov	sp, r7
200026b4:	bd80      	pop	{r7, pc}
200026b6:	46c0      	nop			; (mov r8, r8)
200026b8:	20004fbc 			; <UNDEFINED> instruction: 0x20004fbc
200026bc:	200047bc 			; <UNDEFINED> instruction: 0x200047bc
200026c0:	20005fbc 			; <UNDEFINED> instruction: 0x20005fbc

200026c4 <graphic_ctrl_bit_set>:

/* välj grafik-display och ettställ de bitar som är 1 i x */
static void graphic_ctrl_bit_set( uint8_t x) {
200026c4:	b580      	push	{r7, lr}
200026c6:	b084      	sub	sp, #16
200026c8:	af00      	add	r7, sp, #0
200026ca:	0002      	movs	r2, r0
200026cc:	1dfb      	adds	r3, r7, #7
200026ce:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
200026d0:	4a0f      	ldr	r2, [pc, #60]	; (20002710 <graphic_ctrl_bit_set+0x4c>)
200026d2:	230f      	movs	r3, #15
200026d4:	18fb      	adds	r3, r7, r3
200026d6:	7812      	ldrb	r2, [r2, #0]
200026d8:	701a      	strb	r2, [r3, #0]
	c |= x;
200026da:	230f      	movs	r3, #15
200026dc:	18fb      	adds	r3, r7, r3
200026de:	220f      	movs	r2, #15
200026e0:	18b9      	adds	r1, r7, r2
200026e2:	1dfa      	adds	r2, r7, #7
200026e4:	7809      	ldrb	r1, [r1, #0]
200026e6:	7812      	ldrb	r2, [r2, #0]
200026e8:	430a      	orrs	r2, r1
200026ea:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
200026ec:	230f      	movs	r3, #15
200026ee:	18fb      	adds	r3, r7, r3
200026f0:	220f      	movs	r2, #15
200026f2:	18ba      	adds	r2, r7, r2
200026f4:	7812      	ldrb	r2, [r2, #0]
200026f6:	2104      	movs	r1, #4
200026f8:	438a      	bics	r2, r1
200026fa:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
200026fc:	4a04      	ldr	r2, [pc, #16]	; (20002710 <graphic_ctrl_bit_set+0x4c>)
200026fe:	230f      	movs	r3, #15
20002700:	18fb      	adds	r3, r7, r3
20002702:	781b      	ldrb	r3, [r3, #0]
20002704:	7013      	strb	r3, [r2, #0]
}
20002706:	46c0      	nop			; (mov r8, r8)
20002708:	46bd      	mov	sp, r7
2000270a:	b004      	add	sp, #16
2000270c:	bd80      	pop	{r7, pc}
2000270e:	46c0      	nop			; (mov r8, r8)
20002710:	40021014 	andmi	r1, r2, r4, lsl r0

20002714 <graphic_ctrl_bit_clear>:
/* välj grafik-display och nollställ de bitar som är 1 i x */
static void graphic_ctrl_bit_clear( uint8_t x) {
20002714:	b580      	push	{r7, lr}
20002716:	b084      	sub	sp, #16
20002718:	af00      	add	r7, sp, #0
2000271a:	0002      	movs	r2, r0
2000271c:	1dfb      	adds	r3, r7, #7
2000271e:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
20002720:	4a11      	ldr	r2, [pc, #68]	; (20002768 <graphic_ctrl_bit_clear+0x54>)
20002722:	230f      	movs	r3, #15
20002724:	18fb      	adds	r3, r7, r3
20002726:	7812      	ldrb	r2, [r2, #0]
20002728:	701a      	strb	r2, [r3, #0]
	c &= ~x;
2000272a:	1dfb      	adds	r3, r7, #7
2000272c:	781b      	ldrb	r3, [r3, #0]
2000272e:	b25b      	sxtb	r3, r3
20002730:	43db      	mvns	r3, r3
20002732:	b25b      	sxtb	r3, r3
20002734:	220f      	movs	r2, #15
20002736:	18ba      	adds	r2, r7, r2
20002738:	7812      	ldrb	r2, [r2, #0]
2000273a:	b252      	sxtb	r2, r2
2000273c:	4013      	ands	r3, r2
2000273e:	b25a      	sxtb	r2, r3
20002740:	230f      	movs	r3, #15
20002742:	18fb      	adds	r3, r7, r3
20002744:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
20002746:	230f      	movs	r3, #15
20002748:	18fb      	adds	r3, r7, r3
2000274a:	220f      	movs	r2, #15
2000274c:	18ba      	adds	r2, r7, r2
2000274e:	7812      	ldrb	r2, [r2, #0]
20002750:	2104      	movs	r1, #4
20002752:	438a      	bics	r2, r1
20002754:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20002756:	4a04      	ldr	r2, [pc, #16]	; (20002768 <graphic_ctrl_bit_clear+0x54>)
20002758:	230f      	movs	r3, #15
2000275a:	18fb      	adds	r3, r7, r3
2000275c:	781b      	ldrb	r3, [r3, #0]
2000275e:	7013      	strb	r3, [r2, #0]
}
20002760:	46c0      	nop			; (mov r8, r8)
20002762:	46bd      	mov	sp, r7
20002764:	b004      	add	sp, #16
20002766:	bd80      	pop	{r7, pc}
20002768:	40021014 	andmi	r1, r2, r4, lsl r0

2000276c <select_controller>:
void select_controller( uint8_t controller) {
2000276c:	b580      	push	{r7, lr}
2000276e:	b082      	sub	sp, #8
20002770:	af00      	add	r7, sp, #0
20002772:	0002      	movs	r2, r0
20002774:	1dfb      	adds	r3, r7, #7
20002776:	701a      	strb	r2, [r3, #0]
	switch (controller) {
20002778:	1dfb      	adds	r3, r7, #7
2000277a:	781b      	ldrb	r3, [r3, #0]
2000277c:	2b08      	cmp	r3, #8
2000277e:	d00f      	beq.n	200027a0 <select_controller+0x34>
20002780:	dc02      	bgt.n	20002788 <select_controller+0x1c>
20002782:	2b00      	cmp	r3, #0
20002784:	d005      	beq.n	20002792 <select_controller+0x26>
		case (B_CS1|B_CS2): 
			graphic_ctrl_bit_set(B_CS1); 
			graphic_ctrl_bit_set(B_CS2); 
			break;
	}
}
20002786:	e020      	b.n	200027ca <select_controller+0x5e>
	switch (controller) {
20002788:	2b10      	cmp	r3, #16
2000278a:	d010      	beq.n	200027ae <select_controller+0x42>
2000278c:	2b18      	cmp	r3, #24
2000278e:	d015      	beq.n	200027bc <select_controller+0x50>
}
20002790:	e01b      	b.n	200027ca <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
20002792:	2008      	movs	r0, #8
20002794:	f7ff ffbe 	bl	20002714 <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_clear(B_CS2); 
20002798:	2010      	movs	r0, #16
2000279a:	f7ff ffbb 	bl	20002714 <graphic_ctrl_bit_clear>
			break;
2000279e:	e014      	b.n	200027ca <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
200027a0:	2008      	movs	r0, #8
200027a2:	f7ff ff8f 	bl	200026c4 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS2); 
200027a6:	2010      	movs	r0, #16
200027a8:	f7ff ffb4 	bl	20002714 <graphic_ctrl_bit_clear>
			break;
200027ac:	e00d      	b.n	200027ca <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
200027ae:	2008      	movs	r0, #8
200027b0:	f7ff ffb0 	bl	20002714 <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_set(B_CS2); 
200027b4:	2010      	movs	r0, #16
200027b6:	f7ff ff85 	bl	200026c4 <graphic_ctrl_bit_set>
			break;
200027ba:	e006      	b.n	200027ca <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
200027bc:	2008      	movs	r0, #8
200027be:	f7ff ff81 	bl	200026c4 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_set(B_CS2); 
200027c2:	2010      	movs	r0, #16
200027c4:	f7ff ff7e 	bl	200026c4 <graphic_ctrl_bit_set>
			break;
200027c8:	46c0      	nop			; (mov r8, r8)
}
200027ca:	46c0      	nop			; (mov r8, r8)
200027cc:	46bd      	mov	sp, r7
200027ce:	b002      	add	sp, #8
200027d0:	bd80      	pop	{r7, pc}

200027d2 <graphic_wait_ready>:

void graphic_wait_ready( void ) {
200027d2:	b580      	push	{r7, lr}
200027d4:	b082      	sub	sp, #8
200027d6:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
200027d8:	2040      	movs	r0, #64	; 0x40
200027da:	f7ff ff9b 	bl	20002714 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
200027de:	4b14      	ldr	r3, [pc, #80]	; (20002830 <graphic_wait_ready+0x5e>)
200027e0:	4a14      	ldr	r2, [pc, #80]	; (20002834 <graphic_wait_ready+0x62>)
200027e2:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
200027e4:	2001      	movs	r0, #1
200027e6:	f7ff ff95 	bl	20002714 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
200027ea:	2002      	movs	r0, #2
200027ec:	f7ff ff6a 	bl	200026c4 <graphic_ctrl_bit_set>
	delay_500ns();
200027f0:	f7ff fee0 	bl	200025b4 <delay_500ns>
	
	while(1) {
		graphic_ctrl_bit_set(B_E);
200027f4:	2040      	movs	r0, #64	; 0x40
200027f6:	f7ff ff65 	bl	200026c4 <graphic_ctrl_bit_set>
		delay_500ns();
200027fa:	f7ff fedb 	bl	200025b4 <delay_500ns>
		c = *portIdrHigh & LCD_BUSY; //...
200027fe:	4b0e      	ldr	r3, [pc, #56]	; (20002838 <graphic_wait_ready+0x66>)
20002800:	781b      	ldrb	r3, [r3, #0]
20002802:	b2da      	uxtb	r2, r3
20002804:	1dfb      	adds	r3, r7, #7
20002806:	217f      	movs	r1, #127	; 0x7f
20002808:	438a      	bics	r2, r1
2000280a:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
2000280c:	2040      	movs	r0, #64	; 0x40
2000280e:	f7ff ff81 	bl	20002714 <graphic_ctrl_bit_clear>
		delay_500ns();
20002812:	f7ff fecf 	bl	200025b4 <delay_500ns>
		/*if (*portIdrHigh & 0x80 == 0x80) {
			break; }*/
		if (c == 0) break;
20002816:	1dfb      	adds	r3, r7, #7
20002818:	781b      	ldrb	r3, [r3, #0]
2000281a:	2b00      	cmp	r3, #0
2000281c:	d000      	beq.n	20002820 <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
2000281e:	e7e9      	b.n	200027f4 <graphic_wait_ready+0x22>
		if (c == 0) break;
20002820:	46c0      	nop			; (mov r8, r8)
	}
	//graphic_ctrl_bit_set(B_E); //<--
	*portModer = 0x55555555;	
20002822:	4b03      	ldr	r3, [pc, #12]	; (20002830 <graphic_wait_ready+0x5e>)
20002824:	4a05      	ldr	r2, [pc, #20]	; (2000283c <graphic_wait_ready+0x6a>)
20002826:	601a      	str	r2, [r3, #0]
}
20002828:	46c0      	nop			; (mov r8, r8)
2000282a:	46bd      	mov	sp, r7
2000282c:	b002      	add	sp, #8
2000282e:	bd80      	pop	{r7, pc}
20002830:	40021000 	andmi	r1, r2, r0
20002834:	00005555 	andeq	r5, r0, r5, asr r5
20002838:	40021011 	andmi	r1, r2, r1, lsl r0
2000283c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20002840 <graphic_read>:

static uint8_t graphic_read(uint8_t controller) {
20002840:	b580      	push	{r7, lr}
20002842:	b084      	sub	sp, #16
20002844:	af00      	add	r7, sp, #0
20002846:	0002      	movs	r2, r0
20002848:	1dfb      	adds	r3, r7, #7
2000284a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000284c:	2040      	movs	r0, #64	; 0x40
2000284e:	f7ff ff61 	bl	20002714 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
20002852:	4b1c      	ldr	r3, [pc, #112]	; (200028c4 <graphic_read+0x84>)
20002854:	4a1c      	ldr	r2, [pc, #112]	; (200028c8 <graphic_read+0x88>)
20002856:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS);
20002858:	2001      	movs	r0, #1
2000285a:	f7ff ff33 	bl	200026c4 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_set(B_RW);
2000285e:	2002      	movs	r0, #2
20002860:	f7ff ff30 	bl	200026c4 <graphic_ctrl_bit_set>
	select_controller(controller);
20002864:	1dfb      	adds	r3, r7, #7
20002866:	781b      	ldrb	r3, [r3, #0]
20002868:	0018      	movs	r0, r3
2000286a:	f7ff ff7f 	bl	2000276c <select_controller>
	delay_500ns();
2000286e:	f7ff fea1 	bl	200025b4 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20002872:	2040      	movs	r0, #64	; 0x40
20002874:	f7ff ff26 	bl	200026c4 <graphic_ctrl_bit_set>
	delay_500ns();
20002878:	f7ff fe9c 	bl	200025b4 <delay_500ns>
	unsigned char rv = *portIdrHigh;
2000287c:	4a13      	ldr	r2, [pc, #76]	; (200028cc <graphic_read+0x8c>)
2000287e:	230f      	movs	r3, #15
20002880:	18fb      	adds	r3, r7, r3
20002882:	7812      	ldrb	r2, [r2, #0]
20002884:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20002886:	2040      	movs	r0, #64	; 0x40
20002888:	f7ff ff44 	bl	20002714 <graphic_ctrl_bit_clear>
	*portModer = 0x55555555;
2000288c:	4b0d      	ldr	r3, [pc, #52]	; (200028c4 <graphic_read+0x84>)
2000288e:	4a10      	ldr	r2, [pc, #64]	; (200028d0 <graphic_read+0x90>)
20002890:	601a      	str	r2, [r3, #0]
	
	if(controller == B_CS1) {
20002892:	1dfb      	adds	r3, r7, #7
20002894:	781b      	ldrb	r3, [r3, #0]
20002896:	2b08      	cmp	r3, #8
20002898:	d104      	bne.n	200028a4 <graphic_read+0x64>
		select_controller(B_CS1);
2000289a:	2008      	movs	r0, #8
2000289c:	f7ff ff66 	bl	2000276c <select_controller>
		graphic_wait_ready();
200028a0:	f7ff ff97 	bl	200027d2 <graphic_wait_ready>
	}
	if(controller == B_CS2) {
200028a4:	1dfb      	adds	r3, r7, #7
200028a6:	781b      	ldrb	r3, [r3, #0]
200028a8:	2b10      	cmp	r3, #16
200028aa:	d104      	bne.n	200028b6 <graphic_read+0x76>
		select_controller(B_CS2);
200028ac:	2010      	movs	r0, #16
200028ae:	f7ff ff5d 	bl	2000276c <select_controller>
		graphic_wait_ready();
200028b2:	f7ff ff8e 	bl	200027d2 <graphic_wait_ready>
	}
	
	return rv;
200028b6:	230f      	movs	r3, #15
200028b8:	18fb      	adds	r3, r7, r3
200028ba:	781b      	ldrb	r3, [r3, #0]
}
200028bc:	0018      	movs	r0, r3
200028be:	46bd      	mov	sp, r7
200028c0:	b004      	add	sp, #16
200028c2:	bd80      	pop	{r7, pc}
200028c4:	40021000 	andmi	r1, r2, r0
200028c8:	00005555 	andeq	r5, r0, r5, asr r5
200028cc:	40021011 	andmi	r1, r2, r1, lsl r0
200028d0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200028d4 <graphic_read_data>:

graphic_read_data(uint8_t controller) {
200028d4:	b580      	push	{r7, lr}
200028d6:	b082      	sub	sp, #8
200028d8:	af00      	add	r7, sp, #0
200028da:	0002      	movs	r2, r0
200028dc:	1dfb      	adds	r3, r7, #7
200028de:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
200028e0:	1dfb      	adds	r3, r7, #7
200028e2:	781b      	ldrb	r3, [r3, #0]
200028e4:	0018      	movs	r0, r3
200028e6:	f7ff ffab 	bl	20002840 <graphic_read>
	graphic_read(controller);
200028ea:	1dfb      	adds	r3, r7, #7
200028ec:	781b      	ldrb	r3, [r3, #0]
200028ee:	0018      	movs	r0, r3
200028f0:	f7ff ffa6 	bl	20002840 <graphic_read>
}
200028f4:	46c0      	nop			; (mov r8, r8)
200028f6:	0018      	movs	r0, r3
200028f8:	46bd      	mov	sp, r7
200028fa:	b002      	add	sp, #8
200028fc:	bd80      	pop	{r7, pc}

200028fe <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller) {
200028fe:	b580      	push	{r7, lr}
20002900:	b082      	sub	sp, #8
20002902:	af00      	add	r7, sp, #0
20002904:	0002      	movs	r2, r0
20002906:	1dfb      	adds	r3, r7, #7
20002908:	701a      	strb	r2, [r3, #0]
2000290a:	1dbb      	adds	r3, r7, #6
2000290c:	1c0a      	adds	r2, r1, #0
2000290e:	701a      	strb	r2, [r3, #0]
	*portOdrHigh = value; //I
20002910:	4a19      	ldr	r2, [pc, #100]	; (20002978 <graphic_write+0x7a>)
20002912:	1dfb      	adds	r3, r7, #7
20002914:	781b      	ldrb	r3, [r3, #0]
20002916:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
20002918:	1dbb      	adds	r3, r7, #6
2000291a:	781b      	ldrb	r3, [r3, #0]
2000291c:	0018      	movs	r0, r3
2000291e:	f7ff ff25 	bl	2000276c <select_controller>
	delay_500ns();
20002922:	f7ff fe47 	bl	200025b4 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20002926:	2040      	movs	r0, #64	; 0x40
20002928:	f7ff fecc 	bl	200026c4 <graphic_ctrl_bit_set>
	delay_500ns();
2000292c:	f7ff fe42 	bl	200025b4 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
20002930:	2040      	movs	r0, #64	; 0x40
20002932:	f7ff feef 	bl	20002714 <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1) {
20002936:	1dbb      	adds	r3, r7, #6
20002938:	781b      	ldrb	r3, [r3, #0]
2000293a:	2208      	movs	r2, #8
2000293c:	4013      	ands	r3, r2
2000293e:	d004      	beq.n	2000294a <graphic_write+0x4c>
		select_controller(B_CS1);
20002940:	2008      	movs	r0, #8
20002942:	f7ff ff13 	bl	2000276c <select_controller>
		graphic_wait_ready();
20002946:	f7ff ff44 	bl	200027d2 <graphic_wait_ready>
	}
	if(controller & B_CS2) {
2000294a:	1dbb      	adds	r3, r7, #6
2000294c:	781b      	ldrb	r3, [r3, #0]
2000294e:	2210      	movs	r2, #16
20002950:	4013      	ands	r3, r2
20002952:	d004      	beq.n	2000295e <graphic_write+0x60>
		select_controller(B_CS2);
20002954:	2010      	movs	r0, #16
20002956:	f7ff ff09 	bl	2000276c <select_controller>
		graphic_wait_ready();
2000295a:	f7ff ff3a 	bl	200027d2 <graphic_wait_ready>
	}
	
	*portOdrHigh = 0;	//I
2000295e:	4b06      	ldr	r3, [pc, #24]	; (20002978 <graphic_write+0x7a>)
20002960:	2200      	movs	r2, #0
20002962:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
20002964:	2040      	movs	r0, #64	; 0x40
20002966:	f7ff fead 	bl	200026c4 <graphic_ctrl_bit_set>
	select_controller(0);
2000296a:	2000      	movs	r0, #0
2000296c:	f7ff fefe 	bl	2000276c <select_controller>
}
20002970:	46c0      	nop			; (mov r8, r8)
20002972:	46bd      	mov	sp, r7
20002974:	b002      	add	sp, #8
20002976:	bd80      	pop	{r7, pc}
20002978:	40021015 	andmi	r1, r2, r5, lsl r0

2000297c <graphic_write_command>:
void graphic_write_command(uint8_t command, uint8_t controller) {
2000297c:	b580      	push	{r7, lr}
2000297e:	b082      	sub	sp, #8
20002980:	af00      	add	r7, sp, #0
20002982:	0002      	movs	r2, r0
20002984:	1dfb      	adds	r3, r7, #7
20002986:	701a      	strb	r2, [r3, #0]
20002988:	1dbb      	adds	r3, r7, #6
2000298a:	1c0a      	adds	r2, r1, #0
2000298c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000298e:	2040      	movs	r0, #64	; 0x40
20002990:	f7ff fec0 	bl	20002714 <graphic_ctrl_bit_clear>
	select_controller(controller);
20002994:	1dbb      	adds	r3, r7, #6
20002996:	781b      	ldrb	r3, [r3, #0]
20002998:	0018      	movs	r0, r3
2000299a:	f7ff fee7 	bl	2000276c <select_controller>
	graphic_ctrl_bit_clear(B_RS);
2000299e:	2001      	movs	r0, #1
200029a0:	f7ff feb8 	bl	20002714 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RW);
200029a4:	2002      	movs	r0, #2
200029a6:	f7ff feb5 	bl	20002714 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
200029aa:	1dbb      	adds	r3, r7, #6
200029ac:	781a      	ldrb	r2, [r3, #0]
200029ae:	1dfb      	adds	r3, r7, #7
200029b0:	781b      	ldrb	r3, [r3, #0]
200029b2:	0011      	movs	r1, r2
200029b4:	0018      	movs	r0, r3
200029b6:	f7ff ffa2 	bl	200028fe <graphic_write>
}
200029ba:	46c0      	nop			; (mov r8, r8)
200029bc:	46bd      	mov	sp, r7
200029be:	b002      	add	sp, #8
200029c0:	bd80      	pop	{r7, pc}

200029c2 <graphic_write_data>:
void graphic_write_data(uint8_t command, uint8_t controller) {
200029c2:	b580      	push	{r7, lr}
200029c4:	b082      	sub	sp, #8
200029c6:	af00      	add	r7, sp, #0
200029c8:	0002      	movs	r2, r0
200029ca:	1dfb      	adds	r3, r7, #7
200029cc:	701a      	strb	r2, [r3, #0]
200029ce:	1dbb      	adds	r3, r7, #6
200029d0:	1c0a      	adds	r2, r1, #0
200029d2:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200029d4:	2040      	movs	r0, #64	; 0x40
200029d6:	f7ff fe9d 	bl	20002714 <graphic_ctrl_bit_clear>
	select_controller(controller);
200029da:	1dbb      	adds	r3, r7, #6
200029dc:	781b      	ldrb	r3, [r3, #0]
200029de:	0018      	movs	r0, r3
200029e0:	f7ff fec4 	bl	2000276c <select_controller>
	graphic_ctrl_bit_set(B_RS);
200029e4:	2001      	movs	r0, #1
200029e6:	f7ff fe6d 	bl	200026c4 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
200029ea:	2002      	movs	r0, #2
200029ec:	f7ff fe92 	bl	20002714 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
200029f0:	1dbb      	adds	r3, r7, #6
200029f2:	781a      	ldrb	r2, [r3, #0]
200029f4:	1dfb      	adds	r3, r7, #7
200029f6:	781b      	ldrb	r3, [r3, #0]
200029f8:	0011      	movs	r1, r2
200029fa:	0018      	movs	r0, r3
200029fc:	f7ff ff7f 	bl	200028fe <graphic_write>
}
20002a00:	46c0      	nop			; (mov r8, r8)
20002a02:	46bd      	mov	sp, r7
20002a04:	b002      	add	sp, #8
20002a06:	bd80      	pop	{r7, pc}

20002a08 <graphic_initialize>:

void graphic_initialize( void ) {
20002a08:	b580      	push	{r7, lr}
20002a0a:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20002a0c:	2040      	movs	r0, #64	; 0x40
20002a0e:	f7ff fe59 	bl	200026c4 <graphic_ctrl_bit_set>
	delay_micro(10);
20002a12:	200a      	movs	r0, #10
20002a14:	f7ff fdf0 	bl	200025f8 <delay_micro>
	
	graphic_ctrl_bit_clear(B_CS1);
20002a18:	2008      	movs	r0, #8
20002a1a:	f7ff fe7b 	bl	20002714 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_CS2);
20002a1e:	2010      	movs	r0, #16
20002a20:	f7ff fe78 	bl	20002714 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RST);
20002a24:	2020      	movs	r0, #32
20002a26:	f7ff fe75 	bl	20002714 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_E);
20002a2a:	2040      	movs	r0, #64	; 0x40
20002a2c:	f7ff fe72 	bl	20002714 <graphic_ctrl_bit_clear>
	//#define SIMULATOR
	delay_milli(30);
20002a30:	201e      	movs	r0, #30
20002a32:	f7ff fdf7 	bl	20002624 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20002a36:	2020      	movs	r0, #32
20002a38:	f7ff fe44 	bl	200026c4 <graphic_ctrl_bit_set>
	delay_milli(100); //...
20002a3c:	2064      	movs	r0, #100	; 0x64
20002a3e:	f7ff fdf1 	bl	20002624 <delay_milli>
	
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
20002a42:	2118      	movs	r1, #24
20002a44:	203e      	movs	r0, #62	; 0x3e
20002a46:	f7ff ff99 	bl	2000297c <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
20002a4a:	2118      	movs	r1, #24
20002a4c:	203f      	movs	r0, #63	; 0x3f
20002a4e:	f7ff ff95 	bl	2000297c <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20002a52:	2118      	movs	r1, #24
20002a54:	20c0      	movs	r0, #192	; 0xc0
20002a56:	f7ff ff91 	bl	2000297c <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
20002a5a:	2118      	movs	r1, #24
20002a5c:	2040      	movs	r0, #64	; 0x40
20002a5e:	f7ff ff8d 	bl	2000297c <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20002a62:	2118      	movs	r1, #24
20002a64:	20b8      	movs	r0, #184	; 0xb8
20002a66:	f7ff ff89 	bl	2000297c <graphic_write_command>
	select_controller(0);
20002a6a:	2000      	movs	r0, #0
20002a6c:	f7ff fe7e 	bl	2000276c <select_controller>
}
20002a70:	46c0      	nop			; (mov r8, r8)
20002a72:	46bd      	mov	sp, r7
20002a74:	bd80      	pop	{r7, pc}

20002a76 <graphic_clear_screen>:
void graphic_clear_screen( void ) {	//Annat i slidesen
20002a76:	b580      	push	{r7, lr}
20002a78:	b082      	sub	sp, #8
20002a7a:	af00      	add	r7, sp, #0
	uint8_t page;
	for (page = 0; page < 8; page++) {
20002a7c:	1dfb      	adds	r3, r7, #7
20002a7e:	2200      	movs	r2, #0
20002a80:	701a      	strb	r2, [r3, #0]
20002a82:	e023      	b.n	20002acc <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
20002a84:	1dfb      	adds	r3, r7, #7
20002a86:	781b      	ldrb	r3, [r3, #0]
20002a88:	2248      	movs	r2, #72	; 0x48
20002a8a:	4252      	negs	r2, r2
20002a8c:	4313      	orrs	r3, r2
20002a8e:	b2db      	uxtb	r3, r3
20002a90:	2118      	movs	r1, #24
20002a92:	0018      	movs	r0, r3
20002a94:	f7ff ff72 	bl	2000297c <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
20002a98:	2118      	movs	r1, #24
20002a9a:	2040      	movs	r0, #64	; 0x40
20002a9c:	f7ff ff6e 	bl	2000297c <graphic_write_command>
		uint8_t add;
		for (add = 0; add < 64; add++) {
20002aa0:	1dbb      	adds	r3, r7, #6
20002aa2:	2200      	movs	r2, #0
20002aa4:	701a      	strb	r2, [r3, #0]
20002aa6:	e008      	b.n	20002aba <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1|B_CS2);
20002aa8:	2118      	movs	r1, #24
20002aaa:	2000      	movs	r0, #0
20002aac:	f7ff ff89 	bl	200029c2 <graphic_write_data>
		for (add = 0; add < 64; add++) {
20002ab0:	1dbb      	adds	r3, r7, #6
20002ab2:	781a      	ldrb	r2, [r3, #0]
20002ab4:	1dbb      	adds	r3, r7, #6
20002ab6:	3201      	adds	r2, #1
20002ab8:	701a      	strb	r2, [r3, #0]
20002aba:	1dbb      	adds	r3, r7, #6
20002abc:	781b      	ldrb	r3, [r3, #0]
20002abe:	2b3f      	cmp	r3, #63	; 0x3f
20002ac0:	d9f2      	bls.n	20002aa8 <graphic_clear_screen+0x32>
	for (page = 0; page < 8; page++) {
20002ac2:	1dfb      	adds	r3, r7, #7
20002ac4:	781a      	ldrb	r2, [r3, #0]
20002ac6:	1dfb      	adds	r3, r7, #7
20002ac8:	3201      	adds	r2, #1
20002aca:	701a      	strb	r2, [r3, #0]
20002acc:	1dfb      	adds	r3, r7, #7
20002ace:	781b      	ldrb	r3, [r3, #0]
20002ad0:	2b07      	cmp	r3, #7
20002ad2:	d9d7      	bls.n	20002a84 <graphic_clear_screen+0xe>
		}
	}
}
20002ad4:	46c0      	nop			; (mov r8, r8)
20002ad6:	46bd      	mov	sp, r7
20002ad8:	b002      	add	sp, #8
20002ada:	bd80      	pop	{r7, pc}

20002adc <pixel>:

/** Color: 1=light 2=gray 3=black*/
void pixel(int x, int y, int set, int color) {
20002adc:	b580      	push	{r7, lr}
20002ade:	b086      	sub	sp, #24
20002ae0:	af00      	add	r7, sp, #0
20002ae2:	60f8      	str	r0, [r7, #12]
20002ae4:	60b9      	str	r1, [r7, #8]
20002ae6:	607a      	str	r2, [r7, #4]
20002ae8:	603b      	str	r3, [r7, #0]
	uint8_t mask;
	int index = 0;
20002aea:	2300      	movs	r3, #0
20002aec:	613b      	str	r3, [r7, #16]
	if( (x > 128 ) || (x < 1) || (y > 64) || (y < 1) ) 
20002aee:	68fb      	ldr	r3, [r7, #12]
20002af0:	2b80      	cmp	r3, #128	; 0x80
20002af2:	dd00      	ble.n	20002af6 <pixel+0x1a>
20002af4:	e0a6      	b.n	20002c44 <pixel+0x168>
20002af6:	68fb      	ldr	r3, [r7, #12]
20002af8:	2b00      	cmp	r3, #0
20002afa:	dc00      	bgt.n	20002afe <pixel+0x22>
20002afc:	e0a2      	b.n	20002c44 <pixel+0x168>
20002afe:	68bb      	ldr	r3, [r7, #8]
20002b00:	2b40      	cmp	r3, #64	; 0x40
20002b02:	dd00      	ble.n	20002b06 <pixel+0x2a>
20002b04:	e09e      	b.n	20002c44 <pixel+0x168>
20002b06:	68bb      	ldr	r3, [r7, #8]
20002b08:	2b00      	cmp	r3, #0
20002b0a:	dc00      	bgt.n	20002b0e <pixel+0x32>
20002b0c:	e09a      	b.n	20002c44 <pixel+0x168>
		return;
	mask = 1 << ((y-1)%8);
20002b0e:	68bb      	ldr	r3, [r7, #8]
20002b10:	3b01      	subs	r3, #1
20002b12:	4a4e      	ldr	r2, [pc, #312]	; (20002c4c <pixel+0x170>)
20002b14:	4013      	ands	r3, r2
20002b16:	d504      	bpl.n	20002b22 <pixel+0x46>
20002b18:	3b01      	subs	r3, #1
20002b1a:	2208      	movs	r2, #8
20002b1c:	4252      	negs	r2, r2
20002b1e:	4313      	orrs	r3, r2
20002b20:	3301      	adds	r3, #1
20002b22:	001a      	movs	r2, r3
20002b24:	2301      	movs	r3, #1
20002b26:	4093      	lsls	r3, r2
20002b28:	001a      	movs	r2, r3
20002b2a:	2317      	movs	r3, #23
20002b2c:	18fb      	adds	r3, r7, r3
20002b2e:	701a      	strb	r2, [r3, #0]
	if(x > 64) {
20002b30:	68fb      	ldr	r3, [r7, #12]
20002b32:	2b40      	cmp	r3, #64	; 0x40
20002b34:	dd05      	ble.n	20002b42 <pixel+0x66>
		x -= 65;
20002b36:	68fb      	ldr	r3, [r7, #12]
20002b38:	3b41      	subs	r3, #65	; 0x41
20002b3a:	60fb      	str	r3, [r7, #12]
		index = 512;
20002b3c:	2380      	movs	r3, #128	; 0x80
20002b3e:	009b      	lsls	r3, r3, #2
20002b40:	613b      	str	r3, [r7, #16]
	}
	index += x + ((y-1)/8)*64;
20002b42:	68bb      	ldr	r3, [r7, #8]
20002b44:	3b01      	subs	r3, #1
20002b46:	2b00      	cmp	r3, #0
20002b48:	da00      	bge.n	20002b4c <pixel+0x70>
20002b4a:	3307      	adds	r3, #7
20002b4c:	10db      	asrs	r3, r3, #3
20002b4e:	019a      	lsls	r2, r3, #6
20002b50:	68fb      	ldr	r3, [r7, #12]
20002b52:	18d3      	adds	r3, r2, r3
20002b54:	693a      	ldr	r2, [r7, #16]
20002b56:	18d3      	adds	r3, r2, r3
20002b58:	613b      	str	r3, [r7, #16]

	if(set == 0)
20002b5a:	687b      	ldr	r3, [r7, #4]
20002b5c:	2b00      	cmp	r3, #0
20002b5e:	d106      	bne.n	20002b6e <pixel+0x92>
		mask = ~mask;
20002b60:	2317      	movs	r3, #23
20002b62:	18fb      	adds	r3, r7, r3
20002b64:	2217      	movs	r2, #23
20002b66:	18ba      	adds	r2, r7, r2
20002b68:	7812      	ldrb	r2, [r2, #0]
20002b6a:	43d2      	mvns	r2, r2
20002b6c:	701a      	strb	r2, [r3, #0]

	switch (color) {
20002b6e:	683b      	ldr	r3, [r7, #0]
20002b70:	2b02      	cmp	r3, #2
20002b72:	d024      	beq.n	20002bbe <pixel+0xe2>
20002b74:	2b03      	cmp	r3, #3
20002b76:	d043      	beq.n	20002c00 <pixel+0x124>
20002b78:	2b01      	cmp	r3, #1
20002b7a:	d164      	bne.n	20002c46 <pixel+0x16a>
		case 1:	
			if(set)
20002b7c:	687b      	ldr	r3, [r7, #4]
20002b7e:	2b00      	cmp	r3, #0
20002b80:	d00e      	beq.n	20002ba0 <pixel+0xc4>
				backBufferLight[index] |= mask;
20002b82:	4a33      	ldr	r2, [pc, #204]	; (20002c50 <pixel+0x174>)
20002b84:	693b      	ldr	r3, [r7, #16]
20002b86:	18d3      	adds	r3, r2, r3
20002b88:	781a      	ldrb	r2, [r3, #0]
20002b8a:	2317      	movs	r3, #23
20002b8c:	18fb      	adds	r3, r7, r3
20002b8e:	781b      	ldrb	r3, [r3, #0]
20002b90:	4313      	orrs	r3, r2
20002b92:	b2d9      	uxtb	r1, r3
20002b94:	4a2e      	ldr	r2, [pc, #184]	; (20002c50 <pixel+0x174>)
20002b96:	693b      	ldr	r3, [r7, #16]
20002b98:	18d3      	adds	r3, r2, r3
20002b9a:	1c0a      	adds	r2, r1, #0
20002b9c:	701a      	strb	r2, [r3, #0]
			else
				backBufferLight[index] &= mask;
			break;
20002b9e:	e052      	b.n	20002c46 <pixel+0x16a>
				backBufferLight[index] &= mask;
20002ba0:	4a2b      	ldr	r2, [pc, #172]	; (20002c50 <pixel+0x174>)
20002ba2:	693b      	ldr	r3, [r7, #16]
20002ba4:	18d3      	adds	r3, r2, r3
20002ba6:	781b      	ldrb	r3, [r3, #0]
20002ba8:	2217      	movs	r2, #23
20002baa:	18ba      	adds	r2, r7, r2
20002bac:	7812      	ldrb	r2, [r2, #0]
20002bae:	4013      	ands	r3, r2
20002bb0:	b2d9      	uxtb	r1, r3
20002bb2:	4a27      	ldr	r2, [pc, #156]	; (20002c50 <pixel+0x174>)
20002bb4:	693b      	ldr	r3, [r7, #16]
20002bb6:	18d3      	adds	r3, r2, r3
20002bb8:	1c0a      	adds	r2, r1, #0
20002bba:	701a      	strb	r2, [r3, #0]
			break;
20002bbc:	e043      	b.n	20002c46 <pixel+0x16a>
		
		case 2:	
			if(set)
20002bbe:	687b      	ldr	r3, [r7, #4]
20002bc0:	2b00      	cmp	r3, #0
20002bc2:	d00e      	beq.n	20002be2 <pixel+0x106>
				backBufferGray[index] |= mask;
20002bc4:	4a23      	ldr	r2, [pc, #140]	; (20002c54 <pixel+0x178>)
20002bc6:	693b      	ldr	r3, [r7, #16]
20002bc8:	18d3      	adds	r3, r2, r3
20002bca:	781a      	ldrb	r2, [r3, #0]
20002bcc:	2317      	movs	r3, #23
20002bce:	18fb      	adds	r3, r7, r3
20002bd0:	781b      	ldrb	r3, [r3, #0]
20002bd2:	4313      	orrs	r3, r2
20002bd4:	b2d9      	uxtb	r1, r3
20002bd6:	4a1f      	ldr	r2, [pc, #124]	; (20002c54 <pixel+0x178>)
20002bd8:	693b      	ldr	r3, [r7, #16]
20002bda:	18d3      	adds	r3, r2, r3
20002bdc:	1c0a      	adds	r2, r1, #0
20002bde:	701a      	strb	r2, [r3, #0]
			else
				backBufferGray[index] &= mask;
			break;
20002be0:	e031      	b.n	20002c46 <pixel+0x16a>
				backBufferGray[index] &= mask;
20002be2:	4a1c      	ldr	r2, [pc, #112]	; (20002c54 <pixel+0x178>)
20002be4:	693b      	ldr	r3, [r7, #16]
20002be6:	18d3      	adds	r3, r2, r3
20002be8:	781b      	ldrb	r3, [r3, #0]
20002bea:	2217      	movs	r2, #23
20002bec:	18ba      	adds	r2, r7, r2
20002bee:	7812      	ldrb	r2, [r2, #0]
20002bf0:	4013      	ands	r3, r2
20002bf2:	b2d9      	uxtb	r1, r3
20002bf4:	4a17      	ldr	r2, [pc, #92]	; (20002c54 <pixel+0x178>)
20002bf6:	693b      	ldr	r3, [r7, #16]
20002bf8:	18d3      	adds	r3, r2, r3
20002bfa:	1c0a      	adds	r2, r1, #0
20002bfc:	701a      	strb	r2, [r3, #0]
			break;
20002bfe:	e022      	b.n	20002c46 <pixel+0x16a>
		
		case 3:	
			if(set)
20002c00:	687b      	ldr	r3, [r7, #4]
20002c02:	2b00      	cmp	r3, #0
20002c04:	d00e      	beq.n	20002c24 <pixel+0x148>
				backBuffer[index] |= mask;
20002c06:	4a14      	ldr	r2, [pc, #80]	; (20002c58 <pixel+0x17c>)
20002c08:	693b      	ldr	r3, [r7, #16]
20002c0a:	18d3      	adds	r3, r2, r3
20002c0c:	781a      	ldrb	r2, [r3, #0]
20002c0e:	2317      	movs	r3, #23
20002c10:	18fb      	adds	r3, r7, r3
20002c12:	781b      	ldrb	r3, [r3, #0]
20002c14:	4313      	orrs	r3, r2
20002c16:	b2d9      	uxtb	r1, r3
20002c18:	4a0f      	ldr	r2, [pc, #60]	; (20002c58 <pixel+0x17c>)
20002c1a:	693b      	ldr	r3, [r7, #16]
20002c1c:	18d3      	adds	r3, r2, r3
20002c1e:	1c0a      	adds	r2, r1, #0
20002c20:	701a      	strb	r2, [r3, #0]
			else
				backBuffer[index] &= mask;
			break;
20002c22:	e010      	b.n	20002c46 <pixel+0x16a>
				backBuffer[index] &= mask;
20002c24:	4a0c      	ldr	r2, [pc, #48]	; (20002c58 <pixel+0x17c>)
20002c26:	693b      	ldr	r3, [r7, #16]
20002c28:	18d3      	adds	r3, r2, r3
20002c2a:	781b      	ldrb	r3, [r3, #0]
20002c2c:	2217      	movs	r2, #23
20002c2e:	18ba      	adds	r2, r7, r2
20002c30:	7812      	ldrb	r2, [r2, #0]
20002c32:	4013      	ands	r3, r2
20002c34:	b2d9      	uxtb	r1, r3
20002c36:	4a08      	ldr	r2, [pc, #32]	; (20002c58 <pixel+0x17c>)
20002c38:	693b      	ldr	r3, [r7, #16]
20002c3a:	18d3      	adds	r3, r2, r3
20002c3c:	1c0a      	adds	r2, r1, #0
20002c3e:	701a      	strb	r2, [r3, #0]
			break;
20002c40:	46c0      	nop			; (mov r8, r8)
20002c42:	e000      	b.n	20002c46 <pixel+0x16a>
		return;
20002c44:	46c0      	nop			; (mov r8, r8)
			
	}

}
20002c46:	46bd      	mov	sp, r7
20002c48:	b006      	add	sp, #24
20002c4a:	bd80      	pop	{r7, pc}
20002c4c:	80000007 	andhi	r0, r0, r7
20002c50:	20005fbc 			; <UNDEFINED> instruction: 0x20005fbc
20002c54:	200047bc 			; <UNDEFINED> instruction: 0x200047bc
20002c58:	20004fbc 			; <UNDEFINED> instruction: 0x20004fbc

20002c5c <pixel2>:


void pixel2(int x, int y, int set) {
20002c5c:	b580      	push	{r7, lr}
20002c5e:	b088      	sub	sp, #32
20002c60:	af00      	add	r7, sp, #0
20002c62:	60f8      	str	r0, [r7, #12]
20002c64:	60b9      	str	r1, [r7, #8]
20002c66:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20002c68:	68fb      	ldr	r3, [r7, #12]
20002c6a:	2b00      	cmp	r3, #0
20002c6c:	dc00      	bgt.n	20002c70 <pixel2+0x14>
20002c6e:	e0bc      	b.n	20002dea <pixel2+0x18e>
20002c70:	68bb      	ldr	r3, [r7, #8]
20002c72:	2b00      	cmp	r3, #0
20002c74:	dc00      	bgt.n	20002c78 <pixel2+0x1c>
20002c76:	e0b8      	b.n	20002dea <pixel2+0x18e>
20002c78:	68fb      	ldr	r3, [r7, #12]
20002c7a:	2b80      	cmp	r3, #128	; 0x80
20002c7c:	dd00      	ble.n	20002c80 <pixel2+0x24>
20002c7e:	e0b4      	b.n	20002dea <pixel2+0x18e>
20002c80:	68bb      	ldr	r3, [r7, #8]
20002c82:	2b40      	cmp	r3, #64	; 0x40
20002c84:	dd00      	ble.n	20002c88 <pixel2+0x2c>
20002c86:	e0b0      	b.n	20002dea <pixel2+0x18e>
	index = (y-1)/8;
20002c88:	68bb      	ldr	r3, [r7, #8]
20002c8a:	3b01      	subs	r3, #1
20002c8c:	2b00      	cmp	r3, #0
20002c8e:	da00      	bge.n	20002c92 <pixel2+0x36>
20002c90:	3307      	adds	r3, #7
20002c92:	10db      	asrs	r3, r3, #3
20002c94:	61bb      	str	r3, [r7, #24]
	switch( (y-1)%8 ) {
20002c96:	68bb      	ldr	r3, [r7, #8]
20002c98:	3b01      	subs	r3, #1
20002c9a:	4a56      	ldr	r2, [pc, #344]	; (20002df4 <pixel2+0x198>)
20002c9c:	4013      	ands	r3, r2
20002c9e:	d504      	bpl.n	20002caa <pixel2+0x4e>
20002ca0:	3b01      	subs	r3, #1
20002ca2:	2208      	movs	r2, #8
20002ca4:	4252      	negs	r2, r2
20002ca6:	4313      	orrs	r3, r2
20002ca8:	3301      	adds	r3, #1
20002caa:	2b07      	cmp	r3, #7
20002cac:	d82c      	bhi.n	20002d08 <pixel2+0xac>
20002cae:	009a      	lsls	r2, r3, #2
20002cb0:	4b51      	ldr	r3, [pc, #324]	; (20002df8 <pixel2+0x19c>)
20002cb2:	18d3      	adds	r3, r2, r3
20002cb4:	681b      	ldr	r3, [r3, #0]
20002cb6:	469f      	mov	pc, r3
		case 0: mask = 1; break;
20002cb8:	231f      	movs	r3, #31
20002cba:	18fb      	adds	r3, r7, r3
20002cbc:	2201      	movs	r2, #1
20002cbe:	701a      	strb	r2, [r3, #0]
20002cc0:	e022      	b.n	20002d08 <pixel2+0xac>
		case 1: mask = 2; break;
20002cc2:	231f      	movs	r3, #31
20002cc4:	18fb      	adds	r3, r7, r3
20002cc6:	2202      	movs	r2, #2
20002cc8:	701a      	strb	r2, [r3, #0]
20002cca:	e01d      	b.n	20002d08 <pixel2+0xac>
		case 2: mask = 4; break;
20002ccc:	231f      	movs	r3, #31
20002cce:	18fb      	adds	r3, r7, r3
20002cd0:	2204      	movs	r2, #4
20002cd2:	701a      	strb	r2, [r3, #0]
20002cd4:	e018      	b.n	20002d08 <pixel2+0xac>
		case 3: mask = 8; break;
20002cd6:	231f      	movs	r3, #31
20002cd8:	18fb      	adds	r3, r7, r3
20002cda:	2208      	movs	r2, #8
20002cdc:	701a      	strb	r2, [r3, #0]
20002cde:	e013      	b.n	20002d08 <pixel2+0xac>
		case 4: mask = 0x10; break;
20002ce0:	231f      	movs	r3, #31
20002ce2:	18fb      	adds	r3, r7, r3
20002ce4:	2210      	movs	r2, #16
20002ce6:	701a      	strb	r2, [r3, #0]
20002ce8:	e00e      	b.n	20002d08 <pixel2+0xac>
		case 5: mask = 0x20; break;
20002cea:	231f      	movs	r3, #31
20002cec:	18fb      	adds	r3, r7, r3
20002cee:	2220      	movs	r2, #32
20002cf0:	701a      	strb	r2, [r3, #0]
20002cf2:	e009      	b.n	20002d08 <pixel2+0xac>
		case 6: mask = 0x40; break;
20002cf4:	231f      	movs	r3, #31
20002cf6:	18fb      	adds	r3, r7, r3
20002cf8:	2240      	movs	r2, #64	; 0x40
20002cfa:	701a      	strb	r2, [r3, #0]
20002cfc:	e004      	b.n	20002d08 <pixel2+0xac>
		case 7: mask = 0x80; break;
20002cfe:	231f      	movs	r3, #31
20002d00:	18fb      	adds	r3, r7, r3
20002d02:	2280      	movs	r2, #128	; 0x80
20002d04:	701a      	strb	r2, [r3, #0]
20002d06:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0)
20002d08:	687b      	ldr	r3, [r7, #4]
20002d0a:	2b00      	cmp	r3, #0
20002d0c:	d106      	bne.n	20002d1c <pixel2+0xc0>
		mask = ~mask;
20002d0e:	231f      	movs	r3, #31
20002d10:	18fb      	adds	r3, r7, r3
20002d12:	221f      	movs	r2, #31
20002d14:	18ba      	adds	r2, r7, r2
20002d16:	7812      	ldrb	r2, [r2, #0]
20002d18:	43d2      	mvns	r2, r2
20002d1a:	701a      	strb	r2, [r3, #0]
	
	if(x > 64){
20002d1c:	68fb      	ldr	r3, [r7, #12]
20002d1e:	2b40      	cmp	r3, #64	; 0x40
20002d20:	dd07      	ble.n	20002d32 <pixel2+0xd6>
		controller = B_CS2;
20002d22:	231e      	movs	r3, #30
20002d24:	18fb      	adds	r3, r7, r3
20002d26:	2210      	movs	r2, #16
20002d28:	701a      	strb	r2, [r3, #0]
		x = x - 65;
20002d2a:	68fb      	ldr	r3, [r7, #12]
20002d2c:	3b41      	subs	r3, #65	; 0x41
20002d2e:	60fb      	str	r3, [r7, #12]
20002d30:	e006      	b.n	20002d40 <pixel2+0xe4>
	} else {
		controller = B_CS1;
20002d32:	231e      	movs	r3, #30
20002d34:	18fb      	adds	r3, r7, r3
20002d36:	2208      	movs	r2, #8
20002d38:	701a      	strb	r2, [r3, #0]
		x = x-1;
20002d3a:	68fb      	ldr	r3, [r7, #12]
20002d3c:	3b01      	subs	r3, #1
20002d3e:	60fb      	str	r3, [r7, #12]
	}
	graphic_write_command(LCD_SET_ADD | x, controller );
20002d40:	68fb      	ldr	r3, [r7, #12]
20002d42:	b25b      	sxtb	r3, r3
20002d44:	2240      	movs	r2, #64	; 0x40
20002d46:	4313      	orrs	r3, r2
20002d48:	b25b      	sxtb	r3, r3
20002d4a:	b2da      	uxtb	r2, r3
20002d4c:	231e      	movs	r3, #30
20002d4e:	18fb      	adds	r3, r7, r3
20002d50:	781b      	ldrb	r3, [r3, #0]
20002d52:	0019      	movs	r1, r3
20002d54:	0010      	movs	r0, r2
20002d56:	f7ff fe11 	bl	2000297c <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller );
20002d5a:	69bb      	ldr	r3, [r7, #24]
20002d5c:	b25b      	sxtb	r3, r3
20002d5e:	2248      	movs	r2, #72	; 0x48
20002d60:	4252      	negs	r2, r2
20002d62:	4313      	orrs	r3, r2
20002d64:	b25b      	sxtb	r3, r3
20002d66:	b2da      	uxtb	r2, r3
20002d68:	231e      	movs	r3, #30
20002d6a:	18fb      	adds	r3, r7, r3
20002d6c:	781b      	ldrb	r3, [r3, #0]
20002d6e:	0019      	movs	r1, r3
20002d70:	0010      	movs	r0, r2
20002d72:	f7ff fe03 	bl	2000297c <graphic_write_command>
	
	c = graphic_read_data(controller);
20002d76:	231e      	movs	r3, #30
20002d78:	18fb      	adds	r3, r7, r3
20002d7a:	781b      	ldrb	r3, [r3, #0]
20002d7c:	0018      	movs	r0, r3
20002d7e:	f7ff fda9 	bl	200028d4 <graphic_read_data>
20002d82:	0002      	movs	r2, r0
20002d84:	2317      	movs	r3, #23
20002d86:	18fb      	adds	r3, r7, r3
20002d88:	701a      	strb	r2, [r3, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
20002d8a:	68fb      	ldr	r3, [r7, #12]
20002d8c:	b25b      	sxtb	r3, r3
20002d8e:	2240      	movs	r2, #64	; 0x40
20002d90:	4313      	orrs	r3, r2
20002d92:	b25b      	sxtb	r3, r3
20002d94:	b2da      	uxtb	r2, r3
20002d96:	231e      	movs	r3, #30
20002d98:	18fb      	adds	r3, r7, r3
20002d9a:	781b      	ldrb	r3, [r3, #0]
20002d9c:	0019      	movs	r1, r3
20002d9e:	0010      	movs	r0, r2
20002da0:	f7ff fdec 	bl	2000297c <graphic_write_command>
	
	if(set)
20002da4:	687b      	ldr	r3, [r7, #4]
20002da6:	2b00      	cmp	r3, #0
20002da8:	d00a      	beq.n	20002dc0 <pixel2+0x164>
		mask = mask | c;
20002daa:	231f      	movs	r3, #31
20002dac:	18fb      	adds	r3, r7, r3
20002dae:	221f      	movs	r2, #31
20002db0:	18b9      	adds	r1, r7, r2
20002db2:	2217      	movs	r2, #23
20002db4:	18ba      	adds	r2, r7, r2
20002db6:	7809      	ldrb	r1, [r1, #0]
20002db8:	7812      	ldrb	r2, [r2, #0]
20002dba:	430a      	orrs	r2, r1
20002dbc:	701a      	strb	r2, [r3, #0]
20002dbe:	e009      	b.n	20002dd4 <pixel2+0x178>
	else
		mask = mask & c;
20002dc0:	231f      	movs	r3, #31
20002dc2:	18fb      	adds	r3, r7, r3
20002dc4:	221f      	movs	r2, #31
20002dc6:	18ba      	adds	r2, r7, r2
20002dc8:	2117      	movs	r1, #23
20002dca:	1879      	adds	r1, r7, r1
20002dcc:	7812      	ldrb	r2, [r2, #0]
20002dce:	7809      	ldrb	r1, [r1, #0]
20002dd0:	400a      	ands	r2, r1
20002dd2:	701a      	strb	r2, [r3, #0]
	
	graphic_write_data(mask, controller);
20002dd4:	231e      	movs	r3, #30
20002dd6:	18fb      	adds	r3, r7, r3
20002dd8:	781a      	ldrb	r2, [r3, #0]
20002dda:	231f      	movs	r3, #31
20002ddc:	18fb      	adds	r3, r7, r3
20002dde:	781b      	ldrb	r3, [r3, #0]
20002de0:	0011      	movs	r1, r2
20002de2:	0018      	movs	r0, r3
20002de4:	f7ff fded 	bl	200029c2 <graphic_write_data>
20002de8:	e000      	b.n	20002dec <pixel2+0x190>
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20002dea:	46c0      	nop			; (mov r8, r8)
}
20002dec:	46bd      	mov	sp, r7
20002dee:	b008      	add	sp, #32
20002df0:	bd80      	pop	{r7, pc}
20002df2:	46c0      	nop			; (mov r8, r8)
20002df4:	80000007 	andhi	r0, r0, r7
20002df8:	2000a640 	andcs	sl, r0, r0, asr #12

20002dfc <graphic_draw_screen>:

void graphic_draw_screen(uint8_t *buffer) {
20002dfc:	b580      	push	{r7, lr}
20002dfe:	b086      	sub	sp, #24
20002e00:	af00      	add	r7, sp, #0
20002e02:	6078      	str	r0, [r7, #4]
	uint8_t i, j, controller, c;
	unsigned int k = 0;
20002e04:	2300      	movs	r3, #0
20002e06:	613b      	str	r3, [r7, #16]
	for(c = 0; c < 2; c++) {
20002e08:	2315      	movs	r3, #21
20002e0a:	18fb      	adds	r3, r7, r3
20002e0c:	2200      	movs	r2, #0
20002e0e:	701a      	strb	r2, [r3, #0]
20002e10:	e056      	b.n	20002ec0 <graphic_draw_screen+0xc4>
		controller = (c == 0) ? B_CS1 : B_CS2;
20002e12:	2315      	movs	r3, #21
20002e14:	18fb      	adds	r3, r7, r3
20002e16:	781b      	ldrb	r3, [r3, #0]
20002e18:	2b00      	cmp	r3, #0
20002e1a:	d101      	bne.n	20002e20 <graphic_draw_screen+0x24>
20002e1c:	2208      	movs	r2, #8
20002e1e:	e000      	b.n	20002e22 <graphic_draw_screen+0x26>
20002e20:	2210      	movs	r2, #16
20002e22:	230f      	movs	r3, #15
20002e24:	18fb      	adds	r3, r7, r3
20002e26:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 8; j++) {
20002e28:	2316      	movs	r3, #22
20002e2a:	18fb      	adds	r3, r7, r3
20002e2c:	2200      	movs	r2, #0
20002e2e:	701a      	strb	r2, [r3, #0]
20002e30:	e03a      	b.n	20002ea8 <graphic_draw_screen+0xac>
			graphic_write_command(LCD_SET_PAGE | j, controller);
20002e32:	2316      	movs	r3, #22
20002e34:	18fb      	adds	r3, r7, r3
20002e36:	781b      	ldrb	r3, [r3, #0]
20002e38:	2248      	movs	r2, #72	; 0x48
20002e3a:	4252      	negs	r2, r2
20002e3c:	4313      	orrs	r3, r2
20002e3e:	b2da      	uxtb	r2, r3
20002e40:	230f      	movs	r3, #15
20002e42:	18fb      	adds	r3, r7, r3
20002e44:	781b      	ldrb	r3, [r3, #0]
20002e46:	0019      	movs	r1, r3
20002e48:	0010      	movs	r0, r2
20002e4a:	f7ff fd97 	bl	2000297c <graphic_write_command>
			graphic_write_command(LCD_SET_ADD | 0, controller);
20002e4e:	230f      	movs	r3, #15
20002e50:	18fb      	adds	r3, r7, r3
20002e52:	781b      	ldrb	r3, [r3, #0]
20002e54:	0019      	movs	r1, r3
20002e56:	2040      	movs	r0, #64	; 0x40
20002e58:	f7ff fd90 	bl	2000297c <graphic_write_command>
			for(i = 0; i <= 63; i++, k++) {
20002e5c:	2317      	movs	r3, #23
20002e5e:	18fb      	adds	r3, r7, r3
20002e60:	2200      	movs	r2, #0
20002e62:	701a      	strb	r2, [r3, #0]
20002e64:	e014      	b.n	20002e90 <graphic_draw_screen+0x94>
				graphic_write_data(buffer[k], controller);
20002e66:	687a      	ldr	r2, [r7, #4]
20002e68:	693b      	ldr	r3, [r7, #16]
20002e6a:	18d3      	adds	r3, r2, r3
20002e6c:	781a      	ldrb	r2, [r3, #0]
20002e6e:	230f      	movs	r3, #15
20002e70:	18fb      	adds	r3, r7, r3
20002e72:	781b      	ldrb	r3, [r3, #0]
20002e74:	0019      	movs	r1, r3
20002e76:	0010      	movs	r0, r2
20002e78:	f7ff fda3 	bl	200029c2 <graphic_write_data>
			for(i = 0; i <= 63; i++, k++) {
20002e7c:	2317      	movs	r3, #23
20002e7e:	18fb      	adds	r3, r7, r3
20002e80:	781a      	ldrb	r2, [r3, #0]
20002e82:	2317      	movs	r3, #23
20002e84:	18fb      	adds	r3, r7, r3
20002e86:	3201      	adds	r2, #1
20002e88:	701a      	strb	r2, [r3, #0]
20002e8a:	693b      	ldr	r3, [r7, #16]
20002e8c:	3301      	adds	r3, #1
20002e8e:	613b      	str	r3, [r7, #16]
20002e90:	2317      	movs	r3, #23
20002e92:	18fb      	adds	r3, r7, r3
20002e94:	781b      	ldrb	r3, [r3, #0]
20002e96:	2b3f      	cmp	r3, #63	; 0x3f
20002e98:	d9e5      	bls.n	20002e66 <graphic_draw_screen+0x6a>
		for(j = 0; j < 8; j++) {
20002e9a:	2316      	movs	r3, #22
20002e9c:	18fb      	adds	r3, r7, r3
20002e9e:	781a      	ldrb	r2, [r3, #0]
20002ea0:	2316      	movs	r3, #22
20002ea2:	18fb      	adds	r3, r7, r3
20002ea4:	3201      	adds	r2, #1
20002ea6:	701a      	strb	r2, [r3, #0]
20002ea8:	2316      	movs	r3, #22
20002eaa:	18fb      	adds	r3, r7, r3
20002eac:	781b      	ldrb	r3, [r3, #0]
20002eae:	2b07      	cmp	r3, #7
20002eb0:	d9bf      	bls.n	20002e32 <graphic_draw_screen+0x36>
	for(c = 0; c < 2; c++) {
20002eb2:	2315      	movs	r3, #21
20002eb4:	18fb      	adds	r3, r7, r3
20002eb6:	781a      	ldrb	r2, [r3, #0]
20002eb8:	2315      	movs	r3, #21
20002eba:	18fb      	adds	r3, r7, r3
20002ebc:	3201      	adds	r2, #1
20002ebe:	701a      	strb	r2, [r3, #0]
20002ec0:	2315      	movs	r3, #21
20002ec2:	18fb      	adds	r3, r7, r3
20002ec4:	781b      	ldrb	r3, [r3, #0]
20002ec6:	2b01      	cmp	r3, #1
20002ec8:	d9a3      	bls.n	20002e12 <graphic_draw_screen+0x16>
			}
		}
	}
}
20002eca:	46c0      	nop			; (mov r8, r8)
20002ecc:	46bd      	mov	sp, r7
20002ece:	b006      	add	sp, #24
20002ed0:	bd80      	pop	{r7, pc}

20002ed2 <draw_sprite>:


void grayScaleTest( void );


void draw_sprite(sprite* s, int x, int y, int set, int color) {
20002ed2:	b5b0      	push	{r4, r5, r7, lr}
20002ed4:	b08a      	sub	sp, #40	; 0x28
20002ed6:	af00      	add	r7, sp, #0
20002ed8:	60f8      	str	r0, [r7, #12]
20002eda:	60b9      	str	r1, [r7, #8]
20002edc:	607a      	str	r2, [r7, #4]
20002ede:	603b      	str	r3, [r7, #0]
	int i,j,k, width_in_bytes;
	if (s->width % 8 == 0)
20002ee0:	68fb      	ldr	r3, [r7, #12]
20002ee2:	681b      	ldr	r3, [r3, #0]
20002ee4:	2207      	movs	r2, #7
20002ee6:	4013      	ands	r3, r2
20002ee8:	d104      	bne.n	20002ef4 <draw_sprite+0x22>
		width_in_bytes = s->width / 8;
20002eea:	68fb      	ldr	r3, [r7, #12]
20002eec:	681b      	ldr	r3, [r3, #0]
20002eee:	08db      	lsrs	r3, r3, #3
20002ef0:	61bb      	str	r3, [r7, #24]
20002ef2:	e004      	b.n	20002efe <draw_sprite+0x2c>
	else
		width_in_bytes = (s->width / 8) + 1;
20002ef4:	68fb      	ldr	r3, [r7, #12]
20002ef6:	681b      	ldr	r3, [r3, #0]
20002ef8:	08db      	lsrs	r3, r3, #3
20002efa:	3301      	adds	r3, #1
20002efc:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < s->height; i++)
20002efe:	2300      	movs	r3, #0
20002f00:	627b      	str	r3, [r7, #36]	; 0x24
20002f02:	e06a      	b.n	20002fda <draw_sprite+0x108>
		for (j = 0; j < width_in_bytes; j++) {
20002f04:	2300      	movs	r3, #0
20002f06:	623b      	str	r3, [r7, #32]
20002f08:	e060      	b.n	20002fcc <draw_sprite+0xfa>
			unsigned char byte = s->data[i * width_in_bytes + j];
20002f0a:	68fb      	ldr	r3, [r7, #12]
20002f0c:	689b      	ldr	r3, [r3, #8]
20002f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20002f10:	69b9      	ldr	r1, [r7, #24]
20002f12:	4351      	muls	r1, r2
20002f14:	6a3a      	ldr	r2, [r7, #32]
20002f16:	188a      	adds	r2, r1, r2
20002f18:	189a      	adds	r2, r3, r2
20002f1a:	2317      	movs	r3, #23
20002f1c:	18fb      	adds	r3, r7, r3
20002f1e:	7812      	ldrb	r2, [r2, #0]
20002f20:	701a      	strb	r2, [r3, #0]
			for (k =0; k < 8; k++) {
20002f22:	2300      	movs	r3, #0
20002f24:	61fb      	str	r3, [r7, #28]
20002f26:	e04b      	b.n	20002fc0 <draw_sprite+0xee>
				if (byte & (1 << k)){
20002f28:	2317      	movs	r3, #23
20002f2a:	18fb      	adds	r3, r7, r3
20002f2c:	781a      	ldrb	r2, [r3, #0]
20002f2e:	69fb      	ldr	r3, [r7, #28]
20002f30:	411a      	asrs	r2, r3
20002f32:	0013      	movs	r3, r2
20002f34:	2201      	movs	r2, #1
20002f36:	4013      	ands	r3, r2
20002f38:	d03f      	beq.n	20002fba <draw_sprite+0xe8>
					pixel(8 * j + k + x + 1, i + y + 1, set, color);
20002f3a:	6a3b      	ldr	r3, [r7, #32]
20002f3c:	00da      	lsls	r2, r3, #3
20002f3e:	69fb      	ldr	r3, [r7, #28]
20002f40:	18d2      	adds	r2, r2, r3
20002f42:	68bb      	ldr	r3, [r7, #8]
20002f44:	18d3      	adds	r3, r2, r3
20002f46:	1c58      	adds	r0, r3, #1
20002f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20002f4a:	687b      	ldr	r3, [r7, #4]
20002f4c:	18d3      	adds	r3, r2, r3
20002f4e:	1c59      	adds	r1, r3, #1
20002f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20002f52:	683a      	ldr	r2, [r7, #0]
20002f54:	f7ff fdc2 	bl	20002adc <pixel>
					
					if(set) {	//Remove the other colors from this pixel
20002f58:	683b      	ldr	r3, [r7, #0]
20002f5a:	2b00      	cmp	r3, #0
20002f5c:	d02d      	beq.n	20002fba <draw_sprite+0xe8>
						pixel(8 * j + k + x + 1, i + y + 1, 0, (color+1) % 3);
20002f5e:	6a3b      	ldr	r3, [r7, #32]
20002f60:	00da      	lsls	r2, r3, #3
20002f62:	69fb      	ldr	r3, [r7, #28]
20002f64:	18d2      	adds	r2, r2, r3
20002f66:	68bb      	ldr	r3, [r7, #8]
20002f68:	18d3      	adds	r3, r2, r3
20002f6a:	1c5c      	adds	r4, r3, #1
20002f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20002f6e:	687b      	ldr	r3, [r7, #4]
20002f70:	18d3      	adds	r3, r2, r3
20002f72:	1c5d      	adds	r5, r3, #1
20002f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20002f76:	3301      	adds	r3, #1
20002f78:	2103      	movs	r1, #3
20002f7a:	0018      	movs	r0, r3
20002f7c:	f000 ff94 	bl	20003ea8 <__aeabi_idivmod>
20002f80:	000b      	movs	r3, r1
20002f82:	2200      	movs	r2, #0
20002f84:	0029      	movs	r1, r5
20002f86:	0020      	movs	r0, r4
20002f88:	f7ff fda8 	bl	20002adc <pixel>
						pixel(8 * j + k + x + 1, i + y + 1, 0, (color+2) % 3);
20002f8c:	6a3b      	ldr	r3, [r7, #32]
20002f8e:	00da      	lsls	r2, r3, #3
20002f90:	69fb      	ldr	r3, [r7, #28]
20002f92:	18d2      	adds	r2, r2, r3
20002f94:	68bb      	ldr	r3, [r7, #8]
20002f96:	18d3      	adds	r3, r2, r3
20002f98:	1c5c      	adds	r4, r3, #1
20002f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20002f9c:	687b      	ldr	r3, [r7, #4]
20002f9e:	18d3      	adds	r3, r2, r3
20002fa0:	1c5d      	adds	r5, r3, #1
20002fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20002fa4:	3302      	adds	r3, #2
20002fa6:	2103      	movs	r1, #3
20002fa8:	0018      	movs	r0, r3
20002faa:	f000 ff7d 	bl	20003ea8 <__aeabi_idivmod>
20002fae:	000b      	movs	r3, r1
20002fb0:	2200      	movs	r2, #0
20002fb2:	0029      	movs	r1, r5
20002fb4:	0020      	movs	r0, r4
20002fb6:	f7ff fd91 	bl	20002adc <pixel>
			for (k =0; k < 8; k++) {
20002fba:	69fb      	ldr	r3, [r7, #28]
20002fbc:	3301      	adds	r3, #1
20002fbe:	61fb      	str	r3, [r7, #28]
20002fc0:	69fb      	ldr	r3, [r7, #28]
20002fc2:	2b07      	cmp	r3, #7
20002fc4:	ddb0      	ble.n	20002f28 <draw_sprite+0x56>
		for (j = 0; j < width_in_bytes; j++) {
20002fc6:	6a3b      	ldr	r3, [r7, #32]
20002fc8:	3301      	adds	r3, #1
20002fca:	623b      	str	r3, [r7, #32]
20002fcc:	6a3a      	ldr	r2, [r7, #32]
20002fce:	69bb      	ldr	r3, [r7, #24]
20002fd0:	429a      	cmp	r2, r3
20002fd2:	db9a      	blt.n	20002f0a <draw_sprite+0x38>
	for (i = 0; i < s->height; i++)
20002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002fd6:	3301      	adds	r3, #1
20002fd8:	627b      	str	r3, [r7, #36]	; 0x24
20002fda:	68fb      	ldr	r3, [r7, #12]
20002fdc:	685a      	ldr	r2, [r3, #4]
20002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002fe0:	429a      	cmp	r2, r3
20002fe2:	d88f      	bhi.n	20002f04 <draw_sprite+0x32>
					}
				}
			}
		}
}
20002fe4:	46c0      	nop			; (mov r8, r8)
20002fe6:	46bd      	mov	sp, r7
20002fe8:	b00a      	add	sp, #40	; 0x28
20002fea:	bdb0      	pop	{r4, r5, r7, pc}

20002fec <fillRectangle>:

void fillRectangle( int x, int y, int width, int height ){
20002fec:	b580      	push	{r7, lr}
20002fee:	b086      	sub	sp, #24
20002ff0:	af00      	add	r7, sp, #0
20002ff2:	60f8      	str	r0, [r7, #12]
20002ff4:	60b9      	str	r1, [r7, #8]
20002ff6:	607a      	str	r2, [r7, #4]
20002ff8:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
20002ffa:	68fb      	ldr	r3, [r7, #12]
20002ffc:	617b      	str	r3, [r7, #20]
20002ffe:	e014      	b.n	2000302a <fillRectangle+0x3e>
		for (j = y; j < y + height; j++) {
20003000:	68bb      	ldr	r3, [r7, #8]
20003002:	613b      	str	r3, [r7, #16]
20003004:	e008      	b.n	20003018 <fillRectangle+0x2c>
			pixel(i, j, 1, 3);
20003006:	6939      	ldr	r1, [r7, #16]
20003008:	6978      	ldr	r0, [r7, #20]
2000300a:	2303      	movs	r3, #3
2000300c:	2201      	movs	r2, #1
2000300e:	f7ff fd65 	bl	20002adc <pixel>
		for (j = y; j < y + height; j++) {
20003012:	693b      	ldr	r3, [r7, #16]
20003014:	3301      	adds	r3, #1
20003016:	613b      	str	r3, [r7, #16]
20003018:	68ba      	ldr	r2, [r7, #8]
2000301a:	683b      	ldr	r3, [r7, #0]
2000301c:	18d2      	adds	r2, r2, r3
2000301e:	693b      	ldr	r3, [r7, #16]
20003020:	429a      	cmp	r2, r3
20003022:	dcf0      	bgt.n	20003006 <fillRectangle+0x1a>
	for (i = x; i < x + width; i++) {
20003024:	697b      	ldr	r3, [r7, #20]
20003026:	3301      	adds	r3, #1
20003028:	617b      	str	r3, [r7, #20]
2000302a:	68fa      	ldr	r2, [r7, #12]
2000302c:	687b      	ldr	r3, [r7, #4]
2000302e:	18d2      	adds	r2, r2, r3
20003030:	697b      	ldr	r3, [r7, #20]
20003032:	429a      	cmp	r2, r3
20003034:	dce4      	bgt.n	20003000 <fillRectangle+0x14>
		}
	}
}
20003036:	46c0      	nop			; (mov r8, r8)
20003038:	46bd      	mov	sp, r7
2000303a:	b006      	add	sp, #24
2000303c:	bd80      	pop	{r7, pc}

2000303e <clearRectangle>:

void clearRectangle( int x, int y, int width, int height ){
2000303e:	b580      	push	{r7, lr}
20003040:	b086      	sub	sp, #24
20003042:	af00      	add	r7, sp, #0
20003044:	60f8      	str	r0, [r7, #12]
20003046:	60b9      	str	r1, [r7, #8]
20003048:	607a      	str	r2, [r7, #4]
2000304a:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
2000304c:	68fb      	ldr	r3, [r7, #12]
2000304e:	617b      	str	r3, [r7, #20]
20003050:	e014      	b.n	2000307c <clearRectangle+0x3e>
		for (j = y; j < y + height; j++) {
20003052:	68bb      	ldr	r3, [r7, #8]
20003054:	613b      	str	r3, [r7, #16]
20003056:	e008      	b.n	2000306a <clearRectangle+0x2c>
			pixel(i, j, 0, 3);
20003058:	6939      	ldr	r1, [r7, #16]
2000305a:	6978      	ldr	r0, [r7, #20]
2000305c:	2303      	movs	r3, #3
2000305e:	2200      	movs	r2, #0
20003060:	f7ff fd3c 	bl	20002adc <pixel>
		for (j = y; j < y + height; j++) {
20003064:	693b      	ldr	r3, [r7, #16]
20003066:	3301      	adds	r3, #1
20003068:	613b      	str	r3, [r7, #16]
2000306a:	68ba      	ldr	r2, [r7, #8]
2000306c:	683b      	ldr	r3, [r7, #0]
2000306e:	18d2      	adds	r2, r2, r3
20003070:	693b      	ldr	r3, [r7, #16]
20003072:	429a      	cmp	r2, r3
20003074:	dcf0      	bgt.n	20003058 <clearRectangle+0x1a>
	for (i = x; i < x + width; i++) {
20003076:	697b      	ldr	r3, [r7, #20]
20003078:	3301      	adds	r3, #1
2000307a:	617b      	str	r3, [r7, #20]
2000307c:	68fa      	ldr	r2, [r7, #12]
2000307e:	687b      	ldr	r3, [r7, #4]
20003080:	18d2      	adds	r2, r2, r3
20003082:	697b      	ldr	r3, [r7, #20]
20003084:	429a      	cmp	r2, r3
20003086:	dce4      	bgt.n	20003052 <clearRectangle+0x14>
		}
	}
}
20003088:	46c0      	nop			; (mov r8, r8)
2000308a:	46bd      	mov	sp, r7
2000308c:	b006      	add	sp, #24
2000308e:	bd80      	pop	{r7, pc}

20003090 <grayScaleTest>:


void grayScaleTest( void ) {
20003090:	b590      	push	{r4, r7, lr}
20003092:	b087      	sub	sp, #28
20003094:	af00      	add	r7, sp, #0
	int x = 10;
20003096:	230a      	movs	r3, #10
20003098:	617b      	str	r3, [r7, #20]
	int y = 10;
2000309a:	230a      	movs	r3, #10
2000309c:	613b      	str	r3, [r7, #16]
	int width = 70;
2000309e:	2346      	movs	r3, #70	; 0x46
200030a0:	60fb      	str	r3, [r7, #12]
	int height = 50;
200030a2:	2332      	movs	r3, #50	; 0x32
200030a4:	60bb      	str	r3, [r7, #8]
	
	int x2 = 50;
200030a6:	2332      	movs	r3, #50	; 0x32
200030a8:	607b      	str	r3, [r7, #4]
	
	fillRectangle(x, y, width, height);
200030aa:	68bb      	ldr	r3, [r7, #8]
200030ac:	68fa      	ldr	r2, [r7, #12]
200030ae:	6939      	ldr	r1, [r7, #16]
200030b0:	6978      	ldr	r0, [r7, #20]
200030b2:	f7ff ff9b 	bl	20002fec <fillRectangle>
	
	int i;
	int k = 5;
200030b6:	2305      	movs	r3, #5
200030b8:	603b      	str	r3, [r7, #0]
	while(1) {
		clear_backBuffer();
200030ba:	f7ff fadf 	bl	2000267c <clear_backBuffer>
		fillRectangle(x, y, width, height);
200030be:	68bb      	ldr	r3, [r7, #8]
200030c0:	68fa      	ldr	r2, [r7, #12]
200030c2:	6939      	ldr	r1, [r7, #16]
200030c4:	6978      	ldr	r0, [r7, #20]
200030c6:	f7ff ff91 	bl	20002fec <fillRectangle>
		clearRectangle(x+2+2, y+1, width-k, height-k); //outer square
200030ca:	697b      	ldr	r3, [r7, #20]
200030cc:	1d18      	adds	r0, r3, #4
200030ce:	693b      	ldr	r3, [r7, #16]
200030d0:	1c59      	adds	r1, r3, #1
200030d2:	68fa      	ldr	r2, [r7, #12]
200030d4:	683b      	ldr	r3, [r7, #0]
200030d6:	1ad4      	subs	r4, r2, r3
200030d8:	68ba      	ldr	r2, [r7, #8]
200030da:	683b      	ldr	r3, [r7, #0]
200030dc:	1ad3      	subs	r3, r2, r3
200030de:	0022      	movs	r2, r4
200030e0:	f7ff ffad 	bl	2000303e <clearRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
200030e4:	697b      	ldr	r3, [r7, #20]
200030e6:	1c9a      	adds	r2, r3, #2
200030e8:	683b      	ldr	r3, [r7, #0]
200030ea:	18d0      	adds	r0, r2, r3
200030ec:	693b      	ldr	r3, [r7, #16]
200030ee:	1c99      	adds	r1, r3, #2
200030f0:	68fb      	ldr	r3, [r7, #12]
200030f2:	1f1a      	subs	r2, r3, #4
200030f4:	683b      	ldr	r3, [r7, #0]
200030f6:	1ad4      	subs	r4, r2, r3
200030f8:	68bb      	ldr	r3, [r7, #8]
200030fa:	1f1a      	subs	r2, r3, #4
200030fc:	683b      	ldr	r3, [r7, #0]
200030fe:	1ad3      	subs	r3, r2, r3
20003100:	0022      	movs	r2, r4
20003102:	f7ff ff9c 	bl	2000303e <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
20003106:	4b2d      	ldr	r3, [pc, #180]	; (200031bc <grayScaleTest+0x12c>)
20003108:	0018      	movs	r0, r3
2000310a:	f7ff fe77 	bl	20002dfc <graphic_draw_screen>
		clear_backBuffer();
2000310e:	f7ff fab5 	bl	2000267c <clear_backBuffer>
		fillRectangle(x, y, width, height);
20003112:	68bb      	ldr	r3, [r7, #8]
20003114:	68fa      	ldr	r2, [r7, #12]
20003116:	6939      	ldr	r1, [r7, #16]
20003118:	6978      	ldr	r0, [r7, #20]
2000311a:	f7ff ff67 	bl	20002fec <fillRectangle>
		
		fillRectangle(x+2+2, y+1, width-k, height-k); //outer white square
2000311e:	697b      	ldr	r3, [r7, #20]
20003120:	1d18      	adds	r0, r3, #4
20003122:	693b      	ldr	r3, [r7, #16]
20003124:	1c59      	adds	r1, r3, #1
20003126:	68fa      	ldr	r2, [r7, #12]
20003128:	683b      	ldr	r3, [r7, #0]
2000312a:	1ad4      	subs	r4, r2, r3
2000312c:	68ba      	ldr	r2, [r7, #8]
2000312e:	683b      	ldr	r3, [r7, #0]
20003130:	1ad3      	subs	r3, r2, r3
20003132:	0022      	movs	r2, r4
20003134:	f7ff ff5a 	bl	20002fec <fillRectangle>
		fillRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
20003138:	697b      	ldr	r3, [r7, #20]
2000313a:	1c9a      	adds	r2, r3, #2
2000313c:	683b      	ldr	r3, [r7, #0]
2000313e:	18d0      	adds	r0, r2, r3
20003140:	693b      	ldr	r3, [r7, #16]
20003142:	1c99      	adds	r1, r3, #2
20003144:	68fb      	ldr	r3, [r7, #12]
20003146:	1f1a      	subs	r2, r3, #4
20003148:	683b      	ldr	r3, [r7, #0]
2000314a:	1ad4      	subs	r4, r2, r3
2000314c:	68bb      	ldr	r3, [r7, #8]
2000314e:	1f1a      	subs	r2, r3, #4
20003150:	683b      	ldr	r3, [r7, #0]
20003152:	1ad3      	subs	r3, r2, r3
20003154:	0022      	movs	r2, r4
20003156:	f7ff ff49 	bl	20002fec <fillRectangle>
		clearRectangle(x+12, y+5, 5, 5);
2000315a:	697b      	ldr	r3, [r7, #20]
2000315c:	330c      	adds	r3, #12
2000315e:	0018      	movs	r0, r3
20003160:	693b      	ldr	r3, [r7, #16]
20003162:	1d59      	adds	r1, r3, #5
20003164:	2305      	movs	r3, #5
20003166:	2205      	movs	r2, #5
20003168:	f7ff ff69 	bl	2000303e <clearRectangle>
		
		graphic_draw_screen(draw_buffer_black);
2000316c:	4b13      	ldr	r3, [pc, #76]	; (200031bc <grayScaleTest+0x12c>)
2000316e:	0018      	movs	r0, r3
20003170:	f7ff fe44 	bl	20002dfc <graphic_draw_screen>
		delay_milli(20);
20003174:	2014      	movs	r0, #20
20003176:	f7ff fa55 	bl	20002624 <delay_milli>
		
		clear_backBuffer();
2000317a:	f7ff fa7f 	bl	2000267c <clear_backBuffer>
		fillRectangle(x, y, width, height);
2000317e:	68bb      	ldr	r3, [r7, #8]
20003180:	68fa      	ldr	r2, [r7, #12]
20003182:	6939      	ldr	r1, [r7, #16]
20003184:	6978      	ldr	r0, [r7, #20]
20003186:	f7ff ff31 	bl	20002fec <fillRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
2000318a:	697b      	ldr	r3, [r7, #20]
2000318c:	1c9a      	adds	r2, r3, #2
2000318e:	683b      	ldr	r3, [r7, #0]
20003190:	18d0      	adds	r0, r2, r3
20003192:	693b      	ldr	r3, [r7, #16]
20003194:	1c99      	adds	r1, r3, #2
20003196:	68fb      	ldr	r3, [r7, #12]
20003198:	1f1a      	subs	r2, r3, #4
2000319a:	683b      	ldr	r3, [r7, #0]
2000319c:	1ad4      	subs	r4, r2, r3
2000319e:	68bb      	ldr	r3, [r7, #8]
200031a0:	1f1a      	subs	r2, r3, #4
200031a2:	683b      	ldr	r3, [r7, #0]
200031a4:	1ad3      	subs	r3, r2, r3
200031a6:	0022      	movs	r2, r4
200031a8:	f7ff ff49 	bl	2000303e <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
200031ac:	4b03      	ldr	r3, [pc, #12]	; (200031bc <grayScaleTest+0x12c>)
200031ae:	0018      	movs	r0, r3
200031b0:	f7ff fe24 	bl	20002dfc <graphic_draw_screen>
		
		delay_milli(20);
200031b4:	2014      	movs	r0, #20
200031b6:	f7ff fa35 	bl	20002624 <delay_milli>
		clear_backBuffer();
200031ba:	e77e      	b.n	200030ba <grayScaleTest+0x2a>
200031bc:	200057bc 			; <UNDEFINED> instruction: 0x200057bc

200031c0 <set_up_draw_buffers>:
	}
}

/** Should prepare the different drawing buffers, before the drawing of each frame.*/
void set_up_draw_buffers( void ) {
200031c0:	b580      	push	{r7, lr}
200031c2:	b082      	sub	sp, #8
200031c4:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 1024; i++) {
200031c6:	2300      	movs	r3, #0
200031c8:	607b      	str	r3, [r7, #4]
200031ca:	e065      	b.n	20003298 <set_up_draw_buffers+0xd8>
		draw_buffer_black[i] = backBuffer[i] & (~backBufferGray[i] & ~backBufferLight[i]); //Had to work a bit on these
200031cc:	4a36      	ldr	r2, [pc, #216]	; (200032a8 <set_up_draw_buffers+0xe8>)
200031ce:	687b      	ldr	r3, [r7, #4]
200031d0:	18d3      	adds	r3, r2, r3
200031d2:	781b      	ldrb	r3, [r3, #0]
200031d4:	b25b      	sxtb	r3, r3
200031d6:	4935      	ldr	r1, [pc, #212]	; (200032ac <set_up_draw_buffers+0xec>)
200031d8:	687a      	ldr	r2, [r7, #4]
200031da:	188a      	adds	r2, r1, r2
200031dc:	7811      	ldrb	r1, [r2, #0]
200031de:	4834      	ldr	r0, [pc, #208]	; (200032b0 <set_up_draw_buffers+0xf0>)
200031e0:	687a      	ldr	r2, [r7, #4]
200031e2:	1882      	adds	r2, r0, r2
200031e4:	7812      	ldrb	r2, [r2, #0]
200031e6:	430a      	orrs	r2, r1
200031e8:	b2d2      	uxtb	r2, r2
200031ea:	b252      	sxtb	r2, r2
200031ec:	43d2      	mvns	r2, r2
200031ee:	b252      	sxtb	r2, r2
200031f0:	4013      	ands	r3, r2
200031f2:	b25b      	sxtb	r3, r3
200031f4:	b2d9      	uxtb	r1, r3
200031f6:	4a2f      	ldr	r2, [pc, #188]	; (200032b4 <set_up_draw_buffers+0xf4>)
200031f8:	687b      	ldr	r3, [r7, #4]
200031fa:	18d3      	adds	r3, r2, r3
200031fc:	1c0a      	adds	r2, r1, #0
200031fe:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray[i] = (backBuffer[i] | backBufferGray[i]) & ~backBufferLight[i]; //in order to make it possible
20003200:	4a29      	ldr	r2, [pc, #164]	; (200032a8 <set_up_draw_buffers+0xe8>)
20003202:	687b      	ldr	r3, [r7, #4]
20003204:	18d3      	adds	r3, r2, r3
20003206:	781a      	ldrb	r2, [r3, #0]
20003208:	4928      	ldr	r1, [pc, #160]	; (200032ac <set_up_draw_buffers+0xec>)
2000320a:	687b      	ldr	r3, [r7, #4]
2000320c:	18cb      	adds	r3, r1, r3
2000320e:	781b      	ldrb	r3, [r3, #0]
20003210:	4313      	orrs	r3, r2
20003212:	b2db      	uxtb	r3, r3
20003214:	b25b      	sxtb	r3, r3
20003216:	4926      	ldr	r1, [pc, #152]	; (200032b0 <set_up_draw_buffers+0xf0>)
20003218:	687a      	ldr	r2, [r7, #4]
2000321a:	188a      	adds	r2, r1, r2
2000321c:	7812      	ldrb	r2, [r2, #0]
2000321e:	b252      	sxtb	r2, r2
20003220:	43d2      	mvns	r2, r2
20003222:	b252      	sxtb	r2, r2
20003224:	4013      	ands	r3, r2
20003226:	b25b      	sxtb	r3, r3
20003228:	b2d9      	uxtb	r1, r3
2000322a:	4a23      	ldr	r2, [pc, #140]	; (200032b8 <set_up_draw_buffers+0xf8>)
2000322c:	687b      	ldr	r3, [r7, #4]
2000322e:	18d3      	adds	r3, r2, r3
20003230:	1c0a      	adds	r2, r1, #0
20003232:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_light[i] = (backBuffer[i] | backBufferLight[i]) & ~backBufferGray[i]; //to show a lighter sprite
20003234:	4a1c      	ldr	r2, [pc, #112]	; (200032a8 <set_up_draw_buffers+0xe8>)
20003236:	687b      	ldr	r3, [r7, #4]
20003238:	18d3      	adds	r3, r2, r3
2000323a:	781a      	ldrb	r2, [r3, #0]
2000323c:	491c      	ldr	r1, [pc, #112]	; (200032b0 <set_up_draw_buffers+0xf0>)
2000323e:	687b      	ldr	r3, [r7, #4]
20003240:	18cb      	adds	r3, r1, r3
20003242:	781b      	ldrb	r3, [r3, #0]
20003244:	4313      	orrs	r3, r2
20003246:	b2db      	uxtb	r3, r3
20003248:	b25b      	sxtb	r3, r3
2000324a:	4918      	ldr	r1, [pc, #96]	; (200032ac <set_up_draw_buffers+0xec>)
2000324c:	687a      	ldr	r2, [r7, #4]
2000324e:	188a      	adds	r2, r1, r2
20003250:	7812      	ldrb	r2, [r2, #0]
20003252:	b252      	sxtb	r2, r2
20003254:	43d2      	mvns	r2, r2
20003256:	b252      	sxtb	r2, r2
20003258:	4013      	ands	r3, r2
2000325a:	b25b      	sxtb	r3, r3
2000325c:	b2d9      	uxtb	r1, r3
2000325e:	4a17      	ldr	r2, [pc, #92]	; (200032bc <set_up_draw_buffers+0xfc>)
20003260:	687b      	ldr	r3, [r7, #4]
20003262:	18d3      	adds	r3, r2, r3
20003264:	1c0a      	adds	r2, r1, #0
20003266:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray_light[i] = backBuffer[i] | backBufferGray[i] | backBufferLight[i]; //on top of a darker one.
20003268:	4a0f      	ldr	r2, [pc, #60]	; (200032a8 <set_up_draw_buffers+0xe8>)
2000326a:	687b      	ldr	r3, [r7, #4]
2000326c:	18d3      	adds	r3, r2, r3
2000326e:	781a      	ldrb	r2, [r3, #0]
20003270:	490e      	ldr	r1, [pc, #56]	; (200032ac <set_up_draw_buffers+0xec>)
20003272:	687b      	ldr	r3, [r7, #4]
20003274:	18cb      	adds	r3, r1, r3
20003276:	781b      	ldrb	r3, [r3, #0]
20003278:	4313      	orrs	r3, r2
2000327a:	b2da      	uxtb	r2, r3
2000327c:	490c      	ldr	r1, [pc, #48]	; (200032b0 <set_up_draw_buffers+0xf0>)
2000327e:	687b      	ldr	r3, [r7, #4]
20003280:	18cb      	adds	r3, r1, r3
20003282:	781b      	ldrb	r3, [r3, #0]
20003284:	4313      	orrs	r3, r2
20003286:	b2d9      	uxtb	r1, r3
20003288:	4a0d      	ldr	r2, [pc, #52]	; (200032c0 <set_up_draw_buffers+0x100>)
2000328a:	687b      	ldr	r3, [r7, #4]
2000328c:	18d3      	adds	r3, r2, r3
2000328e:	1c0a      	adds	r2, r1, #0
20003290:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 1024; i++) {
20003292:	687b      	ldr	r3, [r7, #4]
20003294:	3301      	adds	r3, #1
20003296:	607b      	str	r3, [r7, #4]
20003298:	687b      	ldr	r3, [r7, #4]
2000329a:	4a0a      	ldr	r2, [pc, #40]	; (200032c4 <set_up_draw_buffers+0x104>)
2000329c:	4293      	cmp	r3, r2
2000329e:	dd95      	ble.n	200031cc <set_up_draw_buffers+0xc>
	}
}
200032a0:	46c0      	nop			; (mov r8, r8)
200032a2:	46bd      	mov	sp, r7
200032a4:	b002      	add	sp, #8
200032a6:	bd80      	pop	{r7, pc}
200032a8:	20004fbc 			; <UNDEFINED> instruction: 0x20004fbc
200032ac:	200047bc 			; <UNDEFINED> instruction: 0x200047bc
200032b0:	20005fbc 			; <UNDEFINED> instruction: 0x20005fbc
200032b4:	200057bc 			; <UNDEFINED> instruction: 0x200057bc
200032b8:	20004bbc 			; <UNDEFINED> instruction: 0x20004bbc
200032bc:	200053bc 			; <UNDEFINED> instruction: 0x200053bc
200032c0:	20005bbc 			; <UNDEFINED> instruction: 0x20005bbc
200032c4:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

200032c8 <draw_game_object>:

void draw_game_object(GameObject *gObj) {
200032c8:	b580      	push	{r7, lr}
200032ca:	b086      	sub	sp, #24
200032cc:	af02      	add	r7, sp, #8
200032ce:	6078      	str	r0, [r7, #4]
	int frame = gObj->current_frame;
200032d0:	687b      	ldr	r3, [r7, #4]
200032d2:	695b      	ldr	r3, [r3, #20]
200032d4:	60fb      	str	r3, [r7, #12]
	draw_sprite(gObj->images[frame].blackImage, gObj->xPos, gObj->yPos, 1, 3);
200032d6:	687b      	ldr	r3, [r7, #4]
200032d8:	6819      	ldr	r1, [r3, #0]
200032da:	68fa      	ldr	r2, [r7, #12]
200032dc:	0013      	movs	r3, r2
200032de:	005b      	lsls	r3, r3, #1
200032e0:	189b      	adds	r3, r3, r2
200032e2:	009b      	lsls	r3, r3, #2
200032e4:	18cb      	adds	r3, r1, r3
200032e6:	6818      	ldr	r0, [r3, #0]
200032e8:	687b      	ldr	r3, [r7, #4]
200032ea:	6859      	ldr	r1, [r3, #4]
200032ec:	687b      	ldr	r3, [r7, #4]
200032ee:	689a      	ldr	r2, [r3, #8]
200032f0:	2303      	movs	r3, #3
200032f2:	9300      	str	r3, [sp, #0]
200032f4:	2301      	movs	r3, #1
200032f6:	f7ff fdec 	bl	20002ed2 <draw_sprite>
	draw_sprite(gObj->images[frame].grayImage, gObj->xPos, gObj->yPos, 1, 2);
200032fa:	687b      	ldr	r3, [r7, #4]
200032fc:	6819      	ldr	r1, [r3, #0]
200032fe:	68fa      	ldr	r2, [r7, #12]
20003300:	0013      	movs	r3, r2
20003302:	005b      	lsls	r3, r3, #1
20003304:	189b      	adds	r3, r3, r2
20003306:	009b      	lsls	r3, r3, #2
20003308:	18cb      	adds	r3, r1, r3
2000330a:	6858      	ldr	r0, [r3, #4]
2000330c:	687b      	ldr	r3, [r7, #4]
2000330e:	6859      	ldr	r1, [r3, #4]
20003310:	687b      	ldr	r3, [r7, #4]
20003312:	689a      	ldr	r2, [r3, #8]
20003314:	2302      	movs	r3, #2
20003316:	9300      	str	r3, [sp, #0]
20003318:	2301      	movs	r3, #1
2000331a:	f7ff fdda 	bl	20002ed2 <draw_sprite>
	draw_sprite(gObj->images[frame].lightImage, gObj->xPos, gObj->yPos, 1, 1);
2000331e:	687b      	ldr	r3, [r7, #4]
20003320:	6819      	ldr	r1, [r3, #0]
20003322:	68fa      	ldr	r2, [r7, #12]
20003324:	0013      	movs	r3, r2
20003326:	005b      	lsls	r3, r3, #1
20003328:	189b      	adds	r3, r3, r2
2000332a:	009b      	lsls	r3, r3, #2
2000332c:	18cb      	adds	r3, r1, r3
2000332e:	6898      	ldr	r0, [r3, #8]
20003330:	687b      	ldr	r3, [r7, #4]
20003332:	6859      	ldr	r1, [r3, #4]
20003334:	687b      	ldr	r3, [r7, #4]
20003336:	689a      	ldr	r2, [r3, #8]
20003338:	2301      	movs	r3, #1
2000333a:	9300      	str	r3, [sp, #0]
2000333c:	2301      	movs	r3, #1
2000333e:	f7ff fdc8 	bl	20002ed2 <draw_sprite>
}
20003342:	46c0      	nop			; (mov r8, r8)
20003344:	46bd      	mov	sp, r7
20003346:	b004      	add	sp, #16
20003348:	bd80      	pop	{r7, pc}

2000334a <show_frame>:


void show_frame(int frame_length) {
2000334a:	b580      	push	{r7, lr}
2000334c:	b082      	sub	sp, #8
2000334e:	af00      	add	r7, sp, #0
20003350:	6078      	str	r0, [r7, #4]
	set_up_draw_buffers();
20003352:	f7ff ff35 	bl	200031c0 <set_up_draw_buffers>
	
	while(frame_length--) {
20003356:	e01b      	b.n	20003390 <show_frame+0x46>
		graphic_draw_screen(draw_buffer_black_gray_light);
20003358:	4b13      	ldr	r3, [pc, #76]	; (200033a8 <show_frame+0x5e>)
2000335a:	0018      	movs	r0, r3
2000335c:	f7ff fd4e 	bl	20002dfc <graphic_draw_screen>
		delay_milli(1);
20003360:	2001      	movs	r0, #1
20003362:	f7ff f95f 	bl	20002624 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
20003366:	4b11      	ldr	r3, [pc, #68]	; (200033ac <show_frame+0x62>)
20003368:	0018      	movs	r0, r3
2000336a:	f7ff fd47 	bl	20002dfc <graphic_draw_screen>
		delay_milli(1);
2000336e:	2001      	movs	r0, #1
20003370:	f7ff f958 	bl	20002624 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black_gray);
20003374:	4b0e      	ldr	r3, [pc, #56]	; (200033b0 <show_frame+0x66>)
20003376:	0018      	movs	r0, r3
20003378:	f7ff fd40 	bl	20002dfc <graphic_draw_screen>
		delay_milli(1);
2000337c:	2001      	movs	r0, #1
2000337e:	f7ff f951 	bl	20002624 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
20003382:	4b0a      	ldr	r3, [pc, #40]	; (200033ac <show_frame+0x62>)
20003384:	0018      	movs	r0, r3
20003386:	f7ff fd39 	bl	20002dfc <graphic_draw_screen>
		delay_milli(1);
2000338a:	2001      	movs	r0, #1
2000338c:	f7ff f94a 	bl	20002624 <delay_milli>
	while(frame_length--) {
20003390:	687b      	ldr	r3, [r7, #4]
20003392:	1e5a      	subs	r2, r3, #1
20003394:	607a      	str	r2, [r7, #4]
20003396:	2b00      	cmp	r3, #0
20003398:	d1de      	bne.n	20003358 <show_frame+0xe>
	}
	
	clear_all_backBuffers();	//Maybe we could be more effective by only clearing the necessary stuff,
2000339a:	f7ff f97b 	bl	20002694 <clear_all_backBuffers>
								//but let's keep it like this if it works.
2000339e:	46c0      	nop			; (mov r8, r8)
200033a0:	46bd      	mov	sp, r7
200033a2:	b002      	add	sp, #8
200033a4:	bd80      	pop	{r7, pc}
200033a6:	46c0      	nop			; (mov r8, r8)
200033a8:	20005bbc 			; <UNDEFINED> instruction: 0x20005bbc
200033ac:	200057bc 			; <UNDEFINED> instruction: 0x200057bc
200033b0:	20004bbc 			; <UNDEFINED> instruction: 0x20004bbc

200033b4 <load_image>:
#include "image.h"

void load_image( Image *image, sprite *blackImage, sprite *grayImage, sprite *lightImage ) {
200033b4:	b580      	push	{r7, lr}
200033b6:	b084      	sub	sp, #16
200033b8:	af00      	add	r7, sp, #0
200033ba:	60f8      	str	r0, [r7, #12]
200033bc:	60b9      	str	r1, [r7, #8]
200033be:	607a      	str	r2, [r7, #4]
200033c0:	603b      	str	r3, [r7, #0]
	image->blackImage = blackImage;
200033c2:	68fb      	ldr	r3, [r7, #12]
200033c4:	68ba      	ldr	r2, [r7, #8]
200033c6:	601a      	str	r2, [r3, #0]
	image->grayImage = grayImage;
200033c8:	68fb      	ldr	r3, [r7, #12]
200033ca:	687a      	ldr	r2, [r7, #4]
200033cc:	605a      	str	r2, [r3, #4]
	image->lightImage = lightImage;
200033ce:	68fb      	ldr	r3, [r7, #12]
200033d0:	683a      	ldr	r2, [r7, #0]
200033d2:	609a      	str	r2, [r3, #8]
}
200033d4:	46c0      	nop			; (mov r8, r8)
200033d6:	46bd      	mov	sp, r7
200033d8:	b004      	add	sp, #16
200033da:	bd80      	pop	{r7, pc}

200033dc <load_sprite>:
#include "sprite.h"

void load_sprite(sprite* s, unsigned char* data, int width, int height)
{
200033dc:	b580      	push	{r7, lr}
200033de:	b084      	sub	sp, #16
200033e0:	af00      	add	r7, sp, #0
200033e2:	60f8      	str	r0, [r7, #12]
200033e4:	60b9      	str	r1, [r7, #8]
200033e6:	607a      	str	r2, [r7, #4]
200033e8:	603b      	str	r3, [r7, #0]
	s->width = width;
200033ea:	687a      	ldr	r2, [r7, #4]
200033ec:	68fb      	ldr	r3, [r7, #12]
200033ee:	601a      	str	r2, [r3, #0]
	s->height = height;
200033f0:	683a      	ldr	r2, [r7, #0]
200033f2:	68fb      	ldr	r3, [r7, #12]
200033f4:	605a      	str	r2, [r3, #4]
	s->data = data;
200033f6:	68fb      	ldr	r3, [r7, #12]
200033f8:	68ba      	ldr	r2, [r7, #8]
200033fa:	609a      	str	r2, [r3, #8]
}
200033fc:	46c0      	nop			; (mov r8, r8)
200033fe:	46bd      	mov	sp, r7
20003400:	b004      	add	sp, #16
20003402:	bd80      	pop	{r7, pc}

20003404 <set_up_DIL>:
#include "gpio.h"

/** Sets up PE0-7 as inports and PE8-15 as outports. */
void set_up_DIL( void ) {
20003404:	b580      	push	{r7, lr}
20003406:	af00      	add	r7, sp, #0
	GPIO_D.Moder = 0x55550000;
20003408:	4b02      	ldr	r3, [pc, #8]	; (20003414 <set_up_DIL+0x10>)
2000340a:	4a03      	ldr	r2, [pc, #12]	; (20003418 <set_up_DIL+0x14>)
2000340c:	601a      	str	r2, [r3, #0]
}
2000340e:	46c0      	nop			; (mov r8, r8)
20003410:	46bd      	mov	sp, r7
20003412:	bd80      	pop	{r7, pc}
20003414:	40020c00 	andmi	r0, r2, r0, lsl #24
20003418:	55550000 	ldrbpl	r0, [r5, #-0]

2000341c <read_DIL>:

char read_DIL( void ) {
2000341c:	b580      	push	{r7, lr}
2000341e:	af00      	add	r7, sp, #0
	GPIO_D.odrHigh = GPIO_D.idrLow; //Show on bargraph
20003420:	4b05      	ldr	r3, [pc, #20]	; (20003438 <read_DIL+0x1c>)
20003422:	4a05      	ldr	r2, [pc, #20]	; (20003438 <read_DIL+0x1c>)
20003424:	7c12      	ldrb	r2, [r2, #16]
20003426:	b2d2      	uxtb	r2, r2
20003428:	755a      	strb	r2, [r3, #21]
	return GPIO_D.idrLow;
2000342a:	4b03      	ldr	r3, [pc, #12]	; (20003438 <read_DIL+0x1c>)
2000342c:	7c1b      	ldrb	r3, [r3, #16]
2000342e:	b2db      	uxtb	r3, r3
}
20003430:	0018      	movs	r0, r3
20003432:	46bd      	mov	sp, r7
20003434:	bd80      	pop	{r7, pc}
20003436:	46c0      	nop			; (mov r8, r8)
20003438:	40020c00 	andmi	r0, r2, r0, lsl #24

2000343c <read_DIL_single>:


int read_DIL_single( int bit ) {
2000343c:	b590      	push	{r4, r7, lr}
2000343e:	b085      	sub	sp, #20
20003440:	af00      	add	r7, sp, #0
20003442:	6078      	str	r0, [r7, #4]
	char DIL = read_DIL();
20003444:	230f      	movs	r3, #15
20003446:	18fc      	adds	r4, r7, r3
20003448:	f7ff ffe8 	bl	2000341c <read_DIL>
2000344c:	0003      	movs	r3, r0
2000344e:	7023      	strb	r3, [r4, #0]
	if (DIL & (1<<bit)) {
20003450:	230f      	movs	r3, #15
20003452:	18fb      	adds	r3, r7, r3
20003454:	781a      	ldrb	r2, [r3, #0]
20003456:	687b      	ldr	r3, [r7, #4]
20003458:	411a      	asrs	r2, r3
2000345a:	0013      	movs	r3, r2
2000345c:	2201      	movs	r2, #1
2000345e:	4013      	ands	r3, r2
20003460:	d001      	beq.n	20003466 <read_DIL_single+0x2a>
		return 1;
20003462:	2301      	movs	r3, #1
20003464:	e000      	b.n	20003468 <read_DIL_single+0x2c>
	} else {
		return 0;
20003466:	2300      	movs	r3, #0
	}
20003468:	0018      	movs	r0, r3
2000346a:	46bd      	mov	sp, r7
2000346c:	b005      	add	sp, #20
2000346e:	bd90      	pop	{r4, r7, pc}

20003470 <ascii_ctrl_bit_set>:
void ascii_write_data(unsigned char data);
unsigned char ascii_read_status(void);
unsigned char ascii_read_data(void);


void ascii_ctrl_bit_set(unsigned char x){
20003470:	b580      	push	{r7, lr}
20003472:	b084      	sub	sp, #16
20003474:	af00      	add	r7, sp, #0
20003476:	0002      	movs	r2, r0
20003478:	1dfb      	adds	r3, r7, #7
2000347a:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och ettstÃƒÂ¤ll de bitar som ÃƒÂ¤r 1 i x
	unsigned char c;
	c = *portOdrLow;
2000347c:	4a0c      	ldr	r2, [pc, #48]	; (200034b0 <ascii_ctrl_bit_set+0x40>)
2000347e:	230f      	movs	r3, #15
20003480:	18fb      	adds	r3, r7, r3
20003482:	7812      	ldrb	r2, [r2, #0]
20003484:	701a      	strb	r2, [r3, #0]
	c |= (B_SELECT | x);
20003486:	1dfa      	adds	r2, r7, #7
20003488:	230f      	movs	r3, #15
2000348a:	18fb      	adds	r3, r7, r3
2000348c:	7812      	ldrb	r2, [r2, #0]
2000348e:	781b      	ldrb	r3, [r3, #0]
20003490:	4313      	orrs	r3, r2
20003492:	b2da      	uxtb	r2, r3
20003494:	230f      	movs	r3, #15
20003496:	18fb      	adds	r3, r7, r3
20003498:	2104      	movs	r1, #4
2000349a:	430a      	orrs	r2, r1
2000349c:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
2000349e:	4a04      	ldr	r2, [pc, #16]	; (200034b0 <ascii_ctrl_bit_set+0x40>)
200034a0:	230f      	movs	r3, #15
200034a2:	18fb      	adds	r3, r7, r3
200034a4:	781b      	ldrb	r3, [r3, #0]
200034a6:	7013      	strb	r3, [r2, #0]
}
200034a8:	46c0      	nop			; (mov r8, r8)
200034aa:	46bd      	mov	sp, r7
200034ac:	b004      	add	sp, #16
200034ae:	bd80      	pop	{r7, pc}
200034b0:	40021014 	andmi	r1, r2, r4, lsl r0

200034b4 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
200034b4:	b580      	push	{r7, lr}
200034b6:	b084      	sub	sp, #16
200034b8:	af00      	add	r7, sp, #0
200034ba:	0002      	movs	r2, r0
200034bc:	1dfb      	adds	r3, r7, #7
200034be:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och nollstÃ¤ll de bitar som Ã¤r 1 i x
	unsigned char c;
	c = *portOdrLow;
200034c0:	4a0f      	ldr	r2, [pc, #60]	; (20003500 <ascii_ctrl_bit_clear+0x4c>)
200034c2:	230f      	movs	r3, #15
200034c4:	18fb      	adds	r3, r7, r3
200034c6:	7812      	ldrb	r2, [r2, #0]
200034c8:	701a      	strb	r2, [r3, #0]
	c = (B_SELECT | c & ~x);
200034ca:	1dfb      	adds	r3, r7, #7
200034cc:	781b      	ldrb	r3, [r3, #0]
200034ce:	b25b      	sxtb	r3, r3
200034d0:	43db      	mvns	r3, r3
200034d2:	b25b      	sxtb	r3, r3
200034d4:	220f      	movs	r2, #15
200034d6:	18ba      	adds	r2, r7, r2
200034d8:	7812      	ldrb	r2, [r2, #0]
200034da:	b252      	sxtb	r2, r2
200034dc:	4013      	ands	r3, r2
200034de:	b25b      	sxtb	r3, r3
200034e0:	2204      	movs	r2, #4
200034e2:	4313      	orrs	r3, r2
200034e4:	b25a      	sxtb	r2, r3
200034e6:	230f      	movs	r3, #15
200034e8:	18fb      	adds	r3, r7, r3
200034ea:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
200034ec:	4a04      	ldr	r2, [pc, #16]	; (20003500 <ascii_ctrl_bit_clear+0x4c>)
200034ee:	230f      	movs	r3, #15
200034f0:	18fb      	adds	r3, r7, r3
200034f2:	781b      	ldrb	r3, [r3, #0]
200034f4:	7013      	strb	r3, [r2, #0]
}
200034f6:	46c0      	nop			; (mov r8, r8)
200034f8:	46bd      	mov	sp, r7
200034fa:	b004      	add	sp, #16
200034fc:	bd80      	pop	{r7, pc}
200034fe:	46c0      	nop			; (mov r8, r8)
20003500:	40021014 	andmi	r1, r2, r4, lsl r0

20003504 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20003504:	b580      	push	{r7, lr}
20003506:	b082      	sub	sp, #8
20003508:	af00      	add	r7, sp, #0
2000350a:	0002      	movs	r2, r0
2000350c:	1dfb      	adds	r3, r7, #7
2000350e:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20003510:	2001      	movs	r0, #1
20003512:	f7ff ffcf 	bl	200034b4 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20003516:	2002      	movs	r0, #2
20003518:	f7ff ffcc 	bl	200034b4 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
2000351c:	1dfb      	adds	r3, r7, #7
2000351e:	781b      	ldrb	r3, [r3, #0]
20003520:	0018      	movs	r0, r3
20003522:	f000 f86d 	bl	20003600 <ascii_write_controller>
}
20003526:	46c0      	nop			; (mov r8, r8)
20003528:	46bd      	mov	sp, r7
2000352a:	b002      	add	sp, #8
2000352c:	bd80      	pop	{r7, pc}

2000352e <ascii_write_data>:

void ascii_write_data(unsigned char data){
2000352e:	b580      	push	{r7, lr}
20003530:	b082      	sub	sp, #8
20003532:	af00      	add	r7, sp, #0
20003534:	0002      	movs	r2, r0
20003536:	1dfb      	adds	r3, r7, #7
20003538:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
2000353a:	2001      	movs	r0, #1
2000353c:	f7ff ff98 	bl	20003470 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20003540:	2002      	movs	r0, #2
20003542:	f7ff ffb7 	bl	200034b4 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20003546:	1dfb      	adds	r3, r7, #7
20003548:	781b      	ldrb	r3, [r3, #0]
2000354a:	0018      	movs	r0, r3
2000354c:	f000 f858 	bl	20003600 <ascii_write_controller>
}
20003550:	46c0      	nop			; (mov r8, r8)
20003552:	46bd      	mov	sp, r7
20003554:	b002      	add	sp, #8
20003556:	bd80      	pop	{r7, pc}

20003558 <ascii_read_status>:

unsigned char ascii_read_status(void){
20003558:	b590      	push	{r4, r7, lr}
2000355a:	b083      	sub	sp, #12
2000355c:	af00      	add	r7, sp, #0
	//sÃƒÂ¤tt Port E bit15-8 som ingÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
2000355e:	4b11      	ldr	r3, [pc, #68]	; (200035a4 <ascii_read_status+0x4c>)
20003560:	4a10      	ldr	r2, [pc, #64]	; (200035a4 <ascii_read_status+0x4c>)
20003562:	6812      	ldr	r2, [r2, #0]
20003564:	0412      	lsls	r2, r2, #16
20003566:	0c12      	lsrs	r2, r2, #16
20003568:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
2000356a:	2001      	movs	r0, #1
2000356c:	f7ff ffa2 	bl	200034b4 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
20003570:	2002      	movs	r0, #2
20003572:	f7ff ff7d 	bl	20003470 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20003576:	1dfc      	adds	r4, r7, #7
20003578:	f000 f85a 	bl	20003630 <ascii_read_controller>
2000357c:	0003      	movs	r3, r0
2000357e:	7023      	strb	r3, [r4, #0]
	//sÃƒÂ¤tt Port E bit15-8 som utgÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20003580:	4b08      	ldr	r3, [pc, #32]	; (200035a4 <ascii_read_status+0x4c>)
20003582:	4a08      	ldr	r2, [pc, #32]	; (200035a4 <ascii_read_status+0x4c>)
20003584:	6812      	ldr	r2, [r2, #0]
20003586:	0412      	lsls	r2, r2, #16
20003588:	0c12      	lsrs	r2, r2, #16
2000358a:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
2000358c:	4b05      	ldr	r3, [pc, #20]	; (200035a4 <ascii_read_status+0x4c>)
2000358e:	4a05      	ldr	r2, [pc, #20]	; (200035a4 <ascii_read_status+0x4c>)
20003590:	6812      	ldr	r2, [r2, #0]
20003592:	4905      	ldr	r1, [pc, #20]	; (200035a8 <ascii_read_status+0x50>)
20003594:	430a      	orrs	r2, r1
20003596:	601a      	str	r2, [r3, #0]
	return rv;
20003598:	1dfb      	adds	r3, r7, #7
2000359a:	781b      	ldrb	r3, [r3, #0]
}
2000359c:	0018      	movs	r0, r3
2000359e:	46bd      	mov	sp, r7
200035a0:	b003      	add	sp, #12
200035a2:	bd90      	pop	{r4, r7, pc}
200035a4:	40021000 	andmi	r1, r2, r0
200035a8:	55550000 	ldrbpl	r0, [r5, #-0]

200035ac <ascii_read_data>:

unsigned char ascii_read_data(void){
200035ac:	b590      	push	{r4, r7, lr}
200035ae:	b083      	sub	sp, #12
200035b0:	af00      	add	r7, sp, #0
	//sÃƒÂ¤tt Port E bit15-8 som ingÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
200035b2:	4b11      	ldr	r3, [pc, #68]	; (200035f8 <ascii_read_data+0x4c>)
200035b4:	4a10      	ldr	r2, [pc, #64]	; (200035f8 <ascii_read_data+0x4c>)
200035b6:	6812      	ldr	r2, [r2, #0]
200035b8:	0412      	lsls	r2, r2, #16
200035ba:	0c12      	lsrs	r2, r2, #16
200035bc:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
200035be:	2001      	movs	r0, #1
200035c0:	f7ff ff56 	bl	20003470 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
200035c4:	2002      	movs	r0, #2
200035c6:	f7ff ff53 	bl	20003470 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
200035ca:	1dfc      	adds	r4, r7, #7
200035cc:	f000 f830 	bl	20003630 <ascii_read_controller>
200035d0:	0003      	movs	r3, r0
200035d2:	7023      	strb	r3, [r4, #0]
	//sÃƒÂ¤tt Port E bit15-8 som utgÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
200035d4:	4b08      	ldr	r3, [pc, #32]	; (200035f8 <ascii_read_data+0x4c>)
200035d6:	4a08      	ldr	r2, [pc, #32]	; (200035f8 <ascii_read_data+0x4c>)
200035d8:	6812      	ldr	r2, [r2, #0]
200035da:	0412      	lsls	r2, r2, #16
200035dc:	0c12      	lsrs	r2, r2, #16
200035de:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
200035e0:	4b05      	ldr	r3, [pc, #20]	; (200035f8 <ascii_read_data+0x4c>)
200035e2:	4a05      	ldr	r2, [pc, #20]	; (200035f8 <ascii_read_data+0x4c>)
200035e4:	6812      	ldr	r2, [r2, #0]
200035e6:	4905      	ldr	r1, [pc, #20]	; (200035fc <ascii_read_data+0x50>)
200035e8:	430a      	orrs	r2, r1
200035ea:	601a      	str	r2, [r3, #0]
	return rv;
200035ec:	1dfb      	adds	r3, r7, #7
200035ee:	781b      	ldrb	r3, [r3, #0]
}
200035f0:	0018      	movs	r0, r3
200035f2:	46bd      	mov	sp, r7
200035f4:	b003      	add	sp, #12
200035f6:	bd90      	pop	{r4, r7, pc}
200035f8:	40021000 	andmi	r1, r2, r0
200035fc:	55550000 	ldrbpl	r0, [r5, #-0]

20003600 <ascii_write_controller>:

void ascii_write_controller(unsigned char c){
20003600:	b580      	push	{r7, lr}
20003602:	b082      	sub	sp, #8
20003604:	af00      	add	r7, sp, #0
20003606:	0002      	movs	r2, r0
20003608:	1dfb      	adds	r3, r7, #7
2000360a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
2000360c:	2040      	movs	r0, #64	; 0x40
2000360e:	f7ff ff2f 	bl	20003470 <ascii_ctrl_bit_set>
	*portOdrHigh = c;
20003612:	4a06      	ldr	r2, [pc, #24]	; (2000362c <ascii_write_controller+0x2c>)
20003614:	1dfb      	adds	r3, r7, #7
20003616:	781b      	ldrb	r3, [r3, #0]
20003618:	7013      	strb	r3, [r2, #0]
	delay_250ns();
2000361a:	f7fe ffa9 	bl	20002570 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
2000361e:	2040      	movs	r0, #64	; 0x40
20003620:	f7ff ff48 	bl	200034b4 <ascii_ctrl_bit_clear>
}
20003624:	46c0      	nop			; (mov r8, r8)
20003626:	46bd      	mov	sp, r7
20003628:	b002      	add	sp, #8
2000362a:	bd80      	pop	{r7, pc}
2000362c:	40021015 	andmi	r1, r2, r5, lsl r0

20003630 <ascii_read_controller>:

unsigned char ascii_read_controller(void){
20003630:	b580      	push	{r7, lr}
20003632:	b082      	sub	sp, #8
20003634:	af00      	add	r7, sp, #0
	unsigned char c;
	ascii_ctrl_bit_set(B_E);
20003636:	2040      	movs	r0, #64	; 0x40
20003638:	f7ff ff1a 	bl	20003470 <ascii_ctrl_bit_set>
	delay_250ns();
2000363c:	f7fe ff98 	bl	20002570 <delay_250ns>
	delay_250ns();
20003640:	f7fe ff96 	bl	20002570 <delay_250ns>
	c = *portIdrHigh;
20003644:	4a06      	ldr	r2, [pc, #24]	; (20003660 <ascii_read_controller+0x30>)
20003646:	1dfb      	adds	r3, r7, #7
20003648:	7812      	ldrb	r2, [r2, #0]
2000364a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
2000364c:	2040      	movs	r0, #64	; 0x40
2000364e:	f7ff ff31 	bl	200034b4 <ascii_ctrl_bit_clear>
	return c;
20003652:	1dfb      	adds	r3, r7, #7
20003654:	781b      	ldrb	r3, [r3, #0]
}
20003656:	0018      	movs	r0, r3
20003658:	46bd      	mov	sp, r7
2000365a:	b002      	add	sp, #8
2000365c:	bd80      	pop	{r7, pc}
2000365e:	46c0      	nop			; (mov r8, r8)
20003660:	40021011 	andmi	r1, r2, r1, lsl r0

20003664 <ascii_write_char>:

void ascii_write_char(unsigned char c){
20003664:	b580      	push	{r7, lr}
20003666:	b082      	sub	sp, #8
20003668:	af00      	add	r7, sp, #0
2000366a:	0002      	movs	r2, r0
2000366c:	1dfb      	adds	r3, r7, #7
2000366e:	701a      	strb	r2, [r3, #0]
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20003670:	46c0      	nop			; (mov r8, r8)
20003672:	f7ff ff71 	bl	20003558 <ascii_read_status>
20003676:	0003      	movs	r3, r0
20003678:	001a      	movs	r2, r3
2000367a:	2380      	movs	r3, #128	; 0x80
2000367c:	4013      	ands	r3, r2
2000367e:	2b80      	cmp	r3, #128	; 0x80
20003680:	d0f7      	beq.n	20003672 <ascii_write_char+0xe>
		delay_micro(8); //latenstid
20003682:	2008      	movs	r0, #8
20003684:	f7fe ffb8 	bl	200025f8 <delay_micro>
		ascii_write_data(c);
20003688:	1dfb      	adds	r3, r7, #7
2000368a:	781b      	ldrb	r3, [r3, #0]
2000368c:	0018      	movs	r0, r3
2000368e:	f7ff ff4e 	bl	2000352e <ascii_write_data>
		delay_micro(50); //istÃƒÂ¤llet fÃƒÂ¶r 43us
20003692:	2032      	movs	r0, #50	; 0x32
20003694:	f7fe ffb0 	bl	200025f8 <delay_micro>
}
20003698:	46c0      	nop			; (mov r8, r8)
2000369a:	46bd      	mov	sp, r7
2000369c:	b002      	add	sp, #8
2000369e:	bd80      	pop	{r7, pc}

200036a0 <ascii_goToXY>:

void ascii_goToXY(unsigned char row, unsigned char column){
200036a0:	b580      	push	{r7, lr}
200036a2:	b084      	sub	sp, #16
200036a4:	af00      	add	r7, sp, #0
200036a6:	0002      	movs	r2, r0
200036a8:	1dfb      	adds	r3, r7, #7
200036aa:	701a      	strb	r2, [r3, #0]
200036ac:	1dbb      	adds	r3, r7, #6
200036ae:	1c0a      	adds	r2, r1, #0
200036b0:	701a      	strb	r2, [r3, #0]
	unsigned char address = row-1;
200036b2:	230f      	movs	r3, #15
200036b4:	18fb      	adds	r3, r7, r3
200036b6:	1dfa      	adds	r2, r7, #7
200036b8:	7812      	ldrb	r2, [r2, #0]
200036ba:	3a01      	subs	r2, #1
200036bc:	701a      	strb	r2, [r3, #0]
	if(column == 2){
200036be:	1dbb      	adds	r3, r7, #6
200036c0:	781b      	ldrb	r3, [r3, #0]
200036c2:	2b02      	cmp	r3, #2
200036c4:	d106      	bne.n	200036d4 <ascii_goToXY+0x34>
		address += 0x40;
200036c6:	230f      	movs	r3, #15
200036c8:	18fb      	adds	r3, r7, r3
200036ca:	220f      	movs	r2, #15
200036cc:	18ba      	adds	r2, r7, r2
200036ce:	7812      	ldrb	r2, [r2, #0]
200036d0:	3240      	adds	r2, #64	; 0x40
200036d2:	701a      	strb	r2, [r3, #0]
	}
	ascii_write_cmd(0x80 | address);
200036d4:	230f      	movs	r3, #15
200036d6:	18fb      	adds	r3, r7, r3
200036d8:	781b      	ldrb	r3, [r3, #0]
200036da:	2280      	movs	r2, #128	; 0x80
200036dc:	4252      	negs	r2, r2
200036de:	4313      	orrs	r3, r2
200036e0:	b2db      	uxtb	r3, r3
200036e2:	0018      	movs	r0, r3
200036e4:	f7ff ff0e 	bl	20003504 <ascii_write_cmd>
}
200036e8:	46c0      	nop			; (mov r8, r8)
200036ea:	46bd      	mov	sp, r7
200036ec:	b004      	add	sp, #16
200036ee:	bd80      	pop	{r7, pc}

200036f0 <ascii_init>:

void ascii_init(void){
200036f0:	b580      	push	{r7, lr}
200036f2:	af00      	add	r7, sp, #0
	//initiera displayen:
		while((ascii_read_status() & 0x80) == 0x80){} //VÃ¤nta tills displayed Ã¤r redo
200036f4:	46c0      	nop			; (mov r8, r8)
200036f6:	f7ff ff2f 	bl	20003558 <ascii_read_status>
200036fa:	0003      	movs	r3, r0
200036fc:	001a      	movs	r2, r3
200036fe:	2380      	movs	r3, #128	; 0x80
20003700:	4013      	ands	r3, r2
20003702:	2b80      	cmp	r3, #128	; 0x80
20003704:	d0f7      	beq.n	200036f6 <ascii_init+0x6>
		delay_micro(20); //latenstid 
20003706:	2014      	movs	r0, #20
20003708:	f7fe ff76 	bl	200025f8 <delay_micro>
		ascii_write_cmd(0x38); //Function set (39us), 000011NFXX, N = antal rader = 2, F = -->0=5x8<--, 1=5x11
2000370c:	2038      	movs	r0, #56	; 0x38
2000370e:	f7ff fef9 	bl	20003504 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20003712:	2064      	movs	r0, #100	; 0x64
20003714:	f7fe ff70 	bl	200025f8 <delay_micro>
		
	// clear display
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20003718:	46c0      	nop			; (mov r8, r8)
2000371a:	f7ff ff1d 	bl	20003558 <ascii_read_status>
2000371e:	0003      	movs	r3, r0
20003720:	001a      	movs	r2, r3
20003722:	2380      	movs	r3, #128	; 0x80
20003724:	4013      	ands	r3, r2
20003726:	2b80      	cmp	r3, #128	; 0x80
20003728:	d0f7      	beq.n	2000371a <ascii_init+0x2a>
		delay_micro(20); //latenstid
2000372a:	2014      	movs	r0, #20
2000372c:	f7fe ff64 	bl	200025f8 <delay_micro>
		ascii_write_cmd(0x01); 
20003730:	2001      	movs	r0, #1
20003732:	f7ff fee7 	bl	20003504 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20003736:	2064      	movs	r0, #100	; 0x64
20003738:	f7fe ff5e 	bl	200025f8 <delay_micro>

	//display control:
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
2000373c:	46c0      	nop			; (mov r8, r8)
2000373e:	f7ff ff0b 	bl	20003558 <ascii_read_status>
20003742:	0003      	movs	r3, r0
20003744:	001a      	movs	r2, r3
20003746:	2380      	movs	r3, #128	; 0x80
20003748:	4013      	ands	r3, r2
2000374a:	2b80      	cmp	r3, #128	; 0x80
2000374c:	d0f7      	beq.n	2000373e <ascii_init+0x4e>
		delay_micro(20); //latenstid
2000374e:	2014      	movs	r0, #20
20003750:	f7fe ff52 	bl	200025f8 <delay_micro>
		ascii_write_cmd(0x0C); //000001 + XXX. X:ena = 0:av / 1:pÃƒÂ¥ -  SkÃƒÂ¤rm/MarkÃƒÂ¶r/BlinkaMarkÃƒÂ¶ren
20003754:	200c      	movs	r0, #12
20003756:	f7ff fed5 	bl	20003504 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
2000375a:	2064      	movs	r0, #100	; 0x64
2000375c:	f7fe ff4c 	bl	200025f8 <delay_micro>
		
	// entry mode set
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20003760:	46c0      	nop			; (mov r8, r8)
20003762:	f7ff fef9 	bl	20003558 <ascii_read_status>
20003766:	0003      	movs	r3, r0
20003768:	001a      	movs	r2, r3
2000376a:	2380      	movs	r3, #128	; 0x80
2000376c:	4013      	ands	r3, r2
2000376e:	2b80      	cmp	r3, #128	; 0x80
20003770:	d0f7      	beq.n	20003762 <ascii_init+0x72>
		delay_micro(20); //latenstid
20003772:	2014      	movs	r0, #20
20003774:	f7fe ff40 	bl	200025f8 <delay_micro>
		ascii_write_cmd(0x06); //00000001 + XY. X=0: markÃƒÂ¶ren vÃƒÂ¤nst. || X=1: marÃƒÂ¶kren hÃƒÂ¶g. - Y=0: skift av || Y=1: skift pÃƒÂ¥
20003778:	2006      	movs	r0, #6
2000377a:	f7ff fec3 	bl	20003504 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
2000377e:	2064      	movs	r0, #100	; 0x64
20003780:	f7fe ff3a 	bl	200025f8 <delay_micro>
		
		
}
20003784:	46c0      	nop			; (mov r8, r8)
20003786:	46bd      	mov	sp, r7
20003788:	bd80      	pop	{r7, pc}

2000378a <init_application>:

void init_application(void){
2000378a:	b580      	push	{r7, lr}
2000378c:	af00      	add	r7, sp, #0
	#ifdef USBDM
		*((unsigned long *) 0x40023830) = 0x18; //startar klockor pÃ¥ port D och E
		//__asm volatile ("LDR R0, =0x08000209\n BLX R0 \n"); //initiera PLL
	#endif
	//"initierar Port E med anvÃƒÂ¤ndning med LCD-modulen, dvs. sÃƒÂ¥vÃƒÂ¤l port E0-7 som E8-15 sÃƒÂ¤tts till utgÃƒÂ¥ngar
	* portModer = 0x55555555;
2000378e:	4b03      	ldr	r3, [pc, #12]	; (2000379c <init_application+0x12>)
20003790:	4a03      	ldr	r2, [pc, #12]	; (200037a0 <init_application+0x16>)
20003792:	601a      	str	r2, [r3, #0]
}
20003794:	46c0      	nop			; (mov r8, r8)
20003796:	46bd      	mov	sp, r7
20003798:	bd80      	pop	{r7, pc}
2000379a:	46c0      	nop			; (mov r8, r8)
2000379c:	40021000 	andmi	r1, r2, r0
200037a0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200037a4 <set_up_ascii>:

void set_up_ascii( void ) {
200037a4:	b580      	push	{r7, lr}
200037a6:	af00      	add	r7, sp, #0
	init_application();
200037a8:	f7ff ffef 	bl	2000378a <init_application>
	ascii_init();
200037ac:	f7ff ffa0 	bl	200036f0 <ascii_init>
}
200037b0:	46c0      	nop			; (mov r8, r8)
200037b2:	46bd      	mov	sp, r7
200037b4:	bd80      	pop	{r7, pc}

200037b6 <clear_ascii>:

void clear_ascii( void ) {
200037b6:	b590      	push	{r4, r7, lr}
200037b8:	b089      	sub	sp, #36	; 0x24
200037ba:	af00      	add	r7, sp, #0
	char *s;
	char clear[] = "                    ";
200037bc:	1d3b      	adds	r3, r7, #4
200037be:	4a17      	ldr	r2, [pc, #92]	; (2000381c <clear_ascii+0x66>)
200037c0:	ca13      	ldmia	r2!, {r0, r1, r4}
200037c2:	c313      	stmia	r3!, {r0, r1, r4}
200037c4:	ca03      	ldmia	r2!, {r0, r1}
200037c6:	c303      	stmia	r3!, {r0, r1}
200037c8:	7812      	ldrb	r2, [r2, #0]
200037ca:	701a      	strb	r2, [r3, #0]
	
	s = clear;
200037cc:	1d3b      	adds	r3, r7, #4
200037ce:	61fb      	str	r3, [r7, #28]
	ascii_goToXY(1,1);
200037d0:	2101      	movs	r1, #1
200037d2:	2001      	movs	r0, #1
200037d4:	f7ff ff64 	bl	200036a0 <ascii_goToXY>
	while(*s){
200037d8:	e006      	b.n	200037e8 <clear_ascii+0x32>
		ascii_write_char(*s++);
200037da:	69fb      	ldr	r3, [r7, #28]
200037dc:	1c5a      	adds	r2, r3, #1
200037de:	61fa      	str	r2, [r7, #28]
200037e0:	781b      	ldrb	r3, [r3, #0]
200037e2:	0018      	movs	r0, r3
200037e4:	f7ff ff3e 	bl	20003664 <ascii_write_char>
	while(*s){
200037e8:	69fb      	ldr	r3, [r7, #28]
200037ea:	781b      	ldrb	r3, [r3, #0]
200037ec:	2b00      	cmp	r3, #0
200037ee:	d1f4      	bne.n	200037da <clear_ascii+0x24>
	}
	s = clear;
200037f0:	1d3b      	adds	r3, r7, #4
200037f2:	61fb      	str	r3, [r7, #28]
	ascii_goToXY(1,2);
200037f4:	2102      	movs	r1, #2
200037f6:	2001      	movs	r0, #1
200037f8:	f7ff ff52 	bl	200036a0 <ascii_goToXY>
	while(*s){
200037fc:	e006      	b.n	2000380c <clear_ascii+0x56>
		ascii_write_char(*s++);
200037fe:	69fb      	ldr	r3, [r7, #28]
20003800:	1c5a      	adds	r2, r3, #1
20003802:	61fa      	str	r2, [r7, #28]
20003804:	781b      	ldrb	r3, [r3, #0]
20003806:	0018      	movs	r0, r3
20003808:	f7ff ff2c 	bl	20003664 <ascii_write_char>
	while(*s){
2000380c:	69fb      	ldr	r3, [r7, #28]
2000380e:	781b      	ldrb	r3, [r3, #0]
20003810:	2b00      	cmp	r3, #0
20003812:	d1f4      	bne.n	200037fe <clear_ascii+0x48>
	}
}
20003814:	46c0      	nop			; (mov r8, r8)
20003816:	46bd      	mov	sp, r7
20003818:	b009      	add	sp, #36	; 0x24
2000381a:	bd90      	pop	{r4, r7, pc}
2000381c:	2000a660 	andcs	sl, r0, r0, ror #12

20003820 <ascii_write>:

void ascii_write(char *row1, char *row2) {
20003820:	b580      	push	{r7, lr}
20003822:	b082      	sub	sp, #8
20003824:	af00      	add	r7, sp, #0
20003826:	6078      	str	r0, [r7, #4]
20003828:	6039      	str	r1, [r7, #0]
	clear_ascii();
2000382a:	f7ff ffc4 	bl	200037b6 <clear_ascii>
	
	ascii_goToXY(1,1);
2000382e:	2101      	movs	r1, #1
20003830:	2001      	movs	r0, #1
20003832:	f7ff ff35 	bl	200036a0 <ascii_goToXY>
	while(*row1){
20003836:	e006      	b.n	20003846 <ascii_write+0x26>
		ascii_write_char(*row1++);
20003838:	687b      	ldr	r3, [r7, #4]
2000383a:	1c5a      	adds	r2, r3, #1
2000383c:	607a      	str	r2, [r7, #4]
2000383e:	781b      	ldrb	r3, [r3, #0]
20003840:	0018      	movs	r0, r3
20003842:	f7ff ff0f 	bl	20003664 <ascii_write_char>
	while(*row1){
20003846:	687b      	ldr	r3, [r7, #4]
20003848:	781b      	ldrb	r3, [r3, #0]
2000384a:	2b00      	cmp	r3, #0
2000384c:	d1f4      	bne.n	20003838 <ascii_write+0x18>
	}	
	ascii_goToXY(1,2);
2000384e:	2102      	movs	r1, #2
20003850:	2001      	movs	r0, #1
20003852:	f7ff ff25 	bl	200036a0 <ascii_goToXY>
	while(*row2){
20003856:	e006      	b.n	20003866 <ascii_write+0x46>
		ascii_write_char(*row2++);
20003858:	683b      	ldr	r3, [r7, #0]
2000385a:	1c5a      	adds	r2, r3, #1
2000385c:	603a      	str	r2, [r7, #0]
2000385e:	781b      	ldrb	r3, [r3, #0]
20003860:	0018      	movs	r0, r3
20003862:	f7ff feff 	bl	20003664 <ascii_write_char>
	while(*row2){
20003866:	683b      	ldr	r3, [r7, #0]
20003868:	781b      	ldrb	r3, [r3, #0]
2000386a:	2b00      	cmp	r3, #0
2000386c:	d1f4      	bne.n	20003858 <ascii_write+0x38>
	}
	
	ascii_goToXY(21,1);
2000386e:	2101      	movs	r1, #1
20003870:	2015      	movs	r0, #21
20003872:	f7ff ff15 	bl	200036a0 <ascii_goToXY>
}
20003876:	46c0      	nop			; (mov r8, r8)
20003878:	46bd      	mov	sp, r7
2000387a:	b002      	add	sp, #8
2000387c:	bd80      	pop	{r7, pc}

2000387e <ascii_write_part>:

void ascii_write_part(char *row1, char *row2, int limit1, int limit2) {
2000387e:	b580      	push	{r7, lr}
20003880:	b086      	sub	sp, #24
20003882:	af00      	add	r7, sp, #0
20003884:	60f8      	str	r0, [r7, #12]
20003886:	60b9      	str	r1, [r7, #8]
20003888:	607a      	str	r2, [r7, #4]
2000388a:	603b      	str	r3, [r7, #0]
	clear_ascii();
2000388c:	f7ff ff93 	bl	200037b6 <clear_ascii>
	
	ascii_goToXY(1,1);
20003890:	2101      	movs	r1, #1
20003892:	2001      	movs	r0, #1
20003894:	f7ff ff04 	bl	200036a0 <ascii_goToXY>
	int i = 0;
20003898:	2300      	movs	r3, #0
2000389a:	617b      	str	r3, [r7, #20]
	if(limit1 > 0) {
2000389c:	687b      	ldr	r3, [r7, #4]
2000389e:	2b00      	cmp	r3, #0
200038a0:	dd11      	ble.n	200038c6 <ascii_write_part+0x48>
		while(*row1 && (i++ < limit1)){
200038a2:	e006      	b.n	200038b2 <ascii_write_part+0x34>
			ascii_write_char(*row1++);
200038a4:	68fb      	ldr	r3, [r7, #12]
200038a6:	1c5a      	adds	r2, r3, #1
200038a8:	60fa      	str	r2, [r7, #12]
200038aa:	781b      	ldrb	r3, [r3, #0]
200038ac:	0018      	movs	r0, r3
200038ae:	f7ff fed9 	bl	20003664 <ascii_write_char>
		while(*row1 && (i++ < limit1)){
200038b2:	68fb      	ldr	r3, [r7, #12]
200038b4:	781b      	ldrb	r3, [r3, #0]
200038b6:	2b00      	cmp	r3, #0
200038b8:	d005      	beq.n	200038c6 <ascii_write_part+0x48>
200038ba:	697b      	ldr	r3, [r7, #20]
200038bc:	1c5a      	adds	r2, r3, #1
200038be:	617a      	str	r2, [r7, #20]
200038c0:	687a      	ldr	r2, [r7, #4]
200038c2:	4293      	cmp	r3, r2
200038c4:	dbee      	blt.n	200038a4 <ascii_write_part+0x26>
		}			
	}

	ascii_goToXY(1,2);
200038c6:	2102      	movs	r1, #2
200038c8:	2001      	movs	r0, #1
200038ca:	f7ff fee9 	bl	200036a0 <ascii_goToXY>
	i = 0;
200038ce:	2300      	movs	r3, #0
200038d0:	617b      	str	r3, [r7, #20]
	if(limit2 > 0) {
200038d2:	683b      	ldr	r3, [r7, #0]
200038d4:	2b00      	cmp	r3, #0
200038d6:	dd11      	ble.n	200038fc <ascii_write_part+0x7e>
		while(*row2 && (i++ < limit2)){
200038d8:	e006      	b.n	200038e8 <ascii_write_part+0x6a>
			ascii_write_char(*row2++);
200038da:	68bb      	ldr	r3, [r7, #8]
200038dc:	1c5a      	adds	r2, r3, #1
200038de:	60ba      	str	r2, [r7, #8]
200038e0:	781b      	ldrb	r3, [r3, #0]
200038e2:	0018      	movs	r0, r3
200038e4:	f7ff febe 	bl	20003664 <ascii_write_char>
		while(*row2 && (i++ < limit2)){
200038e8:	68bb      	ldr	r3, [r7, #8]
200038ea:	781b      	ldrb	r3, [r3, #0]
200038ec:	2b00      	cmp	r3, #0
200038ee:	d005      	beq.n	200038fc <ascii_write_part+0x7e>
200038f0:	697b      	ldr	r3, [r7, #20]
200038f2:	1c5a      	adds	r2, r3, #1
200038f4:	617a      	str	r2, [r7, #20]
200038f6:	683a      	ldr	r2, [r7, #0]
200038f8:	4293      	cmp	r3, r2
200038fa:	dbee      	blt.n	200038da <ascii_write_part+0x5c>
		}
	}
	
	ascii_goToXY(21,1);
200038fc:	2101      	movs	r1, #1
200038fe:	2015      	movs	r0, #21
20003900:	f7ff fece 	bl	200036a0 <ascii_goToXY>
}
20003904:	46c0      	nop			; (mov r8, r8)
20003906:	46bd      	mov	sp, r7
20003908:	b006      	add	sp, #24
2000390a:	bd80      	pop	{r7, pc}

2000390c <ascii_test>:



void ascii_test(void) {
2000390c:	b590      	push	{r4, r7, lr}
2000390e:	b08b      	sub	sp, #44	; 0x2c
20003910:	af00      	add	r7, sp, #0
	char *s;
	char test1[] = "Alfanumerisk";
20003912:	2314      	movs	r3, #20
20003914:	18fb      	adds	r3, r7, r3
20003916:	4a1c      	ldr	r2, [pc, #112]	; (20003988 <ascii_test+0x7c>)
20003918:	ca13      	ldmia	r2!, {r0, r1, r4}
2000391a:	c313      	stmia	r3!, {r0, r1, r4}
2000391c:	7812      	ldrb	r2, [r2, #0]
2000391e:	701a      	strb	r2, [r3, #0]
	char test2[] = "hardåäöare suger";
20003920:	003b      	movs	r3, r7
20003922:	4a1a      	ldr	r2, [pc, #104]	; (2000398c <ascii_test+0x80>)
20003924:	ca13      	ldmia	r2!, {r0, r1, r4}
20003926:	c313      	stmia	r3!, {r0, r1, r4}
20003928:	ca03      	ldmia	r2!, {r0, r1}
2000392a:	c303      	stmia	r3!, {r0, r1}
	
	init_application();
2000392c:	f7ff ff2d 	bl	2000378a <init_application>
	ascii_init();
20003930:	f7ff fede 	bl	200036f0 <ascii_init>
	ascii_goToXY(1,1);
20003934:	2101      	movs	r1, #1
20003936:	2001      	movs	r0, #1
20003938:	f7ff feb2 	bl	200036a0 <ascii_goToXY>
	s = test1;
2000393c:	2314      	movs	r3, #20
2000393e:	18fb      	adds	r3, r7, r3
20003940:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
20003942:	e006      	b.n	20003952 <ascii_test+0x46>
		ascii_write_char(*s++);
20003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003946:	1c5a      	adds	r2, r3, #1
20003948:	627a      	str	r2, [r7, #36]	; 0x24
2000394a:	781b      	ldrb	r3, [r3, #0]
2000394c:	0018      	movs	r0, r3
2000394e:	f7ff fe89 	bl	20003664 <ascii_write_char>
	while(*s){
20003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003954:	781b      	ldrb	r3, [r3, #0]
20003956:	2b00      	cmp	r3, #0
20003958:	d1f4      	bne.n	20003944 <ascii_test+0x38>
	}
	ascii_goToXY(1,2);
2000395a:	2102      	movs	r1, #2
2000395c:	2001      	movs	r0, #1
2000395e:	f7ff fe9f 	bl	200036a0 <ascii_goToXY>
	s = test2;
20003962:	003b      	movs	r3, r7
20003964:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
20003966:	e006      	b.n	20003976 <ascii_test+0x6a>
		ascii_write_char(*s++);
20003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000396a:	1c5a      	adds	r2, r3, #1
2000396c:	627a      	str	r2, [r7, #36]	; 0x24
2000396e:	781b      	ldrb	r3, [r3, #0]
20003970:	0018      	movs	r0, r3
20003972:	f7ff fe77 	bl	20003664 <ascii_write_char>
	while(*s){
20003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003978:	781b      	ldrb	r3, [r3, #0]
2000397a:	2b00      	cmp	r3, #0
2000397c:	d1f4      	bne.n	20003968 <ascii_test+0x5c>
	}
	return 0;
2000397e:	46c0      	nop			; (mov r8, r8)
20003980:	46bd      	mov	sp, r7
20003982:	b00b      	add	sp, #44	; 0x2c
20003984:	bd90      	pop	{r4, r7, pc}
20003986:	46c0      	nop			; (mov r8, r8)
20003988:	2000a678 	andcs	sl, r0, r8, ror r6
2000398c:	2000a688 	andcs	sl, r0, r8, lsl #13

20003990 <display>:
#include "slow_text.h"
#include "ascii_display.h"

void display(SlowText *this, int length_of_row1) {
20003990:	b580      	push	{r7, lr}
20003992:	b084      	sub	sp, #16
20003994:	af00      	add	r7, sp, #0
20003996:	6078      	str	r0, [r7, #4]
20003998:	6039      	str	r1, [r7, #0]
	int limit1 = this->counter / this->speed;
2000399a:	687b      	ldr	r3, [r7, #4]
2000399c:	689a      	ldr	r2, [r3, #8]
2000399e:	687b      	ldr	r3, [r7, #4]
200039a0:	68db      	ldr	r3, [r3, #12]
200039a2:	0019      	movs	r1, r3
200039a4:	0010      	movs	r0, r2
200039a6:	f000 f999 	bl	20003cdc <__divsi3>
200039aa:	0003      	movs	r3, r0
200039ac:	60fb      	str	r3, [r7, #12]
	int limit2 = this->counter / this->speed - length_of_row1;
200039ae:	687b      	ldr	r3, [r7, #4]
200039b0:	689a      	ldr	r2, [r3, #8]
200039b2:	687b      	ldr	r3, [r7, #4]
200039b4:	68db      	ldr	r3, [r3, #12]
200039b6:	0019      	movs	r1, r3
200039b8:	0010      	movs	r0, r2
200039ba:	f000 f98f 	bl	20003cdc <__divsi3>
200039be:	0003      	movs	r3, r0
200039c0:	001a      	movs	r2, r3
200039c2:	683b      	ldr	r3, [r7, #0]
200039c4:	1ad3      	subs	r3, r2, r3
200039c6:	60bb      	str	r3, [r7, #8]
	ascii_write_part(this->row1, this->row2, limit1, limit2);
200039c8:	687b      	ldr	r3, [r7, #4]
200039ca:	6818      	ldr	r0, [r3, #0]
200039cc:	687b      	ldr	r3, [r7, #4]
200039ce:	6859      	ldr	r1, [r3, #4]
200039d0:	68bb      	ldr	r3, [r7, #8]
200039d2:	68fa      	ldr	r2, [r7, #12]
200039d4:	f7ff ff53 	bl	2000387e <ascii_write_part>
	
	this->counter++;
200039d8:	687b      	ldr	r3, [r7, #4]
200039da:	689b      	ldr	r3, [r3, #8]
200039dc:	1c5a      	adds	r2, r3, #1
200039de:	687b      	ldr	r3, [r7, #4]
200039e0:	609a      	str	r2, [r3, #8]
}
200039e2:	46c0      	nop			; (mov r8, r8)
200039e4:	46bd      	mov	sp, r7
200039e6:	b004      	add	sp, #16
200039e8:	bd80      	pop	{r7, pc}

200039ea <init_slow_text>:

void init_slow_text(SlowText *obj, char *row1, char *row2, int speed) {
200039ea:	b580      	push	{r7, lr}
200039ec:	b084      	sub	sp, #16
200039ee:	af00      	add	r7, sp, #0
200039f0:	60f8      	str	r0, [r7, #12]
200039f2:	60b9      	str	r1, [r7, #8]
200039f4:	607a      	str	r2, [r7, #4]
200039f6:	603b      	str	r3, [r7, #0]
	obj->row1 = row1;
200039f8:	68fb      	ldr	r3, [r7, #12]
200039fa:	68ba      	ldr	r2, [r7, #8]
200039fc:	601a      	str	r2, [r3, #0]
	obj->row2 = row2;
200039fe:	68fb      	ldr	r3, [r7, #12]
20003a00:	687a      	ldr	r2, [r7, #4]
20003a02:	605a      	str	r2, [r3, #4]
	obj->speed = speed;
20003a04:	68fb      	ldr	r3, [r7, #12]
20003a06:	683a      	ldr	r2, [r7, #0]
20003a08:	60da      	str	r2, [r3, #12]
	obj->counter = 0;
20003a0a:	68fb      	ldr	r3, [r7, #12]
20003a0c:	2200      	movs	r2, #0
20003a0e:	609a      	str	r2, [r3, #8]
	obj->display = display;
20003a10:	68fb      	ldr	r3, [r7, #12]
20003a12:	4a03      	ldr	r2, [pc, #12]	; (20003a20 <init_slow_text+0x36>)
20003a14:	611a      	str	r2, [r3, #16]
20003a16:	46c0      	nop			; (mov r8, r8)
20003a18:	46bd      	mov	sp, r7
20003a1a:	b004      	add	sp, #16
20003a1c:	bd80      	pop	{r7, pc}
20003a1e:	46c0      	nop			; (mov r8, r8)
20003a20:	20003991 	mulcs	r0, r1, r9

20003a24 <initSprites>:


GameObject indoorsObj;
Image indoorsImage;
Image indoorsImages[1];
static void initSprites( void ) {	
20003a24:	b580      	push	{r7, lr}
20003a26:	b084      	sub	sp, #16
20003a28:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempIndoorsLight;
20003a2a:	4b12      	ldr	r3, [pc, #72]	; (20003a74 <initSprites+0x50>)
20003a2c:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer11, indoors_light_bits, indoors_black_width, indoors_black_height);
20003a2e:	4912      	ldr	r1, [pc, #72]	; (20003a78 <initSprites+0x54>)
20003a30:	68f8      	ldr	r0, [r7, #12]
20003a32:	2340      	movs	r3, #64	; 0x40
20003a34:	2280      	movs	r2, #128	; 0x80
20003a36:	f7ff fcd1 	bl	200033dc <load_sprite>
	indoorsLight = pointer11;
20003a3a:	4b10      	ldr	r3, [pc, #64]	; (20003a7c <initSprites+0x58>)
20003a3c:	68fa      	ldr	r2, [r7, #12]
20003a3e:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempIndoorsGray;
20003a40:	4b0f      	ldr	r3, [pc, #60]	; (20003a80 <initSprites+0x5c>)
20003a42:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer12, indoors_gray_bits, indoors_black_width, indoors_black_height);
20003a44:	490f      	ldr	r1, [pc, #60]	; (20003a84 <initSprites+0x60>)
20003a46:	68b8      	ldr	r0, [r7, #8]
20003a48:	2340      	movs	r3, #64	; 0x40
20003a4a:	2280      	movs	r2, #128	; 0x80
20003a4c:	f7ff fcc6 	bl	200033dc <load_sprite>
	indoorsGray = pointer12;
20003a50:	4b0d      	ldr	r3, [pc, #52]	; (20003a88 <initSprites+0x64>)
20003a52:	68ba      	ldr	r2, [r7, #8]
20003a54:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempIndoorsBlack;
20003a56:	4b0d      	ldr	r3, [pc, #52]	; (20003a8c <initSprites+0x68>)
20003a58:	607b      	str	r3, [r7, #4]
	load_sprite(pointer13, indoors_black_bits, indoors_black_width, indoors_black_height);
20003a5a:	490d      	ldr	r1, [pc, #52]	; (20003a90 <initSprites+0x6c>)
20003a5c:	6878      	ldr	r0, [r7, #4]
20003a5e:	2340      	movs	r3, #64	; 0x40
20003a60:	2280      	movs	r2, #128	; 0x80
20003a62:	f7ff fcbb 	bl	200033dc <load_sprite>
	indoorsBlack = pointer13;	
20003a66:	4b0b      	ldr	r3, [pc, #44]	; (20003a94 <initSprites+0x70>)
20003a68:	687a      	ldr	r2, [r7, #4]
20003a6a:	601a      	str	r2, [r3, #0]
	
}
20003a6c:	46c0      	nop			; (mov r8, r8)
20003a6e:	46bd      	mov	sp, r7
20003a70:	b004      	add	sp, #16
20003a72:	bd80      	pop	{r7, pc}
20003a74:	200063c8 	andcs	r6, r0, r8, asr #7
20003a78:	20009448 	andcs	r9, r0, r8, asr #8
20003a7c:	20006424 	andcs	r6, r0, r4, lsr #8
20003a80:	200063bc 			; <UNDEFINED> instruction: 0x200063bc
20003a84:	20009048 	andcs	r9, r0, r8, asr #32
20003a88:	200063e0 	andcs	r6, r0, r0, ror #7
20003a8c:	200063d4 	ldrdcs	r6, [r0], -r4
20003a90:	20008c48 	andcs	r8, r0, r8, asr #24
20003a94:	20006414 	andcs	r6, r0, r4, lsl r4

20003a98 <init_indoors>:
	
void init_indoors( GameObject *indoorsObj ) {
20003a98:	b590      	push	{r4, r7, lr}
20003a9a:	b083      	sub	sp, #12
20003a9c:	af00      	add	r7, sp, #0
20003a9e:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20003aa0:	4b14      	ldr	r3, [pc, #80]	; (20003af4 <init_indoors+0x5c>)
20003aa2:	681b      	ldr	r3, [r3, #0]
20003aa4:	2b00      	cmp	r3, #0
20003aa6:	d011      	beq.n	20003acc <init_indoors+0x34>
		initSprites();
20003aa8:	f7ff ffbc 	bl	20003a24 <initSprites>
		firstTime = 0;			
20003aac:	4b11      	ldr	r3, [pc, #68]	; (20003af4 <init_indoors+0x5c>)
20003aae:	2200      	movs	r2, #0
20003ab0:	601a      	str	r2, [r3, #0]

		indoorsImages[0] = indoorsImage;
20003ab2:	4b11      	ldr	r3, [pc, #68]	; (20003af8 <init_indoors+0x60>)
20003ab4:	4a11      	ldr	r2, [pc, #68]	; (20003afc <init_indoors+0x64>)
20003ab6:	ca13      	ldmia	r2!, {r0, r1, r4}
20003ab8:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&indoorsImages[0], indoorsBlack, indoorsGray, indoorsLight);
20003aba:	4b11      	ldr	r3, [pc, #68]	; (20003b00 <init_indoors+0x68>)
20003abc:	6819      	ldr	r1, [r3, #0]
20003abe:	4b11      	ldr	r3, [pc, #68]	; (20003b04 <init_indoors+0x6c>)
20003ac0:	681a      	ldr	r2, [r3, #0]
20003ac2:	4b11      	ldr	r3, [pc, #68]	; (20003b08 <init_indoors+0x70>)
20003ac4:	681b      	ldr	r3, [r3, #0]
20003ac6:	480c      	ldr	r0, [pc, #48]	; (20003af8 <init_indoors+0x60>)
20003ac8:	f7ff fc74 	bl	200033b4 <load_image>
	}
	
	indoorsObj->images = indoorsImages;
20003acc:	687b      	ldr	r3, [r7, #4]
20003ace:	4a0a      	ldr	r2, [pc, #40]	; (20003af8 <init_indoors+0x60>)
20003ad0:	601a      	str	r2, [r3, #0]

	indoorsObj->current_frame = 0;
20003ad2:	687b      	ldr	r3, [r7, #4]
20003ad4:	2200      	movs	r2, #0
20003ad6:	615a      	str	r2, [r3, #20]
	indoorsObj->n_frames = 1;
20003ad8:	687b      	ldr	r3, [r7, #4]
20003ada:	2201      	movs	r2, #1
20003adc:	619a      	str	r2, [r3, #24]
	indoorsObj->animation_speed = 1;
20003ade:	687b      	ldr	r3, [r7, #4]
20003ae0:	2201      	movs	r2, #1
20003ae2:	61da      	str	r2, [r3, #28]
	indoorsObj->animation_counter = 0;
20003ae4:	687b      	ldr	r3, [r7, #4]
20003ae6:	2200      	movs	r2, #0
20003ae8:	621a      	str	r2, [r3, #32]
}
20003aea:	46c0      	nop			; (mov r8, r8)
20003aec:	46bd      	mov	sp, r7
20003aee:	b003      	add	sp, #12
20003af0:	bd90      	pop	{r4, r7, pc}
20003af2:	46c0      	nop			; (mov r8, r8)
20003af4:	20009848 	andcs	r9, r0, r8, asr #16
20003af8:	20006408 	andcs	r6, r0, r8, lsl #8
20003afc:	20006418 	andcs	r6, r0, r8, lsl r4
20003b00:	20006414 	andcs	r6, r0, r4, lsl r4
20003b04:	200063e0 	andcs	r6, r0, r0, ror #7
20003b08:	20006424 	andcs	r6, r0, r4, lsr #8

20003b0c <initSprites>:


GameObject indoors2Obj;
Image indoors2Image;
Image indoors2Images[1];
static void initSprites( void ) {	
20003b0c:	b580      	push	{r7, lr}
20003b0e:	b084      	sub	sp, #16
20003b10:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempIndoors2Light;
20003b12:	4b12      	ldr	r3, [pc, #72]	; (20003b5c <initSprites+0x50>)
20003b14:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer11, indoors2_light_bits, indoors2_black_width, indoors2_black_height);
20003b16:	4912      	ldr	r1, [pc, #72]	; (20003b60 <initSprites+0x54>)
20003b18:	68f8      	ldr	r0, [r7, #12]
20003b1a:	2340      	movs	r3, #64	; 0x40
20003b1c:	2280      	movs	r2, #128	; 0x80
20003b1e:	f7ff fc5d 	bl	200033dc <load_sprite>
	indoors2Light = pointer11;
20003b22:	4b10      	ldr	r3, [pc, #64]	; (20003b64 <initSprites+0x58>)
20003b24:	68fa      	ldr	r2, [r7, #12]
20003b26:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempIndoors2Gray;
20003b28:	4b0f      	ldr	r3, [pc, #60]	; (20003b68 <initSprites+0x5c>)
20003b2a:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer12, indoors2_gray_bits, indoors2_black_width, indoors2_black_height);
20003b2c:	490f      	ldr	r1, [pc, #60]	; (20003b6c <initSprites+0x60>)
20003b2e:	68b8      	ldr	r0, [r7, #8]
20003b30:	2340      	movs	r3, #64	; 0x40
20003b32:	2280      	movs	r2, #128	; 0x80
20003b34:	f7ff fc52 	bl	200033dc <load_sprite>
	indoors2Gray = pointer12;
20003b38:	4b0d      	ldr	r3, [pc, #52]	; (20003b70 <initSprites+0x64>)
20003b3a:	68ba      	ldr	r2, [r7, #8]
20003b3c:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempIndoors2Black;
20003b3e:	4b0d      	ldr	r3, [pc, #52]	; (20003b74 <initSprites+0x68>)
20003b40:	607b      	str	r3, [r7, #4]
	load_sprite(pointer13, indoors2_black_bits, indoors2_black_width, indoors2_black_height);
20003b42:	490d      	ldr	r1, [pc, #52]	; (20003b78 <initSprites+0x6c>)
20003b44:	6878      	ldr	r0, [r7, #4]
20003b46:	2340      	movs	r3, #64	; 0x40
20003b48:	2280      	movs	r2, #128	; 0x80
20003b4a:	f7ff fc47 	bl	200033dc <load_sprite>
	indoors2Black = pointer13;	
20003b4e:	4b0b      	ldr	r3, [pc, #44]	; (20003b7c <initSprites+0x70>)
20003b50:	687a      	ldr	r2, [r7, #4]
20003b52:	601a      	str	r2, [r3, #0]
	
}
20003b54:	46c0      	nop			; (mov r8, r8)
20003b56:	46bd      	mov	sp, r7
20003b58:	b004      	add	sp, #16
20003b5a:	bd80      	pop	{r7, pc}
20003b5c:	20006484 	andcs	r6, r0, r4, lsl #9
20003b60:	2000a04c 	andcs	sl, r0, ip, asr #32
20003b64:	20006474 	andcs	r6, r0, r4, ror r4
20003b68:	20006468 	andcs	r6, r0, r8, ror #8
20003b6c:	20009c4c 	andcs	r9, r0, ip, asr #24
20003b70:	2000644c 	andcs	r6, r0, ip, asr #8
20003b74:	20006478 	andcs	r6, r0, r8, ror r4
20003b78:	2000984c 	andcs	r9, r0, ip, asr #16
20003b7c:	20006490 	mulcs	r0, r0, r4

20003b80 <init_indoors2>:
	
void init_indoors2( GameObject *indoors2Obj ) {
20003b80:	b590      	push	{r4, r7, lr}
20003b82:	b083      	sub	sp, #12
20003b84:	af00      	add	r7, sp, #0
20003b86:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20003b88:	4b14      	ldr	r3, [pc, #80]	; (20003bdc <init_indoors2+0x5c>)
20003b8a:	681b      	ldr	r3, [r3, #0]
20003b8c:	2b00      	cmp	r3, #0
20003b8e:	d011      	beq.n	20003bb4 <init_indoors2+0x34>
		initSprites();
20003b90:	f7ff ffbc 	bl	20003b0c <initSprites>
		firstTime = 0;			
20003b94:	4b11      	ldr	r3, [pc, #68]	; (20003bdc <init_indoors2+0x5c>)
20003b96:	2200      	movs	r2, #0
20003b98:	601a      	str	r2, [r3, #0]

		indoors2Images[0] = indoors2Image;
20003b9a:	4b11      	ldr	r3, [pc, #68]	; (20003be0 <init_indoors2+0x60>)
20003b9c:	4a11      	ldr	r2, [pc, #68]	; (20003be4 <init_indoors2+0x64>)
20003b9e:	ca13      	ldmia	r2!, {r0, r1, r4}
20003ba0:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&indoors2Images[0], indoors2Black, indoors2Gray, indoors2Light);
20003ba2:	4b11      	ldr	r3, [pc, #68]	; (20003be8 <init_indoors2+0x68>)
20003ba4:	6819      	ldr	r1, [r3, #0]
20003ba6:	4b11      	ldr	r3, [pc, #68]	; (20003bec <init_indoors2+0x6c>)
20003ba8:	681a      	ldr	r2, [r3, #0]
20003baa:	4b11      	ldr	r3, [pc, #68]	; (20003bf0 <init_indoors2+0x70>)
20003bac:	681b      	ldr	r3, [r3, #0]
20003bae:	480c      	ldr	r0, [pc, #48]	; (20003be0 <init_indoors2+0x60>)
20003bb0:	f7ff fc00 	bl	200033b4 <load_image>
	}
	
	indoors2Obj->images = indoors2Images;
20003bb4:	687b      	ldr	r3, [r7, #4]
20003bb6:	4a0a      	ldr	r2, [pc, #40]	; (20003be0 <init_indoors2+0x60>)
20003bb8:	601a      	str	r2, [r3, #0]

	indoors2Obj->current_frame = 0;
20003bba:	687b      	ldr	r3, [r7, #4]
20003bbc:	2200      	movs	r2, #0
20003bbe:	615a      	str	r2, [r3, #20]
	indoors2Obj->n_frames = 1;
20003bc0:	687b      	ldr	r3, [r7, #4]
20003bc2:	2201      	movs	r2, #1
20003bc4:	619a      	str	r2, [r3, #24]
	indoors2Obj->animation_speed = 1;
20003bc6:	687b      	ldr	r3, [r7, #4]
20003bc8:	2201      	movs	r2, #1
20003bca:	61da      	str	r2, [r3, #28]
	indoors2Obj->animation_counter = 0;
20003bcc:	687b      	ldr	r3, [r7, #4]
20003bce:	2200      	movs	r2, #0
20003bd0:	621a      	str	r2, [r3, #32]
}
20003bd2:	46c0      	nop			; (mov r8, r8)
20003bd4:	46bd      	mov	sp, r7
20003bd6:	b003      	add	sp, #12
20003bd8:	bd90      	pop	{r4, r7, pc}
20003bda:	46c0      	nop			; (mov r8, r8)
20003bdc:	2000a44c 	andcs	sl, r0, ip, asr #8
20003be0:	20006450 	andcs	r6, r0, r0, asr r4
20003be4:	2000645c 	andcs	r6, r0, ip, asr r4
20003be8:	20006490 	mulcs	r0, r0, r4
20003bec:	2000644c 	andcs	r6, r0, ip, asr #8
20003bf0:	20006474 	andcs	r6, r0, r4, ror r4

20003bf4 <initSprites>:


GameObject trophyObj;
Image trophyImage;
Image trophyImages[1];
static void initSprites( void ) {	
20003bf4:	b580      	push	{r7, lr}
20003bf6:	b084      	sub	sp, #16
20003bf8:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempTrophyLight;
20003bfa:	4b12      	ldr	r3, [pc, #72]	; (20003c44 <initSprites+0x50>)
20003bfc:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer11, trophy_light_bits, trophy_black_width, trophy_black_height);
20003bfe:	4912      	ldr	r1, [pc, #72]	; (20003c48 <initSprites+0x54>)
20003c00:	68f8      	ldr	r0, [r7, #12]
20003c02:	2311      	movs	r3, #17
20003c04:	220b      	movs	r2, #11
20003c06:	f7ff fbe9 	bl	200033dc <load_sprite>
	trophyLight = pointer11;
20003c0a:	4b10      	ldr	r3, [pc, #64]	; (20003c4c <initSprites+0x58>)
20003c0c:	68fa      	ldr	r2, [r7, #12]
20003c0e:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempTrophyGray;
20003c10:	4b0f      	ldr	r3, [pc, #60]	; (20003c50 <initSprites+0x5c>)
20003c12:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer12, trophy_gray_bits, trophy_black_width, trophy_black_height);
20003c14:	490f      	ldr	r1, [pc, #60]	; (20003c54 <initSprites+0x60>)
20003c16:	68b8      	ldr	r0, [r7, #8]
20003c18:	2311      	movs	r3, #17
20003c1a:	220b      	movs	r2, #11
20003c1c:	f7ff fbde 	bl	200033dc <load_sprite>
	trophyGray = pointer12;
20003c20:	4b0d      	ldr	r3, [pc, #52]	; (20003c58 <initSprites+0x64>)
20003c22:	68ba      	ldr	r2, [r7, #8]
20003c24:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempTrophyBlack;
20003c26:	4b0d      	ldr	r3, [pc, #52]	; (20003c5c <initSprites+0x68>)
20003c28:	607b      	str	r3, [r7, #4]
	load_sprite(pointer13, trophy_black_bits, trophy_black_width, trophy_black_height);
20003c2a:	490d      	ldr	r1, [pc, #52]	; (20003c60 <initSprites+0x6c>)
20003c2c:	6878      	ldr	r0, [r7, #4]
20003c2e:	2311      	movs	r3, #17
20003c30:	220b      	movs	r2, #11
20003c32:	f7ff fbd3 	bl	200033dc <load_sprite>
	trophyBlack = pointer13;	
20003c36:	4b0b      	ldr	r3, [pc, #44]	; (20003c64 <initSprites+0x70>)
20003c38:	687a      	ldr	r2, [r7, #4]
20003c3a:	601a      	str	r2, [r3, #0]
	
}
20003c3c:	46c0      	nop			; (mov r8, r8)
20003c3e:	46bd      	mov	sp, r7
20003c40:	b004      	add	sp, #16
20003c42:	bd80      	pop	{r7, pc}
20003c44:	200064b0 			; <UNDEFINED> instruction: 0x200064b0
20003c48:	2000a498 	mulcs	r0, r8, r4
20003c4c:	200064fc 	strdcs	r6, [r0], -ip
20003c50:	200064f0 	strdcs	r6, [r0], -r0
20003c54:	2000a474 	andcs	sl, r0, r4, ror r4
20003c58:	200064e0 	andcs	r6, r0, r0, ror #9
20003c5c:	200064e4 	andcs	r6, r0, r4, ror #9
20003c60:	2000a450 	andcs	sl, r0, r0, asr r4
20003c64:	200064a0 	andcs	r6, r0, r0, lsr #9

20003c68 <init_trophy>:
	
void init_trophy( GameObject *trophyObj ) {
20003c68:	b590      	push	{r4, r7, lr}
20003c6a:	b083      	sub	sp, #12
20003c6c:	af00      	add	r7, sp, #0
20003c6e:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20003c70:	4b14      	ldr	r3, [pc, #80]	; (20003cc4 <init_trophy+0x5c>)
20003c72:	681b      	ldr	r3, [r3, #0]
20003c74:	2b00      	cmp	r3, #0
20003c76:	d011      	beq.n	20003c9c <init_trophy+0x34>
		initSprites();
20003c78:	f7ff ffbc 	bl	20003bf4 <initSprites>
		firstTime = 0;			
20003c7c:	4b11      	ldr	r3, [pc, #68]	; (20003cc4 <init_trophy+0x5c>)
20003c7e:	2200      	movs	r2, #0
20003c80:	601a      	str	r2, [r3, #0]

		trophyImages[0] = trophyImage;
20003c82:	4b11      	ldr	r3, [pc, #68]	; (20003cc8 <init_trophy+0x60>)
20003c84:	4a11      	ldr	r2, [pc, #68]	; (20003ccc <init_trophy+0x64>)
20003c86:	ca13      	ldmia	r2!, {r0, r1, r4}
20003c88:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&trophyImages[0], trophyBlack, trophyGray, trophyLight);
20003c8a:	4b11      	ldr	r3, [pc, #68]	; (20003cd0 <init_trophy+0x68>)
20003c8c:	6819      	ldr	r1, [r3, #0]
20003c8e:	4b11      	ldr	r3, [pc, #68]	; (20003cd4 <init_trophy+0x6c>)
20003c90:	681a      	ldr	r2, [r3, #0]
20003c92:	4b11      	ldr	r3, [pc, #68]	; (20003cd8 <init_trophy+0x70>)
20003c94:	681b      	ldr	r3, [r3, #0]
20003c96:	480c      	ldr	r0, [pc, #48]	; (20003cc8 <init_trophy+0x60>)
20003c98:	f7ff fb8c 	bl	200033b4 <load_image>
	}
	
	trophyObj->images = trophyImages;
20003c9c:	687b      	ldr	r3, [r7, #4]
20003c9e:	4a0a      	ldr	r2, [pc, #40]	; (20003cc8 <init_trophy+0x60>)
20003ca0:	601a      	str	r2, [r3, #0]

	trophyObj->current_frame = 0;
20003ca2:	687b      	ldr	r3, [r7, #4]
20003ca4:	2200      	movs	r2, #0
20003ca6:	615a      	str	r2, [r3, #20]
	trophyObj->n_frames = 1;
20003ca8:	687b      	ldr	r3, [r7, #4]
20003caa:	2201      	movs	r2, #1
20003cac:	619a      	str	r2, [r3, #24]
	trophyObj->animation_speed = 1;
20003cae:	687b      	ldr	r3, [r7, #4]
20003cb0:	2201      	movs	r2, #1
20003cb2:	61da      	str	r2, [r3, #28]
	trophyObj->animation_counter = 0;
20003cb4:	687b      	ldr	r3, [r7, #4]
20003cb6:	2200      	movs	r2, #0
20003cb8:	621a      	str	r2, [r3, #32]
}
20003cba:	46c0      	nop			; (mov r8, r8)
20003cbc:	46bd      	mov	sp, r7
20003cbe:	b003      	add	sp, #12
20003cc0:	bd90      	pop	{r4, r7, pc}
20003cc2:	46c0      	nop			; (mov r8, r8)
20003cc4:	2000a4bc 			; <UNDEFINED> instruction: 0x2000a4bc
20003cc8:	20006494 	mulcs	r0, r4, r4
20003ccc:	200064a4 	andcs	r6, r0, r4, lsr #9
20003cd0:	200064a0 	andcs	r6, r0, r0, lsr #9
20003cd4:	200064e0 	andcs	r6, r0, r0, ror #9
20003cd8:	200064fc 	strdcs	r6, [r0], -ip

20003cdc <__divsi3>:
20003cdc:	4603      	mov	r3, r0
20003cde:	430b      	orrs	r3, r1
20003ce0:	d47f      	bmi.n	20003de2 <__divsi3+0x106>
20003ce2:	2200      	movs	r2, #0
20003ce4:	0843      	lsrs	r3, r0, #1
20003ce6:	428b      	cmp	r3, r1
20003ce8:	d374      	bcc.n	20003dd4 <__divsi3+0xf8>
20003cea:	0903      	lsrs	r3, r0, #4
20003cec:	428b      	cmp	r3, r1
20003cee:	d35f      	bcc.n	20003db0 <__divsi3+0xd4>
20003cf0:	0a03      	lsrs	r3, r0, #8
20003cf2:	428b      	cmp	r3, r1
20003cf4:	d344      	bcc.n	20003d80 <__divsi3+0xa4>
20003cf6:	0b03      	lsrs	r3, r0, #12
20003cf8:	428b      	cmp	r3, r1
20003cfa:	d328      	bcc.n	20003d4e <__divsi3+0x72>
20003cfc:	0c03      	lsrs	r3, r0, #16
20003cfe:	428b      	cmp	r3, r1
20003d00:	d30d      	bcc.n	20003d1e <__divsi3+0x42>
20003d02:	22ff      	movs	r2, #255	; 0xff
20003d04:	0209      	lsls	r1, r1, #8
20003d06:	ba12      	rev	r2, r2
20003d08:	0c03      	lsrs	r3, r0, #16
20003d0a:	428b      	cmp	r3, r1
20003d0c:	d302      	bcc.n	20003d14 <__divsi3+0x38>
20003d0e:	1212      	asrs	r2, r2, #8
20003d10:	0209      	lsls	r1, r1, #8
20003d12:	d065      	beq.n	20003de0 <__divsi3+0x104>
20003d14:	0b03      	lsrs	r3, r0, #12
20003d16:	428b      	cmp	r3, r1
20003d18:	d319      	bcc.n	20003d4e <__divsi3+0x72>
20003d1a:	e000      	b.n	20003d1e <__divsi3+0x42>
20003d1c:	0a09      	lsrs	r1, r1, #8
20003d1e:	0bc3      	lsrs	r3, r0, #15
20003d20:	428b      	cmp	r3, r1
20003d22:	d301      	bcc.n	20003d28 <__divsi3+0x4c>
20003d24:	03cb      	lsls	r3, r1, #15
20003d26:	1ac0      	subs	r0, r0, r3
20003d28:	4152      	adcs	r2, r2
20003d2a:	0b83      	lsrs	r3, r0, #14
20003d2c:	428b      	cmp	r3, r1
20003d2e:	d301      	bcc.n	20003d34 <__divsi3+0x58>
20003d30:	038b      	lsls	r3, r1, #14
20003d32:	1ac0      	subs	r0, r0, r3
20003d34:	4152      	adcs	r2, r2
20003d36:	0b43      	lsrs	r3, r0, #13
20003d38:	428b      	cmp	r3, r1
20003d3a:	d301      	bcc.n	20003d40 <__divsi3+0x64>
20003d3c:	034b      	lsls	r3, r1, #13
20003d3e:	1ac0      	subs	r0, r0, r3
20003d40:	4152      	adcs	r2, r2
20003d42:	0b03      	lsrs	r3, r0, #12
20003d44:	428b      	cmp	r3, r1
20003d46:	d301      	bcc.n	20003d4c <__divsi3+0x70>
20003d48:	030b      	lsls	r3, r1, #12
20003d4a:	1ac0      	subs	r0, r0, r3
20003d4c:	4152      	adcs	r2, r2
20003d4e:	0ac3      	lsrs	r3, r0, #11
20003d50:	428b      	cmp	r3, r1
20003d52:	d301      	bcc.n	20003d58 <__divsi3+0x7c>
20003d54:	02cb      	lsls	r3, r1, #11
20003d56:	1ac0      	subs	r0, r0, r3
20003d58:	4152      	adcs	r2, r2
20003d5a:	0a83      	lsrs	r3, r0, #10
20003d5c:	428b      	cmp	r3, r1
20003d5e:	d301      	bcc.n	20003d64 <__divsi3+0x88>
20003d60:	028b      	lsls	r3, r1, #10
20003d62:	1ac0      	subs	r0, r0, r3
20003d64:	4152      	adcs	r2, r2
20003d66:	0a43      	lsrs	r3, r0, #9
20003d68:	428b      	cmp	r3, r1
20003d6a:	d301      	bcc.n	20003d70 <__divsi3+0x94>
20003d6c:	024b      	lsls	r3, r1, #9
20003d6e:	1ac0      	subs	r0, r0, r3
20003d70:	4152      	adcs	r2, r2
20003d72:	0a03      	lsrs	r3, r0, #8
20003d74:	428b      	cmp	r3, r1
20003d76:	d301      	bcc.n	20003d7c <__divsi3+0xa0>
20003d78:	020b      	lsls	r3, r1, #8
20003d7a:	1ac0      	subs	r0, r0, r3
20003d7c:	4152      	adcs	r2, r2
20003d7e:	d2cd      	bcs.n	20003d1c <__divsi3+0x40>
20003d80:	09c3      	lsrs	r3, r0, #7
20003d82:	428b      	cmp	r3, r1
20003d84:	d301      	bcc.n	20003d8a <__divsi3+0xae>
20003d86:	01cb      	lsls	r3, r1, #7
20003d88:	1ac0      	subs	r0, r0, r3
20003d8a:	4152      	adcs	r2, r2
20003d8c:	0983      	lsrs	r3, r0, #6
20003d8e:	428b      	cmp	r3, r1
20003d90:	d301      	bcc.n	20003d96 <__divsi3+0xba>
20003d92:	018b      	lsls	r3, r1, #6
20003d94:	1ac0      	subs	r0, r0, r3
20003d96:	4152      	adcs	r2, r2
20003d98:	0943      	lsrs	r3, r0, #5
20003d9a:	428b      	cmp	r3, r1
20003d9c:	d301      	bcc.n	20003da2 <__divsi3+0xc6>
20003d9e:	014b      	lsls	r3, r1, #5
20003da0:	1ac0      	subs	r0, r0, r3
20003da2:	4152      	adcs	r2, r2
20003da4:	0903      	lsrs	r3, r0, #4
20003da6:	428b      	cmp	r3, r1
20003da8:	d301      	bcc.n	20003dae <__divsi3+0xd2>
20003daa:	010b      	lsls	r3, r1, #4
20003dac:	1ac0      	subs	r0, r0, r3
20003dae:	4152      	adcs	r2, r2
20003db0:	08c3      	lsrs	r3, r0, #3
20003db2:	428b      	cmp	r3, r1
20003db4:	d301      	bcc.n	20003dba <__divsi3+0xde>
20003db6:	00cb      	lsls	r3, r1, #3
20003db8:	1ac0      	subs	r0, r0, r3
20003dba:	4152      	adcs	r2, r2
20003dbc:	0883      	lsrs	r3, r0, #2
20003dbe:	428b      	cmp	r3, r1
20003dc0:	d301      	bcc.n	20003dc6 <__divsi3+0xea>
20003dc2:	008b      	lsls	r3, r1, #2
20003dc4:	1ac0      	subs	r0, r0, r3
20003dc6:	4152      	adcs	r2, r2
20003dc8:	0843      	lsrs	r3, r0, #1
20003dca:	428b      	cmp	r3, r1
20003dcc:	d301      	bcc.n	20003dd2 <__divsi3+0xf6>
20003dce:	004b      	lsls	r3, r1, #1
20003dd0:	1ac0      	subs	r0, r0, r3
20003dd2:	4152      	adcs	r2, r2
20003dd4:	1a41      	subs	r1, r0, r1
20003dd6:	d200      	bcs.n	20003dda <__divsi3+0xfe>
20003dd8:	4601      	mov	r1, r0
20003dda:	4152      	adcs	r2, r2
20003ddc:	4610      	mov	r0, r2
20003dde:	4770      	bx	lr
20003de0:	e05d      	b.n	20003e9e <__divsi3+0x1c2>
20003de2:	0fca      	lsrs	r2, r1, #31
20003de4:	d000      	beq.n	20003de8 <__divsi3+0x10c>
20003de6:	4249      	negs	r1, r1
20003de8:	1003      	asrs	r3, r0, #32
20003dea:	d300      	bcc.n	20003dee <__divsi3+0x112>
20003dec:	4240      	negs	r0, r0
20003dee:	4053      	eors	r3, r2
20003df0:	2200      	movs	r2, #0
20003df2:	469c      	mov	ip, r3
20003df4:	0903      	lsrs	r3, r0, #4
20003df6:	428b      	cmp	r3, r1
20003df8:	d32d      	bcc.n	20003e56 <__divsi3+0x17a>
20003dfa:	0a03      	lsrs	r3, r0, #8
20003dfc:	428b      	cmp	r3, r1
20003dfe:	d312      	bcc.n	20003e26 <__divsi3+0x14a>
20003e00:	22fc      	movs	r2, #252	; 0xfc
20003e02:	0189      	lsls	r1, r1, #6
20003e04:	ba12      	rev	r2, r2
20003e06:	0a03      	lsrs	r3, r0, #8
20003e08:	428b      	cmp	r3, r1
20003e0a:	d30c      	bcc.n	20003e26 <__divsi3+0x14a>
20003e0c:	0189      	lsls	r1, r1, #6
20003e0e:	1192      	asrs	r2, r2, #6
20003e10:	428b      	cmp	r3, r1
20003e12:	d308      	bcc.n	20003e26 <__divsi3+0x14a>
20003e14:	0189      	lsls	r1, r1, #6
20003e16:	1192      	asrs	r2, r2, #6
20003e18:	428b      	cmp	r3, r1
20003e1a:	d304      	bcc.n	20003e26 <__divsi3+0x14a>
20003e1c:	0189      	lsls	r1, r1, #6
20003e1e:	d03a      	beq.n	20003e96 <__divsi3+0x1ba>
20003e20:	1192      	asrs	r2, r2, #6
20003e22:	e000      	b.n	20003e26 <__divsi3+0x14a>
20003e24:	0989      	lsrs	r1, r1, #6
20003e26:	09c3      	lsrs	r3, r0, #7
20003e28:	428b      	cmp	r3, r1
20003e2a:	d301      	bcc.n	20003e30 <__divsi3+0x154>
20003e2c:	01cb      	lsls	r3, r1, #7
20003e2e:	1ac0      	subs	r0, r0, r3
20003e30:	4152      	adcs	r2, r2
20003e32:	0983      	lsrs	r3, r0, #6
20003e34:	428b      	cmp	r3, r1
20003e36:	d301      	bcc.n	20003e3c <__divsi3+0x160>
20003e38:	018b      	lsls	r3, r1, #6
20003e3a:	1ac0      	subs	r0, r0, r3
20003e3c:	4152      	adcs	r2, r2
20003e3e:	0943      	lsrs	r3, r0, #5
20003e40:	428b      	cmp	r3, r1
20003e42:	d301      	bcc.n	20003e48 <__divsi3+0x16c>
20003e44:	014b      	lsls	r3, r1, #5
20003e46:	1ac0      	subs	r0, r0, r3
20003e48:	4152      	adcs	r2, r2
20003e4a:	0903      	lsrs	r3, r0, #4
20003e4c:	428b      	cmp	r3, r1
20003e4e:	d301      	bcc.n	20003e54 <__divsi3+0x178>
20003e50:	010b      	lsls	r3, r1, #4
20003e52:	1ac0      	subs	r0, r0, r3
20003e54:	4152      	adcs	r2, r2
20003e56:	08c3      	lsrs	r3, r0, #3
20003e58:	428b      	cmp	r3, r1
20003e5a:	d301      	bcc.n	20003e60 <__divsi3+0x184>
20003e5c:	00cb      	lsls	r3, r1, #3
20003e5e:	1ac0      	subs	r0, r0, r3
20003e60:	4152      	adcs	r2, r2
20003e62:	0883      	lsrs	r3, r0, #2
20003e64:	428b      	cmp	r3, r1
20003e66:	d301      	bcc.n	20003e6c <__divsi3+0x190>
20003e68:	008b      	lsls	r3, r1, #2
20003e6a:	1ac0      	subs	r0, r0, r3
20003e6c:	4152      	adcs	r2, r2
20003e6e:	d2d9      	bcs.n	20003e24 <__divsi3+0x148>
20003e70:	0843      	lsrs	r3, r0, #1
20003e72:	428b      	cmp	r3, r1
20003e74:	d301      	bcc.n	20003e7a <__divsi3+0x19e>
20003e76:	004b      	lsls	r3, r1, #1
20003e78:	1ac0      	subs	r0, r0, r3
20003e7a:	4152      	adcs	r2, r2
20003e7c:	1a41      	subs	r1, r0, r1
20003e7e:	d200      	bcs.n	20003e82 <__divsi3+0x1a6>
20003e80:	4601      	mov	r1, r0
20003e82:	4663      	mov	r3, ip
20003e84:	4152      	adcs	r2, r2
20003e86:	105b      	asrs	r3, r3, #1
20003e88:	4610      	mov	r0, r2
20003e8a:	d301      	bcc.n	20003e90 <__divsi3+0x1b4>
20003e8c:	4240      	negs	r0, r0
20003e8e:	2b00      	cmp	r3, #0
20003e90:	d500      	bpl.n	20003e94 <__divsi3+0x1b8>
20003e92:	4249      	negs	r1, r1
20003e94:	4770      	bx	lr
20003e96:	4663      	mov	r3, ip
20003e98:	105b      	asrs	r3, r3, #1
20003e9a:	d300      	bcc.n	20003e9e <__divsi3+0x1c2>
20003e9c:	4240      	negs	r0, r0
20003e9e:	b501      	push	{r0, lr}
20003ea0:	2000      	movs	r0, #0
20003ea2:	f000 f805 	bl	20003eb0 <__aeabi_idiv0>
20003ea6:	bd02      	pop	{r1, pc}

20003ea8 <__aeabi_idivmod>:
20003ea8:	2900      	cmp	r1, #0
20003eaa:	d0f8      	beq.n	20003e9e <__divsi3+0x1c2>
20003eac:	e716      	b.n	20003cdc <__divsi3>
20003eae:	4770      	bx	lr

20003eb0 <__aeabi_idiv0>:
20003eb0:	4770      	bx	lr
20003eb2:	46c0      	nop			; (mov r8, r8)

20003eb4 <counter>:
20003eb4:	00000000 	andeq	r0, r0, r0

20003eb8 <i.4305>:
20003eb8:	00000000 	andeq	r0, r0, r0

20003ebc <j.4311>:
20003ebc:	00000000 	andeq	r0, r0, r0

20003ec0 <distance_player_fire.4310>:
20003ec0:	00000000 	andeq	r0, r0, r0

20003ec4 <distance_hair_trophy.4316>:
20003ec4:	00000000 	andeq	r0, r0, r0

20003ec8 <trophy_burned.4315>:
20003ec8:	00000000 	andeq	r0, r0, r0

20003ecc <distance_hair_DIP.4318>:
20003ecc:	00000000 	andeq	r0, r0, r0

20003ed0 <DIP_burned.4317>:
20003ed0:	00000000 	andeq	r0, r0, r0

20003ed4 <test.4320>:
20003ed4:	00000000 	andeq	r0, r0, r0

20003ed8 <nGameObjects>:
20003ed8:	00000000 	andeq	r0, r0, r0

20003edc <lastJumpValue.4092>:
20003edc:	00000000 	andeq	r0, r0, r0

20003ee0 <ySpeed.4096>:
20003ee0:	00000000 	andeq	r0, r0, r0

20003ee4 <lastRightValue.4093>:
20003ee4:	00000000 	andeq	r0, r0, r0

20003ee8 <xSpeed.4095>:
20003ee8:	00000000 	andeq	r0, r0, r0

20003eec <lastLeftValue.4094>:
20003eec:	00000000 	andeq	r0, r0, r0

20003ef0 <playerPositionX>:
20003ef0:	00000000 	andeq	r0, r0, r0

20003ef4 <playerPositionY>:
20003ef4:	00000000 	andeq	r0, r0, r0

20003ef8 <counter.4152>:
20003ef8:	00000000 	andeq	r0, r0, r0

20003efc <monster>:
20003efc:	00000000 	andeq	r0, r0, r0

20003f00 <tempCastleBlack>:
	...

20003f0c <tempPressGray>:
	...

20003f18 <tempTitleGray>:
	...

20003f24 <castleBlack>:
20003f24:	00000000 	andeq	r0, r0, r0

20003f28 <tempMonster>:
	...

20003f34 <pressLight>:
20003f34:	00000000 	andeq	r0, r0, r0

20003f38 <tempTitleBlack>:
	...

20003f44 <bg>:
20003f44:	00000000 	andeq	r0, r0, r0

20003f48 <tempMonsterGray>:
	...

20003f54 <tempTitleLight>:
	...

20003f60 <castleLight>:
20003f60:	00000000 	andeq	r0, r0, r0

20003f64 <tempPressLight>:
	...

20003f70 <tempCastleLight>:
	...

20003f7c <pressGray>:
20003f7c:	00000000 	andeq	r0, r0, r0

20003f80 <tempMonsterLight>:
	...

20003f8c <tempPressBlack>:
	...

20003f98 <titleGray>:
20003f98:	00000000 	andeq	r0, r0, r0

20003f9c <tempCastleGray>:
	...

20003fa8 <monsterLight>:
20003fa8:	00000000 	andeq	r0, r0, r0

20003fac <titleLight>:
20003fac:	00000000 	andeq	r0, r0, r0

20003fb0 <castleGray>:
20003fb0:	00000000 	andeq	r0, r0, r0

20003fb4 <random_seed>:
20003fb4:	00000000 	andeq	r0, r0, r0

20003fb8 <pressBlack>:
20003fb8:	00000000 	andeq	r0, r0, r0

20003fbc <monsterGray>:
20003fbc:	00000000 	andeq	r0, r0, r0

20003fc0 <tempBg>:
	...

20003fcc <titleBlack>:
20003fcc:	00000000 	andeq	r0, r0, r0

20003fd0 <gameObjects>:
	...

20004160 <fire1Light>:
20004160:	00000000 	andeq	r0, r0, r0

20004164 <tempFire3Light>:
	...

20004170 <fire3Gray>:
20004170:	00000000 	andeq	r0, r0, r0

20004174 <tempFire4Gray>:
	...

20004180 <fire2Image>:
	...

2000418c <tempFire2Gray>:
	...

20004198 <tempFireBlack>:
	...

200041a4 <fire3Image>:
	...

200041b0 <tempFire4Light>:
	...

200041bc <fire1Image>:
	...

200041c8 <fire4Light>:
200041c8:	00000000 	andeq	r0, r0, r0

200041cc <fireObj>:
	...

200041f0 <fire5Image>:
	...

200041fc <fireImages>:
	...

20004238 <tempFire5Gray>:
	...

20004244 <tempFire3Gray>:
	...

20004250 <fire4Image>:
	...

2000425c <fire4Gray>:
2000425c:	00000000 	andeq	r0, r0, r0

20004260 <tempFire1Light>:
	...

2000426c <tempFire5Light>:
	...

20004278 <fire5Gray>:
20004278:	00000000 	andeq	r0, r0, r0

2000427c <fire2Light>:
2000427c:	00000000 	andeq	r0, r0, r0

20004280 <fire5Light>:
20004280:	00000000 	andeq	r0, r0, r0

20004284 <tempFire1Gray>:
	...

20004290 <fireBlack>:
20004290:	00000000 	andeq	r0, r0, r0

20004294 <tempFire2Light>:
	...

200042a0 <fire3Light>:
200042a0:	00000000 	andeq	r0, r0, r0

200042a4 <fire2Gray>:
200042a4:	00000000 	andeq	r0, r0, r0

200042a8 <fire1Gray>:
200042a8:	00000000 	andeq	r0, r0, r0

200042ac <bird4Light>:
200042ac:	00000000 	andeq	r0, r0, r0

200042b0 <bird1Gray>:
200042b0:	00000000 	andeq	r0, r0, r0

200042b4 <bird6Image>:
	...

200042c0 <bird5Black>:
200042c0:	00000000 	andeq	r0, r0, r0

200042c4 <tempBird4Black>:
	...

200042d0 <bird2Image>:
	...

200042dc <birdObj>:
	...

20004300 <bird1Image>:
	...

2000430c <bird3Black>:
2000430c:	00000000 	andeq	r0, r0, r0

20004310 <bird4Gray>:
20004310:	00000000 	andeq	r0, r0, r0

20004314 <bird2Black>:
20004314:	00000000 	andeq	r0, r0, r0

20004318 <bird1Black>:
20004318:	00000000 	andeq	r0, r0, r0

2000431c <bird4Image>:
	...

20004328 <tempBirdBlack>:
	...

20004334 <bird3Gray>:
20004334:	00000000 	andeq	r0, r0, r0

20004338 <tempBirdGray>:
	...

20004344 <bird5Gray>:
20004344:	00000000 	andeq	r0, r0, r0

20004348 <tempBird5Light>:
	...

20004354 <tempBird2Gray>:
	...

20004360 <bird3Light>:
20004360:	00000000 	andeq	r0, r0, r0

20004364 <tempBird5Gray>:
	...

20004370 <tempBird5Black>:
	...

2000437c <bird5Image>:
	...

20004388 <bird5Light>:
20004388:	00000000 	andeq	r0, r0, r0

2000438c <tempBird3Black>:
	...

20004398 <bird2Gray>:
20004398:	00000000 	andeq	r0, r0, r0

2000439c <tempBirdLight>:
	...

200043a8 <bird1Light>:
200043a8:	00000000 	andeq	r0, r0, r0

200043ac <tempBird2Light>:
	...

200043b8 <bird3Image>:
	...

200043c4 <tempBird4Light>:
	...

200043d0 <tempBird3Light>:
	...

200043dc <tempBird3Gray>:
	...

200043e8 <birdImages>:
	...

20004430 <bird4Black>:
20004430:	00000000 	andeq	r0, r0, r0

20004434 <tempBird2Black>:
	...

20004440 <tempBird4Gray>:
	...

2000444c <bird2Light>:
2000444c:	00000000 	andeq	r0, r0, r0

20004450 <witch1Gray>:
20004450:	00000000 	andeq	r0, r0, r0

20004454 <witch2Light>:
20004454:	00000000 	andeq	r0, r0, r0

20004458 <witchImages>:
	...

20004488 <witch2Image>:
	...

20004494 <tempWitch2Black>:
	...

200044a0 <tempWitchBlack>:
	...

200044ac <tempWitch3Light>:
	...

200044b8 <witch4Image>:
	...

200044c4 <witch2Gray>:
200044c4:	00000000 	andeq	r0, r0, r0

200044c8 <tempWitchGray>:
	...

200044d4 <tempWitch3Black>:
	...

200044e0 <tempWitch2Gray>:
	...

200044ec <witch3Black>:
200044ec:	00000000 	andeq	r0, r0, r0

200044f0 <witchObj>:
	...

20004514 <witch3Light>:
20004514:	00000000 	andeq	r0, r0, r0

20004518 <tempWitch3Gray>:
	...

20004524 <witch1Black>:
20004524:	00000000 	andeq	r0, r0, r0

20004528 <witch3Gray>:
20004528:	00000000 	andeq	r0, r0, r0

2000452c <witch1Image>:
	...

20004538 <tempWitchLight>:
	...

20004544 <tempWitch2Light>:
	...

20004550 <witch1Light>:
20004550:	00000000 	andeq	r0, r0, r0

20004554 <witch3Image>:
	...

20004560 <witch2Black>:
20004560:	00000000 	andeq	r0, r0, r0

20004564 <DIPObj>:
	...

20004588 <DIP2Image>:
	...

20004594 <DIP2Gray>:
20004594:	00000000 	andeq	r0, r0, r0

20004598 <tempDIP2Gray>:
	...

200045a4 <DIP3Black>:
200045a4:	00000000 	andeq	r0, r0, r0

200045a8 <DIP1Black>:
200045a8:	00000000 	andeq	r0, r0, r0

200045ac <tempDIPLight>:
	...

200045b8 <tempDIP3Light>:
	...

200045c4 <DIPImages>:
	...

200045f4 <tempDIP2Black>:
	...

20004600 <DIP3Image>:
	...

2000460c <DIP1Image>:
	...

20004618 <DIP1Light>:
20004618:	00000000 	andeq	r0, r0, r0

2000461c <DIP2Light>:
2000461c:	00000000 	andeq	r0, r0, r0

20004620 <DIP3Light>:
20004620:	00000000 	andeq	r0, r0, r0

20004624 <DIP2Black>:
20004624:	00000000 	andeq	r0, r0, r0

20004628 <tempDIP3Gray>:
	...

20004634 <tempDIPBlack>:
	...

20004640 <DIP1Gray>:
20004640:	00000000 	andeq	r0, r0, r0

20004644 <tempDIP3Black>:
	...

20004650 <DIP3Gray>:
20004650:	00000000 	andeq	r0, r0, r0

20004654 <DIP4Image>:
	...

20004660 <tempDIP2Light>:
	...

2000466c <tempDIPGray>:
	...

20004678 <tempFlameGray>:
	...

20004684 <tempFlame4Light>:
	...

20004690 <flame2Image>:
	...

2000469c <flame3Light>:
2000469c:	00000000 	andeq	r0, r0, r0

200046a0 <tempFlame3Light>:
	...

200046ac <flame3Image>:
	...

200046b8 <flame3Gray>:
200046b8:	00000000 	andeq	r0, r0, r0

200046bc <flameObj>:
	...

200046e0 <tempFlame2Light>:
	...

200046ec <tempFlame3Gray>:
	...

200046f8 <tempFlame2Black>:
	...

20004704 <flame2Gray>:
20004704:	00000000 	andeq	r0, r0, r0

20004708 <flame1Gray>:
20004708:	00000000 	andeq	r0, r0, r0

2000470c <flame1Light>:
2000470c:	00000000 	andeq	r0, r0, r0

20004710 <tempFlame4Black>:
	...

2000471c <tempFlame4Gray>:
	...

20004728 <flame4Gray>:
20004728:	00000000 	andeq	r0, r0, r0

2000472c <flame4Image>:
	...

20004738 <flame1Image>:
	...

20004744 <tempFlame2Gray>:
	...

20004750 <flameImages>:
	...

20004780 <tempFlame3Black>:
	...

2000478c <flame4Black>:
2000478c:	00000000 	andeq	r0, r0, r0

20004790 <flame1Black>:
20004790:	00000000 	andeq	r0, r0, r0

20004794 <tempFlameLight>:
	...

200047a0 <flame2Light>:
200047a0:	00000000 	andeq	r0, r0, r0

200047a4 <flame3Black>:
200047a4:	00000000 	andeq	r0, r0, r0

200047a8 <tempFlameBlack>:
	...

200047b4 <flame4Light>:
200047b4:	00000000 	andeq	r0, r0, r0

200047b8 <flame2Black>:
200047b8:	00000000 	andeq	r0, r0, r0

200047bc <backBufferGray>:
	...

20004bbc <draw_buffer_black_gray>:
	...

20004fbc <backBuffer>:
	...

200053bc <draw_buffer_black_light>:
	...

200057bc <draw_buffer_black>:
	...

20005bbc <draw_buffer_black_gray_light>:
	...

20005fbc <backBufferLight>:
	...

200063bc <tempIndoorsGray>:
	...

200063c8 <tempIndoorsLight>:
	...

200063d4 <tempIndoorsBlack>:
	...

200063e0 <indoorsGray>:
200063e0:	00000000 	andeq	r0, r0, r0

200063e4 <indoorsObj>:
	...

20006408 <indoorsImages>:
	...

20006414 <indoorsBlack>:
20006414:	00000000 	andeq	r0, r0, r0

20006418 <indoorsImage>:
	...

20006424 <indoorsLight>:
20006424:	00000000 	andeq	r0, r0, r0

20006428 <indoors2Obj>:
	...

2000644c <indoors2Gray>:
2000644c:	00000000 	andeq	r0, r0, r0

20006450 <indoors2Images>:
	...

2000645c <indoors2Image>:
	...

20006468 <tempIndoors2Gray>:
	...

20006474 <indoors2Light>:
20006474:	00000000 	andeq	r0, r0, r0

20006478 <tempIndoors2Black>:
	...

20006484 <tempIndoors2Light>:
	...

20006490 <indoors2Black>:
20006490:	00000000 	andeq	r0, r0, r0

20006494 <trophyImages>:
	...

200064a0 <trophyBlack>:
200064a0:	00000000 	andeq	r0, r0, r0

200064a4 <trophyImage>:
	...

200064b0 <tempTrophyLight>:
	...

200064bc <trophyObj>:
	...

200064e0 <trophyGray>:
200064e0:	00000000 	andeq	r0, r0, r0

200064e4 <tempTrophyBlack>:
	...

200064f0 <tempTrophyGray>:
	...

200064fc <trophyLight>:
200064fc:	00000000 	andeq	r0, r0, r0

20006500 <monster_black_bits>:
	...
20006510:	0001c000 	andeq	ip, r1, r0
20006514:	00023000 	andeq	r3, r2, r0
20006518:	00021000 	andeq	r1, r2, r0
2000651c:	00060800 	andeq	r0, r6, r0, lsl #16
20006520:	00040800 	andeq	r0, r4, r0, lsl #16
20006524:	00040800 	andeq	r0, r4, r0, lsl #16
20006528:	00092800 	andeq	r2, r9, r0, lsl #16
2000652c:	00092800 	andeq	r2, r9, r0, lsl #16
20006530:	00100400 	andseq	r0, r0, r0, lsl #8
20006534:	00100400 	andseq	r0, r0, r0, lsl #8
20006538:	00200200 	eoreq	r0, r0, r0, lsl #4
2000653c:	00661b00 	rsbeq	r1, r6, r0, lsl #22
20006540:	0043b100 	subeq	fp, r3, r0, lsl #2
20006544:	0080e080 	addeq	lr, r0, r0, lsl #1
20006548:	01800080 	orreq	r0, r0, r0, lsl #1
2000654c:	01000040 	tsteq	r0, r0, asr #32
20006550:	02000040 	andeq	r0, r0, #64	; 0x40
20006554:	02000060 	andeq	r0, r0, #96	; 0x60
20006558:	02000020 	andeq	r0, r0, #32
2000655c:	03ff03e0 	mvnseq	r0, #224, 6	; 0x80000003
20006560:	0001fc00 	andeq	pc, r1, r0, lsl #24
	...

20006578 <monster_light_bits>:
	...
2000658c:	00010000 	andeq	r0, r1, r0
20006590:	00018000 	andeq	r8, r1, r0
20006594:	0001f000 	andeq	pc, r1, r0
20006598:	0001f000 	andeq	pc, r1, r0
2000659c:	00009000 	andeq	r9, r0, r0
200065a0:	00009000 	andeq	r9, r0, r0
200065a4:	0000d000 	andeq	sp, r0, r0
200065a8:	0001f800 	andeq	pc, r1, r0, lsl #16
200065ac:	0003f800 	andeq	pc, r3, r0, lsl #16
200065b0:	0003fc00 	andeq	pc, r3, r0, lsl #24
200065b4:	0001e400 	andeq	lr, r1, r0, lsl #8
200065b8:	00044c00 	andeq	r4, r4, r0, lsl #24
200065bc:	00060c00 	andeq	r0, r6, r0, lsl #24
200065c0:	0006ee00 	andeq	lr, r6, r0, lsl #28
200065c4:	000ffe00 	andeq	pc, pc, r0, lsl #28
200065c8:	000f3f00 	andeq	r3, pc, r0, lsl #30
200065cc:	00000780 	andeq	r0, r0, r0, lsl #15
200065d0:	000003c0 	andeq	r0, r0, r0, asr #7
	...

200065f0 <monster_gray_bits>:
	...
20006610:	00020000 	andeq	r0, r2, r0
20006614:	00000000 	andeq	r0, r0, r0
20006618:	00040000 	andeq	r0, r4, r0
2000661c:	00060000 	andeq	r0, r6, r0
20006620:	000e0000 	andeq	r0, lr, r0
20006624:	000c0000 	andeq	r0, ip, r0
20006628:	001c0000 	andseq	r0, ip, r0
2000662c:	00180000 	andseq	r0, r8, r0
20006630:	00380000 	eorseq	r0, r8, r0
20006634:	00780000 	rsbseq	r0, r8, r0
20006638:	00780000 	rsbseq	r0, r8, r0
2000663c:	00f00000 	rscseq	r0, r0, r0
20006640:	01f0c000 	mvnseq	ip, r0
20006644:	01fff800 	mvnseq	pc, r0, lsl #16
20006648:	01fffc00 	mvnseq	pc, r0, lsl #24
2000664c:	0000fc00 	andeq	pc, r0, r0, lsl #24
	...

20006668 <press_black_bits>:
	...
200066a0:	001c0000 	andseq	r0, ip, r0
200066a4:	00000000 	andeq	r0, r0, r0
200066a8:	00240000 	eoreq	r0, r4, r0
200066ac:	00000000 	andeq	r0, r0, r0
200066b0:	00440000 	subeq	r0, r4, r0
200066b4:	00000000 	andeq	r0, r0, r0
200066b8:	c5240000 	strgt	r0, [r4, #-0]!
200066bc:	00000198 	muleq	r0, r8, r1
200066c0:	2b1c0000 	blcs	207066c8 <firstTime.4040+0x6fc20c>
200066c4:	00000045 	andeq	r0, r0, r5, asr #32
200066c8:	e1040000 	mrs	r0, (UNDEF: 4)
200066cc:	000000cd 	andeq	r0, r0, sp, asr #1
200066d0:	21040000 	mrscs	r0, (UNDEF: 4)
200066d4:	00000110 	andeq	r0, r0, r0, lsl r1
200066d8:	c1040000 	mrsgt	r0, (UNDEF: 4)
200066dc:	000000cc 	andeq	r0, r0, ip, asr #1
	...
2000670c:	00000004 	andeq	r0, r0, r4
20006710:	00000000 	andeq	r0, r0, r0
20006714:	00000004 	andeq	r0, r0, r4
20006718:	00000000 	andeq	r0, r0, r0
2000671c:	00000004 	andeq	r0, r0, r4
20006720:	0494e000 	ldreq	lr, [r4], #0
20006724:	00009334 	andeq	r9, r0, r4, lsr r3
20006728:	04ac9000 	strteq	r9, [ip], #0
2000672c:	00009494 	muleq	r0, r4, r4
20006730:	04a49000 	strteq	r9, [r4], #0
20006734:	0000978c 	andeq	r9, r0, ip, lsl #15
20006738:	04a49000 	strteq	r9, [r4], #0
2000673c:	00009094 	muleq	r0, r4, r0
20006740:	07256000 	streq	r6, [r5, -r0]!
20006744:	0000e324 	andeq	lr, r0, r4, lsr #6
20006748:	04000000 	streq	r0, [r0], #-0
2000674c:	00008000 	andeq	r8, r0, r0
20006750:	04000000 	streq	r0, [r0], #-0
20006754:	00008000 	andeq	r8, r0, r0
20006758:	03000000 	movweq	r0, #0
2000675c:	00006000 	andeq	r6, r0, r0
	...

20006780 <press_light_bits>:
	...
200067c0:	00000200 	andeq	r0, r0, r0, lsl #4
200067c4:	00000000 	andeq	r0, r0, r0
200067c8:	00000700 	andeq	r0, r0, r0, lsl #14
200067cc:	00000000 	andeq	r0, r0, r0
200067d0:	00000200 	andeq	r0, r0, r0, lsl #4
	...
20006814:	00800000 	addeq	r0, r0, r0
20006818:	00000000 	andeq	r0, r0, r0
2000681c:	01c00000 	biceq	r0, r0, r0
20006820:	00000000 	andeq	r0, r0, r0
20006824:	00800000 	addeq	r0, r0, r0
20006828:	00000010 	andeq	r0, r0, r0, lsl r0
2000682c:	00000000 	andeq	r0, r0, r0
20006830:	00000038 	andeq	r0, r0, r8, lsr r0
20006834:	00000000 	andeq	r0, r0, r0
20006838:	00000010 	andeq	r0, r0, r0, lsl r0
	...

20006898 <press_gray_bits>:
	...
200068d8:	00180000 	andseq	r0, r8, r0
200068dc:	00000000 	andeq	r0, r0, r0
200068e0:	00380000 	eorseq	r0, r8, r0
200068e4:	00000000 	andeq	r0, r0, r0
200068e8:	00580000 	subseq	r0, r8, r0
200068ec:	00000020 	andeq	r0, r0, r0, lsr #32
200068f0:	d4200000 	strtle	r0, [r0], #-0
200068f4:	0000039a 	muleq	r0, sl, r3
200068f8:	0a380000 	beq	20e06900 <firstTime.4040+0xdfc444>
200068fc:	00000102 	andeq	r0, r0, r2, lsl #2
20006900:	c2080000 	andgt	r0, r8, #0
20006904:	00000223 	andeq	r0, r0, r3, lsr #4
20006908:	02080000 	andeq	r0, r8, #0
2000690c:	00000311 	andeq	r0, r0, r1, lsl r3
20006910:	c1080000 	mrsgt	r0, (UNDEF: 8)
20006914:	000001dd 	ldrdeq	r0, [r0], -sp
	...
20006944:	00000008 	andeq	r0, r0, r8
20006948:	00000000 	andeq	r0, r0, r0
2000694c:	00000008 	andeq	r0, r0, r8
20006950:	00000000 	andeq	r0, r0, r0
20006954:	00000008 	andeq	r0, r0, r8
20006958:	09116000 	ldmdbeq	r1, {sp, lr}
2000695c:	00012328 	andeq	r2, r1, r8, lsr #6
20006960:	09596000 	ldmdbeq	r9, {sp, lr}^
20006964:	00012810 	andeq	r2, r1, r0, lsl r8
20006968:	0b492000 	bleq	2124e970 <firstTime.4040+0x12444b4>
2000696c:	00012f08 	andeq	r2, r1, r8, lsl #30
20006970:	08488000 	stmdaeq	r8, {pc}^
20006974:	00010458 	andeq	r0, r1, r8, asr r4
20006978:	0b6be000 	bleq	21afe980 <firstTime.4040+0x1af44c4>
2000697c:	00016768 	andeq	r6, r1, r8, ror #14
20006980:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
20006984:	00010000 	andeq	r0, r1, r0
20006988:	0c000000 	stceq	0, cr0, [r0], {-0}
2000698c:	00018000 	andeq	r8, r1, r0
20006990:	06000000 	streq	r0, [r0], -r0
20006994:	0000c000 	andeq	ip, r0, r0
	...

200069b0 <castle_black_bits>:
200069b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200069b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200069b8:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200069bc:	00000000 	andeq	r0, r0, r0
200069c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200069c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200069c8:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200069cc:	00000000 	andeq	r0, r0, r0
200069d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200069d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200069d8:	00000001 	andeq	r0, r0, r1
200069dc:	00000000 	andeq	r0, r0, r0
200069e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200069e4:	7fffffff 	svcvc	0x00ffffff
	...
200069f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200069f4:	3fffffff 	svccc	0x00ffffff
	...
20006a00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006a04:	1fffffff 	svcne	0x00ffffff
	...
20006a10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006a14:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
	...
20006a20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006a24:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
	...
20006a30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006a34:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20006b3b <castle_black_bits+0x18b>	; <UNPREDICTABLE>
	...
20006a40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006a44:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
	...
20006a50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006a54:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
	...
20006a60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006a64:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20006a70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006a74:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20006a80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006a84:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20006a90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006a94:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
20006aa0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006aa4:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
20006ab0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006ab4:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20006ac0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006ac4:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20006ad0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006ad4:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
20006ae0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006ae4:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20006af0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006af4:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20006b00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006b04:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20006b10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006b14:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
20006b18:	04900000 	ldreq	r0, [r0], #0
20006b1c:	00000000 	andeq	r0, r0, r0
20006b20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006b24:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
20006b28:	0b680000 	bleq	21a06b30 <firstTime.4040+0x19fc674>
20006b2c:	00000000 	andeq	r0, r0, r0
20006b30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006b34:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20006b38:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
20006b3c:	00000000 	andeq	r0, r0, r0
20006b40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006b44:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20006b48:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
20006b4c:	00000092 	muleq	r0, r2, r0
20006b50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006b54:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20006b58:	04100000 	ldreq	r0, [r0], #-0
20006b5c:	0000016d 	andeq	r0, r0, sp, ror #2
20006b60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006b64:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20006b68:	04101240 	ldreq	r1, [r0], #-576	; 0xfffffdc0
20006b6c:	00000101 	andeq	r0, r0, r1, lsl #2
20006b70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006b74:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20006b78:	04102da0 	ldreq	r2, [r0], #-3488	; 0xfffff260
20006b7c:	00000101 	andeq	r0, r0, r1, lsl #2
20006b80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006b84:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20006b88:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
20006b8c:	00000101 	andeq	r0, r0, r1, lsl #2
20006b90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006b94:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20006b98:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
20006b9c:	00000101 	andeq	r0, r0, r1, lsl #2
20006ba0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006ba4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20006ba8:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20006bac:	00000082 	andeq	r0, r0, r2, lsl #1
20006bb0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006bb4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20006bb8:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20006bbc:	00000092 	muleq	r0, r2, r0
20006bc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006bc4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20006bc8:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20006bcc:	012400a2 	smulwbeq	r4, r2, r0
20006bd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006bd4:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20006bd8:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20006bdc:	02da00a2 	sbcseq	r0, sl, #162	; 0xa2
20006be0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006be4:	00004fff 	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
20006be8:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20006bec:	020200a2 	andeq	r0, r2, #162	; 0xa2
20006bf0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006bf4:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006bf8:	08081040 	stmdaeq	r8, {r6, ip}
20006bfc:	0202009a 	andeq	r0, r2, #154	; 0x9a
20006c00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006c04:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006c08:	08082020 	stmdaeq	r8, {r5, sp}
20006c0c:	01040082 	smlabbeq	r4, r2, r0, r0
20006c10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006c14:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006c18:	48082020 	stmdami	r8, {r5, sp}
20006c1c:	01040102 	tsteq	r4, r2, lsl #2
20006c20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006c24:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006c28:	b0082020 	andlt	r2, r8, r0, lsr #32
20006c2c:	01040101 	tsteq	r4, r1, lsl #2
20006c30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006c34:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006c38:	00082220 	andeq	r2, r8, r0, lsr #4
20006c3c:	01040100 	mrseq	r0, (UNDEF: 20)
20006c40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006c44:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006c48:	00882420 	addeq	r2, r8, r0, lsr #8
20006c4c:	01040100 	mrseq	r0, (UNDEF: 20)
20006c50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006c54:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006c58:	01082420 	tsteq	r8, r0, lsr #8
20006c5c:	01045a00 	tsteq	r4, r0, lsl #20
20006c60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006c64:	0000007f 	andeq	r0, r0, pc, ror r0
20006c68:	01082420 	tsteq	r8, r0, lsr #8
20006c6c:	0104a400 	tsteq	r4, r0, lsl #8
20006c70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006c74:	00000001 	andeq	r0, r0, r1
20006c78:	010b2320 	tsteq	fp, r0, lsr #6
20006c7c:	01030001 	tsteq	r3, r1
20006c80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006c84:	00000000 	andeq	r0, r0, r0
20006c88:	00c4c020 	sbceq	ip, r4, r0, lsr #32
20006c8c:	02000002 	andeq	r0, r0, #2
20006c90:	3fffffff 	svccc	0x00ffffff
20006c94:	00000000 	andeq	r0, r0, r0
20006c98:	00000020 	andeq	r0, r0, r0, lsr #32
20006c9c:	02200002 	eoreq	r0, r0, #2
20006ca0:	3fffffff 	svccc	0x00ffffff
20006ca4:	00000000 	andeq	r0, r0, r0
20006ca8:	00000020 	andeq	r0, r0, r0, lsr #32
20006cac:	02400002 	subeq	r0, r0, #2
20006cb0:	1fffffff 	svcne	0x00ffffff
20006cb4:	00000000 	andeq	r0, r0, r0
20006cb8:	80000020 	andhi	r0, r0, r0, lsr #32
20006cbc:	02400001 	subeq	r0, r0, #1
20006cc0:	1fffffff 	svcne	0x00ffffff
20006cc4:	00000000 	andeq	r0, r0, r0
20006cc8:	00000010 	andeq	r0, r0, r0, lsl r0
20006ccc:	02400000 	subeq	r0, r0, #0
20006cd0:	0fffffff 	svceq	0x00ffffff
20006cd4:	00000000 	andeq	r0, r0, r0
20006cd8:	00000010 	andeq	r0, r0, r0, lsl r0
20006cdc:	02300000 	eorseq	r0, r0, #0
20006ce0:	0fffffff 	svceq	0x00ffffff
20006ce4:	00000000 	andeq	r0, r0, r0
20006ce8:	00000010 	andeq	r0, r0, r0, lsl r0
20006cec:	02000000 	andeq	r0, r0, #0
20006cf0:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
20006cf4:	00000000 	andeq	r0, r0, r0
20006cf8:	00000010 	andeq	r0, r0, r0, lsl r0
20006cfc:	04000000 	streq	r0, [r0], #-0
20006d00:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
20006d04:	00000000 	andeq	r0, r0, r0
20006d08:	00000010 	andeq	r0, r0, r0, lsl r0
20006d0c:	04000000 	streq	r0, [r0], #-0
20006d10:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20006e17 <castle_gray_bits+0x67>	; <UNPREDICTABLE>
20006d14:	00000000 	andeq	r0, r0, r0
20006d18:	00000008 	andeq	r0, r0, r8
20006d1c:	04000000 	streq	r0, [r0], #-0
20006d20:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20006e27 <castle_gray_bits+0x77>	; <UNPREDICTABLE>
20006d24:	00000000 	andeq	r0, r0, r0
20006d28:	00000008 	andeq	r0, r0, r8
20006d2c:	04000000 	streq	r0, [r0], #-0
20006d30:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20006d34:	00000000 	andeq	r0, r0, r0
20006d38:	00000008 	andeq	r0, r0, r8
20006d3c:	060001c0 	streq	r0, [r0], -r0, asr #3
20006d40:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20006d44:	00000000 	andeq	r0, r0, r0
20006d48:	00000008 	andeq	r0, r0, r8
20006d4c:	04000220 	streq	r0, [r0], #-544	; 0xfffffde0
20006d50:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
20006d54:	00000000 	andeq	r0, r0, r0
20006d58:	00000008 	andeq	r0, r0, r8
20006d5c:	04100400 	ldreq	r0, [r0], #-1024	; 0xfffffc00
20006d60:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
20006d64:	00000000 	andeq	r0, r0, r0
20006d68:	00000008 	andeq	r0, r0, r8
20006d6c:	04a00400 	strteq	r0, [r0], #1024	; 0x400
20006d70:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
20006d74:	00000000 	andeq	r0, r0, r0
20006d78:	00000008 	andeq	r0, r0, r8
20006d7c:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
20006d80:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
20006d84:	00000000 	andeq	r0, r0, r0
20006d88:	00000008 	andeq	r0, r0, r8
20006d8c:	07400400 	strbeq	r0, [r0, -r0, lsl #8]
20006d90:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20006d94:	00000000 	andeq	r0, r0, r0
20006d98:	00000008 	andeq	r0, r0, r8
20006d9c:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
20006da0:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20006da4:	00000000 	andeq	r0, r0, r0
20006da8:	00000008 	andeq	r0, r0, r8
20006dac:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00

20006db0 <castle_gray_bits>:
	...
20006db8:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20006dbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
20006dc8:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20006dcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
20006dd8:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20006ddc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006de0:	00000000 	andeq	r0, r0, r0
20006de4:	80000000 	andhi	r0, r0, r0
20006de8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006dec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006df0:	00000000 	andeq	r0, r0, r0
20006df4:	c0000000 	andgt	r0, r0, r0
20006df8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006dfc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006e00:	00000000 	andeq	r0, r0, r0
20006e04:	e0000000 	and	r0, r0, r0
20006e08:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006e0c:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
20006e10:	00000000 	andeq	r0, r0, r0
20006e14:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20006e18:	f3ffcfff 			; <UNDEFINED> instruction: 0xf3ffcfff
20006e1c:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
20006e20:	00000000 	andeq	r0, r0, r0
20006e24:	fc000000 	stc2	0, cr0, [r0], {-0}
20006e28:	f1ff8fff 			; <UNDEFINED> instruction: 0xf1ff8fff
20006e2c:	fff9ff3f 			; <UNDEFINED> instruction: 0xfff9ff3f
20006e30:	00000000 	andeq	r0, r0, r0
20006e34:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20006e38:	f0ff8fef 			; <UNDEFINED> instruction: 0xf0ff8fef
20006e3c:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
20006e40:	00000000 	andeq	r0, r0, r0
20006e44:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20006e48:	e0ff87ef 	rscs	r8, pc, pc, ror #15
20006e4c:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
20006e50:	00000000 	andeq	r0, r0, r0
20006e54:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20006e58:	c07e07e7 	rsbsgt	r0, lr, r7, ror #15
20006e5c:	ffe0fc1f 			; <UNDEFINED> instruction: 0xffe0fc1f
20006e60:	00000000 	andeq	r0, r0, r0
20006e64:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20006e68:	001c07e7 	andseq	r0, ip, r7, ror #15
20006e6c:	ffe0380e 	vcmla.f32	d19, d0, d14[0], #170
20006e70:	00000000 	andeq	r0, r0, r0
20006e74:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20006e78:	000003e3 	andeq	r0, r0, r3, ror #7
20006e7c:	f7c00000 			; <UNDEFINED> instruction: 0xf7c00000
20006e80:	00000000 	andeq	r0, r0, r0
20006e84:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20006e88:	000001c3 	andeq	r0, r0, r3, asr #3
20006e8c:	e7800000 	str	r0, [r0, r0]
20006e90:	00000000 	andeq	r0, r0, r0
20006e94:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20006e98:	00000003 	andeq	r0, r0, r3
20006e9c:	c3800000 	orrgt	r0, r0, #0
20006ea0:	00000000 	andeq	r0, r0, r0
20006ea4:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20006ea8:	00000001 	andeq	r0, r0, r1
20006eac:	c0000000 	andgt	r0, r0, r0
20006eb0:	00000000 	andeq	r0, r0, r0
20006eb4:	9ff00000 	svcls	0x00f00000	; IMB
20006eb8:	00000001 	andeq	r0, r0, r1
20006ebc:	80000000 	andhi	r0, r0, r0
20006ec0:	00000000 	andeq	r0, r0, r0
20006ec4:	8ff00000 	svchi	0x00f00000	; IMB
20006ec8:	00000000 	andeq	r0, r0, r0
20006ecc:	80000000 	andhi	r0, r0, r0
20006ed0:	00000000 	andeq	r0, r0, r0
20006ed4:	8ff80000 	svchi	0x00f80000
	...
20006ee4:	0ffc0000 	svceq	0x00fc0000
	...
20006ef4:	0ffc0000 	svceq	0x00fc0000
	...
20006f04:	0ffc0000 	svceq	0x00fc0000
	...
20006f14:	0ffc0000 	svceq	0x00fc0000
	...
20006f24:	0ffc0000 	svceq	0x00fc0000
	...
20006f34:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
20006f44:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
20006f54:	07fe0000 	ldrbeq	r0, [lr, r0]!
20006f58:	03800000 	orreq	r0, r0, #0
	...
20006f64:	03fe0000 	mvnseq	r0, #0
20006f68:	02000000 	andeq	r0, r0, #0
	...
20006f74:	03ff0000 	mvnseq	r0, #0
20006f78:	02000000 	andeq	r0, r0, #0
	...
20006f84:	03ff0000 	mvnseq	r0, #0
20006f88:	02000000 	andeq	r0, r0, #0
	...
20006f94:	03ff0000 	mvnseq	r0, #0
20006f98:	02000000 	andeq	r0, r0, #0
	...
20006fa4:	03ff0000 	mvnseq	r0, #0
20006fa8:	02800c00 	addeq	r0, r0, #0, 24
20006fac:	00000060 	andeq	r0, r0, r0, rrx
20006fb0:	00000000 	andeq	r0, r0, r0
20006fb4:	03ff0000 	mvnseq	r0, #0
20006fb8:	03000800 	movweq	r0, #2048	; 0x800
20006fbc:	00000040 	andeq	r0, r0, r0, asr #32
20006fc0:	00000000 	andeq	r0, r0, r0
20006fc4:	03ff0000 	mvnseq	r0, #0
20006fc8:	03000800 	movweq	r0, #2048	; 0x800
20006fcc:	00000040 	andeq	r0, r0, r0, asr #32
20006fd0:	00000000 	andeq	r0, r0, r0
20006fd4:	03ff8000 	mvnseq	r8, #0
20006fd8:	03000a00 	movweq	r0, #2560	; 0xa00
20006fdc:	00000040 	andeq	r0, r0, r0, asr #32
20006fe0:	00000000 	andeq	r0, r0, r0
20006fe4:	01ffb000 	mvnseq	fp, r0
20006fe8:	03000c00 	movweq	r0, #3072	; 0xc00
20006fec:	00000040 	andeq	r0, r0, r0, asr #32
20006ff0:	00000000 	andeq	r0, r0, r0
20006ff4:	01fff800 	mvnseq	pc, r0, lsl #16
20006ff8:	07800c00 	streq	r0, [r0, r0, lsl #24]
20006ffc:	00000060 	andeq	r0, r0, r0, rrx
20007000:	00000000 	andeq	r0, r0, r0
20007004:	01fffc00 	mvnseq	pc, r0, lsl #24
20007008:	04001800 	streq	r1, [r0], #-2048	; 0xfffff800
2000700c:	00c00058 	sbceq	r0, r0, r8, asr r0
20007010:	00000000 	andeq	r0, r0, r0
20007014:	00fffc00 	rscseq	pc, pc, r0, lsl #24
20007018:	06001400 	streq	r1, [r0], -r0, lsl #8
2000701c:	00c000c0 	sbceq	r0, r0, r0, asr #1
20007020:	00000000 	andeq	r0, r0, r0
20007024:	007ffc00 	rsbseq	pc, pc, r0, lsl #24
20007028:	45001000 	strmi	r1, [r0, #-0]
2000702c:	008000a0 	addeq	r0, r0, r0, lsr #1
20007030:	00000000 	andeq	r0, r0, r0
20007034:	007ffe00 	rsbseq	pc, pc, r0, lsl #28
20007038:	80001000 	andhi	r1, r0, r0
2000703c:	008000c1 	addeq	r0, r0, r1, asr #1
20007040:	00000000 	andeq	r0, r0, r0
20007044:	003ffe00 	eorseq	pc, pc, r0, lsl #28
20007048:	00001000 	andeq	r1, r0, r0
2000704c:	00a000f0 	strdeq	r0, [r0], r0	; <UNPREDICTABLE>
20007050:	00000000 	andeq	r0, r0, r0
20007054:	003fff00 	eorseq	pc, pc, r0, lsl #30
20007058:	00001000 	andeq	r1, r0, r0
2000705c:	00c000e0 	sbceq	r0, r0, r0, ror #1
20007060:	00000000 	andeq	r0, r0, r0
20007064:	001fff80 	andseq	pc, pc, r0, lsl #31
20007068:	02001800 	andeq	r1, r0, #0, 16
2000706c:	00c000c0 	sbceq	r0, r0, r0, asr #1
20007070:	00000000 	andeq	r0, r0, r0
20007074:	0019fffe 			; <UNDEFINED> instruction: 0x0019fffe
20007078:	02001400 	andeq	r1, r0, #0, 8
2000707c:	00803000 	addeq	r3, r0, r0
20007080:	00000000 	andeq	r0, r0, r0
20007084:	0018ffff 			; <UNDEFINED> instruction: 0x0018ffff
20007088:	05033f00 	streq	r3, [r3, #-3840]	; 0xfffff100
2000708c:	01000000 	mrseq	r0, (UNDEF: 0)
20007090:	c0000000 	andgt	r0, r0, r0
20007094:	0008ffff 	strdeq	pc, [r8], -pc	; <UNPREDICTABLE>
20007098:	00c0e400 	sbceq	lr, r0, r0, lsl #8
2000709c:	01000004 	tsteq	r0, r4
200070a0:	c0000000 	andgt	r0, r0, r0
200070a4:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
200070a8:	00002000 	andeq	r2, r0, r0
200070ac:	01000008 	tsteq	r0, r8
200070b0:	e0000000 	and	r0, r0, r0
200070b4:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
200070b8:	00001000 	andeq	r1, r0, r0
200070bc:	01000006 	tsteq	r0, r6
200070c0:	e0000000 	and	r0, r0, r0
200070c4:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
200070c8:	80000000 	andhi	r0, r0, r0
200070cc:	01800001 	orreq	r0, r0, r1
200070d0:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
200070d4:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
200070d8:	00400000 	subeq	r0, r0, r0
200070dc:	01400000 	mrseq	r0, (UNDEF: 64)
200070e0:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
200070e4:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
200070e8:	03800000 	orreq	r0, r0, #0
200070ec:	01300000 	teqeq	r0, r0
200070f0:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200070f4:	00001bff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
200070f8:	10e00000 	rscne	r0, r0, r0
200070fc:	03000000 	movweq	r0, #0
20007100:	fc000000 	stc2	0, cr0, [r0], {-0}
20007104:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20007108:	0f800000 	svceq	0x00800000
2000710c:	03900000 	orrseq	r0, r0, #0
20007110:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20007114:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20007118:	00000000 	andeq	r0, r0, r0
2000711c:	03e00000 	mvneq	r0, #0
20007120:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20007124:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20007128:	00000000 	andeq	r0, r0, r0
2000712c:	03f40000 	mvnseq	r0, #0
20007130:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20007134:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20007138:	00002000 	andeq	r2, r0, r0
2000713c:	01f80000 	mvnseq	r0, r0
20007140:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20007144:	0000007f 	andeq	r0, r0, pc, ror r0
20007148:	0010c000 	andseq	ip, r0, r0
2000714c:	03f80000 	mvnseq	r0, #0
20007150:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20007154:	0000003f 	andeq	r0, r0, pc, lsr r0
20007158:	000f0000 	andeq	r0, pc, r0
2000715c:	03e000e0 	mvneq	r0, #224	; 0xe0
20007160:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20007164:	0000001f 	andeq	r0, r0, pc, lsl r0
20007168:	00026000 	andeq	r6, r2, r0
2000716c:	035001f0 	cmpeq	r0, #240, 2	; 0x3c
20007170:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20007174:	0000001f 	andeq	r0, r0, pc, lsl r0
20007178:	00118000 	andseq	r8, r1, r0
2000717c:	03ec01f0 	mvneq	r0, #240, 2	; 0x3c
20007180:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
20007184:	0000000f 	andeq	r0, r0, pc
20007188:	200e0000 	andcs	r0, lr, r0
2000718c:	00a022f0 	strdeq	r2, [r0], r0	; <UNPREDICTABLE>
20007190:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
20007194:	00000007 	andeq	r0, r0, r7
20007198:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
2000719c:	03c0c170 	biceq	ip, r0, #112, 2
200071a0:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
200071a4:	00000003 	andeq	r0, r0, r3
200071a8:	e4000000 	str	r0, [r0], #-0
200071ac:	03c270f3 	biceq	r7, r2, #243	; 0xf3

200071b0 <castle_light_bits>:
	...
2000720c:	00000040 	andeq	r0, r0, r0, asr #32
	...
20007218:	0c003000 	stceq	0, cr3, [r0], {-0}
2000721c:	00000040 	andeq	r0, r0, r0, asr #32
	...
20007228:	0e007000 	cdpeq	0, 0, cr7, cr0, cr0, {0}
2000722c:	000600c0 	andeq	r0, r6, r0, asr #1
	...
20007238:	0f007010 	svceq	0x00007010
2000723c:	000601e0 	andeq	r0, r6, r0, ror #3
	...
20007248:	1f007810 	svcne	0x00007810
2000724c:	000601e0 	andeq	r0, r6, r0, ror #3
	...
20007258:	3f81f818 	svccc	0x0081f818
2000725c:	001f03e0 	andseq	r0, pc, r0, ror #7
	...
20007268:	ffe3f818 			; <UNDEFINED> instruction: 0xffe3f818
2000726c:	001fc7f1 			; <UNDEFINED> instruction: 0x001fc7f1
	...
20007278:	fffffc1c 			; <UNDEFINED> instruction: 0xfffffc1c
2000727c:	083fffff 	ldmdaeq	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
	...
20007288:	fffffe3c 			; <UNDEFINED> instruction: 0xfffffe3c
2000728c:	187fffff 	ldmdane	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
	...
20007298:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
2000729c:	3c7fffff 	ldclcc	15, cr15, [pc], #-1020	; 20006ea8 <castle_gray_bits+0xf8>
	...
200072a8:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
200072ac:	3fffffff 	svccc	0x00ffffff
200072b0:	00000000 	andeq	r0, r0, r0
200072b4:	60000000 	andvs	r0, r0, r0
200072b8:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
200072bc:	7fffffff 	svcvc	0x00ffffff
200072c0:	00000000 	andeq	r0, r0, r0
200072c4:	70000000 	andvc	r0, r0, r0
200072c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200072cc:	7fffffff 	svcvc	0x00ffffff
200072d0:	00000000 	andeq	r0, r0, r0
200072d4:	70000000 	andvc	r0, r0, r0
200072d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200072dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200072e0:	00000000 	andeq	r0, r0, r0
200072e4:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
200072e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200072ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200072f0:	00000000 	andeq	r0, r0, r0
200072f4:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
200072f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200072fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007300:	00000000 	andeq	r0, r0, r0
20007304:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20007308:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000730c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007310:	00000000 	andeq	r0, r0, r0
20007314:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20007318:	fb6fffff 	blx	21c0731e <firstTime.4040+0x1bfce62>
2000731c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007320:	00000000 	andeq	r0, r0, r0
20007324:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20007328:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
2000732c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007330:	00000000 	andeq	r0, r0, r0
20007334:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20007338:	f407ffff 			; <UNDEFINED> instruction: 0xf407ffff
2000733c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007340:	00000000 	andeq	r0, r0, r0
20007344:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20007348:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
2000734c:	ffffff6d 			; <UNDEFINED> instruction: 0xffffff6d
20007350:	00000000 	andeq	r0, r0, r0
20007354:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20007358:	f80fffff 			; <UNDEFINED> instruction: 0xf80fffff
2000735c:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20007360:	00000000 	andeq	r0, r0, r0
20007364:	fc000000 	stc2	0, cr0, [r0], {-0}
20007368:	f80fedbf 			; <UNDEFINED> instruction: 0xf80fedbf
2000736c:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20007370:	00000000 	andeq	r0, r0, r0
20007374:	fc000000 	stc2	0, cr0, [r0], {-0}
20007378:	f80fc01f 			; <UNDEFINED> instruction: 0xf80fc01f
2000737c:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
20007380:	00000000 	andeq	r0, r0, r0
20007384:	fc000000 	stc2	0, cr0, [r0], {-0}
20007388:	f90fc81f 			; <UNDEFINED> instruction: 0xf90fc81f
2000738c:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
20007390:	00000000 	andeq	r0, r0, r0
20007394:	fc000000 	stc2	0, cr0, [r0], {-0}
20007398:	f90fd41f 			; <UNDEFINED> instruction: 0xf90fd41f
2000739c:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200073a0:	00000000 	andeq	r0, r0, r0
200073a4:	fc000000 	stc2	0, cr0, [r0], {-0}
200073a8:	f90fe03f 			; <UNDEFINED> instruction: 0xf90fe03f
200073ac:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
200073b0:	00000000 	andeq	r0, r0, r0
200073b4:	fc000000 	stc2	0, cr0, [r0], {-0}
200073b8:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
200073bc:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
200073c0:	00000000 	andeq	r0, r0, r0
200073c4:	fc000000 	stc2	0, cr0, [r0], {-0}
200073c8:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
200073cc:	fedbff19 	mrc2	15, 6, pc, cr11, cr9, {0}
200073d0:	00000000 	andeq	r0, r0, r0
200073d4:	fc000000 	stc2	0, cr0, [r0], {-0}
200073d8:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
200073dc:	fd01ff11 	stc2	15, cr15, [r1, #-68]	; 0xffffffbc
200073e0:	00000000 	andeq	r0, r0, r0
200073e4:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
200073e8:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
200073ec:	fd01ff19 	stc2	15, cr15, [r1, #-100]	; 0xffffff9c
200073f0:	00000000 	andeq	r0, r0, r0
200073f4:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
200073f8:	f007e03f 			; <UNDEFINED> instruction: 0xf007e03f
200073fc:	fc01ff01 	stc2	15, cr15, [r1], {1}
20007400:	00000000 	andeq	r0, r0, r0
20007404:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20007408:	f007c01f 			; <UNDEFINED> instruction: 0xf007c01f
2000740c:	fe03ff01 	cdp2	15, 0, cr15, cr3, cr1, {0}
20007410:	00000000 	andeq	r0, r0, r0
20007414:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20007418:	b007c01f 	andlt	ip, r7, pc, lsl r0
2000741c:	fe03fe01 	cdp2	14, 0, cr15, cr3, cr1, {0}
20007420:	00000000 	andeq	r0, r0, r0
20007424:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20007428:	0007c01f 	andeq	ip, r7, pc, lsl r0
2000742c:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
20007430:	00000000 	andeq	r0, r0, r0
20007434:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20007438:	0007c01f 	andeq	ip, r7, pc, lsl r0
2000743c:	fe03fe10 	mcr2	14, 0, pc, cr3, cr0, {0}	; <UNPREDICTABLE>
20007440:	00000000 	andeq	r0, r0, r0
20007444:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20007448:	0007c21f 	andeq	ip, r7, pc, lsl r2
2000744c:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
20007450:	00000000 	andeq	r0, r0, r0
20007454:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20007458:	0087c31f 	addeq	ip, r7, pc, lsl r3
2000745c:	fe03a400 	cdp2	4, 0, cr10, cr3, cr0, {0}
20007460:	00000000 	andeq	r0, r0, r0
20007464:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20007468:	00c7c31f 	sbceq	ip, r7, pc, lsl r3
2000746c:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
20007470:	00000000 	andeq	r0, r0, r0
20007474:	ffe60000 			; <UNDEFINED> instruction: 0xffe60000
20007478:	00c4c01f 	sbceq	ip, r4, pc, lsl r0
2000747c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20007480:	00000000 	andeq	r0, r0, r0
20007484:	ffe70000 			; <UNDEFINED> instruction: 0xffe70000
20007488:	8000001f 	andhi	r0, r0, pc, lsl r0
2000748c:	fc000001 	stc2	0, cr0, [r0], {1}
20007490:	00000000 	andeq	r0, r0, r0
20007494:	fff70000 			; <UNDEFINED> instruction: 0xfff70000
20007498:	8000001f 	andhi	r0, r0, pc, lsl r0
2000749c:	fc000009 	stc2	0, cr0, [r0], {9}
200074a0:	00000000 	andeq	r0, r0, r0
200074a4:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200074a8:	8000001f 	andhi	r0, r0, pc, lsl r0
200074ac:	fc200001 	stc2	0, cr0, [r0], #-4
200074b0:	00000000 	andeq	r0, r0, r0
200074b4:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200074b8:	0000001f 	andeq	r0, r0, pc, lsl r0
200074bc:	fc300000 	ldc2	0, cr0, [r0], #-0
200074c0:	00000000 	andeq	r0, r0, r0
200074c4:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
200074c8:	0000000f 	andeq	r0, r0, pc
200074cc:	fc300000 	ldc2	0, cr0, [r0], #-0
200074d0:	00000000 	andeq	r0, r0, r0
200074d4:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
200074d8:	0000000f 	andeq	r0, r0, pc
200074dc:	fc000000 	stc2	0, cr0, [r0], {-0}
200074e0:	00000000 	andeq	r0, r0, r0
200074e4:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
200074e8:	1000000f 	andne	r0, r0, pc
200074ec:	fc000000 	stc2	0, cr0, [r0], {-0}
200074f0:	00000000 	andeq	r0, r0, r0
200074f4:	ffffe400 			; <UNDEFINED> instruction: 0xffffe400
200074f8:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
200074fc:	f8080000 			; <UNDEFINED> instruction: 0xf8080000
20007500:	00000000 	andeq	r0, r0, r0
20007504:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20007508:	0000000f 	andeq	r0, r0, pc
2000750c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20007510:	00000000 	andeq	r0, r0, r0
20007514:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20007518:	00000007 	andeq	r0, r0, r7
2000751c:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
20007520:	00000000 	andeq	r0, r0, r0
20007524:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20007528:	00000007 	andeq	r0, r0, r7
2000752c:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
20007530:	00000000 	andeq	r0, r0, r0
20007534:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20007538:	00100007 	andseq	r0, r0, r7
2000753c:	f8040000 			; <UNDEFINED> instruction: 0xf8040000
20007540:	00000000 	andeq	r0, r0, r0
20007544:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
20007548:	00080007 	andeq	r0, r8, r7
2000754c:	f80001c0 			; <UNDEFINED> instruction: 0xf80001c0
20007550:	00000000 	andeq	r0, r0, r0
20007554:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
20007558:	00000007 	andeq	r0, r0, r7
2000755c:	f8080300 			; <UNDEFINED> instruction: 0xf8080300
20007560:	00000000 	andeq	r0, r0, r0
20007564:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
20007568:	00200007 	eoreq	r0, r0, r7
2000756c:	f8080200 			; <UNDEFINED> instruction: 0xf8080200
20007570:	00000000 	andeq	r0, r0, r0
20007574:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
20007578:	00000007 	andeq	r0, r0, r7
2000757c:	f8000200 			; <UNDEFINED> instruction: 0xf8000200
20007580:	00000000 	andeq	r0, r0, r0
20007584:	fffffff0 			; <UNDEFINED> instruction: 0xfffffff0
20007588:	00000007 	andeq	r0, r0, r7
2000758c:	f8000100 			; <UNDEFINED> instruction: 0xf8000100
20007590:	00000000 	andeq	r0, r0, r0
20007594:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
20007598:	01000007 	tsteq	r0, r7
2000759c:	f8100280 			; <UNDEFINED> instruction: 0xf8100280
200075a0:	00000000 	andeq	r0, r0, r0
200075a4:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
200075a8:	02000007 	andeq	r0, r0, #7
200075ac:	f8000300 			; <UNDEFINED> instruction: 0xf8000300

200075b0 <title_light_bits>:
	...
200075cc:	00000400 	andeq	r0, r0, r0, lsl #8
200075d0:	30000000 	andcc	r0, r0, r0
200075d4:	f80f9e06 			; <UNDEFINED> instruction: 0xf80f9e06
200075d8:	06300000 	ldrteq	r0, [r0], -r0
200075dc:	00cb8cba 	strheq	r8, [fp], #202	; 0xca
200075e0:	ba033000 	blt	200d35e8 <firstTime.4040+0xc912c>
200075e4:	0000eb4f 	andeq	lr, r0, pc, asr #22
200075e8:	439ef3f0 	orrsmi	pc, lr, #240, 6	; 0xc0000003
200075ec:	f000003a 			; <UNDEFINED> instruction: 0xf000003a
200075f0:	5a478e9b 	bpl	211eb064 <firstTime.4040+0x11e0ba8>
200075f4:	9b300000 	blls	20c075fc <firstTime.4040+0xbfd140>
200075f8:	019bcd36 	orrseq	ip, fp, r6, lsr sp
200075fc:	66db3000 	ldrbvs	r3, [fp], r0
20007600:	000319d9 	ldrdeq	r1, [r3], -r9
20007604:	19667330 	stmdbne	r6!, {r4, r5, r8, r9, ip, sp, lr}^
20007608:	30000310 	andcc	r0, r0, r0, lsl r3
2000760c:	00000001 	andeq	r0, r0, r1
20007610:	80000000 	andhi	r0, r0, r0
20007614:	001d3e7b 	andseq	r3, sp, fp, ror lr
20007618:	0ac00000 	beq	1f007620 <startup-0xff89e0>
2000761c:	00000528 	andeq	r0, r0, r8, lsr #10
20007620:	ec3a4000 	ldc	0, cr4, [sl], #-0
20007624:	0000000d 	andeq	r0, r0, sp
20007628:	05240bc0 	streq	r0, [r4, #-3008]!	; 0xfffff440
2000762c:	00f00000 	rscseq	r0, r0, r0
20007630:	001c0000 	andseq	r0, ip, r0
20007634:	03ebb000 	mvneq	fp, #0
20007638:	00000000 	andeq	r0, r0, r0
2000763c:	0c032330 	stceq	3, cr2, [r3], {48}	; 0x30
20007640:	300123e4 	andcc	r2, r1, r4, ror #7
20007644:	940c1b2a 	strls	r1, [ip], #-2858	; 0xfffff4d6
20007648:	ea300120 	b	20c07ad0 <firstTime.4040+0xbfd614>
2000764c:	ec860c3d 	stc	12, cr0, [r6], {61}	; 0x3d
20007650:	06ea3001 	strbteq	r3, [sl], r1
20007654:	01e69648 	mvneq	r9, r8, asr #12
20007658:	4b9e6b30 	blmi	1e7a2320 <startup-0x185dce0>
2000765c:	30012696 	mulcc	r1, r6, r6
20007660:	92bbb06b 	adcsls	fp, fp, #107	; 0x6b
20007664:	69f00126 	ldmibvs	r0!, {r1, r2, r5, r8}^
20007668:	2691b832 			; <UNDEFINED> instruction: 0x2691b832
2000766c:	1e687001 	cdpne	0, 6, cr7, cr8, cr1, {0}
20007670:	010e9110 	tsteq	lr, r0, lsl r1
	...

20007684 <title_gray_bits>:
	...
2000768c:	40000000 	andmi	r0, r0, r0
20007690:	0f840000 	svceq	0x00840000
20007694:	00b0c3fe 	ldrshteq	ip, [r0], lr
20007698:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
2000769c:	001f8f1f 	andseq	r8, pc, pc, lsl pc	; <UNPREDICTABLE>
200076a0:	fffffbf8 			; <UNDEFINED> instruction: 0xfffffbf8
200076a4:	c8001fff 	stmdagt	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
200076a8:	07f061f9 			; <UNDEFINED> instruction: 0x07f061f9
200076ac:	f1cc001f 			; <UNDEFINED> instruction: 0xf1cc001f
200076b0:	be347305 	cdplt	3, 3, cr7, cr4, cr5, {0}
200076b4:	05f0ce00 	ldrbeq	ip, [r0, #3584]!	; 0xe00
200076b8:	007e1430 	rsbseq	r1, lr, r0, lsr r4
200076bc:	2041080f 	subcs	r0, r1, pc, lsl #16
200076c0:	0e003e01 	cdpeq	14, 0, cr3, cr0, cr1, {0}
200076c4:	01384060 	teqeq	r8, r0, rrx
200076c8:	600c001e 	andvs	r0, ip, lr, lsl r0
200076cc:	1c4030c0 	mcrrne	0, 12, r3, r0, cr0
200076d0:	10208c00 	eorne	r8, r0, r0, lsl #24
200076d4:	0038c024 	eorseq	ip, r8, r4, lsr #32
200076d8:	0411088c 	ldreq	r0, [r1], #-2188	; 0xfffff774
200076dc:	c800f8ce 	stmdagt	r0, {r1, r2, r3, r6, r7, fp, ip, sp, lr, pc}
200076e0:	ffe6990c 			; <UNDEFINED> instruction: 0xffe6990c
200076e4:	7cfa0178 	ldfvce	f0, [sl], #480	; 0x1e0
200076e8:	3fe0c184 	svccc	0x00e0c184
200076ec:	013ff400 	teqeq	pc, r0, lsl #8	; <UNPREDICTABLE>
200076f0:	001fc0c7 	andseq	ip, pc, r7, asr #1
200076f4:	03c03ff0 	biceq	r3, r0, #240, 30	; 0x3c0
200076f8:	fc0007e0 	stc2	7, cr0, [r0], {224}	; 0xe0
200076fc:	e003803f 	and	r8, r3, pc, lsr r0
20007700:	7f0c009f 	svcvc	0x000c009f
20007704:	ffc1fbe4 			; <UNDEFINED> instruction: 0xffc1fbe4
20007708:	fc140c03 	ldc2	12, cr0, [r4], {3}
2000770c:	03ffc7ff 	mvnseq	ip, #66846720	; 0x3fc0000
20007710:	f3fc1c0c 	vdup.32	d17, d12[1]
20007714:	0e02dc1b 	mcreq	12, 0, sp, cr2, cr11, {0}
20007718:	63f3e490 	mvnsvs	lr, #144, 8	; 0x90000000
2000771c:	018e0218 	orreq	r0, lr, r8, lsl r2
20007720:	1251e382 	subsne	lr, r1, #134217730	; 0x8000002
20007724:	88018e02 	stmdahi	r1, {r1, r9, sl, fp, pc}
20007728:	020061a7 	andeq	r6, r0, #-1073741783	; 0xc0000029
2000772c:	2460008e 	strbtcs	r0, [r0], #-142	; 0xffffff72
20007730:	8e021041 	cdphi	0, 0, cr1, cr2, cr1, {2}
20007734:	41000300 	mrsmi	r0, LR_irq
20007738:	000e0290 	muleq	lr, r0, r2
2000773c:	9048008d 	subls	r0, r8, sp, lsl #1
20007740:	81040c02 	tsthi	r4, r2, lsl #24
20007744:	02a04c87 	adceq	r4, r0, #34560	; 0x8700
20007748:	cffffffc 	svcgt	0x00fffffc
2000774c:	8203e2fc 	andhi	lr, r3, #252, 4	; 0xc000000f
20007750:	e3f81c07 	mvns	r1, #1792	; 0x700
20007754:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20007758 <title_black_bits>:
	...
20007780:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
20007784:	01000040 	tsteq	r0, r0, asr #32
20007788:	400c0000 	andmi	r0, ip, r0
2000778c:	00010080 	andeq	r0, r1, r0, lsl #1
20007790:	9c200400 	cfstrsls	mvf0, [r0], #-0
20007794:	000001c4 	andeq	r0, r0, r4, asr #3
20007798:	a4803104 	strge	r3, [r0], #260	; 0x104
2000779c:	04c00001 	strbeq	r0, [r0], #1
200077a0:	02240209 	eoreq	r0, r4, #-1879048192	; 0x90000000
200077a4:	89044000 	stmdbhi	r4, {lr}
200077a8:	00042602 	andeq	r2, r4, r2, lsl #12
200077ac:	e2888440 	add	r8, r8, #64, 8	; 0x40000000
200077b0:	00000421 	andeq	r0, r0, r1, lsr #8
200077b4:	001966f2 			; <UNDEFINED> instruction: 0x001966f2
200077b8:	03000007 	movweq	r0, #7
200077bc:	00020000 	andeq	r0, r2, r0
200077c0:	f4000000 	vst4.8	{d0-d3}, [r0], r0
200077c4:	00003a10 	andeq	r3, r0, r0, lsl sl
200077c8:	10058000 	andne	r8, r5, r0
200077cc:	00000012 	andeq	r0, r0, r2, lsl r0
200077d0:	1ad87400 	bne	1f6247d8 <startup-0x9db828>
200077d4:	80000000 	andhi	r0, r0, r0
200077d8:	0022041b 	eoreq	r0, r2, fp, lsl r4
200077dc:	00004000 	andeq	r4, r0, r0
200077e0:	00003800 	andeq	r3, r0, r0, lsl #16
200077e4:	0000c0c0 	andeq	ip, r0, r0, asr #1
200077e8:	c0000000 	andgt	r0, r0, r0
200077ec:	08000045 	stmdaeq	r0, {r0, r2, r6}
200077f0:	144000c7 	strbne	r0, [r0], #-199	; 0xffffff39
200077f4:	01281040 			; <UNDEFINED> instruction: 0x01281040
200077f8:	71144000 	tstvc	r4, r0
200077fc:	00190810 	andseq	r0, r9, r0, lsl r8
20007800:	90019440 	andls	r9, r1, r0, asr #8
20007804:	4000c928 	andmi	ip, r0, r8, lsr #18
20007808:	2c444c94 	mcrrcs	12, 9, r4, r4, cr4
2000780c:	96000049 	strls	r0, [r0], -r9, asr #32
20007810:	49264740 	stmdbmi	r6!, {r6, r8, r9, sl, lr}
20007814:	60938000 	addsvs	r8, r3, r0
20007818:	00512268 	subseq	r2, r1, r8, ror #4
2000781c:	30000000 	andcc	r0, r0, r0
20007820:	00001d03 	andeq	r1, r0, r3, lsl #26
	...

2000782c <bg_bits>:
	...
2000783c:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
20007840:	0000001f 	andeq	r0, r0, pc, lsl r0
	...
2000784c:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
20007850:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
2000785c:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
20007860:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
	...
2000786c:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20007870:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
	...
2000787c:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20007880:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
2000788c:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20007890:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
2000789c:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
200078a0:	01ffffff 	ldrsheq	pc, [pc, #255]	; 200079a7 <bg_bits+0x17b>	; <UNPREDICTABLE>
200078a4:	0001f000 	andeq	pc, r1, r0
200078a8:	00000000 	andeq	r0, r0, r0
200078ac:	007fe000 	rsbseq	lr, pc, r0
200078b0:	0ffffffe 	svceq	0x00fffffe
200078b4:	0003f800 	andeq	pc, r3, r0, lsl #16
200078b8:	00000000 	andeq	r0, r0, r0
200078bc:	003fe000 	eorseq	lr, pc, r0
200078c0:	7fffffc0 	svcvc	0x00ffffc0
200078c4:	0003f800 	andeq	pc, r3, r0, lsl #16
200078c8:	001f8000 	andseq	r8, pc, r0
200078cc:	001fe000 	andseq	lr, pc, r0
200078d0:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200078d4:	0003f801 	andeq	pc, r3, r1, lsl #16
200078d8:	003fc000 	eorseq	ip, pc, r0
200078dc:	003fe000 	eorseq	lr, pc, r0
200078e0:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
200078e4:	3f83f807 	svccc	0x0083f807
200078e8:	003fe000 	eorseq	lr, pc, r0
200078ec:	01ffe000 	mvnseq	lr, r0
200078f0:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200078f4:	7fc3f80f 	svcvc	0x00c3f80f
200078f8:	003fe7f8 	ldrshteq	lr, [pc], -r8
200078fc:	07ffe000 	ldrbeq	lr, [pc, r0]!
20007900:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
20007904:	7fe1f01f 	svcvc	0x00e1f01f
20007908:	003ffffc 	ldrshteq	pc, [pc], -ip	; <UNPREDICTABLE>
2000790c:	3fffc000 	svccc	0x00ffc000
20007910:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20007914:	7ff0003f 	svcvc	0x00f0003f
20007918:	007ffffc 	ldrshteq	pc, [pc], #-252	; <UNPREDICTABLE>
2000791c:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20007920:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20007924:	7ff8007f 	svcvc	0x00f8007f
20007928:	3ffffffc 	svccc	0x00fffffc
2000792c:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20007930:	f8000003 			; <UNDEFINED> instruction: 0xf8000003
20007934:	7ffc00ff 	svcvc	0x00fc00ff
20007938:	7ffffffc 	svcvc	0x00fffffc
2000793c:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20007940:	e000000f 	and	r0, r0, pc
20007944:	7ffe01ff 	svcvc	0x00fe01ff
20007948:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
2000794c:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
20007950:	8000001f 	andhi	r0, r0, pc, lsl r0
20007954:	7fff01ff 	svcvc	0x00ff01ff
20007958:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
2000795c:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20007960:	0000007f 	andeq	r0, r0, pc, ror r0
20007964:	7fff83ff 	svcvc	0x00ff83ff
20007968:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
2000796c:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20007970:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20007974:	7fffc3fe 	svcvc	0x00ffc3fe
20007978:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
2000797c:	fc7ffff0 	ldc2l	15, cr15, [pc], #-960	; 200075c4 <title_light_bits+0x14>
20007980:	07c001ff 			; <UNDEFINED> instruction: 0x07c001ff
20007984:	7fffe7fc 	svcvc	0x00ffe7fc
20007988:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
2000798c:	f0fffffe 			; <UNDEFINED> instruction: 0xf0fffffe
20007990:	0fe007ff 	svceq	0x00e007ff
20007994:	7ffff7fc 	svcvc	0x00fff7fc
20007998:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
2000799c:	c0ffffff 	ldrshtgt	pc, [pc], #255	; <UNPREDICTABLE>
200079a0:	0fe00fff 	svceq	0x00e00fff
200079a4:	7ffffff8 	svcvc	0x00fffff8
200079a8:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
200079ac:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20007ab3 <bg_bits+0x287>	; <UNPREDICTABLE>
200079b0:	0fe01fff 	svceq	0x00e01fff
200079b4:	7ffffff8 	svcvc	0x00fffff8
200079b8:	7ffffc00 	svcvc	0x00fffc00
200079bc:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20007ac3 <bg_bits+0x297>	; <UNPREDICTABLE>
200079c0:	0fe03ffe 	svceq	0x00e03ffe
200079c4:	3fdffff0 	svccc	0x00dffff0
200079c8:	3ffffe00 	svccc	0x00fffe00
200079cc:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20007ad3 <bg_bits+0x2a7>	; <UNPREDICTABLE>
200079d0:	0fe03ff8 	svceq	0x00e03ff8
200079d4:	3fe7fff0 	svccc	0x00e7fff0
200079d8:	07fffe00 	ldrbeq	pc, [pc, r0, lsl #28]!	; <UNPREDICTABLE>
200079dc:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
200079e0:	07c07ff0 			; <UNDEFINED> instruction: 0x07c07ff0
200079e4:	1fe7fff0 	svcne	0x00e7fff0
200079e8:	0ffffe00 	svceq	0x00fffe00
200079ec:	03fc00ff 	mvnseq	r0, #255	; 0xff
200079f0:	0000ffe0 	andeq	pc, r0, r0, ror #31
200079f4:	1ff3ffe0 	svcne	0x00f3ffe0
200079f8:	1ffffe00 	svcne	0x00fffe00
200079fc:	03fc001f 	mvnseq	r0, #31
20007a00:	0001ff80 	andeq	pc, r1, r0, lsl #31
20007a04:	1ff9ffe0 	svcne	0x00f9ffe0
20007a08:	3ffffe00 	svccc	0x00fffe00
20007a0c:	03fc0007 	mvnseq	r0, #7
20007a10:	0001ff80 	andeq	pc, r1, r0, lsl #31
20007a14:	0ffcffe0 	svceq	0x00fcffe0
20007a18:	3ffdfe00 	svccc	0x00fdfe00
20007a1c:	07f80007 	ldrbeq	r0, [r8, r7]!
20007a20:	0003ff00 	andeq	pc, r3, r0, lsl #30
20007a24:	0ffe7ff0 	svceq	0x00fe7ff0
20007a28:	3ffcfe00 	svccc	0x00fcfe00
20007a2c:	07f80003 	ldrbeq	r0, [r8, r3]!
20007a30:	0007fe00 	andeq	pc, r7, r0, lsl #28
20007a34:	07fe7ff8 			; <UNDEFINED> instruction: 0x07fe7ff8
20007a38:	3ff8fe00 	svccc	0x00f8fe00
20007a3c:	0ff80003 	svceq	0x00f80003
20007a40:	0007fc00 	andeq	pc, r7, r0, lsl #24
20007a44:	03fffffc 	mvnseq	pc, #252, 30	; 0x3f0
20007a48:	3ff87c00 	svccc	0x00f87c00
20007a4c:	0ff80003 	svceq	0x00f80003
20007a50:	0007fc00 	andeq	pc, r7, r0, lsl #24
20007a54:	01fffffe 	ldrsheq	pc, [pc, #254]	; 20007b5a <bg_bits+0x32e>	; <UNPREDICTABLE>
20007a58:	1ff00000 	svcne	0x00f00000	; IMB
20007a5c:	0ff00007 	svceq	0x00f00007
20007a60:	000ff800 	andeq	pc, pc, r0, lsl #16
20007a64:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20007b6b <bg_bits+0x33f>	; <UNPREDICTABLE>
20007a68:	07f0003e 			; <UNDEFINED> instruction: 0x07f0003e
20007a6c:	0ff00007 	svceq	0x00f00007
20007a70:	800ff000 	andhi	pc, pc, r0
20007a74:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20007a78:	03e0007f 	mvneq	r0, #127	; 0x7f
20007a7c:	0fe00007 	svceq	0x00e00007
20007a80:	c00ff000 	andgt	pc, pc, r0
20007a84:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
20007a88:	0000007f 	andeq	r0, r0, pc, ror r0
20007a8c:	0fe00007 	svceq	0x00e00007
20007a90:	e00ff000 	and	pc, pc, r0
20007a94:	007ffeff 	ldrshteq	pc, [pc], #-239	; <UNPREDICTABLE>
20007a98:	0000007f 	andeq	r0, r0, pc, ror r0
20007a9c:	0fe00007 	svceq	0x00e00007
20007aa0:	f00ff000 			; <UNDEFINED> instruction: 0xf00ff000
20007aa4:	003ffe7f 	eorseq	pc, pc, pc, ror lr	; <UNPREDICTABLE>
20007aa8:	0000007f 	andeq	r0, r0, pc, ror r0
20007aac:	0fe00007 	svceq	0x00e00007
20007ab0:	f80ff000 			; <UNDEFINED> instruction: 0xf80ff000
20007ab4:	001ffc3f 	andseq	pc, pc, pc, lsr ip	; <UNPREDICTABLE>
20007ab8:	0000007f 	andeq	r0, r0, pc, ror r0
20007abc:	1fe0000f 	svcne	0x00e0000f
20007ac0:	fc0ff000 	stc2	0, cr15, [pc], {-0}
20007ac4:	000ff81f 	andeq	pc, pc, pc, lsl r8	; <UNPREDICTABLE>
20007ac8:	0000003e 	andeq	r0, r0, lr, lsr r0
20007acc:	1fe0000f 	svcne	0x00e0000f
20007ad0:	fc07f000 	stc2	0, cr15, [r7], {-0}
20007ad4:	0007f00f 	andeq	pc, r7, pc
20007ad8:	00000000 	andeq	r0, r0, r0
20007adc:	1fe0000f 	svcne	0x00e0000f
20007ae0:	fc07f000 	stc2	0, cr15, [r7], {-0}
20007ae4:	00000007 	andeq	r0, r0, r7
20007ae8:	00000000 	andeq	r0, r0, r0
20007aec:	1fe0000f 	svcne	0x00e0000f
20007af0:	fc07f800 	stc2	8, cr15, [r7], {-0}
20007af4:	00000003 	andeq	r0, r0, r3
20007af8:	000ff800 	andeq	pc, pc, r0, lsl #16
20007afc:	1fc0001f 	svcne	0x00c0001f
20007b00:	fc07fc00 	stc2	12, cr15, [r7], {-0}
20007b04:	00000001 	andeq	r0, r0, r1
20007b08:	001ffc00 	andseq	pc, pc, r0, lsl #24
20007b0c:	1fc0003f 	svcne	0x00c0003f
20007b10:	fc07ff80 	stc2	15, cr15, [r7], {128}	; 0x80
20007b14:	00000001 	andeq	r0, r0, r1
20007b18:	003fff00 	eorseq	pc, pc, r0, lsl #30
20007b1c:	3fc0003f 	svccc	0x00c0003f
20007b20:	fc07fffc 	stc2	15, cr15, [r7], {252}	; 0xfc
20007b24:	00000001 	andeq	r0, r0, r1
20007b28:	007fff80 	rsbseq	pc, pc, r0, lsl #31
20007b2c:	ffc0003f 			; <UNDEFINED> instruction: 0xffc0003f
20007b30:	fc03ffff 	stc2	15, cr15, [r3], {255}	; 0xff
20007b34:	00000001 	andeq	r0, r0, r1
20007b38:	00ffffe0 	rscseq	pc, pc, r0, ror #31
20007b3c:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20007b40:	fc01ffff 	stc2	15, cr15, [r1], {255}	; 0xff
20007b44:	00000007 	andeq	r0, r0, r7
20007b48:	03fffff0 	mvnseq	pc, #240, 30	; 0x3c0
20007b4c:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20007b50:	fc00ffff 	stc2	15, cr15, [r0], {255}	; 0xff
20007b54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007b58:	07fffff8 			; <UNDEFINED> instruction: 0x07fffff8
20007b5c:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20007b60:	fc007fff 	stc2	15, cr7, [r0], {255}	; 0xff
20007b64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007b68:	07ff7ffd 			; <UNDEFINED> instruction: 0x07ff7ffd
20007b6c:	ff80007f 			; <UNDEFINED> instruction: 0xff80007f
20007b70:	fc003fff 	stc2	15, cr3, [r0], {255}	; 0xff
20007b74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007b78:	0ffe3fff 	svceq	0x00fe3fff
20007b7c:	ff1f007f 			; <UNDEFINED> instruction: 0xff1f007f
20007b80:	f80007ff 			; <UNDEFINED> instruction: 0xf80007ff
20007b84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007b88:	1ffc3fff 	svcne	0x00fc3fff
20007b8c:	fc3f807f 	ldc2	0, cr8, [pc], #-508	; 20007998 <bg_bits+0x16c>
20007b90:	f800003f 			; <UNDEFINED> instruction: 0xf800003f
20007b94:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007b98:	1ff83fff 	svcne	0x00f83fff
20007b9c:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
20007ba0:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20007ba4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007ba8:	3ff03fff 	svccc	0x00f03fff
20007bac:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
20007bb0:	c0000000 	andgt	r0, r0, r0
20007bb4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007bb8:	7fe03fff 	svcvc	0x00e03fff
20007bbc:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
20007bc0:	00000000 	andeq	r0, r0, r0
20007bc4:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20007bc8:	7fc03fff 	svcvc	0x00c03fff
20007bcc:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
20007bd0:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
20007bd4:	f800000f 			; <UNDEFINED> instruction: 0xf800000f
20007bd8:	ffc01fff 			; <UNDEFINED> instruction: 0xffc01fff
20007bdc:	001f003f 	andseq	r0, pc, pc, lsr r0	; <UNPREDICTABLE>
20007be0:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20007be4:	f8007fff 			; <UNDEFINED> instruction: 0xf8007fff
20007be8:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
20007bec:	0000003f 	andeq	r0, r0, pc, lsr r0
20007bf0:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20007bf4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007bf8:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
20007bfc:	0000003f 	andeq	r0, r0, pc, lsr r0
20007c00:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20007c04:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007c08:	ff001fff 			; <UNDEFINED> instruction: 0xff001fff
20007c0c:	0000003f 	andeq	r0, r0, pc, lsr r0
20007c10:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20007c14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007c18:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}
20007c1c:	0000003f 	andeq	r0, r0, pc, lsr r0
20007c20:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20007c24:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007c28:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}

20007c2c <current_screen>:
20007c2c:	00000001 	andeq	r0, r0, r1

20007c30 <delay_until_text.4303>:
20007c30:	00000082 	andeq	r0, r0, r2, lsl #1

20007c34 <long_text.4301>:
20007c34:	00000028 	andeq	r0, r0, r8, lsr #32

20007c38 <short_text.4302>:
20007c38:	00000014 	andeq	r0, r0, r4, lsl r0

20007c3c <last_climb_value.4309>:
20007c3c:	00000064 	andeq	r0, r0, r4, rrx

20007c40 <fire_black_2_bits>:
	...
20007c48:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>

20007c4c <fire1_gray_bits>:
20007c4c:	00000000 	andeq	r0, r0, r0
20007c50:	06000804 	streq	r0, [r0], -r4, lsl #16
20007c54:	02494204 	subeq	r4, r9, #4, 4	; 0x40000000

20007c58 <fire1_light_bits>:
20007c58:	00002000 	andeq	r2, r0, r0
20007c5c:	48000010 	stmdami	r0, {r4}
20007c60:	2c243020 	stccs	0, cr3, [r4], #-128	; 0xffffff80

20007c64 <fire2_gray_bits>:
20007c64:	00000000 	andeq	r0, r0, r0
20007c68:	10220000 	eorne	r0, r2, r0
20007c6c:	00420444 	subeq	r0, r2, r4, asr #8

20007c70 <fire2_light_bits>:
20007c70:	04200000 	strteq	r0, [r0], #-0
20007c74:	240c0010 	strcs	r0, [ip], #-16
20007c78:	123c6008 	eorsne	r6, ip, #8

20007c7c <fire3_gray_bits>:
20007c7c:	00000000 	andeq	r0, r0, r0
20007c80:	24100802 	ldrcs	r0, [r0], #-2050	; 0xfffff7fe
20007c84:	00020260 	andeq	r0, r2, r0, ror #4

20007c88 <fire3_light_bits>:
20007c88:	10200000 	eorne	r0, r0, r0
20007c8c:	18040400 	stmdane	r4, {sl}
20007c90:	143c5812 	ldrtne	r5, [ip], #-2066	; 0xfffff7ee

20007c94 <fire4_gray_bits>:
20007c94:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
20007c98:	10320000 	eorsne	r0, r2, r0
20007c9c:	02400012 	subeq	r0, r0, #18

20007ca0 <fire4_light_bits>:
20007ca0:	00001000 	andeq	r1, r0, r0
20007ca4:	04082000 	streq	r2, [r8], #-0
20007ca8:	24283a0c 	strtcs	r3, [r8], #-2572	; 0xfffff5f4

20007cac <fire5_gray_bits>:
20007cac:	00000000 	andeq	r0, r0, r0
20007cb0:	22001020 	andcs	r1, r0, #32
20007cb4:	04044206 	streq	r4, [r4], #-518	; 0xfffffdfa

20007cb8 <fire5_light_bits>:
20007cb8:	00040000 	andeq	r0, r4, r0
20007cbc:	04240800 	strteq	r0, [r4], #-2048	; 0xfffff800
20007cc0:	502a1810 	eorpl	r1, sl, r0, lsl r8

20007cc4 <firstTime.4076>:
20007cc4:	00000001 	andeq	r0, r0, r1

20007cc8 <bird1_black_bits>:
	...
20007cd8:	00010040 	andeq	r0, r1, r0, asr #32
20007cdc:	00118060 	andseq	r8, r1, r0, rrx
20007ce0:	00118060 	andseq	r8, r1, r0, rrx
20007ce4:	001b80ec 	andseq	r8, fp, ip, ror #1
20007ce8:	003f81fc 	ldrshteq	r8, [pc], -ip
20007cec:	007fe1f8 	ldrshteq	lr, [pc], #-24
20007cf0:	007ff3f8 	ldrshteq	pc, [pc], #-56	; <UNPREDICTABLE>
20007cf4:	003ffff8 	ldrshteq	pc, [pc], -r8	; <UNPREDICTABLE>
20007cf8:	003fedf8 	ldrshteq	lr, [pc], -r8
20007cfc:	001ff1f0 			; <UNDEFINED> instruction: 0x001ff1f0
20007d00:	000ff0e0 	andeq	pc, pc, r0, ror #1
20007d04:	0007ff80 	andeq	pc, r7, r0, lsl #31
20007d08:	00007c00 	andeq	r7, r0, r0, lsl #24
20007d0c:	00008800 	andeq	r8, r0, r0, lsl #16
20007d10:	00033000 	andeq	r3, r3, r0
20007d14:	00011000 	andeq	r1, r1, r0
	...

20007d2c <bird1_gray_bits>:
	...
20007d60:	00000e00 	andeq	r0, r0, r0, lsl #28
20007d64:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

20007d90 <bird1_light_bits>:
	...
20007dc0:	00001200 	andeq	r1, r0, r0, lsl #4
	...

20007df4 <bird2_black_bits>:
	...
20007e0c:	000b0000 	andeq	r0, fp, r0
20007e10:	001e0028 	andseq	r0, lr, r8, lsr #32
20007e14:	003e0068 	eorseq	r0, lr, r8, rrx
20007e18:	003e007c 	eorseq	r0, lr, ip, ror r0
20007e1c:	003e007c 	eorseq	r0, lr, ip, ror r0
20007e20:	007e007c 	rsbseq	r0, lr, ip, ror r0
20007e24:	007e7cfc 	ldrshteq	r7, [lr], #-204	; 0xffffff34
20007e28:	007ffff8 	ldrshteq	pc, [pc], #-248	; <UNPREDICTABLE>
20007e2c:	003fd7f0 	ldrshteq	sp, [pc], -r0
20007e30:	003fc3c0 	eorseq	ip, pc, r0, asr #7
20007e34:	000fc100 	andeq	ip, pc, r0, lsl #2
20007e38:	00007000 	andeq	r7, r0, r0
20007e3c:	0000a000 	andeq	sl, r0, r0
20007e40:	0001e000 	andeq	lr, r1, r0
20007e44:	0000a000 	andeq	sl, r0, r0
20007e48:	00008000 	andeq	r8, r0, r0
	...

20007e58 <bird2_gray_bits>:
	...
20007e94:	00003c00 	andeq	r3, r0, r0, lsl #24
20007e98:	00003e00 	andeq	r3, r0, r0, lsl #28
	...

20007ebc <bird2_light_bits>:
	...
20007ef4:	00002800 	andeq	r2, r0, r0, lsl #16
	...

20007f20 <bird3_black_bits>:
	...
20007f40:	00280000 	eoreq	r0, r8, r0
20007f44:	00680020 	rsbeq	r0, r8, r0, lsr #32
20007f48:	00f80038 	rscseq	r0, r8, r8, lsr r0
20007f4c:	00fc0038 	rscseq	r0, ip, r8, lsr r0
20007f50:	00fc007c 	rscseq	r0, ip, ip, ror r0
20007f54:	00fe3dfe 	ldrshteq	r3, [lr], #222	; 0xde
20007f58:	00fffffe 	ldrshteq	pc, [pc], #254	; <UNPREDICTABLE>
20007f5c:	007febfc 	ldrshteq	lr, [pc], #-188
20007f60:	003ff1f0 	ldrshteq	pc, [pc], -r0	; <UNPREDICTABLE>
20007f64:	001ff0c0 	andseq	pc, pc, r0, asr #1
20007f68:	0001e800 	andeq	lr, r1, r0, lsl #16
20007f6c:	00005000 	andeq	r5, r0, r0
20007f70:	0000f000 	andeq	pc, r0, r0
20007f74:	00009000 	andeq	r9, r0, r0
	...

20007f84 <bird3_gray_bits>:
	...
20007fc4:	00000e00 	andeq	r0, r0, r0, lsl #28
20007fc8:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

20007fe8 <bird3_light_bits>:
	...
20008024:	00001400 	andeq	r1, r0, r0, lsl #8
	...

2000804c <bird4_black_bits>:
	...
20008080:	00007800 	andeq	r7, r0, r0, lsl #16
20008084:	0000ff80 	andeq	pc, r0, r0, lsl #31
20008088:	0003d7f4 	strdeq	sp, [r3], -r4
2000808c:	008fe3fc 	strdeq	lr, [pc], ip
20008090:	01ffc1fc 	ldrsheq	ip, [pc, #28]	; 200080b4 <bird4_gray_bits+0x4>
20008094:	00ffd9f8 	ldrshteq	sp, [pc], #152
20008098:	007fb0f0 	ldrshteq	fp, [pc], #-0
2000809c:	007ea000 	rsbseq	sl, lr, r0
200080a0:	00792000 	rsbseq	r2, r9, r0
200080a4:	00300000 	eorseq	r0, r0, r0
	...

200080b0 <bird4_gray_bits>:
	...
200080f0:	00001c00 	andeq	r1, r0, r0, lsl #24
200080f4:	00003e00 	andeq	r3, r0, r0, lsl #28
	...

20008114 <bird4_light_bits>:
	...
20008150:	00002800 	andeq	r2, r0, r0, lsl #16
	...

20008178 <bird5_black_bits>:
	...
200081a4:	00001c00 	andeq	r1, r0, r0, lsl #24
200081a8:	0000ff00 	andeq	pc, r0, r0, lsl #30
200081ac:	0003eb00 	andeq	lr, r3, r0, lsl #22
200081b0:	0007f180 	andeq	pc, r7, r0, lsl #3
200081b4:	000ff080 	andeq	pc, pc, r0, lsl #1
200081b8:	000fff80 	andeq	pc, pc, r0, lsl #31
200081bc:	001fd3c0 	andseq	sp, pc, r0, asr #7
200081c0:	003fa3c0 	eorseq	sl, pc, r0, asr #7
200081c4:	003fa3c0 	eorseq	sl, pc, r0, asr #7
200081c8:	003fd3c0 	eorseq	sp, pc, r0, asr #7
200081cc:	003e8380 	eorseq	r8, lr, r0, lsl #7
200081d0:	00778580 	rsbseq	r8, r7, r0, lsl #11
200081d4:	00610000 	rsbeq	r0, r1, r0
200081d8:	00000000 	andeq	r0, r0, r0

200081dc <bird5_gray_bits>:
	...
20008214:	00000e00 	andeq	r0, r0, r0, lsl #28
20008218:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

20008240 <bird5_light_bits>:
	...
20008274:	00001400 	andeq	r1, r0, r0, lsl #8
	...

200082a4 <firstTime.4093>:
200082a4:	00000001 	andeq	r0, r0, r1

200082a8 <witch1_black_bits>:
200082a8:	200001f8 	strdcs	r0, [r0], -r8
200082ac:	03400001 	movteq	r0, #1
200082b0:	00074000 	andeq	r4, r7, r0
200082b4:	20000720 	andcs	r0, r0, r0, lsr #14
200082b8:	3ff80066 	svccc	0x00f80066
200082bc:	00044000 	andeq	r4, r4, r0
200082c0:	40000440 	andmi	r0, r0, r0, asr #8
200082c4:	03800004 	orreq	r0, r0, #4
200082c8:	00064000 	andeq	r4, r6, r0
200082cc:	20000640 	andcs	r0, r0, r0, asr #12
200082d0:	0e200006 	cdpeq	0, 2, cr0, cr0, cr6, {0}
200082d4:	000e1000 	andeq	r1, lr, r0
200082d8:	f8000c10 			; <UNDEFINED> instruction: 0xf8000c10
200082dc:	0000001f 	andeq	r0, r0, pc, lsl r0

200082e0 <witch1_gray_bits>:
200082e0:	c0000000 	andgt	r0, r0, r0
200082e4:	00800000 	addeq	r0, r0, r0
200082e8:	00008000 	andeq	r8, r0, r0
200082ec:	c00000c0 	andgt	r0, r0, r0, asr #1
200082f0:	00000001 	andeq	r0, r0, r1
	...
20008300:	00018000 	andeq	r8, r1, r0
20008304:	c0000180 	andgt	r0, r0, r0, lsl #3
20008308:	01c00001 	biceq	r0, r0, r1
2000830c:	0001e000 	andeq	lr, r1, r0
20008310:	000003e0 	andeq	r0, r0, r0, ror #7
20008314:	00000000 	andeq	r0, r0, r0

20008318 <witch1_light_bits>:
	...
2000832c:	00038000 	andeq	r8, r3, r0
20008330:	80000380 	andhi	r0, r0, r0, lsl #7
20008334:	00000003 	andeq	r0, r0, r3
	...

20008350 <witch2_black_bits>:
20008350:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20008354:	01200001 			; <UNDEFINED> instruction: 0x01200001
20008358:	00034000 	andeq	r4, r3, r0
2000835c:	20000740 	andcs	r0, r0, r0, asr #14
20008360:	66200007 	strtvs	r0, [r0], -r7
20008364:	003ff800 	eorseq	pc, pc, r0, lsl #16
20008368:	40000440 	andmi	r0, r0, r0, asr #8
2000836c:	04400004 	strbeq	r0, [r0], #-4
20008370:	00038000 	andeq	r8, r3, r0
20008374:	20000660 	andcs	r0, r0, r0, ror #12
20008378:	0e100006 	cdpeq	0, 1, cr0, cr0, cr6, {0}
2000837c:	001c0800 	andseq	r0, ip, r0, lsl #16
20008380:	fc001c08 	stc2	12, cr1, [r0], {8}
20008384:	0000003f 	andeq	r0, r0, pc, lsr r0

20008388 <witch2_gray_bits>:
20008388:	00000000 	andeq	r0, r0, r0
2000838c:	00c00000 	sbceq	r0, r0, r0
20008390:	00008000 	andeq	r8, r0, r0
20008394:	c0000080 	andgt	r0, r0, r0, lsl #1
20008398:	01c00000 	biceq	r0, r0, r0
	...
200083ac:	c0000180 	andgt	r0, r0, r0, lsl #3
200083b0:	01e00001 	mvneq	r0, r1
200083b4:	0003f000 	andeq	pc, r3, r0
200083b8:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
200083bc:	00000000 	andeq	r0, r0, r0

200083c0 <witch2_light_bits>:
	...
200083d8:	80000380 	andhi	r0, r0, r0, lsl #7
200083dc:	03800003 	orreq	r0, r0, #3
	...

200083f8 <witch3_black_bits>:
200083f8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200083fc:	01200001 			; <UNDEFINED> instruction: 0x01200001
20008400:	00034000 	andeq	r4, r3, r0
20008404:	20000740 	andcs	r0, r0, r0, asr #14
20008408:	66200007 	strtvs	r0, [r0], -r7
2000840c:	003ff800 	eorseq	pc, pc, r0, lsl #16
20008410:	40000440 	andmi	r0, r0, r0, asr #8
20008414:	04400004 	strbeq	r0, [r0], #-4
20008418:	00038000 	andeq	r8, r3, r0
2000841c:	10000660 	andne	r0, r0, r0, ror #12
20008420:	1c08000e 	stcne	0, cr0, [r8], {14}
20008424:	00380800 	eorseq	r0, r8, r0, lsl #16
20008428:	fe003804 	vcmla.f16	d3, d0, d4[0], #0
2000842c:	0000007f 	andeq	r0, r0, pc, ror r0

20008430 <witch3_gray_bits>:
20008430:	00000000 	andeq	r0, r0, r0
20008434:	00c00000 	sbceq	r0, r0, r0
20008438:	00008000 	andeq	r8, r0, r0
2000843c:	c0000080 	andgt	r0, r0, r0, lsl #1
20008440:	01c00000 	biceq	r0, r0, r0
	...
20008454:	e0000180 	and	r0, r0, r0, lsl #3
20008458:	03f00001 	mvnseq	r0, #1
2000845c:	0007f000 	andeq	pc, r7, r0
20008460:	000007f8 	strdeq	r0, [r0], -r8
20008464:	00000000 	andeq	r0, r0, r0

20008468 <witch3_light_bits>:
	...
20008480:	80000380 	andhi	r0, r0, r0, lsl #7
20008484:	03800003 	orreq	r0, r0, #3
	...

200084a0 <firstTime.4067>:
200084a0:	00000001 	andeq	r0, r0, r1

200084a4 <witch1_black_bits>:
200084a4:	200001f8 	strdcs	r0, [r0], -r8
200084a8:	03400001 	movteq	r0, #1
200084ac:	00074000 	andeq	r4, r7, r0
200084b0:	20000720 	andcs	r0, r0, r0, lsr #14
200084b4:	3ff80066 	svccc	0x00f80066
200084b8:	00044000 	andeq	r4, r4, r0
200084bc:	40000440 	andmi	r0, r0, r0, asr #8
200084c0:	03800004 	orreq	r0, r0, #4
200084c4:	00064000 	andeq	r4, r6, r0
200084c8:	20000640 	andcs	r0, r0, r0, asr #12
200084cc:	0e200006 	cdpeq	0, 2, cr0, cr0, cr6, {0}
200084d0:	000e1000 	andeq	r1, lr, r0
200084d4:	f8000c10 			; <UNDEFINED> instruction: 0xf8000c10
200084d8:	0000001f 	andeq	r0, r0, pc, lsl r0

200084dc <witch1_gray_bits>:
200084dc:	c0000000 	andgt	r0, r0, r0
200084e0:	00800000 	addeq	r0, r0, r0
200084e4:	00008000 	andeq	r8, r0, r0
200084e8:	c00000c0 	andgt	r0, r0, r0, asr #1
200084ec:	00000001 	andeq	r0, r0, r1
	...
200084fc:	00018000 	andeq	r8, r1, r0
20008500:	c0000180 	andgt	r0, r0, r0, lsl #3
20008504:	01c00001 	biceq	r0, r0, r1
20008508:	0001e000 	andeq	lr, r1, r0
2000850c:	000003e0 	andeq	r0, r0, r0, ror #7
20008510:	00000000 	andeq	r0, r0, r0

20008514 <witch1_light_bits>:
	...
20008528:	00038000 	andeq	r8, r3, r0
2000852c:	80000380 	andhi	r0, r0, r0, lsl #7
20008530:	00000003 	andeq	r0, r0, r3
	...

2000854c <witch2_black_bits>:
2000854c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20008550:	01200001 			; <UNDEFINED> instruction: 0x01200001
20008554:	00034000 	andeq	r4, r3, r0
20008558:	20000740 	andcs	r0, r0, r0, asr #14
2000855c:	66200007 	strtvs	r0, [r0], -r7
20008560:	003ff800 	eorseq	pc, pc, r0, lsl #16
20008564:	40000440 	andmi	r0, r0, r0, asr #8
20008568:	04400004 	strbeq	r0, [r0], #-4
2000856c:	00038000 	andeq	r8, r3, r0
20008570:	20000660 	andcs	r0, r0, r0, ror #12
20008574:	0e100006 	cdpeq	0, 1, cr0, cr0, cr6, {0}
20008578:	001c0800 	andseq	r0, ip, r0, lsl #16
2000857c:	fc001c08 	stc2	12, cr1, [r0], {8}
20008580:	0000003f 	andeq	r0, r0, pc, lsr r0

20008584 <witch2_gray_bits>:
20008584:	00000000 	andeq	r0, r0, r0
20008588:	00c00000 	sbceq	r0, r0, r0
2000858c:	00008000 	andeq	r8, r0, r0
20008590:	c0000080 	andgt	r0, r0, r0, lsl #1
20008594:	01c00000 	biceq	r0, r0, r0
	...
200085a8:	c0000180 	andgt	r0, r0, r0, lsl #3
200085ac:	01e00001 	mvneq	r0, r1
200085b0:	0003f000 	andeq	pc, r3, r0
200085b4:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
200085b8:	00000000 	andeq	r0, r0, r0

200085bc <witch2_light_bits>:
	...
200085d4:	80000380 	andhi	r0, r0, r0, lsl #7
200085d8:	03800003 	orreq	r0, r0, #3
	...

200085f4 <witch3_black_bits>:
200085f4:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200085f8:	01200001 			; <UNDEFINED> instruction: 0x01200001
200085fc:	00034000 	andeq	r4, r3, r0
20008600:	20000740 	andcs	r0, r0, r0, asr #14
20008604:	66200007 	strtvs	r0, [r0], -r7
20008608:	003ff800 	eorseq	pc, pc, r0, lsl #16
2000860c:	40000440 	andmi	r0, r0, r0, asr #8
20008610:	04400004 	strbeq	r0, [r0], #-4
20008614:	00038000 	andeq	r8, r3, r0
20008618:	10000660 	andne	r0, r0, r0, ror #12
2000861c:	1c08000e 	stcne	0, cr0, [r8], {14}
20008620:	00380800 	eorseq	r0, r8, r0, lsl #16
20008624:	fe003804 	vcmla.f16	d3, d0, d4[0], #0
20008628:	0000007f 	andeq	r0, r0, pc, ror r0

2000862c <witch3_gray_bits>:
2000862c:	00000000 	andeq	r0, r0, r0
20008630:	00c00000 	sbceq	r0, r0, r0
20008634:	00008000 	andeq	r8, r0, r0
20008638:	c0000080 	andgt	r0, r0, r0, lsl #1
2000863c:	01c00000 	biceq	r0, r0, r0
	...
20008650:	e0000180 	and	r0, r0, r0, lsl #3
20008654:	03f00001 	mvnseq	r0, #1
20008658:	0007f000 	andeq	pc, r7, r0
2000865c:	000007f8 	strdeq	r0, [r0], -r8
20008660:	00000000 	andeq	r0, r0, r0

20008664 <witch3_light_bits>:
	...
2000867c:	80000380 	andhi	r0, r0, r0, lsl #7
20008680:	03800003 	orreq	r0, r0, #3
	...

2000869c <firstTime.4142>:
2000869c:	00000001 	andeq	r0, r0, r1

200086a0 <direction.4153>:
200086a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

200086a4 <flame1_black_bits>:
200086a4:	80000000 	andhi	r0, r0, r0
200086a8:	00000008 	andeq	r0, r0, r8
200086ac:	00004800 	andeq	r4, r0, r0, lsl #16
200086b0:	48004a08 	stmdami	r0, {r3, r9, fp, lr}
200086b4:	02400002 	subeq	r0, r0, #2
200086b8:	00541400 	subseq	r1, r4, r0, lsl #8
200086bc:	22005040 	andcs	r5, r0, #64	; 0x40
200086c0:	a01200b0 	ldrhge	r0, [r2], -r0	; <UNPREDICTABLE>
200086c4:	00011200 	andeq	r1, r1, r0, lsl #4
200086c8:	01001000 	mrseq	r1, (UNDEF: 0)
200086cc:	01000000 	mrseq	r0, (UNDEF: 0)
200086d0:	00210001 	eoreq	r0, r1, r1
200086d4:	40000042 	andmi	r0, r0, r2, asr #32
200086d8:	20410000 	subcs	r0, r1, r0
200086dc:	01200101 			; <UNDEFINED> instruction: 0x01200101
200086e0:	12012001 	andne	r2, r1, #1
200086e4:	90400000 	subls	r0, r0, r0
200086e8:	00800200 	addeq	r0, r0, r0, lsl #4
200086ec:	04008000 	streq	r8, [r0], #-0
200086f0:	20080001 	andcs	r0, r8, r1
200086f4:	00080800 	andeq	r0, r8, r0, lsl #16
	...
20008700:	00001000 	andeq	r1, r0, r0
20008704:	3200001c 	andcc	r0, r0, #28
20008708:	002f0000 	eoreq	r0, pc, r0
2000870c:	00003f00 	andeq	r3, r0, r0, lsl #30
20008710:	01000007 	tsteq	r0, r7
20008714:	00010000 	andeq	r0, r1, r0
20008718:	00000000 	andeq	r0, r0, r0

2000871c <flame1_gray_bits>:
	...
2000873c:	00080000 	andeq	r0, r8, r0
20008740:	00000000 	andeq	r0, r0, r0
20008744:	00900008 	addseq	r0, r0, r8
20008748:	0002a000 	andeq	sl, r2, r0
2000874c:	b0001bb0 			; <UNDEFINED> instruction: 0xb0001bb0
20008750:	0fb0001f 	svceq	0x00b0001f
20008754:	000fe000 	andeq	lr, pc, r0
20008758:	e0000fe0 	and	r0, r0, r0, ror #31
2000875c:	0fa0000f 	svceq	0x00a0000f
20008760:	0007e000 	andeq	lr, r7, r0
20008764:	800003c0 	andhi	r0, r0, r0, asr #7
20008768:	07c00002 	strbeq	r0, [r0, r2]
2000876c:	00078000 	andeq	r8, r7, r0
20008770:	80000380 	andhi	r0, r0, r0, lsl #7
20008774:	09800003 	stmibeq	r0, {r0, r1}
20008778:	00018000 	andeq	r8, r1, r0
2000877c:	0c000000 	stceq	0, cr0, [r0], {-0}
20008780:	00100000 	andseq	r0, r0, r0
	...

20008794 <flame1_light_bits>:
	...
2000879c:	00080000 	andeq	r0, r8, r0
200087a0:	80000080 	andhi	r0, r0, r0, lsl #1
200087a4:	0c88000c 	stceq	0, cr0, [r8], {12}
200087a8:	00098800 	andeq	r8, r9, r0, lsl #16
200087ac:	c8000db8 	stmdagt	r0, {r3, r4, r5, r7, r8, sl, fp}
200087b0:	5fe8004d 	svcpl	0x00e8004d
200087b4:	00f6e800 	rscseq	lr, r6, r0, lsl #16
200087b8:	fc00eff8 	stc2	15, cr14, [r0], {248}	; 0xf8
200087bc:	fe6c00f7 	mcr2	0, 3, r0, cr12, cr7, {7}
200087c0:	00dc5c00 	sbcseq	r5, ip, r0, lsl #24
200087c4:	0c00e40c 	cfstrseq	mvf14, [r0], {12}
200087c8:	d00e01e0 	andle	r0, lr, r0, ror #3
200087cc:	00d01e00 	sbcseq	r1, r0, r0, lsl #28
200087d0:	0c00d01a 	stceq	0, cr13, [r0], {26}
200087d4:	600e00f0 	strdvs	r0, [lr], -r0	; <UNPREDICTABLE>
200087d8:	00681c00 	rsbeq	r1, r8, r0, lsl #24
200087dc:	70003c3c 	andvc	r3, r0, ip, lsr ip
200087e0:	1830003c 	ldmdane	r0!, {r2, r3, r4, r5}
200087e4:	00307000 	eorseq	r7, r0, r0
200087e8:	78003c78 	stmdavc	r0, {r3, r4, r5, r6, sl, fp, ip, sp}
200087ec:	16700038 			; <UNDEFINED> instruction: 0x16700038
200087f0:	001e6000 	andseq	r6, lr, r0
200087f4:	c0000fe0 	andgt	r0, r0, r0, ror #31
200087f8:	0fc0000f 	svceq	0x00c0000f
	...

2000880c <flame2_black_bits>:
2000880c:	00000000 	andeq	r0, r0, r0
20008810:	40040042 	andmi	r0, r4, r2, asr #32
20008814:	00044400 	andeq	r4, r4, r0, lsl #8
20008818:	04000440 	streq	r0, [r0], #-1088	; 0xfffffbc0
2000881c:	22a00022 	adccs	r0, r0, #34	; 0x22
20008820:	00aaa800 	adceq	sl, sl, r0, lsl #16
20008824:	00009108 	andeq	r9, r0, r8, lsl #2
20008828:	84800090 	strhi	r0, [r0], #144	; 0x90
2000882c:	00040400 	andeq	r0, r4, r0, lsl #8
20008830:	20008004 	andcs	r8, r0, r4
20008834:	00850090 	umulleq	r0, r5, r0, r0
20008838:	01000000 	mrseq	r0, (UNDEF: 0)
2000883c:	20000002 	andcs	r0, r0, r2
20008840:	84200084 	strthi	r0, [r0], #-132	; 0xffffff7c
20008844:	00000200 	andeq	r0, r0, r0, lsl #4
20008848:	02004004 	andeq	r4, r0, #4
2000884c:	a00a0080 	andge	r0, sl, r0, lsl #1
20008850:	00240800 	eoreq	r0, r4, r0, lsl #16
20008854:	08002048 	stmdaeq	r0, {r3, r6, sp}
20008858:	00000000 	andeq	r0, r0, r0
2000885c:	00101000 	andseq	r1, r0, r0
20008860:	00004050 	andeq	r4, r0, r0, asr r0
20008864:	10000040 	andne	r0, r0, r0, asr #32
20008868:	00001000 	andeq	r1, r0, r0
2000886c:	3200001c 	andcc	r0, r0, #28
20008870:	002f0000 	eoreq	r0, pc, r0
20008874:	00003f00 	andeq	r3, r0, r0, lsl #30
20008878:	01000007 	tsteq	r0, r7
2000887c:	00010000 	andeq	r0, r1, r0
20008880:	00000000 	andeq	r0, r0, r0

20008884 <flame2_gray_bits>:
	...
200088a4:	00002000 	andeq	r2, r0, r0
200088a8:	40000010 	andmi	r0, r0, r0, lsl r0
200088ac:	27600002 	strbcs	r0, [r0, -r2]!
200088b0:	001fe000 	andseq	lr, pc, r0
200088b4:	c0000fe0 	andgt	r0, r0, r0, ror #31
200088b8:	0bc00003 	bleq	1f0088cc <startup-0xff7734>
200088bc:	000fe000 	andeq	lr, pc, r0
200088c0:	c0000fd0 	ldrdgt	r0, [r0], -r0	; <UNPREDICTABLE>
200088c4:	0fc0000f 	svceq	0x00c0000f
200088c8:	0003e000 	andeq	lr, r3, r0
200088cc:	c00007a0 	andgt	r0, r0, r0, lsr #15
200088d0:	0b800007 	bleq	1e0088f4 <startup-0x1ff770c>
200088d4:	0003c000 	andeq	ip, r3, r0
200088d8:	80000380 	andhi	r0, r0, r0, lsl #7
200088dc:	03800003 	orreq	r0, r0, #3
200088e0:	00000000 	andeq	r0, r0, r0
200088e4:	0c000000 	stceq	0, cr0, [r0], {-0}
200088e8:	00100000 	andseq	r0, r0, r0
	...

200088fc <flame2_light_bits>:
	...
20008904:	00020000 	andeq	r0, r2, r0
20008908:	20000220 	andcs	r0, r0, r0, lsr #4
2000890c:	05400005 	strbeq	r0, [r0, #-5]
20008910:	00054000 	andeq	r4, r5, r0
20008914:	fc0026f4 	stc2	6, cr2, [r0], {244}	; 0xf4
20008918:	137c0027 	cmnne	ip, #39	; 0x27
2000891c:	00fbda00 	rscseq	sp, fp, r0, lsl #20
20008920:	9e007fea 	cdpls	15, 0, cr7, cr0, cr10, {7}
20008924:	d818006d 	ldmdale	r8, {r0, r2, r3, r5, r6}
20008928:	00e01c00 	rsceq	r1, r0, r0, lsl #24
2000892c:	1e00f01c 	mcrne	0, 0, pc, cr0, cr12, {0}	; <UNPREDICTABLE>
20008930:	701e0078 	andsvc	r0, lr, r8, ror r0
20008934:	00f01c00 	rscseq	r1, r0, r0, lsl #24
20008938:	3c003028 	stccc	0, cr3, [r0], {40}	; 0x28
2000893c:	50240070 	eorpl	r0, r4, r0, ror r0
20008940:	01d81001 	bicseq	r1, r8, r1
20008944:	30004810 	andcc	r4, r0, r0, lsl r8
20008948:	34780038 	ldrbtcc	r0, [r8], #-56	; 0xffffffc8
2000894c:	002c2000 	eoreq	r2, ip, r0
20008950:	50003c20 	andpl	r3, r0, r0, lsr #24
20008954:	0c700038 	ldcleq	0, cr0, [r0], #-224	; 0xffffff20
20008958:	001fe000 	andseq	lr, pc, r0
2000895c:	c0000fe0 	andgt	r0, r0, r0, ror #31
20008960:	0fc0000f 	svceq	0x00c0000f
	...

20008974 <flame3_black_bits>:
20008974:	02000400 	andeq	r0, r0, #0, 8
20008978:	04000000 	streq	r0, [r0], #-0
2000897c:	00044000 	andeq	r4, r4, r0
20008980:	a4000404 	strge	r0, [r0], #-1028	; 0xfffffbfc
20008984:	52a00098 	adcpl	r0, r0, #152	; 0x98
20008988:	01028a00 	tsteq	r2, r0, lsl #20
2000898c:	00012028 	andeq	r2, r1, r8, lsr #32
20008990:	00020100 	andeq	r0, r2, r0, lsl #2
20008994:	01028200 	mrseq	r8, R10_usr
20008998:	80000092 	mulhi	r0, r2, r0
2000899c:	00810000 	addeq	r0, r1, r0
200089a0:	01400901 	cmpeq	r0, r1, lsl #18
200089a4:	01004008 	tsteq	r0, r8
200089a8:	02000002 	andeq	r0, r0, #2
200089ac:	01004001 	tsteq	r0, r1
200089b0:	02000002 	andeq	r0, r0, #2
200089b4:	a1000000 	mrsge	r0, (UNDEF: 0)
200089b8:	00002400 	andeq	r2, r0, r0, lsl #8
200089bc:	10004000 	andne	r4, r0, r0
200089c0:	40000044 	andmi	r0, r0, r4, asr #32
200089c4:	00400800 	subeq	r0, r0, r0, lsl #16
200089c8:	00000808 	andeq	r0, r0, r8, lsl #16
200089cc:	00000000 	andeq	r0, r0, r0
200089d0:	00001000 	andeq	r1, r0, r0
200089d4:	3200001c 	andcc	r0, r0, #28
200089d8:	002f0000 	eoreq	r0, pc, r0
200089dc:	00003f00 	andeq	r3, r0, r0, lsl #30
200089e0:	01000007 	tsteq	r0, r7
200089e4:	00010000 	andeq	r0, r1, r0
200089e8:	00000000 	andeq	r0, r0, r0

200089ec <flame3_gray_bits>:
	...
20008a0c:	00002000 	andeq	r2, r0, r0
20008a10:	00000040 	andeq	r0, r0, r0, asr #32
20008a14:	17600023 	strbne	r0, [r0, -r3, lsr #32]!
20008a18:	0017e000 	andseq	lr, r7, r0
20008a1c:	e0000fe0 	and	r0, r0, r0, ror #31
20008a20:	3de0003d 	stclcc	0, cr0, [r0, #244]!	; 0xf4
20008a24:	001fa000 	andseq	sl, pc, r0
20008a28:	f0001fe8 			; <UNDEFINED> instruction: 0xf0001fe8
20008a2c:	0ee0000f 	cdpeq	0, 14, cr0, cr0, cr15, {0}
20008a30:	000fc000 	andeq	ip, pc, r0
20008a34:	c0000fe0 	andgt	r0, r0, r0, ror #31
20008a38:	17c0000b 	strbne	r0, [r0, fp]
20008a3c:	00078000 	andeq	r8, r7, r0
20008a40:	80000780 	andhi	r0, r0, r0, lsl #15
20008a44:	03400003 	movteq	r0, #3
20008a48:	00030000 	andeq	r0, r3, r0
20008a4c:	0c000000 	stceq	0, cr0, [r0], {-0}
20008a50:	00100000 	andseq	r0, r0, r0
	...

20008a64 <flame3_light_bits>:
20008a64:	00000000 	andeq	r0, r0, r0
20008a68:	00400000 	subeq	r0, r0, r0
20008a6c:	00020000 	andeq	r0, r2, r0
20008a70:	40000240 	andmi	r0, r0, r0, asr #4
20008a74:	014c0002 	cmpeq	ip, r2
20008a78:	00317400 	eorseq	r7, r1, r0, lsl #8
20008a7c:	fc0017d4 	stc2	7, cr1, [r0], {212}	; 0xd4
20008a80:	bff8003f 	svclt	0x00f8003f
20008a84:	00fd5800 	rscseq	r5, sp, r0, lsl #16
20008a88:	7800ff28 	stmdavc	r0, {r3, r5, r8, r9, sl, fp, ip, sp, lr, pc}
20008a8c:	e81c00dc 	ldmda	ip, {r2, r3, r4, r6, r7}
20008a90:	00a81600 	adceq	r1, r8, r0, lsl #12
20008a94:	1e00b016 	mcrne	0, 0, fp, cr0, cr6, {0}
20008a98:	c01e00c0 	andsgt	r0, lr, r0, asr #1
20008a9c:	00e01c00 	rsceq	r1, r0, r0, lsl #24
20008aa0:	0c00c014 	stceq	0, cr12, [r0], {20}
20008aa4:	401c00f0 	ldrshmi	r0, [ip], -r0	; <UNPREDICTABLE>
20008aa8:	00f01800 	rscseq	r1, r0, r0, lsl #16
20008aac:	2800b01c 	stmdacs	r0, {r2, r3, r4, ip, sp, pc}
20008ab0:	283c0030 	ldmdacs	ip!, {r4, r5}
20008ab4:	00385400 	eorseq	r5, r8, r0, lsl #8
20008ab8:	70003070 	andvc	r3, r0, r0, ror r0
20008abc:	3cb0001c 	ldccc	0, cr0, [r0], #112	; 0x70
20008ac0:	003ce000 	eorseq	lr, ip, r0
20008ac4:	c0001fe0 	andgt	r1, r0, r0, ror #31
20008ac8:	0fc0000f 	svceq	0x00c0000f
	...

20008adc <flame4_black_bits>:
20008adc:	00000100 	andeq	r0, r0, r0, lsl #2
20008ae0:	10820000 	addne	r0, r2, r0
20008ae4:	00008000 	andeq	r8, r0, r0
20008ae8:	000028c8 	andeq	r2, r0, r8, asr #17
20008aec:	05540004 	ldrbeq	r0, [r4, #-4]
20008af0:	00a55400 	adceq	r5, r5, r0, lsl #8
20008af4:	08002420 	stmdaeq	r0, {r5, sl, sp}
20008af8:	50000082 	andpl	r0, r0, r2, lsl #1
20008afc:	01000400 	tsteq	r0, r0, lsl #8
20008b00:	00010444 	andeq	r0, r1, r4, asr #8
20008b04:	84120124 	ldrhi	r0, [r2], #-292	; 0xfffffedc
20008b08:	00841000 	addeq	r1, r4, r0
20008b0c:	01008001 	tsteq	r0, r1
20008b10:	200100a0 	andcs	r0, r1, r0, lsr #1
20008b14:	01000000 	mrseq	r0, (UNDEF: 0)
20008b18:	00000022 	andeq	r0, r0, r2, lsr #32
20008b1c:	80020000 	andhi	r0, r2, r0
20008b20:	00808a00 	addeq	r8, r0, r0, lsl #20
20008b24:	04004000 	streq	r4, [r0], #-0
20008b28:	20440000 	subcs	r0, r4, r0
20008b2c:	00200000 	eoreq	r0, r0, r0
20008b30:	00000008 	andeq	r0, r0, r8
20008b34:	00000010 	andeq	r0, r0, r0, lsl r0
20008b38:	00001000 	andeq	r1, r0, r0
20008b3c:	3200001c 	andcc	r0, r0, #28
20008b40:	002f0000 	eoreq	r0, pc, r0
20008b44:	00003f00 	andeq	r3, r0, r0, lsl #30
20008b48:	01000007 	tsteq	r0, r7
20008b4c:	00010000 	andeq	r0, r1, r0
20008b50:	00000000 	andeq	r0, r0, r0

20008b54 <flame4_gray_bits>:
	...
20008b78:	40000000 	andmi	r0, r0, r0
20008b7c:	08200010 	stmdaeq	r0!, {r4}
20008b80:	0008c000 	andeq	ip, r8, r0
20008b84:	f0000fc4 			; <UNDEFINED> instruction: 0xf0000fc4
20008b88:	1ff80007 	svcne	0x00f80007
20008b8c:	001ff000 	andseq	pc, pc, r0
20008b90:	f0001fd0 			; <UNDEFINED> instruction: 0xf0001fd0
20008b94:	1fc0001f 	svcne	0x00c0001f
20008b98:	001f5000 	andseq	r5, pc, r0
20008b9c:	e0000fe0 	and	r0, r0, r0, ror #31
20008ba0:	07800007 	streq	r0, [r0, r7]
20008ba4:	00078000 	andeq	r8, r7, r0
20008ba8:	00000780 	andeq	r0, r0, r0, lsl #15
20008bac:	0300000b 	movweq	r0, #11
20008bb0:	00010000 	andeq	r0, r1, r0
20008bb4:	0c000000 	stceq	0, cr0, [r0], {-0}
20008bb8:	00100000 	andseq	r0, r0, r0
	...

20008bcc <flame4_light_bits>:
	...
20008bd4:	00040000 	andeq	r0, r4, r0
20008bd8:	40000400 	andmi	r0, r0, r0, lsl #8
20008bdc:	c8800048 	stmgt	r0, {r3, r6}
20008be0:	00488000 	subeq	r8, r8, r0
20008be4:	e4004ac4 	str	r4, [r0], #-2756	; 0xfffff53c
20008be8:	2fec007d 	svccs	0x00ec007d
20008bec:	00fff800 	rscseq	pc, pc, r0, lsl #16
20008bf0:	be00fbb8 	vmovlt.16	d16[0], pc
20008bf4:	73cc00cb 	bicvc	r0, ip, #203	; 0xcb
20008bf8:	00732e00 	rsbseq	r2, r3, r0, lsl #28
20008bfc:	0e00703a 	mcreq	0, 0, r7, cr0, cr10, {1}
20008c00:	c0060050 	andgt	r0, r6, r0, asr r0
20008c04:	00e00e00 	rsceq	r0, r0, r0, lsl #28
20008c08:	0e00a00c 	cdpeq	0, 0, cr10, cr0, cr12, {0}
20008c0c:	601c00e0 	andsvs	r0, ip, r0, ror #1
20008c10:	00602400 	rsbeq	r2, r0, r0, lsl #8
20008c14:	1800301c 	stmdane	r0, {r2, r3, r4, ip, sp}
20008c18:	50380078 	eorspl	r0, r8, r8, ror r0
20008c1c:	00587000 	subseq	r7, r8, r0
20008c20:	f0003830 			; <UNDEFINED> instruction: 0xf0003830
20008c24:	1cf00024 	ldclne	0, cr0, [r0], #144	; 0x90
20008c28:	001ee000 	andseq	lr, lr, r0
20008c2c:	c0001fe0 	andgt	r1, r0, r0, ror #31
20008c30:	0fc0000f 	svceq	0x00c0000f
	...

20008c44 <firstTime.4079>:
20008c44:	00000001 	andeq	r0, r0, r1

20008c48 <indoors_black_bits>:
20008c48:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20008c58:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20008c68:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20008c78:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20008c88:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20008c98:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20008ca8:	00000280 	andeq	r0, r0, r0, lsl #5
	...
20008cb8:	00000440 	andeq	r0, r0, r0, asr #8
	...
20008cc8:	00002aa8 	andeq	r2, r0, r8, lsr #21
	...
20008cd8:	00001290 	muleq	r0, r0, r2
	...
20008ce8:	00002c68 	andeq	r2, r0, r8, ror #24
	...
20008cf8:	00002008 	andeq	r2, r0, r8
	...
20008d08:	000027c8 	andeq	r2, r0, r8, asr #15
	...
20008d18:	00001ff0 	strdeq	r1, [r0], -r0
	...
20008d28:	00000d60 	andeq	r0, r0, r0, ror #26
	...
20008d98:	f7fbfe00 			; <UNDEFINED> instruction: 0xf7fbfe00
20008d9c:	7fbfdfef 	svcvc	0x00bfdfef
20008da0:	fbfdfeff 	blx	1ff889a6 <startup-0x7765a>
20008da4:	00ff703f 	rscseq	r7, pc, pc, lsr r0	; <UNPREDICTABLE>
20008da8:	0c060200 	sfmeq	f0, 4, [r6], {-0}
20008dac:	c0603018 	rsbgt	r3, r0, r8, lsl r0
20008db0:	06030180 	streq	r0, [r3], -r0, lsl #3
20008db4:	0080d02c 	addeq	sp, r0, ip, lsr #32
20008db8:	0c060200 	sfmeq	f0, 4, [r6], {-0}
20008dbc:	c0603018 	rsbgt	r3, r0, r8, lsl r0
20008dc0:	06030180 	streq	r0, [r3], -r0, lsl #3
20008dc4:	0080d02c 	addeq	sp, r0, ip, lsr #32
20008dc8:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20008dcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008dd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008dd4:	00ffdfef 	rscseq	sp, pc, pc, ror #31
	...
20008de4:	000050e8 	andeq	r5, r0, r8, ror #1
	...
20008df4:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
20008e04:	00005028 	andeq	r5, r0, r8, lsr #32
	...
20008e14:	00005028 	andeq	r5, r0, r8, lsr #32
	...
20008e24:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
20008e34:	03f050e8 	mvnseq	r5, #232	; 0xe8
	...
20008e44:	0c0c5fe8 	stceq	15, cr5, [ip], {232}	; 0xe8
	...
20008e54:	10025028 	andne	r5, r2, r8, lsr #32
	...
20008e64:	13fa5028 	mvnsne	r5, #40	; 0x28
	...
20008e74:	100a5fe8 	andne	r5, sl, r8, ror #31
	...
20008e84:	100a50e8 	andne	r5, sl, r8, ror #1
	...
20008e94:	100a5fe8 	andne	r5, sl, r8, ror #31
	...
20008ea4:	100a5028 	andne	r5, sl, r8, lsr #32
	...
20008eb4:	100a5028 	andne	r5, sl, r8, lsr #32
	...
20008ec4:	100a5fe8 	andne	r5, sl, r8, ror #31
	...
20008ed4:	100a50e8 	andne	r5, sl, r8, ror #1
	...
20008ee4:	100a5ee8 	andne	r5, sl, r8, ror #29
	...
20008ef4:	100a5028 	andne	r5, sl, r8, lsr #32
	...
20008f04:	100a5028 	andne	r5, sl, r8, lsr #32
	...
20008f14:	10025fe8 	andne	r5, r2, r8, ror #31
	...
20008f24:	0ffc50e8 	svceq	0x00fc50e8
	...
20008f34:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
20008f44:	00005028 	andeq	r5, r0, r8, lsr #32
	...
20008f54:	00005028 	andeq	r5, r0, r8, lsr #32
	...
20008f64:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
20008f74:	000050e8 	andeq	r5, r0, r8, ror #1
	...
20008f84:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
20008f94:	00007028 	andeq	r7, r0, r8, lsr #32
	...
20008fa4:	00007028 	andeq	r7, r0, r8, lsr #32
	...
20008fb4:	00007038 	andeq	r7, r0, r8, lsr r0
20008fb8:	f7fbfdfe 			; <UNDEFINED> instruction: 0xf7fbfdfe
20008fbc:	7fbfdfef 	svcvc	0x00bfdfef
20008fc0:	fbfdfeff 	blx	1ff88bc6 <startup-0x7743a>
20008fc4:	bfbfeff7 	svclt	0x00bfeff7
20008fc8:	0c060301 	stceq	3, cr0, [r6], {1}
20008fcc:	c0603018 	rsbgt	r3, r0, r8, lsl r0
20008fd0:	06030180 	streq	r0, [r3], -r0, lsl #3
20008fd4:	6030180c 	eorsvs	r1, r0, ip, lsl #16
20008fd8:	0c060301 	stceq	3, cr0, [r6], {1}
20008fdc:	c0603018 	rsbgt	r3, r0, r8, lsl r0
20008fe0:	06030180 	streq	r0, [r3], -r0, lsl #3
20008fe4:	6030180c 	eorsvs	r1, r0, ip, lsl #16
20008fe8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008fec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008ff0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008ff4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008ff8:	c0603018 	rsbgt	r3, r0, r8, lsl r0
20008ffc:	06030180 	streq	r0, [r3], -r0, lsl #3
20009000:	6030180c 	eorsvs	r1, r0, ip, lsl #16
20009004:	030180c0 	movweq	r8, #4288	; 0x10c0
20009008:	c0603018 	rsbgt	r3, r0, r8, lsl r0
2000900c:	06030180 	streq	r0, [r3], -r0, lsl #3
20009010:	6030180c 	eorsvs	r1, r0, ip, lsl #16
20009014:	030180c0 	movweq	r8, #4288	; 0x10c0
20009018:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000901c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009020:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009024:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009028:	030180c0 	movweq	r8, #4288	; 0x10c0
2000902c:	30180c06 	andscc	r0, r8, r6, lsl #24
20009030:	0180c060 	orreq	ip, r0, r0, rrx
20009034:	180c0603 	stmdane	ip, {r0, r1, r9, sl}
20009038:	030180c0 	movweq	r8, #4288	; 0x10c0
2000903c:	30180c06 	andscc	r0, r8, r6, lsl #24
20009040:	0180c060 	orreq	ip, r0, r0, rrx
20009044:	180c0603 	stmdane	ip, {r0, r1, r9, sl}

20009048 <indoors_gray_bits>:
	...
200090a8:	00001110 	andeq	r1, r0, r0, lsl r1
	...
200090b8:	00001090 	muleq	r0, r0, r0
	...
200090e8:	00000390 	muleq	r0, r0, r3
	...
200090f8:	00001340 	andeq	r1, r0, r0, asr #6
	...
20009108:	00000830 	andeq	r0, r0, r0, lsr r8
	...
20009198:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
2000919c:	80402010 	subhi	r2, r0, r0, lsl r0
200091a0:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
200091a4:	00008000 	andeq	r8, r0, r0
200091a8:	b0582c00 	subslt	r2, r8, r0, lsl #24
200091ac:	0582c160 	streq	ip, [r2, #352]	; 0x160
200091b0:	582c160b 	stmdapl	ip!, {r0, r1, r3, r9, sl, ip}
200091b4:	010b0000 	mrseq	r0, (UNDEF: 11)
200091b8:	71b8dc00 			; <UNDEFINED> instruction: 0x71b8dc00
200091bc:	1b8dc6e3 	blne	1e37ad50 <startup-0x1c852b0>
200091c0:	b8dc6e37 	ldmlt	ip, {r0, r1, r2, r4, r5, r9, sl, fp, sp, lr}^
200091c4:	01370001 	teqeq	r7, r1
	...
200091d4:	01000000 	mrseq	r0, (UNDEF: 0)
200091d8:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
200091dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200091e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200091e4:	01ff8007 	mvnseq	r8, r7
	...
200091f4:	00008000 	andeq	r8, r0, r0
	...
20009204:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20009214:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20009224:	00008000 	andeq	r8, r0, r0
	...
20009234:	00008000 	andeq	r8, r0, r0
	...
20009244:	00008000 	andeq	r8, r0, r0
	...
20009254:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20009264:	20008180 	andcs	r8, r0, r0, lsl #3
	...
20009274:	20808000 	addcs	r8, r0, r0
	...
20009284:	20c08100 	sbccs	r8, r0, r0, lsl #2
	...
20009294:	21e08000 	mvncs	r8, r0
	...
200092a4:	2bf08180 	blcs	1fc298ac <startup-0x3d6754>
	...
200092b4:	25c08180 	strbcs	r8, [r0, #384]	; 0x180
	...
200092c4:	29e08000 	stmibcs	r0!, {pc}^
	...
200092d4:	2bc08100 	blcs	1f0296dc <startup-0xfd6924>
	...
200092e4:	20c08110 	sbccs	r8, r0, r0, lsl r1
	...
200092f4:	28e0a190 	stmiacs	r0!, {r4, r7, r8, sp, pc}^
	...
20009304:	2bf08180 	blcs	1fc2990c <startup-0x3d66f4>
	...
20009314:	28008000 	stmdacs	r0, {pc}
	...
20009324:	3000a010 	andcc	sl, r0, r0, lsl r0
	...
20009334:	1fc0a000 	svcne	0x00c0a000
	...
20009344:	0000a180 	andeq	sl, r0, r0, lsl #3
	...
20009354:	00008190 	muleq	r0, r0, r1
	...
20009364:	00008010 	andeq	r8, r0, r0, lsl r0
	...
20009374:	00008110 	andeq	r8, r0, r0, lsl r1
	...
20009384:	0000a010 	andeq	sl, r0, r0, lsl r0
	...
20009394:	00008190 	muleq	r0, r0, r1
	...
200093a4:	00008190 	muleq	r0, r0, r1
	...
200093b4:	00008180 	andeq	r8, r0, r0, lsl #3
200093b8:	08040201 	stmdaeq	r4, {r0, r9}
200093bc:	80402010 	subhi	r2, r0, r0, lsl r0
200093c0:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
200093c4:	40401008 	submi	r1, r0, r8
200093c8:	b0582c16 	subslt	r2, r8, r6, lsl ip
200093cc:	0582c160 	streq	ip, [r2, #352]	; 0x160
200093d0:	582c160b 	stmdapl	ip!, {r0, r1, r3, r9, sl, ip}
200093d4:	82c160b0 	sbchi	r6, r1, #176	; 0xb0
200093d8:	71b8dc6e 			; <UNDEFINED> instruction: 0x71b8dc6e
200093dc:	1b8dc6e3 	blne	1e37af70 <startup-0x1c85090>
200093e0:	b8dc6e37 	ldmlt	ip, {r0, r1, r2, r4, r5, r9, sl, fp, sp, lr}^
200093e4:	8dc6e371 	stclhi	3, cr14, [r6, #452]	; 0x1c4
	...
200093f8:	0582c160 	streq	ip, [r2, #352]	; 0x160
200093fc:	582c160b 	stmdapl	ip!, {r0, r1, r3, r9, sl, ip}
20009400:	82c160b0 	sbchi	r6, r1, #176	; 0xb0
20009404:	2c160b05 			; <UNDEFINED> instruction: 0x2c160b05
20009408:	1b8dc6e3 	blne	1e37af9c <startup-0x1c85064>
2000940c:	b8dc6e37 	ldmlt	ip, {r0, r1, r2, r4, r5, r9, sl, fp, sp, lr}^
20009410:	8dc6e371 	stclhi	3, cr14, [r6, #452]	; 0x1c4
20009414:	dc6e371b 	stclle	7, cr3, [lr], #-108	; 0xffffff94
	...
20009428:	2c160b05 			; <UNDEFINED> instruction: 0x2c160b05
2000942c:	c160b058 	qdsubgt	fp, r8, r0
20009430:	160b0582 	strne	r0, [fp], -r2, lsl #11
20009434:	60b0582c 	adcsvs	r5, r0, ip, lsr #16
20009438:	dc6e371b 	stclle	7, cr3, [lr], #-108	; 0xffffff94
2000943c:	c6e371b8 			; <UNDEFINED> instruction: 0xc6e371b8
20009440:	6e371b8d 	vaddvs.f64	d1, d23, d13
20009444:	e371b8dc 	cmn	r1, #220, 16	; 0xdc0000

20009448 <indoors_light_bits>:
	...
20009488:	00001010 	andeq	r1, r0, r0, lsl r0
	...
200094b8:	00000300 	andeq	r0, r0, r0, lsl #6
	...
200094c8:	00001110 	andeq	r1, r0, r0, lsl r1
	...
200094d8:	00000100 	andeq	r0, r0, r0, lsl #2
	...
200094e8:	00001000 	andeq	r1, r0, r0
	...
200094f8:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
	...
20009508:	00001000 	andeq	r1, r0, r0
	...
200095a8:	43a1d000 			; <UNDEFINED> instruction: 0x43a1d000
200095ac:	3a1d0e87 	bcc	2074cfd0 <firstTime.4040+0x742b14>
200095b0:	a1d0e874 	bicsge	lr, r0, r4, ror r8
200095b4:	00742013 	rsbseq	r2, r4, r3, lsl r0
200095b8:	82412000 	subhi	r2, r1, #0
200095bc:	24120904 	ldrcs	r0, [r2], #-2308	; 0xfffff6fc
200095c0:	41209048 			; <UNDEFINED> instruction: 0x41209048
200095c4:	00482012 	subeq	r2, r8, r2, lsl r0
	...
200095d4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
200095e4:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
200095f4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009604:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009614:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009624:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009634:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
20009644:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009654:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009664:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009674:	03702010 	cmneq	r0, #16
	...
20009684:	03302e10 	teqeq	r0, #16, 28	; 0x100
	...
20009694:	02102010 	andseq	r2, r0, #16
	...
200096a4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
200096b4:	02302010 	eorseq	r2, r0, #16
	...
200096c4:	02102010 	andseq	r2, r0, #16
	...
200096d4:	00302e10 	eorseq	r2, r0, r0, lsl lr
	...
200096e4:	03302000 	teqeq	r0, #0
	...
200096f4:	03100000 	tsteq	r0, #0
	...
20009704:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009714:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009724:	00000f00 	andeq	r0, r0, r0, lsl #30
	...
20009734:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20009744:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20009754:	00002000 	andeq	r2, r0, r0
	...
20009764:	00002000 	andeq	r2, r0, r0
	...
20009774:	00002e00 	andeq	r2, r0, r0, lsl #28
	...
200097c8:	43a1d0e8 			; <UNDEFINED> instruction: 0x43a1d0e8
200097cc:	3a1d0e87 	bcc	2074d1f0 <firstTime.4040+0x742d34>
200097d0:	a1d0e874 	bicsge	lr, r0, r4, ror r8
200097d4:	1d0e8743 	stcne	7, cr8, [lr, #-268]	; 0xfffffef4
200097d8:	82412090 	subhi	r2, r1, #144	; 0x90
200097dc:	24120904 	ldrcs	r0, [r2], #-2308	; 0xfffff6fc
200097e0:	41209048 			; <UNDEFINED> instruction: 0x41209048
200097e4:	12090482 	andne	r0, r9, #-2113929216	; 0x82000000
	...
200097f8:	3a1d0e87 	bcc	2074d21c <firstTime.4040+0x742d60>
200097fc:	a1d0e874 	bicsge	lr, r0, r4, ror r8
20009800:	1d0e8743 	stcne	7, cr8, [lr, #-268]	; 0xfffffef4
20009804:	d0e8743a 	rscle	r7, r8, sl, lsr r4
20009808:	24120904 	ldrcs	r0, [r2], #-2308	; 0xfffff6fc
2000980c:	41209048 			; <UNDEFINED> instruction: 0x41209048
20009810:	12090482 	andne	r0, r9, #-2113929216	; 0x82000000
20009814:	20904824 	addscs	r4, r0, r4, lsr #16
	...
20009828:	d0e8743a 	rscle	r7, r8, sl, lsr r4
2000982c:	0e8743a1 	cdpeq	3, 8, cr4, cr7, cr1, {5}
20009830:	e8743a1d 	ldmda	r4!, {r0, r2, r3, r4, r9, fp, ip, sp}^
20009834:	8743a1d0 			; <UNDEFINED> instruction: 0x8743a1d0
20009838:	20904824 	addscs	r4, r0, r4, lsr #16
2000983c:	09048241 	stmdbeq	r4, {r0, r6, r9, pc}
20009840:	90482412 	subls	r2, r8, r2, lsl r4
20009844:	04824120 	streq	r4, [r2], #288	; 0x120

20009848 <firstTime.4040>:
20009848:	00000001 	andeq	r0, r0, r1

2000984c <indoors2_black_bits>:
2000984c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009850:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009854:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009858:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000985c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009860:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009864:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009868:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000986c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009870:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009874:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009878:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000987c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009880:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009884:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009888:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000988c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009890:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009894:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009898:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000989c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200098a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200098a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200098a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200098ac:	ffffeeef 			; <UNDEFINED> instruction: 0xffffeeef
200098b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200098b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200098b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200098bc:	ffffec6f 			; <UNDEFINED> instruction: 0xffffec6f
200098c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200098c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200098c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200098cc:	ffffeaaf 			; <UNDEFINED> instruction: 0xffffeaaf
200098d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200098d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200098d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200098dc:	fffff29f 			; <UNDEFINED> instruction: 0xfffff29f
200098e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200098e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200098e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200098ec:	ffffec6f 			; <UNDEFINED> instruction: 0xffffec6f
200098f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200098f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200098f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200098fc:	ffffe00f 			; <UNDEFINED> instruction: 0xffffe00f
20009900:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009904:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009908:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000990c:	ffffe7cf 			; <UNDEFINED> instruction: 0xffffe7cf
20009910:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009914:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009918:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000991c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009920:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009924:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009928:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000992c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009930:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009934:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009938:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000993c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009940:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009944:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009948:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000994c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009950:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009954:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009958:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000995c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009960:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009964:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009968:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000996c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009970:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009974:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009978:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000997c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009980:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009984:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009988:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000998c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009990:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009994:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009998:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000999c:	f7fbffff 			; <UNDEFINED> instruction: 0xf7fbffff
200099a0:	7fbfdfef 	svcvc	0x00bfdfef
200099a4:	fbfdfeff 	blx	1ff895aa <startup-0x76a56>
200099a8:	ffff7fff 			; <UNDEFINED> instruction: 0xffff7fff
200099ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200099b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200099b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200099b8:	feffdfef 	cdp2	15, 15, cr13, cr15, cr15, {7}
200099bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200099c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200099c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200099c8:	feffdfef 	cdp2	15, 15, cr13, cr15, cr15, {7}
200099cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200099d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200099d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200099d8:	feffdfef 	cdp2	15, 15, cr13, cr15, cr15, {7}
200099dc:	00000fff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
200099e8:	fe0050e8 	cdp2	0, 0, cr5, cr0, cr8, {7}
200099ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200099f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200099f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200099f8:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
200099fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009a00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009a04:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009a08:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
20009a0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009a10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009a14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009a18:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
20009a1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009a20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009a24:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009a28:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
20009a2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009a30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009a34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009a38:	ffff50ef 			; <UNDEFINED> instruction: 0xffff50ef
20009a3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009a40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009a44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009a48:	ec0d5fef 	stc	15, cr5, [sp], {239}	; 0xef
20009a4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009a50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009a54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009a58:	f003502f 			; <UNDEFINED> instruction: 0xf003502f
20009a5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009a60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009a64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009a68:	d3fb502f 	mvnsle	r5, #47	; 0x2f
20009a6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009a70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009a74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009a78:	d00b5fef 	andle	r5, fp, pc, ror #31
20009a7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009a80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009a84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009a88:	d00b50ef 	andle	r5, fp, pc, ror #1
20009a8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009a90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009a94:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009a98:	d00b5fef 	andle	r5, fp, pc, ror #31
20009a9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009aa0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009aa4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009aa8:	d00b502f 	andle	r5, fp, pc, lsr #32
20009aac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009ab0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009ab4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009ab8:	d00b502f 	andle	r5, fp, pc, lsr #32
20009abc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009ac0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009ac4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009ac8:	d00b5fef 	andle	r5, fp, pc, ror #31
20009acc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009ad0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009ad4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009ad8:	d00b50ef 	andle	r5, fp, pc, ror #1
20009adc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009ae0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009ae4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009ae8:	d00b5eef 	andle	r5, fp, pc, ror #29
20009aec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009af0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009af4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009af8:	d00b502f 	andle	r5, fp, pc, lsr #32
20009afc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009b00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009b04:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009b08:	d00b502f 	andle	r5, fp, pc, lsr #32
20009b0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009b10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009b14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009b18:	d0035fef 	andle	r5, r3, pc, ror #31
20009b1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009b20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009b24:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009b28:	cffd50ef 	svcgt	0x00fd50ef
20009b2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009b30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009b34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009b38:	e03f5fef 	eors	r5, pc, pc, ror #31
20009b3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009b40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009b44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009b48:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
20009b4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009b50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009b54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009b58:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
20009b5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009b60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009b64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009b68:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
20009b6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009b70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009b74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009b78:	ffff50ef 			; <UNDEFINED> instruction: 0xffff50ef
20009b7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009b80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009b84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009b88:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
20009b8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009b90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009b94:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009b98:	ffff7e6f 			; <UNDEFINED> instruction: 0xffff7e6f
20009b9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009ba0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009ba4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009ba8:	ffff7e6f 			; <UNDEFINED> instruction: 0xffff7e6f
20009bac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009bb0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009bb4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009bb8:	ffff7e7f 			; <UNDEFINED> instruction: 0xffff7e7f
20009bbc:	f7fbfdfe 			; <UNDEFINED> instruction: 0xf7fbfdfe
20009bc0:	7fbfdfef 	svcvc	0x00bfdfef
20009bc4:	fbfdfeff 	blx	1ff897ca <startup-0x76836>
20009bc8:	bfbfeff7 	svclt	0x00bfeff7
20009bcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009bd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009bd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009bd8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009bdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009be0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009be4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009be8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009bec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009bf0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009bf4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009bf8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009bfc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009c00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009c04:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009c08:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009c0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009c10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009c14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009c18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009c1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009c20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009c24:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009c28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009c2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009c30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009c34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009c38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009c3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009c40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009c44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009c48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20009c4c <indoors2_gray_bits>:
	...
20009cac:	00001110 	andeq	r1, r0, r0, lsl r1
	...
20009cbc:	00001090 	muleq	r0, r0, r0
	...
20009cec:	00000390 	muleq	r0, r0, r3
	...
20009cfc:	00001340 	andeq	r1, r0, r0, asr #6
	...
20009d0c:	00000830 	andeq	r0, r0, r0, lsr r8
	...
20009d9c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
20009da0:	80402010 	subhi	r2, r0, r0, lsl r0
20009da4:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
20009da8:	00008000 	andeq	r8, r0, r0
	...
20009db8:	01000000 	mrseq	r0, (UNDEF: 0)
	...
20009dc8:	01000000 	mrseq	r0, (UNDEF: 0)
	...
20009dd8:	01000000 	mrseq	r0, (UNDEF: 0)
20009ddc:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
20009de0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009de4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20009de8:	01ff8007 	mvnseq	r8, r7
	...
20009df8:	00008000 	andeq	r8, r0, r0
	...
20009e08:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20009e18:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20009e28:	00008000 	andeq	r8, r0, r0
	...
20009e38:	00008000 	andeq	r8, r0, r0
	...
20009e48:	00008000 	andeq	r8, r0, r0
	...
20009e58:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20009e68:	20008180 	andcs	r8, r0, r0, lsl #3
	...
20009e78:	20808000 	addcs	r8, r0, r0
	...
20009e88:	20c08100 	sbccs	r8, r0, r0, lsl #2
	...
20009e98:	21e08000 	mvncs	r8, r0
	...
20009ea8:	2bf08180 	blcs	1fc2a4b0 <startup-0x3d5b50>
	...
20009eb8:	25c08180 	strbcs	r8, [r0, #384]	; 0x180
	...
20009ec8:	29e08000 	stmibcs	r0!, {pc}^
	...
20009ed8:	2bc08100 	blcs	1f02a2e0 <startup-0xfd5d20>
	...
20009ee8:	20c08110 	sbccs	r8, r0, r0, lsl r1
	...
20009ef8:	28e0a190 	stmiacs	r0!, {r4, r7, r8, sp, pc}^
	...
20009f08:	2bf08180 	blcs	1fc2a510 <startup-0x3d5af0>
	...
20009f18:	28008000 	stmdacs	r0, {pc}
	...
20009f28:	3000a010 	andcc	sl, r0, r0, lsl r0
	...
20009f38:	1fc0a000 	svcne	0x00c0a000
	...
20009f48:	0000a180 	andeq	sl, r0, r0, lsl #3
	...
20009f58:	00008190 	muleq	r0, r0, r1
	...
20009f68:	00008010 	andeq	r8, r0, r0, lsl r0
	...
20009f78:	00008110 	andeq	r8, r0, r0, lsl r1
	...
20009f88:	0000a010 	andeq	sl, r0, r0, lsl r0
	...
20009f98:	00008190 	muleq	r0, r0, r1
	...
20009fa8:	00008190 	muleq	r0, r0, r1
	...
20009fb8:	00008180 	andeq	r8, r0, r0, lsl #3
20009fbc:	08040201 	stmdaeq	r4, {r0, r9}
20009fc0:	80402010 	subhi	r2, r0, r0, lsl r0
20009fc4:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
20009fc8:	40401008 	submi	r1, r0, r8
	...

2000a04c <indoors2_light_bits>:
	...
2000a0bc:	00000300 	andeq	r0, r0, r0, lsl #6
	...
2000a0cc:	00001110 	andeq	r1, r0, r0, lsl r1
	...
2000a0dc:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000a0ec:	00001000 	andeq	r1, r0, r0
	...
2000a0fc:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
	...
2000a10c:	00001000 	andeq	r1, r0, r0
	...
2000a1b8:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000a1c8:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000a1d8:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000a1e8:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
2000a1f8:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000a208:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000a218:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000a228:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000a238:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
2000a248:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000a258:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000a268:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000a278:	03702010 	cmneq	r0, #16
	...
2000a288:	03302e10 	teqeq	r0, #16, 28	; 0x100
	...
2000a298:	02102010 	andseq	r2, r0, #16
	...
2000a2a8:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000a2b8:	02302010 	eorseq	r2, r0, #16
	...
2000a2c8:	02102010 	andseq	r2, r0, #16
	...
2000a2d8:	00302e10 	eorseq	r2, r0, r0, lsl lr
	...
2000a2e8:	03302000 	teqeq	r0, #0
	...
2000a2f8:	03100000 	tsteq	r0, #0
	...
2000a308:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000a318:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000a328:	00000f00 	andeq	r0, r0, r0, lsl #30
	...
2000a338:	00000010 	andeq	r0, r0, r0, lsl r0
	...
2000a348:	00000010 	andeq	r0, r0, r0, lsl r0
	...
2000a358:	00002000 	andeq	r2, r0, r0
	...
2000a368:	00002000 	andeq	r2, r0, r0
	...
2000a378:	00002e00 	andeq	r2, r0, r0, lsl #28
	...

2000a44c <firstTime.4040>:
2000a44c:	00000001 	andeq	r0, r0, r1

2000a450 <trophy_black_bits>:
2000a450:	00d40028 	sbcseq	r0, r4, r8, lsr #32
2000a454:	03fe01aa 	mvnseq	r0, #-2147483606	; 0x8000002a
2000a458:	02220401 	eoreq	r0, r2, #16777216	; 0x1000000
2000a45c:	02220232 	eoreq	r0, r2, #536870915	; 0x20000003
2000a460:	00880124 	addeq	r0, r8, r4, lsr #2
2000a464:	00500088 	subseq	r0, r0, r8, lsl #1
2000a468:	00880088 	addeq	r0, r8, r8, lsl #1
2000a46c:	020201fc 	andeq	r0, r2, #252, 2	; 0x3f
2000a470:	00000202 	andeq	r0, r0, r2, lsl #4

2000a474 <trophy_gray_bits>:
	...
2000a47c:	01000300 	mrseq	r0, LR_irq
2000a480:	01000100 	mrseq	r0, (UNDEF: 16)
2000a484:	00000080 	andeq	r0, r0, r0, lsl #1
2000a488:	00000000 	andeq	r0, r0, r0
2000a48c:	00400040 	subeq	r0, r0, r0, asr #32
2000a490:	01f00000 	mvnseq	r0, r0
2000a494:	000001e8 	andeq	r0, r0, r8, ror #3

2000a498 <trophy_light_bits>:
2000a498:	00000000 	andeq	r0, r0, r0
2000a49c:	00000050 	andeq	r0, r0, r0, asr r0
2000a4a0:	008800ec 	addeq	r0, r8, ip, ror #1
2000a4a4:	008800c0 	addeq	r0, r8, r0, asr #1
2000a4a8:	00600048 	rsbeq	r0, r0, r8, asr #32
2000a4ac:	00200060 	eoreq	r0, r0, r0, rrx
2000a4b0:	00200020 	eoreq	r0, r0, r0, lsr #32
2000a4b4:	000c0000 	andeq	r0, ip, r0
2000a4b8:	00000014 	andeq	r0, r0, r4, lsl r0

2000a4bc <firstTime.4040>:
2000a4bc:	00000001 	andeq	r0, r0, r1
2000a4c0:	00202020 	eoreq	r2, r0, r0, lsr #32
2000a4c4:	41524b2a 	cmpmi	r2, sl, lsr #22
2000a4c8:	2a202a21 	bcs	20814d54 <firstTime.4040+0x80a898>
2000a4cc:	2141524b 	cmpcs	r1, fp, asr #4
2000a4d0:	0000002a 	andeq	r0, r0, sl, lsr #32
2000a4d4:	734c4944 	movtvc	r4, #51524	; 0xc944
2000a4d8:	7469772d 	strbtvc	r7, [r9], #-1837	; 0xfffff8d3
2000a4dc:	73656863 	cmnvc	r5, #6488064	; 0x630000
2000a4e0:	76616820 	strbtvc	r6, [r1], -r0, lsr #16
2000a4e4:	00000065 	andeq	r0, r0, r5, rrx
2000a4e8:	20726f46 	rsbscs	r6, r2, r6, asr #30
2000a4ec:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
2000a4f0:	65697275 	strbvs	r7, [r9, #-629]!	; 0xfffffd8b
2000a4f4:	68742073 	ldmdavs	r4!, {r0, r1, r4, r5, r6, sp}^
2000a4f8:	00000065 	andeq	r0, r0, r5, rrx
2000a4fc:	20202020 	eorcs	r2, r0, r0, lsr #32
2000a500:	00000000 	andeq	r0, r0, r0
2000a504:	6c696f63 	stclvs	15, cr6, [r9], #-396	; 0xfffffe74
2000a508:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
2000a50c:	6566206e 	strbvs	r2, [r6, #-110]!	; 0xffffff92
2000a510:	002c7261 	eoreq	r7, ip, r1, ror #4
2000a514:	74616874 	strbtvc	r6, [r1], #-2164	; 0xfffff78c
2000a518:	44206120 	strtmi	r6, [r0], #-288	; 0xfffffee0
2000a51c:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
2000a520:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
2000a524:	00000068 	andeq	r0, r0, r8, rrx
2000a528:	6e656877 	mcrvs	8, 3, r6, cr5, cr7, {3}
2000a52c:	72657665 	rsbvc	r7, r5, #105906176	; 0x6500000
2000a530:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
2000a534:	65682079 	strbvs	r2, [r8, #-121]!	; 0xffffff87
2000a538:	00007261 	andeq	r7, r0, r1, ror #4
2000a53c:	6e207369 	cdpvs	3, 2, cr7, cr0, cr9, {3}
2000a540:	2e726165 	rpwcssz	f6, f2, f5
2000a544:	00000000 	andeq	r0, r0, r0
2000a548:	70727573 	rsbsvc	r7, r2, r3, ror r5
2000a54c:	69736972 	ldmdbvs	r3!, {r1, r4, r5, r6, r8, fp, sp, lr}^
2000a550:	202c676e 	eorcs	r6, ip, lr, ror #14
2000a554:	646e6966 	strbtvs	r6, [lr], #-2406	; 0xfffff69a
2000a558:	00676e69 	rsbeq	r6, r7, r9, ror #28
2000a55c:	69206f53 	stmdbvs	r0!, {r0, r1, r4, r6, r8, r9, sl, fp, sp, lr}
2000a560:	73692074 	cmnvc	r9, #116	; 0x74
2000a564:	69757120 	ldmdbvs	r5!, {r5, r8, ip, sp, lr}^
2000a568:	00006574 	andeq	r6, r0, r4, ror r5
2000a56c:	20756f79 	rsbscs	r6, r5, r9, ror pc
2000a570:	65726568 	ldrbvs	r6, [r2, #-1384]!	; 0xfffffa98
2000a574:	0000002c 	andeq	r0, r0, ip, lsr #32
2000a578:	72696568 	rsbvc	r6, r9, #104, 10	; 0x1a000000
2000a57c:	206f7420 	rsbcs	r7, pc, r0, lsr #8
2000a580:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
2000a584:	61654c20 	cmnvs	r5, r0, lsr #24
2000a588:	00002e72 	andeq	r2, r0, r2, ror lr
2000a58c:	65657571 	strbvs	r7, [r5, #-1393]!	; 0xfffffa8f
2000a590:	6144206e 	cmpvs	r4, lr, rrx
2000a594:	206f6666 	rsbcs	r6, pc, r6, ror #12
2000a598:	4420666f 	strtmi	r6, [r0], #-1647	; 0xfffff991
2000a59c:	2c734c49 	ldclcs	12, cr4, [r3], #-292	; 0xfffffedc
2000a5a0:	00000000 	andeq	r0, r0, r0
2000a5a4:	706d6574 	rsbvc	r6, sp, r4, ror r5
2000a5a8:	2c646574 	cfstr64cs	mvdx6, [r4], #-464	; 0xfffffe30
2000a5ac:	206f7420 	rsbcs	r7, pc, r0, lsr #8
2000a5b0:	746f6f6c 	strbtvc	r6, [pc], #-3948	; 2000a5b8 <firstTime.4040+0xfc>
2000a5b4:	00000000 	andeq	r0, r0, r0
2000a5b8:	20747542 	rsbscs	r7, r4, r2, asr #10
2000a5bc:	6279616d 	rsbsvs	r6, r9, #1073741851	; 0x4000001b
2000a5c0:	6f792065 	svcvs	0x00792065
2000a5c4:	65722775 	ldrbvs	r2, [r2, #-1909]!	; 0xfffff88b
2000a5c8:	00000000 	andeq	r0, r0, r0
2000a5cc:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 2000a43c <indoors2_light_bits+0x3f0>
2000a5d0:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
2000a5d4:	63697220 	cmnvs	r9, #32, 4
2000a5d8:	2c736568 	cfldr64cs	mvdx6, [r3], #-416	; 0xfffffe60
2000a5dc:	00000000 	andeq	r0, r0, r0
2000a5e0:	6b636977 	blvs	218e4bc4 <firstTime.4040+0x18da708>
2000a5e4:	44206465 	strtmi	r6, [r0], #-1125	; 0xfffffb9b
2000a5e8:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
2000a5ec:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
2000a5f0:	2e736568 	cdpcs	5, 7, cr6, cr3, cr8, {3}
2000a5f4:	00000000 	andeq	r0, r0, r0
2000a5f8:	65727573 	ldrbvs	r7, [r2, #-1395]!	; 0xfffffa8d
2000a5fc:	79622064 	stmdbvc	r2!, {r2, r5, r6, sp}^
2000a600:	00000000 	andeq	r0, r0, r0
2000a604:	67206f73 			; <UNDEFINED> instruction: 0x67206f73
2000a608:	70706972 	rsbsvc	r6, r0, r2, ror r9
2000a60c:	20796c69 	rsbscs	r6, r9, r9, ror #24
2000a610:	61657274 	smcvs	22308	; 0x5724
2000a614:	0000002d 	andeq	r0, r0, sp, lsr #32
2000a618:	6572202d 	ldrbvs	r2, [r2, #-45]!	; 0xffffffd3
2000a61c:	20746573 	rsbscs	r6, r4, r3, ror r5
2000a620:	20656874 	rsbcs	r6, r5, r4, ror r8
2000a624:	74697773 	strbtvc	r7, [r9], #-1907	; 0xfffff88d
2000a628:	00216863 	eoreq	r6, r1, r3, ror #16
2000a62c:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xfffff1bb
2000a630:	62202c72 	eorvs	r2, r0, #29184	; 0x7200
2000a634:	65766172 	ldrbvs	r6, [r6, #-370]!	; 0xfffffe8e
2000a638:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
2000a63c:	002c6863 	eoreq	r6, ip, r3, ror #16
2000a640:	20002cb8 			; <UNDEFINED> instruction: 0x20002cb8
2000a644:	20002cc2 	andcs	r2, r0, r2, asr #25
2000a648:	20002ccc 	andcs	r2, r0, ip, asr #25
2000a64c:	20002cd6 	ldrdcs	r2, [r0], -r6
2000a650:	20002ce0 	andcs	r2, r0, r0, ror #25
2000a654:	20002cea 	andcs	r2, r0, sl, ror #25
2000a658:	20002cf4 	strdcs	r2, [r0], -r4
2000a65c:	20002cfe 	strdcs	r2, [r0], -lr
2000a660:	20202020 	eorcs	r2, r0, r0, lsr #32
2000a664:	20202020 	eorcs	r2, r0, r0, lsr #32
2000a668:	20202020 	eorcs	r2, r0, r0, lsr #32
2000a66c:	20202020 	eorcs	r2, r0, r0, lsr #32
2000a670:	20202020 	eorcs	r2, r0, r0, lsr #32
2000a674:	00000000 	andeq	r0, r0, r0
2000a678:	61666c41 	cmnvs	r6, r1, asr #24
2000a67c:	656d756e 	strbvs	r7, [sp, #-1390]!	; 0xfffffa92
2000a680:	6b736972 	blvs	21ce4c50 <firstTime.4040+0x1cda794>
2000a684:	00000000 	andeq	r0, r0, r0
2000a688:	64726168 	ldrbtvs	r6, [r2], #-360	; 0xfffffe98
2000a68c:	a4c3a5c3 	strbge	sl, [r3], #1475	; 0x5c3
2000a690:	7261b6c3 	rsbvc	fp, r1, #204472320	; 0xc300000
2000a694:	75732065 	ldrbvc	r2, [r3, #-101]!	; 0xffffff9b
2000a698:	00726567 	rsbseq	r6, r2, r7, ror #10

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000a4e 	andeq	r0, r0, lr, asr #20
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	0000008f 	andeq	r0, r0, pc, lsl #1
      10:	0005010c 	andeq	r0, r5, ip, lsl #2
	...
      20:	020c0200 	andeq	r0, ip, #0, 4
      24:	00004e05 	andeq	r4, r0, r5, lsl #28
      28:	034b0300 	movteq	r0, #45824	; 0xb300
      2c:	07020000 	streq	r0, [r2, -r0]
      30:	0000004e 	andeq	r0, r0, lr, asr #32
      34:	06e40300 	strbteq	r0, [r4], r0, lsl #6
      38:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      3c:	0000004e 	andeq	r0, r0, lr, asr #32
      40:	14df0304 	ldrbne	r0, [pc], #772	; 48 <startup-0x1fffffb8>
      44:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
      48:	00000055 	andeq	r0, r0, r5, asr r0
      4c:	04040008 	streq	r0, [r4], #-8
      50:	00036f07 	andeq	r6, r3, r7, lsl #30
      54:	5b040500 	blpl	10145c <startup-0x1fefeba4>
      58:	04000000 	streq	r0, [r0], #-0
      5c:	04ae0801 	strteq	r0, [lr], #2049	; 0x801
      60:	31060000 	mrscc	r0, (UNDEF: 6)
      64:	02000016 	andeq	r0, r0, #22
      68:	0000210a 	andeq	r2, r0, sl, lsl #2
      6c:	00240700 	eoreq	r0, r4, r0, lsl #14
      70:	030c0000 	movweq	r0, #49152	; 0xc000
      74:	00009e06 	andeq	r9, r0, r6, lsl #28
      78:	05a40300 	streq	r0, [r4, #768]!	; 0x300
      7c:	07030000 	streq	r0, [r3, -r0]
      80:	0000009e 	muleq	r0, lr, r0
      84:	002b0300 	eoreq	r0, fp, r0, lsl #6
      88:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
      8c:	0000009e 	muleq	r0, lr, r0
      90:	00200304 	eoreq	r0, r0, r4, lsl #6
      94:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
      98:	0000009e 	muleq	r0, lr, r0
      9c:	04050008 	streq	r0, [r5], #-8
      a0:	00000062 	andeq	r0, r0, r2, rrx
      a4:	000fff06 	andeq	pc, pc, r6, lsl #30
      a8:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
      ac:	07000000 	streq	r0, [r0, -r0]
      b0:	000006a9 	andeq	r0, r0, r9, lsr #13
      b4:	28060424 	stmdacs	r6, {r2, r5, sl}
      b8:	03000001 	movweq	r0, #1
      bc:	0000043c 	andeq	r0, r0, ip, lsr r4
      c0:	01280704 			; <UNDEFINED> instruction: 0x01280704
      c4:	03000000 	movweq	r0, #0
      c8:	000006b5 			; <UNDEFINED> instruction: 0x000006b5
      cc:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
      d0:	03040000 	movweq	r0, #16384	; 0x4000
      d4:	0000060f 	andeq	r0, r0, pc, lsl #12
      d8:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
      dc:	03080000 	movweq	r0, #32768	; 0x8000
      e0:	0000063b 	andeq	r0, r0, fp, lsr r6
      e4:	01460c04 	cmpeq	r6, r4, lsl #24
      e8:	030c0000 	movweq	r0, #49152	; 0xc000
      ec:	00000332 	andeq	r0, r0, r2, lsr r3
      f0:	01460d04 	cmpeq	r6, r4, lsl #26
      f4:	03100000 	tsteq	r0, #0
      f8:	0000044e 	andeq	r0, r0, lr, asr #8
      fc:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
     100:	03140000 	tsteq	r4, #0
     104:	00000060 	andeq	r0, r0, r0, rrx
     108:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
     10c:	03180000 	tsteq	r8, #0
     110:	000003bf 			; <UNDEFINED> instruction: 0x000003bf
     114:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
     118:	031c0000 	tsteq	ip, #0
     11c:	000003cf 	andeq	r0, r0, pc, asr #7
     120:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
     124:	00200000 	eoreq	r0, r0, r0
     128:	00a40405 	adceq	r0, r4, r5, lsl #8
     12c:	04080000 	streq	r0, [r8], #-0
     130:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     134:	01400900 	cmpeq	r0, r0, lsl #18
     138:	400a0000 	andmi	r0, sl, r0
     13c:	00000001 	andeq	r0, r0, r1
     140:	00af0405 	adceq	r0, pc, r5, lsl #8
     144:	04050000 	streq	r0, [r5], #-0
     148:	00000135 	andeq	r0, r0, r5, lsr r1
     14c:	0006aa06 	andeq	sl, r6, r6, lsl #20
     150:	af150400 	svcge	0x00150400
     154:	0b000000 	bleq	15c <startup-0x1ffffea4>
     158:	00000162 	andeq	r0, r0, r2, ror #2
     15c:	00000162 	andeq	r0, r0, r2, ror #2
     160:	0405000c 	streq	r0, [r5], #-12
     164:	0000014c 	andeq	r0, r0, ip, asr #2
     168:	0005310d 	andeq	r3, r5, sp, lsl #2
     16c:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
     170:	0d000001 	stceq	0, cr0, [r0, #-4]
     174:	0000040a 	andeq	r0, r0, sl, lsl #8
     178:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
     17c:	6d060000 	stcvs	0, cr0, [r6, #-0]
     180:	05000006 	streq	r0, [r0, #-6]
     184:	00005b24 	andeq	r5, r0, r4, lsr #22
     188:	017e0b00 	cmneq	lr, r0, lsl #22
     18c:	019a0000 	orrseq	r0, sl, r0
     190:	9a0e0000 	bls	380198 <startup-0x1fc7fe68>
     194:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     198:	04040003 	streq	r0, [r4], #-3
     19c:	0003ec07 	andeq	lr, r3, r7, lsl #24
     1a0:	14150d00 	ldrne	r0, [r5], #-3328	; 0xfffff300
     1a4:	2b050000 	blcs	1401ac <startup-0x1febfe54>
     1a8:	00000189 	andeq	r0, r0, r9, lsl #3
     1ac:	0002380d 	andeq	r3, r2, sp, lsl #16
     1b0:	892c0500 	stmdbhi	ip!, {r8, sl}
     1b4:	0d000001 	stceq	0, cr0, [r0, #-4]
     1b8:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
     1bc:	01892d05 	orreq	r2, r9, r5, lsl #26
     1c0:	510d0000 	mrspl	r0, (UNDEF: 13)
     1c4:	05000003 	streq	r0, [r0, #-3]
     1c8:	0001892e 	andeq	r8, r1, lr, lsr #18
     1cc:	02c00d00 	sbceq	r0, r0, #0, 26
     1d0:	2f050000 	svccs	0x00050000
     1d4:	00000189 	andeq	r0, r0, r9, lsl #3
     1d8:	00068b0d 	andeq	r8, r6, sp, lsl #22
     1dc:	89300500 	ldmdbhi	r0!, {r8, sl}
     1e0:	0d000001 	stceq	0, cr0, [r0, #-4]
     1e4:	0000067b 	andeq	r0, r0, fp, ror r6
     1e8:	01893105 	orreq	r3, r9, r5, lsl #2
     1ec:	5b0b0000 	blpl	2c01f4 <startup-0x1fd3fe0c>
     1f0:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
     1f4:	0f000001 	svceq	0x00000001
     1f8:	0000019a 	muleq	r0, sl, r1
     1fc:	83100077 	tsthi	r0, #119	; 0x77
     200:	06000002 	streq	r0, [r0], -r2
     204:	0001ee03 	andeq	lr, r1, r3, lsl #28
     208:	00030500 	andeq	r0, r3, r0, lsl #10
     20c:	11200065 			; <UNDEFINED> instruction: 0x11200065
     210:	000004d3 	ldrdeq	r0, [r0], -r3
     214:	01ee0307 	mvneq	r0, r7, lsl #6
     218:	03050000 	movweq	r0, #20480	; 0x5000
     21c:	20006578 	andcs	r6, r0, r8, ror r5
     220:	0005af11 	andeq	sl, r5, r1, lsl pc
     224:	ee030800 	cdp	8, 0, cr0, cr3, cr0, {0}
     228:	05000001 	streq	r0, [r0, #-1]
     22c:	0065f003 	rsbeq	pc, r5, r3
     230:	005b0b20 	subseq	r0, fp, r0, lsr #22
     234:	02420000 	subeq	r0, r2, #0
     238:	9a0e0000 	bls	380240 <startup-0x1fc7fdc0>
     23c:	17000001 	strne	r0, [r0, -r1]
     240:	5c110001 	ldcpl	0, cr0, [r1], {1}
     244:	09000001 	stmdbeq	r0, {r0}
     248:	00023103 	andeq	r3, r2, r3, lsl #2
     24c:	68030500 	stmdavs	r3, {r8, sl}
     250:	11200066 			; <UNDEFINED> instruction: 0x11200066
     254:	00000417 	andeq	r0, r0, r7, lsl r4
     258:	0231030a 	eorseq	r0, r1, #671088640	; 0x28000000
     25c:	03050000 	movweq	r0, #20480	; 0x5000
     260:	20006780 	andcs	r6, r0, r0, lsl #15
     264:	0003a411 	andeq	sl, r3, r1, lsl r4
     268:	31030b00 	tstcc	r3, r0, lsl #22
     26c:	05000002 	streq	r0, [r0, #-2]
     270:	00689803 	rsbeq	r9, r8, r3, lsl #16
     274:	005b0b20 	subseq	r0, fp, r0, lsr #22
     278:	02860000 	addeq	r0, r6, #0
     27c:	9a0e0000 	bls	380284 <startup-0x1fc7fd7c>
     280:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     284:	e6110003 	ldr	r0, [r1], -r3
     288:	0c000004 	stceq	0, cr0, [r0], {4}
     28c:	00027503 	andeq	r7, r2, r3, lsl #10
     290:	b0030500 	andlt	r0, r3, r0, lsl #10
     294:	11200069 			; <UNDEFINED> instruction: 0x11200069
     298:	00000035 	andeq	r0, r0, r5, lsr r0
     29c:	0275030d 	rsbseq	r0, r5, #872415232	; 0x34000000
     2a0:	03050000 	movweq	r0, #20480	; 0x5000
     2a4:	20006db0 			; <UNDEFINED> instruction: 0x20006db0
     2a8:	00000011 	andeq	r0, r0, r1, lsl r0
     2ac:	75030e00 	strvc	r0, [r3, #-3584]	; 0xfffff200
     2b0:	05000002 	streq	r0, [r0, #-2]
     2b4:	0071b003 	rsbseq	fp, r1, r3
     2b8:	005b0b20 	subseq	r0, fp, r0, lsr #22
     2bc:	02c90000 	sbceq	r0, r9, #0
     2c0:	9a0f0000 	bls	3c02c8 <startup-0x1fc3fd38>
     2c4:	d1000001 	tstle	r0, r1
     2c8:	01ae1100 			; <UNDEFINED> instruction: 0x01ae1100
     2cc:	030f0000 	movweq	r0, #61440	; 0xf000
     2d0:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
     2d4:	75b00305 	ldrvc	r0, [r0, #773]!	; 0x305
     2d8:	f5112000 			; <UNDEFINED> instruction: 0xf5112000
     2dc:	10000003 	andne	r0, r0, r3
     2e0:	0002b903 	andeq	fp, r2, r3, lsl #18
     2e4:	84030500 	strhi	r0, [r3], #-1280	; 0xfffffb00
     2e8:	11200076 			; <UNDEFINED> instruction: 0x11200076
     2ec:	00000210 	andeq	r0, r0, r0, lsl r2
     2f0:	02b90311 	adcseq	r0, r9, #1140850688	; 0x44000000
     2f4:	03050000 	movweq	r0, #20480	; 0x5000
     2f8:	20007758 	andcs	r7, r0, r8, asr r7
     2fc:	00066307 	andeq	r6, r6, r7, lsl #6
     300:	04121400 	ldreq	r1, [r2], #-1024	; 0xfffffc00
     304:	00000345 	andeq	r0, r0, r5, asr #6
     308:	0018a403 	andseq	sl, r8, r3, lsl #8
     30c:	45051200 	strmi	r1, [r5, #-512]	; 0xfffffe00
     310:	00000003 	andeq	r0, r0, r3
     314:	00027603 	andeq	r7, r2, r3, lsl #12
     318:	45061200 	strmi	r1, [r6, #-512]	; 0xfffffe00
     31c:	04000003 	streq	r0, [r0], #-3
     320:	0003d903 	andeq	sp, r3, r3, lsl #18
     324:	2e081200 	cdpcs	2, 0, cr1, cr8, cr0, {0}
     328:	08000001 	stmdaeq	r0, {r0}
     32c:	0003c903 	andeq	ip, r3, r3, lsl #18
     330:	2e091200 	cdpcs	2, 0, cr1, cr9, cr0, {0}
     334:	0c000001 	stceq	0, cr0, [r0], {1}
     338:	00027b03 	andeq	r7, r2, r3, lsl #22
     33c:	680c1200 	stmdavs	ip, {r9, ip}
     340:	10000003 	andne	r0, r0, r3
     344:	4b040500 	blmi	10174c <startup-0x1fefe8b4>
     348:	04000003 	streq	r0, [r0], #-3
     34c:	04b70801 	ldrteq	r0, [r7], #2049	; 0x801
     350:	62090000 	andvs	r0, r9, #0
     354:	0a000003 	beq	368 <startup-0x1ffffc98>
     358:	00000362 	andeq	r0, r0, r2, ror #6
     35c:	00012e0a 	andeq	r2, r1, sl, lsl #28
     360:	04050000 	streq	r0, [r5], #-0
     364:	000002fc 	strdeq	r0, [r0], -ip
     368:	03520405 	cmpeq	r2, #83886080	; 0x5000000
     36c:	64060000 	strvs	r0, [r6], #-0
     370:	12000006 	andne	r0, r0, #6
     374:	0002fc0d 	andeq	pc, r2, sp, lsl #24
     378:	059c1100 	ldreq	r1, [ip, #256]	; 0x100
     37c:	03130000 	tsteq	r3, #0
     380:	00000275 	andeq	r0, r0, r5, ror r2
     384:	782c0305 	stmdavc	ip!, {r0, r2, r8, r9}
     388:	02042000 	andeq	r2, r4, #0
     38c:	00036907 	andeq	r6, r3, r7, lsl #18
     390:	05d91000 	ldrbeq	r1, [r9]
     394:	22010000 	andcs	r0, r1, #0
     398:	0000012e 	andeq	r0, r0, lr, lsr #2
     39c:	3fb40305 	svccc	0x00b40305
     3a0:	27102000 	ldrcs	r2, [r0, -r0]
     3a4:	01000001 	tsteq	r0, r1
     3a8:	00009e3a 	andeq	r9, r0, sl, lsr lr
     3ac:	fc030500 	stc2	5, cr0, [r3], {-0}
     3b0:	1020003e 	eorne	r0, r0, lr, lsr r0
     3b4:	000001a1 	andeq	r0, r0, r1, lsr #3
     3b8:	009e3b01 	addseq	r3, lr, r1, lsl #22
     3bc:	03050000 	movweq	r0, #20480	; 0x5000
     3c0:	20003fa8 	andcs	r3, r0, r8, lsr #31
     3c4:	00054810 	andeq	r4, r5, r0, lsl r8
     3c8:	9e3c0100 	rsflse	f0, f4, f0
     3cc:	05000000 	streq	r0, [r0, #-0]
     3d0:	003fbc03 	eorseq	fp, pc, r3, lsl #24
     3d4:	67621220 	strbvs	r1, [r2, -r0, lsr #4]!
     3d8:	9e3d0100 	rsflse	f0, f5, f0
     3dc:	05000000 	streq	r0, [r0, #-0]
     3e0:	003f4403 	eorseq	r4, pc, r3, lsl #8
     3e4:	06ba1020 	ldrteq	r1, [sl], r0, lsr #32
     3e8:	40010000 	andmi	r0, r1, r0
     3ec:	0000009e 	muleq	r0, lr, r0
     3f0:	3f240305 	svccc	0x00240305
     3f4:	3d102000 	ldccc	0, cr2, [r0, #-0]
     3f8:	01000005 	tsteq	r0, r5
     3fc:	00009e41 	andeq	r9, r0, r1, asr #28
     400:	b0030500 	andlt	r0, r3, r0, lsl #10
     404:	1020003f 	eorne	r0, r0, pc, lsr r0
     408:	00000069 	andeq	r0, r0, r9, rrx
     40c:	009e4201 	addseq	r4, lr, r1, lsl #4
     410:	03050000 	movweq	r0, #20480	; 0x5000
     414:	20003f60 	andcs	r3, r0, r0, ror #30
     418:	00039910 	andeq	r9, r3, r0, lsl r9
     41c:	9e430100 	dvflss	f0, f3, f0
     420:	05000000 	streq	r0, [r0, #-0]
     424:	003fcc03 	eorseq	ip, pc, r3, lsl #24
     428:	05541020 	ldrbeq	r1, [r4, #-32]	; 0xffffffe0
     42c:	44010000 	strmi	r0, [r1], #-0
     430:	0000009e 	muleq	r0, lr, r0
     434:	3f980305 	svccc	0x00980305
     438:	5c102000 	ldcpl	0, cr2, [r0], {-0}
     43c:	01000004 	tsteq	r0, r4
     440:	00009e45 	andeq	r9, r0, r5, asr #28
     444:	ac030500 	cfstr32ge	mvfx0, [r3], {-0}
     448:	1020003f 	eorne	r0, r0, pc, lsr r0
     44c:	000005f7 	strdeq	r0, [r0], -r7
     450:	009e4601 	addseq	r4, lr, r1, lsl #12
     454:	03050000 	movweq	r0, #20480	; 0x5000
     458:	20003fb8 			; <UNDEFINED> instruction: 0x20003fb8
     45c:	0001d510 	andeq	sp, r1, r0, lsl r5
     460:	9e470100 	dvflss	f0, f7, f0
     464:	05000000 	streq	r0, [r0, #-0]
     468:	003f7c03 	eorseq	r7, pc, r3, lsl #24
     46c:	06f01020 	ldrbteq	r1, [r0], r0, lsr #32
     470:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
     474:	0000009e 	muleq	r0, lr, r0
     478:	3f340305 	svccc	0x00340305
     47c:	8d102000 	ldchi	0, cr2, [r0, #-0]
     480:	01000003 	tsteq	r0, r3
     484:	0000624a 	andeq	r6, r0, sl, asr #4
     488:	28030500 	stmdacs	r3, {r8, sl}
     48c:	1020003f 	eorne	r0, r0, pc, lsr r0
     490:	00000221 	andeq	r0, r0, r1, lsr #4
     494:	00624b01 	rsbeq	r4, r2, r1, lsl #22
     498:	03050000 	movweq	r0, #20480	; 0x5000
     49c:	20003f80 	andcs	r3, r0, r0, lsl #31
     4a0:	0001bf10 	andeq	fp, r1, r0, lsl pc
     4a4:	624c0100 	subvs	r0, ip, #0, 2
     4a8:	05000000 	streq	r0, [r0, #-0]
     4ac:	003f4803 	eorseq	r4, pc, r3, lsl #16
     4b0:	01fd1020 	mvnseq	r1, r0, lsr #32
     4b4:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
     4b8:	00000062 	andeq	r0, r0, r2, rrx
     4bc:	3fc00305 	svccc	0x00c00305
     4c0:	7f102000 	svcvc	0x00102000
     4c4:	01000000 	mrseq	r0, (UNDEF: 0)
     4c8:	00006250 	andeq	r6, r0, r0, asr r2
     4cc:	00030500 	andeq	r0, r3, r0, lsl #10
     4d0:	1020003f 	eorne	r0, r0, pc, lsr r0
     4d4:	00000490 	muleq	r0, r0, r4
     4d8:	00625101 	rsbeq	r5, r2, r1, lsl #2
     4dc:	03050000 	movweq	r0, #20480	; 0x5000
     4e0:	20003f9c 	mulcs	r0, ip, pc	; <UNPREDICTABLE>
     4e4:	00032210 	andeq	r2, r3, r0, lsl r2
     4e8:	62520100 	subsvs	r0, r2, #0, 2
     4ec:	05000000 	streq	r0, [r0, #-0]
     4f0:	003f7003 	eorseq	r7, pc, r3
     4f4:	049f1020 	ldreq	r1, [pc], #32	; 4fc <startup-0x1ffffb04>
     4f8:	53010000 	movwpl	r0, #4096	; 0x1000
     4fc:	00000062 	andeq	r0, r0, r2, rrx
     500:	3f380305 	svccc	0x00380305
     504:	55102000 	ldrpl	r2, [r0, #-0]
     508:	01000006 	tsteq	r0, r6
     50c:	00006254 	andeq	r6, r0, r4, asr r2
     510:	18030500 	stmdane	r3, {r8, sl}
     514:	1020003f 	eorne	r0, r0, pc, lsr r0
     518:	0000062c 	andeq	r0, r0, ip, lsr #12
     51c:	00625501 	rsbeq	r5, r2, r1, lsl #10
     520:	03050000 	movweq	r0, #20480	; 0x5000
     524:	20003f54 	andcs	r3, r0, r4, asr pc
     528:	00058d10 	andeq	r8, r5, r0, lsl sp
     52c:	62560100 	subsvs	r0, r6, #0, 2
     530:	05000000 	streq	r0, [r0, #-0]
     534:	003f8c03 	eorseq	r8, pc, r3, lsl #24
     538:	04671020 	strbteq	r1, [r7], #-32	; 0xffffffe0
     53c:	57010000 	strpl	r0, [r1, -r0]
     540:	00000062 	andeq	r0, r0, r2, rrx
     544:	3f0c0305 	svccc	0x000c0305
     548:	9a102000 	bls	408550 <startup-0x1fbf7ab0>
     54c:	01000006 	tsteq	r0, r6
     550:	00006258 	andeq	r6, r0, r8, asr r2
     554:	64030500 	strvs	r0, [r3], #-1280	; 0xfffffb00
     558:	1020003f 	eorne	r0, r0, pc, lsr r0
     55c:	000003d9 	ldrdeq	r0, [r0], -r9
     560:	012e8e01 			; <UNDEFINED> instruction: 0x012e8e01
     564:	03050000 	movweq	r0, #20480	; 0x5000
     568:	20003eb4 			; <UNDEFINED> instruction: 0x20003eb4
     56c:	00056910 	andeq	r6, r5, r0, lsl r9
     570:	2e8f0100 	rmfcse	f0, f7, f0
     574:	05000001 	streq	r0, [r0, #-1]
     578:	007c2c03 	rsbseq	r2, ip, r3, lsl #24
     57c:	62611320 	rsbvs	r1, r1, #32, 6	; 0x80000000
     580:	2e010073 	mcrcs	0, 0, r0, cr1, cr3, {3}
     584:	00012e02 	andeq	r2, r1, r2, lsl #28
     588:	00150c00 	andseq	r0, r5, r0, lsl #24
     58c:	00001e20 	andeq	r1, r0, r0, lsr #28
     590:	a79c0100 	ldrge	r0, [ip, r0, lsl #2]
     594:	14000005 	strne	r0, [r0], #-5
     598:	0000061f 	andeq	r0, r0, pc, lsl r6
     59c:	2e022e01 	cdpcs	14, 0, cr2, cr2, cr1, {0}
     5a0:	02000001 	andeq	r0, r0, #1
     5a4:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
     5a8:	000006eb 	andeq	r0, r0, fp, ror #13
     5ac:	01fc9001 	mvnseq	r9, r1
     5b0:	13102000 	tstne	r0, #0
     5b4:	9c010000 	stcls	0, cr0, [r1], {-0}
     5b8:	0000096d 	andeq	r0, r0, sp, ror #18
     5bc:	0003e111 	andeq	lr, r3, r1, lsl r1
     5c0:	4c960100 	ldfmis	f0, [r6], {0}
     5c4:	03000001 	movweq	r0, #1
     5c8:	117fb891 			; <UNDEFINED> instruction: 0x117fb891
     5cc:	00000602 	andeq	r0, r0, r2, lsl #12
     5d0:	00a49701 	adceq	r9, r4, r1, lsl #14
     5d4:	91030000 	mrsls	r0, (UNDEF: 3)
     5d8:	fb117fac 	blx	460492 <startup-0x1fb9fb6e>
     5dc:	01000006 	tsteq	r0, r6
     5e0:	00096d98 	muleq	r9, r8, sp
     5e4:	a0910300 	addsge	r0, r1, r0, lsl #6
     5e8:	04f8117f 	ldrbteq	r1, [r8], #383	; 0x17f
     5ec:	a0010000 	andge	r0, r1, r0
     5f0:	0000014c 	andeq	r0, r0, ip, asr #2
     5f4:	7efc9103 	nrmvce	f1, f3
     5f8:	00018811 	andeq	r8, r1, r1, lsl r8
     5fc:	a4a10100 	strtge	r0, [r1], #256	; 0x100
     600:	03000000 	movweq	r0, #0
     604:	117ef091 			; <UNDEFINED> instruction: 0x117ef091
     608:	000005cd 	andeq	r0, r0, sp, asr #11
     60c:	096da201 	stmdbeq	sp!, {r0, r9, sp, pc}^
     610:	91030000 	mrsls	r0, (UNDEF: 3)
     614:	a9117ee4 	ldmdbge	r1, {r2, r5, r6, r7, r9, sl, fp, ip, sp, lr}
     618:	01000002 	tsteq	r0, r2
     61c:	00014ca9 	andeq	r4, r1, r9, lsr #25
     620:	c0910300 	addsgt	r0, r1, r0, lsl #6
     624:	0431117e 	ldrteq	r1, [r1], #-382	; 0xfffffe82
     628:	aa010000 	bge	40630 <startup-0x1ffbf9d0>
     62c:	000000a4 	andeq	r0, r0, r4, lsr #1
     630:	7eb49103 	asnvcs	f1, f3
     634:	00064911 	andeq	r4, r6, r1, lsl r9
     638:	6dab0100 	stfvss	f0, [fp]
     63c:	03000009 	movweq	r0, #9
     640:	117ea891 			; <UNDEFINED> instruction: 0x117ea891
     644:	00000144 	andeq	r0, r0, r4, asr #2
     648:	014cb201 	cmpeq	ip, r1, lsl #4
     64c:	91030000 	mrsls	r0, (UNDEF: 3)
     650:	c1117e84 	tstgt	r1, r4, lsl #29
     654:	01000005 	tsteq	r0, r5
     658:	0000a4b3 			; <UNDEFINED> instruction: 0x0000a4b3
     65c:	f8910300 			; <UNDEFINED> instruction: 0xf8910300
     660:	017b117d 	cmneq	fp, sp, ror r1
     664:	b4010000 	strlt	r0, [r1], #-0
     668:	0000096d 	andeq	r0, r0, sp, ror #18
     66c:	7dec9103 	stfvcp	f1, [ip, #12]!
     670:	00017311 	andeq	r7, r1, r1, lsl r3
     674:	4cbb0100 	ldfmis	f0, [fp]
     678:	03000001 	movweq	r0, #1
     67c:	117dc891 			; <UNDEFINED> instruction: 0x117dc891
     680:	00001a73 	andeq	r1, r0, r3, ror sl
     684:	014cc001 	cmpeq	ip, r1
     688:	91030000 	mrsls	r0, (UNDEF: 3)
     68c:	09117da4 	ldmdbeq	r1, {r2, r5, r7, r8, sl, fp, ip, sp, lr}
     690:	01000003 	tsteq	r0, r3
     694:	00014cc5 	andeq	r4, r1, r5, asr #25
     698:	80910300 	addshi	r0, r1, r0, lsl #6
     69c:	02dd167d 	sbcseq	r1, sp, #131072000	; 0x7d00000
     6a0:	c6010000 	strgt	r0, [r1], -r0
     6a4:	0000012e 	andeq	r0, r0, lr, lsr #2
     6a8:	000006ae 	andeq	r0, r0, lr, lsr #13
     6ac:	05110017 	ldreq	r0, [r1, #-23]	; 0xffffffe9
     6b0:	01000004 	tsteq	r0, r4
     6b4:	00014cc9 	andeq	r4, r1, r9, asr #25
     6b8:	dc910300 	ldcle	3, cr0, [r1], {0}
     6bc:	03b4167c 			; <UNDEFINED> instruction: 0x03b4167c
     6c0:	ca010000 	bgt	406c8 <startup-0x1ffbf938>
     6c4:	0000012e 	andeq	r0, r0, lr, lsr #2
     6c8:	000006ce 	andeq	r0, r0, lr, asr #13
     6cc:	e5110017 	ldr	r0, [r1, #-23]	; 0xffffffe9
     6d0:	0100000c 	tsteq	r0, ip
     6d4:	00014ccf 	andeq	r4, r1, pc, asr #25
     6d8:	b8910300 	ldmlt	r1, {r8, r9}
     6dc:	4944187c 	stmdbmi	r4, {r2, r3, r4, r5, r6, fp, ip}^
     6e0:	d5010050 	strle	r0, [r1, #-80]	; 0xffffffb0
     6e4:	0000014c 	andeq	r0, r0, ip, asr #2
     6e8:	7c949103 	ldfvcd	f1, [r4], {3}
     6ec:	00004611 	andeq	r4, r0, r1, lsl r6
     6f0:	4cd90100 	ldfmie	f0, [r9], {0}
     6f4:	03000001 	movweq	r0, #1
     6f8:	117bf091 			; <UNDEFINED> instruction: 0x117bf091
     6fc:	000005e5 	andeq	r0, r0, r5, ror #11
     700:	014cdf01 	cmpeq	ip, r1, lsl #30
     704:	91030000 	mrsls	r0, (UNDEF: 3)
     708:	eb117bcc 	bl	45f640 <startup-0x1fba09c0>
     70c:	01000005 	tsteq	r0, r5
     710:	00014ce1 	andeq	r4, r1, r1, ror #25
     714:	a8910300 	ldmge	r1, {r8, r9}
     718:	05f1117b 	ldrbeq	r1, [r1, #379]!	; 0x17b
     71c:	e3010000 	movw	r0, #4096	; 0x1000
     720:	0000014c 	andeq	r0, r0, ip, asr #2
     724:	7b849103 	blvc	fe124b38 <firstTime.4040+0xde11a67c>
     728:	0001eb11 	andeq	lr, r1, r1, lsl fp
     72c:	4ce50100 	stfmie	f0, [r5]
     730:	03000001 	movweq	r0, #1
     734:	117ae091 			; <UNDEFINED> instruction: 0x117ae091
     738:	0000016d 	andeq	r0, r0, sp, ror #2
     73c:	014ce801 	cmpeq	ip, r1, lsl #16
     740:	91030000 	mrsls	r0, (UNDEF: 3)
     744:	b2117abc 	andslt	r7, r1, #188, 20	; 0xbc000
     748:	01000002 	tsteq	r0, r2
     74c:	00014ced 	andeq	r4, r1, sp, ror #25
     750:	98910300 	ldmls	r1, {r8, r9}
     754:	0012117a 	andseq	r1, r2, sl, ror r1
     758:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
     75c:	0000014c 	andeq	r0, r0, ip, asr #2
     760:	79f49103 	ldmibvc	r4!, {r0, r1, r8, ip, pc}^
     764:	00067511 	andeq	r7, r6, r1, lsl r5
     768:	7df30100 	ldfvce	f0, [r3]
     76c:	03000009 	movweq	r0, #9
     770:	19798891 	ldmdbne	r9!, {r0, r4, r7, fp, pc}^
     774:	0000004d 	andeq	r0, r0, sp, asr #32
     778:	6e010b01 	vmlavs.f64	d0, d1, d1
     77c:	03000003 	movweq	r0, #3
     780:	1978f491 	ldmdbne	r8!, {r0, r4, r7, sl, ip, sp, lr, pc}^
     784:	0000019b 	muleq	r0, fp, r1
     788:	6e010c01 	cdpvs	12, 0, cr0, cr1, cr1, {0}
     78c:	03000003 	movweq	r0, #3
     790:	1978e091 	ldmdbne	r8!, {r0, r4, r7, sp, lr, pc}^
     794:	000001cf 	andeq	r0, r0, pc, asr #3
     798:	6e010d01 	cdpvs	13, 0, cr0, cr1, cr1, {0}
     79c:	03000003 	movweq	r0, #3
     7a0:	1978cc91 	ldmdbne	r8!, {r0, r4, r7, sl, fp, lr, pc}^
     7a4:	00000204 	andeq	r0, r0, r4, lsl #4
     7a8:	6e010e01 	cdpvs	14, 0, cr0, cr1, cr1, {0}
     7ac:	03000003 	movweq	r0, #3
     7b0:	1978b891 	ldmdbne	r8!, {r0, r4, r7, fp, ip, sp, pc}^
     7b4:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     7b8:	6e010f01 	cdpvs	15, 0, cr0, cr1, cr1, {0}
     7bc:	03000003 	movweq	r0, #3
     7c0:	1978a491 	ldmdbne	r8!, {r0, r4, r7, sl, sp, pc}^
     7c4:	000001e5 	andeq	r0, r0, r5, ror #3
     7c8:	6e011001 	cdpvs	0, 0, cr1, cr1, cr1, {0}
     7cc:	03000003 	movweq	r0, #3
     7d0:	19789091 	ldmdbne	r8!, {r0, r4, r7, ip, pc}^
     7d4:	0000024a 	andeq	r0, r0, sl, asr #4
     7d8:	6e011101 	adfvss	f1, f1, f1
     7dc:	03000003 	movweq	r0, #3
     7e0:	1977fc91 	ldmdbne	r7!, {r0, r4, r7, sl, fp, ip, sp, lr, pc}^
     7e4:	00000232 	andeq	r0, r0, r2, lsr r2
     7e8:	6e011201 	cdpvs	2, 0, cr1, cr1, cr1, {0}
     7ec:	03000003 	movweq	r0, #3
     7f0:	1977e891 	ldmdbne	r7!, {r0, r4, r7, fp, sp, lr, pc}^
     7f4:	0000020a 	andeq	r0, r0, sl, lsl #4
     7f8:	6e011301 	cdpvs	3, 0, cr1, cr1, cr1, {0}
     7fc:	03000003 	movweq	r0, #3
     800:	1977d491 	ldmdbne	r7!, {r0, r4, r7, sl, ip, lr, pc}^
     804:	00000250 	andeq	r0, r0, r0, asr r2
     808:	6e011401 	cdpvs	4, 0, cr1, cr1, cr1, {0}
     80c:	03000003 	movweq	r0, #3
     810:	1977c091 	ldmdbne	r7!, {r0, r4, r7, lr, pc}^
     814:	000006d6 	ldrdeq	r0, [r0], -r6
     818:	6e011501 	cfsh32vs	mvfx1, mvfx1, #1
     81c:	03000003 	movweq	r0, #3
     820:	1977ac91 	ldmdbne	r7!, {r0, r4, r7, sl, fp, sp, pc}^
     824:	000006dd 	ldrdeq	r0, [r0], -sp
     828:	6e011601 	cfmadd32vs	mvax0, mvfx1, mvfx1, mvfx1
     82c:	03000003 	movweq	r0, #3
     830:	19779891 	ldmdbne	r7!, {r0, r4, r7, fp, ip, pc}^
     834:	00000625 	andeq	r0, r0, r5, lsr #12
     838:	6e011701 	cdpvs	7, 0, cr1, cr1, cr1, {0}
     83c:	03000003 	movweq	r0, #3
     840:	19778491 	ldmdbne	r7!, {r0, r4, r7, sl, pc}^
     844:	0000012f 	andeq	r0, r0, pc, lsr #2
     848:	2e012a01 	vmlacs.f32	s4, s2, s2
     84c:	02000001 	andeq	r0, r0, #1
     850:	f1196c91 			; <UNDEFINED> instruction: 0xf1196c91
     854:	01000001 	tsteq	r0, r1
     858:	012e012b 			; <UNDEFINED> instruction: 0x012e012b
     85c:	91020000 	mrsls	r0, (UNDEF: 2)
     860:	00561968 	subseq	r1, r6, r8, ror #18
     864:	2c010000 	stccs	0, cr0, [r1], {-0}
     868:	00012e01 	andeq	r2, r1, r1, lsl #28
     86c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     870:	0006c619 	andeq	ip, r6, r9, lsl r6
     874:	012d0100 			; <UNDEFINED> instruction: 0x012d0100
     878:	0000012e 	andeq	r0, r0, lr, lsr #2
     87c:	19609102 	stmdbne	r0!, {r1, r8, ip, pc}^
     880:	00000642 	andeq	r0, r0, r2, asr #12
     884:	2e012e01 	cdpcs	14, 0, cr2, cr1, cr1, {0}
     888:	02000001 	andeq	r0, r0, #1
     88c:	3e1a5c91 	mrccc	12, 0, r5, cr10, cr1, {4}
     890:	80200008 	eorhi	r0, r0, r8
     894:	1900000c 	stmdbne	r0, {r2, r3}
     898:	0000029f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
     89c:	2e015501 	cfsh32cs	mvfx5, mvfx1, #1
     8a0:	05000001 	streq	r0, [r0, #-1]
     8a4:	007c3403 	rsbseq	r3, ip, r3, lsl #8
     8a8:	04431920 	strbeq	r1, [r3], #-2336	; 0xfffff6e0
     8ac:	56010000 	strpl	r0, [r1], -r0
     8b0:	00012e01 	andeq	r2, r1, r1, lsl #28
     8b4:	38030500 	stmdacc	r3, {r8, sl}
     8b8:	1920007c 	stmdbne	r0!, {r2, r3, r4, r5, r6}
     8bc:	0000037c 	andeq	r0, r0, ip, ror r3
     8c0:	2e015701 	cdpcs	7, 0, cr5, cr1, cr1, {0}
     8c4:	05000001 	streq	r0, [r0, #-1]
     8c8:	007c3003 	rsbseq	r3, ip, r3
     8cc:	00691b20 	rsbeq	r1, r9, r0, lsr #22
     8d0:	2e01a101 	mvfcss	f2, f1
     8d4:	05000001 	streq	r0, [r0, #-1]
     8d8:	003eb803 	eorseq	fp, lr, r3, lsl #16
     8dc:	06141920 	ldreq	r1, [r4], -r0, lsr #18
     8e0:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
     8e4:	00012e01 	andeq	r2, r1, r1, lsl #28
     8e8:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
     8ec:	1920007c 	stmdbne	r0!, {r2, r3, r4, r5, r6}
     8f0:	00000578 	andeq	r0, r0, r8, ror r5
     8f4:	2e01d701 	cdpcs	7, 0, cr13, cr1, cr1, {0}
     8f8:	05000001 	streq	r0, [r0, #-1]
     8fc:	003ec003 	eorseq	ip, lr, r3
     900:	006a1b20 	rsbeq	r1, sl, r0, lsr #22
     904:	2e01d801 	cdpcs	8, 0, cr13, cr1, cr1, {0}
     908:	05000001 	streq	r0, [r0, #-1]
     90c:	003ebc03 	eorseq	fp, lr, r3, lsl #24
     910:	014e1920 	cmpeq	lr, r0, lsr #18
     914:	e1010000 	mrs	r0, (UNDEF: 1)
     918:	00012e01 	andeq	r2, r1, r1, lsl #28
     91c:	c8030500 	stmdagt	r3, {r8, sl}
     920:	1920003e 	stmdbne	r0!, {r1, r2, r3, r4, r5}
     924:	000002fb 	strdeq	r0, [r0], -fp
     928:	2e01e201 	cdpcs	2, 0, cr14, cr1, cr1, {0}
     92c:	05000001 	streq	r0, [r0, #-1]
     930:	003ec403 	eorseq	ip, lr, r3, lsl #8
     934:	055e1920 	ldrbeq	r1, [lr, #-2336]	; 0xfffff6e0
     938:	eb010000 	bl	40940 <startup-0x1ffbf6c0>
     93c:	00012e01 	andeq	r2, r1, r1, lsl #28
     940:	d0030500 	andle	r0, r3, r0, lsl #10
     944:	1920003e 	stmdbne	r0!, {r1, r2, r3, r4, r5}
     948:	00000339 	andeq	r0, r0, r9, lsr r3
     94c:	2e01ec01 	cdpcs	12, 0, cr14, cr1, cr1, {0}
     950:	05000001 	streq	r0, [r0, #-1]
     954:	003ecc03 	eorseq	ip, lr, r3, lsl #24
     958:	17e11920 	strbne	r1, [r1, r0, lsr #18]!
     95c:	05010000 	streq	r0, [r1, #-0]
     960:	00012e02 	andeq	r2, r1, r2, lsl #28
     964:	d4030500 	strle	r0, [r3], #-1280	; 0xfffffb00
     968:	0020003e 	eoreq	r0, r0, lr, lsr r0
     96c:	00a40b00 	adceq	r0, r4, r0, lsl #22
     970:	097d0000 	ldmdbeq	sp!, {}^	; <UNPREDICTABLE>
     974:	9a0f0000 	bls	3c097c <startup-0x1fc3f684>
     978:	00000001 	andeq	r0, r0, r1
     97c:	014c0b00 	cmpeq	ip, r0, lsl #22
     980:	098d0000 	stmibeq	sp, {}	; <UNPREDICTABLE>
     984:	9a0f0000 	bls	3c098c <startup-0x1fc3f674>
     988:	02000001 	andeq	r0, r0, #1
     98c:	04841500 	streq	r1, [r4], #1280	; 0x500
     990:	5a010000 	bpl	40998 <startup-0x1ffbf668>
     994:	20000034 	andcs	r0, r0, r4, lsr r0
     998:	000001c8 	andeq	r0, r0, r8, asr #3
     99c:	0a2f9c01 	beq	be79a8 <startup-0x1f418658>
     9a0:	75110000 	ldrvc	r0, [r1, #-0]
     9a4:	01000004 	tsteq	r0, r4
     9a8:	00009e5b 	andeq	r9, r0, fp, asr lr
     9ac:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     9b0:	00025611 	andeq	r5, r2, r1, lsl r6
     9b4:	9e5f0100 	rdflse	f0, f7, f0
     9b8:	02000000 	andeq	r0, r0, #0
     9bc:	66117091 			; <UNDEFINED> instruction: 0x66117091
     9c0:	01000002 	tsteq	r0, r2
     9c4:	00009e63 	andeq	r9, r0, r3, ror #28
     9c8:	6c910200 	lfmvs	f0, 4, [r1], {0}
     9cc:	00042811 	andeq	r2, r4, r1, lsl r8
     9d0:	9e670100 	powlss	f0, f7, f0
     9d4:	02000000 	andeq	r0, r0, #0
     9d8:	e9116891 	ldmdb	r1, {r0, r4, r7, fp, sp, lr}
     9dc:	01000002 	tsteq	r0, r2
     9e0:	00009e6b 	andeq	r9, r0, fp, ror #28
     9e4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     9e8:	0002f211 	andeq	pc, r2, r1, lsl r2	; <UNPREDICTABLE>
     9ec:	9e6f0100 	powlse	f0, f7, f0
     9f0:	02000000 	andeq	r0, r0, #0
     9f4:	3b116091 	blcc	458c40 <startup-0x1fba73c0>
     9f8:	01000001 	tsteq	r0, r1
     9fc:	00009e73 	andeq	r9, r0, r3, ror lr
     a00:	5c910200 	lfmpl	f0, 4, [r1], {0}
     a04:	00031011 	andeq	r1, r3, r1, lsl r0
     a08:	9e770100 	rpwlss	f0, f7, f0
     a0c:	02000000 	andeq	r0, r0, #0
     a10:	19115891 	ldmdbne	r1, {r0, r4, r7, fp, ip, lr}
     a14:	01000003 	tsteq	r0, r3
     a18:	00009e7a 	andeq	r9, r0, sl, ror lr
     a1c:	54910200 	ldrpl	r0, [r1], #512	; 0x200
     a20:	00007511 	andeq	r7, r0, r1, lsl r5
     a24:	9e7d0100 	rpwlse	f0, f5, f0
     a28:	02000000 	andeq	r0, r0, #0
     a2c:	1c005091 	stcne	0, cr5, [r0], {145}	; 0x91
     a30:	00000296 	muleq	r0, r6, r2
     a34:	00102601 	andseq	r2, r0, r1, lsl #12
     a38:	00242000 	eoreq	r2, r4, r0
     a3c:	9c010000 	stcls	0, cr0, [r1], {-0}
     a40:	0001931d 	andeq	r9, r1, sp, lsl r3
     a44:	00300100 	eorseq	r0, r0, r0, lsl #2
     a48:	0c200000 	stceq	0, cr0, [r0], #-0
     a4c:	01000000 	mrseq	r0, (UNDEF: 0)
     a50:	01e0009c 			; <UNDEFINED> instruction: 0x01e0009c
     a54:	00040000 	andeq	r0, r4, r0
     a58:	0000019e 	muleq	r0, lr, r1
     a5c:	008f0104 	addeq	r0, pc, r4, lsl #2
     a60:	1a0c0000 	bne	300a68 <startup-0x1fcff598>
     a64:	2c000007 	stccs	0, cr0, [r0], {7}
     a68:	56200015 			; <UNDEFINED> instruction: 0x56200015
     a6c:	8b000000 	blhi	a74 <startup-0x1ffff58c>
     a70:	02000003 	andeq	r0, r0, #3
     a74:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
     a78:	03000000 	movweq	r0, #0
     a7c:	0000034b 	andeq	r0, r0, fp, asr #6
     a80:	004e0702 	subeq	r0, lr, r2, lsl #14
     a84:	03000000 	movweq	r0, #0
     a88:	000006e4 	andeq	r0, r0, r4, ror #13
     a8c:	004e0802 	subeq	r0, lr, r2, lsl #16
     a90:	03040000 	movweq	r0, #16384	; 0x4000
     a94:	000014df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
     a98:	00550902 	subseq	r0, r5, r2, lsl #18
     a9c:	00080000 	andeq	r0, r8, r0
     aa0:	6f070404 	svcvs	0x00070404
     aa4:	05000003 	streq	r0, [r0, #-3]
     aa8:	00005b04 	andeq	r5, r0, r4, lsl #22
     aac:	08010400 	stmdaeq	r1, {sl}
     ab0:	000004ae 	andeq	r0, r0, lr, lsr #9
     ab4:	00163106 	andseq	r3, r6, r6, lsl #2
     ab8:	210a0200 	mrscs	r0, R10_fiq
     abc:	07000000 	streq	r0, [r0, -r0]
     ac0:	00000024 	andeq	r0, r0, r4, lsr #32
     ac4:	9e06030c 	cdpls	3, 0, cr0, cr6, cr12, {0}
     ac8:	03000000 	movweq	r0, #0
     acc:	000005a4 	andeq	r0, r0, r4, lsr #11
     ad0:	009e0703 	addseq	r0, lr, r3, lsl #14
     ad4:	03000000 	movweq	r0, #0
     ad8:	0000002b 	andeq	r0, r0, fp, lsr #32
     adc:	009e0803 	addseq	r0, lr, r3, lsl #16
     ae0:	03040000 	movweq	r0, #16384	; 0x4000
     ae4:	00000020 	andeq	r0, r0, r0, lsr #32
     ae8:	009e0903 	addseq	r0, lr, r3, lsl #18
     aec:	00080000 	andeq	r0, r8, r0
     af0:	00620405 	rsbeq	r0, r2, r5, lsl #8
     af4:	ff060000 			; <UNDEFINED> instruction: 0xff060000
     af8:	0300000f 	movweq	r0, #15
     afc:	00006d0a 	andeq	r6, r0, sl, lsl #26
     b00:	06a90700 	strteq	r0, [r9], r0, lsl #14
     b04:	04240000 	strteq	r0, [r4], #-0
     b08:	00012806 	andeq	r2, r1, r6, lsl #16
     b0c:	043c0300 	ldrteq	r0, [ip], #-768	; 0xfffffd00
     b10:	07040000 	streq	r0, [r4, -r0]
     b14:	00000128 	andeq	r0, r0, r8, lsr #2
     b18:	06b50300 	ldrteq	r0, [r5], r0, lsl #6
     b1c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     b20:	0000012e 	andeq	r0, r0, lr, lsr #2
     b24:	060f0304 	streq	r0, [pc], -r4, lsl #6
     b28:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
     b2c:	0000012e 	andeq	r0, r0, lr, lsr #2
     b30:	063b0308 	ldrteq	r0, [fp], -r8, lsl #6
     b34:	0c040000 	stceq	0, cr0, [r4], {-0}
     b38:	00000146 	andeq	r0, r0, r6, asr #2
     b3c:	0332030c 	teqeq	r2, #12, 6	; 0x30000000
     b40:	0d040000 	stceq	0, cr0, [r4, #-0]
     b44:	00000146 	andeq	r0, r0, r6, asr #2
     b48:	044e0310 	strbeq	r0, [lr], #-784	; 0xfffffcf0
     b4c:	10040000 	andne	r0, r4, r0
     b50:	0000012e 	andeq	r0, r0, lr, lsr #2
     b54:	00600314 	rsbeq	r0, r0, r4, lsl r3
     b58:	11040000 	mrsne	r0, (UNDEF: 4)
     b5c:	0000012e 	andeq	r0, r0, lr, lsr #2
     b60:	03bf0318 			; <UNDEFINED> instruction: 0x03bf0318
     b64:	12040000 	andne	r0, r4, #0
     b68:	0000012e 	andeq	r0, r0, lr, lsr #2
     b6c:	03cf031c 	biceq	r0, pc, #28, 6	; 0x70000000
     b70:	13040000 	movwne	r0, #16384	; 0x4000
     b74:	0000012e 	andeq	r0, r0, lr, lsr #2
     b78:	04050020 	streq	r0, [r5], #-32	; 0xffffffe0
     b7c:	000000a4 	andeq	r0, r0, r4, lsr #1
     b80:	69050408 	stmdbvs	r5, {r3, sl}
     b84:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     b88:	00000140 	andeq	r0, r0, r0, asr #2
     b8c:	0001400a 	andeq	r4, r1, sl
     b90:	04050000 	streq	r0, [r5], #-0
     b94:	000000af 	andeq	r0, r0, pc, lsr #1
     b98:	01350405 	teqeq	r5, r5, lsl #8
     b9c:	aa060000 	bge	180ba4 <startup-0x1fe7f45c>
     ba0:	04000006 	streq	r0, [r0], #-6
     ba4:	0000af15 	andeq	sl, r0, r5, lsl pc
     ba8:	01620b00 	cmneq	r2, r0, lsl #22
     bac:	01620000 	cmneq	r2, r0
     bb0:	000c0000 	andeq	r0, ip, r0
     bb4:	014c0405 	cmpeq	ip, r5, lsl #8
     bb8:	310d0000 	mrscc	r0, (UNDEF: 13)
     bbc:	04000005 	streq	r0, [r0], #-5
     bc0:	0001571c 	andeq	r5, r1, ip, lsl r7
     bc4:	040a0d00 	streq	r0, [sl], #-3328	; 0xfffff300
     bc8:	1d040000 	stcne	0, cr0, [r4, #-0]
     bcc:	0000012e 	andeq	r0, r0, lr, lsr #2
     bd0:	ec070404 	cfstrs	mvf0, [r7], {4}
     bd4:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
     bd8:	00000168 	andeq	r0, r0, r8, ror #2
     bdc:	03050301 	movweq	r0, #21249	; 0x5301
     be0:	20003fd0 	ldrdcs	r3, [r0], -r0
     be4:	0001730e 	andeq	r7, r1, lr, lsl #6
     be8:	05040100 	streq	r0, [r4, #-256]	; 0xffffff00
     bec:	003ed803 	eorseq	sp, lr, r3, lsl #16
     bf0:	07090f20 	streq	r0, [r9, -r0, lsr #30]
     bf4:	0c010000 	stceq	0, cr0, [r1], {-0}
     bf8:	2000153c 	andcs	r1, r0, ip, lsr r5
     bfc:	00000046 	andeq	r0, r0, r6, asr #32
     c00:	01c39c01 	biceq	r9, r3, r1, lsl #24
     c04:	4d100000 	ldcmi	0, cr0, [r0, #-0]
     c08:	01000007 	tsteq	r0, r7
     c0c:	0001620c 	andeq	r6, r1, ip, lsl #4
     c10:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     c14:	03321100 	teqeq	r2, #0, 2
     c18:	07010000 	streq	r0, [r1, -r0]
     c1c:	2000152c 	andcs	r1, r0, ip, lsr #10
     c20:	00000010 	andeq	r0, r0, r0, lsl r0
     c24:	4d109c01 	ldcmi	12, cr9, [r0, #-4]
     c28:	01000007 	tsteq	r0, r7
     c2c:	00016207 	andeq	r6, r1, r7, lsl #4
     c30:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     c34:	052b0000 	streq	r0, [fp, #-0]!
     c38:	00040000 	andeq	r0, r4, r0
     c3c:	00000284 	andeq	r0, r0, r4, lsl #5
     c40:	008f0104 	addeq	r0, pc, r4, lsl #2
     c44:	8d0c0000 	stchi	0, cr0, [ip, #-0]
     c48:	84000009 	strhi	r0, [r0], #-9
     c4c:	a8200015 	stmdage	r0!, {r0, r2, r4}
     c50:	19000002 	stmdbne	r0, {r1}
     c54:	02000004 	andeq	r0, r0, #4
     c58:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
     c5c:	03000000 	movweq	r0, #0
     c60:	0000034b 	andeq	r0, r0, fp, asr #6
     c64:	004e0702 	subeq	r0, lr, r2, lsl #14
     c68:	03000000 	movweq	r0, #0
     c6c:	000006e4 	andeq	r0, r0, r4, ror #13
     c70:	004e0802 	subeq	r0, lr, r2, lsl #16
     c74:	03040000 	movweq	r0, #16384	; 0x4000
     c78:	000014df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
     c7c:	00550902 	subseq	r0, r5, r2, lsl #18
     c80:	00080000 	andeq	r0, r8, r0
     c84:	6f070404 	svcvs	0x00070404
     c88:	05000003 	streq	r0, [r0, #-3]
     c8c:	00005b04 	andeq	r5, r0, r4, lsl #22
     c90:	08010400 	stmdaeq	r1, {sl}
     c94:	000004ae 	andeq	r0, r0, lr, lsr #9
     c98:	00163106 	andseq	r3, r6, r6, lsl #2
     c9c:	210a0200 	mrscs	r0, R10_fiq
     ca0:	07000000 	streq	r0, [r0, -r0]
     ca4:	00000024 	andeq	r0, r0, r4, lsr #32
     ca8:	9e06030c 	cdpls	3, 0, cr0, cr6, cr12, {0}
     cac:	03000000 	movweq	r0, #0
     cb0:	000005a4 	andeq	r0, r0, r4, lsr #11
     cb4:	009e0703 	addseq	r0, lr, r3, lsl #14
     cb8:	03000000 	movweq	r0, #0
     cbc:	0000002b 	andeq	r0, r0, fp, lsr #32
     cc0:	009e0803 	addseq	r0, lr, r3, lsl #16
     cc4:	03040000 	movweq	r0, #16384	; 0x4000
     cc8:	00000020 	andeq	r0, r0, r0, lsr #32
     ccc:	009e0903 	addseq	r0, lr, r3, lsl #18
     cd0:	00080000 	andeq	r0, r8, r0
     cd4:	00620405 	rsbeq	r0, r2, r5, lsl #8
     cd8:	ff060000 			; <UNDEFINED> instruction: 0xff060000
     cdc:	0300000f 	movweq	r0, #15
     ce0:	00006d0a 	andeq	r6, r0, sl, lsl #26
     ce4:	06a90700 	strteq	r0, [r9], r0, lsl #14
     ce8:	04240000 	strteq	r0, [r4], #-0
     cec:	00012806 	andeq	r2, r1, r6, lsl #16
     cf0:	043c0300 	ldrteq	r0, [ip], #-768	; 0xfffffd00
     cf4:	07040000 	streq	r0, [r4, -r0]
     cf8:	00000128 	andeq	r0, r0, r8, lsr #2
     cfc:	06b50300 	ldrteq	r0, [r5], r0, lsl #6
     d00:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     d04:	0000012e 	andeq	r0, r0, lr, lsr #2
     d08:	060f0304 	streq	r0, [pc], -r4, lsl #6
     d0c:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
     d10:	0000012e 	andeq	r0, r0, lr, lsr #2
     d14:	063b0308 	ldrteq	r0, [fp], -r8, lsl #6
     d18:	0c040000 	stceq	0, cr0, [r4], {-0}
     d1c:	00000146 	andeq	r0, r0, r6, asr #2
     d20:	0332030c 	teqeq	r2, #12, 6	; 0x30000000
     d24:	0d040000 	stceq	0, cr0, [r4, #-0]
     d28:	00000146 	andeq	r0, r0, r6, asr #2
     d2c:	044e0310 	strbeq	r0, [lr], #-784	; 0xfffffcf0
     d30:	10040000 	andne	r0, r4, r0
     d34:	0000012e 	andeq	r0, r0, lr, lsr #2
     d38:	00600314 	rsbeq	r0, r0, r4, lsl r3
     d3c:	11040000 	mrsne	r0, (UNDEF: 4)
     d40:	0000012e 	andeq	r0, r0, lr, lsr #2
     d44:	03bf0318 			; <UNDEFINED> instruction: 0x03bf0318
     d48:	12040000 	andne	r0, r4, #0
     d4c:	0000012e 	andeq	r0, r0, lr, lsr #2
     d50:	03cf031c 	biceq	r0, pc, #28, 6	; 0x70000000
     d54:	13040000 	movwne	r0, #16384	; 0x4000
     d58:	0000012e 	andeq	r0, r0, lr, lsr #2
     d5c:	04050020 	streq	r0, [r5], #-32	; 0xffffffe0
     d60:	000000a4 	andeq	r0, r0, r4, lsr #1
     d64:	69050408 	stmdbvs	r5, {r3, sl}
     d68:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     d6c:	00000140 	andeq	r0, r0, r0, asr #2
     d70:	0001400a 	andeq	r4, r1, sl
     d74:	04050000 	streq	r0, [r5], #-0
     d78:	000000af 	andeq	r0, r0, pc, lsr #1
     d7c:	01350405 	teqeq	r5, r5, lsl #8
     d80:	aa060000 	bge	180d88 <startup-0x1fe7f278>
     d84:	04000006 	streq	r0, [r0], #-6
     d88:	0000af15 	andeq	sl, r0, r5, lsl pc
     d8c:	01620b00 	cmneq	r2, r0, lsl #22
     d90:	01620000 	cmneq	r2, r0
     d94:	000c0000 	andeq	r0, ip, r0
     d98:	014c0405 	cmpeq	ip, r5, lsl #8
     d9c:	310d0000 	mrscc	r0, (UNDEF: 13)
     da0:	04000005 	streq	r0, [r0], #-5
     da4:	0001571c 	andeq	r5, r1, ip, lsl r7
     da8:	040a0d00 	streq	r0, [sl], #-3328	; 0xfffff300
     dac:	1d040000 	stcne	0, cr0, [r4, #-0]
     db0:	0000012e 	andeq	r0, r0, lr, lsr #2
     db4:	00005b0b 	andeq	r5, r0, fp, lsl #22
     db8:	00018e00 	andeq	r8, r1, r0, lsl #28
     dbc:	018e0e00 	orreq	r0, lr, r0, lsl #28
     dc0:	000b0000 	andeq	r0, fp, r0
     dc4:	ec070404 	cfstrs	mvf0, [r7], {4}
     dc8:	0f000003 	svceq	0x00000003
     dcc:	00000952 	andeq	r0, r0, r2, asr r9
     dd0:	017e0305 	cmneq	lr, r5, lsl #6
     dd4:	03050000 	movweq	r0, #20480	; 0x5000
     dd8:	20007c40 	andcs	r7, r0, r0, asr #24
     ddc:	00084c0f 	andeq	r4, r8, pc, lsl #24
     de0:	7e030600 	cfmadd32vc	mvax0, mvfx0, mvfx3, mvfx0
     de4:	05000001 	streq	r0, [r0, #-1]
     de8:	007c4c03 	rsbseq	r4, ip, r3, lsl #24
     dec:	08670f20 	stmdaeq	r7!, {r5, r8, r9, sl, fp}^
     df0:	03070000 	movweq	r0, #28672	; 0x7000
     df4:	0000017e 	andeq	r0, r0, lr, ror r1
     df8:	7c580305 	mrrcvc	3, 0, r0, r8, cr5
     dfc:	c80f2000 	stmdagt	pc, {sp}	; <UNPREDICTABLE>
     e00:	08000007 	stmdaeq	r0, {r0, r1, r2}
     e04:	00017e03 	andeq	r7, r1, r3, lsl #28
     e08:	64030500 	strvs	r0, [r3], #-1280	; 0xfffffb00
     e0c:	0f20007c 	svceq	0x0020007c
     e10:	00000878 	andeq	r0, r0, r8, ror r8
     e14:	017e0309 	cmneq	lr, r9, lsl #6
     e18:	03050000 	movweq	r0, #20480	; 0x5000
     e1c:	20007c70 	andcs	r7, r0, r0, ror ip
     e20:	0009ba0f 	andeq	fp, r9, pc, lsl #20
     e24:	7e030a00 	vmlavc.f32	s0, s6, s0
     e28:	05000001 	streq	r0, [r0, #-1]
     e2c:	007c7c03 	rsbseq	r7, ip, r3, lsl #24
     e30:	09360f20 	ldmdbeq	r6!, {r5, r8, r9, sl, fp}
     e34:	030b0000 	movweq	r0, #45056	; 0xb000
     e38:	0000017e 	andeq	r0, r0, lr, ror r1
     e3c:	7c880305 	stcvc	3, cr0, [r8], {5}
     e40:	9b0f2000 	blls	3c8e48 <startup-0x1fc371b8>
     e44:	0c000008 	stceq	0, cr0, [r0], {8}
     e48:	00017e03 	andeq	r7, r1, r3, lsl #28
     e4c:	94030500 	strls	r0, [r3], #-1280	; 0xfffffb00
     e50:	0f20007c 	svceq	0x0020007c
     e54:	000007d8 	ldrdeq	r0, [r0], -r8
     e58:	017e030d 	cmneq	lr, sp, lsl #6
     e5c:	03050000 	movweq	r0, #20480	; 0x5000
     e60:	20007ca0 	andcs	r7, r0, r0, lsr #25
     e64:	0008060f 	andeq	r0, r8, pc, lsl #12
     e68:	7e030e00 	cdpvc	14, 0, cr0, cr3, cr0, {0}
     e6c:	05000001 	streq	r0, [r0, #-1]
     e70:	007cac03 	rsbseq	sl, ip, r3, lsl #24
     e74:	08e80f20 	stmiaeq	r8!, {r5, r8, r9, sl, fp}^
     e78:	030f0000 	movweq	r0, #61440	; 0xf000
     e7c:	0000017e 	andeq	r0, r0, lr, ror r1
     e80:	7cb80305 	ldcvc	3, cr0, [r8], #20
     e84:	8c102000 	ldchi	0, cr2, [r0], {-0}
     e88:	01000007 	tsteq	r0, r7
     e8c:	00009e11 	andeq	r9, r0, r1, lsl lr
     e90:	90030500 	andls	r0, r3, r0, lsl #10
     e94:	10200042 	eorne	r0, r0, r2, asr #32
     e98:	0000075c 	andeq	r0, r0, ip, asr r7
     e9c:	009e1201 	addseq	r1, lr, r1, lsl #4
     ea0:	03050000 	movweq	r0, #20480	; 0x5000
     ea4:	200042a8 	andcs	r4, r0, r8, lsr #5
     ea8:	0007b210 	andeq	fp, r7, r0, lsl r2
     eac:	9e130100 	muflss	f0, f3, f0
     eb0:	05000000 	streq	r0, [r0, #-0]
     eb4:	00416003 	subeq	r6, r1, r3
     eb8:	08911020 	ldmeq	r1, {r5, ip}
     ebc:	14010000 	strne	r0, [r1], #-0
     ec0:	0000009e 	muleq	r0, lr, r0
     ec4:	42a40305 	adcmi	r0, r4, #335544320	; 0x14000000
     ec8:	5c102000 	ldcpl	0, cr2, [r0], {-0}
     ecc:	01000008 	tsteq	r0, r8
     ed0:	00009e15 	andeq	r9, r0, r5, lsl lr
     ed4:	7c030500 	cfstr32vc	mvfx0, [r3], {-0}
     ed8:	10200042 	eorne	r0, r0, r2, asr #32
     edc:	00000774 	andeq	r0, r0, r4, ror r7
     ee0:	009e1601 	addseq	r1, lr, r1, lsl #12
     ee4:	03050000 	movweq	r0, #20480	; 0x5000
     ee8:	20004170 	andcs	r4, r0, r0, ror r1
     eec:	0007e910 	andeq	lr, r7, r0, lsl r9
     ef0:	9e170100 	muflss	f0, f7, f0
     ef4:	05000000 	streq	r0, [r0, #-0]
     ef8:	0042a003 	subeq	sl, r2, r3
     efc:	090f1020 	stmdbeq	pc, {r5, ip}	; <UNPREDICTABLE>
     f00:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
     f04:	0000009e 	muleq	r0, lr, r0
     f08:	425c0305 	subsmi	r0, ip, #335544320	; 0x14000000
     f0c:	bd102000 	ldclt	0, cr2, [r0, #-0]
     f10:	01000007 	tsteq	r0, r7
     f14:	00009e19 	andeq	r9, r0, r9, lsl lr
     f18:	c8030500 	stmdagt	r3, {r8, sl}
     f1c:	10200041 	eorne	r0, r0, r1, asr #32
     f20:	00000752 	andeq	r0, r0, r2, asr r7
     f24:	009e1a01 	addseq	r1, lr, r1, lsl #20
     f28:	03050000 	movweq	r0, #20480	; 0x5000
     f2c:	20004278 	andcs	r4, r0, r8, ror r2
     f30:	00082a10 	andeq	r2, r8, r0, lsl sl
     f34:	9e1b0100 	muflse	f0, f3, f0
     f38:	05000000 	streq	r0, [r0, #-0]
     f3c:	00428003 	subeq	r8, r2, r3
     f40:	07a41020 	streq	r1, [r4, r0, lsr #32]!
     f44:	1d010000 	stcne	0, cr0, [r1, #-0]
     f48:	00000062 	andeq	r0, r0, r2, rrx
     f4c:	41980305 	orrsmi	r0, r8, r5, lsl #6
     f50:	19102000 	ldmdbne	r0, {sp}
     f54:	01000009 	tsteq	r0, r9
     f58:	0000621e 	andeq	r6, r0, lr, lsl r2
     f5c:	84030500 	strhi	r0, [r3], #-1280	; 0xfffffb00
     f60:	10200042 	eorne	r0, r0, r2, asr #32
     f64:	000008c5 	andeq	r0, r0, r5, asr #17
     f68:	00621f01 	rsbeq	r1, r2, r1, lsl #30
     f6c:	03050000 	movweq	r0, #20480	; 0x5000
     f70:	20004260 	andcs	r4, r0, r0, ror #4
     f74:	00076610 	andeq	r6, r7, r0, lsl r6
     f78:	62200100 	eorvs	r0, r0, #0, 2
     f7c:	05000000 	streq	r0, [r0, #-0]
     f80:	00418c03 	subeq	r8, r1, r3, lsl #24
     f84:	09641020 	stmdbeq	r4!, {r5, ip}^
     f88:	21010000 	mrscs	r0, (UNDEF: 1)
     f8c:	00000062 	andeq	r0, r0, r2, rrx
     f90:	42940305 	addsmi	r0, r4, #335544320	; 0x14000000
     f94:	96102000 	ldrls	r2, [r0], -r0
     f98:	01000007 	tsteq	r0, r7
     f9c:	00006222 	andeq	r6, r0, r2, lsr #4
     fa0:	44030500 	strmi	r0, [r3], #-1280	; 0xfffffb00
     fa4:	10200042 	eorne	r0, r0, r2, asr #32
     fa8:	000008ab 	andeq	r0, r0, fp, lsr #17
     fac:	00622301 	rsbeq	r2, r2, r1, lsl #6
     fb0:	03050000 	movweq	r0, #20480	; 0x5000
     fb4:	20004164 	andcs	r4, r0, r4, ror #2
     fb8:	00077e10 	andeq	r7, r7, r0, lsl lr
     fbc:	62240100 	eorvs	r0, r4, #0, 2
     fc0:	05000000 	streq	r0, [r0, #-0]
     fc4:	00417403 	subeq	r7, r1, r3, lsl #8
     fc8:	09271020 	stmdbeq	r7!, {r5, ip}
     fcc:	25010000 	strcs	r0, [r1, #-0]
     fd0:	00000062 	andeq	r0, r0, r2, rrx
     fd4:	41b00305 	lslsmi	r0, r5, #6
     fd8:	3e102000 	cdpcc	0, 1, cr2, cr0, cr0, {0}
     fdc:	01000008 	tsteq	r0, r8
     fe0:	00006226 	andeq	r6, r0, r6, lsr #4
     fe4:	38030500 	stmdacc	r3, {r8, sl}
     fe8:	10200042 	eorne	r0, r0, r2, asr #32
     fec:	0000097e 	andeq	r0, r0, lr, ror r9
     ff0:	00622701 	rsbeq	r2, r2, r1, lsl #14
     ff4:	03050000 	movweq	r0, #20480	; 0x5000
     ff8:	2000426c 	andcs	r4, r0, ip, ror #4
     ffc:	00088910 	andeq	r8, r8, r0, lsl r9
    1000:	4c2a0100 	stfmis	f0, [sl], #-0
    1004:	05000001 	streq	r0, [r0, #-1]
    1008:	0041cc03 	subeq	ip, r1, r3, lsl #24
    100c:	09041020 	stmdbeq	r4, {r5, ip}
    1010:	2b010000 	blcs	41018 <startup-0x1ffbefe8>
    1014:	000000a4 	andeq	r0, r0, r4, lsr #1
    1018:	41bc0305 			; <UNDEFINED> instruction: 0x41bc0305
    101c:	73102000 	tstvc	r0, #0
    1020:	01000009 	tsteq	r0, r9
    1024:	0000a42c 	andeq	sl, r0, ip, lsr #8
    1028:	80030500 	andhi	r0, r3, r0, lsl #10
    102c:	10200041 	eorne	r0, r0, r1, asr #32
    1030:	00000816 	andeq	r0, r0, r6, lsl r8
    1034:	00a42d01 	adceq	r2, r4, r1, lsl #26
    1038:	03050000 	movweq	r0, #20480	; 0x5000
    103c:	200041a4 	andcs	r4, r0, r4, lsr #3
    1040:	0008ba10 	andeq	fp, r8, r0, lsl sl
    1044:	a42e0100 	strtge	r0, [lr], #-256	; 0xffffff00
    1048:	05000000 	streq	r0, [r0, #-0]
    104c:	00425003 	subeq	r5, r2, r3
    1050:	09471020 	stmdbeq	r7, {r5, ip}^
    1054:	2f010000 	svccs	0x00010000
    1058:	000000a4 	andeq	r0, r0, r4, lsr #1
    105c:	41f00305 	mvnsmi	r0, r5, lsl #6
    1060:	a40b2000 	strge	r2, [fp], #-0
    1064:	3c000000 	stccc	0, cr0, [r0], {-0}
    1068:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    106c:	0000018e 	andeq	r0, r0, lr, lsl #3
    1070:	f9100004 			; <UNDEFINED> instruction: 0xf9100004
    1074:	01000008 	tsteq	r0, r8
    1078:	00042c30 	andeq	r2, r4, r0, lsr ip
    107c:	fc030500 	stc2	5, cr0, [r3], {-0}
    1080:	11200041 			; <UNDEFINED> instruction: 0x11200041
    1084:	000008de 	ldrdeq	r0, [r0], -lr
    1088:	17085f01 	strne	r5, [r8, -r1, lsl #30]
    108c:	01242000 			; <UNDEFINED> instruction: 0x01242000
    1090:	9c010000 	stcls	0, cr0, [r1], {-0}
    1094:	00000482 	andeq	r0, r0, r2, lsl #9
    1098:	00088912 	andeq	r8, r8, r2, lsl r9
    109c:	625f0100 	subsvs	r0, pc, #0, 2
    10a0:	02000001 	andeq	r0, r0, #1
    10a4:	d40f6c91 	strle	r6, [pc], #-3217	; 10ac <startup-0x1fffef54>
    10a8:	01000008 	tsteq	r0, r8
    10ac:	00012e60 	andeq	r2, r1, r0, ror #28
    10b0:	c4030500 	strgt	r0, [r3], #-1280	; 0xfffffb00
    10b4:	0020007c 	eoreq	r0, r0, ip, ror r0
    10b8:	00048413 	andeq	r8, r4, r3, lsl r4
    10bc:	84310100 	ldrthi	r0, [r1], #-256	; 0xffffff00
    10c0:	84200015 	strthi	r0, [r0], #-21	; 0xffffffeb
    10c4:	01000001 	tsteq	r0, r1
    10c8:	08210f9c 	stmdaeq	r1!, {r2, r3, r4, r7, r8, r9, sl, fp}
    10cc:	32010000 	andcc	r0, r1, #0
    10d0:	0000009e 	muleq	r0, lr, r0
    10d4:	0f749102 	svceq	0x00749102
    10d8:	000007f4 	strdeq	r0, [r0], -r4
    10dc:	009e3601 	addseq	r3, lr, r1, lsl #12
    10e0:	91020000 	mrsls	r0, (UNDEF: 2)
    10e4:	08350f70 	ldmdaeq	r5!, {r4, r5, r6, r8, r9, sl, fp}
    10e8:	3a010000 	bcc	410f0 <startup-0x1ffbef10>
    10ec:	0000009e 	muleq	r0, lr, r0
    10f0:	0f6c9102 	svceq	0x006c9102
    10f4:	000007fd 	strdeq	r0, [r0], -sp
    10f8:	009e3e01 	addseq	r3, lr, r1, lsl #28
    10fc:	91020000 	mrsls	r0, (UNDEF: 2)
    1100:	04280f68 	strteq	r0, [r8], #-3944	; 0xfffff098
    1104:	42010000 	andmi	r0, r1, #0
    1108:	0000009e 	muleq	r0, lr, r0
    110c:	0f649102 	svceq	0x00649102
    1110:	000002e9 	andeq	r0, r0, r9, ror #5
    1114:	009e4601 	addseq	r4, lr, r1, lsl #12
    1118:	91020000 	mrsls	r0, (UNDEF: 2)
    111c:	02f20f60 	rscseq	r0, r2, #96, 30	; 0x180
    1120:	4a010000 	bmi	41128 <startup-0x1ffbeed8>
    1124:	0000009e 	muleq	r0, lr, r0
    1128:	0f5c9102 	svceq	0x005c9102
    112c:	0000013b 	andeq	r0, r0, fp, lsr r1
    1130:	009e4e01 	addseq	r4, lr, r1, lsl #28
    1134:	91020000 	mrsls	r0, (UNDEF: 2)
    1138:	03100f58 	tsteq	r0, #88, 30	; 0x160
    113c:	52010000 	andpl	r0, r1, #0
    1140:	0000009e 	muleq	r0, lr, r0
    1144:	0f549102 	svceq	0x00549102
    1148:	00000319 	andeq	r0, r0, r9, lsl r3
    114c:	009e5601 	addseq	r5, lr, r1, lsl #12
    1150:	91020000 	mrsls	r0, (UNDEF: 2)
    1154:	00750f50 	rsbseq	r0, r5, r0, asr pc
    1158:	5a010000 	bpl	41160 <startup-0x1ffbeea0>
    115c:	0000009e 	muleq	r0, lr, r0
    1160:	004c9102 	subeq	r9, ip, r2, lsl #2
    1164:	0001f700 	andeq	pc, r1, r0, lsl #14
    1168:	84000400 	strhi	r0, [r0], #-1024	; 0xfffffc00
    116c:	04000003 	streq	r0, [r0], #-3
    1170:	00008f01 	andeq	r8, r0, r1, lsl #30
    1174:	0a030c00 	beq	c417c <startup-0x1ff3be84>
    1178:	182c0000 	stmdane	ip!, {}	; <UNPREDICTABLE>
    117c:	01d42000 	bicseq	r2, r4, r0
    1180:	05a10000 	streq	r0, [r1, #0]!
    1184:	04020000 	streq	r0, [r2], #-0
    1188:	00036f07 	andeq	r6, r3, r7, lsl #30
    118c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    1190:	00000369 	andeq	r0, r0, r9, ror #6
    1194:	ae080102 	adfgee	f0, f0, f2
    1198:	03000004 	movweq	r0, #4
    119c:	6305020c 	movwvs	r0, #21004	; 0x520c
    11a0:	04000000 	streq	r0, [r0], #-0
    11a4:	0000034b 	andeq	r0, r0, fp, asr #6
    11a8:	00210702 	eoreq	r0, r1, r2, lsl #14
    11ac:	04000000 	streq	r0, [r0], #-0
    11b0:	000006e4 	andeq	r0, r0, r4, ror #13
    11b4:	00210802 	eoreq	r0, r1, r2, lsl #16
    11b8:	04040000 	streq	r0, [r4], #-0
    11bc:	000014df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    11c0:	00630902 	rsbeq	r0, r3, r2, lsl #18
    11c4:	00080000 	andeq	r0, r8, r0
    11c8:	002f0405 	eoreq	r0, pc, r5, lsl #8
    11cc:	31060000 	mrscc	r0, (UNDEF: 6)
    11d0:	02000016 	andeq	r0, r0, #22
    11d4:	0000360a 	andeq	r3, r0, sl, lsl #12
    11d8:	00240700 	eoreq	r0, r4, r0, lsl #14
    11dc:	030c0000 	movweq	r0, #49152	; 0xc000
    11e0:	0000a506 	andeq	sl, r0, r6, lsl #10
    11e4:	05a40400 	streq	r0, [r4, #1024]!	; 0x400
    11e8:	07030000 	streq	r0, [r3, -r0]
    11ec:	000000a5 	andeq	r0, r0, r5, lsr #1
    11f0:	002b0400 	eoreq	r0, fp, r0, lsl #8
    11f4:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    11f8:	000000a5 	andeq	r0, r0, r5, lsr #1
    11fc:	00200404 	eoreq	r0, r0, r4, lsl #8
    1200:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    1204:	000000a5 	andeq	r0, r0, r5, lsr #1
    1208:	04050008 	streq	r0, [r5], #-8
    120c:	00000069 	andeq	r0, r0, r9, rrx
    1210:	000fff06 	andeq	pc, pc, r6, lsl #30
    1214:	740a0300 	strvc	r0, [sl], #-768	; 0xfffffd00
    1218:	07000000 	streq	r0, [r0, -r0]
    121c:	000006a9 	andeq	r0, r0, r9, lsr #13
    1220:	2f060424 	svccs	0x00060424
    1224:	04000001 	streq	r0, [r0], #-1
    1228:	0000043c 	andeq	r0, r0, ip, lsr r4
    122c:	012f0704 			; <UNDEFINED> instruction: 0x012f0704
    1230:	04000000 	streq	r0, [r0], #-0
    1234:	000006b5 			; <UNDEFINED> instruction: 0x000006b5
    1238:	01350804 	teqeq	r5, r4, lsl #16
    123c:	04040000 	streq	r0, [r4], #-0
    1240:	0000060f 	andeq	r0, r0, pc, lsl #12
    1244:	01350904 	teqeq	r5, r4, lsl #18
    1248:	04080000 	streq	r0, [r8], #-0
    124c:	0000063b 	andeq	r0, r0, fp, lsr r6
    1250:	014d0c04 	cmpeq	sp, r4, lsl #24
    1254:	040c0000 	streq	r0, [ip], #-0
    1258:	00000332 	andeq	r0, r0, r2, lsr r3
    125c:	014d0d04 	cmpeq	sp, r4, lsl #26
    1260:	04100000 	ldreq	r0, [r0], #-0
    1264:	0000044e 	andeq	r0, r0, lr, asr #8
    1268:	01351004 	teqeq	r5, r4
    126c:	04140000 	ldreq	r0, [r4], #-0
    1270:	00000060 	andeq	r0, r0, r0, rrx
    1274:	01351104 	teqeq	r5, r4, lsl #2
    1278:	04180000 	ldreq	r0, [r8], #-0
    127c:	000003bf 			; <UNDEFINED> instruction: 0x000003bf
    1280:	01351204 	teqeq	r5, r4, lsl #4
    1284:	041c0000 	ldreq	r0, [ip], #-0
    1288:	000003cf 	andeq	r0, r0, pc, asr #7
    128c:	01351304 	teqeq	r5, r4, lsl #6
    1290:	00200000 	eoreq	r0, r0, r0
    1294:	00ab0405 	adceq	r0, fp, r5, lsl #8
    1298:	04080000 	streq	r0, [r8], #-0
    129c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    12a0:	01470900 	cmpeq	r7, r0, lsl #18
    12a4:	470a0000 	strmi	r0, [sl, -r0]
    12a8:	00000001 	andeq	r0, r0, r1
    12ac:	00b60405 	adcseq	r0, r6, r5, lsl #8
    12b0:	04050000 	streq	r0, [r5], #-0
    12b4:	0000013c 	andeq	r0, r0, ip, lsr r1
    12b8:	0006aa06 	andeq	sl, r6, r6, lsl #20
    12bc:	b6150400 	ldrlt	r0, [r5], -r0, lsl #8
    12c0:	0b000000 	bleq	12c8 <startup-0x1fffed38>
    12c4:	00000169 	andeq	r0, r0, r9, ror #2
    12c8:	00000169 	andeq	r0, r0, r9, ror #2
    12cc:	0405000c 	streq	r0, [r5], #-12
    12d0:	00000153 	andeq	r0, r0, r3, asr r1
    12d4:	0005310d 	andeq	r3, r5, sp, lsl #2
    12d8:	5e1c0400 	cfmulspl	mvf0, mvf12, mvf0
    12dc:	0d000001 	stceq	0, cr0, [r0, #-4]
    12e0:	0000040a 	andeq	r0, r0, sl, lsl #8
    12e4:	01351d04 	teqeq	r5, r4, lsl #26
    12e8:	320e0000 	andcc	r0, lr, #0
    12ec:	0100000a 	tsteq	r0, sl
    12f0:	00182c06 	andseq	r2, r8, r6, lsl #24
    12f4:	0001d420 	andeq	sp, r1, r0, lsr #8
    12f8:	0f9c0100 	svceq	0x009c0100
    12fc:	0000074d 	andeq	r0, r0, sp, asr #14
    1300:	01690601 	cmneq	r9, r1, lsl #12
    1304:	91020000 	mrsls	r0, (UNDEF: 2)
    1308:	09d91074 	ldmibeq	r9, {r2, r4, r5, r6, ip}^
    130c:	10010000 	andne	r0, r1, r0
    1310:	00000135 	andeq	r0, r0, r5, lsr r1
    1314:	3edc0305 	cdpcc	3, 13, cr0, cr12, cr5, {0}
    1318:	ca102000 	bgt	409320 <startup-0x1fbf6ce0>
    131c:	01000009 	tsteq	r0, r9
    1320:	00013511 	andeq	r3, r1, r1, lsl r5
    1324:	e4030500 	str	r0, [r3], #-1280	; 0xfffffb00
    1328:	1020003e 	eorne	r0, r0, lr, lsr r0
    132c:	000009f5 	strdeq	r0, [r0], -r5
    1330:	01351201 	teqeq	r5, r1, lsl #4
    1334:	03050000 	movweq	r0, #20480	; 0x5000
    1338:	20003eec 	andcs	r3, r0, ip, ror #29
    133c:	0009ee10 	andeq	lr, r9, r0, lsl lr
    1340:	35130100 	ldrcc	r0, [r3, #-256]	; 0xffffff00
    1344:	05000001 	streq	r0, [r0, #-1]
    1348:	003ee803 	eorseq	lr, lr, r3, lsl #16
    134c:	09e71020 	stmibeq	r7!, {r5, ip}^
    1350:	14010000 	strne	r0, [r1], #-0
    1354:	00000135 	andeq	r0, r0, r5, lsr r1
    1358:	3ee00305 	cdpcc	3, 14, cr0, cr0, cr5, {0}
    135c:	00002000 	andeq	r2, r0, r0
    1360:	00000641 	andeq	r0, r0, r1, asr #12
    1364:	04520004 	ldrbeq	r0, [r2], #-4
    1368:	01040000 	mrseq	r0, (UNDEF: 4)
    136c:	0000008f 	andeq	r0, r0, pc, lsl #1
    1370:	000cb30c 	andeq	fp, ip, ip, lsl #6
    1374:	001a0000 	andseq	r0, sl, r0
    1378:	00036420 	andeq	r6, r3, r0, lsr #8
    137c:	00068800 	andeq	r8, r6, r0, lsl #16
    1380:	020c0200 	andeq	r0, ip, #0, 4
    1384:	00004e05 	andeq	r4, r0, r5, lsl #28
    1388:	034b0300 	movteq	r0, #45824	; 0xb300
    138c:	07020000 	streq	r0, [r2, -r0]
    1390:	0000004e 	andeq	r0, r0, lr, asr #32
    1394:	06e40300 	strbteq	r0, [r4], r0, lsl #6
    1398:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    139c:	0000004e 	andeq	r0, r0, lr, asr #32
    13a0:	14df0304 	ldrbne	r0, [pc], #772	; 13a8 <startup-0x1fffec58>
    13a4:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    13a8:	00000055 	andeq	r0, r0, r5, asr r0
    13ac:	04040008 	streq	r0, [r4], #-8
    13b0:	00036f07 	andeq	r6, r3, r7, lsl #30
    13b4:	5b040500 	blpl	1027bc <startup-0x1fefd844>
    13b8:	04000000 	streq	r0, [r0], #-0
    13bc:	04ae0801 	strteq	r0, [lr], #2049	; 0x801
    13c0:	31060000 	mrscc	r0, (UNDEF: 6)
    13c4:	02000016 	andeq	r0, r0, #22
    13c8:	0000210a 	andeq	r2, r0, sl, lsl #2
    13cc:	00240700 	eoreq	r0, r4, r0, lsl #14
    13d0:	030c0000 	movweq	r0, #49152	; 0xc000
    13d4:	00009e06 	andeq	r9, r0, r6, lsl #28
    13d8:	05a40300 	streq	r0, [r4, #768]!	; 0x300
    13dc:	07030000 	streq	r0, [r3, -r0]
    13e0:	0000009e 	muleq	r0, lr, r0
    13e4:	002b0300 	eoreq	r0, fp, r0, lsl #6
    13e8:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    13ec:	0000009e 	muleq	r0, lr, r0
    13f0:	00200304 	eoreq	r0, r0, r4, lsl #6
    13f4:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    13f8:	0000009e 	muleq	r0, lr, r0
    13fc:	04050008 	streq	r0, [r5], #-8
    1400:	00000062 	andeq	r0, r0, r2, rrx
    1404:	000fff06 	andeq	pc, pc, r6, lsl #30
    1408:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
    140c:	07000000 	streq	r0, [r0, -r0]
    1410:	000006a9 	andeq	r0, r0, r9, lsr #13
    1414:	28060424 	stmdacs	r6, {r2, r5, sl}
    1418:	03000001 	movweq	r0, #1
    141c:	0000043c 	andeq	r0, r0, ip, lsr r4
    1420:	01280704 			; <UNDEFINED> instruction: 0x01280704
    1424:	03000000 	movweq	r0, #0
    1428:	000006b5 			; <UNDEFINED> instruction: 0x000006b5
    142c:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
    1430:	03040000 	movweq	r0, #16384	; 0x4000
    1434:	0000060f 	andeq	r0, r0, pc, lsl #12
    1438:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
    143c:	03080000 	movweq	r0, #32768	; 0x8000
    1440:	0000063b 	andeq	r0, r0, fp, lsr r6
    1444:	01460c04 	cmpeq	r6, r4, lsl #24
    1448:	030c0000 	movweq	r0, #49152	; 0xc000
    144c:	00000332 	andeq	r0, r0, r2, lsr r3
    1450:	01460d04 	cmpeq	r6, r4, lsl #26
    1454:	03100000 	tsteq	r0, #0
    1458:	0000044e 	andeq	r0, r0, lr, asr #8
    145c:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
    1460:	03140000 	tsteq	r4, #0
    1464:	00000060 	andeq	r0, r0, r0, rrx
    1468:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
    146c:	03180000 	tsteq	r8, #0
    1470:	000003bf 			; <UNDEFINED> instruction: 0x000003bf
    1474:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
    1478:	031c0000 	tsteq	ip, #0
    147c:	000003cf 	andeq	r0, r0, pc, asr #7
    1480:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
    1484:	00200000 	eoreq	r0, r0, r0
    1488:	00a40405 	adceq	r0, r4, r5, lsl #8
    148c:	04080000 	streq	r0, [r8], #-0
    1490:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1494:	01400900 	cmpeq	r0, r0, lsl #18
    1498:	400a0000 	andmi	r0, sl, r0
    149c:	00000001 	andeq	r0, r0, r1
    14a0:	00af0405 	adceq	r0, pc, r5, lsl #8
    14a4:	04050000 	streq	r0, [r5], #-0
    14a8:	00000135 	andeq	r0, r0, r5, lsr r1
    14ac:	0006aa06 	andeq	sl, r6, r6, lsl #20
    14b0:	af150400 	svcge	0x00150400
    14b4:	0b000000 	bleq	14bc <startup-0x1fffeb44>
    14b8:	00000162 	andeq	r0, r0, r2, ror #2
    14bc:	00000162 	andeq	r0, r0, r2, ror #2
    14c0:	0405000c 	streq	r0, [r5], #-12
    14c4:	0000014c 	andeq	r0, r0, ip, asr #2
    14c8:	0005310d 	andeq	r3, r5, sp, lsl #2
    14cc:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
    14d0:	0d000001 	stceq	0, cr0, [r0, #-4]
    14d4:	0000040a 	andeq	r0, r0, sl, lsl #8
    14d8:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
    14dc:	5b0b0000 	blpl	2c14e4 <startup-0x1fd3eb1c>
    14e0:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    14e4:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    14e8:	0000018e 	andeq	r0, r0, lr, lsl #3
    14ec:	04040063 	streq	r0, [r4], #-99	; 0xffffff9d
    14f0:	0003ec07 	andeq	lr, r3, r7, lsl #24
    14f4:	0d190f00 	ldceq	15, cr0, [r9, #-0]
    14f8:	03050000 	movweq	r0, #20480	; 0x5000
    14fc:	0000017e 	andeq	r0, r0, lr, ror r1
    1500:	7cc80305 	stclvc	3, cr0, [r8], {5}
    1504:	840f2000 	strhi	r2, [pc], #-0	; 150c <startup-0x1fffeaf4>
    1508:	0600000b 	streq	r0, [r0], -fp
    150c:	00017e03 	andeq	r7, r1, r3, lsl #28
    1510:	2c030500 	cfstr32cs	mvfx0, [r3], {-0}
    1514:	0f20007d 	svceq	0x0020007d
    1518:	00000bcc 	andeq	r0, r0, ip, asr #23
    151c:	017e0307 	cmneq	lr, r7, lsl #6
    1520:	03050000 	movweq	r0, #20480	; 0x5000
    1524:	20007d90 	mulcs	r0, r0, sp
    1528:	000b730f 	andeq	r7, fp, pc, lsl #6
    152c:	7e030800 	cdpvc	8, 0, cr0, cr3, cr0, {0}
    1530:	05000001 	streq	r0, [r0, #-1]
    1534:	007df403 	rsbseq	pc, sp, r3, lsl #8
    1538:	0cf20f20 	ldcleq	15, cr0, [r2], #128	; 0x80
    153c:	03090000 	movweq	r0, #36864	; 0x9000
    1540:	0000017e 	andeq	r0, r0, lr, ror r1
    1544:	7e580305 	cdpvc	3, 5, cr0, cr8, cr5, {0}
    1548:	c60f2000 	strgt	r2, [pc], -r0
    154c:	0a00000d 	beq	1588 <startup-0x1fffea78>
    1550:	00017e03 	andeq	r7, r1, r3, lsl #28
    1554:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
    1558:	0f20007e 	svceq	0x0020007e
    155c:	00000b9f 	muleq	r0, pc, fp	; <UNPREDICTABLE>
    1560:	017e030b 	cmneq	lr, fp, lsl #6
    1564:	03050000 	movweq	r0, #20480	; 0x5000
    1568:	20007f20 	andcs	r7, r0, r0, lsr #30
    156c:	000c8d0f 	andeq	r8, ip, pc, lsl #26
    1570:	7e030c00 	cdpvc	12, 0, cr0, cr3, cr0, {0}
    1574:	05000001 	streq	r0, [r0, #-1]
    1578:	007f8403 	rsbseq	r8, pc, r3, lsl #8
    157c:	0a4e0f20 	beq	1385204 <startup-0x1ec7adfc>
    1580:	030d0000 	movweq	r0, #53248	; 0xd000
    1584:	0000017e 	andeq	r0, r0, lr, ror r1
    1588:	7fe80305 	svcvc	0x00e80305
    158c:	b00f2000 	andlt	r2, pc, r0
    1590:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    1594:	00017e03 	andeq	r7, r1, r3, lsl #28
    1598:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
    159c:	0f200080 	svceq	0x00200080
    15a0:	00000c34 	andeq	r0, r0, r4, lsr ip
    15a4:	017e030f 	cmneq	lr, pc, lsl #6
    15a8:	03050000 	movweq	r0, #20480	; 0x5000
    15ac:	200080b0 	strhcs	r8, [r0], -r0
    15b0:	000a6a0f 	andeq	r6, sl, pc, lsl #20
    15b4:	7e031000 	cdpvc	0, 0, cr1, cr3, cr0, {0}
    15b8:	05000001 	streq	r0, [r0, #-1]
    15bc:	00811403 	addeq	r1, r1, r3, lsl #8
    15c0:	0bdd0f20 	bleq	ff745248 <firstTime.4040+0xdf73ad8c>
    15c4:	03110000 	tsteq	r1, #0
    15c8:	0000017e 	andeq	r0, r0, lr, ror r1
    15cc:	81780305 	cmnhi	r8, r5, lsl #6
    15d0:	fd0f2000 	stc2	0, cr2, [pc, #-0]	; 15d8 <startup-0x1fffea28>
    15d4:	1200000b 	andne	r0, r0, #11
    15d8:	00017e03 	andeq	r7, r1, r3, lsl #28
    15dc:	dc030500 	cfstr32le	mvfx0, [r3], {-0}
    15e0:	0f200081 	svceq	0x00200081
    15e4:	00000a94 	muleq	r0, r4, sl
    15e8:	017e0313 	cmneq	lr, r3, lsl r3
    15ec:	03050000 	movweq	r0, #20480	; 0x5000
    15f0:	20008240 	andcs	r8, r0, r0, asr #4
    15f4:	000c9d10 	andeq	r9, ip, r0, lsl sp
    15f8:	9e150100 	muflss	f0, f5, f0
    15fc:	05000000 	streq	r0, [r0, #-0]
    1600:	00431803 	subeq	r1, r3, r3, lsl #16
    1604:	0ad01020 	beq	ff40568c <firstTime.4040+0xdf3fb1d0>
    1608:	16010000 	strne	r0, [r1], -r0
    160c:	0000009e 	muleq	r0, lr, r0
    1610:	42b00305 	adcsmi	r0, r0, #335544320	; 0x14000000
    1614:	ba102000 	blt	40961c <startup-0x1fbf69e4>
    1618:	0100000a 	tsteq	r0, sl
    161c:	00009e17 	andeq	r9, r0, r7, lsl lr
    1620:	a8030500 	stmdage	r3, {r8, sl}
    1624:	10200043 	eorne	r0, r0, r3, asr #32
    1628:	00000b12 	andeq	r0, r0, r2, lsl fp
    162c:	009e1801 	addseq	r1, lr, r1, lsl #16
    1630:	03050000 	movweq	r0, #20480	; 0x5000
    1634:	20004314 	andcs	r4, r0, r4, lsl r3
    1638:	000c0d10 	andeq	r0, ip, r0, lsl sp
    163c:	9e190100 	muflse	f0, f1, f0
    1640:	05000000 	streq	r0, [r0, #-0]
    1644:	00439803 	subeq	r9, r3, r3, lsl #16
    1648:	0ca81020 	stceq	0, cr1, [r8], #128	; 0x80
    164c:	1a010000 	bne	41654 <startup-0x1ffbe9ac>
    1650:	0000009e 	muleq	r0, lr, r0
    1654:	444c0305 	strbmi	r0, [ip], #-773	; 0xfffffcfb
    1658:	c5102000 	ldrgt	r2, [r0, #-0]
    165c:	0100000a 	tsteq	r0, sl
    1660:	00009e1b 	andeq	r9, r0, fp, lsl lr
    1664:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
    1668:	10200043 	eorne	r0, r0, r3, asr #32
    166c:	00000d35 	andeq	r0, r0, r5, lsr sp
    1670:	009e1c01 	addseq	r1, lr, r1, lsl #24
    1674:	03050000 	movweq	r0, #20480	; 0x5000
    1678:	20004334 	andcs	r4, r0, r4, lsr r3
    167c:	000aa510 	andeq	sl, sl, r0, lsl r5
    1680:	9e1d0100 	muflse	f0, f5, f0
    1684:	05000000 	streq	r0, [r0, #-0]
    1688:	00436003 	subeq	r6, r3, r3
    168c:	0c731020 	ldcleq	0, cr1, [r3], #-128	; 0xffffff80
    1690:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    1694:	0000009e 	muleq	r0, lr, r0
    1698:	44300305 	ldrtmi	r0, [r0], #-773	; 0xfffffcfb
    169c:	08102000 	ldmdaeq	r0, {sp}
    16a0:	0100000b 	tsteq	r0, fp
    16a4:	00009e1f 	andeq	r9, r0, pc, lsl lr
    16a8:	10030500 	andne	r0, r3, r0, lsl #10
    16ac:	10200043 	eorne	r0, r0, r3, asr #32
    16b0:	00000d7d 	andeq	r0, r0, sp, ror sp
    16b4:	009e2001 	addseq	r2, lr, r1
    16b8:	03050000 	movweq	r0, #20480	; 0x5000
    16bc:	200042ac 	andcs	r4, r0, ip, lsr #5
    16c0:	000ae910 	andeq	lr, sl, r0, lsl r9
    16c4:	9e210100 	suflss	f0, f1, f0
    16c8:	05000000 	streq	r0, [r0, #-0]
    16cc:	0042c003 	subeq	ip, r2, r3
    16d0:	0d0f1020 	stceq	0, cr1, [pc, #-128]	; 1658 <startup-0x1fffe9a8>
    16d4:	22010000 	andcs	r0, r1, #0
    16d8:	0000009e 	muleq	r0, lr, r0
    16dc:	43440305 	movtmi	r0, #17157	; 0x4305
    16e0:	4e102000 	cdpmi	0, 1, cr2, cr0, cr0, {0}
    16e4:	0100000c 	tsteq	r0, ip
    16e8:	00009e23 	andeq	r9, r0, r3, lsr #28
    16ec:	88030500 	stmdahi	r3, {r8, sl}
    16f0:	10200043 	eorne	r0, r0, r3, asr #32
    16f4:	00000d4c 	andeq	r0, r0, ip, asr #26
    16f8:	00622501 	rsbeq	r2, r2, r1, lsl #10
    16fc:	03050000 	movweq	r0, #20480	; 0x5000
    1700:	20004328 	andcs	r4, r0, r8, lsr #6
    1704:	000b4d10 	andeq	r4, fp, r0, lsl sp
    1708:	62260100 	eorvs	r0, r6, #0, 2
    170c:	05000000 	streq	r0, [r0, #-0]
    1710:	00439c03 	subeq	r9, r3, r3, lsl #24
    1714:	0d021020 	stceq	0, cr1, [r2, #-128]	; 0xffffff80
    1718:	27010000 	strcs	r0, [r1, -r0]
    171c:	00000062 	andeq	r0, r0, r2, rrx
    1720:	43380305 	teqmi	r8, #335544320	; 0x14000000
    1724:	7e102000 	cdpvc	0, 1, cr2, cr0, cr0, {0}
    1728:	0100000c 	tsteq	r0, ip
    172c:	00006228 	andeq	r6, r0, r8, lsr #4
    1730:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
    1734:	10200044 	eorne	r0, r0, r4, asr #32
    1738:	00000a3f 	andeq	r0, r0, pc, lsr sl
    173c:	00622901 	rsbeq	r2, r2, r1, lsl #18
    1740:	03050000 	movweq	r0, #20480	; 0x5000
    1744:	200043ac 	andcs	r4, r0, ip, lsr #7
    1748:	000b3110 	andeq	r3, fp, r0, lsl r1
    174c:	622a0100 	eorvs	r0, sl, #0, 2
    1750:	05000000 	streq	r0, [r0, #-0]
    1754:	00435403 	subeq	r5, r3, r3, lsl #8
    1758:	0d5a1020 	ldcleq	0, cr1, [sl, #-128]	; 0xffffff80
    175c:	2b010000 	blcs	41764 <startup-0x1ffbe89c>
    1760:	00000062 	andeq	r0, r0, r2, rrx
    1764:	438c0305 	orrmi	r0, ip, #335544320	; 0x14000000
    1768:	ee102000 	cdp	0, 1, cr2, cr0, cr0, {0}
    176c:	0100000b 	tsteq	r0, fp
    1770:	0000622c 	andeq	r6, r0, ip, lsr #4
    1774:	d0030500 	andle	r0, r3, r0, lsl #10
    1778:	10200043 	eorne	r0, r0, r3, asr #32
    177c:	00000c26 	andeq	r0, r0, r6, lsr #24
    1780:	00622d01 	rsbeq	r2, r2, r1, lsl #26
    1784:	03050000 	movweq	r0, #20480	; 0x5000
    1788:	200043dc 	ldrdcs	r4, [r0], -ip
    178c:	000ada10 	andeq	sp, sl, r0, lsl sl
    1790:	622e0100 	eorvs	r0, lr, #0, 2
    1794:	05000000 	streq	r0, [r0, #-0]
    1798:	0042c403 	subeq	ip, r2, r3, lsl #8
    179c:	0c171020 	ldceq	0, cr1, [r7], {32}
    17a0:	2f010000 	svccs	0x00010000
    17a4:	00000062 	andeq	r0, r0, r2, rrx
    17a8:	43c40305 	bicmi	r0, r4, #335544320	; 0x14000000
    17ac:	3f102000 	svccc	0x00102000
    17b0:	0100000b 	tsteq	r0, fp
    17b4:	00006230 	andeq	r6, r0, r0, lsr r2
    17b8:	40030500 	andmi	r0, r3, r0, lsl #10
    17bc:	10200044 	eorne	r0, r0, r4, asr #32
    17c0:	00000c64 	andeq	r0, r0, r4, ror #24
    17c4:	00623101 	rsbeq	r3, r2, r1, lsl #2
    17c8:	03050000 	movweq	r0, #20480	; 0x5000
    17cc:	20004370 	andcs	r4, r0, r0, ror r3
    17d0:	000a7b10 	andeq	r7, sl, r0, lsl fp
    17d4:	62320100 	eorsvs	r0, r2, #0, 2
    17d8:	05000000 	streq	r0, [r0, #-0]
    17dc:	00434803 	subeq	r4, r3, r3, lsl #16
    17e0:	0b5b1020 	bleq	16c5868 <startup-0x1e93a798>
    17e4:	33010000 	movwcc	r0, #4096	; 0x1000
    17e8:	00000062 	andeq	r0, r0, r2, rrx
    17ec:	43640305 	cmnmi	r4, #335544320	; 0x14000000
    17f0:	ea102000 	b	4097f8 <startup-0x1fbf6808>
    17f4:	0100000c 	tsteq	r0, ip
    17f8:	00014c36 	andeq	r4, r1, r6, lsr ip
    17fc:	dc030500 	cfstr32le	mvfx0, [r3], {-0}
    1800:	10200042 	eorne	r0, r0, r2, asr #32
    1804:	00000d2a 	andeq	r0, r0, sl, lsr #26
    1808:	00a43701 	adceq	r3, r4, r1, lsl #14
    180c:	03050000 	movweq	r0, #20480	; 0x5000
    1810:	20004300 	andcs	r4, r0, r0, lsl #6
    1814:	000db110 	andeq	fp, sp, r0, lsl r1
    1818:	a4380100 	ldrtge	r0, [r8], #-256	; 0xffffff00
    181c:	05000000 	streq	r0, [r0, #-0]
    1820:	0042d003 	subeq	sp, r2, r3
    1824:	0bc11020 	bleq	ff0458ac <firstTime.4040+0xdf03b3f0>
    1828:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    182c:	000000a4 	andeq	r0, r0, r4, lsr #1
    1830:	43b80305 			; <UNDEFINED> instruction: 0x43b80305
    1834:	5f102000 	svcpl	0x00102000
    1838:	0100000a 	tsteq	r0, sl
    183c:	0000a43a 	andeq	sl, r0, sl, lsr r4
    1840:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
    1844:	10200043 	eorne	r0, r0, r3, asr #32
    1848:	00000d88 	andeq	r0, r0, r8, lsl #27
    184c:	00a43b01 	adceq	r3, r4, r1, lsl #22
    1850:	03050000 	movweq	r0, #20480	; 0x5000
    1854:	2000437c 	andcs	r4, r0, ip, ror r3
    1858:	000b9410 	andeq	r9, fp, r0, lsl r4
    185c:	a43c0100 	ldrtge	r0, [ip], #-256	; 0xffffff00
    1860:	05000000 	streq	r0, [r0, #-0]
    1864:	0042b403 	subeq	fp, r2, r3, lsl #8
    1868:	00a40b20 	adceq	r0, r4, r0, lsr #22
    186c:	05190000 	ldreq	r0, [r9, #-0]
    1870:	8e0e0000 	cdphi	0, 0, cr0, cr14, cr0, {0}
    1874:	05000001 	streq	r0, [r0, #-1]
    1878:	0c591000 	mraeq	r1, r9, acc0
    187c:	3f010000 	svccc	0x00010000
    1880:	00000509 	andeq	r0, r0, r9, lsl #10
    1884:	43e80305 	mvnmi	r0, #335544320	; 0x14000000
    1888:	e0112000 	ands	r2, r1, r0
    188c:	0100000c 	tsteq	r0, ip
    1890:	001c0c76 	andseq	r0, ip, r6, ror ip
    1894:	00015820 	andeq	r5, r1, r0, lsr #16
    1898:	5f9c0100 	svcpl	0x009c0100
    189c:	12000005 	andne	r0, r0, #5
    18a0:	00000cea 	andeq	r0, r0, sl, ror #25
    18a4:	01627601 	cmneq	r2, r1, lsl #12
    18a8:	91020000 	mrsls	r0, (UNDEF: 2)
    18ac:	08d40f6c 	ldmeq	r4, {r2, r3, r5, r6, r8, r9, sl, fp}^
    18b0:	77010000 	strvc	r0, [r1, -r0]
    18b4:	0000012e 	andeq	r0, r0, lr, lsr #2
    18b8:	82a40305 	adchi	r0, r4, #335544320	; 0x14000000
    18bc:	13002000 	movwne	r2, #0
    18c0:	00000484 	andeq	r0, r0, r4, lsl #9
    18c4:	1a004001 	bne	118d0 <startup-0x1ffee730>
    18c8:	020c2000 	andeq	r2, ip, #0
    18cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    18d0:	000d690f 	andeq	r6, sp, pc, lsl #18
    18d4:	9e420100 	dvflss	f0, f2, f0
    18d8:	02000000 	andeq	r0, r0, #0
    18dc:	730f7491 	movwvc	r7, #62609	; 0xf491
    18e0:	0100000d 	tsteq	r0, sp
    18e4:	00009e45 	andeq	r9, r0, r5, asr #28
    18e8:	70910200 	addsvc	r0, r1, r0, lsl #4
    18ec:	000b690f 	andeq	r6, fp, pc, lsl #18
    18f0:	9e480100 	dvflse	f0, f0, f0
    18f4:	02000000 	andeq	r0, r0, #0
    18f8:	8a0f6c91 	bhi	3dcb44 <startup-0x1fc234bc>
    18fc:	0100000a 	tsteq	r0, sl
    1900:	00009e4c 	andeq	r9, r0, ip, asr #28
    1904:	68910200 	ldmvs	r1, {r9}
    1908:	000d930f 	andeq	r9, sp, pc, lsl #6
    190c:	9e4f0100 	dvflse	f0, f7, f0
    1910:	02000000 	andeq	r0, r0, #0
    1914:	270f6491 			; <UNDEFINED> instruction: 0x270f6491
    1918:	0100000b 	tsteq	r0, fp
    191c:	00009e52 	andeq	r9, r0, r2, asr lr
    1920:	60910200 	addsvs	r0, r1, r0, lsl #4
    1924:	000d3f0f 	andeq	r3, sp, pc, lsl #30
    1928:	9e570100 	rdflss	f0, f7, f0
    192c:	02000000 	andeq	r0, r0, #0
    1930:	9d0f5c91 	stcls	12, cr5, [pc, #-580]	; 16f4 <startup-0x1fffe90c>
    1934:	0100000d 	tsteq	r0, sp
    1938:	00009e5a 	andeq	r9, r0, sl, asr lr
    193c:	58910200 	ldmpl	r1, {r9}
    1940:	000da70f 	andeq	sl, sp, pc, lsl #14
    1944:	9e5d0100 	rdflse	f0, f5, f0
    1948:	02000000 	andeq	r0, r0, #0
    194c:	b00f5491 	mullt	pc, r1, r4	; <UNPREDICTABLE>
    1950:	0100000a 	tsteq	r0, sl
    1954:	00009e61 	andeq	r9, r0, r1, ror #28
    1958:	50910200 	addspl	r0, r1, r0, lsl #4
    195c:	000af40f 	andeq	pc, sl, pc, lsl #8
    1960:	9e640100 	powlss	f0, f4, f0
    1964:	02000000 	andeq	r0, r0, #0
    1968:	fe0f4c91 	mcr2	12, 0, r4, cr15, cr1, {4}
    196c:	0100000a 	tsteq	r0, sl
    1970:	00009e67 	andeq	r9, r0, r7, ror #28
    1974:	48910200 	ldmmi	r1, {r9}
    1978:	000dbc0f 	andeq	fp, sp, pc, lsl #24
    197c:	9e6b0100 	powlse	f0, f3, f0
    1980:	02000000 	andeq	r0, r0, #0
    1984:	440f4491 	strmi	r4, [pc], #-1169	; 198c <startup-0x1fffe674>
    1988:	0100000c 	tsteq	r0, ip
    198c:	00009e6e 	andeq	r9, r0, lr, ror #28
    1990:	40910200 	addsmi	r0, r1, r0, lsl #4
    1994:	000b1d0f 	andeq	r1, fp, pc, lsl #26
    1998:	9e710100 	rpwlss	f0, f1, f0
    199c:	03000000 	movweq	r0, #0
    19a0:	007fbc91 			; <UNDEFINED> instruction: 0x007fbc91
    19a4:	00049800 	andeq	r9, r4, r0, lsl #16
    19a8:	52000400 	andpl	r0, r0, #0, 8
    19ac:	04000005 	streq	r0, [r0], #-5
    19b0:	00008f01 	andeq	r8, r0, r1, lsl #30
    19b4:	0f8a0c00 	svceq	0x008a0c00
    19b8:	1d640000 	stclne	0, cr0, [r4, #-0]
    19bc:	02382000 	eorseq	r2, r8, #0
    19c0:	08690000 	stmdaeq	r9!, {}^	; <UNPREDICTABLE>
    19c4:	0c020000 	stceq	0, cr0, [r2], {-0}
    19c8:	004e0502 	subeq	r0, lr, r2, lsl #10
    19cc:	4b030000 	blmi	c19d4 <startup-0x1ff3e62c>
    19d0:	02000003 	andeq	r0, r0, #3
    19d4:	00004e07 	andeq	r4, r0, r7, lsl #28
    19d8:	e4030000 	str	r0, [r3], #-0
    19dc:	02000006 	andeq	r0, r0, #6
    19e0:	00004e08 	andeq	r4, r0, r8, lsl #28
    19e4:	df030400 	svcle	0x00030400
    19e8:	02000014 	andeq	r0, r0, #20
    19ec:	00005509 	andeq	r5, r0, r9, lsl #10
    19f0:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    19f4:	036f0704 	cmneq	pc, #4, 14	; 0x100000
    19f8:	04050000 	streq	r0, [r5], #-0
    19fc:	0000005b 	andeq	r0, r0, fp, asr r0
    1a00:	ae080104 	adfgee	f0, f0, f4
    1a04:	06000004 	streq	r0, [r0], -r4
    1a08:	00001631 	andeq	r1, r0, r1, lsr r6
    1a0c:	00210a02 	eoreq	r0, r1, r2, lsl #20
    1a10:	24070000 	strcs	r0, [r7], #-0
    1a14:	0c000000 	stceq	0, cr0, [r0], {-0}
    1a18:	009e0603 	addseq	r0, lr, r3, lsl #12
    1a1c:	a4030000 	strge	r0, [r3], #-0
    1a20:	03000005 	movweq	r0, #5
    1a24:	00009e07 	andeq	r9, r0, r7, lsl #28
    1a28:	2b030000 	blcs	c1a30 <startup-0x1ff3e5d0>
    1a2c:	03000000 	movweq	r0, #0
    1a30:	00009e08 	andeq	r9, r0, r8, lsl #28
    1a34:	20030400 	andcs	r0, r3, r0, lsl #8
    1a38:	03000000 	movweq	r0, #0
    1a3c:	00009e09 	andeq	r9, r0, r9, lsl #28
    1a40:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    1a44:	00006204 	andeq	r6, r0, r4, lsl #4
    1a48:	0fff0600 	svceq	0x00ff0600
    1a4c:	0a030000 	beq	c1a54 <startup-0x1ff3e5ac>
    1a50:	0000006d 	andeq	r0, r0, sp, rrx
    1a54:	0006a907 	andeq	sl, r6, r7, lsl #18
    1a58:	06042400 	streq	r2, [r4], -r0, lsl #8
    1a5c:	00000128 	andeq	r0, r0, r8, lsr #2
    1a60:	00043c03 	andeq	r3, r4, r3, lsl #24
    1a64:	28070400 	stmdacs	r7, {sl}
    1a68:	00000001 	andeq	r0, r0, r1
    1a6c:	0006b503 	andeq	fp, r6, r3, lsl #10
    1a70:	2e080400 	cfcpyscs	mvf0, mvf8
    1a74:	04000001 	streq	r0, [r0], #-1
    1a78:	00060f03 	andeq	r0, r6, r3, lsl #30
    1a7c:	2e090400 	cfcpyscs	mvf0, mvf9
    1a80:	08000001 	stmdaeq	r0, {r0}
    1a84:	00063b03 	andeq	r3, r6, r3, lsl #22
    1a88:	460c0400 	strmi	r0, [ip], -r0, lsl #8
    1a8c:	0c000001 	stceq	0, cr0, [r0], {1}
    1a90:	00033203 	andeq	r3, r3, r3, lsl #4
    1a94:	460d0400 	strmi	r0, [sp], -r0, lsl #8
    1a98:	10000001 	andne	r0, r0, r1
    1a9c:	00044e03 	andeq	r4, r4, r3, lsl #28
    1aa0:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
    1aa4:	14000001 	strne	r0, [r0], #-1
    1aa8:	00006003 	andeq	r6, r0, r3
    1aac:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
    1ab0:	18000001 	stmdane	r0, {r0}
    1ab4:	0003bf03 	andeq	fp, r3, r3, lsl #30
    1ab8:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
    1abc:	1c000001 	stcne	0, cr0, [r0], {1}
    1ac0:	0003cf03 	andeq	ip, r3, r3, lsl #30
    1ac4:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
    1ac8:	20000001 	andcs	r0, r0, r1
    1acc:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    1ad0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1ad4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1ad8:	40090074 	andmi	r0, r9, r4, ror r0
    1adc:	0a000001 	beq	1ae8 <startup-0x1fffe518>
    1ae0:	00000140 	andeq	r0, r0, r0, asr #2
    1ae4:	af040500 	svcge	0x00040500
    1ae8:	05000000 	streq	r0, [r0, #-0]
    1aec:	00013504 	andeq	r3, r1, r4, lsl #10
    1af0:	06aa0600 	strteq	r0, [sl], r0, lsl #12
    1af4:	15040000 	strne	r0, [r4, #-0]
    1af8:	000000af 	andeq	r0, r0, pc, lsr #1
    1afc:	0001620b 	andeq	r6, r1, fp, lsl #4
    1b00:	00016200 	andeq	r6, r1, r0, lsl #4
    1b04:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    1b08:	00014c04 	andeq	r4, r1, r4, lsl #24
    1b0c:	05310d00 	ldreq	r0, [r1, #-3328]!	; 0xfffff300
    1b10:	1c040000 	stcne	0, cr0, [r4], {-0}
    1b14:	00000157 	andeq	r0, r0, r7, asr r1
    1b18:	00040a0d 	andeq	r0, r4, sp, lsl #20
    1b1c:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
    1b20:	0b000001 	bleq	1b2c <startup-0x1fffe4d4>
    1b24:	0000005b 	andeq	r0, r0, fp, asr r0
    1b28:	0000018e 	andeq	r0, r0, lr, lsl #3
    1b2c:	00018e0e 	andeq	r8, r1, lr, lsl #28
    1b30:	04003500 	streq	r3, [r0], #-1280	; 0xfffffb00
    1b34:	03ec0704 	mvneq	r0, #4, 14	; 0x100000
    1b38:	060f0000 	streq	r0, [pc], -r0
    1b3c:	0500000e 	streq	r0, [r0, #-14]
    1b40:	00017e03 	andeq	r7, r1, r3, lsl #28
    1b44:	a8030500 	stmdage	r3, {r8, sl}
    1b48:	0f200082 	svceq	0x00200082
    1b4c:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    1b50:	017e0306 	cmneq	lr, r6, lsl #6
    1b54:	03050000 	movweq	r0, #20480	; 0x5000
    1b58:	200082e0 	andcs	r8, r0, r0, ror #5
    1b5c:	000f100f 	andeq	r1, pc, pc
    1b60:	7e030700 	cdpvc	7, 0, cr0, cr3, cr0, {0}
    1b64:	05000001 	streq	r0, [r0, #-1]
    1b68:	00831803 	addeq	r1, r3, r3, lsl #16
    1b6c:	0ea90f20 	cdpeq	15, 10, cr0, cr9, cr0, {1}
    1b70:	03080000 	movweq	r0, #32768	; 0x8000
    1b74:	0000017e 	andeq	r0, r0, lr, ror r1
    1b78:	83500305 	cmphi	r0, #335544320	; 0x14000000
    1b7c:	220f2000 	andcs	r2, pc, #0
    1b80:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
    1b84:	00017e03 	andeq	r7, r1, r3, lsl #28
    1b88:	88030500 	stmdahi	r3, {r8, sl}
    1b8c:	0f200083 	svceq	0x00200083
    1b90:	00000e54 	andeq	r0, r0, r4, asr lr
    1b94:	017e030a 	cmneq	lr, sl, lsl #6
    1b98:	03050000 	movweq	r0, #20480	; 0x5000
    1b9c:	200083c0 	andcs	r8, r0, r0, asr #7
    1ba0:	000fc90f 	andeq	ip, pc, pc, lsl #18
    1ba4:	7e030b00 	vmlavc.f64	d0, d3, d0
    1ba8:	05000001 	streq	r0, [r0, #-1]
    1bac:	0083f803 	addeq	pc, r3, r3, lsl #16
    1bb0:	0e7e0f20 	cdpeq	15, 7, cr0, cr14, cr0, {1}
    1bb4:	030c0000 	movweq	r0, #49152	; 0xc000
    1bb8:	0000017e 	andeq	r0, r0, lr, ror r1
    1bbc:	84300305 	ldrthi	r0, [r0], #-773	; 0xfffffcfb
    1bc0:	bb0f2000 	bllt	3c9bc8 <startup-0x1fc36438>
    1bc4:	0d00000e 	stceq	0, cr0, [r0, #-56]	; 0xffffffc8
    1bc8:	00017e03 	andeq	r7, r1, r3, lsl #28
    1bcc:	68030500 	stmdavs	r3, {r8, sl}
    1bd0:	10200084 	eorne	r0, r0, r4, lsl #1
    1bd4:	00000f57 	andeq	r0, r0, r7, asr pc
    1bd8:	009e0e01 	addseq	r0, lr, r1, lsl #28
    1bdc:	03050000 	movweq	r0, #20480	; 0x5000
    1be0:	20004524 	andcs	r4, r0, r4, lsr #10
    1be4:	000de310 	andeq	lr, sp, r0, lsl r3
    1be8:	9e0f0100 	adflse	f0, f7, f0
    1bec:	05000000 	streq	r0, [r0, #-0]
    1bf0:	00445003 	subeq	r5, r4, r3
    1bf4:	0e381020 	cdpeq	0, 3, cr1, cr8, cr0, {1}
    1bf8:	10010000 	andne	r0, r1, r0
    1bfc:	0000009e 	muleq	r0, lr, r0
    1c00:	45500305 	ldrbmi	r0, [r0, #-773]	; 0xfffffcfb
    1c04:	d7102000 	ldrle	r2, [r0, -r0]
    1c08:	0100000d 	tsteq	r0, sp
    1c0c:	00009e11 	andeq	r9, r0, r1, lsl lr
    1c10:	60030500 	andvs	r0, r3, r0, lsl #10
    1c14:	10200045 	eorne	r0, r0, r5, asr #32
    1c18:	00000ed8 	ldrdeq	r0, [r0], -r8
    1c1c:	009e1201 	addseq	r1, lr, r1, lsl #4
    1c20:	03050000 	movweq	r0, #20480	; 0x5000
    1c24:	200044c4 	andcs	r4, r0, r4, asr #9
    1c28:	000f3f10 	andeq	r3, pc, r0, lsl pc	; <UNPREDICTABLE>
    1c2c:	9e130100 	muflss	f0, f3, f0
    1c30:	05000000 	streq	r0, [r0, #-0]
    1c34:	00445403 	subeq	r5, r4, r3, lsl #8
    1c38:	0e721020 	cdpeq	0, 7, cr1, cr2, cr0, {1}
    1c3c:	14010000 	strne	r0, [r1], #-0
    1c40:	0000009e 	muleq	r0, lr, r0
    1c44:	44ec0305 	strbtmi	r0, [ip], #773	; 0x305
    1c48:	cd102000 	ldcgt	0, cr2, [r0, #-0]
    1c4c:	0100000e 	tsteq	r0, lr
    1c50:	00009e15 	andeq	r9, r0, r5, lsl lr
    1c54:	28030500 	stmdacs	r3, {r8, sl}
    1c58:	10200045 	eorne	r0, r0, r5, asr #32
    1c5c:	00000f63 	andeq	r0, r0, r3, ror #30
    1c60:	009e1601 	addseq	r1, lr, r1, lsl #12
    1c64:	03050000 	movweq	r0, #20480	; 0x5000
    1c68:	20004514 	andcs	r4, r0, r4, lsl r5
    1c6c:	000e9a10 	andeq	r9, lr, r0, lsl sl
    1c70:	62180100 	andsvs	r0, r8, #0, 2
    1c74:	05000000 	streq	r0, [r0, #-0]
    1c78:	0044a003 	subeq	sl, r4, r3
    1c7c:	0dee1020 	stcleq	0, cr1, [lr, #128]!	; 0x80
    1c80:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    1c84:	00000062 	andeq	r0, r0, r2, rrx
    1c88:	45380305 	ldrmi	r0, [r8, #-773]!	; 0xfffffcfb
    1c8c:	e3102000 	tst	r0, #0
    1c90:	0100000e 	tsteq	r0, lr
    1c94:	0000621a 	andeq	r6, r0, sl, lsl r2
    1c98:	c8030500 	stmdagt	r3, {r8, sl}
    1c9c:	10200044 	eorne	r0, r0, r4, asr #32
    1ca0:	00000e44 	andeq	r0, r0, r4, asr #28
    1ca4:	00621b01 	rsbeq	r1, r2, r1, lsl #22
    1ca8:	03050000 	movweq	r0, #20480	; 0x5000
    1cac:	20004494 	mulcs	r0, r4, r4
    1cb0:	000e2810 	andeq	r2, lr, r0, lsl r8
    1cb4:	621c0100 	andsvs	r0, ip, #0, 2
    1cb8:	05000000 	streq	r0, [r0, #-0]
    1cbc:	00454403 	subeq	r4, r5, r3, lsl #8
    1cc0:	0ef11020 	cdpeq	0, 15, cr1, cr1, cr0, {1}
    1cc4:	1d010000 	stcne	0, cr0, [r1, #-0]
    1cc8:	00000062 	andeq	r0, r0, r2, rrx
    1ccc:	44e00305 	strbtmi	r0, [r0], #773	; 0x305
    1cd0:	00102000 	andseq	r2, r0, r0
    1cd4:	0100000f 	tsteq	r0, pc
    1cd8:	0000621e 	andeq	r6, r0, lr, lsl r2
    1cdc:	d4030500 	strle	r0, [r3], #-1280	; 0xfffffb00
    1ce0:	10200044 	eorne	r0, r0, r4, asr #32
    1ce4:	00000e18 	andeq	r0, r0, r8, lsl lr
    1ce8:	00621f01 	rsbeq	r1, r2, r1, lsl #30
    1cec:	03050000 	movweq	r0, #20480	; 0x5000
    1cf0:	200044ac 	andcs	r4, r0, ip, lsr #9
    1cf4:	000f7b10 	andeq	r7, pc, r0, lsl fp	; <UNPREDICTABLE>
    1cf8:	62200100 	eorvs	r0, r0, #0, 2
    1cfc:	05000000 	streq	r0, [r0, #-0]
    1d00:	00451803 	subeq	r1, r5, r3, lsl #16
    1d04:	0dfd1020 	ldcleq	0, cr1, [sp, #128]!	; 0x80
    1d08:	23010000 	movwcs	r0, #4096	; 0x1000
    1d0c:	0000014c 	andeq	r0, r0, ip, asr #2
    1d10:	44f00305 	ldrbtmi	r0, [r0], #773	; 0x305
    1d14:	4b102000 	blmi	409d1c <startup-0x1fbf62e4>
    1d18:	0100000f 	tsteq	r0, pc
    1d1c:	0000a424 	andeq	sl, r0, r4, lsr #8
    1d20:	2c030500 	cfstr32cs	mvfx0, [r3], {-0}
    1d24:	10200045 	eorne	r0, r0, r5, asr #32
    1d28:	00000fdb 	ldrdeq	r0, [r0], -fp
    1d2c:	00a42501 	adceq	r2, r4, r1, lsl #10
    1d30:	03050000 	movweq	r0, #20480	; 0x5000
    1d34:	20004488 	andcs	r4, r0, r8, lsl #9
    1d38:	000e6610 	andeq	r6, lr, r0, lsl r6
    1d3c:	a4260100 	strtge	r0, [r6], #-256	; 0xffffff00
    1d40:	05000000 	streq	r0, [r0, #-0]
    1d44:	00455403 	subeq	r5, r5, r3, lsl #8
    1d48:	0f331020 	svceq	0x00331020
    1d4c:	27010000 	strcs	r0, [r1, -r0]
    1d50:	000000a4 	andeq	r0, r0, r4, lsr #1
    1d54:	44b80305 	ldrtmi	r0, [r8], #773	; 0x305
    1d58:	a40b2000 	strge	r2, [fp], #-0
    1d5c:	c5000000 	strgt	r0, [r0, #-0]
    1d60:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    1d64:	0000018e 	andeq	r0, r0, lr, lsl #3
    1d68:	6f100003 	svcvs	0x00100003
    1d6c:	0100000f 	tsteq	r0, pc
    1d70:	0003b528 	andeq	fp, r3, r8, lsr #10
    1d74:	58030500 	stmdapl	r3, {r8, sl}
    1d78:	11200044 			; <UNDEFINED> instruction: 0x11200044
    1d7c:	00000e8f 	andeq	r0, r0, pc, lsl #29
    1d80:	1ea44c01 	cdpne	12, 10, cr4, cr4, cr1, {0}
    1d84:	00f82000 	rscseq	r2, r8, r0
    1d88:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d8c:	0000040b 	andeq	r0, r0, fp, lsl #8
    1d90:	000dfd12 	andeq	pc, sp, r2, lsl sp	; <UNPREDICTABLE>
    1d94:	624c0100 	subvs	r0, ip, #0, 2
    1d98:	02000001 	andeq	r0, r0, #1
    1d9c:	d40f6c91 	strle	r6, [pc], #-3217	; 1da4 <startup-0x1fffe25c>
    1da0:	01000008 	tsteq	r0, r8
    1da4:	00012e4d 	andeq	r2, r1, sp, asr #28
    1da8:	a0030500 	andge	r0, r3, r0, lsl #10
    1dac:	00200084 	eoreq	r0, r0, r4, lsl #1
    1db0:	00048413 	andeq	r8, r4, r3, lsl r4
    1db4:	64290100 	strtvs	r0, [r9], #-256	; 0xffffff00
    1db8:	4020001d 	eormi	r0, r0, sp, lsl r0
    1dbc:	01000001 	tsteq	r0, r1
    1dc0:	0d690f9c 	stcleq	15, cr0, [r9, #-624]!	; 0xfffffd90
    1dc4:	2b010000 	blcs	41dcc <startup-0x1ffbe234>
    1dc8:	0000009e 	muleq	r0, lr, r0
    1dcc:	0f749102 	svceq	0x00749102
    1dd0:	00000d73 	andeq	r0, r0, r3, ror sp
    1dd4:	009e2e01 	addseq	r2, lr, r1, lsl #28
    1dd8:	91020000 	mrsls	r0, (UNDEF: 2)
    1ddc:	0b690f70 	bleq	1a45ba4 <startup-0x1e5ba45c>
    1de0:	31010000 	mrscc	r0, (UNDEF: 1)
    1de4:	0000009e 	muleq	r0, lr, r0
    1de8:	0f6c9102 	svceq	0x006c9102
    1dec:	00000a8a 	andeq	r0, r0, sl, lsl #21
    1df0:	009e3501 	addseq	r3, lr, r1, lsl #10
    1df4:	91020000 	mrsls	r0, (UNDEF: 2)
    1df8:	0d930f68 	ldceq	15, cr0, [r3, #416]	; 0x1a0
    1dfc:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    1e00:	0000009e 	muleq	r0, lr, r0
    1e04:	0f649102 	svceq	0x00649102
    1e08:	00000b27 	andeq	r0, r0, r7, lsr #22
    1e0c:	009e3b01 	addseq	r3, lr, r1, lsl #22
    1e10:	91020000 	mrsls	r0, (UNDEF: 2)
    1e14:	0d3f0f60 	ldceq	15, cr0, [pc, #-384]!	; 1c9c <startup-0x1fffe364>
    1e18:	40010000 	andmi	r0, r1, r0
    1e1c:	0000009e 	muleq	r0, lr, r0
    1e20:	0f5c9102 	svceq	0x005c9102
    1e24:	00000d9d 	muleq	r0, sp, sp
    1e28:	009e4301 	addseq	r4, lr, r1, lsl #6
    1e2c:	91020000 	mrsls	r0, (UNDEF: 2)
    1e30:	0da70f58 	stceq	15, cr0, [r7, #352]!	; 0x160
    1e34:	46010000 	strmi	r0, [r1], -r0
    1e38:	0000009e 	muleq	r0, lr, r0
    1e3c:	00549102 	subseq	r9, r4, r2, lsl #2
    1e40:	00053500 	andeq	r3, r5, r0, lsl #10
    1e44:	52000400 	andpl	r0, r0, #0, 8
    1e48:	04000006 	streq	r0, [r0], #-6
    1e4c:	00008f01 	andeq	r8, r0, r1, lsl #30
    1e50:	10c40c00 	sbcne	r0, r4, r0, lsl #24
    1e54:	1f9c0000 	svcne	0x009c0000
    1e58:	03282000 			; <UNDEFINED> instruction: 0x03282000
    1e5c:	09ce0000 	stmibeq	lr, {}^	; <UNPREDICTABLE>
    1e60:	0c020000 	stceq	0, cr0, [r2], {-0}
    1e64:	004e0502 	subeq	r0, lr, r2, lsl #10
    1e68:	4b030000 	blmi	c1e70 <startup-0x1ff3e190>
    1e6c:	02000003 	andeq	r0, r0, #3
    1e70:	00004e07 	andeq	r4, r0, r7, lsl #28
    1e74:	e4030000 	str	r0, [r3], #-0
    1e78:	02000006 	andeq	r0, r0, #6
    1e7c:	00004e08 	andeq	r4, r0, r8, lsl #28
    1e80:	df030400 	svcle	0x00030400
    1e84:	02000014 	andeq	r0, r0, #20
    1e88:	00005509 	andeq	r5, r0, r9, lsl #10
    1e8c:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    1e90:	036f0704 	cmneq	pc, #4, 14	; 0x100000
    1e94:	04050000 	streq	r0, [r5], #-0
    1e98:	0000005b 	andeq	r0, r0, fp, asr r0
    1e9c:	ae080104 	adfgee	f0, f0, f4
    1ea0:	06000004 	streq	r0, [r0], -r4
    1ea4:	00001631 	andeq	r1, r0, r1, lsr r6
    1ea8:	00210a02 	eoreq	r0, r1, r2, lsl #20
    1eac:	24070000 	strcs	r0, [r7], #-0
    1eb0:	0c000000 	stceq	0, cr0, [r0], {-0}
    1eb4:	009e0603 	addseq	r0, lr, r3, lsl #12
    1eb8:	a4030000 	strge	r0, [r3], #-0
    1ebc:	03000005 	movweq	r0, #5
    1ec0:	00009e07 	andeq	r9, r0, r7, lsl #28
    1ec4:	2b030000 	blcs	c1ecc <startup-0x1ff3e134>
    1ec8:	03000000 	movweq	r0, #0
    1ecc:	00009e08 	andeq	r9, r0, r8, lsl #28
    1ed0:	20030400 	andcs	r0, r3, r0, lsl #8
    1ed4:	03000000 	movweq	r0, #0
    1ed8:	00009e09 	andeq	r9, r0, r9, lsl #28
    1edc:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    1ee0:	00006204 	andeq	r6, r0, r4, lsl #4
    1ee4:	0fff0600 	svceq	0x00ff0600
    1ee8:	0a030000 	beq	c1ef0 <startup-0x1ff3e110>
    1eec:	0000006d 	andeq	r0, r0, sp, rrx
    1ef0:	0006a907 	andeq	sl, r6, r7, lsl #18
    1ef4:	06042400 	streq	r2, [r4], -r0, lsl #8
    1ef8:	00000128 	andeq	r0, r0, r8, lsr #2
    1efc:	00043c03 	andeq	r3, r4, r3, lsl #24
    1f00:	28070400 	stmdacs	r7, {sl}
    1f04:	00000001 	andeq	r0, r0, r1
    1f08:	0006b503 	andeq	fp, r6, r3, lsl #10
    1f0c:	2e080400 	cfcpyscs	mvf0, mvf8
    1f10:	04000001 	streq	r0, [r0], #-1
    1f14:	00060f03 	andeq	r0, r6, r3, lsl #30
    1f18:	2e090400 	cfcpyscs	mvf0, mvf9
    1f1c:	08000001 	stmdaeq	r0, {r0}
    1f20:	00063b03 	andeq	r3, r6, r3, lsl #22
    1f24:	460c0400 	strmi	r0, [ip], -r0, lsl #8
    1f28:	0c000001 	stceq	0, cr0, [r0], {1}
    1f2c:	00033203 	andeq	r3, r3, r3, lsl #4
    1f30:	460d0400 	strmi	r0, [sp], -r0, lsl #8
    1f34:	10000001 	andne	r0, r0, r1
    1f38:	00044e03 	andeq	r4, r4, r3, lsl #28
    1f3c:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
    1f40:	14000001 	strne	r0, [r0], #-1
    1f44:	00006003 	andeq	r6, r0, r3
    1f48:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
    1f4c:	18000001 	stmdane	r0, {r0}
    1f50:	0003bf03 	andeq	fp, r3, r3, lsl #30
    1f54:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
    1f58:	1c000001 	stcne	0, cr0, [r0], {1}
    1f5c:	0003cf03 	andeq	ip, r3, r3, lsl #30
    1f60:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
    1f64:	20000001 	andcs	r0, r0, r1
    1f68:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    1f6c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1f70:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1f74:	40090074 	andmi	r0, r9, r4, ror r0
    1f78:	0a000001 	beq	1f84 <startup-0x1fffe07c>
    1f7c:	00000140 	andeq	r0, r0, r0, asr #2
    1f80:	af040500 	svcge	0x00040500
    1f84:	05000000 	streq	r0, [r0, #-0]
    1f88:	00013504 	andeq	r3, r1, r4, lsl #10
    1f8c:	06aa0600 	strteq	r0, [sl], r0, lsl #12
    1f90:	15040000 	strne	r0, [r4, #-0]
    1f94:	000000af 	andeq	r0, r0, pc, lsr #1
    1f98:	0001620b 	andeq	r6, r1, fp, lsl #4
    1f9c:	00016200 	andeq	r6, r1, r0, lsl #4
    1fa0:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    1fa4:	00014c04 	andeq	r4, r1, r4, lsl #24
    1fa8:	05310d00 	ldreq	r0, [r1, #-3328]!	; 0xfffff300
    1fac:	1c040000 	stcne	0, cr0, [r4], {-0}
    1fb0:	00000157 	andeq	r0, r0, r7, asr r1
    1fb4:	00040a0d 	andeq	r0, r4, sp, lsl #20
    1fb8:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
    1fbc:	04000001 	streq	r0, [r0], #-1
    1fc0:	03690702 	cmneq	r9, #524288	; 0x80000
    1fc4:	5b0b0000 	blpl	2c1fcc <startup-0x1fd3e034>
    1fc8:	95000000 	strls	r0, [r0, #-0]
    1fcc:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    1fd0:	00000195 	muleq	r0, r5, r1
    1fd4:	04040035 	streq	r0, [r4], #-53	; 0xffffffcb
    1fd8:	0003ec07 	andeq	lr, r3, r7, lsl #24
    1fdc:	0e060f00 	cdpeq	15, 0, cr0, cr6, cr0, {0}
    1fe0:	03050000 	movweq	r0, #20480	; 0x5000
    1fe4:	00000185 	andeq	r0, r0, r5, lsl #3
    1fe8:	84a40305 	strthi	r0, [r4], #773	; 0x305
    1fec:	b80f2000 	stmdalt	pc, {sp}	; <UNPREDICTABLE>
    1ff0:	0600000f 	streq	r0, [r0], -pc
    1ff4:	00018503 	andeq	r8, r1, r3, lsl #10
    1ff8:	dc030500 	cfstr32le	mvfx0, [r3], {-0}
    1ffc:	0f200084 	svceq	0x00200084
    2000:	00000f10 	andeq	r0, r0, r0, lsl pc
    2004:	01850307 	orreq	r0, r5, r7, lsl #6
    2008:	03050000 	movweq	r0, #20480	; 0x5000
    200c:	20008514 	andcs	r8, r0, r4, lsl r5
    2010:	000ea90f 	andeq	sl, lr, pc, lsl #18
    2014:	85030800 	strhi	r0, [r3, #-2048]	; 0xfffff800
    2018:	05000001 	streq	r0, [r0, #-1]
    201c:	00854c03 	addeq	r4, r5, r3, lsl #24
    2020:	0f220f20 	svceq	0x00220f20
    2024:	03090000 	movweq	r0, #36864	; 0x9000
    2028:	00000185 	andeq	r0, r0, r5, lsl #3
    202c:	85840305 	strhi	r0, [r4, #773]	; 0x305
    2030:	540f2000 	strpl	r2, [pc], #-0	; 2038 <startup-0x1fffdfc8>
    2034:	0a00000e 	beq	2074 <startup-0x1fffdf8c>
    2038:	00018503 	andeq	r8, r1, r3, lsl #10
    203c:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
    2040:	0f200085 	svceq	0x00200085
    2044:	00000fc9 	andeq	r0, r0, r9, asr #31
    2048:	0185030b 	orreq	r0, r5, fp, lsl #6
    204c:	03050000 	movweq	r0, #20480	; 0x5000
    2050:	200085f4 	strdcs	r8, [r0], -r4
    2054:	000e7e0f 	andeq	r7, lr, pc, lsl #28
    2058:	85030c00 	strhi	r0, [r3, #-3072]	; 0xfffff400
    205c:	05000001 	streq	r0, [r0, #-1]
    2060:	00862c03 	addeq	r2, r6, r3, lsl #24
    2064:	0ebb0f20 	cdpeq	15, 11, cr0, cr11, cr0, {1}
    2068:	030d0000 	movweq	r0, #53248	; 0xd000
    206c:	00000185 	andeq	r0, r0, r5, lsl #3
    2070:	86640305 	strbthi	r0, [r4], -r5, lsl #6
    2074:	63102000 	tstvs	r0, #0
    2078:	01000010 	tsteq	r0, r0, lsl r0
    207c:	00009e12 	andeq	r9, r0, r2, lsl lr
    2080:	a8030500 	stmdage	r3, {r8, sl}
    2084:	10200045 	eorne	r0, r0, r5, asr #32
    2088:	0000102e 	andeq	r1, r0, lr, lsr #32
    208c:	009e1301 	addseq	r1, lr, r1, lsl #6
    2090:	03050000 	movweq	r0, #20480	; 0x5000
    2094:	20004640 	andcs	r4, r0, r0, asr #12
    2098:	0010f010 	andseq	pc, r0, r0, lsl r0	; <UNPREDICTABLE>
    209c:	9e140100 	muflss	f0, f4, f0
    20a0:	05000000 	streq	r0, [r0, #-0]
    20a4:	00461803 	subeq	r1, r6, r3, lsl #16
    20a8:	10b01020 	adcsne	r1, r0, r0, lsr #32
    20ac:	15010000 	strne	r0, [r1, #-0]
    20b0:	0000009e 	muleq	r0, lr, r0
    20b4:	46240305 	strtmi	r0, [r4], -r5, lsl #6
    20b8:	25102000 	ldrcs	r2, [r0, #-0]
    20bc:	01000010 	tsteq	r0, r0, lsl r0
    20c0:	00009e16 	andeq	r9, r0, r6, lsl lr
    20c4:	94030500 	strls	r0, [r3], #-1280	; 0xfffffb00
    20c8:	10200045 	eorne	r0, r0, r5, asr #32
    20cc:	00001009 	andeq	r1, r0, r9
    20d0:	009e1701 	addseq	r1, lr, r1, lsl #14
    20d4:	03050000 	movweq	r0, #20480	; 0x5000
    20d8:	2000461c 	andcs	r4, r0, ip, lsl r6
    20dc:	00101710 	andseq	r1, r0, r0, lsl r7
    20e0:	9e180100 	muflse	f0, f0, f0
    20e4:	05000000 	streq	r0, [r0, #-0]
    20e8:	0045a403 	subeq	sl, r5, r3, lsl #8
    20ec:	10811020 	addne	r1, r1, r0, lsr #32
    20f0:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    20f4:	0000009e 	muleq	r0, lr, r0
    20f8:	46500305 	ldrbmi	r0, [r0], -r5, lsl #6
    20fc:	98102000 	ldmdals	r0, {sp}
    2100:	01000010 	tsteq	r0, r0, lsl r0
    2104:	00009e1a 	andeq	r9, r0, sl, lsl lr
    2108:	20030500 	andcs	r0, r3, r0, lsl #10
    210c:	10200046 	eorne	r0, r0, r6, asr #32
    2110:	00001101 	andeq	r1, r0, r1, lsl #2
    2114:	00621c01 	rsbeq	r1, r2, r1, lsl #24
    2118:	03050000 	movweq	r0, #20480	; 0x5000
    211c:	20004634 	andcs	r4, r0, r4, lsr r6
    2120:	00103710 	andseq	r3, r0, r0, lsl r7
    2124:	621d0100 	andsvs	r0, sp, #0, 2
    2128:	05000000 	streq	r0, [r0, #-0]
    212c:	0045ac03 	subeq	sl, r5, r3, lsl #24
    2130:	10571020 	subsne	r1, r7, r0, lsr #32
    2134:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    2138:	00000062 	andeq	r0, r0, r2, rrx
    213c:	466c0305 	strbtmi	r0, [ip], -r5, lsl #6
    2140:	ac102000 	ldcge	0, cr2, [r0], {-0}
    2144:	01000010 	tsteq	r0, r0, lsl r0
    2148:	0000621f 	andeq	r6, r0, pc, lsl r2
    214c:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
    2150:	10200045 	eorne	r0, r0, r5, asr #32
    2154:	00001005 	andeq	r1, r0, r5
    2158:	00622001 	rsbeq	r2, r2, r1
    215c:	03050000 	movweq	r0, #20480	; 0x5000
    2160:	20004660 	andcs	r4, r0, r0, ror #12
    2164:	00102110 	andseq	r2, r0, r0, lsl r1
    2168:	62210100 	eorvs	r0, r1, #0, 2
    216c:	05000000 	streq	r0, [r0, #-0]
    2170:	00459803 	subeq	r9, r5, r3, lsl #16
    2174:	10131020 	andsne	r1, r3, r0, lsr #32
    2178:	22010000 	andcs	r0, r1, #0
    217c:	00000062 	andeq	r0, r0, r2, rrx
    2180:	46440305 	strbmi	r0, [r4], -r5, lsl #6
    2184:	94102000 	ldrls	r2, [r0], #-0
    2188:	01000010 	tsteq	r0, r0, lsl r0
    218c:	00006223 	andeq	r6, r0, r3, lsr #4
    2190:	b8030500 	stmdalt	r3, {r8, sl}
    2194:	10200045 	eorne	r0, r0, r5, asr #32
    2198:	0000107d 	andeq	r1, r0, sp, ror r0
    219c:	00622401 	rsbeq	r2, r2, r1, lsl #8
    21a0:	03050000 	movweq	r0, #20480	; 0x5000
    21a4:	20004628 	andcs	r4, r0, r8, lsr #12
    21a8:	0010fa10 	andseq	pc, r0, r0, lsl sl	; <UNPREDICTABLE>
    21ac:	4c270100 	stfmis	f0, [r7], #-0
    21b0:	05000001 	streq	r0, [r0, #-1]
    21b4:	00456403 	subeq	r6, r5, r3, lsl #8
    21b8:	0ffb1020 	svceq	0x00fb1020
    21bc:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    21c0:	000000a4 	andeq	r0, r0, r4, lsr #1
    21c4:	460c0305 	strmi	r0, [ip], -r5, lsl #6
    21c8:	ba102000 	blt	40a1d0 <startup-0x1fbf5e30>
    21cc:	01000010 	tsteq	r0, r0, lsl r0
    21d0:	0000a429 	andeq	sl, r0, r9, lsr #8
    21d4:	88030500 	stmdahi	r3, {r8, sl}
    21d8:	10200045 	eorne	r0, r0, r5, asr #32
    21dc:	0000108a 	andeq	r1, r0, sl, lsl #1
    21e0:	00a42a01 	adceq	r2, r4, r1, lsl #20
    21e4:	03050000 	movweq	r0, #20480	; 0x5000
    21e8:	20004600 	andcs	r4, r0, r0, lsl #12
    21ec:	000ff110 	andeq	pc, pc, r0, lsl r1	; <UNPREDICTABLE>
    21f0:	a42b0100 	strtge	r0, [fp], #-256	; 0xffffff00
    21f4:	05000000 	streq	r0, [r0, #-0]
    21f8:	00465403 	subeq	r5, r6, r3, lsl #8
    21fc:	00a40b20 	adceq	r0, r4, r0, lsr #22
    2200:	03cc0000 	biceq	r0, ip, #0
    2204:	950e0000 	strls	r0, [lr, #-0]
    2208:	03000001 	movweq	r0, #1
    220c:	10441000 	subne	r1, r4, r0
    2210:	2c010000 	stccs	0, cr0, [r1], {-0}
    2214:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    2218:	45c40305 	strbmi	r0, [r4, #773]	; 0x305
    221c:	0e0f2000 	cdpeq	0, 0, cr2, cr15, cr0, {0}
    2220:	01000011 	tsteq	r0, r1, lsl r0
    2224:	00012e6b 	andeq	r2, r1, fp, ror #28
    2228:	f0030500 			; <UNDEFINED> instruction: 0xf0030500
    222c:	0f20003e 	svceq	0x0020003e
    2230:	0000106d 	andeq	r1, r0, sp, rrx
    2234:	012e6c01 			; <UNDEFINED> instruction: 0x012e6c01
    2238:	03050000 	movweq	r0, #20480	; 0x5000
    223c:	20003ef4 	strdcs	r3, [r0], -r4
    2240:	0010a211 	andseq	sl, r0, r1, lsl r2
    2244:	fc740100 	ldc2l	1, cr0, [r4], #-0
    2248:	c8200021 	stmdagt	r0!, {r0, r5}
    224c:	01000000 	mrseq	r0, (UNDEF: 0)
    2250:	0004459c 	muleq	r4, ip, r5
    2254:	074d1200 	strbeq	r1, [sp, -r0, lsl #4]
    2258:	74010000 	strvc	r0, [r1], #-0
    225c:	00000162 	andeq	r0, r0, r2, ror #2
    2260:	0f749102 	svceq	0x00749102
    2264:	000003d9 	ldrdeq	r0, [r0], -r9
    2268:	012e7601 			; <UNDEFINED> instruction: 0x012e7601
    226c:	03050000 	movweq	r0, #20480	; 0x5000
    2270:	20003ef8 	strdcs	r3, [r0], -r8
    2274:	000fe70f 	andeq	lr, pc, pc, lsl #14
    2278:	2e770100 	rpwcss	f0, f7, f0
    227c:	05000001 	streq	r0, [r0, #-1]
    2280:	0086a003 	addeq	sl, r6, r3
    2284:	1e130020 	cdpne	0, 1, cr0, cr3, cr0, {1}
    2288:	01000011 	tsteq	r0, r1, lsl r0
    228c:	0021d46e 	eoreq	sp, r1, lr, ror #8
    2290:	00002820 	andeq	r2, r0, r0, lsr #16
    2294:	739c0100 	orrsvc	r0, ip, #0, 2
    2298:	14000004 	strne	r0, [r0], #-4
    229c:	6e010078 	mcrvs	0, 0, r0, cr1, cr8, {3}
    22a0:	0000012e 	andeq	r0, r0, lr, lsr #2
    22a4:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    22a8:	6e010079 	mcrvs	0, 0, r0, cr1, cr9, {3}
    22ac:	0000012e 	andeq	r0, r0, lr, lsr #2
    22b0:	00709102 	rsbseq	r9, r0, r2, lsl #2
    22b4:	00104e11 	andseq	r4, r0, r1, lsl lr
    22b8:	dc500100 	ldflee	f0, [r0], {-0}
    22bc:	f8200020 			; <UNDEFINED> instruction: 0xf8200020
    22c0:	01000000 	mrseq	r0, (UNDEF: 0)
    22c4:	0004a89c 	muleq	r4, ip, r8
    22c8:	10fa1200 	rscsne	r1, sl, r0, lsl #4
    22cc:	50010000 	andpl	r0, r1, r0
    22d0:	00000162 	andeq	r0, r0, r2, ror #2
    22d4:	0f6c9102 	svceq	0x006c9102
    22d8:	000008d4 	ldrdeq	r0, [r0], -r4
    22dc:	012e5101 			; <UNDEFINED> instruction: 0x012e5101
    22e0:	03050000 	movweq	r0, #20480	; 0x5000
    22e4:	2000869c 	mulcs	r0, ip, r6
    22e8:	04841500 	streq	r1, [r4], #1280	; 0x500
    22ec:	2d010000 	stccs	0, cr0, [r1, #-0]
    22f0:	20001f9c 	mulcs	r0, ip, pc	; <UNPREDICTABLE>
    22f4:	00000140 	andeq	r0, r0, r0, asr #2
    22f8:	690f9c01 	stmdbvs	pc, {r0, sl, fp, ip, pc}	; <UNPREDICTABLE>
    22fc:	0100000d 	tsteq	r0, sp
    2300:	00009e2f 	andeq	r9, r0, pc, lsr #28
    2304:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2308:	000d730f 	andeq	r7, sp, pc, lsl #6
    230c:	9e320100 	rsflss	f0, f2, f0
    2310:	02000000 	andeq	r0, r0, #0
    2314:	690f7091 	stmdbvs	pc, {r0, r4, r7, ip, sp, lr}	; <UNPREDICTABLE>
    2318:	0100000b 	tsteq	r0, fp
    231c:	00009e35 	andeq	r9, r0, r5, lsr lr
    2320:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2324:	000a8a0f 	andeq	r8, sl, pc, lsl #20
    2328:	9e390100 	rsflse	f0, f1, f0
    232c:	02000000 	andeq	r0, r0, #0
    2330:	930f6891 	movwls	r6, #63633	; 0xf891
    2334:	0100000d 	tsteq	r0, sp
    2338:	00009e3c 	andeq	r9, r0, ip, lsr lr
    233c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2340:	000b270f 	andeq	r2, fp, pc, lsl #14
    2344:	9e3f0100 	rsflse	f0, f7, f0
    2348:	02000000 	andeq	r0, r0, #0
    234c:	3f0f6091 	svccc	0x000f6091
    2350:	0100000d 	tsteq	r0, sp
    2354:	00009e44 	andeq	r9, r0, r4, asr #28
    2358:	5c910200 	lfmpl	f0, 4, [r1], {0}
    235c:	000d9d0f 	andeq	r9, sp, pc, lsl #26
    2360:	9e470100 	dvflss	f0, f7, f0
    2364:	02000000 	andeq	r0, r0, #0
    2368:	a70f5891 			; <UNDEFINED> instruction: 0xa70f5891
    236c:	0100000d 	tsteq	r0, sp
    2370:	00009e4a 	andeq	r9, r0, sl, asr #28
    2374:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    2378:	055b0000 	ldrbeq	r0, [fp, #-0]
    237c:	00040000 	andeq	r0, r4, r0
    2380:	0000077b 	andeq	r0, r0, fp, ror r7
    2384:	008f0104 	addeq	r0, pc, r4, lsl #2
    2388:	680c0000 	stmdavs	ip, {}	; <UNPREDICTABLE>
    238c:	c4000013 	strgt	r0, [r0], #-19	; 0xffffffed
    2390:	ac200022 	stcge	0, cr0, [r0], #-136	; 0xffffff78
    2394:	51000002 	tstpl	r0, r2
    2398:	0200000b 	andeq	r0, r0, #11
    239c:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
    23a0:	03000000 	movweq	r0, #0
    23a4:	0000034b 	andeq	r0, r0, fp, asr #6
    23a8:	004e0702 	subeq	r0, lr, r2, lsl #14
    23ac:	03000000 	movweq	r0, #0
    23b0:	000006e4 	andeq	r0, r0, r4, ror #13
    23b4:	004e0802 	subeq	r0, lr, r2, lsl #16
    23b8:	03040000 	movweq	r0, #16384	; 0x4000
    23bc:	000014df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    23c0:	00550902 	subseq	r0, r5, r2, lsl #18
    23c4:	00080000 	andeq	r0, r8, r0
    23c8:	6f070404 	svcvs	0x00070404
    23cc:	05000003 	streq	r0, [r0, #-3]
    23d0:	00005b04 	andeq	r5, r0, r4, lsl #22
    23d4:	08010400 	stmdaeq	r1, {sl}
    23d8:	000004ae 	andeq	r0, r0, lr, lsr #9
    23dc:	00163106 	andseq	r3, r6, r6, lsl #2
    23e0:	210a0200 	mrscs	r0, R10_fiq
    23e4:	07000000 	streq	r0, [r0, -r0]
    23e8:	00000024 	andeq	r0, r0, r4, lsr #32
    23ec:	9e06030c 	cdpls	3, 0, cr0, cr6, cr12, {0}
    23f0:	03000000 	movweq	r0, #0
    23f4:	000005a4 	andeq	r0, r0, r4, lsr #11
    23f8:	009e0703 	addseq	r0, lr, r3, lsl #14
    23fc:	03000000 	movweq	r0, #0
    2400:	0000002b 	andeq	r0, r0, fp, lsr #32
    2404:	009e0803 	addseq	r0, lr, r3, lsl #16
    2408:	03040000 	movweq	r0, #16384	; 0x4000
    240c:	00000020 	andeq	r0, r0, r0, lsr #32
    2410:	009e0903 	addseq	r0, lr, r3, lsl #18
    2414:	00080000 	andeq	r0, r8, r0
    2418:	00620405 	rsbeq	r0, r2, r5, lsl #8
    241c:	ff060000 			; <UNDEFINED> instruction: 0xff060000
    2420:	0300000f 	movweq	r0, #15
    2424:	00006d0a 	andeq	r6, r0, sl, lsl #26
    2428:	06a90700 	strteq	r0, [r9], r0, lsl #14
    242c:	04240000 	strteq	r0, [r4], #-0
    2430:	00012806 	andeq	r2, r1, r6, lsl #16
    2434:	043c0300 	ldrteq	r0, [ip], #-768	; 0xfffffd00
    2438:	07040000 	streq	r0, [r4, -r0]
    243c:	00000128 	andeq	r0, r0, r8, lsr #2
    2440:	06b50300 	ldrteq	r0, [r5], r0, lsl #6
    2444:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    2448:	0000012e 	andeq	r0, r0, lr, lsr #2
    244c:	060f0304 	streq	r0, [pc], -r4, lsl #6
    2450:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    2454:	0000012e 	andeq	r0, r0, lr, lsr #2
    2458:	063b0308 	ldrteq	r0, [fp], -r8, lsl #6
    245c:	0c040000 	stceq	0, cr0, [r4], {-0}
    2460:	00000146 	andeq	r0, r0, r6, asr #2
    2464:	0332030c 	teqeq	r2, #12, 6	; 0x30000000
    2468:	0d040000 	stceq	0, cr0, [r4, #-0]
    246c:	00000146 	andeq	r0, r0, r6, asr #2
    2470:	044e0310 	strbeq	r0, [lr], #-784	; 0xfffffcf0
    2474:	10040000 	andne	r0, r4, r0
    2478:	0000012e 	andeq	r0, r0, lr, lsr #2
    247c:	00600314 	rsbeq	r0, r0, r4, lsl r3
    2480:	11040000 	mrsne	r0, (UNDEF: 4)
    2484:	0000012e 	andeq	r0, r0, lr, lsr #2
    2488:	03bf0318 			; <UNDEFINED> instruction: 0x03bf0318
    248c:	12040000 	andne	r0, r4, #0
    2490:	0000012e 	andeq	r0, r0, lr, lsr #2
    2494:	03cf031c 	biceq	r0, pc, #28, 6	; 0x70000000
    2498:	13040000 	movwne	r0, #16384	; 0x4000
    249c:	0000012e 	andeq	r0, r0, lr, lsr #2
    24a0:	04050020 	streq	r0, [r5], #-32	; 0xffffffe0
    24a4:	000000a4 	andeq	r0, r0, r4, lsr #1
    24a8:	69050408 	stmdbvs	r5, {r3, sl}
    24ac:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    24b0:	00000140 	andeq	r0, r0, r0, asr #2
    24b4:	0001400a 	andeq	r4, r1, sl
    24b8:	04050000 	streq	r0, [r5], #-0
    24bc:	000000af 	andeq	r0, r0, pc, lsr #1
    24c0:	01350405 	teqeq	r5, r5, lsl #8
    24c4:	aa060000 	bge	1824cc <startup-0x1fe7db34>
    24c8:	04000006 	streq	r0, [r0], #-6
    24cc:	0000af15 	andeq	sl, r0, r5, lsl pc
    24d0:	01620b00 	cmneq	r2, r0, lsl #22
    24d4:	01620000 	cmneq	r2, r0
    24d8:	000c0000 	andeq	r0, ip, r0
    24dc:	014c0405 	cmpeq	ip, r5, lsl #8
    24e0:	310d0000 	mrscc	r0, (UNDEF: 13)
    24e4:	04000005 	streq	r0, [r0], #-5
    24e8:	0001571c 	andeq	r5, r1, ip, lsl r7
    24ec:	040a0d00 	streq	r0, [sl], #-3328	; 0xfffff300
    24f0:	1d040000 	stcne	0, cr0, [r4, #-0]
    24f4:	0000012e 	andeq	r0, r0, lr, lsr #2
    24f8:	00005b0b 	andeq	r5, r0, fp, lsl #22
    24fc:	00018e00 	andeq	r8, r1, r0, lsl #28
    2500:	018e0e00 	orreq	r0, lr, r0, lsl #28
    2504:	00740000 	rsbseq	r0, r4, r0
    2508:	ec070404 	cfstrs	mvf0, [r7], {4}
    250c:	0f000003 	svceq	0x00000003
    2510:	000012f7 	strdeq	r1, [r0], -r7
    2514:	017e0305 	cmneq	lr, r5, lsl #6
    2518:	03050000 	movweq	r0, #20480	; 0x5000
    251c:	200086a4 	andcs	r8, r0, r4, lsr #13
    2520:	0011300f 	andseq	r3, r1, pc
    2524:	7e030600 	cfmadd32vc	mvax0, mvfx0, mvfx3, mvfx0
    2528:	05000001 	streq	r0, [r0, #-1]
    252c:	00871c03 	addeq	r1, r7, r3, lsl #24
    2530:	11ed0f20 	mvnne	r0, r0, lsr #30
    2534:	03070000 	movweq	r0, #28672	; 0x7000
    2538:	0000017e 	andeq	r0, r0, lr, ror r1
    253c:	87940305 	ldrhi	r0, [r4, r5, lsl #6]
    2540:	b90f2000 	stmdblt	pc, {sp}	; <UNPREDICTABLE>
    2544:	08000012 	stmdaeq	r0, {r1, r4}
    2548:	00017e03 	andeq	r7, r1, r3, lsl #28
    254c:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
    2550:	0f200088 	svceq	0x00200088
    2554:	0000114d 	andeq	r1, r0, sp, asr #2
    2558:	017e0309 	cmneq	lr, r9, lsl #6
    255c:	03050000 	movweq	r0, #20480	; 0x5000
    2560:	20008884 	andcs	r8, r0, r4, lsl #17
    2564:	00116d0f 	andseq	r6, r1, pc, lsl #26
    2568:	7e030a00 	vmlavc.f32	s0, s6, s0
    256c:	05000001 	streq	r0, [r0, #-1]
    2570:	0088fc03 	addeq	pc, r8, r3, lsl #24
    2574:	125e0f20 	subsne	r0, lr, #32, 30	; 0x80
    2578:	030b0000 	movweq	r0, #45056	; 0xb000
    257c:	0000017e 	andeq	r0, r0, lr, ror r1
    2580:	89740305 	ldmdbhi	r4!, {r0, r2, r8, r9}^
    2584:	820f2000 	andhi	r2, pc, #0
    2588:	0c000012 	stceq	0, cr0, [r0], {18}
    258c:	00017e03 	andeq	r7, r1, r3, lsl #28
    2590:	ec030500 	cfstr32	mvfx0, [r3], {-0}
    2594:	0f200089 	svceq	0x00200089
    2598:	000011b7 			; <UNDEFINED> instruction: 0x000011b7
    259c:	017e030d 	cmneq	lr, sp, lsl #6
    25a0:	03050000 	movweq	r0, #20480	; 0x5000
    25a4:	20008a64 	andcs	r8, r0, r4, ror #20
    25a8:	0012da0f 	andseq	sp, r2, pc, lsl #20
    25ac:	7e030e00 	cdpvc	14, 0, cr0, cr3, cr0, {0}
    25b0:	05000001 	streq	r0, [r0, #-1]
    25b4:	008adc03 	addeq	sp, sl, r3, lsl #24
    25b8:	13150f20 	tstne	r5, #32, 30	; 0x80
    25bc:	030f0000 	movweq	r0, #61440	; 0xf000
    25c0:	0000017e 	andeq	r0, r0, lr, ror r1
    25c4:	8b540305 	blhi	15031e0 <startup-0x1eafce20>
    25c8:	700f2000 	andvc	r2, pc, r0
    25cc:	10000012 	andne	r0, r0, r2, lsl r0
    25d0:	00017e03 	andeq	r7, r1, r3, lsl #28
    25d4:	cc030500 	cfstr32gt	mvfx0, [r3], {-0}
    25d8:	1020008b 	eorne	r0, r0, fp, lsl #1
    25dc:	00001141 	andeq	r1, r0, r1, asr #2
    25e0:	009e1101 	addseq	r1, lr, r1, lsl #2
    25e4:	03050000 	movweq	r0, #20480	; 0x5000
    25e8:	20004790 	mulcs	r0, r0, r7
    25ec:	0012ae10 	andseq	sl, r2, r0, lsl lr
    25f0:	9e120100 	muflss	f0, f2, f0
    25f4:	05000000 	streq	r0, [r0, #-0]
    25f8:	00470803 	subeq	r0, r7, r3, lsl #16
    25fc:	13091020 	movwne	r1, #36896	; 0x9020
    2600:	13010000 	movwne	r0, #4096	; 0x1000
    2604:	0000009e 	muleq	r0, lr, r0
    2608:	470c0305 	strmi	r0, [ip, -r5, lsl #6]
    260c:	8b102000 	blhi	40a614 <startup-0x1fbf59ec>
    2610:	01000011 	tsteq	r0, r1, lsl r0
    2614:	00009e14 	andeq	r9, r0, r4, lsl lr
    2618:	b8030500 	stmdalt	r3, {r8, sl}
    261c:	10200047 	eorne	r0, r0, r7, asr #32
    2620:	0000135d 	andeq	r1, r0, sp, asr r3
    2624:	009e1501 	addseq	r1, lr, r1, lsl #10
    2628:	03050000 	movweq	r0, #20480	; 0x5000
    262c:	20004704 	andcs	r4, r0, r4, lsl #14
    2630:	0013b010 	andseq	fp, r3, r0, lsl r0
    2634:	9e160100 	muflss	f0, f6, f0
    2638:	05000000 	streq	r0, [r0, #-0]
    263c:	0047a003 	subeq	sl, r7, r3
    2640:	120b1020 	andne	r1, fp, #32
    2644:	17010000 	strne	r0, [r1, -r0]
    2648:	0000009e 	muleq	r0, lr, r0
    264c:	47a40305 	strmi	r0, [r4, r5, lsl #6]!
    2650:	27102000 	ldrcs	r2, [r0, -r0]
    2654:	01000012 	tsteq	r0, r2, lsl r0
    2658:	00009e18 	andeq	r9, r0, r8, lsl lr
    265c:	b8030500 	stmdalt	r3, {r8, sl}
    2660:	10200046 	eorne	r0, r0, r6, asr #32
    2664:	0000117f 	andeq	r1, r0, pc, ror r1
    2668:	009e1901 	addseq	r1, lr, r1, lsl #18
    266c:	03050000 	movweq	r0, #20480	; 0x5000
    2670:	2000469c 	mulcs	r0, ip, r6
    2674:	0013a410 	andseq	sl, r3, r0, lsl r4
    2678:	9e1a0100 	muflse	f0, f2, f0
    267c:	05000000 	streq	r0, [r0, #-0]
    2680:	00478c03 	subeq	r8, r7, r3, lsl #24
    2684:	12ec1020 	rscne	r1, ip, #32
    2688:	1b010000 	blne	42690 <startup-0x1ffbd970>
    268c:	0000009e 	muleq	r0, lr, r0
    2690:	47280305 	strmi	r0, [r8, -r5, lsl #6]!
    2694:	26102000 	ldrcs	r2, [r0], -r0
    2698:	01000013 	tsteq	r0, r3, lsl r0
    269c:	00009e1c 	andeq	r9, r0, ip, lsl lr
    26a0:	b4030500 	strlt	r0, [r3], #-1280	; 0xfffffb00
    26a4:	10200047 	eorne	r0, r0, r7, asr #32
    26a8:	000012cb 	andeq	r1, r0, fp, asr #5
    26ac:	00621e01 	rsbeq	r1, r2, r1, lsl #28
    26b0:	03050000 	movweq	r0, #20480	; 0x5000
    26b4:	200047a8 	andcs	r4, r0, r8, lsr #15
    26b8:	00115e10 	andseq	r5, r1, r0, lsl lr
    26bc:	621f0100 	andsvs	r0, pc, #0, 2
    26c0:	05000000 	streq	r0, [r0, #-0]
    26c4:	00479403 	subeq	r9, r7, r3, lsl #8
    26c8:	13961020 	orrsne	r1, r6, #32
    26cc:	20010000 	andcs	r0, r1, r0
    26d0:	00000062 	andeq	r0, r0, r2, rrx
    26d4:	46780305 	ldrbtmi	r0, [r8], -r5, lsl #6
    26d8:	97102000 	ldrls	r2, [r0, -r0]
    26dc:	01000011 	tsteq	r0, r1, lsl r0
    26e0:	00006221 	andeq	r6, r0, r1, lsr #4
    26e4:	f8030500 			; <UNDEFINED> instruction: 0xf8030500
    26e8:	10200046 	eorne	r0, r0, r6, asr #32
    26ec:	000011a7 	andeq	r1, r0, r7, lsr #3
    26f0:	00622201 	rsbeq	r2, r2, r1, lsl #4
    26f4:	03050000 	movweq	r0, #20480	; 0x5000
    26f8:	200046e0 	andcs	r4, r0, r0, ror #13
    26fc:	0011d210 	andseq	sp, r1, r0, lsl r2
    2700:	62230100 	eorvs	r0, r3, #0, 2
    2704:	05000000 	streq	r0, [r0, #-0]
    2708:	00474403 	subeq	r4, r7, r3, lsl #8
    270c:	134d1020 	movtne	r1, #53280	; 0xd020
    2710:	24010000 	strcs	r0, [r1], #-0
    2714:	00000062 	andeq	r0, r0, r2, rrx
    2718:	47800305 	strmi	r0, [r0, r5, lsl #6]
    271c:	17102000 	ldrne	r2, [r0, -r0]
    2720:	01000012 	tsteq	r0, r2, lsl r0
    2724:	00006225 	andeq	r6, r0, r5, lsr #4
    2728:	a0030500 	andge	r0, r3, r0, lsl #10
    272c:	10200046 	eorne	r0, r0, r6, asr #32
    2730:	00001332 	andeq	r1, r0, r2, lsr r3
    2734:	00622601 	rsbeq	r2, r2, r1, lsl #12
    2738:	03050000 	movweq	r0, #20480	; 0x5000
    273c:	200046ec 	andcs	r4, r0, ip, ror #13
    2740:	00123210 	andseq	r3, r2, r0, lsl r2
    2744:	62270100 	eorvs	r0, r7, #0, 2
    2748:	05000000 	streq	r0, [r0, #-0]
    274c:	00471003 	subeq	r1, r7, r3
    2750:	12421020 	subne	r1, r2, #32
    2754:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    2758:	00000062 	andeq	r0, r0, r2, rrx
    275c:	46840305 	strmi	r0, [r4], r5, lsl #6
    2760:	93102000 	tstls	r0, #0
    2764:	01000012 	tsteq	r0, r2, lsl r0
    2768:	00006229 	andeq	r6, r0, r9, lsr #4
    276c:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
    2770:	10200047 	eorne	r0, r0, r7, asr #32
    2774:	000011c9 	andeq	r1, r0, r9, asr #3
    2778:	014c2c01 	cmpeq	ip, r1, lsl #24
    277c:	03050000 	movweq	r0, #20480	; 0x5000
    2780:	200046bc 			; <UNDEFINED> instruction: 0x200046bc
    2784:	0011ff10 	andseq	pc, r1, r0, lsl pc	; <UNPREDICTABLE>
    2788:	a42d0100 	strtge	r0, [sp], #-256	; 0xffffff00
    278c:	05000000 	streq	r0, [r0, #-0]
    2790:	00473803 	subeq	r3, r7, r3, lsl #16
    2794:	12a21020 	adcne	r1, r2, #32
    2798:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    279c:	000000a4 	andeq	r0, r0, r4, lsr #1
    27a0:	46900305 	ldrmi	r0, [r0], r5, lsl #6
    27a4:	52102000 	andspl	r2, r0, #0
    27a8:	01000012 	tsteq	r0, r2, lsl r0
    27ac:	0000a42f 	andeq	sl, r0, pc, lsr #8
    27b0:	ac030500 	cfstr32ge	mvfx0, [r3], {-0}
    27b4:	10200046 	eorne	r0, r0, r6, asr #32
    27b8:	000011e1 	andeq	r1, r0, r1, ror #3
    27bc:	00a43001 	adceq	r3, r4, r1
    27c0:	03050000 	movweq	r0, #20480	; 0x5000
    27c4:	2000472c 	andcs	r4, r0, ip, lsr #14
    27c8:	0000a40b 	andeq	sl, r0, fp, lsl #8
    27cc:	00045e00 	andeq	r5, r4, r0, lsl #28
    27d0:	018e0e00 	orreq	r0, lr, r0, lsl #28
    27d4:	00030000 	andeq	r0, r3, r0
    27d8:	00134110 	andseq	r4, r3, r0, lsl r1
    27dc:	4e310100 	rsfmis	f0, f1, f0
    27e0:	05000004 	streq	r0, [r0, #-4]
    27e4:	00475003 	subeq	r5, r7, r3
    27e8:	03b41120 			; <UNDEFINED> instruction: 0x03b41120
    27ec:	5f010000 	svcpl	0x00010000
    27f0:	2000246c 	andcs	r2, r0, ip, ror #8
    27f4:	00000104 	andeq	r0, r0, r4, lsl #2
    27f8:	04a49c01 	strteq	r9, [r4], #3073	; 0xc01
    27fc:	c9120000 	ldmdbgt	r2, {}	; <UNPREDICTABLE>
    2800:	01000011 	tsteq	r0, r1, lsl r0
    2804:	0001625f 	andeq	r6, r1, pc, asr r2
    2808:	6c910200 	lfmvs	f0, 4, [r1], {0}
    280c:	0008d40f 	andeq	sp, r8, pc, lsl #8
    2810:	2e600100 	powcss	f0, f0, f0
    2814:	05000001 	streq	r0, [r0, #-1]
    2818:	008c4403 	addeq	r4, ip, r3, lsl #8
    281c:	84130020 	ldrhi	r0, [r3], #-32	; 0xffffffe0
    2820:	01000004 	tsteq	r0, r4
    2824:	0022c432 	eoreq	ip, r2, r2, lsr r4
    2828:	0001a820 	andeq	sl, r1, r0, lsr #16
    282c:	0f9c0100 	svceq	0x009c0100
    2830:	00000d69 	andeq	r0, r0, r9, ror #26
    2834:	009e3401 	addseq	r3, lr, r1, lsl #8
    2838:	91020000 	mrsls	r0, (UNDEF: 2)
    283c:	0d730f74 	ldcleq	15, cr0, [r3, #-464]!	; 0xfffffe30
    2840:	37010000 	strcc	r0, [r1, -r0]
    2844:	0000009e 	muleq	r0, lr, r0
    2848:	0f709102 	svceq	0x00709102
    284c:	00000b69 	andeq	r0, r0, r9, ror #22
    2850:	009e3a01 	addseq	r3, lr, r1, lsl #20
    2854:	91020000 	mrsls	r0, (UNDEF: 2)
    2858:	0a8a0f6c 	beq	fe286610 <firstTime.4040+0xde27c154>
    285c:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    2860:	0000009e 	muleq	r0, lr, r0
    2864:	0f689102 	svceq	0x00689102
    2868:	00000d93 	muleq	r0, r3, sp
    286c:	009e4101 	addseq	r4, lr, r1, lsl #2
    2870:	91020000 	mrsls	r0, (UNDEF: 2)
    2874:	0b270f64 	bleq	9c660c <startup-0x1f6399f4>
    2878:	44010000 	strmi	r0, [r1], #-0
    287c:	0000009e 	muleq	r0, lr, r0
    2880:	0f609102 	svceq	0x00609102
    2884:	00000d3f 	andeq	r0, r0, pc, lsr sp
    2888:	009e4901 	addseq	r4, lr, r1, lsl #18
    288c:	91020000 	mrsls	r0, (UNDEF: 2)
    2890:	0d9d0f5c 	ldceq	15, cr0, [sp, #368]	; 0x170
    2894:	4c010000 	stcmi	0, cr0, [r1], {-0}
    2898:	0000009e 	muleq	r0, lr, r0
    289c:	0f589102 	svceq	0x00589102
    28a0:	00000da7 	andeq	r0, r0, r7, lsr #27
    28a4:	009e4f01 	addseq	r4, lr, r1, lsl #30
    28a8:	91020000 	mrsls	r0, (UNDEF: 2)
    28ac:	0ab00f54 	beq	fec06604 <firstTime.4040+0xdebfc148>
    28b0:	53010000 	movwpl	r0, #4096	; 0x1000
    28b4:	0000009e 	muleq	r0, lr, r0
    28b8:	0f509102 	svceq	0x00509102
    28bc:	00000af4 	strdeq	r0, [r0], -r4
    28c0:	009e5601 	addseq	r5, lr, r1, lsl #12
    28c4:	91020000 	mrsls	r0, (UNDEF: 2)
    28c8:	0afe0f4c 	beq	fff86600 <firstTime.4040+0xdff7c144>
    28cc:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    28d0:	0000009e 	muleq	r0, lr, r0
    28d4:	00489102 	subeq	r9, r8, r2, lsl #2
    28d8:	00089f00 	andeq	r9, r8, r0, lsl #30
    28dc:	7b000400 	blvc	38e4 <startup-0x1fffc71c>
    28e0:	04000008 	streq	r0, [r0], #-8
    28e4:	00008f01 	andeq	r8, r0, r1, lsl #30
    28e8:	14a10c00 	strtne	r0, [r1], #3072	; 0xc00
    28ec:	25700000 	ldrbcs	r0, [r0, #-0]!
    28f0:	0e442000 	cdpeq	0, 4, cr2, cr4, cr0, {0}
    28f4:	0cfa0000 	ldcleq	0, cr0, [sl]
    28f8:	0c020000 	stceq	0, cr0, [r2], {-0}
    28fc:	004e0502 	subeq	r0, lr, r2, lsl #10
    2900:	4b030000 	blmi	c2908 <startup-0x1ff3d6f8>
    2904:	02000003 	andeq	r0, r0, #3
    2908:	00004e07 	andeq	r4, r0, r7, lsl #28
    290c:	e4030000 	str	r0, [r3], #-0
    2910:	02000006 	andeq	r0, r0, #6
    2914:	00004e08 	andeq	r4, r0, r8, lsl #28
    2918:	df030400 	svcle	0x00030400
    291c:	02000014 	andeq	r0, r0, #20
    2920:	00005509 	andeq	r5, r0, r9, lsl #10
    2924:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    2928:	036f0704 	cmneq	pc, #4, 14	; 0x100000
    292c:	04050000 	streq	r0, [r5], #-0
    2930:	0000005b 	andeq	r0, r0, fp, asr r0
    2934:	ae080104 	adfgee	f0, f0, f4
    2938:	06000004 	streq	r0, [r0], -r4
    293c:	00001631 	andeq	r1, r0, r1, lsr r6
    2940:	00210a02 	eoreq	r0, r1, r2, lsl #20
    2944:	24070000 	strcs	r0, [r7], #-0
    2948:	0c000000 	stceq	0, cr0, [r0], {-0}
    294c:	009e0603 	addseq	r0, lr, r3, lsl #12
    2950:	a4030000 	strge	r0, [r3], #-0
    2954:	03000005 	movweq	r0, #5
    2958:	00009e07 	andeq	r9, r0, r7, lsl #28
    295c:	2b030000 	blcs	c2964 <startup-0x1ff3d69c>
    2960:	03000000 	movweq	r0, #0
    2964:	00009e08 	andeq	r9, r0, r8, lsl #28
    2968:	20030400 	andcs	r0, r3, r0, lsl #8
    296c:	03000000 	movweq	r0, #0
    2970:	00009e09 	andeq	r9, r0, r9, lsl #28
    2974:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    2978:	00006204 	andeq	r6, r0, r4, lsl #4
    297c:	0fff0600 	svceq	0x00ff0600
    2980:	0a030000 	beq	c2988 <startup-0x1ff3d678>
    2984:	0000006d 	andeq	r0, r0, sp, rrx
    2988:	0006a907 	andeq	sl, r6, r7, lsl #18
    298c:	06042400 	streq	r2, [r4], -r0, lsl #8
    2990:	00000128 	andeq	r0, r0, r8, lsr #2
    2994:	00043c03 	andeq	r3, r4, r3, lsl #24
    2998:	28070400 	stmdacs	r7, {sl}
    299c:	00000001 	andeq	r0, r0, r1
    29a0:	0006b503 	andeq	fp, r6, r3, lsl #10
    29a4:	2e080400 	cfcpyscs	mvf0, mvf8
    29a8:	04000001 	streq	r0, [r0], #-1
    29ac:	00060f03 	andeq	r0, r6, r3, lsl #30
    29b0:	2e090400 	cfcpyscs	mvf0, mvf9
    29b4:	08000001 	stmdaeq	r0, {r0}
    29b8:	00063b03 	andeq	r3, r6, r3, lsl #22
    29bc:	460c0400 	strmi	r0, [ip], -r0, lsl #8
    29c0:	0c000001 	stceq	0, cr0, [r0], {1}
    29c4:	00033203 	andeq	r3, r3, r3, lsl #4
    29c8:	460d0400 	strmi	r0, [sp], -r0, lsl #8
    29cc:	10000001 	andne	r0, r0, r1
    29d0:	00044e03 	andeq	r4, r4, r3, lsl #28
    29d4:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
    29d8:	14000001 	strne	r0, [r0], #-1
    29dc:	00006003 	andeq	r6, r0, r3
    29e0:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
    29e4:	18000001 	stmdane	r0, {r0}
    29e8:	0003bf03 	andeq	fp, r3, r3, lsl #30
    29ec:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
    29f0:	1c000001 	stcne	0, cr0, [r0], {1}
    29f4:	0003cf03 	andeq	ip, r3, r3, lsl #30
    29f8:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
    29fc:	20000001 	andcs	r0, r0, r1
    2a00:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    2a04:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2a08:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2a0c:	40090074 	andmi	r0, r9, r4, ror r0
    2a10:	0a000001 	beq	2a1c <startup-0x1fffd5e4>
    2a14:	00000140 	andeq	r0, r0, r0, asr #2
    2a18:	af040500 	svcge	0x00040500
    2a1c:	05000000 	streq	r0, [r0, #-0]
    2a20:	00013504 	andeq	r3, r1, r4, lsl #10
    2a24:	06aa0600 	strteq	r0, [sl], r0, lsl #12
    2a28:	15040000 	strne	r0, [r4, #-0]
    2a2c:	000000af 	andeq	r0, r0, pc, lsr #1
    2a30:	0001620b 	andeq	r6, r1, fp, lsl #4
    2a34:	00016200 	andeq	r6, r1, r0, lsl #4
    2a38:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    2a3c:	00014c04 	andeq	r4, r1, r4, lsl #24
    2a40:	05310d00 	ldreq	r0, [r1, #-3328]!	; 0xfffff300
    2a44:	1c040000 	stcne	0, cr0, [r4], {-0}
    2a48:	00000157 	andeq	r0, r0, r7, asr r1
    2a4c:	00040a0d 	andeq	r0, r4, sp, lsl #20
    2a50:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
    2a54:	06000001 	streq	r0, [r0], -r1
    2a58:	0000066d 	andeq	r0, r0, sp, ror #12
    2a5c:	005b2405 	subseq	r2, fp, r5, lsl #8
    2a60:	7e0b0000 	cdpvc	0, 0, cr0, cr11, cr0, {0}
    2a64:	9a000001 	bls	2a70 <startup-0x1fffd590>
    2a68:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    2a6c:	0000019a 	muleq	r0, sl, r1
    2a70:	040003ff 	streq	r0, [r0], #-1023	; 0xfffffc01
    2a74:	03ec0704 	mvneq	r0, #4, 14	; 0x100000
    2a78:	150d0000 	strne	r0, [sp, #-0]
    2a7c:	05000014 	streq	r0, [r0, #-20]	; 0xffffffec
    2a80:	0001892b 	andeq	r8, r1, fp, lsr #18
    2a84:	02380d00 	eorseq	r0, r8, #0, 26
    2a88:	2c050000 	stccs	0, cr0, [r5], {-0}
    2a8c:	00000189 	andeq	r0, r0, r9, lsl #3
    2a90:	0004bc0d 	andeq	fp, r4, sp, lsl #24
    2a94:	892d0500 	pushhi	{r8, sl}
    2a98:	0d000001 	stceq	0, cr0, [r0, #-4]
    2a9c:	00000351 	andeq	r0, r0, r1, asr r3
    2aa0:	01892e05 	orreq	r2, r9, r5, lsl #28
    2aa4:	c00d0000 	andgt	r0, sp, r0
    2aa8:	05000002 	streq	r0, [r0, #-2]
    2aac:	0001892f 	andeq	r8, r1, pc, lsr #18
    2ab0:	068b0d00 	streq	r0, [fp], r0, lsl #26
    2ab4:	30050000 	andcc	r0, r5, r0
    2ab8:	00000189 	andeq	r0, r0, r9, lsl #3
    2abc:	00067b0d 	andeq	r7, r6, sp, lsl #22
    2ac0:	89310500 	ldmdbhi	r1!, {r8, sl}
    2ac4:	0f000001 	svceq	0x00000001
    2ac8:	000001ac 	andeq	r0, r0, ip, lsr #3
    2acc:	03052b01 	movweq	r2, #23297	; 0x5b01
    2ad0:	200057bc 			; <UNDEFINED> instruction: 0x200057bc
    2ad4:	0001b70f 	andeq	fp, r1, pc, lsl #14
    2ad8:	052c0100 	streq	r0, [ip, #-256]!	; 0xffffff00
    2adc:	004bbc03 	subeq	fp, fp, r3, lsl #24
    2ae0:	01c20f20 	biceq	r0, r2, r0, lsr #30
    2ae4:	2d010000 	stccs	0, cr0, [r1, #-0]
    2ae8:	53bc0305 			; <UNDEFINED> instruction: 0x53bc0305
    2aec:	cd0f2000 	stcgt	0, cr2, [pc, #-0]	; 2af4 <startup-0x1fffd50c>
    2af0:	01000001 	tsteq	r0, r1
    2af4:	bc03052e 	cfstr32lt	mvfx0, [r3], {46}	; 0x2e
    2af8:	0f20005b 	svceq	0x0020005b
    2afc:	000001a1 	andeq	r0, r0, r1, lsr #3
    2b00:	03052f01 	movweq	r2, #24321	; 0x5f01
    2b04:	20004fbc 			; <UNDEFINED> instruction: 0x20004fbc
    2b08:	0001d810 	andeq	sp, r1, r0, lsl r8
    2b0c:	03050100 	movweq	r0, #20736	; 0x5100
    2b10:	200047bc 			; <UNDEFINED> instruction: 0x200047bc
    2b14:	0001e310 	andeq	lr, r1, r0, lsl r3
    2b18:	03050100 	movweq	r0, #20736	; 0x5100
    2b1c:	20005fbc 			; <UNDEFINED> instruction: 0x20005fbc
    2b20:	00144b11 	andseq	r4, r4, r1, lsl fp
    2b24:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
    2b28:	2000334a 	andcs	r3, r0, sl, asr #6
    2b2c:	0000006a 	andeq	r0, r0, sl, rrx
    2b30:	026d9c01 	rsbeq	r9, sp, #256	; 0x100
    2b34:	32120000 	andscc	r0, r2, #0
    2b38:	01000015 	tsteq	r0, r5, lsl r0
    2b3c:	012e01a8 	smulwbeq	lr, r8, r1
    2b40:	91020000 	mrsls	r0, (UNDEF: 2)
    2b44:	dc110074 	ldcle	0, cr0, [r1], {116}	; 0x74
    2b48:	01000013 	tsteq	r0, r3, lsl r0
    2b4c:	32c801a0 	sbccc	r0, r8, #160, 2	; 0x28
    2b50:	00822000 	addeq	r2, r2, r0
    2b54:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b58:	000002a2 	andeq	r0, r0, r2, lsr #5
    2b5c:	00142612 	andseq	r2, r4, r2, lsl r6
    2b60:	01a00100 	lsleq	r0, r0, #2
    2b64:	00000162 	andeq	r0, r0, r2, ror #2
    2b68:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    2b6c:	00000456 	andeq	r0, r0, r6, asr r4
    2b70:	2e01a101 	mvfcss	f2, f1
    2b74:	02000001 	andeq	r0, r0, #1
    2b78:	14007491 	strne	r7, [r0], #-1169	; 0xfffffb6f
    2b7c:	000014ea 	andeq	r1, r0, sl, ror #9
    2b80:	c0019601 	andgt	r9, r1, r1, lsl #12
    2b84:	08200031 	stmdaeq	r0!, {r0, r4, r5}
    2b88:	01000001 	tsteq	r0, r1
    2b8c:	0002c69c 	muleq	r2, ip, r6
    2b90:	00691500 	rsbeq	r1, r9, r0, lsl #10
    2b94:	2e019701 	cdpcs	7, 0, cr9, cr1, cr1, {0}
    2b98:	02000001 	andeq	r0, r0, #1
    2b9c:	11007491 			; <UNDEFINED> instruction: 0x11007491
    2ba0:	0000147c 	andeq	r1, r0, ip, ror r4
    2ba4:	90017001 	andls	r7, r1, r1
    2ba8:	30200030 	eorcc	r0, r0, r0, lsr r0
    2bac:	01000001 	tsteq	r0, r1
    2bb0:	00033a9c 	muleq	r3, ip, sl
    2bb4:	00781500 	rsbseq	r1, r8, r0, lsl #10
    2bb8:	2e017101 	adfcss	f7, f1, f1
    2bbc:	02000001 	andeq	r0, r0, #1
    2bc0:	79156c91 	ldmdbvc	r5, {r0, r4, r7, sl, fp, sp, lr}
    2bc4:	01720100 	cmneq	r2, r0, lsl #2
    2bc8:	0000012e 	andeq	r0, r0, lr, lsr #2
    2bcc:	13689102 	cmnne	r8, #-2147483648	; 0x80000000
    2bd0:	0000034b 	andeq	r0, r0, fp, asr #6
    2bd4:	2e017301 	cdpcs	3, 0, cr7, cr1, cr1, {0}
    2bd8:	02000001 	andeq	r0, r0, #1
    2bdc:	e4136491 	ldr	r6, [r3], #-1169	; 0xfffffb6f
    2be0:	01000006 	tsteq	r0, r6
    2be4:	012e0174 			; <UNDEFINED> instruction: 0x012e0174
    2be8:	91020000 	mrsls	r0, (UNDEF: 2)
    2bec:	32781560 	rsbscc	r1, r8, #96, 10	; 0x18000000
    2bf0:	01760100 	cmneq	r6, r0, lsl #2
    2bf4:	0000012e 	andeq	r0, r0, lr, lsr #2
    2bf8:	165c9102 	ldrbne	r9, [ip], -r2, lsl #2
    2bfc:	7a010069 	bvc	42da8 <startup-0x1ffbd258>
    2c00:	00012e01 	andeq	r2, r1, r1, lsl #28
    2c04:	006b1500 	rsbeq	r1, fp, r0, lsl #10
    2c08:	2e017b01 	vmlacs.f64	d7, d1, d1
    2c0c:	02000001 	andeq	r0, r0, #1
    2c10:	11005891 			; <UNDEFINED> instruction: 0x11005891
    2c14:	0000157c 	andeq	r1, r0, ip, ror r5
    2c18:	3e016501 	cfsh32cc	mvfx6, mvfx1, #1
    2c1c:	52200030 	eorpl	r0, r0, #48	; 0x30
    2c20:	01000000 	mrseq	r0, (UNDEF: 0)
    2c24:	0003a39c 	muleq	r3, ip, r3
    2c28:	00781700 	rsbseq	r1, r8, r0, lsl #14
    2c2c:	2e016501 	cfsh32cs	mvfx6, mvfx1, #1
    2c30:	02000001 	andeq	r0, r0, #1
    2c34:	79176c91 	ldmdbvc	r7, {r0, r4, r7, sl, fp, sp, lr}
    2c38:	01650100 	cmneq	r5, r0, lsl #2
    2c3c:	0000012e 	andeq	r0, r0, lr, lsr #2
    2c40:	12689102 	rsbne	r9, r8, #-2147483648	; 0x80000000
    2c44:	0000034b 	andeq	r0, r0, fp, asr #6
    2c48:	2e016501 	cfsh32cs	mvfx6, mvfx1, #1
    2c4c:	02000001 	andeq	r0, r0, #1
    2c50:	e4126491 	ldr	r6, [r2], #-1169	; 0xfffffb6f
    2c54:	01000006 	tsteq	r0, r6
    2c58:	012e0165 			; <UNDEFINED> instruction: 0x012e0165
    2c5c:	91020000 	mrsls	r0, (UNDEF: 2)
    2c60:	00691560 	rsbeq	r1, r9, r0, ror #10
    2c64:	2e016601 	cfmadd32cs	mvax0, mvfx6, mvfx1, mvfx1
    2c68:	02000001 	andeq	r0, r0, #1
    2c6c:	6a157491 	bvs	55feb8 <startup-0x1faa0148>
    2c70:	01670100 	cmneq	r7, r0, lsl #2
    2c74:	0000012e 	andeq	r0, r0, lr, lsr #2
    2c78:	00709102 	rsbseq	r9, r0, r2, lsl #2
    2c7c:	00151f11 	andseq	r1, r5, r1, lsl pc
    2c80:	015b0100 	cmpeq	fp, r0, lsl #2
    2c84:	20002fec 	andcs	r2, r0, ip, ror #31
    2c88:	00000052 	andeq	r0, r0, r2, asr r0
    2c8c:	040c9c01 	streq	r9, [ip], #-3073	; 0xfffff3ff
    2c90:	78170000 	ldmdavc	r7, {}	; <UNPREDICTABLE>
    2c94:	015b0100 	cmpeq	fp, r0, lsl #2
    2c98:	0000012e 	andeq	r0, r0, lr, lsr #2
    2c9c:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
    2ca0:	5b010079 	blpl	42e8c <startup-0x1ffbd174>
    2ca4:	00012e01 	andeq	r2, r1, r1, lsl #28
    2ca8:	68910200 	ldmvs	r1, {r9}
    2cac:	00034b12 	andeq	r4, r3, r2, lsl fp
    2cb0:	015b0100 	cmpeq	fp, r0, lsl #2
    2cb4:	0000012e 	andeq	r0, r0, lr, lsr #2
    2cb8:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
    2cbc:	000006e4 	andeq	r0, r0, r4, ror #13
    2cc0:	2e015b01 	vmlacs.f64	d5, d1, d1
    2cc4:	02000001 	andeq	r0, r0, #1
    2cc8:	69156091 	ldmdbvs	r5, {r0, r4, r7, sp, lr}
    2ccc:	015c0100 	cmpeq	ip, r0, lsl #2
    2cd0:	0000012e 	andeq	r0, r0, lr, lsr #2
    2cd4:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    2cd8:	5d01006a 	stcpl	0, cr0, [r1, #-424]	; 0xfffffe58
    2cdc:	00012e01 	andeq	r2, r1, r1, lsl #28
    2ce0:	70910200 	addsvc	r0, r1, r0, lsl #4
    2ce4:	14561100 	ldrbne	r1, [r6], #-256	; 0xffffff00
    2ce8:	45010000 	strmi	r0, [r1, #-0]
    2cec:	002ed201 	eoreq	sp, lr, r1, lsl #4
    2cf0:	00011a20 	andeq	r1, r1, r0, lsr #20
    2cf4:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
    2cf8:	17000004 	strne	r0, [r0, -r4]
    2cfc:	45010073 	strmi	r0, [r1, #-115]	; 0xffffff8d
    2d00:	00009e01 	andeq	r9, r0, r1, lsl #28
    2d04:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    2d08:	01007817 	tsteq	r0, r7, lsl r8
    2d0c:	012e0145 			; <UNDEFINED> instruction: 0x012e0145
    2d10:	91020000 	mrsls	r0, (UNDEF: 2)
    2d14:	00791750 	rsbseq	r1, r9, r0, asr r7
    2d18:	2e014501 	cfsh32cs	mvfx4, mvfx1, #1
    2d1c:	02000001 	andeq	r0, r0, #1
    2d20:	73174c91 	tstvc	r7, #37120	; 0x9100
    2d24:	01007465 	tsteq	r0, r5, ror #8
    2d28:	012e0145 			; <UNDEFINED> instruction: 0x012e0145
    2d2c:	91020000 	mrsls	r0, (UNDEF: 2)
    2d30:	14e41248 	strbtne	r1, [r4], #584	; 0x248
    2d34:	45010000 	strmi	r0, [r1, #-0]
    2d38:	00012e01 	andeq	r2, r1, r1, lsl #28
    2d3c:	00910200 	addseq	r0, r1, r0, lsl #4
    2d40:	01006915 	tsteq	r0, r5, lsl r9
    2d44:	012e0146 			; <UNDEFINED> instruction: 0x012e0146
    2d48:	91020000 	mrsls	r0, (UNDEF: 2)
    2d4c:	006a156c 	rsbeq	r1, sl, ip, ror #10
    2d50:	2e014601 	cfmadd32cs	mvax0, mvfx4, mvfx1, mvfx1
    2d54:	02000001 	andeq	r0, r0, #1
    2d58:	6b156891 	blvs	55cfa4 <startup-0x1faa305c>
    2d5c:	01460100 	mrseq	r0, (UNDEF: 86)
    2d60:	0000012e 	andeq	r0, r0, lr, lsr #2
    2d64:	13649102 	cmnne	r4, #-2147483648	; 0x80000000
    2d68:	00001557 	andeq	r1, r0, r7, asr r5
    2d6c:	2e014601 	cfmadd32cs	mvax0, mvfx4, mvfx1, mvfx1
    2d70:	02000001 	andeq	r0, r0, #1
    2d74:	0a186091 	beq	61afc0 <startup-0x1f9e5040>
    2d78:	bc20002f 	stclt	0, cr0, [r0], #-188	; 0xffffff44
    2d7c:	13000000 	movwne	r0, #0
    2d80:	00001552 	andeq	r1, r0, r2, asr r5
    2d84:	5b014d01 	blpl	56190 <startup-0x1ffa9e70>
    2d88:	02000000 	andeq	r0, r0, #0
    2d8c:	00005f91 	muleq	r0, r1, pc	; <UNPREDICTABLE>
    2d90:	00142b11 	andseq	r2, r4, r1, lsl fp
    2d94:	01300100 	teqeq	r0, r0, lsl #2
    2d98:	20002dfc 	strdcs	r2, [r0], -ip
    2d9c:	000000d6 	ldrdeq	r0, [r0], -r6
    2da0:	05209c01 	streq	r9, [r0, #-3073]!	; 0xfffff3ff
    2da4:	ce120000 	cdpgt	0, 1, cr0, cr2, cr0, {0}
    2da8:	01000013 	tsteq	r0, r3, lsl r0
    2dac:	05200130 	streq	r0, [r0, #-304]!	; 0xfffffed0
    2db0:	91020000 	mrsls	r0, (UNDEF: 2)
    2db4:	00691564 	rsbeq	r1, r9, r4, ror #10
    2db8:	7e013101 	adfvcs	f3, f1, f1
    2dbc:	02000001 	andeq	r0, r0, #1
    2dc0:	6a157791 	bvs	560c0c <startup-0x1fa9f3f4>
    2dc4:	01310100 	teqeq	r1, r0, lsl #2
    2dc8:	0000017e 	andeq	r0, r0, lr, ror r1
    2dcc:	13769102 	cmnne	r6, #-2147483648	; 0x80000000
    2dd0:	00001788 	andeq	r1, r0, r8, lsl #15
    2dd4:	7e013101 	adfvcs	f3, f1, f1
    2dd8:	02000001 	andeq	r0, r0, #1
    2ddc:	63156f91 	tstvs	r5, #580	; 0x244
    2de0:	01310100 	teqeq	r1, r0, lsl #2
    2de4:	0000017e 	andeq	r0, r0, lr, ror r1
    2de8:	15759102 	ldrbne	r9, [r5, #-258]!	; 0xfffffefe
    2dec:	3201006b 	andcc	r0, r1, #107	; 0x6b
    2df0:	00004e01 	andeq	r4, r0, r1, lsl #28
    2df4:	70910200 	addsvc	r0, r1, r0, lsl #4
    2df8:	7e040500 	cfsh32vc	mvfx0, mvfx4, #0
    2dfc:	11000001 	tstne	r0, r1
    2e00:	000013d5 	ldrdeq	r1, [r0], -r5
    2e04:	5c010801 	stcpl	8, cr0, [r1], {1}
    2e08:	a020002c 	eorge	r0, r0, ip, lsr #32
    2e0c:	01000001 	tsteq	r0, r1
    2e10:	0005a09c 	muleq	r5, ip, r0
    2e14:	00781700 	rsbseq	r1, r8, r0, lsl #14
    2e18:	2e010801 	cdpcs	8, 0, cr0, cr1, cr1, {0}
    2e1c:	02000001 	andeq	r0, r0, #1
    2e20:	79176491 	ldmdbvc	r7, {r0, r4, r7, sl, sp, lr}
    2e24:	01080100 	mrseq	r0, (UNDEF: 24)
    2e28:	0000012e 	andeq	r0, r0, lr, lsr #2
    2e2c:	17609102 	strbne	r9, [r0, -r2, lsl #2]!
    2e30:	00746573 	rsbseq	r6, r4, r3, ror r5
    2e34:	2e010801 	cdpcs	8, 0, cr0, cr1, cr1, {0}
    2e38:	02000001 	andeq	r0, r0, #1
    2e3c:	2d135c91 	ldccs	12, cr5, [r3, #-580]	; 0xfffffdbc
    2e40:	01000015 	tsteq	r0, r5, lsl r0
    2e44:	017e0109 	cmneq	lr, r9, lsl #2
    2e48:	91020000 	mrsls	r0, (UNDEF: 2)
    2e4c:	00631577 	rsbeq	r1, r3, r7, ror r5
    2e50:	7e010901 	vmlavc.f16	s0, s2, s2	; <UNPREDICTABLE>
    2e54:	02000001 	andeq	r0, r0, #1
    2e58:	88136f91 	ldmdahi	r3, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
    2e5c:	01000017 	tsteq	r0, r7, lsl r0
    2e60:	017e0109 	cmneq	lr, r9, lsl #2
    2e64:	91020000 	mrsls	r0, (UNDEF: 2)
    2e68:	158b1376 	strne	r1, [fp, #886]	; 0x376
    2e6c:	0a010000 	beq	42e74 <startup-0x1ffbd18c>
    2e70:	00012e01 	andeq	r2, r1, r1, lsl #28
    2e74:	70910200 	addsvc	r0, r1, r0, lsl #4
    2e78:	14201900 	strtne	r1, [r0], #-2304	; 0xfffff700
    2e7c:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    2e80:	20002adc 	ldrdcs	r2, [r0], -ip
    2e84:	00000180 	andeq	r0, r0, r0, lsl #3
    2e88:	06069c01 	streq	r9, [r6], -r1, lsl #24
    2e8c:	781a0000 	ldmdavc	sl, {}	; <UNPREDICTABLE>
    2e90:	2ede0100 	cdpcs	1, 13, cr0, cr14, cr0, {0}
    2e94:	02000001 	andeq	r0, r0, #1
    2e98:	791a6c91 	ldmdbvc	sl, {r0, r4, r7, sl, fp, sp, lr}
    2e9c:	2ede0100 	cdpcs	1, 13, cr0, cr14, cr0, {0}
    2ea0:	02000001 	andeq	r0, r0, #1
    2ea4:	731a6891 	tstvc	sl, #9502720	; 0x910000
    2ea8:	01007465 	tsteq	r0, r5, ror #8
    2eac:	00012ede 	ldrdeq	r2, [r1], -lr
    2eb0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2eb4:	0014e41b 	andseq	lr, r4, fp, lsl r4
    2eb8:	2ede0100 	cdpcs	1, 13, cr0, cr14, cr0, {0}
    2ebc:	02000001 	andeq	r0, r0, #1
    2ec0:	2d1c6091 	ldccs	0, cr6, [ip, #-580]	; 0xfffffdbc
    2ec4:	01000015 	tsteq	r0, r5, lsl r0
    2ec8:	00017edf 	ldrdeq	r7, [r1], -pc	; <UNPREDICTABLE>
    2ecc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2ed0:	00158b1c 	andseq	r8, r5, ip, lsl fp
    2ed4:	2ee00100 	cdpcs	1, 14, cr0, cr0, cr0, {0}
    2ed8:	02000001 	andeq	r0, r0, #1
    2edc:	1d007091 	stcne	0, cr7, [r0, #-580]	; 0xfffffdbc
    2ee0:	000015de 	ldrdeq	r1, [r0], -lr
    2ee4:	2a76d101 	bcs	1db72f0 <startup-0x1e248d10>
    2ee8:	00662000 	rsbeq	r2, r6, r0
    2eec:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ef0:	00000642 	andeq	r0, r0, r2, asr #12
    2ef4:	0013bc1c 	andseq	fp, r3, ip, lsl ip
    2ef8:	7ed20100 	cdpvc	1, 13, cr0, cr2, cr0, {0}
    2efc:	02000001 	andeq	r0, r0, #1
    2f00:	84187791 	ldrhi	r7, [r8], #-1937	; 0xfffff86f
    2f04:	3e20002a 	cdpcc	0, 2, cr0, cr0, cr10, {1}
    2f08:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2f0c:	00646461 	rsbeq	r6, r4, r1, ror #8
    2f10:	017ed601 	cmneq	lr, r1, lsl #12
    2f14:	91020000 	mrsls	r0, (UNDEF: 2)
    2f18:	1f000076 	svcne	0x00000076
    2f1c:	000015cb 	andeq	r1, r0, fp, asr #11
    2f20:	2a08bd01 	bcs	23232c <startup-0x1fdcdcd4>
    2f24:	006e2000 	rsbeq	r2, lr, r0
    2f28:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f2c:	00153f1d 	andseq	r3, r5, sp, lsl pc
    2f30:	c2b50100 	adcsgt	r0, r5, #0, 2
    2f34:	46200029 	strtmi	r0, [r0], -r9, lsr #32
    2f38:	01000000 	mrseq	r0, (UNDEF: 0)
    2f3c:	0006859c 	muleq	r6, ip, r5
    2f40:	14071b00 	strne	r1, [r7], #-2816	; 0xfffff500
    2f44:	b5010000 	strlt	r0, [r1, #-0]
    2f48:	0000017e 	andeq	r0, r0, lr, ror r1
    2f4c:	1b779102 	blne	1de735c <startup-0x1e218ca4>
    2f50:	00001788 	andeq	r1, r0, r8, lsl #15
    2f54:	017eb501 	cmneq	lr, r1, lsl #10
    2f58:	91020000 	mrsls	r0, (UNDEF: 2)
    2f5c:	f91d0076 			; <UNDEFINED> instruction: 0xf91d0076
    2f60:	01000013 	tsteq	r0, r3, lsl r0
    2f64:	00297cae 	eoreq	r7, r9, lr, lsr #25
    2f68:	00004620 	andeq	r4, r0, r0, lsr #12
    2f6c:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
    2f70:	1b000006 	blne	2f90 <startup-0x1fffd070>
    2f74:	00001407 	andeq	r1, r0, r7, lsl #8
    2f78:	017eae01 	cmneq	lr, r1, lsl #28
    2f7c:	91020000 	mrsls	r0, (UNDEF: 2)
    2f80:	17881b77 			; <UNDEFINED> instruction: 0x17881b77
    2f84:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    2f88:	0000017e 	andeq	r0, r0, lr, ror r1
    2f8c:	00769102 	rsbseq	r9, r6, r2, lsl #2
    2f90:	00146e1d 	andseq	r6, r4, sp, lsl lr
    2f94:	fe990100 	cdp2	1, 9, cr0, cr9, cr0, {0}
    2f98:	7e200028 	cdpvc	0, 2, cr0, cr0, cr8, {1}
    2f9c:	01000000 	mrseq	r0, (UNDEF: 0)
    2fa0:	0006e99c 	muleq	r6, ip, r9
    2fa4:	061f1b00 	ldreq	r1, [pc], -r0, lsl #22
    2fa8:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    2fac:	0000017e 	andeq	r0, r0, lr, ror r1
    2fb0:	1b779102 	blne	1de73c0 <startup-0x1e218c40>
    2fb4:	00001788 	andeq	r1, r0, r8, lsl #15
    2fb8:	017e9901 	cmneq	lr, r1, lsl #18
    2fbc:	91020000 	mrsls	r0, (UNDEF: 2)
    2fc0:	d2200076 	eorle	r0, r0, #118	; 0x76
    2fc4:	01000014 	tsteq	r0, r4, lsl r0
    2fc8:	00012e94 	muleq	r1, r4, lr
    2fcc:	0028d400 	eoreq	sp, r8, r0, lsl #8
    2fd0:	00002a20 	andeq	r2, r0, r0, lsr #20
    2fd4:	119c0100 	orrsne	r0, ip, r0, lsl #2
    2fd8:	1b000007 	blne	2ffc <startup-0x1fffd004>
    2fdc:	00001788 	andeq	r1, r0, r8, lsl #15
    2fe0:	017e9401 	cmneq	lr, r1, lsl #8
    2fe4:	91020000 	mrsls	r0, (UNDEF: 2)
    2fe8:	c1210077 			; <UNDEFINED> instruction: 0xc1210077
    2fec:	01000013 	tsteq	r0, r3, lsl r0
    2ff0:	00017e7b 	andeq	r7, r1, fp, ror lr
    2ff4:	00284000 	eoreq	r4, r8, r0
    2ff8:	00009420 	andeq	r9, r0, r0, lsr #8
    2ffc:	469c0100 	ldrmi	r0, [ip], r0, lsl #2
    3000:	1b000007 	blne	3024 <startup-0x1fffcfdc>
    3004:	00001788 	andeq	r1, r0, r8, lsl #15
    3008:	017e7b01 	cmneq	lr, r1, lsl #22
    300c:	91020000 	mrsls	r0, (UNDEF: 2)
    3010:	76721e6f 	ldrbtvc	r1, [r2], -pc, ror #28
    3014:	5b840100 	blpl	fe10341c <firstTime.4040+0xde0f8f60>
    3018:	02000000 	andeq	r0, r0, #0
    301c:	1d007791 	stcne	7, cr7, [r0, #-580]	; 0xfffffdbc
    3020:	000015a3 	andeq	r1, r0, r3, lsr #11
    3024:	27d26501 	ldrbcs	r6, [r2, r1, lsl #10]
    3028:	006e2000 	rsbeq	r2, lr, r0
    302c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3030:	00000768 	andeq	r0, r0, r8, ror #14
    3034:	0100631e 	tsteq	r0, lr, lsl r3
    3038:	00017e66 	andeq	r7, r1, r6, ror #28
    303c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3040:	15911d00 	ldrne	r1, [r1, #3328]	; 0xd00
    3044:	50010000 	andpl	r0, r1, r0
    3048:	2000276c 	andcs	r2, r0, ip, ror #14
    304c:	00000066 	andeq	r0, r0, r6, rrx
    3050:	078c9c01 	streq	r9, [ip, r1, lsl #24]
    3054:	881b0000 	ldmdahi	fp, {}	; <UNPREDICTABLE>
    3058:	01000017 	tsteq	r0, r7, lsl r0
    305c:	00017e50 	andeq	r7, r1, r0, asr lr
    3060:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3064:	148a2200 	strne	r2, [sl], #512	; 0x200
    3068:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    306c:	20002714 	andcs	r2, r0, r4, lsl r7
    3070:	00000058 	andeq	r0, r0, r8, asr r0
    3074:	07ba9c01 	ldreq	r9, [sl, r1, lsl #24]!
    3078:	781a0000 	ldmdavc	sl, {}	; <UNPREDICTABLE>
    307c:	7e490100 	dvfvce	f0, f1, f0
    3080:	02000001 	andeq	r0, r0, #1
    3084:	631e6f91 	tstvs	lr, #580	; 0x244
    3088:	7e4a0100 	dvfvce	f0, f2, f0
    308c:	02000001 	andeq	r0, r0, #1
    3090:	22007791 	andcs	r7, r0, #38010880	; 0x2440000
    3094:	000014fe 	strdeq	r1, [r0], -lr
    3098:	26c44101 	strbcs	r4, [r4], r1, lsl #2
    309c:	00502000 	subseq	r2, r0, r0
    30a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    30a4:	000007e8 	andeq	r0, r0, r8, ror #15
    30a8:	0100781a 	tsteq	r0, sl, lsl r8
    30ac:	00017e41 	andeq	r7, r1, r1, asr #28
    30b0:	6f910200 	svcvs	0x00910200
    30b4:	0100631e 	tsteq	r0, lr, lsl r3
    30b8:	00017e42 	andeq	r7, r1, r2, asr #28
    30bc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    30c0:	15661f00 	strbne	r1, [r6, #-3840]!	; 0xfffff100
    30c4:	3a010000 	bcc	430cc <startup-0x1ffbcf34>
    30c8:	20002694 	mulcs	r0, r4, r6
    30cc:	00000030 	andeq	r0, r0, r0, lsr r0
    30d0:	0f1f9c01 	svceq	0x001f9c01
    30d4:	01000014 	tsteq	r0, r4, lsl r0
    30d8:	00267c37 	eoreq	r7, r6, r7, lsr ip
    30dc:	00001820 	andeq	r1, r0, r0, lsr #16
    30e0:	199c0100 	ldmibne	ip, {r8}
    30e4:	000015b6 			; <UNDEFINED> instruction: 0x000015b6
    30e8:	264a3201 	strbcs	r3, [sl], -r1, lsl #4
    30ec:	00322000 	eorseq	r2, r2, r0
    30f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    30f4:	0000083a 	andeq	r0, r0, sl, lsr r8
    30f8:	0013ce1b 	andseq	ip, r3, fp, lsl lr
    30fc:	20320100 	eorscs	r0, r2, r0, lsl #2
    3100:	02000005 	andeq	r0, r0, #5
    3104:	691e6c91 	ldmdbvs	lr, {r0, r4, r7, sl, fp, sp, lr}
    3108:	2e330100 	rsfcss	f0, f3, f0
    310c:	02000001 	andeq	r0, r0, #1
    3110:	1d007491 	cfstrsne	mvf7, [r0, #-580]	; 0xfffffdbc
    3114:	0000143f 	andeq	r1, r0, pc, lsr r4
    3118:	26242101 	strtcs	r2, [r4], -r1, lsl #2
    311c:	00262000 	eoreq	r2, r6, r0
    3120:	9c010000 	stcls	0, cr0, [r1], {-0}
    3124:	0000085d 	andeq	r0, r0, sp, asr r8
    3128:	00736d1a 	rsbseq	r6, r3, sl, lsl sp
    312c:	004e2101 	subeq	r2, lr, r1, lsl #2
    3130:	91020000 	mrsls	r0, (UNDEF: 2)
    3134:	ed1d0074 	ldc	0, cr0, [sp, #-464]	; 0xfffffe30
    3138:	01000013 	tsteq	r0, r3, lsl r0
    313c:	0025f818 	eoreq	pc, r5, r8, lsl r8	; <UNPREDICTABLE>
    3140:	00002c20 	andeq	r2, r0, r0, lsr #24
    3144:	809c0100 	addshi	r0, ip, r0, lsl #2
    3148:	1a000008 	bne	3170 <startup-0x1fffce90>
    314c:	01007375 	tsteq	r0, r5, ror r3
    3150:	00004e18 	andeq	r4, r0, r8, lsl lr
    3154:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3158:	14622300 	strbtne	r2, [r2], #-768	; 0xfffffd00
    315c:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    3160:	200025b4 			; <UNDEFINED> instruction: 0x200025b4
    3164:	00000044 	andeq	r0, r0, r4, asr #32
    3168:	13239c01 			; <UNDEFINED> instruction: 0x13239c01
    316c:	01000015 	tsteq	r0, r5, lsl r0
    3170:	00257004 	eoreq	r7, r5, r4
    3174:	00004420 	andeq	r4, r0, r0, lsr #8
    3178:	009c0100 	addseq	r0, ip, r0, lsl #2
    317c:	00000100 	andeq	r0, r0, r0, lsl #2
    3180:	0aa80004 	beq	fea03198 <firstTime.4040+0xde9f8cdc>
    3184:	01040000 	mrseq	r0, (UNDEF: 4)
    3188:	0000008f 	andeq	r0, r0, pc, lsl #1
    318c:	0015fe0c 	andseq	pc, r5, ip, lsl #28
    3190:	0033b400 	eorseq	fp, r3, r0, lsl #8
    3194:	00002820 	andeq	r2, r0, r0, lsr #16
    3198:	00104c00 	andseq	r4, r0, r0, lsl #24
    319c:	020c0200 	andeq	r0, ip, #0, 4
    31a0:	00004e05 	andeq	r4, r0, r5, lsl #28
    31a4:	034b0300 	movteq	r0, #45824	; 0xb300
    31a8:	07020000 	streq	r0, [r2, -r0]
    31ac:	0000004e 	andeq	r0, r0, lr, asr #32
    31b0:	06e40300 	strbteq	r0, [r4], r0, lsl #6
    31b4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    31b8:	0000004e 	andeq	r0, r0, lr, asr #32
    31bc:	14df0304 	ldrbne	r0, [pc], #772	; 31c4 <startup-0x1fffce3c>
    31c0:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    31c4:	00000055 	andeq	r0, r0, r5, asr r0
    31c8:	04040008 	streq	r0, [r4], #-8
    31cc:	00036f07 	andeq	r6, r3, r7, lsl #30
    31d0:	5b040500 	blpl	1045d8 <startup-0x1fefba28>
    31d4:	04000000 	streq	r0, [r0], #-0
    31d8:	04ae0801 	strteq	r0, [lr], #2049	; 0x801
    31dc:	31060000 	mrscc	r0, (UNDEF: 6)
    31e0:	02000016 	andeq	r0, r0, #22
    31e4:	0000210a 	andeq	r2, r0, sl, lsl #2
    31e8:	00240700 	eoreq	r0, r4, r0, lsl #14
    31ec:	030c0000 	movweq	r0, #49152	; 0xc000
    31f0:	00009e06 	andeq	r9, r0, r6, lsl #28
    31f4:	05a40300 	streq	r0, [r4, #768]!	; 0x300
    31f8:	07030000 	streq	r0, [r3, -r0]
    31fc:	0000009e 	muleq	r0, lr, r0
    3200:	002b0300 	eoreq	r0, fp, r0, lsl #6
    3204:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    3208:	0000009e 	muleq	r0, lr, r0
    320c:	00200304 	eoreq	r0, r0, r4, lsl #6
    3210:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    3214:	0000009e 	muleq	r0, lr, r0
    3218:	04050008 	streq	r0, [r5], #-8
    321c:	00000062 	andeq	r0, r0, r2, rrx
    3220:	000fff06 	andeq	pc, pc, r6, lsl #30
    3224:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
    3228:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    322c:	000015f3 	strdeq	r1, [r0], -r3
    3230:	33b40301 			; <UNDEFINED> instruction: 0x33b40301
    3234:	00282000 	eoreq	r2, r8, r0
    3238:	9c010000 	stcls	0, cr0, [r1], {-0}
    323c:	000000fd 	strdeq	r0, [r0], -sp
    3240:	0015f809 	andseq	pc, r5, r9, lsl #16
    3244:	fd030100 	stc2	1, cr0, [r3, #-0]
    3248:	02000000 	andeq	r0, r0, #0
    324c:	a4097491 	strge	r7, [r9], #-1169	; 0xfffffb6f
    3250:	01000005 	tsteq	r0, r5
    3254:	00009e03 	andeq	r9, r0, r3, lsl #28
    3258:	70910200 	addsvc	r0, r1, r0, lsl #4
    325c:	00002b09 	andeq	r2, r0, r9, lsl #22
    3260:	9e030100 	adflss	f0, f3, f0
    3264:	02000000 	andeq	r0, r0, #0
    3268:	20096c91 	mulcs	r9, r1, ip
    326c:	01000000 	mrseq	r0, (UNDEF: 0)
    3270:	00009e03 	andeq	r9, r0, r3, lsl #28
    3274:	68910200 	ldmvs	r1, {r9}
    3278:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    327c:	00000000 	andeq	r0, r0, r0
    3280:	000000c3 	andeq	r0, r0, r3, asr #1
    3284:	0b2f0004 	bleq	bc329c <startup-0x1f43cd64>
    3288:	01040000 	mrseq	r0, (UNDEF: 4)
    328c:	0000008f 	andeq	r0, r0, pc, lsl #1
    3290:	0016380c 	andseq	r3, r6, ip, lsl #16
    3294:	0033dc00 	eorseq	sp, r3, r0, lsl #24
    3298:	00002820 	andeq	r2, r0, r0, lsr #16
    329c:	0010c200 	andseq	ip, r0, r0, lsl #4
    32a0:	020c0200 	andeq	r0, ip, #0, 4
    32a4:	00004e05 	andeq	r4, r0, r5, lsl #28
    32a8:	034b0300 	movteq	r0, #45824	; 0xb300
    32ac:	07020000 	streq	r0, [r2, -r0]
    32b0:	0000004e 	andeq	r0, r0, lr, asr #32
    32b4:	06e40300 	strbteq	r0, [r4], r0, lsl #6
    32b8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    32bc:	0000004e 	andeq	r0, r0, lr, asr #32
    32c0:	14df0304 	ldrbne	r0, [pc], #772	; 32c8 <startup-0x1fffcd38>
    32c4:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    32c8:	00000055 	andeq	r0, r0, r5, asr r0
    32cc:	04040008 	streq	r0, [r4], #-8
    32d0:	00036f07 	andeq	r6, r3, r7, lsl #30
    32d4:	5b040500 	blpl	1046dc <startup-0x1fefb924>
    32d8:	04000000 	streq	r0, [r0], #-0
    32dc:	04ae0801 	strteq	r0, [lr], #2049	; 0x801
    32e0:	31060000 	mrscc	r0, (UNDEF: 6)
    32e4:	02000016 	andeq	r0, r0, #22
    32e8:	0000210a 	andeq	r2, r0, sl, lsl #2
    32ec:	162c0700 	strtne	r0, [ip], -r0, lsl #14
    32f0:	03010000 	movweq	r0, #4096	; 0x1000
    32f4:	200033dc 	ldrdcs	r3, [r0], -ip
    32f8:	00000028 	andeq	r0, r0, r8, lsr #32
    32fc:	00b99c01 	adcseq	r9, r9, r1, lsl #24
    3300:	73080000 	movwvc	r0, #32768	; 0x8000
    3304:	b9030100 	stmdblt	r3, {r8}
    3308:	02000000 	andeq	r0, r0, #0
    330c:	df097491 	svcle	0x00097491
    3310:	01000014 	tsteq	r0, r4, lsl r0
    3314:	00005503 	andeq	r5, r0, r3, lsl #10
    3318:	70910200 	addsvc	r0, r1, r0, lsl #4
    331c:	00034b09 	andeq	r4, r3, r9, lsl #22
    3320:	bf030100 	svclt	0x00030100
    3324:	02000000 	andeq	r0, r0, #0
    3328:	e4096c91 	str	r6, [r9], #-3217	; 0xfffff36f
    332c:	01000006 	tsteq	r0, r6
    3330:	0000bf03 	andeq	fp, r0, r3, lsl #30
    3334:	68910200 	ldmvs	r1, {r9}
    3338:	62040500 	andvs	r0, r4, #0, 10
    333c:	0a000000 	beq	3344 <startup-0x1fffccbc>
    3340:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    3344:	35000074 	strcc	r0, [r0, #-116]	; 0xffffff8c
    3348:	04000001 	streq	r0, [r0], #-1
    334c:	000bc100 	andeq	ip, fp, r0, lsl #2
    3350:	8f010400 	svchi	0x00010400
    3354:	0c000000 	stceq	0, cr0, [r0], {-0}
    3358:	0000169e 	muleq	r0, lr, r6
    335c:	20003404 	andcs	r3, r0, r4, lsl #8
    3360:	0000006c 	andeq	r0, r0, ip, rrx
    3364:	0000112e 	andeq	r1, r0, lr, lsr #2
    3368:	13021802 	movwne	r1, #10242	; 0x2802
    336c:	000000ae 	andeq	r0, r0, lr, lsr #1
    3370:	00166703 	andseq	r6, r6, r3, lsl #14
    3374:	ae140200 	cdpge	2, 1, cr0, cr4, cr0, {0}
    3378:	00000000 	andeq	r0, r0, r0
    337c:	00168003 	andseq	r8, r6, r3
    3380:	b5150200 	ldrlt	r0, [r5, #-512]	; 0xfffffe00
    3384:	04000000 	streq	r0, [r0], #-0
    3388:	0016cb03 	andseq	ip, r6, r3, lsl #22
    338c:	b5160200 	ldrlt	r0, [r6, #-512]	; 0xfffffe00
    3390:	06000000 	streq	r0, [r0], -r0
    3394:	0016ed03 	andseq	lr, r6, r3, lsl #26
    3398:	ae170200 	cdpge	2, 1, cr0, cr7, cr0, {0}
    339c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    33a0:	00168c03 	andseq	r8, r6, r3, lsl #24
    33a4:	ae180200 	cdpge	2, 1, cr0, cr8, cr0, {0}
    33a8:	0c000000 	stceq	0, cr0, [r0], {-0}
    33ac:	0016fd03 	andseq	pc, r6, r3, lsl #26
    33b0:	bc190200 	lfmlt	f0, 4, [r9], {-0}
    33b4:	10000000 	andne	r0, r0, r0
    33b8:	0016f503 	andseq	pc, r6, r3, lsl #10
    33bc:	bc1a0200 	lfmlt	f0, 4, [sl], {-0}
    33c0:	11000000 	mrsne	r0, (UNDEF: 0)
    33c4:	00169203 	andseq	r9, r6, r3, lsl #4
    33c8:	b51b0200 	ldrlt	r0, [fp, #-512]	; 0xfffffe00
    33cc:	12000000 	andne	r0, r0, #0
    33d0:	0016e603 	andseq	lr, r6, r3, lsl #12
    33d4:	bc1c0200 	lfmlt	f0, 4, [ip], {-0}
    33d8:	14000000 	strne	r0, [r0], #-0
    33dc:	00167803 	andseq	r7, r6, r3, lsl #16
    33e0:	bc1d0200 	lfmlt	f0, 4, [sp], {-0}
    33e4:	15000000 	strne	r0, [r0, #-0]
    33e8:	00170403 	andseq	r0, r7, r3, lsl #8
    33ec:	b51e0200 	ldrlt	r0, [lr, #-512]	; 0xfffffe00
    33f0:	16000000 	strne	r0, [r0], -r0
    33f4:	07040400 	streq	r0, [r4, -r0, lsl #8]
    33f8:	0000036f 	andeq	r0, r0, pc, ror #6
    33fc:	69070204 	stmdbvs	r7, {r2, r9}
    3400:	04000003 	streq	r0, [r0], #-3
    3404:	04ae0801 	strteq	r0, [lr], #2049	; 0x801
    3408:	87050000 	strhi	r0, [r5, -r0]
    340c:	02000016 	andeq	r0, r0, #22
    3410:	0000211f 	andeq	r2, r0, pc, lsl r1
    3414:	16d60600 	ldrbne	r0, [r6], r0, lsl #12
    3418:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    341c:	00000104 	andeq	r0, r0, r4, lsl #2
    3420:	2000343c 	andcs	r3, r0, ip, lsr r4
    3424:	00000034 	andeq	r0, r0, r4, lsr r0
    3428:	01049c01 	tsteq	r4, r1, lsl #24
    342c:	62070000 	andvs	r0, r7, #0
    3430:	01007469 	tsteq	r0, r9, ror #8
    3434:	0001040e 	andeq	r0, r1, lr, lsl #8
    3438:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    343c:	4c494408 	cfstrdmi	mvd4, [r9], {8}
    3440:	0b0f0100 	bleq	3c3848 <startup-0x1fc3c7b8>
    3444:	02000001 	andeq	r0, r0, #1
    3448:	09006f91 	stmdbeq	r0, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
    344c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    3450:	01040074 	tsteq	r4, r4, ror r0
    3454:	0004b708 	andeq	fp, r4, r8, lsl #14
    3458:	17100a00 	ldrne	r0, [r0, -r0, lsl #20]
    345c:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    3460:	0000010b 	andeq	r0, r0, fp, lsl #2
    3464:	2000341c 	andcs	r3, r0, ip, lsl r4
    3468:	00000020 	andeq	r0, r0, r0, lsr #32
    346c:	6d0b9c01 	stcvs	12, cr9, [fp, #-4]
    3470:	01000016 	tsteq	r0, r6, lsl r0
    3474:	00340404 	eorseq	r0, r4, r4, lsl #8
    3478:	00001820 	andeq	r1, r0, r0, lsr #16
    347c:	009c0100 	addseq	r0, ip, r0, lsl #2
    3480:	000004ed 	andeq	r0, r0, sp, ror #9
    3484:	0c7e0004 	ldcleq	0, cr0, [lr], #-16
    3488:	01040000 	mrseq	r0, (UNDEF: 4)
    348c:	0000008f 	andeq	r0, r0, pc, lsl #1
    3490:	0018550c 	andseq	r5, r8, ip, lsl #10
    3494:	00347000 	eorseq	r7, r4, r0
    3498:	00052020 	andeq	r2, r5, r0, lsr #32
    349c:	00119e00 	andseq	r9, r1, r0, lsl #28
    34a0:	020c0200 	andeq	r0, ip, #0, 4
    34a4:	00004e05 	andeq	r4, r0, r5, lsl #28
    34a8:	034b0300 	movteq	r0, #45824	; 0xb300
    34ac:	07020000 	streq	r0, [r2, -r0]
    34b0:	0000004e 	andeq	r0, r0, lr, asr #32
    34b4:	06e40300 	strbteq	r0, [r4], r0, lsl #6
    34b8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    34bc:	0000004e 	andeq	r0, r0, lr, asr #32
    34c0:	14df0304 	ldrbne	r0, [pc], #772	; 34c8 <startup-0x1fffcb38>
    34c4:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    34c8:	00000055 	andeq	r0, r0, r5, asr r0
    34cc:	04040008 	streq	r0, [r4], #-8
    34d0:	00036f07 	andeq	r6, r3, r7, lsl #30
    34d4:	5b040500 	blpl	1048dc <startup-0x1fefb724>
    34d8:	04000000 	streq	r0, [r0], #-0
    34dc:	04ae0801 	strteq	r0, [lr], #2049	; 0x801
    34e0:	31060000 	mrscc	r0, (UNDEF: 6)
    34e4:	02000016 	andeq	r0, r0, #22
    34e8:	0000210a 	andeq	r2, r0, sl, lsl #2
    34ec:	00240700 	eoreq	r0, r4, r0, lsl #14
    34f0:	030c0000 	movweq	r0, #49152	; 0xc000
    34f4:	00009e06 	andeq	r9, r0, r6, lsl #28
    34f8:	05a40300 	streq	r0, [r4, #768]!	; 0x300
    34fc:	07030000 	streq	r0, [r3, -r0]
    3500:	0000009e 	muleq	r0, lr, r0
    3504:	002b0300 	eoreq	r0, fp, r0, lsl #6
    3508:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    350c:	0000009e 	muleq	r0, lr, r0
    3510:	00200304 	eoreq	r0, r0, r4, lsl #6
    3514:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    3518:	0000009e 	muleq	r0, lr, r0
    351c:	04050008 	streq	r0, [r5], #-8
    3520:	00000062 	andeq	r0, r0, r2, rrx
    3524:	000fff06 	andeq	pc, pc, r6, lsl #30
    3528:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
    352c:	07000000 	streq	r0, [r0, -r0]
    3530:	000006a9 	andeq	r0, r0, r9, lsr #13
    3534:	28060424 	stmdacs	r6, {r2, r5, sl}
    3538:	03000001 	movweq	r0, #1
    353c:	0000043c 	andeq	r0, r0, ip, lsr r4
    3540:	01280704 			; <UNDEFINED> instruction: 0x01280704
    3544:	03000000 	movweq	r0, #0
    3548:	000006b5 			; <UNDEFINED> instruction: 0x000006b5
    354c:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
    3550:	03040000 	movweq	r0, #16384	; 0x4000
    3554:	0000060f 	andeq	r0, r0, pc, lsl #12
    3558:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
    355c:	03080000 	movweq	r0, #32768	; 0x8000
    3560:	0000063b 	andeq	r0, r0, fp, lsr r6
    3564:	01460c04 	cmpeq	r6, r4, lsl #24
    3568:	030c0000 	movweq	r0, #49152	; 0xc000
    356c:	00000332 	andeq	r0, r0, r2, lsr r3
    3570:	01460d04 	cmpeq	r6, r4, lsl #26
    3574:	03100000 	tsteq	r0, #0
    3578:	0000044e 	andeq	r0, r0, lr, asr #8
    357c:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
    3580:	03140000 	tsteq	r4, #0
    3584:	00000060 	andeq	r0, r0, r0, rrx
    3588:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
    358c:	03180000 	tsteq	r8, #0
    3590:	000003bf 			; <UNDEFINED> instruction: 0x000003bf
    3594:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
    3598:	031c0000 	tsteq	ip, #0
    359c:	000003cf 	andeq	r0, r0, pc, asr #7
    35a0:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
    35a4:	00200000 	eoreq	r0, r0, r0
    35a8:	00a40405 	adceq	r0, r4, r5, lsl #8
    35ac:	04080000 	streq	r0, [r8], #-0
    35b0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    35b4:	01400900 	cmpeq	r0, r0, lsl #18
    35b8:	400a0000 	andmi	r0, sl, r0
    35bc:	00000001 	andeq	r0, r0, r1
    35c0:	00af0405 	adceq	r0, pc, r5, lsl #8
    35c4:	04050000 	streq	r0, [r5], #-0
    35c8:	00000135 	andeq	r0, r0, r5, lsr r1
    35cc:	0006aa06 	andeq	sl, r6, r6, lsl #20
    35d0:	af150400 	svcge	0x00150400
    35d4:	0b000000 	bleq	35dc <startup-0x1fffca24>
    35d8:	00000162 	andeq	r0, r0, r2, ror #2
    35dc:	00000162 	andeq	r0, r0, r2, ror #2
    35e0:	0405000c 	streq	r0, [r5], #-12
    35e4:	0000014c 	andeq	r0, r0, ip, asr #2
    35e8:	0005310d 	andeq	r3, r5, sp, lsl #2
    35ec:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
    35f0:	0d000001 	stceq	0, cr0, [r0, #-4]
    35f4:	0000040a 	andeq	r0, r0, sl, lsl #8
    35f8:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
    35fc:	6d060000 	stcvs	0, cr0, [r6, #-0]
    3600:	05000006 	streq	r0, [r0, #-6]
    3604:	00005b24 	andeq	r5, r0, r4, lsr #22
    3608:	017e0b00 	cmneq	lr, r0, lsl #22
    360c:	019a0000 	orrseq	r0, sl, r0
    3610:	9a0e0000 	bls	383618 <startup-0x1fc7c9e8>
    3614:	ff000001 			; <UNDEFINED> instruction: 0xff000001
    3618:	04040003 	streq	r0, [r4], #-3
    361c:	0003ec07 	andeq	lr, r3, r7, lsl #24
    3620:	14150d00 	ldrne	r0, [r5], #-3328	; 0xfffff300
    3624:	2b050000 	blcs	14362c <startup-0x1febc9d4>
    3628:	00000189 	andeq	r0, r0, r9, lsl #3
    362c:	0002380d 	andeq	r3, r2, sp, lsl #16
    3630:	892c0500 	stmdbhi	ip!, {r8, sl}
    3634:	0d000001 	stceq	0, cr0, [r0, #-4]
    3638:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
    363c:	01892d05 	orreq	r2, r9, r5, lsl #26
    3640:	510d0000 	mrspl	r0, (UNDEF: 13)
    3644:	05000003 	streq	r0, [r0, #-3]
    3648:	0001892e 	andeq	r8, r1, lr, lsr #18
    364c:	02c00d00 	sbceq	r0, r0, #0, 26
    3650:	2f050000 	svccs	0x00050000
    3654:	00000189 	andeq	r0, r0, r9, lsl #3
    3658:	00068b0d 	andeq	r8, r6, sp, lsl #22
    365c:	89300500 	ldmdbhi	r0!, {r8, sl}
    3660:	0d000001 	stceq	0, cr0, [r0, #-4]
    3664:	0000067b 	andeq	r0, r0, fp, ror r6
    3668:	01893105 	orreq	r3, r9, r5, lsl #2
    366c:	db0f0000 	blle	3c3674 <startup-0x1fc3c98c>
    3670:	01000017 	tsteq	r0, r7, lsl r0
    3674:	00390ce4 	eorseq	r0, r9, r4, ror #25
    3678:	00008420 	andeq	r8, r0, r0, lsr #8
    367c:	2c9c0100 	ldfcss	f0, [ip], {0}
    3680:	10000002 	andne	r0, r0, r2
    3684:	e5010073 	str	r0, [r1, #-115]	; 0xffffff8d
    3688:	0000022c 	andeq	r0, r0, ip, lsr #4
    368c:	116c9102 	cmnne	ip, r2, lsl #2
    3690:	000017b6 			; <UNDEFINED> instruction: 0x000017b6
    3694:	0239e601 	eorseq	lr, r9, #1048576	; 0x100000
    3698:	91020000 	mrsls	r0, (UNDEF: 2)
    369c:	17bc115c 	sbfxne	r1, ip, #2, #29
    36a0:	e7010000 	str	r0, [r1, -r0]
    36a4:	00000249 	andeq	r0, r0, r9, asr #4
    36a8:	00489102 	subeq	r9, r8, r2, lsl #2
    36ac:	02320405 	eorseq	r0, r2, #83886080	; 0x5000000
    36b0:	01040000 	mrseq	r0, (UNDEF: 4)
    36b4:	0004b708 	andeq	fp, r4, r8, lsl #14
    36b8:	02320b00 	eorseq	r0, r2, #0, 22
    36bc:	02490000 	subeq	r0, r9, #0
    36c0:	9a120000 	bls	4836c8 <startup-0x1fb7c938>
    36c4:	0c000001 	stceq	0, cr0, [r0], {1}
    36c8:	02320b00 	eorseq	r0, r2, #0, 22
    36cc:	02590000 	subseq	r0, r9, #0
    36d0:	9a120000 	bls	4836d8 <startup-0x1fb7c928>
    36d4:	13000001 	movwne	r0, #1
    36d8:	176c0f00 	strbne	r0, [ip, -r0, lsl #30]!
    36dc:	cc010000 	stcgt	0, cr0, [r1], {-0}
    36e0:	2000387e 	andcs	r3, r0, lr, ror r8
    36e4:	0000008e 	andeq	r0, r0, lr, lsl #1
    36e8:	02b39c01 	adcseq	r9, r3, #256	; 0x100
    36ec:	a4130000 	ldrge	r0, [r3], #-0
    36f0:	01000018 	tsteq	r0, r8, lsl r0
    36f4:	00022ccc 	andeq	r2, r2, ip, asr #25
    36f8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    36fc:	00027613 	andeq	r7, r2, r3, lsl r6
    3700:	2ccc0100 	stfcse	f0, [ip], {0}
    3704:	02000002 	andeq	r0, r0, #2
    3708:	4e136891 	mrcmi	8, 0, r6, cr3, cr1, {4}
    370c:	01000018 	tsteq	r0, r8, lsl r0
    3710:	00012ecc 	andeq	r2, r1, ip, asr #29
    3714:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3718:	00172a13 	andseq	r2, r7, r3, lsl sl
    371c:	2ecc0100 	polcse	f0, f4, f0
    3720:	02000001 	andeq	r0, r0, #1
    3724:	69106091 	ldmdbvs	r0, {r0, r4, r7, sp, lr}
    3728:	2ed00100 	cdpcs	1, 13, cr0, cr0, cr0, {0}
    372c:	02000001 	andeq	r0, r0, #1
    3730:	0f007491 	svceq	0x00007491
    3734:	0000180d 	andeq	r1, r0, sp, lsl #16
    3738:	3820bd01 	stmdacc	r0!, {r0, r8, sl, fp, ip, sp, pc}
    373c:	005e2000 	subseq	r2, lr, r0
    3740:	9c010000 	stcls	0, cr0, [r1], {-0}
    3744:	000002e5 	andeq	r0, r0, r5, ror #5
    3748:	0018a413 	andseq	sl, r8, r3, lsl r4
    374c:	2cbd0100 	ldfcss	f0, [sp]
    3750:	02000002 	andeq	r0, r0, #2
    3754:	76137491 			; <UNDEFINED> instruction: 0x76137491
    3758:	01000002 	tsteq	r0, r2
    375c:	00022cbd 			; <UNDEFINED> instruction: 0x00022cbd
    3760:	70910200 	addsvc	r0, r1, r0, lsl #4
    3764:	17600f00 	strbne	r0, [r0, -r0, lsl #30]!
    3768:	ad010000 	stcge	0, cr0, [r1, #-0]
    376c:	200037b6 			; <UNDEFINED> instruction: 0x200037b6
    3770:	0000006a 	andeq	r0, r0, sl, rrx
    3774:	03159c01 	tsteq	r5, #256	; 0x100
    3778:	73100000 	tstvc	r0, #0
    377c:	2cae0100 	stfcss	f0, [lr]
    3780:	02000002 	andeq	r0, r0, #2
    3784:	9b116c91 	blls	45e9d0 <startup-0x1fba1630>
    3788:	01000014 	tsteq	r0, r4, lsl r0
    378c:	000315af 	andeq	r1, r3, pc, lsr #11
    3790:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    3794:	02320b00 	eorseq	r0, r2, #0, 22
    3798:	03250000 			; <UNDEFINED> instruction: 0x03250000
    379c:	9a120000 	bls	4837a4 <startup-0x1fb7c85c>
    37a0:	14000001 	strne	r0, [r0], #-1
    37a4:	17411400 	strbne	r1, [r1, -r0, lsl #8]
    37a8:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    37ac:	200037a4 	andcs	r3, r0, r4, lsr #15
    37b0:	00000012 	andeq	r0, r0, r2, lsl r0
    37b4:	19159c01 	ldmdbne	r5, {r0, sl, fp, ip, pc}
    37b8:	01000017 	tsteq	r0, r7, lsl r0
    37bc:	00378a9f 	mlaseq	r7, pc, sl, r8	; <UNPREDICTABLE>
    37c0:	00001a20 	andeq	r1, r0, r0, lsr #20
    37c4:	149c0100 	ldrne	r0, [ip], #256	; 0x100
    37c8:	0000174e 	andeq	r1, r0, lr, asr #14
    37cc:	36f08301 	ldrbtcc	r8, [r0], r1, lsl #6
    37d0:	009a2000 	addseq	r2, sl, r0
    37d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    37d8:	0018190f 	andseq	r1, r8, pc, lsl #18
    37dc:	a07b0100 	rsbsge	r0, fp, r0, lsl #2
    37e0:	50200036 	eorpl	r0, r0, r6, lsr r0
    37e4:	01000000 	mrseq	r0, (UNDEF: 0)
    37e8:	0003989c 	muleq	r3, ip, r8
    37ec:	6f721600 	svcvs	0x00721600
    37f0:	7b010077 	blvc	439d4 <startup-0x1ffbc62c>
    37f4:	0000005b 	andeq	r0, r0, fp, asr r0
    37f8:	136f9102 	cmnne	pc, #-2147483648	; 0x80000000
    37fc:	00001759 	andeq	r1, r0, r9, asr r7
    3800:	005b7b01 	subseq	r7, fp, r1, lsl #22
    3804:	91020000 	mrsls	r0, (UNDEF: 2)
    3808:	17c2116e 	strbne	r1, [r2, lr, ror #2]
    380c:	7c010000 	stcvc	0, cr0, [r1], {-0}
    3810:	0000005b 	andeq	r0, r0, fp, asr r0
    3814:	00779102 	rsbseq	r9, r7, r2, lsl #2
    3818:	00183d0f 	andseq	r3, r8, pc, lsl #26
    381c:	64740100 	ldrbtvs	r0, [r4], #-256	; 0xffffff00
    3820:	3c200036 	stccc	0, cr0, [r0], #-216	; 0xffffff28
    3824:	01000000 	mrseq	r0, (UNDEF: 0)
    3828:	0003ba9c 	muleq	r3, ip, sl
    382c:	00631600 	rsbeq	r1, r3, r0, lsl #12
    3830:	005b7401 	subseq	r7, fp, r1, lsl #8
    3834:	91020000 	mrsls	r0, (UNDEF: 2)
    3838:	7d170077 	ldcvc	0, cr0, [r7, #-476]	; 0xfffffe24
    383c:	01000017 	tsteq	r0, r7, lsl r0
    3840:	00005b6a 	andeq	r5, r0, sl, ror #22
    3844:	00363000 	eorseq	r3, r6, r0
    3848:	00003420 	andeq	r3, r0, r0, lsr #8
    384c:	e09c0100 	adds	r0, ip, r0, lsl #2
    3850:	10000003 	andne	r0, r0, r3
    3854:	6b010063 	blvs	439e8 <startup-0x1ffbc618>
    3858:	0000005b 	andeq	r0, r0, fp, asr r0
    385c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    3860:	0018260f 	andseq	r2, r8, pc, lsl #12
    3864:	00630100 	rsbeq	r0, r3, r0, lsl #2
    3868:	30200036 	eorcc	r0, r0, r6, lsr r0
    386c:	01000000 	mrseq	r0, (UNDEF: 0)
    3870:	0004029c 	muleq	r4, ip, r2
    3874:	00631600 	rsbeq	r1, r3, r0, lsl #12
    3878:	005b6301 	subseq	r6, fp, r1, lsl #6
    387c:	91020000 	mrsls	r0, (UNDEF: 2)
    3880:	31170077 	tstcc	r7, r7, ror r0
    3884:	01000017 	tsteq	r0, r7, lsl r0
    3888:	00005b57 	andeq	r5, r0, r7, asr fp
    388c:	0035ac00 	eorseq	sl, r5, r0, lsl #24
    3890:	00005420 	andeq	r5, r0, r0, lsr #8
    3894:	299c0100 	ldmibcs	ip, {r8}
    3898:	10000004 	andne	r0, r0, r4
    389c:	01007672 	tsteq	r0, r2, ror r6
    38a0:	00005b5c 	andeq	r5, r0, ip, asr fp
    38a4:	6f910200 	svcvs	0x00910200
    38a8:	17e61700 	strbne	r1, [r6, r0, lsl #14]!
    38ac:	4b010000 	blmi	438b4 <startup-0x1ffbc74c>
    38b0:	0000005b 	andeq	r0, r0, fp, asr r0
    38b4:	20003558 	andcs	r3, r0, r8, asr r5
    38b8:	00000054 	andeq	r0, r0, r4, asr r0
    38bc:	04509c01 	ldrbeq	r9, [r0], #-3073	; 0xfffff3ff
    38c0:	72100000 	andsvc	r0, r0, #0
    38c4:	50010076 	andpl	r0, r1, r6, ror r0
    38c8:	0000005b 	andeq	r0, r0, fp, asr r0
    38cc:	006f9102 	rsbeq	r9, pc, r2, lsl #2
    38d0:	0017ca0f 	andseq	ip, r7, pc, lsl #20
    38d4:	2e450100 	dvfcss	f0, f5, f0
    38d8:	2a200035 	bcs	8039b4 <startup-0x1f7fc64c>
    38dc:	01000000 	mrseq	r0, (UNDEF: 0)
    38e0:	0004749c 	muleq	r4, ip, r4
    38e4:	14df1300 	ldrbne	r1, [pc], #768	; 38ec <startup-0x1fffc714>
    38e8:	45010000 	strmi	r0, [r1, #-0]
    38ec:	0000005b 	andeq	r0, r0, fp, asr r0
    38f0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    38f4:	0017a60f 	andseq	sl, r7, pc, lsl #12
    38f8:	043f0100 	ldrteq	r0, [pc], #-256	; 3900 <startup-0x1fffc700>
    38fc:	2a200035 	bcs	8039d8 <startup-0x1f7fc628>
    3900:	01000000 	mrseq	r0, (UNDEF: 0)
    3904:	0004989c 	muleq	r4, ip, r8
    3908:	14071300 	strne	r1, [r7], #-768	; 0xfffffd00
    390c:	3f010000 	svccc	0x00010000
    3910:	0000005b 	andeq	r0, r0, fp, asr r0
    3914:	00779102 	rsbseq	r9, r7, r2, lsl #2
    3918:	0017f818 	andseq	pc, r7, r8, lsl r8	; <UNPREDICTABLE>
    391c:	b4370100 	ldrtlt	r0, [r7], #-256	; 0xffffff00
    3920:	50200034 	eorpl	r0, r0, r4, lsr r0
    3924:	01000000 	mrseq	r0, (UNDEF: 0)
    3928:	0004c69c 	muleq	r4, ip, r6
    392c:	00781600 	rsbseq	r1, r8, r0, lsl #12
    3930:	005b3701 	subseq	r3, fp, r1, lsl #14
    3934:	91020000 	mrsls	r0, (UNDEF: 2)
    3938:	0063106f 	rsbeq	r1, r3, pc, rrx
    393c:	005b3901 	subseq	r3, fp, r1, lsl #18
    3940:	91020000 	mrsls	r0, (UNDEF: 2)
    3944:	93190077 	tstls	r9, #119	; 0x77
    3948:	01000017 	tsteq	r0, r7, lsl r0
    394c:	0034702f 	eorseq	r7, r4, pc, lsr #32
    3950:	00004420 	andeq	r4, r0, r0, lsr #8
    3954:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    3958:	2f010078 	svccs	0x00010078
    395c:	0000005b 	andeq	r0, r0, fp, asr r0
    3960:	106f9102 	rsbne	r9, pc, r2, lsl #2
    3964:	31010063 	tstcc	r1, r3, rrx
    3968:	0000005b 	andeq	r0, r0, fp, asr r0
    396c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    3970:	00014000 	andeq	r4, r1, r0
    3974:	fc000400 	stc2	4, cr0, [r0], {-0}
    3978:	0400000d 	streq	r0, [r0], #-13
    397c:	00008f01 	andeq	r8, r0, r1, lsl #30
    3980:	18a90c00 	stmiane	r9!, {sl, fp}
    3984:	39900000 	ldmibcc	r0, {}	; <UNPREDICTABLE>
    3988:	00942000 	addseq	r2, r4, r0
    398c:	12fc0000 	rscsne	r0, ip, #0
    3990:	63020000 	movwvs	r0, #8192	; 0x2000
    3994:	14000006 	strne	r0, [r0], #-6
    3998:	006a0402 	rsbeq	r0, sl, r2, lsl #8
    399c:	a4030000 	strge	r0, [r3], #-0
    39a0:	02000018 	andeq	r0, r0, #24
    39a4:	00006a05 	andeq	r6, r0, r5, lsl #20
    39a8:	76030000 	strvc	r0, [r3], -r0
    39ac:	02000002 	andeq	r0, r0, #2
    39b0:	00006a06 	andeq	r6, r0, r6, lsl #20
    39b4:	d9030400 	stmdble	r3, {sl}
    39b8:	02000003 	andeq	r0, r0, #3
    39bc:	00007708 	andeq	r7, r0, r8, lsl #14
    39c0:	c9030800 	stmdbgt	r3, {fp}
    39c4:	02000003 	andeq	r0, r0, #3
    39c8:	00007709 	andeq	r7, r0, r9, lsl #14
    39cc:	7b030c00 	blvc	c69d4 <startup-0x1ff3962c>
    39d0:	02000002 	andeq	r0, r0, #2
    39d4:	0000940c 	andeq	r9, r0, ip, lsl #8
    39d8:	04001000 	streq	r1, [r0], #-0
    39dc:	00007004 	andeq	r7, r0, r4
    39e0:	08010500 	stmdaeq	r1, {r8, sl}
    39e4:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
    39e8:	69050406 	stmdbvs	r5, {r1, r2, sl}
    39ec:	0700746e 	streq	r7, [r0, -lr, ror #8]
    39f0:	0000008e 	andeq	r0, r0, lr, lsl #1
    39f4:	00008e08 	andeq	r8, r0, r8, lsl #28
    39f8:	00770800 	rsbseq	r0, r7, r0, lsl #16
    39fc:	04000000 	streq	r0, [r0], #-0
    3a00:	00002104 	andeq	r2, r0, r4, lsl #2
    3a04:	7e040400 	cfcpysvc	mvf0, mvf4
    3a08:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    3a0c:	00000664 	andeq	r0, r0, r4, ror #12
    3a10:	00210d02 	eoreq	r0, r1, r2, lsl #26
    3a14:	8b0a0000 	blhi	283a1c <startup-0x1fd7c5e4>
    3a18:	01000018 	tsteq	r0, r8, lsl r0
    3a1c:	0039ea0c 	eorseq	lr, r9, ip, lsl #20
    3a20:	00003a20 	andeq	r3, r0, r0, lsr #20
    3a24:	f39c0100 	vaddw.u16	q0, q6, d0
    3a28:	0b000000 	bleq	3a30 <startup-0x1fffc5d0>
    3a2c:	006a626f 	rsbeq	r6, sl, pc, ror #4
    3a30:	00f30c01 	rscseq	r0, r3, r1, lsl #24
    3a34:	91020000 	mrsls	r0, (UNDEF: 2)
    3a38:	18a40c74 	stmiane	r4!, {r2, r4, r5, r6, sl, fp}
    3a3c:	0c010000 	stceq	0, cr0, [r1], {-0}
    3a40:	0000006a 	andeq	r0, r0, sl, rrx
    3a44:	0c709102 	ldfeqp	f1, [r0], #-8
    3a48:	00000276 	andeq	r0, r0, r6, ror r2
    3a4c:	006a0c01 	rsbeq	r0, sl, r1, lsl #24
    3a50:	91020000 	mrsls	r0, (UNDEF: 2)
    3a54:	03c90c6c 	biceq	r0, r9, #108, 24	; 0x6c00
    3a58:	0c010000 	stceq	0, cr0, [r1], {-0}
    3a5c:	00000077 	andeq	r0, r0, r7, ror r0
    3a60:	00689102 	rsbeq	r9, r8, r2, lsl #2
    3a64:	009a0404 	addseq	r0, sl, r4, lsl #8
    3a68:	7b0d0000 	blvc	343a70 <startup-0x1fcbc590>
    3a6c:	01000002 	tsteq	r0, r2
    3a70:	00399004 	eorseq	r9, r9, r4
    3a74:	00005a20 	andeq	r5, r0, r0, lsr #20
    3a78:	0c9c0100 	ldfeqs	f0, [ip], {0}
    3a7c:	0000074d 	andeq	r0, r0, sp, asr #14
    3a80:	00f30401 	rscseq	r0, r3, r1, lsl #8
    3a84:	91020000 	mrsls	r0, (UNDEF: 2)
    3a88:	189a0c6c 	ldmne	sl, {r2, r3, r5, r6, sl, fp}
    3a8c:	04010000 	streq	r0, [r1], #-0
    3a90:	00000077 	andeq	r0, r0, r7, ror r0
    3a94:	0e689102 	lgneqe	f1, f2
    3a98:	0000184e 	andeq	r1, r0, lr, asr #16
    3a9c:	00770501 	rsbseq	r0, r7, r1, lsl #10
    3aa0:	91020000 	mrsls	r0, (UNDEF: 2)
    3aa4:	172a0e74 			; <UNDEFINED> instruction: 0x172a0e74
    3aa8:	06010000 	streq	r0, [r1], -r0
    3aac:	00000077 	andeq	r0, r0, r7, ror r0
    3ab0:	00709102 	rsbseq	r9, r0, r2, lsl #2
    3ab4:	0002e000 	andeq	lr, r2, r0
    3ab8:	c7000400 	strgt	r0, [r0, -r0, lsl #8]
    3abc:	0400000e 	streq	r0, [r0], #-14
    3ac0:	00008f01 	andeq	r8, r0, r1, lsl #30
    3ac4:	19560c00 	ldmdbne	r6, {sl, fp}^
    3ac8:	3a240000 	bcc	903ad0 <startup-0x1f6fc530>
    3acc:	00e82000 	rsceq	r2, r8, r0
    3ad0:	13760000 	cmnne	r6, #0
    3ad4:	0c020000 	stceq	0, cr0, [r2], {-0}
    3ad8:	004e0502 	subeq	r0, lr, r2, lsl #10
    3adc:	4b030000 	blmi	c3ae4 <startup-0x1ff3c51c>
    3ae0:	02000003 	andeq	r0, r0, #3
    3ae4:	00004e07 	andeq	r4, r0, r7, lsl #28
    3ae8:	e4030000 	str	r0, [r3], #-0
    3aec:	02000006 	andeq	r0, r0, #6
    3af0:	00004e08 	andeq	r4, r0, r8, lsl #28
    3af4:	df030400 	svcle	0x00030400
    3af8:	02000014 	andeq	r0, r0, #20
    3afc:	00005509 	andeq	r5, r0, r9, lsl #10
    3b00:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    3b04:	036f0704 	cmneq	pc, #4, 14	; 0x100000
    3b08:	04050000 	streq	r0, [r5], #-0
    3b0c:	0000005b 	andeq	r0, r0, fp, asr r0
    3b10:	ae080104 	adfgee	f0, f0, f4
    3b14:	06000004 	streq	r0, [r0], -r4
    3b18:	00001631 	andeq	r1, r0, r1, lsr r6
    3b1c:	00210a02 	eoreq	r0, r1, r2, lsl #20
    3b20:	24070000 	strcs	r0, [r7], #-0
    3b24:	0c000000 	stceq	0, cr0, [r0], {-0}
    3b28:	009e0603 	addseq	r0, lr, r3, lsl #12
    3b2c:	a4030000 	strge	r0, [r3], #-0
    3b30:	03000005 	movweq	r0, #5
    3b34:	00009e07 	andeq	r9, r0, r7, lsl #28
    3b38:	2b030000 	blcs	c3b40 <startup-0x1ff3c4c0>
    3b3c:	03000000 	movweq	r0, #0
    3b40:	00009e08 	andeq	r9, r0, r8, lsl #28
    3b44:	20030400 	andcs	r0, r3, r0, lsl #8
    3b48:	03000000 	movweq	r0, #0
    3b4c:	00009e09 	andeq	r9, r0, r9, lsl #28
    3b50:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    3b54:	00006204 	andeq	r6, r0, r4, lsl #4
    3b58:	0fff0600 	svceq	0x00ff0600
    3b5c:	0a030000 	beq	c3b64 <startup-0x1ff3c49c>
    3b60:	0000006d 	andeq	r0, r0, sp, rrx
    3b64:	0006a907 	andeq	sl, r6, r7, lsl #18
    3b68:	06042400 	streq	r2, [r4], -r0, lsl #8
    3b6c:	00000128 	andeq	r0, r0, r8, lsr #2
    3b70:	00043c03 	andeq	r3, r4, r3, lsl #24
    3b74:	28070400 	stmdacs	r7, {sl}
    3b78:	00000001 	andeq	r0, r0, r1
    3b7c:	0006b503 	andeq	fp, r6, r3, lsl #10
    3b80:	2e080400 	cfcpyscs	mvf0, mvf8
    3b84:	04000001 	streq	r0, [r0], #-1
    3b88:	00060f03 	andeq	r0, r6, r3, lsl #30
    3b8c:	2e090400 	cfcpyscs	mvf0, mvf9
    3b90:	08000001 	stmdaeq	r0, {r0}
    3b94:	00063b03 	andeq	r3, r6, r3, lsl #22
    3b98:	460c0400 	strmi	r0, [ip], -r0, lsl #8
    3b9c:	0c000001 	stceq	0, cr0, [r0], {1}
    3ba0:	00033203 	andeq	r3, r3, r3, lsl #4
    3ba4:	460d0400 	strmi	r0, [sp], -r0, lsl #8
    3ba8:	10000001 	andne	r0, r0, r1
    3bac:	00044e03 	andeq	r4, r4, r3, lsl #28
    3bb0:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
    3bb4:	14000001 	strne	r0, [r0], #-1
    3bb8:	00006003 	andeq	r6, r0, r3
    3bbc:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
    3bc0:	18000001 	stmdane	r0, {r0}
    3bc4:	0003bf03 	andeq	fp, r3, r3, lsl #30
    3bc8:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
    3bcc:	1c000001 	stcne	0, cr0, [r0], {1}
    3bd0:	0003cf03 	andeq	ip, r3, r3, lsl #30
    3bd4:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
    3bd8:	20000001 	andcs	r0, r0, r1
    3bdc:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    3be0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3be4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    3be8:	40090074 	andmi	r0, r9, r4, ror r0
    3bec:	0a000001 	beq	3bf8 <startup-0x1fffc408>
    3bf0:	00000140 	andeq	r0, r0, r0, asr #2
    3bf4:	af040500 	svcge	0x00040500
    3bf8:	05000000 	streq	r0, [r0, #-0]
    3bfc:	00013504 	andeq	r3, r1, r4, lsl #10
    3c00:	06aa0600 	strteq	r0, [sl], r0, lsl #12
    3c04:	15040000 	strne	r0, [r4, #-0]
    3c08:	000000af 	andeq	r0, r0, pc, lsr #1
    3c0c:	0001620b 	andeq	r6, r1, fp, lsl #4
    3c10:	00016200 	andeq	r6, r1, r0, lsl #4
    3c14:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    3c18:	00014c04 	andeq	r4, r1, r4, lsl #24
    3c1c:	05310d00 	ldreq	r0, [r1, #-3328]!	; 0xfffff300
    3c20:	1c040000 	stcne	0, cr0, [r4], {-0}
    3c24:	00000157 	andeq	r0, r0, r7, asr r1
    3c28:	00040a0d 	andeq	r0, r4, sp, lsl #20
    3c2c:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
    3c30:	0b000001 	bleq	3c3c <startup-0x1fffc3c4>
    3c34:	0000005b 	andeq	r0, r0, fp, asr r0
    3c38:	0000018f 	andeq	r0, r0, pc, lsl #3
    3c3c:	00018f0e 	andeq	r8, r1, lr, lsl #30
    3c40:	0003ff00 	andeq	pc, r3, r0, lsl #30
    3c44:	ec070404 	cfstrs	mvf0, [r7], {4}
    3c48:	0f000003 	svceq	0x00000003
    3c4c:	00001986 	andeq	r1, r0, r6, lsl #19
    3c50:	017e0305 	cmneq	lr, r5, lsl #6
    3c54:	03050000 	movweq	r0, #20480	; 0x5000
    3c58:	20008c48 	andcs	r8, r0, r8, asr #24
    3c5c:	0019260f 	andseq	r2, r9, pc, lsl #12
    3c60:	7e030600 	cfmadd32vc	mvax0, mvfx0, mvfx3, mvfx0
    3c64:	05000001 	streq	r0, [r0, #-1]
    3c68:	00904803 	addseq	r4, r0, r3, lsl #16
    3c6c:	19030f20 	stmdbne	r3, {r5, r8, r9, sl, fp}
    3c70:	03070000 	movweq	r0, #28672	; 0x7000
    3c74:	0000017e 	andeq	r0, r0, lr, ror r1
    3c78:	94480305 	strbls	r0, [r8], #-773	; 0xfffffcfb
    3c7c:	e8102000 	ldmda	r0, {sp}
    3c80:	01000018 	tsteq	r0, r8, lsl r0
    3c84:	00009e08 	andeq	r9, r0, r8, lsl #28
    3c88:	14030500 	strne	r0, [r3], #-1280	; 0xfffffb00
    3c8c:	10200064 	eorne	r0, r0, r4, rrx
    3c90:	000019c2 	andeq	r1, r0, r2, asr #19
    3c94:	009e0901 	addseq	r0, lr, r1, lsl #18
    3c98:	03050000 	movweq	r0, #20480	; 0x5000
    3c9c:	200063e0 	andcs	r6, r0, r0, ror #7
    3ca0:	00194910 	andseq	r4, r9, r0, lsl r9
    3ca4:	9e0a0100 	adflse	f0, f2, f0
    3ca8:	05000000 	streq	r0, [r0, #-0]
    3cac:	00642403 	rsbeq	r2, r4, r3, lsl #8
    3cb0:	19991020 	ldmibne	r9, {r5, ip}
    3cb4:	0c010000 	stceq	0, cr0, [r1], {-0}
    3cb8:	00000062 	andeq	r0, r0, r2, rrx
    3cbc:	63d40305 	bicsvs	r0, r4, #335544320	; 0x14000000
    3cc0:	38102000 	ldmdacc	r0, {sp}
    3cc4:	01000019 	tsteq	r0, r9, lsl r0
    3cc8:	0000620d 	andeq	r6, r0, sp, lsl #4
    3ccc:	c8030500 	stmdagt	r3, {r8, sl}
    3cd0:	10200063 	eorne	r0, r0, r3, rrx
    3cd4:	00001916 	andeq	r1, r0, r6, lsl r9
    3cd8:	00620e01 	rsbeq	r0, r2, r1, lsl #28
    3cdc:	03050000 	movweq	r0, #20480	; 0x5000
    3ce0:	200063bc 			; <UNDEFINED> instruction: 0x200063bc
    3ce4:	0019b710 	andseq	fp, r9, r0, lsl r7
    3ce8:	4c110100 	ldfmis	f0, [r1], {-0}
    3cec:	05000001 	streq	r0, [r0, #-1]
    3cf0:	0063e403 	rsbeq	lr, r3, r3, lsl #8
    3cf4:	18db1020 	ldmne	fp, {r5, ip}^
    3cf8:	12010000 	andne	r0, r1, #0
    3cfc:	000000a4 	andeq	r0, r0, r4, lsr #1
    3d00:	64180305 	ldrvs	r0, [r8], #-773	; 0xfffffcfb
    3d04:	a40b2000 	strge	r2, [fp], #-0
    3d08:	61000000 	mrsvs	r0, (UNDEF: 0)
    3d0c:	11000002 	tstne	r0, r2
    3d10:	0000018f 	andeq	r0, r0, pc, lsl #3
    3d14:	f5100000 			; <UNDEFINED> instruction: 0xf5100000
    3d18:	01000018 	tsteq	r0, r8, lsl r0
    3d1c:	00025113 	andeq	r5, r2, r3, lsl r1
    3d20:	08030500 	stmdaeq	r3, {r8, sl}
    3d24:	12200064 	eorne	r0, r0, #100	; 0x64
    3d28:	000019aa 	andeq	r1, r0, sl, lsr #19
    3d2c:	3a982201 	bcc	fe60c538 <firstTime.4040+0xde60207c>
    3d30:	00742000 	rsbseq	r2, r4, r0
    3d34:	9c010000 	stcls	0, cr0, [r1], {-0}
    3d38:	000002a7 	andeq	r0, r0, r7, lsr #5
    3d3c:	0019b713 	andseq	fp, r9, r3, lsl r7
    3d40:	62220100 	eorvs	r0, r2, #0, 2
    3d44:	02000001 	andeq	r0, r0, #1
    3d48:	d40f6c91 	strle	r6, [pc], #-3217	; 3d50 <startup-0x1fffc2b0>
    3d4c:	01000008 	tsteq	r0, r8
    3d50:	00012e23 	andeq	r2, r1, r3, lsr #28
    3d54:	48030500 	stmdami	r3, {r8, sl}
    3d58:	00200098 	mlaeq	r0, r8, r0, r0
    3d5c:	00048414 	andeq	r8, r4, r4, lsl r4
    3d60:	24140100 	ldrcs	r0, [r4], #-256	; 0xffffff00
    3d64:	7420003a 	strtvc	r0, [r0], #-58	; 0xffffffc6
    3d68:	01000000 	mrseq	r0, (UNDEF: 0)
    3d6c:	0d690f9c 	stcleq	15, cr0, [r9, #-624]!	; 0xfffffd90
    3d70:	16010000 	strne	r0, [r1], -r0
    3d74:	0000009e 	muleq	r0, lr, r0
    3d78:	0f749102 	svceq	0x00749102
    3d7c:	00000d73 	andeq	r0, r0, r3, ror sp
    3d80:	009e1901 	addseq	r1, lr, r1, lsl #18
    3d84:	91020000 	mrsls	r0, (UNDEF: 2)
    3d88:	0b690f70 	bleq	1a47b50 <startup-0x1e5b84b0>
    3d8c:	1c010000 	stcne	0, cr0, [r1], {-0}
    3d90:	0000009e 	muleq	r0, lr, r0
    3d94:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    3d98:	0002e000 	andeq	lr, r2, r0
    3d9c:	d0000400 	andle	r0, r0, r0, lsl #8
    3da0:	0400000f 	streq	r0, [r0], #-15
    3da4:	00008f01 	andeq	r8, r0, r1, lsl #30
    3da8:	1a0f0c00 	bne	3c6db0 <startup-0x1fc39250>
    3dac:	3b0c0000 	blcc	303db4 <startup-0x1fcfc24c>
    3db0:	00e82000 	rsceq	r2, r8, r0
    3db4:	14500000 	ldrbne	r0, [r0], #-0
    3db8:	0c020000 	stceq	0, cr0, [r2], {-0}
    3dbc:	004e0502 	subeq	r0, lr, r2, lsl #10
    3dc0:	4b030000 	blmi	c3dc8 <startup-0x1ff3c238>
    3dc4:	02000003 	andeq	r0, r0, #3
    3dc8:	00004e07 	andeq	r4, r0, r7, lsl #28
    3dcc:	e4030000 	str	r0, [r3], #-0
    3dd0:	02000006 	andeq	r0, r0, #6
    3dd4:	00004e08 	andeq	r4, r0, r8, lsl #28
    3dd8:	df030400 	svcle	0x00030400
    3ddc:	02000014 	andeq	r0, r0, #20
    3de0:	00005509 	andeq	r5, r0, r9, lsl #10
    3de4:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    3de8:	036f0704 	cmneq	pc, #4, 14	; 0x100000
    3dec:	04050000 	streq	r0, [r5], #-0
    3df0:	0000005b 	andeq	r0, r0, fp, asr r0
    3df4:	ae080104 	adfgee	f0, f0, f4
    3df8:	06000004 	streq	r0, [r0], -r4
    3dfc:	00001631 	andeq	r1, r0, r1, lsr r6
    3e00:	00210a02 	eoreq	r0, r1, r2, lsl #20
    3e04:	24070000 	strcs	r0, [r7], #-0
    3e08:	0c000000 	stceq	0, cr0, [r0], {-0}
    3e0c:	009e0603 	addseq	r0, lr, r3, lsl #12
    3e10:	a4030000 	strge	r0, [r3], #-0
    3e14:	03000005 	movweq	r0, #5
    3e18:	00009e07 	andeq	r9, r0, r7, lsl #28
    3e1c:	2b030000 	blcs	c3e24 <startup-0x1ff3c1dc>
    3e20:	03000000 	movweq	r0, #0
    3e24:	00009e08 	andeq	r9, r0, r8, lsl #28
    3e28:	20030400 	andcs	r0, r3, r0, lsl #8
    3e2c:	03000000 	movweq	r0, #0
    3e30:	00009e09 	andeq	r9, r0, r9, lsl #28
    3e34:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    3e38:	00006204 	andeq	r6, r0, r4, lsl #4
    3e3c:	0fff0600 	svceq	0x00ff0600
    3e40:	0a030000 	beq	c3e48 <startup-0x1ff3c1b8>
    3e44:	0000006d 	andeq	r0, r0, sp, rrx
    3e48:	0006a907 	andeq	sl, r6, r7, lsl #18
    3e4c:	06042400 	streq	r2, [r4], -r0, lsl #8
    3e50:	00000128 	andeq	r0, r0, r8, lsr #2
    3e54:	00043c03 	andeq	r3, r4, r3, lsl #24
    3e58:	28070400 	stmdacs	r7, {sl}
    3e5c:	00000001 	andeq	r0, r0, r1
    3e60:	0006b503 	andeq	fp, r6, r3, lsl #10
    3e64:	2e080400 	cfcpyscs	mvf0, mvf8
    3e68:	04000001 	streq	r0, [r0], #-1
    3e6c:	00060f03 	andeq	r0, r6, r3, lsl #30
    3e70:	2e090400 	cfcpyscs	mvf0, mvf9
    3e74:	08000001 	stmdaeq	r0, {r0}
    3e78:	00063b03 	andeq	r3, r6, r3, lsl #22
    3e7c:	460c0400 	strmi	r0, [ip], -r0, lsl #8
    3e80:	0c000001 	stceq	0, cr0, [r0], {1}
    3e84:	00033203 	andeq	r3, r3, r3, lsl #4
    3e88:	460d0400 	strmi	r0, [sp], -r0, lsl #8
    3e8c:	10000001 	andne	r0, r0, r1
    3e90:	00044e03 	andeq	r4, r4, r3, lsl #28
    3e94:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
    3e98:	14000001 	strne	r0, [r0], #-1
    3e9c:	00006003 	andeq	r6, r0, r3
    3ea0:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
    3ea4:	18000001 	stmdane	r0, {r0}
    3ea8:	0003bf03 	andeq	fp, r3, r3, lsl #30
    3eac:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
    3eb0:	1c000001 	stcne	0, cr0, [r0], {1}
    3eb4:	0003cf03 	andeq	ip, r3, r3, lsl #30
    3eb8:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
    3ebc:	20000001 	andcs	r0, r0, r1
    3ec0:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    3ec4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3ec8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    3ecc:	40090074 	andmi	r0, r9, r4, ror r0
    3ed0:	0a000001 	beq	3edc <startup-0x1fffc124>
    3ed4:	00000140 	andeq	r0, r0, r0, asr #2
    3ed8:	af040500 	svcge	0x00040500
    3edc:	05000000 	streq	r0, [r0, #-0]
    3ee0:	00013504 	andeq	r3, r1, r4, lsl #10
    3ee4:	06aa0600 	strteq	r0, [sl], r0, lsl #12
    3ee8:	15040000 	strne	r0, [r4, #-0]
    3eec:	000000af 	andeq	r0, r0, pc, lsr #1
    3ef0:	0001620b 	andeq	r6, r1, fp, lsl #4
    3ef4:	00016200 	andeq	r6, r1, r0, lsl #4
    3ef8:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    3efc:	00014c04 	andeq	r4, r1, r4, lsl #24
    3f00:	05310d00 	ldreq	r0, [r1, #-3328]!	; 0xfffff300
    3f04:	1c040000 	stcne	0, cr0, [r4], {-0}
    3f08:	00000157 	andeq	r0, r0, r7, asr r1
    3f0c:	00040a0d 	andeq	r0, r4, sp, lsl #20
    3f10:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
    3f14:	0b000001 	bleq	3f20 <startup-0x1fffc0e0>
    3f18:	0000005b 	andeq	r0, r0, fp, asr r0
    3f1c:	0000018f 	andeq	r0, r0, pc, lsl #3
    3f20:	00018f0e 	andeq	r8, r1, lr, lsl #30
    3f24:	0003ff00 	andeq	pc, r3, r0, lsl #30
    3f28:	ec070404 	cfstrs	mvf0, [r7], {4}
    3f2c:	0f000003 	svceq	0x00000003
    3f30:	000019dc 	ldrdeq	r1, [r0], -ip
    3f34:	017e0305 	cmneq	lr, r5, lsl #6
    3f38:	03050000 	movweq	r0, #20480	; 0x5000
    3f3c:	2000984c 	andcs	r9, r0, ip, asr #16
    3f40:	001a9f0f 	andseq	r9, sl, pc, lsl #30
    3f44:	7e030600 	cfmadd32vc	mvax0, mvfx0, mvfx3, mvfx0
    3f48:	05000001 	streq	r0, [r0, #-1]
    3f4c:	009c4c03 	addseq	r4, ip, r3, lsl #24
    3f50:	1a7c0f20 	bne	1f07bd8 <startup-0x1e0f8428>
    3f54:	03070000 	movweq	r0, #28672	; 0x7000
    3f58:	0000017e 	andeq	r0, r0, lr, ror r1
    3f5c:	a04c0305 	subge	r0, ip, r5, lsl #6
    3f60:	52102000 	andspl	r2, r0, #0
    3f64:	0100001a 	tsteq	r0, sl, lsl r0
    3f68:	00009e08 	andeq	r9, r0, r8, lsl #28
    3f6c:	90030500 	andls	r0, r3, r0, lsl #10
    3f70:	10200064 	eorne	r0, r0, r4, rrx
    3f74:	00001a02 	andeq	r1, r0, r2, lsl #20
    3f78:	009e0901 	addseq	r0, lr, r1, lsl #18
    3f7c:	03050000 	movweq	r0, #20480	; 0x5000
    3f80:	2000644c 	andcs	r6, r0, ip, asr #8
    3f84:	0019ce10 	andseq	ip, r9, r0, lsl lr
    3f88:	9e0a0100 	adflse	f0, f2, f0
    3f8c:	05000000 	streq	r0, [r0, #-0]
    3f90:	00647403 	rsbeq	r7, r4, r3, lsl #8
    3f94:	1a401020 	bne	100801c <startup-0x1eff7fe4>
    3f98:	0c010000 	stceq	0, cr0, [r1], {-0}
    3f9c:	00000062 	andeq	r0, r0, r2, rrx
    3fa0:	64780305 	ldrbtvs	r0, [r8], #-773	; 0xfffffcfb
    3fa4:	f0102000 			; <UNDEFINED> instruction: 0xf0102000
    3fa8:	01000019 	tsteq	r0, r9, lsl r0
    3fac:	0000620d 	andeq	r6, r0, sp, lsl #4
    3fb0:	84030500 	strhi	r0, [r3], #-1280	; 0xfffffb00
    3fb4:	10200064 	eorne	r0, r0, r4, rrx
    3fb8:	00001abe 			; <UNDEFINED> instruction: 0x00001abe
    3fbc:	00620e01 	rsbeq	r0, r2, r1, lsl #28
    3fc0:	03050000 	movweq	r0, #20480	; 0x5000
    3fc4:	20006468 	andcs	r6, r0, r8, ror #8
    3fc8:	001ab210 	andseq	fp, sl, r0, lsl r2
    3fcc:	4c110100 	ldfmis	f0, [r1], {-0}
    3fd0:	05000001 	streq	r0, [r0, #-1]
    3fd4:	00642803 	rsbeq	r2, r4, r3, lsl #16
    3fd8:	1a601020 	bne	1808060 <startup-0x1e7f7fa0>
    3fdc:	12010000 	andne	r0, r1, #0
    3fe0:	000000a4 	andeq	r0, r0, r4, lsr #1
    3fe4:	645c0305 	ldrbvs	r0, [ip], #-773	; 0xfffffcfb
    3fe8:	a40b2000 	strge	r2, [fp], #-0
    3fec:	61000000 	mrsvs	r0, (UNDEF: 0)
    3ff0:	11000002 	tstne	r0, r2
    3ff4:	0000018f 	andeq	r0, r0, pc, lsl #3
    3ff8:	90100000 	andsls	r0, r0, r0
    3ffc:	0100001a 	tsteq	r0, sl, lsl r0
    4000:	00025113 	andeq	r5, r2, r3, lsl r1
    4004:	50030500 	andpl	r0, r3, r0, lsl #10
    4008:	12200064 	eorne	r0, r0, #100	; 0x64
    400c:	00001a6e 	andeq	r1, r0, lr, ror #20
    4010:	3b802201 	blcc	fe00c81c <firstTime.4040+0xde002360>
    4014:	00742000 	rsbseq	r2, r4, r0
    4018:	9c010000 	stcls	0, cr0, [r1], {-0}
    401c:	000002a7 	andeq	r0, r0, r7, lsr #5
    4020:	001ab213 	andseq	fp, sl, r3, lsl r2
    4024:	62220100 	eorvs	r0, r2, #0, 2
    4028:	02000001 	andeq	r0, r0, #1
    402c:	d40f6c91 	strle	r6, [pc], #-3217	; 4034 <startup-0x1fffbfcc>
    4030:	01000008 	tsteq	r0, r8
    4034:	00012e23 	andeq	r2, r1, r3, lsr #28
    4038:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
    403c:	002000a4 	eoreq	r0, r0, r4, lsr #1
    4040:	00048414 	andeq	r8, r4, r4, lsl r4
    4044:	0c140100 	ldfeqs	f0, [r4], {-0}
    4048:	7420003b 	strtvc	r0, [r0], #-59	; 0xffffffc5
    404c:	01000000 	mrseq	r0, (UNDEF: 0)
    4050:	0d690f9c 	stcleq	15, cr0, [r9, #-624]!	; 0xfffffd90
    4054:	16010000 	strne	r0, [r1], -r0
    4058:	0000009e 	muleq	r0, lr, r0
    405c:	0f749102 	svceq	0x00749102
    4060:	00000d73 	andeq	r0, r0, r3, ror sp
    4064:	009e1901 	addseq	r1, lr, r1, lsl #18
    4068:	91020000 	mrsls	r0, (UNDEF: 2)
    406c:	0b690f70 	bleq	1a47e34 <startup-0x1e5b81cc>
    4070:	1c010000 	stcne	0, cr0, [r1], {-0}
    4074:	0000009e 	muleq	r0, lr, r0
    4078:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    407c:	0002df00 	andeq	sp, r2, r0, lsl #30
    4080:	d9000400 	stmdble	r0, {sl}
    4084:	04000010 	streq	r0, [r0], #-16
    4088:	00008f01 	andeq	r8, r0, r1, lsl #30
    408c:	1acf0c00 	bne	ff3c7094 <firstTime.4040+0xdf3bcbd8>
    4090:	3bf40000 	blcc	ffd04098 <firstTime.4040+0xdfcf9bdc>
    4094:	00e82000 	rsceq	r2, r8, r0
    4098:	152e0000 	strne	r0, [lr, #-0]!
    409c:	0c020000 	stceq	0, cr0, [r2], {-0}
    40a0:	004e0502 	subeq	r0, lr, r2, lsl #10
    40a4:	4b030000 	blmi	c40ac <startup-0x1ff3bf54>
    40a8:	02000003 	andeq	r0, r0, #3
    40ac:	00004e07 	andeq	r4, r0, r7, lsl #28
    40b0:	e4030000 	str	r0, [r3], #-0
    40b4:	02000006 	andeq	r0, r0, #6
    40b8:	00004e08 	andeq	r4, r0, r8, lsl #28
    40bc:	df030400 	svcle	0x00030400
    40c0:	02000014 	andeq	r0, r0, #20
    40c4:	00005509 	andeq	r5, r0, r9, lsl #10
    40c8:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    40cc:	036f0704 	cmneq	pc, #4, 14	; 0x100000
    40d0:	04050000 	streq	r0, [r5], #-0
    40d4:	0000005b 	andeq	r0, r0, fp, asr r0
    40d8:	ae080104 	adfgee	f0, f0, f4
    40dc:	06000004 	streq	r0, [r0], -r4
    40e0:	00001631 	andeq	r1, r0, r1, lsr r6
    40e4:	00210a02 	eoreq	r0, r1, r2, lsl #20
    40e8:	24070000 	strcs	r0, [r7], #-0
    40ec:	0c000000 	stceq	0, cr0, [r0], {-0}
    40f0:	009e0603 	addseq	r0, lr, r3, lsl #12
    40f4:	a4030000 	strge	r0, [r3], #-0
    40f8:	03000005 	movweq	r0, #5
    40fc:	00009e07 	andeq	r9, r0, r7, lsl #28
    4100:	2b030000 	blcs	c4108 <startup-0x1ff3bef8>
    4104:	03000000 	movweq	r0, #0
    4108:	00009e08 	andeq	r9, r0, r8, lsl #28
    410c:	20030400 	andcs	r0, r3, r0, lsl #8
    4110:	03000000 	movweq	r0, #0
    4114:	00009e09 	andeq	r9, r0, r9, lsl #28
    4118:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    411c:	00006204 	andeq	r6, r0, r4, lsl #4
    4120:	0fff0600 	svceq	0x00ff0600
    4124:	0a030000 	beq	c412c <startup-0x1ff3bed4>
    4128:	0000006d 	andeq	r0, r0, sp, rrx
    412c:	0006a907 	andeq	sl, r6, r7, lsl #18
    4130:	06042400 	streq	r2, [r4], -r0, lsl #8
    4134:	00000128 	andeq	r0, r0, r8, lsr #2
    4138:	00043c03 	andeq	r3, r4, r3, lsl #24
    413c:	28070400 	stmdacs	r7, {sl}
    4140:	00000001 	andeq	r0, r0, r1
    4144:	0006b503 	andeq	fp, r6, r3, lsl #10
    4148:	2e080400 	cfcpyscs	mvf0, mvf8
    414c:	04000001 	streq	r0, [r0], #-1
    4150:	00060f03 	andeq	r0, r6, r3, lsl #30
    4154:	2e090400 	cfcpyscs	mvf0, mvf9
    4158:	08000001 	stmdaeq	r0, {r0}
    415c:	00063b03 	andeq	r3, r6, r3, lsl #22
    4160:	460c0400 	strmi	r0, [ip], -r0, lsl #8
    4164:	0c000001 	stceq	0, cr0, [r0], {1}
    4168:	00033203 	andeq	r3, r3, r3, lsl #4
    416c:	460d0400 	strmi	r0, [sp], -r0, lsl #8
    4170:	10000001 	andne	r0, r0, r1
    4174:	00044e03 	andeq	r4, r4, r3, lsl #28
    4178:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
    417c:	14000001 	strne	r0, [r0], #-1
    4180:	00006003 	andeq	r6, r0, r3
    4184:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
    4188:	18000001 	stmdane	r0, {r0}
    418c:	0003bf03 	andeq	fp, r3, r3, lsl #30
    4190:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
    4194:	1c000001 	stcne	0, cr0, [r0], {1}
    4198:	0003cf03 	andeq	ip, r3, r3, lsl #30
    419c:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
    41a0:	20000001 	andcs	r0, r0, r1
    41a4:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    41a8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    41ac:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    41b0:	40090074 	andmi	r0, r9, r4, ror r0
    41b4:	0a000001 	beq	41c0 <startup-0x1fffbe40>
    41b8:	00000140 	andeq	r0, r0, r0, asr #2
    41bc:	af040500 	svcge	0x00040500
    41c0:	05000000 	streq	r0, [r0, #-0]
    41c4:	00013504 	andeq	r3, r1, r4, lsl #10
    41c8:	06aa0600 	strteq	r0, [sl], r0, lsl #12
    41cc:	15040000 	strne	r0, [r4, #-0]
    41d0:	000000af 	andeq	r0, r0, pc, lsr #1
    41d4:	0001620b 	andeq	r6, r1, fp, lsl #4
    41d8:	00016200 	andeq	r6, r1, r0, lsl #4
    41dc:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    41e0:	00014c04 	andeq	r4, r1, r4, lsl #24
    41e4:	05310d00 	ldreq	r0, [r1, #-3328]!	; 0xfffff300
    41e8:	1c040000 	stcne	0, cr0, [r4], {-0}
    41ec:	00000157 	andeq	r0, r0, r7, asr r1
    41f0:	00040a0d 	andeq	r0, r4, sp, lsl #20
    41f4:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
    41f8:	0b000001 	bleq	4204 <startup-0x1fffbdfc>
    41fc:	0000005b 	andeq	r0, r0, fp, asr r0
    4200:	0000018e 	andeq	r0, r0, lr, lsl #3
    4204:	00018e0e 	andeq	r8, r1, lr, lsl #28
    4208:	04002100 	streq	r2, [r0], #-256	; 0xffffff00
    420c:	03ec0704 	mvneq	r0, #4, 14	; 0x100000
    4210:	fe0f0000 	cdp2	0, 0, cr0, cr15, cr0, {0}
    4214:	0500001a 	streq	r0, [r0, #-26]	; 0xffffffe6
    4218:	00017e03 	andeq	r7, r1, r3, lsl #28
    421c:	50030500 	andpl	r0, r3, r0, lsl #10
    4220:	0f2000a4 	svceq	0x002000a4
    4224:	00001b48 	andeq	r1, r0, r8, asr #22
    4228:	017e0306 	cmneq	lr, r6, lsl #6
    422c:	03050000 	movweq	r0, #20480	; 0x5000
    4230:	2000a474 	andcs	sl, r0, r4, ror r4
    4234:	001b260f 	andseq	r2, fp, pc, lsl #12
    4238:	7e030700 	cdpvc	7, 0, cr0, cr3, cr0, {0}
    423c:	05000001 	streq	r0, [r0, #-1]
    4240:	00a49803 	adceq	r9, r4, r3, lsl #16
    4244:	1b8d1020 	blne	fe3482cc <firstTime.4040+0xde33de10>
    4248:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    424c:	0000009e 	muleq	r0, lr, r0
    4250:	64a00305 	strtvs	r0, [r0], #773	; 0x305
    4254:	69102000 	ldmdbvs	r0, {sp}
    4258:	0100001b 	tsteq	r0, fp, lsl r0
    425c:	00009e09 	andeq	r9, r0, r9, lsl #28
    4260:	e0030500 	and	r0, r3, r0, lsl #10
    4264:	10200064 	eorne	r0, r0, r4, rrx
    4268:	00001b10 	andeq	r1, r0, r0, lsl fp
    426c:	009e0a01 	addseq	r0, lr, r1, lsl #20
    4270:	03050000 	movweq	r0, #20480	; 0x5000
    4274:	200064fc 	strdcs	r6, [r0], -ip
    4278:	001b3810 	andseq	r3, fp, r0, lsl r8
    427c:	620c0100 	andvs	r0, ip, #0, 2
    4280:	05000000 	streq	r0, [r0, #-0]
    4284:	0064e403 	rsbeq	lr, r4, r3, lsl #8
    4288:	1b591020 	blne	1648310 <startup-0x1e9b7cf0>
    428c:	0d010000 	stceq	0, cr0, [r1, #-0]
    4290:	00000062 	andeq	r0, r0, r2, rrx
    4294:	64b00305 	ldrtvs	r0, [r0], #773	; 0x305
    4298:	99102000 	ldmdbls	r0, {sp}
    429c:	0100001b 	tsteq	r0, fp, lsl r0
    42a0:	0000620e 	andeq	r6, r0, lr, lsl #4
    42a4:	f0030500 			; <UNDEFINED> instruction: 0xf0030500
    42a8:	10200064 	eorne	r0, r0, r4, rrx
    42ac:	00001b1c 	andeq	r1, r0, ip, lsl fp
    42b0:	014c1101 	cmpeq	ip, r1, lsl #2
    42b4:	03050000 	movweq	r0, #20480	; 0x5000
    42b8:	200064bc 			; <UNDEFINED> instruction: 0x200064bc
    42bc:	001b8110 	andseq	r8, fp, r0, lsl r1
    42c0:	a4120100 	ldrge	r0, [r2], #-256	; 0xffffff00
    42c4:	05000000 	streq	r0, [r0, #-0]
    42c8:	0064a403 	rsbeq	sl, r4, r3, lsl #8
    42cc:	00a40b20 	adceq	r0, r4, r0, lsr #22
    42d0:	02600000 	rsbeq	r0, r0, #0
    42d4:	8e0e0000 	cdphi	0, 0, cr0, cr14, cr0, {0}
    42d8:	00000001 	andeq	r0, r0, r1
    42dc:	1b741000 	blne	1d082e4 <startup-0x1e2f7d1c>
    42e0:	13010000 	movwne	r0, #4096	; 0x1000
    42e4:	00000250 	andeq	r0, r0, r0, asr r2
    42e8:	64940305 	ldrvs	r0, [r4], #773	; 0x305
    42ec:	dd112000 	ldcle	0, cr2, [r1, #-0]
    42f0:	01000002 	tsteq	r0, r2
    42f4:	003c6822 	eorseq	r6, ip, r2, lsr #16
    42f8:	00007420 	andeq	r7, r0, r0, lsr #8
    42fc:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
    4300:	12000002 	andne	r0, r0, #2
    4304:	00001b1c 	andeq	r1, r0, ip, lsl fp
    4308:	01622201 	cmneq	r2, r1, lsl #4
    430c:	91020000 	mrsls	r0, (UNDEF: 2)
    4310:	08d40f6c 	ldmeq	r4, {r2, r3, r5, r6, r8, r9, sl, fp}^
    4314:	23010000 	movwcs	r0, #4096	; 0x1000
    4318:	0000012e 	andeq	r0, r0, lr, lsr #2
    431c:	a4bc0305 	ldrtge	r0, [ip], #773	; 0x305
    4320:	13002000 	movwne	r2, #0
    4324:	00000484 	andeq	r0, r0, r4, lsl #9
    4328:	3bf41401 	blcc	ffd09334 <firstTime.4040+0xdfcfee78>
    432c:	00742000 	rsbseq	r2, r4, r0
    4330:	9c010000 	stcls	0, cr0, [r1], {-0}
    4334:	000d690f 	andeq	r6, sp, pc, lsl #18
    4338:	9e160100 	muflss	f0, f6, f0
    433c:	02000000 	andeq	r0, r0, #0
    4340:	730f7491 	movwvc	r7, #62609	; 0xf491
    4344:	0100000d 	tsteq	r0, sp
    4348:	00009e19 	andeq	r9, r0, r9, lsl lr
    434c:	70910200 	addsvc	r0, r1, r0, lsl #4
    4350:	000b690f 	andeq	r6, fp, pc, lsl #18
    4354:	9e1c0100 	muflse	f0, f4, f0
    4358:	02000000 	andeq	r0, r0, #0
    435c:	00006c91 	muleq	r0, r1, ip

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	1117550e 	tstne	r7, lr, lsl #10
       c:	00171001 	andseq	r1, r7, r1
      10:	01130200 	tsteq	r3, r0, lsl #4
      14:	0b3a0b0b 	bleq	e82c48 <startup-0x1f17d3b8>
      18:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      1c:	0d030000 	stceq	0, cr0, [r3, #-0]
      20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
      24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      28:	000b3813 	andeq	r3, fp, r3, lsl r8
      2c:	00240400 	eoreq	r0, r4, r0, lsl #8
      30:	0b3e0b0b 	bleq	f82c64 <startup-0x1f07d39c>
      34:	00000e03 	andeq	r0, r0, r3, lsl #28
      38:	0b000f05 	bleq	3c54 <startup-0x1fffc3ac>
      3c:	0013490b 	andseq	r4, r3, fp, lsl #18
      40:	00160600 	andseq	r0, r6, r0, lsl #12
      44:	0b3a0e03 	bleq	e83858 <startup-0x1f17c7a8>
      48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      4c:	13070000 	movwne	r0, #28672	; 0x7000
      50:	0b0e0301 	bleq	380c5c <startup-0x1fc7f3a4>
      54:	3b0b3a0b 	blcc	2ce888 <startup-0x1fd31778>
      58:	0013010b 	andseq	r0, r3, fp, lsl #2
      5c:	00240800 	eoreq	r0, r4, r0, lsl #16
      60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
      64:	00000803 	andeq	r0, r0, r3, lsl #16
      68:	27011509 	strcs	r1, [r1, -r9, lsl #10]
      6c:	00130119 	andseq	r0, r3, r9, lsl r1
      70:	00050a00 	andeq	r0, r5, r0, lsl #20
      74:	00001349 	andeq	r1, r0, r9, asr #6
      78:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
      7c:	00130113 	andseq	r0, r3, r3, lsl r1
      80:	00210c00 	eoreq	r0, r1, r0, lsl #24
      84:	340d0000 	strcc	r0, [sp], #-0
      88:	3a0e0300 	bcc	380c90 <startup-0x1fc7f370>
      8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      90:	3c193f13 	ldccc	15, cr3, [r9], {19}
      94:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
      98:	13490021 	movtne	r0, #36897	; 0x9021
      9c:	0000052f 	andeq	r0, r0, pc, lsr #10
      a0:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
      a4:	000b2f13 	andeq	r2, fp, r3, lsl pc
      a8:	00341000 	eorseq	r1, r4, r0
      ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
      b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      b4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
      b8:	34110000 	ldrcc	r0, [r1], #-0
      bc:	3a0e0300 	bcc	380cc4 <startup-0x1fc7f33c>
      c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      c4:	00180213 	andseq	r0, r8, r3, lsl r2
      c8:	00341200 	eorseq	r1, r4, r0, lsl #4
      cc:	0b3a0803 	bleq	e820e0 <startup-0x1f17df20>
      d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      d4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
      d8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
      dc:	03193f01 	tsteq	r9, #1, 30
      e0:	3b0b3a08 	blcc	2ce908 <startup-0x1fd316f8>
      e4:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
      e8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
      ec:	97184006 	ldrls	r4, [r8, -r6]
      f0:	13011942 	movwne	r1, #6466	; 0x1942
      f4:	05140000 	ldreq	r0, [r4, #-0]
      f8:	3a0e0300 	bcc	380d00 <startup-0x1fc7f300>
      fc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     100:	00180213 	andseq	r0, r8, r3, lsl r2
     104:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
     108:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     10c:	0b3b0b3a 	bleq	ec2dfc <startup-0x1f13d204>
     110:	01111927 	tsteq	r1, r7, lsr #18
     114:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     118:	01194296 			; <UNDEFINED> instruction: 0x01194296
     11c:	16000013 			; <UNDEFINED> instruction: 0x16000013
     120:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     124:	0b3a0e03 	bleq	e83938 <startup-0x1f17c6c8>
     128:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     12c:	1301193c 	movwne	r1, #6460	; 0x193c
     130:	18170000 	ldmdane	r7, {}	; <UNPREDICTABLE>
     134:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     138:	08030034 	stmdaeq	r3, {r2, r4, r5}
     13c:	0b3b0b3a 	bleq	ec2e2c <startup-0x1f13d1d4>
     140:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     144:	34190000 	ldrcc	r0, [r9], #-0
     148:	3a0e0300 	bcc	380d50 <startup-0x1fc7f2b0>
     14c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     150:	00180213 	andseq	r0, r8, r3, lsl r2
     154:	010b1a00 	tsteq	fp, r0, lsl #20
     158:	06120111 			; <UNDEFINED> instruction: 0x06120111
     15c:	341b0000 	ldrcc	r0, [fp], #-0
     160:	3a080300 	bcc	200d68 <startup-0x1fdff298>
     164:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     168:	00180213 	andseq	r0, r8, r3, lsl r2
     16c:	002e1c00 	eoreq	r1, lr, r0, lsl #24
     170:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     174:	0b3b0b3a 	bleq	ec2e64 <startup-0x1f13d19c>
     178:	01111927 	tsteq	r1, r7, lsr #18
     17c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     180:	00194296 	mulseq	r9, r6, r2
     184:	002e1d00 	eoreq	r1, lr, r0, lsl #26
     188:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     18c:	0b3b0b3a 	bleq	ec2e7c <startup-0x1f13d184>
     190:	01111927 	tsteq	r1, r7, lsr #18
     194:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     198:	00194297 	mulseq	r9, r7, r2
     19c:	11010000 	mrsne	r0, (UNDEF: 1)
     1a0:	130e2501 	movwne	r2, #58625	; 0xe501
     1a4:	110e030b 	tstne	lr, fp, lsl #6
     1a8:	10061201 	andne	r1, r6, r1, lsl #4
     1ac:	02000017 	andeq	r0, r0, #23
     1b0:	0b0b0113 	bleq	2c0604 <startup-0x1fd3f9fc>
     1b4:	0b3b0b3a 	bleq	ec2ea4 <startup-0x1f13d15c>
     1b8:	00001301 	andeq	r1, r0, r1, lsl #6
     1bc:	03000d03 	movweq	r0, #3331	; 0xd03
     1c0:	3b0b3a0e 	blcc	2cea00 <startup-0x1fd31600>
     1c4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     1c8:	0400000b 	streq	r0, [r0], #-11
     1cc:	0b0b0024 	bleq	2c0264 <startup-0x1fd3fd9c>
     1d0:	0e030b3e 	vmoveq.16	d3[0], r0
     1d4:	0f050000 	svceq	0x00050000
     1d8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     1dc:	06000013 			; <UNDEFINED> instruction: 0x06000013
     1e0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     1e4:	0b3b0b3a 	bleq	ec2ed4 <startup-0x1f13d12c>
     1e8:	00001349 	andeq	r1, r0, r9, asr #6
     1ec:	03011307 	movweq	r1, #4871	; 0x1307
     1f0:	3a0b0b0e 	bcc	2c2e30 <startup-0x1fd3d1d0>
     1f4:	010b3b0b 	tsteq	fp, fp, lsl #22
     1f8:	08000013 	stmdaeq	r0, {r0, r1, r4}
     1fc:	0b0b0024 	bleq	2c0294 <startup-0x1fd3fd6c>
     200:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     204:	15090000 	strne	r0, [r9, #-0]
     208:	01192701 	tsteq	r9, r1, lsl #14
     20c:	0a000013 	beq	260 <startup-0x1ffffda0>
     210:	13490005 	movtne	r0, #36869	; 0x9005
     214:	010b0000 	mrseq	r0, (UNDEF: 11)
     218:	01134901 	tsteq	r3, r1, lsl #18
     21c:	0c000013 	stceq	0, cr0, [r0], {19}
     220:	00000021 	andeq	r0, r0, r1, lsr #32
     224:	0300340d 	movweq	r3, #1037	; 0x40d
     228:	3b0b3a0e 	blcc	2cea68 <startup-0x1fd31598>
     22c:	3f13490b 	svccc	0x0013490b
     230:	00193c19 	andseq	r3, r9, r9, lsl ip
     234:	00340e00 	eorseq	r0, r4, r0, lsl #28
     238:	0b3a1347 	bleq	e84f5c <startup-0x1f17b0a4>
     23c:	18020b3b 	stmdane	r2, {r0, r1, r3, r4, r5, r8, r9, fp}
     240:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
     244:	03193f01 	tsteq	r9, #1, 30
     248:	3b0b3a0e 	blcc	2cea88 <startup-0x1fd31578>
     24c:	1119270b 	tstne	r9, fp, lsl #14
     250:	40061201 	andmi	r1, r6, r1, lsl #4
     254:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     258:	00001301 	andeq	r1, r0, r1, lsl #6
     25c:	03000510 	movweq	r0, #1296	; 0x510
     260:	3b0b3a0e 	blcc	2ceaa0 <startup-0x1fd31560>
     264:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     268:	11000018 	tstne	r0, r8, lsl r0
     26c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     270:	0b3a0e03 	bleq	e83a84 <startup-0x1f17c57c>
     274:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     278:	06120111 			; <UNDEFINED> instruction: 0x06120111
     27c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     280:	00000019 	andeq	r0, r0, r9, lsl r0
     284:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     288:	030b130e 	movweq	r1, #45838	; 0xb30e
     28c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     290:	00171006 	andseq	r1, r7, r6
     294:	01130200 	tsteq	r3, r0, lsl #4
     298:	0b3a0b0b 	bleq	e82ecc <startup-0x1f17d134>
     29c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     2a0:	0d030000 	stceq	0, cr0, [r3, #-0]
     2a4:	3a0e0300 	bcc	380eac <startup-0x1fc7f154>
     2a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2ac:	000b3813 	andeq	r3, fp, r3, lsl r8
     2b0:	00240400 	eoreq	r0, r4, r0, lsl #8
     2b4:	0b3e0b0b 	bleq	f82ee8 <startup-0x1f07d118>
     2b8:	00000e03 	andeq	r0, r0, r3, lsl #28
     2bc:	0b000f05 	bleq	3ed8 <startup-0x1fffc128>
     2c0:	0013490b 	andseq	r4, r3, fp, lsl #18
     2c4:	00160600 	andseq	r0, r6, r0, lsl #12
     2c8:	0b3a0e03 	bleq	e83adc <startup-0x1f17c524>
     2cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     2d0:	13070000 	movwne	r0, #28672	; 0x7000
     2d4:	0b0e0301 	bleq	380ee0 <startup-0x1fc7f120>
     2d8:	3b0b3a0b 	blcc	2ceb0c <startup-0x1fd314f4>
     2dc:	0013010b 	andseq	r0, r3, fp, lsl #2
     2e0:	00240800 	eoreq	r0, r4, r0, lsl #16
     2e4:	0b3e0b0b 	bleq	f82f18 <startup-0x1f07d0e8>
     2e8:	00000803 	andeq	r0, r0, r3, lsl #16
     2ec:	27011509 	strcs	r1, [r1, -r9, lsl #10]
     2f0:	00130119 	andseq	r0, r3, r9, lsl r1
     2f4:	00050a00 	andeq	r0, r5, r0, lsl #20
     2f8:	00001349 	andeq	r1, r0, r9, asr #6
     2fc:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
     300:	00130113 	andseq	r0, r3, r3, lsl r1
     304:	00210c00 	eoreq	r0, r1, r0, lsl #24
     308:	340d0000 	strcc	r0, [sp], #-0
     30c:	3a0e0300 	bcc	380f14 <startup-0x1fc7f0ec>
     310:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     314:	3c193f13 	ldccc	15, cr3, [r9], {19}
     318:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
     31c:	13490021 	movtne	r0, #36897	; 0x9021
     320:	00000b2f 	andeq	r0, r0, pc, lsr #22
     324:	0300340f 	movweq	r3, #1039	; 0x40f
     328:	3b0b3a0e 	blcc	2ceb68 <startup-0x1fd31498>
     32c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     330:	10000018 	andne	r0, r0, r8, lsl r0
     334:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     338:	0b3b0b3a 	bleq	ec3028 <startup-0x1f13cfd8>
     33c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     340:	00001802 	andeq	r1, r0, r2, lsl #16
     344:	3f012e11 	svccc	0x00012e11
     348:	3a0e0319 	bcc	380fb4 <startup-0x1fc7f04c>
     34c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     350:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     354:	96184006 	ldrls	r4, [r8], -r6
     358:	13011942 	movwne	r1, #6466	; 0x1942
     35c:	05120000 	ldreq	r0, [r2, #-0]
     360:	3a0e0300 	bcc	380f68 <startup-0x1fc7f098>
     364:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     368:	00180213 	andseq	r0, r8, r3, lsl r2
     36c:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
     370:	0b3a0e03 	bleq	e83b84 <startup-0x1f17c47c>
     374:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     378:	06120111 			; <UNDEFINED> instruction: 0x06120111
     37c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     380:	00000019 	andeq	r0, r0, r9, lsl r0
     384:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     388:	030b130e 	movweq	r1, #45838	; 0xb30e
     38c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     390:	00171006 	andseq	r1, r7, r6
     394:	00240200 	eoreq	r0, r4, r0, lsl #4
     398:	0b3e0b0b 	bleq	f82fcc <startup-0x1f07d034>
     39c:	00000e03 	andeq	r0, r0, r3, lsl #28
     3a0:	0b011303 	bleq	44fb4 <startup-0x1ffbb04c>
     3a4:	3b0b3a0b 	blcc	2cebd8 <startup-0x1fd31428>
     3a8:	0013010b 	andseq	r0, r3, fp, lsl #2
     3ac:	000d0400 	andeq	r0, sp, r0, lsl #8
     3b0:	0b3a0e03 	bleq	e83bc4 <startup-0x1f17c43c>
     3b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     3b8:	00000b38 	andeq	r0, r0, r8, lsr fp
     3bc:	0b000f05 	bleq	3fd8 <startup-0x1fffc028>
     3c0:	0013490b 	andseq	r4, r3, fp, lsl #18
     3c4:	00160600 	andseq	r0, r6, r0, lsl #12
     3c8:	0b3a0e03 	bleq	e83bdc <startup-0x1f17c424>
     3cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     3d0:	13070000 	movwne	r0, #28672	; 0x7000
     3d4:	0b0e0301 	bleq	380fe0 <startup-0x1fc7f020>
     3d8:	3b0b3a0b 	blcc	2cec0c <startup-0x1fd313f4>
     3dc:	0013010b 	andseq	r0, r3, fp, lsl #2
     3e0:	00240800 	eoreq	r0, r4, r0, lsl #16
     3e4:	0b3e0b0b 	bleq	f83018 <startup-0x1f07cfe8>
     3e8:	00000803 	andeq	r0, r0, r3, lsl #16
     3ec:	27011509 	strcs	r1, [r1, -r9, lsl #10]
     3f0:	00130119 	andseq	r0, r3, r9, lsl r1
     3f4:	00050a00 	andeq	r0, r5, r0, lsl #20
     3f8:	00001349 	andeq	r1, r0, r9, asr #6
     3fc:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
     400:	00130113 	andseq	r0, r3, r3, lsl r1
     404:	00210c00 	eoreq	r0, r1, r0, lsl #24
     408:	340d0000 	strcc	r0, [sp], #-0
     40c:	3a0e0300 	bcc	381014 <startup-0x1fc7efec>
     410:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     414:	3c193f13 	ldccc	15, cr3, [r9], {19}
     418:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
     41c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     420:	0b3a0e03 	bleq	e83c34 <startup-0x1f17c3cc>
     424:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     428:	06120111 			; <UNDEFINED> instruction: 0x06120111
     42c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     430:	0f000019 	svceq	0x00000019
     434:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     438:	0b3b0b3a 	bleq	ec3128 <startup-0x1f13ced8>
     43c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     440:	34100000 	ldrcc	r0, [r0], #-0
     444:	3a0e0300 	bcc	38104c <startup-0x1fc7efb4>
     448:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     44c:	00180213 	andseq	r0, r8, r3, lsl r2
     450:	11010000 	mrsne	r0, (UNDEF: 1)
     454:	130e2501 	movwne	r2, #58625	; 0xe501
     458:	110e030b 	tstne	lr, fp, lsl #6
     45c:	10061201 	andne	r1, r6, r1, lsl #4
     460:	02000017 	andeq	r0, r0, #23
     464:	0b0b0113 	bleq	2c08b8 <startup-0x1fd3f748>
     468:	0b3b0b3a 	bleq	ec3158 <startup-0x1f13cea8>
     46c:	00001301 	andeq	r1, r0, r1, lsl #6
     470:	03000d03 	movweq	r0, #3331	; 0xd03
     474:	3b0b3a0e 	blcc	2cecb4 <startup-0x1fd3134c>
     478:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     47c:	0400000b 	streq	r0, [r0], #-11
     480:	0b0b0024 	bleq	2c0518 <startup-0x1fd3fae8>
     484:	0e030b3e 	vmoveq.16	d3[0], r0
     488:	0f050000 	svceq	0x00050000
     48c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     490:	06000013 			; <UNDEFINED> instruction: 0x06000013
     494:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     498:	0b3b0b3a 	bleq	ec3188 <startup-0x1f13ce78>
     49c:	00001349 	andeq	r1, r0, r9, asr #6
     4a0:	03011307 	movweq	r1, #4871	; 0x1307
     4a4:	3a0b0b0e 	bcc	2c30e4 <startup-0x1fd3cf1c>
     4a8:	010b3b0b 	tsteq	fp, fp, lsl #22
     4ac:	08000013 	stmdaeq	r0, {r0, r1, r4}
     4b0:	0b0b0024 	bleq	2c0548 <startup-0x1fd3fab8>
     4b4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     4b8:	15090000 	strne	r0, [r9, #-0]
     4bc:	01192701 	tsteq	r9, r1, lsl #14
     4c0:	0a000013 	beq	514 <startup-0x1ffffaec>
     4c4:	13490005 	movtne	r0, #36869	; 0x9005
     4c8:	010b0000 	mrseq	r0, (UNDEF: 11)
     4cc:	01134901 	tsteq	r3, r1, lsl #18
     4d0:	0c000013 	stceq	0, cr0, [r0], {19}
     4d4:	00000021 	andeq	r0, r0, r1, lsr #32
     4d8:	0300340d 	movweq	r3, #1037	; 0x40d
     4dc:	3b0b3a0e 	blcc	2ced1c <startup-0x1fd312e4>
     4e0:	3f13490b 	svccc	0x0013490b
     4e4:	00193c19 	andseq	r3, r9, r9, lsl ip
     4e8:	00210e00 	eoreq	r0, r1, r0, lsl #28
     4ec:	0b2f1349 	bleq	bc5218 <startup-0x1f43ade8>
     4f0:	340f0000 	strcc	r0, [pc], #-0	; 4f8 <startup-0x1ffffb08>
     4f4:	3a0e0300 	bcc	3810fc <startup-0x1fc7ef04>
     4f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4fc:	00180213 	andseq	r0, r8, r3, lsl r2
     500:	00341000 	eorseq	r1, r4, r0
     504:	0b3a0e03 	bleq	e83d18 <startup-0x1f17c2e8>
     508:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     50c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     510:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     514:	03193f01 	tsteq	r9, #1, 30
     518:	3b0b3a0e 	blcc	2ced58 <startup-0x1fd312a8>
     51c:	1119270b 	tstne	r9, fp, lsl #14
     520:	40061201 	andmi	r1, r6, r1, lsl #4
     524:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     528:	00001301 	andeq	r1, r0, r1, lsl #6
     52c:	03000512 	movweq	r0, #1298	; 0x512
     530:	3b0b3a0e 	blcc	2ced70 <startup-0x1fd31290>
     534:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     538:	13000018 	movwne	r0, #24
     53c:	0e03012e 	adfeqsp	f0, f3, #0.5
     540:	0b3b0b3a 	bleq	ec3230 <startup-0x1f13cdd0>
     544:	01111927 	tsteq	r1, r7, lsr #18
     548:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     54c:	00194296 	mulseq	r9, r6, r2
     550:	11010000 	mrsne	r0, (UNDEF: 1)
     554:	130e2501 	movwne	r2, #58625	; 0xe501
     558:	110e030b 	tstne	lr, fp, lsl #6
     55c:	10061201 	andne	r1, r6, r1, lsl #4
     560:	02000017 	andeq	r0, r0, #23
     564:	0b0b0113 	bleq	2c09b8 <startup-0x1fd3f648>
     568:	0b3b0b3a 	bleq	ec3258 <startup-0x1f13cda8>
     56c:	00001301 	andeq	r1, r0, r1, lsl #6
     570:	03000d03 	movweq	r0, #3331	; 0xd03
     574:	3b0b3a0e 	blcc	2cedb4 <startup-0x1fd3124c>
     578:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     57c:	0400000b 	streq	r0, [r0], #-11
     580:	0b0b0024 	bleq	2c0618 <startup-0x1fd3f9e8>
     584:	0e030b3e 	vmoveq.16	d3[0], r0
     588:	0f050000 	svceq	0x00050000
     58c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     590:	06000013 			; <UNDEFINED> instruction: 0x06000013
     594:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     598:	0b3b0b3a 	bleq	ec3288 <startup-0x1f13cd78>
     59c:	00001349 	andeq	r1, r0, r9, asr #6
     5a0:	03011307 	movweq	r1, #4871	; 0x1307
     5a4:	3a0b0b0e 	bcc	2c31e4 <startup-0x1fd3ce1c>
     5a8:	010b3b0b 	tsteq	fp, fp, lsl #22
     5ac:	08000013 	stmdaeq	r0, {r0, r1, r4}
     5b0:	0b0b0024 	bleq	2c0648 <startup-0x1fd3f9b8>
     5b4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     5b8:	15090000 	strne	r0, [r9, #-0]
     5bc:	01192701 	tsteq	r9, r1, lsl #14
     5c0:	0a000013 	beq	614 <startup-0x1ffff9ec>
     5c4:	13490005 	movtne	r0, #36869	; 0x9005
     5c8:	010b0000 	mrseq	r0, (UNDEF: 11)
     5cc:	01134901 	tsteq	r3, r1, lsl #18
     5d0:	0c000013 	stceq	0, cr0, [r0], {19}
     5d4:	00000021 	andeq	r0, r0, r1, lsr #32
     5d8:	0300340d 	movweq	r3, #1037	; 0x40d
     5dc:	3b0b3a0e 	blcc	2cee1c <startup-0x1fd311e4>
     5e0:	3f13490b 	svccc	0x0013490b
     5e4:	00193c19 	andseq	r3, r9, r9, lsl ip
     5e8:	00210e00 	eoreq	r0, r1, r0, lsl #28
     5ec:	0b2f1349 	bleq	bc5318 <startup-0x1f43ace8>
     5f0:	340f0000 	strcc	r0, [pc], #-0	; 5f8 <startup-0x1ffffa08>
     5f4:	3a0e0300 	bcc	3811fc <startup-0x1fc7ee04>
     5f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     5fc:	00180213 	andseq	r0, r8, r3, lsl r2
     600:	00341000 	eorseq	r1, r4, r0
     604:	0b3a0e03 	bleq	e83e18 <startup-0x1f17c1e8>
     608:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     60c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     610:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     614:	03193f01 	tsteq	r9, #1, 30
     618:	3b0b3a0e 	blcc	2cee58 <startup-0x1fd311a8>
     61c:	1119270b 	tstne	r9, fp, lsl #14
     620:	40061201 	andmi	r1, r6, r1, lsl #4
     624:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     628:	00001301 	andeq	r1, r0, r1, lsl #6
     62c:	03000512 	movweq	r0, #1298	; 0x512
     630:	3b0b3a0e 	blcc	2cee70 <startup-0x1fd31190>
     634:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     638:	13000018 	movwne	r0, #24
     63c:	0e03012e 	adfeqsp	f0, f3, #0.5
     640:	0b3b0b3a 	bleq	ec3330 <startup-0x1f13ccd0>
     644:	01111927 	tsteq	r1, r7, lsr #18
     648:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     64c:	00194296 	mulseq	r9, r6, r2
     650:	11010000 	mrsne	r0, (UNDEF: 1)
     654:	130e2501 	movwne	r2, #58625	; 0xe501
     658:	110e030b 	tstne	lr, fp, lsl #6
     65c:	10061201 	andne	r1, r6, r1, lsl #4
     660:	02000017 	andeq	r0, r0, #23
     664:	0b0b0113 	bleq	2c0ab8 <startup-0x1fd3f548>
     668:	0b3b0b3a 	bleq	ec3358 <startup-0x1f13cca8>
     66c:	00001301 	andeq	r1, r0, r1, lsl #6
     670:	03000d03 	movweq	r0, #3331	; 0xd03
     674:	3b0b3a0e 	blcc	2ceeb4 <startup-0x1fd3114c>
     678:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     67c:	0400000b 	streq	r0, [r0], #-11
     680:	0b0b0024 	bleq	2c0718 <startup-0x1fd3f8e8>
     684:	0e030b3e 	vmoveq.16	d3[0], r0
     688:	0f050000 	svceq	0x00050000
     68c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     690:	06000013 			; <UNDEFINED> instruction: 0x06000013
     694:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     698:	0b3b0b3a 	bleq	ec3388 <startup-0x1f13cc78>
     69c:	00001349 	andeq	r1, r0, r9, asr #6
     6a0:	03011307 	movweq	r1, #4871	; 0x1307
     6a4:	3a0b0b0e 	bcc	2c32e4 <startup-0x1fd3cd1c>
     6a8:	010b3b0b 	tsteq	fp, fp, lsl #22
     6ac:	08000013 	stmdaeq	r0, {r0, r1, r4}
     6b0:	0b0b0024 	bleq	2c0748 <startup-0x1fd3f8b8>
     6b4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     6b8:	15090000 	strne	r0, [r9, #-0]
     6bc:	01192701 	tsteq	r9, r1, lsl #14
     6c0:	0a000013 	beq	714 <startup-0x1ffff8ec>
     6c4:	13490005 	movtne	r0, #36869	; 0x9005
     6c8:	010b0000 	mrseq	r0, (UNDEF: 11)
     6cc:	01134901 	tsteq	r3, r1, lsl #18
     6d0:	0c000013 	stceq	0, cr0, [r0], {19}
     6d4:	00000021 	andeq	r0, r0, r1, lsr #32
     6d8:	0300340d 	movweq	r3, #1037	; 0x40d
     6dc:	3b0b3a0e 	blcc	2cef1c <startup-0x1fd310e4>
     6e0:	3f13490b 	svccc	0x0013490b
     6e4:	00193c19 	andseq	r3, r9, r9, lsl ip
     6e8:	00210e00 	eoreq	r0, r1, r0, lsl #28
     6ec:	0b2f1349 	bleq	bc5418 <startup-0x1f43abe8>
     6f0:	340f0000 	strcc	r0, [pc], #-0	; 6f8 <startup-0x1ffff908>
     6f4:	3a0e0300 	bcc	3812fc <startup-0x1fc7ed04>
     6f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6fc:	00180213 	andseq	r0, r8, r3, lsl r2
     700:	00341000 	eorseq	r1, r4, r0
     704:	0b3a0e03 	bleq	e83f18 <startup-0x1f17c0e8>
     708:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     70c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     710:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     714:	03193f01 	tsteq	r9, #1, 30
     718:	3b0b3a0e 	blcc	2cef58 <startup-0x1fd310a8>
     71c:	1119270b 	tstne	r9, fp, lsl #14
     720:	40061201 	andmi	r1, r6, r1, lsl #4
     724:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     728:	00001301 	andeq	r1, r0, r1, lsl #6
     72c:	03000512 	movweq	r0, #1298	; 0x512
     730:	3b0b3a0e 	blcc	2cef70 <startup-0x1fd31090>
     734:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     738:	13000018 	movwne	r0, #24
     73c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     740:	0b3a0e03 	bleq	e83f54 <startup-0x1f17c0ac>
     744:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     748:	06120111 			; <UNDEFINED> instruction: 0x06120111
     74c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     750:	00130119 	andseq	r0, r3, r9, lsl r1
     754:	00051400 	andeq	r1, r5, r0, lsl #8
     758:	0b3a0803 	bleq	e8276c <startup-0x1f17d894>
     75c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     760:	00001802 	andeq	r1, r0, r2, lsl #16
     764:	03012e15 	movweq	r2, #7701	; 0x1e15
     768:	3b0b3a0e 	blcc	2cefa8 <startup-0x1fd31058>
     76c:	1119270b 	tstne	r9, fp, lsl #14
     770:	40061201 	andmi	r1, r6, r1, lsl #4
     774:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     778:	01000000 	mrseq	r0, (UNDEF: 0)
     77c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     780:	0e030b13 	vmoveq.32	d3[0], r0
     784:	06120111 			; <UNDEFINED> instruction: 0x06120111
     788:	00001710 	andeq	r1, r0, r0, lsl r7
     78c:	0b011302 	bleq	4539c <startup-0x1ffbac64>
     790:	3b0b3a0b 	blcc	2cefc4 <startup-0x1fd3103c>
     794:	0013010b 	andseq	r0, r3, fp, lsl #2
     798:	000d0300 	andeq	r0, sp, r0, lsl #6
     79c:	0b3a0e03 	bleq	e83fb0 <startup-0x1f17c050>
     7a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     7a4:	00000b38 	andeq	r0, r0, r8, lsr fp
     7a8:	0b002404 	bleq	97c0 <startup-0x1fff6840>
     7ac:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     7b0:	0500000e 	streq	r0, [r0, #-14]
     7b4:	0b0b000f 	bleq	2c07f8 <startup-0x1fd3f808>
     7b8:	00001349 	andeq	r1, r0, r9, asr #6
     7bc:	03001606 	movweq	r1, #1542	; 0x606
     7c0:	3b0b3a0e 	blcc	2cf000 <startup-0x1fd31000>
     7c4:	0013490b 	andseq	r4, r3, fp, lsl #18
     7c8:	01130700 	tsteq	r3, r0, lsl #14
     7cc:	0b0b0e03 	bleq	2c3fe0 <startup-0x1fd3c020>
     7d0:	0b3b0b3a 	bleq	ec34c0 <startup-0x1f13cb40>
     7d4:	00001301 	andeq	r1, r0, r1, lsl #6
     7d8:	0b002408 	bleq	9800 <startup-0x1fff6800>
     7dc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     7e0:	09000008 	stmdbeq	r0, {r3}
     7e4:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     7e8:	00001301 	andeq	r1, r0, r1, lsl #6
     7ec:	4900050a 	stmdbmi	r0, {r1, r3, r8, sl}
     7f0:	0b000013 	bleq	844 <startup-0x1ffff7bc>
     7f4:	13490101 	movtne	r0, #37121	; 0x9101
     7f8:	00001301 	andeq	r1, r0, r1, lsl #6
     7fc:	0000210c 	andeq	r2, r0, ip, lsl #2
     800:	00340d00 	eorseq	r0, r4, r0, lsl #26
     804:	0b3a0e03 	bleq	e84018 <startup-0x1f17bfe8>
     808:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     80c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     810:	210e0000 	mrscs	r0, (UNDEF: 14)
     814:	2f134900 	svccs	0x00134900
     818:	0f00000b 	svceq	0x0000000b
     81c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     820:	0b3b0b3a 	bleq	ec3510 <startup-0x1f13caf0>
     824:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     828:	34100000 	ldrcc	r0, [r0], #-0
     82c:	3a0e0300 	bcc	381434 <startup-0x1fc7ebcc>
     830:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     834:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     838:	11000018 	tstne	r0, r8, lsl r0
     83c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     840:	0b3a0e03 	bleq	e84054 <startup-0x1f17bfac>
     844:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     848:	06120111 			; <UNDEFINED> instruction: 0x06120111
     84c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     850:	00130119 	andseq	r0, r3, r9, lsl r1
     854:	00051200 	andeq	r1, r5, r0, lsl #4
     858:	0b3a0e03 	bleq	e8406c <startup-0x1f17bf94>
     85c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     860:	00001802 	andeq	r1, r0, r2, lsl #16
     864:	03012e13 	movweq	r2, #7699	; 0x1e13
     868:	3b0b3a0e 	blcc	2cf0a8 <startup-0x1fd30f58>
     86c:	1119270b 	tstne	r9, fp, lsl #14
     870:	40061201 	andmi	r1, r6, r1, lsl #4
     874:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     878:	01000000 	mrseq	r0, (UNDEF: 0)
     87c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     880:	0e030b13 	vmoveq.32	d3[0], r0
     884:	06120111 			; <UNDEFINED> instruction: 0x06120111
     888:	00001710 	andeq	r1, r0, r0, lsl r7
     88c:	0b011302 	bleq	4549c <startup-0x1ffbab64>
     890:	3b0b3a0b 	blcc	2cf0c4 <startup-0x1fd30f3c>
     894:	0013010b 	andseq	r0, r3, fp, lsl #2
     898:	000d0300 	andeq	r0, sp, r0, lsl #6
     89c:	0b3a0e03 	bleq	e840b0 <startup-0x1f17bf50>
     8a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     8a4:	00000b38 	andeq	r0, r0, r8, lsr fp
     8a8:	0b002404 	bleq	98c0 <startup-0x1fff6740>
     8ac:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     8b0:	0500000e 	streq	r0, [r0, #-14]
     8b4:	0b0b000f 	bleq	2c08f8 <startup-0x1fd3f708>
     8b8:	00001349 	andeq	r1, r0, r9, asr #6
     8bc:	03001606 	movweq	r1, #1542	; 0x606
     8c0:	3b0b3a0e 	blcc	2cf100 <startup-0x1fd30f00>
     8c4:	0013490b 	andseq	r4, r3, fp, lsl #18
     8c8:	01130700 	tsteq	r3, r0, lsl #14
     8cc:	0b0b0e03 	bleq	2c40e0 <startup-0x1fd3bf20>
     8d0:	0b3b0b3a 	bleq	ec35c0 <startup-0x1f13ca40>
     8d4:	00001301 	andeq	r1, r0, r1, lsl #6
     8d8:	0b002408 	bleq	9900 <startup-0x1fff6700>
     8dc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     8e0:	09000008 	stmdbeq	r0, {r3}
     8e4:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     8e8:	00001301 	andeq	r1, r0, r1, lsl #6
     8ec:	4900050a 	stmdbmi	r0, {r1, r3, r8, sl}
     8f0:	0b000013 	bleq	944 <startup-0x1ffff6bc>
     8f4:	13490101 	movtne	r0, #37121	; 0x9101
     8f8:	00001301 	andeq	r1, r0, r1, lsl #6
     8fc:	0000210c 	andeq	r2, r0, ip, lsl #2
     900:	00340d00 	eorseq	r0, r4, r0, lsl #26
     904:	0b3a0e03 	bleq	e84118 <startup-0x1f17bee8>
     908:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     90c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     910:	210e0000 	mrscs	r0, (UNDEF: 14)
     914:	2f134900 	svccs	0x00134900
     918:	0f000005 	svceq	0x00000005
     91c:	13470034 	movtne	r0, #28724	; 0x7034
     920:	0b3b0b3a 	bleq	ec3610 <startup-0x1f13c9f0>
     924:	00001802 	andeq	r1, r0, r2, lsl #16
     928:	47003410 	smladmi	r0, r0, r4, r3
     92c:	020b3a13 	andeq	r3, fp, #77824	; 0x13000
     930:	11000018 	tstne	r0, r8, lsl r0
     934:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     938:	0b3a0e03 	bleq	e8414c <startup-0x1f17beb4>
     93c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     940:	06120111 			; <UNDEFINED> instruction: 0x06120111
     944:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     948:	00130119 	andseq	r0, r3, r9, lsl r1
     94c:	00051200 	andeq	r1, r5, r0, lsl #4
     950:	0b3a0e03 	bleq	e84164 <startup-0x1f17be9c>
     954:	1349053b 	movtne	r0, #38203	; 0x953b
     958:	00001802 	andeq	r1, r0, r2, lsl #16
     95c:	03003413 	movweq	r3, #1043	; 0x413
     960:	3b0b3a0e 	blcc	2cf1a0 <startup-0x1fd30e60>
     964:	02134905 	andseq	r4, r3, #81920	; 0x14000
     968:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
     96c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     970:	0b3a0e03 	bleq	e84184 <startup-0x1f17be7c>
     974:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     978:	06120111 			; <UNDEFINED> instruction: 0x06120111
     97c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     980:	00130119 	andseq	r0, r3, r9, lsl r1
     984:	00341500 	eorseq	r1, r4, r0, lsl #10
     988:	0b3a0803 	bleq	e8299c <startup-0x1f17d664>
     98c:	1349053b 	movtne	r0, #38203	; 0x953b
     990:	00001802 	andeq	r1, r0, r2, lsl #16
     994:	03003416 	movweq	r3, #1046	; 0x416
     998:	3b0b3a08 	blcc	2cf1c0 <startup-0x1fd30e40>
     99c:	00134905 	andseq	r4, r3, r5, lsl #18
     9a0:	00051700 	andeq	r1, r5, r0, lsl #14
     9a4:	0b3a0803 	bleq	e829b8 <startup-0x1f17d648>
     9a8:	1349053b 	movtne	r0, #38203	; 0x953b
     9ac:	00001802 	andeq	r1, r0, r2, lsl #16
     9b0:	11010b18 	tstne	r1, r8, lsl fp
     9b4:	00061201 	andeq	r1, r6, r1, lsl #4
     9b8:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
     9bc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     9c0:	0b3b0b3a 	bleq	ec36b0 <startup-0x1f13c950>
     9c4:	01111927 	tsteq	r1, r7, lsr #18
     9c8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     9cc:	01194297 			; <UNDEFINED> instruction: 0x01194297
     9d0:	1a000013 	bne	a24 <startup-0x1ffff5dc>
     9d4:	08030005 	stmdaeq	r3, {r0, r2}
     9d8:	0b3b0b3a 	bleq	ec36c8 <startup-0x1f13c938>
     9dc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     9e0:	051b0000 	ldreq	r0, [fp, #-0]
     9e4:	3a0e0300 	bcc	3815ec <startup-0x1fc7ea14>
     9e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     9ec:	00180213 	andseq	r0, r8, r3, lsl r2
     9f0:	00341c00 	eorseq	r1, r4, r0, lsl #24
     9f4:	0b3a0e03 	bleq	e84208 <startup-0x1f17bdf8>
     9f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     9fc:	00001802 	andeq	r1, r0, r2, lsl #16
     a00:	3f012e1d 	svccc	0x00012e1d
     a04:	3a0e0319 	bcc	381670 <startup-0x1fc7e990>
     a08:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     a0c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     a10:	96184006 	ldrls	r4, [r8], -r6
     a14:	13011942 	movwne	r1, #6466	; 0x1942
     a18:	341e0000 	ldrcc	r0, [lr], #-0
     a1c:	3a080300 	bcc	201624 <startup-0x1fdfe9dc>
     a20:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a24:	00180213 	andseq	r0, r8, r3, lsl r2
     a28:	002e1f00 	eoreq	r1, lr, r0, lsl #30
     a2c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     a30:	0b3b0b3a 	bleq	ec3720 <startup-0x1f13c8e0>
     a34:	01111927 	tsteq	r1, r7, lsr #18
     a38:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a3c:	00194296 	mulseq	r9, r6, r2
     a40:	012e2000 			; <UNDEFINED> instruction: 0x012e2000
     a44:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     a48:	0b3b0b3a 	bleq	ec3738 <startup-0x1f13c8c8>
     a4c:	13491927 	movtne	r1, #39207	; 0x9927
     a50:	06120111 			; <UNDEFINED> instruction: 0x06120111
     a54:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     a58:	00130119 	andseq	r0, r3, r9, lsl r1
     a5c:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
     a60:	0b3a0e03 	bleq	e84274 <startup-0x1f17bd8c>
     a64:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     a68:	01111349 	tsteq	r1, r9, asr #6
     a6c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a70:	01194296 			; <UNDEFINED> instruction: 0x01194296
     a74:	22000013 	andcs	r0, r0, #19
     a78:	0e03012e 	adfeqsp	f0, f3, #0.5
     a7c:	0b3b0b3a 	bleq	ec376c <startup-0x1f13c894>
     a80:	01111927 	tsteq	r1, r7, lsr #18
     a84:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a88:	01194297 			; <UNDEFINED> instruction: 0x01194297
     a8c:	23000013 	movwcs	r0, #19
     a90:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     a94:	0b3a0e03 	bleq	e842a8 <startup-0x1f17bd58>
     a98:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     a9c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     aa0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     aa4:	00000019 	andeq	r0, r0, r9, lsl r0
     aa8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     aac:	030b130e 	movweq	r1, #45838	; 0xb30e
     ab0:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     ab4:	00171006 	andseq	r1, r7, r6
     ab8:	01130200 	tsteq	r3, r0, lsl #4
     abc:	0b3a0b0b 	bleq	e836f0 <startup-0x1f17c910>
     ac0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     ac4:	0d030000 	stceq	0, cr0, [r3, #-0]
     ac8:	3a0e0300 	bcc	3816d0 <startup-0x1fc7e930>
     acc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ad0:	000b3813 	andeq	r3, fp, r3, lsl r8
     ad4:	00240400 	eoreq	r0, r4, r0, lsl #8
     ad8:	0b3e0b0b 	bleq	f8370c <startup-0x1f07c8f4>
     adc:	00000e03 	andeq	r0, r0, r3, lsl #28
     ae0:	0b000f05 	bleq	46fc <startup-0x1fffb904>
     ae4:	0013490b 	andseq	r4, r3, fp, lsl #18
     ae8:	00160600 	andseq	r0, r6, r0, lsl #12
     aec:	0b3a0e03 	bleq	e84300 <startup-0x1f17bd00>
     af0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     af4:	13070000 	movwne	r0, #28672	; 0x7000
     af8:	0b0e0301 	bleq	381704 <startup-0x1fc7e8fc>
     afc:	3b0b3a0b 	blcc	2cf330 <startup-0x1fd30cd0>
     b00:	0013010b 	andseq	r0, r3, fp, lsl #2
     b04:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
     b08:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     b0c:	0b3b0b3a 	bleq	ec37fc <startup-0x1f13c804>
     b10:	01111927 	tsteq	r1, r7, lsr #18
     b14:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b18:	01194297 			; <UNDEFINED> instruction: 0x01194297
     b1c:	09000013 	stmdbeq	r0, {r0, r1, r4}
     b20:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     b24:	0b3b0b3a 	bleq	ec3814 <startup-0x1f13c7ec>
     b28:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     b2c:	01000000 	mrseq	r0, (UNDEF: 0)
     b30:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     b34:	0e030b13 	vmoveq.32	d3[0], r0
     b38:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b3c:	00001710 	andeq	r1, r0, r0, lsl r7
     b40:	0b011302 	bleq	45750 <startup-0x1ffba8b0>
     b44:	3b0b3a0b 	blcc	2cf378 <startup-0x1fd30c88>
     b48:	0013010b 	andseq	r0, r3, fp, lsl #2
     b4c:	000d0300 	andeq	r0, sp, r0, lsl #6
     b50:	0b3a0e03 	bleq	e84364 <startup-0x1f17bc9c>
     b54:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     b58:	00000b38 	andeq	r0, r0, r8, lsr fp
     b5c:	0b002404 	bleq	9b74 <startup-0x1fff648c>
     b60:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     b64:	0500000e 	streq	r0, [r0, #-14]
     b68:	0b0b000f 	bleq	2c0bac <startup-0x1fd3f454>
     b6c:	00001349 	andeq	r1, r0, r9, asr #6
     b70:	03001606 	movweq	r1, #1542	; 0x606
     b74:	3b0b3a0e 	blcc	2cf3b4 <startup-0x1fd30c4c>
     b78:	0013490b 	andseq	r4, r3, fp, lsl #18
     b7c:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
     b80:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     b84:	0b3b0b3a 	bleq	ec3874 <startup-0x1f13c78c>
     b88:	01111927 	tsteq	r1, r7, lsr #18
     b8c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b90:	01194297 			; <UNDEFINED> instruction: 0x01194297
     b94:	08000013 	stmdaeq	r0, {r0, r1, r4}
     b98:	08030005 	stmdaeq	r3, {r0, r2}
     b9c:	0b3b0b3a 	bleq	ec388c <startup-0x1f13c774>
     ba0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     ba4:	05090000 	streq	r0, [r9, #-0]
     ba8:	3a0e0300 	bcc	3817b0 <startup-0x1fc7e850>
     bac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     bb0:	00180213 	andseq	r0, r8, r3, lsl r2
     bb4:	00240a00 	eoreq	r0, r4, r0, lsl #20
     bb8:	0b3e0b0b 	bleq	f837ec <startup-0x1f07c814>
     bbc:	00000803 	andeq	r0, r0, r3, lsl #16
     bc0:	01110100 	tsteq	r1, r0, lsl #2
     bc4:	0b130e25 	bleq	4c4460 <startup-0x1fb3bba0>
     bc8:	01110e03 	tsteq	r1, r3, lsl #28
     bcc:	17100612 			; <UNDEFINED> instruction: 0x17100612
     bd0:	13020000 	movwne	r0, #8192	; 0x2000
     bd4:	3a0b0b01 	bcc	2c37e0 <startup-0x1fd3c820>
     bd8:	010b3b0b 	tsteq	fp, fp, lsl #22
     bdc:	03000013 	movweq	r0, #19
     be0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     be4:	0b3b0b3a 	bleq	ec38d4 <startup-0x1f13c72c>
     be8:	0b381349 	bleq	e05914 <startup-0x1f1fa6ec>
     bec:	24040000 	strcs	r0, [r4], #-0
     bf0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     bf4:	000e030b 	andeq	r0, lr, fp, lsl #6
     bf8:	00160500 	andseq	r0, r6, r0, lsl #10
     bfc:	0b3a0e03 	bleq	e84410 <startup-0x1f17bbf0>
     c00:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     c04:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
     c08:	03193f01 	tsteq	r9, #1, 30
     c0c:	3b0b3a0e 	blcc	2cf44c <startup-0x1fd30bb4>
     c10:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     c14:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     c18:	96184006 	ldrls	r4, [r8], -r6
     c1c:	13011942 	movwne	r1, #6466	; 0x1942
     c20:	05070000 	streq	r0, [r7, #-0]
     c24:	3a080300 	bcc	20182c <startup-0x1fdfe7d4>
     c28:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c2c:	00180213 	andseq	r0, r8, r3, lsl r2
     c30:	00340800 	eorseq	r0, r4, r0, lsl #16
     c34:	0b3a0803 	bleq	e82c48 <startup-0x1f17d3b8>
     c38:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     c3c:	00001802 	andeq	r1, r0, r2, lsl #16
     c40:	0b002409 	bleq	9c6c <startup-0x1fff6394>
     c44:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     c48:	0a000008 	beq	c70 <startup-0x1ffff390>
     c4c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     c50:	0b3a0e03 	bleq	e84464 <startup-0x1f17bb9c>
     c54:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     c58:	01111349 	tsteq	r1, r9, asr #6
     c5c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     c60:	00194297 	mulseq	r9, r7, r2
     c64:	002e0b00 	eoreq	r0, lr, r0, lsl #22
     c68:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     c6c:	0b3b0b3a 	bleq	ec395c <startup-0x1f13c6a4>
     c70:	01111927 	tsteq	r1, r7, lsr #18
     c74:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     c78:	00194297 	mulseq	r9, r7, r2
     c7c:	11010000 	mrsne	r0, (UNDEF: 1)
     c80:	130e2501 	movwne	r2, #58625	; 0xe501
     c84:	110e030b 	tstne	lr, fp, lsl #6
     c88:	10061201 	andne	r1, r6, r1, lsl #4
     c8c:	02000017 	andeq	r0, r0, #23
     c90:	0b0b0113 	bleq	2c10e4 <startup-0x1fd3ef1c>
     c94:	0b3b0b3a 	bleq	ec3984 <startup-0x1f13c67c>
     c98:	00001301 	andeq	r1, r0, r1, lsl #6
     c9c:	03000d03 	movweq	r0, #3331	; 0xd03
     ca0:	3b0b3a0e 	blcc	2cf4e0 <startup-0x1fd30b20>
     ca4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     ca8:	0400000b 	streq	r0, [r0], #-11
     cac:	0b0b0024 	bleq	2c0d44 <startup-0x1fd3f2bc>
     cb0:	0e030b3e 	vmoveq.16	d3[0], r0
     cb4:	0f050000 	svceq	0x00050000
     cb8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     cbc:	06000013 			; <UNDEFINED> instruction: 0x06000013
     cc0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     cc4:	0b3b0b3a 	bleq	ec39b4 <startup-0x1f13c64c>
     cc8:	00001349 	andeq	r1, r0, r9, asr #6
     ccc:	03011307 	movweq	r1, #4871	; 0x1307
     cd0:	3a0b0b0e 	bcc	2c3910 <startup-0x1fd3c6f0>
     cd4:	010b3b0b 	tsteq	fp, fp, lsl #22
     cd8:	08000013 	stmdaeq	r0, {r0, r1, r4}
     cdc:	0b0b0024 	bleq	2c0d74 <startup-0x1fd3f28c>
     ce0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     ce4:	15090000 	strne	r0, [r9, #-0]
     ce8:	01192701 	tsteq	r9, r1, lsl #14
     cec:	0a000013 	beq	d40 <startup-0x1ffff2c0>
     cf0:	13490005 	movtne	r0, #36869	; 0x9005
     cf4:	010b0000 	mrseq	r0, (UNDEF: 11)
     cf8:	01134901 	tsteq	r3, r1, lsl #18
     cfc:	0c000013 	stceq	0, cr0, [r0], {19}
     d00:	00000021 	andeq	r0, r0, r1, lsr #32
     d04:	0300340d 	movweq	r3, #1037	; 0x40d
     d08:	3b0b3a0e 	blcc	2cf548 <startup-0x1fd30ab8>
     d0c:	3f13490b 	svccc	0x0013490b
     d10:	00193c19 	andseq	r3, r9, r9, lsl ip
     d14:	00210e00 	eoreq	r0, r1, r0, lsl #28
     d18:	052f1349 	streq	r1, [pc, #-841]!	; 9d7 <startup-0x1ffff629>
     d1c:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
     d20:	03193f01 	tsteq	r9, #1, 30
     d24:	3b0b3a0e 	blcc	2cf564 <startup-0x1fd30a9c>
     d28:	1119270b 	tstne	r9, fp, lsl #14
     d2c:	40061201 	andmi	r1, r6, r1, lsl #4
     d30:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     d34:	00001301 	andeq	r1, r0, r1, lsl #6
     d38:	03003410 	movweq	r3, #1040	; 0x410
     d3c:	3b0b3a08 	blcc	2cf564 <startup-0x1fd30a9c>
     d40:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     d44:	11000018 	tstne	r0, r8, lsl r0
     d48:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     d4c:	0b3b0b3a 	bleq	ec3a3c <startup-0x1f13c5c4>
     d50:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     d54:	21120000 	tstcs	r2, r0
     d58:	2f134900 	svccs	0x00134900
     d5c:	1300000b 	movwne	r0, #11
     d60:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     d64:	0b3b0b3a 	bleq	ec3a54 <startup-0x1f13c5ac>
     d68:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     d6c:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
     d70:	03193f00 	tsteq	r9, #0, 30
     d74:	3b0b3a0e 	blcc	2cf5b4 <startup-0x1fd30a4c>
     d78:	1119270b 	tstne	r9, fp, lsl #14
     d7c:	40061201 	andmi	r1, r6, r1, lsl #4
     d80:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     d84:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
     d88:	03193f00 	tsteq	r9, #0, 30
     d8c:	3b0b3a0e 	blcc	2cf5cc <startup-0x1fd30a34>
     d90:	1119270b 	tstne	r9, fp, lsl #14
     d94:	40061201 	andmi	r1, r6, r1, lsl #4
     d98:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     d9c:	05160000 	ldreq	r0, [r6, #-0]
     da0:	3a080300 	bcc	2019a8 <startup-0x1fdfe658>
     da4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     da8:	00180213 	andseq	r0, r8, r3, lsl r2
     dac:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
     db0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     db4:	0b3b0b3a 	bleq	ec3aa4 <startup-0x1f13c55c>
     db8:	13491927 	movtne	r1, #39207	; 0x9927
     dbc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     dc0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     dc4:	00130119 	andseq	r0, r3, r9, lsl r1
     dc8:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
     dcc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     dd0:	0b3b0b3a 	bleq	ec3ac0 <startup-0x1f13c540>
     dd4:	01111927 	tsteq	r1, r7, lsr #18
     dd8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     ddc:	01194297 			; <UNDEFINED> instruction: 0x01194297
     de0:	19000013 	stmdbne	r0, {r0, r1, r4}
     de4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     de8:	0b3a0e03 	bleq	e845fc <startup-0x1f17ba04>
     dec:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     df0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     df4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     df8:	00000019 	andeq	r0, r0, r9, lsl r0
     dfc:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     e00:	030b130e 	movweq	r1, #45838	; 0xb30e
     e04:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     e08:	00171006 	andseq	r1, r7, r6
     e0c:	01130200 	tsteq	r3, r0, lsl #4
     e10:	0b0b0e03 	bleq	2c4624 <startup-0x1fd3b9dc>
     e14:	0b3b0b3a 	bleq	ec3b04 <startup-0x1f13c4fc>
     e18:	00001301 	andeq	r1, r0, r1, lsl #6
     e1c:	03000d03 	movweq	r0, #3331	; 0xd03
     e20:	3b0b3a0e 	blcc	2cf660 <startup-0x1fd309a0>
     e24:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     e28:	0400000b 	streq	r0, [r0], #-11
     e2c:	0b0b000f 	bleq	2c0e70 <startup-0x1fd3f190>
     e30:	00001349 	andeq	r1, r0, r9, asr #6
     e34:	0b002405 	bleq	9e50 <startup-0x1fff61b0>
     e38:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     e3c:	0600000e 	streq	r0, [r0], -lr
     e40:	0b0b0024 	bleq	2c0ed8 <startup-0x1fd3f128>
     e44:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     e48:	15070000 	strne	r0, [r7, #-0]
     e4c:	01192701 	tsteq	r9, r1, lsl #14
     e50:	08000013 	stmdaeq	r0, {r0, r1, r4}
     e54:	13490005 	movtne	r0, #36869	; 0x9005
     e58:	16090000 	strne	r0, [r9], -r0
     e5c:	3a0e0300 	bcc	381a64 <startup-0x1fc7e59c>
     e60:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e64:	0a000013 	beq	eb8 <startup-0x1ffff148>
     e68:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     e6c:	0b3a0e03 	bleq	e84680 <startup-0x1f17b980>
     e70:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     e74:	06120111 			; <UNDEFINED> instruction: 0x06120111
     e78:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     e7c:	00130119 	andseq	r0, r3, r9, lsl r1
     e80:	00050b00 	andeq	r0, r5, r0, lsl #22
     e84:	0b3a0803 	bleq	e82e98 <startup-0x1f17d168>
     e88:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e8c:	00001802 	andeq	r1, r0, r2, lsl #16
     e90:	0300050c 	movweq	r0, #1292	; 0x50c
     e94:	3b0b3a0e 	blcc	2cf6d4 <startup-0x1fd3092c>
     e98:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     e9c:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
     ea0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     ea4:	0b3a0e03 	bleq	e846b8 <startup-0x1f17b948>
     ea8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     eac:	06120111 			; <UNDEFINED> instruction: 0x06120111
     eb0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     eb4:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
     eb8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     ebc:	0b3b0b3a 	bleq	ec3bac <startup-0x1f13c454>
     ec0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     ec4:	01000000 	mrseq	r0, (UNDEF: 0)
     ec8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     ecc:	0e030b13 	vmoveq.32	d3[0], r0
     ed0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     ed4:	00001710 	andeq	r1, r0, r0, lsl r7
     ed8:	0b011302 	bleq	45ae8 <startup-0x1ffba518>
     edc:	3b0b3a0b 	blcc	2cf710 <startup-0x1fd308f0>
     ee0:	0013010b 	andseq	r0, r3, fp, lsl #2
     ee4:	000d0300 	andeq	r0, sp, r0, lsl #6
     ee8:	0b3a0e03 	bleq	e846fc <startup-0x1f17b904>
     eec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ef0:	00000b38 	andeq	r0, r0, r8, lsr fp
     ef4:	0b002404 	bleq	9f0c <startup-0x1fff60f4>
     ef8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     efc:	0500000e 	streq	r0, [r0, #-14]
     f00:	0b0b000f 	bleq	2c0f44 <startup-0x1fd3f0bc>
     f04:	00001349 	andeq	r1, r0, r9, asr #6
     f08:	03001606 	movweq	r1, #1542	; 0x606
     f0c:	3b0b3a0e 	blcc	2cf74c <startup-0x1fd308b4>
     f10:	0013490b 	andseq	r4, r3, fp, lsl #18
     f14:	01130700 	tsteq	r3, r0, lsl #14
     f18:	0b0b0e03 	bleq	2c472c <startup-0x1fd3b8d4>
     f1c:	0b3b0b3a 	bleq	ec3c0c <startup-0x1f13c3f4>
     f20:	00001301 	andeq	r1, r0, r1, lsl #6
     f24:	0b002408 	bleq	9f4c <startup-0x1fff60b4>
     f28:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     f2c:	09000008 	stmdbeq	r0, {r3}
     f30:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     f34:	00001301 	andeq	r1, r0, r1, lsl #6
     f38:	4900050a 	stmdbmi	r0, {r1, r3, r8, sl}
     f3c:	0b000013 	bleq	f90 <startup-0x1ffff070>
     f40:	13490101 	movtne	r0, #37121	; 0x9101
     f44:	00001301 	andeq	r1, r0, r1, lsl #6
     f48:	0000210c 	andeq	r2, r0, ip, lsl #2
     f4c:	00340d00 	eorseq	r0, r4, r0, lsl #26
     f50:	0b3a0e03 	bleq	e84764 <startup-0x1f17b89c>
     f54:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f58:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     f5c:	210e0000 	mrscs	r0, (UNDEF: 14)
     f60:	2f134900 	svccs	0x00134900
     f64:	0f000005 	svceq	0x00000005
     f68:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     f6c:	0b3b0b3a 	bleq	ec3c5c <startup-0x1f13c3a4>
     f70:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     f74:	34100000 	ldrcc	r0, [r0], #-0
     f78:	3a0e0300 	bcc	381b80 <startup-0x1fc7e480>
     f7c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f80:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     f84:	11000018 	tstne	r0, r8, lsl r0
     f88:	13490021 	movtne	r0, #36897	; 0x9021
     f8c:	00000b2f 	andeq	r0, r0, pc, lsr #22
     f90:	3f012e12 	svccc	0x00012e12
     f94:	3a0e0319 	bcc	381c00 <startup-0x1fc7e400>
     f98:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     f9c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     fa0:	96184006 	ldrls	r4, [r8], -r6
     fa4:	13011942 	movwne	r1, #6466	; 0x1942
     fa8:	05130000 	ldreq	r0, [r3, #-0]
     fac:	3a0e0300 	bcc	381bb4 <startup-0x1fc7e44c>
     fb0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fb4:	00180213 	andseq	r0, r8, r3, lsl r2
     fb8:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
     fbc:	0b3a0e03 	bleq	e847d0 <startup-0x1f17b830>
     fc0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     fc4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     fc8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     fcc:	00000019 	andeq	r0, r0, r9, lsl r0
     fd0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     fd4:	030b130e 	movweq	r1, #45838	; 0xb30e
     fd8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     fdc:	00171006 	andseq	r1, r7, r6
     fe0:	01130200 	tsteq	r3, r0, lsl #4
     fe4:	0b3a0b0b 	bleq	e83c18 <startup-0x1f17c3e8>
     fe8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     fec:	0d030000 	stceq	0, cr0, [r3, #-0]
     ff0:	3a0e0300 	bcc	381bf8 <startup-0x1fc7e408>
     ff4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ff8:	000b3813 	andeq	r3, fp, r3, lsl r8
     ffc:	00240400 	eoreq	r0, r4, r0, lsl #8
    1000:	0b3e0b0b 	bleq	f83c34 <startup-0x1f07c3cc>
    1004:	00000e03 	andeq	r0, r0, r3, lsl #28
    1008:	0b000f05 	bleq	4c24 <startup-0x1fffb3dc>
    100c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1010:	00160600 	andseq	r0, r6, r0, lsl #12
    1014:	0b3a0e03 	bleq	e84828 <startup-0x1f17b7d8>
    1018:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    101c:	13070000 	movwne	r0, #28672	; 0x7000
    1020:	0b0e0301 	bleq	381c2c <startup-0x1fc7e3d4>
    1024:	3b0b3a0b 	blcc	2cf858 <startup-0x1fd307a8>
    1028:	0013010b 	andseq	r0, r3, fp, lsl #2
    102c:	00240800 	eoreq	r0, r4, r0, lsl #16
    1030:	0b3e0b0b 	bleq	f83c64 <startup-0x1f07c39c>
    1034:	00000803 	andeq	r0, r0, r3, lsl #16
    1038:	27011509 	strcs	r1, [r1, -r9, lsl #10]
    103c:	00130119 	andseq	r0, r3, r9, lsl r1
    1040:	00050a00 	andeq	r0, r5, r0, lsl #20
    1044:	00001349 	andeq	r1, r0, r9, asr #6
    1048:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
    104c:	00130113 	andseq	r0, r3, r3, lsl r1
    1050:	00210c00 	eoreq	r0, r1, r0, lsl #24
    1054:	340d0000 	strcc	r0, [sp], #-0
    1058:	3a0e0300 	bcc	381c60 <startup-0x1fc7e3a0>
    105c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1060:	3c193f13 	ldccc	15, cr3, [r9], {19}
    1064:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
    1068:	13490021 	movtne	r0, #36897	; 0x9021
    106c:	0000052f 	andeq	r0, r0, pc, lsr #10
    1070:	0300340f 	movweq	r3, #1039	; 0x40f
    1074:	3b0b3a0e 	blcc	2cf8b4 <startup-0x1fd3074c>
    1078:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    107c:	10000018 	andne	r0, r0, r8, lsl r0
    1080:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1084:	0b3b0b3a 	bleq	ec3d74 <startup-0x1f13c28c>
    1088:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    108c:	00001802 	andeq	r1, r0, r2, lsl #16
    1090:	49002111 	stmdbmi	r0, {r0, r4, r8, sp}
    1094:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1098:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
    109c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    10a0:	0b3b0b3a 	bleq	ec3d90 <startup-0x1f13c270>
    10a4:	01111927 	tsteq	r1, r7, lsr #18
    10a8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    10ac:	01194296 			; <UNDEFINED> instruction: 0x01194296
    10b0:	13000013 	movwne	r0, #19
    10b4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    10b8:	0b3b0b3a 	bleq	ec3da8 <startup-0x1f13c258>
    10bc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    10c0:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    10c4:	3a0e0301 	bcc	381cd0 <startup-0x1fc7e330>
    10c8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    10cc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    10d0:	96184006 	ldrls	r4, [r8], -r6
    10d4:	00001942 	andeq	r1, r0, r2, asr #18
    10d8:	01110100 	tsteq	r1, r0, lsl #2
    10dc:	0b130e25 	bleq	4c4978 <startup-0x1fb3b688>
    10e0:	01110e03 	tsteq	r1, r3, lsl #28
    10e4:	17100612 			; <UNDEFINED> instruction: 0x17100612
    10e8:	13020000 	movwne	r0, #8192	; 0x2000
    10ec:	3a0b0b01 	bcc	2c3cf8 <startup-0x1fd3c308>
    10f0:	010b3b0b 	tsteq	fp, fp, lsl #22
    10f4:	03000013 	movweq	r0, #19
    10f8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    10fc:	0b3b0b3a 	bleq	ec3dec <startup-0x1f13c214>
    1100:	0b381349 	bleq	e05e2c <startup-0x1f1fa1d4>
    1104:	24040000 	strcs	r0, [r4], #-0
    1108:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    110c:	000e030b 	andeq	r0, lr, fp, lsl #6
    1110:	000f0500 	andeq	r0, pc, r0, lsl #10
    1114:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1118:	16060000 	strne	r0, [r6], -r0
    111c:	3a0e0300 	bcc	381d24 <startup-0x1fc7e2dc>
    1120:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1124:	07000013 	smladeq	r0, r3, r0, r0
    1128:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    112c:	0b3a0b0b 	bleq	e83d60 <startup-0x1f17c2a0>
    1130:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1134:	24080000 	strcs	r0, [r8], #-0
    1138:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    113c:	0008030b 	andeq	r0, r8, fp, lsl #6
    1140:	01150900 	tsteq	r5, r0, lsl #18
    1144:	13011927 	movwne	r1, #6439	; 0x1927
    1148:	050a0000 	streq	r0, [sl, #-0]
    114c:	00134900 	andseq	r4, r3, r0, lsl #18
    1150:	01010b00 	tsteq	r1, r0, lsl #22
    1154:	13011349 	movwne	r1, #4937	; 0x1349
    1158:	210c0000 	mrscs	r0, (UNDEF: 12)
    115c:	0d000000 	stceq	0, cr0, [r0, #-0]
    1160:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1164:	0b3b0b3a 	bleq	ec3e54 <startup-0x1f13c1ac>
    1168:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    116c:	0000193c 	andeq	r1, r0, ip, lsr r9
    1170:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
    1174:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1178:	00340f00 	eorseq	r0, r4, r0, lsl #30
    117c:	0b3a0e03 	bleq	e84990 <startup-0x1f17b670>
    1180:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1184:	00001802 	andeq	r1, r0, r2, lsl #16
    1188:	03003410 	movweq	r3, #1040	; 0x410
    118c:	3b0b3a0e 	blcc	2cf9cc <startup-0x1fd30634>
    1190:	3f13490b 	svccc	0x0013490b
    1194:	00180219 	andseq	r0, r8, r9, lsl r2
    1198:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
    119c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    11a0:	0b3b0b3a 	bleq	ec3e90 <startup-0x1f13c170>
    11a4:	01111927 	tsteq	r1, r7, lsr #18
    11a8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    11ac:	01194296 			; <UNDEFINED> instruction: 0x01194296
    11b0:	12000013 	andne	r0, r0, #19
    11b4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    11b8:	0b3b0b3a 	bleq	ec3ea8 <startup-0x1f13c158>
    11bc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    11c0:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    11c4:	3a0e0301 	bcc	381dd0 <startup-0x1fc7e230>
    11c8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    11cc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    11d0:	96184006 	ldrls	r4, [r8], -r6
    11d4:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000151a 	andeq	r1, r0, sl, lsl r5
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	0a520002 	beq	148003c <startup-0x1eb7ffc4>
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	2000152c 	andcs	r1, r0, ip, lsr #10
  3c:	00000056 	andeq	r0, r0, r6, asr r0
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	0c360002 	ldceq	0, cr0, [r6], #-8
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20001584 	andcs	r1, r0, r4, lsl #11
  5c:	000002a8 	andeq	r0, r0, r8, lsr #5
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	11650002 	cmnne	r5, r2
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	2000182c 	andcs	r1, r0, ip, lsr #16
  7c:	000001d4 	ldrdeq	r0, [r0], -r4
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	13600002 	cmnne	r0, #2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20001a00 	andcs	r1, r0, r0, lsl #20
  9c:	00000364 	andeq	r0, r0, r4, ror #6
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	19a50002 	stmibne	r5!, {r1}
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20001d64 	andcs	r1, r0, r4, ror #26
  bc:	00000238 	andeq	r0, r0, r8, lsr r2
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	1e410002 	cdpne	0, 4, cr0, cr1, cr2, {0}
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	20001f9c 	mulcs	r0, ip, pc	; <UNPREDICTABLE>
  dc:	00000328 	andeq	r0, r0, r8, lsr #6
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	237a0002 	cmncs	sl, #2
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	200022c4 	andcs	r2, r0, r4, asr #5
  fc:	000002ac 	andeq	r0, r0, ip, lsr #5
	...
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	28d90002 	ldmcs	r9, {r1}^
 110:	00040000 	andeq	r0, r4, r0
 114:	00000000 	andeq	r0, r0, r0
 118:	20002570 	andcs	r2, r0, r0, ror r5
 11c:	00000e44 	andeq	r0, r0, r4, asr #28
	...
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	317c0002 	cmncc	ip, r2
 130:	00040000 	andeq	r0, r4, r0
 134:	00000000 	andeq	r0, r0, r0
 138:	200033b4 			; <UNDEFINED> instruction: 0x200033b4
 13c:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	32800002 	addcc	r0, r0, #2
 150:	00040000 	andeq	r0, r4, r0
 154:	00000000 	andeq	r0, r0, r0
 158:	200033dc 	ldrdcs	r3, [r0], -ip
 15c:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
 16c:	33470002 	movtcc	r0, #28674	; 0x7002
 170:	00040000 	andeq	r0, r4, r0
 174:	00000000 	andeq	r0, r0, r0
 178:	20003404 	andcs	r3, r0, r4, lsl #8
 17c:	0000006c 	andeq	r0, r0, ip, rrx
	...
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	34800002 	strcc	r0, [r0], #2
 190:	00040000 	andeq	r0, r4, r0
 194:	00000000 	andeq	r0, r0, r0
 198:	20003470 	andcs	r3, r0, r0, ror r4
 19c:	00000520 	andeq	r0, r0, r0, lsr #10
	...
 1a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ac:	39710002 	ldmdbcc	r1!, {r1}^
 1b0:	00040000 	andeq	r0, r4, r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	20003990 	mulcs	r0, r0, r9
 1bc:	00000094 	muleq	r0, r4, r0
	...
 1c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1cc:	3ab50002 	bcc	fed401dc <firstTime.4040+0xded35d20>
 1d0:	00040000 	andeq	r0, r4, r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	20003a24 	andcs	r3, r0, r4, lsr #20
 1dc:	000000e8 	andeq	r0, r0, r8, ror #1
	...
 1e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ec:	3d990002 	ldccc	0, cr0, [r9, #8]
 1f0:	00040000 	andeq	r0, r4, r0
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	20003b0c 	andcs	r3, r0, ip, lsl #22
 1fc:	000000e8 	andeq	r0, r0, r8, ror #1
	...
 208:	0000001c 	andeq	r0, r0, ip, lsl r0
 20c:	407d0002 	rsbsmi	r0, sp, r2
 210:	00040000 	andeq	r0, r4, r0
 214:	00000000 	andeq	r0, r0, r0
 218:	20003bf4 	strdcs	r3, [r0], -r4
 21c:	000000e8 	andeq	r0, r0, r8, ror #1
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	2000152a 	andcs	r1, r0, sl, lsr #10
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000387 	andeq	r0, r0, r7, lsl #7
       4:	017d0002 	cmneq	sp, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	43010000 	movwmi	r0, #4096	; 0x1000
      1c:	6f6d2f3a 	svcvs	0x006d2f3a
      20:	2f632f70 	svccs	0x00632f70
      24:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
      28:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
      2c:	6f697461 	svcvs	0x00697461
      30:	2f72656e 	svccs	0x0072656e
      34:	73504944 	cmpvc	r0, #68, 18	; 0x110000
      38:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
      3c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
      40:	74730000 	ldrbtvc	r0, [r3], #-0
      44:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
      48:	00632e70 	rsbeq	r2, r3, r0, ror lr
      4c:	73000001 	movwvc	r0, #1
      50:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
      54:	00682e65 	rsbeq	r2, r8, r5, ror #28
      58:	69000001 	stmdbvs	r0, {r0}
      5c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
      60:	0100682e 	tsteq	r0, lr, lsr #16
      64:	61670000 	cmnvs	r7, r0
      68:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
      6c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
      70:	0100682e 	tsteq	r0, lr, lsr #16
      74:	72670000 	rsbvc	r0, r7, #0
      78:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
      7c:	682e7363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, ip, sp, lr}
      80:	00000100 	andeq	r0, r0, r0, lsl #2
      84:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
      88:	5f726574 	svcpl	0x00726574
      8c:	63616c62 	cmnvs	r1, #25088	; 0x6200
      90:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
      94:	0001006d 	andeq	r0, r1, sp, rrx
      98:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
      9c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
      a0:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
      a4:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
      a8:	01006d62 	tsteq	r0, r2, ror #26
      ac:	6f6d0000 	svcvs	0x006d0000
      b0:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
      b4:	72675f72 	rsbvc	r5, r7, #456	; 0x1c8
      b8:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
      bc:	01006d62 	tsteq	r0, r2, ror #26
      c0:	72700000 	rsbsvc	r0, r0, #0
      c4:	5f737365 	svcpl	0x00737365
      c8:	63616c62 	cmnvs	r1, #25088	; 0x6200
      cc:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
      d0:	0001006d 	andeq	r0, r1, sp, rrx
      d4:	65727000 	ldrbvs	r7, [r2, #-0]!
      d8:	6c5f7373 	mrrcvs	3, 7, r7, pc, cr3	; <UNPREDICTABLE>
      dc:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
      e0:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
      e4:	00000100 	andeq	r0, r0, r0, lsl #2
      e8:	73657270 	cmnvc	r5, #112, 4
      ec:	72675f73 	rsbvc	r5, r7, #460	; 0x1cc
      f0:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
      f4:	01006d62 	tsteq	r0, r2, ror #26
      f8:	61630000 	cmnvs	r3, r0
      fc:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     100:	616c625f 	cmnvs	ip, pc, asr r2
     104:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     108:	01006d62 	tsteq	r0, r2, ror #26
     10c:	61630000 	cmnvs	r3, r0
     110:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     114:	6172675f 	cmnvs	r2, pc, asr r7
     118:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     11c:	0001006d 	andeq	r0, r1, sp, rrx
     120:	73616300 	cmnvc	r1, #0, 6
     124:	5f656c74 	svcpl	0x00656c74
     128:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     12c:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     130:	0001006d 	andeq	r0, r1, sp, rrx
     134:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     138:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
     13c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     140:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     144:	00000100 	andeq	r0, r0, r0, lsl #2
     148:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     14c:	72675f65 	rsbvc	r5, r7, #404	; 0x194
     150:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     154:	01006d62 	tsteq	r0, r2, ror #26
     158:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
     15c:	5f656c74 	svcpl	0x00656c74
     160:	63616c62 	cmnvs	r1, #25088	; 0x6200
     164:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     168:	0001006d 	andeq	r0, r1, sp, rrx
     16c:	6f6c7300 	svcvs	0x006c7300
     170:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
     174:	682e7478 	stmdavs	lr!, {r3, r4, r5, r6, sl, ip, sp, lr}
     178:	00000100 	andeq	r0, r0, r0, lsl #2
     17c:	782e6762 	stmdavc	lr!, {r1, r5, r6, r8, r9, sl, sp, lr}
     180:	01006d62 	tsteq	r0, r2, ror #26
     184:	00000000 	andeq	r0, r0, r0
     188:	00000205 	andeq	r0, r0, r5, lsl #4
     18c:	30032000 	andcc	r2, r3, r0
     190:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
     194:	01010003 	tsteq	r1, r3
     198:	10020500 	andne	r0, r2, r0, lsl #10
     19c:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
     1a0:	3d2f0125 	stfccs	f0, [pc, #-148]!	; 114 <startup-0x1ffffeec>
     1a4:	03303030 	teqeq	r0, #48	; 0x30
     1a8:	2f3d742c 	svccs	0x003d742c
     1ac:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     1b0:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     1b4:	2f3e672f 	svccs	0x003e672f
     1b8:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     1bc:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     1c0:	2f3d672f 	svccs	0x003d672f
     1c4:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     1c8:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     1cc:	2f3d672f 	svccs	0x003d672f
     1d0:	52023f67 	andpl	r3, r2, #412	; 0x19c
     1d4:	322f4c17 	eorcc	r4, pc, #5888	; 0x1700
     1d8:	59bb7575 	ldmibpl	fp!, {r0, r2, r4, r5, r6, r8, sl, ip, sp, lr}
     1dc:	835c5959 	cmphi	ip, #1458176	; 0x164000
     1e0:	6759bb75 			; <UNDEFINED> instruction: 0x6759bb75
     1e4:	bb75835c 	bllt	1d60f5c <startup-0x1e29f0a4>
     1e8:	ad5c5959 	vldrge.16	s11, [ip, #-178]	; 0xffffff4e	; <UNPREDICTABLE>
     1ec:	5959bb75 	ldmdbpl	r9, {r0, r2, r4, r5, r6, r8, r9, fp, ip, sp, pc}^
     1f0:	8583675b 	strhi	r6, [r3, #1883]	; 0x75b
     1f4:	6a858367 	bvs	fe160f98 <firstTime.4040+0xde156adc>
     1f8:	85838367 	strhi	r8, [r3, #871]	; 0x367
     1fc:	85838367 	strhi	r8, [r3, #871]	; 0x367
     200:	83678567 	cmnhi	r7, #432013312	; 0x19c00000
     204:	68688583 	stmdavs	r8!, {r0, r1, r7, r8, sl, pc}^
     208:	83676968 	cmnhi	r7, #104, 18	; 0x1a0000
     20c:	84678483 	strbthi	r8, [r7], #-1155	; 0xfffffb7d
     210:	37028367 	strcc	r8, [r2, -r7, ror #6]
     214:	83838315 	orrhi	r8, r3, #1409286144	; 0x54000000
     218:	83144502 	tsthi	r4, #8388608	; 0x800000
     21c:	83858383 	orrhi	r8, r5, #201326594	; 0xc000002
     220:	83848383 	orrhi	r8, r4, #201326594	; 0xc000002
     224:	0f038383 	svceq	0x00038383
     228:	75757582 	ldrbvc	r7, [r5, #-1410]!	; 0xfffffa7e
     22c:	75757575 	ldrbvc	r7, [r5, #-1397]!	; 0xfffffa8b
     230:	67757575 			; <UNDEFINED> instruction: 0x67757575
     234:	2f2f7675 	svccs	0x002f7675
     238:	4b594b30 	blmi	1652f00 <startup-0x1e9ad100>
     23c:	f7414d59 			; <UNDEFINED> instruction: 0xf7414d59
     240:	3d4f3a67 	vstrcc	s7, [pc, #-412]	; ac <startup-0x1fffff54>
     244:	675a333d 	smmlarvs	sl, sp, r3, r3
     248:	67676793 			; <UNDEFINED> instruction: 0x67676793
     24c:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
     250:	04020042 	streq	r0, [r2], #-66	; 0xffffffbe
     254:	06820601 	streq	r0, [r2], r1, lsl #12
     258:	3083bb83 	addcc	fp, r3, r3, lsl #23
     25c:	bbc99175 	bllt	ff264838 <firstTime.4040+0xdf25a37c>
     260:	d7c9c9c9 	strble	ip, [r9, r9, asr #19]
     264:	f3135d02 	vpadd.f16	d5, d3, d2
     268:	c92108c9 	stmdbgt	r1!, {r0, r3, r6, r7, fp}
     26c:	08c91308 	stmiaeq	r9, {r3, r8, r9, ip}^
     270:	1308c92f 	movwne	ip, #35119	; 0x892f
     274:	c92108c9 	stmdbgt	r1!, {r0, r3, r6, r7, fp}
     278:	08bb4b08 	ldmeq	fp!, {r3, r8, r9, fp, lr}
     27c:	3d4bca3d 	vstrcc	s25, [fp, #-244]	; 0xffffff0c
     280:	59323d4b 	ldmdbpl	r2!, {r0, r1, r3, r6, r8, sl, fp, ip, sp}
     284:	323d4b3d 	eorscc	r4, sp, #62464	; 0xf400
     288:	bbbbbbbb 	bllt	feeef17c <firstTime.4040+0xdeee4cc0>
     28c:	e775e5bb 			; <UNDEFINED> instruction: 0xe775e5bb
     290:	76595924 	ldrbvc	r5, [r9], -r4, lsr #18
     294:	67596967 	ldrbvs	r6, [r9, -r7, ror #18]
     298:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
     29c:	132e0203 			; <UNDEFINED> instruction: 0x132e0203
     2a0:	03040200 	movweq	r0, #16896	; 0x4200
     2a4:	040200c9 	streq	r0, [r2], #-201	; 0xffffff37
     2a8:	008e0803 	addeq	r0, lr, r3, lsl #16
     2ac:	06010402 	streq	r0, [r1], -r2, lsl #8
     2b0:	674e0658 	smlsldvs	r0, lr, r8, r6
     2b4:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
     2b8:	00820601 	addeq	r0, r2, r1, lsl #12
     2bc:	90020402 	andls	r0, r2, r2, lsl #8
     2c0:	03040200 	movweq	r0, #16896	; 0x4200
     2c4:	4b670690 	blmi	19c1d0c <startup-0x1e63e2f4>
     2c8:	67596884 	ldrbvs	r6, [r9, -r4, lsl #17]
     2cc:	8383f491 	orrhi	pc, r3, #-1862270976	; 0x91000000
     2d0:	59bd694b 	ldmibpl	sp!, {r0, r1, r3, r6, r8, fp, sp, lr}
     2d4:	2108595d 	tstcs	r8, sp, asr r9
     2d8:	d759bbbc 			; <UNDEFINED> instruction: 0xd759bbbc
     2dc:	95911408 	ldrls	r1, [r1, #1032]	; 0x408
     2e0:	01040200 	mrseq	r0, R12_usr
     2e4:	02005806 	andeq	r5, r0, #393216	; 0x60000
     2e8:	00f20204 	rscseq	r0, r2, r4, lsl #4
     2ec:	08030402 	stmdaeq	r3, {r1, sl}
     2f0:	13080620 	movwne	r0, #34336	; 0x8620
     2f4:	0867085d 	stmdaeq	r7!, {r0, r2, r3, r4, r6, fp}^
     2f8:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
     2fc:	00750801 	rsbseq	r0, r5, r1, lsl #16
     300:	08010402 	stmdaeq	r1, {r1, sl}
     304:	02002f49 	andeq	r2, r0, #292	; 0x124
     308:	4a060104 	bmi	180720 <startup-0x1fe7f8e0>
     30c:	02004b06 	andeq	r4, r0, #6144	; 0x1800
     310:	00540204 	subseq	r0, r4, r4, lsl #4
     314:	06010402 	streq	r0, [r1], -r2, lsl #8
     318:	0a030658 	beq	c1c80 <startup-0x1ff3e380>
     31c:	003d084a 	eorseq	r0, sp, sl, asr #16
     320:	06010402 	streq	r0, [r1], -r2, lsl #8
     324:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
     328:	4b064a02 	blmi	192b38 <startup-0x1fe6d4c8>
     32c:	95e5d73d 	strbls	sp, [r5, #1853]!	; 0x73d
     330:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
     334:	4a060104 	bmi	18074c <startup-0x1fe7f8b4>
     338:	02040200 	andeq	r0, r4, #0, 4
     33c:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
     340:	02009003 	andeq	r9, r0, #3
     344:	064a0404 	strbeq	r0, [sl], -r4, lsl #8
     348:	e5d73d4b 	ldrb	r3, [r7, #3403]	; 0xd4b
     34c:	3f67ae4d 	svccc	0x0067ae4d
     350:	4b3d3d24 	blmi	f4f7e8 <startup-0x1f0b0818>
     354:	594b5a40 	stmdbpl	fp, {r6, r9, fp, ip, lr}^
     358:	8383594b 	orrhi	r5, r3, #1228800	; 0x12c000
     35c:	91919191 			; <UNDEFINED> instruction: 0x91919191
     360:	83838483 	orrhi	r8, r3, #-2097152000	; 0x83000000
     364:	3d83833e 	stccc	3, cr8, [r3, #248]	; 0xf8
     368:	2f83834c 	svccs	0x0083834c
     36c:	207ef103 	rsbscs	pc, lr, r3, lsl #2
     370:	3c00e903 			; <UNDEFINED> instruction: 0x3c00e903
     374:	01040200 	mrseq	r0, R12_usr
     378:	207ebb03 	rsbscs	fp, lr, r3, lsl #22
     37c:	0201f803 	andeq	pc, r1, #196608	; 0x30000
     380:	3d4b0127 	stfcce	f0, [fp, #-156]	; 0xffffff64
     384:	0402213e 	streq	r2, [r2], #-318	; 0xfffffec2
     388:	8a010100 	bhi	40790 <startup-0x1ffbf870>
     38c:	02000000 	andeq	r0, r0, #0
     390:	00007000 	andeq	r7, r0, r0
     394:	fb010200 	blx	40b9e <startup-0x1ffbf462>
     398:	01000d0e 	tsteq	r0, lr, lsl #26
     39c:	00010101 	andeq	r0, r1, r1, lsl #2
     3a0:	00010000 	andeq	r0, r1, r0
     3a4:	3a430100 	bcc	10c07ac <startup-0x1ef3f854>
     3a8:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     3ac:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 2f8 <startup-0x1ffffd08>
     3b0:	616c706f 	cmnvs	ip, pc, rrx
     3b4:	61726f62 	cmnvs	r2, r2, ror #30
     3b8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     3bc:	442f7265 	strtmi	r7, [pc], #-613	; 3c4 <startup-0x1ffffc3c>
     3c0:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     3c4:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     3c8:	00432f68 	subeq	r2, r3, r8, ror #30
     3cc:	6d616700 	stclvs	7, cr6, [r1, #-0]
     3d0:	6a626f65 	bvs	189c16c <startup-0x1e763e94>
     3d4:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
     3d8:	00010063 	andeq	r0, r1, r3, rrx
     3dc:	72707300 	rsbsvc	r7, r0, #0, 6
     3e0:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
     3e4:	00010068 	andeq	r0, r1, r8, rrx
     3e8:	616d6900 	cmnvs	sp, r0, lsl #18
     3ec:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     3f0:	00000100 	andeq	r0, r0, r0, lsl #2
     3f4:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     3f8:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     3fc:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
     400:	00000100 	andeq	r0, r0, r0, lsl #2
     404:	02050000 	andeq	r0, r5, #0
     408:	2000152c 	andcs	r1, r0, ip, lsr #10
     40c:	4b4c4c19 	blmi	1313478 <startup-0x1ececb88>
     410:	ca3d6759 	bgt	f5a17c <startup-0x1f0a5e84>
     414:	01000402 	tsteq	r0, r2, lsl #8
     418:	00018401 	andeq	r8, r1, r1, lsl #8
     41c:	37000200 	strcc	r0, [r0, -r0, lsl #4]
     420:	02000001 	andeq	r0, r0, #1
     424:	0d0efb01 	vstreq	d15, [lr, #-4]
     428:	01010100 	mrseq	r0, (UNDEF: 17)
     42c:	00000001 	andeq	r0, r0, r1
     430:	01000001 	tsteq	r0, r1
     434:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     438:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     43c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     440:	6f62616c 	svcvs	0x0062616c
     444:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     448:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     44c:	5049442f 	subpl	r4, r9, pc, lsr #8
     450:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     454:	2f686374 	svccs	0x00686374
     458:	66000043 	strvs	r0, [r0], -r3, asr #32
     45c:	2e657269 	cdpcs	2, 6, cr7, cr5, cr9, {3}
     460:	00010063 	andeq	r0, r1, r3, rrx
     464:	72707300 	rsbsvc	r7, r0, #0, 6
     468:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
     46c:	00010068 	andeq	r0, r1, r8, rrx
     470:	616d6900 	cmnvs	sp, r0, lsl #18
     474:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     478:	00000100 	andeq	r0, r0, r0, lsl #2
     47c:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     480:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     484:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
     488:	00000100 	andeq	r0, r0, r0, lsl #2
     48c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     490:	616c625f 	cmnvs	ip, pc, asr r2
     494:	325f6b63 	subscc	r6, pc, #101376	; 0x18c00
     498:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     49c:	00000100 	andeq	r0, r0, r0, lsl #2
     4a0:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     4a4:	72675f31 	rsbvc	r5, r7, #49, 30	; 0xc4
     4a8:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     4ac:	01006d62 	tsteq	r0, r2, ror #26
     4b0:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     4b4:	5f316572 	svcpl	0x00316572
     4b8:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     4bc:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     4c0:	0001006d 	andeq	r0, r1, sp, rrx
     4c4:	72696600 	rsbvc	r6, r9, #0, 12
     4c8:	675f3265 	ldrbvs	r3, [pc, -r5, ror #4]
     4cc:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     4d0:	006d6278 	rsbeq	r6, sp, r8, ror r2
     4d4:	66000001 	strvs	r0, [r0], -r1
     4d8:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
     4dc:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     4e0:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     4e4:	01006d62 	tsteq	r0, r2, ror #26
     4e8:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     4ec:	5f336572 	svcpl	0x00336572
     4f0:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     4f4:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     4f8:	00000100 	andeq	r0, r0, r0, lsl #2
     4fc:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     500:	696c5f33 	stmdbvs	ip!, {r0, r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     504:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     508:	006d6278 	rsbeq	r6, sp, r8, ror r2
     50c:	66000001 	strvs	r0, [r0], -r1
     510:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
     514:	6172675f 	cmnvs	r2, pc, asr r7
     518:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     51c:	0001006d 	andeq	r0, r1, sp, rrx
     520:	72696600 	rsbvc	r6, r9, #0, 12
     524:	6c5f3465 	cfldrdvs	mvd3, [pc], {101}	; 0x65
     528:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     52c:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     530:	00000100 	andeq	r0, r0, r0, lsl #2
     534:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     538:	72675f35 	rsbvc	r5, r7, #53, 30	; 0xd4
     53c:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     540:	01006d62 	tsteq	r0, r2, ror #26
     544:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     548:	5f356572 	svcpl	0x00356572
     54c:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     550:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     554:	0001006d 	andeq	r0, r1, sp, rrx
     558:	05000000 	streq	r0, [r0, #-0]
     55c:	00158402 	andseq	r8, r5, r2, lsl #8
     560:	01300320 	teqeq	r0, r0, lsr #6
     564:	3e672f3d 	mcrcc	15, 3, r2, cr7, cr13, {1}
     568:	2f3e672f 	svccs	0x003e672f
     56c:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     570:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     574:	2f3e672f 	svccs	0x003e672f
     578:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     57c:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     580:	2f3e672f 	svccs	0x003e672f
     584:	46023d67 	strmi	r3, [r2], -r7, ror #26
     588:	2f4b4c14 	svccs	0x004b4c14
     58c:	59594b3e 	ldmdbpl	r9, {r1, r2, r3, r4, r5, r8, r9, fp, lr}^
     590:	91915a59 	orrsls	r5, r1, r9, asr sl
     594:	3e939191 	mrccc	1, 4, r9, cr3, cr1, {4}
     598:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     59c:	01003102 	tsteq	r0, r2, lsl #2
     5a0:	0000e301 	andeq	lr, r0, r1, lsl #6
     5a4:	6c000200 	sfmvs	f0, 4, [r0], {-0}
     5a8:	02000000 	andeq	r0, r0, #0
     5ac:	0d0efb01 	vstreq	d15, [lr, #-4]
     5b0:	01010100 	mrseq	r0, (UNDEF: 17)
     5b4:	00000001 	andeq	r0, r0, r1
     5b8:	01000001 	tsteq	r0, r1
     5bc:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     5c0:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     5c4:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     5c8:	6f62616c 	svcvs	0x0062616c
     5cc:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     5d0:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     5d4:	5049442f 	subpl	r4, r9, pc, lsr #8
     5d8:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     5dc:	2f686374 	svccs	0x00686374
     5e0:	70000043 	andvc	r0, r0, r3, asr #32
     5e4:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
     5e8:	00632e72 	rsbeq	r2, r3, r2, ror lr
     5ec:	73000001 	movwvc	r0, #1
     5f0:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
     5f4:	00682e65 	rsbeq	r2, r8, r5, ror #28
     5f8:	69000001 	stmdbvs	r0, {r0}
     5fc:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     600:	0100682e 	tsteq	r0, lr, lsr #16
     604:	61670000 	cmnvs	r7, r0
     608:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
     60c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     610:	0100682e 	tsteq	r0, lr, lsr #16
     614:	00000000 	andeq	r0, r0, r0
     618:	182c0205 	stmdane	ip!, {r0, r2, r9}
     61c:	4d172000 	ldcmi	0, cr2, [r7, #-0]
     620:	033d6759 	teqeq	sp, #23330816	; 0x1640000
     624:	0200c80c 	andeq	ip, r0, #12, 16	; 0xc0000
     628:	82060104 	andhi	r0, r6, #4, 2
     62c:	02040200 	andeq	r0, r4, #0, 4
     630:	4d4b064a 	stclmi	6, cr0, [fp, #-296]	; 0xfffffed8
     634:	004c3d75 	subeq	r3, ip, r5, ror sp
     638:	06010402 	streq	r0, [r1], -r2, lsl #8
     63c:	3d750674 	ldclcc	6, cr0, [r5, #-464]!	; 0xfffffe30
     640:	005d754d 	subseq	r7, sp, sp, asr #10
     644:	06010402 	streq	r0, [r1], -r2, lsl #8
     648:	5b59064a 	blpl	1641f78 <startup-0x1e9be088>
     64c:	01040200 	mrseq	r0, R12_usr
     650:	59064a06 	stmdbpl	r6, {r1, r2, r9, fp, lr}
     654:	0402005b 	streq	r0, [r2], #-91	; 0xffffffa5
     658:	004a0601 	subeq	r0, sl, r1, lsl #12
     65c:	58040402 	stmdapl	r4, {r1, sl}
     660:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
     664:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
     668:	02005806 	andeq	r5, r0, #393216	; 0x60000
     66c:	064a0704 	strbeq	r0, [sl], -r4, lsl #14
     670:	02005b4b 	andeq	r5, r0, #76800	; 0x12c00
     674:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
     678:	765b7506 	ldrbvc	r7, [fp], -r6, lsl #10
     67c:	5c4b684b 	mcrrpl	8, 4, r6, fp, cr11
     680:	02686767 	rsbeq	r6, r8, #27000832	; 0x19c0000
     684:	0101000e 	tsteq	r1, lr
     688:	000001dd 	ldrdeq	r0, [r0], -sp
     68c:	01820002 	orreq	r0, r2, r2
     690:	01020000 	mrseq	r0, (UNDEF: 2)
     694:	000d0efb 	strdeq	r0, [sp], -fp
     698:	01010101 	tsteq	r1, r1, lsl #2
     69c:	01000000 	mrseq	r0, (UNDEF: 0)
     6a0:	43010000 	movwmi	r0, #4096	; 0x1000
     6a4:	6f6d2f3a 	svcvs	0x006d2f3a
     6a8:	2f632f70 	svccs	0x00632f70
     6ac:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     6b0:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     6b4:	6f697461 	svcvs	0x00697461
     6b8:	2f72656e 	svccs	0x0072656e
     6bc:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     6c0:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     6c4:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     6c8:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     6cc:	632e6472 			; <UNDEFINED> instruction: 0x632e6472
     6d0:	00000100 	andeq	r0, r0, r0, lsl #2
     6d4:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     6d8:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
     6dc:	00000100 	andeq	r0, r0, r0, lsl #2
     6e0:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     6e4:	00682e65 	rsbeq	r2, r8, r5, ror #28
     6e8:	67000001 	strvs	r0, [r0, -r1]
     6ec:	6f656d61 	svcvs	0x00656d61
     6f0:	63656a62 	cmnvs	r5, #401408	; 0x62000
     6f4:	00682e74 	rsbeq	r2, r8, r4, ror lr
     6f8:	62000001 	andvs	r0, r0, #1
     6fc:	31647269 	cmncc	r4, r9, ror #4
     700:	616c625f 	cmnvs	ip, pc, asr r2
     704:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     708:	01006d62 	tsteq	r0, r2, ror #26
     70c:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     710:	5f316472 	svcpl	0x00316472
     714:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     718:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     71c:	00000100 	andeq	r0, r0, r0, lsl #2
     720:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     724:	696c5f31 	stmdbvs	ip!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     728:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     72c:	006d6278 	rsbeq	r6, sp, r8, ror r2
     730:	62000001 	andvs	r0, r0, #1
     734:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     738:	616c625f 	cmnvs	ip, pc, asr r2
     73c:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     740:	01006d62 	tsteq	r0, r2, ror #26
     744:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     748:	5f326472 	svcpl	0x00326472
     74c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     750:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     754:	00000100 	andeq	r0, r0, r0, lsl #2
     758:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     75c:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     760:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     764:	006d6278 	rsbeq	r6, sp, r8, ror r2
     768:	62000001 	andvs	r0, r0, #1
     76c:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     770:	616c625f 	cmnvs	ip, pc, asr r2
     774:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     778:	01006d62 	tsteq	r0, r2, ror #26
     77c:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     780:	5f336472 	svcpl	0x00336472
     784:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     788:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     78c:	00000100 	andeq	r0, r0, r0, lsl #2
     790:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     794:	696c5f33 	stmdbvs	ip!, {r0, r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     798:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     79c:	006d6278 	rsbeq	r6, sp, r8, ror r2
     7a0:	62000001 	andvs	r0, r0, #1
     7a4:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     7a8:	616c625f 	cmnvs	ip, pc, asr r2
     7ac:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     7b0:	01006d62 	tsteq	r0, r2, ror #26
     7b4:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     7b8:	5f346472 	svcpl	0x00346472
     7bc:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     7c0:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     7c4:	00000100 	andeq	r0, r0, r0, lsl #2
     7c8:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     7cc:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     7d0:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     7d4:	006d6278 	rsbeq	r6, sp, r8, ror r2
     7d8:	62000001 	andvs	r0, r0, #1
     7dc:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     7e0:	616c625f 	cmnvs	ip, pc, asr r2
     7e4:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     7e8:	01006d62 	tsteq	r0, r2, ror #26
     7ec:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     7f0:	5f356472 	svcpl	0x00356472
     7f4:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     7f8:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     7fc:	00000100 	andeq	r0, r0, r0, lsl #2
     800:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     804:	696c5f35 	stmdbvs	ip!, {r0, r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     808:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     80c:	006d6278 	rsbeq	r6, sp, r8, ror r2
     810:	00000001 	andeq	r0, r0, r1
     814:	00020500 	andeq	r0, r2, r0, lsl #10
     818:	0320001a 			; <UNDEFINED> instruction: 0x0320001a
     81c:	2f3e013f 	svccs	0x003e013f
     820:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     824:	3e672f3d 	mcrcc	15, 3, r2, cr7, cr13, {1}
     828:	2f3d672f 	svccs	0x003d672f
     82c:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     830:	3d672f3f 	stclcc	15, cr2, [r7, #-252]!	; 0xffffff04
     834:	2f3d672f 	svccs	0x003d672f
     838:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     83c:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     840:	2f3e672f 	svccs	0x003e672f
     844:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     848:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     84c:	4c145e02 	ldcmi	14, cr5, [r4], {2}
     850:	4b3e2f4b 	blmi	f8c584 <startup-0x1f073a7c>
     854:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
     858:	9191915c 	orrsls	r9, r1, ip, asr r1
     85c:	3e949391 	mrccc	3, 4, r9, cr4, cr1, {4}
     860:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     864:	01003d02 	tsteq	r0, r2, lsl #26
     868:	00016101 	andeq	r6, r1, r1, lsl #2
     86c:	1c000200 	sfmne	f0, 4, [r0], {-0}
     870:	02000001 	andeq	r0, r0, #1
     874:	0d0efb01 	vstreq	d15, [lr, #-4]
     878:	01010100 	mrseq	r0, (UNDEF: 17)
     87c:	00000001 	andeq	r0, r0, r1
     880:	01000001 	tsteq	r0, r1
     884:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     888:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     88c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     890:	6f62616c 	svcvs	0x0062616c
     894:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     898:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     89c:	5049442f 	subpl	r4, r9, pc, lsr #8
     8a0:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     8a4:	2f686374 	svccs	0x00686374
     8a8:	77000043 	strvc	r0, [r0, -r3, asr #32]
     8ac:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     8b0:	0100632e 	tsteq	r0, lr, lsr #6
     8b4:	70730000 	rsbsvc	r0, r3, r0
     8b8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     8bc:	0100682e 	tsteq	r0, lr, lsr #16
     8c0:	6d690000 	stclvs	0, cr0, [r9, #-0]
     8c4:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
     8c8:	00010068 	andeq	r0, r1, r8, rrx
     8cc:	6d616700 	stclvs	7, cr6, [r1, #-0]
     8d0:	6a626f65 	bvs	189c66c <startup-0x1e763994>
     8d4:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
     8d8:	00010068 	andeq	r0, r1, r8, rrx
     8dc:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     8e0:	5f316863 	svcpl	0x00316863
     8e4:	63616c62 	cmnvs	r1, #25088	; 0x6200
     8e8:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     8ec:	0001006d 	andeq	r0, r1, sp, rrx
     8f0:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     8f4:	5f316863 	svcpl	0x00316863
     8f8:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     8fc:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     900:	00000100 	andeq	r0, r0, r0, lsl #2
     904:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     908:	6c5f3168 	ldfvse	f3, [pc], {104}	; 0x68
     90c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     910:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     914:	00000100 	andeq	r0, r0, r0, lsl #2
     918:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     91c:	625f3268 	subsvs	r3, pc, #104, 4	; 0x80000006
     920:	6b63616c 	blvs	18d8ed8 <startup-0x1e727128>
     924:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     928:	00000100 	andeq	r0, r0, r0, lsl #2
     92c:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     930:	675f3268 	ldrbvs	r3, [pc, -r8, ror #4]
     934:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     938:	006d6278 	rsbeq	r6, sp, r8, ror r2
     93c:	77000001 	strvc	r0, [r0, -r1]
     940:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     944:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     948:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     94c:	006d6278 	rsbeq	r6, sp, r8, ror r2
     950:	77000001 	strvc	r0, [r0, -r1]
     954:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     958:	6c625f33 	stclvs	15, cr5, [r2], #-204	; 0xffffff34
     95c:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     960:	006d6278 	rsbeq	r6, sp, r8, ror r2
     964:	77000001 	strvc	r0, [r0, -r1]
     968:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     96c:	72675f33 	rsbvc	r5, r7, #51, 30	; 0xcc
     970:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     974:	01006d62 	tsteq	r0, r2, ror #26
     978:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     97c:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     980:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     984:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     988:	01006d62 	tsteq	r0, r2, ror #26
     98c:	00000000 	andeq	r0, r0, r0
     990:	1d640205 	sfmne	f0, 2, [r4, #-20]!	; 0xffffffec
     994:	28032000 	stmdacs	r3, {sp}
     998:	672f3e01 	strvs	r3, [pc, -r1, lsl #28]!
     99c:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     9a0:	2f3e672f 	svccs	0x003e672f
     9a4:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     9a8:	3f672f3d 	svccc	0x00672f3d
     9ac:	2f3d672f 	svccs	0x003d672f
     9b0:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     9b4:	143a023e 	ldrtne	r0, [sl], #-574	; 0xfffffdc2
     9b8:	3e2f4b4c 	vnmulcc.f64	d4, d15, d12
     9bc:	5b59594b 	blpl	1656ef0 <startup-0x1e9a9110>
     9c0:	94919191 	ldrls	r9, [r1], #401	; 0x191
     9c4:	3d3d3d3e 	ldccc	13, cr3, [sp, #-248]!	; 0xffffff08
     9c8:	0029023d 	eoreq	r0, r9, sp, lsr r2
     9cc:	017f0101 	cmneq	pc, r1, lsl #2
     9d0:	00020000 	andeq	r0, r2, r0
     9d4:	0000011a 	andeq	r0, r0, sl, lsl r1
     9d8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     9dc:	0101000d 	tsteq	r1, sp
     9e0:	00000101 	andeq	r0, r0, r1, lsl #2
     9e4:	00000100 	andeq	r0, r0, r0, lsl #2
     9e8:	2f3a4301 	svccs	0x003a4301
     9ec:	2f706f6d 	svccs	0x00706f6d
     9f0:	6f4d2f63 	svcvs	0x004d2f63
     9f4:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     9f8:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     9fc:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     a00:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     a04:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     a08:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     a0c:	0000432f 	andeq	r4, r0, pc, lsr #6
     a10:	2e504944 	vnmlacs.f16	s9, s0, s8	; <UNPREDICTABLE>
     a14:	00010063 	andeq	r0, r1, r3, rrx
     a18:	72707300 	rsbsvc	r7, r0, #0, 6
     a1c:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
     a20:	00010068 	andeq	r0, r1, r8, rrx
     a24:	616d6900 	cmnvs	sp, r0, lsl #18
     a28:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     a2c:	00000100 	andeq	r0, r0, r0, lsl #2
     a30:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     a34:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     a38:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
     a3c:	00000100 	andeq	r0, r0, r0, lsl #2
     a40:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     a44:	625f3168 	subsvs	r3, pc, #104, 2
     a48:	6b63616c 	blvs	18d9000 <startup-0x1e727000>
     a4c:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     a50:	00000100 	andeq	r0, r0, r0, lsl #2
     a54:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     a58:	675f3168 	ldrbvs	r3, [pc, -r8, ror #2]
     a5c:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     a60:	006d6278 	rsbeq	r6, sp, r8, ror r2
     a64:	77000001 	strvc	r0, [r0, -r1]
     a68:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     a6c:	696c5f31 	stmdbvs	ip!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     a70:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     a74:	006d6278 	rsbeq	r6, sp, r8, ror r2
     a78:	77000001 	strvc	r0, [r0, -r1]
     a7c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     a80:	6c625f32 	stclvs	15, cr5, [r2], #-200	; 0xffffff38
     a84:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     a88:	006d6278 	rsbeq	r6, sp, r8, ror r2
     a8c:	77000001 	strvc	r0, [r0, -r1]
     a90:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     a94:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
     a98:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     a9c:	01006d62 	tsteq	r0, r2, ror #26
     aa0:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     aa4:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     aa8:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     aac:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     ab0:	01006d62 	tsteq	r0, r2, ror #26
     ab4:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     ab8:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     abc:	616c625f 	cmnvs	ip, pc, asr r2
     ac0:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     ac4:	01006d62 	tsteq	r0, r2, ror #26
     ac8:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     acc:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     ad0:	6172675f 	cmnvs	r2, pc, asr r7
     ad4:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     ad8:	0001006d 	andeq	r0, r1, sp, rrx
     adc:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     ae0:	5f336863 	svcpl	0x00336863
     ae4:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     ae8:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     aec:	0001006d 	andeq	r0, r1, sp, rrx
     af0:	05000000 	streq	r0, [r0, #-0]
     af4:	001f9c02 	andseq	r9, pc, r2, lsl #24
     af8:	012c0320 			; <UNDEFINED> instruction: 0x012c0320
     afc:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     b00:	2f3d672f 	svccs	0x003d672f
     b04:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     b08:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     b0c:	2f3f672f 	svccs	0x003f672f
     b10:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     b14:	3e672f3d 	mcrcc	15, 3, r2, cr7, cr13, {1}
     b18:	4c143a02 			; <UNDEFINED> instruction: 0x4c143a02
     b1c:	4b3e2f4b 	blmi	f8c850 <startup-0x1f0737b0>
     b20:	915b5959 	cmpls	fp, r9, asr r9
     b24:	3e949191 	mrccc	1, 4, r9, cr4, cr1, {4}
     b28:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     b2c:	59172902 	ldmdbpl	r7, {r1, r8, fp, sp}
     b30:	4b933d3d 	blmi	fe4d002c <firstTime.4040+0xde4c5b70>
     b34:	005a5a4d 	subseq	r5, sl, sp, asr #20
     b38:	06010402 	streq	r0, [r1], -r2, lsl #8
     b3c:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
     b40:	83068202 	movwhi	r8, #25090	; 0x6202
     b44:	4b3108ae 	blmi	c42e04 <startup-0x1f3bd1fc>
     b48:	3f4b1c4f 	svccc	0x004b1c4f
     b4c:	01000e02 	tsteq	r0, r2, lsl #28
     b50:	0001a501 	andeq	sl, r1, r1, lsl #10
     b54:	57000200 	strpl	r0, [r0, -r0, lsl #4]
     b58:	02000001 	andeq	r0, r0, #1
     b5c:	0d0efb01 	vstreq	d15, [lr, #-4]
     b60:	01010100 	mrseq	r0, (UNDEF: 17)
     b64:	00000001 	andeq	r0, r0, r1
     b68:	01000001 	tsteq	r0, r1
     b6c:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     b70:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     b74:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     b78:	6f62616c 	svcvs	0x0062616c
     b7c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     b80:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     b84:	5049442f 	subpl	r4, r9, pc, lsr #8
     b88:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     b8c:	2f686374 	svccs	0x00686374
     b90:	66000043 	strvs	r0, [r0], -r3, asr #32
     b94:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
     b98:	0100632e 	tsteq	r0, lr, lsr #6
     b9c:	70730000 	rsbsvc	r0, r3, r0
     ba0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     ba4:	0100682e 	tsteq	r0, lr, lsr #16
     ba8:	6d690000 	stclvs	0, cr0, [r9, #-0]
     bac:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
     bb0:	00010068 	andeq	r0, r1, r8, rrx
     bb4:	6d616700 	stclvs	7, cr6, [r1, #-0]
     bb8:	6a626f65 	bvs	189c954 <startup-0x1e7636ac>
     bbc:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
     bc0:	00010068 	andeq	r0, r1, r8, rrx
     bc4:	616c6600 	cmnvs	ip, r0, lsl #12
     bc8:	5f31656d 	svcpl	0x0031656d
     bcc:	63616c62 	cmnvs	r1, #25088	; 0x6200
     bd0:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     bd4:	0001006d 	andeq	r0, r1, sp, rrx
     bd8:	616c6600 	cmnvs	ip, r0, lsl #12
     bdc:	5f31656d 	svcpl	0x0031656d
     be0:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     be4:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     be8:	00000100 	andeq	r0, r0, r0, lsl #2
     bec:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
     bf0:	6c5f3165 	ldfvse	f3, [pc], {101}	; 0x65
     bf4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     bf8:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     bfc:	00000100 	andeq	r0, r0, r0, lsl #2
     c00:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
     c04:	625f3265 	subsvs	r3, pc, #1342177286	; 0x50000006
     c08:	6b63616c 	blvs	18d91c0 <startup-0x1e726e40>
     c0c:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     c10:	00000100 	andeq	r0, r0, r0, lsl #2
     c14:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
     c18:	675f3265 	ldrbvs	r3, [pc, -r5, ror #4]
     c1c:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     c20:	006d6278 	rsbeq	r6, sp, r8, ror r2
     c24:	66000001 	strvs	r0, [r0], -r1
     c28:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
     c2c:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     c30:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     c34:	006d6278 	rsbeq	r6, sp, r8, ror r2
     c38:	66000001 	strvs	r0, [r0], -r1
     c3c:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
     c40:	6c625f33 	stclvs	15, cr5, [r2], #-204	; 0xffffff34
     c44:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     c48:	006d6278 	rsbeq	r6, sp, r8, ror r2
     c4c:	66000001 	strvs	r0, [r0], -r1
     c50:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
     c54:	72675f33 	rsbvc	r5, r7, #51, 30	; 0xcc
     c58:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     c5c:	01006d62 	tsteq	r0, r2, ror #26
     c60:	6c660000 	stclvs	0, cr0, [r6], #-0
     c64:	33656d61 	cmncc	r5, #6208	; 0x1840
     c68:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     c6c:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     c70:	01006d62 	tsteq	r0, r2, ror #26
     c74:	6c660000 	stclvs	0, cr0, [r6], #-0
     c78:	34656d61 	strbtcc	r6, [r5], #-3425	; 0xfffff29f
     c7c:	616c625f 	cmnvs	ip, pc, asr r2
     c80:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     c84:	01006d62 	tsteq	r0, r2, ror #26
     c88:	6c660000 	stclvs	0, cr0, [r6], #-0
     c8c:	34656d61 	strbtcc	r6, [r5], #-3425	; 0xfffff29f
     c90:	6172675f 	cmnvs	r2, pc, asr r7
     c94:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     c98:	0001006d 	andeq	r0, r1, sp, rrx
     c9c:	616c6600 	cmnvs	ip, r0, lsl #12
     ca0:	5f34656d 	svcpl	0x0034656d
     ca4:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     ca8:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     cac:	0001006d 	andeq	r0, r1, sp, rrx
     cb0:	05000000 	streq	r0, [r0, #-0]
     cb4:	0022c402 	eoreq	ip, r2, r2, lsl #8
     cb8:	01310320 	teqeq	r1, r0, lsr #6
     cbc:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     cc0:	2f3d672f 	svccs	0x003d672f
     cc4:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     cc8:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     ccc:	2f3f672f 	svccs	0x003f672f
     cd0:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     cd4:	3e672f3d 	mcrcc	15, 3, r2, cr7, cr13, {1}
     cd8:	2f3d672f 	svccs	0x003d672f
     cdc:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     ce0:	144d023e 	strbne	r0, [sp], #-574	; 0xfffffdc2
     ce4:	3e2f4b4c 	vnmulcc.f64	d4, d15, d12
     ce8:	5a59594b 	bpl	165721c <startup-0x1e9a8de4>
     cec:	93919191 	orrsls	r9, r1, #1073741860	; 0x40000024
     cf0:	3d3d3d3e 	ldccc	13, cr3, [sp, #-248]!	; 0xffffff08
     cf4:	002f023d 	eoreq	r0, pc, sp, lsr r2	; <UNPREDICTABLE>
     cf8:	034e0101 	movteq	r0, #57601	; 0xe101
     cfc:	00020000 	andeq	r0, r2, r0
     d00:	0000007c 	andeq	r0, r0, ip, ror r0
     d04:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     d08:	0101000d 	tsteq	r1, sp
     d0c:	00000101 	andeq	r0, r0, r1, lsl #2
     d10:	00000100 	andeq	r0, r0, r0, lsl #2
     d14:	2f3a4301 	svccs	0x003a4301
     d18:	2f706f6d 	svccs	0x00706f6d
     d1c:	6f4d2f63 	svcvs	0x004d2f63
     d20:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     d24:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     d28:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     d2c:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     d30:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     d34:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     d38:	0000432f 	andeq	r4, r0, pc, lsr #6
     d3c:	70617267 	rsbvc	r7, r1, r7, ror #4
     d40:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
     d44:	0100632e 	tsteq	r0, lr, lsr #6
     d48:	70730000 	rsbsvc	r0, r3, r0
     d4c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     d50:	0100682e 	tsteq	r0, lr, lsr #16
     d54:	6d690000 	stclvs	0, cr0, [r9, #-0]
     d58:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
     d5c:	00010068 	andeq	r0, r1, r8, rrx
     d60:	6d616700 	stclvs	7, cr6, [r1, #-0]
     d64:	6a626f65 	bvs	189cb00 <startup-0x1e763500>
     d68:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
     d6c:	00010068 	andeq	r0, r1, r8, rrx
     d70:	61726700 	cmnvs	r2, r0, lsl #14
     d74:	63696870 	cmnvs	r9, #112, 16	; 0x700000
     d78:	00682e73 	rsbeq	r2, r8, r3, ror lr
     d7c:	00000001 	andeq	r0, r0, r1
     d80:	70020500 	andvc	r0, r2, r0, lsl #10
     d84:	15200025 	strne	r0, [r0, #-37]!	; 0xffffffdb
     d88:	3d3d3d30 	ldccc	13, cr3, [sp, #-192]!	; 0xffffff40
     d8c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     d90:	06200601 	strteq	r0, [r0], -r1, lsl #12
     d94:	30a03d67 	adccc	r3, r0, r7, ror #26
     d98:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     d9c:	01040200 	mrseq	r0, R12_usr
     da0:	67062006 	strvs	r2, [r6, -r6]
     da4:	214ba03d 	cmpcs	fp, sp, lsr r0
     da8:	2a2f2f2f 	bcs	bcca6c <startup-0x1f433594>
     dac:	214f4c5e 	cmpcs	pc, lr, asr ip	; <UNPREDICTABLE>
     db0:	09035b57 	stmdbeq	r3, {r0, r1, r2, r4, r6, r8, r9, fp, ip, lr}
     db4:	02004c4a 	andeq	r4, r0, #18944	; 0x4a00
     db8:	003d0304 	eorseq	r0, sp, r4, lsl #6
     dbc:	57030402 	strpl	r0, [r3, -r2, lsl #8]
     dc0:	01040200 	mrseq	r0, R12_usr
     dc4:	4c063c06 	stcmi	12, cr3, [r6], {6}
     dc8:	674b2f67 	strbvs	r2, [fp, -r7, ror #30]
     dcc:	4b4b4b2f 	blmi	12d3a90 <startup-0x1ed2c570>
     dd0:	915968a1 	cmpls	r9, r1, lsr #17
     dd4:	68765983 	ldmdavs	r6!, {r0, r1, r7, r8, fp, ip, lr}^
     dd8:	5983d759 	stmibpl	r3, {r0, r3, r4, r6, r8, r9, sl, ip, lr, pc}
     ddc:	12036767 	andne	r6, r3, #27000832	; 0x19c0000
     de0:	206e0374 	rsbcs	r0, lr, r4, ror r3
     de4:	034a1203 	movteq	r1, #41475	; 0xa203
     de8:	3d3d2070 	ldccc	0, cr2, [sp, #-448]!	; 0xfffffe40
     dec:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
     df0:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
     df4:	3e4c223d 	mcrcc	2, 2, r2, cr12, cr13, {1}
     df8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     dfc:	752f3d31 	strvc	r3, [pc, #-3377]!	; d3 <startup-0x1fffff2d>
     e00:	7903313d 	stmdbvc	r3, {r0, r2, r3, r4, r5, r8, ip, sp}
     e04:	3d23274a 	stccc	7, cr2, [r3, #-296]!	; 0xfffffed8
     e08:	3d3d67bc 	ldccc	7, cr6, [sp, #-752]!	; 0xfffffd10
     e0c:	2f593d3d 	svccs	0x00593d3d
     e10:	3d592f3d 	ldclcc	15, cr2, [r9, #-244]	; 0xffffff0c
     e14:	303d4b3e 	eorscc	r4, sp, lr, lsr fp
     e18:	3d313d4b 	ldccc	13, cr3, [r1, #-300]!	; 0xfffffed4
     e1c:	595967bc 	ldmdbpl	r9, {r2, r3, r4, r5, r7, r8, r9, sl, sp, lr}^
     e20:	594b915a 	stmdbpl	fp, {r1, r3, r4, r6, r8, ip, pc}^
     e24:	3e2f3d2f 	cdpcc	13, 2, cr3, cr15, cr15, {1}
     e28:	59303d59 	ldmdbpl	r0!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
     e2c:	3d3d313d 	ldfccs	f3, [sp, #-244]!	; 0xffffff0c
     e30:	3d91673d 	ldccc	7, cr6, [r1, #244]	; 0xf4
     e34:	833d3d59 	teqhi	sp, #5696	; 0x1640
     e38:	593d914b 	ldmdbpl	sp!, {r0, r1, r3, r6, r8, ip, pc}
     e3c:	4c833d3d 	stcmi	13, cr3, [r3], {61}	; 0x3d
     e40:	3d3e3d2f 	ldccc	13, cr3, [lr, #-188]!	; 0xffffff44
     e44:	3d3e3d3d 	ldccc	13, cr3, [lr, #-244]!	; 0xffffff0c
     e48:	4b4b3e3d 	blmi	12d0744 <startup-0x1ed2f8bc>
     e4c:	3d4b4b4b 	vstrcc	d20, [fp, #-300]	; 0xfffffed4
     e50:	9f4b3e3d 	svcls	0x004b3e3d
     e54:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
     e58:	02004b03 	andeq	r4, r0, #3072	; 0xc00
     e5c:	00490304 	subeq	r0, r9, r4, lsl #6
     e60:	06010402 	streq	r0, [r1], -r2, lsl #8
     e64:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
     e68:	00460602 	subeq	r0, r6, r2, lsl #12
     e6c:	06010402 	streq	r0, [r1], -r2, lsl #8
     e70:	4d520658 	ldclmi	6, cr0, [r2, #-352]	; 0xfffffea0
     e74:	02002f76 	andeq	r2, r0, #472	; 0x1d8
     e78:	4a060104 	bmi	181290 <startup-0x1fe7ed70>
     e7c:	02040200 	andeq	r0, r4, #0, 4
     e80:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
     e84:	4c064a03 			; <UNDEFINED> instruction: 0x4c064a03
     e88:	3d3d1308 	ldccc	3, cr1, [sp, #-32]!	; 0xffffffe0
     e8c:	763dbc3e 			; <UNDEFINED> instruction: 0x763dbc3e
     e90:	1fd93d76 	svcne	0x00d93d76
     e94:	d93d23d7 	ldmdble	sp!, {r0, r1, r2, r4, r6, r7, r8, r9, sp}
     e98:	3d23d71f 	stccc	7, cr13, [r3, #-124]!	; 0xffffff84
     e9c:	03d71fd9 	bicseq	r1, r7, #868	; 0x364
     ea0:	23032e61 	movwcs	r2, #15969	; 0x3e61
     ea4:	0069af20 	rsbeq	sl, r9, r0, lsr #30
     ea8:	06010402 	streq	r0, [r1], -r2, lsl #8
     eac:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
     eb0:	02004a02 	andeq	r4, r0, #8192	; 0x2000
     eb4:	064a0304 	strbeq	r0, [sl], -r4, lsl #6
     eb8:	1308754b 	movwne	r7, #34123	; 0x854b
     ebc:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
     ec0:	5b595959 	blpl	165742c <startup-0x1e9a8bd4>
     ec4:	4b3d763d 	blmi	f5e7c0 <startup-0x1f0a1840>
     ec8:	c93e4b4c 	ldmdbgt	lr!, {r2, r3, r6, r8, r9, fp, lr}
     ecc:	3dca9fd8 	stclcc	15, cr9, [sl, #864]	; 0x360
     ed0:	5e03a0ae 	cdppl	0, 0, cr10, cr3, cr14, {5}
     ed4:	202303ac 	eorcs	r0, r3, ip, lsr #7
     ed8:	592f4c84 	stmdbpl	pc!, {r2, r7, sl, fp, lr}	; <UNPREDICTABLE>
     edc:	01040200 	mrseq	r0, R12_usr
     ee0:	02005806 	andeq	r5, r0, #393216	; 0x60000
     ee4:	002e0204 	eoreq	r0, lr, r4, lsl #4
     ee8:	20040402 	andcs	r0, r4, r2, lsl #8
     eec:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     ef0:	d7593d06 	ldrble	r3, [r9, -r6, lsl #26]
     ef4:	04020075 	streq	r0, [r2], #-117	; 0xffffff8b
     ef8:	02005903 	andeq	r5, r0, #49152	; 0xc000
     efc:	00ab0304 	adceq	r0, fp, r4, lsl #6
     f00:	06010402 	streq	r0, [r1], -r2, lsl #8
     f04:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
     f08:	00550602 	subseq	r0, r5, r2, lsl #12
     f0c:	06010402 	streq	r0, [r1], -r2, lsl #8
     f10:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
     f14:	00560602 	subseq	r0, r6, r2, lsl #12
     f18:	06010402 	streq	r0, [r1], -r2, lsl #8
     f1c:	0a030674 	beq	c28f4 <startup-0x1ff3d70c>
     f20:	59765258 	ldmdbpl	r6!, {r3, r4, r6, r9, ip, lr}^
     f24:	3d3d595a 			; <UNDEFINED> instruction: 0x3d3d595a
     f28:	e6913dbb 			; <UNDEFINED> instruction: 0xe6913dbb
     f2c:	0067083d 	rsbeq	r0, r7, sp, lsr r8
     f30:	03020402 	movweq	r0, #9218	; 0x2402
     f34:	0066087a 	rsbeq	r0, r6, sl, ror r8
     f38:	06010402 	streq	r0, [r1], -r2, lsl #8
     f3c:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
     f40:	003a0602 	eorseq	r0, sl, r2, lsl #12
     f44:	06010402 	streq	r0, [r1], -r2, lsl #8
     f48:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
     f4c:	00490602 	subeq	r0, r9, r2, lsl #12
     f50:	06010402 	streq	r0, [r1], -r2, lsl #8
     f54:	0e03063c 	mcreq	6, 0, r0, cr3, cr12, {1}
     f58:	3d774c58 	ldclcc	12, cr4, [r7, #-352]!	; 0xfffffea0
     f5c:	03040200 	movweq	r0, #16896	; 0x4200
     f60:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     f64:	02006503 	andeq	r6, r0, #12582912	; 0xc00000
     f68:	3c060104 	stfccs	f0, [r6], {4}
     f6c:	02040200 	andeq	r0, r4, #0, 4
     f70:	02006506 	andeq	r6, r0, #25165824	; 0x1800000
     f74:	3c060104 	stfccs	f0, [r6], {4}
     f78:	774c6b06 	strbvc	r6, [ip, -r6, lsl #22]
     f7c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     f80:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
     f84:	00650304 	rsbeq	r0, r5, r4, lsl #6
     f88:	06010402 	streq	r0, [r1], -r2, lsl #8
     f8c:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
     f90:	00650602 	rsbeq	r0, r5, r2, lsl #12
     f94:	06010402 	streq	r0, [r1], -r2, lsl #8
     f98:	4d6b063c 	stclmi	6, cr0, [fp, #-240]!	; 0xffffff10
     f9c:	2f2f2f3d 	svccs	0x002f2f3d
     fa0:	00693030 	rsbeq	r3, r9, r0, lsr r0
     fa4:	30010402 	andcc	r0, r1, r2, lsl #8
     fa8:	01040200 	mrseq	r0, R12_usr
     fac:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
     fb0:	02006701 	andeq	r6, r0, #262144	; 0x40000
     fb4:	00c90104 	sbceq	r0, r9, r4, lsl #2
     fb8:	08010402 	stmdaeq	r1, {r1, sl}
     fbc:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
     fc0:	02004b01 	andeq	r4, r0, #1024	; 0x400
     fc4:	002f0104 	eoreq	r0, pc, r4, lsl #2
     fc8:	68010402 	stmdavs	r1, {r1, sl}
     fcc:	01040200 	mrseq	r0, R12_usr
     fd0:	040200c9 	streq	r0, [r2], #-201	; 0xffffff37
     fd4:	00130801 	andseq	r0, r3, r1, lsl #16
     fd8:	92010402 	andls	r0, r1, #33554432	; 0x2000000
     fdc:	01040200 	mrseq	r0, R12_usr
     fe0:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
     fe4:	02003e01 	andeq	r3, r0, #1, 28
     fe8:	002f0104 	eoreq	r0, pc, r4, lsl #2
     fec:	67010402 	strvs	r0, [r1, -r2, lsl #8]
     ff0:	01040200 	mrseq	r0, R12_usr
     ff4:	02001308 	andeq	r1, r0, #8, 6	; 0x20000000
     ff8:	004c0104 	subeq	r0, ip, r4, lsl #2
     ffc:	03010402 	movweq	r0, #5122	; 0x1402
    1000:	19033c6c 	stmdbne	r3, {r2, r3, r5, r6, sl, fp, ip, sp}
    1004:	02003e3c 	andeq	r3, r0, #60, 28	; 0x3c0
    1008:	003d0304 	eorseq	r0, sp, r4, lsl #6
    100c:	08030402 	stmdaeq	r3, {r1, sl}
    1010:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
    1014:	00910803 	addseq	r0, r1, r3, lsl #16
    1018:	08030402 	stmdaeq	r3, {r1, sl}
    101c:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
    1020:	00460803 	subeq	r0, r6, r3, lsl #16
    1024:	06010402 	streq	r0, [r1], -r2, lsl #8
    1028:	0850063c 	ldmdaeq	r0, {r2, r3, r4, r5, r9, sl}^
    102c:	083d4b3e 	ldmdaeq	sp!, {r1, r2, r3, r4, r5, r8, r9, fp, lr}
    1030:	08210821 	stmdaeq	r1!, {r0, r5, fp}
    1034:	304b4d21 	subcc	r4, fp, r1, lsr #26
    1038:	4b3e4b21 	blmi	f93cc4 <startup-0x1f06c33c>
    103c:	4b3e4b3e 	blmi	f93d3c <startup-0x1f06c2c4>
    1040:	033c7503 	teqeq	ip, #12582912	; 0xc00000
    1044:	0230580e 	eorseq	r5, r0, #917504	; 0xe0000
    1048:	0101000b 	tsteq	r1, fp
    104c:	00000072 	andeq	r0, r0, r2, ror r0
    1050:	005b0002 	subseq	r0, fp, r2
    1054:	01020000 	mrseq	r0, (UNDEF: 2)
    1058:	000d0efb 	strdeq	r0, [sp], -fp
    105c:	01010101 	tsteq	r1, r1, lsl #2
    1060:	01000000 	mrseq	r0, (UNDEF: 0)
    1064:	43010000 	movwmi	r0, #4096	; 0x1000
    1068:	6f6d2f3a 	svcvs	0x006d2f3a
    106c:	2f632f70 	svccs	0x00632f70
    1070:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    1074:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    1078:	6f697461 	svcvs	0x00697461
    107c:	2f72656e 	svccs	0x0072656e
    1080:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    1084:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    1088:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    108c:	6d690000 	stclvs	0, cr0, [r9, #-0]
    1090:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
    1094:	00010063 	andeq	r0, r1, r3, rrx
    1098:	72707300 	rsbsvc	r7, r0, #0, 6
    109c:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
    10a0:	00010068 	andeq	r0, r1, r8, rrx
    10a4:	616d6900 	cmnvs	sp, r0, lsl #18
    10a8:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
    10ac:	00000100 	andeq	r0, r0, r0, lsl #2
    10b0:	02050000 	andeq	r0, r5, #0
    10b4:	200033b4 			; <UNDEFINED> instruction: 0x200033b4
    10b8:	3d3d7514 	cfldr32cc	mvfx7, [sp, #-80]!	; 0xffffffb0
    10bc:	0004023d 	andeq	r0, r4, sp, lsr r2
    10c0:	00680101 	rsbeq	r0, r8, r1, lsl #2
    10c4:	00020000 	andeq	r0, r2, r0
    10c8:	00000051 	andeq	r0, r0, r1, asr r0
    10cc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    10d0:	0101000d 	tsteq	r1, sp
    10d4:	00000101 	andeq	r0, r0, r1, lsl #2
    10d8:	00000100 	andeq	r0, r0, r0, lsl #2
    10dc:	2f3a4301 	svccs	0x003a4301
    10e0:	2f706f6d 	svccs	0x00706f6d
    10e4:	6f4d2f63 	svcvs	0x004d2f63
    10e8:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    10ec:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    10f0:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    10f4:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    10f8:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    10fc:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1100:	0000432f 	andeq	r4, r0, pc, lsr #6
    1104:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
    1108:	632e6574 			; <UNDEFINED> instruction: 0x632e6574
    110c:	00000100 	andeq	r0, r0, r0, lsl #2
    1110:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
    1114:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
    1118:	00000100 	andeq	r0, r0, r0, lsl #2
    111c:	02050000 	andeq	r0, r5, #0
    1120:	200033dc 	ldrdcs	r3, [r0], -ip
    1124:	3d3d7515 	cfldr32cc	mvfx7, [sp, #-84]!	; 0xffffffac
    1128:	0004023d 	andeq	r0, r4, sp, lsr r2
    112c:	006c0101 	rsbeq	r0, ip, r1, lsl #2
    1130:	00020000 	andeq	r0, r2, r0
    1134:	0000004d 	andeq	r0, r0, sp, asr #32
    1138:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    113c:	0101000d 	tsteq	r1, sp
    1140:	00000101 	andeq	r0, r0, r1, lsl #2
    1144:	00000100 	andeq	r0, r0, r0, lsl #2
    1148:	2f3a4301 	svccs	0x003a4301
    114c:	2f706f6d 	svccs	0x00706f6d
    1150:	6f4d2f63 	svcvs	0x004d2f63
    1154:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    1158:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    115c:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    1160:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1164:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    1168:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    116c:	0000432f 	andeq	r4, r0, pc, lsr #6
    1170:	6f697067 	svcvs	0x00697067
    1174:	0100632e 	tsteq	r0, lr, lsr #6
    1178:	70670000 	rsbvc	r0, r7, r0
    117c:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    1180:	00000100 	andeq	r0, r0, r0, lsl #2
    1184:	02050000 	andeq	r0, r5, #0
    1188:	20003404 	andcs	r3, r0, r4, lsl #8
    118c:	763d2f15 	shadd16vc	r2, sp, r5
    1190:	693d592f 	ldmdbvs	sp!, {r0, r1, r2, r3, r5, r8, fp, ip, lr}
    1194:	3091674b 	addscc	r6, r1, fp, asr #14
    1198:	00040222 	andeq	r0, r4, r2, lsr #4
    119c:	015a0101 	cmpeq	sl, r1, lsl #2
    11a0:	00020000 	andeq	r0, r2, r0
    11a4:	00000081 	andeq	r0, r0, r1, lsl #1
    11a8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    11ac:	0101000d 	tsteq	r1, sp
    11b0:	00000101 	andeq	r0, r0, r1, lsl #2
    11b4:	00000100 	andeq	r0, r0, r0, lsl #2
    11b8:	2f3a4301 	svccs	0x003a4301
    11bc:	2f706f6d 	svccs	0x00706f6d
    11c0:	6f4d2f63 	svcvs	0x004d2f63
    11c4:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    11c8:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    11cc:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    11d0:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    11d4:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    11d8:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    11dc:	0000432f 	andeq	r4, r0, pc, lsr #6
    11e0:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    11e4:	69645f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    11e8:	616c7073 	smcvs	50947	; 0xc703
    11ec:	00632e79 	rsbeq	r2, r3, r9, ror lr
    11f0:	73000001 	movwvc	r0, #1
    11f4:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
    11f8:	00682e65 	rsbeq	r2, r8, r5, ror #28
    11fc:	69000001 	stmdbvs	r0, {r0}
    1200:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1204:	0100682e 	tsteq	r0, lr, lsr #16
    1208:	61670000 	cmnvs	r7, r0
    120c:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
    1210:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
    1214:	0100682e 	tsteq	r0, lr, lsr #16
    1218:	72670000 	rsbvc	r0, r7, #0
    121c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
    1220:	682e7363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, ip, sp, lr}
    1224:	00000100 	andeq	r0, r0, r0, lsl #2
    1228:	02050000 	andeq	r0, r5, #0
    122c:	20003470 	andcs	r3, r0, r0, ror r4
    1230:	69012e03 	stmdbvs	r1, {r0, r1, r9, sl, fp, sp}
    1234:	6859bb59 	ldmdavs	r9, {r0, r3, r4, r6, r8, r9, fp, ip, sp, pc}^
    1238:	13085969 	movwne	r5, #35177	; 0x8969
    123c:	3d677659 	stclcc	6, cr7, [r7, #-356]!	; 0xfffffe9c
    1240:	674c593d 	smlaldxvs	r5, ip, sp, r9
    1244:	4c593d3d 	mrrcmi	13, 3, r3, r9, cr13
    1248:	3d3d673e 	ldccc	7, cr6, [sp, #-248]!	; 0xffffff08
    124c:	2f67675a 	svccs	0x0067675a
    1250:	3d673e84 	stclcc	14, cr3, [r7, #-528]!	; 0xfffffdf0
    1254:	67675a3d 			; <UNDEFINED> instruction: 0x67675a3d
    1258:	3d67842f 	cfstrdcc	mvd8, [r7, #-188]!	; 0xffffff44
    125c:	683d2f4b 	ldmdavs	sp!, {r0, r1, r3, r6, r8, r9, sl, fp, sp}
    1260:	2f2f3d3e 	svccs	0x002f3d3e
    1264:	762f3d4b 	strtvc	r3, [pc], -fp, asr #26
    1268:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    126c:	06200601 	strteq	r0, [r0], -r1, lsl #12
    1270:	3d593d83 	ldclcc	13, cr3, [r9, #-524]	; 0xfffffdf4
    1274:	4b67914c 	blmi	19e57ac <startup-0x1e61a854>
    1278:	304c9f76 	subcc	r9, ip, r6, ror pc
    127c:	01040200 	mrseq	r0, R12_usr
    1280:	83062006 	movwhi	r2, #24582	; 0x6006
    1284:	003f3d3d 	eorseq	r3, pc, sp, lsr sp	; <UNPREDICTABLE>
    1288:	06010402 	streq	r0, [r1], -r2, lsl #8
    128c:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
    1290:	02003f3d 	andeq	r3, r0, #61, 30	; 0xf4
    1294:	20060104 	andcs	r0, r6, r4, lsl #2
    1298:	3d3d8306 	ldccc	3, cr8, [sp, #-24]!	; 0xffffffe8
    129c:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
    12a0:	06200601 	strteq	r0, [r0], -r1, lsl #12
    12a4:	3f3d3d83 	svccc	0x003d3d83
    12a8:	843d343e 	ldrthi	r3, [sp], #-1086	; 0xfffffbc2
    12ac:	3e2f2f2f 	cdpcc	15, 2, cr2, cr15, cr15, {1}
    12b0:	4b2f843e 	blmi	be23b0 <startup-0x1f41dc50>
    12b4:	2f4d7321 	svccs	0x004d7321
    12b8:	4d73214b 	ldfmie	f2, [r3, #-300]!	; 0xfffffed4
    12bc:	4b305968 	blmi	c17864 <startup-0x1f3e879c>
    12c0:	4b4d7321 	blmi	135df4c <startup-0x1eca20b4>
    12c4:	4b4e7321 	blmi	139df50 <startup-0x1ec620b0>
    12c8:	4b30754c 	blmi	c1e800 <startup-0x1f3e1800>
    12cc:	73213d2f 			; <UNDEFINED> instruction: 0x73213d2f
    12d0:	01040200 	mrseq	r0, R12_usr
    12d4:	6b064a06 	blvs	193af4 <startup-0x1fe6c50c>
    12d8:	213d2f4b 	teqcs	sp, fp, asr #30
    12dc:	04020073 	streq	r0, [r2], #-115	; 0xffffff8d
    12e0:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    12e4:	3e4e4b6b 	vmlscc.f64	d20, d14, d27
    12e8:	2f2f6875 	svccs	0x002f6875
    12ec:	73213d4b 			; <UNDEFINED> instruction: 0x73213d4b
    12f0:	212f4b4d 			; <UNDEFINED> instruction: 0x212f4b4d
    12f4:	02214d73 	eoreq	r4, r1, #7360	; 0x1cc0
    12f8:	01010008 	tsteq	r1, r8
    12fc:	00000076 	andeq	r0, r0, r6, ror r0
    1300:	00570002 	subseq	r0, r7, r2
    1304:	01020000 	mrseq	r0, (UNDEF: 2)
    1308:	000d0efb 	strdeq	r0, [sp], -fp
    130c:	01010101 	tsteq	r1, r1, lsl #2
    1310:	01000000 	mrseq	r0, (UNDEF: 0)
    1314:	43010000 	movwmi	r0, #4096	; 0x1000
    1318:	6f6d2f3a 	svcvs	0x006d2f3a
    131c:	2f632f70 	svccs	0x00632f70
    1320:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    1324:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    1328:	6f697461 	svcvs	0x00697461
    132c:	2f72656e 	svccs	0x0072656e
    1330:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    1334:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    1338:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    133c:	6c730000 	ldclvs	0, cr0, [r3], #-0
    1340:	745f776f 	ldrbvc	r7, [pc], #-1903	; 1348 <startup-0x1fffecb8>
    1344:	2e747865 	cdpcs	8, 7, cr7, cr4, cr5, {3}
    1348:	00010063 	andeq	r0, r1, r3, rrx
    134c:	6f6c7300 	svcvs	0x006c7300
    1350:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
    1354:	682e7478 	stmdavs	lr!, {r3, r4, r5, r6, sl, ip, sp, lr}
    1358:	00000100 	andeq	r0, r0, r0, lsl #2
    135c:	02050000 	andeq	r0, r5, #0
    1360:	20003990 	mulcs	r0, r0, r9
    1364:	c99f5915 	ldmibgt	pc, {r0, r2, r4, r8, fp, ip, lr}	; <UNPREDICTABLE>
    1368:	754c5984 	strbvc	r5, [ip, #-2436]	; 0xfffff67c
    136c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    1370:	0007023d 	andeq	r0, r7, sp, lsr r2
    1374:	00d60101 	sbcseq	r0, r6, r1, lsl #2
    1378:	00020000 	andeq	r0, r2, r0
    137c:	000000ab 	andeq	r0, r0, fp, lsr #1
    1380:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1384:	0101000d 	tsteq	r1, sp
    1388:	00000101 	andeq	r0, r0, r1, lsl #2
    138c:	00000100 	andeq	r0, r0, r0, lsl #2
    1390:	2f3a4301 	svccs	0x003a4301
    1394:	2f706f6d 	svccs	0x00706f6d
    1398:	6f4d2f63 	svcvs	0x004d2f63
    139c:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    13a0:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    13a4:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    13a8:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    13ac:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    13b0:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    13b4:	0000432f 	andeq	r4, r0, pc, lsr #6
    13b8:	6f646e69 	svcvs	0x00646e69
    13bc:	2e73726f 	cdpcs	2, 7, cr7, cr3, cr15, {3}
    13c0:	00010063 	andeq	r0, r1, r3, rrx
    13c4:	72707300 	rsbsvc	r7, r0, #0, 6
    13c8:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
    13cc:	00010068 	andeq	r0, r1, r8, rrx
    13d0:	616d6900 	cmnvs	sp, r0, lsl #18
    13d4:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
    13d8:	00000100 	andeq	r0, r0, r0, lsl #2
    13dc:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
    13e0:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
    13e4:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
    13e8:	00000100 	andeq	r0, r0, r0, lsl #2
    13ec:	6f646e69 	svcvs	0x00646e69
    13f0:	5f73726f 	svcpl	0x0073726f
    13f4:	63616c62 	cmnvs	r1, #25088	; 0x6200
    13f8:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
    13fc:	0001006d 	andeq	r0, r1, sp, rrx
    1400:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1404:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1408:	6172675f 	cmnvs	r2, pc, asr r7
    140c:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
    1410:	0001006d 	andeq	r0, r1, sp, rrx
    1414:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1418:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    141c:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
    1420:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
    1424:	01006d62 	tsteq	r0, r2, ror #26
    1428:	00000000 	andeq	r0, r0, r0
    142c:	3a240205 	bcc	901c48 <startup-0x1f6fe3b8>
    1430:	13032000 	movwne	r2, #12288	; 0x3000
    1434:	672f3e01 	strvs	r3, [pc, -r1, lsl #28]!
    1438:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
    143c:	083e672f 	ldmdaeq	lr!, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}
    1440:	2f4b4c5a 	svccs	0x004b4c5a
    1444:	3e934c3e 	mrccc	12, 4, r4, cr3, cr14, {1}
    1448:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    144c:	01010008 	tsteq	r1, r8
    1450:	000000da 	ldrdeq	r0, [r0], -sl
    1454:	00af0002 	adceq	r0, pc, r2
    1458:	01020000 	mrseq	r0, (UNDEF: 2)
    145c:	000d0efb 	strdeq	r0, [sp], -fp
    1460:	01010101 	tsteq	r1, r1, lsl #2
    1464:	01000000 	mrseq	r0, (UNDEF: 0)
    1468:	43010000 	movwmi	r0, #4096	; 0x1000
    146c:	6f6d2f3a 	svcvs	0x006d2f3a
    1470:	2f632f70 	svccs	0x00632f70
    1474:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    1478:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    147c:	6f697461 	svcvs	0x00697461
    1480:	2f72656e 	svccs	0x0072656e
    1484:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    1488:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    148c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    1490:	6e690000 	cdpvs	0, 6, cr0, cr9, cr0, {0}
    1494:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1498:	632e3273 			; <UNDEFINED> instruction: 0x632e3273
    149c:	00000100 	andeq	r0, r0, r0, lsl #2
    14a0:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
    14a4:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
    14a8:	00000100 	andeq	r0, r0, r0, lsl #2
    14ac:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
    14b0:	00682e65 	rsbeq	r2, r8, r5, ror #28
    14b4:	67000001 	strvs	r0, [r0, -r1]
    14b8:	6f656d61 	svcvs	0x00656d61
    14bc:	63656a62 	cmnvs	r5, #401408	; 0x62000
    14c0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    14c4:	69000001 	stmdbvs	r0, {r0}
    14c8:	6f6f646e 	svcvs	0x006f646e
    14cc:	5f327372 	svcpl	0x00327372
    14d0:	63616c62 	cmnvs	r1, #25088	; 0x6200
    14d4:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
    14d8:	0001006d 	andeq	r0, r1, sp, rrx
    14dc:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    14e0:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    14e4:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
    14e8:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
    14ec:	01006d62 	tsteq	r0, r2, ror #26
    14f0:	6e690000 	cdpvs	0, 6, cr0, cr9, cr0, {0}
    14f4:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    14f8:	6c5f3273 	lfmvs	f3, 2, [pc], {115}	; 0x73
    14fc:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1500:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
    1504:	00000100 	andeq	r0, r0, r0, lsl #2
    1508:	02050000 	andeq	r0, r5, #0
    150c:	20003b0c 	andcs	r3, r0, ip, lsl #22
    1510:	3e011303 	cdpcc	3, 0, cr1, cr1, cr3, {0}
    1514:	2f3d672f 	svccs	0x003d672f
    1518:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
    151c:	4c5a083e 	mrrcmi	8, 3, r0, sl, cr14
    1520:	4c3e2f4b 	ldcmi	15, cr2, [lr], #-300	; 0xfffffed4
    1524:	3d3d3e93 	ldccc	14, cr3, [sp, #-588]!	; 0xfffffdb4
    1528:	00083d3d 	andeq	r3, r8, sp, lsr sp
    152c:	00d20101 	sbcseq	r0, r2, r1, lsl #2
    1530:	00020000 	andeq	r0, r2, r0
    1534:	000000a7 	andeq	r0, r0, r7, lsr #1
    1538:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    153c:	0101000d 	tsteq	r1, sp
    1540:	00000101 	andeq	r0, r0, r1, lsl #2
    1544:	00000100 	andeq	r0, r0, r0, lsl #2
    1548:	2f3a4301 	svccs	0x003a4301
    154c:	2f706f6d 	svccs	0x00706f6d
    1550:	6f4d2f63 	svcvs	0x004d2f63
    1554:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    1558:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    155c:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    1560:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1564:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    1568:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    156c:	0000432f 	andeq	r4, r0, pc, lsr #6
    1570:	706f7274 	rsbvc	r7, pc, r4, ror r2	; <UNPREDICTABLE>
    1574:	632e7968 			; <UNDEFINED> instruction: 0x632e7968
    1578:	00000100 	andeq	r0, r0, r0, lsl #2
    157c:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
    1580:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
    1584:	00000100 	andeq	r0, r0, r0, lsl #2
    1588:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
    158c:	00682e65 	rsbeq	r2, r8, r5, ror #28
    1590:	67000001 	strvs	r0, [r0, -r1]
    1594:	6f656d61 	svcvs	0x00656d61
    1598:	63656a62 	cmnvs	r5, #401408	; 0x62000
    159c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    15a0:	74000001 	strvc	r0, [r0], #-1
    15a4:	68706f72 	ldmdavs	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    15a8:	6c625f79 	stclvs	15, cr5, [r2], #-484	; 0xfffffe1c
    15ac:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
    15b0:	006d6278 	rsbeq	r6, sp, r8, ror r2
    15b4:	74000001 	strvc	r0, [r0], #-1
    15b8:	68706f72 	ldmdavs	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    15bc:	72675f79 	rsbvc	r5, r7, #484	; 0x1e4
    15c0:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
    15c4:	01006d62 	tsteq	r0, r2, ror #26
    15c8:	72740000 	rsbsvc	r0, r4, #0
    15cc:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    15d0:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
    15d4:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
    15d8:	01006d62 	tsteq	r0, r2, ror #26
    15dc:	00000000 	andeq	r0, r0, r0
    15e0:	3bf40205 	blcc	ffd01dfc <firstTime.4040+0xdfcf7940>
    15e4:	13032000 	movwne	r2, #12288	; 0x3000
    15e8:	672f3e01 	strvs	r3, [pc, -r1, lsl #28]!
    15ec:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
    15f0:	083e672f 	ldmdaeq	lr!, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}
    15f4:	2f4b4c5a 	svccs	0x004b4c5a
    15f8:	3e934c3e 	mrccc	12, 4, r4, cr3, cr14, {1}
    15fc:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    1600:	01010008 	tsteq	r1, r8

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
       4:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
       8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
       c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
      10:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
      14:	5f336572 	svcpl	0x00336572
      18:	6f646e69 	svcvs	0x00646e69
      1c:	0073726f 	rsbseq	r7, r3, pc, ror #4
      20:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
      24:	616d4974 	smcvs	54420	; 0xd494
      28:	67006567 	strvs	r6, [r0, -r7, ror #10]
      2c:	49796172 	ldmdbmi	r9!, {r1, r4, r5, r6, r8, sp, lr}^
      30:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
      34:	73616300 	cmnvc	r1, #0, 6
      38:	5f656c74 	svcpl	0x00656c74
      3c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
      40:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
      44:	6c700073 	ldclvs	0, cr0, [r0], #-460	; 0xfffffe34
      48:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
      4c:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
      50:	726b5f74 	rsbvc	r5, fp, #116, 30	; 0x1d0
      54:	61670061 	cmnvs	r7, r1, rrx
      58:	6f5f656d 	svcvs	0x005f656d
      5c:	00726576 	rsbseq	r6, r2, r6, ror r5
      60:	72665f6e 	rsbvc	r5, r6, #440	; 0x1b8
      64:	73656d61 	cmnvc	r5, #6208	; 0x1840
      68:	73616300 	cmnvc	r1, #0, 6
      6c:	4c656c74 	stclmi	12, cr6, [r5], #-464	; 0xfffffe30
      70:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
      74:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
      78:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
      7c:	74003031 	strvc	r3, [r0], #-49	; 0xffffffcf
      80:	43706d65 	cmnmi	r0, #6464	; 0x1940
      84:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
      88:	616c4265 	cmnvs	ip, r5, ror #4
      8c:	47006b63 	strmi	r6, [r0, -r3, ror #22]
      90:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
      94:	36203939 			; <UNDEFINED> instruction: 0x36203939
      98:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
      9c:	31303220 	teqcc	r0, r0, lsr #4
      a0:	31323037 	teqcc	r2, r7, lsr r0
      a4:	72282035 	eorvc	r2, r8, #53	; 0x35
      a8:	61656c65 	cmnvs	r5, r5, ror #24
      ac:	20296573 	eorcs	r6, r9, r3, ror r5
      b0:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
      b4:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
      b8:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
      bc:	2d362d64 	ldccs	13, cr2, [r6, #-400]!	; 0xfffffe70
      c0:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
      c4:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
      c8:	73697665 	cmnvc	r9, #105906176	; 0x6500000
      cc:	206e6f69 	rsbcs	r6, lr, r9, ror #30
      d0:	35353432 	ldrcc	r3, [r5, #-1074]!	; 0xfffffbce
      d4:	205d3231 	subscs	r3, sp, r1, lsr r2
      d8:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
      dc:	20626d75 	rsbcs	r6, r2, r5, ror sp
      e0:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
      e4:	613d6863 	teqvs	sp, r3, ror #16
      e8:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
      ec:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
      f0:	6f6c666d 	svcvs	0x006c666d
      f4:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
      f8:	733d6962 	teqvc	sp, #1605632	; 0x188000
      fc:	2074666f 	rsbscs	r6, r4, pc, ror #12
     100:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
     104:	20626d75 	rsbcs	r6, r2, r5, ror sp
     108:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
     10c:	613d6863 	teqvs	sp, r3, ror #16
     110:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
     114:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
     118:	4f2d2067 	svcmi	0x002d2067
     11c:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
     120:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
     124:	6d003939 	vstrvs.16	s6, [r0, #-114]	; 0xffffff8e	; <UNPREDICTABLE>
     128:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     12c:	69007265 	stmdbvs	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     130:	6c635f73 	stclvs	15, cr5, [r3], #-460	; 0xfffffe34
     134:	69626d69 	stmdbvs	r2!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
     138:	7000676e 	andvc	r6, r0, lr, ror #14
     13c:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     140:	00377265 	eorseq	r7, r7, r5, ror #4
     144:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
     148:	624f656c 	subvs	r6, pc, #108, 10	; 0x1b000000
     14c:	7274006a 	rsbsvc	r0, r4, #106	; 0x6a
     150:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
     154:	7275625f 	rsbsvc	r6, r5, #-268435451	; 0xf0000005
     158:	0064656e 	rsbeq	r6, r4, lr, ror #10
     15c:	73657270 	cmnvc	r5, #112, 4
     160:	6c625f73 	stclvs	15, cr5, [r2], #-460	; 0xfffffe34
     164:	5f6b6361 	svcpl	0x006b6361
     168:	73746962 	cmnvc	r4, #1605632	; 0x188000
     16c:	72696600 	rsbvc	r6, r9, #0, 12
     170:	695f3165 	ldmdbvs	pc, {r0, r2, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     174:	6f6f646e 	svcvs	0x006f646e
     178:	63007372 	movwvs	r7, #882	; 0x372
     17c:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
     180:	616d4965 	cmnvs	sp, r5, ror #18
     184:	00736567 	rsbseq	r6, r3, r7, ror #10
     188:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     18c:	616d4965 	cmnvs	sp, r5, ror #18
     190:	73006567 	movwvc	r6, #1383	; 0x567
     194:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     198:	74007075 	strvc	r7, [r0], #-117	; 0xffffff8b
     19c:	31747865 	cmncc	r4, r5, ror #16
     1a0:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     1a4:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     1a8:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     1ac:	69740074 	ldmdbvs	r4!, {r2, r4, r5, r6}^
     1b0:	5f656c74 	svcpl	0x00656c74
     1b4:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     1b8:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     1bc:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     1c0:	4d706d65 	ldclmi	13, cr6, [r0, #-404]!	; 0xfffffe6c
     1c4:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     1c8:	72477265 	subvc	r7, r7, #1342177286	; 0x50000006
     1cc:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     1d0:	32747865 	rsbscc	r7, r4, #6619136	; 0x650000
     1d4:	65727000 	ldrbvs	r7, [r2, #-0]!
     1d8:	72477373 	subvc	r7, r7, #-872415231	; 0xcc000001
     1dc:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     1e0:	34747865 	ldrbtcc	r7, [r4], #-2149	; 0xfffff79b
     1e4:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     1e8:	66003574 			; <UNDEFINED> instruction: 0x66003574
     1ec:	31657269 	cmncc	r5, r9, ror #4
     1f0:	73616800 	cmnvc	r1, #0, 16
     1f4:	696c635f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
     1f8:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
     1fc:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     200:	00674270 	rsbeq	r4, r7, r0, ror r2
     204:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     208:	65740033 	ldrbvs	r0, [r4, #-51]!	; 0xffffffcd
     20c:	00387478 	eorseq	r7, r8, r8, ror r4
     210:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     214:	6c625f65 	stclvs	15, cr5, [r2], #-404	; 0xfffffe6c
     218:	5f6b6361 	svcpl	0x006b6361
     21c:	73746962 	cmnvc	r4, #1605632	; 0x188000
     220:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     224:	6e6f4d70 	mcrvs	13, 3, r4, cr15, cr0, {3}
     228:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     22c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     230:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
     234:	00377478 	eorseq	r7, r7, r8, ror r4
     238:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
     23c:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     240:	5f726566 	svcpl	0x00726566
     244:	63616c62 	cmnvs	r1, #25088	; 0x6200
     248:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
     24c:	00367478 	eorseq	r7, r6, r8, ror r4
     250:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     254:	6f6d0039 	svcvs	0x006d0039
     258:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     25c:	696f5072 	stmdbvs	pc!, {r1, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
     260:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     264:	6f6d0032 	svcvs	0x006d0032
     268:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     26c:	696f5072 	stmdbvs	pc!, {r1, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
     270:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     274:	6f720033 	svcvs	0x00720033
     278:	64003277 	strvs	r3, [r0], #-631	; 0xfffffd89
     27c:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
     280:	6d007961 	vstrvs.16	s14, [r0, #-194]	; 0xffffff3e	; <UNPREDICTABLE>
     284:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     288:	625f7265 	subsvs	r7, pc, #1342177286	; 0x50000006
     28c:	6b63616c 	blvs	18d8844 <startup-0x1e7277bc>
     290:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     294:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
     298:	615f7469 	cmpvs	pc, r9, ror #8
     29c:	6c007070 	stcvs	0, cr7, [r0], {112}	; 0x70
     2a0:	5f676e6f 	svcpl	0x00676e6f
     2a4:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     2a8:	65727000 	ldrbvs	r7, [r2, #-0]!
     2ac:	624f7373 	subvs	r7, pc, #-872415231	; 0xcc000001
     2b0:	6966006a 	stmdbvs	r6!, {r1, r3, r5, r6}^
     2b4:	5f326572 	svcpl	0x00326572
     2b8:	6f646e69 	svcvs	0x00646e69
     2bc:	0073726f 	rsbseq	r7, r3, pc, ror #4
     2c0:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
     2c4:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     2c8:	5f726566 	svcpl	0x00726566
     2cc:	63616c62 	cmnvs	r1, #25088	; 0x6200
     2d0:	72675f6b 	rsbvc	r5, r7, #428	; 0x1ac
     2d4:	6c5f7961 	mrrcvs	9, 6, r7, pc, cr1	; <UNPREDICTABLE>
     2d8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     2dc:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     2e0:	72745f74 	rsbsvc	r5, r4, #116, 30	; 0x1d0
     2e4:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
     2e8:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     2ec:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     2f0:	6f700035 	svcvs	0x00700035
     2f4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     2f8:	64003672 	strvs	r3, [r0], #-1650	; 0xfffff98e
     2fc:	61747369 	cmnvs	r4, r9, ror #6
     300:	5f65636e 	svcpl	0x0065636e
     304:	72696168 	rsbvc	r6, r9, #104, 2
     308:	6f72745f 	svcvs	0x0072745f
     30c:	00796870 	rsbseq	r6, r9, r0, ror r8
     310:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     314:	38726574 	ldmdacc	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     318:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     31c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     320:	65740039 	ldrbvs	r0, [r4, #-57]!	; 0xffffffc7
     324:	6143706d 	cmpvs	r3, sp, rrx
     328:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     32c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     330:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
     334:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
     338:	73696400 	cmnvc	r9, #0, 8
     33c:	636e6174 	cmnvs	lr, #116, 2
     340:	61685f65 	cmnvs	r8, r5, ror #30
     344:	445f7269 	ldrbmi	r7, [pc], #-617	; 34c <startup-0x1ffffcb4>
     348:	77005049 	strvc	r5, [r0, -r9, asr #32]
     34c:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
     350:	61726400 	cmnvs	r2, r0, lsl #8
     354:	75625f77 	strbvc	r5, [r2, #-3959]!	; 0xfffff089
     358:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     35c:	616c625f 	cmnvs	ip, pc, asr r2
     360:	6c5f6b63 	mrrcvs	11, 6, r6, pc, cr3	; <UNPREDICTABLE>
     364:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     368:	6f687300 	svcvs	0x00687300
     36c:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
     370:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     374:	2064656e 	rsbcs	r6, r4, lr, ror #10
     378:	00746e69 	rsbseq	r6, r4, r9, ror #28
     37c:	616c6564 	cmnvs	ip, r4, ror #10
     380:	6e755f79 	mrcvs	15, 3, r5, cr5, cr9, {3}
     384:	5f6c6974 	svcpl	0x006c6974
     388:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     38c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     390:	6e6f4d70 	mcrvs	13, 3, r4, cr15, cr0, {3}
     394:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     398:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     39c:	6c42656c 	cfstr64vs	mvdx6, [r2], {108}	; 0x6c
     3a0:	006b6361 	rsbeq	r6, fp, r1, ror #6
     3a4:	73657270 	cmnvc	r5, #112, 4
     3a8:	72675f73 	rsbvc	r5, r7, #460	; 0x1cc
     3ac:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     3b0:	00737469 	rsbseq	r7, r3, r9, ror #8
     3b4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     3b8:	616c665f 	cmnvs	ip, pc, asr r6
     3bc:	6100656d 	tstvs	r0, sp, ror #10
     3c0:	616d696e 	cmnvs	sp, lr, ror #18
     3c4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     3c8:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
     3cc:	61006465 	tstvs	r0, r5, ror #8
     3d0:	616d696e 	cmnvs	sp, lr, ror #18
     3d4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     3d8:	756f635f 	strbvc	r6, [pc, #-863]!	; 81 <startup-0x1fffff7f>
     3dc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     3e0:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     3e4:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     3e8:	006a624f 	rsbeq	r6, sl, pc, asr #4
     3ec:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
     3f0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     3f4:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     3f8:	675f656c 	ldrbvs	r6, [pc, -ip, ror #10]
     3fc:	5f796172 	svcpl	0x00796172
     400:	73746962 	cmnvc	r4, #1605632	; 0x188000
     404:	69616800 	stmdbvs	r1!, {fp, sp, lr}^
     408:	476e0072 			; <UNDEFINED> instruction: 0x476e0072
     40c:	4f656d61 	svcmi	0x00656d61
     410:	63656a62 	cmnvs	r5, #401408	; 0x62000
     414:	70007374 	andvc	r7, r0, r4, ror r3
     418:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     41c:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     420:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     424:	00737469 	rsbseq	r7, r3, r9, ror #8
     428:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     42c:	34726574 	ldrbtcc	r6, [r2], #-1396	; 0xfffffa8c
     430:	65727000 	ldrbvs	r7, [r2, #-0]!
     434:	6d497373 	stclvs	3, cr7, [r9, #-460]	; 0xfffffe34
     438:	00656761 	rsbeq	r6, r5, r1, ror #14
     43c:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     440:	73007365 	movwvc	r7, #869	; 0x365
     444:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
     448:	7865745f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
     44c:	75630074 	strbvc	r0, [r3, #-116]!	; 0xffffff8c
     450:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     454:	72665f74 	rsbvc	r5, r6, #116, 30	; 0x1d0
     458:	00656d61 	rsbeq	r6, r5, r1, ror #26
     45c:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     460:	67694c65 	strbvs	r4, [r9, -r5, ror #24]!
     464:	74007468 	strvc	r7, [r0], #-1128	; 0xfffffb98
     468:	50706d65 	rsbspl	r6, r0, r5, ror #26
     46c:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     470:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     474:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     478:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     47c:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
     480:	00726574 	rsbseq	r6, r2, r4, ror r5
     484:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     488:	69727053 	ldmdbvs	r2!, {r0, r1, r4, r6, ip, sp, lr}^
     48c:	00736574 	rsbseq	r6, r3, r4, ror r5
     490:	706d6574 	rsbvc	r6, sp, r4, ror r5
     494:	74736143 	ldrbtvc	r6, [r3], #-323	; 0xfffffebd
     498:	7247656c 	subvc	r6, r7, #108, 10	; 0x1b000000
     49c:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     4a0:	54706d65 	ldrbtpl	r6, [r0], #-3429	; 0xfffff29b
     4a4:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     4a8:	63616c42 	cmnvs	r1, #16896	; 0x4200
     4ac:	6e75006b 	cdpvs	0, 7, cr0, cr5, cr11, {3}
     4b0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     4b4:	63206465 			; <UNDEFINED> instruction: 0x63206465
     4b8:	00726168 	rsbseq	r6, r2, r8, ror #2
     4bc:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
     4c0:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     4c4:	5f726566 	svcpl	0x00726566
     4c8:	63616c62 	cmnvs	r1, #25088	; 0x6200
     4cc:	72675f6b 	rsbvc	r5, r7, #428	; 0x1ac
     4d0:	6d007961 	vstrvs.16	s14, [r0, #-194]	; 0xffffff3e	; <UNPREDICTABLE>
     4d4:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     4d8:	6c5f7265 	lfmvs	f7, 2, [pc], {101}	; 0x65
     4dc:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     4e0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     4e4:	61630073 	smcvs	12291	; 0x3003
     4e8:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     4ec:	616c625f 	cmnvs	ip, pc, asr r2
     4f0:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
     4f4:	00737469 	rsbseq	r7, r3, r9, ror #8
     4f8:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     4fc:	6a624f65 	bvs	1894298 <startup-0x1e76bd68>
     500:	2f3a4300 	svccs	0x003a4300
     504:	2f706f6d 	svccs	0x00706f6d
     508:	6f4d2f63 	svcvs	0x004d2f63
     50c:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     510:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     514:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     518:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     51c:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     520:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     524:	732f432f 			; <UNDEFINED> instruction: 0x732f432f
     528:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     52c:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
     530:	6d616700 	stclvs	7, cr6, [r1, #-0]
     534:	6a624f65 	bvs	18942d0 <startup-0x1e76bd30>
     538:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
     53c:	73616300 	cmnvc	r1, #0, 6
     540:	47656c74 			; <UNDEFINED> instruction: 0x47656c74
     544:	00796172 	rsbseq	r6, r9, r2, ror r1
     548:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
     54c:	47726574 			; <UNDEFINED> instruction: 0x47726574
     550:	00796172 	rsbseq	r6, r9, r2, ror r1
     554:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     558:	61724765 	cmnvs	r2, r5, ror #14
     55c:	49440079 	stmdbmi	r4, {r0, r3, r4, r5, r6}^
     560:	75625f50 	strbvc	r5, [r2, #-3920]!	; 0xfffff0b0
     564:	64656e72 	strbtvs	r6, [r5], #-3698	; 0xfffff18e
     568:	72756300 	rsbsvc	r6, r5, #0, 6
     56c:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
     570:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
     574:	006e6565 	rsbeq	r6, lr, r5, ror #10
     578:	74736964 	ldrbtvc	r6, [r3], #-2404	; 0xfffff69c
     57c:	65636e61 	strbvs	r6, [r3, #-3681]!	; 0xfffff19f
     580:	616c705f 	qdsubvs	r7, pc, ip	; <UNPREDICTABLE>
     584:	5f726579 	svcpl	0x00726579
     588:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     58c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     590:	65725070 	ldrbvs	r5, [r2, #-112]!	; 0xffffff90
     594:	6c427373 	mcrrvs	3, 7, r7, r2, cr3
     598:	006b6361 	rsbeq	r6, fp, r1, ror #6
     59c:	625f6762 	subsvs	r6, pc, #25690112	; 0x1880000
     5a0:	00737469 	rsbseq	r7, r3, r9, ror #8
     5a4:	63616c62 	cmnvs	r1, #25088	; 0x6200
     5a8:	616d496b 	cmnvs	sp, fp, ror #18
     5ac:	6d006567 	cfstr32vs	mvfx6, [r0, #-412]	; 0xfffffe64
     5b0:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     5b4:	675f7265 	ldrbvs	r7, [pc, -r5, ror #4]
     5b8:	5f796172 	svcpl	0x00796172
     5bc:	73746962 	cmnvc	r4, #1605632	; 0x188000
     5c0:	73616300 	cmnvc	r1, #0, 6
     5c4:	49656c74 	stmdbmi	r5!, {r2, r4, r5, r6, sl, fp, sp, lr}^
     5c8:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     5cc:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     5d0:	6d49656c 	cfstr64vs	mvdx6, [r9, #-432]	; 0xfffffe50
     5d4:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     5d8:	6e617200 	cdpvs	2, 6, cr7, cr1, cr0, {0}
     5dc:	5f6d6f64 	svcpl	0x006d6f64
     5e0:	64656573 	strbtvs	r6, [r5], #-1395	; 0xfffffa8d
     5e4:	72696600 	rsbvc	r6, r9, #0, 12
     5e8:	66003265 	strvs	r3, [r0], -r5, ror #4
     5ec:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     5f0:	72696600 	rsbvc	r6, r9, #0, 12
     5f4:	70003465 	andvc	r3, r0, r5, ror #8
     5f8:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     5fc:	63616c42 	cmnvs	r1, #16896	; 0x4200
     600:	6f6d006b 	svcvs	0x006d006b
     604:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     608:	616d4972 	smcvs	54418	; 0xd492
     60c:	79006567 	stmdbvc	r0, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     610:	00736f50 	rsbseq	r6, r3, r0, asr pc
     614:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
     618:	696c635f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
     61c:	765f626d 	ldrbvc	r6, [pc], -sp, ror #4
     620:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     624:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     628:	00323174 	eorseq	r3, r2, r4, ror r1
     62c:	706d6574 	rsbvc	r6, sp, r4, ror r5
     630:	6c746954 			; <UNDEFINED> instruction: 0x6c746954
     634:	67694c65 	strbvs	r4, [r9, -r5, ror #24]!
     638:	75007468 	strvc	r7, [r0, #-1128]	; 0xfffffb98
     63c:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
     640:	6f6e0065 	svcvs	0x006e0065
     644:	5049445f 	subpl	r4, r9, pc, asr r4
     648:	65727000 	ldrbvs	r7, [r2, #-0]!
     64c:	6d497373 	stclvs	3, cr7, [r9, #-460]	; 0xfffffe34
     650:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     654:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     658:	74695470 	strbtvc	r5, [r9], #-1136	; 0xfffffb90
     65c:	7247656c 	subvc	r6, r7, #108, 10	; 0x1b000000
     660:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     664:	776f6c53 			; <UNDEFINED> instruction: 0x776f6c53
     668:	74786554 	ldrbtvc	r6, [r8], #-1364	; 0xfffffaac
     66c:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
     670:	745f3874 	ldrbvc	r3, [pc], #-2164	; 678 <startup-0x1ffff988>
     674:	72696600 	rsbvc	r6, r9, #0, 12
     678:	62007365 	andvs	r7, r0, #-1811939327	; 0x94000001
     67c:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
     680:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     684:	67694c72 			; <UNDEFINED> instruction: 0x67694c72
     688:	62007468 	andvs	r7, r0, #104, 8	; 0x68000000
     68c:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
     690:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     694:	61724772 	cmnvs	r2, r2, ror r7
     698:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     69c:	7250706d 	subsvc	r7, r0, #109	; 0x6d
     6a0:	4c737365 	ldclmi	3, cr7, [r3], #-404	; 0xfffffe6c
     6a4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     6a8:	61477400 	cmpvs	r7, r0, lsl #8
     6ac:	624f656d 	subvs	r6, pc, #457179136	; 0x1b400000
     6b0:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     6b4:	6f507800 	svcvs	0x00507800
     6b8:	61630073 	smcvs	12291	; 0x3003
     6bc:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     6c0:	63616c42 	cmnvs	r1, #16896	; 0x4200
     6c4:	6167006b 	cmnvs	r7, fp, rrx
     6c8:	6f5f656d 	svcvs	0x005f656d
     6cc:	5f726576 	svcpl	0x00726576
     6d0:	65646461 	strbvs	r6, [r4, #-1121]!	; 0xfffffb9f
     6d4:	65740072 	ldrbvs	r0, [r4, #-114]!	; 0xffffff8e
     6d8:	30317478 	eorscc	r7, r1, r8, ror r4
     6dc:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     6e0:	00313174 	eorseq	r3, r1, r4, ror r1
     6e4:	67696568 	strbvs	r6, [r9, -r8, ror #10]!
     6e8:	6d007468 	cfstrsvs	mvf7, [r0, #-416]	; 0xfffffe60
     6ec:	006e6961 	rsbeq	r6, lr, r1, ror #18
     6f0:	73657270 	cmnvc	r5, #112, 4
     6f4:	67694c73 			; <UNDEFINED> instruction: 0x67694c73
     6f8:	6d007468 	cfstrsvs	mvf7, [r0, #-416]	; 0xfffffe60
     6fc:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     700:	6d497265 	sfmvs	f7, 2, [r9, #-404]	; 0xfffffe6c
     704:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     708:	6d616700 	stclvs	7, cr6, [r1, #-0]
     70c:	6a624f65 	bvs	18944a8 <startup-0x1e76bb58>
     710:	55746365 	ldrbpl	r6, [r4, #-869]!	; 0xfffffc9b
     714:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
     718:	3a430065 	bcc	10c08b4 <startup-0x1ef3f74c>
     71c:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     720:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 66c <startup-0x1ffff994>
     724:	616c706f 	cmnvs	ip, pc, rrx
     728:	61726f62 	cmnvs	r2, r2, ror #30
     72c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     730:	442f7265 	strtmi	r7, [pc], #-613	; 738 <startup-0x1ffff8c8>
     734:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     738:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     73c:	2f432f68 	svccs	0x00432f68
     740:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     744:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     748:	632e7463 			; <UNDEFINED> instruction: 0x632e7463
     74c:	69687400 	stmdbvs	r8!, {sl, ip, sp, lr}^
     750:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     754:	47356572 			; <UNDEFINED> instruction: 0x47356572
     758:	00796172 	rsbseq	r6, r9, r2, ror r1
     75c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     760:	61724731 	cmnvs	r2, r1, lsr r7
     764:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     768:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     76c:	47326572 			; <UNDEFINED> instruction: 0x47326572
     770:	00796172 	rsbseq	r6, r9, r2, ror r1
     774:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     778:	61724733 	cmnvs	r2, r3, lsr r7
     77c:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     780:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     784:	47346572 			; <UNDEFINED> instruction: 0x47346572
     788:	00796172 	rsbseq	r6, r9, r2, ror r1
     78c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     790:	63616c42 	cmnvs	r1, #16896	; 0x4200
     794:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
     798:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     79c:	47336572 			; <UNDEFINED> instruction: 0x47336572
     7a0:	00796172 	rsbseq	r6, r9, r2, ror r1
     7a4:	706d6574 	rsbvc	r6, sp, r4, ror r5
     7a8:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     7ac:	63616c42 	cmnvs	r1, #16896	; 0x4200
     7b0:	6966006b 	stmdbvs	r6!, {r0, r1, r3, r5, r6}^
     7b4:	4c316572 	cfldr32mi	mvfx6, [r1], #-456	; 0xfffffe38
     7b8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     7bc:	72696600 	rsbvc	r6, r9, #0, 12
     7c0:	694c3465 	stmdbvs	ip, {r0, r2, r5, r6, sl, ip, sp}^
     7c4:	00746867 	rsbseq	r6, r4, r7, ror #16
     7c8:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     7cc:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
     7d0:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     7d4:	00737469 	rsbseq	r7, r3, r9, ror #8
     7d8:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     7dc:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     7e0:	5f746867 	svcpl	0x00746867
     7e4:	73746962 	cmnvc	r4, #1605632	; 0x188000
     7e8:	72696600 	rsbvc	r6, r9, #0, 12
     7ec:	694c3365 	stmdbvs	ip, {r0, r2, r5, r6, r8, r9, ip, sp}^
     7f0:	00746867 	rsbseq	r6, r4, r7, ror #16
     7f4:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     7f8:	31726574 	cmncc	r2, r4, ror r5
     7fc:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     800:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     804:	69660033 	stmdbvs	r6!, {r0, r1, r4, r5}^
     808:	5f356572 	svcpl	0x00356572
     80c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     810:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     814:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     818:	49336572 	ldmdbmi	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}
     81c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     820:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     824:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     828:	69660030 	stmdbvs	r6!, {r4, r5}^
     82c:	4c356572 	cfldr32mi	mvfx6, [r5], #-456	; 0xfffffe38
     830:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     834:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     838:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     83c:	65740032 	ldrbvs	r0, [r4, #-50]!	; 0xffffffce
     840:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     844:	47356572 			; <UNDEFINED> instruction: 0x47356572
     848:	00796172 	rsbseq	r6, r9, r2, ror r1
     84c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     850:	72675f31 	rsbvc	r5, r7, #49, 30	; 0xc4
     854:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     858:	00737469 	rsbseq	r7, r3, r9, ror #8
     85c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     860:	67694c32 			; <UNDEFINED> instruction: 0x67694c32
     864:	66007468 	strvs	r7, [r0], -r8, ror #8
     868:	31657269 	cmncc	r5, r9, ror #4
     86c:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     870:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     874:	00737469 	rsbseq	r7, r3, r9, ror #8
     878:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     87c:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     880:	5f746867 	svcpl	0x00746867
     884:	73746962 	cmnvc	r4, #1605632	; 0x188000
     888:	72696600 	rsbvc	r6, r9, #0, 12
     88c:	6a624f65 	bvs	1894628 <startup-0x1e76b9d8>
     890:	72696600 	rsbvc	r6, r9, #0, 12
     894:	72473265 	subvc	r3, r7, #1342177286	; 0x50000006
     898:	66007961 	strvs	r7, [r0], -r1, ror #18
     89c:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
     8a0:	6172675f 	cmnvs	r2, pc, asr r7
     8a4:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     8a8:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     8ac:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
     8b0:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     8b4:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     8b8:	69660074 	stmdbvs	r6!, {r2, r4, r5, r6}^
     8bc:	49346572 	ldmdbmi	r4!, {r1, r4, r5, r6, r8, sl, sp, lr}
     8c0:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     8c4:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     8c8:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     8cc:	694c3165 	stmdbvs	ip, {r0, r2, r5, r6, r8, ip, sp}^
     8d0:	00746867 	rsbseq	r6, r4, r7, ror #16
     8d4:	73726966 	cmnvc	r2, #1671168	; 0x198000
     8d8:	6d695474 	cfstrdvs	mvd5, [r9, #-464]!	; 0xfffffe30
     8dc:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
     8e0:	665f7469 	ldrbvs	r7, [pc], -r9, ror #8
     8e4:	00657269 	rsbeq	r7, r5, r9, ror #4
     8e8:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     8ec:	696c5f35 	stmdbvs	ip!, {r0, r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     8f0:	5f746867 	svcpl	0x00746867
     8f4:	73746962 	cmnvc	r4, #1605632	; 0x188000
     8f8:	72696600 	rsbvc	r6, r9, #0, 12
     8fc:	616d4965 	cmnvs	sp, r5, ror #18
     900:	00736567 	rsbseq	r6, r3, r7, ror #10
     904:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     908:	616d4931 	cmnvs	sp, r1, lsr r9
     90c:	66006567 	strvs	r6, [r0], -r7, ror #10
     910:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
     914:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     918:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     91c:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     920:	72473165 	subvc	r3, r7, #1073741849	; 0x40000019
     924:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     928:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
     92c:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
     930:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     934:	69660074 	stmdbvs	r6!, {r2, r4, r5, r6}^
     938:	5f336572 	svcpl	0x00336572
     93c:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     940:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     944:	66007374 			; <UNDEFINED> instruction: 0x66007374
     948:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
     94c:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     950:	69660065 	stmdbvs	r6!, {r0, r2, r5, r6}^
     954:	625f6572 	subsvs	r6, pc, #478150656	; 0x1c800000
     958:	6b63616c 	blvs	18d8f10 <startup-0x1e7270f0>
     95c:	625f325f 	subsvs	r3, pc, #-268435451	; 0xf0000005
     960:	00737469 	rsbseq	r7, r3, r9, ror #8
     964:	706d6574 	rsbvc	r6, sp, r4, ror r5
     968:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     96c:	67694c32 			; <UNDEFINED> instruction: 0x67694c32
     970:	66007468 	strvs	r7, [r0], -r8, ror #8
     974:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
     978:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     97c:	65740065 	ldrbvs	r0, [r4, #-101]!	; 0xffffff9b
     980:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     984:	4c356572 	cfldr32mi	mvfx6, [r5], #-456	; 0xfffffe38
     988:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     98c:	2f3a4300 	svccs	0x003a4300
     990:	2f706f6d 	svccs	0x00706f6d
     994:	6f4d2f63 	svcvs	0x004d2f63
     998:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     99c:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     9a0:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     9a4:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     9a8:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     9ac:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     9b0:	662f432f 	strtvs	r4, [pc], -pc, lsr #6
     9b4:	2e657269 	cdpcs	2, 6, cr7, cr5, cr9, {3}
     9b8:	69660063 	stmdbvs	r6!, {r0, r1, r5, r6}^
     9bc:	5f336572 	svcpl	0x00336572
     9c0:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     9c4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     9c8:	616c0073 	smcvs	49155	; 0xc003
     9cc:	69527473 	ldmdbvs	r2, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     9d0:	56746867 	ldrbtpl	r6, [r4], -r7, ror #16
     9d4:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     9d8:	73616c00 	cmnvc	r1, #0, 24
     9dc:	6d754a74 	vldmdbvs	r5!, {s9-s124}
     9e0:	6c615670 	stclvs	6, cr5, [r1], #-448	; 0xfffffe40
     9e4:	79006575 	stmdbvc	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
     9e8:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     9ec:	53780064 	cmnpl	r8, #100	; 0x64
     9f0:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     9f4:	73616c00 	cmnvc	r1, #0, 24
     9f8:	66654c74 			; <UNDEFINED> instruction: 0x66654c74
     9fc:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
     a00:	43006575 	movwmi	r6, #1397	; 0x575
     a04:	6f6d2f3a 	svcvs	0x006d2f3a
     a08:	2f632f70 	svccs	0x00632f70
     a0c:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     a10:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     a14:	6f697461 	svcvs	0x00697461
     a18:	2f72656e 	svccs	0x0072656e
     a1c:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     a20:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     a24:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     a28:	616c702f 	cmnvs	ip, pc, lsr #32
     a2c:	2e726579 	mrccs	5, 3, r6, cr2, cr9, {3}
     a30:	6c700063 	ldclvs	0, cr0, [r0], #-396	; 0xfffffe74
     a34:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
     a38:	61647055 	qdsubvs	r7, r5, r4
     a3c:	74006574 	strvc	r6, [r0], #-1396	; 0xfffffa8c
     a40:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     a44:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     a48:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     a4c:	69620074 	stmdbvs	r2!, {r2, r4, r5, r6}^
     a50:	5f336472 	svcpl	0x00336472
     a54:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     a58:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     a5c:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     a60:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     a64:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     a68:	69620065 	stmdbvs	r2!, {r0, r2, r5, r6}^
     a6c:	5f346472 	svcpl	0x00346472
     a70:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     a74:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     a78:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     a7c:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     a80:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     a84:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     a88:	6f700074 	svcvs	0x00700074
     a8c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     a90:	00343172 	eorseq	r3, r4, r2, ror r1
     a94:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     a98:	696c5f35 	stmdbvs	ip!, {r0, r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     a9c:	5f746867 	svcpl	0x00746867
     aa0:	73746962 	cmnvc	r4, #1605632	; 0x188000
     aa4:	72696200 	rsbvc	r6, r9, #0, 4
     aa8:	694c3364 	stmdbvs	ip, {r2, r5, r6, r8, r9, ip, sp}^
     aac:	00746867 	rsbseq	r6, r4, r7, ror #16
     ab0:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     ab4:	31726574 	cmncc	r2, r4, ror r5
     ab8:	69620039 	stmdbvs	r2!, {r0, r3, r4, r5}^
     abc:	4c316472 	cfldrsmi	mvf6, [r1], #-456	; 0xfffffe38
     ac0:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     ac4:	72696200 	rsbvc	r6, r9, #0, 4
     ac8:	6c423364 	mcrrvs	3, 6, r3, r2, cr4
     acc:	006b6361 	rsbeq	r6, fp, r1, ror #6
     ad0:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     ad4:	61724731 	cmnvs	r2, r1, lsr r7
     ad8:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     adc:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     ae0:	42346472 	eorsmi	r6, r4, #1912602624	; 0x72000000
     ae4:	6b63616c 	blvs	18d909c <startup-0x1e726f64>
     ae8:	72696200 	rsbvc	r6, r9, #0, 4
     aec:	6c423564 	cfstr64vs	mvdx3, [r2], {100}	; 0x64
     af0:	006b6361 	rsbeq	r6, fp, r1, ror #6
     af4:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     af8:	32726574 	rsbscc	r6, r2, #116, 10	; 0x1d000000
     afc:	6f700030 	svcvs	0x00700030
     b00:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     b04:	00313272 	eorseq	r3, r1, r2, ror r2
     b08:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     b0c:	61724734 	cmnvs	r2, r4, lsr r7
     b10:	69620079 	stmdbvs	r2!, {r0, r3, r4, r5, r6}^
     b14:	42326472 	eorsmi	r6, r2, #1912602624	; 0x72000000
     b18:	6b63616c 	blvs	18d90d0 <startup-0x1e726f30>
     b1c:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     b20:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     b24:	70003432 	andvc	r3, r0, r2, lsr r4
     b28:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     b2c:	36317265 	ldrtcc	r7, [r1], -r5, ror #4
     b30:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     b34:	72694270 	rsbvc	r4, r9, #112, 4
     b38:	72473264 	subvc	r3, r7, #100, 4	; 0x40000006
     b3c:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     b40:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     b44:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     b48:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     b4c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     b50:	72694270 	rsbvc	r4, r9, #112, 4
     b54:	67694c64 	strbvs	r4, [r9, -r4, ror #24]!
     b58:	74007468 	strvc	r7, [r0], #-1128	; 0xfffffb98
     b5c:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     b60:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     b64:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     b68:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     b6c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     b70:	62003331 	andvs	r3, r0, #-1006632960	; 0xc4000000
     b74:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     b78:	616c625f 	cmnvs	ip, pc, asr r2
     b7c:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
     b80:	00737469 	rsbseq	r7, r3, r9, ror #8
     b84:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     b88:	72675f31 	rsbvc	r5, r7, #49, 30	; 0xc4
     b8c:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     b90:	00737469 	rsbseq	r7, r3, r9, ror #8
     b94:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     b98:	616d4936 	cmnvs	sp, r6, lsr r9
     b9c:	62006567 	andvs	r6, r0, #432013312	; 0x19c00000
     ba0:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     ba4:	616c625f 	cmnvs	ip, pc, asr r2
     ba8:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
     bac:	00737469 	rsbseq	r7, r3, r9, ror #8
     bb0:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     bb4:	6c625f34 	stclvs	15, cr5, [r2], #-208	; 0xffffff30
     bb8:	5f6b6361 	svcpl	0x006b6361
     bbc:	73746962 	cmnvc	r4, #1605632	; 0x188000
     bc0:	72696200 	rsbvc	r6, r9, #0, 4
     bc4:	6d493364 	stclvs	3, cr3, [r9, #-400]	; 0xfffffe70
     bc8:	00656761 	rsbeq	r6, r5, r1, ror #14
     bcc:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     bd0:	696c5f31 	stmdbvs	ip!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     bd4:	5f746867 	svcpl	0x00746867
     bd8:	73746962 	cmnvc	r4, #1605632	; 0x188000
     bdc:	72696200 	rsbvc	r6, r9, #0, 4
     be0:	625f3564 	subsvs	r3, pc, #100, 10	; 0x19000000
     be4:	6b63616c 	blvs	18d919c <startup-0x1e726e64>
     be8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     bec:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     bf0:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     bf4:	4c336472 	cfldrsmi	mvf6, [r3], #-456	; 0xfffffe38
     bf8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     bfc:	72696200 	rsbvc	r6, r9, #0, 4
     c00:	675f3564 	ldrbvs	r3, [pc, -r4, ror #10]
     c04:	5f796172 	svcpl	0x00796172
     c08:	73746962 	cmnvc	r4, #1605632	; 0x188000
     c0c:	72696200 	rsbvc	r6, r9, #0, 4
     c10:	72473264 	subvc	r3, r7, #100, 4	; 0x40000006
     c14:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     c18:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     c1c:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     c20:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     c24:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
     c28:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     c2c:	47336472 			; <UNDEFINED> instruction: 0x47336472
     c30:	00796172 	rsbseq	r6, r9, r2, ror r1
     c34:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     c38:	72675f34 	rsbvc	r5, r7, #52, 30	; 0xd0
     c3c:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     c40:	00737469 	rsbseq	r7, r3, r9, ror #8
     c44:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     c48:	32726574 	rsbscc	r6, r2, #116, 10	; 0x1d000000
     c4c:	69620033 	stmdbvs	r2!, {r0, r1, r4, r5}^
     c50:	4c356472 	cfldrsmi	mvf6, [r5], #-456	; 0xfffffe38
     c54:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     c58:	72696200 	rsbvc	r6, r9, #0, 4
     c5c:	616d4964 	cmnvs	sp, r4, ror #18
     c60:	00736567 	rsbseq	r6, r3, r7, ror #10
     c64:	706d6574 	rsbvc	r6, sp, r4, ror r5
     c68:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     c6c:	616c4235 	cmnvs	ip, r5, lsr r2
     c70:	62006b63 	andvs	r6, r0, #101376	; 0x18c00
     c74:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     c78:	63616c42 	cmnvs	r1, #16896	; 0x4200
     c7c:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
     c80:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     c84:	42326472 	eorsmi	r6, r2, #1912602624	; 0x72000000
     c88:	6b63616c 	blvs	18d9240 <startup-0x1e726dc0>
     c8c:	72696200 	rsbvc	r6, r9, #0, 4
     c90:	675f3364 	ldrbvs	r3, [pc, -r4, ror #6]
     c94:	5f796172 	svcpl	0x00796172
     c98:	73746962 	cmnvc	r4, #1605632	; 0x188000
     c9c:	72696200 	rsbvc	r6, r9, #0, 4
     ca0:	6c423164 	stfvse	f3, [r2], {100}	; 0x64
     ca4:	006b6361 	rsbeq	r6, fp, r1, ror #6
     ca8:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     cac:	67694c32 			; <UNDEFINED> instruction: 0x67694c32
     cb0:	43007468 	movwmi	r7, #1128	; 0x468
     cb4:	6f6d2f3a 	svcvs	0x006d2f3a
     cb8:	2f632f70 	svccs	0x00632f70
     cbc:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     cc0:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     cc4:	6f697461 	svcvs	0x00697461
     cc8:	2f72656e 	svccs	0x0072656e
     ccc:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     cd0:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     cd4:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     cd8:	7269622f 	rsbvc	r6, r9, #-268435454	; 0xf0000002
     cdc:	00632e64 	rsbeq	r2, r3, r4, ror #28
     ce0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     ce4:	7269625f 	rsbvc	r6, r9, #-268435451	; 0xf0000005
     ce8:	69620064 	stmdbvs	r2!, {r2, r5, r6}^
     cec:	624f6472 	subvs	r6, pc, #1912602624	; 0x72000000
     cf0:	6962006a 	stmdbvs	r2!, {r1, r3, r5, r6}^
     cf4:	5f326472 	svcpl	0x00326472
     cf8:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     cfc:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     d00:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     d04:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     d08:	72476472 	subvc	r6, r7, #1912602624	; 0x72000000
     d0c:	62007961 	andvs	r7, r0, #1589248	; 0x184000
     d10:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     d14:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     d18:	72696200 	rsbvc	r6, r9, #0, 4
     d1c:	625f3164 	subsvs	r3, pc, #100, 2
     d20:	6b63616c 	blvs	18d92d8 <startup-0x1e726d28>
     d24:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     d28:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
     d2c:	49316472 	ldmdbmi	r1!, {r1, r4, r5, r6, sl, sp, lr}
     d30:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     d34:	72696200 	rsbvc	r6, r9, #0, 4
     d38:	72473364 	subvc	r3, r7, #100, 6	; 0x90000001
     d3c:	66007961 	strvs	r7, [r0], -r1, ror #18
     d40:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
     d44:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
     d48:	00726574 	rsbseq	r6, r2, r4, ror r5
     d4c:	706d6574 	rsbvc	r6, sp, r4, ror r5
     d50:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     d54:	63616c42 	cmnvs	r1, #16896	; 0x4200
     d58:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
     d5c:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     d60:	42336472 	eorsmi	r6, r3, #1912602624	; 0x72000000
     d64:	6b63616c 	blvs	18d931c <startup-0x1e726ce4>
     d68:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     d6c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     d70:	70003131 	andvc	r3, r0, r1, lsr r1
     d74:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     d78:	32317265 	eorscc	r7, r1, #1342177286	; 0x50000006
     d7c:	72696200 	rsbvc	r6, r9, #0, 4
     d80:	694c3464 	stmdbvs	ip, {r2, r5, r6, sl, ip, sp}^
     d84:	00746867 	rsbseq	r6, r4, r7, ror #16
     d88:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     d8c:	616d4935 	cmnvs	sp, r5, lsr r9
     d90:	70006567 	andvc	r6, r0, r7, ror #10
     d94:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     d98:	35317265 	ldrcc	r7, [r1, #-613]!	; 0xfffffd9b
     d9c:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     da0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     da4:	70003731 	andvc	r3, r0, r1, lsr r7
     da8:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     dac:	38317265 	ldmdacc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
     db0:	72696200 	rsbvc	r6, r9, #0, 4
     db4:	6d493264 	sfmvs	f3, 2, [r9, #-400]	; 0xfffffe70
     db8:	00656761 	rsbeq	r6, r5, r1, ror #14
     dbc:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     dc0:	32726574 	rsbscc	r6, r2, #116, 10	; 0x1d000000
     dc4:	69620032 	stmdbvs	r2!, {r1, r4, r5}^
     dc8:	5f326472 	svcpl	0x00326472
     dcc:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     dd0:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     dd4:	77007374 	smlsdxvc	r0, r4, r3, r7
     dd8:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     ddc:	616c4232 	cmnvs	ip, r2, lsr r2
     de0:	77006b63 	strvc	r6, [r0, -r3, ror #22]
     de4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     de8:	61724731 	cmnvs	r2, r1, lsr r7
     dec:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     df0:	6957706d 	ldmdbvs	r7, {r0, r2, r3, r5, r6, ip, sp, lr}^
     df4:	4c686374 	stclmi	3, cr6, [r8], #-464	; 0xfffffe30
     df8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     dfc:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     e00:	624f6863 	subvs	r6, pc, #6488064	; 0x630000
     e04:	6977006a 	ldmdbvs	r7!, {r1, r3, r5, r6}^
     e08:	31686374 	smccc	34356	; 0x8634
     e0c:	616c625f 	cmnvs	ip, pc, asr r2
     e10:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
     e14:	00737469 	rsbseq	r7, r3, r9, ror #8
     e18:	706d6574 	rsbvc	r6, sp, r4, ror r5
     e1c:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     e20:	694c3368 	stmdbvs	ip, {r3, r5, r6, r8, r9, ip, sp}^
     e24:	00746867 	rsbseq	r6, r4, r7, ror #16
     e28:	706d6574 	rsbvc	r6, sp, r4, ror r5
     e2c:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     e30:	694c3268 	stmdbvs	ip, {r3, r5, r6, r9, ip, sp}^
     e34:	00746867 	rsbseq	r6, r4, r7, ror #16
     e38:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     e3c:	694c3168 	stmdbvs	ip, {r3, r5, r6, r8, ip, sp}^
     e40:	00746867 	rsbseq	r6, r4, r7, ror #16
     e44:	706d6574 	rsbvc	r6, sp, r4, ror r5
     e48:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     e4c:	6c423268 	sfmvs	f3, 2, [r2], {104}	; 0x68
     e50:	006b6361 	rsbeq	r6, fp, r1, ror #6
     e54:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     e58:	6c5f3268 	lfmvs	f3, 2, [pc], {104}	; 0x68
     e5c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     e60:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     e64:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
     e68:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     e6c:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     e70:	69770065 	ldmdbvs	r7!, {r0, r2, r5, r6}^
     e74:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     e78:	63616c42 	cmnvs	r1, #16896	; 0x4200
     e7c:	6977006b 	ldmdbvs	r7!, {r0, r1, r3, r5, r6}^
     e80:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     e84:	6172675f 	cmnvs	r2, pc, asr r7
     e88:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     e8c:	69007374 	stmdbvs	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
     e90:	5f74696e 	svcpl	0x0074696e
     e94:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     e98:	65740068 	ldrbvs	r0, [r4, #-104]!	; 0xffffff98
     e9c:	6957706d 	ldmdbvs	r7, {r0, r2, r3, r5, r6, ip, sp, lr}^
     ea0:	42686374 	rsbmi	r6, r8, #116, 6	; 0xd0000001
     ea4:	6b63616c 	blvs	18d945c <startup-0x1e726ba4>
     ea8:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     eac:	5f326863 	svcpl	0x00326863
     eb0:	63616c62 	cmnvs	r1, #25088	; 0x6200
     eb4:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     eb8:	77007374 	smlsdxvc	r0, r4, r3, r7
     ebc:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     ec0:	696c5f33 	stmdbvs	ip!, {r0, r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     ec4:	5f746867 	svcpl	0x00746867
     ec8:	73746962 	cmnvc	r4, #1605632	; 0x188000
     ecc:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     ed0:	47336863 	ldrmi	r6, [r3, -r3, ror #16]!
     ed4:	00796172 	rsbseq	r6, r9, r2, ror r1
     ed8:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     edc:	72473268 	subvc	r3, r7, #104, 4	; 0x80000006
     ee0:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     ee4:	57706d65 	ldrbpl	r6, [r0, -r5, ror #26]!
     ee8:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     eec:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     ef0:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     ef4:	74695770 	strbtvc	r5, [r9], #-1904	; 0xfffff890
     ef8:	47326863 	ldrmi	r6, [r2, -r3, ror #16]!
     efc:	00796172 	rsbseq	r6, r9, r2, ror r1
     f00:	706d6574 	rsbvc	r6, sp, r4, ror r5
     f04:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     f08:	6c423368 	mcrrvs	3, 6, r3, r2, cr8
     f0c:	006b6361 	rsbeq	r6, fp, r1, ror #6
     f10:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     f14:	6c5f3168 	ldfvse	f3, [pc], {104}	; 0x68
     f18:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     f1c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     f20:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
     f24:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     f28:	6172675f 	cmnvs	r2, pc, asr r7
     f2c:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     f30:	77007374 	smlsdxvc	r0, r4, r3, r7
     f34:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     f38:	616d4934 	cmnvs	sp, r4, lsr r9
     f3c:	77006567 	strvc	r6, [r0, -r7, ror #10]
     f40:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     f44:	67694c32 			; <UNDEFINED> instruction: 0x67694c32
     f48:	77007468 	strvc	r7, [r0, -r8, ror #8]
     f4c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     f50:	616d4931 	cmnvs	sp, r1, lsr r9
     f54:	77006567 	strvc	r6, [r0, -r7, ror #10]
     f58:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     f5c:	616c4231 	cmnvs	ip, r1, lsr r2
     f60:	77006b63 	strvc	r6, [r0, -r3, ror #22]
     f64:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     f68:	67694c33 			; <UNDEFINED> instruction: 0x67694c33
     f6c:	77007468 	strvc	r7, [r0, -r8, ror #8]
     f70:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     f74:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     f78:	74007365 	strvc	r7, [r0], #-869	; 0xfffffc9b
     f7c:	57706d65 	ldrbpl	r6, [r0, -r5, ror #26]!
     f80:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     f84:	61724733 	cmnvs	r2, r3, lsr r7
     f88:	3a430079 	bcc	10c1174 <startup-0x1ef3ee8c>
     f8c:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     f90:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; edc <startup-0x1ffff124>
     f94:	616c706f 	cmnvs	ip, pc, rrx
     f98:	61726f62 	cmnvs	r2, r2, ror #30
     f9c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     fa0:	442f7265 	strtmi	r7, [pc], #-613	; fa8 <startup-0x1ffff058>
     fa4:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     fa8:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     fac:	2f432f68 	svccs	0x00432f68
     fb0:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     fb4:	00632e68 	rsbeq	r2, r3, r8, ror #28
     fb8:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     fbc:	675f3168 	ldrbvs	r3, [pc, -r8, ror #2]
     fc0:	5f796172 	svcpl	0x00796172
     fc4:	73746962 	cmnvc	r4, #1605632	; 0x188000
     fc8:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     fcc:	5f336863 	svcpl	0x00336863
     fd0:	63616c62 	cmnvs	r1, #25088	; 0x6200
     fd4:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     fd8:	77007374 	smlsdxvc	r0, r4, r3, r7
     fdc:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     fe0:	616d4932 	cmnvs	sp, r2, lsr r9
     fe4:	64006567 	strvs	r6, [r0], #-1383	; 0xfffffa99
     fe8:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
     fec:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     ff0:	50494400 	subpl	r4, r9, r0, lsl #8
     ff4:	616d4934 	cmnvs	sp, r4, lsr r9
     ff8:	44006567 	strmi	r6, [r0], #-1383	; 0xfffffa99
     ffc:	49315049 	ldmdbmi	r1!, {r0, r3, r6, ip, lr}
    1000:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1004:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1008:	50494470 	subpl	r4, r9, r0, ror r4
    100c:	67694c32 			; <UNDEFINED> instruction: 0x67694c32
    1010:	74007468 	strvc	r7, [r0], #-1128	; 0xfffffb98
    1014:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
    1018:	42335049 	eorsmi	r5, r3, #73	; 0x49
    101c:	6b63616c 	blvs	18d95d4 <startup-0x1e726a2c>
    1020:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1024:	50494470 	subpl	r4, r9, r0, ror r4
    1028:	61724732 	cmnvs	r2, r2, lsr r7
    102c:	49440079 	stmdbmi	r4, {r0, r3, r4, r5, r6}^
    1030:	72473150 	subvc	r3, r7, #80, 2
    1034:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
    1038:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
    103c:	694c5049 	stmdbvs	ip, {r0, r3, r6, ip, lr}^
    1040:	00746867 	rsbseq	r6, r4, r7, ror #16
    1044:	49504944 	ldmdbmi	r0, {r2, r6, r8, fp, lr}^
    1048:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    104c:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
    1050:	445f7469 	ldrbmi	r7, [pc], #-1129	; 1058 <startup-0x1fffefa8>
    1054:	74005049 	strvc	r5, [r0], #-73	; 0xffffffb7
    1058:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
    105c:	72475049 	subvc	r5, r7, #73	; 0x49
    1060:	44007961 	strmi	r7, [r0], #-2401	; 0xfffff69f
    1064:	42315049 	eorsmi	r5, r1, #73	; 0x49
    1068:	6b63616c 	blvs	18d9620 <startup-0x1e7269e0>
    106c:	616c7000 	cmnvs	ip, r0
    1070:	50726579 	rsbspl	r6, r2, r9, ror r5
    1074:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
    1078:	596e6f69 	stmdbpl	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    107c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1080:	50494470 	subpl	r4, r9, r0, ror r4
    1084:	61724733 	cmnvs	r2, r3, lsr r7
    1088:	49440079 	stmdbmi	r4, {r0, r3, r4, r5, r6}^
    108c:	6d493350 	stclvs	3, cr3, [r9, #-320]	; 0xfffffec0
    1090:	00656761 	rsbeq	r6, r5, r1, ror #14
    1094:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1098:	33504944 	cmpcc	r0, #68, 18	; 0x110000
    109c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    10a0:	49440074 	stmdbmi	r4, {r2, r4, r5, r6}^
    10a4:	64705550 	ldrbtvs	r5, [r0], #-1360	; 0xfffffab0
    10a8:	00657461 	rsbeq	r7, r5, r1, ror #8
    10ac:	706d6574 	rsbvc	r6, sp, r4, ror r5
    10b0:	32504944 	subscc	r4, r0, #68, 18	; 0x110000
    10b4:	63616c42 	cmnvs	r1, #16896	; 0x4200
    10b8:	4944006b 	stmdbmi	r4, {r0, r1, r3, r5, r6}^
    10bc:	6d493250 	sfmvs	f3, 2, [r9, #-320]	; 0xfffffec0
    10c0:	00656761 	rsbeq	r6, r5, r1, ror #14
    10c4:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    10c8:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    10cc:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    10d0:	6f62616c 	svcvs	0x0062616c
    10d4:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    10d8:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    10dc:	5049442f 	subpl	r4, r9, pc, lsr #8
    10e0:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    10e4:	2f686374 	svccs	0x00686374
    10e8:	49442f43 	stmdbmi	r4, {r0, r1, r6, r8, r9, sl, fp, sp}^
    10ec:	00632e50 	rsbeq	r2, r3, r0, asr lr
    10f0:	31504944 	cmpcc	r0, r4, asr #18
    10f4:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    10f8:	49440074 	stmdbmi	r4, {r2, r4, r5, r6}^
    10fc:	6a624f50 	bvs	1894e44 <startup-0x1e76b1bc>
    1100:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1104:	50494470 	subpl	r4, r9, r0, ror r4
    1108:	63616c42 	cmnvs	r1, #16896	; 0x4200
    110c:	6c70006b 	ldclvs	0, cr0, [r0], #-428	; 0xfffffe54
    1110:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
    1114:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
    1118:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    111c:	65730058 	ldrbvs	r0, [r3, #-88]!	; 0xffffffa8
    1120:	616c5074 	smcvs	50436	; 0xc504
    1124:	50726579 	rsbspl	r6, r2, r9, ror r5
    1128:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
    112c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1130:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    1134:	675f3165 	ldrbvs	r3, [pc, -r5, ror #2]
    1138:	5f796172 	svcpl	0x00796172
    113c:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1140:	616c6600 	cmnvs	ip, r0, lsl #12
    1144:	4231656d 	eorsmi	r6, r1, #457179136	; 0x1b400000
    1148:	6b63616c 	blvs	18d9700 <startup-0x1e726900>
    114c:	616c6600 	cmnvs	ip, r0, lsl #12
    1150:	5f32656d 	svcpl	0x0032656d
    1154:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
    1158:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    115c:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    1160:	6c46706d 	mcrrvs	0, 6, r7, r6, cr13
    1164:	4c656d61 	stclmi	13, cr6, [r5], #-388	; 0xfffffe7c
    1168:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    116c:	616c6600 	cmnvs	ip, r0, lsl #12
    1170:	5f32656d 	svcpl	0x0032656d
    1174:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    1178:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    117c:	66007374 			; <UNDEFINED> instruction: 0x66007374
    1180:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    1184:	67694c33 			; <UNDEFINED> instruction: 0x67694c33
    1188:	66007468 	strvs	r7, [r0], -r8, ror #8
    118c:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    1190:	616c4232 	cmnvs	ip, r2, lsr r2
    1194:	74006b63 	strvc	r6, [r0], #-2915	; 0xfffff49d
    1198:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
    119c:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    11a0:	616c4232 	cmnvs	ip, r2, lsr r2
    11a4:	74006b63 	strvc	r6, [r0], #-2915	; 0xfffff49d
    11a8:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
    11ac:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    11b0:	67694c32 			; <UNDEFINED> instruction: 0x67694c32
    11b4:	66007468 	strvs	r7, [r0], -r8, ror #8
    11b8:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    11bc:	696c5f33 	stmdbvs	ip!, {r0, r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    11c0:	5f746867 	svcpl	0x00746867
    11c4:	73746962 	cmnvc	r4, #1605632	; 0x188000
    11c8:	616c6600 	cmnvs	ip, r0, lsl #12
    11cc:	624f656d 	subvs	r6, pc, #457179136	; 0x1b400000
    11d0:	6574006a 	ldrbvs	r0, [r4, #-106]!	; 0xffffff96
    11d4:	6c46706d 	mcrrvs	0, 6, r7, r6, cr13
    11d8:	32656d61 	rsbcc	r6, r5, #6208	; 0x1840
    11dc:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    11e0:	616c6600 	cmnvs	ip, r0, lsl #12
    11e4:	4934656d 	ldmdbmi	r4!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
    11e8:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    11ec:	616c6600 	cmnvs	ip, r0, lsl #12
    11f0:	5f31656d 	svcpl	0x0031656d
    11f4:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    11f8:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    11fc:	66007374 			; <UNDEFINED> instruction: 0x66007374
    1200:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    1204:	616d4931 	cmnvs	sp, r1, lsr r9
    1208:	66006567 	strvs	r6, [r0], -r7, ror #10
    120c:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    1210:	616c4233 	cmnvs	ip, r3, lsr r2
    1214:	74006b63 	strvc	r6, [r0], #-2915	; 0xfffff49d
    1218:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
    121c:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    1220:	67694c33 			; <UNDEFINED> instruction: 0x67694c33
    1224:	66007468 	strvs	r7, [r0], -r8, ror #8
    1228:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    122c:	61724733 	cmnvs	r2, r3, lsr r7
    1230:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
    1234:	6c46706d 	mcrrvs	0, 6, r7, r6, cr13
    1238:	34656d61 	strbtcc	r6, [r5], #-3425	; 0xfffff29f
    123c:	63616c42 	cmnvs	r1, #16896	; 0x4200
    1240:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
    1244:	6c46706d 	mcrrvs	0, 6, r7, r6, cr13
    1248:	34656d61 	strbtcc	r6, [r5], #-3425	; 0xfffff29f
    124c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    1250:	6c660074 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30
    1254:	33656d61 	cmncc	r5, #6208	; 0x1840
    1258:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    125c:	6c660065 	stclvs	0, cr0, [r6], #-404	; 0xfffffe6c
    1260:	33656d61 	cmncc	r5, #6208	; 0x1840
    1264:	616c625f 	cmnvs	ip, pc, asr r2
    1268:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
    126c:	00737469 	rsbseq	r7, r3, r9, ror #8
    1270:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    1274:	6c5f3465 	cfldrdvs	mvd3, [pc], {101}	; 0x65
    1278:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    127c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1280:	6c660073 	stclvs	0, cr0, [r6], #-460	; 0xfffffe34
    1284:	33656d61 	cmncc	r5, #6208	; 0x1840
    1288:	6172675f 	cmnvs	r2, pc, asr r7
    128c:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1290:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
    1294:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
    1298:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    129c:	61724734 	cmnvs	r2, r4, lsr r7
    12a0:	6c660079 	stclvs	0, cr0, [r6], #-484	; 0xfffffe1c
    12a4:	32656d61 	rsbcc	r6, r5, #6208	; 0x1840
    12a8:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    12ac:	6c660065 	stclvs	0, cr0, [r6], #-404	; 0xfffffe6c
    12b0:	31656d61 	cmncc	r5, r1, ror #26
    12b4:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    12b8:	616c6600 	cmnvs	ip, r0, lsl #12
    12bc:	5f32656d 	svcpl	0x0032656d
    12c0:	63616c62 	cmnvs	r1, #25088	; 0x6200
    12c4:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    12c8:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
    12cc:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
    12d0:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    12d4:	63616c42 	cmnvs	r1, #16896	; 0x4200
    12d8:	6c66006b 	stclvs	0, cr0, [r6], #-428	; 0xfffffe54
    12dc:	34656d61 	strbtcc	r6, [r5], #-3425	; 0xfffff29f
    12e0:	616c625f 	cmnvs	ip, pc, asr r2
    12e4:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
    12e8:	00737469 	rsbseq	r7, r3, r9, ror #8
    12ec:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    12f0:	72473465 	subvc	r3, r7, #1694498816	; 0x65000000
    12f4:	66007961 	strvs	r7, [r0], -r1, ror #18
    12f8:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    12fc:	6c625f31 	stclvs	15, cr5, [r2], #-196	; 0xffffff3c
    1300:	5f6b6361 	svcpl	0x006b6361
    1304:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1308:	616c6600 	cmnvs	ip, r0, lsl #12
    130c:	4c31656d 	cfldr32mi	mvfx6, [r1], #-436	; 0xfffffe4c
    1310:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1314:	616c6600 	cmnvs	ip, r0, lsl #12
    1318:	5f34656d 	svcpl	0x0034656d
    131c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
    1320:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1324:	6c660073 	stclvs	0, cr0, [r6], #-460	; 0xfffffe34
    1328:	34656d61 	strbtcc	r6, [r5], #-3425	; 0xfffff29f
    132c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    1330:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
    1334:	6c46706d 	mcrrvs	0, 6, r7, r6, cr13
    1338:	33656d61 	cmncc	r5, #6208	; 0x1840
    133c:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    1340:	616c6600 	cmnvs	ip, r0, lsl #12
    1344:	6d49656d 	cfstr64vs	mvdx6, [r9, #-436]	; 0xfffffe4c
    1348:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    134c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1350:	616c4670 	smcvs	50272	; 0xc460
    1354:	4233656d 	eorsmi	r6, r3, #457179136	; 0x1b400000
    1358:	6b63616c 	blvs	18d9910 <startup-0x1e7266f0>
    135c:	616c6600 	cmnvs	ip, r0, lsl #12
    1360:	4732656d 	ldrmi	r6, [r2, -sp, ror #10]!
    1364:	00796172 	rsbseq	r6, r9, r2, ror r1
    1368:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    136c:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    1370:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    1374:	6f62616c 	svcvs	0x0062616c
    1378:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    137c:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    1380:	5049442f 	subpl	r4, r9, pc, lsr #8
    1384:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    1388:	2f686374 	svccs	0x00686374
    138c:	6c662f43 	stclvs	15, cr2, [r6], #-268	; 0xfffffef4
    1390:	2e656d61 	cdpcs	13, 6, cr6, cr5, cr1, {3}
    1394:	65740063 	ldrbvs	r0, [r4, #-99]!	; 0xffffff9d
    1398:	6c46706d 	mcrrvs	0, 6, r7, r6, cr13
    139c:	47656d61 	strbmi	r6, [r5, -r1, ror #26]!
    13a0:	00796172 	rsbseq	r6, r9, r2, ror r1
    13a4:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    13a8:	6c423465 	cfstrdvs	mvd3, [r2], {101}	; 0x65
    13ac:	006b6361 	rsbeq	r6, fp, r1, ror #6
    13b0:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    13b4:	694c3265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp}^
    13b8:	00746867 	rsbseq	r6, r4, r7, ror #16
    13bc:	65676170 	strbvs	r6, [r7, #-368]!	; 0xfffffe90
    13c0:	61726700 	cmnvs	r2, r0, lsl #14
    13c4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    13c8:	6165725f 	cmnvs	r5, pc, asr r2
    13cc:	75620064 	strbvc	r0, [r2, #-100]!	; 0xffffff9c
    13d0:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    13d4:	78697000 	stmdavc	r9!, {ip, sp, lr}^
    13d8:	00326c65 	eorseq	r6, r2, r5, ror #24
    13dc:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
    13e0:	6d61675f 	stclvs	7, cr6, [r1, #-380]!	; 0xfffffe84
    13e4:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
    13e8:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
    13ec:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    13f0:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 1336 <startup-0x1fffecca>	; <UNPREDICTABLE>
    13f4:	6f726369 	svcvs	0x00726369
    13f8:	61726700 	cmnvs	r2, r0, lsl #14
    13fc:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    1400:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    1404:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
    1408:	616d6d6f 	cmnvs	sp, pc, ror #26
    140c:	6300646e 	movwvs	r6, #1134	; 0x46e
    1410:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1414:	6361625f 	cmnvs	r1, #-268435451	; 0xf0000005
    1418:	6675426b 	ldrbtvs	r4, [r5], -fp, ror #4
    141c:	00726566 	rsbseq	r6, r2, r6, ror #10
    1420:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
    1424:	4f67006c 	svcmi	0x0067006c
    1428:	67006a62 	strvs	r6, [r0, -r2, ror #20]
    142c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
    1430:	645f6369 	ldrbvs	r6, [pc], #-873	; 1438 <startup-0x1fffebc8>
    1434:	5f776172 	svcpl	0x00776172
    1438:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
    143c:	64006e65 	strvs	r6, [r0], #-3685	; 0xfffff19b
    1440:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    1444:	6c696d5f 	stclvs	13, cr6, [r9], #-380	; 0xfffffe84
    1448:	7300696c 	movwvc	r6, #2412	; 0x96c
    144c:	5f776f68 	svcpl	0x00776f68
    1450:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
    1454:	72640065 	rsbvc	r0, r4, #101	; 0x65
    1458:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
    145c:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
    1460:	65640065 	strbvs	r0, [r4, #-101]!	; 0xffffff9b
    1464:	5f79616c 	svcpl	0x0079616c
    1468:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
    146c:	72670073 	rsbvc	r0, r7, #115	; 0x73
    1470:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
    1474:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
    1478:	00657469 	rsbeq	r7, r5, r9, ror #8
    147c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
    1480:	6c616353 	stclvs	3, cr6, [r1], #-332	; 0xfffffeb4
    1484:	73655465 	cmnvc	r5, #1694498816	; 0x65000000
    1488:	72670074 	rsbvc	r0, r7, #116	; 0x74
    148c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
    1490:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
    1494:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
    1498:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
    149c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    14a0:	2f3a4300 	svccs	0x003a4300
    14a4:	2f706f6d 	svccs	0x00706f6d
    14a8:	6f4d2f63 	svcvs	0x004d2f63
    14ac:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    14b0:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    14b4:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    14b8:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    14bc:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    14c0:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    14c4:	672f432f 	strvs	r4, [pc, -pc, lsr #6]!
    14c8:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
    14cc:	2e736369 	cdpcs	3, 7, cr6, cr3, cr9, {3}
    14d0:	72670063 	rsbvc	r0, r7, #99	; 0x63
    14d4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
    14d8:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
    14dc:	645f6461 	ldrbvs	r6, [pc], #-1121	; 14e4 <startup-0x1fffeb1c>
    14e0:	00617461 	rsbeq	r7, r1, r1, ror #8
    14e4:	6f6c6f63 	svcvs	0x006c6f63
    14e8:	65730072 	ldrbvs	r0, [r3, #-114]!	; 0xffffff8e
    14ec:	70755f74 	rsbsvc	r5, r5, r4, ror pc
    14f0:	6172645f 	cmnvs	r2, pc, asr r4
    14f4:	75625f77 	strbvc	r5, [r2, #-3959]!	; 0xfffff089
    14f8:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    14fc:	72670073 	rsbvc	r0, r7, #115	; 0x73
    1500:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
    1504:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
    1508:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
    150c:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
    1510:	64007465 	strvs	r7, [r0], #-1125	; 0xfffffb9b
    1514:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    1518:	3035325f 	eorscc	r3, r5, pc, asr r2
    151c:	6600736e 	strvs	r7, [r0], -lr, ror #6
    1520:	526c6c69 	rsbpl	r6, ip, #26880	; 0x6900
    1524:	61746365 	cmnvs	r4, r5, ror #6
    1528:	656c676e 	strbvs	r6, [ip, #-1902]!	; 0xfffff892
    152c:	73616d00 	cmnvc	r1, #0, 26
    1530:	7266006b 	rsbvc	r0, r6, #107	; 0x6b
    1534:	5f656d61 	svcpl	0x00656d61
    1538:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
    153c:	67006874 	smlsdxvs	r0, r4, r8, r6
    1540:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
    1544:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
    1548:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    154c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    1550:	79620061 	stmdbvc	r2!, {r0, r5, r6}^
    1554:	77006574 	smlsdxvc	r0, r4, r5, r6
    1558:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
    155c:	5f6e695f 	svcpl	0x006e695f
    1560:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    1564:	6c630073 	stclvs	0, cr0, [r3], #-460	; 0xfffffe34
    1568:	5f726165 	svcpl	0x00726165
    156c:	5f6c6c61 	svcpl	0x006c6c61
    1570:	6b636162 	blvs	18d9b00 <startup-0x1e726500>
    1574:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    1578:	00737265 	rsbseq	r7, r3, r5, ror #4
    157c:	61656c63 	cmnvs	r5, r3, ror #24
    1580:	63655272 	cmnvs	r5, #536870919	; 0x20000007
    1584:	676e6174 			; <UNDEFINED> instruction: 0x676e6174
    1588:	6900656c 	stmdbvs	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
    158c:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    1590:	6c657300 	stclvs	3, cr7, [r5], #-0
    1594:	5f746365 	svcpl	0x00746365
    1598:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
    159c:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
    15a0:	67007265 	strvs	r7, [r0, -r5, ror #4]
    15a4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
    15a8:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
    15ac:	5f746961 	svcpl	0x00746961
    15b0:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    15b4:	6c630079 	stclvs	0, cr0, [r3], #-484	; 0xfffffe1c
    15b8:	5f726165 	svcpl	0x00726165
    15bc:	73696874 	cmnvc	r9, #116, 16	; 0x740000
    15c0:	6b636142 	blvs	18d9ad0 <startup-0x1e726530>
    15c4:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    15c8:	67007265 	strvs	r7, [r0, -r5, ror #4]
    15cc:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
    15d0:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
    15d4:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
    15d8:	7a696c61 	bvc	1a5c764 <startup-0x1e5a389c>
    15dc:	72670065 	rsbvc	r0, r7, #101	; 0x65
    15e0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
    15e4:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
    15e8:	5f726165 	svcpl	0x00726165
    15ec:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
    15f0:	6c006e65 	stcvs	14, cr6, [r0], {101}	; 0x65
    15f4:	5f64616f 	svcpl	0x0064616f
    15f8:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
    15fc:	3a430065 	bcc	10c1798 <startup-0x1ef3e868>
    1600:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
    1604:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 1550 <startup-0x1fffeab0>
    1608:	616c706f 	cmnvs	ip, pc, rrx
    160c:	61726f62 	cmnvs	r2, r2, ror #30
    1610:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1614:	442f7265 	strtmi	r7, [pc], #-613	; 161c <startup-0x1fffe9e4>
    1618:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
    161c:	63746957 	cmnvs	r4, #1425408	; 0x15c000
    1620:	2f432f68 	svccs	0x00432f68
    1624:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
    1628:	00632e65 	rsbeq	r2, r3, r5, ror #28
    162c:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
    1630:	7270735f 	rsbsvc	r7, r0, #2080374785	; 0x7c000001
    1634:	00657469 	rsbeq	r7, r5, r9, ror #8
    1638:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    163c:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    1640:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    1644:	6f62616c 	svcvs	0x0062616c
    1648:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    164c:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    1650:	5049442f 	subpl	r4, r9, pc, lsr #8
    1654:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    1658:	2f686374 	svccs	0x00686374
    165c:	70732f43 	rsbsvc	r2, r3, r3, asr #30
    1660:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1664:	4d00632e 	stcmi	3, cr6, [r0, #-184]	; 0xffffff48
    1668:	7265646f 	rsbvc	r6, r5, #1862270976	; 0x6f000000
    166c:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    1670:	5f70755f 	svcpl	0x0070755f
    1674:	004c4944 	subeq	r4, ip, r4, asr #18
    1678:	4872646f 	ldmdami	r2!, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
    167c:	00686769 	rsbeq	r6, r8, r9, ror #14
    1680:	7079546f 	rsbsvc	r5, r9, pc, ror #8
    1684:	47007265 	strmi	r7, [r0, -r5, ror #4]
    1688:	004f4950 	subeq	r4, pc, r0, asr r9	; <UNPREDICTABLE>
    168c:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
    1690:	64690072 	strbtvs	r0, [r9], #-114	; 0xffffff8e
    1694:	73655272 	cmnvc	r5, #536870919	; 0x20000007
    1698:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    169c:	3a430064 	bcc	10c1834 <startup-0x1ef3e7cc>
    16a0:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
    16a4:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 15f0 <startup-0x1fffea10>
    16a8:	616c706f 	cmnvs	ip, pc, rrx
    16ac:	61726f62 	cmnvs	r2, r2, ror #30
    16b0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    16b4:	442f7265 	strtmi	r7, [pc], #-613	; 16bc <startup-0x1fffe944>
    16b8:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
    16bc:	63746957 	cmnvs	r4, #1425408	; 0x15c000
    16c0:	2f432f68 	svccs	0x00432f68
    16c4:	6f697067 	svcvs	0x00697067
    16c8:	6f00632e 	svcvs	0x0000632e
    16cc:	73655274 	cmnvc	r5, #116, 4	; 0x40000007
    16d0:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    16d4:	65720064 	ldrbvs	r0, [r2, #-100]!	; 0xffffff9c
    16d8:	445f6461 	ldrbmi	r6, [pc], #-1121	; 16e0 <startup-0x1fffe920>
    16dc:	735f4c49 	cmpvc	pc, #18688	; 0x4900
    16e0:	6c676e69 	stclvs	14, cr6, [r7], #-420	; 0xfffffe5c
    16e4:	646f0065 	strbtvs	r0, [pc], #-101	; 16ec <startup-0x1fffe914>
    16e8:	776f4c72 			; <UNDEFINED> instruction: 0x776f4c72
    16ec:	70536f00 	subsvc	r6, r3, r0, lsl #30
    16f0:	72646565 	rsbvc	r6, r4, #423624704	; 0x19400000
    16f4:	72646900 	rsbvc	r6, r4, #0, 18
    16f8:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
    16fc:	72646900 	rsbvc	r6, r4, #0, 18
    1700:	00776f4c 	rsbseq	r6, r7, ip, asr #30
    1704:	5272646f 	rsbspl	r6, r2, #1862270976	; 0x6f000000
    1708:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    170c:	00646576 	rsbeq	r6, r4, r6, ror r5
    1710:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1714:	4c49445f 	cfstrdmi	mvd4, [r9], {95}	; 0x5f
    1718:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
    171c:	70615f74 	rsbvc	r5, r1, r4, ror pc
    1720:	63696c70 	cmnvs	r9, #112, 24	; 0x7000
    1724:	6f697461 	svcvs	0x00697461
    1728:	696c006e 	stmdbvs	ip!, {r1, r2, r3, r5, r6}^
    172c:	3274696d 	rsbscc	r6, r4, #1785856	; 0x1b4000
    1730:	63736100 	cmnvs	r3, #0, 2
    1734:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
    1738:	5f646165 	svcpl	0x00646165
    173c:	61746164 	cmnvs	r4, r4, ror #2
    1740:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    1744:	5f70755f 	svcpl	0x0070755f
    1748:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    174c:	73610069 	cmnvc	r1, #105	; 0x69
    1750:	5f696963 	svcpl	0x00696963
    1754:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    1758:	6c6f6300 	stclvs	3, cr6, [pc], #-0	; 1760 <startup-0x1fffe8a0>
    175c:	006e6d75 	rsbeq	r6, lr, r5, ror sp
    1760:	61656c63 	cmnvs	r5, r3, ror #24
    1764:	73615f72 	cmnvc	r1, #456	; 0x1c8
    1768:	00696963 	rsbeq	r6, r9, r3, ror #18
    176c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1770:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
    1774:	5f657469 	svcpl	0x00657469
    1778:	74726170 	ldrbtvc	r6, [r2], #-368	; 0xfffffe90
    177c:	63736100 	cmnvs	r3, #0, 2
    1780:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
    1784:	5f646165 	svcpl	0x00646165
    1788:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
    178c:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
    1790:	61007265 	tstvs	r0, r5, ror #4
    1794:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1798:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
    179c:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    17a0:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
    17a4:	73610074 	cmnvc	r1, #116	; 0x74
    17a8:	5f696963 	svcpl	0x00696963
    17ac:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    17b0:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    17b4:	65740064 	ldrbvs	r0, [r4, #-100]!	; 0xffffff9c
    17b8:	00317473 	eorseq	r7, r1, r3, ror r4
    17bc:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
    17c0:	64610032 	strbtvs	r0, [r1], #-50	; 0xffffffce
    17c4:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    17c8:	73610073 	cmnvc	r1, #115	; 0x73
    17cc:	5f696963 	svcpl	0x00696963
    17d0:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    17d4:	61645f65 	cmnvs	r4, r5, ror #30
    17d8:	61006174 	tstvs	r0, r4, ror r1
    17dc:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    17e0:	7365745f 	cmnvc	r5, #1593835520	; 0x5f000000
    17e4:	73610074 	cmnvc	r1, #116	; 0x74
    17e8:	5f696963 	svcpl	0x00696963
    17ec:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    17f0:	6174735f 	cmnvs	r4, pc, asr r3
    17f4:	00737574 	rsbseq	r7, r3, r4, ror r5
    17f8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    17fc:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
    1800:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
    1804:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
    1808:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    180c:	63736100 	cmnvs	r3, #0, 2
    1810:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
    1814:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1818:	63736100 	cmnvs	r3, #0, 2
    181c:	675f6969 	ldrbvs	r6, [pc, -r9, ror #18]
    1820:	586f546f 	stmdapl	pc!, {r0, r1, r2, r3, r5, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1824:	73610059 	cmnvc	r1, #89	; 0x59
    1828:	5f696963 	svcpl	0x00696963
    182c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    1830:	6f635f65 	svcvs	0x00635f65
    1834:	6f72746e 	svcvs	0x0072746e
    1838:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
    183c:	63736100 	cmnvs	r3, #0, 2
    1840:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
    1844:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1848:	6168635f 	cmnvs	r8, pc, asr r3
    184c:	696c0072 	stmdbvs	ip!, {r1, r4, r5, r6}^
    1850:	3174696d 	cmncc	r4, sp, ror #18
    1854:	2f3a4300 	svccs	0x003a4300
    1858:	2f706f6d 	svccs	0x00706f6d
    185c:	6f4d2f63 	svcvs	0x004d2f63
    1860:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    1864:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    1868:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    186c:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1870:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    1874:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1878:	612f432f 			; <UNDEFINED> instruction: 0x612f432f
    187c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1880:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    1884:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
    1888:	6900632e 	stmdbvs	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
    188c:	5f74696e 	svcpl	0x0074696e
    1890:	776f6c73 			; <UNDEFINED> instruction: 0x776f6c73
    1894:	7865745f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
    1898:	656c0074 	strbvs	r0, [ip, #-116]!	; 0xffffff8c
    189c:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    18a0:	5f666f5f 	svcpl	0x00666f5f
    18a4:	31776f72 	cmncc	r7, r2, ror pc
    18a8:	2f3a4300 	svccs	0x003a4300
    18ac:	2f706f6d 	svccs	0x00706f6d
    18b0:	6f4d2f63 	svcvs	0x004d2f63
    18b4:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    18b8:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    18bc:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    18c0:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    18c4:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    18c8:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    18cc:	732f432f 			; <UNDEFINED> instruction: 0x732f432f
    18d0:	5f776f6c 	svcpl	0x00776f6c
    18d4:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
    18d8:	6900632e 	stmdbvs	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
    18dc:	6f6f646e 	svcvs	0x006f646e
    18e0:	6d497372 	stclvs	3, cr7, [r9, #-456]	; 0xfffffe38
    18e4:	00656761 	rsbeq	r6, r5, r1, ror #14
    18e8:	6f646e69 	svcvs	0x00646e69
    18ec:	4273726f 	rsbsmi	r7, r3, #-268435450	; 0xf0000006
    18f0:	6b63616c 	blvs	18d9ea8 <startup-0x1e726158>
    18f4:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    18f8:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    18fc:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    1900:	69007365 	stmdbvs	r0, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    1904:	6f6f646e 	svcvs	0x006f646e
    1908:	6c5f7372 	mrrcvs	3, 7, r7, pc, cr2	; <UNPREDICTABLE>
    190c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1910:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1914:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    1918:	6e49706d 	cdpvs	0, 4, cr7, cr9, cr13, {3}
    191c:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1920:	61724773 	cmnvs	r2, r3, ror r7
    1924:	6e690079 	mcrvs	0, 3, r0, cr9, cr9, {3}
    1928:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    192c:	72675f73 	rsbvc	r5, r7, #460	; 0x1cc
    1930:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
    1934:	00737469 	rsbseq	r7, r3, r9, ror #8
    1938:	706d6574 	rsbvc	r6, sp, r4, ror r5
    193c:	6f646e49 	svcvs	0x00646e49
    1940:	4c73726f 	lfmmi	f7, 2, [r3], #-444	; 0xfffffe44
    1944:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1948:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    194c:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1950:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    1954:	3a430074 	bcc	10c1b2c <startup-0x1ef3e4d4>
    1958:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
    195c:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 18a8 <startup-0x1fffe758>
    1960:	616c706f 	cmnvs	ip, pc, rrx
    1964:	61726f62 	cmnvs	r2, r2, ror #30
    1968:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    196c:	442f7265 	strtmi	r7, [pc], #-613	; 1974 <startup-0x1fffe68c>
    1970:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
    1974:	63746957 	cmnvs	r4, #1425408	; 0x15c000
    1978:	2f432f68 	svccs	0x00432f68
    197c:	6f646e69 	svcvs	0x00646e69
    1980:	2e73726f 	cdpcs	2, 7, cr7, cr3, cr15, {3}
    1984:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
    1988:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    198c:	6c625f73 	stclvs	15, cr5, [r2], #-460	; 0xfffffe34
    1990:	5f6b6361 	svcpl	0x006b6361
    1994:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1998:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    199c:	646e4970 	strbtvs	r4, [lr], #-2416	; 0xfffff690
    19a0:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    19a4:	63616c42 	cmnvs	r1, #16896	; 0x4200
    19a8:	6e69006b 	cdpvs	0, 6, cr0, cr9, cr11, {3}
    19ac:	695f7469 	ldmdbvs	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    19b0:	6f6f646e 	svcvs	0x006f646e
    19b4:	69007372 	stmdbvs	r0, {r1, r4, r5, r6, r8, r9, ip, sp, lr}
    19b8:	6f6f646e 	svcvs	0x006f646e
    19bc:	624f7372 	subvs	r7, pc, #-939524095	; 0xc8000001
    19c0:	6e69006a 	cdpvs	0, 6, cr0, cr9, cr10, {3}
    19c4:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    19c8:	61724773 	cmnvs	r2, r3, ror r7
    19cc:	6e690079 	mcrvs	0, 3, r0, cr9, cr9, {3}
    19d0:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    19d4:	694c3273 	stmdbvs	ip, {r0, r1, r4, r5, r6, r9, ip, sp}^
    19d8:	00746867 	rsbseq	r6, r4, r7, ror #16
    19dc:	6f646e69 	svcvs	0x00646e69
    19e0:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    19e4:	616c625f 	cmnvs	ip, pc, asr r2
    19e8:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
    19ec:	00737469 	rsbseq	r7, r3, r9, ror #8
    19f0:	706d6574 	rsbvc	r6, sp, r4, ror r5
    19f4:	6f646e49 	svcvs	0x00646e49
    19f8:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    19fc:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    1a00:	6e690074 	mcrvs	0, 3, r0, cr9, cr4, {3}
    1a04:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1a08:	72473273 	subvc	r3, r7, #805306375	; 0x30000007
    1a0c:	43007961 	movwmi	r7, #2401	; 0x961
    1a10:	6f6d2f3a 	svcvs	0x006d2f3a
    1a14:	2f632f70 	svccs	0x00632f70
    1a18:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    1a1c:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    1a20:	6f697461 	svcvs	0x00697461
    1a24:	2f72656e 	svccs	0x0072656e
    1a28:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    1a2c:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    1a30:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    1a34:	646e692f 	strbtvs	r6, [lr], #-2351	; 0xfffff6d1
    1a38:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1a3c:	00632e32 	rsbeq	r2, r3, r2, lsr lr
    1a40:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1a44:	6f646e49 	svcvs	0x00646e49
    1a48:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1a4c:	63616c42 	cmnvs	r1, #16896	; 0x4200
    1a50:	6e69006b 	cdpvs	0, 6, cr0, cr9, cr11, {3}
    1a54:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1a58:	6c423273 	sfmvs	f3, 2, [r2], {115}	; 0x73
    1a5c:	006b6361 	rsbeq	r6, fp, r1, ror #6
    1a60:	6f646e69 	svcvs	0x00646e69
    1a64:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1a68:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    1a6c:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
    1a70:	695f7469 	ldmdbvs	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    1a74:	6f6f646e 	svcvs	0x006f646e
    1a78:	00327372 	eorseq	r7, r2, r2, ror r3
    1a7c:	6f646e69 	svcvs	0x00646e69
    1a80:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1a84:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
    1a88:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
    1a8c:	00737469 	rsbseq	r7, r3, r9, ror #8
    1a90:	6f646e69 	svcvs	0x00646e69
    1a94:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1a98:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    1a9c:	69007365 	stmdbvs	r0, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    1aa0:	6f6f646e 	svcvs	0x006f646e
    1aa4:	5f327372 	svcpl	0x00327372
    1aa8:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
    1aac:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1ab0:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
    1ab4:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1ab8:	624f3273 	subvs	r3, pc, #805306375	; 0x30000007
    1abc:	6574006a 	ldrbvs	r0, [r4, #-106]!	; 0xffffff96
    1ac0:	6e49706d 	cdpvs	0, 4, cr7, cr9, cr13, {3}
    1ac4:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1ac8:	72473273 	subvc	r3, r7, #805306375	; 0x30000007
    1acc:	43007961 	movwmi	r7, #2401	; 0x961
    1ad0:	6f6d2f3a 	svcvs	0x006d2f3a
    1ad4:	2f632f70 	svccs	0x00632f70
    1ad8:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    1adc:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    1ae0:	6f697461 	svcvs	0x00697461
    1ae4:	2f72656e 	svccs	0x0072656e
    1ae8:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    1aec:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    1af0:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    1af4:	6f72742f 	svcvs	0x0072742f
    1af8:	2e796870 	mrccs	8, 3, r6, cr9, cr0, {3}
    1afc:	72740063 	rsbsvc	r0, r4, #99	; 0x63
    1b00:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1b04:	616c625f 	cmnvs	ip, pc, asr r2
    1b08:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
    1b0c:	00737469 	rsbseq	r7, r3, r9, ror #8
    1b10:	706f7274 	rsbvc	r7, pc, r4, ror r2	; <UNPREDICTABLE>
    1b14:	694c7968 	stmdbvs	ip, {r3, r5, r6, r8, fp, ip, sp, lr}^
    1b18:	00746867 	rsbseq	r6, r4, r7, ror #16
    1b1c:	706f7274 	rsbvc	r7, pc, r4, ror r2	; <UNPREDICTABLE>
    1b20:	624f7968 	subvs	r7, pc, #104, 18	; 0x1a0000
    1b24:	7274006a 	rsbsvc	r0, r4, #106	; 0x6a
    1b28:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1b2c:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
    1b30:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
    1b34:	00737469 	rsbseq	r7, r3, r9, ror #8
    1b38:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1b3c:	706f7254 	rsbvc	r7, pc, r4, asr r2	; <UNPREDICTABLE>
    1b40:	6c427968 	mcrrvs	9, 6, r7, r2, cr8	; <UNPREDICTABLE>
    1b44:	006b6361 	rsbeq	r6, fp, r1, ror #6
    1b48:	706f7274 	rsbvc	r7, pc, r4, ror r2	; <UNPREDICTABLE>
    1b4c:	675f7968 	ldrbvs	r7, [pc, -r8, ror #18]
    1b50:	5f796172 	svcpl	0x00796172
    1b54:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1b58:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1b5c:	6f725470 	svcvs	0x00725470
    1b60:	4c796870 	ldclmi	8, cr6, [r9], #-448	; 0xfffffe40
    1b64:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1b68:	6f727400 	svcvs	0x00727400
    1b6c:	47796870 			; <UNDEFINED> instruction: 0x47796870
    1b70:	00796172 	rsbseq	r6, r9, r2, ror r1
    1b74:	706f7274 	rsbvc	r7, pc, r4, ror r2	; <UNPREDICTABLE>
    1b78:	6d497968 	vstrvs.16	s15, [r9, #-208]	; 0xffffff30	; <UNPREDICTABLE>
    1b7c:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    1b80:	6f727400 	svcvs	0x00727400
    1b84:	49796870 	ldmdbmi	r9!, {r4, r5, r6, fp, sp, lr}^
    1b88:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1b8c:	6f727400 	svcvs	0x00727400
    1b90:	42796870 	rsbsmi	r6, r9, #112, 16	; 0x700000
    1b94:	6b63616c 	blvs	18da14c <startup-0x1e725eb4>
    1b98:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1b9c:	6f725470 	svcvs	0x00725470
    1ba0:	47796870 			; <UNDEFINED> instruction: 0x47796870
    1ba4:	00796172 	rsbseq	r6, r9, r2, ror r1

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000024 	andeq	r0, r0, r4, lsr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000034 	andcs	r0, r0, r4, lsr r0
  48:	000001c8 	andeq	r0, r0, r8, asr #3
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	300e4101 	andcc	r4, lr, r1, lsl #2
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	00000020 	andeq	r0, r0, r0, lsr #32
  60:	00000000 	andeq	r0, r0, r0
  64:	200001fc 	strdcs	r0, [r0], -ip
  68:	00001310 	andeq	r1, r0, r0, lsl r3
  6c:	400c0e41 	andmi	r0, ip, r1, asr #28
  70:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  74:	018e4002 	orreq	r4, lr, r2
  78:	09800e42 	stmibeq	r0, {r1, r6, r9, sl, fp}
  7c:	00070d41 	andeq	r0, r7, r1, asr #26
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	00000000 	andeq	r0, r0, r0
  88:	2000150c 	andcs	r1, r0, ip, lsl #10
  8c:	0000001e 	andeq	r0, r0, lr, lsl r0
  90:	40080e41 	andmi	r0, r8, r1, asr #28
  94:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  98:	100e4101 	andne	r4, lr, r1, lsl #2
  9c:	00070d41 	andeq	r0, r7, r1, asr #26
  a0:	0000000c 	andeq	r0, r0, ip
  a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  a8:	7c020001 	stcvc	0, cr0, [r2], {1}
  ac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	000000a0 	andeq	r0, r0, r0, lsr #1
  b8:	2000152c 	andcs	r1, r0, ip, lsr #10
  bc:	00000010 	andeq	r0, r0, r0, lsl r0
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	100e4101 	andne	r4, lr, r1, lsl #2
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	000000a0 	andeq	r0, r0, r0, lsr #1
  d8:	2000153c 	andcs	r1, r0, ip, lsr r5
  dc:	00000046 	andeq	r0, r0, r6, asr #32
  e0:	40080e41 	andmi	r0, r8, r1, asr #28
  e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e8:	100e4101 	andne	r4, lr, r1, lsl #2
  ec:	00070d41 	andeq	r0, r7, r1, asr #26
  f0:	0000000c 	andeq	r0, r0, ip
  f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  f8:	7c020001 	stcvc	0, cr0, [r2], {1}
  fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 108:	20001584 	andcs	r1, r0, r4, lsl #11
 10c:	00000184 	andeq	r0, r0, r4, lsl #3
 110:	40080e41 	andmi	r0, r8, r1, asr #28
 114:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 118:	380e4101 	stmdacc	lr, {r0, r8, lr}
 11c:	00070d41 	andeq	r0, r7, r1, asr #26
 120:	00000020 	andeq	r0, r0, r0, lsr #32
 124:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 128:	20001708 	andcs	r1, r0, r8, lsl #14
 12c:	00000124 	andeq	r0, r0, r4, lsr #2
 130:	400c0e41 	andmi	r0, ip, r1, asr #28
 134:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 138:	018e4002 	orreq	r4, lr, r2
 13c:	41180e41 	tstmi	r8, r1, asr #28
 140:	0000070d 	andeq	r0, r0, sp, lsl #14
 144:	0000000c 	andeq	r0, r0, ip
 148:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 14c:	7c020001 	stcvc	0, cr0, [r2], {1}
 150:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 154:	0000001c 	andeq	r0, r0, ip, lsl r0
 158:	00000144 	andeq	r0, r0, r4, asr #2
 15c:	2000182c 	andcs	r1, r0, ip, lsr #16
 160:	000001d4 	ldrdeq	r0, [r0], -r4
 164:	40080e41 	andmi	r0, r8, r1, asr #28
 168:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 16c:	100e4101 	andne	r4, lr, r1, lsl #2
 170:	00070d41 	andeq	r0, r7, r1, asr #26
 174:	0000000c 	andeq	r0, r0, ip
 178:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 17c:	7c020001 	stcvc	0, cr0, [r2], {1}
 180:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 184:	0000001c 	andeq	r0, r0, ip, lsl r0
 188:	00000174 	andeq	r0, r0, r4, ror r1
 18c:	20001a00 	andcs	r1, r0, r0, lsl #20
 190:	0000020c 	andeq	r0, r0, ip, lsl #4
 194:	40080e41 	andmi	r0, r8, r1, asr #28
 198:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 19c:	480e4101 	stmdami	lr, {r0, r8, lr}
 1a0:	00070d41 	andeq	r0, r7, r1, asr #26
 1a4:	00000020 	andeq	r0, r0, r0, lsr #32
 1a8:	00000174 	andeq	r0, r0, r4, ror r1
 1ac:	20001c0c 	andcs	r1, r0, ip, lsl #24
 1b0:	00000158 	andeq	r0, r0, r8, asr r1
 1b4:	400c0e41 	andmi	r0, ip, r1, asr #28
 1b8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 1bc:	018e4002 	orreq	r4, lr, r2
 1c0:	41180e41 	tstmi	r8, r1, asr #28
 1c4:	0000070d 	andeq	r0, r0, sp, lsl #14
 1c8:	0000000c 	andeq	r0, r0, ip
 1cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1d0:	7c020001 	stcvc	0, cr0, [r2], {1}
 1d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1dc:	000001c8 	andeq	r0, r0, r8, asr #3
 1e0:	20001d64 	andcs	r1, r0, r4, ror #26
 1e4:	00000140 	andeq	r0, r0, r0, asr #2
 1e8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f0:	300e4101 	andcc	r4, lr, r1, lsl #2
 1f4:	00070d41 	andeq	r0, r7, r1, asr #26
 1f8:	00000020 	andeq	r0, r0, r0, lsr #32
 1fc:	000001c8 	andeq	r0, r0, r8, asr #3
 200:	20001ea4 	andcs	r1, r0, r4, lsr #29
 204:	000000f8 	strdeq	r0, [r0], -r8
 208:	400c0e41 	andmi	r0, ip, r1, asr #28
 20c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 210:	018e4002 	orreq	r4, lr, r2
 214:	41180e41 	tstmi	r8, r1, asr #28
 218:	0000070d 	andeq	r0, r0, sp, lsl #14
 21c:	0000000c 	andeq	r0, r0, ip
 220:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 224:	7c020001 	stcvc	0, cr0, [r2], {1}
 228:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 22c:	0000001c 	andeq	r0, r0, ip, lsl r0
 230:	0000021c 	andeq	r0, r0, ip, lsl r2
 234:	20001f9c 	mulcs	r0, ip, pc	; <UNPREDICTABLE>
 238:	00000140 	andeq	r0, r0, r0, asr #2
 23c:	40080e41 	andmi	r0, r8, r1, asr #28
 240:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 244:	300e4101 	andcc	r4, lr, r1, lsl #2
 248:	00070d41 	andeq	r0, r7, r1, asr #26
 24c:	00000020 	andeq	r0, r0, r0, lsr #32
 250:	0000021c 	andeq	r0, r0, ip, lsl r2
 254:	200020dc 	ldrdcs	r2, [r0], -ip
 258:	000000f8 	strdeq	r0, [r0], -r8
 25c:	400c0e41 	andmi	r0, ip, r1, asr #28
 260:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 264:	018e4002 	orreq	r4, lr, r2
 268:	41180e41 	tstmi	r8, r1, asr #28
 26c:	0000070d 	andeq	r0, r0, sp, lsl #14
 270:	0000001c 	andeq	r0, r0, ip, lsl r0
 274:	0000021c 	andeq	r0, r0, ip, lsl r2
 278:	200021d4 	ldrdcs	r2, [r0], -r4
 27c:	00000028 	andeq	r0, r0, r8, lsr #32
 280:	40080e41 	andmi	r0, r8, r1, asr #28
 284:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 288:	100e4101 	andne	r4, lr, r1, lsl #2
 28c:	00070d41 	andeq	r0, r7, r1, asr #26
 290:	0000001c 	andeq	r0, r0, ip, lsl r0
 294:	0000021c 	andeq	r0, r0, ip, lsl r2
 298:	200021fc 	strdcs	r2, [r0], -ip
 29c:	000000c8 	andeq	r0, r0, r8, asr #1
 2a0:	40080e41 	andmi	r0, r8, r1, asr #28
 2a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a8:	100e4101 	andne	r4, lr, r1, lsl #2
 2ac:	00070d41 	andeq	r0, r7, r1, asr #26
 2b0:	0000000c 	andeq	r0, r0, ip
 2b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2b8:	7c020001 	stcvc	0, cr0, [r2], {1}
 2bc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c4:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 2c8:	200022c4 	andcs	r2, r0, r4, asr #5
 2cc:	000001a8 	andeq	r0, r0, r8, lsr #3
 2d0:	40080e41 	andmi	r0, r8, r1, asr #28
 2d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d8:	380e4101 	stmdacc	lr, {r0, r8, lr}
 2dc:	00070d41 	andeq	r0, r7, r1, asr #26
 2e0:	00000020 	andeq	r0, r0, r0, lsr #32
 2e4:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 2e8:	2000246c 	andcs	r2, r0, ip, ror #8
 2ec:	00000104 	andeq	r0, r0, r4, lsl #2
 2f0:	400c0e41 	andmi	r0, ip, r1, asr #28
 2f4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 2f8:	018e4002 	orreq	r4, lr, r2
 2fc:	41180e41 	tstmi	r8, r1, asr #28
 300:	0000070d 	andeq	r0, r0, sp, lsl #14
 304:	0000000c 	andeq	r0, r0, ip
 308:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 30c:	7c020001 	stcvc	0, cr0, [r2], {1}
 310:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 314:	00000018 	andeq	r0, r0, r8, lsl r0
 318:	00000304 	andeq	r0, r0, r4, lsl #6
 31c:	20002570 	andcs	r2, r0, r0, ror r5
 320:	00000044 	andeq	r0, r0, r4, asr #32
 324:	40080e41 	andmi	r0, r8, r1, asr #28
 328:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 32c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 330:	00000018 	andeq	r0, r0, r8, lsl r0
 334:	00000304 	andeq	r0, r0, r4, lsl #6
 338:	200025b4 			; <UNDEFINED> instruction: 0x200025b4
 33c:	00000044 	andeq	r0, r0, r4, asr #32
 340:	40080e41 	andmi	r0, r8, r1, asr #28
 344:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 348:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	00000304 	andeq	r0, r0, r4, lsl #6
 354:	200025f8 	strdcs	r2, [r0], -r8
 358:	0000002c 	andeq	r0, r0, ip, lsr #32
 35c:	40080e41 	andmi	r0, r8, r1, asr #28
 360:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 364:	100e4101 	andne	r4, lr, r1, lsl #2
 368:	00070d41 	andeq	r0, r7, r1, asr #26
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	00000304 	andeq	r0, r0, r4, lsl #6
 374:	20002624 	andcs	r2, r0, r4, lsr #12
 378:	00000026 	andeq	r0, r0, r6, lsr #32
 37c:	40080e41 	andmi	r0, r8, r1, asr #28
 380:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 384:	100e4101 	andne	r4, lr, r1, lsl #2
 388:	00070d41 	andeq	r0, r7, r1, asr #26
 38c:	0000001c 	andeq	r0, r0, ip, lsl r0
 390:	00000304 	andeq	r0, r0, r4, lsl #6
 394:	2000264a 	andcs	r2, r0, sl, asr #12
 398:	00000032 	andeq	r0, r0, r2, lsr r0
 39c:	40080e41 	andmi	r0, r8, r1, asr #28
 3a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3a8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ac:	00000018 	andeq	r0, r0, r8, lsl r0
 3b0:	00000304 	andeq	r0, r0, r4, lsl #6
 3b4:	2000267c 	andcs	r2, r0, ip, ror r6
 3b8:	00000018 	andeq	r0, r0, r8, lsl r0
 3bc:	40080e41 	andmi	r0, r8, r1, asr #28
 3c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3c4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 3c8:	00000018 	andeq	r0, r0, r8, lsl r0
 3cc:	00000304 	andeq	r0, r0, r4, lsl #6
 3d0:	20002694 	mulcs	r0, r4, r6
 3d4:	00000030 	andeq	r0, r0, r0, lsr r0
 3d8:	40080e41 	andmi	r0, r8, r1, asr #28
 3dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3e0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 3e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e8:	00000304 	andeq	r0, r0, r4, lsl #6
 3ec:	200026c4 	andcs	r2, r0, r4, asr #13
 3f0:	00000050 	andeq	r0, r0, r0, asr r0
 3f4:	40080e41 	andmi	r0, r8, r1, asr #28
 3f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3fc:	180e4101 	stmdane	lr, {r0, r8, lr}
 400:	00070d41 	andeq	r0, r7, r1, asr #26
 404:	0000001c 	andeq	r0, r0, ip, lsl r0
 408:	00000304 	andeq	r0, r0, r4, lsl #6
 40c:	20002714 	andcs	r2, r0, r4, lsl r7
 410:	00000058 	andeq	r0, r0, r8, asr r0
 414:	40080e41 	andmi	r0, r8, r1, asr #28
 418:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 41c:	180e4101 	stmdane	lr, {r0, r8, lr}
 420:	00070d41 	andeq	r0, r7, r1, asr #26
 424:	0000001c 	andeq	r0, r0, ip, lsl r0
 428:	00000304 	andeq	r0, r0, r4, lsl #6
 42c:	2000276c 	andcs	r2, r0, ip, ror #14
 430:	00000066 	andeq	r0, r0, r6, rrx
 434:	40080e41 	andmi	r0, r8, r1, asr #28
 438:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 43c:	100e4101 	andne	r4, lr, r1, lsl #2
 440:	00070d41 	andeq	r0, r7, r1, asr #26
 444:	0000001c 	andeq	r0, r0, ip, lsl r0
 448:	00000304 	andeq	r0, r0, r4, lsl #6
 44c:	200027d2 	ldrdcs	r2, [r0], -r2	; <UNPREDICTABLE>
 450:	0000006e 	andeq	r0, r0, lr, rrx
 454:	40080e41 	andmi	r0, r8, r1, asr #28
 458:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 45c:	100e4101 	andne	r4, lr, r1, lsl #2
 460:	00070d41 	andeq	r0, r7, r1, asr #26
 464:	0000001c 	andeq	r0, r0, ip, lsl r0
 468:	00000304 	andeq	r0, r0, r4, lsl #6
 46c:	20002840 	andcs	r2, r0, r0, asr #16
 470:	00000094 	muleq	r0, r4, r0
 474:	40080e41 	andmi	r0, r8, r1, asr #28
 478:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 47c:	180e4101 	stmdane	lr, {r0, r8, lr}
 480:	00070d41 	andeq	r0, r7, r1, asr #26
 484:	0000001c 	andeq	r0, r0, ip, lsl r0
 488:	00000304 	andeq	r0, r0, r4, lsl #6
 48c:	200028d4 	ldrdcs	r2, [r0], -r4
 490:	0000002a 	andeq	r0, r0, sl, lsr #32
 494:	40080e41 	andmi	r0, r8, r1, asr #28
 498:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 49c:	100e4101 	andne	r4, lr, r1, lsl #2
 4a0:	00070d41 	andeq	r0, r7, r1, asr #26
 4a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4a8:	00000304 	andeq	r0, r0, r4, lsl #6
 4ac:	200028fe 	strdcs	r2, [r0], -lr
 4b0:	0000007e 	andeq	r0, r0, lr, ror r0
 4b4:	40080e41 	andmi	r0, r8, r1, asr #28
 4b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4bc:	100e4101 	andne	r4, lr, r1, lsl #2
 4c0:	00070d41 	andeq	r0, r7, r1, asr #26
 4c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4c8:	00000304 	andeq	r0, r0, r4, lsl #6
 4cc:	2000297c 	andcs	r2, r0, ip, ror r9
 4d0:	00000046 	andeq	r0, r0, r6, asr #32
 4d4:	40080e41 	andmi	r0, r8, r1, asr #28
 4d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4dc:	100e4101 	andne	r4, lr, r1, lsl #2
 4e0:	00070d41 	andeq	r0, r7, r1, asr #26
 4e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4e8:	00000304 	andeq	r0, r0, r4, lsl #6
 4ec:	200029c2 	andcs	r2, r0, r2, asr #19
 4f0:	00000046 	andeq	r0, r0, r6, asr #32
 4f4:	40080e41 	andmi	r0, r8, r1, asr #28
 4f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4fc:	100e4101 	andne	r4, lr, r1, lsl #2
 500:	00070d41 	andeq	r0, r7, r1, asr #26
 504:	00000018 	andeq	r0, r0, r8, lsl r0
 508:	00000304 	andeq	r0, r0, r4, lsl #6
 50c:	20002a08 	andcs	r2, r0, r8, lsl #20
 510:	0000006e 	andeq	r0, r0, lr, rrx
 514:	40080e41 	andmi	r0, r8, r1, asr #28
 518:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 51c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 520:	0000001c 	andeq	r0, r0, ip, lsl r0
 524:	00000304 	andeq	r0, r0, r4, lsl #6
 528:	20002a76 	andcs	r2, r0, r6, ror sl
 52c:	00000066 	andeq	r0, r0, r6, rrx
 530:	40080e41 	andmi	r0, r8, r1, asr #28
 534:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 538:	100e4101 	andne	r4, lr, r1, lsl #2
 53c:	00070d41 	andeq	r0, r7, r1, asr #26
 540:	0000001c 	andeq	r0, r0, ip, lsl r0
 544:	00000304 	andeq	r0, r0, r4, lsl #6
 548:	20002adc 	ldrdcs	r2, [r0], -ip
 54c:	00000180 	andeq	r0, r0, r0, lsl #3
 550:	40080e41 	andmi	r0, r8, r1, asr #28
 554:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 558:	200e4101 	andcs	r4, lr, r1, lsl #2
 55c:	00070d41 	andeq	r0, r7, r1, asr #26
 560:	0000001c 	andeq	r0, r0, ip, lsl r0
 564:	00000304 	andeq	r0, r0, r4, lsl #6
 568:	20002c5c 	andcs	r2, r0, ip, asr ip
 56c:	000001a0 	andeq	r0, r0, r0, lsr #3
 570:	40080e41 	andmi	r0, r8, r1, asr #28
 574:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 578:	280e4101 	stmdacs	lr, {r0, r8, lr}
 57c:	00070d41 	andeq	r0, r7, r1, asr #26
 580:	0000001c 	andeq	r0, r0, ip, lsl r0
 584:	00000304 	andeq	r0, r0, r4, lsl #6
 588:	20002dfc 	strdcs	r2, [r0], -ip
 58c:	000000d6 	ldrdeq	r0, [r0], -r6
 590:	40080e41 	andmi	r0, r8, r1, asr #28
 594:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 598:	200e4101 	andcs	r4, lr, r1, lsl #2
 59c:	00070d41 	andeq	r0, r7, r1, asr #26
 5a0:	00000024 	andeq	r0, r0, r4, lsr #32
 5a4:	00000304 	andeq	r0, r0, r4, lsl #6
 5a8:	20002ed2 	ldrdcs	r2, [r0], -r2	; <UNPREDICTABLE>
 5ac:	0000011a 	andeq	r0, r0, sl, lsl r1
 5b0:	40100e41 	andsmi	r0, r0, r1, asr #28
 5b4:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 5b8:	02874003 	addeq	r4, r7, #3
 5bc:	41018e40 	tstmi	r1, r0, asr #28
 5c0:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 5c4:	00000007 	andeq	r0, r0, r7
 5c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5cc:	00000304 	andeq	r0, r0, r4, lsl #6
 5d0:	20002fec 	andcs	r2, r0, ip, ror #31
 5d4:	00000052 	andeq	r0, r0, r2, asr r0
 5d8:	40080e41 	andmi	r0, r8, r1, asr #28
 5dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5e0:	200e4101 	andcs	r4, lr, r1, lsl #2
 5e4:	00070d41 	andeq	r0, r7, r1, asr #26
 5e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5ec:	00000304 	andeq	r0, r0, r4, lsl #6
 5f0:	2000303e 	andcs	r3, r0, lr, lsr r0
 5f4:	00000052 	andeq	r0, r0, r2, asr r0
 5f8:	40080e41 	andmi	r0, r8, r1, asr #28
 5fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 600:	200e4101 	andcs	r4, lr, r1, lsl #2
 604:	00070d41 	andeq	r0, r7, r1, asr #26
 608:	00000020 	andeq	r0, r0, r0, lsr #32
 60c:	00000304 	andeq	r0, r0, r4, lsl #6
 610:	20003090 	mulcs	r0, r0, r0
 614:	00000130 	andeq	r0, r0, r0, lsr r1
 618:	400c0e41 	andmi	r0, ip, r1, asr #28
 61c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 620:	018e4002 	orreq	r4, lr, r2
 624:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 628:	0000070d 	andeq	r0, r0, sp, lsl #14
 62c:	0000001c 	andeq	r0, r0, ip, lsl r0
 630:	00000304 	andeq	r0, r0, r4, lsl #6
 634:	200031c0 	andcs	r3, r0, r0, asr #3
 638:	00000108 	andeq	r0, r0, r8, lsl #2
 63c:	40080e41 	andmi	r0, r8, r1, asr #28
 640:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 644:	100e4101 	andne	r4, lr, r1, lsl #2
 648:	00070d41 	andeq	r0, r7, r1, asr #26
 64c:	0000001c 	andeq	r0, r0, ip, lsl r0
 650:	00000304 	andeq	r0, r0, r4, lsl #6
 654:	200032c8 	andcs	r3, r0, r8, asr #5
 658:	00000082 	andeq	r0, r0, r2, lsl #1
 65c:	40080e41 	andmi	r0, r8, r1, asr #28
 660:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 664:	200e4101 	andcs	r4, lr, r1, lsl #2
 668:	18070c41 	stmdane	r7, {r0, r6, sl, fp}
 66c:	0000001c 	andeq	r0, r0, ip, lsl r0
 670:	00000304 	andeq	r0, r0, r4, lsl #6
 674:	2000334a 	andcs	r3, r0, sl, asr #6
 678:	0000006a 	andeq	r0, r0, sl, rrx
 67c:	40080e41 	andmi	r0, r8, r1, asr #28
 680:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 684:	100e4101 	andne	r4, lr, r1, lsl #2
 688:	00070d41 	andeq	r0, r7, r1, asr #26
 68c:	0000000c 	andeq	r0, r0, ip
 690:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 694:	7c020001 	stcvc	0, cr0, [r2], {1}
 698:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 69c:	0000001c 	andeq	r0, r0, ip, lsl r0
 6a0:	0000068c 	andeq	r0, r0, ip, lsl #13
 6a4:	200033b4 			; <UNDEFINED> instruction: 0x200033b4
 6a8:	00000028 	andeq	r0, r0, r8, lsr #32
 6ac:	40080e41 	andmi	r0, r8, r1, asr #28
 6b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6b4:	180e4101 	stmdane	lr, {r0, r8, lr}
 6b8:	00070d41 	andeq	r0, r7, r1, asr #26
 6bc:	0000000c 	andeq	r0, r0, ip
 6c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 6c4:	7c020001 	stcvc	0, cr0, [r2], {1}
 6c8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 6cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 6d0:	000006bc 			; <UNDEFINED> instruction: 0x000006bc
 6d4:	200033dc 	ldrdcs	r3, [r0], -ip
 6d8:	00000028 	andeq	r0, r0, r8, lsr #32
 6dc:	40080e41 	andmi	r0, r8, r1, asr #28
 6e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 6e8:	00070d41 	andeq	r0, r7, r1, asr #26
 6ec:	0000000c 	andeq	r0, r0, ip
 6f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 6f4:	7c020001 	stcvc	0, cr0, [r2], {1}
 6f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 6fc:	00000018 	andeq	r0, r0, r8, lsl r0
 700:	000006ec 	andeq	r0, r0, ip, ror #13
 704:	20003404 	andcs	r3, r0, r4, lsl #8
 708:	00000018 	andeq	r0, r0, r8, lsl r0
 70c:	40080e41 	andmi	r0, r8, r1, asr #28
 710:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 714:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 718:	00000018 	andeq	r0, r0, r8, lsl r0
 71c:	000006ec 	andeq	r0, r0, ip, ror #13
 720:	2000341c 	andcs	r3, r0, ip, lsl r4
 724:	00000020 	andeq	r0, r0, r0, lsr #32
 728:	40080e41 	andmi	r0, r8, r1, asr #28
 72c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 730:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 734:	00000020 	andeq	r0, r0, r0, lsr #32
 738:	000006ec 	andeq	r0, r0, ip, ror #13
 73c:	2000343c 	andcs	r3, r0, ip, lsr r4
 740:	00000034 	andeq	r0, r0, r4, lsr r0
 744:	400c0e41 	andmi	r0, ip, r1, asr #28
 748:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 74c:	018e4002 	orreq	r4, lr, r2
 750:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 754:	0000070d 	andeq	r0, r0, sp, lsl #14
 758:	0000000c 	andeq	r0, r0, ip
 75c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 760:	7c020001 	stcvc	0, cr0, [r2], {1}
 764:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 768:	0000001c 	andeq	r0, r0, ip, lsl r0
 76c:	00000758 	andeq	r0, r0, r8, asr r7
 770:	20003470 	andcs	r3, r0, r0, ror r4
 774:	00000044 	andeq	r0, r0, r4, asr #32
 778:	40080e41 	andmi	r0, r8, r1, asr #28
 77c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 780:	180e4101 	stmdane	lr, {r0, r8, lr}
 784:	00070d41 	andeq	r0, r7, r1, asr #26
 788:	0000001c 	andeq	r0, r0, ip, lsl r0
 78c:	00000758 	andeq	r0, r0, r8, asr r7
 790:	200034b4 			; <UNDEFINED> instruction: 0x200034b4
 794:	00000050 	andeq	r0, r0, r0, asr r0
 798:	40080e41 	andmi	r0, r8, r1, asr #28
 79c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7a0:	180e4101 	stmdane	lr, {r0, r8, lr}
 7a4:	00070d41 	andeq	r0, r7, r1, asr #26
 7a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 7ac:	00000758 	andeq	r0, r0, r8, asr r7
 7b0:	20003504 	andcs	r3, r0, r4, lsl #10
 7b4:	0000002a 	andeq	r0, r0, sl, lsr #32
 7b8:	40080e41 	andmi	r0, r8, r1, asr #28
 7bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7c0:	100e4101 	andne	r4, lr, r1, lsl #2
 7c4:	00070d41 	andeq	r0, r7, r1, asr #26
 7c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 7cc:	00000758 	andeq	r0, r0, r8, asr r7
 7d0:	2000352e 	andcs	r3, r0, lr, lsr #10
 7d4:	0000002a 	andeq	r0, r0, sl, lsr #32
 7d8:	40080e41 	andmi	r0, r8, r1, asr #28
 7dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7e0:	100e4101 	andne	r4, lr, r1, lsl #2
 7e4:	00070d41 	andeq	r0, r7, r1, asr #26
 7e8:	00000020 	andeq	r0, r0, r0, lsr #32
 7ec:	00000758 	andeq	r0, r0, r8, asr r7
 7f0:	20003558 	andcs	r3, r0, r8, asr r5
 7f4:	00000054 	andeq	r0, r0, r4, asr r0
 7f8:	400c0e41 	andmi	r0, ip, r1, asr #28
 7fc:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 800:	018e4002 	orreq	r4, lr, r2
 804:	41180e41 	tstmi	r8, r1, asr #28
 808:	0000070d 	andeq	r0, r0, sp, lsl #14
 80c:	00000020 	andeq	r0, r0, r0, lsr #32
 810:	00000758 	andeq	r0, r0, r8, asr r7
 814:	200035ac 	andcs	r3, r0, ip, lsr #11
 818:	00000054 	andeq	r0, r0, r4, asr r0
 81c:	400c0e41 	andmi	r0, ip, r1, asr #28
 820:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 824:	018e4002 	orreq	r4, lr, r2
 828:	41180e41 	tstmi	r8, r1, asr #28
 82c:	0000070d 	andeq	r0, r0, sp, lsl #14
 830:	0000001c 	andeq	r0, r0, ip, lsl r0
 834:	00000758 	andeq	r0, r0, r8, asr r7
 838:	20003600 	andcs	r3, r0, r0, lsl #12
 83c:	00000030 	andeq	r0, r0, r0, lsr r0
 840:	40080e41 	andmi	r0, r8, r1, asr #28
 844:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 848:	100e4101 	andne	r4, lr, r1, lsl #2
 84c:	00070d41 	andeq	r0, r7, r1, asr #26
 850:	0000001c 	andeq	r0, r0, ip, lsl r0
 854:	00000758 	andeq	r0, r0, r8, asr r7
 858:	20003630 	andcs	r3, r0, r0, lsr r6
 85c:	00000034 	andeq	r0, r0, r4, lsr r0
 860:	40080e41 	andmi	r0, r8, r1, asr #28
 864:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 868:	100e4101 	andne	r4, lr, r1, lsl #2
 86c:	00070d41 	andeq	r0, r7, r1, asr #26
 870:	0000001c 	andeq	r0, r0, ip, lsl r0
 874:	00000758 	andeq	r0, r0, r8, asr r7
 878:	20003664 	andcs	r3, r0, r4, ror #12
 87c:	0000003c 	andeq	r0, r0, ip, lsr r0
 880:	40080e41 	andmi	r0, r8, r1, asr #28
 884:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 888:	100e4101 	andne	r4, lr, r1, lsl #2
 88c:	00070d41 	andeq	r0, r7, r1, asr #26
 890:	0000001c 	andeq	r0, r0, ip, lsl r0
 894:	00000758 	andeq	r0, r0, r8, asr r7
 898:	200036a0 	andcs	r3, r0, r0, lsr #13
 89c:	00000050 	andeq	r0, r0, r0, asr r0
 8a0:	40080e41 	andmi	r0, r8, r1, asr #28
 8a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8a8:	180e4101 	stmdane	lr, {r0, r8, lr}
 8ac:	00070d41 	andeq	r0, r7, r1, asr #26
 8b0:	00000018 	andeq	r0, r0, r8, lsl r0
 8b4:	00000758 	andeq	r0, r0, r8, asr r7
 8b8:	200036f0 	strdcs	r3, [r0], -r0
 8bc:	0000009a 	muleq	r0, sl, r0
 8c0:	40080e41 	andmi	r0, r8, r1, asr #28
 8c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8c8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 8cc:	00000018 	andeq	r0, r0, r8, lsl r0
 8d0:	00000758 	andeq	r0, r0, r8, asr r7
 8d4:	2000378a 	andcs	r3, r0, sl, lsl #15
 8d8:	0000001a 	andeq	r0, r0, sl, lsl r0
 8dc:	40080e41 	andmi	r0, r8, r1, asr #28
 8e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8e4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 8e8:	00000018 	andeq	r0, r0, r8, lsl r0
 8ec:	00000758 	andeq	r0, r0, r8, asr r7
 8f0:	200037a4 	andcs	r3, r0, r4, lsr #15
 8f4:	00000012 	andeq	r0, r0, r2, lsl r0
 8f8:	40080e41 	andmi	r0, r8, r1, asr #28
 8fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 900:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 904:	00000020 	andeq	r0, r0, r0, lsr #32
 908:	00000758 	andeq	r0, r0, r8, asr r7
 90c:	200037b6 			; <UNDEFINED> instruction: 0x200037b6
 910:	0000006a 	andeq	r0, r0, sl, rrx
 914:	400c0e41 	andmi	r0, ip, r1, asr #28
 918:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 91c:	018e4002 	orreq	r4, lr, r2
 920:	41300e41 	teqmi	r0, r1, asr #28
 924:	0000070d 	andeq	r0, r0, sp, lsl #14
 928:	0000001c 	andeq	r0, r0, ip, lsl r0
 92c:	00000758 	andeq	r0, r0, r8, asr r7
 930:	20003820 	andcs	r3, r0, r0, lsr #16
 934:	0000005e 	andeq	r0, r0, lr, asr r0
 938:	40080e41 	andmi	r0, r8, r1, asr #28
 93c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 940:	100e4101 	andne	r4, lr, r1, lsl #2
 944:	00070d41 	andeq	r0, r7, r1, asr #26
 948:	0000001c 	andeq	r0, r0, ip, lsl r0
 94c:	00000758 	andeq	r0, r0, r8, asr r7
 950:	2000387e 	andcs	r3, r0, lr, ror r8
 954:	0000008e 	andeq	r0, r0, lr, lsl #1
 958:	40080e41 	andmi	r0, r8, r1, asr #28
 95c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 960:	200e4101 	andcs	r4, lr, r1, lsl #2
 964:	00070d41 	andeq	r0, r7, r1, asr #26
 968:	00000020 	andeq	r0, r0, r0, lsr #32
 96c:	00000758 	andeq	r0, r0, r8, asr r7
 970:	2000390c 	andcs	r3, r0, ip, lsl #18
 974:	00000084 	andeq	r0, r0, r4, lsl #1
 978:	400c0e41 	andmi	r0, ip, r1, asr #28
 97c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 980:	018e4002 	orreq	r4, lr, r2
 984:	41380e41 	teqmi	r8, r1, asr #28
 988:	0000070d 	andeq	r0, r0, sp, lsl #14
 98c:	0000000c 	andeq	r0, r0, ip
 990:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 994:	7c020001 	stcvc	0, cr0, [r2], {1}
 998:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 99c:	0000001c 	andeq	r0, r0, ip, lsl r0
 9a0:	0000098c 	andeq	r0, r0, ip, lsl #19
 9a4:	20003990 	mulcs	r0, r0, r9
 9a8:	0000005a 	andeq	r0, r0, sl, asr r0
 9ac:	40080e41 	andmi	r0, r8, r1, asr #28
 9b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 9b4:	180e4101 	stmdane	lr, {r0, r8, lr}
 9b8:	00070d41 	andeq	r0, r7, r1, asr #26
 9bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 9c0:	0000098c 	andeq	r0, r0, ip, lsl #19
 9c4:	200039ea 	andcs	r3, r0, sl, ror #19
 9c8:	0000003a 	andeq	r0, r0, sl, lsr r0
 9cc:	40080e41 	andmi	r0, r8, r1, asr #28
 9d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 9d4:	180e4101 	stmdane	lr, {r0, r8, lr}
 9d8:	00070d41 	andeq	r0, r7, r1, asr #26
 9dc:	0000000c 	andeq	r0, r0, ip
 9e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 9e4:	7c020001 	stcvc	0, cr0, [r2], {1}
 9e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 9ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 9f0:	000009dc 	ldrdeq	r0, [r0], -ip
 9f4:	20003a24 	andcs	r3, r0, r4, lsr #20
 9f8:	00000074 	andeq	r0, r0, r4, ror r0
 9fc:	40080e41 	andmi	r0, r8, r1, asr #28
 a00:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a04:	180e4101 	stmdane	lr, {r0, r8, lr}
 a08:	00070d41 	andeq	r0, r7, r1, asr #26
 a0c:	00000020 	andeq	r0, r0, r0, lsr #32
 a10:	000009dc 	ldrdeq	r0, [r0], -ip
 a14:	20003a98 	mulcs	r0, r8, sl
 a18:	00000074 	andeq	r0, r0, r4, ror r0
 a1c:	400c0e41 	andmi	r0, ip, r1, asr #28
 a20:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 a24:	018e4002 	orreq	r4, lr, r2
 a28:	41180e41 	tstmi	r8, r1, asr #28
 a2c:	0000070d 	andeq	r0, r0, sp, lsl #14
 a30:	0000000c 	andeq	r0, r0, ip
 a34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a38:	7c020001 	stcvc	0, cr0, [r2], {1}
 a3c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a40:	0000001c 	andeq	r0, r0, ip, lsl r0
 a44:	00000a30 	andeq	r0, r0, r0, lsr sl
 a48:	20003b0c 	andcs	r3, r0, ip, lsl #22
 a4c:	00000074 	andeq	r0, r0, r4, ror r0
 a50:	40080e41 	andmi	r0, r8, r1, asr #28
 a54:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a58:	180e4101 	stmdane	lr, {r0, r8, lr}
 a5c:	00070d41 	andeq	r0, r7, r1, asr #26
 a60:	00000020 	andeq	r0, r0, r0, lsr #32
 a64:	00000a30 	andeq	r0, r0, r0, lsr sl
 a68:	20003b80 	andcs	r3, r0, r0, lsl #23
 a6c:	00000074 	andeq	r0, r0, r4, ror r0
 a70:	400c0e41 	andmi	r0, ip, r1, asr #28
 a74:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 a78:	018e4002 	orreq	r4, lr, r2
 a7c:	41180e41 	tstmi	r8, r1, asr #28
 a80:	0000070d 	andeq	r0, r0, sp, lsl #14
 a84:	0000000c 	andeq	r0, r0, ip
 a88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a8c:	7c020001 	stcvc	0, cr0, [r2], {1}
 a90:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a94:	0000001c 	andeq	r0, r0, ip, lsl r0
 a98:	00000a84 	andeq	r0, r0, r4, lsl #21
 a9c:	20003bf4 	strdcs	r3, [r0], -r4
 aa0:	00000074 	andeq	r0, r0, r4, ror r0
 aa4:	40080e41 	andmi	r0, r8, r1, asr #28
 aa8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 aac:	180e4101 	stmdane	lr, {r0, r8, lr}
 ab0:	00070d41 	andeq	r0, r7, r1, asr #26
 ab4:	00000020 	andeq	r0, r0, r0, lsr #32
 ab8:	00000a84 	andeq	r0, r0, r4, lsl #21
 abc:	20003c68 	andcs	r3, r0, r8, ror #24
 ac0:	00000074 	andeq	r0, r0, r4, ror r0
 ac4:	400c0e41 	andmi	r0, ip, r1, asr #28
 ac8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 acc:	018e4002 	orreq	r4, lr, r2
 ad0:	41180e41 	tstmi	r8, r1, asr #28
 ad4:	0000070d 	andeq	r0, r0, sp, lsl #14
 ad8:	0000000c 	andeq	r0, r0, ip
 adc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 ae0:	7c010001 	stcvc	0, cr0, [r1], {1}
 ae4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 ae8:	0000000c 	andeq	r0, r0, ip
 aec:	00000ad8 	ldrdeq	r0, [r0], -r8
 af0:	20003cdd 	ldrdcs	r3, [r0], -sp
 af4:	000001cc 	andeq	r0, r0, ip, asr #3
