
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#endif
}

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f8c8 	bl	20000198 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:
void init_app( void ) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*portModer = 0x55555555;
20000014:	4b05      	ldr	r3, [pc, #20]	; (2000002c <init_app+0x1c>)
20000016:	4a06      	ldr	r2, [pc, #24]	; (20000030 <init_app+0x20>)
20000018:	601a      	str	r2, [r3, #0]
	set_up_DIL();
2000001a:	f001 fb87 	bl	2000172c <set_up_DIL>
	graphic_initialize();
2000001e:	f000 fe87 	bl	20000d30 <graphic_initialize>
	graphic_clear_screen();
20000022:	f000 febc 	bl	20000d9e <graphic_clear_screen>
}
20000026:	46c0      	nop			; (mov r8, r8)
20000028:	46bd      	mov	sp, r7
2000002a:	bd80      	pop	{r7, pc}
2000002c:	40021000 	andmi	r1, r2, r0
20000030:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000034 <initSprites>:
sprite tempCastleLight;
sprite tempTitleBlack;
sprite tempTitleGray;
sprite tempTitleLight;

void initSprites( void ) {
20000034:	b580      	push	{r7, lr}
20000036:	b08a      	sub	sp, #40	; 0x28
20000038:	af00      	add	r7, sp, #0
	sprite *monsterPointer = &tempMonster;
2000003a:	4b39      	ldr	r3, [pc, #228]	; (20000120 <initSprites+0xec>)
2000003c:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(monsterPointer, monster_black_bits, monster_black_width, monster_black_height);
2000003e:	4939      	ldr	r1, [pc, #228]	; (20000124 <initSprites+0xf0>)
20000040:	6a78      	ldr	r0, [r7, #36]	; 0x24
20000042:	231e      	movs	r3, #30
20000044:	221e      	movs	r2, #30
20000046:	f001 fb5d 	bl	20001704 <load_sprite>
	monster = monsterPointer;
2000004a:	4b37      	ldr	r3, [pc, #220]	; (20000128 <initSprites+0xf4>)
2000004c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000004e:	601a      	str	r2, [r3, #0]
	
	sprite *monsterPointer2 = &tempMonsterLight;
20000050:	4b36      	ldr	r3, [pc, #216]	; (2000012c <initSprites+0xf8>)
20000052:	623b      	str	r3, [r7, #32]
	load_sprite(monsterPointer2, monster_light_bits, monster_light_width, monster_light_height);
20000054:	4936      	ldr	r1, [pc, #216]	; (20000130 <initSprites+0xfc>)
20000056:	6a38      	ldr	r0, [r7, #32]
20000058:	231e      	movs	r3, #30
2000005a:	221e      	movs	r2, #30
2000005c:	f001 fb52 	bl	20001704 <load_sprite>
	monsterLight = monsterPointer2;
20000060:	4b34      	ldr	r3, [pc, #208]	; (20000134 <initSprites+0x100>)
20000062:	6a3a      	ldr	r2, [r7, #32]
20000064:	601a      	str	r2, [r3, #0]

	sprite *monsterPointer3 = &tempMonsterGray;
20000066:	4b34      	ldr	r3, [pc, #208]	; (20000138 <initSprites+0x104>)
20000068:	61fb      	str	r3, [r7, #28]
	load_sprite(monsterPointer3, monster_gray_bits, monster_gray_width, monster_gray_height);
2000006a:	4934      	ldr	r1, [pc, #208]	; (2000013c <initSprites+0x108>)
2000006c:	69f8      	ldr	r0, [r7, #28]
2000006e:	231e      	movs	r3, #30
20000070:	221e      	movs	r2, #30
20000072:	f001 fb47 	bl	20001704 <load_sprite>
	monsterGray = monsterPointer3;
20000076:	4b32      	ldr	r3, [pc, #200]	; (20000140 <initSprites+0x10c>)
20000078:	69fa      	ldr	r2, [r7, #28]
2000007a:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempBg;
2000007c:	4b31      	ldr	r3, [pc, #196]	; (20000144 <initSprites+0x110>)
2000007e:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer4, bg_bits, bg_width, bg_height);
20000080:	4931      	ldr	r1, [pc, #196]	; (20000148 <initSprites+0x114>)
20000082:	69b8      	ldr	r0, [r7, #24]
20000084:	2340      	movs	r3, #64	; 0x40
20000086:	2280      	movs	r2, #128	; 0x80
20000088:	f001 fb3c 	bl	20001704 <load_sprite>
	bg = pointer4;
2000008c:	4b2f      	ldr	r3, [pc, #188]	; (2000014c <initSprites+0x118>)
2000008e:	69ba      	ldr	r2, [r7, #24]
20000090:	601a      	str	r2, [r3, #0]
	
	sprite *pointer5 = &tempCastleBlack;
20000092:	4b2f      	ldr	r3, [pc, #188]	; (20000150 <initSprites+0x11c>)
20000094:	617b      	str	r3, [r7, #20]
	load_sprite(pointer5, castle_black_bits, castle_black_width, castle_black_height);
20000096:	492f      	ldr	r1, [pc, #188]	; (20000154 <initSprites+0x120>)
20000098:	6978      	ldr	r0, [r7, #20]
2000009a:	2340      	movs	r3, #64	; 0x40
2000009c:	2280      	movs	r2, #128	; 0x80
2000009e:	f001 fb31 	bl	20001704 <load_sprite>
	castleBlack = pointer5;
200000a2:	4b2d      	ldr	r3, [pc, #180]	; (20000158 <initSprites+0x124>)
200000a4:	697a      	ldr	r2, [r7, #20]
200000a6:	601a      	str	r2, [r3, #0]
	
	sprite *pointer6 = &tempCastleGray;
200000a8:	4b2c      	ldr	r3, [pc, #176]	; (2000015c <initSprites+0x128>)
200000aa:	613b      	str	r3, [r7, #16]
	load_sprite(pointer6, castle_gray_bits, castle_black_width, castle_black_height);
200000ac:	492c      	ldr	r1, [pc, #176]	; (20000160 <initSprites+0x12c>)
200000ae:	6938      	ldr	r0, [r7, #16]
200000b0:	2340      	movs	r3, #64	; 0x40
200000b2:	2280      	movs	r2, #128	; 0x80
200000b4:	f001 fb26 	bl	20001704 <load_sprite>
	castleGray = pointer6;
200000b8:	4b2a      	ldr	r3, [pc, #168]	; (20000164 <initSprites+0x130>)
200000ba:	693a      	ldr	r2, [r7, #16]
200000bc:	601a      	str	r2, [r3, #0]
	
	sprite *pointer7 = &tempCastleLight;
200000be:	4b2a      	ldr	r3, [pc, #168]	; (20000168 <initSprites+0x134>)
200000c0:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer7, castle_light_bits, castle_black_width, castle_black_height);
200000c2:	492a      	ldr	r1, [pc, #168]	; (2000016c <initSprites+0x138>)
200000c4:	68f8      	ldr	r0, [r7, #12]
200000c6:	2340      	movs	r3, #64	; 0x40
200000c8:	2280      	movs	r2, #128	; 0x80
200000ca:	f001 fb1b 	bl	20001704 <load_sprite>
	castleLight = pointer7;
200000ce:	4b28      	ldr	r3, [pc, #160]	; (20000170 <initSprites+0x13c>)
200000d0:	68fa      	ldr	r2, [r7, #12]
200000d2:	601a      	str	r2, [r3, #0]
	
	sprite *pointer8 = &tempTitleLight;
200000d4:	4b27      	ldr	r3, [pc, #156]	; (20000174 <initSprites+0x140>)
200000d6:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer8, title_light_bits, title_black_width, title_black_height);
200000d8:	4927      	ldr	r1, [pc, #156]	; (20000178 <initSprites+0x144>)
200000da:	68b8      	ldr	r0, [r7, #8]
200000dc:	231e      	movs	r3, #30
200000de:	2232      	movs	r2, #50	; 0x32
200000e0:	f001 fb10 	bl	20001704 <load_sprite>
	titleLight = pointer8;
200000e4:	4b25      	ldr	r3, [pc, #148]	; (2000017c <initSprites+0x148>)
200000e6:	68ba      	ldr	r2, [r7, #8]
200000e8:	601a      	str	r2, [r3, #0]
	sprite *pointer9 = &tempTitleGray;
200000ea:	4b25      	ldr	r3, [pc, #148]	; (20000180 <initSprites+0x14c>)
200000ec:	607b      	str	r3, [r7, #4]
	load_sprite(pointer9, title_gray_bits, title_black_width, title_black_height);
200000ee:	4925      	ldr	r1, [pc, #148]	; (20000184 <initSprites+0x150>)
200000f0:	6878      	ldr	r0, [r7, #4]
200000f2:	231e      	movs	r3, #30
200000f4:	2232      	movs	r2, #50	; 0x32
200000f6:	f001 fb05 	bl	20001704 <load_sprite>
	titleGray = pointer9;
200000fa:	4b23      	ldr	r3, [pc, #140]	; (20000188 <initSprites+0x154>)
200000fc:	687a      	ldr	r2, [r7, #4]
200000fe:	601a      	str	r2, [r3, #0]
	sprite *pointer10 = &tempTitleBlack;
20000100:	4b22      	ldr	r3, [pc, #136]	; (2000018c <initSprites+0x158>)
20000102:	603b      	str	r3, [r7, #0]
	load_sprite(pointer10, title_black_bits, title_black_width, title_black_height);
20000104:	4922      	ldr	r1, [pc, #136]	; (20000190 <initSprites+0x15c>)
20000106:	6838      	ldr	r0, [r7, #0]
20000108:	231e      	movs	r3, #30
2000010a:	2232      	movs	r2, #50	; 0x32
2000010c:	f001 fafa 	bl	20001704 <load_sprite>
	titleBlack = pointer10;
20000110:	4b20      	ldr	r3, [pc, #128]	; (20000194 <initSprites+0x160>)
20000112:	683a      	ldr	r2, [r7, #0]
20000114:	601a      	str	r2, [r3, #0]
}
20000116:	46c0      	nop			; (mov r8, r8)
20000118:	46bd      	mov	sp, r7
2000011a:	b00a      	add	sp, #40	; 0x28
2000011c:	bd80      	pop	{r7, pc}
2000011e:	46c0      	nop			; (mov r8, r8)
20000120:	20001f4c 	andcs	r1, r0, ip, asr #30
20000124:	20003ea8 	andcs	r3, r0, r8, lsr #29
20000128:	20001f2c 	andcs	r1, r0, ip, lsr #30
2000012c:	20001f90 	mulcs	r0, r0, pc	; <UNPREDICTABLE>
20000130:	20003f20 	andcs	r3, r0, r0, lsr #30
20000134:	20001fac 	andcs	r1, r0, ip, lsr #31
20000138:	20001f68 	andcs	r1, r0, r8, ror #30
2000013c:	20003f98 	mulcs	r0, r8, pc	; <UNPREDICTABLE>
20000140:	20001fb8 			; <UNDEFINED> instruction: 0x20001fb8
20000144:	20001fbc 			; <UNDEFINED> instruction: 0x20001fbc
20000148:	20004e8c 	andcs	r4, r0, ip, lsl #29
2000014c:	20001f64 	andcs	r1, r0, r4, ror #30
20000150:	20001f30 	andcs	r1, r0, r0, lsr pc
20000154:	20004010 	andcs	r4, r0, r0, lsl r0
20000158:	20001f48 	andcs	r1, r0, r8, asr #30
2000015c:	20001fa0 	andcs	r1, r0, r0, lsr #31
20000160:	20004410 	andcs	r4, r0, r0, lsl r4
20000164:	20001fb4 			; <UNDEFINED> instruction: 0x20001fb4
20000168:	20001f84 	andcs	r1, r0, r4, lsl #31
2000016c:	20004810 	andcs	r4, r0, r0, lsl r8
20000170:	20001f80 	andcs	r1, r0, r0, lsl #31
20000174:	20001f74 	andcs	r1, r0, r4, ror pc
20000178:	20004c10 	andcs	r4, r0, r0, lsl ip
2000017c:	20001fb0 			; <UNDEFINED> instruction: 0x20001fb0
20000180:	20001f3c 	andcs	r1, r0, ip, lsr pc
20000184:	20004ce4 	andcs	r4, r0, r4, ror #25
20000188:	20001f9c 	mulcs	r0, ip, pc	; <UNPREDICTABLE>
2000018c:	20001f58 	andcs	r1, r0, r8, asr pc
20000190:	20004db8 			; <UNDEFINED> instruction: 0x20004db8
20000194:	20001fc8 	andcs	r1, r0, r8, asr #31

20000198 <main>:
	
int counter = 0;
void main(void)
{
20000198:	b590      	push	{r4, r7, lr}
2000019a:	b0f7      	sub	sp, #476	; 0x1dc
2000019c:	af00      	add	r7, sp, #0
 * 2. Draw it with method above.
 * 3. Show frame with some long fram_length for testing.
 * 
 * */
	
	init_app();	
2000019e:	f7ff ff37 	bl	20000010 <init_app>
	initSprites();
200001a2:	f7ff ff47 	bl	20000034 <initSprites>
	
	GameObject monsterObj;
	Image monsterImage;
	Image monsterImages[] = {monsterImage};
200001a6:	23ce      	movs	r3, #206	; 0xce
200001a8:	005b      	lsls	r3, r3, #1
200001aa:	18fb      	adds	r3, r7, r3
200001ac:	22d4      	movs	r2, #212	; 0xd4
200001ae:	0052      	lsls	r2, r2, #1
200001b0:	18ba      	adds	r2, r7, r2
200001b2:	ca13      	ldmia	r2!, {r0, r1, r4}
200001b4:	c313      	stmia	r3!, {r0, r1, r4}
	monsterObj.images = monsterImages;
200001b6:	23da      	movs	r3, #218	; 0xda
200001b8:	005b      	lsls	r3, r3, #1
200001ba:	18fb      	adds	r3, r7, r3
200001bc:	22ce      	movs	r2, #206	; 0xce
200001be:	0052      	lsls	r2, r2, #1
200001c0:	18ba      	adds	r2, r7, r2
200001c2:	601a      	str	r2, [r3, #0]
	load_image(&monsterObj.images[0], monster, monsterGray, monsterLight);
200001c4:	23da      	movs	r3, #218	; 0xda
200001c6:	005b      	lsls	r3, r3, #1
200001c8:	18fb      	adds	r3, r7, r3
200001ca:	6818      	ldr	r0, [r3, #0]
200001cc:	4b9b      	ldr	r3, [pc, #620]	; (2000043c <main+0x2a4>)
200001ce:	6819      	ldr	r1, [r3, #0]
200001d0:	4b9b      	ldr	r3, [pc, #620]	; (20000440 <main+0x2a8>)
200001d2:	681a      	ldr	r2, [r3, #0]
200001d4:	4b9b      	ldr	r3, [pc, #620]	; (20000444 <main+0x2ac>)
200001d6:	681b      	ldr	r3, [r3, #0]
200001d8:	f001 fa80 	bl	200016dc <load_image>
	monsterObj.xPos = 30;
200001dc:	23da      	movs	r3, #218	; 0xda
200001de:	005b      	lsls	r3, r3, #1
200001e0:	18fb      	adds	r3, r7, r3
200001e2:	221e      	movs	r2, #30
200001e4:	605a      	str	r2, [r3, #4]
	monsterObj.yPos = 4;
200001e6:	23da      	movs	r3, #218	; 0xda
200001e8:	005b      	lsls	r3, r3, #1
200001ea:	18fb      	adds	r3, r7, r3
200001ec:	2204      	movs	r2, #4
200001ee:	609a      	str	r2, [r3, #8]
	monsterObj.current_frame = 0;
200001f0:	23da      	movs	r3, #218	; 0xda
200001f2:	005b      	lsls	r3, r3, #1
200001f4:	18fb      	adds	r3, r7, r3
200001f6:	2200      	movs	r2, #0
200001f8:	615a      	str	r2, [r3, #20]
	monsterObj.update = playerUpdate;
200001fa:	23da      	movs	r3, #218	; 0xda
200001fc:	005b      	lsls	r3, r3, #1
200001fe:	18fb      	adds	r3, r7, r3
20000200:	4a91      	ldr	r2, [pc, #580]	; (20000448 <main+0x2b0>)
20000202:	60da      	str	r2, [r3, #12]
	
	GameObject titleObj;
	Image titleImage;
	Image titleImages[] = {titleImage};
20000204:	23b0      	movs	r3, #176	; 0xb0
20000206:	005b      	lsls	r3, r3, #1
20000208:	18fb      	adds	r3, r7, r3
2000020a:	22b6      	movs	r2, #182	; 0xb6
2000020c:	0052      	lsls	r2, r2, #1
2000020e:	18ba      	adds	r2, r7, r2
20000210:	ca13      	ldmia	r2!, {r0, r1, r4}
20000212:	c313      	stmia	r3!, {r0, r1, r4}
	titleObj.images = titleImages;
20000214:	23bc      	movs	r3, #188	; 0xbc
20000216:	005b      	lsls	r3, r3, #1
20000218:	18fb      	adds	r3, r7, r3
2000021a:	22b0      	movs	r2, #176	; 0xb0
2000021c:	0052      	lsls	r2, r2, #1
2000021e:	18ba      	adds	r2, r7, r2
20000220:	601a      	str	r2, [r3, #0]
	load_image(&titleObj.images[0], titleBlack, titleGray, titleLight);
20000222:	23bc      	movs	r3, #188	; 0xbc
20000224:	005b      	lsls	r3, r3, #1
20000226:	18fb      	adds	r3, r7, r3
20000228:	6818      	ldr	r0, [r3, #0]
2000022a:	4b88      	ldr	r3, [pc, #544]	; (2000044c <main+0x2b4>)
2000022c:	6819      	ldr	r1, [r3, #0]
2000022e:	4b88      	ldr	r3, [pc, #544]	; (20000450 <main+0x2b8>)
20000230:	681a      	ldr	r2, [r3, #0]
20000232:	4b88      	ldr	r3, [pc, #544]	; (20000454 <main+0x2bc>)
20000234:	681b      	ldr	r3, [r3, #0]
20000236:	f001 fa51 	bl	200016dc <load_image>
	titleObj.xPos = 1;
2000023a:	23bc      	movs	r3, #188	; 0xbc
2000023c:	005b      	lsls	r3, r3, #1
2000023e:	18fb      	adds	r3, r7, r3
20000240:	2201      	movs	r2, #1
20000242:	605a      	str	r2, [r3, #4]
	titleObj.yPos = -40;
20000244:	23bc      	movs	r3, #188	; 0xbc
20000246:	005b      	lsls	r3, r3, #1
20000248:	18fb      	adds	r3, r7, r3
2000024a:	2228      	movs	r2, #40	; 0x28
2000024c:	4252      	negs	r2, r2
2000024e:	609a      	str	r2, [r3, #8]
	titleObj.current_frame = 0;
20000250:	23bc      	movs	r3, #188	; 0xbc
20000252:	005b      	lsls	r3, r3, #1
20000254:	18fb      	adds	r3, r7, r3
20000256:	2200      	movs	r2, #0
20000258:	615a      	str	r2, [r3, #20]
	monsterObj.image.grayImage = monsterGray;
	monsterObj.image.lightImage = monsterLight;
	*/
	GameObject castleObj;
	Image castleImage;
	Image castleImages[] = {castleImage};
2000025a:	2392      	movs	r3, #146	; 0x92
2000025c:	005b      	lsls	r3, r3, #1
2000025e:	18fb      	adds	r3, r7, r3
20000260:	2298      	movs	r2, #152	; 0x98
20000262:	0052      	lsls	r2, r2, #1
20000264:	18ba      	adds	r2, r7, r2
20000266:	ca13      	ldmia	r2!, {r0, r1, r4}
20000268:	c313      	stmia	r3!, {r0, r1, r4}
	castleObj.images = castleImages;
2000026a:	239e      	movs	r3, #158	; 0x9e
2000026c:	005b      	lsls	r3, r3, #1
2000026e:	18fb      	adds	r3, r7, r3
20000270:	2292      	movs	r2, #146	; 0x92
20000272:	0052      	lsls	r2, r2, #1
20000274:	18ba      	adds	r2, r7, r2
20000276:	601a      	str	r2, [r3, #0]
	load_image(&castleObj.images[0], castleBlack, castleGray, castleLight);
20000278:	239e      	movs	r3, #158	; 0x9e
2000027a:	005b      	lsls	r3, r3, #1
2000027c:	18fb      	adds	r3, r7, r3
2000027e:	6818      	ldr	r0, [r3, #0]
20000280:	4b75      	ldr	r3, [pc, #468]	; (20000458 <main+0x2c0>)
20000282:	6819      	ldr	r1, [r3, #0]
20000284:	4b75      	ldr	r3, [pc, #468]	; (2000045c <main+0x2c4>)
20000286:	681a      	ldr	r2, [r3, #0]
20000288:	4b75      	ldr	r3, [pc, #468]	; (20000460 <main+0x2c8>)
2000028a:	681b      	ldr	r3, [r3, #0]
2000028c:	f001 fa26 	bl	200016dc <load_image>
	castleObj.xPos = 1;
20000290:	239e      	movs	r3, #158	; 0x9e
20000292:	005b      	lsls	r3, r3, #1
20000294:	18fb      	adds	r3, r7, r3
20000296:	2201      	movs	r2, #1
20000298:	605a      	str	r2, [r3, #4]
	castleObj.yPos = 1;
2000029a:	239e      	movs	r3, #158	; 0x9e
2000029c:	005b      	lsls	r3, r3, #1
2000029e:	18fb      	adds	r3, r7, r3
200002a0:	2201      	movs	r2, #1
200002a2:	609a      	str	r2, [r3, #8]
	castleObj.current_frame = 0;
200002a4:	239e      	movs	r3, #158	; 0x9e
200002a6:	005b      	lsls	r3, r3, #1
200002a8:	18fb      	adds	r3, r7, r3
200002aa:	2200      	movs	r2, #0
200002ac:	615a      	str	r2, [r3, #20]
	
	GameObject fire2;
	init_fire( &fire2 );
200002ae:	1c7b      	adds	r3, r7, #1
200002b0:	33ff      	adds	r3, #255	; 0xff
200002b2:	0018      	movs	r0, r3
200002b4:	f000 f9f2 	bl	2000069c <init_fire>
	GameObject fire3;
	init_fire( &fire3 );
200002b8:	23dc      	movs	r3, #220	; 0xdc
200002ba:	18fb      	adds	r3, r7, r3
200002bc:	0018      	movs	r0, r3
200002be:	f000 f9ed 	bl	2000069c <init_fire>
	fire2.xPos = 94;
200002c2:	1c7b      	adds	r3, r7, #1
200002c4:	33ff      	adds	r3, #255	; 0xff
200002c6:	225e      	movs	r2, #94	; 0x5e
200002c8:	605a      	str	r2, [r3, #4]
	fire2.yPos = 64-12;
200002ca:	1c7b      	adds	r3, r7, #1
200002cc:	33ff      	adds	r3, #255	; 0xff
200002ce:	2234      	movs	r2, #52	; 0x34
200002d0:	609a      	str	r2, [r3, #8]
	fire3.xPos = 94+13;
200002d2:	23dc      	movs	r3, #220	; 0xdc
200002d4:	18fb      	adds	r3, r7, r3
200002d6:	226b      	movs	r2, #107	; 0x6b
200002d8:	605a      	str	r2, [r3, #4]
	fire3.yPos = 64-12;
200002da:	23dc      	movs	r3, #220	; 0xdc
200002dc:	18fb      	adds	r3, r7, r3
200002de:	2234      	movs	r2, #52	; 0x34
200002e0:	609a      	str	r2, [r3, #8]
	//draw_game_object(&castleObj);
	
	fire2.animation_speed = 2;
200002e2:	1c7b      	adds	r3, r7, #1
200002e4:	33ff      	adds	r3, #255	; 0xff
200002e6:	2202      	movs	r2, #2
200002e8:	61da      	str	r2, [r3, #28]
	fire3.animation_speed = 2;
200002ea:	23dc      	movs	r3, #220	; 0xdc
200002ec:	18fb      	adds	r3, r7, r3
200002ee:	2202      	movs	r2, #2
200002f0:	61da      	str	r2, [r3, #28]
	
	fire2.update = gameObjectUpdate;
200002f2:	1c7b      	adds	r3, r7, #1
200002f4:	33ff      	adds	r3, #255	; 0xff
200002f6:	4a5b      	ldr	r2, [pc, #364]	; (20000464 <main+0x2cc>)
200002f8:	60da      	str	r2, [r3, #12]
	fire3.update = gameObjectUpdate;
200002fa:	23dc      	movs	r3, #220	; 0xdc
200002fc:	18fb      	adds	r3, r7, r3
200002fe:	4a59      	ldr	r2, [pc, #356]	; (20000464 <main+0x2cc>)
20000300:	60da      	str	r2, [r3, #12]
	SlowText text7;
	SlowText text8;
	SlowText text9;
	SlowText text10;
	SlowText text11;
	init_slow_text(&text1, "For centuries the", "DILs-witches have", 2);
20000302:	4a59      	ldr	r2, [pc, #356]	; (20000468 <main+0x2d0>)
20000304:	4959      	ldr	r1, [pc, #356]	; (2000046c <main+0x2d4>)
20000306:	23c8      	movs	r3, #200	; 0xc8
20000308:	18f8      	adds	r0, r7, r3
2000030a:	2302      	movs	r3, #2
2000030c:	f001 fcfb 	bl	20001d06 <init_slow_text>
	init_slow_text(&text2, "coiled in fear,", "    ", 2);
20000310:	4a57      	ldr	r2, [pc, #348]	; (20000470 <main+0x2d8>)
20000312:	4958      	ldr	r1, [pc, #352]	; (20000474 <main+0x2dc>)
20000314:	23b4      	movs	r3, #180	; 0xb4
20000316:	18f8      	adds	r0, r7, r3
20000318:	2302      	movs	r3, #2
2000031a:	f001 fcf4 	bl	20001d06 <init_slow_text>
	init_slow_text(&text3, "whenever they hear", "that a DIPs-witch", 2);
2000031e:	4a56      	ldr	r2, [pc, #344]	; (20000478 <main+0x2e0>)
20000320:	4956      	ldr	r1, [pc, #344]	; (2000047c <main+0x2e4>)
20000322:	23a0      	movs	r3, #160	; 0xa0
20000324:	18f8      	adds	r0, r7, r3
20000326:	2302      	movs	r3, #2
20000328:	f001 fced 	bl	20001d06 <init_slow_text>
	init_slow_text(&text4, "is near.", "   ", 2);
2000032c:	4a54      	ldr	r2, [pc, #336]	; (20000480 <main+0x2e8>)
2000032e:	4955      	ldr	r1, [pc, #340]	; (20000484 <main+0x2ec>)
20000330:	238c      	movs	r3, #140	; 0x8c
20000332:	18f8      	adds	r0, r7, r3
20000334:	2302      	movs	r3, #2
20000336:	f001 fce6 	bl	20001d06 <init_slow_text>
	init_slow_text(&text5, "So it is quite", "surprising, finding", 2);
2000033a:	4a53      	ldr	r2, [pc, #332]	; (20000488 <main+0x2f0>)
2000033c:	4953      	ldr	r1, [pc, #332]	; (2000048c <main+0x2f4>)
2000033e:	2378      	movs	r3, #120	; 0x78
20000340:	18f8      	adds	r0, r7, r3
20000342:	2302      	movs	r3, #2
20000344:	f001 fcdf 	bl	20001d06 <init_slow_text>
	init_slow_text(&text6, "you here,", "    ", 2);
20000348:	4a49      	ldr	r2, [pc, #292]	; (20000470 <main+0x2d8>)
2000034a:	4951      	ldr	r1, [pc, #324]	; (20000490 <main+0x2f8>)
2000034c:	2364      	movs	r3, #100	; 0x64
2000034e:	18f8      	adds	r0, r7, r3
20000350:	2302      	movs	r3, #2
20000352:	f001 fcd8 	bl	20001d06 <init_slow_text>
	init_slow_text(&text7, "queen Daffo of DILs,", "heir to king Lear.", 2);
20000356:	4a4f      	ldr	r2, [pc, #316]	; (20000494 <main+0x2fc>)
20000358:	494f      	ldr	r1, [pc, #316]	; (20000498 <main+0x300>)
2000035a:	2350      	movs	r3, #80	; 0x50
2000035c:	18f8      	adds	r0, r7, r3
2000035e:	2302      	movs	r3, #2
20000360:	f001 fcd1 	bl	20001d06 <init_slow_text>
	init_slow_text(&text8, "But maybe you're", "tempted, to loot", 2);
20000364:	4a4d      	ldr	r2, [pc, #308]	; (2000049c <main+0x304>)
20000366:	494e      	ldr	r1, [pc, #312]	; (200004a0 <main+0x308>)
20000368:	233c      	movs	r3, #60	; 0x3c
2000036a:	18f8      	adds	r0, r7, r3
2000036c:	2302      	movs	r3, #2
2000036e:	f001 fcca 	bl	20001d06 <init_slow_text>
	init_slow_text(&text9, "from the riches,", "    ", 2);
20000372:	4a3f      	ldr	r2, [pc, #252]	; (20000470 <main+0x2d8>)
20000374:	494b      	ldr	r1, [pc, #300]	; (200004a4 <main+0x30c>)
20000376:	2328      	movs	r3, #40	; 0x28
20000378:	18f8      	adds	r0, r7, r3
2000037a:	2302      	movs	r3, #2
2000037c:	f001 fcc3 	bl	20001d06 <init_slow_text>
	init_slow_text(&text10, "so grippily treasured", "by wicked DIPs-witches.", 2);
20000380:	4a49      	ldr	r2, [pc, #292]	; (200004a8 <main+0x310>)
20000382:	494a      	ldr	r1, [pc, #296]	; (200004ac <main+0x314>)
20000384:	2314      	movs	r3, #20
20000386:	18f8      	adds	r0, r7, r3
20000388:	2302      	movs	r3, #2
2000038a:	f001 fcbc 	bl	20001d06 <init_slow_text>
	init_slow_text(&text11, "Enter, brave witch,", "by killing the switch!", 2);
2000038e:	4a48      	ldr	r2, [pc, #288]	; (200004b0 <main+0x318>)
20000390:	4948      	ldr	r1, [pc, #288]	; (200004b4 <main+0x31c>)
20000392:	0038      	movs	r0, r7
20000394:	2302      	movs	r3, #2
20000396:	f001 fcb6 	bl	20001d06 <init_slow_text>
	//ascii_write_part("Yeeaaah!!!", "This is working! :)", 5, 10);
	
	
	while(1) {
		counter++;
2000039a:	4b47      	ldr	r3, [pc, #284]	; (200004b8 <main+0x320>)
2000039c:	681b      	ldr	r3, [r3, #0]
2000039e:	1c5a      	adds	r2, r3, #1
200003a0:	4b45      	ldr	r3, [pc, #276]	; (200004b8 <main+0x320>)
200003a2:	601a      	str	r2, [r3, #0]
		if(titleObj.yPos < 1) {
200003a4:	23bc      	movs	r3, #188	; 0xbc
200003a6:	005b      	lsls	r3, r3, #1
200003a8:	18fb      	adds	r3, r7, r3
200003aa:	689b      	ldr	r3, [r3, #8]
200003ac:	2b00      	cmp	r3, #0
200003ae:	dc08      	bgt.n	200003c2 <main+0x22a>
			titleObj.yPos++;
200003b0:	23bc      	movs	r3, #188	; 0xbc
200003b2:	005b      	lsls	r3, r3, #1
200003b4:	18fb      	adds	r3, r7, r3
200003b6:	689b      	ldr	r3, [r3, #8]
200003b8:	1c5a      	adds	r2, r3, #1
200003ba:	23bc      	movs	r3, #188	; 0xbc
200003bc:	005b      	lsls	r3, r3, #1
200003be:	18fb      	adds	r3, r7, r3
200003c0:	609a      	str	r2, [r3, #8]
		}
		
		draw_game_object(&castleObj);
200003c2:	239e      	movs	r3, #158	; 0x9e
200003c4:	005b      	lsls	r3, r3, #1
200003c6:	18fb      	adds	r3, r7, r3
200003c8:	0018      	movs	r0, r3
200003ca:	f001 f911 	bl	200015f0 <draw_game_object>
		draw_game_object(&fire2);
200003ce:	1c7b      	adds	r3, r7, #1
200003d0:	33ff      	adds	r3, #255	; 0xff
200003d2:	0018      	movs	r0, r3
200003d4:	f001 f90c 	bl	200015f0 <draw_game_object>
		draw_game_object(&fire3);
200003d8:	23dc      	movs	r3, #220	; 0xdc
200003da:	18fb      	adds	r3, r7, r3
200003dc:	0018      	movs	r0, r3
200003de:	f001 f907 	bl	200015f0 <draw_game_object>
		//draw_game_object(&monsterObj);
		draw_game_object(&titleObj);
200003e2:	23bc      	movs	r3, #188	; 0xbc
200003e4:	005b      	lsls	r3, r3, #1
200003e6:	18fb      	adds	r3, r7, r3
200003e8:	0018      	movs	r0, r3
200003ea:	f001 f901 	bl	200015f0 <draw_game_object>
		show_frame(1);
200003ee:	2001      	movs	r0, #1
200003f0:	f001 f93f 	bl	20001672 <show_frame>
		
		text1.display(&text1, 20);
200003f4:	4b31      	ldr	r3, [pc, #196]	; (200004bc <main+0x324>)
200003f6:	22ec      	movs	r2, #236	; 0xec
200003f8:	0052      	lsls	r2, r2, #1
200003fa:	4694      	mov	ip, r2
200003fc:	44bc      	add	ip, r7
200003fe:	4463      	add	r3, ip
20000400:	691b      	ldr	r3, [r3, #16]
20000402:	22c8      	movs	r2, #200	; 0xc8
20000404:	18ba      	adds	r2, r7, r2
20000406:	2114      	movs	r1, #20
20000408:	0010      	movs	r0, r2
2000040a:	4798      	blx	r3
		
		fire2.update(&fire2);
2000040c:	1c7b      	adds	r3, r7, #1
2000040e:	33ff      	adds	r3, #255	; 0xff
20000410:	68db      	ldr	r3, [r3, #12]
20000412:	1c7a      	adds	r2, r7, #1
20000414:	32ff      	adds	r2, #255	; 0xff
20000416:	0010      	movs	r0, r2
20000418:	4798      	blx	r3
		fire3.update(&fire3);
2000041a:	23dc      	movs	r3, #220	; 0xdc
2000041c:	18fb      	adds	r3, r7, r3
2000041e:	68db      	ldr	r3, [r3, #12]
20000420:	22dc      	movs	r2, #220	; 0xdc
20000422:	18ba      	adds	r2, r7, r2
20000424:	0010      	movs	r0, r2
20000426:	4798      	blx	r3
		
		monsterObj.update(&monsterObj);
20000428:	23da      	movs	r3, #218	; 0xda
2000042a:	005b      	lsls	r3, r3, #1
2000042c:	18fb      	adds	r3, r7, r3
2000042e:	68db      	ldr	r3, [r3, #12]
20000430:	22da      	movs	r2, #218	; 0xda
20000432:	0052      	lsls	r2, r2, #1
20000434:	18ba      	adds	r2, r7, r2
20000436:	0010      	movs	r0, r2
20000438:	4798      	blx	r3
		counter++;
2000043a:	e7ae      	b.n	2000039a <main+0x202>
2000043c:	20001f2c 	andcs	r1, r0, ip, lsr #30
20000440:	20001fb8 			; <UNDEFINED> instruction: 0x20001fb8
20000444:	20001fac 	andcs	r1, r0, ip, lsr #31
20000448:	200007c1 	andcs	r0, r0, r1, asr #15
2000044c:	20001fc8 	andcs	r1, r0, r8, asr #31
20000450:	20001f9c 	mulcs	r0, ip, pc	; <UNPREDICTABLE>
20000454:	20001fb0 			; <UNDEFINED> instruction: 0x20001fb0
20000458:	20001f48 	andcs	r1, r0, r8, asr #30
2000045c:	20001fb4 			; <UNDEFINED> instruction: 0x20001fb4
20000460:	20001f80 	andcs	r1, r0, r0, lsl #31
20000464:	200004d1 	ldrdcs	r0, [r0], -r1
20000468:	20005314 	andcs	r5, r0, r4, lsl r3
2000046c:	20005328 	andcs	r5, r0, r8, lsr #6
20000470:	2000533c 	andcs	r5, r0, ip, lsr r3
20000474:	20005344 	andcs	r5, r0, r4, asr #6
20000478:	20005354 	andcs	r5, r0, r4, asr r3
2000047c:	20005368 	andcs	r5, r0, r8, ror #6
20000480:	2000537c 	andcs	r5, r0, ip, ror r3
20000484:	20005380 	andcs	r5, r0, r0, lsl #7
20000488:	2000538c 	andcs	r5, r0, ip, lsl #7
2000048c:	200053a0 	andcs	r5, r0, r0, lsr #7
20000490:	200053b0 			; <UNDEFINED> instruction: 0x200053b0
20000494:	200053bc 			; <UNDEFINED> instruction: 0x200053bc
20000498:	200053d0 	ldrdcs	r5, [r0], -r0
2000049c:	200053e8 	andcs	r5, r0, r8, ror #7
200004a0:	200053fc 	strdcs	r5, [r0], -ip
200004a4:	20005410 	andcs	r5, r0, r0, lsl r4
200004a8:	20005424 	andcs	r5, r0, r4, lsr #8
200004ac:	2000543c 	andcs	r5, r0, ip, lsr r4
200004b0:	20005454 	andcs	r5, r0, r4, asr r4
200004b4:	2000546c 	andcs	r5, r0, ip, ror #8
200004b8:	20001f18 	andcs	r1, r0, r8, lsl pc
200004bc:	fffffef0 			; <UNDEFINED> instruction: 0xfffffef0

200004c0 <render>:
GameObject* gameObjects[100];
int nGameObjects = 0;


void render(GameObject* this)
{
200004c0:	b580      	push	{r7, lr}
200004c2:	b082      	sub	sp, #8
200004c4:	af00      	add	r7, sp, #0
200004c6:	6078      	str	r0, [r7, #4]
    
}
200004c8:	46c0      	nop			; (mov r8, r8)
200004ca:	46bd      	mov	sp, r7
200004cc:	b002      	add	sp, #8
200004ce:	bd80      	pop	{r7, pc}

200004d0 <gameObjectUpdate>:

void gameObjectUpdate(GameObject *this) {
200004d0:	b580      	push	{r7, lr}
200004d2:	b082      	sub	sp, #8
200004d4:	af00      	add	r7, sp, #0
200004d6:	6078      	str	r0, [r7, #4]
	this->animation_counter++;
200004d8:	687b      	ldr	r3, [r7, #4]
200004da:	6a1b      	ldr	r3, [r3, #32]
200004dc:	1c5a      	adds	r2, r3, #1
200004de:	687b      	ldr	r3, [r7, #4]
200004e0:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
200004e2:	687b      	ldr	r3, [r7, #4]
200004e4:	6a1a      	ldr	r2, [r3, #32]
200004e6:	687b      	ldr	r3, [r7, #4]
200004e8:	69db      	ldr	r3, [r3, #28]
200004ea:	429a      	cmp	r2, r3
200004ec:	d10f      	bne.n	2000050e <gameObjectUpdate+0x3e>
		this->animation_counter = 0;
200004ee:	687b      	ldr	r3, [r7, #4]
200004f0:	2200      	movs	r2, #0
200004f2:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
200004f4:	687b      	ldr	r3, [r7, #4]
200004f6:	695b      	ldr	r3, [r3, #20]
200004f8:	1c5a      	adds	r2, r3, #1
200004fa:	687b      	ldr	r3, [r7, #4]
200004fc:	699b      	ldr	r3, [r3, #24]
200004fe:	0019      	movs	r1, r3
20000500:	0010      	movs	r0, r2
20000502:	f001 fd03 	bl	20001f0c <__aeabi_idivmod>
20000506:	000b      	movs	r3, r1
20000508:	001a      	movs	r2, r3
2000050a:	687b      	ldr	r3, [r7, #4]
2000050c:	615a      	str	r2, [r3, #20]
	}
}
2000050e:	46c0      	nop			; (mov r8, r8)
20000510:	46bd      	mov	sp, r7
20000512:	b002      	add	sp, #8
20000514:	bd80      	pop	{r7, pc}
	...

20000518 <initSprites>:
Image fire2Image;
Image fire3Image;
Image fire4Image;
Image fire5Image;
Image fireImages[5];
static void initSprites( void ) {	
20000518:	b580      	push	{r7, lr}
2000051a:	b08c      	sub	sp, #48	; 0x30
2000051c:	af00      	add	r7, sp, #0
	sprite *pointer0 = &tempFireBlack;
2000051e:	4b3e      	ldr	r3, [pc, #248]	; (20000618 <initSprites+0x100>)
20000520:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer0, fire_black_2_bits, fire1_gray_width, fire1_gray_height);
20000522:	493e      	ldr	r1, [pc, #248]	; (2000061c <initSprites+0x104>)
20000524:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20000526:	230c      	movs	r3, #12
20000528:	2208      	movs	r2, #8
2000052a:	f001 f8eb 	bl	20001704 <load_sprite>
	fireBlack = pointer0;
2000052e:	4b3c      	ldr	r3, [pc, #240]	; (20000620 <initSprites+0x108>)
20000530:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20000532:	601a      	str	r2, [r3, #0]
	
	sprite *pointer1 = &tempFire1Gray;
20000534:	4b3b      	ldr	r3, [pc, #236]	; (20000624 <initSprites+0x10c>)
20000536:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer1, fire1_gray_bits, fire1_gray_width, fire1_gray_height);
20000538:	493b      	ldr	r1, [pc, #236]	; (20000628 <initSprites+0x110>)
2000053a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
2000053c:	230c      	movs	r3, #12
2000053e:	2208      	movs	r2, #8
20000540:	f001 f8e0 	bl	20001704 <load_sprite>
	fire1Gray = pointer1;
20000544:	4b39      	ldr	r3, [pc, #228]	; (2000062c <initSprites+0x114>)
20000546:	6aba      	ldr	r2, [r7, #40]	; 0x28
20000548:	601a      	str	r2, [r3, #0]

	sprite *pointer2 = &tempFire1Light;
2000054a:	4b39      	ldr	r3, [pc, #228]	; (20000630 <initSprites+0x118>)
2000054c:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer2, fire1_light_bits, fire1_gray_width, fire1_gray_height);
2000054e:	4939      	ldr	r1, [pc, #228]	; (20000634 <initSprites+0x11c>)
20000550:	6a78      	ldr	r0, [r7, #36]	; 0x24
20000552:	230c      	movs	r3, #12
20000554:	2208      	movs	r2, #8
20000556:	f001 f8d5 	bl	20001704 <load_sprite>
	fire1Light = pointer2;
2000055a:	4b37      	ldr	r3, [pc, #220]	; (20000638 <initSprites+0x120>)
2000055c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000055e:	601a      	str	r2, [r3, #0]

	sprite *pointer3 = &tempFire2Gray;
20000560:	4b36      	ldr	r3, [pc, #216]	; (2000063c <initSprites+0x124>)
20000562:	623b      	str	r3, [r7, #32]
	load_sprite(pointer3, fire2_gray_bits, fire1_gray_width, fire1_gray_height);
20000564:	4936      	ldr	r1, [pc, #216]	; (20000640 <initSprites+0x128>)
20000566:	6a38      	ldr	r0, [r7, #32]
20000568:	230c      	movs	r3, #12
2000056a:	2208      	movs	r2, #8
2000056c:	f001 f8ca 	bl	20001704 <load_sprite>
	fire2Gray = pointer3;
20000570:	4b34      	ldr	r3, [pc, #208]	; (20000644 <initSprites+0x12c>)
20000572:	6a3a      	ldr	r2, [r7, #32]
20000574:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempFire2Light;
20000576:	4b34      	ldr	r3, [pc, #208]	; (20000648 <initSprites+0x130>)
20000578:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer4, fire2_light_bits, fire1_gray_width, fire1_gray_height);
2000057a:	4934      	ldr	r1, [pc, #208]	; (2000064c <initSprites+0x134>)
2000057c:	69f8      	ldr	r0, [r7, #28]
2000057e:	230c      	movs	r3, #12
20000580:	2208      	movs	r2, #8
20000582:	f001 f8bf 	bl	20001704 <load_sprite>
	fire2Light = pointer4;
20000586:	4b32      	ldr	r3, [pc, #200]	; (20000650 <initSprites+0x138>)
20000588:	69fa      	ldr	r2, [r7, #28]
2000058a:	601a      	str	r2, [r3, #0]

	sprite *pointer5 = &tempFire3Gray;
2000058c:	4b31      	ldr	r3, [pc, #196]	; (20000654 <initSprites+0x13c>)
2000058e:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer5, fire3_gray_bits, fire1_gray_width, fire1_gray_height);
20000590:	4931      	ldr	r1, [pc, #196]	; (20000658 <initSprites+0x140>)
20000592:	69b8      	ldr	r0, [r7, #24]
20000594:	230c      	movs	r3, #12
20000596:	2208      	movs	r2, #8
20000598:	f001 f8b4 	bl	20001704 <load_sprite>
	fire3Gray = pointer5;
2000059c:	4b2f      	ldr	r3, [pc, #188]	; (2000065c <initSprites+0x144>)
2000059e:	69ba      	ldr	r2, [r7, #24]
200005a0:	601a      	str	r2, [r3, #0]

	sprite *pointer6 = &tempFire3Light;
200005a2:	4b2f      	ldr	r3, [pc, #188]	; (20000660 <initSprites+0x148>)
200005a4:	617b      	str	r3, [r7, #20]
	load_sprite(pointer6, fire3_light_bits, fire1_gray_width, fire1_gray_height);
200005a6:	492f      	ldr	r1, [pc, #188]	; (20000664 <initSprites+0x14c>)
200005a8:	6978      	ldr	r0, [r7, #20]
200005aa:	230c      	movs	r3, #12
200005ac:	2208      	movs	r2, #8
200005ae:	f001 f8a9 	bl	20001704 <load_sprite>
	fire3Light = pointer6;
200005b2:	4b2d      	ldr	r3, [pc, #180]	; (20000668 <initSprites+0x150>)
200005b4:	697a      	ldr	r2, [r7, #20]
200005b6:	601a      	str	r2, [r3, #0]

	sprite *pointer7 = &tempFire4Gray;
200005b8:	4b2c      	ldr	r3, [pc, #176]	; (2000066c <initSprites+0x154>)
200005ba:	613b      	str	r3, [r7, #16]
	load_sprite(pointer7, fire4_gray_bits, fire1_gray_width, fire1_gray_height);
200005bc:	492c      	ldr	r1, [pc, #176]	; (20000670 <initSprites+0x158>)
200005be:	6938      	ldr	r0, [r7, #16]
200005c0:	230c      	movs	r3, #12
200005c2:	2208      	movs	r2, #8
200005c4:	f001 f89e 	bl	20001704 <load_sprite>
	fire4Gray = pointer7;
200005c8:	4b2a      	ldr	r3, [pc, #168]	; (20000674 <initSprites+0x15c>)
200005ca:	693a      	ldr	r2, [r7, #16]
200005cc:	601a      	str	r2, [r3, #0]

	sprite *pointer8 = &tempFire4Light;
200005ce:	4b2a      	ldr	r3, [pc, #168]	; (20000678 <initSprites+0x160>)
200005d0:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer8, fire4_light_bits, fire1_gray_width, fire1_gray_height);
200005d2:	492a      	ldr	r1, [pc, #168]	; (2000067c <initSprites+0x164>)
200005d4:	68f8      	ldr	r0, [r7, #12]
200005d6:	230c      	movs	r3, #12
200005d8:	2208      	movs	r2, #8
200005da:	f001 f893 	bl	20001704 <load_sprite>
	fire4Light = pointer8;
200005de:	4b28      	ldr	r3, [pc, #160]	; (20000680 <initSprites+0x168>)
200005e0:	68fa      	ldr	r2, [r7, #12]
200005e2:	601a      	str	r2, [r3, #0]

	sprite *pointer9 = &tempFire5Gray;
200005e4:	4b27      	ldr	r3, [pc, #156]	; (20000684 <initSprites+0x16c>)
200005e6:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer9, fire5_gray_bits, fire1_gray_width, fire1_gray_height);
200005e8:	4927      	ldr	r1, [pc, #156]	; (20000688 <initSprites+0x170>)
200005ea:	68b8      	ldr	r0, [r7, #8]
200005ec:	230c      	movs	r3, #12
200005ee:	2208      	movs	r2, #8
200005f0:	f001 f888 	bl	20001704 <load_sprite>
	fire5Gray = pointer9;
200005f4:	4b25      	ldr	r3, [pc, #148]	; (2000068c <initSprites+0x174>)
200005f6:	68ba      	ldr	r2, [r7, #8]
200005f8:	601a      	str	r2, [r3, #0]

	sprite *pointer10 = &tempFire5Light;
200005fa:	4b25      	ldr	r3, [pc, #148]	; (20000690 <initSprites+0x178>)
200005fc:	607b      	str	r3, [r7, #4]
	load_sprite(pointer10, fire5_light_bits, fire1_gray_width, fire1_gray_height);
200005fe:	4925      	ldr	r1, [pc, #148]	; (20000694 <initSprites+0x17c>)
20000600:	6878      	ldr	r0, [r7, #4]
20000602:	230c      	movs	r3, #12
20000604:	2208      	movs	r2, #8
20000606:	f001 f87d 	bl	20001704 <load_sprite>
	fire5Light = pointer10;
2000060a:	4b23      	ldr	r3, [pc, #140]	; (20000698 <initSprites+0x180>)
2000060c:	687a      	ldr	r2, [r7, #4]
2000060e:	601a      	str	r2, [r3, #0]
}
20000610:	46c0      	nop			; (mov r8, r8)
20000612:	46bd      	mov	sp, r7
20000614:	b00c      	add	sp, #48	; 0x30
20000616:	bd80      	pop	{r7, pc}
20000618:	20002194 	mulcs	r0, r4, r1
2000061c:	2000528c 	andcs	r5, r0, ip, lsl #5
20000620:	2000228c 	andcs	r2, r0, ip, lsl #5
20000624:	20002280 	andcs	r2, r0, r0, lsl #5
20000628:	20005298 	mulcs	r0, r8, r2
2000062c:	200022a4 	andcs	r2, r0, r4, lsr #5
20000630:	2000225c 	andcs	r2, r0, ip, asr r2
20000634:	200052a4 	andcs	r5, r0, r4, lsr #5
20000638:	2000215c 	andcs	r2, r0, ip, asr r1
2000063c:	20002188 	andcs	r2, r0, r8, lsl #3
20000640:	200052b0 			; <UNDEFINED> instruction: 0x200052b0
20000644:	200022a0 	andcs	r2, r0, r0, lsr #5
20000648:	20002290 	mulcs	r0, r0, r2
2000064c:	200052bc 			; <UNDEFINED> instruction: 0x200052bc
20000650:	20002278 	andcs	r2, r0, r8, ror r2
20000654:	20002240 	andcs	r2, r0, r0, asr #4
20000658:	200052c8 	andcs	r5, r0, r8, asr #5
2000065c:	2000216c 	andcs	r2, r0, ip, ror #2
20000660:	20002160 	andcs	r2, r0, r0, ror #2
20000664:	200052d4 	ldrdcs	r5, [r0], -r4
20000668:	2000229c 	mulcs	r0, ip, r2
2000066c:	20002170 	andcs	r2, r0, r0, ror r1
20000670:	200052e0 	andcs	r5, r0, r0, ror #5
20000674:	20002258 	andcs	r2, r0, r8, asr r2
20000678:	200021ac 	andcs	r2, r0, ip, lsr #3
2000067c:	200052ec 	andcs	r5, r0, ip, ror #5
20000680:	200021c4 	andcs	r2, r0, r4, asr #3
20000684:	20002234 	andcs	r2, r0, r4, lsr r2
20000688:	200052f8 	strdcs	r5, [r0], -r8
2000068c:	20002274 	andcs	r2, r0, r4, ror r2
20000690:	20002268 	andcs	r2, r0, r8, ror #4
20000694:	20005304 	andcs	r5, r0, r4, lsl #6
20000698:	2000227c 	andcs	r2, r0, ip, ror r2

2000069c <init_fire>:
	
void init_fire( GameObject *fireObj ) {
2000069c:	b590      	push	{r4, r7, lr}
2000069e:	b083      	sub	sp, #12
200006a0:	af00      	add	r7, sp, #0
200006a2:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
200006a4:	4b30      	ldr	r3, [pc, #192]	; (20000768 <init_fire+0xcc>)
200006a6:	681b      	ldr	r3, [r3, #0]
200006a8:	2b00      	cmp	r3, #0
200006aa:	d049      	beq.n	20000740 <init_fire+0xa4>
		initSprites();
200006ac:	f7ff ff34 	bl	20000518 <initSprites>
		firstTime = 0;			
200006b0:	4b2d      	ldr	r3, [pc, #180]	; (20000768 <init_fire+0xcc>)
200006b2:	2200      	movs	r2, #0
200006b4:	601a      	str	r2, [r3, #0]

		fireImages[0] = fire1Image;
200006b6:	4b2d      	ldr	r3, [pc, #180]	; (2000076c <init_fire+0xd0>)
200006b8:	4a2d      	ldr	r2, [pc, #180]	; (20000770 <init_fire+0xd4>)
200006ba:	ca13      	ldmia	r2!, {r0, r1, r4}
200006bc:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[1] = fire2Image;
200006be:	4b2b      	ldr	r3, [pc, #172]	; (2000076c <init_fire+0xd0>)
200006c0:	4a2c      	ldr	r2, [pc, #176]	; (20000774 <init_fire+0xd8>)
200006c2:	330c      	adds	r3, #12
200006c4:	ca13      	ldmia	r2!, {r0, r1, r4}
200006c6:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[2] = fire3Image;
200006c8:	4b28      	ldr	r3, [pc, #160]	; (2000076c <init_fire+0xd0>)
200006ca:	4a2b      	ldr	r2, [pc, #172]	; (20000778 <init_fire+0xdc>)
200006cc:	3318      	adds	r3, #24
200006ce:	ca13      	ldmia	r2!, {r0, r1, r4}
200006d0:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[3] = fire4Image;
200006d2:	4b26      	ldr	r3, [pc, #152]	; (2000076c <init_fire+0xd0>)
200006d4:	4a29      	ldr	r2, [pc, #164]	; (2000077c <init_fire+0xe0>)
200006d6:	3324      	adds	r3, #36	; 0x24
200006d8:	ca13      	ldmia	r2!, {r0, r1, r4}
200006da:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[4] = fire5Image;
200006dc:	4b23      	ldr	r3, [pc, #140]	; (2000076c <init_fire+0xd0>)
200006de:	4a28      	ldr	r2, [pc, #160]	; (20000780 <init_fire+0xe4>)
200006e0:	3330      	adds	r3, #48	; 0x30
200006e2:	ca13      	ldmia	r2!, {r0, r1, r4}
200006e4:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&fireImages[0], fireBlack, fire1Gray, fire1Light);
200006e6:	4b27      	ldr	r3, [pc, #156]	; (20000784 <init_fire+0xe8>)
200006e8:	6819      	ldr	r1, [r3, #0]
200006ea:	4b27      	ldr	r3, [pc, #156]	; (20000788 <init_fire+0xec>)
200006ec:	681a      	ldr	r2, [r3, #0]
200006ee:	4b27      	ldr	r3, [pc, #156]	; (2000078c <init_fire+0xf0>)
200006f0:	681b      	ldr	r3, [r3, #0]
200006f2:	481e      	ldr	r0, [pc, #120]	; (2000076c <init_fire+0xd0>)
200006f4:	f000 fff2 	bl	200016dc <load_image>
		load_image(&fireImages[1], fireBlack, fire2Gray, fire2Light);
200006f8:	4b22      	ldr	r3, [pc, #136]	; (20000784 <init_fire+0xe8>)
200006fa:	6819      	ldr	r1, [r3, #0]
200006fc:	4b24      	ldr	r3, [pc, #144]	; (20000790 <init_fire+0xf4>)
200006fe:	681a      	ldr	r2, [r3, #0]
20000700:	4b24      	ldr	r3, [pc, #144]	; (20000794 <init_fire+0xf8>)
20000702:	681b      	ldr	r3, [r3, #0]
20000704:	4824      	ldr	r0, [pc, #144]	; (20000798 <init_fire+0xfc>)
20000706:	f000 ffe9 	bl	200016dc <load_image>
		load_image(&fireImages[2], fireBlack, fire3Gray, fire3Light);
2000070a:	4b1e      	ldr	r3, [pc, #120]	; (20000784 <init_fire+0xe8>)
2000070c:	6819      	ldr	r1, [r3, #0]
2000070e:	4b23      	ldr	r3, [pc, #140]	; (2000079c <init_fire+0x100>)
20000710:	681a      	ldr	r2, [r3, #0]
20000712:	4b23      	ldr	r3, [pc, #140]	; (200007a0 <init_fire+0x104>)
20000714:	681b      	ldr	r3, [r3, #0]
20000716:	4823      	ldr	r0, [pc, #140]	; (200007a4 <init_fire+0x108>)
20000718:	f000 ffe0 	bl	200016dc <load_image>
		load_image(&fireImages[3], fireBlack, fire4Gray, fire4Light);
2000071c:	4b19      	ldr	r3, [pc, #100]	; (20000784 <init_fire+0xe8>)
2000071e:	6819      	ldr	r1, [r3, #0]
20000720:	4b21      	ldr	r3, [pc, #132]	; (200007a8 <init_fire+0x10c>)
20000722:	681a      	ldr	r2, [r3, #0]
20000724:	4b21      	ldr	r3, [pc, #132]	; (200007ac <init_fire+0x110>)
20000726:	681b      	ldr	r3, [r3, #0]
20000728:	4821      	ldr	r0, [pc, #132]	; (200007b0 <init_fire+0x114>)
2000072a:	f000 ffd7 	bl	200016dc <load_image>
		load_image(&fireImages[4], fireBlack, fire5Gray, fire5Light);
2000072e:	4b15      	ldr	r3, [pc, #84]	; (20000784 <init_fire+0xe8>)
20000730:	6819      	ldr	r1, [r3, #0]
20000732:	4b20      	ldr	r3, [pc, #128]	; (200007b4 <init_fire+0x118>)
20000734:	681a      	ldr	r2, [r3, #0]
20000736:	4b20      	ldr	r3, [pc, #128]	; (200007b8 <init_fire+0x11c>)
20000738:	681b      	ldr	r3, [r3, #0]
2000073a:	4820      	ldr	r0, [pc, #128]	; (200007bc <init_fire+0x120>)
2000073c:	f000 ffce 	bl	200016dc <load_image>
	}
	
	fireObj->images = fireImages;
20000740:	687b      	ldr	r3, [r7, #4]
20000742:	4a0a      	ldr	r2, [pc, #40]	; (2000076c <init_fire+0xd0>)
20000744:	601a      	str	r2, [r3, #0]

	fireObj->current_frame = 0;
20000746:	687b      	ldr	r3, [r7, #4]
20000748:	2200      	movs	r2, #0
2000074a:	615a      	str	r2, [r3, #20]
	fireObj->n_frames = 5;
2000074c:	687b      	ldr	r3, [r7, #4]
2000074e:	2205      	movs	r2, #5
20000750:	619a      	str	r2, [r3, #24]
	fireObj->animation_speed = 1;
20000752:	687b      	ldr	r3, [r7, #4]
20000754:	2201      	movs	r2, #1
20000756:	61da      	str	r2, [r3, #28]
	fireObj->animation_counter = 0;
20000758:	687b      	ldr	r3, [r7, #4]
2000075a:	2200      	movs	r2, #0
2000075c:	621a      	str	r2, [r3, #32]
}
2000075e:	46c0      	nop			; (mov r8, r8)
20000760:	46bd      	mov	sp, r7
20000762:	b003      	add	sp, #12
20000764:	bd90      	pop	{r4, r7, pc}
20000766:	46c0      	nop			; (mov r8, r8)
20000768:	20005310 	andcs	r5, r0, r0, lsl r3
2000076c:	200021f8 	strdcs	r2, [r0], -r8
20000770:	200021b8 			; <UNDEFINED> instruction: 0x200021b8
20000774:	2000217c 	andcs	r2, r0, ip, ror r1
20000778:	200021a0 	andcs	r2, r0, r0, lsr #3
2000077c:	2000224c 	andcs	r2, r0, ip, asr #4
20000780:	200021ec 	andcs	r2, r0, ip, ror #3
20000784:	2000228c 	andcs	r2, r0, ip, lsl #5
20000788:	200022a4 	andcs	r2, r0, r4, lsr #5
2000078c:	2000215c 	andcs	r2, r0, ip, asr r1
20000790:	200022a0 	andcs	r2, r0, r0, lsr #5
20000794:	20002278 	andcs	r2, r0, r8, ror r2
20000798:	20002204 	andcs	r2, r0, r4, lsl #4
2000079c:	2000216c 	andcs	r2, r0, ip, ror #2
200007a0:	2000229c 	mulcs	r0, ip, r2
200007a4:	20002210 	andcs	r2, r0, r0, lsl r2
200007a8:	20002258 	andcs	r2, r0, r8, asr r2
200007ac:	200021c4 	andcs	r2, r0, r4, asr #3
200007b0:	2000221c 	andcs	r2, r0, ip, lsl r2
200007b4:	20002274 	andcs	r2, r0, r4, ror r2
200007b8:	2000227c 	andcs	r2, r0, ip, ror r2
200007bc:	20002228 	andcs	r2, r0, r8, lsr #4

200007c0 <playerUpdate>:
#include "gpio.h"
#include "controls.h"
#include "gameobject.h"
#include "player.h"

void playerUpdate(GameObject *this) {
200007c0:	b580      	push	{r7, lr}
200007c2:	b082      	sub	sp, #8
200007c4:	af00      	add	r7, sp, #0
200007c6:	6078      	str	r0, [r7, #4]
	this->animation_counter++;
200007c8:	687b      	ldr	r3, [r7, #4]
200007ca:	6a1b      	ldr	r3, [r3, #32]
200007cc:	1c5a      	adds	r2, r3, #1
200007ce:	687b      	ldr	r3, [r7, #4]
200007d0:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
200007d2:	687b      	ldr	r3, [r7, #4]
200007d4:	6a1a      	ldr	r2, [r3, #32]
200007d6:	687b      	ldr	r3, [r7, #4]
200007d8:	69db      	ldr	r3, [r3, #28]
200007da:	429a      	cmp	r2, r3
200007dc:	d10f      	bne.n	200007fe <playerUpdate+0x3e>
		this->animation_counter = 0;
200007de:	687b      	ldr	r3, [r7, #4]
200007e0:	2200      	movs	r2, #0
200007e2:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
200007e4:	687b      	ldr	r3, [r7, #4]
200007e6:	695b      	ldr	r3, [r3, #20]
200007e8:	1c5a      	adds	r2, r3, #1
200007ea:	687b      	ldr	r3, [r7, #4]
200007ec:	699b      	ldr	r3, [r3, #24]
200007ee:	0019      	movs	r1, r3
200007f0:	0010      	movs	r0, r2
200007f2:	f001 fb8b 	bl	20001f0c <__aeabi_idivmod>
200007f6:	000b      	movs	r3, r1
200007f8:	001a      	movs	r2, r3
200007fa:	687b      	ldr	r3, [r7, #4]
200007fc:	615a      	str	r2, [r3, #20]
	
	static lastRightValue = 0;
	static lastLeftValue = 0; 
	static speed = 0;
	
	if (!lastRightValue && read_DIL_single(RIGHT_TRIGGER)){
200007fe:	4b23      	ldr	r3, [pc, #140]	; (2000088c <playerUpdate+0xcc>)
20000800:	681b      	ldr	r3, [r3, #0]
20000802:	2b00      	cmp	r3, #0
20000804:	d109      	bne.n	2000081a <playerUpdate+0x5a>
20000806:	2000      	movs	r0, #0
20000808:	f000 ffa6 	bl	20001758 <read_DIL_single>
2000080c:	1e03      	subs	r3, r0, #0
2000080e:	d004      	beq.n	2000081a <playerUpdate+0x5a>
		speed += SPEED_ADD;
20000810:	4b1f      	ldr	r3, [pc, #124]	; (20000890 <playerUpdate+0xd0>)
20000812:	681b      	ldr	r3, [r3, #0]
20000814:	1cda      	adds	r2, r3, #3
20000816:	4b1e      	ldr	r3, [pc, #120]	; (20000890 <playerUpdate+0xd0>)
20000818:	601a      	str	r2, [r3, #0]
	}
	
	if (!lastLeftValue && read_DIL_single(LEFT_TRIGGER)){
2000081a:	4b1e      	ldr	r3, [pc, #120]	; (20000894 <playerUpdate+0xd4>)
2000081c:	681b      	ldr	r3, [r3, #0]
2000081e:	2b00      	cmp	r3, #0
20000820:	d109      	bne.n	20000836 <playerUpdate+0x76>
20000822:	2007      	movs	r0, #7
20000824:	f000 ff98 	bl	20001758 <read_DIL_single>
20000828:	1e03      	subs	r3, r0, #0
2000082a:	d004      	beq.n	20000836 <playerUpdate+0x76>
		speed -= SPEED_ADD;
2000082c:	4b18      	ldr	r3, [pc, #96]	; (20000890 <playerUpdate+0xd0>)
2000082e:	681b      	ldr	r3, [r3, #0]
20000830:	1eda      	subs	r2, r3, #3
20000832:	4b17      	ldr	r3, [pc, #92]	; (20000890 <playerUpdate+0xd0>)
20000834:	601a      	str	r2, [r3, #0]
	}
	
	this->xPos += speed;
20000836:	687b      	ldr	r3, [r7, #4]
20000838:	685a      	ldr	r2, [r3, #4]
2000083a:	4b15      	ldr	r3, [pc, #84]	; (20000890 <playerUpdate+0xd0>)
2000083c:	681b      	ldr	r3, [r3, #0]
2000083e:	18d2      	adds	r2, r2, r3
20000840:	687b      	ldr	r3, [r7, #4]
20000842:	605a      	str	r2, [r3, #4]
	
	if (speed > 0){
20000844:	4b12      	ldr	r3, [pc, #72]	; (20000890 <playerUpdate+0xd0>)
20000846:	681b      	ldr	r3, [r3, #0]
20000848:	2b00      	cmp	r3, #0
2000084a:	dd05      	ble.n	20000858 <playerUpdate+0x98>
		speed--;
2000084c:	4b10      	ldr	r3, [pc, #64]	; (20000890 <playerUpdate+0xd0>)
2000084e:	681b      	ldr	r3, [r3, #0]
20000850:	1e5a      	subs	r2, r3, #1
20000852:	4b0f      	ldr	r3, [pc, #60]	; (20000890 <playerUpdate+0xd0>)
20000854:	601a      	str	r2, [r3, #0]
20000856:	e008      	b.n	2000086a <playerUpdate+0xaa>
	}
	else if (speed < 0){
20000858:	4b0d      	ldr	r3, [pc, #52]	; (20000890 <playerUpdate+0xd0>)
2000085a:	681b      	ldr	r3, [r3, #0]
2000085c:	2b00      	cmp	r3, #0
2000085e:	da04      	bge.n	2000086a <playerUpdate+0xaa>
		speed++;
20000860:	4b0b      	ldr	r3, [pc, #44]	; (20000890 <playerUpdate+0xd0>)
20000862:	681b      	ldr	r3, [r3, #0]
20000864:	1c5a      	adds	r2, r3, #1
20000866:	4b0a      	ldr	r3, [pc, #40]	; (20000890 <playerUpdate+0xd0>)
20000868:	601a      	str	r2, [r3, #0]
	}
	
	lastRightValue = read_DIL_single(RIGHT_TRIGGER);
2000086a:	2000      	movs	r0, #0
2000086c:	f000 ff74 	bl	20001758 <read_DIL_single>
20000870:	0002      	movs	r2, r0
20000872:	4b06      	ldr	r3, [pc, #24]	; (2000088c <playerUpdate+0xcc>)
20000874:	601a      	str	r2, [r3, #0]
	lastLeftValue = read_DIL_single(LEFT_TRIGGER);
20000876:	2007      	movs	r0, #7
20000878:	f000 ff6e 	bl	20001758 <read_DIL_single>
2000087c:	0002      	movs	r2, r0
2000087e:	4b05      	ldr	r3, [pc, #20]	; (20000894 <playerUpdate+0xd4>)
20000880:	601a      	str	r2, [r3, #0]
	
20000882:	46c0      	nop			; (mov r8, r8)
20000884:	46bd      	mov	sp, r7
20000886:	b002      	add	sp, #8
20000888:	bd80      	pop	{r7, pc}
2000088a:	46c0      	nop			; (mov r8, r8)
2000088c:	20001f20 	andcs	r1, r0, r0, lsr #30
20000890:	20001f24 	andcs	r1, r0, r4, lsr #30
20000894:	20001f28 	andcs	r1, r0, r8, lsr #30

20000898 <delay_250ns>:
#include "graphics.h"


void delay_250ns(void){
20000898:	b580      	push	{r7, lr}
2000089a:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
2000089c:	4b0c      	ldr	r3, [pc, #48]	; (200008d0 <delay_250ns+0x38>)
2000089e:	2200      	movs	r2, #0
200008a0:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/4) -1);
200008a2:	4b0c      	ldr	r3, [pc, #48]	; (200008d4 <delay_250ns+0x3c>)
200008a4:	2229      	movs	r2, #41	; 0x29
200008a6:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
200008a8:	4b0b      	ldr	r3, [pc, #44]	; (200008d8 <delay_250ns+0x40>)
200008aa:	2200      	movs	r2, #0
200008ac:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
200008ae:	4b08      	ldr	r3, [pc, #32]	; (200008d0 <delay_250ns+0x38>)
200008b0:	2205      	movs	r2, #5
200008b2:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
200008b4:	46c0      	nop			; (mov r8, r8)
200008b6:	4b06      	ldr	r3, [pc, #24]	; (200008d0 <delay_250ns+0x38>)
200008b8:	681a      	ldr	r2, [r3, #0]
200008ba:	2380      	movs	r3, #128	; 0x80
200008bc:	025b      	lsls	r3, r3, #9
200008be:	4013      	ands	r3, r2
200008c0:	d0f9      	beq.n	200008b6 <delay_250ns+0x1e>
	*STK_CTRL = 0;
200008c2:	4b03      	ldr	r3, [pc, #12]	; (200008d0 <delay_250ns+0x38>)
200008c4:	2200      	movs	r2, #0
200008c6:	601a      	str	r2, [r3, #0]
}
200008c8:	46c0      	nop			; (mov r8, r8)
200008ca:	46bd      	mov	sp, r7
200008cc:	bd80      	pop	{r7, pc}
200008ce:	46c0      	nop			; (mov r8, r8)
200008d0:	e000e010 	and	lr, r0, r0, lsl r0
200008d4:	e000e014 	and	lr, r0, r4, lsl r0
200008d8:	e000e018 	and	lr, r0, r8, lsl r0

200008dc <delay_500ns>:

void delay_500ns(void){
200008dc:	b580      	push	{r7, lr}
200008de:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
200008e0:	4b0c      	ldr	r3, [pc, #48]	; (20000914 <delay_500ns+0x38>)
200008e2:	2200      	movs	r2, #0
200008e4:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/2) -1);
200008e6:	4b0c      	ldr	r3, [pc, #48]	; (20000918 <delay_500ns+0x3c>)
200008e8:	2253      	movs	r2, #83	; 0x53
200008ea:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
200008ec:	4b0b      	ldr	r3, [pc, #44]	; (2000091c <delay_500ns+0x40>)
200008ee:	2200      	movs	r2, #0
200008f0:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
200008f2:	4b08      	ldr	r3, [pc, #32]	; (20000914 <delay_500ns+0x38>)
200008f4:	2205      	movs	r2, #5
200008f6:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
200008f8:	46c0      	nop			; (mov r8, r8)
200008fa:	4b06      	ldr	r3, [pc, #24]	; (20000914 <delay_500ns+0x38>)
200008fc:	681a      	ldr	r2, [r3, #0]
200008fe:	2380      	movs	r3, #128	; 0x80
20000900:	025b      	lsls	r3, r3, #9
20000902:	4013      	ands	r3, r2
20000904:	d0f9      	beq.n	200008fa <delay_500ns+0x1e>
	*STK_CTRL = 0;
20000906:	4b03      	ldr	r3, [pc, #12]	; (20000914 <delay_500ns+0x38>)
20000908:	2200      	movs	r2, #0
2000090a:	601a      	str	r2, [r3, #0]
}
2000090c:	46c0      	nop			; (mov r8, r8)
2000090e:	46bd      	mov	sp, r7
20000910:	bd80      	pop	{r7, pc}
20000912:	46c0      	nop			; (mov r8, r8)
20000914:	e000e010 	and	lr, r0, r0, lsl r0
20000918:	e000e014 	and	lr, r0, r4, lsl r0
2000091c:	e000e018 	and	lr, r0, r8, lsl r0

20000920 <delay_micro>:

void delay_micro(unsigned int us){
20000920:	b580      	push	{r7, lr}
20000922:	b082      	sub	sp, #8
20000924:	af00      	add	r7, sp, #0
20000926:	6078      	str	r0, [r7, #4]
	while(us--) {
20000928:	e007      	b.n	2000093a <delay_micro+0x1a>
		delay_250ns();
2000092a:	f7ff ffb5 	bl	20000898 <delay_250ns>
		delay_250ns();
2000092e:	f7ff ffb3 	bl	20000898 <delay_250ns>
		delay_250ns();
20000932:	f7ff ffb1 	bl	20000898 <delay_250ns>
		delay_250ns();
20000936:	f7ff ffaf 	bl	20000898 <delay_250ns>
	while(us--) {
2000093a:	687b      	ldr	r3, [r7, #4]
2000093c:	1e5a      	subs	r2, r3, #1
2000093e:	607a      	str	r2, [r7, #4]
20000940:	2b00      	cmp	r3, #0
20000942:	d1f2      	bne.n	2000092a <delay_micro+0xa>
	}
}
20000944:	46c0      	nop			; (mov r8, r8)
20000946:	46bd      	mov	sp, r7
20000948:	b002      	add	sp, #8
2000094a:	bd80      	pop	{r7, pc}

2000094c <delay_milli>:

void delay_milli(unsigned int ms){
2000094c:	b580      	push	{r7, lr}
2000094e:	b082      	sub	sp, #8
20000950:	af00      	add	r7, sp, #0
20000952:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		while(ms--)
			delay_micro(1);
	#else
		while(ms--)
20000954:	e004      	b.n	20000960 <delay_milli+0x14>
			delay_micro(1000);
20000956:	23fa      	movs	r3, #250	; 0xfa
20000958:	009b      	lsls	r3, r3, #2
2000095a:	0018      	movs	r0, r3
2000095c:	f7ff ffe0 	bl	20000920 <delay_micro>
		while(ms--)
20000960:	687b      	ldr	r3, [r7, #4]
20000962:	1e5a      	subs	r2, r3, #1
20000964:	607a      	str	r2, [r7, #4]
20000966:	2b00      	cmp	r3, #0
20000968:	d1f5      	bne.n	20000956 <delay_milli+0xa>
	#endif
}
2000096a:	46c0      	nop			; (mov r8, r8)
2000096c:	46bd      	mov	sp, r7
2000096e:	b002      	add	sp, #8
20000970:	bd80      	pop	{r7, pc}

20000972 <clear_thisBackBuffer>:
uint8_t draw_buffer_black_light[1024]; // 128 * 64 / 8
uint8_t draw_buffer_black_gray_light[1024]; // 128 * 64 / 8
uint8_t backBuffer[1024]; // 128 * 64 / 8
uint8_t backBufferGray[1024]; // 128 * 64 / 8
uint8_t backBufferLight[1024]; // 128 * 64 / 8
void clear_thisBackBuffer(uint8_t *buffer) {
20000972:	b580      	push	{r7, lr}
20000974:	b084      	sub	sp, #16
20000976:	af00      	add	r7, sp, #0
20000978:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < 1024; i++)
2000097a:	2300      	movs	r3, #0
2000097c:	60fb      	str	r3, [r7, #12]
2000097e:	e007      	b.n	20000990 <clear_thisBackBuffer+0x1e>
		buffer[i] = 0;
20000980:	68fb      	ldr	r3, [r7, #12]
20000982:	687a      	ldr	r2, [r7, #4]
20000984:	18d3      	adds	r3, r2, r3
20000986:	2200      	movs	r2, #0
20000988:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 1024; i++)
2000098a:	68fb      	ldr	r3, [r7, #12]
2000098c:	3301      	adds	r3, #1
2000098e:	60fb      	str	r3, [r7, #12]
20000990:	68fb      	ldr	r3, [r7, #12]
20000992:	4a03      	ldr	r2, [pc, #12]	; (200009a0 <clear_thisBackBuffer+0x2e>)
20000994:	4293      	cmp	r3, r2
20000996:	ddf3      	ble.n	20000980 <clear_thisBackBuffer+0xe>
}
20000998:	46c0      	nop			; (mov r8, r8)
2000099a:	46bd      	mov	sp, r7
2000099c:	b004      	add	sp, #16
2000099e:	bd80      	pop	{r7, pc}
200009a0:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

200009a4 <clear_backBuffer>:
void clear_backBuffer() {
200009a4:	b580      	push	{r7, lr}
200009a6:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
200009a8:	4b03      	ldr	r3, [pc, #12]	; (200009b8 <clear_backBuffer+0x14>)
200009aa:	0018      	movs	r0, r3
200009ac:	f7ff ffe1 	bl	20000972 <clear_thisBackBuffer>
}
200009b0:	46c0      	nop			; (mov r8, r8)
200009b2:	46bd      	mov	sp, r7
200009b4:	bd80      	pop	{r7, pc}
200009b6:	46c0      	nop			; (mov r8, r8)
200009b8:	20002aa8 	andcs	r2, r0, r8, lsr #21

200009bc <clear_all_backBuffers>:
void clear_all_backBuffers() {
200009bc:	b580      	push	{r7, lr}
200009be:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
200009c0:	4b07      	ldr	r3, [pc, #28]	; (200009e0 <clear_all_backBuffers+0x24>)
200009c2:	0018      	movs	r0, r3
200009c4:	f7ff ffd5 	bl	20000972 <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferGray);
200009c8:	4b06      	ldr	r3, [pc, #24]	; (200009e4 <clear_all_backBuffers+0x28>)
200009ca:	0018      	movs	r0, r3
200009cc:	f7ff ffd1 	bl	20000972 <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferLight);
200009d0:	4b05      	ldr	r3, [pc, #20]	; (200009e8 <clear_all_backBuffers+0x2c>)
200009d2:	0018      	movs	r0, r3
200009d4:	f7ff ffcd 	bl	20000972 <clear_thisBackBuffer>
}
200009d8:	46c0      	nop			; (mov r8, r8)
200009da:	46bd      	mov	sp, r7
200009dc:	bd80      	pop	{r7, pc}
200009de:	46c0      	nop			; (mov r8, r8)
200009e0:	20002aa8 	andcs	r2, r0, r8, lsr #21
200009e4:	200022a8 	andcs	r2, r0, r8, lsr #5
200009e8:	20003aa8 	andcs	r3, r0, r8, lsr #21

200009ec <graphic_ctrl_bit_set>:

/* välj grafik-display och ettställ de bitar som är 1 i x */
static void graphic_ctrl_bit_set( uint8_t x) {
200009ec:	b580      	push	{r7, lr}
200009ee:	b084      	sub	sp, #16
200009f0:	af00      	add	r7, sp, #0
200009f2:	0002      	movs	r2, r0
200009f4:	1dfb      	adds	r3, r7, #7
200009f6:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
200009f8:	4a0f      	ldr	r2, [pc, #60]	; (20000a38 <graphic_ctrl_bit_set+0x4c>)
200009fa:	230f      	movs	r3, #15
200009fc:	18fb      	adds	r3, r7, r3
200009fe:	7812      	ldrb	r2, [r2, #0]
20000a00:	701a      	strb	r2, [r3, #0]
	c |= x;
20000a02:	230f      	movs	r3, #15
20000a04:	18fb      	adds	r3, r7, r3
20000a06:	220f      	movs	r2, #15
20000a08:	18b9      	adds	r1, r7, r2
20000a0a:	1dfa      	adds	r2, r7, #7
20000a0c:	7809      	ldrb	r1, [r1, #0]
20000a0e:	7812      	ldrb	r2, [r2, #0]
20000a10:	430a      	orrs	r2, r1
20000a12:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
20000a14:	230f      	movs	r3, #15
20000a16:	18fb      	adds	r3, r7, r3
20000a18:	220f      	movs	r2, #15
20000a1a:	18ba      	adds	r2, r7, r2
20000a1c:	7812      	ldrb	r2, [r2, #0]
20000a1e:	2104      	movs	r1, #4
20000a20:	438a      	bics	r2, r1
20000a22:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20000a24:	4a04      	ldr	r2, [pc, #16]	; (20000a38 <graphic_ctrl_bit_set+0x4c>)
20000a26:	230f      	movs	r3, #15
20000a28:	18fb      	adds	r3, r7, r3
20000a2a:	781b      	ldrb	r3, [r3, #0]
20000a2c:	7013      	strb	r3, [r2, #0]
}
20000a2e:	46c0      	nop			; (mov r8, r8)
20000a30:	46bd      	mov	sp, r7
20000a32:	b004      	add	sp, #16
20000a34:	bd80      	pop	{r7, pc}
20000a36:	46c0      	nop			; (mov r8, r8)
20000a38:	40021014 	andmi	r1, r2, r4, lsl r0

20000a3c <graphic_ctrl_bit_clear>:
/* välj grafik-display och nollställ de bitar som är 1 i x */
static void graphic_ctrl_bit_clear( uint8_t x) {
20000a3c:	b580      	push	{r7, lr}
20000a3e:	b084      	sub	sp, #16
20000a40:	af00      	add	r7, sp, #0
20000a42:	0002      	movs	r2, r0
20000a44:	1dfb      	adds	r3, r7, #7
20000a46:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
20000a48:	4a11      	ldr	r2, [pc, #68]	; (20000a90 <graphic_ctrl_bit_clear+0x54>)
20000a4a:	230f      	movs	r3, #15
20000a4c:	18fb      	adds	r3, r7, r3
20000a4e:	7812      	ldrb	r2, [r2, #0]
20000a50:	701a      	strb	r2, [r3, #0]
	c &= ~x;
20000a52:	1dfb      	adds	r3, r7, #7
20000a54:	781b      	ldrb	r3, [r3, #0]
20000a56:	b25b      	sxtb	r3, r3
20000a58:	43db      	mvns	r3, r3
20000a5a:	b25b      	sxtb	r3, r3
20000a5c:	220f      	movs	r2, #15
20000a5e:	18ba      	adds	r2, r7, r2
20000a60:	7812      	ldrb	r2, [r2, #0]
20000a62:	b252      	sxtb	r2, r2
20000a64:	4013      	ands	r3, r2
20000a66:	b25a      	sxtb	r2, r3
20000a68:	230f      	movs	r3, #15
20000a6a:	18fb      	adds	r3, r7, r3
20000a6c:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
20000a6e:	230f      	movs	r3, #15
20000a70:	18fb      	adds	r3, r7, r3
20000a72:	220f      	movs	r2, #15
20000a74:	18ba      	adds	r2, r7, r2
20000a76:	7812      	ldrb	r2, [r2, #0]
20000a78:	2104      	movs	r1, #4
20000a7a:	438a      	bics	r2, r1
20000a7c:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20000a7e:	4a04      	ldr	r2, [pc, #16]	; (20000a90 <graphic_ctrl_bit_clear+0x54>)
20000a80:	230f      	movs	r3, #15
20000a82:	18fb      	adds	r3, r7, r3
20000a84:	781b      	ldrb	r3, [r3, #0]
20000a86:	7013      	strb	r3, [r2, #0]
}
20000a88:	46c0      	nop			; (mov r8, r8)
20000a8a:	46bd      	mov	sp, r7
20000a8c:	b004      	add	sp, #16
20000a8e:	bd80      	pop	{r7, pc}
20000a90:	40021014 	andmi	r1, r2, r4, lsl r0

20000a94 <select_controller>:
void select_controller( uint8_t controller) {
20000a94:	b580      	push	{r7, lr}
20000a96:	b082      	sub	sp, #8
20000a98:	af00      	add	r7, sp, #0
20000a9a:	0002      	movs	r2, r0
20000a9c:	1dfb      	adds	r3, r7, #7
20000a9e:	701a      	strb	r2, [r3, #0]
	switch (controller) {
20000aa0:	1dfb      	adds	r3, r7, #7
20000aa2:	781b      	ldrb	r3, [r3, #0]
20000aa4:	2b08      	cmp	r3, #8
20000aa6:	d00f      	beq.n	20000ac8 <select_controller+0x34>
20000aa8:	dc02      	bgt.n	20000ab0 <select_controller+0x1c>
20000aaa:	2b00      	cmp	r3, #0
20000aac:	d005      	beq.n	20000aba <select_controller+0x26>
		case (B_CS1|B_CS2): 
			graphic_ctrl_bit_set(B_CS1); 
			graphic_ctrl_bit_set(B_CS2); 
			break;
	}
}
20000aae:	e020      	b.n	20000af2 <select_controller+0x5e>
	switch (controller) {
20000ab0:	2b10      	cmp	r3, #16
20000ab2:	d010      	beq.n	20000ad6 <select_controller+0x42>
20000ab4:	2b18      	cmp	r3, #24
20000ab6:	d015      	beq.n	20000ae4 <select_controller+0x50>
}
20000ab8:	e01b      	b.n	20000af2 <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
20000aba:	2008      	movs	r0, #8
20000abc:	f7ff ffbe 	bl	20000a3c <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_clear(B_CS2); 
20000ac0:	2010      	movs	r0, #16
20000ac2:	f7ff ffbb 	bl	20000a3c <graphic_ctrl_bit_clear>
			break;
20000ac6:	e014      	b.n	20000af2 <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
20000ac8:	2008      	movs	r0, #8
20000aca:	f7ff ff8f 	bl	200009ec <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS2); 
20000ace:	2010      	movs	r0, #16
20000ad0:	f7ff ffb4 	bl	20000a3c <graphic_ctrl_bit_clear>
			break;
20000ad4:	e00d      	b.n	20000af2 <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
20000ad6:	2008      	movs	r0, #8
20000ad8:	f7ff ffb0 	bl	20000a3c <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_set(B_CS2); 
20000adc:	2010      	movs	r0, #16
20000ade:	f7ff ff85 	bl	200009ec <graphic_ctrl_bit_set>
			break;
20000ae2:	e006      	b.n	20000af2 <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
20000ae4:	2008      	movs	r0, #8
20000ae6:	f7ff ff81 	bl	200009ec <graphic_ctrl_bit_set>
			graphic_ctrl_bit_set(B_CS2); 
20000aea:	2010      	movs	r0, #16
20000aec:	f7ff ff7e 	bl	200009ec <graphic_ctrl_bit_set>
			break;
20000af0:	46c0      	nop			; (mov r8, r8)
}
20000af2:	46c0      	nop			; (mov r8, r8)
20000af4:	46bd      	mov	sp, r7
20000af6:	b002      	add	sp, #8
20000af8:	bd80      	pop	{r7, pc}

20000afa <graphic_wait_ready>:

void graphic_wait_ready( void ) {
20000afa:	b580      	push	{r7, lr}
20000afc:	b082      	sub	sp, #8
20000afe:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
20000b00:	2040      	movs	r0, #64	; 0x40
20000b02:	f7ff ff9b 	bl	20000a3c <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
20000b06:	4b14      	ldr	r3, [pc, #80]	; (20000b58 <graphic_wait_ready+0x5e>)
20000b08:	4a14      	ldr	r2, [pc, #80]	; (20000b5c <graphic_wait_ready+0x62>)
20000b0a:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
20000b0c:	2001      	movs	r0, #1
20000b0e:	f7ff ff95 	bl	20000a3c <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
20000b12:	2002      	movs	r0, #2
20000b14:	f7ff ff6a 	bl	200009ec <graphic_ctrl_bit_set>
	delay_500ns();
20000b18:	f7ff fee0 	bl	200008dc <delay_500ns>
	
	while(1) {
		graphic_ctrl_bit_set(B_E);
20000b1c:	2040      	movs	r0, #64	; 0x40
20000b1e:	f7ff ff65 	bl	200009ec <graphic_ctrl_bit_set>
		delay_500ns();
20000b22:	f7ff fedb 	bl	200008dc <delay_500ns>
		c = *portIdrHigh & LCD_BUSY; //...
20000b26:	4b0e      	ldr	r3, [pc, #56]	; (20000b60 <graphic_wait_ready+0x66>)
20000b28:	781b      	ldrb	r3, [r3, #0]
20000b2a:	b2da      	uxtb	r2, r3
20000b2c:	1dfb      	adds	r3, r7, #7
20000b2e:	217f      	movs	r1, #127	; 0x7f
20000b30:	438a      	bics	r2, r1
20000b32:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
20000b34:	2040      	movs	r0, #64	; 0x40
20000b36:	f7ff ff81 	bl	20000a3c <graphic_ctrl_bit_clear>
		delay_500ns();
20000b3a:	f7ff fecf 	bl	200008dc <delay_500ns>
		/*if (*portIdrHigh & 0x80 == 0x80) {
			break; }*/
		if (c == 0) break;
20000b3e:	1dfb      	adds	r3, r7, #7
20000b40:	781b      	ldrb	r3, [r3, #0]
20000b42:	2b00      	cmp	r3, #0
20000b44:	d000      	beq.n	20000b48 <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
20000b46:	e7e9      	b.n	20000b1c <graphic_wait_ready+0x22>
		if (c == 0) break;
20000b48:	46c0      	nop			; (mov r8, r8)
	}
	//graphic_ctrl_bit_set(B_E); //<--
	*portModer = 0x55555555;	
20000b4a:	4b03      	ldr	r3, [pc, #12]	; (20000b58 <graphic_wait_ready+0x5e>)
20000b4c:	4a05      	ldr	r2, [pc, #20]	; (20000b64 <graphic_wait_ready+0x6a>)
20000b4e:	601a      	str	r2, [r3, #0]
}
20000b50:	46c0      	nop			; (mov r8, r8)
20000b52:	46bd      	mov	sp, r7
20000b54:	b002      	add	sp, #8
20000b56:	bd80      	pop	{r7, pc}
20000b58:	40021000 	andmi	r1, r2, r0
20000b5c:	00005555 	andeq	r5, r0, r5, asr r5
20000b60:	40021011 	andmi	r1, r2, r1, lsl r0
20000b64:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000b68 <graphic_read>:

static uint8_t graphic_read(uint8_t controller) {
20000b68:	b580      	push	{r7, lr}
20000b6a:	b084      	sub	sp, #16
20000b6c:	af00      	add	r7, sp, #0
20000b6e:	0002      	movs	r2, r0
20000b70:	1dfb      	adds	r3, r7, #7
20000b72:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000b74:	2040      	movs	r0, #64	; 0x40
20000b76:	f7ff ff61 	bl	20000a3c <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
20000b7a:	4b1c      	ldr	r3, [pc, #112]	; (20000bec <graphic_read+0x84>)
20000b7c:	4a1c      	ldr	r2, [pc, #112]	; (20000bf0 <graphic_read+0x88>)
20000b7e:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS);
20000b80:	2001      	movs	r0, #1
20000b82:	f7ff ff33 	bl	200009ec <graphic_ctrl_bit_set>
	graphic_ctrl_bit_set(B_RW);
20000b86:	2002      	movs	r0, #2
20000b88:	f7ff ff30 	bl	200009ec <graphic_ctrl_bit_set>
	select_controller(controller);
20000b8c:	1dfb      	adds	r3, r7, #7
20000b8e:	781b      	ldrb	r3, [r3, #0]
20000b90:	0018      	movs	r0, r3
20000b92:	f7ff ff7f 	bl	20000a94 <select_controller>
	delay_500ns();
20000b96:	f7ff fea1 	bl	200008dc <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000b9a:	2040      	movs	r0, #64	; 0x40
20000b9c:	f7ff ff26 	bl	200009ec <graphic_ctrl_bit_set>
	delay_500ns();
20000ba0:	f7ff fe9c 	bl	200008dc <delay_500ns>
	unsigned char rv = *portIdrHigh;
20000ba4:	4a13      	ldr	r2, [pc, #76]	; (20000bf4 <graphic_read+0x8c>)
20000ba6:	230f      	movs	r3, #15
20000ba8:	18fb      	adds	r3, r7, r3
20000baa:	7812      	ldrb	r2, [r2, #0]
20000bac:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000bae:	2040      	movs	r0, #64	; 0x40
20000bb0:	f7ff ff44 	bl	20000a3c <graphic_ctrl_bit_clear>
	*portModer = 0x55555555;
20000bb4:	4b0d      	ldr	r3, [pc, #52]	; (20000bec <graphic_read+0x84>)
20000bb6:	4a10      	ldr	r2, [pc, #64]	; (20000bf8 <graphic_read+0x90>)
20000bb8:	601a      	str	r2, [r3, #0]
	
	if(controller == B_CS1) {
20000bba:	1dfb      	adds	r3, r7, #7
20000bbc:	781b      	ldrb	r3, [r3, #0]
20000bbe:	2b08      	cmp	r3, #8
20000bc0:	d104      	bne.n	20000bcc <graphic_read+0x64>
		select_controller(B_CS1);
20000bc2:	2008      	movs	r0, #8
20000bc4:	f7ff ff66 	bl	20000a94 <select_controller>
		graphic_wait_ready();
20000bc8:	f7ff ff97 	bl	20000afa <graphic_wait_ready>
	}
	if(controller == B_CS2) {
20000bcc:	1dfb      	adds	r3, r7, #7
20000bce:	781b      	ldrb	r3, [r3, #0]
20000bd0:	2b10      	cmp	r3, #16
20000bd2:	d104      	bne.n	20000bde <graphic_read+0x76>
		select_controller(B_CS2);
20000bd4:	2010      	movs	r0, #16
20000bd6:	f7ff ff5d 	bl	20000a94 <select_controller>
		graphic_wait_ready();
20000bda:	f7ff ff8e 	bl	20000afa <graphic_wait_ready>
	}
	
	return rv;
20000bde:	230f      	movs	r3, #15
20000be0:	18fb      	adds	r3, r7, r3
20000be2:	781b      	ldrb	r3, [r3, #0]
}
20000be4:	0018      	movs	r0, r3
20000be6:	46bd      	mov	sp, r7
20000be8:	b004      	add	sp, #16
20000bea:	bd80      	pop	{r7, pc}
20000bec:	40021000 	andmi	r1, r2, r0
20000bf0:	00005555 	andeq	r5, r0, r5, asr r5
20000bf4:	40021011 	andmi	r1, r2, r1, lsl r0
20000bf8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000bfc <graphic_read_data>:

graphic_read_data(uint8_t controller) {
20000bfc:	b580      	push	{r7, lr}
20000bfe:	b082      	sub	sp, #8
20000c00:	af00      	add	r7, sp, #0
20000c02:	0002      	movs	r2, r0
20000c04:	1dfb      	adds	r3, r7, #7
20000c06:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
20000c08:	1dfb      	adds	r3, r7, #7
20000c0a:	781b      	ldrb	r3, [r3, #0]
20000c0c:	0018      	movs	r0, r3
20000c0e:	f7ff ffab 	bl	20000b68 <graphic_read>
	graphic_read(controller);
20000c12:	1dfb      	adds	r3, r7, #7
20000c14:	781b      	ldrb	r3, [r3, #0]
20000c16:	0018      	movs	r0, r3
20000c18:	f7ff ffa6 	bl	20000b68 <graphic_read>
}
20000c1c:	46c0      	nop			; (mov r8, r8)
20000c1e:	0018      	movs	r0, r3
20000c20:	46bd      	mov	sp, r7
20000c22:	b002      	add	sp, #8
20000c24:	bd80      	pop	{r7, pc}

20000c26 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller) {
20000c26:	b580      	push	{r7, lr}
20000c28:	b082      	sub	sp, #8
20000c2a:	af00      	add	r7, sp, #0
20000c2c:	0002      	movs	r2, r0
20000c2e:	1dfb      	adds	r3, r7, #7
20000c30:	701a      	strb	r2, [r3, #0]
20000c32:	1dbb      	adds	r3, r7, #6
20000c34:	1c0a      	adds	r2, r1, #0
20000c36:	701a      	strb	r2, [r3, #0]
	*portOdrHigh = value; //I
20000c38:	4a19      	ldr	r2, [pc, #100]	; (20000ca0 <graphic_write+0x7a>)
20000c3a:	1dfb      	adds	r3, r7, #7
20000c3c:	781b      	ldrb	r3, [r3, #0]
20000c3e:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
20000c40:	1dbb      	adds	r3, r7, #6
20000c42:	781b      	ldrb	r3, [r3, #0]
20000c44:	0018      	movs	r0, r3
20000c46:	f7ff ff25 	bl	20000a94 <select_controller>
	delay_500ns();
20000c4a:	f7ff fe47 	bl	200008dc <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000c4e:	2040      	movs	r0, #64	; 0x40
20000c50:	f7ff fecc 	bl	200009ec <graphic_ctrl_bit_set>
	delay_500ns();
20000c54:	f7ff fe42 	bl	200008dc <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
20000c58:	2040      	movs	r0, #64	; 0x40
20000c5a:	f7ff feef 	bl	20000a3c <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1) {
20000c5e:	1dbb      	adds	r3, r7, #6
20000c60:	781b      	ldrb	r3, [r3, #0]
20000c62:	2208      	movs	r2, #8
20000c64:	4013      	ands	r3, r2
20000c66:	d004      	beq.n	20000c72 <graphic_write+0x4c>
		select_controller(B_CS1);
20000c68:	2008      	movs	r0, #8
20000c6a:	f7ff ff13 	bl	20000a94 <select_controller>
		graphic_wait_ready();
20000c6e:	f7ff ff44 	bl	20000afa <graphic_wait_ready>
	}
	if(controller & B_CS2) {
20000c72:	1dbb      	adds	r3, r7, #6
20000c74:	781b      	ldrb	r3, [r3, #0]
20000c76:	2210      	movs	r2, #16
20000c78:	4013      	ands	r3, r2
20000c7a:	d004      	beq.n	20000c86 <graphic_write+0x60>
		select_controller(B_CS2);
20000c7c:	2010      	movs	r0, #16
20000c7e:	f7ff ff09 	bl	20000a94 <select_controller>
		graphic_wait_ready();
20000c82:	f7ff ff3a 	bl	20000afa <graphic_wait_ready>
	}
	
	*portOdrHigh = 0;	//I
20000c86:	4b06      	ldr	r3, [pc, #24]	; (20000ca0 <graphic_write+0x7a>)
20000c88:	2200      	movs	r2, #0
20000c8a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
20000c8c:	2040      	movs	r0, #64	; 0x40
20000c8e:	f7ff fead 	bl	200009ec <graphic_ctrl_bit_set>
	select_controller(0);
20000c92:	2000      	movs	r0, #0
20000c94:	f7ff fefe 	bl	20000a94 <select_controller>
}
20000c98:	46c0      	nop			; (mov r8, r8)
20000c9a:	46bd      	mov	sp, r7
20000c9c:	b002      	add	sp, #8
20000c9e:	bd80      	pop	{r7, pc}
20000ca0:	40021015 	andmi	r1, r2, r5, lsl r0

20000ca4 <graphic_write_command>:
void graphic_write_command(uint8_t command, uint8_t controller) {
20000ca4:	b580      	push	{r7, lr}
20000ca6:	b082      	sub	sp, #8
20000ca8:	af00      	add	r7, sp, #0
20000caa:	0002      	movs	r2, r0
20000cac:	1dfb      	adds	r3, r7, #7
20000cae:	701a      	strb	r2, [r3, #0]
20000cb0:	1dbb      	adds	r3, r7, #6
20000cb2:	1c0a      	adds	r2, r1, #0
20000cb4:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000cb6:	2040      	movs	r0, #64	; 0x40
20000cb8:	f7ff fec0 	bl	20000a3c <graphic_ctrl_bit_clear>
	select_controller(controller);
20000cbc:	1dbb      	adds	r3, r7, #6
20000cbe:	781b      	ldrb	r3, [r3, #0]
20000cc0:	0018      	movs	r0, r3
20000cc2:	f7ff fee7 	bl	20000a94 <select_controller>
	graphic_ctrl_bit_clear(B_RS);
20000cc6:	2001      	movs	r0, #1
20000cc8:	f7ff feb8 	bl	20000a3c <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RW);
20000ccc:	2002      	movs	r0, #2
20000cce:	f7ff feb5 	bl	20000a3c <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000cd2:	1dbb      	adds	r3, r7, #6
20000cd4:	781a      	ldrb	r2, [r3, #0]
20000cd6:	1dfb      	adds	r3, r7, #7
20000cd8:	781b      	ldrb	r3, [r3, #0]
20000cda:	0011      	movs	r1, r2
20000cdc:	0018      	movs	r0, r3
20000cde:	f7ff ffa2 	bl	20000c26 <graphic_write>
}
20000ce2:	46c0      	nop			; (mov r8, r8)
20000ce4:	46bd      	mov	sp, r7
20000ce6:	b002      	add	sp, #8
20000ce8:	bd80      	pop	{r7, pc}

20000cea <graphic_write_data>:
void graphic_write_data(uint8_t command, uint8_t controller) {
20000cea:	b580      	push	{r7, lr}
20000cec:	b082      	sub	sp, #8
20000cee:	af00      	add	r7, sp, #0
20000cf0:	0002      	movs	r2, r0
20000cf2:	1dfb      	adds	r3, r7, #7
20000cf4:	701a      	strb	r2, [r3, #0]
20000cf6:	1dbb      	adds	r3, r7, #6
20000cf8:	1c0a      	adds	r2, r1, #0
20000cfa:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000cfc:	2040      	movs	r0, #64	; 0x40
20000cfe:	f7ff fe9d 	bl	20000a3c <graphic_ctrl_bit_clear>
	select_controller(controller);
20000d02:	1dbb      	adds	r3, r7, #6
20000d04:	781b      	ldrb	r3, [r3, #0]
20000d06:	0018      	movs	r0, r3
20000d08:	f7ff fec4 	bl	20000a94 <select_controller>
	graphic_ctrl_bit_set(B_RS);
20000d0c:	2001      	movs	r0, #1
20000d0e:	f7ff fe6d 	bl	200009ec <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20000d12:	2002      	movs	r0, #2
20000d14:	f7ff fe92 	bl	20000a3c <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000d18:	1dbb      	adds	r3, r7, #6
20000d1a:	781a      	ldrb	r2, [r3, #0]
20000d1c:	1dfb      	adds	r3, r7, #7
20000d1e:	781b      	ldrb	r3, [r3, #0]
20000d20:	0011      	movs	r1, r2
20000d22:	0018      	movs	r0, r3
20000d24:	f7ff ff7f 	bl	20000c26 <graphic_write>
}
20000d28:	46c0      	nop			; (mov r8, r8)
20000d2a:	46bd      	mov	sp, r7
20000d2c:	b002      	add	sp, #8
20000d2e:	bd80      	pop	{r7, pc}

20000d30 <graphic_initialize>:

void graphic_initialize( void ) {
20000d30:	b580      	push	{r7, lr}
20000d32:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20000d34:	2040      	movs	r0, #64	; 0x40
20000d36:	f7ff fe59 	bl	200009ec <graphic_ctrl_bit_set>
	delay_micro(10);
20000d3a:	200a      	movs	r0, #10
20000d3c:	f7ff fdf0 	bl	20000920 <delay_micro>
	
	graphic_ctrl_bit_clear(B_CS1);
20000d40:	2008      	movs	r0, #8
20000d42:	f7ff fe7b 	bl	20000a3c <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_CS2);
20000d46:	2010      	movs	r0, #16
20000d48:	f7ff fe78 	bl	20000a3c <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RST);
20000d4c:	2020      	movs	r0, #32
20000d4e:	f7ff fe75 	bl	20000a3c <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_E);
20000d52:	2040      	movs	r0, #64	; 0x40
20000d54:	f7ff fe72 	bl	20000a3c <graphic_ctrl_bit_clear>
	//#define SIMULATOR
	delay_milli(30);
20000d58:	201e      	movs	r0, #30
20000d5a:	f7ff fdf7 	bl	2000094c <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20000d5e:	2020      	movs	r0, #32
20000d60:	f7ff fe44 	bl	200009ec <graphic_ctrl_bit_set>
	delay_milli(100); //...
20000d64:	2064      	movs	r0, #100	; 0x64
20000d66:	f7ff fdf1 	bl	2000094c <delay_milli>
	
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
20000d6a:	2118      	movs	r1, #24
20000d6c:	203e      	movs	r0, #62	; 0x3e
20000d6e:	f7ff ff99 	bl	20000ca4 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
20000d72:	2118      	movs	r1, #24
20000d74:	203f      	movs	r0, #63	; 0x3f
20000d76:	f7ff ff95 	bl	20000ca4 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20000d7a:	2118      	movs	r1, #24
20000d7c:	20c0      	movs	r0, #192	; 0xc0
20000d7e:	f7ff ff91 	bl	20000ca4 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
20000d82:	2118      	movs	r1, #24
20000d84:	2040      	movs	r0, #64	; 0x40
20000d86:	f7ff ff8d 	bl	20000ca4 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20000d8a:	2118      	movs	r1, #24
20000d8c:	20b8      	movs	r0, #184	; 0xb8
20000d8e:	f7ff ff89 	bl	20000ca4 <graphic_write_command>
	select_controller(0);
20000d92:	2000      	movs	r0, #0
20000d94:	f7ff fe7e 	bl	20000a94 <select_controller>
}
20000d98:	46c0      	nop			; (mov r8, r8)
20000d9a:	46bd      	mov	sp, r7
20000d9c:	bd80      	pop	{r7, pc}

20000d9e <graphic_clear_screen>:
void graphic_clear_screen( void ) {	//Annat i slidesen
20000d9e:	b580      	push	{r7, lr}
20000da0:	b082      	sub	sp, #8
20000da2:	af00      	add	r7, sp, #0
	uint8_t page;
	for (page = 0; page < 8; page++) {
20000da4:	1dfb      	adds	r3, r7, #7
20000da6:	2200      	movs	r2, #0
20000da8:	701a      	strb	r2, [r3, #0]
20000daa:	e023      	b.n	20000df4 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
20000dac:	1dfb      	adds	r3, r7, #7
20000dae:	781b      	ldrb	r3, [r3, #0]
20000db0:	2248      	movs	r2, #72	; 0x48
20000db2:	4252      	negs	r2, r2
20000db4:	4313      	orrs	r3, r2
20000db6:	b2db      	uxtb	r3, r3
20000db8:	2118      	movs	r1, #24
20000dba:	0018      	movs	r0, r3
20000dbc:	f7ff ff72 	bl	20000ca4 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
20000dc0:	2118      	movs	r1, #24
20000dc2:	2040      	movs	r0, #64	; 0x40
20000dc4:	f7ff ff6e 	bl	20000ca4 <graphic_write_command>
		uint8_t add;
		for (add = 0; add < 64; add++) {
20000dc8:	1dbb      	adds	r3, r7, #6
20000dca:	2200      	movs	r2, #0
20000dcc:	701a      	strb	r2, [r3, #0]
20000dce:	e008      	b.n	20000de2 <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1|B_CS2);
20000dd0:	2118      	movs	r1, #24
20000dd2:	2000      	movs	r0, #0
20000dd4:	f7ff ff89 	bl	20000cea <graphic_write_data>
		for (add = 0; add < 64; add++) {
20000dd8:	1dbb      	adds	r3, r7, #6
20000dda:	781a      	ldrb	r2, [r3, #0]
20000ddc:	1dbb      	adds	r3, r7, #6
20000dde:	3201      	adds	r2, #1
20000de0:	701a      	strb	r2, [r3, #0]
20000de2:	1dbb      	adds	r3, r7, #6
20000de4:	781b      	ldrb	r3, [r3, #0]
20000de6:	2b3f      	cmp	r3, #63	; 0x3f
20000de8:	d9f2      	bls.n	20000dd0 <graphic_clear_screen+0x32>
	for (page = 0; page < 8; page++) {
20000dea:	1dfb      	adds	r3, r7, #7
20000dec:	781a      	ldrb	r2, [r3, #0]
20000dee:	1dfb      	adds	r3, r7, #7
20000df0:	3201      	adds	r2, #1
20000df2:	701a      	strb	r2, [r3, #0]
20000df4:	1dfb      	adds	r3, r7, #7
20000df6:	781b      	ldrb	r3, [r3, #0]
20000df8:	2b07      	cmp	r3, #7
20000dfa:	d9d7      	bls.n	20000dac <graphic_clear_screen+0xe>
		}
	}
}
20000dfc:	46c0      	nop			; (mov r8, r8)
20000dfe:	46bd      	mov	sp, r7
20000e00:	b002      	add	sp, #8
20000e02:	bd80      	pop	{r7, pc}

20000e04 <pixel>:

/** Color: 1=light 2=gray 3=black*/
void pixel(int x, int y, int set, int color) {
20000e04:	b580      	push	{r7, lr}
20000e06:	b086      	sub	sp, #24
20000e08:	af00      	add	r7, sp, #0
20000e0a:	60f8      	str	r0, [r7, #12]
20000e0c:	60b9      	str	r1, [r7, #8]
20000e0e:	607a      	str	r2, [r7, #4]
20000e10:	603b      	str	r3, [r7, #0]
	uint8_t mask;
	int index = 0;
20000e12:	2300      	movs	r3, #0
20000e14:	613b      	str	r3, [r7, #16]
	if( (x > 128 ) || (x < 1) || (y > 64) || (y < 1) ) 
20000e16:	68fb      	ldr	r3, [r7, #12]
20000e18:	2b80      	cmp	r3, #128	; 0x80
20000e1a:	dd00      	ble.n	20000e1e <pixel+0x1a>
20000e1c:	e0a6      	b.n	20000f6c <pixel+0x168>
20000e1e:	68fb      	ldr	r3, [r7, #12]
20000e20:	2b00      	cmp	r3, #0
20000e22:	dc00      	bgt.n	20000e26 <pixel+0x22>
20000e24:	e0a2      	b.n	20000f6c <pixel+0x168>
20000e26:	68bb      	ldr	r3, [r7, #8]
20000e28:	2b40      	cmp	r3, #64	; 0x40
20000e2a:	dd00      	ble.n	20000e2e <pixel+0x2a>
20000e2c:	e09e      	b.n	20000f6c <pixel+0x168>
20000e2e:	68bb      	ldr	r3, [r7, #8]
20000e30:	2b00      	cmp	r3, #0
20000e32:	dc00      	bgt.n	20000e36 <pixel+0x32>
20000e34:	e09a      	b.n	20000f6c <pixel+0x168>
		return;
	mask = 1 << ((y-1)%8);
20000e36:	68bb      	ldr	r3, [r7, #8]
20000e38:	3b01      	subs	r3, #1
20000e3a:	4a4e      	ldr	r2, [pc, #312]	; (20000f74 <pixel+0x170>)
20000e3c:	4013      	ands	r3, r2
20000e3e:	d504      	bpl.n	20000e4a <pixel+0x46>
20000e40:	3b01      	subs	r3, #1
20000e42:	2208      	movs	r2, #8
20000e44:	4252      	negs	r2, r2
20000e46:	4313      	orrs	r3, r2
20000e48:	3301      	adds	r3, #1
20000e4a:	001a      	movs	r2, r3
20000e4c:	2301      	movs	r3, #1
20000e4e:	4093      	lsls	r3, r2
20000e50:	001a      	movs	r2, r3
20000e52:	2317      	movs	r3, #23
20000e54:	18fb      	adds	r3, r7, r3
20000e56:	701a      	strb	r2, [r3, #0]
	if(x > 64) {
20000e58:	68fb      	ldr	r3, [r7, #12]
20000e5a:	2b40      	cmp	r3, #64	; 0x40
20000e5c:	dd05      	ble.n	20000e6a <pixel+0x66>
		x -= 65;
20000e5e:	68fb      	ldr	r3, [r7, #12]
20000e60:	3b41      	subs	r3, #65	; 0x41
20000e62:	60fb      	str	r3, [r7, #12]
		index = 512;
20000e64:	2380      	movs	r3, #128	; 0x80
20000e66:	009b      	lsls	r3, r3, #2
20000e68:	613b      	str	r3, [r7, #16]
	}
	index += x + ((y-1)/8)*64;
20000e6a:	68bb      	ldr	r3, [r7, #8]
20000e6c:	3b01      	subs	r3, #1
20000e6e:	2b00      	cmp	r3, #0
20000e70:	da00      	bge.n	20000e74 <pixel+0x70>
20000e72:	3307      	adds	r3, #7
20000e74:	10db      	asrs	r3, r3, #3
20000e76:	019a      	lsls	r2, r3, #6
20000e78:	68fb      	ldr	r3, [r7, #12]
20000e7a:	18d3      	adds	r3, r2, r3
20000e7c:	693a      	ldr	r2, [r7, #16]
20000e7e:	18d3      	adds	r3, r2, r3
20000e80:	613b      	str	r3, [r7, #16]

	if(set == 0)
20000e82:	687b      	ldr	r3, [r7, #4]
20000e84:	2b00      	cmp	r3, #0
20000e86:	d106      	bne.n	20000e96 <pixel+0x92>
		mask = ~mask;
20000e88:	2317      	movs	r3, #23
20000e8a:	18fb      	adds	r3, r7, r3
20000e8c:	2217      	movs	r2, #23
20000e8e:	18ba      	adds	r2, r7, r2
20000e90:	7812      	ldrb	r2, [r2, #0]
20000e92:	43d2      	mvns	r2, r2
20000e94:	701a      	strb	r2, [r3, #0]

	switch (color) {
20000e96:	683b      	ldr	r3, [r7, #0]
20000e98:	2b02      	cmp	r3, #2
20000e9a:	d024      	beq.n	20000ee6 <pixel+0xe2>
20000e9c:	2b03      	cmp	r3, #3
20000e9e:	d043      	beq.n	20000f28 <pixel+0x124>
20000ea0:	2b01      	cmp	r3, #1
20000ea2:	d164      	bne.n	20000f6e <pixel+0x16a>
		case 1:	
			if(set)
20000ea4:	687b      	ldr	r3, [r7, #4]
20000ea6:	2b00      	cmp	r3, #0
20000ea8:	d00e      	beq.n	20000ec8 <pixel+0xc4>
				backBufferLight[index] |= mask;
20000eaa:	4a33      	ldr	r2, [pc, #204]	; (20000f78 <pixel+0x174>)
20000eac:	693b      	ldr	r3, [r7, #16]
20000eae:	18d3      	adds	r3, r2, r3
20000eb0:	781a      	ldrb	r2, [r3, #0]
20000eb2:	2317      	movs	r3, #23
20000eb4:	18fb      	adds	r3, r7, r3
20000eb6:	781b      	ldrb	r3, [r3, #0]
20000eb8:	4313      	orrs	r3, r2
20000eba:	b2d9      	uxtb	r1, r3
20000ebc:	4a2e      	ldr	r2, [pc, #184]	; (20000f78 <pixel+0x174>)
20000ebe:	693b      	ldr	r3, [r7, #16]
20000ec0:	18d3      	adds	r3, r2, r3
20000ec2:	1c0a      	adds	r2, r1, #0
20000ec4:	701a      	strb	r2, [r3, #0]
			else
				backBufferLight[index] &= mask;
			break;
20000ec6:	e052      	b.n	20000f6e <pixel+0x16a>
				backBufferLight[index] &= mask;
20000ec8:	4a2b      	ldr	r2, [pc, #172]	; (20000f78 <pixel+0x174>)
20000eca:	693b      	ldr	r3, [r7, #16]
20000ecc:	18d3      	adds	r3, r2, r3
20000ece:	781b      	ldrb	r3, [r3, #0]
20000ed0:	2217      	movs	r2, #23
20000ed2:	18ba      	adds	r2, r7, r2
20000ed4:	7812      	ldrb	r2, [r2, #0]
20000ed6:	4013      	ands	r3, r2
20000ed8:	b2d9      	uxtb	r1, r3
20000eda:	4a27      	ldr	r2, [pc, #156]	; (20000f78 <pixel+0x174>)
20000edc:	693b      	ldr	r3, [r7, #16]
20000ede:	18d3      	adds	r3, r2, r3
20000ee0:	1c0a      	adds	r2, r1, #0
20000ee2:	701a      	strb	r2, [r3, #0]
			break;
20000ee4:	e043      	b.n	20000f6e <pixel+0x16a>
		
		case 2:	
			if(set)
20000ee6:	687b      	ldr	r3, [r7, #4]
20000ee8:	2b00      	cmp	r3, #0
20000eea:	d00e      	beq.n	20000f0a <pixel+0x106>
				backBufferGray[index] |= mask;
20000eec:	4a23      	ldr	r2, [pc, #140]	; (20000f7c <pixel+0x178>)
20000eee:	693b      	ldr	r3, [r7, #16]
20000ef0:	18d3      	adds	r3, r2, r3
20000ef2:	781a      	ldrb	r2, [r3, #0]
20000ef4:	2317      	movs	r3, #23
20000ef6:	18fb      	adds	r3, r7, r3
20000ef8:	781b      	ldrb	r3, [r3, #0]
20000efa:	4313      	orrs	r3, r2
20000efc:	b2d9      	uxtb	r1, r3
20000efe:	4a1f      	ldr	r2, [pc, #124]	; (20000f7c <pixel+0x178>)
20000f00:	693b      	ldr	r3, [r7, #16]
20000f02:	18d3      	adds	r3, r2, r3
20000f04:	1c0a      	adds	r2, r1, #0
20000f06:	701a      	strb	r2, [r3, #0]
			else
				backBufferGray[index] &= mask;
			break;
20000f08:	e031      	b.n	20000f6e <pixel+0x16a>
				backBufferGray[index] &= mask;
20000f0a:	4a1c      	ldr	r2, [pc, #112]	; (20000f7c <pixel+0x178>)
20000f0c:	693b      	ldr	r3, [r7, #16]
20000f0e:	18d3      	adds	r3, r2, r3
20000f10:	781b      	ldrb	r3, [r3, #0]
20000f12:	2217      	movs	r2, #23
20000f14:	18ba      	adds	r2, r7, r2
20000f16:	7812      	ldrb	r2, [r2, #0]
20000f18:	4013      	ands	r3, r2
20000f1a:	b2d9      	uxtb	r1, r3
20000f1c:	4a17      	ldr	r2, [pc, #92]	; (20000f7c <pixel+0x178>)
20000f1e:	693b      	ldr	r3, [r7, #16]
20000f20:	18d3      	adds	r3, r2, r3
20000f22:	1c0a      	adds	r2, r1, #0
20000f24:	701a      	strb	r2, [r3, #0]
			break;
20000f26:	e022      	b.n	20000f6e <pixel+0x16a>
		
		case 3:	
			if(set)
20000f28:	687b      	ldr	r3, [r7, #4]
20000f2a:	2b00      	cmp	r3, #0
20000f2c:	d00e      	beq.n	20000f4c <pixel+0x148>
				backBuffer[index] |= mask;
20000f2e:	4a14      	ldr	r2, [pc, #80]	; (20000f80 <pixel+0x17c>)
20000f30:	693b      	ldr	r3, [r7, #16]
20000f32:	18d3      	adds	r3, r2, r3
20000f34:	781a      	ldrb	r2, [r3, #0]
20000f36:	2317      	movs	r3, #23
20000f38:	18fb      	adds	r3, r7, r3
20000f3a:	781b      	ldrb	r3, [r3, #0]
20000f3c:	4313      	orrs	r3, r2
20000f3e:	b2d9      	uxtb	r1, r3
20000f40:	4a0f      	ldr	r2, [pc, #60]	; (20000f80 <pixel+0x17c>)
20000f42:	693b      	ldr	r3, [r7, #16]
20000f44:	18d3      	adds	r3, r2, r3
20000f46:	1c0a      	adds	r2, r1, #0
20000f48:	701a      	strb	r2, [r3, #0]
			else
				backBuffer[index] &= mask;
			break;
20000f4a:	e010      	b.n	20000f6e <pixel+0x16a>
				backBuffer[index] &= mask;
20000f4c:	4a0c      	ldr	r2, [pc, #48]	; (20000f80 <pixel+0x17c>)
20000f4e:	693b      	ldr	r3, [r7, #16]
20000f50:	18d3      	adds	r3, r2, r3
20000f52:	781b      	ldrb	r3, [r3, #0]
20000f54:	2217      	movs	r2, #23
20000f56:	18ba      	adds	r2, r7, r2
20000f58:	7812      	ldrb	r2, [r2, #0]
20000f5a:	4013      	ands	r3, r2
20000f5c:	b2d9      	uxtb	r1, r3
20000f5e:	4a08      	ldr	r2, [pc, #32]	; (20000f80 <pixel+0x17c>)
20000f60:	693b      	ldr	r3, [r7, #16]
20000f62:	18d3      	adds	r3, r2, r3
20000f64:	1c0a      	adds	r2, r1, #0
20000f66:	701a      	strb	r2, [r3, #0]
			break;
20000f68:	46c0      	nop			; (mov r8, r8)
20000f6a:	e000      	b.n	20000f6e <pixel+0x16a>
		return;
20000f6c:	46c0      	nop			; (mov r8, r8)
			
	}

}
20000f6e:	46bd      	mov	sp, r7
20000f70:	b006      	add	sp, #24
20000f72:	bd80      	pop	{r7, pc}
20000f74:	80000007 	andhi	r0, r0, r7
20000f78:	20003aa8 	andcs	r3, r0, r8, lsr #21
20000f7c:	200022a8 	andcs	r2, r0, r8, lsr #5
20000f80:	20002aa8 	andcs	r2, r0, r8, lsr #21

20000f84 <pixel2>:


void pixel2(int x, int y, int set) {
20000f84:	b580      	push	{r7, lr}
20000f86:	b088      	sub	sp, #32
20000f88:	af00      	add	r7, sp, #0
20000f8a:	60f8      	str	r0, [r7, #12]
20000f8c:	60b9      	str	r1, [r7, #8]
20000f8e:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20000f90:	68fb      	ldr	r3, [r7, #12]
20000f92:	2b00      	cmp	r3, #0
20000f94:	dc00      	bgt.n	20000f98 <pixel2+0x14>
20000f96:	e0bc      	b.n	20001112 <pixel2+0x18e>
20000f98:	68bb      	ldr	r3, [r7, #8]
20000f9a:	2b00      	cmp	r3, #0
20000f9c:	dc00      	bgt.n	20000fa0 <pixel2+0x1c>
20000f9e:	e0b8      	b.n	20001112 <pixel2+0x18e>
20000fa0:	68fb      	ldr	r3, [r7, #12]
20000fa2:	2b80      	cmp	r3, #128	; 0x80
20000fa4:	dd00      	ble.n	20000fa8 <pixel2+0x24>
20000fa6:	e0b4      	b.n	20001112 <pixel2+0x18e>
20000fa8:	68bb      	ldr	r3, [r7, #8]
20000faa:	2b40      	cmp	r3, #64	; 0x40
20000fac:	dd00      	ble.n	20000fb0 <pixel2+0x2c>
20000fae:	e0b0      	b.n	20001112 <pixel2+0x18e>
	index = (y-1)/8;
20000fb0:	68bb      	ldr	r3, [r7, #8]
20000fb2:	3b01      	subs	r3, #1
20000fb4:	2b00      	cmp	r3, #0
20000fb6:	da00      	bge.n	20000fba <pixel2+0x36>
20000fb8:	3307      	adds	r3, #7
20000fba:	10db      	asrs	r3, r3, #3
20000fbc:	61bb      	str	r3, [r7, #24]
	switch( (y-1)%8 ) {
20000fbe:	68bb      	ldr	r3, [r7, #8]
20000fc0:	3b01      	subs	r3, #1
20000fc2:	4a56      	ldr	r2, [pc, #344]	; (2000111c <pixel2+0x198>)
20000fc4:	4013      	ands	r3, r2
20000fc6:	d504      	bpl.n	20000fd2 <pixel2+0x4e>
20000fc8:	3b01      	subs	r3, #1
20000fca:	2208      	movs	r2, #8
20000fcc:	4252      	negs	r2, r2
20000fce:	4313      	orrs	r3, r2
20000fd0:	3301      	adds	r3, #1
20000fd2:	2b07      	cmp	r3, #7
20000fd4:	d82c      	bhi.n	20001030 <pixel2+0xac>
20000fd6:	009a      	lsls	r2, r3, #2
20000fd8:	4b51      	ldr	r3, [pc, #324]	; (20001120 <pixel2+0x19c>)
20000fda:	18d3      	adds	r3, r2, r3
20000fdc:	681b      	ldr	r3, [r3, #0]
20000fde:	469f      	mov	pc, r3
		case 0: mask = 1; break;
20000fe0:	231f      	movs	r3, #31
20000fe2:	18fb      	adds	r3, r7, r3
20000fe4:	2201      	movs	r2, #1
20000fe6:	701a      	strb	r2, [r3, #0]
20000fe8:	e022      	b.n	20001030 <pixel2+0xac>
		case 1: mask = 2; break;
20000fea:	231f      	movs	r3, #31
20000fec:	18fb      	adds	r3, r7, r3
20000fee:	2202      	movs	r2, #2
20000ff0:	701a      	strb	r2, [r3, #0]
20000ff2:	e01d      	b.n	20001030 <pixel2+0xac>
		case 2: mask = 4; break;
20000ff4:	231f      	movs	r3, #31
20000ff6:	18fb      	adds	r3, r7, r3
20000ff8:	2204      	movs	r2, #4
20000ffa:	701a      	strb	r2, [r3, #0]
20000ffc:	e018      	b.n	20001030 <pixel2+0xac>
		case 3: mask = 8; break;
20000ffe:	231f      	movs	r3, #31
20001000:	18fb      	adds	r3, r7, r3
20001002:	2208      	movs	r2, #8
20001004:	701a      	strb	r2, [r3, #0]
20001006:	e013      	b.n	20001030 <pixel2+0xac>
		case 4: mask = 0x10; break;
20001008:	231f      	movs	r3, #31
2000100a:	18fb      	adds	r3, r7, r3
2000100c:	2210      	movs	r2, #16
2000100e:	701a      	strb	r2, [r3, #0]
20001010:	e00e      	b.n	20001030 <pixel2+0xac>
		case 5: mask = 0x20; break;
20001012:	231f      	movs	r3, #31
20001014:	18fb      	adds	r3, r7, r3
20001016:	2220      	movs	r2, #32
20001018:	701a      	strb	r2, [r3, #0]
2000101a:	e009      	b.n	20001030 <pixel2+0xac>
		case 6: mask = 0x40; break;
2000101c:	231f      	movs	r3, #31
2000101e:	18fb      	adds	r3, r7, r3
20001020:	2240      	movs	r2, #64	; 0x40
20001022:	701a      	strb	r2, [r3, #0]
20001024:	e004      	b.n	20001030 <pixel2+0xac>
		case 7: mask = 0x80; break;
20001026:	231f      	movs	r3, #31
20001028:	18fb      	adds	r3, r7, r3
2000102a:	2280      	movs	r2, #128	; 0x80
2000102c:	701a      	strb	r2, [r3, #0]
2000102e:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0)
20001030:	687b      	ldr	r3, [r7, #4]
20001032:	2b00      	cmp	r3, #0
20001034:	d106      	bne.n	20001044 <pixel2+0xc0>
		mask = ~mask;
20001036:	231f      	movs	r3, #31
20001038:	18fb      	adds	r3, r7, r3
2000103a:	221f      	movs	r2, #31
2000103c:	18ba      	adds	r2, r7, r2
2000103e:	7812      	ldrb	r2, [r2, #0]
20001040:	43d2      	mvns	r2, r2
20001042:	701a      	strb	r2, [r3, #0]
	
	if(x > 64){
20001044:	68fb      	ldr	r3, [r7, #12]
20001046:	2b40      	cmp	r3, #64	; 0x40
20001048:	dd07      	ble.n	2000105a <pixel2+0xd6>
		controller = B_CS2;
2000104a:	231e      	movs	r3, #30
2000104c:	18fb      	adds	r3, r7, r3
2000104e:	2210      	movs	r2, #16
20001050:	701a      	strb	r2, [r3, #0]
		x = x - 65;
20001052:	68fb      	ldr	r3, [r7, #12]
20001054:	3b41      	subs	r3, #65	; 0x41
20001056:	60fb      	str	r3, [r7, #12]
20001058:	e006      	b.n	20001068 <pixel2+0xe4>
	} else {
		controller = B_CS1;
2000105a:	231e      	movs	r3, #30
2000105c:	18fb      	adds	r3, r7, r3
2000105e:	2208      	movs	r2, #8
20001060:	701a      	strb	r2, [r3, #0]
		x = x-1;
20001062:	68fb      	ldr	r3, [r7, #12]
20001064:	3b01      	subs	r3, #1
20001066:	60fb      	str	r3, [r7, #12]
	}
	graphic_write_command(LCD_SET_ADD | x, controller );
20001068:	68fb      	ldr	r3, [r7, #12]
2000106a:	b25b      	sxtb	r3, r3
2000106c:	2240      	movs	r2, #64	; 0x40
2000106e:	4313      	orrs	r3, r2
20001070:	b25b      	sxtb	r3, r3
20001072:	b2da      	uxtb	r2, r3
20001074:	231e      	movs	r3, #30
20001076:	18fb      	adds	r3, r7, r3
20001078:	781b      	ldrb	r3, [r3, #0]
2000107a:	0019      	movs	r1, r3
2000107c:	0010      	movs	r0, r2
2000107e:	f7ff fe11 	bl	20000ca4 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller );
20001082:	69bb      	ldr	r3, [r7, #24]
20001084:	b25b      	sxtb	r3, r3
20001086:	2248      	movs	r2, #72	; 0x48
20001088:	4252      	negs	r2, r2
2000108a:	4313      	orrs	r3, r2
2000108c:	b25b      	sxtb	r3, r3
2000108e:	b2da      	uxtb	r2, r3
20001090:	231e      	movs	r3, #30
20001092:	18fb      	adds	r3, r7, r3
20001094:	781b      	ldrb	r3, [r3, #0]
20001096:	0019      	movs	r1, r3
20001098:	0010      	movs	r0, r2
2000109a:	f7ff fe03 	bl	20000ca4 <graphic_write_command>
	
	c = graphic_read_data(controller);
2000109e:	231e      	movs	r3, #30
200010a0:	18fb      	adds	r3, r7, r3
200010a2:	781b      	ldrb	r3, [r3, #0]
200010a4:	0018      	movs	r0, r3
200010a6:	f7ff fda9 	bl	20000bfc <graphic_read_data>
200010aa:	0002      	movs	r2, r0
200010ac:	2317      	movs	r3, #23
200010ae:	18fb      	adds	r3, r7, r3
200010b0:	701a      	strb	r2, [r3, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
200010b2:	68fb      	ldr	r3, [r7, #12]
200010b4:	b25b      	sxtb	r3, r3
200010b6:	2240      	movs	r2, #64	; 0x40
200010b8:	4313      	orrs	r3, r2
200010ba:	b25b      	sxtb	r3, r3
200010bc:	b2da      	uxtb	r2, r3
200010be:	231e      	movs	r3, #30
200010c0:	18fb      	adds	r3, r7, r3
200010c2:	781b      	ldrb	r3, [r3, #0]
200010c4:	0019      	movs	r1, r3
200010c6:	0010      	movs	r0, r2
200010c8:	f7ff fdec 	bl	20000ca4 <graphic_write_command>
	
	if(set)
200010cc:	687b      	ldr	r3, [r7, #4]
200010ce:	2b00      	cmp	r3, #0
200010d0:	d00a      	beq.n	200010e8 <pixel2+0x164>
		mask = mask | c;
200010d2:	231f      	movs	r3, #31
200010d4:	18fb      	adds	r3, r7, r3
200010d6:	221f      	movs	r2, #31
200010d8:	18b9      	adds	r1, r7, r2
200010da:	2217      	movs	r2, #23
200010dc:	18ba      	adds	r2, r7, r2
200010de:	7809      	ldrb	r1, [r1, #0]
200010e0:	7812      	ldrb	r2, [r2, #0]
200010e2:	430a      	orrs	r2, r1
200010e4:	701a      	strb	r2, [r3, #0]
200010e6:	e009      	b.n	200010fc <pixel2+0x178>
	else
		mask = mask & c;
200010e8:	231f      	movs	r3, #31
200010ea:	18fb      	adds	r3, r7, r3
200010ec:	221f      	movs	r2, #31
200010ee:	18ba      	adds	r2, r7, r2
200010f0:	2117      	movs	r1, #23
200010f2:	1879      	adds	r1, r7, r1
200010f4:	7812      	ldrb	r2, [r2, #0]
200010f6:	7809      	ldrb	r1, [r1, #0]
200010f8:	400a      	ands	r2, r1
200010fa:	701a      	strb	r2, [r3, #0]
	
	graphic_write_data(mask, controller);
200010fc:	231e      	movs	r3, #30
200010fe:	18fb      	adds	r3, r7, r3
20001100:	781a      	ldrb	r2, [r3, #0]
20001102:	231f      	movs	r3, #31
20001104:	18fb      	adds	r3, r7, r3
20001106:	781b      	ldrb	r3, [r3, #0]
20001108:	0011      	movs	r1, r2
2000110a:	0018      	movs	r0, r3
2000110c:	f7ff fded 	bl	20000cea <graphic_write_data>
20001110:	e000      	b.n	20001114 <pixel2+0x190>
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20001112:	46c0      	nop			; (mov r8, r8)
}
20001114:	46bd      	mov	sp, r7
20001116:	b008      	add	sp, #32
20001118:	bd80      	pop	{r7, pc}
2000111a:	46c0      	nop			; (mov r8, r8)
2000111c:	80000007 	andhi	r0, r0, r7
20001120:	20005480 	andcs	r5, r0, r0, lsl #9

20001124 <graphic_draw_screen>:

void graphic_draw_screen(uint8_t *buffer) {
20001124:	b580      	push	{r7, lr}
20001126:	b086      	sub	sp, #24
20001128:	af00      	add	r7, sp, #0
2000112a:	6078      	str	r0, [r7, #4]
	uint8_t i, j, controller, c;
	unsigned int k = 0;
2000112c:	2300      	movs	r3, #0
2000112e:	613b      	str	r3, [r7, #16]
	for(c = 0; c < 2; c++) {
20001130:	2315      	movs	r3, #21
20001132:	18fb      	adds	r3, r7, r3
20001134:	2200      	movs	r2, #0
20001136:	701a      	strb	r2, [r3, #0]
20001138:	e056      	b.n	200011e8 <graphic_draw_screen+0xc4>
		controller = (c == 0) ? B_CS1 : B_CS2;
2000113a:	2315      	movs	r3, #21
2000113c:	18fb      	adds	r3, r7, r3
2000113e:	781b      	ldrb	r3, [r3, #0]
20001140:	2b00      	cmp	r3, #0
20001142:	d101      	bne.n	20001148 <graphic_draw_screen+0x24>
20001144:	2208      	movs	r2, #8
20001146:	e000      	b.n	2000114a <graphic_draw_screen+0x26>
20001148:	2210      	movs	r2, #16
2000114a:	230f      	movs	r3, #15
2000114c:	18fb      	adds	r3, r7, r3
2000114e:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 8; j++) {
20001150:	2316      	movs	r3, #22
20001152:	18fb      	adds	r3, r7, r3
20001154:	2200      	movs	r2, #0
20001156:	701a      	strb	r2, [r3, #0]
20001158:	e03a      	b.n	200011d0 <graphic_draw_screen+0xac>
			graphic_write_command(LCD_SET_PAGE | j, controller);
2000115a:	2316      	movs	r3, #22
2000115c:	18fb      	adds	r3, r7, r3
2000115e:	781b      	ldrb	r3, [r3, #0]
20001160:	2248      	movs	r2, #72	; 0x48
20001162:	4252      	negs	r2, r2
20001164:	4313      	orrs	r3, r2
20001166:	b2da      	uxtb	r2, r3
20001168:	230f      	movs	r3, #15
2000116a:	18fb      	adds	r3, r7, r3
2000116c:	781b      	ldrb	r3, [r3, #0]
2000116e:	0019      	movs	r1, r3
20001170:	0010      	movs	r0, r2
20001172:	f7ff fd97 	bl	20000ca4 <graphic_write_command>
			graphic_write_command(LCD_SET_ADD | 0, controller);
20001176:	230f      	movs	r3, #15
20001178:	18fb      	adds	r3, r7, r3
2000117a:	781b      	ldrb	r3, [r3, #0]
2000117c:	0019      	movs	r1, r3
2000117e:	2040      	movs	r0, #64	; 0x40
20001180:	f7ff fd90 	bl	20000ca4 <graphic_write_command>
			for(i = 0; i <= 63; i++, k++) {
20001184:	2317      	movs	r3, #23
20001186:	18fb      	adds	r3, r7, r3
20001188:	2200      	movs	r2, #0
2000118a:	701a      	strb	r2, [r3, #0]
2000118c:	e014      	b.n	200011b8 <graphic_draw_screen+0x94>
				graphic_write_data(buffer[k], controller);
2000118e:	687a      	ldr	r2, [r7, #4]
20001190:	693b      	ldr	r3, [r7, #16]
20001192:	18d3      	adds	r3, r2, r3
20001194:	781a      	ldrb	r2, [r3, #0]
20001196:	230f      	movs	r3, #15
20001198:	18fb      	adds	r3, r7, r3
2000119a:	781b      	ldrb	r3, [r3, #0]
2000119c:	0019      	movs	r1, r3
2000119e:	0010      	movs	r0, r2
200011a0:	f7ff fda3 	bl	20000cea <graphic_write_data>
			for(i = 0; i <= 63; i++, k++) {
200011a4:	2317      	movs	r3, #23
200011a6:	18fb      	adds	r3, r7, r3
200011a8:	781a      	ldrb	r2, [r3, #0]
200011aa:	2317      	movs	r3, #23
200011ac:	18fb      	adds	r3, r7, r3
200011ae:	3201      	adds	r2, #1
200011b0:	701a      	strb	r2, [r3, #0]
200011b2:	693b      	ldr	r3, [r7, #16]
200011b4:	3301      	adds	r3, #1
200011b6:	613b      	str	r3, [r7, #16]
200011b8:	2317      	movs	r3, #23
200011ba:	18fb      	adds	r3, r7, r3
200011bc:	781b      	ldrb	r3, [r3, #0]
200011be:	2b3f      	cmp	r3, #63	; 0x3f
200011c0:	d9e5      	bls.n	2000118e <graphic_draw_screen+0x6a>
		for(j = 0; j < 8; j++) {
200011c2:	2316      	movs	r3, #22
200011c4:	18fb      	adds	r3, r7, r3
200011c6:	781a      	ldrb	r2, [r3, #0]
200011c8:	2316      	movs	r3, #22
200011ca:	18fb      	adds	r3, r7, r3
200011cc:	3201      	adds	r2, #1
200011ce:	701a      	strb	r2, [r3, #0]
200011d0:	2316      	movs	r3, #22
200011d2:	18fb      	adds	r3, r7, r3
200011d4:	781b      	ldrb	r3, [r3, #0]
200011d6:	2b07      	cmp	r3, #7
200011d8:	d9bf      	bls.n	2000115a <graphic_draw_screen+0x36>
	for(c = 0; c < 2; c++) {
200011da:	2315      	movs	r3, #21
200011dc:	18fb      	adds	r3, r7, r3
200011de:	781a      	ldrb	r2, [r3, #0]
200011e0:	2315      	movs	r3, #21
200011e2:	18fb      	adds	r3, r7, r3
200011e4:	3201      	adds	r2, #1
200011e6:	701a      	strb	r2, [r3, #0]
200011e8:	2315      	movs	r3, #21
200011ea:	18fb      	adds	r3, r7, r3
200011ec:	781b      	ldrb	r3, [r3, #0]
200011ee:	2b01      	cmp	r3, #1
200011f0:	d9a3      	bls.n	2000113a <graphic_draw_screen+0x16>
			}
		}
	}
}
200011f2:	46c0      	nop			; (mov r8, r8)
200011f4:	46bd      	mov	sp, r7
200011f6:	b006      	add	sp, #24
200011f8:	bd80      	pop	{r7, pc}

200011fa <draw_sprite>:


void grayScaleTest( void );


void draw_sprite(sprite* s, int x, int y, int set, int color) {
200011fa:	b5b0      	push	{r4, r5, r7, lr}
200011fc:	b08a      	sub	sp, #40	; 0x28
200011fe:	af00      	add	r7, sp, #0
20001200:	60f8      	str	r0, [r7, #12]
20001202:	60b9      	str	r1, [r7, #8]
20001204:	607a      	str	r2, [r7, #4]
20001206:	603b      	str	r3, [r7, #0]
	int i,j,k, width_in_bytes;
	if (s->width % 8 == 0)
20001208:	68fb      	ldr	r3, [r7, #12]
2000120a:	681b      	ldr	r3, [r3, #0]
2000120c:	2207      	movs	r2, #7
2000120e:	4013      	ands	r3, r2
20001210:	d104      	bne.n	2000121c <draw_sprite+0x22>
		width_in_bytes = s->width / 8;
20001212:	68fb      	ldr	r3, [r7, #12]
20001214:	681b      	ldr	r3, [r3, #0]
20001216:	08db      	lsrs	r3, r3, #3
20001218:	61bb      	str	r3, [r7, #24]
2000121a:	e004      	b.n	20001226 <draw_sprite+0x2c>
	else
		width_in_bytes = (s->width / 8) + 1;
2000121c:	68fb      	ldr	r3, [r7, #12]
2000121e:	681b      	ldr	r3, [r3, #0]
20001220:	08db      	lsrs	r3, r3, #3
20001222:	3301      	adds	r3, #1
20001224:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < s->height; i++)
20001226:	2300      	movs	r3, #0
20001228:	627b      	str	r3, [r7, #36]	; 0x24
2000122a:	e06a      	b.n	20001302 <draw_sprite+0x108>
		for (j = 0; j < width_in_bytes; j++) {
2000122c:	2300      	movs	r3, #0
2000122e:	623b      	str	r3, [r7, #32]
20001230:	e060      	b.n	200012f4 <draw_sprite+0xfa>
			unsigned char byte = s->data[i * width_in_bytes + j];
20001232:	68fb      	ldr	r3, [r7, #12]
20001234:	689b      	ldr	r3, [r3, #8]
20001236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001238:	69b9      	ldr	r1, [r7, #24]
2000123a:	4351      	muls	r1, r2
2000123c:	6a3a      	ldr	r2, [r7, #32]
2000123e:	188a      	adds	r2, r1, r2
20001240:	189a      	adds	r2, r3, r2
20001242:	2317      	movs	r3, #23
20001244:	18fb      	adds	r3, r7, r3
20001246:	7812      	ldrb	r2, [r2, #0]
20001248:	701a      	strb	r2, [r3, #0]
			for (k =0; k < 8; k++) {
2000124a:	2300      	movs	r3, #0
2000124c:	61fb      	str	r3, [r7, #28]
2000124e:	e04b      	b.n	200012e8 <draw_sprite+0xee>
				if (byte & (1 << k)){
20001250:	2317      	movs	r3, #23
20001252:	18fb      	adds	r3, r7, r3
20001254:	781a      	ldrb	r2, [r3, #0]
20001256:	69fb      	ldr	r3, [r7, #28]
20001258:	411a      	asrs	r2, r3
2000125a:	0013      	movs	r3, r2
2000125c:	2201      	movs	r2, #1
2000125e:	4013      	ands	r3, r2
20001260:	d03f      	beq.n	200012e2 <draw_sprite+0xe8>
					pixel(8 * j + k + x + 1, i + y + 1, set, color);
20001262:	6a3b      	ldr	r3, [r7, #32]
20001264:	00da      	lsls	r2, r3, #3
20001266:	69fb      	ldr	r3, [r7, #28]
20001268:	18d2      	adds	r2, r2, r3
2000126a:	68bb      	ldr	r3, [r7, #8]
2000126c:	18d3      	adds	r3, r2, r3
2000126e:	1c58      	adds	r0, r3, #1
20001270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001272:	687b      	ldr	r3, [r7, #4]
20001274:	18d3      	adds	r3, r2, r3
20001276:	1c59      	adds	r1, r3, #1
20001278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000127a:	683a      	ldr	r2, [r7, #0]
2000127c:	f7ff fdc2 	bl	20000e04 <pixel>
					
					if(set) {	//Remove the other colors from this pixel
20001280:	683b      	ldr	r3, [r7, #0]
20001282:	2b00      	cmp	r3, #0
20001284:	d02d      	beq.n	200012e2 <draw_sprite+0xe8>
						pixel(8 * j + k + x + 1, i + y + 1, 0, (color+1) % 3);
20001286:	6a3b      	ldr	r3, [r7, #32]
20001288:	00da      	lsls	r2, r3, #3
2000128a:	69fb      	ldr	r3, [r7, #28]
2000128c:	18d2      	adds	r2, r2, r3
2000128e:	68bb      	ldr	r3, [r7, #8]
20001290:	18d3      	adds	r3, r2, r3
20001292:	1c5c      	adds	r4, r3, #1
20001294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001296:	687b      	ldr	r3, [r7, #4]
20001298:	18d3      	adds	r3, r2, r3
2000129a:	1c5d      	adds	r5, r3, #1
2000129c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000129e:	3301      	adds	r3, #1
200012a0:	2103      	movs	r1, #3
200012a2:	0018      	movs	r0, r3
200012a4:	f000 fe32 	bl	20001f0c <__aeabi_idivmod>
200012a8:	000b      	movs	r3, r1
200012aa:	2200      	movs	r2, #0
200012ac:	0029      	movs	r1, r5
200012ae:	0020      	movs	r0, r4
200012b0:	f7ff fda8 	bl	20000e04 <pixel>
						pixel(8 * j + k + x + 1, i + y + 1, 0, (color+2) % 3);
200012b4:	6a3b      	ldr	r3, [r7, #32]
200012b6:	00da      	lsls	r2, r3, #3
200012b8:	69fb      	ldr	r3, [r7, #28]
200012ba:	18d2      	adds	r2, r2, r3
200012bc:	68bb      	ldr	r3, [r7, #8]
200012be:	18d3      	adds	r3, r2, r3
200012c0:	1c5c      	adds	r4, r3, #1
200012c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200012c4:	687b      	ldr	r3, [r7, #4]
200012c6:	18d3      	adds	r3, r2, r3
200012c8:	1c5d      	adds	r5, r3, #1
200012ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200012cc:	3302      	adds	r3, #2
200012ce:	2103      	movs	r1, #3
200012d0:	0018      	movs	r0, r3
200012d2:	f000 fe1b 	bl	20001f0c <__aeabi_idivmod>
200012d6:	000b      	movs	r3, r1
200012d8:	2200      	movs	r2, #0
200012da:	0029      	movs	r1, r5
200012dc:	0020      	movs	r0, r4
200012de:	f7ff fd91 	bl	20000e04 <pixel>
			for (k =0; k < 8; k++) {
200012e2:	69fb      	ldr	r3, [r7, #28]
200012e4:	3301      	adds	r3, #1
200012e6:	61fb      	str	r3, [r7, #28]
200012e8:	69fb      	ldr	r3, [r7, #28]
200012ea:	2b07      	cmp	r3, #7
200012ec:	ddb0      	ble.n	20001250 <draw_sprite+0x56>
		for (j = 0; j < width_in_bytes; j++) {
200012ee:	6a3b      	ldr	r3, [r7, #32]
200012f0:	3301      	adds	r3, #1
200012f2:	623b      	str	r3, [r7, #32]
200012f4:	6a3a      	ldr	r2, [r7, #32]
200012f6:	69bb      	ldr	r3, [r7, #24]
200012f8:	429a      	cmp	r2, r3
200012fa:	db9a      	blt.n	20001232 <draw_sprite+0x38>
	for (i = 0; i < s->height; i++)
200012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200012fe:	3301      	adds	r3, #1
20001300:	627b      	str	r3, [r7, #36]	; 0x24
20001302:	68fb      	ldr	r3, [r7, #12]
20001304:	685a      	ldr	r2, [r3, #4]
20001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001308:	429a      	cmp	r2, r3
2000130a:	d88f      	bhi.n	2000122c <draw_sprite+0x32>
					}
				}
			}
		}
}
2000130c:	46c0      	nop			; (mov r8, r8)
2000130e:	46bd      	mov	sp, r7
20001310:	b00a      	add	sp, #40	; 0x28
20001312:	bdb0      	pop	{r4, r5, r7, pc}

20001314 <fillRectangle>:

void fillRectangle( int x, int y, int width, int height ){
20001314:	b580      	push	{r7, lr}
20001316:	b086      	sub	sp, #24
20001318:	af00      	add	r7, sp, #0
2000131a:	60f8      	str	r0, [r7, #12]
2000131c:	60b9      	str	r1, [r7, #8]
2000131e:	607a      	str	r2, [r7, #4]
20001320:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
20001322:	68fb      	ldr	r3, [r7, #12]
20001324:	617b      	str	r3, [r7, #20]
20001326:	e014      	b.n	20001352 <fillRectangle+0x3e>
		for (j = y; j < y + height; j++) {
20001328:	68bb      	ldr	r3, [r7, #8]
2000132a:	613b      	str	r3, [r7, #16]
2000132c:	e008      	b.n	20001340 <fillRectangle+0x2c>
			pixel(i, j, 1, 3);
2000132e:	6939      	ldr	r1, [r7, #16]
20001330:	6978      	ldr	r0, [r7, #20]
20001332:	2303      	movs	r3, #3
20001334:	2201      	movs	r2, #1
20001336:	f7ff fd65 	bl	20000e04 <pixel>
		for (j = y; j < y + height; j++) {
2000133a:	693b      	ldr	r3, [r7, #16]
2000133c:	3301      	adds	r3, #1
2000133e:	613b      	str	r3, [r7, #16]
20001340:	68ba      	ldr	r2, [r7, #8]
20001342:	683b      	ldr	r3, [r7, #0]
20001344:	18d2      	adds	r2, r2, r3
20001346:	693b      	ldr	r3, [r7, #16]
20001348:	429a      	cmp	r2, r3
2000134a:	dcf0      	bgt.n	2000132e <fillRectangle+0x1a>
	for (i = x; i < x + width; i++) {
2000134c:	697b      	ldr	r3, [r7, #20]
2000134e:	3301      	adds	r3, #1
20001350:	617b      	str	r3, [r7, #20]
20001352:	68fa      	ldr	r2, [r7, #12]
20001354:	687b      	ldr	r3, [r7, #4]
20001356:	18d2      	adds	r2, r2, r3
20001358:	697b      	ldr	r3, [r7, #20]
2000135a:	429a      	cmp	r2, r3
2000135c:	dce4      	bgt.n	20001328 <fillRectangle+0x14>
		}
	}
}
2000135e:	46c0      	nop			; (mov r8, r8)
20001360:	46bd      	mov	sp, r7
20001362:	b006      	add	sp, #24
20001364:	bd80      	pop	{r7, pc}

20001366 <clearRectangle>:

void clearRectangle( int x, int y, int width, int height ){
20001366:	b580      	push	{r7, lr}
20001368:	b086      	sub	sp, #24
2000136a:	af00      	add	r7, sp, #0
2000136c:	60f8      	str	r0, [r7, #12]
2000136e:	60b9      	str	r1, [r7, #8]
20001370:	607a      	str	r2, [r7, #4]
20001372:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
20001374:	68fb      	ldr	r3, [r7, #12]
20001376:	617b      	str	r3, [r7, #20]
20001378:	e014      	b.n	200013a4 <clearRectangle+0x3e>
		for (j = y; j < y + height; j++) {
2000137a:	68bb      	ldr	r3, [r7, #8]
2000137c:	613b      	str	r3, [r7, #16]
2000137e:	e008      	b.n	20001392 <clearRectangle+0x2c>
			pixel(i, j, 0, 3);
20001380:	6939      	ldr	r1, [r7, #16]
20001382:	6978      	ldr	r0, [r7, #20]
20001384:	2303      	movs	r3, #3
20001386:	2200      	movs	r2, #0
20001388:	f7ff fd3c 	bl	20000e04 <pixel>
		for (j = y; j < y + height; j++) {
2000138c:	693b      	ldr	r3, [r7, #16]
2000138e:	3301      	adds	r3, #1
20001390:	613b      	str	r3, [r7, #16]
20001392:	68ba      	ldr	r2, [r7, #8]
20001394:	683b      	ldr	r3, [r7, #0]
20001396:	18d2      	adds	r2, r2, r3
20001398:	693b      	ldr	r3, [r7, #16]
2000139a:	429a      	cmp	r2, r3
2000139c:	dcf0      	bgt.n	20001380 <clearRectangle+0x1a>
	for (i = x; i < x + width; i++) {
2000139e:	697b      	ldr	r3, [r7, #20]
200013a0:	3301      	adds	r3, #1
200013a2:	617b      	str	r3, [r7, #20]
200013a4:	68fa      	ldr	r2, [r7, #12]
200013a6:	687b      	ldr	r3, [r7, #4]
200013a8:	18d2      	adds	r2, r2, r3
200013aa:	697b      	ldr	r3, [r7, #20]
200013ac:	429a      	cmp	r2, r3
200013ae:	dce4      	bgt.n	2000137a <clearRectangle+0x14>
		}
	}
}
200013b0:	46c0      	nop			; (mov r8, r8)
200013b2:	46bd      	mov	sp, r7
200013b4:	b006      	add	sp, #24
200013b6:	bd80      	pop	{r7, pc}

200013b8 <grayScaleTest>:


void grayScaleTest( void ) {
200013b8:	b590      	push	{r4, r7, lr}
200013ba:	b087      	sub	sp, #28
200013bc:	af00      	add	r7, sp, #0
	int x = 10;
200013be:	230a      	movs	r3, #10
200013c0:	617b      	str	r3, [r7, #20]
	int y = 10;
200013c2:	230a      	movs	r3, #10
200013c4:	613b      	str	r3, [r7, #16]
	int width = 70;
200013c6:	2346      	movs	r3, #70	; 0x46
200013c8:	60fb      	str	r3, [r7, #12]
	int height = 50;
200013ca:	2332      	movs	r3, #50	; 0x32
200013cc:	60bb      	str	r3, [r7, #8]
	
	int x2 = 50;
200013ce:	2332      	movs	r3, #50	; 0x32
200013d0:	607b      	str	r3, [r7, #4]
	
	fillRectangle(x, y, width, height);
200013d2:	68bb      	ldr	r3, [r7, #8]
200013d4:	68fa      	ldr	r2, [r7, #12]
200013d6:	6939      	ldr	r1, [r7, #16]
200013d8:	6978      	ldr	r0, [r7, #20]
200013da:	f7ff ff9b 	bl	20001314 <fillRectangle>
	
	int i;
	int k = 5;
200013de:	2305      	movs	r3, #5
200013e0:	603b      	str	r3, [r7, #0]
	while(1) {
		clear_backBuffer();
200013e2:	f7ff fadf 	bl	200009a4 <clear_backBuffer>
		fillRectangle(x, y, width, height);
200013e6:	68bb      	ldr	r3, [r7, #8]
200013e8:	68fa      	ldr	r2, [r7, #12]
200013ea:	6939      	ldr	r1, [r7, #16]
200013ec:	6978      	ldr	r0, [r7, #20]
200013ee:	f7ff ff91 	bl	20001314 <fillRectangle>
		clearRectangle(x+2+2, y+1, width-k, height-k); //outer square
200013f2:	697b      	ldr	r3, [r7, #20]
200013f4:	1d18      	adds	r0, r3, #4
200013f6:	693b      	ldr	r3, [r7, #16]
200013f8:	1c59      	adds	r1, r3, #1
200013fa:	68fa      	ldr	r2, [r7, #12]
200013fc:	683b      	ldr	r3, [r7, #0]
200013fe:	1ad4      	subs	r4, r2, r3
20001400:	68ba      	ldr	r2, [r7, #8]
20001402:	683b      	ldr	r3, [r7, #0]
20001404:	1ad3      	subs	r3, r2, r3
20001406:	0022      	movs	r2, r4
20001408:	f7ff ffad 	bl	20001366 <clearRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
2000140c:	697b      	ldr	r3, [r7, #20]
2000140e:	1c9a      	adds	r2, r3, #2
20001410:	683b      	ldr	r3, [r7, #0]
20001412:	18d0      	adds	r0, r2, r3
20001414:	693b      	ldr	r3, [r7, #16]
20001416:	1c99      	adds	r1, r3, #2
20001418:	68fb      	ldr	r3, [r7, #12]
2000141a:	1f1a      	subs	r2, r3, #4
2000141c:	683b      	ldr	r3, [r7, #0]
2000141e:	1ad4      	subs	r4, r2, r3
20001420:	68bb      	ldr	r3, [r7, #8]
20001422:	1f1a      	subs	r2, r3, #4
20001424:	683b      	ldr	r3, [r7, #0]
20001426:	1ad3      	subs	r3, r2, r3
20001428:	0022      	movs	r2, r4
2000142a:	f7ff ff9c 	bl	20001366 <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
2000142e:	4b2d      	ldr	r3, [pc, #180]	; (200014e4 <grayScaleTest+0x12c>)
20001430:	0018      	movs	r0, r3
20001432:	f7ff fe77 	bl	20001124 <graphic_draw_screen>
		clear_backBuffer();
20001436:	f7ff fab5 	bl	200009a4 <clear_backBuffer>
		fillRectangle(x, y, width, height);
2000143a:	68bb      	ldr	r3, [r7, #8]
2000143c:	68fa      	ldr	r2, [r7, #12]
2000143e:	6939      	ldr	r1, [r7, #16]
20001440:	6978      	ldr	r0, [r7, #20]
20001442:	f7ff ff67 	bl	20001314 <fillRectangle>
		
		fillRectangle(x+2+2, y+1, width-k, height-k); //outer white square
20001446:	697b      	ldr	r3, [r7, #20]
20001448:	1d18      	adds	r0, r3, #4
2000144a:	693b      	ldr	r3, [r7, #16]
2000144c:	1c59      	adds	r1, r3, #1
2000144e:	68fa      	ldr	r2, [r7, #12]
20001450:	683b      	ldr	r3, [r7, #0]
20001452:	1ad4      	subs	r4, r2, r3
20001454:	68ba      	ldr	r2, [r7, #8]
20001456:	683b      	ldr	r3, [r7, #0]
20001458:	1ad3      	subs	r3, r2, r3
2000145a:	0022      	movs	r2, r4
2000145c:	f7ff ff5a 	bl	20001314 <fillRectangle>
		fillRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
20001460:	697b      	ldr	r3, [r7, #20]
20001462:	1c9a      	adds	r2, r3, #2
20001464:	683b      	ldr	r3, [r7, #0]
20001466:	18d0      	adds	r0, r2, r3
20001468:	693b      	ldr	r3, [r7, #16]
2000146a:	1c99      	adds	r1, r3, #2
2000146c:	68fb      	ldr	r3, [r7, #12]
2000146e:	1f1a      	subs	r2, r3, #4
20001470:	683b      	ldr	r3, [r7, #0]
20001472:	1ad4      	subs	r4, r2, r3
20001474:	68bb      	ldr	r3, [r7, #8]
20001476:	1f1a      	subs	r2, r3, #4
20001478:	683b      	ldr	r3, [r7, #0]
2000147a:	1ad3      	subs	r3, r2, r3
2000147c:	0022      	movs	r2, r4
2000147e:	f7ff ff49 	bl	20001314 <fillRectangle>
		clearRectangle(x+12, y+5, 5, 5);
20001482:	697b      	ldr	r3, [r7, #20]
20001484:	330c      	adds	r3, #12
20001486:	0018      	movs	r0, r3
20001488:	693b      	ldr	r3, [r7, #16]
2000148a:	1d59      	adds	r1, r3, #5
2000148c:	2305      	movs	r3, #5
2000148e:	2205      	movs	r2, #5
20001490:	f7ff ff69 	bl	20001366 <clearRectangle>
		
		graphic_draw_screen(draw_buffer_black);
20001494:	4b13      	ldr	r3, [pc, #76]	; (200014e4 <grayScaleTest+0x12c>)
20001496:	0018      	movs	r0, r3
20001498:	f7ff fe44 	bl	20001124 <graphic_draw_screen>
		delay_milli(20);
2000149c:	2014      	movs	r0, #20
2000149e:	f7ff fa55 	bl	2000094c <delay_milli>
		
		clear_backBuffer();
200014a2:	f7ff fa7f 	bl	200009a4 <clear_backBuffer>
		fillRectangle(x, y, width, height);
200014a6:	68bb      	ldr	r3, [r7, #8]
200014a8:	68fa      	ldr	r2, [r7, #12]
200014aa:	6939      	ldr	r1, [r7, #16]
200014ac:	6978      	ldr	r0, [r7, #20]
200014ae:	f7ff ff31 	bl	20001314 <fillRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
200014b2:	697b      	ldr	r3, [r7, #20]
200014b4:	1c9a      	adds	r2, r3, #2
200014b6:	683b      	ldr	r3, [r7, #0]
200014b8:	18d0      	adds	r0, r2, r3
200014ba:	693b      	ldr	r3, [r7, #16]
200014bc:	1c99      	adds	r1, r3, #2
200014be:	68fb      	ldr	r3, [r7, #12]
200014c0:	1f1a      	subs	r2, r3, #4
200014c2:	683b      	ldr	r3, [r7, #0]
200014c4:	1ad4      	subs	r4, r2, r3
200014c6:	68bb      	ldr	r3, [r7, #8]
200014c8:	1f1a      	subs	r2, r3, #4
200014ca:	683b      	ldr	r3, [r7, #0]
200014cc:	1ad3      	subs	r3, r2, r3
200014ce:	0022      	movs	r2, r4
200014d0:	f7ff ff49 	bl	20001366 <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
200014d4:	4b03      	ldr	r3, [pc, #12]	; (200014e4 <grayScaleTest+0x12c>)
200014d6:	0018      	movs	r0, r3
200014d8:	f7ff fe24 	bl	20001124 <graphic_draw_screen>
		
		delay_milli(20);
200014dc:	2014      	movs	r0, #20
200014de:	f7ff fa35 	bl	2000094c <delay_milli>
		clear_backBuffer();
200014e2:	e77e      	b.n	200013e2 <grayScaleTest+0x2a>
200014e4:	200032a8 	andcs	r3, r0, r8, lsr #5

200014e8 <set_up_draw_buffers>:
	}
}

/** Should prepare the different drawing buffers, before the drawing of each frame.*/
void set_up_draw_buffers( void ) {
200014e8:	b580      	push	{r7, lr}
200014ea:	b082      	sub	sp, #8
200014ec:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 1024; i++) {
200014ee:	2300      	movs	r3, #0
200014f0:	607b      	str	r3, [r7, #4]
200014f2:	e065      	b.n	200015c0 <set_up_draw_buffers+0xd8>
		draw_buffer_black[i] = backBuffer[i] & (~backBufferGray[i] & ~backBufferLight[i]); //Had to work a bit on these
200014f4:	4a36      	ldr	r2, [pc, #216]	; (200015d0 <set_up_draw_buffers+0xe8>)
200014f6:	687b      	ldr	r3, [r7, #4]
200014f8:	18d3      	adds	r3, r2, r3
200014fa:	781b      	ldrb	r3, [r3, #0]
200014fc:	b25b      	sxtb	r3, r3
200014fe:	4935      	ldr	r1, [pc, #212]	; (200015d4 <set_up_draw_buffers+0xec>)
20001500:	687a      	ldr	r2, [r7, #4]
20001502:	188a      	adds	r2, r1, r2
20001504:	7811      	ldrb	r1, [r2, #0]
20001506:	4834      	ldr	r0, [pc, #208]	; (200015d8 <set_up_draw_buffers+0xf0>)
20001508:	687a      	ldr	r2, [r7, #4]
2000150a:	1882      	adds	r2, r0, r2
2000150c:	7812      	ldrb	r2, [r2, #0]
2000150e:	430a      	orrs	r2, r1
20001510:	b2d2      	uxtb	r2, r2
20001512:	b252      	sxtb	r2, r2
20001514:	43d2      	mvns	r2, r2
20001516:	b252      	sxtb	r2, r2
20001518:	4013      	ands	r3, r2
2000151a:	b25b      	sxtb	r3, r3
2000151c:	b2d9      	uxtb	r1, r3
2000151e:	4a2f      	ldr	r2, [pc, #188]	; (200015dc <set_up_draw_buffers+0xf4>)
20001520:	687b      	ldr	r3, [r7, #4]
20001522:	18d3      	adds	r3, r2, r3
20001524:	1c0a      	adds	r2, r1, #0
20001526:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray[i] = (backBuffer[i] | backBufferGray[i]) & ~backBufferLight[i]; //in order to make it possible
20001528:	4a29      	ldr	r2, [pc, #164]	; (200015d0 <set_up_draw_buffers+0xe8>)
2000152a:	687b      	ldr	r3, [r7, #4]
2000152c:	18d3      	adds	r3, r2, r3
2000152e:	781a      	ldrb	r2, [r3, #0]
20001530:	4928      	ldr	r1, [pc, #160]	; (200015d4 <set_up_draw_buffers+0xec>)
20001532:	687b      	ldr	r3, [r7, #4]
20001534:	18cb      	adds	r3, r1, r3
20001536:	781b      	ldrb	r3, [r3, #0]
20001538:	4313      	orrs	r3, r2
2000153a:	b2db      	uxtb	r3, r3
2000153c:	b25b      	sxtb	r3, r3
2000153e:	4926      	ldr	r1, [pc, #152]	; (200015d8 <set_up_draw_buffers+0xf0>)
20001540:	687a      	ldr	r2, [r7, #4]
20001542:	188a      	adds	r2, r1, r2
20001544:	7812      	ldrb	r2, [r2, #0]
20001546:	b252      	sxtb	r2, r2
20001548:	43d2      	mvns	r2, r2
2000154a:	b252      	sxtb	r2, r2
2000154c:	4013      	ands	r3, r2
2000154e:	b25b      	sxtb	r3, r3
20001550:	b2d9      	uxtb	r1, r3
20001552:	4a23      	ldr	r2, [pc, #140]	; (200015e0 <set_up_draw_buffers+0xf8>)
20001554:	687b      	ldr	r3, [r7, #4]
20001556:	18d3      	adds	r3, r2, r3
20001558:	1c0a      	adds	r2, r1, #0
2000155a:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_light[i] = (backBuffer[i] | backBufferLight[i]) & ~backBufferGray[i]; //to show a lighter sprite
2000155c:	4a1c      	ldr	r2, [pc, #112]	; (200015d0 <set_up_draw_buffers+0xe8>)
2000155e:	687b      	ldr	r3, [r7, #4]
20001560:	18d3      	adds	r3, r2, r3
20001562:	781a      	ldrb	r2, [r3, #0]
20001564:	491c      	ldr	r1, [pc, #112]	; (200015d8 <set_up_draw_buffers+0xf0>)
20001566:	687b      	ldr	r3, [r7, #4]
20001568:	18cb      	adds	r3, r1, r3
2000156a:	781b      	ldrb	r3, [r3, #0]
2000156c:	4313      	orrs	r3, r2
2000156e:	b2db      	uxtb	r3, r3
20001570:	b25b      	sxtb	r3, r3
20001572:	4918      	ldr	r1, [pc, #96]	; (200015d4 <set_up_draw_buffers+0xec>)
20001574:	687a      	ldr	r2, [r7, #4]
20001576:	188a      	adds	r2, r1, r2
20001578:	7812      	ldrb	r2, [r2, #0]
2000157a:	b252      	sxtb	r2, r2
2000157c:	43d2      	mvns	r2, r2
2000157e:	b252      	sxtb	r2, r2
20001580:	4013      	ands	r3, r2
20001582:	b25b      	sxtb	r3, r3
20001584:	b2d9      	uxtb	r1, r3
20001586:	4a17      	ldr	r2, [pc, #92]	; (200015e4 <set_up_draw_buffers+0xfc>)
20001588:	687b      	ldr	r3, [r7, #4]
2000158a:	18d3      	adds	r3, r2, r3
2000158c:	1c0a      	adds	r2, r1, #0
2000158e:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray_light[i] = backBuffer[i] | backBufferGray[i] | backBufferLight[i]; //on top of a darker one.
20001590:	4a0f      	ldr	r2, [pc, #60]	; (200015d0 <set_up_draw_buffers+0xe8>)
20001592:	687b      	ldr	r3, [r7, #4]
20001594:	18d3      	adds	r3, r2, r3
20001596:	781a      	ldrb	r2, [r3, #0]
20001598:	490e      	ldr	r1, [pc, #56]	; (200015d4 <set_up_draw_buffers+0xec>)
2000159a:	687b      	ldr	r3, [r7, #4]
2000159c:	18cb      	adds	r3, r1, r3
2000159e:	781b      	ldrb	r3, [r3, #0]
200015a0:	4313      	orrs	r3, r2
200015a2:	b2da      	uxtb	r2, r3
200015a4:	490c      	ldr	r1, [pc, #48]	; (200015d8 <set_up_draw_buffers+0xf0>)
200015a6:	687b      	ldr	r3, [r7, #4]
200015a8:	18cb      	adds	r3, r1, r3
200015aa:	781b      	ldrb	r3, [r3, #0]
200015ac:	4313      	orrs	r3, r2
200015ae:	b2d9      	uxtb	r1, r3
200015b0:	4a0d      	ldr	r2, [pc, #52]	; (200015e8 <set_up_draw_buffers+0x100>)
200015b2:	687b      	ldr	r3, [r7, #4]
200015b4:	18d3      	adds	r3, r2, r3
200015b6:	1c0a      	adds	r2, r1, #0
200015b8:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 1024; i++) {
200015ba:	687b      	ldr	r3, [r7, #4]
200015bc:	3301      	adds	r3, #1
200015be:	607b      	str	r3, [r7, #4]
200015c0:	687b      	ldr	r3, [r7, #4]
200015c2:	4a0a      	ldr	r2, [pc, #40]	; (200015ec <set_up_draw_buffers+0x104>)
200015c4:	4293      	cmp	r3, r2
200015c6:	dd95      	ble.n	200014f4 <set_up_draw_buffers+0xc>
	}
}
200015c8:	46c0      	nop			; (mov r8, r8)
200015ca:	46bd      	mov	sp, r7
200015cc:	b002      	add	sp, #8
200015ce:	bd80      	pop	{r7, pc}
200015d0:	20002aa8 	andcs	r2, r0, r8, lsr #21
200015d4:	200022a8 	andcs	r2, r0, r8, lsr #5
200015d8:	20003aa8 	andcs	r3, r0, r8, lsr #21
200015dc:	200032a8 	andcs	r3, r0, r8, lsr #5
200015e0:	200026a8 	andcs	r2, r0, r8, lsr #13
200015e4:	20002ea8 	andcs	r2, r0, r8, lsr #29
200015e8:	200036a8 	andcs	r3, r0, r8, lsr #13
200015ec:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

200015f0 <draw_game_object>:

void draw_game_object(GameObject *gObj) {
200015f0:	b580      	push	{r7, lr}
200015f2:	b086      	sub	sp, #24
200015f4:	af02      	add	r7, sp, #8
200015f6:	6078      	str	r0, [r7, #4]
	int frame = gObj->current_frame;
200015f8:	687b      	ldr	r3, [r7, #4]
200015fa:	695b      	ldr	r3, [r3, #20]
200015fc:	60fb      	str	r3, [r7, #12]
	draw_sprite(gObj->images[frame].blackImage, gObj->xPos, gObj->yPos, 1, 3);
200015fe:	687b      	ldr	r3, [r7, #4]
20001600:	6819      	ldr	r1, [r3, #0]
20001602:	68fa      	ldr	r2, [r7, #12]
20001604:	0013      	movs	r3, r2
20001606:	005b      	lsls	r3, r3, #1
20001608:	189b      	adds	r3, r3, r2
2000160a:	009b      	lsls	r3, r3, #2
2000160c:	18cb      	adds	r3, r1, r3
2000160e:	6818      	ldr	r0, [r3, #0]
20001610:	687b      	ldr	r3, [r7, #4]
20001612:	6859      	ldr	r1, [r3, #4]
20001614:	687b      	ldr	r3, [r7, #4]
20001616:	689a      	ldr	r2, [r3, #8]
20001618:	2303      	movs	r3, #3
2000161a:	9300      	str	r3, [sp, #0]
2000161c:	2301      	movs	r3, #1
2000161e:	f7ff fdec 	bl	200011fa <draw_sprite>
	draw_sprite(gObj->images[frame].grayImage, gObj->xPos, gObj->yPos, 1, 2);
20001622:	687b      	ldr	r3, [r7, #4]
20001624:	6819      	ldr	r1, [r3, #0]
20001626:	68fa      	ldr	r2, [r7, #12]
20001628:	0013      	movs	r3, r2
2000162a:	005b      	lsls	r3, r3, #1
2000162c:	189b      	adds	r3, r3, r2
2000162e:	009b      	lsls	r3, r3, #2
20001630:	18cb      	adds	r3, r1, r3
20001632:	6858      	ldr	r0, [r3, #4]
20001634:	687b      	ldr	r3, [r7, #4]
20001636:	6859      	ldr	r1, [r3, #4]
20001638:	687b      	ldr	r3, [r7, #4]
2000163a:	689a      	ldr	r2, [r3, #8]
2000163c:	2302      	movs	r3, #2
2000163e:	9300      	str	r3, [sp, #0]
20001640:	2301      	movs	r3, #1
20001642:	f7ff fdda 	bl	200011fa <draw_sprite>
	draw_sprite(gObj->images[frame].lightImage, gObj->xPos, gObj->yPos, 1, 1);
20001646:	687b      	ldr	r3, [r7, #4]
20001648:	6819      	ldr	r1, [r3, #0]
2000164a:	68fa      	ldr	r2, [r7, #12]
2000164c:	0013      	movs	r3, r2
2000164e:	005b      	lsls	r3, r3, #1
20001650:	189b      	adds	r3, r3, r2
20001652:	009b      	lsls	r3, r3, #2
20001654:	18cb      	adds	r3, r1, r3
20001656:	6898      	ldr	r0, [r3, #8]
20001658:	687b      	ldr	r3, [r7, #4]
2000165a:	6859      	ldr	r1, [r3, #4]
2000165c:	687b      	ldr	r3, [r7, #4]
2000165e:	689a      	ldr	r2, [r3, #8]
20001660:	2301      	movs	r3, #1
20001662:	9300      	str	r3, [sp, #0]
20001664:	2301      	movs	r3, #1
20001666:	f7ff fdc8 	bl	200011fa <draw_sprite>
}
2000166a:	46c0      	nop			; (mov r8, r8)
2000166c:	46bd      	mov	sp, r7
2000166e:	b004      	add	sp, #16
20001670:	bd80      	pop	{r7, pc}

20001672 <show_frame>:


void show_frame(int frame_length) {
20001672:	b580      	push	{r7, lr}
20001674:	b082      	sub	sp, #8
20001676:	af00      	add	r7, sp, #0
20001678:	6078      	str	r0, [r7, #4]
	set_up_draw_buffers();
2000167a:	f7ff ff35 	bl	200014e8 <set_up_draw_buffers>
	
	while(frame_length--) {
2000167e:	e01b      	b.n	200016b8 <show_frame+0x46>
		graphic_draw_screen(draw_buffer_black_gray_light);
20001680:	4b13      	ldr	r3, [pc, #76]	; (200016d0 <show_frame+0x5e>)
20001682:	0018      	movs	r0, r3
20001684:	f7ff fd4e 	bl	20001124 <graphic_draw_screen>
		delay_milli(1);
20001688:	2001      	movs	r0, #1
2000168a:	f7ff f95f 	bl	2000094c <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
2000168e:	4b11      	ldr	r3, [pc, #68]	; (200016d4 <show_frame+0x62>)
20001690:	0018      	movs	r0, r3
20001692:	f7ff fd47 	bl	20001124 <graphic_draw_screen>
		delay_milli(1);
20001696:	2001      	movs	r0, #1
20001698:	f7ff f958 	bl	2000094c <delay_milli>
		
		graphic_draw_screen(draw_buffer_black_gray);
2000169c:	4b0e      	ldr	r3, [pc, #56]	; (200016d8 <show_frame+0x66>)
2000169e:	0018      	movs	r0, r3
200016a0:	f7ff fd40 	bl	20001124 <graphic_draw_screen>
		delay_milli(1);
200016a4:	2001      	movs	r0, #1
200016a6:	f7ff f951 	bl	2000094c <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
200016aa:	4b0a      	ldr	r3, [pc, #40]	; (200016d4 <show_frame+0x62>)
200016ac:	0018      	movs	r0, r3
200016ae:	f7ff fd39 	bl	20001124 <graphic_draw_screen>
		delay_milli(1);
200016b2:	2001      	movs	r0, #1
200016b4:	f7ff f94a 	bl	2000094c <delay_milli>
	while(frame_length--) {
200016b8:	687b      	ldr	r3, [r7, #4]
200016ba:	1e5a      	subs	r2, r3, #1
200016bc:	607a      	str	r2, [r7, #4]
200016be:	2b00      	cmp	r3, #0
200016c0:	d1de      	bne.n	20001680 <show_frame+0xe>
	}
	
	clear_all_backBuffers();	//Maybe we could be more effective by only clearing the necessary stuff,
200016c2:	f7ff f97b 	bl	200009bc <clear_all_backBuffers>
								//but let's keep it like this if it works.
200016c6:	46c0      	nop			; (mov r8, r8)
200016c8:	46bd      	mov	sp, r7
200016ca:	b002      	add	sp, #8
200016cc:	bd80      	pop	{r7, pc}
200016ce:	46c0      	nop			; (mov r8, r8)
200016d0:	200036a8 	andcs	r3, r0, r8, lsr #13
200016d4:	200032a8 	andcs	r3, r0, r8, lsr #5
200016d8:	200026a8 	andcs	r2, r0, r8, lsr #13

200016dc <load_image>:
#include "image.h"

void load_image( Image *image, sprite *blackImage, sprite *grayImage, sprite *lightImage ) {
200016dc:	b580      	push	{r7, lr}
200016de:	b084      	sub	sp, #16
200016e0:	af00      	add	r7, sp, #0
200016e2:	60f8      	str	r0, [r7, #12]
200016e4:	60b9      	str	r1, [r7, #8]
200016e6:	607a      	str	r2, [r7, #4]
200016e8:	603b      	str	r3, [r7, #0]
	image->blackImage = blackImage;
200016ea:	68fb      	ldr	r3, [r7, #12]
200016ec:	68ba      	ldr	r2, [r7, #8]
200016ee:	601a      	str	r2, [r3, #0]
	image->grayImage = grayImage;
200016f0:	68fb      	ldr	r3, [r7, #12]
200016f2:	687a      	ldr	r2, [r7, #4]
200016f4:	605a      	str	r2, [r3, #4]
	image->lightImage = lightImage;
200016f6:	68fb      	ldr	r3, [r7, #12]
200016f8:	683a      	ldr	r2, [r7, #0]
200016fa:	609a      	str	r2, [r3, #8]
}
200016fc:	46c0      	nop			; (mov r8, r8)
200016fe:	46bd      	mov	sp, r7
20001700:	b004      	add	sp, #16
20001702:	bd80      	pop	{r7, pc}

20001704 <load_sprite>:
#include "sprite.h"

void load_sprite(sprite* s, unsigned char* data, int width, int height)
{
20001704:	b580      	push	{r7, lr}
20001706:	b084      	sub	sp, #16
20001708:	af00      	add	r7, sp, #0
2000170a:	60f8      	str	r0, [r7, #12]
2000170c:	60b9      	str	r1, [r7, #8]
2000170e:	607a      	str	r2, [r7, #4]
20001710:	603b      	str	r3, [r7, #0]
	s->width = width;
20001712:	687a      	ldr	r2, [r7, #4]
20001714:	68fb      	ldr	r3, [r7, #12]
20001716:	601a      	str	r2, [r3, #0]
	s->height = height;
20001718:	683a      	ldr	r2, [r7, #0]
2000171a:	68fb      	ldr	r3, [r7, #12]
2000171c:	605a      	str	r2, [r3, #4]
	s->data = data;
2000171e:	68fb      	ldr	r3, [r7, #12]
20001720:	68ba      	ldr	r2, [r7, #8]
20001722:	609a      	str	r2, [r3, #8]
}
20001724:	46c0      	nop			; (mov r8, r8)
20001726:	46bd      	mov	sp, r7
20001728:	b004      	add	sp, #16
2000172a:	bd80      	pop	{r7, pc}

2000172c <set_up_DIL>:
#include "gpio.h"

/** Sets up PE0-7 as inports and PE8-15 as outports. */
void set_up_DIL( void ) {
2000172c:	b580      	push	{r7, lr}
2000172e:	af00      	add	r7, sp, #0
	GPIO_D.Moder = 0x55550000;
20001730:	4b02      	ldr	r3, [pc, #8]	; (2000173c <set_up_DIL+0x10>)
20001732:	4a03      	ldr	r2, [pc, #12]	; (20001740 <set_up_DIL+0x14>)
20001734:	601a      	str	r2, [r3, #0]
}
20001736:	46c0      	nop			; (mov r8, r8)
20001738:	46bd      	mov	sp, r7
2000173a:	bd80      	pop	{r7, pc}
2000173c:	40020c00 	andmi	r0, r2, r0, lsl #24
20001740:	55550000 	ldrbpl	r0, [r5, #-0]

20001744 <read_DIL>:

char read_DIL( void ) {
20001744:	b580      	push	{r7, lr}
20001746:	af00      	add	r7, sp, #0
	return GPIO_D.idrLow;
20001748:	4b02      	ldr	r3, [pc, #8]	; (20001754 <read_DIL+0x10>)
2000174a:	7c1b      	ldrb	r3, [r3, #16]
2000174c:	b2db      	uxtb	r3, r3
}
2000174e:	0018      	movs	r0, r3
20001750:	46bd      	mov	sp, r7
20001752:	bd80      	pop	{r7, pc}
20001754:	40020c00 	andmi	r0, r2, r0, lsl #24

20001758 <read_DIL_single>:


int read_DIL_single( int bit ) {
20001758:	b590      	push	{r4, r7, lr}
2000175a:	b085      	sub	sp, #20
2000175c:	af00      	add	r7, sp, #0
2000175e:	6078      	str	r0, [r7, #4]
	char DIL = read_DIL();
20001760:	230f      	movs	r3, #15
20001762:	18fc      	adds	r4, r7, r3
20001764:	f7ff ffee 	bl	20001744 <read_DIL>
20001768:	0003      	movs	r3, r0
2000176a:	7023      	strb	r3, [r4, #0]
	if (DIL & (1<<bit)) {
2000176c:	230f      	movs	r3, #15
2000176e:	18fb      	adds	r3, r7, r3
20001770:	781a      	ldrb	r2, [r3, #0]
20001772:	687b      	ldr	r3, [r7, #4]
20001774:	411a      	asrs	r2, r3
20001776:	0013      	movs	r3, r2
20001778:	2201      	movs	r2, #1
2000177a:	4013      	ands	r3, r2
2000177c:	d001      	beq.n	20001782 <read_DIL_single+0x2a>
		return 0;
2000177e:	2300      	movs	r3, #0
20001780:	e000      	b.n	20001784 <read_DIL_single+0x2c>
	} else {
		return 1;
20001782:	2301      	movs	r3, #1
	}
20001784:	0018      	movs	r0, r3
20001786:	46bd      	mov	sp, r7
20001788:	b005      	add	sp, #20
2000178a:	bd90      	pop	{r4, r7, pc}

2000178c <ascii_ctrl_bit_set>:
void ascii_write_data(unsigned char data);
unsigned char ascii_read_status(void);
unsigned char ascii_read_data(void);


void ascii_ctrl_bit_set(unsigned char x){
2000178c:	b580      	push	{r7, lr}
2000178e:	b084      	sub	sp, #16
20001790:	af00      	add	r7, sp, #0
20001792:	0002      	movs	r2, r0
20001794:	1dfb      	adds	r3, r7, #7
20001796:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och ettstÃƒÂ¤ll de bitar som ÃƒÂ¤r 1 i x
	unsigned char c;
	c = *portOdrLow;
20001798:	4a0c      	ldr	r2, [pc, #48]	; (200017cc <ascii_ctrl_bit_set+0x40>)
2000179a:	230f      	movs	r3, #15
2000179c:	18fb      	adds	r3, r7, r3
2000179e:	7812      	ldrb	r2, [r2, #0]
200017a0:	701a      	strb	r2, [r3, #0]
	c |= (B_SELECT | x);
200017a2:	1dfa      	adds	r2, r7, #7
200017a4:	230f      	movs	r3, #15
200017a6:	18fb      	adds	r3, r7, r3
200017a8:	7812      	ldrb	r2, [r2, #0]
200017aa:	781b      	ldrb	r3, [r3, #0]
200017ac:	4313      	orrs	r3, r2
200017ae:	b2da      	uxtb	r2, r3
200017b0:	230f      	movs	r3, #15
200017b2:	18fb      	adds	r3, r7, r3
200017b4:	2104      	movs	r1, #4
200017b6:	430a      	orrs	r2, r1
200017b8:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
200017ba:	4a04      	ldr	r2, [pc, #16]	; (200017cc <ascii_ctrl_bit_set+0x40>)
200017bc:	230f      	movs	r3, #15
200017be:	18fb      	adds	r3, r7, r3
200017c0:	781b      	ldrb	r3, [r3, #0]
200017c2:	7013      	strb	r3, [r2, #0]
}
200017c4:	46c0      	nop			; (mov r8, r8)
200017c6:	46bd      	mov	sp, r7
200017c8:	b004      	add	sp, #16
200017ca:	bd80      	pop	{r7, pc}
200017cc:	40021014 	andmi	r1, r2, r4, lsl r0

200017d0 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
200017d0:	b580      	push	{r7, lr}
200017d2:	b084      	sub	sp, #16
200017d4:	af00      	add	r7, sp, #0
200017d6:	0002      	movs	r2, r0
200017d8:	1dfb      	adds	r3, r7, #7
200017da:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och nollstÃ¤ll de bitar som Ã¤r 1 i x
	unsigned char c;
	c = *portOdrLow;
200017dc:	4a0f      	ldr	r2, [pc, #60]	; (2000181c <ascii_ctrl_bit_clear+0x4c>)
200017de:	230f      	movs	r3, #15
200017e0:	18fb      	adds	r3, r7, r3
200017e2:	7812      	ldrb	r2, [r2, #0]
200017e4:	701a      	strb	r2, [r3, #0]
	c = (B_SELECT | c & ~x);
200017e6:	1dfb      	adds	r3, r7, #7
200017e8:	781b      	ldrb	r3, [r3, #0]
200017ea:	b25b      	sxtb	r3, r3
200017ec:	43db      	mvns	r3, r3
200017ee:	b25b      	sxtb	r3, r3
200017f0:	220f      	movs	r2, #15
200017f2:	18ba      	adds	r2, r7, r2
200017f4:	7812      	ldrb	r2, [r2, #0]
200017f6:	b252      	sxtb	r2, r2
200017f8:	4013      	ands	r3, r2
200017fa:	b25b      	sxtb	r3, r3
200017fc:	2204      	movs	r2, #4
200017fe:	4313      	orrs	r3, r2
20001800:	b25a      	sxtb	r2, r3
20001802:	230f      	movs	r3, #15
20001804:	18fb      	adds	r3, r7, r3
20001806:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20001808:	4a04      	ldr	r2, [pc, #16]	; (2000181c <ascii_ctrl_bit_clear+0x4c>)
2000180a:	230f      	movs	r3, #15
2000180c:	18fb      	adds	r3, r7, r3
2000180e:	781b      	ldrb	r3, [r3, #0]
20001810:	7013      	strb	r3, [r2, #0]
}
20001812:	46c0      	nop			; (mov r8, r8)
20001814:	46bd      	mov	sp, r7
20001816:	b004      	add	sp, #16
20001818:	bd80      	pop	{r7, pc}
2000181a:	46c0      	nop			; (mov r8, r8)
2000181c:	40021014 	andmi	r1, r2, r4, lsl r0

20001820 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20001820:	b580      	push	{r7, lr}
20001822:	b082      	sub	sp, #8
20001824:	af00      	add	r7, sp, #0
20001826:	0002      	movs	r2, r0
20001828:	1dfb      	adds	r3, r7, #7
2000182a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
2000182c:	2001      	movs	r0, #1
2000182e:	f7ff ffcf 	bl	200017d0 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20001832:	2002      	movs	r0, #2
20001834:	f7ff ffcc 	bl	200017d0 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20001838:	1dfb      	adds	r3, r7, #7
2000183a:	781b      	ldrb	r3, [r3, #0]
2000183c:	0018      	movs	r0, r3
2000183e:	f000 f86d 	bl	2000191c <ascii_write_controller>
}
20001842:	46c0      	nop			; (mov r8, r8)
20001844:	46bd      	mov	sp, r7
20001846:	b002      	add	sp, #8
20001848:	bd80      	pop	{r7, pc}

2000184a <ascii_write_data>:

void ascii_write_data(unsigned char data){
2000184a:	b580      	push	{r7, lr}
2000184c:	b082      	sub	sp, #8
2000184e:	af00      	add	r7, sp, #0
20001850:	0002      	movs	r2, r0
20001852:	1dfb      	adds	r3, r7, #7
20001854:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20001856:	2001      	movs	r0, #1
20001858:	f7ff ff98 	bl	2000178c <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
2000185c:	2002      	movs	r0, #2
2000185e:	f7ff ffb7 	bl	200017d0 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20001862:	1dfb      	adds	r3, r7, #7
20001864:	781b      	ldrb	r3, [r3, #0]
20001866:	0018      	movs	r0, r3
20001868:	f000 f858 	bl	2000191c <ascii_write_controller>
}
2000186c:	46c0      	nop			; (mov r8, r8)
2000186e:	46bd      	mov	sp, r7
20001870:	b002      	add	sp, #8
20001872:	bd80      	pop	{r7, pc}

20001874 <ascii_read_status>:

unsigned char ascii_read_status(void){
20001874:	b590      	push	{r4, r7, lr}
20001876:	b083      	sub	sp, #12
20001878:	af00      	add	r7, sp, #0
	//sÃƒÂ¤tt Port E bit15-8 som ingÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
2000187a:	4b11      	ldr	r3, [pc, #68]	; (200018c0 <ascii_read_status+0x4c>)
2000187c:	4a10      	ldr	r2, [pc, #64]	; (200018c0 <ascii_read_status+0x4c>)
2000187e:	6812      	ldr	r2, [r2, #0]
20001880:	0412      	lsls	r2, r2, #16
20001882:	0c12      	lsrs	r2, r2, #16
20001884:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20001886:	2001      	movs	r0, #1
20001888:	f7ff ffa2 	bl	200017d0 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
2000188c:	2002      	movs	r0, #2
2000188e:	f7ff ff7d 	bl	2000178c <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20001892:	1dfc      	adds	r4, r7, #7
20001894:	f000 f85a 	bl	2000194c <ascii_read_controller>
20001898:	0003      	movs	r3, r0
2000189a:	7023      	strb	r3, [r4, #0]
	//sÃƒÂ¤tt Port E bit15-8 som utgÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
2000189c:	4b08      	ldr	r3, [pc, #32]	; (200018c0 <ascii_read_status+0x4c>)
2000189e:	4a08      	ldr	r2, [pc, #32]	; (200018c0 <ascii_read_status+0x4c>)
200018a0:	6812      	ldr	r2, [r2, #0]
200018a2:	0412      	lsls	r2, r2, #16
200018a4:	0c12      	lsrs	r2, r2, #16
200018a6:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
200018a8:	4b05      	ldr	r3, [pc, #20]	; (200018c0 <ascii_read_status+0x4c>)
200018aa:	4a05      	ldr	r2, [pc, #20]	; (200018c0 <ascii_read_status+0x4c>)
200018ac:	6812      	ldr	r2, [r2, #0]
200018ae:	4905      	ldr	r1, [pc, #20]	; (200018c4 <ascii_read_status+0x50>)
200018b0:	430a      	orrs	r2, r1
200018b2:	601a      	str	r2, [r3, #0]
	return rv;
200018b4:	1dfb      	adds	r3, r7, #7
200018b6:	781b      	ldrb	r3, [r3, #0]
}
200018b8:	0018      	movs	r0, r3
200018ba:	46bd      	mov	sp, r7
200018bc:	b003      	add	sp, #12
200018be:	bd90      	pop	{r4, r7, pc}
200018c0:	40021000 	andmi	r1, r2, r0
200018c4:	55550000 	ldrbpl	r0, [r5, #-0]

200018c8 <ascii_read_data>:

unsigned char ascii_read_data(void){
200018c8:	b590      	push	{r4, r7, lr}
200018ca:	b083      	sub	sp, #12
200018cc:	af00      	add	r7, sp, #0
	//sÃƒÂ¤tt Port E bit15-8 som ingÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
200018ce:	4b11      	ldr	r3, [pc, #68]	; (20001914 <ascii_read_data+0x4c>)
200018d0:	4a10      	ldr	r2, [pc, #64]	; (20001914 <ascii_read_data+0x4c>)
200018d2:	6812      	ldr	r2, [r2, #0]
200018d4:	0412      	lsls	r2, r2, #16
200018d6:	0c12      	lsrs	r2, r2, #16
200018d8:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
200018da:	2001      	movs	r0, #1
200018dc:	f7ff ff56 	bl	2000178c <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
200018e0:	2002      	movs	r0, #2
200018e2:	f7ff ff53 	bl	2000178c <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
200018e6:	1dfc      	adds	r4, r7, #7
200018e8:	f000 f830 	bl	2000194c <ascii_read_controller>
200018ec:	0003      	movs	r3, r0
200018ee:	7023      	strb	r3, [r4, #0]
	//sÃƒÂ¤tt Port E bit15-8 som utgÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
200018f0:	4b08      	ldr	r3, [pc, #32]	; (20001914 <ascii_read_data+0x4c>)
200018f2:	4a08      	ldr	r2, [pc, #32]	; (20001914 <ascii_read_data+0x4c>)
200018f4:	6812      	ldr	r2, [r2, #0]
200018f6:	0412      	lsls	r2, r2, #16
200018f8:	0c12      	lsrs	r2, r2, #16
200018fa:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
200018fc:	4b05      	ldr	r3, [pc, #20]	; (20001914 <ascii_read_data+0x4c>)
200018fe:	4a05      	ldr	r2, [pc, #20]	; (20001914 <ascii_read_data+0x4c>)
20001900:	6812      	ldr	r2, [r2, #0]
20001902:	4905      	ldr	r1, [pc, #20]	; (20001918 <ascii_read_data+0x50>)
20001904:	430a      	orrs	r2, r1
20001906:	601a      	str	r2, [r3, #0]
	return rv;
20001908:	1dfb      	adds	r3, r7, #7
2000190a:	781b      	ldrb	r3, [r3, #0]
}
2000190c:	0018      	movs	r0, r3
2000190e:	46bd      	mov	sp, r7
20001910:	b003      	add	sp, #12
20001912:	bd90      	pop	{r4, r7, pc}
20001914:	40021000 	andmi	r1, r2, r0
20001918:	55550000 	ldrbpl	r0, [r5, #-0]

2000191c <ascii_write_controller>:

void ascii_write_controller(unsigned char c){
2000191c:	b580      	push	{r7, lr}
2000191e:	b082      	sub	sp, #8
20001920:	af00      	add	r7, sp, #0
20001922:	0002      	movs	r2, r0
20001924:	1dfb      	adds	r3, r7, #7
20001926:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
20001928:	2040      	movs	r0, #64	; 0x40
2000192a:	f7ff ff2f 	bl	2000178c <ascii_ctrl_bit_set>
	*portOdrHigh = c;
2000192e:	4a06      	ldr	r2, [pc, #24]	; (20001948 <ascii_write_controller+0x2c>)
20001930:	1dfb      	adds	r3, r7, #7
20001932:	781b      	ldrb	r3, [r3, #0]
20001934:	7013      	strb	r3, [r2, #0]
	delay_250ns();
20001936:	f7fe ffaf 	bl	20000898 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
2000193a:	2040      	movs	r0, #64	; 0x40
2000193c:	f7ff ff48 	bl	200017d0 <ascii_ctrl_bit_clear>
}
20001940:	46c0      	nop			; (mov r8, r8)
20001942:	46bd      	mov	sp, r7
20001944:	b002      	add	sp, #8
20001946:	bd80      	pop	{r7, pc}
20001948:	40021015 	andmi	r1, r2, r5, lsl r0

2000194c <ascii_read_controller>:

unsigned char ascii_read_controller(void){
2000194c:	b580      	push	{r7, lr}
2000194e:	b082      	sub	sp, #8
20001950:	af00      	add	r7, sp, #0
	unsigned char c;
	ascii_ctrl_bit_set(B_E);
20001952:	2040      	movs	r0, #64	; 0x40
20001954:	f7ff ff1a 	bl	2000178c <ascii_ctrl_bit_set>
	delay_250ns();
20001958:	f7fe ff9e 	bl	20000898 <delay_250ns>
	delay_250ns();
2000195c:	f7fe ff9c 	bl	20000898 <delay_250ns>
	c = *portIdrHigh;
20001960:	4a06      	ldr	r2, [pc, #24]	; (2000197c <ascii_read_controller+0x30>)
20001962:	1dfb      	adds	r3, r7, #7
20001964:	7812      	ldrb	r2, [r2, #0]
20001966:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20001968:	2040      	movs	r0, #64	; 0x40
2000196a:	f7ff ff31 	bl	200017d0 <ascii_ctrl_bit_clear>
	return c;
2000196e:	1dfb      	adds	r3, r7, #7
20001970:	781b      	ldrb	r3, [r3, #0]
}
20001972:	0018      	movs	r0, r3
20001974:	46bd      	mov	sp, r7
20001976:	b002      	add	sp, #8
20001978:	bd80      	pop	{r7, pc}
2000197a:	46c0      	nop			; (mov r8, r8)
2000197c:	40021011 	andmi	r1, r2, r1, lsl r0

20001980 <ascii_write_char>:

void ascii_write_char(unsigned char c){
20001980:	b580      	push	{r7, lr}
20001982:	b082      	sub	sp, #8
20001984:	af00      	add	r7, sp, #0
20001986:	0002      	movs	r2, r0
20001988:	1dfb      	adds	r3, r7, #7
2000198a:	701a      	strb	r2, [r3, #0]
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
2000198c:	46c0      	nop			; (mov r8, r8)
2000198e:	f7ff ff71 	bl	20001874 <ascii_read_status>
20001992:	0003      	movs	r3, r0
20001994:	001a      	movs	r2, r3
20001996:	2380      	movs	r3, #128	; 0x80
20001998:	4013      	ands	r3, r2
2000199a:	2b80      	cmp	r3, #128	; 0x80
2000199c:	d0f7      	beq.n	2000198e <ascii_write_char+0xe>
		delay_micro(8); //latenstid
2000199e:	2008      	movs	r0, #8
200019a0:	f7fe ffbe 	bl	20000920 <delay_micro>
		ascii_write_data(c);
200019a4:	1dfb      	adds	r3, r7, #7
200019a6:	781b      	ldrb	r3, [r3, #0]
200019a8:	0018      	movs	r0, r3
200019aa:	f7ff ff4e 	bl	2000184a <ascii_write_data>
		delay_micro(50); //istÃƒÂ¤llet fÃƒÂ¶r 43us
200019ae:	2032      	movs	r0, #50	; 0x32
200019b0:	f7fe ffb6 	bl	20000920 <delay_micro>
}
200019b4:	46c0      	nop			; (mov r8, r8)
200019b6:	46bd      	mov	sp, r7
200019b8:	b002      	add	sp, #8
200019ba:	bd80      	pop	{r7, pc}

200019bc <ascii_goToXY>:

void ascii_goToXY(unsigned char row, unsigned char column){
200019bc:	b580      	push	{r7, lr}
200019be:	b084      	sub	sp, #16
200019c0:	af00      	add	r7, sp, #0
200019c2:	0002      	movs	r2, r0
200019c4:	1dfb      	adds	r3, r7, #7
200019c6:	701a      	strb	r2, [r3, #0]
200019c8:	1dbb      	adds	r3, r7, #6
200019ca:	1c0a      	adds	r2, r1, #0
200019cc:	701a      	strb	r2, [r3, #0]
	unsigned char address = row-1;
200019ce:	230f      	movs	r3, #15
200019d0:	18fb      	adds	r3, r7, r3
200019d2:	1dfa      	adds	r2, r7, #7
200019d4:	7812      	ldrb	r2, [r2, #0]
200019d6:	3a01      	subs	r2, #1
200019d8:	701a      	strb	r2, [r3, #0]
	if(column == 2){
200019da:	1dbb      	adds	r3, r7, #6
200019dc:	781b      	ldrb	r3, [r3, #0]
200019de:	2b02      	cmp	r3, #2
200019e0:	d106      	bne.n	200019f0 <ascii_goToXY+0x34>
		address += 0x40;
200019e2:	230f      	movs	r3, #15
200019e4:	18fb      	adds	r3, r7, r3
200019e6:	220f      	movs	r2, #15
200019e8:	18ba      	adds	r2, r7, r2
200019ea:	7812      	ldrb	r2, [r2, #0]
200019ec:	3240      	adds	r2, #64	; 0x40
200019ee:	701a      	strb	r2, [r3, #0]
	}
	ascii_write_cmd(0x80 | address);
200019f0:	230f      	movs	r3, #15
200019f2:	18fb      	adds	r3, r7, r3
200019f4:	781b      	ldrb	r3, [r3, #0]
200019f6:	2280      	movs	r2, #128	; 0x80
200019f8:	4252      	negs	r2, r2
200019fa:	4313      	orrs	r3, r2
200019fc:	b2db      	uxtb	r3, r3
200019fe:	0018      	movs	r0, r3
20001a00:	f7ff ff0e 	bl	20001820 <ascii_write_cmd>
}
20001a04:	46c0      	nop			; (mov r8, r8)
20001a06:	46bd      	mov	sp, r7
20001a08:	b004      	add	sp, #16
20001a0a:	bd80      	pop	{r7, pc}

20001a0c <ascii_init>:

void ascii_init(void){
20001a0c:	b580      	push	{r7, lr}
20001a0e:	af00      	add	r7, sp, #0
	//initiera displayen:
		while((ascii_read_status() & 0x80) == 0x80){} //VÃ¤nta tills displayed Ã¤r redo
20001a10:	46c0      	nop			; (mov r8, r8)
20001a12:	f7ff ff2f 	bl	20001874 <ascii_read_status>
20001a16:	0003      	movs	r3, r0
20001a18:	001a      	movs	r2, r3
20001a1a:	2380      	movs	r3, #128	; 0x80
20001a1c:	4013      	ands	r3, r2
20001a1e:	2b80      	cmp	r3, #128	; 0x80
20001a20:	d0f7      	beq.n	20001a12 <ascii_init+0x6>
		delay_micro(20); //latenstid 
20001a22:	2014      	movs	r0, #20
20001a24:	f7fe ff7c 	bl	20000920 <delay_micro>
		ascii_write_cmd(0b00111000); //Function set (39us), 000011NFXX, N = antal rader = 2, F = -->0=5x8<--, 1=5x11
20001a28:	2038      	movs	r0, #56	; 0x38
20001a2a:	f7ff fef9 	bl	20001820 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20001a2e:	2064      	movs	r0, #100	; 0x64
20001a30:	f7fe ff76 	bl	20000920 <delay_micro>
		
	// clear display
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20001a34:	46c0      	nop			; (mov r8, r8)
20001a36:	f7ff ff1d 	bl	20001874 <ascii_read_status>
20001a3a:	0003      	movs	r3, r0
20001a3c:	001a      	movs	r2, r3
20001a3e:	2380      	movs	r3, #128	; 0x80
20001a40:	4013      	ands	r3, r2
20001a42:	2b80      	cmp	r3, #128	; 0x80
20001a44:	d0f7      	beq.n	20001a36 <ascii_init+0x2a>
		delay_micro(20); //latenstid
20001a46:	2014      	movs	r0, #20
20001a48:	f7fe ff6a 	bl	20000920 <delay_micro>
		ascii_write_cmd(0b00000001); 
20001a4c:	2001      	movs	r0, #1
20001a4e:	f7ff fee7 	bl	20001820 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20001a52:	2064      	movs	r0, #100	; 0x64
20001a54:	f7fe ff64 	bl	20000920 <delay_micro>

	//display control:
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20001a58:	46c0      	nop			; (mov r8, r8)
20001a5a:	f7ff ff0b 	bl	20001874 <ascii_read_status>
20001a5e:	0003      	movs	r3, r0
20001a60:	001a      	movs	r2, r3
20001a62:	2380      	movs	r3, #128	; 0x80
20001a64:	4013      	ands	r3, r2
20001a66:	2b80      	cmp	r3, #128	; 0x80
20001a68:	d0f7      	beq.n	20001a5a <ascii_init+0x4e>
		delay_micro(20); //latenstid
20001a6a:	2014      	movs	r0, #20
20001a6c:	f7fe ff58 	bl	20000920 <delay_micro>
		ascii_write_cmd(0b00001111); //000001 + XXX. X:ena = 0:av / 1:pÃƒÂ¥ -  SkÃƒÂ¤rm/MarkÃƒÂ¶r/BlinkaMarkÃƒÂ¶ren
20001a70:	200f      	movs	r0, #15
20001a72:	f7ff fed5 	bl	20001820 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20001a76:	2064      	movs	r0, #100	; 0x64
20001a78:	f7fe ff52 	bl	20000920 <delay_micro>
		
	// entry mode set
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20001a7c:	46c0      	nop			; (mov r8, r8)
20001a7e:	f7ff fef9 	bl	20001874 <ascii_read_status>
20001a82:	0003      	movs	r3, r0
20001a84:	001a      	movs	r2, r3
20001a86:	2380      	movs	r3, #128	; 0x80
20001a88:	4013      	ands	r3, r2
20001a8a:	2b80      	cmp	r3, #128	; 0x80
20001a8c:	d0f7      	beq.n	20001a7e <ascii_init+0x72>
		delay_micro(20); //latenstid
20001a8e:	2014      	movs	r0, #20
20001a90:	f7fe ff46 	bl	20000920 <delay_micro>
		ascii_write_cmd(0b00000110); //00000001 + XY. X=0: markÃƒÂ¶ren vÃƒÂ¤nst. || X=1: marÃƒÂ¶kren hÃƒÂ¶g. - Y=0: skift av || Y=1: skift pÃƒÂ¥
20001a94:	2006      	movs	r0, #6
20001a96:	f7ff fec3 	bl	20001820 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20001a9a:	2064      	movs	r0, #100	; 0x64
20001a9c:	f7fe ff40 	bl	20000920 <delay_micro>
		
		
}
20001aa0:	46c0      	nop			; (mov r8, r8)
20001aa2:	46bd      	mov	sp, r7
20001aa4:	bd80      	pop	{r7, pc}

20001aa6 <init_application>:

void init_application(void){
20001aa6:	b580      	push	{r7, lr}
20001aa8:	af00      	add	r7, sp, #0
	#ifdef USBDM
		*((unsigned long *) 0x40023830) = 0x18; //startar klockor pÃ¥ port D och E
		//__asm volatile ("LDR R0, =0x08000209\n BLX R0 \n"); //initiera PLL
	#endif
	//"initierar Port E med anvÃƒÂ¤ndning med LCD-modulen, dvs. sÃƒÂ¥vÃƒÂ¤l port E0-7 som E8-15 sÃƒÂ¤tts till utgÃƒÂ¥ngar
	* portModer = 0x55555555;
20001aaa:	4b03      	ldr	r3, [pc, #12]	; (20001ab8 <init_application+0x12>)
20001aac:	4a03      	ldr	r2, [pc, #12]	; (20001abc <init_application+0x16>)
20001aae:	601a      	str	r2, [r3, #0]
}
20001ab0:	46c0      	nop			; (mov r8, r8)
20001ab2:	46bd      	mov	sp, r7
20001ab4:	bd80      	pop	{r7, pc}
20001ab6:	46c0      	nop			; (mov r8, r8)
20001ab8:	40021000 	andmi	r1, r2, r0
20001abc:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20001ac0 <set_up_ascii>:

void set_up_ascii( void ) {
20001ac0:	b580      	push	{r7, lr}
20001ac2:	af00      	add	r7, sp, #0
	init_application();
20001ac4:	f7ff ffef 	bl	20001aa6 <init_application>
	ascii_init();
20001ac8:	f7ff ffa0 	bl	20001a0c <ascii_init>
}
20001acc:	46c0      	nop			; (mov r8, r8)
20001ace:	46bd      	mov	sp, r7
20001ad0:	bd80      	pop	{r7, pc}

20001ad2 <clear_ascii>:

void clear_ascii( void ) {
20001ad2:	b590      	push	{r4, r7, lr}
20001ad4:	b089      	sub	sp, #36	; 0x24
20001ad6:	af00      	add	r7, sp, #0
	char *s;
	char clear[] = "                    ";
20001ad8:	1d3b      	adds	r3, r7, #4
20001ada:	4a17      	ldr	r2, [pc, #92]	; (20001b38 <clear_ascii+0x66>)
20001adc:	ca13      	ldmia	r2!, {r0, r1, r4}
20001ade:	c313      	stmia	r3!, {r0, r1, r4}
20001ae0:	ca03      	ldmia	r2!, {r0, r1}
20001ae2:	c303      	stmia	r3!, {r0, r1}
20001ae4:	7812      	ldrb	r2, [r2, #0]
20001ae6:	701a      	strb	r2, [r3, #0]
	
	s = clear;
20001ae8:	1d3b      	adds	r3, r7, #4
20001aea:	61fb      	str	r3, [r7, #28]
	ascii_goToXY(1,1);
20001aec:	2101      	movs	r1, #1
20001aee:	2001      	movs	r0, #1
20001af0:	f7ff ff64 	bl	200019bc <ascii_goToXY>
	while(*s){
20001af4:	e006      	b.n	20001b04 <clear_ascii+0x32>
		ascii_write_char(*s++);
20001af6:	69fb      	ldr	r3, [r7, #28]
20001af8:	1c5a      	adds	r2, r3, #1
20001afa:	61fa      	str	r2, [r7, #28]
20001afc:	781b      	ldrb	r3, [r3, #0]
20001afe:	0018      	movs	r0, r3
20001b00:	f7ff ff3e 	bl	20001980 <ascii_write_char>
	while(*s){
20001b04:	69fb      	ldr	r3, [r7, #28]
20001b06:	781b      	ldrb	r3, [r3, #0]
20001b08:	2b00      	cmp	r3, #0
20001b0a:	d1f4      	bne.n	20001af6 <clear_ascii+0x24>
	}
	s = clear;
20001b0c:	1d3b      	adds	r3, r7, #4
20001b0e:	61fb      	str	r3, [r7, #28]
	ascii_goToXY(1,2);
20001b10:	2102      	movs	r1, #2
20001b12:	2001      	movs	r0, #1
20001b14:	f7ff ff52 	bl	200019bc <ascii_goToXY>
	while(*s){
20001b18:	e006      	b.n	20001b28 <clear_ascii+0x56>
		ascii_write_char(*s++);
20001b1a:	69fb      	ldr	r3, [r7, #28]
20001b1c:	1c5a      	adds	r2, r3, #1
20001b1e:	61fa      	str	r2, [r7, #28]
20001b20:	781b      	ldrb	r3, [r3, #0]
20001b22:	0018      	movs	r0, r3
20001b24:	f7ff ff2c 	bl	20001980 <ascii_write_char>
	while(*s){
20001b28:	69fb      	ldr	r3, [r7, #28]
20001b2a:	781b      	ldrb	r3, [r3, #0]
20001b2c:	2b00      	cmp	r3, #0
20001b2e:	d1f4      	bne.n	20001b1a <clear_ascii+0x48>
	}
}
20001b30:	46c0      	nop			; (mov r8, r8)
20001b32:	46bd      	mov	sp, r7
20001b34:	b009      	add	sp, #36	; 0x24
20001b36:	bd90      	pop	{r4, r7, pc}
20001b38:	200054a0 	andcs	r5, r0, r0, lsr #9

20001b3c <ascii_write>:

void ascii_write(char *row1, char *row2) {
20001b3c:	b580      	push	{r7, lr}
20001b3e:	b082      	sub	sp, #8
20001b40:	af00      	add	r7, sp, #0
20001b42:	6078      	str	r0, [r7, #4]
20001b44:	6039      	str	r1, [r7, #0]
	clear_ascii();
20001b46:	f7ff ffc4 	bl	20001ad2 <clear_ascii>
	
	ascii_goToXY(1,1);
20001b4a:	2101      	movs	r1, #1
20001b4c:	2001      	movs	r0, #1
20001b4e:	f7ff ff35 	bl	200019bc <ascii_goToXY>
	while(*row1){
20001b52:	e006      	b.n	20001b62 <ascii_write+0x26>
		ascii_write_char(*row1++);
20001b54:	687b      	ldr	r3, [r7, #4]
20001b56:	1c5a      	adds	r2, r3, #1
20001b58:	607a      	str	r2, [r7, #4]
20001b5a:	781b      	ldrb	r3, [r3, #0]
20001b5c:	0018      	movs	r0, r3
20001b5e:	f7ff ff0f 	bl	20001980 <ascii_write_char>
	while(*row1){
20001b62:	687b      	ldr	r3, [r7, #4]
20001b64:	781b      	ldrb	r3, [r3, #0]
20001b66:	2b00      	cmp	r3, #0
20001b68:	d1f4      	bne.n	20001b54 <ascii_write+0x18>
	}	
	ascii_goToXY(1,2);
20001b6a:	2102      	movs	r1, #2
20001b6c:	2001      	movs	r0, #1
20001b6e:	f7ff ff25 	bl	200019bc <ascii_goToXY>
	while(*row2){
20001b72:	e006      	b.n	20001b82 <ascii_write+0x46>
		ascii_write_char(*row2++);
20001b74:	683b      	ldr	r3, [r7, #0]
20001b76:	1c5a      	adds	r2, r3, #1
20001b78:	603a      	str	r2, [r7, #0]
20001b7a:	781b      	ldrb	r3, [r3, #0]
20001b7c:	0018      	movs	r0, r3
20001b7e:	f7ff feff 	bl	20001980 <ascii_write_char>
	while(*row2){
20001b82:	683b      	ldr	r3, [r7, #0]
20001b84:	781b      	ldrb	r3, [r3, #0]
20001b86:	2b00      	cmp	r3, #0
20001b88:	d1f4      	bne.n	20001b74 <ascii_write+0x38>
	}
	
	ascii_goToXY(21,2);
20001b8a:	2102      	movs	r1, #2
20001b8c:	2015      	movs	r0, #21
20001b8e:	f7ff ff15 	bl	200019bc <ascii_goToXY>
}
20001b92:	46c0      	nop			; (mov r8, r8)
20001b94:	46bd      	mov	sp, r7
20001b96:	b002      	add	sp, #8
20001b98:	bd80      	pop	{r7, pc}

20001b9a <ascii_write_part>:

void ascii_write_part(char *row1, char *row2, int limit1, int limit2) {
20001b9a:	b580      	push	{r7, lr}
20001b9c:	b086      	sub	sp, #24
20001b9e:	af00      	add	r7, sp, #0
20001ba0:	60f8      	str	r0, [r7, #12]
20001ba2:	60b9      	str	r1, [r7, #8]
20001ba4:	607a      	str	r2, [r7, #4]
20001ba6:	603b      	str	r3, [r7, #0]
	clear_ascii();
20001ba8:	f7ff ff93 	bl	20001ad2 <clear_ascii>
	
	ascii_goToXY(1,1);
20001bac:	2101      	movs	r1, #1
20001bae:	2001      	movs	r0, #1
20001bb0:	f7ff ff04 	bl	200019bc <ascii_goToXY>
	int i = 0;
20001bb4:	2300      	movs	r3, #0
20001bb6:	617b      	str	r3, [r7, #20]
	if(limit1 > 0) {
20001bb8:	687b      	ldr	r3, [r7, #4]
20001bba:	2b00      	cmp	r3, #0
20001bbc:	dd11      	ble.n	20001be2 <ascii_write_part+0x48>
		while(*row1 && (i++ < limit1)){
20001bbe:	e006      	b.n	20001bce <ascii_write_part+0x34>
			ascii_write_char(*row1++);
20001bc0:	68fb      	ldr	r3, [r7, #12]
20001bc2:	1c5a      	adds	r2, r3, #1
20001bc4:	60fa      	str	r2, [r7, #12]
20001bc6:	781b      	ldrb	r3, [r3, #0]
20001bc8:	0018      	movs	r0, r3
20001bca:	f7ff fed9 	bl	20001980 <ascii_write_char>
		while(*row1 && (i++ < limit1)){
20001bce:	68fb      	ldr	r3, [r7, #12]
20001bd0:	781b      	ldrb	r3, [r3, #0]
20001bd2:	2b00      	cmp	r3, #0
20001bd4:	d005      	beq.n	20001be2 <ascii_write_part+0x48>
20001bd6:	697b      	ldr	r3, [r7, #20]
20001bd8:	1c5a      	adds	r2, r3, #1
20001bda:	617a      	str	r2, [r7, #20]
20001bdc:	687a      	ldr	r2, [r7, #4]
20001bde:	4293      	cmp	r3, r2
20001be0:	dbee      	blt.n	20001bc0 <ascii_write_part+0x26>
		}			
	}

	ascii_goToXY(1,2);
20001be2:	2102      	movs	r1, #2
20001be4:	2001      	movs	r0, #1
20001be6:	f7ff fee9 	bl	200019bc <ascii_goToXY>
	i = 0;
20001bea:	2300      	movs	r3, #0
20001bec:	617b      	str	r3, [r7, #20]
	if(limit2 > 0) {
20001bee:	683b      	ldr	r3, [r7, #0]
20001bf0:	2b00      	cmp	r3, #0
20001bf2:	dd11      	ble.n	20001c18 <ascii_write_part+0x7e>
		while(*row2 && (i++ < limit2)){
20001bf4:	e006      	b.n	20001c04 <ascii_write_part+0x6a>
			ascii_write_char(*row2++);
20001bf6:	68bb      	ldr	r3, [r7, #8]
20001bf8:	1c5a      	adds	r2, r3, #1
20001bfa:	60ba      	str	r2, [r7, #8]
20001bfc:	781b      	ldrb	r3, [r3, #0]
20001bfe:	0018      	movs	r0, r3
20001c00:	f7ff febe 	bl	20001980 <ascii_write_char>
		while(*row2 && (i++ < limit2)){
20001c04:	68bb      	ldr	r3, [r7, #8]
20001c06:	781b      	ldrb	r3, [r3, #0]
20001c08:	2b00      	cmp	r3, #0
20001c0a:	d005      	beq.n	20001c18 <ascii_write_part+0x7e>
20001c0c:	697b      	ldr	r3, [r7, #20]
20001c0e:	1c5a      	adds	r2, r3, #1
20001c10:	617a      	str	r2, [r7, #20]
20001c12:	683a      	ldr	r2, [r7, #0]
20001c14:	4293      	cmp	r3, r2
20001c16:	dbee      	blt.n	20001bf6 <ascii_write_part+0x5c>
		}
	}
	
	ascii_goToXY(21,2);
20001c18:	2102      	movs	r1, #2
20001c1a:	2015      	movs	r0, #21
20001c1c:	f7ff fece 	bl	200019bc <ascii_goToXY>
}
20001c20:	46c0      	nop			; (mov r8, r8)
20001c22:	46bd      	mov	sp, r7
20001c24:	b006      	add	sp, #24
20001c26:	bd80      	pop	{r7, pc}

20001c28 <ascii_test>:



void ascii_test(void) {
20001c28:	b590      	push	{r4, r7, lr}
20001c2a:	b08b      	sub	sp, #44	; 0x2c
20001c2c:	af00      	add	r7, sp, #0
	char *s;
	char test1[] = "Alfanumerisk";
20001c2e:	2314      	movs	r3, #20
20001c30:	18fb      	adds	r3, r7, r3
20001c32:	4a1c      	ldr	r2, [pc, #112]	; (20001ca4 <ascii_test+0x7c>)
20001c34:	ca13      	ldmia	r2!, {r0, r1, r4}
20001c36:	c313      	stmia	r3!, {r0, r1, r4}
20001c38:	7812      	ldrb	r2, [r2, #0]
20001c3a:	701a      	strb	r2, [r3, #0]
	char test2[] = "hardåäöare suger";
20001c3c:	003b      	movs	r3, r7
20001c3e:	4a1a      	ldr	r2, [pc, #104]	; (20001ca8 <ascii_test+0x80>)
20001c40:	ca13      	ldmia	r2!, {r0, r1, r4}
20001c42:	c313      	stmia	r3!, {r0, r1, r4}
20001c44:	ca03      	ldmia	r2!, {r0, r1}
20001c46:	c303      	stmia	r3!, {r0, r1}
	
	init_application();
20001c48:	f7ff ff2d 	bl	20001aa6 <init_application>
	ascii_init();
20001c4c:	f7ff fede 	bl	20001a0c <ascii_init>
	ascii_goToXY(1,1);
20001c50:	2101      	movs	r1, #1
20001c52:	2001      	movs	r0, #1
20001c54:	f7ff feb2 	bl	200019bc <ascii_goToXY>
	s = test1;
20001c58:	2314      	movs	r3, #20
20001c5a:	18fb      	adds	r3, r7, r3
20001c5c:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
20001c5e:	e006      	b.n	20001c6e <ascii_test+0x46>
		ascii_write_char(*s++);
20001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001c62:	1c5a      	adds	r2, r3, #1
20001c64:	627a      	str	r2, [r7, #36]	; 0x24
20001c66:	781b      	ldrb	r3, [r3, #0]
20001c68:	0018      	movs	r0, r3
20001c6a:	f7ff fe89 	bl	20001980 <ascii_write_char>
	while(*s){
20001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001c70:	781b      	ldrb	r3, [r3, #0]
20001c72:	2b00      	cmp	r3, #0
20001c74:	d1f4      	bne.n	20001c60 <ascii_test+0x38>
	}
	ascii_goToXY(1,2);
20001c76:	2102      	movs	r1, #2
20001c78:	2001      	movs	r0, #1
20001c7a:	f7ff fe9f 	bl	200019bc <ascii_goToXY>
	s = test2;
20001c7e:	003b      	movs	r3, r7
20001c80:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
20001c82:	e006      	b.n	20001c92 <ascii_test+0x6a>
		ascii_write_char(*s++);
20001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001c86:	1c5a      	adds	r2, r3, #1
20001c88:	627a      	str	r2, [r7, #36]	; 0x24
20001c8a:	781b      	ldrb	r3, [r3, #0]
20001c8c:	0018      	movs	r0, r3
20001c8e:	f7ff fe77 	bl	20001980 <ascii_write_char>
	while(*s){
20001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001c94:	781b      	ldrb	r3, [r3, #0]
20001c96:	2b00      	cmp	r3, #0
20001c98:	d1f4      	bne.n	20001c84 <ascii_test+0x5c>
	}
	return 0;
20001c9a:	46c0      	nop			; (mov r8, r8)
20001c9c:	46bd      	mov	sp, r7
20001c9e:	b00b      	add	sp, #44	; 0x2c
20001ca0:	bd90      	pop	{r4, r7, pc}
20001ca2:	46c0      	nop			; (mov r8, r8)
20001ca4:	200054b8 			; <UNDEFINED> instruction: 0x200054b8
20001ca8:	200054c8 	andcs	r5, r0, r8, asr #9

20001cac <display>:
#include "slow_text.h"
#include "ascii_display.h"

void display(SlowText *this, int length_of_row1) {
20001cac:	b580      	push	{r7, lr}
20001cae:	b084      	sub	sp, #16
20001cb0:	af00      	add	r7, sp, #0
20001cb2:	6078      	str	r0, [r7, #4]
20001cb4:	6039      	str	r1, [r7, #0]
	int limit1 = this->counter / this->speed;
20001cb6:	687b      	ldr	r3, [r7, #4]
20001cb8:	689a      	ldr	r2, [r3, #8]
20001cba:	687b      	ldr	r3, [r7, #4]
20001cbc:	68db      	ldr	r3, [r3, #12]
20001cbe:	0019      	movs	r1, r3
20001cc0:	0010      	movs	r0, r2
20001cc2:	f000 f83d 	bl	20001d40 <__divsi3>
20001cc6:	0003      	movs	r3, r0
20001cc8:	60fb      	str	r3, [r7, #12]
	int limit2 = this->counter / this->speed - length_of_row1;
20001cca:	687b      	ldr	r3, [r7, #4]
20001ccc:	689a      	ldr	r2, [r3, #8]
20001cce:	687b      	ldr	r3, [r7, #4]
20001cd0:	68db      	ldr	r3, [r3, #12]
20001cd2:	0019      	movs	r1, r3
20001cd4:	0010      	movs	r0, r2
20001cd6:	f000 f833 	bl	20001d40 <__divsi3>
20001cda:	0003      	movs	r3, r0
20001cdc:	001a      	movs	r2, r3
20001cde:	683b      	ldr	r3, [r7, #0]
20001ce0:	1ad3      	subs	r3, r2, r3
20001ce2:	60bb      	str	r3, [r7, #8]
	ascii_write_part(this->row1, this->row2, limit1, limit2);
20001ce4:	687b      	ldr	r3, [r7, #4]
20001ce6:	6818      	ldr	r0, [r3, #0]
20001ce8:	687b      	ldr	r3, [r7, #4]
20001cea:	6859      	ldr	r1, [r3, #4]
20001cec:	68bb      	ldr	r3, [r7, #8]
20001cee:	68fa      	ldr	r2, [r7, #12]
20001cf0:	f7ff ff53 	bl	20001b9a <ascii_write_part>
	
	this->counter++;
20001cf4:	687b      	ldr	r3, [r7, #4]
20001cf6:	689b      	ldr	r3, [r3, #8]
20001cf8:	1c5a      	adds	r2, r3, #1
20001cfa:	687b      	ldr	r3, [r7, #4]
20001cfc:	609a      	str	r2, [r3, #8]
}
20001cfe:	46c0      	nop			; (mov r8, r8)
20001d00:	46bd      	mov	sp, r7
20001d02:	b004      	add	sp, #16
20001d04:	bd80      	pop	{r7, pc}

20001d06 <init_slow_text>:

void init_slow_text(SlowText *obj, char *row1, char *row2, int speed) {
20001d06:	b580      	push	{r7, lr}
20001d08:	b084      	sub	sp, #16
20001d0a:	af00      	add	r7, sp, #0
20001d0c:	60f8      	str	r0, [r7, #12]
20001d0e:	60b9      	str	r1, [r7, #8]
20001d10:	607a      	str	r2, [r7, #4]
20001d12:	603b      	str	r3, [r7, #0]
	obj->row1 = row1;
20001d14:	68fb      	ldr	r3, [r7, #12]
20001d16:	68ba      	ldr	r2, [r7, #8]
20001d18:	601a      	str	r2, [r3, #0]
	obj->row2 = row2;
20001d1a:	68fb      	ldr	r3, [r7, #12]
20001d1c:	687a      	ldr	r2, [r7, #4]
20001d1e:	605a      	str	r2, [r3, #4]
	obj->speed = speed;
20001d20:	68fb      	ldr	r3, [r7, #12]
20001d22:	683a      	ldr	r2, [r7, #0]
20001d24:	60da      	str	r2, [r3, #12]
	obj->counter = 0;
20001d26:	68fb      	ldr	r3, [r7, #12]
20001d28:	2200      	movs	r2, #0
20001d2a:	609a      	str	r2, [r3, #8]
	obj->display = display;
20001d2c:	68fb      	ldr	r3, [r7, #12]
20001d2e:	4a03      	ldr	r2, [pc, #12]	; (20001d3c <init_slow_text+0x36>)
20001d30:	611a      	str	r2, [r3, #16]
20001d32:	46c0      	nop			; (mov r8, r8)
20001d34:	46bd      	mov	sp, r7
20001d36:	b004      	add	sp, #16
20001d38:	bd80      	pop	{r7, pc}
20001d3a:	46c0      	nop			; (mov r8, r8)
20001d3c:	20001cad 	andcs	r1, r0, sp, lsr #25

20001d40 <__divsi3>:
20001d40:	4603      	mov	r3, r0
20001d42:	430b      	orrs	r3, r1
20001d44:	d47f      	bmi.n	20001e46 <__divsi3+0x106>
20001d46:	2200      	movs	r2, #0
20001d48:	0843      	lsrs	r3, r0, #1
20001d4a:	428b      	cmp	r3, r1
20001d4c:	d374      	bcc.n	20001e38 <__divsi3+0xf8>
20001d4e:	0903      	lsrs	r3, r0, #4
20001d50:	428b      	cmp	r3, r1
20001d52:	d35f      	bcc.n	20001e14 <__divsi3+0xd4>
20001d54:	0a03      	lsrs	r3, r0, #8
20001d56:	428b      	cmp	r3, r1
20001d58:	d344      	bcc.n	20001de4 <__divsi3+0xa4>
20001d5a:	0b03      	lsrs	r3, r0, #12
20001d5c:	428b      	cmp	r3, r1
20001d5e:	d328      	bcc.n	20001db2 <__divsi3+0x72>
20001d60:	0c03      	lsrs	r3, r0, #16
20001d62:	428b      	cmp	r3, r1
20001d64:	d30d      	bcc.n	20001d82 <__divsi3+0x42>
20001d66:	22ff      	movs	r2, #255	; 0xff
20001d68:	0209      	lsls	r1, r1, #8
20001d6a:	ba12      	rev	r2, r2
20001d6c:	0c03      	lsrs	r3, r0, #16
20001d6e:	428b      	cmp	r3, r1
20001d70:	d302      	bcc.n	20001d78 <__divsi3+0x38>
20001d72:	1212      	asrs	r2, r2, #8
20001d74:	0209      	lsls	r1, r1, #8
20001d76:	d065      	beq.n	20001e44 <__divsi3+0x104>
20001d78:	0b03      	lsrs	r3, r0, #12
20001d7a:	428b      	cmp	r3, r1
20001d7c:	d319      	bcc.n	20001db2 <__divsi3+0x72>
20001d7e:	e000      	b.n	20001d82 <__divsi3+0x42>
20001d80:	0a09      	lsrs	r1, r1, #8
20001d82:	0bc3      	lsrs	r3, r0, #15
20001d84:	428b      	cmp	r3, r1
20001d86:	d301      	bcc.n	20001d8c <__divsi3+0x4c>
20001d88:	03cb      	lsls	r3, r1, #15
20001d8a:	1ac0      	subs	r0, r0, r3
20001d8c:	4152      	adcs	r2, r2
20001d8e:	0b83      	lsrs	r3, r0, #14
20001d90:	428b      	cmp	r3, r1
20001d92:	d301      	bcc.n	20001d98 <__divsi3+0x58>
20001d94:	038b      	lsls	r3, r1, #14
20001d96:	1ac0      	subs	r0, r0, r3
20001d98:	4152      	adcs	r2, r2
20001d9a:	0b43      	lsrs	r3, r0, #13
20001d9c:	428b      	cmp	r3, r1
20001d9e:	d301      	bcc.n	20001da4 <__divsi3+0x64>
20001da0:	034b      	lsls	r3, r1, #13
20001da2:	1ac0      	subs	r0, r0, r3
20001da4:	4152      	adcs	r2, r2
20001da6:	0b03      	lsrs	r3, r0, #12
20001da8:	428b      	cmp	r3, r1
20001daa:	d301      	bcc.n	20001db0 <__divsi3+0x70>
20001dac:	030b      	lsls	r3, r1, #12
20001dae:	1ac0      	subs	r0, r0, r3
20001db0:	4152      	adcs	r2, r2
20001db2:	0ac3      	lsrs	r3, r0, #11
20001db4:	428b      	cmp	r3, r1
20001db6:	d301      	bcc.n	20001dbc <__divsi3+0x7c>
20001db8:	02cb      	lsls	r3, r1, #11
20001dba:	1ac0      	subs	r0, r0, r3
20001dbc:	4152      	adcs	r2, r2
20001dbe:	0a83      	lsrs	r3, r0, #10
20001dc0:	428b      	cmp	r3, r1
20001dc2:	d301      	bcc.n	20001dc8 <__divsi3+0x88>
20001dc4:	028b      	lsls	r3, r1, #10
20001dc6:	1ac0      	subs	r0, r0, r3
20001dc8:	4152      	adcs	r2, r2
20001dca:	0a43      	lsrs	r3, r0, #9
20001dcc:	428b      	cmp	r3, r1
20001dce:	d301      	bcc.n	20001dd4 <__divsi3+0x94>
20001dd0:	024b      	lsls	r3, r1, #9
20001dd2:	1ac0      	subs	r0, r0, r3
20001dd4:	4152      	adcs	r2, r2
20001dd6:	0a03      	lsrs	r3, r0, #8
20001dd8:	428b      	cmp	r3, r1
20001dda:	d301      	bcc.n	20001de0 <__divsi3+0xa0>
20001ddc:	020b      	lsls	r3, r1, #8
20001dde:	1ac0      	subs	r0, r0, r3
20001de0:	4152      	adcs	r2, r2
20001de2:	d2cd      	bcs.n	20001d80 <__divsi3+0x40>
20001de4:	09c3      	lsrs	r3, r0, #7
20001de6:	428b      	cmp	r3, r1
20001de8:	d301      	bcc.n	20001dee <__divsi3+0xae>
20001dea:	01cb      	lsls	r3, r1, #7
20001dec:	1ac0      	subs	r0, r0, r3
20001dee:	4152      	adcs	r2, r2
20001df0:	0983      	lsrs	r3, r0, #6
20001df2:	428b      	cmp	r3, r1
20001df4:	d301      	bcc.n	20001dfa <__divsi3+0xba>
20001df6:	018b      	lsls	r3, r1, #6
20001df8:	1ac0      	subs	r0, r0, r3
20001dfa:	4152      	adcs	r2, r2
20001dfc:	0943      	lsrs	r3, r0, #5
20001dfe:	428b      	cmp	r3, r1
20001e00:	d301      	bcc.n	20001e06 <__divsi3+0xc6>
20001e02:	014b      	lsls	r3, r1, #5
20001e04:	1ac0      	subs	r0, r0, r3
20001e06:	4152      	adcs	r2, r2
20001e08:	0903      	lsrs	r3, r0, #4
20001e0a:	428b      	cmp	r3, r1
20001e0c:	d301      	bcc.n	20001e12 <__divsi3+0xd2>
20001e0e:	010b      	lsls	r3, r1, #4
20001e10:	1ac0      	subs	r0, r0, r3
20001e12:	4152      	adcs	r2, r2
20001e14:	08c3      	lsrs	r3, r0, #3
20001e16:	428b      	cmp	r3, r1
20001e18:	d301      	bcc.n	20001e1e <__divsi3+0xde>
20001e1a:	00cb      	lsls	r3, r1, #3
20001e1c:	1ac0      	subs	r0, r0, r3
20001e1e:	4152      	adcs	r2, r2
20001e20:	0883      	lsrs	r3, r0, #2
20001e22:	428b      	cmp	r3, r1
20001e24:	d301      	bcc.n	20001e2a <__divsi3+0xea>
20001e26:	008b      	lsls	r3, r1, #2
20001e28:	1ac0      	subs	r0, r0, r3
20001e2a:	4152      	adcs	r2, r2
20001e2c:	0843      	lsrs	r3, r0, #1
20001e2e:	428b      	cmp	r3, r1
20001e30:	d301      	bcc.n	20001e36 <__divsi3+0xf6>
20001e32:	004b      	lsls	r3, r1, #1
20001e34:	1ac0      	subs	r0, r0, r3
20001e36:	4152      	adcs	r2, r2
20001e38:	1a41      	subs	r1, r0, r1
20001e3a:	d200      	bcs.n	20001e3e <__divsi3+0xfe>
20001e3c:	4601      	mov	r1, r0
20001e3e:	4152      	adcs	r2, r2
20001e40:	4610      	mov	r0, r2
20001e42:	4770      	bx	lr
20001e44:	e05d      	b.n	20001f02 <__divsi3+0x1c2>
20001e46:	0fca      	lsrs	r2, r1, #31
20001e48:	d000      	beq.n	20001e4c <__divsi3+0x10c>
20001e4a:	4249      	negs	r1, r1
20001e4c:	1003      	asrs	r3, r0, #32
20001e4e:	d300      	bcc.n	20001e52 <__divsi3+0x112>
20001e50:	4240      	negs	r0, r0
20001e52:	4053      	eors	r3, r2
20001e54:	2200      	movs	r2, #0
20001e56:	469c      	mov	ip, r3
20001e58:	0903      	lsrs	r3, r0, #4
20001e5a:	428b      	cmp	r3, r1
20001e5c:	d32d      	bcc.n	20001eba <__divsi3+0x17a>
20001e5e:	0a03      	lsrs	r3, r0, #8
20001e60:	428b      	cmp	r3, r1
20001e62:	d312      	bcc.n	20001e8a <__divsi3+0x14a>
20001e64:	22fc      	movs	r2, #252	; 0xfc
20001e66:	0189      	lsls	r1, r1, #6
20001e68:	ba12      	rev	r2, r2
20001e6a:	0a03      	lsrs	r3, r0, #8
20001e6c:	428b      	cmp	r3, r1
20001e6e:	d30c      	bcc.n	20001e8a <__divsi3+0x14a>
20001e70:	0189      	lsls	r1, r1, #6
20001e72:	1192      	asrs	r2, r2, #6
20001e74:	428b      	cmp	r3, r1
20001e76:	d308      	bcc.n	20001e8a <__divsi3+0x14a>
20001e78:	0189      	lsls	r1, r1, #6
20001e7a:	1192      	asrs	r2, r2, #6
20001e7c:	428b      	cmp	r3, r1
20001e7e:	d304      	bcc.n	20001e8a <__divsi3+0x14a>
20001e80:	0189      	lsls	r1, r1, #6
20001e82:	d03a      	beq.n	20001efa <__divsi3+0x1ba>
20001e84:	1192      	asrs	r2, r2, #6
20001e86:	e000      	b.n	20001e8a <__divsi3+0x14a>
20001e88:	0989      	lsrs	r1, r1, #6
20001e8a:	09c3      	lsrs	r3, r0, #7
20001e8c:	428b      	cmp	r3, r1
20001e8e:	d301      	bcc.n	20001e94 <__divsi3+0x154>
20001e90:	01cb      	lsls	r3, r1, #7
20001e92:	1ac0      	subs	r0, r0, r3
20001e94:	4152      	adcs	r2, r2
20001e96:	0983      	lsrs	r3, r0, #6
20001e98:	428b      	cmp	r3, r1
20001e9a:	d301      	bcc.n	20001ea0 <__divsi3+0x160>
20001e9c:	018b      	lsls	r3, r1, #6
20001e9e:	1ac0      	subs	r0, r0, r3
20001ea0:	4152      	adcs	r2, r2
20001ea2:	0943      	lsrs	r3, r0, #5
20001ea4:	428b      	cmp	r3, r1
20001ea6:	d301      	bcc.n	20001eac <__divsi3+0x16c>
20001ea8:	014b      	lsls	r3, r1, #5
20001eaa:	1ac0      	subs	r0, r0, r3
20001eac:	4152      	adcs	r2, r2
20001eae:	0903      	lsrs	r3, r0, #4
20001eb0:	428b      	cmp	r3, r1
20001eb2:	d301      	bcc.n	20001eb8 <__divsi3+0x178>
20001eb4:	010b      	lsls	r3, r1, #4
20001eb6:	1ac0      	subs	r0, r0, r3
20001eb8:	4152      	adcs	r2, r2
20001eba:	08c3      	lsrs	r3, r0, #3
20001ebc:	428b      	cmp	r3, r1
20001ebe:	d301      	bcc.n	20001ec4 <__divsi3+0x184>
20001ec0:	00cb      	lsls	r3, r1, #3
20001ec2:	1ac0      	subs	r0, r0, r3
20001ec4:	4152      	adcs	r2, r2
20001ec6:	0883      	lsrs	r3, r0, #2
20001ec8:	428b      	cmp	r3, r1
20001eca:	d301      	bcc.n	20001ed0 <__divsi3+0x190>
20001ecc:	008b      	lsls	r3, r1, #2
20001ece:	1ac0      	subs	r0, r0, r3
20001ed0:	4152      	adcs	r2, r2
20001ed2:	d2d9      	bcs.n	20001e88 <__divsi3+0x148>
20001ed4:	0843      	lsrs	r3, r0, #1
20001ed6:	428b      	cmp	r3, r1
20001ed8:	d301      	bcc.n	20001ede <__divsi3+0x19e>
20001eda:	004b      	lsls	r3, r1, #1
20001edc:	1ac0      	subs	r0, r0, r3
20001ede:	4152      	adcs	r2, r2
20001ee0:	1a41      	subs	r1, r0, r1
20001ee2:	d200      	bcs.n	20001ee6 <__divsi3+0x1a6>
20001ee4:	4601      	mov	r1, r0
20001ee6:	4663      	mov	r3, ip
20001ee8:	4152      	adcs	r2, r2
20001eea:	105b      	asrs	r3, r3, #1
20001eec:	4610      	mov	r0, r2
20001eee:	d301      	bcc.n	20001ef4 <__divsi3+0x1b4>
20001ef0:	4240      	negs	r0, r0
20001ef2:	2b00      	cmp	r3, #0
20001ef4:	d500      	bpl.n	20001ef8 <__divsi3+0x1b8>
20001ef6:	4249      	negs	r1, r1
20001ef8:	4770      	bx	lr
20001efa:	4663      	mov	r3, ip
20001efc:	105b      	asrs	r3, r3, #1
20001efe:	d300      	bcc.n	20001f02 <__divsi3+0x1c2>
20001f00:	4240      	negs	r0, r0
20001f02:	b501      	push	{r0, lr}
20001f04:	2000      	movs	r0, #0
20001f06:	f000 f805 	bl	20001f14 <__aeabi_idiv0>
20001f0a:	bd02      	pop	{r1, pc}

20001f0c <__aeabi_idivmod>:
20001f0c:	2900      	cmp	r1, #0
20001f0e:	d0f8      	beq.n	20001f02 <__divsi3+0x1c2>
20001f10:	e716      	b.n	20001d40 <__divsi3>
20001f12:	4770      	bx	lr

20001f14 <__aeabi_idiv0>:
20001f14:	4770      	bx	lr
20001f16:	46c0      	nop			; (mov r8, r8)

20001f18 <counter>:
20001f18:	00000000 	andeq	r0, r0, r0

20001f1c <nGameObjects>:
20001f1c:	00000000 	andeq	r0, r0, r0

20001f20 <lastRightValue.4092>:
20001f20:	00000000 	andeq	r0, r0, r0

20001f24 <speed.4094>:
20001f24:	00000000 	andeq	r0, r0, r0

20001f28 <lastLeftValue.4093>:
20001f28:	00000000 	andeq	r0, r0, r0

20001f2c <monster>:
20001f2c:	00000000 	andeq	r0, r0, r0

20001f30 <tempCastleBlack>:
	...

20001f3c <tempTitleGray>:
	...

20001f48 <castleBlack>:
20001f48:	00000000 	andeq	r0, r0, r0

20001f4c <tempMonster>:
	...

20001f58 <tempTitleBlack>:
	...

20001f64 <bg>:
20001f64:	00000000 	andeq	r0, r0, r0

20001f68 <tempMonsterGray>:
	...

20001f74 <tempTitleLight>:
	...

20001f80 <castleLight>:
20001f80:	00000000 	andeq	r0, r0, r0

20001f84 <tempCastleLight>:
	...

20001f90 <tempMonsterLight>:
	...

20001f9c <titleGray>:
20001f9c:	00000000 	andeq	r0, r0, r0

20001fa0 <tempCastleGray>:
	...

20001fac <monsterLight>:
20001fac:	00000000 	andeq	r0, r0, r0

20001fb0 <titleLight>:
20001fb0:	00000000 	andeq	r0, r0, r0

20001fb4 <castleGray>:
20001fb4:	00000000 	andeq	r0, r0, r0

20001fb8 <monsterGray>:
20001fb8:	00000000 	andeq	r0, r0, r0

20001fbc <tempBg>:
	...

20001fc8 <titleBlack>:
20001fc8:	00000000 	andeq	r0, r0, r0

20001fcc <gameObjects>:
	...

2000215c <fire1Light>:
2000215c:	00000000 	andeq	r0, r0, r0

20002160 <tempFire3Light>:
	...

2000216c <fire3Gray>:
2000216c:	00000000 	andeq	r0, r0, r0

20002170 <tempFire4Gray>:
	...

2000217c <fire2Image>:
	...

20002188 <tempFire2Gray>:
	...

20002194 <tempFireBlack>:
	...

200021a0 <fire3Image>:
	...

200021ac <tempFire4Light>:
	...

200021b8 <fire1Image>:
	...

200021c4 <fire4Light>:
200021c4:	00000000 	andeq	r0, r0, r0

200021c8 <fireObj>:
	...

200021ec <fire5Image>:
	...

200021f8 <fireImages>:
	...

20002234 <tempFire5Gray>:
	...

20002240 <tempFire3Gray>:
	...

2000224c <fire4Image>:
	...

20002258 <fire4Gray>:
20002258:	00000000 	andeq	r0, r0, r0

2000225c <tempFire1Light>:
	...

20002268 <tempFire5Light>:
	...

20002274 <fire5Gray>:
20002274:	00000000 	andeq	r0, r0, r0

20002278 <fire2Light>:
20002278:	00000000 	andeq	r0, r0, r0

2000227c <fire5Light>:
2000227c:	00000000 	andeq	r0, r0, r0

20002280 <tempFire1Gray>:
	...

2000228c <fireBlack>:
2000228c:	00000000 	andeq	r0, r0, r0

20002290 <tempFire2Light>:
	...

2000229c <fire3Light>:
2000229c:	00000000 	andeq	r0, r0, r0

200022a0 <fire2Gray>:
200022a0:	00000000 	andeq	r0, r0, r0

200022a4 <fire1Gray>:
200022a4:	00000000 	andeq	r0, r0, r0

200022a8 <backBufferGray>:
	...

200026a8 <draw_buffer_black_gray>:
	...

20002aa8 <backBuffer>:
	...

20002ea8 <draw_buffer_black_light>:
	...

200032a8 <draw_buffer_black>:
	...

200036a8 <draw_buffer_black_gray_light>:
	...

20003aa8 <backBufferLight>:
	...

20003ea8 <monster_black_bits>:
	...
20003eb8:	0001c000 	andeq	ip, r1, r0
20003ebc:	00023000 	andeq	r3, r2, r0
20003ec0:	00021000 	andeq	r1, r2, r0
20003ec4:	00060800 	andeq	r0, r6, r0, lsl #16
20003ec8:	00040800 	andeq	r0, r4, r0, lsl #16
20003ecc:	00040800 	andeq	r0, r4, r0, lsl #16
20003ed0:	00092800 	andeq	r2, r9, r0, lsl #16
20003ed4:	00092800 	andeq	r2, r9, r0, lsl #16
20003ed8:	00100400 	andseq	r0, r0, r0, lsl #8
20003edc:	00100400 	andseq	r0, r0, r0, lsl #8
20003ee0:	00200200 	eoreq	r0, r0, r0, lsl #4
20003ee4:	00661b00 	rsbeq	r1, r6, r0, lsl #22
20003ee8:	0043b100 	subeq	fp, r3, r0, lsl #2
20003eec:	0080e080 	addeq	lr, r0, r0, lsl #1
20003ef0:	01800080 	orreq	r0, r0, r0, lsl #1
20003ef4:	01000040 	tsteq	r0, r0, asr #32
20003ef8:	02000040 	andeq	r0, r0, #64	; 0x40
20003efc:	02000060 	andeq	r0, r0, #96	; 0x60
20003f00:	02000020 	andeq	r0, r0, #32
20003f04:	03ff03e0 	mvnseq	r0, #224, 6	; 0x80000003
20003f08:	0001fc00 	andeq	pc, r1, r0, lsl #24
	...

20003f20 <monster_light_bits>:
	...
20003f34:	00010000 	andeq	r0, r1, r0
20003f38:	00018000 	andeq	r8, r1, r0
20003f3c:	0001f000 	andeq	pc, r1, r0
20003f40:	0001f000 	andeq	pc, r1, r0
20003f44:	00009000 	andeq	r9, r0, r0
20003f48:	00009000 	andeq	r9, r0, r0
20003f4c:	0000d000 	andeq	sp, r0, r0
20003f50:	0001f800 	andeq	pc, r1, r0, lsl #16
20003f54:	0003f800 	andeq	pc, r3, r0, lsl #16
20003f58:	0003fc00 	andeq	pc, r3, r0, lsl #24
20003f5c:	0001e400 	andeq	lr, r1, r0, lsl #8
20003f60:	00044c00 	andeq	r4, r4, r0, lsl #24
20003f64:	00060c00 	andeq	r0, r6, r0, lsl #24
20003f68:	0006ee00 	andeq	lr, r6, r0, lsl #28
20003f6c:	000ffe00 	andeq	pc, pc, r0, lsl #28
20003f70:	000f3f00 	andeq	r3, pc, r0, lsl #30
20003f74:	00000780 	andeq	r0, r0, r0, lsl #15
20003f78:	000003c0 	andeq	r0, r0, r0, asr #7
	...

20003f98 <monster_gray_bits>:
	...
20003fb8:	00020000 	andeq	r0, r2, r0
20003fbc:	00000000 	andeq	r0, r0, r0
20003fc0:	00040000 	andeq	r0, r4, r0
20003fc4:	00060000 	andeq	r0, r6, r0
20003fc8:	000e0000 	andeq	r0, lr, r0
20003fcc:	000c0000 	andeq	r0, ip, r0
20003fd0:	001c0000 	andseq	r0, ip, r0
20003fd4:	00180000 	andseq	r0, r8, r0
20003fd8:	00380000 	eorseq	r0, r8, r0
20003fdc:	00780000 	rsbseq	r0, r8, r0
20003fe0:	00780000 	rsbseq	r0, r8, r0
20003fe4:	00f00000 	rscseq	r0, r0, r0
20003fe8:	01f0c000 	mvnseq	ip, r0
20003fec:	01fff800 	mvnseq	pc, r0, lsl #16
20003ff0:	01fffc00 	mvnseq	pc, r0, lsl #24
20003ff4:	0000fc00 	andeq	pc, r0, r0, lsl #24
	...

20004010 <castle_black_bits>:
20004010:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004014:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004018:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000401c:	00000000 	andeq	r0, r0, r0
20004020:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004024:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004028:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000402c:	00000000 	andeq	r0, r0, r0
20004030:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004034:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004038:	00000001 	andeq	r0, r0, r1
2000403c:	00000000 	andeq	r0, r0, r0
20004040:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004044:	7fffffff 	svcvc	0x00ffffff
	...
20004050:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004054:	3fffffff 	svccc	0x00ffffff
	...
20004060:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004064:	1fffffff 	svcne	0x00ffffff
	...
20004070:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004074:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
	...
20004080:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004084:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
	...
20004090:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004094:	01ffffff 	ldrsheq	pc, [pc, #255]	; 2000419b <castle_black_bits+0x18b>	; <UNPREDICTABLE>
	...
200040a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200040a4:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
	...
200040b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200040b4:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
	...
200040c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200040c4:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
200040d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200040d4:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
200040e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200040e4:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
200040f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200040f4:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
20004100:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004104:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
20004110:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004114:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20004120:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004124:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20004130:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004134:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
20004140:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004144:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20004150:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004154:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20004160:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004164:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20004170:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004174:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
20004178:	04900000 	ldreq	r0, [r0], #0
2000417c:	00000000 	andeq	r0, r0, r0
20004180:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004184:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
20004188:	0b680000 	bleq	21a04190 <firstTime.4076+0x19fee80>
2000418c:	00000000 	andeq	r0, r0, r0
20004190:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004194:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20004198:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
2000419c:	00000000 	andeq	r0, r0, r0
200041a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200041a4:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
200041a8:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
200041ac:	00000092 	muleq	r0, r2, r0
200041b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200041b4:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
200041b8:	04100000 	ldreq	r0, [r0], #-0
200041bc:	0000016d 	andeq	r0, r0, sp, ror #2
200041c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200041c4:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
200041c8:	04101240 	ldreq	r1, [r0], #-576	; 0xfffffdc0
200041cc:	00000101 	andeq	r0, r0, r1, lsl #2
200041d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200041d4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200041d8:	04102da0 	ldreq	r2, [r0], #-3488	; 0xfffff260
200041dc:	00000101 	andeq	r0, r0, r1, lsl #2
200041e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200041e4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200041e8:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
200041ec:	00000101 	andeq	r0, r0, r1, lsl #2
200041f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200041f4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200041f8:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
200041fc:	00000101 	andeq	r0, r0, r1, lsl #2
20004200:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004204:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20004208:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
2000420c:	00000082 	andeq	r0, r0, r2, lsl #1
20004210:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004214:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20004218:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
2000421c:	00000092 	muleq	r0, r2, r0
20004220:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004224:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20004228:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
2000422c:	012400a2 	smulwbeq	r4, r2, r0
20004230:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004234:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20004238:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
2000423c:	02da00a2 	sbcseq	r0, sl, #162	; 0xa2
20004240:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004244:	00004fff 	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
20004248:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
2000424c:	020200a2 	andeq	r0, r2, #162	; 0xa2
20004250:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004254:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004258:	08081040 	stmdaeq	r8, {r6, ip}
2000425c:	0202009a 	andeq	r0, r2, #154	; 0x9a
20004260:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004264:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004268:	08082020 	stmdaeq	r8, {r5, sp}
2000426c:	01040082 	smlabbeq	r4, r2, r0, r0
20004270:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004274:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004278:	48082020 	stmdami	r8, {r5, sp}
2000427c:	01040102 	tsteq	r4, r2, lsl #2
20004280:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004284:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004288:	b0082020 	andlt	r2, r8, r0, lsr #32
2000428c:	01040101 	tsteq	r4, r1, lsl #2
20004290:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004294:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004298:	00082220 	andeq	r2, r8, r0, lsr #4
2000429c:	01040100 	mrseq	r0, (UNDEF: 20)
200042a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200042a4:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200042a8:	00882420 	addeq	r2, r8, r0, lsr #8
200042ac:	01040100 	mrseq	r0, (UNDEF: 20)
200042b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200042b4:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200042b8:	01082420 	tsteq	r8, r0, lsr #8
200042bc:	01045a00 	tsteq	r4, r0, lsl #20
200042c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200042c4:	0000007f 	andeq	r0, r0, pc, ror r0
200042c8:	01082420 	tsteq	r8, r0, lsr #8
200042cc:	0104a400 	tsteq	r4, r0, lsl #8
200042d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200042d4:	00000001 	andeq	r0, r0, r1
200042d8:	010b2320 	tsteq	fp, r0, lsr #6
200042dc:	01030001 	tsteq	r3, r1
200042e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200042e4:	00000000 	andeq	r0, r0, r0
200042e8:	00c4c020 	sbceq	ip, r4, r0, lsr #32
200042ec:	02000002 	andeq	r0, r0, #2
200042f0:	3fffffff 	svccc	0x00ffffff
200042f4:	00000000 	andeq	r0, r0, r0
200042f8:	00000020 	andeq	r0, r0, r0, lsr #32
200042fc:	02200002 	eoreq	r0, r0, #2
20004300:	3fffffff 	svccc	0x00ffffff
20004304:	00000000 	andeq	r0, r0, r0
20004308:	00000020 	andeq	r0, r0, r0, lsr #32
2000430c:	02400002 	subeq	r0, r0, #2
20004310:	1fffffff 	svcne	0x00ffffff
20004314:	00000000 	andeq	r0, r0, r0
20004318:	80000020 	andhi	r0, r0, r0, lsr #32
2000431c:	02400001 	subeq	r0, r0, #1
20004320:	1fffffff 	svcne	0x00ffffff
20004324:	00000000 	andeq	r0, r0, r0
20004328:	00000010 	andeq	r0, r0, r0, lsl r0
2000432c:	02400000 	subeq	r0, r0, #0
20004330:	0fffffff 	svceq	0x00ffffff
20004334:	00000000 	andeq	r0, r0, r0
20004338:	00000010 	andeq	r0, r0, r0, lsl r0
2000433c:	02300000 	eorseq	r0, r0, #0
20004340:	0fffffff 	svceq	0x00ffffff
20004344:	00000000 	andeq	r0, r0, r0
20004348:	00000010 	andeq	r0, r0, r0, lsl r0
2000434c:	02000000 	andeq	r0, r0, #0
20004350:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
20004354:	00000000 	andeq	r0, r0, r0
20004358:	00000010 	andeq	r0, r0, r0, lsl r0
2000435c:	04000000 	streq	r0, [r0], #-0
20004360:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
20004364:	00000000 	andeq	r0, r0, r0
20004368:	00000010 	andeq	r0, r0, r0, lsl r0
2000436c:	04000000 	streq	r0, [r0], #-0
20004370:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20004477 <castle_gray_bits+0x67>	; <UNPREDICTABLE>
20004374:	00000000 	andeq	r0, r0, r0
20004378:	00000008 	andeq	r0, r0, r8
2000437c:	04000000 	streq	r0, [r0], #-0
20004380:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20004487 <castle_gray_bits+0x77>	; <UNPREDICTABLE>
20004384:	00000000 	andeq	r0, r0, r0
20004388:	00000008 	andeq	r0, r0, r8
2000438c:	04000000 	streq	r0, [r0], #-0
20004390:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20004394:	00000000 	andeq	r0, r0, r0
20004398:	00000008 	andeq	r0, r0, r8
2000439c:	060001c0 	streq	r0, [r0], -r0, asr #3
200043a0:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
200043a4:	00000000 	andeq	r0, r0, r0
200043a8:	00000008 	andeq	r0, r0, r8
200043ac:	04000220 	streq	r0, [r0], #-544	; 0xfffffde0
200043b0:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
200043b4:	00000000 	andeq	r0, r0, r0
200043b8:	00000008 	andeq	r0, r0, r8
200043bc:	04100400 	ldreq	r0, [r0], #-1024	; 0xfffffc00
200043c0:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
200043c4:	00000000 	andeq	r0, r0, r0
200043c8:	00000008 	andeq	r0, r0, r8
200043cc:	04a00400 	strteq	r0, [r0], #1024	; 0x400
200043d0:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
200043d4:	00000000 	andeq	r0, r0, r0
200043d8:	00000008 	andeq	r0, r0, r8
200043dc:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
200043e0:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
200043e4:	00000000 	andeq	r0, r0, r0
200043e8:	00000008 	andeq	r0, r0, r8
200043ec:	07400400 	strbeq	r0, [r0, -r0, lsl #8]
200043f0:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
200043f4:	00000000 	andeq	r0, r0, r0
200043f8:	00000008 	andeq	r0, r0, r8
200043fc:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
20004400:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20004404:	00000000 	andeq	r0, r0, r0
20004408:	00000008 	andeq	r0, r0, r8
2000440c:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00

20004410 <castle_gray_bits>:
	...
20004418:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
2000441c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
20004428:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
2000442c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
20004438:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
2000443c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004440:	00000000 	andeq	r0, r0, r0
20004444:	80000000 	andhi	r0, r0, r0
20004448:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000444c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004450:	00000000 	andeq	r0, r0, r0
20004454:	c0000000 	andgt	r0, r0, r0
20004458:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000445c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004460:	00000000 	andeq	r0, r0, r0
20004464:	e0000000 	and	r0, r0, r0
20004468:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000446c:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
20004470:	00000000 	andeq	r0, r0, r0
20004474:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20004478:	f3ffcfff 			; <UNDEFINED> instruction: 0xf3ffcfff
2000447c:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
20004480:	00000000 	andeq	r0, r0, r0
20004484:	fc000000 	stc2	0, cr0, [r0], {-0}
20004488:	f1ff8fff 			; <UNDEFINED> instruction: 0xf1ff8fff
2000448c:	fff9ff3f 			; <UNDEFINED> instruction: 0xfff9ff3f
20004490:	00000000 	andeq	r0, r0, r0
20004494:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20004498:	f0ff8fef 			; <UNDEFINED> instruction: 0xf0ff8fef
2000449c:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
200044a0:	00000000 	andeq	r0, r0, r0
200044a4:	ff000000 			; <UNDEFINED> instruction: 0xff000000
200044a8:	e0ff87ef 	rscs	r8, pc, pc, ror #15
200044ac:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
200044b0:	00000000 	andeq	r0, r0, r0
200044b4:	ff800000 			; <UNDEFINED> instruction: 0xff800000
200044b8:	c07e07e7 	rsbsgt	r0, lr, r7, ror #15
200044bc:	ffe0fc1f 			; <UNDEFINED> instruction: 0xffe0fc1f
200044c0:	00000000 	andeq	r0, r0, r0
200044c4:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
200044c8:	001c07e7 	andseq	r0, ip, r7, ror #15
200044cc:	ffe0380e 	vcmla.f32	d19, d0, d14[0], #170
200044d0:	00000000 	andeq	r0, r0, r0
200044d4:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
200044d8:	000003e3 	andeq	r0, r0, r3, ror #7
200044dc:	f7c00000 			; <UNDEFINED> instruction: 0xf7c00000
200044e0:	00000000 	andeq	r0, r0, r0
200044e4:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
200044e8:	000001c3 	andeq	r0, r0, r3, asr #3
200044ec:	e7800000 	str	r0, [r0, r0]
200044f0:	00000000 	andeq	r0, r0, r0
200044f4:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
200044f8:	00000003 	andeq	r0, r0, r3
200044fc:	c3800000 	orrgt	r0, r0, #0
20004500:	00000000 	andeq	r0, r0, r0
20004504:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20004508:	00000001 	andeq	r0, r0, r1
2000450c:	c0000000 	andgt	r0, r0, r0
20004510:	00000000 	andeq	r0, r0, r0
20004514:	9ff00000 	svcls	0x00f00000	; IMB
20004518:	00000001 	andeq	r0, r0, r1
2000451c:	80000000 	andhi	r0, r0, r0
20004520:	00000000 	andeq	r0, r0, r0
20004524:	8ff00000 	svchi	0x00f00000	; IMB
20004528:	00000000 	andeq	r0, r0, r0
2000452c:	80000000 	andhi	r0, r0, r0
20004530:	00000000 	andeq	r0, r0, r0
20004534:	8ff80000 	svchi	0x00f80000
	...
20004544:	0ffc0000 	svceq	0x00fc0000
	...
20004554:	0ffc0000 	svceq	0x00fc0000
	...
20004564:	0ffc0000 	svceq	0x00fc0000
	...
20004574:	0ffc0000 	svceq	0x00fc0000
	...
20004584:	0ffc0000 	svceq	0x00fc0000
	...
20004594:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
200045a4:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
200045b4:	07fe0000 	ldrbeq	r0, [lr, r0]!
200045b8:	03800000 	orreq	r0, r0, #0
	...
200045c4:	03fe0000 	mvnseq	r0, #0
200045c8:	02000000 	andeq	r0, r0, #0
	...
200045d4:	03ff0000 	mvnseq	r0, #0
200045d8:	02000000 	andeq	r0, r0, #0
	...
200045e4:	03ff0000 	mvnseq	r0, #0
200045e8:	02000000 	andeq	r0, r0, #0
	...
200045f4:	03ff0000 	mvnseq	r0, #0
200045f8:	02000000 	andeq	r0, r0, #0
	...
20004604:	03ff0000 	mvnseq	r0, #0
20004608:	02800c00 	addeq	r0, r0, #0, 24
2000460c:	00000060 	andeq	r0, r0, r0, rrx
20004610:	00000000 	andeq	r0, r0, r0
20004614:	03ff0000 	mvnseq	r0, #0
20004618:	03000800 	movweq	r0, #2048	; 0x800
2000461c:	00000040 	andeq	r0, r0, r0, asr #32
20004620:	00000000 	andeq	r0, r0, r0
20004624:	03ff0000 	mvnseq	r0, #0
20004628:	03000800 	movweq	r0, #2048	; 0x800
2000462c:	00000040 	andeq	r0, r0, r0, asr #32
20004630:	00000000 	andeq	r0, r0, r0
20004634:	03ff8000 	mvnseq	r8, #0
20004638:	03000a00 	movweq	r0, #2560	; 0xa00
2000463c:	00000040 	andeq	r0, r0, r0, asr #32
20004640:	00000000 	andeq	r0, r0, r0
20004644:	01ffb000 	mvnseq	fp, r0
20004648:	03000c00 	movweq	r0, #3072	; 0xc00
2000464c:	00000040 	andeq	r0, r0, r0, asr #32
20004650:	00000000 	andeq	r0, r0, r0
20004654:	01fff800 	mvnseq	pc, r0, lsl #16
20004658:	07800c00 	streq	r0, [r0, r0, lsl #24]
2000465c:	00000060 	andeq	r0, r0, r0, rrx
20004660:	00000000 	andeq	r0, r0, r0
20004664:	01fffc00 	mvnseq	pc, r0, lsl #24
20004668:	04001800 	streq	r1, [r0], #-2048	; 0xfffff800
2000466c:	00c00058 	sbceq	r0, r0, r8, asr r0
20004670:	00000000 	andeq	r0, r0, r0
20004674:	00fffc00 	rscseq	pc, pc, r0, lsl #24
20004678:	06001400 	streq	r1, [r0], -r0, lsl #8
2000467c:	00c000c0 	sbceq	r0, r0, r0, asr #1
20004680:	00000000 	andeq	r0, r0, r0
20004684:	007ffc00 	rsbseq	pc, pc, r0, lsl #24
20004688:	45001000 	strmi	r1, [r0, #-0]
2000468c:	008000a0 	addeq	r0, r0, r0, lsr #1
20004690:	00000000 	andeq	r0, r0, r0
20004694:	007ffe00 	rsbseq	pc, pc, r0, lsl #28
20004698:	80001000 	andhi	r1, r0, r0
2000469c:	008000c1 	addeq	r0, r0, r1, asr #1
200046a0:	00000000 	andeq	r0, r0, r0
200046a4:	003ffe00 	eorseq	pc, pc, r0, lsl #28
200046a8:	00001000 	andeq	r1, r0, r0
200046ac:	00a000f0 	strdeq	r0, [r0], r0	; <UNPREDICTABLE>
200046b0:	00000000 	andeq	r0, r0, r0
200046b4:	003fff00 	eorseq	pc, pc, r0, lsl #30
200046b8:	00001000 	andeq	r1, r0, r0
200046bc:	00c000e0 	sbceq	r0, r0, r0, ror #1
200046c0:	00000000 	andeq	r0, r0, r0
200046c4:	001fff80 	andseq	pc, pc, r0, lsl #31
200046c8:	02001800 	andeq	r1, r0, #0, 16
200046cc:	00c000c0 	sbceq	r0, r0, r0, asr #1
200046d0:	00000000 	andeq	r0, r0, r0
200046d4:	0019fffe 			; <UNDEFINED> instruction: 0x0019fffe
200046d8:	02001400 	andeq	r1, r0, #0, 8
200046dc:	00803000 	addeq	r3, r0, r0
200046e0:	00000000 	andeq	r0, r0, r0
200046e4:	0018ffff 			; <UNDEFINED> instruction: 0x0018ffff
200046e8:	05033f00 	streq	r3, [r3, #-3840]	; 0xfffff100
200046ec:	01000000 	mrseq	r0, (UNDEF: 0)
200046f0:	c0000000 	andgt	r0, r0, r0
200046f4:	0008ffff 	strdeq	pc, [r8], -pc	; <UNPREDICTABLE>
200046f8:	00c0e400 	sbceq	lr, r0, r0, lsl #8
200046fc:	01000004 	tsteq	r0, r4
20004700:	c0000000 	andgt	r0, r0, r0
20004704:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20004708:	00002000 	andeq	r2, r0, r0
2000470c:	01000008 	tsteq	r0, r8
20004710:	e0000000 	and	r0, r0, r0
20004714:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20004718:	00001000 	andeq	r1, r0, r0
2000471c:	01000006 	tsteq	r0, r6
20004720:	e0000000 	and	r0, r0, r0
20004724:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
20004728:	80000000 	andhi	r0, r0, r0
2000472c:	01800001 	orreq	r0, r0, r1
20004730:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20004734:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
20004738:	00400000 	subeq	r0, r0, r0
2000473c:	01400000 	mrseq	r0, (UNDEF: 64)
20004740:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20004744:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
20004748:	03800000 	orreq	r0, r0, #0
2000474c:	01300000 	teqeq	r0, r0
20004750:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20004754:	00001bff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
20004758:	10e00000 	rscne	r0, r0, r0
2000475c:	03000000 	movweq	r0, #0
20004760:	fc000000 	stc2	0, cr0, [r0], {-0}
20004764:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004768:	0f800000 	svceq	0x00800000
2000476c:	03900000 	orrseq	r0, r0, #0
20004770:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20004774:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004778:	00000000 	andeq	r0, r0, r0
2000477c:	03e00000 	mvneq	r0, #0
20004780:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20004784:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004788:	00000000 	andeq	r0, r0, r0
2000478c:	03f40000 	mvnseq	r0, #0
20004790:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20004794:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004798:	00002000 	andeq	r2, r0, r0
2000479c:	01f80000 	mvnseq	r0, r0
200047a0:	ff000000 			; <UNDEFINED> instruction: 0xff000000
200047a4:	0000007f 	andeq	r0, r0, pc, ror r0
200047a8:	0010c000 	andseq	ip, r0, r0
200047ac:	03f80000 	mvnseq	r0, #0
200047b0:	ff800000 			; <UNDEFINED> instruction: 0xff800000
200047b4:	0000003f 	andeq	r0, r0, pc, lsr r0
200047b8:	000f0000 	andeq	r0, pc, r0
200047bc:	03e000e0 	mvneq	r0, #224	; 0xe0
200047c0:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
200047c4:	0000001f 	andeq	r0, r0, pc, lsl r0
200047c8:	00026000 	andeq	r6, r2, r0
200047cc:	035001f0 	cmpeq	r0, #240, 2	; 0x3c
200047d0:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
200047d4:	0000001f 	andeq	r0, r0, pc, lsl r0
200047d8:	00118000 	andseq	r8, r1, r0
200047dc:	03ec01f0 	mvneq	r0, #240, 2	; 0x3c
200047e0:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
200047e4:	0000000f 	andeq	r0, r0, pc
200047e8:	200e0000 	andcs	r0, lr, r0
200047ec:	00a022f0 	strdeq	r2, [r0], r0	; <UNPREDICTABLE>
200047f0:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
200047f4:	00000007 	andeq	r0, r0, r7
200047f8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
200047fc:	03c0c170 	biceq	ip, r0, #112, 2
20004800:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
20004804:	00000003 	andeq	r0, r0, r3
20004808:	e4000000 	str	r0, [r0], #-0
2000480c:	03c270f3 	biceq	r7, r2, #243	; 0xf3

20004810 <castle_light_bits>:
	...
2000486c:	00000040 	andeq	r0, r0, r0, asr #32
	...
20004878:	0c003000 	stceq	0, cr3, [r0], {-0}
2000487c:	00000040 	andeq	r0, r0, r0, asr #32
	...
20004888:	0e007000 	cdpeq	0, 0, cr7, cr0, cr0, {0}
2000488c:	000600c0 	andeq	r0, r6, r0, asr #1
	...
20004898:	0f007010 	svceq	0x00007010
2000489c:	000601e0 	andeq	r0, r6, r0, ror #3
	...
200048a8:	1f007810 	svcne	0x00007810
200048ac:	000601e0 	andeq	r0, r6, r0, ror #3
	...
200048b8:	3f81f818 	svccc	0x0081f818
200048bc:	001f03e0 	andseq	r0, pc, r0, ror #7
	...
200048c8:	ffe3f818 			; <UNDEFINED> instruction: 0xffe3f818
200048cc:	001fc7f1 			; <UNDEFINED> instruction: 0x001fc7f1
	...
200048d8:	fffffc1c 			; <UNDEFINED> instruction: 0xfffffc1c
200048dc:	083fffff 	ldmdaeq	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
	...
200048e8:	fffffe3c 			; <UNDEFINED> instruction: 0xfffffe3c
200048ec:	187fffff 	ldmdane	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
	...
200048f8:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
200048fc:	3c7fffff 	ldclcc	15, cr15, [pc], #-1020	; 20004508 <castle_gray_bits+0xf8>
	...
20004908:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
2000490c:	3fffffff 	svccc	0x00ffffff
20004910:	00000000 	andeq	r0, r0, r0
20004914:	60000000 	andvs	r0, r0, r0
20004918:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
2000491c:	7fffffff 	svcvc	0x00ffffff
20004920:	00000000 	andeq	r0, r0, r0
20004924:	70000000 	andvc	r0, r0, r0
20004928:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000492c:	7fffffff 	svcvc	0x00ffffff
20004930:	00000000 	andeq	r0, r0, r0
20004934:	70000000 	andvc	r0, r0, r0
20004938:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000493c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004940:	00000000 	andeq	r0, r0, r0
20004944:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20004948:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000494c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004950:	00000000 	andeq	r0, r0, r0
20004954:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20004958:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000495c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004960:	00000000 	andeq	r0, r0, r0
20004964:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20004968:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000496c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004970:	00000000 	andeq	r0, r0, r0
20004974:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20004978:	fb6fffff 	blx	21c0497e <firstTime.4076+0x1bff66e>
2000497c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004980:	00000000 	andeq	r0, r0, r0
20004984:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20004988:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
2000498c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004990:	00000000 	andeq	r0, r0, r0
20004994:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20004998:	f407ffff 			; <UNDEFINED> instruction: 0xf407ffff
2000499c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200049a0:	00000000 	andeq	r0, r0, r0
200049a4:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200049a8:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
200049ac:	ffffff6d 			; <UNDEFINED> instruction: 0xffffff6d
200049b0:	00000000 	andeq	r0, r0, r0
200049b4:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200049b8:	f80fffff 			; <UNDEFINED> instruction: 0xf80fffff
200049bc:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200049c0:	00000000 	andeq	r0, r0, r0
200049c4:	fc000000 	stc2	0, cr0, [r0], {-0}
200049c8:	f80fedbf 			; <UNDEFINED> instruction: 0xf80fedbf
200049cc:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200049d0:	00000000 	andeq	r0, r0, r0
200049d4:	fc000000 	stc2	0, cr0, [r0], {-0}
200049d8:	f80fc01f 			; <UNDEFINED> instruction: 0xf80fc01f
200049dc:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
200049e0:	00000000 	andeq	r0, r0, r0
200049e4:	fc000000 	stc2	0, cr0, [r0], {-0}
200049e8:	f90fc81f 			; <UNDEFINED> instruction: 0xf90fc81f
200049ec:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
200049f0:	00000000 	andeq	r0, r0, r0
200049f4:	fc000000 	stc2	0, cr0, [r0], {-0}
200049f8:	f90fd41f 			; <UNDEFINED> instruction: 0xf90fd41f
200049fc:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20004a00:	00000000 	andeq	r0, r0, r0
20004a04:	fc000000 	stc2	0, cr0, [r0], {-0}
20004a08:	f90fe03f 			; <UNDEFINED> instruction: 0xf90fe03f
20004a0c:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
20004a10:	00000000 	andeq	r0, r0, r0
20004a14:	fc000000 	stc2	0, cr0, [r0], {-0}
20004a18:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
20004a1c:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
20004a20:	00000000 	andeq	r0, r0, r0
20004a24:	fc000000 	stc2	0, cr0, [r0], {-0}
20004a28:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
20004a2c:	fedbff19 	mrc2	15, 6, pc, cr11, cr9, {0}
20004a30:	00000000 	andeq	r0, r0, r0
20004a34:	fc000000 	stc2	0, cr0, [r0], {-0}
20004a38:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
20004a3c:	fd01ff11 	stc2	15, cr15, [r1, #-68]	; 0xffffffbc
20004a40:	00000000 	andeq	r0, r0, r0
20004a44:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20004a48:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
20004a4c:	fd01ff19 	stc2	15, cr15, [r1, #-100]	; 0xffffff9c
20004a50:	00000000 	andeq	r0, r0, r0
20004a54:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20004a58:	f007e03f 			; <UNDEFINED> instruction: 0xf007e03f
20004a5c:	fc01ff01 	stc2	15, cr15, [r1], {1}
20004a60:	00000000 	andeq	r0, r0, r0
20004a64:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20004a68:	f007c01f 			; <UNDEFINED> instruction: 0xf007c01f
20004a6c:	fe03ff01 	cdp2	15, 0, cr15, cr3, cr1, {0}
20004a70:	00000000 	andeq	r0, r0, r0
20004a74:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20004a78:	b007c01f 	andlt	ip, r7, pc, lsl r0
20004a7c:	fe03fe01 	cdp2	14, 0, cr15, cr3, cr1, {0}
20004a80:	00000000 	andeq	r0, r0, r0
20004a84:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20004a88:	0007c01f 	andeq	ip, r7, pc, lsl r0
20004a8c:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
20004a90:	00000000 	andeq	r0, r0, r0
20004a94:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20004a98:	0007c01f 	andeq	ip, r7, pc, lsl r0
20004a9c:	fe03fe10 	mcr2	14, 0, pc, cr3, cr0, {0}	; <UNPREDICTABLE>
20004aa0:	00000000 	andeq	r0, r0, r0
20004aa4:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20004aa8:	0007c21f 	andeq	ip, r7, pc, lsl r2
20004aac:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
20004ab0:	00000000 	andeq	r0, r0, r0
20004ab4:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20004ab8:	0087c31f 	addeq	ip, r7, pc, lsl r3
20004abc:	fe03a400 	cdp2	4, 0, cr10, cr3, cr0, {0}
20004ac0:	00000000 	andeq	r0, r0, r0
20004ac4:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20004ac8:	00c7c31f 	sbceq	ip, r7, pc, lsl r3
20004acc:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
20004ad0:	00000000 	andeq	r0, r0, r0
20004ad4:	ffe60000 			; <UNDEFINED> instruction: 0xffe60000
20004ad8:	00c4c01f 	sbceq	ip, r4, pc, lsl r0
20004adc:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20004ae0:	00000000 	andeq	r0, r0, r0
20004ae4:	ffe70000 			; <UNDEFINED> instruction: 0xffe70000
20004ae8:	8000001f 	andhi	r0, r0, pc, lsl r0
20004aec:	fc000001 	stc2	0, cr0, [r0], {1}
20004af0:	00000000 	andeq	r0, r0, r0
20004af4:	fff70000 			; <UNDEFINED> instruction: 0xfff70000
20004af8:	8000001f 	andhi	r0, r0, pc, lsl r0
20004afc:	fc000009 	stc2	0, cr0, [r0], {9}
20004b00:	00000000 	andeq	r0, r0, r0
20004b04:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20004b08:	8000001f 	andhi	r0, r0, pc, lsl r0
20004b0c:	fc200001 	stc2	0, cr0, [r0], #-4
20004b10:	00000000 	andeq	r0, r0, r0
20004b14:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20004b18:	0000001f 	andeq	r0, r0, pc, lsl r0
20004b1c:	fc300000 	ldc2	0, cr0, [r0], #-0
20004b20:	00000000 	andeq	r0, r0, r0
20004b24:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20004b28:	0000000f 	andeq	r0, r0, pc
20004b2c:	fc300000 	ldc2	0, cr0, [r0], #-0
20004b30:	00000000 	andeq	r0, r0, r0
20004b34:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20004b38:	0000000f 	andeq	r0, r0, pc
20004b3c:	fc000000 	stc2	0, cr0, [r0], {-0}
20004b40:	00000000 	andeq	r0, r0, r0
20004b44:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
20004b48:	1000000f 	andne	r0, r0, pc
20004b4c:	fc000000 	stc2	0, cr0, [r0], {-0}
20004b50:	00000000 	andeq	r0, r0, r0
20004b54:	ffffe400 			; <UNDEFINED> instruction: 0xffffe400
20004b58:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
20004b5c:	f8080000 			; <UNDEFINED> instruction: 0xf8080000
20004b60:	00000000 	andeq	r0, r0, r0
20004b64:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20004b68:	0000000f 	andeq	r0, r0, pc
20004b6c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20004b70:	00000000 	andeq	r0, r0, r0
20004b74:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20004b78:	00000007 	andeq	r0, r0, r7
20004b7c:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
20004b80:	00000000 	andeq	r0, r0, r0
20004b84:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20004b88:	00000007 	andeq	r0, r0, r7
20004b8c:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
20004b90:	00000000 	andeq	r0, r0, r0
20004b94:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20004b98:	00100007 	andseq	r0, r0, r7
20004b9c:	f8040000 			; <UNDEFINED> instruction: 0xf8040000
20004ba0:	00000000 	andeq	r0, r0, r0
20004ba4:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
20004ba8:	00080007 	andeq	r0, r8, r7
20004bac:	f80001c0 			; <UNDEFINED> instruction: 0xf80001c0
20004bb0:	00000000 	andeq	r0, r0, r0
20004bb4:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
20004bb8:	00000007 	andeq	r0, r0, r7
20004bbc:	f8080300 			; <UNDEFINED> instruction: 0xf8080300
20004bc0:	00000000 	andeq	r0, r0, r0
20004bc4:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
20004bc8:	00200007 	eoreq	r0, r0, r7
20004bcc:	f8080200 			; <UNDEFINED> instruction: 0xf8080200
20004bd0:	00000000 	andeq	r0, r0, r0
20004bd4:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
20004bd8:	00000007 	andeq	r0, r0, r7
20004bdc:	f8000200 			; <UNDEFINED> instruction: 0xf8000200
20004be0:	00000000 	andeq	r0, r0, r0
20004be4:	fffffff0 			; <UNDEFINED> instruction: 0xfffffff0
20004be8:	00000007 	andeq	r0, r0, r7
20004bec:	f8000100 			; <UNDEFINED> instruction: 0xf8000100
20004bf0:	00000000 	andeq	r0, r0, r0
20004bf4:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
20004bf8:	01000007 	tsteq	r0, r7
20004bfc:	f8100280 			; <UNDEFINED> instruction: 0xf8100280
20004c00:	00000000 	andeq	r0, r0, r0
20004c04:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20004c08:	02000007 	andeq	r0, r0, #7
20004c0c:	f8000300 			; <UNDEFINED> instruction: 0xf8000300

20004c10 <title_light_bits>:
	...
20004c2c:	00000400 	andeq	r0, r0, r0, lsl #8
20004c30:	30000000 	andcc	r0, r0, r0
20004c34:	f80f9e06 			; <UNDEFINED> instruction: 0xf80f9e06
20004c38:	06300000 	ldrteq	r0, [r0], -r0
20004c3c:	00cb8cba 	strheq	r8, [fp], #202	; 0xca
20004c40:	ba033000 	blt	200d0c48 <firstTime.4076+0xcb938>
20004c44:	0000eb4f 	andeq	lr, r0, pc, asr #22
20004c48:	439ef3f0 	orrsmi	pc, lr, #240, 6	; 0xc0000003
20004c4c:	f000003a 			; <UNDEFINED> instruction: 0xf000003a
20004c50:	5a478e9b 	bpl	211e86c4 <firstTime.4076+0x11e33b4>
20004c54:	9b300000 	blls	20c04c5c <firstTime.4076+0xbff94c>
20004c58:	019bcd36 	orrseq	ip, fp, r6, lsr sp
20004c5c:	66db3000 	ldrbvs	r3, [fp], r0
20004c60:	000319d9 	ldrdeq	r1, [r3], -r9
20004c64:	19667330 	stmdbne	r6!, {r4, r5, r8, r9, ip, sp, lr}^
20004c68:	30000310 	andcc	r0, r0, r0, lsl r3
20004c6c:	00000001 	andeq	r0, r0, r1
20004c70:	80000000 	andhi	r0, r0, r0
20004c74:	001d3e7b 	andseq	r3, sp, fp, ror lr
20004c78:	0ac00000 	beq	1f004c80 <startup-0xffb380>
20004c7c:	00000528 	andeq	r0, r0, r8, lsr #10
20004c80:	ec3a4000 	ldc	0, cr4, [sl], #-0
20004c84:	0000000d 	andeq	r0, r0, sp
20004c88:	05240bc0 	streq	r0, [r4, #-3008]!	; 0xfffff440
20004c8c:	00f00000 	rscseq	r0, r0, r0
20004c90:	001c0000 	andseq	r0, ip, r0
20004c94:	03ebb000 	mvneq	fp, #0
20004c98:	00000000 	andeq	r0, r0, r0
20004c9c:	0c032330 	stceq	3, cr2, [r3], {48}	; 0x30
20004ca0:	300123e4 	andcc	r2, r1, r4, ror #7
20004ca4:	940c1b2a 	strls	r1, [ip], #-2858	; 0xfffff4d6
20004ca8:	ea300120 	b	20c05130 <firstTime.4076+0xbffe20>
20004cac:	ec860c3d 	stc	12, cr0, [r6], {61}	; 0x3d
20004cb0:	06ea3001 	strbteq	r3, [sl], r1
20004cb4:	01e69648 	mvneq	r9, r8, asr #12
20004cb8:	4b9e6b30 	blmi	1e79f980 <startup-0x1860680>
20004cbc:	30012696 	mulcc	r1, r6, r6
20004cc0:	92bbb06b 	adcsls	fp, fp, #107	; 0x6b
20004cc4:	69f00126 	ldmibvs	r0!, {r1, r2, r5, r8}^
20004cc8:	2691b832 			; <UNDEFINED> instruction: 0x2691b832
20004ccc:	1e687001 	cdpne	0, 6, cr7, cr8, cr1, {0}
20004cd0:	010e9110 	tsteq	lr, r0, lsl r1
	...

20004ce4 <title_gray_bits>:
	...
20004cec:	40000000 	andmi	r0, r0, r0
20004cf0:	0f840000 	svceq	0x00840000
20004cf4:	00b0c3fe 	ldrshteq	ip, [r0], lr
20004cf8:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20004cfc:	001f8f1f 	andseq	r8, pc, pc, lsl pc	; <UNPREDICTABLE>
20004d00:	fffffbf8 			; <UNDEFINED> instruction: 0xfffffbf8
20004d04:	c8001fff 	stmdagt	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
20004d08:	07f061f9 			; <UNDEFINED> instruction: 0x07f061f9
20004d0c:	f1cc001f 			; <UNDEFINED> instruction: 0xf1cc001f
20004d10:	be347305 	cdplt	3, 3, cr7, cr4, cr5, {0}
20004d14:	05f0ce00 	ldrbeq	ip, [r0, #3584]!	; 0xe00
20004d18:	007e1430 	rsbseq	r1, lr, r0, lsr r4
20004d1c:	2041080f 	subcs	r0, r1, pc, lsl #16
20004d20:	0e003e01 	cdpeq	14, 0, cr3, cr0, cr1, {0}
20004d24:	01384060 	teqeq	r8, r0, rrx
20004d28:	600c001e 	andvs	r0, ip, lr, lsl r0
20004d2c:	1c4030c0 	mcrrne	0, 12, r3, r0, cr0
20004d30:	10208c00 	eorne	r8, r0, r0, lsl #24
20004d34:	0038c024 	eorseq	ip, r8, r4, lsr #32
20004d38:	0411088c 	ldreq	r0, [r1], #-2188	; 0xfffff774
20004d3c:	c800f8ce 	stmdagt	r0, {r1, r2, r3, r6, r7, fp, ip, sp, lr, pc}
20004d40:	ffe6990c 			; <UNDEFINED> instruction: 0xffe6990c
20004d44:	7cfa0178 	ldfvce	f0, [sl], #480	; 0x1e0
20004d48:	3fe0c184 	svccc	0x00e0c184
20004d4c:	013ff400 	teqeq	pc, r0, lsl #8	; <UNPREDICTABLE>
20004d50:	001fc0c7 	andseq	ip, pc, r7, asr #1
20004d54:	03c03ff0 	biceq	r3, r0, #240, 30	; 0x3c0
20004d58:	fc0007e0 	stc2	7, cr0, [r0], {224}	; 0xe0
20004d5c:	e003803f 	and	r8, r3, pc, lsr r0
20004d60:	7f0c009f 	svcvc	0x000c009f
20004d64:	ffc1fbe4 			; <UNDEFINED> instruction: 0xffc1fbe4
20004d68:	fc140c03 	ldc2	12, cr0, [r4], {3}
20004d6c:	03ffc7ff 	mvnseq	ip, #66846720	; 0x3fc0000
20004d70:	f3fc1c0c 	vdup.32	d17, d12[1]
20004d74:	0e02dc1b 	mcreq	12, 0, sp, cr2, cr11, {0}
20004d78:	63f3e490 	mvnsvs	lr, #144, 8	; 0x90000000
20004d7c:	018e0218 	orreq	r0, lr, r8, lsl r2
20004d80:	1251e382 	subsne	lr, r1, #134217730	; 0x8000002
20004d84:	88018e02 	stmdahi	r1, {r1, r9, sl, fp, pc}
20004d88:	020061a7 	andeq	r6, r0, #-1073741783	; 0xc0000029
20004d8c:	2460008e 	strbtcs	r0, [r0], #-142	; 0xffffff72
20004d90:	8e021041 	cdphi	0, 0, cr1, cr2, cr1, {2}
20004d94:	41000300 	mrsmi	r0, LR_irq
20004d98:	000e0290 	muleq	lr, r0, r2
20004d9c:	9048008d 	subls	r0, r8, sp, lsl #1
20004da0:	81040c02 	tsthi	r4, r2, lsl #24
20004da4:	02a04c87 	adceq	r4, r0, #34560	; 0x8700
20004da8:	cffffffc 	svcgt	0x00fffffc
20004dac:	8203e2fc 	andhi	lr, r3, #252, 4	; 0xc000000f
20004db0:	e3f81c07 	mvns	r1, #1792	; 0x700
20004db4:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20004db8 <title_black_bits>:
	...
20004de0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
20004de4:	01000040 	tsteq	r0, r0, asr #32
20004de8:	400c0000 	andmi	r0, ip, r0
20004dec:	00010080 	andeq	r0, r1, r0, lsl #1
20004df0:	9c200400 	cfstrsls	mvf0, [r0], #-0
20004df4:	000001c4 	andeq	r0, r0, r4, asr #3
20004df8:	a4803104 	strge	r3, [r0], #260	; 0x104
20004dfc:	04c00001 	strbeq	r0, [r0], #1
20004e00:	02240209 	eoreq	r0, r4, #-1879048192	; 0x90000000
20004e04:	89044000 	stmdbhi	r4, {lr}
20004e08:	00042602 	andeq	r2, r4, r2, lsl #12
20004e0c:	e2888440 	add	r8, r8, #64, 8	; 0x40000000
20004e10:	00000421 	andeq	r0, r0, r1, lsr #8
20004e14:	001966f2 			; <UNDEFINED> instruction: 0x001966f2
20004e18:	03000007 	movweq	r0, #7
20004e1c:	00020000 	andeq	r0, r2, r0
20004e20:	f4000000 	vst4.8	{d0-d3}, [r0], r0
20004e24:	00003a10 	andeq	r3, r0, r0, lsl sl
20004e28:	10058000 	andne	r8, r5, r0
20004e2c:	00000012 	andeq	r0, r0, r2, lsl r0
20004e30:	1ad87400 	bne	1f621e38 <startup-0x9de1c8>
20004e34:	80000000 	andhi	r0, r0, r0
20004e38:	0022041b 	eoreq	r0, r2, fp, lsl r4
20004e3c:	00004000 	andeq	r4, r0, r0
20004e40:	00003800 	andeq	r3, r0, r0, lsl #16
20004e44:	0000c0c0 	andeq	ip, r0, r0, asr #1
20004e48:	c0000000 	andgt	r0, r0, r0
20004e4c:	08000045 	stmdaeq	r0, {r0, r2, r6}
20004e50:	144000c7 	strbne	r0, [r0], #-199	; 0xffffff39
20004e54:	01281040 			; <UNDEFINED> instruction: 0x01281040
20004e58:	71144000 	tstvc	r4, r0
20004e5c:	00190810 	andseq	r0, r9, r0, lsl r8
20004e60:	90019440 	andls	r9, r1, r0, asr #8
20004e64:	4000c928 	andmi	ip, r0, r8, lsr #18
20004e68:	2c444c94 	mcrrcs	12, 9, r4, r4, cr4
20004e6c:	96000049 	strls	r0, [r0], -r9, asr #32
20004e70:	49264740 	stmdbmi	r6!, {r6, r8, r9, sl, lr}
20004e74:	60938000 	addsvs	r8, r3, r0
20004e78:	00512268 	subseq	r2, r1, r8, ror #4
20004e7c:	30000000 	andcc	r0, r0, r0
20004e80:	00001d03 	andeq	r1, r0, r3, lsl #26
	...

20004e8c <bg_bits>:
	...
20004e9c:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
20004ea0:	0000001f 	andeq	r0, r0, pc, lsl r0
	...
20004eac:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
20004eb0:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
20004ebc:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
20004ec0:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
	...
20004ecc:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20004ed0:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
	...
20004edc:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20004ee0:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
20004eec:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20004ef0:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20004efc:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
20004f00:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20005007 <bg_bits+0x17b>	; <UNPREDICTABLE>
20004f04:	0001f000 	andeq	pc, r1, r0
20004f08:	00000000 	andeq	r0, r0, r0
20004f0c:	007fe000 	rsbseq	lr, pc, r0
20004f10:	0ffffffe 	svceq	0x00fffffe
20004f14:	0003f800 	andeq	pc, r3, r0, lsl #16
20004f18:	00000000 	andeq	r0, r0, r0
20004f1c:	003fe000 	eorseq	lr, pc, r0
20004f20:	7fffffc0 	svcvc	0x00ffffc0
20004f24:	0003f800 	andeq	pc, r3, r0, lsl #16
20004f28:	001f8000 	andseq	r8, pc, r0
20004f2c:	001fe000 	andseq	lr, pc, r0
20004f30:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20004f34:	0003f801 	andeq	pc, r3, r1, lsl #16
20004f38:	003fc000 	eorseq	ip, pc, r0
20004f3c:	003fe000 	eorseq	lr, pc, r0
20004f40:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
20004f44:	3f83f807 	svccc	0x0083f807
20004f48:	003fe000 	eorseq	lr, pc, r0
20004f4c:	01ffe000 	mvnseq	lr, r0
20004f50:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20004f54:	7fc3f80f 	svcvc	0x00c3f80f
20004f58:	003fe7f8 	ldrshteq	lr, [pc], -r8
20004f5c:	07ffe000 	ldrbeq	lr, [pc, r0]!
20004f60:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
20004f64:	7fe1f01f 	svcvc	0x00e1f01f
20004f68:	003ffffc 	ldrshteq	pc, [pc], -ip	; <UNPREDICTABLE>
20004f6c:	3fffc000 	svccc	0x00ffc000
20004f70:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20004f74:	7ff0003f 	svcvc	0x00f0003f
20004f78:	007ffffc 	ldrshteq	pc, [pc], #-252	; <UNPREDICTABLE>
20004f7c:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20004f80:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20004f84:	7ff8007f 	svcvc	0x00f8007f
20004f88:	3ffffffc 	svccc	0x00fffffc
20004f8c:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20004f90:	f8000003 			; <UNDEFINED> instruction: 0xf8000003
20004f94:	7ffc00ff 	svcvc	0x00fc00ff
20004f98:	7ffffffc 	svcvc	0x00fffffc
20004f9c:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20004fa0:	e000000f 	and	r0, r0, pc
20004fa4:	7ffe01ff 	svcvc	0x00fe01ff
20004fa8:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20004fac:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
20004fb0:	8000001f 	andhi	r0, r0, pc, lsl r0
20004fb4:	7fff01ff 	svcvc	0x00ff01ff
20004fb8:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20004fbc:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20004fc0:	0000007f 	andeq	r0, r0, pc, ror r0
20004fc4:	7fff83ff 	svcvc	0x00ff83ff
20004fc8:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
20004fcc:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20004fd0:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004fd4:	7fffc3fe 	svcvc	0x00ffc3fe
20004fd8:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
20004fdc:	fc7ffff0 	ldc2l	15, cr15, [pc], #-960	; 20004c24 <title_light_bits+0x14>
20004fe0:	07c001ff 			; <UNDEFINED> instruction: 0x07c001ff
20004fe4:	7fffe7fc 	svcvc	0x00ffe7fc
20004fe8:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
20004fec:	f0fffffe 			; <UNDEFINED> instruction: 0xf0fffffe
20004ff0:	0fe007ff 	svceq	0x00e007ff
20004ff4:	7ffff7fc 	svcvc	0x00fff7fc
20004ff8:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
20004ffc:	c0ffffff 	ldrshtgt	pc, [pc], #255	; <UNPREDICTABLE>
20005000:	0fe00fff 	svceq	0x00e00fff
20005004:	7ffffff8 	svcvc	0x00fffff8
20005008:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
2000500c:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20005113 <bg_bits+0x287>	; <UNPREDICTABLE>
20005010:	0fe01fff 	svceq	0x00e01fff
20005014:	7ffffff8 	svcvc	0x00fffff8
20005018:	7ffffc00 	svcvc	0x00fffc00
2000501c:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20005123 <bg_bits+0x297>	; <UNPREDICTABLE>
20005020:	0fe03ffe 	svceq	0x00e03ffe
20005024:	3fdffff0 	svccc	0x00dffff0
20005028:	3ffffe00 	svccc	0x00fffe00
2000502c:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20005133 <bg_bits+0x2a7>	; <UNPREDICTABLE>
20005030:	0fe03ff8 	svceq	0x00e03ff8
20005034:	3fe7fff0 	svccc	0x00e7fff0
20005038:	07fffe00 	ldrbeq	pc, [pc, r0, lsl #28]!	; <UNPREDICTABLE>
2000503c:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
20005040:	07c07ff0 			; <UNDEFINED> instruction: 0x07c07ff0
20005044:	1fe7fff0 	svcne	0x00e7fff0
20005048:	0ffffe00 	svceq	0x00fffe00
2000504c:	03fc00ff 	mvnseq	r0, #255	; 0xff
20005050:	0000ffe0 	andeq	pc, r0, r0, ror #31
20005054:	1ff3ffe0 	svcne	0x00f3ffe0
20005058:	1ffffe00 	svcne	0x00fffe00
2000505c:	03fc001f 	mvnseq	r0, #31
20005060:	0001ff80 	andeq	pc, r1, r0, lsl #31
20005064:	1ff9ffe0 	svcne	0x00f9ffe0
20005068:	3ffffe00 	svccc	0x00fffe00
2000506c:	03fc0007 	mvnseq	r0, #7
20005070:	0001ff80 	andeq	pc, r1, r0, lsl #31
20005074:	0ffcffe0 	svceq	0x00fcffe0
20005078:	3ffdfe00 	svccc	0x00fdfe00
2000507c:	07f80007 	ldrbeq	r0, [r8, r7]!
20005080:	0003ff00 	andeq	pc, r3, r0, lsl #30
20005084:	0ffe7ff0 	svceq	0x00fe7ff0
20005088:	3ffcfe00 	svccc	0x00fcfe00
2000508c:	07f80003 	ldrbeq	r0, [r8, r3]!
20005090:	0007fe00 	andeq	pc, r7, r0, lsl #28
20005094:	07fe7ff8 			; <UNDEFINED> instruction: 0x07fe7ff8
20005098:	3ff8fe00 	svccc	0x00f8fe00
2000509c:	0ff80003 	svceq	0x00f80003
200050a0:	0007fc00 	andeq	pc, r7, r0, lsl #24
200050a4:	03fffffc 	mvnseq	pc, #252, 30	; 0x3f0
200050a8:	3ff87c00 	svccc	0x00f87c00
200050ac:	0ff80003 	svceq	0x00f80003
200050b0:	0007fc00 	andeq	pc, r7, r0, lsl #24
200050b4:	01fffffe 	ldrsheq	pc, [pc, #254]	; 200051ba <bg_bits+0x32e>	; <UNPREDICTABLE>
200050b8:	1ff00000 	svcne	0x00f00000	; IMB
200050bc:	0ff00007 	svceq	0x00f00007
200050c0:	000ff800 	andeq	pc, pc, r0, lsl #16
200050c4:	01ffffff 	ldrsheq	pc, [pc, #255]	; 200051cb <bg_bits+0x33f>	; <UNPREDICTABLE>
200050c8:	07f0003e 			; <UNDEFINED> instruction: 0x07f0003e
200050cc:	0ff00007 	svceq	0x00f00007
200050d0:	800ff000 	andhi	pc, pc, r0
200050d4:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
200050d8:	03e0007f 	mvneq	r0, #127	; 0x7f
200050dc:	0fe00007 	svceq	0x00e00007
200050e0:	c00ff000 	andgt	pc, pc, r0
200050e4:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
200050e8:	0000007f 	andeq	r0, r0, pc, ror r0
200050ec:	0fe00007 	svceq	0x00e00007
200050f0:	e00ff000 	and	pc, pc, r0
200050f4:	007ffeff 	ldrshteq	pc, [pc], #-239	; <UNPREDICTABLE>
200050f8:	0000007f 	andeq	r0, r0, pc, ror r0
200050fc:	0fe00007 	svceq	0x00e00007
20005100:	f00ff000 			; <UNDEFINED> instruction: 0xf00ff000
20005104:	003ffe7f 	eorseq	pc, pc, pc, ror lr	; <UNPREDICTABLE>
20005108:	0000007f 	andeq	r0, r0, pc, ror r0
2000510c:	0fe00007 	svceq	0x00e00007
20005110:	f80ff000 			; <UNDEFINED> instruction: 0xf80ff000
20005114:	001ffc3f 	andseq	pc, pc, pc, lsr ip	; <UNPREDICTABLE>
20005118:	0000007f 	andeq	r0, r0, pc, ror r0
2000511c:	1fe0000f 	svcne	0x00e0000f
20005120:	fc0ff000 	stc2	0, cr15, [pc], {-0}
20005124:	000ff81f 	andeq	pc, pc, pc, lsl r8	; <UNPREDICTABLE>
20005128:	0000003e 	andeq	r0, r0, lr, lsr r0
2000512c:	1fe0000f 	svcne	0x00e0000f
20005130:	fc07f000 	stc2	0, cr15, [r7], {-0}
20005134:	0007f00f 	andeq	pc, r7, pc
20005138:	00000000 	andeq	r0, r0, r0
2000513c:	1fe0000f 	svcne	0x00e0000f
20005140:	fc07f000 	stc2	0, cr15, [r7], {-0}
20005144:	00000007 	andeq	r0, r0, r7
20005148:	00000000 	andeq	r0, r0, r0
2000514c:	1fe0000f 	svcne	0x00e0000f
20005150:	fc07f800 	stc2	8, cr15, [r7], {-0}
20005154:	00000003 	andeq	r0, r0, r3
20005158:	000ff800 	andeq	pc, pc, r0, lsl #16
2000515c:	1fc0001f 	svcne	0x00c0001f
20005160:	fc07fc00 	stc2	12, cr15, [r7], {-0}
20005164:	00000001 	andeq	r0, r0, r1
20005168:	001ffc00 	andseq	pc, pc, r0, lsl #24
2000516c:	1fc0003f 	svcne	0x00c0003f
20005170:	fc07ff80 	stc2	15, cr15, [r7], {128}	; 0x80
20005174:	00000001 	andeq	r0, r0, r1
20005178:	003fff00 	eorseq	pc, pc, r0, lsl #30
2000517c:	3fc0003f 	svccc	0x00c0003f
20005180:	fc07fffc 	stc2	15, cr15, [r7], {252}	; 0xfc
20005184:	00000001 	andeq	r0, r0, r1
20005188:	007fff80 	rsbseq	pc, pc, r0, lsl #31
2000518c:	ffc0003f 			; <UNDEFINED> instruction: 0xffc0003f
20005190:	fc03ffff 	stc2	15, cr15, [r3], {255}	; 0xff
20005194:	00000001 	andeq	r0, r0, r1
20005198:	00ffffe0 	rscseq	pc, pc, r0, ror #31
2000519c:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
200051a0:	fc01ffff 	stc2	15, cr15, [r1], {255}	; 0xff
200051a4:	00000007 	andeq	r0, r0, r7
200051a8:	03fffff0 	mvnseq	pc, #240, 30	; 0x3c0
200051ac:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
200051b0:	fc00ffff 	stc2	15, cr15, [r0], {255}	; 0xff
200051b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200051b8:	07fffff8 			; <UNDEFINED> instruction: 0x07fffff8
200051bc:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
200051c0:	fc007fff 	stc2	15, cr7, [r0], {255}	; 0xff
200051c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200051c8:	07ff7ffd 			; <UNDEFINED> instruction: 0x07ff7ffd
200051cc:	ff80007f 			; <UNDEFINED> instruction: 0xff80007f
200051d0:	fc003fff 	stc2	15, cr3, [r0], {255}	; 0xff
200051d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200051d8:	0ffe3fff 	svceq	0x00fe3fff
200051dc:	ff1f007f 			; <UNDEFINED> instruction: 0xff1f007f
200051e0:	f80007ff 			; <UNDEFINED> instruction: 0xf80007ff
200051e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200051e8:	1ffc3fff 	svcne	0x00fc3fff
200051ec:	fc3f807f 	ldc2	0, cr8, [pc], #-508	; 20004ff8 <bg_bits+0x16c>
200051f0:	f800003f 			; <UNDEFINED> instruction: 0xf800003f
200051f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200051f8:	1ff83fff 	svcne	0x00f83fff
200051fc:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
20005200:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20005204:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005208:	3ff03fff 	svccc	0x00f03fff
2000520c:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
20005210:	c0000000 	andgt	r0, r0, r0
20005214:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005218:	7fe03fff 	svcvc	0x00e03fff
2000521c:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
20005220:	00000000 	andeq	r0, r0, r0
20005224:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20005228:	7fc03fff 	svcvc	0x00c03fff
2000522c:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
20005230:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
20005234:	f800000f 			; <UNDEFINED> instruction: 0xf800000f
20005238:	ffc01fff 			; <UNDEFINED> instruction: 0xffc01fff
2000523c:	001f003f 	andseq	r0, pc, pc, lsr r0	; <UNPREDICTABLE>
20005240:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20005244:	f8007fff 			; <UNDEFINED> instruction: 0xf8007fff
20005248:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
2000524c:	0000003f 	andeq	r0, r0, pc, lsr r0
20005250:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20005254:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005258:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
2000525c:	0000003f 	andeq	r0, r0, pc, lsr r0
20005260:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20005264:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005268:	ff001fff 			; <UNDEFINED> instruction: 0xff001fff
2000526c:	0000003f 	andeq	r0, r0, pc, lsr r0
20005270:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20005274:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005278:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}
2000527c:	0000003f 	andeq	r0, r0, pc, lsr r0
20005280:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20005284:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005288:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}

2000528c <fire_black_2_bits>:
	...
20005294:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>

20005298 <fire1_gray_bits>:
20005298:	00000000 	andeq	r0, r0, r0
2000529c:	06000804 	streq	r0, [r0], -r4, lsl #16
200052a0:	02494204 	subeq	r4, r9, #4, 4	; 0x40000000

200052a4 <fire1_light_bits>:
200052a4:	00002000 	andeq	r2, r0, r0
200052a8:	48000010 	stmdami	r0, {r4}
200052ac:	2c243020 	stccs	0, cr3, [r4], #-128	; 0xffffff80

200052b0 <fire2_gray_bits>:
200052b0:	00000000 	andeq	r0, r0, r0
200052b4:	10220000 	eorne	r0, r2, r0
200052b8:	00420444 	subeq	r0, r2, r4, asr #8

200052bc <fire2_light_bits>:
200052bc:	04200000 	strteq	r0, [r0], #-0
200052c0:	240c0010 	strcs	r0, [ip], #-16
200052c4:	123c6008 	eorsne	r6, ip, #8

200052c8 <fire3_gray_bits>:
200052c8:	00000000 	andeq	r0, r0, r0
200052cc:	24100802 	ldrcs	r0, [r0], #-2050	; 0xfffff7fe
200052d0:	00020260 	andeq	r0, r2, r0, ror #4

200052d4 <fire3_light_bits>:
200052d4:	10200000 	eorne	r0, r0, r0
200052d8:	18040400 	stmdane	r4, {sl}
200052dc:	143c5812 	ldrtne	r5, [ip], #-2066	; 0xfffff7ee

200052e0 <fire4_gray_bits>:
200052e0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
200052e4:	10320000 	eorsne	r0, r2, r0
200052e8:	02400012 	subeq	r0, r0, #18

200052ec <fire4_light_bits>:
200052ec:	00001000 	andeq	r1, r0, r0
200052f0:	04082000 	streq	r2, [r8], #-0
200052f4:	24283a0c 	strtcs	r3, [r8], #-2572	; 0xfffff5f4

200052f8 <fire5_gray_bits>:
200052f8:	00000000 	andeq	r0, r0, r0
200052fc:	22001020 	andcs	r1, r0, #32
20005300:	04044206 	streq	r4, [r4], #-518	; 0xfffffdfa

20005304 <fire5_light_bits>:
20005304:	00040000 	andeq	r0, r4, r0
20005308:	04240800 	strteq	r0, [r4], #-2048	; 0xfffff800
2000530c:	502a1810 	eorpl	r1, sl, r0, lsl r8

20005310 <firstTime.4076>:
20005310:	00000001 	andeq	r0, r0, r1
20005314:	734c4944 	movtvc	r4, #51524	; 0xc944
20005318:	7469772d 	strbtvc	r7, [r9], #-1837	; 0xfffff8d3
2000531c:	73656863 	cmnvc	r5, #6488064	; 0x630000
20005320:	76616820 	strbtvc	r6, [r1], -r0, lsr #16
20005324:	00000065 	andeq	r0, r0, r5, rrx
20005328:	20726f46 	rsbscs	r6, r2, r6, asr #30
2000532c:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
20005330:	65697275 	strbvs	r7, [r9, #-629]!	; 0xfffffd8b
20005334:	68742073 	ldmdavs	r4!, {r0, r1, r4, r5, r6, sp}^
20005338:	00000065 	andeq	r0, r0, r5, rrx
2000533c:	20202020 	eorcs	r2, r0, r0, lsr #32
20005340:	00000000 	andeq	r0, r0, r0
20005344:	6c696f63 	stclvs	15, cr6, [r9], #-396	; 0xfffffe74
20005348:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
2000534c:	6566206e 	strbvs	r2, [r6, #-110]!	; 0xffffff92
20005350:	002c7261 	eoreq	r7, ip, r1, ror #4
20005354:	74616874 	strbtvc	r6, [r1], #-2164	; 0xfffff78c
20005358:	44206120 	strtmi	r6, [r0], #-288	; 0xfffffee0
2000535c:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
20005360:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
20005364:	00000068 	andeq	r0, r0, r8, rrx
20005368:	6e656877 	mcrvs	8, 3, r6, cr5, cr7, {3}
2000536c:	72657665 	rsbvc	r7, r5, #105906176	; 0x6500000
20005370:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
20005374:	65682079 	strbvs	r2, [r8, #-121]!	; 0xffffff87
20005378:	00007261 	andeq	r7, r0, r1, ror #4
2000537c:	00202020 	eoreq	r2, r0, r0, lsr #32
20005380:	6e207369 	cdpvs	3, 2, cr7, cr0, cr9, {3}
20005384:	2e726165 	rpwcssz	f6, f2, f5
20005388:	00000000 	andeq	r0, r0, r0
2000538c:	70727573 	rsbsvc	r7, r2, r3, ror r5
20005390:	69736972 	ldmdbvs	r3!, {r1, r4, r5, r6, r8, fp, sp, lr}^
20005394:	202c676e 	eorcs	r6, ip, lr, ror #14
20005398:	646e6966 	strbtvs	r6, [lr], #-2406	; 0xfffff69a
2000539c:	00676e69 	rsbeq	r6, r7, r9, ror #28
200053a0:	69206f53 	stmdbvs	r0!, {r0, r1, r4, r6, r8, r9, sl, fp, sp, lr}
200053a4:	73692074 	cmnvc	r9, #116	; 0x74
200053a8:	69757120 	ldmdbvs	r5!, {r5, r8, ip, sp, lr}^
200053ac:	00006574 	andeq	r6, r0, r4, ror r5
200053b0:	20756f79 	rsbscs	r6, r5, r9, ror pc
200053b4:	65726568 	ldrbvs	r6, [r2, #-1384]!	; 0xfffffa98
200053b8:	0000002c 	andeq	r0, r0, ip, lsr #32
200053bc:	72696568 	rsbvc	r6, r9, #104, 10	; 0x1a000000
200053c0:	206f7420 	rsbcs	r7, pc, r0, lsr #8
200053c4:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
200053c8:	61654c20 	cmnvs	r5, r0, lsr #24
200053cc:	00002e72 	andeq	r2, r0, r2, ror lr
200053d0:	65657571 	strbvs	r7, [r5, #-1393]!	; 0xfffffa8f
200053d4:	6144206e 	cmpvs	r4, lr, rrx
200053d8:	206f6666 	rsbcs	r6, pc, r6, ror #12
200053dc:	4420666f 	strtmi	r6, [r0], #-1647	; 0xfffff991
200053e0:	2c734c49 	ldclcs	12, cr4, [r3], #-292	; 0xfffffedc
200053e4:	00000000 	andeq	r0, r0, r0
200053e8:	706d6574 	rsbvc	r6, sp, r4, ror r5
200053ec:	2c646574 	cfstr64cs	mvdx6, [r4], #-464	; 0xfffffe30
200053f0:	206f7420 	rsbcs	r7, pc, r0, lsr #8
200053f4:	746f6f6c 	strbtvc	r6, [pc], #-3948	; 200053fc <firstTime.4076+0xec>
200053f8:	00000000 	andeq	r0, r0, r0
200053fc:	20747542 	rsbscs	r7, r4, r2, asr #10
20005400:	6279616d 	rsbsvs	r6, r9, #1073741851	; 0x4000001b
20005404:	6f792065 	svcvs	0x00792065
20005408:	65722775 	ldrbvs	r2, [r2, #-1909]!	; 0xfffff88b
2000540c:	00000000 	andeq	r0, r0, r0
20005410:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 20005280 <bg_bits+0x3f4>
20005414:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
20005418:	63697220 	cmnvs	r9, #32, 4
2000541c:	2c736568 	cfldr64cs	mvdx6, [r3], #-416	; 0xfffffe60
20005420:	00000000 	andeq	r0, r0, r0
20005424:	77207962 	strvc	r7, [r0, -r2, ror #18]!
20005428:	656b6369 	strbvs	r6, [fp, #-873]!	; 0xfffffc97
2000542c:	49442064 	stmdbmi	r4, {r2, r5, r6, sp}^
20005430:	772d7350 			; <UNDEFINED> instruction: 0x772d7350
20005434:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
20005438:	002e7365 	eoreq	r7, lr, r5, ror #6
2000543c:	67206f73 			; <UNDEFINED> instruction: 0x67206f73
20005440:	70706972 	rsbsvc	r6, r0, r2, ror r9
20005444:	20796c69 	rsbscs	r6, r9, r9, ror #24
20005448:	61657274 	smcvs	22308	; 0x5724
2000544c:	65727573 	ldrbvs	r7, [r2, #-1395]!	; 0xfffffa8d
20005450:	00000064 	andeq	r0, r0, r4, rrx
20005454:	6b207962 	blvs	208239e4 <firstTime.4076+0x81e6d4>
20005458:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
2000545c:	7420676e 	strtvc	r6, [r0], #-1902	; 0xfffff892
20005460:	73206568 			; <UNDEFINED> instruction: 0x73206568
20005464:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
20005468:	00002168 	andeq	r2, r0, r8, ror #2
2000546c:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xfffff1bb
20005470:	62202c72 	eorvs	r2, r0, #29184	; 0x7200
20005474:	65766172 	ldrbvs	r6, [r6, #-370]!	; 0xfffffe8e
20005478:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
2000547c:	002c6863 	eoreq	r6, ip, r3, ror #16
20005480:	20000fe0 	andcs	r0, r0, r0, ror #31
20005484:	20000fea 	andcs	r0, r0, sl, ror #31
20005488:	20000ff4 	strdcs	r0, [r0], -r4
2000548c:	20000ffe 	strdcs	r0, [r0], -lr
20005490:	20001008 	andcs	r1, r0, r8
20005494:	20001012 	andcs	r1, r0, r2, lsl r0
20005498:	2000101c 	andcs	r1, r0, ip, lsl r0
2000549c:	20001026 	andcs	r1, r0, r6, lsr #32
200054a0:	20202020 	eorcs	r2, r0, r0, lsr #32
200054a4:	20202020 	eorcs	r2, r0, r0, lsr #32
200054a8:	20202020 	eorcs	r2, r0, r0, lsr #32
200054ac:	20202020 	eorcs	r2, r0, r0, lsr #32
200054b0:	20202020 	eorcs	r2, r0, r0, lsr #32
200054b4:	00000000 	andeq	r0, r0, r0
200054b8:	61666c41 	cmnvs	r6, r1, asr #24
200054bc:	656d756e 	strbvs	r7, [sp, #-1390]!	; 0xfffffa92
200054c0:	6b736972 	blvs	21cdfa90 <firstTime.4076+0x1cda780>
200054c4:	00000000 	andeq	r0, r0, r0
200054c8:	64726168 	ldrbtvs	r6, [r2], #-360	; 0xfffffe98
200054cc:	a4c3a5c3 	strbge	sl, [r3], #1475	; 0x5c3
200054d0:	7261b6c3 	rsbvc	fp, r1, #204472320	; 0xc300000
200054d4:	75732065 	ldrbvc	r2, [r3, #-101]!	; 0xffffff9b
200054d8:	00726567 	rsbseq	r6, r2, r7, ror #10

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000006e0 	andeq	r0, r0, r0, ror #13
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000048 	andeq	r0, r0, r8, asr #32
      10:	00023c0c 	andeq	r3, r2, ip, lsl #24
	...
      20:	020c0200 	andeq	r0, ip, #0, 4
      24:	00004e05 	andeq	r4, r0, r5, lsl #28
      28:	01d10300 	bicseq	r0, r1, r0, lsl #6
      2c:	07020000 	streq	r0, [r2, -r0]
      30:	0000004e 	andeq	r0, r0, lr, asr #32
      34:	02d30300 	sbcseq	r0, r3, #0, 6
      38:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      3c:	0000004e 	andeq	r0, r0, lr, asr #32
      40:	09610304 	stmdbeq	r1!, {r2, r8, r9}^
      44:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
      48:	00000055 	andeq	r0, r0, r5, asr r0
      4c:	04040008 	streq	r0, [r4], #-8
      50:	0002fc07 	andeq	pc, r2, r7, lsl #24
      54:	5b040500 	blpl	10145c <startup-0x1fefeba4>
      58:	04000000 	streq	r0, [r0], #-0
      5c:	029b0801 	addseq	r0, fp, #65536	; 0x10000
      60:	b3060000 	movwlt	r0, #24576	; 0x6000
      64:	0200000a 	andeq	r0, r0, #10
      68:	0000210a 	andeq	r2, r0, sl, lsl #2
      6c:	02700700 	rsbseq	r0, r0, #0, 14
      70:	030c0000 	movweq	r0, #49152	; 0xc000
      74:	00009e06 	andeq	r9, r0, r6, lsl #28
      78:	03fe0300 	mvnseq	r0, #0, 6
      7c:	07030000 	streq	r0, [r3, -r0]
      80:	0000009e 	muleq	r0, lr, r0
      84:	04090300 	streq	r0, [r9], #-768	; 0xfffffd00
      88:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
      8c:	0000009e 	muleq	r0, lr, r0
      90:	026c0304 	rsbeq	r0, ip, #4, 6	; 0x10000000
      94:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
      98:	0000009e 	muleq	r0, lr, r0
      9c:	04050008 	streq	r0, [r5], #-8
      a0:	00000062 	andeq	r0, r0, r2, rrx
      a4:	00071e06 	andeq	r1, r7, r6, lsl #28
      a8:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
      ac:	07000000 	streq	r0, [r0, -r0]
      b0:	0000014d 	andeq	r0, r0, sp, asr #2
      b4:	28060424 	stmdacs	r6, {r2, r5, sl}
      b8:	03000001 	movweq	r0, #1
      bc:	000004e5 	andeq	r0, r0, r5, ror #9
      c0:	01280704 			; <UNDEFINED> instruction: 0x01280704
      c4:	03000000 	movweq	r0, #0
      c8:	000000e0 	andeq	r0, r0, r0, ror #1
      cc:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
      d0:	03040000 	movweq	r0, #16384	; 0x4000
      d4:	000001fd 	strdeq	r0, [r0], -sp
      d8:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
      dc:	03080000 	movweq	r0, #32768	; 0x8000
      e0:	000001f6 	strdeq	r0, [r0], -r6
      e4:	01460c04 	cmpeq	r6, r4, lsl #24
      e8:	030c0000 	movweq	r0, #49152	; 0xc000
      ec:	00000223 	andeq	r0, r0, r3, lsr #4
      f0:	01460d04 	cmpeq	r6, r4, lsl #26
      f4:	03100000 	tsteq	r0, #0
      f8:	00000108 	andeq	r0, r0, r8, lsl #2
      fc:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
     100:	03140000 	tsteq	r4, #0
     104:	000003b1 			; <UNDEFINED> instruction: 0x000003b1
     108:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
     10c:	03180000 	tsteq	r8, #0
     110:	0000049e 	muleq	r0, lr, r4
     114:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
     118:	031c0000 	tsteq	ip, #0
     11c:	00000024 	andeq	r0, r0, r4, lsr #32
     120:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
     124:	00200000 	eoreq	r0, r0, r0
     128:	00a40405 	adceq	r0, r4, r5, lsl #8
     12c:	04080000 	streq	r0, [r8], #-0
     130:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     134:	01400900 	cmpeq	r0, r0, lsl #18
     138:	400a0000 	andmi	r0, sl, r0
     13c:	00000001 	andeq	r0, r0, r1
     140:	00af0405 	adceq	r0, pc, r5, lsl #8
     144:	04050000 	streq	r0, [r5], #-0
     148:	00000135 	andeq	r0, r0, r5, lsr r1
     14c:	00014e06 	andeq	r4, r1, r6, lsl #28
     150:	af150400 	svcge	0x00150400
     154:	0b000000 	bleq	15c <startup-0x1ffffea4>
     158:	00000162 	andeq	r0, r0, r2, ror #2
     15c:	00000162 	andeq	r0, r0, r2, ror #2
     160:	0405000c 	streq	r0, [r5], #-12
     164:	0000014c 	andeq	r0, r0, ip, asr #2
     168:	0003db0d 	andeq	sp, r3, sp, lsl #22
     16c:	571a0400 	ldrpl	r0, [sl, -r0, lsl #8]
     170:	0d000001 	stceq	0, cr0, [r0, #-4]
     174:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
     178:	012e1b04 			; <UNDEFINED> instruction: 0x012e1b04
     17c:	80060000 	andhi	r0, r6, r0
     180:	05000001 	streq	r0, [r0, #-1]
     184:	00005b24 	andeq	r5, r0, r4, lsr #22
     188:	017e0b00 	cmneq	lr, r0, lsl #22
     18c:	019a0000 	orrseq	r0, sl, r0
     190:	9a0e0000 	bls	380198 <startup-0x1fc7fe68>
     194:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     198:	04040003 	streq	r0, [r4], #-3
     19c:	0000f407 	andeq	pc, r0, r7, lsl #8
     1a0:	08970d00 	ldmeq	r7, {r8, sl, fp}
     1a4:	2b050000 	blcs	1401ac <startup-0x1febfe54>
     1a8:	00000189 	andeq	r0, r0, r9, lsl #3
     1ac:	0001160d 	andeq	r1, r1, sp, lsl #12
     1b0:	892c0500 	stmdbhi	ip!, {r8, sl}
     1b4:	0d000001 	stceq	0, cr0, [r0, #-4]
     1b8:	0000046f 	andeq	r0, r0, pc, ror #8
     1bc:	01892d05 	orreq	r2, r9, r5, lsl #26
     1c0:	de0d0000 	cdple	0, 0, cr0, cr13, cr0, {0}
     1c4:	05000001 	streq	r0, [r0, #-1]
     1c8:	0001892e 	andeq	r8, r1, lr, lsr #18
     1cc:	043f0d00 	ldrteq	r0, [pc], #-3328	; 1d4 <startup-0x1ffffe2c>
     1d0:	2f050000 	svccs	0x00050000
     1d4:	00000189 	andeq	r0, r0, r9, lsl #3
     1d8:	0003a20d 	andeq	sl, r3, sp, lsl #4
     1dc:	89300500 	ldmdbhi	r0!, {r8, sl}
     1e0:	0d000001 	stceq	0, cr0, [r0, #-4]
     1e4:	00000170 	andeq	r0, r0, r0, ror r1
     1e8:	01893105 	orreq	r3, r9, r5, lsl #2
     1ec:	5b0b0000 	blpl	2c01f4 <startup-0x1fd3fe0c>
     1f0:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
     1f4:	0f000001 	svceq	0x00000001
     1f8:	0000019a 	muleq	r0, sl, r1
     1fc:	a8100077 	ldmdage	r0, {r0, r1, r2, r4, r5, r6}
     200:	06000001 	streq	r0, [r0], -r1
     204:	0001ee03 	andeq	lr, r1, r3, lsl #28
     208:	a8030500 	stmdage	r3, {r8, sl}
     20c:	1120003e 			; <UNDEFINED> instruction: 0x1120003e
     210:	0000045c 	andeq	r0, r0, ip, asr r4
     214:	01ee0307 	mvneq	r0, r7, lsl #6
     218:	03050000 	movweq	r0, #20480	; 0x5000
     21c:	20003f20 	andcs	r3, r0, r0, lsr #30
     220:	0004bb11 	andeq	fp, r4, r1, lsl fp
     224:	ee030800 	cdp	8, 0, cr0, cr3, cr0, {0}
     228:	05000001 	streq	r0, [r0, #-1]
     22c:	003f9803 	eorseq	r9, pc, r3, lsl #16
     230:	005b0b20 	subseq	r0, fp, r0, lsr #22
     234:	02420000 	subeq	r0, r2, #0
     238:	9a0e0000 	bls	380240 <startup-0x1fc7fdc0>
     23c:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     240:	04110003 	ldreq	r0, [r1], #-3
     244:	09000005 	stmdbeq	r0, {r0, r2}
     248:	00023103 	andeq	r3, r2, r3, lsl #2
     24c:	10030500 	andne	r0, r3, r0, lsl #10
     250:	11200040 			; <UNDEFINED> instruction: 0x11200040
     254:	00000381 	andeq	r0, r0, r1, lsl #7
     258:	0231030a 	eorseq	r0, r1, #671088640	; 0x28000000
     25c:	03050000 	movweq	r0, #20480	; 0x5000
     260:	20004410 	andcs	r4, r0, r0, lsl r4
     264:	00022a11 	andeq	r2, r2, r1, lsl sl
     268:	31030b00 	tstcc	r3, r0, lsl #22
     26c:	05000002 	streq	r0, [r0, #-2]
     270:	00481003 	subeq	r1, r8, r3
     274:	005b0b20 	subseq	r0, fp, r0, lsr #22
     278:	02850000 	addeq	r0, r5, #0
     27c:	9a0f0000 	bls	3c0284 <startup-0x1fc3fd7c>
     280:	d1000001 	tstle	r0, r1
     284:	03541100 	cmpeq	r4, #0, 2
     288:	030c0000 	movweq	r0, #49152	; 0xc000
     28c:	00000275 	andeq	r0, r0, r5, ror r2
     290:	4c100305 	ldcmi	3, cr0, [r0], {5}
     294:	e6112000 	ldr	r2, [r1], -r0
     298:	0d000002 	stceq	0, cr0, [r0, #-8]
     29c:	00027503 	andeq	r7, r2, r3, lsl #10
     2a0:	e4030500 	str	r0, [r3], #-1280	; 0xfffffb00
     2a4:	1120004c 			; <UNDEFINED> instruction: 0x1120004c
     2a8:	00000013 	andeq	r0, r0, r3, lsl r0
     2ac:	0275030e 	rsbseq	r0, r5, #939524096	; 0x38000000
     2b0:	03050000 	movweq	r0, #20480	; 0x5000
     2b4:	20004db8 			; <UNDEFINED> instruction: 0x20004db8
     2b8:	00027d07 	andeq	r7, r2, r7, lsl #26
     2bc:	040f1400 	streq	r1, [pc], #-1024	; 2c4 <startup-0x1ffffd3c>
     2c0:	00000301 	andeq	r0, r0, r1, lsl #6
     2c4:	000d2603 	andeq	r2, sp, r3, lsl #12
     2c8:	01050f00 	tsteq	r5, r0, lsl #30
     2cc:	00000003 	andeq	r0, r0, r3
     2d0:	00041303 	andeq	r1, r4, r3, lsl #6
     2d4:	01060f00 	tsteq	r6, r0, lsl #30
     2d8:	04000003 	streq	r0, [r0], #-3
     2dc:	00002e03 	andeq	r2, r0, r3, lsl #28
     2e0:	2e080f00 	cdpcs	15, 0, cr0, cr8, cr0, {0}
     2e4:	08000001 	stmdaeq	r0, {r0}
     2e8:	0004a803 	andeq	sl, r4, r3, lsl #16
     2ec:	2e090f00 	cdpcs	15, 0, cr0, cr9, cr0, {0}
     2f0:	0c000001 	stceq	0, cr0, [r0], {1}
     2f4:	00029303 	andeq	r9, r2, r3, lsl #6
     2f8:	240c0f00 	strcs	r0, [ip], #-3840	; 0xfffff100
     2fc:	10000003 	andne	r0, r0, r3
     300:	07040500 	streq	r0, [r4, -r0, lsl #10]
     304:	04000003 	streq	r0, [r0], #-3
     308:	02a40801 	adceq	r0, r4, #65536	; 0x10000
     30c:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
     310:	0a000003 	beq	324 <startup-0x1ffffcdc>
     314:	0000031e 	andeq	r0, r0, lr, lsl r3
     318:	00012e0a 	andeq	r2, r1, sl, lsl #28
     31c:	04050000 	streq	r0, [r5], #-0
     320:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
     324:	030e0405 	movweq	r0, #58373	; 0xe405
     328:	7e060000 	cdpvc	0, 0, cr0, cr6, cr0, {0}
     32c:	0f000002 	svceq	0x00000002
     330:	0002b80d 	andeq	fp, r2, sp, lsl #16
     334:	04dd1100 	ldrbeq	r1, [sp], #256	; 0x100
     338:	03100000 	tsteq	r0, #0
     33c:	00000231 	andeq	r0, r0, r1, lsr r2
     340:	4e8c0305 	cdpmi	3, 8, cr0, cr12, cr5, {0}
     344:	02042000 	andeq	r2, r4, #0
     348:	0002f607 	andeq	pc, r2, r7, lsl #12
     34c:	01971000 	orrseq	r1, r7, r0
     350:	2a010000 	bcs	40358 <startup-0x1ffbfca8>
     354:	0000009e 	muleq	r0, lr, r0
     358:	1f2c0305 	svcne	0x002c0305
     35c:	1e102000 	cdpne	0, 1, cr2, cr0, cr0, {0}
     360:	01000003 	tsteq	r0, r3
     364:	00009e2b 	andeq	r9, r0, fp, lsr #28
     368:	ac030500 	cfstr32ge	mvfx0, [r3], {-0}
     36c:	1020001f 	eorne	r0, r0, pc, lsl r0
     370:	000004f8 	strdeq	r0, [r0], -r8
     374:	009e2c01 	addseq	r2, lr, r1, lsl #24
     378:	03050000 	movweq	r0, #20480	; 0x5000
     37c:	20001fb8 			; <UNDEFINED> instruction: 0x20001fb8
     380:	00676212 	rsbeq	r6, r7, r2, lsl r2
     384:	009e2d01 	addseq	r2, lr, r1, lsl #26
     388:	03050000 	movweq	r0, #20480	; 0x5000
     38c:	20001f64 	andcs	r1, r0, r4, ror #30
     390:	00015910 	andeq	r5, r1, r0, lsl r9
     394:	9e2f0100 	suflse	f0, f7, f0
     398:	05000000 	streq	r0, [r0, #-0]
     39c:	001f4803 	andseq	r4, pc, r3, lsl #16
     3a0:	01651020 	cmneq	r5, r0, lsr #32
     3a4:	30010000 	andcc	r0, r1, r0
     3a8:	0000009e 	muleq	r0, lr, r0
     3ac:	1fb40305 	svcne	0x00b40305
     3b0:	09102000 	ldmdbeq	r0, {sp}
     3b4:	01000003 	tsteq	r0, r3
     3b8:	00009e31 	andeq	r9, r0, r1, lsr lr
     3bc:	80030500 	andhi	r0, r3, r0, lsl #10
     3c0:	1020001f 	eorne	r0, r0, pc, lsl r0
     3c4:	000000fd 	strdeq	r0, [r0], -sp
     3c8:	009e3201 	addseq	r3, lr, r1, lsl #4
     3cc:	03050000 	movweq	r0, #20480	; 0x5000
     3d0:	20001fc8 	andcs	r1, r0, r8, asr #31
     3d4:	00000010 	andeq	r0, r0, r0, lsl r0
     3d8:	9e330100 	rsflss	f0, f3, f0
     3dc:	05000000 	streq	r0, [r0, #-0]
     3e0:	001f9c03 	andseq	r9, pc, r3, lsl #24
     3e4:	02c81020 	sbceq	r1, r8, #32
     3e8:	34010000 	strcc	r0, [r1], #-0
     3ec:	0000009e 	muleq	r0, lr, r0
     3f0:	1fb00305 	svcne	0x00b00305
     3f4:	f2102000 	vhadd.s16	d2, d0, d0
     3f8:	01000003 	tsteq	r0, r3
     3fc:	00006236 	andeq	r6, r0, r6, lsr r2
     400:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
     404:	1020001f 	eorne	r0, r0, pc, lsl r0
     408:	00000128 	andeq	r0, r0, r8, lsr #2
     40c:	00623701 	rsbeq	r3, r2, r1, lsl #14
     410:	03050000 	movweq	r0, #20480	; 0x5000
     414:	20001f90 	mulcs	r0, r0, pc	; <UNPREDICTABLE>
     418:	0002a910 	andeq	sl, r2, r0, lsl r9
     41c:	62380100 	eorsvs	r0, r8, #0, 2
     420:	05000000 	streq	r0, [r0, #-0]
     424:	001f6803 	andseq	r6, pc, r3, lsl #16
     428:	03ba1020 			; <UNDEFINED> instruction: 0x03ba1020
     42c:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
     430:	00000062 	andeq	r0, r0, r2, rrx
     434:	1fbc0305 	svcne	0x00bc0305
     438:	71102000 	tstvc	r0, r0
     43c:	01000003 	tsteq	r0, r3
     440:	0000623b 	andeq	r6, r0, fp, lsr r2
     444:	30030500 	andcc	r0, r3, r0, lsl #10
     448:	1020001f 	eorne	r0, r0, pc, lsl r0
     44c:	00000345 	andeq	r0, r0, r5, asr #6
     450:	00623c01 	rsbeq	r3, r2, r1, lsl #24
     454:	03050000 	movweq	r0, #20480	; 0x5000
     458:	20001fa0 	andcs	r1, r0, r0, lsr #31
     45c:	00039210 	andeq	r9, r3, r0, lsl r2
     460:	623d0100 	eorsvs	r0, sp, #0, 2
     464:	05000000 	streq	r0, [r0, #-0]
     468:	001f8403 	andseq	r8, pc, r3, lsl #8
     46c:	00e51020 	rsceq	r1, r5, r0, lsr #32
     470:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
     474:	00000062 	andeq	r0, r0, r2, rrx
     478:	1f580305 	svcne	0x00580305
     47c:	c1102000 	tstgt	r0, r0
     480:	01000003 	tsteq	r0, r3
     484:	0000623f 	andeq	r6, r0, pc, lsr r2
     488:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
     48c:	1020001f 	eorne	r0, r0, pc, lsl r0
     490:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
     494:	00624001 	rsbeq	r4, r2, r1
     498:	03050000 	movweq	r0, #20480	; 0x5000
     49c:	20001f74 	andcs	r1, r0, r4, ror pc
     4a0:	00002e10 	andeq	r2, r0, r0, lsl lr
     4a4:	2e6a0100 	powcse	f0, f2, f0
     4a8:	05000001 	streq	r0, [r0, #-1]
     4ac:	001f1803 	andseq	r1, pc, r3, lsl #16
     4b0:	01391320 	teqeq	r9, r0, lsr #6
     4b4:	6b010000 	blvs	404bc <startup-0x1ffbfb44>
     4b8:	20000198 	mulcs	r0, r8, r1
     4bc:	00000328 	andeq	r0, r0, r8, lsr #6
     4c0:	060f9c01 	streq	r9, [pc], -r1, lsl #24
     4c4:	e7110000 	ldr	r0, [r1, -r0]
     4c8:	01000003 	tsteq	r0, r3
     4cc:	00014c79 	andeq	r4, r1, r9, ror ip
     4d0:	4c910200 	lfmmi	f0, 4, [r1], {0}
     4d4:	00042711 	andeq	r2, r4, r1, lsl r7
     4d8:	a47a0100 	ldrbtge	r0, [sl], #-256	; 0xffffff00
     4dc:	02000000 	andeq	r0, r0, #0
     4e0:	2b114091 	blcs	45072c <startup-0x1fbaf8d4>
     4e4:	01000003 	tsteq	r0, r3
     4e8:	00060f7b 	andeq	r0, r6, fp, ror pc
     4ec:	b4910300 	ldrlt	r0, [r1], #768	; 0x300
     4f0:	0144117f 	hvceq	16671	; 0x411f
     4f4:	83010000 	movwhi	r0, #4096	; 0x1000
     4f8:	0000014c 	andeq	r0, r0, ip, asr #2
     4fc:	7f909103 	svcvc	0x00909103
     500:	00043411 	andeq	r3, r4, r1, lsl r4
     504:	a4840100 	strge	r0, [r4], #256	; 0x100
     508:	03000000 	movweq	r0, #0
     50c:	117f8491 			; <UNDEFINED> instruction: 0x117f8491
     510:	000002da 	ldrdeq	r0, [r0], -sl
     514:	060f8501 	streq	r8, [pc], -r1, lsl #10
     518:	91030000 	mrsls	r0, (UNDEF: 3)
     51c:	02117ef8 	andseq	r7, r1, #248, 28	; 0xf80
     520:	01000002 	tsteq	r0, r2
     524:	00014c92 	muleq	r1, r2, ip
     528:	d4910300 	ldrle	r0, [r1], #768	; 0x300
     52c:	04ec117e 	strbteq	r1, [ip], #382	; 0x17e
     530:	93010000 	movwls	r0, #4096	; 0x1000
     534:	000000a4 	andeq	r0, r0, r4, lsr #1
     538:	7ec89103 	acsvce	f1, f3
     53c:	0004ae11 	andeq	sl, r4, r1, lsl lr
     540:	0f940100 	svceq	0x00940100
     544:	03000006 	movweq	r0, #6
     548:	117ebc91 			; <UNDEFINED> instruction: 0x117ebc91
     54c:	000004d7 	ldrdeq	r0, [r0], -r7
     550:	014c9b01 	cmpeq	ip, r1, lsl #22
     554:	91030000 	mrsls	r0, (UNDEF: 3)
     558:	16117e98 			; <UNDEFINED> instruction: 0x16117e98
     55c:	01000005 	tsteq	r0, r5
     560:	00014c9d 	muleq	r1, sp, ip
     564:	f4910300 			; <UNDEFINED> instruction: 0xf4910300
     568:	0339117d 	teqeq	r9, #1073741855	; 0x4000001f
     56c:	ab010000 	blge	40574 <startup-0x1ffbfa8c>
     570:	0000032a 	andeq	r0, r0, sl, lsr #6
     574:	7de09103 	stfvcp	f1, [r0, #12]!
     578:	00033f11 	andeq	r3, r3, r1, lsl pc
     57c:	2aac0100 	bcs	feb00984 <firstTime.4076+0xdeafb674>
     580:	03000003 	movweq	r0, #3
     584:	117dcc91 			; <UNDEFINED> instruction: 0x117dcc91
     588:	0000013e 	andeq	r0, r0, lr, lsr r1
     58c:	032aad01 			; <UNDEFINED> instruction: 0x032aad01
     590:	91030000 	mrsls	r0, (UNDEF: 3)
     594:	77117db8 			; <UNDEFINED> instruction: 0x77117db8
     598:	01000002 	tsteq	r0, r2
     59c:	00032aae 	andeq	r2, r3, lr, lsr #21
     5a0:	a4910300 	ldrge	r0, [r1], #768	; 0x300
     5a4:	0365117d 	cmneq	r5, #1073741855	; 0x4000001f
     5a8:	af010000 	svcge	0x00010000
     5ac:	0000032a 	andeq	r0, r0, sl, lsr #6
     5b0:	7d909103 	ldfvcd	f1, [r0, #12]
     5b4:	00036b11 	andeq	r6, r3, r1, lsl fp
     5b8:	2ab00100 	bcs	fec009c0 <firstTime.4076+0xdebfb6b0>
     5bc:	03000003 	movweq	r0, #3
     5c0:	117cfc91 			; <UNDEFINED> instruction: 0x117cfc91
     5c4:	00000287 	andeq	r0, r0, r7, lsl #5
     5c8:	032ab101 			; <UNDEFINED> instruction: 0x032ab101
     5cc:	91030000 	mrsls	r0, (UNDEF: 3)
     5d0:	8d117ce8 	ldchi	12, cr7, [r1, #-928]	; 0xfffffc60
     5d4:	01000002 	tsteq	r0, r2
     5d8:	00032ab2 			; <UNDEFINED> instruction: 0x00032ab2
     5dc:	d4910300 	ldrle	r0, [r1], #768	; 0x300
     5e0:	0188117c 	orreq	r1, r8, ip, ror r1
     5e4:	b3010000 	movwlt	r0, #4096	; 0x1000
     5e8:	0000032a 	andeq	r0, r0, sl, lsr #6
     5ec:	7cc09103 	stfvcp	f1, [r0], {3}
     5f0:	00021c11 	andeq	r1, r2, r1, lsl ip
     5f4:	2ab40100 	bcs	fed009fc <firstTime.4076+0xdecfb6ec>
     5f8:	03000003 	movweq	r0, #3
     5fc:	117cac91 			; <UNDEFINED> instruction: 0x117cac91
     600:	000001d7 	ldrdeq	r0, [r0], -r7
     604:	032ab501 			; <UNDEFINED> instruction: 0x032ab501
     608:	91030000 	mrsls	r0, (UNDEF: 3)
     60c:	0b007c98 	bleq	1f874 <startup-0x1ffe078c>
     610:	000000a4 	andeq	r0, r0, r4, lsr #1
     614:	0000061f 	andeq	r0, r0, pc, lsl r6
     618:	00019a0f 	andeq	r9, r1, pc, lsl #20
     61c:	13000000 	movwne	r0, #0
     620:	000003cf 	andeq	r0, r0, pc, asr #7
     624:	00344201 	eorseq	r4, r4, r1, lsl #4
     628:	01642000 	cmneq	r4, r0
     62c:	9c010000 	stcls	0, cr0, [r1], {-0}
     630:	000006c1 	andeq	r0, r0, r1, asr #13
     634:	00041811 	andeq	r1, r4, r1, lsl r8
     638:	9e430100 	dvflss	f0, f3, f0
     63c:	02000000 	andeq	r0, r0, #0
     640:	0c117491 	cfldrseq	mvf7, [r1], {145}	; 0x91
     644:	01000002 	tsteq	r0, r2
     648:	00009e47 	andeq	r9, r0, r7, asr #28
     64c:	70910200 	addsvc	r0, r1, r0, lsl #4
     650:	00048611 	andeq	r8, r4, r1, lsl r6
     654:	9e4b0100 	dvflse	f0, f3, f0
     658:	02000000 	andeq	r0, r0, #0
     65c:	8e116c91 	mrchi	12, 0, r6, cr1, cr1, {4}
     660:	01000001 	tsteq	r0, r1
     664:	00009e4f 	andeq	r9, r0, pc, asr #28
     668:	68910200 	ldmvs	r1, {r9}
     66c:	00000a11 	andeq	r0, r0, r1, lsl sl
     670:	9e530100 	rdflss	f0, f3, f0
     674:	02000000 	andeq	r0, r0, #0
     678:	9f116491 	svcls	0x00116491
     67c:	01000001 	tsteq	r0, r1
     680:	00009e57 	andeq	r9, r0, r7, asr lr
     684:	60910200 	addsvs	r0, r1, r0, lsl #4
     688:	00003611 	andeq	r3, r0, r1, lsl r6
     68c:	9e5b0100 	rdflse	f0, f3, f0
     690:	02000000 	andeq	r0, r0, #0
     694:	3f115c91 	svccc	0x00115c91
     698:	01000000 	mrseq	r0, (UNDEF: 0)
     69c:	00009e5f 	andeq	r9, r0, pc, asr lr
     6a0:	58910200 	ldmpl	r1, {r9}
     6a4:	0001c811 	andeq	ip, r1, r1, lsl r8
     6a8:	9e620100 	powlss	f0, f2, f0
     6ac:	02000000 	andeq	r0, r0, #0
     6b0:	cd115491 	cfldrsgt	mvf5, [r1, #-580]	; 0xfffffdbc
     6b4:	01000004 	tsteq	r0, r4
     6b8:	00009e65 	andeq	r9, r0, r5, ror #28
     6bc:	50910200 	addspl	r0, r1, r0, lsl #4
     6c0:	03151400 	tsteq	r5, #0, 8
     6c4:	16010000 	strne	r0, [r1], -r0
     6c8:	20000010 	andcs	r0, r0, r0, lsl r0
     6cc:	00000024 	andeq	r0, r0, r4, lsr #32
     6d0:	96159c01 	ldrls	r9, [r5], -r1, lsl #24
     6d4:	01000004 	tsteq	r0, r4
     6d8:	00000020 	andeq	r0, r0, r0, lsr #32
     6dc:	00000c20 	andeq	r0, r0, r0, lsr #24
     6e0:	009c0100 	addseq	r0, ip, r0, lsl #2
     6e4:	000001e0 	andeq	r0, r0, r0, ror #3
     6e8:	01250004 			; <UNDEFINED> instruction: 0x01250004
     6ec:	01040000 	mrseq	r0, (UNDEF: 4)
     6f0:	00000048 	andeq	r0, r0, r8, asr #32
     6f4:	00052d0c 	andeq	r2, r5, ip, lsl #26
     6f8:	0004c000 	andeq	ip, r4, r0
     6fc:	00005620 	andeq	r5, r0, r0, lsr #12
     700:	0001d800 	andeq	sp, r1, r0, lsl #16
     704:	020c0200 	andeq	r0, ip, #0, 4
     708:	00004e05 	andeq	r4, r0, r5, lsl #28
     70c:	01d10300 	bicseq	r0, r1, r0, lsl #6
     710:	07020000 	streq	r0, [r2, -r0]
     714:	0000004e 	andeq	r0, r0, lr, asr #32
     718:	02d30300 	sbcseq	r0, r3, #0, 6
     71c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     720:	0000004e 	andeq	r0, r0, lr, asr #32
     724:	09610304 	stmdbeq	r1!, {r2, r8, r9}^
     728:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     72c:	00000055 	andeq	r0, r0, r5, asr r0
     730:	04040008 	streq	r0, [r4], #-8
     734:	0002fc07 	andeq	pc, r2, r7, lsl #24
     738:	5b040500 	blpl	101b40 <startup-0x1fefe4c0>
     73c:	04000000 	streq	r0, [r0], #-0
     740:	029b0801 	addseq	r0, fp, #65536	; 0x10000
     744:	b3060000 	movwlt	r0, #24576	; 0x6000
     748:	0200000a 	andeq	r0, r0, #10
     74c:	0000210a 	andeq	r2, r0, sl, lsl #2
     750:	02700700 	rsbseq	r0, r0, #0, 14
     754:	030c0000 	movweq	r0, #49152	; 0xc000
     758:	00009e06 	andeq	r9, r0, r6, lsl #28
     75c:	03fe0300 	mvnseq	r0, #0, 6
     760:	07030000 	streq	r0, [r3, -r0]
     764:	0000009e 	muleq	r0, lr, r0
     768:	04090300 	streq	r0, [r9], #-768	; 0xfffffd00
     76c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     770:	0000009e 	muleq	r0, lr, r0
     774:	026c0304 	rsbeq	r0, ip, #4, 6	; 0x10000000
     778:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
     77c:	0000009e 	muleq	r0, lr, r0
     780:	04050008 	streq	r0, [r5], #-8
     784:	00000062 	andeq	r0, r0, r2, rrx
     788:	00071e06 	andeq	r1, r7, r6, lsl #28
     78c:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
     790:	07000000 	streq	r0, [r0, -r0]
     794:	0000014d 	andeq	r0, r0, sp, asr #2
     798:	28060424 	stmdacs	r6, {r2, r5, sl}
     79c:	03000001 	movweq	r0, #1
     7a0:	000004e5 	andeq	r0, r0, r5, ror #9
     7a4:	01280704 			; <UNDEFINED> instruction: 0x01280704
     7a8:	03000000 	movweq	r0, #0
     7ac:	000000e0 	andeq	r0, r0, r0, ror #1
     7b0:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
     7b4:	03040000 	movweq	r0, #16384	; 0x4000
     7b8:	000001fd 	strdeq	r0, [r0], -sp
     7bc:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
     7c0:	03080000 	movweq	r0, #32768	; 0x8000
     7c4:	000001f6 	strdeq	r0, [r0], -r6
     7c8:	01460c04 	cmpeq	r6, r4, lsl #24
     7cc:	030c0000 	movweq	r0, #49152	; 0xc000
     7d0:	00000223 	andeq	r0, r0, r3, lsr #4
     7d4:	01460d04 	cmpeq	r6, r4, lsl #26
     7d8:	03100000 	tsteq	r0, #0
     7dc:	00000108 	andeq	r0, r0, r8, lsl #2
     7e0:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
     7e4:	03140000 	tsteq	r4, #0
     7e8:	000003b1 			; <UNDEFINED> instruction: 0x000003b1
     7ec:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
     7f0:	03180000 	tsteq	r8, #0
     7f4:	0000049e 	muleq	r0, lr, r4
     7f8:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
     7fc:	031c0000 	tsteq	ip, #0
     800:	00000024 	andeq	r0, r0, r4, lsr #32
     804:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
     808:	00200000 	eoreq	r0, r0, r0
     80c:	00a40405 	adceq	r0, r4, r5, lsl #8
     810:	04080000 	streq	r0, [r8], #-0
     814:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     818:	01400900 	cmpeq	r0, r0, lsl #18
     81c:	400a0000 	andmi	r0, sl, r0
     820:	00000001 	andeq	r0, r0, r1
     824:	00af0405 	adceq	r0, pc, r5, lsl #8
     828:	04050000 	streq	r0, [r5], #-0
     82c:	00000135 	andeq	r0, r0, r5, lsr r1
     830:	00014e06 	andeq	r4, r1, r6, lsl #28
     834:	af150400 	svcge	0x00150400
     838:	0b000000 	bleq	840 <startup-0x1ffff7c0>
     83c:	00000162 	andeq	r0, r0, r2, ror #2
     840:	00000162 	andeq	r0, r0, r2, ror #2
     844:	0405000c 	streq	r0, [r5], #-12
     848:	0000014c 	andeq	r0, r0, ip, asr #2
     84c:	0003db0d 	andeq	sp, r3, sp, lsl #22
     850:	571a0400 	ldrpl	r0, [sl, -r0, lsl #8]
     854:	0d000001 	stceq	0, cr0, [r0, #-4]
     858:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
     85c:	012e1b04 			; <UNDEFINED> instruction: 0x012e1b04
     860:	04040000 	streq	r0, [r4], #-0
     864:	0000f407 	andeq	pc, r0, r7, lsl #8
     868:	01680e00 	cmneq	r8, r0, lsl #28
     86c:	03010000 	movweq	r0, #4096	; 0x1000
     870:	1fcc0305 	svcne	0x00cc0305
     874:	730e2000 	movwvc	r2, #57344	; 0xe000
     878:	01000001 	tsteq	r0, r1
     87c:	1c030504 	cfstr32ne	mvfx0, [r3], {4}
     880:	0f20001f 	svceq	0x0020001f
     884:	0000051c 	andeq	r0, r0, ip, lsl r5
     888:	04d00c01 	ldrbeq	r0, [r0], #3073	; 0xc01
     88c:	00462000 	subeq	r2, r6, r0
     890:	9c010000 	stcls	0, cr0, [r1], {-0}
     894:	000001c3 	andeq	r0, r0, r3, asr #3
     898:	00056210 	andeq	r6, r5, r0, lsl r2
     89c:	620c0100 	andvs	r0, ip, #0, 2
     8a0:	02000001 	andeq	r0, r0, #1
     8a4:	11007491 			; <UNDEFINED> instruction: 0x11007491
     8a8:	00000223 	andeq	r0, r0, r3, lsr #4
     8ac:	04c00701 	strbeq	r0, [r0], #1793	; 0x701
     8b0:	00102000 	andseq	r2, r0, r0
     8b4:	9c010000 	stcls	0, cr0, [r1], {-0}
     8b8:	00056210 	andeq	r6, r5, r0, lsl r2
     8bc:	62070100 	andvs	r0, r7, #0, 2
     8c0:	02000001 	andeq	r0, r0, #1
     8c4:	00007491 	muleq	r0, r1, r4
     8c8:	0000052b 	andeq	r0, r0, fp, lsr #10
     8cc:	020b0004 	andeq	r0, fp, #4
     8d0:	01040000 	mrseq	r0, (UNDEF: 4)
     8d4:	00000048 	andeq	r0, r0, r8, asr #32
     8d8:	0007a20c 	andeq	sl, r7, ip, lsl #4
     8dc:	00051800 	andeq	r1, r5, r0, lsl #16
     8e0:	0002a820 	andeq	sl, r2, r0, lsr #16
     8e4:	00026800 	andeq	r6, r2, r0, lsl #16
     8e8:	020c0200 	andeq	r0, ip, #0, 4
     8ec:	00004e05 	andeq	r4, r0, r5, lsl #28
     8f0:	01d10300 	bicseq	r0, r1, r0, lsl #6
     8f4:	07020000 	streq	r0, [r2, -r0]
     8f8:	0000004e 	andeq	r0, r0, lr, asr #32
     8fc:	02d30300 	sbcseq	r0, r3, #0, 6
     900:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     904:	0000004e 	andeq	r0, r0, lr, asr #32
     908:	09610304 	stmdbeq	r1!, {r2, r8, r9}^
     90c:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     910:	00000055 	andeq	r0, r0, r5, asr r0
     914:	04040008 	streq	r0, [r4], #-8
     918:	0002fc07 	andeq	pc, r2, r7, lsl #24
     91c:	5b040500 	blpl	101d24 <startup-0x1fefe2dc>
     920:	04000000 	streq	r0, [r0], #-0
     924:	029b0801 	addseq	r0, fp, #65536	; 0x10000
     928:	b3060000 	movwlt	r0, #24576	; 0x6000
     92c:	0200000a 	andeq	r0, r0, #10
     930:	0000210a 	andeq	r2, r0, sl, lsl #2
     934:	02700700 	rsbseq	r0, r0, #0, 14
     938:	030c0000 	movweq	r0, #49152	; 0xc000
     93c:	00009e06 	andeq	r9, r0, r6, lsl #28
     940:	03fe0300 	mvnseq	r0, #0, 6
     944:	07030000 	streq	r0, [r3, -r0]
     948:	0000009e 	muleq	r0, lr, r0
     94c:	04090300 	streq	r0, [r9], #-768	; 0xfffffd00
     950:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     954:	0000009e 	muleq	r0, lr, r0
     958:	026c0304 	rsbeq	r0, ip, #4, 6	; 0x10000000
     95c:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
     960:	0000009e 	muleq	r0, lr, r0
     964:	04050008 	streq	r0, [r5], #-8
     968:	00000062 	andeq	r0, r0, r2, rrx
     96c:	00071e06 	andeq	r1, r7, r6, lsl #28
     970:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
     974:	07000000 	streq	r0, [r0, -r0]
     978:	0000014d 	andeq	r0, r0, sp, asr #2
     97c:	28060424 	stmdacs	r6, {r2, r5, sl}
     980:	03000001 	movweq	r0, #1
     984:	000004e5 	andeq	r0, r0, r5, ror #9
     988:	01280704 			; <UNDEFINED> instruction: 0x01280704
     98c:	03000000 	movweq	r0, #0
     990:	000000e0 	andeq	r0, r0, r0, ror #1
     994:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
     998:	03040000 	movweq	r0, #16384	; 0x4000
     99c:	000001fd 	strdeq	r0, [r0], -sp
     9a0:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
     9a4:	03080000 	movweq	r0, #32768	; 0x8000
     9a8:	000001f6 	strdeq	r0, [r0], -r6
     9ac:	01460c04 	cmpeq	r6, r4, lsl #24
     9b0:	030c0000 	movweq	r0, #49152	; 0xc000
     9b4:	00000223 	andeq	r0, r0, r3, lsr #4
     9b8:	01460d04 	cmpeq	r6, r4, lsl #26
     9bc:	03100000 	tsteq	r0, #0
     9c0:	00000108 	andeq	r0, r0, r8, lsl #2
     9c4:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
     9c8:	03140000 	tsteq	r4, #0
     9cc:	000003b1 			; <UNDEFINED> instruction: 0x000003b1
     9d0:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
     9d4:	03180000 	tsteq	r8, #0
     9d8:	0000049e 	muleq	r0, lr, r4
     9dc:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
     9e0:	031c0000 	tsteq	ip, #0
     9e4:	00000024 	andeq	r0, r0, r4, lsr #32
     9e8:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
     9ec:	00200000 	eoreq	r0, r0, r0
     9f0:	00a40405 	adceq	r0, r4, r5, lsl #8
     9f4:	04080000 	streq	r0, [r8], #-0
     9f8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     9fc:	01400900 	cmpeq	r0, r0, lsl #18
     a00:	400a0000 	andmi	r0, sl, r0
     a04:	00000001 	andeq	r0, r0, r1
     a08:	00af0405 	adceq	r0, pc, r5, lsl #8
     a0c:	04050000 	streq	r0, [r5], #-0
     a10:	00000135 	andeq	r0, r0, r5, lsr r1
     a14:	00014e06 	andeq	r4, r1, r6, lsl #28
     a18:	af150400 	svcge	0x00150400
     a1c:	0b000000 	bleq	a24 <startup-0x1ffff5dc>
     a20:	00000162 	andeq	r0, r0, r2, ror #2
     a24:	00000162 	andeq	r0, r0, r2, ror #2
     a28:	0405000c 	streq	r0, [r5], #-12
     a2c:	0000014c 	andeq	r0, r0, ip, asr #2
     a30:	0003db0d 	andeq	sp, r3, sp, lsl #22
     a34:	571a0400 	ldrpl	r0, [sl, -r0, lsl #8]
     a38:	0d000001 	stceq	0, cr0, [r0, #-4]
     a3c:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
     a40:	012e1b04 			; <UNDEFINED> instruction: 0x012e1b04
     a44:	5b0b0000 	blpl	2c0a4c <startup-0x1fd3f5b4>
     a48:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
     a4c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     a50:	0000018e 	andeq	r0, r0, lr, lsl #3
     a54:	0404000b 	streq	r0, [r4], #-11
     a58:	0000f407 	andeq	pc, r0, r7, lsl #8
     a5c:	07670f00 	strbeq	r0, [r7, -r0, lsl #30]!
     a60:	03050000 	movweq	r0, #20480	; 0x5000
     a64:	0000017e 	andeq	r0, r0, lr, ror r1
     a68:	528c0305 	addpl	r0, ip, #335544320	; 0x14000000
     a6c:	610f2000 	mrsvs	r2, CPSR
     a70:	06000006 	streq	r0, [r0], -r6
     a74:	00017e03 	andeq	r7, r1, r3, lsl #28
     a78:	98030500 	stmdals	r3, {r8, sl}
     a7c:	0f200052 	svceq	0x00200052
     a80:	0000067c 	andeq	r0, r0, ip, ror r6
     a84:	017e0307 	cmneq	lr, r7, lsl #6
     a88:	03050000 	movweq	r0, #20480	; 0x5000
     a8c:	200052a4 	andcs	r5, r0, r4, lsr #5
     a90:	0005dd0f 	andeq	sp, r5, pc, lsl #26
     a94:	7e030800 	cdpvc	8, 0, cr0, cr3, cr0, {0}
     a98:	05000001 	streq	r0, [r0, #-1]
     a9c:	0052b003 	subseq	fp, r2, r3
     aa0:	068d0f20 	streq	r0, [sp], r0, lsr #30
     aa4:	03090000 	movweq	r0, #36864	; 0x9000
     aa8:	0000017e 	andeq	r0, r0, lr, ror r1
     aac:	52bc0305 	adcspl	r0, ip, #335544320	; 0x14000000
     ab0:	cf0f2000 	svcgt	0x000f2000
     ab4:	0a000007 	beq	ad8 <startup-0x1ffff528>
     ab8:	00017e03 	andeq	r7, r1, r3, lsl #28
     abc:	c8030500 	stmdagt	r3, {r8, sl}
     ac0:	0f200052 	svceq	0x00200052
     ac4:	0000074b 	andeq	r0, r0, fp, asr #14
     ac8:	017e030b 	cmneq	lr, fp, lsl #6
     acc:	03050000 	movweq	r0, #20480	; 0x5000
     ad0:	200052d4 	ldrdcs	r5, [r0], -r4
     ad4:	0006b00f 	andeq	fp, r6, pc
     ad8:	7e030c00 	cdpvc	12, 0, cr0, cr3, cr0, {0}
     adc:	05000001 	streq	r0, [r0, #-1]
     ae0:	0052e003 	subseq	lr, r2, r3
     ae4:	05ed0f20 	strbeq	r0, [sp, #3872]!	; 0xf20
     ae8:	030d0000 	movweq	r0, #53248	; 0xd000
     aec:	0000017e 	andeq	r0, r0, lr, ror r1
     af0:	52ec0305 	rscpl	r0, ip, #335544320	; 0x14000000
     af4:	1b0f2000 	blne	3c8afc <startup-0x1fc37504>
     af8:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
     afc:	00017e03 	andeq	r7, r1, r3, lsl #28
     b00:	f8030500 			; <UNDEFINED> instruction: 0xf8030500
     b04:	0f200052 	svceq	0x00200052
     b08:	000006fd 	strdeq	r0, [r0], -sp
     b0c:	017e030f 	cmneq	lr, pc, lsl #6
     b10:	03050000 	movweq	r0, #20480	; 0x5000
     b14:	20005304 	andcs	r5, r0, r4, lsl #6
     b18:	0005a110 	andeq	sl, r5, r0, lsl r1
     b1c:	9e110100 	muflss	f0, f1, f0
     b20:	05000000 	streq	r0, [r0, #-0]
     b24:	00228c03 	eoreq	r8, r2, r3, lsl #24
     b28:	05711020 	ldrbeq	r1, [r1, #-32]!	; 0xffffffe0
     b2c:	12010000 	andne	r0, r1, #0
     b30:	0000009e 	muleq	r0, lr, r0
     b34:	22a40305 	adccs	r0, r4, #335544320	; 0x14000000
     b38:	c7102000 	ldrgt	r2, [r0, -r0]
     b3c:	01000005 	tsteq	r0, r5
     b40:	00009e13 	andeq	r9, r0, r3, lsl lr
     b44:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
     b48:	10200021 	eorne	r0, r0, r1, lsr #32
     b4c:	000006a6 	andeq	r0, r0, r6, lsr #13
     b50:	009e1401 	addseq	r1, lr, r1, lsl #8
     b54:	03050000 	movweq	r0, #20480	; 0x5000
     b58:	200022a0 	andcs	r2, r0, r0, lsr #5
     b5c:	00067110 	andeq	r7, r6, r0, lsl r1
     b60:	9e150100 	muflss	f0, f5, f0
     b64:	05000000 	streq	r0, [r0, #-0]
     b68:	00227803 	eoreq	r7, r2, r3, lsl #16
     b6c:	05891020 	streq	r1, [r9, #32]
     b70:	16010000 	strne	r0, [r1], -r0
     b74:	0000009e 	muleq	r0, lr, r0
     b78:	216c0305 	cmncs	ip, r5, lsl #6
     b7c:	fe102000 	cdp2	0, 1, cr2, cr0, cr0, {0}
     b80:	01000005 	tsteq	r0, r5
     b84:	00009e17 	andeq	r9, r0, r7, lsl lr
     b88:	9c030500 	cfstr32ls	mvfx0, [r3], {-0}
     b8c:	10200022 	eorne	r0, r0, r2, lsr #32
     b90:	00000724 	andeq	r0, r0, r4, lsr #14
     b94:	009e1801 	addseq	r1, lr, r1, lsl #16
     b98:	03050000 	movweq	r0, #20480	; 0x5000
     b9c:	20002258 	andcs	r2, r0, r8, asr r2
     ba0:	0005d210 	andeq	sp, r5, r0, lsl r2
     ba4:	9e190100 	muflse	f0, f1, f0
     ba8:	05000000 	streq	r0, [r0, #-0]
     bac:	0021c403 	eoreq	ip, r1, r3, lsl #8
     bb0:	05671020 	strbeq	r1, [r7, #-32]!	; 0xffffffe0
     bb4:	1a010000 	bne	40bbc <startup-0x1ffbf444>
     bb8:	0000009e 	muleq	r0, lr, r0
     bbc:	22740305 	rsbscs	r0, r4, #335544320	; 0x14000000
     bc0:	3f102000 	svccc	0x00102000
     bc4:	01000006 	tsteq	r0, r6
     bc8:	00009e1b 	andeq	r9, r0, fp, lsl lr
     bcc:	7c030500 	cfstr32vc	mvfx0, [r3], {-0}
     bd0:	10200022 	eorne	r0, r0, r2, lsr #32
     bd4:	000005b9 			; <UNDEFINED> instruction: 0x000005b9
     bd8:	00621d01 	rsbeq	r1, r2, r1, lsl #26
     bdc:	03050000 	movweq	r0, #20480	; 0x5000
     be0:	20002194 	mulcs	r0, r4, r1
     be4:	00072e10 	andeq	r2, r7, r0, lsl lr
     be8:	621e0100 	andsvs	r0, lr, #0, 2
     bec:	05000000 	streq	r0, [r0, #-0]
     bf0:	00228003 	eoreq	r8, r2, r3
     bf4:	06da1020 	ldrbeq	r1, [sl], r0, lsr #32
     bf8:	1f010000 	svcne	0x00010000
     bfc:	00000062 	andeq	r0, r0, r2, rrx
     c00:	225c0305 	subscs	r0, ip, #335544320	; 0x14000000
     c04:	7b102000 	blvc	408c0c <startup-0x1fbf73f4>
     c08:	01000005 	tsteq	r0, r5
     c0c:	00006220 	andeq	r6, r0, r0, lsr #4
     c10:	88030500 	stmdahi	r3, {r8, sl}
     c14:	10200021 	eorne	r0, r0, r1, lsr #32
     c18:	00000779 	andeq	r0, r0, r9, ror r7
     c1c:	00622101 	rsbeq	r2, r2, r1, lsl #2
     c20:	03050000 	movweq	r0, #20480	; 0x5000
     c24:	20002290 	mulcs	r0, r0, r2
     c28:	0005ab10 	andeq	sl, r5, r0, lsl fp
     c2c:	62220100 	eorvs	r0, r2, #0, 2
     c30:	05000000 	streq	r0, [r0, #-0]
     c34:	00224003 	eoreq	r4, r2, r3
     c38:	06c01020 	strbeq	r1, [r0], r0, lsr #32
     c3c:	23010000 	movwcs	r0, #4096	; 0x1000
     c40:	00000062 	andeq	r0, r0, r2, rrx
     c44:	21600305 	cmncs	r0, r5, lsl #6
     c48:	93102000 	tstls	r0, #0
     c4c:	01000005 	tsteq	r0, r5
     c50:	00006224 	andeq	r6, r0, r4, lsr #4
     c54:	70030500 	andvc	r0, r3, r0, lsl #10
     c58:	10200021 	eorne	r0, r0, r1, lsr #32
     c5c:	0000073c 	andeq	r0, r0, ip, lsr r7
     c60:	00622501 	rsbeq	r2, r2, r1, lsl #10
     c64:	03050000 	movweq	r0, #20480	; 0x5000
     c68:	200021ac 	andcs	r2, r0, ip, lsr #3
     c6c:	00065310 	andeq	r5, r6, r0, lsl r3
     c70:	62260100 	eorvs	r0, r6, #0, 2
     c74:	05000000 	streq	r0, [r0, #-0]
     c78:	00223403 	eoreq	r3, r2, r3, lsl #8
     c7c:	07931020 	ldreq	r1, [r3, r0, lsr #32]
     c80:	27010000 	strcs	r0, [r1, -r0]
     c84:	00000062 	andeq	r0, r0, r2, rrx
     c88:	22680305 	rsbcs	r0, r8, #335544320	; 0x14000000
     c8c:	9e102000 	cdpls	0, 1, cr2, cr0, cr0, {0}
     c90:	01000006 	tsteq	r0, r6
     c94:	00014c2a 	andeq	r4, r1, sl, lsr #24
     c98:	c8030500 	stmdagt	r3, {r8, sl}
     c9c:	10200021 	eorne	r0, r0, r1, lsr #32
     ca0:	00000719 	andeq	r0, r0, r9, lsl r7
     ca4:	00a42b01 	adceq	r2, r4, r1, lsl #22
     ca8:	03050000 	movweq	r0, #20480	; 0x5000
     cac:	200021b8 			; <UNDEFINED> instruction: 0x200021b8
     cb0:	00078810 	andeq	r8, r7, r0, lsl r8
     cb4:	a42c0100 	strtge	r0, [ip], #-256	; 0xffffff00
     cb8:	05000000 	streq	r0, [r0, #-0]
     cbc:	00217c03 	eoreq	r7, r1, r3, lsl #24
     cc0:	062b1020 	strteq	r1, [fp], -r0, lsr #32
     cc4:	2d010000 	stccs	0, cr0, [r1, #-0]
     cc8:	000000a4 	andeq	r0, r0, r4, lsr #1
     ccc:	21a00305 	lslcs	r0, r5, #6
     cd0:	cf102000 	svcgt	0x00102000
     cd4:	01000006 	tsteq	r0, r6
     cd8:	0000a42e 	andeq	sl, r0, lr, lsr #8
     cdc:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
     ce0:	10200022 	eorne	r0, r0, r2, lsr #32
     ce4:	0000075c 	andeq	r0, r0, ip, asr r7
     ce8:	00a42f01 	adceq	r2, r4, r1, lsl #30
     cec:	03050000 	movweq	r0, #20480	; 0x5000
     cf0:	200021ec 	andcs	r2, r0, ip, ror #3
     cf4:	0000a40b 	andeq	sl, r0, fp, lsl #8
     cf8:	00043c00 	andeq	r3, r4, r0, lsl #24
     cfc:	018e0e00 	orreq	r0, lr, r0, lsl #28
     d00:	00040000 	andeq	r0, r4, r0
     d04:	00070e10 	andeq	r0, r7, r0, lsl lr
     d08:	2c300100 	ldfcss	f0, [r0], #-0
     d0c:	05000004 	streq	r0, [r0, #-4]
     d10:	0021f803 	eoreq	pc, r1, r3, lsl #16
     d14:	06f31120 	ldrbteq	r1, [r3], r0, lsr #2
     d18:	5f010000 	svcpl	0x00010000
     d1c:	2000069c 	mulcs	r0, ip, r6
     d20:	00000124 	andeq	r0, r0, r4, lsr #2
     d24:	04829c01 	streq	r9, [r2], #3073	; 0xc01
     d28:	9e120000 	cdpls	0, 1, cr0, cr2, cr0, {0}
     d2c:	01000006 	tsteq	r0, r6
     d30:	0001625f 	andeq	r6, r1, pc, asr r2
     d34:	6c910200 	lfmvs	f0, 4, [r1], {0}
     d38:	0006e90f 	andeq	lr, r6, pc, lsl #18
     d3c:	2e600100 	powcss	f0, f0, f0
     d40:	05000001 	streq	r0, [r0, #-1]
     d44:	00531003 	subseq	r1, r3, r3
     d48:	cf130020 	svcgt	0x00130020
     d4c:	01000003 	tsteq	r0, r3
     d50:	00051831 	andeq	r1, r5, r1, lsr r8
     d54:	00018420 	andeq	r8, r1, r0, lsr #8
     d58:	0f9c0100 	svceq	0x009c0100
     d5c:	00000636 	andeq	r0, r0, r6, lsr r6
     d60:	009e3201 	addseq	r3, lr, r1, lsl #4
     d64:	91020000 	mrsls	r0, (UNDEF: 2)
     d68:	06090f74 			; <UNDEFINED> instruction: 0x06090f74
     d6c:	36010000 	strcc	r0, [r1], -r0
     d70:	0000009e 	muleq	r0, lr, r0
     d74:	0f709102 	svceq	0x00709102
     d78:	0000064a 	andeq	r0, r0, sl, asr #12
     d7c:	009e3a01 	addseq	r3, lr, r1, lsl #20
     d80:	91020000 	mrsls	r0, (UNDEF: 2)
     d84:	06120f6c 	ldreq	r0, [r2], -ip, ror #30
     d88:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
     d8c:	0000009e 	muleq	r0, lr, r0
     d90:	0f689102 	svceq	0x00689102
     d94:	0000018e 	andeq	r0, r0, lr, lsl #3
     d98:	009e4201 	addseq	r4, lr, r1, lsl #4
     d9c:	91020000 	mrsls	r0, (UNDEF: 2)
     da0:	000a0f64 	andeq	r0, sl, r4, ror #30
     da4:	46010000 	strmi	r0, [r1], -r0
     da8:	0000009e 	muleq	r0, lr, r0
     dac:	0f609102 	svceq	0x00609102
     db0:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
     db4:	009e4a01 	addseq	r4, lr, r1, lsl #20
     db8:	91020000 	mrsls	r0, (UNDEF: 2)
     dbc:	00360f5c 	eorseq	r0, r6, ip, asr pc
     dc0:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
     dc4:	0000009e 	muleq	r0, lr, r0
     dc8:	0f589102 	svceq	0x00589102
     dcc:	0000003f 	andeq	r0, r0, pc, lsr r0
     dd0:	009e5201 	addseq	r5, lr, r1, lsl #4
     dd4:	91020000 	mrsls	r0, (UNDEF: 2)
     dd8:	01c80f54 	biceq	r0, r8, r4, asr pc
     ddc:	56010000 	strpl	r0, [r1], -r0
     de0:	0000009e 	muleq	r0, lr, r0
     de4:	0f509102 	svceq	0x00509102
     de8:	000004cd 	andeq	r0, r0, sp, asr #9
     dec:	009e5a01 	addseq	r5, lr, r1, lsl #20
     df0:	91020000 	mrsls	r0, (UNDEF: 2)
     df4:	d500004c 	strle	r0, [r0, #-76]	; 0xffffffb4
     df8:	04000001 	streq	r0, [r0], #-1
     dfc:	00030b00 	andeq	r0, r3, r0, lsl #22
     e00:	48010400 	stmdami	r1, {sl}
     e04:	0c000000 	stceq	0, cr0, [r0], {-0}
     e08:	000007fc 	strdeq	r0, [r0], -ip
     e0c:	200007c0 	andcs	r0, r0, r0, asr #15
     e10:	000000d8 	ldrdeq	r0, [r0], -r8
     e14:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     e18:	fc070402 	stc2	4, cr0, [r7], {2}
     e1c:	02000002 	andeq	r0, r0, #2
     e20:	02f60702 	rscseq	r0, r6, #524288	; 0x80000
     e24:	01020000 	mrseq	r0, (UNDEF: 2)
     e28:	00029b08 	andeq	r9, r2, r8, lsl #22
     e2c:	020c0300 	andeq	r0, ip, #0, 6
     e30:	00006305 	andeq	r6, r0, r5, lsl #6
     e34:	01d10400 	bicseq	r0, r1, r0, lsl #8
     e38:	07020000 	streq	r0, [r2, -r0]
     e3c:	00000021 	andeq	r0, r0, r1, lsr #32
     e40:	02d30400 	sbcseq	r0, r3, #0, 8
     e44:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     e48:	00000021 	andeq	r0, r0, r1, lsr #32
     e4c:	09610404 	stmdbeq	r1!, {r2, sl}^
     e50:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     e54:	00000063 	andeq	r0, r0, r3, rrx
     e58:	04050008 	streq	r0, [r5], #-8
     e5c:	0000002f 	andeq	r0, r0, pc, lsr #32
     e60:	000ab306 	andeq	fp, sl, r6, lsl #6
     e64:	360a0200 	strcc	r0, [sl], -r0, lsl #4
     e68:	07000000 	streq	r0, [r0, -r0]
     e6c:	00000270 	andeq	r0, r0, r0, ror r2
     e70:	a506030c 	strge	r0, [r6, #-780]	; 0xfffffcf4
     e74:	04000000 	streq	r0, [r0], #-0
     e78:	000003fe 	strdeq	r0, [r0], -lr
     e7c:	00a50703 	adceq	r0, r5, r3, lsl #14
     e80:	04000000 	streq	r0, [r0], #-0
     e84:	00000409 	andeq	r0, r0, r9, lsl #8
     e88:	00a50803 	adceq	r0, r5, r3, lsl #16
     e8c:	04040000 	streq	r0, [r4], #-0
     e90:	0000026c 	andeq	r0, r0, ip, ror #4
     e94:	00a50903 	adceq	r0, r5, r3, lsl #18
     e98:	00080000 	andeq	r0, r8, r0
     e9c:	00690405 	rsbeq	r0, r9, r5, lsl #8
     ea0:	1e060000 	cdpne	0, 0, cr0, cr6, cr0, {0}
     ea4:	03000007 	movweq	r0, #7
     ea8:	0000740a 	andeq	r7, r0, sl, lsl #8
     eac:	014d0700 	cmpeq	sp, r0, lsl #14
     eb0:	04240000 	strteq	r0, [r4], #-0
     eb4:	00012f06 	andeq	r2, r1, r6, lsl #30
     eb8:	04e50400 	strbteq	r0, [r5], #1024	; 0x400
     ebc:	07040000 	streq	r0, [r4, -r0]
     ec0:	0000012f 	andeq	r0, r0, pc, lsr #2
     ec4:	00e00400 	rsceq	r0, r0, r0, lsl #8
     ec8:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     ecc:	00000135 	andeq	r0, r0, r5, lsr r1
     ed0:	01fd0404 	mvnseq	r0, r4, lsl #8
     ed4:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
     ed8:	00000135 	andeq	r0, r0, r5, lsr r1
     edc:	01f60408 	mvnseq	r0, r8, lsl #8
     ee0:	0c040000 	stceq	0, cr0, [r4], {-0}
     ee4:	0000014d 	andeq	r0, r0, sp, asr #2
     ee8:	0223040c 	eoreq	r0, r3, #12, 8	; 0xc000000
     eec:	0d040000 	stceq	0, cr0, [r4, #-0]
     ef0:	0000014d 	andeq	r0, r0, sp, asr #2
     ef4:	01080410 	tsteq	r8, r0, lsl r4
     ef8:	10040000 	andne	r0, r4, r0
     efc:	00000135 	andeq	r0, r0, r5, lsr r1
     f00:	03b10414 			; <UNDEFINED> instruction: 0x03b10414
     f04:	11040000 	mrsne	r0, (UNDEF: 4)
     f08:	00000135 	andeq	r0, r0, r5, lsr r1
     f0c:	049e0418 	ldreq	r0, [lr], #1048	; 0x418
     f10:	12040000 	andne	r0, r4, #0
     f14:	00000135 	andeq	r0, r0, r5, lsr r1
     f18:	0024041c 	eoreq	r0, r4, ip, lsl r4
     f1c:	13040000 	movwne	r0, #16384	; 0x4000
     f20:	00000135 	andeq	r0, r0, r5, lsr r1
     f24:	04050020 	streq	r0, [r5], #-32	; 0xffffffe0
     f28:	000000ab 	andeq	r0, r0, fp, lsr #1
     f2c:	69050408 	stmdbvs	r5, {r3, sl}
     f30:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     f34:	00000147 	andeq	r0, r0, r7, asr #2
     f38:	0001470a 	andeq	r4, r1, sl, lsl #14
     f3c:	04050000 	streq	r0, [r5], #-0
     f40:	000000b6 	strheq	r0, [r0], -r6
     f44:	013c0405 	teqeq	ip, r5, lsl #8
     f48:	4e060000 	cdpmi	0, 0, cr0, cr6, cr0, {0}
     f4c:	04000001 	streq	r0, [r0], #-1
     f50:	0000b615 	andeq	fp, r0, r5, lsl r6
     f54:	01690b00 	cmneq	r9, r0, lsl #22
     f58:	01690000 	cmneq	r9, r0
     f5c:	000c0000 	andeq	r0, ip, r0
     f60:	01530405 	cmpeq	r3, r5, lsl #8
     f64:	db0d0000 	blle	340f6c <startup-0x1fcbf094>
     f68:	04000003 	streq	r0, [r0], #-3
     f6c:	00015e1a 	andeq	r5, r1, sl, lsl lr
     f70:	01bb0d00 			; <UNDEFINED> instruction: 0x01bb0d00
     f74:	1b040000 	blne	100f7c <startup-0x1feff084>
     f78:	00000135 	andeq	r0, r0, r5, lsr r1
     f7c:	00082b0e 	andeq	r2, r8, lr, lsl #22
     f80:	c0060100 	andgt	r0, r6, r0, lsl #2
     f84:	d8200007 	stmdale	r0!, {r0, r1, r2}
     f88:	01000000 	mrseq	r0, (UNDEF: 0)
     f8c:	05620f9c 	strbeq	r0, [r2, #-3996]!	; 0xfffff064
     f90:	06010000 	streq	r0, [r1], -r0
     f94:	00000169 	andeq	r0, r0, r9, ror #2
     f98:	10749102 	rsbsne	r9, r4, r2, lsl #2
     f9c:	000007df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     fa0:	01350d01 	teqeq	r5, r1, lsl #26
     fa4:	03050000 	movweq	r0, #20480	; 0x5000
     fa8:	20001f20 	andcs	r1, r0, r0, lsr #30
     fac:	0007ee10 	andeq	lr, r7, r0, lsl lr
     fb0:	350e0100 	strcc	r0, [lr, #-256]	; 0xffffff00
     fb4:	05000001 	streq	r0, [r0, #-1]
     fb8:	001f2803 	andseq	r2, pc, r3, lsl #16
     fbc:	04a81020 	strteq	r1, [r8], #32
     fc0:	0f010000 	svceq	0x00010000
     fc4:	00000135 	andeq	r0, r0, r5, lsr r1
     fc8:	1f240305 	svcne	0x00240305
     fcc:	00002000 	andeq	r2, r0, r0
     fd0:	0000089f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
     fd4:	03d90004 	bicseq	r0, r9, #4
     fd8:	01040000 	mrseq	r0, (UNDEF: 4)
     fdc:	00000048 	andeq	r0, r0, r8, asr #32
     fe0:	0009230c 	andeq	r2, r9, ip, lsl #6
     fe4:	00089800 	andeq	r9, r8, r0, lsl #16
     fe8:	000e4420 	andeq	r4, lr, r0, lsr #8
     fec:	00049100 	andeq	r9, r4, r0, lsl #2
     ff0:	020c0200 	andeq	r0, ip, #0, 4
     ff4:	00004e05 	andeq	r4, r0, r5, lsl #28
     ff8:	01d10300 	bicseq	r0, r1, r0, lsl #6
     ffc:	07020000 	streq	r0, [r2, -r0]
    1000:	0000004e 	andeq	r0, r0, lr, asr #32
    1004:	02d30300 	sbcseq	r0, r3, #0, 6
    1008:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    100c:	0000004e 	andeq	r0, r0, lr, asr #32
    1010:	09610304 	stmdbeq	r1!, {r2, r8, r9}^
    1014:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    1018:	00000055 	andeq	r0, r0, r5, asr r0
    101c:	04040008 	streq	r0, [r4], #-8
    1020:	0002fc07 	andeq	pc, r2, r7, lsl #24
    1024:	5b040500 	blpl	10242c <startup-0x1fefdbd4>
    1028:	04000000 	streq	r0, [r0], #-0
    102c:	029b0801 	addseq	r0, fp, #65536	; 0x10000
    1030:	b3060000 	movwlt	r0, #24576	; 0x6000
    1034:	0200000a 	andeq	r0, r0, #10
    1038:	0000210a 	andeq	r2, r0, sl, lsl #2
    103c:	02700700 	rsbseq	r0, r0, #0, 14
    1040:	030c0000 	movweq	r0, #49152	; 0xc000
    1044:	00009e06 	andeq	r9, r0, r6, lsl #28
    1048:	03fe0300 	mvnseq	r0, #0, 6
    104c:	07030000 	streq	r0, [r3, -r0]
    1050:	0000009e 	muleq	r0, lr, r0
    1054:	04090300 	streq	r0, [r9], #-768	; 0xfffffd00
    1058:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    105c:	0000009e 	muleq	r0, lr, r0
    1060:	026c0304 	rsbeq	r0, ip, #4, 6	; 0x10000000
    1064:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    1068:	0000009e 	muleq	r0, lr, r0
    106c:	04050008 	streq	r0, [r5], #-8
    1070:	00000062 	andeq	r0, r0, r2, rrx
    1074:	00071e06 	andeq	r1, r7, r6, lsl #28
    1078:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
    107c:	07000000 	streq	r0, [r0, -r0]
    1080:	0000014d 	andeq	r0, r0, sp, asr #2
    1084:	28060424 	stmdacs	r6, {r2, r5, sl}
    1088:	03000001 	movweq	r0, #1
    108c:	000004e5 	andeq	r0, r0, r5, ror #9
    1090:	01280704 			; <UNDEFINED> instruction: 0x01280704
    1094:	03000000 	movweq	r0, #0
    1098:	000000e0 	andeq	r0, r0, r0, ror #1
    109c:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
    10a0:	03040000 	movweq	r0, #16384	; 0x4000
    10a4:	000001fd 	strdeq	r0, [r0], -sp
    10a8:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
    10ac:	03080000 	movweq	r0, #32768	; 0x8000
    10b0:	000001f6 	strdeq	r0, [r0], -r6
    10b4:	01460c04 	cmpeq	r6, r4, lsl #24
    10b8:	030c0000 	movweq	r0, #49152	; 0xc000
    10bc:	00000223 	andeq	r0, r0, r3, lsr #4
    10c0:	01460d04 	cmpeq	r6, r4, lsl #26
    10c4:	03100000 	tsteq	r0, #0
    10c8:	00000108 	andeq	r0, r0, r8, lsl #2
    10cc:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
    10d0:	03140000 	tsteq	r4, #0
    10d4:	000003b1 			; <UNDEFINED> instruction: 0x000003b1
    10d8:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
    10dc:	03180000 	tsteq	r8, #0
    10e0:	0000049e 	muleq	r0, lr, r4
    10e4:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
    10e8:	031c0000 	tsteq	ip, #0
    10ec:	00000024 	andeq	r0, r0, r4, lsr #32
    10f0:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
    10f4:	00200000 	eoreq	r0, r0, r0
    10f8:	00a40405 	adceq	r0, r4, r5, lsl #8
    10fc:	04080000 	streq	r0, [r8], #-0
    1100:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1104:	01400900 	cmpeq	r0, r0, lsl #18
    1108:	400a0000 	andmi	r0, sl, r0
    110c:	00000001 	andeq	r0, r0, r1
    1110:	00af0405 	adceq	r0, pc, r5, lsl #8
    1114:	04050000 	streq	r0, [r5], #-0
    1118:	00000135 	andeq	r0, r0, r5, lsr r1
    111c:	00014e06 	andeq	r4, r1, r6, lsl #28
    1120:	af150400 	svcge	0x00150400
    1124:	0b000000 	bleq	112c <startup-0x1fffeed4>
    1128:	00000162 	andeq	r0, r0, r2, ror #2
    112c:	00000162 	andeq	r0, r0, r2, ror #2
    1130:	0405000c 	streq	r0, [r5], #-12
    1134:	0000014c 	andeq	r0, r0, ip, asr #2
    1138:	0003db0d 	andeq	sp, r3, sp, lsl #22
    113c:	571a0400 	ldrpl	r0, [sl, -r0, lsl #8]
    1140:	0d000001 	stceq	0, cr0, [r0, #-4]
    1144:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    1148:	012e1b04 			; <UNDEFINED> instruction: 0x012e1b04
    114c:	80060000 	andhi	r0, r6, r0
    1150:	05000001 	streq	r0, [r0, #-1]
    1154:	00005b24 	andeq	r5, r0, r4, lsr #22
    1158:	017e0b00 	cmneq	lr, r0, lsl #22
    115c:	019a0000 	orrseq	r0, sl, r0
    1160:	9a0e0000 	bls	381168 <startup-0x1fc7ee98>
    1164:	ff000001 			; <UNDEFINED> instruction: 0xff000001
    1168:	04040003 	streq	r0, [r4], #-3
    116c:	0000f407 	andeq	pc, r0, r7, lsl #8
    1170:	08970d00 	ldmeq	r7, {r8, sl, fp}
    1174:	2b050000 	blcs	14117c <startup-0x1febee84>
    1178:	00000189 	andeq	r0, r0, r9, lsl #3
    117c:	0001160d 	andeq	r1, r1, sp, lsl #12
    1180:	892c0500 	stmdbhi	ip!, {r8, sl}
    1184:	0d000001 	stceq	0, cr0, [r0, #-4]
    1188:	0000046f 	andeq	r0, r0, pc, ror #8
    118c:	01892d05 	orreq	r2, r9, r5, lsl #26
    1190:	de0d0000 	cdple	0, 0, cr0, cr13, cr0, {0}
    1194:	05000001 	streq	r0, [r0, #-1]
    1198:	0001892e 	andeq	r8, r1, lr, lsr #18
    119c:	043f0d00 	ldrteq	r0, [pc], #-3328	; 11a4 <startup-0x1fffee5c>
    11a0:	2f050000 	svccs	0x00050000
    11a4:	00000189 	andeq	r0, r0, r9, lsl #3
    11a8:	0003a20d 	andeq	sl, r3, sp, lsl #4
    11ac:	89300500 	ldmdbhi	r0!, {r8, sl}
    11b0:	0d000001 	stceq	0, cr0, [r0, #-4]
    11b4:	00000170 	andeq	r0, r0, r0, ror r1
    11b8:	01893105 	orreq	r3, r9, r5, lsl #2
    11bc:	ac0f0000 	stcge	0, cr0, [pc], {-0}
    11c0:	01000001 	tsteq	r0, r1
    11c4:	a803052b 	stmdage	r3, {r0, r1, r3, r5, r8, sl}
    11c8:	0f200032 	svceq	0x00200032
    11cc:	000001b7 			; <UNDEFINED> instruction: 0x000001b7
    11d0:	03052c01 	movweq	r2, #23553	; 0x5c01
    11d4:	200026a8 	andcs	r2, r0, r8, lsr #13
    11d8:	0001c20f 	andeq	ip, r1, pc, lsl #4
    11dc:	052d0100 	streq	r0, [sp, #-256]!	; 0xffffff00
    11e0:	002ea803 	eoreq	sl, lr, r3, lsl #16
    11e4:	01cd0f20 	biceq	r0, sp, r0, lsr #30
    11e8:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    11ec:	36a80305 	strtcc	r0, [r8], r5, lsl #6
    11f0:	a10f2000 	mrsge	r2, CPSR
    11f4:	01000001 	tsteq	r0, r1
    11f8:	a803052f 	stmdage	r3, {r0, r1, r2, r3, r5, r8, sl}
    11fc:	1020002a 	eorne	r0, r0, sl, lsr #32
    1200:	000001d8 	ldrdeq	r0, [r0], -r8
    1204:	a8030501 	stmdage	r3, {r0, r8, sl}
    1208:	10200022 	eorne	r0, r0, r2, lsr #32
    120c:	000001e3 	andeq	r0, r0, r3, ror #3
    1210:	a8030501 	stmdage	r3, {r0, r8, sl}
    1214:	1120003a 			; <UNDEFINED> instruction: 0x1120003a
    1218:	000008cd 	andeq	r0, r0, sp, asr #17
    121c:	7201a801 	andvc	sl, r1, #65536	; 0x10000
    1220:	6a200016 	bvs	801280 <startup-0x1f7fed80>
    1224:	01000000 	mrseq	r0, (UNDEF: 0)
    1228:	00026d9c 	muleq	r2, ip, sp
    122c:	09b41200 	ldmibeq	r4!, {r9, ip}
    1230:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    1234:	00012e01 	andeq	r2, r1, r1, lsl #28
    1238:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    123c:	085e1100 	ldmdaeq	lr, {r8, ip}^
    1240:	a0010000 	andge	r0, r1, r0
    1244:	0015f001 	andseq	pc, r5, r1
    1248:	00008220 	andeq	r8, r0, r0, lsr #4
    124c:	a29c0100 	addsge	r0, ip, #0, 2
    1250:	12000002 	andne	r0, r0, #2
    1254:	000008a8 	andeq	r0, r0, r8, lsr #17
    1258:	6201a001 	andvs	sl, r1, #1
    125c:	02000001 	andeq	r0, r0, #1
    1260:	10136c91 	mulsne	r3, r1, ip
    1264:	01000001 	tsteq	r0, r1
    1268:	012e01a1 	smulwbeq	lr, r1, r1
    126c:	91020000 	mrsls	r0, (UNDEF: 2)
    1270:	6c140074 	ldcvs	0, cr0, [r4], {116}	; 0x74
    1274:	01000009 	tsteq	r0, r9
    1278:	14e80196 	strbtne	r0, [r8], #406	; 0x196
    127c:	01082000 	mrseq	r2, (UNDEF: 8)
    1280:	9c010000 	stcls	0, cr0, [r1], {-0}
    1284:	000002c6 	andeq	r0, r0, r6, asr #5
    1288:	01006915 	tsteq	r0, r5, lsl r9
    128c:	012e0197 			; <UNDEFINED> instruction: 0x012e0197
    1290:	91020000 	mrsls	r0, (UNDEF: 2)
    1294:	fe110074 	mrc2	0, 0, r0, cr1, cr4, {3}
    1298:	01000008 	tsteq	r0, r8
    129c:	13b80170 			; <UNDEFINED> instruction: 0x13b80170
    12a0:	01302000 	teqeq	r0, r0
    12a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    12a8:	0000033a 	andeq	r0, r0, sl, lsr r3
    12ac:	01007815 	tsteq	r0, r5, lsl r8
    12b0:	012e0171 			; <UNDEFINED> instruction: 0x012e0171
    12b4:	91020000 	mrsls	r0, (UNDEF: 2)
    12b8:	0079156c 	rsbseq	r1, r9, ip, ror #10
    12bc:	2e017201 	cdpcs	2, 0, cr7, cr1, cr1, {0}
    12c0:	02000001 	andeq	r0, r0, #1
    12c4:	d1136891 			; <UNDEFINED> instruction: 0xd1136891
    12c8:	01000001 	tsteq	r0, r1
    12cc:	012e0173 			; <UNDEFINED> instruction: 0x012e0173
    12d0:	91020000 	mrsls	r0, (UNDEF: 2)
    12d4:	02d31364 	sbcseq	r1, r3, #100, 6	; 0x90000001
    12d8:	74010000 	strvc	r0, [r1], #-0
    12dc:	00012e01 	andeq	r2, r1, r1, lsl #28
    12e0:	60910200 	addsvs	r0, r1, r0, lsl #4
    12e4:	00327815 	eorseq	r7, r2, r5, lsl r8
    12e8:	2e017601 	cfmadd32cs	mvax0, mvfx7, mvfx1, mvfx1
    12ec:	02000001 	andeq	r0, r0, #1
    12f0:	69165c91 	ldmdbvs	r6, {r0, r4, r7, sl, fp, ip, lr}
    12f4:	017a0100 	cmneq	sl, r0, lsl #2
    12f8:	0000012e 	andeq	r0, r0, lr, lsr #2
    12fc:	01006b15 	tsteq	r0, r5, lsl fp
    1300:	012e017b 			; <UNDEFINED> instruction: 0x012e017b
    1304:	91020000 	mrsls	r0, (UNDEF: 2)
    1308:	fe110058 	mrc2	0, 0, r0, cr1, cr8, {2}
    130c:	01000009 	tsteq	r0, r9
    1310:	13660165 	cmnne	r6, #1073741849	; 0x40000019
    1314:	00522000 	subseq	r2, r2, r0
    1318:	9c010000 	stcls	0, cr0, [r1], {-0}
    131c:	000003a3 	andeq	r0, r0, r3, lsr #7
    1320:	01007817 	tsteq	r0, r7, lsl r8
    1324:	012e0165 			; <UNDEFINED> instruction: 0x012e0165
    1328:	91020000 	mrsls	r0, (UNDEF: 2)
    132c:	0079176c 	rsbseq	r1, r9, ip, ror #14
    1330:	2e016501 	cfsh32cs	mvfx6, mvfx1, #1
    1334:	02000001 	andeq	r0, r0, #1
    1338:	d1126891 			; <UNDEFINED> instruction: 0xd1126891
    133c:	01000001 	tsteq	r0, r1
    1340:	012e0165 			; <UNDEFINED> instruction: 0x012e0165
    1344:	91020000 	mrsls	r0, (UNDEF: 2)
    1348:	02d31264 	sbcseq	r1, r3, #100, 4	; 0x40000006
    134c:	65010000 	strvs	r0, [r1, #-0]
    1350:	00012e01 	andeq	r2, r1, r1, lsl #28
    1354:	60910200 	addsvs	r0, r1, r0, lsl #4
    1358:	01006915 	tsteq	r0, r5, lsl r9
    135c:	012e0166 			; <UNDEFINED> instruction: 0x012e0166
    1360:	91020000 	mrsls	r0, (UNDEF: 2)
    1364:	006a1574 	rsbeq	r1, sl, r4, ror r5
    1368:	2e016701 	cdpcs	7, 0, cr6, cr1, cr1, {0}
    136c:	02000001 	andeq	r0, r0, #1
    1370:	11007091 	swpne	r7, r1, [r0]
    1374:	000009a1 	andeq	r0, r0, r1, lsr #19
    1378:	14015b01 	strne	r5, [r1], #-2817	; 0xfffff4ff
    137c:	52200013 	eorpl	r0, r0, #19
    1380:	01000000 	mrseq	r0, (UNDEF: 0)
    1384:	00040c9c 	muleq	r4, ip, ip
    1388:	00781700 	rsbseq	r1, r8, r0, lsl #14
    138c:	2e015b01 	vmlacs.f64	d5, d1, d1
    1390:	02000001 	andeq	r0, r0, #1
    1394:	79176c91 	ldmdbvc	r7, {r0, r4, r7, sl, fp, sp, lr}
    1398:	015b0100 	cmpeq	fp, r0, lsl #2
    139c:	0000012e 	andeq	r0, r0, lr, lsr #2
    13a0:	12689102 	rsbne	r9, r8, #-2147483648	; 0x80000000
    13a4:	000001d1 	ldrdeq	r0, [r0], -r1
    13a8:	2e015b01 	vmlacs.f64	d5, d1, d1
    13ac:	02000001 	andeq	r0, r0, #1
    13b0:	d3126491 	tstle	r2, #-1862270976	; 0x91000000
    13b4:	01000002 	tsteq	r0, r2
    13b8:	012e015b 			; <UNDEFINED> instruction: 0x012e015b
    13bc:	91020000 	mrsls	r0, (UNDEF: 2)
    13c0:	00691560 	rsbeq	r1, r9, r0, ror #10
    13c4:	2e015c01 	cdpcs	12, 0, cr5, cr1, cr1, {0}
    13c8:	02000001 	andeq	r0, r0, #1
    13cc:	6a157491 	bvs	55e618 <startup-0x1faa19e8>
    13d0:	015d0100 	cmpeq	sp, r0, lsl #2
    13d4:	0000012e 	andeq	r0, r0, lr, lsr #2
    13d8:	00709102 	rsbseq	r9, r0, r2, lsl #2
    13dc:	0008d811 	andeq	sp, r8, r1, lsl r8
    13e0:	01450100 	mrseq	r0, (UNDEF: 85)
    13e4:	200011fa 	strdcs	r1, [r0], -sl
    13e8:	0000011a 	andeq	r0, r0, sl, lsl r1
    13ec:	04b79c01 	ldrteq	r9, [r7], #3073	; 0xc01
    13f0:	73170000 	tstvc	r7, #0
    13f4:	01450100 	mrseq	r0, (UNDEF: 85)
    13f8:	0000009e 	muleq	r0, lr, r0
    13fc:	17549102 	ldrbne	r9, [r4, -r2, lsl #2]
    1400:	45010078 	strmi	r0, [r1, #-120]	; 0xffffff88
    1404:	00012e01 	andeq	r2, r1, r1, lsl #28
    1408:	50910200 	addspl	r0, r1, r0, lsl #4
    140c:	01007917 	tsteq	r0, r7, lsl r9
    1410:	012e0145 			; <UNDEFINED> instruction: 0x012e0145
    1414:	91020000 	mrsls	r0, (UNDEF: 2)
    1418:	6573174c 	ldrbvs	r1, [r3, #-1868]!	; 0xfffff8b4
    141c:	45010074 	strmi	r0, [r1, #-116]	; 0xffffff8c
    1420:	00012e01 	andeq	r2, r1, r1, lsl #28
    1424:	48910200 	ldmmi	r1, {r9}
    1428:	00096612 	andeq	r6, r9, r2, lsl r6
    142c:	01450100 	mrseq	r0, (UNDEF: 85)
    1430:	0000012e 	andeq	r0, r0, lr, lsr #2
    1434:	15009102 	strne	r9, [r0, #-258]	; 0xfffffefe
    1438:	46010069 	strmi	r0, [r1], -r9, rrx
    143c:	00012e01 	andeq	r2, r1, r1, lsl #28
    1440:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1444:	01006a15 	tsteq	r0, r5, lsl sl
    1448:	012e0146 			; <UNDEFINED> instruction: 0x012e0146
    144c:	91020000 	mrsls	r0, (UNDEF: 2)
    1450:	006b1568 	rsbeq	r1, fp, r8, ror #10
    1454:	2e014601 	cfmadd32cs	mvax0, mvfx4, mvfx1, mvfx1
    1458:	02000001 	andeq	r0, r0, #1
    145c:	d9136491 	ldmdble	r3, {r0, r4, r7, sl, sp, lr}
    1460:	01000009 	tsteq	r0, r9
    1464:	012e0146 			; <UNDEFINED> instruction: 0x012e0146
    1468:	91020000 	mrsls	r0, (UNDEF: 2)
    146c:	12321860 	eorsne	r1, r2, #96, 16	; 0x600000
    1470:	00bc2000 	adcseq	r2, ip, r0
    1474:	d4130000 	ldrle	r0, [r3], #-0
    1478:	01000009 	tsteq	r0, r9
    147c:	005b014d 	subseq	r0, fp, sp, asr #2
    1480:	91020000 	mrsls	r0, (UNDEF: 2)
    1484:	1100005f 	qaddne	r0, pc, r0	; <UNPREDICTABLE>
    1488:	000008ad 	andeq	r0, r0, sp, lsr #17
    148c:	24013001 	strcs	r3, [r1], #-1
    1490:	d6200011 			; <UNDEFINED> instruction: 0xd6200011
    1494:	01000000 	mrseq	r0, (UNDEF: 0)
    1498:	0005209c 	muleq	r5, ip, r0
    149c:	084a1200 	stmdaeq	sl, {r9, ip}^
    14a0:	30010000 	andcc	r0, r1, r0
    14a4:	00052001 	andeq	r2, r5, r1
    14a8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    14ac:	01006915 	tsteq	r0, r5, lsl r9
    14b0:	017e0131 	cmneq	lr, r1, lsr r1
    14b4:	91020000 	mrsls	r0, (UNDEF: 2)
    14b8:	006a1577 	rsbeq	r1, sl, r7, ror r5
    14bc:	7e013101 	adfvcs	f3, f1, f1
    14c0:	02000001 	andeq	r0, r0, #1
    14c4:	0a137691 	beq	4def10 <startup-0x1fb210f0>
    14c8:	0100000c 	tsteq	r0, ip
    14cc:	017e0131 	cmneq	lr, r1, lsr r1
    14d0:	91020000 	mrsls	r0, (UNDEF: 2)
    14d4:	0063156f 	rsbeq	r1, r3, pc, ror #10
    14d8:	7e013101 	adfvcs	f3, f1, f1
    14dc:	02000001 	andeq	r0, r0, #1
    14e0:	6b157591 	blvs	55eb2c <startup-0x1faa14d4>
    14e4:	01320100 	teqeq	r2, r0, lsl #2
    14e8:	0000004e 	andeq	r0, r0, lr, asr #32
    14ec:	00709102 	rsbseq	r9, r0, r2, lsl #2
    14f0:	017e0405 	cmneq	lr, r5, lsl #8
    14f4:	57110000 	ldrpl	r0, [r1, -r0]
    14f8:	01000008 	tsteq	r0, r8
    14fc:	0f840108 	svceq	0x00840108
    1500:	01a02000 	moveq	r2, r0
    1504:	9c010000 	stcls	0, cr0, [r1], {-0}
    1508:	000005a0 	andeq	r0, r0, r0, lsr #11
    150c:	01007817 	tsteq	r0, r7, lsl r8
    1510:	012e0108 			; <UNDEFINED> instruction: 0x012e0108
    1514:	91020000 	mrsls	r0, (UNDEF: 2)
    1518:	00791764 	rsbseq	r1, r9, r4, ror #14
    151c:	2e010801 	cdpcs	8, 0, cr0, cr1, cr1, {0}
    1520:	02000001 	andeq	r0, r0, #1
    1524:	73176091 	tstvc	r7, #145	; 0x91
    1528:	01007465 	tsteq	r0, r5, ror #8
    152c:	012e0108 			; <UNDEFINED> instruction: 0x012e0108
    1530:	91020000 	mrsls	r0, (UNDEF: 2)
    1534:	09af135c 	stmibeq	pc!, {r2, r3, r4, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1538:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    153c:	00017e01 	andeq	r7, r1, r1, lsl #28
    1540:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1544:	01006315 	tsteq	r0, r5, lsl r3
    1548:	017e0109 	cmneq	lr, r9, lsl #2
    154c:	91020000 	mrsls	r0, (UNDEF: 2)
    1550:	0c0a136f 	stceq	3, cr1, [sl], {111}	; 0x6f
    1554:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1558:	00017e01 	andeq	r7, r1, r1, lsl #28
    155c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    1560:	000a0d13 	andeq	r0, sl, r3, lsl sp
    1564:	010a0100 	mrseq	r0, (UNDEF: 26)
    1568:	0000012e 	andeq	r0, r0, lr, lsr #2
    156c:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1570:	0008a219 	andeq	sl, r8, r9, lsl r2
    1574:	04de0100 	ldrbeq	r0, [lr], #256	; 0x100
    1578:	8020000e 	eorhi	r0, r0, lr
    157c:	01000001 	tsteq	r0, r1
    1580:	0006069c 	muleq	r6, ip, r6
    1584:	00781a00 	rsbseq	r1, r8, r0, lsl #20
    1588:	012ede01 			; <UNDEFINED> instruction: 0x012ede01
    158c:	91020000 	mrsls	r0, (UNDEF: 2)
    1590:	00791a6c 	rsbseq	r1, r9, ip, ror #20
    1594:	012ede01 			; <UNDEFINED> instruction: 0x012ede01
    1598:	91020000 	mrsls	r0, (UNDEF: 2)
    159c:	65731a68 	ldrbvs	r1, [r3, #-2664]!	; 0xfffff598
    15a0:	de010074 	mcrle	0, 0, r0, cr1, cr4, {3}
    15a4:	0000012e 	andeq	r0, r0, lr, lsr #2
    15a8:	1b649102 	blne	19259b8 <startup-0x1e6da648>
    15ac:	00000966 	andeq	r0, r0, r6, ror #18
    15b0:	012ede01 			; <UNDEFINED> instruction: 0x012ede01
    15b4:	91020000 	mrsls	r0, (UNDEF: 2)
    15b8:	09af1c60 	stmibeq	pc!, {r5, r6, sl, fp, ip}	; <UNPREDICTABLE>
    15bc:	df010000 	svcle	0x00010000
    15c0:	0000017e 	andeq	r0, r0, lr, ror r1
    15c4:	1c779102 	ldfnep	f1, [r7], #-8
    15c8:	00000a0d 	andeq	r0, r0, sp, lsl #20
    15cc:	012ee001 			; <UNDEFINED> instruction: 0x012ee001
    15d0:	91020000 	mrsls	r0, (UNDEF: 2)
    15d4:	601d0070 	andsvs	r0, sp, r0, ror r0
    15d8:	0100000a 	tsteq	r0, sl
    15dc:	000d9ed1 	ldrdeq	r9, [sp], -r1
    15e0:	00006620 	andeq	r6, r0, r0, lsr #12
    15e4:	429c0100 	addsmi	r0, ip, #0, 2
    15e8:	1c000006 	stcne	0, cr0, [r0], {6}
    15ec:	00000838 	andeq	r0, r0, r8, lsr r8
    15f0:	017ed201 	cmneq	lr, r1, lsl #4
    15f4:	91020000 	mrsls	r0, (UNDEF: 2)
    15f8:	0dac1877 	stceq	8, cr1, [ip, #476]!	; 0x1dc
    15fc:	003e2000 	eorseq	r2, lr, r0
    1600:	611e0000 	tstvs	lr, r0
    1604:	01006464 	tsteq	r0, r4, ror #8
    1608:	00017ed6 	ldrdeq	r7, [r1], -r6
    160c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    1610:	4d1f0000 	ldcmi	0, cr0, [pc, #-0]	; 1618 <startup-0x1fffe9e8>
    1614:	0100000a 	tsteq	r0, sl
    1618:	000d30bd 	strheq	r3, [sp], -sp
    161c:	00006e20 	andeq	r6, r0, r0, lsr #28
    1620:	1d9c0100 	ldfnes	f0, [ip]
    1624:	000009c1 	andeq	r0, r0, r1, asr #19
    1628:	0ceab501 	cfstr64eq	mvdx11, [sl], #4
    162c:	00462000 	subeq	r2, r6, r0
    1630:	9c010000 	stcls	0, cr0, [r1], {-0}
    1634:	00000685 	andeq	r0, r0, r5, lsl #13
    1638:	0008891b 	andeq	r8, r8, fp, lsl r9
    163c:	7eb50100 	frdvcs	f0, f5, f0
    1640:	02000001 	andeq	r0, r0, #1
    1644:	0a1b7791 	beq	6df490 <startup-0x1f920b70>
    1648:	0100000c 	tsteq	r0, ip
    164c:	00017eb5 			; <UNDEFINED> instruction: 0x00017eb5
    1650:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    1654:	087b1d00 	ldmdaeq	fp!, {r8, sl, fp, ip}^
    1658:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    165c:	20000ca4 	andcs	r0, r0, r4, lsr #25
    1660:	00000046 	andeq	r0, r0, r6, asr #32
    1664:	06b79c01 	ldrteq	r9, [r7], r1, lsl #24
    1668:	891b0000 	ldmdbhi	fp, {}	; <UNPREDICTABLE>
    166c:	01000008 	tsteq	r0, r8
    1670:	00017eae 	andeq	r7, r1, lr, lsr #29
    1674:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1678:	000c0a1b 	andeq	r0, ip, fp, lsl sl
    167c:	7eae0100 	fdvvce	f0, f6, f0
    1680:	02000001 	andeq	r0, r0, #1
    1684:	1d007691 	stcne	6, cr7, [r0, #-580]	; 0xfffffdbc
    1688:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    168c:	0c269901 			; <UNDEFINED> instruction: 0x0c269901
    1690:	007e2000 	rsbseq	r2, lr, r0
    1694:	9c010000 	stcls	0, cr0, [r1], {-0}
    1698:	000006e9 	andeq	r0, r0, r9, ror #13
    169c:	0008511b 	andeq	r5, r8, fp, lsl r1
    16a0:	7e990100 	fmlvce	f0, f1, f0
    16a4:	02000001 	andeq	r0, r0, #1
    16a8:	0a1b7791 	beq	6df4f4 <startup-0x1f920b0c>
    16ac:	0100000c 	tsteq	r0, ip
    16b0:	00017e99 	muleq	r1, r9, lr
    16b4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    16b8:	09542000 	ldmdbeq	r4, {sp}^
    16bc:	94010000 	strls	r0, [r1], #-0
    16c0:	0000012e 	andeq	r0, r0, lr, lsr #2
    16c4:	20000bfc 	strdcs	r0, [r0], -ip
    16c8:	0000002a 	andeq	r0, r0, sl, lsr #32
    16cc:	07119c01 	ldreq	r9, [r1, -r1, lsl #24]
    16d0:	0a1b0000 	beq	6c16d8 <startup-0x1f93e928>
    16d4:	0100000c 	tsteq	r0, ip
    16d8:	00017e94 	muleq	r1, r4, lr
    16dc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    16e0:	083d2100 	ldmdaeq	sp!, {r8, sp}
    16e4:	7b010000 	blvc	416ec <startup-0x1ffbe914>
    16e8:	0000017e 	andeq	r0, r0, lr, ror r1
    16ec:	20000b68 	andcs	r0, r0, r8, ror #22
    16f0:	00000094 	muleq	r0, r4, r0
    16f4:	07469c01 	strbeq	r9, [r6, -r1, lsl #24]
    16f8:	0a1b0000 	beq	6c1700 <startup-0x1f93e900>
    16fc:	0100000c 	tsteq	r0, ip
    1700:	00017e7b 	andeq	r7, r1, fp, ror lr
    1704:	6f910200 	svcvs	0x00910200
    1708:	0076721e 	rsbseq	r7, r6, lr, lsl r2
    170c:	005b8401 	subseq	r8, fp, r1, lsl #8
    1710:	91020000 	mrsls	r0, (UNDEF: 2)
    1714:	251d0077 	ldrcs	r0, [sp, #-119]	; 0xffffff89
    1718:	0100000a 	tsteq	r0, sl
    171c:	000afa65 	andeq	pc, sl, r5, ror #20
    1720:	00006e20 	andeq	r6, r0, r0, lsr #28
    1724:	689c0100 	ldmvs	ip, {r8}
    1728:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    172c:	66010063 	strvs	r0, [r1], -r3, rrx
    1730:	0000017e 	andeq	r0, r0, lr, ror r1
    1734:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1738:	000a131d 	andeq	r1, sl, sp, lsl r3
    173c:	94500100 	ldrbls	r0, [r0], #-256	; 0xffffff00
    1740:	6620000a 	strtvs	r0, [r0], -sl
    1744:	01000000 	mrseq	r0, (UNDEF: 0)
    1748:	00078c9c 	muleq	r7, ip, ip
    174c:	0c0a1b00 			; <UNDEFINED> instruction: 0x0c0a1b00
    1750:	50010000 	andpl	r0, r1, r0
    1754:	0000017e 	andeq	r0, r0, lr, ror r1
    1758:	00779102 	rsbseq	r9, r7, r2, lsl #2
    175c:	00090c22 	andeq	r0, r9, r2, lsr #24
    1760:	3c490100 	stfcce	f0, [r9], {-0}
    1764:	5820000a 	stmdapl	r0!, {r1, r3}
    1768:	01000000 	mrseq	r0, (UNDEF: 0)
    176c:	0007ba9c 	muleq	r7, ip, sl
    1770:	00781a00 	rsbseq	r1, r8, r0, lsl #20
    1774:	017e4901 	cmneq	lr, r1, lsl #18
    1778:	91020000 	mrsls	r0, (UNDEF: 2)
    177c:	00631e6f 	rsbeq	r1, r3, pc, ror #28
    1780:	017e4a01 	cmneq	lr, r1, lsl #20
    1784:	91020000 	mrsls	r0, (UNDEF: 2)
    1788:	80220077 	eorhi	r0, r2, r7, ror r0
    178c:	01000009 	tsteq	r0, r9
    1790:	0009ec41 	andeq	lr, r9, r1, asr #24
    1794:	00005020 	andeq	r5, r0, r0, lsr #32
    1798:	e89c0100 	ldm	ip, {r8}
    179c:	1a000007 	bne	17c0 <startup-0x1fffe840>
    17a0:	41010078 	tstmi	r1, r8, ror r0
    17a4:	0000017e 	andeq	r0, r0, lr, ror r1
    17a8:	1e6f9102 	lgnnee	f1, f2
    17ac:	42010063 	andmi	r0, r1, #99	; 0x63
    17b0:	0000017e 	andeq	r0, r0, lr, ror r1
    17b4:	00779102 	rsbseq	r9, r7, r2, lsl #2
    17b8:	0009e81f 	andeq	lr, r9, pc, lsl r8
    17bc:	bc3a0100 	ldflts	f0, [sl], #-0
    17c0:	30200009 	eorcc	r0, r0, r9
    17c4:	01000000 	mrseq	r0, (UNDEF: 0)
    17c8:	08911f9c 	ldmeq	r1, {r2, r3, r4, r7, r8, r9, sl, fp, ip}
    17cc:	37010000 	strcc	r0, [r1, -r0]
    17d0:	200009a4 	andcs	r0, r0, r4, lsr #19
    17d4:	00000018 	andeq	r0, r0, r8, lsl r0
    17d8:	38199c01 	ldmdacc	r9, {r0, sl, fp, ip, pc}
    17dc:	0100000a 	tsteq	r0, sl
    17e0:	00097232 	andeq	r7, r9, r2, lsr r2
    17e4:	00003220 	andeq	r3, r0, r0, lsr #4
    17e8:	3a9c0100 	bcc	fe701bf0 <firstTime.4076+0xde6fc8e0>
    17ec:	1b000008 	blne	1814 <startup-0x1fffe7ec>
    17f0:	0000084a 	andeq	r0, r0, sl, asr #16
    17f4:	05203201 	streq	r3, [r0, #-513]!	; 0xfffffdff
    17f8:	91020000 	mrsls	r0, (UNDEF: 2)
    17fc:	00691e6c 	rsbeq	r1, r9, ip, ror #28
    1800:	012e3301 			; <UNDEFINED> instruction: 0x012e3301
    1804:	91020000 	mrsls	r0, (UNDEF: 2)
    1808:	c11d0074 	tstgt	sp, r4, ror r0
    180c:	01000008 	tsteq	r0, r8
    1810:	00094c21 	andeq	r4, r9, r1, lsr #24
    1814:	00002620 	andeq	r2, r0, r0, lsr #12
    1818:	5d9c0100 	ldfpls	f0, [ip]
    181c:	1a000008 	bne	1844 <startup-0x1fffe7bc>
    1820:	0100736d 	tsteq	r0, sp, ror #6
    1824:	00004e21 	andeq	r4, r0, r1, lsr #28
    1828:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    182c:	086f1d00 	stmdaeq	pc!, {r8, sl, fp, ip}^	; <UNPREDICTABLE>
    1830:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    1834:	20000920 	andcs	r0, r0, r0, lsr #18
    1838:	0000002c 	andeq	r0, r0, ip, lsr #32
    183c:	08809c01 	stmeq	r0, {r0, sl, fp, ip, pc}
    1840:	751a0000 	ldrvc	r0, [sl, #-0]
    1844:	18010073 	stmdane	r1, {r0, r1, r4, r5, r6}
    1848:	0000004e 	andeq	r0, r0, lr, asr #32
    184c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1850:	0008e423 	andeq	lr, r8, r3, lsr #8
    1854:	dc0e0100 	stfles	f0, [lr], {-0}
    1858:	44200008 	strtmi	r0, [r0], #-8
    185c:	01000000 	mrseq	r0, (UNDEF: 0)
    1860:	0995239c 	ldmibeq	r5, {r2, r3, r4, r7, r8, r9, sp}
    1864:	04010000 	streq	r0, [r1], #-0
    1868:	20000898 	mulcs	r0, r8, r8
    186c:	00000044 	andeq	r0, r0, r4, asr #32
    1870:	00009c01 	andeq	r9, r0, r1, lsl #24
    1874:	04000001 	streq	r0, [r0], #-1
    1878:	00060600 	andeq	r0, r6, r0, lsl #12
    187c:	48010400 	stmdami	r1, {sl}
    1880:	0c000000 	stceq	0, cr0, [r0], {-0}
    1884:	00000a80 	andeq	r0, r0, r0, lsl #21
    1888:	200016dc 	ldrdcs	r1, [r0], -ip
    188c:	00000028 	andeq	r0, r0, r8, lsr #32
    1890:	000007e3 	andeq	r0, r0, r3, ror #15
    1894:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
    1898:	0000004e 	andeq	r0, r0, lr, asr #32
    189c:	0001d103 	andeq	sp, r1, r3, lsl #2
    18a0:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
    18a4:	00000000 	andeq	r0, r0, r0
    18a8:	0002d303 	andeq	sp, r2, r3, lsl #6
    18ac:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
    18b0:	04000000 	streq	r0, [r0], #-0
    18b4:	00096103 	andeq	r6, r9, r3, lsl #2
    18b8:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
    18bc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    18c0:	07040400 	streq	r0, [r4, -r0, lsl #8]
    18c4:	000002fc 	strdeq	r0, [r0], -ip
    18c8:	005b0405 	subseq	r0, fp, r5, lsl #8
    18cc:	01040000 	mrseq	r0, (UNDEF: 4)
    18d0:	00029b08 	andeq	r9, r2, r8, lsl #22
    18d4:	0ab30600 	beq	fecc30dc <firstTime.4076+0xdecbddcc>
    18d8:	0a020000 	beq	818e0 <startup-0x1ff7e720>
    18dc:	00000021 	andeq	r0, r0, r1, lsr #32
    18e0:	00027007 	andeq	r7, r2, r7
    18e4:	06030c00 	streq	r0, [r3], -r0, lsl #24
    18e8:	0000009e 	muleq	r0, lr, r0
    18ec:	0003fe03 	andeq	pc, r3, r3, lsl #28
    18f0:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
    18f4:	00000000 	andeq	r0, r0, r0
    18f8:	00040903 	andeq	r0, r4, r3, lsl #18
    18fc:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
    1900:	04000000 	streq	r0, [r0], #-0
    1904:	00026c03 	andeq	r6, r2, r3, lsl #24
    1908:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
    190c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1910:	62040500 	andvs	r0, r4, #0, 10
    1914:	06000000 	streq	r0, [r0], -r0
    1918:	0000071e 	andeq	r0, r0, lr, lsl r7
    191c:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
    1920:	75080000 	strvc	r0, [r8, #-0]
    1924:	0100000a 	tsteq	r0, sl
    1928:	0016dc03 	andseq	sp, r6, r3, lsl #24
    192c:	00002820 	andeq	r2, r0, r0, lsr #16
    1930:	fd9c0100 	ldc2	1, cr0, [ip]
    1934:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1938:	00000a7a 	andeq	r0, r0, sl, ror sl
    193c:	00fd0301 	rscseq	r0, sp, r1, lsl #6
    1940:	91020000 	mrsls	r0, (UNDEF: 2)
    1944:	03fe0974 	mvnseq	r0, #116, 18	; 0x1d0000
    1948:	03010000 	movweq	r0, #4096	; 0x1000
    194c:	0000009e 	muleq	r0, lr, r0
    1950:	09709102 	ldmdbeq	r0!, {r1, r8, ip, pc}^
    1954:	00000409 	andeq	r0, r0, r9, lsl #8
    1958:	009e0301 	addseq	r0, lr, r1, lsl #6
    195c:	91020000 	mrsls	r0, (UNDEF: 2)
    1960:	026c096c 	rsbeq	r0, ip, #108, 18	; 0x1b0000
    1964:	03010000 	movweq	r0, #4096	; 0x1000
    1968:	0000009e 	muleq	r0, lr, r0
    196c:	00689102 	rsbeq	r9, r8, r2, lsl #2
    1970:	00a40405 	adceq	r0, r4, r5, lsl #8
    1974:	c3000000 	movwgt	r0, #0
    1978:	04000000 	streq	r0, [r0], #-0
    197c:	00068d00 	andeq	r8, r6, r0, lsl #26
    1980:	48010400 	stmdami	r1, {sl}
    1984:	0c000000 	stceq	0, cr0, [r0], {-0}
    1988:	00000aba 			; <UNDEFINED> instruction: 0x00000aba
    198c:	20001704 	andcs	r1, r0, r4, lsl #14
    1990:	00000028 	andeq	r0, r0, r8, lsr #32
    1994:	00000859 	andeq	r0, r0, r9, asr r8
    1998:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
    199c:	0000004e 	andeq	r0, r0, lr, asr #32
    19a0:	0001d103 	andeq	sp, r1, r3, lsl #2
    19a4:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
    19a8:	00000000 	andeq	r0, r0, r0
    19ac:	0002d303 	andeq	sp, r2, r3, lsl #6
    19b0:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
    19b4:	04000000 	streq	r0, [r0], #-0
    19b8:	00096103 	andeq	r6, r9, r3, lsl #2
    19bc:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
    19c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    19c4:	07040400 	streq	r0, [r4, -r0, lsl #8]
    19c8:	000002fc 	strdeq	r0, [r0], -ip
    19cc:	005b0405 	subseq	r0, fp, r5, lsl #8
    19d0:	01040000 	mrseq	r0, (UNDEF: 4)
    19d4:	00029b08 	andeq	r9, r2, r8, lsl #22
    19d8:	0ab30600 	beq	fecc31e0 <firstTime.4076+0xdecbded0>
    19dc:	0a020000 	beq	819e4 <startup-0x1ff7e61c>
    19e0:	00000021 	andeq	r0, r0, r1, lsr #32
    19e4:	000aae07 	andeq	sl, sl, r7, lsl #28
    19e8:	04030100 	streq	r0, [r3], #-256	; 0xffffff00
    19ec:	28200017 	stmdacs	r0!, {r0, r1, r2, r4}
    19f0:	01000000 	mrseq	r0, (UNDEF: 0)
    19f4:	0000b99c 	muleq	r0, ip, r9
    19f8:	00730800 	rsbseq	r0, r3, r0, lsl #16
    19fc:	00b90301 	adcseq	r0, r9, r1, lsl #6
    1a00:	91020000 	mrsls	r0, (UNDEF: 2)
    1a04:	09610974 	stmdbeq	r1!, {r2, r4, r5, r6, r8, fp}^
    1a08:	03010000 	movweq	r0, #4096	; 0x1000
    1a0c:	00000055 	andeq	r0, r0, r5, asr r0
    1a10:	09709102 	ldmdbeq	r0!, {r1, r8, ip, pc}^
    1a14:	000001d1 	ldrdeq	r0, [r0], -r1
    1a18:	00bf0301 	adcseq	r0, pc, r1, lsl #6
    1a1c:	91020000 	mrsls	r0, (UNDEF: 2)
    1a20:	02d3096c 	sbcseq	r0, r3, #108, 18	; 0x1b0000
    1a24:	03010000 	movweq	r0, #4096	; 0x1000
    1a28:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    1a2c:	00689102 	rsbeq	r9, r8, r2, lsl #2
    1a30:	00620405 	rsbeq	r0, r2, r5, lsl #8
    1a34:	040a0000 	streq	r0, [sl], #-0
    1a38:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1a3c:	01350000 	teqeq	r5, r0
    1a40:	00040000 	andeq	r0, r4, r0
    1a44:	0000071f 	andeq	r0, r0, pc, lsl r7
    1a48:	00480104 	subeq	r0, r8, r4, lsl #2
    1a4c:	200c0000 	andcs	r0, ip, r0
    1a50:	2c00000b 	stccs	0, cr0, [r0], {11}
    1a54:	60200017 	eorvs	r0, r0, r7, lsl r0
    1a58:	c5000000 	strgt	r0, [r0, #-0]
    1a5c:	02000008 	andeq	r0, r0, #8
    1a60:	ae130218 	mrcge	2, 0, r0, cr3, cr8, {0}
    1a64:	03000000 	movweq	r0, #0
    1a68:	00000ae9 	andeq	r0, r0, r9, ror #21
    1a6c:	00ae1402 	adceq	r1, lr, r2, lsl #8
    1a70:	03000000 	movweq	r0, #0
    1a74:	00000b02 	andeq	r0, r0, r2, lsl #22
    1a78:	00b51502 	adcseq	r1, r5, r2, lsl #10
    1a7c:	03040000 	movweq	r0, #16384	; 0x4000
    1a80:	00000b4d 	andeq	r0, r0, sp, asr #22
    1a84:	00b51602 	adcseq	r1, r5, r2, lsl #12
    1a88:	03060000 	movweq	r0, #24576	; 0x6000
    1a8c:	00000b6f 	andeq	r0, r0, pc, ror #22
    1a90:	00ae1702 	adceq	r1, lr, r2, lsl #14
    1a94:	03080000 	movweq	r0, #32768	; 0x8000
    1a98:	00000b0e 	andeq	r0, r0, lr, lsl #22
    1a9c:	00ae1802 	adceq	r1, lr, r2, lsl #16
    1aa0:	030c0000 	movweq	r0, #49152	; 0xc000
    1aa4:	00000b7f 	andeq	r0, r0, pc, ror fp
    1aa8:	00bc1902 	adcseq	r1, ip, r2, lsl #18
    1aac:	03100000 	tsteq	r0, #0
    1ab0:	00000b77 	andeq	r0, r0, r7, ror fp
    1ab4:	00bc1a02 	adcseq	r1, ip, r2, lsl #20
    1ab8:	03110000 	tsteq	r1, #0
    1abc:	00000b14 	andeq	r0, r0, r4, lsl fp
    1ac0:	00b51b02 	adcseq	r1, r5, r2, lsl #22
    1ac4:	03120000 	tsteq	r2, #0
    1ac8:	00000b68 	andeq	r0, r0, r8, ror #22
    1acc:	00bc1c02 	adcseq	r1, ip, r2, lsl #24
    1ad0:	03140000 	tsteq	r4, #0
    1ad4:	00000afa 	strdeq	r0, [r0], -sl
    1ad8:	00bc1d02 	adcseq	r1, ip, r2, lsl #26
    1adc:	03150000 	tsteq	r5, #0
    1ae0:	00000b86 	andeq	r0, r0, r6, lsl #23
    1ae4:	00b51e02 	adcseq	r1, r5, r2, lsl #28
    1ae8:	00160000 	andseq	r0, r6, r0
    1aec:	fc070404 	stc2	4, cr0, [r7], {4}
    1af0:	04000002 	streq	r0, [r0], #-2
    1af4:	02f60702 	rscseq	r0, r6, #524288	; 0x80000
    1af8:	01040000 	mrseq	r0, (UNDEF: 4)
    1afc:	00029b08 	andeq	r9, r2, r8, lsl #22
    1b00:	0b090500 	bleq	242f08 <startup-0x1fdbd0f8>
    1b04:	1f020000 	svcne	0x00020000
    1b08:	00000021 	andeq	r0, r0, r1, lsr #32
    1b0c:	000b5806 	andeq	r5, fp, r6, lsl #16
    1b10:	040d0100 	streq	r0, [sp], #-256	; 0xffffff00
    1b14:	58000001 	stmdapl	r0, {r0}
    1b18:	34200017 	strtcc	r0, [r0], #-23	; 0xffffffe9
    1b1c:	01000000 	mrseq	r0, (UNDEF: 0)
    1b20:	0001049c 	muleq	r1, ip, r4
    1b24:	69620700 	stmdbvs	r2!, {r8, r9, sl}^
    1b28:	0d010074 	stceq	0, cr0, [r1, #-464]	; 0xfffffe30
    1b2c:	00000104 	andeq	r0, r0, r4, lsl #2
    1b30:	08649102 	stmdaeq	r4!, {r1, r8, ip, pc}^
    1b34:	004c4944 	subeq	r4, ip, r4, asr #18
    1b38:	010b0e01 	tsteq	fp, r1, lsl #28
    1b3c:	91020000 	mrsls	r0, (UNDEF: 2)
    1b40:	0409006f 	streq	r0, [r9], #-111	; 0xffffff91
    1b44:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1b48:	08010400 	stmdaeq	r1, {sl}
    1b4c:	000002a4 	andeq	r0, r0, r4, lsr #5
    1b50:	000b920a 	andeq	r9, fp, sl, lsl #4
    1b54:	0b080100 	bleq	201f5c <startup-0x1fdfe0a4>
    1b58:	44000001 	strmi	r0, [r0], #-1
    1b5c:	14200017 	strtne	r0, [r0], #-23	; 0xffffffe9
    1b60:	01000000 	mrseq	r0, (UNDEF: 0)
    1b64:	0aef0b9c 	beq	ffbc49dc <firstTime.4076+0xdfbbf6cc>
    1b68:	04010000 	streq	r0, [r1], #-0
    1b6c:	2000172c 	andcs	r1, r0, ip, lsr #14
    1b70:	00000018 	andeq	r0, r0, r8, lsl r0
    1b74:	ed009c01 	stc	12, cr9, [r0, #-4]
    1b78:	04000004 	streq	r0, [r0], #-4
    1b7c:	0007dc00 	andeq	sp, r7, r0, lsl #24
    1b80:	48010400 	stmdami	r1, {sl}
    1b84:	0c000000 	stceq	0, cr0, [r0], {-0}
    1b88:	00000cd7 	ldrdeq	r0, [r0], -r7
    1b8c:	2000178c 	andcs	r1, r0, ip, lsl #15
    1b90:	00000520 	andeq	r0, r0, r0, lsr #10
    1b94:	00000934 	andeq	r0, r0, r4, lsr r9
    1b98:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
    1b9c:	0000004e 	andeq	r0, r0, lr, asr #32
    1ba0:	0001d103 	andeq	sp, r1, r3, lsl #2
    1ba4:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
    1ba8:	00000000 	andeq	r0, r0, r0
    1bac:	0002d303 	andeq	sp, r2, r3, lsl #6
    1bb0:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
    1bb4:	04000000 	streq	r0, [r0], #-0
    1bb8:	00096103 	andeq	r6, r9, r3, lsl #2
    1bbc:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
    1bc0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1bc4:	07040400 	streq	r0, [r4, -r0, lsl #8]
    1bc8:	000002fc 	strdeq	r0, [r0], -ip
    1bcc:	005b0405 	subseq	r0, fp, r5, lsl #8
    1bd0:	01040000 	mrseq	r0, (UNDEF: 4)
    1bd4:	00029b08 	andeq	r9, r2, r8, lsl #22
    1bd8:	0ab30600 	beq	fecc33e0 <firstTime.4076+0xdecbe0d0>
    1bdc:	0a020000 	beq	81be4 <startup-0x1ff7e41c>
    1be0:	00000021 	andeq	r0, r0, r1, lsr #32
    1be4:	00027007 	andeq	r7, r2, r7
    1be8:	06030c00 	streq	r0, [r3], -r0, lsl #24
    1bec:	0000009e 	muleq	r0, lr, r0
    1bf0:	0003fe03 	andeq	pc, r3, r3, lsl #28
    1bf4:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
    1bf8:	00000000 	andeq	r0, r0, r0
    1bfc:	00040903 	andeq	r0, r4, r3, lsl #18
    1c00:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
    1c04:	04000000 	streq	r0, [r0], #-0
    1c08:	00026c03 	andeq	r6, r2, r3, lsl #24
    1c0c:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
    1c10:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1c14:	62040500 	andvs	r0, r4, #0, 10
    1c18:	06000000 	streq	r0, [r0], -r0
    1c1c:	0000071e 	andeq	r0, r0, lr, lsl r7
    1c20:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
    1c24:	4d070000 	stcmi	0, cr0, [r7, #-0]
    1c28:	24000001 	strcs	r0, [r0], #-1
    1c2c:	01280604 			; <UNDEFINED> instruction: 0x01280604
    1c30:	e5030000 	str	r0, [r3, #-0]
    1c34:	04000004 	streq	r0, [r0], #-4
    1c38:	00012807 	andeq	r2, r1, r7, lsl #16
    1c3c:	e0030000 	and	r0, r3, r0
    1c40:	04000000 	streq	r0, [r0], #-0
    1c44:	00012e08 	andeq	r2, r1, r8, lsl #28
    1c48:	fd030400 	stc2	4, cr0, [r3, #-0]
    1c4c:	04000001 	streq	r0, [r0], #-1
    1c50:	00012e09 	andeq	r2, r1, r9, lsl #28
    1c54:	f6030800 			; <UNDEFINED> instruction: 0xf6030800
    1c58:	04000001 	streq	r0, [r0], #-1
    1c5c:	0001460c 	andeq	r4, r1, ip, lsl #12
    1c60:	23030c00 	movwcs	r0, #15360	; 0x3c00
    1c64:	04000002 	streq	r0, [r0], #-2
    1c68:	0001460d 	andeq	r4, r1, sp, lsl #12
    1c6c:	08031000 	stmdaeq	r3, {ip}
    1c70:	04000001 	streq	r0, [r0], #-1
    1c74:	00012e10 	andeq	r2, r1, r0, lsl lr
    1c78:	b1031400 	tstlt	r3, r0, lsl #8
    1c7c:	04000003 	streq	r0, [r0], #-3
    1c80:	00012e11 	andeq	r2, r1, r1, lsl lr
    1c84:	9e031800 	cdpls	8, 0, cr1, cr3, cr0, {0}
    1c88:	04000004 	streq	r0, [r0], #-4
    1c8c:	00012e12 	andeq	r2, r1, r2, lsl lr
    1c90:	24031c00 	strcs	r1, [r3], #-3072	; 0xfffff400
    1c94:	04000000 	streq	r0, [r0], #-0
    1c98:	00012e13 	andeq	r2, r1, r3, lsl lr
    1c9c:	05002000 	streq	r2, [r0, #-0]
    1ca0:	0000a404 	andeq	sl, r0, r4, lsl #8
    1ca4:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
    1ca8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1cac:	00014009 	andeq	r4, r1, r9
    1cb0:	01400a00 	cmpeq	r0, r0, lsl #20
    1cb4:	05000000 	streq	r0, [r0, #-0]
    1cb8:	0000af04 	andeq	sl, r0, r4, lsl #30
    1cbc:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
    1cc0:	06000001 	streq	r0, [r0], -r1
    1cc4:	0000014e 	andeq	r0, r0, lr, asr #2
    1cc8:	00af1504 	adceq	r1, pc, r4, lsl #10
    1ccc:	620b0000 	andvs	r0, fp, #0
    1cd0:	62000001 	andvs	r0, r0, #1
    1cd4:	0c000001 	stceq	0, cr0, [r0], {1}
    1cd8:	4c040500 	cfstr32mi	mvfx0, [r4], {-0}
    1cdc:	0d000001 	stceq	0, cr0, [r0, #-4]
    1ce0:	000003db 	ldrdeq	r0, [r0], -fp
    1ce4:	01571a04 	cmpeq	r7, r4, lsl #20
    1ce8:	bb0d0000 	bllt	341cf0 <startup-0x1fcbe310>
    1cec:	04000001 	streq	r0, [r0], #-1
    1cf0:	00012e1b 	andeq	r2, r1, fp, lsl lr
    1cf4:	01800600 	orreq	r0, r0, r0, lsl #12
    1cf8:	24050000 	strcs	r0, [r5], #-0
    1cfc:	0000005b 	andeq	r0, r0, fp, asr r0
    1d00:	00017e0b 	andeq	r7, r1, fp, lsl #28
    1d04:	00019a00 	andeq	r9, r1, r0, lsl #20
    1d08:	019a0e00 	orrseq	r0, sl, r0, lsl #28
    1d0c:	03ff0000 	mvnseq	r0, #0
    1d10:	07040400 	streq	r0, [r4, -r0, lsl #8]
    1d14:	000000f4 	strdeq	r0, [r0], -r4
    1d18:	0008970d 	andeq	r9, r8, sp, lsl #14
    1d1c:	892b0500 	stmdbhi	fp!, {r8, sl}
    1d20:	0d000001 	stceq	0, cr0, [r0, #-4]
    1d24:	00000116 	andeq	r0, r0, r6, lsl r1
    1d28:	01892c05 	orreq	r2, r9, r5, lsl #24
    1d2c:	6f0d0000 	svcvs	0x000d0000
    1d30:	05000004 	streq	r0, [r0, #-4]
    1d34:	0001892d 	andeq	r8, r1, sp, lsr #18
    1d38:	01de0d00 	bicseq	r0, lr, r0, lsl #26
    1d3c:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    1d40:	00000189 	andeq	r0, r0, r9, lsl #3
    1d44:	00043f0d 	andeq	r3, r4, sp, lsl #30
    1d48:	892f0500 	stmdbhi	pc!, {r8, sl}	; <UNPREDICTABLE>
    1d4c:	0d000001 	stceq	0, cr0, [r0, #-4]
    1d50:	000003a2 	andeq	r0, r0, r2, lsr #7
    1d54:	01893005 	orreq	r3, r9, r5
    1d58:	700d0000 	andvc	r0, sp, r0
    1d5c:	05000001 	streq	r0, [r0, #-1]
    1d60:	00018931 	andeq	r8, r1, r1, lsr r9
    1d64:	0c5d0f00 	mrrceq	15, 0, r0, sp, cr0
    1d68:	e4010000 	str	r0, [r1], #-0
    1d6c:	20001c28 	andcs	r1, r0, r8, lsr #24
    1d70:	00000084 	andeq	r0, r0, r4, lsl #1
    1d74:	022c9c01 	eoreq	r9, ip, #256	; 0x100
    1d78:	73100000 	tstvc	r0, #0
    1d7c:	2ce50100 	stfcse	f0, [r5]
    1d80:	02000002 	andeq	r0, r0, #2
    1d84:	38116c91 	ldmdacc	r1, {r0, r4, r7, sl, fp, sp, lr}
    1d88:	0100000c 	tsteq	r0, ip
    1d8c:	000239e6 	andeq	r3, r2, r6, ror #19
    1d90:	5c910200 	lfmpl	f0, 4, [r1], {0}
    1d94:	000c3e11 	andeq	r3, ip, r1, lsl lr
    1d98:	49e70100 	stmibmi	r7!, {r8}^
    1d9c:	02000002 	andeq	r0, r0, #2
    1da0:	05004891 	streq	r4, [r0, #-2193]	; 0xfffff76f
    1da4:	00023204 	andeq	r3, r2, r4, lsl #4
    1da8:	08010400 	stmdaeq	r1, {sl}
    1dac:	000002a4 	andeq	r0, r0, r4, lsr #5
    1db0:	0002320b 	andeq	r3, r2, fp, lsl #4
    1db4:	00024900 	andeq	r4, r2, r0, lsl #18
    1db8:	019a1200 	orrseq	r1, sl, r0, lsl #4
    1dbc:	000c0000 	andeq	r0, ip, r0
    1dc0:	0002320b 	andeq	r3, r2, fp, lsl #4
    1dc4:	00025900 	andeq	r5, r2, r0, lsl #18
    1dc8:	019a1200 	orrseq	r1, sl, r0, lsl #4
    1dcc:	00130000 	andseq	r0, r3, r0
    1dd0:	000bee0f 	andeq	lr, fp, pc, lsl #28
    1dd4:	9acc0100 	bls	ff3021dc <firstTime.4076+0xdf2fcecc>
    1dd8:	8e20001b 	miahi	acc0, fp, r0
    1ddc:	01000000 	mrseq	r0, (UNDEF: 0)
    1de0:	0002b39c 	muleq	r2, ip, r3
    1de4:	0d261300 	stceq	3, cr1, [r6, #-0]
    1de8:	cc010000 	stcgt	0, cr0, [r1], {-0}
    1dec:	0000022c 	andeq	r0, r0, ip, lsr #4
    1df0:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    1df4:	00000413 	andeq	r0, r0, r3, lsl r4
    1df8:	022ccc01 	eoreq	ip, ip, #256	; 0x100
    1dfc:	91020000 	mrsls	r0, (UNDEF: 2)
    1e00:	0cd01368 	ldcleq	3, cr1, [r0], {104}	; 0x68
    1e04:	cc010000 	stcgt	0, cr0, [r1], {-0}
    1e08:	0000012e 	andeq	r0, r0, lr, lsr #2
    1e0c:	13649102 	cmnne	r4, #-2147483648	; 0x80000000
    1e10:	00000bac 	andeq	r0, r0, ip, lsr #23
    1e14:	012ecc01 			; <UNDEFINED> instruction: 0x012ecc01
    1e18:	91020000 	mrsls	r0, (UNDEF: 2)
    1e1c:	00691060 	rsbeq	r1, r9, r0, rrx
    1e20:	012ed001 			; <UNDEFINED> instruction: 0x012ed001
    1e24:	91020000 	mrsls	r0, (UNDEF: 2)
    1e28:	8f0f0074 	svchi	0x000f0074
    1e2c:	0100000c 	tsteq	r0, ip
    1e30:	001b3cbd 			; <UNDEFINED> instruction: 0x001b3cbd
    1e34:	00005e20 	andeq	r5, r0, r0, lsr #28
    1e38:	e59c0100 	ldr	r0, [ip, #256]	; 0x100
    1e3c:	13000002 	movwne	r0, #2
    1e40:	00000d26 	andeq	r0, r0, r6, lsr #26
    1e44:	022cbd01 	eoreq	fp, ip, #1, 26	; 0x40
    1e48:	91020000 	mrsls	r0, (UNDEF: 2)
    1e4c:	04131374 	ldreq	r1, [r3], #-884	; 0xfffffc8c
    1e50:	bd010000 	stclt	0, cr0, [r1, #-0]
    1e54:	0000022c 	andeq	r0, r0, ip, lsr #4
    1e58:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1e5c:	000be20f 	andeq	lr, fp, pc, lsl #4
    1e60:	d2ad0100 	adcle	r0, sp, #0, 2
    1e64:	6a20001a 	bvs	801ed4 <startup-0x1f7fe12c>
    1e68:	01000000 	mrseq	r0, (UNDEF: 0)
    1e6c:	0003159c 	muleq	r3, ip, r5
    1e70:	00731000 	rsbseq	r1, r3, r0
    1e74:	022cae01 	eoreq	sl, ip, #1, 28
    1e78:	91020000 	mrsls	r0, (UNDEF: 2)
    1e7c:	091d116c 	ldmdbeq	sp, {r2, r3, r5, r6, r8, ip}
    1e80:	af010000 	svcge	0x00010000
    1e84:	00000315 	andeq	r0, r0, r5, lsl r3
    1e88:	00549102 	subseq	r9, r4, r2, lsl #2
    1e8c:	0002320b 	andeq	r3, r2, fp, lsl #4
    1e90:	00032500 	andeq	r2, r3, r0, lsl #10
    1e94:	019a1200 	orrseq	r1, sl, r0, lsl #4
    1e98:	00140000 	andseq	r0, r4, r0
    1e9c:	000bc314 	andeq	ip, fp, r4, lsl r3
    1ea0:	c0a80100 	adcgt	r0, r8, r0, lsl #2
    1ea4:	1220001a 	eorne	r0, r0, #26
    1ea8:	01000000 	mrseq	r0, (UNDEF: 0)
    1eac:	0b9b159c 	bleq	fe6c7524 <firstTime.4076+0xde6c2214>
    1eb0:	9f010000 	svcls	0x00010000
    1eb4:	20001aa6 	andcs	r1, r0, r6, lsr #21
    1eb8:	0000001a 	andeq	r0, r0, sl, lsl r0
    1ebc:	d0149c01 	andsle	r9, r4, r1, lsl #24
    1ec0:	0100000b 	tsteq	r0, fp
    1ec4:	001a0c83 	andseq	r0, sl, r3, lsl #25
    1ec8:	00009a20 	andeq	r9, r0, r0, lsr #20
    1ecc:	0f9c0100 	svceq	0x009c0100
    1ed0:	00000c9b 	muleq	r0, fp, ip
    1ed4:	19bc7b01 	ldmibne	ip!, {r0, r8, r9, fp, ip, sp, lr}
    1ed8:	00502000 	subseq	r2, r0, r0
    1edc:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ee0:	00000398 	muleq	r0, r8, r3
    1ee4:	776f7216 			; <UNDEFINED> instruction: 0x776f7216
    1ee8:	5b7b0100 	blpl	1ec22f0 <startup-0x1e13dd10>
    1eec:	02000000 	andeq	r0, r0, #0
    1ef0:	db136f91 	blle	4ddd3c <startup-0x1fb222c4>
    1ef4:	0100000b 	tsteq	r0, fp
    1ef8:	00005b7b 	andeq	r5, r0, fp, ror fp
    1efc:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    1f00:	000c4411 	andeq	r4, ip, r1, lsl r4
    1f04:	5b7c0100 	blpl	1f0230c <startup-0x1e0fdcf4>
    1f08:	02000000 	andeq	r0, r0, #0
    1f0c:	0f007791 	svceq	0x00007791
    1f10:	00000cbf 			; <UNDEFINED> instruction: 0x00000cbf
    1f14:	19807401 	stmibne	r0, {r0, sl, ip, sp, lr}
    1f18:	003c2000 	eorseq	r2, ip, r0
    1f1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f20:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    1f24:	01006316 	tsteq	r0, r6, lsl r3
    1f28:	00005b74 	andeq	r5, r0, r4, ror fp
    1f2c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1f30:	0bff1700 	bleq	fffc7b38 <firstTime.4076+0xdffc2828>
    1f34:	6a010000 	bvs	41f3c <startup-0x1ffbe0c4>
    1f38:	0000005b 	andeq	r0, r0, fp, asr r0
    1f3c:	2000194c 	andcs	r1, r0, ip, asr #18
    1f40:	00000034 	andeq	r0, r0, r4, lsr r0
    1f44:	03e09c01 	mvneq	r9, #256	; 0x100
    1f48:	63100000 	tstvs	r0, #0
    1f4c:	5b6b0100 	blpl	1ac2354 <startup-0x1e53dcac>
    1f50:	02000000 	andeq	r0, r0, #0
    1f54:	0f007791 	svceq	0x00007791
    1f58:	00000ca8 	andeq	r0, r0, r8, lsr #25
    1f5c:	191c6301 	ldmdbne	ip, {r0, r8, r9, sp, lr}
    1f60:	00302000 	eorseq	r2, r0, r0
    1f64:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f68:	00000402 	andeq	r0, r0, r2, lsl #8
    1f6c:	01006316 	tsteq	r0, r6, lsl r3
    1f70:	00005b63 	andeq	r5, r0, r3, ror #22
    1f74:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1f78:	0bb31700 	bleq	fecc7b80 <firstTime.4076+0xdecc2870>
    1f7c:	57010000 	strpl	r0, [r1, -r0]
    1f80:	0000005b 	andeq	r0, r0, fp, asr r0
    1f84:	200018c8 	andcs	r1, r0, r8, asr #17
    1f88:	00000054 	andeq	r0, r0, r4, asr r0
    1f8c:	04299c01 	strteq	r9, [r9], #-3073	; 0xfffff3ff
    1f90:	72100000 	andsvc	r0, r0, #0
    1f94:	5c010076 	stcpl	0, cr0, [r1], {118}	; 0x76
    1f98:	0000005b 	andeq	r0, r0, fp, asr r0
    1f9c:	006f9102 	rsbeq	r9, pc, r2, lsl #2
    1fa0:	000c6817 	andeq	r6, ip, r7, lsl r8
    1fa4:	5b4b0100 	blpl	12c23ac <startup-0x1ed3dc54>
    1fa8:	74000000 	strvc	r0, [r0], #-0
    1fac:	54200018 	strtpl	r0, [r0], #-24	; 0xffffffe8
    1fb0:	01000000 	mrseq	r0, (UNDEF: 0)
    1fb4:	0004509c 	muleq	r4, ip, r0
    1fb8:	76721000 	ldrbtvc	r1, [r2], -r0
    1fbc:	5b500100 	blpl	14023c4 <startup-0x1ebfdc3c>
    1fc0:	02000000 	andeq	r0, r0, #0
    1fc4:	0f006f91 	svceq	0x00006f91
    1fc8:	00000c4c 	andeq	r0, r0, ip, asr #24
    1fcc:	184a4501 	stmdane	sl, {r0, r8, sl, lr}^
    1fd0:	002a2000 	eoreq	r2, sl, r0
    1fd4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1fd8:	00000474 	andeq	r0, r0, r4, ror r4
    1fdc:	00096113 	andeq	r6, r9, r3, lsl r1
    1fe0:	5b450100 	blpl	11423e8 <startup-0x1eebdc18>
    1fe4:	02000000 	andeq	r0, r0, #0
    1fe8:	0f007791 	svceq	0x00007791
    1fec:	00000c28 	andeq	r0, r0, r8, lsr #24
    1ff0:	18203f01 	stmdane	r0!, {r0, r8, r9, sl, fp, ip, sp}
    1ff4:	002a2000 	eoreq	r2, sl, r0
    1ff8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ffc:	00000498 	muleq	r0, r8, r4
    2000:	00088913 	andeq	r8, r8, r3, lsl r9
    2004:	5b3f0100 	blpl	fc240c <startup-0x1f03dbf4>
    2008:	02000000 	andeq	r0, r0, #0
    200c:	18007791 	stmdane	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    2010:	00000c7a 	andeq	r0, r0, sl, ror ip
    2014:	17d03701 	ldrbne	r3, [r0, r1, lsl #14]
    2018:	00502000 	subseq	r2, r0, r0
    201c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2020:	000004c6 	andeq	r0, r0, r6, asr #9
    2024:	01007816 	tsteq	r0, r6, lsl r8
    2028:	00005b37 	andeq	r5, r0, r7, lsr fp
    202c:	6f910200 	svcvs	0x00910200
    2030:	01006310 	tsteq	r0, r0, lsl r3
    2034:	00005b39 	andeq	r5, r0, r9, lsr fp
    2038:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    203c:	0c151900 			; <UNDEFINED> instruction: 0x0c151900
    2040:	2f010000 	svccs	0x00010000
    2044:	2000178c 	andcs	r1, r0, ip, lsl #15
    2048:	00000044 	andeq	r0, r0, r4, asr #32
    204c:	78169c01 	ldmdavc	r6, {r0, sl, fp, ip, pc}
    2050:	5b2f0100 	blpl	bc2458 <startup-0x1f43dba8>
    2054:	02000000 	andeq	r0, r0, #0
    2058:	63106f91 	tstvs	r0, #580	; 0x244
    205c:	5b310100 	blpl	c42464 <startup-0x1f3bdb9c>
    2060:	02000000 	andeq	r0, r0, #0
    2064:	00007791 	muleq	r0, r1, r7
    2068:	00000140 	andeq	r0, r0, r0, asr #2
    206c:	095a0004 	ldmdbeq	sl, {r2}^
    2070:	01040000 	mrseq	r0, (UNDEF: 4)
    2074:	00000048 	andeq	r0, r0, r8, asr #32
    2078:	000d2b0c 	andeq	r2, sp, ip, lsl #22
    207c:	001cac00 	andseq	sl, ip, r0, lsl #24
    2080:	00009420 	andeq	r9, r0, r0, lsr #8
    2084:	000a9200 	andeq	r9, sl, r0, lsl #4
    2088:	027d0200 	rsbseq	r0, sp, #0, 4
    208c:	02140000 	andseq	r0, r4, #0
    2090:	00006a04 	andeq	r6, r0, r4, lsl #20
    2094:	0d260300 	stceq	3, cr0, [r6, #-0]
    2098:	05020000 	streq	r0, [r2, #-0]
    209c:	0000006a 	andeq	r0, r0, sl, rrx
    20a0:	04130300 	ldreq	r0, [r3], #-768	; 0xfffffd00
    20a4:	06020000 	streq	r0, [r2], -r0
    20a8:	0000006a 	andeq	r0, r0, sl, rrx
    20ac:	002e0304 	eoreq	r0, lr, r4, lsl #6
    20b0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    20b4:	00000077 	andeq	r0, r0, r7, ror r0
    20b8:	04a80308 	strteq	r0, [r8], #776	; 0x308
    20bc:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    20c0:	00000077 	andeq	r0, r0, r7, ror r0
    20c4:	0293030c 	addseq	r0, r3, #12, 6	; 0x30000000
    20c8:	0c020000 	stceq	0, cr0, [r2], {-0}
    20cc:	00000094 	muleq	r0, r4, r0
    20d0:	04040010 	streq	r0, [r4], #-16
    20d4:	00000070 	andeq	r0, r0, r0, ror r0
    20d8:	a4080105 	strge	r0, [r8], #-261	; 0xfffffefb
    20dc:	06000002 	streq	r0, [r0], -r2
    20e0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    20e4:	8e070074 	mcrhi	0, 0, r0, cr7, cr4, {3}
    20e8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    20ec:	0000008e 	andeq	r0, r0, lr, lsl #1
    20f0:	00007708 	andeq	r7, r0, r8, lsl #14
    20f4:	04040000 	streq	r0, [r4], #-0
    20f8:	00000021 	andeq	r0, r0, r1, lsr #32
    20fc:	007e0404 	rsbseq	r0, lr, r4, lsl #8
    2100:	7e090000 	cdpvc	0, 0, cr0, cr9, cr0, {0}
    2104:	02000002 	andeq	r0, r0, #2
    2108:	0000210d 	andeq	r2, r0, sp, lsl #2
    210c:	0d0d0a00 	vstreq	s0, [sp, #-0]
    2110:	0c010000 	stceq	0, cr0, [r1], {-0}
    2114:	20001d06 	andcs	r1, r0, r6, lsl #26
    2118:	0000003a 	andeq	r0, r0, sl, lsr r0
    211c:	00f39c01 	rscseq	r9, r3, r1, lsl #24
    2120:	6f0b0000 	svcvs	0x000b0000
    2124:	01006a62 	tsteq	r0, r2, ror #20
    2128:	0000f30c 	andeq	pc, r0, ip, lsl #6
    212c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2130:	000d260c 	andeq	r2, sp, ip, lsl #12
    2134:	6a0c0100 	bvs	30253c <startup-0x1fcfdac4>
    2138:	02000000 	andeq	r0, r0, #0
    213c:	130c7091 	movwne	r7, #49297	; 0xc091
    2140:	01000004 	tsteq	r0, r4
    2144:	00006a0c 	andeq	r6, r0, ip, lsl #20
    2148:	6c910200 	lfmvs	f0, 4, [r1], {0}
    214c:	0004a80c 	andeq	sl, r4, ip, lsl #16
    2150:	770c0100 	strvc	r0, [ip, -r0, lsl #2]
    2154:	02000000 	andeq	r0, r0, #0
    2158:	04006891 	streq	r6, [r0], #-2193	; 0xfffff76f
    215c:	00009a04 	andeq	r9, r0, r4, lsl #20
    2160:	02930d00 	addseq	r0, r3, #0, 26
    2164:	04010000 	streq	r0, [r1], #-0
    2168:	20001cac 	andcs	r1, r0, ip, lsr #25
    216c:	0000005a 	andeq	r0, r0, sl, asr r0
    2170:	620c9c01 	andvs	r9, ip, #256	; 0x100
    2174:	01000005 	tsteq	r0, r5
    2178:	0000f304 	andeq	pc, r0, r4, lsl #6
    217c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2180:	000d1c0c 	andeq	r1, sp, ip, lsl #24
    2184:	77040100 	strvc	r0, [r4, -r0, lsl #2]
    2188:	02000000 	andeq	r0, r0, #0
    218c:	d00e6891 	mulle	lr, r1, r8
    2190:	0100000c 	tsteq	r0, ip
    2194:	00007705 	andeq	r7, r0, r5, lsl #14
    2198:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    219c:	000bac0e 	andeq	sl, fp, lr, lsl #24
    21a0:	77060100 	strvc	r0, [r6, -r0, lsl #2]
    21a4:	02000000 	andeq	r0, r0, #0
    21a8:	00007091 	muleq	r0, r1, r0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	01130200 	tsteq	r3, r0, lsl #4
  14:	0b3a0b0b 	bleq	e82c48 <startup-0x1f17d3b8>
  18:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  1c:	0d030000 	stceq	0, cr0, [r3, #-0]
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	000b3813 	andeq	r3, fp, r3, lsl r8
  2c:	00240400 	eoreq	r0, r4, r0, lsl #8
  30:	0b3e0b0b 	bleq	f82c64 <startup-0x1f07d39c>
  34:	00000e03 	andeq	r0, r0, r3, lsl #28
  38:	0b000f05 	bleq	3c54 <startup-0x1fffc3ac>
  3c:	0013490b 	andseq	r4, r3, fp, lsl #18
  40:	00160600 	andseq	r0, r6, r0, lsl #12
  44:	0b3a0e03 	bleq	e83858 <startup-0x1f17c7a8>
  48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  4c:	13070000 	movwne	r0, #28672	; 0x7000
  50:	0b0e0301 	bleq	380c5c <startup-0x1fc7f3a4>
  54:	3b0b3a0b 	blcc	2ce888 <startup-0x1fd31778>
  58:	0013010b 	andseq	r0, r3, fp, lsl #2
  5c:	00240800 	eoreq	r0, r4, r0, lsl #16
  60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
  64:	00000803 	andeq	r0, r0, r3, lsl #16
  68:	27011509 	strcs	r1, [r1, -r9, lsl #10]
  6c:	00130119 	andseq	r0, r3, r9, lsl r1
  70:	00050a00 	andeq	r0, r5, r0, lsl #20
  74:	00001349 	andeq	r1, r0, r9, asr #6
  78:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
  7c:	00130113 	andseq	r0, r3, r3, lsl r1
  80:	00210c00 	eoreq	r0, r1, r0, lsl #24
  84:	340d0000 	strcc	r0, [sp], #-0
  88:	3a0e0300 	bcc	380c90 <startup-0x1fc7f370>
  8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  90:	3c193f13 	ldccc	15, cr3, [r9], {19}
  94:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
  98:	13490021 	movtne	r0, #36897	; 0x9021
  9c:	0000052f 	andeq	r0, r0, pc, lsr #10
  a0:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
  a4:	000b2f13 	andeq	r2, fp, r3, lsl pc
  a8:	00341000 	eorseq	r1, r4, r0
  ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
  b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  b4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  b8:	34110000 	ldrcc	r0, [r1], #-0
  bc:	3a0e0300 	bcc	380cc4 <startup-0x1fc7f33c>
  c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  c4:	00180213 	andseq	r0, r8, r3, lsl r2
  c8:	00341200 	eorseq	r1, r4, r0, lsl #4
  cc:	0b3a0803 	bleq	e820e0 <startup-0x1f17df20>
  d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  d4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  d8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
  dc:	03193f01 	tsteq	r9, #1, 30
  e0:	3b0b3a0e 	blcc	2ce920 <startup-0x1fd316e0>
  e4:	1119270b 	tstne	r9, fp, lsl #14
  e8:	40061201 	andmi	r1, r6, r1, lsl #4
  ec:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  f0:	00001301 	andeq	r1, r0, r1, lsl #6
  f4:	3f002e14 	svccc	0x00002e14
  f8:	3a0e0319 	bcc	380d64 <startup-0x1fc7f29c>
  fc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 100:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 104:	96184006 	ldrls	r4, [r8], -r6
 108:	00001942 	andeq	r1, r0, r2, asr #18
 10c:	3f002e15 	svccc	0x00002e15
 110:	3a0e0319 	bcc	380d7c <startup-0x1fc7f284>
 114:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 118:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 11c:	97184006 	ldrls	r4, [r8, -r6]
 120:	00001942 	andeq	r1, r0, r2, asr #18
 124:	01110100 	tsteq	r1, r0, lsl #2
 128:	0b130e25 	bleq	4c39c4 <startup-0x1fb3c63c>
 12c:	01110e03 	tsteq	r1, r3, lsl #28
 130:	17100612 			; <UNDEFINED> instruction: 0x17100612
 134:	13020000 	movwne	r0, #8192	; 0x2000
 138:	3a0b0b01 	bcc	2c2d44 <startup-0x1fd3d2bc>
 13c:	010b3b0b 	tsteq	fp, fp, lsl #22
 140:	03000013 	movweq	r0, #19
 144:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 148:	0b3b0b3a 	bleq	ec2e38 <startup-0x1f13d1c8>
 14c:	0b381349 	bleq	e04e78 <startup-0x1f1fb188>
 150:	24040000 	strcs	r0, [r4], #-0
 154:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 158:	000e030b 	andeq	r0, lr, fp, lsl #6
 15c:	000f0500 	andeq	r0, pc, r0, lsl #10
 160:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 164:	16060000 	strne	r0, [r6], -r0
 168:	3a0e0300 	bcc	380d70 <startup-0x1fc7f290>
 16c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 170:	07000013 	smladeq	r0, r3, r0, r0
 174:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 178:	0b3a0b0b 	bleq	e82dac <startup-0x1f17d254>
 17c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 180:	24080000 	strcs	r0, [r8], #-0
 184:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 188:	0008030b 	andeq	r0, r8, fp, lsl #6
 18c:	01150900 	tsteq	r5, r0, lsl #18
 190:	13011927 	movwne	r1, #6439	; 0x1927
 194:	050a0000 	streq	r0, [sl, #-0]
 198:	00134900 	andseq	r4, r3, r0, lsl #18
 19c:	01010b00 	tsteq	r1, r0, lsl #22
 1a0:	13011349 	movwne	r1, #4937	; 0x1349
 1a4:	210c0000 	mrscs	r0, (UNDEF: 12)
 1a8:	0d000000 	stceq	0, cr0, [r0, #-0]
 1ac:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 1b0:	0b3b0b3a 	bleq	ec2ea0 <startup-0x1f13d160>
 1b4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 1b8:	0000193c 	andeq	r1, r0, ip, lsr r9
 1bc:	4700340e 	strmi	r3, [r0, -lr, lsl #8]
 1c0:	3b0b3a13 	blcc	2cea14 <startup-0x1fd315ec>
 1c4:	0018020b 	andseq	r0, r8, fp, lsl #4
 1c8:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
 1cc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1d0:	0b3b0b3a 	bleq	ec2ec0 <startup-0x1f13d140>
 1d4:	01111927 	tsteq	r1, r7, lsr #18
 1d8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1dc:	01194296 			; <UNDEFINED> instruction: 0x01194296
 1e0:	10000013 	andne	r0, r0, r3, lsl r0
 1e4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 1e8:	0b3b0b3a 	bleq	ec2ed8 <startup-0x1f13d128>
 1ec:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1f0:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 1f4:	03193f01 	tsteq	r9, #1, 30
 1f8:	3b0b3a0e 	blcc	2cea38 <startup-0x1fd315c8>
 1fc:	1119270b 	tstne	r9, fp, lsl #14
 200:	40061201 	andmi	r1, r6, r1, lsl #4
 204:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 208:	01000000 	mrseq	r0, (UNDEF: 0)
 20c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 210:	0e030b13 	vmoveq.32	d3[0], r0
 214:	06120111 			; <UNDEFINED> instruction: 0x06120111
 218:	00001710 	andeq	r1, r0, r0, lsl r7
 21c:	0b011302 	bleq	44e2c <startup-0x1ffbb1d4>
 220:	3b0b3a0b 	blcc	2cea54 <startup-0x1fd315ac>
 224:	0013010b 	andseq	r0, r3, fp, lsl #2
 228:	000d0300 	andeq	r0, sp, r0, lsl #6
 22c:	0b3a0e03 	bleq	e83a40 <startup-0x1f17c5c0>
 230:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 234:	00000b38 	andeq	r0, r0, r8, lsr fp
 238:	0b002404 	bleq	9250 <startup-0x1fff6db0>
 23c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 240:	0500000e 	streq	r0, [r0, #-14]
 244:	0b0b000f 	bleq	2c0288 <startup-0x1fd3fd78>
 248:	00001349 	andeq	r1, r0, r9, asr #6
 24c:	03001606 	movweq	r1, #1542	; 0x606
 250:	3b0b3a0e 	blcc	2cea90 <startup-0x1fd31570>
 254:	0013490b 	andseq	r4, r3, fp, lsl #18
 258:	01130700 	tsteq	r3, r0, lsl #14
 25c:	0b0b0e03 	bleq	2c3a70 <startup-0x1fd3c590>
 260:	0b3b0b3a 	bleq	ec2f50 <startup-0x1f13d0b0>
 264:	00001301 	andeq	r1, r0, r1, lsl #6
 268:	0b002408 	bleq	9290 <startup-0x1fff6d70>
 26c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 270:	09000008 	stmdbeq	r0, {r3}
 274:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 278:	00001301 	andeq	r1, r0, r1, lsl #6
 27c:	4900050a 	stmdbmi	r0, {r1, r3, r8, sl}
 280:	0b000013 	bleq	2d4 <startup-0x1ffffd2c>
 284:	13490101 	movtne	r0, #37121	; 0x9101
 288:	00001301 	andeq	r1, r0, r1, lsl #6
 28c:	0000210c 	andeq	r2, r0, ip, lsl #2
 290:	00340d00 	eorseq	r0, r4, r0, lsl #26
 294:	0b3a0e03 	bleq	e83aa8 <startup-0x1f17c558>
 298:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 29c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 2a0:	210e0000 	mrscs	r0, (UNDEF: 14)
 2a4:	2f134900 	svccs	0x00134900
 2a8:	0f00000b 	svceq	0x0000000b
 2ac:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 2b0:	0b3b0b3a 	bleq	ec2fa0 <startup-0x1f13d060>
 2b4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2b8:	34100000 	ldrcc	r0, [r0], #-0
 2bc:	3a0e0300 	bcc	380ec4 <startup-0x1fc7f13c>
 2c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2c4:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 2c8:	11000018 	tstne	r0, r8, lsl r0
 2cc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2d0:	0b3a0e03 	bleq	e83ae4 <startup-0x1f17c51c>
 2d4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2d8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2dc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 2e0:	00130119 	andseq	r0, r3, r9, lsl r1
 2e4:	00051200 	andeq	r1, r5, r0, lsl #4
 2e8:	0b3a0e03 	bleq	e83afc <startup-0x1f17c504>
 2ec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2f0:	00001802 	andeq	r1, r0, r2, lsl #16
 2f4:	03012e13 	movweq	r2, #7699	; 0x1e13
 2f8:	3b0b3a0e 	blcc	2ceb38 <startup-0x1fd314c8>
 2fc:	1119270b 	tstne	r9, fp, lsl #14
 300:	40061201 	andmi	r1, r6, r1, lsl #4
 304:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 308:	01000000 	mrseq	r0, (UNDEF: 0)
 30c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 310:	0e030b13 	vmoveq.32	d3[0], r0
 314:	06120111 			; <UNDEFINED> instruction: 0x06120111
 318:	00001710 	andeq	r1, r0, r0, lsl r7
 31c:	0b002402 	bleq	932c <startup-0x1fff6cd4>
 320:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 324:	0300000e 	movweq	r0, #14
 328:	0b0b0113 	bleq	2c077c <startup-0x1fd3f884>
 32c:	0b3b0b3a 	bleq	ec301c <startup-0x1f13cfe4>
 330:	00001301 	andeq	r1, r0, r1, lsl #6
 334:	03000d04 	movweq	r0, #3332	; 0xd04
 338:	3b0b3a0e 	blcc	2ceb78 <startup-0x1fd31488>
 33c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 340:	0500000b 	streq	r0, [r0, #-11]
 344:	0b0b000f 	bleq	2c0388 <startup-0x1fd3fc78>
 348:	00001349 	andeq	r1, r0, r9, asr #6
 34c:	03001606 	movweq	r1, #1542	; 0x606
 350:	3b0b3a0e 	blcc	2ceb90 <startup-0x1fd31470>
 354:	0013490b 	andseq	r4, r3, fp, lsl #18
 358:	01130700 	tsteq	r3, r0, lsl #14
 35c:	0b0b0e03 	bleq	2c3b70 <startup-0x1fd3c490>
 360:	0b3b0b3a 	bleq	ec3050 <startup-0x1f13cfb0>
 364:	00001301 	andeq	r1, r0, r1, lsl #6
 368:	0b002408 	bleq	9390 <startup-0x1fff6c70>
 36c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 370:	09000008 	stmdbeq	r0, {r3}
 374:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 378:	00001301 	andeq	r1, r0, r1, lsl #6
 37c:	4900050a 	stmdbmi	r0, {r1, r3, r8, sl}
 380:	0b000013 	bleq	3d4 <startup-0x1ffffc2c>
 384:	13490101 	movtne	r0, #37121	; 0x9101
 388:	00001301 	andeq	r1, r0, r1, lsl #6
 38c:	0000210c 	andeq	r2, r0, ip, lsl #2
 390:	00340d00 	eorseq	r0, r4, r0, lsl #26
 394:	0b3a0e03 	bleq	e83ba8 <startup-0x1f17c458>
 398:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 39c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 3a0:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 3a4:	03193f01 	tsteq	r9, #1, 30
 3a8:	3b0b3a0e 	blcc	2cebe8 <startup-0x1fd31418>
 3ac:	1119270b 	tstne	r9, fp, lsl #14
 3b0:	40061201 	andmi	r1, r6, r1, lsl #4
 3b4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 3b8:	050f0000 	streq	r0, [pc, #-0]	; 3c0 <startup-0x1ffffc40>
 3bc:	3a0e0300 	bcc	380fc4 <startup-0x1fc7f03c>
 3c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3c4:	00180213 	andseq	r0, r8, r3, lsl r2
 3c8:	00341000 	eorseq	r1, r4, r0
 3cc:	0b3a0e03 	bleq	e83be0 <startup-0x1f17c420>
 3d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3d4:	00001802 	andeq	r1, r0, r2, lsl #16
 3d8:	01110100 	tsteq	r1, r0, lsl #2
 3dc:	0b130e25 	bleq	4c3c78 <startup-0x1fb3c388>
 3e0:	01110e03 	tsteq	r1, r3, lsl #28
 3e4:	17100612 			; <UNDEFINED> instruction: 0x17100612
 3e8:	13020000 	movwne	r0, #8192	; 0x2000
 3ec:	3a0b0b01 	bcc	2c2ff8 <startup-0x1fd3d008>
 3f0:	010b3b0b 	tsteq	fp, fp, lsl #22
 3f4:	03000013 	movweq	r0, #19
 3f8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 3fc:	0b3b0b3a 	bleq	ec30ec <startup-0x1f13cf14>
 400:	0b381349 	bleq	e0512c <startup-0x1f1faed4>
 404:	24040000 	strcs	r0, [r4], #-0
 408:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 40c:	000e030b 	andeq	r0, lr, fp, lsl #6
 410:	000f0500 	andeq	r0, pc, r0, lsl #10
 414:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 418:	16060000 	strne	r0, [r6], -r0
 41c:	3a0e0300 	bcc	381024 <startup-0x1fc7efdc>
 420:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 424:	07000013 	smladeq	r0, r3, r0, r0
 428:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 42c:	0b3a0b0b 	bleq	e83060 <startup-0x1f17cfa0>
 430:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 434:	24080000 	strcs	r0, [r8], #-0
 438:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 43c:	0008030b 	andeq	r0, r8, fp, lsl #6
 440:	01150900 	tsteq	r5, r0, lsl #18
 444:	13011927 	movwne	r1, #6439	; 0x1927
 448:	050a0000 	streq	r0, [sl, #-0]
 44c:	00134900 	andseq	r4, r3, r0, lsl #18
 450:	01010b00 	tsteq	r1, r0, lsl #22
 454:	13011349 	movwne	r1, #4937	; 0x1349
 458:	210c0000 	mrscs	r0, (UNDEF: 12)
 45c:	0d000000 	stceq	0, cr0, [r0, #-0]
 460:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 464:	0b3b0b3a 	bleq	ec3154 <startup-0x1f13ceac>
 468:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 46c:	0000193c 	andeq	r1, r0, ip, lsr r9
 470:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 474:	00052f13 	andeq	r2, r5, r3, lsl pc
 478:	00340f00 	eorseq	r0, r4, r0, lsl #30
 47c:	0b3a1347 	bleq	e851a0 <startup-0x1f17ae60>
 480:	18020b3b 	stmdane	r2, {r0, r1, r3, r4, r5, r8, r9, fp}
 484:	34100000 	ldrcc	r0, [r0], #-0
 488:	3a134700 	bcc	4d2090 <startup-0x1fb2df70>
 48c:	0018020b 	andseq	r0, r8, fp, lsl #4
 490:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 494:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 498:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 49c:	01111927 	tsteq	r1, r7, lsr #18
 4a0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4a4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 4a8:	12000013 	andne	r0, r0, #19
 4ac:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 4b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 4b4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 4b8:	34130000 	ldrcc	r0, [r3], #-0
 4bc:	3a0e0300 	bcc	3810c4 <startup-0x1fc7ef3c>
 4c0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 4c4:	00180213 	andseq	r0, r8, r3, lsl r2
 4c8:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
 4cc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 4d4:	01111927 	tsteq	r1, r7, lsr #18
 4d8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4dc:	01194297 			; <UNDEFINED> instruction: 0x01194297
 4e0:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 4e4:	08030034 	stmdaeq	r3, {r2, r4, r5}
 4e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 4ec:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 4f0:	34160000 	ldrcc	r0, [r6], #-0
 4f4:	3a080300 	bcc	2010fc <startup-0x1fdfef04>
 4f8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 4fc:	17000013 	smladne	r0, r3, r0, r0
 500:	08030005 	stmdaeq	r3, {r0, r2}
 504:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 508:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 50c:	0b180000 	bleq	600514 <startup-0x1f9ffaec>
 510:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 514:	19000006 	stmdbne	r0, {r1, r2}
 518:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 51c:	0b3a0e03 	bleq	e83d30 <startup-0x1f17c2d0>
 520:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 524:	06120111 			; <UNDEFINED> instruction: 0x06120111
 528:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 52c:	00130119 	andseq	r0, r3, r9, lsl r1
 530:	00051a00 	andeq	r1, r5, r0, lsl #20
 534:	0b3a0803 	bleq	e82548 <startup-0x1f17dab8>
 538:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 53c:	00001802 	andeq	r1, r0, r2, lsl #16
 540:	0300051b 	movweq	r0, #1307	; 0x51b
 544:	3b0b3a0e 	blcc	2ced84 <startup-0x1fd3127c>
 548:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 54c:	1c000018 	stcne	0, cr0, [r0], {24}
 550:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 554:	0b3b0b3a 	bleq	ec3244 <startup-0x1f13cdbc>
 558:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 55c:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 560:	03193f01 	tsteq	r9, #1, 30
 564:	3b0b3a0e 	blcc	2ceda4 <startup-0x1fd3125c>
 568:	1119270b 	tstne	r9, fp, lsl #14
 56c:	40061201 	andmi	r1, r6, r1, lsl #4
 570:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 574:	00001301 	andeq	r1, r0, r1, lsl #6
 578:	0300341e 	movweq	r3, #1054	; 0x41e
 57c:	3b0b3a08 	blcc	2ceda4 <startup-0x1fd3125c>
 580:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 584:	1f000018 	svcne	0x00000018
 588:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 58c:	0b3a0e03 	bleq	e83da0 <startup-0x1f17c260>
 590:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 594:	06120111 			; <UNDEFINED> instruction: 0x06120111
 598:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 59c:	20000019 	andcs	r0, r0, r9, lsl r0
 5a0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 5a4:	0b3a0e03 	bleq	e83db8 <startup-0x1f17c248>
 5a8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 5ac:	01111349 	tsteq	r1, r9, asr #6
 5b0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 5b4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 5b8:	21000013 	tstcs	r0, r3, lsl r0
 5bc:	0e03012e 	adfeqsp	f0, f3, #0.5
 5c0:	0b3b0b3a 	bleq	ec32b0 <startup-0x1f13cd50>
 5c4:	13491927 	movtne	r1, #39207	; 0x9927
 5c8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5cc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 5d0:	00130119 	andseq	r0, r3, r9, lsl r1
 5d4:	012e2200 			; <UNDEFINED> instruction: 0x012e2200
 5d8:	0b3a0e03 	bleq	e83dec <startup-0x1f17c214>
 5dc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 5e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5e4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 5e8:	00130119 	andseq	r0, r3, r9, lsl r1
 5ec:	002e2300 	eoreq	r2, lr, r0, lsl #6
 5f0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 5f4:	0b3b0b3a 	bleq	ec32e4 <startup-0x1f13cd1c>
 5f8:	01111927 	tsteq	r1, r7, lsr #18
 5fc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 600:	00194297 	mulseq	r9, r7, r2
 604:	11010000 	mrsne	r0, (UNDEF: 1)
 608:	130e2501 	movwne	r2, #58625	; 0xe501
 60c:	110e030b 	tstne	lr, fp, lsl #6
 610:	10061201 	andne	r1, r6, r1, lsl #4
 614:	02000017 	andeq	r0, r0, #23
 618:	0b0b0113 	bleq	2c0a6c <startup-0x1fd3f594>
 61c:	0b3b0b3a 	bleq	ec330c <startup-0x1f13ccf4>
 620:	00001301 	andeq	r1, r0, r1, lsl #6
 624:	03000d03 	movweq	r0, #3331	; 0xd03
 628:	3b0b3a0e 	blcc	2cee68 <startup-0x1fd31198>
 62c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 630:	0400000b 	streq	r0, [r0], #-11
 634:	0b0b0024 	bleq	2c06cc <startup-0x1fd3f934>
 638:	0e030b3e 	vmoveq.16	d3[0], r0
 63c:	0f050000 	svceq	0x00050000
 640:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 644:	06000013 			; <UNDEFINED> instruction: 0x06000013
 648:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 64c:	0b3b0b3a 	bleq	ec333c <startup-0x1f13ccc4>
 650:	00001349 	andeq	r1, r0, r9, asr #6
 654:	03011307 	movweq	r1, #4871	; 0x1307
 658:	3a0b0b0e 	bcc	2c3298 <startup-0x1fd3cd68>
 65c:	010b3b0b 	tsteq	fp, fp, lsl #22
 660:	08000013 	stmdaeq	r0, {r0, r1, r4}
 664:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 668:	0b3a0e03 	bleq	e83e7c <startup-0x1f17c184>
 66c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 670:	06120111 			; <UNDEFINED> instruction: 0x06120111
 674:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 678:	00130119 	andseq	r0, r3, r9, lsl r1
 67c:	00050900 	andeq	r0, r5, r0, lsl #18
 680:	0b3a0e03 	bleq	e83e94 <startup-0x1f17c16c>
 684:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 688:	00001802 	andeq	r1, r0, r2, lsl #16
 68c:	01110100 	tsteq	r1, r0, lsl #2
 690:	0b130e25 	bleq	4c3f2c <startup-0x1fb3c0d4>
 694:	01110e03 	tsteq	r1, r3, lsl #28
 698:	17100612 			; <UNDEFINED> instruction: 0x17100612
 69c:	13020000 	movwne	r0, #8192	; 0x2000
 6a0:	3a0b0b01 	bcc	2c32ac <startup-0x1fd3cd54>
 6a4:	010b3b0b 	tsteq	fp, fp, lsl #22
 6a8:	03000013 	movweq	r0, #19
 6ac:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 6b0:	0b3b0b3a 	bleq	ec33a0 <startup-0x1f13cc60>
 6b4:	0b381349 	bleq	e053e0 <startup-0x1f1fac20>
 6b8:	24040000 	strcs	r0, [r4], #-0
 6bc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 6c0:	000e030b 	andeq	r0, lr, fp, lsl #6
 6c4:	000f0500 	andeq	r0, pc, r0, lsl #10
 6c8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 6cc:	16060000 	strne	r0, [r6], -r0
 6d0:	3a0e0300 	bcc	3812d8 <startup-0x1fc7ed28>
 6d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6d8:	07000013 	smladeq	r0, r3, r0, r0
 6dc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 6e0:	0b3a0e03 	bleq	e83ef4 <startup-0x1f17c10c>
 6e4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 6e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 6ec:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 6f0:	00130119 	andseq	r0, r3, r9, lsl r1
 6f4:	00050800 	andeq	r0, r5, r0, lsl #16
 6f8:	0b3a0803 	bleq	e8270c <startup-0x1f17d8f4>
 6fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 700:	00001802 	andeq	r1, r0, r2, lsl #16
 704:	03000509 	movweq	r0, #1289	; 0x509
 708:	3b0b3a0e 	blcc	2cef48 <startup-0x1fd310b8>
 70c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 710:	0a000018 	beq	778 <startup-0x1ffff888>
 714:	0b0b0024 	bleq	2c07ac <startup-0x1fd3f854>
 718:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 71c:	01000000 	mrseq	r0, (UNDEF: 0)
 720:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 724:	0e030b13 	vmoveq.32	d3[0], r0
 728:	06120111 			; <UNDEFINED> instruction: 0x06120111
 72c:	00001710 	andeq	r1, r0, r0, lsl r7
 730:	0b011302 	bleq	45340 <startup-0x1ffbacc0>
 734:	3b0b3a0b 	blcc	2cef68 <startup-0x1fd31098>
 738:	0013010b 	andseq	r0, r3, fp, lsl #2
 73c:	000d0300 	andeq	r0, sp, r0, lsl #6
 740:	0b3a0e03 	bleq	e83f54 <startup-0x1f17c0ac>
 744:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 748:	00000b38 	andeq	r0, r0, r8, lsr fp
 74c:	0b002404 	bleq	9764 <startup-0x1fff689c>
 750:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 754:	0500000e 	streq	r0, [r0, #-14]
 758:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 75c:	0b3b0b3a 	bleq	ec344c <startup-0x1f13cbb4>
 760:	00001349 	andeq	r1, r0, r9, asr #6
 764:	3f012e06 	svccc	0x00012e06
 768:	3a0e0319 	bcc	3813d4 <startup-0x1fc7ec2c>
 76c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 770:	11134919 	tstne	r3, r9, lsl r9
 774:	40061201 	andmi	r1, r6, r1, lsl #4
 778:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 77c:	00001301 	andeq	r1, r0, r1, lsl #6
 780:	03000507 	movweq	r0, #1287	; 0x507
 784:	3b0b3a08 	blcc	2cefac <startup-0x1fd31054>
 788:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 78c:	08000018 	stmdaeq	r0, {r3, r4}
 790:	08030034 	stmdaeq	r3, {r2, r4, r5}
 794:	0b3b0b3a 	bleq	ec3484 <startup-0x1f13cb7c>
 798:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 79c:	24090000 	strcs	r0, [r9], #-0
 7a0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 7a4:	0008030b 	andeq	r0, r8, fp, lsl #6
 7a8:	002e0a00 	eoreq	r0, lr, r0, lsl #20
 7ac:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 7b0:	0b3b0b3a 	bleq	ec34a0 <startup-0x1f13cb60>
 7b4:	13491927 	movtne	r1, #39207	; 0x9927
 7b8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 7bc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 7c0:	0b000019 	bleq	82c <startup-0x1ffff7d4>
 7c4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 7c8:	0b3a0e03 	bleq	e83fdc <startup-0x1f17c024>
 7cc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 7d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 7d4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 7d8:	00000019 	andeq	r0, r0, r9, lsl r0
 7dc:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 7e0:	030b130e 	movweq	r1, #45838	; 0xb30e
 7e4:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 7e8:	00171006 	andseq	r1, r7, r6
 7ec:	01130200 	tsteq	r3, r0, lsl #4
 7f0:	0b3a0b0b 	bleq	e83424 <startup-0x1f17cbdc>
 7f4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 7f8:	0d030000 	stceq	0, cr0, [r3, #-0]
 7fc:	3a0e0300 	bcc	381404 <startup-0x1fc7ebfc>
 800:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 804:	000b3813 	andeq	r3, fp, r3, lsl r8
 808:	00240400 	eoreq	r0, r4, r0, lsl #8
 80c:	0b3e0b0b 	bleq	f83440 <startup-0x1f07cbc0>
 810:	00000e03 	andeq	r0, r0, r3, lsl #28
 814:	0b000f05 	bleq	4430 <startup-0x1fffbbd0>
 818:	0013490b 	andseq	r4, r3, fp, lsl #18
 81c:	00160600 	andseq	r0, r6, r0, lsl #12
 820:	0b3a0e03 	bleq	e84034 <startup-0x1f17bfcc>
 824:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 828:	13070000 	movwne	r0, #28672	; 0x7000
 82c:	0b0e0301 	bleq	381438 <startup-0x1fc7ebc8>
 830:	3b0b3a0b 	blcc	2cf064 <startup-0x1fd30f9c>
 834:	0013010b 	andseq	r0, r3, fp, lsl #2
 838:	00240800 	eoreq	r0, r4, r0, lsl #16
 83c:	0b3e0b0b 	bleq	f83470 <startup-0x1f07cb90>
 840:	00000803 	andeq	r0, r0, r3, lsl #16
 844:	27011509 	strcs	r1, [r1, -r9, lsl #10]
 848:	00130119 	andseq	r0, r3, r9, lsl r1
 84c:	00050a00 	andeq	r0, r5, r0, lsl #20
 850:	00001349 	andeq	r1, r0, r9, asr #6
 854:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
 858:	00130113 	andseq	r0, r3, r3, lsl r1
 85c:	00210c00 	eoreq	r0, r1, r0, lsl #24
 860:	340d0000 	strcc	r0, [sp], #-0
 864:	3a0e0300 	bcc	38146c <startup-0x1fc7eb94>
 868:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 86c:	3c193f13 	ldccc	15, cr3, [r9], {19}
 870:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
 874:	13490021 	movtne	r0, #36897	; 0x9021
 878:	0000052f 	andeq	r0, r0, pc, lsr #10
 87c:	3f012e0f 	svccc	0x00012e0f
 880:	3a0e0319 	bcc	3814ec <startup-0x1fc7eb14>
 884:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 888:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 88c:	96184006 	ldrls	r4, [r8], -r6
 890:	13011942 	movwne	r1, #6466	; 0x1942
 894:	34100000 	ldrcc	r0, [r0], #-0
 898:	3a080300 	bcc	2014a0 <startup-0x1fdfeb60>
 89c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 8a0:	00180213 	andseq	r0, r8, r3, lsl r2
 8a4:	00341100 	eorseq	r1, r4, r0, lsl #2
 8a8:	0b3a0e03 	bleq	e840bc <startup-0x1f17bf44>
 8ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 8b0:	00001802 	andeq	r1, r0, r2, lsl #16
 8b4:	49002112 	stmdbmi	r0, {r1, r4, r8, sp}
 8b8:	000b2f13 	andeq	r2, fp, r3, lsl pc
 8bc:	00051300 	andeq	r1, r5, r0, lsl #6
 8c0:	0b3a0e03 	bleq	e840d4 <startup-0x1f17bf2c>
 8c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 8c8:	00001802 	andeq	r1, r0, r2, lsl #16
 8cc:	3f002e14 	svccc	0x00002e14
 8d0:	3a0e0319 	bcc	38153c <startup-0x1fc7eac4>
 8d4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 8d8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 8dc:	96184006 	ldrls	r4, [r8], -r6
 8e0:	00001942 	andeq	r1, r0, r2, asr #18
 8e4:	3f002e15 	svccc	0x00002e15
 8e8:	3a0e0319 	bcc	381554 <startup-0x1fc7eaac>
 8ec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 8f0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 8f4:	97184006 	ldrls	r4, [r8, -r6]
 8f8:	00001942 	andeq	r1, r0, r2, asr #18
 8fc:	03000516 	movweq	r0, #1302	; 0x516
 900:	3b0b3a08 	blcc	2cf128 <startup-0x1fd30ed8>
 904:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 908:	17000018 	smladne	r0, r8, r0, r0
 90c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 910:	0b3a0e03 	bleq	e84124 <startup-0x1f17bedc>
 914:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 918:	01111349 	tsteq	r1, r9, asr #6
 91c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 920:	01194296 			; <UNDEFINED> instruction: 0x01194296
 924:	18000013 	stmdane	r0, {r0, r1, r4}
 928:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 92c:	0b3a0e03 	bleq	e84140 <startup-0x1f17bec0>
 930:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 934:	06120111 			; <UNDEFINED> instruction: 0x06120111
 938:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 93c:	00130119 	andseq	r0, r3, r9, lsl r1
 940:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
 944:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 948:	0b3b0b3a 	bleq	ec3638 <startup-0x1f13c9c8>
 94c:	01111927 	tsteq	r1, r7, lsr #18
 950:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 954:	00194297 	mulseq	r9, r7, r2
 958:	11010000 	mrsne	r0, (UNDEF: 1)
 95c:	130e2501 	movwne	r2, #58625	; 0xe501
 960:	110e030b 	tstne	lr, fp, lsl #6
 964:	10061201 	andne	r1, r6, r1, lsl #4
 968:	02000017 	andeq	r0, r0, #23
 96c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 970:	0b3a0b0b 	bleq	e835a4 <startup-0x1f17ca5c>
 974:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 978:	0d030000 	stceq	0, cr0, [r3, #-0]
 97c:	3a0e0300 	bcc	381584 <startup-0x1fc7ea7c>
 980:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 984:	000b3813 	andeq	r3, fp, r3, lsl r8
 988:	000f0400 	andeq	r0, pc, r0, lsl #8
 98c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 990:	24050000 	strcs	r0, [r5], #-0
 994:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 998:	000e030b 	andeq	r0, lr, fp, lsl #6
 99c:	00240600 	eoreq	r0, r4, r0, lsl #12
 9a0:	0b3e0b0b 	bleq	f835d4 <startup-0x1f07ca2c>
 9a4:	00000803 	andeq	r0, r0, r3, lsl #16
 9a8:	27011507 	strcs	r1, [r1, -r7, lsl #10]
 9ac:	00130119 	andseq	r0, r3, r9, lsl r1
 9b0:	00050800 	andeq	r0, r5, r0, lsl #16
 9b4:	00001349 	andeq	r1, r0, r9, asr #6
 9b8:	03001609 	movweq	r1, #1545	; 0x609
 9bc:	3b0b3a0e 	blcc	2cf1fc <startup-0x1fd30e04>
 9c0:	0013490b 	andseq	r4, r3, fp, lsl #18
 9c4:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
 9c8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 9cc:	0b3b0b3a 	bleq	ec36bc <startup-0x1f13c944>
 9d0:	01111927 	tsteq	r1, r7, lsr #18
 9d4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 9d8:	01194297 			; <UNDEFINED> instruction: 0x01194297
 9dc:	0b000013 	bleq	a30 <startup-0x1ffff5d0>
 9e0:	08030005 	stmdaeq	r3, {r0, r2}
 9e4:	0b3b0b3a 	bleq	ec36d4 <startup-0x1f13c92c>
 9e8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 9ec:	050c0000 	streq	r0, [ip, #-0]
 9f0:	3a0e0300 	bcc	3815f8 <startup-0x1fc7ea08>
 9f4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 9f8:	00180213 	andseq	r0, r8, r3, lsl r2
 9fc:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
 a00:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 a04:	0b3b0b3a 	bleq	ec36f4 <startup-0x1f13c90c>
 a08:	01111927 	tsteq	r1, r7, lsr #18
 a0c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 a10:	00194296 	mulseq	r9, r6, r2
 a14:	00340e00 	eorseq	r0, r4, r0, lsl #28
 a18:	0b3a0e03 	bleq	e8422c <startup-0x1f17bdd4>
 a1c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 a20:	00001802 	andeq	r1, r0, r2, lsl #16
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	06e40002 	strbteq	r0, [r4], r2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	200004c0 	andcs	r0, r0, r0, asr #9
  3c:	00000056 	andeq	r0, r0, r6, asr r0
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	08c80002 	stmiaeq	r8, {r1}^
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000518 	andcs	r0, r0, r8, lsl r5
  5c:	000002a8 	andeq	r0, r0, r8, lsr #5
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	0df70002 	ldcleq	0, cr0, [r7, #8]!
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200007c0 	andcs	r0, r0, r0, asr #15
  7c:	000000d8 	ldrdeq	r0, [r0], -r8
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	0fd00002 	svceq	0x00d00002
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000898 	mulcs	r0, r8, r8
  9c:	00000e44 	andeq	r0, r0, r4, asr #28
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	18730002 	ldmdane	r3!, {r1}^
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200016dc 	ldrdcs	r1, [r0], -ip
  bc:	00000028 	andeq	r0, r0, r8, lsr #32
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	19770002 	ldmdbne	r7!, {r1}^
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	20001704 	andcs	r1, r0, r4, lsl #14
  dc:	00000028 	andeq	r0, r0, r8, lsr #32
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	1a3e0002 	bne	f800fc <startup-0x1f07ff04>
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	2000172c 	andcs	r1, r0, ip, lsr #14
  fc:	00000060 	andeq	r0, r0, r0, rrx
	...
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	1b770002 	blne	1dc011c <startup-0x1e23fee4>
 110:	00040000 	andeq	r0, r4, r0
 114:	00000000 	andeq	r0, r0, r0
 118:	2000178c 	andcs	r1, r0, ip, lsl #15
 11c:	00000520 	andeq	r0, r0, r0, lsr #10
	...
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	20680002 	rsbcs	r0, r8, r2
 130:	00040000 	andeq	r0, r4, r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20001cac 	andcs	r1, r0, ip, lsr #25
 13c:	00000094 	muleq	r0, r4, r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200004c0 	andcs	r0, r0, r0, asr #9
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000001d4 	ldrdeq	r0, [r0], -r4
   4:	01450002 	cmpeq	r5, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	6f6d2f3a 	svcvs	0x006d2f3a
  20:	2f632f70 	svccs	0x00632f70
  24:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
  28:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
  2c:	6f697461 	svcvs	0x00697461
  30:	2f72656e 	svccs	0x0072656e
  34:	73504944 	cmpvc	r0, #68, 18	; 0x110000
  38:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
  3c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
  40:	74730000 	ldrbtvc	r0, [r3], #-0
  44:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  48:	00632e70 	rsbeq	r2, r3, r0, ror lr
  4c:	73000001 	movwvc	r0, #1
  50:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
  54:	00682e65 	rsbeq	r2, r8, r5, ror #28
  58:	69000001 	stmdbvs	r0, {r0}
  5c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
  60:	0100682e 	tsteq	r0, lr, lsr #16
  64:	61670000 	cmnvs	r7, r0
  68:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
  6c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
  70:	0100682e 	tsteq	r0, lr, lsr #16
  74:	72670000 	rsbvc	r0, r7, #0
  78:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  7c:	682e7363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, ip, sp, lr}
  80:	00000100 	andeq	r0, r0, r0, lsl #2
  84:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
  88:	5f726574 	svcpl	0x00726574
  8c:	63616c62 	cmnvs	r1, #25088	; 0x6200
  90:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
  94:	0001006d 	andeq	r0, r1, sp, rrx
  98:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
  9c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
  a0:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
  a4:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
  a8:	01006d62 	tsteq	r0, r2, ror #26
  ac:	6f6d0000 	svcvs	0x006d0000
  b0:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
  b4:	72675f72 	rsbvc	r5, r7, #456	; 0x1c8
  b8:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
  bc:	01006d62 	tsteq	r0, r2, ror #26
  c0:	61630000 	cmnvs	r3, r0
  c4:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
  c8:	616c625f 	cmnvs	ip, pc, asr r2
  cc:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
  d0:	01006d62 	tsteq	r0, r2, ror #26
  d4:	61630000 	cmnvs	r3, r0
  d8:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
  dc:	6172675f 	cmnvs	r2, pc, asr r7
  e0:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
  e4:	0001006d 	andeq	r0, r1, sp, rrx
  e8:	73616300 	cmnvc	r1, #0, 6
  ec:	5f656c74 	svcpl	0x00656c74
  f0:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
  f4:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
  f8:	0001006d 	andeq	r0, r1, sp, rrx
  fc:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
 100:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
 104:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 108:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 10c:	00000100 	andeq	r0, r0, r0, lsl #2
 110:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 114:	72675f65 	rsbvc	r5, r7, #404	; 0x194
 118:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
 11c:	01006d62 	tsteq	r0, r2, ror #26
 120:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
 124:	5f656c74 	svcpl	0x00656c74
 128:	63616c62 	cmnvs	r1, #25088	; 0x6200
 12c:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
 130:	0001006d 	andeq	r0, r1, sp, rrx
 134:	6f6c7300 	svcvs	0x006c7300
 138:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
 13c:	682e7478 	stmdavs	lr!, {r3, r4, r5, r6, sl, ip, sp, lr}
 140:	00000100 	andeq	r0, r0, r0, lsl #2
 144:	782e6762 	stmdavc	lr!, {r1, r5, r6, r8, r9, sl, sp, lr}
 148:	01006d62 	tsteq	r0, r2, ror #26
 14c:	00000000 	andeq	r0, r0, r0
 150:	00000205 	andeq	r0, r0, r5, lsl #4
 154:	20032000 	andcs	r2, r3, r0
 158:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
 15c:	01010003 	tsteq	r1, r3
 160:	10020500 	andne	r0, r2, r0, lsl #10
 164:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
 168:	3d2f0115 	stfccs	f0, [pc, #-84]!	; 11c <startup-0x1ffffee4>
 16c:	03303030 	teqeq	r0, #48	; 0x30
 170:	2f3d7424 	svccs	0x003d7424
 174:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
 178:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
 17c:	2f3e672f 	svccs	0x003e672f
 180:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
 184:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
 188:	2f3d672f 	svccs	0x003d672f
 18c:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
 190:	1641023d 			; <UNDEFINED> instruction: 0x1641023d
 194:	2f3c0a03 	svccs	0x003c0a03
 198:	bb758332 	bllt	1d60e68 <startup-0x1e29f198>
 19c:	5c595959 	mrrcpl	9, 5, r5, r9, cr9	; <UNPREDICTABLE>
 1a0:	59bb7583 	ldmibpl	fp!, {r0, r1, r7, r8, sl, ip, sp, lr}
 1a4:	580a0367 	stmdapl	sl, {r0, r1, r2, r5, r6, r8, r9}
 1a8:	59bb7583 	ldmibpl	fp!, {r0, r1, r7, r8, sl, ip, sp, lr}
 1ac:	595a5b59 	ldmdbpl	sl, {r0, r3, r4, r6, r8, r9, fp, ip, lr}^
 1b0:	4d4b4b4b 	vstrmi	d20, [fp, #-300]	; 0xfffffed4
 1b4:	034b4c4b 	movteq	r4, #48203	; 0xbc4b
 1b8:	75754a0d 	ldrbvc	r4, [r5, #-2573]!	; 0xfffff5f3
 1bc:	75757575 	ldrbvc	r7, [r5, #-1397]!	; 0xfffffa8b
 1c0:	75757575 	ldrbvc	r7, [r5, #-1397]!	; 0xfffffa8b
 1c4:	9367596b 	cmnls	r7, #1753088	; 0x1ac000
 1c8:	675a5967 	ldrbvs	r5, [sl, -r7, ror #18]
 1cc:	7675bc3e 			; <UNDEFINED> instruction: 0x7675bc3e
 1d0:	02906f03 	addseq	r6, r0, #3, 30
 1d4:	01010043 	tsteq	r1, r3, asr #32
 1d8:	0000008c 	andeq	r0, r0, ip, lsl #1
 1dc:	00720002 	rsbseq	r0, r2, r2
 1e0:	01020000 	mrseq	r0, (UNDEF: 2)
 1e4:	000d0efb 	strdeq	r0, [sp], -fp
 1e8:	01010101 	tsteq	r1, r1, lsl #2
 1ec:	01000000 	mrseq	r0, (UNDEF: 0)
 1f0:	43010000 	movwmi	r0, #4096	; 0x1000
 1f4:	6f6d2f3a 	svcvs	0x006d2f3a
 1f8:	2f632f70 	svccs	0x00632f70
 1fc:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 200:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 204:	6f697461 	svcvs	0x00697461
 208:	2f72656e 	svccs	0x0072656e
 20c:	70617267 	rsbvc	r7, r1, r7, ror #4
 210:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 214:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 218:	00007961 	andeq	r7, r0, r1, ror #18
 21c:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 220:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 224:	632e7463 			; <UNDEFINED> instruction: 0x632e7463
 228:	00000100 	andeq	r0, r0, r0, lsl #2
 22c:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 230:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
 234:	00000100 	andeq	r0, r0, r0, lsl #2
 238:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
 23c:	00682e65 	rsbeq	r2, r8, r5, ror #28
 240:	67000001 	strvs	r0, [r0, -r1]
 244:	6f656d61 	svcvs	0x00656d61
 248:	63656a62 	cmnvs	r5, #401408	; 0x62000
 24c:	00682e74 	rsbeq	r2, r8, r4, ror lr
 250:	00000001 	andeq	r0, r0, r1
 254:	c0020500 	andgt	r0, r2, r0, lsl #10
 258:	19200004 	stmdbne	r0!, {r2}
 25c:	594b4c4c 	stmdbpl	fp, {r2, r3, r6, sl, fp, lr}^
 260:	02ca3d67 	sbceq	r3, sl, #6592	; 0x19c0
 264:	01010004 	tsteq	r1, r4
 268:	00000184 	andeq	r0, r0, r4, lsl #3
 26c:	01370002 	teqeq	r7, r2
 270:	01020000 	mrseq	r0, (UNDEF: 2)
 274:	000d0efb 	strdeq	r0, [sp], -fp
 278:	01010101 	tsteq	r1, r1, lsl #2
 27c:	01000000 	mrseq	r0, (UNDEF: 0)
 280:	43010000 	movwmi	r0, #4096	; 0x1000
 284:	6f6d2f3a 	svcvs	0x006d2f3a
 288:	2f632f70 	svccs	0x00632f70
 28c:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 290:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 294:	6f697461 	svcvs	0x00697461
 298:	2f72656e 	svccs	0x0072656e
 29c:	73504944 	cmpvc	r0, #68, 18	; 0x110000
 2a0:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
 2a4:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
 2a8:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
 2ac:	632e6572 			; <UNDEFINED> instruction: 0x632e6572
 2b0:	00000100 	andeq	r0, r0, r0, lsl #2
 2b4:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 2b8:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
 2bc:	00000100 	andeq	r0, r0, r0, lsl #2
 2c0:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
 2c4:	00682e65 	rsbeq	r2, r8, r5, ror #28
 2c8:	67000001 	strvs	r0, [r0, -r1]
 2cc:	6f656d61 	svcvs	0x00656d61
 2d0:	63656a62 	cmnvs	r5, #401408	; 0x62000
 2d4:	00682e74 	rsbeq	r2, r8, r4, ror lr
 2d8:	66000001 	strvs	r0, [r0], -r1
 2dc:	5f657269 	svcpl	0x00657269
 2e0:	63616c62 	cmnvs	r1, #25088	; 0x6200
 2e4:	2e325f6b 	cdpcs	15, 3, cr5, cr2, cr11, {3}
 2e8:	006d6278 	rsbeq	r6, sp, r8, ror r2
 2ec:	66000001 	strvs	r0, [r0], -r1
 2f0:	31657269 	cmncc	r5, r9, ror #4
 2f4:	6172675f 	cmnvs	r2, pc, asr r7
 2f8:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
 2fc:	0001006d 	andeq	r0, r1, sp, rrx
 300:	72696600 	rsbvc	r6, r9, #0, 12
 304:	6c5f3165 	ldfvse	f3, [pc], {101}	; 0x65
 308:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 30c:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 310:	00000100 	andeq	r0, r0, r0, lsl #2
 314:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 318:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
 31c:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
 320:	01006d62 	tsteq	r0, r2, ror #26
 324:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
 328:	5f326572 	svcpl	0x00326572
 32c:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 330:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
 334:	0001006d 	andeq	r0, r1, sp, rrx
 338:	72696600 	rsbvc	r6, r9, #0, 12
 33c:	675f3365 	ldrbvs	r3, [pc, -r5, ror #6]
 340:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
 344:	006d6278 	rsbeq	r6, sp, r8, ror r2
 348:	66000001 	strvs	r0, [r0], -r1
 34c:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
 350:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
 354:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
 358:	01006d62 	tsteq	r0, r2, ror #26
 35c:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
 360:	5f346572 	svcpl	0x00346572
 364:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
 368:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 36c:	00000100 	andeq	r0, r0, r0, lsl #2
 370:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 374:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 378:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
 37c:	006d6278 	rsbeq	r6, sp, r8, ror r2
 380:	66000001 	strvs	r0, [r0], -r1
 384:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
 388:	6172675f 	cmnvs	r2, pc, asr r7
 38c:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
 390:	0001006d 	andeq	r0, r1, sp, rrx
 394:	72696600 	rsbvc	r6, r9, #0, 12
 398:	6c5f3565 	cfldr64vs	mvdx3, [pc], {101}	; 0x65
 39c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 3a0:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 3a4:	00000100 	andeq	r0, r0, r0, lsl #2
 3a8:	02050000 	andeq	r0, r5, #0
 3ac:	20000518 	andcs	r0, r0, r8, lsl r5
 3b0:	3d013003 	stccc	0, cr3, [r1, #-12]
 3b4:	2f3e672f 	svccs	0x003e672f
 3b8:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
 3bc:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
 3c0:	2f3e672f 	svccs	0x003e672f
 3c4:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
 3c8:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
 3cc:	2f3e672f 	svccs	0x003e672f
 3d0:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
 3d4:	1446023d 	strbne	r0, [r6], #-573	; 0xfffffdc3
 3d8:	3e2f4b4c 	vnmulcc.f64	d4, d15, d12
 3dc:	5959594b 	ldmdbpl	r9, {r0, r1, r3, r6, r8, fp, ip, lr}^
 3e0:	9191915a 	orrsls	r9, r1, sl, asr r1
 3e4:	3d3e9391 	ldccc	3, cr9, [lr, #-580]!	; 0xfffffdbc
 3e8:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
 3ec:	01010031 	tsteq	r1, r1, lsr r0
 3f0:	0000009d 	muleq	r0, sp, r0
 3f4:	006c0002 	rsbeq	r0, ip, r2
 3f8:	01020000 	mrseq	r0, (UNDEF: 2)
 3fc:	000d0efb 	strdeq	r0, [sp], -fp
 400:	01010101 	tsteq	r1, r1, lsl #2
 404:	01000000 	mrseq	r0, (UNDEF: 0)
 408:	43010000 	movwmi	r0, #4096	; 0x1000
 40c:	6f6d2f3a 	svcvs	0x006d2f3a
 410:	2f632f70 	svccs	0x00632f70
 414:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 418:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 41c:	6f697461 	svcvs	0x00697461
 420:	2f72656e 	svccs	0x0072656e
 424:	73504944 	cmpvc	r0, #68, 18	; 0x110000
 428:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
 42c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
 430:	6c700000 	ldclvs	0, cr0, [r0], #-0
 434:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
 438:	0100632e 	tsteq	r0, lr, lsr #6
 43c:	70730000 	rsbsvc	r0, r3, r0
 440:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 444:	0100682e 	tsteq	r0, lr, lsr #16
 448:	6d690000 	stclvs	0, cr0, [r9, #-0]
 44c:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
 450:	00010068 	andeq	r0, r1, r8, rrx
 454:	6d616700 	stclvs	7, cr6, [r1, #-0]
 458:	6a626f65 	bvs	189c1f4 <startup-0x1e763e0c>
 45c:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 460:	00010068 	andeq	r0, r1, r8, rrx
 464:	05000000 	streq	r0, [r0, #-0]
 468:	0007c002 	andeq	ip, r7, r2
 46c:	594b1720 	stmdbpl	fp, {r5, r8, r9, sl, ip}^
 470:	00cf3d67 	sbceq	r3, pc, r7, ror #26
 474:	06010402 	streq	r0, [r1], -r2, lsl #8
 478:	5b59064a 	blpl	1641da8 <startup-0x1e9be258>
 47c:	01040200 	mrseq	r0, R12_usr
 480:	59064a06 	stmdbpl	r6, {r1, r2, r9, fp, lr}
 484:	684b765b 	stmdavs	fp, {r0, r1, r3, r4, r6, r9, sl, ip, sp, lr}^
 488:	68675b4b 	stmdavs	r7!, {r0, r1, r3, r6, r8, r9, fp, ip, lr}^
 48c:	01000b02 	tsteq	r0, r2, lsl #22
 490:	00034e01 	andeq	r4, r3, r1, lsl #28
 494:	7c000200 	sfmvc	f0, 4, [r0], {-0}
 498:	02000000 	andeq	r0, r0, #0
 49c:	0d0efb01 	vstreq	d15, [lr, #-4]
 4a0:	01010100 	mrseq	r0, (UNDEF: 17)
 4a4:	00000001 	andeq	r0, r0, r1
 4a8:	01000001 	tsteq	r0, r1
 4ac:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
 4b0:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
 4b4:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 4b8:	6f62616c 	svcvs	0x0062616c
 4bc:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 4c0:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 4c4:	5049442f 	subpl	r4, r9, pc, lsr #8
 4c8:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
 4cc:	2f686374 	svccs	0x00686374
 4d0:	67000043 	strvs	r0, [r0, -r3, asr #32]
 4d4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 4d8:	2e736369 	cdpcs	3, 7, cr6, cr3, cr9, {3}
 4dc:	00010063 	andeq	r0, r1, r3, rrx
 4e0:	72707300 	rsbsvc	r7, r0, #0, 6
 4e4:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
 4e8:	00010068 	andeq	r0, r1, r8, rrx
 4ec:	616d6900 	cmnvs	sp, r0, lsl #18
 4f0:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
 4f4:	00000100 	andeq	r0, r0, r0, lsl #2
 4f8:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 4fc:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 500:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
 504:	00000100 	andeq	r0, r0, r0, lsl #2
 508:	70617267 	rsbvc	r7, r1, r7, ror #4
 50c:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
 510:	0100682e 	tsteq	r0, lr, lsr #16
 514:	00000000 	andeq	r0, r0, r0
 518:	08980205 	ldmeq	r8, {r0, r2, r9}
 51c:	30152000 	andscc	r2, r5, r0
 520:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 524:	01040200 	mrseq	r0, R12_usr
 528:	67062006 	strvs	r2, [r6, -r6]
 52c:	3d30a03d 	ldccc	0, cr10, [r0, #-244]!	; 0xffffff0c
 530:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
 534:	06010402 	streq	r0, [r1], -r2, lsl #8
 538:	3d670620 	stclcc	6, cr0, [r7, #-128]!	; 0xffffff80
 53c:	2f214ba0 	svccs	0x00214ba0
 540:	5e2a2f2f 	cdppl	15, 2, cr2, cr10, cr15, {1}
 544:	57214f4c 	strpl	r4, [r1, -ip, asr #30]!
 548:	4a09035b 	bmi	2412bc <startup-0x1fdbed44>
 54c:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
 550:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 554:	00570304 	subseq	r0, r7, r4, lsl #6
 558:	06010402 	streq	r0, [r1], -r2, lsl #8
 55c:	674c063c 	smlaldxvs	r0, ip, ip, r6
 560:	2f674b2f 	svccs	0x00674b2f
 564:	a14b4b4b 	cmpge	fp, fp, asr #22
 568:	83915968 	orrshi	r5, r1, #104, 18	; 0x1a0000
 56c:	59687659 	stmdbpl	r8!, {r0, r3, r4, r6, r9, sl, ip, sp, lr}^
 570:	675983d7 	smmlsvs	r9, r7, r3, r8
 574:	74120367 	ldrvc	r0, [r2], #-871	; 0xfffffc99
 578:	03206e03 			; <UNDEFINED> instruction: 0x03206e03
 57c:	70034a12 	andvc	r4, r3, r2, lsl sl
 580:	223d3d20 	eorscs	r3, sp, #32, 26	; 0x800
 584:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 588:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
 58c:	3d3e4c22 	ldccc	12, cr4, [lr, #-136]!	; 0xffffff78
 590:	313d3d3d 	teqcc	sp, sp, lsr sp
 594:	3d752f3d 	ldclcc	15, cr2, [r5, #-244]!	; 0xffffff0c
 598:	4a790331 	bmi	1e41264 <startup-0x1e1bed9c>
 59c:	bc3d2327 	ldclt	3, cr2, [sp], #-156	; 0xffffff64
 5a0:	3d3d3d67 	ldccc	13, cr3, [sp, #-412]!	; 0xfffffe64
 5a4:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 5a8:	3e3d592f 	vaddcc.f16	s10, s26, s31	; <UNPREDICTABLE>
 5ac:	4b303d4b 	blmi	c0fae0 <startup-0x1f3f0520>
 5b0:	bc3d313d 	ldflts	f3, [sp], #-244	; 0xffffff0c
 5b4:	5a595967 	bpl	1656b58 <startup-0x1e9a94a8>
 5b8:	2f594b91 	svccs	0x00594b91
 5bc:	593e2f3d 	ldmdbpl	lr!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}
 5c0:	3d59303d 	ldclcc	0, cr3, [r9, #-244]	; 0xffffff0c
 5c4:	3d3d3d31 	ldccc	13, cr3, [sp, #-196]!	; 0xffffff3c
 5c8:	593d9167 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, ip, pc}
 5cc:	4b833d3d 	blmi	fe0cfac8 <firstTime.4076+0xde0ca7b8>
 5d0:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 5d4:	2f4c833d 	svccs	0x004c833d
 5d8:	3d3d3e3d 	ldccc	14, cr3, [sp, #-244]!	; 0xffffff0c
 5dc:	3d3d3e3d 	ldccc	14, cr3, [sp, #-244]!	; 0xffffff0c
 5e0:	4b4b4b3e 	blmi	12d32e0 <startup-0x1ed2cd20>
 5e4:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
 5e8:	4c9f4b3e 	vldmiami	pc, {d4-<overflow reg d34>}
 5ec:	03040200 	movweq	r0, #16896	; 0x4200
 5f0:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 5f4:	02004903 	andeq	r4, r0, #49152	; 0xc000
 5f8:	58060104 	stmdapl	r6, {r2, r8}
 5fc:	02040200 	andeq	r0, r4, #0, 4
 600:	02004606 	andeq	r4, r0, #6291456	; 0x600000
 604:	58060104 	stmdapl	r6, {r2, r8}
 608:	764d5206 	strbvc	r5, [sp], -r6, lsl #4
 60c:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 610:	004a0601 	subeq	r0, sl, r1, lsl #12
 614:	4a020402 	bmi	81624 <startup-0x1ff7e9dc>
 618:	03040200 	movweq	r0, #16896	; 0x4200
 61c:	084c064a 	stmdaeq	ip, {r1, r3, r6, r9, sl}^
 620:	3e3d3d13 	mrccc	13, 1, r3, cr13, cr3, {0}
 624:	76763dbc 			; <UNDEFINED> instruction: 0x76763dbc
 628:	d71fd93d 			; <UNDEFINED> instruction: 0xd71fd93d
 62c:	1fd93d23 	svcne	0x00d93d23
 630:	d93d23d7 	ldmdble	sp!, {r0, r1, r2, r4, r6, r7, r8, r9, sp}
 634:	6103d71f 	tstvs	r3, pc, lsl r7
 638:	2023032e 	eorcs	r0, r3, lr, lsr #6
 63c:	020069af 	andeq	r6, r0, #2867200	; 0x2bc000
 640:	4a060104 	bmi	180a58 <startup-0x1fe7f5a8>
 644:	02040200 	andeq	r0, r4, #0, 4
 648:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
 64c:	4b064a03 	blmi	192e60 <startup-0x1fe6d1a0>
 650:	59130875 	ldmdbpl	r3, {r0, r2, r4, r5, r6, fp}
 654:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 658:	3d5b5959 	vldrcc.16	s11, [fp, #-178]	; 0xffffff4e	; <UNPREDICTABLE>
 65c:	4c4b3d76 	mcrrmi	13, 7, r3, fp, cr6
 660:	d8c93e4b 	stmiale	r9, {r0, r1, r3, r6, r9, sl, fp, ip, sp}^
 664:	ae3dca9f 			; <UNDEFINED> instruction: 0xae3dca9f
 668:	ac5e03a0 	mrrcge	3, 10, r0, lr, cr0
 66c:	84202303 	strthi	r2, [r0], #-771	; 0xfffffcfd
 670:	00592f4c 	subseq	r2, r9, ip, asr #30
 674:	06010402 	streq	r0, [r1], -r2, lsl #8
 678:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 67c:	02002e02 	andeq	r2, r0, #2, 28
 680:	00200404 	eoreq	r0, r0, r4, lsl #8
 684:	06040402 	streq	r0, [r4], -r2, lsl #8
 688:	75d7593d 	ldrbvc	r5, [r7, #2365]	; 0x93d
 68c:	03040200 	movweq	r0, #16896	; 0x4200
 690:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
 694:	0200ab03 	andeq	sl, r0, #3072	; 0xc00
 698:	9e060104 	adflss	f0, f6, f4
 69c:	02040200 	andeq	r0, r4, #0, 4
 6a0:	02005506 	andeq	r5, r0, #25165824	; 0x1800000
 6a4:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
 6a8:	02040200 	andeq	r0, r4, #0, 4
 6ac:	02005606 	andeq	r5, r0, #6291456	; 0x600000
 6b0:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
 6b4:	580a0306 	stmdapl	sl, {r1, r2, r8, r9}
 6b8:	5a597652 	bpl	165e008 <startup-0x1e9a1ff8>
 6bc:	bb3d3d59 	bllt	f4fc28 <startup-0x1f0b03d8>
 6c0:	3de6913d 	stfccp	f1, [r6, #244]!	; 0xf4
 6c4:	02006708 	andeq	r6, r0, #8, 14	; 0x200000
 6c8:	7a030204 	bvc	c0ee0 <startup-0x1ff3f120>
 6cc:	02006608 	andeq	r6, r0, #8, 12	; 0x800000
 6d0:	3c060104 	stfccs	f0, [r6], {4}
 6d4:	02040200 	andeq	r0, r4, #0, 4
 6d8:	02003a06 	andeq	r3, r0, #24576	; 0x6000
 6dc:	3c060104 	stfccs	f0, [r6], {4}
 6e0:	02040200 	andeq	r0, r4, #0, 4
 6e4:	02004906 	andeq	r4, r0, #98304	; 0x18000
 6e8:	3c060104 	stfccs	f0, [r6], {4}
 6ec:	580e0306 	stmdapl	lr, {r1, r2, r8, r9}
 6f0:	003d774c 	eorseq	r7, sp, ip, asr #14
 6f4:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 6f8:	03040200 	movweq	r0, #16896	; 0x4200
 6fc:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
 700:	003c0601 	eorseq	r0, ip, r1, lsl #12
 704:	06020402 	streq	r0, [r2], -r2, lsl #8
 708:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
 70c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 710:	3d774c6b 	ldclcc	12, cr4, [r7, #-428]!	; 0xfffffe54
 714:	03040200 	movweq	r0, #16896	; 0x4200
 718:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 71c:	02006503 	andeq	r6, r0, #12582912	; 0xc00000
 720:	3c060104 	stfccs	f0, [r6], {4}
 724:	02040200 	andeq	r0, r4, #0, 4
 728:	02006506 	andeq	r6, r0, #25165824	; 0x1800000
 72c:	3c060104 	stfccs	f0, [r6], {4}
 730:	3d4d6b06 	vstrcc	d22, [sp, #-24]	; 0xffffffe8
 734:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
 738:	02006930 	andeq	r6, r0, #48, 18	; 0xc0000
 73c:	00300104 	eorseq	r0, r0, r4, lsl #2
 740:	2f010402 	svccs	0x00010402
 744:	01040200 	mrseq	r0, R12_usr
 748:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 74c:	0200c901 	andeq	ip, r0, #16384	; 0x4000
 750:	13080104 	movwne	r0, #33028	; 0x8104
 754:	01040200 	mrseq	r0, R12_usr
 758:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 75c:	02002f01 	andeq	r2, r0, #1, 30
 760:	00680104 	rsbeq	r0, r8, r4, lsl #2
 764:	c9010402 	stmdbgt	r1, {r1, sl}
 768:	01040200 	mrseq	r0, R12_usr
 76c:	02001308 	andeq	r1, r0, #8, 6	; 0x20000000
 770:	00920104 	addseq	r0, r2, r4, lsl #2
 774:	4b010402 	blmi	41784 <startup-0x1ffbe87c>
 778:	01040200 	mrseq	r0, R12_usr
 77c:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 780:	02002f01 	andeq	r2, r0, #1, 30
 784:	00670104 	rsbeq	r0, r7, r4, lsl #2
 788:	08010402 	stmdaeq	r1, {r1, sl}
 78c:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 790:	02004c01 	andeq	r4, r0, #256	; 0x100
 794:	6c030104 	stfvss	f0, [r3], {4}
 798:	3c19033c 	ldccc	3, cr0, [r9], {60}	; 0x3c
 79c:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 7a0:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 7a4:	91080304 	tstls	r8, r4, lsl #6
 7a8:	03040200 	movweq	r0, #16896	; 0x4200
 7ac:	02009108 	andeq	r9, r0, #8, 2
 7b0:	91080304 	tstls	r8, r4, lsl #6
 7b4:	03040200 	movweq	r0, #16896	; 0x4200
 7b8:	02004608 	andeq	r4, r0, #8, 12	; 0x800000
 7bc:	3c060104 	stfccs	f0, [r6], {4}
 7c0:	3e085006 	cdpcc	0, 0, cr5, cr8, cr6, {0}
 7c4:	21083d4b 	tstcs	r8, fp, asr #26
 7c8:	21082108 	tstcs	r8, r8, lsl #2
 7cc:	21304b4d 	teqcs	r0, sp, asr #22
 7d0:	3e4b3e4b 	cdpcc	14, 4, cr3, cr11, cr11, {2}
 7d4:	034b3e4b 	movteq	r3, #48715	; 0xbe4b
 7d8:	0e033c75 	mcreq	12, 0, r3, cr3, cr5, {3}
 7dc:	0b023058 	bleq	8c944 <startup-0x1ff736bc>
 7e0:	72010100 	andvc	r0, r1, #0, 2
 7e4:	02000000 	andeq	r0, r0, #0
 7e8:	00005b00 	andeq	r5, r0, r0, lsl #22
 7ec:	fb010200 	blx	40ff6 <startup-0x1ffbf00a>
 7f0:	01000d0e 	tsteq	r0, lr, lsl #26
 7f4:	00010101 	andeq	r0, r1, r1, lsl #2
 7f8:	00010000 	andeq	r0, r1, r0
 7fc:	3a430100 	bcc	10c0c04 <startup-0x1ef3f3fc>
 800:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 804:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 750 <startup-0x1ffff8b0>
 808:	616c706f 	cmnvs	ip, pc, rrx
 80c:	61726f62 	cmnvs	r2, r2, ror #30
 810:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 814:	442f7265 	strtmi	r7, [pc], #-613	; 81c <startup-0x1ffff7e4>
 818:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
 81c:	63746957 	cmnvs	r4, #1425408	; 0x15c000
 820:	00432f68 	subeq	r2, r3, r8, ror #30
 824:	616d6900 	cmnvs	sp, r0, lsl #18
 828:	632e6567 			; <UNDEFINED> instruction: 0x632e6567
 82c:	00000100 	andeq	r0, r0, r0, lsl #2
 830:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 834:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
 838:	00000100 	andeq	r0, r0, r0, lsl #2
 83c:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
 840:	00682e65 	rsbeq	r2, r8, r5, ror #28
 844:	00000001 	andeq	r0, r0, r1
 848:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
 84c:	14200016 	strtne	r0, [r0], #-22	; 0xffffffea
 850:	3d3d3d75 	ldccc	13, cr3, [sp, #-468]!	; 0xfffffe2c
 854:	01000402 	tsteq	r0, r2, lsl #8
 858:	00006801 	andeq	r6, r0, r1, lsl #16
 85c:	51000200 	mrspl	r0, R8_usr
 860:	02000000 	andeq	r0, r0, #0
 864:	0d0efb01 	vstreq	d15, [lr, #-4]
 868:	01010100 	mrseq	r0, (UNDEF: 17)
 86c:	00000001 	andeq	r0, r0, r1
 870:	01000001 	tsteq	r0, r1
 874:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
 878:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
 87c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 880:	6f62616c 	svcvs	0x0062616c
 884:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 888:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 88c:	5049442f 	subpl	r4, r9, pc, lsr #8
 890:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
 894:	2f686374 	svccs	0x00686374
 898:	73000043 	movwvc	r0, #67	; 0x43
 89c:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 8a0:	00632e65 	rsbeq	r2, r3, r5, ror #28
 8a4:	73000001 	movwvc	r0, #1
 8a8:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 8ac:	00682e65 	rsbeq	r2, r8, r5, ror #28
 8b0:	00000001 	andeq	r0, r0, r1
 8b4:	04020500 	streq	r0, [r2], #-1280	; 0xfffffb00
 8b8:	15200017 	strne	r0, [r0, #-23]!	; 0xffffffe9
 8bc:	3d3d3d75 	ldccc	13, cr3, [sp, #-468]!	; 0xfffffe2c
 8c0:	01000402 	tsteq	r0, r2, lsl #8
 8c4:	00006b01 	andeq	r6, r0, r1, lsl #22
 8c8:	4d000200 	sfmmi	f0, 4, [r0, #-0]
 8cc:	02000000 	andeq	r0, r0, #0
 8d0:	0d0efb01 	vstreq	d15, [lr, #-4]
 8d4:	01010100 	mrseq	r0, (UNDEF: 17)
 8d8:	00000001 	andeq	r0, r0, r1
 8dc:	01000001 	tsteq	r0, r1
 8e0:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
 8e4:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
 8e8:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 8ec:	6f62616c 	svcvs	0x0062616c
 8f0:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 8f4:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 8f8:	5049442f 	subpl	r4, r9, pc, lsr #8
 8fc:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
 900:	2f686374 	svccs	0x00686374
 904:	67000043 	strvs	r0, [r0, -r3, asr #32]
 908:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 90c:	00010063 	andeq	r0, r1, r3, rrx
 910:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 914:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 918:	00000001 	andeq	r0, r0, r1
 91c:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
 920:	15200017 	strne	r0, [r0, #-23]!	; 0xffffffe9
 924:	2f763d2f 	svccs	0x00763d2f
 928:	674b5b3d 	smlaldxvs	r5, fp, sp, fp
 92c:	02223091 	eoreq	r3, r2, #145	; 0x91
 930:	01010004 	tsteq	r1, r4
 934:	0000015a 	andeq	r0, r0, sl, asr r1
 938:	00810002 	addeq	r0, r1, r2
 93c:	01020000 	mrseq	r0, (UNDEF: 2)
 940:	000d0efb 	strdeq	r0, [sp], -fp
 944:	01010101 	tsteq	r1, r1, lsl #2
 948:	01000000 	mrseq	r0, (UNDEF: 0)
 94c:	43010000 	movwmi	r0, #4096	; 0x1000
 950:	6f6d2f3a 	svcvs	0x006d2f3a
 954:	2f632f70 	svccs	0x00632f70
 958:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 95c:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 960:	6f697461 	svcvs	0x00697461
 964:	2f72656e 	svccs	0x0072656e
 968:	73504944 	cmpvc	r0, #68, 18	; 0x110000
 96c:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
 970:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
 974:	73610000 	cmnvc	r1, #0
 978:	5f696963 	svcpl	0x00696963
 97c:	70736964 	rsbsvc	r6, r3, r4, ror #18
 980:	2e79616c 	rpwcsez	f6, f1, #4.0
 984:	00010063 	andeq	r0, r1, r3, rrx
 988:	72707300 	rsbsvc	r7, r0, #0, 6
 98c:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
 990:	00010068 	andeq	r0, r1, r8, rrx
 994:	616d6900 	cmnvs	sp, r0, lsl #18
 998:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
 99c:	00000100 	andeq	r0, r0, r0, lsl #2
 9a0:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 9a4:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 9a8:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
 9ac:	00000100 	andeq	r0, r0, r0, lsl #2
 9b0:	70617267 	rsbvc	r7, r1, r7, ror #4
 9b4:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
 9b8:	0100682e 	tsteq	r0, lr, lsr #16
 9bc:	00000000 	andeq	r0, r0, r0
 9c0:	178c0205 	strne	r0, [ip, r5, lsl #4]
 9c4:	2e032000 	cdpcs	0, 0, cr2, cr3, cr0, {0}
 9c8:	bb596901 	bllt	165add4 <startup-0x1e9a522c>
 9cc:	59696859 	stmdbpl	r9!, {r0, r3, r4, r6, fp, sp, lr}^
 9d0:	76591308 	ldrbvc	r1, [r9], -r8, lsl #6
 9d4:	593d3d67 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}
 9d8:	3d3d674c 	ldccc	7, cr6, [sp, #-304]!	; 0xfffffed0
 9dc:	673e4c59 			; <UNDEFINED> instruction: 0x673e4c59
 9e0:	675a3d3d 	smmlarvs	sl, sp, sp, r3
 9e4:	3e842f67 	cdpcc	15, 8, cr2, cr4, cr7, {3}
 9e8:	5a3d3d67 	bpl	f4ff8c <startup-0x1f0b0074>
 9ec:	842f6767 	strthi	r6, [pc], #-1895	; 9f4 <startup-0x1ffff60c>
 9f0:	2f4b3d67 	svccs	0x004b3d67
 9f4:	3d3e683d 	ldccc	8, cr6, [lr, #-244]!	; 0xffffff0c
 9f8:	3d4b2f2f 	stclcc	15, cr2, [fp, #-188]	; 0xffffff44
 9fc:	0067762f 	rsbeq	r7, r7, pc, lsr #12
 a00:	06010402 	streq	r0, [r1], -r2, lsl #8
 a04:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
 a08:	914c3d59 	cmpls	ip, r9, asr sp
 a0c:	9f764b67 	svcls	0x00764b67
 a10:	0200304c 	andeq	r3, r0, #76	; 0x4c
 a14:	20060104 	andcs	r0, r6, r4, lsl #2
 a18:	3d3d8306 	ldccc	3, cr8, [sp, #-24]!	; 0xffffffe8
 a1c:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
 a20:	06200601 	strteq	r0, [r0], -r1, lsl #12
 a24:	3f3d3d83 	svccc	0x003d3d83
 a28:	01040200 	mrseq	r0, R12_usr
 a2c:	83062006 	movwhi	r2, #24582	; 0x6006
 a30:	003f3d3d 	eorseq	r3, pc, sp, lsr sp	; <UNPREDICTABLE>
 a34:	06010402 	streq	r0, [r1], -r2, lsl #8
 a38:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
 a3c:	343e3f3d 	ldrtcc	r3, [lr], #-3901	; 0xfffff0c3
 a40:	2f2f843d 	svccs	0x002f843d
 a44:	843e3e2f 	ldrthi	r3, [lr], #-3631	; 0xfffff1d1
 a48:	73214b2f 			; <UNDEFINED> instruction: 0x73214b2f
 a4c:	214b2f4d 	cmpcs	fp, sp, asr #30
 a50:	59684d73 	stmdbpl	r8!, {r0, r1, r4, r5, r6, r8, sl, fp, lr}^
 a54:	73214b30 			; <UNDEFINED> instruction: 0x73214b30
 a58:	73214b4d 			; <UNDEFINED> instruction: 0x73214b4d
 a5c:	754c4b4e 	strbvc	r4, [ip, #-2894]	; 0xfffff4b2
 a60:	3d2f4b30 	vstmdbcc	pc!, {d4-d27}
 a64:	02007321 	andeq	r7, r0, #-2080374784	; 0x84000000
 a68:	4a060104 	bmi	180e80 <startup-0x1fe7f180>
 a6c:	2f4b6b06 	svccs	0x004b6b06
 a70:	0073213d 	rsbseq	r2, r3, sp, lsr r1
 a74:	06010402 	streq	r0, [r1], -r2, lsl #8
 a78:	4b6b064a 	blmi	1ac23a8 <startup-0x1e53dc58>
 a7c:	68753e4e 	ldmdavs	r5!, {r1, r2, r3, r6, r9, sl, fp, ip, sp}^
 a80:	3d4b2f2f 	stclcc	15, cr2, [fp, #-188]	; 0xffffff44
 a84:	4b4d7321 	blmi	135d710 <startup-0x1eca28f0>
 a88:	4d73212f 	ldfmie	f2, [r3, #-188]!	; 0xffffff44
 a8c:	00080221 	andeq	r0, r8, r1, lsr #4
 a90:	00760101 	rsbseq	r0, r6, r1, lsl #2
 a94:	00020000 	andeq	r0, r2, r0
 a98:	00000057 	andeq	r0, r0, r7, asr r0
 a9c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 aa0:	0101000d 	tsteq	r1, sp
 aa4:	00000101 	andeq	r0, r0, r1, lsl #2
 aa8:	00000100 	andeq	r0, r0, r0, lsl #2
 aac:	2f3a4301 	svccs	0x003a4301
 ab0:	2f706f6d 	svccs	0x00706f6d
 ab4:	6f4d2f63 	svcvs	0x004d2f63
 ab8:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
 abc:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
 ac0:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
 ac4:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 ac8:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
 acc:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
 ad0:	0000432f 	andeq	r4, r0, pc, lsr #6
 ad4:	776f6c73 			; <UNDEFINED> instruction: 0x776f6c73
 ad8:	7865745f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
 adc:	00632e74 	rsbeq	r2, r3, r4, ror lr
 ae0:	73000001 	movwvc	r0, #1
 ae4:	5f776f6c 	svcpl	0x00776f6c
 ae8:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 aec:	0100682e 	tsteq	r0, lr, lsr #16
 af0:	00000000 	andeq	r0, r0, r0
 af4:	1cac0205 	sfmne	f0, 4, [ip], #20
 af8:	59152000 	ldmdbpl	r5, {sp}
 afc:	5984c99f 	stmibpl	r4, {r0, r1, r2, r3, r4, r7, r8, fp, lr, pc}
 b00:	3d3d754c 	cfldr32cc	mvfx7, [sp, #-304]!	; 0xfffffed0
 b04:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
 b08:	01010007 	tsteq	r1, r7

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
   4:	61724765 	cmnvs	r2, r5, ror #14
   8:	6f700079 	svcvs	0x00700079
   c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
  10:	74003572 	strvc	r3, [r0], #-1394	; 0xfffffa8e
  14:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
  18:	616c625f 	cmnvs	ip, pc, asr r2
  1c:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
  20:	00737469 	rsbseq	r7, r3, r9, ror #8
  24:	6d696e61 	stclvs	14, cr6, [r9, #-388]!	; 0xfffffe7c
  28:	6f697461 	svcvs	0x00697461
  2c:	6f635f6e 	svcvs	0x00635f6e
  30:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xfffff18b
  34:	6f700072 	svcvs	0x00700072
  38:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
  3c:	70003772 	andvc	r3, r0, r2, ror r7
  40:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
  44:	00387265 	eorseq	r7, r8, r5, ror #4
  48:	20554e47 	subscs	r4, r5, r7, asr #28
  4c:	20393943 	eorscs	r3, r9, r3, asr #18
  50:	2e332e36 	mrccs	14, 1, r2, cr3, cr6, {1}
  54:	30322031 	eorscc	r2, r2, r1, lsr r0
  58:	32303731 	eorscc	r3, r0, #12845056	; 0xc40000
  5c:	28203531 	stmdacs	r0!, {r0, r4, r5, r8, sl, ip, sp}
  60:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  64:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  68:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  6c:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
  70:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  74:	362d6465 	strtcc	r6, [sp], -r5, ror #8
  78:	6172622d 	cmnvs	r2, sp, lsr #4
  7c:	2068636e 	rsbcs	r6, r8, lr, ror #6
  80:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  84:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  88:	35343220 	ldrcc	r3, [r4, #-544]!	; 0xfffffde0
  8c:	5d323135 	ldfpls	f3, [r2, #-212]!	; 0xffffff2c
  90:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  94:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  98:	616d2d20 	cmnvs	sp, r0, lsr #26
  9c:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  a0:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  a4:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  a8:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  ac:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  b0:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  b4:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  b8:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  bc:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  c0:	616d2d20 	cmnvs	sp, r0, lsr #26
  c4:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  c8:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  cc:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  d0:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  d4:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  d8:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  dc:	00393963 	eorseq	r3, r9, r3, ror #18
  e0:	736f5078 	cmnvc	pc, #120	; 0x78
  e4:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
  e8:	74695470 	strbtvc	r5, [r9], #-1136	; 0xfffffb90
  ec:	6c42656c 	cfstr64vs	mvdx6, [r2], {108}	; 0x6c
  f0:	006b6361 	rsbeq	r6, fp, r1, ror #6
  f4:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
  f8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
  fc:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
 100:	6c42656c 	cfstr64vs	mvdx6, [r2], {108}	; 0x6c
 104:	006b6361 	rsbeq	r6, fp, r1, ror #6
 108:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
 10c:	5f746e65 	svcpl	0x00746e65
 110:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
 114:	72640065 	rsbvc	r0, r4, #101	; 0x65
 118:	625f7761 	subsvs	r7, pc, #25427968	; 0x1840000
 11c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 120:	6c625f72 	stclvs	15, cr5, [r2], #-456	; 0xfffffe38
 124:	006b6361 	rsbeq	r6, fp, r1, ror #6
 128:	706d6574 	rsbvc	r6, sp, r4, ror r5
 12c:	736e6f4d 	cmnvc	lr, #308	; 0x134
 130:	4c726574 	cfldr64mi	mvdx6, [r2], #-464	; 0xfffffe30
 134:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 138:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 13c:	6574006e 	ldrbvs	r0, [r4, #-110]!	; 0xffffff92
 140:	00337478 	eorseq	r7, r3, r8, ror r4
 144:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 148:	6a624f65 	bvs	1893ee4 <startup-0x1e76c11c>
 14c:	61477400 	cmpvs	r7, r0, lsl #8
 150:	624f656d 	subvs	r6, pc, #457179136	; 0x1b400000
 154:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 158:	73616300 	cmnvc	r1, #0, 6
 15c:	42656c74 	rsbmi	r6, r5, #116, 24	; 0x7400
 160:	6b63616c 	blvs	18d8718 <startup-0x1e7278e8>
 164:	73616300 	cmnvc	r1, #0, 6
 168:	47656c74 			; <UNDEFINED> instruction: 0x47656c74
 16c:	00796172 	rsbseq	r6, r9, r2, ror r1
 170:	6b636162 	blvs	18d8700 <startup-0x1e727900>
 174:	66667542 	strbtvs	r7, [r6], -r2, asr #10
 178:	694c7265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp, lr}^
 17c:	00746867 	rsbseq	r6, r4, r7, ror #16
 180:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 184:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 188:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 18c:	6f700039 	svcvs	0x00700039
 190:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 194:	6d003472 	cfstrsvs	mvf3, [r0, #-456]	; 0xfffffe38
 198:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
 19c:	70007265 	andvc	r7, r0, r5, ror #4
 1a0:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 1a4:	00367265 	eorseq	r7, r6, r5, ror #4
 1a8:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
 1ac:	5f726574 	svcpl	0x00726574
 1b0:	63616c62 	cmnvs	r1, #25088	; 0x6200
 1b4:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 1b8:	6e007374 	mcrvs	3, 0, r7, cr0, cr4, {3}
 1bc:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
 1c0:	656a624f 	strbvs	r6, [sl, #-591]!	; 0xfffffdb1
 1c4:	00737463 	rsbseq	r7, r3, r3, ror #8
 1c8:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 1cc:	39726574 	ldmdbcc	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
 1d0:	64697700 	strbtvs	r7, [r9], #-1792	; 0xfffff900
 1d4:	74006874 	strvc	r6, [r0], #-2164	; 0xfffff78c
 1d8:	31747865 	cmncc	r4, r5, ror #16
 1dc:	72640031 	rsbvc	r0, r4, #49	; 0x31
 1e0:	625f7761 	subsvs	r7, pc, #25427968	; 0x1840000
 1e4:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 1e8:	6c625f72 	stclvs	15, cr5, [r2], #-456	; 0xfffffe38
 1ec:	5f6b6361 	svcpl	0x006b6361
 1f0:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 1f4:	70750074 	rsbsvc	r0, r5, r4, ror r0
 1f8:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
 1fc:	6f507900 	svcvs	0x00507900
 200:	61630073 	smcvs	12291	; 0x3003
 204:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
 208:	006a624f 	rsbeq	r6, sl, pc, asr #4
 20c:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
 210:	50726574 	rsbspl	r6, r2, r4, ror r5
 214:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 218:	00327265 	eorseq	r7, r2, r5, ror #4
 21c:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 220:	72003031 	andvc	r3, r0, #49	; 0x31
 224:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 228:	61630072 	smcvs	12290	; 0x3002
 22c:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
 230:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
 234:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
 238:	00737469 	rsbseq	r7, r3, r9, ror #8
 23c:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
 240:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
 244:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 248:	6f62616c 	svcvs	0x0062616c
 24c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 250:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 254:	5049442f 	subpl	r4, r9, pc, lsr #8
 258:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
 25c:	2f686374 	svccs	0x00686374
 260:	74732f43 	ldrbtvc	r2, [r3], #-3907	; 0xfffff0bd
 264:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 268:	00632e70 	rsbeq	r2, r3, r0, ror lr
 26c:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 270:	616d4974 	smcvs	54420	; 0xd494
 274:	74006567 	strvc	r6, [r0], #-1383	; 0xfffffa99
 278:	34747865 	ldrbtcc	r7, [r4], #-2149	; 0xfffff79b
 27c:	6c537400 	cfldrdvs	mvd7, [r3], {-0}
 280:	6554776f 	ldrbvs	r7, [r4, #-1903]	; 0xfffff891
 284:	74007478 	strvc	r7, [r0], #-1144	; 0xfffffb88
 288:	37747865 	ldrbcc	r7, [r4, -r5, ror #16]!
 28c:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
 290:	64003874 	strvs	r3, [r0], #-2164	; 0xfffff78c
 294:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 298:	75007961 	strvc	r7, [r0, #-2401]	; 0xfffff69f
 29c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 2a0:	2064656e 	rsbcs	r6, r4, lr, ror #10
 2a4:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 2a8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 2ac:	6e6f4d70 	mcrvs	13, 3, r4, cr15, cr0, {3}
 2b0:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 2b4:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
 2b8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 2bc:	74695470 	strbtvc	r5, [r9], #-1136	; 0xfffffb90
 2c0:	694c656c 	stmdbvs	ip, {r2, r3, r5, r6, r8, sl, sp, lr}^
 2c4:	00746867 	rsbseq	r6, r4, r7, ror #16
 2c8:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 2cc:	67694c65 	strbvs	r4, [r9, -r5, ror #24]!
 2d0:	68007468 	stmdavs	r0, {r3, r5, r6, sl, ip, sp, lr}
 2d4:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
 2d8:	69740074 	ldmdbvs	r4!, {r2, r4, r5, r6}^
 2dc:	49656c74 	stmdbmi	r5!, {r2, r4, r5, r6, sl, fp, sp, lr}^
 2e0:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
 2e4:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
 2e8:	5f656c74 	svcpl	0x00656c74
 2ec:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
 2f0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 2f4:	68730073 	ldmdavs	r3!, {r0, r1, r4, r5, r6}^
 2f8:	2074726f 	rsbscs	r7, r4, pc, ror #4
 2fc:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 300:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 304:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 308:	73616300 	cmnvc	r1, #0, 6
 30c:	4c656c74 	stclmi	12, cr6, [r5], #-464	; 0xfffffe30
 310:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 314:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 318:	70615f74 	rsbvc	r5, r1, r4, ror pc
 31c:	6f6d0070 	svcvs	0x006d0070
 320:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
 324:	67694c72 			; <UNDEFINED> instruction: 0x67694c72
 328:	6d007468 	cfstrsvs	mvf7, [r0, #-416]	; 0xfffffe60
 32c:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
 330:	6d497265 	sfmvs	f7, 2, [r9, #-404]	; 0xfffffe6c
 334:	73656761 	cmnvc	r5, #25427968	; 0x1840000
 338:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
 33c:	74003174 	strvc	r3, [r0], #-372	; 0xfffffe8c
 340:	32747865 	rsbscc	r7, r4, #6619136	; 0x650000
 344:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 348:	73614370 	cmnvc	r1, #112, 6	; 0xc0000001
 34c:	47656c74 			; <UNDEFINED> instruction: 0x47656c74
 350:	00796172 	rsbseq	r6, r9, r2, ror r1
 354:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 358:	696c5f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 35c:	5f746867 	svcpl	0x00746867
 360:	73746962 	cmnvc	r4, #1605632	; 0x188000
 364:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
 368:	74003574 	strvc	r3, [r0], #-1396	; 0xfffffa8c
 36c:	36747865 	ldrbtcc	r7, [r4], -r5, ror #16
 370:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 374:	73614370 	cmnvc	r1, #112, 6	; 0xc0000001
 378:	42656c74 	rsbmi	r6, r5, #116, 24	; 0x7400
 37c:	6b63616c 	blvs	18d8934 <startup-0x1e7276cc>
 380:	73616300 	cmnvc	r1, #0, 6
 384:	5f656c74 	svcpl	0x00656c74
 388:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
 38c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 390:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
 394:	6143706d 	cmpvs	r3, sp, rrx
 398:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
 39c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
 3a0:	61620074 	smcvs	8196	; 0x2004
 3a4:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
 3a8:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 3ac:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
 3b0:	665f6e00 	ldrbvs	r6, [pc], -r0, lsl #28
 3b4:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
 3b8:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
 3bc:	6742706d 	strbvs	r7, [r2, -sp, rrx]
 3c0:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 3c4:	74695470 	strbtvc	r5, [r9], #-1136	; 0xfffffb90
 3c8:	7247656c 	subvc	r6, r7, #108, 10	; 0x1b000000
 3cc:	69007961 	stmdbvs	r0, {r0, r5, r6, r8, fp, ip, sp, lr}
 3d0:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
 3d4:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 3d8:	67007365 	strvs	r7, [r0, -r5, ror #6]
 3dc:	4f656d61 	svcmi	0x00656d61
 3e0:	63656a62 	cmnvs	r5, #401408	; 0x62000
 3e4:	6d007374 	stcvs	3, cr7, [r0, #-464]	; 0xfffffe30
 3e8:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
 3ec:	624f7265 	subvs	r7, pc, #1342177286	; 0x50000006
 3f0:	6574006a 	ldrbvs	r0, [r4, #-106]!	; 0xffffff96
 3f4:	6f4d706d 	svcvs	0x004d706d
 3f8:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
 3fc:	6c620072 	stclvs	0, cr0, [r2], #-456	; 0xfffffe38
 400:	496b6361 	stmdbmi	fp!, {r0, r5, r6, r8, r9, sp, lr}^
 404:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
 408:	61726700 	cmnvs	r2, r0, lsl #14
 40c:	616d4979 	smcvs	54425	; 0xd499
 410:	72006567 	andvc	r6, r0, #432013312	; 0x19c00000
 414:	0032776f 	eorseq	r7, r2, pc, ror #14
 418:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
 41c:	50726574 	rsbspl	r6, r2, r4, ror r5
 420:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 424:	6d007265 	sfmvs	f7, 4, [r0, #-404]	; 0xfffffe6c
 428:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
 42c:	6d497265 	sfmvs	f7, 2, [r9, #-404]	; 0xfffffe6c
 430:	00656761 	rsbeq	r6, r5, r1, ror #14
 434:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 438:	616d4965 	cmnvs	sp, r5, ror #18
 43c:	64006567 	strvs	r6, [r0], #-1383	; 0xfffffa99
 440:	5f776172 	svcpl	0x00776172
 444:	66667562 	strbtvs	r7, [r6], -r2, ror #10
 448:	625f7265 	subsvs	r7, pc, #1342177286	; 0x50000006
 44c:	6b63616c 	blvs	18d8a04 <startup-0x1e7275fc>
 450:	6172675f 	cmnvs	r2, pc, asr r7
 454:	696c5f79 	stmdbvs	ip!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 458:	00746867 	rsbseq	r6, r4, r7, ror #16
 45c:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
 460:	5f726574 	svcpl	0x00726574
 464:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 468:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 46c:	64007374 	strvs	r7, [r0], #-884	; 0xfffffc8c
 470:	5f776172 	svcpl	0x00776172
 474:	66667562 	strbtvs	r7, [r6], -r2, ror #10
 478:	625f7265 	subsvs	r7, pc, #1342177286	; 0x50000006
 47c:	6b63616c 	blvs	18d8a34 <startup-0x1e7275cc>
 480:	6172675f 	cmnvs	r2, pc, asr r7
 484:	6f6d0079 	svcvs	0x006d0079
 488:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
 48c:	696f5072 	stmdbvs	pc!, {r1, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
 490:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 494:	74730033 	ldrbtvc	r0, [r3], #-51	; 0xffffffcd
 498:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 49c:	6e610070 	mcrvs	0, 3, r0, cr1, cr0, {3}
 4a0:	74616d69 	strbtvc	r6, [r1], #-3433	; 0xfffff297
 4a4:	5f6e6f69 	svcpl	0x006e6f69
 4a8:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 4ac:	61630064 	cmnvs	r3, r4, rrx
 4b0:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
 4b4:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
 4b8:	6d007365 	stcvs	3, cr7, [r0, #-404]	; 0xfffffe6c
 4bc:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
 4c0:	675f7265 	ldrbvs	r7, [pc, -r5, ror #4]
 4c4:	5f796172 	svcpl	0x00796172
 4c8:	73746962 	cmnvc	r4, #1605632	; 0x188000
 4cc:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
 4d0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 4d4:	66003031 			; <UNDEFINED> instruction: 0x66003031
 4d8:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
 4dc:	5f676200 	svcpl	0x00676200
 4e0:	73746962 	cmnvc	r4, #1605632	; 0x188000
 4e4:	616d6900 	cmnvs	sp, r0, lsl #18
 4e8:	00736567 	rsbseq	r6, r3, r7, ror #10
 4ec:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
 4f0:	6d49656c 	cfstr64vs	mvdx6, [r9, #-432]	; 0xfffffe50
 4f4:	00656761 	rsbeq	r6, r5, r1, ror #14
 4f8:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
 4fc:	47726574 			; <UNDEFINED> instruction: 0x47726574
 500:	00796172 	rsbseq	r6, r9, r2, ror r1
 504:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
 508:	625f656c 	subsvs	r6, pc, #108, 10	; 0x1b000000
 50c:	6b63616c 	blvs	18d8ac4 <startup-0x1e72753c>
 510:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 514:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
 518:	00336572 	eorseq	r6, r3, r2, ror r5
 51c:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 520:	656a624f 	strbvs	r6, [sl, #-591]!	; 0xfffffdb1
 524:	70557463 	subsvc	r7, r5, r3, ror #8
 528:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
 52c:	2f3a4300 	svccs	0x003a4300
 530:	2f706f6d 	svccs	0x00706f6d
 534:	6f4d2f63 	svcvs	0x004d2f63
 538:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
 53c:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
 540:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
 544:	72672f72 	rsbvc	r2, r7, #456	; 0x1c8
 548:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 54c:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 550:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 554:	6d61672f 	stclvs	7, cr6, [r1, #-188]!	; 0xffffff44
 558:	6a626f65 	bvs	189c2f4 <startup-0x1e763d0c>
 55c:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 560:	68740063 	ldmdavs	r4!, {r0, r1, r5, r6}^
 564:	66007369 	strvs	r7, [r0], -r9, ror #6
 568:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
 56c:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
 570:	72696600 	rsbvc	r6, r9, #0, 12
 574:	72473165 	subvc	r3, r7, #1073741849	; 0x40000019
 578:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
 57c:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
 580:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
 584:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
 588:	72696600 	rsbvc	r6, r9, #0, 12
 58c:	72473365 	subvc	r3, r7, #-1811939327	; 0x94000001
 590:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
 594:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
 598:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
 59c:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
 5a0:	72696600 	rsbvc	r6, r9, #0, 12
 5a4:	616c4265 	cmnvs	ip, r5, ror #4
 5a8:	74006b63 	strvc	r6, [r0], #-2915	; 0xfffff49d
 5ac:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
 5b0:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
 5b4:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
 5b8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 5bc:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
 5c0:	616c4265 	cmnvs	ip, r5, ror #4
 5c4:	66006b63 	strvs	r6, [r0], -r3, ror #22
 5c8:	31657269 	cmncc	r5, r9, ror #4
 5cc:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
 5d0:	69660074 	stmdbvs	r6!, {r2, r4, r5, r6}^
 5d4:	4c346572 	cfldr32mi	mvfx6, [r4], #-456	; 0xfffffe38
 5d8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 5dc:	72696600 	rsbvc	r6, r9, #0, 12
 5e0:	675f3265 	ldrbvs	r3, [pc, -r5, ror #4]
 5e4:	5f796172 	svcpl	0x00796172
 5e8:	73746962 	cmnvc	r4, #1605632	; 0x188000
 5ec:	72696600 	rsbvc	r6, r9, #0, 12
 5f0:	6c5f3465 	cfldrdvs	mvd3, [pc], {101}	; 0x65
 5f4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 5f8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 5fc:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
 600:	4c336572 	cfldr32mi	mvfx6, [r3], #-456	; 0xfffffe38
 604:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 608:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
 60c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 610:	6f700031 	svcvs	0x00700031
 614:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 618:	66003372 			; <UNDEFINED> instruction: 0x66003372
 61c:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
 620:	6172675f 	cmnvs	r2, pc, asr r7
 624:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 628:	66007374 			; <UNDEFINED> instruction: 0x66007374
 62c:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
 630:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
 634:	6f700065 	svcvs	0x00700065
 638:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 63c:	66003072 			; <UNDEFINED> instruction: 0x66003072
 640:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
 644:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
 648:	6f700074 	svcvs	0x00700074
 64c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 650:	74003272 	strvc	r3, [r0], #-626	; 0xfffffd8e
 654:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
 658:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
 65c:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
 660:	72696600 	rsbvc	r6, r9, #0, 12
 664:	675f3165 	ldrbvs	r3, [pc, -r5, ror #2]
 668:	5f796172 	svcpl	0x00796172
 66c:	73746962 	cmnvc	r4, #1605632	; 0x188000
 670:	72696600 	rsbvc	r6, r9, #0, 12
 674:	694c3265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp}^
 678:	00746867 	rsbseq	r6, r4, r7, ror #16
 67c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 680:	696c5f31 	stmdbvs	ip!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
 684:	5f746867 	svcpl	0x00746867
 688:	73746962 	cmnvc	r4, #1605632	; 0x188000
 68c:	72696600 	rsbvc	r6, r9, #0, 12
 690:	6c5f3265 	lfmvs	f3, 2, [pc], {101}	; 0x65
 694:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 698:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 69c:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
 6a0:	624f6572 	subvs	r6, pc, #478150656	; 0x1c800000
 6a4:	6966006a 	stmdbvs	r6!, {r1, r3, r5, r6}^
 6a8:	47326572 			; <UNDEFINED> instruction: 0x47326572
 6ac:	00796172 	rsbseq	r6, r9, r2, ror r1
 6b0:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 6b4:	72675f34 	rsbvc	r5, r7, #52, 30	; 0xd0
 6b8:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
 6bc:	00737469 	rsbseq	r7, r3, r9, ror #8
 6c0:	706d6574 	rsbvc	r6, sp, r4, ror r5
 6c4:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
 6c8:	67694c33 			; <UNDEFINED> instruction: 0x67694c33
 6cc:	66007468 	strvs	r7, [r0], -r8, ror #8
 6d0:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
 6d4:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
 6d8:	65740065 	ldrbvs	r0, [r4, #-101]!	; 0xffffff9b
 6dc:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
 6e0:	4c316572 	cfldr32mi	mvfx6, [r1], #-456	; 0xfffffe38
 6e4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 6e8:	72696600 	rsbvc	r6, r9, #0, 12
 6ec:	69547473 	ldmdbvs	r4, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 6f0:	6900656d 	stmdbvs	r0, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
 6f4:	5f74696e 	svcpl	0x0074696e
 6f8:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 6fc:	72696600 	rsbvc	r6, r9, #0, 12
 700:	6c5f3565 	cfldr64vs	mvdx3, [pc], {101}	; 0x65
 704:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 708:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 70c:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
 710:	6d496572 	cfstr64vs	mvdx6, [r9, #-456]	; 0xfffffe38
 714:	73656761 	cmnvc	r5, #25427968	; 0x1840000
 718:	72696600 	rsbvc	r6, r9, #0, 12
 71c:	6d493165 	stfvse	f3, [r9, #-404]	; 0xfffffe6c
 720:	00656761 	rsbeq	r6, r5, r1, ror #14
 724:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 728:	61724734 	cmnvs	r2, r4, lsr r7
 72c:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
 730:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
 734:	47316572 			; <UNDEFINED> instruction: 0x47316572
 738:	00796172 	rsbseq	r6, r9, r2, ror r1
 73c:	706d6574 	rsbvc	r6, sp, r4, ror r5
 740:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
 744:	67694c34 			; <UNDEFINED> instruction: 0x67694c34
 748:	66007468 	strvs	r7, [r0], -r8, ror #8
 74c:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
 750:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
 754:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
 758:	00737469 	rsbseq	r7, r3, r9, ror #8
 75c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 760:	616d4935 	cmnvs	sp, r5, lsr r9
 764:	66006567 	strvs	r6, [r0], -r7, ror #10
 768:	5f657269 	svcpl	0x00657269
 76c:	63616c62 	cmnvs	r1, #25088	; 0x6200
 770:	5f325f6b 	svcpl	0x00325f6b
 774:	73746962 	cmnvc	r4, #1605632	; 0x188000
 778:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 77c:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
 780:	694c3265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp}^
 784:	00746867 	rsbseq	r6, r4, r7, ror #16
 788:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 78c:	616d4932 	cmnvs	sp, r2, lsr r9
 790:	74006567 	strvc	r6, [r0], #-1383	; 0xfffffa99
 794:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
 798:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
 79c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
 7a0:	3a430074 	bcc	10c0978 <startup-0x1ef3f688>
 7a4:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 7a8:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 6f4 <startup-0x1ffff90c>
 7ac:	616c706f 	cmnvs	ip, pc, rrx
 7b0:	61726f62 	cmnvs	r2, r2, ror #30
 7b4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 7b8:	442f7265 	strtmi	r7, [pc], #-613	; 7c0 <startup-0x1ffff840>
 7bc:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
 7c0:	63746957 	cmnvs	r4, #1425408	; 0x15c000
 7c4:	2f432f68 	svccs	0x00432f68
 7c8:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 7cc:	6600632e 	strvs	r6, [r0], -lr, lsr #6
 7d0:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
 7d4:	6172675f 	cmnvs	r2, pc, asr r7
 7d8:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 7dc:	6c007374 	stcvs	3, cr7, [r0], {116}	; 0x74
 7e0:	52747361 	rsbspl	r7, r4, #-2080374783	; 0x84000001
 7e4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 7e8:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
 7ec:	616c0065 	cmnvs	ip, r5, rrx
 7f0:	654c7473 	strbvs	r7, [ip, #-1139]	; 0xfffffb8d
 7f4:	61567466 	cmpvs	r6, r6, ror #8
 7f8:	0065756c 	rsbeq	r7, r5, ip, ror #10
 7fc:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
 800:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
 804:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 808:	6f62616c 	svcvs	0x0062616c
 80c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 810:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 814:	5049442f 	subpl	r4, r9, pc, lsr #8
 818:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
 81c:	2f686374 	svccs	0x00686374
 820:	6c702f43 	ldclvs	15, cr2, [r0], #-268	; 0xfffffef4
 824:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
 828:	7000632e 	andvc	r6, r0, lr, lsr #6
 82c:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
 830:	64705572 	ldrbtvs	r5, [r0], #-1394	; 0xfffffa8e
 834:	00657461 	rsbeq	r7, r5, r1, ror #8
 838:	65676170 	strbvs	r6, [r7, #-368]!	; 0xfffffe90
 83c:	61726700 	cmnvs	r2, r0, lsl #14
 840:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 844:	6165725f 	cmnvs	r5, pc, asr r2
 848:	75620064 	strbvc	r0, [r2, #-100]!	; 0xffffff9c
 84c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 850:	6c617600 	stclvs	6, cr7, [r1], #-0
 854:	70006575 	andvc	r6, r0, r5, ror r5
 858:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 85c:	72640032 	rsbvc	r0, r4, #50	; 0x32
 860:	675f7761 	ldrbvs	r7, [pc, -r1, ror #14]
 864:	5f656d61 	svcpl	0x00656d61
 868:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 86c:	64007463 	strvs	r7, [r0], #-1123	; 0xfffffb9d
 870:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 874:	63696d5f 	cmnvs	r9, #6080	; 0x17c0
 878:	67006f72 	smlsdxvs	r0, r2, pc, r6	; <UNPREDICTABLE>
 87c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 880:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 884:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 888:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 714 <startup-0x1ffff8ec>
 88c:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 890:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 894:	625f7261 	subsvs	r7, pc, #268435462	; 0x10000006
 898:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
 89c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 8a0:	69700072 	ldmdbvs	r0!, {r1, r4, r5, r6}^
 8a4:	006c6578 	rsbeq	r6, ip, r8, ror r5
 8a8:	6a624f67 	bvs	189464c <startup-0x1e76b9b4>
 8ac:	61726700 	cmnvs	r2, r0, lsl #14
 8b0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 8b4:	6172645f 	cmnvs	r2, pc, asr r4
 8b8:	63735f77 	cmnvs	r3, #476	; 0x1dc
 8bc:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 8c0:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 8c4:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 80a <startup-0x1ffff7f6>	; <UNPREDICTABLE>
 8c8:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 8cc:	6f687300 	svcvs	0x00687300
 8d0:	72665f77 	rsbvc	r5, r6, #476	; 0x1dc
 8d4:	00656d61 	rsbeq	r6, r5, r1, ror #26
 8d8:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 8dc:	7270735f 	rsbsvc	r7, r0, #2080374785	; 0x7c000001
 8e0:	00657469 	rsbeq	r7, r5, r9, ror #8
 8e4:	616c6564 	cmnvs	ip, r4, ror #10
 8e8:	30355f79 	eorscc	r5, r5, r9, ror pc
 8ec:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 8f0:	70617267 	rsbvc	r7, r1, r7, ror #4
 8f4:	5f636968 	svcpl	0x00636968
 8f8:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 8fc:	72670065 	rsbvc	r0, r7, #101	; 0x65
 900:	63537961 	cmpvs	r3, #1589248	; 0x184000
 904:	54656c61 	strbtpl	r6, [r5], #-3169	; 0xfffff39f
 908:	00747365 	rsbseq	r7, r4, r5, ror #6
 90c:	70617267 	rsbvc	r7, r1, r7, ror #4
 910:	5f636968 	svcpl	0x00636968
 914:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 918:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 91c:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 920:	43007261 	movwmi	r7, #609	; 0x261
 924:	6f6d2f3a 	svcvs	0x006d2f3a
 928:	2f632f70 	svccs	0x00632f70
 92c:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 930:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 934:	6f697461 	svcvs	0x00697461
 938:	2f72656e 	svccs	0x0072656e
 93c:	73504944 	cmpvc	r0, #68, 18	; 0x110000
 940:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
 944:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
 948:	6172672f 	cmnvs	r2, pc, lsr #14
 94c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 950:	00632e73 	rsbeq	r2, r3, r3, ror lr
 954:	70617267 	rsbvc	r7, r1, r7, ror #4
 958:	5f636968 	svcpl	0x00636968
 95c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 960:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 964:	6f630061 	svcvs	0x00630061
 968:	00726f6c 	rsbseq	r6, r2, ip, ror #30
 96c:	5f746573 	svcpl	0x00746573
 970:	645f7075 	ldrbvs	r7, [pc], #-117	; 978 <startup-0x1ffff688>
 974:	5f776172 	svcpl	0x00776172
 978:	66667562 	strbtvs	r7, [r6], -r2, ror #10
 97c:	00737265 	rsbseq	r7, r3, r5, ror #4
 980:	70617267 	rsbvc	r7, r1, r7, ror #4
 984:	5f636968 	svcpl	0x00636968
 988:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 98c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 990:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 994:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 998:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 99c:	736e3035 	cmnvc	lr, #53	; 0x35
 9a0:	6c696600 	stclvs	6, cr6, [r9], #-0
 9a4:	6365526c 	cmnvs	r5, #108, 4	; 0xc0000006
 9a8:	676e6174 			; <UNDEFINED> instruction: 0x676e6174
 9ac:	6d00656c 	cfstr32vs	mvfx6, [r0, #-432]	; 0xfffffe50
 9b0:	006b7361 	rsbeq	r7, fp, r1, ror #6
 9b4:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
 9b8:	656c5f65 	strbvs	r5, [ip, #-3941]!	; 0xfffff09b
 9bc:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
 9c0:	61726700 	cmnvs	r2, r0, lsl #14
 9c4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 9c8:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 9cc:	645f6574 	ldrbvs	r6, [pc], #-1396	; 9d4 <startup-0x1ffff62c>
 9d0:	00617461 	rsbeq	r7, r1, r1, ror #8
 9d4:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
 9d8:	64697700 	strbtvs	r7, [r9], #-1792	; 0xfffff900
 9dc:	695f6874 	ldmdbvs	pc, {r2, r4, r5, r6, fp, sp, lr}^	; <UNPREDICTABLE>
 9e0:	79625f6e 	stmdbvc	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 9e4:	00736574 	rsbseq	r6, r3, r4, ror r5
 9e8:	61656c63 	cmnvs	r5, r3, ror #24
 9ec:	6c615f72 	stclvs	15, cr5, [r1], #-456	; 0xfffffe38
 9f0:	61625f6c 	cmnvs	r2, ip, ror #30
 9f4:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
 9f8:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 9fc:	6c630073 	stclvs	0, cr0, [r3], #-460	; 0xfffffe34
 a00:	52726165 	rsbspl	r6, r2, #1073741849	; 0x40000019
 a04:	61746365 	cmnvs	r4, r5, ror #6
 a08:	656c676e 	strbvs	r6, [ip, #-1902]!	; 0xfffff892
 a0c:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 a10:	73007865 	movwvc	r7, #2149	; 0x865
 a14:	63656c65 	cmnvs	r5, #25856	; 0x6500
 a18:	6f635f74 	svcvs	0x00635f74
 a1c:	6f72746e 	svcvs	0x0072746e
 a20:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 a24:	61726700 	cmnvs	r2, r0, lsl #14
 a28:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 a2c:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 a30:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
 a34:	00796461 	rsbseq	r6, r9, r1, ror #8
 a38:	61656c63 	cmnvs	r5, r3, ror #24
 a3c:	68745f72 	ldmdavs	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 a40:	61427369 	cmpvs	r2, r9, ror #6
 a44:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
 a48:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 a4c:	61726700 	cmnvs	r2, r0, lsl #14
 a50:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 a54:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 a58:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
 a5c:	00657a69 	rsbeq	r7, r5, r9, ror #20
 a60:	70617267 	rsbvc	r7, r1, r7, ror #4
 a64:	5f636968 	svcpl	0x00636968
 a68:	61656c63 	cmnvs	r5, r3, ror #24
 a6c:	63735f72 	cmnvs	r3, #456	; 0x1c8
 a70:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 a74:	616f6c00 	cmnvs	pc, r0, lsl #24
 a78:	6d695f64 	stclvs	15, cr5, [r9, #-400]!	; 0xfffffe70
 a7c:	00656761 	rsbeq	r6, r5, r1, ror #14
 a80:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
 a84:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
 a88:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 a8c:	6f62616c 	svcvs	0x0062616c
 a90:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 a94:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 a98:	5049442f 	subpl	r4, r9, pc, lsr #8
 a9c:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
 aa0:	2f686374 	svccs	0x00686374
 aa4:	6d692f43 	stclvs	15, cr2, [r9, #-268]!	; 0xfffffef4
 aa8:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
 aac:	6f6c0063 	svcvs	0x006c0063
 ab0:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
 ab4:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 ab8:	3a430065 	bcc	10c0c54 <startup-0x1ef3f3ac>
 abc:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 ac0:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; a0c <startup-0x1ffff5f4>
 ac4:	616c706f 	cmnvs	ip, pc, rrx
 ac8:	61726f62 	cmnvs	r2, r2, ror #30
 acc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 ad0:	442f7265 	strtmi	r7, [pc], #-613	; ad8 <startup-0x1ffff528>
 ad4:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
 ad8:	63746957 	cmnvs	r4, #1425408	; 0x15c000
 adc:	2f432f68 	svccs	0x00432f68
 ae0:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 ae4:	632e6574 			; <UNDEFINED> instruction: 0x632e6574
 ae8:	646f4d00 	strbtvs	r4, [pc], #-3328	; af0 <startup-0x1ffff510>
 aec:	73007265 	movwvc	r7, #613	; 0x265
 af0:	755f7465 	ldrbvc	r7, [pc, #-1125]	; 693 <startup-0x1ffff96d>
 af4:	49445f70 	stmdbmi	r4, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 af8:	646f004c 	strbtvs	r0, [pc], #-76	; b00 <startup-0x1ffff500>
 afc:	67694872 			; <UNDEFINED> instruction: 0x67694872
 b00:	546f0068 	strbtpl	r0, [pc], #-104	; b08 <startup-0x1ffff4f8>
 b04:	72657079 	rsbvc	r7, r5, #121	; 0x79
 b08:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 b0c:	7550004f 	ldrbvc	r0, [r0, #-79]	; 0xffffffb1
 b10:	00726450 	rsbseq	r6, r2, r0, asr r4
 b14:	52726469 	rsbspl	r6, r2, #1761607680	; 0x69000000
 b18:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
 b1c:	00646576 	rsbeq	r6, r4, r6, ror r5
 b20:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
 b24:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
 b28:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 b2c:	6f62616c 	svcvs	0x0062616c
 b30:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 b34:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 b38:	5049442f 	subpl	r4, r9, pc, lsr #8
 b3c:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
 b40:	2f686374 	svccs	0x00686374
 b44:	70672f43 	rsbvc	r2, r7, r3, asr #30
 b48:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
 b4c:	52746f00 	rsbspl	r6, r4, #0, 30
 b50:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
 b54:	00646576 	rsbeq	r6, r4, r6, ror r5
 b58:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 b5c:	4c49445f 	cfstrdmi	mvd4, [r9], {95}	; 0x5f
 b60:	6e69735f 	mcrvs	3, 3, r7, cr9, cr15, {2}
 b64:	00656c67 	rsbeq	r6, r5, r7, ror #24
 b68:	4c72646f 	cfldrdmi	mvd6, [r2], #-444	; 0xfffffe44
 b6c:	6f00776f 	svcvs	0x0000776f
 b70:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
 b74:	69007264 	stmdbvs	r0, {r2, r5, r6, r9, ip, sp, lr}
 b78:	69487264 	stmdbvs	r8, {r2, r5, r6, r9, ip, sp, lr}^
 b7c:	69006867 	stmdbvs	r0, {r0, r1, r2, r5, r6, fp, sp, lr}
 b80:	6f4c7264 	svcvs	0x004c7264
 b84:	646f0077 	strbtvs	r0, [pc], #-119	; b8c <startup-0x1ffff474>
 b88:	73655272 	cmnvc	r5, #536870919	; 0x20000007
 b8c:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
 b90:	65720064 	ldrbvs	r0, [r2, #-100]!	; 0xffffff9c
 b94:	445f6461 	ldrbmi	r6, [pc], #-1121	; b9c <startup-0x1ffff464>
 b98:	69004c49 	stmdbvs	r0, {r0, r3, r6, sl, fp, lr}
 b9c:	5f74696e 	svcpl	0x0074696e
 ba0:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
 ba4:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
 ba8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 bac:	696d696c 	stmdbvs	sp!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 bb0:	61003274 	tstvs	r0, r4, ror r2
 bb4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 bb8:	6165725f 	cmnvs	r5, pc, asr r2
 bbc:	61645f64 	cmnvs	r4, r4, ror #30
 bc0:	73006174 	movwvc	r6, #372	; 0x174
 bc4:	755f7465 	ldrbvc	r7, [pc, #-1125]	; 767 <startup-0x1ffff899>
 bc8:	73615f70 	cmnvc	r1, #112, 30	; 0x1c0
 bcc:	00696963 	rsbeq	r6, r9, r3, ror #18
 bd0:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 bd4:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
 bd8:	63007469 	movwvs	r7, #1129	; 0x469
 bdc:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
 be0:	6c63006e 	stclvs	0, cr0, [r3], #-440	; 0xfffffe48
 be4:	5f726165 	svcpl	0x00726165
 be8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 bec:	73610069 	cmnvc	r1, #105	; 0x69
 bf0:	5f696963 	svcpl	0x00696963
 bf4:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 bf8:	61705f65 	cmnvs	r0, r5, ror #30
 bfc:	61007472 	tstvs	r0, r2, ror r4
 c00:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 c04:	6165725f 	cmnvs	r5, pc, asr r2
 c08:	6f635f64 	svcvs	0x00635f64
 c0c:	6f72746e 	svcvs	0x0072746e
 c10:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 c14:	63736100 	cmnvs	r3, #0, 2
 c18:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 c1c:	5f6c7274 	svcpl	0x006c7274
 c20:	5f746962 	svcpl	0x00746962
 c24:	00746573 	rsbseq	r6, r4, r3, ror r5
 c28:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 c2c:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 c30:	5f657469 	svcpl	0x00657469
 c34:	00646d63 	rsbeq	r6, r4, r3, ror #26
 c38:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
 c3c:	65740031 	ldrbvs	r0, [r4, #-49]!	; 0xffffffcf
 c40:	00327473 	eorseq	r7, r2, r3, ror r4
 c44:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
 c48:	00737365 	rsbseq	r7, r3, r5, ror #6
 c4c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 c50:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 c54:	5f657469 	svcpl	0x00657469
 c58:	61746164 	cmnvs	r4, r4, ror #2
 c5c:	63736100 	cmnvs	r3, #0, 2
 c60:	745f6969 	ldrbvc	r6, [pc], #-2409	; c68 <startup-0x1ffff398>
 c64:	00747365 	rsbseq	r7, r4, r5, ror #6
 c68:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 c6c:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 c70:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
 c74:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
 c78:	73610073 	cmnvc	r1, #115	; 0x73
 c7c:	5f696963 	svcpl	0x00696963
 c80:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 c84:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 c88:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 c8c:	61007261 	tstvs	r0, r1, ror #4
 c90:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 c94:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 c98:	61006574 	tstvs	r0, r4, ror r5
 c9c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 ca0:	546f675f 	strbtpl	r6, [pc], #-1887	; ca8 <startup-0x1ffff358>
 ca4:	0059586f 	subseq	r5, r9, pc, ror #16
 ca8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 cac:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 cb0:	5f657469 	svcpl	0x00657469
 cb4:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 cb8:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 cbc:	61007265 	tstvs	r0, r5, ror #4
 cc0:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 cc4:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 cc8:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 ccc:	00726168 	rsbseq	r6, r2, r8, ror #2
 cd0:	696d696c 	stmdbvs	sp!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 cd4:	43003174 	movwmi	r3, #372	; 0x174
 cd8:	6f6d2f3a 	svcvs	0x006d2f3a
 cdc:	2f632f70 	svccs	0x00632f70
 ce0:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 ce4:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 ce8:	6f697461 	svcvs	0x00697461
 cec:	2f72656e 	svccs	0x0072656e
 cf0:	73504944 	cmpvc	r0, #68, 18	; 0x110000
 cf4:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
 cf8:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
 cfc:	6373612f 	cmnvs	r3, #-1073741813	; 0xc000000b
 d00:	645f6969 	ldrbvs	r6, [pc], #-2409	; d08 <startup-0x1ffff2f8>
 d04:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 d08:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 d0c:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 d10:	6c735f74 	ldclvs	15, cr5, [r3], #-464	; 0xfffffe30
 d14:	745f776f 	ldrbvc	r7, [pc], #-1903	; d1c <startup-0x1ffff2e4>
 d18:	00747865 	rsbseq	r7, r4, r5, ror #16
 d1c:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
 d20:	6f5f6874 	svcvs	0x005f6874
 d24:	6f725f66 	svcvs	0x00725f66
 d28:	43003177 	movwmi	r3, #375	; 0x177
 d2c:	6f6d2f3a 	svcvs	0x006d2f3a
 d30:	2f632f70 	svccs	0x00632f70
 d34:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 d38:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 d3c:	6f697461 	svcvs	0x00697461
 d40:	2f72656e 	svccs	0x0072656e
 d44:	73504944 	cmpvc	r0, #68, 18	; 0x110000
 d48:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
 d4c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
 d50:	6f6c732f 	svcvs	0x006c732f
 d54:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
 d58:	632e7478 			; <UNDEFINED> instruction: 0x632e7478
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000024 	andeq	r0, r0, r4, lsr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000034 	andcs	r0, r0, r4, lsr r0
  48:	00000164 	andeq	r0, r0, r4, ror #2
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	300e4101 	andcc	r4, lr, r1, lsl #2
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	00000020 	andeq	r0, r0, r0, lsr #32
  60:	00000000 	andeq	r0, r0, r0
  64:	20000198 	mulcs	r0, r8, r1
  68:	00000328 	andeq	r0, r0, r8, lsr #6
  6c:	400c0e41 	andmi	r0, ip, r1, asr #28
  70:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  74:	018e4002 	orreq	r4, lr, r2
  78:	03e80e41 	mvneq	r0, #1040	; 0x410
  7c:	00070d41 	andeq	r0, r7, r1, asr #26
  80:	0000000c 	andeq	r0, r0, ip
  84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  88:	7c020001 	stcvc	0, cr0, [r2], {1}
  8c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000080 	andeq	r0, r0, r0, lsl #1
  98:	200004c0 	andcs	r0, r0, r0, asr #9
  9c:	00000010 	andeq	r0, r0, r0, lsl r0
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	100e4101 	andne	r4, lr, r1, lsl #2
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000080 	andeq	r0, r0, r0, lsl #1
  b8:	200004d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
  bc:	00000046 	andeq	r0, r0, r6, asr #32
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	100e4101 	andne	r4, lr, r1, lsl #2
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000000c 	andeq	r0, r0, ip
  d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  d8:	7c020001 	stcvc	0, cr0, [r2], {1}
  dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  e8:	20000518 	andcs	r0, r0, r8, lsl r5
  ec:	00000184 	andeq	r0, r0, r4, lsl #3
  f0:	40080e41 	andmi	r0, r8, r1, asr #28
  f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f8:	380e4101 	stmdacc	lr, {r0, r8, lr}
  fc:	00070d41 	andeq	r0, r7, r1, asr #26
 100:	00000020 	andeq	r0, r0, r0, lsr #32
 104:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 108:	2000069c 	mulcs	r0, ip, r6
 10c:	00000124 	andeq	r0, r0, r4, lsr #2
 110:	400c0e41 	andmi	r0, ip, r1, asr #28
 114:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 118:	018e4002 	orreq	r4, lr, r2
 11c:	41180e41 	tstmi	r8, r1, asr #28
 120:	0000070d 	andeq	r0, r0, sp, lsl #14
 124:	0000000c 	andeq	r0, r0, ip
 128:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 12c:	7c020001 	stcvc	0, cr0, [r2], {1}
 130:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 134:	0000001c 	andeq	r0, r0, ip, lsl r0
 138:	00000124 	andeq	r0, r0, r4, lsr #2
 13c:	200007c0 	andcs	r0, r0, r0, asr #15
 140:	000000d8 	ldrdeq	r0, [r0], -r8
 144:	40080e41 	andmi	r0, r8, r1, asr #28
 148:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 14c:	100e4101 	andne	r4, lr, r1, lsl #2
 150:	00070d41 	andeq	r0, r7, r1, asr #26
 154:	0000000c 	andeq	r0, r0, ip
 158:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 15c:	7c020001 	stcvc	0, cr0, [r2], {1}
 160:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 164:	00000018 	andeq	r0, r0, r8, lsl r0
 168:	00000154 	andeq	r0, r0, r4, asr r1
 16c:	20000898 	mulcs	r0, r8, r8
 170:	00000044 	andeq	r0, r0, r4, asr #32
 174:	40080e41 	andmi	r0, r8, r1, asr #28
 178:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 17c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 180:	00000018 	andeq	r0, r0, r8, lsl r0
 184:	00000154 	andeq	r0, r0, r4, asr r1
 188:	200008dc 	ldrdcs	r0, [r0], -ip
 18c:	00000044 	andeq	r0, r0, r4, asr #32
 190:	40080e41 	andmi	r0, r8, r1, asr #28
 194:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 198:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 19c:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a0:	00000154 	andeq	r0, r0, r4, asr r1
 1a4:	20000920 	andcs	r0, r0, r0, lsr #18
 1a8:	0000002c 	andeq	r0, r0, ip, lsr #32
 1ac:	40080e41 	andmi	r0, r8, r1, asr #28
 1b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b4:	100e4101 	andne	r4, lr, r1, lsl #2
 1b8:	00070d41 	andeq	r0, r7, r1, asr #26
 1bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c0:	00000154 	andeq	r0, r0, r4, asr r1
 1c4:	2000094c 	andcs	r0, r0, ip, asr #18
 1c8:	00000026 	andeq	r0, r0, r6, lsr #32
 1cc:	40080e41 	andmi	r0, r8, r1, asr #28
 1d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d4:	100e4101 	andne	r4, lr, r1, lsl #2
 1d8:	00070d41 	andeq	r0, r7, r1, asr #26
 1dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e0:	00000154 	andeq	r0, r0, r4, asr r1
 1e4:	20000972 	andcs	r0, r0, r2, ror r9
 1e8:	00000032 	andeq	r0, r0, r2, lsr r0
 1ec:	40080e41 	andmi	r0, r8, r1, asr #28
 1f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f4:	180e4101 	stmdane	lr, {r0, r8, lr}
 1f8:	00070d41 	andeq	r0, r7, r1, asr #26
 1fc:	00000018 	andeq	r0, r0, r8, lsl r0
 200:	00000154 	andeq	r0, r0, r4, asr r1
 204:	200009a4 	andcs	r0, r0, r4, lsr #19
 208:	00000018 	andeq	r0, r0, r8, lsl r0
 20c:	40080e41 	andmi	r0, r8, r1, asr #28
 210:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 214:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 218:	00000018 	andeq	r0, r0, r8, lsl r0
 21c:	00000154 	andeq	r0, r0, r4, asr r1
 220:	200009bc 			; <UNDEFINED> instruction: 0x200009bc
 224:	00000030 	andeq	r0, r0, r0, lsr r0
 228:	40080e41 	andmi	r0, r8, r1, asr #28
 22c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 230:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 234:	0000001c 	andeq	r0, r0, ip, lsl r0
 238:	00000154 	andeq	r0, r0, r4, asr r1
 23c:	200009ec 	andcs	r0, r0, ip, ror #19
 240:	00000050 	andeq	r0, r0, r0, asr r0
 244:	40080e41 	andmi	r0, r8, r1, asr #28
 248:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 24c:	180e4101 	stmdane	lr, {r0, r8, lr}
 250:	00070d41 	andeq	r0, r7, r1, asr #26
 254:	0000001c 	andeq	r0, r0, ip, lsl r0
 258:	00000154 	andeq	r0, r0, r4, asr r1
 25c:	20000a3c 	andcs	r0, r0, ip, lsr sl
 260:	00000058 	andeq	r0, r0, r8, asr r0
 264:	40080e41 	andmi	r0, r8, r1, asr #28
 268:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 26c:	180e4101 	stmdane	lr, {r0, r8, lr}
 270:	00070d41 	andeq	r0, r7, r1, asr #26
 274:	0000001c 	andeq	r0, r0, ip, lsl r0
 278:	00000154 	andeq	r0, r0, r4, asr r1
 27c:	20000a94 	mulcs	r0, r4, sl
 280:	00000066 	andeq	r0, r0, r6, rrx
 284:	40080e41 	andmi	r0, r8, r1, asr #28
 288:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 28c:	100e4101 	andne	r4, lr, r1, lsl #2
 290:	00070d41 	andeq	r0, r7, r1, asr #26
 294:	0000001c 	andeq	r0, r0, ip, lsl r0
 298:	00000154 	andeq	r0, r0, r4, asr r1
 29c:	20000afa 	strdcs	r0, [r0], -sl
 2a0:	0000006e 	andeq	r0, r0, lr, rrx
 2a4:	40080e41 	andmi	r0, r8, r1, asr #28
 2a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2ac:	100e4101 	andne	r4, lr, r1, lsl #2
 2b0:	00070d41 	andeq	r0, r7, r1, asr #26
 2b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b8:	00000154 	andeq	r0, r0, r4, asr r1
 2bc:	20000b68 	andcs	r0, r0, r8, ror #22
 2c0:	00000094 	muleq	r0, r4, r0
 2c4:	40080e41 	andmi	r0, r8, r1, asr #28
 2c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2cc:	180e4101 	stmdane	lr, {r0, r8, lr}
 2d0:	00070d41 	andeq	r0, r7, r1, asr #26
 2d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d8:	00000154 	andeq	r0, r0, r4, asr r1
 2dc:	20000bfc 	strdcs	r0, [r0], -ip
 2e0:	0000002a 	andeq	r0, r0, sl, lsr #32
 2e4:	40080e41 	andmi	r0, r8, r1, asr #28
 2e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2ec:	100e4101 	andne	r4, lr, r1, lsl #2
 2f0:	00070d41 	andeq	r0, r7, r1, asr #26
 2f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f8:	00000154 	andeq	r0, r0, r4, asr r1
 2fc:	20000c26 	andcs	r0, r0, r6, lsr #24
 300:	0000007e 	andeq	r0, r0, lr, ror r0
 304:	40080e41 	andmi	r0, r8, r1, asr #28
 308:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 30c:	100e4101 	andne	r4, lr, r1, lsl #2
 310:	00070d41 	andeq	r0, r7, r1, asr #26
 314:	0000001c 	andeq	r0, r0, ip, lsl r0
 318:	00000154 	andeq	r0, r0, r4, asr r1
 31c:	20000ca4 	andcs	r0, r0, r4, lsr #25
 320:	00000046 	andeq	r0, r0, r6, asr #32
 324:	40080e41 	andmi	r0, r8, r1, asr #28
 328:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 32c:	100e4101 	andne	r4, lr, r1, lsl #2
 330:	00070d41 	andeq	r0, r7, r1, asr #26
 334:	0000001c 	andeq	r0, r0, ip, lsl r0
 338:	00000154 	andeq	r0, r0, r4, asr r1
 33c:	20000cea 	andcs	r0, r0, sl, ror #25
 340:	00000046 	andeq	r0, r0, r6, asr #32
 344:	40080e41 	andmi	r0, r8, r1, asr #28
 348:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 34c:	100e4101 	andne	r4, lr, r1, lsl #2
 350:	00070d41 	andeq	r0, r7, r1, asr #26
 354:	00000018 	andeq	r0, r0, r8, lsl r0
 358:	00000154 	andeq	r0, r0, r4, asr r1
 35c:	20000d30 	andcs	r0, r0, r0, lsr sp
 360:	0000006e 	andeq	r0, r0, lr, rrx
 364:	40080e41 	andmi	r0, r8, r1, asr #28
 368:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 36c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 370:	0000001c 	andeq	r0, r0, ip, lsl r0
 374:	00000154 	andeq	r0, r0, r4, asr r1
 378:	20000d9e 	mulcs	r0, lr, sp
 37c:	00000066 	andeq	r0, r0, r6, rrx
 380:	40080e41 	andmi	r0, r8, r1, asr #28
 384:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 388:	100e4101 	andne	r4, lr, r1, lsl #2
 38c:	00070d41 	andeq	r0, r7, r1, asr #26
 390:	0000001c 	andeq	r0, r0, ip, lsl r0
 394:	00000154 	andeq	r0, r0, r4, asr r1
 398:	20000e04 	andcs	r0, r0, r4, lsl #28
 39c:	00000180 	andeq	r0, r0, r0, lsl #3
 3a0:	40080e41 	andmi	r0, r8, r1, asr #28
 3a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3a8:	200e4101 	andcs	r4, lr, r1, lsl #2
 3ac:	00070d41 	andeq	r0, r7, r1, asr #26
 3b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b4:	00000154 	andeq	r0, r0, r4, asr r1
 3b8:	20000f84 	andcs	r0, r0, r4, lsl #31
 3bc:	000001a0 	andeq	r0, r0, r0, lsr #3
 3c0:	40080e41 	andmi	r0, r8, r1, asr #28
 3c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3c8:	280e4101 	stmdacs	lr, {r0, r8, lr}
 3cc:	00070d41 	andeq	r0, r7, r1, asr #26
 3d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d4:	00000154 	andeq	r0, r0, r4, asr r1
 3d8:	20001124 	andcs	r1, r0, r4, lsr #2
 3dc:	000000d6 	ldrdeq	r0, [r0], -r6
 3e0:	40080e41 	andmi	r0, r8, r1, asr #28
 3e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3e8:	200e4101 	andcs	r4, lr, r1, lsl #2
 3ec:	00070d41 	andeq	r0, r7, r1, asr #26
 3f0:	00000024 	andeq	r0, r0, r4, lsr #32
 3f4:	00000154 	andeq	r0, r0, r4, asr r1
 3f8:	200011fa 	strdcs	r1, [r0], -sl
 3fc:	0000011a 	andeq	r0, r0, sl, lsl r1
 400:	40100e41 	andsmi	r0, r0, r1, asr #28
 404:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 408:	02874003 	addeq	r4, r7, #3
 40c:	41018e40 	tstmi	r1, r0, asr #28
 410:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 414:	00000007 	andeq	r0, r0, r7
 418:	0000001c 	andeq	r0, r0, ip, lsl r0
 41c:	00000154 	andeq	r0, r0, r4, asr r1
 420:	20001314 	andcs	r1, r0, r4, lsl r3
 424:	00000052 	andeq	r0, r0, r2, asr r0
 428:	40080e41 	andmi	r0, r8, r1, asr #28
 42c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 430:	200e4101 	andcs	r4, lr, r1, lsl #2
 434:	00070d41 	andeq	r0, r7, r1, asr #26
 438:	0000001c 	andeq	r0, r0, ip, lsl r0
 43c:	00000154 	andeq	r0, r0, r4, asr r1
 440:	20001366 	andcs	r1, r0, r6, ror #6
 444:	00000052 	andeq	r0, r0, r2, asr r0
 448:	40080e41 	andmi	r0, r8, r1, asr #28
 44c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 450:	200e4101 	andcs	r4, lr, r1, lsl #2
 454:	00070d41 	andeq	r0, r7, r1, asr #26
 458:	00000020 	andeq	r0, r0, r0, lsr #32
 45c:	00000154 	andeq	r0, r0, r4, asr r1
 460:	200013b8 			; <UNDEFINED> instruction: 0x200013b8
 464:	00000130 	andeq	r0, r0, r0, lsr r1
 468:	400c0e41 	andmi	r0, ip, r1, asr #28
 46c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 470:	018e4002 	orreq	r4, lr, r2
 474:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 478:	0000070d 	andeq	r0, r0, sp, lsl #14
 47c:	0000001c 	andeq	r0, r0, ip, lsl r0
 480:	00000154 	andeq	r0, r0, r4, asr r1
 484:	200014e8 	andcs	r1, r0, r8, ror #9
 488:	00000108 	andeq	r0, r0, r8, lsl #2
 48c:	40080e41 	andmi	r0, r8, r1, asr #28
 490:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 494:	100e4101 	andne	r4, lr, r1, lsl #2
 498:	00070d41 	andeq	r0, r7, r1, asr #26
 49c:	0000001c 	andeq	r0, r0, ip, lsl r0
 4a0:	00000154 	andeq	r0, r0, r4, asr r1
 4a4:	200015f0 	strdcs	r1, [r0], -r0
 4a8:	00000082 	andeq	r0, r0, r2, lsl #1
 4ac:	40080e41 	andmi	r0, r8, r1, asr #28
 4b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4b4:	200e4101 	andcs	r4, lr, r1, lsl #2
 4b8:	18070c41 	stmdane	r7, {r0, r6, sl, fp}
 4bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4c0:	00000154 	andeq	r0, r0, r4, asr r1
 4c4:	20001672 	andcs	r1, r0, r2, ror r6
 4c8:	0000006a 	andeq	r0, r0, sl, rrx
 4cc:	40080e41 	andmi	r0, r8, r1, asr #28
 4d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4d4:	100e4101 	andne	r4, lr, r1, lsl #2
 4d8:	00070d41 	andeq	r0, r7, r1, asr #26
 4dc:	0000000c 	andeq	r0, r0, ip
 4e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4e4:	7c020001 	stcvc	0, cr0, [r2], {1}
 4e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f0:	000004dc 	ldrdeq	r0, [r0], -ip
 4f4:	200016dc 	ldrdcs	r1, [r0], -ip
 4f8:	00000028 	andeq	r0, r0, r8, lsr #32
 4fc:	40080e41 	andmi	r0, r8, r1, asr #28
 500:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 504:	180e4101 	stmdane	lr, {r0, r8, lr}
 508:	00070d41 	andeq	r0, r7, r1, asr #26
 50c:	0000000c 	andeq	r0, r0, ip
 510:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 514:	7c020001 	stcvc	0, cr0, [r2], {1}
 518:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 51c:	0000001c 	andeq	r0, r0, ip, lsl r0
 520:	0000050c 	andeq	r0, r0, ip, lsl #10
 524:	20001704 	andcs	r1, r0, r4, lsl #14
 528:	00000028 	andeq	r0, r0, r8, lsr #32
 52c:	40080e41 	andmi	r0, r8, r1, asr #28
 530:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 534:	180e4101 	stmdane	lr, {r0, r8, lr}
 538:	00070d41 	andeq	r0, r7, r1, asr #26
 53c:	0000000c 	andeq	r0, r0, ip
 540:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 544:	7c020001 	stcvc	0, cr0, [r2], {1}
 548:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 54c:	00000018 	andeq	r0, r0, r8, lsl r0
 550:	0000053c 	andeq	r0, r0, ip, lsr r5
 554:	2000172c 	andcs	r1, r0, ip, lsr #14
 558:	00000018 	andeq	r0, r0, r8, lsl r0
 55c:	40080e41 	andmi	r0, r8, r1, asr #28
 560:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 564:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 568:	00000018 	andeq	r0, r0, r8, lsl r0
 56c:	0000053c 	andeq	r0, r0, ip, lsr r5
 570:	20001744 	andcs	r1, r0, r4, asr #14
 574:	00000014 	andeq	r0, r0, r4, lsl r0
 578:	40080e41 	andmi	r0, r8, r1, asr #28
 57c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 580:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 584:	00000020 	andeq	r0, r0, r0, lsr #32
 588:	0000053c 	andeq	r0, r0, ip, lsr r5
 58c:	20001758 	andcs	r1, r0, r8, asr r7
 590:	00000034 	andeq	r0, r0, r4, lsr r0
 594:	400c0e41 	andmi	r0, ip, r1, asr #28
 598:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 59c:	018e4002 	orreq	r4, lr, r2
 5a0:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 5a4:	0000070d 	andeq	r0, r0, sp, lsl #14
 5a8:	0000000c 	andeq	r0, r0, ip
 5ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 5b0:	7c020001 	stcvc	0, cr0, [r2], {1}
 5b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5bc:	000005a8 	andeq	r0, r0, r8, lsr #11
 5c0:	2000178c 	andcs	r1, r0, ip, lsl #15
 5c4:	00000044 	andeq	r0, r0, r4, asr #32
 5c8:	40080e41 	andmi	r0, r8, r1, asr #28
 5cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5d0:	180e4101 	stmdane	lr, {r0, r8, lr}
 5d4:	00070d41 	andeq	r0, r7, r1, asr #26
 5d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5dc:	000005a8 	andeq	r0, r0, r8, lsr #11
 5e0:	200017d0 	ldrdcs	r1, [r0], -r0
 5e4:	00000050 	andeq	r0, r0, r0, asr r0
 5e8:	40080e41 	andmi	r0, r8, r1, asr #28
 5ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5f0:	180e4101 	stmdane	lr, {r0, r8, lr}
 5f4:	00070d41 	andeq	r0, r7, r1, asr #26
 5f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5fc:	000005a8 	andeq	r0, r0, r8, lsr #11
 600:	20001820 	andcs	r1, r0, r0, lsr #16
 604:	0000002a 	andeq	r0, r0, sl, lsr #32
 608:	40080e41 	andmi	r0, r8, r1, asr #28
 60c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 610:	100e4101 	andne	r4, lr, r1, lsl #2
 614:	00070d41 	andeq	r0, r7, r1, asr #26
 618:	0000001c 	andeq	r0, r0, ip, lsl r0
 61c:	000005a8 	andeq	r0, r0, r8, lsr #11
 620:	2000184a 	andcs	r1, r0, sl, asr #16
 624:	0000002a 	andeq	r0, r0, sl, lsr #32
 628:	40080e41 	andmi	r0, r8, r1, asr #28
 62c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 630:	100e4101 	andne	r4, lr, r1, lsl #2
 634:	00070d41 	andeq	r0, r7, r1, asr #26
 638:	00000020 	andeq	r0, r0, r0, lsr #32
 63c:	000005a8 	andeq	r0, r0, r8, lsr #11
 640:	20001874 	andcs	r1, r0, r4, ror r8
 644:	00000054 	andeq	r0, r0, r4, asr r0
 648:	400c0e41 	andmi	r0, ip, r1, asr #28
 64c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 650:	018e4002 	orreq	r4, lr, r2
 654:	41180e41 	tstmi	r8, r1, asr #28
 658:	0000070d 	andeq	r0, r0, sp, lsl #14
 65c:	00000020 	andeq	r0, r0, r0, lsr #32
 660:	000005a8 	andeq	r0, r0, r8, lsr #11
 664:	200018c8 	andcs	r1, r0, r8, asr #17
 668:	00000054 	andeq	r0, r0, r4, asr r0
 66c:	400c0e41 	andmi	r0, ip, r1, asr #28
 670:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 674:	018e4002 	orreq	r4, lr, r2
 678:	41180e41 	tstmi	r8, r1, asr #28
 67c:	0000070d 	andeq	r0, r0, sp, lsl #14
 680:	0000001c 	andeq	r0, r0, ip, lsl r0
 684:	000005a8 	andeq	r0, r0, r8, lsr #11
 688:	2000191c 	andcs	r1, r0, ip, lsl r9
 68c:	00000030 	andeq	r0, r0, r0, lsr r0
 690:	40080e41 	andmi	r0, r8, r1, asr #28
 694:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 698:	100e4101 	andne	r4, lr, r1, lsl #2
 69c:	00070d41 	andeq	r0, r7, r1, asr #26
 6a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6a4:	000005a8 	andeq	r0, r0, r8, lsr #11
 6a8:	2000194c 	andcs	r1, r0, ip, asr #18
 6ac:	00000034 	andeq	r0, r0, r4, lsr r0
 6b0:	40080e41 	andmi	r0, r8, r1, asr #28
 6b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6b8:	100e4101 	andne	r4, lr, r1, lsl #2
 6bc:	00070d41 	andeq	r0, r7, r1, asr #26
 6c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6c4:	000005a8 	andeq	r0, r0, r8, lsr #11
 6c8:	20001980 	andcs	r1, r0, r0, lsl #19
 6cc:	0000003c 	andeq	r0, r0, ip, lsr r0
 6d0:	40080e41 	andmi	r0, r8, r1, asr #28
 6d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6d8:	100e4101 	andne	r4, lr, r1, lsl #2
 6dc:	00070d41 	andeq	r0, r7, r1, asr #26
 6e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6e4:	000005a8 	andeq	r0, r0, r8, lsr #11
 6e8:	200019bc 			; <UNDEFINED> instruction: 0x200019bc
 6ec:	00000050 	andeq	r0, r0, r0, asr r0
 6f0:	40080e41 	andmi	r0, r8, r1, asr #28
 6f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6f8:	180e4101 	stmdane	lr, {r0, r8, lr}
 6fc:	00070d41 	andeq	r0, r7, r1, asr #26
 700:	00000018 	andeq	r0, r0, r8, lsl r0
 704:	000005a8 	andeq	r0, r0, r8, lsr #11
 708:	20001a0c 	andcs	r1, r0, ip, lsl #20
 70c:	0000009a 	muleq	r0, sl, r0
 710:	40080e41 	andmi	r0, r8, r1, asr #28
 714:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 718:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 71c:	00000018 	andeq	r0, r0, r8, lsl r0
 720:	000005a8 	andeq	r0, r0, r8, lsr #11
 724:	20001aa6 	andcs	r1, r0, r6, lsr #21
 728:	0000001a 	andeq	r0, r0, sl, lsl r0
 72c:	40080e41 	andmi	r0, r8, r1, asr #28
 730:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 734:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 738:	00000018 	andeq	r0, r0, r8, lsl r0
 73c:	000005a8 	andeq	r0, r0, r8, lsr #11
 740:	20001ac0 	andcs	r1, r0, r0, asr #21
 744:	00000012 	andeq	r0, r0, r2, lsl r0
 748:	40080e41 	andmi	r0, r8, r1, asr #28
 74c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 750:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 754:	00000020 	andeq	r0, r0, r0, lsr #32
 758:	000005a8 	andeq	r0, r0, r8, lsr #11
 75c:	20001ad2 	ldrdcs	r1, [r0], -r2
 760:	0000006a 	andeq	r0, r0, sl, rrx
 764:	400c0e41 	andmi	r0, ip, r1, asr #28
 768:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 76c:	018e4002 	orreq	r4, lr, r2
 770:	41300e41 	teqmi	r0, r1, asr #28
 774:	0000070d 	andeq	r0, r0, sp, lsl #14
 778:	0000001c 	andeq	r0, r0, ip, lsl r0
 77c:	000005a8 	andeq	r0, r0, r8, lsr #11
 780:	20001b3c 	andcs	r1, r0, ip, lsr fp
 784:	0000005e 	andeq	r0, r0, lr, asr r0
 788:	40080e41 	andmi	r0, r8, r1, asr #28
 78c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 790:	100e4101 	andne	r4, lr, r1, lsl #2
 794:	00070d41 	andeq	r0, r7, r1, asr #26
 798:	0000001c 	andeq	r0, r0, ip, lsl r0
 79c:	000005a8 	andeq	r0, r0, r8, lsr #11
 7a0:	20001b9a 	mulcs	r0, sl, fp
 7a4:	0000008e 	andeq	r0, r0, lr, lsl #1
 7a8:	40080e41 	andmi	r0, r8, r1, asr #28
 7ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7b0:	200e4101 	andcs	r4, lr, r1, lsl #2
 7b4:	00070d41 	andeq	r0, r7, r1, asr #26
 7b8:	00000020 	andeq	r0, r0, r0, lsr #32
 7bc:	000005a8 	andeq	r0, r0, r8, lsr #11
 7c0:	20001c28 	andcs	r1, r0, r8, lsr #24
 7c4:	00000084 	andeq	r0, r0, r4, lsl #1
 7c8:	400c0e41 	andmi	r0, ip, r1, asr #28
 7cc:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 7d0:	018e4002 	orreq	r4, lr, r2
 7d4:	41380e41 	teqmi	r8, r1, asr #28
 7d8:	0000070d 	andeq	r0, r0, sp, lsl #14
 7dc:	0000000c 	andeq	r0, r0, ip
 7e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 7e4:	7c020001 	stcvc	0, cr0, [r2], {1}
 7e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 7ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 7f0:	000007dc 	ldrdeq	r0, [r0], -ip
 7f4:	20001cac 	andcs	r1, r0, ip, lsr #25
 7f8:	0000005a 	andeq	r0, r0, sl, asr r0
 7fc:	40080e41 	andmi	r0, r8, r1, asr #28
 800:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 804:	180e4101 	stmdane	lr, {r0, r8, lr}
 808:	00070d41 	andeq	r0, r7, r1, asr #26
 80c:	0000001c 	andeq	r0, r0, ip, lsl r0
 810:	000007dc 	ldrdeq	r0, [r0], -ip
 814:	20001d06 	andcs	r1, r0, r6, lsl #26
 818:	0000003a 	andeq	r0, r0, sl, lsr r0
 81c:	40080e41 	andmi	r0, r8, r1, asr #28
 820:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 824:	180e4101 	stmdane	lr, {r0, r8, lr}
 828:	00070d41 	andeq	r0, r7, r1, asr #26
 82c:	0000000c 	andeq	r0, r0, ip
 830:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 834:	7c010001 	stcvc	0, cr0, [r1], {1}
 838:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 83c:	0000000c 	andeq	r0, r0, ip
 840:	0000082c 	andeq	r0, r0, ip, lsr #16
 844:	20001d41 	andcs	r1, r0, r1, asr #26
 848:	000001cc 	andeq	r0, r0, ip, asr #3
