
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#endif
}

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f8c8 	bl	20000198 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:
void init_app( void ) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*portModer = 0x55555555;
20000014:	4b05      	ldr	r3, [pc, #20]	; (2000002c <init_app+0x1c>)
20000016:	4a06      	ldr	r2, [pc, #24]	; (20000030 <init_app+0x20>)
20000018:	601a      	str	r2, [r3, #0]
	set_up_DIL();
2000001a:	f001 f909 	bl	20001230 <set_up_DIL>
	graphic_initialize();
2000001e:	f000 fc05 	bl	2000082c <graphic_initialize>
	graphic_clear_screen();
20000022:	f000 fc3a 	bl	2000089a <graphic_clear_screen>
}
20000026:	46c0      	nop			; (mov r8, r8)
20000028:	46bd      	mov	sp, r7
2000002a:	bd80      	pop	{r7, pc}
2000002c:	40021000 	andmi	r1, r2, r0
20000030:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000034 <initSprites>:
sprite tempCastleLight;
sprite tempTitleBlack;
sprite tempTitleGray;
sprite tempTitleLight;

void initSprites( void ) {
20000034:	b580      	push	{r7, lr}
20000036:	b08a      	sub	sp, #40	; 0x28
20000038:	af00      	add	r7, sp, #0
	sprite *monsterPointer = &tempMonster;
2000003a:	4b39      	ldr	r3, [pc, #228]	; (20000120 <initSprites+0xec>)
2000003c:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(monsterPointer, monster_black_bits, monster_black_width, monster_black_height);
2000003e:	4939      	ldr	r1, [pc, #228]	; (20000124 <initSprites+0xf0>)
20000040:	6a78      	ldr	r0, [r7, #36]	; 0x24
20000042:	231e      	movs	r3, #30
20000044:	221e      	movs	r2, #30
20000046:	f000 f991 	bl	2000036c <load_sprite>
	monster = monsterPointer;
2000004a:	4b37      	ldr	r3, [pc, #220]	; (20000128 <initSprites+0xf4>)
2000004c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000004e:	601a      	str	r2, [r3, #0]
	
	sprite *monsterPointer2 = &tempMonsterLight;
20000050:	4b36      	ldr	r3, [pc, #216]	; (2000012c <initSprites+0xf8>)
20000052:	623b      	str	r3, [r7, #32]
	load_sprite(monsterPointer2, monster_light_bits, monster_light_width, monster_light_height);
20000054:	4936      	ldr	r1, [pc, #216]	; (20000130 <initSprites+0xfc>)
20000056:	6a38      	ldr	r0, [r7, #32]
20000058:	231e      	movs	r3, #30
2000005a:	221e      	movs	r2, #30
2000005c:	f000 f986 	bl	2000036c <load_sprite>
	monsterLight = monsterPointer2;
20000060:	4b34      	ldr	r3, [pc, #208]	; (20000134 <initSprites+0x100>)
20000062:	6a3a      	ldr	r2, [r7, #32]
20000064:	601a      	str	r2, [r3, #0]

	sprite *monsterPointer3 = &tempMonsterGray;
20000066:	4b34      	ldr	r3, [pc, #208]	; (20000138 <initSprites+0x104>)
20000068:	61fb      	str	r3, [r7, #28]
	load_sprite(monsterPointer3, monster_gray_bits, monster_gray_width, monster_gray_height);
2000006a:	4934      	ldr	r1, [pc, #208]	; (2000013c <initSprites+0x108>)
2000006c:	69f8      	ldr	r0, [r7, #28]
2000006e:	231e      	movs	r3, #30
20000070:	221e      	movs	r2, #30
20000072:	f000 f97b 	bl	2000036c <load_sprite>
	monsterGray = monsterPointer3;
20000076:	4b32      	ldr	r3, [pc, #200]	; (20000140 <initSprites+0x10c>)
20000078:	69fa      	ldr	r2, [r7, #28]
2000007a:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempBg;
2000007c:	4b31      	ldr	r3, [pc, #196]	; (20000144 <initSprites+0x110>)
2000007e:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer4, bg_bits, bg_width, bg_height);
20000080:	4931      	ldr	r1, [pc, #196]	; (20000148 <initSprites+0x114>)
20000082:	69b8      	ldr	r0, [r7, #24]
20000084:	2340      	movs	r3, #64	; 0x40
20000086:	2280      	movs	r2, #128	; 0x80
20000088:	f000 f970 	bl	2000036c <load_sprite>
	bg = pointer4;
2000008c:	4b2f      	ldr	r3, [pc, #188]	; (2000014c <initSprites+0x118>)
2000008e:	69ba      	ldr	r2, [r7, #24]
20000090:	601a      	str	r2, [r3, #0]
	
	sprite *pointer5 = &tempCastleBlack;
20000092:	4b2f      	ldr	r3, [pc, #188]	; (20000150 <initSprites+0x11c>)
20000094:	617b      	str	r3, [r7, #20]
	load_sprite(pointer5, castle_black_bits, castle_black_width, castle_black_height);
20000096:	492f      	ldr	r1, [pc, #188]	; (20000154 <initSprites+0x120>)
20000098:	6978      	ldr	r0, [r7, #20]
2000009a:	2340      	movs	r3, #64	; 0x40
2000009c:	2280      	movs	r2, #128	; 0x80
2000009e:	f000 f965 	bl	2000036c <load_sprite>
	castleBlack = pointer5;
200000a2:	4b2d      	ldr	r3, [pc, #180]	; (20000158 <initSprites+0x124>)
200000a4:	697a      	ldr	r2, [r7, #20]
200000a6:	601a      	str	r2, [r3, #0]
	
	sprite *pointer6 = &tempCastleGray;
200000a8:	4b2c      	ldr	r3, [pc, #176]	; (2000015c <initSprites+0x128>)
200000aa:	613b      	str	r3, [r7, #16]
	load_sprite(pointer6, castle_gray_bits, castle_black_width, castle_black_height);
200000ac:	492c      	ldr	r1, [pc, #176]	; (20000160 <initSprites+0x12c>)
200000ae:	6938      	ldr	r0, [r7, #16]
200000b0:	2340      	movs	r3, #64	; 0x40
200000b2:	2280      	movs	r2, #128	; 0x80
200000b4:	f000 f95a 	bl	2000036c <load_sprite>
	castleGray = pointer6;
200000b8:	4b2a      	ldr	r3, [pc, #168]	; (20000164 <initSprites+0x130>)
200000ba:	693a      	ldr	r2, [r7, #16]
200000bc:	601a      	str	r2, [r3, #0]
	
	sprite *pointer7 = &tempCastleLight;
200000be:	4b2a      	ldr	r3, [pc, #168]	; (20000168 <initSprites+0x134>)
200000c0:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer7, castle_light_bits, castle_black_width, castle_black_height);
200000c2:	492a      	ldr	r1, [pc, #168]	; (2000016c <initSprites+0x138>)
200000c4:	68f8      	ldr	r0, [r7, #12]
200000c6:	2340      	movs	r3, #64	; 0x40
200000c8:	2280      	movs	r2, #128	; 0x80
200000ca:	f000 f94f 	bl	2000036c <load_sprite>
	castleLight = pointer7;
200000ce:	4b28      	ldr	r3, [pc, #160]	; (20000170 <initSprites+0x13c>)
200000d0:	68fa      	ldr	r2, [r7, #12]
200000d2:	601a      	str	r2, [r3, #0]
	
	sprite *pointer8 = &tempTitleLight;
200000d4:	4b27      	ldr	r3, [pc, #156]	; (20000174 <initSprites+0x140>)
200000d6:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer8, title_light_bits, title_black_width, title_black_height);
200000d8:	4927      	ldr	r1, [pc, #156]	; (20000178 <initSprites+0x144>)
200000da:	68b8      	ldr	r0, [r7, #8]
200000dc:	231e      	movs	r3, #30
200000de:	2232      	movs	r2, #50	; 0x32
200000e0:	f000 f944 	bl	2000036c <load_sprite>
	titleLight = pointer8;
200000e4:	4b25      	ldr	r3, [pc, #148]	; (2000017c <initSprites+0x148>)
200000e6:	68ba      	ldr	r2, [r7, #8]
200000e8:	601a      	str	r2, [r3, #0]
	sprite *pointer9 = &tempTitleGray;
200000ea:	4b25      	ldr	r3, [pc, #148]	; (20000180 <initSprites+0x14c>)
200000ec:	607b      	str	r3, [r7, #4]
	load_sprite(pointer9, title_gray_bits, title_black_width, title_black_height);
200000ee:	4925      	ldr	r1, [pc, #148]	; (20000184 <initSprites+0x150>)
200000f0:	6878      	ldr	r0, [r7, #4]
200000f2:	231e      	movs	r3, #30
200000f4:	2232      	movs	r2, #50	; 0x32
200000f6:	f000 f939 	bl	2000036c <load_sprite>
	titleGray = pointer9;
200000fa:	4b23      	ldr	r3, [pc, #140]	; (20000188 <initSprites+0x154>)
200000fc:	687a      	ldr	r2, [r7, #4]
200000fe:	601a      	str	r2, [r3, #0]
	sprite *pointer10 = &tempTitleBlack;
20000100:	4b22      	ldr	r3, [pc, #136]	; (2000018c <initSprites+0x158>)
20000102:	603b      	str	r3, [r7, #0]
	load_sprite(pointer10, title_black_bits, title_black_width, title_black_height);
20000104:	4922      	ldr	r1, [pc, #136]	; (20000190 <initSprites+0x15c>)
20000106:	6838      	ldr	r0, [r7, #0]
20000108:	231e      	movs	r3, #30
2000010a:	2232      	movs	r2, #50	; 0x32
2000010c:	f000 f92e 	bl	2000036c <load_sprite>
	titleBlack = pointer10;
20000110:	4b20      	ldr	r3, [pc, #128]	; (20000194 <initSprites+0x160>)
20000112:	683a      	ldr	r2, [r7, #0]
20000114:	601a      	str	r2, [r3, #0]
}
20000116:	46c0      	nop			; (mov r8, r8)
20000118:	46bd      	mov	sp, r7
2000011a:	b00a      	add	sp, #40	; 0x28
2000011c:	bd80      	pop	{r7, pc}
2000011e:	46c0      	nop			; (mov r8, r8)
20000120:	20001844 	andcs	r1, r0, r4, asr #16
20000124:	200037a0 	andcs	r3, r0, r0, lsr #15
20000128:	20001824 	andcs	r1, r0, r4, lsr #16
2000012c:	20001888 	andcs	r1, r0, r8, lsl #17
20000130:	20003818 	andcs	r3, r0, r8, lsl r8
20000134:	200018a4 	andcs	r1, r0, r4, lsr #17
20000138:	20001860 	andcs	r1, r0, r0, ror #16
2000013c:	20003890 	mulcs	r0, r0, r8
20000140:	200018b0 			; <UNDEFINED> instruction: 0x200018b0
20000144:	200018b4 			; <UNDEFINED> instruction: 0x200018b4
20000148:	20004784 	andcs	r4, r0, r4, lsl #15
2000014c:	2000185c 	andcs	r1, r0, ip, asr r8
20000150:	20001828 	andcs	r1, r0, r8, lsr #16
20000154:	20003908 	andcs	r3, r0, r8, lsl #18
20000158:	20001840 	andcs	r1, r0, r0, asr #16
2000015c:	20001898 	mulcs	r0, r8, r8
20000160:	20003d08 	andcs	r3, r0, r8, lsl #26
20000164:	200018ac 	andcs	r1, r0, ip, lsr #17
20000168:	2000187c 	andcs	r1, r0, ip, ror r8
2000016c:	20004108 	andcs	r4, r0, r8, lsl #2
20000170:	20001878 	andcs	r1, r0, r8, ror r8
20000174:	2000186c 	andcs	r1, r0, ip, ror #16
20000178:	20004508 	andcs	r4, r0, r8, lsl #10
2000017c:	200018a8 	andcs	r1, r0, r8, lsr #17
20000180:	20001834 	andcs	r1, r0, r4, lsr r8
20000184:	200045dc 	ldrdcs	r4, [r0], -ip
20000188:	20001894 	mulcs	r0, r4, r8
2000018c:	20001850 	andcs	r1, r0, r0, asr r8
20000190:	200046b0 			; <UNDEFINED> instruction: 0x200046b0
20000194:	200018c0 	andcs	r1, r0, r0, asr #17

20000198 <main>:
	
int counter = 0;
void main(void)
{
20000198:	b590      	push	{r4, r7, lr}
2000019a:	b0c1      	sub	sp, #260	; 0x104
2000019c:	af00      	add	r7, sp, #0
 * 2. Draw it with method above.
 * 3. Show frame with some long fram_length for testing.
 * 
 * */
	
	init_app();	
2000019e:	f7ff ff37 	bl	20000010 <init_app>
	initSprites();
200001a2:	f7ff ff47 	bl	20000034 <initSprites>
	
	GameObject monsterObj;
	Image monsterImage;
	Image monsterImages[] = {monsterImage};
200001a6:	23c4      	movs	r3, #196	; 0xc4
200001a8:	18fb      	adds	r3, r7, r3
200001aa:	22d0      	movs	r2, #208	; 0xd0
200001ac:	18ba      	adds	r2, r7, r2
200001ae:	ca13      	ldmia	r2!, {r0, r1, r4}
200001b0:	c313      	stmia	r3!, {r0, r1, r4}
	monsterObj.images = monsterImages;
200001b2:	23dc      	movs	r3, #220	; 0xdc
200001b4:	18fb      	adds	r3, r7, r3
200001b6:	22c4      	movs	r2, #196	; 0xc4
200001b8:	18ba      	adds	r2, r7, r2
200001ba:	601a      	str	r2, [r3, #0]
	load_image(&monsterObj.images[0], monster, monsterGray, monsterLight);
200001bc:	23dc      	movs	r3, #220	; 0xdc
200001be:	18fb      	adds	r3, r7, r3
200001c0:	6818      	ldr	r0, [r3, #0]
200001c2:	4b5e      	ldr	r3, [pc, #376]	; (2000033c <main+0x1a4>)
200001c4:	6819      	ldr	r1, [r3, #0]
200001c6:	4b5e      	ldr	r3, [pc, #376]	; (20000340 <main+0x1a8>)
200001c8:	681a      	ldr	r2, [r3, #0]
200001ca:	4b5e      	ldr	r3, [pc, #376]	; (20000344 <main+0x1ac>)
200001cc:	681b      	ldr	r3, [r3, #0]
200001ce:	f001 f85f 	bl	20001290 <load_image>
	monsterObj.xPos = 30;
200001d2:	23dc      	movs	r3, #220	; 0xdc
200001d4:	18fb      	adds	r3, r7, r3
200001d6:	221e      	movs	r2, #30
200001d8:	605a      	str	r2, [r3, #4]
	monsterObj.yPos = 4;
200001da:	23dc      	movs	r3, #220	; 0xdc
200001dc:	18fb      	adds	r3, r7, r3
200001de:	2204      	movs	r2, #4
200001e0:	609a      	str	r2, [r3, #8]
	monsterObj.current_frame = 0;
200001e2:	23dc      	movs	r3, #220	; 0xdc
200001e4:	18fb      	adds	r3, r7, r3
200001e6:	2200      	movs	r2, #0
200001e8:	615a      	str	r2, [r3, #20]
	monsterObj.update = playerUpdate;
200001ea:	23dc      	movs	r3, #220	; 0xdc
200001ec:	18fb      	adds	r3, r7, r3
200001ee:	4a56      	ldr	r2, [pc, #344]	; (20000348 <main+0x1b0>)
200001f0:	60da      	str	r2, [r3, #12]
	
	GameObject titleObj;
	Image titleImage;
	Image titleImages[] = {titleImage};
200001f2:	2388      	movs	r3, #136	; 0x88
200001f4:	18fb      	adds	r3, r7, r3
200001f6:	2294      	movs	r2, #148	; 0x94
200001f8:	18ba      	adds	r2, r7, r2
200001fa:	ca13      	ldmia	r2!, {r0, r1, r4}
200001fc:	c313      	stmia	r3!, {r0, r1, r4}
	titleObj.images = titleImages;
200001fe:	23a0      	movs	r3, #160	; 0xa0
20000200:	18fb      	adds	r3, r7, r3
20000202:	2288      	movs	r2, #136	; 0x88
20000204:	18ba      	adds	r2, r7, r2
20000206:	601a      	str	r2, [r3, #0]
	load_image(&titleObj.images[0], titleBlack, titleGray, titleLight);
20000208:	23a0      	movs	r3, #160	; 0xa0
2000020a:	18fb      	adds	r3, r7, r3
2000020c:	6818      	ldr	r0, [r3, #0]
2000020e:	4b4f      	ldr	r3, [pc, #316]	; (2000034c <main+0x1b4>)
20000210:	6819      	ldr	r1, [r3, #0]
20000212:	4b4f      	ldr	r3, [pc, #316]	; (20000350 <main+0x1b8>)
20000214:	681a      	ldr	r2, [r3, #0]
20000216:	4b4f      	ldr	r3, [pc, #316]	; (20000354 <main+0x1bc>)
20000218:	681b      	ldr	r3, [r3, #0]
2000021a:	f001 f839 	bl	20001290 <load_image>
	titleObj.xPos = 1;
2000021e:	23a0      	movs	r3, #160	; 0xa0
20000220:	18fb      	adds	r3, r7, r3
20000222:	2201      	movs	r2, #1
20000224:	605a      	str	r2, [r3, #4]
	titleObj.yPos = -40;
20000226:	23a0      	movs	r3, #160	; 0xa0
20000228:	18fb      	adds	r3, r7, r3
2000022a:	2228      	movs	r2, #40	; 0x28
2000022c:	4252      	negs	r2, r2
2000022e:	609a      	str	r2, [r3, #8]
	titleObj.current_frame = 0;
20000230:	23a0      	movs	r3, #160	; 0xa0
20000232:	18fb      	adds	r3, r7, r3
20000234:	2200      	movs	r2, #0
20000236:	615a      	str	r2, [r3, #20]
	monsterObj.image.grayImage = monsterGray;
	monsterObj.image.lightImage = monsterLight;
	*/
	GameObject castleObj;
	Image castleImage;
	Image castleImages[] = {castleImage};
20000238:	234c      	movs	r3, #76	; 0x4c
2000023a:	18fb      	adds	r3, r7, r3
2000023c:	2258      	movs	r2, #88	; 0x58
2000023e:	18ba      	adds	r2, r7, r2
20000240:	ca13      	ldmia	r2!, {r0, r1, r4}
20000242:	c313      	stmia	r3!, {r0, r1, r4}
	castleObj.images = castleImages;
20000244:	2364      	movs	r3, #100	; 0x64
20000246:	18fb      	adds	r3, r7, r3
20000248:	224c      	movs	r2, #76	; 0x4c
2000024a:	18ba      	adds	r2, r7, r2
2000024c:	601a      	str	r2, [r3, #0]
	load_image(&castleObj.images[0], castleBlack, castleGray, castleLight);
2000024e:	2364      	movs	r3, #100	; 0x64
20000250:	18fb      	adds	r3, r7, r3
20000252:	6818      	ldr	r0, [r3, #0]
20000254:	4b40      	ldr	r3, [pc, #256]	; (20000358 <main+0x1c0>)
20000256:	6819      	ldr	r1, [r3, #0]
20000258:	4b40      	ldr	r3, [pc, #256]	; (2000035c <main+0x1c4>)
2000025a:	681a      	ldr	r2, [r3, #0]
2000025c:	4b40      	ldr	r3, [pc, #256]	; (20000360 <main+0x1c8>)
2000025e:	681b      	ldr	r3, [r3, #0]
20000260:	f001 f816 	bl	20001290 <load_image>
	castleObj.xPos = 1;
20000264:	2364      	movs	r3, #100	; 0x64
20000266:	18fb      	adds	r3, r7, r3
20000268:	2201      	movs	r2, #1
2000026a:	605a      	str	r2, [r3, #4]
	castleObj.yPos = 1;
2000026c:	2364      	movs	r3, #100	; 0x64
2000026e:	18fb      	adds	r3, r7, r3
20000270:	2201      	movs	r2, #1
20000272:	609a      	str	r2, [r3, #8]
	castleObj.current_frame = 0;
20000274:	2364      	movs	r3, #100	; 0x64
20000276:	18fb      	adds	r3, r7, r3
20000278:	2200      	movs	r2, #0
2000027a:	615a      	str	r2, [r3, #20]
	
	GameObject fire2;
	init_fire( &fire2 );
2000027c:	2328      	movs	r3, #40	; 0x28
2000027e:	18fb      	adds	r3, r7, r3
20000280:	0018      	movs	r0, r3
20000282:	f001 f8db 	bl	2000143c <init_fire>
	GameObject fire3;
	init_fire( &fire3 );
20000286:	1d3b      	adds	r3, r7, #4
20000288:	0018      	movs	r0, r3
2000028a:	f001 f8d7 	bl	2000143c <init_fire>
	fire2.xPos = 94;
2000028e:	2328      	movs	r3, #40	; 0x28
20000290:	18fb      	adds	r3, r7, r3
20000292:	225e      	movs	r2, #94	; 0x5e
20000294:	605a      	str	r2, [r3, #4]
	fire2.yPos = 64-12;
20000296:	2328      	movs	r3, #40	; 0x28
20000298:	18fb      	adds	r3, r7, r3
2000029a:	2234      	movs	r2, #52	; 0x34
2000029c:	609a      	str	r2, [r3, #8]
	fire3.xPos = 94+13;
2000029e:	1d3b      	adds	r3, r7, #4
200002a0:	226b      	movs	r2, #107	; 0x6b
200002a2:	605a      	str	r2, [r3, #4]
	fire3.yPos = 64-12;
200002a4:	1d3b      	adds	r3, r7, #4
200002a6:	2234      	movs	r2, #52	; 0x34
200002a8:	609a      	str	r2, [r3, #8]
	//draw_game_object(&castleObj);
	
	fire2.animation_speed = 2;
200002aa:	2328      	movs	r3, #40	; 0x28
200002ac:	18fb      	adds	r3, r7, r3
200002ae:	2202      	movs	r2, #2
200002b0:	61da      	str	r2, [r3, #28]
	fire3.animation_speed = 2;
200002b2:	1d3b      	adds	r3, r7, #4
200002b4:	2202      	movs	r2, #2
200002b6:	61da      	str	r2, [r3, #28]
	
	fire2.update = gameObjectUpdate;
200002b8:	2328      	movs	r3, #40	; 0x28
200002ba:	18fb      	adds	r3, r7, r3
200002bc:	4a29      	ldr	r2, [pc, #164]	; (20000364 <main+0x1cc>)
200002be:	60da      	str	r2, [r3, #12]
	fire3.update = gameObjectUpdate;
200002c0:	1d3b      	adds	r3, r7, #4
200002c2:	4a28      	ldr	r2, [pc, #160]	; (20000364 <main+0x1cc>)
200002c4:	60da      	str	r2, [r3, #12]
	
	while(1) {
		counter++;
200002c6:	4b28      	ldr	r3, [pc, #160]	; (20000368 <main+0x1d0>)
200002c8:	681b      	ldr	r3, [r3, #0]
200002ca:	1c5a      	adds	r2, r3, #1
200002cc:	4b26      	ldr	r3, [pc, #152]	; (20000368 <main+0x1d0>)
200002ce:	601a      	str	r2, [r3, #0]
		if(titleObj.yPos < 1) {
200002d0:	23a0      	movs	r3, #160	; 0xa0
200002d2:	18fb      	adds	r3, r7, r3
200002d4:	689b      	ldr	r3, [r3, #8]
200002d6:	2b00      	cmp	r3, #0
200002d8:	dc06      	bgt.n	200002e8 <main+0x150>
			titleObj.yPos++;
200002da:	23a0      	movs	r3, #160	; 0xa0
200002dc:	18fb      	adds	r3, r7, r3
200002de:	689b      	ldr	r3, [r3, #8]
200002e0:	1c5a      	adds	r2, r3, #1
200002e2:	23a0      	movs	r3, #160	; 0xa0
200002e4:	18fb      	adds	r3, r7, r3
200002e6:	609a      	str	r2, [r3, #8]
		}
		
		draw_game_object(&castleObj);
200002e8:	2364      	movs	r3, #100	; 0x64
200002ea:	18fb      	adds	r3, r7, r3
200002ec:	0018      	movs	r0, r3
200002ee:	f000 fefd 	bl	200010ec <draw_game_object>
		draw_game_object(&fire2);
200002f2:	2328      	movs	r3, #40	; 0x28
200002f4:	18fb      	adds	r3, r7, r3
200002f6:	0018      	movs	r0, r3
200002f8:	f000 fef8 	bl	200010ec <draw_game_object>
		draw_game_object(&fire3);
200002fc:	1d3b      	adds	r3, r7, #4
200002fe:	0018      	movs	r0, r3
20000300:	f000 fef4 	bl	200010ec <draw_game_object>
		//draw_game_object(&monsterObj);
		draw_game_object(&titleObj);
20000304:	23a0      	movs	r3, #160	; 0xa0
20000306:	18fb      	adds	r3, r7, r3
20000308:	0018      	movs	r0, r3
2000030a:	f000 feef 	bl	200010ec <draw_game_object>
		show_frame(1);
2000030e:	2001      	movs	r0, #1
20000310:	f000 ff2d 	bl	2000116e <show_frame>
		
		fire2.update(&fire2);
20000314:	2328      	movs	r3, #40	; 0x28
20000316:	18fb      	adds	r3, r7, r3
20000318:	68db      	ldr	r3, [r3, #12]
2000031a:	2228      	movs	r2, #40	; 0x28
2000031c:	18ba      	adds	r2, r7, r2
2000031e:	0010      	movs	r0, r2
20000320:	4798      	blx	r3
		fire3.update(&fire3);
20000322:	1d3b      	adds	r3, r7, #4
20000324:	68db      	ldr	r3, [r3, #12]
20000326:	1d3a      	adds	r2, r7, #4
20000328:	0010      	movs	r0, r2
2000032a:	4798      	blx	r3
		
		monsterObj.update(&monsterObj);
2000032c:	23dc      	movs	r3, #220	; 0xdc
2000032e:	18fb      	adds	r3, r7, r3
20000330:	68db      	ldr	r3, [r3, #12]
20000332:	22dc      	movs	r2, #220	; 0xdc
20000334:	18ba      	adds	r2, r7, r2
20000336:	0010      	movs	r0, r2
20000338:	4798      	blx	r3
		counter++;
2000033a:	e7c4      	b.n	200002c6 <main+0x12e>
2000033c:	20001824 	andcs	r1, r0, r4, lsr #16
20000340:	200018b0 			; <UNDEFINED> instruction: 0x200018b0
20000344:	200018a4 	andcs	r1, r0, r4, lsr #17
20000348:	20001561 	andcs	r1, r0, r1, ror #10
2000034c:	200018c0 	andcs	r1, r0, r0, asr #17
20000350:	20001894 	mulcs	r0, r4, r8
20000354:	200018a8 	andcs	r1, r0, r8, lsr #17
20000358:	20001840 	andcs	r1, r0, r0, asr #16
2000035c:	200018ac 	andcs	r1, r0, ip, lsr #17
20000360:	20001878 	andcs	r1, r0, r8, ror r8
20000364:	200011e9 	andcs	r1, r0, r9, ror #3
20000368:	20001810 	andcs	r1, r0, r0, lsl r8

2000036c <load_sprite>:
#include "sprite.h"

void load_sprite(sprite* s, unsigned char* data, int width, int height)
{
2000036c:	b580      	push	{r7, lr}
2000036e:	b084      	sub	sp, #16
20000370:	af00      	add	r7, sp, #0
20000372:	60f8      	str	r0, [r7, #12]
20000374:	60b9      	str	r1, [r7, #8]
20000376:	607a      	str	r2, [r7, #4]
20000378:	603b      	str	r3, [r7, #0]
	s->width = width;
2000037a:	687a      	ldr	r2, [r7, #4]
2000037c:	68fb      	ldr	r3, [r7, #12]
2000037e:	601a      	str	r2, [r3, #0]
	s->height = height;
20000380:	683a      	ldr	r2, [r7, #0]
20000382:	68fb      	ldr	r3, [r7, #12]
20000384:	605a      	str	r2, [r3, #4]
	s->data = data;
20000386:	68fb      	ldr	r3, [r7, #12]
20000388:	68ba      	ldr	r2, [r7, #8]
2000038a:	609a      	str	r2, [r3, #8]
}
2000038c:	46c0      	nop			; (mov r8, r8)
2000038e:	46bd      	mov	sp, r7
20000390:	b004      	add	sp, #16
20000392:	bd80      	pop	{r7, pc}

20000394 <delay_250ns>:
#include "graphics.h"


void delay_250ns(void){
20000394:	b580      	push	{r7, lr}
20000396:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
20000398:	4b0c      	ldr	r3, [pc, #48]	; (200003cc <delay_250ns+0x38>)
2000039a:	2200      	movs	r2, #0
2000039c:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/4) -1);
2000039e:	4b0c      	ldr	r3, [pc, #48]	; (200003d0 <delay_250ns+0x3c>)
200003a0:	2229      	movs	r2, #41	; 0x29
200003a2:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
200003a4:	4b0b      	ldr	r3, [pc, #44]	; (200003d4 <delay_250ns+0x40>)
200003a6:	2200      	movs	r2, #0
200003a8:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
200003aa:	4b08      	ldr	r3, [pc, #32]	; (200003cc <delay_250ns+0x38>)
200003ac:	2205      	movs	r2, #5
200003ae:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
200003b0:	46c0      	nop			; (mov r8, r8)
200003b2:	4b06      	ldr	r3, [pc, #24]	; (200003cc <delay_250ns+0x38>)
200003b4:	681a      	ldr	r2, [r3, #0]
200003b6:	2380      	movs	r3, #128	; 0x80
200003b8:	025b      	lsls	r3, r3, #9
200003ba:	4013      	ands	r3, r2
200003bc:	d0f9      	beq.n	200003b2 <delay_250ns+0x1e>
	*STK_CTRL = 0;
200003be:	4b03      	ldr	r3, [pc, #12]	; (200003cc <delay_250ns+0x38>)
200003c0:	2200      	movs	r2, #0
200003c2:	601a      	str	r2, [r3, #0]
}
200003c4:	46c0      	nop			; (mov r8, r8)
200003c6:	46bd      	mov	sp, r7
200003c8:	bd80      	pop	{r7, pc}
200003ca:	46c0      	nop			; (mov r8, r8)
200003cc:	e000e010 	and	lr, r0, r0, lsl r0
200003d0:	e000e014 	and	lr, r0, r4, lsl r0
200003d4:	e000e018 	and	lr, r0, r8, lsl r0

200003d8 <delay_500ns>:

void delay_500ns(void){
200003d8:	b580      	push	{r7, lr}
200003da:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
200003dc:	4b0c      	ldr	r3, [pc, #48]	; (20000410 <delay_500ns+0x38>)
200003de:	2200      	movs	r2, #0
200003e0:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/2) -1);
200003e2:	4b0c      	ldr	r3, [pc, #48]	; (20000414 <delay_500ns+0x3c>)
200003e4:	2253      	movs	r2, #83	; 0x53
200003e6:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
200003e8:	4b0b      	ldr	r3, [pc, #44]	; (20000418 <delay_500ns+0x40>)
200003ea:	2200      	movs	r2, #0
200003ec:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
200003ee:	4b08      	ldr	r3, [pc, #32]	; (20000410 <delay_500ns+0x38>)
200003f0:	2205      	movs	r2, #5
200003f2:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
200003f4:	46c0      	nop			; (mov r8, r8)
200003f6:	4b06      	ldr	r3, [pc, #24]	; (20000410 <delay_500ns+0x38>)
200003f8:	681a      	ldr	r2, [r3, #0]
200003fa:	2380      	movs	r3, #128	; 0x80
200003fc:	025b      	lsls	r3, r3, #9
200003fe:	4013      	ands	r3, r2
20000400:	d0f9      	beq.n	200003f6 <delay_500ns+0x1e>
	*STK_CTRL = 0;
20000402:	4b03      	ldr	r3, [pc, #12]	; (20000410 <delay_500ns+0x38>)
20000404:	2200      	movs	r2, #0
20000406:	601a      	str	r2, [r3, #0]
}
20000408:	46c0      	nop			; (mov r8, r8)
2000040a:	46bd      	mov	sp, r7
2000040c:	bd80      	pop	{r7, pc}
2000040e:	46c0      	nop			; (mov r8, r8)
20000410:	e000e010 	and	lr, r0, r0, lsl r0
20000414:	e000e014 	and	lr, r0, r4, lsl r0
20000418:	e000e018 	and	lr, r0, r8, lsl r0

2000041c <delay_micro>:

void delay_micro(unsigned int us){
2000041c:	b580      	push	{r7, lr}
2000041e:	b082      	sub	sp, #8
20000420:	af00      	add	r7, sp, #0
20000422:	6078      	str	r0, [r7, #4]
	while(us--) {
20000424:	e007      	b.n	20000436 <delay_micro+0x1a>
		delay_250ns();
20000426:	f7ff ffb5 	bl	20000394 <delay_250ns>
		delay_250ns();
2000042a:	f7ff ffb3 	bl	20000394 <delay_250ns>
		delay_250ns();
2000042e:	f7ff ffb1 	bl	20000394 <delay_250ns>
		delay_250ns();
20000432:	f7ff ffaf 	bl	20000394 <delay_250ns>
	while(us--) {
20000436:	687b      	ldr	r3, [r7, #4]
20000438:	1e5a      	subs	r2, r3, #1
2000043a:	607a      	str	r2, [r7, #4]
2000043c:	2b00      	cmp	r3, #0
2000043e:	d1f2      	bne.n	20000426 <delay_micro+0xa>
	}
}
20000440:	46c0      	nop			; (mov r8, r8)
20000442:	46bd      	mov	sp, r7
20000444:	b002      	add	sp, #8
20000446:	bd80      	pop	{r7, pc}

20000448 <delay_milli>:

void delay_milli(unsigned int ms){
20000448:	b580      	push	{r7, lr}
2000044a:	b082      	sub	sp, #8
2000044c:	af00      	add	r7, sp, #0
2000044e:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		while(ms--)
			delay_micro(1);
	#else
		while(ms--)
20000450:	e004      	b.n	2000045c <delay_milli+0x14>
			delay_micro(1000);
20000452:	23fa      	movs	r3, #250	; 0xfa
20000454:	009b      	lsls	r3, r3, #2
20000456:	0018      	movs	r0, r3
20000458:	f7ff ffe0 	bl	2000041c <delay_micro>
		while(ms--)
2000045c:	687b      	ldr	r3, [r7, #4]
2000045e:	1e5a      	subs	r2, r3, #1
20000460:	607a      	str	r2, [r7, #4]
20000462:	2b00      	cmp	r3, #0
20000464:	d1f5      	bne.n	20000452 <delay_milli+0xa>
	#endif
}
20000466:	46c0      	nop			; (mov r8, r8)
20000468:	46bd      	mov	sp, r7
2000046a:	b002      	add	sp, #8
2000046c:	bd80      	pop	{r7, pc}

2000046e <clear_thisBackBuffer>:
uint8_t draw_buffer_black_light[1024]; // 128 * 64 / 8
uint8_t draw_buffer_black_gray_light[1024]; // 128 * 64 / 8
uint8_t backBuffer[1024]; // 128 * 64 / 8
uint8_t backBufferGray[1024]; // 128 * 64 / 8
uint8_t backBufferLight[1024]; // 128 * 64 / 8
void clear_thisBackBuffer(uint8_t *buffer) {
2000046e:	b580      	push	{r7, lr}
20000470:	b084      	sub	sp, #16
20000472:	af00      	add	r7, sp, #0
20000474:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < 1024; i++)
20000476:	2300      	movs	r3, #0
20000478:	60fb      	str	r3, [r7, #12]
2000047a:	e007      	b.n	2000048c <clear_thisBackBuffer+0x1e>
		buffer[i] = 0;
2000047c:	68fb      	ldr	r3, [r7, #12]
2000047e:	687a      	ldr	r2, [r7, #4]
20000480:	18d3      	adds	r3, r2, r3
20000482:	2200      	movs	r2, #0
20000484:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 1024; i++)
20000486:	68fb      	ldr	r3, [r7, #12]
20000488:	3301      	adds	r3, #1
2000048a:	60fb      	str	r3, [r7, #12]
2000048c:	68fb      	ldr	r3, [r7, #12]
2000048e:	4a03      	ldr	r2, [pc, #12]	; (2000049c <clear_thisBackBuffer+0x2e>)
20000490:	4293      	cmp	r3, r2
20000492:	ddf3      	ble.n	2000047c <clear_thisBackBuffer+0xe>
}
20000494:	46c0      	nop			; (mov r8, r8)
20000496:	46bd      	mov	sp, r7
20000498:	b004      	add	sp, #16
2000049a:	bd80      	pop	{r7, pc}
2000049c:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

200004a0 <clear_backBuffer>:
void clear_backBuffer() {
200004a0:	b580      	push	{r7, lr}
200004a2:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
200004a4:	4b03      	ldr	r3, [pc, #12]	; (200004b4 <clear_backBuffer+0x14>)
200004a6:	0018      	movs	r0, r3
200004a8:	f7ff ffe1 	bl	2000046e <clear_thisBackBuffer>
}
200004ac:	46c0      	nop			; (mov r8, r8)
200004ae:	46bd      	mov	sp, r7
200004b0:	bd80      	pop	{r7, pc}
200004b2:	46c0      	nop			; (mov r8, r8)
200004b4:	200020c4 	andcs	r2, r0, r4, asr #1

200004b8 <clear_all_backBuffers>:
void clear_all_backBuffers() {
200004b8:	b580      	push	{r7, lr}
200004ba:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
200004bc:	4b07      	ldr	r3, [pc, #28]	; (200004dc <clear_all_backBuffers+0x24>)
200004be:	0018      	movs	r0, r3
200004c0:	f7ff ffd5 	bl	2000046e <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferGray);
200004c4:	4b06      	ldr	r3, [pc, #24]	; (200004e0 <clear_all_backBuffers+0x28>)
200004c6:	0018      	movs	r0, r3
200004c8:	f7ff ffd1 	bl	2000046e <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferLight);
200004cc:	4b05      	ldr	r3, [pc, #20]	; (200004e4 <clear_all_backBuffers+0x2c>)
200004ce:	0018      	movs	r0, r3
200004d0:	f7ff ffcd 	bl	2000046e <clear_thisBackBuffer>
}
200004d4:	46c0      	nop			; (mov r8, r8)
200004d6:	46bd      	mov	sp, r7
200004d8:	bd80      	pop	{r7, pc}
200004da:	46c0      	nop			; (mov r8, r8)
200004dc:	200020c4 	andcs	r2, r0, r4, asr #1
200004e0:	200018c4 	andcs	r1, r0, r4, asr #17
200004e4:	200030c4 	andcs	r3, r0, r4, asr #1

200004e8 <graphic_ctrl_bit_set>:

/* välj grafik-display och ettställ de bitar som är 1 i x */
static void graphic_ctrl_bit_set( uint8_t x) {
200004e8:	b580      	push	{r7, lr}
200004ea:	b084      	sub	sp, #16
200004ec:	af00      	add	r7, sp, #0
200004ee:	0002      	movs	r2, r0
200004f0:	1dfb      	adds	r3, r7, #7
200004f2:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
200004f4:	4a0f      	ldr	r2, [pc, #60]	; (20000534 <graphic_ctrl_bit_set+0x4c>)
200004f6:	230f      	movs	r3, #15
200004f8:	18fb      	adds	r3, r7, r3
200004fa:	7812      	ldrb	r2, [r2, #0]
200004fc:	701a      	strb	r2, [r3, #0]
	c |= x;
200004fe:	230f      	movs	r3, #15
20000500:	18fb      	adds	r3, r7, r3
20000502:	220f      	movs	r2, #15
20000504:	18b9      	adds	r1, r7, r2
20000506:	1dfa      	adds	r2, r7, #7
20000508:	7809      	ldrb	r1, [r1, #0]
2000050a:	7812      	ldrb	r2, [r2, #0]
2000050c:	430a      	orrs	r2, r1
2000050e:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
20000510:	230f      	movs	r3, #15
20000512:	18fb      	adds	r3, r7, r3
20000514:	220f      	movs	r2, #15
20000516:	18ba      	adds	r2, r7, r2
20000518:	7812      	ldrb	r2, [r2, #0]
2000051a:	2104      	movs	r1, #4
2000051c:	438a      	bics	r2, r1
2000051e:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20000520:	4a04      	ldr	r2, [pc, #16]	; (20000534 <graphic_ctrl_bit_set+0x4c>)
20000522:	230f      	movs	r3, #15
20000524:	18fb      	adds	r3, r7, r3
20000526:	781b      	ldrb	r3, [r3, #0]
20000528:	7013      	strb	r3, [r2, #0]
}
2000052a:	46c0      	nop			; (mov r8, r8)
2000052c:	46bd      	mov	sp, r7
2000052e:	b004      	add	sp, #16
20000530:	bd80      	pop	{r7, pc}
20000532:	46c0      	nop			; (mov r8, r8)
20000534:	40021014 	andmi	r1, r2, r4, lsl r0

20000538 <graphic_ctrl_bit_clear>:
/* välj grafik-display och nollställ de bitar som är 1 i x */
static void graphic_ctrl_bit_clear( uint8_t x) {
20000538:	b580      	push	{r7, lr}
2000053a:	b084      	sub	sp, #16
2000053c:	af00      	add	r7, sp, #0
2000053e:	0002      	movs	r2, r0
20000540:	1dfb      	adds	r3, r7, #7
20000542:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
20000544:	4a11      	ldr	r2, [pc, #68]	; (2000058c <graphic_ctrl_bit_clear+0x54>)
20000546:	230f      	movs	r3, #15
20000548:	18fb      	adds	r3, r7, r3
2000054a:	7812      	ldrb	r2, [r2, #0]
2000054c:	701a      	strb	r2, [r3, #0]
	c &= ~x;
2000054e:	1dfb      	adds	r3, r7, #7
20000550:	781b      	ldrb	r3, [r3, #0]
20000552:	b25b      	sxtb	r3, r3
20000554:	43db      	mvns	r3, r3
20000556:	b25b      	sxtb	r3, r3
20000558:	220f      	movs	r2, #15
2000055a:	18ba      	adds	r2, r7, r2
2000055c:	7812      	ldrb	r2, [r2, #0]
2000055e:	b252      	sxtb	r2, r2
20000560:	4013      	ands	r3, r2
20000562:	b25a      	sxtb	r2, r3
20000564:	230f      	movs	r3, #15
20000566:	18fb      	adds	r3, r7, r3
20000568:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
2000056a:	230f      	movs	r3, #15
2000056c:	18fb      	adds	r3, r7, r3
2000056e:	220f      	movs	r2, #15
20000570:	18ba      	adds	r2, r7, r2
20000572:	7812      	ldrb	r2, [r2, #0]
20000574:	2104      	movs	r1, #4
20000576:	438a      	bics	r2, r1
20000578:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
2000057a:	4a04      	ldr	r2, [pc, #16]	; (2000058c <graphic_ctrl_bit_clear+0x54>)
2000057c:	230f      	movs	r3, #15
2000057e:	18fb      	adds	r3, r7, r3
20000580:	781b      	ldrb	r3, [r3, #0]
20000582:	7013      	strb	r3, [r2, #0]
}
20000584:	46c0      	nop			; (mov r8, r8)
20000586:	46bd      	mov	sp, r7
20000588:	b004      	add	sp, #16
2000058a:	bd80      	pop	{r7, pc}
2000058c:	40021014 	andmi	r1, r2, r4, lsl r0

20000590 <select_controller>:
void select_controller( uint8_t controller) {
20000590:	b580      	push	{r7, lr}
20000592:	b082      	sub	sp, #8
20000594:	af00      	add	r7, sp, #0
20000596:	0002      	movs	r2, r0
20000598:	1dfb      	adds	r3, r7, #7
2000059a:	701a      	strb	r2, [r3, #0]
	switch (controller) {
2000059c:	1dfb      	adds	r3, r7, #7
2000059e:	781b      	ldrb	r3, [r3, #0]
200005a0:	2b08      	cmp	r3, #8
200005a2:	d00f      	beq.n	200005c4 <select_controller+0x34>
200005a4:	dc02      	bgt.n	200005ac <select_controller+0x1c>
200005a6:	2b00      	cmp	r3, #0
200005a8:	d005      	beq.n	200005b6 <select_controller+0x26>
		case (B_CS1|B_CS2): 
			graphic_ctrl_bit_set(B_CS1); 
			graphic_ctrl_bit_set(B_CS2); 
			break;
	}
}
200005aa:	e020      	b.n	200005ee <select_controller+0x5e>
	switch (controller) {
200005ac:	2b10      	cmp	r3, #16
200005ae:	d010      	beq.n	200005d2 <select_controller+0x42>
200005b0:	2b18      	cmp	r3, #24
200005b2:	d015      	beq.n	200005e0 <select_controller+0x50>
}
200005b4:	e01b      	b.n	200005ee <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
200005b6:	2008      	movs	r0, #8
200005b8:	f7ff ffbe 	bl	20000538 <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_clear(B_CS2); 
200005bc:	2010      	movs	r0, #16
200005be:	f7ff ffbb 	bl	20000538 <graphic_ctrl_bit_clear>
			break;
200005c2:	e014      	b.n	200005ee <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
200005c4:	2008      	movs	r0, #8
200005c6:	f7ff ff8f 	bl	200004e8 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS2); 
200005ca:	2010      	movs	r0, #16
200005cc:	f7ff ffb4 	bl	20000538 <graphic_ctrl_bit_clear>
			break;
200005d0:	e00d      	b.n	200005ee <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
200005d2:	2008      	movs	r0, #8
200005d4:	f7ff ffb0 	bl	20000538 <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_set(B_CS2); 
200005d8:	2010      	movs	r0, #16
200005da:	f7ff ff85 	bl	200004e8 <graphic_ctrl_bit_set>
			break;
200005de:	e006      	b.n	200005ee <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
200005e0:	2008      	movs	r0, #8
200005e2:	f7ff ff81 	bl	200004e8 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_set(B_CS2); 
200005e6:	2010      	movs	r0, #16
200005e8:	f7ff ff7e 	bl	200004e8 <graphic_ctrl_bit_set>
			break;
200005ec:	46c0      	nop			; (mov r8, r8)
}
200005ee:	46c0      	nop			; (mov r8, r8)
200005f0:	46bd      	mov	sp, r7
200005f2:	b002      	add	sp, #8
200005f4:	bd80      	pop	{r7, pc}

200005f6 <graphic_wait_ready>:

void graphic_wait_ready( void ) {
200005f6:	b580      	push	{r7, lr}
200005f8:	b082      	sub	sp, #8
200005fa:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
200005fc:	2040      	movs	r0, #64	; 0x40
200005fe:	f7ff ff9b 	bl	20000538 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
20000602:	4b14      	ldr	r3, [pc, #80]	; (20000654 <graphic_wait_ready+0x5e>)
20000604:	4a14      	ldr	r2, [pc, #80]	; (20000658 <graphic_wait_ready+0x62>)
20000606:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
20000608:	2001      	movs	r0, #1
2000060a:	f7ff ff95 	bl	20000538 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
2000060e:	2002      	movs	r0, #2
20000610:	f7ff ff6a 	bl	200004e8 <graphic_ctrl_bit_set>
	delay_500ns();
20000614:	f7ff fee0 	bl	200003d8 <delay_500ns>
	
	while(1) {
		graphic_ctrl_bit_set(B_E);
20000618:	2040      	movs	r0, #64	; 0x40
2000061a:	f7ff ff65 	bl	200004e8 <graphic_ctrl_bit_set>
		delay_500ns();
2000061e:	f7ff fedb 	bl	200003d8 <delay_500ns>
		c = *portIdrHigh & LCD_BUSY; //...
20000622:	4b0e      	ldr	r3, [pc, #56]	; (2000065c <graphic_wait_ready+0x66>)
20000624:	781b      	ldrb	r3, [r3, #0]
20000626:	b2da      	uxtb	r2, r3
20000628:	1dfb      	adds	r3, r7, #7
2000062a:	217f      	movs	r1, #127	; 0x7f
2000062c:	438a      	bics	r2, r1
2000062e:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
20000630:	2040      	movs	r0, #64	; 0x40
20000632:	f7ff ff81 	bl	20000538 <graphic_ctrl_bit_clear>
		delay_500ns();
20000636:	f7ff fecf 	bl	200003d8 <delay_500ns>
		/*if (*portIdrHigh & 0x80 == 0x80) {
			break; }*/
		if (c == 0) break;
2000063a:	1dfb      	adds	r3, r7, #7
2000063c:	781b      	ldrb	r3, [r3, #0]
2000063e:	2b00      	cmp	r3, #0
20000640:	d000      	beq.n	20000644 <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
20000642:	e7e9      	b.n	20000618 <graphic_wait_ready+0x22>
		if (c == 0) break;
20000644:	46c0      	nop			; (mov r8, r8)
	}
	//graphic_ctrl_bit_set(B_E); //<--
	*portModer = 0x55555555;	
20000646:	4b03      	ldr	r3, [pc, #12]	; (20000654 <graphic_wait_ready+0x5e>)
20000648:	4a05      	ldr	r2, [pc, #20]	; (20000660 <graphic_wait_ready+0x6a>)
2000064a:	601a      	str	r2, [r3, #0]
}
2000064c:	46c0      	nop			; (mov r8, r8)
2000064e:	46bd      	mov	sp, r7
20000650:	b002      	add	sp, #8
20000652:	bd80      	pop	{r7, pc}
20000654:	40021000 	andmi	r1, r2, r0
20000658:	00005555 	andeq	r5, r0, r5, asr r5
2000065c:	40021011 	andmi	r1, r2, r1, lsl r0
20000660:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000664 <graphic_read>:

static uint8_t graphic_read(uint8_t controller) {
20000664:	b580      	push	{r7, lr}
20000666:	b084      	sub	sp, #16
20000668:	af00      	add	r7, sp, #0
2000066a:	0002      	movs	r2, r0
2000066c:	1dfb      	adds	r3, r7, #7
2000066e:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000670:	2040      	movs	r0, #64	; 0x40
20000672:	f7ff ff61 	bl	20000538 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
20000676:	4b1c      	ldr	r3, [pc, #112]	; (200006e8 <graphic_read+0x84>)
20000678:	4a1c      	ldr	r2, [pc, #112]	; (200006ec <graphic_read+0x88>)
2000067a:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS);
2000067c:	2001      	movs	r0, #1
2000067e:	f7ff ff33 	bl	200004e8 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_set(B_RW);
20000682:	2002      	movs	r0, #2
20000684:	f7ff ff30 	bl	200004e8 <graphic_ctrl_bit_set>
	select_controller(controller);
20000688:	1dfb      	adds	r3, r7, #7
2000068a:	781b      	ldrb	r3, [r3, #0]
2000068c:	0018      	movs	r0, r3
2000068e:	f7ff ff7f 	bl	20000590 <select_controller>
	delay_500ns();
20000692:	f7ff fea1 	bl	200003d8 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000696:	2040      	movs	r0, #64	; 0x40
20000698:	f7ff ff26 	bl	200004e8 <graphic_ctrl_bit_set>
	delay_500ns();
2000069c:	f7ff fe9c 	bl	200003d8 <delay_500ns>
	unsigned char rv = *portIdrHigh;
200006a0:	4a13      	ldr	r2, [pc, #76]	; (200006f0 <graphic_read+0x8c>)
200006a2:	230f      	movs	r3, #15
200006a4:	18fb      	adds	r3, r7, r3
200006a6:	7812      	ldrb	r2, [r2, #0]
200006a8:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200006aa:	2040      	movs	r0, #64	; 0x40
200006ac:	f7ff ff44 	bl	20000538 <graphic_ctrl_bit_clear>
	*portModer = 0x55555555;
200006b0:	4b0d      	ldr	r3, [pc, #52]	; (200006e8 <graphic_read+0x84>)
200006b2:	4a10      	ldr	r2, [pc, #64]	; (200006f4 <graphic_read+0x90>)
200006b4:	601a      	str	r2, [r3, #0]
	
	if(controller == B_CS1) {
200006b6:	1dfb      	adds	r3, r7, #7
200006b8:	781b      	ldrb	r3, [r3, #0]
200006ba:	2b08      	cmp	r3, #8
200006bc:	d104      	bne.n	200006c8 <graphic_read+0x64>
		select_controller(B_CS1);
200006be:	2008      	movs	r0, #8
200006c0:	f7ff ff66 	bl	20000590 <select_controller>
		graphic_wait_ready();
200006c4:	f7ff ff97 	bl	200005f6 <graphic_wait_ready>
	}
	if(controller == B_CS2) {
200006c8:	1dfb      	adds	r3, r7, #7
200006ca:	781b      	ldrb	r3, [r3, #0]
200006cc:	2b10      	cmp	r3, #16
200006ce:	d104      	bne.n	200006da <graphic_read+0x76>
		select_controller(B_CS2);
200006d0:	2010      	movs	r0, #16
200006d2:	f7ff ff5d 	bl	20000590 <select_controller>
		graphic_wait_ready();
200006d6:	f7ff ff8e 	bl	200005f6 <graphic_wait_ready>
	}
	
	return rv;
200006da:	230f      	movs	r3, #15
200006dc:	18fb      	adds	r3, r7, r3
200006de:	781b      	ldrb	r3, [r3, #0]
}
200006e0:	0018      	movs	r0, r3
200006e2:	46bd      	mov	sp, r7
200006e4:	b004      	add	sp, #16
200006e6:	bd80      	pop	{r7, pc}
200006e8:	40021000 	andmi	r1, r2, r0
200006ec:	00005555 	andeq	r5, r0, r5, asr r5
200006f0:	40021011 	andmi	r1, r2, r1, lsl r0
200006f4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200006f8 <graphic_read_data>:

graphic_read_data(uint8_t controller) {
200006f8:	b580      	push	{r7, lr}
200006fa:	b082      	sub	sp, #8
200006fc:	af00      	add	r7, sp, #0
200006fe:	0002      	movs	r2, r0
20000700:	1dfb      	adds	r3, r7, #7
20000702:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
20000704:	1dfb      	adds	r3, r7, #7
20000706:	781b      	ldrb	r3, [r3, #0]
20000708:	0018      	movs	r0, r3
2000070a:	f7ff ffab 	bl	20000664 <graphic_read>
	graphic_read(controller);
2000070e:	1dfb      	adds	r3, r7, #7
20000710:	781b      	ldrb	r3, [r3, #0]
20000712:	0018      	movs	r0, r3
20000714:	f7ff ffa6 	bl	20000664 <graphic_read>
}
20000718:	46c0      	nop			; (mov r8, r8)
2000071a:	0018      	movs	r0, r3
2000071c:	46bd      	mov	sp, r7
2000071e:	b002      	add	sp, #8
20000720:	bd80      	pop	{r7, pc}

20000722 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller) {
20000722:	b580      	push	{r7, lr}
20000724:	b082      	sub	sp, #8
20000726:	af00      	add	r7, sp, #0
20000728:	0002      	movs	r2, r0
2000072a:	1dfb      	adds	r3, r7, #7
2000072c:	701a      	strb	r2, [r3, #0]
2000072e:	1dbb      	adds	r3, r7, #6
20000730:	1c0a      	adds	r2, r1, #0
20000732:	701a      	strb	r2, [r3, #0]
	*portOdrHigh = value; //I
20000734:	4a19      	ldr	r2, [pc, #100]	; (2000079c <graphic_write+0x7a>)
20000736:	1dfb      	adds	r3, r7, #7
20000738:	781b      	ldrb	r3, [r3, #0]
2000073a:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
2000073c:	1dbb      	adds	r3, r7, #6
2000073e:	781b      	ldrb	r3, [r3, #0]
20000740:	0018      	movs	r0, r3
20000742:	f7ff ff25 	bl	20000590 <select_controller>
	delay_500ns();
20000746:	f7ff fe47 	bl	200003d8 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
2000074a:	2040      	movs	r0, #64	; 0x40
2000074c:	f7ff fecc 	bl	200004e8 <graphic_ctrl_bit_set>
	delay_500ns();
20000750:	f7ff fe42 	bl	200003d8 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
20000754:	2040      	movs	r0, #64	; 0x40
20000756:	f7ff feef 	bl	20000538 <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1) {
2000075a:	1dbb      	adds	r3, r7, #6
2000075c:	781b      	ldrb	r3, [r3, #0]
2000075e:	2208      	movs	r2, #8
20000760:	4013      	ands	r3, r2
20000762:	d004      	beq.n	2000076e <graphic_write+0x4c>
		select_controller(B_CS1);
20000764:	2008      	movs	r0, #8
20000766:	f7ff ff13 	bl	20000590 <select_controller>
		graphic_wait_ready();
2000076a:	f7ff ff44 	bl	200005f6 <graphic_wait_ready>
	}
	if(controller & B_CS2) {
2000076e:	1dbb      	adds	r3, r7, #6
20000770:	781b      	ldrb	r3, [r3, #0]
20000772:	2210      	movs	r2, #16
20000774:	4013      	ands	r3, r2
20000776:	d004      	beq.n	20000782 <graphic_write+0x60>
		select_controller(B_CS2);
20000778:	2010      	movs	r0, #16
2000077a:	f7ff ff09 	bl	20000590 <select_controller>
		graphic_wait_ready();
2000077e:	f7ff ff3a 	bl	200005f6 <graphic_wait_ready>
	}
	
	*portOdrHigh = 0;	//I
20000782:	4b06      	ldr	r3, [pc, #24]	; (2000079c <graphic_write+0x7a>)
20000784:	2200      	movs	r2, #0
20000786:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
20000788:	2040      	movs	r0, #64	; 0x40
2000078a:	f7ff fead 	bl	200004e8 <graphic_ctrl_bit_set>
	select_controller(0);
2000078e:	2000      	movs	r0, #0
20000790:	f7ff fefe 	bl	20000590 <select_controller>
}
20000794:	46c0      	nop			; (mov r8, r8)
20000796:	46bd      	mov	sp, r7
20000798:	b002      	add	sp, #8
2000079a:	bd80      	pop	{r7, pc}
2000079c:	40021015 	andmi	r1, r2, r5, lsl r0

200007a0 <graphic_write_command>:
void graphic_write_command(uint8_t command, uint8_t controller) {
200007a0:	b580      	push	{r7, lr}
200007a2:	b082      	sub	sp, #8
200007a4:	af00      	add	r7, sp, #0
200007a6:	0002      	movs	r2, r0
200007a8:	1dfb      	adds	r3, r7, #7
200007aa:	701a      	strb	r2, [r3, #0]
200007ac:	1dbb      	adds	r3, r7, #6
200007ae:	1c0a      	adds	r2, r1, #0
200007b0:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200007b2:	2040      	movs	r0, #64	; 0x40
200007b4:	f7ff fec0 	bl	20000538 <graphic_ctrl_bit_clear>
	select_controller(controller);
200007b8:	1dbb      	adds	r3, r7, #6
200007ba:	781b      	ldrb	r3, [r3, #0]
200007bc:	0018      	movs	r0, r3
200007be:	f7ff fee7 	bl	20000590 <select_controller>
	graphic_ctrl_bit_clear(B_RS);
200007c2:	2001      	movs	r0, #1
200007c4:	f7ff feb8 	bl	20000538 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RW);
200007c8:	2002      	movs	r0, #2
200007ca:	f7ff feb5 	bl	20000538 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
200007ce:	1dbb      	adds	r3, r7, #6
200007d0:	781a      	ldrb	r2, [r3, #0]
200007d2:	1dfb      	adds	r3, r7, #7
200007d4:	781b      	ldrb	r3, [r3, #0]
200007d6:	0011      	movs	r1, r2
200007d8:	0018      	movs	r0, r3
200007da:	f7ff ffa2 	bl	20000722 <graphic_write>
}
200007de:	46c0      	nop			; (mov r8, r8)
200007e0:	46bd      	mov	sp, r7
200007e2:	b002      	add	sp, #8
200007e4:	bd80      	pop	{r7, pc}

200007e6 <graphic_write_data>:
void graphic_write_data(uint8_t command, uint8_t controller) {
200007e6:	b580      	push	{r7, lr}
200007e8:	b082      	sub	sp, #8
200007ea:	af00      	add	r7, sp, #0
200007ec:	0002      	movs	r2, r0
200007ee:	1dfb      	adds	r3, r7, #7
200007f0:	701a      	strb	r2, [r3, #0]
200007f2:	1dbb      	adds	r3, r7, #6
200007f4:	1c0a      	adds	r2, r1, #0
200007f6:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200007f8:	2040      	movs	r0, #64	; 0x40
200007fa:	f7ff fe9d 	bl	20000538 <graphic_ctrl_bit_clear>
	select_controller(controller);
200007fe:	1dbb      	adds	r3, r7, #6
20000800:	781b      	ldrb	r3, [r3, #0]
20000802:	0018      	movs	r0, r3
20000804:	f7ff fec4 	bl	20000590 <select_controller>
	graphic_ctrl_bit_set(B_RS);
20000808:	2001      	movs	r0, #1
2000080a:	f7ff fe6d 	bl	200004e8 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
2000080e:	2002      	movs	r0, #2
20000810:	f7ff fe92 	bl	20000538 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000814:	1dbb      	adds	r3, r7, #6
20000816:	781a      	ldrb	r2, [r3, #0]
20000818:	1dfb      	adds	r3, r7, #7
2000081a:	781b      	ldrb	r3, [r3, #0]
2000081c:	0011      	movs	r1, r2
2000081e:	0018      	movs	r0, r3
20000820:	f7ff ff7f 	bl	20000722 <graphic_write>
}
20000824:	46c0      	nop			; (mov r8, r8)
20000826:	46bd      	mov	sp, r7
20000828:	b002      	add	sp, #8
2000082a:	bd80      	pop	{r7, pc}

2000082c <graphic_initialize>:

void graphic_initialize( void ) {
2000082c:	b580      	push	{r7, lr}
2000082e:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20000830:	2040      	movs	r0, #64	; 0x40
20000832:	f7ff fe59 	bl	200004e8 <graphic_ctrl_bit_set>
	delay_micro(10);
20000836:	200a      	movs	r0, #10
20000838:	f7ff fdf0 	bl	2000041c <delay_micro>
	
	graphic_ctrl_bit_clear(B_CS1);
2000083c:	2008      	movs	r0, #8
2000083e:	f7ff fe7b 	bl	20000538 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_CS2);
20000842:	2010      	movs	r0, #16
20000844:	f7ff fe78 	bl	20000538 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RST);
20000848:	2020      	movs	r0, #32
2000084a:	f7ff fe75 	bl	20000538 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_E);
2000084e:	2040      	movs	r0, #64	; 0x40
20000850:	f7ff fe72 	bl	20000538 <graphic_ctrl_bit_clear>
	//#define SIMULATOR
	delay_milli(30);
20000854:	201e      	movs	r0, #30
20000856:	f7ff fdf7 	bl	20000448 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
2000085a:	2020      	movs	r0, #32
2000085c:	f7ff fe44 	bl	200004e8 <graphic_ctrl_bit_set>
	delay_milli(100); //...
20000860:	2064      	movs	r0, #100	; 0x64
20000862:	f7ff fdf1 	bl	20000448 <delay_milli>
	
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
20000866:	2118      	movs	r1, #24
20000868:	203e      	movs	r0, #62	; 0x3e
2000086a:	f7ff ff99 	bl	200007a0 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
2000086e:	2118      	movs	r1, #24
20000870:	203f      	movs	r0, #63	; 0x3f
20000872:	f7ff ff95 	bl	200007a0 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20000876:	2118      	movs	r1, #24
20000878:	20c0      	movs	r0, #192	; 0xc0
2000087a:	f7ff ff91 	bl	200007a0 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
2000087e:	2118      	movs	r1, #24
20000880:	2040      	movs	r0, #64	; 0x40
20000882:	f7ff ff8d 	bl	200007a0 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20000886:	2118      	movs	r1, #24
20000888:	20b8      	movs	r0, #184	; 0xb8
2000088a:	f7ff ff89 	bl	200007a0 <graphic_write_command>
	select_controller(0);
2000088e:	2000      	movs	r0, #0
20000890:	f7ff fe7e 	bl	20000590 <select_controller>
}
20000894:	46c0      	nop			; (mov r8, r8)
20000896:	46bd      	mov	sp, r7
20000898:	bd80      	pop	{r7, pc}

2000089a <graphic_clear_screen>:
void graphic_clear_screen( void ) {	//Annat i slidesen
2000089a:	b580      	push	{r7, lr}
2000089c:	b082      	sub	sp, #8
2000089e:	af00      	add	r7, sp, #0
	uint8_t page;
	for (page = 0; page < 8; page++) {
200008a0:	1dfb      	adds	r3, r7, #7
200008a2:	2200      	movs	r2, #0
200008a4:	701a      	strb	r2, [r3, #0]
200008a6:	e023      	b.n	200008f0 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
200008a8:	1dfb      	adds	r3, r7, #7
200008aa:	781b      	ldrb	r3, [r3, #0]
200008ac:	2248      	movs	r2, #72	; 0x48
200008ae:	4252      	negs	r2, r2
200008b0:	4313      	orrs	r3, r2
200008b2:	b2db      	uxtb	r3, r3
200008b4:	2118      	movs	r1, #24
200008b6:	0018      	movs	r0, r3
200008b8:	f7ff ff72 	bl	200007a0 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
200008bc:	2118      	movs	r1, #24
200008be:	2040      	movs	r0, #64	; 0x40
200008c0:	f7ff ff6e 	bl	200007a0 <graphic_write_command>
		uint8_t add;
		for (add = 0; add < 64; add++) {
200008c4:	1dbb      	adds	r3, r7, #6
200008c6:	2200      	movs	r2, #0
200008c8:	701a      	strb	r2, [r3, #0]
200008ca:	e008      	b.n	200008de <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1|B_CS2);
200008cc:	2118      	movs	r1, #24
200008ce:	2000      	movs	r0, #0
200008d0:	f7ff ff89 	bl	200007e6 <graphic_write_data>
		for (add = 0; add < 64; add++) {
200008d4:	1dbb      	adds	r3, r7, #6
200008d6:	781a      	ldrb	r2, [r3, #0]
200008d8:	1dbb      	adds	r3, r7, #6
200008da:	3201      	adds	r2, #1
200008dc:	701a      	strb	r2, [r3, #0]
200008de:	1dbb      	adds	r3, r7, #6
200008e0:	781b      	ldrb	r3, [r3, #0]
200008e2:	2b3f      	cmp	r3, #63	; 0x3f
200008e4:	d9f2      	bls.n	200008cc <graphic_clear_screen+0x32>
	for (page = 0; page < 8; page++) {
200008e6:	1dfb      	adds	r3, r7, #7
200008e8:	781a      	ldrb	r2, [r3, #0]
200008ea:	1dfb      	adds	r3, r7, #7
200008ec:	3201      	adds	r2, #1
200008ee:	701a      	strb	r2, [r3, #0]
200008f0:	1dfb      	adds	r3, r7, #7
200008f2:	781b      	ldrb	r3, [r3, #0]
200008f4:	2b07      	cmp	r3, #7
200008f6:	d9d7      	bls.n	200008a8 <graphic_clear_screen+0xe>
		}
	}
}
200008f8:	46c0      	nop			; (mov r8, r8)
200008fa:	46bd      	mov	sp, r7
200008fc:	b002      	add	sp, #8
200008fe:	bd80      	pop	{r7, pc}

20000900 <pixel>:

/** Color: 1=light 2=gray 3=black*/
void pixel(int x, int y, int set, int color) {
20000900:	b580      	push	{r7, lr}
20000902:	b086      	sub	sp, #24
20000904:	af00      	add	r7, sp, #0
20000906:	60f8      	str	r0, [r7, #12]
20000908:	60b9      	str	r1, [r7, #8]
2000090a:	607a      	str	r2, [r7, #4]
2000090c:	603b      	str	r3, [r7, #0]
	uint8_t mask;
	int index = 0;
2000090e:	2300      	movs	r3, #0
20000910:	613b      	str	r3, [r7, #16]
	if( (x > 128 ) || (x < 1) || (y > 64) || (y < 1) ) 
20000912:	68fb      	ldr	r3, [r7, #12]
20000914:	2b80      	cmp	r3, #128	; 0x80
20000916:	dd00      	ble.n	2000091a <pixel+0x1a>
20000918:	e0a6      	b.n	20000a68 <pixel+0x168>
2000091a:	68fb      	ldr	r3, [r7, #12]
2000091c:	2b00      	cmp	r3, #0
2000091e:	dc00      	bgt.n	20000922 <pixel+0x22>
20000920:	e0a2      	b.n	20000a68 <pixel+0x168>
20000922:	68bb      	ldr	r3, [r7, #8]
20000924:	2b40      	cmp	r3, #64	; 0x40
20000926:	dd00      	ble.n	2000092a <pixel+0x2a>
20000928:	e09e      	b.n	20000a68 <pixel+0x168>
2000092a:	68bb      	ldr	r3, [r7, #8]
2000092c:	2b00      	cmp	r3, #0
2000092e:	dc00      	bgt.n	20000932 <pixel+0x32>
20000930:	e09a      	b.n	20000a68 <pixel+0x168>
		return;
	mask = 1 << ((y-1)%8);
20000932:	68bb      	ldr	r3, [r7, #8]
20000934:	3b01      	subs	r3, #1
20000936:	4a4e      	ldr	r2, [pc, #312]	; (20000a70 <pixel+0x170>)
20000938:	4013      	ands	r3, r2
2000093a:	d504      	bpl.n	20000946 <pixel+0x46>
2000093c:	3b01      	subs	r3, #1
2000093e:	2208      	movs	r2, #8
20000940:	4252      	negs	r2, r2
20000942:	4313      	orrs	r3, r2
20000944:	3301      	adds	r3, #1
20000946:	001a      	movs	r2, r3
20000948:	2301      	movs	r3, #1
2000094a:	4093      	lsls	r3, r2
2000094c:	001a      	movs	r2, r3
2000094e:	2317      	movs	r3, #23
20000950:	18fb      	adds	r3, r7, r3
20000952:	701a      	strb	r2, [r3, #0]
	if(x > 64) {
20000954:	68fb      	ldr	r3, [r7, #12]
20000956:	2b40      	cmp	r3, #64	; 0x40
20000958:	dd05      	ble.n	20000966 <pixel+0x66>
		x -= 65;
2000095a:	68fb      	ldr	r3, [r7, #12]
2000095c:	3b41      	subs	r3, #65	; 0x41
2000095e:	60fb      	str	r3, [r7, #12]
		index = 512;
20000960:	2380      	movs	r3, #128	; 0x80
20000962:	009b      	lsls	r3, r3, #2
20000964:	613b      	str	r3, [r7, #16]
	}
	index += x + ((y-1)/8)*64;
20000966:	68bb      	ldr	r3, [r7, #8]
20000968:	3b01      	subs	r3, #1
2000096a:	2b00      	cmp	r3, #0
2000096c:	da00      	bge.n	20000970 <pixel+0x70>
2000096e:	3307      	adds	r3, #7
20000970:	10db      	asrs	r3, r3, #3
20000972:	019a      	lsls	r2, r3, #6
20000974:	68fb      	ldr	r3, [r7, #12]
20000976:	18d3      	adds	r3, r2, r3
20000978:	693a      	ldr	r2, [r7, #16]
2000097a:	18d3      	adds	r3, r2, r3
2000097c:	613b      	str	r3, [r7, #16]

	if(set == 0)
2000097e:	687b      	ldr	r3, [r7, #4]
20000980:	2b00      	cmp	r3, #0
20000982:	d106      	bne.n	20000992 <pixel+0x92>
		mask = ~mask;
20000984:	2317      	movs	r3, #23
20000986:	18fb      	adds	r3, r7, r3
20000988:	2217      	movs	r2, #23
2000098a:	18ba      	adds	r2, r7, r2
2000098c:	7812      	ldrb	r2, [r2, #0]
2000098e:	43d2      	mvns	r2, r2
20000990:	701a      	strb	r2, [r3, #0]

	switch (color) {
20000992:	683b      	ldr	r3, [r7, #0]
20000994:	2b02      	cmp	r3, #2
20000996:	d024      	beq.n	200009e2 <pixel+0xe2>
20000998:	2b03      	cmp	r3, #3
2000099a:	d043      	beq.n	20000a24 <pixel+0x124>
2000099c:	2b01      	cmp	r3, #1
2000099e:	d164      	bne.n	20000a6a <pixel+0x16a>
		case 1:	
			if(set)
200009a0:	687b      	ldr	r3, [r7, #4]
200009a2:	2b00      	cmp	r3, #0
200009a4:	d00e      	beq.n	200009c4 <pixel+0xc4>
				backBufferLight[index] |= mask;
200009a6:	4a33      	ldr	r2, [pc, #204]	; (20000a74 <pixel+0x174>)
200009a8:	693b      	ldr	r3, [r7, #16]
200009aa:	18d3      	adds	r3, r2, r3
200009ac:	781a      	ldrb	r2, [r3, #0]
200009ae:	2317      	movs	r3, #23
200009b0:	18fb      	adds	r3, r7, r3
200009b2:	781b      	ldrb	r3, [r3, #0]
200009b4:	4313      	orrs	r3, r2
200009b6:	b2d9      	uxtb	r1, r3
200009b8:	4a2e      	ldr	r2, [pc, #184]	; (20000a74 <pixel+0x174>)
200009ba:	693b      	ldr	r3, [r7, #16]
200009bc:	18d3      	adds	r3, r2, r3
200009be:	1c0a      	adds	r2, r1, #0
200009c0:	701a      	strb	r2, [r3, #0]
			else
				backBufferLight[index] &= mask;
			break;
200009c2:	e052      	b.n	20000a6a <pixel+0x16a>
				backBufferLight[index] &= mask;
200009c4:	4a2b      	ldr	r2, [pc, #172]	; (20000a74 <pixel+0x174>)
200009c6:	693b      	ldr	r3, [r7, #16]
200009c8:	18d3      	adds	r3, r2, r3
200009ca:	781b      	ldrb	r3, [r3, #0]
200009cc:	2217      	movs	r2, #23
200009ce:	18ba      	adds	r2, r7, r2
200009d0:	7812      	ldrb	r2, [r2, #0]
200009d2:	4013      	ands	r3, r2
200009d4:	b2d9      	uxtb	r1, r3
200009d6:	4a27      	ldr	r2, [pc, #156]	; (20000a74 <pixel+0x174>)
200009d8:	693b      	ldr	r3, [r7, #16]
200009da:	18d3      	adds	r3, r2, r3
200009dc:	1c0a      	adds	r2, r1, #0
200009de:	701a      	strb	r2, [r3, #0]
			break;
200009e0:	e043      	b.n	20000a6a <pixel+0x16a>
		
		case 2:	
			if(set)
200009e2:	687b      	ldr	r3, [r7, #4]
200009e4:	2b00      	cmp	r3, #0
200009e6:	d00e      	beq.n	20000a06 <pixel+0x106>
				backBufferGray[index] |= mask;
200009e8:	4a23      	ldr	r2, [pc, #140]	; (20000a78 <pixel+0x178>)
200009ea:	693b      	ldr	r3, [r7, #16]
200009ec:	18d3      	adds	r3, r2, r3
200009ee:	781a      	ldrb	r2, [r3, #0]
200009f0:	2317      	movs	r3, #23
200009f2:	18fb      	adds	r3, r7, r3
200009f4:	781b      	ldrb	r3, [r3, #0]
200009f6:	4313      	orrs	r3, r2
200009f8:	b2d9      	uxtb	r1, r3
200009fa:	4a1f      	ldr	r2, [pc, #124]	; (20000a78 <pixel+0x178>)
200009fc:	693b      	ldr	r3, [r7, #16]
200009fe:	18d3      	adds	r3, r2, r3
20000a00:	1c0a      	adds	r2, r1, #0
20000a02:	701a      	strb	r2, [r3, #0]
			else
				backBufferGray[index] &= mask;
			break;
20000a04:	e031      	b.n	20000a6a <pixel+0x16a>
				backBufferGray[index] &= mask;
20000a06:	4a1c      	ldr	r2, [pc, #112]	; (20000a78 <pixel+0x178>)
20000a08:	693b      	ldr	r3, [r7, #16]
20000a0a:	18d3      	adds	r3, r2, r3
20000a0c:	781b      	ldrb	r3, [r3, #0]
20000a0e:	2217      	movs	r2, #23
20000a10:	18ba      	adds	r2, r7, r2
20000a12:	7812      	ldrb	r2, [r2, #0]
20000a14:	4013      	ands	r3, r2
20000a16:	b2d9      	uxtb	r1, r3
20000a18:	4a17      	ldr	r2, [pc, #92]	; (20000a78 <pixel+0x178>)
20000a1a:	693b      	ldr	r3, [r7, #16]
20000a1c:	18d3      	adds	r3, r2, r3
20000a1e:	1c0a      	adds	r2, r1, #0
20000a20:	701a      	strb	r2, [r3, #0]
			break;
20000a22:	e022      	b.n	20000a6a <pixel+0x16a>
		
		case 3:	
			if(set)
20000a24:	687b      	ldr	r3, [r7, #4]
20000a26:	2b00      	cmp	r3, #0
20000a28:	d00e      	beq.n	20000a48 <pixel+0x148>
				backBuffer[index] |= mask;
20000a2a:	4a14      	ldr	r2, [pc, #80]	; (20000a7c <pixel+0x17c>)
20000a2c:	693b      	ldr	r3, [r7, #16]
20000a2e:	18d3      	adds	r3, r2, r3
20000a30:	781a      	ldrb	r2, [r3, #0]
20000a32:	2317      	movs	r3, #23
20000a34:	18fb      	adds	r3, r7, r3
20000a36:	781b      	ldrb	r3, [r3, #0]
20000a38:	4313      	orrs	r3, r2
20000a3a:	b2d9      	uxtb	r1, r3
20000a3c:	4a0f      	ldr	r2, [pc, #60]	; (20000a7c <pixel+0x17c>)
20000a3e:	693b      	ldr	r3, [r7, #16]
20000a40:	18d3      	adds	r3, r2, r3
20000a42:	1c0a      	adds	r2, r1, #0
20000a44:	701a      	strb	r2, [r3, #0]
			else
				backBuffer[index] &= mask;
			break;
20000a46:	e010      	b.n	20000a6a <pixel+0x16a>
				backBuffer[index] &= mask;
20000a48:	4a0c      	ldr	r2, [pc, #48]	; (20000a7c <pixel+0x17c>)
20000a4a:	693b      	ldr	r3, [r7, #16]
20000a4c:	18d3      	adds	r3, r2, r3
20000a4e:	781b      	ldrb	r3, [r3, #0]
20000a50:	2217      	movs	r2, #23
20000a52:	18ba      	adds	r2, r7, r2
20000a54:	7812      	ldrb	r2, [r2, #0]
20000a56:	4013      	ands	r3, r2
20000a58:	b2d9      	uxtb	r1, r3
20000a5a:	4a08      	ldr	r2, [pc, #32]	; (20000a7c <pixel+0x17c>)
20000a5c:	693b      	ldr	r3, [r7, #16]
20000a5e:	18d3      	adds	r3, r2, r3
20000a60:	1c0a      	adds	r2, r1, #0
20000a62:	701a      	strb	r2, [r3, #0]
			break;
20000a64:	46c0      	nop			; (mov r8, r8)
20000a66:	e000      	b.n	20000a6a <pixel+0x16a>
		return;
20000a68:	46c0      	nop			; (mov r8, r8)
			
	}

}
20000a6a:	46bd      	mov	sp, r7
20000a6c:	b006      	add	sp, #24
20000a6e:	bd80      	pop	{r7, pc}
20000a70:	80000007 	andhi	r0, r0, r7
20000a74:	200030c4 	andcs	r3, r0, r4, asr #1
20000a78:	200018c4 	andcs	r1, r0, r4, asr #17
20000a7c:	200020c4 	andcs	r2, r0, r4, asr #1

20000a80 <pixel2>:


void pixel2(int x, int y, int set) {
20000a80:	b580      	push	{r7, lr}
20000a82:	b088      	sub	sp, #32
20000a84:	af00      	add	r7, sp, #0
20000a86:	60f8      	str	r0, [r7, #12]
20000a88:	60b9      	str	r1, [r7, #8]
20000a8a:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20000a8c:	68fb      	ldr	r3, [r7, #12]
20000a8e:	2b00      	cmp	r3, #0
20000a90:	dc00      	bgt.n	20000a94 <pixel2+0x14>
20000a92:	e0bc      	b.n	20000c0e <pixel2+0x18e>
20000a94:	68bb      	ldr	r3, [r7, #8]
20000a96:	2b00      	cmp	r3, #0
20000a98:	dc00      	bgt.n	20000a9c <pixel2+0x1c>
20000a9a:	e0b8      	b.n	20000c0e <pixel2+0x18e>
20000a9c:	68fb      	ldr	r3, [r7, #12]
20000a9e:	2b80      	cmp	r3, #128	; 0x80
20000aa0:	dd00      	ble.n	20000aa4 <pixel2+0x24>
20000aa2:	e0b4      	b.n	20000c0e <pixel2+0x18e>
20000aa4:	68bb      	ldr	r3, [r7, #8]
20000aa6:	2b40      	cmp	r3, #64	; 0x40
20000aa8:	dd00      	ble.n	20000aac <pixel2+0x2c>
20000aaa:	e0b0      	b.n	20000c0e <pixel2+0x18e>
	index = (y-1)/8;
20000aac:	68bb      	ldr	r3, [r7, #8]
20000aae:	3b01      	subs	r3, #1
20000ab0:	2b00      	cmp	r3, #0
20000ab2:	da00      	bge.n	20000ab6 <pixel2+0x36>
20000ab4:	3307      	adds	r3, #7
20000ab6:	10db      	asrs	r3, r3, #3
20000ab8:	61bb      	str	r3, [r7, #24]
	switch( (y-1)%8 ) {
20000aba:	68bb      	ldr	r3, [r7, #8]
20000abc:	3b01      	subs	r3, #1
20000abe:	4a56      	ldr	r2, [pc, #344]	; (20000c18 <pixel2+0x198>)
20000ac0:	4013      	ands	r3, r2
20000ac2:	d504      	bpl.n	20000ace <pixel2+0x4e>
20000ac4:	3b01      	subs	r3, #1
20000ac6:	2208      	movs	r2, #8
20000ac8:	4252      	negs	r2, r2
20000aca:	4313      	orrs	r3, r2
20000acc:	3301      	adds	r3, #1
20000ace:	2b07      	cmp	r3, #7
20000ad0:	d82c      	bhi.n	20000b2c <pixel2+0xac>
20000ad2:	009a      	lsls	r2, r3, #2
20000ad4:	4b51      	ldr	r3, [pc, #324]	; (20000c1c <pixel2+0x19c>)
20000ad6:	18d3      	adds	r3, r2, r3
20000ad8:	681b      	ldr	r3, [r3, #0]
20000ada:	469f      	mov	pc, r3
		case 0: mask = 1; break;
20000adc:	231f      	movs	r3, #31
20000ade:	18fb      	adds	r3, r7, r3
20000ae0:	2201      	movs	r2, #1
20000ae2:	701a      	strb	r2, [r3, #0]
20000ae4:	e022      	b.n	20000b2c <pixel2+0xac>
		case 1: mask = 2; break;
20000ae6:	231f      	movs	r3, #31
20000ae8:	18fb      	adds	r3, r7, r3
20000aea:	2202      	movs	r2, #2
20000aec:	701a      	strb	r2, [r3, #0]
20000aee:	e01d      	b.n	20000b2c <pixel2+0xac>
		case 2: mask = 4; break;
20000af0:	231f      	movs	r3, #31
20000af2:	18fb      	adds	r3, r7, r3
20000af4:	2204      	movs	r2, #4
20000af6:	701a      	strb	r2, [r3, #0]
20000af8:	e018      	b.n	20000b2c <pixel2+0xac>
		case 3: mask = 8; break;
20000afa:	231f      	movs	r3, #31
20000afc:	18fb      	adds	r3, r7, r3
20000afe:	2208      	movs	r2, #8
20000b00:	701a      	strb	r2, [r3, #0]
20000b02:	e013      	b.n	20000b2c <pixel2+0xac>
		case 4: mask = 0x10; break;
20000b04:	231f      	movs	r3, #31
20000b06:	18fb      	adds	r3, r7, r3
20000b08:	2210      	movs	r2, #16
20000b0a:	701a      	strb	r2, [r3, #0]
20000b0c:	e00e      	b.n	20000b2c <pixel2+0xac>
		case 5: mask = 0x20; break;
20000b0e:	231f      	movs	r3, #31
20000b10:	18fb      	adds	r3, r7, r3
20000b12:	2220      	movs	r2, #32
20000b14:	701a      	strb	r2, [r3, #0]
20000b16:	e009      	b.n	20000b2c <pixel2+0xac>
		case 6: mask = 0x40; break;
20000b18:	231f      	movs	r3, #31
20000b1a:	18fb      	adds	r3, r7, r3
20000b1c:	2240      	movs	r2, #64	; 0x40
20000b1e:	701a      	strb	r2, [r3, #0]
20000b20:	e004      	b.n	20000b2c <pixel2+0xac>
		case 7: mask = 0x80; break;
20000b22:	231f      	movs	r3, #31
20000b24:	18fb      	adds	r3, r7, r3
20000b26:	2280      	movs	r2, #128	; 0x80
20000b28:	701a      	strb	r2, [r3, #0]
20000b2a:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0)
20000b2c:	687b      	ldr	r3, [r7, #4]
20000b2e:	2b00      	cmp	r3, #0
20000b30:	d106      	bne.n	20000b40 <pixel2+0xc0>
		mask = ~mask;
20000b32:	231f      	movs	r3, #31
20000b34:	18fb      	adds	r3, r7, r3
20000b36:	221f      	movs	r2, #31
20000b38:	18ba      	adds	r2, r7, r2
20000b3a:	7812      	ldrb	r2, [r2, #0]
20000b3c:	43d2      	mvns	r2, r2
20000b3e:	701a      	strb	r2, [r3, #0]
	
	if(x > 64){
20000b40:	68fb      	ldr	r3, [r7, #12]
20000b42:	2b40      	cmp	r3, #64	; 0x40
20000b44:	dd07      	ble.n	20000b56 <pixel2+0xd6>
		controller = B_CS2;
20000b46:	231e      	movs	r3, #30
20000b48:	18fb      	adds	r3, r7, r3
20000b4a:	2210      	movs	r2, #16
20000b4c:	701a      	strb	r2, [r3, #0]
		x = x - 65;
20000b4e:	68fb      	ldr	r3, [r7, #12]
20000b50:	3b41      	subs	r3, #65	; 0x41
20000b52:	60fb      	str	r3, [r7, #12]
20000b54:	e006      	b.n	20000b64 <pixel2+0xe4>
	} else {
		controller = B_CS1;
20000b56:	231e      	movs	r3, #30
20000b58:	18fb      	adds	r3, r7, r3
20000b5a:	2208      	movs	r2, #8
20000b5c:	701a      	strb	r2, [r3, #0]
		x = x-1;
20000b5e:	68fb      	ldr	r3, [r7, #12]
20000b60:	3b01      	subs	r3, #1
20000b62:	60fb      	str	r3, [r7, #12]
	}
	graphic_write_command(LCD_SET_ADD | x, controller );
20000b64:	68fb      	ldr	r3, [r7, #12]
20000b66:	b25b      	sxtb	r3, r3
20000b68:	2240      	movs	r2, #64	; 0x40
20000b6a:	4313      	orrs	r3, r2
20000b6c:	b25b      	sxtb	r3, r3
20000b6e:	b2da      	uxtb	r2, r3
20000b70:	231e      	movs	r3, #30
20000b72:	18fb      	adds	r3, r7, r3
20000b74:	781b      	ldrb	r3, [r3, #0]
20000b76:	0019      	movs	r1, r3
20000b78:	0010      	movs	r0, r2
20000b7a:	f7ff fe11 	bl	200007a0 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller );
20000b7e:	69bb      	ldr	r3, [r7, #24]
20000b80:	b25b      	sxtb	r3, r3
20000b82:	2248      	movs	r2, #72	; 0x48
20000b84:	4252      	negs	r2, r2
20000b86:	4313      	orrs	r3, r2
20000b88:	b25b      	sxtb	r3, r3
20000b8a:	b2da      	uxtb	r2, r3
20000b8c:	231e      	movs	r3, #30
20000b8e:	18fb      	adds	r3, r7, r3
20000b90:	781b      	ldrb	r3, [r3, #0]
20000b92:	0019      	movs	r1, r3
20000b94:	0010      	movs	r0, r2
20000b96:	f7ff fe03 	bl	200007a0 <graphic_write_command>
	
	c = graphic_read_data(controller);
20000b9a:	231e      	movs	r3, #30
20000b9c:	18fb      	adds	r3, r7, r3
20000b9e:	781b      	ldrb	r3, [r3, #0]
20000ba0:	0018      	movs	r0, r3
20000ba2:	f7ff fda9 	bl	200006f8 <graphic_read_data>
20000ba6:	0002      	movs	r2, r0
20000ba8:	2317      	movs	r3, #23
20000baa:	18fb      	adds	r3, r7, r3
20000bac:	701a      	strb	r2, [r3, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
20000bae:	68fb      	ldr	r3, [r7, #12]
20000bb0:	b25b      	sxtb	r3, r3
20000bb2:	2240      	movs	r2, #64	; 0x40
20000bb4:	4313      	orrs	r3, r2
20000bb6:	b25b      	sxtb	r3, r3
20000bb8:	b2da      	uxtb	r2, r3
20000bba:	231e      	movs	r3, #30
20000bbc:	18fb      	adds	r3, r7, r3
20000bbe:	781b      	ldrb	r3, [r3, #0]
20000bc0:	0019      	movs	r1, r3
20000bc2:	0010      	movs	r0, r2
20000bc4:	f7ff fdec 	bl	200007a0 <graphic_write_command>
	
	if(set)
20000bc8:	687b      	ldr	r3, [r7, #4]
20000bca:	2b00      	cmp	r3, #0
20000bcc:	d00a      	beq.n	20000be4 <pixel2+0x164>
		mask = mask | c;
20000bce:	231f      	movs	r3, #31
20000bd0:	18fb      	adds	r3, r7, r3
20000bd2:	221f      	movs	r2, #31
20000bd4:	18b9      	adds	r1, r7, r2
20000bd6:	2217      	movs	r2, #23
20000bd8:	18ba      	adds	r2, r7, r2
20000bda:	7809      	ldrb	r1, [r1, #0]
20000bdc:	7812      	ldrb	r2, [r2, #0]
20000bde:	430a      	orrs	r2, r1
20000be0:	701a      	strb	r2, [r3, #0]
20000be2:	e009      	b.n	20000bf8 <pixel2+0x178>
	else
		mask = mask & c;
20000be4:	231f      	movs	r3, #31
20000be6:	18fb      	adds	r3, r7, r3
20000be8:	221f      	movs	r2, #31
20000bea:	18ba      	adds	r2, r7, r2
20000bec:	2117      	movs	r1, #23
20000bee:	1879      	adds	r1, r7, r1
20000bf0:	7812      	ldrb	r2, [r2, #0]
20000bf2:	7809      	ldrb	r1, [r1, #0]
20000bf4:	400a      	ands	r2, r1
20000bf6:	701a      	strb	r2, [r3, #0]
	
	graphic_write_data(mask, controller);
20000bf8:	231e      	movs	r3, #30
20000bfa:	18fb      	adds	r3, r7, r3
20000bfc:	781a      	ldrb	r2, [r3, #0]
20000bfe:	231f      	movs	r3, #31
20000c00:	18fb      	adds	r3, r7, r3
20000c02:	781b      	ldrb	r3, [r3, #0]
20000c04:	0011      	movs	r1, r2
20000c06:	0018      	movs	r0, r3
20000c08:	f7ff fded 	bl	200007e6 <graphic_write_data>
20000c0c:	e000      	b.n	20000c10 <pixel2+0x190>
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20000c0e:	46c0      	nop			; (mov r8, r8)
}
20000c10:	46bd      	mov	sp, r7
20000c12:	b008      	add	sp, #32
20000c14:	bd80      	pop	{r7, pc}
20000c16:	46c0      	nop			; (mov r8, r8)
20000c18:	80000007 	andhi	r0, r0, r7
20000c1c:	20004c0c 	andcs	r4, r0, ip, lsl #24

20000c20 <graphic_draw_screen>:

void graphic_draw_screen(uint8_t *buffer) {
20000c20:	b580      	push	{r7, lr}
20000c22:	b086      	sub	sp, #24
20000c24:	af00      	add	r7, sp, #0
20000c26:	6078      	str	r0, [r7, #4]
	uint8_t i, j, controller, c;
	unsigned int k = 0;
20000c28:	2300      	movs	r3, #0
20000c2a:	613b      	str	r3, [r7, #16]
	for(c = 0; c < 2; c++) {
20000c2c:	2315      	movs	r3, #21
20000c2e:	18fb      	adds	r3, r7, r3
20000c30:	2200      	movs	r2, #0
20000c32:	701a      	strb	r2, [r3, #0]
20000c34:	e056      	b.n	20000ce4 <graphic_draw_screen+0xc4>
		controller = (c == 0) ? B_CS1 : B_CS2;
20000c36:	2315      	movs	r3, #21
20000c38:	18fb      	adds	r3, r7, r3
20000c3a:	781b      	ldrb	r3, [r3, #0]
20000c3c:	2b00      	cmp	r3, #0
20000c3e:	d101      	bne.n	20000c44 <graphic_draw_screen+0x24>
20000c40:	2208      	movs	r2, #8
20000c42:	e000      	b.n	20000c46 <graphic_draw_screen+0x26>
20000c44:	2210      	movs	r2, #16
20000c46:	230f      	movs	r3, #15
20000c48:	18fb      	adds	r3, r7, r3
20000c4a:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 8; j++) {
20000c4c:	2316      	movs	r3, #22
20000c4e:	18fb      	adds	r3, r7, r3
20000c50:	2200      	movs	r2, #0
20000c52:	701a      	strb	r2, [r3, #0]
20000c54:	e03a      	b.n	20000ccc <graphic_draw_screen+0xac>
			graphic_write_command(LCD_SET_PAGE | j, controller);
20000c56:	2316      	movs	r3, #22
20000c58:	18fb      	adds	r3, r7, r3
20000c5a:	781b      	ldrb	r3, [r3, #0]
20000c5c:	2248      	movs	r2, #72	; 0x48
20000c5e:	4252      	negs	r2, r2
20000c60:	4313      	orrs	r3, r2
20000c62:	b2da      	uxtb	r2, r3
20000c64:	230f      	movs	r3, #15
20000c66:	18fb      	adds	r3, r7, r3
20000c68:	781b      	ldrb	r3, [r3, #0]
20000c6a:	0019      	movs	r1, r3
20000c6c:	0010      	movs	r0, r2
20000c6e:	f7ff fd97 	bl	200007a0 <graphic_write_command>
			graphic_write_command(LCD_SET_ADD | 0, controller);
20000c72:	230f      	movs	r3, #15
20000c74:	18fb      	adds	r3, r7, r3
20000c76:	781b      	ldrb	r3, [r3, #0]
20000c78:	0019      	movs	r1, r3
20000c7a:	2040      	movs	r0, #64	; 0x40
20000c7c:	f7ff fd90 	bl	200007a0 <graphic_write_command>
			for(i = 0; i <= 63; i++, k++) {
20000c80:	2317      	movs	r3, #23
20000c82:	18fb      	adds	r3, r7, r3
20000c84:	2200      	movs	r2, #0
20000c86:	701a      	strb	r2, [r3, #0]
20000c88:	e014      	b.n	20000cb4 <graphic_draw_screen+0x94>
				graphic_write_data(buffer[k], controller);
20000c8a:	687a      	ldr	r2, [r7, #4]
20000c8c:	693b      	ldr	r3, [r7, #16]
20000c8e:	18d3      	adds	r3, r2, r3
20000c90:	781a      	ldrb	r2, [r3, #0]
20000c92:	230f      	movs	r3, #15
20000c94:	18fb      	adds	r3, r7, r3
20000c96:	781b      	ldrb	r3, [r3, #0]
20000c98:	0019      	movs	r1, r3
20000c9a:	0010      	movs	r0, r2
20000c9c:	f7ff fda3 	bl	200007e6 <graphic_write_data>
			for(i = 0; i <= 63; i++, k++) {
20000ca0:	2317      	movs	r3, #23
20000ca2:	18fb      	adds	r3, r7, r3
20000ca4:	781a      	ldrb	r2, [r3, #0]
20000ca6:	2317      	movs	r3, #23
20000ca8:	18fb      	adds	r3, r7, r3
20000caa:	3201      	adds	r2, #1
20000cac:	701a      	strb	r2, [r3, #0]
20000cae:	693b      	ldr	r3, [r7, #16]
20000cb0:	3301      	adds	r3, #1
20000cb2:	613b      	str	r3, [r7, #16]
20000cb4:	2317      	movs	r3, #23
20000cb6:	18fb      	adds	r3, r7, r3
20000cb8:	781b      	ldrb	r3, [r3, #0]
20000cba:	2b3f      	cmp	r3, #63	; 0x3f
20000cbc:	d9e5      	bls.n	20000c8a <graphic_draw_screen+0x6a>
		for(j = 0; j < 8; j++) {
20000cbe:	2316      	movs	r3, #22
20000cc0:	18fb      	adds	r3, r7, r3
20000cc2:	781a      	ldrb	r2, [r3, #0]
20000cc4:	2316      	movs	r3, #22
20000cc6:	18fb      	adds	r3, r7, r3
20000cc8:	3201      	adds	r2, #1
20000cca:	701a      	strb	r2, [r3, #0]
20000ccc:	2316      	movs	r3, #22
20000cce:	18fb      	adds	r3, r7, r3
20000cd0:	781b      	ldrb	r3, [r3, #0]
20000cd2:	2b07      	cmp	r3, #7
20000cd4:	d9bf      	bls.n	20000c56 <graphic_draw_screen+0x36>
	for(c = 0; c < 2; c++) {
20000cd6:	2315      	movs	r3, #21
20000cd8:	18fb      	adds	r3, r7, r3
20000cda:	781a      	ldrb	r2, [r3, #0]
20000cdc:	2315      	movs	r3, #21
20000cde:	18fb      	adds	r3, r7, r3
20000ce0:	3201      	adds	r2, #1
20000ce2:	701a      	strb	r2, [r3, #0]
20000ce4:	2315      	movs	r3, #21
20000ce6:	18fb      	adds	r3, r7, r3
20000ce8:	781b      	ldrb	r3, [r3, #0]
20000cea:	2b01      	cmp	r3, #1
20000cec:	d9a3      	bls.n	20000c36 <graphic_draw_screen+0x16>
			}
		}
	}
}
20000cee:	46c0      	nop			; (mov r8, r8)
20000cf0:	46bd      	mov	sp, r7
20000cf2:	b006      	add	sp, #24
20000cf4:	bd80      	pop	{r7, pc}

20000cf6 <draw_sprite>:


void grayScaleTest( void );


void draw_sprite(sprite* s, int x, int y, int set, int color) {
20000cf6:	b5b0      	push	{r4, r5, r7, lr}
20000cf8:	b08a      	sub	sp, #40	; 0x28
20000cfa:	af00      	add	r7, sp, #0
20000cfc:	60f8      	str	r0, [r7, #12]
20000cfe:	60b9      	str	r1, [r7, #8]
20000d00:	607a      	str	r2, [r7, #4]
20000d02:	603b      	str	r3, [r7, #0]
	int i,j,k, width_in_bytes;
	if (s->width % 8 == 0)
20000d04:	68fb      	ldr	r3, [r7, #12]
20000d06:	681b      	ldr	r3, [r3, #0]
20000d08:	2207      	movs	r2, #7
20000d0a:	4013      	ands	r3, r2
20000d0c:	d104      	bne.n	20000d18 <draw_sprite+0x22>
		width_in_bytes = s->width / 8;
20000d0e:	68fb      	ldr	r3, [r7, #12]
20000d10:	681b      	ldr	r3, [r3, #0]
20000d12:	08db      	lsrs	r3, r3, #3
20000d14:	61bb      	str	r3, [r7, #24]
20000d16:	e004      	b.n	20000d22 <draw_sprite+0x2c>
	else
		width_in_bytes = (s->width / 8) + 1;
20000d18:	68fb      	ldr	r3, [r7, #12]
20000d1a:	681b      	ldr	r3, [r3, #0]
20000d1c:	08db      	lsrs	r3, r3, #3
20000d1e:	3301      	adds	r3, #1
20000d20:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < s->height; i++)
20000d22:	2300      	movs	r3, #0
20000d24:	627b      	str	r3, [r7, #36]	; 0x24
20000d26:	e06a      	b.n	20000dfe <draw_sprite+0x108>
		for (j = 0; j < width_in_bytes; j++) {
20000d28:	2300      	movs	r3, #0
20000d2a:	623b      	str	r3, [r7, #32]
20000d2c:	e060      	b.n	20000df0 <draw_sprite+0xfa>
			unsigned char byte = s->data[i * width_in_bytes + j];
20000d2e:	68fb      	ldr	r3, [r7, #12]
20000d30:	689b      	ldr	r3, [r3, #8]
20000d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000d34:	69b9      	ldr	r1, [r7, #24]
20000d36:	4351      	muls	r1, r2
20000d38:	6a3a      	ldr	r2, [r7, #32]
20000d3a:	188a      	adds	r2, r1, r2
20000d3c:	189a      	adds	r2, r3, r2
20000d3e:	2317      	movs	r3, #23
20000d40:	18fb      	adds	r3, r7, r3
20000d42:	7812      	ldrb	r2, [r2, #0]
20000d44:	701a      	strb	r2, [r3, #0]
			for (k =0; k < 8; k++) {
20000d46:	2300      	movs	r3, #0
20000d48:	61fb      	str	r3, [r7, #28]
20000d4a:	e04b      	b.n	20000de4 <draw_sprite+0xee>
				if (byte & (1 << k)){
20000d4c:	2317      	movs	r3, #23
20000d4e:	18fb      	adds	r3, r7, r3
20000d50:	781a      	ldrb	r2, [r3, #0]
20000d52:	69fb      	ldr	r3, [r7, #28]
20000d54:	411a      	asrs	r2, r3
20000d56:	0013      	movs	r3, r2
20000d58:	2201      	movs	r2, #1
20000d5a:	4013      	ands	r3, r2
20000d5c:	d03f      	beq.n	20000dde <draw_sprite+0xe8>
					pixel(8 * j + k + x + 1, i + y + 1, set, color);
20000d5e:	6a3b      	ldr	r3, [r7, #32]
20000d60:	00da      	lsls	r2, r3, #3
20000d62:	69fb      	ldr	r3, [r7, #28]
20000d64:	18d2      	adds	r2, r2, r3
20000d66:	68bb      	ldr	r3, [r7, #8]
20000d68:	18d3      	adds	r3, r2, r3
20000d6a:	1c58      	adds	r0, r3, #1
20000d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000d6e:	687b      	ldr	r3, [r7, #4]
20000d70:	18d3      	adds	r3, r2, r3
20000d72:	1c59      	adds	r1, r3, #1
20000d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20000d76:	683a      	ldr	r2, [r7, #0]
20000d78:	f7ff fdc2 	bl	20000900 <pixel>
					
					if(set) {	//Remove the other colors from this pixel
20000d7c:	683b      	ldr	r3, [r7, #0]
20000d7e:	2b00      	cmp	r3, #0
20000d80:	d02d      	beq.n	20000dde <draw_sprite+0xe8>
						pixel(8 * j + k + x + 1, i + y + 1, 0, (color+1) % 3);
20000d82:	6a3b      	ldr	r3, [r7, #32]
20000d84:	00da      	lsls	r2, r3, #3
20000d86:	69fb      	ldr	r3, [r7, #28]
20000d88:	18d2      	adds	r2, r2, r3
20000d8a:	68bb      	ldr	r3, [r7, #8]
20000d8c:	18d3      	adds	r3, r2, r3
20000d8e:	1c5c      	adds	r4, r3, #1
20000d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000d92:	687b      	ldr	r3, [r7, #4]
20000d94:	18d3      	adds	r3, r2, r3
20000d96:	1c5d      	adds	r5, r3, #1
20000d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20000d9a:	3301      	adds	r3, #1
20000d9c:	2103      	movs	r1, #3
20000d9e:	0018      	movs	r0, r3
20000da0:	f000 fd30 	bl	20001804 <__aeabi_idivmod>
20000da4:	000b      	movs	r3, r1
20000da6:	2200      	movs	r2, #0
20000da8:	0029      	movs	r1, r5
20000daa:	0020      	movs	r0, r4
20000dac:	f7ff fda8 	bl	20000900 <pixel>
						pixel(8 * j + k + x + 1, i + y + 1, 0, (color+2) % 3);
20000db0:	6a3b      	ldr	r3, [r7, #32]
20000db2:	00da      	lsls	r2, r3, #3
20000db4:	69fb      	ldr	r3, [r7, #28]
20000db6:	18d2      	adds	r2, r2, r3
20000db8:	68bb      	ldr	r3, [r7, #8]
20000dba:	18d3      	adds	r3, r2, r3
20000dbc:	1c5c      	adds	r4, r3, #1
20000dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000dc0:	687b      	ldr	r3, [r7, #4]
20000dc2:	18d3      	adds	r3, r2, r3
20000dc4:	1c5d      	adds	r5, r3, #1
20000dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20000dc8:	3302      	adds	r3, #2
20000dca:	2103      	movs	r1, #3
20000dcc:	0018      	movs	r0, r3
20000dce:	f000 fd19 	bl	20001804 <__aeabi_idivmod>
20000dd2:	000b      	movs	r3, r1
20000dd4:	2200      	movs	r2, #0
20000dd6:	0029      	movs	r1, r5
20000dd8:	0020      	movs	r0, r4
20000dda:	f7ff fd91 	bl	20000900 <pixel>
			for (k =0; k < 8; k++) {
20000dde:	69fb      	ldr	r3, [r7, #28]
20000de0:	3301      	adds	r3, #1
20000de2:	61fb      	str	r3, [r7, #28]
20000de4:	69fb      	ldr	r3, [r7, #28]
20000de6:	2b07      	cmp	r3, #7
20000de8:	ddb0      	ble.n	20000d4c <draw_sprite+0x56>
		for (j = 0; j < width_in_bytes; j++) {
20000dea:	6a3b      	ldr	r3, [r7, #32]
20000dec:	3301      	adds	r3, #1
20000dee:	623b      	str	r3, [r7, #32]
20000df0:	6a3a      	ldr	r2, [r7, #32]
20000df2:	69bb      	ldr	r3, [r7, #24]
20000df4:	429a      	cmp	r2, r3
20000df6:	db9a      	blt.n	20000d2e <draw_sprite+0x38>
	for (i = 0; i < s->height; i++)
20000df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000dfa:	3301      	adds	r3, #1
20000dfc:	627b      	str	r3, [r7, #36]	; 0x24
20000dfe:	68fb      	ldr	r3, [r7, #12]
20000e00:	685a      	ldr	r2, [r3, #4]
20000e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000e04:	429a      	cmp	r2, r3
20000e06:	d88f      	bhi.n	20000d28 <draw_sprite+0x32>
					}
				}
			}
		}
}
20000e08:	46c0      	nop			; (mov r8, r8)
20000e0a:	46bd      	mov	sp, r7
20000e0c:	b00a      	add	sp, #40	; 0x28
20000e0e:	bdb0      	pop	{r4, r5, r7, pc}

20000e10 <fillRectangle>:

void fillRectangle( int x, int y, int width, int height ){
20000e10:	b580      	push	{r7, lr}
20000e12:	b086      	sub	sp, #24
20000e14:	af00      	add	r7, sp, #0
20000e16:	60f8      	str	r0, [r7, #12]
20000e18:	60b9      	str	r1, [r7, #8]
20000e1a:	607a      	str	r2, [r7, #4]
20000e1c:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
20000e1e:	68fb      	ldr	r3, [r7, #12]
20000e20:	617b      	str	r3, [r7, #20]
20000e22:	e014      	b.n	20000e4e <fillRectangle+0x3e>
		for (j = y; j < y + height; j++) {
20000e24:	68bb      	ldr	r3, [r7, #8]
20000e26:	613b      	str	r3, [r7, #16]
20000e28:	e008      	b.n	20000e3c <fillRectangle+0x2c>
			pixel(i, j, 1, 3);
20000e2a:	6939      	ldr	r1, [r7, #16]
20000e2c:	6978      	ldr	r0, [r7, #20]
20000e2e:	2303      	movs	r3, #3
20000e30:	2201      	movs	r2, #1
20000e32:	f7ff fd65 	bl	20000900 <pixel>
		for (j = y; j < y + height; j++) {
20000e36:	693b      	ldr	r3, [r7, #16]
20000e38:	3301      	adds	r3, #1
20000e3a:	613b      	str	r3, [r7, #16]
20000e3c:	68ba      	ldr	r2, [r7, #8]
20000e3e:	683b      	ldr	r3, [r7, #0]
20000e40:	18d2      	adds	r2, r2, r3
20000e42:	693b      	ldr	r3, [r7, #16]
20000e44:	429a      	cmp	r2, r3
20000e46:	dcf0      	bgt.n	20000e2a <fillRectangle+0x1a>
	for (i = x; i < x + width; i++) {
20000e48:	697b      	ldr	r3, [r7, #20]
20000e4a:	3301      	adds	r3, #1
20000e4c:	617b      	str	r3, [r7, #20]
20000e4e:	68fa      	ldr	r2, [r7, #12]
20000e50:	687b      	ldr	r3, [r7, #4]
20000e52:	18d2      	adds	r2, r2, r3
20000e54:	697b      	ldr	r3, [r7, #20]
20000e56:	429a      	cmp	r2, r3
20000e58:	dce4      	bgt.n	20000e24 <fillRectangle+0x14>
		}
	}
}
20000e5a:	46c0      	nop			; (mov r8, r8)
20000e5c:	46bd      	mov	sp, r7
20000e5e:	b006      	add	sp, #24
20000e60:	bd80      	pop	{r7, pc}

20000e62 <clearRectangle>:

void clearRectangle( int x, int y, int width, int height ){
20000e62:	b580      	push	{r7, lr}
20000e64:	b086      	sub	sp, #24
20000e66:	af00      	add	r7, sp, #0
20000e68:	60f8      	str	r0, [r7, #12]
20000e6a:	60b9      	str	r1, [r7, #8]
20000e6c:	607a      	str	r2, [r7, #4]
20000e6e:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
20000e70:	68fb      	ldr	r3, [r7, #12]
20000e72:	617b      	str	r3, [r7, #20]
20000e74:	e014      	b.n	20000ea0 <clearRectangle+0x3e>
		for (j = y; j < y + height; j++) {
20000e76:	68bb      	ldr	r3, [r7, #8]
20000e78:	613b      	str	r3, [r7, #16]
20000e7a:	e008      	b.n	20000e8e <clearRectangle+0x2c>
			pixel(i, j, 0, 3);
20000e7c:	6939      	ldr	r1, [r7, #16]
20000e7e:	6978      	ldr	r0, [r7, #20]
20000e80:	2303      	movs	r3, #3
20000e82:	2200      	movs	r2, #0
20000e84:	f7ff fd3c 	bl	20000900 <pixel>
		for (j = y; j < y + height; j++) {
20000e88:	693b      	ldr	r3, [r7, #16]
20000e8a:	3301      	adds	r3, #1
20000e8c:	613b      	str	r3, [r7, #16]
20000e8e:	68ba      	ldr	r2, [r7, #8]
20000e90:	683b      	ldr	r3, [r7, #0]
20000e92:	18d2      	adds	r2, r2, r3
20000e94:	693b      	ldr	r3, [r7, #16]
20000e96:	429a      	cmp	r2, r3
20000e98:	dcf0      	bgt.n	20000e7c <clearRectangle+0x1a>
	for (i = x; i < x + width; i++) {
20000e9a:	697b      	ldr	r3, [r7, #20]
20000e9c:	3301      	adds	r3, #1
20000e9e:	617b      	str	r3, [r7, #20]
20000ea0:	68fa      	ldr	r2, [r7, #12]
20000ea2:	687b      	ldr	r3, [r7, #4]
20000ea4:	18d2      	adds	r2, r2, r3
20000ea6:	697b      	ldr	r3, [r7, #20]
20000ea8:	429a      	cmp	r2, r3
20000eaa:	dce4      	bgt.n	20000e76 <clearRectangle+0x14>
		}
	}
}
20000eac:	46c0      	nop			; (mov r8, r8)
20000eae:	46bd      	mov	sp, r7
20000eb0:	b006      	add	sp, #24
20000eb2:	bd80      	pop	{r7, pc}

20000eb4 <grayScaleTest>:


void grayScaleTest( void ) {
20000eb4:	b590      	push	{r4, r7, lr}
20000eb6:	b087      	sub	sp, #28
20000eb8:	af00      	add	r7, sp, #0
	int x = 10;
20000eba:	230a      	movs	r3, #10
20000ebc:	617b      	str	r3, [r7, #20]
	int y = 10;
20000ebe:	230a      	movs	r3, #10
20000ec0:	613b      	str	r3, [r7, #16]
	int width = 70;
20000ec2:	2346      	movs	r3, #70	; 0x46
20000ec4:	60fb      	str	r3, [r7, #12]
	int height = 50;
20000ec6:	2332      	movs	r3, #50	; 0x32
20000ec8:	60bb      	str	r3, [r7, #8]
	
	int x2 = 50;
20000eca:	2332      	movs	r3, #50	; 0x32
20000ecc:	607b      	str	r3, [r7, #4]
	
	fillRectangle(x, y, width, height);
20000ece:	68bb      	ldr	r3, [r7, #8]
20000ed0:	68fa      	ldr	r2, [r7, #12]
20000ed2:	6939      	ldr	r1, [r7, #16]
20000ed4:	6978      	ldr	r0, [r7, #20]
20000ed6:	f7ff ff9b 	bl	20000e10 <fillRectangle>
	
	int i;
	int k = 5;
20000eda:	2305      	movs	r3, #5
20000edc:	603b      	str	r3, [r7, #0]
	while(1) {
		clear_backBuffer();
20000ede:	f7ff fadf 	bl	200004a0 <clear_backBuffer>
		fillRectangle(x, y, width, height);
20000ee2:	68bb      	ldr	r3, [r7, #8]
20000ee4:	68fa      	ldr	r2, [r7, #12]
20000ee6:	6939      	ldr	r1, [r7, #16]
20000ee8:	6978      	ldr	r0, [r7, #20]
20000eea:	f7ff ff91 	bl	20000e10 <fillRectangle>
		clearRectangle(x+2+2, y+1, width-k, height-k); //outer square
20000eee:	697b      	ldr	r3, [r7, #20]
20000ef0:	1d18      	adds	r0, r3, #4
20000ef2:	693b      	ldr	r3, [r7, #16]
20000ef4:	1c59      	adds	r1, r3, #1
20000ef6:	68fa      	ldr	r2, [r7, #12]
20000ef8:	683b      	ldr	r3, [r7, #0]
20000efa:	1ad4      	subs	r4, r2, r3
20000efc:	68ba      	ldr	r2, [r7, #8]
20000efe:	683b      	ldr	r3, [r7, #0]
20000f00:	1ad3      	subs	r3, r2, r3
20000f02:	0022      	movs	r2, r4
20000f04:	f7ff ffad 	bl	20000e62 <clearRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
20000f08:	697b      	ldr	r3, [r7, #20]
20000f0a:	1c9a      	adds	r2, r3, #2
20000f0c:	683b      	ldr	r3, [r7, #0]
20000f0e:	18d0      	adds	r0, r2, r3
20000f10:	693b      	ldr	r3, [r7, #16]
20000f12:	1c99      	adds	r1, r3, #2
20000f14:	68fb      	ldr	r3, [r7, #12]
20000f16:	1f1a      	subs	r2, r3, #4
20000f18:	683b      	ldr	r3, [r7, #0]
20000f1a:	1ad4      	subs	r4, r2, r3
20000f1c:	68bb      	ldr	r3, [r7, #8]
20000f1e:	1f1a      	subs	r2, r3, #4
20000f20:	683b      	ldr	r3, [r7, #0]
20000f22:	1ad3      	subs	r3, r2, r3
20000f24:	0022      	movs	r2, r4
20000f26:	f7ff ff9c 	bl	20000e62 <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
20000f2a:	4b2d      	ldr	r3, [pc, #180]	; (20000fe0 <grayScaleTest+0x12c>)
20000f2c:	0018      	movs	r0, r3
20000f2e:	f7ff fe77 	bl	20000c20 <graphic_draw_screen>
		clear_backBuffer();
20000f32:	f7ff fab5 	bl	200004a0 <clear_backBuffer>
		fillRectangle(x, y, width, height);
20000f36:	68bb      	ldr	r3, [r7, #8]
20000f38:	68fa      	ldr	r2, [r7, #12]
20000f3a:	6939      	ldr	r1, [r7, #16]
20000f3c:	6978      	ldr	r0, [r7, #20]
20000f3e:	f7ff ff67 	bl	20000e10 <fillRectangle>
		
		fillRectangle(x+2+2, y+1, width-k, height-k); //outer white square
20000f42:	697b      	ldr	r3, [r7, #20]
20000f44:	1d18      	adds	r0, r3, #4
20000f46:	693b      	ldr	r3, [r7, #16]
20000f48:	1c59      	adds	r1, r3, #1
20000f4a:	68fa      	ldr	r2, [r7, #12]
20000f4c:	683b      	ldr	r3, [r7, #0]
20000f4e:	1ad4      	subs	r4, r2, r3
20000f50:	68ba      	ldr	r2, [r7, #8]
20000f52:	683b      	ldr	r3, [r7, #0]
20000f54:	1ad3      	subs	r3, r2, r3
20000f56:	0022      	movs	r2, r4
20000f58:	f7ff ff5a 	bl	20000e10 <fillRectangle>
		fillRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
20000f5c:	697b      	ldr	r3, [r7, #20]
20000f5e:	1c9a      	adds	r2, r3, #2
20000f60:	683b      	ldr	r3, [r7, #0]
20000f62:	18d0      	adds	r0, r2, r3
20000f64:	693b      	ldr	r3, [r7, #16]
20000f66:	1c99      	adds	r1, r3, #2
20000f68:	68fb      	ldr	r3, [r7, #12]
20000f6a:	1f1a      	subs	r2, r3, #4
20000f6c:	683b      	ldr	r3, [r7, #0]
20000f6e:	1ad4      	subs	r4, r2, r3
20000f70:	68bb      	ldr	r3, [r7, #8]
20000f72:	1f1a      	subs	r2, r3, #4
20000f74:	683b      	ldr	r3, [r7, #0]
20000f76:	1ad3      	subs	r3, r2, r3
20000f78:	0022      	movs	r2, r4
20000f7a:	f7ff ff49 	bl	20000e10 <fillRectangle>
		clearRectangle(x+12, y+5, 5, 5);
20000f7e:	697b      	ldr	r3, [r7, #20]
20000f80:	330c      	adds	r3, #12
20000f82:	0018      	movs	r0, r3
20000f84:	693b      	ldr	r3, [r7, #16]
20000f86:	1d59      	adds	r1, r3, #5
20000f88:	2305      	movs	r3, #5
20000f8a:	2205      	movs	r2, #5
20000f8c:	f7ff ff69 	bl	20000e62 <clearRectangle>
		
		graphic_draw_screen(draw_buffer_black);
20000f90:	4b13      	ldr	r3, [pc, #76]	; (20000fe0 <grayScaleTest+0x12c>)
20000f92:	0018      	movs	r0, r3
20000f94:	f7ff fe44 	bl	20000c20 <graphic_draw_screen>
		delay_milli(20);
20000f98:	2014      	movs	r0, #20
20000f9a:	f7ff fa55 	bl	20000448 <delay_milli>
		
		clear_backBuffer();
20000f9e:	f7ff fa7f 	bl	200004a0 <clear_backBuffer>
		fillRectangle(x, y, width, height);
20000fa2:	68bb      	ldr	r3, [r7, #8]
20000fa4:	68fa      	ldr	r2, [r7, #12]
20000fa6:	6939      	ldr	r1, [r7, #16]
20000fa8:	6978      	ldr	r0, [r7, #20]
20000faa:	f7ff ff31 	bl	20000e10 <fillRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
20000fae:	697b      	ldr	r3, [r7, #20]
20000fb0:	1c9a      	adds	r2, r3, #2
20000fb2:	683b      	ldr	r3, [r7, #0]
20000fb4:	18d0      	adds	r0, r2, r3
20000fb6:	693b      	ldr	r3, [r7, #16]
20000fb8:	1c99      	adds	r1, r3, #2
20000fba:	68fb      	ldr	r3, [r7, #12]
20000fbc:	1f1a      	subs	r2, r3, #4
20000fbe:	683b      	ldr	r3, [r7, #0]
20000fc0:	1ad4      	subs	r4, r2, r3
20000fc2:	68bb      	ldr	r3, [r7, #8]
20000fc4:	1f1a      	subs	r2, r3, #4
20000fc6:	683b      	ldr	r3, [r7, #0]
20000fc8:	1ad3      	subs	r3, r2, r3
20000fca:	0022      	movs	r2, r4
20000fcc:	f7ff ff49 	bl	20000e62 <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
20000fd0:	4b03      	ldr	r3, [pc, #12]	; (20000fe0 <grayScaleTest+0x12c>)
20000fd2:	0018      	movs	r0, r3
20000fd4:	f7ff fe24 	bl	20000c20 <graphic_draw_screen>
		
		delay_milli(20);
20000fd8:	2014      	movs	r0, #20
20000fda:	f7ff fa35 	bl	20000448 <delay_milli>
		clear_backBuffer();
20000fde:	e77e      	b.n	20000ede <grayScaleTest+0x2a>
20000fe0:	200028c4 	andcs	r2, r0, r4, asr #17

20000fe4 <set_up_draw_buffers>:
	}
}

/** Should prepare the different drawing buffers, before the drawing of each frame.*/
void set_up_draw_buffers( void ) {
20000fe4:	b580      	push	{r7, lr}
20000fe6:	b082      	sub	sp, #8
20000fe8:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 1024; i++) {
20000fea:	2300      	movs	r3, #0
20000fec:	607b      	str	r3, [r7, #4]
20000fee:	e065      	b.n	200010bc <set_up_draw_buffers+0xd8>
		draw_buffer_black[i] = backBuffer[i] & (~backBufferGray[i] & ~backBufferLight[i]); //Had to work a bit on these
20000ff0:	4a36      	ldr	r2, [pc, #216]	; (200010cc <set_up_draw_buffers+0xe8>)
20000ff2:	687b      	ldr	r3, [r7, #4]
20000ff4:	18d3      	adds	r3, r2, r3
20000ff6:	781b      	ldrb	r3, [r3, #0]
20000ff8:	b25b      	sxtb	r3, r3
20000ffa:	4935      	ldr	r1, [pc, #212]	; (200010d0 <set_up_draw_buffers+0xec>)
20000ffc:	687a      	ldr	r2, [r7, #4]
20000ffe:	188a      	adds	r2, r1, r2
20001000:	7811      	ldrb	r1, [r2, #0]
20001002:	4834      	ldr	r0, [pc, #208]	; (200010d4 <set_up_draw_buffers+0xf0>)
20001004:	687a      	ldr	r2, [r7, #4]
20001006:	1882      	adds	r2, r0, r2
20001008:	7812      	ldrb	r2, [r2, #0]
2000100a:	430a      	orrs	r2, r1
2000100c:	b2d2      	uxtb	r2, r2
2000100e:	b252      	sxtb	r2, r2
20001010:	43d2      	mvns	r2, r2
20001012:	b252      	sxtb	r2, r2
20001014:	4013      	ands	r3, r2
20001016:	b25b      	sxtb	r3, r3
20001018:	b2d9      	uxtb	r1, r3
2000101a:	4a2f      	ldr	r2, [pc, #188]	; (200010d8 <set_up_draw_buffers+0xf4>)
2000101c:	687b      	ldr	r3, [r7, #4]
2000101e:	18d3      	adds	r3, r2, r3
20001020:	1c0a      	adds	r2, r1, #0
20001022:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray[i] = (backBuffer[i] | backBufferGray[i]) & ~backBufferLight[i]; //in order to make it possible
20001024:	4a29      	ldr	r2, [pc, #164]	; (200010cc <set_up_draw_buffers+0xe8>)
20001026:	687b      	ldr	r3, [r7, #4]
20001028:	18d3      	adds	r3, r2, r3
2000102a:	781a      	ldrb	r2, [r3, #0]
2000102c:	4928      	ldr	r1, [pc, #160]	; (200010d0 <set_up_draw_buffers+0xec>)
2000102e:	687b      	ldr	r3, [r7, #4]
20001030:	18cb      	adds	r3, r1, r3
20001032:	781b      	ldrb	r3, [r3, #0]
20001034:	4313      	orrs	r3, r2
20001036:	b2db      	uxtb	r3, r3
20001038:	b25b      	sxtb	r3, r3
2000103a:	4926      	ldr	r1, [pc, #152]	; (200010d4 <set_up_draw_buffers+0xf0>)
2000103c:	687a      	ldr	r2, [r7, #4]
2000103e:	188a      	adds	r2, r1, r2
20001040:	7812      	ldrb	r2, [r2, #0]
20001042:	b252      	sxtb	r2, r2
20001044:	43d2      	mvns	r2, r2
20001046:	b252      	sxtb	r2, r2
20001048:	4013      	ands	r3, r2
2000104a:	b25b      	sxtb	r3, r3
2000104c:	b2d9      	uxtb	r1, r3
2000104e:	4a23      	ldr	r2, [pc, #140]	; (200010dc <set_up_draw_buffers+0xf8>)
20001050:	687b      	ldr	r3, [r7, #4]
20001052:	18d3      	adds	r3, r2, r3
20001054:	1c0a      	adds	r2, r1, #0
20001056:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_light[i] = (backBuffer[i] | backBufferLight[i]) & ~backBufferGray[i]; //to show a lighter sprite
20001058:	4a1c      	ldr	r2, [pc, #112]	; (200010cc <set_up_draw_buffers+0xe8>)
2000105a:	687b      	ldr	r3, [r7, #4]
2000105c:	18d3      	adds	r3, r2, r3
2000105e:	781a      	ldrb	r2, [r3, #0]
20001060:	491c      	ldr	r1, [pc, #112]	; (200010d4 <set_up_draw_buffers+0xf0>)
20001062:	687b      	ldr	r3, [r7, #4]
20001064:	18cb      	adds	r3, r1, r3
20001066:	781b      	ldrb	r3, [r3, #0]
20001068:	4313      	orrs	r3, r2
2000106a:	b2db      	uxtb	r3, r3
2000106c:	b25b      	sxtb	r3, r3
2000106e:	4918      	ldr	r1, [pc, #96]	; (200010d0 <set_up_draw_buffers+0xec>)
20001070:	687a      	ldr	r2, [r7, #4]
20001072:	188a      	adds	r2, r1, r2
20001074:	7812      	ldrb	r2, [r2, #0]
20001076:	b252      	sxtb	r2, r2
20001078:	43d2      	mvns	r2, r2
2000107a:	b252      	sxtb	r2, r2
2000107c:	4013      	ands	r3, r2
2000107e:	b25b      	sxtb	r3, r3
20001080:	b2d9      	uxtb	r1, r3
20001082:	4a17      	ldr	r2, [pc, #92]	; (200010e0 <set_up_draw_buffers+0xfc>)
20001084:	687b      	ldr	r3, [r7, #4]
20001086:	18d3      	adds	r3, r2, r3
20001088:	1c0a      	adds	r2, r1, #0
2000108a:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray_light[i] = backBuffer[i] | backBufferGray[i] | backBufferLight[i]; //on top of a darker one.
2000108c:	4a0f      	ldr	r2, [pc, #60]	; (200010cc <set_up_draw_buffers+0xe8>)
2000108e:	687b      	ldr	r3, [r7, #4]
20001090:	18d3      	adds	r3, r2, r3
20001092:	781a      	ldrb	r2, [r3, #0]
20001094:	490e      	ldr	r1, [pc, #56]	; (200010d0 <set_up_draw_buffers+0xec>)
20001096:	687b      	ldr	r3, [r7, #4]
20001098:	18cb      	adds	r3, r1, r3
2000109a:	781b      	ldrb	r3, [r3, #0]
2000109c:	4313      	orrs	r3, r2
2000109e:	b2da      	uxtb	r2, r3
200010a0:	490c      	ldr	r1, [pc, #48]	; (200010d4 <set_up_draw_buffers+0xf0>)
200010a2:	687b      	ldr	r3, [r7, #4]
200010a4:	18cb      	adds	r3, r1, r3
200010a6:	781b      	ldrb	r3, [r3, #0]
200010a8:	4313      	orrs	r3, r2
200010aa:	b2d9      	uxtb	r1, r3
200010ac:	4a0d      	ldr	r2, [pc, #52]	; (200010e4 <set_up_draw_buffers+0x100>)
200010ae:	687b      	ldr	r3, [r7, #4]
200010b0:	18d3      	adds	r3, r2, r3
200010b2:	1c0a      	adds	r2, r1, #0
200010b4:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 1024; i++) {
200010b6:	687b      	ldr	r3, [r7, #4]
200010b8:	3301      	adds	r3, #1
200010ba:	607b      	str	r3, [r7, #4]
200010bc:	687b      	ldr	r3, [r7, #4]
200010be:	4a0a      	ldr	r2, [pc, #40]	; (200010e8 <set_up_draw_buffers+0x104>)
200010c0:	4293      	cmp	r3, r2
200010c2:	dd95      	ble.n	20000ff0 <set_up_draw_buffers+0xc>
	}
}
200010c4:	46c0      	nop			; (mov r8, r8)
200010c6:	46bd      	mov	sp, r7
200010c8:	b002      	add	sp, #8
200010ca:	bd80      	pop	{r7, pc}
200010cc:	200020c4 	andcs	r2, r0, r4, asr #1
200010d0:	200018c4 	andcs	r1, r0, r4, asr #17
200010d4:	200030c4 	andcs	r3, r0, r4, asr #1
200010d8:	200028c4 	andcs	r2, r0, r4, asr #17
200010dc:	20001cc4 	andcs	r1, r0, r4, asr #25
200010e0:	200024c4 	andcs	r2, r0, r4, asr #9
200010e4:	20002cc4 	andcs	r2, r0, r4, asr #25
200010e8:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

200010ec <draw_game_object>:

void draw_game_object(GameObject *gObj) {
200010ec:	b580      	push	{r7, lr}
200010ee:	b086      	sub	sp, #24
200010f0:	af02      	add	r7, sp, #8
200010f2:	6078      	str	r0, [r7, #4]
	int frame = gObj->current_frame;
200010f4:	687b      	ldr	r3, [r7, #4]
200010f6:	695b      	ldr	r3, [r3, #20]
200010f8:	60fb      	str	r3, [r7, #12]
	draw_sprite(gObj->images[frame].blackImage, gObj->xPos, gObj->yPos, 1, 3);
200010fa:	687b      	ldr	r3, [r7, #4]
200010fc:	6819      	ldr	r1, [r3, #0]
200010fe:	68fa      	ldr	r2, [r7, #12]
20001100:	0013      	movs	r3, r2
20001102:	005b      	lsls	r3, r3, #1
20001104:	189b      	adds	r3, r3, r2
20001106:	009b      	lsls	r3, r3, #2
20001108:	18cb      	adds	r3, r1, r3
2000110a:	6818      	ldr	r0, [r3, #0]
2000110c:	687b      	ldr	r3, [r7, #4]
2000110e:	6859      	ldr	r1, [r3, #4]
20001110:	687b      	ldr	r3, [r7, #4]
20001112:	689a      	ldr	r2, [r3, #8]
20001114:	2303      	movs	r3, #3
20001116:	9300      	str	r3, [sp, #0]
20001118:	2301      	movs	r3, #1
2000111a:	f7ff fdec 	bl	20000cf6 <draw_sprite>
	draw_sprite(gObj->images[frame].grayImage, gObj->xPos, gObj->yPos, 1, 2);
2000111e:	687b      	ldr	r3, [r7, #4]
20001120:	6819      	ldr	r1, [r3, #0]
20001122:	68fa      	ldr	r2, [r7, #12]
20001124:	0013      	movs	r3, r2
20001126:	005b      	lsls	r3, r3, #1
20001128:	189b      	adds	r3, r3, r2
2000112a:	009b      	lsls	r3, r3, #2
2000112c:	18cb      	adds	r3, r1, r3
2000112e:	6858      	ldr	r0, [r3, #4]
20001130:	687b      	ldr	r3, [r7, #4]
20001132:	6859      	ldr	r1, [r3, #4]
20001134:	687b      	ldr	r3, [r7, #4]
20001136:	689a      	ldr	r2, [r3, #8]
20001138:	2302      	movs	r3, #2
2000113a:	9300      	str	r3, [sp, #0]
2000113c:	2301      	movs	r3, #1
2000113e:	f7ff fdda 	bl	20000cf6 <draw_sprite>
	draw_sprite(gObj->images[frame].lightImage, gObj->xPos, gObj->yPos, 1, 1);
20001142:	687b      	ldr	r3, [r7, #4]
20001144:	6819      	ldr	r1, [r3, #0]
20001146:	68fa      	ldr	r2, [r7, #12]
20001148:	0013      	movs	r3, r2
2000114a:	005b      	lsls	r3, r3, #1
2000114c:	189b      	adds	r3, r3, r2
2000114e:	009b      	lsls	r3, r3, #2
20001150:	18cb      	adds	r3, r1, r3
20001152:	6898      	ldr	r0, [r3, #8]
20001154:	687b      	ldr	r3, [r7, #4]
20001156:	6859      	ldr	r1, [r3, #4]
20001158:	687b      	ldr	r3, [r7, #4]
2000115a:	689a      	ldr	r2, [r3, #8]
2000115c:	2301      	movs	r3, #1
2000115e:	9300      	str	r3, [sp, #0]
20001160:	2301      	movs	r3, #1
20001162:	f7ff fdc8 	bl	20000cf6 <draw_sprite>
}
20001166:	46c0      	nop			; (mov r8, r8)
20001168:	46bd      	mov	sp, r7
2000116a:	b004      	add	sp, #16
2000116c:	bd80      	pop	{r7, pc}

2000116e <show_frame>:


void show_frame(int frame_length) {
2000116e:	b580      	push	{r7, lr}
20001170:	b082      	sub	sp, #8
20001172:	af00      	add	r7, sp, #0
20001174:	6078      	str	r0, [r7, #4]
	set_up_draw_buffers();
20001176:	f7ff ff35 	bl	20000fe4 <set_up_draw_buffers>
	
	while(frame_length--) {
2000117a:	e01b      	b.n	200011b4 <show_frame+0x46>
		graphic_draw_screen(draw_buffer_black_gray_light);
2000117c:	4b13      	ldr	r3, [pc, #76]	; (200011cc <show_frame+0x5e>)
2000117e:	0018      	movs	r0, r3
20001180:	f7ff fd4e 	bl	20000c20 <graphic_draw_screen>
		delay_milli(1);
20001184:	2001      	movs	r0, #1
20001186:	f7ff f95f 	bl	20000448 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
2000118a:	4b11      	ldr	r3, [pc, #68]	; (200011d0 <show_frame+0x62>)
2000118c:	0018      	movs	r0, r3
2000118e:	f7ff fd47 	bl	20000c20 <graphic_draw_screen>
		delay_milli(1);
20001192:	2001      	movs	r0, #1
20001194:	f7ff f958 	bl	20000448 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black_gray);
20001198:	4b0e      	ldr	r3, [pc, #56]	; (200011d4 <show_frame+0x66>)
2000119a:	0018      	movs	r0, r3
2000119c:	f7ff fd40 	bl	20000c20 <graphic_draw_screen>
		delay_milli(1);
200011a0:	2001      	movs	r0, #1
200011a2:	f7ff f951 	bl	20000448 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
200011a6:	4b0a      	ldr	r3, [pc, #40]	; (200011d0 <show_frame+0x62>)
200011a8:	0018      	movs	r0, r3
200011aa:	f7ff fd39 	bl	20000c20 <graphic_draw_screen>
		delay_milli(1);
200011ae:	2001      	movs	r0, #1
200011b0:	f7ff f94a 	bl	20000448 <delay_milli>
	while(frame_length--) {
200011b4:	687b      	ldr	r3, [r7, #4]
200011b6:	1e5a      	subs	r2, r3, #1
200011b8:	607a      	str	r2, [r7, #4]
200011ba:	2b00      	cmp	r3, #0
200011bc:	d1de      	bne.n	2000117c <show_frame+0xe>
	}
	
	clear_all_backBuffers();	//Maybe we could be more effective by only clearing the necessary stuff,
200011be:	f7ff f97b 	bl	200004b8 <clear_all_backBuffers>
								//but let's keep it like this if it works.
200011c2:	46c0      	nop			; (mov r8, r8)
200011c4:	46bd      	mov	sp, r7
200011c6:	b002      	add	sp, #8
200011c8:	bd80      	pop	{r7, pc}
200011ca:	46c0      	nop			; (mov r8, r8)
200011cc:	20002cc4 	andcs	r2, r0, r4, asr #25
200011d0:	200028c4 	andcs	r2, r0, r4, asr #17
200011d4:	20001cc4 	andcs	r1, r0, r4, asr #25

200011d8 <render>:
GameObject* gameObjects[100];
int nGameObjects = 0;


void render(GameObject* this)
{
200011d8:	b580      	push	{r7, lr}
200011da:	b082      	sub	sp, #8
200011dc:	af00      	add	r7, sp, #0
200011de:	6078      	str	r0, [r7, #4]
    
}
200011e0:	46c0      	nop			; (mov r8, r8)
200011e2:	46bd      	mov	sp, r7
200011e4:	b002      	add	sp, #8
200011e6:	bd80      	pop	{r7, pc}

200011e8 <gameObjectUpdate>:

void gameObjectUpdate(GameObject *this) {
200011e8:	b580      	push	{r7, lr}
200011ea:	b082      	sub	sp, #8
200011ec:	af00      	add	r7, sp, #0
200011ee:	6078      	str	r0, [r7, #4]
	this->animation_counter++;
200011f0:	687b      	ldr	r3, [r7, #4]
200011f2:	6a1b      	ldr	r3, [r3, #32]
200011f4:	1c5a      	adds	r2, r3, #1
200011f6:	687b      	ldr	r3, [r7, #4]
200011f8:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
200011fa:	687b      	ldr	r3, [r7, #4]
200011fc:	6a1a      	ldr	r2, [r3, #32]
200011fe:	687b      	ldr	r3, [r7, #4]
20001200:	69db      	ldr	r3, [r3, #28]
20001202:	429a      	cmp	r2, r3
20001204:	d10f      	bne.n	20001226 <gameObjectUpdate+0x3e>
		this->animation_counter = 0;
20001206:	687b      	ldr	r3, [r7, #4]
20001208:	2200      	movs	r2, #0
2000120a:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
2000120c:	687b      	ldr	r3, [r7, #4]
2000120e:	695b      	ldr	r3, [r3, #20]
20001210:	1c5a      	adds	r2, r3, #1
20001212:	687b      	ldr	r3, [r7, #4]
20001214:	699b      	ldr	r3, [r3, #24]
20001216:	0019      	movs	r1, r3
20001218:	0010      	movs	r0, r2
2000121a:	f000 faf3 	bl	20001804 <__aeabi_idivmod>
2000121e:	000b      	movs	r3, r1
20001220:	001a      	movs	r2, r3
20001222:	687b      	ldr	r3, [r7, #4]
20001224:	615a      	str	r2, [r3, #20]
	}
}
20001226:	46c0      	nop			; (mov r8, r8)
20001228:	46bd      	mov	sp, r7
2000122a:	b002      	add	sp, #8
2000122c:	bd80      	pop	{r7, pc}
	...

20001230 <set_up_DIL>:
#include "gpio.h"

/** Sets up PE0-7 as inports and PE8-15 as outports. */
void set_up_DIL( void ) {
20001230:	b580      	push	{r7, lr}
20001232:	af00      	add	r7, sp, #0
	GPIO_D.Moder = 0x55550000;
20001234:	4b02      	ldr	r3, [pc, #8]	; (20001240 <set_up_DIL+0x10>)
20001236:	4a03      	ldr	r2, [pc, #12]	; (20001244 <set_up_DIL+0x14>)
20001238:	601a      	str	r2, [r3, #0]
}
2000123a:	46c0      	nop			; (mov r8, r8)
2000123c:	46bd      	mov	sp, r7
2000123e:	bd80      	pop	{r7, pc}
20001240:	40020c00 	andmi	r0, r2, r0, lsl #24
20001244:	55550000 	ldrbpl	r0, [r5, #-0]

20001248 <read_DIL>:

char read_DIL( void ) {
20001248:	b580      	push	{r7, lr}
2000124a:	af00      	add	r7, sp, #0
	return GPIO_D.idrLow;
2000124c:	4b02      	ldr	r3, [pc, #8]	; (20001258 <read_DIL+0x10>)
2000124e:	7c1b      	ldrb	r3, [r3, #16]
20001250:	b2db      	uxtb	r3, r3
}
20001252:	0018      	movs	r0, r3
20001254:	46bd      	mov	sp, r7
20001256:	bd80      	pop	{r7, pc}
20001258:	40020c00 	andmi	r0, r2, r0, lsl #24

2000125c <read_DIL_single>:


int read_DIL_single( int bit ) {
2000125c:	b590      	push	{r4, r7, lr}
2000125e:	b085      	sub	sp, #20
20001260:	af00      	add	r7, sp, #0
20001262:	6078      	str	r0, [r7, #4]
	char DIL = read_DIL();
20001264:	230f      	movs	r3, #15
20001266:	18fc      	adds	r4, r7, r3
20001268:	f7ff ffee 	bl	20001248 <read_DIL>
2000126c:	0003      	movs	r3, r0
2000126e:	7023      	strb	r3, [r4, #0]
	if (DIL & (1<<bit)) {
20001270:	230f      	movs	r3, #15
20001272:	18fb      	adds	r3, r7, r3
20001274:	781a      	ldrb	r2, [r3, #0]
20001276:	687b      	ldr	r3, [r7, #4]
20001278:	411a      	asrs	r2, r3
2000127a:	0013      	movs	r3, r2
2000127c:	2201      	movs	r2, #1
2000127e:	4013      	ands	r3, r2
20001280:	d001      	beq.n	20001286 <read_DIL_single+0x2a>
		return 0;
20001282:	2300      	movs	r3, #0
20001284:	e000      	b.n	20001288 <read_DIL_single+0x2c>
	} else {
		return 1;
20001286:	2301      	movs	r3, #1
	}
20001288:	0018      	movs	r0, r3
2000128a:	46bd      	mov	sp, r7
2000128c:	b005      	add	sp, #20
2000128e:	bd90      	pop	{r4, r7, pc}

20001290 <load_image>:
#include "image.h"

void load_image( Image *image, sprite *blackImage, sprite *grayImage, sprite *lightImage ) {
20001290:	b580      	push	{r7, lr}
20001292:	b084      	sub	sp, #16
20001294:	af00      	add	r7, sp, #0
20001296:	60f8      	str	r0, [r7, #12]
20001298:	60b9      	str	r1, [r7, #8]
2000129a:	607a      	str	r2, [r7, #4]
2000129c:	603b      	str	r3, [r7, #0]
	image->blackImage = blackImage;
2000129e:	68fb      	ldr	r3, [r7, #12]
200012a0:	68ba      	ldr	r2, [r7, #8]
200012a2:	601a      	str	r2, [r3, #0]
	image->grayImage = grayImage;
200012a4:	68fb      	ldr	r3, [r7, #12]
200012a6:	687a      	ldr	r2, [r7, #4]
200012a8:	605a      	str	r2, [r3, #4]
	image->lightImage = lightImage;
200012aa:	68fb      	ldr	r3, [r7, #12]
200012ac:	683a      	ldr	r2, [r7, #0]
200012ae:	609a      	str	r2, [r3, #8]
}
200012b0:	46c0      	nop			; (mov r8, r8)
200012b2:	46bd      	mov	sp, r7
200012b4:	b004      	add	sp, #16
200012b6:	bd80      	pop	{r7, pc}

200012b8 <initSprites>:
Image fire2Image;
Image fire3Image;
Image fire4Image;
Image fire5Image;
Image fireImages[5];
static void initSprites( void ) {	
200012b8:	b580      	push	{r7, lr}
200012ba:	b08c      	sub	sp, #48	; 0x30
200012bc:	af00      	add	r7, sp, #0
	sprite *pointer0 = &tempFireBlack;
200012be:	4b3e      	ldr	r3, [pc, #248]	; (200013b8 <initSprites+0x100>)
200012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer0, fire_black_2_bits, fire1_gray_width, fire1_gray_height);
200012c2:	493e      	ldr	r1, [pc, #248]	; (200013bc <initSprites+0x104>)
200012c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
200012c6:	230c      	movs	r3, #12
200012c8:	2208      	movs	r2, #8
200012ca:	f7ff f84f 	bl	2000036c <load_sprite>
	fireBlack = pointer0;
200012ce:	4b3c      	ldr	r3, [pc, #240]	; (200013c0 <initSprites+0x108>)
200012d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
200012d2:	601a      	str	r2, [r3, #0]
	
	sprite *pointer1 = &tempFire1Gray;
200012d4:	4b3b      	ldr	r3, [pc, #236]	; (200013c4 <initSprites+0x10c>)
200012d6:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer1, fire1_gray_bits, fire1_gray_width, fire1_gray_height);
200012d8:	493b      	ldr	r1, [pc, #236]	; (200013c8 <initSprites+0x110>)
200012da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
200012dc:	230c      	movs	r3, #12
200012de:	2208      	movs	r2, #8
200012e0:	f7ff f844 	bl	2000036c <load_sprite>
	fire1Gray = pointer1;
200012e4:	4b39      	ldr	r3, [pc, #228]	; (200013cc <initSprites+0x114>)
200012e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
200012e8:	601a      	str	r2, [r3, #0]

	sprite *pointer2 = &tempFire1Light;
200012ea:	4b39      	ldr	r3, [pc, #228]	; (200013d0 <initSprites+0x118>)
200012ec:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer2, fire1_light_bits, fire1_gray_width, fire1_gray_height);
200012ee:	4939      	ldr	r1, [pc, #228]	; (200013d4 <initSprites+0x11c>)
200012f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
200012f2:	230c      	movs	r3, #12
200012f4:	2208      	movs	r2, #8
200012f6:	f7ff f839 	bl	2000036c <load_sprite>
	fire1Light = pointer2;
200012fa:	4b37      	ldr	r3, [pc, #220]	; (200013d8 <initSprites+0x120>)
200012fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200012fe:	601a      	str	r2, [r3, #0]

	sprite *pointer3 = &tempFire2Gray;
20001300:	4b36      	ldr	r3, [pc, #216]	; (200013dc <initSprites+0x124>)
20001302:	623b      	str	r3, [r7, #32]
	load_sprite(pointer3, fire2_gray_bits, fire1_gray_width, fire1_gray_height);
20001304:	4936      	ldr	r1, [pc, #216]	; (200013e0 <initSprites+0x128>)
20001306:	6a38      	ldr	r0, [r7, #32]
20001308:	230c      	movs	r3, #12
2000130a:	2208      	movs	r2, #8
2000130c:	f7ff f82e 	bl	2000036c <load_sprite>
	fire2Gray = pointer3;
20001310:	4b34      	ldr	r3, [pc, #208]	; (200013e4 <initSprites+0x12c>)
20001312:	6a3a      	ldr	r2, [r7, #32]
20001314:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempFire2Light;
20001316:	4b34      	ldr	r3, [pc, #208]	; (200013e8 <initSprites+0x130>)
20001318:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer4, fire2_light_bits, fire1_gray_width, fire1_gray_height);
2000131a:	4934      	ldr	r1, [pc, #208]	; (200013ec <initSprites+0x134>)
2000131c:	69f8      	ldr	r0, [r7, #28]
2000131e:	230c      	movs	r3, #12
20001320:	2208      	movs	r2, #8
20001322:	f7ff f823 	bl	2000036c <load_sprite>
	fire2Light = pointer4;
20001326:	4b32      	ldr	r3, [pc, #200]	; (200013f0 <initSprites+0x138>)
20001328:	69fa      	ldr	r2, [r7, #28]
2000132a:	601a      	str	r2, [r3, #0]

	sprite *pointer5 = &tempFire3Gray;
2000132c:	4b31      	ldr	r3, [pc, #196]	; (200013f4 <initSprites+0x13c>)
2000132e:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer5, fire3_gray_bits, fire1_gray_width, fire1_gray_height);
20001330:	4931      	ldr	r1, [pc, #196]	; (200013f8 <initSprites+0x140>)
20001332:	69b8      	ldr	r0, [r7, #24]
20001334:	230c      	movs	r3, #12
20001336:	2208      	movs	r2, #8
20001338:	f7ff f818 	bl	2000036c <load_sprite>
	fire3Gray = pointer5;
2000133c:	4b2f      	ldr	r3, [pc, #188]	; (200013fc <initSprites+0x144>)
2000133e:	69ba      	ldr	r2, [r7, #24]
20001340:	601a      	str	r2, [r3, #0]

	sprite *pointer6 = &tempFire3Light;
20001342:	4b2f      	ldr	r3, [pc, #188]	; (20001400 <initSprites+0x148>)
20001344:	617b      	str	r3, [r7, #20]
	load_sprite(pointer6, fire3_light_bits, fire1_gray_width, fire1_gray_height);
20001346:	492f      	ldr	r1, [pc, #188]	; (20001404 <initSprites+0x14c>)
20001348:	6978      	ldr	r0, [r7, #20]
2000134a:	230c      	movs	r3, #12
2000134c:	2208      	movs	r2, #8
2000134e:	f7ff f80d 	bl	2000036c <load_sprite>
	fire3Light = pointer6;
20001352:	4b2d      	ldr	r3, [pc, #180]	; (20001408 <initSprites+0x150>)
20001354:	697a      	ldr	r2, [r7, #20]
20001356:	601a      	str	r2, [r3, #0]

	sprite *pointer7 = &tempFire4Gray;
20001358:	4b2c      	ldr	r3, [pc, #176]	; (2000140c <initSprites+0x154>)
2000135a:	613b      	str	r3, [r7, #16]
	load_sprite(pointer7, fire4_gray_bits, fire1_gray_width, fire1_gray_height);
2000135c:	492c      	ldr	r1, [pc, #176]	; (20001410 <initSprites+0x158>)
2000135e:	6938      	ldr	r0, [r7, #16]
20001360:	230c      	movs	r3, #12
20001362:	2208      	movs	r2, #8
20001364:	f7ff f802 	bl	2000036c <load_sprite>
	fire4Gray = pointer7;
20001368:	4b2a      	ldr	r3, [pc, #168]	; (20001414 <initSprites+0x15c>)
2000136a:	693a      	ldr	r2, [r7, #16]
2000136c:	601a      	str	r2, [r3, #0]

	sprite *pointer8 = &tempFire4Light;
2000136e:	4b2a      	ldr	r3, [pc, #168]	; (20001418 <initSprites+0x160>)
20001370:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer8, fire4_light_bits, fire1_gray_width, fire1_gray_height);
20001372:	492a      	ldr	r1, [pc, #168]	; (2000141c <initSprites+0x164>)
20001374:	68f8      	ldr	r0, [r7, #12]
20001376:	230c      	movs	r3, #12
20001378:	2208      	movs	r2, #8
2000137a:	f7fe fff7 	bl	2000036c <load_sprite>
	fire4Light = pointer8;
2000137e:	4b28      	ldr	r3, [pc, #160]	; (20001420 <initSprites+0x168>)
20001380:	68fa      	ldr	r2, [r7, #12]
20001382:	601a      	str	r2, [r3, #0]

	sprite *pointer9 = &tempFire5Gray;
20001384:	4b27      	ldr	r3, [pc, #156]	; (20001424 <initSprites+0x16c>)
20001386:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer9, fire5_gray_bits, fire1_gray_width, fire1_gray_height);
20001388:	4927      	ldr	r1, [pc, #156]	; (20001428 <initSprites+0x170>)
2000138a:	68b8      	ldr	r0, [r7, #8]
2000138c:	230c      	movs	r3, #12
2000138e:	2208      	movs	r2, #8
20001390:	f7fe ffec 	bl	2000036c <load_sprite>
	fire5Gray = pointer9;
20001394:	4b25      	ldr	r3, [pc, #148]	; (2000142c <initSprites+0x174>)
20001396:	68ba      	ldr	r2, [r7, #8]
20001398:	601a      	str	r2, [r3, #0]

	sprite *pointer10 = &tempFire5Light;
2000139a:	4b25      	ldr	r3, [pc, #148]	; (20001430 <initSprites+0x178>)
2000139c:	607b      	str	r3, [r7, #4]
	load_sprite(pointer10, fire5_light_bits, fire1_gray_width, fire1_gray_height);
2000139e:	4925      	ldr	r1, [pc, #148]	; (20001434 <initSprites+0x17c>)
200013a0:	6878      	ldr	r0, [r7, #4]
200013a2:	230c      	movs	r3, #12
200013a4:	2208      	movs	r2, #8
200013a6:	f7fe ffe1 	bl	2000036c <load_sprite>
	fire5Light = pointer10;
200013aa:	4b23      	ldr	r3, [pc, #140]	; (20001438 <initSprites+0x180>)
200013ac:	687a      	ldr	r2, [r7, #4]
200013ae:	601a      	str	r2, [r3, #0]
}
200013b0:	46c0      	nop			; (mov r8, r8)
200013b2:	46bd      	mov	sp, r7
200013b4:	b00c      	add	sp, #48	; 0x30
200013b6:	bd80      	pop	{r7, pc}
200013b8:	2000368c 	andcs	r3, r0, ip, lsl #13
200013bc:	20004b84 	andcs	r4, r0, r4, lsl #23
200013c0:	20003784 	andcs	r3, r0, r4, lsl #15
200013c4:	20003778 	andcs	r3, r0, r8, ror r7
200013c8:	20004b90 	mulcs	r0, r0, fp
200013cc:	2000379c 	mulcs	r0, ip, r7
200013d0:	20003754 	andcs	r3, r0, r4, asr r7
200013d4:	20004b9c 	mulcs	r0, ip, fp
200013d8:	20003654 	andcs	r3, r0, r4, asr r6
200013dc:	20003680 	andcs	r3, r0, r0, lsl #13
200013e0:	20004ba8 	andcs	r4, r0, r8, lsr #23
200013e4:	20003798 	mulcs	r0, r8, r7
200013e8:	20003788 	andcs	r3, r0, r8, lsl #15
200013ec:	20004bb4 			; <UNDEFINED> instruction: 0x20004bb4
200013f0:	20003770 	andcs	r3, r0, r0, ror r7
200013f4:	20003738 	andcs	r3, r0, r8, lsr r7
200013f8:	20004bc0 	andcs	r4, r0, r0, asr #23
200013fc:	20003664 	andcs	r3, r0, r4, ror #12
20001400:	20003658 	andcs	r3, r0, r8, asr r6
20001404:	20004bcc 	andcs	r4, r0, ip, asr #23
20001408:	20003794 	mulcs	r0, r4, r7
2000140c:	20003668 	andcs	r3, r0, r8, ror #12
20001410:	20004bd8 	ldrdcs	r4, [r0], -r8
20001414:	20003750 	andcs	r3, r0, r0, asr r7
20001418:	200036a4 	andcs	r3, r0, r4, lsr #13
2000141c:	20004be4 	andcs	r4, r0, r4, ror #23
20001420:	200036bc 			; <UNDEFINED> instruction: 0x200036bc
20001424:	2000372c 	andcs	r3, r0, ip, lsr #14
20001428:	20004bf0 	strdcs	r4, [r0], -r0
2000142c:	2000376c 	andcs	r3, r0, ip, ror #14
20001430:	20003760 	andcs	r3, r0, r0, ror #14
20001434:	20004bfc 	strdcs	r4, [r0], -ip
20001438:	20003774 	andcs	r3, r0, r4, ror r7

2000143c <init_fire>:
	
void init_fire( GameObject *fireObj ) {
2000143c:	b590      	push	{r4, r7, lr}
2000143e:	b083      	sub	sp, #12
20001440:	af00      	add	r7, sp, #0
20001442:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20001444:	4b30      	ldr	r3, [pc, #192]	; (20001508 <init_fire+0xcc>)
20001446:	681b      	ldr	r3, [r3, #0]
20001448:	2b00      	cmp	r3, #0
2000144a:	d049      	beq.n	200014e0 <init_fire+0xa4>
		initSprites();
2000144c:	f7ff ff34 	bl	200012b8 <initSprites>
		firstTime = 0;			
20001450:	4b2d      	ldr	r3, [pc, #180]	; (20001508 <init_fire+0xcc>)
20001452:	2200      	movs	r2, #0
20001454:	601a      	str	r2, [r3, #0]

		fireImages[0] = fire1Image;
20001456:	4b2d      	ldr	r3, [pc, #180]	; (2000150c <init_fire+0xd0>)
20001458:	4a2d      	ldr	r2, [pc, #180]	; (20001510 <init_fire+0xd4>)
2000145a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000145c:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[1] = fire2Image;
2000145e:	4b2b      	ldr	r3, [pc, #172]	; (2000150c <init_fire+0xd0>)
20001460:	4a2c      	ldr	r2, [pc, #176]	; (20001514 <init_fire+0xd8>)
20001462:	330c      	adds	r3, #12
20001464:	ca13      	ldmia	r2!, {r0, r1, r4}
20001466:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[2] = fire3Image;
20001468:	4b28      	ldr	r3, [pc, #160]	; (2000150c <init_fire+0xd0>)
2000146a:	4a2b      	ldr	r2, [pc, #172]	; (20001518 <init_fire+0xdc>)
2000146c:	3318      	adds	r3, #24
2000146e:	ca13      	ldmia	r2!, {r0, r1, r4}
20001470:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[3] = fire4Image;
20001472:	4b26      	ldr	r3, [pc, #152]	; (2000150c <init_fire+0xd0>)
20001474:	4a29      	ldr	r2, [pc, #164]	; (2000151c <init_fire+0xe0>)
20001476:	3324      	adds	r3, #36	; 0x24
20001478:	ca13      	ldmia	r2!, {r0, r1, r4}
2000147a:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[4] = fire5Image;
2000147c:	4b23      	ldr	r3, [pc, #140]	; (2000150c <init_fire+0xd0>)
2000147e:	4a28      	ldr	r2, [pc, #160]	; (20001520 <init_fire+0xe4>)
20001480:	3330      	adds	r3, #48	; 0x30
20001482:	ca13      	ldmia	r2!, {r0, r1, r4}
20001484:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&fireImages[0], fireBlack, fire1Gray, fire1Light);
20001486:	4b27      	ldr	r3, [pc, #156]	; (20001524 <init_fire+0xe8>)
20001488:	6819      	ldr	r1, [r3, #0]
2000148a:	4b27      	ldr	r3, [pc, #156]	; (20001528 <init_fire+0xec>)
2000148c:	681a      	ldr	r2, [r3, #0]
2000148e:	4b27      	ldr	r3, [pc, #156]	; (2000152c <init_fire+0xf0>)
20001490:	681b      	ldr	r3, [r3, #0]
20001492:	481e      	ldr	r0, [pc, #120]	; (2000150c <init_fire+0xd0>)
20001494:	f7ff fefc 	bl	20001290 <load_image>
		load_image(&fireImages[1], fireBlack, fire2Gray, fire2Light);
20001498:	4b22      	ldr	r3, [pc, #136]	; (20001524 <init_fire+0xe8>)
2000149a:	6819      	ldr	r1, [r3, #0]
2000149c:	4b24      	ldr	r3, [pc, #144]	; (20001530 <init_fire+0xf4>)
2000149e:	681a      	ldr	r2, [r3, #0]
200014a0:	4b24      	ldr	r3, [pc, #144]	; (20001534 <init_fire+0xf8>)
200014a2:	681b      	ldr	r3, [r3, #0]
200014a4:	4824      	ldr	r0, [pc, #144]	; (20001538 <init_fire+0xfc>)
200014a6:	f7ff fef3 	bl	20001290 <load_image>
		load_image(&fireImages[2], fireBlack, fire3Gray, fire3Light);
200014aa:	4b1e      	ldr	r3, [pc, #120]	; (20001524 <init_fire+0xe8>)
200014ac:	6819      	ldr	r1, [r3, #0]
200014ae:	4b23      	ldr	r3, [pc, #140]	; (2000153c <init_fire+0x100>)
200014b0:	681a      	ldr	r2, [r3, #0]
200014b2:	4b23      	ldr	r3, [pc, #140]	; (20001540 <init_fire+0x104>)
200014b4:	681b      	ldr	r3, [r3, #0]
200014b6:	4823      	ldr	r0, [pc, #140]	; (20001544 <init_fire+0x108>)
200014b8:	f7ff feea 	bl	20001290 <load_image>
		load_image(&fireImages[3], fireBlack, fire4Gray, fire4Light);
200014bc:	4b19      	ldr	r3, [pc, #100]	; (20001524 <init_fire+0xe8>)
200014be:	6819      	ldr	r1, [r3, #0]
200014c0:	4b21      	ldr	r3, [pc, #132]	; (20001548 <init_fire+0x10c>)
200014c2:	681a      	ldr	r2, [r3, #0]
200014c4:	4b21      	ldr	r3, [pc, #132]	; (2000154c <init_fire+0x110>)
200014c6:	681b      	ldr	r3, [r3, #0]
200014c8:	4821      	ldr	r0, [pc, #132]	; (20001550 <init_fire+0x114>)
200014ca:	f7ff fee1 	bl	20001290 <load_image>
		load_image(&fireImages[4], fireBlack, fire5Gray, fire5Light);
200014ce:	4b15      	ldr	r3, [pc, #84]	; (20001524 <init_fire+0xe8>)
200014d0:	6819      	ldr	r1, [r3, #0]
200014d2:	4b20      	ldr	r3, [pc, #128]	; (20001554 <init_fire+0x118>)
200014d4:	681a      	ldr	r2, [r3, #0]
200014d6:	4b20      	ldr	r3, [pc, #128]	; (20001558 <init_fire+0x11c>)
200014d8:	681b      	ldr	r3, [r3, #0]
200014da:	4820      	ldr	r0, [pc, #128]	; (2000155c <init_fire+0x120>)
200014dc:	f7ff fed8 	bl	20001290 <load_image>
	}
	
	fireObj->images = fireImages;
200014e0:	687b      	ldr	r3, [r7, #4]
200014e2:	4a0a      	ldr	r2, [pc, #40]	; (2000150c <init_fire+0xd0>)
200014e4:	601a      	str	r2, [r3, #0]

	fireObj->current_frame = 0;
200014e6:	687b      	ldr	r3, [r7, #4]
200014e8:	2200      	movs	r2, #0
200014ea:	615a      	str	r2, [r3, #20]
	fireObj->n_frames = 5;
200014ec:	687b      	ldr	r3, [r7, #4]
200014ee:	2205      	movs	r2, #5
200014f0:	619a      	str	r2, [r3, #24]
	fireObj->animation_speed = 1;
200014f2:	687b      	ldr	r3, [r7, #4]
200014f4:	2201      	movs	r2, #1
200014f6:	61da      	str	r2, [r3, #28]
	fireObj->animation_counter = 0;
200014f8:	687b      	ldr	r3, [r7, #4]
200014fa:	2200      	movs	r2, #0
200014fc:	621a      	str	r2, [r3, #32]
}
200014fe:	46c0      	nop			; (mov r8, r8)
20001500:	46bd      	mov	sp, r7
20001502:	b003      	add	sp, #12
20001504:	bd90      	pop	{r4, r7, pc}
20001506:	46c0      	nop			; (mov r8, r8)
20001508:	20004c08 	andcs	r4, r0, r8, lsl #24
2000150c:	200036f0 	strdcs	r3, [r0], -r0
20001510:	200036b0 			; <UNDEFINED> instruction: 0x200036b0
20001514:	20003674 	andcs	r3, r0, r4, ror r6
20001518:	20003698 	mulcs	r0, r8, r6
2000151c:	20003744 	andcs	r3, r0, r4, asr #14
20001520:	200036e4 	andcs	r3, r0, r4, ror #13
20001524:	20003784 	andcs	r3, r0, r4, lsl #15
20001528:	2000379c 	mulcs	r0, ip, r7
2000152c:	20003654 	andcs	r3, r0, r4, asr r6
20001530:	20003798 	mulcs	r0, r8, r7
20001534:	20003770 	andcs	r3, r0, r0, ror r7
20001538:	200036fc 	strdcs	r3, [r0], -ip
2000153c:	20003664 	andcs	r3, r0, r4, ror #12
20001540:	20003794 	mulcs	r0, r4, r7
20001544:	20003708 	andcs	r3, r0, r8, lsl #14
20001548:	20003750 	andcs	r3, r0, r0, asr r7
2000154c:	200036bc 			; <UNDEFINED> instruction: 0x200036bc
20001550:	20003714 	andcs	r3, r0, r4, lsl r7
20001554:	2000376c 	andcs	r3, r0, ip, ror #14
20001558:	20003774 	andcs	r3, r0, r4, ror r7
2000155c:	20003720 	andcs	r3, r0, r0, lsr #14

20001560 <playerUpdate>:
#include "gpio.h"
#include "controls.h"
#include "gameobject.h"
#include "player.h"

void playerUpdate(GameObject *this) {
20001560:	b580      	push	{r7, lr}
20001562:	b082      	sub	sp, #8
20001564:	af00      	add	r7, sp, #0
20001566:	6078      	str	r0, [r7, #4]
	this->animation_counter++;
20001568:	687b      	ldr	r3, [r7, #4]
2000156a:	6a1b      	ldr	r3, [r3, #32]
2000156c:	1c5a      	adds	r2, r3, #1
2000156e:	687b      	ldr	r3, [r7, #4]
20001570:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
20001572:	687b      	ldr	r3, [r7, #4]
20001574:	6a1a      	ldr	r2, [r3, #32]
20001576:	687b      	ldr	r3, [r7, #4]
20001578:	69db      	ldr	r3, [r3, #28]
2000157a:	429a      	cmp	r2, r3
2000157c:	d10f      	bne.n	2000159e <playerUpdate+0x3e>
		this->animation_counter = 0;
2000157e:	687b      	ldr	r3, [r7, #4]
20001580:	2200      	movs	r2, #0
20001582:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
20001584:	687b      	ldr	r3, [r7, #4]
20001586:	695b      	ldr	r3, [r3, #20]
20001588:	1c5a      	adds	r2, r3, #1
2000158a:	687b      	ldr	r3, [r7, #4]
2000158c:	699b      	ldr	r3, [r3, #24]
2000158e:	0019      	movs	r1, r3
20001590:	0010      	movs	r0, r2
20001592:	f000 f937 	bl	20001804 <__aeabi_idivmod>
20001596:	000b      	movs	r3, r1
20001598:	001a      	movs	r2, r3
2000159a:	687b      	ldr	r3, [r7, #4]
2000159c:	615a      	str	r2, [r3, #20]
	
	static lastRightValue = 0;
	static lastLeftValue = 0; 
	static speed = 0;
	
	if (!lastRightValue && read_DIL_single(RIGHT_TRIGGER)){
2000159e:	4b23      	ldr	r3, [pc, #140]	; (2000162c <playerUpdate+0xcc>)
200015a0:	681b      	ldr	r3, [r3, #0]
200015a2:	2b00      	cmp	r3, #0
200015a4:	d109      	bne.n	200015ba <playerUpdate+0x5a>
200015a6:	2000      	movs	r0, #0
200015a8:	f7ff fe58 	bl	2000125c <read_DIL_single>
200015ac:	1e03      	subs	r3, r0, #0
200015ae:	d004      	beq.n	200015ba <playerUpdate+0x5a>
		speed += SPEED_ADD;
200015b0:	4b1f      	ldr	r3, [pc, #124]	; (20001630 <playerUpdate+0xd0>)
200015b2:	681b      	ldr	r3, [r3, #0]
200015b4:	1cda      	adds	r2, r3, #3
200015b6:	4b1e      	ldr	r3, [pc, #120]	; (20001630 <playerUpdate+0xd0>)
200015b8:	601a      	str	r2, [r3, #0]
	}
	
	if (!lastLeftValue && read_DIL_single(LEFT_TRIGGER)){
200015ba:	4b1e      	ldr	r3, [pc, #120]	; (20001634 <playerUpdate+0xd4>)
200015bc:	681b      	ldr	r3, [r3, #0]
200015be:	2b00      	cmp	r3, #0
200015c0:	d109      	bne.n	200015d6 <playerUpdate+0x76>
200015c2:	2007      	movs	r0, #7
200015c4:	f7ff fe4a 	bl	2000125c <read_DIL_single>
200015c8:	1e03      	subs	r3, r0, #0
200015ca:	d004      	beq.n	200015d6 <playerUpdate+0x76>
		speed -= SPEED_ADD;
200015cc:	4b18      	ldr	r3, [pc, #96]	; (20001630 <playerUpdate+0xd0>)
200015ce:	681b      	ldr	r3, [r3, #0]
200015d0:	1eda      	subs	r2, r3, #3
200015d2:	4b17      	ldr	r3, [pc, #92]	; (20001630 <playerUpdate+0xd0>)
200015d4:	601a      	str	r2, [r3, #0]
	}
	
	this->xPos += speed;
200015d6:	687b      	ldr	r3, [r7, #4]
200015d8:	685a      	ldr	r2, [r3, #4]
200015da:	4b15      	ldr	r3, [pc, #84]	; (20001630 <playerUpdate+0xd0>)
200015dc:	681b      	ldr	r3, [r3, #0]
200015de:	18d2      	adds	r2, r2, r3
200015e0:	687b      	ldr	r3, [r7, #4]
200015e2:	605a      	str	r2, [r3, #4]
	
	if (speed > 0){
200015e4:	4b12      	ldr	r3, [pc, #72]	; (20001630 <playerUpdate+0xd0>)
200015e6:	681b      	ldr	r3, [r3, #0]
200015e8:	2b00      	cmp	r3, #0
200015ea:	dd05      	ble.n	200015f8 <playerUpdate+0x98>
		speed--;
200015ec:	4b10      	ldr	r3, [pc, #64]	; (20001630 <playerUpdate+0xd0>)
200015ee:	681b      	ldr	r3, [r3, #0]
200015f0:	1e5a      	subs	r2, r3, #1
200015f2:	4b0f      	ldr	r3, [pc, #60]	; (20001630 <playerUpdate+0xd0>)
200015f4:	601a      	str	r2, [r3, #0]
200015f6:	e008      	b.n	2000160a <playerUpdate+0xaa>
	}
	else if (speed < 0){
200015f8:	4b0d      	ldr	r3, [pc, #52]	; (20001630 <playerUpdate+0xd0>)
200015fa:	681b      	ldr	r3, [r3, #0]
200015fc:	2b00      	cmp	r3, #0
200015fe:	da04      	bge.n	2000160a <playerUpdate+0xaa>
		speed++;
20001600:	4b0b      	ldr	r3, [pc, #44]	; (20001630 <playerUpdate+0xd0>)
20001602:	681b      	ldr	r3, [r3, #0]
20001604:	1c5a      	adds	r2, r3, #1
20001606:	4b0a      	ldr	r3, [pc, #40]	; (20001630 <playerUpdate+0xd0>)
20001608:	601a      	str	r2, [r3, #0]
	}
	
	lastRightValue = read_DIL_single(RIGHT_TRIGGER);
2000160a:	2000      	movs	r0, #0
2000160c:	f7ff fe26 	bl	2000125c <read_DIL_single>
20001610:	0002      	movs	r2, r0
20001612:	4b06      	ldr	r3, [pc, #24]	; (2000162c <playerUpdate+0xcc>)
20001614:	601a      	str	r2, [r3, #0]
	lastLeftValue = read_DIL_single(LEFT_TRIGGER);
20001616:	2007      	movs	r0, #7
20001618:	f7ff fe20 	bl	2000125c <read_DIL_single>
2000161c:	0002      	movs	r2, r0
2000161e:	4b05      	ldr	r3, [pc, #20]	; (20001634 <playerUpdate+0xd4>)
20001620:	601a      	str	r2, [r3, #0]
	
20001622:	46c0      	nop			; (mov r8, r8)
20001624:	46bd      	mov	sp, r7
20001626:	b002      	add	sp, #8
20001628:	bd80      	pop	{r7, pc}
2000162a:	46c0      	nop			; (mov r8, r8)
2000162c:	20001818 	andcs	r1, r0, r8, lsl r8
20001630:	2000181c 	andcs	r1, r0, ip, lsl r8
20001634:	20001820 	andcs	r1, r0, r0, lsr #16

20001638 <__divsi3>:
20001638:	4603      	mov	r3, r0
2000163a:	430b      	orrs	r3, r1
2000163c:	d47f      	bmi.n	2000173e <__divsi3+0x106>
2000163e:	2200      	movs	r2, #0
20001640:	0843      	lsrs	r3, r0, #1
20001642:	428b      	cmp	r3, r1
20001644:	d374      	bcc.n	20001730 <__divsi3+0xf8>
20001646:	0903      	lsrs	r3, r0, #4
20001648:	428b      	cmp	r3, r1
2000164a:	d35f      	bcc.n	2000170c <__divsi3+0xd4>
2000164c:	0a03      	lsrs	r3, r0, #8
2000164e:	428b      	cmp	r3, r1
20001650:	d344      	bcc.n	200016dc <__divsi3+0xa4>
20001652:	0b03      	lsrs	r3, r0, #12
20001654:	428b      	cmp	r3, r1
20001656:	d328      	bcc.n	200016aa <__divsi3+0x72>
20001658:	0c03      	lsrs	r3, r0, #16
2000165a:	428b      	cmp	r3, r1
2000165c:	d30d      	bcc.n	2000167a <__divsi3+0x42>
2000165e:	22ff      	movs	r2, #255	; 0xff
20001660:	0209      	lsls	r1, r1, #8
20001662:	ba12      	rev	r2, r2
20001664:	0c03      	lsrs	r3, r0, #16
20001666:	428b      	cmp	r3, r1
20001668:	d302      	bcc.n	20001670 <__divsi3+0x38>
2000166a:	1212      	asrs	r2, r2, #8
2000166c:	0209      	lsls	r1, r1, #8
2000166e:	d065      	beq.n	2000173c <__divsi3+0x104>
20001670:	0b03      	lsrs	r3, r0, #12
20001672:	428b      	cmp	r3, r1
20001674:	d319      	bcc.n	200016aa <__divsi3+0x72>
20001676:	e000      	b.n	2000167a <__divsi3+0x42>
20001678:	0a09      	lsrs	r1, r1, #8
2000167a:	0bc3      	lsrs	r3, r0, #15
2000167c:	428b      	cmp	r3, r1
2000167e:	d301      	bcc.n	20001684 <__divsi3+0x4c>
20001680:	03cb      	lsls	r3, r1, #15
20001682:	1ac0      	subs	r0, r0, r3
20001684:	4152      	adcs	r2, r2
20001686:	0b83      	lsrs	r3, r0, #14
20001688:	428b      	cmp	r3, r1
2000168a:	d301      	bcc.n	20001690 <__divsi3+0x58>
2000168c:	038b      	lsls	r3, r1, #14
2000168e:	1ac0      	subs	r0, r0, r3
20001690:	4152      	adcs	r2, r2
20001692:	0b43      	lsrs	r3, r0, #13
20001694:	428b      	cmp	r3, r1
20001696:	d301      	bcc.n	2000169c <__divsi3+0x64>
20001698:	034b      	lsls	r3, r1, #13
2000169a:	1ac0      	subs	r0, r0, r3
2000169c:	4152      	adcs	r2, r2
2000169e:	0b03      	lsrs	r3, r0, #12
200016a0:	428b      	cmp	r3, r1
200016a2:	d301      	bcc.n	200016a8 <__divsi3+0x70>
200016a4:	030b      	lsls	r3, r1, #12
200016a6:	1ac0      	subs	r0, r0, r3
200016a8:	4152      	adcs	r2, r2
200016aa:	0ac3      	lsrs	r3, r0, #11
200016ac:	428b      	cmp	r3, r1
200016ae:	d301      	bcc.n	200016b4 <__divsi3+0x7c>
200016b0:	02cb      	lsls	r3, r1, #11
200016b2:	1ac0      	subs	r0, r0, r3
200016b4:	4152      	adcs	r2, r2
200016b6:	0a83      	lsrs	r3, r0, #10
200016b8:	428b      	cmp	r3, r1
200016ba:	d301      	bcc.n	200016c0 <__divsi3+0x88>
200016bc:	028b      	lsls	r3, r1, #10
200016be:	1ac0      	subs	r0, r0, r3
200016c0:	4152      	adcs	r2, r2
200016c2:	0a43      	lsrs	r3, r0, #9
200016c4:	428b      	cmp	r3, r1
200016c6:	d301      	bcc.n	200016cc <__divsi3+0x94>
200016c8:	024b      	lsls	r3, r1, #9
200016ca:	1ac0      	subs	r0, r0, r3
200016cc:	4152      	adcs	r2, r2
200016ce:	0a03      	lsrs	r3, r0, #8
200016d0:	428b      	cmp	r3, r1
200016d2:	d301      	bcc.n	200016d8 <__divsi3+0xa0>
200016d4:	020b      	lsls	r3, r1, #8
200016d6:	1ac0      	subs	r0, r0, r3
200016d8:	4152      	adcs	r2, r2
200016da:	d2cd      	bcs.n	20001678 <__divsi3+0x40>
200016dc:	09c3      	lsrs	r3, r0, #7
200016de:	428b      	cmp	r3, r1
200016e0:	d301      	bcc.n	200016e6 <__divsi3+0xae>
200016e2:	01cb      	lsls	r3, r1, #7
200016e4:	1ac0      	subs	r0, r0, r3
200016e6:	4152      	adcs	r2, r2
200016e8:	0983      	lsrs	r3, r0, #6
200016ea:	428b      	cmp	r3, r1
200016ec:	d301      	bcc.n	200016f2 <__divsi3+0xba>
200016ee:	018b      	lsls	r3, r1, #6
200016f0:	1ac0      	subs	r0, r0, r3
200016f2:	4152      	adcs	r2, r2
200016f4:	0943      	lsrs	r3, r0, #5
200016f6:	428b      	cmp	r3, r1
200016f8:	d301      	bcc.n	200016fe <__divsi3+0xc6>
200016fa:	014b      	lsls	r3, r1, #5
200016fc:	1ac0      	subs	r0, r0, r3
200016fe:	4152      	adcs	r2, r2
20001700:	0903      	lsrs	r3, r0, #4
20001702:	428b      	cmp	r3, r1
20001704:	d301      	bcc.n	2000170a <__divsi3+0xd2>
20001706:	010b      	lsls	r3, r1, #4
20001708:	1ac0      	subs	r0, r0, r3
2000170a:	4152      	adcs	r2, r2
2000170c:	08c3      	lsrs	r3, r0, #3
2000170e:	428b      	cmp	r3, r1
20001710:	d301      	bcc.n	20001716 <__divsi3+0xde>
20001712:	00cb      	lsls	r3, r1, #3
20001714:	1ac0      	subs	r0, r0, r3
20001716:	4152      	adcs	r2, r2
20001718:	0883      	lsrs	r3, r0, #2
2000171a:	428b      	cmp	r3, r1
2000171c:	d301      	bcc.n	20001722 <__divsi3+0xea>
2000171e:	008b      	lsls	r3, r1, #2
20001720:	1ac0      	subs	r0, r0, r3
20001722:	4152      	adcs	r2, r2
20001724:	0843      	lsrs	r3, r0, #1
20001726:	428b      	cmp	r3, r1
20001728:	d301      	bcc.n	2000172e <__divsi3+0xf6>
2000172a:	004b      	lsls	r3, r1, #1
2000172c:	1ac0      	subs	r0, r0, r3
2000172e:	4152      	adcs	r2, r2
20001730:	1a41      	subs	r1, r0, r1
20001732:	d200      	bcs.n	20001736 <__divsi3+0xfe>
20001734:	4601      	mov	r1, r0
20001736:	4152      	adcs	r2, r2
20001738:	4610      	mov	r0, r2
2000173a:	4770      	bx	lr
2000173c:	e05d      	b.n	200017fa <__divsi3+0x1c2>
2000173e:	0fca      	lsrs	r2, r1, #31
20001740:	d000      	beq.n	20001744 <__divsi3+0x10c>
20001742:	4249      	negs	r1, r1
20001744:	1003      	asrs	r3, r0, #32
20001746:	d300      	bcc.n	2000174a <__divsi3+0x112>
20001748:	4240      	negs	r0, r0
2000174a:	4053      	eors	r3, r2
2000174c:	2200      	movs	r2, #0
2000174e:	469c      	mov	ip, r3
20001750:	0903      	lsrs	r3, r0, #4
20001752:	428b      	cmp	r3, r1
20001754:	d32d      	bcc.n	200017b2 <__divsi3+0x17a>
20001756:	0a03      	lsrs	r3, r0, #8
20001758:	428b      	cmp	r3, r1
2000175a:	d312      	bcc.n	20001782 <__divsi3+0x14a>
2000175c:	22fc      	movs	r2, #252	; 0xfc
2000175e:	0189      	lsls	r1, r1, #6
20001760:	ba12      	rev	r2, r2
20001762:	0a03      	lsrs	r3, r0, #8
20001764:	428b      	cmp	r3, r1
20001766:	d30c      	bcc.n	20001782 <__divsi3+0x14a>
20001768:	0189      	lsls	r1, r1, #6
2000176a:	1192      	asrs	r2, r2, #6
2000176c:	428b      	cmp	r3, r1
2000176e:	d308      	bcc.n	20001782 <__divsi3+0x14a>
20001770:	0189      	lsls	r1, r1, #6
20001772:	1192      	asrs	r2, r2, #6
20001774:	428b      	cmp	r3, r1
20001776:	d304      	bcc.n	20001782 <__divsi3+0x14a>
20001778:	0189      	lsls	r1, r1, #6
2000177a:	d03a      	beq.n	200017f2 <__divsi3+0x1ba>
2000177c:	1192      	asrs	r2, r2, #6
2000177e:	e000      	b.n	20001782 <__divsi3+0x14a>
20001780:	0989      	lsrs	r1, r1, #6
20001782:	09c3      	lsrs	r3, r0, #7
20001784:	428b      	cmp	r3, r1
20001786:	d301      	bcc.n	2000178c <__divsi3+0x154>
20001788:	01cb      	lsls	r3, r1, #7
2000178a:	1ac0      	subs	r0, r0, r3
2000178c:	4152      	adcs	r2, r2
2000178e:	0983      	lsrs	r3, r0, #6
20001790:	428b      	cmp	r3, r1
20001792:	d301      	bcc.n	20001798 <__divsi3+0x160>
20001794:	018b      	lsls	r3, r1, #6
20001796:	1ac0      	subs	r0, r0, r3
20001798:	4152      	adcs	r2, r2
2000179a:	0943      	lsrs	r3, r0, #5
2000179c:	428b      	cmp	r3, r1
2000179e:	d301      	bcc.n	200017a4 <__divsi3+0x16c>
200017a0:	014b      	lsls	r3, r1, #5
200017a2:	1ac0      	subs	r0, r0, r3
200017a4:	4152      	adcs	r2, r2
200017a6:	0903      	lsrs	r3, r0, #4
200017a8:	428b      	cmp	r3, r1
200017aa:	d301      	bcc.n	200017b0 <__divsi3+0x178>
200017ac:	010b      	lsls	r3, r1, #4
200017ae:	1ac0      	subs	r0, r0, r3
200017b0:	4152      	adcs	r2, r2
200017b2:	08c3      	lsrs	r3, r0, #3
200017b4:	428b      	cmp	r3, r1
200017b6:	d301      	bcc.n	200017bc <__divsi3+0x184>
200017b8:	00cb      	lsls	r3, r1, #3
200017ba:	1ac0      	subs	r0, r0, r3
200017bc:	4152      	adcs	r2, r2
200017be:	0883      	lsrs	r3, r0, #2
200017c0:	428b      	cmp	r3, r1
200017c2:	d301      	bcc.n	200017c8 <__divsi3+0x190>
200017c4:	008b      	lsls	r3, r1, #2
200017c6:	1ac0      	subs	r0, r0, r3
200017c8:	4152      	adcs	r2, r2
200017ca:	d2d9      	bcs.n	20001780 <__divsi3+0x148>
200017cc:	0843      	lsrs	r3, r0, #1
200017ce:	428b      	cmp	r3, r1
200017d0:	d301      	bcc.n	200017d6 <__divsi3+0x19e>
200017d2:	004b      	lsls	r3, r1, #1
200017d4:	1ac0      	subs	r0, r0, r3
200017d6:	4152      	adcs	r2, r2
200017d8:	1a41      	subs	r1, r0, r1
200017da:	d200      	bcs.n	200017de <__divsi3+0x1a6>
200017dc:	4601      	mov	r1, r0
200017de:	4663      	mov	r3, ip
200017e0:	4152      	adcs	r2, r2
200017e2:	105b      	asrs	r3, r3, #1
200017e4:	4610      	mov	r0, r2
200017e6:	d301      	bcc.n	200017ec <__divsi3+0x1b4>
200017e8:	4240      	negs	r0, r0
200017ea:	2b00      	cmp	r3, #0
200017ec:	d500      	bpl.n	200017f0 <__divsi3+0x1b8>
200017ee:	4249      	negs	r1, r1
200017f0:	4770      	bx	lr
200017f2:	4663      	mov	r3, ip
200017f4:	105b      	asrs	r3, r3, #1
200017f6:	d300      	bcc.n	200017fa <__divsi3+0x1c2>
200017f8:	4240      	negs	r0, r0
200017fa:	b501      	push	{r0, lr}
200017fc:	2000      	movs	r0, #0
200017fe:	f000 f805 	bl	2000180c <__aeabi_idiv0>
20001802:	bd02      	pop	{r1, pc}

20001804 <__aeabi_idivmod>:
20001804:	2900      	cmp	r1, #0
20001806:	d0f8      	beq.n	200017fa <__divsi3+0x1c2>
20001808:	e716      	b.n	20001638 <__divsi3>
2000180a:	4770      	bx	lr

2000180c <__aeabi_idiv0>:
2000180c:	4770      	bx	lr
2000180e:	46c0      	nop			; (mov r8, r8)

20001810 <counter>:
20001810:	00000000 	andeq	r0, r0, r0

20001814 <nGameObjects>:
20001814:	00000000 	andeq	r0, r0, r0

20001818 <lastRightValue.4092>:
20001818:	00000000 	andeq	r0, r0, r0

2000181c <speed.4094>:
2000181c:	00000000 	andeq	r0, r0, r0

20001820 <lastLeftValue.4093>:
20001820:	00000000 	andeq	r0, r0, r0

20001824 <monster>:
20001824:	00000000 	andeq	r0, r0, r0

20001828 <tempCastleBlack>:
	...

20001834 <tempTitleGray>:
	...

20001840 <castleBlack>:
20001840:	00000000 	andeq	r0, r0, r0

20001844 <tempMonster>:
	...

20001850 <tempTitleBlack>:
	...

2000185c <bg>:
2000185c:	00000000 	andeq	r0, r0, r0

20001860 <tempMonsterGray>:
	...

2000186c <tempTitleLight>:
	...

20001878 <castleLight>:
20001878:	00000000 	andeq	r0, r0, r0

2000187c <tempCastleLight>:
	...

20001888 <tempMonsterLight>:
	...

20001894 <titleGray>:
20001894:	00000000 	andeq	r0, r0, r0

20001898 <tempCastleGray>:
	...

200018a4 <monsterLight>:
200018a4:	00000000 	andeq	r0, r0, r0

200018a8 <titleLight>:
200018a8:	00000000 	andeq	r0, r0, r0

200018ac <castleGray>:
200018ac:	00000000 	andeq	r0, r0, r0

200018b0 <monsterGray>:
200018b0:	00000000 	andeq	r0, r0, r0

200018b4 <tempBg>:
	...

200018c0 <titleBlack>:
200018c0:	00000000 	andeq	r0, r0, r0

200018c4 <backBufferGray>:
	...

20001cc4 <draw_buffer_black_gray>:
	...

200020c4 <backBuffer>:
	...

200024c4 <draw_buffer_black_light>:
	...

200028c4 <draw_buffer_black>:
	...

20002cc4 <draw_buffer_black_gray_light>:
	...

200030c4 <backBufferLight>:
	...

200034c4 <gameObjects>:
	...

20003654 <fire1Light>:
20003654:	00000000 	andeq	r0, r0, r0

20003658 <tempFire3Light>:
	...

20003664 <fire3Gray>:
20003664:	00000000 	andeq	r0, r0, r0

20003668 <tempFire4Gray>:
	...

20003674 <fire2Image>:
	...

20003680 <tempFire2Gray>:
	...

2000368c <tempFireBlack>:
	...

20003698 <fire3Image>:
	...

200036a4 <tempFire4Light>:
	...

200036b0 <fire1Image>:
	...

200036bc <fire4Light>:
200036bc:	00000000 	andeq	r0, r0, r0

200036c0 <fireObj>:
	...

200036e4 <fire5Image>:
	...

200036f0 <fireImages>:
	...

2000372c <tempFire5Gray>:
	...

20003738 <tempFire3Gray>:
	...

20003744 <fire4Image>:
	...

20003750 <fire4Gray>:
20003750:	00000000 	andeq	r0, r0, r0

20003754 <tempFire1Light>:
	...

20003760 <tempFire5Light>:
	...

2000376c <fire5Gray>:
2000376c:	00000000 	andeq	r0, r0, r0

20003770 <fire2Light>:
20003770:	00000000 	andeq	r0, r0, r0

20003774 <fire5Light>:
20003774:	00000000 	andeq	r0, r0, r0

20003778 <tempFire1Gray>:
	...

20003784 <fireBlack>:
20003784:	00000000 	andeq	r0, r0, r0

20003788 <tempFire2Light>:
	...

20003794 <fire3Light>:
20003794:	00000000 	andeq	r0, r0, r0

20003798 <fire2Gray>:
20003798:	00000000 	andeq	r0, r0, r0

2000379c <fire1Gray>:
2000379c:	00000000 	andeq	r0, r0, r0

200037a0 <monster_black_bits>:
	...
200037b0:	0001c000 	andeq	ip, r1, r0
200037b4:	00023000 	andeq	r3, r2, r0
200037b8:	00021000 	andeq	r1, r2, r0
200037bc:	00060800 	andeq	r0, r6, r0, lsl #16
200037c0:	00040800 	andeq	r0, r4, r0, lsl #16
200037c4:	00040800 	andeq	r0, r4, r0, lsl #16
200037c8:	00092800 	andeq	r2, r9, r0, lsl #16
200037cc:	00092800 	andeq	r2, r9, r0, lsl #16
200037d0:	00100400 	andseq	r0, r0, r0, lsl #8
200037d4:	00100400 	andseq	r0, r0, r0, lsl #8
200037d8:	00200200 	eoreq	r0, r0, r0, lsl #4
200037dc:	00661b00 	rsbeq	r1, r6, r0, lsl #22
200037e0:	0043b100 	subeq	fp, r3, r0, lsl #2
200037e4:	0080e080 	addeq	lr, r0, r0, lsl #1
200037e8:	01800080 	orreq	r0, r0, r0, lsl #1
200037ec:	01000040 	tsteq	r0, r0, asr #32
200037f0:	02000040 	andeq	r0, r0, #64	; 0x40
200037f4:	02000060 	andeq	r0, r0, #96	; 0x60
200037f8:	02000020 	andeq	r0, r0, #32
200037fc:	03ff03e0 	mvnseq	r0, #224, 6	; 0x80000003
20003800:	0001fc00 	andeq	pc, r1, r0, lsl #24
	...

20003818 <monster_light_bits>:
	...
2000382c:	00010000 	andeq	r0, r1, r0
20003830:	00018000 	andeq	r8, r1, r0
20003834:	0001f000 	andeq	pc, r1, r0
20003838:	0001f000 	andeq	pc, r1, r0
2000383c:	00009000 	andeq	r9, r0, r0
20003840:	00009000 	andeq	r9, r0, r0
20003844:	0000d000 	andeq	sp, r0, r0
20003848:	0001f800 	andeq	pc, r1, r0, lsl #16
2000384c:	0003f800 	andeq	pc, r3, r0, lsl #16
20003850:	0003fc00 	andeq	pc, r3, r0, lsl #24
20003854:	0001e400 	andeq	lr, r1, r0, lsl #8
20003858:	00044c00 	andeq	r4, r4, r0, lsl #24
2000385c:	00060c00 	andeq	r0, r6, r0, lsl #24
20003860:	0006ee00 	andeq	lr, r6, r0, lsl #28
20003864:	000ffe00 	andeq	pc, pc, r0, lsl #28
20003868:	000f3f00 	andeq	r3, pc, r0, lsl #30
2000386c:	00000780 	andeq	r0, r0, r0, lsl #15
20003870:	000003c0 	andeq	r0, r0, r0, asr #7
	...

20003890 <monster_gray_bits>:
	...
200038b0:	00020000 	andeq	r0, r2, r0
200038b4:	00000000 	andeq	r0, r0, r0
200038b8:	00040000 	andeq	r0, r4, r0
200038bc:	00060000 	andeq	r0, r6, r0
200038c0:	000e0000 	andeq	r0, lr, r0
200038c4:	000c0000 	andeq	r0, ip, r0
200038c8:	001c0000 	andseq	r0, ip, r0
200038cc:	00180000 	andseq	r0, r8, r0
200038d0:	00380000 	eorseq	r0, r8, r0
200038d4:	00780000 	rsbseq	r0, r8, r0
200038d8:	00780000 	rsbseq	r0, r8, r0
200038dc:	00f00000 	rscseq	r0, r0, r0
200038e0:	01f0c000 	mvnseq	ip, r0
200038e4:	01fff800 	mvnseq	pc, r0, lsl #16
200038e8:	01fffc00 	mvnseq	pc, r0, lsl #24
200038ec:	0000fc00 	andeq	pc, r0, r0, lsl #24
	...

20003908 <castle_black_bits>:
20003908:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000390c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003910:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20003914:	00000000 	andeq	r0, r0, r0
20003918:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000391c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003920:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20003924:	00000000 	andeq	r0, r0, r0
20003928:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000392c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003930:	00000001 	andeq	r0, r0, r1
20003934:	00000000 	andeq	r0, r0, r0
20003938:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000393c:	7fffffff 	svcvc	0x00ffffff
	...
20003948:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000394c:	3fffffff 	svccc	0x00ffffff
	...
20003958:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000395c:	1fffffff 	svcne	0x00ffffff
	...
20003968:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000396c:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
	...
20003978:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000397c:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
	...
20003988:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000398c:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20003a93 <castle_black_bits+0x18b>	; <UNPREDICTABLE>
	...
20003998:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000399c:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
	...
200039a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200039ac:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
	...
200039b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200039bc:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
200039c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200039cc:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
200039d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200039dc:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
200039e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200039ec:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
200039f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200039fc:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
20003a08:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003a0c:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20003a18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003a1c:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20003a28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003a2c:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
20003a38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003a3c:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20003a48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003a4c:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20003a58:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003a5c:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20003a68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003a6c:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
20003a70:	04900000 	ldreq	r0, [r0], #0
20003a74:	00000000 	andeq	r0, r0, r0
20003a78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003a7c:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
20003a80:	0b680000 	bleq	21a03a88 <firstTime.4076+0x19fee80>
20003a84:	00000000 	andeq	r0, r0, r0
20003a88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003a8c:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20003a90:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
20003a94:	00000000 	andeq	r0, r0, r0
20003a98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003a9c:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20003aa0:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
20003aa4:	00000092 	muleq	r0, r2, r0
20003aa8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003aac:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20003ab0:	04100000 	ldreq	r0, [r0], #-0
20003ab4:	0000016d 	andeq	r0, r0, sp, ror #2
20003ab8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003abc:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20003ac0:	04101240 	ldreq	r1, [r0], #-576	; 0xfffffdc0
20003ac4:	00000101 	andeq	r0, r0, r1, lsl #2
20003ac8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003acc:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20003ad0:	04102da0 	ldreq	r2, [r0], #-3488	; 0xfffff260
20003ad4:	00000101 	andeq	r0, r0, r1, lsl #2
20003ad8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003adc:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20003ae0:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
20003ae4:	00000101 	andeq	r0, r0, r1, lsl #2
20003ae8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003aec:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20003af0:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
20003af4:	00000101 	andeq	r0, r0, r1, lsl #2
20003af8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003afc:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20003b00:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20003b04:	00000082 	andeq	r0, r0, r2, lsl #1
20003b08:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003b0c:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20003b10:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20003b14:	00000092 	muleq	r0, r2, r0
20003b18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003b1c:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20003b20:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20003b24:	012400a2 	smulwbeq	r4, r2, r0
20003b28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003b2c:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20003b30:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20003b34:	02da00a2 	sbcseq	r0, sl, #162	; 0xa2
20003b38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003b3c:	00004fff 	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
20003b40:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20003b44:	020200a2 	andeq	r0, r2, #162	; 0xa2
20003b48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003b4c:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20003b50:	08081040 	stmdaeq	r8, {r6, ip}
20003b54:	0202009a 	andeq	r0, r2, #154	; 0x9a
20003b58:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003b5c:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20003b60:	08082020 	stmdaeq	r8, {r5, sp}
20003b64:	01040082 	smlabbeq	r4, r2, r0, r0
20003b68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003b6c:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20003b70:	48082020 	stmdami	r8, {r5, sp}
20003b74:	01040102 	tsteq	r4, r2, lsl #2
20003b78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003b7c:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20003b80:	b0082020 	andlt	r2, r8, r0, lsr #32
20003b84:	01040101 	tsteq	r4, r1, lsl #2
20003b88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003b8c:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20003b90:	00082220 	andeq	r2, r8, r0, lsr #4
20003b94:	01040100 	mrseq	r0, (UNDEF: 20)
20003b98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003b9c:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20003ba0:	00882420 	addeq	r2, r8, r0, lsr #8
20003ba4:	01040100 	mrseq	r0, (UNDEF: 20)
20003ba8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003bac:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20003bb0:	01082420 	tsteq	r8, r0, lsr #8
20003bb4:	01045a00 	tsteq	r4, r0, lsl #20
20003bb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003bbc:	0000007f 	andeq	r0, r0, pc, ror r0
20003bc0:	01082420 	tsteq	r8, r0, lsr #8
20003bc4:	0104a400 	tsteq	r4, r0, lsl #8
20003bc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003bcc:	00000001 	andeq	r0, r0, r1
20003bd0:	010b2320 	tsteq	fp, r0, lsr #6
20003bd4:	01030001 	tsteq	r3, r1
20003bd8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003bdc:	00000000 	andeq	r0, r0, r0
20003be0:	00c4c020 	sbceq	ip, r4, r0, lsr #32
20003be4:	02000002 	andeq	r0, r0, #2
20003be8:	3fffffff 	svccc	0x00ffffff
20003bec:	00000000 	andeq	r0, r0, r0
20003bf0:	00000020 	andeq	r0, r0, r0, lsr #32
20003bf4:	02200002 	eoreq	r0, r0, #2
20003bf8:	3fffffff 	svccc	0x00ffffff
20003bfc:	00000000 	andeq	r0, r0, r0
20003c00:	00000020 	andeq	r0, r0, r0, lsr #32
20003c04:	02400002 	subeq	r0, r0, #2
20003c08:	1fffffff 	svcne	0x00ffffff
20003c0c:	00000000 	andeq	r0, r0, r0
20003c10:	80000020 	andhi	r0, r0, r0, lsr #32
20003c14:	02400001 	subeq	r0, r0, #1
20003c18:	1fffffff 	svcne	0x00ffffff
20003c1c:	00000000 	andeq	r0, r0, r0
20003c20:	00000010 	andeq	r0, r0, r0, lsl r0
20003c24:	02400000 	subeq	r0, r0, #0
20003c28:	0fffffff 	svceq	0x00ffffff
20003c2c:	00000000 	andeq	r0, r0, r0
20003c30:	00000010 	andeq	r0, r0, r0, lsl r0
20003c34:	02300000 	eorseq	r0, r0, #0
20003c38:	0fffffff 	svceq	0x00ffffff
20003c3c:	00000000 	andeq	r0, r0, r0
20003c40:	00000010 	andeq	r0, r0, r0, lsl r0
20003c44:	02000000 	andeq	r0, r0, #0
20003c48:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
20003c4c:	00000000 	andeq	r0, r0, r0
20003c50:	00000010 	andeq	r0, r0, r0, lsl r0
20003c54:	04000000 	streq	r0, [r0], #-0
20003c58:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
20003c5c:	00000000 	andeq	r0, r0, r0
20003c60:	00000010 	andeq	r0, r0, r0, lsl r0
20003c64:	04000000 	streq	r0, [r0], #-0
20003c68:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20003d6f <castle_gray_bits+0x67>	; <UNPREDICTABLE>
20003c6c:	00000000 	andeq	r0, r0, r0
20003c70:	00000008 	andeq	r0, r0, r8
20003c74:	04000000 	streq	r0, [r0], #-0
20003c78:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20003d7f <castle_gray_bits+0x77>	; <UNPREDICTABLE>
20003c7c:	00000000 	andeq	r0, r0, r0
20003c80:	00000008 	andeq	r0, r0, r8
20003c84:	04000000 	streq	r0, [r0], #-0
20003c88:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20003c8c:	00000000 	andeq	r0, r0, r0
20003c90:	00000008 	andeq	r0, r0, r8
20003c94:	060001c0 	streq	r0, [r0], -r0, asr #3
20003c98:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20003c9c:	00000000 	andeq	r0, r0, r0
20003ca0:	00000008 	andeq	r0, r0, r8
20003ca4:	04000220 	streq	r0, [r0], #-544	; 0xfffffde0
20003ca8:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
20003cac:	00000000 	andeq	r0, r0, r0
20003cb0:	00000008 	andeq	r0, r0, r8
20003cb4:	04100400 	ldreq	r0, [r0], #-1024	; 0xfffffc00
20003cb8:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
20003cbc:	00000000 	andeq	r0, r0, r0
20003cc0:	00000008 	andeq	r0, r0, r8
20003cc4:	04a00400 	strteq	r0, [r0], #1024	; 0x400
20003cc8:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
20003ccc:	00000000 	andeq	r0, r0, r0
20003cd0:	00000008 	andeq	r0, r0, r8
20003cd4:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
20003cd8:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
20003cdc:	00000000 	andeq	r0, r0, r0
20003ce0:	00000008 	andeq	r0, r0, r8
20003ce4:	07400400 	strbeq	r0, [r0, -r0, lsl #8]
20003ce8:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20003cec:	00000000 	andeq	r0, r0, r0
20003cf0:	00000008 	andeq	r0, r0, r8
20003cf4:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
20003cf8:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20003cfc:	00000000 	andeq	r0, r0, r0
20003d00:	00000008 	andeq	r0, r0, r8
20003d04:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00

20003d08 <castle_gray_bits>:
	...
20003d10:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20003d14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
20003d20:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20003d24:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
20003d30:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20003d34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003d38:	00000000 	andeq	r0, r0, r0
20003d3c:	80000000 	andhi	r0, r0, r0
20003d40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003d44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003d48:	00000000 	andeq	r0, r0, r0
20003d4c:	c0000000 	andgt	r0, r0, r0
20003d50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003d54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003d58:	00000000 	andeq	r0, r0, r0
20003d5c:	e0000000 	and	r0, r0, r0
20003d60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003d64:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
20003d68:	00000000 	andeq	r0, r0, r0
20003d6c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20003d70:	f3ffcfff 			; <UNDEFINED> instruction: 0xf3ffcfff
20003d74:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
20003d78:	00000000 	andeq	r0, r0, r0
20003d7c:	fc000000 	stc2	0, cr0, [r0], {-0}
20003d80:	f1ff8fff 			; <UNDEFINED> instruction: 0xf1ff8fff
20003d84:	fff9ff3f 			; <UNDEFINED> instruction: 0xfff9ff3f
20003d88:	00000000 	andeq	r0, r0, r0
20003d8c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20003d90:	f0ff8fef 			; <UNDEFINED> instruction: 0xf0ff8fef
20003d94:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
20003d98:	00000000 	andeq	r0, r0, r0
20003d9c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20003da0:	e0ff87ef 	rscs	r8, pc, pc, ror #15
20003da4:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
20003da8:	00000000 	andeq	r0, r0, r0
20003dac:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20003db0:	c07e07e7 	rsbsgt	r0, lr, r7, ror #15
20003db4:	ffe0fc1f 			; <UNDEFINED> instruction: 0xffe0fc1f
20003db8:	00000000 	andeq	r0, r0, r0
20003dbc:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20003dc0:	001c07e7 	andseq	r0, ip, r7, ror #15
20003dc4:	ffe0380e 	vcmla.f32	d19, d0, d14[0], #170
20003dc8:	00000000 	andeq	r0, r0, r0
20003dcc:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20003dd0:	000003e3 	andeq	r0, r0, r3, ror #7
20003dd4:	f7c00000 			; <UNDEFINED> instruction: 0xf7c00000
20003dd8:	00000000 	andeq	r0, r0, r0
20003ddc:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20003de0:	000001c3 	andeq	r0, r0, r3, asr #3
20003de4:	e7800000 	str	r0, [r0, r0]
20003de8:	00000000 	andeq	r0, r0, r0
20003dec:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20003df0:	00000003 	andeq	r0, r0, r3
20003df4:	c3800000 	orrgt	r0, r0, #0
20003df8:	00000000 	andeq	r0, r0, r0
20003dfc:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20003e00:	00000001 	andeq	r0, r0, r1
20003e04:	c0000000 	andgt	r0, r0, r0
20003e08:	00000000 	andeq	r0, r0, r0
20003e0c:	9ff00000 	svcls	0x00f00000	; IMB
20003e10:	00000001 	andeq	r0, r0, r1
20003e14:	80000000 	andhi	r0, r0, r0
20003e18:	00000000 	andeq	r0, r0, r0
20003e1c:	8ff00000 	svchi	0x00f00000	; IMB
20003e20:	00000000 	andeq	r0, r0, r0
20003e24:	80000000 	andhi	r0, r0, r0
20003e28:	00000000 	andeq	r0, r0, r0
20003e2c:	8ff80000 	svchi	0x00f80000
	...
20003e3c:	0ffc0000 	svceq	0x00fc0000
	...
20003e4c:	0ffc0000 	svceq	0x00fc0000
	...
20003e5c:	0ffc0000 	svceq	0x00fc0000
	...
20003e6c:	0ffc0000 	svceq	0x00fc0000
	...
20003e7c:	0ffc0000 	svceq	0x00fc0000
	...
20003e8c:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
20003e9c:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
20003eac:	07fe0000 	ldrbeq	r0, [lr, r0]!
20003eb0:	03800000 	orreq	r0, r0, #0
	...
20003ebc:	03fe0000 	mvnseq	r0, #0
20003ec0:	02000000 	andeq	r0, r0, #0
	...
20003ecc:	03ff0000 	mvnseq	r0, #0
20003ed0:	02000000 	andeq	r0, r0, #0
	...
20003edc:	03ff0000 	mvnseq	r0, #0
20003ee0:	02000000 	andeq	r0, r0, #0
	...
20003eec:	03ff0000 	mvnseq	r0, #0
20003ef0:	02000000 	andeq	r0, r0, #0
	...
20003efc:	03ff0000 	mvnseq	r0, #0
20003f00:	02800c00 	addeq	r0, r0, #0, 24
20003f04:	00000060 	andeq	r0, r0, r0, rrx
20003f08:	00000000 	andeq	r0, r0, r0
20003f0c:	03ff0000 	mvnseq	r0, #0
20003f10:	03000800 	movweq	r0, #2048	; 0x800
20003f14:	00000040 	andeq	r0, r0, r0, asr #32
20003f18:	00000000 	andeq	r0, r0, r0
20003f1c:	03ff0000 	mvnseq	r0, #0
20003f20:	03000800 	movweq	r0, #2048	; 0x800
20003f24:	00000040 	andeq	r0, r0, r0, asr #32
20003f28:	00000000 	andeq	r0, r0, r0
20003f2c:	03ff8000 	mvnseq	r8, #0
20003f30:	03000a00 	movweq	r0, #2560	; 0xa00
20003f34:	00000040 	andeq	r0, r0, r0, asr #32
20003f38:	00000000 	andeq	r0, r0, r0
20003f3c:	01ffb000 	mvnseq	fp, r0
20003f40:	03000c00 	movweq	r0, #3072	; 0xc00
20003f44:	00000040 	andeq	r0, r0, r0, asr #32
20003f48:	00000000 	andeq	r0, r0, r0
20003f4c:	01fff800 	mvnseq	pc, r0, lsl #16
20003f50:	07800c00 	streq	r0, [r0, r0, lsl #24]
20003f54:	00000060 	andeq	r0, r0, r0, rrx
20003f58:	00000000 	andeq	r0, r0, r0
20003f5c:	01fffc00 	mvnseq	pc, r0, lsl #24
20003f60:	04001800 	streq	r1, [r0], #-2048	; 0xfffff800
20003f64:	00c00058 	sbceq	r0, r0, r8, asr r0
20003f68:	00000000 	andeq	r0, r0, r0
20003f6c:	00fffc00 	rscseq	pc, pc, r0, lsl #24
20003f70:	06001400 	streq	r1, [r0], -r0, lsl #8
20003f74:	00c000c0 	sbceq	r0, r0, r0, asr #1
20003f78:	00000000 	andeq	r0, r0, r0
20003f7c:	007ffc00 	rsbseq	pc, pc, r0, lsl #24
20003f80:	45001000 	strmi	r1, [r0, #-0]
20003f84:	008000a0 	addeq	r0, r0, r0, lsr #1
20003f88:	00000000 	andeq	r0, r0, r0
20003f8c:	007ffe00 	rsbseq	pc, pc, r0, lsl #28
20003f90:	80001000 	andhi	r1, r0, r0
20003f94:	008000c1 	addeq	r0, r0, r1, asr #1
20003f98:	00000000 	andeq	r0, r0, r0
20003f9c:	003ffe00 	eorseq	pc, pc, r0, lsl #28
20003fa0:	00001000 	andeq	r1, r0, r0
20003fa4:	00a000f0 	strdeq	r0, [r0], r0	; <UNPREDICTABLE>
20003fa8:	00000000 	andeq	r0, r0, r0
20003fac:	003fff00 	eorseq	pc, pc, r0, lsl #30
20003fb0:	00001000 	andeq	r1, r0, r0
20003fb4:	00c000e0 	sbceq	r0, r0, r0, ror #1
20003fb8:	00000000 	andeq	r0, r0, r0
20003fbc:	001fff80 	andseq	pc, pc, r0, lsl #31
20003fc0:	02001800 	andeq	r1, r0, #0, 16
20003fc4:	00c000c0 	sbceq	r0, r0, r0, asr #1
20003fc8:	00000000 	andeq	r0, r0, r0
20003fcc:	0019fffe 			; <UNDEFINED> instruction: 0x0019fffe
20003fd0:	02001400 	andeq	r1, r0, #0, 8
20003fd4:	00803000 	addeq	r3, r0, r0
20003fd8:	00000000 	andeq	r0, r0, r0
20003fdc:	0018ffff 			; <UNDEFINED> instruction: 0x0018ffff
20003fe0:	05033f00 	streq	r3, [r3, #-3840]	; 0xfffff100
20003fe4:	01000000 	mrseq	r0, (UNDEF: 0)
20003fe8:	c0000000 	andgt	r0, r0, r0
20003fec:	0008ffff 	strdeq	pc, [r8], -pc	; <UNPREDICTABLE>
20003ff0:	00c0e400 	sbceq	lr, r0, r0, lsl #8
20003ff4:	01000004 	tsteq	r0, r4
20003ff8:	c0000000 	andgt	r0, r0, r0
20003ffc:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20004000:	00002000 	andeq	r2, r0, r0
20004004:	01000008 	tsteq	r0, r8
20004008:	e0000000 	and	r0, r0, r0
2000400c:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20004010:	00001000 	andeq	r1, r0, r0
20004014:	01000006 	tsteq	r0, r6
20004018:	e0000000 	and	r0, r0, r0
2000401c:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
20004020:	80000000 	andhi	r0, r0, r0
20004024:	01800001 	orreq	r0, r0, r1
20004028:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
2000402c:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
20004030:	00400000 	subeq	r0, r0, r0
20004034:	01400000 	mrseq	r0, (UNDEF: 64)
20004038:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
2000403c:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
20004040:	03800000 	orreq	r0, r0, #0
20004044:	01300000 	teqeq	r0, r0
20004048:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
2000404c:	00001bff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
20004050:	10e00000 	rscne	r0, r0, r0
20004054:	03000000 	movweq	r0, #0
20004058:	fc000000 	stc2	0, cr0, [r0], {-0}
2000405c:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004060:	0f800000 	svceq	0x00800000
20004064:	03900000 	orrseq	r0, r0, #0
20004068:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
2000406c:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004070:	00000000 	andeq	r0, r0, r0
20004074:	03e00000 	mvneq	r0, #0
20004078:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
2000407c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004080:	00000000 	andeq	r0, r0, r0
20004084:	03f40000 	mvnseq	r0, #0
20004088:	ff000000 			; <UNDEFINED> instruction: 0xff000000
2000408c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004090:	00002000 	andeq	r2, r0, r0
20004094:	01f80000 	mvnseq	r0, r0
20004098:	ff000000 			; <UNDEFINED> instruction: 0xff000000
2000409c:	0000007f 	andeq	r0, r0, pc, ror r0
200040a0:	0010c000 	andseq	ip, r0, r0
200040a4:	03f80000 	mvnseq	r0, #0
200040a8:	ff800000 			; <UNDEFINED> instruction: 0xff800000
200040ac:	0000003f 	andeq	r0, r0, pc, lsr r0
200040b0:	000f0000 	andeq	r0, pc, r0
200040b4:	03e000e0 	mvneq	r0, #224	; 0xe0
200040b8:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
200040bc:	0000001f 	andeq	r0, r0, pc, lsl r0
200040c0:	00026000 	andeq	r6, r2, r0
200040c4:	035001f0 	cmpeq	r0, #240, 2	; 0x3c
200040c8:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
200040cc:	0000001f 	andeq	r0, r0, pc, lsl r0
200040d0:	00118000 	andseq	r8, r1, r0
200040d4:	03ec01f0 	mvneq	r0, #240, 2	; 0x3c
200040d8:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
200040dc:	0000000f 	andeq	r0, r0, pc
200040e0:	200e0000 	andcs	r0, lr, r0
200040e4:	00a022f0 	strdeq	r2, [r0], r0	; <UNPREDICTABLE>
200040e8:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
200040ec:	00000007 	andeq	r0, r0, r7
200040f0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
200040f4:	03c0c170 	biceq	ip, r0, #112, 2
200040f8:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
200040fc:	00000003 	andeq	r0, r0, r3
20004100:	e4000000 	str	r0, [r0], #-0
20004104:	03c270f3 	biceq	r7, r2, #243	; 0xf3

20004108 <castle_light_bits>:
	...
20004164:	00000040 	andeq	r0, r0, r0, asr #32
	...
20004170:	0c003000 	stceq	0, cr3, [r0], {-0}
20004174:	00000040 	andeq	r0, r0, r0, asr #32
	...
20004180:	0e007000 	cdpeq	0, 0, cr7, cr0, cr0, {0}
20004184:	000600c0 	andeq	r0, r6, r0, asr #1
	...
20004190:	0f007010 	svceq	0x00007010
20004194:	000601e0 	andeq	r0, r6, r0, ror #3
	...
200041a0:	1f007810 	svcne	0x00007810
200041a4:	000601e0 	andeq	r0, r6, r0, ror #3
	...
200041b0:	3f81f818 	svccc	0x0081f818
200041b4:	001f03e0 	andseq	r0, pc, r0, ror #7
	...
200041c0:	ffe3f818 			; <UNDEFINED> instruction: 0xffe3f818
200041c4:	001fc7f1 			; <UNDEFINED> instruction: 0x001fc7f1
	...
200041d0:	fffffc1c 			; <UNDEFINED> instruction: 0xfffffc1c
200041d4:	083fffff 	ldmdaeq	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
	...
200041e0:	fffffe3c 			; <UNDEFINED> instruction: 0xfffffe3c
200041e4:	187fffff 	ldmdane	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
	...
200041f0:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
200041f4:	3c7fffff 	ldclcc	15, cr15, [pc], #-1020	; 20003e00 <castle_gray_bits+0xf8>
	...
20004200:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20004204:	3fffffff 	svccc	0x00ffffff
20004208:	00000000 	andeq	r0, r0, r0
2000420c:	60000000 	andvs	r0, r0, r0
20004210:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20004214:	7fffffff 	svcvc	0x00ffffff
20004218:	00000000 	andeq	r0, r0, r0
2000421c:	70000000 	andvc	r0, r0, r0
20004220:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004224:	7fffffff 	svcvc	0x00ffffff
20004228:	00000000 	andeq	r0, r0, r0
2000422c:	70000000 	andvc	r0, r0, r0
20004230:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004234:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004238:	00000000 	andeq	r0, r0, r0
2000423c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20004240:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004244:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004248:	00000000 	andeq	r0, r0, r0
2000424c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20004250:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004254:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004258:	00000000 	andeq	r0, r0, r0
2000425c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20004260:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004264:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004268:	00000000 	andeq	r0, r0, r0
2000426c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20004270:	fb6fffff 	blx	21c04276 <firstTime.4076+0x1bff66e>
20004274:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004278:	00000000 	andeq	r0, r0, r0
2000427c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20004280:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
20004284:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004288:	00000000 	andeq	r0, r0, r0
2000428c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20004290:	f407ffff 			; <UNDEFINED> instruction: 0xf407ffff
20004294:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004298:	00000000 	andeq	r0, r0, r0
2000429c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200042a0:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
200042a4:	ffffff6d 			; <UNDEFINED> instruction: 0xffffff6d
200042a8:	00000000 	andeq	r0, r0, r0
200042ac:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200042b0:	f80fffff 			; <UNDEFINED> instruction: 0xf80fffff
200042b4:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200042b8:	00000000 	andeq	r0, r0, r0
200042bc:	fc000000 	stc2	0, cr0, [r0], {-0}
200042c0:	f80fedbf 			; <UNDEFINED> instruction: 0xf80fedbf
200042c4:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200042c8:	00000000 	andeq	r0, r0, r0
200042cc:	fc000000 	stc2	0, cr0, [r0], {-0}
200042d0:	f80fc01f 			; <UNDEFINED> instruction: 0xf80fc01f
200042d4:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
200042d8:	00000000 	andeq	r0, r0, r0
200042dc:	fc000000 	stc2	0, cr0, [r0], {-0}
200042e0:	f90fc81f 			; <UNDEFINED> instruction: 0xf90fc81f
200042e4:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
200042e8:	00000000 	andeq	r0, r0, r0
200042ec:	fc000000 	stc2	0, cr0, [r0], {-0}
200042f0:	f90fd41f 			; <UNDEFINED> instruction: 0xf90fd41f
200042f4:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200042f8:	00000000 	andeq	r0, r0, r0
200042fc:	fc000000 	stc2	0, cr0, [r0], {-0}
20004300:	f90fe03f 			; <UNDEFINED> instruction: 0xf90fe03f
20004304:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
20004308:	00000000 	andeq	r0, r0, r0
2000430c:	fc000000 	stc2	0, cr0, [r0], {-0}
20004310:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
20004314:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
20004318:	00000000 	andeq	r0, r0, r0
2000431c:	fc000000 	stc2	0, cr0, [r0], {-0}
20004320:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
20004324:	fedbff19 	mrc2	15, 6, pc, cr11, cr9, {0}
20004328:	00000000 	andeq	r0, r0, r0
2000432c:	fc000000 	stc2	0, cr0, [r0], {-0}
20004330:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
20004334:	fd01ff11 	stc2	15, cr15, [r1, #-68]	; 0xffffffbc
20004338:	00000000 	andeq	r0, r0, r0
2000433c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20004340:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
20004344:	fd01ff19 	stc2	15, cr15, [r1, #-100]	; 0xffffff9c
20004348:	00000000 	andeq	r0, r0, r0
2000434c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20004350:	f007e03f 			; <UNDEFINED> instruction: 0xf007e03f
20004354:	fc01ff01 	stc2	15, cr15, [r1], {1}
20004358:	00000000 	andeq	r0, r0, r0
2000435c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20004360:	f007c01f 			; <UNDEFINED> instruction: 0xf007c01f
20004364:	fe03ff01 	cdp2	15, 0, cr15, cr3, cr1, {0}
20004368:	00000000 	andeq	r0, r0, r0
2000436c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20004370:	b007c01f 	andlt	ip, r7, pc, lsl r0
20004374:	fe03fe01 	cdp2	14, 0, cr15, cr3, cr1, {0}
20004378:	00000000 	andeq	r0, r0, r0
2000437c:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20004380:	0007c01f 	andeq	ip, r7, pc, lsl r0
20004384:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
20004388:	00000000 	andeq	r0, r0, r0
2000438c:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20004390:	0007c01f 	andeq	ip, r7, pc, lsl r0
20004394:	fe03fe10 	mcr2	14, 0, pc, cr3, cr0, {0}	; <UNPREDICTABLE>
20004398:	00000000 	andeq	r0, r0, r0
2000439c:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
200043a0:	0007c21f 	andeq	ip, r7, pc, lsl r2
200043a4:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
200043a8:	00000000 	andeq	r0, r0, r0
200043ac:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
200043b0:	0087c31f 	addeq	ip, r7, pc, lsl r3
200043b4:	fe03a400 	cdp2	4, 0, cr10, cr3, cr0, {0}
200043b8:	00000000 	andeq	r0, r0, r0
200043bc:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
200043c0:	00c7c31f 	sbceq	ip, r7, pc, lsl r3
200043c4:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
200043c8:	00000000 	andeq	r0, r0, r0
200043cc:	ffe60000 			; <UNDEFINED> instruction: 0xffe60000
200043d0:	00c4c01f 	sbceq	ip, r4, pc, lsl r0
200043d4:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
200043d8:	00000000 	andeq	r0, r0, r0
200043dc:	ffe70000 			; <UNDEFINED> instruction: 0xffe70000
200043e0:	8000001f 	andhi	r0, r0, pc, lsl r0
200043e4:	fc000001 	stc2	0, cr0, [r0], {1}
200043e8:	00000000 	andeq	r0, r0, r0
200043ec:	fff70000 			; <UNDEFINED> instruction: 0xfff70000
200043f0:	8000001f 	andhi	r0, r0, pc, lsl r0
200043f4:	fc000009 	stc2	0, cr0, [r0], {9}
200043f8:	00000000 	andeq	r0, r0, r0
200043fc:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20004400:	8000001f 	andhi	r0, r0, pc, lsl r0
20004404:	fc200001 	stc2	0, cr0, [r0], #-4
20004408:	00000000 	andeq	r0, r0, r0
2000440c:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20004410:	0000001f 	andeq	r0, r0, pc, lsl r0
20004414:	fc300000 	ldc2	0, cr0, [r0], #-0
20004418:	00000000 	andeq	r0, r0, r0
2000441c:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20004420:	0000000f 	andeq	r0, r0, pc
20004424:	fc300000 	ldc2	0, cr0, [r0], #-0
20004428:	00000000 	andeq	r0, r0, r0
2000442c:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20004430:	0000000f 	andeq	r0, r0, pc
20004434:	fc000000 	stc2	0, cr0, [r0], {-0}
20004438:	00000000 	andeq	r0, r0, r0
2000443c:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
20004440:	1000000f 	andne	r0, r0, pc
20004444:	fc000000 	stc2	0, cr0, [r0], {-0}
20004448:	00000000 	andeq	r0, r0, r0
2000444c:	ffffe400 			; <UNDEFINED> instruction: 0xffffe400
20004450:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
20004454:	f8080000 			; <UNDEFINED> instruction: 0xf8080000
20004458:	00000000 	andeq	r0, r0, r0
2000445c:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20004460:	0000000f 	andeq	r0, r0, pc
20004464:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20004468:	00000000 	andeq	r0, r0, r0
2000446c:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20004470:	00000007 	andeq	r0, r0, r7
20004474:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
20004478:	00000000 	andeq	r0, r0, r0
2000447c:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20004480:	00000007 	andeq	r0, r0, r7
20004484:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
20004488:	00000000 	andeq	r0, r0, r0
2000448c:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20004490:	00100007 	andseq	r0, r0, r7
20004494:	f8040000 			; <UNDEFINED> instruction: 0xf8040000
20004498:	00000000 	andeq	r0, r0, r0
2000449c:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
200044a0:	00080007 	andeq	r0, r8, r7
200044a4:	f80001c0 			; <UNDEFINED> instruction: 0xf80001c0
200044a8:	00000000 	andeq	r0, r0, r0
200044ac:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
200044b0:	00000007 	andeq	r0, r0, r7
200044b4:	f8080300 			; <UNDEFINED> instruction: 0xf8080300
200044b8:	00000000 	andeq	r0, r0, r0
200044bc:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
200044c0:	00200007 	eoreq	r0, r0, r7
200044c4:	f8080200 			; <UNDEFINED> instruction: 0xf8080200
200044c8:	00000000 	andeq	r0, r0, r0
200044cc:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
200044d0:	00000007 	andeq	r0, r0, r7
200044d4:	f8000200 			; <UNDEFINED> instruction: 0xf8000200
200044d8:	00000000 	andeq	r0, r0, r0
200044dc:	fffffff0 			; <UNDEFINED> instruction: 0xfffffff0
200044e0:	00000007 	andeq	r0, r0, r7
200044e4:	f8000100 			; <UNDEFINED> instruction: 0xf8000100
200044e8:	00000000 	andeq	r0, r0, r0
200044ec:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
200044f0:	01000007 	tsteq	r0, r7
200044f4:	f8100280 			; <UNDEFINED> instruction: 0xf8100280
200044f8:	00000000 	andeq	r0, r0, r0
200044fc:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20004500:	02000007 	andeq	r0, r0, #7
20004504:	f8000300 			; <UNDEFINED> instruction: 0xf8000300

20004508 <title_light_bits>:
	...
20004524:	00000400 	andeq	r0, r0, r0, lsl #8
20004528:	30000000 	andcc	r0, r0, r0
2000452c:	f80f9e06 			; <UNDEFINED> instruction: 0xf80f9e06
20004530:	06300000 	ldrteq	r0, [r0], -r0
20004534:	00cb8cba 	strheq	r8, [fp], #202	; 0xca
20004538:	ba033000 	blt	200d0540 <firstTime.4076+0xcb938>
2000453c:	0000eb4f 	andeq	lr, r0, pc, asr #22
20004540:	439ef3f0 	orrsmi	pc, lr, #240, 6	; 0xc0000003
20004544:	f000003a 			; <UNDEFINED> instruction: 0xf000003a
20004548:	5a478e9b 	bpl	211e7fbc <firstTime.4076+0x11e33b4>
2000454c:	9b300000 	blls	20c04554 <firstTime.4076+0xbff94c>
20004550:	019bcd36 	orrseq	ip, fp, r6, lsr sp
20004554:	66db3000 	ldrbvs	r3, [fp], r0
20004558:	000319d9 	ldrdeq	r1, [r3], -r9
2000455c:	19667330 	stmdbne	r6!, {r4, r5, r8, r9, ip, sp, lr}^
20004560:	30000310 	andcc	r0, r0, r0, lsl r3
20004564:	00000001 	andeq	r0, r0, r1
20004568:	80000000 	andhi	r0, r0, r0
2000456c:	001d3e7b 	andseq	r3, sp, fp, ror lr
20004570:	0ac00000 	beq	1f004578 <startup-0xffba88>
20004574:	00000528 	andeq	r0, r0, r8, lsr #10
20004578:	ec3a4000 	ldc	0, cr4, [sl], #-0
2000457c:	0000000d 	andeq	r0, r0, sp
20004580:	05240bc0 	streq	r0, [r4, #-3008]!	; 0xfffff440
20004584:	00f00000 	rscseq	r0, r0, r0
20004588:	001c0000 	andseq	r0, ip, r0
2000458c:	03ebb000 	mvneq	fp, #0
20004590:	00000000 	andeq	r0, r0, r0
20004594:	0c032330 	stceq	3, cr2, [r3], {48}	; 0x30
20004598:	300123e4 	andcc	r2, r1, r4, ror #7
2000459c:	940c1b2a 	strls	r1, [ip], #-2858	; 0xfffff4d6
200045a0:	ea300120 	b	20c04a28 <firstTime.4076+0xbffe20>
200045a4:	ec860c3d 	stc	12, cr0, [r6], {61}	; 0x3d
200045a8:	06ea3001 	strbteq	r3, [sl], r1
200045ac:	01e69648 	mvneq	r9, r8, asr #12
200045b0:	4b9e6b30 	blmi	1e79f278 <startup-0x1860d88>
200045b4:	30012696 	mulcc	r1, r6, r6
200045b8:	92bbb06b 	adcsls	fp, fp, #107	; 0x6b
200045bc:	69f00126 	ldmibvs	r0!, {r1, r2, r5, r8}^
200045c0:	2691b832 			; <UNDEFINED> instruction: 0x2691b832
200045c4:	1e687001 	cdpne	0, 6, cr7, cr8, cr1, {0}
200045c8:	010e9110 	tsteq	lr, r0, lsl r1
	...

200045dc <title_gray_bits>:
	...
200045e4:	40000000 	andmi	r0, r0, r0
200045e8:	0f840000 	svceq	0x00840000
200045ec:	00b0c3fe 	ldrshteq	ip, [r0], lr
200045f0:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
200045f4:	001f8f1f 	andseq	r8, pc, pc, lsl pc	; <UNPREDICTABLE>
200045f8:	fffffbf8 			; <UNDEFINED> instruction: 0xfffffbf8
200045fc:	c8001fff 	stmdagt	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
20004600:	07f061f9 			; <UNDEFINED> instruction: 0x07f061f9
20004604:	f1cc001f 			; <UNDEFINED> instruction: 0xf1cc001f
20004608:	be347305 	cdplt	3, 3, cr7, cr4, cr5, {0}
2000460c:	05f0ce00 	ldrbeq	ip, [r0, #3584]!	; 0xe00
20004610:	007e1430 	rsbseq	r1, lr, r0, lsr r4
20004614:	2041080f 	subcs	r0, r1, pc, lsl #16
20004618:	0e003e01 	cdpeq	14, 0, cr3, cr0, cr1, {0}
2000461c:	01384060 	teqeq	r8, r0, rrx
20004620:	600c001e 	andvs	r0, ip, lr, lsl r0
20004624:	1c4030c0 	mcrrne	0, 12, r3, r0, cr0
20004628:	10208c00 	eorne	r8, r0, r0, lsl #24
2000462c:	0038c024 	eorseq	ip, r8, r4, lsr #32
20004630:	0411088c 	ldreq	r0, [r1], #-2188	; 0xfffff774
20004634:	c800f8ce 	stmdagt	r0, {r1, r2, r3, r6, r7, fp, ip, sp, lr, pc}
20004638:	ffe6990c 			; <UNDEFINED> instruction: 0xffe6990c
2000463c:	7cfa0178 	ldfvce	f0, [sl], #480	; 0x1e0
20004640:	3fe0c184 	svccc	0x00e0c184
20004644:	013ff400 	teqeq	pc, r0, lsl #8	; <UNPREDICTABLE>
20004648:	001fc0c7 	andseq	ip, pc, r7, asr #1
2000464c:	03c03ff0 	biceq	r3, r0, #240, 30	; 0x3c0
20004650:	fc0007e0 	stc2	7, cr0, [r0], {224}	; 0xe0
20004654:	e003803f 	and	r8, r3, pc, lsr r0
20004658:	7f0c009f 	svcvc	0x000c009f
2000465c:	ffc1fbe4 			; <UNDEFINED> instruction: 0xffc1fbe4
20004660:	fc140c03 	ldc2	12, cr0, [r4], {3}
20004664:	03ffc7ff 	mvnseq	ip, #66846720	; 0x3fc0000
20004668:	f3fc1c0c 	vdup.32	d17, d12[1]
2000466c:	0e02dc1b 	mcreq	12, 0, sp, cr2, cr11, {0}
20004670:	63f3e490 	mvnsvs	lr, #144, 8	; 0x90000000
20004674:	018e0218 	orreq	r0, lr, r8, lsl r2
20004678:	1251e382 	subsne	lr, r1, #134217730	; 0x8000002
2000467c:	88018e02 	stmdahi	r1, {r1, r9, sl, fp, pc}
20004680:	020061a7 	andeq	r6, r0, #-1073741783	; 0xc0000029
20004684:	2460008e 	strbtcs	r0, [r0], #-142	; 0xffffff72
20004688:	8e021041 	cdphi	0, 0, cr1, cr2, cr1, {2}
2000468c:	41000300 	mrsmi	r0, LR_irq
20004690:	000e0290 	muleq	lr, r0, r2
20004694:	9048008d 	subls	r0, r8, sp, lsl #1
20004698:	81040c02 	tsthi	r4, r2, lsl #24
2000469c:	02a04c87 	adceq	r4, r0, #34560	; 0x8700
200046a0:	cffffffc 	svcgt	0x00fffffc
200046a4:	8203e2fc 	andhi	lr, r3, #252, 4	; 0xc000000f
200046a8:	e3f81c07 	mvns	r1, #1792	; 0x700
200046ac:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

200046b0 <title_black_bits>:
	...
200046d8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
200046dc:	01000040 	tsteq	r0, r0, asr #32
200046e0:	400c0000 	andmi	r0, ip, r0
200046e4:	00010080 	andeq	r0, r1, r0, lsl #1
200046e8:	9c200400 	cfstrsls	mvf0, [r0], #-0
200046ec:	000001c4 	andeq	r0, r0, r4, asr #3
200046f0:	a4803104 	strge	r3, [r0], #260	; 0x104
200046f4:	04c00001 	strbeq	r0, [r0], #1
200046f8:	02240209 	eoreq	r0, r4, #-1879048192	; 0x90000000
200046fc:	89044000 	stmdbhi	r4, {lr}
20004700:	00042602 	andeq	r2, r4, r2, lsl #12
20004704:	e2888440 	add	r8, r8, #64, 8	; 0x40000000
20004708:	00000421 	andeq	r0, r0, r1, lsr #8
2000470c:	001966f2 			; <UNDEFINED> instruction: 0x001966f2
20004710:	03000007 	movweq	r0, #7
20004714:	00020000 	andeq	r0, r2, r0
20004718:	f4000000 	vst4.8	{d0-d3}, [r0], r0
2000471c:	00003a10 	andeq	r3, r0, r0, lsl sl
20004720:	10058000 	andne	r8, r5, r0
20004724:	00000012 	andeq	r0, r0, r2, lsl r0
20004728:	1ad87400 	bne	1f621730 <startup-0x9de8d0>
2000472c:	80000000 	andhi	r0, r0, r0
20004730:	0022041b 	eoreq	r0, r2, fp, lsl r4
20004734:	00004000 	andeq	r4, r0, r0
20004738:	00003800 	andeq	r3, r0, r0, lsl #16
2000473c:	0000c0c0 	andeq	ip, r0, r0, asr #1
20004740:	c0000000 	andgt	r0, r0, r0
20004744:	08000045 	stmdaeq	r0, {r0, r2, r6}
20004748:	144000c7 	strbne	r0, [r0], #-199	; 0xffffff39
2000474c:	01281040 			; <UNDEFINED> instruction: 0x01281040
20004750:	71144000 	tstvc	r4, r0
20004754:	00190810 	andseq	r0, r9, r0, lsl r8
20004758:	90019440 	andls	r9, r1, r0, asr #8
2000475c:	4000c928 	andmi	ip, r0, r8, lsr #18
20004760:	2c444c94 	mcrrcs	12, 9, r4, r4, cr4
20004764:	96000049 	strls	r0, [r0], -r9, asr #32
20004768:	49264740 	stmdbmi	r6!, {r6, r8, r9, sl, lr}
2000476c:	60938000 	addsvs	r8, r3, r0
20004770:	00512268 	subseq	r2, r1, r8, ror #4
20004774:	30000000 	andcc	r0, r0, r0
20004778:	00001d03 	andeq	r1, r0, r3, lsl #26
	...

20004784 <bg_bits>:
	...
20004794:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
20004798:	0000001f 	andeq	r0, r0, pc, lsl r0
	...
200047a4:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
200047a8:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
200047b4:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
200047b8:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
	...
200047c4:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200047c8:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
	...
200047d4:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200047d8:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
200047e4:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
200047e8:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
200047f4:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
200047f8:	01ffffff 	ldrsheq	pc, [pc, #255]	; 200048ff <bg_bits+0x17b>	; <UNPREDICTABLE>
200047fc:	0001f000 	andeq	pc, r1, r0
20004800:	00000000 	andeq	r0, r0, r0
20004804:	007fe000 	rsbseq	lr, pc, r0
20004808:	0ffffffe 	svceq	0x00fffffe
2000480c:	0003f800 	andeq	pc, r3, r0, lsl #16
20004810:	00000000 	andeq	r0, r0, r0
20004814:	003fe000 	eorseq	lr, pc, r0
20004818:	7fffffc0 	svcvc	0x00ffffc0
2000481c:	0003f800 	andeq	pc, r3, r0, lsl #16
20004820:	001f8000 	andseq	r8, pc, r0
20004824:	001fe000 	andseq	lr, pc, r0
20004828:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
2000482c:	0003f801 	andeq	pc, r3, r1, lsl #16
20004830:	003fc000 	eorseq	ip, pc, r0
20004834:	003fe000 	eorseq	lr, pc, r0
20004838:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
2000483c:	3f83f807 	svccc	0x0083f807
20004840:	003fe000 	eorseq	lr, pc, r0
20004844:	01ffe000 	mvnseq	lr, r0
20004848:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
2000484c:	7fc3f80f 	svcvc	0x00c3f80f
20004850:	003fe7f8 	ldrshteq	lr, [pc], -r8
20004854:	07ffe000 	ldrbeq	lr, [pc, r0]!
20004858:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
2000485c:	7fe1f01f 	svcvc	0x00e1f01f
20004860:	003ffffc 	ldrshteq	pc, [pc], -ip	; <UNPREDICTABLE>
20004864:	3fffc000 	svccc	0x00ffc000
20004868:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
2000486c:	7ff0003f 	svcvc	0x00f0003f
20004870:	007ffffc 	ldrshteq	pc, [pc], #-252	; <UNPREDICTABLE>
20004874:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20004878:	ff000000 			; <UNDEFINED> instruction: 0xff000000
2000487c:	7ff8007f 	svcvc	0x00f8007f
20004880:	3ffffffc 	svccc	0x00fffffc
20004884:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20004888:	f8000003 			; <UNDEFINED> instruction: 0xf8000003
2000488c:	7ffc00ff 	svcvc	0x00fc00ff
20004890:	7ffffffc 	svcvc	0x00fffffc
20004894:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20004898:	e000000f 	and	r0, r0, pc
2000489c:	7ffe01ff 	svcvc	0x00fe01ff
200048a0:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
200048a4:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
200048a8:	8000001f 	andhi	r0, r0, pc, lsl r0
200048ac:	7fff01ff 	svcvc	0x00ff01ff
200048b0:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
200048b4:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
200048b8:	0000007f 	andeq	r0, r0, pc, ror r0
200048bc:	7fff83ff 	svcvc	0x00ff83ff
200048c0:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
200048c4:	ff800000 			; <UNDEFINED> instruction: 0xff800000
200048c8:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200048cc:	7fffc3fe 	svcvc	0x00ffc3fe
200048d0:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
200048d4:	fc7ffff0 	ldc2l	15, cr15, [pc], #-960	; 2000451c <title_light_bits+0x14>
200048d8:	07c001ff 			; <UNDEFINED> instruction: 0x07c001ff
200048dc:	7fffe7fc 	svcvc	0x00ffe7fc
200048e0:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
200048e4:	f0fffffe 			; <UNDEFINED> instruction: 0xf0fffffe
200048e8:	0fe007ff 	svceq	0x00e007ff
200048ec:	7ffff7fc 	svcvc	0x00fff7fc
200048f0:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
200048f4:	c0ffffff 	ldrshtgt	pc, [pc], #255	; <UNPREDICTABLE>
200048f8:	0fe00fff 	svceq	0x00e00fff
200048fc:	7ffffff8 	svcvc	0x00fffff8
20004900:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20004904:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20004a0b <bg_bits+0x287>	; <UNPREDICTABLE>
20004908:	0fe01fff 	svceq	0x00e01fff
2000490c:	7ffffff8 	svcvc	0x00fffff8
20004910:	7ffffc00 	svcvc	0x00fffc00
20004914:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20004a1b <bg_bits+0x297>	; <UNPREDICTABLE>
20004918:	0fe03ffe 	svceq	0x00e03ffe
2000491c:	3fdffff0 	svccc	0x00dffff0
20004920:	3ffffe00 	svccc	0x00fffe00
20004924:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20004a2b <bg_bits+0x2a7>	; <UNPREDICTABLE>
20004928:	0fe03ff8 	svceq	0x00e03ff8
2000492c:	3fe7fff0 	svccc	0x00e7fff0
20004930:	07fffe00 	ldrbeq	pc, [pc, r0, lsl #28]!	; <UNPREDICTABLE>
20004934:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
20004938:	07c07ff0 			; <UNDEFINED> instruction: 0x07c07ff0
2000493c:	1fe7fff0 	svcne	0x00e7fff0
20004940:	0ffffe00 	svceq	0x00fffe00
20004944:	03fc00ff 	mvnseq	r0, #255	; 0xff
20004948:	0000ffe0 	andeq	pc, r0, r0, ror #31
2000494c:	1ff3ffe0 	svcne	0x00f3ffe0
20004950:	1ffffe00 	svcne	0x00fffe00
20004954:	03fc001f 	mvnseq	r0, #31
20004958:	0001ff80 	andeq	pc, r1, r0, lsl #31
2000495c:	1ff9ffe0 	svcne	0x00f9ffe0
20004960:	3ffffe00 	svccc	0x00fffe00
20004964:	03fc0007 	mvnseq	r0, #7
20004968:	0001ff80 	andeq	pc, r1, r0, lsl #31
2000496c:	0ffcffe0 	svceq	0x00fcffe0
20004970:	3ffdfe00 	svccc	0x00fdfe00
20004974:	07f80007 	ldrbeq	r0, [r8, r7]!
20004978:	0003ff00 	andeq	pc, r3, r0, lsl #30
2000497c:	0ffe7ff0 	svceq	0x00fe7ff0
20004980:	3ffcfe00 	svccc	0x00fcfe00
20004984:	07f80003 	ldrbeq	r0, [r8, r3]!
20004988:	0007fe00 	andeq	pc, r7, r0, lsl #28
2000498c:	07fe7ff8 			; <UNDEFINED> instruction: 0x07fe7ff8
20004990:	3ff8fe00 	svccc	0x00f8fe00
20004994:	0ff80003 	svceq	0x00f80003
20004998:	0007fc00 	andeq	pc, r7, r0, lsl #24
2000499c:	03fffffc 	mvnseq	pc, #252, 30	; 0x3f0
200049a0:	3ff87c00 	svccc	0x00f87c00
200049a4:	0ff80003 	svceq	0x00f80003
200049a8:	0007fc00 	andeq	pc, r7, r0, lsl #24
200049ac:	01fffffe 	ldrsheq	pc, [pc, #254]	; 20004ab2 <bg_bits+0x32e>	; <UNPREDICTABLE>
200049b0:	1ff00000 	svcne	0x00f00000	; IMB
200049b4:	0ff00007 	svceq	0x00f00007
200049b8:	000ff800 	andeq	pc, pc, r0, lsl #16
200049bc:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20004ac3 <bg_bits+0x33f>	; <UNPREDICTABLE>
200049c0:	07f0003e 			; <UNDEFINED> instruction: 0x07f0003e
200049c4:	0ff00007 	svceq	0x00f00007
200049c8:	800ff000 	andhi	pc, pc, r0
200049cc:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
200049d0:	03e0007f 	mvneq	r0, #127	; 0x7f
200049d4:	0fe00007 	svceq	0x00e00007
200049d8:	c00ff000 	andgt	pc, pc, r0
200049dc:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
200049e0:	0000007f 	andeq	r0, r0, pc, ror r0
200049e4:	0fe00007 	svceq	0x00e00007
200049e8:	e00ff000 	and	pc, pc, r0
200049ec:	007ffeff 	ldrshteq	pc, [pc], #-239	; <UNPREDICTABLE>
200049f0:	0000007f 	andeq	r0, r0, pc, ror r0
200049f4:	0fe00007 	svceq	0x00e00007
200049f8:	f00ff000 			; <UNDEFINED> instruction: 0xf00ff000
200049fc:	003ffe7f 	eorseq	pc, pc, pc, ror lr	; <UNPREDICTABLE>
20004a00:	0000007f 	andeq	r0, r0, pc, ror r0
20004a04:	0fe00007 	svceq	0x00e00007
20004a08:	f80ff000 			; <UNDEFINED> instruction: 0xf80ff000
20004a0c:	001ffc3f 	andseq	pc, pc, pc, lsr ip	; <UNPREDICTABLE>
20004a10:	0000007f 	andeq	r0, r0, pc, ror r0
20004a14:	1fe0000f 	svcne	0x00e0000f
20004a18:	fc0ff000 	stc2	0, cr15, [pc], {-0}
20004a1c:	000ff81f 	andeq	pc, pc, pc, lsl r8	; <UNPREDICTABLE>
20004a20:	0000003e 	andeq	r0, r0, lr, lsr r0
20004a24:	1fe0000f 	svcne	0x00e0000f
20004a28:	fc07f000 	stc2	0, cr15, [r7], {-0}
20004a2c:	0007f00f 	andeq	pc, r7, pc
20004a30:	00000000 	andeq	r0, r0, r0
20004a34:	1fe0000f 	svcne	0x00e0000f
20004a38:	fc07f000 	stc2	0, cr15, [r7], {-0}
20004a3c:	00000007 	andeq	r0, r0, r7
20004a40:	00000000 	andeq	r0, r0, r0
20004a44:	1fe0000f 	svcne	0x00e0000f
20004a48:	fc07f800 	stc2	8, cr15, [r7], {-0}
20004a4c:	00000003 	andeq	r0, r0, r3
20004a50:	000ff800 	andeq	pc, pc, r0, lsl #16
20004a54:	1fc0001f 	svcne	0x00c0001f
20004a58:	fc07fc00 	stc2	12, cr15, [r7], {-0}
20004a5c:	00000001 	andeq	r0, r0, r1
20004a60:	001ffc00 	andseq	pc, pc, r0, lsl #24
20004a64:	1fc0003f 	svcne	0x00c0003f
20004a68:	fc07ff80 	stc2	15, cr15, [r7], {128}	; 0x80
20004a6c:	00000001 	andeq	r0, r0, r1
20004a70:	003fff00 	eorseq	pc, pc, r0, lsl #30
20004a74:	3fc0003f 	svccc	0x00c0003f
20004a78:	fc07fffc 	stc2	15, cr15, [r7], {252}	; 0xfc
20004a7c:	00000001 	andeq	r0, r0, r1
20004a80:	007fff80 	rsbseq	pc, pc, r0, lsl #31
20004a84:	ffc0003f 			; <UNDEFINED> instruction: 0xffc0003f
20004a88:	fc03ffff 	stc2	15, cr15, [r3], {255}	; 0xff
20004a8c:	00000001 	andeq	r0, r0, r1
20004a90:	00ffffe0 	rscseq	pc, pc, r0, ror #31
20004a94:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20004a98:	fc01ffff 	stc2	15, cr15, [r1], {255}	; 0xff
20004a9c:	00000007 	andeq	r0, r0, r7
20004aa0:	03fffff0 	mvnseq	pc, #240, 30	; 0x3c0
20004aa4:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20004aa8:	fc00ffff 	stc2	15, cr15, [r0], {255}	; 0xff
20004aac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004ab0:	07fffff8 			; <UNDEFINED> instruction: 0x07fffff8
20004ab4:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20004ab8:	fc007fff 	stc2	15, cr7, [r0], {255}	; 0xff
20004abc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004ac0:	07ff7ffd 			; <UNDEFINED> instruction: 0x07ff7ffd
20004ac4:	ff80007f 			; <UNDEFINED> instruction: 0xff80007f
20004ac8:	fc003fff 	stc2	15, cr3, [r0], {255}	; 0xff
20004acc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004ad0:	0ffe3fff 	svceq	0x00fe3fff
20004ad4:	ff1f007f 			; <UNDEFINED> instruction: 0xff1f007f
20004ad8:	f80007ff 			; <UNDEFINED> instruction: 0xf80007ff
20004adc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004ae0:	1ffc3fff 	svcne	0x00fc3fff
20004ae4:	fc3f807f 	ldc2	0, cr8, [pc], #-508	; 200048f0 <bg_bits+0x16c>
20004ae8:	f800003f 			; <UNDEFINED> instruction: 0xf800003f
20004aec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004af0:	1ff83fff 	svcne	0x00f83fff
20004af4:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
20004af8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20004afc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004b00:	3ff03fff 	svccc	0x00f03fff
20004b04:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
20004b08:	c0000000 	andgt	r0, r0, r0
20004b0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004b10:	7fe03fff 	svcvc	0x00e03fff
20004b14:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
20004b18:	00000000 	andeq	r0, r0, r0
20004b1c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20004b20:	7fc03fff 	svcvc	0x00c03fff
20004b24:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
20004b28:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
20004b2c:	f800000f 			; <UNDEFINED> instruction: 0xf800000f
20004b30:	ffc01fff 			; <UNDEFINED> instruction: 0xffc01fff
20004b34:	001f003f 	andseq	r0, pc, pc, lsr r0	; <UNPREDICTABLE>
20004b38:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20004b3c:	f8007fff 			; <UNDEFINED> instruction: 0xf8007fff
20004b40:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
20004b44:	0000003f 	andeq	r0, r0, pc, lsr r0
20004b48:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20004b4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004b50:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
20004b54:	0000003f 	andeq	r0, r0, pc, lsr r0
20004b58:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20004b5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004b60:	ff001fff 			; <UNDEFINED> instruction: 0xff001fff
20004b64:	0000003f 	andeq	r0, r0, pc, lsr r0
20004b68:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20004b6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004b70:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}
20004b74:	0000003f 	andeq	r0, r0, pc, lsr r0
20004b78:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20004b7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004b80:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}

20004b84 <fire_black_2_bits>:
	...
20004b8c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>

20004b90 <fire1_gray_bits>:
20004b90:	00000000 	andeq	r0, r0, r0
20004b94:	06000804 	streq	r0, [r0], -r4, lsl #16
20004b98:	02494204 	subeq	r4, r9, #4, 4	; 0x40000000

20004b9c <fire1_light_bits>:
20004b9c:	00002000 	andeq	r2, r0, r0
20004ba0:	48000010 	stmdami	r0, {r4}
20004ba4:	2c243020 	stccs	0, cr3, [r4], #-128	; 0xffffff80

20004ba8 <fire2_gray_bits>:
20004ba8:	00000000 	andeq	r0, r0, r0
20004bac:	10220000 	eorne	r0, r2, r0
20004bb0:	00420444 	subeq	r0, r2, r4, asr #8

20004bb4 <fire2_light_bits>:
20004bb4:	04200000 	strteq	r0, [r0], #-0
20004bb8:	240c0010 	strcs	r0, [ip], #-16
20004bbc:	123c6008 	eorsne	r6, ip, #8

20004bc0 <fire3_gray_bits>:
20004bc0:	00000000 	andeq	r0, r0, r0
20004bc4:	24100802 	ldrcs	r0, [r0], #-2050	; 0xfffff7fe
20004bc8:	00020260 	andeq	r0, r2, r0, ror #4

20004bcc <fire3_light_bits>:
20004bcc:	10200000 	eorne	r0, r0, r0
20004bd0:	18040400 	stmdane	r4, {sl}
20004bd4:	143c5812 	ldrtne	r5, [ip], #-2066	; 0xfffff7ee

20004bd8 <fire4_gray_bits>:
20004bd8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
20004bdc:	10320000 	eorsne	r0, r2, r0
20004be0:	02400012 	subeq	r0, r0, #18

20004be4 <fire4_light_bits>:
20004be4:	00001000 	andeq	r1, r0, r0
20004be8:	04082000 	streq	r2, [r8], #-0
20004bec:	24283a0c 	strtcs	r3, [r8], #-2572	; 0xfffff5f4

20004bf0 <fire5_gray_bits>:
20004bf0:	00000000 	andeq	r0, r0, r0
20004bf4:	22001020 	andcs	r1, r0, #32
20004bf8:	04044206 	streq	r4, [r4], #-518	; 0xfffffdfa

20004bfc <fire5_light_bits>:
20004bfc:	00040000 	andeq	r0, r4, r0
20004c00:	04240800 	strteq	r0, [r4], #-2048	; 0xfffff800
20004c04:	502a1810 	eorpl	r1, sl, r0, lsl r8

20004c08 <firstTime.4076>:
20004c08:	00000001 	andeq	r0, r0, r1
20004c0c:	20000adc 	ldrdcs	r0, [r0], -ip
20004c10:	20000ae6 	andcs	r0, r0, r6, ror #21
20004c14:	20000af0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
20004c18:	20000afa 	strdcs	r0, [r0], -sl
20004c1c:	20000b04 	andcs	r0, r0, r4, lsl #22
20004c20:	20000b0e 	andcs	r0, r0, lr, lsl #22
20004c24:	20000b18 	andcs	r0, r0, r8, lsl fp
20004c28:	20000b22 	andcs	r0, r0, r2, lsr #22

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000005be 			; <UNDEFINED> instruction: 0x000005be
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	0000004b 	andeq	r0, r0, fp, asr #32
      10:	0002250c 	andeq	r2, r2, ip, lsl #10
	...
      20:	020c0200 	andeq	r0, ip, #0, 4
      24:	00004e05 	andeq	r4, r0, r5, lsl #28
      28:	01c80300 	biceq	r0, r8, r0, lsl #6
      2c:	07020000 	streq	r0, [r2, -r0]
      30:	0000004e 	andeq	r0, r0, lr, asr #32
      34:	02980300 	addseq	r0, r8, #0, 6
      38:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      3c:	0000004e 	andeq	r0, r0, lr, asr #32
      40:	06250304 	strteq	r0, [r5], -r4, lsl #6
      44:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
      48:	00000055 	andeq	r0, r0, r5, asr r0
      4c:	04040008 	streq	r0, [r4], #-8
      50:	0002cb07 	andeq	ip, r2, r7, lsl #22
      54:	5b040500 	blpl	10145c <startup-0x1fefeba4>
      58:	04000000 	streq	r0, [r0], #-0
      5c:	02600801 	rsbeq	r0, r0, #65536	; 0x10000
      60:	c6060000 	strgt	r0, [r6], -r0
      64:	02000004 	andeq	r0, r0, #4
      68:	0000210a 	andeq	r2, r0, sl, lsl #2
      6c:	02590700 	subseq	r0, r9, #0, 14
      70:	030c0000 	movweq	r0, #49152	; 0xc000
      74:	00009e06 	andeq	r9, r0, r6, lsl #28
      78:	03b50300 			; <UNDEFINED> instruction: 0x03b50300
      7c:	07030000 	streq	r0, [r3, -r0]
      80:	0000009e 	muleq	r0, lr, r0
      84:	03c00300 	biceq	r0, r0, #0, 6
      88:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
      8c:	0000009e 	muleq	r0, lr, r0
      90:	02550304 	subseq	r0, r5, #4, 6	; 0x10000000
      94:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
      98:	0000009e 	muleq	r0, lr, r0
      9c:	04050008 	streq	r0, [r5], #-8
      a0:	00000062 	andeq	r0, r0, r2, rrx
      a4:	000a2806 	andeq	r2, sl, r6, lsl #16
      a8:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
      ac:	07000000 	streq	r0, [r0, -r0]
      b0:	0000014a 	andeq	r0, r0, sl, asr #2
      b4:	28060424 	stmdacs	r6, {r2, r5, sl}
      b8:	03000001 	movweq	r0, #1
      bc:	0000048a 	andeq	r0, r0, sl, lsl #9
      c0:	01280704 			; <UNDEFINED> instruction: 0x01280704
      c4:	03000000 	movweq	r0, #0
      c8:	000000e3 	andeq	r0, r0, r3, ror #1
      cc:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
      d0:	03040000 	movweq	r0, #16384	; 0x4000
      d4:	000001ed 	andeq	r0, r0, sp, ror #3
      d8:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
      dc:	03080000 	movweq	r0, #32768	; 0x8000
      e0:	000001e6 	andeq	r0, r0, r6, ror #3
      e4:	01460c04 	cmpeq	r6, r4, lsl #24
      e8:	030c0000 	movweq	r0, #49152	; 0xc000
      ec:	0000020c 	andeq	r0, r0, ip, lsl #4
      f0:	01460d04 	cmpeq	r6, r4, lsl #26
      f4:	03100000 	tsteq	r0, #0
      f8:	0000010b 	andeq	r0, r0, fp, lsl #2
      fc:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
     100:	03140000 	tsteq	r4, #0
     104:	00000368 	andeq	r0, r0, r8, ror #6
     108:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
     10c:	03180000 	tsteq	r8, #0
     110:	00000443 	andeq	r0, r0, r3, asr #8
     114:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
     118:	031c0000 	tsteq	ip, #0
     11c:	00000027 	andeq	r0, r0, r7, lsr #32
     120:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
     124:	00200000 	eoreq	r0, r0, r0
     128:	00a40405 	adceq	r0, r4, r5, lsl #8
     12c:	04080000 	streq	r0, [r8], #-0
     130:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     134:	01400900 	cmpeq	r0, r0, lsl #18
     138:	400a0000 	andmi	r0, sl, r0
     13c:	00000001 	andeq	r0, r0, r1
     140:	00af0405 	adceq	r0, pc, r5, lsl #8
     144:	04050000 	streq	r0, [r5], #-0
     148:	00000135 	andeq	r0, r0, r5, lsr r1
     14c:	00014b06 	andeq	r4, r1, r6, lsl #22
     150:	af150400 	svcge	0x00150400
     154:	0b000000 	bleq	15c <startup-0x1ffffea4>
     158:	00000162 	andeq	r0, r0, r2, ror #2
     15c:	00000162 	andeq	r0, r0, r2, ror #2
     160:	0405000c 	streq	r0, [r5], #-12
     164:	0000014c 	andeq	r0, r0, ip, asr #2
     168:	0003920d 	andeq	r9, r3, sp, lsl #4
     16c:	571a0400 	ldrpl	r0, [sl, -r0, lsl #8]
     170:	0d000001 	stceq	0, cr0, [r0, #-4]
     174:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
     178:	012e1b04 			; <UNDEFINED> instruction: 0x012e1b04
     17c:	7d060000 	stcvc	0, cr0, [r6, #-0]
     180:	05000001 	streq	r0, [r0, #-1]
     184:	00005b24 	andeq	r5, r0, r4, lsr #22
     188:	017e0b00 	cmneq	lr, r0, lsl #22
     18c:	019a0000 	orrseq	r0, sl, r0
     190:	9a0e0000 	bls	380198 <startup-0x1fc7fe68>
     194:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     198:	04040003 	streq	r0, [r4], #-3
     19c:	0000f707 	andeq	pc, r0, r7, lsl #14
     1a0:	055b0d00 	ldrbeq	r0, [fp, #-3328]	; 0xfffff300
     1a4:	2b050000 	blcs	1401ac <startup-0x1febfe54>
     1a8:	00000189 	andeq	r0, r0, r9, lsl #3
     1ac:	0001190d 	andeq	r1, r1, sp, lsl #18
     1b0:	892c0500 	stmdbhi	ip!, {r8, sl}
     1b4:	0d000001 	stceq	0, cr0, [r0, #-4]
     1b8:	00000414 	andeq	r0, r0, r4, lsl r4
     1bc:	01892d05 	orreq	r2, r9, r5, lsl #26
     1c0:	ce0d0000 	cdpgt	0, 0, cr0, cr13, cr0, {0}
     1c4:	05000001 	streq	r0, [r0, #-1]
     1c8:	0001892e 	andeq	r8, r1, lr, lsr #18
     1cc:	03e40d00 	mvneq	r0, #0, 26
     1d0:	2f050000 	svccs	0x00050000
     1d4:	00000189 	andeq	r0, r0, r9, lsl #3
     1d8:	0003590d 	andeq	r5, r3, sp, lsl #18
     1dc:	89300500 	ldmdbhi	r0!, {r8, sl}
     1e0:	0d000001 	stceq	0, cr0, [r0, #-4]
     1e4:	0000016d 	andeq	r0, r0, sp, ror #2
     1e8:	01893105 	orreq	r3, r9, r5, lsl #2
     1ec:	5b0b0000 	blpl	2c01f4 <startup-0x1fd3fe0c>
     1f0:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
     1f4:	0f000001 	svceq	0x00000001
     1f8:	0000019a 	muleq	r0, sl, r1
     1fc:	9f100077 	svcls	0x00100077
     200:	06000001 	streq	r0, [r0], -r1
     204:	0001ee03 	andeq	lr, r1, r3, lsl #28
     208:	a0030500 	andge	r0, r3, r0, lsl #10
     20c:	11200037 			; <UNDEFINED> instruction: 0x11200037
     210:	00000401 	andeq	r0, r0, r1, lsl #8
     214:	01ee0307 	mvneq	r0, r7, lsl #6
     218:	03050000 	movweq	r0, #20480	; 0x5000
     21c:	20003818 	andcs	r3, r0, r8, lsl r8
     220:	00046011 	andeq	r6, r4, r1, lsl r0
     224:	ee030800 	cdp	8, 0, cr0, cr3, cr0, {0}
     228:	05000001 	streq	r0, [r0, #-1]
     22c:	00389003 	eorseq	r9, r8, r3
     230:	005b0b20 	subseq	r0, fp, r0, lsr #22
     234:	02420000 	subeq	r0, r2, #0
     238:	9a0e0000 	bls	380240 <startup-0x1fc7fdc0>
     23c:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     240:	a9110003 	ldmdbge	r1, {r0, r1}
     244:	09000004 	stmdbeq	r0, {r2}
     248:	00023103 	andeq	r3, r2, r3, lsl #2
     24c:	08030500 	stmdaeq	r3, {r8, sl}
     250:	11200039 			; <UNDEFINED> instruction: 0x11200039
     254:	00000338 	andeq	r0, r0, r8, lsr r3
     258:	0231030a 	eorseq	r0, r1, #671088640	; 0x28000000
     25c:	03050000 	movweq	r0, #20480	; 0x5000
     260:	20003d08 	andcs	r3, r0, r8, lsl #26
     264:	00021311 	andeq	r1, r2, r1, lsl r3
     268:	31030b00 	tstcc	r3, r0, lsl #22
     26c:	05000002 	streq	r0, [r0, #-2]
     270:	00410803 	subeq	r0, r1, r3, lsl #16
     274:	005b0b20 	subseq	r0, fp, r0, lsr #22
     278:	02850000 	addeq	r0, r5, #0
     27c:	9a0f0000 	bls	3c0284 <startup-0x1fc3fd7c>
     280:	d1000001 	tstle	r0, r1
     284:	03171100 	tsteq	r7, #0, 2
     288:	030c0000 	movweq	r0, #49152	; 0xc000
     28c:	00000275 	andeq	r0, r0, r5, ror r2
     290:	45080305 	strmi	r0, [r8, #-773]	; 0xfffffcfb
     294:	ab112000 	blge	44829c <startup-0x1fbb7d64>
     298:	0d000002 	stceq	0, cr0, [r0, #-8]
     29c:	00027503 	andeq	r7, r2, r3, lsl #10
     2a0:	dc030500 	cfstr32le	mvfx0, [r3], {-0}
     2a4:	11200045 			; <UNDEFINED> instruction: 0x11200045
     2a8:	00000016 	andeq	r0, r0, r6, lsl r0
     2ac:	0275030e 	rsbseq	r0, r5, #939524096	; 0x38000000
     2b0:	03050000 	movweq	r0, #20480	; 0x5000
     2b4:	200046b0 			; <UNDEFINED> instruction: 0x200046b0
     2b8:	00048211 	andeq	r8, r4, r1, lsl r2
     2bc:	31030f00 	tstcc	r3, r0, lsl #30
     2c0:	05000002 	streq	r0, [r0, #-2]
     2c4:	00478403 	subeq	r8, r7, r3, lsl #8
     2c8:	07020420 	streq	r0, [r2, -r0, lsr #8]
     2cc:	000002c5 	andeq	r0, r0, r5, asr #5
     2d0:	00018e10 	andeq	r8, r1, r0, lsl lr
     2d4:	9e290100 	suflse	f0, f1, f0
     2d8:	05000000 	streq	r0, [r0, #-0]
     2dc:	00182403 	andseq	r2, r8, r3, lsl #8
     2e0:	02ed1020 	rsceq	r1, sp, #32
     2e4:	2a010000 	bcs	402ec <startup-0x1ffbfd14>
     2e8:	0000009e 	muleq	r0, lr, r0
     2ec:	18a40305 	stmiane	r4!, {r0, r2, r8, r9}
     2f0:	9d102000 	ldcls	0, cr2, [r0, #-0]
     2f4:	01000004 	tsteq	r0, r4
     2f8:	00009e2b 	andeq	r9, r0, fp, lsr #28
     2fc:	b0030500 	andlt	r0, r3, r0, lsl #10
     300:	12200018 	eorne	r0, r0, #24
     304:	01006762 	tsteq	r0, r2, ror #14
     308:	00009e2c 	andeq	r9, r0, ip, lsr #28
     30c:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
     310:	10200018 	eorne	r0, r0, r8, lsl r0
     314:	00000156 	andeq	r0, r0, r6, asr r1
     318:	009e2e01 	addseq	r2, lr, r1, lsl #28
     31c:	03050000 	movweq	r0, #20480	; 0x5000
     320:	20001840 	andcs	r1, r0, r0, asr #16
     324:	00016210 	andeq	r6, r1, r0, lsl r2
     328:	9e2f0100 	suflse	f0, f7, f0
     32c:	05000000 	streq	r0, [r0, #-0]
     330:	0018ac03 	andseq	sl, r8, r3, lsl #24
     334:	02d81020 	sbcseq	r1, r8, #32
     338:	30010000 	andcc	r0, r1, r0
     33c:	0000009e 	muleq	r0, lr, r0
     340:	18780305 	ldmdane	r8!, {r0, r2, r8, r9}^
     344:	00102000 	andseq	r2, r0, r0
     348:	01000001 	tsteq	r0, r1
     34c:	00009e31 	andeq	r9, r0, r1, lsr lr
     350:	c0030500 	andgt	r0, r3, r0, lsl #10
     354:	10200018 	eorne	r0, r0, r8, lsl r0
     358:	000002bb 			; <UNDEFINED> instruction: 0x000002bb
     35c:	009e3201 	addseq	r3, lr, r1, lsl #4
     360:	03050000 	movweq	r0, #20480	; 0x5000
     364:	20001894 	mulcs	r0, r4, r8
     368:	00028d10 	andeq	r8, r2, r0, lsl sp
     36c:	9e330100 	rsflss	f0, f3, f0
     370:	05000000 	streq	r0, [r0, #-0]
     374:	0018a803 	andseq	sl, r8, r3, lsl #16
     378:	03a91020 			; <UNDEFINED> instruction: 0x03a91020
     37c:	35010000 	strcc	r0, [r1, #-0]
     380:	00000062 	andeq	r0, r0, r2, rrx
     384:	18440305 	stmdane	r4, {r0, r2, r8, r9}^
     388:	2b102000 	blcs	408390 <startup-0x1fbf7c70>
     38c:	01000001 	tsteq	r0, r1
     390:	00006236 	andeq	r6, r0, r6, lsr r2
     394:	88030500 	stmdahi	r3, {r8, sl}
     398:	10200018 	eorne	r0, r0, r8, lsl r0
     39c:	0000026e 	andeq	r0, r0, lr, ror #4
     3a0:	00623701 	rsbeq	r3, r2, r1, lsl #14
     3a4:	03050000 	movweq	r0, #20480	; 0x5000
     3a8:	20001860 	andcs	r1, r0, r0, ror #16
     3ac:	00037110 	andeq	r7, r3, r0, lsl r1
     3b0:	62380100 	eorsvs	r0, r8, #0, 2
     3b4:	05000000 	streq	r0, [r0, #-0]
     3b8:	0018b403 	andseq	fp, r8, r3, lsl #8
     3bc:	03281020 			; <UNDEFINED> instruction: 0x03281020
     3c0:	3a010000 	bcc	403c8 <startup-0x1ffbfc38>
     3c4:	00000062 	andeq	r0, r0, r2, rrx
     3c8:	18280305 	stmdane	r8!, {r0, r2, r8, r9}
     3cc:	08102000 	ldmdaeq	r0, {sp}
     3d0:	01000003 	tsteq	r0, r3
     3d4:	0000623b 	andeq	r6, r0, fp, lsr r2
     3d8:	98030500 	stmdals	r3, {r8, sl}
     3dc:	10200018 	eorne	r0, r0, r8, lsl r0
     3e0:	00000349 	andeq	r0, r0, r9, asr #6
     3e4:	00623c01 	rsbeq	r3, r2, r1, lsl #24
     3e8:	03050000 	movweq	r0, #20480	; 0x5000
     3ec:	2000187c 	andcs	r1, r0, ip, ror r8
     3f0:	0000e810 	andeq	lr, r0, r0, lsl r8
     3f4:	623d0100 	eorsvs	r0, sp, #0, 2
     3f8:	05000000 	streq	r0, [r0, #-0]
     3fc:	00185003 	andseq	r5, r8, r3
     400:	03781020 	cmneq	r8, #32
     404:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
     408:	00000062 	andeq	r0, r0, r2, rrx
     40c:	18340305 	ldmdane	r4!, {r0, r2, r8, r9}
     410:	7e102000 	cdpvc	0, 1, cr2, cr0, cr0, {0}
     414:	01000002 	tsteq	r0, r2
     418:	0000623f 	andeq	r6, r0, pc, lsr r2
     41c:	6c030500 	cfstr32vs	mvfx0, [r3], {-0}
     420:	10200018 	eorne	r0, r0, r8, lsl r0
     424:	00000031 	andeq	r0, r0, r1, lsr r0
     428:	012e6901 			; <UNDEFINED> instruction: 0x012e6901
     42c:	03050000 	movweq	r0, #20480	; 0x5000
     430:	20001810 	andcs	r1, r0, r0, lsl r8
     434:	00013c13 	andeq	r3, r1, r3, lsl ip
     438:	986a0100 	stmdals	sl!, {r8}^
     43c:	d4200001 	strtle	r0, [r0], #-1
     440:	01000001 	tsteq	r0, r1
     444:	0004ed9c 	muleq	r4, ip, sp
     448:	039e1100 	orrseq	r1, lr, #0, 2
     44c:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
     450:	0000014c 	andeq	r0, r0, ip, asr #2
     454:	114c9102 	cmpne	ip, r2, lsl #2
     458:	00000000 	andeq	r0, r0, r0
     45c:	00a47901 	adceq	r7, r4, r1, lsl #18
     460:	91020000 	mrsls	r0, (UNDEF: 2)
     464:	02fa1140 	rscseq	r1, sl, #64, 2
     468:	7a010000 	bvc	40470 <startup-0x1ffbfb90>
     46c:	000004ed 	andeq	r0, r0, sp, ror #9
     470:	7fb49103 	svcvc	0x00b49103
     474:	00014111 	andeq	r4, r1, r1, lsl r1
     478:	4c820100 	stfmis	f0, [r2], {0}
     47c:	03000001 	movweq	r0, #1
     480:	117f9091 			; <UNDEFINED> instruction: 0x117f9091
     484:	000003d9 	ldrdeq	r0, [r0], -r9
     488:	00a48301 	adceq	r8, r4, r1, lsl #6
     48c:	91030000 	mrsls	r0, (UNDEF: 3)
     490:	9f117f84 	svcls	0x00117f84
     494:	01000002 	tsteq	r0, r2
     498:	0004ed84 	andeq	lr, r4, r4, lsl #27
     49c:	f8910300 			; <UNDEFINED> instruction: 0xf8910300
     4a0:	01f2117e 	mvnseq	r1, lr, ror r1
     4a4:	91010000 	mrsls	r0, (UNDEF: 1)
     4a8:	0000014c 	andeq	r0, r0, ip, asr #2
     4ac:	7ed49103 	atnvcs	f1, f3
     4b0:	00049111 	andeq	r9, r4, r1, lsl r1
     4b4:	a4920100 	ldrge	r0, [r2], #256	; 0x100
     4b8:	03000000 	movweq	r0, #0
     4bc:	117ec891 			; <UNDEFINED> instruction: 0x117ec891
     4c0:	00000453 	andeq	r0, r0, r3, asr r4
     4c4:	04ed9301 	strbteq	r9, [sp], #769	; 0x301
     4c8:	91030000 	mrsls	r0, (UNDEF: 3)
     4cc:	7c117ebc 	ldcvc	14, cr7, [r1], {188}	; 0xbc
     4d0:	01000004 	tsteq	r0, r4
     4d4:	00014c9a 	muleq	r1, sl, ip
     4d8:	98910300 	ldmls	r1, {r8, r9}
     4dc:	04bb117e 	ldrteq	r1, [fp], #382	; 0x17e
     4e0:	9c010000 	stcls	0, cr0, [r1], {-0}
     4e4:	0000014c 	andeq	r0, r0, ip, asr #2
     4e8:	7df49103 	ldfvcp	f1, [r4, #12]!
     4ec:	00a40b00 	adceq	r0, r4, r0, lsl #22
     4f0:	04fd0000 	ldrbteq	r0, [sp], #0
     4f4:	9a0f0000 	bls	3c04fc <startup-0x1fc3fb04>
     4f8:	00000001 	andeq	r0, r0, r1
     4fc:	03861300 	orreq	r1, r6, #0, 6
     500:	41010000 	mrsmi	r0, (UNDEF: 1)
     504:	20000034 	andcs	r0, r0, r4, lsr r0
     508:	00000164 	andeq	r0, r0, r4, ror #2
     50c:	059f9c01 	ldreq	r9, [pc, #3073]	; 1115 <startup-0x1fffeeeb>
     510:	ca110000 	bgt	440518 <startup-0x1fbbfae8>
     514:	01000003 	tsteq	r0, r3
     518:	00009e42 	andeq	r9, r0, r2, asr #28
     51c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     520:	0001fc11 	andeq	pc, r1, r1, lsl ip	; <UNPREDICTABLE>
     524:	9e460100 	dvflss	f0, f6, f0
     528:	02000000 	andeq	r0, r0, #0
     52c:	2b117091 	blcs	45c778 <startup-0x1fba3888>
     530:	01000004 	tsteq	r0, r4
     534:	00009e4a 	andeq	r9, r0, sl, asr #28
     538:	6c910200 	lfmvs	f0, 4, [r1], {0}
     53c:	00018511 	andeq	r8, r1, r1, lsl r5
     540:	9e4e0100 	dvflse	f0, f6, f0
     544:	02000000 	andeq	r0, r0, #0
     548:	0d116891 	ldceq	8, cr6, [r1, #-580]	; 0xfffffdbc
     54c:	01000000 	mrseq	r0, (UNDEF: 0)
     550:	00009e52 	andeq	r9, r0, r2, asr lr
     554:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     558:	00019611 	andeq	r9, r1, r1, lsl r6
     55c:	9e560100 	rdflss	f0, f6, f0
     560:	02000000 	andeq	r0, r0, #0
     564:	39116091 	ldmdbcc	r1, {r0, r4, r7, sp, lr}
     568:	01000000 	mrseq	r0, (UNDEF: 0)
     56c:	00009e5a 	andeq	r9, r0, sl, asr lr
     570:	5c910200 	lfmpl	f0, 4, [r1], {0}
     574:	00004211 	andeq	r4, r0, r1, lsl r2
     578:	9e5e0100 	rdflse	f0, f6, f0
     57c:	02000000 	andeq	r0, r0, #0
     580:	bf115891 	svclt	0x00115891
     584:	01000001 	tsteq	r0, r1
     588:	00009e61 	andeq	r9, r0, r1, ror #28
     58c:	54910200 	ldrpl	r0, [r1], #512	; 0x200
     590:	00047211 	andeq	r7, r4, r1, lsl r2
     594:	9e640100 	powlss	f0, f4, f0
     598:	02000000 	andeq	r0, r0, #0
     59c:	14005091 	strne	r5, [r0], #-145	; 0xffffff6f
     5a0:	000002e4 	andeq	r0, r0, r4, ror #5
     5a4:	00101501 	andseq	r1, r0, r1, lsl #10
     5a8:	00242000 	eoreq	r2, r4, r0
     5ac:	9c010000 	stcls	0, cr0, [r1], {-0}
     5b0:	00043b15 	andeq	r3, r4, r5, lsl fp
     5b4:	001f0100 	andseq	r0, pc, r0, lsl #2
     5b8:	0c200000 	stceq	0, cr0, [r0], #-0
     5bc:	01000000 	mrseq	r0, (UNDEF: 0)
     5c0:	00c3009c 	smulleq	r0, r3, ip, r0
     5c4:	00040000 	andeq	r0, r4, r0
     5c8:	00000125 	andeq	r0, r0, r5, lsr #2
     5cc:	004b0104 	subeq	r0, fp, r4, lsl #2
     5d0:	cd0c0000 	stcgt	0, cr0, [ip, #-0]
     5d4:	6c000004 	stcvs	0, cr0, [r0], {4}
     5d8:	28200003 	stmdacs	r0!, {r0, r1}
     5dc:	bb000000 	bllt	5e4 <startup-0x1ffffa1c>
     5e0:	02000001 	andeq	r0, r0, #1
     5e4:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
     5e8:	03000000 	movweq	r0, #0
     5ec:	000001c8 	andeq	r0, r0, r8, asr #3
     5f0:	004e0702 	subeq	r0, lr, r2, lsl #14
     5f4:	03000000 	movweq	r0, #0
     5f8:	00000298 	muleq	r0, r8, r2
     5fc:	004e0802 	subeq	r0, lr, r2, lsl #16
     600:	03040000 	movweq	r0, #16384	; 0x4000
     604:	00000625 	andeq	r0, r0, r5, lsr #12
     608:	00550902 	subseq	r0, r5, r2, lsl #18
     60c:	00080000 	andeq	r0, r8, r0
     610:	cb070404 	blgt	1c1628 <startup-0x1fe3e9d8>
     614:	05000002 	streq	r0, [r0, #-2]
     618:	00005b04 	andeq	r5, r0, r4, lsl #22
     61c:	08010400 	stmdaeq	r1, {sl}
     620:	00000260 	andeq	r0, r0, r0, ror #4
     624:	0004c606 	andeq	ip, r4, r6, lsl #12
     628:	210a0200 	mrscs	r0, R10_fiq
     62c:	07000000 	streq	r0, [r0, -r0]
     630:	000004c1 	andeq	r0, r0, r1, asr #9
     634:	036c0301 	cmneq	ip, #67108864	; 0x4000000
     638:	00282000 	eoreq	r2, r8, r0
     63c:	9c010000 	stcls	0, cr0, [r1], {-0}
     640:	000000b9 	strheq	r0, [r0], -r9
     644:	01007308 	tsteq	r0, r8, lsl #6
     648:	0000b903 	andeq	fp, r0, r3, lsl #18
     64c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     650:	00062509 	andeq	r2, r6, r9, lsl #10
     654:	55030100 	strpl	r0, [r3, #-256]	; 0xffffff00
     658:	02000000 	andeq	r0, r0, #0
     65c:	c8097091 	stmdagt	r9, {r0, r4, r7, ip, sp, lr}
     660:	01000001 	tsteq	r0, r1
     664:	0000bf03 	andeq	fp, r0, r3, lsl #30
     668:	6c910200 	lfmvs	f0, 4, [r1], {0}
     66c:	00029809 	andeq	r9, r2, r9, lsl #16
     670:	bf030100 	svclt	0x00030100
     674:	02000000 	andeq	r0, r0, #0
     678:	05006891 	streq	r6, [r0, #-2193]	; 0xfffff76f
     67c:	00006204 	andeq	r6, r0, r4, lsl #4
     680:	05040a00 	streq	r0, [r4, #-2560]	; 0xfffff600
     684:	00746e69 	rsbseq	r6, r4, r9, ror #28
     688:	00089f00 	andeq	r9, r8, r0, lsl #30
     68c:	b7000400 	strlt	r0, [r0, -r0, lsl #8]
     690:	04000001 	streq	r0, [r0], #-1
     694:	00004b01 	andeq	r4, r0, r1, lsl #22
     698:	05e70c00 	strbeq	r0, [r7, #3072]!	; 0xc00
     69c:	03940000 	orrseq	r0, r4, #0
     6a0:	0e442000 	cdpeq	0, 4, cr2, cr4, cr0, {0}
     6a4:	02270000 	eoreq	r0, r7, #0
     6a8:	0c020000 	stceq	0, cr0, [r2], {-0}
     6ac:	004e0502 	subeq	r0, lr, r2, lsl #10
     6b0:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
     6b4:	02000001 	andeq	r0, r0, #1
     6b8:	00004e07 	andeq	r4, r0, r7, lsl #28
     6bc:	98030000 	stmdals	r3, {}	; <UNPREDICTABLE>
     6c0:	02000002 	andeq	r0, r0, #2
     6c4:	00004e08 	andeq	r4, r0, r8, lsl #28
     6c8:	25030400 	strcs	r0, [r3, #-1024]	; 0xfffffc00
     6cc:	02000006 	andeq	r0, r0, #6
     6d0:	00005509 	andeq	r5, r0, r9, lsl #10
     6d4:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
     6d8:	02cb0704 	sbceq	r0, fp, #4, 14	; 0x100000
     6dc:	04050000 	streq	r0, [r5], #-0
     6e0:	0000005b 	andeq	r0, r0, fp, asr r0
     6e4:	60080104 	andvs	r0, r8, r4, lsl #2
     6e8:	06000002 	streq	r0, [r0], -r2
     6ec:	000004c6 	andeq	r0, r0, r6, asr #9
     6f0:	00210a02 	eoreq	r0, r1, r2, lsl #20
     6f4:	59070000 	stmdbpl	r7, {}	; <UNPREDICTABLE>
     6f8:	0c000002 	stceq	0, cr0, [r0], {2}
     6fc:	009e0603 	addseq	r0, lr, r3, lsl #12
     700:	b5030000 	strlt	r0, [r3, #-0]
     704:	03000003 	movweq	r0, #3
     708:	00009e07 	andeq	r9, r0, r7, lsl #28
     70c:	c0030000 	andgt	r0, r3, r0
     710:	03000003 	movweq	r0, #3
     714:	00009e08 	andeq	r9, r0, r8, lsl #28
     718:	55030400 	strpl	r0, [r3, #-1024]	; 0xfffffc00
     71c:	03000002 	movweq	r0, #2
     720:	00009e09 	andeq	r9, r0, r9, lsl #28
     724:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
     728:	00006204 	andeq	r6, r0, r4, lsl #4
     72c:	0a280600 	beq	a01f34 <startup-0x1f5fe0cc>
     730:	0a030000 	beq	c0738 <startup-0x1ff3f8c8>
     734:	0000006d 	andeq	r0, r0, sp, rrx
     738:	00014a07 	andeq	r4, r1, r7, lsl #20
     73c:	06042400 	streq	r2, [r4], -r0, lsl #8
     740:	00000128 	andeq	r0, r0, r8, lsr #2
     744:	00048a03 	andeq	r8, r4, r3, lsl #20
     748:	28070400 	stmdacs	r7, {sl}
     74c:	00000001 	andeq	r0, r0, r1
     750:	0000e303 	andeq	lr, r0, r3, lsl #6
     754:	2e080400 	cfcpyscs	mvf0, mvf8
     758:	04000001 	streq	r0, [r0], #-1
     75c:	0001ed03 	andeq	lr, r1, r3, lsl #26
     760:	2e090400 	cfcpyscs	mvf0, mvf9
     764:	08000001 	stmdaeq	r0, {r0}
     768:	0001e603 	andeq	lr, r1, r3, lsl #12
     76c:	460c0400 	strmi	r0, [ip], -r0, lsl #8
     770:	0c000001 	stceq	0, cr0, [r0], {1}
     774:	00020c03 	andeq	r0, r2, r3, lsl #24
     778:	460d0400 	strmi	r0, [sp], -r0, lsl #8
     77c:	10000001 	andne	r0, r0, r1
     780:	00010b03 	andeq	r0, r1, r3, lsl #22
     784:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
     788:	14000001 	strne	r0, [r0], #-1
     78c:	00036803 	andeq	r6, r3, r3, lsl #16
     790:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
     794:	18000001 	stmdane	r0, {r0}
     798:	00044303 	andeq	r4, r4, r3, lsl #6
     79c:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
     7a0:	1c000001 	stcne	0, cr0, [r0], {1}
     7a4:	00002703 	andeq	r2, r0, r3, lsl #14
     7a8:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
     7ac:	20000001 	andcs	r0, r0, r1
     7b0:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
     7b4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     7b8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     7bc:	40090074 	andmi	r0, r9, r4, ror r0
     7c0:	0a000001 	beq	7cc <startup-0x1ffff834>
     7c4:	00000140 	andeq	r0, r0, r0, asr #2
     7c8:	af040500 	svcge	0x00040500
     7cc:	05000000 	streq	r0, [r0, #-0]
     7d0:	00013504 	andeq	r3, r1, r4, lsl #10
     7d4:	014b0600 	cmpeq	fp, r0, lsl #12
     7d8:	15040000 	strne	r0, [r4, #-0]
     7dc:	000000af 	andeq	r0, r0, pc, lsr #1
     7e0:	0001620b 	andeq	r6, r1, fp, lsl #4
     7e4:	00016200 	andeq	r6, r1, r0, lsl #4
     7e8:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
     7ec:	00014c04 	andeq	r4, r1, r4, lsl #24
     7f0:	03920d00 	orrseq	r0, r2, #0, 26
     7f4:	1a040000 	bne	1007fc <startup-0x1feff804>
     7f8:	00000157 	andeq	r0, r0, r7, asr r1
     7fc:	0001b20d 	andeq	fp, r1, sp, lsl #4
     800:	2e1b0400 	cfmulscs	mvf0, mvf11, mvf0
     804:	06000001 	streq	r0, [r0], -r1
     808:	0000017d 	andeq	r0, r0, sp, ror r1
     80c:	005b2405 	subseq	r2, fp, r5, lsl #8
     810:	7e0b0000 	cdpvc	0, 0, cr0, cr11, cr0, {0}
     814:	9a000001 	bls	820 <startup-0x1ffff7e0>
     818:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     81c:	0000019a 	muleq	r0, sl, r1
     820:	040003ff 	streq	r0, [r0], #-1023	; 0xfffffc01
     824:	00f70704 	rscseq	r0, r7, r4, lsl #14
     828:	5b0d0000 	blpl	340830 <startup-0x1fcbf7d0>
     82c:	05000005 	streq	r0, [r0, #-5]
     830:	0001892b 	andeq	r8, r1, fp, lsr #18
     834:	01190d00 	tsteq	r9, r0, lsl #26
     838:	2c050000 	stccs	0, cr0, [r5], {-0}
     83c:	00000189 	andeq	r0, r0, r9, lsl #3
     840:	0004140d 	andeq	r1, r4, sp, lsl #8
     844:	892d0500 	pushhi	{r8, sl}
     848:	0d000001 	stceq	0, cr0, [r0, #-4]
     84c:	000001ce 	andeq	r0, r0, lr, asr #3
     850:	01892e05 	orreq	r2, r9, r5, lsl #28
     854:	e40d0000 	str	r0, [sp], #-0
     858:	05000003 	streq	r0, [r0, #-3]
     85c:	0001892f 	andeq	r8, r1, pc, lsr #18
     860:	03590d00 	cmpeq	r9, #0, 26
     864:	30050000 	andcc	r0, r5, r0
     868:	00000189 	andeq	r0, r0, r9, lsl #3
     86c:	00016d0d 	andeq	r6, r1, sp, lsl #26
     870:	89310500 	ldmdbhi	r1!, {r8, sl}
     874:	0f000001 	svceq	0x00000001
     878:	000001ac 	andeq	r0, r0, ip, lsr #3
     87c:	03052b01 	movweq	r2, #23297	; 0x5b01
     880:	200028c4 	andcs	r2, r0, r4, asr #17
     884:	0001b70f 	andeq	fp, r1, pc, lsl #14
     888:	052c0100 	streq	r0, [ip, #-256]!	; 0xffffff00
     88c:	001cc403 	andseq	ip, ip, r3, lsl #8
     890:	01c20f20 	biceq	r0, r2, r0, lsr #30
     894:	2d010000 	stccs	0, cr0, [r1, #-0]
     898:	24c40305 	strbcs	r0, [r4], #773	; 0x305
     89c:	cd0f2000 	stcgt	0, cr2, [pc, #-0]	; 8a4 <startup-0x1ffff75c>
     8a0:	01000001 	tsteq	r0, r1
     8a4:	c403052e 	strgt	r0, [r3], #-1326	; 0xfffffad2
     8a8:	0f20002c 	svceq	0x0020002c
     8ac:	000001a1 	andeq	r0, r0, r1, lsr #3
     8b0:	03052f01 	movweq	r2, #24321	; 0x5f01
     8b4:	200020c4 	andcs	r2, r0, r4, asr #1
     8b8:	0001d810 	andeq	sp, r1, r0, lsl r8
     8bc:	03050100 	movweq	r0, #20736	; 0x5100
     8c0:	200018c4 	andcs	r1, r0, r4, asr #17
     8c4:	0001e310 	andeq	lr, r1, r0, lsl r3
     8c8:	03050100 	movweq	r0, #20736	; 0x5100
     8cc:	200030c4 	andcs	r3, r0, r4, asr #1
     8d0:	00059111 	andeq	r9, r5, r1, lsl r1
     8d4:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
     8d8:	2000116e 	andcs	r1, r0, lr, ror #2
     8dc:	0000006a 	andeq	r0, r0, sl, rrx
     8e0:	026d9c01 	rsbeq	r9, sp, #256	; 0x100
     8e4:	78120000 	ldmdavc	r2, {}	; <UNPREDICTABLE>
     8e8:	01000006 	tsteq	r0, r6
     8ec:	012e01a8 	smulwbeq	lr, r8, r1
     8f0:	91020000 	mrsls	r0, (UNDEF: 2)
     8f4:	22110074 	andscs	r0, r1, #116	; 0x74
     8f8:	01000005 	tsteq	r0, r5
     8fc:	10ec01a0 	rscne	r0, ip, r0, lsr #3
     900:	00822000 	addeq	r2, r2, r0
     904:	9c010000 	stcls	0, cr0, [r1], {-0}
     908:	000002a2 	andeq	r0, r0, r2, lsr #5
     90c:	00056c12 	andeq	r6, r5, r2, lsl ip
     910:	01a00100 	lsleq	r0, r0, #2
     914:	00000162 	andeq	r0, r0, r2, ror #2
     918:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
     91c:	00000113 	andeq	r0, r0, r3, lsl r1
     920:	2e01a101 	mvfcss	f2, f1
     924:	02000001 	andeq	r0, r0, #1
     928:	14007491 	strne	r7, [r0], #-1169	; 0xfffffb6f
     92c:	00000630 	andeq	r0, r0, r0, lsr r6
     930:	e4019601 	str	r9, [r1], #-1537	; 0xfffff9ff
     934:	0820000f 	stmdaeq	r0!, {r0, r1, r2, r3}
     938:	01000001 	tsteq	r0, r1
     93c:	0002c69c 	muleq	r2, ip, r6
     940:	00691500 	rsbeq	r1, r9, r0, lsl #10
     944:	2e019701 	cdpcs	7, 0, cr9, cr1, cr1, {0}
     948:	02000001 	andeq	r0, r0, #1
     94c:	11007491 			; <UNDEFINED> instruction: 0x11007491
     950:	000005c2 	andeq	r0, r0, r2, asr #11
     954:	b4017001 	strlt	r7, [r1], #-1
     958:	3020000e 	eorcc	r0, r0, lr
     95c:	01000001 	tsteq	r0, r1
     960:	00033a9c 	muleq	r3, ip, sl
     964:	00781500 	rsbseq	r1, r8, r0, lsl #10
     968:	2e017101 	adfcss	f7, f1, f1
     96c:	02000001 	andeq	r0, r0, #1
     970:	79156c91 	ldmdbvc	r5, {r0, r4, r7, sl, fp, sp, lr}
     974:	01720100 	cmneq	r2, r0, lsl #2
     978:	0000012e 	andeq	r0, r0, lr, lsr #2
     97c:	13689102 	cmnne	r8, #-2147483648	; 0x80000000
     980:	000001c8 	andeq	r0, r0, r8, asr #3
     984:	2e017301 	cdpcs	3, 0, cr7, cr1, cr1, {0}
     988:	02000001 	andeq	r0, r0, #1
     98c:	98136491 	ldmdals	r3, {r0, r4, r7, sl, sp, lr}
     990:	01000002 	tsteq	r0, r2
     994:	012e0174 			; <UNDEFINED> instruction: 0x012e0174
     998:	91020000 	mrsls	r0, (UNDEF: 2)
     99c:	32781560 	rsbscc	r1, r8, #96, 10	; 0x18000000
     9a0:	01760100 	cmneq	r6, r0, lsl #2
     9a4:	0000012e 	andeq	r0, r0, lr, lsr #2
     9a8:	165c9102 	ldrbne	r9, [ip], -r2, lsl #2
     9ac:	7a010069 	bvc	40b58 <startup-0x1ffbf4a8>
     9b0:	00012e01 	andeq	r2, r1, r1, lsl #28
     9b4:	006b1500 	rsbeq	r1, fp, r0, lsl #10
     9b8:	2e017b01 	vmlacs.f64	d7, d1, d1
     9bc:	02000001 	andeq	r0, r0, #1
     9c0:	11005891 			; <UNDEFINED> instruction: 0x11005891
     9c4:	000006c2 	andeq	r0, r0, r2, asr #13
     9c8:	62016501 	andvs	r6, r1, #4194304	; 0x400000
     9cc:	5220000e 	eorpl	r0, r0, #14
     9d0:	01000000 	mrseq	r0, (UNDEF: 0)
     9d4:	0003a39c 	muleq	r3, ip, r3
     9d8:	00781700 	rsbseq	r1, r8, r0, lsl #14
     9dc:	2e016501 	cfsh32cs	mvfx6, mvfx1, #1
     9e0:	02000001 	andeq	r0, r0, #1
     9e4:	79176c91 	ldmdbvc	r7, {r0, r4, r7, sl, fp, sp, lr}
     9e8:	01650100 	cmneq	r5, r0, lsl #2
     9ec:	0000012e 	andeq	r0, r0, lr, lsr #2
     9f0:	12689102 	rsbne	r9, r8, #-2147483648	; 0x80000000
     9f4:	000001c8 	andeq	r0, r0, r8, asr #3
     9f8:	2e016501 	cfsh32cs	mvfx6, mvfx1, #1
     9fc:	02000001 	andeq	r0, r0, #1
     a00:	98126491 	ldmdals	r2, {r0, r4, r7, sl, sp, lr}
     a04:	01000002 	tsteq	r0, r2
     a08:	012e0165 			; <UNDEFINED> instruction: 0x012e0165
     a0c:	91020000 	mrsls	r0, (UNDEF: 2)
     a10:	00691560 	rsbeq	r1, r9, r0, ror #10
     a14:	2e016601 	cfmadd32cs	mvax0, mvfx6, mvfx1, mvfx1
     a18:	02000001 	andeq	r0, r0, #1
     a1c:	6a157491 	bvs	55dc68 <startup-0x1faa2398>
     a20:	01670100 	cmneq	r7, r0, lsl #2
     a24:	0000012e 	andeq	r0, r0, lr, lsr #2
     a28:	00709102 	rsbseq	r9, r0, r2, lsl #2
     a2c:	00066511 	andeq	r6, r6, r1, lsl r5
     a30:	015b0100 	cmpeq	fp, r0, lsl #2
     a34:	20000e10 	andcs	r0, r0, r0, lsl lr
     a38:	00000052 	andeq	r0, r0, r2, asr r0
     a3c:	040c9c01 	streq	r9, [ip], #-3073	; 0xfffff3ff
     a40:	78170000 	ldmdavc	r7, {}	; <UNPREDICTABLE>
     a44:	015b0100 	cmpeq	fp, r0, lsl #2
     a48:	0000012e 	andeq	r0, r0, lr, lsr #2
     a4c:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
     a50:	5b010079 	blpl	40c3c <startup-0x1ffbf3c4>
     a54:	00012e01 	andeq	r2, r1, r1, lsl #28
     a58:	68910200 	ldmvs	r1, {r9}
     a5c:	0001c812 	andeq	ip, r1, r2, lsl r8
     a60:	015b0100 	cmpeq	fp, r0, lsl #2
     a64:	0000012e 	andeq	r0, r0, lr, lsr #2
     a68:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
     a6c:	00000298 	muleq	r0, r8, r2
     a70:	2e015b01 	vmlacs.f64	d5, d1, d1
     a74:	02000001 	andeq	r0, r0, #1
     a78:	69156091 	ldmdbvs	r5, {r0, r4, r7, sp, lr}
     a7c:	015c0100 	cmpeq	ip, r0, lsl #2
     a80:	0000012e 	andeq	r0, r0, lr, lsr #2
     a84:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
     a88:	5d01006a 	stcpl	0, cr0, [r1, #-424]	; 0xfffffe58
     a8c:	00012e01 	andeq	r2, r1, r1, lsl #28
     a90:	70910200 	addsvc	r0, r1, r0, lsl #4
     a94:	059c1100 	ldreq	r1, [ip, #256]	; 0x100
     a98:	45010000 	strmi	r0, [r1, #-0]
     a9c:	000cf601 	andeq	pc, ip, r1, lsl #12
     aa0:	00011a20 	andeq	r1, r1, r0, lsr #20
     aa4:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
     aa8:	17000004 	strne	r0, [r0, -r4]
     aac:	45010073 	strmi	r0, [r1, #-115]	; 0xffffff8d
     ab0:	00009e01 	andeq	r9, r0, r1, lsl #28
     ab4:	54910200 	ldrpl	r0, [r1], #512	; 0x200
     ab8:	01007817 	tsteq	r0, r7, lsl r8
     abc:	012e0145 			; <UNDEFINED> instruction: 0x012e0145
     ac0:	91020000 	mrsls	r0, (UNDEF: 2)
     ac4:	00791750 	rsbseq	r1, r9, r0, asr r7
     ac8:	2e014501 	cfsh32cs	mvfx4, mvfx1, #1
     acc:	02000001 	andeq	r0, r0, #1
     ad0:	73174c91 	tstvc	r7, #37120	; 0x9100
     ad4:	01007465 	tsteq	r0, r5, ror #8
     ad8:	012e0145 			; <UNDEFINED> instruction: 0x012e0145
     adc:	91020000 	mrsls	r0, (UNDEF: 2)
     ae0:	062a1248 	strteq	r1, [sl], -r8, asr #4
     ae4:	45010000 	strmi	r0, [r1, #-0]
     ae8:	00012e01 	andeq	r2, r1, r1, lsl #28
     aec:	00910200 	addseq	r0, r1, r0, lsl #4
     af0:	01006915 	tsteq	r0, r5, lsl r9
     af4:	012e0146 			; <UNDEFINED> instruction: 0x012e0146
     af8:	91020000 	mrsls	r0, (UNDEF: 2)
     afc:	006a156c 	rsbeq	r1, sl, ip, ror #10
     b00:	2e014601 	cfmadd32cs	mvax0, mvfx4, mvfx1, mvfx1
     b04:	02000001 	andeq	r0, r0, #1
     b08:	6b156891 	blvs	55ad54 <startup-0x1faa52ac>
     b0c:	01460100 	mrseq	r0, (UNDEF: 86)
     b10:	0000012e 	andeq	r0, r0, lr, lsr #2
     b14:	13649102 	cmnne	r4, #-2147483648	; 0x80000000
     b18:	0000069d 	muleq	r0, sp, r6
     b1c:	2e014601 	cfmadd32cs	mvax0, mvfx4, mvfx1, mvfx1
     b20:	02000001 	andeq	r0, r0, #1
     b24:	2e186091 	mrccs	0, 0, r6, cr8, cr1, {4}
     b28:	bc20000d 	stclt	0, cr0, [r0], #-52	; 0xffffffcc
     b2c:	13000000 	movwne	r0, #0
     b30:	00000698 	muleq	r0, r8, r6
     b34:	5b014d01 	blpl	53f40 <startup-0x1ffac0c0>
     b38:	02000000 	andeq	r0, r0, #0
     b3c:	00005f91 	muleq	r0, r1, pc	; <UNPREDICTABLE>
     b40:	00057111 	andeq	r7, r5, r1, lsl r1
     b44:	01300100 	teqeq	r0, r0, lsl #2
     b48:	20000c20 	andcs	r0, r0, r0, lsr #24
     b4c:	000000d6 	ldrdeq	r0, [r0], -r6
     b50:	05209c01 	streq	r9, [r0, #-3073]!	; 0xfffff3ff
     b54:	0e120000 	cdpeq	0, 1, cr0, cr2, cr0, {0}
     b58:	01000005 	tsteq	r0, r5
     b5c:	05200130 	streq	r0, [r0, #-304]!	; 0xfffffed0
     b60:	91020000 	mrsls	r0, (UNDEF: 2)
     b64:	00691564 	rsbeq	r1, r9, r4, ror #10
     b68:	7e013101 	adfvcs	f3, f1, f1
     b6c:	02000001 	andeq	r0, r0, #1
     b70:	6a157791 	bvs	55e9bc <startup-0x1faa1644>
     b74:	01310100 	teqeq	r1, r0, lsl #2
     b78:	0000017e 	andeq	r0, r0, lr, ror r1
     b7c:	13769102 	cmnne	r6, #-2147483648	; 0x80000000
     b80:	000006de 	ldrdeq	r0, [r0], -lr
     b84:	7e013101 	adfvcs	f3, f1, f1
     b88:	02000001 	andeq	r0, r0, #1
     b8c:	63156f91 	tstvs	r5, #580	; 0x244
     b90:	01310100 	teqeq	r1, r0, lsl #2
     b94:	0000017e 	andeq	r0, r0, lr, ror r1
     b98:	15759102 	ldrbne	r9, [r5, #-258]!	; 0xfffffefe
     b9c:	3201006b 	andcc	r0, r1, #107	; 0x6b
     ba0:	00004e01 	andeq	r4, r0, r1, lsl #28
     ba4:	70910200 	addsvc	r0, r1, r0, lsl #4
     ba8:	7e040500 	cfsh32vc	mvfx0, mvfx4, #0
     bac:	11000001 	tstne	r0, r1
     bb0:	0000051b 	andeq	r0, r0, fp, lsl r5
     bb4:	80010801 	andhi	r0, r1, r1, lsl #16
     bb8:	a020000a 	eorge	r0, r0, sl
     bbc:	01000001 	tsteq	r0, r1
     bc0:	0005a09c 	muleq	r5, ip, r0
     bc4:	00781700 	rsbseq	r1, r8, r0, lsl #14
     bc8:	2e010801 	cdpcs	8, 0, cr0, cr1, cr1, {0}
     bcc:	02000001 	andeq	r0, r0, #1
     bd0:	79176491 	ldmdbvc	r7, {r0, r4, r7, sl, sp, lr}
     bd4:	01080100 	mrseq	r0, (UNDEF: 24)
     bd8:	0000012e 	andeq	r0, r0, lr, lsr #2
     bdc:	17609102 	strbne	r9, [r0, -r2, lsl #2]!
     be0:	00746573 	rsbseq	r6, r4, r3, ror r5
     be4:	2e010801 	cdpcs	8, 0, cr0, cr1, cr1, {0}
     be8:	02000001 	andeq	r0, r0, #1
     bec:	73135c91 	tstvc	r3, #37120	; 0x9100
     bf0:	01000006 	tsteq	r0, r6
     bf4:	017e0109 	cmneq	lr, r9, lsl #2
     bf8:	91020000 	mrsls	r0, (UNDEF: 2)
     bfc:	00631577 	rsbeq	r1, r3, r7, ror r5
     c00:	7e010901 	vmlavc.f16	s0, s2, s2	; <UNPREDICTABLE>
     c04:	02000001 	andeq	r0, r0, #1
     c08:	de136f91 	mrcle	15, 0, r6, cr3, cr1, {4}
     c0c:	01000006 	tsteq	r0, r6
     c10:	017e0109 	cmneq	lr, r9, lsl #2
     c14:	91020000 	mrsls	r0, (UNDEF: 2)
     c18:	06d11376 			; <UNDEFINED> instruction: 0x06d11376
     c1c:	0a010000 	beq	40c24 <startup-0x1ffbf3dc>
     c20:	00012e01 	andeq	r2, r1, r1, lsl #28
     c24:	70910200 	addsvc	r0, r1, r0, lsl #4
     c28:	05661900 	strbeq	r1, [r6, #-2304]!	; 0xfffff700
     c2c:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
     c30:	20000900 	andcs	r0, r0, r0, lsl #18
     c34:	00000180 	andeq	r0, r0, r0, lsl #3
     c38:	06069c01 	streq	r9, [r6], -r1, lsl #24
     c3c:	781a0000 	ldmdavc	sl, {}	; <UNPREDICTABLE>
     c40:	2ede0100 	cdpcs	1, 13, cr0, cr14, cr0, {0}
     c44:	02000001 	andeq	r0, r0, #1
     c48:	791a6c91 	ldmdbvc	sl, {r0, r4, r7, sl, fp, sp, lr}
     c4c:	2ede0100 	cdpcs	1, 13, cr0, cr14, cr0, {0}
     c50:	02000001 	andeq	r0, r0, #1
     c54:	731a6891 	tstvc	sl, #9502720	; 0x910000
     c58:	01007465 	tsteq	r0, r5, ror #8
     c5c:	00012ede 	ldrdeq	r2, [r1], -lr
     c60:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     c64:	00062a1b 	andeq	r2, r6, fp, lsl sl
     c68:	2ede0100 	cdpcs	1, 13, cr0, cr14, cr0, {0}
     c6c:	02000001 	andeq	r0, r0, #1
     c70:	731c6091 	tstvc	ip, #145	; 0x91
     c74:	01000006 	tsteq	r0, r6
     c78:	00017edf 	ldrdeq	r7, [r1], -pc	; <UNPREDICTABLE>
     c7c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     c80:	0006d11c 	andeq	sp, r6, ip, lsl r1
     c84:	2ee00100 	cdpcs	1, 14, cr0, cr0, cr0, {0}
     c88:	02000001 	andeq	r0, r0, #1
     c8c:	1d007091 	stcne	0, cr7, [r0, #-580]	; 0xfffffdbc
     c90:	00000724 	andeq	r0, r0, r4, lsr #14
     c94:	089ad101 	ldmeq	sl, {r0, r8, ip, lr, pc}
     c98:	00662000 	rsbeq	r2, r6, r0
     c9c:	9c010000 	stcls	0, cr0, [r1], {-0}
     ca0:	00000642 	andeq	r0, r0, r2, asr #12
     ca4:	0004fc1c 	andeq	pc, r4, ip, lsl ip	; <UNPREDICTABLE>
     ca8:	7ed20100 	cdpvc	1, 13, cr0, cr2, cr0, {0}
     cac:	02000001 	andeq	r0, r0, #1
     cb0:	a8187791 	ldmdage	r8, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
     cb4:	3e200008 	cdpcc	0, 2, cr0, cr0, cr8, {0}
     cb8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     cbc:	00646461 	rsbeq	r6, r4, r1, ror #8
     cc0:	017ed601 	cmneq	lr, r1, lsl #12
     cc4:	91020000 	mrsls	r0, (UNDEF: 2)
     cc8:	1f000076 	svcne	0x00000076
     ccc:	00000711 	andeq	r0, r0, r1, lsl r7
     cd0:	082cbd01 	stmdaeq	ip!, {r0, r8, sl, fp, ip, sp, pc}
     cd4:	006e2000 	rsbeq	r2, lr, r0
     cd8:	9c010000 	stcls	0, cr0, [r1], {-0}
     cdc:	0006851d 	andeq	r8, r6, sp, lsl r5
     ce0:	e6b50100 	ldrt	r0, [r5], r0, lsl #2
     ce4:	46200007 	strtmi	r0, [r0], -r7
     ce8:	01000000 	mrseq	r0, (UNDEF: 0)
     cec:	0006859c 	muleq	r6, ip, r5
     cf0:	054d1b00 	strbeq	r1, [sp, #-2816]	; 0xfffff500
     cf4:	b5010000 	strlt	r0, [r1, #-0]
     cf8:	0000017e 	andeq	r0, r0, lr, ror r1
     cfc:	1b779102 	blne	1de510c <startup-0x1e21aef4>
     d00:	000006de 	ldrdeq	r0, [r0], -lr
     d04:	017eb501 	cmneq	lr, r1, lsl #10
     d08:	91020000 	mrsls	r0, (UNDEF: 2)
     d0c:	3f1d0076 	svccc	0x001d0076
     d10:	01000005 	tsteq	r0, r5
     d14:	0007a0ae 	andeq	sl, r7, lr, lsr #1
     d18:	00004620 	andeq	r4, r0, r0, lsr #12
     d1c:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
     d20:	1b000006 	blne	d40 <startup-0x1ffff2c0>
     d24:	0000054d 	andeq	r0, r0, sp, asr #10
     d28:	017eae01 	cmneq	lr, r1, lsl #28
     d2c:	91020000 	mrsls	r0, (UNDEF: 2)
     d30:	06de1b77 			; <UNDEFINED> instruction: 0x06de1b77
     d34:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
     d38:	0000017e 	andeq	r0, r0, lr, ror r1
     d3c:	00769102 	rsbseq	r9, r6, r2, lsl #2
     d40:	0005b41d 	andeq	fp, r5, sp, lsl r4
     d44:	22990100 	addscs	r0, r9, #0, 2
     d48:	7e200007 	cdpvc	0, 2, cr0, cr0, cr7, {0}
     d4c:	01000000 	mrseq	r0, (UNDEF: 0)
     d50:	0006e99c 	muleq	r6, ip, r9
     d54:	05151b00 	ldreq	r1, [r5, #-2816]	; 0xfffff500
     d58:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
     d5c:	0000017e 	andeq	r0, r0, lr, ror r1
     d60:	1b779102 	blne	1de5170 <startup-0x1e21ae90>
     d64:	000006de 	ldrdeq	r0, [r0], -lr
     d68:	017e9901 	cmneq	lr, r1, lsl #18
     d6c:	91020000 	mrsls	r0, (UNDEF: 2)
     d70:	18200076 	stmdane	r0!, {r1, r2, r4, r5, r6}
     d74:	01000006 	tsteq	r0, r6
     d78:	00012e94 	muleq	r1, r4, lr
     d7c:	0006f800 	andeq	pc, r6, r0, lsl #16
     d80:	00002a20 	andeq	r2, r0, r0, lsr #20
     d84:	119c0100 	orrsne	r0, ip, r0, lsl #2
     d88:	1b000007 	blne	dac <startup-0x1ffff254>
     d8c:	000006de 	ldrdeq	r0, [r0], -lr
     d90:	017e9401 	cmneq	lr, r1, lsl #8
     d94:	91020000 	mrsls	r0, (UNDEF: 2)
     d98:	01210077 			; <UNDEFINED> instruction: 0x01210077
     d9c:	01000005 	tsteq	r0, r5
     da0:	00017e7b 	andeq	r7, r1, fp, ror lr
     da4:	00066400 	andeq	r6, r6, r0, lsl #8
     da8:	00009420 	andeq	r9, r0, r0, lsr #8
     dac:	469c0100 	ldrmi	r0, [ip], r0, lsl #2
     db0:	1b000007 	blne	dd4 <startup-0x1ffff22c>
     db4:	000006de 	ldrdeq	r0, [r0], -lr
     db8:	017e7b01 	cmneq	lr, r1, lsl #22
     dbc:	91020000 	mrsls	r0, (UNDEF: 2)
     dc0:	76721e6f 	ldrbtvc	r1, [r2], -pc, ror #28
     dc4:	5b840100 	blpl	fe1011cc <firstTime.4076+0xde0fc5c4>
     dc8:	02000000 	andeq	r0, r0, #0
     dcc:	1d007791 	stcne	7, cr7, [r0, #-580]	; 0xfffffdbc
     dd0:	000006e9 	andeq	r0, r0, r9, ror #13
     dd4:	05f66501 	ldrbeq	r6, [r6, #1281]!	; 0x501
     dd8:	006e2000 	rsbeq	r2, lr, r0
     ddc:	9c010000 	stcls	0, cr0, [r1], {-0}
     de0:	00000768 	andeq	r0, r0, r8, ror #14
     de4:	0100631e 	tsteq	r0, lr, lsl r3
     de8:	00017e66 	andeq	r7, r1, r6, ror #28
     dec:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     df0:	06d71d00 	ldrbeq	r1, [r7], r0, lsl #26
     df4:	50010000 	andpl	r0, r1, r0
     df8:	20000590 	mulcs	r0, r0, r5
     dfc:	00000066 	andeq	r0, r0, r6, rrx
     e00:	078c9c01 	streq	r9, [ip, r1, lsl #24]
     e04:	de1b0000 	cdple	0, 1, cr0, cr11, cr0, {0}
     e08:	01000006 	tsteq	r0, r6
     e0c:	00017e50 	andeq	r7, r1, r0, asr lr
     e10:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     e14:	05d02200 	ldrbeq	r2, [r0, #512]	; 0x200
     e18:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
     e1c:	20000538 	andcs	r0, r0, r8, lsr r5
     e20:	00000058 	andeq	r0, r0, r8, asr r0
     e24:	07ba9c01 	ldreq	r9, [sl, r1, lsl #24]!
     e28:	781a0000 	ldmdavc	sl, {}	; <UNPREDICTABLE>
     e2c:	7e490100 	dvfvce	f0, f1, f0
     e30:	02000001 	andeq	r0, r0, #1
     e34:	631e6f91 	tstvs	lr, #580	; 0x244
     e38:	7e4a0100 	dvfvce	f0, f2, f0
     e3c:	02000001 	andeq	r0, r0, #1
     e40:	22007791 	andcs	r7, r0, #38010880	; 0x2440000
     e44:	00000644 	andeq	r0, r0, r4, asr #12
     e48:	04e84101 	strbteq	r4, [r8], #257	; 0x101
     e4c:	00502000 	subseq	r2, r0, r0
     e50:	9c010000 	stcls	0, cr0, [r1], {-0}
     e54:	000007e8 	andeq	r0, r0, r8, ror #15
     e58:	0100781a 	tsteq	r0, sl, lsl r8
     e5c:	00017e41 	andeq	r7, r1, r1, asr #28
     e60:	6f910200 	svcvs	0x00910200
     e64:	0100631e 	tsteq	r0, lr, lsl r3
     e68:	00017e42 	andeq	r7, r1, r2, asr #28
     e6c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     e70:	06ac1f00 	strteq	r1, [ip], r0, lsl #30
     e74:	3a010000 	bcc	40e7c <startup-0x1ffbf184>
     e78:	200004b8 			; <UNDEFINED> instruction: 0x200004b8
     e7c:	00000030 	andeq	r0, r0, r0, lsr r0
     e80:	551f9c01 	ldrpl	r9, [pc, #-3073]	; 287 <startup-0x1ffffd79>
     e84:	01000005 	tsteq	r0, r5
     e88:	0004a037 	andeq	sl, r4, r7, lsr r0
     e8c:	00001820 	andeq	r1, r0, r0, lsr #16
     e90:	199c0100 	ldmibne	ip, {r8}
     e94:	000006fc 	strdeq	r0, [r0], -ip
     e98:	046e3201 	strbteq	r3, [lr], #-513	; 0xfffffdff
     e9c:	00322000 	eorseq	r2, r2, r0
     ea0:	9c010000 	stcls	0, cr0, [r1], {-0}
     ea4:	0000083a 	andeq	r0, r0, sl, lsr r8
     ea8:	00050e1b 	andeq	r0, r5, fp, lsl lr
     eac:	20320100 	eorscs	r0, r2, r0, lsl #2
     eb0:	02000005 	andeq	r0, r0, #5
     eb4:	691e6c91 	ldmdbvs	lr, {r0, r4, r7, sl, fp, sp, lr}
     eb8:	2e330100 	rsfcss	f0, f3, f0
     ebc:	02000001 	andeq	r0, r0, #1
     ec0:	1d007491 	cfstrsne	mvf7, [r0, #-580]	; 0xfffffdbc
     ec4:	00000585 	andeq	r0, r0, r5, lsl #11
     ec8:	04482101 	strbeq	r2, [r8], #-257	; 0xfffffeff
     ecc:	00262000 	eoreq	r2, r6, r0
     ed0:	9c010000 	stcls	0, cr0, [r1], {-0}
     ed4:	0000085d 	andeq	r0, r0, sp, asr r8
     ed8:	00736d1a 	rsbseq	r6, r3, sl, lsl sp
     edc:	004e2101 	subeq	r2, lr, r1, lsl #2
     ee0:	91020000 	mrsls	r0, (UNDEF: 2)
     ee4:	331d0074 	tstcc	sp, #116	; 0x74
     ee8:	01000005 	tsteq	r0, r5
     eec:	00041c18 	andeq	r1, r4, r8, lsl ip
     ef0:	00002c20 	andeq	r2, r0, r0, lsr #24
     ef4:	809c0100 	addshi	r0, ip, r0, lsl #2
     ef8:	1a000008 	bne	f20 <startup-0x1ffff0e0>
     efc:	01007375 	tsteq	r0, r5, ror r3
     f00:	00004e18 	andeq	r4, r0, r8, lsl lr
     f04:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     f08:	05a82300 	streq	r2, [r8, #768]!	; 0x300
     f0c:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
     f10:	200003d8 	ldrdcs	r0, [r0], -r8
     f14:	00000044 	andeq	r0, r0, r4, asr #32
     f18:	59239c01 	stmdbpl	r3!, {r0, sl, fp, ip, pc}
     f1c:	01000006 	tsteq	r0, r6
     f20:	00039404 	andeq	r9, r3, r4, lsl #8
     f24:	00004420 	andeq	r4, r0, r0, lsr #8
     f28:	009c0100 	addseq	r0, ip, r0, lsl #2
     f2c:	000001e0 	andeq	r0, r0, r0, ror #3
     f30:	03e40004 	mvneq	r0, #4
     f34:	01040000 	mrseq	r0, (UNDEF: 4)
     f38:	0000004b 	andeq	r0, r0, fp, asr #32
     f3c:	00074a0c 	andeq	r4, r7, ip, lsl #20
     f40:	0011d800 	andseq	sp, r1, r0, lsl #16
     f44:	00005620 	andeq	r5, r0, r0, lsr #12
     f48:	00057900 	andeq	r7, r5, r0, lsl #18
     f4c:	020c0200 	andeq	r0, ip, #0, 4
     f50:	00004e05 	andeq	r4, r0, r5, lsl #28
     f54:	01c80300 	biceq	r0, r8, r0, lsl #6
     f58:	07020000 	streq	r0, [r2, -r0]
     f5c:	0000004e 	andeq	r0, r0, lr, asr #32
     f60:	02980300 	addseq	r0, r8, #0, 6
     f64:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     f68:	0000004e 	andeq	r0, r0, lr, asr #32
     f6c:	06250304 	strteq	r0, [r5], -r4, lsl #6
     f70:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     f74:	00000055 	andeq	r0, r0, r5, asr r0
     f78:	04040008 	streq	r0, [r4], #-8
     f7c:	0002cb07 	andeq	ip, r2, r7, lsl #22
     f80:	5b040500 	blpl	102388 <startup-0x1fefdc78>
     f84:	04000000 	streq	r0, [r0], #-0
     f88:	02600801 	rsbeq	r0, r0, #65536	; 0x10000
     f8c:	c6060000 	strgt	r0, [r6], -r0
     f90:	02000004 	andeq	r0, r0, #4
     f94:	0000210a 	andeq	r2, r0, sl, lsl #2
     f98:	02590700 	subseq	r0, r9, #0, 14
     f9c:	030c0000 	movweq	r0, #49152	; 0xc000
     fa0:	00009e06 	andeq	r9, r0, r6, lsl #28
     fa4:	03b50300 			; <UNDEFINED> instruction: 0x03b50300
     fa8:	07030000 	streq	r0, [r3, -r0]
     fac:	0000009e 	muleq	r0, lr, r0
     fb0:	03c00300 	biceq	r0, r0, #0, 6
     fb4:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     fb8:	0000009e 	muleq	r0, lr, r0
     fbc:	02550304 	subseq	r0, r5, #4, 6	; 0x10000000
     fc0:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
     fc4:	0000009e 	muleq	r0, lr, r0
     fc8:	04050008 	streq	r0, [r5], #-8
     fcc:	00000062 	andeq	r0, r0, r2, rrx
     fd0:	000a2806 	andeq	r2, sl, r6, lsl #16
     fd4:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
     fd8:	07000000 	streq	r0, [r0, -r0]
     fdc:	0000014a 	andeq	r0, r0, sl, asr #2
     fe0:	28060424 	stmdacs	r6, {r2, r5, sl}
     fe4:	03000001 	movweq	r0, #1
     fe8:	0000048a 	andeq	r0, r0, sl, lsl #9
     fec:	01280704 			; <UNDEFINED> instruction: 0x01280704
     ff0:	03000000 	movweq	r0, #0
     ff4:	000000e3 	andeq	r0, r0, r3, ror #1
     ff8:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
     ffc:	03040000 	movweq	r0, #16384	; 0x4000
    1000:	000001ed 	andeq	r0, r0, sp, ror #3
    1004:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
    1008:	03080000 	movweq	r0, #32768	; 0x8000
    100c:	000001e6 	andeq	r0, r0, r6, ror #3
    1010:	01460c04 	cmpeq	r6, r4, lsl #24
    1014:	030c0000 	movweq	r0, #49152	; 0xc000
    1018:	0000020c 	andeq	r0, r0, ip, lsl #4
    101c:	01460d04 	cmpeq	r6, r4, lsl #26
    1020:	03100000 	tsteq	r0, #0
    1024:	0000010b 	andeq	r0, r0, fp, lsl #2
    1028:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
    102c:	03140000 	tsteq	r4, #0
    1030:	00000368 	andeq	r0, r0, r8, ror #6
    1034:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
    1038:	03180000 	tsteq	r8, #0
    103c:	00000443 	andeq	r0, r0, r3, asr #8
    1040:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
    1044:	031c0000 	tsteq	ip, #0
    1048:	00000027 	andeq	r0, r0, r7, lsr #32
    104c:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
    1050:	00200000 	eoreq	r0, r0, r0
    1054:	00a40405 	adceq	r0, r4, r5, lsl #8
    1058:	04080000 	streq	r0, [r8], #-0
    105c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1060:	01400900 	cmpeq	r0, r0, lsl #18
    1064:	400a0000 	andmi	r0, sl, r0
    1068:	00000001 	andeq	r0, r0, r1
    106c:	00af0405 	adceq	r0, pc, r5, lsl #8
    1070:	04050000 	streq	r0, [r5], #-0
    1074:	00000135 	andeq	r0, r0, r5, lsr r1
    1078:	00014b06 	andeq	r4, r1, r6, lsl #22
    107c:	af150400 	svcge	0x00150400
    1080:	0b000000 	bleq	1088 <startup-0x1fffef78>
    1084:	00000162 	andeq	r0, r0, r2, ror #2
    1088:	00000162 	andeq	r0, r0, r2, ror #2
    108c:	0405000c 	streq	r0, [r5], #-12
    1090:	0000014c 	andeq	r0, r0, ip, asr #2
    1094:	0003920d 	andeq	r9, r3, sp, lsl #4
    1098:	571a0400 	ldrpl	r0, [sl, -r0, lsl #8]
    109c:	0d000001 	stceq	0, cr0, [r0, #-4]
    10a0:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    10a4:	012e1b04 			; <UNDEFINED> instruction: 0x012e1b04
    10a8:	04040000 	streq	r0, [r4], #-0
    10ac:	0000f707 	andeq	pc, r0, r7, lsl #14
    10b0:	01680e00 	cmneq	r8, r0, lsl #28
    10b4:	03010000 	movweq	r0, #4096	; 0x1000
    10b8:	34c40305 	strbcc	r0, [r4], #773	; 0x305
    10bc:	730e2000 	movwvc	r2, #57344	; 0xe000
    10c0:	01000001 	tsteq	r0, r1
    10c4:	14030504 	strne	r0, [r3], #-1284	; 0xfffffafc
    10c8:	0f200018 	svceq	0x00200018
    10cc:	00000739 	andeq	r0, r0, r9, lsr r7
    10d0:	11e80c01 	mvnne	r0, r1, lsl #24
    10d4:	00462000 	subeq	r2, r6, r0
    10d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    10dc:	000001c3 	andeq	r0, r0, r3, asr #3
    10e0:	00077f10 	andeq	r7, r7, r0, lsl pc
    10e4:	620c0100 	andvs	r0, ip, #0, 2
    10e8:	02000001 	andeq	r0, r0, #1
    10ec:	11007491 			; <UNDEFINED> instruction: 0x11007491
    10f0:	0000020c 	andeq	r0, r0, ip, lsl #4
    10f4:	11d80701 	bicsne	r0, r8, r1, lsl #14
    10f8:	00102000 	andseq	r2, r0, r0
    10fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    1100:	00077f10 	andeq	r7, r7, r0, lsl pc
    1104:	62070100 	andvs	r0, r7, #0, 2
    1108:	02000001 	andeq	r0, r0, #1
    110c:	00007491 	muleq	r0, r1, r4
    1110:	00000135 	andeq	r0, r0, r5, lsr r1
    1114:	04ca0004 	strbeq	r0, [sl], #4
    1118:	01040000 	mrseq	r0, (UNDEF: 4)
    111c:	0000004b 	andeq	r0, r0, fp, asr #32
    1120:	0007f40c 	andeq	pc, r7, ip, lsl #8
    1124:	00123000 	andseq	r3, r2, r0
    1128:	00006020 	andeq	r6, r0, r0, lsr #32
    112c:	00060900 	andeq	r0, r6, r0, lsl #18
    1130:	02180200 	andseq	r0, r8, #0, 4
    1134:	0000ae0e 	andeq	sl, r0, lr, lsl #28
    1138:	07840300 	streq	r0, [r4, r0, lsl #6]
    113c:	0f020000 	svceq	0x00020000
    1140:	000000ae 	andeq	r0, r0, lr, lsr #1
    1144:	079d0300 	ldreq	r0, [sp, r0, lsl #6]
    1148:	10020000 	andne	r0, r2, r0
    114c:	000000b5 	strheq	r0, [r0], -r5
    1150:	07bb0304 	ldreq	r0, [fp, r4, lsl #6]!
    1154:	11020000 	mrsne	r0, (UNDEF: 2)
    1158:	000000b5 	strheq	r0, [r0], -r5
    115c:	07dd0306 	ldrbeq	r0, [sp, r6, lsl #6]
    1160:	12020000 	andne	r0, r2, #0
    1164:	000000ae 	andeq	r0, r0, lr, lsr #1
    1168:	07a90308 	streq	r0, [r9, r8, lsl #6]!
    116c:	13020000 	movwne	r0, #8192	; 0x2000
    1170:	000000ae 	andeq	r0, r0, lr, lsr #1
    1174:	07ed030c 	strbeq	r0, [sp, ip, lsl #6]!
    1178:	14020000 	strne	r0, [r2], #-0
    117c:	000000bc 	strheq	r0, [r0], -ip
    1180:	07e50310 			; <UNDEFINED> instruction: 0x07e50310
    1184:	15020000 	strne	r0, [r2, #-0]
    1188:	000000bc 	strheq	r0, [r0], -ip
    118c:	07af0311 			; <UNDEFINED> instruction: 0x07af0311
    1190:	16020000 	strne	r0, [r2], -r0
    1194:	000000b5 	strheq	r0, [r0], -r5
    1198:	07d60312 	bfieq	r0, r2, #6, #17
    119c:	17020000 	strne	r0, [r2, -r0]
    11a0:	000000bc 	strheq	r0, [r0], -ip
    11a4:	07950314 			; <UNDEFINED> instruction: 0x07950314
    11a8:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    11ac:	000000bc 	strheq	r0, [r0], -ip
    11b0:	08230315 	stmdaeq	r3!, {r0, r2, r4, r8, r9}
    11b4:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
    11b8:	000000b5 	strheq	r0, [r0], -r5
    11bc:	04040016 	streq	r0, [r4], #-22	; 0xffffffea
    11c0:	0002cb07 	andeq	ip, r2, r7, lsl #22
    11c4:	07020400 	streq	r0, [r2, -r0, lsl #8]
    11c8:	000002c5 	andeq	r0, r0, r5, asr #5
    11cc:	60080104 	andvs	r0, r8, r4, lsl #2
    11d0:	05000002 	streq	r0, [r0, #-2]
    11d4:	000007a4 	andeq	r0, r0, r4, lsr #15
    11d8:	00211a02 	eoreq	r1, r1, r2, lsl #20
    11dc:	c6060000 	strgt	r0, [r6], -r0
    11e0:	01000007 	tsteq	r0, r7
    11e4:	0001040d 	andeq	r0, r1, sp, lsl #8
    11e8:	00125c00 	andseq	r5, r2, r0, lsl #24
    11ec:	00003420 	andeq	r3, r0, r0, lsr #8
    11f0:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    11f4:	07000001 	streq	r0, [r0, -r1]
    11f8:	00746962 	rsbseq	r6, r4, r2, ror #18
    11fc:	01040d01 	tsteq	r4, r1, lsl #26
    1200:	91020000 	mrsls	r0, (UNDEF: 2)
    1204:	49440864 	stmdbmi	r4, {r2, r5, r6, fp}^
    1208:	0e01004c 	cdpeq	0, 0, cr0, cr1, cr12, {2}
    120c:	0000010b 	andeq	r0, r0, fp, lsl #2
    1210:	006f9102 	rsbeq	r9, pc, r2, lsl #2
    1214:	69050409 	stmdbvs	r5, {r0, r3, sl}
    1218:	0400746e 	streq	r7, [r0], #-1134	; 0xfffffb92
    121c:	02690801 	rsbeq	r0, r9, #65536	; 0x10000
    1220:	2f0a0000 	svccs	0x000a0000
    1224:	01000008 	tsteq	r0, r8
    1228:	00010b08 	andeq	r0, r1, r8, lsl #22
    122c:	00124800 	andseq	r4, r2, r0, lsl #16
    1230:	00001420 	andeq	r1, r0, r0, lsr #8
    1234:	0b9c0100 	bleq	fe70163c <firstTime.4076+0xde6fca34>
    1238:	0000078a 	andeq	r0, r0, sl, lsl #15
    123c:	12300401 	eorsne	r0, r0, #16777216	; 0x1000000
    1240:	00182000 	andseq	r2, r8, r0
    1244:	9c010000 	stcls	0, cr0, [r1], {-0}
    1248:	00010000 	andeq	r0, r1, r0
    124c:	87000400 	strhi	r0, [r0, -r0, lsl #8]
    1250:	04000005 	streq	r0, [r0], #-5
    1254:	00004b01 	andeq	r4, r0, r1, lsl #22
    1258:	08430c00 	stmdaeq	r3, {sl, fp}^
    125c:	12900000 	addsne	r0, r0, #0
    1260:	00282000 	eoreq	r2, r8, r0
    1264:	067a0000 	ldrbteq	r0, [sl], -r0
    1268:	0c020000 	stceq	0, cr0, [r2], {-0}
    126c:	004e0502 	subeq	r0, lr, r2, lsl #10
    1270:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    1274:	02000001 	andeq	r0, r0, #1
    1278:	00004e07 	andeq	r4, r0, r7, lsl #28
    127c:	98030000 	stmdals	r3, {}	; <UNPREDICTABLE>
    1280:	02000002 	andeq	r0, r0, #2
    1284:	00004e08 	andeq	r4, r0, r8, lsl #28
    1288:	25030400 	strcs	r0, [r3, #-1024]	; 0xfffffc00
    128c:	02000006 	andeq	r0, r0, #6
    1290:	00005509 	andeq	r5, r0, r9, lsl #10
    1294:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    1298:	02cb0704 	sbceq	r0, fp, #4, 14	; 0x100000
    129c:	04050000 	streq	r0, [r5], #-0
    12a0:	0000005b 	andeq	r0, r0, fp, asr r0
    12a4:	60080104 	andvs	r0, r8, r4, lsl #2
    12a8:	06000002 	streq	r0, [r0], -r2
    12ac:	000004c6 	andeq	r0, r0, r6, asr #9
    12b0:	00210a02 	eoreq	r0, r1, r2, lsl #20
    12b4:	59070000 	stmdbpl	r7, {}	; <UNPREDICTABLE>
    12b8:	0c000002 	stceq	0, cr0, [r0], {2}
    12bc:	009e0603 	addseq	r0, lr, r3, lsl #12
    12c0:	b5030000 	strlt	r0, [r3, #-0]
    12c4:	03000003 	movweq	r0, #3
    12c8:	00009e07 	andeq	r9, r0, r7, lsl #28
    12cc:	c0030000 	andgt	r0, r3, r0
    12d0:	03000003 	movweq	r0, #3
    12d4:	00009e08 	andeq	r9, r0, r8, lsl #28
    12d8:	55030400 	strpl	r0, [r3, #-1024]	; 0xfffffc00
    12dc:	03000002 	movweq	r0, #2
    12e0:	00009e09 	andeq	r9, r0, r9, lsl #28
    12e4:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    12e8:	00006204 	andeq	r6, r0, r4, lsl #4
    12ec:	0a280600 	beq	a02af4 <startup-0x1f5fd50c>
    12f0:	0a030000 	beq	c12f8 <startup-0x1ff3ed08>
    12f4:	0000006d 	andeq	r0, r0, sp, rrx
    12f8:	00083808 	andeq	r3, r8, r8, lsl #16
    12fc:	90030100 	andls	r0, r3, r0, lsl #2
    1300:	28200012 	stmdacs	r0!, {r1, r4}
    1304:	01000000 	mrseq	r0, (UNDEF: 0)
    1308:	0000fd9c 	muleq	r0, ip, sp
    130c:	083d0900 	ldmdaeq	sp!, {r8, fp}
    1310:	03010000 	movweq	r0, #4096	; 0x1000
    1314:	000000fd 	strdeq	r0, [r0], -sp
    1318:	09749102 	ldmdbeq	r4!, {r1, r8, ip, pc}^
    131c:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
    1320:	009e0301 	addseq	r0, lr, r1, lsl #6
    1324:	91020000 	mrsls	r0, (UNDEF: 2)
    1328:	03c00970 	biceq	r0, r0, #112, 18	; 0x1c0000
    132c:	03010000 	movweq	r0, #4096	; 0x1000
    1330:	0000009e 	muleq	r0, lr, r0
    1334:	096c9102 	stmdbeq	ip!, {r1, r8, ip, pc}^
    1338:	00000255 	andeq	r0, r0, r5, asr r2
    133c:	009e0301 	addseq	r0, lr, r1, lsl #6
    1340:	91020000 	mrsls	r0, (UNDEF: 2)
    1344:	04050068 	streq	r0, [r5], #-104	; 0xffffff98
    1348:	000000a4 	andeq	r0, r0, r4, lsr #1
    134c:	00052b00 	andeq	r2, r5, r0, lsl #22
    1350:	0e000400 	cfcpyseq	mvf0, mvf0
    1354:	04000006 	streq	r0, [r0], #-6
    1358:	00004b01 	andeq	r4, r0, r1, lsl #22
    135c:	0aac0c00 	beq	feb04364 <firstTime.4076+0xdeaff75c>
    1360:	12b80000 	adcsne	r0, r8, #0
    1364:	02a82000 	adceq	r2, r8, #0
    1368:	06f00000 	ldrbteq	r0, [r0], r0
    136c:	0c020000 	stceq	0, cr0, [r2], {-0}
    1370:	004e0502 	subeq	r0, lr, r2, lsl #10
    1374:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    1378:	02000001 	andeq	r0, r0, #1
    137c:	00004e07 	andeq	r4, r0, r7, lsl #28
    1380:	98030000 	stmdals	r3, {}	; <UNPREDICTABLE>
    1384:	02000002 	andeq	r0, r0, #2
    1388:	00004e08 	andeq	r4, r0, r8, lsl #28
    138c:	25030400 	strcs	r0, [r3, #-1024]	; 0xfffffc00
    1390:	02000006 	andeq	r0, r0, #6
    1394:	00005509 	andeq	r5, r0, r9, lsl #10
    1398:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    139c:	02cb0704 	sbceq	r0, fp, #4, 14	; 0x100000
    13a0:	04050000 	streq	r0, [r5], #-0
    13a4:	0000005b 	andeq	r0, r0, fp, asr r0
    13a8:	60080104 	andvs	r0, r8, r4, lsl #2
    13ac:	06000002 	streq	r0, [r0], -r2
    13b0:	000004c6 	andeq	r0, r0, r6, asr #9
    13b4:	00210a02 	eoreq	r0, r1, r2, lsl #20
    13b8:	59070000 	stmdbpl	r7, {}	; <UNPREDICTABLE>
    13bc:	0c000002 	stceq	0, cr0, [r0], {2}
    13c0:	009e0603 	addseq	r0, lr, r3, lsl #12
    13c4:	b5030000 	strlt	r0, [r3, #-0]
    13c8:	03000003 	movweq	r0, #3
    13cc:	00009e07 	andeq	r9, r0, r7, lsl #28
    13d0:	c0030000 	andgt	r0, r3, r0
    13d4:	03000003 	movweq	r0, #3
    13d8:	00009e08 	andeq	r9, r0, r8, lsl #28
    13dc:	55030400 	strpl	r0, [r3, #-1024]	; 0xfffffc00
    13e0:	03000002 	movweq	r0, #2
    13e4:	00009e09 	andeq	r9, r0, r9, lsl #28
    13e8:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    13ec:	00006204 	andeq	r6, r0, r4, lsl #4
    13f0:	0a280600 	beq	a02bf8 <startup-0x1f5fd408>
    13f4:	0a030000 	beq	c13fc <startup-0x1ff3ec04>
    13f8:	0000006d 	andeq	r0, r0, sp, rrx
    13fc:	00014a07 	andeq	r4, r1, r7, lsl #20
    1400:	06042400 	streq	r2, [r4], -r0, lsl #8
    1404:	00000128 	andeq	r0, r0, r8, lsr #2
    1408:	00048a03 	andeq	r8, r4, r3, lsl #20
    140c:	28070400 	stmdacs	r7, {sl}
    1410:	00000001 	andeq	r0, r0, r1
    1414:	0000e303 	andeq	lr, r0, r3, lsl #6
    1418:	2e080400 	cfcpyscs	mvf0, mvf8
    141c:	04000001 	streq	r0, [r0], #-1
    1420:	0001ed03 	andeq	lr, r1, r3, lsl #26
    1424:	2e090400 	cfcpyscs	mvf0, mvf9
    1428:	08000001 	stmdaeq	r0, {r0}
    142c:	0001e603 	andeq	lr, r1, r3, lsl #12
    1430:	460c0400 	strmi	r0, [ip], -r0, lsl #8
    1434:	0c000001 	stceq	0, cr0, [r0], {1}
    1438:	00020c03 	andeq	r0, r2, r3, lsl #24
    143c:	460d0400 	strmi	r0, [sp], -r0, lsl #8
    1440:	10000001 	andne	r0, r0, r1
    1444:	00010b03 	andeq	r0, r1, r3, lsl #22
    1448:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
    144c:	14000001 	strne	r0, [r0], #-1
    1450:	00036803 	andeq	r6, r3, r3, lsl #16
    1454:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
    1458:	18000001 	stmdane	r0, {r0}
    145c:	00044303 	andeq	r4, r4, r3, lsl #6
    1460:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
    1464:	1c000001 	stcne	0, cr0, [r0], {1}
    1468:	00002703 	andeq	r2, r0, r3, lsl #14
    146c:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
    1470:	20000001 	andcs	r0, r0, r1
    1474:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    1478:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    147c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1480:	40090074 	andmi	r0, r9, r4, ror r0
    1484:	0a000001 	beq	1490 <startup-0x1fffeb70>
    1488:	00000140 	andeq	r0, r0, r0, asr #2
    148c:	af040500 	svcge	0x00040500
    1490:	05000000 	streq	r0, [r0, #-0]
    1494:	00013504 	andeq	r3, r1, r4, lsl #10
    1498:	014b0600 	cmpeq	fp, r0, lsl #12
    149c:	15040000 	strne	r0, [r4, #-0]
    14a0:	000000af 	andeq	r0, r0, pc, lsr #1
    14a4:	0001620b 	andeq	r6, r1, fp, lsl #4
    14a8:	00016200 	andeq	r6, r1, r0, lsl #4
    14ac:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    14b0:	00014c04 	andeq	r4, r1, r4, lsl #24
    14b4:	03920d00 	orrseq	r0, r2, #0, 26
    14b8:	1a040000 	bne	1014c0 <startup-0x1fefeb40>
    14bc:	00000157 	andeq	r0, r0, r7, asr r1
    14c0:	0001b20d 	andeq	fp, r1, sp, lsl #4
    14c4:	2e1b0400 	cfmulscs	mvf0, mvf11, mvf0
    14c8:	0b000001 	bleq	14d4 <startup-0x1fffeb2c>
    14cc:	0000005b 	andeq	r0, r0, fp, asr r0
    14d0:	0000018e 	andeq	r0, r0, lr, lsl #3
    14d4:	00018e0e 	andeq	r8, r1, lr, lsl #28
    14d8:	04000b00 	streq	r0, [r0], #-2816	; 0xfffff500
    14dc:	00f70704 	rscseq	r0, r7, r4, lsl #14
    14e0:	710f0000 	mrsvc	r0, CPSR
    14e4:	0500000a 	streq	r0, [r0, #-10]
    14e8:	00017e03 	andeq	r7, r1, r3, lsl #28
    14ec:	84030500 	strhi	r0, [r3], #-1280	; 0xfffffb00
    14f0:	0f20004b 	svceq	0x0020004b
    14f4:	0000096b 	andeq	r0, r0, fp, ror #18
    14f8:	017e0306 	cmneq	lr, r6, lsl #6
    14fc:	03050000 	movweq	r0, #20480	; 0x5000
    1500:	20004b90 	mulcs	r0, r0, fp
    1504:	0009860f 	andeq	r8, r9, pc, lsl #12
    1508:	7e030700 	cdpvc	7, 0, cr0, cr3, cr0, {0}
    150c:	05000001 	streq	r0, [r0, #-1]
    1510:	004b9c03 	subeq	r9, fp, r3, lsl #24
    1514:	08e70f20 	stmiaeq	r7!, {r5, r8, r9, sl, fp}^
    1518:	03080000 	movweq	r0, #32768	; 0x8000
    151c:	0000017e 	andeq	r0, r0, lr, ror r1
    1520:	4ba80305 	blmi	fea0213c <firstTime.4076+0xde9fd534>
    1524:	970f2000 	strls	r2, [pc, -r0]
    1528:	09000009 	stmdbeq	r0, {r0, r3}
    152c:	00017e03 	andeq	r7, r1, r3, lsl #28
    1530:	b4030500 	strlt	r0, [r3], #-1280	; 0xfffffb00
    1534:	0f20004b 	svceq	0x0020004b
    1538:	00000ad9 	ldrdeq	r0, [r0], -r9
    153c:	017e030a 	cmneq	lr, sl, lsl #6
    1540:	03050000 	movweq	r0, #20480	; 0x5000
    1544:	20004bc0 	andcs	r4, r0, r0, asr #23
    1548:	000a550f 	andeq	r5, sl, pc, lsl #10
    154c:	7e030b00 	vmlavc.f64	d0, d3, d0
    1550:	05000001 	streq	r0, [r0, #-1]
    1554:	004bcc03 	subeq	ip, fp, r3, lsl #24
    1558:	09ba0f20 	ldmibeq	sl!, {r5, r8, r9, sl, fp}
    155c:	030c0000 	movweq	r0, #49152	; 0xc000
    1560:	0000017e 	andeq	r0, r0, lr, ror r1
    1564:	4bd80305 	blmi	ff602180 <firstTime.4076+0xdf5fd578>
    1568:	f70f2000 			; <UNDEFINED> instruction: 0xf70f2000
    156c:	0d000008 	stceq	0, cr0, [r0, #-32]	; 0xffffffe0
    1570:	00017e03 	andeq	r7, r1, r3, lsl #28
    1574:	e4030500 	str	r0, [r3], #-1280	; 0xfffffb00
    1578:	0f20004b 	svceq	0x0020004b
    157c:	00000925 	andeq	r0, r0, r5, lsr #18
    1580:	017e030e 	cmneq	lr, lr, lsl #6
    1584:	03050000 	movweq	r0, #20480	; 0x5000
    1588:	20004bf0 	strdcs	r4, [r0], -r0
    158c:	000a070f 	andeq	r0, sl, pc, lsl #14
    1590:	7e030f00 	cdpvc	15, 0, cr0, cr3, cr0, {0}
    1594:	05000001 	streq	r0, [r0, #-1]
    1598:	004bfc03 	subeq	pc, fp, r3, lsl #24
    159c:	08ab1020 	stmiaeq	fp!, {r5, ip}
    15a0:	11010000 	mrsne	r0, (UNDEF: 1)
    15a4:	0000009e 	muleq	r0, lr, r0
    15a8:	37840305 	strcc	r0, [r4, r5, lsl #6]
    15ac:	7b102000 	blvc	4095b4 <startup-0x1fbf6a4c>
    15b0:	01000008 	tsteq	r0, r8
    15b4:	00009e12 	andeq	r9, r0, r2, lsl lr
    15b8:	9c030500 	cfstr32ls	mvfx0, [r3], {-0}
    15bc:	10200037 	eorne	r0, r0, r7, lsr r0
    15c0:	000008d1 	ldrdeq	r0, [r0], -r1
    15c4:	009e1301 	addseq	r1, lr, r1, lsl #6
    15c8:	03050000 	movweq	r0, #20480	; 0x5000
    15cc:	20003654 	andcs	r3, r0, r4, asr r6
    15d0:	0009b010 	andeq	fp, r9, r0, lsl r0
    15d4:	9e140100 	muflss	f0, f4, f0
    15d8:	05000000 	streq	r0, [r0, #-0]
    15dc:	00379803 	eorseq	r9, r7, r3, lsl #16
    15e0:	097b1020 	ldmdbeq	fp!, {r5, ip}^
    15e4:	15010000 	strne	r0, [r1, #-0]
    15e8:	0000009e 	muleq	r0, lr, r0
    15ec:	37700305 	ldrbcc	r0, [r0, -r5, lsl #6]!
    15f0:	93102000 	tstls	r0, #0
    15f4:	01000008 	tsteq	r0, r8
    15f8:	00009e16 	andeq	r9, r0, r6, lsl lr
    15fc:	64030500 	strvs	r0, [r3], #-1280	; 0xfffffb00
    1600:	10200036 	eorne	r0, r0, r6, lsr r0
    1604:	00000908 	andeq	r0, r0, r8, lsl #18
    1608:	009e1701 	addseq	r1, lr, r1, lsl #14
    160c:	03050000 	movweq	r0, #20480	; 0x5000
    1610:	20003794 	mulcs	r0, r4, r7
    1614:	000a2e10 	andeq	r2, sl, r0, lsl lr
    1618:	9e180100 	muflse	f0, f0, f0
    161c:	05000000 	streq	r0, [r0, #-0]
    1620:	00375003 	eorseq	r5, r7, r3
    1624:	08dc1020 	ldmeq	ip, {r5, ip}^
    1628:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    162c:	0000009e 	muleq	r0, lr, r0
    1630:	36bc0305 	ldrtcc	r0, [ip], r5, lsl #6
    1634:	71102000 	tstvc	r0, r0
    1638:	01000008 	tsteq	r0, r8
    163c:	00009e1a 	andeq	r9, r0, sl, lsl lr
    1640:	6c030500 	cfstr32vs	mvfx0, [r3], {-0}
    1644:	10200037 	eorne	r0, r0, r7, lsr r0
    1648:	00000949 	andeq	r0, r0, r9, asr #18
    164c:	009e1b01 	addseq	r1, lr, r1, lsl #22
    1650:	03050000 	movweq	r0, #20480	; 0x5000
    1654:	20003774 	andcs	r3, r0, r4, ror r7
    1658:	0008c310 	andeq	ip, r8, r0, lsl r3
    165c:	621d0100 	andsvs	r0, sp, #0, 2
    1660:	05000000 	streq	r0, [r0, #-0]
    1664:	00368c03 	eorseq	r8, r6, r3, lsl #24
    1668:	0a381020 	beq	e056f0 <startup-0x1f1fa910>
    166c:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    1670:	00000062 	andeq	r0, r0, r2, rrx
    1674:	37780305 	ldrbcc	r0, [r8, -r5, lsl #6]!
    1678:	e4102000 	ldr	r2, [r0], #-0
    167c:	01000009 	tsteq	r0, r9
    1680:	0000621f 	andeq	r6, r0, pc, lsl r2
    1684:	54030500 	strpl	r0, [r3], #-1280	; 0xfffffb00
    1688:	10200037 	eorne	r0, r0, r7, lsr r0
    168c:	00000885 	andeq	r0, r0, r5, lsl #17
    1690:	00622001 	rsbeq	r2, r2, r1
    1694:	03050000 	movweq	r0, #20480	; 0x5000
    1698:	20003680 	andcs	r3, r0, r0, lsl #13
    169c:	000a8310 	andeq	r8, sl, r0, lsl r3
    16a0:	62210100 	eorvs	r0, r1, #0, 2
    16a4:	05000000 	streq	r0, [r0, #-0]
    16a8:	00378803 	eorseq	r8, r7, r3, lsl #16
    16ac:	08b51020 	ldmeq	r5!, {r5, ip}
    16b0:	22010000 	andcs	r0, r1, #0
    16b4:	00000062 	andeq	r0, r0, r2, rrx
    16b8:	37380305 	ldrcc	r0, [r8, -r5, lsl #6]!
    16bc:	ca102000 	bgt	4096c4 <startup-0x1fbf693c>
    16c0:	01000009 	tsteq	r0, r9
    16c4:	00006223 	andeq	r6, r0, r3, lsr #4
    16c8:	58030500 	stmdapl	r3, {r8, sl}
    16cc:	10200036 	eorne	r0, r0, r6, lsr r0
    16d0:	0000089d 	muleq	r0, sp, r8
    16d4:	00622401 	rsbeq	r2, r2, r1, lsl #8
    16d8:	03050000 	movweq	r0, #20480	; 0x5000
    16dc:	20003668 	andcs	r3, r0, r8, ror #12
    16e0:	000a4610 	andeq	r4, sl, r0, lsl r6
    16e4:	62250100 	eorvs	r0, r5, #0, 2
    16e8:	05000000 	streq	r0, [r0, #-0]
    16ec:	0036a403 	eorseq	sl, r6, r3, lsl #8
    16f0:	095d1020 	ldmdbeq	sp, {r5, ip}^
    16f4:	26010000 	strcs	r0, [r1], -r0
    16f8:	00000062 	andeq	r0, r0, r2, rrx
    16fc:	372c0305 	strcc	r0, [ip, -r5, lsl #6]!
    1700:	9d102000 	ldcls	0, cr2, [r0, #-0]
    1704:	0100000a 	tsteq	r0, sl
    1708:	00006227 	andeq	r6, r0, r7, lsr #4
    170c:	60030500 	andvs	r0, r3, r0, lsl #10
    1710:	10200037 	eorne	r0, r0, r7, lsr r0
    1714:	000009a8 	andeq	r0, r0, r8, lsr #19
    1718:	014c2a01 	cmpeq	ip, r1, lsl #20
    171c:	03050000 	movweq	r0, #20480	; 0x5000
    1720:	200036c0 	andcs	r3, r0, r0, asr #13
    1724:	000a2310 	andeq	r2, sl, r0, lsl r3
    1728:	a42b0100 	strtge	r0, [fp], #-256	; 0xffffff00
    172c:	05000000 	streq	r0, [r0, #-0]
    1730:	0036b003 	eorseq	fp, r6, r3
    1734:	0a921020 	beq	fe4857bc <firstTime.4076+0xde480bb4>
    1738:	2c010000 	stccs	0, cr0, [r1], {-0}
    173c:	000000a4 	andeq	r0, r0, r4, lsr #1
    1740:	36740305 	ldrbtcc	r0, [r4], -r5, lsl #6
    1744:	35102000 	ldrcc	r2, [r0, #-0]
    1748:	01000009 	tsteq	r0, r9
    174c:	0000a42d 	andeq	sl, r0, sp, lsr #8
    1750:	98030500 	stmdals	r3, {r8, sl}
    1754:	10200036 	eorne	r0, r0, r6, lsr r0
    1758:	000009d9 	ldrdeq	r0, [r0], -r9
    175c:	00a42e01 	adceq	r2, r4, r1, lsl #28
    1760:	03050000 	movweq	r0, #20480	; 0x5000
    1764:	20003744 	andcs	r3, r0, r4, asr #14
    1768:	000a6610 	andeq	r6, sl, r0, lsl r6
    176c:	a42f0100 	strtge	r0, [pc], #-256	; 1774 <startup-0x1fffe88c>
    1770:	05000000 	streq	r0, [r0, #-0]
    1774:	0036e403 	eorseq	lr, r6, r3, lsl #8
    1778:	00a40b20 	adceq	r0, r4, r0, lsr #22
    177c:	043c0000 	ldrteq	r0, [ip], #-0
    1780:	8e0e0000 	cdphi	0, 0, cr0, cr14, cr0, {0}
    1784:	04000001 	streq	r0, [r0], #-1
    1788:	0a181000 	beq	605790 <startup-0x1f9fa870>
    178c:	30010000 	andcc	r0, r1, r0
    1790:	0000042c 	andeq	r0, r0, ip, lsr #8
    1794:	36f00305 	ldrbtcc	r0, [r0], r5, lsl #6
    1798:	fd112000 	ldc2	0, cr2, [r1, #-0]
    179c:	01000009 	tsteq	r0, r9
    17a0:	00143c5f 	andseq	r3, r4, pc, asr ip
    17a4:	00012420 	andeq	r2, r1, r0, lsr #8
    17a8:	829c0100 	addshi	r0, ip, #0, 2
    17ac:	12000004 	andne	r0, r0, #4
    17b0:	000009a8 	andeq	r0, r0, r8, lsr #19
    17b4:	01625f01 	cmneq	r2, r1, lsl #30
    17b8:	91020000 	mrsls	r0, (UNDEF: 2)
    17bc:	09f30f6c 	ldmibeq	r3!, {r2, r3, r5, r6, r8, r9, sl, fp}^
    17c0:	60010000 	andvs	r0, r1, r0
    17c4:	0000012e 	andeq	r0, r0, lr, lsr #2
    17c8:	4c080305 	stcmi	3, cr0, [r8], {5}
    17cc:	13002000 	movwne	r2, #0
    17d0:	00000386 	andeq	r0, r0, r6, lsl #7
    17d4:	12b83101 	adcsne	r3, r8, #1073741824	; 0x40000000
    17d8:	01842000 	orreq	r2, r4, r0
    17dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    17e0:	0009400f 	andeq	r4, r9, pc
    17e4:	9e320100 	rsflss	f0, f2, f0
    17e8:	02000000 	andeq	r0, r0, #0
    17ec:	130f7491 	movwne	r7, #62609	; 0xf491
    17f0:	01000009 	tsteq	r0, r9
    17f4:	00009e36 	andeq	r9, r0, r6, lsr lr
    17f8:	70910200 	addsvc	r0, r1, r0, lsl #4
    17fc:	0009540f 	andeq	r5, r9, pc, lsl #8
    1800:	9e3a0100 	rsflse	f0, f2, f0
    1804:	02000000 	andeq	r0, r0, #0
    1808:	1c0f6c91 	stcne	12, cr6, [pc], {145}	; 0x91
    180c:	01000009 	tsteq	r0, r9
    1810:	00009e3e 	andeq	r9, r0, lr, lsr lr
    1814:	68910200 	ldmvs	r1, {r9}
    1818:	0001850f 	andeq	r8, r1, pc, lsl #10
    181c:	9e420100 	dvflss	f0, f2, f0
    1820:	02000000 	andeq	r0, r0, #0
    1824:	0d0f6491 	cfstrseq	mvf6, [pc, #-580]	; 15e8 <startup-0x1fffea18>
    1828:	01000000 	mrseq	r0, (UNDEF: 0)
    182c:	00009e46 	andeq	r9, r0, r6, asr #28
    1830:	60910200 	addsvs	r0, r1, r0, lsl #4
    1834:	0001960f 	andeq	r9, r1, pc, lsl #12
    1838:	9e4a0100 	dvflse	f0, f2, f0
    183c:	02000000 	andeq	r0, r0, #0
    1840:	390f5c91 	stmdbcc	pc, {r0, r4, r7, sl, fp, ip, lr}	; <UNPREDICTABLE>
    1844:	01000000 	mrseq	r0, (UNDEF: 0)
    1848:	00009e4e 	andeq	r9, r0, lr, asr #28
    184c:	58910200 	ldmpl	r1, {r9}
    1850:	0000420f 	andeq	r4, r0, pc, lsl #4
    1854:	9e520100 	rdflss	f0, f2, f0
    1858:	02000000 	andeq	r0, r0, #0
    185c:	bf0f5491 	svclt	0x000f5491
    1860:	01000001 	tsteq	r0, r1
    1864:	00009e56 	andeq	r9, r0, r6, asr lr
    1868:	50910200 	addspl	r0, r1, r0, lsl #4
    186c:	0004720f 	andeq	r7, r4, pc, lsl #4
    1870:	9e5a0100 	rdflse	f0, f2, f0
    1874:	02000000 	andeq	r0, r0, #0
    1878:	00004c91 	muleq	r0, r1, ip
    187c:	000001d5 	ldrdeq	r0, [r0], -r5
    1880:	070e0004 	streq	r0, [lr, -r4]
    1884:	01040000 	mrseq	r0, (UNDEF: 4)
    1888:	0000004b 	andeq	r0, r0, fp, asr #32
    188c:	000b060c 	andeq	r0, fp, ip, lsl #12
    1890:	00156000 	andseq	r6, r5, r0
    1894:	0000d820 	andeq	sp, r0, r0, lsr #16
    1898:	00087800 	andeq	r7, r8, r0, lsl #16
    189c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    18a0:	000002cb 	andeq	r0, r0, fp, asr #5
    18a4:	c5070202 	strgt	r0, [r7, #-514]	; 0xfffffdfe
    18a8:	02000002 	andeq	r0, r0, #2
    18ac:	02600801 	rsbeq	r0, r0, #65536	; 0x10000
    18b0:	0c030000 	stceq	0, cr0, [r3], {-0}
    18b4:	00630502 	rsbeq	r0, r3, r2, lsl #10
    18b8:	c8040000 	stmdagt	r4, {}	; <UNPREDICTABLE>
    18bc:	02000001 	andeq	r0, r0, #1
    18c0:	00002107 	andeq	r2, r0, r7, lsl #2
    18c4:	98040000 	stmdals	r4, {}	; <UNPREDICTABLE>
    18c8:	02000002 	andeq	r0, r0, #2
    18cc:	00002108 	andeq	r2, r0, r8, lsl #2
    18d0:	25040400 	strcs	r0, [r4, #-1024]	; 0xfffffc00
    18d4:	02000006 	andeq	r0, r0, #6
    18d8:	00006309 	andeq	r6, r0, r9, lsl #6
    18dc:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    18e0:	00002f04 	andeq	r2, r0, r4, lsl #30
    18e4:	04c60600 	strbeq	r0, [r6], #1536	; 0x600
    18e8:	0a020000 	beq	818f0 <startup-0x1ff7e710>
    18ec:	00000036 	andeq	r0, r0, r6, lsr r0
    18f0:	00025907 	andeq	r5, r2, r7, lsl #18
    18f4:	06030c00 	streq	r0, [r3], -r0, lsl #24
    18f8:	000000a5 	andeq	r0, r0, r5, lsr #1
    18fc:	0003b504 	andeq	fp, r3, r4, lsl #10
    1900:	a5070300 	strge	r0, [r7, #-768]	; 0xfffffd00
    1904:	00000000 	andeq	r0, r0, r0
    1908:	0003c004 	andeq	ip, r3, r4
    190c:	a5080300 	strge	r0, [r8, #-768]	; 0xfffffd00
    1910:	04000000 	streq	r0, [r0], #-0
    1914:	00025504 	andeq	r5, r2, r4, lsl #10
    1918:	a5090300 	strge	r0, [r9, #-768]	; 0xfffffd00
    191c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1920:	69040500 	stmdbvs	r4, {r8, sl}
    1924:	06000000 	streq	r0, [r0], -r0
    1928:	00000a28 	andeq	r0, r0, r8, lsr #20
    192c:	00740a03 	rsbseq	r0, r4, r3, lsl #20
    1930:	4a070000 	bmi	1c1938 <startup-0x1fe3e6c8>
    1934:	24000001 	strcs	r0, [r0], #-1
    1938:	012f0604 			; <UNDEFINED> instruction: 0x012f0604
    193c:	8a040000 	bhi	101944 <startup-0x1fefe6bc>
    1940:	04000004 	streq	r0, [r0], #-4
    1944:	00012f07 	andeq	r2, r1, r7, lsl #30
    1948:	e3040000 	movw	r0, #16384	; 0x4000
    194c:	04000000 	streq	r0, [r0], #-0
    1950:	00013508 	andeq	r3, r1, r8, lsl #10
    1954:	ed040400 	cfstrs	mvf0, [r4, #-0]
    1958:	04000001 	streq	r0, [r0], #-1
    195c:	00013509 	andeq	r3, r1, r9, lsl #10
    1960:	e6040800 	str	r0, [r4], -r0, lsl #16
    1964:	04000001 	streq	r0, [r0], #-1
    1968:	00014d0c 	andeq	r4, r1, ip, lsl #26
    196c:	0c040c00 	stceq	12, cr0, [r4], {-0}
    1970:	04000002 	streq	r0, [r0], #-2
    1974:	00014d0d 	andeq	r4, r1, sp, lsl #26
    1978:	0b041000 	bleq	105980 <startup-0x1fefa680>
    197c:	04000001 	streq	r0, [r0], #-1
    1980:	00013510 	andeq	r3, r1, r0, lsl r5
    1984:	68041400 	stmdavs	r4, {sl, ip}
    1988:	04000003 	streq	r0, [r0], #-3
    198c:	00013511 	andeq	r3, r1, r1, lsl r5
    1990:	43041800 	movwmi	r1, #18432	; 0x4800
    1994:	04000004 	streq	r0, [r0], #-4
    1998:	00013512 	andeq	r3, r1, r2, lsl r5
    199c:	27041c00 	strcs	r1, [r4, -r0, lsl #24]
    19a0:	04000000 	streq	r0, [r0], #-0
    19a4:	00013513 	andeq	r3, r1, r3, lsl r5
    19a8:	05002000 	streq	r2, [r0, #-0]
    19ac:	0000ab04 	andeq	sl, r0, r4, lsl #22
    19b0:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
    19b4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    19b8:	00014709 	andeq	r4, r1, r9, lsl #14
    19bc:	01470a00 	cmpeq	r7, r0, lsl #20
    19c0:	05000000 	streq	r0, [r0, #-0]
    19c4:	0000b604 	andeq	fp, r0, r4, lsl #12
    19c8:	3c040500 	cfstr32cc	mvfx0, [r4], {-0}
    19cc:	06000001 	streq	r0, [r0], -r1
    19d0:	0000014b 	andeq	r0, r0, fp, asr #2
    19d4:	00b61504 	adcseq	r1, r6, r4, lsl #10
    19d8:	690b0000 	stmdbvs	fp, {}	; <UNPREDICTABLE>
    19dc:	69000001 	stmdbvs	r0, {r0}
    19e0:	0c000001 	stceq	0, cr0, [r0], {1}
    19e4:	53040500 	movwpl	r0, #17664	; 0x4500
    19e8:	0d000001 	stceq	0, cr0, [r0, #-4]
    19ec:	00000392 	muleq	r0, r2, r3
    19f0:	015e1a04 	cmpeq	lr, r4, lsl #20
    19f4:	b20d0000 	andlt	r0, sp, #0
    19f8:	04000001 	streq	r0, [r0], #-1
    19fc:	0001351b 	andeq	r3, r1, fp, lsl r5
    1a00:	0b350e00 	bleq	d45208 <startup-0x1f2badf8>
    1a04:	06010000 	streq	r0, [r1], -r0
    1a08:	20001560 	andcs	r1, r0, r0, ror #10
    1a0c:	000000d8 	ldrdeq	r0, [r0], -r8
    1a10:	7f0f9c01 	svcvc	0x000f9c01
    1a14:	01000007 	tsteq	r0, r7
    1a18:	00016906 	andeq	r6, r1, r6, lsl #18
    1a1c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1a20:	000ae910 	andeq	lr, sl, r0, lsl r9
    1a24:	350d0100 	strcc	r0, [sp, #-256]	; 0xffffff00
    1a28:	05000001 	streq	r0, [r0, #-1]
    1a2c:	00181803 	andseq	r1, r8, r3, lsl #16
    1a30:	0af81020 	beq	ffe05ab8 <firstTime.4076+0xdfe00eb0>
    1a34:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    1a38:	00000135 	andeq	r0, r0, r5, lsr r1
    1a3c:	18200305 	stmdane	r0!, {r0, r2, r8, r9}
    1a40:	4d102000 	ldcmi	0, cr2, [r0, #-0]
    1a44:	01000004 	tsteq	r0, r4
    1a48:	0001350f 	andeq	r3, r1, pc, lsl #10
    1a4c:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
    1a50:	00200018 	eoreq	r0, r0, r8, lsl r0
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	01130200 	tsteq	r3, r0, lsl #4
  14:	0b3a0b0b 	bleq	e82c48 <startup-0x1f17d3b8>
  18:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  1c:	0d030000 	stceq	0, cr0, [r3, #-0]
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	000b3813 	andeq	r3, fp, r3, lsl r8
  2c:	00240400 	eoreq	r0, r4, r0, lsl #8
  30:	0b3e0b0b 	bleq	f82c64 <startup-0x1f07d39c>
  34:	00000e03 	andeq	r0, r0, r3, lsl #28
  38:	0b000f05 	bleq	3c54 <startup-0x1fffc3ac>
  3c:	0013490b 	andseq	r4, r3, fp, lsl #18
  40:	00160600 	andseq	r0, r6, r0, lsl #12
  44:	0b3a0e03 	bleq	e83858 <startup-0x1f17c7a8>
  48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  4c:	13070000 	movwne	r0, #28672	; 0x7000
  50:	0b0e0301 	bleq	380c5c <startup-0x1fc7f3a4>
  54:	3b0b3a0b 	blcc	2ce888 <startup-0x1fd31778>
  58:	0013010b 	andseq	r0, r3, fp, lsl #2
  5c:	00240800 	eoreq	r0, r4, r0, lsl #16
  60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
  64:	00000803 	andeq	r0, r0, r3, lsl #16
  68:	27011509 	strcs	r1, [r1, -r9, lsl #10]
  6c:	00130119 	andseq	r0, r3, r9, lsl r1
  70:	00050a00 	andeq	r0, r5, r0, lsl #20
  74:	00001349 	andeq	r1, r0, r9, asr #6
  78:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
  7c:	00130113 	andseq	r0, r3, r3, lsl r1
  80:	00210c00 	eoreq	r0, r1, r0, lsl #24
  84:	340d0000 	strcc	r0, [sp], #-0
  88:	3a0e0300 	bcc	380c90 <startup-0x1fc7f370>
  8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  90:	3c193f13 	ldccc	15, cr3, [r9], {19}
  94:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
  98:	13490021 	movtne	r0, #36897	; 0x9021
  9c:	0000052f 	andeq	r0, r0, pc, lsr #10
  a0:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
  a4:	000b2f13 	andeq	r2, fp, r3, lsl pc
  a8:	00341000 	eorseq	r1, r4, r0
  ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
  b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  b4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  b8:	34110000 	ldrcc	r0, [r1], #-0
  bc:	3a0e0300 	bcc	380cc4 <startup-0x1fc7f33c>
  c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  c4:	00180213 	andseq	r0, r8, r3, lsl r2
  c8:	00341200 	eorseq	r1, r4, r0, lsl #4
  cc:	0b3a0803 	bleq	e820e0 <startup-0x1f17df20>
  d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  d4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  d8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
  dc:	03193f01 	tsteq	r9, #1, 30
  e0:	3b0b3a0e 	blcc	2ce920 <startup-0x1fd316e0>
  e4:	1119270b 	tstne	r9, fp, lsl #14
  e8:	40061201 	andmi	r1, r6, r1, lsl #4
  ec:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  f0:	00001301 	andeq	r1, r0, r1, lsl #6
  f4:	3f002e14 	svccc	0x00002e14
  f8:	3a0e0319 	bcc	380d64 <startup-0x1fc7f29c>
  fc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 100:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 104:	96184006 	ldrls	r4, [r8], -r6
 108:	00001942 	andeq	r1, r0, r2, asr #18
 10c:	3f002e15 	svccc	0x00002e15
 110:	3a0e0319 	bcc	380d7c <startup-0x1fc7f284>
 114:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 118:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 11c:	97184006 	ldrls	r4, [r8, -r6]
 120:	00001942 	andeq	r1, r0, r2, asr #18
 124:	01110100 	tsteq	r1, r0, lsl #2
 128:	0b130e25 	bleq	4c39c4 <startup-0x1fb3c63c>
 12c:	01110e03 	tsteq	r1, r3, lsl #28
 130:	17100612 			; <UNDEFINED> instruction: 0x17100612
 134:	13020000 	movwne	r0, #8192	; 0x2000
 138:	3a0b0b01 	bcc	2c2d44 <startup-0x1fd3d2bc>
 13c:	010b3b0b 	tsteq	fp, fp, lsl #22
 140:	03000013 	movweq	r0, #19
 144:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 148:	0b3b0b3a 	bleq	ec2e38 <startup-0x1f13d1c8>
 14c:	0b381349 	bleq	e04e78 <startup-0x1f1fb188>
 150:	24040000 	strcs	r0, [r4], #-0
 154:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 158:	000e030b 	andeq	r0, lr, fp, lsl #6
 15c:	000f0500 	andeq	r0, pc, r0, lsl #10
 160:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 164:	16060000 	strne	r0, [r6], -r0
 168:	3a0e0300 	bcc	380d70 <startup-0x1fc7f290>
 16c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 170:	07000013 	smladeq	r0, r3, r0, r0
 174:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 178:	0b3a0e03 	bleq	e8398c <startup-0x1f17c674>
 17c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 180:	06120111 			; <UNDEFINED> instruction: 0x06120111
 184:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 188:	00130119 	andseq	r0, r3, r9, lsl r1
 18c:	00050800 	andeq	r0, r5, r0, lsl #16
 190:	0b3a0803 	bleq	e821a4 <startup-0x1f17de5c>
 194:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 198:	00001802 	andeq	r1, r0, r2, lsl #16
 19c:	03000509 	movweq	r0, #1289	; 0x509
 1a0:	3b0b3a0e 	blcc	2ce9e0 <startup-0x1fd31620>
 1a4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1a8:	0a000018 	beq	210 <startup-0x1ffffdf0>
 1ac:	0b0b0024 	bleq	2c0244 <startup-0x1fd3fdbc>
 1b0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 1b4:	01000000 	mrseq	r0, (UNDEF: 0)
 1b8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 1bc:	0e030b13 	vmoveq.32	d3[0], r0
 1c0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1c4:	00001710 	andeq	r1, r0, r0, lsl r7
 1c8:	0b011302 	bleq	44dd8 <startup-0x1ffbb228>
 1cc:	3b0b3a0b 	blcc	2cea00 <startup-0x1fd31600>
 1d0:	0013010b 	andseq	r0, r3, fp, lsl #2
 1d4:	000d0300 	andeq	r0, sp, r0, lsl #6
 1d8:	0b3a0e03 	bleq	e839ec <startup-0x1f17c614>
 1dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1e0:	00000b38 	andeq	r0, r0, r8, lsr fp
 1e4:	0b002404 	bleq	91fc <startup-0x1fff6e04>
 1e8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 1ec:	0500000e 	streq	r0, [r0, #-14]
 1f0:	0b0b000f 	bleq	2c0234 <startup-0x1fd3fdcc>
 1f4:	00001349 	andeq	r1, r0, r9, asr #6
 1f8:	03001606 	movweq	r1, #1542	; 0x606
 1fc:	3b0b3a0e 	blcc	2cea3c <startup-0x1fd315c4>
 200:	0013490b 	andseq	r4, r3, fp, lsl #18
 204:	01130700 	tsteq	r3, r0, lsl #14
 208:	0b0b0e03 	bleq	2c3a1c <startup-0x1fd3c5e4>
 20c:	0b3b0b3a 	bleq	ec2efc <startup-0x1f13d104>
 210:	00001301 	andeq	r1, r0, r1, lsl #6
 214:	0b002408 	bleq	923c <startup-0x1fff6dc4>
 218:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 21c:	09000008 	stmdbeq	r0, {r3}
 220:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 224:	00001301 	andeq	r1, r0, r1, lsl #6
 228:	4900050a 	stmdbmi	r0, {r1, r3, r8, sl}
 22c:	0b000013 	bleq	280 <startup-0x1ffffd80>
 230:	13490101 	movtne	r0, #37121	; 0x9101
 234:	00001301 	andeq	r1, r0, r1, lsl #6
 238:	0000210c 	andeq	r2, r0, ip, lsl #2
 23c:	00340d00 	eorseq	r0, r4, r0, lsl #26
 240:	0b3a0e03 	bleq	e83a54 <startup-0x1f17c5ac>
 244:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 248:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 24c:	210e0000 	mrscs	r0, (UNDEF: 14)
 250:	2f134900 	svccs	0x00134900
 254:	0f000005 	svceq	0x00000005
 258:	13470034 	movtne	r0, #28724	; 0x7034
 25c:	0b3b0b3a 	bleq	ec2f4c <startup-0x1f13d0b4>
 260:	00001802 	andeq	r1, r0, r2, lsl #16
 264:	47003410 	smladmi	r0, r0, r4, r3
 268:	020b3a13 	andeq	r3, fp, #77824	; 0x13000
 26c:	11000018 	tstne	r0, r8, lsl r0
 270:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 274:	0b3a0e03 	bleq	e83a88 <startup-0x1f17c578>
 278:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 27c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 280:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 284:	00130119 	andseq	r0, r3, r9, lsl r1
 288:	00051200 	andeq	r1, r5, r0, lsl #4
 28c:	0b3a0e03 	bleq	e83aa0 <startup-0x1f17c560>
 290:	1349053b 	movtne	r0, #38203	; 0x953b
 294:	00001802 	andeq	r1, r0, r2, lsl #16
 298:	03003413 	movweq	r3, #1043	; 0x413
 29c:	3b0b3a0e 	blcc	2ceadc <startup-0x1fd31524>
 2a0:	02134905 	andseq	r4, r3, #81920	; 0x14000
 2a4:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
 2a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2ac:	0b3a0e03 	bleq	e83ac0 <startup-0x1f17c540>
 2b0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 2b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2b8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2bc:	00130119 	andseq	r0, r3, r9, lsl r1
 2c0:	00341500 	eorseq	r1, r4, r0, lsl #10
 2c4:	0b3a0803 	bleq	e822d8 <startup-0x1f17dd28>
 2c8:	1349053b 	movtne	r0, #38203	; 0x953b
 2cc:	00001802 	andeq	r1, r0, r2, lsl #16
 2d0:	03003416 	movweq	r3, #1046	; 0x416
 2d4:	3b0b3a08 	blcc	2ceafc <startup-0x1fd31504>
 2d8:	00134905 	andseq	r4, r3, r5, lsl #18
 2dc:	00051700 	andeq	r1, r5, r0, lsl #14
 2e0:	0b3a0803 	bleq	e822f4 <startup-0x1f17dd0c>
 2e4:	1349053b 	movtne	r0, #38203	; 0x953b
 2e8:	00001802 	andeq	r1, r0, r2, lsl #16
 2ec:	11010b18 	tstne	r1, r8, lsl fp
 2f0:	00061201 	andeq	r1, r6, r1, lsl #4
 2f4:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
 2f8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2fc:	0b3b0b3a 	bleq	ec2fec <startup-0x1f13d014>
 300:	01111927 	tsteq	r1, r7, lsr #18
 304:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 308:	01194297 			; <UNDEFINED> instruction: 0x01194297
 30c:	1a000013 	bne	360 <startup-0x1ffffca0>
 310:	08030005 	stmdaeq	r3, {r0, r2}
 314:	0b3b0b3a 	bleq	ec3004 <startup-0x1f13cffc>
 318:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 31c:	051b0000 	ldreq	r0, [fp, #-0]
 320:	3a0e0300 	bcc	380f28 <startup-0x1fc7f0d8>
 324:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 328:	00180213 	andseq	r0, r8, r3, lsl r2
 32c:	00341c00 	eorseq	r1, r4, r0, lsl #24
 330:	0b3a0e03 	bleq	e83b44 <startup-0x1f17c4bc>
 334:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 338:	00001802 	andeq	r1, r0, r2, lsl #16
 33c:	3f012e1d 	svccc	0x00012e1d
 340:	3a0e0319 	bcc	380fac <startup-0x1fc7f054>
 344:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 348:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 34c:	96184006 	ldrls	r4, [r8], -r6
 350:	13011942 	movwne	r1, #6466	; 0x1942
 354:	341e0000 	ldrcc	r0, [lr], #-0
 358:	3a080300 	bcc	200f60 <startup-0x1fdff0a0>
 35c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 360:	00180213 	andseq	r0, r8, r3, lsl r2
 364:	002e1f00 	eoreq	r1, lr, r0, lsl #30
 368:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 36c:	0b3b0b3a 	bleq	ec305c <startup-0x1f13cfa4>
 370:	01111927 	tsteq	r1, r7, lsr #18
 374:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 378:	00194296 	mulseq	r9, r6, r2
 37c:	012e2000 			; <UNDEFINED> instruction: 0x012e2000
 380:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 384:	0b3b0b3a 	bleq	ec3074 <startup-0x1f13cf8c>
 388:	13491927 	movtne	r1, #39207	; 0x9927
 38c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 390:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 394:	00130119 	andseq	r0, r3, r9, lsl r1
 398:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
 39c:	0b3a0e03 	bleq	e83bb0 <startup-0x1f17c450>
 3a0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 3a4:	01111349 	tsteq	r1, r9, asr #6
 3a8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3ac:	01194296 			; <UNDEFINED> instruction: 0x01194296
 3b0:	22000013 	andcs	r0, r0, #19
 3b4:	0e03012e 	adfeqsp	f0, f3, #0.5
 3b8:	0b3b0b3a 	bleq	ec30a8 <startup-0x1f13cf58>
 3bc:	01111927 	tsteq	r1, r7, lsr #18
 3c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3c4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 3c8:	23000013 	movwcs	r0, #19
 3cc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 3d0:	0b3a0e03 	bleq	e83be4 <startup-0x1f17c41c>
 3d4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 3d8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3dc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 3e0:	00000019 	andeq	r0, r0, r9, lsl r0
 3e4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 3e8:	030b130e 	movweq	r1, #45838	; 0xb30e
 3ec:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 3f0:	00171006 	andseq	r1, r7, r6
 3f4:	01130200 	tsteq	r3, r0, lsl #4
 3f8:	0b3a0b0b 	bleq	e8302c <startup-0x1f17cfd4>
 3fc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 400:	0d030000 	stceq	0, cr0, [r3, #-0]
 404:	3a0e0300 	bcc	38100c <startup-0x1fc7eff4>
 408:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 40c:	000b3813 	andeq	r3, fp, r3, lsl r8
 410:	00240400 	eoreq	r0, r4, r0, lsl #8
 414:	0b3e0b0b 	bleq	f83048 <startup-0x1f07cfb8>
 418:	00000e03 	andeq	r0, r0, r3, lsl #28
 41c:	0b000f05 	bleq	4038 <startup-0x1fffbfc8>
 420:	0013490b 	andseq	r4, r3, fp, lsl #18
 424:	00160600 	andseq	r0, r6, r0, lsl #12
 428:	0b3a0e03 	bleq	e83c3c <startup-0x1f17c3c4>
 42c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 430:	13070000 	movwne	r0, #28672	; 0x7000
 434:	0b0e0301 	bleq	381040 <startup-0x1fc7efc0>
 438:	3b0b3a0b 	blcc	2cec6c <startup-0x1fd31394>
 43c:	0013010b 	andseq	r0, r3, fp, lsl #2
 440:	00240800 	eoreq	r0, r4, r0, lsl #16
 444:	0b3e0b0b 	bleq	f83078 <startup-0x1f07cf88>
 448:	00000803 	andeq	r0, r0, r3, lsl #16
 44c:	27011509 	strcs	r1, [r1, -r9, lsl #10]
 450:	00130119 	andseq	r0, r3, r9, lsl r1
 454:	00050a00 	andeq	r0, r5, r0, lsl #20
 458:	00001349 	andeq	r1, r0, r9, asr #6
 45c:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
 460:	00130113 	andseq	r0, r3, r3, lsl r1
 464:	00210c00 	eoreq	r0, r1, r0, lsl #24
 468:	340d0000 	strcc	r0, [sp], #-0
 46c:	3a0e0300 	bcc	381074 <startup-0x1fc7ef8c>
 470:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 474:	3c193f13 	ldccc	15, cr3, [r9], {19}
 478:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
 47c:	13470034 	movtne	r0, #28724	; 0x7034
 480:	0b3b0b3a 	bleq	ec3170 <startup-0x1f13ce90>
 484:	00001802 	andeq	r1, r0, r2, lsl #16
 488:	3f012e0f 	svccc	0x00012e0f
 48c:	3a0e0319 	bcc	3810f8 <startup-0x1fc7ef08>
 490:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 494:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 498:	96184006 	ldrls	r4, [r8], -r6
 49c:	13011942 	movwne	r1, #6466	; 0x1942
 4a0:	05100000 	ldreq	r0, [r0, #-0]
 4a4:	3a0e0300 	bcc	3810ac <startup-0x1fc7ef54>
 4a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4ac:	00180213 	andseq	r0, r8, r3, lsl r2
 4b0:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 4b4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4b8:	0b3b0b3a 	bleq	ec31a8 <startup-0x1f13ce58>
 4bc:	01111927 	tsteq	r1, r7, lsr #18
 4c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4c4:	00194297 	mulseq	r9, r7, r2
 4c8:	11010000 	mrsne	r0, (UNDEF: 1)
 4cc:	130e2501 	movwne	r2, #58625	; 0xe501
 4d0:	110e030b 	tstne	lr, fp, lsl #6
 4d4:	10061201 	andne	r1, r6, r1, lsl #4
 4d8:	02000017 	andeq	r0, r0, #23
 4dc:	0b0b0113 	bleq	2c0930 <startup-0x1fd3f6d0>
 4e0:	0b3b0b3a 	bleq	ec31d0 <startup-0x1f13ce30>
 4e4:	00001301 	andeq	r1, r0, r1, lsl #6
 4e8:	03000d03 	movweq	r0, #3331	; 0xd03
 4ec:	3b0b3a0e 	blcc	2ced2c <startup-0x1fd312d4>
 4f0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 4f4:	0400000b 	streq	r0, [r0], #-11
 4f8:	0b0b0024 	bleq	2c0590 <startup-0x1fd3fa70>
 4fc:	0e030b3e 	vmoveq.16	d3[0], r0
 500:	16050000 	strne	r0, [r5], -r0
 504:	3a0e0300 	bcc	38110c <startup-0x1fc7eef4>
 508:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 50c:	06000013 			; <UNDEFINED> instruction: 0x06000013
 510:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 514:	0b3a0e03 	bleq	e83d28 <startup-0x1f17c2d8>
 518:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 51c:	01111349 	tsteq	r1, r9, asr #6
 520:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 524:	01194296 			; <UNDEFINED> instruction: 0x01194296
 528:	07000013 	smladeq	r0, r3, r0, r0
 52c:	08030005 	stmdaeq	r3, {r0, r2}
 530:	0b3b0b3a 	bleq	ec3220 <startup-0x1f13cde0>
 534:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 538:	34080000 	strcc	r0, [r8], #-0
 53c:	3a080300 	bcc	201144 <startup-0x1fdfeebc>
 540:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 544:	00180213 	andseq	r0, r8, r3, lsl r2
 548:	00240900 	eoreq	r0, r4, r0, lsl #18
 54c:	0b3e0b0b 	bleq	f83180 <startup-0x1f07ce80>
 550:	00000803 	andeq	r0, r0, r3, lsl #16
 554:	3f002e0a 	svccc	0x00002e0a
 558:	3a0e0319 	bcc	3811c4 <startup-0x1fc7ee3c>
 55c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 560:	11134919 	tstne	r3, r9, lsl r9
 564:	40061201 	andmi	r1, r6, r1, lsl #4
 568:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 56c:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
 570:	03193f00 	tsteq	r9, #0, 30
 574:	3b0b3a0e 	blcc	2cedb4 <startup-0x1fd3124c>
 578:	1119270b 	tstne	r9, fp, lsl #14
 57c:	40061201 	andmi	r1, r6, r1, lsl #4
 580:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 584:	01000000 	mrseq	r0, (UNDEF: 0)
 588:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 58c:	0e030b13 	vmoveq.32	d3[0], r0
 590:	06120111 			; <UNDEFINED> instruction: 0x06120111
 594:	00001710 	andeq	r1, r0, r0, lsl r7
 598:	0b011302 	bleq	451a8 <startup-0x1ffbae58>
 59c:	3b0b3a0b 	blcc	2cedd0 <startup-0x1fd31230>
 5a0:	0013010b 	andseq	r0, r3, fp, lsl #2
 5a4:	000d0300 	andeq	r0, sp, r0, lsl #6
 5a8:	0b3a0e03 	bleq	e83dbc <startup-0x1f17c244>
 5ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 5b0:	00000b38 	andeq	r0, r0, r8, lsr fp
 5b4:	0b002404 	bleq	95cc <startup-0x1fff6a34>
 5b8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 5bc:	0500000e 	streq	r0, [r0, #-14]
 5c0:	0b0b000f 	bleq	2c0604 <startup-0x1fd3f9fc>
 5c4:	00001349 	andeq	r1, r0, r9, asr #6
 5c8:	03001606 	movweq	r1, #1542	; 0x606
 5cc:	3b0b3a0e 	blcc	2cee0c <startup-0x1fd311f4>
 5d0:	0013490b 	andseq	r4, r3, fp, lsl #18
 5d4:	01130700 	tsteq	r3, r0, lsl #14
 5d8:	0b0b0e03 	bleq	2c3dec <startup-0x1fd3c214>
 5dc:	0b3b0b3a 	bleq	ec32cc <startup-0x1f13cd34>
 5e0:	00001301 	andeq	r1, r0, r1, lsl #6
 5e4:	3f012e08 	svccc	0x00012e08
 5e8:	3a0e0319 	bcc	381254 <startup-0x1fc7edac>
 5ec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 5f0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 5f4:	97184006 	ldrls	r4, [r8, -r6]
 5f8:	13011942 	movwne	r1, #6466	; 0x1942
 5fc:	05090000 	streq	r0, [r9, #-0]
 600:	3a0e0300 	bcc	381208 <startup-0x1fc7edf8>
 604:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 608:	00180213 	andseq	r0, r8, r3, lsl r2
 60c:	11010000 	mrsne	r0, (UNDEF: 1)
 610:	130e2501 	movwne	r2, #58625	; 0xe501
 614:	110e030b 	tstne	lr, fp, lsl #6
 618:	10061201 	andne	r1, r6, r1, lsl #4
 61c:	02000017 	andeq	r0, r0, #23
 620:	0b0b0113 	bleq	2c0a74 <startup-0x1fd3f58c>
 624:	0b3b0b3a 	bleq	ec3314 <startup-0x1f13ccec>
 628:	00001301 	andeq	r1, r0, r1, lsl #6
 62c:	03000d03 	movweq	r0, #3331	; 0xd03
 630:	3b0b3a0e 	blcc	2cee70 <startup-0x1fd31190>
 634:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 638:	0400000b 	streq	r0, [r0], #-11
 63c:	0b0b0024 	bleq	2c06d4 <startup-0x1fd3f92c>
 640:	0e030b3e 	vmoveq.16	d3[0], r0
 644:	0f050000 	svceq	0x00050000
 648:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 64c:	06000013 			; <UNDEFINED> instruction: 0x06000013
 650:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 654:	0b3b0b3a 	bleq	ec3344 <startup-0x1f13ccbc>
 658:	00001349 	andeq	r1, r0, r9, asr #6
 65c:	03011307 	movweq	r1, #4871	; 0x1307
 660:	3a0b0b0e 	bcc	2c32a0 <startup-0x1fd3cd60>
 664:	010b3b0b 	tsteq	fp, fp, lsl #22
 668:	08000013 	stmdaeq	r0, {r0, r1, r4}
 66c:	0b0b0024 	bleq	2c0704 <startup-0x1fd3f8fc>
 670:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 674:	15090000 	strne	r0, [r9, #-0]
 678:	01192701 	tsteq	r9, r1, lsl #14
 67c:	0a000013 	beq	6d0 <startup-0x1ffff930>
 680:	13490005 	movtne	r0, #36869	; 0x9005
 684:	010b0000 	mrseq	r0, (UNDEF: 11)
 688:	01134901 	tsteq	r3, r1, lsl #18
 68c:	0c000013 	stceq	0, cr0, [r0], {19}
 690:	00000021 	andeq	r0, r0, r1, lsr #32
 694:	0300340d 	movweq	r3, #1037	; 0x40d
 698:	3b0b3a0e 	blcc	2ceed8 <startup-0x1fd31128>
 69c:	3f13490b 	svccc	0x0013490b
 6a0:	00193c19 	andseq	r3, r9, r9, lsl ip
 6a4:	00210e00 	eoreq	r0, r1, r0, lsl #28
 6a8:	0b2f1349 	bleq	bc53d4 <startup-0x1f43ac2c>
 6ac:	340f0000 	strcc	r0, [pc], #-0	; 6b4 <startup-0x1ffff94c>
 6b0:	3a0e0300 	bcc	3812b8 <startup-0x1fc7ed48>
 6b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6b8:	00180213 	andseq	r0, r8, r3, lsl r2
 6bc:	00341000 	eorseq	r1, r4, r0
 6c0:	0b3a0e03 	bleq	e83ed4 <startup-0x1f17c12c>
 6c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 6c8:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 6cc:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 6d0:	03193f01 	tsteq	r9, #1, 30
 6d4:	3b0b3a0e 	blcc	2cef14 <startup-0x1fd310ec>
 6d8:	1119270b 	tstne	r9, fp, lsl #14
 6dc:	40061201 	andmi	r1, r6, r1, lsl #4
 6e0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 6e4:	00001301 	andeq	r1, r0, r1, lsl #6
 6e8:	03000512 	movweq	r0, #1298	; 0x512
 6ec:	3b0b3a0e 	blcc	2cef2c <startup-0x1fd310d4>
 6f0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 6f4:	13000018 	movwne	r0, #24
 6f8:	0e03012e 	adfeqsp	f0, f3, #0.5
 6fc:	0b3b0b3a 	bleq	ec33ec <startup-0x1f13cc14>
 700:	01111927 	tsteq	r1, r7, lsr #18
 704:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 708:	00194296 	mulseq	r9, r6, r2
 70c:	11010000 	mrsne	r0, (UNDEF: 1)
 710:	130e2501 	movwne	r2, #58625	; 0xe501
 714:	110e030b 	tstne	lr, fp, lsl #6
 718:	10061201 	andne	r1, r6, r1, lsl #4
 71c:	02000017 	andeq	r0, r0, #23
 720:	0b0b0024 	bleq	2c07b8 <startup-0x1fd3f848>
 724:	0e030b3e 	vmoveq.16	d3[0], r0
 728:	13030000 	movwne	r0, #12288	; 0x3000
 72c:	3a0b0b01 	bcc	2c3338 <startup-0x1fd3ccc8>
 730:	010b3b0b 	tsteq	fp, fp, lsl #22
 734:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 738:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 73c:	0b3b0b3a 	bleq	ec342c <startup-0x1f13cbd4>
 740:	0b381349 	bleq	e0546c <startup-0x1f1fab94>
 744:	0f050000 	svceq	0x00050000
 748:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 74c:	06000013 			; <UNDEFINED> instruction: 0x06000013
 750:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 754:	0b3b0b3a 	bleq	ec3444 <startup-0x1f13cbbc>
 758:	00001349 	andeq	r1, r0, r9, asr #6
 75c:	03011307 	movweq	r1, #4871	; 0x1307
 760:	3a0b0b0e 	bcc	2c33a0 <startup-0x1fd3cc60>
 764:	010b3b0b 	tsteq	fp, fp, lsl #22
 768:	08000013 	stmdaeq	r0, {r0, r1, r4}
 76c:	0b0b0024 	bleq	2c0804 <startup-0x1fd3f7fc>
 770:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 774:	15090000 	strne	r0, [r9, #-0]
 778:	01192701 	tsteq	r9, r1, lsl #14
 77c:	0a000013 	beq	7d0 <startup-0x1ffff830>
 780:	13490005 	movtne	r0, #36869	; 0x9005
 784:	010b0000 	mrseq	r0, (UNDEF: 11)
 788:	01134901 	tsteq	r3, r1, lsl #18
 78c:	0c000013 	stceq	0, cr0, [r0], {19}
 790:	00000021 	andeq	r0, r0, r1, lsr #32
 794:	0300340d 	movweq	r3, #1037	; 0x40d
 798:	3b0b3a0e 	blcc	2cefd8 <startup-0x1fd31028>
 79c:	3f13490b 	svccc	0x0013490b
 7a0:	00193c19 	andseq	r3, r9, r9, lsl ip
 7a4:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
 7a8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 7ac:	0b3b0b3a 	bleq	ec349c <startup-0x1f13cb64>
 7b0:	01111927 	tsteq	r1, r7, lsr #18
 7b4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 7b8:	00194296 	mulseq	r9, r6, r2
 7bc:	00050f00 	andeq	r0, r5, r0, lsl #30
 7c0:	0b3a0e03 	bleq	e83fd4 <startup-0x1f17c02c>
 7c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 7c8:	00001802 	andeq	r1, r0, r2, lsl #16
 7cc:	03003410 	movweq	r3, #1040	; 0x410
 7d0:	3b0b3a0e 	blcc	2cf010 <startup-0x1fd30ff0>
 7d4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 7d8:	00000018 	andeq	r0, r0, r8, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000035c 	andeq	r0, r0, ip, asr r3
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	05c20002 	strbeq	r0, [r2, #2]
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	2000036c 	andcs	r0, r0, ip, ror #6
  3c:	00000028 	andeq	r0, r0, r8, lsr #32
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	06890002 	streq	r0, [r9], r2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000394 	mulcs	r0, r4, r3
  5c:	00000e44 	andeq	r0, r0, r4, asr #28
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	0f2c0002 	svceq	0x002c0002
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200011d8 	ldrdcs	r1, [r0], -r8
  7c:	00000056 	andeq	r0, r0, r6, asr r0
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	11100002 	tstne	r0, r2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20001230 	andcs	r1, r0, r0, lsr r2
  9c:	00000060 	andeq	r0, r0, r0, rrx
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	12490002 	subne	r0, r9, #2
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20001290 	mulcs	r0, r0, r2
  bc:	00000028 	andeq	r0, r0, r8, lsr #32
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	134d0002 	movtne	r0, #53250	; 0xd002
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	200012b8 			; <UNDEFINED> instruction: 0x200012b8
  dc:	000002a8 	andeq	r0, r0, r8, lsr #5
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	187c0002 	ldmdane	ip!, {r1}^
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	20001560 	andcs	r1, r0, r0, ror #10
  fc:	000000d8 	ldrdeq	r0, [r0], -r8
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	2000036c 	andcs	r0, r0, ip, ror #6
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000001b7 			; <UNDEFINED> instruction: 0x000001b7
   4:	01360002 	teqeq	r6, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	6f6d2f3a 	svcvs	0x006d2f3a
  20:	2f632f70 	svccs	0x00632f70
  24:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
  28:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
  2c:	6f697461 	svcvs	0x00697461
  30:	2f72656e 	svccs	0x0072656e
  34:	73504944 	cmpvc	r0, #68, 18	; 0x110000
  38:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
  3c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
  40:	74730000 	ldrbtvc	r0, [r3], #-0
  44:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  48:	00632e70 	rsbeq	r2, r3, r0, ror lr
  4c:	73000001 	movwvc	r0, #1
  50:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
  54:	00682e65 	rsbeq	r2, r8, r5, ror #28
  58:	69000001 	stmdbvs	r0, {r0}
  5c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
  60:	0100682e 	tsteq	r0, lr, lsr #16
  64:	61670000 	cmnvs	r7, r0
  68:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
  6c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
  70:	0100682e 	tsteq	r0, lr, lsr #16
  74:	72670000 	rsbvc	r0, r7, #0
  78:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  7c:	682e7363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, ip, sp, lr}
  80:	00000100 	andeq	r0, r0, r0, lsl #2
  84:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
  88:	5f726574 	svcpl	0x00726574
  8c:	63616c62 	cmnvs	r1, #25088	; 0x6200
  90:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
  94:	0001006d 	andeq	r0, r1, sp, rrx
  98:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
  9c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
  a0:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
  a4:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
  a8:	01006d62 	tsteq	r0, r2, ror #26
  ac:	6f6d0000 	svcvs	0x006d0000
  b0:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
  b4:	72675f72 	rsbvc	r5, r7, #456	; 0x1c8
  b8:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
  bc:	01006d62 	tsteq	r0, r2, ror #26
  c0:	61630000 	cmnvs	r3, r0
  c4:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
  c8:	616c625f 	cmnvs	ip, pc, asr r2
  cc:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
  d0:	01006d62 	tsteq	r0, r2, ror #26
  d4:	61630000 	cmnvs	r3, r0
  d8:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
  dc:	6172675f 	cmnvs	r2, pc, asr r7
  e0:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
  e4:	0001006d 	andeq	r0, r1, sp, rrx
  e8:	73616300 	cmnvc	r1, #0, 6
  ec:	5f656c74 	svcpl	0x00656c74
  f0:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
  f4:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
  f8:	0001006d 	andeq	r0, r1, sp, rrx
  fc:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
 100:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
 104:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 108:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 10c:	00000100 	andeq	r0, r0, r0, lsl #2
 110:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 114:	72675f65 	rsbvc	r5, r7, #404	; 0x194
 118:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
 11c:	01006d62 	tsteq	r0, r2, ror #26
 120:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
 124:	5f656c74 	svcpl	0x00656c74
 128:	63616c62 	cmnvs	r1, #25088	; 0x6200
 12c:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
 130:	0001006d 	andeq	r0, r1, sp, rrx
 134:	2e676200 	cdpcs	2, 6, cr6, cr7, cr0, {0}
 138:	006d6278 	rsbeq	r6, sp, r8, ror r2
 13c:	00000001 	andeq	r0, r0, r1
 140:	00020500 	andeq	r0, r2, r0, lsl #10
 144:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
 148:	5e13011f 	mrcpl	1, 0, r0, cr3, cr15, {0}
 14c:	01000302 	tsteq	r0, r2, lsl #6
 150:	02050001 	andeq	r0, r5, #1
 154:	20000010 	andcs	r0, r0, r0, lsl r0
 158:	2f011403 	svccs	0x00011403
 15c:	3030303d 	eorscc	r3, r0, sp, lsr r0
 160:	3d742403 	cfldrdcc	mvd2, [r4, #-12]!
 164:	2f3e672f 	svccs	0x003e672f
 168:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
 16c:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
 170:	2f3e672f 	svccs	0x003e672f
 174:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
 178:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
 17c:	2f3d672f 	svccs	0x003d672f
 180:	41023d67 	tstmi	r2, r7, ror #26
 184:	3c0a0316 	stccc	3, cr0, [sl], {22}
 188:	5967322f 	stmdbpl	r7!, {r0, r1, r2, r3, r5, r9, ip, sp}^
 18c:	4b4b4bad 	blmi	12d3048 <startup-0x1ed2cfb8>
 190:	ad59674e 	ldclge	7, cr6, [r9, #-312]	; 0xfffffec8
 194:	0a03594b 	beq	d66c8 <startup-0x1ff29938>
 198:	ad59674a 	ldclge	7, cr6, [r9, #-296]	; 0xfffffed8
 19c:	5a4d4b4b 	bpl	1352ed0 <startup-0x1ecad130>
 1a0:	3d4b4b4b 	vstrcc	d20, [fp, #-300]	; 0xfffffed4
 1a4:	4b3e4b3f 	blmi	f92ea8 <startup-0x1f06d158>
 1a8:	7759593f 	smmlarvc	r9, pc, r9, r5	; <UNPREDICTABLE>
 1ac:	594c5959 	stmdbpl	ip, {r0, r3, r4, r6, r8, fp, ip, lr}^
 1b0:	035a753e 	cmpeq	sl, #260046848	; 0xf800000
 1b4:	19027471 	stmdbne	r2, {r0, r4, r5, r6, sl, ip, sp, lr}
 1b8:	68010100 	stmdavs	r1, {r8}
 1bc:	02000000 	andeq	r0, r0, #0
 1c0:	00005100 	andeq	r5, r0, r0, lsl #2
 1c4:	fb010200 	blx	409ce <startup-0x1ffbf632>
 1c8:	01000d0e 	tsteq	r0, lr, lsl #26
 1cc:	00010101 	andeq	r0, r1, r1, lsl #2
 1d0:	00010000 	andeq	r0, r1, r0
 1d4:	3a430100 	bcc	10c05dc <startup-0x1ef3fa24>
 1d8:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 1dc:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 128 <startup-0x1ffffed8>
 1e0:	616c706f 	cmnvs	ip, pc, rrx
 1e4:	61726f62 	cmnvs	r2, r2, ror #30
 1e8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 1ec:	442f7265 	strtmi	r7, [pc], #-613	; 1f4 <startup-0x1ffffe0c>
 1f0:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
 1f4:	63746957 	cmnvs	r4, #1425408	; 0x15c000
 1f8:	00432f68 	subeq	r2, r3, r8, ror #30
 1fc:	72707300 	rsbsvc	r7, r0, #0, 6
 200:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
 204:	00010063 	andeq	r0, r1, r3, rrx
 208:	72707300 	rsbsvc	r7, r0, #0, 6
 20c:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
 210:	00010068 	andeq	r0, r1, r8, rrx
 214:	05000000 	streq	r0, [r0, #-0]
 218:	00036c02 	andeq	r6, r3, r2, lsl #24
 21c:	3d751520 	cfldr64cc	mvdx1, [r5, #-128]!	; 0xffffff80
 220:	04023d3d 	streq	r3, [r2], #-3389	; 0xfffff2c3
 224:	4e010100 	adfmis	f0, f1, f0
 228:	02000003 	andeq	r0, r0, #3
 22c:	00007c00 	andeq	r7, r0, r0, lsl #24
 230:	fb010200 	blx	40a3a <startup-0x1ffbf5c6>
 234:	01000d0e 	tsteq	r0, lr, lsl #26
 238:	00010101 	andeq	r0, r1, r1, lsl #2
 23c:	00010000 	andeq	r0, r1, r0
 240:	3a430100 	bcc	10c0648 <startup-0x1ef3f9b8>
 244:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 248:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 194 <startup-0x1ffffe6c>
 24c:	616c706f 	cmnvs	ip, pc, rrx
 250:	61726f62 	cmnvs	r2, r2, ror #30
 254:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 258:	442f7265 	strtmi	r7, [pc], #-613	; 260 <startup-0x1ffffda0>
 25c:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
 260:	63746957 	cmnvs	r4, #1425408	; 0x15c000
 264:	00432f68 	subeq	r2, r3, r8, ror #30
 268:	61726700 	cmnvs	r2, r0, lsl #14
 26c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 270:	00632e73 	rsbeq	r2, r3, r3, ror lr
 274:	73000001 	movwvc	r0, #1
 278:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 27c:	00682e65 	rsbeq	r2, r8, r5, ror #28
 280:	69000001 	stmdbvs	r0, {r0}
 284:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
 288:	0100682e 	tsteq	r0, lr, lsr #16
 28c:	61670000 	cmnvs	r7, r0
 290:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
 294:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 298:	0100682e 	tsteq	r0, lr, lsr #16
 29c:	72670000 	rsbvc	r0, r7, #0
 2a0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2a4:	682e7363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, ip, sp, lr}
 2a8:	00000100 	andeq	r0, r0, r0, lsl #2
 2ac:	02050000 	andeq	r0, r5, #0
 2b0:	20000394 	mulcs	r0, r4, r3
 2b4:	3d3d3015 	ldccc	0, cr3, [sp, #-84]!	; 0xffffffac
 2b8:	02003d3d 	andeq	r3, r0, #3904	; 0xf40
 2bc:	20060104 	andcs	r0, r6, r4, lsl #2
 2c0:	a03d6706 	eorsge	r6, sp, r6, lsl #14
 2c4:	3d3d3d30 	ldccc	13, cr3, [sp, #-192]!	; 0xffffff40
 2c8:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 2cc:	06200601 	strteq	r0, [r0], -r1, lsl #12
 2d0:	4ba03d67 	blmi	fe80f874 <firstTime.4076+0xde80ac6c>
 2d4:	2f2f2f21 	svccs	0x002f2f21
 2d8:	4f4c5e2a 	svcmi	0x004c5e2a
 2dc:	035b5721 	cmpeq	fp, #8650752	; 0x840000
 2e0:	004c4a09 	subeq	r4, ip, r9, lsl #20
 2e4:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 2e8:	03040200 	movweq	r0, #16896	; 0x4200
 2ec:	04020057 	streq	r0, [r2], #-87	; 0xffffffa9
 2f0:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 2f4:	4b2f674c 	blmi	bda02c <startup-0x1f425fd4>
 2f8:	4b4b2f67 	blmi	12cc09c <startup-0x1ed33f64>
 2fc:	5968a14b 	stmdbpl	r8!, {r0, r1, r3, r6, r8, sp, pc}^
 300:	76598391 			; <UNDEFINED> instruction: 0x76598391
 304:	83d75968 	bicshi	r5, r7, #104, 18	; 0x1a0000
 308:	03676759 	cmneq	r7, #23330816	; 0x1640000
 30c:	6e037412 	cfmvdlrvs	mvd3, r7
 310:	4a120320 	bmi	480f98 <startup-0x1fb7f068>
 314:	3d207003 	stccc	0, cr7, [r0, #-12]!
 318:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
 31c:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
 320:	4c223d3d 	stcmi	13, cr3, [r2], #-244	; 0xffffff0c
 324:	3d3d3d3e 	ldccc	13, cr3, [sp, #-248]!	; 0xffffff08
 328:	2f3d313d 	svccs	0x003d313d
 32c:	03313d75 	teqeq	r1, #7488	; 0x1d40
 330:	23274a79 			; <UNDEFINED> instruction: 0x23274a79
 334:	3d67bc3d 	stclcc	12, cr11, [r7, #-244]!	; 0xffffff0c
 338:	593d3d3d 	ldmdbpl	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 33c:	592f3d2f 	stmdbpl	pc!, {r0, r1, r2, r3, r5, r8, sl, fp, ip, sp}	; <UNPREDICTABLE>
 340:	3d4b3e3d 	stclcc	14, cr3, [fp, #-244]	; 0xffffff0c
 344:	313d4b30 	teqcc	sp, r0, lsr fp
 348:	5967bc3d 	stmdbpl	r7!, {r0, r2, r3, r4, r5, sl, fp, ip, sp, pc}^
 34c:	4b915a59 	blmi	fe456cb8 <firstTime.4076+0xde4520b0>
 350:	2f3d2f59 	svccs	0x003d2f59
 354:	303d593e 	eorscc	r5, sp, lr, lsr r9
 358:	3d313d59 	ldccc	13, cr3, [r1, #-356]!	; 0xfffffe9c
 35c:	91673d3d 	cmnls	r7, sp, lsr sp
 360:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
 364:	3d914b83 	vldrcc	d4, [r1, #524]	; 0x20c
 368:	833d3d59 	teqhi	sp, #5696	; 0x1640
 36c:	3e3d2f4c 	cdpcc	15, 3, cr2, cr13, cr12, {2}
 370:	3e3d3d3d 	mrccc	13, 1, r3, cr13, cr13, {1}
 374:	4b3e3d3d 	blmi	f8f870 <startup-0x1f070790>
 378:	4b4b4b4b 	blmi	12d30ac <startup-0x1ed2cf54>
 37c:	4b3e3d3d 	blmi	f8f878 <startup-0x1f070788>
 380:	02004c9f 	andeq	r4, r0, #40704	; 0x9f00
 384:	004b0304 	subeq	r0, fp, r4, lsl #6
 388:	49030402 	stmdbmi	r3, {r1, sl}
 38c:	01040200 	mrseq	r0, R12_usr
 390:	02005806 	andeq	r5, r0, #393216	; 0x60000
 394:	46060204 	strmi	r0, [r6], -r4, lsl #4
 398:	01040200 	mrseq	r0, R12_usr
 39c:	52065806 	andpl	r5, r6, #393216	; 0x60000
 3a0:	002f764d 	eoreq	r7, pc, sp, asr #12
 3a4:	06010402 	streq	r0, [r1], -r2, lsl #8
 3a8:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
 3ac:	02004a02 	andeq	r4, r0, #8192	; 0x2000
 3b0:	064a0304 	strbeq	r0, [sl], -r4, lsl #6
 3b4:	3d13084c 	ldccc	8, cr0, [r3, #-304]	; 0xfffffed0
 3b8:	3dbc3e3d 	ldccc	14, cr3, [ip, #244]!	; 0xf4
 3bc:	d93d7676 	ldmdble	sp!, {r1, r2, r4, r5, r6, r9, sl, ip, sp, lr}
 3c0:	3d23d71f 	stccc	7, cr13, [r3, #-124]!	; 0xffffff84
 3c4:	23d71fd9 	bicscs	r1, r7, #868	; 0x364
 3c8:	d71fd93d 			; <UNDEFINED> instruction: 0xd71fd93d
 3cc:	032e6103 			; <UNDEFINED> instruction: 0x032e6103
 3d0:	69af2023 	stmibvs	pc!, {r0, r1, r5, sp}	; <UNPREDICTABLE>
 3d4:	01040200 	mrseq	r0, R12_usr
 3d8:	02004a06 	andeq	r4, r0, #24576	; 0x6000
 3dc:	004a0204 	subeq	r0, sl, r4, lsl #4
 3e0:	4a030402 	bmi	c13f0 <startup-0x1ff3ec10>
 3e4:	08754b06 	ldmdaeq	r5!, {r1, r2, r8, r9, fp, lr}^
 3e8:	59595913 	ldmdbpl	r9, {r0, r1, r4, r8, fp, ip, lr}^
 3ec:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 3f0:	3d763d5b 	ldclcc	13, cr3, [r6, #-364]!	; 0xfffffe94
 3f4:	3e4b4c4b 	cdpcc	12, 4, cr4, cr11, cr11, {2}
 3f8:	ca9fd8c9 	bgt	fe7f6724 <firstTime.4076+0xde7f1b1c>
 3fc:	03a0ae3d 	moveq	sl, #976	; 0x3d0
 400:	2303ac5e 	movwcs	sl, #15454	; 0x3c5e
 404:	2f4c8420 	svccs	0x004c8420
 408:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
 40c:	00580601 	subseq	r0, r8, r1, lsl #12
 410:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
 414:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 418:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
 41c:	593d0604 	ldmdbpl	sp!, {r2, r9, sl}
 420:	020075d7 	andeq	r7, r0, #901775360	; 0x35c00000
 424:	00590304 	subseq	r0, r9, r4, lsl #6
 428:	ab030402 	blge	c1438 <startup-0x1ff3ebc8>
 42c:	01040200 	mrseq	r0, R12_usr
 430:	02009e06 	andeq	r9, r0, #6, 28	; 0x60
 434:	55060204 	strpl	r0, [r6, #-516]	; 0xfffffdfc
 438:	01040200 	mrseq	r0, R12_usr
 43c:	02007406 	andeq	r7, r0, #100663296	; 0x6000000
 440:	56060204 	strpl	r0, [r6], -r4, lsl #4
 444:	01040200 	mrseq	r0, R12_usr
 448:	03067406 	movweq	r7, #25606	; 0x6406
 44c:	7652580a 	ldrbvc	r5, [r2], -sl, lsl #16
 450:	3d595a59 	vldrcc	s11, [r9, #-356]	; 0xfffffe9c
 454:	913dbb3d 	teqls	sp, sp, lsr fp
 458:	67083de6 	strvs	r3, [r8, -r6, ror #27]
 45c:	02040200 	andeq	r0, r4, #0, 4
 460:	66087a03 	strvs	r7, [r8], -r3, lsl #20
 464:	01040200 	mrseq	r0, R12_usr
 468:	02003c06 	andeq	r3, r0, #1536	; 0x600
 46c:	3a060204 	bcc	180c84 <startup-0x1fe7f37c>
 470:	01040200 	mrseq	r0, R12_usr
 474:	02003c06 	andeq	r3, r0, #1536	; 0x600
 478:	49060204 	stmdbmi	r6, {r2, r9}
 47c:	01040200 	mrseq	r0, R12_usr
 480:	03063c06 	movweq	r3, #27654	; 0x6c06
 484:	774c580e 	strbvc	r5, [ip, -lr, lsl #16]
 488:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 48c:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 490:	00650304 	rsbeq	r0, r5, r4, lsl #6
 494:	06010402 	streq	r0, [r1], -r2, lsl #8
 498:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 49c:	00650602 	rsbeq	r0, r5, r2, lsl #12
 4a0:	06010402 	streq	r0, [r1], -r2, lsl #8
 4a4:	4c6b063c 	stclmi	6, cr0, [fp], #-240	; 0xffffff10
 4a8:	02003d77 	andeq	r3, r0, #7616	; 0x1dc0
 4ac:	003d0304 	eorseq	r0, sp, r4, lsl #6
 4b0:	65030402 	strvs	r0, [r3, #-1026]	; 0xfffffbfe
 4b4:	01040200 	mrseq	r0, R12_usr
 4b8:	02003c06 	andeq	r3, r0, #1536	; 0x600
 4bc:	65060204 	strvs	r0, [r6, #-516]	; 0xfffffdfc
 4c0:	01040200 	mrseq	r0, R12_usr
 4c4:	6b063c06 	blvs	18f4e4 <startup-0x1fe70b1c>
 4c8:	2f2f3d4d 	svccs	0x002f3d4d
 4cc:	6930302f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, ip, sp}
 4d0:	01040200 	mrseq	r0, R12_usr
 4d4:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
 4d8:	02002f01 	andeq	r2, r0, #1, 30
 4dc:	00670104 	rsbeq	r0, r7, r4, lsl #2
 4e0:	c9010402 	stmdbgt	r1, {r1, sl}
 4e4:	01040200 	mrseq	r0, R12_usr
 4e8:	02001308 	andeq	r1, r0, #8, 6	; 0x20000000
 4ec:	004b0104 	subeq	r0, fp, r4, lsl #2
 4f0:	2f010402 	svccs	0x00010402
 4f4:	01040200 	mrseq	r0, R12_usr
 4f8:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
 4fc:	0200c901 	andeq	ip, r0, #16384	; 0x4000
 500:	13080104 	movwne	r0, #33028	; 0x8104
 504:	01040200 	mrseq	r0, R12_usr
 508:	04020092 	streq	r0, [r2], #-146	; 0xffffff6e
 50c:	02004b01 	andeq	r4, r0, #1024	; 0x400
 510:	003e0104 	eorseq	r0, lr, r4, lsl #2
 514:	2f010402 	svccs	0x00010402
 518:	01040200 	mrseq	r0, R12_usr
 51c:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 520:	00130801 	andseq	r0, r3, r1, lsl #16
 524:	4c010402 	cfstrsmi	mvf0, [r1], {2}
 528:	01040200 	mrseq	r0, R12_usr
 52c:	033c6c03 	teqeq	ip, #768	; 0x300
 530:	003e3c19 	eorseq	r3, lr, r9, lsl ip
 534:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 538:	03040200 	movweq	r0, #16896	; 0x4200
 53c:	02009108 	andeq	r9, r0, #8, 2
 540:	91080304 	tstls	r8, r4, lsl #6
 544:	03040200 	movweq	r0, #16896	; 0x4200
 548:	02009108 	andeq	r9, r0, #8, 2
 54c:	46080304 	strmi	r0, [r8], -r4, lsl #6
 550:	01040200 	mrseq	r0, R12_usr
 554:	50063c06 	andpl	r3, r6, r6, lsl #24
 558:	3d4b3e08 	stclcc	14, cr3, [fp, #-32]	; 0xffffffe0
 55c:	21082108 	tstcs	r8, r8, lsl #2
 560:	4b4d2108 	blmi	1348988 <startup-0x1ecb7678>
 564:	3e4b2130 	mcrcc	1, 2, r2, cr11, cr0, {1}
 568:	3e4b3e4b 	cdpcc	14, 4, cr3, cr11, cr11, {2}
 56c:	3c75034b 	ldclcc	3, cr0, [r5], #-300	; 0xfffffed4
 570:	30580e03 	subscc	r0, r8, r3, lsl #28
 574:	01000b02 	tsteq	r0, r2, lsl #22
 578:	00008c01 	andeq	r8, r0, r1, lsl #24
 57c:	72000200 	andvc	r0, r0, #0, 4
 580:	02000000 	andeq	r0, r0, #0
 584:	0d0efb01 	vstreq	d15, [lr, #-4]
 588:	01010100 	mrseq	r0, (UNDEF: 17)
 58c:	00000001 	andeq	r0, r0, r1
 590:	01000001 	tsteq	r0, r1
 594:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
 598:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
 59c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 5a0:	6f62616c 	svcvs	0x0062616c
 5a4:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 5a8:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 5ac:	6172672f 	cmnvs	r2, pc, lsr #14
 5b0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 5b4:	70736964 	rsbsvc	r6, r3, r4, ror #18
 5b8:	0079616c 	rsbseq	r6, r9, ip, ror #2
 5bc:	6d616700 	stclvs	7, cr6, [r1, #-0]
 5c0:	6a626f65 	bvs	189c35c <startup-0x1e763ca4>
 5c4:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 5c8:	00010063 	andeq	r0, r1, r3, rrx
 5cc:	72707300 	rsbsvc	r7, r0, #0, 6
 5d0:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
 5d4:	00010068 	andeq	r0, r1, r8, rrx
 5d8:	616d6900 	cmnvs	sp, r0, lsl #18
 5dc:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
 5e0:	00000100 	andeq	r0, r0, r0, lsl #2
 5e4:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 5e8:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 5ec:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
 5f0:	00000100 	andeq	r0, r0, r0, lsl #2
 5f4:	02050000 	andeq	r0, r5, #0
 5f8:	200011d8 	ldrdcs	r1, [r0], -r8
 5fc:	4b4c4c19 	blmi	1313668 <startup-0x1ecec998>
 600:	ca3d6759 	bgt	f5a36c <startup-0x1f0a5c94>
 604:	01000402 	tsteq	r0, r2, lsl #8
 608:	00006d01 	andeq	r6, r0, r1, lsl #26
 60c:	4f000200 	svcmi	0x00000200
 610:	02000000 	andeq	r0, r0, #0
 614:	0d0efb01 	vstreq	d15, [lr, #-4]
 618:	01010100 	mrseq	r0, (UNDEF: 17)
 61c:	00000001 	andeq	r0, r0, r1
 620:	01000001 	tsteq	r0, r1
 624:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
 628:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
 62c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 630:	6f62616c 	svcvs	0x0062616c
 634:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 638:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 63c:	6172672f 	cmnvs	r2, pc, lsr #14
 640:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 644:	70736964 	rsbsvc	r6, r3, r4, ror #18
 648:	0079616c 	rsbseq	r6, r9, ip, ror #2
 64c:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 650:	00632e6f 	rsbeq	r2, r3, pc, ror #28
 654:	67000001 	strvs	r0, [r0, -r1]
 658:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 65c:	00010068 	andeq	r0, r1, r8, rrx
 660:	05000000 	streq	r0, [r0, #-0]
 664:	00123002 	andseq	r3, r2, r2
 668:	3d2f1520 	cfstr32cc	mvfx1, [pc, #-128]!	; 5f0 <startup-0x1ffffa10>
 66c:	5b3d2f76 	blpl	f4c44c <startup-0x1f0b3bb4>
 670:	3091674b 	addscc	r6, r1, fp, asr #14
 674:	00040222 	andeq	r0, r4, r2, lsr #4
 678:	00720101 	rsbseq	r0, r2, r1, lsl #2
 67c:	00020000 	andeq	r0, r2, r0
 680:	0000005b 	andeq	r0, r0, fp, asr r0
 684:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 688:	0101000d 	tsteq	r1, sp
 68c:	00000101 	andeq	r0, r0, r1, lsl #2
 690:	00000100 	andeq	r0, r0, r0, lsl #2
 694:	2f3a4301 	svccs	0x003a4301
 698:	2f706f6d 	svccs	0x00706f6d
 69c:	6f4d2f63 	svcvs	0x004d2f63
 6a0:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
 6a4:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
 6a8:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
 6ac:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 6b0:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
 6b4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
 6b8:	0000432f 	andeq	r4, r0, pc, lsr #6
 6bc:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
 6c0:	00632e65 	rsbeq	r2, r3, r5, ror #28
 6c4:	73000001 	movwvc	r0, #1
 6c8:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 6cc:	00682e65 	rsbeq	r2, r8, r5, ror #28
 6d0:	69000001 	stmdbvs	r0, {r0}
 6d4:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
 6d8:	0100682e 	tsteq	r0, lr, lsr #16
 6dc:	00000000 	andeq	r0, r0, r0
 6e0:	12900205 	addsne	r0, r0, #1342177280	; 0x50000000
 6e4:	75142000 	ldrvc	r2, [r4, #-0]
 6e8:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
 6ec:	01010004 	tsteq	r1, r4
 6f0:	00000184 	andeq	r0, r0, r4, lsl #3
 6f4:	01370002 	teqeq	r7, r2
 6f8:	01020000 	mrseq	r0, (UNDEF: 2)
 6fc:	000d0efb 	strdeq	r0, [sp], -fp
 700:	01010101 	tsteq	r1, r1, lsl #2
 704:	01000000 	mrseq	r0, (UNDEF: 0)
 708:	43010000 	movwmi	r0, #4096	; 0x1000
 70c:	6f6d2f3a 	svcvs	0x006d2f3a
 710:	2f632f70 	svccs	0x00632f70
 714:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 718:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 71c:	6f697461 	svcvs	0x00697461
 720:	2f72656e 	svccs	0x0072656e
 724:	73504944 	cmpvc	r0, #68, 18	; 0x110000
 728:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
 72c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
 730:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
 734:	632e6572 			; <UNDEFINED> instruction: 0x632e6572
 738:	00000100 	andeq	r0, r0, r0, lsl #2
 73c:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 740:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
 744:	00000100 	andeq	r0, r0, r0, lsl #2
 748:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
 74c:	00682e65 	rsbeq	r2, r8, r5, ror #28
 750:	67000001 	strvs	r0, [r0, -r1]
 754:	6f656d61 	svcvs	0x00656d61
 758:	63656a62 	cmnvs	r5, #401408	; 0x62000
 75c:	00682e74 	rsbeq	r2, r8, r4, ror lr
 760:	66000001 	strvs	r0, [r0], -r1
 764:	5f657269 	svcpl	0x00657269
 768:	63616c62 	cmnvs	r1, #25088	; 0x6200
 76c:	2e325f6b 	cdpcs	15, 3, cr5, cr2, cr11, {3}
 770:	006d6278 	rsbeq	r6, sp, r8, ror r2
 774:	66000001 	strvs	r0, [r0], -r1
 778:	31657269 	cmncc	r5, r9, ror #4
 77c:	6172675f 	cmnvs	r2, pc, asr r7
 780:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
 784:	0001006d 	andeq	r0, r1, sp, rrx
 788:	72696600 	rsbvc	r6, r9, #0, 12
 78c:	6c5f3165 	ldfvse	f3, [pc], {101}	; 0x65
 790:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 794:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 798:	00000100 	andeq	r0, r0, r0, lsl #2
 79c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 7a0:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
 7a4:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
 7a8:	01006d62 	tsteq	r0, r2, ror #26
 7ac:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
 7b0:	5f326572 	svcpl	0x00326572
 7b4:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 7b8:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
 7bc:	0001006d 	andeq	r0, r1, sp, rrx
 7c0:	72696600 	rsbvc	r6, r9, #0, 12
 7c4:	675f3365 	ldrbvs	r3, [pc, -r5, ror #6]
 7c8:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
 7cc:	006d6278 	rsbeq	r6, sp, r8, ror r2
 7d0:	66000001 	strvs	r0, [r0], -r1
 7d4:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
 7d8:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
 7dc:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
 7e0:	01006d62 	tsteq	r0, r2, ror #26
 7e4:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
 7e8:	5f346572 	svcpl	0x00346572
 7ec:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
 7f0:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 7f4:	00000100 	andeq	r0, r0, r0, lsl #2
 7f8:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 7fc:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
 800:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
 804:	006d6278 	rsbeq	r6, sp, r8, ror r2
 808:	66000001 	strvs	r0, [r0], -r1
 80c:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
 810:	6172675f 	cmnvs	r2, pc, asr r7
 814:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
 818:	0001006d 	andeq	r0, r1, sp, rrx
 81c:	72696600 	rsbvc	r6, r9, #0, 12
 820:	6c5f3565 	cfldr64vs	mvdx3, [pc], {101}	; 0x65
 824:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 828:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 82c:	00000100 	andeq	r0, r0, r0, lsl #2
 830:	02050000 	andeq	r0, r5, #0
 834:	200012b8 			; <UNDEFINED> instruction: 0x200012b8
 838:	3d013003 	stccc	0, cr3, [r1, #-12]
 83c:	2f3e672f 	svccs	0x003e672f
 840:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
 844:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
 848:	2f3e672f 	svccs	0x003e672f
 84c:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
 850:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
 854:	2f3e672f 	svccs	0x003e672f
 858:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
 85c:	1446023d 	strbne	r0, [r6], #-573	; 0xfffffdc3
 860:	3e2f4b4c 	vnmulcc.f64	d4, d15, d12
 864:	5959594b 	ldmdbpl	r9, {r0, r1, r3, r6, r8, fp, ip, lr}^
 868:	9191915a 	orrsls	r9, r1, sl, asr r1
 86c:	3d3e9391 	ldccc	3, cr9, [lr, #-580]!	; 0xfffffdbc
 870:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
 874:	01010031 	tsteq	r1, r1, lsr r0
 878:	0000009d 	muleq	r0, sp, r0
 87c:	006c0002 	rsbeq	r0, ip, r2
 880:	01020000 	mrseq	r0, (UNDEF: 2)
 884:	000d0efb 	strdeq	r0, [sp], -fp
 888:	01010101 	tsteq	r1, r1, lsl #2
 88c:	01000000 	mrseq	r0, (UNDEF: 0)
 890:	43010000 	movwmi	r0, #4096	; 0x1000
 894:	6f6d2f3a 	svcvs	0x006d2f3a
 898:	2f632f70 	svccs	0x00632f70
 89c:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 8a0:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 8a4:	6f697461 	svcvs	0x00697461
 8a8:	2f72656e 	svccs	0x0072656e
 8ac:	73504944 	cmpvc	r0, #68, 18	; 0x110000
 8b0:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
 8b4:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
 8b8:	6c700000 	ldclvs	0, cr0, [r0], #-0
 8bc:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
 8c0:	0100632e 	tsteq	r0, lr, lsr #6
 8c4:	70730000 	rsbsvc	r0, r3, r0
 8c8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 8cc:	0100682e 	tsteq	r0, lr, lsr #16
 8d0:	6d690000 	stclvs	0, cr0, [r9, #-0]
 8d4:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
 8d8:	00010068 	andeq	r0, r1, r8, rrx
 8dc:	6d616700 	stclvs	7, cr6, [r1, #-0]
 8e0:	6a626f65 	bvs	189c67c <startup-0x1e763984>
 8e4:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 8e8:	00010068 	andeq	r0, r1, r8, rrx
 8ec:	05000000 	streq	r0, [r0, #-0]
 8f0:	00156002 	andseq	r6, r5, r2
 8f4:	594b1720 	stmdbpl	fp, {r5, r8, r9, sl, ip}^
 8f8:	00cf3d67 	sbceq	r3, pc, r7, ror #26
 8fc:	06010402 	streq	r0, [r1], -r2, lsl #8
 900:	5b59064a 	blpl	1642230 <startup-0x1e9bddd0>
 904:	01040200 	mrseq	r0, R12_usr
 908:	59064a06 	stmdbpl	r6, {r1, r2, r9, fp, lr}
 90c:	684b765b 	stmdavs	fp, {r0, r1, r3, r4, r6, r9, sl, ip, sp, lr}^
 910:	68675b4b 	stmdavs	r7!, {r0, r1, r3, r6, r8, r9, fp, ip, lr}^
 914:	01000b02 	tsteq	r0, r2, lsl #22
 918:	Address 0x00000918 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
   4:	49726574 	ldmdbmi	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
   8:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
   c:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
  10:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
  14:	69740035 	ldmdbvs	r4!, {r0, r2, r4, r5}^
  18:	5f656c74 	svcpl	0x00656c74
  1c:	63616c62 	cmnvs	r1, #25088	; 0x6200
  20:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
  24:	61007374 	tstvs	r0, r4, ror r3
  28:	616d696e 	cmnvs	sp, lr, ror #18
  2c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
  30:	756f635f 	strbvc	r6, [pc, #-863]!	; fffffcd9 <firstTime.4076+0xdfffb0d1>
  34:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
  38:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
  3c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
  40:	6f700037 	svcvs	0x00700037
  44:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
  48:	47003872 	smlsdxmi	r0, r2, r8, r3
  4c:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
  50:	36203939 			; <UNDEFINED> instruction: 0x36203939
  54:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  58:	31303220 	teqcc	r0, r0, lsr #4
  5c:	31323037 	teqcc	r2, r7, lsr r0
  60:	72282035 	eorvc	r2, r8, #53	; 0x35
  64:	61656c65 	cmnvs	r5, r5, ror #24
  68:	20296573 	eorcs	r6, r9, r3, ror r5
  6c:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  70:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
  74:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  78:	2d362d64 	ldccs	13, cr2, [r6, #-400]!	; 0xfffffe70
  7c:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  80:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  84:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  88:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  8c:	35353432 	ldrcc	r3, [r5, #-1074]!	; 0xfffffbce
  90:	205d3231 	subscs	r3, sp, r1, lsr r2
  94:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  98:	20626d75 	rsbcs	r6, r2, r5, ror sp
  9c:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  a0:	613d6863 	teqvs	sp, r3, ror #16
  a4:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  a8:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  ac:	6f6c666d 	svcvs	0x006c666d
  b0:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
  b4:	733d6962 	teqvc	sp, #1605632	; 0x188000
  b8:	2074666f 	rsbscs	r6, r4, pc, ror #12
  bc:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  c0:	20626d75 	rsbcs	r6, r2, r5, ror sp
  c4:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  c8:	613d6863 	teqvs	sp, r3, ror #16
  cc:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  d0:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  d4:	4f2d2067 	svcmi	0x002d2067
  d8:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
  dc:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
  e0:	78003939 	stmdavc	r0, {r0, r3, r4, r5, r8, fp, ip, sp}
  e4:	00736f50 	rsbseq	r6, r3, r0, asr pc
  e8:	706d6574 	rsbvc	r6, sp, r4, ror r5
  ec:	6c746954 			; <UNDEFINED> instruction: 0x6c746954
  f0:	616c4265 	cmnvs	ip, r5, ror #4
  f4:	73006b63 	movwvc	r6, #2915	; 0xb63
  f8:	74657a69 	strbtvc	r7, [r5], #-2665	; 0xfffff597
  fc:	00657079 	rsbeq	r7, r5, r9, ror r0
 100:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 104:	616c4265 	cmnvs	ip, r5, ror #4
 108:	63006b63 	movwvs	r6, #2915	; 0xb63
 10c:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
 110:	665f746e 	ldrbvs	r7, [pc], -lr, ror #8
 114:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
 118:	61726400 	cmnvs	r2, r0, lsl #8
 11c:	75625f77 	strbvc	r5, [r2, #-3959]!	; 0xfffff089
 120:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 124:	616c625f 	cmnvs	ip, pc, asr r2
 128:	74006b63 	strvc	r6, [r0], #-2915	; 0xfffff49d
 12c:	4d706d65 	ldclmi	13, cr6, [r0, #-404]!	; 0xfffffe6c
 130:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
 134:	694c7265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp, lr}^
 138:	00746867 	rsbseq	r6, r4, r7, ror #16
 13c:	6e69616d 	powvsez	f6, f1, #5.0
 140:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
 144:	624f656c 	subvs	r6, pc, #108, 10	; 0x1b000000
 148:	4774006a 	ldrbmi	r0, [r4, -sl, rrx]!
 14c:	4f656d61 	svcmi	0x00656d61
 150:	63656a62 	cmnvs	r5, #401408	; 0x62000
 154:	61630074 	smcvs	12292	; 0x3004
 158:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
 15c:	63616c42 	cmnvs	r1, #16896	; 0x4200
 160:	6163006b 	cmnvs	r3, fp, rrx
 164:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
 168:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
 16c:	63616200 	cmnvs	r1, #0, 4
 170:	6675426b 	ldrbtvs	r4, [r5], -fp, ror #4
 174:	4c726566 	cfldr64mi	mvdx6, [r2], #-408	; 0xfffffe68
 178:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 17c:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 180:	745f3874 	ldrbvc	r3, [pc], #-2164	; 188 <startup-0x1ffffe78>
 184:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
 188:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 18c:	6f6d0034 	svcvs	0x006d0034
 190:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
 194:	6f700072 	svcvs	0x00700072
 198:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 19c:	6d003672 	stcvs	6, cr3, [r0, #-456]	; 0xfffffe38
 1a0:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
 1a4:	625f7265 	subsvs	r7, pc, #1342177286	; 0x50000006
 1a8:	6b63616c 	blvs	18d8760 <startup-0x1e7278a0>
 1ac:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 1b0:	476e0073 			; <UNDEFINED> instruction: 0x476e0073
 1b4:	4f656d61 	svcmi	0x00656d61
 1b8:	63656a62 	cmnvs	r5, #401408	; 0x62000
 1bc:	70007374 	andvc	r7, r0, r4, ror r3
 1c0:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 1c4:	00397265 	eorseq	r7, r9, r5, ror #4
 1c8:	74646977 	strbtvc	r6, [r4], #-2423	; 0xfffff689
 1cc:	72640068 	rsbvc	r0, r4, #104	; 0x68
 1d0:	625f7761 	subsvs	r7, pc, #25427968	; 0x1840000
 1d4:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 1d8:	6c625f72 	stclvs	15, cr5, [r2], #-456	; 0xfffffe38
 1dc:	5f6b6361 	svcpl	0x006b6361
 1e0:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 1e4:	70750074 	rsbsvc	r0, r5, r4, ror r0
 1e8:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
 1ec:	6f507900 	svcvs	0x00507900
 1f0:	61630073 	smcvs	12291	; 0x3003
 1f4:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
 1f8:	006a624f 	rsbeq	r6, sl, pc, asr #4
 1fc:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
 200:	50726574 	rsbspl	r6, r2, r4, ror r5
 204:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 208:	00327265 	eorseq	r7, r2, r5, ror #4
 20c:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 210:	63007265 	movwvs	r7, #613	; 0x265
 214:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
 218:	696c5f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 21c:	5f746867 	svcpl	0x00746867
 220:	73746962 	cmnvc	r4, #1605632	; 0x188000
 224:	2f3a4300 	svccs	0x003a4300
 228:	2f706f6d 	svccs	0x00706f6d
 22c:	6f4d2f63 	svcvs	0x004d2f63
 230:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
 234:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
 238:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
 23c:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 240:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
 244:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
 248:	732f432f 			; <UNDEFINED> instruction: 0x732f432f
 24c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 250:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 254:	67696c00 	strbvs	r6, [r9, -r0, lsl #24]!
 258:	6d497468 	cfstrdvs	mvd7, [r9, #-416]	; 0xfffffe60
 25c:	00656761 	rsbeq	r6, r5, r1, ror #14
 260:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 264:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 268:	61686320 	cmnvs	r8, r0, lsr #6
 26c:	65740072 	ldrbvs	r0, [r4, #-114]!	; 0xffffff8e
 270:	6f4d706d 	svcvs	0x004d706d
 274:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
 278:	61724772 	cmnvs	r2, r2, ror r7
 27c:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
 280:	6954706d 	ldmdbvs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
 284:	4c656c74 	stclmi	12, cr6, [r5], #-464	; 0xfffffe30
 288:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 28c:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
 290:	694c656c 	stmdbvs	ip, {r2, r3, r5, r6, r8, sl, sp, lr}^
 294:	00746867 	rsbseq	r6, r4, r7, ror #16
 298:	67696568 	strbvs	r6, [r9, -r8, ror #10]!
 29c:	74007468 	strvc	r7, [r0], #-1128	; 0xfffffb98
 2a0:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
 2a4:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
 2a8:	74007365 	strvc	r7, [r0], #-869	; 0xfffffc9b
 2ac:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
 2b0:	6172675f 	cmnvs	r2, pc, asr r7
 2b4:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 2b8:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
 2bc:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
 2c0:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
 2c4:	6f687300 	svcvs	0x00687300
 2c8:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
 2cc:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 2d0:	2064656e 	rsbcs	r6, r4, lr, ror #10
 2d4:	00746e69 	rsbseq	r6, r4, r9, ror #28
 2d8:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
 2dc:	694c656c 	stmdbvs	ip, {r2, r3, r5, r6, r8, sl, sp, lr}^
 2e0:	00746867 	rsbseq	r6, r4, r7, ror #16
 2e4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 2e8:	7070615f 	rsbsvc	r6, r0, pc, asr r1
 2ec:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
 2f0:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 2f4:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
 2f8:	6f6d0074 	svcvs	0x006d0074
 2fc:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
 300:	616d4972 	smcvs	54418	; 0xd492
 304:	00736567 	rsbseq	r6, r3, r7, ror #10
 308:	706d6574 	rsbvc	r6, sp, r4, ror r5
 30c:	74736143 	ldrbtvc	r6, [r3], #-323	; 0xfffffebd
 310:	7247656c 	subvc	r6, r7, #108, 10	; 0x1b000000
 314:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
 318:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
 31c:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
 320:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
 324:	00737469 	rsbseq	r7, r3, r9, ror #8
 328:	706d6574 	rsbvc	r6, sp, r4, ror r5
 32c:	74736143 	ldrbtvc	r6, [r3], #-323	; 0xfffffebd
 330:	6c42656c 	cfstr64vs	mvdx6, [r2], {108}	; 0x6c
 334:	006b6361 	rsbeq	r6, fp, r1, ror #6
 338:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
 33c:	675f656c 	ldrbvs	r6, [pc, -ip, ror #10]
 340:	5f796172 	svcpl	0x00796172
 344:	73746962 	cmnvc	r4, #1605632	; 0x188000
 348:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 34c:	73614370 	cmnvc	r1, #112, 6	; 0xc0000001
 350:	4c656c74 	stclmi	12, cr6, [r5], #-464	; 0xfffffe30
 354:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 358:	63616200 	cmnvs	r1, #0, 4
 35c:	6675426b 	ldrbtvs	r4, [r5], -fp, ror #4
 360:	47726566 	ldrbmi	r6, [r2, -r6, ror #10]!
 364:	00796172 	rsbseq	r6, r9, r2, ror r1
 368:	72665f6e 	rsbvc	r5, r6, #440	; 0x1b8
 36c:	73656d61 	cmnvc	r5, #6208	; 0x1840
 370:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 374:	00674270 	rsbeq	r4, r7, r0, ror r2
 378:	706d6574 	rsbvc	r6, sp, r4, ror r5
 37c:	6c746954 			; <UNDEFINED> instruction: 0x6c746954
 380:	61724765 	cmnvs	r2, r5, ror #14
 384:	6e690079 	mcrvs	0, 3, r0, cr9, cr9, {3}
 388:	70537469 	subsvc	r7, r3, r9, ror #8
 38c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 390:	61670073 	smcvs	28675	; 0x7003
 394:	624f656d 	subvs	r6, pc, #457179136	; 0x1b400000
 398:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 39c:	6f6d0073 	svcvs	0x006d0073
 3a0:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
 3a4:	6a624f72 	bvs	1894174 <startup-0x1e76be8c>
 3a8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 3ac:	6e6f4d70 	mcrvs	13, 3, r4, cr15, cr0, {3}
 3b0:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 3b4:	616c6200 	cmnvs	ip, r0, lsl #4
 3b8:	6d496b63 	vstrvs	d22, [r9, #-396]	; 0xfffffe74
 3bc:	00656761 	rsbeq	r6, r5, r1, ror #14
 3c0:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
 3c4:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
 3c8:	6f6d0065 	svcvs	0x006d0065
 3cc:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
 3d0:	696f5072 	stmdbvs	pc!, {r1, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
 3d4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 3d8:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
 3dc:	6d49656c 	cfstr64vs	mvdx6, [r9, #-432]	; 0xfffffe50
 3e0:	00656761 	rsbeq	r6, r5, r1, ror #14
 3e4:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 3e8:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
 3ec:	5f726566 	svcpl	0x00726566
 3f0:	63616c62 	cmnvs	r1, #25088	; 0x6200
 3f4:	72675f6b 	rsbvc	r5, r7, #428	; 0x1ac
 3f8:	6c5f7961 	mrrcvs	9, 6, r7, pc, cr1	; <UNPREDICTABLE>
 3fc:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 400:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
 404:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 408:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
 40c:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
 410:	00737469 	rsbseq	r7, r3, r9, ror #8
 414:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 418:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
 41c:	5f726566 	svcpl	0x00726566
 420:	63616c62 	cmnvs	r1, #25088	; 0x6200
 424:	72675f6b 	rsbvc	r5, r7, #428	; 0x1ac
 428:	6d007961 	vstrvs.16	s14, [r0, #-194]	; 0xffffff3e	; <UNPREDICTABLE>
 42c:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
 430:	6f507265 	svcvs	0x00507265
 434:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 438:	73003372 	movwvc	r3, #882	; 0x372
 43c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 440:	61007075 	tstvs	r0, r5, ror r0
 444:	616d696e 	cmnvs	sp, lr, ror #18
 448:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 44c:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 450:	63006465 	movwvs	r6, #1125	; 0x465
 454:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
 458:	616d4965 	cmnvs	sp, r5, ror #18
 45c:	00736567 	rsbseq	r6, r3, r7, ror #10
 460:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
 464:	5f726574 	svcpl	0x00726574
 468:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
 46c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 470:	6f700073 	svcvs	0x00700073
 474:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 478:	00303172 	eorseq	r3, r0, r2, ror r1
 47c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 480:	67620032 			; <UNDEFINED> instruction: 0x67620032
 484:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 488:	6d690073 	stclvs	0, cr0, [r9, #-460]!	; 0xfffffe34
 48c:	73656761 	cmnvc	r5, #25427968	; 0x1840000
 490:	73616300 	cmnvc	r1, #0, 6
 494:	49656c74 	stmdbmi	r5!, {r2, r4, r5, r6, sl, fp, sp, lr}^
 498:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
 49c:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
 4a0:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 4a4:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
 4a8:	73616300 	cmnvc	r1, #0, 6
 4ac:	5f656c74 	svcpl	0x00656c74
 4b0:	63616c62 	cmnvs	r1, #25088	; 0x6200
 4b4:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 4b8:	66007374 			; <UNDEFINED> instruction: 0x66007374
 4bc:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
 4c0:	616f6c00 	cmnvs	pc, r0, lsl #24
 4c4:	70735f64 	rsbsvc	r5, r3, r4, ror #30
 4c8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 4cc:	2f3a4300 	svccs	0x003a4300
 4d0:	2f706f6d 	svccs	0x00706f6d
 4d4:	6f4d2f63 	svcvs	0x004d2f63
 4d8:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
 4dc:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
 4e0:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
 4e4:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 4e8:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
 4ec:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
 4f0:	732f432f 			; <UNDEFINED> instruction: 0x732f432f
 4f4:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 4f8:	00632e65 	rsbeq	r2, r3, r5, ror #28
 4fc:	65676170 	strbvs	r6, [r7, #-368]!	; 0xfffffe90
 500:	61726700 	cmnvs	r2, r0, lsl #14
 504:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 508:	6165725f 	cmnvs	r5, pc, asr r2
 50c:	75620064 	strbvc	r0, [r2, #-100]!	; 0xffffff9c
 510:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 514:	6c617600 	stclvs	6, cr7, [r1], #-0
 518:	70006575 	andvc	r6, r0, r5, ror r5
 51c:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 520:	72640032 	rsbvc	r0, r4, #50	; 0x32
 524:	675f7761 	ldrbvs	r7, [pc, -r1, ror #14]
 528:	5f656d61 	svcpl	0x00656d61
 52c:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 530:	64007463 	strvs	r7, [r0], #-1123	; 0xfffffb9d
 534:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 538:	63696d5f 	cmnvs	r9, #6080	; 0x17c0
 53c:	67006f72 	smlsdxvs	r0, r2, pc, r6	; <UNPREDICTABLE>
 540:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 544:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 548:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 54c:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 3d8 <startup-0x1ffffc28>
 550:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 554:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 558:	625f7261 	subsvs	r7, pc, #268435462	; 0x10000006
 55c:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
 560:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 564:	69700072 	ldmdbvs	r0!, {r1, r4, r5, r6}^
 568:	006c6578 	rsbeq	r6, ip, r8, ror r5
 56c:	6a624f67 	bvs	1894310 <startup-0x1e76bcf0>
 570:	61726700 	cmnvs	r2, r0, lsl #14
 574:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 578:	6172645f 	cmnvs	r2, pc, asr r4
 57c:	63735f77 	cmnvs	r3, #476	; 0x1dc
 580:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 584:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 588:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 4ce <startup-0x1ffffb32>	; <UNPREDICTABLE>
 58c:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 590:	6f687300 	svcvs	0x00687300
 594:	72665f77 	rsbvc	r5, r6, #476	; 0x1dc
 598:	00656d61 	rsbeq	r6, r5, r1, ror #26
 59c:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 5a0:	7270735f 	rsbsvc	r7, r0, #2080374785	; 0x7c000001
 5a4:	00657469 	rsbeq	r7, r5, r9, ror #8
 5a8:	616c6564 	cmnvs	ip, r4, ror #10
 5ac:	30355f79 	eorscc	r5, r5, r9, ror pc
 5b0:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 5b4:	70617267 	rsbvc	r7, r1, r7, ror #4
 5b8:	5f636968 	svcpl	0x00636968
 5bc:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 5c0:	72670065 	rsbvc	r0, r7, #101	; 0x65
 5c4:	63537961 	cmpvs	r3, #1589248	; 0x184000
 5c8:	54656c61 	strbtpl	r6, [r5], #-3169	; 0xfffff39f
 5cc:	00747365 	rsbseq	r7, r4, r5, ror #6
 5d0:	70617267 	rsbvc	r7, r1, r7, ror #4
 5d4:	5f636968 	svcpl	0x00636968
 5d8:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 5dc:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 5e0:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 5e4:	43007261 	movwmi	r7, #609	; 0x261
 5e8:	6f6d2f3a 	svcvs	0x006d2f3a
 5ec:	2f632f70 	svccs	0x00632f70
 5f0:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 5f4:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 5f8:	6f697461 	svcvs	0x00697461
 5fc:	2f72656e 	svccs	0x0072656e
 600:	73504944 	cmpvc	r0, #68, 18	; 0x110000
 604:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
 608:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
 60c:	6172672f 	cmnvs	r2, pc, lsr #14
 610:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 614:	00632e73 	rsbeq	r2, r3, r3, ror lr
 618:	70617267 	rsbvc	r7, r1, r7, ror #4
 61c:	5f636968 	svcpl	0x00636968
 620:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 624:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 628:	6f630061 	svcvs	0x00630061
 62c:	00726f6c 	rsbseq	r6, r2, ip, ror #30
 630:	5f746573 	svcpl	0x00746573
 634:	645f7075 	ldrbvs	r7, [pc], #-117	; 63c <startup-0x1ffff9c4>
 638:	5f776172 	svcpl	0x00776172
 63c:	66667562 	strbtvs	r7, [r6], -r2, ror #10
 640:	00737265 	rsbseq	r7, r3, r5, ror #4
 644:	70617267 	rsbvc	r7, r1, r7, ror #4
 648:	5f636968 	svcpl	0x00636968
 64c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 650:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 654:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 658:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 65c:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 660:	736e3035 	cmnvc	lr, #53	; 0x35
 664:	6c696600 	stclvs	6, cr6, [r9], #-0
 668:	6365526c 	cmnvs	r5, #108, 4	; 0xc0000006
 66c:	676e6174 			; <UNDEFINED> instruction: 0x676e6174
 670:	6d00656c 	cfstr32vs	mvfx6, [r0, #-432]	; 0xfffffe50
 674:	006b7361 	rsbeq	r7, fp, r1, ror #6
 678:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
 67c:	656c5f65 	strbvs	r5, [ip, #-3941]!	; 0xfffff09b
 680:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
 684:	61726700 	cmnvs	r2, r0, lsl #14
 688:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 68c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 690:	645f6574 	ldrbvs	r6, [pc], #-1396	; 698 <startup-0x1ffff968>
 694:	00617461 	rsbeq	r7, r1, r1, ror #8
 698:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
 69c:	64697700 	strbtvs	r7, [r9], #-1792	; 0xfffff900
 6a0:	695f6874 	ldmdbvs	pc, {r2, r4, r5, r6, fp, sp, lr}^	; <UNPREDICTABLE>
 6a4:	79625f6e 	stmdbvc	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 6a8:	00736574 	rsbseq	r6, r3, r4, ror r5
 6ac:	61656c63 	cmnvs	r5, r3, ror #24
 6b0:	6c615f72 	stclvs	15, cr5, [r1], #-456	; 0xfffffe38
 6b4:	61625f6c 	cmnvs	r2, ip, ror #30
 6b8:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
 6bc:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 6c0:	6c630073 	stclvs	0, cr0, [r3], #-460	; 0xfffffe34
 6c4:	52726165 	rsbspl	r6, r2, #1073741849	; 0x40000019
 6c8:	61746365 	cmnvs	r4, r5, ror #6
 6cc:	656c676e 	strbvs	r6, [ip, #-1902]!	; 0xfffff892
 6d0:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 6d4:	73007865 	movwvc	r7, #2149	; 0x865
 6d8:	63656c65 	cmnvs	r5, #25856	; 0x6500
 6dc:	6f635f74 	svcvs	0x00635f74
 6e0:	6f72746e 	svcvs	0x0072746e
 6e4:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 6e8:	61726700 	cmnvs	r2, r0, lsl #14
 6ec:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 6f0:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 6f4:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
 6f8:	00796461 	rsbseq	r6, r9, r1, ror #8
 6fc:	61656c63 	cmnvs	r5, r3, ror #24
 700:	68745f72 	ldmdavs	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 704:	61427369 	cmpvs	r2, r9, ror #6
 708:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
 70c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 710:	61726700 	cmnvs	r2, r0, lsl #14
 714:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 718:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 71c:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
 720:	00657a69 	rsbeq	r7, r5, r9, ror #20
 724:	70617267 	rsbvc	r7, r1, r7, ror #4
 728:	5f636968 	svcpl	0x00636968
 72c:	61656c63 	cmnvs	r5, r3, ror #24
 730:	63735f72 	cmnvs	r3, #456	; 0x1c8
 734:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 738:	6d616700 	stclvs	7, cr6, [r1, #-0]
 73c:	6a624f65 	bvs	18944d8 <startup-0x1e76bb28>
 740:	55746365 	ldrbpl	r6, [r4, #-869]!	; 0xfffffc9b
 744:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
 748:	3a430065 	bcc	10c08e4 <startup-0x1ef3f71c>
 74c:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 750:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 69c <startup-0x1ffff964>
 754:	616c706f 	cmnvs	ip, pc, rrx
 758:	61726f62 	cmnvs	r2, r2, ror #30
 75c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 760:	672f7265 	strvs	r7, [pc, -r5, ror #4]!
 764:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 768:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 76c:	616c7073 	smcvs	50947	; 0xc703
 770:	61672f79 	smcvs	29433	; 0x72f9
 774:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
 778:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 77c:	7400632e 	strvc	r6, [r0], #-814	; 0xfffffcd2
 780:	00736968 	rsbseq	r6, r3, r8, ror #18
 784:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
 788:	65730072 	ldrbvs	r0, [r3, #-114]!	; 0xffffff8e
 78c:	70755f74 	rsbsvc	r5, r5, r4, ror pc
 790:	4c49445f 	cfstrdmi	mvd4, [r9], {95}	; 0x5f
 794:	72646f00 	rsbvc	r6, r4, #0, 30
 798:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
 79c:	79546f00 	ldmdbvc	r4, {r8, r9, sl, fp, sp, lr}^
 7a0:	00726570 	rsbseq	r6, r2, r0, ror r5
 7a4:	4f495047 	svcmi	0x00495047
 7a8:	50755000 	rsbspl	r5, r5, r0
 7ac:	69007264 	stmdbvs	r0, {r2, r5, r6, r9, ip, sp, lr}
 7b0:	65527264 	ldrbvs	r7, [r2, #-612]	; 0xfffffd9c
 7b4:	76726573 			; <UNDEFINED> instruction: 0x76726573
 7b8:	6f006465 	svcvs	0x00006465
 7bc:	73655274 	cmnvc	r5, #116, 4	; 0x40000007
 7c0:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
 7c4:	65720064 	ldrbvs	r0, [r2, #-100]!	; 0xffffff9c
 7c8:	445f6461 	ldrbmi	r6, [pc], #-1121	; 7d0 <startup-0x1ffff830>
 7cc:	735f4c49 	cmpvc	pc, #18688	; 0x4900
 7d0:	6c676e69 	stclvs	14, cr6, [r7], #-420	; 0xfffffe5c
 7d4:	646f0065 	strbtvs	r0, [pc], #-101	; 7dc <startup-0x1ffff824>
 7d8:	776f4c72 			; <UNDEFINED> instruction: 0x776f4c72
 7dc:	70536f00 	subsvc	r6, r3, r0, lsl #30
 7e0:	72646565 	rsbvc	r6, r4, #423624704	; 0x19400000
 7e4:	72646900 	rsbvc	r6, r4, #0, 18
 7e8:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
 7ec:	72646900 	rsbvc	r6, r4, #0, 18
 7f0:	00776f4c 	rsbseq	r6, r7, ip, asr #30
 7f4:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
 7f8:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
 7fc:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 800:	6f62616c 	svcvs	0x0062616c
 804:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 808:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 80c:	6172672f 	cmnvs	r2, pc, lsr #14
 810:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 814:	70736964 	rsbsvc	r6, r3, r4, ror #18
 818:	2f79616c 	svccs	0x0079616c
 81c:	6f697067 	svcvs	0x00697067
 820:	6f00632e 	svcvs	0x0000632e
 824:	65527264 	ldrbvs	r7, [r2, #-612]	; 0xfffffd9c
 828:	76726573 			; <UNDEFINED> instruction: 0x76726573
 82c:	72006465 	andvc	r6, r0, #1694498816	; 0x65000000
 830:	5f646165 	svcpl	0x00646165
 834:	004c4944 	subeq	r4, ip, r4, asr #18
 838:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
 83c:	616d695f 	cmnvs	sp, pc, asr r9
 840:	43006567 	movwmi	r6, #1383	; 0x567
 844:	6f6d2f3a 	svcvs	0x006d2f3a
 848:	2f632f70 	svccs	0x00632f70
 84c:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 850:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 854:	6f697461 	svcvs	0x00697461
 858:	2f72656e 	svccs	0x0072656e
 85c:	73504944 	cmpvc	r0, #68, 18	; 0x110000
 860:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
 864:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
 868:	616d692f 	cmnvs	sp, pc, lsr #18
 86c:	632e6567 			; <UNDEFINED> instruction: 0x632e6567
 870:	72696600 	rsbvc	r6, r9, #0, 12
 874:	72473565 	subvc	r3, r7, #423624704	; 0x19400000
 878:	66007961 	strvs	r7, [r0], -r1, ror #18
 87c:	31657269 	cmncc	r5, r9, ror #4
 880:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
 884:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 888:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
 88c:	72473265 	subvc	r3, r7, #1342177286	; 0x50000006
 890:	66007961 	strvs	r7, [r0], -r1, ror #18
 894:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
 898:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
 89c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 8a0:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
 8a4:	72473465 	subvc	r3, r7, #1694498816	; 0x65000000
 8a8:	66007961 	strvs	r7, [r0], -r1, ror #18
 8ac:	42657269 	rsbmi	r7, r5, #-1879048186	; 0x90000006
 8b0:	6b63616c 	blvs	18d8e68 <startup-0x1e727198>
 8b4:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 8b8:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
 8bc:	72473365 	subvc	r3, r7, #-1811939327	; 0x94000001
 8c0:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
 8c4:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
 8c8:	42657269 	rsbmi	r7, r5, #-1879048186	; 0x90000006
 8cc:	6b63616c 	blvs	18d8e84 <startup-0x1e72717c>
 8d0:	72696600 	rsbvc	r6, r9, #0, 12
 8d4:	694c3165 	stmdbvs	ip, {r0, r2, r5, r6, r8, ip, sp}^
 8d8:	00746867 	rsbseq	r6, r4, r7, ror #16
 8dc:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 8e0:	67694c34 			; <UNDEFINED> instruction: 0x67694c34
 8e4:	66007468 	strvs	r7, [r0], -r8, ror #8
 8e8:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
 8ec:	6172675f 	cmnvs	r2, pc, asr r7
 8f0:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 8f4:	66007374 			; <UNDEFINED> instruction: 0x66007374
 8f8:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
 8fc:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
 900:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
 904:	00737469 	rsbseq	r7, r3, r9, ror #8
 908:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 90c:	67694c33 			; <UNDEFINED> instruction: 0x67694c33
 910:	70007468 	andvc	r7, r0, r8, ror #8
 914:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 918:	00317265 	eorseq	r7, r1, r5, ror #4
 91c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 920:	33726574 	cmncc	r2, #116, 10	; 0x1d000000
 924:	72696600 	rsbvc	r6, r9, #0, 12
 928:	675f3565 	ldrbvs	r3, [pc, -r5, ror #10]
 92c:	5f796172 	svcpl	0x00796172
 930:	73746962 	cmnvc	r4, #1605632	; 0x188000
 934:	72696600 	rsbvc	r6, r9, #0, 12
 938:	6d493365 	stclvs	3, cr3, [r9, #-404]	; 0xfffffe6c
 93c:	00656761 	rsbeq	r6, r5, r1, ror #14
 940:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 944:	30726574 	rsbscc	r6, r2, r4, ror r5
 948:	72696600 	rsbvc	r6, r9, #0, 12
 94c:	694c3565 	stmdbvs	ip, {r0, r2, r5, r6, r8, sl, ip, sp}^
 950:	00746867 	rsbseq	r6, r4, r7, ror #16
 954:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 958:	32726574 	rsbscc	r6, r2, #116, 10	; 0x1d000000
 95c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 960:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
 964:	72473565 	subvc	r3, r7, #423624704	; 0x19400000
 968:	66007961 	strvs	r7, [r0], -r1, ror #18
 96c:	31657269 	cmncc	r5, r9, ror #4
 970:	6172675f 	cmnvs	r2, pc, asr r7
 974:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 978:	66007374 			; <UNDEFINED> instruction: 0x66007374
 97c:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
 980:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
 984:	69660074 	stmdbvs	r6!, {r2, r4, r5, r6}^
 988:	5f316572 	svcpl	0x00316572
 98c:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 990:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 994:	66007374 			; <UNDEFINED> instruction: 0x66007374
 998:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
 99c:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
 9a0:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
 9a4:	00737469 	rsbseq	r7, r3, r9, ror #8
 9a8:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 9ac:	006a624f 	rsbeq	r6, sl, pc, asr #4
 9b0:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 9b4:	61724732 	cmnvs	r2, r2, lsr r7
 9b8:	69660079 	stmdbvs	r6!, {r0, r3, r4, r5, r6}^
 9bc:	5f346572 	svcpl	0x00346572
 9c0:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
 9c4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 9c8:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
 9cc:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
 9d0:	4c336572 	cfldr32mi	mvfx6, [r3], #-456	; 0xfffffe38
 9d4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 9d8:	72696600 	rsbvc	r6, r9, #0, 12
 9dc:	6d493465 	cfstrdvs	mvd3, [r9, #-404]	; 0xfffffe6c
 9e0:	00656761 	rsbeq	r6, r5, r1, ror #14
 9e4:	706d6574 	rsbvc	r6, sp, r4, ror r5
 9e8:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
 9ec:	67694c31 			; <UNDEFINED> instruction: 0x67694c31
 9f0:	66007468 	strvs	r7, [r0], -r8, ror #8
 9f4:	74737269 	ldrbtvc	r7, [r3], #-617	; 0xfffffd97
 9f8:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
 9fc:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 a00:	69665f74 	stmdbvs	r6!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 a04:	66006572 			; <UNDEFINED> instruction: 0x66006572
 a08:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
 a0c:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
 a10:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
 a14:	00737469 	rsbseq	r7, r3, r9, ror #8
 a18:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 a1c:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
 a20:	66007365 	strvs	r7, [r0], -r5, ror #6
 a24:	31657269 	cmncc	r5, r9, ror #4
 a28:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
 a2c:	69660065 	stmdbvs	r6!, {r0, r2, r5, r6}^
 a30:	47346572 			; <UNDEFINED> instruction: 0x47346572
 a34:	00796172 	rsbseq	r6, r9, r2, ror r1
 a38:	706d6574 	rsbvc	r6, sp, r4, ror r5
 a3c:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
 a40:	61724731 	cmnvs	r2, r1, lsr r7
 a44:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
 a48:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
 a4c:	4c346572 	cfldr32mi	mvfx6, [r4], #-456	; 0xfffffe38
 a50:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 a54:	72696600 	rsbvc	r6, r9, #0, 12
 a58:	6c5f3365 	mrrcvs	3, 6, r3, pc, cr5	; <UNPREDICTABLE>
 a5c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 a60:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 a64:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
 a68:	49356572 	ldmdbmi	r5!, {r1, r4, r5, r6, r8, sl, sp, lr}
 a6c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
 a70:	72696600 	rsbvc	r6, r9, #0, 12
 a74:	6c625f65 	stclvs	15, cr5, [r2], #-404	; 0xfffffe6c
 a78:	5f6b6361 	svcpl	0x006b6361
 a7c:	69625f32 	stmdbvs	r2!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
 a80:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
 a84:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
 a88:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
 a8c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
 a90:	69660074 	stmdbvs	r6!, {r2, r4, r5, r6}^
 a94:	49326572 	ldmdbmi	r2!, {r1, r4, r5, r6, r8, sl, sp, lr}
 a98:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
 a9c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
 aa0:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
 aa4:	694c3565 	stmdbvs	ip, {r0, r2, r5, r6, r8, sl, ip, sp}^
 aa8:	00746867 	rsbseq	r6, r4, r7, ror #16
 aac:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
 ab0:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
 ab4:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 ab8:	6f62616c 	svcvs	0x0062616c
 abc:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 ac0:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 ac4:	5049442f 	subpl	r4, r9, pc, lsr #8
 ac8:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
 acc:	2f686374 	svccs	0x00686374
 ad0:	69662f43 	stmdbvs	r6!, {r0, r1, r6, r8, r9, sl, fp, sp}^
 ad4:	632e6572 			; <UNDEFINED> instruction: 0x632e6572
 ad8:	72696600 	rsbvc	r6, r9, #0, 12
 adc:	675f3365 	ldrbvs	r3, [pc, -r5, ror #6]
 ae0:	5f796172 	svcpl	0x00796172
 ae4:	73746962 	cmnvc	r4, #1605632	; 0x188000
 ae8:	73616c00 	cmnvc	r1, #0, 24
 aec:	67695274 			; <UNDEFINED> instruction: 0x67695274
 af0:	61567468 	cmpvs	r6, r8, ror #8
 af4:	0065756c 	rsbeq	r7, r5, ip, ror #10
 af8:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
 afc:	7466654c 	strbtvc	r6, [r6], #-1356	; 0xfffffab4
 b00:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
 b04:	3a430065 	bcc	10c0ca0 <startup-0x1ef3f360>
 b08:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 b0c:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; a58 <startup-0x1ffff5a8>
 b10:	616c706f 	cmnvs	ip, pc, rrx
 b14:	61726f62 	cmnvs	r2, r2, ror #30
 b18:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 b1c:	442f7265 	strtmi	r7, [pc], #-613	; b24 <startup-0x1ffff4dc>
 b20:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
 b24:	63746957 	cmnvs	r4, #1425408	; 0x15c000
 b28:	2f432f68 	svccs	0x00432f68
 b2c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 b30:	632e7265 			; <UNDEFINED> instruction: 0x632e7265
 b34:	616c7000 	cmnvs	ip, r0
 b38:	55726579 	ldrbpl	r6, [r2, #-1401]!	; 0xfffffa87
 b3c:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
 b40:	Address 0x00000b40 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000024 	andeq	r0, r0, r4, lsr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000034 	andcs	r0, r0, r4, lsr r0
  48:	00000164 	andeq	r0, r0, r4, ror #2
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	300e4101 	andcc	r4, lr, r1, lsl #2
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	00000020 	andeq	r0, r0, r0, lsr #32
  60:	00000000 	andeq	r0, r0, r0
  64:	20000198 	mulcs	r0, r8, r1
  68:	000001d4 	ldrdeq	r0, [r0], -r4
  6c:	400c0e41 	andmi	r0, ip, r1, asr #28
  70:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  74:	018e4002 	orreq	r4, lr, r2
  78:	02900e41 	addseq	r0, r0, #1040	; 0x410
  7c:	00070d41 	andeq	r0, r7, r1, asr #26
  80:	0000000c 	andeq	r0, r0, ip
  84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  88:	7c020001 	stcvc	0, cr0, [r2], {1}
  8c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000080 	andeq	r0, r0, r0, lsl #1
  98:	2000036c 	andcs	r0, r0, ip, ror #6
  9c:	00000028 	andeq	r0, r0, r8, lsr #32
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	180e4101 	stmdane	lr, {r0, r8, lr}
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	0000000c 	andeq	r0, r0, ip
  b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  b8:	7c020001 	stcvc	0, cr0, [r2], {1}
  bc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  c0:	00000018 	andeq	r0, r0, r8, lsl r0
  c4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
  c8:	20000394 	mulcs	r0, r4, r3
  cc:	00000044 	andeq	r0, r0, r4, asr #32
  d0:	40080e41 	andmi	r0, r8, r1, asr #28
  d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  dc:	00000018 	andeq	r0, r0, r8, lsl r0
  e0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
  e4:	200003d8 	ldrdcs	r0, [r0], -r8
  e8:	00000044 	andeq	r0, r0, r4, asr #32
  ec:	40080e41 	andmi	r0, r8, r1, asr #28
  f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 100:	2000041c 	andcs	r0, r0, ip, lsl r4
 104:	0000002c 	andeq	r0, r0, ip, lsr #32
 108:	40080e41 	andmi	r0, r8, r1, asr #28
 10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 110:	100e4101 	andne	r4, lr, r1, lsl #2
 114:	00070d41 	andeq	r0, r7, r1, asr #26
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 120:	20000448 	andcs	r0, r0, r8, asr #8
 124:	00000026 	andeq	r0, r0, r6, lsr #32
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	100e4101 	andne	r4, lr, r1, lsl #2
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 140:	2000046e 	andcs	r0, r0, lr, ror #8
 144:	00000032 	andeq	r0, r0, r2, lsr r0
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	180e4101 	stmdane	lr, {r0, r8, lr}
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	00000018 	andeq	r0, r0, r8, lsl r0
 15c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 160:	200004a0 	andcs	r0, r0, r0, lsr #9
 164:	00000018 	andeq	r0, r0, r8, lsl r0
 168:	40080e41 	andmi	r0, r8, r1, asr #28
 16c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 170:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 174:	00000018 	andeq	r0, r0, r8, lsl r0
 178:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 17c:	200004b8 			; <UNDEFINED> instruction: 0x200004b8
 180:	00000030 	andeq	r0, r0, r0, lsr r0
 184:	40080e41 	andmi	r0, r8, r1, asr #28
 188:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 18c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 198:	200004e8 	andcs	r0, r0, r8, ror #9
 19c:	00000050 	andeq	r0, r0, r0, asr r0
 1a0:	40080e41 	andmi	r0, r8, r1, asr #28
 1a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1ac:	00070d41 	andeq	r0, r7, r1, asr #26
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 1b8:	20000538 	andcs	r0, r0, r8, lsr r5
 1bc:	00000058 	andeq	r0, r0, r8, asr r0
 1c0:	40080e41 	andmi	r0, r8, r1, asr #28
 1c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1cc:	00070d41 	andeq	r0, r7, r1, asr #26
 1d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 1d8:	20000590 	mulcs	r0, r0, r5
 1dc:	00000066 	andeq	r0, r0, r6, rrx
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ec:	00070d41 	andeq	r0, r7, r1, asr #26
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 1f8:	200005f6 	strdcs	r0, [r0], -r6
 1fc:	0000006e 	andeq	r0, r0, lr, rrx
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	100e4101 	andne	r4, lr, r1, lsl #2
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	0000001c 	andeq	r0, r0, ip, lsl r0
 214:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 218:	20000664 	andcs	r0, r0, r4, ror #12
 21c:	00000094 	muleq	r0, r4, r0
 220:	40080e41 	andmi	r0, r8, r1, asr #28
 224:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 228:	180e4101 	stmdane	lr, {r0, r8, lr}
 22c:	00070d41 	andeq	r0, r7, r1, asr #26
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 238:	200006f8 	strdcs	r0, [r0], -r8
 23c:	0000002a 	andeq	r0, r0, sl, lsr #32
 240:	40080e41 	andmi	r0, r8, r1, asr #28
 244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 248:	100e4101 	andne	r4, lr, r1, lsl #2
 24c:	00070d41 	andeq	r0, r7, r1, asr #26
 250:	0000001c 	andeq	r0, r0, ip, lsl r0
 254:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 258:	20000722 	andcs	r0, r0, r2, lsr #14
 25c:	0000007e 	andeq	r0, r0, lr, ror r0
 260:	40080e41 	andmi	r0, r8, r1, asr #28
 264:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 268:	100e4101 	andne	r4, lr, r1, lsl #2
 26c:	00070d41 	andeq	r0, r7, r1, asr #26
 270:	0000001c 	andeq	r0, r0, ip, lsl r0
 274:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 278:	200007a0 	andcs	r0, r0, r0, lsr #15
 27c:	00000046 	andeq	r0, r0, r6, asr #32
 280:	40080e41 	andmi	r0, r8, r1, asr #28
 284:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 288:	100e4101 	andne	r4, lr, r1, lsl #2
 28c:	00070d41 	andeq	r0, r7, r1, asr #26
 290:	0000001c 	andeq	r0, r0, ip, lsl r0
 294:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 298:	200007e6 	andcs	r0, r0, r6, ror #15
 29c:	00000046 	andeq	r0, r0, r6, asr #32
 2a0:	40080e41 	andmi	r0, r8, r1, asr #28
 2a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a8:	100e4101 	andne	r4, lr, r1, lsl #2
 2ac:	00070d41 	andeq	r0, r7, r1, asr #26
 2b0:	00000018 	andeq	r0, r0, r8, lsl r0
 2b4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 2b8:	2000082c 	andcs	r0, r0, ip, lsr #16
 2bc:	0000006e 	andeq	r0, r0, lr, rrx
 2c0:	40080e41 	andmi	r0, r8, r1, asr #28
 2c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2c8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 2d4:	2000089a 	mulcs	r0, sl, r8
 2d8:	00000066 	andeq	r0, r0, r6, rrx
 2dc:	40080e41 	andmi	r0, r8, r1, asr #28
 2e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e4:	100e4101 	andne	r4, lr, r1, lsl #2
 2e8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 2f4:	20000900 	andcs	r0, r0, r0, lsl #18
 2f8:	00000180 	andeq	r0, r0, r0, lsl #3
 2fc:	40080e41 	andmi	r0, r8, r1, asr #28
 300:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 304:	200e4101 	andcs	r4, lr, r1, lsl #2
 308:	00070d41 	andeq	r0, r7, r1, asr #26
 30c:	0000001c 	andeq	r0, r0, ip, lsl r0
 310:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 314:	20000a80 	andcs	r0, r0, r0, lsl #21
 318:	000001a0 	andeq	r0, r0, r0, lsr #3
 31c:	40080e41 	andmi	r0, r8, r1, asr #28
 320:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 324:	280e4101 	stmdacs	lr, {r0, r8, lr}
 328:	00070d41 	andeq	r0, r7, r1, asr #26
 32c:	0000001c 	andeq	r0, r0, ip, lsl r0
 330:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 334:	20000c20 	andcs	r0, r0, r0, lsr #24
 338:	000000d6 	ldrdeq	r0, [r0], -r6
 33c:	40080e41 	andmi	r0, r8, r1, asr #28
 340:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 344:	200e4101 	andcs	r4, lr, r1, lsl #2
 348:	00070d41 	andeq	r0, r7, r1, asr #26
 34c:	00000024 	andeq	r0, r0, r4, lsr #32
 350:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 354:	20000cf6 	strdcs	r0, [r0], -r6
 358:	0000011a 	andeq	r0, r0, sl, lsl r1
 35c:	40100e41 	andsmi	r0, r0, r1, asr #28
 360:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 364:	02874003 	addeq	r4, r7, #3
 368:	41018e40 	tstmi	r1, r0, asr #28
 36c:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 370:	00000007 	andeq	r0, r0, r7
 374:	0000001c 	andeq	r0, r0, ip, lsl r0
 378:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 37c:	20000e10 	andcs	r0, r0, r0, lsl lr
 380:	00000052 	andeq	r0, r0, r2, asr r0
 384:	40080e41 	andmi	r0, r8, r1, asr #28
 388:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 38c:	200e4101 	andcs	r4, lr, r1, lsl #2
 390:	00070d41 	andeq	r0, r7, r1, asr #26
 394:	0000001c 	andeq	r0, r0, ip, lsl r0
 398:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 39c:	20000e62 	andcs	r0, r0, r2, ror #28
 3a0:	00000052 	andeq	r0, r0, r2, asr r0
 3a4:	40080e41 	andmi	r0, r8, r1, asr #28
 3a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3ac:	200e4101 	andcs	r4, lr, r1, lsl #2
 3b0:	00070d41 	andeq	r0, r7, r1, asr #26
 3b4:	00000020 	andeq	r0, r0, r0, lsr #32
 3b8:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 3bc:	20000eb4 			; <UNDEFINED> instruction: 0x20000eb4
 3c0:	00000130 	andeq	r0, r0, r0, lsr r1
 3c4:	400c0e41 	andmi	r0, ip, r1, asr #28
 3c8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 3cc:	018e4002 	orreq	r4, lr, r2
 3d0:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 3d4:	0000070d 	andeq	r0, r0, sp, lsl #14
 3d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3dc:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 3e0:	20000fe4 	andcs	r0, r0, r4, ror #31
 3e4:	00000108 	andeq	r0, r0, r8, lsl #2
 3e8:	40080e41 	andmi	r0, r8, r1, asr #28
 3ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3f0:	100e4101 	andne	r4, lr, r1, lsl #2
 3f4:	00070d41 	andeq	r0, r7, r1, asr #26
 3f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3fc:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 400:	200010ec 	andcs	r1, r0, ip, ror #1
 404:	00000082 	andeq	r0, r0, r2, lsl #1
 408:	40080e41 	andmi	r0, r8, r1, asr #28
 40c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 410:	200e4101 	andcs	r4, lr, r1, lsl #2
 414:	18070c41 	stmdane	r7, {r0, r6, sl, fp}
 418:	0000001c 	andeq	r0, r0, ip, lsl r0
 41c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 420:	2000116e 	andcs	r1, r0, lr, ror #2
 424:	0000006a 	andeq	r0, r0, sl, rrx
 428:	40080e41 	andmi	r0, r8, r1, asr #28
 42c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 430:	100e4101 	andne	r4, lr, r1, lsl #2
 434:	00070d41 	andeq	r0, r7, r1, asr #26
 438:	0000000c 	andeq	r0, r0, ip
 43c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 440:	7c020001 	stcvc	0, cr0, [r2], {1}
 444:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 448:	0000001c 	andeq	r0, r0, ip, lsl r0
 44c:	00000438 	andeq	r0, r0, r8, lsr r4
 450:	200011d8 	ldrdcs	r1, [r0], -r8
 454:	00000010 	andeq	r0, r0, r0, lsl r0
 458:	40080e41 	andmi	r0, r8, r1, asr #28
 45c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 460:	100e4101 	andne	r4, lr, r1, lsl #2
 464:	00070d41 	andeq	r0, r7, r1, asr #26
 468:	0000001c 	andeq	r0, r0, ip, lsl r0
 46c:	00000438 	andeq	r0, r0, r8, lsr r4
 470:	200011e8 	andcs	r1, r0, r8, ror #3
 474:	00000046 	andeq	r0, r0, r6, asr #32
 478:	40080e41 	andmi	r0, r8, r1, asr #28
 47c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 480:	100e4101 	andne	r4, lr, r1, lsl #2
 484:	00070d41 	andeq	r0, r7, r1, asr #26
 488:	0000000c 	andeq	r0, r0, ip
 48c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 490:	7c020001 	stcvc	0, cr0, [r2], {1}
 494:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 498:	00000018 	andeq	r0, r0, r8, lsl r0
 49c:	00000488 	andeq	r0, r0, r8, lsl #9
 4a0:	20001230 	andcs	r1, r0, r0, lsr r2
 4a4:	00000018 	andeq	r0, r0, r8, lsl r0
 4a8:	40080e41 	andmi	r0, r8, r1, asr #28
 4ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4b0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 4b4:	00000018 	andeq	r0, r0, r8, lsl r0
 4b8:	00000488 	andeq	r0, r0, r8, lsl #9
 4bc:	20001248 	andcs	r1, r0, r8, asr #4
 4c0:	00000014 	andeq	r0, r0, r4, lsl r0
 4c4:	40080e41 	andmi	r0, r8, r1, asr #28
 4c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4cc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 4d0:	00000020 	andeq	r0, r0, r0, lsr #32
 4d4:	00000488 	andeq	r0, r0, r8, lsl #9
 4d8:	2000125c 	andcs	r1, r0, ip, asr r2
 4dc:	00000034 	andeq	r0, r0, r4, lsr r0
 4e0:	400c0e41 	andmi	r0, ip, r1, asr #28
 4e4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 4e8:	018e4002 	orreq	r4, lr, r2
 4ec:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 4f0:	0000070d 	andeq	r0, r0, sp, lsl #14
 4f4:	0000000c 	andeq	r0, r0, ip
 4f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4fc:	7c020001 	stcvc	0, cr0, [r2], {1}
 500:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 504:	0000001c 	andeq	r0, r0, ip, lsl r0
 508:	000004f4 	strdeq	r0, [r0], -r4
 50c:	20001290 	mulcs	r0, r0, r2
 510:	00000028 	andeq	r0, r0, r8, lsr #32
 514:	40080e41 	andmi	r0, r8, r1, asr #28
 518:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 51c:	180e4101 	stmdane	lr, {r0, r8, lr}
 520:	00070d41 	andeq	r0, r7, r1, asr #26
 524:	0000000c 	andeq	r0, r0, ip
 528:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 52c:	7c020001 	stcvc	0, cr0, [r2], {1}
 530:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 534:	0000001c 	andeq	r0, r0, ip, lsl r0
 538:	00000524 	andeq	r0, r0, r4, lsr #10
 53c:	200012b8 			; <UNDEFINED> instruction: 0x200012b8
 540:	00000184 	andeq	r0, r0, r4, lsl #3
 544:	40080e41 	andmi	r0, r8, r1, asr #28
 548:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 54c:	380e4101 	stmdacc	lr, {r0, r8, lr}
 550:	00070d41 	andeq	r0, r7, r1, asr #26
 554:	00000020 	andeq	r0, r0, r0, lsr #32
 558:	00000524 	andeq	r0, r0, r4, lsr #10
 55c:	2000143c 	andcs	r1, r0, ip, lsr r4
 560:	00000124 	andeq	r0, r0, r4, lsr #2
 564:	400c0e41 	andmi	r0, ip, r1, asr #28
 568:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 56c:	018e4002 	orreq	r4, lr, r2
 570:	41180e41 	tstmi	r8, r1, asr #28
 574:	0000070d 	andeq	r0, r0, sp, lsl #14
 578:	0000000c 	andeq	r0, r0, ip
 57c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 580:	7c020001 	stcvc	0, cr0, [r2], {1}
 584:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 588:	0000001c 	andeq	r0, r0, ip, lsl r0
 58c:	00000578 	andeq	r0, r0, r8, ror r5
 590:	20001560 	andcs	r1, r0, r0, ror #10
 594:	000000d8 	ldrdeq	r0, [r0], -r8
 598:	40080e41 	andmi	r0, r8, r1, asr #28
 59c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5a0:	100e4101 	andne	r4, lr, r1, lsl #2
 5a4:	00070d41 	andeq	r0, r7, r1, asr #26
 5a8:	0000000c 	andeq	r0, r0, ip
 5ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 5b0:	7c010001 	stcvc	0, cr0, [r1], {1}
 5b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5b8:	0000000c 	andeq	r0, r0, ip
 5bc:	000005a8 	andeq	r0, r0, r8, lsr #11
 5c0:	20001639 	andcs	r1, r0, r9, lsr r6
 5c4:	000001cc 	andeq	r0, r0, ip, asr #3
