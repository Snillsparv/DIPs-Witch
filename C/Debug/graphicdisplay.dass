
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#endif
}

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f8fa 	bl	200001fc <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:
void init_app( void ) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*portModer = 0x55555555;
20000014:	4b05      	ldr	r3, [pc, #20]	; (2000002c <init_app+0x1c>)
20000016:	4a06      	ldr	r2, [pc, #24]	; (20000030 <init_app+0x20>)
20000018:	601a      	str	r2, [r3, #0]
	set_up_DIL();
2000001a:	f002 fa33 	bl	20002484 <set_up_DIL>
	graphic_initialize();
2000001e:	f001 fd33 	bl	20001a88 <graphic_initialize>
	graphic_clear_screen();
20000022:	f001 fd68 	bl	20001af6 <graphic_clear_screen>
}
20000026:	46c0      	nop			; (mov r8, r8)
20000028:	46bd      	mov	sp, r7
2000002a:	bd80      	pop	{r7, pc}
2000002c:	40021000 	andmi	r1, r2, r0
20000030:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000034 <initSprites>:
sprite tempTitleLight;
sprite tempPressBlack;
sprite tempPressGray;
sprite tempPressLight;

void initSprites( void ) {
20000034:	b580      	push	{r7, lr}
20000036:	b08a      	sub	sp, #40	; 0x28
20000038:	af00      	add	r7, sp, #0
	sprite *monsterPointer = &tempMonster;
2000003a:	4b49      	ldr	r3, [pc, #292]	; (20000160 <initSprites+0x12c>)
2000003c:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(monsterPointer, monster_black_bits, monster_black_width, monster_black_height);
2000003e:	4949      	ldr	r1, [pc, #292]	; (20000164 <initSprites+0x130>)
20000040:	6a78      	ldr	r0, [r7, #36]	; 0x24
20000042:	231e      	movs	r3, #30
20000044:	221e      	movs	r2, #30
20000046:	f002 fa09 	bl	2000245c <load_sprite>
	monster = monsterPointer;
2000004a:	4b47      	ldr	r3, [pc, #284]	; (20000168 <initSprites+0x134>)
2000004c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000004e:	601a      	str	r2, [r3, #0]
	
	sprite *monsterPointer2 = &tempMonsterLight;
20000050:	4b46      	ldr	r3, [pc, #280]	; (2000016c <initSprites+0x138>)
20000052:	623b      	str	r3, [r7, #32]
	load_sprite(monsterPointer2, monster_light_bits, monster_light_width, monster_light_height);
20000054:	4946      	ldr	r1, [pc, #280]	; (20000170 <initSprites+0x13c>)
20000056:	6a38      	ldr	r0, [r7, #32]
20000058:	231e      	movs	r3, #30
2000005a:	221e      	movs	r2, #30
2000005c:	f002 f9fe 	bl	2000245c <load_sprite>
	monsterLight = monsterPointer2;
20000060:	4b44      	ldr	r3, [pc, #272]	; (20000174 <initSprites+0x140>)
20000062:	6a3a      	ldr	r2, [r7, #32]
20000064:	601a      	str	r2, [r3, #0]

	sprite *monsterPointer3 = &tempMonsterGray;
20000066:	4b44      	ldr	r3, [pc, #272]	; (20000178 <initSprites+0x144>)
20000068:	61fb      	str	r3, [r7, #28]
	load_sprite(monsterPointer3, monster_gray_bits, monster_gray_width, monster_gray_height);
2000006a:	4944      	ldr	r1, [pc, #272]	; (2000017c <initSprites+0x148>)
2000006c:	69f8      	ldr	r0, [r7, #28]
2000006e:	231e      	movs	r3, #30
20000070:	221e      	movs	r2, #30
20000072:	f002 f9f3 	bl	2000245c <load_sprite>
	monsterGray = monsterPointer3;
20000076:	4b42      	ldr	r3, [pc, #264]	; (20000180 <initSprites+0x14c>)
20000078:	69fa      	ldr	r2, [r7, #28]
2000007a:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempBg;
2000007c:	4b41      	ldr	r3, [pc, #260]	; (20000184 <initSprites+0x150>)
2000007e:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer4, bg_bits, bg_width, bg_height);
20000080:	4941      	ldr	r1, [pc, #260]	; (20000188 <initSprites+0x154>)
20000082:	69b8      	ldr	r0, [r7, #24]
20000084:	2340      	movs	r3, #64	; 0x40
20000086:	2280      	movs	r2, #128	; 0x80
20000088:	f002 f9e8 	bl	2000245c <load_sprite>
	bg = pointer4;
2000008c:	4b3f      	ldr	r3, [pc, #252]	; (2000018c <initSprites+0x158>)
2000008e:	69ba      	ldr	r2, [r7, #24]
20000090:	601a      	str	r2, [r3, #0]
	
	sprite *pointer5 = &tempCastleBlack;
20000092:	4b3f      	ldr	r3, [pc, #252]	; (20000190 <initSprites+0x15c>)
20000094:	617b      	str	r3, [r7, #20]
	load_sprite(pointer5, castle_black_bits, castle_black_width, castle_black_height);
20000096:	493f      	ldr	r1, [pc, #252]	; (20000194 <initSprites+0x160>)
20000098:	6978      	ldr	r0, [r7, #20]
2000009a:	2340      	movs	r3, #64	; 0x40
2000009c:	2280      	movs	r2, #128	; 0x80
2000009e:	f002 f9dd 	bl	2000245c <load_sprite>
	castleBlack = pointer5;
200000a2:	4b3d      	ldr	r3, [pc, #244]	; (20000198 <initSprites+0x164>)
200000a4:	697a      	ldr	r2, [r7, #20]
200000a6:	601a      	str	r2, [r3, #0]
	
	sprite *pointer6 = &tempCastleGray;
200000a8:	4b3c      	ldr	r3, [pc, #240]	; (2000019c <initSprites+0x168>)
200000aa:	613b      	str	r3, [r7, #16]
	load_sprite(pointer6, castle_gray_bits, castle_black_width, castle_black_height);
200000ac:	493c      	ldr	r1, [pc, #240]	; (200001a0 <initSprites+0x16c>)
200000ae:	6938      	ldr	r0, [r7, #16]
200000b0:	2340      	movs	r3, #64	; 0x40
200000b2:	2280      	movs	r2, #128	; 0x80
200000b4:	f002 f9d2 	bl	2000245c <load_sprite>
	castleGray = pointer6;
200000b8:	4b3a      	ldr	r3, [pc, #232]	; (200001a4 <initSprites+0x170>)
200000ba:	693a      	ldr	r2, [r7, #16]
200000bc:	601a      	str	r2, [r3, #0]
	
	sprite *pointer7 = &tempCastleLight;
200000be:	4b3a      	ldr	r3, [pc, #232]	; (200001a8 <initSprites+0x174>)
200000c0:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer7, castle_light_bits, castle_black_width, castle_black_height);
200000c2:	493a      	ldr	r1, [pc, #232]	; (200001ac <initSprites+0x178>)
200000c4:	68f8      	ldr	r0, [r7, #12]
200000c6:	2340      	movs	r3, #64	; 0x40
200000c8:	2280      	movs	r2, #128	; 0x80
200000ca:	f002 f9c7 	bl	2000245c <load_sprite>
	castleLight = pointer7;
200000ce:	4b38      	ldr	r3, [pc, #224]	; (200001b0 <initSprites+0x17c>)
200000d0:	68fa      	ldr	r2, [r7, #12]
200000d2:	601a      	str	r2, [r3, #0]
	
	sprite *pointer8 = &tempTitleLight;
200000d4:	4b37      	ldr	r3, [pc, #220]	; (200001b4 <initSprites+0x180>)
200000d6:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer8, title_light_bits, title_black_width, title_black_height);
200000d8:	4937      	ldr	r1, [pc, #220]	; (200001b8 <initSprites+0x184>)
200000da:	68b8      	ldr	r0, [r7, #8]
200000dc:	231e      	movs	r3, #30
200000de:	2232      	movs	r2, #50	; 0x32
200000e0:	f002 f9bc 	bl	2000245c <load_sprite>
	titleLight = pointer8;
200000e4:	4b35      	ldr	r3, [pc, #212]	; (200001bc <initSprites+0x188>)
200000e6:	68ba      	ldr	r2, [r7, #8]
200000e8:	601a      	str	r2, [r3, #0]
	sprite *pointer9 = &tempTitleGray;
200000ea:	4b35      	ldr	r3, [pc, #212]	; (200001c0 <initSprites+0x18c>)
200000ec:	607b      	str	r3, [r7, #4]
	load_sprite(pointer9, title_gray_bits, title_black_width, title_black_height);
200000ee:	4935      	ldr	r1, [pc, #212]	; (200001c4 <initSprites+0x190>)
200000f0:	6878      	ldr	r0, [r7, #4]
200000f2:	231e      	movs	r3, #30
200000f4:	2232      	movs	r2, #50	; 0x32
200000f6:	f002 f9b1 	bl	2000245c <load_sprite>
	titleGray = pointer9;
200000fa:	4b33      	ldr	r3, [pc, #204]	; (200001c8 <initSprites+0x194>)
200000fc:	687a      	ldr	r2, [r7, #4]
200000fe:	601a      	str	r2, [r3, #0]
	sprite *pointer10 = &tempTitleBlack;
20000100:	4b32      	ldr	r3, [pc, #200]	; (200001cc <initSprites+0x198>)
20000102:	603b      	str	r3, [r7, #0]
	load_sprite(pointer10, title_black_bits, title_black_width, title_black_height);
20000104:	4932      	ldr	r1, [pc, #200]	; (200001d0 <initSprites+0x19c>)
20000106:	6838      	ldr	r0, [r7, #0]
20000108:	231e      	movs	r3, #30
2000010a:	2232      	movs	r2, #50	; 0x32
2000010c:	f002 f9a6 	bl	2000245c <load_sprite>
	titleBlack = pointer10;	
20000110:	4b30      	ldr	r3, [pc, #192]	; (200001d4 <initSprites+0x1a0>)
20000112:	683a      	ldr	r2, [r7, #0]
20000114:	601a      	str	r2, [r3, #0]
	
	pointer8 = &tempPressLight;
20000116:	4b30      	ldr	r3, [pc, #192]	; (200001d8 <initSprites+0x1a4>)
20000118:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer8, press_light_bits, press_black_width, press_black_height);
2000011a:	4930      	ldr	r1, [pc, #192]	; (200001dc <initSprites+0x1a8>)
2000011c:	68b8      	ldr	r0, [r7, #8]
2000011e:	2323      	movs	r3, #35	; 0x23
20000120:	223c      	movs	r2, #60	; 0x3c
20000122:	f002 f99b 	bl	2000245c <load_sprite>
	pressLight = pointer8;
20000126:	4b2e      	ldr	r3, [pc, #184]	; (200001e0 <initSprites+0x1ac>)
20000128:	68ba      	ldr	r2, [r7, #8]
2000012a:	601a      	str	r2, [r3, #0]
	pointer9 = &tempPressGray;
2000012c:	4b2d      	ldr	r3, [pc, #180]	; (200001e4 <initSprites+0x1b0>)
2000012e:	607b      	str	r3, [r7, #4]
	load_sprite(pointer9, press_gray_bits, press_black_width, press_black_height);
20000130:	492d      	ldr	r1, [pc, #180]	; (200001e8 <initSprites+0x1b4>)
20000132:	6878      	ldr	r0, [r7, #4]
20000134:	2323      	movs	r3, #35	; 0x23
20000136:	223c      	movs	r2, #60	; 0x3c
20000138:	f002 f990 	bl	2000245c <load_sprite>
	pressGray = pointer9;
2000013c:	4b2b      	ldr	r3, [pc, #172]	; (200001ec <initSprites+0x1b8>)
2000013e:	687a      	ldr	r2, [r7, #4]
20000140:	601a      	str	r2, [r3, #0]
	pointer10 = &tempPressBlack;
20000142:	4b2b      	ldr	r3, [pc, #172]	; (200001f0 <initSprites+0x1bc>)
20000144:	603b      	str	r3, [r7, #0]
	load_sprite(pointer10, press_black_bits, press_black_width, press_black_height);
20000146:	492b      	ldr	r1, [pc, #172]	; (200001f4 <initSprites+0x1c0>)
20000148:	6838      	ldr	r0, [r7, #0]
2000014a:	2323      	movs	r3, #35	; 0x23
2000014c:	223c      	movs	r2, #60	; 0x3c
2000014e:	f002 f985 	bl	2000245c <load_sprite>
	pressBlack = pointer10;	
20000152:	4b29      	ldr	r3, [pc, #164]	; (200001f8 <initSprites+0x1c4>)
20000154:	683a      	ldr	r2, [r7, #0]
20000156:	601a      	str	r2, [r3, #0]
	
	
}
20000158:	46c0      	nop			; (mov r8, r8)
2000015a:	46bd      	mov	sp, r7
2000015c:	b00a      	add	sp, #40	; 0x28
2000015e:	bd80      	pop	{r7, pc}
20000160:	20002e80 	andcs	r2, r0, r0, lsl #29
20000164:	20005194 	mulcs	r0, r4, r1
20000168:	20002e54 	andcs	r2, r0, r4, asr lr
2000016c:	20002ed8 	ldrdcs	r2, [r0], -r8
20000170:	2000520c 	andcs	r5, r0, ip, lsl #4
20000174:	20002f00 	andcs	r2, r0, r0, lsl #30
20000178:	20002ea0 	andcs	r2, r0, r0, lsr #29
2000017c:	20005284 	andcs	r5, r0, r4, lsl #5
20000180:	20002f14 	andcs	r2, r0, r4, lsl pc
20000184:	20002f18 	andcs	r2, r0, r8, lsl pc
20000188:	200064c0 	andcs	r6, r0, r0, asr #9
2000018c:	20002e9c 	mulcs	r0, ip, lr
20000190:	20002e58 	andcs	r2, r0, r8, asr lr
20000194:	20005644 	andcs	r5, r0, r4, asr #12
20000198:	20002e7c 	andcs	r2, r0, ip, ror lr
2000019c:	20002ef4 	strdcs	r2, [r0], -r4
200001a0:	20005a44 	andcs	r5, r0, r4, asr #20
200001a4:	20002f08 	andcs	r2, r0, r8, lsl #30
200001a8:	20002ec8 	andcs	r2, r0, r8, asr #29
200001ac:	20005e44 	andcs	r5, r0, r4, asr #28
200001b0:	20002eb8 			; <UNDEFINED> instruction: 0x20002eb8
200001b4:	20002eac 	andcs	r2, r0, ip, lsr #29
200001b8:	20006244 	andcs	r6, r0, r4, asr #4
200001bc:	20002f04 	andcs	r2, r0, r4, lsl #30
200001c0:	20002e70 	andcs	r2, r0, r0, ror lr
200001c4:	20006318 	andcs	r6, r0, r8, lsl r3
200001c8:	20002ef0 	strdcs	r2, [r0], -r0
200001cc:	20002e90 	mulcs	r0, r0, lr
200001d0:	200063ec 	andcs	r6, r0, ip, ror #7
200001d4:	20002f24 	andcs	r2, r0, r4, lsr #30
200001d8:	20002ebc 			; <UNDEFINED> instruction: 0x20002ebc
200001dc:	20005414 	andcs	r5, r0, r4, lsl r4
200001e0:	20002e8c 	andcs	r2, r0, ip, lsl #29
200001e4:	20002e64 	andcs	r2, r0, r4, ror #28
200001e8:	2000552c 	andcs	r5, r0, ip, lsr #10
200001ec:	20002ed4 	ldrdcs	r2, [r0], -r4
200001f0:	20002ee4 	andcs	r2, r0, r4, ror #29
200001f4:	200052fc 	strdcs	r5, [r0], -ip
200001f8:	20002f10 	andcs	r2, r0, r0, lsl pc

200001fc <main>:
	
int counter = 0;
int current_screen = START_SCREEN;
void main(void)
{
200001fc:	b590      	push	{r4, r7, lr}
200001fe:	4cfe      	ldr	r4, [pc, #1016]	; (200005f8 <main+0x3fc>)
20000200:	44a5      	add	sp, r4
20000202:	af00      	add	r7, sp, #0
 * 2. Draw it with method above.
 * 3. Show frame with some long fram_length for testing.
 * 
 * */
	
	init_app();	
20000204:	f7ff ff04 	bl	20000010 <init_app>
	initSprites();
20000208:	f7ff ff14 	bl	20000034 <initSprites>
	
	GameObject monsterObj;
	Image monsterImage;
	Image monsterImages[] = {monsterImage};
2000020c:	23b7      	movs	r3, #183	; 0xb7
2000020e:	009b      	lsls	r3, r3, #2
20000210:	18fb      	adds	r3, r7, r3
20000212:	22ba      	movs	r2, #186	; 0xba
20000214:	0092      	lsls	r2, r2, #2
20000216:	18ba      	adds	r2, r7, r2
20000218:	ca13      	ldmia	r2!, {r0, r1, r4}
2000021a:	c313      	stmia	r3!, {r0, r1, r4}
	monsterObj.images = monsterImages;
2000021c:	23bd      	movs	r3, #189	; 0xbd
2000021e:	009b      	lsls	r3, r3, #2
20000220:	18fb      	adds	r3, r7, r3
20000222:	22b7      	movs	r2, #183	; 0xb7
20000224:	0092      	lsls	r2, r2, #2
20000226:	18ba      	adds	r2, r7, r2
20000228:	601a      	str	r2, [r3, #0]
	load_image(&monsterObj.images[0], monster, monsterGray, monsterLight);
2000022a:	23bd      	movs	r3, #189	; 0xbd
2000022c:	009b      	lsls	r3, r3, #2
2000022e:	18fb      	adds	r3, r7, r3
20000230:	6818      	ldr	r0, [r3, #0]
20000232:	4bf2      	ldr	r3, [pc, #968]	; (200005fc <main+0x400>)
20000234:	6819      	ldr	r1, [r3, #0]
20000236:	4bf2      	ldr	r3, [pc, #968]	; (20000600 <main+0x404>)
20000238:	681a      	ldr	r2, [r3, #0]
2000023a:	4bf2      	ldr	r3, [pc, #968]	; (20000604 <main+0x408>)
2000023c:	681b      	ldr	r3, [r3, #0]
2000023e:	f002 f8f9 	bl	20002434 <load_image>
	monsterObj.xPos = 30;
20000242:	23bd      	movs	r3, #189	; 0xbd
20000244:	009b      	lsls	r3, r3, #2
20000246:	18fb      	adds	r3, r7, r3
20000248:	221e      	movs	r2, #30
2000024a:	605a      	str	r2, [r3, #4]
	monsterObj.yPos = 4;
2000024c:	23bd      	movs	r3, #189	; 0xbd
2000024e:	009b      	lsls	r3, r3, #2
20000250:	18fb      	adds	r3, r7, r3
20000252:	2204      	movs	r2, #4
20000254:	609a      	str	r2, [r3, #8]
	monsterObj.current_frame = 0;
20000256:	23bd      	movs	r3, #189	; 0xbd
20000258:	009b      	lsls	r3, r3, #2
2000025a:	18fb      	adds	r3, r7, r3
2000025c:	2200      	movs	r2, #0
2000025e:	615a      	str	r2, [r3, #20]
	monsterObj.update = playerUpdate;
20000260:	23bd      	movs	r3, #189	; 0xbd
20000262:	009b      	lsls	r3, r3, #2
20000264:	18fb      	adds	r3, r7, r3
20000266:	4ae8      	ldr	r2, [pc, #928]	; (20000608 <main+0x40c>)
20000268:	60da      	str	r2, [r3, #12]
	
	GameObject titleObj;
	Image titleImage;
	Image titleImages[] = {titleImage};
2000026a:	23a8      	movs	r3, #168	; 0xa8
2000026c:	009b      	lsls	r3, r3, #2
2000026e:	18fb      	adds	r3, r7, r3
20000270:	22ab      	movs	r2, #171	; 0xab
20000272:	0092      	lsls	r2, r2, #2
20000274:	18ba      	adds	r2, r7, r2
20000276:	ca13      	ldmia	r2!, {r0, r1, r4}
20000278:	c313      	stmia	r3!, {r0, r1, r4}
	titleObj.images = titleImages;
2000027a:	23ae      	movs	r3, #174	; 0xae
2000027c:	009b      	lsls	r3, r3, #2
2000027e:	18fb      	adds	r3, r7, r3
20000280:	22a8      	movs	r2, #168	; 0xa8
20000282:	0092      	lsls	r2, r2, #2
20000284:	18ba      	adds	r2, r7, r2
20000286:	601a      	str	r2, [r3, #0]
	load_image(&titleObj.images[0], titleBlack, titleGray, titleLight);
20000288:	23ae      	movs	r3, #174	; 0xae
2000028a:	009b      	lsls	r3, r3, #2
2000028c:	18fb      	adds	r3, r7, r3
2000028e:	6818      	ldr	r0, [r3, #0]
20000290:	4bde      	ldr	r3, [pc, #888]	; (2000060c <main+0x410>)
20000292:	6819      	ldr	r1, [r3, #0]
20000294:	4bde      	ldr	r3, [pc, #888]	; (20000610 <main+0x414>)
20000296:	681a      	ldr	r2, [r3, #0]
20000298:	4bde      	ldr	r3, [pc, #888]	; (20000614 <main+0x418>)
2000029a:	681b      	ldr	r3, [r3, #0]
2000029c:	f002 f8ca 	bl	20002434 <load_image>
	titleObj.xPos = 1;
200002a0:	23ae      	movs	r3, #174	; 0xae
200002a2:	009b      	lsls	r3, r3, #2
200002a4:	18fb      	adds	r3, r7, r3
200002a6:	2201      	movs	r2, #1
200002a8:	605a      	str	r2, [r3, #4]
	titleObj.yPos = -40;
200002aa:	23ae      	movs	r3, #174	; 0xae
200002ac:	009b      	lsls	r3, r3, #2
200002ae:	18fb      	adds	r3, r7, r3
200002b0:	2228      	movs	r2, #40	; 0x28
200002b2:	4252      	negs	r2, r2
200002b4:	609a      	str	r2, [r3, #8]
	titleObj.current_frame = 0;
200002b6:	23ae      	movs	r3, #174	; 0xae
200002b8:	009b      	lsls	r3, r3, #2
200002ba:	18fb      	adds	r3, r7, r3
200002bc:	2200      	movs	r2, #0
200002be:	615a      	str	r2, [r3, #20]
	
	GameObject pressObj;
	Image pressImage;
	Image pressImages[] = {pressImage};
200002c0:	2399      	movs	r3, #153	; 0x99
200002c2:	009b      	lsls	r3, r3, #2
200002c4:	18fb      	adds	r3, r7, r3
200002c6:	229c      	movs	r2, #156	; 0x9c
200002c8:	0092      	lsls	r2, r2, #2
200002ca:	18ba      	adds	r2, r7, r2
200002cc:	ca13      	ldmia	r2!, {r0, r1, r4}
200002ce:	c313      	stmia	r3!, {r0, r1, r4}
	pressObj.images = pressImages;
200002d0:	239f      	movs	r3, #159	; 0x9f
200002d2:	009b      	lsls	r3, r3, #2
200002d4:	18fb      	adds	r3, r7, r3
200002d6:	2299      	movs	r2, #153	; 0x99
200002d8:	0092      	lsls	r2, r2, #2
200002da:	18ba      	adds	r2, r7, r2
200002dc:	601a      	str	r2, [r3, #0]
	load_image(&pressObj.images[0], pressBlack, pressLight, pressGray);
200002de:	239f      	movs	r3, #159	; 0x9f
200002e0:	009b      	lsls	r3, r3, #2
200002e2:	18fb      	adds	r3, r7, r3
200002e4:	6818      	ldr	r0, [r3, #0]
200002e6:	4bcc      	ldr	r3, [pc, #816]	; (20000618 <main+0x41c>)
200002e8:	6819      	ldr	r1, [r3, #0]
200002ea:	4bcc      	ldr	r3, [pc, #816]	; (2000061c <main+0x420>)
200002ec:	681a      	ldr	r2, [r3, #0]
200002ee:	4bcc      	ldr	r3, [pc, #816]	; (20000620 <main+0x424>)
200002f0:	681b      	ldr	r3, [r3, #0]
200002f2:	f002 f89f 	bl	20002434 <load_image>
	pressObj.xPos = 65-30;
200002f6:	239f      	movs	r3, #159	; 0x9f
200002f8:	009b      	lsls	r3, r3, #2
200002fa:	18fb      	adds	r3, r7, r3
200002fc:	2223      	movs	r2, #35	; 0x23
200002fe:	605a      	str	r2, [r3, #4]
	pressObj.yPos = 29-15;
20000300:	239f      	movs	r3, #159	; 0x9f
20000302:	009b      	lsls	r3, r3, #2
20000304:	18fb      	adds	r3, r7, r3
20000306:	220e      	movs	r2, #14
20000308:	609a      	str	r2, [r3, #8]
	pressObj.current_frame = 0;
2000030a:	239f      	movs	r3, #159	; 0x9f
2000030c:	009b      	lsls	r3, r3, #2
2000030e:	18fb      	adds	r3, r7, r3
20000310:	2200      	movs	r2, #0
20000312:	615a      	str	r2, [r3, #20]
	
	GameObject castleObj;
	Image castleImage;
	Image castleImages[] = {castleImage};
20000314:	238a      	movs	r3, #138	; 0x8a
20000316:	009b      	lsls	r3, r3, #2
20000318:	18fb      	adds	r3, r7, r3
2000031a:	228d      	movs	r2, #141	; 0x8d
2000031c:	0092      	lsls	r2, r2, #2
2000031e:	18ba      	adds	r2, r7, r2
20000320:	ca13      	ldmia	r2!, {r0, r1, r4}
20000322:	c313      	stmia	r3!, {r0, r1, r4}
	castleObj.images = castleImages;
20000324:	2390      	movs	r3, #144	; 0x90
20000326:	009b      	lsls	r3, r3, #2
20000328:	18fb      	adds	r3, r7, r3
2000032a:	228a      	movs	r2, #138	; 0x8a
2000032c:	0092      	lsls	r2, r2, #2
2000032e:	18ba      	adds	r2, r7, r2
20000330:	601a      	str	r2, [r3, #0]
	load_image(&castleObj.images[0], castleBlack, castleGray, castleLight);
20000332:	2390      	movs	r3, #144	; 0x90
20000334:	009b      	lsls	r3, r3, #2
20000336:	18fb      	adds	r3, r7, r3
20000338:	6818      	ldr	r0, [r3, #0]
2000033a:	4bba      	ldr	r3, [pc, #744]	; (20000624 <main+0x428>)
2000033c:	6819      	ldr	r1, [r3, #0]
2000033e:	4bba      	ldr	r3, [pc, #744]	; (20000628 <main+0x42c>)
20000340:	681a      	ldr	r2, [r3, #0]
20000342:	4bba      	ldr	r3, [pc, #744]	; (2000062c <main+0x430>)
20000344:	681b      	ldr	r3, [r3, #0]
20000346:	f002 f875 	bl	20002434 <load_image>
	castleObj.xPos = 1;
2000034a:	2390      	movs	r3, #144	; 0x90
2000034c:	009b      	lsls	r3, r3, #2
2000034e:	18fb      	adds	r3, r7, r3
20000350:	2201      	movs	r2, #1
20000352:	605a      	str	r2, [r3, #4]
	castleObj.yPos = 1;
20000354:	2390      	movs	r3, #144	; 0x90
20000356:	009b      	lsls	r3, r3, #2
20000358:	18fb      	adds	r3, r7, r3
2000035a:	2201      	movs	r2, #1
2000035c:	609a      	str	r2, [r3, #8]
	castleObj.current_frame = 0;
2000035e:	2390      	movs	r3, #144	; 0x90
20000360:	009b      	lsls	r3, r3, #2
20000362:	18fb      	adds	r3, r7, r3
20000364:	2200      	movs	r2, #0
20000366:	615a      	str	r2, [r3, #20]
	
	GameObject indoors;
	init_indoors( &indoors );
20000368:	2381      	movs	r3, #129	; 0x81
2000036a:	009b      	lsls	r3, r3, #2
2000036c:	18fb      	adds	r3, r7, r3
2000036e:	0018      	movs	r0, r3
20000370:	f002 fbcc 	bl	20002b0c <init_indoors>
	indoors.xPos = 1;
20000374:	4bae      	ldr	r3, [pc, #696]	; (20000630 <main+0x434>)
20000376:	22c6      	movs	r2, #198	; 0xc6
20000378:	0092      	lsls	r2, r2, #2
2000037a:	4694      	mov	ip, r2
2000037c:	44bc      	add	ip, r7
2000037e:	4463      	add	r3, ip
20000380:	2201      	movs	r2, #1
20000382:	605a      	str	r2, [r3, #4]
	indoors.yPos = 1;
20000384:	4baa      	ldr	r3, [pc, #680]	; (20000630 <main+0x434>)
20000386:	22c6      	movs	r2, #198	; 0xc6
20000388:	0092      	lsls	r2, r2, #2
2000038a:	4694      	mov	ip, r2
2000038c:	44bc      	add	ip, r7
2000038e:	4463      	add	r3, ip
20000390:	2201      	movs	r2, #1
20000392:	609a      	str	r2, [r3, #8]
	
	GameObject indoors2;
	init_indoors2( &indoors2 );
20000394:	23f0      	movs	r3, #240	; 0xf0
20000396:	005b      	lsls	r3, r3, #1
20000398:	18fb      	adds	r3, r7, r3
2000039a:	0018      	movs	r0, r3
2000039c:	f002 fc2a 	bl	20002bf4 <init_indoors2>
	indoors2.xPos = 1;
200003a0:	4ba4      	ldr	r3, [pc, #656]	; (20000634 <main+0x438>)
200003a2:	22c6      	movs	r2, #198	; 0xc6
200003a4:	0092      	lsls	r2, r2, #2
200003a6:	4694      	mov	ip, r2
200003a8:	44bc      	add	ip, r7
200003aa:	4463      	add	r3, ip
200003ac:	2201      	movs	r2, #1
200003ae:	605a      	str	r2, [r3, #4]
	indoors2.yPos = 1;
200003b0:	4ba0      	ldr	r3, [pc, #640]	; (20000634 <main+0x438>)
200003b2:	22c6      	movs	r2, #198	; 0xc6
200003b4:	0092      	lsls	r2, r2, #2
200003b6:	4694      	mov	ip, r2
200003b8:	44bc      	add	ip, r7
200003ba:	4463      	add	r3, ip
200003bc:	2201      	movs	r2, #1
200003be:	609a      	str	r2, [r3, #8]
	
	GameObject bird;
	init_bird( &bird );
200003c0:	23de      	movs	r3, #222	; 0xde
200003c2:	005b      	lsls	r3, r3, #1
200003c4:	18fb      	adds	r3, r7, r3
200003c6:	0018      	movs	r0, r3
200003c8:	f000 ff4a 	bl	20001260 <init_bird>
	bird.xPos = 180;
200003cc:	4b9a      	ldr	r3, [pc, #616]	; (20000638 <main+0x43c>)
200003ce:	22c6      	movs	r2, #198	; 0xc6
200003d0:	0092      	lsls	r2, r2, #2
200003d2:	4694      	mov	ip, r2
200003d4:	44bc      	add	ip, r7
200003d6:	4463      	add	r3, ip
200003d8:	22b4      	movs	r2, #180	; 0xb4
200003da:	605a      	str	r2, [r3, #4]
	bird.yPos = 40;
200003dc:	4b96      	ldr	r3, [pc, #600]	; (20000638 <main+0x43c>)
200003de:	22c6      	movs	r2, #198	; 0xc6
200003e0:	0092      	lsls	r2, r2, #2
200003e2:	4694      	mov	ip, r2
200003e4:	44bc      	add	ip, r7
200003e6:	4463      	add	r3, ip
200003e8:	2228      	movs	r2, #40	; 0x28
200003ea:	609a      	str	r2, [r3, #8]
	bird.update = gameObjectUpdate;
200003ec:	4b92      	ldr	r3, [pc, #584]	; (20000638 <main+0x43c>)
200003ee:	22c6      	movs	r2, #198	; 0xc6
200003f0:	0092      	lsls	r2, r2, #2
200003f2:	4694      	mov	ip, r2
200003f4:	44bc      	add	ip, r7
200003f6:	4463      	add	r3, ip
200003f8:	4a90      	ldr	r2, [pc, #576]	; (2000063c <main+0x440>)
200003fa:	60da      	str	r2, [r3, #12]
	
	GameObject player;
	init_witch( &player );
200003fc:	23cc      	movs	r3, #204	; 0xcc
200003fe:	005b      	lsls	r3, r3, #1
20000400:	18fb      	adds	r3, r7, r3
20000402:	0018      	movs	r0, r3
20000404:	f001 f878 	bl	200014f8 <init_witch>
	player.xPos = 1;
20000408:	4b8d      	ldr	r3, [pc, #564]	; (20000640 <main+0x444>)
2000040a:	22c6      	movs	r2, #198	; 0xc6
2000040c:	0092      	lsls	r2, r2, #2
2000040e:	4694      	mov	ip, r2
20000410:	44bc      	add	ip, r7
20000412:	4463      	add	r3, ip
20000414:	2201      	movs	r2, #1
20000416:	605a      	str	r2, [r3, #4]
	player.yPos = 64-18;
20000418:	4b89      	ldr	r3, [pc, #548]	; (20000640 <main+0x444>)
2000041a:	22c6      	movs	r2, #198	; 0xc6
2000041c:	0092      	lsls	r2, r2, #2
2000041e:	4694      	mov	ip, r2
20000420:	44bc      	add	ip, r7
20000422:	4463      	add	r3, ip
20000424:	222e      	movs	r2, #46	; 0x2e
20000426:	609a      	str	r2, [r3, #8]
	player.update = playerUpdate;
20000428:	4b85      	ldr	r3, [pc, #532]	; (20000640 <main+0x444>)
2000042a:	22c6      	movs	r2, #198	; 0xc6
2000042c:	0092      	lsls	r2, r2, #2
2000042e:	4694      	mov	ip, r2
20000430:	44bc      	add	ip, r7
20000432:	4463      	add	r3, ip
20000434:	4a74      	ldr	r2, [pc, #464]	; (20000608 <main+0x40c>)
20000436:	60da      	str	r2, [r3, #12]
	
	GameObject fire2;
	init_fire( &fire2 );
20000438:	23ba      	movs	r3, #186	; 0xba
2000043a:	005b      	lsls	r3, r3, #1
2000043c:	18fb      	adds	r3, r7, r3
2000043e:	0018      	movs	r0, r3
20000440:	f000 fd0a 	bl	20000e58 <init_fire>
	GameObject fire3;
	init_fire( &fire3 );
20000444:	23a8      	movs	r3, #168	; 0xa8
20000446:	005b      	lsls	r3, r3, #1
20000448:	18fb      	adds	r3, r7, r3
2000044a:	0018      	movs	r0, r3
2000044c:	f000 fd04 	bl	20000e58 <init_fire>
	GameObject fire4;
	init_fire( &fire4 );
20000450:	2396      	movs	r3, #150	; 0x96
20000452:	005b      	lsls	r3, r3, #1
20000454:	18fb      	adds	r3, r7, r3
20000456:	0018      	movs	r0, r3
20000458:	f000 fcfe 	bl	20000e58 <init_fire>
	GameObject fire1;
	init_fire( &fire1 );
2000045c:	2384      	movs	r3, #132	; 0x84
2000045e:	005b      	lsls	r3, r3, #1
20000460:	18fb      	adds	r3, r7, r3
20000462:	0018      	movs	r0, r3
20000464:	f000 fcf8 	bl	20000e58 <init_fire>
	fire2.xPos = 98;
20000468:	4b76      	ldr	r3, [pc, #472]	; (20000644 <main+0x448>)
2000046a:	22c6      	movs	r2, #198	; 0xc6
2000046c:	0092      	lsls	r2, r2, #2
2000046e:	4694      	mov	ip, r2
20000470:	44bc      	add	ip, r7
20000472:	4463      	add	r3, ip
20000474:	2262      	movs	r2, #98	; 0x62
20000476:	605a      	str	r2, [r3, #4]
	fire2.yPos = 26-12;
20000478:	4b72      	ldr	r3, [pc, #456]	; (20000644 <main+0x448>)
2000047a:	22c6      	movs	r2, #198	; 0xc6
2000047c:	0092      	lsls	r2, r2, #2
2000047e:	4694      	mov	ip, r2
20000480:	44bc      	add	ip, r7
20000482:	4463      	add	r3, ip
20000484:	220e      	movs	r2, #14
20000486:	609a      	str	r2, [r3, #8]
	fire3.xPos = 115;
20000488:	4b6f      	ldr	r3, [pc, #444]	; (20000648 <main+0x44c>)
2000048a:	22c6      	movs	r2, #198	; 0xc6
2000048c:	0092      	lsls	r2, r2, #2
2000048e:	4694      	mov	ip, r2
20000490:	44bc      	add	ip, r7
20000492:	4463      	add	r3, ip
20000494:	2273      	movs	r2, #115	; 0x73
20000496:	605a      	str	r2, [r3, #4]
	fire3.yPos = 34-12;
20000498:	4b6b      	ldr	r3, [pc, #428]	; (20000648 <main+0x44c>)
2000049a:	22c6      	movs	r2, #198	; 0xc6
2000049c:	0092      	lsls	r2, r2, #2
2000049e:	4694      	mov	ip, r2
200004a0:	44bc      	add	ip, r7
200004a2:	4463      	add	r3, ip
200004a4:	2216      	movs	r2, #22
200004a6:	609a      	str	r2, [r3, #8]
	
	fire1.xPos = 85;
200004a8:	4b68      	ldr	r3, [pc, #416]	; (2000064c <main+0x450>)
200004aa:	22c6      	movs	r2, #198	; 0xc6
200004ac:	0092      	lsls	r2, r2, #2
200004ae:	4694      	mov	ip, r2
200004b0:	44bc      	add	ip, r7
200004b2:	4463      	add	r3, ip
200004b4:	2255      	movs	r2, #85	; 0x55
200004b6:	605a      	str	r2, [r3, #4]
	fire1.yPos = 23-12;
200004b8:	4b64      	ldr	r3, [pc, #400]	; (2000064c <main+0x450>)
200004ba:	22c6      	movs	r2, #198	; 0xc6
200004bc:	0092      	lsls	r2, r2, #2
200004be:	4694      	mov	ip, r2
200004c0:	44bc      	add	ip, r7
200004c2:	4463      	add	r3, ip
200004c4:	220b      	movs	r2, #11
200004c6:	609a      	str	r2, [r3, #8]
	fire4.xPos = 71;
200004c8:	4b61      	ldr	r3, [pc, #388]	; (20000650 <main+0x454>)
200004ca:	22c6      	movs	r2, #198	; 0xc6
200004cc:	0092      	lsls	r2, r2, #2
200004ce:	4694      	mov	ip, r2
200004d0:	44bc      	add	ip, r7
200004d2:	4463      	add	r3, ip
200004d4:	2247      	movs	r2, #71	; 0x47
200004d6:	605a      	str	r2, [r3, #4]
	fire4.yPos = 27-11;
200004d8:	4b5d      	ldr	r3, [pc, #372]	; (20000650 <main+0x454>)
200004da:	22c6      	movs	r2, #198	; 0xc6
200004dc:	0092      	lsls	r2, r2, #2
200004de:	4694      	mov	ip, r2
200004e0:	44bc      	add	ip, r7
200004e2:	4463      	add	r3, ip
200004e4:	2210      	movs	r2, #16
200004e6:	609a      	str	r2, [r3, #8]
	//draw_game_object(&castleObj);
	
	fire2.animation_speed = 2;
200004e8:	4b56      	ldr	r3, [pc, #344]	; (20000644 <main+0x448>)
200004ea:	22c6      	movs	r2, #198	; 0xc6
200004ec:	0092      	lsls	r2, r2, #2
200004ee:	4694      	mov	ip, r2
200004f0:	44bc      	add	ip, r7
200004f2:	4463      	add	r3, ip
200004f4:	2202      	movs	r2, #2
200004f6:	61da      	str	r2, [r3, #28]
	fire3.animation_speed = 2;
200004f8:	4b53      	ldr	r3, [pc, #332]	; (20000648 <main+0x44c>)
200004fa:	22c6      	movs	r2, #198	; 0xc6
200004fc:	0092      	lsls	r2, r2, #2
200004fe:	4694      	mov	ip, r2
20000500:	44bc      	add	ip, r7
20000502:	4463      	add	r3, ip
20000504:	2202      	movs	r2, #2
20000506:	61da      	str	r2, [r3, #28]
	fire1.animation_speed = 2;
20000508:	4b50      	ldr	r3, [pc, #320]	; (2000064c <main+0x450>)
2000050a:	22c6      	movs	r2, #198	; 0xc6
2000050c:	0092      	lsls	r2, r2, #2
2000050e:	4694      	mov	ip, r2
20000510:	44bc      	add	ip, r7
20000512:	4463      	add	r3, ip
20000514:	2202      	movs	r2, #2
20000516:	61da      	str	r2, [r3, #28]
	fire4.animation_speed = 2;
20000518:	4b4d      	ldr	r3, [pc, #308]	; (20000650 <main+0x454>)
2000051a:	22c6      	movs	r2, #198	; 0xc6
2000051c:	0092      	lsls	r2, r2, #2
2000051e:	4694      	mov	ip, r2
20000520:	44bc      	add	ip, r7
20000522:	4463      	add	r3, ip
20000524:	2202      	movs	r2, #2
20000526:	61da      	str	r2, [r3, #28]
	
	fire2.update = gameObjectUpdate;
20000528:	4b46      	ldr	r3, [pc, #280]	; (20000644 <main+0x448>)
2000052a:	22c6      	movs	r2, #198	; 0xc6
2000052c:	0092      	lsls	r2, r2, #2
2000052e:	4694      	mov	ip, r2
20000530:	44bc      	add	ip, r7
20000532:	4463      	add	r3, ip
20000534:	4a41      	ldr	r2, [pc, #260]	; (2000063c <main+0x440>)
20000536:	60da      	str	r2, [r3, #12]
	fire3.update = gameObjectUpdate;
20000538:	4b43      	ldr	r3, [pc, #268]	; (20000648 <main+0x44c>)
2000053a:	22c6      	movs	r2, #198	; 0xc6
2000053c:	0092      	lsls	r2, r2, #2
2000053e:	4694      	mov	ip, r2
20000540:	44bc      	add	ip, r7
20000542:	4463      	add	r3, ip
20000544:	4a3d      	ldr	r2, [pc, #244]	; (2000063c <main+0x440>)
20000546:	60da      	str	r2, [r3, #12]
	fire1.update = gameObjectUpdate;
20000548:	4b40      	ldr	r3, [pc, #256]	; (2000064c <main+0x450>)
2000054a:	22c6      	movs	r2, #198	; 0xc6
2000054c:	0092      	lsls	r2, r2, #2
2000054e:	4694      	mov	ip, r2
20000550:	44bc      	add	ip, r7
20000552:	4463      	add	r3, ip
20000554:	4a39      	ldr	r2, [pc, #228]	; (2000063c <main+0x440>)
20000556:	60da      	str	r2, [r3, #12]
	fire4.update = gameObjectUpdate;
20000558:	4b3d      	ldr	r3, [pc, #244]	; (20000650 <main+0x454>)
2000055a:	22c6      	movs	r2, #198	; 0xc6
2000055c:	0092      	lsls	r2, r2, #2
2000055e:	4694      	mov	ip, r2
20000560:	44bc      	add	ip, r7
20000562:	4463      	add	r3, ip
20000564:	4a35      	ldr	r2, [pc, #212]	; (2000063c <main+0x440>)
20000566:	60da      	str	r2, [r3, #12]
	SlowText text8;
	SlowText text9;
	SlowText text10;
	SlowText text11;
	SlowText text12;
	init_slow_text(&text_kra, "*KRA!* *KRA!*", "   ", 1);
20000568:	4a3a      	ldr	r2, [pc, #232]	; (20000654 <main+0x458>)
2000056a:	493b      	ldr	r1, [pc, #236]	; (20000658 <main+0x45c>)
2000056c:	23f4      	movs	r3, #244	; 0xf4
2000056e:	18f8      	adds	r0, r7, r3
20000570:	2301      	movs	r3, #1
20000572:	f002 fa74 	bl	20002a5e <init_slow_text>
	init_slow_text(&text1, "For centuries the", "DILs-witches have", 1);
20000576:	4a39      	ldr	r2, [pc, #228]	; (2000065c <main+0x460>)
20000578:	4939      	ldr	r1, [pc, #228]	; (20000660 <main+0x464>)
2000057a:	23e0      	movs	r3, #224	; 0xe0
2000057c:	18f8      	adds	r0, r7, r3
2000057e:	2301      	movs	r3, #1
20000580:	f002 fa6d 	bl	20002a5e <init_slow_text>
	init_slow_text(&text2, "coiled in fear,", "    ", 1);
20000584:	4a37      	ldr	r2, [pc, #220]	; (20000664 <main+0x468>)
20000586:	4938      	ldr	r1, [pc, #224]	; (20000668 <main+0x46c>)
20000588:	23cc      	movs	r3, #204	; 0xcc
2000058a:	18f8      	adds	r0, r7, r3
2000058c:	2301      	movs	r3, #1
2000058e:	f002 fa66 	bl	20002a5e <init_slow_text>
	init_slow_text(&text3, "whenever they hear", "that a DIPs-witch", 1);
20000592:	4a36      	ldr	r2, [pc, #216]	; (2000066c <main+0x470>)
20000594:	4936      	ldr	r1, [pc, #216]	; (20000670 <main+0x474>)
20000596:	23b8      	movs	r3, #184	; 0xb8
20000598:	18f8      	adds	r0, r7, r3
2000059a:	2301      	movs	r3, #1
2000059c:	f002 fa5f 	bl	20002a5e <init_slow_text>
	init_slow_text(&text4, "is near.", "   ", 1);
200005a0:	4a2c      	ldr	r2, [pc, #176]	; (20000654 <main+0x458>)
200005a2:	4934      	ldr	r1, [pc, #208]	; (20000674 <main+0x478>)
200005a4:	23a4      	movs	r3, #164	; 0xa4
200005a6:	18f8      	adds	r0, r7, r3
200005a8:	2301      	movs	r3, #1
200005aa:	f002 fa58 	bl	20002a5e <init_slow_text>
	init_slow_text(&text5, "So it is quite", "surprising, finding", 1);
200005ae:	4a32      	ldr	r2, [pc, #200]	; (20000678 <main+0x47c>)
200005b0:	4932      	ldr	r1, [pc, #200]	; (2000067c <main+0x480>)
200005b2:	2390      	movs	r3, #144	; 0x90
200005b4:	18f8      	adds	r0, r7, r3
200005b6:	2301      	movs	r3, #1
200005b8:	f002 fa51 	bl	20002a5e <init_slow_text>
	init_slow_text(&text6, "you here,", "    ", 1);
200005bc:	4a29      	ldr	r2, [pc, #164]	; (20000664 <main+0x468>)
200005be:	4930      	ldr	r1, [pc, #192]	; (20000680 <main+0x484>)
200005c0:	237c      	movs	r3, #124	; 0x7c
200005c2:	18f8      	adds	r0, r7, r3
200005c4:	2301      	movs	r3, #1
200005c6:	f002 fa4a 	bl	20002a5e <init_slow_text>
	init_slow_text(&text7, "queen Daffo of DILs,", "heir to king Lear.", 1);
200005ca:	4a2e      	ldr	r2, [pc, #184]	; (20000684 <main+0x488>)
200005cc:	492e      	ldr	r1, [pc, #184]	; (20000688 <main+0x48c>)
200005ce:	2368      	movs	r3, #104	; 0x68
200005d0:	18f8      	adds	r0, r7, r3
200005d2:	2301      	movs	r3, #1
200005d4:	f002 fa43 	bl	20002a5e <init_slow_text>
	init_slow_text(&text8, "But maybe you're", "tempted, to loot", 1);
200005d8:	4a2c      	ldr	r2, [pc, #176]	; (2000068c <main+0x490>)
200005da:	492d      	ldr	r1, [pc, #180]	; (20000690 <main+0x494>)
200005dc:	2354      	movs	r3, #84	; 0x54
200005de:	18f8      	adds	r0, r7, r3
200005e0:	2301      	movs	r3, #1
200005e2:	f002 fa3c 	bl	20002a5e <init_slow_text>
	init_slow_text(&text9, "from the riches,", "    ", 1);
200005e6:	4a1f      	ldr	r2, [pc, #124]	; (20000664 <main+0x468>)
200005e8:	492a      	ldr	r1, [pc, #168]	; (20000694 <main+0x498>)
200005ea:	2340      	movs	r3, #64	; 0x40
200005ec:	18f8      	adds	r0, r7, r3
200005ee:	2301      	movs	r3, #1
200005f0:	f002 fa35 	bl	20002a5e <init_slow_text>
200005f4:	e050      	b.n	20000698 <main+0x49c>
200005f6:	46c0      	nop			; (mov r8, r8)
200005f8:	fffffce4 			; <UNDEFINED> instruction: 0xfffffce4
200005fc:	20002e54 	andcs	r2, r0, r4, asr lr
20000600:	20002f14 	andcs	r2, r0, r4, lsl pc
20000604:	20002f00 	andcs	r2, r0, r0, lsl #30
20000608:	20000f7d 	andcs	r0, r0, sp, ror pc
2000060c:	20002f24 	andcs	r2, r0, r4, lsr #30
20000610:	20002ef0 	strdcs	r2, [r0], -r0
20000614:	20002f04 	andcs	r2, r0, r4, lsl #30
20000618:	20002f10 	andcs	r2, r0, r0, lsl pc
2000061c:	20002e8c 	andcs	r2, r0, ip, lsl #29
20000620:	20002ed4 	ldrdcs	r2, [r0], -r4
20000624:	20002e7c 	andcs	r2, r0, ip, ror lr
20000628:	20002f08 	andcs	r2, r0, r8, lsl #30
2000062c:	20002eb8 			; <UNDEFINED> instruction: 0x20002eb8
20000630:	fffffeec 			; <UNDEFINED> instruction: 0xfffffeec
20000634:	fffffec8 			; <UNDEFINED> instruction: 0xfffffec8
20000638:	fffffea4 			; <UNDEFINED> instruction: 0xfffffea4
2000063c:	20000c8d 	andcs	r0, r0, sp, lsl #25
20000640:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
20000644:	fffffe5c 			; <UNDEFINED> instruction: 0xfffffe5c
20000648:	fffffe38 			; <UNDEFINED> instruction: 0xfffffe38
2000064c:	fffffdf0 			; <UNDEFINED> instruction: 0xfffffdf0
20000650:	fffffe14 			; <UNDEFINED> instruction: 0xfffffe14
20000654:	2000893c 	andcs	r8, r0, ip, lsr r9
20000658:	20008940 	andcs	r8, r0, r0, asr #18
2000065c:	20008950 	andcs	r8, r0, r0, asr r9
20000660:	20008964 	andcs	r8, r0, r4, ror #18
20000664:	20008978 	andcs	r8, r0, r8, ror r9
20000668:	20008980 	andcs	r8, r0, r0, lsl #19
2000066c:	20008990 	mulcs	r0, r0, r9
20000670:	200089a4 	andcs	r8, r0, r4, lsr #19
20000674:	200089b8 			; <UNDEFINED> instruction: 0x200089b8
20000678:	200089c4 	andcs	r8, r0, r4, asr #19
2000067c:	200089d8 	ldrdcs	r8, [r0], -r8	; <UNPREDICTABLE>
20000680:	200089e8 	andcs	r8, r0, r8, ror #19
20000684:	200089f4 	strdcs	r8, [r0], -r4
20000688:	20008a08 	andcs	r8, r0, r8, lsl #20
2000068c:	20008a20 	andcs	r8, r0, r0, lsr #20
20000690:	20008a34 	andcs	r8, r0, r4, lsr sl
20000694:	20008a48 	andcs	r8, r0, r8, asr #20
	init_slow_text(&text12, "wicked DIPs-witches.", "    ", 1);
20000698:	4ad4      	ldr	r2, [pc, #848]	; (200009ec <main+0x7f0>)
2000069a:	49d5      	ldr	r1, [pc, #852]	; (200009f0 <main+0x7f4>)
2000069c:	1d38      	adds	r0, r7, #4
2000069e:	2301      	movs	r3, #1
200006a0:	f002 f9dd 	bl	20002a5e <init_slow_text>
	init_slow_text(&text10, "so grippily trea-", "sured by", 1);
200006a4:	4ad3      	ldr	r2, [pc, #844]	; (200009f4 <main+0x7f8>)
200006a6:	49d4      	ldr	r1, [pc, #848]	; (200009f8 <main+0x7fc>)
200006a8:	232c      	movs	r3, #44	; 0x2c
200006aa:	18f8      	adds	r0, r7, r3
200006ac:	2301      	movs	r3, #1
200006ae:	f002 f9d6 	bl	20002a5e <init_slow_text>
	init_slow_text(&text11, "Enter, brave witch,", "- reset the switch!", 1);
200006b2:	4ad2      	ldr	r2, [pc, #840]	; (200009fc <main+0x800>)
200006b4:	49d2      	ldr	r1, [pc, #840]	; (20000a00 <main+0x804>)
200006b6:	2318      	movs	r3, #24
200006b8:	18f8      	adds	r0, r7, r3
200006ba:	2301      	movs	r3, #1
200006bc:	f002 f9cf 	bl	20002a5e <init_slow_text>
	//ascii_write_part("Yeeaaah!!!", "This is working! :)", 5, 10);
	set_up_ascii();
200006c0:	f002 f8aa 	bl	20002818 <set_up_ascii>
	set_up_DIL();
200006c4:	f001 fede 	bl	20002484 <set_up_DIL>
	clear_ascii();
200006c8:	f002 f8af 	bl	2000282a <clear_ascii>
	
	if(read_DIL() == 0) {
200006cc:	f001 fee6 	bl	2000249c <read_DIL>
200006d0:	1e03      	subs	r3, r0, #0
200006d2:	d102      	bne.n	200006da <main+0x4de>
		current_screen = SWITCH_LOCK; 
200006d4:	4bcb      	ldr	r3, [pc, #812]	; (20000a04 <main+0x808>)
200006d6:	2200      	movs	r2, #0
200006d8:	601a      	str	r2, [r3, #0]
	}
	
	//Game loop
	while(1) {
			
		switch(current_screen) {
200006da:	4bca      	ldr	r3, [pc, #808]	; (20000a04 <main+0x808>)
200006dc:	681b      	ldr	r3, [r3, #0]
200006de:	2b01      	cmp	r3, #1
200006e0:	d019      	beq.n	20000716 <main+0x51a>
200006e2:	2b02      	cmp	r3, #2
200006e4:	d100      	bne.n	200006e8 <main+0x4ec>
200006e6:	e27b      	b.n	20000be0 <main+0x9e4>
200006e8:	2b00      	cmp	r3, #0
200006ea:	d1f6      	bne.n	200006da <main+0x4de>
			
			case SWITCH_LOCK:

				while(read_DIL() == 0){
200006ec:	e008      	b.n	20000700 <main+0x504>
					draw_game_object(&pressObj);
200006ee:	239f      	movs	r3, #159	; 0x9f
200006f0:	009b      	lsls	r3, r3, #2
200006f2:	18fb      	adds	r3, r7, r3
200006f4:	0018      	movs	r0, r3
200006f6:	f001 fe27 	bl	20002348 <draw_game_object>
					show_frame(1);
200006fa:	2001      	movs	r0, #1
200006fc:	f001 fe65 	bl	200023ca <show_frame>
				while(read_DIL() == 0){
20000700:	f001 fecc 	bl	2000249c <read_DIL>
20000704:	1e03      	subs	r3, r0, #0
20000706:	d0f2      	beq.n	200006ee <main+0x4f2>
				}
				
				counter = 0;
20000708:	4bbf      	ldr	r3, [pc, #764]	; (20000a08 <main+0x80c>)
2000070a:	2200      	movs	r2, #0
2000070c:	601a      	str	r2, [r3, #0]
				current_screen = START_SCREEN;
2000070e:	4bbd      	ldr	r3, [pc, #756]	; (20000a04 <main+0x808>)
20000710:	2201      	movs	r2, #1
20000712:	601a      	str	r2, [r3, #0]
				break;
20000714:	e292      	b.n	20000c3c <main+0xa40>
			
			
			case START_SCREEN:
				
				counter++;
20000716:	4bbc      	ldr	r3, [pc, #752]	; (20000a08 <main+0x80c>)
20000718:	681b      	ldr	r3, [r3, #0]
2000071a:	1c5a      	adds	r2, r3, #1
2000071c:	4bba      	ldr	r3, [pc, #744]	; (20000a08 <main+0x80c>)
2000071e:	601a      	str	r2, [r3, #0]
				
				if(titleObj.yPos < 1) {
20000720:	23ae      	movs	r3, #174	; 0xae
20000722:	009b      	lsls	r3, r3, #2
20000724:	18fb      	adds	r3, r7, r3
20000726:	689b      	ldr	r3, [r3, #8]
20000728:	2b00      	cmp	r3, #0
2000072a:	dc08      	bgt.n	2000073e <main+0x542>
					titleObj.yPos++;
2000072c:	23ae      	movs	r3, #174	; 0xae
2000072e:	009b      	lsls	r3, r3, #2
20000730:	18fb      	adds	r3, r7, r3
20000732:	689b      	ldr	r3, [r3, #8]
20000734:	1c5a      	adds	r2, r3, #1
20000736:	23ae      	movs	r3, #174	; 0xae
20000738:	009b      	lsls	r3, r3, #2
2000073a:	18fb      	adds	r3, r7, r3
2000073c:	609a      	str	r2, [r3, #8]
				}
				
				draw_game_object(&castleObj);
2000073e:	2390      	movs	r3, #144	; 0x90
20000740:	009b      	lsls	r3, r3, #2
20000742:	18fb      	adds	r3, r7, r3
20000744:	0018      	movs	r0, r3
20000746:	f001 fdff 	bl	20002348 <draw_game_object>
				draw_game_object(&fire2);
2000074a:	23ba      	movs	r3, #186	; 0xba
2000074c:	005b      	lsls	r3, r3, #1
2000074e:	18fb      	adds	r3, r7, r3
20000750:	0018      	movs	r0, r3
20000752:	f001 fdf9 	bl	20002348 <draw_game_object>
				draw_game_object(&fire3);
20000756:	23a8      	movs	r3, #168	; 0xa8
20000758:	005b      	lsls	r3, r3, #1
2000075a:	18fb      	adds	r3, r7, r3
2000075c:	0018      	movs	r0, r3
2000075e:	f001 fdf3 	bl	20002348 <draw_game_object>
				draw_game_object(&fire1);
20000762:	2384      	movs	r3, #132	; 0x84
20000764:	005b      	lsls	r3, r3, #1
20000766:	18fb      	adds	r3, r7, r3
20000768:	0018      	movs	r0, r3
2000076a:	f001 fded 	bl	20002348 <draw_game_object>
				draw_game_object(&fire4);
2000076e:	2396      	movs	r3, #150	; 0x96
20000770:	005b      	lsls	r3, r3, #1
20000772:	18fb      	adds	r3, r7, r3
20000774:	0018      	movs	r0, r3
20000776:	f001 fde7 	bl	20002348 <draw_game_object>
				draw_game_object(&titleObj);
2000077a:	23ae      	movs	r3, #174	; 0xae
2000077c:	009b      	lsls	r3, r3, #2
2000077e:	18fb      	adds	r3, r7, r3
20000780:	0018      	movs	r0, r3
20000782:	f001 fde1 	bl	20002348 <draw_game_object>
				draw_game_object(&bird);
20000786:	23de      	movs	r3, #222	; 0xde
20000788:	005b      	lsls	r3, r3, #1
2000078a:	18fb      	adds	r3, r7, r3
2000078c:	0018      	movs	r0, r3
2000078e:	f001 fddb 	bl	20002348 <draw_game_object>
				show_frame(1);
20000792:	2001      	movs	r0, #1
20000794:	f001 fe19 	bl	200023ca <show_frame>
				
				static int long_text = 40;
				static int short_text = 20;
				static int delay_until_text = 130;
				
				if (counter < delay_until_text - 55 && counter > delay_until_text - 90)
20000798:	4b9c      	ldr	r3, [pc, #624]	; (20000a0c <main+0x810>)
2000079a:	681b      	ldr	r3, [r3, #0]
2000079c:	3b37      	subs	r3, #55	; 0x37
2000079e:	001a      	movs	r2, r3
200007a0:	4b99      	ldr	r3, [pc, #612]	; (20000a08 <main+0x80c>)
200007a2:	681b      	ldr	r3, [r3, #0]
200007a4:	429a      	cmp	r2, r3
200007a6:	dd13      	ble.n	200007d0 <main+0x5d4>
200007a8:	4b98      	ldr	r3, [pc, #608]	; (20000a0c <main+0x810>)
200007aa:	681b      	ldr	r3, [r3, #0]
200007ac:	3b5a      	subs	r3, #90	; 0x5a
200007ae:	001a      	movs	r2, r3
200007b0:	4b95      	ldr	r3, [pc, #596]	; (20000a08 <main+0x80c>)
200007b2:	681b      	ldr	r3, [r3, #0]
200007b4:	429a      	cmp	r2, r3
200007b6:	da0b      	bge.n	200007d0 <main+0x5d4>
					text_kra.display(&text_kra, 20);
200007b8:	4b95      	ldr	r3, [pc, #596]	; (20000a10 <main+0x814>)
200007ba:	22c6      	movs	r2, #198	; 0xc6
200007bc:	0092      	lsls	r2, r2, #2
200007be:	4694      	mov	ip, r2
200007c0:	44bc      	add	ip, r7
200007c2:	4463      	add	r3, ip
200007c4:	691b      	ldr	r3, [r3, #16]
200007c6:	22f4      	movs	r2, #244	; 0xf4
200007c8:	18ba      	adds	r2, r7, r2
200007ca:	2114      	movs	r1, #20
200007cc:	0010      	movs	r0, r2
200007ce:	4798      	blx	r3
				if (counter == delay_until_text - 25)
200007d0:	4b8e      	ldr	r3, [pc, #568]	; (20000a0c <main+0x810>)
200007d2:	681b      	ldr	r3, [r3, #0]
200007d4:	3b19      	subs	r3, #25
200007d6:	001a      	movs	r2, r3
200007d8:	4b8b      	ldr	r3, [pc, #556]	; (20000a08 <main+0x80c>)
200007da:	681b      	ldr	r3, [r3, #0]
200007dc:	429a      	cmp	r2, r3
200007de:	d101      	bne.n	200007e4 <main+0x5e8>
					clear_ascii();
200007e0:	f002 f823 	bl	2000282a <clear_ascii>
				
				if (counter < delay_until_text);
200007e4:	4b88      	ldr	r3, [pc, #544]	; (20000a08 <main+0x80c>)
200007e6:	681a      	ldr	r2, [r3, #0]
200007e8:	4b88      	ldr	r3, [pc, #544]	; (20000a0c <main+0x810>)
200007ea:	681b      	ldr	r3, [r3, #0]
200007ec:	429a      	cmp	r2, r3
200007ee:	da00      	bge.n	200007f2 <main+0x5f6>
200007f0:	e195      	b.n	20000b1e <main+0x922>
				else if (counter < delay_until_text + 1*long_text)
200007f2:	4b86      	ldr	r3, [pc, #536]	; (20000a0c <main+0x810>)
200007f4:	681a      	ldr	r2, [r3, #0]
200007f6:	4b87      	ldr	r3, [pc, #540]	; (20000a14 <main+0x818>)
200007f8:	681b      	ldr	r3, [r3, #0]
200007fa:	18d2      	adds	r2, r2, r3
200007fc:	4b82      	ldr	r3, [pc, #520]	; (20000a08 <main+0x80c>)
200007fe:	681b      	ldr	r3, [r3, #0]
20000800:	429a      	cmp	r2, r3
20000802:	dd0c      	ble.n	2000081e <main+0x622>
					text1.display(&text1, 20);
20000804:	4b84      	ldr	r3, [pc, #528]	; (20000a18 <main+0x81c>)
20000806:	22c6      	movs	r2, #198	; 0xc6
20000808:	0092      	lsls	r2, r2, #2
2000080a:	4694      	mov	ip, r2
2000080c:	44bc      	add	ip, r7
2000080e:	4463      	add	r3, ip
20000810:	691b      	ldr	r3, [r3, #16]
20000812:	22e0      	movs	r2, #224	; 0xe0
20000814:	18ba      	adds	r2, r7, r2
20000816:	2114      	movs	r1, #20
20000818:	0010      	movs	r0, r2
2000081a:	4798      	blx	r3
2000081c:	e17f      	b.n	20000b1e <main+0x922>
				else if(counter < delay_until_text + 1*long_text + 1*short_text)
2000081e:	4b7b      	ldr	r3, [pc, #492]	; (20000a0c <main+0x810>)
20000820:	681a      	ldr	r2, [r3, #0]
20000822:	4b7c      	ldr	r3, [pc, #496]	; (20000a14 <main+0x818>)
20000824:	681b      	ldr	r3, [r3, #0]
20000826:	18d2      	adds	r2, r2, r3
20000828:	4b7c      	ldr	r3, [pc, #496]	; (20000a1c <main+0x820>)
2000082a:	681b      	ldr	r3, [r3, #0]
2000082c:	18d2      	adds	r2, r2, r3
2000082e:	4b76      	ldr	r3, [pc, #472]	; (20000a08 <main+0x80c>)
20000830:	681b      	ldr	r3, [r3, #0]
20000832:	429a      	cmp	r2, r3
20000834:	dd0c      	ble.n	20000850 <main+0x654>
					text2.display(&text2, 20);
20000836:	4b7a      	ldr	r3, [pc, #488]	; (20000a20 <main+0x824>)
20000838:	22c6      	movs	r2, #198	; 0xc6
2000083a:	0092      	lsls	r2, r2, #2
2000083c:	4694      	mov	ip, r2
2000083e:	44bc      	add	ip, r7
20000840:	4463      	add	r3, ip
20000842:	691b      	ldr	r3, [r3, #16]
20000844:	22cc      	movs	r2, #204	; 0xcc
20000846:	18ba      	adds	r2, r7, r2
20000848:	2114      	movs	r1, #20
2000084a:	0010      	movs	r0, r2
2000084c:	4798      	blx	r3
2000084e:	e166      	b.n	20000b1e <main+0x922>
				else if(counter < delay_until_text + 2*long_text + 1*short_text)
20000850:	4b70      	ldr	r3, [pc, #448]	; (20000a14 <main+0x818>)
20000852:	681b      	ldr	r3, [r3, #0]
20000854:	005a      	lsls	r2, r3, #1
20000856:	4b6d      	ldr	r3, [pc, #436]	; (20000a0c <main+0x810>)
20000858:	681b      	ldr	r3, [r3, #0]
2000085a:	18d2      	adds	r2, r2, r3
2000085c:	4b6f      	ldr	r3, [pc, #444]	; (20000a1c <main+0x820>)
2000085e:	681b      	ldr	r3, [r3, #0]
20000860:	18d2      	adds	r2, r2, r3
20000862:	4b69      	ldr	r3, [pc, #420]	; (20000a08 <main+0x80c>)
20000864:	681b      	ldr	r3, [r3, #0]
20000866:	429a      	cmp	r2, r3
20000868:	dd0c      	ble.n	20000884 <main+0x688>
					text3.display(&text3, 20);
2000086a:	4b6e      	ldr	r3, [pc, #440]	; (20000a24 <main+0x828>)
2000086c:	22c6      	movs	r2, #198	; 0xc6
2000086e:	0092      	lsls	r2, r2, #2
20000870:	4694      	mov	ip, r2
20000872:	44bc      	add	ip, r7
20000874:	4463      	add	r3, ip
20000876:	691b      	ldr	r3, [r3, #16]
20000878:	22b8      	movs	r2, #184	; 0xb8
2000087a:	18ba      	adds	r2, r7, r2
2000087c:	2114      	movs	r1, #20
2000087e:	0010      	movs	r0, r2
20000880:	4798      	blx	r3
20000882:	e14c      	b.n	20000b1e <main+0x922>
				else if(counter < delay_until_text + 2*long_text + 2*short_text)
20000884:	4b63      	ldr	r3, [pc, #396]	; (20000a14 <main+0x818>)
20000886:	681b      	ldr	r3, [r3, #0]
20000888:	005a      	lsls	r2, r3, #1
2000088a:	4b60      	ldr	r3, [pc, #384]	; (20000a0c <main+0x810>)
2000088c:	681b      	ldr	r3, [r3, #0]
2000088e:	18d2      	adds	r2, r2, r3
20000890:	4b62      	ldr	r3, [pc, #392]	; (20000a1c <main+0x820>)
20000892:	681b      	ldr	r3, [r3, #0]
20000894:	005b      	lsls	r3, r3, #1
20000896:	18d2      	adds	r2, r2, r3
20000898:	4b5b      	ldr	r3, [pc, #364]	; (20000a08 <main+0x80c>)
2000089a:	681b      	ldr	r3, [r3, #0]
2000089c:	429a      	cmp	r2, r3
2000089e:	dd0c      	ble.n	200008ba <main+0x6be>
					text4.display(&text4, 20);
200008a0:	4b61      	ldr	r3, [pc, #388]	; (20000a28 <main+0x82c>)
200008a2:	22c6      	movs	r2, #198	; 0xc6
200008a4:	0092      	lsls	r2, r2, #2
200008a6:	4694      	mov	ip, r2
200008a8:	44bc      	add	ip, r7
200008aa:	4463      	add	r3, ip
200008ac:	691b      	ldr	r3, [r3, #16]
200008ae:	22a4      	movs	r2, #164	; 0xa4
200008b0:	18ba      	adds	r2, r7, r2
200008b2:	2114      	movs	r1, #20
200008b4:	0010      	movs	r0, r2
200008b6:	4798      	blx	r3
200008b8:	e131      	b.n	20000b1e <main+0x922>
				else if(counter < delay_until_text + 3*long_text + 2*short_text)
200008ba:	4b56      	ldr	r3, [pc, #344]	; (20000a14 <main+0x818>)
200008bc:	681a      	ldr	r2, [r3, #0]
200008be:	0013      	movs	r3, r2
200008c0:	005b      	lsls	r3, r3, #1
200008c2:	189a      	adds	r2, r3, r2
200008c4:	4b51      	ldr	r3, [pc, #324]	; (20000a0c <main+0x810>)
200008c6:	681b      	ldr	r3, [r3, #0]
200008c8:	18d2      	adds	r2, r2, r3
200008ca:	4b54      	ldr	r3, [pc, #336]	; (20000a1c <main+0x820>)
200008cc:	681b      	ldr	r3, [r3, #0]
200008ce:	005b      	lsls	r3, r3, #1
200008d0:	18d2      	adds	r2, r2, r3
200008d2:	4b4d      	ldr	r3, [pc, #308]	; (20000a08 <main+0x80c>)
200008d4:	681b      	ldr	r3, [r3, #0]
200008d6:	429a      	cmp	r2, r3
200008d8:	dd0c      	ble.n	200008f4 <main+0x6f8>
					text5.display(&text5, 15);
200008da:	4b54      	ldr	r3, [pc, #336]	; (20000a2c <main+0x830>)
200008dc:	22c6      	movs	r2, #198	; 0xc6
200008de:	0092      	lsls	r2, r2, #2
200008e0:	4694      	mov	ip, r2
200008e2:	44bc      	add	ip, r7
200008e4:	4463      	add	r3, ip
200008e6:	691b      	ldr	r3, [r3, #16]
200008e8:	2290      	movs	r2, #144	; 0x90
200008ea:	18ba      	adds	r2, r7, r2
200008ec:	210f      	movs	r1, #15
200008ee:	0010      	movs	r0, r2
200008f0:	4798      	blx	r3
200008f2:	e114      	b.n	20000b1e <main+0x922>
				else if(counter < delay_until_text + 3*long_text + 3*short_text)
200008f4:	4b47      	ldr	r3, [pc, #284]	; (20000a14 <main+0x818>)
200008f6:	681a      	ldr	r2, [r3, #0]
200008f8:	0013      	movs	r3, r2
200008fa:	005b      	lsls	r3, r3, #1
200008fc:	189a      	adds	r2, r3, r2
200008fe:	4b43      	ldr	r3, [pc, #268]	; (20000a0c <main+0x810>)
20000900:	681b      	ldr	r3, [r3, #0]
20000902:	18d1      	adds	r1, r2, r3
20000904:	4b45      	ldr	r3, [pc, #276]	; (20000a1c <main+0x820>)
20000906:	681a      	ldr	r2, [r3, #0]
20000908:	0013      	movs	r3, r2
2000090a:	005b      	lsls	r3, r3, #1
2000090c:	189b      	adds	r3, r3, r2
2000090e:	18ca      	adds	r2, r1, r3
20000910:	4b3d      	ldr	r3, [pc, #244]	; (20000a08 <main+0x80c>)
20000912:	681b      	ldr	r3, [r3, #0]
20000914:	429a      	cmp	r2, r3
20000916:	dd0c      	ble.n	20000932 <main+0x736>
					text6.display(&text6, 20);
20000918:	4b45      	ldr	r3, [pc, #276]	; (20000a30 <main+0x834>)
2000091a:	22c6      	movs	r2, #198	; 0xc6
2000091c:	0092      	lsls	r2, r2, #2
2000091e:	4694      	mov	ip, r2
20000920:	44bc      	add	ip, r7
20000922:	4463      	add	r3, ip
20000924:	691b      	ldr	r3, [r3, #16]
20000926:	227c      	movs	r2, #124	; 0x7c
20000928:	18ba      	adds	r2, r7, r2
2000092a:	2114      	movs	r1, #20
2000092c:	0010      	movs	r0, r2
2000092e:	4798      	blx	r3
20000930:	e0f5      	b.n	20000b1e <main+0x922>
				else if(counter < delay_until_text + 4*long_text + 3*short_text + 3)
20000932:	4b38      	ldr	r3, [pc, #224]	; (20000a14 <main+0x818>)
20000934:	681b      	ldr	r3, [r3, #0]
20000936:	009a      	lsls	r2, r3, #2
20000938:	4b34      	ldr	r3, [pc, #208]	; (20000a0c <main+0x810>)
2000093a:	681b      	ldr	r3, [r3, #0]
2000093c:	18d1      	adds	r1, r2, r3
2000093e:	4b37      	ldr	r3, [pc, #220]	; (20000a1c <main+0x820>)
20000940:	681a      	ldr	r2, [r3, #0]
20000942:	0013      	movs	r3, r2
20000944:	005b      	lsls	r3, r3, #1
20000946:	189b      	adds	r3, r3, r2
20000948:	18cb      	adds	r3, r1, r3
2000094a:	1cda      	adds	r2, r3, #3
2000094c:	4b2e      	ldr	r3, [pc, #184]	; (20000a08 <main+0x80c>)
2000094e:	681b      	ldr	r3, [r3, #0]
20000950:	429a      	cmp	r2, r3
20000952:	dd0c      	ble.n	2000096e <main+0x772>
					text7.display(&text7, 20);
20000954:	4b37      	ldr	r3, [pc, #220]	; (20000a34 <main+0x838>)
20000956:	22c6      	movs	r2, #198	; 0xc6
20000958:	0092      	lsls	r2, r2, #2
2000095a:	4694      	mov	ip, r2
2000095c:	44bc      	add	ip, r7
2000095e:	4463      	add	r3, ip
20000960:	691b      	ldr	r3, [r3, #16]
20000962:	2268      	movs	r2, #104	; 0x68
20000964:	18ba      	adds	r2, r7, r2
20000966:	2114      	movs	r1, #20
20000968:	0010      	movs	r0, r2
2000096a:	4798      	blx	r3
2000096c:	e0d7      	b.n	20000b1e <main+0x922>
				else if(counter < delay_until_text + 5*long_text + 3*short_text + 2)
2000096e:	4b29      	ldr	r3, [pc, #164]	; (20000a14 <main+0x818>)
20000970:	681a      	ldr	r2, [r3, #0]
20000972:	0013      	movs	r3, r2
20000974:	009b      	lsls	r3, r3, #2
20000976:	189a      	adds	r2, r3, r2
20000978:	4b24      	ldr	r3, [pc, #144]	; (20000a0c <main+0x810>)
2000097a:	681b      	ldr	r3, [r3, #0]
2000097c:	18d1      	adds	r1, r2, r3
2000097e:	4b27      	ldr	r3, [pc, #156]	; (20000a1c <main+0x820>)
20000980:	681a      	ldr	r2, [r3, #0]
20000982:	0013      	movs	r3, r2
20000984:	005b      	lsls	r3, r3, #1
20000986:	189b      	adds	r3, r3, r2
20000988:	18cb      	adds	r3, r1, r3
2000098a:	1c9a      	adds	r2, r3, #2
2000098c:	4b1e      	ldr	r3, [pc, #120]	; (20000a08 <main+0x80c>)
2000098e:	681b      	ldr	r3, [r3, #0]
20000990:	429a      	cmp	r2, r3
20000992:	dd0c      	ble.n	200009ae <main+0x7b2>
					text8.display(&text8, 20);
20000994:	4b28      	ldr	r3, [pc, #160]	; (20000a38 <main+0x83c>)
20000996:	22c6      	movs	r2, #198	; 0xc6
20000998:	0092      	lsls	r2, r2, #2
2000099a:	4694      	mov	ip, r2
2000099c:	44bc      	add	ip, r7
2000099e:	4463      	add	r3, ip
200009a0:	691b      	ldr	r3, [r3, #16]
200009a2:	2254      	movs	r2, #84	; 0x54
200009a4:	18ba      	adds	r2, r7, r2
200009a6:	2114      	movs	r1, #20
200009a8:	0010      	movs	r0, r2
200009aa:	4798      	blx	r3
200009ac:	e0b7      	b.n	20000b1e <main+0x922>
				else if(counter < delay_until_text + 5*long_text + 4*short_text + 2)
200009ae:	4b19      	ldr	r3, [pc, #100]	; (20000a14 <main+0x818>)
200009b0:	681a      	ldr	r2, [r3, #0]
200009b2:	0013      	movs	r3, r2
200009b4:	009b      	lsls	r3, r3, #2
200009b6:	189a      	adds	r2, r3, r2
200009b8:	4b14      	ldr	r3, [pc, #80]	; (20000a0c <main+0x810>)
200009ba:	681b      	ldr	r3, [r3, #0]
200009bc:	18d2      	adds	r2, r2, r3
200009be:	4b17      	ldr	r3, [pc, #92]	; (20000a1c <main+0x820>)
200009c0:	681b      	ldr	r3, [r3, #0]
200009c2:	009b      	lsls	r3, r3, #2
200009c4:	18d3      	adds	r3, r2, r3
200009c6:	1c9a      	adds	r2, r3, #2
200009c8:	4b0f      	ldr	r3, [pc, #60]	; (20000a08 <main+0x80c>)
200009ca:	681b      	ldr	r3, [r3, #0]
200009cc:	429a      	cmp	r2, r3
200009ce:	dd37      	ble.n	20000a40 <main+0x844>
					text9.display(&text9, 20);
200009d0:	4b1a      	ldr	r3, [pc, #104]	; (20000a3c <main+0x840>)
200009d2:	22c6      	movs	r2, #198	; 0xc6
200009d4:	0092      	lsls	r2, r2, #2
200009d6:	4694      	mov	ip, r2
200009d8:	44bc      	add	ip, r7
200009da:	4463      	add	r3, ip
200009dc:	691b      	ldr	r3, [r3, #16]
200009de:	2240      	movs	r2, #64	; 0x40
200009e0:	18ba      	adds	r2, r7, r2
200009e2:	2114      	movs	r1, #20
200009e4:	0010      	movs	r0, r2
200009e6:	4798      	blx	r3
200009e8:	e099      	b.n	20000b1e <main+0x922>
200009ea:	46c0      	nop			; (mov r8, r8)
200009ec:	20008978 	andcs	r8, r0, r8, ror r9
200009f0:	20008a5c 	andcs	r8, r0, ip, asr sl
200009f4:	20008a74 	andcs	r8, r0, r4, ror sl
200009f8:	20008a80 	andcs	r8, r0, r0, lsl #21
200009fc:	20008a94 	mulcs	r0, r4, sl
20000a00:	20008aa8 	andcs	r8, r0, r8, lsr #21
20000a04:	200068c0 	andcs	r6, r0, r0, asr #17
20000a08:	20002e40 	andcs	r2, r0, r0, asr #28
20000a0c:	200068c4 	andcs	r6, r0, r4, asr #17
20000a10:	fffffddc 			; <UNDEFINED> instruction: 0xfffffddc
20000a14:	200068c8 	andcs	r6, r0, r8, asr #17
20000a18:	fffffdc8 			; <UNDEFINED> instruction: 0xfffffdc8
20000a1c:	200068cc 	andcs	r6, r0, ip, asr #17
20000a20:	fffffdb4 			; <UNDEFINED> instruction: 0xfffffdb4
20000a24:	fffffda0 			; <UNDEFINED> instruction: 0xfffffda0
20000a28:	fffffd8c 			; <UNDEFINED> instruction: 0xfffffd8c
20000a2c:	fffffd78 			; <UNDEFINED> instruction: 0xfffffd78
20000a30:	fffffd64 			; <UNDEFINED> instruction: 0xfffffd64
20000a34:	fffffd50 			; <UNDEFINED> instruction: 0xfffffd50
20000a38:	fffffd3c 			; <UNDEFINED> instruction: 0xfffffd3c
20000a3c:	fffffd28 			; <UNDEFINED> instruction: 0xfffffd28
				else if(counter < delay_until_text + 6*long_text + 4*short_text - 2 + 2)
20000a40:	4b7f      	ldr	r3, [pc, #508]	; (20000c40 <main+0xa44>)
20000a42:	681a      	ldr	r2, [r3, #0]
20000a44:	0013      	movs	r3, r2
20000a46:	005b      	lsls	r3, r3, #1
20000a48:	189b      	adds	r3, r3, r2
20000a4a:	005b      	lsls	r3, r3, #1
20000a4c:	001a      	movs	r2, r3
20000a4e:	4b7d      	ldr	r3, [pc, #500]	; (20000c44 <main+0xa48>)
20000a50:	681b      	ldr	r3, [r3, #0]
20000a52:	18d2      	adds	r2, r2, r3
20000a54:	4b7c      	ldr	r3, [pc, #496]	; (20000c48 <main+0xa4c>)
20000a56:	681b      	ldr	r3, [r3, #0]
20000a58:	009b      	lsls	r3, r3, #2
20000a5a:	18d2      	adds	r2, r2, r3
20000a5c:	4b7b      	ldr	r3, [pc, #492]	; (20000c4c <main+0xa50>)
20000a5e:	681b      	ldr	r3, [r3, #0]
20000a60:	429a      	cmp	r2, r3
20000a62:	dd0c      	ble.n	20000a7e <main+0x882>
					text10.display(&text10, 15);
20000a64:	4b7a      	ldr	r3, [pc, #488]	; (20000c50 <main+0xa54>)
20000a66:	22c6      	movs	r2, #198	; 0xc6
20000a68:	0092      	lsls	r2, r2, #2
20000a6a:	4694      	mov	ip, r2
20000a6c:	44bc      	add	ip, r7
20000a6e:	4463      	add	r3, ip
20000a70:	691b      	ldr	r3, [r3, #16]
20000a72:	222c      	movs	r2, #44	; 0x2c
20000a74:	18ba      	adds	r2, r7, r2
20000a76:	210f      	movs	r1, #15
20000a78:	0010      	movs	r0, r2
20000a7a:	4798      	blx	r3
20000a7c:	e04f      	b.n	20000b1e <main+0x922>
				else if(counter < delay_until_text + 6*long_text + 5*short_text + 3 + 2)
20000a7e:	4b70      	ldr	r3, [pc, #448]	; (20000c40 <main+0xa44>)
20000a80:	681a      	ldr	r2, [r3, #0]
20000a82:	0013      	movs	r3, r2
20000a84:	005b      	lsls	r3, r3, #1
20000a86:	189b      	adds	r3, r3, r2
20000a88:	005b      	lsls	r3, r3, #1
20000a8a:	001a      	movs	r2, r3
20000a8c:	4b6d      	ldr	r3, [pc, #436]	; (20000c44 <main+0xa48>)
20000a8e:	681b      	ldr	r3, [r3, #0]
20000a90:	18d1      	adds	r1, r2, r3
20000a92:	4b6d      	ldr	r3, [pc, #436]	; (20000c48 <main+0xa4c>)
20000a94:	681a      	ldr	r2, [r3, #0]
20000a96:	0013      	movs	r3, r2
20000a98:	009b      	lsls	r3, r3, #2
20000a9a:	189b      	adds	r3, r3, r2
20000a9c:	18cb      	adds	r3, r1, r3
20000a9e:	1d5a      	adds	r2, r3, #5
20000aa0:	4b6a      	ldr	r3, [pc, #424]	; (20000c4c <main+0xa50>)
20000aa2:	681b      	ldr	r3, [r3, #0]
20000aa4:	429a      	cmp	r2, r3
20000aa6:	dd0b      	ble.n	20000ac0 <main+0x8c4>
					text12.display(&text12, 15);
20000aa8:	4b6a      	ldr	r3, [pc, #424]	; (20000c54 <main+0xa58>)
20000aaa:	22c6      	movs	r2, #198	; 0xc6
20000aac:	0092      	lsls	r2, r2, #2
20000aae:	4694      	mov	ip, r2
20000ab0:	44bc      	add	ip, r7
20000ab2:	4463      	add	r3, ip
20000ab4:	691b      	ldr	r3, [r3, #16]
20000ab6:	1d3a      	adds	r2, r7, #4
20000ab8:	210f      	movs	r1, #15
20000aba:	0010      	movs	r0, r2
20000abc:	4798      	blx	r3
20000abe:	e02e      	b.n	20000b1e <main+0x922>
				else if(counter < delay_until_text + 7*long_text + 5*short_text + 6 + 2) {
20000ac0:	4b5f      	ldr	r3, [pc, #380]	; (20000c40 <main+0xa44>)
20000ac2:	681a      	ldr	r2, [r3, #0]
20000ac4:	0013      	movs	r3, r2
20000ac6:	00db      	lsls	r3, r3, #3
20000ac8:	1a9a      	subs	r2, r3, r2
20000aca:	4b5e      	ldr	r3, [pc, #376]	; (20000c44 <main+0xa48>)
20000acc:	681b      	ldr	r3, [r3, #0]
20000ace:	18d1      	adds	r1, r2, r3
20000ad0:	4b5d      	ldr	r3, [pc, #372]	; (20000c48 <main+0xa4c>)
20000ad2:	681a      	ldr	r2, [r3, #0]
20000ad4:	0013      	movs	r3, r2
20000ad6:	009b      	lsls	r3, r3, #2
20000ad8:	189b      	adds	r3, r3, r2
20000ada:	18cb      	adds	r3, r1, r3
20000adc:	3308      	adds	r3, #8
20000ade:	001a      	movs	r2, r3
20000ae0:	4b5a      	ldr	r3, [pc, #360]	; (20000c4c <main+0xa50>)
20000ae2:	681b      	ldr	r3, [r3, #0]
20000ae4:	429a      	cmp	r2, r3
20000ae6:	dd0c      	ble.n	20000b02 <main+0x906>
					text11.display(&text11, 20);
20000ae8:	4b5b      	ldr	r3, [pc, #364]	; (20000c58 <main+0xa5c>)
20000aea:	22c6      	movs	r2, #198	; 0xc6
20000aec:	0092      	lsls	r2, r2, #2
20000aee:	4694      	mov	ip, r2
20000af0:	44bc      	add	ip, r7
20000af2:	4463      	add	r3, ip
20000af4:	691b      	ldr	r3, [r3, #16]
20000af6:	2218      	movs	r2, #24
20000af8:	18ba      	adds	r2, r7, r2
20000afa:	2114      	movs	r1, #20
20000afc:	0010      	movs	r0, r2
20000afe:	4798      	blx	r3
20000b00:	e00d      	b.n	20000b1e <main+0x922>
				} else {
					if (read_DIL() == 0) {
20000b02:	f001 fccb 	bl	2000249c <read_DIL>
20000b06:	1e03      	subs	r3, r0, #0
20000b08:	d109      	bne.n	20000b1e <main+0x922>
						current_screen = GAME_SCREEN;
20000b0a:	4b54      	ldr	r3, [pc, #336]	; (20000c5c <main+0xa60>)
20000b0c:	2202      	movs	r2, #2
20000b0e:	601a      	str	r2, [r3, #0]
						random_seed = counter;
20000b10:	4b4e      	ldr	r3, [pc, #312]	; (20000c4c <main+0xa50>)
20000b12:	681a      	ldr	r2, [r3, #0]
20000b14:	4b52      	ldr	r3, [pc, #328]	; (20000c60 <main+0xa64>)
20000b16:	601a      	str	r2, [r3, #0]
						counter = 0;
20000b18:	4b4c      	ldr	r3, [pc, #304]	; (20000c4c <main+0xa50>)
20000b1a:	2200      	movs	r2, #0
20000b1c:	601a      	str	r2, [r3, #0]
					}
				}
				
				
				fire2.update(&fire2);
20000b1e:	4b51      	ldr	r3, [pc, #324]	; (20000c64 <main+0xa68>)
20000b20:	22c6      	movs	r2, #198	; 0xc6
20000b22:	0092      	lsls	r2, r2, #2
20000b24:	4694      	mov	ip, r2
20000b26:	44bc      	add	ip, r7
20000b28:	4463      	add	r3, ip
20000b2a:	68db      	ldr	r3, [r3, #12]
20000b2c:	22ba      	movs	r2, #186	; 0xba
20000b2e:	0052      	lsls	r2, r2, #1
20000b30:	18ba      	adds	r2, r7, r2
20000b32:	0010      	movs	r0, r2
20000b34:	4798      	blx	r3
				fire3.update(&fire3);
20000b36:	4b4c      	ldr	r3, [pc, #304]	; (20000c68 <main+0xa6c>)
20000b38:	22c6      	movs	r2, #198	; 0xc6
20000b3a:	0092      	lsls	r2, r2, #2
20000b3c:	4694      	mov	ip, r2
20000b3e:	44bc      	add	ip, r7
20000b40:	4463      	add	r3, ip
20000b42:	68db      	ldr	r3, [r3, #12]
20000b44:	22a8      	movs	r2, #168	; 0xa8
20000b46:	0052      	lsls	r2, r2, #1
20000b48:	18ba      	adds	r2, r7, r2
20000b4a:	0010      	movs	r0, r2
20000b4c:	4798      	blx	r3
				fire1.update(&fire1);
20000b4e:	4b47      	ldr	r3, [pc, #284]	; (20000c6c <main+0xa70>)
20000b50:	22c6      	movs	r2, #198	; 0xc6
20000b52:	0092      	lsls	r2, r2, #2
20000b54:	4694      	mov	ip, r2
20000b56:	44bc      	add	ip, r7
20000b58:	4463      	add	r3, ip
20000b5a:	68db      	ldr	r3, [r3, #12]
20000b5c:	2284      	movs	r2, #132	; 0x84
20000b5e:	0052      	lsls	r2, r2, #1
20000b60:	18ba      	adds	r2, r7, r2
20000b62:	0010      	movs	r0, r2
20000b64:	4798      	blx	r3
				fire4.update(&fire4);
20000b66:	4b42      	ldr	r3, [pc, #264]	; (20000c70 <main+0xa74>)
20000b68:	22c6      	movs	r2, #198	; 0xc6
20000b6a:	0092      	lsls	r2, r2, #2
20000b6c:	4694      	mov	ip, r2
20000b6e:	44bc      	add	ip, r7
20000b70:	4463      	add	r3, ip
20000b72:	68db      	ldr	r3, [r3, #12]
20000b74:	2296      	movs	r2, #150	; 0x96
20000b76:	0052      	lsls	r2, r2, #1
20000b78:	18ba      	adds	r2, r7, r2
20000b7a:	0010      	movs	r0, r2
20000b7c:	4798      	blx	r3
				bird.update(&bird);
20000b7e:	4b3d      	ldr	r3, [pc, #244]	; (20000c74 <main+0xa78>)
20000b80:	22c6      	movs	r2, #198	; 0xc6
20000b82:	0092      	lsls	r2, r2, #2
20000b84:	4694      	mov	ip, r2
20000b86:	44bc      	add	ip, r7
20000b88:	4463      	add	r3, ip
20000b8a:	68db      	ldr	r3, [r3, #12]
20000b8c:	22de      	movs	r2, #222	; 0xde
20000b8e:	0052      	lsls	r2, r2, #1
20000b90:	18ba      	adds	r2, r7, r2
20000b92:	0010      	movs	r0, r2
20000b94:	4798      	blx	r3
				bird.xPos -= 2;
20000b96:	4b37      	ldr	r3, [pc, #220]	; (20000c74 <main+0xa78>)
20000b98:	22c6      	movs	r2, #198	; 0xc6
20000b9a:	0092      	lsls	r2, r2, #2
20000b9c:	4694      	mov	ip, r2
20000b9e:	44bc      	add	ip, r7
20000ba0:	4463      	add	r3, ip
20000ba2:	685b      	ldr	r3, [r3, #4]
20000ba4:	1e9a      	subs	r2, r3, #2
20000ba6:	4b33      	ldr	r3, [pc, #204]	; (20000c74 <main+0xa78>)
20000ba8:	21c6      	movs	r1, #198	; 0xc6
20000baa:	0089      	lsls	r1, r1, #2
20000bac:	468c      	mov	ip, r1
20000bae:	44bc      	add	ip, r7
20000bb0:	4463      	add	r3, ip
20000bb2:	605a      	str	r2, [r3, #4]
				if (counter % 2 == 0) {
20000bb4:	4b25      	ldr	r3, [pc, #148]	; (20000c4c <main+0xa50>)
20000bb6:	681b      	ldr	r3, [r3, #0]
20000bb8:	001a      	movs	r2, r3
20000bba:	2301      	movs	r3, #1
20000bbc:	4013      	ands	r3, r2
20000bbe:	d13c      	bne.n	20000c3a <main+0xa3e>
					bird.yPos--;
20000bc0:	4b2c      	ldr	r3, [pc, #176]	; (20000c74 <main+0xa78>)
20000bc2:	22c6      	movs	r2, #198	; 0xc6
20000bc4:	0092      	lsls	r2, r2, #2
20000bc6:	4694      	mov	ip, r2
20000bc8:	44bc      	add	ip, r7
20000bca:	4463      	add	r3, ip
20000bcc:	689b      	ldr	r3, [r3, #8]
20000bce:	1e5a      	subs	r2, r3, #1
20000bd0:	4b28      	ldr	r3, [pc, #160]	; (20000c74 <main+0xa78>)
20000bd2:	21c6      	movs	r1, #198	; 0xc6
20000bd4:	0089      	lsls	r1, r1, #2
20000bd6:	468c      	mov	ip, r1
20000bd8:	44bc      	add	ip, r7
20000bda:	4463      	add	r3, ip
20000bdc:	609a      	str	r2, [r3, #8]
				}
				
				break;
20000bde:	e02c      	b.n	20000c3a <main+0xa3e>
				
			case GAME_SCREEN:
				
				counter++;
20000be0:	4b1a      	ldr	r3, [pc, #104]	; (20000c4c <main+0xa50>)
20000be2:	681b      	ldr	r3, [r3, #0]
20000be4:	1c5a      	adds	r2, r3, #1
20000be6:	4b19      	ldr	r3, [pc, #100]	; (20000c4c <main+0xa50>)
20000be8:	601a      	str	r2, [r3, #0]
				if(read_DIL_single( LIGHT_TRIGGER )) {
20000bea:	2006      	movs	r0, #6
20000bec:	f001 fc60 	bl	200024b0 <read_DIL_single>
20000bf0:	1e03      	subs	r3, r0, #0
20000bf2:	d006      	beq.n	20000c02 <main+0xa06>
					draw_game_object( &indoors2 );
20000bf4:	23f0      	movs	r3, #240	; 0xf0
20000bf6:	005b      	lsls	r3, r3, #1
20000bf8:	18fb      	adds	r3, r7, r3
20000bfa:	0018      	movs	r0, r3
20000bfc:	f001 fba4 	bl	20002348 <draw_game_object>
20000c00:	e005      	b.n	20000c0e <main+0xa12>
				} else {
					draw_game_object( &indoors );
20000c02:	2381      	movs	r3, #129	; 0x81
20000c04:	009b      	lsls	r3, r3, #2
20000c06:	18fb      	adds	r3, r7, r3
20000c08:	0018      	movs	r0, r3
20000c0a:	f001 fb9d 	bl	20002348 <draw_game_object>
				}
				
				draw_game_object( &player );
20000c0e:	23cc      	movs	r3, #204	; 0xcc
20000c10:	005b      	lsls	r3, r3, #1
20000c12:	18fb      	adds	r3, r7, r3
20000c14:	0018      	movs	r0, r3
20000c16:	f001 fb97 	bl	20002348 <draw_game_object>
				show_frame(1);
20000c1a:	2001      	movs	r0, #1
20000c1c:	f001 fbd5 	bl	200023ca <show_frame>
				
				
				player.update(&player);
20000c20:	4b15      	ldr	r3, [pc, #84]	; (20000c78 <main+0xa7c>)
20000c22:	22c6      	movs	r2, #198	; 0xc6
20000c24:	0092      	lsls	r2, r2, #2
20000c26:	4694      	mov	ip, r2
20000c28:	44bc      	add	ip, r7
20000c2a:	4463      	add	r3, ip
20000c2c:	68db      	ldr	r3, [r3, #12]
20000c2e:	22cc      	movs	r2, #204	; 0xcc
20000c30:	0052      	lsls	r2, r2, #1
20000c32:	18ba      	adds	r2, r7, r2
20000c34:	0010      	movs	r0, r2
20000c36:	4798      	blx	r3
				
				break;
20000c38:	e000      	b.n	20000c3c <main+0xa40>
				break;
20000c3a:	46c0      	nop			; (mov r8, r8)
		switch(current_screen) {
20000c3c:	e54d      	b.n	200006da <main+0x4de>
20000c3e:	46c0      	nop			; (mov r8, r8)
20000c40:	200068c8 	andcs	r6, r0, r8, asr #17
20000c44:	200068c4 	andcs	r6, r0, r4, asr #17
20000c48:	200068cc 	andcs	r6, r0, ip, asr #17
20000c4c:	20002e40 	andcs	r2, r0, r0, asr #28
20000c50:	fffffd14 			; <UNDEFINED> instruction: 0xfffffd14
20000c54:	fffffcec 			; <UNDEFINED> instruction: 0xfffffcec
20000c58:	fffffd00 			; <UNDEFINED> instruction: 0xfffffd00
20000c5c:	200068c0 	andcs	r6, r0, r0, asr #17
20000c60:	20002f0c 	andcs	r2, r0, ip, lsl #30
20000c64:	fffffe5c 			; <UNDEFINED> instruction: 0xfffffe5c
20000c68:	fffffe38 			; <UNDEFINED> instruction: 0xfffffe38
20000c6c:	fffffdf0 			; <UNDEFINED> instruction: 0xfffffdf0
20000c70:	fffffe14 			; <UNDEFINED> instruction: 0xfffffe14
20000c74:	fffffea4 			; <UNDEFINED> instruction: 0xfffffea4
20000c78:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80

20000c7c <render>:
GameObject* gameObjects[100];
int nGameObjects = 0;


void render(GameObject* this)
{
20000c7c:	b580      	push	{r7, lr}
20000c7e:	b082      	sub	sp, #8
20000c80:	af00      	add	r7, sp, #0
20000c82:	6078      	str	r0, [r7, #4]
    
}
20000c84:	46c0      	nop			; (mov r8, r8)
20000c86:	46bd      	mov	sp, r7
20000c88:	b002      	add	sp, #8
20000c8a:	bd80      	pop	{r7, pc}

20000c8c <gameObjectUpdate>:

void gameObjectUpdate(GameObject *this) {
20000c8c:	b580      	push	{r7, lr}
20000c8e:	b082      	sub	sp, #8
20000c90:	af00      	add	r7, sp, #0
20000c92:	6078      	str	r0, [r7, #4]
	this->animation_counter++;
20000c94:	687b      	ldr	r3, [r7, #4]
20000c96:	6a1b      	ldr	r3, [r3, #32]
20000c98:	1c5a      	adds	r2, r3, #1
20000c9a:	687b      	ldr	r3, [r7, #4]
20000c9c:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
20000c9e:	687b      	ldr	r3, [r7, #4]
20000ca0:	6a1a      	ldr	r2, [r3, #32]
20000ca2:	687b      	ldr	r3, [r7, #4]
20000ca4:	69db      	ldr	r3, [r3, #28]
20000ca6:	429a      	cmp	r2, r3
20000ca8:	d10f      	bne.n	20000cca <gameObjectUpdate+0x3e>
		this->animation_counter = 0;
20000caa:	687b      	ldr	r3, [r7, #4]
20000cac:	2200      	movs	r2, #0
20000cae:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
20000cb0:	687b      	ldr	r3, [r7, #4]
20000cb2:	695b      	ldr	r3, [r3, #20]
20000cb4:	1c5a      	adds	r2, r3, #1
20000cb6:	687b      	ldr	r3, [r7, #4]
20000cb8:	699b      	ldr	r3, [r3, #24]
20000cba:	0019      	movs	r1, r3
20000cbc:	0010      	movs	r0, r2
20000cbe:	f002 f8b9 	bl	20002e34 <__aeabi_idivmod>
20000cc2:	000b      	movs	r3, r1
20000cc4:	001a      	movs	r2, r3
20000cc6:	687b      	ldr	r3, [r7, #4]
20000cc8:	615a      	str	r2, [r3, #20]
	}
}
20000cca:	46c0      	nop			; (mov r8, r8)
20000ccc:	46bd      	mov	sp, r7
20000cce:	b002      	add	sp, #8
20000cd0:	bd80      	pop	{r7, pc}
	...

20000cd4 <initSprites>:
Image fire2Image;
Image fire3Image;
Image fire4Image;
Image fire5Image;
Image fireImages[5];
static void initSprites( void ) {	
20000cd4:	b580      	push	{r7, lr}
20000cd6:	b08c      	sub	sp, #48	; 0x30
20000cd8:	af00      	add	r7, sp, #0
	sprite *pointer0 = &tempFireBlack;
20000cda:	4b3e      	ldr	r3, [pc, #248]	; (20000dd4 <initSprites+0x100>)
20000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer0, fire_black_2_bits, fire1_gray_width, fire1_gray_height);
20000cde:	493e      	ldr	r1, [pc, #248]	; (20000dd8 <initSprites+0x104>)
20000ce0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20000ce2:	230c      	movs	r3, #12
20000ce4:	2208      	movs	r2, #8
20000ce6:	f001 fbb9 	bl	2000245c <load_sprite>
	fireBlack = pointer0;
20000cea:	4b3c      	ldr	r3, [pc, #240]	; (20000ddc <initSprites+0x108>)
20000cec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20000cee:	601a      	str	r2, [r3, #0]
	
	sprite *pointer1 = &tempFire1Gray;
20000cf0:	4b3b      	ldr	r3, [pc, #236]	; (20000de0 <initSprites+0x10c>)
20000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer1, fire1_gray_bits, fire1_gray_width, fire1_gray_height);
20000cf4:	493b      	ldr	r1, [pc, #236]	; (20000de4 <initSprites+0x110>)
20000cf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20000cf8:	230c      	movs	r3, #12
20000cfa:	2208      	movs	r2, #8
20000cfc:	f001 fbae 	bl	2000245c <load_sprite>
	fire1Gray = pointer1;
20000d00:	4b39      	ldr	r3, [pc, #228]	; (20000de8 <initSprites+0x114>)
20000d02:	6aba      	ldr	r2, [r7, #40]	; 0x28
20000d04:	601a      	str	r2, [r3, #0]

	sprite *pointer2 = &tempFire1Light;
20000d06:	4b39      	ldr	r3, [pc, #228]	; (20000dec <initSprites+0x118>)
20000d08:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer2, fire1_light_bits, fire1_gray_width, fire1_gray_height);
20000d0a:	4939      	ldr	r1, [pc, #228]	; (20000df0 <initSprites+0x11c>)
20000d0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
20000d0e:	230c      	movs	r3, #12
20000d10:	2208      	movs	r2, #8
20000d12:	f001 fba3 	bl	2000245c <load_sprite>
	fire1Light = pointer2;
20000d16:	4b37      	ldr	r3, [pc, #220]	; (20000df4 <initSprites+0x120>)
20000d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000d1a:	601a      	str	r2, [r3, #0]

	sprite *pointer3 = &tempFire2Gray;
20000d1c:	4b36      	ldr	r3, [pc, #216]	; (20000df8 <initSprites+0x124>)
20000d1e:	623b      	str	r3, [r7, #32]
	load_sprite(pointer3, fire2_gray_bits, fire1_gray_width, fire1_gray_height);
20000d20:	4936      	ldr	r1, [pc, #216]	; (20000dfc <initSprites+0x128>)
20000d22:	6a38      	ldr	r0, [r7, #32]
20000d24:	230c      	movs	r3, #12
20000d26:	2208      	movs	r2, #8
20000d28:	f001 fb98 	bl	2000245c <load_sprite>
	fire2Gray = pointer3;
20000d2c:	4b34      	ldr	r3, [pc, #208]	; (20000e00 <initSprites+0x12c>)
20000d2e:	6a3a      	ldr	r2, [r7, #32]
20000d30:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempFire2Light;
20000d32:	4b34      	ldr	r3, [pc, #208]	; (20000e04 <initSprites+0x130>)
20000d34:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer4, fire2_light_bits, fire1_gray_width, fire1_gray_height);
20000d36:	4934      	ldr	r1, [pc, #208]	; (20000e08 <initSprites+0x134>)
20000d38:	69f8      	ldr	r0, [r7, #28]
20000d3a:	230c      	movs	r3, #12
20000d3c:	2208      	movs	r2, #8
20000d3e:	f001 fb8d 	bl	2000245c <load_sprite>
	fire2Light = pointer4;
20000d42:	4b32      	ldr	r3, [pc, #200]	; (20000e0c <initSprites+0x138>)
20000d44:	69fa      	ldr	r2, [r7, #28]
20000d46:	601a      	str	r2, [r3, #0]

	sprite *pointer5 = &tempFire3Gray;
20000d48:	4b31      	ldr	r3, [pc, #196]	; (20000e10 <initSprites+0x13c>)
20000d4a:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer5, fire3_gray_bits, fire1_gray_width, fire1_gray_height);
20000d4c:	4931      	ldr	r1, [pc, #196]	; (20000e14 <initSprites+0x140>)
20000d4e:	69b8      	ldr	r0, [r7, #24]
20000d50:	230c      	movs	r3, #12
20000d52:	2208      	movs	r2, #8
20000d54:	f001 fb82 	bl	2000245c <load_sprite>
	fire3Gray = pointer5;
20000d58:	4b2f      	ldr	r3, [pc, #188]	; (20000e18 <initSprites+0x144>)
20000d5a:	69ba      	ldr	r2, [r7, #24]
20000d5c:	601a      	str	r2, [r3, #0]

	sprite *pointer6 = &tempFire3Light;
20000d5e:	4b2f      	ldr	r3, [pc, #188]	; (20000e1c <initSprites+0x148>)
20000d60:	617b      	str	r3, [r7, #20]
	load_sprite(pointer6, fire3_light_bits, fire1_gray_width, fire1_gray_height);
20000d62:	492f      	ldr	r1, [pc, #188]	; (20000e20 <initSprites+0x14c>)
20000d64:	6978      	ldr	r0, [r7, #20]
20000d66:	230c      	movs	r3, #12
20000d68:	2208      	movs	r2, #8
20000d6a:	f001 fb77 	bl	2000245c <load_sprite>
	fire3Light = pointer6;
20000d6e:	4b2d      	ldr	r3, [pc, #180]	; (20000e24 <initSprites+0x150>)
20000d70:	697a      	ldr	r2, [r7, #20]
20000d72:	601a      	str	r2, [r3, #0]

	sprite *pointer7 = &tempFire4Gray;
20000d74:	4b2c      	ldr	r3, [pc, #176]	; (20000e28 <initSprites+0x154>)
20000d76:	613b      	str	r3, [r7, #16]
	load_sprite(pointer7, fire4_gray_bits, fire1_gray_width, fire1_gray_height);
20000d78:	492c      	ldr	r1, [pc, #176]	; (20000e2c <initSprites+0x158>)
20000d7a:	6938      	ldr	r0, [r7, #16]
20000d7c:	230c      	movs	r3, #12
20000d7e:	2208      	movs	r2, #8
20000d80:	f001 fb6c 	bl	2000245c <load_sprite>
	fire4Gray = pointer7;
20000d84:	4b2a      	ldr	r3, [pc, #168]	; (20000e30 <initSprites+0x15c>)
20000d86:	693a      	ldr	r2, [r7, #16]
20000d88:	601a      	str	r2, [r3, #0]

	sprite *pointer8 = &tempFire4Light;
20000d8a:	4b2a      	ldr	r3, [pc, #168]	; (20000e34 <initSprites+0x160>)
20000d8c:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer8, fire4_light_bits, fire1_gray_width, fire1_gray_height);
20000d8e:	492a      	ldr	r1, [pc, #168]	; (20000e38 <initSprites+0x164>)
20000d90:	68f8      	ldr	r0, [r7, #12]
20000d92:	230c      	movs	r3, #12
20000d94:	2208      	movs	r2, #8
20000d96:	f001 fb61 	bl	2000245c <load_sprite>
	fire4Light = pointer8;
20000d9a:	4b28      	ldr	r3, [pc, #160]	; (20000e3c <initSprites+0x168>)
20000d9c:	68fa      	ldr	r2, [r7, #12]
20000d9e:	601a      	str	r2, [r3, #0]

	sprite *pointer9 = &tempFire5Gray;
20000da0:	4b27      	ldr	r3, [pc, #156]	; (20000e40 <initSprites+0x16c>)
20000da2:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer9, fire5_gray_bits, fire1_gray_width, fire1_gray_height);
20000da4:	4927      	ldr	r1, [pc, #156]	; (20000e44 <initSprites+0x170>)
20000da6:	68b8      	ldr	r0, [r7, #8]
20000da8:	230c      	movs	r3, #12
20000daa:	2208      	movs	r2, #8
20000dac:	f001 fb56 	bl	2000245c <load_sprite>
	fire5Gray = pointer9;
20000db0:	4b25      	ldr	r3, [pc, #148]	; (20000e48 <initSprites+0x174>)
20000db2:	68ba      	ldr	r2, [r7, #8]
20000db4:	601a      	str	r2, [r3, #0]

	sprite *pointer10 = &tempFire5Light;
20000db6:	4b25      	ldr	r3, [pc, #148]	; (20000e4c <initSprites+0x178>)
20000db8:	607b      	str	r3, [r7, #4]
	load_sprite(pointer10, fire5_light_bits, fire1_gray_width, fire1_gray_height);
20000dba:	4925      	ldr	r1, [pc, #148]	; (20000e50 <initSprites+0x17c>)
20000dbc:	6878      	ldr	r0, [r7, #4]
20000dbe:	230c      	movs	r3, #12
20000dc0:	2208      	movs	r2, #8
20000dc2:	f001 fb4b 	bl	2000245c <load_sprite>
	fire5Light = pointer10;
20000dc6:	4b23      	ldr	r3, [pc, #140]	; (20000e54 <initSprites+0x180>)
20000dc8:	687a      	ldr	r2, [r7, #4]
20000dca:	601a      	str	r2, [r3, #0]
}
20000dcc:	46c0      	nop			; (mov r8, r8)
20000dce:	46bd      	mov	sp, r7
20000dd0:	b00c      	add	sp, #48	; 0x30
20000dd2:	bd80      	pop	{r7, pc}
20000dd4:	200030f0 	strdcs	r3, [r0], -r0
20000dd8:	200068d0 	ldrdcs	r6, [r0], -r0
20000ddc:	200031e8 	andcs	r3, r0, r8, ror #3
20000de0:	200031dc 	ldrdcs	r3, [r0], -ip
20000de4:	200068dc 	ldrdcs	r6, [r0], -ip
20000de8:	20003200 	andcs	r3, r0, r0, lsl #4
20000dec:	200031b8 			; <UNDEFINED> instruction: 0x200031b8
20000df0:	200068e8 	andcs	r6, r0, r8, ror #17
20000df4:	200030b8 	strhcs	r3, [r0], -r8
20000df8:	200030e4 	andcs	r3, r0, r4, ror #1
20000dfc:	200068f4 	strdcs	r6, [r0], -r4
20000e00:	200031fc 	strdcs	r3, [r0], -ip
20000e04:	200031ec 	andcs	r3, r0, ip, ror #3
20000e08:	20006900 	andcs	r6, r0, r0, lsl #18
20000e0c:	200031d4 	ldrdcs	r3, [r0], -r4
20000e10:	2000319c 	mulcs	r0, ip, r1
20000e14:	2000690c 	andcs	r6, r0, ip, lsl #18
20000e18:	200030c8 	andcs	r3, r0, r8, asr #1
20000e1c:	200030bc 	strhcs	r3, [r0], -ip
20000e20:	20006918 	andcs	r6, r0, r8, lsl r9
20000e24:	200031f8 	strdcs	r3, [r0], -r8
20000e28:	200030cc 	andcs	r3, r0, ip, asr #1
20000e2c:	20006924 	andcs	r6, r0, r4, lsr #18
20000e30:	200031b4 			; <UNDEFINED> instruction: 0x200031b4
20000e34:	20003108 	andcs	r3, r0, r8, lsl #2
20000e38:	20006930 	andcs	r6, r0, r0, lsr r9
20000e3c:	20003120 	andcs	r3, r0, r0, lsr #2
20000e40:	20003190 	mulcs	r0, r0, r1
20000e44:	2000693c 	andcs	r6, r0, ip, lsr r9
20000e48:	200031d0 	ldrdcs	r3, [r0], -r0
20000e4c:	200031c4 	andcs	r3, r0, r4, asr #3
20000e50:	20006948 	andcs	r6, r0, r8, asr #18
20000e54:	200031d8 	ldrdcs	r3, [r0], -r8

20000e58 <init_fire>:
	
void init_fire( GameObject *fireObj ) {
20000e58:	b590      	push	{r4, r7, lr}
20000e5a:	b083      	sub	sp, #12
20000e5c:	af00      	add	r7, sp, #0
20000e5e:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20000e60:	4b30      	ldr	r3, [pc, #192]	; (20000f24 <init_fire+0xcc>)
20000e62:	681b      	ldr	r3, [r3, #0]
20000e64:	2b00      	cmp	r3, #0
20000e66:	d049      	beq.n	20000efc <init_fire+0xa4>
		initSprites();
20000e68:	f7ff ff34 	bl	20000cd4 <initSprites>
		firstTime = 0;			
20000e6c:	4b2d      	ldr	r3, [pc, #180]	; (20000f24 <init_fire+0xcc>)
20000e6e:	2200      	movs	r2, #0
20000e70:	601a      	str	r2, [r3, #0]

		fireImages[0] = fire1Image;
20000e72:	4b2d      	ldr	r3, [pc, #180]	; (20000f28 <init_fire+0xd0>)
20000e74:	4a2d      	ldr	r2, [pc, #180]	; (20000f2c <init_fire+0xd4>)
20000e76:	ca13      	ldmia	r2!, {r0, r1, r4}
20000e78:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[1] = fire2Image;
20000e7a:	4b2b      	ldr	r3, [pc, #172]	; (20000f28 <init_fire+0xd0>)
20000e7c:	4a2c      	ldr	r2, [pc, #176]	; (20000f30 <init_fire+0xd8>)
20000e7e:	330c      	adds	r3, #12
20000e80:	ca13      	ldmia	r2!, {r0, r1, r4}
20000e82:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[2] = fire3Image;
20000e84:	4b28      	ldr	r3, [pc, #160]	; (20000f28 <init_fire+0xd0>)
20000e86:	4a2b      	ldr	r2, [pc, #172]	; (20000f34 <init_fire+0xdc>)
20000e88:	3318      	adds	r3, #24
20000e8a:	ca13      	ldmia	r2!, {r0, r1, r4}
20000e8c:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[3] = fire4Image;
20000e8e:	4b26      	ldr	r3, [pc, #152]	; (20000f28 <init_fire+0xd0>)
20000e90:	4a29      	ldr	r2, [pc, #164]	; (20000f38 <init_fire+0xe0>)
20000e92:	3324      	adds	r3, #36	; 0x24
20000e94:	ca13      	ldmia	r2!, {r0, r1, r4}
20000e96:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[4] = fire5Image;
20000e98:	4b23      	ldr	r3, [pc, #140]	; (20000f28 <init_fire+0xd0>)
20000e9a:	4a28      	ldr	r2, [pc, #160]	; (20000f3c <init_fire+0xe4>)
20000e9c:	3330      	adds	r3, #48	; 0x30
20000e9e:	ca13      	ldmia	r2!, {r0, r1, r4}
20000ea0:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&fireImages[0], fire1Gray, fire1Light, fireBlack);
20000ea2:	4b27      	ldr	r3, [pc, #156]	; (20000f40 <init_fire+0xe8>)
20000ea4:	6819      	ldr	r1, [r3, #0]
20000ea6:	4b27      	ldr	r3, [pc, #156]	; (20000f44 <init_fire+0xec>)
20000ea8:	681a      	ldr	r2, [r3, #0]
20000eaa:	4b27      	ldr	r3, [pc, #156]	; (20000f48 <init_fire+0xf0>)
20000eac:	681b      	ldr	r3, [r3, #0]
20000eae:	481e      	ldr	r0, [pc, #120]	; (20000f28 <init_fire+0xd0>)
20000eb0:	f001 fac0 	bl	20002434 <load_image>
		load_image(&fireImages[1], fire2Gray, fire2Light, fireBlack);
20000eb4:	4b25      	ldr	r3, [pc, #148]	; (20000f4c <init_fire+0xf4>)
20000eb6:	6819      	ldr	r1, [r3, #0]
20000eb8:	4b25      	ldr	r3, [pc, #148]	; (20000f50 <init_fire+0xf8>)
20000eba:	681a      	ldr	r2, [r3, #0]
20000ebc:	4b22      	ldr	r3, [pc, #136]	; (20000f48 <init_fire+0xf0>)
20000ebe:	681b      	ldr	r3, [r3, #0]
20000ec0:	4824      	ldr	r0, [pc, #144]	; (20000f54 <init_fire+0xfc>)
20000ec2:	f001 fab7 	bl	20002434 <load_image>
		load_image(&fireImages[2], fire3Gray, fire3Light, fireBlack);
20000ec6:	4b24      	ldr	r3, [pc, #144]	; (20000f58 <init_fire+0x100>)
20000ec8:	6819      	ldr	r1, [r3, #0]
20000eca:	4b24      	ldr	r3, [pc, #144]	; (20000f5c <init_fire+0x104>)
20000ecc:	681a      	ldr	r2, [r3, #0]
20000ece:	4b1e      	ldr	r3, [pc, #120]	; (20000f48 <init_fire+0xf0>)
20000ed0:	681b      	ldr	r3, [r3, #0]
20000ed2:	4823      	ldr	r0, [pc, #140]	; (20000f60 <init_fire+0x108>)
20000ed4:	f001 faae 	bl	20002434 <load_image>
		load_image(&fireImages[3], fire4Gray, fire4Light, fireBlack);
20000ed8:	4b22      	ldr	r3, [pc, #136]	; (20000f64 <init_fire+0x10c>)
20000eda:	6819      	ldr	r1, [r3, #0]
20000edc:	4b22      	ldr	r3, [pc, #136]	; (20000f68 <init_fire+0x110>)
20000ede:	681a      	ldr	r2, [r3, #0]
20000ee0:	4b19      	ldr	r3, [pc, #100]	; (20000f48 <init_fire+0xf0>)
20000ee2:	681b      	ldr	r3, [r3, #0]
20000ee4:	4821      	ldr	r0, [pc, #132]	; (20000f6c <init_fire+0x114>)
20000ee6:	f001 faa5 	bl	20002434 <load_image>
		load_image(&fireImages[4], fire5Gray, fire5Light, fireBlack);
20000eea:	4b21      	ldr	r3, [pc, #132]	; (20000f70 <init_fire+0x118>)
20000eec:	6819      	ldr	r1, [r3, #0]
20000eee:	4b21      	ldr	r3, [pc, #132]	; (20000f74 <init_fire+0x11c>)
20000ef0:	681a      	ldr	r2, [r3, #0]
20000ef2:	4b15      	ldr	r3, [pc, #84]	; (20000f48 <init_fire+0xf0>)
20000ef4:	681b      	ldr	r3, [r3, #0]
20000ef6:	4820      	ldr	r0, [pc, #128]	; (20000f78 <init_fire+0x120>)
20000ef8:	f001 fa9c 	bl	20002434 <load_image>
	}
	
	fireObj->images = fireImages;
20000efc:	687b      	ldr	r3, [r7, #4]
20000efe:	4a0a      	ldr	r2, [pc, #40]	; (20000f28 <init_fire+0xd0>)
20000f00:	601a      	str	r2, [r3, #0]

	fireObj->current_frame = 0;
20000f02:	687b      	ldr	r3, [r7, #4]
20000f04:	2200      	movs	r2, #0
20000f06:	615a      	str	r2, [r3, #20]
	fireObj->n_frames = 5;
20000f08:	687b      	ldr	r3, [r7, #4]
20000f0a:	2205      	movs	r2, #5
20000f0c:	619a      	str	r2, [r3, #24]
	fireObj->animation_speed = 1;
20000f0e:	687b      	ldr	r3, [r7, #4]
20000f10:	2201      	movs	r2, #1
20000f12:	61da      	str	r2, [r3, #28]
	fireObj->animation_counter = 0;
20000f14:	687b      	ldr	r3, [r7, #4]
20000f16:	2200      	movs	r2, #0
20000f18:	621a      	str	r2, [r3, #32]
}
20000f1a:	46c0      	nop			; (mov r8, r8)
20000f1c:	46bd      	mov	sp, r7
20000f1e:	b003      	add	sp, #12
20000f20:	bd90      	pop	{r4, r7, pc}
20000f22:	46c0      	nop			; (mov r8, r8)
20000f24:	20006954 	andcs	r6, r0, r4, asr r9
20000f28:	20003154 	andcs	r3, r0, r4, asr r1
20000f2c:	20003114 	andcs	r3, r0, r4, lsl r1
20000f30:	200030d8 	ldrdcs	r3, [r0], -r8
20000f34:	200030fc 	strdcs	r3, [r0], -ip
20000f38:	200031a8 	andcs	r3, r0, r8, lsr #3
20000f3c:	20003148 	andcs	r3, r0, r8, asr #2
20000f40:	20003200 	andcs	r3, r0, r0, lsl #4
20000f44:	200030b8 	strhcs	r3, [r0], -r8
20000f48:	200031e8 	andcs	r3, r0, r8, ror #3
20000f4c:	200031fc 	strdcs	r3, [r0], -ip
20000f50:	200031d4 	ldrdcs	r3, [r0], -r4
20000f54:	20003160 	andcs	r3, r0, r0, ror #2
20000f58:	200030c8 	andcs	r3, r0, r8, asr #1
20000f5c:	200031f8 	strdcs	r3, [r0], -r8
20000f60:	2000316c 	andcs	r3, r0, ip, ror #2
20000f64:	200031b4 			; <UNDEFINED> instruction: 0x200031b4
20000f68:	20003120 	andcs	r3, r0, r0, lsr #2
20000f6c:	20003178 	andcs	r3, r0, r8, ror r1
20000f70:	200031d0 	ldrdcs	r3, [r0], -r0
20000f74:	200031d8 	ldrdcs	r3, [r0], -r8
20000f78:	20003184 	andcs	r3, r0, r4, lsl #3

20000f7c <playerUpdate>:
#include "gpio.h"
#include "controls.h"
#include "gameobject.h"
#include "player.h"

void playerUpdate(GameObject *this) {
20000f7c:	b580      	push	{r7, lr}
20000f7e:	b082      	sub	sp, #8
20000f80:	af00      	add	r7, sp, #0
20000f82:	6078      	str	r0, [r7, #4]
	this->animation_counter++;
20000f84:	687b      	ldr	r3, [r7, #4]
20000f86:	6a1b      	ldr	r3, [r3, #32]
20000f88:	1c5a      	adds	r2, r3, #1
20000f8a:	687b      	ldr	r3, [r7, #4]
20000f8c:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
20000f8e:	687b      	ldr	r3, [r7, #4]
20000f90:	6a1a      	ldr	r2, [r3, #32]
20000f92:	687b      	ldr	r3, [r7, #4]
20000f94:	69db      	ldr	r3, [r3, #28]
20000f96:	429a      	cmp	r2, r3
20000f98:	d10f      	bne.n	20000fba <playerUpdate+0x3e>
		this->animation_counter = 0;
20000f9a:	687b      	ldr	r3, [r7, #4]
20000f9c:	2200      	movs	r2, #0
20000f9e:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
20000fa0:	687b      	ldr	r3, [r7, #4]
20000fa2:	695b      	ldr	r3, [r3, #20]
20000fa4:	1c5a      	adds	r2, r3, #1
20000fa6:	687b      	ldr	r3, [r7, #4]
20000fa8:	699b      	ldr	r3, [r3, #24]
20000faa:	0019      	movs	r1, r3
20000fac:	0010      	movs	r0, r2
20000fae:	f001 ff41 	bl	20002e34 <__aeabi_idivmod>
20000fb2:	000b      	movs	r3, r1
20000fb4:	001a      	movs	r2, r3
20000fb6:	687b      	ldr	r3, [r7, #4]
20000fb8:	615a      	str	r2, [r3, #20]
	
	static lastRightValue = 0;
	static lastLeftValue = 0; 
	static speed = 0;
	
	if (!lastRightValue && read_DIL_single(RIGHT_TRIGGER)){
20000fba:	4b23      	ldr	r3, [pc, #140]	; (20001048 <playerUpdate+0xcc>)
20000fbc:	681b      	ldr	r3, [r3, #0]
20000fbe:	2b00      	cmp	r3, #0
20000fc0:	d109      	bne.n	20000fd6 <playerUpdate+0x5a>
20000fc2:	2000      	movs	r0, #0
20000fc4:	f001 fa74 	bl	200024b0 <read_DIL_single>
20000fc8:	1e03      	subs	r3, r0, #0
20000fca:	d004      	beq.n	20000fd6 <playerUpdate+0x5a>
		speed += SPEED_ADD;
20000fcc:	4b1f      	ldr	r3, [pc, #124]	; (2000104c <playerUpdate+0xd0>)
20000fce:	681b      	ldr	r3, [r3, #0]
20000fd0:	1cda      	adds	r2, r3, #3
20000fd2:	4b1e      	ldr	r3, [pc, #120]	; (2000104c <playerUpdate+0xd0>)
20000fd4:	601a      	str	r2, [r3, #0]
	}
	
	if (!lastLeftValue && read_DIL_single(LEFT_TRIGGER)){
20000fd6:	4b1e      	ldr	r3, [pc, #120]	; (20001050 <playerUpdate+0xd4>)
20000fd8:	681b      	ldr	r3, [r3, #0]
20000fda:	2b00      	cmp	r3, #0
20000fdc:	d109      	bne.n	20000ff2 <playerUpdate+0x76>
20000fde:	2007      	movs	r0, #7
20000fe0:	f001 fa66 	bl	200024b0 <read_DIL_single>
20000fe4:	1e03      	subs	r3, r0, #0
20000fe6:	d004      	beq.n	20000ff2 <playerUpdate+0x76>
		speed -= SPEED_ADD;
20000fe8:	4b18      	ldr	r3, [pc, #96]	; (2000104c <playerUpdate+0xd0>)
20000fea:	681b      	ldr	r3, [r3, #0]
20000fec:	1eda      	subs	r2, r3, #3
20000fee:	4b17      	ldr	r3, [pc, #92]	; (2000104c <playerUpdate+0xd0>)
20000ff0:	601a      	str	r2, [r3, #0]
	}
	
	this->xPos += speed;
20000ff2:	687b      	ldr	r3, [r7, #4]
20000ff4:	685a      	ldr	r2, [r3, #4]
20000ff6:	4b15      	ldr	r3, [pc, #84]	; (2000104c <playerUpdate+0xd0>)
20000ff8:	681b      	ldr	r3, [r3, #0]
20000ffa:	18d2      	adds	r2, r2, r3
20000ffc:	687b      	ldr	r3, [r7, #4]
20000ffe:	605a      	str	r2, [r3, #4]
	
	if (speed > 0){
20001000:	4b12      	ldr	r3, [pc, #72]	; (2000104c <playerUpdate+0xd0>)
20001002:	681b      	ldr	r3, [r3, #0]
20001004:	2b00      	cmp	r3, #0
20001006:	dd05      	ble.n	20001014 <playerUpdate+0x98>
		speed--;
20001008:	4b10      	ldr	r3, [pc, #64]	; (2000104c <playerUpdate+0xd0>)
2000100a:	681b      	ldr	r3, [r3, #0]
2000100c:	1e5a      	subs	r2, r3, #1
2000100e:	4b0f      	ldr	r3, [pc, #60]	; (2000104c <playerUpdate+0xd0>)
20001010:	601a      	str	r2, [r3, #0]
20001012:	e008      	b.n	20001026 <playerUpdate+0xaa>
	}
	else if (speed < 0){
20001014:	4b0d      	ldr	r3, [pc, #52]	; (2000104c <playerUpdate+0xd0>)
20001016:	681b      	ldr	r3, [r3, #0]
20001018:	2b00      	cmp	r3, #0
2000101a:	da04      	bge.n	20001026 <playerUpdate+0xaa>
		speed++;
2000101c:	4b0b      	ldr	r3, [pc, #44]	; (2000104c <playerUpdate+0xd0>)
2000101e:	681b      	ldr	r3, [r3, #0]
20001020:	1c5a      	adds	r2, r3, #1
20001022:	4b0a      	ldr	r3, [pc, #40]	; (2000104c <playerUpdate+0xd0>)
20001024:	601a      	str	r2, [r3, #0]
	}
	
	lastRightValue = read_DIL_single(RIGHT_TRIGGER);
20001026:	2000      	movs	r0, #0
20001028:	f001 fa42 	bl	200024b0 <read_DIL_single>
2000102c:	0002      	movs	r2, r0
2000102e:	4b06      	ldr	r3, [pc, #24]	; (20001048 <playerUpdate+0xcc>)
20001030:	601a      	str	r2, [r3, #0]
	lastLeftValue = read_DIL_single(LEFT_TRIGGER);
20001032:	2007      	movs	r0, #7
20001034:	f001 fa3c 	bl	200024b0 <read_DIL_single>
20001038:	0002      	movs	r2, r0
2000103a:	4b05      	ldr	r3, [pc, #20]	; (20001050 <playerUpdate+0xd4>)
2000103c:	601a      	str	r2, [r3, #0]
	
2000103e:	46c0      	nop			; (mov r8, r8)
20001040:	46bd      	mov	sp, r7
20001042:	b002      	add	sp, #8
20001044:	bd80      	pop	{r7, pc}
20001046:	46c0      	nop			; (mov r8, r8)
20001048:	20002e48 	andcs	r2, r0, r8, asr #28
2000104c:	20002e4c 	andcs	r2, r0, ip, asr #28
20001050:	20002e50 	andcs	r2, r0, r0, asr lr

20001054 <initSprites>:
Image bird5Image;
Image bird6Image;
//Image bird7Image;
//Image bird8Image;
Image birdImages[6];
static void initSprites( void ) {	
20001054:	b580      	push	{r7, lr}
20001056:	b090      	sub	sp, #64	; 0x40
20001058:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempBirdLight;
2000105a:	4b54      	ldr	r3, [pc, #336]	; (200011ac <initSprites+0x158>)
2000105c:	63fb      	str	r3, [r7, #60]	; 0x3c
	load_sprite(pointer11, bird1_light_bits, bird1_black_width, bird1_black_height);
2000105e:	4954      	ldr	r1, [pc, #336]	; (200011b0 <initSprites+0x15c>)
20001060:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
20001062:	2319      	movs	r3, #25
20001064:	2219      	movs	r2, #25
20001066:	f001 f9f9 	bl	2000245c <load_sprite>
	bird1Light = pointer11;
2000106a:	4b52      	ldr	r3, [pc, #328]	; (200011b4 <initSprites+0x160>)
2000106c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
2000106e:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempBirdGray;
20001070:	4b51      	ldr	r3, [pc, #324]	; (200011b8 <initSprites+0x164>)
20001072:	63bb      	str	r3, [r7, #56]	; 0x38
	load_sprite(pointer12, bird1_gray_bits, bird1_black_width, bird1_black_height);
20001074:	4951      	ldr	r1, [pc, #324]	; (200011bc <initSprites+0x168>)
20001076:	6bb8      	ldr	r0, [r7, #56]	; 0x38
20001078:	2319      	movs	r3, #25
2000107a:	2219      	movs	r2, #25
2000107c:	f001 f9ee 	bl	2000245c <load_sprite>
	bird1Gray = pointer12;
20001080:	4b4f      	ldr	r3, [pc, #316]	; (200011c0 <initSprites+0x16c>)
20001082:	6bba      	ldr	r2, [r7, #56]	; 0x38
20001084:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempBirdBlack;
20001086:	4b4f      	ldr	r3, [pc, #316]	; (200011c4 <initSprites+0x170>)
20001088:	637b      	str	r3, [r7, #52]	; 0x34
	load_sprite(pointer13, bird1_black_bits, bird1_black_width, bird1_black_height);
2000108a:	494f      	ldr	r1, [pc, #316]	; (200011c8 <initSprites+0x174>)
2000108c:	6b78      	ldr	r0, [r7, #52]	; 0x34
2000108e:	2319      	movs	r3, #25
20001090:	2219      	movs	r2, #25
20001092:	f001 f9e3 	bl	2000245c <load_sprite>
	bird1Black = pointer13;	
20001096:	4b4d      	ldr	r3, [pc, #308]	; (200011cc <initSprites+0x178>)
20001098:	6b7a      	ldr	r2, [r7, #52]	; 0x34
2000109a:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempBird2Light;
2000109c:	4b4c      	ldr	r3, [pc, #304]	; (200011d0 <initSprites+0x17c>)
2000109e:	633b      	str	r3, [r7, #48]	; 0x30
	load_sprite(pointer14, bird2_light_bits, bird2_black_width, bird2_black_height);
200010a0:	494c      	ldr	r1, [pc, #304]	; (200011d4 <initSprites+0x180>)
200010a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
200010a4:	2319      	movs	r3, #25
200010a6:	2219      	movs	r2, #25
200010a8:	f001 f9d8 	bl	2000245c <load_sprite>
	bird2Light = pointer14;
200010ac:	4b4a      	ldr	r3, [pc, #296]	; (200011d8 <initSprites+0x184>)
200010ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
200010b0:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempBird2Gray;
200010b2:	4b4a      	ldr	r3, [pc, #296]	; (200011dc <initSprites+0x188>)
200010b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer15, bird2_gray_bits, bird2_black_width, bird2_black_height);
200010b6:	494a      	ldr	r1, [pc, #296]	; (200011e0 <initSprites+0x18c>)
200010b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
200010ba:	2319      	movs	r3, #25
200010bc:	2219      	movs	r2, #25
200010be:	f001 f9cd 	bl	2000245c <load_sprite>
	bird2Gray = pointer15;
200010c2:	4b48      	ldr	r3, [pc, #288]	; (200011e4 <initSprites+0x190>)
200010c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
200010c6:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempBird2Black;
200010c8:	4b47      	ldr	r3, [pc, #284]	; (200011e8 <initSprites+0x194>)
200010ca:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer16, bird2_black_bits, bird2_black_width, bird2_black_height);
200010cc:	4947      	ldr	r1, [pc, #284]	; (200011ec <initSprites+0x198>)
200010ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
200010d0:	2319      	movs	r3, #25
200010d2:	2219      	movs	r2, #25
200010d4:	f001 f9c2 	bl	2000245c <load_sprite>
	bird2Black = pointer16;
200010d8:	4b45      	ldr	r3, [pc, #276]	; (200011f0 <initSprites+0x19c>)
200010da:	6aba      	ldr	r2, [r7, #40]	; 0x28
200010dc:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempBird3Light;
200010de:	4b45      	ldr	r3, [pc, #276]	; (200011f4 <initSprites+0x1a0>)
200010e0:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(finalPointer, bird3_light_bits, bird3_black_width, bird3_black_height);
200010e2:	4945      	ldr	r1, [pc, #276]	; (200011f8 <initSprites+0x1a4>)
200010e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
200010e6:	2319      	movs	r3, #25
200010e8:	2219      	movs	r2, #25
200010ea:	f001 f9b7 	bl	2000245c <load_sprite>
	bird3Light = finalPointer;
200010ee:	4b43      	ldr	r3, [pc, #268]	; (200011fc <initSprites+0x1a8>)
200010f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200010f2:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempBird3Gray;
200010f4:	4b42      	ldr	r3, [pc, #264]	; (20001200 <initSprites+0x1ac>)
200010f6:	623b      	str	r3, [r7, #32]
	load_sprite(pointer17, bird3_gray_bits, bird3_black_width, bird3_black_height);
200010f8:	4942      	ldr	r1, [pc, #264]	; (20001204 <initSprites+0x1b0>)
200010fa:	6a38      	ldr	r0, [r7, #32]
200010fc:	2319      	movs	r3, #25
200010fe:	2219      	movs	r2, #25
20001100:	f001 f9ac 	bl	2000245c <load_sprite>
	bird3Gray = pointer17;
20001104:	4b40      	ldr	r3, [pc, #256]	; (20001208 <initSprites+0x1b4>)
20001106:	6a3a      	ldr	r2, [r7, #32]
20001108:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempBird3Black;
2000110a:	4b40      	ldr	r3, [pc, #256]	; (2000120c <initSprites+0x1b8>)
2000110c:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer18, bird3_black_bits, bird3_black_width, bird3_black_height);
2000110e:	4940      	ldr	r1, [pc, #256]	; (20001210 <initSprites+0x1bc>)
20001110:	69f8      	ldr	r0, [r7, #28]
20001112:	2319      	movs	r3, #25
20001114:	2219      	movs	r2, #25
20001116:	f001 f9a1 	bl	2000245c <load_sprite>
	bird3Black = pointer18;	
2000111a:	4b3e      	ldr	r3, [pc, #248]	; (20001214 <initSprites+0x1c0>)
2000111c:	69fa      	ldr	r2, [r7, #28]
2000111e:	601a      	str	r2, [r3, #0]
	
	sprite *pointer19 = &tempBird4Light;
20001120:	4b3d      	ldr	r3, [pc, #244]	; (20001218 <initSprites+0x1c4>)
20001122:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer19, bird4_light_bits, bird4_black_width, bird4_black_height);
20001124:	493d      	ldr	r1, [pc, #244]	; (2000121c <initSprites+0x1c8>)
20001126:	69b8      	ldr	r0, [r7, #24]
20001128:	2319      	movs	r3, #25
2000112a:	2219      	movs	r2, #25
2000112c:	f001 f996 	bl	2000245c <load_sprite>
	bird4Light = pointer19;
20001130:	4b3b      	ldr	r3, [pc, #236]	; (20001220 <initSprites+0x1cc>)
20001132:	69ba      	ldr	r2, [r7, #24]
20001134:	601a      	str	r2, [r3, #0]
	sprite *pointer20 = &tempBird4Gray;
20001136:	4b3b      	ldr	r3, [pc, #236]	; (20001224 <initSprites+0x1d0>)
20001138:	617b      	str	r3, [r7, #20]
	load_sprite(pointer20, bird4_gray_bits, bird4_black_width, bird4_black_height);
2000113a:	493b      	ldr	r1, [pc, #236]	; (20001228 <initSprites+0x1d4>)
2000113c:	6978      	ldr	r0, [r7, #20]
2000113e:	2319      	movs	r3, #25
20001140:	2219      	movs	r2, #25
20001142:	f001 f98b 	bl	2000245c <load_sprite>
	bird4Gray = pointer20;
20001146:	4b39      	ldr	r3, [pc, #228]	; (2000122c <initSprites+0x1d8>)
20001148:	697a      	ldr	r2, [r7, #20]
2000114a:	601a      	str	r2, [r3, #0]
	sprite *pointer21 = &tempBird4Black;
2000114c:	4b38      	ldr	r3, [pc, #224]	; (20001230 <initSprites+0x1dc>)
2000114e:	613b      	str	r3, [r7, #16]
	load_sprite(pointer21, bird4_black_bits, bird4_black_width, bird4_black_height);
20001150:	4938      	ldr	r1, [pc, #224]	; (20001234 <initSprites+0x1e0>)
20001152:	6938      	ldr	r0, [r7, #16]
20001154:	2319      	movs	r3, #25
20001156:	2219      	movs	r2, #25
20001158:	f001 f980 	bl	2000245c <load_sprite>
	bird4Black = pointer21;	
2000115c:	4b36      	ldr	r3, [pc, #216]	; (20001238 <initSprites+0x1e4>)
2000115e:	693a      	ldr	r2, [r7, #16]
20001160:	601a      	str	r2, [r3, #0]
	
	sprite *pointer22 = &tempBird5Light;
20001162:	4b36      	ldr	r3, [pc, #216]	; (2000123c <initSprites+0x1e8>)
20001164:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer22, bird5_light_bits, bird5_black_width, bird5_black_height);
20001166:	4936      	ldr	r1, [pc, #216]	; (20001240 <initSprites+0x1ec>)
20001168:	68f8      	ldr	r0, [r7, #12]
2000116a:	2319      	movs	r3, #25
2000116c:	2219      	movs	r2, #25
2000116e:	f001 f975 	bl	2000245c <load_sprite>
	bird5Light = pointer22;
20001172:	4b34      	ldr	r3, [pc, #208]	; (20001244 <initSprites+0x1f0>)
20001174:	68fa      	ldr	r2, [r7, #12]
20001176:	601a      	str	r2, [r3, #0]
	sprite *pointer23 = &tempBird5Gray;
20001178:	4b33      	ldr	r3, [pc, #204]	; (20001248 <initSprites+0x1f4>)
2000117a:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer23, bird5_gray_bits, bird5_black_width, bird5_black_height);
2000117c:	4933      	ldr	r1, [pc, #204]	; (2000124c <initSprites+0x1f8>)
2000117e:	68b8      	ldr	r0, [r7, #8]
20001180:	2319      	movs	r3, #25
20001182:	2219      	movs	r2, #25
20001184:	f001 f96a 	bl	2000245c <load_sprite>
	bird5Gray = pointer23;
20001188:	4b31      	ldr	r3, [pc, #196]	; (20001250 <initSprites+0x1fc>)
2000118a:	68ba      	ldr	r2, [r7, #8]
2000118c:	601a      	str	r2, [r3, #0]
	sprite *pointer24 = &tempBird5Black;
2000118e:	4b31      	ldr	r3, [pc, #196]	; (20001254 <initSprites+0x200>)
20001190:	607b      	str	r3, [r7, #4]
	load_sprite(pointer24, bird5_black_bits, bird5_black_width, bird5_black_height);
20001192:	4931      	ldr	r1, [pc, #196]	; (20001258 <initSprites+0x204>)
20001194:	6878      	ldr	r0, [r7, #4]
20001196:	2319      	movs	r3, #25
20001198:	2219      	movs	r2, #25
2000119a:	f001 f95f 	bl	2000245c <load_sprite>
	bird5Black = pointer24;
2000119e:	4b2f      	ldr	r3, [pc, #188]	; (2000125c <initSprites+0x208>)
200011a0:	687a      	ldr	r2, [r7, #4]
200011a2:	601a      	str	r2, [r3, #0]
}
200011a4:	46c0      	nop			; (mov r8, r8)
200011a6:	46bd      	mov	sp, r7
200011a8:	b010      	add	sp, #64	; 0x40
200011aa:	bd80      	pop	{r7, pc}
200011ac:	200032f4 	strdcs	r3, [r0], -r4
200011b0:	20006a20 	andcs	r6, r0, r0, lsr #20
200011b4:	20003300 	andcs	r3, r0, r0, lsl #6
200011b8:	20003290 	mulcs	r0, r0, r2
200011bc:	200069bc 			; <UNDEFINED> instruction: 0x200069bc
200011c0:	20003208 	andcs	r3, r0, r8, lsl #4
200011c4:	20003280 	andcs	r3, r0, r0, lsl #5
200011c8:	20006958 	andcs	r6, r0, r8, asr r9
200011cc:	20003270 	andcs	r3, r0, r0, ror r2
200011d0:	20003304 	andcs	r3, r0, r4, lsl #6
200011d4:	20006b4c 	andcs	r6, r0, ip, asr #22
200011d8:	200033a4 	andcs	r3, r0, r4, lsr #7
200011dc:	200032ac 	andcs	r3, r0, ip, lsr #5
200011e0:	20006ae8 	andcs	r6, r0, r8, ror #21
200011e4:	200032f0 	strdcs	r3, [r0], -r0
200011e8:	2000338c 	andcs	r3, r0, ip, lsl #7
200011ec:	20006a84 	andcs	r6, r0, r4, lsl #21
200011f0:	2000326c 	andcs	r3, r0, ip, ror #4
200011f4:	20003328 	andcs	r3, r0, r8, lsr #6
200011f8:	20006c78 	andcs	r6, r0, r8, ror ip
200011fc:	200032b8 			; <UNDEFINED> instruction: 0x200032b8
20001200:	20003334 	andcs	r3, r0, r4, lsr r3
20001204:	20006c14 	andcs	r6, r0, r4, lsl ip
20001208:	2000328c 	andcs	r3, r0, ip, lsl #5
2000120c:	200032e4 	andcs	r3, r0, r4, ror #5
20001210:	20006bb0 			; <UNDEFINED> instruction: 0x20006bb0
20001214:	20003264 	andcs	r3, r0, r4, ror #4
20001218:	2000331c 	andcs	r3, r0, ip, lsl r3
2000121c:	20006da4 	andcs	r6, r0, r4, lsr #27
20001220:	20003204 	andcs	r3, r0, r4, lsl #4
20001224:	20003398 	mulcs	r0, r8, r3
20001228:	20006d40 	andcs	r6, r0, r0, asr #26
2000122c:	20003268 	andcs	r3, r0, r8, ror #4
20001230:	2000321c 	andcs	r3, r0, ip, lsl r2
20001234:	20006cdc 	ldrdcs	r6, [r0], -ip
20001238:	20003388 	andcs	r3, r0, r8, lsl #7
2000123c:	200032a0 	andcs	r3, r0, r0, lsr #5
20001240:	20006ed0 	ldrdcs	r6, [r0], -r0
20001244:	200032e0 	andcs	r3, r0, r0, ror #5
20001248:	200032bc 			; <UNDEFINED> instruction: 0x200032bc
2000124c:	20006e6c 	andcs	r6, r0, ip, ror #28
20001250:	2000329c 	mulcs	r0, ip, r2
20001254:	200032c8 	andcs	r3, r0, r8, asr #5
20001258:	20006e08 	andcs	r6, r0, r8, lsl #28
2000125c:	20003218 	andcs	r3, r0, r8, lsl r2

20001260 <init_bird>:
	
void init_bird( GameObject *birdObj ) {
20001260:	b590      	push	{r4, r7, lr}
20001262:	b083      	sub	sp, #12
20001264:	af00      	add	r7, sp, #0
20001266:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20001268:	4b37      	ldr	r3, [pc, #220]	; (20001348 <init_bird+0xe8>)
2000126a:	681b      	ldr	r3, [r3, #0]
2000126c:	2b00      	cmp	r3, #0
2000126e:	d057      	beq.n	20001320 <init_bird+0xc0>
		initSprites();
20001270:	f7ff fef0 	bl	20001054 <initSprites>
		firstTime = 0;			
20001274:	4b34      	ldr	r3, [pc, #208]	; (20001348 <init_bird+0xe8>)
20001276:	2200      	movs	r2, #0
20001278:	601a      	str	r2, [r3, #0]

		birdImages[0] = bird1Image;
2000127a:	4b34      	ldr	r3, [pc, #208]	; (2000134c <init_bird+0xec>)
2000127c:	4a34      	ldr	r2, [pc, #208]	; (20001350 <init_bird+0xf0>)
2000127e:	ca13      	ldmia	r2!, {r0, r1, r4}
20001280:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[1] = bird2Image;
20001282:	4b32      	ldr	r3, [pc, #200]	; (2000134c <init_bird+0xec>)
20001284:	4a33      	ldr	r2, [pc, #204]	; (20001354 <init_bird+0xf4>)
20001286:	330c      	adds	r3, #12
20001288:	ca13      	ldmia	r2!, {r0, r1, r4}
2000128a:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[2] = bird3Image;
2000128c:	4b2f      	ldr	r3, [pc, #188]	; (2000134c <init_bird+0xec>)
2000128e:	4a32      	ldr	r2, [pc, #200]	; (20001358 <init_bird+0xf8>)
20001290:	3318      	adds	r3, #24
20001292:	ca13      	ldmia	r2!, {r0, r1, r4}
20001294:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[3] = bird4Image;
20001296:	4b2d      	ldr	r3, [pc, #180]	; (2000134c <init_bird+0xec>)
20001298:	4a30      	ldr	r2, [pc, #192]	; (2000135c <init_bird+0xfc>)
2000129a:	3324      	adds	r3, #36	; 0x24
2000129c:	ca13      	ldmia	r2!, {r0, r1, r4}
2000129e:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[4] = bird5Image;
200012a0:	4b2a      	ldr	r3, [pc, #168]	; (2000134c <init_bird+0xec>)
200012a2:	4a2f      	ldr	r2, [pc, #188]	; (20001360 <init_bird+0x100>)
200012a4:	3330      	adds	r3, #48	; 0x30
200012a6:	ca13      	ldmia	r2!, {r0, r1, r4}
200012a8:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[5] = bird6Image;
200012aa:	4b28      	ldr	r3, [pc, #160]	; (2000134c <init_bird+0xec>)
200012ac:	4a2d      	ldr	r2, [pc, #180]	; (20001364 <init_bird+0x104>)
200012ae:	333c      	adds	r3, #60	; 0x3c
200012b0:	ca13      	ldmia	r2!, {r0, r1, r4}
200012b2:	c313      	stmia	r3!, {r0, r1, r4}
//		birdImages[6] = bird7Image;
		//birdImages[7] = bird8Image;
		
		load_image(&birdImages[0], bird1Black, bird1Gray, bird1Light);
200012b4:	4b2c      	ldr	r3, [pc, #176]	; (20001368 <init_bird+0x108>)
200012b6:	6819      	ldr	r1, [r3, #0]
200012b8:	4b2c      	ldr	r3, [pc, #176]	; (2000136c <init_bird+0x10c>)
200012ba:	681a      	ldr	r2, [r3, #0]
200012bc:	4b2c      	ldr	r3, [pc, #176]	; (20001370 <init_bird+0x110>)
200012be:	681b      	ldr	r3, [r3, #0]
200012c0:	4822      	ldr	r0, [pc, #136]	; (2000134c <init_bird+0xec>)
200012c2:	f001 f8b7 	bl	20002434 <load_image>
		load_image(&birdImages[1], bird2Black, bird2Gray, bird2Light);
200012c6:	4b2b      	ldr	r3, [pc, #172]	; (20001374 <init_bird+0x114>)
200012c8:	6819      	ldr	r1, [r3, #0]
200012ca:	4b2b      	ldr	r3, [pc, #172]	; (20001378 <init_bird+0x118>)
200012cc:	681a      	ldr	r2, [r3, #0]
200012ce:	4b2b      	ldr	r3, [pc, #172]	; (2000137c <init_bird+0x11c>)
200012d0:	681b      	ldr	r3, [r3, #0]
200012d2:	482b      	ldr	r0, [pc, #172]	; (20001380 <init_bird+0x120>)
200012d4:	f001 f8ae 	bl	20002434 <load_image>
		load_image(&birdImages[2], bird3Black, bird3Gray, bird3Light);
200012d8:	4b2a      	ldr	r3, [pc, #168]	; (20001384 <init_bird+0x124>)
200012da:	6819      	ldr	r1, [r3, #0]
200012dc:	4b2a      	ldr	r3, [pc, #168]	; (20001388 <init_bird+0x128>)
200012de:	681a      	ldr	r2, [r3, #0]
200012e0:	4b2a      	ldr	r3, [pc, #168]	; (2000138c <init_bird+0x12c>)
200012e2:	681b      	ldr	r3, [r3, #0]
200012e4:	482a      	ldr	r0, [pc, #168]	; (20001390 <init_bird+0x130>)
200012e6:	f001 f8a5 	bl	20002434 <load_image>
		load_image(&birdImages[3], bird4Black, bird4Gray, bird4Light);
200012ea:	4b2a      	ldr	r3, [pc, #168]	; (20001394 <init_bird+0x134>)
200012ec:	6819      	ldr	r1, [r3, #0]
200012ee:	4b2a      	ldr	r3, [pc, #168]	; (20001398 <init_bird+0x138>)
200012f0:	681a      	ldr	r2, [r3, #0]
200012f2:	4b2a      	ldr	r3, [pc, #168]	; (2000139c <init_bird+0x13c>)
200012f4:	681b      	ldr	r3, [r3, #0]
200012f6:	482a      	ldr	r0, [pc, #168]	; (200013a0 <init_bird+0x140>)
200012f8:	f001 f89c 	bl	20002434 <load_image>
		load_image(&birdImages[4], bird5Black, bird5Gray, bird5Light);
200012fc:	4b29      	ldr	r3, [pc, #164]	; (200013a4 <init_bird+0x144>)
200012fe:	6819      	ldr	r1, [r3, #0]
20001300:	4b29      	ldr	r3, [pc, #164]	; (200013a8 <init_bird+0x148>)
20001302:	681a      	ldr	r2, [r3, #0]
20001304:	4b29      	ldr	r3, [pc, #164]	; (200013ac <init_bird+0x14c>)
20001306:	681b      	ldr	r3, [r3, #0]
20001308:	4829      	ldr	r0, [pc, #164]	; (200013b0 <init_bird+0x150>)
2000130a:	f001 f893 	bl	20002434 <load_image>
		
		//load_image(&birdImages[7], bird2Black, bird2Gray, bird2Light);
		load_image(&birdImages[5], bird3Black, bird3Gray, bird3Light);
2000130e:	4b1d      	ldr	r3, [pc, #116]	; (20001384 <init_bird+0x124>)
20001310:	6819      	ldr	r1, [r3, #0]
20001312:	4b1d      	ldr	r3, [pc, #116]	; (20001388 <init_bird+0x128>)
20001314:	681a      	ldr	r2, [r3, #0]
20001316:	4b1d      	ldr	r3, [pc, #116]	; (2000138c <init_bird+0x12c>)
20001318:	681b      	ldr	r3, [r3, #0]
2000131a:	4826      	ldr	r0, [pc, #152]	; (200013b4 <init_bird+0x154>)
2000131c:	f001 f88a 	bl	20002434 <load_image>
		//load_image(&birdImages[5], bird4Black, bird4Gray, bird4Light);
	}
	
	birdObj->images = birdImages;
20001320:	687b      	ldr	r3, [r7, #4]
20001322:	4a0a      	ldr	r2, [pc, #40]	; (2000134c <init_bird+0xec>)
20001324:	601a      	str	r2, [r3, #0]

	birdObj->current_frame = 0;
20001326:	687b      	ldr	r3, [r7, #4]
20001328:	2200      	movs	r2, #0
2000132a:	615a      	str	r2, [r3, #20]
	birdObj->n_frames = 6;
2000132c:	687b      	ldr	r3, [r7, #4]
2000132e:	2206      	movs	r2, #6
20001330:	619a      	str	r2, [r3, #24]
	birdObj->animation_speed = 1;
20001332:	687b      	ldr	r3, [r7, #4]
20001334:	2201      	movs	r2, #1
20001336:	61da      	str	r2, [r3, #28]
	birdObj->animation_counter = 0;
20001338:	687b      	ldr	r3, [r7, #4]
2000133a:	2200      	movs	r2, #0
2000133c:	621a      	str	r2, [r3, #32]
}
2000133e:	46c0      	nop			; (mov r8, r8)
20001340:	46bd      	mov	sp, r7
20001342:	b003      	add	sp, #12
20001344:	bd90      	pop	{r4, r7, pc}
20001346:	46c0      	nop			; (mov r8, r8)
20001348:	20006f34 	andcs	r6, r0, r4, lsr pc
2000134c:	20003340 	andcs	r3, r0, r0, asr #6
20001350:	20003258 	andcs	r3, r0, r8, asr r2
20001354:	20003228 	andcs	r3, r0, r8, lsr #4
20001358:	20003310 	andcs	r3, r0, r0, lsl r3
2000135c:	20003274 	andcs	r3, r0, r4, ror r2
20001360:	200032d4 	ldrdcs	r3, [r0], -r4
20001364:	2000320c 	andcs	r3, r0, ip, lsl #4
20001368:	20003270 	andcs	r3, r0, r0, ror r2
2000136c:	20003208 	andcs	r3, r0, r8, lsl #4
20001370:	20003300 	andcs	r3, r0, r0, lsl #6
20001374:	2000326c 	andcs	r3, r0, ip, ror #4
20001378:	200032f0 	strdcs	r3, [r0], -r0
2000137c:	200033a4 	andcs	r3, r0, r4, lsr #7
20001380:	2000334c 	andcs	r3, r0, ip, asr #6
20001384:	20003264 	andcs	r3, r0, r4, ror #4
20001388:	2000328c 	andcs	r3, r0, ip, lsl #5
2000138c:	200032b8 			; <UNDEFINED> instruction: 0x200032b8
20001390:	20003358 	andcs	r3, r0, r8, asr r3
20001394:	20003388 	andcs	r3, r0, r8, lsl #7
20001398:	20003268 	andcs	r3, r0, r8, ror #4
2000139c:	20003204 	andcs	r3, r0, r4, lsl #4
200013a0:	20003364 	andcs	r3, r0, r4, ror #6
200013a4:	20003218 	andcs	r3, r0, r8, lsl r2
200013a8:	2000329c 	mulcs	r0, ip, r2
200013ac:	200032e0 	andcs	r3, r0, r0, ror #5
200013b0:	20003370 	andcs	r3, r0, r0, ror r3
200013b4:	2000337c 	andcs	r3, r0, ip, ror r3

200013b8 <initSprites>:
Image witch1Image;
Image witch2Image;
Image witch3Image;
Image witch4Image;
Image witchImages[4];
static void initSprites( void ) {	
200013b8:	b580      	push	{r7, lr}
200013ba:	b08a      	sub	sp, #40	; 0x28
200013bc:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempWitchLight;
200013be:	4b33      	ldr	r3, [pc, #204]	; (2000148c <initSprites+0xd4>)
200013c0:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer11, witch1_light_bits, witch1_black_width, witch1_black_height);
200013c2:	4933      	ldr	r1, [pc, #204]	; (20001490 <initSprites+0xd8>)
200013c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
200013c6:	2312      	movs	r3, #18
200013c8:	2212      	movs	r2, #18
200013ca:	f001 f847 	bl	2000245c <load_sprite>
	witch1Light = pointer11;
200013ce:	4b31      	ldr	r3, [pc, #196]	; (20001494 <initSprites+0xdc>)
200013d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200013d2:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempWitchGray;
200013d4:	4b30      	ldr	r3, [pc, #192]	; (20001498 <initSprites+0xe0>)
200013d6:	623b      	str	r3, [r7, #32]
	load_sprite(pointer12, witch1_gray_bits, witch1_black_width, witch1_black_height);
200013d8:	4930      	ldr	r1, [pc, #192]	; (2000149c <initSprites+0xe4>)
200013da:	6a38      	ldr	r0, [r7, #32]
200013dc:	2312      	movs	r3, #18
200013de:	2212      	movs	r2, #18
200013e0:	f001 f83c 	bl	2000245c <load_sprite>
	witch1Gray = pointer12;
200013e4:	4b2e      	ldr	r3, [pc, #184]	; (200014a0 <initSprites+0xe8>)
200013e6:	6a3a      	ldr	r2, [r7, #32]
200013e8:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempWitchBlack;
200013ea:	4b2e      	ldr	r3, [pc, #184]	; (200014a4 <initSprites+0xec>)
200013ec:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer13, witch1_black_bits, witch1_black_width, witch1_black_height);
200013ee:	492e      	ldr	r1, [pc, #184]	; (200014a8 <initSprites+0xf0>)
200013f0:	69f8      	ldr	r0, [r7, #28]
200013f2:	2312      	movs	r3, #18
200013f4:	2212      	movs	r2, #18
200013f6:	f001 f831 	bl	2000245c <load_sprite>
	witch1Black = pointer13;	
200013fa:	4b2c      	ldr	r3, [pc, #176]	; (200014ac <initSprites+0xf4>)
200013fc:	69fa      	ldr	r2, [r7, #28]
200013fe:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempWitch2Light;
20001400:	4b2b      	ldr	r3, [pc, #172]	; (200014b0 <initSprites+0xf8>)
20001402:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer14, witch2_light_bits, witch2_black_width, witch2_black_height);
20001404:	492b      	ldr	r1, [pc, #172]	; (200014b4 <initSprites+0xfc>)
20001406:	69b8      	ldr	r0, [r7, #24]
20001408:	2312      	movs	r3, #18
2000140a:	2212      	movs	r2, #18
2000140c:	f001 f826 	bl	2000245c <load_sprite>
	witch2Light = pointer14;
20001410:	4b29      	ldr	r3, [pc, #164]	; (200014b8 <initSprites+0x100>)
20001412:	69ba      	ldr	r2, [r7, #24]
20001414:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempWitch2Gray;
20001416:	4b29      	ldr	r3, [pc, #164]	; (200014bc <initSprites+0x104>)
20001418:	617b      	str	r3, [r7, #20]
	load_sprite(pointer15, witch2_gray_bits, witch2_black_width, witch2_black_height);
2000141a:	4929      	ldr	r1, [pc, #164]	; (200014c0 <initSprites+0x108>)
2000141c:	6978      	ldr	r0, [r7, #20]
2000141e:	2312      	movs	r3, #18
20001420:	2212      	movs	r2, #18
20001422:	f001 f81b 	bl	2000245c <load_sprite>
	witch2Gray = pointer15;
20001426:	4b27      	ldr	r3, [pc, #156]	; (200014c4 <initSprites+0x10c>)
20001428:	697a      	ldr	r2, [r7, #20]
2000142a:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempWitch2Black;
2000142c:	4b26      	ldr	r3, [pc, #152]	; (200014c8 <initSprites+0x110>)
2000142e:	613b      	str	r3, [r7, #16]
	load_sprite(pointer16, witch2_black_bits, witch2_black_width, witch2_black_height);
20001430:	4926      	ldr	r1, [pc, #152]	; (200014cc <initSprites+0x114>)
20001432:	6938      	ldr	r0, [r7, #16]
20001434:	2312      	movs	r3, #18
20001436:	2212      	movs	r2, #18
20001438:	f001 f810 	bl	2000245c <load_sprite>
	witch2Black = pointer16;
2000143c:	4b24      	ldr	r3, [pc, #144]	; (200014d0 <initSprites+0x118>)
2000143e:	693a      	ldr	r2, [r7, #16]
20001440:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempWitch3Light;
20001442:	4b24      	ldr	r3, [pc, #144]	; (200014d4 <initSprites+0x11c>)
20001444:	60fb      	str	r3, [r7, #12]
	load_sprite(finalPointer, witch3_light_bits, witch3_black_width, witch3_black_height);
20001446:	4924      	ldr	r1, [pc, #144]	; (200014d8 <initSprites+0x120>)
20001448:	68f8      	ldr	r0, [r7, #12]
2000144a:	2312      	movs	r3, #18
2000144c:	2212      	movs	r2, #18
2000144e:	f001 f805 	bl	2000245c <load_sprite>
	witch3Light = finalPointer;
20001452:	4b22      	ldr	r3, [pc, #136]	; (200014dc <initSprites+0x124>)
20001454:	68fa      	ldr	r2, [r7, #12]
20001456:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempWitch3Gray;
20001458:	4b21      	ldr	r3, [pc, #132]	; (200014e0 <initSprites+0x128>)
2000145a:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer17, witch3_gray_bits, witch3_black_width, witch3_black_height);
2000145c:	4921      	ldr	r1, [pc, #132]	; (200014e4 <initSprites+0x12c>)
2000145e:	68b8      	ldr	r0, [r7, #8]
20001460:	2312      	movs	r3, #18
20001462:	2212      	movs	r2, #18
20001464:	f000 fffa 	bl	2000245c <load_sprite>
	witch3Gray = pointer17;
20001468:	4b1f      	ldr	r3, [pc, #124]	; (200014e8 <initSprites+0x130>)
2000146a:	68ba      	ldr	r2, [r7, #8]
2000146c:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempWitch3Black;
2000146e:	4b1f      	ldr	r3, [pc, #124]	; (200014ec <initSprites+0x134>)
20001470:	607b      	str	r3, [r7, #4]
	load_sprite(pointer18, witch3_black_bits, witch3_black_width, witch3_black_height);
20001472:	491f      	ldr	r1, [pc, #124]	; (200014f0 <initSprites+0x138>)
20001474:	6878      	ldr	r0, [r7, #4]
20001476:	2312      	movs	r3, #18
20001478:	2212      	movs	r2, #18
2000147a:	f000 ffef 	bl	2000245c <load_sprite>
	witch3Black = pointer18;	
2000147e:	4b1d      	ldr	r3, [pc, #116]	; (200014f4 <initSprites+0x13c>)
20001480:	687a      	ldr	r2, [r7, #4]
20001482:	601a      	str	r2, [r3, #0]
	
}
20001484:	46c0      	nop			; (mov r8, r8)
20001486:	46bd      	mov	sp, r7
20001488:	b00a      	add	sp, #40	; 0x28
2000148a:	bd80      	pop	{r7, pc}
2000148c:	20003490 	mulcs	r0, r0, r4
20001490:	20006fa8 	andcs	r6, r0, r8, lsr #31
20001494:	200034a8 	andcs	r3, r0, r8, lsr #9
20001498:	20003420 	andcs	r3, r0, r0, lsr #8
2000149c:	20006f70 	andcs	r6, r0, r0, ror pc
200014a0:	200033a8 	andcs	r3, r0, r8, lsr #7
200014a4:	200033f8 	strdcs	r3, [r0], -r8
200014a8:	20006f38 	andcs	r6, r0, r8, lsr pc
200014ac:	2000347c 	andcs	r3, r0, ip, ror r4
200014b0:	2000349c 	mulcs	r0, ip, r4
200014b4:	20007050 	andcs	r7, r0, r0, asr r0
200014b8:	200033ac 	andcs	r3, r0, ip, lsr #7
200014bc:	20003438 	andcs	r3, r0, r8, lsr r4
200014c0:	20007018 	andcs	r7, r0, r8, lsl r0
200014c4:	2000341c 	andcs	r3, r0, ip, lsl r4
200014c8:	200033ec 	andcs	r3, r0, ip, ror #7
200014cc:	20006fe0 	andcs	r6, r0, r0, ror #31
200014d0:	200034b8 			; <UNDEFINED> instruction: 0x200034b8
200014d4:	20003404 	andcs	r3, r0, r4, lsl #8
200014d8:	200070f8 	strdcs	r7, [r0], -r8
200014dc:	2000346c 	andcs	r3, r0, ip, ror #8
200014e0:	20003470 	andcs	r3, r0, r0, ror r4
200014e4:	200070c0 	andcs	r7, r0, r0, asr #1
200014e8:	20003480 	andcs	r3, r0, r0, lsl #9
200014ec:	2000342c 	andcs	r3, r0, ip, lsr #8
200014f0:	20007088 	andcs	r7, r0, r8, lsl #1
200014f4:	20003444 	andcs	r3, r0, r4, asr #8

200014f8 <init_witch>:
	
void init_witch( GameObject *witchObj ) {
200014f8:	b590      	push	{r4, r7, lr}
200014fa:	b083      	sub	sp, #12
200014fc:	af00      	add	r7, sp, #0
200014fe:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20001500:	4b29      	ldr	r3, [pc, #164]	; (200015a8 <init_witch+0xb0>)
20001502:	681b      	ldr	r3, [r3, #0]
20001504:	2b00      	cmp	r3, #0
20001506:	d03b      	beq.n	20001580 <init_witch+0x88>
		initSprites();
20001508:	f7ff ff56 	bl	200013b8 <initSprites>
		firstTime = 0;			
2000150c:	4b26      	ldr	r3, [pc, #152]	; (200015a8 <init_witch+0xb0>)
2000150e:	2200      	movs	r2, #0
20001510:	601a      	str	r2, [r3, #0]

		witchImages[0] = witch1Image;
20001512:	4b26      	ldr	r3, [pc, #152]	; (200015ac <init_witch+0xb4>)
20001514:	4a26      	ldr	r2, [pc, #152]	; (200015b0 <init_witch+0xb8>)
20001516:	ca13      	ldmia	r2!, {r0, r1, r4}
20001518:	c313      	stmia	r3!, {r0, r1, r4}
		witchImages[1] = witch2Image;
2000151a:	4b24      	ldr	r3, [pc, #144]	; (200015ac <init_witch+0xb4>)
2000151c:	4a25      	ldr	r2, [pc, #148]	; (200015b4 <init_witch+0xbc>)
2000151e:	330c      	adds	r3, #12
20001520:	ca13      	ldmia	r2!, {r0, r1, r4}
20001522:	c313      	stmia	r3!, {r0, r1, r4}
		witchImages[2] = witch3Image;
20001524:	4b21      	ldr	r3, [pc, #132]	; (200015ac <init_witch+0xb4>)
20001526:	4a24      	ldr	r2, [pc, #144]	; (200015b8 <init_witch+0xc0>)
20001528:	3318      	adds	r3, #24
2000152a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000152c:	c313      	stmia	r3!, {r0, r1, r4}
		witchImages[3] = witch4Image;
2000152e:	4b1f      	ldr	r3, [pc, #124]	; (200015ac <init_witch+0xb4>)
20001530:	4a22      	ldr	r2, [pc, #136]	; (200015bc <init_witch+0xc4>)
20001532:	3324      	adds	r3, #36	; 0x24
20001534:	ca13      	ldmia	r2!, {r0, r1, r4}
20001536:	c313      	stmia	r3!, {r0, r1, r4}
		
		
		load_image(&witchImages[0], witch1Black, witch1Gray, witch1Light);
20001538:	4b21      	ldr	r3, [pc, #132]	; (200015c0 <init_witch+0xc8>)
2000153a:	6819      	ldr	r1, [r3, #0]
2000153c:	4b21      	ldr	r3, [pc, #132]	; (200015c4 <init_witch+0xcc>)
2000153e:	681a      	ldr	r2, [r3, #0]
20001540:	4b21      	ldr	r3, [pc, #132]	; (200015c8 <init_witch+0xd0>)
20001542:	681b      	ldr	r3, [r3, #0]
20001544:	4819      	ldr	r0, [pc, #100]	; (200015ac <init_witch+0xb4>)
20001546:	f000 ff75 	bl	20002434 <load_image>
		load_image(&witchImages[1], witch2Black, witch2Gray, witch2Light);
2000154a:	4b20      	ldr	r3, [pc, #128]	; (200015cc <init_witch+0xd4>)
2000154c:	6819      	ldr	r1, [r3, #0]
2000154e:	4b20      	ldr	r3, [pc, #128]	; (200015d0 <init_witch+0xd8>)
20001550:	681a      	ldr	r2, [r3, #0]
20001552:	4b20      	ldr	r3, [pc, #128]	; (200015d4 <init_witch+0xdc>)
20001554:	681b      	ldr	r3, [r3, #0]
20001556:	4820      	ldr	r0, [pc, #128]	; (200015d8 <init_witch+0xe0>)
20001558:	f000 ff6c 	bl	20002434 <load_image>
		load_image(&witchImages[2], witch3Black, witch3Gray, witch3Light);
2000155c:	4b1f      	ldr	r3, [pc, #124]	; (200015dc <init_witch+0xe4>)
2000155e:	6819      	ldr	r1, [r3, #0]
20001560:	4b1f      	ldr	r3, [pc, #124]	; (200015e0 <init_witch+0xe8>)
20001562:	681a      	ldr	r2, [r3, #0]
20001564:	4b1f      	ldr	r3, [pc, #124]	; (200015e4 <init_witch+0xec>)
20001566:	681b      	ldr	r3, [r3, #0]
20001568:	481f      	ldr	r0, [pc, #124]	; (200015e8 <init_witch+0xf0>)
2000156a:	f000 ff63 	bl	20002434 <load_image>
		load_image(&witchImages[3], witch2Black, witch2Gray, witch2Light);
2000156e:	4b17      	ldr	r3, [pc, #92]	; (200015cc <init_witch+0xd4>)
20001570:	6819      	ldr	r1, [r3, #0]
20001572:	4b17      	ldr	r3, [pc, #92]	; (200015d0 <init_witch+0xd8>)
20001574:	681a      	ldr	r2, [r3, #0]
20001576:	4b17      	ldr	r3, [pc, #92]	; (200015d4 <init_witch+0xdc>)
20001578:	681b      	ldr	r3, [r3, #0]
2000157a:	481c      	ldr	r0, [pc, #112]	; (200015ec <init_witch+0xf4>)
2000157c:	f000 ff5a 	bl	20002434 <load_image>
		
	}
	
	witchObj->images = witchImages;
20001580:	687b      	ldr	r3, [r7, #4]
20001582:	4a0a      	ldr	r2, [pc, #40]	; (200015ac <init_witch+0xb4>)
20001584:	601a      	str	r2, [r3, #0]

	witchObj->current_frame = 0;
20001586:	687b      	ldr	r3, [r7, #4]
20001588:	2200      	movs	r2, #0
2000158a:	615a      	str	r2, [r3, #20]
	witchObj->n_frames = 4;
2000158c:	687b      	ldr	r3, [r7, #4]
2000158e:	2204      	movs	r2, #4
20001590:	619a      	str	r2, [r3, #24]
	witchObj->animation_speed = 1;
20001592:	687b      	ldr	r3, [r7, #4]
20001594:	2201      	movs	r2, #1
20001596:	61da      	str	r2, [r3, #28]
	witchObj->animation_counter = 0;
20001598:	687b      	ldr	r3, [r7, #4]
2000159a:	2200      	movs	r2, #0
2000159c:	621a      	str	r2, [r3, #32]
}
2000159e:	46c0      	nop			; (mov r8, r8)
200015a0:	46bd      	mov	sp, r7
200015a2:	b003      	add	sp, #12
200015a4:	bd90      	pop	{r4, r7, pc}
200015a6:	46c0      	nop			; (mov r8, r8)
200015a8:	20007130 	andcs	r7, r0, r0, lsr r1
200015ac:	200033b0 			; <UNDEFINED> instruction: 0x200033b0
200015b0:	20003484 	andcs	r3, r0, r4, lsl #9
200015b4:	200033e0 	andcs	r3, r0, r0, ror #7
200015b8:	200034ac 	andcs	r3, r0, ip, lsr #9
200015bc:	20003410 	andcs	r3, r0, r0, lsl r4
200015c0:	2000347c 	andcs	r3, r0, ip, ror r4
200015c4:	200033a8 	andcs	r3, r0, r8, lsr #7
200015c8:	200034a8 	andcs	r3, r0, r8, lsr #9
200015cc:	200034b8 			; <UNDEFINED> instruction: 0x200034b8
200015d0:	2000341c 	andcs	r3, r0, ip, lsl r4
200015d4:	200033ac 	andcs	r3, r0, ip, lsr #7
200015d8:	200033bc 			; <UNDEFINED> instruction: 0x200033bc
200015dc:	20003444 	andcs	r3, r0, r4, asr #8
200015e0:	20003480 	andcs	r3, r0, r0, lsl #9
200015e4:	2000346c 	andcs	r3, r0, ip, ror #8
200015e8:	200033c8 	andcs	r3, r0, r8, asr #7
200015ec:	200033d4 	ldrdcs	r3, [r0], -r4

200015f0 <delay_250ns>:
#include "graphics.h"


void delay_250ns(void){
200015f0:	b580      	push	{r7, lr}
200015f2:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
200015f4:	4b0c      	ldr	r3, [pc, #48]	; (20001628 <delay_250ns+0x38>)
200015f6:	2200      	movs	r2, #0
200015f8:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/4) -1);
200015fa:	4b0c      	ldr	r3, [pc, #48]	; (2000162c <delay_250ns+0x3c>)
200015fc:	2229      	movs	r2, #41	; 0x29
200015fe:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20001600:	4b0b      	ldr	r3, [pc, #44]	; (20001630 <delay_250ns+0x40>)
20001602:	2200      	movs	r2, #0
20001604:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20001606:	4b08      	ldr	r3, [pc, #32]	; (20001628 <delay_250ns+0x38>)
20001608:	2205      	movs	r2, #5
2000160a:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
2000160c:	46c0      	nop			; (mov r8, r8)
2000160e:	4b06      	ldr	r3, [pc, #24]	; (20001628 <delay_250ns+0x38>)
20001610:	681a      	ldr	r2, [r3, #0]
20001612:	2380      	movs	r3, #128	; 0x80
20001614:	025b      	lsls	r3, r3, #9
20001616:	4013      	ands	r3, r2
20001618:	d0f9      	beq.n	2000160e <delay_250ns+0x1e>
	*STK_CTRL = 0;
2000161a:	4b03      	ldr	r3, [pc, #12]	; (20001628 <delay_250ns+0x38>)
2000161c:	2200      	movs	r2, #0
2000161e:	601a      	str	r2, [r3, #0]
}
20001620:	46c0      	nop			; (mov r8, r8)
20001622:	46bd      	mov	sp, r7
20001624:	bd80      	pop	{r7, pc}
20001626:	46c0      	nop			; (mov r8, r8)
20001628:	e000e010 	and	lr, r0, r0, lsl r0
2000162c:	e000e014 	and	lr, r0, r4, lsl r0
20001630:	e000e018 	and	lr, r0, r8, lsl r0

20001634 <delay_500ns>:

void delay_500ns(void){
20001634:	b580      	push	{r7, lr}
20001636:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
20001638:	4b0c      	ldr	r3, [pc, #48]	; (2000166c <delay_500ns+0x38>)
2000163a:	2200      	movs	r2, #0
2000163c:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/2) -1);
2000163e:	4b0c      	ldr	r3, [pc, #48]	; (20001670 <delay_500ns+0x3c>)
20001640:	2253      	movs	r2, #83	; 0x53
20001642:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20001644:	4b0b      	ldr	r3, [pc, #44]	; (20001674 <delay_500ns+0x40>)
20001646:	2200      	movs	r2, #0
20001648:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
2000164a:	4b08      	ldr	r3, [pc, #32]	; (2000166c <delay_500ns+0x38>)
2000164c:	2205      	movs	r2, #5
2000164e:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
20001650:	46c0      	nop			; (mov r8, r8)
20001652:	4b06      	ldr	r3, [pc, #24]	; (2000166c <delay_500ns+0x38>)
20001654:	681a      	ldr	r2, [r3, #0]
20001656:	2380      	movs	r3, #128	; 0x80
20001658:	025b      	lsls	r3, r3, #9
2000165a:	4013      	ands	r3, r2
2000165c:	d0f9      	beq.n	20001652 <delay_500ns+0x1e>
	*STK_CTRL = 0;
2000165e:	4b03      	ldr	r3, [pc, #12]	; (2000166c <delay_500ns+0x38>)
20001660:	2200      	movs	r2, #0
20001662:	601a      	str	r2, [r3, #0]
}
20001664:	46c0      	nop			; (mov r8, r8)
20001666:	46bd      	mov	sp, r7
20001668:	bd80      	pop	{r7, pc}
2000166a:	46c0      	nop			; (mov r8, r8)
2000166c:	e000e010 	and	lr, r0, r0, lsl r0
20001670:	e000e014 	and	lr, r0, r4, lsl r0
20001674:	e000e018 	and	lr, r0, r8, lsl r0

20001678 <delay_micro>:

void delay_micro(unsigned int us){
20001678:	b580      	push	{r7, lr}
2000167a:	b082      	sub	sp, #8
2000167c:	af00      	add	r7, sp, #0
2000167e:	6078      	str	r0, [r7, #4]
	while(us--) {
20001680:	e007      	b.n	20001692 <delay_micro+0x1a>
		delay_250ns();
20001682:	f7ff ffb5 	bl	200015f0 <delay_250ns>
		delay_250ns();
20001686:	f7ff ffb3 	bl	200015f0 <delay_250ns>
		delay_250ns();
2000168a:	f7ff ffb1 	bl	200015f0 <delay_250ns>
		delay_250ns();
2000168e:	f7ff ffaf 	bl	200015f0 <delay_250ns>
	while(us--) {
20001692:	687b      	ldr	r3, [r7, #4]
20001694:	1e5a      	subs	r2, r3, #1
20001696:	607a      	str	r2, [r7, #4]
20001698:	2b00      	cmp	r3, #0
2000169a:	d1f2      	bne.n	20001682 <delay_micro+0xa>
	}
}
2000169c:	46c0      	nop			; (mov r8, r8)
2000169e:	46bd      	mov	sp, r7
200016a0:	b002      	add	sp, #8
200016a2:	bd80      	pop	{r7, pc}

200016a4 <delay_milli>:

void delay_milli(unsigned int ms){
200016a4:	b580      	push	{r7, lr}
200016a6:	b082      	sub	sp, #8
200016a8:	af00      	add	r7, sp, #0
200016aa:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		while(ms--)
			delay_micro(1);
	#else
		while(ms--)
200016ac:	e004      	b.n	200016b8 <delay_milli+0x14>
			delay_micro(1000);
200016ae:	23fa      	movs	r3, #250	; 0xfa
200016b0:	009b      	lsls	r3, r3, #2
200016b2:	0018      	movs	r0, r3
200016b4:	f7ff ffe0 	bl	20001678 <delay_micro>
		while(ms--)
200016b8:	687b      	ldr	r3, [r7, #4]
200016ba:	1e5a      	subs	r2, r3, #1
200016bc:	607a      	str	r2, [r7, #4]
200016be:	2b00      	cmp	r3, #0
200016c0:	d1f5      	bne.n	200016ae <delay_milli+0xa>
	#endif
}
200016c2:	46c0      	nop			; (mov r8, r8)
200016c4:	46bd      	mov	sp, r7
200016c6:	b002      	add	sp, #8
200016c8:	bd80      	pop	{r7, pc}

200016ca <clear_thisBackBuffer>:
uint8_t draw_buffer_black_light[1024]; // 128 * 64 / 8
uint8_t draw_buffer_black_gray_light[1024]; // 128 * 64 / 8
uint8_t backBuffer[1024]; // 128 * 64 / 8
uint8_t backBufferGray[1024]; // 128 * 64 / 8
uint8_t backBufferLight[1024]; // 128 * 64 / 8
void clear_thisBackBuffer(uint8_t *buffer) {
200016ca:	b580      	push	{r7, lr}
200016cc:	b084      	sub	sp, #16
200016ce:	af00      	add	r7, sp, #0
200016d0:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < 1024; i++)
200016d2:	2300      	movs	r3, #0
200016d4:	60fb      	str	r3, [r7, #12]
200016d6:	e007      	b.n	200016e8 <clear_thisBackBuffer+0x1e>
		buffer[i] = 0;
200016d8:	68fb      	ldr	r3, [r7, #12]
200016da:	687a      	ldr	r2, [r7, #4]
200016dc:	18d3      	adds	r3, r2, r3
200016de:	2200      	movs	r2, #0
200016e0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 1024; i++)
200016e2:	68fb      	ldr	r3, [r7, #12]
200016e4:	3301      	adds	r3, #1
200016e6:	60fb      	str	r3, [r7, #12]
200016e8:	68fb      	ldr	r3, [r7, #12]
200016ea:	4a03      	ldr	r2, [pc, #12]	; (200016f8 <clear_thisBackBuffer+0x2e>)
200016ec:	4293      	cmp	r3, r2
200016ee:	ddf3      	ble.n	200016d8 <clear_thisBackBuffer+0xe>
}
200016f0:	46c0      	nop			; (mov r8, r8)
200016f2:	46bd      	mov	sp, r7
200016f4:	b004      	add	sp, #16
200016f6:	bd80      	pop	{r7, pc}
200016f8:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

200016fc <clear_backBuffer>:
void clear_backBuffer() {
200016fc:	b580      	push	{r7, lr}
200016fe:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
20001700:	4b03      	ldr	r3, [pc, #12]	; (20001710 <clear_backBuffer+0x14>)
20001702:	0018      	movs	r0, r3
20001704:	f7ff ffe1 	bl	200016ca <clear_thisBackBuffer>
}
20001708:	46c0      	nop			; (mov r8, r8)
2000170a:	46bd      	mov	sp, r7
2000170c:	bd80      	pop	{r7, pc}
2000170e:	46c0      	nop			; (mov r8, r8)
20001710:	20003cbc 			; <UNDEFINED> instruction: 0x20003cbc

20001714 <clear_all_backBuffers>:
void clear_all_backBuffers() {
20001714:	b580      	push	{r7, lr}
20001716:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
20001718:	4b07      	ldr	r3, [pc, #28]	; (20001738 <clear_all_backBuffers+0x24>)
2000171a:	0018      	movs	r0, r3
2000171c:	f7ff ffd5 	bl	200016ca <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferGray);
20001720:	4b06      	ldr	r3, [pc, #24]	; (2000173c <clear_all_backBuffers+0x28>)
20001722:	0018      	movs	r0, r3
20001724:	f7ff ffd1 	bl	200016ca <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferLight);
20001728:	4b05      	ldr	r3, [pc, #20]	; (20001740 <clear_all_backBuffers+0x2c>)
2000172a:	0018      	movs	r0, r3
2000172c:	f7ff ffcd 	bl	200016ca <clear_thisBackBuffer>
}
20001730:	46c0      	nop			; (mov r8, r8)
20001732:	46bd      	mov	sp, r7
20001734:	bd80      	pop	{r7, pc}
20001736:	46c0      	nop			; (mov r8, r8)
20001738:	20003cbc 			; <UNDEFINED> instruction: 0x20003cbc
2000173c:	200034bc 			; <UNDEFINED> instruction: 0x200034bc
20001740:	20004cbc 			; <UNDEFINED> instruction: 0x20004cbc

20001744 <graphic_ctrl_bit_set>:

/* välj grafik-display och ettställ de bitar som är 1 i x */
static void graphic_ctrl_bit_set( uint8_t x) {
20001744:	b580      	push	{r7, lr}
20001746:	b084      	sub	sp, #16
20001748:	af00      	add	r7, sp, #0
2000174a:	0002      	movs	r2, r0
2000174c:	1dfb      	adds	r3, r7, #7
2000174e:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
20001750:	4a0f      	ldr	r2, [pc, #60]	; (20001790 <graphic_ctrl_bit_set+0x4c>)
20001752:	230f      	movs	r3, #15
20001754:	18fb      	adds	r3, r7, r3
20001756:	7812      	ldrb	r2, [r2, #0]
20001758:	701a      	strb	r2, [r3, #0]
	c |= x;
2000175a:	230f      	movs	r3, #15
2000175c:	18fb      	adds	r3, r7, r3
2000175e:	220f      	movs	r2, #15
20001760:	18b9      	adds	r1, r7, r2
20001762:	1dfa      	adds	r2, r7, #7
20001764:	7809      	ldrb	r1, [r1, #0]
20001766:	7812      	ldrb	r2, [r2, #0]
20001768:	430a      	orrs	r2, r1
2000176a:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
2000176c:	230f      	movs	r3, #15
2000176e:	18fb      	adds	r3, r7, r3
20001770:	220f      	movs	r2, #15
20001772:	18ba      	adds	r2, r7, r2
20001774:	7812      	ldrb	r2, [r2, #0]
20001776:	2104      	movs	r1, #4
20001778:	438a      	bics	r2, r1
2000177a:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
2000177c:	4a04      	ldr	r2, [pc, #16]	; (20001790 <graphic_ctrl_bit_set+0x4c>)
2000177e:	230f      	movs	r3, #15
20001780:	18fb      	adds	r3, r7, r3
20001782:	781b      	ldrb	r3, [r3, #0]
20001784:	7013      	strb	r3, [r2, #0]
}
20001786:	46c0      	nop			; (mov r8, r8)
20001788:	46bd      	mov	sp, r7
2000178a:	b004      	add	sp, #16
2000178c:	bd80      	pop	{r7, pc}
2000178e:	46c0      	nop			; (mov r8, r8)
20001790:	40021014 	andmi	r1, r2, r4, lsl r0

20001794 <graphic_ctrl_bit_clear>:
/* välj grafik-display och nollställ de bitar som är 1 i x */
static void graphic_ctrl_bit_clear( uint8_t x) {
20001794:	b580      	push	{r7, lr}
20001796:	b084      	sub	sp, #16
20001798:	af00      	add	r7, sp, #0
2000179a:	0002      	movs	r2, r0
2000179c:	1dfb      	adds	r3, r7, #7
2000179e:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
200017a0:	4a11      	ldr	r2, [pc, #68]	; (200017e8 <graphic_ctrl_bit_clear+0x54>)
200017a2:	230f      	movs	r3, #15
200017a4:	18fb      	adds	r3, r7, r3
200017a6:	7812      	ldrb	r2, [r2, #0]
200017a8:	701a      	strb	r2, [r3, #0]
	c &= ~x;
200017aa:	1dfb      	adds	r3, r7, #7
200017ac:	781b      	ldrb	r3, [r3, #0]
200017ae:	b25b      	sxtb	r3, r3
200017b0:	43db      	mvns	r3, r3
200017b2:	b25b      	sxtb	r3, r3
200017b4:	220f      	movs	r2, #15
200017b6:	18ba      	adds	r2, r7, r2
200017b8:	7812      	ldrb	r2, [r2, #0]
200017ba:	b252      	sxtb	r2, r2
200017bc:	4013      	ands	r3, r2
200017be:	b25a      	sxtb	r2, r3
200017c0:	230f      	movs	r3, #15
200017c2:	18fb      	adds	r3, r7, r3
200017c4:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
200017c6:	230f      	movs	r3, #15
200017c8:	18fb      	adds	r3, r7, r3
200017ca:	220f      	movs	r2, #15
200017cc:	18ba      	adds	r2, r7, r2
200017ce:	7812      	ldrb	r2, [r2, #0]
200017d0:	2104      	movs	r1, #4
200017d2:	438a      	bics	r2, r1
200017d4:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
200017d6:	4a04      	ldr	r2, [pc, #16]	; (200017e8 <graphic_ctrl_bit_clear+0x54>)
200017d8:	230f      	movs	r3, #15
200017da:	18fb      	adds	r3, r7, r3
200017dc:	781b      	ldrb	r3, [r3, #0]
200017de:	7013      	strb	r3, [r2, #0]
}
200017e0:	46c0      	nop			; (mov r8, r8)
200017e2:	46bd      	mov	sp, r7
200017e4:	b004      	add	sp, #16
200017e6:	bd80      	pop	{r7, pc}
200017e8:	40021014 	andmi	r1, r2, r4, lsl r0

200017ec <select_controller>:
void select_controller( uint8_t controller) {
200017ec:	b580      	push	{r7, lr}
200017ee:	b082      	sub	sp, #8
200017f0:	af00      	add	r7, sp, #0
200017f2:	0002      	movs	r2, r0
200017f4:	1dfb      	adds	r3, r7, #7
200017f6:	701a      	strb	r2, [r3, #0]
	switch (controller) {
200017f8:	1dfb      	adds	r3, r7, #7
200017fa:	781b      	ldrb	r3, [r3, #0]
200017fc:	2b08      	cmp	r3, #8
200017fe:	d00f      	beq.n	20001820 <select_controller+0x34>
20001800:	dc02      	bgt.n	20001808 <select_controller+0x1c>
20001802:	2b00      	cmp	r3, #0
20001804:	d005      	beq.n	20001812 <select_controller+0x26>
		case (B_CS1|B_CS2): 
			graphic_ctrl_bit_set(B_CS1); 
			graphic_ctrl_bit_set(B_CS2); 
			break;
	}
}
20001806:	e020      	b.n	2000184a <select_controller+0x5e>
	switch (controller) {
20001808:	2b10      	cmp	r3, #16
2000180a:	d010      	beq.n	2000182e <select_controller+0x42>
2000180c:	2b18      	cmp	r3, #24
2000180e:	d015      	beq.n	2000183c <select_controller+0x50>
}
20001810:	e01b      	b.n	2000184a <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
20001812:	2008      	movs	r0, #8
20001814:	f7ff ffbe 	bl	20001794 <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_clear(B_CS2); 
20001818:	2010      	movs	r0, #16
2000181a:	f7ff ffbb 	bl	20001794 <graphic_ctrl_bit_clear>
			break;
2000181e:	e014      	b.n	2000184a <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
20001820:	2008      	movs	r0, #8
20001822:	f7ff ff8f 	bl	20001744 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS2); 
20001826:	2010      	movs	r0, #16
20001828:	f7ff ffb4 	bl	20001794 <graphic_ctrl_bit_clear>
			break;
2000182c:	e00d      	b.n	2000184a <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
2000182e:	2008      	movs	r0, #8
20001830:	f7ff ffb0 	bl	20001794 <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_set(B_CS2); 
20001834:	2010      	movs	r0, #16
20001836:	f7ff ff85 	bl	20001744 <graphic_ctrl_bit_set>
			break;
2000183a:	e006      	b.n	2000184a <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
2000183c:	2008      	movs	r0, #8
2000183e:	f7ff ff81 	bl	20001744 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_set(B_CS2); 
20001842:	2010      	movs	r0, #16
20001844:	f7ff ff7e 	bl	20001744 <graphic_ctrl_bit_set>
			break;
20001848:	46c0      	nop			; (mov r8, r8)
}
2000184a:	46c0      	nop			; (mov r8, r8)
2000184c:	46bd      	mov	sp, r7
2000184e:	b002      	add	sp, #8
20001850:	bd80      	pop	{r7, pc}

20001852 <graphic_wait_ready>:

void graphic_wait_ready( void ) {
20001852:	b580      	push	{r7, lr}
20001854:	b082      	sub	sp, #8
20001856:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
20001858:	2040      	movs	r0, #64	; 0x40
2000185a:	f7ff ff9b 	bl	20001794 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
2000185e:	4b14      	ldr	r3, [pc, #80]	; (200018b0 <graphic_wait_ready+0x5e>)
20001860:	4a14      	ldr	r2, [pc, #80]	; (200018b4 <graphic_wait_ready+0x62>)
20001862:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
20001864:	2001      	movs	r0, #1
20001866:	f7ff ff95 	bl	20001794 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
2000186a:	2002      	movs	r0, #2
2000186c:	f7ff ff6a 	bl	20001744 <graphic_ctrl_bit_set>
	delay_500ns();
20001870:	f7ff fee0 	bl	20001634 <delay_500ns>
	
	while(1) {
		graphic_ctrl_bit_set(B_E);
20001874:	2040      	movs	r0, #64	; 0x40
20001876:	f7ff ff65 	bl	20001744 <graphic_ctrl_bit_set>
		delay_500ns();
2000187a:	f7ff fedb 	bl	20001634 <delay_500ns>
		c = *portIdrHigh & LCD_BUSY; //...
2000187e:	4b0e      	ldr	r3, [pc, #56]	; (200018b8 <graphic_wait_ready+0x66>)
20001880:	781b      	ldrb	r3, [r3, #0]
20001882:	b2da      	uxtb	r2, r3
20001884:	1dfb      	adds	r3, r7, #7
20001886:	217f      	movs	r1, #127	; 0x7f
20001888:	438a      	bics	r2, r1
2000188a:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
2000188c:	2040      	movs	r0, #64	; 0x40
2000188e:	f7ff ff81 	bl	20001794 <graphic_ctrl_bit_clear>
		delay_500ns();
20001892:	f7ff fecf 	bl	20001634 <delay_500ns>
		/*if (*portIdrHigh & 0x80 == 0x80) {
			break; }*/
		if (c == 0) break;
20001896:	1dfb      	adds	r3, r7, #7
20001898:	781b      	ldrb	r3, [r3, #0]
2000189a:	2b00      	cmp	r3, #0
2000189c:	d000      	beq.n	200018a0 <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
2000189e:	e7e9      	b.n	20001874 <graphic_wait_ready+0x22>
		if (c == 0) break;
200018a0:	46c0      	nop			; (mov r8, r8)
	}
	//graphic_ctrl_bit_set(B_E); //<--
	*portModer = 0x55555555;	
200018a2:	4b03      	ldr	r3, [pc, #12]	; (200018b0 <graphic_wait_ready+0x5e>)
200018a4:	4a05      	ldr	r2, [pc, #20]	; (200018bc <graphic_wait_ready+0x6a>)
200018a6:	601a      	str	r2, [r3, #0]
}
200018a8:	46c0      	nop			; (mov r8, r8)
200018aa:	46bd      	mov	sp, r7
200018ac:	b002      	add	sp, #8
200018ae:	bd80      	pop	{r7, pc}
200018b0:	40021000 	andmi	r1, r2, r0
200018b4:	00005555 	andeq	r5, r0, r5, asr r5
200018b8:	40021011 	andmi	r1, r2, r1, lsl r0
200018bc:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200018c0 <graphic_read>:

static uint8_t graphic_read(uint8_t controller) {
200018c0:	b580      	push	{r7, lr}
200018c2:	b084      	sub	sp, #16
200018c4:	af00      	add	r7, sp, #0
200018c6:	0002      	movs	r2, r0
200018c8:	1dfb      	adds	r3, r7, #7
200018ca:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200018cc:	2040      	movs	r0, #64	; 0x40
200018ce:	f7ff ff61 	bl	20001794 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
200018d2:	4b1c      	ldr	r3, [pc, #112]	; (20001944 <graphic_read+0x84>)
200018d4:	4a1c      	ldr	r2, [pc, #112]	; (20001948 <graphic_read+0x88>)
200018d6:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS);
200018d8:	2001      	movs	r0, #1
200018da:	f7ff ff33 	bl	20001744 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_set(B_RW);
200018de:	2002      	movs	r0, #2
200018e0:	f7ff ff30 	bl	20001744 <graphic_ctrl_bit_set>
	select_controller(controller);
200018e4:	1dfb      	adds	r3, r7, #7
200018e6:	781b      	ldrb	r3, [r3, #0]
200018e8:	0018      	movs	r0, r3
200018ea:	f7ff ff7f 	bl	200017ec <select_controller>
	delay_500ns();
200018ee:	f7ff fea1 	bl	20001634 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200018f2:	2040      	movs	r0, #64	; 0x40
200018f4:	f7ff ff26 	bl	20001744 <graphic_ctrl_bit_set>
	delay_500ns();
200018f8:	f7ff fe9c 	bl	20001634 <delay_500ns>
	unsigned char rv = *portIdrHigh;
200018fc:	4a13      	ldr	r2, [pc, #76]	; (2000194c <graphic_read+0x8c>)
200018fe:	230f      	movs	r3, #15
20001900:	18fb      	adds	r3, r7, r3
20001902:	7812      	ldrb	r2, [r2, #0]
20001904:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20001906:	2040      	movs	r0, #64	; 0x40
20001908:	f7ff ff44 	bl	20001794 <graphic_ctrl_bit_clear>
	*portModer = 0x55555555;
2000190c:	4b0d      	ldr	r3, [pc, #52]	; (20001944 <graphic_read+0x84>)
2000190e:	4a10      	ldr	r2, [pc, #64]	; (20001950 <graphic_read+0x90>)
20001910:	601a      	str	r2, [r3, #0]
	
	if(controller == B_CS1) {
20001912:	1dfb      	adds	r3, r7, #7
20001914:	781b      	ldrb	r3, [r3, #0]
20001916:	2b08      	cmp	r3, #8
20001918:	d104      	bne.n	20001924 <graphic_read+0x64>
		select_controller(B_CS1);
2000191a:	2008      	movs	r0, #8
2000191c:	f7ff ff66 	bl	200017ec <select_controller>
		graphic_wait_ready();
20001920:	f7ff ff97 	bl	20001852 <graphic_wait_ready>
	}
	if(controller == B_CS2) {
20001924:	1dfb      	adds	r3, r7, #7
20001926:	781b      	ldrb	r3, [r3, #0]
20001928:	2b10      	cmp	r3, #16
2000192a:	d104      	bne.n	20001936 <graphic_read+0x76>
		select_controller(B_CS2);
2000192c:	2010      	movs	r0, #16
2000192e:	f7ff ff5d 	bl	200017ec <select_controller>
		graphic_wait_ready();
20001932:	f7ff ff8e 	bl	20001852 <graphic_wait_ready>
	}
	
	return rv;
20001936:	230f      	movs	r3, #15
20001938:	18fb      	adds	r3, r7, r3
2000193a:	781b      	ldrb	r3, [r3, #0]
}
2000193c:	0018      	movs	r0, r3
2000193e:	46bd      	mov	sp, r7
20001940:	b004      	add	sp, #16
20001942:	bd80      	pop	{r7, pc}
20001944:	40021000 	andmi	r1, r2, r0
20001948:	00005555 	andeq	r5, r0, r5, asr r5
2000194c:	40021011 	andmi	r1, r2, r1, lsl r0
20001950:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20001954 <graphic_read_data>:

graphic_read_data(uint8_t controller) {
20001954:	b580      	push	{r7, lr}
20001956:	b082      	sub	sp, #8
20001958:	af00      	add	r7, sp, #0
2000195a:	0002      	movs	r2, r0
2000195c:	1dfb      	adds	r3, r7, #7
2000195e:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
20001960:	1dfb      	adds	r3, r7, #7
20001962:	781b      	ldrb	r3, [r3, #0]
20001964:	0018      	movs	r0, r3
20001966:	f7ff ffab 	bl	200018c0 <graphic_read>
	graphic_read(controller);
2000196a:	1dfb      	adds	r3, r7, #7
2000196c:	781b      	ldrb	r3, [r3, #0]
2000196e:	0018      	movs	r0, r3
20001970:	f7ff ffa6 	bl	200018c0 <graphic_read>
}
20001974:	46c0      	nop			; (mov r8, r8)
20001976:	0018      	movs	r0, r3
20001978:	46bd      	mov	sp, r7
2000197a:	b002      	add	sp, #8
2000197c:	bd80      	pop	{r7, pc}

2000197e <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller) {
2000197e:	b580      	push	{r7, lr}
20001980:	b082      	sub	sp, #8
20001982:	af00      	add	r7, sp, #0
20001984:	0002      	movs	r2, r0
20001986:	1dfb      	adds	r3, r7, #7
20001988:	701a      	strb	r2, [r3, #0]
2000198a:	1dbb      	adds	r3, r7, #6
2000198c:	1c0a      	adds	r2, r1, #0
2000198e:	701a      	strb	r2, [r3, #0]
	*portOdrHigh = value; //I
20001990:	4a19      	ldr	r2, [pc, #100]	; (200019f8 <graphic_write+0x7a>)
20001992:	1dfb      	adds	r3, r7, #7
20001994:	781b      	ldrb	r3, [r3, #0]
20001996:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
20001998:	1dbb      	adds	r3, r7, #6
2000199a:	781b      	ldrb	r3, [r3, #0]
2000199c:	0018      	movs	r0, r3
2000199e:	f7ff ff25 	bl	200017ec <select_controller>
	delay_500ns();
200019a2:	f7ff fe47 	bl	20001634 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200019a6:	2040      	movs	r0, #64	; 0x40
200019a8:	f7ff fecc 	bl	20001744 <graphic_ctrl_bit_set>
	delay_500ns();
200019ac:	f7ff fe42 	bl	20001634 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
200019b0:	2040      	movs	r0, #64	; 0x40
200019b2:	f7ff feef 	bl	20001794 <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1) {
200019b6:	1dbb      	adds	r3, r7, #6
200019b8:	781b      	ldrb	r3, [r3, #0]
200019ba:	2208      	movs	r2, #8
200019bc:	4013      	ands	r3, r2
200019be:	d004      	beq.n	200019ca <graphic_write+0x4c>
		select_controller(B_CS1);
200019c0:	2008      	movs	r0, #8
200019c2:	f7ff ff13 	bl	200017ec <select_controller>
		graphic_wait_ready();
200019c6:	f7ff ff44 	bl	20001852 <graphic_wait_ready>
	}
	if(controller & B_CS2) {
200019ca:	1dbb      	adds	r3, r7, #6
200019cc:	781b      	ldrb	r3, [r3, #0]
200019ce:	2210      	movs	r2, #16
200019d0:	4013      	ands	r3, r2
200019d2:	d004      	beq.n	200019de <graphic_write+0x60>
		select_controller(B_CS2);
200019d4:	2010      	movs	r0, #16
200019d6:	f7ff ff09 	bl	200017ec <select_controller>
		graphic_wait_ready();
200019da:	f7ff ff3a 	bl	20001852 <graphic_wait_ready>
	}
	
	*portOdrHigh = 0;	//I
200019de:	4b06      	ldr	r3, [pc, #24]	; (200019f8 <graphic_write+0x7a>)
200019e0:	2200      	movs	r2, #0
200019e2:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
200019e4:	2040      	movs	r0, #64	; 0x40
200019e6:	f7ff fead 	bl	20001744 <graphic_ctrl_bit_set>
	select_controller(0);
200019ea:	2000      	movs	r0, #0
200019ec:	f7ff fefe 	bl	200017ec <select_controller>
}
200019f0:	46c0      	nop			; (mov r8, r8)
200019f2:	46bd      	mov	sp, r7
200019f4:	b002      	add	sp, #8
200019f6:	bd80      	pop	{r7, pc}
200019f8:	40021015 	andmi	r1, r2, r5, lsl r0

200019fc <graphic_write_command>:
void graphic_write_command(uint8_t command, uint8_t controller) {
200019fc:	b580      	push	{r7, lr}
200019fe:	b082      	sub	sp, #8
20001a00:	af00      	add	r7, sp, #0
20001a02:	0002      	movs	r2, r0
20001a04:	1dfb      	adds	r3, r7, #7
20001a06:	701a      	strb	r2, [r3, #0]
20001a08:	1dbb      	adds	r3, r7, #6
20001a0a:	1c0a      	adds	r2, r1, #0
20001a0c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20001a0e:	2040      	movs	r0, #64	; 0x40
20001a10:	f7ff fec0 	bl	20001794 <graphic_ctrl_bit_clear>
	select_controller(controller);
20001a14:	1dbb      	adds	r3, r7, #6
20001a16:	781b      	ldrb	r3, [r3, #0]
20001a18:	0018      	movs	r0, r3
20001a1a:	f7ff fee7 	bl	200017ec <select_controller>
	graphic_ctrl_bit_clear(B_RS);
20001a1e:	2001      	movs	r0, #1
20001a20:	f7ff feb8 	bl	20001794 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RW);
20001a24:	2002      	movs	r0, #2
20001a26:	f7ff feb5 	bl	20001794 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20001a2a:	1dbb      	adds	r3, r7, #6
20001a2c:	781a      	ldrb	r2, [r3, #0]
20001a2e:	1dfb      	adds	r3, r7, #7
20001a30:	781b      	ldrb	r3, [r3, #0]
20001a32:	0011      	movs	r1, r2
20001a34:	0018      	movs	r0, r3
20001a36:	f7ff ffa2 	bl	2000197e <graphic_write>
}
20001a3a:	46c0      	nop			; (mov r8, r8)
20001a3c:	46bd      	mov	sp, r7
20001a3e:	b002      	add	sp, #8
20001a40:	bd80      	pop	{r7, pc}

20001a42 <graphic_write_data>:
void graphic_write_data(uint8_t command, uint8_t controller) {
20001a42:	b580      	push	{r7, lr}
20001a44:	b082      	sub	sp, #8
20001a46:	af00      	add	r7, sp, #0
20001a48:	0002      	movs	r2, r0
20001a4a:	1dfb      	adds	r3, r7, #7
20001a4c:	701a      	strb	r2, [r3, #0]
20001a4e:	1dbb      	adds	r3, r7, #6
20001a50:	1c0a      	adds	r2, r1, #0
20001a52:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20001a54:	2040      	movs	r0, #64	; 0x40
20001a56:	f7ff fe9d 	bl	20001794 <graphic_ctrl_bit_clear>
	select_controller(controller);
20001a5a:	1dbb      	adds	r3, r7, #6
20001a5c:	781b      	ldrb	r3, [r3, #0]
20001a5e:	0018      	movs	r0, r3
20001a60:	f7ff fec4 	bl	200017ec <select_controller>
	graphic_ctrl_bit_set(B_RS);
20001a64:	2001      	movs	r0, #1
20001a66:	f7ff fe6d 	bl	20001744 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20001a6a:	2002      	movs	r0, #2
20001a6c:	f7ff fe92 	bl	20001794 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20001a70:	1dbb      	adds	r3, r7, #6
20001a72:	781a      	ldrb	r2, [r3, #0]
20001a74:	1dfb      	adds	r3, r7, #7
20001a76:	781b      	ldrb	r3, [r3, #0]
20001a78:	0011      	movs	r1, r2
20001a7a:	0018      	movs	r0, r3
20001a7c:	f7ff ff7f 	bl	2000197e <graphic_write>
}
20001a80:	46c0      	nop			; (mov r8, r8)
20001a82:	46bd      	mov	sp, r7
20001a84:	b002      	add	sp, #8
20001a86:	bd80      	pop	{r7, pc}

20001a88 <graphic_initialize>:

void graphic_initialize( void ) {
20001a88:	b580      	push	{r7, lr}
20001a8a:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20001a8c:	2040      	movs	r0, #64	; 0x40
20001a8e:	f7ff fe59 	bl	20001744 <graphic_ctrl_bit_set>
	delay_micro(10);
20001a92:	200a      	movs	r0, #10
20001a94:	f7ff fdf0 	bl	20001678 <delay_micro>
	
	graphic_ctrl_bit_clear(B_CS1);
20001a98:	2008      	movs	r0, #8
20001a9a:	f7ff fe7b 	bl	20001794 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_CS2);
20001a9e:	2010      	movs	r0, #16
20001aa0:	f7ff fe78 	bl	20001794 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RST);
20001aa4:	2020      	movs	r0, #32
20001aa6:	f7ff fe75 	bl	20001794 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_E);
20001aaa:	2040      	movs	r0, #64	; 0x40
20001aac:	f7ff fe72 	bl	20001794 <graphic_ctrl_bit_clear>
	//#define SIMULATOR
	delay_milli(30);
20001ab0:	201e      	movs	r0, #30
20001ab2:	f7ff fdf7 	bl	200016a4 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20001ab6:	2020      	movs	r0, #32
20001ab8:	f7ff fe44 	bl	20001744 <graphic_ctrl_bit_set>
	delay_milli(100); //...
20001abc:	2064      	movs	r0, #100	; 0x64
20001abe:	f7ff fdf1 	bl	200016a4 <delay_milli>
	
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
20001ac2:	2118      	movs	r1, #24
20001ac4:	203e      	movs	r0, #62	; 0x3e
20001ac6:	f7ff ff99 	bl	200019fc <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
20001aca:	2118      	movs	r1, #24
20001acc:	203f      	movs	r0, #63	; 0x3f
20001ace:	f7ff ff95 	bl	200019fc <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20001ad2:	2118      	movs	r1, #24
20001ad4:	20c0      	movs	r0, #192	; 0xc0
20001ad6:	f7ff ff91 	bl	200019fc <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
20001ada:	2118      	movs	r1, #24
20001adc:	2040      	movs	r0, #64	; 0x40
20001ade:	f7ff ff8d 	bl	200019fc <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20001ae2:	2118      	movs	r1, #24
20001ae4:	20b8      	movs	r0, #184	; 0xb8
20001ae6:	f7ff ff89 	bl	200019fc <graphic_write_command>
	select_controller(0);
20001aea:	2000      	movs	r0, #0
20001aec:	f7ff fe7e 	bl	200017ec <select_controller>
}
20001af0:	46c0      	nop			; (mov r8, r8)
20001af2:	46bd      	mov	sp, r7
20001af4:	bd80      	pop	{r7, pc}

20001af6 <graphic_clear_screen>:
void graphic_clear_screen( void ) {	//Annat i slidesen
20001af6:	b580      	push	{r7, lr}
20001af8:	b082      	sub	sp, #8
20001afa:	af00      	add	r7, sp, #0
	uint8_t page;
	for (page = 0; page < 8; page++) {
20001afc:	1dfb      	adds	r3, r7, #7
20001afe:	2200      	movs	r2, #0
20001b00:	701a      	strb	r2, [r3, #0]
20001b02:	e023      	b.n	20001b4c <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
20001b04:	1dfb      	adds	r3, r7, #7
20001b06:	781b      	ldrb	r3, [r3, #0]
20001b08:	2248      	movs	r2, #72	; 0x48
20001b0a:	4252      	negs	r2, r2
20001b0c:	4313      	orrs	r3, r2
20001b0e:	b2db      	uxtb	r3, r3
20001b10:	2118      	movs	r1, #24
20001b12:	0018      	movs	r0, r3
20001b14:	f7ff ff72 	bl	200019fc <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
20001b18:	2118      	movs	r1, #24
20001b1a:	2040      	movs	r0, #64	; 0x40
20001b1c:	f7ff ff6e 	bl	200019fc <graphic_write_command>
		uint8_t add;
		for (add = 0; add < 64; add++) {
20001b20:	1dbb      	adds	r3, r7, #6
20001b22:	2200      	movs	r2, #0
20001b24:	701a      	strb	r2, [r3, #0]
20001b26:	e008      	b.n	20001b3a <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1|B_CS2);
20001b28:	2118      	movs	r1, #24
20001b2a:	2000      	movs	r0, #0
20001b2c:	f7ff ff89 	bl	20001a42 <graphic_write_data>
		for (add = 0; add < 64; add++) {
20001b30:	1dbb      	adds	r3, r7, #6
20001b32:	781a      	ldrb	r2, [r3, #0]
20001b34:	1dbb      	adds	r3, r7, #6
20001b36:	3201      	adds	r2, #1
20001b38:	701a      	strb	r2, [r3, #0]
20001b3a:	1dbb      	adds	r3, r7, #6
20001b3c:	781b      	ldrb	r3, [r3, #0]
20001b3e:	2b3f      	cmp	r3, #63	; 0x3f
20001b40:	d9f2      	bls.n	20001b28 <graphic_clear_screen+0x32>
	for (page = 0; page < 8; page++) {
20001b42:	1dfb      	adds	r3, r7, #7
20001b44:	781a      	ldrb	r2, [r3, #0]
20001b46:	1dfb      	adds	r3, r7, #7
20001b48:	3201      	adds	r2, #1
20001b4a:	701a      	strb	r2, [r3, #0]
20001b4c:	1dfb      	adds	r3, r7, #7
20001b4e:	781b      	ldrb	r3, [r3, #0]
20001b50:	2b07      	cmp	r3, #7
20001b52:	d9d7      	bls.n	20001b04 <graphic_clear_screen+0xe>
		}
	}
}
20001b54:	46c0      	nop			; (mov r8, r8)
20001b56:	46bd      	mov	sp, r7
20001b58:	b002      	add	sp, #8
20001b5a:	bd80      	pop	{r7, pc}

20001b5c <pixel>:

/** Color: 1=light 2=gray 3=black*/
void pixel(int x, int y, int set, int color) {
20001b5c:	b580      	push	{r7, lr}
20001b5e:	b086      	sub	sp, #24
20001b60:	af00      	add	r7, sp, #0
20001b62:	60f8      	str	r0, [r7, #12]
20001b64:	60b9      	str	r1, [r7, #8]
20001b66:	607a      	str	r2, [r7, #4]
20001b68:	603b      	str	r3, [r7, #0]
	uint8_t mask;
	int index = 0;
20001b6a:	2300      	movs	r3, #0
20001b6c:	613b      	str	r3, [r7, #16]
	if( (x > 128 ) || (x < 1) || (y > 64) || (y < 1) ) 
20001b6e:	68fb      	ldr	r3, [r7, #12]
20001b70:	2b80      	cmp	r3, #128	; 0x80
20001b72:	dd00      	ble.n	20001b76 <pixel+0x1a>
20001b74:	e0a6      	b.n	20001cc4 <pixel+0x168>
20001b76:	68fb      	ldr	r3, [r7, #12]
20001b78:	2b00      	cmp	r3, #0
20001b7a:	dc00      	bgt.n	20001b7e <pixel+0x22>
20001b7c:	e0a2      	b.n	20001cc4 <pixel+0x168>
20001b7e:	68bb      	ldr	r3, [r7, #8]
20001b80:	2b40      	cmp	r3, #64	; 0x40
20001b82:	dd00      	ble.n	20001b86 <pixel+0x2a>
20001b84:	e09e      	b.n	20001cc4 <pixel+0x168>
20001b86:	68bb      	ldr	r3, [r7, #8]
20001b88:	2b00      	cmp	r3, #0
20001b8a:	dc00      	bgt.n	20001b8e <pixel+0x32>
20001b8c:	e09a      	b.n	20001cc4 <pixel+0x168>
		return;
	mask = 1 << ((y-1)%8);
20001b8e:	68bb      	ldr	r3, [r7, #8]
20001b90:	3b01      	subs	r3, #1
20001b92:	4a4e      	ldr	r2, [pc, #312]	; (20001ccc <pixel+0x170>)
20001b94:	4013      	ands	r3, r2
20001b96:	d504      	bpl.n	20001ba2 <pixel+0x46>
20001b98:	3b01      	subs	r3, #1
20001b9a:	2208      	movs	r2, #8
20001b9c:	4252      	negs	r2, r2
20001b9e:	4313      	orrs	r3, r2
20001ba0:	3301      	adds	r3, #1
20001ba2:	001a      	movs	r2, r3
20001ba4:	2301      	movs	r3, #1
20001ba6:	4093      	lsls	r3, r2
20001ba8:	001a      	movs	r2, r3
20001baa:	2317      	movs	r3, #23
20001bac:	18fb      	adds	r3, r7, r3
20001bae:	701a      	strb	r2, [r3, #0]
	if(x > 64) {
20001bb0:	68fb      	ldr	r3, [r7, #12]
20001bb2:	2b40      	cmp	r3, #64	; 0x40
20001bb4:	dd05      	ble.n	20001bc2 <pixel+0x66>
		x -= 65;
20001bb6:	68fb      	ldr	r3, [r7, #12]
20001bb8:	3b41      	subs	r3, #65	; 0x41
20001bba:	60fb      	str	r3, [r7, #12]
		index = 512;
20001bbc:	2380      	movs	r3, #128	; 0x80
20001bbe:	009b      	lsls	r3, r3, #2
20001bc0:	613b      	str	r3, [r7, #16]
	}
	index += x + ((y-1)/8)*64;
20001bc2:	68bb      	ldr	r3, [r7, #8]
20001bc4:	3b01      	subs	r3, #1
20001bc6:	2b00      	cmp	r3, #0
20001bc8:	da00      	bge.n	20001bcc <pixel+0x70>
20001bca:	3307      	adds	r3, #7
20001bcc:	10db      	asrs	r3, r3, #3
20001bce:	019a      	lsls	r2, r3, #6
20001bd0:	68fb      	ldr	r3, [r7, #12]
20001bd2:	18d3      	adds	r3, r2, r3
20001bd4:	693a      	ldr	r2, [r7, #16]
20001bd6:	18d3      	adds	r3, r2, r3
20001bd8:	613b      	str	r3, [r7, #16]

	if(set == 0)
20001bda:	687b      	ldr	r3, [r7, #4]
20001bdc:	2b00      	cmp	r3, #0
20001bde:	d106      	bne.n	20001bee <pixel+0x92>
		mask = ~mask;
20001be0:	2317      	movs	r3, #23
20001be2:	18fb      	adds	r3, r7, r3
20001be4:	2217      	movs	r2, #23
20001be6:	18ba      	adds	r2, r7, r2
20001be8:	7812      	ldrb	r2, [r2, #0]
20001bea:	43d2      	mvns	r2, r2
20001bec:	701a      	strb	r2, [r3, #0]

	switch (color) {
20001bee:	683b      	ldr	r3, [r7, #0]
20001bf0:	2b02      	cmp	r3, #2
20001bf2:	d024      	beq.n	20001c3e <pixel+0xe2>
20001bf4:	2b03      	cmp	r3, #3
20001bf6:	d043      	beq.n	20001c80 <pixel+0x124>
20001bf8:	2b01      	cmp	r3, #1
20001bfa:	d164      	bne.n	20001cc6 <pixel+0x16a>
		case 1:	
			if(set)
20001bfc:	687b      	ldr	r3, [r7, #4]
20001bfe:	2b00      	cmp	r3, #0
20001c00:	d00e      	beq.n	20001c20 <pixel+0xc4>
				backBufferLight[index] |= mask;
20001c02:	4a33      	ldr	r2, [pc, #204]	; (20001cd0 <pixel+0x174>)
20001c04:	693b      	ldr	r3, [r7, #16]
20001c06:	18d3      	adds	r3, r2, r3
20001c08:	781a      	ldrb	r2, [r3, #0]
20001c0a:	2317      	movs	r3, #23
20001c0c:	18fb      	adds	r3, r7, r3
20001c0e:	781b      	ldrb	r3, [r3, #0]
20001c10:	4313      	orrs	r3, r2
20001c12:	b2d9      	uxtb	r1, r3
20001c14:	4a2e      	ldr	r2, [pc, #184]	; (20001cd0 <pixel+0x174>)
20001c16:	693b      	ldr	r3, [r7, #16]
20001c18:	18d3      	adds	r3, r2, r3
20001c1a:	1c0a      	adds	r2, r1, #0
20001c1c:	701a      	strb	r2, [r3, #0]
			else
				backBufferLight[index] &= mask;
			break;
20001c1e:	e052      	b.n	20001cc6 <pixel+0x16a>
				backBufferLight[index] &= mask;
20001c20:	4a2b      	ldr	r2, [pc, #172]	; (20001cd0 <pixel+0x174>)
20001c22:	693b      	ldr	r3, [r7, #16]
20001c24:	18d3      	adds	r3, r2, r3
20001c26:	781b      	ldrb	r3, [r3, #0]
20001c28:	2217      	movs	r2, #23
20001c2a:	18ba      	adds	r2, r7, r2
20001c2c:	7812      	ldrb	r2, [r2, #0]
20001c2e:	4013      	ands	r3, r2
20001c30:	b2d9      	uxtb	r1, r3
20001c32:	4a27      	ldr	r2, [pc, #156]	; (20001cd0 <pixel+0x174>)
20001c34:	693b      	ldr	r3, [r7, #16]
20001c36:	18d3      	adds	r3, r2, r3
20001c38:	1c0a      	adds	r2, r1, #0
20001c3a:	701a      	strb	r2, [r3, #0]
			break;
20001c3c:	e043      	b.n	20001cc6 <pixel+0x16a>
		
		case 2:	
			if(set)
20001c3e:	687b      	ldr	r3, [r7, #4]
20001c40:	2b00      	cmp	r3, #0
20001c42:	d00e      	beq.n	20001c62 <pixel+0x106>
				backBufferGray[index] |= mask;
20001c44:	4a23      	ldr	r2, [pc, #140]	; (20001cd4 <pixel+0x178>)
20001c46:	693b      	ldr	r3, [r7, #16]
20001c48:	18d3      	adds	r3, r2, r3
20001c4a:	781a      	ldrb	r2, [r3, #0]
20001c4c:	2317      	movs	r3, #23
20001c4e:	18fb      	adds	r3, r7, r3
20001c50:	781b      	ldrb	r3, [r3, #0]
20001c52:	4313      	orrs	r3, r2
20001c54:	b2d9      	uxtb	r1, r3
20001c56:	4a1f      	ldr	r2, [pc, #124]	; (20001cd4 <pixel+0x178>)
20001c58:	693b      	ldr	r3, [r7, #16]
20001c5a:	18d3      	adds	r3, r2, r3
20001c5c:	1c0a      	adds	r2, r1, #0
20001c5e:	701a      	strb	r2, [r3, #0]
			else
				backBufferGray[index] &= mask;
			break;
20001c60:	e031      	b.n	20001cc6 <pixel+0x16a>
				backBufferGray[index] &= mask;
20001c62:	4a1c      	ldr	r2, [pc, #112]	; (20001cd4 <pixel+0x178>)
20001c64:	693b      	ldr	r3, [r7, #16]
20001c66:	18d3      	adds	r3, r2, r3
20001c68:	781b      	ldrb	r3, [r3, #0]
20001c6a:	2217      	movs	r2, #23
20001c6c:	18ba      	adds	r2, r7, r2
20001c6e:	7812      	ldrb	r2, [r2, #0]
20001c70:	4013      	ands	r3, r2
20001c72:	b2d9      	uxtb	r1, r3
20001c74:	4a17      	ldr	r2, [pc, #92]	; (20001cd4 <pixel+0x178>)
20001c76:	693b      	ldr	r3, [r7, #16]
20001c78:	18d3      	adds	r3, r2, r3
20001c7a:	1c0a      	adds	r2, r1, #0
20001c7c:	701a      	strb	r2, [r3, #0]
			break;
20001c7e:	e022      	b.n	20001cc6 <pixel+0x16a>
		
		case 3:	
			if(set)
20001c80:	687b      	ldr	r3, [r7, #4]
20001c82:	2b00      	cmp	r3, #0
20001c84:	d00e      	beq.n	20001ca4 <pixel+0x148>
				backBuffer[index] |= mask;
20001c86:	4a14      	ldr	r2, [pc, #80]	; (20001cd8 <pixel+0x17c>)
20001c88:	693b      	ldr	r3, [r7, #16]
20001c8a:	18d3      	adds	r3, r2, r3
20001c8c:	781a      	ldrb	r2, [r3, #0]
20001c8e:	2317      	movs	r3, #23
20001c90:	18fb      	adds	r3, r7, r3
20001c92:	781b      	ldrb	r3, [r3, #0]
20001c94:	4313      	orrs	r3, r2
20001c96:	b2d9      	uxtb	r1, r3
20001c98:	4a0f      	ldr	r2, [pc, #60]	; (20001cd8 <pixel+0x17c>)
20001c9a:	693b      	ldr	r3, [r7, #16]
20001c9c:	18d3      	adds	r3, r2, r3
20001c9e:	1c0a      	adds	r2, r1, #0
20001ca0:	701a      	strb	r2, [r3, #0]
			else
				backBuffer[index] &= mask;
			break;
20001ca2:	e010      	b.n	20001cc6 <pixel+0x16a>
				backBuffer[index] &= mask;
20001ca4:	4a0c      	ldr	r2, [pc, #48]	; (20001cd8 <pixel+0x17c>)
20001ca6:	693b      	ldr	r3, [r7, #16]
20001ca8:	18d3      	adds	r3, r2, r3
20001caa:	781b      	ldrb	r3, [r3, #0]
20001cac:	2217      	movs	r2, #23
20001cae:	18ba      	adds	r2, r7, r2
20001cb0:	7812      	ldrb	r2, [r2, #0]
20001cb2:	4013      	ands	r3, r2
20001cb4:	b2d9      	uxtb	r1, r3
20001cb6:	4a08      	ldr	r2, [pc, #32]	; (20001cd8 <pixel+0x17c>)
20001cb8:	693b      	ldr	r3, [r7, #16]
20001cba:	18d3      	adds	r3, r2, r3
20001cbc:	1c0a      	adds	r2, r1, #0
20001cbe:	701a      	strb	r2, [r3, #0]
			break;
20001cc0:	46c0      	nop			; (mov r8, r8)
20001cc2:	e000      	b.n	20001cc6 <pixel+0x16a>
		return;
20001cc4:	46c0      	nop			; (mov r8, r8)
			
	}

}
20001cc6:	46bd      	mov	sp, r7
20001cc8:	b006      	add	sp, #24
20001cca:	bd80      	pop	{r7, pc}
20001ccc:	80000007 	andhi	r0, r0, r7
20001cd0:	20004cbc 			; <UNDEFINED> instruction: 0x20004cbc
20001cd4:	200034bc 			; <UNDEFINED> instruction: 0x200034bc
20001cd8:	20003cbc 			; <UNDEFINED> instruction: 0x20003cbc

20001cdc <pixel2>:


void pixel2(int x, int y, int set) {
20001cdc:	b580      	push	{r7, lr}
20001cde:	b088      	sub	sp, #32
20001ce0:	af00      	add	r7, sp, #0
20001ce2:	60f8      	str	r0, [r7, #12]
20001ce4:	60b9      	str	r1, [r7, #8]
20001ce6:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20001ce8:	68fb      	ldr	r3, [r7, #12]
20001cea:	2b00      	cmp	r3, #0
20001cec:	dc00      	bgt.n	20001cf0 <pixel2+0x14>
20001cee:	e0bc      	b.n	20001e6a <pixel2+0x18e>
20001cf0:	68bb      	ldr	r3, [r7, #8]
20001cf2:	2b00      	cmp	r3, #0
20001cf4:	dc00      	bgt.n	20001cf8 <pixel2+0x1c>
20001cf6:	e0b8      	b.n	20001e6a <pixel2+0x18e>
20001cf8:	68fb      	ldr	r3, [r7, #12]
20001cfa:	2b80      	cmp	r3, #128	; 0x80
20001cfc:	dd00      	ble.n	20001d00 <pixel2+0x24>
20001cfe:	e0b4      	b.n	20001e6a <pixel2+0x18e>
20001d00:	68bb      	ldr	r3, [r7, #8]
20001d02:	2b40      	cmp	r3, #64	; 0x40
20001d04:	dd00      	ble.n	20001d08 <pixel2+0x2c>
20001d06:	e0b0      	b.n	20001e6a <pixel2+0x18e>
	index = (y-1)/8;
20001d08:	68bb      	ldr	r3, [r7, #8]
20001d0a:	3b01      	subs	r3, #1
20001d0c:	2b00      	cmp	r3, #0
20001d0e:	da00      	bge.n	20001d12 <pixel2+0x36>
20001d10:	3307      	adds	r3, #7
20001d12:	10db      	asrs	r3, r3, #3
20001d14:	61bb      	str	r3, [r7, #24]
	switch( (y-1)%8 ) {
20001d16:	68bb      	ldr	r3, [r7, #8]
20001d18:	3b01      	subs	r3, #1
20001d1a:	4a56      	ldr	r2, [pc, #344]	; (20001e74 <pixel2+0x198>)
20001d1c:	4013      	ands	r3, r2
20001d1e:	d504      	bpl.n	20001d2a <pixel2+0x4e>
20001d20:	3b01      	subs	r3, #1
20001d22:	2208      	movs	r2, #8
20001d24:	4252      	negs	r2, r2
20001d26:	4313      	orrs	r3, r2
20001d28:	3301      	adds	r3, #1
20001d2a:	2b07      	cmp	r3, #7
20001d2c:	d82c      	bhi.n	20001d88 <pixel2+0xac>
20001d2e:	009a      	lsls	r2, r3, #2
20001d30:	4b51      	ldr	r3, [pc, #324]	; (20001e78 <pixel2+0x19c>)
20001d32:	18d3      	adds	r3, r2, r3
20001d34:	681b      	ldr	r3, [r3, #0]
20001d36:	469f      	mov	pc, r3
		case 0: mask = 1; break;
20001d38:	231f      	movs	r3, #31
20001d3a:	18fb      	adds	r3, r7, r3
20001d3c:	2201      	movs	r2, #1
20001d3e:	701a      	strb	r2, [r3, #0]
20001d40:	e022      	b.n	20001d88 <pixel2+0xac>
		case 1: mask = 2; break;
20001d42:	231f      	movs	r3, #31
20001d44:	18fb      	adds	r3, r7, r3
20001d46:	2202      	movs	r2, #2
20001d48:	701a      	strb	r2, [r3, #0]
20001d4a:	e01d      	b.n	20001d88 <pixel2+0xac>
		case 2: mask = 4; break;
20001d4c:	231f      	movs	r3, #31
20001d4e:	18fb      	adds	r3, r7, r3
20001d50:	2204      	movs	r2, #4
20001d52:	701a      	strb	r2, [r3, #0]
20001d54:	e018      	b.n	20001d88 <pixel2+0xac>
		case 3: mask = 8; break;
20001d56:	231f      	movs	r3, #31
20001d58:	18fb      	adds	r3, r7, r3
20001d5a:	2208      	movs	r2, #8
20001d5c:	701a      	strb	r2, [r3, #0]
20001d5e:	e013      	b.n	20001d88 <pixel2+0xac>
		case 4: mask = 0x10; break;
20001d60:	231f      	movs	r3, #31
20001d62:	18fb      	adds	r3, r7, r3
20001d64:	2210      	movs	r2, #16
20001d66:	701a      	strb	r2, [r3, #0]
20001d68:	e00e      	b.n	20001d88 <pixel2+0xac>
		case 5: mask = 0x20; break;
20001d6a:	231f      	movs	r3, #31
20001d6c:	18fb      	adds	r3, r7, r3
20001d6e:	2220      	movs	r2, #32
20001d70:	701a      	strb	r2, [r3, #0]
20001d72:	e009      	b.n	20001d88 <pixel2+0xac>
		case 6: mask = 0x40; break;
20001d74:	231f      	movs	r3, #31
20001d76:	18fb      	adds	r3, r7, r3
20001d78:	2240      	movs	r2, #64	; 0x40
20001d7a:	701a      	strb	r2, [r3, #0]
20001d7c:	e004      	b.n	20001d88 <pixel2+0xac>
		case 7: mask = 0x80; break;
20001d7e:	231f      	movs	r3, #31
20001d80:	18fb      	adds	r3, r7, r3
20001d82:	2280      	movs	r2, #128	; 0x80
20001d84:	701a      	strb	r2, [r3, #0]
20001d86:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0)
20001d88:	687b      	ldr	r3, [r7, #4]
20001d8a:	2b00      	cmp	r3, #0
20001d8c:	d106      	bne.n	20001d9c <pixel2+0xc0>
		mask = ~mask;
20001d8e:	231f      	movs	r3, #31
20001d90:	18fb      	adds	r3, r7, r3
20001d92:	221f      	movs	r2, #31
20001d94:	18ba      	adds	r2, r7, r2
20001d96:	7812      	ldrb	r2, [r2, #0]
20001d98:	43d2      	mvns	r2, r2
20001d9a:	701a      	strb	r2, [r3, #0]
	
	if(x > 64){
20001d9c:	68fb      	ldr	r3, [r7, #12]
20001d9e:	2b40      	cmp	r3, #64	; 0x40
20001da0:	dd07      	ble.n	20001db2 <pixel2+0xd6>
		controller = B_CS2;
20001da2:	231e      	movs	r3, #30
20001da4:	18fb      	adds	r3, r7, r3
20001da6:	2210      	movs	r2, #16
20001da8:	701a      	strb	r2, [r3, #0]
		x = x - 65;
20001daa:	68fb      	ldr	r3, [r7, #12]
20001dac:	3b41      	subs	r3, #65	; 0x41
20001dae:	60fb      	str	r3, [r7, #12]
20001db0:	e006      	b.n	20001dc0 <pixel2+0xe4>
	} else {
		controller = B_CS1;
20001db2:	231e      	movs	r3, #30
20001db4:	18fb      	adds	r3, r7, r3
20001db6:	2208      	movs	r2, #8
20001db8:	701a      	strb	r2, [r3, #0]
		x = x-1;
20001dba:	68fb      	ldr	r3, [r7, #12]
20001dbc:	3b01      	subs	r3, #1
20001dbe:	60fb      	str	r3, [r7, #12]
	}
	graphic_write_command(LCD_SET_ADD | x, controller );
20001dc0:	68fb      	ldr	r3, [r7, #12]
20001dc2:	b25b      	sxtb	r3, r3
20001dc4:	2240      	movs	r2, #64	; 0x40
20001dc6:	4313      	orrs	r3, r2
20001dc8:	b25b      	sxtb	r3, r3
20001dca:	b2da      	uxtb	r2, r3
20001dcc:	231e      	movs	r3, #30
20001dce:	18fb      	adds	r3, r7, r3
20001dd0:	781b      	ldrb	r3, [r3, #0]
20001dd2:	0019      	movs	r1, r3
20001dd4:	0010      	movs	r0, r2
20001dd6:	f7ff fe11 	bl	200019fc <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller );
20001dda:	69bb      	ldr	r3, [r7, #24]
20001ddc:	b25b      	sxtb	r3, r3
20001dde:	2248      	movs	r2, #72	; 0x48
20001de0:	4252      	negs	r2, r2
20001de2:	4313      	orrs	r3, r2
20001de4:	b25b      	sxtb	r3, r3
20001de6:	b2da      	uxtb	r2, r3
20001de8:	231e      	movs	r3, #30
20001dea:	18fb      	adds	r3, r7, r3
20001dec:	781b      	ldrb	r3, [r3, #0]
20001dee:	0019      	movs	r1, r3
20001df0:	0010      	movs	r0, r2
20001df2:	f7ff fe03 	bl	200019fc <graphic_write_command>
	
	c = graphic_read_data(controller);
20001df6:	231e      	movs	r3, #30
20001df8:	18fb      	adds	r3, r7, r3
20001dfa:	781b      	ldrb	r3, [r3, #0]
20001dfc:	0018      	movs	r0, r3
20001dfe:	f7ff fda9 	bl	20001954 <graphic_read_data>
20001e02:	0002      	movs	r2, r0
20001e04:	2317      	movs	r3, #23
20001e06:	18fb      	adds	r3, r7, r3
20001e08:	701a      	strb	r2, [r3, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
20001e0a:	68fb      	ldr	r3, [r7, #12]
20001e0c:	b25b      	sxtb	r3, r3
20001e0e:	2240      	movs	r2, #64	; 0x40
20001e10:	4313      	orrs	r3, r2
20001e12:	b25b      	sxtb	r3, r3
20001e14:	b2da      	uxtb	r2, r3
20001e16:	231e      	movs	r3, #30
20001e18:	18fb      	adds	r3, r7, r3
20001e1a:	781b      	ldrb	r3, [r3, #0]
20001e1c:	0019      	movs	r1, r3
20001e1e:	0010      	movs	r0, r2
20001e20:	f7ff fdec 	bl	200019fc <graphic_write_command>
	
	if(set)
20001e24:	687b      	ldr	r3, [r7, #4]
20001e26:	2b00      	cmp	r3, #0
20001e28:	d00a      	beq.n	20001e40 <pixel2+0x164>
		mask = mask | c;
20001e2a:	231f      	movs	r3, #31
20001e2c:	18fb      	adds	r3, r7, r3
20001e2e:	221f      	movs	r2, #31
20001e30:	18b9      	adds	r1, r7, r2
20001e32:	2217      	movs	r2, #23
20001e34:	18ba      	adds	r2, r7, r2
20001e36:	7809      	ldrb	r1, [r1, #0]
20001e38:	7812      	ldrb	r2, [r2, #0]
20001e3a:	430a      	orrs	r2, r1
20001e3c:	701a      	strb	r2, [r3, #0]
20001e3e:	e009      	b.n	20001e54 <pixel2+0x178>
	else
		mask = mask & c;
20001e40:	231f      	movs	r3, #31
20001e42:	18fb      	adds	r3, r7, r3
20001e44:	221f      	movs	r2, #31
20001e46:	18ba      	adds	r2, r7, r2
20001e48:	2117      	movs	r1, #23
20001e4a:	1879      	adds	r1, r7, r1
20001e4c:	7812      	ldrb	r2, [r2, #0]
20001e4e:	7809      	ldrb	r1, [r1, #0]
20001e50:	400a      	ands	r2, r1
20001e52:	701a      	strb	r2, [r3, #0]
	
	graphic_write_data(mask, controller);
20001e54:	231e      	movs	r3, #30
20001e56:	18fb      	adds	r3, r7, r3
20001e58:	781a      	ldrb	r2, [r3, #0]
20001e5a:	231f      	movs	r3, #31
20001e5c:	18fb      	adds	r3, r7, r3
20001e5e:	781b      	ldrb	r3, [r3, #0]
20001e60:	0011      	movs	r1, r2
20001e62:	0018      	movs	r0, r3
20001e64:	f7ff fded 	bl	20001a42 <graphic_write_data>
20001e68:	e000      	b.n	20001e6c <pixel2+0x190>
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20001e6a:	46c0      	nop			; (mov r8, r8)
}
20001e6c:	46bd      	mov	sp, r7
20001e6e:	b008      	add	sp, #32
20001e70:	bd80      	pop	{r7, pc}
20001e72:	46c0      	nop			; (mov r8, r8)
20001e74:	80000007 	andhi	r0, r0, r7
20001e78:	20008abc 			; <UNDEFINED> instruction: 0x20008abc

20001e7c <graphic_draw_screen>:

void graphic_draw_screen(uint8_t *buffer) {
20001e7c:	b580      	push	{r7, lr}
20001e7e:	b086      	sub	sp, #24
20001e80:	af00      	add	r7, sp, #0
20001e82:	6078      	str	r0, [r7, #4]
	uint8_t i, j, controller, c;
	unsigned int k = 0;
20001e84:	2300      	movs	r3, #0
20001e86:	613b      	str	r3, [r7, #16]
	for(c = 0; c < 2; c++) {
20001e88:	2315      	movs	r3, #21
20001e8a:	18fb      	adds	r3, r7, r3
20001e8c:	2200      	movs	r2, #0
20001e8e:	701a      	strb	r2, [r3, #0]
20001e90:	e056      	b.n	20001f40 <graphic_draw_screen+0xc4>
		controller = (c == 0) ? B_CS1 : B_CS2;
20001e92:	2315      	movs	r3, #21
20001e94:	18fb      	adds	r3, r7, r3
20001e96:	781b      	ldrb	r3, [r3, #0]
20001e98:	2b00      	cmp	r3, #0
20001e9a:	d101      	bne.n	20001ea0 <graphic_draw_screen+0x24>
20001e9c:	2208      	movs	r2, #8
20001e9e:	e000      	b.n	20001ea2 <graphic_draw_screen+0x26>
20001ea0:	2210      	movs	r2, #16
20001ea2:	230f      	movs	r3, #15
20001ea4:	18fb      	adds	r3, r7, r3
20001ea6:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 8; j++) {
20001ea8:	2316      	movs	r3, #22
20001eaa:	18fb      	adds	r3, r7, r3
20001eac:	2200      	movs	r2, #0
20001eae:	701a      	strb	r2, [r3, #0]
20001eb0:	e03a      	b.n	20001f28 <graphic_draw_screen+0xac>
			graphic_write_command(LCD_SET_PAGE | j, controller);
20001eb2:	2316      	movs	r3, #22
20001eb4:	18fb      	adds	r3, r7, r3
20001eb6:	781b      	ldrb	r3, [r3, #0]
20001eb8:	2248      	movs	r2, #72	; 0x48
20001eba:	4252      	negs	r2, r2
20001ebc:	4313      	orrs	r3, r2
20001ebe:	b2da      	uxtb	r2, r3
20001ec0:	230f      	movs	r3, #15
20001ec2:	18fb      	adds	r3, r7, r3
20001ec4:	781b      	ldrb	r3, [r3, #0]
20001ec6:	0019      	movs	r1, r3
20001ec8:	0010      	movs	r0, r2
20001eca:	f7ff fd97 	bl	200019fc <graphic_write_command>
			graphic_write_command(LCD_SET_ADD | 0, controller);
20001ece:	230f      	movs	r3, #15
20001ed0:	18fb      	adds	r3, r7, r3
20001ed2:	781b      	ldrb	r3, [r3, #0]
20001ed4:	0019      	movs	r1, r3
20001ed6:	2040      	movs	r0, #64	; 0x40
20001ed8:	f7ff fd90 	bl	200019fc <graphic_write_command>
			for(i = 0; i <= 63; i++, k++) {
20001edc:	2317      	movs	r3, #23
20001ede:	18fb      	adds	r3, r7, r3
20001ee0:	2200      	movs	r2, #0
20001ee2:	701a      	strb	r2, [r3, #0]
20001ee4:	e014      	b.n	20001f10 <graphic_draw_screen+0x94>
				graphic_write_data(buffer[k], controller);
20001ee6:	687a      	ldr	r2, [r7, #4]
20001ee8:	693b      	ldr	r3, [r7, #16]
20001eea:	18d3      	adds	r3, r2, r3
20001eec:	781a      	ldrb	r2, [r3, #0]
20001eee:	230f      	movs	r3, #15
20001ef0:	18fb      	adds	r3, r7, r3
20001ef2:	781b      	ldrb	r3, [r3, #0]
20001ef4:	0019      	movs	r1, r3
20001ef6:	0010      	movs	r0, r2
20001ef8:	f7ff fda3 	bl	20001a42 <graphic_write_data>
			for(i = 0; i <= 63; i++, k++) {
20001efc:	2317      	movs	r3, #23
20001efe:	18fb      	adds	r3, r7, r3
20001f00:	781a      	ldrb	r2, [r3, #0]
20001f02:	2317      	movs	r3, #23
20001f04:	18fb      	adds	r3, r7, r3
20001f06:	3201      	adds	r2, #1
20001f08:	701a      	strb	r2, [r3, #0]
20001f0a:	693b      	ldr	r3, [r7, #16]
20001f0c:	3301      	adds	r3, #1
20001f0e:	613b      	str	r3, [r7, #16]
20001f10:	2317      	movs	r3, #23
20001f12:	18fb      	adds	r3, r7, r3
20001f14:	781b      	ldrb	r3, [r3, #0]
20001f16:	2b3f      	cmp	r3, #63	; 0x3f
20001f18:	d9e5      	bls.n	20001ee6 <graphic_draw_screen+0x6a>
		for(j = 0; j < 8; j++) {
20001f1a:	2316      	movs	r3, #22
20001f1c:	18fb      	adds	r3, r7, r3
20001f1e:	781a      	ldrb	r2, [r3, #0]
20001f20:	2316      	movs	r3, #22
20001f22:	18fb      	adds	r3, r7, r3
20001f24:	3201      	adds	r2, #1
20001f26:	701a      	strb	r2, [r3, #0]
20001f28:	2316      	movs	r3, #22
20001f2a:	18fb      	adds	r3, r7, r3
20001f2c:	781b      	ldrb	r3, [r3, #0]
20001f2e:	2b07      	cmp	r3, #7
20001f30:	d9bf      	bls.n	20001eb2 <graphic_draw_screen+0x36>
	for(c = 0; c < 2; c++) {
20001f32:	2315      	movs	r3, #21
20001f34:	18fb      	adds	r3, r7, r3
20001f36:	781a      	ldrb	r2, [r3, #0]
20001f38:	2315      	movs	r3, #21
20001f3a:	18fb      	adds	r3, r7, r3
20001f3c:	3201      	adds	r2, #1
20001f3e:	701a      	strb	r2, [r3, #0]
20001f40:	2315      	movs	r3, #21
20001f42:	18fb      	adds	r3, r7, r3
20001f44:	781b      	ldrb	r3, [r3, #0]
20001f46:	2b01      	cmp	r3, #1
20001f48:	d9a3      	bls.n	20001e92 <graphic_draw_screen+0x16>
			}
		}
	}
}
20001f4a:	46c0      	nop			; (mov r8, r8)
20001f4c:	46bd      	mov	sp, r7
20001f4e:	b006      	add	sp, #24
20001f50:	bd80      	pop	{r7, pc}

20001f52 <draw_sprite>:


void grayScaleTest( void );


void draw_sprite(sprite* s, int x, int y, int set, int color) {
20001f52:	b5b0      	push	{r4, r5, r7, lr}
20001f54:	b08a      	sub	sp, #40	; 0x28
20001f56:	af00      	add	r7, sp, #0
20001f58:	60f8      	str	r0, [r7, #12]
20001f5a:	60b9      	str	r1, [r7, #8]
20001f5c:	607a      	str	r2, [r7, #4]
20001f5e:	603b      	str	r3, [r7, #0]
	int i,j,k, width_in_bytes;
	if (s->width % 8 == 0)
20001f60:	68fb      	ldr	r3, [r7, #12]
20001f62:	681b      	ldr	r3, [r3, #0]
20001f64:	2207      	movs	r2, #7
20001f66:	4013      	ands	r3, r2
20001f68:	d104      	bne.n	20001f74 <draw_sprite+0x22>
		width_in_bytes = s->width / 8;
20001f6a:	68fb      	ldr	r3, [r7, #12]
20001f6c:	681b      	ldr	r3, [r3, #0]
20001f6e:	08db      	lsrs	r3, r3, #3
20001f70:	61bb      	str	r3, [r7, #24]
20001f72:	e004      	b.n	20001f7e <draw_sprite+0x2c>
	else
		width_in_bytes = (s->width / 8) + 1;
20001f74:	68fb      	ldr	r3, [r7, #12]
20001f76:	681b      	ldr	r3, [r3, #0]
20001f78:	08db      	lsrs	r3, r3, #3
20001f7a:	3301      	adds	r3, #1
20001f7c:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < s->height; i++)
20001f7e:	2300      	movs	r3, #0
20001f80:	627b      	str	r3, [r7, #36]	; 0x24
20001f82:	e06a      	b.n	2000205a <draw_sprite+0x108>
		for (j = 0; j < width_in_bytes; j++) {
20001f84:	2300      	movs	r3, #0
20001f86:	623b      	str	r3, [r7, #32]
20001f88:	e060      	b.n	2000204c <draw_sprite+0xfa>
			unsigned char byte = s->data[i * width_in_bytes + j];
20001f8a:	68fb      	ldr	r3, [r7, #12]
20001f8c:	689b      	ldr	r3, [r3, #8]
20001f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001f90:	69b9      	ldr	r1, [r7, #24]
20001f92:	4351      	muls	r1, r2
20001f94:	6a3a      	ldr	r2, [r7, #32]
20001f96:	188a      	adds	r2, r1, r2
20001f98:	189a      	adds	r2, r3, r2
20001f9a:	2317      	movs	r3, #23
20001f9c:	18fb      	adds	r3, r7, r3
20001f9e:	7812      	ldrb	r2, [r2, #0]
20001fa0:	701a      	strb	r2, [r3, #0]
			for (k =0; k < 8; k++) {
20001fa2:	2300      	movs	r3, #0
20001fa4:	61fb      	str	r3, [r7, #28]
20001fa6:	e04b      	b.n	20002040 <draw_sprite+0xee>
				if (byte & (1 << k)){
20001fa8:	2317      	movs	r3, #23
20001faa:	18fb      	adds	r3, r7, r3
20001fac:	781a      	ldrb	r2, [r3, #0]
20001fae:	69fb      	ldr	r3, [r7, #28]
20001fb0:	411a      	asrs	r2, r3
20001fb2:	0013      	movs	r3, r2
20001fb4:	2201      	movs	r2, #1
20001fb6:	4013      	ands	r3, r2
20001fb8:	d03f      	beq.n	2000203a <draw_sprite+0xe8>
					pixel(8 * j + k + x + 1, i + y + 1, set, color);
20001fba:	6a3b      	ldr	r3, [r7, #32]
20001fbc:	00da      	lsls	r2, r3, #3
20001fbe:	69fb      	ldr	r3, [r7, #28]
20001fc0:	18d2      	adds	r2, r2, r3
20001fc2:	68bb      	ldr	r3, [r7, #8]
20001fc4:	18d3      	adds	r3, r2, r3
20001fc6:	1c58      	adds	r0, r3, #1
20001fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001fca:	687b      	ldr	r3, [r7, #4]
20001fcc:	18d3      	adds	r3, r2, r3
20001fce:	1c59      	adds	r1, r3, #1
20001fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001fd2:	683a      	ldr	r2, [r7, #0]
20001fd4:	f7ff fdc2 	bl	20001b5c <pixel>
					
					if(set) {	//Remove the other colors from this pixel
20001fd8:	683b      	ldr	r3, [r7, #0]
20001fda:	2b00      	cmp	r3, #0
20001fdc:	d02d      	beq.n	2000203a <draw_sprite+0xe8>
						pixel(8 * j + k + x + 1, i + y + 1, 0, (color+1) % 3);
20001fde:	6a3b      	ldr	r3, [r7, #32]
20001fe0:	00da      	lsls	r2, r3, #3
20001fe2:	69fb      	ldr	r3, [r7, #28]
20001fe4:	18d2      	adds	r2, r2, r3
20001fe6:	68bb      	ldr	r3, [r7, #8]
20001fe8:	18d3      	adds	r3, r2, r3
20001fea:	1c5c      	adds	r4, r3, #1
20001fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001fee:	687b      	ldr	r3, [r7, #4]
20001ff0:	18d3      	adds	r3, r2, r3
20001ff2:	1c5d      	adds	r5, r3, #1
20001ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001ff6:	3301      	adds	r3, #1
20001ff8:	2103      	movs	r1, #3
20001ffa:	0018      	movs	r0, r3
20001ffc:	f000 ff1a 	bl	20002e34 <__aeabi_idivmod>
20002000:	000b      	movs	r3, r1
20002002:	2200      	movs	r2, #0
20002004:	0029      	movs	r1, r5
20002006:	0020      	movs	r0, r4
20002008:	f7ff fda8 	bl	20001b5c <pixel>
						pixel(8 * j + k + x + 1, i + y + 1, 0, (color+2) % 3);
2000200c:	6a3b      	ldr	r3, [r7, #32]
2000200e:	00da      	lsls	r2, r3, #3
20002010:	69fb      	ldr	r3, [r7, #28]
20002012:	18d2      	adds	r2, r2, r3
20002014:	68bb      	ldr	r3, [r7, #8]
20002016:	18d3      	adds	r3, r2, r3
20002018:	1c5c      	adds	r4, r3, #1
2000201a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000201c:	687b      	ldr	r3, [r7, #4]
2000201e:	18d3      	adds	r3, r2, r3
20002020:	1c5d      	adds	r5, r3, #1
20002022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20002024:	3302      	adds	r3, #2
20002026:	2103      	movs	r1, #3
20002028:	0018      	movs	r0, r3
2000202a:	f000 ff03 	bl	20002e34 <__aeabi_idivmod>
2000202e:	000b      	movs	r3, r1
20002030:	2200      	movs	r2, #0
20002032:	0029      	movs	r1, r5
20002034:	0020      	movs	r0, r4
20002036:	f7ff fd91 	bl	20001b5c <pixel>
			for (k =0; k < 8; k++) {
2000203a:	69fb      	ldr	r3, [r7, #28]
2000203c:	3301      	adds	r3, #1
2000203e:	61fb      	str	r3, [r7, #28]
20002040:	69fb      	ldr	r3, [r7, #28]
20002042:	2b07      	cmp	r3, #7
20002044:	ddb0      	ble.n	20001fa8 <draw_sprite+0x56>
		for (j = 0; j < width_in_bytes; j++) {
20002046:	6a3b      	ldr	r3, [r7, #32]
20002048:	3301      	adds	r3, #1
2000204a:	623b      	str	r3, [r7, #32]
2000204c:	6a3a      	ldr	r2, [r7, #32]
2000204e:	69bb      	ldr	r3, [r7, #24]
20002050:	429a      	cmp	r2, r3
20002052:	db9a      	blt.n	20001f8a <draw_sprite+0x38>
	for (i = 0; i < s->height; i++)
20002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002056:	3301      	adds	r3, #1
20002058:	627b      	str	r3, [r7, #36]	; 0x24
2000205a:	68fb      	ldr	r3, [r7, #12]
2000205c:	685a      	ldr	r2, [r3, #4]
2000205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002060:	429a      	cmp	r2, r3
20002062:	d88f      	bhi.n	20001f84 <draw_sprite+0x32>
					}
				}
			}
		}
}
20002064:	46c0      	nop			; (mov r8, r8)
20002066:	46bd      	mov	sp, r7
20002068:	b00a      	add	sp, #40	; 0x28
2000206a:	bdb0      	pop	{r4, r5, r7, pc}

2000206c <fillRectangle>:

void fillRectangle( int x, int y, int width, int height ){
2000206c:	b580      	push	{r7, lr}
2000206e:	b086      	sub	sp, #24
20002070:	af00      	add	r7, sp, #0
20002072:	60f8      	str	r0, [r7, #12]
20002074:	60b9      	str	r1, [r7, #8]
20002076:	607a      	str	r2, [r7, #4]
20002078:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
2000207a:	68fb      	ldr	r3, [r7, #12]
2000207c:	617b      	str	r3, [r7, #20]
2000207e:	e014      	b.n	200020aa <fillRectangle+0x3e>
		for (j = y; j < y + height; j++) {
20002080:	68bb      	ldr	r3, [r7, #8]
20002082:	613b      	str	r3, [r7, #16]
20002084:	e008      	b.n	20002098 <fillRectangle+0x2c>
			pixel(i, j, 1, 3);
20002086:	6939      	ldr	r1, [r7, #16]
20002088:	6978      	ldr	r0, [r7, #20]
2000208a:	2303      	movs	r3, #3
2000208c:	2201      	movs	r2, #1
2000208e:	f7ff fd65 	bl	20001b5c <pixel>
		for (j = y; j < y + height; j++) {
20002092:	693b      	ldr	r3, [r7, #16]
20002094:	3301      	adds	r3, #1
20002096:	613b      	str	r3, [r7, #16]
20002098:	68ba      	ldr	r2, [r7, #8]
2000209a:	683b      	ldr	r3, [r7, #0]
2000209c:	18d2      	adds	r2, r2, r3
2000209e:	693b      	ldr	r3, [r7, #16]
200020a0:	429a      	cmp	r2, r3
200020a2:	dcf0      	bgt.n	20002086 <fillRectangle+0x1a>
	for (i = x; i < x + width; i++) {
200020a4:	697b      	ldr	r3, [r7, #20]
200020a6:	3301      	adds	r3, #1
200020a8:	617b      	str	r3, [r7, #20]
200020aa:	68fa      	ldr	r2, [r7, #12]
200020ac:	687b      	ldr	r3, [r7, #4]
200020ae:	18d2      	adds	r2, r2, r3
200020b0:	697b      	ldr	r3, [r7, #20]
200020b2:	429a      	cmp	r2, r3
200020b4:	dce4      	bgt.n	20002080 <fillRectangle+0x14>
		}
	}
}
200020b6:	46c0      	nop			; (mov r8, r8)
200020b8:	46bd      	mov	sp, r7
200020ba:	b006      	add	sp, #24
200020bc:	bd80      	pop	{r7, pc}

200020be <clearRectangle>:

void clearRectangle( int x, int y, int width, int height ){
200020be:	b580      	push	{r7, lr}
200020c0:	b086      	sub	sp, #24
200020c2:	af00      	add	r7, sp, #0
200020c4:	60f8      	str	r0, [r7, #12]
200020c6:	60b9      	str	r1, [r7, #8]
200020c8:	607a      	str	r2, [r7, #4]
200020ca:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
200020cc:	68fb      	ldr	r3, [r7, #12]
200020ce:	617b      	str	r3, [r7, #20]
200020d0:	e014      	b.n	200020fc <clearRectangle+0x3e>
		for (j = y; j < y + height; j++) {
200020d2:	68bb      	ldr	r3, [r7, #8]
200020d4:	613b      	str	r3, [r7, #16]
200020d6:	e008      	b.n	200020ea <clearRectangle+0x2c>
			pixel(i, j, 0, 3);
200020d8:	6939      	ldr	r1, [r7, #16]
200020da:	6978      	ldr	r0, [r7, #20]
200020dc:	2303      	movs	r3, #3
200020de:	2200      	movs	r2, #0
200020e0:	f7ff fd3c 	bl	20001b5c <pixel>
		for (j = y; j < y + height; j++) {
200020e4:	693b      	ldr	r3, [r7, #16]
200020e6:	3301      	adds	r3, #1
200020e8:	613b      	str	r3, [r7, #16]
200020ea:	68ba      	ldr	r2, [r7, #8]
200020ec:	683b      	ldr	r3, [r7, #0]
200020ee:	18d2      	adds	r2, r2, r3
200020f0:	693b      	ldr	r3, [r7, #16]
200020f2:	429a      	cmp	r2, r3
200020f4:	dcf0      	bgt.n	200020d8 <clearRectangle+0x1a>
	for (i = x; i < x + width; i++) {
200020f6:	697b      	ldr	r3, [r7, #20]
200020f8:	3301      	adds	r3, #1
200020fa:	617b      	str	r3, [r7, #20]
200020fc:	68fa      	ldr	r2, [r7, #12]
200020fe:	687b      	ldr	r3, [r7, #4]
20002100:	18d2      	adds	r2, r2, r3
20002102:	697b      	ldr	r3, [r7, #20]
20002104:	429a      	cmp	r2, r3
20002106:	dce4      	bgt.n	200020d2 <clearRectangle+0x14>
		}
	}
}
20002108:	46c0      	nop			; (mov r8, r8)
2000210a:	46bd      	mov	sp, r7
2000210c:	b006      	add	sp, #24
2000210e:	bd80      	pop	{r7, pc}

20002110 <grayScaleTest>:


void grayScaleTest( void ) {
20002110:	b590      	push	{r4, r7, lr}
20002112:	b087      	sub	sp, #28
20002114:	af00      	add	r7, sp, #0
	int x = 10;
20002116:	230a      	movs	r3, #10
20002118:	617b      	str	r3, [r7, #20]
	int y = 10;
2000211a:	230a      	movs	r3, #10
2000211c:	613b      	str	r3, [r7, #16]
	int width = 70;
2000211e:	2346      	movs	r3, #70	; 0x46
20002120:	60fb      	str	r3, [r7, #12]
	int height = 50;
20002122:	2332      	movs	r3, #50	; 0x32
20002124:	60bb      	str	r3, [r7, #8]
	
	int x2 = 50;
20002126:	2332      	movs	r3, #50	; 0x32
20002128:	607b      	str	r3, [r7, #4]
	
	fillRectangle(x, y, width, height);
2000212a:	68bb      	ldr	r3, [r7, #8]
2000212c:	68fa      	ldr	r2, [r7, #12]
2000212e:	6939      	ldr	r1, [r7, #16]
20002130:	6978      	ldr	r0, [r7, #20]
20002132:	f7ff ff9b 	bl	2000206c <fillRectangle>
	
	int i;
	int k = 5;
20002136:	2305      	movs	r3, #5
20002138:	603b      	str	r3, [r7, #0]
	while(1) {
		clear_backBuffer();
2000213a:	f7ff fadf 	bl	200016fc <clear_backBuffer>
		fillRectangle(x, y, width, height);
2000213e:	68bb      	ldr	r3, [r7, #8]
20002140:	68fa      	ldr	r2, [r7, #12]
20002142:	6939      	ldr	r1, [r7, #16]
20002144:	6978      	ldr	r0, [r7, #20]
20002146:	f7ff ff91 	bl	2000206c <fillRectangle>
		clearRectangle(x+2+2, y+1, width-k, height-k); //outer square
2000214a:	697b      	ldr	r3, [r7, #20]
2000214c:	1d18      	adds	r0, r3, #4
2000214e:	693b      	ldr	r3, [r7, #16]
20002150:	1c59      	adds	r1, r3, #1
20002152:	68fa      	ldr	r2, [r7, #12]
20002154:	683b      	ldr	r3, [r7, #0]
20002156:	1ad4      	subs	r4, r2, r3
20002158:	68ba      	ldr	r2, [r7, #8]
2000215a:	683b      	ldr	r3, [r7, #0]
2000215c:	1ad3      	subs	r3, r2, r3
2000215e:	0022      	movs	r2, r4
20002160:	f7ff ffad 	bl	200020be <clearRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
20002164:	697b      	ldr	r3, [r7, #20]
20002166:	1c9a      	adds	r2, r3, #2
20002168:	683b      	ldr	r3, [r7, #0]
2000216a:	18d0      	adds	r0, r2, r3
2000216c:	693b      	ldr	r3, [r7, #16]
2000216e:	1c99      	adds	r1, r3, #2
20002170:	68fb      	ldr	r3, [r7, #12]
20002172:	1f1a      	subs	r2, r3, #4
20002174:	683b      	ldr	r3, [r7, #0]
20002176:	1ad4      	subs	r4, r2, r3
20002178:	68bb      	ldr	r3, [r7, #8]
2000217a:	1f1a      	subs	r2, r3, #4
2000217c:	683b      	ldr	r3, [r7, #0]
2000217e:	1ad3      	subs	r3, r2, r3
20002180:	0022      	movs	r2, r4
20002182:	f7ff ff9c 	bl	200020be <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
20002186:	4b2d      	ldr	r3, [pc, #180]	; (2000223c <grayScaleTest+0x12c>)
20002188:	0018      	movs	r0, r3
2000218a:	f7ff fe77 	bl	20001e7c <graphic_draw_screen>
		clear_backBuffer();
2000218e:	f7ff fab5 	bl	200016fc <clear_backBuffer>
		fillRectangle(x, y, width, height);
20002192:	68bb      	ldr	r3, [r7, #8]
20002194:	68fa      	ldr	r2, [r7, #12]
20002196:	6939      	ldr	r1, [r7, #16]
20002198:	6978      	ldr	r0, [r7, #20]
2000219a:	f7ff ff67 	bl	2000206c <fillRectangle>
		
		fillRectangle(x+2+2, y+1, width-k, height-k); //outer white square
2000219e:	697b      	ldr	r3, [r7, #20]
200021a0:	1d18      	adds	r0, r3, #4
200021a2:	693b      	ldr	r3, [r7, #16]
200021a4:	1c59      	adds	r1, r3, #1
200021a6:	68fa      	ldr	r2, [r7, #12]
200021a8:	683b      	ldr	r3, [r7, #0]
200021aa:	1ad4      	subs	r4, r2, r3
200021ac:	68ba      	ldr	r2, [r7, #8]
200021ae:	683b      	ldr	r3, [r7, #0]
200021b0:	1ad3      	subs	r3, r2, r3
200021b2:	0022      	movs	r2, r4
200021b4:	f7ff ff5a 	bl	2000206c <fillRectangle>
		fillRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
200021b8:	697b      	ldr	r3, [r7, #20]
200021ba:	1c9a      	adds	r2, r3, #2
200021bc:	683b      	ldr	r3, [r7, #0]
200021be:	18d0      	adds	r0, r2, r3
200021c0:	693b      	ldr	r3, [r7, #16]
200021c2:	1c99      	adds	r1, r3, #2
200021c4:	68fb      	ldr	r3, [r7, #12]
200021c6:	1f1a      	subs	r2, r3, #4
200021c8:	683b      	ldr	r3, [r7, #0]
200021ca:	1ad4      	subs	r4, r2, r3
200021cc:	68bb      	ldr	r3, [r7, #8]
200021ce:	1f1a      	subs	r2, r3, #4
200021d0:	683b      	ldr	r3, [r7, #0]
200021d2:	1ad3      	subs	r3, r2, r3
200021d4:	0022      	movs	r2, r4
200021d6:	f7ff ff49 	bl	2000206c <fillRectangle>
		clearRectangle(x+12, y+5, 5, 5);
200021da:	697b      	ldr	r3, [r7, #20]
200021dc:	330c      	adds	r3, #12
200021de:	0018      	movs	r0, r3
200021e0:	693b      	ldr	r3, [r7, #16]
200021e2:	1d59      	adds	r1, r3, #5
200021e4:	2305      	movs	r3, #5
200021e6:	2205      	movs	r2, #5
200021e8:	f7ff ff69 	bl	200020be <clearRectangle>
		
		graphic_draw_screen(draw_buffer_black);
200021ec:	4b13      	ldr	r3, [pc, #76]	; (2000223c <grayScaleTest+0x12c>)
200021ee:	0018      	movs	r0, r3
200021f0:	f7ff fe44 	bl	20001e7c <graphic_draw_screen>
		delay_milli(20);
200021f4:	2014      	movs	r0, #20
200021f6:	f7ff fa55 	bl	200016a4 <delay_milli>
		
		clear_backBuffer();
200021fa:	f7ff fa7f 	bl	200016fc <clear_backBuffer>
		fillRectangle(x, y, width, height);
200021fe:	68bb      	ldr	r3, [r7, #8]
20002200:	68fa      	ldr	r2, [r7, #12]
20002202:	6939      	ldr	r1, [r7, #16]
20002204:	6978      	ldr	r0, [r7, #20]
20002206:	f7ff ff31 	bl	2000206c <fillRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
2000220a:	697b      	ldr	r3, [r7, #20]
2000220c:	1c9a      	adds	r2, r3, #2
2000220e:	683b      	ldr	r3, [r7, #0]
20002210:	18d0      	adds	r0, r2, r3
20002212:	693b      	ldr	r3, [r7, #16]
20002214:	1c99      	adds	r1, r3, #2
20002216:	68fb      	ldr	r3, [r7, #12]
20002218:	1f1a      	subs	r2, r3, #4
2000221a:	683b      	ldr	r3, [r7, #0]
2000221c:	1ad4      	subs	r4, r2, r3
2000221e:	68bb      	ldr	r3, [r7, #8]
20002220:	1f1a      	subs	r2, r3, #4
20002222:	683b      	ldr	r3, [r7, #0]
20002224:	1ad3      	subs	r3, r2, r3
20002226:	0022      	movs	r2, r4
20002228:	f7ff ff49 	bl	200020be <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
2000222c:	4b03      	ldr	r3, [pc, #12]	; (2000223c <grayScaleTest+0x12c>)
2000222e:	0018      	movs	r0, r3
20002230:	f7ff fe24 	bl	20001e7c <graphic_draw_screen>
		
		delay_milli(20);
20002234:	2014      	movs	r0, #20
20002236:	f7ff fa35 	bl	200016a4 <delay_milli>
		clear_backBuffer();
2000223a:	e77e      	b.n	2000213a <grayScaleTest+0x2a>
2000223c:	200044bc 			; <UNDEFINED> instruction: 0x200044bc

20002240 <set_up_draw_buffers>:
	}
}

/** Should prepare the different drawing buffers, before the drawing of each frame.*/
void set_up_draw_buffers( void ) {
20002240:	b580      	push	{r7, lr}
20002242:	b082      	sub	sp, #8
20002244:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 1024; i++) {
20002246:	2300      	movs	r3, #0
20002248:	607b      	str	r3, [r7, #4]
2000224a:	e065      	b.n	20002318 <set_up_draw_buffers+0xd8>
		draw_buffer_black[i] = backBuffer[i] & (~backBufferGray[i] & ~backBufferLight[i]); //Had to work a bit on these
2000224c:	4a36      	ldr	r2, [pc, #216]	; (20002328 <set_up_draw_buffers+0xe8>)
2000224e:	687b      	ldr	r3, [r7, #4]
20002250:	18d3      	adds	r3, r2, r3
20002252:	781b      	ldrb	r3, [r3, #0]
20002254:	b25b      	sxtb	r3, r3
20002256:	4935      	ldr	r1, [pc, #212]	; (2000232c <set_up_draw_buffers+0xec>)
20002258:	687a      	ldr	r2, [r7, #4]
2000225a:	188a      	adds	r2, r1, r2
2000225c:	7811      	ldrb	r1, [r2, #0]
2000225e:	4834      	ldr	r0, [pc, #208]	; (20002330 <set_up_draw_buffers+0xf0>)
20002260:	687a      	ldr	r2, [r7, #4]
20002262:	1882      	adds	r2, r0, r2
20002264:	7812      	ldrb	r2, [r2, #0]
20002266:	430a      	orrs	r2, r1
20002268:	b2d2      	uxtb	r2, r2
2000226a:	b252      	sxtb	r2, r2
2000226c:	43d2      	mvns	r2, r2
2000226e:	b252      	sxtb	r2, r2
20002270:	4013      	ands	r3, r2
20002272:	b25b      	sxtb	r3, r3
20002274:	b2d9      	uxtb	r1, r3
20002276:	4a2f      	ldr	r2, [pc, #188]	; (20002334 <set_up_draw_buffers+0xf4>)
20002278:	687b      	ldr	r3, [r7, #4]
2000227a:	18d3      	adds	r3, r2, r3
2000227c:	1c0a      	adds	r2, r1, #0
2000227e:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray[i] = (backBuffer[i] | backBufferGray[i]) & ~backBufferLight[i]; //in order to make it possible
20002280:	4a29      	ldr	r2, [pc, #164]	; (20002328 <set_up_draw_buffers+0xe8>)
20002282:	687b      	ldr	r3, [r7, #4]
20002284:	18d3      	adds	r3, r2, r3
20002286:	781a      	ldrb	r2, [r3, #0]
20002288:	4928      	ldr	r1, [pc, #160]	; (2000232c <set_up_draw_buffers+0xec>)
2000228a:	687b      	ldr	r3, [r7, #4]
2000228c:	18cb      	adds	r3, r1, r3
2000228e:	781b      	ldrb	r3, [r3, #0]
20002290:	4313      	orrs	r3, r2
20002292:	b2db      	uxtb	r3, r3
20002294:	b25b      	sxtb	r3, r3
20002296:	4926      	ldr	r1, [pc, #152]	; (20002330 <set_up_draw_buffers+0xf0>)
20002298:	687a      	ldr	r2, [r7, #4]
2000229a:	188a      	adds	r2, r1, r2
2000229c:	7812      	ldrb	r2, [r2, #0]
2000229e:	b252      	sxtb	r2, r2
200022a0:	43d2      	mvns	r2, r2
200022a2:	b252      	sxtb	r2, r2
200022a4:	4013      	ands	r3, r2
200022a6:	b25b      	sxtb	r3, r3
200022a8:	b2d9      	uxtb	r1, r3
200022aa:	4a23      	ldr	r2, [pc, #140]	; (20002338 <set_up_draw_buffers+0xf8>)
200022ac:	687b      	ldr	r3, [r7, #4]
200022ae:	18d3      	adds	r3, r2, r3
200022b0:	1c0a      	adds	r2, r1, #0
200022b2:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_light[i] = (backBuffer[i] | backBufferLight[i]) & ~backBufferGray[i]; //to show a lighter sprite
200022b4:	4a1c      	ldr	r2, [pc, #112]	; (20002328 <set_up_draw_buffers+0xe8>)
200022b6:	687b      	ldr	r3, [r7, #4]
200022b8:	18d3      	adds	r3, r2, r3
200022ba:	781a      	ldrb	r2, [r3, #0]
200022bc:	491c      	ldr	r1, [pc, #112]	; (20002330 <set_up_draw_buffers+0xf0>)
200022be:	687b      	ldr	r3, [r7, #4]
200022c0:	18cb      	adds	r3, r1, r3
200022c2:	781b      	ldrb	r3, [r3, #0]
200022c4:	4313      	orrs	r3, r2
200022c6:	b2db      	uxtb	r3, r3
200022c8:	b25b      	sxtb	r3, r3
200022ca:	4918      	ldr	r1, [pc, #96]	; (2000232c <set_up_draw_buffers+0xec>)
200022cc:	687a      	ldr	r2, [r7, #4]
200022ce:	188a      	adds	r2, r1, r2
200022d0:	7812      	ldrb	r2, [r2, #0]
200022d2:	b252      	sxtb	r2, r2
200022d4:	43d2      	mvns	r2, r2
200022d6:	b252      	sxtb	r2, r2
200022d8:	4013      	ands	r3, r2
200022da:	b25b      	sxtb	r3, r3
200022dc:	b2d9      	uxtb	r1, r3
200022de:	4a17      	ldr	r2, [pc, #92]	; (2000233c <set_up_draw_buffers+0xfc>)
200022e0:	687b      	ldr	r3, [r7, #4]
200022e2:	18d3      	adds	r3, r2, r3
200022e4:	1c0a      	adds	r2, r1, #0
200022e6:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray_light[i] = backBuffer[i] | backBufferGray[i] | backBufferLight[i]; //on top of a darker one.
200022e8:	4a0f      	ldr	r2, [pc, #60]	; (20002328 <set_up_draw_buffers+0xe8>)
200022ea:	687b      	ldr	r3, [r7, #4]
200022ec:	18d3      	adds	r3, r2, r3
200022ee:	781a      	ldrb	r2, [r3, #0]
200022f0:	490e      	ldr	r1, [pc, #56]	; (2000232c <set_up_draw_buffers+0xec>)
200022f2:	687b      	ldr	r3, [r7, #4]
200022f4:	18cb      	adds	r3, r1, r3
200022f6:	781b      	ldrb	r3, [r3, #0]
200022f8:	4313      	orrs	r3, r2
200022fa:	b2da      	uxtb	r2, r3
200022fc:	490c      	ldr	r1, [pc, #48]	; (20002330 <set_up_draw_buffers+0xf0>)
200022fe:	687b      	ldr	r3, [r7, #4]
20002300:	18cb      	adds	r3, r1, r3
20002302:	781b      	ldrb	r3, [r3, #0]
20002304:	4313      	orrs	r3, r2
20002306:	b2d9      	uxtb	r1, r3
20002308:	4a0d      	ldr	r2, [pc, #52]	; (20002340 <set_up_draw_buffers+0x100>)
2000230a:	687b      	ldr	r3, [r7, #4]
2000230c:	18d3      	adds	r3, r2, r3
2000230e:	1c0a      	adds	r2, r1, #0
20002310:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 1024; i++) {
20002312:	687b      	ldr	r3, [r7, #4]
20002314:	3301      	adds	r3, #1
20002316:	607b      	str	r3, [r7, #4]
20002318:	687b      	ldr	r3, [r7, #4]
2000231a:	4a0a      	ldr	r2, [pc, #40]	; (20002344 <set_up_draw_buffers+0x104>)
2000231c:	4293      	cmp	r3, r2
2000231e:	dd95      	ble.n	2000224c <set_up_draw_buffers+0xc>
	}
}
20002320:	46c0      	nop			; (mov r8, r8)
20002322:	46bd      	mov	sp, r7
20002324:	b002      	add	sp, #8
20002326:	bd80      	pop	{r7, pc}
20002328:	20003cbc 			; <UNDEFINED> instruction: 0x20003cbc
2000232c:	200034bc 			; <UNDEFINED> instruction: 0x200034bc
20002330:	20004cbc 			; <UNDEFINED> instruction: 0x20004cbc
20002334:	200044bc 			; <UNDEFINED> instruction: 0x200044bc
20002338:	200038bc 			; <UNDEFINED> instruction: 0x200038bc
2000233c:	200040bc 	strhcs	r4, [r0], -ip
20002340:	200048bc 			; <UNDEFINED> instruction: 0x200048bc
20002344:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20002348 <draw_game_object>:

void draw_game_object(GameObject *gObj) {
20002348:	b580      	push	{r7, lr}
2000234a:	b086      	sub	sp, #24
2000234c:	af02      	add	r7, sp, #8
2000234e:	6078      	str	r0, [r7, #4]
	int frame = gObj->current_frame;
20002350:	687b      	ldr	r3, [r7, #4]
20002352:	695b      	ldr	r3, [r3, #20]
20002354:	60fb      	str	r3, [r7, #12]
	draw_sprite(gObj->images[frame].blackImage, gObj->xPos, gObj->yPos, 1, 3);
20002356:	687b      	ldr	r3, [r7, #4]
20002358:	6819      	ldr	r1, [r3, #0]
2000235a:	68fa      	ldr	r2, [r7, #12]
2000235c:	0013      	movs	r3, r2
2000235e:	005b      	lsls	r3, r3, #1
20002360:	189b      	adds	r3, r3, r2
20002362:	009b      	lsls	r3, r3, #2
20002364:	18cb      	adds	r3, r1, r3
20002366:	6818      	ldr	r0, [r3, #0]
20002368:	687b      	ldr	r3, [r7, #4]
2000236a:	6859      	ldr	r1, [r3, #4]
2000236c:	687b      	ldr	r3, [r7, #4]
2000236e:	689a      	ldr	r2, [r3, #8]
20002370:	2303      	movs	r3, #3
20002372:	9300      	str	r3, [sp, #0]
20002374:	2301      	movs	r3, #1
20002376:	f7ff fdec 	bl	20001f52 <draw_sprite>
	draw_sprite(gObj->images[frame].grayImage, gObj->xPos, gObj->yPos, 1, 2);
2000237a:	687b      	ldr	r3, [r7, #4]
2000237c:	6819      	ldr	r1, [r3, #0]
2000237e:	68fa      	ldr	r2, [r7, #12]
20002380:	0013      	movs	r3, r2
20002382:	005b      	lsls	r3, r3, #1
20002384:	189b      	adds	r3, r3, r2
20002386:	009b      	lsls	r3, r3, #2
20002388:	18cb      	adds	r3, r1, r3
2000238a:	6858      	ldr	r0, [r3, #4]
2000238c:	687b      	ldr	r3, [r7, #4]
2000238e:	6859      	ldr	r1, [r3, #4]
20002390:	687b      	ldr	r3, [r7, #4]
20002392:	689a      	ldr	r2, [r3, #8]
20002394:	2302      	movs	r3, #2
20002396:	9300      	str	r3, [sp, #0]
20002398:	2301      	movs	r3, #1
2000239a:	f7ff fdda 	bl	20001f52 <draw_sprite>
	draw_sprite(gObj->images[frame].lightImage, gObj->xPos, gObj->yPos, 1, 1);
2000239e:	687b      	ldr	r3, [r7, #4]
200023a0:	6819      	ldr	r1, [r3, #0]
200023a2:	68fa      	ldr	r2, [r7, #12]
200023a4:	0013      	movs	r3, r2
200023a6:	005b      	lsls	r3, r3, #1
200023a8:	189b      	adds	r3, r3, r2
200023aa:	009b      	lsls	r3, r3, #2
200023ac:	18cb      	adds	r3, r1, r3
200023ae:	6898      	ldr	r0, [r3, #8]
200023b0:	687b      	ldr	r3, [r7, #4]
200023b2:	6859      	ldr	r1, [r3, #4]
200023b4:	687b      	ldr	r3, [r7, #4]
200023b6:	689a      	ldr	r2, [r3, #8]
200023b8:	2301      	movs	r3, #1
200023ba:	9300      	str	r3, [sp, #0]
200023bc:	2301      	movs	r3, #1
200023be:	f7ff fdc8 	bl	20001f52 <draw_sprite>
}
200023c2:	46c0      	nop			; (mov r8, r8)
200023c4:	46bd      	mov	sp, r7
200023c6:	b004      	add	sp, #16
200023c8:	bd80      	pop	{r7, pc}

200023ca <show_frame>:


void show_frame(int frame_length) {
200023ca:	b580      	push	{r7, lr}
200023cc:	b082      	sub	sp, #8
200023ce:	af00      	add	r7, sp, #0
200023d0:	6078      	str	r0, [r7, #4]
	set_up_draw_buffers();
200023d2:	f7ff ff35 	bl	20002240 <set_up_draw_buffers>
	
	while(frame_length--) {
200023d6:	e01b      	b.n	20002410 <show_frame+0x46>
		graphic_draw_screen(draw_buffer_black_gray_light);
200023d8:	4b13      	ldr	r3, [pc, #76]	; (20002428 <show_frame+0x5e>)
200023da:	0018      	movs	r0, r3
200023dc:	f7ff fd4e 	bl	20001e7c <graphic_draw_screen>
		delay_milli(1);
200023e0:	2001      	movs	r0, #1
200023e2:	f7ff f95f 	bl	200016a4 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
200023e6:	4b11      	ldr	r3, [pc, #68]	; (2000242c <show_frame+0x62>)
200023e8:	0018      	movs	r0, r3
200023ea:	f7ff fd47 	bl	20001e7c <graphic_draw_screen>
		delay_milli(1);
200023ee:	2001      	movs	r0, #1
200023f0:	f7ff f958 	bl	200016a4 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black_gray);
200023f4:	4b0e      	ldr	r3, [pc, #56]	; (20002430 <show_frame+0x66>)
200023f6:	0018      	movs	r0, r3
200023f8:	f7ff fd40 	bl	20001e7c <graphic_draw_screen>
		delay_milli(1);
200023fc:	2001      	movs	r0, #1
200023fe:	f7ff f951 	bl	200016a4 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
20002402:	4b0a      	ldr	r3, [pc, #40]	; (2000242c <show_frame+0x62>)
20002404:	0018      	movs	r0, r3
20002406:	f7ff fd39 	bl	20001e7c <graphic_draw_screen>
		delay_milli(1);
2000240a:	2001      	movs	r0, #1
2000240c:	f7ff f94a 	bl	200016a4 <delay_milli>
	while(frame_length--) {
20002410:	687b      	ldr	r3, [r7, #4]
20002412:	1e5a      	subs	r2, r3, #1
20002414:	607a      	str	r2, [r7, #4]
20002416:	2b00      	cmp	r3, #0
20002418:	d1de      	bne.n	200023d8 <show_frame+0xe>
	}
	
	clear_all_backBuffers();	//Maybe we could be more effective by only clearing the necessary stuff,
2000241a:	f7ff f97b 	bl	20001714 <clear_all_backBuffers>
								//but let's keep it like this if it works.
2000241e:	46c0      	nop			; (mov r8, r8)
20002420:	46bd      	mov	sp, r7
20002422:	b002      	add	sp, #8
20002424:	bd80      	pop	{r7, pc}
20002426:	46c0      	nop			; (mov r8, r8)
20002428:	200048bc 			; <UNDEFINED> instruction: 0x200048bc
2000242c:	200044bc 			; <UNDEFINED> instruction: 0x200044bc
20002430:	200038bc 			; <UNDEFINED> instruction: 0x200038bc

20002434 <load_image>:
#include "image.h"

void load_image( Image *image, sprite *blackImage, sprite *grayImage, sprite *lightImage ) {
20002434:	b580      	push	{r7, lr}
20002436:	b084      	sub	sp, #16
20002438:	af00      	add	r7, sp, #0
2000243a:	60f8      	str	r0, [r7, #12]
2000243c:	60b9      	str	r1, [r7, #8]
2000243e:	607a      	str	r2, [r7, #4]
20002440:	603b      	str	r3, [r7, #0]
	image->blackImage = blackImage;
20002442:	68fb      	ldr	r3, [r7, #12]
20002444:	68ba      	ldr	r2, [r7, #8]
20002446:	601a      	str	r2, [r3, #0]
	image->grayImage = grayImage;
20002448:	68fb      	ldr	r3, [r7, #12]
2000244a:	687a      	ldr	r2, [r7, #4]
2000244c:	605a      	str	r2, [r3, #4]
	image->lightImage = lightImage;
2000244e:	68fb      	ldr	r3, [r7, #12]
20002450:	683a      	ldr	r2, [r7, #0]
20002452:	609a      	str	r2, [r3, #8]
}
20002454:	46c0      	nop			; (mov r8, r8)
20002456:	46bd      	mov	sp, r7
20002458:	b004      	add	sp, #16
2000245a:	bd80      	pop	{r7, pc}

2000245c <load_sprite>:
#include "sprite.h"

void load_sprite(sprite* s, unsigned char* data, int width, int height)
{
2000245c:	b580      	push	{r7, lr}
2000245e:	b084      	sub	sp, #16
20002460:	af00      	add	r7, sp, #0
20002462:	60f8      	str	r0, [r7, #12]
20002464:	60b9      	str	r1, [r7, #8]
20002466:	607a      	str	r2, [r7, #4]
20002468:	603b      	str	r3, [r7, #0]
	s->width = width;
2000246a:	687a      	ldr	r2, [r7, #4]
2000246c:	68fb      	ldr	r3, [r7, #12]
2000246e:	601a      	str	r2, [r3, #0]
	s->height = height;
20002470:	683a      	ldr	r2, [r7, #0]
20002472:	68fb      	ldr	r3, [r7, #12]
20002474:	605a      	str	r2, [r3, #4]
	s->data = data;
20002476:	68fb      	ldr	r3, [r7, #12]
20002478:	68ba      	ldr	r2, [r7, #8]
2000247a:	609a      	str	r2, [r3, #8]
}
2000247c:	46c0      	nop			; (mov r8, r8)
2000247e:	46bd      	mov	sp, r7
20002480:	b004      	add	sp, #16
20002482:	bd80      	pop	{r7, pc}

20002484 <set_up_DIL>:
#include "gpio.h"

/** Sets up PE0-7 as inports and PE8-15 as outports. */
void set_up_DIL( void ) {
20002484:	b580      	push	{r7, lr}
20002486:	af00      	add	r7, sp, #0
	GPIO_D.Moder = 0x55550000;
20002488:	4b02      	ldr	r3, [pc, #8]	; (20002494 <set_up_DIL+0x10>)
2000248a:	4a03      	ldr	r2, [pc, #12]	; (20002498 <set_up_DIL+0x14>)
2000248c:	601a      	str	r2, [r3, #0]
}
2000248e:	46c0      	nop			; (mov r8, r8)
20002490:	46bd      	mov	sp, r7
20002492:	bd80      	pop	{r7, pc}
20002494:	40020c00 	andmi	r0, r2, r0, lsl #24
20002498:	55550000 	ldrbpl	r0, [r5, #-0]

2000249c <read_DIL>:

char read_DIL( void ) {
2000249c:	b580      	push	{r7, lr}
2000249e:	af00      	add	r7, sp, #0
	return GPIO_D.idrLow;
200024a0:	4b02      	ldr	r3, [pc, #8]	; (200024ac <read_DIL+0x10>)
200024a2:	7c1b      	ldrb	r3, [r3, #16]
200024a4:	b2db      	uxtb	r3, r3
}
200024a6:	0018      	movs	r0, r3
200024a8:	46bd      	mov	sp, r7
200024aa:	bd80      	pop	{r7, pc}
200024ac:	40020c00 	andmi	r0, r2, r0, lsl #24

200024b0 <read_DIL_single>:


int read_DIL_single( int bit ) {
200024b0:	b590      	push	{r4, r7, lr}
200024b2:	b085      	sub	sp, #20
200024b4:	af00      	add	r7, sp, #0
200024b6:	6078      	str	r0, [r7, #4]
	char DIL = read_DIL();
200024b8:	230f      	movs	r3, #15
200024ba:	18fc      	adds	r4, r7, r3
200024bc:	f7ff ffee 	bl	2000249c <read_DIL>
200024c0:	0003      	movs	r3, r0
200024c2:	7023      	strb	r3, [r4, #0]
	if (DIL & (1<<bit)) {
200024c4:	230f      	movs	r3, #15
200024c6:	18fb      	adds	r3, r7, r3
200024c8:	781a      	ldrb	r2, [r3, #0]
200024ca:	687b      	ldr	r3, [r7, #4]
200024cc:	411a      	asrs	r2, r3
200024ce:	0013      	movs	r3, r2
200024d0:	2201      	movs	r2, #1
200024d2:	4013      	ands	r3, r2
200024d4:	d001      	beq.n	200024da <read_DIL_single+0x2a>
		return 0;
200024d6:	2300      	movs	r3, #0
200024d8:	e000      	b.n	200024dc <read_DIL_single+0x2c>
	} else {
		return 1;
200024da:	2301      	movs	r3, #1
	}
200024dc:	0018      	movs	r0, r3
200024de:	46bd      	mov	sp, r7
200024e0:	b005      	add	sp, #20
200024e2:	bd90      	pop	{r4, r7, pc}

200024e4 <ascii_ctrl_bit_set>:
void ascii_write_data(unsigned char data);
unsigned char ascii_read_status(void);
unsigned char ascii_read_data(void);


void ascii_ctrl_bit_set(unsigned char x){
200024e4:	b580      	push	{r7, lr}
200024e6:	b084      	sub	sp, #16
200024e8:	af00      	add	r7, sp, #0
200024ea:	0002      	movs	r2, r0
200024ec:	1dfb      	adds	r3, r7, #7
200024ee:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och ettstÃƒÂ¤ll de bitar som ÃƒÂ¤r 1 i x
	unsigned char c;
	c = *portOdrLow;
200024f0:	4a0c      	ldr	r2, [pc, #48]	; (20002524 <ascii_ctrl_bit_set+0x40>)
200024f2:	230f      	movs	r3, #15
200024f4:	18fb      	adds	r3, r7, r3
200024f6:	7812      	ldrb	r2, [r2, #0]
200024f8:	701a      	strb	r2, [r3, #0]
	c |= (B_SELECT | x);
200024fa:	1dfa      	adds	r2, r7, #7
200024fc:	230f      	movs	r3, #15
200024fe:	18fb      	adds	r3, r7, r3
20002500:	7812      	ldrb	r2, [r2, #0]
20002502:	781b      	ldrb	r3, [r3, #0]
20002504:	4313      	orrs	r3, r2
20002506:	b2da      	uxtb	r2, r3
20002508:	230f      	movs	r3, #15
2000250a:	18fb      	adds	r3, r7, r3
2000250c:	2104      	movs	r1, #4
2000250e:	430a      	orrs	r2, r1
20002510:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20002512:	4a04      	ldr	r2, [pc, #16]	; (20002524 <ascii_ctrl_bit_set+0x40>)
20002514:	230f      	movs	r3, #15
20002516:	18fb      	adds	r3, r7, r3
20002518:	781b      	ldrb	r3, [r3, #0]
2000251a:	7013      	strb	r3, [r2, #0]
}
2000251c:	46c0      	nop			; (mov r8, r8)
2000251e:	46bd      	mov	sp, r7
20002520:	b004      	add	sp, #16
20002522:	bd80      	pop	{r7, pc}
20002524:	40021014 	andmi	r1, r2, r4, lsl r0

20002528 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
20002528:	b580      	push	{r7, lr}
2000252a:	b084      	sub	sp, #16
2000252c:	af00      	add	r7, sp, #0
2000252e:	0002      	movs	r2, r0
20002530:	1dfb      	adds	r3, r7, #7
20002532:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och nollstÃ¤ll de bitar som Ã¤r 1 i x
	unsigned char c;
	c = *portOdrLow;
20002534:	4a0f      	ldr	r2, [pc, #60]	; (20002574 <ascii_ctrl_bit_clear+0x4c>)
20002536:	230f      	movs	r3, #15
20002538:	18fb      	adds	r3, r7, r3
2000253a:	7812      	ldrb	r2, [r2, #0]
2000253c:	701a      	strb	r2, [r3, #0]
	c = (B_SELECT | c & ~x);
2000253e:	1dfb      	adds	r3, r7, #7
20002540:	781b      	ldrb	r3, [r3, #0]
20002542:	b25b      	sxtb	r3, r3
20002544:	43db      	mvns	r3, r3
20002546:	b25b      	sxtb	r3, r3
20002548:	220f      	movs	r2, #15
2000254a:	18ba      	adds	r2, r7, r2
2000254c:	7812      	ldrb	r2, [r2, #0]
2000254e:	b252      	sxtb	r2, r2
20002550:	4013      	ands	r3, r2
20002552:	b25b      	sxtb	r3, r3
20002554:	2204      	movs	r2, #4
20002556:	4313      	orrs	r3, r2
20002558:	b25a      	sxtb	r2, r3
2000255a:	230f      	movs	r3, #15
2000255c:	18fb      	adds	r3, r7, r3
2000255e:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20002560:	4a04      	ldr	r2, [pc, #16]	; (20002574 <ascii_ctrl_bit_clear+0x4c>)
20002562:	230f      	movs	r3, #15
20002564:	18fb      	adds	r3, r7, r3
20002566:	781b      	ldrb	r3, [r3, #0]
20002568:	7013      	strb	r3, [r2, #0]
}
2000256a:	46c0      	nop			; (mov r8, r8)
2000256c:	46bd      	mov	sp, r7
2000256e:	b004      	add	sp, #16
20002570:	bd80      	pop	{r7, pc}
20002572:	46c0      	nop			; (mov r8, r8)
20002574:	40021014 	andmi	r1, r2, r4, lsl r0

20002578 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20002578:	b580      	push	{r7, lr}
2000257a:	b082      	sub	sp, #8
2000257c:	af00      	add	r7, sp, #0
2000257e:	0002      	movs	r2, r0
20002580:	1dfb      	adds	r3, r7, #7
20002582:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20002584:	2001      	movs	r0, #1
20002586:	f7ff ffcf 	bl	20002528 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
2000258a:	2002      	movs	r0, #2
2000258c:	f7ff ffcc 	bl	20002528 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20002590:	1dfb      	adds	r3, r7, #7
20002592:	781b      	ldrb	r3, [r3, #0]
20002594:	0018      	movs	r0, r3
20002596:	f000 f86d 	bl	20002674 <ascii_write_controller>
}
2000259a:	46c0      	nop			; (mov r8, r8)
2000259c:	46bd      	mov	sp, r7
2000259e:	b002      	add	sp, #8
200025a0:	bd80      	pop	{r7, pc}

200025a2 <ascii_write_data>:

void ascii_write_data(unsigned char data){
200025a2:	b580      	push	{r7, lr}
200025a4:	b082      	sub	sp, #8
200025a6:	af00      	add	r7, sp, #0
200025a8:	0002      	movs	r2, r0
200025aa:	1dfb      	adds	r3, r7, #7
200025ac:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
200025ae:	2001      	movs	r0, #1
200025b0:	f7ff ff98 	bl	200024e4 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
200025b4:	2002      	movs	r0, #2
200025b6:	f7ff ffb7 	bl	20002528 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
200025ba:	1dfb      	adds	r3, r7, #7
200025bc:	781b      	ldrb	r3, [r3, #0]
200025be:	0018      	movs	r0, r3
200025c0:	f000 f858 	bl	20002674 <ascii_write_controller>
}
200025c4:	46c0      	nop			; (mov r8, r8)
200025c6:	46bd      	mov	sp, r7
200025c8:	b002      	add	sp, #8
200025ca:	bd80      	pop	{r7, pc}

200025cc <ascii_read_status>:

unsigned char ascii_read_status(void){
200025cc:	b590      	push	{r4, r7, lr}
200025ce:	b083      	sub	sp, #12
200025d0:	af00      	add	r7, sp, #0
	//sÃƒÂ¤tt Port E bit15-8 som ingÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
200025d2:	4b11      	ldr	r3, [pc, #68]	; (20002618 <ascii_read_status+0x4c>)
200025d4:	4a10      	ldr	r2, [pc, #64]	; (20002618 <ascii_read_status+0x4c>)
200025d6:	6812      	ldr	r2, [r2, #0]
200025d8:	0412      	lsls	r2, r2, #16
200025da:	0c12      	lsrs	r2, r2, #16
200025dc:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
200025de:	2001      	movs	r0, #1
200025e0:	f7ff ffa2 	bl	20002528 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
200025e4:	2002      	movs	r0, #2
200025e6:	f7ff ff7d 	bl	200024e4 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
200025ea:	1dfc      	adds	r4, r7, #7
200025ec:	f000 f85a 	bl	200026a4 <ascii_read_controller>
200025f0:	0003      	movs	r3, r0
200025f2:	7023      	strb	r3, [r4, #0]
	//sÃƒÂ¤tt Port E bit15-8 som utgÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
200025f4:	4b08      	ldr	r3, [pc, #32]	; (20002618 <ascii_read_status+0x4c>)
200025f6:	4a08      	ldr	r2, [pc, #32]	; (20002618 <ascii_read_status+0x4c>)
200025f8:	6812      	ldr	r2, [r2, #0]
200025fa:	0412      	lsls	r2, r2, #16
200025fc:	0c12      	lsrs	r2, r2, #16
200025fe:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
20002600:	4b05      	ldr	r3, [pc, #20]	; (20002618 <ascii_read_status+0x4c>)
20002602:	4a05      	ldr	r2, [pc, #20]	; (20002618 <ascii_read_status+0x4c>)
20002604:	6812      	ldr	r2, [r2, #0]
20002606:	4905      	ldr	r1, [pc, #20]	; (2000261c <ascii_read_status+0x50>)
20002608:	430a      	orrs	r2, r1
2000260a:	601a      	str	r2, [r3, #0]
	return rv;
2000260c:	1dfb      	adds	r3, r7, #7
2000260e:	781b      	ldrb	r3, [r3, #0]
}
20002610:	0018      	movs	r0, r3
20002612:	46bd      	mov	sp, r7
20002614:	b003      	add	sp, #12
20002616:	bd90      	pop	{r4, r7, pc}
20002618:	40021000 	andmi	r1, r2, r0
2000261c:	55550000 	ldrbpl	r0, [r5, #-0]

20002620 <ascii_read_data>:

unsigned char ascii_read_data(void){
20002620:	b590      	push	{r4, r7, lr}
20002622:	b083      	sub	sp, #12
20002624:	af00      	add	r7, sp, #0
	//sÃƒÂ¤tt Port E bit15-8 som ingÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20002626:	4b11      	ldr	r3, [pc, #68]	; (2000266c <ascii_read_data+0x4c>)
20002628:	4a10      	ldr	r2, [pc, #64]	; (2000266c <ascii_read_data+0x4c>)
2000262a:	6812      	ldr	r2, [r2, #0]
2000262c:	0412      	lsls	r2, r2, #16
2000262e:	0c12      	lsrs	r2, r2, #16
20002630:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20002632:	2001      	movs	r0, #1
20002634:	f7ff ff56 	bl	200024e4 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20002638:	2002      	movs	r0, #2
2000263a:	f7ff ff53 	bl	200024e4 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
2000263e:	1dfc      	adds	r4, r7, #7
20002640:	f000 f830 	bl	200026a4 <ascii_read_controller>
20002644:	0003      	movs	r3, r0
20002646:	7023      	strb	r3, [r4, #0]
	//sÃƒÂ¤tt Port E bit15-8 som utgÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20002648:	4b08      	ldr	r3, [pc, #32]	; (2000266c <ascii_read_data+0x4c>)
2000264a:	4a08      	ldr	r2, [pc, #32]	; (2000266c <ascii_read_data+0x4c>)
2000264c:	6812      	ldr	r2, [r2, #0]
2000264e:	0412      	lsls	r2, r2, #16
20002650:	0c12      	lsrs	r2, r2, #16
20002652:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
20002654:	4b05      	ldr	r3, [pc, #20]	; (2000266c <ascii_read_data+0x4c>)
20002656:	4a05      	ldr	r2, [pc, #20]	; (2000266c <ascii_read_data+0x4c>)
20002658:	6812      	ldr	r2, [r2, #0]
2000265a:	4905      	ldr	r1, [pc, #20]	; (20002670 <ascii_read_data+0x50>)
2000265c:	430a      	orrs	r2, r1
2000265e:	601a      	str	r2, [r3, #0]
	return rv;
20002660:	1dfb      	adds	r3, r7, #7
20002662:	781b      	ldrb	r3, [r3, #0]
}
20002664:	0018      	movs	r0, r3
20002666:	46bd      	mov	sp, r7
20002668:	b003      	add	sp, #12
2000266a:	bd90      	pop	{r4, r7, pc}
2000266c:	40021000 	andmi	r1, r2, r0
20002670:	55550000 	ldrbpl	r0, [r5, #-0]

20002674 <ascii_write_controller>:

void ascii_write_controller(unsigned char c){
20002674:	b580      	push	{r7, lr}
20002676:	b082      	sub	sp, #8
20002678:	af00      	add	r7, sp, #0
2000267a:	0002      	movs	r2, r0
2000267c:	1dfb      	adds	r3, r7, #7
2000267e:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
20002680:	2040      	movs	r0, #64	; 0x40
20002682:	f7ff ff2f 	bl	200024e4 <ascii_ctrl_bit_set>
	*portOdrHigh = c;
20002686:	4a06      	ldr	r2, [pc, #24]	; (200026a0 <ascii_write_controller+0x2c>)
20002688:	1dfb      	adds	r3, r7, #7
2000268a:	781b      	ldrb	r3, [r3, #0]
2000268c:	7013      	strb	r3, [r2, #0]
	delay_250ns();
2000268e:	f7fe ffaf 	bl	200015f0 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
20002692:	2040      	movs	r0, #64	; 0x40
20002694:	f7ff ff48 	bl	20002528 <ascii_ctrl_bit_clear>
}
20002698:	46c0      	nop			; (mov r8, r8)
2000269a:	46bd      	mov	sp, r7
2000269c:	b002      	add	sp, #8
2000269e:	bd80      	pop	{r7, pc}
200026a0:	40021015 	andmi	r1, r2, r5, lsl r0

200026a4 <ascii_read_controller>:

unsigned char ascii_read_controller(void){
200026a4:	b580      	push	{r7, lr}
200026a6:	b082      	sub	sp, #8
200026a8:	af00      	add	r7, sp, #0
	unsigned char c;
	ascii_ctrl_bit_set(B_E);
200026aa:	2040      	movs	r0, #64	; 0x40
200026ac:	f7ff ff1a 	bl	200024e4 <ascii_ctrl_bit_set>
	delay_250ns();
200026b0:	f7fe ff9e 	bl	200015f0 <delay_250ns>
	delay_250ns();
200026b4:	f7fe ff9c 	bl	200015f0 <delay_250ns>
	c = *portIdrHigh;
200026b8:	4a06      	ldr	r2, [pc, #24]	; (200026d4 <ascii_read_controller+0x30>)
200026ba:	1dfb      	adds	r3, r7, #7
200026bc:	7812      	ldrb	r2, [r2, #0]
200026be:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
200026c0:	2040      	movs	r0, #64	; 0x40
200026c2:	f7ff ff31 	bl	20002528 <ascii_ctrl_bit_clear>
	return c;
200026c6:	1dfb      	adds	r3, r7, #7
200026c8:	781b      	ldrb	r3, [r3, #0]
}
200026ca:	0018      	movs	r0, r3
200026cc:	46bd      	mov	sp, r7
200026ce:	b002      	add	sp, #8
200026d0:	bd80      	pop	{r7, pc}
200026d2:	46c0      	nop			; (mov r8, r8)
200026d4:	40021011 	andmi	r1, r2, r1, lsl r0

200026d8 <ascii_write_char>:

void ascii_write_char(unsigned char c){
200026d8:	b580      	push	{r7, lr}
200026da:	b082      	sub	sp, #8
200026dc:	af00      	add	r7, sp, #0
200026de:	0002      	movs	r2, r0
200026e0:	1dfb      	adds	r3, r7, #7
200026e2:	701a      	strb	r2, [r3, #0]
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
200026e4:	46c0      	nop			; (mov r8, r8)
200026e6:	f7ff ff71 	bl	200025cc <ascii_read_status>
200026ea:	0003      	movs	r3, r0
200026ec:	001a      	movs	r2, r3
200026ee:	2380      	movs	r3, #128	; 0x80
200026f0:	4013      	ands	r3, r2
200026f2:	2b80      	cmp	r3, #128	; 0x80
200026f4:	d0f7      	beq.n	200026e6 <ascii_write_char+0xe>
		delay_micro(8); //latenstid
200026f6:	2008      	movs	r0, #8
200026f8:	f7fe ffbe 	bl	20001678 <delay_micro>
		ascii_write_data(c);
200026fc:	1dfb      	adds	r3, r7, #7
200026fe:	781b      	ldrb	r3, [r3, #0]
20002700:	0018      	movs	r0, r3
20002702:	f7ff ff4e 	bl	200025a2 <ascii_write_data>
		delay_micro(50); //istÃƒÂ¤llet fÃƒÂ¶r 43us
20002706:	2032      	movs	r0, #50	; 0x32
20002708:	f7fe ffb6 	bl	20001678 <delay_micro>
}
2000270c:	46c0      	nop			; (mov r8, r8)
2000270e:	46bd      	mov	sp, r7
20002710:	b002      	add	sp, #8
20002712:	bd80      	pop	{r7, pc}

20002714 <ascii_goToXY>:

void ascii_goToXY(unsigned char row, unsigned char column){
20002714:	b580      	push	{r7, lr}
20002716:	b084      	sub	sp, #16
20002718:	af00      	add	r7, sp, #0
2000271a:	0002      	movs	r2, r0
2000271c:	1dfb      	adds	r3, r7, #7
2000271e:	701a      	strb	r2, [r3, #0]
20002720:	1dbb      	adds	r3, r7, #6
20002722:	1c0a      	adds	r2, r1, #0
20002724:	701a      	strb	r2, [r3, #0]
	unsigned char address = row-1;
20002726:	230f      	movs	r3, #15
20002728:	18fb      	adds	r3, r7, r3
2000272a:	1dfa      	adds	r2, r7, #7
2000272c:	7812      	ldrb	r2, [r2, #0]
2000272e:	3a01      	subs	r2, #1
20002730:	701a      	strb	r2, [r3, #0]
	if(column == 2){
20002732:	1dbb      	adds	r3, r7, #6
20002734:	781b      	ldrb	r3, [r3, #0]
20002736:	2b02      	cmp	r3, #2
20002738:	d106      	bne.n	20002748 <ascii_goToXY+0x34>
		address += 0x40;
2000273a:	230f      	movs	r3, #15
2000273c:	18fb      	adds	r3, r7, r3
2000273e:	220f      	movs	r2, #15
20002740:	18ba      	adds	r2, r7, r2
20002742:	7812      	ldrb	r2, [r2, #0]
20002744:	3240      	adds	r2, #64	; 0x40
20002746:	701a      	strb	r2, [r3, #0]
	}
	ascii_write_cmd(0x80 | address);
20002748:	230f      	movs	r3, #15
2000274a:	18fb      	adds	r3, r7, r3
2000274c:	781b      	ldrb	r3, [r3, #0]
2000274e:	2280      	movs	r2, #128	; 0x80
20002750:	4252      	negs	r2, r2
20002752:	4313      	orrs	r3, r2
20002754:	b2db      	uxtb	r3, r3
20002756:	0018      	movs	r0, r3
20002758:	f7ff ff0e 	bl	20002578 <ascii_write_cmd>
}
2000275c:	46c0      	nop			; (mov r8, r8)
2000275e:	46bd      	mov	sp, r7
20002760:	b004      	add	sp, #16
20002762:	bd80      	pop	{r7, pc}

20002764 <ascii_init>:

void ascii_init(void){
20002764:	b580      	push	{r7, lr}
20002766:	af00      	add	r7, sp, #0
	//initiera displayen:
		while((ascii_read_status() & 0x80) == 0x80){} //VÃ¤nta tills displayed Ã¤r redo
20002768:	46c0      	nop			; (mov r8, r8)
2000276a:	f7ff ff2f 	bl	200025cc <ascii_read_status>
2000276e:	0003      	movs	r3, r0
20002770:	001a      	movs	r2, r3
20002772:	2380      	movs	r3, #128	; 0x80
20002774:	4013      	ands	r3, r2
20002776:	2b80      	cmp	r3, #128	; 0x80
20002778:	d0f7      	beq.n	2000276a <ascii_init+0x6>
		delay_micro(20); //latenstid 
2000277a:	2014      	movs	r0, #20
2000277c:	f7fe ff7c 	bl	20001678 <delay_micro>
		ascii_write_cmd(0x38); //Function set (39us), 000011NFXX, N = antal rader = 2, F = -->0=5x8<--, 1=5x11
20002780:	2038      	movs	r0, #56	; 0x38
20002782:	f7ff fef9 	bl	20002578 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20002786:	2064      	movs	r0, #100	; 0x64
20002788:	f7fe ff76 	bl	20001678 <delay_micro>
		
	// clear display
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
2000278c:	46c0      	nop			; (mov r8, r8)
2000278e:	f7ff ff1d 	bl	200025cc <ascii_read_status>
20002792:	0003      	movs	r3, r0
20002794:	001a      	movs	r2, r3
20002796:	2380      	movs	r3, #128	; 0x80
20002798:	4013      	ands	r3, r2
2000279a:	2b80      	cmp	r3, #128	; 0x80
2000279c:	d0f7      	beq.n	2000278e <ascii_init+0x2a>
		delay_micro(20); //latenstid
2000279e:	2014      	movs	r0, #20
200027a0:	f7fe ff6a 	bl	20001678 <delay_micro>
		ascii_write_cmd(0x01); 
200027a4:	2001      	movs	r0, #1
200027a6:	f7ff fee7 	bl	20002578 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
200027aa:	2064      	movs	r0, #100	; 0x64
200027ac:	f7fe ff64 	bl	20001678 <delay_micro>

	//display control:
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
200027b0:	46c0      	nop			; (mov r8, r8)
200027b2:	f7ff ff0b 	bl	200025cc <ascii_read_status>
200027b6:	0003      	movs	r3, r0
200027b8:	001a      	movs	r2, r3
200027ba:	2380      	movs	r3, #128	; 0x80
200027bc:	4013      	ands	r3, r2
200027be:	2b80      	cmp	r3, #128	; 0x80
200027c0:	d0f7      	beq.n	200027b2 <ascii_init+0x4e>
		delay_micro(20); //latenstid
200027c2:	2014      	movs	r0, #20
200027c4:	f7fe ff58 	bl	20001678 <delay_micro>
		ascii_write_cmd(0x0C); //000001 + XXX. X:ena = 0:av / 1:pÃƒÂ¥ -  SkÃƒÂ¤rm/MarkÃƒÂ¶r/BlinkaMarkÃƒÂ¶ren
200027c8:	200c      	movs	r0, #12
200027ca:	f7ff fed5 	bl	20002578 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
200027ce:	2064      	movs	r0, #100	; 0x64
200027d0:	f7fe ff52 	bl	20001678 <delay_micro>
		
	// entry mode set
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
200027d4:	46c0      	nop			; (mov r8, r8)
200027d6:	f7ff fef9 	bl	200025cc <ascii_read_status>
200027da:	0003      	movs	r3, r0
200027dc:	001a      	movs	r2, r3
200027de:	2380      	movs	r3, #128	; 0x80
200027e0:	4013      	ands	r3, r2
200027e2:	2b80      	cmp	r3, #128	; 0x80
200027e4:	d0f7      	beq.n	200027d6 <ascii_init+0x72>
		delay_micro(20); //latenstid
200027e6:	2014      	movs	r0, #20
200027e8:	f7fe ff46 	bl	20001678 <delay_micro>
		ascii_write_cmd(0x06); //00000001 + XY. X=0: markÃƒÂ¶ren vÃƒÂ¤nst. || X=1: marÃƒÂ¶kren hÃƒÂ¶g. - Y=0: skift av || Y=1: skift pÃƒÂ¥
200027ec:	2006      	movs	r0, #6
200027ee:	f7ff fec3 	bl	20002578 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
200027f2:	2064      	movs	r0, #100	; 0x64
200027f4:	f7fe ff40 	bl	20001678 <delay_micro>
		
		
}
200027f8:	46c0      	nop			; (mov r8, r8)
200027fa:	46bd      	mov	sp, r7
200027fc:	bd80      	pop	{r7, pc}

200027fe <init_application>:

void init_application(void){
200027fe:	b580      	push	{r7, lr}
20002800:	af00      	add	r7, sp, #0
	#ifdef USBDM
		*((unsigned long *) 0x40023830) = 0x18; //startar klockor pÃ¥ port D och E
		//__asm volatile ("LDR R0, =0x08000209\n BLX R0 \n"); //initiera PLL
	#endif
	//"initierar Port E med anvÃƒÂ¤ndning med LCD-modulen, dvs. sÃƒÂ¥vÃƒÂ¤l port E0-7 som E8-15 sÃƒÂ¤tts till utgÃƒÂ¥ngar
	* portModer = 0x55555555;
20002802:	4b03      	ldr	r3, [pc, #12]	; (20002810 <init_application+0x12>)
20002804:	4a03      	ldr	r2, [pc, #12]	; (20002814 <init_application+0x16>)
20002806:	601a      	str	r2, [r3, #0]
}
20002808:	46c0      	nop			; (mov r8, r8)
2000280a:	46bd      	mov	sp, r7
2000280c:	bd80      	pop	{r7, pc}
2000280e:	46c0      	nop			; (mov r8, r8)
20002810:	40021000 	andmi	r1, r2, r0
20002814:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20002818 <set_up_ascii>:

void set_up_ascii( void ) {
20002818:	b580      	push	{r7, lr}
2000281a:	af00      	add	r7, sp, #0
	init_application();
2000281c:	f7ff ffef 	bl	200027fe <init_application>
	ascii_init();
20002820:	f7ff ffa0 	bl	20002764 <ascii_init>
}
20002824:	46c0      	nop			; (mov r8, r8)
20002826:	46bd      	mov	sp, r7
20002828:	bd80      	pop	{r7, pc}

2000282a <clear_ascii>:

void clear_ascii( void ) {
2000282a:	b590      	push	{r4, r7, lr}
2000282c:	b089      	sub	sp, #36	; 0x24
2000282e:	af00      	add	r7, sp, #0
	char *s;
	char clear[] = "                    ";
20002830:	1d3b      	adds	r3, r7, #4
20002832:	4a17      	ldr	r2, [pc, #92]	; (20002890 <clear_ascii+0x66>)
20002834:	ca13      	ldmia	r2!, {r0, r1, r4}
20002836:	c313      	stmia	r3!, {r0, r1, r4}
20002838:	ca03      	ldmia	r2!, {r0, r1}
2000283a:	c303      	stmia	r3!, {r0, r1}
2000283c:	7812      	ldrb	r2, [r2, #0]
2000283e:	701a      	strb	r2, [r3, #0]
	
	s = clear;
20002840:	1d3b      	adds	r3, r7, #4
20002842:	61fb      	str	r3, [r7, #28]
	ascii_goToXY(1,1);
20002844:	2101      	movs	r1, #1
20002846:	2001      	movs	r0, #1
20002848:	f7ff ff64 	bl	20002714 <ascii_goToXY>
	while(*s){
2000284c:	e006      	b.n	2000285c <clear_ascii+0x32>
		ascii_write_char(*s++);
2000284e:	69fb      	ldr	r3, [r7, #28]
20002850:	1c5a      	adds	r2, r3, #1
20002852:	61fa      	str	r2, [r7, #28]
20002854:	781b      	ldrb	r3, [r3, #0]
20002856:	0018      	movs	r0, r3
20002858:	f7ff ff3e 	bl	200026d8 <ascii_write_char>
	while(*s){
2000285c:	69fb      	ldr	r3, [r7, #28]
2000285e:	781b      	ldrb	r3, [r3, #0]
20002860:	2b00      	cmp	r3, #0
20002862:	d1f4      	bne.n	2000284e <clear_ascii+0x24>
	}
	s = clear;
20002864:	1d3b      	adds	r3, r7, #4
20002866:	61fb      	str	r3, [r7, #28]
	ascii_goToXY(1,2);
20002868:	2102      	movs	r1, #2
2000286a:	2001      	movs	r0, #1
2000286c:	f7ff ff52 	bl	20002714 <ascii_goToXY>
	while(*s){
20002870:	e006      	b.n	20002880 <clear_ascii+0x56>
		ascii_write_char(*s++);
20002872:	69fb      	ldr	r3, [r7, #28]
20002874:	1c5a      	adds	r2, r3, #1
20002876:	61fa      	str	r2, [r7, #28]
20002878:	781b      	ldrb	r3, [r3, #0]
2000287a:	0018      	movs	r0, r3
2000287c:	f7ff ff2c 	bl	200026d8 <ascii_write_char>
	while(*s){
20002880:	69fb      	ldr	r3, [r7, #28]
20002882:	781b      	ldrb	r3, [r3, #0]
20002884:	2b00      	cmp	r3, #0
20002886:	d1f4      	bne.n	20002872 <clear_ascii+0x48>
	}
}
20002888:	46c0      	nop			; (mov r8, r8)
2000288a:	46bd      	mov	sp, r7
2000288c:	b009      	add	sp, #36	; 0x24
2000288e:	bd90      	pop	{r4, r7, pc}
20002890:	20008adc 	ldrdcs	r8, [r0], -ip

20002894 <ascii_write>:

void ascii_write(char *row1, char *row2) {
20002894:	b580      	push	{r7, lr}
20002896:	b082      	sub	sp, #8
20002898:	af00      	add	r7, sp, #0
2000289a:	6078      	str	r0, [r7, #4]
2000289c:	6039      	str	r1, [r7, #0]
	clear_ascii();
2000289e:	f7ff ffc4 	bl	2000282a <clear_ascii>
	
	ascii_goToXY(1,1);
200028a2:	2101      	movs	r1, #1
200028a4:	2001      	movs	r0, #1
200028a6:	f7ff ff35 	bl	20002714 <ascii_goToXY>
	while(*row1){
200028aa:	e006      	b.n	200028ba <ascii_write+0x26>
		ascii_write_char(*row1++);
200028ac:	687b      	ldr	r3, [r7, #4]
200028ae:	1c5a      	adds	r2, r3, #1
200028b0:	607a      	str	r2, [r7, #4]
200028b2:	781b      	ldrb	r3, [r3, #0]
200028b4:	0018      	movs	r0, r3
200028b6:	f7ff ff0f 	bl	200026d8 <ascii_write_char>
	while(*row1){
200028ba:	687b      	ldr	r3, [r7, #4]
200028bc:	781b      	ldrb	r3, [r3, #0]
200028be:	2b00      	cmp	r3, #0
200028c0:	d1f4      	bne.n	200028ac <ascii_write+0x18>
	}	
	ascii_goToXY(1,2);
200028c2:	2102      	movs	r1, #2
200028c4:	2001      	movs	r0, #1
200028c6:	f7ff ff25 	bl	20002714 <ascii_goToXY>
	while(*row2){
200028ca:	e006      	b.n	200028da <ascii_write+0x46>
		ascii_write_char(*row2++);
200028cc:	683b      	ldr	r3, [r7, #0]
200028ce:	1c5a      	adds	r2, r3, #1
200028d0:	603a      	str	r2, [r7, #0]
200028d2:	781b      	ldrb	r3, [r3, #0]
200028d4:	0018      	movs	r0, r3
200028d6:	f7ff feff 	bl	200026d8 <ascii_write_char>
	while(*row2){
200028da:	683b      	ldr	r3, [r7, #0]
200028dc:	781b      	ldrb	r3, [r3, #0]
200028de:	2b00      	cmp	r3, #0
200028e0:	d1f4      	bne.n	200028cc <ascii_write+0x38>
	}
	
	ascii_goToXY(21,1);
200028e2:	2101      	movs	r1, #1
200028e4:	2015      	movs	r0, #21
200028e6:	f7ff ff15 	bl	20002714 <ascii_goToXY>
}
200028ea:	46c0      	nop			; (mov r8, r8)
200028ec:	46bd      	mov	sp, r7
200028ee:	b002      	add	sp, #8
200028f0:	bd80      	pop	{r7, pc}

200028f2 <ascii_write_part>:

void ascii_write_part(char *row1, char *row2, int limit1, int limit2) {
200028f2:	b580      	push	{r7, lr}
200028f4:	b086      	sub	sp, #24
200028f6:	af00      	add	r7, sp, #0
200028f8:	60f8      	str	r0, [r7, #12]
200028fa:	60b9      	str	r1, [r7, #8]
200028fc:	607a      	str	r2, [r7, #4]
200028fe:	603b      	str	r3, [r7, #0]
	clear_ascii();
20002900:	f7ff ff93 	bl	2000282a <clear_ascii>
	
	ascii_goToXY(1,1);
20002904:	2101      	movs	r1, #1
20002906:	2001      	movs	r0, #1
20002908:	f7ff ff04 	bl	20002714 <ascii_goToXY>
	int i = 0;
2000290c:	2300      	movs	r3, #0
2000290e:	617b      	str	r3, [r7, #20]
	if(limit1 > 0) {
20002910:	687b      	ldr	r3, [r7, #4]
20002912:	2b00      	cmp	r3, #0
20002914:	dd11      	ble.n	2000293a <ascii_write_part+0x48>
		while(*row1 && (i++ < limit1)){
20002916:	e006      	b.n	20002926 <ascii_write_part+0x34>
			ascii_write_char(*row1++);
20002918:	68fb      	ldr	r3, [r7, #12]
2000291a:	1c5a      	adds	r2, r3, #1
2000291c:	60fa      	str	r2, [r7, #12]
2000291e:	781b      	ldrb	r3, [r3, #0]
20002920:	0018      	movs	r0, r3
20002922:	f7ff fed9 	bl	200026d8 <ascii_write_char>
		while(*row1 && (i++ < limit1)){
20002926:	68fb      	ldr	r3, [r7, #12]
20002928:	781b      	ldrb	r3, [r3, #0]
2000292a:	2b00      	cmp	r3, #0
2000292c:	d005      	beq.n	2000293a <ascii_write_part+0x48>
2000292e:	697b      	ldr	r3, [r7, #20]
20002930:	1c5a      	adds	r2, r3, #1
20002932:	617a      	str	r2, [r7, #20]
20002934:	687a      	ldr	r2, [r7, #4]
20002936:	4293      	cmp	r3, r2
20002938:	dbee      	blt.n	20002918 <ascii_write_part+0x26>
		}			
	}

	ascii_goToXY(1,2);
2000293a:	2102      	movs	r1, #2
2000293c:	2001      	movs	r0, #1
2000293e:	f7ff fee9 	bl	20002714 <ascii_goToXY>
	i = 0;
20002942:	2300      	movs	r3, #0
20002944:	617b      	str	r3, [r7, #20]
	if(limit2 > 0) {
20002946:	683b      	ldr	r3, [r7, #0]
20002948:	2b00      	cmp	r3, #0
2000294a:	dd11      	ble.n	20002970 <ascii_write_part+0x7e>
		while(*row2 && (i++ < limit2)){
2000294c:	e006      	b.n	2000295c <ascii_write_part+0x6a>
			ascii_write_char(*row2++);
2000294e:	68bb      	ldr	r3, [r7, #8]
20002950:	1c5a      	adds	r2, r3, #1
20002952:	60ba      	str	r2, [r7, #8]
20002954:	781b      	ldrb	r3, [r3, #0]
20002956:	0018      	movs	r0, r3
20002958:	f7ff febe 	bl	200026d8 <ascii_write_char>
		while(*row2 && (i++ < limit2)){
2000295c:	68bb      	ldr	r3, [r7, #8]
2000295e:	781b      	ldrb	r3, [r3, #0]
20002960:	2b00      	cmp	r3, #0
20002962:	d005      	beq.n	20002970 <ascii_write_part+0x7e>
20002964:	697b      	ldr	r3, [r7, #20]
20002966:	1c5a      	adds	r2, r3, #1
20002968:	617a      	str	r2, [r7, #20]
2000296a:	683a      	ldr	r2, [r7, #0]
2000296c:	4293      	cmp	r3, r2
2000296e:	dbee      	blt.n	2000294e <ascii_write_part+0x5c>
		}
	}
	
	ascii_goToXY(21,1);
20002970:	2101      	movs	r1, #1
20002972:	2015      	movs	r0, #21
20002974:	f7ff fece 	bl	20002714 <ascii_goToXY>
}
20002978:	46c0      	nop			; (mov r8, r8)
2000297a:	46bd      	mov	sp, r7
2000297c:	b006      	add	sp, #24
2000297e:	bd80      	pop	{r7, pc}

20002980 <ascii_test>:



void ascii_test(void) {
20002980:	b590      	push	{r4, r7, lr}
20002982:	b08b      	sub	sp, #44	; 0x2c
20002984:	af00      	add	r7, sp, #0
	char *s;
	char test1[] = "Alfanumerisk";
20002986:	2314      	movs	r3, #20
20002988:	18fb      	adds	r3, r7, r3
2000298a:	4a1c      	ldr	r2, [pc, #112]	; (200029fc <ascii_test+0x7c>)
2000298c:	ca13      	ldmia	r2!, {r0, r1, r4}
2000298e:	c313      	stmia	r3!, {r0, r1, r4}
20002990:	7812      	ldrb	r2, [r2, #0]
20002992:	701a      	strb	r2, [r3, #0]
	char test2[] = "hardåäöare suger";
20002994:	003b      	movs	r3, r7
20002996:	4a1a      	ldr	r2, [pc, #104]	; (20002a00 <ascii_test+0x80>)
20002998:	ca13      	ldmia	r2!, {r0, r1, r4}
2000299a:	c313      	stmia	r3!, {r0, r1, r4}
2000299c:	ca03      	ldmia	r2!, {r0, r1}
2000299e:	c303      	stmia	r3!, {r0, r1}
	
	init_application();
200029a0:	f7ff ff2d 	bl	200027fe <init_application>
	ascii_init();
200029a4:	f7ff fede 	bl	20002764 <ascii_init>
	ascii_goToXY(1,1);
200029a8:	2101      	movs	r1, #1
200029aa:	2001      	movs	r0, #1
200029ac:	f7ff feb2 	bl	20002714 <ascii_goToXY>
	s = test1;
200029b0:	2314      	movs	r3, #20
200029b2:	18fb      	adds	r3, r7, r3
200029b4:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
200029b6:	e006      	b.n	200029c6 <ascii_test+0x46>
		ascii_write_char(*s++);
200029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200029ba:	1c5a      	adds	r2, r3, #1
200029bc:	627a      	str	r2, [r7, #36]	; 0x24
200029be:	781b      	ldrb	r3, [r3, #0]
200029c0:	0018      	movs	r0, r3
200029c2:	f7ff fe89 	bl	200026d8 <ascii_write_char>
	while(*s){
200029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200029c8:	781b      	ldrb	r3, [r3, #0]
200029ca:	2b00      	cmp	r3, #0
200029cc:	d1f4      	bne.n	200029b8 <ascii_test+0x38>
	}
	ascii_goToXY(1,2);
200029ce:	2102      	movs	r1, #2
200029d0:	2001      	movs	r0, #1
200029d2:	f7ff fe9f 	bl	20002714 <ascii_goToXY>
	s = test2;
200029d6:	003b      	movs	r3, r7
200029d8:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
200029da:	e006      	b.n	200029ea <ascii_test+0x6a>
		ascii_write_char(*s++);
200029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200029de:	1c5a      	adds	r2, r3, #1
200029e0:	627a      	str	r2, [r7, #36]	; 0x24
200029e2:	781b      	ldrb	r3, [r3, #0]
200029e4:	0018      	movs	r0, r3
200029e6:	f7ff fe77 	bl	200026d8 <ascii_write_char>
	while(*s){
200029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200029ec:	781b      	ldrb	r3, [r3, #0]
200029ee:	2b00      	cmp	r3, #0
200029f0:	d1f4      	bne.n	200029dc <ascii_test+0x5c>
	}
	return 0;
200029f2:	46c0      	nop			; (mov r8, r8)
200029f4:	46bd      	mov	sp, r7
200029f6:	b00b      	add	sp, #44	; 0x2c
200029f8:	bd90      	pop	{r4, r7, pc}
200029fa:	46c0      	nop			; (mov r8, r8)
200029fc:	20008af4 	strdcs	r8, [r0], -r4
20002a00:	20008b04 	andcs	r8, r0, r4, lsl #22

20002a04 <display>:
#include "slow_text.h"
#include "ascii_display.h"

void display(SlowText *this, int length_of_row1) {
20002a04:	b580      	push	{r7, lr}
20002a06:	b084      	sub	sp, #16
20002a08:	af00      	add	r7, sp, #0
20002a0a:	6078      	str	r0, [r7, #4]
20002a0c:	6039      	str	r1, [r7, #0]
	int limit1 = this->counter / this->speed;
20002a0e:	687b      	ldr	r3, [r7, #4]
20002a10:	689a      	ldr	r2, [r3, #8]
20002a12:	687b      	ldr	r3, [r7, #4]
20002a14:	68db      	ldr	r3, [r3, #12]
20002a16:	0019      	movs	r1, r3
20002a18:	0010      	movs	r0, r2
20002a1a:	f000 f925 	bl	20002c68 <__divsi3>
20002a1e:	0003      	movs	r3, r0
20002a20:	60fb      	str	r3, [r7, #12]
	int limit2 = this->counter / this->speed - length_of_row1;
20002a22:	687b      	ldr	r3, [r7, #4]
20002a24:	689a      	ldr	r2, [r3, #8]
20002a26:	687b      	ldr	r3, [r7, #4]
20002a28:	68db      	ldr	r3, [r3, #12]
20002a2a:	0019      	movs	r1, r3
20002a2c:	0010      	movs	r0, r2
20002a2e:	f000 f91b 	bl	20002c68 <__divsi3>
20002a32:	0003      	movs	r3, r0
20002a34:	001a      	movs	r2, r3
20002a36:	683b      	ldr	r3, [r7, #0]
20002a38:	1ad3      	subs	r3, r2, r3
20002a3a:	60bb      	str	r3, [r7, #8]
	ascii_write_part(this->row1, this->row2, limit1, limit2);
20002a3c:	687b      	ldr	r3, [r7, #4]
20002a3e:	6818      	ldr	r0, [r3, #0]
20002a40:	687b      	ldr	r3, [r7, #4]
20002a42:	6859      	ldr	r1, [r3, #4]
20002a44:	68bb      	ldr	r3, [r7, #8]
20002a46:	68fa      	ldr	r2, [r7, #12]
20002a48:	f7ff ff53 	bl	200028f2 <ascii_write_part>
	
	this->counter++;
20002a4c:	687b      	ldr	r3, [r7, #4]
20002a4e:	689b      	ldr	r3, [r3, #8]
20002a50:	1c5a      	adds	r2, r3, #1
20002a52:	687b      	ldr	r3, [r7, #4]
20002a54:	609a      	str	r2, [r3, #8]
}
20002a56:	46c0      	nop			; (mov r8, r8)
20002a58:	46bd      	mov	sp, r7
20002a5a:	b004      	add	sp, #16
20002a5c:	bd80      	pop	{r7, pc}

20002a5e <init_slow_text>:

void init_slow_text(SlowText *obj, char *row1, char *row2, int speed) {
20002a5e:	b580      	push	{r7, lr}
20002a60:	b084      	sub	sp, #16
20002a62:	af00      	add	r7, sp, #0
20002a64:	60f8      	str	r0, [r7, #12]
20002a66:	60b9      	str	r1, [r7, #8]
20002a68:	607a      	str	r2, [r7, #4]
20002a6a:	603b      	str	r3, [r7, #0]
	obj->row1 = row1;
20002a6c:	68fb      	ldr	r3, [r7, #12]
20002a6e:	68ba      	ldr	r2, [r7, #8]
20002a70:	601a      	str	r2, [r3, #0]
	obj->row2 = row2;
20002a72:	68fb      	ldr	r3, [r7, #12]
20002a74:	687a      	ldr	r2, [r7, #4]
20002a76:	605a      	str	r2, [r3, #4]
	obj->speed = speed;
20002a78:	68fb      	ldr	r3, [r7, #12]
20002a7a:	683a      	ldr	r2, [r7, #0]
20002a7c:	60da      	str	r2, [r3, #12]
	obj->counter = 0;
20002a7e:	68fb      	ldr	r3, [r7, #12]
20002a80:	2200      	movs	r2, #0
20002a82:	609a      	str	r2, [r3, #8]
	obj->display = display;
20002a84:	68fb      	ldr	r3, [r7, #12]
20002a86:	4a03      	ldr	r2, [pc, #12]	; (20002a94 <init_slow_text+0x36>)
20002a88:	611a      	str	r2, [r3, #16]
20002a8a:	46c0      	nop			; (mov r8, r8)
20002a8c:	46bd      	mov	sp, r7
20002a8e:	b004      	add	sp, #16
20002a90:	bd80      	pop	{r7, pc}
20002a92:	46c0      	nop			; (mov r8, r8)
20002a94:	20002a05 	andcs	r2, r0, r5, lsl #20

20002a98 <initSprites>:


GameObject indoorsObj;
Image indoorsImage;
Image indoorsImages[1];
static void initSprites( void ) {	
20002a98:	b580      	push	{r7, lr}
20002a9a:	b084      	sub	sp, #16
20002a9c:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempIndoorsLight;
20002a9e:	4b12      	ldr	r3, [pc, #72]	; (20002ae8 <initSprites+0x50>)
20002aa0:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer11, indoors_light_bits, indoors_black_width, indoors_black_height);
20002aa2:	4912      	ldr	r1, [pc, #72]	; (20002aec <initSprites+0x54>)
20002aa4:	68f8      	ldr	r0, [r7, #12]
20002aa6:	2340      	movs	r3, #64	; 0x40
20002aa8:	2280      	movs	r2, #128	; 0x80
20002aaa:	f7ff fcd7 	bl	2000245c <load_sprite>
	indoorsLight = pointer11;
20002aae:	4b10      	ldr	r3, [pc, #64]	; (20002af0 <initSprites+0x58>)
20002ab0:	68fa      	ldr	r2, [r7, #12]
20002ab2:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempIndoorsGray;
20002ab4:	4b0f      	ldr	r3, [pc, #60]	; (20002af4 <initSprites+0x5c>)
20002ab6:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer12, indoors_gray_bits, indoors_black_width, indoors_black_height);
20002ab8:	490f      	ldr	r1, [pc, #60]	; (20002af8 <initSprites+0x60>)
20002aba:	68b8      	ldr	r0, [r7, #8]
20002abc:	2340      	movs	r3, #64	; 0x40
20002abe:	2280      	movs	r2, #128	; 0x80
20002ac0:	f7ff fccc 	bl	2000245c <load_sprite>
	indoorsGray = pointer12;
20002ac4:	4b0d      	ldr	r3, [pc, #52]	; (20002afc <initSprites+0x64>)
20002ac6:	68ba      	ldr	r2, [r7, #8]
20002ac8:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempIndoorsBlack;
20002aca:	4b0d      	ldr	r3, [pc, #52]	; (20002b00 <initSprites+0x68>)
20002acc:	607b      	str	r3, [r7, #4]
	load_sprite(pointer13, indoors_black_bits, indoors_black_width, indoors_black_height);
20002ace:	490d      	ldr	r1, [pc, #52]	; (20002b04 <initSprites+0x6c>)
20002ad0:	6878      	ldr	r0, [r7, #4]
20002ad2:	2340      	movs	r3, #64	; 0x40
20002ad4:	2280      	movs	r2, #128	; 0x80
20002ad6:	f7ff fcc1 	bl	2000245c <load_sprite>
	indoorsBlack = pointer13;	
20002ada:	4b0b      	ldr	r3, [pc, #44]	; (20002b08 <initSprites+0x70>)
20002adc:	687a      	ldr	r2, [r7, #4]
20002ade:	601a      	str	r2, [r3, #0]
	
}
20002ae0:	46c0      	nop			; (mov r8, r8)
20002ae2:	46bd      	mov	sp, r7
20002ae4:	b004      	add	sp, #16
20002ae6:	bd80      	pop	{r7, pc}
20002ae8:	200050c8 	andcs	r5, r0, r8, asr #1
20002aec:	20007934 	andcs	r7, r0, r4, lsr r9
20002af0:	20005124 	andcs	r5, r0, r4, lsr #2
20002af4:	200050bc 	strhcs	r5, [r0], -ip
20002af8:	20007534 	andcs	r7, r0, r4, lsr r5
20002afc:	200050e0 	andcs	r5, r0, r0, ror #1
20002b00:	200050d4 	ldrdcs	r5, [r0], -r4
20002b04:	20007134 	andcs	r7, r0, r4, lsr r1
20002b08:	20005114 	andcs	r5, r0, r4, lsl r1

20002b0c <init_indoors>:
	
void init_indoors( GameObject *indoorsObj ) {
20002b0c:	b590      	push	{r4, r7, lr}
20002b0e:	b083      	sub	sp, #12
20002b10:	af00      	add	r7, sp, #0
20002b12:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20002b14:	4b14      	ldr	r3, [pc, #80]	; (20002b68 <init_indoors+0x5c>)
20002b16:	681b      	ldr	r3, [r3, #0]
20002b18:	2b00      	cmp	r3, #0
20002b1a:	d011      	beq.n	20002b40 <init_indoors+0x34>
		initSprites();
20002b1c:	f7ff ffbc 	bl	20002a98 <initSprites>
		firstTime = 0;			
20002b20:	4b11      	ldr	r3, [pc, #68]	; (20002b68 <init_indoors+0x5c>)
20002b22:	2200      	movs	r2, #0
20002b24:	601a      	str	r2, [r3, #0]

		indoorsImages[0] = indoorsImage;
20002b26:	4b11      	ldr	r3, [pc, #68]	; (20002b6c <init_indoors+0x60>)
20002b28:	4a11      	ldr	r2, [pc, #68]	; (20002b70 <init_indoors+0x64>)
20002b2a:	ca13      	ldmia	r2!, {r0, r1, r4}
20002b2c:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&indoorsImages[0], indoorsBlack, indoorsGray, indoorsLight);
20002b2e:	4b11      	ldr	r3, [pc, #68]	; (20002b74 <init_indoors+0x68>)
20002b30:	6819      	ldr	r1, [r3, #0]
20002b32:	4b11      	ldr	r3, [pc, #68]	; (20002b78 <init_indoors+0x6c>)
20002b34:	681a      	ldr	r2, [r3, #0]
20002b36:	4b11      	ldr	r3, [pc, #68]	; (20002b7c <init_indoors+0x70>)
20002b38:	681b      	ldr	r3, [r3, #0]
20002b3a:	480c      	ldr	r0, [pc, #48]	; (20002b6c <init_indoors+0x60>)
20002b3c:	f7ff fc7a 	bl	20002434 <load_image>
	}
	
	indoorsObj->images = indoorsImages;
20002b40:	687b      	ldr	r3, [r7, #4]
20002b42:	4a0a      	ldr	r2, [pc, #40]	; (20002b6c <init_indoors+0x60>)
20002b44:	601a      	str	r2, [r3, #0]

	indoorsObj->current_frame = 0;
20002b46:	687b      	ldr	r3, [r7, #4]
20002b48:	2200      	movs	r2, #0
20002b4a:	615a      	str	r2, [r3, #20]
	indoorsObj->n_frames = 1;
20002b4c:	687b      	ldr	r3, [r7, #4]
20002b4e:	2201      	movs	r2, #1
20002b50:	619a      	str	r2, [r3, #24]
	indoorsObj->animation_speed = 1;
20002b52:	687b      	ldr	r3, [r7, #4]
20002b54:	2201      	movs	r2, #1
20002b56:	61da      	str	r2, [r3, #28]
	indoorsObj->animation_counter = 0;
20002b58:	687b      	ldr	r3, [r7, #4]
20002b5a:	2200      	movs	r2, #0
20002b5c:	621a      	str	r2, [r3, #32]
}
20002b5e:	46c0      	nop			; (mov r8, r8)
20002b60:	46bd      	mov	sp, r7
20002b62:	b003      	add	sp, #12
20002b64:	bd90      	pop	{r4, r7, pc}
20002b66:	46c0      	nop			; (mov r8, r8)
20002b68:	20007d34 	andcs	r7, r0, r4, lsr sp
20002b6c:	20005108 	andcs	r5, r0, r8, lsl #2
20002b70:	20005118 	andcs	r5, r0, r8, lsl r1
20002b74:	20005114 	andcs	r5, r0, r4, lsl r1
20002b78:	200050e0 	andcs	r5, r0, r0, ror #1
20002b7c:	20005124 	andcs	r5, r0, r4, lsr #2

20002b80 <initSprites>:


GameObject indoors2Obj;
Image indoors2Image;
Image indoors2Images[1];
static void initSprites( void ) {	
20002b80:	b580      	push	{r7, lr}
20002b82:	b084      	sub	sp, #16
20002b84:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempIndoors2Light;
20002b86:	4b12      	ldr	r3, [pc, #72]	; (20002bd0 <initSprites+0x50>)
20002b88:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer11, indoors2_light_bits, indoors2_black_width, indoors2_black_height);
20002b8a:	4912      	ldr	r1, [pc, #72]	; (20002bd4 <initSprites+0x54>)
20002b8c:	68f8      	ldr	r0, [r7, #12]
20002b8e:	2340      	movs	r3, #64	; 0x40
20002b90:	2280      	movs	r2, #128	; 0x80
20002b92:	f7ff fc63 	bl	2000245c <load_sprite>
	indoors2Light = pointer11;
20002b96:	4b10      	ldr	r3, [pc, #64]	; (20002bd8 <initSprites+0x58>)
20002b98:	68fa      	ldr	r2, [r7, #12]
20002b9a:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempIndoors2Gray;
20002b9c:	4b0f      	ldr	r3, [pc, #60]	; (20002bdc <initSprites+0x5c>)
20002b9e:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer12, indoors2_gray_bits, indoors2_black_width, indoors2_black_height);
20002ba0:	490f      	ldr	r1, [pc, #60]	; (20002be0 <initSprites+0x60>)
20002ba2:	68b8      	ldr	r0, [r7, #8]
20002ba4:	2340      	movs	r3, #64	; 0x40
20002ba6:	2280      	movs	r2, #128	; 0x80
20002ba8:	f7ff fc58 	bl	2000245c <load_sprite>
	indoors2Gray = pointer12;
20002bac:	4b0d      	ldr	r3, [pc, #52]	; (20002be4 <initSprites+0x64>)
20002bae:	68ba      	ldr	r2, [r7, #8]
20002bb0:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempIndoors2Black;
20002bb2:	4b0d      	ldr	r3, [pc, #52]	; (20002be8 <initSprites+0x68>)
20002bb4:	607b      	str	r3, [r7, #4]
	load_sprite(pointer13, indoors2_black_bits, indoors2_black_width, indoors2_black_height);
20002bb6:	490d      	ldr	r1, [pc, #52]	; (20002bec <initSprites+0x6c>)
20002bb8:	6878      	ldr	r0, [r7, #4]
20002bba:	2340      	movs	r3, #64	; 0x40
20002bbc:	2280      	movs	r2, #128	; 0x80
20002bbe:	f7ff fc4d 	bl	2000245c <load_sprite>
	indoors2Black = pointer13;	
20002bc2:	4b0b      	ldr	r3, [pc, #44]	; (20002bf0 <initSprites+0x70>)
20002bc4:	687a      	ldr	r2, [r7, #4]
20002bc6:	601a      	str	r2, [r3, #0]
	
}
20002bc8:	46c0      	nop			; (mov r8, r8)
20002bca:	46bd      	mov	sp, r7
20002bcc:	b004      	add	sp, #16
20002bce:	bd80      	pop	{r7, pc}
20002bd0:	20005184 	andcs	r5, r0, r4, lsl #3
20002bd4:	20008538 	andcs	r8, r0, r8, lsr r5
20002bd8:	20005174 	andcs	r5, r0, r4, ror r1
20002bdc:	20005168 	andcs	r5, r0, r8, ror #2
20002be0:	20008138 	andcs	r8, r0, r8, lsr r1
20002be4:	2000514c 	andcs	r5, r0, ip, asr #2
20002be8:	20005178 	andcs	r5, r0, r8, ror r1
20002bec:	20007d38 	andcs	r7, r0, r8, lsr sp
20002bf0:	20005190 	mulcs	r0, r0, r1

20002bf4 <init_indoors2>:
	
void init_indoors2( GameObject *indoors2Obj ) {
20002bf4:	b590      	push	{r4, r7, lr}
20002bf6:	b083      	sub	sp, #12
20002bf8:	af00      	add	r7, sp, #0
20002bfa:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20002bfc:	4b14      	ldr	r3, [pc, #80]	; (20002c50 <init_indoors2+0x5c>)
20002bfe:	681b      	ldr	r3, [r3, #0]
20002c00:	2b00      	cmp	r3, #0
20002c02:	d011      	beq.n	20002c28 <init_indoors2+0x34>
		initSprites();
20002c04:	f7ff ffbc 	bl	20002b80 <initSprites>
		firstTime = 0;			
20002c08:	4b11      	ldr	r3, [pc, #68]	; (20002c50 <init_indoors2+0x5c>)
20002c0a:	2200      	movs	r2, #0
20002c0c:	601a      	str	r2, [r3, #0]

		indoors2Images[0] = indoors2Image;
20002c0e:	4b11      	ldr	r3, [pc, #68]	; (20002c54 <init_indoors2+0x60>)
20002c10:	4a11      	ldr	r2, [pc, #68]	; (20002c58 <init_indoors2+0x64>)
20002c12:	ca13      	ldmia	r2!, {r0, r1, r4}
20002c14:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&indoors2Images[0], indoors2Black, indoors2Gray, indoors2Light);
20002c16:	4b11      	ldr	r3, [pc, #68]	; (20002c5c <init_indoors2+0x68>)
20002c18:	6819      	ldr	r1, [r3, #0]
20002c1a:	4b11      	ldr	r3, [pc, #68]	; (20002c60 <init_indoors2+0x6c>)
20002c1c:	681a      	ldr	r2, [r3, #0]
20002c1e:	4b11      	ldr	r3, [pc, #68]	; (20002c64 <init_indoors2+0x70>)
20002c20:	681b      	ldr	r3, [r3, #0]
20002c22:	480c      	ldr	r0, [pc, #48]	; (20002c54 <init_indoors2+0x60>)
20002c24:	f7ff fc06 	bl	20002434 <load_image>
	}
	
	indoors2Obj->images = indoors2Images;
20002c28:	687b      	ldr	r3, [r7, #4]
20002c2a:	4a0a      	ldr	r2, [pc, #40]	; (20002c54 <init_indoors2+0x60>)
20002c2c:	601a      	str	r2, [r3, #0]

	indoors2Obj->current_frame = 0;
20002c2e:	687b      	ldr	r3, [r7, #4]
20002c30:	2200      	movs	r2, #0
20002c32:	615a      	str	r2, [r3, #20]
	indoors2Obj->n_frames = 1;
20002c34:	687b      	ldr	r3, [r7, #4]
20002c36:	2201      	movs	r2, #1
20002c38:	619a      	str	r2, [r3, #24]
	indoors2Obj->animation_speed = 1;
20002c3a:	687b      	ldr	r3, [r7, #4]
20002c3c:	2201      	movs	r2, #1
20002c3e:	61da      	str	r2, [r3, #28]
	indoors2Obj->animation_counter = 0;
20002c40:	687b      	ldr	r3, [r7, #4]
20002c42:	2200      	movs	r2, #0
20002c44:	621a      	str	r2, [r3, #32]
}
20002c46:	46c0      	nop			; (mov r8, r8)
20002c48:	46bd      	mov	sp, r7
20002c4a:	b003      	add	sp, #12
20002c4c:	bd90      	pop	{r4, r7, pc}
20002c4e:	46c0      	nop			; (mov r8, r8)
20002c50:	20008938 	andcs	r8, r0, r8, lsr r9
20002c54:	20005150 	andcs	r5, r0, r0, asr r1
20002c58:	2000515c 	andcs	r5, r0, ip, asr r1
20002c5c:	20005190 	mulcs	r0, r0, r1
20002c60:	2000514c 	andcs	r5, r0, ip, asr #2
20002c64:	20005174 	andcs	r5, r0, r4, ror r1

20002c68 <__divsi3>:
20002c68:	4603      	mov	r3, r0
20002c6a:	430b      	orrs	r3, r1
20002c6c:	d47f      	bmi.n	20002d6e <__divsi3+0x106>
20002c6e:	2200      	movs	r2, #0
20002c70:	0843      	lsrs	r3, r0, #1
20002c72:	428b      	cmp	r3, r1
20002c74:	d374      	bcc.n	20002d60 <__divsi3+0xf8>
20002c76:	0903      	lsrs	r3, r0, #4
20002c78:	428b      	cmp	r3, r1
20002c7a:	d35f      	bcc.n	20002d3c <__divsi3+0xd4>
20002c7c:	0a03      	lsrs	r3, r0, #8
20002c7e:	428b      	cmp	r3, r1
20002c80:	d344      	bcc.n	20002d0c <__divsi3+0xa4>
20002c82:	0b03      	lsrs	r3, r0, #12
20002c84:	428b      	cmp	r3, r1
20002c86:	d328      	bcc.n	20002cda <__divsi3+0x72>
20002c88:	0c03      	lsrs	r3, r0, #16
20002c8a:	428b      	cmp	r3, r1
20002c8c:	d30d      	bcc.n	20002caa <__divsi3+0x42>
20002c8e:	22ff      	movs	r2, #255	; 0xff
20002c90:	0209      	lsls	r1, r1, #8
20002c92:	ba12      	rev	r2, r2
20002c94:	0c03      	lsrs	r3, r0, #16
20002c96:	428b      	cmp	r3, r1
20002c98:	d302      	bcc.n	20002ca0 <__divsi3+0x38>
20002c9a:	1212      	asrs	r2, r2, #8
20002c9c:	0209      	lsls	r1, r1, #8
20002c9e:	d065      	beq.n	20002d6c <__divsi3+0x104>
20002ca0:	0b03      	lsrs	r3, r0, #12
20002ca2:	428b      	cmp	r3, r1
20002ca4:	d319      	bcc.n	20002cda <__divsi3+0x72>
20002ca6:	e000      	b.n	20002caa <__divsi3+0x42>
20002ca8:	0a09      	lsrs	r1, r1, #8
20002caa:	0bc3      	lsrs	r3, r0, #15
20002cac:	428b      	cmp	r3, r1
20002cae:	d301      	bcc.n	20002cb4 <__divsi3+0x4c>
20002cb0:	03cb      	lsls	r3, r1, #15
20002cb2:	1ac0      	subs	r0, r0, r3
20002cb4:	4152      	adcs	r2, r2
20002cb6:	0b83      	lsrs	r3, r0, #14
20002cb8:	428b      	cmp	r3, r1
20002cba:	d301      	bcc.n	20002cc0 <__divsi3+0x58>
20002cbc:	038b      	lsls	r3, r1, #14
20002cbe:	1ac0      	subs	r0, r0, r3
20002cc0:	4152      	adcs	r2, r2
20002cc2:	0b43      	lsrs	r3, r0, #13
20002cc4:	428b      	cmp	r3, r1
20002cc6:	d301      	bcc.n	20002ccc <__divsi3+0x64>
20002cc8:	034b      	lsls	r3, r1, #13
20002cca:	1ac0      	subs	r0, r0, r3
20002ccc:	4152      	adcs	r2, r2
20002cce:	0b03      	lsrs	r3, r0, #12
20002cd0:	428b      	cmp	r3, r1
20002cd2:	d301      	bcc.n	20002cd8 <__divsi3+0x70>
20002cd4:	030b      	lsls	r3, r1, #12
20002cd6:	1ac0      	subs	r0, r0, r3
20002cd8:	4152      	adcs	r2, r2
20002cda:	0ac3      	lsrs	r3, r0, #11
20002cdc:	428b      	cmp	r3, r1
20002cde:	d301      	bcc.n	20002ce4 <__divsi3+0x7c>
20002ce0:	02cb      	lsls	r3, r1, #11
20002ce2:	1ac0      	subs	r0, r0, r3
20002ce4:	4152      	adcs	r2, r2
20002ce6:	0a83      	lsrs	r3, r0, #10
20002ce8:	428b      	cmp	r3, r1
20002cea:	d301      	bcc.n	20002cf0 <__divsi3+0x88>
20002cec:	028b      	lsls	r3, r1, #10
20002cee:	1ac0      	subs	r0, r0, r3
20002cf0:	4152      	adcs	r2, r2
20002cf2:	0a43      	lsrs	r3, r0, #9
20002cf4:	428b      	cmp	r3, r1
20002cf6:	d301      	bcc.n	20002cfc <__divsi3+0x94>
20002cf8:	024b      	lsls	r3, r1, #9
20002cfa:	1ac0      	subs	r0, r0, r3
20002cfc:	4152      	adcs	r2, r2
20002cfe:	0a03      	lsrs	r3, r0, #8
20002d00:	428b      	cmp	r3, r1
20002d02:	d301      	bcc.n	20002d08 <__divsi3+0xa0>
20002d04:	020b      	lsls	r3, r1, #8
20002d06:	1ac0      	subs	r0, r0, r3
20002d08:	4152      	adcs	r2, r2
20002d0a:	d2cd      	bcs.n	20002ca8 <__divsi3+0x40>
20002d0c:	09c3      	lsrs	r3, r0, #7
20002d0e:	428b      	cmp	r3, r1
20002d10:	d301      	bcc.n	20002d16 <__divsi3+0xae>
20002d12:	01cb      	lsls	r3, r1, #7
20002d14:	1ac0      	subs	r0, r0, r3
20002d16:	4152      	adcs	r2, r2
20002d18:	0983      	lsrs	r3, r0, #6
20002d1a:	428b      	cmp	r3, r1
20002d1c:	d301      	bcc.n	20002d22 <__divsi3+0xba>
20002d1e:	018b      	lsls	r3, r1, #6
20002d20:	1ac0      	subs	r0, r0, r3
20002d22:	4152      	adcs	r2, r2
20002d24:	0943      	lsrs	r3, r0, #5
20002d26:	428b      	cmp	r3, r1
20002d28:	d301      	bcc.n	20002d2e <__divsi3+0xc6>
20002d2a:	014b      	lsls	r3, r1, #5
20002d2c:	1ac0      	subs	r0, r0, r3
20002d2e:	4152      	adcs	r2, r2
20002d30:	0903      	lsrs	r3, r0, #4
20002d32:	428b      	cmp	r3, r1
20002d34:	d301      	bcc.n	20002d3a <__divsi3+0xd2>
20002d36:	010b      	lsls	r3, r1, #4
20002d38:	1ac0      	subs	r0, r0, r3
20002d3a:	4152      	adcs	r2, r2
20002d3c:	08c3      	lsrs	r3, r0, #3
20002d3e:	428b      	cmp	r3, r1
20002d40:	d301      	bcc.n	20002d46 <__divsi3+0xde>
20002d42:	00cb      	lsls	r3, r1, #3
20002d44:	1ac0      	subs	r0, r0, r3
20002d46:	4152      	adcs	r2, r2
20002d48:	0883      	lsrs	r3, r0, #2
20002d4a:	428b      	cmp	r3, r1
20002d4c:	d301      	bcc.n	20002d52 <__divsi3+0xea>
20002d4e:	008b      	lsls	r3, r1, #2
20002d50:	1ac0      	subs	r0, r0, r3
20002d52:	4152      	adcs	r2, r2
20002d54:	0843      	lsrs	r3, r0, #1
20002d56:	428b      	cmp	r3, r1
20002d58:	d301      	bcc.n	20002d5e <__divsi3+0xf6>
20002d5a:	004b      	lsls	r3, r1, #1
20002d5c:	1ac0      	subs	r0, r0, r3
20002d5e:	4152      	adcs	r2, r2
20002d60:	1a41      	subs	r1, r0, r1
20002d62:	d200      	bcs.n	20002d66 <__divsi3+0xfe>
20002d64:	4601      	mov	r1, r0
20002d66:	4152      	adcs	r2, r2
20002d68:	4610      	mov	r0, r2
20002d6a:	4770      	bx	lr
20002d6c:	e05d      	b.n	20002e2a <__divsi3+0x1c2>
20002d6e:	0fca      	lsrs	r2, r1, #31
20002d70:	d000      	beq.n	20002d74 <__divsi3+0x10c>
20002d72:	4249      	negs	r1, r1
20002d74:	1003      	asrs	r3, r0, #32
20002d76:	d300      	bcc.n	20002d7a <__divsi3+0x112>
20002d78:	4240      	negs	r0, r0
20002d7a:	4053      	eors	r3, r2
20002d7c:	2200      	movs	r2, #0
20002d7e:	469c      	mov	ip, r3
20002d80:	0903      	lsrs	r3, r0, #4
20002d82:	428b      	cmp	r3, r1
20002d84:	d32d      	bcc.n	20002de2 <__divsi3+0x17a>
20002d86:	0a03      	lsrs	r3, r0, #8
20002d88:	428b      	cmp	r3, r1
20002d8a:	d312      	bcc.n	20002db2 <__divsi3+0x14a>
20002d8c:	22fc      	movs	r2, #252	; 0xfc
20002d8e:	0189      	lsls	r1, r1, #6
20002d90:	ba12      	rev	r2, r2
20002d92:	0a03      	lsrs	r3, r0, #8
20002d94:	428b      	cmp	r3, r1
20002d96:	d30c      	bcc.n	20002db2 <__divsi3+0x14a>
20002d98:	0189      	lsls	r1, r1, #6
20002d9a:	1192      	asrs	r2, r2, #6
20002d9c:	428b      	cmp	r3, r1
20002d9e:	d308      	bcc.n	20002db2 <__divsi3+0x14a>
20002da0:	0189      	lsls	r1, r1, #6
20002da2:	1192      	asrs	r2, r2, #6
20002da4:	428b      	cmp	r3, r1
20002da6:	d304      	bcc.n	20002db2 <__divsi3+0x14a>
20002da8:	0189      	lsls	r1, r1, #6
20002daa:	d03a      	beq.n	20002e22 <__divsi3+0x1ba>
20002dac:	1192      	asrs	r2, r2, #6
20002dae:	e000      	b.n	20002db2 <__divsi3+0x14a>
20002db0:	0989      	lsrs	r1, r1, #6
20002db2:	09c3      	lsrs	r3, r0, #7
20002db4:	428b      	cmp	r3, r1
20002db6:	d301      	bcc.n	20002dbc <__divsi3+0x154>
20002db8:	01cb      	lsls	r3, r1, #7
20002dba:	1ac0      	subs	r0, r0, r3
20002dbc:	4152      	adcs	r2, r2
20002dbe:	0983      	lsrs	r3, r0, #6
20002dc0:	428b      	cmp	r3, r1
20002dc2:	d301      	bcc.n	20002dc8 <__divsi3+0x160>
20002dc4:	018b      	lsls	r3, r1, #6
20002dc6:	1ac0      	subs	r0, r0, r3
20002dc8:	4152      	adcs	r2, r2
20002dca:	0943      	lsrs	r3, r0, #5
20002dcc:	428b      	cmp	r3, r1
20002dce:	d301      	bcc.n	20002dd4 <__divsi3+0x16c>
20002dd0:	014b      	lsls	r3, r1, #5
20002dd2:	1ac0      	subs	r0, r0, r3
20002dd4:	4152      	adcs	r2, r2
20002dd6:	0903      	lsrs	r3, r0, #4
20002dd8:	428b      	cmp	r3, r1
20002dda:	d301      	bcc.n	20002de0 <__divsi3+0x178>
20002ddc:	010b      	lsls	r3, r1, #4
20002dde:	1ac0      	subs	r0, r0, r3
20002de0:	4152      	adcs	r2, r2
20002de2:	08c3      	lsrs	r3, r0, #3
20002de4:	428b      	cmp	r3, r1
20002de6:	d301      	bcc.n	20002dec <__divsi3+0x184>
20002de8:	00cb      	lsls	r3, r1, #3
20002dea:	1ac0      	subs	r0, r0, r3
20002dec:	4152      	adcs	r2, r2
20002dee:	0883      	lsrs	r3, r0, #2
20002df0:	428b      	cmp	r3, r1
20002df2:	d301      	bcc.n	20002df8 <__divsi3+0x190>
20002df4:	008b      	lsls	r3, r1, #2
20002df6:	1ac0      	subs	r0, r0, r3
20002df8:	4152      	adcs	r2, r2
20002dfa:	d2d9      	bcs.n	20002db0 <__divsi3+0x148>
20002dfc:	0843      	lsrs	r3, r0, #1
20002dfe:	428b      	cmp	r3, r1
20002e00:	d301      	bcc.n	20002e06 <__divsi3+0x19e>
20002e02:	004b      	lsls	r3, r1, #1
20002e04:	1ac0      	subs	r0, r0, r3
20002e06:	4152      	adcs	r2, r2
20002e08:	1a41      	subs	r1, r0, r1
20002e0a:	d200      	bcs.n	20002e0e <__divsi3+0x1a6>
20002e0c:	4601      	mov	r1, r0
20002e0e:	4663      	mov	r3, ip
20002e10:	4152      	adcs	r2, r2
20002e12:	105b      	asrs	r3, r3, #1
20002e14:	4610      	mov	r0, r2
20002e16:	d301      	bcc.n	20002e1c <__divsi3+0x1b4>
20002e18:	4240      	negs	r0, r0
20002e1a:	2b00      	cmp	r3, #0
20002e1c:	d500      	bpl.n	20002e20 <__divsi3+0x1b8>
20002e1e:	4249      	negs	r1, r1
20002e20:	4770      	bx	lr
20002e22:	4663      	mov	r3, ip
20002e24:	105b      	asrs	r3, r3, #1
20002e26:	d300      	bcc.n	20002e2a <__divsi3+0x1c2>
20002e28:	4240      	negs	r0, r0
20002e2a:	b501      	push	{r0, lr}
20002e2c:	2000      	movs	r0, #0
20002e2e:	f000 f805 	bl	20002e3c <__aeabi_idiv0>
20002e32:	bd02      	pop	{r1, pc}

20002e34 <__aeabi_idivmod>:
20002e34:	2900      	cmp	r1, #0
20002e36:	d0f8      	beq.n	20002e2a <__divsi3+0x1c2>
20002e38:	e716      	b.n	20002c68 <__divsi3>
20002e3a:	4770      	bx	lr

20002e3c <__aeabi_idiv0>:
20002e3c:	4770      	bx	lr
20002e3e:	46c0      	nop			; (mov r8, r8)

20002e40 <counter>:
20002e40:	00000000 	andeq	r0, r0, r0

20002e44 <nGameObjects>:
20002e44:	00000000 	andeq	r0, r0, r0

20002e48 <lastRightValue.4092>:
20002e48:	00000000 	andeq	r0, r0, r0

20002e4c <speed.4094>:
20002e4c:	00000000 	andeq	r0, r0, r0

20002e50 <lastLeftValue.4093>:
20002e50:	00000000 	andeq	r0, r0, r0

20002e54 <monster>:
20002e54:	00000000 	andeq	r0, r0, r0

20002e58 <tempCastleBlack>:
	...

20002e64 <tempPressGray>:
	...

20002e70 <tempTitleGray>:
	...

20002e7c <castleBlack>:
20002e7c:	00000000 	andeq	r0, r0, r0

20002e80 <tempMonster>:
	...

20002e8c <pressLight>:
20002e8c:	00000000 	andeq	r0, r0, r0

20002e90 <tempTitleBlack>:
	...

20002e9c <bg>:
20002e9c:	00000000 	andeq	r0, r0, r0

20002ea0 <tempMonsterGray>:
	...

20002eac <tempTitleLight>:
	...

20002eb8 <castleLight>:
20002eb8:	00000000 	andeq	r0, r0, r0

20002ebc <tempPressLight>:
	...

20002ec8 <tempCastleLight>:
	...

20002ed4 <pressGray>:
20002ed4:	00000000 	andeq	r0, r0, r0

20002ed8 <tempMonsterLight>:
	...

20002ee4 <tempPressBlack>:
	...

20002ef0 <titleGray>:
20002ef0:	00000000 	andeq	r0, r0, r0

20002ef4 <tempCastleGray>:
	...

20002f00 <monsterLight>:
20002f00:	00000000 	andeq	r0, r0, r0

20002f04 <titleLight>:
20002f04:	00000000 	andeq	r0, r0, r0

20002f08 <castleGray>:
20002f08:	00000000 	andeq	r0, r0, r0

20002f0c <random_seed>:
20002f0c:	00000000 	andeq	r0, r0, r0

20002f10 <pressBlack>:
20002f10:	00000000 	andeq	r0, r0, r0

20002f14 <monsterGray>:
20002f14:	00000000 	andeq	r0, r0, r0

20002f18 <tempBg>:
	...

20002f24 <titleBlack>:
20002f24:	00000000 	andeq	r0, r0, r0

20002f28 <gameObjects>:
	...

200030b8 <fire1Light>:
200030b8:	00000000 	andeq	r0, r0, r0

200030bc <tempFire3Light>:
	...

200030c8 <fire3Gray>:
200030c8:	00000000 	andeq	r0, r0, r0

200030cc <tempFire4Gray>:
	...

200030d8 <fire2Image>:
	...

200030e4 <tempFire2Gray>:
	...

200030f0 <tempFireBlack>:
	...

200030fc <fire3Image>:
	...

20003108 <tempFire4Light>:
	...

20003114 <fire1Image>:
	...

20003120 <fire4Light>:
20003120:	00000000 	andeq	r0, r0, r0

20003124 <fireObj>:
	...

20003148 <fire5Image>:
	...

20003154 <fireImages>:
	...

20003190 <tempFire5Gray>:
	...

2000319c <tempFire3Gray>:
	...

200031a8 <fire4Image>:
	...

200031b4 <fire4Gray>:
200031b4:	00000000 	andeq	r0, r0, r0

200031b8 <tempFire1Light>:
	...

200031c4 <tempFire5Light>:
	...

200031d0 <fire5Gray>:
200031d0:	00000000 	andeq	r0, r0, r0

200031d4 <fire2Light>:
200031d4:	00000000 	andeq	r0, r0, r0

200031d8 <fire5Light>:
200031d8:	00000000 	andeq	r0, r0, r0

200031dc <tempFire1Gray>:
	...

200031e8 <fireBlack>:
200031e8:	00000000 	andeq	r0, r0, r0

200031ec <tempFire2Light>:
	...

200031f8 <fire3Light>:
200031f8:	00000000 	andeq	r0, r0, r0

200031fc <fire2Gray>:
200031fc:	00000000 	andeq	r0, r0, r0

20003200 <fire1Gray>:
20003200:	00000000 	andeq	r0, r0, r0

20003204 <bird4Light>:
20003204:	00000000 	andeq	r0, r0, r0

20003208 <bird1Gray>:
20003208:	00000000 	andeq	r0, r0, r0

2000320c <bird6Image>:
	...

20003218 <bird5Black>:
20003218:	00000000 	andeq	r0, r0, r0

2000321c <tempBird4Black>:
	...

20003228 <bird2Image>:
	...

20003234 <birdObj>:
	...

20003258 <bird1Image>:
	...

20003264 <bird3Black>:
20003264:	00000000 	andeq	r0, r0, r0

20003268 <bird4Gray>:
20003268:	00000000 	andeq	r0, r0, r0

2000326c <bird2Black>:
2000326c:	00000000 	andeq	r0, r0, r0

20003270 <bird1Black>:
20003270:	00000000 	andeq	r0, r0, r0

20003274 <bird4Image>:
	...

20003280 <tempBirdBlack>:
	...

2000328c <bird3Gray>:
2000328c:	00000000 	andeq	r0, r0, r0

20003290 <tempBirdGray>:
	...

2000329c <bird5Gray>:
2000329c:	00000000 	andeq	r0, r0, r0

200032a0 <tempBird5Light>:
	...

200032ac <tempBird2Gray>:
	...

200032b8 <bird3Light>:
200032b8:	00000000 	andeq	r0, r0, r0

200032bc <tempBird5Gray>:
	...

200032c8 <tempBird5Black>:
	...

200032d4 <bird5Image>:
	...

200032e0 <bird5Light>:
200032e0:	00000000 	andeq	r0, r0, r0

200032e4 <tempBird3Black>:
	...

200032f0 <bird2Gray>:
200032f0:	00000000 	andeq	r0, r0, r0

200032f4 <tempBirdLight>:
	...

20003300 <bird1Light>:
20003300:	00000000 	andeq	r0, r0, r0

20003304 <tempBird2Light>:
	...

20003310 <bird3Image>:
	...

2000331c <tempBird4Light>:
	...

20003328 <tempBird3Light>:
	...

20003334 <tempBird3Gray>:
	...

20003340 <birdImages>:
	...

20003388 <bird4Black>:
20003388:	00000000 	andeq	r0, r0, r0

2000338c <tempBird2Black>:
	...

20003398 <tempBird4Gray>:
	...

200033a4 <bird2Light>:
200033a4:	00000000 	andeq	r0, r0, r0

200033a8 <witch1Gray>:
200033a8:	00000000 	andeq	r0, r0, r0

200033ac <witch2Light>:
200033ac:	00000000 	andeq	r0, r0, r0

200033b0 <witchImages>:
	...

200033e0 <witch2Image>:
	...

200033ec <tempWitch2Black>:
	...

200033f8 <tempWitchBlack>:
	...

20003404 <tempWitch3Light>:
	...

20003410 <witch4Image>:
	...

2000341c <witch2Gray>:
2000341c:	00000000 	andeq	r0, r0, r0

20003420 <tempWitchGray>:
	...

2000342c <tempWitch3Black>:
	...

20003438 <tempWitch2Gray>:
	...

20003444 <witch3Black>:
20003444:	00000000 	andeq	r0, r0, r0

20003448 <witchObj>:
	...

2000346c <witch3Light>:
2000346c:	00000000 	andeq	r0, r0, r0

20003470 <tempWitch3Gray>:
	...

2000347c <witch1Black>:
2000347c:	00000000 	andeq	r0, r0, r0

20003480 <witch3Gray>:
20003480:	00000000 	andeq	r0, r0, r0

20003484 <witch1Image>:
	...

20003490 <tempWitchLight>:
	...

2000349c <tempWitch2Light>:
	...

200034a8 <witch1Light>:
200034a8:	00000000 	andeq	r0, r0, r0

200034ac <witch3Image>:
	...

200034b8 <witch2Black>:
200034b8:	00000000 	andeq	r0, r0, r0

200034bc <backBufferGray>:
	...

200038bc <draw_buffer_black_gray>:
	...

20003cbc <backBuffer>:
	...

200040bc <draw_buffer_black_light>:
	...

200044bc <draw_buffer_black>:
	...

200048bc <draw_buffer_black_gray_light>:
	...

20004cbc <backBufferLight>:
	...

200050bc <tempIndoorsGray>:
	...

200050c8 <tempIndoorsLight>:
	...

200050d4 <tempIndoorsBlack>:
	...

200050e0 <indoorsGray>:
200050e0:	00000000 	andeq	r0, r0, r0

200050e4 <indoorsObj>:
	...

20005108 <indoorsImages>:
	...

20005114 <indoorsBlack>:
20005114:	00000000 	andeq	r0, r0, r0

20005118 <indoorsImage>:
	...

20005124 <indoorsLight>:
20005124:	00000000 	andeq	r0, r0, r0

20005128 <indoors2Obj>:
	...

2000514c <indoors2Gray>:
2000514c:	00000000 	andeq	r0, r0, r0

20005150 <indoors2Images>:
	...

2000515c <indoors2Image>:
	...

20005168 <tempIndoors2Gray>:
	...

20005174 <indoors2Light>:
20005174:	00000000 	andeq	r0, r0, r0

20005178 <tempIndoors2Black>:
	...

20005184 <tempIndoors2Light>:
	...

20005190 <indoors2Black>:
20005190:	00000000 	andeq	r0, r0, r0

20005194 <monster_black_bits>:
	...
200051a4:	0001c000 	andeq	ip, r1, r0
200051a8:	00023000 	andeq	r3, r2, r0
200051ac:	00021000 	andeq	r1, r2, r0
200051b0:	00060800 	andeq	r0, r6, r0, lsl #16
200051b4:	00040800 	andeq	r0, r4, r0, lsl #16
200051b8:	00040800 	andeq	r0, r4, r0, lsl #16
200051bc:	00092800 	andeq	r2, r9, r0, lsl #16
200051c0:	00092800 	andeq	r2, r9, r0, lsl #16
200051c4:	00100400 	andseq	r0, r0, r0, lsl #8
200051c8:	00100400 	andseq	r0, r0, r0, lsl #8
200051cc:	00200200 	eoreq	r0, r0, r0, lsl #4
200051d0:	00661b00 	rsbeq	r1, r6, r0, lsl #22
200051d4:	0043b100 	subeq	fp, r3, r0, lsl #2
200051d8:	0080e080 	addeq	lr, r0, r0, lsl #1
200051dc:	01800080 	orreq	r0, r0, r0, lsl #1
200051e0:	01000040 	tsteq	r0, r0, asr #32
200051e4:	02000040 	andeq	r0, r0, #64	; 0x40
200051e8:	02000060 	andeq	r0, r0, #96	; 0x60
200051ec:	02000020 	andeq	r0, r0, #32
200051f0:	03ff03e0 	mvnseq	r0, #224, 6	; 0x80000003
200051f4:	0001fc00 	andeq	pc, r1, r0, lsl #24
	...

2000520c <monster_light_bits>:
	...
20005220:	00010000 	andeq	r0, r1, r0
20005224:	00018000 	andeq	r8, r1, r0
20005228:	0001f000 	andeq	pc, r1, r0
2000522c:	0001f000 	andeq	pc, r1, r0
20005230:	00009000 	andeq	r9, r0, r0
20005234:	00009000 	andeq	r9, r0, r0
20005238:	0000d000 	andeq	sp, r0, r0
2000523c:	0001f800 	andeq	pc, r1, r0, lsl #16
20005240:	0003f800 	andeq	pc, r3, r0, lsl #16
20005244:	0003fc00 	andeq	pc, r3, r0, lsl #24
20005248:	0001e400 	andeq	lr, r1, r0, lsl #8
2000524c:	00044c00 	andeq	r4, r4, r0, lsl #24
20005250:	00060c00 	andeq	r0, r6, r0, lsl #24
20005254:	0006ee00 	andeq	lr, r6, r0, lsl #28
20005258:	000ffe00 	andeq	pc, pc, r0, lsl #28
2000525c:	000f3f00 	andeq	r3, pc, r0, lsl #30
20005260:	00000780 	andeq	r0, r0, r0, lsl #15
20005264:	000003c0 	andeq	r0, r0, r0, asr #7
	...

20005284 <monster_gray_bits>:
	...
200052a4:	00020000 	andeq	r0, r2, r0
200052a8:	00000000 	andeq	r0, r0, r0
200052ac:	00040000 	andeq	r0, r4, r0
200052b0:	00060000 	andeq	r0, r6, r0
200052b4:	000e0000 	andeq	r0, lr, r0
200052b8:	000c0000 	andeq	r0, ip, r0
200052bc:	001c0000 	andseq	r0, ip, r0
200052c0:	00180000 	andseq	r0, r8, r0
200052c4:	00380000 	eorseq	r0, r8, r0
200052c8:	00780000 	rsbseq	r0, r8, r0
200052cc:	00780000 	rsbseq	r0, r8, r0
200052d0:	00f00000 	rscseq	r0, r0, r0
200052d4:	01f0c000 	mvnseq	ip, r0
200052d8:	01fff800 	mvnseq	pc, r0, lsl #16
200052dc:	01fffc00 	mvnseq	pc, r0, lsl #24
200052e0:	0000fc00 	andeq	pc, r0, r0, lsl #24
	...

200052fc <press_black_bits>:
	...
20005334:	001c0000 	andseq	r0, ip, r0
20005338:	00000000 	andeq	r0, r0, r0
2000533c:	00240000 	eoreq	r0, r4, r0
20005340:	00000000 	andeq	r0, r0, r0
20005344:	00440000 	subeq	r0, r4, r0
20005348:	00000000 	andeq	r0, r0, r0
2000534c:	c5240000 	strgt	r0, [r4, #-0]!
20005350:	00000198 	muleq	r0, r8, r1
20005354:	2b1c0000 	blcs	2070535c <firstTime.4040+0x6fca24>
20005358:	00000045 	andeq	r0, r0, r5, asr #32
2000535c:	e1040000 	mrs	r0, (UNDEF: 4)
20005360:	000000cd 	andeq	r0, r0, sp, asr #1
20005364:	21040000 	mrscs	r0, (UNDEF: 4)
20005368:	00000110 	andeq	r0, r0, r0, lsl r1
2000536c:	c1040000 	mrsgt	r0, (UNDEF: 4)
20005370:	000000cc 	andeq	r0, r0, ip, asr #1
	...
200053a0:	00000004 	andeq	r0, r0, r4
200053a4:	00000000 	andeq	r0, r0, r0
200053a8:	00000004 	andeq	r0, r0, r4
200053ac:	00000000 	andeq	r0, r0, r0
200053b0:	00000004 	andeq	r0, r0, r4
200053b4:	0494e000 	ldreq	lr, [r4], #0
200053b8:	00009334 	andeq	r9, r0, r4, lsr r3
200053bc:	04ac9000 	strteq	r9, [ip], #0
200053c0:	00009494 	muleq	r0, r4, r4
200053c4:	04a49000 	strteq	r9, [r4], #0
200053c8:	0000978c 	andeq	r9, r0, ip, lsl #15
200053cc:	04a49000 	strteq	r9, [r4], #0
200053d0:	00009094 	muleq	r0, r4, r0
200053d4:	07256000 	streq	r6, [r5, -r0]!
200053d8:	0000e324 	andeq	lr, r0, r4, lsr #6
200053dc:	04000000 	streq	r0, [r0], #-0
200053e0:	00008000 	andeq	r8, r0, r0
200053e4:	04000000 	streq	r0, [r0], #-0
200053e8:	00008000 	andeq	r8, r0, r0
200053ec:	03000000 	movweq	r0, #0
200053f0:	00006000 	andeq	r6, r0, r0
	...

20005414 <press_light_bits>:
	...
20005454:	00000200 	andeq	r0, r0, r0, lsl #4
20005458:	00000000 	andeq	r0, r0, r0
2000545c:	00000700 	andeq	r0, r0, r0, lsl #14
20005460:	00000000 	andeq	r0, r0, r0
20005464:	00000200 	andeq	r0, r0, r0, lsl #4
	...
200054a8:	00800000 	addeq	r0, r0, r0
200054ac:	00000000 	andeq	r0, r0, r0
200054b0:	01c00000 	biceq	r0, r0, r0
200054b4:	00000000 	andeq	r0, r0, r0
200054b8:	00800000 	addeq	r0, r0, r0
200054bc:	00000010 	andeq	r0, r0, r0, lsl r0
200054c0:	00000000 	andeq	r0, r0, r0
200054c4:	00000038 	andeq	r0, r0, r8, lsr r0
200054c8:	00000000 	andeq	r0, r0, r0
200054cc:	00000010 	andeq	r0, r0, r0, lsl r0
	...

2000552c <press_gray_bits>:
	...
2000556c:	00180000 	andseq	r0, r8, r0
20005570:	00000000 	andeq	r0, r0, r0
20005574:	00380000 	eorseq	r0, r8, r0
20005578:	00000000 	andeq	r0, r0, r0
2000557c:	00580000 	subseq	r0, r8, r0
20005580:	00000020 	andeq	r0, r0, r0, lsr #32
20005584:	d4200000 	strtle	r0, [r0], #-0
20005588:	0000039a 	muleq	r0, sl, r3
2000558c:	0a380000 	beq	20e05594 <firstTime.4040+0xdfcc5c>
20005590:	00000102 	andeq	r0, r0, r2, lsl #2
20005594:	c2080000 	andgt	r0, r8, #0
20005598:	00000223 	andeq	r0, r0, r3, lsr #4
2000559c:	02080000 	andeq	r0, r8, #0
200055a0:	00000311 	andeq	r0, r0, r1, lsl r3
200055a4:	c1080000 	mrsgt	r0, (UNDEF: 8)
200055a8:	000001dd 	ldrdeq	r0, [r0], -sp
	...
200055d8:	00000008 	andeq	r0, r0, r8
200055dc:	00000000 	andeq	r0, r0, r0
200055e0:	00000008 	andeq	r0, r0, r8
200055e4:	00000000 	andeq	r0, r0, r0
200055e8:	00000008 	andeq	r0, r0, r8
200055ec:	09116000 	ldmdbeq	r1, {sp, lr}
200055f0:	00012328 	andeq	r2, r1, r8, lsr #6
200055f4:	09596000 	ldmdbeq	r9, {sp, lr}^
200055f8:	00012810 	andeq	r2, r1, r0, lsl r8
200055fc:	0b492000 	bleq	2124d604 <firstTime.4040+0x1244ccc>
20005600:	00012f08 	andeq	r2, r1, r8, lsl #30
20005604:	08488000 	stmdaeq	r8, {pc}^
20005608:	00010458 	andeq	r0, r1, r8, asr r4
2000560c:	0b6be000 	bleq	21afd614 <firstTime.4040+0x1af4cdc>
20005610:	00016768 	andeq	r6, r1, r8, ror #14
20005614:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
20005618:	00010000 	andeq	r0, r1, r0
2000561c:	0c000000 	stceq	0, cr0, [r0], {-0}
20005620:	00018000 	andeq	r8, r1, r0
20005624:	06000000 	streq	r0, [r0], -r0
20005628:	0000c000 	andeq	ip, r0, r0
	...

20005644 <castle_black_bits>:
20005644:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005648:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000564c:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005650:	00000000 	andeq	r0, r0, r0
20005654:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005658:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000565c:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005660:	00000000 	andeq	r0, r0, r0
20005664:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005668:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000566c:	00000001 	andeq	r0, r0, r1
20005670:	00000000 	andeq	r0, r0, r0
20005674:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005678:	7fffffff 	svcvc	0x00ffffff
	...
20005684:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005688:	3fffffff 	svccc	0x00ffffff
	...
20005694:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005698:	1fffffff 	svcne	0x00ffffff
	...
200056a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200056a8:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
	...
200056b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200056b8:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
	...
200056c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200056c8:	01ffffff 	ldrsheq	pc, [pc, #255]	; 200057cf <castle_black_bits+0x18b>	; <UNPREDICTABLE>
	...
200056d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200056d8:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
	...
200056e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200056e8:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
	...
200056f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200056f8:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20005704:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005708:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20005714:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005718:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20005724:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005728:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
20005734:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005738:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
20005744:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005748:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20005754:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005758:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20005764:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005768:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
20005774:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005778:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20005784:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005788:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20005794:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005798:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
200057a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200057a8:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
200057ac:	04900000 	ldreq	r0, [r0], #0
200057b0:	00000000 	andeq	r0, r0, r0
200057b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200057b8:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
200057bc:	0b680000 	bleq	21a057c4 <firstTime.4040+0x19fce8c>
200057c0:	00000000 	andeq	r0, r0, r0
200057c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200057c8:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
200057cc:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
200057d0:	00000000 	andeq	r0, r0, r0
200057d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200057d8:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
200057dc:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
200057e0:	00000092 	muleq	r0, r2, r0
200057e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200057e8:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
200057ec:	04100000 	ldreq	r0, [r0], #-0
200057f0:	0000016d 	andeq	r0, r0, sp, ror #2
200057f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200057f8:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
200057fc:	04101240 	ldreq	r1, [r0], #-576	; 0xfffffdc0
20005800:	00000101 	andeq	r0, r0, r1, lsl #2
20005804:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005808:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
2000580c:	04102da0 	ldreq	r2, [r0], #-3488	; 0xfffff260
20005810:	00000101 	andeq	r0, r0, r1, lsl #2
20005814:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005818:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
2000581c:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
20005820:	00000101 	andeq	r0, r0, r1, lsl #2
20005824:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005828:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
2000582c:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
20005830:	00000101 	andeq	r0, r0, r1, lsl #2
20005834:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005838:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
2000583c:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20005840:	00000082 	andeq	r0, r0, r2, lsl #1
20005844:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005848:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
2000584c:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20005850:	00000092 	muleq	r0, r2, r0
20005854:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005858:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
2000585c:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20005860:	012400a2 	smulwbeq	r4, r2, r0
20005864:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005868:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
2000586c:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20005870:	02da00a2 	sbcseq	r0, sl, #162	; 0xa2
20005874:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005878:	00004fff 	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
2000587c:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20005880:	020200a2 	andeq	r0, r2, #162	; 0xa2
20005884:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005888:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000588c:	08081040 	stmdaeq	r8, {r6, ip}
20005890:	0202009a 	andeq	r0, r2, #154	; 0x9a
20005894:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005898:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000589c:	08082020 	stmdaeq	r8, {r5, sp}
200058a0:	01040082 	smlabbeq	r4, r2, r0, r0
200058a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200058a8:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200058ac:	48082020 	stmdami	r8, {r5, sp}
200058b0:	01040102 	tsteq	r4, r2, lsl #2
200058b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200058b8:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200058bc:	b0082020 	andlt	r2, r8, r0, lsr #32
200058c0:	01040101 	tsteq	r4, r1, lsl #2
200058c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200058c8:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200058cc:	00082220 	andeq	r2, r8, r0, lsr #4
200058d0:	01040100 	mrseq	r0, (UNDEF: 20)
200058d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200058d8:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200058dc:	00882420 	addeq	r2, r8, r0, lsr #8
200058e0:	01040100 	mrseq	r0, (UNDEF: 20)
200058e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200058e8:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200058ec:	01082420 	tsteq	r8, r0, lsr #8
200058f0:	01045a00 	tsteq	r4, r0, lsl #20
200058f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200058f8:	0000007f 	andeq	r0, r0, pc, ror r0
200058fc:	01082420 	tsteq	r8, r0, lsr #8
20005900:	0104a400 	tsteq	r4, r0, lsl #8
20005904:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005908:	00000001 	andeq	r0, r0, r1
2000590c:	010b2320 	tsteq	fp, r0, lsr #6
20005910:	01030001 	tsteq	r3, r1
20005914:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005918:	00000000 	andeq	r0, r0, r0
2000591c:	00c4c020 	sbceq	ip, r4, r0, lsr #32
20005920:	02000002 	andeq	r0, r0, #2
20005924:	3fffffff 	svccc	0x00ffffff
20005928:	00000000 	andeq	r0, r0, r0
2000592c:	00000020 	andeq	r0, r0, r0, lsr #32
20005930:	02200002 	eoreq	r0, r0, #2
20005934:	3fffffff 	svccc	0x00ffffff
20005938:	00000000 	andeq	r0, r0, r0
2000593c:	00000020 	andeq	r0, r0, r0, lsr #32
20005940:	02400002 	subeq	r0, r0, #2
20005944:	1fffffff 	svcne	0x00ffffff
20005948:	00000000 	andeq	r0, r0, r0
2000594c:	80000020 	andhi	r0, r0, r0, lsr #32
20005950:	02400001 	subeq	r0, r0, #1
20005954:	1fffffff 	svcne	0x00ffffff
20005958:	00000000 	andeq	r0, r0, r0
2000595c:	00000010 	andeq	r0, r0, r0, lsl r0
20005960:	02400000 	subeq	r0, r0, #0
20005964:	0fffffff 	svceq	0x00ffffff
20005968:	00000000 	andeq	r0, r0, r0
2000596c:	00000010 	andeq	r0, r0, r0, lsl r0
20005970:	02300000 	eorseq	r0, r0, #0
20005974:	0fffffff 	svceq	0x00ffffff
20005978:	00000000 	andeq	r0, r0, r0
2000597c:	00000010 	andeq	r0, r0, r0, lsl r0
20005980:	02000000 	andeq	r0, r0, #0
20005984:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
20005988:	00000000 	andeq	r0, r0, r0
2000598c:	00000010 	andeq	r0, r0, r0, lsl r0
20005990:	04000000 	streq	r0, [r0], #-0
20005994:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
20005998:	00000000 	andeq	r0, r0, r0
2000599c:	00000010 	andeq	r0, r0, r0, lsl r0
200059a0:	04000000 	streq	r0, [r0], #-0
200059a4:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20005aab <castle_gray_bits+0x67>	; <UNPREDICTABLE>
200059a8:	00000000 	andeq	r0, r0, r0
200059ac:	00000008 	andeq	r0, r0, r8
200059b0:	04000000 	streq	r0, [r0], #-0
200059b4:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20005abb <castle_gray_bits+0x77>	; <UNPREDICTABLE>
200059b8:	00000000 	andeq	r0, r0, r0
200059bc:	00000008 	andeq	r0, r0, r8
200059c0:	04000000 	streq	r0, [r0], #-0
200059c4:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
200059c8:	00000000 	andeq	r0, r0, r0
200059cc:	00000008 	andeq	r0, r0, r8
200059d0:	060001c0 	streq	r0, [r0], -r0, asr #3
200059d4:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
200059d8:	00000000 	andeq	r0, r0, r0
200059dc:	00000008 	andeq	r0, r0, r8
200059e0:	04000220 	streq	r0, [r0], #-544	; 0xfffffde0
200059e4:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
200059e8:	00000000 	andeq	r0, r0, r0
200059ec:	00000008 	andeq	r0, r0, r8
200059f0:	04100400 	ldreq	r0, [r0], #-1024	; 0xfffffc00
200059f4:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
200059f8:	00000000 	andeq	r0, r0, r0
200059fc:	00000008 	andeq	r0, r0, r8
20005a00:	04a00400 	strteq	r0, [r0], #1024	; 0x400
20005a04:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
20005a08:	00000000 	andeq	r0, r0, r0
20005a0c:	00000008 	andeq	r0, r0, r8
20005a10:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
20005a14:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
20005a18:	00000000 	andeq	r0, r0, r0
20005a1c:	00000008 	andeq	r0, r0, r8
20005a20:	07400400 	strbeq	r0, [r0, -r0, lsl #8]
20005a24:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20005a28:	00000000 	andeq	r0, r0, r0
20005a2c:	00000008 	andeq	r0, r0, r8
20005a30:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
20005a34:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20005a38:	00000000 	andeq	r0, r0, r0
20005a3c:	00000008 	andeq	r0, r0, r8
20005a40:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00

20005a44 <castle_gray_bits>:
	...
20005a4c:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20005a50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
20005a5c:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20005a60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
20005a6c:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20005a70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a74:	00000000 	andeq	r0, r0, r0
20005a78:	80000000 	andhi	r0, r0, r0
20005a7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a84:	00000000 	andeq	r0, r0, r0
20005a88:	c0000000 	andgt	r0, r0, r0
20005a8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005a94:	00000000 	andeq	r0, r0, r0
20005a98:	e0000000 	and	r0, r0, r0
20005a9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005aa0:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
20005aa4:	00000000 	andeq	r0, r0, r0
20005aa8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20005aac:	f3ffcfff 			; <UNDEFINED> instruction: 0xf3ffcfff
20005ab0:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
20005ab4:	00000000 	andeq	r0, r0, r0
20005ab8:	fc000000 	stc2	0, cr0, [r0], {-0}
20005abc:	f1ff8fff 			; <UNDEFINED> instruction: 0xf1ff8fff
20005ac0:	fff9ff3f 			; <UNDEFINED> instruction: 0xfff9ff3f
20005ac4:	00000000 	andeq	r0, r0, r0
20005ac8:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20005acc:	f0ff8fef 			; <UNDEFINED> instruction: 0xf0ff8fef
20005ad0:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
20005ad4:	00000000 	andeq	r0, r0, r0
20005ad8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20005adc:	e0ff87ef 	rscs	r8, pc, pc, ror #15
20005ae0:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
20005ae4:	00000000 	andeq	r0, r0, r0
20005ae8:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20005aec:	c07e07e7 	rsbsgt	r0, lr, r7, ror #15
20005af0:	ffe0fc1f 			; <UNDEFINED> instruction: 0xffe0fc1f
20005af4:	00000000 	andeq	r0, r0, r0
20005af8:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20005afc:	001c07e7 	andseq	r0, ip, r7, ror #15
20005b00:	ffe0380e 	vcmla.f32	d19, d0, d14[0], #170
20005b04:	00000000 	andeq	r0, r0, r0
20005b08:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20005b0c:	000003e3 	andeq	r0, r0, r3, ror #7
20005b10:	f7c00000 			; <UNDEFINED> instruction: 0xf7c00000
20005b14:	00000000 	andeq	r0, r0, r0
20005b18:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20005b1c:	000001c3 	andeq	r0, r0, r3, asr #3
20005b20:	e7800000 	str	r0, [r0, r0]
20005b24:	00000000 	andeq	r0, r0, r0
20005b28:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20005b2c:	00000003 	andeq	r0, r0, r3
20005b30:	c3800000 	orrgt	r0, r0, #0
20005b34:	00000000 	andeq	r0, r0, r0
20005b38:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20005b3c:	00000001 	andeq	r0, r0, r1
20005b40:	c0000000 	andgt	r0, r0, r0
20005b44:	00000000 	andeq	r0, r0, r0
20005b48:	9ff00000 	svcls	0x00f00000	; IMB
20005b4c:	00000001 	andeq	r0, r0, r1
20005b50:	80000000 	andhi	r0, r0, r0
20005b54:	00000000 	andeq	r0, r0, r0
20005b58:	8ff00000 	svchi	0x00f00000	; IMB
20005b5c:	00000000 	andeq	r0, r0, r0
20005b60:	80000000 	andhi	r0, r0, r0
20005b64:	00000000 	andeq	r0, r0, r0
20005b68:	8ff80000 	svchi	0x00f80000
	...
20005b78:	0ffc0000 	svceq	0x00fc0000
	...
20005b88:	0ffc0000 	svceq	0x00fc0000
	...
20005b98:	0ffc0000 	svceq	0x00fc0000
	...
20005ba8:	0ffc0000 	svceq	0x00fc0000
	...
20005bb8:	0ffc0000 	svceq	0x00fc0000
	...
20005bc8:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
20005bd8:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
20005be8:	07fe0000 	ldrbeq	r0, [lr, r0]!
20005bec:	03800000 	orreq	r0, r0, #0
	...
20005bf8:	03fe0000 	mvnseq	r0, #0
20005bfc:	02000000 	andeq	r0, r0, #0
	...
20005c08:	03ff0000 	mvnseq	r0, #0
20005c0c:	02000000 	andeq	r0, r0, #0
	...
20005c18:	03ff0000 	mvnseq	r0, #0
20005c1c:	02000000 	andeq	r0, r0, #0
	...
20005c28:	03ff0000 	mvnseq	r0, #0
20005c2c:	02000000 	andeq	r0, r0, #0
	...
20005c38:	03ff0000 	mvnseq	r0, #0
20005c3c:	02800c00 	addeq	r0, r0, #0, 24
20005c40:	00000060 	andeq	r0, r0, r0, rrx
20005c44:	00000000 	andeq	r0, r0, r0
20005c48:	03ff0000 	mvnseq	r0, #0
20005c4c:	03000800 	movweq	r0, #2048	; 0x800
20005c50:	00000040 	andeq	r0, r0, r0, asr #32
20005c54:	00000000 	andeq	r0, r0, r0
20005c58:	03ff0000 	mvnseq	r0, #0
20005c5c:	03000800 	movweq	r0, #2048	; 0x800
20005c60:	00000040 	andeq	r0, r0, r0, asr #32
20005c64:	00000000 	andeq	r0, r0, r0
20005c68:	03ff8000 	mvnseq	r8, #0
20005c6c:	03000a00 	movweq	r0, #2560	; 0xa00
20005c70:	00000040 	andeq	r0, r0, r0, asr #32
20005c74:	00000000 	andeq	r0, r0, r0
20005c78:	01ffb000 	mvnseq	fp, r0
20005c7c:	03000c00 	movweq	r0, #3072	; 0xc00
20005c80:	00000040 	andeq	r0, r0, r0, asr #32
20005c84:	00000000 	andeq	r0, r0, r0
20005c88:	01fff800 	mvnseq	pc, r0, lsl #16
20005c8c:	07800c00 	streq	r0, [r0, r0, lsl #24]
20005c90:	00000060 	andeq	r0, r0, r0, rrx
20005c94:	00000000 	andeq	r0, r0, r0
20005c98:	01fffc00 	mvnseq	pc, r0, lsl #24
20005c9c:	04001800 	streq	r1, [r0], #-2048	; 0xfffff800
20005ca0:	00c00058 	sbceq	r0, r0, r8, asr r0
20005ca4:	00000000 	andeq	r0, r0, r0
20005ca8:	00fffc00 	rscseq	pc, pc, r0, lsl #24
20005cac:	06001400 	streq	r1, [r0], -r0, lsl #8
20005cb0:	00c000c0 	sbceq	r0, r0, r0, asr #1
20005cb4:	00000000 	andeq	r0, r0, r0
20005cb8:	007ffc00 	rsbseq	pc, pc, r0, lsl #24
20005cbc:	45001000 	strmi	r1, [r0, #-0]
20005cc0:	008000a0 	addeq	r0, r0, r0, lsr #1
20005cc4:	00000000 	andeq	r0, r0, r0
20005cc8:	007ffe00 	rsbseq	pc, pc, r0, lsl #28
20005ccc:	80001000 	andhi	r1, r0, r0
20005cd0:	008000c1 	addeq	r0, r0, r1, asr #1
20005cd4:	00000000 	andeq	r0, r0, r0
20005cd8:	003ffe00 	eorseq	pc, pc, r0, lsl #28
20005cdc:	00001000 	andeq	r1, r0, r0
20005ce0:	00a000f0 	strdeq	r0, [r0], r0	; <UNPREDICTABLE>
20005ce4:	00000000 	andeq	r0, r0, r0
20005ce8:	003fff00 	eorseq	pc, pc, r0, lsl #30
20005cec:	00001000 	andeq	r1, r0, r0
20005cf0:	00c000e0 	sbceq	r0, r0, r0, ror #1
20005cf4:	00000000 	andeq	r0, r0, r0
20005cf8:	001fff80 	andseq	pc, pc, r0, lsl #31
20005cfc:	02001800 	andeq	r1, r0, #0, 16
20005d00:	00c000c0 	sbceq	r0, r0, r0, asr #1
20005d04:	00000000 	andeq	r0, r0, r0
20005d08:	0019fffe 			; <UNDEFINED> instruction: 0x0019fffe
20005d0c:	02001400 	andeq	r1, r0, #0, 8
20005d10:	00803000 	addeq	r3, r0, r0
20005d14:	00000000 	andeq	r0, r0, r0
20005d18:	0018ffff 			; <UNDEFINED> instruction: 0x0018ffff
20005d1c:	05033f00 	streq	r3, [r3, #-3840]	; 0xfffff100
20005d20:	01000000 	mrseq	r0, (UNDEF: 0)
20005d24:	c0000000 	andgt	r0, r0, r0
20005d28:	0008ffff 	strdeq	pc, [r8], -pc	; <UNPREDICTABLE>
20005d2c:	00c0e400 	sbceq	lr, r0, r0, lsl #8
20005d30:	01000004 	tsteq	r0, r4
20005d34:	c0000000 	andgt	r0, r0, r0
20005d38:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20005d3c:	00002000 	andeq	r2, r0, r0
20005d40:	01000008 	tsteq	r0, r8
20005d44:	e0000000 	and	r0, r0, r0
20005d48:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20005d4c:	00001000 	andeq	r1, r0, r0
20005d50:	01000006 	tsteq	r0, r6
20005d54:	e0000000 	and	r0, r0, r0
20005d58:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
20005d5c:	80000000 	andhi	r0, r0, r0
20005d60:	01800001 	orreq	r0, r0, r1
20005d64:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20005d68:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
20005d6c:	00400000 	subeq	r0, r0, r0
20005d70:	01400000 	mrseq	r0, (UNDEF: 64)
20005d74:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20005d78:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
20005d7c:	03800000 	orreq	r0, r0, #0
20005d80:	01300000 	teqeq	r0, r0
20005d84:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20005d88:	00001bff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
20005d8c:	10e00000 	rscne	r0, r0, r0
20005d90:	03000000 	movweq	r0, #0
20005d94:	fc000000 	stc2	0, cr0, [r0], {-0}
20005d98:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005d9c:	0f800000 	svceq	0x00800000
20005da0:	03900000 	orrseq	r0, r0, #0
20005da4:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20005da8:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005dac:	00000000 	andeq	r0, r0, r0
20005db0:	03e00000 	mvneq	r0, #0
20005db4:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20005db8:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005dbc:	00000000 	andeq	r0, r0, r0
20005dc0:	03f40000 	mvnseq	r0, #0
20005dc4:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20005dc8:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005dcc:	00002000 	andeq	r2, r0, r0
20005dd0:	01f80000 	mvnseq	r0, r0
20005dd4:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20005dd8:	0000007f 	andeq	r0, r0, pc, ror r0
20005ddc:	0010c000 	andseq	ip, r0, r0
20005de0:	03f80000 	mvnseq	r0, #0
20005de4:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20005de8:	0000003f 	andeq	r0, r0, pc, lsr r0
20005dec:	000f0000 	andeq	r0, pc, r0
20005df0:	03e000e0 	mvneq	r0, #224	; 0xe0
20005df4:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20005df8:	0000001f 	andeq	r0, r0, pc, lsl r0
20005dfc:	00026000 	andeq	r6, r2, r0
20005e00:	035001f0 	cmpeq	r0, #240, 2	; 0x3c
20005e04:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20005e08:	0000001f 	andeq	r0, r0, pc, lsl r0
20005e0c:	00118000 	andseq	r8, r1, r0
20005e10:	03ec01f0 	mvneq	r0, #240, 2	; 0x3c
20005e14:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
20005e18:	0000000f 	andeq	r0, r0, pc
20005e1c:	200e0000 	andcs	r0, lr, r0
20005e20:	00a022f0 	strdeq	r2, [r0], r0	; <UNPREDICTABLE>
20005e24:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
20005e28:	00000007 	andeq	r0, r0, r7
20005e2c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
20005e30:	03c0c170 	biceq	ip, r0, #112, 2
20005e34:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
20005e38:	00000003 	andeq	r0, r0, r3
20005e3c:	e4000000 	str	r0, [r0], #-0
20005e40:	03c270f3 	biceq	r7, r2, #243	; 0xf3

20005e44 <castle_light_bits>:
	...
20005ea0:	00000040 	andeq	r0, r0, r0, asr #32
	...
20005eac:	0c003000 	stceq	0, cr3, [r0], {-0}
20005eb0:	00000040 	andeq	r0, r0, r0, asr #32
	...
20005ebc:	0e007000 	cdpeq	0, 0, cr7, cr0, cr0, {0}
20005ec0:	000600c0 	andeq	r0, r6, r0, asr #1
	...
20005ecc:	0f007010 	svceq	0x00007010
20005ed0:	000601e0 	andeq	r0, r6, r0, ror #3
	...
20005edc:	1f007810 	svcne	0x00007810
20005ee0:	000601e0 	andeq	r0, r6, r0, ror #3
	...
20005eec:	3f81f818 	svccc	0x0081f818
20005ef0:	001f03e0 	andseq	r0, pc, r0, ror #7
	...
20005efc:	ffe3f818 			; <UNDEFINED> instruction: 0xffe3f818
20005f00:	001fc7f1 			; <UNDEFINED> instruction: 0x001fc7f1
	...
20005f0c:	fffffc1c 			; <UNDEFINED> instruction: 0xfffffc1c
20005f10:	083fffff 	ldmdaeq	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
	...
20005f1c:	fffffe3c 			; <UNDEFINED> instruction: 0xfffffe3c
20005f20:	187fffff 	ldmdane	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
	...
20005f2c:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20005f30:	3c7fffff 	ldclcc	15, cr15, [pc], #-1020	; 20005b3c <castle_gray_bits+0xf8>
	...
20005f3c:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20005f40:	3fffffff 	svccc	0x00ffffff
20005f44:	00000000 	andeq	r0, r0, r0
20005f48:	60000000 	andvs	r0, r0, r0
20005f4c:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20005f50:	7fffffff 	svcvc	0x00ffffff
20005f54:	00000000 	andeq	r0, r0, r0
20005f58:	70000000 	andvc	r0, r0, r0
20005f5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005f60:	7fffffff 	svcvc	0x00ffffff
20005f64:	00000000 	andeq	r0, r0, r0
20005f68:	70000000 	andvc	r0, r0, r0
20005f6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005f70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005f74:	00000000 	andeq	r0, r0, r0
20005f78:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20005f7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005f80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005f84:	00000000 	andeq	r0, r0, r0
20005f88:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20005f8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005f90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005f94:	00000000 	andeq	r0, r0, r0
20005f98:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20005f9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005fa0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005fa4:	00000000 	andeq	r0, r0, r0
20005fa8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20005fac:	fb6fffff 	blx	21c05fb2 <firstTime.4040+0x1bfd67a>
20005fb0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005fb4:	00000000 	andeq	r0, r0, r0
20005fb8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20005fbc:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
20005fc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005fc4:	00000000 	andeq	r0, r0, r0
20005fc8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20005fcc:	f407ffff 			; <UNDEFINED> instruction: 0xf407ffff
20005fd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005fd4:	00000000 	andeq	r0, r0, r0
20005fd8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20005fdc:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
20005fe0:	ffffff6d 			; <UNDEFINED> instruction: 0xffffff6d
20005fe4:	00000000 	andeq	r0, r0, r0
20005fe8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20005fec:	f80fffff 			; <UNDEFINED> instruction: 0xf80fffff
20005ff0:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20005ff4:	00000000 	andeq	r0, r0, r0
20005ff8:	fc000000 	stc2	0, cr0, [r0], {-0}
20005ffc:	f80fedbf 			; <UNDEFINED> instruction: 0xf80fedbf
20006000:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20006004:	00000000 	andeq	r0, r0, r0
20006008:	fc000000 	stc2	0, cr0, [r0], {-0}
2000600c:	f80fc01f 			; <UNDEFINED> instruction: 0xf80fc01f
20006010:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
20006014:	00000000 	andeq	r0, r0, r0
20006018:	fc000000 	stc2	0, cr0, [r0], {-0}
2000601c:	f90fc81f 			; <UNDEFINED> instruction: 0xf90fc81f
20006020:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
20006024:	00000000 	andeq	r0, r0, r0
20006028:	fc000000 	stc2	0, cr0, [r0], {-0}
2000602c:	f90fd41f 			; <UNDEFINED> instruction: 0xf90fd41f
20006030:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20006034:	00000000 	andeq	r0, r0, r0
20006038:	fc000000 	stc2	0, cr0, [r0], {-0}
2000603c:	f90fe03f 			; <UNDEFINED> instruction: 0xf90fe03f
20006040:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
20006044:	00000000 	andeq	r0, r0, r0
20006048:	fc000000 	stc2	0, cr0, [r0], {-0}
2000604c:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
20006050:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
20006054:	00000000 	andeq	r0, r0, r0
20006058:	fc000000 	stc2	0, cr0, [r0], {-0}
2000605c:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
20006060:	fedbff19 	mrc2	15, 6, pc, cr11, cr9, {0}
20006064:	00000000 	andeq	r0, r0, r0
20006068:	fc000000 	stc2	0, cr0, [r0], {-0}
2000606c:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
20006070:	fd01ff11 	stc2	15, cr15, [r1, #-68]	; 0xffffffbc
20006074:	00000000 	andeq	r0, r0, r0
20006078:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
2000607c:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
20006080:	fd01ff19 	stc2	15, cr15, [r1, #-100]	; 0xffffff9c
20006084:	00000000 	andeq	r0, r0, r0
20006088:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
2000608c:	f007e03f 			; <UNDEFINED> instruction: 0xf007e03f
20006090:	fc01ff01 	stc2	15, cr15, [r1], {1}
20006094:	00000000 	andeq	r0, r0, r0
20006098:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
2000609c:	f007c01f 			; <UNDEFINED> instruction: 0xf007c01f
200060a0:	fe03ff01 	cdp2	15, 0, cr15, cr3, cr1, {0}
200060a4:	00000000 	andeq	r0, r0, r0
200060a8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
200060ac:	b007c01f 	andlt	ip, r7, pc, lsl r0
200060b0:	fe03fe01 	cdp2	14, 0, cr15, cr3, cr1, {0}
200060b4:	00000000 	andeq	r0, r0, r0
200060b8:	ff800000 			; <UNDEFINED> instruction: 0xff800000
200060bc:	0007c01f 	andeq	ip, r7, pc, lsl r0
200060c0:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
200060c4:	00000000 	andeq	r0, r0, r0
200060c8:	ff800000 			; <UNDEFINED> instruction: 0xff800000
200060cc:	0007c01f 	andeq	ip, r7, pc, lsl r0
200060d0:	fe03fe10 	mcr2	14, 0, pc, cr3, cr0, {0}	; <UNPREDICTABLE>
200060d4:	00000000 	andeq	r0, r0, r0
200060d8:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
200060dc:	0007c21f 	andeq	ip, r7, pc, lsl r2
200060e0:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
200060e4:	00000000 	andeq	r0, r0, r0
200060e8:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
200060ec:	0087c31f 	addeq	ip, r7, pc, lsl r3
200060f0:	fe03a400 	cdp2	4, 0, cr10, cr3, cr0, {0}
200060f4:	00000000 	andeq	r0, r0, r0
200060f8:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
200060fc:	00c7c31f 	sbceq	ip, r7, pc, lsl r3
20006100:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
20006104:	00000000 	andeq	r0, r0, r0
20006108:	ffe60000 			; <UNDEFINED> instruction: 0xffe60000
2000610c:	00c4c01f 	sbceq	ip, r4, pc, lsl r0
20006110:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20006114:	00000000 	andeq	r0, r0, r0
20006118:	ffe70000 			; <UNDEFINED> instruction: 0xffe70000
2000611c:	8000001f 	andhi	r0, r0, pc, lsl r0
20006120:	fc000001 	stc2	0, cr0, [r0], {1}
20006124:	00000000 	andeq	r0, r0, r0
20006128:	fff70000 			; <UNDEFINED> instruction: 0xfff70000
2000612c:	8000001f 	andhi	r0, r0, pc, lsl r0
20006130:	fc000009 	stc2	0, cr0, [r0], {9}
20006134:	00000000 	andeq	r0, r0, r0
20006138:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
2000613c:	8000001f 	andhi	r0, r0, pc, lsl r0
20006140:	fc200001 	stc2	0, cr0, [r0], #-4
20006144:	00000000 	andeq	r0, r0, r0
20006148:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
2000614c:	0000001f 	andeq	r0, r0, pc, lsl r0
20006150:	fc300000 	ldc2	0, cr0, [r0], #-0
20006154:	00000000 	andeq	r0, r0, r0
20006158:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
2000615c:	0000000f 	andeq	r0, r0, pc
20006160:	fc300000 	ldc2	0, cr0, [r0], #-0
20006164:	00000000 	andeq	r0, r0, r0
20006168:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
2000616c:	0000000f 	andeq	r0, r0, pc
20006170:	fc000000 	stc2	0, cr0, [r0], {-0}
20006174:	00000000 	andeq	r0, r0, r0
20006178:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
2000617c:	1000000f 	andne	r0, r0, pc
20006180:	fc000000 	stc2	0, cr0, [r0], {-0}
20006184:	00000000 	andeq	r0, r0, r0
20006188:	ffffe400 			; <UNDEFINED> instruction: 0xffffe400
2000618c:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
20006190:	f8080000 			; <UNDEFINED> instruction: 0xf8080000
20006194:	00000000 	andeq	r0, r0, r0
20006198:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
2000619c:	0000000f 	andeq	r0, r0, pc
200061a0:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200061a4:	00000000 	andeq	r0, r0, r0
200061a8:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200061ac:	00000007 	andeq	r0, r0, r7
200061b0:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
200061b4:	00000000 	andeq	r0, r0, r0
200061b8:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
200061bc:	00000007 	andeq	r0, r0, r7
200061c0:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
200061c4:	00000000 	andeq	r0, r0, r0
200061c8:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
200061cc:	00100007 	andseq	r0, r0, r7
200061d0:	f8040000 			; <UNDEFINED> instruction: 0xf8040000
200061d4:	00000000 	andeq	r0, r0, r0
200061d8:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
200061dc:	00080007 	andeq	r0, r8, r7
200061e0:	f80001c0 			; <UNDEFINED> instruction: 0xf80001c0
200061e4:	00000000 	andeq	r0, r0, r0
200061e8:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
200061ec:	00000007 	andeq	r0, r0, r7
200061f0:	f8080300 			; <UNDEFINED> instruction: 0xf8080300
200061f4:	00000000 	andeq	r0, r0, r0
200061f8:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
200061fc:	00200007 	eoreq	r0, r0, r7
20006200:	f8080200 			; <UNDEFINED> instruction: 0xf8080200
20006204:	00000000 	andeq	r0, r0, r0
20006208:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
2000620c:	00000007 	andeq	r0, r0, r7
20006210:	f8000200 			; <UNDEFINED> instruction: 0xf8000200
20006214:	00000000 	andeq	r0, r0, r0
20006218:	fffffff0 			; <UNDEFINED> instruction: 0xfffffff0
2000621c:	00000007 	andeq	r0, r0, r7
20006220:	f8000100 			; <UNDEFINED> instruction: 0xf8000100
20006224:	00000000 	andeq	r0, r0, r0
20006228:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
2000622c:	01000007 	tsteq	r0, r7
20006230:	f8100280 			; <UNDEFINED> instruction: 0xf8100280
20006234:	00000000 	andeq	r0, r0, r0
20006238:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
2000623c:	02000007 	andeq	r0, r0, #7
20006240:	f8000300 			; <UNDEFINED> instruction: 0xf8000300

20006244 <title_light_bits>:
	...
20006260:	00000400 	andeq	r0, r0, r0, lsl #8
20006264:	30000000 	andcc	r0, r0, r0
20006268:	f80f9e06 			; <UNDEFINED> instruction: 0xf80f9e06
2000626c:	06300000 	ldrteq	r0, [r0], -r0
20006270:	00cb8cba 	strheq	r8, [fp], #202	; 0xca
20006274:	ba033000 	blt	200d227c <firstTime.4040+0xc9944>
20006278:	0000eb4f 	andeq	lr, r0, pc, asr #22
2000627c:	439ef3f0 	orrsmi	pc, lr, #240, 6	; 0xc0000003
20006280:	f000003a 			; <UNDEFINED> instruction: 0xf000003a
20006284:	5a478e9b 	bpl	211e9cf8 <firstTime.4040+0x11e13c0>
20006288:	9b300000 	blls	20c06290 <firstTime.4040+0xbfd958>
2000628c:	019bcd36 	orrseq	ip, fp, r6, lsr sp
20006290:	66db3000 	ldrbvs	r3, [fp], r0
20006294:	000319d9 	ldrdeq	r1, [r3], -r9
20006298:	19667330 	stmdbne	r6!, {r4, r5, r8, r9, ip, sp, lr}^
2000629c:	30000310 	andcc	r0, r0, r0, lsl r3
200062a0:	00000001 	andeq	r0, r0, r1
200062a4:	80000000 	andhi	r0, r0, r0
200062a8:	001d3e7b 	andseq	r3, sp, fp, ror lr
200062ac:	0ac00000 	beq	1f0062b4 <startup-0xff9d4c>
200062b0:	00000528 	andeq	r0, r0, r8, lsr #10
200062b4:	ec3a4000 	ldc	0, cr4, [sl], #-0
200062b8:	0000000d 	andeq	r0, r0, sp
200062bc:	05240bc0 	streq	r0, [r4, #-3008]!	; 0xfffff440
200062c0:	00f00000 	rscseq	r0, r0, r0
200062c4:	001c0000 	andseq	r0, ip, r0
200062c8:	03ebb000 	mvneq	fp, #0
200062cc:	00000000 	andeq	r0, r0, r0
200062d0:	0c032330 	stceq	3, cr2, [r3], {48}	; 0x30
200062d4:	300123e4 	andcc	r2, r1, r4, ror #7
200062d8:	940c1b2a 	strls	r1, [ip], #-2858	; 0xfffff4d6
200062dc:	ea300120 	b	20c06764 <firstTime.4040+0xbfde2c>
200062e0:	ec860c3d 	stc	12, cr0, [r6], {61}	; 0x3d
200062e4:	06ea3001 	strbteq	r3, [sl], r1
200062e8:	01e69648 	mvneq	r9, r8, asr #12
200062ec:	4b9e6b30 	blmi	1e7a0fb4 <startup-0x185f04c>
200062f0:	30012696 	mulcc	r1, r6, r6
200062f4:	92bbb06b 	adcsls	fp, fp, #107	; 0x6b
200062f8:	69f00126 	ldmibvs	r0!, {r1, r2, r5, r8}^
200062fc:	2691b832 			; <UNDEFINED> instruction: 0x2691b832
20006300:	1e687001 	cdpne	0, 6, cr7, cr8, cr1, {0}
20006304:	010e9110 	tsteq	lr, r0, lsl r1
	...

20006318 <title_gray_bits>:
	...
20006320:	40000000 	andmi	r0, r0, r0
20006324:	0f840000 	svceq	0x00840000
20006328:	00b0c3fe 	ldrshteq	ip, [r0], lr
2000632c:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20006330:	001f8f1f 	andseq	r8, pc, pc, lsl pc	; <UNPREDICTABLE>
20006334:	fffffbf8 			; <UNDEFINED> instruction: 0xfffffbf8
20006338:	c8001fff 	stmdagt	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
2000633c:	07f061f9 			; <UNDEFINED> instruction: 0x07f061f9
20006340:	f1cc001f 			; <UNDEFINED> instruction: 0xf1cc001f
20006344:	be347305 	cdplt	3, 3, cr7, cr4, cr5, {0}
20006348:	05f0ce00 	ldrbeq	ip, [r0, #3584]!	; 0xe00
2000634c:	007e1430 	rsbseq	r1, lr, r0, lsr r4
20006350:	2041080f 	subcs	r0, r1, pc, lsl #16
20006354:	0e003e01 	cdpeq	14, 0, cr3, cr0, cr1, {0}
20006358:	01384060 	teqeq	r8, r0, rrx
2000635c:	600c001e 	andvs	r0, ip, lr, lsl r0
20006360:	1c4030c0 	mcrrne	0, 12, r3, r0, cr0
20006364:	10208c00 	eorne	r8, r0, r0, lsl #24
20006368:	0038c024 	eorseq	ip, r8, r4, lsr #32
2000636c:	0411088c 	ldreq	r0, [r1], #-2188	; 0xfffff774
20006370:	c800f8ce 	stmdagt	r0, {r1, r2, r3, r6, r7, fp, ip, sp, lr, pc}
20006374:	ffe6990c 			; <UNDEFINED> instruction: 0xffe6990c
20006378:	7cfa0178 	ldfvce	f0, [sl], #480	; 0x1e0
2000637c:	3fe0c184 	svccc	0x00e0c184
20006380:	013ff400 	teqeq	pc, r0, lsl #8	; <UNPREDICTABLE>
20006384:	001fc0c7 	andseq	ip, pc, r7, asr #1
20006388:	03c03ff0 	biceq	r3, r0, #240, 30	; 0x3c0
2000638c:	fc0007e0 	stc2	7, cr0, [r0], {224}	; 0xe0
20006390:	e003803f 	and	r8, r3, pc, lsr r0
20006394:	7f0c009f 	svcvc	0x000c009f
20006398:	ffc1fbe4 			; <UNDEFINED> instruction: 0xffc1fbe4
2000639c:	fc140c03 	ldc2	12, cr0, [r4], {3}
200063a0:	03ffc7ff 	mvnseq	ip, #66846720	; 0x3fc0000
200063a4:	f3fc1c0c 	vdup.32	d17, d12[1]
200063a8:	0e02dc1b 	mcreq	12, 0, sp, cr2, cr11, {0}
200063ac:	63f3e490 	mvnsvs	lr, #144, 8	; 0x90000000
200063b0:	018e0218 	orreq	r0, lr, r8, lsl r2
200063b4:	1251e382 	subsne	lr, r1, #134217730	; 0x8000002
200063b8:	88018e02 	stmdahi	r1, {r1, r9, sl, fp, pc}
200063bc:	020061a7 	andeq	r6, r0, #-1073741783	; 0xc0000029
200063c0:	2460008e 	strbtcs	r0, [r0], #-142	; 0xffffff72
200063c4:	8e021041 	cdphi	0, 0, cr1, cr2, cr1, {2}
200063c8:	41000300 	mrsmi	r0, LR_irq
200063cc:	000e0290 	muleq	lr, r0, r2
200063d0:	9048008d 	subls	r0, r8, sp, lsl #1
200063d4:	81040c02 	tsthi	r4, r2, lsl #24
200063d8:	02a04c87 	adceq	r4, r0, #34560	; 0x8700
200063dc:	cffffffc 	svcgt	0x00fffffc
200063e0:	8203e2fc 	andhi	lr, r3, #252, 4	; 0xc000000f
200063e4:	e3f81c07 	mvns	r1, #1792	; 0x700
200063e8:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

200063ec <title_black_bits>:
	...
20006414:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
20006418:	01000040 	tsteq	r0, r0, asr #32
2000641c:	400c0000 	andmi	r0, ip, r0
20006420:	00010080 	andeq	r0, r1, r0, lsl #1
20006424:	9c200400 	cfstrsls	mvf0, [r0], #-0
20006428:	000001c4 	andeq	r0, r0, r4, asr #3
2000642c:	a4803104 	strge	r3, [r0], #260	; 0x104
20006430:	04c00001 	strbeq	r0, [r0], #1
20006434:	02240209 	eoreq	r0, r4, #-1879048192	; 0x90000000
20006438:	89044000 	stmdbhi	r4, {lr}
2000643c:	00042602 	andeq	r2, r4, r2, lsl #12
20006440:	e2888440 	add	r8, r8, #64, 8	; 0x40000000
20006444:	00000421 	andeq	r0, r0, r1, lsr #8
20006448:	001966f2 			; <UNDEFINED> instruction: 0x001966f2
2000644c:	03000007 	movweq	r0, #7
20006450:	00020000 	andeq	r0, r2, r0
20006454:	f4000000 	vst4.8	{d0-d3}, [r0], r0
20006458:	00003a10 	andeq	r3, r0, r0, lsl sl
2000645c:	10058000 	andne	r8, r5, r0
20006460:	00000012 	andeq	r0, r0, r2, lsl r0
20006464:	1ad87400 	bne	1f62346c <startup-0x9dcb94>
20006468:	80000000 	andhi	r0, r0, r0
2000646c:	0022041b 	eoreq	r0, r2, fp, lsl r4
20006470:	00004000 	andeq	r4, r0, r0
20006474:	00003800 	andeq	r3, r0, r0, lsl #16
20006478:	0000c0c0 	andeq	ip, r0, r0, asr #1
2000647c:	c0000000 	andgt	r0, r0, r0
20006480:	08000045 	stmdaeq	r0, {r0, r2, r6}
20006484:	144000c7 	strbne	r0, [r0], #-199	; 0xffffff39
20006488:	01281040 			; <UNDEFINED> instruction: 0x01281040
2000648c:	71144000 	tstvc	r4, r0
20006490:	00190810 	andseq	r0, r9, r0, lsl r8
20006494:	90019440 	andls	r9, r1, r0, asr #8
20006498:	4000c928 	andmi	ip, r0, r8, lsr #18
2000649c:	2c444c94 	mcrrcs	12, 9, r4, r4, cr4
200064a0:	96000049 	strls	r0, [r0], -r9, asr #32
200064a4:	49264740 	stmdbmi	r6!, {r6, r8, r9, sl, lr}
200064a8:	60938000 	addsvs	r8, r3, r0
200064ac:	00512268 	subseq	r2, r1, r8, ror #4
200064b0:	30000000 	andcc	r0, r0, r0
200064b4:	00001d03 	andeq	r1, r0, r3, lsl #26
	...

200064c0 <bg_bits>:
	...
200064d0:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
200064d4:	0000001f 	andeq	r0, r0, pc, lsl r0
	...
200064e0:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
200064e4:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
200064f0:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
200064f4:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
	...
20006500:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20006504:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
	...
20006510:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20006514:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
20006520:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20006524:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20006530:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
20006534:	01ffffff 	ldrsheq	pc, [pc, #255]	; 2000663b <bg_bits+0x17b>	; <UNPREDICTABLE>
20006538:	0001f000 	andeq	pc, r1, r0
2000653c:	00000000 	andeq	r0, r0, r0
20006540:	007fe000 	rsbseq	lr, pc, r0
20006544:	0ffffffe 	svceq	0x00fffffe
20006548:	0003f800 	andeq	pc, r3, r0, lsl #16
2000654c:	00000000 	andeq	r0, r0, r0
20006550:	003fe000 	eorseq	lr, pc, r0
20006554:	7fffffc0 	svcvc	0x00ffffc0
20006558:	0003f800 	andeq	pc, r3, r0, lsl #16
2000655c:	001f8000 	andseq	r8, pc, r0
20006560:	001fe000 	andseq	lr, pc, r0
20006564:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20006568:	0003f801 	andeq	pc, r3, r1, lsl #16
2000656c:	003fc000 	eorseq	ip, pc, r0
20006570:	003fe000 	eorseq	lr, pc, r0
20006574:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
20006578:	3f83f807 	svccc	0x0083f807
2000657c:	003fe000 	eorseq	lr, pc, r0
20006580:	01ffe000 	mvnseq	lr, r0
20006584:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20006588:	7fc3f80f 	svcvc	0x00c3f80f
2000658c:	003fe7f8 	ldrshteq	lr, [pc], -r8
20006590:	07ffe000 	ldrbeq	lr, [pc, r0]!
20006594:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
20006598:	7fe1f01f 	svcvc	0x00e1f01f
2000659c:	003ffffc 	ldrshteq	pc, [pc], -ip	; <UNPREDICTABLE>
200065a0:	3fffc000 	svccc	0x00ffc000
200065a4:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
200065a8:	7ff0003f 	svcvc	0x00f0003f
200065ac:	007ffffc 	ldrshteq	pc, [pc], #-252	; <UNPREDICTABLE>
200065b0:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
200065b4:	ff000000 			; <UNDEFINED> instruction: 0xff000000
200065b8:	7ff8007f 	svcvc	0x00f8007f
200065bc:	3ffffffc 	svccc	0x00fffffc
200065c0:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
200065c4:	f8000003 			; <UNDEFINED> instruction: 0xf8000003
200065c8:	7ffc00ff 	svcvc	0x00fc00ff
200065cc:	7ffffffc 	svcvc	0x00fffffc
200065d0:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200065d4:	e000000f 	and	r0, r0, pc
200065d8:	7ffe01ff 	svcvc	0x00fe01ff
200065dc:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
200065e0:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
200065e4:	8000001f 	andhi	r0, r0, pc, lsl r0
200065e8:	7fff01ff 	svcvc	0x00ff01ff
200065ec:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
200065f0:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
200065f4:	0000007f 	andeq	r0, r0, pc, ror r0
200065f8:	7fff83ff 	svcvc	0x00ff83ff
200065fc:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
20006600:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20006604:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006608:	7fffc3fe 	svcvc	0x00ffc3fe
2000660c:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
20006610:	fc7ffff0 	ldc2l	15, cr15, [pc], #-960	; 20006258 <title_light_bits+0x14>
20006614:	07c001ff 			; <UNDEFINED> instruction: 0x07c001ff
20006618:	7fffe7fc 	svcvc	0x00ffe7fc
2000661c:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
20006620:	f0fffffe 			; <UNDEFINED> instruction: 0xf0fffffe
20006624:	0fe007ff 	svceq	0x00e007ff
20006628:	7ffff7fc 	svcvc	0x00fff7fc
2000662c:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
20006630:	c0ffffff 	ldrshtgt	pc, [pc], #255	; <UNPREDICTABLE>
20006634:	0fe00fff 	svceq	0x00e00fff
20006638:	7ffffff8 	svcvc	0x00fffff8
2000663c:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20006640:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20006747 <bg_bits+0x287>	; <UNPREDICTABLE>
20006644:	0fe01fff 	svceq	0x00e01fff
20006648:	7ffffff8 	svcvc	0x00fffff8
2000664c:	7ffffc00 	svcvc	0x00fffc00
20006650:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20006757 <bg_bits+0x297>	; <UNPREDICTABLE>
20006654:	0fe03ffe 	svceq	0x00e03ffe
20006658:	3fdffff0 	svccc	0x00dffff0
2000665c:	3ffffe00 	svccc	0x00fffe00
20006660:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20006767 <bg_bits+0x2a7>	; <UNPREDICTABLE>
20006664:	0fe03ff8 	svceq	0x00e03ff8
20006668:	3fe7fff0 	svccc	0x00e7fff0
2000666c:	07fffe00 	ldrbeq	pc, [pc, r0, lsl #28]!	; <UNPREDICTABLE>
20006670:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
20006674:	07c07ff0 			; <UNDEFINED> instruction: 0x07c07ff0
20006678:	1fe7fff0 	svcne	0x00e7fff0
2000667c:	0ffffe00 	svceq	0x00fffe00
20006680:	03fc00ff 	mvnseq	r0, #255	; 0xff
20006684:	0000ffe0 	andeq	pc, r0, r0, ror #31
20006688:	1ff3ffe0 	svcne	0x00f3ffe0
2000668c:	1ffffe00 	svcne	0x00fffe00
20006690:	03fc001f 	mvnseq	r0, #31
20006694:	0001ff80 	andeq	pc, r1, r0, lsl #31
20006698:	1ff9ffe0 	svcne	0x00f9ffe0
2000669c:	3ffffe00 	svccc	0x00fffe00
200066a0:	03fc0007 	mvnseq	r0, #7
200066a4:	0001ff80 	andeq	pc, r1, r0, lsl #31
200066a8:	0ffcffe0 	svceq	0x00fcffe0
200066ac:	3ffdfe00 	svccc	0x00fdfe00
200066b0:	07f80007 	ldrbeq	r0, [r8, r7]!
200066b4:	0003ff00 	andeq	pc, r3, r0, lsl #30
200066b8:	0ffe7ff0 	svceq	0x00fe7ff0
200066bc:	3ffcfe00 	svccc	0x00fcfe00
200066c0:	07f80003 	ldrbeq	r0, [r8, r3]!
200066c4:	0007fe00 	andeq	pc, r7, r0, lsl #28
200066c8:	07fe7ff8 			; <UNDEFINED> instruction: 0x07fe7ff8
200066cc:	3ff8fe00 	svccc	0x00f8fe00
200066d0:	0ff80003 	svceq	0x00f80003
200066d4:	0007fc00 	andeq	pc, r7, r0, lsl #24
200066d8:	03fffffc 	mvnseq	pc, #252, 30	; 0x3f0
200066dc:	3ff87c00 	svccc	0x00f87c00
200066e0:	0ff80003 	svceq	0x00f80003
200066e4:	0007fc00 	andeq	pc, r7, r0, lsl #24
200066e8:	01fffffe 	ldrsheq	pc, [pc, #254]	; 200067ee <bg_bits+0x32e>	; <UNPREDICTABLE>
200066ec:	1ff00000 	svcne	0x00f00000	; IMB
200066f0:	0ff00007 	svceq	0x00f00007
200066f4:	000ff800 	andeq	pc, pc, r0, lsl #16
200066f8:	01ffffff 	ldrsheq	pc, [pc, #255]	; 200067ff <bg_bits+0x33f>	; <UNPREDICTABLE>
200066fc:	07f0003e 			; <UNDEFINED> instruction: 0x07f0003e
20006700:	0ff00007 	svceq	0x00f00007
20006704:	800ff000 	andhi	pc, pc, r0
20006708:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
2000670c:	03e0007f 	mvneq	r0, #127	; 0x7f
20006710:	0fe00007 	svceq	0x00e00007
20006714:	c00ff000 	andgt	pc, pc, r0
20006718:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
2000671c:	0000007f 	andeq	r0, r0, pc, ror r0
20006720:	0fe00007 	svceq	0x00e00007
20006724:	e00ff000 	and	pc, pc, r0
20006728:	007ffeff 	ldrshteq	pc, [pc], #-239	; <UNPREDICTABLE>
2000672c:	0000007f 	andeq	r0, r0, pc, ror r0
20006730:	0fe00007 	svceq	0x00e00007
20006734:	f00ff000 			; <UNDEFINED> instruction: 0xf00ff000
20006738:	003ffe7f 	eorseq	pc, pc, pc, ror lr	; <UNPREDICTABLE>
2000673c:	0000007f 	andeq	r0, r0, pc, ror r0
20006740:	0fe00007 	svceq	0x00e00007
20006744:	f80ff000 			; <UNDEFINED> instruction: 0xf80ff000
20006748:	001ffc3f 	andseq	pc, pc, pc, lsr ip	; <UNPREDICTABLE>
2000674c:	0000007f 	andeq	r0, r0, pc, ror r0
20006750:	1fe0000f 	svcne	0x00e0000f
20006754:	fc0ff000 	stc2	0, cr15, [pc], {-0}
20006758:	000ff81f 	andeq	pc, pc, pc, lsl r8	; <UNPREDICTABLE>
2000675c:	0000003e 	andeq	r0, r0, lr, lsr r0
20006760:	1fe0000f 	svcne	0x00e0000f
20006764:	fc07f000 	stc2	0, cr15, [r7], {-0}
20006768:	0007f00f 	andeq	pc, r7, pc
2000676c:	00000000 	andeq	r0, r0, r0
20006770:	1fe0000f 	svcne	0x00e0000f
20006774:	fc07f000 	stc2	0, cr15, [r7], {-0}
20006778:	00000007 	andeq	r0, r0, r7
2000677c:	00000000 	andeq	r0, r0, r0
20006780:	1fe0000f 	svcne	0x00e0000f
20006784:	fc07f800 	stc2	8, cr15, [r7], {-0}
20006788:	00000003 	andeq	r0, r0, r3
2000678c:	000ff800 	andeq	pc, pc, r0, lsl #16
20006790:	1fc0001f 	svcne	0x00c0001f
20006794:	fc07fc00 	stc2	12, cr15, [r7], {-0}
20006798:	00000001 	andeq	r0, r0, r1
2000679c:	001ffc00 	andseq	pc, pc, r0, lsl #24
200067a0:	1fc0003f 	svcne	0x00c0003f
200067a4:	fc07ff80 	stc2	15, cr15, [r7], {128}	; 0x80
200067a8:	00000001 	andeq	r0, r0, r1
200067ac:	003fff00 	eorseq	pc, pc, r0, lsl #30
200067b0:	3fc0003f 	svccc	0x00c0003f
200067b4:	fc07fffc 	stc2	15, cr15, [r7], {252}	; 0xfc
200067b8:	00000001 	andeq	r0, r0, r1
200067bc:	007fff80 	rsbseq	pc, pc, r0, lsl #31
200067c0:	ffc0003f 			; <UNDEFINED> instruction: 0xffc0003f
200067c4:	fc03ffff 	stc2	15, cr15, [r3], {255}	; 0xff
200067c8:	00000001 	andeq	r0, r0, r1
200067cc:	00ffffe0 	rscseq	pc, pc, r0, ror #31
200067d0:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
200067d4:	fc01ffff 	stc2	15, cr15, [r1], {255}	; 0xff
200067d8:	00000007 	andeq	r0, r0, r7
200067dc:	03fffff0 	mvnseq	pc, #240, 30	; 0x3c0
200067e0:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
200067e4:	fc00ffff 	stc2	15, cr15, [r0], {255}	; 0xff
200067e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200067ec:	07fffff8 			; <UNDEFINED> instruction: 0x07fffff8
200067f0:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
200067f4:	fc007fff 	stc2	15, cr7, [r0], {255}	; 0xff
200067f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200067fc:	07ff7ffd 			; <UNDEFINED> instruction: 0x07ff7ffd
20006800:	ff80007f 			; <UNDEFINED> instruction: 0xff80007f
20006804:	fc003fff 	stc2	15, cr3, [r0], {255}	; 0xff
20006808:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000680c:	0ffe3fff 	svceq	0x00fe3fff
20006810:	ff1f007f 			; <UNDEFINED> instruction: 0xff1f007f
20006814:	f80007ff 			; <UNDEFINED> instruction: 0xf80007ff
20006818:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000681c:	1ffc3fff 	svcne	0x00fc3fff
20006820:	fc3f807f 	ldc2	0, cr8, [pc], #-508	; 2000662c <bg_bits+0x16c>
20006824:	f800003f 			; <UNDEFINED> instruction: 0xf800003f
20006828:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000682c:	1ff83fff 	svcne	0x00f83fff
20006830:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
20006834:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20006838:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000683c:	3ff03fff 	svccc	0x00f03fff
20006840:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
20006844:	c0000000 	andgt	r0, r0, r0
20006848:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000684c:	7fe03fff 	svcvc	0x00e03fff
20006850:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
20006854:	00000000 	andeq	r0, r0, r0
20006858:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
2000685c:	7fc03fff 	svcvc	0x00c03fff
20006860:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
20006864:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
20006868:	f800000f 			; <UNDEFINED> instruction: 0xf800000f
2000686c:	ffc01fff 			; <UNDEFINED> instruction: 0xffc01fff
20006870:	001f003f 	andseq	r0, pc, pc, lsr r0	; <UNPREDICTABLE>
20006874:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20006878:	f8007fff 			; <UNDEFINED> instruction: 0xf8007fff
2000687c:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
20006880:	0000003f 	andeq	r0, r0, pc, lsr r0
20006884:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20006888:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000688c:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
20006890:	0000003f 	andeq	r0, r0, pc, lsr r0
20006894:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20006898:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000689c:	ff001fff 			; <UNDEFINED> instruction: 0xff001fff
200068a0:	0000003f 	andeq	r0, r0, pc, lsr r0
200068a4:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
200068a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200068ac:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}
200068b0:	0000003f 	andeq	r0, r0, pc, lsr r0
200068b4:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
200068b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200068bc:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}

200068c0 <current_screen>:
200068c0:	00000001 	andeq	r0, r0, r1

200068c4 <delay_until_text.4280>:
200068c4:	00000082 	andeq	r0, r0, r2, lsl #1

200068c8 <long_text.4278>:
200068c8:	00000028 	andeq	r0, r0, r8, lsr #32

200068cc <short_text.4279>:
200068cc:	00000014 	andeq	r0, r0, r4, lsl r0

200068d0 <fire_black_2_bits>:
	...
200068d8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>

200068dc <fire1_gray_bits>:
200068dc:	00000000 	andeq	r0, r0, r0
200068e0:	06000804 	streq	r0, [r0], -r4, lsl #16
200068e4:	02494204 	subeq	r4, r9, #4, 4	; 0x40000000

200068e8 <fire1_light_bits>:
200068e8:	00002000 	andeq	r2, r0, r0
200068ec:	48000010 	stmdami	r0, {r4}
200068f0:	2c243020 	stccs	0, cr3, [r4], #-128	; 0xffffff80

200068f4 <fire2_gray_bits>:
200068f4:	00000000 	andeq	r0, r0, r0
200068f8:	10220000 	eorne	r0, r2, r0
200068fc:	00420444 	subeq	r0, r2, r4, asr #8

20006900 <fire2_light_bits>:
20006900:	04200000 	strteq	r0, [r0], #-0
20006904:	240c0010 	strcs	r0, [ip], #-16
20006908:	123c6008 	eorsne	r6, ip, #8

2000690c <fire3_gray_bits>:
2000690c:	00000000 	andeq	r0, r0, r0
20006910:	24100802 	ldrcs	r0, [r0], #-2050	; 0xfffff7fe
20006914:	00020260 	andeq	r0, r2, r0, ror #4

20006918 <fire3_light_bits>:
20006918:	10200000 	eorne	r0, r0, r0
2000691c:	18040400 	stmdane	r4, {sl}
20006920:	143c5812 	ldrtne	r5, [ip], #-2066	; 0xfffff7ee

20006924 <fire4_gray_bits>:
20006924:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
20006928:	10320000 	eorsne	r0, r2, r0
2000692c:	02400012 	subeq	r0, r0, #18

20006930 <fire4_light_bits>:
20006930:	00001000 	andeq	r1, r0, r0
20006934:	04082000 	streq	r2, [r8], #-0
20006938:	24283a0c 	strtcs	r3, [r8], #-2572	; 0xfffff5f4

2000693c <fire5_gray_bits>:
2000693c:	00000000 	andeq	r0, r0, r0
20006940:	22001020 	andcs	r1, r0, #32
20006944:	04044206 	streq	r4, [r4], #-518	; 0xfffffdfa

20006948 <fire5_light_bits>:
20006948:	00040000 	andeq	r0, r4, r0
2000694c:	04240800 	strteq	r0, [r4], #-2048	; 0xfffff800
20006950:	502a1810 	eorpl	r1, sl, r0, lsl r8

20006954 <firstTime.4076>:
20006954:	00000001 	andeq	r0, r0, r1

20006958 <bird1_black_bits>:
	...
20006968:	00010040 	andeq	r0, r1, r0, asr #32
2000696c:	00118060 	andseq	r8, r1, r0, rrx
20006970:	00118060 	andseq	r8, r1, r0, rrx
20006974:	001b80ec 	andseq	r8, fp, ip, ror #1
20006978:	003f81fc 	ldrshteq	r8, [pc], -ip
2000697c:	007fe1f8 	ldrshteq	lr, [pc], #-24
20006980:	007ff3f8 	ldrshteq	pc, [pc], #-56	; <UNPREDICTABLE>
20006984:	003ffff8 	ldrshteq	pc, [pc], -r8	; <UNPREDICTABLE>
20006988:	003fedf8 	ldrshteq	lr, [pc], -r8
2000698c:	001ff1f0 			; <UNDEFINED> instruction: 0x001ff1f0
20006990:	000ff0e0 	andeq	pc, pc, r0, ror #1
20006994:	0007ff80 	andeq	pc, r7, r0, lsl #31
20006998:	00007c00 	andeq	r7, r0, r0, lsl #24
2000699c:	00008800 	andeq	r8, r0, r0, lsl #16
200069a0:	00033000 	andeq	r3, r3, r0
200069a4:	00011000 	andeq	r1, r1, r0
	...

200069bc <bird1_gray_bits>:
	...
200069f0:	00000e00 	andeq	r0, r0, r0, lsl #28
200069f4:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

20006a20 <bird1_light_bits>:
	...
20006a50:	00001200 	andeq	r1, r0, r0, lsl #4
	...

20006a84 <bird2_black_bits>:
	...
20006a9c:	000b0000 	andeq	r0, fp, r0
20006aa0:	001e0028 	andseq	r0, lr, r8, lsr #32
20006aa4:	003e0068 	eorseq	r0, lr, r8, rrx
20006aa8:	003e007c 	eorseq	r0, lr, ip, ror r0
20006aac:	003e007c 	eorseq	r0, lr, ip, ror r0
20006ab0:	007e007c 	rsbseq	r0, lr, ip, ror r0
20006ab4:	007e7cfc 	ldrshteq	r7, [lr], #-204	; 0xffffff34
20006ab8:	007ffff8 	ldrshteq	pc, [pc], #-248	; <UNPREDICTABLE>
20006abc:	003fd7f0 	ldrshteq	sp, [pc], -r0
20006ac0:	003fc3c0 	eorseq	ip, pc, r0, asr #7
20006ac4:	000fc100 	andeq	ip, pc, r0, lsl #2
20006ac8:	00007000 	andeq	r7, r0, r0
20006acc:	0000a000 	andeq	sl, r0, r0
20006ad0:	0001e000 	andeq	lr, r1, r0
20006ad4:	0000a000 	andeq	sl, r0, r0
20006ad8:	00008000 	andeq	r8, r0, r0
	...

20006ae8 <bird2_gray_bits>:
	...
20006b24:	00003c00 	andeq	r3, r0, r0, lsl #24
20006b28:	00003e00 	andeq	r3, r0, r0, lsl #28
	...

20006b4c <bird2_light_bits>:
	...
20006b84:	00002800 	andeq	r2, r0, r0, lsl #16
	...

20006bb0 <bird3_black_bits>:
	...
20006bd0:	00280000 	eoreq	r0, r8, r0
20006bd4:	00680020 	rsbeq	r0, r8, r0, lsr #32
20006bd8:	00f80038 	rscseq	r0, r8, r8, lsr r0
20006bdc:	00fc0038 	rscseq	r0, ip, r8, lsr r0
20006be0:	00fc007c 	rscseq	r0, ip, ip, ror r0
20006be4:	00fe3dfe 	ldrshteq	r3, [lr], #222	; 0xde
20006be8:	00fffffe 	ldrshteq	pc, [pc], #254	; <UNPREDICTABLE>
20006bec:	007febfc 	ldrshteq	lr, [pc], #-188
20006bf0:	003ff1f0 	ldrshteq	pc, [pc], -r0	; <UNPREDICTABLE>
20006bf4:	001ff0c0 	andseq	pc, pc, r0, asr #1
20006bf8:	0001e800 	andeq	lr, r1, r0, lsl #16
20006bfc:	00005000 	andeq	r5, r0, r0
20006c00:	0000f000 	andeq	pc, r0, r0
20006c04:	00009000 	andeq	r9, r0, r0
	...

20006c14 <bird3_gray_bits>:
	...
20006c54:	00000e00 	andeq	r0, r0, r0, lsl #28
20006c58:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

20006c78 <bird3_light_bits>:
	...
20006cb4:	00001400 	andeq	r1, r0, r0, lsl #8
	...

20006cdc <bird4_black_bits>:
	...
20006d10:	00007800 	andeq	r7, r0, r0, lsl #16
20006d14:	0000ff80 	andeq	pc, r0, r0, lsl #31
20006d18:	0003d7f4 	strdeq	sp, [r3], -r4
20006d1c:	008fe3fc 	strdeq	lr, [pc], ip
20006d20:	01ffc1fc 	ldrsheq	ip, [pc, #28]	; 20006d44 <bird4_gray_bits+0x4>
20006d24:	00ffd9f8 	ldrshteq	sp, [pc], #152
20006d28:	007fb0f0 	ldrshteq	fp, [pc], #-0
20006d2c:	007ea000 	rsbseq	sl, lr, r0
20006d30:	00792000 	rsbseq	r2, r9, r0
20006d34:	00300000 	eorseq	r0, r0, r0
	...

20006d40 <bird4_gray_bits>:
	...
20006d80:	00001c00 	andeq	r1, r0, r0, lsl #24
20006d84:	00003e00 	andeq	r3, r0, r0, lsl #28
	...

20006da4 <bird4_light_bits>:
	...
20006de0:	00002800 	andeq	r2, r0, r0, lsl #16
	...

20006e08 <bird5_black_bits>:
	...
20006e34:	00001c00 	andeq	r1, r0, r0, lsl #24
20006e38:	0000ff00 	andeq	pc, r0, r0, lsl #30
20006e3c:	0003eb00 	andeq	lr, r3, r0, lsl #22
20006e40:	0007f180 	andeq	pc, r7, r0, lsl #3
20006e44:	000ff080 	andeq	pc, pc, r0, lsl #1
20006e48:	000fff80 	andeq	pc, pc, r0, lsl #31
20006e4c:	001fd3c0 	andseq	sp, pc, r0, asr #7
20006e50:	003fa3c0 	eorseq	sl, pc, r0, asr #7
20006e54:	003fa3c0 	eorseq	sl, pc, r0, asr #7
20006e58:	003fd3c0 	eorseq	sp, pc, r0, asr #7
20006e5c:	003e8380 	eorseq	r8, lr, r0, lsl #7
20006e60:	00778580 	rsbseq	r8, r7, r0, lsl #11
20006e64:	00610000 	rsbeq	r0, r1, r0
20006e68:	00000000 	andeq	r0, r0, r0

20006e6c <bird5_gray_bits>:
	...
20006ea4:	00000e00 	andeq	r0, r0, r0, lsl #28
20006ea8:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

20006ed0 <bird5_light_bits>:
	...
20006f04:	00001400 	andeq	r1, r0, r0, lsl #8
	...

20006f34 <firstTime.4093>:
20006f34:	00000001 	andeq	r0, r0, r1

20006f38 <witch1_black_bits>:
20006f38:	200001f8 	strdcs	r0, [r0], -r8
20006f3c:	03400001 	movteq	r0, #1
20006f40:	00074000 	andeq	r4, r7, r0
20006f44:	20000720 	andcs	r0, r0, r0, lsr #14
20006f48:	3ff80066 	svccc	0x00f80066
20006f4c:	00044000 	andeq	r4, r4, r0
20006f50:	40000440 	andmi	r0, r0, r0, asr #8
20006f54:	03800004 	orreq	r0, r0, #4
20006f58:	00064000 	andeq	r4, r6, r0
20006f5c:	20000640 	andcs	r0, r0, r0, asr #12
20006f60:	0e200006 	cdpeq	0, 2, cr0, cr0, cr6, {0}
20006f64:	000e1000 	andeq	r1, lr, r0
20006f68:	f8000c10 			; <UNDEFINED> instruction: 0xf8000c10
20006f6c:	0000001f 	andeq	r0, r0, pc, lsl r0

20006f70 <witch1_gray_bits>:
20006f70:	c0000000 	andgt	r0, r0, r0
20006f74:	00800000 	addeq	r0, r0, r0
20006f78:	00008000 	andeq	r8, r0, r0
20006f7c:	c00000c0 	andgt	r0, r0, r0, asr #1
20006f80:	00000001 	andeq	r0, r0, r1
	...
20006f90:	00018000 	andeq	r8, r1, r0
20006f94:	c0000180 	andgt	r0, r0, r0, lsl #3
20006f98:	01c00001 	biceq	r0, r0, r1
20006f9c:	0001e000 	andeq	lr, r1, r0
20006fa0:	000003e0 	andeq	r0, r0, r0, ror #7
20006fa4:	00000000 	andeq	r0, r0, r0

20006fa8 <witch1_light_bits>:
	...
20006fbc:	00038000 	andeq	r8, r3, r0
20006fc0:	80000380 	andhi	r0, r0, r0, lsl #7
20006fc4:	00000003 	andeq	r0, r0, r3
	...

20006fe0 <witch2_black_bits>:
20006fe0:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20006fe4:	01200001 			; <UNDEFINED> instruction: 0x01200001
20006fe8:	00034000 	andeq	r4, r3, r0
20006fec:	20000740 	andcs	r0, r0, r0, asr #14
20006ff0:	66200007 	strtvs	r0, [r0], -r7
20006ff4:	003ff800 	eorseq	pc, pc, r0, lsl #16
20006ff8:	40000440 	andmi	r0, r0, r0, asr #8
20006ffc:	04400004 	strbeq	r0, [r0], #-4
20007000:	00038000 	andeq	r8, r3, r0
20007004:	20000660 	andcs	r0, r0, r0, ror #12
20007008:	0e100006 	cdpeq	0, 1, cr0, cr0, cr6, {0}
2000700c:	001c0800 	andseq	r0, ip, r0, lsl #16
20007010:	fc001c08 	stc2	12, cr1, [r0], {8}
20007014:	0000003f 	andeq	r0, r0, pc, lsr r0

20007018 <witch2_gray_bits>:
20007018:	00000000 	andeq	r0, r0, r0
2000701c:	00c00000 	sbceq	r0, r0, r0
20007020:	00008000 	andeq	r8, r0, r0
20007024:	c0000080 	andgt	r0, r0, r0, lsl #1
20007028:	01c00000 	biceq	r0, r0, r0
	...
2000703c:	c0000180 	andgt	r0, r0, r0, lsl #3
20007040:	01e00001 	mvneq	r0, r1
20007044:	0003f000 	andeq	pc, r3, r0
20007048:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
2000704c:	00000000 	andeq	r0, r0, r0

20007050 <witch2_light_bits>:
	...
20007068:	80000380 	andhi	r0, r0, r0, lsl #7
2000706c:	03800003 	orreq	r0, r0, #3
	...

20007088 <witch3_black_bits>:
20007088:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
2000708c:	01200001 			; <UNDEFINED> instruction: 0x01200001
20007090:	00034000 	andeq	r4, r3, r0
20007094:	20000740 	andcs	r0, r0, r0, asr #14
20007098:	66200007 	strtvs	r0, [r0], -r7
2000709c:	003ff800 	eorseq	pc, pc, r0, lsl #16
200070a0:	40000440 	andmi	r0, r0, r0, asr #8
200070a4:	04400004 	strbeq	r0, [r0], #-4
200070a8:	00038000 	andeq	r8, r3, r0
200070ac:	10000660 	andne	r0, r0, r0, ror #12
200070b0:	1c08000e 	stcne	0, cr0, [r8], {14}
200070b4:	00380800 	eorseq	r0, r8, r0, lsl #16
200070b8:	fe003804 	vcmla.f16	d3, d0, d4[0], #0
200070bc:	0000007f 	andeq	r0, r0, pc, ror r0

200070c0 <witch3_gray_bits>:
200070c0:	00000000 	andeq	r0, r0, r0
200070c4:	00c00000 	sbceq	r0, r0, r0
200070c8:	00008000 	andeq	r8, r0, r0
200070cc:	c0000080 	andgt	r0, r0, r0, lsl #1
200070d0:	01c00000 	biceq	r0, r0, r0
	...
200070e4:	e0000180 	and	r0, r0, r0, lsl #3
200070e8:	03f00001 	mvnseq	r0, #1
200070ec:	0007f000 	andeq	pc, r7, r0
200070f0:	000007f8 	strdeq	r0, [r0], -r8
200070f4:	00000000 	andeq	r0, r0, r0

200070f8 <witch3_light_bits>:
	...
20007110:	80000380 	andhi	r0, r0, r0, lsl #7
20007114:	03800003 	orreq	r0, r0, #3
	...

20007130 <firstTime.4067>:
20007130:	00000001 	andeq	r0, r0, r1

20007134 <indoors_black_bits>:
20007134:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20007144:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20007154:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20007164:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20007174:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20007184:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20007194:	00000280 	andeq	r0, r0, r0, lsl #5
	...
200071a4:	00000440 	andeq	r0, r0, r0, asr #8
	...
200071b4:	00002aa8 	andeq	r2, r0, r8, lsr #21
	...
200071c4:	00001290 	muleq	r0, r0, r2
	...
200071d4:	00002c68 	andeq	r2, r0, r8, ror #24
	...
200071e4:	00002008 	andeq	r2, r0, r8
	...
200071f4:	000027c8 	andeq	r2, r0, r8, asr #15
	...
20007204:	00001ff0 	strdeq	r1, [r0], -r0
	...
20007214:	00000d60 	andeq	r0, r0, r0, ror #26
	...
20007284:	f7fbfe00 			; <UNDEFINED> instruction: 0xf7fbfe00
20007288:	7fbfdfef 	svcvc	0x00bfdfef
2000728c:	fbfdfeff 	blx	1ff86e92 <startup-0x7916e>
20007290:	00ff703f 	rscseq	r7, pc, pc, lsr r0	; <UNPREDICTABLE>
20007294:	0c060200 	sfmeq	f0, 4, [r6], {-0}
20007298:	c0603018 	rsbgt	r3, r0, r8, lsl r0
2000729c:	06030180 	streq	r0, [r3], -r0, lsl #3
200072a0:	0080d02c 	addeq	sp, r0, ip, lsr #32
200072a4:	0c060200 	sfmeq	f0, 4, [r6], {-0}
200072a8:	c0603018 	rsbgt	r3, r0, r8, lsl r0
200072ac:	06030180 	streq	r0, [r3], -r0, lsl #3
200072b0:	0080d02c 	addeq	sp, r0, ip, lsr #32
200072b4:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200072b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200072bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200072c0:	00ffdfef 	rscseq	sp, pc, pc, ror #31
	...
200072d0:	000050e8 	andeq	r5, r0, r8, ror #1
	...
200072e0:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
200072f0:	00005028 	andeq	r5, r0, r8, lsr #32
	...
20007300:	00005028 	andeq	r5, r0, r8, lsr #32
	...
20007310:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
20007320:	03f050e8 	mvnseq	r5, #232	; 0xe8
	...
20007330:	0c0c5fe8 	stceq	15, cr5, [ip], {232}	; 0xe8
	...
20007340:	10025028 	andne	r5, r2, r8, lsr #32
	...
20007350:	13fa5028 	mvnsne	r5, #40	; 0x28
	...
20007360:	100a5fe8 	andne	r5, sl, r8, ror #31
	...
20007370:	100a50e8 	andne	r5, sl, r8, ror #1
	...
20007380:	100a5fe8 	andne	r5, sl, r8, ror #31
	...
20007390:	100a5028 	andne	r5, sl, r8, lsr #32
	...
200073a0:	100a5028 	andne	r5, sl, r8, lsr #32
	...
200073b0:	100a5fe8 	andne	r5, sl, r8, ror #31
	...
200073c0:	100a50e8 	andne	r5, sl, r8, ror #1
	...
200073d0:	100a5ee8 	andne	r5, sl, r8, ror #29
	...
200073e0:	100a5028 	andne	r5, sl, r8, lsr #32
	...
200073f0:	100a5028 	andne	r5, sl, r8, lsr #32
	...
20007400:	10025fe8 	andne	r5, r2, r8, ror #31
	...
20007410:	0ffc50e8 	svceq	0x00fc50e8
	...
20007420:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
20007430:	00005028 	andeq	r5, r0, r8, lsr #32
	...
20007440:	00005028 	andeq	r5, r0, r8, lsr #32
	...
20007450:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
20007460:	000050e8 	andeq	r5, r0, r8, ror #1
	...
20007470:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
20007480:	00007028 	andeq	r7, r0, r8, lsr #32
	...
20007490:	00007028 	andeq	r7, r0, r8, lsr #32
	...
200074a0:	00007038 	andeq	r7, r0, r8, lsr r0
200074a4:	f7fbfdfe 			; <UNDEFINED> instruction: 0xf7fbfdfe
200074a8:	7fbfdfef 	svcvc	0x00bfdfef
200074ac:	fbfdfeff 	blx	1ff870b2 <startup-0x78f4e>
200074b0:	bfbfeff7 	svclt	0x00bfeff7
200074b4:	0c060301 	stceq	3, cr0, [r6], {1}
200074b8:	c0603018 	rsbgt	r3, r0, r8, lsl r0
200074bc:	06030180 	streq	r0, [r3], -r0, lsl #3
200074c0:	6030180c 	eorsvs	r1, r0, ip, lsl #16
200074c4:	0c060301 	stceq	3, cr0, [r6], {1}
200074c8:	c0603018 	rsbgt	r3, r0, r8, lsl r0
200074cc:	06030180 	streq	r0, [r3], -r0, lsl #3
200074d0:	6030180c 	eorsvs	r1, r0, ip, lsl #16
200074d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200074d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200074dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200074e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200074e4:	c0603018 	rsbgt	r3, r0, r8, lsl r0
200074e8:	06030180 	streq	r0, [r3], -r0, lsl #3
200074ec:	6030180c 	eorsvs	r1, r0, ip, lsl #16
200074f0:	030180c0 	movweq	r8, #4288	; 0x10c0
200074f4:	c0603018 	rsbgt	r3, r0, r8, lsl r0
200074f8:	06030180 	streq	r0, [r3], -r0, lsl #3
200074fc:	6030180c 	eorsvs	r1, r0, ip, lsl #16
20007500:	030180c0 	movweq	r8, #4288	; 0x10c0
20007504:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007508:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000750c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007510:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007514:	030180c0 	movweq	r8, #4288	; 0x10c0
20007518:	30180c06 	andscc	r0, r8, r6, lsl #24
2000751c:	0180c060 	orreq	ip, r0, r0, rrx
20007520:	180c0603 	stmdane	ip, {r0, r1, r9, sl}
20007524:	030180c0 	movweq	r8, #4288	; 0x10c0
20007528:	30180c06 	andscc	r0, r8, r6, lsl #24
2000752c:	0180c060 	orreq	ip, r0, r0, rrx
20007530:	180c0603 	stmdane	ip, {r0, r1, r9, sl}

20007534 <indoors_gray_bits>:
	...
20007594:	00001110 	andeq	r1, r0, r0, lsl r1
	...
200075a4:	00001090 	muleq	r0, r0, r0
	...
200075d4:	00000390 	muleq	r0, r0, r3
	...
200075e4:	00001340 	andeq	r1, r0, r0, asr #6
	...
200075f4:	00000830 	andeq	r0, r0, r0, lsr r8
	...
20007684:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
20007688:	80402010 	subhi	r2, r0, r0, lsl r0
2000768c:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
20007690:	00008000 	andeq	r8, r0, r0
20007694:	b0582c00 	subslt	r2, r8, r0, lsl #24
20007698:	0582c160 	streq	ip, [r2, #352]	; 0x160
2000769c:	582c160b 	stmdapl	ip!, {r0, r1, r3, r9, sl, ip}
200076a0:	010b0000 	mrseq	r0, (UNDEF: 11)
200076a4:	71b8dc00 			; <UNDEFINED> instruction: 0x71b8dc00
200076a8:	1b8dc6e3 	blne	1e37923c <startup-0x1c86dc4>
200076ac:	b8dc6e37 	ldmlt	ip, {r0, r1, r2, r4, r5, r9, sl, fp, sp, lr}^
200076b0:	01370001 	teqeq	r7, r1
	...
200076c0:	01000000 	mrseq	r0, (UNDEF: 0)
200076c4:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
200076c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200076cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200076d0:	01ff8007 	mvnseq	r8, r7
	...
200076e0:	00008000 	andeq	r8, r0, r0
	...
200076f0:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20007700:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20007710:	00008000 	andeq	r8, r0, r0
	...
20007720:	00008000 	andeq	r8, r0, r0
	...
20007730:	00008000 	andeq	r8, r0, r0
	...
20007740:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20007750:	20008180 	andcs	r8, r0, r0, lsl #3
	...
20007760:	20808000 	addcs	r8, r0, r0
	...
20007770:	20c08100 	sbccs	r8, r0, r0, lsl #2
	...
20007780:	21e08000 	mvncs	r8, r0
	...
20007790:	2bf08180 	blcs	1fc27d98 <startup-0x3d8268>
	...
200077a0:	25c08180 	strbcs	r8, [r0, #384]	; 0x180
	...
200077b0:	29e08000 	stmibcs	r0!, {pc}^
	...
200077c0:	2bc08100 	blcs	1f027bc8 <startup-0xfd8438>
	...
200077d0:	20c08110 	sbccs	r8, r0, r0, lsl r1
	...
200077e0:	28e0a190 	stmiacs	r0!, {r4, r7, r8, sp, pc}^
	...
200077f0:	2bf08180 	blcs	1fc27df8 <startup-0x3d8208>
	...
20007800:	28008000 	stmdacs	r0, {pc}
	...
20007810:	3000a010 	andcc	sl, r0, r0, lsl r0
	...
20007820:	1fc0a000 	svcne	0x00c0a000
	...
20007830:	0000a180 	andeq	sl, r0, r0, lsl #3
	...
20007840:	00008190 	muleq	r0, r0, r1
	...
20007850:	00008010 	andeq	r8, r0, r0, lsl r0
	...
20007860:	00008110 	andeq	r8, r0, r0, lsl r1
	...
20007870:	0000a010 	andeq	sl, r0, r0, lsl r0
	...
20007880:	00008190 	muleq	r0, r0, r1
	...
20007890:	00008190 	muleq	r0, r0, r1
	...
200078a0:	00008180 	andeq	r8, r0, r0, lsl #3
200078a4:	08040201 	stmdaeq	r4, {r0, r9}
200078a8:	80402010 	subhi	r2, r0, r0, lsl r0
200078ac:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
200078b0:	40401008 	submi	r1, r0, r8
200078b4:	b0582c16 	subslt	r2, r8, r6, lsl ip
200078b8:	0582c160 	streq	ip, [r2, #352]	; 0x160
200078bc:	582c160b 	stmdapl	ip!, {r0, r1, r3, r9, sl, ip}
200078c0:	82c160b0 	sbchi	r6, r1, #176	; 0xb0
200078c4:	71b8dc6e 			; <UNDEFINED> instruction: 0x71b8dc6e
200078c8:	1b8dc6e3 	blne	1e37945c <startup-0x1c86ba4>
200078cc:	b8dc6e37 	ldmlt	ip, {r0, r1, r2, r4, r5, r9, sl, fp, sp, lr}^
200078d0:	8dc6e371 	stclhi	3, cr14, [r6, #452]	; 0x1c4
	...
200078e4:	0582c160 	streq	ip, [r2, #352]	; 0x160
200078e8:	582c160b 	stmdapl	ip!, {r0, r1, r3, r9, sl, ip}
200078ec:	82c160b0 	sbchi	r6, r1, #176	; 0xb0
200078f0:	2c160b05 			; <UNDEFINED> instruction: 0x2c160b05
200078f4:	1b8dc6e3 	blne	1e379488 <startup-0x1c86b78>
200078f8:	b8dc6e37 	ldmlt	ip, {r0, r1, r2, r4, r5, r9, sl, fp, sp, lr}^
200078fc:	8dc6e371 	stclhi	3, cr14, [r6, #452]	; 0x1c4
20007900:	dc6e371b 	stclle	7, cr3, [lr], #-108	; 0xffffff94
	...
20007914:	2c160b05 			; <UNDEFINED> instruction: 0x2c160b05
20007918:	c160b058 	qdsubgt	fp, r8, r0
2000791c:	160b0582 	strne	r0, [fp], -r2, lsl #11
20007920:	60b0582c 	adcsvs	r5, r0, ip, lsr #16
20007924:	dc6e371b 	stclle	7, cr3, [lr], #-108	; 0xffffff94
20007928:	c6e371b8 			; <UNDEFINED> instruction: 0xc6e371b8
2000792c:	6e371b8d 	vaddvs.f64	d1, d23, d13
20007930:	e371b8dc 	cmn	r1, #220, 16	; 0xdc0000

20007934 <indoors_light_bits>:
	...
20007974:	00001010 	andeq	r1, r0, r0, lsl r0
	...
200079a4:	00000300 	andeq	r0, r0, r0, lsl #6
	...
200079b4:	00001110 	andeq	r1, r0, r0, lsl r1
	...
200079c4:	00000100 	andeq	r0, r0, r0, lsl #2
	...
200079d4:	00001000 	andeq	r1, r0, r0
	...
200079e4:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
	...
200079f4:	00001000 	andeq	r1, r0, r0
	...
20007a94:	43a1d000 			; <UNDEFINED> instruction: 0x43a1d000
20007a98:	3a1d0e87 	bcc	2074b4bc <firstTime.4040+0x742b84>
20007a9c:	a1d0e874 	bicsge	lr, r0, r4, ror r8
20007aa0:	00742013 	rsbseq	r2, r4, r3, lsl r0
20007aa4:	82412000 	subhi	r2, r1, #0
20007aa8:	24120904 	ldrcs	r0, [r2], #-2308	; 0xfffff6fc
20007aac:	41209048 			; <UNDEFINED> instruction: 0x41209048
20007ab0:	00482012 	subeq	r2, r8, r2, lsl r0
	...
20007ac0:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007ad0:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
20007ae0:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007af0:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007b00:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007b10:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007b20:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
20007b30:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007b40:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007b50:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007b60:	03702010 	cmneq	r0, #16
	...
20007b70:	03302e10 	teqeq	r0, #16, 28	; 0x100
	...
20007b80:	02102010 	andseq	r2, r0, #16
	...
20007b90:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007ba0:	02302010 	eorseq	r2, r0, #16
	...
20007bb0:	02102010 	andseq	r2, r0, #16
	...
20007bc0:	00302e10 	eorseq	r2, r0, r0, lsl lr
	...
20007bd0:	03302000 	teqeq	r0, #0
	...
20007be0:	03100000 	tsteq	r0, #0
	...
20007bf0:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007c00:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20007c10:	00000f00 	andeq	r0, r0, r0, lsl #30
	...
20007c20:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20007c30:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20007c40:	00002000 	andeq	r2, r0, r0
	...
20007c50:	00002000 	andeq	r2, r0, r0
	...
20007c60:	00002e00 	andeq	r2, r0, r0, lsl #28
	...
20007cb4:	43a1d0e8 			; <UNDEFINED> instruction: 0x43a1d0e8
20007cb8:	3a1d0e87 	bcc	2074b6dc <firstTime.4040+0x742da4>
20007cbc:	a1d0e874 	bicsge	lr, r0, r4, ror r8
20007cc0:	1d0e8743 	stcne	7, cr8, [lr, #-268]	; 0xfffffef4
20007cc4:	82412090 	subhi	r2, r1, #144	; 0x90
20007cc8:	24120904 	ldrcs	r0, [r2], #-2308	; 0xfffff6fc
20007ccc:	41209048 			; <UNDEFINED> instruction: 0x41209048
20007cd0:	12090482 	andne	r0, r9, #-2113929216	; 0x82000000
	...
20007ce4:	3a1d0e87 	bcc	2074b708 <firstTime.4040+0x742dd0>
20007ce8:	a1d0e874 	bicsge	lr, r0, r4, ror r8
20007cec:	1d0e8743 	stcne	7, cr8, [lr, #-268]	; 0xfffffef4
20007cf0:	d0e8743a 	rscle	r7, r8, sl, lsr r4
20007cf4:	24120904 	ldrcs	r0, [r2], #-2308	; 0xfffff6fc
20007cf8:	41209048 			; <UNDEFINED> instruction: 0x41209048
20007cfc:	12090482 	andne	r0, r9, #-2113929216	; 0x82000000
20007d00:	20904824 	addscs	r4, r0, r4, lsr #16
	...
20007d14:	d0e8743a 	rscle	r7, r8, sl, lsr r4
20007d18:	0e8743a1 	cdpeq	3, 8, cr4, cr7, cr1, {5}
20007d1c:	e8743a1d 	ldmda	r4!, {r0, r2, r3, r4, r9, fp, ip, sp}^
20007d20:	8743a1d0 			; <UNDEFINED> instruction: 0x8743a1d0
20007d24:	20904824 	addscs	r4, r0, r4, lsr #16
20007d28:	09048241 	stmdbeq	r4, {r0, r6, r9, pc}
20007d2c:	90482412 	subls	r2, r8, r2, lsl r4
20007d30:	04824120 	streq	r4, [r2], #288	; 0x120

20007d34 <firstTime.4040>:
20007d34:	00000001 	andeq	r0, r0, r1

20007d38 <indoors2_black_bits>:
20007d38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007d3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007d40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007d44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007d48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007d4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007d50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007d54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007d58:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007d5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007d60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007d64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007d68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007d6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007d70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007d74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007d78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007d7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007d80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007d84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007d88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007d8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007d90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007d94:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007d98:	ffffeeef 			; <UNDEFINED> instruction: 0xffffeeef
20007d9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007da0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007da4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007da8:	ffffec6f 			; <UNDEFINED> instruction: 0xffffec6f
20007dac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007db0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007db4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007db8:	ffffeaaf 			; <UNDEFINED> instruction: 0xffffeaaf
20007dbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007dc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007dc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007dc8:	fffff29f 			; <UNDEFINED> instruction: 0xfffff29f
20007dcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007dd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007dd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007dd8:	ffffec6f 			; <UNDEFINED> instruction: 0xffffec6f
20007ddc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007de0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007de4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007de8:	ffffe00f 			; <UNDEFINED> instruction: 0xffffe00f
20007dec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007df0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007df4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007df8:	ffffe7cf 			; <UNDEFINED> instruction: 0xffffe7cf
20007dfc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e04:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e08:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e24:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e58:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e88:	f7fbffff 			; <UNDEFINED> instruction: 0xf7fbffff
20007e8c:	7fbfdfef 	svcvc	0x00bfdfef
20007e90:	fbfdfeff 	blx	1ff87a96 <startup-0x7856a>
20007e94:	ffff7fff 			; <UNDEFINED> instruction: 0xffff7fff
20007e98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007e9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007ea0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007ea4:	feffdfef 	cdp2	15, 15, cr13, cr15, cr15, {7}
20007ea8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007eac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007eb0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007eb4:	feffdfef 	cdp2	15, 15, cr13, cr15, cr15, {7}
20007eb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007ebc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007ec0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007ec4:	feffdfef 	cdp2	15, 15, cr13, cr15, cr15, {7}
20007ec8:	00000fff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
20007ed4:	fe0050e8 	cdp2	0, 0, cr5, cr0, cr8, {7}
20007ed8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007edc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007ee0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007ee4:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
20007ee8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007eec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007ef0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007ef4:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
20007ef8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007efc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f04:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
20007f08:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f14:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
20007f18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f24:	ffff50ef 			; <UNDEFINED> instruction: 0xffff50ef
20007f28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f34:	ec0d5fef 	stc	15, cr5, [sp], {239}	; 0xef
20007f38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f44:	f003502f 			; <UNDEFINED> instruction: 0xf003502f
20007f48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f54:	d3fb502f 	mvnsle	r5, #47	; 0x2f
20007f58:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f64:	d00b5fef 	andle	r5, fp, pc, ror #31
20007f68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f74:	d00b50ef 	andle	r5, fp, pc, ror #1
20007f78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f84:	d00b5fef 	andle	r5, fp, pc, ror #31
20007f88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f94:	d00b502f 	andle	r5, fp, pc, lsr #32
20007f98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fa0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fa4:	d00b502f 	andle	r5, fp, pc, lsr #32
20007fa8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fb0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fb4:	d00b5fef 	andle	r5, fp, pc, ror #31
20007fb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fc4:	d00b50ef 	andle	r5, fp, pc, ror #1
20007fc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fd4:	d00b5eef 	andle	r5, fp, pc, ror #29
20007fd8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fe0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fe4:	d00b502f 	andle	r5, fp, pc, lsr #32
20007fe8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007fec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007ff0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007ff4:	d00b502f 	andle	r5, fp, pc, lsr #32
20007ff8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007ffc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008000:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008004:	d0035fef 	andle	r5, r3, pc, ror #31
20008008:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000800c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008010:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008014:	cffd50ef 	svcgt	0x00fd50ef
20008018:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000801c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008020:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008024:	e03f5fef 	eors	r5, pc, pc, ror #31
20008028:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000802c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008030:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008034:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
20008038:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000803c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008040:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008044:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
20008048:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000804c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008050:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008054:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
20008058:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000805c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008060:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008064:	ffff50ef 			; <UNDEFINED> instruction: 0xffff50ef
20008068:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000806c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008070:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008074:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
20008078:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000807c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008080:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008084:	ffff7e6f 			; <UNDEFINED> instruction: 0xffff7e6f
20008088:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000808c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008090:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008094:	ffff7e6f 			; <UNDEFINED> instruction: 0xffff7e6f
20008098:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000809c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080a4:	ffff7e7f 			; <UNDEFINED> instruction: 0xffff7e7f
200080a8:	f7fbfdfe 			; <UNDEFINED> instruction: 0xf7fbfdfe
200080ac:	7fbfdfef 	svcvc	0x00bfdfef
200080b0:	fbfdfeff 	blx	1ff87cb6 <startup-0x7834a>
200080b4:	bfbfeff7 	svclt	0x00bfeff7
200080b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008100:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008104:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008108:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000810c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008110:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008114:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008118:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000811c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008120:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008124:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008128:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000812c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008130:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008134:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20008138 <indoors2_gray_bits>:
	...
20008198:	00001110 	andeq	r1, r0, r0, lsl r1
	...
200081a8:	00001090 	muleq	r0, r0, r0
	...
200081d8:	00000390 	muleq	r0, r0, r3
	...
200081e8:	00001340 	andeq	r1, r0, r0, asr #6
	...
200081f8:	00000830 	andeq	r0, r0, r0, lsr r8
	...
20008288:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
2000828c:	80402010 	subhi	r2, r0, r0, lsl r0
20008290:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
20008294:	00008000 	andeq	r8, r0, r0
	...
200082a4:	01000000 	mrseq	r0, (UNDEF: 0)
	...
200082b4:	01000000 	mrseq	r0, (UNDEF: 0)
	...
200082c4:	01000000 	mrseq	r0, (UNDEF: 0)
200082c8:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
200082cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200082d4:	01ff8007 	mvnseq	r8, r7
	...
200082e4:	00008000 	andeq	r8, r0, r0
	...
200082f4:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20008304:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20008314:	00008000 	andeq	r8, r0, r0
	...
20008324:	00008000 	andeq	r8, r0, r0
	...
20008334:	00008000 	andeq	r8, r0, r0
	...
20008344:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20008354:	20008180 	andcs	r8, r0, r0, lsl #3
	...
20008364:	20808000 	addcs	r8, r0, r0
	...
20008374:	20c08100 	sbccs	r8, r0, r0, lsl #2
	...
20008384:	21e08000 	mvncs	r8, r0
	...
20008394:	2bf08180 	blcs	1fc2899c <startup-0x3d7664>
	...
200083a4:	25c08180 	strbcs	r8, [r0, #384]	; 0x180
	...
200083b4:	29e08000 	stmibcs	r0!, {pc}^
	...
200083c4:	2bc08100 	blcs	1f0287cc <startup-0xfd7834>
	...
200083d4:	20c08110 	sbccs	r8, r0, r0, lsl r1
	...
200083e4:	28e0a190 	stmiacs	r0!, {r4, r7, r8, sp, pc}^
	...
200083f4:	2bf08180 	blcs	1fc289fc <startup-0x3d7604>
	...
20008404:	28008000 	stmdacs	r0, {pc}
	...
20008414:	3000a010 	andcc	sl, r0, r0, lsl r0
	...
20008424:	1fc0a000 	svcne	0x00c0a000
	...
20008434:	0000a180 	andeq	sl, r0, r0, lsl #3
	...
20008444:	00008190 	muleq	r0, r0, r1
	...
20008454:	00008010 	andeq	r8, r0, r0, lsl r0
	...
20008464:	00008110 	andeq	r8, r0, r0, lsl r1
	...
20008474:	0000a010 	andeq	sl, r0, r0, lsl r0
	...
20008484:	00008190 	muleq	r0, r0, r1
	...
20008494:	00008190 	muleq	r0, r0, r1
	...
200084a4:	00008180 	andeq	r8, r0, r0, lsl #3
200084a8:	08040201 	stmdaeq	r4, {r0, r9}
200084ac:	80402010 	subhi	r2, r0, r0, lsl r0
200084b0:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
200084b4:	40401008 	submi	r1, r0, r8
	...

20008538 <indoors2_light_bits>:
	...
200085a8:	00000300 	andeq	r0, r0, r0, lsl #6
	...
200085b8:	00001110 	andeq	r1, r0, r0, lsl r1
	...
200085c8:	00000100 	andeq	r0, r0, r0, lsl #2
	...
200085d8:	00001000 	andeq	r1, r0, r0
	...
200085e8:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
	...
200085f8:	00001000 	andeq	r1, r0, r0
	...
200086a4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
200086b4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
200086c4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
200086d4:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
200086e4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
200086f4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008704:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008714:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008724:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
20008734:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008744:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008754:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008764:	03702010 	cmneq	r0, #16
	...
20008774:	03302e10 	teqeq	r0, #16, 28	; 0x100
	...
20008784:	02102010 	andseq	r2, r0, #16
	...
20008794:	00002010 	andeq	r2, r0, r0, lsl r0
	...
200087a4:	02302010 	eorseq	r2, r0, #16
	...
200087b4:	02102010 	andseq	r2, r0, #16
	...
200087c4:	00302e10 	eorseq	r2, r0, r0, lsl lr
	...
200087d4:	03302000 	teqeq	r0, #0
	...
200087e4:	03100000 	tsteq	r0, #0
	...
200087f4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008804:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008814:	00000f00 	andeq	r0, r0, r0, lsl #30
	...
20008824:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20008834:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20008844:	00002000 	andeq	r2, r0, r0
	...
20008854:	00002000 	andeq	r2, r0, r0
	...
20008864:	00002e00 	andeq	r2, r0, r0, lsl #28
	...

20008938 <firstTime.4040>:
20008938:	00000001 	andeq	r0, r0, r1
2000893c:	00202020 	eoreq	r2, r0, r0, lsr #32
20008940:	41524b2a 	cmpmi	r2, sl, lsr #22
20008944:	2a202a21 	bcs	208131d0 <firstTime.4040+0x80a898>
20008948:	2141524b 	cmpcs	r1, fp, asr #4
2000894c:	0000002a 	andeq	r0, r0, sl, lsr #32
20008950:	734c4944 	movtvc	r4, #51524	; 0xc944
20008954:	7469772d 	strbtvc	r7, [r9], #-1837	; 0xfffff8d3
20008958:	73656863 	cmnvc	r5, #6488064	; 0x630000
2000895c:	76616820 	strbtvc	r6, [r1], -r0, lsr #16
20008960:	00000065 	andeq	r0, r0, r5, rrx
20008964:	20726f46 	rsbscs	r6, r2, r6, asr #30
20008968:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
2000896c:	65697275 	strbvs	r7, [r9, #-629]!	; 0xfffffd8b
20008970:	68742073 	ldmdavs	r4!, {r0, r1, r4, r5, r6, sp}^
20008974:	00000065 	andeq	r0, r0, r5, rrx
20008978:	20202020 	eorcs	r2, r0, r0, lsr #32
2000897c:	00000000 	andeq	r0, r0, r0
20008980:	6c696f63 	stclvs	15, cr6, [r9], #-396	; 0xfffffe74
20008984:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
20008988:	6566206e 	strbvs	r2, [r6, #-110]!	; 0xffffff92
2000898c:	002c7261 	eoreq	r7, ip, r1, ror #4
20008990:	74616874 	strbtvc	r6, [r1], #-2164	; 0xfffff78c
20008994:	44206120 	strtmi	r6, [r0], #-288	; 0xfffffee0
20008998:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
2000899c:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
200089a0:	00000068 	andeq	r0, r0, r8, rrx
200089a4:	6e656877 	mcrvs	8, 3, r6, cr5, cr7, {3}
200089a8:	72657665 	rsbvc	r7, r5, #105906176	; 0x6500000
200089ac:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
200089b0:	65682079 	strbvs	r2, [r8, #-121]!	; 0xffffff87
200089b4:	00007261 	andeq	r7, r0, r1, ror #4
200089b8:	6e207369 	cdpvs	3, 2, cr7, cr0, cr9, {3}
200089bc:	2e726165 	rpwcssz	f6, f2, f5
200089c0:	00000000 	andeq	r0, r0, r0
200089c4:	70727573 	rsbsvc	r7, r2, r3, ror r5
200089c8:	69736972 	ldmdbvs	r3!, {r1, r4, r5, r6, r8, fp, sp, lr}^
200089cc:	202c676e 	eorcs	r6, ip, lr, ror #14
200089d0:	646e6966 	strbtvs	r6, [lr], #-2406	; 0xfffff69a
200089d4:	00676e69 	rsbeq	r6, r7, r9, ror #28
200089d8:	69206f53 	stmdbvs	r0!, {r0, r1, r4, r6, r8, r9, sl, fp, sp, lr}
200089dc:	73692074 	cmnvc	r9, #116	; 0x74
200089e0:	69757120 	ldmdbvs	r5!, {r5, r8, ip, sp, lr}^
200089e4:	00006574 	andeq	r6, r0, r4, ror r5
200089e8:	20756f79 	rsbscs	r6, r5, r9, ror pc
200089ec:	65726568 	ldrbvs	r6, [r2, #-1384]!	; 0xfffffa98
200089f0:	0000002c 	andeq	r0, r0, ip, lsr #32
200089f4:	72696568 	rsbvc	r6, r9, #104, 10	; 0x1a000000
200089f8:	206f7420 	rsbcs	r7, pc, r0, lsr #8
200089fc:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
20008a00:	61654c20 	cmnvs	r5, r0, lsr #24
20008a04:	00002e72 	andeq	r2, r0, r2, ror lr
20008a08:	65657571 	strbvs	r7, [r5, #-1393]!	; 0xfffffa8f
20008a0c:	6144206e 	cmpvs	r4, lr, rrx
20008a10:	206f6666 	rsbcs	r6, pc, r6, ror #12
20008a14:	4420666f 	strtmi	r6, [r0], #-1647	; 0xfffff991
20008a18:	2c734c49 	ldclcs	12, cr4, [r3], #-292	; 0xfffffedc
20008a1c:	00000000 	andeq	r0, r0, r0
20008a20:	706d6574 	rsbvc	r6, sp, r4, ror r5
20008a24:	2c646574 	cfstr64cs	mvdx6, [r4], #-464	; 0xfffffe30
20008a28:	206f7420 	rsbcs	r7, pc, r0, lsr #8
20008a2c:	746f6f6c 	strbtvc	r6, [pc], #-3948	; 20008a34 <firstTime.4040+0xfc>
20008a30:	00000000 	andeq	r0, r0, r0
20008a34:	20747542 	rsbscs	r7, r4, r2, asr #10
20008a38:	6279616d 	rsbsvs	r6, r9, #1073741851	; 0x4000001b
20008a3c:	6f792065 	svcvs	0x00792065
20008a40:	65722775 	ldrbvs	r2, [r2, #-1909]!	; 0xfffff88b
20008a44:	00000000 	andeq	r0, r0, r0
20008a48:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 200088b8 <indoors2_light_bits+0x380>
20008a4c:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
20008a50:	63697220 	cmnvs	r9, #32, 4
20008a54:	2c736568 	cfldr64cs	mvdx6, [r3], #-416	; 0xfffffe60
20008a58:	00000000 	andeq	r0, r0, r0
20008a5c:	6b636977 	blvs	218e3040 <firstTime.4040+0x18da708>
20008a60:	44206465 	strtmi	r6, [r0], #-1125	; 0xfffffb9b
20008a64:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
20008a68:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
20008a6c:	2e736568 	cdpcs	5, 7, cr6, cr3, cr8, {3}
20008a70:	00000000 	andeq	r0, r0, r0
20008a74:	65727573 	ldrbvs	r7, [r2, #-1395]!	; 0xfffffa8d
20008a78:	79622064 	stmdbvc	r2!, {r2, r5, r6, sp}^
20008a7c:	00000000 	andeq	r0, r0, r0
20008a80:	67206f73 			; <UNDEFINED> instruction: 0x67206f73
20008a84:	70706972 	rsbsvc	r6, r0, r2, ror r9
20008a88:	20796c69 	rsbscs	r6, r9, r9, ror #24
20008a8c:	61657274 	smcvs	22308	; 0x5724
20008a90:	0000002d 	andeq	r0, r0, sp, lsr #32
20008a94:	6572202d 	ldrbvs	r2, [r2, #-45]!	; 0xffffffd3
20008a98:	20746573 	rsbscs	r6, r4, r3, ror r5
20008a9c:	20656874 	rsbcs	r6, r5, r4, ror r8
20008aa0:	74697773 	strbtvc	r7, [r9], #-1907	; 0xfffff88d
20008aa4:	00216863 	eoreq	r6, r1, r3, ror #16
20008aa8:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xfffff1bb
20008aac:	62202c72 	eorvs	r2, r0, #29184	; 0x7200
20008ab0:	65766172 	ldrbvs	r6, [r6, #-370]!	; 0xfffffe8e
20008ab4:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
20008ab8:	002c6863 	eoreq	r6, ip, r3, ror #16
20008abc:	20001d38 	andcs	r1, r0, r8, lsr sp
20008ac0:	20001d42 	andcs	r1, r0, r2, asr #26
20008ac4:	20001d4c 	andcs	r1, r0, ip, asr #26
20008ac8:	20001d56 	andcs	r1, r0, r6, asr sp
20008acc:	20001d60 	andcs	r1, r0, r0, ror #26
20008ad0:	20001d6a 	andcs	r1, r0, sl, ror #26
20008ad4:	20001d74 	andcs	r1, r0, r4, ror sp
20008ad8:	20001d7e 	andcs	r1, r0, lr, ror sp
20008adc:	20202020 	eorcs	r2, r0, r0, lsr #32
20008ae0:	20202020 	eorcs	r2, r0, r0, lsr #32
20008ae4:	20202020 	eorcs	r2, r0, r0, lsr #32
20008ae8:	20202020 	eorcs	r2, r0, r0, lsr #32
20008aec:	20202020 	eorcs	r2, r0, r0, lsr #32
20008af0:	00000000 	andeq	r0, r0, r0
20008af4:	61666c41 	cmnvs	r6, r1, asr #24
20008af8:	656d756e 	strbvs	r7, [sp, #-1390]!	; 0xfffffa92
20008afc:	6b736972 	blvs	21ce30cc <firstTime.4040+0x1cda794>
20008b00:	00000000 	andeq	r0, r0, r0
20008b04:	64726168 	ldrbtvs	r6, [r2], #-360	; 0xfffffe98
20008b08:	a4c3a5c3 	strbge	sl, [r3], #1475	; 0x5c3
20008b0c:	7261b6c3 	rsbvc	fp, r1, #204472320	; 0xc300000
20008b10:	75732065 	ldrbvc	r2, [r3, #-101]!	; 0xffffff9b
20008b14:	00726567 	rsbseq	r6, r2, r7, ror #10

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000896 	muleq	r0, r6, r8
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000077 	andeq	r0, r0, r7, ror r0
      10:	0004640c 	andeq	r6, r4, ip, lsl #8
	...
      20:	020c0200 	andeq	r0, ip, #0, 4
      24:	00004e05 	andeq	r4, r0, r5, lsl #28
      28:	02d60300 	sbcseq	r0, r6, #0, 6
      2c:	07020000 	streq	r0, [r2, -r0]
      30:	0000004e 	andeq	r0, r0, lr, asr #32
      34:	05f90300 	ldrbeq	r0, [r9, #768]!	; 0x300
      38:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      3c:	0000004e 	andeq	r0, r0, lr, asr #32
      40:	10090304 	andne	r0, r9, r4, lsl #6
      44:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
      48:	00000055 	andeq	r0, r0, r5, asr r0
      4c:	04040008 	streq	r0, [r4], #-8
      50:	0002fa07 	andeq	pc, r2, r7, lsl #20
      54:	5b040500 	blpl	10145c <startup-0x1fefeba4>
      58:	04000000 	streq	r0, [r0], #-0
      5c:	04110801 	ldreq	r0, [r1], #-2049	; 0xfffff7ff
      60:	5b060000 	blpl	180068 <startup-0x1fe7ff98>
      64:	02000011 	andeq	r0, r0, #17
      68:	0000210a 	andeq	r2, r0, sl, lsl #2
      6c:	00160700 	andseq	r0, r6, r0, lsl #14
      70:	030c0000 	movweq	r0, #49152	; 0xc000
      74:	00009e06 	andeq	r9, r0, r6, lsl #28
      78:	04e70300 	strbteq	r0, [r7], #768	; 0x300
      7c:	07030000 	streq	r0, [r3, -r0]
      80:	0000009e 	muleq	r0, lr, r0
      84:	001d0300 	andseq	r0, sp, r0, lsl #6
      88:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
      8c:	0000009e 	muleq	r0, lr, r0
      90:	00120304 	andseq	r0, r2, r4, lsl #6
      94:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
      98:	0000009e 	muleq	r0, lr, r0
      9c:	04050008 	streq	r0, [r5], #-8
      a0:	00000062 	andeq	r0, r0, r2, rrx
      a4:	000c2806 	andeq	r2, ip, r6, lsl #16
      a8:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
      ac:	07000000 	streq	r0, [r0, -r0]
      b0:	000005ce 	andeq	r0, r0, lr, asr #11
      b4:	28060424 	stmdacs	r6, {r2, r5, sl}
      b8:	03000001 	movweq	r0, #1
      bc:	000003ae 	andeq	r0, r0, lr, lsr #7
      c0:	01280704 			; <UNDEFINED> instruction: 0x01280704
      c4:	03000000 	movweq	r0, #0
      c8:	000005da 	ldrdeq	r0, [r0], -sl
      cc:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
      d0:	03040000 	movweq	r0, #16384	; 0x4000
      d4:	00000552 	andeq	r0, r0, r2, asr r5
      d8:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
      dc:	03080000 	movweq	r0, #32768	; 0x8000
      e0:	0000056d 	andeq	r0, r0, sp, ror #10
      e4:	01460c04 	cmpeq	r6, r4, lsl #24
      e8:	030c0000 	movweq	r0, #49152	; 0xc000
      ec:	000002cf 	andeq	r0, r0, pc, asr #5
      f0:	01460d04 	cmpeq	r6, r4, lsl #26
      f4:	03100000 	tsteq	r0, #0
      f8:	000003c0 	andeq	r0, r0, r0, asr #7
      fc:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
     100:	03140000 	tsteq	r4, #0
     104:	00000048 	andeq	r0, r0, r8, asr #32
     108:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
     10c:	03180000 	tsteq	r8, #0
     110:	0000033f 	andeq	r0, r0, pc, lsr r3
     114:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
     118:	031c0000 	tsteq	ip, #0
     11c:	0000034f 	andeq	r0, r0, pc, asr #6
     120:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
     124:	00200000 	eoreq	r0, r0, r0
     128:	00a40405 	adceq	r0, r4, r5, lsl #8
     12c:	04080000 	streq	r0, [r8], #-0
     130:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     134:	01400900 	cmpeq	r0, r0, lsl #18
     138:	400a0000 	andmi	r0, sl, r0
     13c:	00000001 	andeq	r0, r0, r1
     140:	00af0405 	adceq	r0, pc, r5, lsl #8
     144:	04050000 	streq	r0, [r5], #-0
     148:	00000135 	andeq	r0, r0, r5, lsr r1
     14c:	0005cf06 	andeq	ip, r5, r6, lsl #30
     150:	af150400 	svcge	0x00150400
     154:	0b000000 	bleq	15c <startup-0x1ffffea4>
     158:	00000162 	andeq	r0, r0, r2, ror #2
     15c:	00000162 	andeq	r0, r0, r2, ror #2
     160:	0405000c 	streq	r0, [r5], #-12
     164:	0000014c 	andeq	r0, r0, ip, asr #2
     168:	0004940d 	andeq	r9, r4, sp, lsl #8
     16c:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
     170:	0d000001 	stceq	0, cr0, [r0, #-4]
     174:	00000385 	andeq	r0, r0, r5, lsl #7
     178:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
     17c:	98060000 	stmdals	r6, {}	; <UNPREDICTABLE>
     180:	05000005 	streq	r0, [r0, #-5]
     184:	00005b24 	andeq	r5, r0, r4, lsr #22
     188:	017e0b00 	cmneq	lr, r0, lsl #22
     18c:	019a0000 	orrseq	r0, sl, r0
     190:	9a0e0000 	bls	380198 <startup-0x1fc7fe68>
     194:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     198:	04040003 	streq	r0, [r4], #-3
     19c:	00036c07 	andeq	r6, r3, r7, lsl #24
     1a0:	0f3f0d00 	svceq	0x003f0d00
     1a4:	2b050000 	blcs	1401ac <startup-0x1febfe54>
     1a8:	00000189 	andeq	r0, r0, r9, lsl #3
     1ac:	0001f20d 	andeq	pc, r1, sp, lsl #4
     1b0:	892c0500 	stmdbhi	ip!, {r8, sl}
     1b4:	0d000001 	stceq	0, cr0, [r0, #-4]
     1b8:	0000041f 	andeq	r0, r0, pc, lsl r4
     1bc:	01892d05 	orreq	r2, r9, r5, lsl #26
     1c0:	dc0d0000 	stcle	0, cr0, [sp], {-0}
     1c4:	05000002 	streq	r0, [r0, #-2]
     1c8:	0001892e 	andeq	r8, r1, lr, lsr #18
     1cc:	026c0d00 	rsbeq	r0, ip, #0, 26
     1d0:	2f050000 	svccs	0x00050000
     1d4:	00000189 	andeq	r0, r0, r9, lsl #3
     1d8:	0005b00d 	andeq	fp, r5, sp
     1dc:	89300500 	ldmdbhi	r0!, {r8, sl}
     1e0:	0d000001 	stceq	0, cr0, [r0, #-4]
     1e4:	000005a0 	andeq	r0, r0, r0, lsr #11
     1e8:	01893105 	orreq	r3, r9, r5, lsl #2
     1ec:	5b0b0000 	blpl	2c01f4 <startup-0x1fd3fe0c>
     1f0:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
     1f4:	0f000001 	svceq	0x00000001
     1f8:	0000019a 	muleq	r0, sl, r1
     1fc:	3d100077 	ldccc	0, cr0, [r0, #-476]	; 0xfffffe24
     200:	06000002 	streq	r0, [r0], -r2
     204:	0001ee03 	andeq	lr, r1, r3, lsl #28
     208:	94030500 	strls	r0, [r3], #-1280	; 0xfffffb00
     20c:	11200051 	qsubne	r0, r1, r0
     210:	00000436 	andeq	r0, r0, r6, lsr r4
     214:	01ee0307 	mvneq	r0, r7, lsl #6
     218:	03050000 	movweq	r0, #20480	; 0x5000
     21c:	2000520c 	andcs	r5, r0, ip, lsl #4
     220:	0004f211 	andeq	pc, r4, r1, lsl r2	; <UNPREDICTABLE>
     224:	ee030800 	cdp	8, 0, cr0, cr3, cr0, {0}
     228:	05000001 	streq	r0, [r0, #-1]
     22c:	00528403 	subseq	r8, r2, r3, lsl #8
     230:	005b0b20 	subseq	r0, fp, r0, lsr #22
     234:	02420000 	subeq	r0, r2, #0
     238:	9a0e0000 	bls	380240 <startup-0x1fc7fdc0>
     23c:	17000001 	strne	r0, [r0, -r1]
     240:	30110001 	andscc	r0, r1, r1
     244:	09000001 	stmdbeq	r0, {r0}
     248:	00023103 	andeq	r3, r2, r3, lsl #2
     24c:	fc030500 	stc2	5, cr0, [r3], {-0}
     250:	11200052 	qsubne	r0, r2, r0
     254:	00000392 	muleq	r0, r2, r3
     258:	0231030a 	eorseq	r0, r1, #671088640	; 0x28000000
     25c:	03050000 	movweq	r0, #20480	; 0x5000
     260:	20005414 	andcs	r5, r0, r4, lsl r4
     264:	00032f11 	andeq	r2, r3, r1, lsl pc
     268:	31030b00 	tstcc	r3, r0, lsl #22
     26c:	05000002 	streq	r0, [r0, #-2]
     270:	00552c03 	subseq	r2, r5, r3, lsl #24
     274:	005b0b20 	subseq	r0, fp, r0, lsr #22
     278:	02860000 	addeq	r0, r6, #0
     27c:	9a0e0000 	bls	380284 <startup-0x1fc7fd7c>
     280:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     284:	49110003 	ldmdbmi	r1, {r0, r1}
     288:	0c000004 	stceq	0, cr0, [r0], {4}
     28c:	00027503 	andeq	r7, r2, r3, lsl #10
     290:	44030500 	strmi	r0, [r3], #-1280	; 0xfffffb00
     294:	11200056 	qsubne	r0, r6, r0
     298:	00000027 	andeq	r0, r0, r7, lsr #32
     29c:	0275030d 	rsbseq	r0, r5, #872415232	; 0x34000000
     2a0:	03050000 	movweq	r0, #20480	; 0x5000
     2a4:	20005a44 	andcs	r5, r0, r4, asr #20
     2a8:	00000011 	andeq	r0, r0, r1, lsl r0
     2ac:	75030e00 	strvc	r0, [r3, #-3584]	; 0xfffff200
     2b0:	05000002 	streq	r0, [r0, #-2]
     2b4:	005e4403 	subseq	r4, lr, r3, lsl #8
     2b8:	005b0b20 	subseq	r0, fp, r0, lsr #22
     2bc:	02c90000 	sbceq	r0, r9, #0
     2c0:	9a0f0000 	bls	3c02c8 <startup-0x1fc3fd38>
     2c4:	d1000001 	tstle	r0, r1
     2c8:	01741100 	cmneq	r4, r0, lsl #2
     2cc:	030f0000 	movweq	r0, #61440	; 0xf000
     2d0:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
     2d4:	62440305 	subvs	r0, r4, #335544320	; 0x14000000
     2d8:	75112000 	ldrvc	r2, [r1, #-0]
     2dc:	10000003 	andne	r0, r0, r3
     2e0:	0002b903 	andeq	fp, r2, r3, lsl #18
     2e4:	18030500 	stmdane	r3, {r8, sl}
     2e8:	11200063 			; <UNDEFINED> instruction: 0x11200063
     2ec:	000001ca 	andeq	r0, r0, sl, asr #3
     2f0:	02b90311 	adcseq	r0, r9, #1140850688	; 0x44000000
     2f4:	03050000 	movweq	r0, #20480	; 0x5000
     2f8:	200063ec 	andcs	r6, r0, ip, ror #7
     2fc:	00058e07 	andeq	r8, r5, r7, lsl #28
     300:	04121400 	ldreq	r1, [r2], #-1024	; 0xfffffc00
     304:	00000345 	andeq	r0, r0, r5, asr #6
     308:	0013ce03 	andseq	ip, r3, r3, lsl #28
     30c:	45051200 	strmi	r1, [r5, #-512]	; 0xfffffe00
     310:	00000003 	andeq	r0, r0, r3
     314:	00023003 	andeq	r3, r2, r3
     318:	45061200 	strmi	r1, [r6, #-512]	; 0xfffffe00
     31c:	04000003 	streq	r0, [r0], #-3
     320:	00035903 	andeq	r5, r3, r3, lsl #18
     324:	2e081200 	cdpcs	2, 0, cr1, cr8, cr0, {0}
     328:	08000001 	stmdaeq	r0, {r0}
     32c:	00034903 	andeq	r4, r3, r3, lsl #18
     330:	2e091200 	cdpcs	2, 0, cr1, cr9, cr0, {0}
     334:	0c000001 	stceq	0, cr0, [r0], {1}
     338:	00023503 	andeq	r3, r2, r3, lsl #10
     33c:	680c1200 	stmdavs	ip, {r9, ip}
     340:	10000003 	andne	r0, r0, r3
     344:	4b040500 	blmi	10174c <startup-0x1fefe8b4>
     348:	04000003 	streq	r0, [r0], #-3
     34c:	041a0801 	ldreq	r0, [sl], #-2049	; 0xfffff7ff
     350:	62090000 	andvs	r0, r9, #0
     354:	0a000003 	beq	368 <startup-0x1ffffc98>
     358:	00000362 	andeq	r0, r0, r2, ror #6
     35c:	00012e0a 	andeq	r2, r1, sl, lsl #28
     360:	04050000 	streq	r0, [r5], #-0
     364:	000002fc 	strdeq	r0, [r0], -ip
     368:	03520405 	cmpeq	r2, #83886080	; 0x5000000
     36c:	8f060000 	svchi	0x00060000
     370:	12000005 	andne	r0, r0, #5
     374:	0002fc0d 	andeq	pc, r2, sp, lsl #24
     378:	04df1100 	ldrbeq	r1, [pc], #256	; 380 <startup-0x1ffffc80>
     37c:	03130000 	tsteq	r3, #0
     380:	00000275 	andeq	r0, r0, r5, ror r2
     384:	64c00305 	strbvs	r0, [r0], #773	; 0x305
     388:	02042000 	andeq	r2, r4, #0
     38c:	0002f407 	andeq	pc, r2, r7, lsl #8
     390:	051c1000 	ldreq	r1, [ip, #-0]
     394:	24010000 	strcs	r0, [r1], #-0
     398:	0000012e 	andeq	r0, r0, lr, lsr #2
     39c:	2f0c0305 	svccs	0x000c0305
     3a0:	0f102000 	svceq	0x00102000
     3a4:	01000001 	tsteq	r0, r1
     3a8:	00009e3c 	andeq	r9, r0, ip, lsr lr
     3ac:	54030500 	strpl	r0, [r3], #-1280	; 0xfffffb00
     3b0:	1020002e 	eorne	r0, r0, lr, lsr #32
     3b4:	00000167 	andeq	r0, r0, r7, ror #2
     3b8:	009e3d01 	addseq	r3, lr, r1, lsl #26
     3bc:	03050000 	movweq	r0, #20480	; 0x5000
     3c0:	20002f00 	andcs	r2, r0, r0, lsl #30
     3c4:	0004ab10 	andeq	sl, r4, r0, lsl fp
     3c8:	9e3e0100 	rsflse	f0, f6, f0
     3cc:	05000000 	streq	r0, [r0, #-0]
     3d0:	002f1403 	eoreq	r1, pc, r3, lsl #8
     3d4:	67621220 	strbvs	r1, [r2, -r0, lsr #4]!
     3d8:	9e3f0100 	rsflse	f0, f7, f0
     3dc:	05000000 	streq	r0, [r0, #-0]
     3e0:	002e9c03 	eoreq	r9, lr, r3, lsl #24
     3e4:	05df1020 	ldrbeq	r1, [pc, #32]	; 40c <startup-0x1ffffbf4>
     3e8:	42010000 	andmi	r0, r1, #0
     3ec:	0000009e 	muleq	r0, lr, r0
     3f0:	2e7c0305 	cdpcs	3, 7, cr0, cr12, cr5, {0}
     3f4:	a0102000 	andsge	r2, r0, r0
     3f8:	01000004 	tsteq	r0, r4
     3fc:	00009e43 	andeq	r9, r0, r3, asr #28
     400:	08030500 	stmdaeq	r3, {r8, sl}
     404:	1020002f 	eorne	r0, r0, pc, lsr #32
     408:	00000051 	andeq	r0, r0, r1, asr r0
     40c:	009e4401 	addseq	r4, lr, r1, lsl #8
     410:	03050000 	movweq	r0, #20480	; 0x5000
     414:	20002eb8 			; <UNDEFINED> instruction: 0x20002eb8
     418:	00032410 	andeq	r2, r3, r0, lsl r4
     41c:	9e450100 	dvflss	f0, f5, f0
     420:	05000000 	streq	r0, [r0, #-0]
     424:	002f2403 	eoreq	r2, pc, r3, lsl #8
     428:	04b71020 	ldrteq	r1, [r7], #32
     42c:	46010000 	strmi	r0, [r1], -r0
     430:	0000009e 	muleq	r0, lr, r0
     434:	2ef00305 	cdpcs	3, 15, cr0, cr0, cr5, {0}
     438:	ce102000 	cdpgt	0, 1, cr2, cr0, cr0, {0}
     43c:	01000003 	tsteq	r0, r3
     440:	00009e47 	andeq	r9, r0, r7, asr #28
     444:	04030500 	streq	r0, [r3], #-1280	; 0xfffffb00
     448:	1020002f 	eorne	r0, r0, pc, lsr #32
     44c:	0000053a 	andeq	r0, r0, sl, lsr r5
     450:	009e4801 	addseq	r4, lr, r1, lsl #16
     454:	03050000 	movweq	r0, #20480	; 0x5000
     458:	20002f10 	andcs	r2, r0, r0, lsl pc
     45c:	00019b10 	andeq	r9, r1, r0, lsl fp
     460:	9e490100 	dvflse	f0, f1, f0
     464:	05000000 	streq	r0, [r0, #-0]
     468:	002ed403 	eoreq	sp, lr, r3, lsl #8
     46c:	06051020 	streq	r1, [r5], -r0, lsr #32
     470:	4a010000 	bmi	40478 <startup-0x1ffbfb88>
     474:	0000009e 	muleq	r0, lr, r0
     478:	2e8c0305 	cdpcs	3, 8, cr0, cr12, cr5, {0}
     47c:	18102000 	ldmdane	r0, {sp}
     480:	01000003 	tsteq	r0, r3
     484:	0000624c 	andeq	r6, r0, ip, asr #4
     488:	80030500 	andhi	r0, r3, r0, lsl #10
     48c:	1020002e 	eorne	r0, r0, lr, lsr #32
     490:	000001db 	ldrdeq	r0, [r0], -fp
     494:	00624d01 	rsbeq	r4, r2, r1, lsl #26
     498:	03050000 	movweq	r0, #20480	; 0x5000
     49c:	20002ed8 	ldrdcs	r2, [r0], -r8
     4a0:	00018510 	andeq	r8, r1, r0, lsl r5
     4a4:	624e0100 	subvs	r0, lr, #0, 2
     4a8:	05000000 	streq	r0, [r0, #-0]
     4ac:	002ea003 	eoreq	sl, lr, r3
     4b0:	01bd1020 			; <UNDEFINED> instruction: 0x01bd1020
     4b4:	50010000 	andpl	r0, r1, r0
     4b8:	00000062 	andeq	r0, r0, r2, rrx
     4bc:	2f180305 	svccs	0x00180305
     4c0:	67102000 	ldrvs	r2, [r0, -r0]
     4c4:	01000000 	mrseq	r0, (UNDEF: 0)
     4c8:	00006252 	andeq	r6, r0, r2, asr r2
     4cc:	58030500 	stmdapl	r3, {r8, sl}
     4d0:	1020002e 	eorne	r0, r0, lr, lsr #32
     4d4:	000003f3 	strdeq	r0, [r0], -r3
     4d8:	00625301 	rsbeq	r5, r2, r1, lsl #6
     4dc:	03050000 	movweq	r0, #20480	; 0x5000
     4e0:	20002ef4 	strdcs	r2, [r0], -r4
     4e4:	0002bf10 	andeq	fp, r2, r0, lsl pc
     4e8:	62540100 	subsvs	r0, r4, #0, 2
     4ec:	05000000 	streq	r0, [r0, #-0]
     4f0:	002ec803 	eoreq	ip, lr, r3, lsl #16
     4f4:	04021020 	streq	r1, [r2], #-32	; 0xffffffe0
     4f8:	55010000 	strpl	r0, [r1, #-0]
     4fc:	00000062 	andeq	r0, r0, r2, rrx
     500:	2e900305 	cdpcs	3, 9, cr0, cr0, cr5, {0}
     504:	80102000 	andshi	r2, r0, r0
     508:	01000005 	tsteq	r0, r5
     50c:	00006256 	andeq	r6, r0, r6, asr r2
     510:	70030500 	andvc	r0, r3, r0, lsl #10
     514:	1020002e 	eorne	r0, r0, lr, lsr #32
     518:	0000055e 	andeq	r0, r0, lr, asr r5
     51c:	00625701 	rsbeq	r5, r2, r1, lsl #14
     520:	03050000 	movweq	r0, #20480	; 0x5000
     524:	20002eac 	andcs	r2, r0, ip, lsr #29
     528:	0004d010 	andeq	sp, r4, r0, lsl r0
     52c:	62580100 	subsvs	r0, r8, #0, 2
     530:	05000000 	streq	r0, [r0, #-0]
     534:	002ee403 	eoreq	lr, lr, r3, lsl #8
     538:	03d91020 	bicseq	r1, r9, #32
     53c:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
     540:	00000062 	andeq	r0, r0, r2, rrx
     544:	2e640305 	cdpcs	3, 6, cr0, cr4, cr5, {0}
     548:	bf102000 	svclt	0x00102000
     54c:	01000005 	tsteq	r0, r5
     550:	0000625a 	andeq	r6, r0, sl, asr r2
     554:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
     558:	1020002e 	eorne	r0, r0, lr, lsr #32
     55c:	00000359 	andeq	r0, r0, r9, asr r3
     560:	012e9001 			; <UNDEFINED> instruction: 0x012e9001
     564:	03050000 	movweq	r0, #20480	; 0x5000
     568:	20002e40 	andcs	r2, r0, r0, asr #28
     56c:	0004c110 	andeq	ip, r4, r0, lsl r1
     570:	2e910100 	fmlcss	f0, f1, f0
     574:	05000001 	streq	r0, [r0, #-1]
     578:	0068c003 	rsbeq	ip, r8, r3
     57c:	06001320 	streq	r1, [r0], -r0, lsr #6
     580:	92010000 	andls	r0, r1, #0
     584:	200001fc 	strdcs	r0, [r0], -ip
     588:	00000a80 	andeq	r0, r0, r0, lsl #21
     58c:	07c59c01 	strbeq	r9, [r5, r1, lsl #24]
     590:	61110000 	tstvs	r1, r0
     594:	01000003 	tsteq	r0, r3
     598:	00014ca0 	andeq	r4, r1, r0, lsr #25
     59c:	4c910200 	lfmmi	f0, 4, [r1], {0}
     5a0:	00054511 	andeq	r4, r5, r1, lsl r5
     5a4:	a4a10100 	strtge	r0, [r1], #256	; 0x100
     5a8:	02000000 	andeq	r0, r0, #0
     5ac:	10114091 	mulsne	r1, r1, r0
     5b0:	01000006 	tsteq	r0, r6
     5b4:	0007c5a2 	andeq	ip, r7, r2, lsr #11
     5b8:	b4910300 	ldrlt	r0, [r1], #768	; 0x300
     5bc:	045b117f 	ldrbeq	r1, [fp], #-383	; 0xfffffe81
     5c0:	aa010000 	bge	405c8 <startup-0x1ffbfa38>
     5c4:	0000014c 	andeq	r0, r0, ip, asr #2
     5c8:	7f909103 	svcvc	0x00909103
     5cc:	00014e11 	andeq	r4, r1, r1, lsl lr
     5d0:	a4ab0100 	strtge	r0, [fp], #256	; 0x100
     5d4:	03000000 	movweq	r0, #0
     5d8:	117f8491 			; <UNDEFINED> instruction: 0x117f8491
     5dc:	00000510 	andeq	r0, r0, r0, lsl r5
     5e0:	07c5ac01 	strbeq	sl, [r5, r1, lsl #24]
     5e4:	91030000 	mrsls	r0, (UNDEF: 3)
     5e8:	63117ef8 	tstvs	r1, #248, 28	; 0xf80
     5ec:	01000002 	tsteq	r0, r2
     5f0:	00014cb3 			; <UNDEFINED> instruction: 0x00014cb3
     5f4:	d4910300 	ldrle	r0, [r1], #768	; 0x300
     5f8:	03a3117e 			; <UNDEFINED> instruction: 0x03a3117e
     5fc:	b4010000 	strlt	r0, [r1], #-0
     600:	000000a4 	andeq	r0, r0, r4, lsr #1
     604:	7ec89103 	acsvce	f1, f3
     608:	00057411 	andeq	r7, r5, r1, lsl r4
     60c:	c5b50100 	ldrgt	r0, [r5, #256]!	; 0x100
     610:	03000007 	movweq	r0, #7
     614:	117ebc91 			; <UNDEFINED> instruction: 0x117ebc91
     618:	00000117 	andeq	r0, r0, r7, lsl r1
     61c:	014cbc01 	cmpeq	ip, r1, lsl #24
     620:	91030000 	mrsls	r0, (UNDEF: 3)
     624:	04117e98 	ldreq	r7, [r1], #-3736	; 0xfffff168
     628:	01000005 	tsteq	r0, r5
     62c:	0000a4bd 			; <UNDEFINED> instruction: 0x0000a4bd
     630:	8c910300 	ldchi	3, cr0, [r1], {0}
     634:	0141117e 	hvceq	4382	; 0x111e
     638:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
     63c:	000007c5 	andeq	r0, r0, r5, asr #15
     640:	7e809103 	sinvcs	f1, f3
     644:	0014d911 	andseq	sp, r4, r1, lsl r9
     648:	4cc50100 	stfmie	f0, [r5], {0}
     64c:	03000001 	movweq	r0, #1
     650:	117ddc91 			; <UNDEFINED> instruction: 0x117ddc91
     654:	0000159d 	muleq	r0, sp, r5
     658:	014cca01 	cmpeq	ip, r1, lsl #20
     65c:	91030000 	mrsls	r0, (UNDEF: 3)
     660:	de117db8 	mrcle	13, 0, r7, cr1, cr8, {5}
     664:	0100000b 	tsteq	r0, fp
     668:	00014ccf 	andeq	r4, r1, pc, asr #25
     66c:	94910300 	ldrls	r0, [r1], #768	; 0x300
     670:	0038117d 	eorseq	r1, r8, sp, ror r1
     674:	d5010000 	strle	r0, [r1, #-0]
     678:	0000014c 	andeq	r0, r0, ip, asr #2
     67c:	7cf09103 	ldfvcp	f1, [r0], #12
     680:	00052811 	andeq	r2, r5, r1, lsl r8
     684:	4cdb0100 	ldfmie	f0, [fp], {0}
     688:	03000001 	movweq	r0, #1
     68c:	117ccc91 			; <UNDEFINED> instruction: 0x117ccc91
     690:	0000052e 	andeq	r0, r0, lr, lsr #10
     694:	014cdd01 	cmpeq	ip, r1, lsl #26
     698:	91030000 	mrsls	r0, (UNDEF: 3)
     69c:	34117ca8 	ldrcc	r7, [r1], #-3240	; 0xfffff358
     6a0:	01000005 	tsteq	r0, r5
     6a4:	00014cdf 	ldrdeq	r4, [r1], -pc	; <UNPREDICTABLE>
     6a8:	84910300 	ldrhi	r0, [r1], #768	; 0x300
     6ac:	01b7117c 			; <UNDEFINED> instruction: 0x01b7117c
     6b0:	e1010000 	mrs	r0, (UNDEF: 1)
     6b4:	0000014c 	andeq	r0, r0, ip, asr #2
     6b8:	7be09103 	blvc	ff824acc <firstTime.4040+0xdf81c194>
     6bc:	00003f11 	andeq	r3, r0, r1, lsl pc
     6c0:	6ef80100 	cdpvs	1, 15, cr0, cr8, cr0, {0}
     6c4:	03000003 	movweq	r0, #3
     6c8:	117bcc91 			; <UNDEFINED> instruction: 0x117bcc91
     6cc:	00000161 	andeq	r0, r0, r1, ror #2
     6d0:	036ef901 	msreq	SPSR_fsx, #16384	; 0x4000
     6d4:	91030000 	mrsls	r0, (UNDEF: 3)
     6d8:	95117bb8 	ldrls	r7, [r1, #-3000]	; 0xfffff448
     6dc:	01000001 	tsteq	r0, r1
     6e0:	00036efa 	strdeq	r6, [r3], -sl
     6e4:	a4910300 	ldrge	r0, [r1], #768	; 0x300
     6e8:	01ab117b 			; <UNDEFINED> instruction: 0x01ab117b
     6ec:	fb010000 	blx	406f6 <startup-0x1ffbf90a>
     6f0:	0000036e 	andeq	r0, r0, lr, ror #6
     6f4:	7b909103 	blvc	fe424b08 <firstTime.4040+0xde41c1d0>
     6f8:	0001a511 	andeq	sl, r1, r1, lsl r5
     6fc:	6efc0100 	cdpvs	1, 15, cr0, cr12, cr0, {0}
     700:	03000003 	movweq	r0, #3
     704:	117afc91 			; <UNDEFINED> instruction: 0x117afc91
     708:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
     70c:	036efd01 	msreq	SPSR_fsx, #1, 26	; 0x40
     710:	91030000 	mrsls	r0, (UNDEF: 3)
     714:	04117ae8 	ldreq	r7, [r1], #-2792	; 0xfffff518
     718:	01000002 	tsteq	r0, r2
     71c:	00036efe 	strdeq	r6, [r3], -lr
     720:	d4910300 	ldrle	r0, [r1], #768	; 0x300
     724:	01ec117a 	mvneq	r1, sl, ror r1
     728:	ff010000 			; <UNDEFINED> instruction: 0xff010000
     72c:	0000036e 	andeq	r0, r0, lr, ror #6
     730:	7ac09103 	bvc	ff024b44 <firstTime.4040+0xdf01c20c>
     734:	0001c414 	andeq	ip, r1, r4, lsl r4
     738:	01000100 	mrseq	r0, (UNDEF: 16)
     73c:	0000036e 	andeq	r0, r0, lr, ror #6
     740:	7aac9103 	bvc	feb24b54 <firstTime.4040+0xdeb1c21c>
     744:	00020a14 	andeq	r0, r2, r4, lsl sl
     748:	01010100 	mrseq	r0, (UNDEF: 17)
     74c:	0000036e 	andeq	r0, r0, lr, ror #6
     750:	7a989103 	bvc	fe624b64 <firstTime.4040+0xde61c22c>
     754:	0005eb14 	andeq	lr, r5, r4, lsl fp
     758:	01020100 	mrseq	r0, (UNDEF: 18)
     75c:	0000036e 	andeq	r0, r0, lr, ror #6
     760:	7a849103 	bvc	fe124b74 <firstTime.4040+0xde11c23c>
     764:	0005f214 	andeq	pc, r5, r4, lsl r2	; <UNPREDICTABLE>
     768:	01030100 	mrseq	r0, (UNDEF: 19)
     76c:	0000036e 	andeq	r0, r0, lr, ror #6
     770:	79f09103 	ldmibvc	r0!, {r0, r1, r8, ip, pc}^
     774:	00055714 	andeq	r5, r5, r4, lsl r7
     778:	01040100 	mrseq	r0, (UNDEF: 20)
     77c:	0000036e 	andeq	r0, r0, lr, ror #6
     780:	79dc9103 	ldmibvc	ip, {r0, r1, r8, ip, pc}^
     784:	0006ec15 	andeq	lr, r6, r5, lsl ip
     788:	00055020 	andeq	r5, r5, r0, lsr #32
     78c:	02591400 	subseq	r1, r9, #0, 8
     790:	3d010000 	stccc	0, cr0, [r1, #-0]
     794:	00012e01 	andeq	r2, r1, r1, lsl #28
     798:	c8030500 	stmdagt	r3, {r8, sl}
     79c:	14200068 	strtne	r0, [r0], #-104	; 0xffffff98
     7a0:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
     7a4:	2e013e01 	cdpcs	14, 0, cr3, cr1, cr1, {0}
     7a8:	05000001 	streq	r0, [r0, #-1]
     7ac:	0068cc03 	rsbeq	ip, r8, r3, lsl #24
     7b0:	03071420 	movweq	r1, #29728	; 0x7420
     7b4:	3f010000 	svccc	0x00010000
     7b8:	00012e01 	andeq	r2, r1, r1, lsl #28
     7bc:	c4030500 	strgt	r0, [r3], #-1280	; 0xfffffb00
     7c0:	00200068 	eoreq	r0, r0, r8, rrx
     7c4:	00a40b00 	adceq	r0, r4, r0, lsl #22
     7c8:	07d50000 	ldrbeq	r0, [r5, r0]
     7cc:	9a0f0000 	bls	3c07d4 <startup-0x1fc3f82c>
     7d0:	00000001 	andeq	r0, r0, r1
     7d4:	03e71300 	mvneq	r1, #0, 6
     7d8:	5c010000 	stcpl	0, cr0, [r1], {-0}
     7dc:	20000034 	andcs	r0, r0, r4, lsr r0
     7e0:	000001c8 	andeq	r0, r0, r8, asr #3
     7e4:	08779c01 	ldmdaeq	r7!, {r0, sl, fp, ip, pc}^
     7e8:	21110000 	tstcs	r1, r0
     7ec:	01000001 	tsteq	r0, r1
     7f0:	00009e5d 	andeq	r9, r0, sp, asr lr
     7f4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     7f8:	00021011 	andeq	r1, r2, r1, lsl r0
     7fc:	9e610100 	powlss	f0, f1, f0
     800:	02000000 	andeq	r0, r0, #0
     804:	20117091 	mulscs	r1, r1, r0
     808:	01000002 	tsteq	r0, r2
     80c:	00009e65 	andeq	r9, r0, r5, ror #28
     810:	6c910200 	lfmvs	f0, 4, [r1], {0}
     814:	00028911 	andeq	r8, r2, r1, lsl r9
     818:	9e690100 	powlse	f0, f1, f0
     81c:	02000000 	andeq	r0, r0, #0
     820:	92116891 	andsls	r6, r1, #9502720	; 0x910000
     824:	01000002 	tsteq	r0, r2
     828:	00009e6d 	andeq	r9, r0, sp, ror #28
     82c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     830:	00029b11 	andeq	r9, r2, r1, lsl fp
     834:	9e710100 	rpwlss	f0, f1, f0
     838:	02000000 	andeq	r0, r0, #0
     83c:	a4116091 	ldrge	r6, [r1], #-145	; 0xffffff6f
     840:	01000002 	tsteq	r0, r2
     844:	00009e75 	andeq	r9, r0, r5, ror lr
     848:	5c910200 	lfmpl	f0, 4, [r1], {0}
     84c:	0002ad11 	andeq	sl, r2, r1, lsl sp
     850:	9e790100 	rpwlse	f0, f1, f0
     854:	02000000 	andeq	r0, r0, #0
     858:	b6115891 			; <UNDEFINED> instruction: 0xb6115891
     85c:	01000002 	tsteq	r0, r2
     860:	00009e7c 	andeq	r9, r0, ip, ror lr
     864:	54910200 	ldrpl	r0, [r1], #512	; 0x200
     868:	00005d11 	andeq	r5, r0, r1, lsl sp
     86c:	9e7f0100 	rpwlse	f0, f7, f0
     870:	02000000 	andeq	r0, r0, #0
     874:	16005091 			; <UNDEFINED> instruction: 0x16005091
     878:	00000250 	andeq	r0, r0, r0, asr r2
     87c:	00102801 	andseq	r2, r0, r1, lsl #16
     880:	00242000 	eoreq	r2, r4, r0
     884:	9c010000 	stcls	0, cr0, [r1], {-0}
     888:	00015917 	andeq	r5, r1, r7, lsl r9
     88c:	00320100 	eorseq	r0, r2, r0, lsl #2
     890:	0c200000 	stceq	0, cr0, [r0], #-0
     894:	01000000 	mrseq	r0, (UNDEF: 0)
     898:	01e0009c 			; <UNDEFINED> instruction: 0x01e0009c
     89c:	00040000 	andeq	r0, r4, r0
     8a0:	0000013d 	andeq	r0, r0, sp, lsr r1
     8a4:	00770104 	rsbseq	r0, r7, r4, lsl #2
     8a8:	2f0c0000 	svccs	0x000c0000
     8ac:	7c000006 	stcvc	0, cr0, [r0], {6}
     8b0:	5620000c 	strtpl	r0, [r0], -ip
     8b4:	8f000000 	svchi	0x00000000
     8b8:	02000002 	andeq	r0, r0, #2
     8bc:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
     8c0:	03000000 	movweq	r0, #0
     8c4:	000002d6 	ldrdeq	r0, [r0], -r6
     8c8:	004e0702 	subeq	r0, lr, r2, lsl #14
     8cc:	03000000 	movweq	r0, #0
     8d0:	000005f9 	strdeq	r0, [r0], -r9
     8d4:	004e0802 	subeq	r0, lr, r2, lsl #16
     8d8:	03040000 	movweq	r0, #16384	; 0x4000
     8dc:	00001009 	andeq	r1, r0, r9
     8e0:	00550902 	subseq	r0, r5, r2, lsl #18
     8e4:	00080000 	andeq	r0, r8, r0
     8e8:	fa070404 	blx	1c1900 <startup-0x1fe3e700>
     8ec:	05000002 	streq	r0, [r0, #-2]
     8f0:	00005b04 	andeq	r5, r0, r4, lsl #22
     8f4:	08010400 	stmdaeq	r1, {sl}
     8f8:	00000411 	andeq	r0, r0, r1, lsl r4
     8fc:	00115b06 	andseq	r5, r1, r6, lsl #22
     900:	210a0200 	mrscs	r0, R10_fiq
     904:	07000000 	streq	r0, [r0, -r0]
     908:	00000016 	andeq	r0, r0, r6, lsl r0
     90c:	9e06030c 	cdpls	3, 0, cr0, cr6, cr12, {0}
     910:	03000000 	movweq	r0, #0
     914:	000004e7 	andeq	r0, r0, r7, ror #9
     918:	009e0703 	addseq	r0, lr, r3, lsl #14
     91c:	03000000 	movweq	r0, #0
     920:	0000001d 	andeq	r0, r0, sp, lsl r0
     924:	009e0803 	addseq	r0, lr, r3, lsl #16
     928:	03040000 	movweq	r0, #16384	; 0x4000
     92c:	00000012 	andeq	r0, r0, r2, lsl r0
     930:	009e0903 	addseq	r0, lr, r3, lsl #18
     934:	00080000 	andeq	r0, r8, r0
     938:	00620405 	rsbeq	r0, r2, r5, lsl #8
     93c:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
     940:	0300000c 	movweq	r0, #12
     944:	00006d0a 	andeq	r6, r0, sl, lsl #26
     948:	05ce0700 	strbeq	r0, [lr, #1792]	; 0x700
     94c:	04240000 	strteq	r0, [r4], #-0
     950:	00012806 	andeq	r2, r1, r6, lsl #16
     954:	03ae0300 			; <UNDEFINED> instruction: 0x03ae0300
     958:	07040000 	streq	r0, [r4, -r0]
     95c:	00000128 	andeq	r0, r0, r8, lsr #2
     960:	05da0300 	ldrbeq	r0, [sl, #768]	; 0x300
     964:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     968:	0000012e 	andeq	r0, r0, lr, lsr #2
     96c:	05520304 	ldrbeq	r0, [r2, #-772]	; 0xfffffcfc
     970:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
     974:	0000012e 	andeq	r0, r0, lr, lsr #2
     978:	056d0308 	strbeq	r0, [sp, #-776]!	; 0xfffffcf8
     97c:	0c040000 	stceq	0, cr0, [r4], {-0}
     980:	00000146 	andeq	r0, r0, r6, asr #2
     984:	02cf030c 	sbceq	r0, pc, #12, 6	; 0x30000000
     988:	0d040000 	stceq	0, cr0, [r4, #-0]
     98c:	00000146 	andeq	r0, r0, r6, asr #2
     990:	03c00310 	biceq	r0, r0, #16, 6	; 0x40000000
     994:	10040000 	andne	r0, r4, r0
     998:	0000012e 	andeq	r0, r0, lr, lsr #2
     99c:	00480314 	subeq	r0, r8, r4, lsl r3
     9a0:	11040000 	mrsne	r0, (UNDEF: 4)
     9a4:	0000012e 	andeq	r0, r0, lr, lsr #2
     9a8:	033f0318 	teqeq	pc, #24, 6	; 0x60000000
     9ac:	12040000 	andne	r0, r4, #0
     9b0:	0000012e 	andeq	r0, r0, lr, lsr #2
     9b4:	034f031c 	movteq	r0, #62236	; 0xf31c
     9b8:	13040000 	movwne	r0, #16384	; 0x4000
     9bc:	0000012e 	andeq	r0, r0, lr, lsr #2
     9c0:	04050020 	streq	r0, [r5], #-32	; 0xffffffe0
     9c4:	000000a4 	andeq	r0, r0, r4, lsr #1
     9c8:	69050408 	stmdbvs	r5, {r3, sl}
     9cc:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     9d0:	00000140 	andeq	r0, r0, r0, asr #2
     9d4:	0001400a 	andeq	r4, r1, sl
     9d8:	04050000 	streq	r0, [r5], #-0
     9dc:	000000af 	andeq	r0, r0, pc, lsr #1
     9e0:	01350405 	teqeq	r5, r5, lsl #8
     9e4:	cf060000 	svcgt	0x00060000
     9e8:	04000005 	streq	r0, [r0], #-5
     9ec:	0000af15 	andeq	sl, r0, r5, lsl pc
     9f0:	01620b00 	cmneq	r2, r0, lsl #22
     9f4:	01620000 	cmneq	r2, r0
     9f8:	000c0000 	andeq	r0, ip, r0
     9fc:	014c0405 	cmpeq	ip, r5, lsl #8
     a00:	940d0000 	strls	r0, [sp], #-0
     a04:	04000004 	streq	r0, [r0], #-4
     a08:	0001571c 	andeq	r5, r1, ip, lsl r7
     a0c:	03850d00 	orreq	r0, r5, #0, 26
     a10:	1d040000 	stcne	0, cr0, [r4, #-0]
     a14:	0000012e 	andeq	r0, r0, lr, lsr #2
     a18:	6c070404 	cfstrsvs	mvf0, [r7], {4}
     a1c:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
     a20:	00000168 	andeq	r0, r0, r8, ror #2
     a24:	03050301 	movweq	r0, #21249	; 0x5301
     a28:	20002f28 	andcs	r2, r0, r8, lsr #30
     a2c:	0001730e 	andeq	r7, r1, lr, lsl #6
     a30:	05040100 	streq	r0, [r4, #-256]	; 0xffffff00
     a34:	002e4403 	eoreq	r4, lr, r3, lsl #8
     a38:	061e0f20 	ldreq	r0, [lr], -r0, lsr #30
     a3c:	0c010000 	stceq	0, cr0, [r1], {-0}
     a40:	20000c8c 	andcs	r0, r0, ip, lsl #25
     a44:	00000046 	andeq	r0, r0, r6, asr #32
     a48:	01c39c01 	biceq	r9, r3, r1, lsl #24
     a4c:	62100000 	andsvs	r0, r0, #0
     a50:	01000006 	tsteq	r0, r6
     a54:	0001620c 	andeq	r6, r1, ip, lsl #4
     a58:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     a5c:	02cf1100 	sbceq	r1, pc, #0, 2
     a60:	07010000 	streq	r0, [r1, -r0]
     a64:	20000c7c 	andcs	r0, r0, ip, ror ip
     a68:	00000010 	andeq	r0, r0, r0, lsl r0
     a6c:	62109c01 	andsvs	r9, r0, #256	; 0x100
     a70:	01000006 	tsteq	r0, r6
     a74:	00016207 	andeq	r6, r1, r7, lsl #4
     a78:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     a7c:	052b0000 	streq	r0, [fp, #-0]!
     a80:	00040000 	andeq	r0, r4, r0
     a84:	00000223 	andeq	r0, r0, r3, lsr #4
     a88:	00770104 	rsbseq	r0, r7, r4, lsl #2
     a8c:	a20c0000 	andge	r0, ip, #0
     a90:	d4000008 	strle	r0, [r0], #-8
     a94:	a820000c 	stmdage	r0!, {r2, r3}
     a98:	1d000002 	stcne	0, cr0, [r0, #-8]
     a9c:	02000003 	andeq	r0, r0, #3
     aa0:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
     aa4:	03000000 	movweq	r0, #0
     aa8:	000002d6 	ldrdeq	r0, [r0], -r6
     aac:	004e0702 	subeq	r0, lr, r2, lsl #14
     ab0:	03000000 	movweq	r0, #0
     ab4:	000005f9 	strdeq	r0, [r0], -r9
     ab8:	004e0802 	subeq	r0, lr, r2, lsl #16
     abc:	03040000 	movweq	r0, #16384	; 0x4000
     ac0:	00001009 	andeq	r1, r0, r9
     ac4:	00550902 	subseq	r0, r5, r2, lsl #18
     ac8:	00080000 	andeq	r0, r8, r0
     acc:	fa070404 	blx	1c1ae4 <startup-0x1fe3e51c>
     ad0:	05000002 	streq	r0, [r0, #-2]
     ad4:	00005b04 	andeq	r5, r0, r4, lsl #22
     ad8:	08010400 	stmdaeq	r1, {sl}
     adc:	00000411 	andeq	r0, r0, r1, lsl r4
     ae0:	00115b06 	andseq	r5, r1, r6, lsl #22
     ae4:	210a0200 	mrscs	r0, R10_fiq
     ae8:	07000000 	streq	r0, [r0, -r0]
     aec:	00000016 	andeq	r0, r0, r6, lsl r0
     af0:	9e06030c 	cdpls	3, 0, cr0, cr6, cr12, {0}
     af4:	03000000 	movweq	r0, #0
     af8:	000004e7 	andeq	r0, r0, r7, ror #9
     afc:	009e0703 	addseq	r0, lr, r3, lsl #14
     b00:	03000000 	movweq	r0, #0
     b04:	0000001d 	andeq	r0, r0, sp, lsl r0
     b08:	009e0803 	addseq	r0, lr, r3, lsl #16
     b0c:	03040000 	movweq	r0, #16384	; 0x4000
     b10:	00000012 	andeq	r0, r0, r2, lsl r0
     b14:	009e0903 	addseq	r0, lr, r3, lsl #18
     b18:	00080000 	andeq	r0, r8, r0
     b1c:	00620405 	rsbeq	r0, r2, r5, lsl #8
     b20:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
     b24:	0300000c 	movweq	r0, #12
     b28:	00006d0a 	andeq	r6, r0, sl, lsl #26
     b2c:	05ce0700 	strbeq	r0, [lr, #1792]	; 0x700
     b30:	04240000 	strteq	r0, [r4], #-0
     b34:	00012806 	andeq	r2, r1, r6, lsl #16
     b38:	03ae0300 			; <UNDEFINED> instruction: 0x03ae0300
     b3c:	07040000 	streq	r0, [r4, -r0]
     b40:	00000128 	andeq	r0, r0, r8, lsr #2
     b44:	05da0300 	ldrbeq	r0, [sl, #768]	; 0x300
     b48:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     b4c:	0000012e 	andeq	r0, r0, lr, lsr #2
     b50:	05520304 	ldrbeq	r0, [r2, #-772]	; 0xfffffcfc
     b54:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
     b58:	0000012e 	andeq	r0, r0, lr, lsr #2
     b5c:	056d0308 	strbeq	r0, [sp, #-776]!	; 0xfffffcf8
     b60:	0c040000 	stceq	0, cr0, [r4], {-0}
     b64:	00000146 	andeq	r0, r0, r6, asr #2
     b68:	02cf030c 	sbceq	r0, pc, #12, 6	; 0x30000000
     b6c:	0d040000 	stceq	0, cr0, [r4, #-0]
     b70:	00000146 	andeq	r0, r0, r6, asr #2
     b74:	03c00310 	biceq	r0, r0, #16, 6	; 0x40000000
     b78:	10040000 	andne	r0, r4, r0
     b7c:	0000012e 	andeq	r0, r0, lr, lsr #2
     b80:	00480314 	subeq	r0, r8, r4, lsl r3
     b84:	11040000 	mrsne	r0, (UNDEF: 4)
     b88:	0000012e 	andeq	r0, r0, lr, lsr #2
     b8c:	033f0318 	teqeq	pc, #24, 6	; 0x60000000
     b90:	12040000 	andne	r0, r4, #0
     b94:	0000012e 	andeq	r0, r0, lr, lsr #2
     b98:	034f031c 	movteq	r0, #62236	; 0xf31c
     b9c:	13040000 	movwne	r0, #16384	; 0x4000
     ba0:	0000012e 	andeq	r0, r0, lr, lsr #2
     ba4:	04050020 	streq	r0, [r5], #-32	; 0xffffffe0
     ba8:	000000a4 	andeq	r0, r0, r4, lsr #1
     bac:	69050408 	stmdbvs	r5, {r3, sl}
     bb0:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     bb4:	00000140 	andeq	r0, r0, r0, asr #2
     bb8:	0001400a 	andeq	r4, r1, sl
     bbc:	04050000 	streq	r0, [r5], #-0
     bc0:	000000af 	andeq	r0, r0, pc, lsr #1
     bc4:	01350405 	teqeq	r5, r5, lsl #8
     bc8:	cf060000 	svcgt	0x00060000
     bcc:	04000005 	streq	r0, [r0], #-5
     bd0:	0000af15 	andeq	sl, r0, r5, lsl pc
     bd4:	01620b00 	cmneq	r2, r0, lsl #22
     bd8:	01620000 	cmneq	r2, r0
     bdc:	000c0000 	andeq	r0, ip, r0
     be0:	014c0405 	cmpeq	ip, r5, lsl #8
     be4:	940d0000 	strls	r0, [sp], #-0
     be8:	04000004 	streq	r0, [r0], #-4
     bec:	0001571c 	andeq	r5, r1, ip, lsl r7
     bf0:	03850d00 	orreq	r0, r5, #0, 26
     bf4:	1d040000 	stcne	0, cr0, [r4, #-0]
     bf8:	0000012e 	andeq	r0, r0, lr, lsr #2
     bfc:	00005b0b 	andeq	r5, r0, fp, lsl #22
     c00:	00018e00 	andeq	r8, r1, r0, lsl #28
     c04:	018e0e00 	orreq	r0, lr, r0, lsl #28
     c08:	000b0000 	andeq	r0, fp, r0
     c0c:	6c070404 	cfstrsvs	mvf0, [r7], {4}
     c10:	0f000003 	svceq	0x00000003
     c14:	00000867 	andeq	r0, r0, r7, ror #16
     c18:	017e0305 	cmneq	lr, r5, lsl #6
     c1c:	03050000 	movweq	r0, #20480	; 0x5000
     c20:	200068d0 	ldrdcs	r6, [r0], -r0
     c24:	0007610f 	andeq	r6, r7, pc, lsl #2
     c28:	7e030600 	cfmadd32vc	mvax0, mvfx0, mvfx3, mvfx0
     c2c:	05000001 	streq	r0, [r0, #-1]
     c30:	0068dc03 	rsbeq	sp, r8, r3, lsl #24
     c34:	077c0f20 	ldrbeq	r0, [ip, -r0, lsr #30]!
     c38:	03070000 	movweq	r0, #28672	; 0x7000
     c3c:	0000017e 	andeq	r0, r0, lr, ror r1
     c40:	68e80305 	stmiavs	r8!, {r0, r2, r8, r9}^
     c44:	dd0f2000 	stcle	0, cr2, [pc, #-0]	; c4c <startup-0x1ffff3b4>
     c48:	08000006 	stmdaeq	r0, {r1, r2}
     c4c:	00017e03 	andeq	r7, r1, r3, lsl #28
     c50:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
     c54:	0f200068 	svceq	0x00200068
     c58:	0000078d 	andeq	r0, r0, sp, lsl #15
     c5c:	017e0309 	cmneq	lr, r9, lsl #6
     c60:	03050000 	movweq	r0, #20480	; 0x5000
     c64:	20006900 	andcs	r6, r0, r0, lsl #18
     c68:	0008cf0f 	andeq	ip, r8, pc, lsl #30
     c6c:	7e030a00 	vmlavc.f32	s0, s6, s0
     c70:	05000001 	streq	r0, [r0, #-1]
     c74:	00690c03 	rsbeq	r0, r9, r3, lsl #24
     c78:	084b0f20 	stmdaeq	fp, {r5, r8, r9, sl, fp}^
     c7c:	030b0000 	movweq	r0, #45056	; 0xb000
     c80:	0000017e 	andeq	r0, r0, lr, ror r1
     c84:	69180305 	ldmdbvs	r8, {r0, r2, r8, r9}
     c88:	b00f2000 	andlt	r2, pc, r0
     c8c:	0c000007 	stceq	0, cr0, [r0], {7}
     c90:	00017e03 	andeq	r7, r1, r3, lsl #28
     c94:	24030500 	strcs	r0, [r3], #-1280	; 0xfffffb00
     c98:	0f200069 	svceq	0x00200069
     c9c:	000006ed 	andeq	r0, r0, sp, ror #13
     ca0:	017e030d 	cmneq	lr, sp, lsl #6
     ca4:	03050000 	movweq	r0, #20480	; 0x5000
     ca8:	20006930 	andcs	r6, r0, r0, lsr r9
     cac:	00071b0f 	andeq	r1, r7, pc, lsl #22
     cb0:	7e030e00 	cdpvc	14, 0, cr0, cr3, cr0, {0}
     cb4:	05000001 	streq	r0, [r0, #-1]
     cb8:	00693c03 	rsbeq	r3, r9, r3, lsl #24
     cbc:	07fd0f20 	ldrbeq	r0, [sp, r0, lsr #30]!
     cc0:	030f0000 	movweq	r0, #61440	; 0xf000
     cc4:	0000017e 	andeq	r0, r0, lr, ror r1
     cc8:	69480305 	stmdbvs	r8, {r0, r2, r8, r9}^
     ccc:	a1102000 	tstge	r0, r0
     cd0:	01000006 	tsteq	r0, r6
     cd4:	00009e11 	andeq	r9, r0, r1, lsl lr
     cd8:	e8030500 	stmda	r3, {r8, sl}
     cdc:	10200031 	eorne	r0, r0, r1, lsr r0
     ce0:	00000671 	andeq	r0, r0, r1, ror r6
     ce4:	009e1201 	addseq	r1, lr, r1, lsl #4
     ce8:	03050000 	movweq	r0, #20480	; 0x5000
     cec:	20003200 	andcs	r3, r0, r0, lsl #4
     cf0:	0006c710 	andeq	ip, r6, r0, lsl r7
     cf4:	9e130100 	muflss	f0, f3, f0
     cf8:	05000000 	streq	r0, [r0, #-0]
     cfc:	0030b803 	eorseq	fp, r0, r3, lsl #16
     d00:	07a61020 	streq	r1, [r6, r0, lsr #32]!
     d04:	14010000 	strne	r0, [r1], #-0
     d08:	0000009e 	muleq	r0, lr, r0
     d0c:	31fc0305 	mvnscc	r0, r5, lsl #6
     d10:	71102000 	tstvc	r0, r0
     d14:	01000007 	tsteq	r0, r7
     d18:	00009e15 	andeq	r9, r0, r5, lsl lr
     d1c:	d4030500 	strle	r0, [r3], #-1280	; 0xfffffb00
     d20:	10200031 	eorne	r0, r0, r1, lsr r0
     d24:	00000689 	andeq	r0, r0, r9, lsl #13
     d28:	009e1601 	addseq	r1, lr, r1, lsl #12
     d2c:	03050000 	movweq	r0, #20480	; 0x5000
     d30:	200030c8 	andcs	r3, r0, r8, asr #1
     d34:	0006fe10 	andeq	pc, r6, r0, lsl lr	; <UNPREDICTABLE>
     d38:	9e170100 	muflss	f0, f7, f0
     d3c:	05000000 	streq	r0, [r0, #-0]
     d40:	0031f803 	eorseq	pc, r1, r3, lsl #16
     d44:	08241020 	stmdaeq	r4!, {r5, ip}
     d48:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
     d4c:	0000009e 	muleq	r0, lr, r0
     d50:	31b40305 			; <UNDEFINED> instruction: 0x31b40305
     d54:	d2102000 	andsle	r2, r0, #0
     d58:	01000006 	tsteq	r0, r6
     d5c:	00009e19 	andeq	r9, r0, r9, lsl lr
     d60:	20030500 	andcs	r0, r3, r0, lsl #10
     d64:	10200031 	eorne	r0, r0, r1, lsr r0
     d68:	00000667 	andeq	r0, r0, r7, ror #12
     d6c:	009e1a01 	addseq	r1, lr, r1, lsl #20
     d70:	03050000 	movweq	r0, #20480	; 0x5000
     d74:	200031d0 	ldrdcs	r3, [r0], -r0
     d78:	00073f10 	andeq	r3, r7, r0, lsl pc
     d7c:	9e1b0100 	muflse	f0, f3, f0
     d80:	05000000 	streq	r0, [r0, #-0]
     d84:	0031d803 	eorseq	sp, r1, r3, lsl #16
     d88:	06b91020 	ldrteq	r1, [r9], r0, lsr #32
     d8c:	1d010000 	stcne	0, cr0, [r1, #-0]
     d90:	00000062 	andeq	r0, r0, r2, rrx
     d94:	30f00305 	rscscc	r0, r0, r5, lsl #6
     d98:	2e102000 	cdpcs	0, 1, cr2, cr0, cr0, {0}
     d9c:	01000008 	tsteq	r0, r8
     da0:	0000621e 	andeq	r6, r0, lr, lsl r2
     da4:	dc030500 	cfstr32le	mvfx0, [r3], {-0}
     da8:	10200031 	eorne	r0, r0, r1, lsr r0
     dac:	000007da 	ldrdeq	r0, [r0], -sl
     db0:	00621f01 	rsbeq	r1, r2, r1, lsl #30
     db4:	03050000 	movweq	r0, #20480	; 0x5000
     db8:	200031b8 			; <UNDEFINED> instruction: 0x200031b8
     dbc:	00067b10 	andeq	r7, r6, r0, lsl fp
     dc0:	62200100 	eorvs	r0, r0, #0, 2
     dc4:	05000000 	streq	r0, [r0, #-0]
     dc8:	0030e403 	eorseq	lr, r0, r3, lsl #8
     dcc:	08791020 	ldmdaeq	r9!, {r5, ip}^
     dd0:	21010000 	mrscs	r0, (UNDEF: 1)
     dd4:	00000062 	andeq	r0, r0, r2, rrx
     dd8:	31ec0305 	mvncc	r0, r5, lsl #6
     ddc:	ab102000 	blge	408de4 <startup-0x1fbf721c>
     de0:	01000006 	tsteq	r0, r6
     de4:	00006222 	andeq	r6, r0, r2, lsr #4
     de8:	9c030500 	cfstr32ls	mvfx0, [r3], {-0}
     dec:	10200031 	eorne	r0, r0, r1, lsr r0
     df0:	000007c0 	andeq	r0, r0, r0, asr #15
     df4:	00622301 	rsbeq	r2, r2, r1, lsl #6
     df8:	03050000 	movweq	r0, #20480	; 0x5000
     dfc:	200030bc 	strhcs	r3, [r0], -ip
     e00:	00069310 	andeq	r9, r6, r0, lsl r3
     e04:	62240100 	eorvs	r0, r4, #0, 2
     e08:	05000000 	streq	r0, [r0, #-0]
     e0c:	0030cc03 	eorseq	ip, r0, r3, lsl #24
     e10:	083c1020 	ldmdaeq	ip!, {r5, ip}
     e14:	25010000 	strcs	r0, [r1, #-0]
     e18:	00000062 	andeq	r0, r0, r2, rrx
     e1c:	31080305 	tstcc	r8, r5, lsl #6
     e20:	53102000 	tstpl	r0, #0
     e24:	01000007 	tsteq	r0, r7
     e28:	00006226 	andeq	r6, r0, r6, lsr #4
     e2c:	90030500 	andls	r0, r3, r0, lsl #10
     e30:	10200031 	eorne	r0, r0, r1, lsr r0
     e34:	00000893 	muleq	r0, r3, r8
     e38:	00622701 	rsbeq	r2, r2, r1, lsl #14
     e3c:	03050000 	movweq	r0, #20480	; 0x5000
     e40:	200031c4 	andcs	r3, r0, r4, asr #3
     e44:	00079e10 	andeq	r9, r7, r0, lsl lr
     e48:	4c2a0100 	stfmis	f0, [sl], #-0
     e4c:	05000001 	streq	r0, [r0, #-1]
     e50:	00312403 	eorseq	r2, r1, r3, lsl #8
     e54:	08191020 	ldmdaeq	r9, {r5, ip}
     e58:	2b010000 	blcs	40e60 <startup-0x1ffbf1a0>
     e5c:	000000a4 	andeq	r0, r0, r4, lsr #1
     e60:	31140305 	tstcc	r4, r5, lsl #6
     e64:	88102000 	ldmdahi	r0, {sp}
     e68:	01000008 	tsteq	r0, r8
     e6c:	0000a42c 	andeq	sl, r0, ip, lsr #8
     e70:	d8030500 	stmdale	r3, {r8, sl}
     e74:	10200030 	eorne	r0, r0, r0, lsr r0
     e78:	0000072b 	andeq	r0, r0, fp, lsr #14
     e7c:	00a42d01 	adceq	r2, r4, r1, lsl #26
     e80:	03050000 	movweq	r0, #20480	; 0x5000
     e84:	200030fc 	strdcs	r3, [r0], -ip
     e88:	0007cf10 	andeq	ip, r7, r0, lsl pc
     e8c:	a42e0100 	strtge	r0, [lr], #-256	; 0xffffff00
     e90:	05000000 	streq	r0, [r0, #-0]
     e94:	0031a803 	eorseq	sl, r1, r3, lsl #16
     e98:	085c1020 	ldmdaeq	ip, {r5, ip}^
     e9c:	2f010000 	svccs	0x00010000
     ea0:	000000a4 	andeq	r0, r0, r4, lsr #1
     ea4:	31480305 	cmpcc	r8, r5, lsl #6
     ea8:	a40b2000 	strge	r2, [fp], #-0
     eac:	3c000000 	stccc	0, cr0, [r0], {-0}
     eb0:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
     eb4:	0000018e 	andeq	r0, r0, lr, lsl #3
     eb8:	0e100004 	cdpeq	0, 1, cr0, cr0, cr4, {0}
     ebc:	01000008 	tsteq	r0, r8
     ec0:	00042c30 	andeq	r2, r4, r0, lsr ip
     ec4:	54030500 	strpl	r0, [r3], #-1280	; 0xfffffb00
     ec8:	11200031 			; <UNDEFINED> instruction: 0x11200031
     ecc:	000007f3 	strdeq	r0, [r0], -r3
     ed0:	0e585f01 	cdpeq	15, 5, cr5, cr8, cr1, {0}
     ed4:	01242000 			; <UNDEFINED> instruction: 0x01242000
     ed8:	9c010000 	stcls	0, cr0, [r1], {-0}
     edc:	00000482 	andeq	r0, r0, r2, lsl #9
     ee0:	00079e12 	andeq	r9, r7, r2, lsl lr
     ee4:	625f0100 	subsvs	r0, pc, #0, 2
     ee8:	02000001 	andeq	r0, r0, #1
     eec:	e90f6c91 	stmdb	pc, {r0, r4, r7, sl, fp, sp, lr}	; <UNPREDICTABLE>
     ef0:	01000007 	tsteq	r0, r7
     ef4:	00012e60 	andeq	r2, r1, r0, ror #28
     ef8:	54030500 	strpl	r0, [r3], #-1280	; 0xfffffb00
     efc:	00200069 	eoreq	r0, r0, r9, rrx
     f00:	0003e713 	andeq	lr, r3, r3, lsl r7
     f04:	d4310100 	ldrtle	r0, [r1], #-256	; 0xffffff00
     f08:	8420000c 	strthi	r0, [r0], #-12
     f0c:	01000001 	tsteq	r0, r1
     f10:	07360f9c 			; <UNDEFINED> instruction: 0x07360f9c
     f14:	32010000 	andcc	r0, r1, #0
     f18:	0000009e 	muleq	r0, lr, r0
     f1c:	0f749102 	svceq	0x00749102
     f20:	00000709 	andeq	r0, r0, r9, lsl #14
     f24:	009e3601 	addseq	r3, lr, r1, lsl #12
     f28:	91020000 	mrsls	r0, (UNDEF: 2)
     f2c:	074a0f70 	smlsldxeq	r0, sl, r0, pc	; <UNPREDICTABLE>
     f30:	3a010000 	bcc	40f38 <startup-0x1ffbf0c8>
     f34:	0000009e 	muleq	r0, lr, r0
     f38:	0f6c9102 	svceq	0x006c9102
     f3c:	00000712 	andeq	r0, r0, r2, lsl r7
     f40:	009e3e01 	addseq	r3, lr, r1, lsl #28
     f44:	91020000 	mrsls	r0, (UNDEF: 2)
     f48:	02890f68 	addeq	r0, r9, #104, 30	; 0x1a0
     f4c:	42010000 	andmi	r0, r1, #0
     f50:	0000009e 	muleq	r0, lr, r0
     f54:	0f649102 	svceq	0x00649102
     f58:	00000292 	muleq	r0, r2, r2
     f5c:	009e4601 	addseq	r4, lr, r1, lsl #12
     f60:	91020000 	mrsls	r0, (UNDEF: 2)
     f64:	029b0f60 	addseq	r0, fp, #96, 30	; 0x180
     f68:	4a010000 	bmi	40f70 <startup-0x1ffbf090>
     f6c:	0000009e 	muleq	r0, lr, r0
     f70:	0f5c9102 	svceq	0x005c9102
     f74:	000002a4 	andeq	r0, r0, r4, lsr #5
     f78:	009e4e01 	addseq	r4, lr, r1, lsl #28
     f7c:	91020000 	mrsls	r0, (UNDEF: 2)
     f80:	02ad0f58 	adceq	r0, sp, #88, 30	; 0x160
     f84:	52010000 	andpl	r0, r1, #0
     f88:	0000009e 	muleq	r0, lr, r0
     f8c:	0f549102 	svceq	0x00549102
     f90:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
     f94:	009e5601 	addseq	r5, lr, r1, lsl #12
     f98:	91020000 	mrsls	r0, (UNDEF: 2)
     f9c:	005d0f50 	subseq	r0, sp, r0, asr pc
     fa0:	5a010000 	bpl	40fa8 <startup-0x1ffbf058>
     fa4:	0000009e 	muleq	r0, lr, r0
     fa8:	004c9102 	subeq	r9, ip, r2, lsl #2
     fac:	0001d500 	andeq	sp, r1, r0, lsl #10
     fb0:	23000400 	movwcs	r0, #1024	; 0x400
     fb4:	04000003 	streq	r0, [r0], #-3
     fb8:	00007701 	andeq	r7, r0, r1, lsl #14
     fbc:	08fc0c00 	ldmeq	ip!, {sl, fp}^
     fc0:	0f7c0000 	svceq	0x007c0000
     fc4:	00d82000 	sbcseq	r2, r8, r0
     fc8:	04a50000 	strteq	r0, [r5], #0
     fcc:	04020000 	streq	r0, [r2], #-0
     fd0:	0002fa07 	andeq	pc, r2, r7, lsl #20
     fd4:	07020200 	streq	r0, [r2, -r0, lsl #4]
     fd8:	000002f4 	strdeq	r0, [r0], -r4
     fdc:	11080102 	tstne	r8, r2, lsl #2
     fe0:	03000004 	movweq	r0, #4
     fe4:	6305020c 	movwvs	r0, #21004	; 0x520c
     fe8:	04000000 	streq	r0, [r0], #-0
     fec:	000002d6 	ldrdeq	r0, [r0], -r6
     ff0:	00210702 	eoreq	r0, r1, r2, lsl #14
     ff4:	04000000 	streq	r0, [r0], #-0
     ff8:	000005f9 	strdeq	r0, [r0], -r9
     ffc:	00210802 	eoreq	r0, r1, r2, lsl #16
    1000:	04040000 	streq	r0, [r4], #-0
    1004:	00001009 	andeq	r1, r0, r9
    1008:	00630902 	rsbeq	r0, r3, r2, lsl #18
    100c:	00080000 	andeq	r0, r8, r0
    1010:	002f0405 	eoreq	r0, pc, r5, lsl #8
    1014:	5b060000 	blpl	18101c <startup-0x1fe7efe4>
    1018:	02000011 	andeq	r0, r0, #17
    101c:	0000360a 	andeq	r3, r0, sl, lsl #12
    1020:	00160700 	andseq	r0, r6, r0, lsl #14
    1024:	030c0000 	movweq	r0, #49152	; 0xc000
    1028:	0000a506 	andeq	sl, r0, r6, lsl #10
    102c:	04e70400 	strbteq	r0, [r7], #1024	; 0x400
    1030:	07030000 	streq	r0, [r3, -r0]
    1034:	000000a5 	andeq	r0, r0, r5, lsr #1
    1038:	001d0400 	andseq	r0, sp, r0, lsl #8
    103c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1040:	000000a5 	andeq	r0, r0, r5, lsr #1
    1044:	00120404 	andseq	r0, r2, r4, lsl #8
    1048:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    104c:	000000a5 	andeq	r0, r0, r5, lsr #1
    1050:	04050008 	streq	r0, [r5], #-8
    1054:	00000069 	andeq	r0, r0, r9, rrx
    1058:	000c2806 	andeq	r2, ip, r6, lsl #16
    105c:	740a0300 	strvc	r0, [sl], #-768	; 0xfffffd00
    1060:	07000000 	streq	r0, [r0, -r0]
    1064:	000005ce 	andeq	r0, r0, lr, asr #11
    1068:	2f060424 	svccs	0x00060424
    106c:	04000001 	streq	r0, [r0], #-1
    1070:	000003ae 	andeq	r0, r0, lr, lsr #7
    1074:	012f0704 			; <UNDEFINED> instruction: 0x012f0704
    1078:	04000000 	streq	r0, [r0], #-0
    107c:	000005da 	ldrdeq	r0, [r0], -sl
    1080:	01350804 	teqeq	r5, r4, lsl #16
    1084:	04040000 	streq	r0, [r4], #-0
    1088:	00000552 	andeq	r0, r0, r2, asr r5
    108c:	01350904 	teqeq	r5, r4, lsl #18
    1090:	04080000 	streq	r0, [r8], #-0
    1094:	0000056d 	andeq	r0, r0, sp, ror #10
    1098:	014d0c04 	cmpeq	sp, r4, lsl #24
    109c:	040c0000 	streq	r0, [ip], #-0
    10a0:	000002cf 	andeq	r0, r0, pc, asr #5
    10a4:	014d0d04 	cmpeq	sp, r4, lsl #26
    10a8:	04100000 	ldreq	r0, [r0], #-0
    10ac:	000003c0 	andeq	r0, r0, r0, asr #7
    10b0:	01351004 	teqeq	r5, r4
    10b4:	04140000 	ldreq	r0, [r4], #-0
    10b8:	00000048 	andeq	r0, r0, r8, asr #32
    10bc:	01351104 	teqeq	r5, r4, lsl #2
    10c0:	04180000 	ldreq	r0, [r8], #-0
    10c4:	0000033f 	andeq	r0, r0, pc, lsr r3
    10c8:	01351204 	teqeq	r5, r4, lsl #4
    10cc:	041c0000 	ldreq	r0, [ip], #-0
    10d0:	0000034f 	andeq	r0, r0, pc, asr #6
    10d4:	01351304 	teqeq	r5, r4, lsl #6
    10d8:	00200000 	eoreq	r0, r0, r0
    10dc:	00ab0405 	adceq	r0, fp, r5, lsl #8
    10e0:	04080000 	streq	r0, [r8], #-0
    10e4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    10e8:	01470900 	cmpeq	r7, r0, lsl #18
    10ec:	470a0000 	strmi	r0, [sl, -r0]
    10f0:	00000001 	andeq	r0, r0, r1
    10f4:	00b60405 	adcseq	r0, r6, r5, lsl #8
    10f8:	04050000 	streq	r0, [r5], #-0
    10fc:	0000013c 	andeq	r0, r0, ip, lsr r1
    1100:	0005cf06 	andeq	ip, r5, r6, lsl #30
    1104:	b6150400 	ldrlt	r0, [r5], -r0, lsl #8
    1108:	0b000000 	bleq	1110 <startup-0x1fffeef0>
    110c:	00000169 	andeq	r0, r0, r9, ror #2
    1110:	00000169 	andeq	r0, r0, r9, ror #2
    1114:	0405000c 	streq	r0, [r5], #-12
    1118:	00000153 	andeq	r0, r0, r3, asr r1
    111c:	0004940d 	andeq	r9, r4, sp, lsl #8
    1120:	5e1c0400 	cfmulspl	mvf0, mvf12, mvf0
    1124:	0d000001 	stceq	0, cr0, [r0, #-4]
    1128:	00000385 	andeq	r0, r0, r5, lsl #7
    112c:	01351d04 	teqeq	r5, r4, lsl #26
    1130:	2b0e0000 	blcs	381138 <startup-0x1fc7eec8>
    1134:	01000009 	tsteq	r0, r9
    1138:	000f7c06 	andeq	r7, pc, r6, lsl #24
    113c:	0000d820 	andeq	sp, r0, r0, lsr #16
    1140:	0f9c0100 	svceq	0x009c0100
    1144:	00000662 	andeq	r0, r0, r2, ror #12
    1148:	01690601 	cmneq	r9, r1, lsl #12
    114c:	91020000 	mrsls	r0, (UNDEF: 2)
    1150:	08df1074 	ldmeq	pc, {r2, r4, r5, r6, ip}^	; <UNPREDICTABLE>
    1154:	0d010000 	stceq	0, cr0, [r1, #-0]
    1158:	00000135 	andeq	r0, r0, r5, lsr r1
    115c:	2e480305 	cdpcs	3, 4, cr0, cr8, cr5, {0}
    1160:	ee102000 	cdp	0, 1, cr2, cr0, cr0, {0}
    1164:	01000008 	tsteq	r0, r8
    1168:	0001350e 	andeq	r3, r1, lr, lsl #10
    116c:	50030500 	andpl	r0, r3, r0, lsl #10
    1170:	1020002e 	eorne	r0, r0, lr, lsr #32
    1174:	00000349 	andeq	r0, r0, r9, asr #6
    1178:	01350f01 	teqeq	r5, r1, lsl #30
    117c:	03050000 	movweq	r0, #20480	; 0x5000
    1180:	20002e4c 	andcs	r2, r0, ip, asr #28
    1184:	06410000 	strbeq	r0, [r1], -r0
    1188:	00040000 	andeq	r0, r4, r0
    118c:	000003f1 	strdeq	r0, [r0], -r1
    1190:	00770104 	rsbseq	r0, r7, r4, lsl #2
    1194:	ac0c0000 	stcge	0, cr0, [ip], {-0}
    1198:	5400000b 	strpl	r0, [r0], #-11
    119c:	64200010 	strtvs	r0, [r0], #-16
    11a0:	46000003 	strmi	r0, [r0], -r3
    11a4:	02000005 	andeq	r0, r0, #5
    11a8:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
    11ac:	03000000 	movweq	r0, #0
    11b0:	000002d6 	ldrdeq	r0, [r0], -r6
    11b4:	004e0702 	subeq	r0, lr, r2, lsl #14
    11b8:	03000000 	movweq	r0, #0
    11bc:	000005f9 	strdeq	r0, [r0], -r9
    11c0:	004e0802 	subeq	r0, lr, r2, lsl #16
    11c4:	03040000 	movweq	r0, #16384	; 0x4000
    11c8:	00001009 	andeq	r1, r0, r9
    11cc:	00550902 	subseq	r0, r5, r2, lsl #18
    11d0:	00080000 	andeq	r0, r8, r0
    11d4:	fa070404 	blx	1c21ec <startup-0x1fe3de14>
    11d8:	05000002 	streq	r0, [r0, #-2]
    11dc:	00005b04 	andeq	r5, r0, r4, lsl #22
    11e0:	08010400 	stmdaeq	r1, {sl}
    11e4:	00000411 	andeq	r0, r0, r1, lsl r4
    11e8:	00115b06 	andseq	r5, r1, r6, lsl #22
    11ec:	210a0200 	mrscs	r0, R10_fiq
    11f0:	07000000 	streq	r0, [r0, -r0]
    11f4:	00000016 	andeq	r0, r0, r6, lsl r0
    11f8:	9e06030c 	cdpls	3, 0, cr0, cr6, cr12, {0}
    11fc:	03000000 	movweq	r0, #0
    1200:	000004e7 	andeq	r0, r0, r7, ror #9
    1204:	009e0703 	addseq	r0, lr, r3, lsl #14
    1208:	03000000 	movweq	r0, #0
    120c:	0000001d 	andeq	r0, r0, sp, lsl r0
    1210:	009e0803 	addseq	r0, lr, r3, lsl #16
    1214:	03040000 	movweq	r0, #16384	; 0x4000
    1218:	00000012 	andeq	r0, r0, r2, lsl r0
    121c:	009e0903 	addseq	r0, lr, r3, lsl #18
    1220:	00080000 	andeq	r0, r8, r0
    1224:	00620405 	rsbeq	r0, r2, r5, lsl #8
    1228:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
    122c:	0300000c 	movweq	r0, #12
    1230:	00006d0a 	andeq	r6, r0, sl, lsl #26
    1234:	05ce0700 	strbeq	r0, [lr, #1792]	; 0x700
    1238:	04240000 	strteq	r0, [r4], #-0
    123c:	00012806 	andeq	r2, r1, r6, lsl #16
    1240:	03ae0300 			; <UNDEFINED> instruction: 0x03ae0300
    1244:	07040000 	streq	r0, [r4, -r0]
    1248:	00000128 	andeq	r0, r0, r8, lsr #2
    124c:	05da0300 	ldrbeq	r0, [sl, #768]	; 0x300
    1250:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    1254:	0000012e 	andeq	r0, r0, lr, lsr #2
    1258:	05520304 	ldrbeq	r0, [r2, #-772]	; 0xfffffcfc
    125c:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    1260:	0000012e 	andeq	r0, r0, lr, lsr #2
    1264:	056d0308 	strbeq	r0, [sp, #-776]!	; 0xfffffcf8
    1268:	0c040000 	stceq	0, cr0, [r4], {-0}
    126c:	00000146 	andeq	r0, r0, r6, asr #2
    1270:	02cf030c 	sbceq	r0, pc, #12, 6	; 0x30000000
    1274:	0d040000 	stceq	0, cr0, [r4, #-0]
    1278:	00000146 	andeq	r0, r0, r6, asr #2
    127c:	03c00310 	biceq	r0, r0, #16, 6	; 0x40000000
    1280:	10040000 	andne	r0, r4, r0
    1284:	0000012e 	andeq	r0, r0, lr, lsr #2
    1288:	00480314 	subeq	r0, r8, r4, lsl r3
    128c:	11040000 	mrsne	r0, (UNDEF: 4)
    1290:	0000012e 	andeq	r0, r0, lr, lsr #2
    1294:	033f0318 	teqeq	pc, #24, 6	; 0x60000000
    1298:	12040000 	andne	r0, r4, #0
    129c:	0000012e 	andeq	r0, r0, lr, lsr #2
    12a0:	034f031c 	movteq	r0, #62236	; 0xf31c
    12a4:	13040000 	movwne	r0, #16384	; 0x4000
    12a8:	0000012e 	andeq	r0, r0, lr, lsr #2
    12ac:	04050020 	streq	r0, [r5], #-32	; 0xffffffe0
    12b0:	000000a4 	andeq	r0, r0, r4, lsr #1
    12b4:	69050408 	stmdbvs	r5, {r3, sl}
    12b8:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    12bc:	00000140 	andeq	r0, r0, r0, asr #2
    12c0:	0001400a 	andeq	r4, r1, sl
    12c4:	04050000 	streq	r0, [r5], #-0
    12c8:	000000af 	andeq	r0, r0, pc, lsr #1
    12cc:	01350405 	teqeq	r5, r5, lsl #8
    12d0:	cf060000 	svcgt	0x00060000
    12d4:	04000005 	streq	r0, [r0], #-5
    12d8:	0000af15 	andeq	sl, r0, r5, lsl pc
    12dc:	01620b00 	cmneq	r2, r0, lsl #22
    12e0:	01620000 	cmneq	r2, r0
    12e4:	000c0000 	andeq	r0, ip, r0
    12e8:	014c0405 	cmpeq	ip, r5, lsl #8
    12ec:	940d0000 	strls	r0, [sp], #-0
    12f0:	04000004 	streq	r0, [r0], #-4
    12f4:	0001571c 	andeq	r5, r1, ip, lsl r7
    12f8:	03850d00 	orreq	r0, r5, #0, 26
    12fc:	1d040000 	stcne	0, cr0, [r4, #-0]
    1300:	0000012e 	andeq	r0, r0, lr, lsr #2
    1304:	00005b0b 	andeq	r5, r0, fp, lsl #22
    1308:	00018e00 	andeq	r8, r1, r0, lsl #28
    130c:	018e0e00 	orreq	r0, lr, r0, lsl #28
    1310:	00630000 	rsbeq	r0, r3, r0
    1314:	6c070404 	cfstrsvs	mvf0, [r7], {4}
    1318:	0f000003 	svceq	0x00000003
    131c:	00000c12 	andeq	r0, r0, r2, lsl ip
    1320:	017e0305 	cmneq	lr, r5, lsl #6
    1324:	03050000 	movweq	r0, #20480	; 0x5000
    1328:	20006958 	andcs	r6, r0, r8, asr r9
    132c:	000a7d0f 	andeq	r7, sl, pc, lsl #26
    1330:	7e030600 	cfmadd32vc	mvax0, mvfx0, mvfx3, mvfx0
    1334:	05000001 	streq	r0, [r0, #-1]
    1338:	0069bc03 	rsbeq	fp, r9, r3, lsl #24
    133c:	0ac50f20 	beq	ff144fc4 <firstTime.4040+0xdf13c68c>
    1340:	03070000 	movweq	r0, #28672	; 0x7000
    1344:	0000017e 	andeq	r0, r0, lr, ror r1
    1348:	6a200305 	bvs	801f64 <startup-0x1f7fe09c>
    134c:	6c0f2000 	stcvs	0, cr2, [pc], {-0}
    1350:	0800000a 	stmdaeq	r0, {r1, r3}
    1354:	00017e03 	andeq	r7, r1, r3, lsl #28
    1358:	84030500 	strhi	r0, [r3], #-1280	; 0xfffffb00
    135c:	0f20006a 	svceq	0x0020006a
    1360:	00000beb 	andeq	r0, r0, fp, ror #23
    1364:	017e0309 	cmneq	lr, r9, lsl #6
    1368:	03050000 	movweq	r0, #20480	; 0x5000
    136c:	20006ae8 	andcs	r6, r0, r8, ror #21
    1370:	000cbf0f 	andeq	fp, ip, pc, lsl #30
    1374:	7e030a00 	vmlavc.f32	s0, s6, s0
    1378:	05000001 	streq	r0, [r0, #-1]
    137c:	006b4c03 	rsbeq	r4, fp, r3, lsl #24
    1380:	0a980f20 	beq	fe605008 <firstTime.4040+0xde5fc6d0>
    1384:	030b0000 	movweq	r0, #45056	; 0xb000
    1388:	0000017e 	andeq	r0, r0, lr, ror r1
    138c:	6bb00305 	blvs	fec01fa8 <firstTime.4040+0xdebf9670>
    1390:	860f2000 	strhi	r2, [pc], -r0
    1394:	0c00000b 	stceq	0, cr0, [r0], {11}
    1398:	00017e03 	andeq	r7, r1, r3, lsl #28
    139c:	14030500 	strne	r0, [r3], #-1280	; 0xfffffb00
    13a0:	0f20006c 	svceq	0x0020006c
    13a4:	00000947 	andeq	r0, r0, r7, asr #18
    13a8:	017e030d 	cmneq	lr, sp, lsl #6
    13ac:	03050000 	movweq	r0, #20480	; 0x5000
    13b0:	20006c78 	andcs	r6, r0, r8, ror ip
    13b4:	000aa90f 	andeq	sl, sl, pc, lsl #18
    13b8:	7e030e00 	cdpvc	14, 0, cr0, cr3, cr0, {0}
    13bc:	05000001 	streq	r0, [r0, #-1]
    13c0:	006cdc03 	rsbeq	sp, ip, r3, lsl #24
    13c4:	0b2d0f20 	bleq	b4504c <startup-0x1f4bafb4>
    13c8:	030f0000 	movweq	r0, #61440	; 0xf000
    13cc:	0000017e 	andeq	r0, r0, lr, ror r1
    13d0:	6d400305 	stclvs	3, cr0, [r0, #-20]	; 0xffffffec
    13d4:	630f2000 	movwvs	r2, #61440	; 0xf000
    13d8:	10000009 	andne	r0, r0, r9
    13dc:	00017e03 	andeq	r7, r1, r3, lsl #28
    13e0:	a4030500 	strge	r0, [r3], #-1280	; 0xfffffb00
    13e4:	0f20006d 	svceq	0x0020006d
    13e8:	00000ad6 	ldrdeq	r0, [r0], -r6
    13ec:	017e0311 	cmneq	lr, r1, lsl r3
    13f0:	03050000 	movweq	r0, #20480	; 0x5000
    13f4:	20006e08 	andcs	r6, r0, r8, lsl #28
    13f8:	000af60f 	andeq	pc, sl, pc, lsl #12
    13fc:	7e031200 	cdpvc	2, 0, cr1, cr3, cr0, {0}
    1400:	05000001 	streq	r0, [r0, #-1]
    1404:	006e6c03 	rsbeq	r6, lr, r3, lsl #24
    1408:	098d0f20 	stmibeq	sp, {r5, r8, r9, sl, fp}
    140c:	03130000 	tsteq	r3, #0
    1410:	0000017e 	andeq	r0, r0, lr, ror r1
    1414:	6ed00305 	cdpvs	3, 13, cr0, cr0, cr5, {0}
    1418:	96102000 	ldrls	r2, [r0], -r0
    141c:	0100000b 	tsteq	r0, fp
    1420:	00009e15 	andeq	r9, r0, r5, lsl lr
    1424:	70030500 	andvc	r0, r3, r0, lsl #10
    1428:	10200032 	eorne	r0, r0, r2, lsr r0
    142c:	000009c9 	andeq	r0, r0, r9, asr #19
    1430:	009e1601 	addseq	r1, lr, r1, lsl #12
    1434:	03050000 	movweq	r0, #20480	; 0x5000
    1438:	20003208 	andcs	r3, r0, r8, lsl #4
    143c:	0009b310 	andeq	fp, r9, r0, lsl r3
    1440:	9e170100 	muflss	f0, f7, f0
    1444:	05000000 	streq	r0, [r0, #-0]
    1448:	00330003 	eorseq	r0, r3, r3
    144c:	0a0b1020 	beq	2c54d4 <startup-0x1fd3ab2c>
    1450:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    1454:	0000009e 	muleq	r0, lr, r0
    1458:	326c0305 	rsbcc	r0, ip, #335544320	; 0x14000000
    145c:	06102000 	ldreq	r2, [r0], -r0
    1460:	0100000b 	tsteq	r0, fp
    1464:	00009e19 	andeq	r9, r0, r9, lsl lr
    1468:	f0030500 			; <UNDEFINED> instruction: 0xf0030500
    146c:	10200032 	eorne	r0, r0, r2, lsr r0
    1470:	00000ba1 	andeq	r0, r0, r1, lsr #23
    1474:	009e1a01 	addseq	r1, lr, r1, lsl #20
    1478:	03050000 	movweq	r0, #20480	; 0x5000
    147c:	200033a4 	andcs	r3, r0, r4, lsr #7
    1480:	0009be10 	andeq	fp, r9, r0, lsl lr
    1484:	9e1b0100 	muflse	f0, f3, f0
    1488:	05000000 	streq	r0, [r0, #-0]
    148c:	00326403 	eorseq	r6, r2, r3, lsl #8
    1490:	0c2e1020 	stceq	0, cr1, [lr], #-128	; 0xffffff80
    1494:	1c010000 	stcne	0, cr0, [r1], {-0}
    1498:	0000009e 	muleq	r0, lr, r0
    149c:	328c0305 	addcc	r0, ip, #335544320	; 0x14000000
    14a0:	9e102000 	cdpls	0, 1, cr2, cr0, cr0, {0}
    14a4:	01000009 	tsteq	r0, r9
    14a8:	00009e1d 	andeq	r9, r0, sp, lsl lr
    14ac:	b8030500 	stmdalt	r3, {r8, sl}
    14b0:	10200032 	eorne	r0, r0, r2, lsr r0
    14b4:	00000b6c 	andeq	r0, r0, ip, ror #22
    14b8:	009e1e01 	addseq	r1, lr, r1, lsl #28
    14bc:	03050000 	movweq	r0, #20480	; 0x5000
    14c0:	20003388 	andcs	r3, r0, r8, lsl #7
    14c4:	000a0110 	andeq	r0, sl, r0, lsl r1
    14c8:	9e1f0100 	muflse	f0, f7, f0
    14cc:	05000000 	streq	r0, [r0, #-0]
    14d0:	00326803 	eorseq	r6, r2, r3, lsl #16
    14d4:	0c761020 	ldcleq	0, cr1, [r6], #-128	; 0xffffff80
    14d8:	20010000 	andcs	r0, r1, r0
    14dc:	0000009e 	muleq	r0, lr, r0
    14e0:	32040305 	andcc	r0, r4, #335544320	; 0x14000000
    14e4:	e2102000 	ands	r2, r0, #0
    14e8:	01000009 	tsteq	r0, r9
    14ec:	00009e21 	andeq	r9, r0, r1, lsr #28
    14f0:	18030500 	stmdane	r3, {r8, sl}
    14f4:	10200032 	eorne	r0, r0, r2, lsr r0
    14f8:	00000c08 	andeq	r0, r0, r8, lsl #24
    14fc:	009e2201 	addseq	r2, lr, r1, lsl #4
    1500:	03050000 	movweq	r0, #20480	; 0x5000
    1504:	2000329c 	mulcs	r0, ip, r2
    1508:	000b4710 	andeq	r4, fp, r0, lsl r7
    150c:	9e230100 	suflss	f0, f3, f0
    1510:	05000000 	streq	r0, [r0, #-0]
    1514:	0032e003 	eorseq	lr, r2, r3
    1518:	0c451020 	mcrreq	0, 2, r1, r5, cr0
    151c:	25010000 	strcs	r0, [r1, #-0]
    1520:	00000062 	andeq	r0, r0, r2, rrx
    1524:	32800305 	addcc	r0, r0, #335544320	; 0x14000000
    1528:	46102000 	ldrmi	r2, [r0], -r0
    152c:	0100000a 	tsteq	r0, sl
    1530:	00006226 	andeq	r6, r0, r6, lsr #4
    1534:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
    1538:	10200032 	eorne	r0, r0, r2, lsr r0
    153c:	00000bfb 	strdeq	r0, [r0], -fp
    1540:	00622701 	rsbeq	r2, r2, r1, lsl #14
    1544:	03050000 	movweq	r0, #20480	; 0x5000
    1548:	20003290 	mulcs	r0, r0, r2
    154c:	000b7710 	andeq	r7, fp, r0, lsl r7
    1550:	62280100 	eorvs	r0, r8, #0, 2
    1554:	05000000 	streq	r0, [r0, #-0]
    1558:	00338c03 	eorseq	r8, r3, r3, lsl #24
    155c:	09381020 	ldmdbeq	r8!, {r5, ip}
    1560:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    1564:	00000062 	andeq	r0, r0, r2, rrx
    1568:	33040305 	movwcc	r0, #17157	; 0x4305
    156c:	2a102000 	bcs	409574 <startup-0x1fbf6a8c>
    1570:	0100000a 	tsteq	r0, sl
    1574:	0000622a 	andeq	r6, r0, sl, lsr #4
    1578:	ac030500 	cfstr32ge	mvfx0, [r3], {-0}
    157c:	10200032 	eorne	r0, r0, r2, lsr r0
    1580:	00000c53 	andeq	r0, r0, r3, asr ip
    1584:	00622b01 	rsbeq	r2, r2, r1, lsl #22
    1588:	03050000 	movweq	r0, #20480	; 0x5000
    158c:	200032e4 	andcs	r3, r0, r4, ror #5
    1590:	000ae710 	andeq	lr, sl, r0, lsl r7
    1594:	622c0100 	eorvs	r0, ip, #0, 2
    1598:	05000000 	streq	r0, [r0, #-0]
    159c:	00332803 	eorseq	r2, r3, r3, lsl #16
    15a0:	0b1f1020 	bleq	7c5628 <startup-0x1f83a9d8>
    15a4:	2d010000 	stccs	0, cr0, [r1, #-0]
    15a8:	00000062 	andeq	r0, r0, r2, rrx
    15ac:	33340305 	teqcc	r4, #335544320	; 0x14000000
    15b0:	d3102000 	tstle	r0, #0
    15b4:	01000009 	tsteq	r0, r9
    15b8:	0000622e 	andeq	r6, r0, lr, lsr #4
    15bc:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
    15c0:	10200032 	eorne	r0, r0, r2, lsr r0
    15c4:	00000b10 	andeq	r0, r0, r0, lsl fp
    15c8:	00622f01 	rsbeq	r2, r2, r1, lsl #30
    15cc:	03050000 	movweq	r0, #20480	; 0x5000
    15d0:	2000331c 	andcs	r3, r0, ip, lsl r3
    15d4:	000a3810 	andeq	r3, sl, r0, lsl r8
    15d8:	62300100 	eorsvs	r0, r0, #0, 2
    15dc:	05000000 	streq	r0, [r0, #-0]
    15e0:	00339803 	eorseq	r9, r3, r3, lsl #16
    15e4:	0b5d1020 	bleq	174566c <startup-0x1e8ba994>
    15e8:	31010000 	mrscc	r0, (UNDEF: 1)
    15ec:	00000062 	andeq	r0, r0, r2, rrx
    15f0:	32c80305 	sbccc	r0, r8, #335544320	; 0x14000000
    15f4:	74102000 	ldrvc	r2, [r0], #-0
    15f8:	01000009 	tsteq	r0, r9
    15fc:	00006232 	andeq	r6, r0, r2, lsr r2
    1600:	a0030500 	andge	r0, r3, r0, lsl #10
    1604:	10200032 	eorne	r0, r0, r2, lsr r0
    1608:	00000a54 	andeq	r0, r0, r4, asr sl
    160c:	00623301 	rsbeq	r3, r2, r1, lsl #6
    1610:	03050000 	movweq	r0, #20480	; 0x5000
    1614:	200032bc 			; <UNDEFINED> instruction: 0x200032bc
    1618:	000be310 	andeq	lr, fp, r0, lsl r3
    161c:	4c360100 	ldfmis	f0, [r6], #-0
    1620:	05000001 	streq	r0, [r0, #-1]
    1624:	00323403 	eorseq	r3, r2, r3, lsl #8
    1628:	0c231020 	stceq	0, cr1, [r3], #-128	; 0xffffff80
    162c:	37010000 	strcc	r0, [r1, -r0]
    1630:	000000a4 	andeq	r0, r0, r4, lsr #1
    1634:	32580305 	subscc	r0, r8, #335544320	; 0x14000000
    1638:	aa102000 	bge	409640 <startup-0x1fbf69c0>
    163c:	0100000c 	tsteq	r0, ip
    1640:	0000a438 	andeq	sl, r0, r8, lsr r4
    1644:	28030500 	stmdacs	r3, {r8, sl}
    1648:	10200032 	eorne	r0, r0, r2, lsr r0
    164c:	00000aba 			; <UNDEFINED> instruction: 0x00000aba
    1650:	00a43901 	adceq	r3, r4, r1, lsl #18
    1654:	03050000 	movweq	r0, #20480	; 0x5000
    1658:	20003310 	andcs	r3, r0, r0, lsl r3
    165c:	00095810 	andeq	r5, r9, r0, lsl r8
    1660:	a43a0100 	ldrtge	r0, [sl], #-256	; 0xffffff00
    1664:	05000000 	streq	r0, [r0, #-0]
    1668:	00327403 	eorseq	r7, r2, r3, lsl #8
    166c:	0c811020 	stceq	0, cr1, [r1], {32}
    1670:	3b010000 	blcc	41678 <startup-0x1ffbe988>
    1674:	000000a4 	andeq	r0, r0, r4, lsr #1
    1678:	32d40305 	sbcscc	r0, r4, #335544320	; 0x14000000
    167c:	8d102000 	ldchi	0, cr2, [r0, #-0]
    1680:	0100000a 	tsteq	r0, sl
    1684:	0000a43c 	andeq	sl, r0, ip, lsr r4
    1688:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
    168c:	0b200032 	bleq	80175c <startup-0x1f7fe8a4>
    1690:	000000a4 	andeq	r0, r0, r4, lsr #1
    1694:	00000519 	andeq	r0, r0, r9, lsl r5
    1698:	00018e0e 	andeq	r8, r1, lr, lsl #28
    169c:	10000500 	andne	r0, r0, r0, lsl #10
    16a0:	00000b52 	andeq	r0, r0, r2, asr fp
    16a4:	05093f01 	streq	r3, [r9, #-3841]	; 0xfffff0ff
    16a8:	03050000 	movweq	r0, #20480	; 0x5000
    16ac:	20003340 	andcs	r3, r0, r0, asr #6
    16b0:	000bd911 	andeq	sp, fp, r1, lsl r9
    16b4:	60760100 	rsbsvs	r0, r6, r0, lsl #2
    16b8:	58200012 	stmdapl	r0!, {r1, r4}
    16bc:	01000001 	tsteq	r0, r1
    16c0:	00055f9c 	muleq	r5, ip, pc	; <UNPREDICTABLE>
    16c4:	0be31200 	bleq	ff8c5ecc <firstTime.4040+0xdf8bd594>
    16c8:	76010000 	strvc	r0, [r1], -r0
    16cc:	00000162 	andeq	r0, r0, r2, ror #2
    16d0:	0f6c9102 	svceq	0x006c9102
    16d4:	000007e9 	andeq	r0, r0, r9, ror #15
    16d8:	012e7701 			; <UNDEFINED> instruction: 0x012e7701
    16dc:	03050000 	movweq	r0, #20480	; 0x5000
    16e0:	20006f34 	andcs	r6, r0, r4, lsr pc
    16e4:	03e71300 	mvneq	r1, #0, 6
    16e8:	40010000 	andmi	r0, r1, r0
    16ec:	20001054 	andcs	r1, r0, r4, asr r0
    16f0:	0000020c 	andeq	r0, r0, ip, lsl #4
    16f4:	620f9c01 	andvs	r9, pc, #256	; 0x100
    16f8:	0100000c 	tsteq	r0, ip
    16fc:	00009e42 	andeq	r9, r0, r2, asr #28
    1700:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1704:	000c6c0f 	andeq	r6, ip, pc, lsl #24
    1708:	9e450100 	dvflss	f0, f5, f0
    170c:	02000000 	andeq	r0, r0, #0
    1710:	620f7091 	andvs	r7, pc, #145	; 0x91
    1714:	0100000a 	tsteq	r0, sl
    1718:	00009e48 	andeq	r9, r0, r8, asr #28
    171c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1720:	0009830f 	andeq	r8, r9, pc, lsl #6
    1724:	9e4c0100 	dvflse	f0, f4, f0
    1728:	02000000 	andeq	r0, r0, #0
    172c:	8c0f6891 	stchi	8, cr6, [pc], {145}	; 0x91
    1730:	0100000c 	tsteq	r0, ip
    1734:	00009e4f 	andeq	r9, r0, pc, asr #28
    1738:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    173c:	000a200f 	andeq	r2, sl, pc
    1740:	9e520100 	rdflss	f0, f2, f0
    1744:	02000000 	andeq	r0, r0, #0
    1748:	380f6091 	stmdacc	pc, {r0, r4, r7, sp, lr}	; <UNPREDICTABLE>
    174c:	0100000c 	tsteq	r0, ip
    1750:	00009e57 	andeq	r9, r0, r7, asr lr
    1754:	5c910200 	lfmpl	f0, 4, [r1], {0}
    1758:	000c960f 	andeq	r9, ip, pc, lsl #12
    175c:	9e5a0100 	rdflse	f0, f2, f0
    1760:	02000000 	andeq	r0, r0, #0
    1764:	a00f5891 	mulge	pc, r1, r8	; <UNPREDICTABLE>
    1768:	0100000c 	tsteq	r0, ip
    176c:	00009e5d 	andeq	r9, r0, sp, asr lr
    1770:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    1774:	0009a90f 	andeq	sl, r9, pc, lsl #18
    1778:	9e610100 	powlss	f0, f1, f0
    177c:	02000000 	andeq	r0, r0, #0
    1780:	ed0f5091 	stc	0, cr5, [pc, #-580]	; 1544 <startup-0x1fffeabc>
    1784:	01000009 	tsteq	r0, r9
    1788:	00009e64 	andeq	r9, r0, r4, ror #28
    178c:	4c910200 	lfmmi	f0, 4, [r1], {0}
    1790:	0009f70f 	andeq	pc, r9, pc, lsl #14
    1794:	9e670100 	powlss	f0, f7, f0
    1798:	02000000 	andeq	r0, r0, #0
    179c:	b50f4891 	strlt	r4, [pc, #-2193]	; f13 <startup-0x1ffff0ed>
    17a0:	0100000c 	tsteq	r0, ip
    17a4:	00009e6b 	andeq	r9, r0, fp, ror #28
    17a8:	44910200 	ldrmi	r0, [r1], #512	; 0x200
    17ac:	000b3d0f 	andeq	r3, fp, pc, lsl #26
    17b0:	9e6e0100 	powlse	f0, f6, f0
    17b4:	02000000 	andeq	r0, r0, #0
    17b8:	160f4091 			; <UNDEFINED> instruction: 0x160f4091
    17bc:	0100000a 	tsteq	r0, sl
    17c0:	00009e71 	andeq	r9, r0, r1, ror lr
    17c4:	bc910300 	ldclt	3, cr0, [r1], {0}
    17c8:	9800007f 	stmdals	r0, {r0, r1, r2, r3, r4, r5, r6}
    17cc:	04000004 	streq	r0, [r0], #-4
    17d0:	0004f100 	andeq	pc, r4, r0, lsl #2
    17d4:	77010400 	strvc	r0, [r1, -r0, lsl #8]
    17d8:	0c000000 	stceq	0, cr0, [r0], {-0}
    17dc:	00000e83 	andeq	r0, r0, r3, lsl #29
    17e0:	200013b8 			; <UNDEFINED> instruction: 0x200013b8
    17e4:	00000238 	andeq	r0, r0, r8, lsr r2
    17e8:	00000727 	andeq	r0, r0, r7, lsr #14
    17ec:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
    17f0:	0000004e 	andeq	r0, r0, lr, asr #32
    17f4:	0002d603 	andeq	sp, r2, r3, lsl #12
    17f8:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
    17fc:	00000000 	andeq	r0, r0, r0
    1800:	0005f903 	andeq	pc, r5, r3, lsl #18
    1804:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
    1808:	04000000 	streq	r0, [r0], #-0
    180c:	00100903 	andseq	r0, r0, r3, lsl #18
    1810:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
    1814:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1818:	07040400 	streq	r0, [r4, -r0, lsl #8]
    181c:	000002fa 	strdeq	r0, [r0], -sl
    1820:	005b0405 	subseq	r0, fp, r5, lsl #8
    1824:	01040000 	mrseq	r0, (UNDEF: 4)
    1828:	00041108 	andeq	r1, r4, r8, lsl #2
    182c:	115b0600 	cmpne	fp, r0, lsl #12
    1830:	0a020000 	beq	81838 <startup-0x1ff7e7c8>
    1834:	00000021 	andeq	r0, r0, r1, lsr #32
    1838:	00001607 	andeq	r1, r0, r7, lsl #12
    183c:	06030c00 	streq	r0, [r3], -r0, lsl #24
    1840:	0000009e 	muleq	r0, lr, r0
    1844:	0004e703 	andeq	lr, r4, r3, lsl #14
    1848:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
    184c:	00000000 	andeq	r0, r0, r0
    1850:	00001d03 	andeq	r1, r0, r3, lsl #26
    1854:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
    1858:	04000000 	streq	r0, [r0], #-0
    185c:	00001203 	andeq	r1, r0, r3, lsl #4
    1860:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
    1864:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1868:	62040500 	andvs	r0, r4, #0, 10
    186c:	06000000 	streq	r0, [r0], -r0
    1870:	00000c28 	andeq	r0, r0, r8, lsr #24
    1874:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
    1878:	ce070000 	cdpgt	0, 0, cr0, cr7, cr0, {0}
    187c:	24000005 	strcs	r0, [r0], #-5
    1880:	01280604 			; <UNDEFINED> instruction: 0x01280604
    1884:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
    1888:	04000003 	streq	r0, [r0], #-3
    188c:	00012807 	andeq	r2, r1, r7, lsl #16
    1890:	da030000 	ble	c1898 <startup-0x1ff3e768>
    1894:	04000005 	streq	r0, [r0], #-5
    1898:	00012e08 	andeq	r2, r1, r8, lsl #28
    189c:	52030400 	andpl	r0, r3, #0, 8
    18a0:	04000005 	streq	r0, [r0], #-5
    18a4:	00012e09 	andeq	r2, r1, r9, lsl #28
    18a8:	6d030800 	stcvs	8, cr0, [r3, #-0]
    18ac:	04000005 	streq	r0, [r0], #-5
    18b0:	0001460c 	andeq	r4, r1, ip, lsl #12
    18b4:	cf030c00 	svcgt	0x00030c00
    18b8:	04000002 	streq	r0, [r0], #-2
    18bc:	0001460d 	andeq	r4, r1, sp, lsl #12
    18c0:	c0031000 	andgt	r1, r3, r0
    18c4:	04000003 	streq	r0, [r0], #-3
    18c8:	00012e10 	andeq	r2, r1, r0, lsl lr
    18cc:	48031400 	stmdami	r3, {sl, ip}
    18d0:	04000000 	streq	r0, [r0], #-0
    18d4:	00012e11 	andeq	r2, r1, r1, lsl lr
    18d8:	3f031800 	svccc	0x00031800
    18dc:	04000003 	streq	r0, [r0], #-3
    18e0:	00012e12 	andeq	r2, r1, r2, lsl lr
    18e4:	4f031c00 	svcmi	0x00031c00
    18e8:	04000003 	streq	r0, [r0], #-3
    18ec:	00012e13 	andeq	r2, r1, r3, lsl lr
    18f0:	05002000 	streq	r2, [r0, #-0]
    18f4:	0000a404 	andeq	sl, r0, r4, lsl #8
    18f8:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
    18fc:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1900:	00014009 	andeq	r4, r1, r9
    1904:	01400a00 	cmpeq	r0, r0, lsl #20
    1908:	05000000 	streq	r0, [r0, #-0]
    190c:	0000af04 	andeq	sl, r0, r4, lsl #30
    1910:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
    1914:	06000001 	streq	r0, [r0], -r1
    1918:	000005cf 	andeq	r0, r0, pc, asr #11
    191c:	00af1504 	adceq	r1, pc, r4, lsl #10
    1920:	620b0000 	andvs	r0, fp, #0
    1924:	62000001 	andvs	r0, r0, #1
    1928:	0c000001 	stceq	0, cr0, [r0], {1}
    192c:	4c040500 	cfstr32mi	mvfx0, [r4], {-0}
    1930:	0d000001 	stceq	0, cr0, [r0, #-4]
    1934:	00000494 	muleq	r0, r4, r4
    1938:	01571c04 	cmpeq	r7, r4, lsl #24
    193c:	850d0000 	strhi	r0, [sp, #-0]
    1940:	04000003 	streq	r0, [r0], #-3
    1944:	00012e1d 	andeq	r2, r1, sp, lsl lr
    1948:	005b0b00 	subseq	r0, fp, r0, lsl #22
    194c:	018e0000 	orreq	r0, lr, r0
    1950:	8e0e0000 	cdphi	0, 0, cr0, cr14, cr0, {0}
    1954:	35000001 	strcc	r0, [r0, #-1]
    1958:	07040400 	streq	r0, [r4, -r0, lsl #8]
    195c:	0000036c 	andeq	r0, r0, ip, ror #6
    1960:	000cff0f 	andeq	pc, ip, pc, lsl #30
    1964:	7e030500 	cfsh32vc	mvfx0, mvfx3, #0
    1968:	05000001 	streq	r0, [r0, #-1]
    196c:	006f3803 	rsbeq	r3, pc, r3, lsl #16
    1970:	0eb10f20 	cdpeq	15, 11, cr0, cr1, cr0, {1}
    1974:	03060000 	movweq	r0, #24576	; 0x6000
    1978:	0000017e 	andeq	r0, r0, lr, ror r1
    197c:	6f700305 	svcvs	0x00700305
    1980:	090f2000 	stmdbeq	pc, {sp}	; <UNPREDICTABLE>
    1984:	0700000e 	streq	r0, [r0, -lr]
    1988:	00017e03 	andeq	r7, r1, r3, lsl #28
    198c:	a8030500 	stmdage	r3, {r8, sl}
    1990:	0f20006f 	svceq	0x0020006f
    1994:	00000da2 	andeq	r0, r0, r2, lsr #27
    1998:	017e0308 	cmneq	lr, r8, lsl #6
    199c:	03050000 	movweq	r0, #20480	; 0x5000
    19a0:	20006fe0 	andcs	r6, r0, r0, ror #31
    19a4:	000e1b0f 	andeq	r1, lr, pc, lsl #22
    19a8:	7e030900 	vmlavc.f16	s0, s6, s0	; <UNPREDICTABLE>
    19ac:	05000001 	streq	r0, [r0, #-1]
    19b0:	00701803 	rsbseq	r1, r0, r3, lsl #16
    19b4:	0d4d0f20 	stcleq	15, cr0, [sp, #-128]	; 0xffffff80
    19b8:	030a0000 	movweq	r0, #40960	; 0xa000
    19bc:	0000017e 	andeq	r0, r0, lr, ror r1
    19c0:	70500305 	subsvc	r0, r0, r5, lsl #6
    19c4:	c20f2000 	andgt	r2, pc, #0
    19c8:	0b00000e 	bleq	1a08 <startup-0x1fffe5f8>
    19cc:	00017e03 	andeq	r7, r1, r3, lsl #28
    19d0:	88030500 	stmdahi	r3, {r8, sl}
    19d4:	0f200070 	svceq	0x00200070
    19d8:	00000d77 	andeq	r0, r0, r7, ror sp
    19dc:	017e030c 	cmneq	lr, ip, lsl #6
    19e0:	03050000 	movweq	r0, #20480	; 0x5000
    19e4:	200070c0 	andcs	r7, r0, r0, asr #1
    19e8:	000db40f 	andeq	fp, sp, pc, lsl #8
    19ec:	7e030d00 	cdpvc	13, 0, cr0, cr3, cr0, {0}
    19f0:	05000001 	streq	r0, [r0, #-1]
    19f4:	0070f803 	rsbseq	pc, r0, r3, lsl #16
    19f8:	0e501020 	cdpeq	0, 5, cr1, cr0, cr0, {1}
    19fc:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    1a00:	0000009e 	muleq	r0, lr, r0
    1a04:	347c0305 	ldrbtcc	r0, [ip], #-773	; 0xfffffcfb
    1a08:	dc102000 	ldcle	0, cr2, [r0], {-0}
    1a0c:	0100000c 	tsteq	r0, ip
    1a10:	00009e0f 	andeq	r9, r0, pc, lsl #28
    1a14:	a8030500 	stmdage	r3, {r8, sl}
    1a18:	10200033 	eorne	r0, r0, r3, lsr r0
    1a1c:	00000d31 	andeq	r0, r0, r1, lsr sp
    1a20:	009e1001 	addseq	r1, lr, r1
    1a24:	03050000 	movweq	r0, #20480	; 0x5000
    1a28:	200034a8 	andcs	r3, r0, r8, lsr #9
    1a2c:	000cd010 	andeq	sp, ip, r0, lsl r0
    1a30:	9e110100 	muflss	f0, f1, f0
    1a34:	05000000 	streq	r0, [r0, #-0]
    1a38:	0034b803 	eorseq	fp, r4, r3, lsl #16
    1a3c:	0dd11020 	ldcleq	0, cr1, [r1, #128]	; 0x80
    1a40:	12010000 	andne	r0, r1, #0
    1a44:	0000009e 	muleq	r0, lr, r0
    1a48:	341c0305 	ldrcc	r0, [ip], #-773	; 0xfffffcfb
    1a4c:	38102000 	ldmdacc	r0, {sp}
    1a50:	0100000e 	tsteq	r0, lr
    1a54:	00009e13 	andeq	r9, r0, r3, lsl lr
    1a58:	ac030500 	cfstr32ge	mvfx0, [r3], {-0}
    1a5c:	10200033 	eorne	r0, r0, r3, lsr r0
    1a60:	00000d6b 	andeq	r0, r0, fp, ror #26
    1a64:	009e1401 	addseq	r1, lr, r1, lsl #8
    1a68:	03050000 	movweq	r0, #20480	; 0x5000
    1a6c:	20003444 	andcs	r3, r0, r4, asr #8
    1a70:	000dc610 	andeq	ip, sp, r0, lsl r6
    1a74:	9e150100 	muflss	f0, f5, f0
    1a78:	05000000 	streq	r0, [r0, #-0]
    1a7c:	00348003 	eorseq	r8, r4, r3
    1a80:	0e5c1020 	cdpeq	0, 5, cr1, cr12, cr0, {1}
    1a84:	16010000 	strne	r0, [r1], -r0
    1a88:	0000009e 	muleq	r0, lr, r0
    1a8c:	346c0305 	strbtcc	r0, [ip], #-773	; 0xfffffcfb
    1a90:	93102000 	tstls	r0, #0
    1a94:	0100000d 	tsteq	r0, sp
    1a98:	00006218 	andeq	r6, r0, r8, lsl r2
    1a9c:	f8030500 			; <UNDEFINED> instruction: 0xf8030500
    1aa0:	10200033 	eorne	r0, r0, r3, lsr r0
    1aa4:	00000ce7 	andeq	r0, r0, r7, ror #25
    1aa8:	00621901 	rsbeq	r1, r2, r1, lsl #18
    1aac:	03050000 	movweq	r0, #20480	; 0x5000
    1ab0:	20003490 	mulcs	r0, r0, r4
    1ab4:	000ddc10 	andeq	sp, sp, r0, lsl ip
    1ab8:	621a0100 	andsvs	r0, sl, #0, 2
    1abc:	05000000 	streq	r0, [r0, #-0]
    1ac0:	00342003 	eorseq	r2, r4, r3
    1ac4:	0d3d1020 	ldceq	0, cr1, [sp, #-128]!	; 0xffffff80
    1ac8:	1b010000 	blne	41ad0 <startup-0x1ffbe530>
    1acc:	00000062 	andeq	r0, r0, r2, rrx
    1ad0:	33ec0305 	mvncc	r0, #335544320	; 0x14000000
    1ad4:	21102000 	tstcs	r0, r0
    1ad8:	0100000d 	tsteq	r0, sp
    1adc:	0000621c 	andeq	r6, r0, ip, lsl r2
    1ae0:	9c030500 	cfstr32ls	mvfx0, [r3], {-0}
    1ae4:	10200034 	eorne	r0, r0, r4, lsr r0
    1ae8:	00000dea 	andeq	r0, r0, sl, ror #27
    1aec:	00621d01 	rsbeq	r1, r2, r1, lsl #26
    1af0:	03050000 	movweq	r0, #20480	; 0x5000
    1af4:	20003438 	andcs	r3, r0, r8, lsr r4
    1af8:	000df910 	andeq	pc, sp, r0, lsl r9	; <UNPREDICTABLE>
    1afc:	621e0100 	andsvs	r0, lr, #0, 2
    1b00:	05000000 	streq	r0, [r0, #-0]
    1b04:	00342c03 	eorseq	r2, r4, r3, lsl #24
    1b08:	0d111020 	ldceq	0, cr1, [r1, #-128]	; 0xffffff80
    1b0c:	1f010000 	svcne	0x00010000
    1b10:	00000062 	andeq	r0, r0, r2, rrx
    1b14:	34040305 	strcc	r0, [r4], #-773	; 0xfffffcfb
    1b18:	74102000 	ldrvc	r2, [r0], #-0
    1b1c:	0100000e 	tsteq	r0, lr
    1b20:	00006220 	andeq	r6, r0, r0, lsr #4
    1b24:	70030500 	andvc	r0, r3, r0, lsl #10
    1b28:	10200034 	eorne	r0, r0, r4, lsr r0
    1b2c:	00000cf6 	strdeq	r0, [r0], -r6
    1b30:	014c2301 	cmpeq	ip, r1, lsl #6
    1b34:	03050000 	movweq	r0, #20480	; 0x5000
    1b38:	20003448 	andcs	r3, r0, r8, asr #8
    1b3c:	000e4410 	andeq	r4, lr, r0, lsl r4
    1b40:	a4240100 	strtge	r0, [r4], #-256	; 0xffffff00
    1b44:	05000000 	streq	r0, [r0, #-0]
    1b48:	00348403 	eorseq	r8, r4, r3, lsl #8
    1b4c:	0ed41020 	cdpeq	0, 13, cr1, cr4, cr0, {1}
    1b50:	25010000 	strcs	r0, [r1, #-0]
    1b54:	000000a4 	andeq	r0, r0, r4, lsr #1
    1b58:	33e00305 	mvncc	r0, #335544320	; 0x14000000
    1b5c:	5f102000 	svcpl	0x00102000
    1b60:	0100000d 	tsteq	r0, sp
    1b64:	0000a426 	andeq	sl, r0, r6, lsr #8
    1b68:	ac030500 	cfstr32ge	mvfx0, [r3], {-0}
    1b6c:	10200034 	eorne	r0, r0, r4, lsr r0
    1b70:	00000e2c 	andeq	r0, r0, ip, lsr #28
    1b74:	00a42701 	adceq	r2, r4, r1, lsl #14
    1b78:	03050000 	movweq	r0, #20480	; 0x5000
    1b7c:	20003410 	andcs	r3, r0, r0, lsl r4
    1b80:	0000a40b 	andeq	sl, r0, fp, lsl #8
    1b84:	0003c500 	andeq	ip, r3, r0, lsl #10
    1b88:	018e0e00 	orreq	r0, lr, r0, lsl #28
    1b8c:	00030000 	andeq	r0, r3, r0
    1b90:	000e6810 	andeq	r6, lr, r0, lsl r8
    1b94:	b5280100 	strlt	r0, [r8, #-256]!	; 0xffffff00
    1b98:	05000003 	streq	r0, [r0, #-3]
    1b9c:	0033b003 	eorseq	fp, r3, r3
    1ba0:	0d881120 	stfeqs	f1, [r8, #128]	; 0x80
    1ba4:	4c010000 	stcmi	0, cr0, [r1], {-0}
    1ba8:	200014f8 	strdcs	r1, [r0], -r8
    1bac:	000000f8 	strdeq	r0, [r0], -r8
    1bb0:	040b9c01 	streq	r9, [fp], #-3073	; 0xfffff3ff
    1bb4:	f6120000 			; <UNDEFINED> instruction: 0xf6120000
    1bb8:	0100000c 	tsteq	r0, ip
    1bbc:	0001624c 	andeq	r6, r1, ip, asr #4
    1bc0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1bc4:	0007e90f 	andeq	lr, r7, pc, lsl #18
    1bc8:	2e4d0100 	dvfcse	f0, f5, f0
    1bcc:	05000001 	streq	r0, [r0, #-1]
    1bd0:	00713003 	rsbseq	r3, r1, r3
    1bd4:	e7130020 	ldr	r0, [r3, -r0, lsr #32]
    1bd8:	01000003 	tsteq	r0, r3
    1bdc:	0013b829 	andseq	fp, r3, r9, lsr #16
    1be0:	00014020 	andeq	r4, r1, r0, lsr #32
    1be4:	0f9c0100 	svceq	0x009c0100
    1be8:	00000c62 	andeq	r0, r0, r2, ror #24
    1bec:	009e2b01 	addseq	r2, lr, r1, lsl #22
    1bf0:	91020000 	mrsls	r0, (UNDEF: 2)
    1bf4:	0c6c0f74 	stcleq	15, cr0, [ip], #-464	; 0xfffffe30
    1bf8:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    1bfc:	0000009e 	muleq	r0, lr, r0
    1c00:	0f709102 	svceq	0x00709102
    1c04:	00000a62 	andeq	r0, r0, r2, ror #20
    1c08:	009e3101 	addseq	r3, lr, r1, lsl #2
    1c0c:	91020000 	mrsls	r0, (UNDEF: 2)
    1c10:	09830f6c 	stmibeq	r3, {r2, r3, r5, r6, r8, r9, sl, fp}
    1c14:	35010000 	strcc	r0, [r1, #-0]
    1c18:	0000009e 	muleq	r0, lr, r0
    1c1c:	0f689102 	svceq	0x00689102
    1c20:	00000c8c 	andeq	r0, r0, ip, lsl #25
    1c24:	009e3801 	addseq	r3, lr, r1, lsl #16
    1c28:	91020000 	mrsls	r0, (UNDEF: 2)
    1c2c:	0a200f64 	beq	8059c4 <startup-0x1f7fa63c>
    1c30:	3b010000 	blcc	41c38 <startup-0x1ffbe3c8>
    1c34:	0000009e 	muleq	r0, lr, r0
    1c38:	0f609102 	svceq	0x00609102
    1c3c:	00000c38 	andeq	r0, r0, r8, lsr ip
    1c40:	009e4001 	addseq	r4, lr, r1
    1c44:	91020000 	mrsls	r0, (UNDEF: 2)
    1c48:	0c960f5c 	ldceq	15, cr0, [r6], {92}	; 0x5c
    1c4c:	43010000 	movwmi	r0, #4096	; 0x1000
    1c50:	0000009e 	muleq	r0, lr, r0
    1c54:	0f589102 	svceq	0x00589102
    1c58:	00000ca0 	andeq	r0, r0, r0, lsr #25
    1c5c:	009e4601 	addseq	r4, lr, r1, lsl #12
    1c60:	91020000 	mrsls	r0, (UNDEF: 2)
    1c64:	9f000054 	svcls	0x00000054
    1c68:	04000008 	streq	r0, [r0], #-8
    1c6c:	0005f100 	andeq	pc, r5, r0, lsl #2
    1c70:	77010400 	strvc	r0, [r1, -r0, lsl #8]
    1c74:	0c000000 	stceq	0, cr0, [r0], {-0}
    1c78:	00000fcb 	andeq	r0, r0, fp, asr #31
    1c7c:	200015f0 	strdcs	r1, [r0], -r0
    1c80:	00000e44 	andeq	r0, r0, r4, asr #28
    1c84:	0000088c 	andeq	r0, r0, ip, lsl #17
    1c88:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
    1c8c:	0000004e 	andeq	r0, r0, lr, asr #32
    1c90:	0002d603 	andeq	sp, r2, r3, lsl #12
    1c94:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
    1c98:	00000000 	andeq	r0, r0, r0
    1c9c:	0005f903 	andeq	pc, r5, r3, lsl #18
    1ca0:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
    1ca4:	04000000 	streq	r0, [r0], #-0
    1ca8:	00100903 	andseq	r0, r0, r3, lsl #18
    1cac:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
    1cb0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1cb4:	07040400 	streq	r0, [r4, -r0, lsl #8]
    1cb8:	000002fa 	strdeq	r0, [r0], -sl
    1cbc:	005b0405 	subseq	r0, fp, r5, lsl #8
    1cc0:	01040000 	mrseq	r0, (UNDEF: 4)
    1cc4:	00041108 	andeq	r1, r4, r8, lsl #2
    1cc8:	115b0600 	cmpne	fp, r0, lsl #12
    1ccc:	0a020000 	beq	81cd4 <startup-0x1ff7e32c>
    1cd0:	00000021 	andeq	r0, r0, r1, lsr #32
    1cd4:	00001607 	andeq	r1, r0, r7, lsl #12
    1cd8:	06030c00 	streq	r0, [r3], -r0, lsl #24
    1cdc:	0000009e 	muleq	r0, lr, r0
    1ce0:	0004e703 	andeq	lr, r4, r3, lsl #14
    1ce4:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
    1ce8:	00000000 	andeq	r0, r0, r0
    1cec:	00001d03 	andeq	r1, r0, r3, lsl #26
    1cf0:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
    1cf4:	04000000 	streq	r0, [r0], #-0
    1cf8:	00001203 	andeq	r1, r0, r3, lsl #4
    1cfc:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
    1d00:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1d04:	62040500 	andvs	r0, r4, #0, 10
    1d08:	06000000 	streq	r0, [r0], -r0
    1d0c:	00000c28 	andeq	r0, r0, r8, lsr #24
    1d10:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
    1d14:	ce070000 	cdpgt	0, 0, cr0, cr7, cr0, {0}
    1d18:	24000005 	strcs	r0, [r0], #-5
    1d1c:	01280604 			; <UNDEFINED> instruction: 0x01280604
    1d20:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
    1d24:	04000003 	streq	r0, [r0], #-3
    1d28:	00012807 	andeq	r2, r1, r7, lsl #16
    1d2c:	da030000 	ble	c1d34 <startup-0x1ff3e2cc>
    1d30:	04000005 	streq	r0, [r0], #-5
    1d34:	00012e08 	andeq	r2, r1, r8, lsl #28
    1d38:	52030400 	andpl	r0, r3, #0, 8
    1d3c:	04000005 	streq	r0, [r0], #-5
    1d40:	00012e09 	andeq	r2, r1, r9, lsl #28
    1d44:	6d030800 	stcvs	8, cr0, [r3, #-0]
    1d48:	04000005 	streq	r0, [r0], #-5
    1d4c:	0001460c 	andeq	r4, r1, ip, lsl #12
    1d50:	cf030c00 	svcgt	0x00030c00
    1d54:	04000002 	streq	r0, [r0], #-2
    1d58:	0001460d 	andeq	r4, r1, sp, lsl #12
    1d5c:	c0031000 	andgt	r1, r3, r0
    1d60:	04000003 	streq	r0, [r0], #-3
    1d64:	00012e10 	andeq	r2, r1, r0, lsl lr
    1d68:	48031400 	stmdami	r3, {sl, ip}
    1d6c:	04000000 	streq	r0, [r0], #-0
    1d70:	00012e11 	andeq	r2, r1, r1, lsl lr
    1d74:	3f031800 	svccc	0x00031800
    1d78:	04000003 	streq	r0, [r0], #-3
    1d7c:	00012e12 	andeq	r2, r1, r2, lsl lr
    1d80:	4f031c00 	svcmi	0x00031c00
    1d84:	04000003 	streq	r0, [r0], #-3
    1d88:	00012e13 	andeq	r2, r1, r3, lsl lr
    1d8c:	05002000 	streq	r2, [r0, #-0]
    1d90:	0000a404 	andeq	sl, r0, r4, lsl #8
    1d94:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
    1d98:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1d9c:	00014009 	andeq	r4, r1, r9
    1da0:	01400a00 	cmpeq	r0, r0, lsl #20
    1da4:	05000000 	streq	r0, [r0, #-0]
    1da8:	0000af04 	andeq	sl, r0, r4, lsl #30
    1dac:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
    1db0:	06000001 	streq	r0, [r0], -r1
    1db4:	000005cf 	andeq	r0, r0, pc, asr #11
    1db8:	00af1504 	adceq	r1, pc, r4, lsl #10
    1dbc:	620b0000 	andvs	r0, fp, #0
    1dc0:	62000001 	andvs	r0, r0, #1
    1dc4:	0c000001 	stceq	0, cr0, [r0], {1}
    1dc8:	4c040500 	cfstr32mi	mvfx0, [r4], {-0}
    1dcc:	0d000001 	stceq	0, cr0, [r0, #-4]
    1dd0:	00000494 	muleq	r0, r4, r4
    1dd4:	01571c04 	cmpeq	r7, r4, lsl #24
    1dd8:	850d0000 	strhi	r0, [sp, #-0]
    1ddc:	04000003 	streq	r0, [r0], #-3
    1de0:	00012e1d 	andeq	r2, r1, sp, lsl lr
    1de4:	05980600 	ldreq	r0, [r8, #1536]	; 0x600
    1de8:	24050000 	strcs	r0, [r5], #-0
    1dec:	0000005b 	andeq	r0, r0, fp, asr r0
    1df0:	00017e0b 	andeq	r7, r1, fp, lsl #28
    1df4:	00019a00 	andeq	r9, r1, r0, lsl #20
    1df8:	019a0e00 	orrseq	r0, sl, r0, lsl #28
    1dfc:	03ff0000 	mvnseq	r0, #0
    1e00:	07040400 	streq	r0, [r4, -r0, lsl #8]
    1e04:	0000036c 	andeq	r0, r0, ip, ror #6
    1e08:	000f3f0d 	andeq	r3, pc, sp, lsl #30
    1e0c:	892b0500 	stmdbhi	fp!, {r8, sl}
    1e10:	0d000001 	stceq	0, cr0, [r0, #-4]
    1e14:	000001f2 	strdeq	r0, [r0], -r2
    1e18:	01892c05 	orreq	r2, r9, r5, lsl #24
    1e1c:	1f0d0000 	svcne	0x000d0000
    1e20:	05000004 	streq	r0, [r0, #-4]
    1e24:	0001892d 	andeq	r8, r1, sp, lsr #18
    1e28:	02dc0d00 	sbcseq	r0, ip, #0, 26
    1e2c:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    1e30:	00000189 	andeq	r0, r0, r9, lsl #3
    1e34:	00026c0d 	andeq	r6, r2, sp, lsl #24
    1e38:	892f0500 	stmdbhi	pc!, {r8, sl}	; <UNPREDICTABLE>
    1e3c:	0d000001 	stceq	0, cr0, [r0, #-4]
    1e40:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
    1e44:	01893005 	orreq	r3, r9, r5
    1e48:	a00d0000 	andge	r0, sp, r0
    1e4c:	05000005 	streq	r0, [r0, #-5]
    1e50:	00018931 	andeq	r8, r1, r1, lsr r9
    1e54:	01ac0f00 			; <UNDEFINED> instruction: 0x01ac0f00
    1e58:	2b010000 	blcs	41e60 <startup-0x1ffbe1a0>
    1e5c:	44bc0305 	ldrtmi	r0, [ip], #773	; 0x305
    1e60:	b70f2000 	strlt	r2, [pc, -r0]
    1e64:	01000001 	tsteq	r0, r1
    1e68:	bc03052c 	cfstr32lt	mvfx0, [r3], {44}	; 0x2c
    1e6c:	0f200038 	svceq	0x00200038
    1e70:	000001c2 	andeq	r0, r0, r2, asr #3
    1e74:	03052d01 	movweq	r2, #23809	; 0x5d01
    1e78:	200040bc 	strhcs	r4, [r0], -ip
    1e7c:	0001cd0f 	andeq	ip, r1, pc, lsl #26
    1e80:	052e0100 	streq	r0, [lr, #-256]!	; 0xffffff00
    1e84:	0048bc03 	subeq	fp, r8, r3, lsl #24
    1e88:	01a10f20 			; <UNDEFINED> instruction: 0x01a10f20
    1e8c:	2f010000 	svccs	0x00010000
    1e90:	3cbc0305 	ldccc	3, cr0, [ip], #20
    1e94:	d8102000 	ldmdale	r0, {sp}
    1e98:	01000001 	tsteq	r0, r1
    1e9c:	34bc0305 	ldrtcc	r0, [ip], #773	; 0x305
    1ea0:	e3102000 	tst	r0, #0
    1ea4:	01000001 	tsteq	r0, r1
    1ea8:	4cbc0305 	ldcmi	3, cr0, [ip], #20
    1eac:	75112000 	ldrvc	r2, [r1, #-0]
    1eb0:	0100000f 	tsteq	r0, pc
    1eb4:	23ca01a8 	biccs	r0, sl, #168, 2	; 0x2a
    1eb8:	006a2000 	rsbeq	r2, sl, r0
    1ebc:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ec0:	0000026d 	andeq	r0, r0, sp, ror #4
    1ec4:	00105c12 	andseq	r5, r0, r2, lsl ip
    1ec8:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
    1ecc:	0000012e 	andeq	r0, r0, lr, lsr #2
    1ed0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1ed4:	000f0611 	andeq	r0, pc, r1, lsl r6	; <UNPREDICTABLE>
    1ed8:	01a00100 	lsleq	r0, r0, #2
    1edc:	20002348 	andcs	r2, r0, r8, asr #6
    1ee0:	00000082 	andeq	r0, r0, r2, lsl #1
    1ee4:	02a29c01 	adceq	r9, r2, #256	; 0x100
    1ee8:	50120000 	andspl	r0, r2, r0
    1eec:	0100000f 	tsteq	r0, pc
    1ef0:	016201a0 	smultbeq	r2, r0, r1
    1ef4:	91020000 	mrsls	r0, (UNDEF: 2)
    1ef8:	03c8136c 	biceq	r1, r8, #108, 6	; 0xb0000001
    1efc:	a1010000 	mrsge	r0, (UNDEF: 1)
    1f00:	00012e01 	andeq	r2, r1, r1, lsl #28
    1f04:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1f08:	10141400 	andsne	r1, r4, r0, lsl #8
    1f0c:	96010000 	strls	r0, [r1], -r0
    1f10:	00224001 	eoreq	r4, r2, r1
    1f14:	00010820 	andeq	r0, r1, r0, lsr #16
    1f18:	c69c0100 	ldrgt	r0, [ip], r0, lsl #2
    1f1c:	15000002 	strne	r0, [r0, #-2]
    1f20:	97010069 	strls	r0, [r1, -r9, rrx]
    1f24:	00012e01 	andeq	r2, r1, r1, lsl #28
    1f28:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1f2c:	0fa61100 	svceq	0x00a61100
    1f30:	70010000 	andvc	r0, r1, r0
    1f34:	00211001 	eoreq	r1, r1, r1
    1f38:	00013020 	andeq	r3, r1, r0, lsr #32
    1f3c:	3a9c0100 	bcc	fe702344 <firstTime.4040+0xde6f9a0c>
    1f40:	15000003 	strne	r0, [r0, #-3]
    1f44:	71010078 	tstvc	r1, r8, ror r0
    1f48:	00012e01 	andeq	r2, r1, r1, lsl #28
    1f4c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1f50:	01007915 	tsteq	r0, r5, lsl r9
    1f54:	012e0172 			; <UNDEFINED> instruction: 0x012e0172
    1f58:	91020000 	mrsls	r0, (UNDEF: 2)
    1f5c:	02d61368 	sbcseq	r1, r6, #104, 6	; 0xa0000001
    1f60:	73010000 	movwvc	r0, #4096	; 0x1000
    1f64:	00012e01 	andeq	r2, r1, r1, lsl #28
    1f68:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1f6c:	0005f913 	andeq	pc, r5, r3, lsl r9	; <UNPREDICTABLE>
    1f70:	01740100 	cmneq	r4, r0, lsl #2
    1f74:	0000012e 	andeq	r0, r0, lr, lsr #2
    1f78:	15609102 	strbne	r9, [r0, #-258]!	; 0xfffffefe
    1f7c:	01003278 	tsteq	r0, r8, ror r2
    1f80:	012e0176 			; <UNDEFINED> instruction: 0x012e0176
    1f84:	91020000 	mrsls	r0, (UNDEF: 2)
    1f88:	0069165c 	rsbeq	r1, r9, ip, asr r6
    1f8c:	2e017a01 	vmlacs.f32	s14, s2, s2
    1f90:	15000001 	strne	r0, [r0, #-1]
    1f94:	7b01006b 	blvc	42148 <startup-0x1ffbdeb8>
    1f98:	00012e01 	andeq	r2, r1, r1, lsl #28
    1f9c:	58910200 	ldmpl	r1, {r9}
    1fa0:	10a61100 	adcne	r1, r6, r0, lsl #2
    1fa4:	65010000 	strvs	r0, [r1, #-0]
    1fa8:	0020be01 	eoreq	fp, r0, r1, lsl #28
    1fac:	00005220 	andeq	r5, r0, r0, lsr #4
    1fb0:	a39c0100 	orrsge	r0, ip, #0, 2
    1fb4:	17000003 	strne	r0, [r0, -r3]
    1fb8:	65010078 	strvs	r0, [r1, #-120]	; 0xffffff88
    1fbc:	00012e01 	andeq	r2, r1, r1, lsl #28
    1fc0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1fc4:	01007917 	tsteq	r0, r7, lsl r9
    1fc8:	012e0165 			; <UNDEFINED> instruction: 0x012e0165
    1fcc:	91020000 	mrsls	r0, (UNDEF: 2)
    1fd0:	02d61268 	sbcseq	r1, r6, #104, 4	; 0x80000006
    1fd4:	65010000 	strvs	r0, [r1, #-0]
    1fd8:	00012e01 	andeq	r2, r1, r1, lsl #28
    1fdc:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1fe0:	0005f912 	andeq	pc, r5, r2, lsl r9	; <UNPREDICTABLE>
    1fe4:	01650100 	cmneq	r5, r0, lsl #2
    1fe8:	0000012e 	andeq	r0, r0, lr, lsr #2
    1fec:	15609102 	strbne	r9, [r0, #-258]!	; 0xfffffefe
    1ff0:	66010069 	strvs	r0, [r1], -r9, rrx
    1ff4:	00012e01 	andeq	r2, r1, r1, lsl #28
    1ff8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1ffc:	01006a15 	tsteq	r0, r5, lsl sl
    2000:	012e0167 			; <UNDEFINED> instruction: 0x012e0167
    2004:	91020000 	mrsls	r0, (UNDEF: 2)
    2008:	49110070 	ldmdbmi	r1, {r4, r5, r6}
    200c:	01000010 	tsteq	r0, r0, lsl r0
    2010:	206c015b 	rsbcs	r0, ip, fp, asr r1
    2014:	00522000 	subseq	r2, r2, r0
    2018:	9c010000 	stcls	0, cr0, [r1], {-0}
    201c:	0000040c 	andeq	r0, r0, ip, lsl #8
    2020:	01007817 	tsteq	r0, r7, lsl r8
    2024:	012e015b 			; <UNDEFINED> instruction: 0x012e015b
    2028:	91020000 	mrsls	r0, (UNDEF: 2)
    202c:	0079176c 	rsbseq	r1, r9, ip, ror #14
    2030:	2e015b01 	vmlacs.f64	d5, d1, d1
    2034:	02000001 	andeq	r0, r0, #1
    2038:	d6126891 			; <UNDEFINED> instruction: 0xd6126891
    203c:	01000002 	tsteq	r0, r2
    2040:	012e015b 			; <UNDEFINED> instruction: 0x012e015b
    2044:	91020000 	mrsls	r0, (UNDEF: 2)
    2048:	05f91264 	ldrbeq	r1, [r9, #612]!	; 0x264
    204c:	5b010000 	blpl	42054 <startup-0x1ffbdfac>
    2050:	00012e01 	andeq	r2, r1, r1, lsl #28
    2054:	60910200 	addsvs	r0, r1, r0, lsl #4
    2058:	01006915 	tsteq	r0, r5, lsl r9
    205c:	012e015c 			; <UNDEFINED> instruction: 0x012e015c
    2060:	91020000 	mrsls	r0, (UNDEF: 2)
    2064:	006a1574 	rsbeq	r1, sl, r4, ror r5
    2068:	2e015d01 	cdpcs	13, 0, cr5, cr1, cr1, {0}
    206c:	02000001 	andeq	r0, r0, #1
    2070:	11007091 	swpne	r7, r1, [r0]
    2074:	00000f80 	andeq	r0, r0, r0, lsl #31
    2078:	52014501 	andpl	r4, r1, #4194304	; 0x400000
    207c:	1a20001f 	bne	802100 <startup-0x1f7fdf00>
    2080:	01000001 	tsteq	r0, r1
    2084:	0004b79c 	muleq	r4, ip, r7
    2088:	00731700 	rsbseq	r1, r3, r0, lsl #14
    208c:	9e014501 	cfsh32ls	mvfx4, mvfx1, #1
    2090:	02000000 	andeq	r0, r0, #0
    2094:	78175491 	ldmdavc	r7, {r0, r4, r7, sl, ip, lr}
    2098:	01450100 	mrseq	r0, (UNDEF: 85)
    209c:	0000012e 	andeq	r0, r0, lr, lsr #2
    20a0:	17509102 	ldrbne	r9, [r0, -r2, lsl #2]
    20a4:	45010079 	strmi	r0, [r1, #-121]	; 0xffffff87
    20a8:	00012e01 	andeq	r2, r1, r1, lsl #28
    20ac:	4c910200 	lfmmi	f0, 4, [r1], {0}
    20b0:	74657317 	strbtvc	r7, [r5], #-791	; 0xfffffce9
    20b4:	01450100 	mrseq	r0, (UNDEF: 85)
    20b8:	0000012e 	andeq	r0, r0, lr, lsr #2
    20bc:	12489102 	subne	r9, r8, #-2147483648	; 0x80000000
    20c0:	0000100e 	andeq	r1, r0, lr
    20c4:	2e014501 	cfsh32cs	mvfx4, mvfx1, #1
    20c8:	02000001 	andeq	r0, r0, #1
    20cc:	69150091 	ldmdbvs	r5, {r0, r4, r7}
    20d0:	01460100 	mrseq	r0, (UNDEF: 86)
    20d4:	0000012e 	andeq	r0, r0, lr, lsr #2
    20d8:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    20dc:	4601006a 	strmi	r0, [r1], -sl, rrx
    20e0:	00012e01 	andeq	r2, r1, r1, lsl #28
    20e4:	68910200 	ldmvs	r1, {r9}
    20e8:	01006b15 	tsteq	r0, r5, lsl fp
    20ec:	012e0146 			; <UNDEFINED> instruction: 0x012e0146
    20f0:	91020000 	mrsls	r0, (UNDEF: 2)
    20f4:	10811364 	addne	r1, r1, r4, ror #6
    20f8:	46010000 	strmi	r0, [r1], -r0
    20fc:	00012e01 	andeq	r2, r1, r1, lsl #28
    2100:	60910200 	addsvs	r0, r1, r0, lsl #4
    2104:	001f8a18 	andseq	r8, pc, r8, lsl sl	; <UNPREDICTABLE>
    2108:	0000bc20 	andeq	fp, r0, r0, lsr #24
    210c:	107c1300 	rsbsne	r1, ip, r0, lsl #6
    2110:	4d010000 	stcmi	0, cr0, [r1, #-0]
    2114:	00005b01 	andeq	r5, r0, r1, lsl #22
    2118:	5f910200 	svcpl	0x00910200
    211c:	55110000 	ldrpl	r0, [r1, #-0]
    2120:	0100000f 	tsteq	r0, pc
    2124:	1e7c0130 	mrcne	1, 3, r0, cr12, cr0, {1}
    2128:	00d62000 	sbcseq	r2, r6, r0
    212c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2130:	00000520 	andeq	r0, r0, r0, lsr #10
    2134:	000ef212 	andeq	pc, lr, r2, lsl r2	; <UNPREDICTABLE>
    2138:	01300100 	teqeq	r0, r0, lsl #2
    213c:	00000520 	andeq	r0, r0, r0, lsr #10
    2140:	15649102 	strbne	r9, [r4, #-258]!	; 0xfffffefe
    2144:	31010069 	tstcc	r1, r9, rrx
    2148:	00017e01 	andeq	r7, r1, r1, lsl #28
    214c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2150:	01006a15 	tsteq	r0, r5, lsl sl
    2154:	017e0131 	cmneq	lr, r1, lsr r1
    2158:	91020000 	mrsls	r0, (UNDEF: 2)
    215c:	12b21376 	adcsne	r1, r2, #-671088639	; 0xd8000001
    2160:	31010000 	mrscc	r0, (UNDEF: 1)
    2164:	00017e01 	andeq	r7, r1, r1, lsl #28
    2168:	6f910200 	svcvs	0x00910200
    216c:	01006315 	tsteq	r0, r5, lsl r3
    2170:	017e0131 	cmneq	lr, r1, lsr r1
    2174:	91020000 	mrsls	r0, (UNDEF: 2)
    2178:	006b1575 	rsbeq	r1, fp, r5, ror r5
    217c:	4e013201 	cdpmi	2, 0, cr3, cr1, cr1, {0}
    2180:	02000000 	andeq	r0, r0, #0
    2184:	05007091 	streq	r7, [r0, #-145]	; 0xffffff6f
    2188:	00017e04 	andeq	r7, r1, r4, lsl #28
    218c:	0eff1100 	cdpeq	1, 15, cr1, cr15, cr0, {0}
    2190:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    2194:	001cdc01 	andseq	sp, ip, r1, lsl #24
    2198:	0001a020 	andeq	sl, r1, r0, lsr #32
    219c:	a09c0100 	addsge	r0, ip, r0, lsl #2
    21a0:	17000005 	strne	r0, [r0, -r5]
    21a4:	08010078 	stmdaeq	r1, {r3, r4, r5, r6}
    21a8:	00012e01 	andeq	r2, r1, r1, lsl #28
    21ac:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    21b0:	01007917 	tsteq	r0, r7, lsl r9
    21b4:	012e0108 			; <UNDEFINED> instruction: 0x012e0108
    21b8:	91020000 	mrsls	r0, (UNDEF: 2)
    21bc:	65731760 	ldrbvs	r1, [r3, #-1888]!	; 0xfffff8a0
    21c0:	08010074 	stmdaeq	r1, {r2, r4, r5, r6}
    21c4:	00012e01 	andeq	r2, r1, r1, lsl #28
    21c8:	5c910200 	lfmpl	f0, 4, [r1], {0}
    21cc:	00105713 	andseq	r5, r0, r3, lsl r7
    21d0:	01090100 	mrseq	r0, (UNDEF: 25)
    21d4:	0000017e 	andeq	r0, r0, lr, ror r1
    21d8:	15779102 	ldrbne	r9, [r7, #-258]!	; 0xfffffefe
    21dc:	09010063 	stmdbeq	r1, {r0, r1, r5, r6}
    21e0:	00017e01 	andeq	r7, r1, r1, lsl #28
    21e4:	6f910200 	svcvs	0x00910200
    21e8:	0012b213 	andseq	fp, r2, r3, lsl r2
    21ec:	01090100 	mrseq	r0, (UNDEF: 25)
    21f0:	0000017e 	andeq	r0, r0, lr, ror r1
    21f4:	13769102 	cmnne	r6, #-2147483648	; 0x80000000
    21f8:	000010b5 	strheq	r1, [r0], -r5
    21fc:	2e010a01 	vmlacs.f32	s0, s2, s2
    2200:	02000001 	andeq	r0, r0, #1
    2204:	19007091 	stmdbne	r0, {r0, r4, r7, ip, sp, lr}
    2208:	00000f4a 	andeq	r0, r0, sl, asr #30
    220c:	1b5cde01 	blne	1739a18 <startup-0x1e8c65e8>
    2210:	01802000 	orreq	r2, r0, r0
    2214:	9c010000 	stcls	0, cr0, [r1], {-0}
    2218:	00000606 	andeq	r0, r0, r6, lsl #12
    221c:	0100781a 	tsteq	r0, sl, lsl r8
    2220:	00012ede 	ldrdeq	r2, [r1], -lr
    2224:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2228:	0100791a 	tsteq	r0, sl, lsl r9
    222c:	00012ede 	ldrdeq	r2, [r1], -lr
    2230:	68910200 	ldmvs	r1, {r9}
    2234:	7465731a 	strbtvc	r7, [r5], #-794	; 0xfffffce6
    2238:	2ede0100 	cdpcs	1, 13, cr0, cr14, cr0, {0}
    223c:	02000001 	andeq	r0, r0, #1
    2240:	0e1b6491 	cfcmpseq	r6, mvf11, mvf1
    2244:	01000010 	tsteq	r0, r0, lsl r0
    2248:	00012ede 	ldrdeq	r2, [r1], -lr
    224c:	60910200 	addsvs	r0, r1, r0, lsl #4
    2250:	0010571c 	andseq	r5, r0, ip, lsl r7
    2254:	7edf0100 	cdpvc	1, 13, cr0, cr15, cr0, {0}
    2258:	02000001 	andeq	r0, r0, #1
    225c:	b51c7791 	ldrlt	r7, [ip, #-1937]	; 0xfffff86f
    2260:	01000010 	tsteq	r0, r0, lsl r0
    2264:	00012ee0 	andeq	r2, r1, r0, ror #29
    2268:	70910200 	addsvc	r0, r1, r0, lsl #4
    226c:	11081d00 	tstne	r8, r0, lsl #26
    2270:	d1010000 	mrsle	r0, (UNDEF: 1)
    2274:	20001af6 	strdcs	r1, [r0], -r6
    2278:	00000066 	andeq	r0, r0, r6, rrx
    227c:	06429c01 	strbeq	r9, [r2], -r1, lsl #24
    2280:	e01c0000 	ands	r0, ip, r0
    2284:	0100000e 	tsteq	r0, lr
    2288:	00017ed2 	ldrdeq	r7, [r1], -r2
    228c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2290:	001b0418 	andseq	r0, fp, r8, lsl r4
    2294:	00003e20 	andeq	r3, r0, r0, lsr #28
    2298:	64611e00 	strbtvs	r1, [r1], #-3584	; 0xfffff200
    229c:	d6010064 	strle	r0, [r1], -r4, rrx
    22a0:	0000017e 	andeq	r0, r0, lr, ror r1
    22a4:	00769102 	rsbseq	r9, r6, r2, lsl #2
    22a8:	10f51f00 	rscsne	r1, r5, r0, lsl #30
    22ac:	bd010000 	stclt	0, cr0, [r1, #-0]
    22b0:	20001a88 	andcs	r1, r0, r8, lsl #21
    22b4:	0000006e 	andeq	r0, r0, lr, rrx
    22b8:	691d9c01 	ldmdbvs	sp, {r0, sl, fp, ip, pc}
    22bc:	01000010 	tsteq	r0, r0, lsl r0
    22c0:	001a42b5 			; <UNDEFINED> instruction: 0x001a42b5
    22c4:	00004620 	andeq	r4, r0, r0, lsr #12
    22c8:	859c0100 	ldrhi	r0, [ip, #256]	; 0x100
    22cc:	1b000006 	blne	22ec <startup-0x1fffdd14>
    22d0:	00000f31 	andeq	r0, r0, r1, lsr pc
    22d4:	017eb501 	cmneq	lr, r1, lsl #10
    22d8:	91020000 	mrsls	r0, (UNDEF: 2)
    22dc:	12b21b77 	adcsne	r1, r2, #121856	; 0x1dc00
    22e0:	b5010000 	strlt	r0, [r1, #-0]
    22e4:	0000017e 	andeq	r0, r0, lr, ror r1
    22e8:	00769102 	rsbseq	r9, r6, r2, lsl #2
    22ec:	000f231d 	andeq	r2, pc, sp, lsl r3	; <UNPREDICTABLE>
    22f0:	fcae0100 	stc2	1, cr0, [lr]
    22f4:	46200019 			; <UNDEFINED> instruction: 0x46200019
    22f8:	01000000 	mrseq	r0, (UNDEF: 0)
    22fc:	0006b79c 	muleq	r6, ip, r7
    2300:	0f311b00 	svceq	0x00311b00
    2304:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    2308:	0000017e 	andeq	r0, r0, lr, ror r1
    230c:	1b779102 	blne	1de671c <startup-0x1e2198e4>
    2310:	000012b2 			; <UNDEFINED> instruction: 0x000012b2
    2314:	017eae01 	cmneq	lr, r1, lsl #28
    2318:	91020000 	mrsls	r0, (UNDEF: 2)
    231c:	981d0076 	ldmdals	sp, {r1, r2, r4, r5, r6}
    2320:	0100000f 	tsteq	r0, pc
    2324:	00197e99 	mulseq	r9, r9, lr
    2328:	00007e20 	andeq	r7, r0, r0, lsr #28
    232c:	e99c0100 	ldmib	ip, {r8}
    2330:	1b000006 	blne	2350 <startup-0x1fffdcb0>
    2334:	00000ef9 	strdeq	r0, [r0], -r9
    2338:	017e9901 	cmneq	lr, r1, lsl #18
    233c:	91020000 	mrsls	r0, (UNDEF: 2)
    2340:	12b21b77 	adcsne	r1, r2, #121856	; 0x1dc00
    2344:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    2348:	0000017e 	andeq	r0, r0, lr, ror r1
    234c:	00769102 	rsbseq	r9, r6, r2, lsl #2
    2350:	000ffc20 	andeq	pc, pc, r0, lsr #24
    2354:	2e940100 	fmlcss	f0, f4, f0
    2358:	54000001 	strpl	r0, [r0], #-1
    235c:	2a200019 	bcs	8023c8 <startup-0x1f7fdc38>
    2360:	01000000 	mrseq	r0, (UNDEF: 0)
    2364:	0007119c 	muleq	r7, ip, r1
    2368:	12b21b00 	adcsne	r1, r2, #0, 22
    236c:	94010000 	strls	r0, [r1], #-0
    2370:	0000017e 	andeq	r0, r0, lr, ror r1
    2374:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2378:	000ee521 	andeq	lr, lr, r1, lsr #10
    237c:	7e7b0100 	rpwvce	f0, f3, f0
    2380:	c0000001 	andgt	r0, r0, r1
    2384:	94200018 	strtls	r0, [r0], #-24	; 0xffffffe8
    2388:	01000000 	mrseq	r0, (UNDEF: 0)
    238c:	0007469c 	muleq	r7, ip, r6
    2390:	12b21b00 	adcsne	r1, r2, #0, 22
    2394:	7b010000 	blvc	4239c <startup-0x1ffbdc64>
    2398:	0000017e 	andeq	r0, r0, lr, ror r1
    239c:	1e6f9102 	lgnnee	f1, f2
    23a0:	01007672 	tsteq	r0, r2, ror r6
    23a4:	00005b84 	andeq	r5, r0, r4, lsl #23
    23a8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    23ac:	10cd1d00 	sbcne	r1, sp, r0, lsl #26
    23b0:	65010000 	strvs	r0, [r1, #-0]
    23b4:	20001852 	andcs	r1, r0, r2, asr r8
    23b8:	0000006e 	andeq	r0, r0, lr, rrx
    23bc:	07689c01 	strbeq	r9, [r8, -r1, lsl #24]!
    23c0:	631e0000 	tstvs	lr, #0
    23c4:	7e660100 	powvcs	f0, f6, f0
    23c8:	02000001 	andeq	r0, r0, #1
    23cc:	1d007791 	stcne	7, cr7, [r0, #-580]	; 0xfffffdbc
    23d0:	000010bb 	strheq	r1, [r0], -fp
    23d4:	17ec5001 	strbne	r5, [ip, r1]!
    23d8:	00662000 	rsbeq	r2, r6, r0
    23dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    23e0:	0000078c 	andeq	r0, r0, ip, lsl #15
    23e4:	0012b21b 	andseq	fp, r2, fp, lsl r2
    23e8:	7e500100 	rdfvcs	f0, f0, f0
    23ec:	02000001 	andeq	r0, r0, #1
    23f0:	22007791 	andcs	r7, r0, #38010880	; 0x2440000
    23f4:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
    23f8:	17944901 	ldrne	r4, [r4, r1, lsl #18]
    23fc:	00582000 	subseq	r2, r8, r0
    2400:	9c010000 	stcls	0, cr0, [r1], {-0}
    2404:	000007ba 			; <UNDEFINED> instruction: 0x000007ba
    2408:	0100781a 	tsteq	r0, sl, lsl r8
    240c:	00017e49 	andeq	r7, r1, r9, asr #28
    2410:	6f910200 	svcvs	0x00910200
    2414:	0100631e 	tsteq	r0, lr, lsl r3
    2418:	00017e4a 	andeq	r7, r1, sl, asr #28
    241c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2420:	10282200 	eorne	r2, r8, r0, lsl #4
    2424:	41010000 	mrsmi	r0, (UNDEF: 1)
    2428:	20001744 	andcs	r1, r0, r4, asr #14
    242c:	00000050 	andeq	r0, r0, r0, asr r0
    2430:	07e89c01 	strbeq	r9, [r8, r1, lsl #24]!
    2434:	781a0000 	ldmdavc	sl, {}	; <UNPREDICTABLE>
    2438:	7e410100 	dvfvcs	f0, f1, f0
    243c:	02000001 	andeq	r0, r0, #1
    2440:	631e6f91 	tstvs	lr, #580	; 0x244
    2444:	7e420100 	dvfvcs	f0, f2, f0
    2448:	02000001 	andeq	r0, r0, #1
    244c:	1f007791 	svcne	0x00007791
    2450:	00001090 	muleq	r0, r0, r0
    2454:	17143a01 	ldrne	r3, [r4, -r1, lsl #20]
    2458:	00302000 	eorseq	r2, r0, r0
    245c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2460:	000f391f 	andeq	r3, pc, pc, lsl r9	; <UNPREDICTABLE>
    2464:	fc370100 	ldc2	1, cr0, [r7], #-0
    2468:	18200016 	stmdane	r0!, {r1, r2, r4}
    246c:	01000000 	mrseq	r0, (UNDEF: 0)
    2470:	10e0199c 	smlalne	r1, r0, ip, r9
    2474:	32010000 	andcc	r0, r1, #0
    2478:	200016ca 	andcs	r1, r0, sl, asr #13
    247c:	00000032 	andeq	r0, r0, r2, lsr r0
    2480:	083a9c01 	ldmdaeq	sl!, {r0, sl, fp, ip, pc}
    2484:	f21b0000 	vhadd.s16	d0, d11, d0
    2488:	0100000e 	tsteq	r0, lr
    248c:	00052032 	andeq	r2, r5, r2, lsr r0
    2490:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2494:	0100691e 	tsteq	r0, lr, lsl r9
    2498:	00012e33 	andeq	r2, r1, r3, lsr lr
    249c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    24a0:	0f691d00 	svceq	0x00691d00
    24a4:	21010000 	mrscs	r0, (UNDEF: 1)
    24a8:	200016a4 	andcs	r1, r0, r4, lsr #13
    24ac:	00000026 	andeq	r0, r0, r6, lsr #32
    24b0:	085d9c01 	ldmdaeq	sp, {r0, sl, fp, ip, pc}^
    24b4:	6d1a0000 	ldcvs	0, cr0, [sl, #-0]
    24b8:	21010073 	tstcs	r1, r3, ror r0
    24bc:	0000004e 	andeq	r0, r0, lr, asr #32
    24c0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    24c4:	000f171d 	andeq	r1, pc, sp, lsl r7	; <UNPREDICTABLE>
    24c8:	78180100 	ldmdavc	r8, {r8}
    24cc:	2c200016 	stccs	0, cr0, [r0], #-88	; 0xffffffa8
    24d0:	01000000 	mrseq	r0, (UNDEF: 0)
    24d4:	0008809c 	muleq	r8, ip, r0
    24d8:	73751a00 	cmnvc	r5, #0, 20
    24dc:	4e180100 	mufmie	f0, f0, f0
    24e0:	02000000 	andeq	r0, r0, #0
    24e4:	23007491 	movwcs	r7, #1169	; 0x491
    24e8:	00000f8c 	andeq	r0, r0, ip, lsl #31
    24ec:	16340e01 	ldrtne	r0, [r4], -r1, lsl #28
    24f0:	00442000 	subeq	r2, r4, r0
    24f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    24f8:	00103d23 	andseq	r3, r0, r3, lsr #26
    24fc:	f0040100 			; <UNDEFINED> instruction: 0xf0040100
    2500:	44200015 	strtmi	r0, [r0], #-21	; 0xffffffeb
    2504:	01000000 	mrseq	r0, (UNDEF: 0)
    2508:	0100009c 	swpeq	r0, ip, [r0]	; <UNPREDICTABLE>
    250c:	00040000 	andeq	r0, r4, r0
    2510:	0000081e 	andeq	r0, r0, lr, lsl r8
    2514:	00770104 	rsbseq	r0, r7, r4, lsl #2
    2518:	280c0000 	stmdacs	ip, {}	; <UNPREDICTABLE>
    251c:	34000011 	strcc	r0, [r0], #-17	; 0xffffffef
    2520:	28200024 	stmdacs	r0!, {r2, r5}
    2524:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    2528:	0200000b 	andeq	r0, r0, #11
    252c:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
    2530:	03000000 	movweq	r0, #0
    2534:	000002d6 	ldrdeq	r0, [r0], -r6
    2538:	004e0702 	subeq	r0, lr, r2, lsl #14
    253c:	03000000 	movweq	r0, #0
    2540:	000005f9 	strdeq	r0, [r0], -r9
    2544:	004e0802 	subeq	r0, lr, r2, lsl #16
    2548:	03040000 	movweq	r0, #16384	; 0x4000
    254c:	00001009 	andeq	r1, r0, r9
    2550:	00550902 	subseq	r0, r5, r2, lsl #18
    2554:	00080000 	andeq	r0, r8, r0
    2558:	fa070404 	blx	1c3570 <startup-0x1fe3ca90>
    255c:	05000002 	streq	r0, [r0, #-2]
    2560:	00005b04 	andeq	r5, r0, r4, lsl #22
    2564:	08010400 	stmdaeq	r1, {sl}
    2568:	00000411 	andeq	r0, r0, r1, lsl r4
    256c:	00115b06 	andseq	r5, r1, r6, lsl #22
    2570:	210a0200 	mrscs	r0, R10_fiq
    2574:	07000000 	streq	r0, [r0, -r0]
    2578:	00000016 	andeq	r0, r0, r6, lsl r0
    257c:	9e06030c 	cdpls	3, 0, cr0, cr6, cr12, {0}
    2580:	03000000 	movweq	r0, #0
    2584:	000004e7 	andeq	r0, r0, r7, ror #9
    2588:	009e0703 	addseq	r0, lr, r3, lsl #14
    258c:	03000000 	movweq	r0, #0
    2590:	0000001d 	andeq	r0, r0, sp, lsl r0
    2594:	009e0803 	addseq	r0, lr, r3, lsl #16
    2598:	03040000 	movweq	r0, #16384	; 0x4000
    259c:	00000012 	andeq	r0, r0, r2, lsl r0
    25a0:	009e0903 	addseq	r0, lr, r3, lsl #18
    25a4:	00080000 	andeq	r0, r8, r0
    25a8:	00620405 	rsbeq	r0, r2, r5, lsl #8
    25ac:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
    25b0:	0300000c 	movweq	r0, #12
    25b4:	00006d0a 	andeq	r6, r0, sl, lsl #26
    25b8:	111d0800 	tstne	sp, r0, lsl #16
    25bc:	03010000 	movweq	r0, #4096	; 0x1000
    25c0:	20002434 	andcs	r2, r0, r4, lsr r4
    25c4:	00000028 	andeq	r0, r0, r8, lsr #32
    25c8:	00fd9c01 	rscseq	r9, sp, r1, lsl #24
    25cc:	22090000 	andcs	r0, r9, #0
    25d0:	01000011 	tsteq	r0, r1, lsl r0
    25d4:	0000fd03 	andeq	pc, r0, r3, lsl #26
    25d8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    25dc:	0004e709 	andeq	lr, r4, r9, lsl #14
    25e0:	9e030100 	adflss	f0, f3, f0
    25e4:	02000000 	andeq	r0, r0, #0
    25e8:	1d097091 	stcne	0, cr7, [r9, #-580]	; 0xfffffdbc
    25ec:	01000000 	mrseq	r0, (UNDEF: 0)
    25f0:	00009e03 	andeq	r9, r0, r3, lsl #28
    25f4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    25f8:	00001209 	andeq	r1, r0, r9, lsl #4
    25fc:	9e030100 	adflss	f0, f3, f0
    2600:	02000000 	andeq	r0, r0, #0
    2604:	05006891 	streq	r6, [r0, #-2193]	; 0xfffff76f
    2608:	0000a404 	andeq	sl, r0, r4, lsl #8
    260c:	00c30000 	sbceq	r0, r3, r0
    2610:	00040000 	andeq	r0, r4, r0
    2614:	000008a5 	andeq	r0, r0, r5, lsr #17
    2618:	00770104 	rsbseq	r0, r7, r4, lsl #2
    261c:	620c0000 	andvs	r0, ip, #0
    2620:	5c000011 	stcpl	0, cr0, [r0], {17}
    2624:	28200024 	stmdacs	r0!, {r2, r5}
    2628:	54000000 	strpl	r0, [r0], #-0
    262c:	0200000c 	andeq	r0, r0, #12
    2630:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
    2634:	03000000 	movweq	r0, #0
    2638:	000002d6 	ldrdeq	r0, [r0], -r6
    263c:	004e0702 	subeq	r0, lr, r2, lsl #14
    2640:	03000000 	movweq	r0, #0
    2644:	000005f9 	strdeq	r0, [r0], -r9
    2648:	004e0802 	subeq	r0, lr, r2, lsl #16
    264c:	03040000 	movweq	r0, #16384	; 0x4000
    2650:	00001009 	andeq	r1, r0, r9
    2654:	00550902 	subseq	r0, r5, r2, lsl #18
    2658:	00080000 	andeq	r0, r8, r0
    265c:	fa070404 	blx	1c3674 <startup-0x1fe3c98c>
    2660:	05000002 	streq	r0, [r0, #-2]
    2664:	00005b04 	andeq	r5, r0, r4, lsl #22
    2668:	08010400 	stmdaeq	r1, {sl}
    266c:	00000411 	andeq	r0, r0, r1, lsl r4
    2670:	00115b06 	andseq	r5, r1, r6, lsl #22
    2674:	210a0200 	mrscs	r0, R10_fiq
    2678:	07000000 	streq	r0, [r0, -r0]
    267c:	00001156 	andeq	r1, r0, r6, asr r1
    2680:	245c0301 	ldrbcs	r0, [ip], #-769	; 0xfffffcff
    2684:	00282000 	eoreq	r2, r8, r0
    2688:	9c010000 	stcls	0, cr0, [r1], {-0}
    268c:	000000b9 	strheq	r0, [r0], -r9
    2690:	01007308 	tsteq	r0, r8, lsl #6
    2694:	0000b903 	andeq	fp, r0, r3, lsl #18
    2698:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    269c:	00100909 	andseq	r0, r0, r9, lsl #18
    26a0:	55030100 	strpl	r0, [r3, #-256]	; 0xffffff00
    26a4:	02000000 	andeq	r0, r0, #0
    26a8:	d6097091 			; <UNDEFINED> instruction: 0xd6097091
    26ac:	01000002 	tsteq	r0, r2
    26b0:	0000bf03 	andeq	fp, r0, r3, lsl #30
    26b4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    26b8:	0005f909 	andeq	pc, r5, r9, lsl #18
    26bc:	bf030100 	svclt	0x00030100
    26c0:	02000000 	andeq	r0, r0, #0
    26c4:	05006891 	streq	r6, [r0, #-2193]	; 0xfffff76f
    26c8:	00006204 	andeq	r6, r0, r4, lsl #4
    26cc:	05040a00 	streq	r0, [r4, #-2560]	; 0xfffff600
    26d0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    26d4:	00013500 	andeq	r3, r1, r0, lsl #10
    26d8:	37000400 	strcc	r0, [r0, -r0, lsl #8]
    26dc:	04000009 	streq	r0, [r0], #-9
    26e0:	00007701 	andeq	r7, r0, r1, lsl #14
    26e4:	11c80c00 	bicne	r0, r8, r0, lsl #24
    26e8:	24840000 	strcs	r0, [r4], #0
    26ec:	00602000 	rsbeq	r2, r0, r0
    26f0:	0cc00000 	stcleq	0, cr0, [r0], {0}
    26f4:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    26f8:	00ae1302 	adceq	r1, lr, r2, lsl #6
    26fc:	91030000 	mrsls	r0, (UNDEF: 3)
    2700:	02000011 	andeq	r0, r0, #17
    2704:	0000ae14 	andeq	sl, r0, r4, lsl lr
    2708:	aa030000 	bge	c2710 <startup-0x1ff3d8f0>
    270c:	02000011 	andeq	r0, r0, #17
    2710:	0000b515 	andeq	fp, r0, r5, lsl r5
    2714:	f5030400 			; <UNDEFINED> instruction: 0xf5030400
    2718:	02000011 	andeq	r0, r0, #17
    271c:	0000b516 	andeq	fp, r0, r6, lsl r5
    2720:	17030600 	strne	r0, [r3, -r0, lsl #12]
    2724:	02000012 	andeq	r0, r0, #18
    2728:	0000ae17 	andeq	sl, r0, r7, lsl lr
    272c:	b6030800 	strlt	r0, [r3], -r0, lsl #16
    2730:	02000011 	andeq	r0, r0, #17
    2734:	0000ae18 	andeq	sl, r0, r8, lsl lr
    2738:	27030c00 	strcs	r0, [r3, -r0, lsl #24]
    273c:	02000012 	andeq	r0, r0, #18
    2740:	0000bc19 	andeq	fp, r0, r9, lsl ip
    2744:	1f031000 	svcne	0x00031000
    2748:	02000012 	andeq	r0, r0, #18
    274c:	0000bc1a 	andeq	fp, r0, sl, lsl ip
    2750:	bc031100 	stflts	f1, [r3], {-0}
    2754:	02000011 	andeq	r0, r0, #17
    2758:	0000b51b 	andeq	fp, r0, fp, lsl r5
    275c:	10031200 	andne	r1, r3, r0, lsl #4
    2760:	02000012 	andeq	r0, r0, #18
    2764:	0000bc1c 	andeq	fp, r0, ip, lsl ip
    2768:	a2031400 	andge	r1, r3, #0, 8
    276c:	02000011 	andeq	r0, r0, #17
    2770:	0000bc1d 	andeq	fp, r0, sp, lsl ip
    2774:	2e031500 	cfsh32cs	mvfx1, mvfx3, #0
    2778:	02000012 	andeq	r0, r0, #18
    277c:	0000b51e 	andeq	fp, r0, lr, lsl r5
    2780:	04001600 	streq	r1, [r0], #-1536	; 0xfffffa00
    2784:	02fa0704 	rscseq	r0, sl, #4, 14	; 0x100000
    2788:	02040000 	andeq	r0, r4, #0
    278c:	0002f407 	andeq	pc, r2, r7, lsl #8
    2790:	08010400 	stmdaeq	r1, {sl}
    2794:	00000411 	andeq	r0, r0, r1, lsl r4
    2798:	0011b105 	andseq	fp, r1, r5, lsl #2
    279c:	211f0200 	tstcs	pc, r0, lsl #4
    27a0:	06000000 	streq	r0, [r0], -r0
    27a4:	00001200 	andeq	r1, r0, r0, lsl #4
    27a8:	01040d01 	tsteq	r4, r1, lsl #26
    27ac:	24b00000 	ldrtcs	r0, [r0], #0
    27b0:	00342000 	eorseq	r2, r4, r0
    27b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    27b8:	00000104 	andeq	r0, r0, r4, lsl #2
    27bc:	74696207 	strbtvc	r6, [r9], #-519	; 0xfffffdf9
    27c0:	040d0100 	streq	r0, [sp], #-256	; 0xffffff00
    27c4:	02000001 	andeq	r0, r0, #1
    27c8:	44086491 	strmi	r6, [r8], #-1169	; 0xfffffb6f
    27cc:	01004c49 	tsteq	r0, r9, asr #24
    27d0:	00010b0e 	andeq	r0, r1, lr, lsl #22
    27d4:	6f910200 	svcvs	0x00910200
    27d8:	05040900 	streq	r0, [r4, #-2304]	; 0xfffff700
    27dc:	00746e69 	rsbseq	r6, r4, r9, ror #28
    27e0:	1a080104 	bne	202bf8 <startup-0x1fdfd408>
    27e4:	0a000004 	beq	27fc <startup-0x1fffd804>
    27e8:	0000123a 	andeq	r1, r0, sl, lsr r2
    27ec:	010b0801 	tsteq	fp, r1, lsl #16
    27f0:	249c0000 	ldrcs	r0, [ip], #0
    27f4:	00142000 	andseq	r2, r4, r0
    27f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    27fc:	0011970b 	andseq	r9, r1, fp, lsl #14
    2800:	84040100 	strhi	r0, [r4], #-256	; 0xffffff00
    2804:	18200024 	stmdane	r0!, {r2, r5}
    2808:	01000000 	mrseq	r0, (UNDEF: 0)
    280c:	04ed009c 	strbteq	r0, [sp], #156	; 0x9c
    2810:	00040000 	andeq	r0, r4, r0
    2814:	000009f4 	strdeq	r0, [r0], -r4
    2818:	00770104 	rsbseq	r0, r7, r4, lsl #2
    281c:	7f0c0000 	svcvc	0x000c0000
    2820:	e4000013 	str	r0, [r0], #-19	; 0xffffffed
    2824:	20200024 	eorcs	r0, r0, r4, lsr #32
    2828:	2f000005 	svccs	0x00000005
    282c:	0200000d 	andeq	r0, r0, #13
    2830:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
    2834:	03000000 	movweq	r0, #0
    2838:	000002d6 	ldrdeq	r0, [r0], -r6
    283c:	004e0702 	subeq	r0, lr, r2, lsl #14
    2840:	03000000 	movweq	r0, #0
    2844:	000005f9 	strdeq	r0, [r0], -r9
    2848:	004e0802 	subeq	r0, lr, r2, lsl #16
    284c:	03040000 	movweq	r0, #16384	; 0x4000
    2850:	00001009 	andeq	r1, r0, r9
    2854:	00550902 	subseq	r0, r5, r2, lsl #18
    2858:	00080000 	andeq	r0, r8, r0
    285c:	fa070404 	blx	1c3874 <startup-0x1fe3c78c>
    2860:	05000002 	streq	r0, [r0, #-2]
    2864:	00005b04 	andeq	r5, r0, r4, lsl #22
    2868:	08010400 	stmdaeq	r1, {sl}
    286c:	00000411 	andeq	r0, r0, r1, lsl r4
    2870:	00115b06 	andseq	r5, r1, r6, lsl #22
    2874:	210a0200 	mrscs	r0, R10_fiq
    2878:	07000000 	streq	r0, [r0, -r0]
    287c:	00000016 	andeq	r0, r0, r6, lsl r0
    2880:	9e06030c 	cdpls	3, 0, cr0, cr6, cr12, {0}
    2884:	03000000 	movweq	r0, #0
    2888:	000004e7 	andeq	r0, r0, r7, ror #9
    288c:	009e0703 	addseq	r0, lr, r3, lsl #14
    2890:	03000000 	movweq	r0, #0
    2894:	0000001d 	andeq	r0, r0, sp, lsl r0
    2898:	009e0803 	addseq	r0, lr, r3, lsl #16
    289c:	03040000 	movweq	r0, #16384	; 0x4000
    28a0:	00000012 	andeq	r0, r0, r2, lsl r0
    28a4:	009e0903 	addseq	r0, lr, r3, lsl #18
    28a8:	00080000 	andeq	r0, r8, r0
    28ac:	00620405 	rsbeq	r0, r2, r5, lsl #8
    28b0:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
    28b4:	0300000c 	movweq	r0, #12
    28b8:	00006d0a 	andeq	r6, r0, sl, lsl #26
    28bc:	05ce0700 	strbeq	r0, [lr, #1792]	; 0x700
    28c0:	04240000 	strteq	r0, [r4], #-0
    28c4:	00012806 	andeq	r2, r1, r6, lsl #16
    28c8:	03ae0300 			; <UNDEFINED> instruction: 0x03ae0300
    28cc:	07040000 	streq	r0, [r4, -r0]
    28d0:	00000128 	andeq	r0, r0, r8, lsr #2
    28d4:	05da0300 	ldrbeq	r0, [sl, #768]	; 0x300
    28d8:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    28dc:	0000012e 	andeq	r0, r0, lr, lsr #2
    28e0:	05520304 	ldrbeq	r0, [r2, #-772]	; 0xfffffcfc
    28e4:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    28e8:	0000012e 	andeq	r0, r0, lr, lsr #2
    28ec:	056d0308 	strbeq	r0, [sp, #-776]!	; 0xfffffcf8
    28f0:	0c040000 	stceq	0, cr0, [r4], {-0}
    28f4:	00000146 	andeq	r0, r0, r6, asr #2
    28f8:	02cf030c 	sbceq	r0, pc, #12, 6	; 0x30000000
    28fc:	0d040000 	stceq	0, cr0, [r4, #-0]
    2900:	00000146 	andeq	r0, r0, r6, asr #2
    2904:	03c00310 	biceq	r0, r0, #16, 6	; 0x40000000
    2908:	10040000 	andne	r0, r4, r0
    290c:	0000012e 	andeq	r0, r0, lr, lsr #2
    2910:	00480314 	subeq	r0, r8, r4, lsl r3
    2914:	11040000 	mrsne	r0, (UNDEF: 4)
    2918:	0000012e 	andeq	r0, r0, lr, lsr #2
    291c:	033f0318 	teqeq	pc, #24, 6	; 0x60000000
    2920:	12040000 	andne	r0, r4, #0
    2924:	0000012e 	andeq	r0, r0, lr, lsr #2
    2928:	034f031c 	movteq	r0, #62236	; 0xf31c
    292c:	13040000 	movwne	r0, #16384	; 0x4000
    2930:	0000012e 	andeq	r0, r0, lr, lsr #2
    2934:	04050020 	streq	r0, [r5], #-32	; 0xffffffe0
    2938:	000000a4 	andeq	r0, r0, r4, lsr #1
    293c:	69050408 	stmdbvs	r5, {r3, sl}
    2940:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    2944:	00000140 	andeq	r0, r0, r0, asr #2
    2948:	0001400a 	andeq	r4, r1, sl
    294c:	04050000 	streq	r0, [r5], #-0
    2950:	000000af 	andeq	r0, r0, pc, lsr #1
    2954:	01350405 	teqeq	r5, r5, lsl #8
    2958:	cf060000 	svcgt	0x00060000
    295c:	04000005 	streq	r0, [r0], #-5
    2960:	0000af15 	andeq	sl, r0, r5, lsl pc
    2964:	01620b00 	cmneq	r2, r0, lsl #22
    2968:	01620000 	cmneq	r2, r0
    296c:	000c0000 	andeq	r0, ip, r0
    2970:	014c0405 	cmpeq	ip, r5, lsl #8
    2974:	940d0000 	strls	r0, [sp], #-0
    2978:	04000004 	streq	r0, [r0], #-4
    297c:	0001571c 	andeq	r5, r1, ip, lsl r7
    2980:	03850d00 	orreq	r0, r5, #0, 26
    2984:	1d040000 	stcne	0, cr0, [r4, #-0]
    2988:	0000012e 	andeq	r0, r0, lr, lsr #2
    298c:	00059806 	andeq	r9, r5, r6, lsl #16
    2990:	5b240500 	blpl	903d98 <startup-0x1f6fc268>
    2994:	0b000000 	bleq	299c <startup-0x1fffd664>
    2998:	0000017e 	andeq	r0, r0, lr, ror r1
    299c:	0000019a 	muleq	r0, sl, r1
    29a0:	00019a0e 	andeq	r9, r1, lr, lsl #20
    29a4:	0003ff00 	andeq	pc, r3, r0, lsl #30
    29a8:	6c070404 	cfstrsvs	mvf0, [r7], {4}
    29ac:	0d000003 	stceq	0, cr0, [r0, #-12]
    29b0:	00000f3f 	andeq	r0, r0, pc, lsr pc
    29b4:	01892b05 	orreq	r2, r9, r5, lsl #22
    29b8:	f20d0000 	vhadd.s8	d0, d13, d0
    29bc:	05000001 	streq	r0, [r0, #-1]
    29c0:	0001892c 	andeq	r8, r1, ip, lsr #18
    29c4:	041f0d00 	ldreq	r0, [pc], #-3328	; 29cc <startup-0x1fffd634>
    29c8:	2d050000 	stccs	0, cr0, [r5, #-0]
    29cc:	00000189 	andeq	r0, r0, r9, lsl #3
    29d0:	0002dc0d 	andeq	sp, r2, sp, lsl #24
    29d4:	892e0500 	stmdbhi	lr!, {r8, sl}
    29d8:	0d000001 	stceq	0, cr0, [r0, #-4]
    29dc:	0000026c 	andeq	r0, r0, ip, ror #4
    29e0:	01892f05 	orreq	r2, r9, r5, lsl #30
    29e4:	b00d0000 	andlt	r0, sp, r0
    29e8:	05000005 	streq	r0, [r0, #-5]
    29ec:	00018930 	andeq	r8, r1, r0, lsr r9
    29f0:	05a00d00 	streq	r0, [r0, #3328]!	; 0xd00
    29f4:	31050000 	mrscc	r0, (UNDEF: 5)
    29f8:	00000189 	andeq	r0, r0, r9, lsl #3
    29fc:	0013050f 	andseq	r0, r3, pc, lsl #10
    2a00:	80e40100 	rschi	r0, r4, r0, lsl #2
    2a04:	84200029 	strthi	r0, [r0], #-41	; 0xffffffd7
    2a08:	01000000 	mrseq	r0, (UNDEF: 0)
    2a0c:	00022c9c 	muleq	r2, ip, ip
    2a10:	00731000 	rsbseq	r1, r3, r0
    2a14:	022ce501 	eoreq	lr, ip, #4194304	; 0x400000
    2a18:	91020000 	mrsls	r0, (UNDEF: 2)
    2a1c:	12e0116c 	rscne	r1, r0, #108, 2
    2a20:	e6010000 	str	r0, [r1], -r0
    2a24:	00000239 	andeq	r0, r0, r9, lsr r2
    2a28:	115c9102 	cmpne	ip, r2, lsl #2
    2a2c:	000012e6 	andeq	r1, r0, r6, ror #5
    2a30:	0249e701 	subeq	lr, r9, #262144	; 0x40000
    2a34:	91020000 	mrsls	r0, (UNDEF: 2)
    2a38:	04050048 	streq	r0, [r5], #-72	; 0xffffffb8
    2a3c:	00000232 	andeq	r0, r0, r2, lsr r2
    2a40:	1a080104 	bne	202e58 <startup-0x1fdfd1a8>
    2a44:	0b000004 	bleq	2a5c <startup-0x1fffd5a4>
    2a48:	00000232 	andeq	r0, r0, r2, lsr r2
    2a4c:	00000249 	andeq	r0, r0, r9, asr #4
    2a50:	00019a12 	andeq	r9, r1, r2, lsl sl
    2a54:	0b000c00 	bleq	5a5c <startup-0x1fffa5a4>
    2a58:	00000232 	andeq	r0, r0, r2, lsr r2
    2a5c:	00000259 	andeq	r0, r0, r9, asr r2
    2a60:	00019a12 	andeq	r9, r1, r2, lsl sl
    2a64:	0f001300 	svceq	0x00001300
    2a68:	00001296 	muleq	r0, r6, r2
    2a6c:	28f2cc01 	ldmcs	r2!, {r0, sl, fp, lr, pc}^
    2a70:	008e2000 	addeq	r2, lr, r0
    2a74:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a78:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
    2a7c:	0013ce13 	andseq	ip, r3, r3, lsl lr
    2a80:	2ccc0100 	stfcse	f0, [ip], {0}
    2a84:	02000002 	andeq	r0, r0, #2
    2a88:	30136c91 	mulscc	r3, r1, ip
    2a8c:	01000002 	tsteq	r0, r2
    2a90:	00022ccc 	andeq	r2, r2, ip, asr #25
    2a94:	68910200 	ldmvs	r1, {r9}
    2a98:	00137813 	andseq	r7, r3, r3, lsl r8
    2a9c:	2ecc0100 	polcse	f0, f4, f0
    2aa0:	02000001 	andeq	r0, r0, #1
    2aa4:	54136491 	ldrpl	r6, [r3], #-1169	; 0xfffffb6f
    2aa8:	01000012 	tsteq	r0, r2, lsl r0
    2aac:	00012ecc 	andeq	r2, r1, ip, asr #29
    2ab0:	60910200 	addsvs	r0, r1, r0, lsl #4
    2ab4:	01006910 	tsteq	r0, r0, lsl r9
    2ab8:	00012ed0 	ldrdeq	r2, [r1], -r0
    2abc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2ac0:	13370f00 	teqne	r7, #0, 30
    2ac4:	bd010000 	stclt	0, cr0, [r1, #-0]
    2ac8:	20002894 	mulcs	r0, r4, r8
    2acc:	0000005e 	andeq	r0, r0, lr, asr r0
    2ad0:	02e59c01 	rsceq	r9, r5, #256	; 0x100
    2ad4:	ce130000 	cdpgt	0, 1, cr0, cr3, cr0, {0}
    2ad8:	01000013 	tsteq	r0, r3, lsl r0
    2adc:	00022cbd 			; <UNDEFINED> instruction: 0x00022cbd
    2ae0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2ae4:	00023013 	andeq	r3, r2, r3, lsl r0
    2ae8:	2cbd0100 	ldfcss	f0, [sp]
    2aec:	02000002 	andeq	r0, r0, #2
    2af0:	0f007091 	svceq	0x00007091
    2af4:	0000128a 	andeq	r1, r0, sl, lsl #5
    2af8:	282aad01 	stmdacs	sl!, {r0, r8, sl, fp, sp, pc}
    2afc:	006a2000 	rsbeq	r2, sl, r0
    2b00:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b04:	00000315 	andeq	r0, r0, r5, lsl r3
    2b08:	01007310 	tsteq	r0, r0, lsl r3
    2b0c:	00022cae 	andeq	r2, r2, lr, lsr #25
    2b10:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2b14:	000fc511 	andeq	ip, pc, r1, lsl r5	; <UNPREDICTABLE>
    2b18:	15af0100 	strne	r0, [pc, #256]!	; 2c20 <startup-0x1fffd3e0>
    2b1c:	02000003 	andeq	r0, r0, #3
    2b20:	0b005491 	bleq	17d6c <startup-0x1ffe8294>
    2b24:	00000232 	andeq	r0, r0, r2, lsr r2
    2b28:	00000325 	andeq	r0, r0, r5, lsr #6
    2b2c:	00019a12 	andeq	r9, r1, r2, lsl sl
    2b30:	14001400 	strne	r1, [r0], #-1024	; 0xfffffc00
    2b34:	0000126b 	andeq	r1, r0, fp, ror #4
    2b38:	2818a801 	ldmdacs	r8, {r0, fp, sp, pc}
    2b3c:	00122000 	andseq	r2, r2, r0
    2b40:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b44:	00124315 	andseq	r4, r2, r5, lsl r3
    2b48:	fe9f0100 	cdp2	1, 9, cr0, cr15, cr0, {0}
    2b4c:	1a200027 	bne	802bf0 <startup-0x1f7fd410>
    2b50:	01000000 	mrseq	r0, (UNDEF: 0)
    2b54:	1278149c 	rsbsne	r1, r8, #156, 8	; 0x9c000000
    2b58:	83010000 	movwhi	r0, #4096	; 0x1000
    2b5c:	20002764 	andcs	r2, r0, r4, ror #14
    2b60:	0000009a 	muleq	r0, sl, r0
    2b64:	430f9c01 	movwmi	r9, #64513	; 0xfc01
    2b68:	01000013 	tsteq	r0, r3, lsl r0
    2b6c:	0027147b 	eoreq	r1, r7, fp, ror r4
    2b70:	00005020 	andeq	r5, r0, r0, lsr #32
    2b74:	989c0100 	ldmls	ip, {r8}
    2b78:	16000003 	strne	r0, [r0], -r3
    2b7c:	00776f72 	rsbseq	r6, r7, r2, ror pc
    2b80:	005b7b01 	subseq	r7, fp, r1, lsl #22
    2b84:	91020000 	mrsls	r0, (UNDEF: 2)
    2b88:	1283136f 	addne	r1, r3, #-1140850687	; 0xbc000001
    2b8c:	7b010000 	blvc	42b94 <startup-0x1ffbd46c>
    2b90:	0000005b 	andeq	r0, r0, fp, asr r0
    2b94:	116e9102 	cmnne	lr, r2, lsl #2
    2b98:	000012ec 	andeq	r1, r0, ip, ror #5
    2b9c:	005b7c01 	subseq	r7, fp, r1, lsl #24
    2ba0:	91020000 	mrsls	r0, (UNDEF: 2)
    2ba4:	670f0077 	smlsdxvs	pc, r7, r0, r0	; <UNPREDICTABLE>
    2ba8:	01000013 	tsteq	r0, r3, lsl r0
    2bac:	0026d874 	eoreq	sp, r6, r4, ror r8
    2bb0:	00003c20 	andeq	r3, r0, r0, lsr #24
    2bb4:	ba9c0100 	blt	fe702fbc <firstTime.4040+0xde6fa684>
    2bb8:	16000003 	strne	r0, [r0], -r3
    2bbc:	74010063 	strvc	r0, [r1], #-99	; 0xffffff9d
    2bc0:	0000005b 	andeq	r0, r0, fp, asr r0
    2bc4:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2bc8:	0012a717 	andseq	sl, r2, r7, lsl r7
    2bcc:	5b6a0100 	blpl	1a82fd4 <startup-0x1e57d02c>
    2bd0:	a4000000 	strge	r0, [r0], #-0
    2bd4:	34200026 	strtcc	r0, [r0], #-38	; 0xffffffda
    2bd8:	01000000 	mrseq	r0, (UNDEF: 0)
    2bdc:	0003e09c 	muleq	r3, ip, r0
    2be0:	00631000 	rsbeq	r1, r3, r0
    2be4:	005b6b01 	subseq	r6, fp, r1, lsl #22
    2be8:	91020000 	mrsls	r0, (UNDEF: 2)
    2bec:	500f0077 	andpl	r0, pc, r7, ror r0	; <UNPREDICTABLE>
    2bf0:	01000013 	tsteq	r0, r3, lsl r0
    2bf4:	00267463 	eoreq	r7, r6, r3, ror #8
    2bf8:	00003020 	andeq	r3, r0, r0, lsr #32
    2bfc:	029c0100 	addseq	r0, ip, #0, 2
    2c00:	16000004 	strne	r0, [r0], -r4
    2c04:	63010063 	movwvs	r0, #4195	; 0x1063
    2c08:	0000005b 	andeq	r0, r0, fp, asr r0
    2c0c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2c10:	00125b17 	andseq	r5, r2, r7, lsl fp
    2c14:	5b570100 	blpl	15c301c <startup-0x1ea3cfe4>
    2c18:	20000000 	andcs	r0, r0, r0
    2c1c:	54200026 	strtpl	r0, [r0], #-38	; 0xffffffda
    2c20:	01000000 	mrseq	r0, (UNDEF: 0)
    2c24:	0004299c 	muleq	r4, ip, r9
    2c28:	76721000 	ldrbtvc	r1, [r2], -r0
    2c2c:	5b5c0100 	blpl	1703034 <startup-0x1e8fcfcc>
    2c30:	02000000 	andeq	r0, r0, #0
    2c34:	17006f91 			; <UNDEFINED> instruction: 0x17006f91
    2c38:	00001310 	andeq	r1, r0, r0, lsl r3
    2c3c:	005b4b01 	subseq	r4, fp, r1, lsl #22
    2c40:	25cc0000 	strbcs	r0, [ip]
    2c44:	00542000 	subseq	r2, r4, r0
    2c48:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c4c:	00000450 	andeq	r0, r0, r0, asr r4
    2c50:	00767210 	rsbseq	r7, r6, r0, lsl r2
    2c54:	005b5001 	subseq	r5, fp, r1
    2c58:	91020000 	mrsls	r0, (UNDEF: 2)
    2c5c:	f40f006f 	vst4.16	{d0-d3}, [pc :128]
    2c60:	01000012 	tsteq	r0, r2, lsl r0
    2c64:	0025a245 	eoreq	sl, r5, r5, asr #4
    2c68:	00002a20 	andeq	r2, r0, r0, lsr #20
    2c6c:	749c0100 	ldrvc	r0, [ip], #256	; 0x100
    2c70:	13000004 	movwne	r0, #4
    2c74:	00001009 	andeq	r1, r0, r9
    2c78:	005b4501 	subseq	r4, fp, r1, lsl #10
    2c7c:	91020000 	mrsls	r0, (UNDEF: 2)
    2c80:	d00f0077 	andle	r0, pc, r7, ror r0	; <UNPREDICTABLE>
    2c84:	01000012 	tsteq	r0, r2, lsl r0
    2c88:	0025783f 	eoreq	r7, r5, pc, lsr r8
    2c8c:	00002a20 	andeq	r2, r0, r0, lsr #20
    2c90:	989c0100 	ldmls	ip, {r8}
    2c94:	13000004 	movwne	r0, #4
    2c98:	00000f31 	andeq	r0, r0, r1, lsr pc
    2c9c:	005b3f01 	subseq	r3, fp, r1, lsl #30
    2ca0:	91020000 	mrsls	r0, (UNDEF: 2)
    2ca4:	22180077 	andscs	r0, r8, #119	; 0x77
    2ca8:	01000013 	tsteq	r0, r3, lsl r0
    2cac:	00252837 	eoreq	r2, r5, r7, lsr r8
    2cb0:	00005020 	andeq	r5, r0, r0, lsr #32
    2cb4:	c69c0100 	ldrgt	r0, [ip], r0, lsl #2
    2cb8:	16000004 	strne	r0, [r0], -r4
    2cbc:	37010078 	smlsdxcc	r1, r8, r0, r0
    2cc0:	0000005b 	andeq	r0, r0, fp, asr r0
    2cc4:	106f9102 	rsbne	r9, pc, r2, lsl #2
    2cc8:	39010063 	stmdbcc	r1, {r0, r1, r5, r6}
    2ccc:	0000005b 	andeq	r0, r0, fp, asr r0
    2cd0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    2cd4:	0012bd19 	andseq	fp, r2, r9, lsl sp
    2cd8:	e42f0100 	strt	r0, [pc], #-256	; 2ce0 <startup-0x1fffd320>
    2cdc:	44200024 	strtmi	r0, [r0], #-36	; 0xffffffdc
    2ce0:	01000000 	mrseq	r0, (UNDEF: 0)
    2ce4:	0078169c 			; <UNDEFINED> instruction: 0x0078169c
    2ce8:	005b2f01 	subseq	r2, fp, r1, lsl #30
    2cec:	91020000 	mrsls	r0, (UNDEF: 2)
    2cf0:	0063106f 	rsbeq	r1, r3, pc, rrx
    2cf4:	005b3101 	subseq	r3, fp, r1, lsl #2
    2cf8:	91020000 	mrsls	r0, (UNDEF: 2)
    2cfc:	40000077 	andmi	r0, r0, r7, ror r0
    2d00:	04000001 	streq	r0, [r0], #-1
    2d04:	000b7200 	andeq	r7, fp, r0, lsl #4
    2d08:	77010400 	strvc	r0, [r1, -r0, lsl #8]
    2d0c:	0c000000 	stceq	0, cr0, [r0], {-0}
    2d10:	000013d3 	ldrdeq	r1, [r0], -r3
    2d14:	20002a04 	andcs	r2, r0, r4, lsl #20
    2d18:	00000094 	muleq	r0, r4, r0
    2d1c:	00000e8d 	andeq	r0, r0, sp, lsl #29
    2d20:	00058e02 	andeq	r8, r5, r2, lsl #28
    2d24:	04021400 	streq	r1, [r2], #-1024	; 0xfffffc00
    2d28:	0000006a 	andeq	r0, r0, sl, rrx
    2d2c:	0013ce03 	andseq	ip, r3, r3, lsl #28
    2d30:	6a050200 	bvs	143538 <startup-0x1febcac8>
    2d34:	00000000 	andeq	r0, r0, r0
    2d38:	00023003 	andeq	r3, r2, r3
    2d3c:	6a060200 	bvs	183544 <startup-0x1fe7cabc>
    2d40:	04000000 	streq	r0, [r0], #-0
    2d44:	00035903 	andeq	r5, r3, r3, lsl #18
    2d48:	77080200 	strvc	r0, [r8, -r0, lsl #4]
    2d4c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2d50:	00034903 	andeq	r4, r3, r3, lsl #18
    2d54:	77090200 	strvc	r0, [r9, -r0, lsl #4]
    2d58:	0c000000 	stceq	0, cr0, [r0], {-0}
    2d5c:	00023503 	andeq	r3, r2, r3, lsl #10
    2d60:	940c0200 	strls	r0, [ip], #-512	; 0xfffffe00
    2d64:	10000000 	andne	r0, r0, r0
    2d68:	70040400 	andvc	r0, r4, r0, lsl #8
    2d6c:	05000000 	streq	r0, [r0, #-0]
    2d70:	041a0801 	ldreq	r0, [sl], #-2049	; 0xfffff7ff
    2d74:	04060000 	streq	r0, [r6], #-0
    2d78:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    2d7c:	008e0700 	addeq	r0, lr, r0, lsl #14
    2d80:	8e080000 	cdphi	0, 0, cr0, cr8, cr0, {0}
    2d84:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2d88:	00000077 	andeq	r0, r0, r7, ror r0
    2d8c:	21040400 	tstcs	r4, r0, lsl #8
    2d90:	04000000 	streq	r0, [r0], #-0
    2d94:	00007e04 	andeq	r7, r0, r4, lsl #28
    2d98:	058f0900 	streq	r0, [pc, #2304]	; 36a0 <startup-0x1fffc960>
    2d9c:	0d020000 	stceq	0, cr0, [r2, #-0]
    2da0:	00000021 	andeq	r0, r0, r1, lsr #32
    2da4:	0013b50a 	andseq	fp, r3, sl, lsl #10
    2da8:	5e0c0100 	adfple	f0, f4, f0
    2dac:	3a20002a 	bcc	802e5c <startup-0x1f7fd1a4>
    2db0:	01000000 	mrseq	r0, (UNDEF: 0)
    2db4:	0000f39c 	muleq	r0, ip, r3
    2db8:	626f0b00 	rsbvs	r0, pc, #0, 22
    2dbc:	0c01006a 	stceq	0, cr0, [r1], {106}	; 0x6a
    2dc0:	000000f3 	strdeq	r0, [r0], -r3
    2dc4:	0c749102 	ldfeqp	f1, [r4], #-8
    2dc8:	000013ce 	andeq	r1, r0, lr, asr #7
    2dcc:	006a0c01 	rsbeq	r0, sl, r1, lsl #24
    2dd0:	91020000 	mrsls	r0, (UNDEF: 2)
    2dd4:	02300c70 	eorseq	r0, r0, #112, 24	; 0x7000
    2dd8:	0c010000 	stceq	0, cr0, [r1], {-0}
    2ddc:	0000006a 	andeq	r0, r0, sl, rrx
    2de0:	0c6c9102 	stfeqp	f1, [ip], #-8
    2de4:	00000349 	andeq	r0, r0, r9, asr #6
    2de8:	00770c01 	rsbseq	r0, r7, r1, lsl #24
    2dec:	91020000 	mrsls	r0, (UNDEF: 2)
    2df0:	04040068 	streq	r0, [r4], #-104	; 0xffffff98
    2df4:	0000009a 	muleq	r0, sl, r0
    2df8:	0002350d 	andeq	r3, r2, sp, lsl #10
    2dfc:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    2e00:	5a20002a 	bpl	802eb0 <startup-0x1f7fd150>
    2e04:	01000000 	mrseq	r0, (UNDEF: 0)
    2e08:	06620c9c 			; <UNDEFINED> instruction: 0x06620c9c
    2e0c:	04010000 	streq	r0, [r1], #-0
    2e10:	000000f3 	strdeq	r0, [r0], -r3
    2e14:	0c6c9102 	stfeqp	f1, [ip], #-8
    2e18:	000013c4 	andeq	r1, r0, r4, asr #7
    2e1c:	00770401 	rsbseq	r0, r7, r1, lsl #8
    2e20:	91020000 	mrsls	r0, (UNDEF: 2)
    2e24:	13780e68 	cmnne	r8, #104, 28	; 0x680
    2e28:	05010000 	streq	r0, [r1, #-0]
    2e2c:	00000077 	andeq	r0, r0, r7, ror r0
    2e30:	0e749102 	expeqs	f1, f2
    2e34:	00001254 	andeq	r1, r0, r4, asr r2
    2e38:	00770601 	rsbseq	r0, r7, r1, lsl #12
    2e3c:	91020000 	mrsls	r0, (UNDEF: 2)
    2e40:	e0000070 	and	r0, r0, r0, ror r0
    2e44:	04000002 	streq	r0, [r0], #-2
    2e48:	000c3d00 	andeq	r3, ip, r0, lsl #26
    2e4c:	77010400 	strvc	r0, [r1, -r0, lsl #8]
    2e50:	0c000000 	stceq	0, cr0, [r0], {-0}
    2e54:	00001480 	andeq	r1, r0, r0, lsl #9
    2e58:	20002a98 	mulcs	r0, r8, sl
    2e5c:	000000e8 	andeq	r0, r0, r8, ror #1
    2e60:	00000f07 	andeq	r0, r0, r7, lsl #30
    2e64:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
    2e68:	0000004e 	andeq	r0, r0, lr, asr #32
    2e6c:	0002d603 	andeq	sp, r2, r3, lsl #12
    2e70:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
    2e74:	00000000 	andeq	r0, r0, r0
    2e78:	0005f903 	andeq	pc, r5, r3, lsl #18
    2e7c:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
    2e80:	04000000 	streq	r0, [r0], #-0
    2e84:	00100903 	andseq	r0, r0, r3, lsl #18
    2e88:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
    2e8c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2e90:	07040400 	streq	r0, [r4, -r0, lsl #8]
    2e94:	000002fa 	strdeq	r0, [r0], -sl
    2e98:	005b0405 	subseq	r0, fp, r5, lsl #8
    2e9c:	01040000 	mrseq	r0, (UNDEF: 4)
    2ea0:	00041108 	andeq	r1, r4, r8, lsl #2
    2ea4:	115b0600 	cmpne	fp, r0, lsl #12
    2ea8:	0a020000 	beq	82eb0 <startup-0x1ff7d150>
    2eac:	00000021 	andeq	r0, r0, r1, lsr #32
    2eb0:	00001607 	andeq	r1, r0, r7, lsl #12
    2eb4:	06030c00 	streq	r0, [r3], -r0, lsl #24
    2eb8:	0000009e 	muleq	r0, lr, r0
    2ebc:	0004e703 	andeq	lr, r4, r3, lsl #14
    2ec0:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
    2ec4:	00000000 	andeq	r0, r0, r0
    2ec8:	00001d03 	andeq	r1, r0, r3, lsl #26
    2ecc:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
    2ed0:	04000000 	streq	r0, [r0], #-0
    2ed4:	00001203 	andeq	r1, r0, r3, lsl #4
    2ed8:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
    2edc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2ee0:	62040500 	andvs	r0, r4, #0, 10
    2ee4:	06000000 	streq	r0, [r0], -r0
    2ee8:	00000c28 	andeq	r0, r0, r8, lsr #24
    2eec:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
    2ef0:	ce070000 	cdpgt	0, 0, cr0, cr7, cr0, {0}
    2ef4:	24000005 	strcs	r0, [r0], #-5
    2ef8:	01280604 			; <UNDEFINED> instruction: 0x01280604
    2efc:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
    2f00:	04000003 	streq	r0, [r0], #-3
    2f04:	00012807 	andeq	r2, r1, r7, lsl #16
    2f08:	da030000 	ble	c2f10 <startup-0x1ff3d0f0>
    2f0c:	04000005 	streq	r0, [r0], #-5
    2f10:	00012e08 	andeq	r2, r1, r8, lsl #28
    2f14:	52030400 	andpl	r0, r3, #0, 8
    2f18:	04000005 	streq	r0, [r0], #-5
    2f1c:	00012e09 	andeq	r2, r1, r9, lsl #28
    2f20:	6d030800 	stcvs	8, cr0, [r3, #-0]
    2f24:	04000005 	streq	r0, [r0], #-5
    2f28:	0001460c 	andeq	r4, r1, ip, lsl #12
    2f2c:	cf030c00 	svcgt	0x00030c00
    2f30:	04000002 	streq	r0, [r0], #-2
    2f34:	0001460d 	andeq	r4, r1, sp, lsl #12
    2f38:	c0031000 	andgt	r1, r3, r0
    2f3c:	04000003 	streq	r0, [r0], #-3
    2f40:	00012e10 	andeq	r2, r1, r0, lsl lr
    2f44:	48031400 	stmdami	r3, {sl, ip}
    2f48:	04000000 	streq	r0, [r0], #-0
    2f4c:	00012e11 	andeq	r2, r1, r1, lsl lr
    2f50:	3f031800 	svccc	0x00031800
    2f54:	04000003 	streq	r0, [r0], #-3
    2f58:	00012e12 	andeq	r2, r1, r2, lsl lr
    2f5c:	4f031c00 	svcmi	0x00031c00
    2f60:	04000003 	streq	r0, [r0], #-3
    2f64:	00012e13 	andeq	r2, r1, r3, lsl lr
    2f68:	05002000 	streq	r2, [r0, #-0]
    2f6c:	0000a404 	andeq	sl, r0, r4, lsl #8
    2f70:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
    2f74:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2f78:	00014009 	andeq	r4, r1, r9
    2f7c:	01400a00 	cmpeq	r0, r0, lsl #20
    2f80:	05000000 	streq	r0, [r0, #-0]
    2f84:	0000af04 	andeq	sl, r0, r4, lsl #30
    2f88:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
    2f8c:	06000001 	streq	r0, [r0], -r1
    2f90:	000005cf 	andeq	r0, r0, pc, asr #11
    2f94:	00af1504 	adceq	r1, pc, r4, lsl #10
    2f98:	620b0000 	andvs	r0, fp, #0
    2f9c:	62000001 	andvs	r0, r0, #1
    2fa0:	0c000001 	stceq	0, cr0, [r0], {1}
    2fa4:	4c040500 	cfstr32mi	mvfx0, [r4], {-0}
    2fa8:	0d000001 	stceq	0, cr0, [r0, #-4]
    2fac:	00000494 	muleq	r0, r4, r4
    2fb0:	01571c04 	cmpeq	r7, r4, lsl #24
    2fb4:	850d0000 	strhi	r0, [sp, #-0]
    2fb8:	04000003 	streq	r0, [r0], #-3
    2fbc:	00012e1d 	andeq	r2, r1, sp, lsl lr
    2fc0:	005b0b00 	subseq	r0, fp, r0, lsl #22
    2fc4:	018f0000 	orreq	r0, pc, r0
    2fc8:	8f0e0000 	svchi	0x000e0000
    2fcc:	ff000001 			; <UNDEFINED> instruction: 0xff000001
    2fd0:	04040003 	streq	r0, [r4], #-3
    2fd4:	00036c07 	andeq	r6, r3, r7, lsl #24
    2fd8:	14b00f00 	ldrtne	r0, [r0], #3840	; 0xf00
    2fdc:	03050000 	movweq	r0, #20480	; 0x5000
    2fe0:	0000017e 	andeq	r0, r0, lr, ror r1
    2fe4:	71340305 	teqvc	r4, r5, lsl #6
    2fe8:	500f2000 	andpl	r2, pc, r0
    2fec:	06000014 			; <UNDEFINED> instruction: 0x06000014
    2ff0:	00017e03 	andeq	r7, r1, r3, lsl #28
    2ff4:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
    2ff8:	0f200075 	svceq	0x00200075
    2ffc:	0000142d 	andeq	r1, r0, sp, lsr #8
    3000:	017e0307 	cmneq	lr, r7, lsl #6
    3004:	03050000 	movweq	r0, #20480	; 0x5000
    3008:	20007934 	andcs	r7, r0, r4, lsr r9
    300c:	00141210 	andseq	r1, r4, r0, lsl r2
    3010:	9e080100 	adflse	f0, f0, f0
    3014:	05000000 	streq	r0, [r0, #-0]
    3018:	00511403 	subseq	r1, r1, r3, lsl #8
    301c:	14ec1020 	strbtne	r1, [ip], #32
    3020:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    3024:	0000009e 	muleq	r0, lr, r0
    3028:	50e00305 	rscpl	r0, r0, r5, lsl #6
    302c:	73102000 	tstvc	r0, #0
    3030:	01000014 	tsteq	r0, r4, lsl r0
    3034:	00009e0a 	andeq	r9, r0, sl, lsl #28
    3038:	24030500 	strcs	r0, [r3], #-1280	; 0xfffffb00
    303c:	10200051 	eorne	r0, r0, r1, asr r0
    3040:	000014c3 	andeq	r1, r0, r3, asr #9
    3044:	00620c01 	rsbeq	r0, r2, r1, lsl #24
    3048:	03050000 	movweq	r0, #20480	; 0x5000
    304c:	200050d4 	ldrdcs	r5, [r0], -r4
    3050:	00146210 	andseq	r6, r4, r0, lsl r2
    3054:	620d0100 	andvs	r0, sp, #0, 2
    3058:	05000000 	streq	r0, [r0, #-0]
    305c:	0050c803 	subseq	ip, r0, r3, lsl #16
    3060:	14401020 	strbne	r1, [r0], #-32	; 0xffffffe0
    3064:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    3068:	00000062 	andeq	r0, r0, r2, rrx
    306c:	50bc0305 	adcspl	r0, ip, r5, lsl #6
    3070:	e1102000 	tst	r0, r0
    3074:	01000014 	tsteq	r0, r4, lsl r0
    3078:	00014c11 	andeq	r4, r1, r1, lsl ip
    307c:	e4030500 	str	r0, [r3], #-1280	; 0xfffffb00
    3080:	10200050 	eorne	r0, r0, r0, asr r0
    3084:	00001405 	andeq	r1, r0, r5, lsl #8
    3088:	00a41201 	adceq	r1, r4, r1, lsl #4
    308c:	03050000 	movweq	r0, #20480	; 0x5000
    3090:	20005118 	andcs	r5, r0, r8, lsl r1
    3094:	0000a40b 	andeq	sl, r0, fp, lsl #8
    3098:	00026100 	andeq	r6, r2, r0, lsl #2
    309c:	018f1100 	orreq	r1, pc, r0, lsl #2
    30a0:	00000000 	andeq	r0, r0, r0
    30a4:	00141f10 	andseq	r1, r4, r0, lsl pc
    30a8:	51130100 	tstpl	r3, r0, lsl #2
    30ac:	05000002 	streq	r0, [r0, #-2]
    30b0:	00510803 	subseq	r0, r1, r3, lsl #16
    30b4:	14d41220 	ldrbne	r1, [r4], #544	; 0x220
    30b8:	22010000 	andcs	r0, r1, #0
    30bc:	20002b0c 	andcs	r2, r0, ip, lsl #22
    30c0:	00000074 	andeq	r0, r0, r4, ror r0
    30c4:	02a79c01 	adceq	r9, r7, #256	; 0x100
    30c8:	e1130000 	tst	r3, r0
    30cc:	01000014 	tsteq	r0, r4, lsl r0
    30d0:	00016222 	andeq	r6, r1, r2, lsr #4
    30d4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    30d8:	0007e90f 	andeq	lr, r7, pc, lsl #18
    30dc:	2e230100 	sufcss	f0, f3, f0
    30e0:	05000001 	streq	r0, [r0, #-1]
    30e4:	007d3403 	rsbseq	r3, sp, r3, lsl #8
    30e8:	e7140020 	ldr	r0, [r4, -r0, lsr #32]
    30ec:	01000003 	tsteq	r0, r3
    30f0:	002a9814 	eoreq	r9, sl, r4, lsl r8
    30f4:	00007420 	andeq	r7, r0, r0, lsr #8
    30f8:	0f9c0100 	svceq	0x009c0100
    30fc:	00000c62 	andeq	r0, r0, r2, ror #24
    3100:	009e1601 	addseq	r1, lr, r1, lsl #12
    3104:	91020000 	mrsls	r0, (UNDEF: 2)
    3108:	0c6c0f74 	stcleq	15, cr0, [ip], #-464	; 0xfffffe30
    310c:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    3110:	0000009e 	muleq	r0, lr, r0
    3114:	0f709102 	svceq	0x00709102
    3118:	00000a62 	andeq	r0, r0, r2, ror #20
    311c:	009e1c01 	addseq	r1, lr, r1, lsl #24
    3120:	91020000 	mrsls	r0, (UNDEF: 2)
    3124:	e000006c 	and	r0, r0, ip, rrx
    3128:	04000002 	streq	r0, [r0], #-2
    312c:	000d4600 	andeq	r4, sp, r0, lsl #12
    3130:	77010400 	strvc	r0, [r1, -r0, lsl #8]
    3134:	0c000000 	stceq	0, cr0, [r0], {-0}
    3138:	00001539 	andeq	r1, r0, r9, lsr r5
    313c:	20002b80 	andcs	r2, r0, r0, lsl #23
    3140:	000000e8 	andeq	r0, r0, r8, ror #1
    3144:	00000fe1 	andeq	r0, r0, r1, ror #31
    3148:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
    314c:	0000004e 	andeq	r0, r0, lr, asr #32
    3150:	0002d603 	andeq	sp, r2, r3, lsl #12
    3154:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
    3158:	00000000 	andeq	r0, r0, r0
    315c:	0005f903 	andeq	pc, r5, r3, lsl #18
    3160:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
    3164:	04000000 	streq	r0, [r0], #-0
    3168:	00100903 	andseq	r0, r0, r3, lsl #18
    316c:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
    3170:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3174:	07040400 	streq	r0, [r4, -r0, lsl #8]
    3178:	000002fa 	strdeq	r0, [r0], -sl
    317c:	005b0405 	subseq	r0, fp, r5, lsl #8
    3180:	01040000 	mrseq	r0, (UNDEF: 4)
    3184:	00041108 	andeq	r1, r4, r8, lsl #2
    3188:	115b0600 	cmpne	fp, r0, lsl #12
    318c:	0a020000 	beq	83194 <startup-0x1ff7ce6c>
    3190:	00000021 	andeq	r0, r0, r1, lsr #32
    3194:	00001607 	andeq	r1, r0, r7, lsl #12
    3198:	06030c00 	streq	r0, [r3], -r0, lsl #24
    319c:	0000009e 	muleq	r0, lr, r0
    31a0:	0004e703 	andeq	lr, r4, r3, lsl #14
    31a4:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
    31a8:	00000000 	andeq	r0, r0, r0
    31ac:	00001d03 	andeq	r1, r0, r3, lsl #26
    31b0:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
    31b4:	04000000 	streq	r0, [r0], #-0
    31b8:	00001203 	andeq	r1, r0, r3, lsl #4
    31bc:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
    31c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    31c4:	62040500 	andvs	r0, r4, #0, 10
    31c8:	06000000 	streq	r0, [r0], -r0
    31cc:	00000c28 	andeq	r0, r0, r8, lsr #24
    31d0:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
    31d4:	ce070000 	cdpgt	0, 0, cr0, cr7, cr0, {0}
    31d8:	24000005 	strcs	r0, [r0], #-5
    31dc:	01280604 			; <UNDEFINED> instruction: 0x01280604
    31e0:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
    31e4:	04000003 	streq	r0, [r0], #-3
    31e8:	00012807 	andeq	r2, r1, r7, lsl #16
    31ec:	da030000 	ble	c31f4 <startup-0x1ff3ce0c>
    31f0:	04000005 	streq	r0, [r0], #-5
    31f4:	00012e08 	andeq	r2, r1, r8, lsl #28
    31f8:	52030400 	andpl	r0, r3, #0, 8
    31fc:	04000005 	streq	r0, [r0], #-5
    3200:	00012e09 	andeq	r2, r1, r9, lsl #28
    3204:	6d030800 	stcvs	8, cr0, [r3, #-0]
    3208:	04000005 	streq	r0, [r0], #-5
    320c:	0001460c 	andeq	r4, r1, ip, lsl #12
    3210:	cf030c00 	svcgt	0x00030c00
    3214:	04000002 	streq	r0, [r0], #-2
    3218:	0001460d 	andeq	r4, r1, sp, lsl #12
    321c:	c0031000 	andgt	r1, r3, r0
    3220:	04000003 	streq	r0, [r0], #-3
    3224:	00012e10 	andeq	r2, r1, r0, lsl lr
    3228:	48031400 	stmdami	r3, {sl, ip}
    322c:	04000000 	streq	r0, [r0], #-0
    3230:	00012e11 	andeq	r2, r1, r1, lsl lr
    3234:	3f031800 	svccc	0x00031800
    3238:	04000003 	streq	r0, [r0], #-3
    323c:	00012e12 	andeq	r2, r1, r2, lsl lr
    3240:	4f031c00 	svcmi	0x00031c00
    3244:	04000003 	streq	r0, [r0], #-3
    3248:	00012e13 	andeq	r2, r1, r3, lsl lr
    324c:	05002000 	streq	r2, [r0, #-0]
    3250:	0000a404 	andeq	sl, r0, r4, lsl #8
    3254:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
    3258:	00746e69 	rsbseq	r6, r4, r9, ror #28
    325c:	00014009 	andeq	r4, r1, r9
    3260:	01400a00 	cmpeq	r0, r0, lsl #20
    3264:	05000000 	streq	r0, [r0, #-0]
    3268:	0000af04 	andeq	sl, r0, r4, lsl #30
    326c:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
    3270:	06000001 	streq	r0, [r0], -r1
    3274:	000005cf 	andeq	r0, r0, pc, asr #11
    3278:	00af1504 	adceq	r1, pc, r4, lsl #10
    327c:	620b0000 	andvs	r0, fp, #0
    3280:	62000001 	andvs	r0, r0, #1
    3284:	0c000001 	stceq	0, cr0, [r0], {1}
    3288:	4c040500 	cfstr32mi	mvfx0, [r4], {-0}
    328c:	0d000001 	stceq	0, cr0, [r0, #-4]
    3290:	00000494 	muleq	r0, r4, r4
    3294:	01571c04 	cmpeq	r7, r4, lsl #24
    3298:	850d0000 	strhi	r0, [sp, #-0]
    329c:	04000003 	streq	r0, [r0], #-3
    32a0:	00012e1d 	andeq	r2, r1, sp, lsl lr
    32a4:	005b0b00 	subseq	r0, fp, r0, lsl #22
    32a8:	018f0000 	orreq	r0, pc, r0
    32ac:	8f0e0000 	svchi	0x000e0000
    32b0:	ff000001 			; <UNDEFINED> instruction: 0xff000001
    32b4:	04040003 	streq	r0, [r4], #-3
    32b8:	00036c07 	andeq	r6, r3, r7, lsl #24
    32bc:	15060f00 	strne	r0, [r6, #-3840]	; 0xfffff100
    32c0:	03050000 	movweq	r0, #20480	; 0x5000
    32c4:	0000017e 	andeq	r0, r0, lr, ror r1
    32c8:	7d380305 	ldcvc	3, cr0, [r8, #-20]!	; 0xffffffec
    32cc:	c90f2000 	stmdbgt	pc, {sp}	; <UNPREDICTABLE>
    32d0:	06000015 			; <UNDEFINED> instruction: 0x06000015
    32d4:	00017e03 	andeq	r7, r1, r3, lsl #28
    32d8:	38030500 	stmdacc	r3, {r8, sl}
    32dc:	0f200081 	svceq	0x00200081
    32e0:	000015a6 	andeq	r1, r0, r6, lsr #11
    32e4:	017e0307 	cmneq	lr, r7, lsl #6
    32e8:	03050000 	movweq	r0, #20480	; 0x5000
    32ec:	20008538 	andcs	r8, r0, r8, lsr r5
    32f0:	00157c10 	andseq	r7, r5, r0, lsl ip
    32f4:	9e080100 	adflse	f0, f0, f0
    32f8:	05000000 	streq	r0, [r0, #-0]
    32fc:	00519003 	subseq	r9, r1, r3
    3300:	152c1020 	strne	r1, [ip, #-32]!	; 0xffffffe0
    3304:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    3308:	0000009e 	muleq	r0, lr, r0
    330c:	514c0305 	cmppl	ip, r5, lsl #6
    3310:	f8102000 			; <UNDEFINED> instruction: 0xf8102000
    3314:	01000014 	tsteq	r0, r4, lsl r0
    3318:	00009e0a 	andeq	r9, r0, sl, lsl #28
    331c:	74030500 	strvc	r0, [r3], #-1280	; 0xfffffb00
    3320:	10200051 	eorne	r0, r0, r1, asr r0
    3324:	0000156a 	andeq	r1, r0, sl, ror #10
    3328:	00620c01 	rsbeq	r0, r2, r1, lsl #24
    332c:	03050000 	movweq	r0, #20480	; 0x5000
    3330:	20005178 	andcs	r5, r0, r8, ror r1
    3334:	00151a10 	andseq	r1, r5, r0, lsl sl
    3338:	620d0100 	andvs	r0, sp, #0, 2
    333c:	05000000 	streq	r0, [r0, #-0]
    3340:	00518403 	subseq	r8, r1, r3, lsl #8
    3344:	15e81020 	strbne	r1, [r8, #32]!
    3348:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    334c:	00000062 	andeq	r0, r0, r2, rrx
    3350:	51680305 	cmnpl	r8, r5, lsl #6
    3354:	dc102000 	ldcle	0, cr2, [r0], {-0}
    3358:	01000015 	tsteq	r0, r5, lsl r0
    335c:	00014c11 	andeq	r4, r1, r1, lsl ip
    3360:	28030500 	stmdacs	r3, {r8, sl}
    3364:	10200051 	eorne	r0, r0, r1, asr r0
    3368:	0000158a 	andeq	r1, r0, sl, lsl #11
    336c:	00a41201 	adceq	r1, r4, r1, lsl #4
    3370:	03050000 	movweq	r0, #20480	; 0x5000
    3374:	2000515c 	andcs	r5, r0, ip, asr r1
    3378:	0000a40b 	andeq	sl, r0, fp, lsl #8
    337c:	00026100 	andeq	r6, r2, r0, lsl #2
    3380:	018f1100 	orreq	r1, pc, r0, lsl #2
    3384:	00000000 	andeq	r0, r0, r0
    3388:	0015ba10 	andseq	fp, r5, r0, lsl sl
    338c:	51130100 	tstpl	r3, r0, lsl #2
    3390:	05000002 	streq	r0, [r0, #-2]
    3394:	00515003 	subseq	r5, r1, r3
    3398:	15981220 	ldrne	r1, [r8, #544]	; 0x220
    339c:	22010000 	andcs	r0, r1, #0
    33a0:	20002bf4 	strdcs	r2, [r0], -r4
    33a4:	00000074 	andeq	r0, r0, r4, ror r0
    33a8:	02a79c01 	adceq	r9, r7, #256	; 0x100
    33ac:	dc130000 	ldcle	0, cr0, [r3], {-0}
    33b0:	01000015 	tsteq	r0, r5, lsl r0
    33b4:	00016222 	andeq	r6, r1, r2, lsr #4
    33b8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    33bc:	0007e90f 	andeq	lr, r7, pc, lsl #18
    33c0:	2e230100 	sufcss	f0, f3, f0
    33c4:	05000001 	streq	r0, [r0, #-1]
    33c8:	00893803 	addeq	r3, r9, r3, lsl #16
    33cc:	e7140020 	ldr	r0, [r4, -r0, lsr #32]
    33d0:	01000003 	tsteq	r0, r3
    33d4:	002b8014 	eoreq	r8, fp, r4, lsl r0
    33d8:	00007420 	andeq	r7, r0, r0, lsr #8
    33dc:	0f9c0100 	svceq	0x009c0100
    33e0:	00000c62 	andeq	r0, r0, r2, ror #24
    33e4:	009e1601 	addseq	r1, lr, r1, lsl #12
    33e8:	91020000 	mrsls	r0, (UNDEF: 2)
    33ec:	0c6c0f74 	stcleq	15, cr0, [ip], #-464	; 0xfffffe30
    33f0:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    33f4:	0000009e 	muleq	r0, lr, r0
    33f8:	0f709102 	svceq	0x00709102
    33fc:	00000a62 	andeq	r0, r0, r2, ror #20
    3400:	009e1c01 	addseq	r1, lr, r1, lsl #24
    3404:	91020000 	mrsls	r0, (UNDEF: 2)
    3408:	Address 0x00003408 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	01130200 	tsteq	r3, r0, lsl #4
  14:	0b3a0b0b 	bleq	e82c48 <startup-0x1f17d3b8>
  18:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  1c:	0d030000 	stceq	0, cr0, [r3, #-0]
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	000b3813 	andeq	r3, fp, r3, lsl r8
  2c:	00240400 	eoreq	r0, r4, r0, lsl #8
  30:	0b3e0b0b 	bleq	f82c64 <startup-0x1f07d39c>
  34:	00000e03 	andeq	r0, r0, r3, lsl #28
  38:	0b000f05 	bleq	3c54 <startup-0x1fffc3ac>
  3c:	0013490b 	andseq	r4, r3, fp, lsl #18
  40:	00160600 	andseq	r0, r6, r0, lsl #12
  44:	0b3a0e03 	bleq	e83858 <startup-0x1f17c7a8>
  48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  4c:	13070000 	movwne	r0, #28672	; 0x7000
  50:	0b0e0301 	bleq	380c5c <startup-0x1fc7f3a4>
  54:	3b0b3a0b 	blcc	2ce888 <startup-0x1fd31778>
  58:	0013010b 	andseq	r0, r3, fp, lsl #2
  5c:	00240800 	eoreq	r0, r4, r0, lsl #16
  60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
  64:	00000803 	andeq	r0, r0, r3, lsl #16
  68:	27011509 	strcs	r1, [r1, -r9, lsl #10]
  6c:	00130119 	andseq	r0, r3, r9, lsl r1
  70:	00050a00 	andeq	r0, r5, r0, lsl #20
  74:	00001349 	andeq	r1, r0, r9, asr #6
  78:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
  7c:	00130113 	andseq	r0, r3, r3, lsl r1
  80:	00210c00 	eoreq	r0, r1, r0, lsl #24
  84:	340d0000 	strcc	r0, [sp], #-0
  88:	3a0e0300 	bcc	380c90 <startup-0x1fc7f370>
  8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  90:	3c193f13 	ldccc	15, cr3, [r9], {19}
  94:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
  98:	13490021 	movtne	r0, #36897	; 0x9021
  9c:	0000052f 	andeq	r0, r0, pc, lsr #10
  a0:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
  a4:	000b2f13 	andeq	r2, fp, r3, lsl pc
  a8:	00341000 	eorseq	r1, r4, r0
  ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
  b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  b4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  b8:	34110000 	ldrcc	r0, [r1], #-0
  bc:	3a0e0300 	bcc	380cc4 <startup-0x1fc7f33c>
  c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  c4:	00180213 	andseq	r0, r8, r3, lsl r2
  c8:	00341200 	eorseq	r1, r4, r0, lsl #4
  cc:	0b3a0803 	bleq	e820e0 <startup-0x1f17df20>
  d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  d4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  d8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
  dc:	03193f01 	tsteq	r9, #1, 30
  e0:	3b0b3a0e 	blcc	2ce920 <startup-0x1fd316e0>
  e4:	1119270b 	tstne	r9, fp, lsl #14
  e8:	40061201 	andmi	r1, r6, r1, lsl #4
  ec:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  f0:	00001301 	andeq	r1, r0, r1, lsl #6
  f4:	03003414 	movweq	r3, #1044	; 0x414
  f8:	3b0b3a0e 	blcc	2ce938 <startup-0x1fd316c8>
  fc:	02134905 	andseq	r4, r3, #81920	; 0x14000
 100:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 104:	0111010b 	tsteq	r1, fp, lsl #2
 108:	00000612 	andeq	r0, r0, r2, lsl r6
 10c:	3f002e16 	svccc	0x00002e16
 110:	3a0e0319 	bcc	380d7c <startup-0x1fc7f284>
 114:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 118:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 11c:	96184006 	ldrls	r4, [r8], -r6
 120:	00001942 	andeq	r1, r0, r2, asr #18
 124:	3f002e17 	svccc	0x00002e17
 128:	3a0e0319 	bcc	380d94 <startup-0x1fc7f26c>
 12c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 130:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 134:	97184006 	ldrls	r4, [r8, -r6]
 138:	00001942 	andeq	r1, r0, r2, asr #18
 13c:	01110100 	tsteq	r1, r0, lsl #2
 140:	0b130e25 	bleq	4c39dc <startup-0x1fb3c624>
 144:	01110e03 	tsteq	r1, r3, lsl #28
 148:	17100612 			; <UNDEFINED> instruction: 0x17100612
 14c:	13020000 	movwne	r0, #8192	; 0x2000
 150:	3a0b0b01 	bcc	2c2d5c <startup-0x1fd3d2a4>
 154:	010b3b0b 	tsteq	fp, fp, lsl #22
 158:	03000013 	movweq	r0, #19
 15c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 160:	0b3b0b3a 	bleq	ec2e50 <startup-0x1f13d1b0>
 164:	0b381349 	bleq	e04e90 <startup-0x1f1fb170>
 168:	24040000 	strcs	r0, [r4], #-0
 16c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 170:	000e030b 	andeq	r0, lr, fp, lsl #6
 174:	000f0500 	andeq	r0, pc, r0, lsl #10
 178:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 17c:	16060000 	strne	r0, [r6], -r0
 180:	3a0e0300 	bcc	380d88 <startup-0x1fc7f278>
 184:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 188:	07000013 	smladeq	r0, r3, r0, r0
 18c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 190:	0b3a0b0b 	bleq	e82dc4 <startup-0x1f17d23c>
 194:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 198:	24080000 	strcs	r0, [r8], #-0
 19c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 1a0:	0008030b 	andeq	r0, r8, fp, lsl #6
 1a4:	01150900 	tsteq	r5, r0, lsl #18
 1a8:	13011927 	movwne	r1, #6439	; 0x1927
 1ac:	050a0000 	streq	r0, [sl, #-0]
 1b0:	00134900 	andseq	r4, r3, r0, lsl #18
 1b4:	01010b00 	tsteq	r1, r0, lsl #22
 1b8:	13011349 	movwne	r1, #4937	; 0x1349
 1bc:	210c0000 	mrscs	r0, (UNDEF: 12)
 1c0:	0d000000 	stceq	0, cr0, [r0, #-0]
 1c4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 1c8:	0b3b0b3a 	bleq	ec2eb8 <startup-0x1f13d148>
 1cc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 1d0:	0000193c 	andeq	r1, r0, ip, lsr r9
 1d4:	4700340e 	strmi	r3, [r0, -lr, lsl #8]
 1d8:	3b0b3a13 	blcc	2cea2c <startup-0x1fd315d4>
 1dc:	0018020b 	andseq	r0, r8, fp, lsl #4
 1e0:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
 1e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1e8:	0b3b0b3a 	bleq	ec2ed8 <startup-0x1f13d128>
 1ec:	01111927 	tsteq	r1, r7, lsr #18
 1f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1f4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 1f8:	10000013 	andne	r0, r0, r3, lsl r0
 1fc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 200:	0b3b0b3a 	bleq	ec2ef0 <startup-0x1f13d110>
 204:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 208:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 20c:	03193f01 	tsteq	r9, #1, 30
 210:	3b0b3a0e 	blcc	2cea50 <startup-0x1fd315b0>
 214:	1119270b 	tstne	r9, fp, lsl #14
 218:	40061201 	andmi	r1, r6, r1, lsl #4
 21c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 220:	01000000 	mrseq	r0, (UNDEF: 0)
 224:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 228:	0e030b13 	vmoveq.32	d3[0], r0
 22c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 230:	00001710 	andeq	r1, r0, r0, lsl r7
 234:	0b011302 	bleq	44e44 <startup-0x1ffbb1bc>
 238:	3b0b3a0b 	blcc	2cea6c <startup-0x1fd31594>
 23c:	0013010b 	andseq	r0, r3, fp, lsl #2
 240:	000d0300 	andeq	r0, sp, r0, lsl #6
 244:	0b3a0e03 	bleq	e83a58 <startup-0x1f17c5a8>
 248:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 24c:	00000b38 	andeq	r0, r0, r8, lsr fp
 250:	0b002404 	bleq	9268 <startup-0x1fff6d98>
 254:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 258:	0500000e 	streq	r0, [r0, #-14]
 25c:	0b0b000f 	bleq	2c02a0 <startup-0x1fd3fd60>
 260:	00001349 	andeq	r1, r0, r9, asr #6
 264:	03001606 	movweq	r1, #1542	; 0x606
 268:	3b0b3a0e 	blcc	2ceaa8 <startup-0x1fd31558>
 26c:	0013490b 	andseq	r4, r3, fp, lsl #18
 270:	01130700 	tsteq	r3, r0, lsl #14
 274:	0b0b0e03 	bleq	2c3a88 <startup-0x1fd3c578>
 278:	0b3b0b3a 	bleq	ec2f68 <startup-0x1f13d098>
 27c:	00001301 	andeq	r1, r0, r1, lsl #6
 280:	0b002408 	bleq	92a8 <startup-0x1fff6d58>
 284:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 288:	09000008 	stmdbeq	r0, {r3}
 28c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 290:	00001301 	andeq	r1, r0, r1, lsl #6
 294:	4900050a 	stmdbmi	r0, {r1, r3, r8, sl}
 298:	0b000013 	bleq	2ec <startup-0x1ffffd14>
 29c:	13490101 	movtne	r0, #37121	; 0x9101
 2a0:	00001301 	andeq	r1, r0, r1, lsl #6
 2a4:	0000210c 	andeq	r2, r0, ip, lsl #2
 2a8:	00340d00 	eorseq	r0, r4, r0, lsl #26
 2ac:	0b3a0e03 	bleq	e83ac0 <startup-0x1f17c540>
 2b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2b4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 2b8:	210e0000 	mrscs	r0, (UNDEF: 14)
 2bc:	2f134900 	svccs	0x00134900
 2c0:	0f00000b 	svceq	0x0000000b
 2c4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 2c8:	0b3b0b3a 	bleq	ec2fb8 <startup-0x1f13d048>
 2cc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2d0:	34100000 	ldrcc	r0, [r0], #-0
 2d4:	3a0e0300 	bcc	380edc <startup-0x1fc7f124>
 2d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2dc:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 2e0:	11000018 	tstne	r0, r8, lsl r0
 2e4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2e8:	0b3a0e03 	bleq	e83afc <startup-0x1f17c504>
 2ec:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2f4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 2f8:	00130119 	andseq	r0, r3, r9, lsl r1
 2fc:	00051200 	andeq	r1, r5, r0, lsl #4
 300:	0b3a0e03 	bleq	e83b14 <startup-0x1f17c4ec>
 304:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 308:	00001802 	andeq	r1, r0, r2, lsl #16
 30c:	03012e13 	movweq	r2, #7699	; 0x1e13
 310:	3b0b3a0e 	blcc	2ceb50 <startup-0x1fd314b0>
 314:	1119270b 	tstne	r9, fp, lsl #14
 318:	40061201 	andmi	r1, r6, r1, lsl #4
 31c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 320:	01000000 	mrseq	r0, (UNDEF: 0)
 324:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 328:	0e030b13 	vmoveq.32	d3[0], r0
 32c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 330:	00001710 	andeq	r1, r0, r0, lsl r7
 334:	0b002402 	bleq	9344 <startup-0x1fff6cbc>
 338:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 33c:	0300000e 	movweq	r0, #14
 340:	0b0b0113 	bleq	2c0794 <startup-0x1fd3f86c>
 344:	0b3b0b3a 	bleq	ec3034 <startup-0x1f13cfcc>
 348:	00001301 	andeq	r1, r0, r1, lsl #6
 34c:	03000d04 	movweq	r0, #3332	; 0xd04
 350:	3b0b3a0e 	blcc	2ceb90 <startup-0x1fd31470>
 354:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 358:	0500000b 	streq	r0, [r0, #-11]
 35c:	0b0b000f 	bleq	2c03a0 <startup-0x1fd3fc60>
 360:	00001349 	andeq	r1, r0, r9, asr #6
 364:	03001606 	movweq	r1, #1542	; 0x606
 368:	3b0b3a0e 	blcc	2ceba8 <startup-0x1fd31458>
 36c:	0013490b 	andseq	r4, r3, fp, lsl #18
 370:	01130700 	tsteq	r3, r0, lsl #14
 374:	0b0b0e03 	bleq	2c3b88 <startup-0x1fd3c478>
 378:	0b3b0b3a 	bleq	ec3068 <startup-0x1f13cf98>
 37c:	00001301 	andeq	r1, r0, r1, lsl #6
 380:	0b002408 	bleq	93a8 <startup-0x1fff6c58>
 384:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 388:	09000008 	stmdbeq	r0, {r3}
 38c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 390:	00001301 	andeq	r1, r0, r1, lsl #6
 394:	4900050a 	stmdbmi	r0, {r1, r3, r8, sl}
 398:	0b000013 	bleq	3ec <startup-0x1ffffc14>
 39c:	13490101 	movtne	r0, #37121	; 0x9101
 3a0:	00001301 	andeq	r1, r0, r1, lsl #6
 3a4:	0000210c 	andeq	r2, r0, ip, lsl #2
 3a8:	00340d00 	eorseq	r0, r4, r0, lsl #26
 3ac:	0b3a0e03 	bleq	e83bc0 <startup-0x1f17c440>
 3b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3b4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 3b8:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 3bc:	03193f01 	tsteq	r9, #1, 30
 3c0:	3b0b3a0e 	blcc	2cec00 <startup-0x1fd31400>
 3c4:	1119270b 	tstne	r9, fp, lsl #14
 3c8:	40061201 	andmi	r1, r6, r1, lsl #4
 3cc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 3d0:	050f0000 	streq	r0, [pc, #-0]	; 3d8 <startup-0x1ffffc28>
 3d4:	3a0e0300 	bcc	380fdc <startup-0x1fc7f024>
 3d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3dc:	00180213 	andseq	r0, r8, r3, lsl r2
 3e0:	00341000 	eorseq	r1, r4, r0
 3e4:	0b3a0e03 	bleq	e83bf8 <startup-0x1f17c408>
 3e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3ec:	00001802 	andeq	r1, r0, r2, lsl #16
 3f0:	01110100 	tsteq	r1, r0, lsl #2
 3f4:	0b130e25 	bleq	4c3c90 <startup-0x1fb3c370>
 3f8:	01110e03 	tsteq	r1, r3, lsl #28
 3fc:	17100612 			; <UNDEFINED> instruction: 0x17100612
 400:	13020000 	movwne	r0, #8192	; 0x2000
 404:	3a0b0b01 	bcc	2c3010 <startup-0x1fd3cff0>
 408:	010b3b0b 	tsteq	fp, fp, lsl #22
 40c:	03000013 	movweq	r0, #19
 410:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 414:	0b3b0b3a 	bleq	ec3104 <startup-0x1f13cefc>
 418:	0b381349 	bleq	e05144 <startup-0x1f1faebc>
 41c:	24040000 	strcs	r0, [r4], #-0
 420:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 424:	000e030b 	andeq	r0, lr, fp, lsl #6
 428:	000f0500 	andeq	r0, pc, r0, lsl #10
 42c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 430:	16060000 	strne	r0, [r6], -r0
 434:	3a0e0300 	bcc	38103c <startup-0x1fc7efc4>
 438:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 43c:	07000013 	smladeq	r0, r3, r0, r0
 440:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 444:	0b3a0b0b 	bleq	e83078 <startup-0x1f17cf88>
 448:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 44c:	24080000 	strcs	r0, [r8], #-0
 450:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 454:	0008030b 	andeq	r0, r8, fp, lsl #6
 458:	01150900 	tsteq	r5, r0, lsl #18
 45c:	13011927 	movwne	r1, #6439	; 0x1927
 460:	050a0000 	streq	r0, [sl, #-0]
 464:	00134900 	andseq	r4, r3, r0, lsl #18
 468:	01010b00 	tsteq	r1, r0, lsl #22
 46c:	13011349 	movwne	r1, #4937	; 0x1349
 470:	210c0000 	mrscs	r0, (UNDEF: 12)
 474:	0d000000 	stceq	0, cr0, [r0, #-0]
 478:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 47c:	0b3b0b3a 	bleq	ec316c <startup-0x1f13ce94>
 480:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 484:	0000193c 	andeq	r1, r0, ip, lsr r9
 488:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 48c:	000b2f13 	andeq	r2, fp, r3, lsl pc
 490:	00340f00 	eorseq	r0, r4, r0, lsl #30
 494:	0b3a0e03 	bleq	e83ca8 <startup-0x1f17c358>
 498:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 49c:	00001802 	andeq	r1, r0, r2, lsl #16
 4a0:	03003410 	movweq	r3, #1040	; 0x410
 4a4:	3b0b3a0e 	blcc	2cece4 <startup-0x1fd3131c>
 4a8:	3f13490b 	svccc	0x0013490b
 4ac:	00180219 	andseq	r0, r8, r9, lsl r2
 4b0:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 4b4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4b8:	0b3b0b3a 	bleq	ec31a8 <startup-0x1f13ce58>
 4bc:	01111927 	tsteq	r1, r7, lsr #18
 4c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4c4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 4c8:	12000013 	andne	r0, r0, #19
 4cc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 4d0:	0b3b0b3a 	bleq	ec31c0 <startup-0x1f13ce40>
 4d4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 4d8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 4dc:	3a0e0301 	bcc	3810e8 <startup-0x1fc7ef18>
 4e0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 4e4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 4e8:	96184006 	ldrls	r4, [r8], -r6
 4ec:	00001942 	andeq	r1, r0, r2, asr #18
 4f0:	01110100 	tsteq	r1, r0, lsl #2
 4f4:	0b130e25 	bleq	4c3d90 <startup-0x1fb3c270>
 4f8:	01110e03 	tsteq	r1, r3, lsl #28
 4fc:	17100612 			; <UNDEFINED> instruction: 0x17100612
 500:	13020000 	movwne	r0, #8192	; 0x2000
 504:	3a0b0b01 	bcc	2c3110 <startup-0x1fd3cef0>
 508:	010b3b0b 	tsteq	fp, fp, lsl #22
 50c:	03000013 	movweq	r0, #19
 510:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 514:	0b3b0b3a 	bleq	ec3204 <startup-0x1f13cdfc>
 518:	0b381349 	bleq	e05244 <startup-0x1f1fadbc>
 51c:	24040000 	strcs	r0, [r4], #-0
 520:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 524:	000e030b 	andeq	r0, lr, fp, lsl #6
 528:	000f0500 	andeq	r0, pc, r0, lsl #10
 52c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 530:	16060000 	strne	r0, [r6], -r0
 534:	3a0e0300 	bcc	38113c <startup-0x1fc7eec4>
 538:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 53c:	07000013 	smladeq	r0, r3, r0, r0
 540:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 544:	0b3a0b0b 	bleq	e83178 <startup-0x1f17ce88>
 548:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 54c:	24080000 	strcs	r0, [r8], #-0
 550:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 554:	0008030b 	andeq	r0, r8, fp, lsl #6
 558:	01150900 	tsteq	r5, r0, lsl #18
 55c:	13011927 	movwne	r1, #6439	; 0x1927
 560:	050a0000 	streq	r0, [sl, #-0]
 564:	00134900 	andseq	r4, r3, r0, lsl #18
 568:	01010b00 	tsteq	r1, r0, lsl #22
 56c:	13011349 	movwne	r1, #4937	; 0x1349
 570:	210c0000 	mrscs	r0, (UNDEF: 12)
 574:	0d000000 	stceq	0, cr0, [r0, #-0]
 578:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 57c:	0b3b0b3a 	bleq	ec326c <startup-0x1f13cd94>
 580:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 584:	0000193c 	andeq	r1, r0, ip, lsr r9
 588:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 58c:	000b2f13 	andeq	r2, fp, r3, lsl pc
 590:	00340f00 	eorseq	r0, r4, r0, lsl #30
 594:	0b3a0e03 	bleq	e83da8 <startup-0x1f17c258>
 598:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 59c:	00001802 	andeq	r1, r0, r2, lsl #16
 5a0:	03003410 	movweq	r3, #1040	; 0x410
 5a4:	3b0b3a0e 	blcc	2cede4 <startup-0x1fd3121c>
 5a8:	3f13490b 	svccc	0x0013490b
 5ac:	00180219 	andseq	r0, r8, r9, lsl r2
 5b0:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 5b4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 5b8:	0b3b0b3a 	bleq	ec32a8 <startup-0x1f13cd58>
 5bc:	01111927 	tsteq	r1, r7, lsr #18
 5c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 5c4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 5c8:	12000013 	andne	r0, r0, #19
 5cc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 5d0:	0b3b0b3a 	bleq	ec32c0 <startup-0x1f13cd40>
 5d4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 5d8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 5dc:	3a0e0301 	bcc	3811e8 <startup-0x1fc7ee18>
 5e0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 5e4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 5e8:	96184006 	ldrls	r4, [r8], -r6
 5ec:	00001942 	andeq	r1, r0, r2, asr #18
 5f0:	01110100 	tsteq	r1, r0, lsl #2
 5f4:	0b130e25 	bleq	4c3e90 <startup-0x1fb3c170>
 5f8:	01110e03 	tsteq	r1, r3, lsl #28
 5fc:	17100612 			; <UNDEFINED> instruction: 0x17100612
 600:	13020000 	movwne	r0, #8192	; 0x2000
 604:	3a0b0b01 	bcc	2c3210 <startup-0x1fd3cdf0>
 608:	010b3b0b 	tsteq	fp, fp, lsl #22
 60c:	03000013 	movweq	r0, #19
 610:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 614:	0b3b0b3a 	bleq	ec3304 <startup-0x1f13ccfc>
 618:	0b381349 	bleq	e05344 <startup-0x1f1facbc>
 61c:	24040000 	strcs	r0, [r4], #-0
 620:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 624:	000e030b 	andeq	r0, lr, fp, lsl #6
 628:	000f0500 	andeq	r0, pc, r0, lsl #10
 62c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 630:	16060000 	strne	r0, [r6], -r0
 634:	3a0e0300 	bcc	38123c <startup-0x1fc7edc4>
 638:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 63c:	07000013 	smladeq	r0, r3, r0, r0
 640:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 644:	0b3a0b0b 	bleq	e83278 <startup-0x1f17cd88>
 648:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 64c:	24080000 	strcs	r0, [r8], #-0
 650:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 654:	0008030b 	andeq	r0, r8, fp, lsl #6
 658:	01150900 	tsteq	r5, r0, lsl #18
 65c:	13011927 	movwne	r1, #6439	; 0x1927
 660:	050a0000 	streq	r0, [sl, #-0]
 664:	00134900 	andseq	r4, r3, r0, lsl #18
 668:	01010b00 	tsteq	r1, r0, lsl #22
 66c:	13011349 	movwne	r1, #4937	; 0x1349
 670:	210c0000 	mrscs	r0, (UNDEF: 12)
 674:	0d000000 	stceq	0, cr0, [r0, #-0]
 678:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 67c:	0b3b0b3a 	bleq	ec336c <startup-0x1f13cc94>
 680:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 684:	0000193c 	andeq	r1, r0, ip, lsr r9
 688:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 68c:	00052f13 	andeq	r2, r5, r3, lsl pc
 690:	00340f00 	eorseq	r0, r4, r0, lsl #30
 694:	0b3a1347 	bleq	e853b8 <startup-0x1f17ac48>
 698:	18020b3b 	stmdane	r2, {r0, r1, r3, r4, r5, r8, r9, fp}
 69c:	34100000 	ldrcc	r0, [r0], #-0
 6a0:	3a134700 	bcc	4d22a8 <startup-0x1fb2dd58>
 6a4:	0018020b 	andseq	r0, r8, fp, lsl #4
 6a8:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 6ac:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 6b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 6b4:	01111927 	tsteq	r1, r7, lsr #18
 6b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 6bc:	01194296 			; <UNDEFINED> instruction: 0x01194296
 6c0:	12000013 	andne	r0, r0, #19
 6c4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 6c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 6cc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 6d0:	34130000 	ldrcc	r0, [r3], #-0
 6d4:	3a0e0300 	bcc	3812dc <startup-0x1fc7ed24>
 6d8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 6dc:	00180213 	andseq	r0, r8, r3, lsl r2
 6e0:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
 6e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 6e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 6ec:	01111927 	tsteq	r1, r7, lsr #18
 6f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 6f4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 6f8:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 6fc:	08030034 	stmdaeq	r3, {r2, r4, r5}
 700:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 704:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 708:	34160000 	ldrcc	r0, [r6], #-0
 70c:	3a080300 	bcc	201314 <startup-0x1fdfecec>
 710:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 714:	17000013 	smladne	r0, r3, r0, r0
 718:	08030005 	stmdaeq	r3, {r0, r2}
 71c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 720:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 724:	0b180000 	bleq	60072c <startup-0x1f9ff8d4>
 728:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 72c:	19000006 	stmdbne	r0, {r1, r2}
 730:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 734:	0b3a0e03 	bleq	e83f48 <startup-0x1f17c0b8>
 738:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 73c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 740:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 744:	00130119 	andseq	r0, r3, r9, lsl r1
 748:	00051a00 	andeq	r1, r5, r0, lsl #20
 74c:	0b3a0803 	bleq	e82760 <startup-0x1f17d8a0>
 750:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 754:	00001802 	andeq	r1, r0, r2, lsl #16
 758:	0300051b 	movweq	r0, #1307	; 0x51b
 75c:	3b0b3a0e 	blcc	2cef9c <startup-0x1fd31064>
 760:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 764:	1c000018 	stcne	0, cr0, [r0], {24}
 768:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 76c:	0b3b0b3a 	bleq	ec345c <startup-0x1f13cba4>
 770:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 774:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 778:	03193f01 	tsteq	r9, #1, 30
 77c:	3b0b3a0e 	blcc	2cefbc <startup-0x1fd31044>
 780:	1119270b 	tstne	r9, fp, lsl #14
 784:	40061201 	andmi	r1, r6, r1, lsl #4
 788:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 78c:	00001301 	andeq	r1, r0, r1, lsl #6
 790:	0300341e 	movweq	r3, #1054	; 0x41e
 794:	3b0b3a08 	blcc	2cefbc <startup-0x1fd31044>
 798:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 79c:	1f000018 	svcne	0x00000018
 7a0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 7a4:	0b3a0e03 	bleq	e83fb8 <startup-0x1f17c048>
 7a8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 7ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
 7b0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 7b4:	20000019 	andcs	r0, r0, r9, lsl r0
 7b8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 7bc:	0b3a0e03 	bleq	e83fd0 <startup-0x1f17c030>
 7c0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 7c4:	01111349 	tsteq	r1, r9, asr #6
 7c8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 7cc:	01194296 			; <UNDEFINED> instruction: 0x01194296
 7d0:	21000013 	tstcs	r0, r3, lsl r0
 7d4:	0e03012e 	adfeqsp	f0, f3, #0.5
 7d8:	0b3b0b3a 	bleq	ec34c8 <startup-0x1f13cb38>
 7dc:	13491927 	movtne	r1, #39207	; 0x9927
 7e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 7e4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 7e8:	00130119 	andseq	r0, r3, r9, lsl r1
 7ec:	012e2200 			; <UNDEFINED> instruction: 0x012e2200
 7f0:	0b3a0e03 	bleq	e84004 <startup-0x1f17bffc>
 7f4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 7f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 7fc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 800:	00130119 	andseq	r0, r3, r9, lsl r1
 804:	002e2300 	eoreq	r2, lr, r0, lsl #6
 808:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 80c:	0b3b0b3a 	bleq	ec34fc <startup-0x1f13cb04>
 810:	01111927 	tsteq	r1, r7, lsr #18
 814:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 818:	00194297 	mulseq	r9, r7, r2
 81c:	11010000 	mrsne	r0, (UNDEF: 1)
 820:	130e2501 	movwne	r2, #58625	; 0xe501
 824:	110e030b 	tstne	lr, fp, lsl #6
 828:	10061201 	andne	r1, r6, r1, lsl #4
 82c:	02000017 	andeq	r0, r0, #23
 830:	0b0b0113 	bleq	2c0c84 <startup-0x1fd3f37c>
 834:	0b3b0b3a 	bleq	ec3524 <startup-0x1f13cadc>
 838:	00001301 	andeq	r1, r0, r1, lsl #6
 83c:	03000d03 	movweq	r0, #3331	; 0xd03
 840:	3b0b3a0e 	blcc	2cf080 <startup-0x1fd30f80>
 844:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 848:	0400000b 	streq	r0, [r0], #-11
 84c:	0b0b0024 	bleq	2c08e4 <startup-0x1fd3f71c>
 850:	0e030b3e 	vmoveq.16	d3[0], r0
 854:	0f050000 	svceq	0x00050000
 858:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 85c:	06000013 			; <UNDEFINED> instruction: 0x06000013
 860:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 864:	0b3b0b3a 	bleq	ec3554 <startup-0x1f13caac>
 868:	00001349 	andeq	r1, r0, r9, asr #6
 86c:	03011307 	movweq	r1, #4871	; 0x1307
 870:	3a0b0b0e 	bcc	2c34b0 <startup-0x1fd3cb50>
 874:	010b3b0b 	tsteq	fp, fp, lsl #22
 878:	08000013 	stmdaeq	r0, {r0, r1, r4}
 87c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 880:	0b3a0e03 	bleq	e84094 <startup-0x1f17bf6c>
 884:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 888:	06120111 			; <UNDEFINED> instruction: 0x06120111
 88c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 890:	00130119 	andseq	r0, r3, r9, lsl r1
 894:	00050900 	andeq	r0, r5, r0, lsl #18
 898:	0b3a0e03 	bleq	e840ac <startup-0x1f17bf54>
 89c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 8a0:	00001802 	andeq	r1, r0, r2, lsl #16
 8a4:	01110100 	tsteq	r1, r0, lsl #2
 8a8:	0b130e25 	bleq	4c4144 <startup-0x1fb3bebc>
 8ac:	01110e03 	tsteq	r1, r3, lsl #28
 8b0:	17100612 			; <UNDEFINED> instruction: 0x17100612
 8b4:	13020000 	movwne	r0, #8192	; 0x2000
 8b8:	3a0b0b01 	bcc	2c34c4 <startup-0x1fd3cb3c>
 8bc:	010b3b0b 	tsteq	fp, fp, lsl #22
 8c0:	03000013 	movweq	r0, #19
 8c4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 8c8:	0b3b0b3a 	bleq	ec35b8 <startup-0x1f13ca48>
 8cc:	0b381349 	bleq	e055f8 <startup-0x1f1faa08>
 8d0:	24040000 	strcs	r0, [r4], #-0
 8d4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 8d8:	000e030b 	andeq	r0, lr, fp, lsl #6
 8dc:	000f0500 	andeq	r0, pc, r0, lsl #10
 8e0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 8e4:	16060000 	strne	r0, [r6], -r0
 8e8:	3a0e0300 	bcc	3814f0 <startup-0x1fc7eb10>
 8ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 8f0:	07000013 	smladeq	r0, r3, r0, r0
 8f4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 8f8:	0b3a0e03 	bleq	e8410c <startup-0x1f17bef4>
 8fc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 900:	06120111 			; <UNDEFINED> instruction: 0x06120111
 904:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 908:	00130119 	andseq	r0, r3, r9, lsl r1
 90c:	00050800 	andeq	r0, r5, r0, lsl #16
 910:	0b3a0803 	bleq	e82924 <startup-0x1f17d6dc>
 914:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 918:	00001802 	andeq	r1, r0, r2, lsl #16
 91c:	03000509 	movweq	r0, #1289	; 0x509
 920:	3b0b3a0e 	blcc	2cf160 <startup-0x1fd30ea0>
 924:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 928:	0a000018 	beq	990 <startup-0x1ffff670>
 92c:	0b0b0024 	bleq	2c09c4 <startup-0x1fd3f63c>
 930:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 934:	01000000 	mrseq	r0, (UNDEF: 0)
 938:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 93c:	0e030b13 	vmoveq.32	d3[0], r0
 940:	06120111 			; <UNDEFINED> instruction: 0x06120111
 944:	00001710 	andeq	r1, r0, r0, lsl r7
 948:	0b011302 	bleq	45558 <startup-0x1ffbaaa8>
 94c:	3b0b3a0b 	blcc	2cf180 <startup-0x1fd30e80>
 950:	0013010b 	andseq	r0, r3, fp, lsl #2
 954:	000d0300 	andeq	r0, sp, r0, lsl #6
 958:	0b3a0e03 	bleq	e8416c <startup-0x1f17be94>
 95c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 960:	00000b38 	andeq	r0, r0, r8, lsr fp
 964:	0b002404 	bleq	997c <startup-0x1fff6684>
 968:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 96c:	0500000e 	streq	r0, [r0, #-14]
 970:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 974:	0b3b0b3a 	bleq	ec3664 <startup-0x1f13c99c>
 978:	00001349 	andeq	r1, r0, r9, asr #6
 97c:	3f012e06 	svccc	0x00012e06
 980:	3a0e0319 	bcc	3815ec <startup-0x1fc7ea14>
 984:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 988:	11134919 	tstne	r3, r9, lsl r9
 98c:	40061201 	andmi	r1, r6, r1, lsl #4
 990:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 994:	00001301 	andeq	r1, r0, r1, lsl #6
 998:	03000507 	movweq	r0, #1287	; 0x507
 99c:	3b0b3a08 	blcc	2cf1c4 <startup-0x1fd30e3c>
 9a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 9a4:	08000018 	stmdaeq	r0, {r3, r4}
 9a8:	08030034 	stmdaeq	r3, {r2, r4, r5}
 9ac:	0b3b0b3a 	bleq	ec369c <startup-0x1f13c964>
 9b0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 9b4:	24090000 	strcs	r0, [r9], #-0
 9b8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 9bc:	0008030b 	andeq	r0, r8, fp, lsl #6
 9c0:	002e0a00 	eoreq	r0, lr, r0, lsl #20
 9c4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 9c8:	0b3b0b3a 	bleq	ec36b8 <startup-0x1f13c948>
 9cc:	13491927 	movtne	r1, #39207	; 0x9927
 9d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 9d4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 9d8:	0b000019 	bleq	a44 <startup-0x1ffff5bc>
 9dc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 9e0:	0b3a0e03 	bleq	e841f4 <startup-0x1f17be0c>
 9e4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 9e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 9ec:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 9f0:	00000019 	andeq	r0, r0, r9, lsl r0
 9f4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 9f8:	030b130e 	movweq	r1, #45838	; 0xb30e
 9fc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 a00:	00171006 	andseq	r1, r7, r6
 a04:	01130200 	tsteq	r3, r0, lsl #4
 a08:	0b3a0b0b 	bleq	e8363c <startup-0x1f17c9c4>
 a0c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 a10:	0d030000 	stceq	0, cr0, [r3, #-0]
 a14:	3a0e0300 	bcc	38161c <startup-0x1fc7e9e4>
 a18:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 a1c:	000b3813 	andeq	r3, fp, r3, lsl r8
 a20:	00240400 	eoreq	r0, r4, r0, lsl #8
 a24:	0b3e0b0b 	bleq	f83658 <startup-0x1f07c9a8>
 a28:	00000e03 	andeq	r0, r0, r3, lsl #28
 a2c:	0b000f05 	bleq	4648 <startup-0x1fffb9b8>
 a30:	0013490b 	andseq	r4, r3, fp, lsl #18
 a34:	00160600 	andseq	r0, r6, r0, lsl #12
 a38:	0b3a0e03 	bleq	e8424c <startup-0x1f17bdb4>
 a3c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 a40:	13070000 	movwne	r0, #28672	; 0x7000
 a44:	0b0e0301 	bleq	381650 <startup-0x1fc7e9b0>
 a48:	3b0b3a0b 	blcc	2cf27c <startup-0x1fd30d84>
 a4c:	0013010b 	andseq	r0, r3, fp, lsl #2
 a50:	00240800 	eoreq	r0, r4, r0, lsl #16
 a54:	0b3e0b0b 	bleq	f83688 <startup-0x1f07c978>
 a58:	00000803 	andeq	r0, r0, r3, lsl #16
 a5c:	27011509 	strcs	r1, [r1, -r9, lsl #10]
 a60:	00130119 	andseq	r0, r3, r9, lsl r1
 a64:	00050a00 	andeq	r0, r5, r0, lsl #20
 a68:	00001349 	andeq	r1, r0, r9, asr #6
 a6c:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
 a70:	00130113 	andseq	r0, r3, r3, lsl r1
 a74:	00210c00 	eoreq	r0, r1, r0, lsl #24
 a78:	340d0000 	strcc	r0, [sp], #-0
 a7c:	3a0e0300 	bcc	381684 <startup-0x1fc7e97c>
 a80:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 a84:	3c193f13 	ldccc	15, cr3, [r9], {19}
 a88:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
 a8c:	13490021 	movtne	r0, #36897	; 0x9021
 a90:	0000052f 	andeq	r0, r0, pc, lsr #10
 a94:	3f012e0f 	svccc	0x00012e0f
 a98:	3a0e0319 	bcc	381704 <startup-0x1fc7e8fc>
 a9c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 aa0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 aa4:	96184006 	ldrls	r4, [r8], -r6
 aa8:	13011942 	movwne	r1, #6466	; 0x1942
 aac:	34100000 	ldrcc	r0, [r0], #-0
 ab0:	3a080300 	bcc	2016b8 <startup-0x1fdfe948>
 ab4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 ab8:	00180213 	andseq	r0, r8, r3, lsl r2
 abc:	00341100 	eorseq	r1, r4, r0, lsl #2
 ac0:	0b3a0e03 	bleq	e842d4 <startup-0x1f17bd2c>
 ac4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 ac8:	00001802 	andeq	r1, r0, r2, lsl #16
 acc:	49002112 	stmdbmi	r0, {r1, r4, r8, sp}
 ad0:	000b2f13 	andeq	r2, fp, r3, lsl pc
 ad4:	00051300 	andeq	r1, r5, r0, lsl #6
 ad8:	0b3a0e03 	bleq	e842ec <startup-0x1f17bd14>
 adc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 ae0:	00001802 	andeq	r1, r0, r2, lsl #16
 ae4:	3f002e14 	svccc	0x00002e14
 ae8:	3a0e0319 	bcc	381754 <startup-0x1fc7e8ac>
 aec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 af0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 af4:	96184006 	ldrls	r4, [r8], -r6
 af8:	00001942 	andeq	r1, r0, r2, asr #18
 afc:	3f002e15 	svccc	0x00002e15
 b00:	3a0e0319 	bcc	38176c <startup-0x1fc7e894>
 b04:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 b08:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 b0c:	97184006 	ldrls	r4, [r8, -r6]
 b10:	00001942 	andeq	r1, r0, r2, asr #18
 b14:	03000516 	movweq	r0, #1302	; 0x516
 b18:	3b0b3a08 	blcc	2cf340 <startup-0x1fd30cc0>
 b1c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 b20:	17000018 	smladne	r0, r8, r0, r0
 b24:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 b28:	0b3a0e03 	bleq	e8433c <startup-0x1f17bcc4>
 b2c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 b30:	01111349 	tsteq	r1, r9, asr #6
 b34:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 b38:	01194296 			; <UNDEFINED> instruction: 0x01194296
 b3c:	18000013 	stmdane	r0, {r0, r1, r4}
 b40:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 b44:	0b3a0e03 	bleq	e84358 <startup-0x1f17bca8>
 b48:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 b4c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 b50:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 b54:	00130119 	andseq	r0, r3, r9, lsl r1
 b58:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
 b5c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 b60:	0b3b0b3a 	bleq	ec3850 <startup-0x1f13c7b0>
 b64:	01111927 	tsteq	r1, r7, lsr #18
 b68:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 b6c:	00194297 	mulseq	r9, r7, r2
 b70:	11010000 	mrsne	r0, (UNDEF: 1)
 b74:	130e2501 	movwne	r2, #58625	; 0xe501
 b78:	110e030b 	tstne	lr, fp, lsl #6
 b7c:	10061201 	andne	r1, r6, r1, lsl #4
 b80:	02000017 	andeq	r0, r0, #23
 b84:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 b88:	0b3a0b0b 	bleq	e837bc <startup-0x1f17c844>
 b8c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 b90:	0d030000 	stceq	0, cr0, [r3, #-0]
 b94:	3a0e0300 	bcc	38179c <startup-0x1fc7e864>
 b98:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 b9c:	000b3813 	andeq	r3, fp, r3, lsl r8
 ba0:	000f0400 	andeq	r0, pc, r0, lsl #8
 ba4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 ba8:	24050000 	strcs	r0, [r5], #-0
 bac:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 bb0:	000e030b 	andeq	r0, lr, fp, lsl #6
 bb4:	00240600 	eoreq	r0, r4, r0, lsl #12
 bb8:	0b3e0b0b 	bleq	f837ec <startup-0x1f07c814>
 bbc:	00000803 	andeq	r0, r0, r3, lsl #16
 bc0:	27011507 	strcs	r1, [r1, -r7, lsl #10]
 bc4:	00130119 	andseq	r0, r3, r9, lsl r1
 bc8:	00050800 	andeq	r0, r5, r0, lsl #16
 bcc:	00001349 	andeq	r1, r0, r9, asr #6
 bd0:	03001609 	movweq	r1, #1545	; 0x609
 bd4:	3b0b3a0e 	blcc	2cf414 <startup-0x1fd30bec>
 bd8:	0013490b 	andseq	r4, r3, fp, lsl #18
 bdc:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
 be0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 be4:	0b3b0b3a 	bleq	ec38d4 <startup-0x1f13c72c>
 be8:	01111927 	tsteq	r1, r7, lsr #18
 bec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 bf0:	01194297 			; <UNDEFINED> instruction: 0x01194297
 bf4:	0b000013 	bleq	c48 <startup-0x1ffff3b8>
 bf8:	08030005 	stmdaeq	r3, {r0, r2}
 bfc:	0b3b0b3a 	bleq	ec38ec <startup-0x1f13c714>
 c00:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 c04:	050c0000 	streq	r0, [ip, #-0]
 c08:	3a0e0300 	bcc	381810 <startup-0x1fc7e7f0>
 c0c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 c10:	00180213 	andseq	r0, r8, r3, lsl r2
 c14:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
 c18:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 c1c:	0b3b0b3a 	bleq	ec390c <startup-0x1f13c6f4>
 c20:	01111927 	tsteq	r1, r7, lsr #18
 c24:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 c28:	00194296 	mulseq	r9, r6, r2
 c2c:	00340e00 	eorseq	r0, r4, r0, lsl #28
 c30:	0b3a0e03 	bleq	e84444 <startup-0x1f17bbbc>
 c34:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 c38:	00001802 	andeq	r1, r0, r2, lsl #16
 c3c:	01110100 	tsteq	r1, r0, lsl #2
 c40:	0b130e25 	bleq	4c44dc <startup-0x1fb3bb24>
 c44:	01110e03 	tsteq	r1, r3, lsl #28
 c48:	17100612 			; <UNDEFINED> instruction: 0x17100612
 c4c:	13020000 	movwne	r0, #8192	; 0x2000
 c50:	3a0b0b01 	bcc	2c385c <startup-0x1fd3c7a4>
 c54:	010b3b0b 	tsteq	fp, fp, lsl #22
 c58:	03000013 	movweq	r0, #19
 c5c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 c60:	0b3b0b3a 	bleq	ec3950 <startup-0x1f13c6b0>
 c64:	0b381349 	bleq	e05990 <startup-0x1f1fa670>
 c68:	24040000 	strcs	r0, [r4], #-0
 c6c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 c70:	000e030b 	andeq	r0, lr, fp, lsl #6
 c74:	000f0500 	andeq	r0, pc, r0, lsl #10
 c78:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 c7c:	16060000 	strne	r0, [r6], -r0
 c80:	3a0e0300 	bcc	381888 <startup-0x1fc7e778>
 c84:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 c88:	07000013 	smladeq	r0, r3, r0, r0
 c8c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 c90:	0b3a0b0b 	bleq	e838c4 <startup-0x1f17c73c>
 c94:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 c98:	24080000 	strcs	r0, [r8], #-0
 c9c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 ca0:	0008030b 	andeq	r0, r8, fp, lsl #6
 ca4:	01150900 	tsteq	r5, r0, lsl #18
 ca8:	13011927 	movwne	r1, #6439	; 0x1927
 cac:	050a0000 	streq	r0, [sl, #-0]
 cb0:	00134900 	andseq	r4, r3, r0, lsl #18
 cb4:	01010b00 	tsteq	r1, r0, lsl #22
 cb8:	13011349 	movwne	r1, #4937	; 0x1349
 cbc:	210c0000 	mrscs	r0, (UNDEF: 12)
 cc0:	0d000000 	stceq	0, cr0, [r0, #-0]
 cc4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 cc8:	0b3b0b3a 	bleq	ec39b8 <startup-0x1f13c648>
 ccc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 cd0:	0000193c 	andeq	r1, r0, ip, lsr r9
 cd4:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 cd8:	00052f13 	andeq	r2, r5, r3, lsl pc
 cdc:	00340f00 	eorseq	r0, r4, r0, lsl #30
 ce0:	0b3a0e03 	bleq	e844f4 <startup-0x1f17bb0c>
 ce4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 ce8:	00001802 	andeq	r1, r0, r2, lsl #16
 cec:	03003410 	movweq	r3, #1040	; 0x410
 cf0:	3b0b3a0e 	blcc	2cf530 <startup-0x1fd30ad0>
 cf4:	3f13490b 	svccc	0x0013490b
 cf8:	00180219 	andseq	r0, r8, r9, lsl r2
 cfc:	00211100 	eoreq	r1, r1, r0, lsl #2
 d00:	0b2f1349 	bleq	bc5a2c <startup-0x1f43a5d4>
 d04:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 d08:	03193f01 	tsteq	r9, #1, 30
 d0c:	3b0b3a0e 	blcc	2cf54c <startup-0x1fd30ab4>
 d10:	1119270b 	tstne	r9, fp, lsl #14
 d14:	40061201 	andmi	r1, r6, r1, lsl #4
 d18:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 d1c:	00001301 	andeq	r1, r0, r1, lsl #6
 d20:	03000513 	movweq	r0, #1299	; 0x513
 d24:	3b0b3a0e 	blcc	2cf564 <startup-0x1fd30a9c>
 d28:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 d2c:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
 d30:	0e03012e 	adfeqsp	f0, f3, #0.5
 d34:	0b3b0b3a 	bleq	ec3a24 <startup-0x1f13c5dc>
 d38:	01111927 	tsteq	r1, r7, lsr #18
 d3c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 d40:	00194296 	mulseq	r9, r6, r2
 d44:	11010000 	mrsne	r0, (UNDEF: 1)
 d48:	130e2501 	movwne	r2, #58625	; 0xe501
 d4c:	110e030b 	tstne	lr, fp, lsl #6
 d50:	10061201 	andne	r1, r6, r1, lsl #4
 d54:	02000017 	andeq	r0, r0, #23
 d58:	0b0b0113 	bleq	2c11ac <startup-0x1fd3ee54>
 d5c:	0b3b0b3a 	bleq	ec3a4c <startup-0x1f13c5b4>
 d60:	00001301 	andeq	r1, r0, r1, lsl #6
 d64:	03000d03 	movweq	r0, #3331	; 0xd03
 d68:	3b0b3a0e 	blcc	2cf5a8 <startup-0x1fd30a58>
 d6c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 d70:	0400000b 	streq	r0, [r0], #-11
 d74:	0b0b0024 	bleq	2c0e0c <startup-0x1fd3f1f4>
 d78:	0e030b3e 	vmoveq.16	d3[0], r0
 d7c:	0f050000 	svceq	0x00050000
 d80:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 d84:	06000013 			; <UNDEFINED> instruction: 0x06000013
 d88:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 d8c:	0b3b0b3a 	bleq	ec3a7c <startup-0x1f13c584>
 d90:	00001349 	andeq	r1, r0, r9, asr #6
 d94:	03011307 	movweq	r1, #4871	; 0x1307
 d98:	3a0b0b0e 	bcc	2c39d8 <startup-0x1fd3c628>
 d9c:	010b3b0b 	tsteq	fp, fp, lsl #22
 da0:	08000013 	stmdaeq	r0, {r0, r1, r4}
 da4:	0b0b0024 	bleq	2c0e3c <startup-0x1fd3f1c4>
 da8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 dac:	15090000 	strne	r0, [r9, #-0]
 db0:	01192701 	tsteq	r9, r1, lsl #14
 db4:	0a000013 	beq	e08 <startup-0x1ffff1f8>
 db8:	13490005 	movtne	r0, #36869	; 0x9005
 dbc:	010b0000 	mrseq	r0, (UNDEF: 11)
 dc0:	01134901 	tsteq	r3, r1, lsl #18
 dc4:	0c000013 	stceq	0, cr0, [r0], {19}
 dc8:	00000021 	andeq	r0, r0, r1, lsr #32
 dcc:	0300340d 	movweq	r3, #1037	; 0x40d
 dd0:	3b0b3a0e 	blcc	2cf610 <startup-0x1fd309f0>
 dd4:	3f13490b 	svccc	0x0013490b
 dd8:	00193c19 	andseq	r3, r9, r9, lsl ip
 ddc:	00210e00 	eoreq	r0, r1, r0, lsl #28
 de0:	052f1349 	streq	r1, [pc, #-841]!	; a9f <startup-0x1ffff561>
 de4:	340f0000 	strcc	r0, [pc], #-0	; dec <startup-0x1ffff214>
 de8:	3a0e0300 	bcc	3819f0 <startup-0x1fc7e610>
 dec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 df0:	00180213 	andseq	r0, r8, r3, lsl r2
 df4:	00341000 	eorseq	r1, r4, r0
 df8:	0b3a0e03 	bleq	e8460c <startup-0x1f17b9f4>
 dfc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 e00:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 e04:	21110000 	tstcs	r1, r0
 e08:	2f134900 	svccs	0x00134900
 e0c:	1200000b 	andne	r0, r0, #11
 e10:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 e14:	0b3a0e03 	bleq	e84628 <startup-0x1f17b9d8>
 e18:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 e1c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 e20:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 e24:	00130119 	andseq	r0, r3, r9, lsl r1
 e28:	00051300 	andeq	r1, r5, r0, lsl #6
 e2c:	0b3a0e03 	bleq	e84640 <startup-0x1f17b9c0>
 e30:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 e34:	00001802 	andeq	r1, r0, r2, lsl #16
 e38:	03012e14 	movweq	r2, #7700	; 0x1e14
 e3c:	3b0b3a0e 	blcc	2cf67c <startup-0x1fd30984>
 e40:	1119270b 	tstne	r9, fp, lsl #14
 e44:	40061201 	andmi	r1, r6, r1, lsl #4
 e48:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 e4c:	Address 0x00000e4c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000c6c 	andeq	r0, r0, ip, ror #24
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	089a0002 	ldmeq	sl, {r1}
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000c7c 	andcs	r0, r0, ip, ror ip
  3c:	00000056 	andeq	r0, r0, r6, asr r0
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	0a7e0002 	beq	1f8005c <startup-0x1e07ffa4>
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000cd4 	ldrdcs	r0, [r0], -r4
  5c:	000002a8 	andeq	r0, r0, r8, lsr #5
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	0fad0002 	svceq	0x00ad0002
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000f7c 	andcs	r0, r0, ip, ror pc
  7c:	000000d8 	ldrdeq	r0, [r0], -r8
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	11860002 	orrne	r0, r6, r2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20001054 	andcs	r1, r0, r4, asr r0
  9c:	00000364 	andeq	r0, r0, r4, ror #6
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	17cb0002 	strbne	r0, [fp, r2]
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200013b8 			; <UNDEFINED> instruction: 0x200013b8
  bc:	00000238 	andeq	r0, r0, r8, lsr r2
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	1c670002 	stclne	0, cr0, [r7], #-8
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	200015f0 	strdcs	r1, [r0], -r0
  dc:	00000e44 	andeq	r0, r0, r4, asr #28
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	250a0002 	strcs	r0, [sl, #-2]
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	20002434 	andcs	r2, r0, r4, lsr r4
  fc:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	260e0002 	strcs	r0, [lr], -r2
 110:	00040000 	andeq	r0, r4, r0
 114:	00000000 	andeq	r0, r0, r0
 118:	2000245c 	andcs	r2, r0, ip, asr r4
 11c:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	26d50002 	ldrbcs	r0, [r5], r2
 130:	00040000 	andeq	r0, r4, r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20002484 	andcs	r2, r0, r4, lsl #9
 13c:	00000060 	andeq	r0, r0, r0, rrx
	...
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	280e0002 	stmdacs	lr, {r1}
 150:	00040000 	andeq	r0, r4, r0
 154:	00000000 	andeq	r0, r0, r0
 158:	200024e4 	andcs	r2, r0, r4, ror #9
 15c:	00000520 	andeq	r0, r0, r0, lsr #10
	...
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
 16c:	2cff0002 	ldclcs	0, cr0, [pc], #8	; 17c <startup-0x1ffffe84>
 170:	00040000 	andeq	r0, r4, r0
 174:	00000000 	andeq	r0, r0, r0
 178:	20002a04 	andcs	r2, r0, r4, lsl #20
 17c:	00000094 	muleq	r0, r4, r0
	...
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	2e430002 	cdpcs	0, 4, cr0, cr3, cr2, {0}
 190:	00040000 	andeq	r0, r4, r0
 194:	00000000 	andeq	r0, r0, r0
 198:	20002a98 	mulcs	r0, r8, sl
 19c:	000000e8 	andeq	r0, r0, r8, ror #1
	...
 1a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ac:	31270002 			; <UNDEFINED> instruction: 0x31270002
 1b0:	00040000 	andeq	r0, r4, r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	20002b80 	andcs	r2, r0, r0, lsl #23
 1bc:	000000e8 	andeq	r0, r0, r8, ror #1
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000c7c 	andcs	r0, r0, ip, ror ip
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	0000028b 	andeq	r0, r0, fp, lsl #5
       4:	017d0002 	cmneq	sp, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	43010000 	movwmi	r0, #4096	; 0x1000
      1c:	6f6d2f3a 	svcvs	0x006d2f3a
      20:	2f632f70 	svccs	0x00632f70
      24:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
      28:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
      2c:	6f697461 	svcvs	0x00697461
      30:	2f72656e 	svccs	0x0072656e
      34:	73504944 	cmpvc	r0, #68, 18	; 0x110000
      38:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
      3c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
      40:	74730000 	ldrbtvc	r0, [r3], #-0
      44:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
      48:	00632e70 	rsbeq	r2, r3, r0, ror lr
      4c:	73000001 	movwvc	r0, #1
      50:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
      54:	00682e65 	rsbeq	r2, r8, r5, ror #28
      58:	69000001 	stmdbvs	r0, {r0}
      5c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
      60:	0100682e 	tsteq	r0, lr, lsr #16
      64:	61670000 	cmnvs	r7, r0
      68:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
      6c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
      70:	0100682e 	tsteq	r0, lr, lsr #16
      74:	72670000 	rsbvc	r0, r7, #0
      78:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
      7c:	682e7363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, ip, sp, lr}
      80:	00000100 	andeq	r0, r0, r0, lsl #2
      84:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
      88:	5f726574 	svcpl	0x00726574
      8c:	63616c62 	cmnvs	r1, #25088	; 0x6200
      90:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
      94:	0001006d 	andeq	r0, r1, sp, rrx
      98:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
      9c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
      a0:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
      a4:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
      a8:	01006d62 	tsteq	r0, r2, ror #26
      ac:	6f6d0000 	svcvs	0x006d0000
      b0:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
      b4:	72675f72 	rsbvc	r5, r7, #456	; 0x1c8
      b8:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
      bc:	01006d62 	tsteq	r0, r2, ror #26
      c0:	72700000 	rsbsvc	r0, r0, #0
      c4:	5f737365 	svcpl	0x00737365
      c8:	63616c62 	cmnvs	r1, #25088	; 0x6200
      cc:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
      d0:	0001006d 	andeq	r0, r1, sp, rrx
      d4:	65727000 	ldrbvs	r7, [r2, #-0]!
      d8:	6c5f7373 	mrrcvs	3, 7, r7, pc, cr3	; <UNPREDICTABLE>
      dc:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
      e0:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
      e4:	00000100 	andeq	r0, r0, r0, lsl #2
      e8:	73657270 	cmnvc	r5, #112, 4
      ec:	72675f73 	rsbvc	r5, r7, #460	; 0x1cc
      f0:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
      f4:	01006d62 	tsteq	r0, r2, ror #26
      f8:	61630000 	cmnvs	r3, r0
      fc:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     100:	616c625f 	cmnvs	ip, pc, asr r2
     104:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     108:	01006d62 	tsteq	r0, r2, ror #26
     10c:	61630000 	cmnvs	r3, r0
     110:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     114:	6172675f 	cmnvs	r2, pc, asr r7
     118:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     11c:	0001006d 	andeq	r0, r1, sp, rrx
     120:	73616300 	cmnvc	r1, #0, 6
     124:	5f656c74 	svcpl	0x00656c74
     128:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     12c:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     130:	0001006d 	andeq	r0, r1, sp, rrx
     134:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     138:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
     13c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     140:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     144:	00000100 	andeq	r0, r0, r0, lsl #2
     148:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     14c:	72675f65 	rsbvc	r5, r7, #404	; 0x194
     150:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     154:	01006d62 	tsteq	r0, r2, ror #26
     158:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
     15c:	5f656c74 	svcpl	0x00656c74
     160:	63616c62 	cmnvs	r1, #25088	; 0x6200
     164:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     168:	0001006d 	andeq	r0, r1, sp, rrx
     16c:	6f6c7300 	svcvs	0x006c7300
     170:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
     174:	682e7478 	stmdavs	lr!, {r3, r4, r5, r6, sl, ip, sp, lr}
     178:	00000100 	andeq	r0, r0, r0, lsl #2
     17c:	782e6762 	stmdavc	lr!, {r1, r5, r6, r8, r9, sl, sp, lr}
     180:	01006d62 	tsteq	r0, r2, ror #26
     184:	00000000 	andeq	r0, r0, r0
     188:	00000205 	andeq	r0, r0, r5, lsl #4
     18c:	32032000 	andcc	r2, r3, #0
     190:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
     194:	01010003 	tsteq	r1, r3
     198:	10020500 	andne	r0, r2, r0, lsl #10
     19c:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
     1a0:	3d2f0127 	stfccs	f0, [pc, #-156]!	; 10c <startup-0x1ffffef4>
     1a4:	03303030 	teqeq	r0, #48	; 0x30
     1a8:	2f3d742c 	svccs	0x003d742c
     1ac:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     1b0:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     1b4:	2f3e672f 	svccs	0x003e672f
     1b8:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     1bc:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     1c0:	2f3d672f 	svccs	0x003d672f
     1c4:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     1c8:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     1cc:	2f3d672f 	svccs	0x003d672f
     1d0:	52023f67 	andpl	r3, r2, #412	; 0x19c
     1d4:	4a0a0317 	bmi	280e38 <startup-0x1fd7f1c8>
     1d8:	7583322f 	strvc	r3, [r3, #559]	; 0x22f
     1dc:	595959bb 	ldmdbpl	r9, {r0, r1, r3, r4, r5, r7, r8, fp, ip, lr}^
     1e0:	bb75835c 	bllt	1d60f58 <startup-0x1e29f0a8>
     1e4:	835c6759 	cmphi	ip, #23330816	; 0x1640000
     1e8:	5959bb75 	ldmdbpl	r9, {r0, r2, r4, r5, r6, r8, r9, fp, ip, sp, pc}^
     1ec:	bb75835c 	bllt	1d60f64 <startup-0x1e29f09c>
     1f0:	675b5959 			; <UNDEFINED> instruction: 0x675b5959
     1f4:	83678583 	cmnhi	r7, #549453824	; 0x20c00000
     1f8:	83836785 	orrhi	r6, r3, #34865152	; 0x2140000
     1fc:	83836785 	orrhi	r6, r3, #34865152	; 0x2140000
     200:	68686885 	stmdavs	r8!, {r0, r2, r7, fp, sp, lr}^
     204:	83838367 	orrhi	r8, r3, #-1677721599	; 0x9c000001
     208:	83838384 	orrhi	r8, r3, #132, 6	; 0x10000002
     20c:	83838385 	orrhi	r8, r3, #335544322	; 0x14000002
     210:	83838384 	orrhi	r8, r3, #132, 6	; 0x10000002
     214:	75820f03 	strvc	r0, [r2, #3843]	; 0xf03
     218:	75757575 	ldrbvc	r7, [r5, #-1397]!	; 0xfffffa8b
     21c:	75757575 	ldrbvc	r7, [r5, #-1397]!	; 0xfffffa8b
     220:	67135902 	ldrvs	r5, [r3, -r2, lsl #18]
     224:	2f2f7675 	svccs	0x002f7675
     228:	94424b30 	strbls	r4, [r2], #-2864	; 0xfffff4d0
     22c:	4f3a6721 	svcmi	0x003a6721
     230:	5a253d3d 	bpl	94f72c <startup-0x1f6b08d4>
     234:	67679367 	strbvs	r9, [r7, -r7, ror #6]!
     238:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
     23c:	02004267 	andeq	r4, r0, #1879048198	; 0x70000006
     240:	82060104 	andhi	r0, r6, #4, 2
     244:	83bb8306 			; <UNDEFINED> instruction: 0x83bb8306
     248:	c9917530 	ldmibgt	r1, {r4, r5, r8, sl, ip, sp, lr}
     24c:	c9c9c9bb 	stmibgt	r9, {r0, r1, r3, r4, r5, r7, r8, fp, lr, pc}^
     250:	c9f3c9d7 	ldmibgt	r3!, {r0, r1, r2, r4, r6, r7, r8, fp, lr, pc}^
     254:	08c92108 	stmiaeq	r9, {r3, r8, sp}^
     258:	2f08c913 	svccs	0x0008c913
     25c:	021308c9 	andseq	r0, r3, #13172736	; 0xc90000
     260:	21081338 	tstcs	r8, r8, lsr r3
     264:	bb4b08c9 	bllt	12c2590 <startup-0x1ed3da70>
     268:	4bca3d08 	blmi	ff28f690 <firstTime.4040+0xdf286d58>
     26c:	bb414b3d 	bllt	1052f68 <startup-0x1efad098>
     270:	bbbbbbbb 	bllt	feeef164 <firstTime.4040+0xdeee682c>
     274:	24e767e5 	strbtcs	r6, [r7], #2021	; 0x7e5
     278:	69765959 	ldmdbvs	r6!, {r0, r3, r4, r6, r8, fp, ip, lr}^
     27c:	03bc3f67 			; <UNDEFINED> instruction: 0x03bc3f67
     280:	0200206f 	andeq	r2, r0, #111	; 0x6f
     284:	ac030104 	stfges	f0, [r3], {4}
     288:	2002207f 	andcs	r2, r2, pc, ror r0
     28c:	8a010100 	bhi	40694 <startup-0x1ffbf96c>
     290:	02000000 	andeq	r0, r0, #0
     294:	00007000 	andeq	r7, r0, r0
     298:	fb010200 	blx	40aa2 <startup-0x1ffbf55e>
     29c:	01000d0e 	tsteq	r0, lr, lsl #26
     2a0:	00010101 	andeq	r0, r1, r1, lsl #2
     2a4:	00010000 	andeq	r0, r1, r0
     2a8:	3a430100 	bcc	10c06b0 <startup-0x1ef3f950>
     2ac:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     2b0:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 1fc <startup-0x1ffffe04>
     2b4:	616c706f 	cmnvs	ip, pc, rrx
     2b8:	61726f62 	cmnvs	r2, r2, ror #30
     2bc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     2c0:	442f7265 	strtmi	r7, [pc], #-613	; 2c8 <startup-0x1ffffd38>
     2c4:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     2c8:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     2cc:	00432f68 	subeq	r2, r3, r8, ror #30
     2d0:	6d616700 	stclvs	7, cr6, [r1, #-0]
     2d4:	6a626f65 	bvs	189c070 <startup-0x1e763f90>
     2d8:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
     2dc:	00010063 	andeq	r0, r1, r3, rrx
     2e0:	72707300 	rsbsvc	r7, r0, #0, 6
     2e4:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
     2e8:	00010068 	andeq	r0, r1, r8, rrx
     2ec:	616d6900 	cmnvs	sp, r0, lsl #18
     2f0:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     2f4:	00000100 	andeq	r0, r0, r0, lsl #2
     2f8:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     2fc:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     300:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
     304:	00000100 	andeq	r0, r0, r0, lsl #2
     308:	02050000 	andeq	r0, r5, #0
     30c:	20000c7c 	andcs	r0, r0, ip, ror ip
     310:	4b4c4c19 	blmi	131337c <startup-0x1ececc84>
     314:	ca3d6759 	bgt	f5a080 <startup-0x1f0a5f80>
     318:	01000402 	tsteq	r0, r2, lsl #8
     31c:	00018401 	andeq	r8, r1, r1, lsl #8
     320:	37000200 	strcc	r0, [r0, -r0, lsl #4]
     324:	02000001 	andeq	r0, r0, #1
     328:	0d0efb01 	vstreq	d15, [lr, #-4]
     32c:	01010100 	mrseq	r0, (UNDEF: 17)
     330:	00000001 	andeq	r0, r0, r1
     334:	01000001 	tsteq	r0, r1
     338:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     33c:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     340:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     344:	6f62616c 	svcvs	0x0062616c
     348:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     34c:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     350:	5049442f 	subpl	r4, r9, pc, lsr #8
     354:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     358:	2f686374 	svccs	0x00686374
     35c:	66000043 	strvs	r0, [r0], -r3, asr #32
     360:	2e657269 	cdpcs	2, 6, cr7, cr5, cr9, {3}
     364:	00010063 	andeq	r0, r1, r3, rrx
     368:	72707300 	rsbsvc	r7, r0, #0, 6
     36c:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
     370:	00010068 	andeq	r0, r1, r8, rrx
     374:	616d6900 	cmnvs	sp, r0, lsl #18
     378:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     37c:	00000100 	andeq	r0, r0, r0, lsl #2
     380:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     384:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     388:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
     38c:	00000100 	andeq	r0, r0, r0, lsl #2
     390:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     394:	616c625f 	cmnvs	ip, pc, asr r2
     398:	325f6b63 	subscc	r6, pc, #101376	; 0x18c00
     39c:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     3a0:	00000100 	andeq	r0, r0, r0, lsl #2
     3a4:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     3a8:	72675f31 	rsbvc	r5, r7, #49, 30	; 0xc4
     3ac:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     3b0:	01006d62 	tsteq	r0, r2, ror #26
     3b4:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     3b8:	5f316572 	svcpl	0x00316572
     3bc:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     3c0:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     3c4:	0001006d 	andeq	r0, r1, sp, rrx
     3c8:	72696600 	rsbvc	r6, r9, #0, 12
     3cc:	675f3265 	ldrbvs	r3, [pc, -r5, ror #4]
     3d0:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     3d4:	006d6278 	rsbeq	r6, sp, r8, ror r2
     3d8:	66000001 	strvs	r0, [r0], -r1
     3dc:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
     3e0:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     3e4:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     3e8:	01006d62 	tsteq	r0, r2, ror #26
     3ec:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     3f0:	5f336572 	svcpl	0x00336572
     3f4:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     3f8:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     3fc:	00000100 	andeq	r0, r0, r0, lsl #2
     400:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     404:	696c5f33 	stmdbvs	ip!, {r0, r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     408:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     40c:	006d6278 	rsbeq	r6, sp, r8, ror r2
     410:	66000001 	strvs	r0, [r0], -r1
     414:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
     418:	6172675f 	cmnvs	r2, pc, asr r7
     41c:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     420:	0001006d 	andeq	r0, r1, sp, rrx
     424:	72696600 	rsbvc	r6, r9, #0, 12
     428:	6c5f3465 	cfldrdvs	mvd3, [pc], {101}	; 0x65
     42c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     430:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     434:	00000100 	andeq	r0, r0, r0, lsl #2
     438:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     43c:	72675f35 	rsbvc	r5, r7, #53, 30	; 0xd4
     440:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     444:	01006d62 	tsteq	r0, r2, ror #26
     448:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     44c:	5f356572 	svcpl	0x00356572
     450:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     454:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     458:	0001006d 	andeq	r0, r1, sp, rrx
     45c:	05000000 	streq	r0, [r0, #-0]
     460:	000cd402 	andeq	sp, ip, r2, lsl #8
     464:	01300320 	teqeq	r0, r0, lsr #6
     468:	3e672f3d 	mcrcc	15, 3, r2, cr7, cr13, {1}
     46c:	2f3e672f 	svccs	0x003e672f
     470:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     474:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     478:	2f3e672f 	svccs	0x003e672f
     47c:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     480:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     484:	2f3e672f 	svccs	0x003e672f
     488:	46023d67 	strmi	r3, [r2], -r7, ror #26
     48c:	2f4b4c14 	svccs	0x004b4c14
     490:	59594b3e 	ldmdbpl	r9, {r1, r2, r3, r4, r5, r8, r9, fp, lr}^
     494:	91915a59 	orrsls	r5, r1, r9, asr sl
     498:	3e939191 	mrccc	1, 4, r9, cr3, cr1, {4}
     49c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     4a0:	01003102 	tsteq	r0, r2, lsl #2
     4a4:	00009d01 	andeq	r9, r0, r1, lsl #26
     4a8:	6c000200 	sfmvs	f0, 4, [r0], {-0}
     4ac:	02000000 	andeq	r0, r0, #0
     4b0:	0d0efb01 	vstreq	d15, [lr, #-4]
     4b4:	01010100 	mrseq	r0, (UNDEF: 17)
     4b8:	00000001 	andeq	r0, r0, r1
     4bc:	01000001 	tsteq	r0, r1
     4c0:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     4c4:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     4c8:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     4cc:	6f62616c 	svcvs	0x0062616c
     4d0:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     4d4:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     4d8:	5049442f 	subpl	r4, r9, pc, lsr #8
     4dc:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     4e0:	2f686374 	svccs	0x00686374
     4e4:	70000043 	andvc	r0, r0, r3, asr #32
     4e8:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
     4ec:	00632e72 	rsbeq	r2, r3, r2, ror lr
     4f0:	73000001 	movwvc	r0, #1
     4f4:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
     4f8:	00682e65 	rsbeq	r2, r8, r5, ror #28
     4fc:	69000001 	stmdbvs	r0, {r0}
     500:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     504:	0100682e 	tsteq	r0, lr, lsr #16
     508:	61670000 	cmnvs	r7, r0
     50c:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
     510:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     514:	0100682e 	tsteq	r0, lr, lsr #16
     518:	00000000 	andeq	r0, r0, r0
     51c:	0f7c0205 	svceq	0x007c0205
     520:	4b172000 	blmi	5c8528 <startup-0x1fa37ad8>
     524:	cf3d6759 	svcgt	0x003d6759
     528:	01040200 	mrseq	r0, R12_usr
     52c:	59064a06 	stmdbpl	r6, {r1, r2, r9, fp, lr}
     530:	0402005b 	streq	r0, [r2], #-91	; 0xffffffa5
     534:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
     538:	4b765b59 	blmi	1d972a4 <startup-0x1e268d5c>
     53c:	675b4b68 	ldrbvs	r4, [fp, -r8, ror #22]
     540:	000b0268 	andeq	r0, fp, r8, ror #4
     544:	01dd0101 	bicseq	r0, sp, r1, lsl #2
     548:	00020000 	andeq	r0, r2, r0
     54c:	00000182 	andeq	r0, r0, r2, lsl #3
     550:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     554:	0101000d 	tsteq	r1, sp
     558:	00000101 	andeq	r0, r0, r1, lsl #2
     55c:	00000100 	andeq	r0, r0, r0, lsl #2
     560:	2f3a4301 	svccs	0x003a4301
     564:	2f706f6d 	svccs	0x00706f6d
     568:	6f4d2f63 	svcvs	0x004d2f63
     56c:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     570:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     574:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     578:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     57c:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     580:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     584:	0000432f 	andeq	r4, r0, pc, lsr #6
     588:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     58c:	0100632e 	tsteq	r0, lr, lsr #6
     590:	70730000 	rsbsvc	r0, r3, r0
     594:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     598:	0100682e 	tsteq	r0, lr, lsr #16
     59c:	6d690000 	stclvs	0, cr0, [r9, #-0]
     5a0:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
     5a4:	00010068 	andeq	r0, r1, r8, rrx
     5a8:	6d616700 	stclvs	7, cr6, [r1, #-0]
     5ac:	6a626f65 	bvs	189c348 <startup-0x1e763cb8>
     5b0:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
     5b4:	00010068 	andeq	r0, r1, r8, rrx
     5b8:	72696200 	rsbvc	r6, r9, #0, 4
     5bc:	625f3164 	subsvs	r3, pc, #100, 2
     5c0:	6b63616c 	blvs	18d8b78 <startup-0x1e727488>
     5c4:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     5c8:	00000100 	andeq	r0, r0, r0, lsl #2
     5cc:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     5d0:	72675f31 	rsbvc	r5, r7, #49, 30	; 0xc4
     5d4:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     5d8:	01006d62 	tsteq	r0, r2, ror #26
     5dc:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     5e0:	5f316472 	svcpl	0x00316472
     5e4:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     5e8:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     5ec:	0001006d 	andeq	r0, r1, sp, rrx
     5f0:	72696200 	rsbvc	r6, r9, #0, 4
     5f4:	625f3264 	subsvs	r3, pc, #100, 4	; 0x40000006
     5f8:	6b63616c 	blvs	18d8bb0 <startup-0x1e727450>
     5fc:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     600:	00000100 	andeq	r0, r0, r0, lsl #2
     604:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     608:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
     60c:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     610:	01006d62 	tsteq	r0, r2, ror #26
     614:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     618:	5f326472 	svcpl	0x00326472
     61c:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     620:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     624:	0001006d 	andeq	r0, r1, sp, rrx
     628:	72696200 	rsbvc	r6, r9, #0, 4
     62c:	625f3364 	subsvs	r3, pc, #100, 6	; 0x90000001
     630:	6b63616c 	blvs	18d8be8 <startup-0x1e727418>
     634:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     638:	00000100 	andeq	r0, r0, r0, lsl #2
     63c:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     640:	72675f33 	rsbvc	r5, r7, #51, 30	; 0xcc
     644:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     648:	01006d62 	tsteq	r0, r2, ror #26
     64c:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     650:	5f336472 	svcpl	0x00336472
     654:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     658:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     65c:	0001006d 	andeq	r0, r1, sp, rrx
     660:	72696200 	rsbvc	r6, r9, #0, 4
     664:	625f3464 	subsvs	r3, pc, #100, 8	; 0x64000000
     668:	6b63616c 	blvs	18d8c20 <startup-0x1e7273e0>
     66c:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     670:	00000100 	andeq	r0, r0, r0, lsl #2
     674:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     678:	72675f34 	rsbvc	r5, r7, #52, 30	; 0xd0
     67c:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     680:	01006d62 	tsteq	r0, r2, ror #26
     684:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     688:	5f346472 	svcpl	0x00346472
     68c:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     690:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     694:	0001006d 	andeq	r0, r1, sp, rrx
     698:	72696200 	rsbvc	r6, r9, #0, 4
     69c:	625f3564 	subsvs	r3, pc, #100, 10	; 0x19000000
     6a0:	6b63616c 	blvs	18d8c58 <startup-0x1e7273a8>
     6a4:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     6a8:	00000100 	andeq	r0, r0, r0, lsl #2
     6ac:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     6b0:	72675f35 	rsbvc	r5, r7, #53, 30	; 0xd4
     6b4:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     6b8:	01006d62 	tsteq	r0, r2, ror #26
     6bc:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     6c0:	5f356472 	svcpl	0x00356472
     6c4:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     6c8:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     6cc:	0001006d 	andeq	r0, r1, sp, rrx
     6d0:	05000000 	streq	r0, [r0, #-0]
     6d4:	00105402 	andseq	r5, r0, r2, lsl #8
     6d8:	013f0320 	teqeq	pc, r0, lsr #6
     6dc:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     6e0:	2f3d672f 	svccs	0x003d672f
     6e4:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     6e8:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     6ec:	2f3f672f 	svccs	0x003f672f
     6f0:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     6f4:	3e672f3d 	mcrcc	15, 3, r2, cr7, cr13, {1}
     6f8:	2f3d672f 	svccs	0x003d672f
     6fc:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     700:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     704:	2f3d672f 	svccs	0x003d672f
     708:	5e023d67 	cdppl	13, 0, cr3, cr2, cr7, {3}
     70c:	2f4b4c14 	svccs	0x004b4c14
     710:	59594b3e 	ldmdbpl	r9, {r1, r2, r3, r4, r5, r8, r9, fp, lr}^
     714:	915c5959 	cmpls	ip, r9, asr r9
     718:	93919191 	orrsls	r9, r1, #1073741860	; 0x40000024
     71c:	3d3d3e94 	ldccc	14, cr3, [sp, #-592]!	; 0xfffffdb0
     720:	3d023d3d 	stccc	13, cr3, [r2, #-244]	; 0xffffff0c
     724:	61010100 	mrsvs	r0, (UNDEF: 17)
     728:	02000001 	andeq	r0, r0, #1
     72c:	00011c00 	andeq	r1, r1, r0, lsl #24
     730:	fb010200 	blx	40f3a <startup-0x1ffbf0c6>
     734:	01000d0e 	tsteq	r0, lr, lsl #26
     738:	00010101 	andeq	r0, r1, r1, lsl #2
     73c:	00010000 	andeq	r0, r1, r0
     740:	3a430100 	bcc	10c0b48 <startup-0x1ef3f4b8>
     744:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     748:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 694 <startup-0x1ffff96c>
     74c:	616c706f 	cmnvs	ip, pc, rrx
     750:	61726f62 	cmnvs	r2, r2, ror #30
     754:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     758:	442f7265 	strtmi	r7, [pc], #-613	; 760 <startup-0x1ffff8a0>
     75c:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     760:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     764:	00432f68 	subeq	r2, r3, r8, ror #30
     768:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     76c:	632e6863 			; <UNDEFINED> instruction: 0x632e6863
     770:	00000100 	andeq	r0, r0, r0, lsl #2
     774:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     778:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
     77c:	00000100 	andeq	r0, r0, r0, lsl #2
     780:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     784:	00682e65 	rsbeq	r2, r8, r5, ror #28
     788:	67000001 	strvs	r0, [r0, -r1]
     78c:	6f656d61 	svcvs	0x00656d61
     790:	63656a62 	cmnvs	r5, #401408	; 0x62000
     794:	00682e74 	rsbeq	r2, r8, r4, ror lr
     798:	77000001 	strvc	r0, [r0, -r1]
     79c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     7a0:	6c625f31 	stclvs	15, cr5, [r2], #-196	; 0xffffff3c
     7a4:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     7a8:	006d6278 	rsbeq	r6, sp, r8, ror r2
     7ac:	77000001 	strvc	r0, [r0, -r1]
     7b0:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     7b4:	72675f31 	rsbvc	r5, r7, #49, 30	; 0xc4
     7b8:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     7bc:	01006d62 	tsteq	r0, r2, ror #26
     7c0:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     7c4:	31686374 	smccc	34356	; 0x8634
     7c8:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     7cc:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     7d0:	01006d62 	tsteq	r0, r2, ror #26
     7d4:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     7d8:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     7dc:	616c625f 	cmnvs	ip, pc, asr r2
     7e0:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     7e4:	01006d62 	tsteq	r0, r2, ror #26
     7e8:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     7ec:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     7f0:	6172675f 	cmnvs	r2, pc, asr r7
     7f4:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     7f8:	0001006d 	andeq	r0, r1, sp, rrx
     7fc:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     800:	5f326863 	svcpl	0x00326863
     804:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     808:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     80c:	0001006d 	andeq	r0, r1, sp, rrx
     810:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     814:	5f336863 	svcpl	0x00336863
     818:	63616c62 	cmnvs	r1, #25088	; 0x6200
     81c:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     820:	0001006d 	andeq	r0, r1, sp, rrx
     824:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     828:	5f336863 	svcpl	0x00336863
     82c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     830:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     834:	00000100 	andeq	r0, r0, r0, lsl #2
     838:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     83c:	6c5f3368 	mrrcvs	3, 6, r3, pc, cr8	; <UNPREDICTABLE>
     840:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     844:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     848:	00000100 	andeq	r0, r0, r0, lsl #2
     84c:	02050000 	andeq	r0, r5, #0
     850:	200013b8 			; <UNDEFINED> instruction: 0x200013b8
     854:	3e012803 	cdpcc	8, 0, cr2, cr1, cr3, {0}
     858:	2f3d672f 	svccs	0x003d672f
     85c:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     860:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     864:	2f3d672f 	svccs	0x003d672f
     868:	672f3f67 	strvs	r3, [pc, -r7, ror #30]!
     86c:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     870:	023e672f 	eorseq	r6, lr, #12320768	; 0xbc0000
     874:	4b4c143a 	blmi	1305964 <startup-0x1ecfa69c>
     878:	594b3e2f 	stmdbpl	fp, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}^
     87c:	91915b59 	orrsls	r5, r1, r9, asr fp
     880:	3d3e9491 	cfldrscc	mvf9, [lr, #-580]!	; 0xfffffdbc
     884:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
     888:	01010029 	tsteq	r1, r9, lsr #32
     88c:	0000034e 	andeq	r0, r0, lr, asr #6
     890:	007c0002 	rsbseq	r0, ip, r2
     894:	01020000 	mrseq	r0, (UNDEF: 2)
     898:	000d0efb 	strdeq	r0, [sp], -fp
     89c:	01010101 	tsteq	r1, r1, lsl #2
     8a0:	01000000 	mrseq	r0, (UNDEF: 0)
     8a4:	43010000 	movwmi	r0, #4096	; 0x1000
     8a8:	6f6d2f3a 	svcvs	0x006d2f3a
     8ac:	2f632f70 	svccs	0x00632f70
     8b0:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     8b4:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     8b8:	6f697461 	svcvs	0x00697461
     8bc:	2f72656e 	svccs	0x0072656e
     8c0:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     8c4:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     8c8:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     8cc:	72670000 	rsbvc	r0, r7, #0
     8d0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
     8d4:	632e7363 			; <UNDEFINED> instruction: 0x632e7363
     8d8:	00000100 	andeq	r0, r0, r0, lsl #2
     8dc:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     8e0:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
     8e4:	00000100 	andeq	r0, r0, r0, lsl #2
     8e8:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     8ec:	00682e65 	rsbeq	r2, r8, r5, ror #28
     8f0:	67000001 	strvs	r0, [r0, -r1]
     8f4:	6f656d61 	svcvs	0x00656d61
     8f8:	63656a62 	cmnvs	r5, #401408	; 0x62000
     8fc:	00682e74 	rsbeq	r2, r8, r4, ror lr
     900:	67000001 	strvs	r0, [r0, -r1]
     904:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
     908:	2e736369 	cdpcs	3, 7, cr6, cr3, cr9, {3}
     90c:	00010068 	andeq	r0, r1, r8, rrx
     910:	05000000 	streq	r0, [r0, #-0]
     914:	0015f002 	andseq	pc, r5, r2
     918:	3d301520 	cfldr32cc	mvfx1, [r0, #-128]!	; 0xffffff80
     91c:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
     920:	06010402 	streq	r0, [r1], -r2, lsl #8
     924:	3d670620 	stclcc	6, cr0, [r7, #-128]!	; 0xffffff80
     928:	3d3d30a0 	ldccc	0, cr3, [sp, #-640]!	; 0xfffffd80
     92c:	02003d3d 	andeq	r3, r0, #3904	; 0xf40
     930:	20060104 	andcs	r0, r6, r4, lsl #2
     934:	a03d6706 	eorsge	r6, sp, r6, lsl #14
     938:	2f2f214b 	svccs	0x002f214b
     93c:	4c5e2a2f 	mrrcmi	10, 2, r2, lr, cr15
     940:	5b57214f 	blpl	15c8e84 <startup-0x1ea3717c>
     944:	4c4a0903 	mcrrmi	9, 0, r0, sl, cr3	; <UNPREDICTABLE>
     948:	03040200 	movweq	r0, #16896	; 0x4200
     94c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     950:	02005703 	andeq	r5, r0, #786432	; 0xc0000
     954:	3c060104 	stfccs	f0, [r6], {4}
     958:	2f674c06 	svccs	0x00674c06
     95c:	4b2f674b 	blmi	bda690 <startup-0x1f425970>
     960:	68a14b4b 	stmiavs	r1!, {r0, r1, r3, r6, r8, r9, fp, lr}
     964:	59839159 	stmibpl	r3, {r0, r3, r4, r6, r8, ip, pc}
     968:	d7596876 			; <UNDEFINED> instruction: 0xd7596876
     96c:	67675983 	strbvs	r5, [r7, -r3, lsl #19]!
     970:	03741203 	cmneq	r4, #805306368	; 0x30000000
     974:	1203206e 	andne	r2, r3, #110	; 0x6e
     978:	2070034a 	rsbscs	r0, r0, sl, asr #6
     97c:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
     980:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
     984:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
     988:	3d3d3e4c 	ldccc	14, cr3, [sp, #-304]!	; 0xfffffed0
     98c:	3d313d3d 	ldccc	13, cr3, [r1, #-244]!	; 0xffffff0c
     990:	313d752f 	teqcc	sp, pc, lsr #10
     994:	274a7903 	strbcs	r7, [sl, -r3, lsl #18]
     998:	67bc3d23 	ldrvs	r3, [ip, r3, lsr #26]!
     99c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     9a0:	2f3d2f59 	svccs	0x003d2f59
     9a4:	4b3e3d59 	blmi	f8ff10 <startup-0x1f0700f0>
     9a8:	3d4b303d 	stclcc	0, cr3, [fp, #-244]	; 0xffffff0c
     9ac:	67bc3d31 			; <UNDEFINED> instruction: 0x67bc3d31
     9b0:	915a5959 	cmpls	sl, r9, asr r9
     9b4:	3d2f594b 			; <UNDEFINED> instruction: 0x3d2f594b
     9b8:	3d593e2f 	ldclcc	14, cr3, [r9, #-188]	; 0xffffff44
     9bc:	313d5930 	teqcc	sp, r0, lsr r9
     9c0:	673d3d3d 			; <UNDEFINED> instruction: 0x673d3d3d
     9c4:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
     9c8:	914b833d 	cmpls	fp, sp, lsr r3
     9cc:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
     9d0:	3d2f4c83 	stccc	12, cr4, [pc, #-524]!	; 7cc <startup-0x1ffff834>
     9d4:	3d3d3d3e 	ldccc	13, cr3, [sp, #-248]!	; 0xffffff08
     9d8:	3e3d3d3e 	mrccc	13, 1, r3, cr13, cr14, {1}
     9dc:	4b4b4b4b 	blmi	12d3710 <startup-0x1ed2c8f0>
     9e0:	3e3d3d4b 	cdpcc	13, 3, cr3, cr13, cr11, {2}
     9e4:	004c9f4b 	subeq	r9, ip, fp, asr #30
     9e8:	4b030402 	blmi	c19f8 <startup-0x1ff3e608>
     9ec:	03040200 	movweq	r0, #16896	; 0x4200
     9f0:	04020049 	streq	r0, [r2], #-73	; 0xffffffb7
     9f4:	00580601 	subseq	r0, r8, r1, lsl #12
     9f8:	06020402 	streq	r0, [r2], -r2, lsl #8
     9fc:	04020046 	streq	r0, [r2], #-70	; 0xffffffba
     a00:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
     a04:	2f764d52 	svccs	0x00764d52
     a08:	01040200 	mrseq	r0, R12_usr
     a0c:	02004a06 	andeq	r4, r0, #24576	; 0x6000
     a10:	004a0204 	subeq	r0, sl, r4, lsl #4
     a14:	4a030402 	bmi	c1a24 <startup-0x1ff3e5dc>
     a18:	13084c06 	movwne	r4, #35846	; 0x8c06
     a1c:	bc3e3d3d 	ldclt	13, cr3, [lr], #-244	; 0xffffff0c
     a20:	3d76763d 	ldclcc	6, cr7, [r6, #-244]!	; 0xffffff0c
     a24:	23d71fd9 	bicscs	r1, r7, #868	; 0x364
     a28:	d71fd93d 			; <UNDEFINED> instruction: 0xd71fd93d
     a2c:	1fd93d23 	svcne	0x00d93d23
     a30:	2e6103d7 	mcrcs	3, 3, r0, cr1, cr7, {6}
     a34:	af202303 	svcge	0x00202303
     a38:	04020069 	streq	r0, [r2], #-105	; 0xffffff97
     a3c:	004a0601 	subeq	r0, sl, r1, lsl #12
     a40:	4a020402 	bmi	81a50 <startup-0x1ff7e5b0>
     a44:	03040200 	movweq	r0, #16896	; 0x4200
     a48:	754b064a 	strbvc	r0, [fp, #-1610]	; 0xfffff9b6
     a4c:	59591308 	ldmdbpl	r9, {r3, r8, r9, ip}^
     a50:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
     a54:	763d5b59 			; <UNDEFINED> instruction: 0x763d5b59
     a58:	4b4c4b3d 	blmi	1313754 <startup-0x1ecec8ac>
     a5c:	9fd8c93e 	svcls	0x00d8c93e
     a60:	a0ae3dca 	adcge	r3, lr, sl, asr #27
     a64:	03ac5e03 			; <UNDEFINED> instruction: 0x03ac5e03
     a68:	4c842023 	stcmi	0, cr2, [r4], {35}	; 0x23
     a6c:	0200592f 	andeq	r5, r0, #770048	; 0xbc000
     a70:	58060104 	stmdapl	r6, {r2, r8}
     a74:	02040200 	andeq	r0, r4, #0, 4
     a78:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
     a7c:	02002004 	andeq	r2, r0, #4
     a80:	3d060404 	cfstrscc	mvf0, [r6, #-16]
     a84:	0075d759 	rsbseq	sp, r5, r9, asr r7
     a88:	59030402 	stmdbpl	r3, {r1, sl}
     a8c:	03040200 	movweq	r0, #16896	; 0x4200
     a90:	040200ab 	streq	r0, [r2], #-171	; 0xffffff55
     a94:	009e0601 	addseq	r0, lr, r1, lsl #12
     a98:	06020402 	streq	r0, [r2], -r2, lsl #8
     a9c:	04020055 	streq	r0, [r2], #-85	; 0xffffffab
     aa0:	00740601 	rsbseq	r0, r4, r1, lsl #12
     aa4:	06020402 	streq	r0, [r2], -r2, lsl #8
     aa8:	04020056 	streq	r0, [r2], #-86	; 0xffffffaa
     aac:	06740601 	ldrbteq	r0, [r4], -r1, lsl #12
     ab0:	52580a03 	subspl	r0, r8, #12288	; 0x3000
     ab4:	595a5976 	ldmdbpl	sl, {r1, r2, r4, r5, r6, r8, fp, ip, lr}^
     ab8:	3dbb3d3d 	ldccc	13, cr3, [fp, #244]!	; 0xf4
     abc:	083de691 	ldmdaeq	sp!, {r0, r4, r7, r9, sl, sp, lr, pc}
     ac0:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
     ac4:	087a0302 	ldmdaeq	sl!, {r1, r8, r9}^
     ac8:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
     acc:	003c0601 	eorseq	r0, ip, r1, lsl #12
     ad0:	06020402 	streq	r0, [r2], -r2, lsl #8
     ad4:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
     ad8:	003c0601 	eorseq	r0, ip, r1, lsl #12
     adc:	06020402 	streq	r0, [r2], -r2, lsl #8
     ae0:	04020049 	streq	r0, [r2], #-73	; 0xffffffb7
     ae4:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     ae8:	4c580e03 	mrrcmi	14, 0, r0, r8, cr3
     aec:	02003d77 	andeq	r3, r0, #7616	; 0x1dc0
     af0:	003d0304 	eorseq	r0, sp, r4, lsl #6
     af4:	65030402 	strvs	r0, [r3, #-1026]	; 0xfffffbfe
     af8:	01040200 	mrseq	r0, R12_usr
     afc:	02003c06 	andeq	r3, r0, #1536	; 0x600
     b00:	65060204 	strvs	r0, [r6, #-516]	; 0xfffffdfc
     b04:	01040200 	mrseq	r0, R12_usr
     b08:	6b063c06 	blvs	18fb28 <startup-0x1fe704d8>
     b0c:	003d774c 	eorseq	r7, sp, ip, asr #14
     b10:	3d030402 	cfstrscc	mvf0, [r3, #-8]
     b14:	03040200 	movweq	r0, #16896	; 0x4200
     b18:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
     b1c:	003c0601 	eorseq	r0, ip, r1, lsl #12
     b20:	06020402 	streq	r0, [r2], -r2, lsl #8
     b24:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
     b28:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     b2c:	2f3d4d6b 	svccs	0x003d4d6b
     b30:	30302f2f 	eorscc	r2, r0, pc, lsr #30
     b34:	04020069 	streq	r0, [r2], #-105	; 0xffffff97
     b38:	02003001 	andeq	r3, r0, #1
     b3c:	002f0104 	eoreq	r0, pc, r4, lsl #2
     b40:	67010402 	strvs	r0, [r1, -r2, lsl #8]
     b44:	01040200 	mrseq	r0, R12_usr
     b48:	040200c9 	streq	r0, [r2], #-201	; 0xffffff37
     b4c:	00130801 	andseq	r0, r3, r1, lsl #16
     b50:	4b010402 	blmi	41b60 <startup-0x1ffbe4a0>
     b54:	01040200 	mrseq	r0, R12_usr
     b58:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
     b5c:	02006801 	andeq	r6, r0, #65536	; 0x10000
     b60:	00c90104 	sbceq	r0, r9, r4, lsl #2
     b64:	08010402 	stmdaeq	r1, {r1, sl}
     b68:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
     b6c:	02009201 	andeq	r9, r0, #268435456	; 0x10000000
     b70:	004b0104 	subeq	r0, fp, r4, lsl #2
     b74:	3e010402 	cdpcc	4, 0, cr0, cr1, cr2, {0}
     b78:	01040200 	mrseq	r0, R12_usr
     b7c:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
     b80:	02006701 	andeq	r6, r0, #262144	; 0x40000
     b84:	13080104 	movwne	r0, #33028	; 0x8104
     b88:	01040200 	mrseq	r0, R12_usr
     b8c:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
     b90:	3c6c0301 	stclcc	3, cr0, [ip], #-4
     b94:	3e3c1903 	vaddcc.f16	s2, s24, s6	; <UNPREDICTABLE>
     b98:	03040200 	movweq	r0, #16896	; 0x4200
     b9c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     ba0:	00910803 	addseq	r0, r1, r3, lsl #16
     ba4:	08030402 	stmdaeq	r3, {r1, sl}
     ba8:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
     bac:	00910803 	addseq	r0, r1, r3, lsl #16
     bb0:	08030402 	stmdaeq	r3, {r1, sl}
     bb4:	04020046 	streq	r0, [r2], #-70	; 0xffffffba
     bb8:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     bbc:	4b3e0850 	blmi	f82d04 <startup-0x1f07d2fc>
     bc0:	0821083d 	stmdaeq	r1!, {r0, r2, r3, r4, r5, fp}
     bc4:	4d210821 	stcmi	8, cr0, [r1, #-132]!	; 0xffffff7c
     bc8:	4b21304b 	blmi	84ccfc <startup-0x1f7b3304>
     bcc:	4b3e4b3e 	blmi	f938cc <startup-0x1f06c734>
     bd0:	75034b3e 	strvc	r4, [r3, #-2878]	; 0xfffff4c2
     bd4:	580e033c 	stmdapl	lr, {r2, r3, r4, r5, r8, r9}
     bd8:	000b0230 	andeq	r0, fp, r0, lsr r2
     bdc:	00720101 	rsbseq	r0, r2, r1, lsl #2
     be0:	00020000 	andeq	r0, r2, r0
     be4:	0000005b 	andeq	r0, r0, fp, asr r0
     be8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     bec:	0101000d 	tsteq	r1, sp
     bf0:	00000101 	andeq	r0, r0, r1, lsl #2
     bf4:	00000100 	andeq	r0, r0, r0, lsl #2
     bf8:	2f3a4301 	svccs	0x003a4301
     bfc:	2f706f6d 	svccs	0x00706f6d
     c00:	6f4d2f63 	svcvs	0x004d2f63
     c04:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     c08:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     c0c:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     c10:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     c14:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     c18:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     c1c:	0000432f 	andeq	r4, r0, pc, lsr #6
     c20:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     c24:	00632e65 	rsbeq	r2, r3, r5, ror #28
     c28:	73000001 	movwvc	r0, #1
     c2c:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
     c30:	00682e65 	rsbeq	r2, r8, r5, ror #28
     c34:	69000001 	stmdbvs	r0, {r0}
     c38:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     c3c:	0100682e 	tsteq	r0, lr, lsr #16
     c40:	00000000 	andeq	r0, r0, r0
     c44:	24340205 	ldrtcs	r0, [r4], #-517	; 0xfffffdfb
     c48:	75142000 	ldrvc	r2, [r4, #-0]
     c4c:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
     c50:	01010004 	tsteq	r1, r4
     c54:	00000068 	andeq	r0, r0, r8, rrx
     c58:	00510002 	subseq	r0, r1, r2
     c5c:	01020000 	mrseq	r0, (UNDEF: 2)
     c60:	000d0efb 	strdeq	r0, [sp], -fp
     c64:	01010101 	tsteq	r1, r1, lsl #2
     c68:	01000000 	mrseq	r0, (UNDEF: 0)
     c6c:	43010000 	movwmi	r0, #4096	; 0x1000
     c70:	6f6d2f3a 	svcvs	0x006d2f3a
     c74:	2f632f70 	svccs	0x00632f70
     c78:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     c7c:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     c80:	6f697461 	svcvs	0x00697461
     c84:	2f72656e 	svccs	0x0072656e
     c88:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     c8c:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     c90:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     c94:	70730000 	rsbsvc	r0, r3, r0
     c98:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     c9c:	0100632e 	tsteq	r0, lr, lsr #6
     ca0:	70730000 	rsbsvc	r0, r3, r0
     ca4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     ca8:	0100682e 	tsteq	r0, lr, lsr #16
     cac:	00000000 	andeq	r0, r0, r0
     cb0:	245c0205 	ldrbcs	r0, [ip], #-517	; 0xfffffdfb
     cb4:	75152000 	ldrvc	r2, [r5, #-0]
     cb8:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
     cbc:	01010004 	tsteq	r1, r4
     cc0:	0000006b 	andeq	r0, r0, fp, rrx
     cc4:	004d0002 	subeq	r0, sp, r2
     cc8:	01020000 	mrseq	r0, (UNDEF: 2)
     ccc:	000d0efb 	strdeq	r0, [sp], -fp
     cd0:	01010101 	tsteq	r1, r1, lsl #2
     cd4:	01000000 	mrseq	r0, (UNDEF: 0)
     cd8:	43010000 	movwmi	r0, #4096	; 0x1000
     cdc:	6f6d2f3a 	svcvs	0x006d2f3a
     ce0:	2f632f70 	svccs	0x00632f70
     ce4:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     ce8:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     cec:	6f697461 	svcvs	0x00697461
     cf0:	2f72656e 	svccs	0x0072656e
     cf4:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     cf8:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     cfc:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     d00:	70670000 	rsbvc	r0, r7, r0
     d04:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
     d08:	00000100 	andeq	r0, r0, r0, lsl #2
     d0c:	6f697067 	svcvs	0x00697067
     d10:	0100682e 	tsteq	r0, lr, lsr #16
     d14:	00000000 	andeq	r0, r0, r0
     d18:	24840205 	strcs	r0, [r4], #517	; 0x205
     d1c:	2f152000 	svccs	0x00152000
     d20:	3d2f763d 	stccc	6, cr7, [pc, #-244]!	; c34 <startup-0x1ffff3cc>
     d24:	91674b5b 	cmnls	r7, fp, asr fp
     d28:	04022230 	streq	r2, [r2], #-560	; 0xfffffdd0
     d2c:	5a010100 	bpl	41134 <startup-0x1ffbeecc>
     d30:	02000001 	andeq	r0, r0, #1
     d34:	00008100 	andeq	r8, r0, r0, lsl #2
     d38:	fb010200 	blx	41542 <startup-0x1ffbeabe>
     d3c:	01000d0e 	tsteq	r0, lr, lsl #26
     d40:	00010101 	andeq	r0, r1, r1, lsl #2
     d44:	00010000 	andeq	r0, r1, r0
     d48:	3a430100 	bcc	10c1150 <startup-0x1ef3eeb0>
     d4c:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     d50:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; c9c <startup-0x1ffff364>
     d54:	616c706f 	cmnvs	ip, pc, rrx
     d58:	61726f62 	cmnvs	r2, r2, ror #30
     d5c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     d60:	442f7265 	strtmi	r7, [pc], #-613	; d68 <startup-0x1ffff298>
     d64:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     d68:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     d6c:	00432f68 	subeq	r2, r3, r8, ror #30
     d70:	63736100 	cmnvs	r3, #0, 2
     d74:	645f6969 	ldrbvs	r6, [pc], #-2409	; d7c <startup-0x1ffff284>
     d78:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
     d7c:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
     d80:	00000100 	andeq	r0, r0, r0, lsl #2
     d84:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     d88:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
     d8c:	00000100 	andeq	r0, r0, r0, lsl #2
     d90:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     d94:	00682e65 	rsbeq	r2, r8, r5, ror #28
     d98:	67000001 	strvs	r0, [r0, -r1]
     d9c:	6f656d61 	svcvs	0x00656d61
     da0:	63656a62 	cmnvs	r5, #401408	; 0x62000
     da4:	00682e74 	rsbeq	r2, r8, r4, ror lr
     da8:	67000001 	strvs	r0, [r0, -r1]
     dac:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
     db0:	2e736369 	cdpcs	3, 7, cr6, cr3, cr9, {3}
     db4:	00010068 	andeq	r0, r1, r8, rrx
     db8:	05000000 	streq	r0, [r0, #-0]
     dbc:	0024e402 	eoreq	lr, r4, r2, lsl #8
     dc0:	012e0320 			; <UNDEFINED> instruction: 0x012e0320
     dc4:	59bb5969 	ldmibpl	fp!, {r0, r3, r5, r6, r8, fp, ip, lr}
     dc8:	08596968 	ldmdaeq	r9, {r3, r5, r6, r8, fp, sp, lr}^
     dcc:	67765913 			; <UNDEFINED> instruction: 0x67765913
     dd0:	4c593d3d 	mrrcmi	13, 3, r3, r9, cr13
     dd4:	593d3d67 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}
     dd8:	3d673e4c 	stclcc	14, cr3, [r7, #-304]!	; 0xfffffed0
     ddc:	67675a3d 			; <UNDEFINED> instruction: 0x67675a3d
     de0:	673e842f 	ldrvs	r8, [lr, -pc, lsr #8]!
     de4:	675a3d3d 	smmlarvs	sl, sp, sp, r3
     de8:	67842f67 	strvs	r2, [r4, r7, ror #30]
     dec:	3d2f4b3d 	fstmdbxcc	pc!, {d4-d33}	;@ Deprecated
     df0:	2f3d3e68 	svccs	0x003d3e68
     df4:	2f3d4b2f 	svccs	0x003d4b2f
     df8:	02006776 	andeq	r6, r0, #30932992	; 0x1d80000
     dfc:	20060104 	andcs	r0, r6, r4, lsl #2
     e00:	593d8306 	ldmdbpl	sp!, {r1, r2, r8, r9, pc}
     e04:	67914c3d 			; <UNDEFINED> instruction: 0x67914c3d
     e08:	4c9f764b 	ldcmi	6, cr7, [pc], {75}	; 0x4b
     e0c:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
     e10:	06200601 	strteq	r0, [r0], -r1, lsl #12
     e14:	3f3d3d83 	svccc	0x003d3d83
     e18:	01040200 	mrseq	r0, R12_usr
     e1c:	83062006 	movwhi	r2, #24582	; 0x6006
     e20:	003f3d3d 	eorseq	r3, pc, sp, lsr sp	; <UNPREDICTABLE>
     e24:	06010402 	streq	r0, [r1], -r2, lsl #8
     e28:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
     e2c:	02003f3d 	andeq	r3, r0, #61, 30	; 0xf4
     e30:	20060104 	andcs	r0, r6, r4, lsl #2
     e34:	3d3d8306 	ldccc	3, cr8, [sp, #-24]!	; 0xffffffe8
     e38:	3d343e3f 	ldccc	14, cr3, [r4, #-252]!	; 0xffffff04
     e3c:	2f2f2f84 	svccs	0x002f2f84
     e40:	2f843e3e 	svccs	0x00843e3e
     e44:	4d73214b 	ldfmie	f2, [r3, #-300]!	; 0xfffffed4
     e48:	73214b2f 			; <UNDEFINED> instruction: 0x73214b2f
     e4c:	3059684d 	subscc	r6, r9, sp, asr #16
     e50:	4d73214b 	ldfmie	f2, [r3, #-300]!	; 0xfffffed4
     e54:	4e73214b 	rpwmism	f2, f3, #3.0
     e58:	30754c4b 	rsbscc	r4, r5, fp, asr #24
     e5c:	213d2f4b 	teqcs	sp, fp, asr #30
     e60:	04020073 	streq	r0, [r2], #-115	; 0xffffff8d
     e64:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
     e68:	3d2f4b6b 	fstmdbxcc	pc!, {d4-d56}	;@ Deprecated
     e6c:	02007321 	andeq	r7, r0, #-2080374784	; 0x84000000
     e70:	4a060104 	bmi	181288 <startup-0x1fe7ed78>
     e74:	4e4b6b06 	vmlami.f64	d22, d11, d6
     e78:	2f68753e 	svccs	0x0068753e
     e7c:	213d4b2f 	teqcs	sp, pc, lsr #22
     e80:	2f4b4d73 	svccs	0x004b4d73
     e84:	214d7321 	cmpcs	sp, r1, lsr #6
     e88:	01000802 	tsteq	r0, r2, lsl #16
     e8c:	00007601 	andeq	r7, r0, r1, lsl #12
     e90:	57000200 	strpl	r0, [r0, -r0, lsl #4]
     e94:	02000000 	andeq	r0, r0, #0
     e98:	0d0efb01 	vstreq	d15, [lr, #-4]
     e9c:	01010100 	mrseq	r0, (UNDEF: 17)
     ea0:	00000001 	andeq	r0, r0, r1
     ea4:	01000001 	tsteq	r0, r1
     ea8:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     eac:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     eb0:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     eb4:	6f62616c 	svcvs	0x0062616c
     eb8:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     ebc:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     ec0:	5049442f 	subpl	r4, r9, pc, lsr #8
     ec4:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     ec8:	2f686374 	svccs	0x00686374
     ecc:	73000043 	movwvc	r0, #67	; 0x43
     ed0:	5f776f6c 	svcpl	0x00776f6c
     ed4:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     ed8:	0100632e 	tsteq	r0, lr, lsr #6
     edc:	6c730000 	ldclvs	0, cr0, [r3], #-0
     ee0:	745f776f 	ldrbvc	r7, [pc], #-1903	; ee8 <startup-0x1ffff118>
     ee4:	2e747865 	cdpcs	8, 7, cr7, cr4, cr5, {3}
     ee8:	00010068 	andeq	r0, r1, r8, rrx
     eec:	05000000 	streq	r0, [r0, #-0]
     ef0:	002a0402 	eoreq	r0, sl, r2, lsl #8
     ef4:	9f591520 	svcls	0x00591520
     ef8:	4c5984c9 	cfldrdmi	mvd8, [r9], {201}	; 0xc9
     efc:	3d3d3d75 	ldccc	13, cr3, [sp, #-468]!	; 0xfffffe2c
     f00:	07023d3d 	smladxeq	r2, sp, sp, r3
     f04:	d6010100 	strle	r0, [r1], -r0, lsl #2
     f08:	02000000 	andeq	r0, r0, #0
     f0c:	0000ab00 	andeq	sl, r0, r0, lsl #22
     f10:	fb010200 	blx	4171a <startup-0x1ffbe8e6>
     f14:	01000d0e 	tsteq	r0, lr, lsl #26
     f18:	00010101 	andeq	r0, r1, r1, lsl #2
     f1c:	00010000 	andeq	r0, r1, r0
     f20:	3a430100 	bcc	10c1328 <startup-0x1ef3ecd8>
     f24:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     f28:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; e74 <startup-0x1ffff18c>
     f2c:	616c706f 	cmnvs	ip, pc, rrx
     f30:	61726f62 	cmnvs	r2, r2, ror #30
     f34:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     f38:	442f7265 	strtmi	r7, [pc], #-613	; f40 <startup-0x1ffff0c0>
     f3c:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     f40:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     f44:	00432f68 	subeq	r2, r3, r8, ror #30
     f48:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
     f4c:	73726f6f 	cmnvc	r2, #444	; 0x1bc
     f50:	0100632e 	tsteq	r0, lr, lsr #6
     f54:	70730000 	rsbsvc	r0, r3, r0
     f58:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     f5c:	0100682e 	tsteq	r0, lr, lsr #16
     f60:	6d690000 	stclvs	0, cr0, [r9, #-0]
     f64:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
     f68:	00010068 	andeq	r0, r1, r8, rrx
     f6c:	6d616700 	stclvs	7, cr6, [r1, #-0]
     f70:	6a626f65 	bvs	189cd0c <startup-0x1e7632f4>
     f74:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
     f78:	00010068 	andeq	r0, r1, r8, rrx
     f7c:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
     f80:	73726f6f 	cmnvc	r2, #444	; 0x1bc
     f84:	616c625f 	cmnvs	ip, pc, asr r2
     f88:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     f8c:	01006d62 	tsteq	r0, r2, ror #26
     f90:	6e690000 	cdpvs	0, 6, cr0, cr9, cr0, {0}
     f94:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     f98:	72675f73 	rsbvc	r5, r7, #460	; 0x1cc
     f9c:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     fa0:	01006d62 	tsteq	r0, r2, ror #26
     fa4:	6e690000 	cdpvs	0, 6, cr0, cr9, cr0, {0}
     fa8:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     fac:	696c5f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     fb0:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     fb4:	006d6278 	rsbeq	r6, sp, r8, ror r2
     fb8:	00000001 	andeq	r0, r0, r1
     fbc:	98020500 	stmdals	r2, {r8, sl}
     fc0:	0320002a 			; <UNDEFINED> instruction: 0x0320002a
     fc4:	2f3e0113 	svccs	0x003e0113
     fc8:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     fcc:	3e672f3d 	mcrcc	15, 3, r2, cr7, cr13, {1}
     fd0:	4b4c5a08 	blmi	13177f8 <startup-0x1ece8808>
     fd4:	934c3e2f 	movtls	r3, #52783	; 0xce2f
     fd8:	3d3d3d3e 	ldccc	13, cr3, [sp, #-248]!	; 0xffffff08
     fdc:	0100083d 	tsteq	r0, sp, lsr r8
     fe0:	0000da01 	andeq	sp, r0, r1, lsl #20
     fe4:	af000200 	svcge	0x00000200
     fe8:	02000000 	andeq	r0, r0, #0
     fec:	0d0efb01 	vstreq	d15, [lr, #-4]
     ff0:	01010100 	mrseq	r0, (UNDEF: 17)
     ff4:	00000001 	andeq	r0, r0, r1
     ff8:	01000001 	tsteq	r0, r1
     ffc:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    1000:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    1004:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    1008:	6f62616c 	svcvs	0x0062616c
    100c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1010:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    1014:	5049442f 	subpl	r4, r9, pc, lsr #8
    1018:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    101c:	2f686374 	svccs	0x00686374
    1020:	69000043 	stmdbvs	r0, {r0, r1, r6}
    1024:	6f6f646e 	svcvs	0x006f646e
    1028:	2e327372 	mrccs	3, 1, r7, cr2, cr2, {3}
    102c:	00010063 	andeq	r0, r1, r3, rrx
    1030:	72707300 	rsbsvc	r7, r0, #0, 6
    1034:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
    1038:	00010068 	andeq	r0, r1, r8, rrx
    103c:	616d6900 	cmnvs	sp, r0, lsl #18
    1040:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
    1044:	00000100 	andeq	r0, r0, r0, lsl #2
    1048:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
    104c:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
    1050:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
    1054:	00000100 	andeq	r0, r0, r0, lsl #2
    1058:	6f646e69 	svcvs	0x00646e69
    105c:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1060:	616c625f 	cmnvs	ip, pc, asr r2
    1064:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    1068:	01006d62 	tsteq	r0, r2, ror #26
    106c:	6e690000 	cdpvs	0, 6, cr0, cr9, cr0, {0}
    1070:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1074:	675f3273 			; <UNDEFINED> instruction: 0x675f3273
    1078:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
    107c:	006d6278 	rsbeq	r6, sp, r8, ror r2
    1080:	69000001 	stmdbvs	r0, {r0}
    1084:	6f6f646e 	svcvs	0x006f646e
    1088:	5f327372 	svcpl	0x00327372
    108c:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    1090:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
    1094:	0001006d 	andeq	r0, r1, sp, rrx
    1098:	05000000 	streq	r0, [r0, #-0]
    109c:	002b8002 	eoreq	r8, fp, r2
    10a0:	01130320 	tsteq	r3, r0, lsr #6
    10a4:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
    10a8:	2f3d672f 	svccs	0x003d672f
    10ac:	5a083e67 	bpl	210a50 <startup-0x1fdef5b0>
    10b0:	3e2f4b4c 	vnmulcc.f64	d4, d15, d12
    10b4:	3d3e934c 	ldccc	3, cr9, [lr, #-304]!	; 0xfffffed0
    10b8:	083d3d3d 	ldmdaeq	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
    10bc:	Address 0x000010bc is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
       4:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
       8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
       c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
      10:	696c0073 	stmdbvs	ip!, {r0, r1, r4, r5, r6}^
      14:	49746867 	ldmdbmi	r4!, {r0, r1, r2, r5, r6, fp, sp, lr}^
      18:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
      1c:	61726700 	cmnvs	r2, r0, lsl #14
      20:	616d4979 	smcvs	54425	; 0xd499
      24:	63006567 	movwvs	r6, #1383	; 0x567
      28:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
      2c:	72675f65 	rsbvc	r5, r7, #404	; 0x194
      30:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
      34:	00737469 	rsbseq	r7, r3, r9, ror #8
      38:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
      3c:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
      40:	5f747865 	svcpl	0x00747865
      44:	0061726b 	rsbeq	r7, r1, fp, ror #4
      48:	72665f6e 	rsbvc	r5, r6, #440	; 0x1b8
      4c:	73656d61 	cmnvc	r5, #6208	; 0x1840
      50:	73616300 	cmnvc	r1, #0, 6
      54:	4c656c74 	stclmi	12, cr6, [r5], #-464	; 0xfffffe30
      58:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
      5c:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
      60:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
      64:	74003031 	strvc	r3, [r0], #-49	; 0xffffffcf
      68:	43706d65 	cmnmi	r0, #6464	; 0x1940
      6c:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
      70:	616c4265 	cmnvs	ip, r5, ror #4
      74:	47006b63 	strmi	r6, [r0, -r3, ror #22]
      78:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
      7c:	36203939 			; <UNDEFINED> instruction: 0x36203939
      80:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
      84:	31303220 	teqcc	r0, r0, lsr #4
      88:	31323037 	teqcc	r2, r7, lsr r0
      8c:	72282035 	eorvc	r2, r8, #53	; 0x35
      90:	61656c65 	cmnvs	r5, r5, ror #24
      94:	20296573 	eorcs	r6, r9, r3, ror r5
      98:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
      9c:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
      a0:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
      a4:	2d362d64 	ldccs	13, cr2, [r6, #-400]!	; 0xfffffe70
      a8:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
      ac:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
      b0:	73697665 	cmnvc	r9, #105906176	; 0x6500000
      b4:	206e6f69 	rsbcs	r6, lr, r9, ror #30
      b8:	35353432 	ldrcc	r3, [r5, #-1074]!	; 0xfffffbce
      bc:	205d3231 	subscs	r3, sp, r1, lsr r2
      c0:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
      c4:	20626d75 	rsbcs	r6, r2, r5, ror sp
      c8:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
      cc:	613d6863 	teqvs	sp, r3, ror #16
      d0:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
      d4:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
      d8:	6f6c666d 	svcvs	0x006c666d
      dc:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
      e0:	733d6962 	teqvc	sp, #1605632	; 0x188000
      e4:	2074666f 	rsbscs	r6, r4, pc, ror #12
      e8:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
      ec:	20626d75 	rsbcs	r6, r2, r5, ror sp
      f0:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
      f4:	613d6863 	teqvs	sp, r3, ror #16
      f8:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
      fc:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
     100:	4f2d2067 	svcmi	0x002d2067
     104:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
     108:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
     10c:	6d003939 	vstrvs.16	s6, [r0, #-114]	; 0xffffff8e	; <UNPREDICTABLE>
     110:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     114:	63007265 	movwvs	r7, #613	; 0x265
     118:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
     11c:	6a624f65 	bvs	1893eb8 <startup-0x1e76c148>
     120:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     124:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     128:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
     12c:	00726574 	rsbseq	r6, r2, r4, ror r5
     130:	73657270 	cmnvc	r5, #112, 4
     134:	6c625f73 	stclvs	15, cr5, [r2], #-460	; 0xfffffe34
     138:	5f6b6361 	svcpl	0x006b6361
     13c:	73746962 	cmnvc	r4, #1605632	; 0x188000
     140:	73616300 	cmnvc	r1, #0, 6
     144:	49656c74 	stmdbmi	r5!, {r2, r4, r5, r6, sl, fp, sp, lr}^
     148:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     14c:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
     150:	49656c74 	stmdbmi	r5!, {r2, r4, r5, r6, sl, fp, sp, lr}^
     154:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     158:	61747300 	cmnvs	r4, r0, lsl #6
     15c:	70757472 	rsbsvc	r7, r5, r2, ror r4
     160:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     164:	6d003174 	stfvss	f3, [r0, #-464]	; 0xfffffe30
     168:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     16c:	694c7265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp, lr}^
     170:	00746867 	rsbseq	r6, r4, r7, ror #16
     174:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     178:	696c5f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     17c:	5f746867 	svcpl	0x00746867
     180:	73746962 	cmnvc	r4, #1605632	; 0x188000
     184:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     188:	6e6f4d70 	mcrvs	13, 3, r4, cr15, cr0, {3}
     18c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     190:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     194:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     198:	70003274 	andvc	r3, r0, r4, ror r2
     19c:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     1a0:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     1a4:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     1a8:	74003474 	strvc	r3, [r0], #-1140	; 0xfffffb8c
     1ac:	33747865 	cmncc	r4, #6619136	; 0x650000
     1b0:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     1b4:	66003574 			; <UNDEFINED> instruction: 0x66003574
     1b8:	31657269 	cmncc	r5, r9, ror #4
     1bc:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     1c0:	00674270 	rsbeq	r4, r7, r0, ror r2
     1c4:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     1c8:	69740038 	ldmdbvs	r4!, {r3, r4, r5}^
     1cc:	5f656c74 	svcpl	0x00656c74
     1d0:	63616c62 	cmnvs	r1, #25088	; 0x6200
     1d4:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     1d8:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     1dc:	4d706d65 	ldclmi	13, cr6, [r0, #-404]!	; 0xfffffe6c
     1e0:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     1e4:	694c7265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp, lr}^
     1e8:	00746867 	rsbseq	r6, r4, r7, ror #16
     1ec:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     1f0:	72640037 	rsbvc	r0, r4, #55	; 0x37
     1f4:	625f7761 	subsvs	r7, pc, #25427968	; 0x1840000
     1f8:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     1fc:	6c625f72 	stclvs	15, cr5, [r2], #-456	; 0xfffffe38
     200:	006b6361 	rsbeq	r6, fp, r1, ror #6
     204:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     208:	65740036 	ldrbvs	r0, [r4, #-54]!	; 0xffffffca
     20c:	00397478 	eorseq	r7, r9, r8, ror r4
     210:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
     214:	50726574 	rsbspl	r6, r2, r4, ror r5
     218:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     21c:	00327265 	eorseq	r7, r2, r5, ror #4
     220:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
     224:	50726574 	rsbspl	r6, r2, r4, ror r5
     228:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     22c:	00337265 	eorseq	r7, r3, r5, ror #4
     230:	32776f72 	rsbscc	r6, r7, #456	; 0x1c8
     234:	73696400 	cmnvc	r9, #0, 8
     238:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
     23c:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     240:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     244:	616c625f 	cmnvs	ip, pc, asr r2
     248:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
     24c:	00737469 	rsbseq	r7, r3, r9, ror #8
     250:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     254:	7070615f 	rsbsvc	r6, r0, pc, asr r1
     258:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     25c:	65745f67 	ldrbvs	r5, [r4, #-3943]!	; 0xfffff099
     260:	70007478 	andvc	r7, r0, r8, ror r4
     264:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     268:	006a624f 	rsbeq	r6, sl, pc, asr #4
     26c:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
     270:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     274:	5f726566 	svcpl	0x00726566
     278:	63616c62 	cmnvs	r1, #25088	; 0x6200
     27c:	72675f6b 	rsbvc	r5, r7, #428	; 0x1ac
     280:	6c5f7961 	mrrcvs	9, 6, r7, pc, cr1	; <UNPREDICTABLE>
     284:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     288:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     28c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     290:	6f700034 	svcvs	0x00700034
     294:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     298:	70003572 	andvc	r3, r0, r2, ror r5
     29c:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     2a0:	00367265 	eorseq	r7, r6, r5, ror #4
     2a4:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     2a8:	37726574 			; <UNDEFINED> instruction: 0x37726574
     2ac:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     2b0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     2b4:	6f700038 	svcvs	0x00700038
     2b8:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     2bc:	74003972 	strvc	r3, [r0], #-2418	; 0xfffff68e
     2c0:	43706d65 	cmnmi	r0, #6464	; 0x1940
     2c4:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
     2c8:	67694c65 	strbvs	r4, [r9, -r5, ror #24]!
     2cc:	72007468 	andvc	r7, r0, #104, 8	; 0x68000000
     2d0:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
     2d4:	69770072 	ldmdbvs	r7!, {r1, r4, r5, r6}^
     2d8:	00687464 	rsbeq	r7, r8, r4, ror #8
     2dc:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
     2e0:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     2e4:	5f726566 	svcpl	0x00726566
     2e8:	63616c62 	cmnvs	r1, #25088	; 0x6200
     2ec:	696c5f6b 	stmdbvs	ip!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     2f0:	00746867 	rsbseq	r6, r4, r7, ror #16
     2f4:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     2f8:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
     2fc:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     300:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
     304:	6400746e 	strvs	r7, [r0], #-1134	; 0xfffffb92
     308:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     30c:	746e755f 	strbtvc	r7, [lr], #-1375	; 0xfffffaa1
     310:	745f6c69 	ldrbvc	r6, [pc], #-3177	; 318 <startup-0x1ffffce8>
     314:	00747865 	rsbseq	r7, r4, r5, ror #16
     318:	706d6574 	rsbvc	r6, sp, r4, ror r5
     31c:	736e6f4d 	cmnvc	lr, #308	; 0x134
     320:	00726574 	rsbseq	r6, r2, r4, ror r5
     324:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     328:	616c4265 	cmnvs	ip, r5, ror #4
     32c:	70006b63 	andvc	r6, r0, r3, ror #22
     330:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     334:	6172675f 	cmnvs	r2, pc, asr r7
     338:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     33c:	61007374 	tstvs	r0, r4, ror r3
     340:	616d696e 	cmnvs	sp, lr, ror #18
     344:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     348:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
     34c:	61006465 	tstvs	r0, r5, ror #8
     350:	616d696e 	cmnvs	sp, lr, ror #18
     354:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     358:	756f635f 	strbvc	r6, [pc, #-863]!	; 1 <startup-0x1fffffff>
     35c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     360:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     364:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     368:	006a624f 	rsbeq	r6, sl, pc, asr #4
     36c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
     370:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     374:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     378:	675f656c 	ldrbvs	r6, [pc, -ip, ror #10]
     37c:	5f796172 	svcpl	0x00796172
     380:	73746962 	cmnvc	r4, #1605632	; 0x188000
     384:	61476e00 	cmpvs	r7, r0, lsl #28
     388:	624f656d 	subvs	r6, pc, #457179136	; 0x1b400000
     38c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     390:	72700073 	rsbsvc	r0, r0, #115	; 0x73
     394:	5f737365 	svcpl	0x00737365
     398:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     39c:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     3a0:	70007374 	andvc	r7, r0, r4, ror r3
     3a4:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     3a8:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     3ac:	6d690065 	stclvs	0, cr0, [r9, #-404]!	; 0xfffffe6c
     3b0:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     3b4:	6f687300 	svcvs	0x00687300
     3b8:	745f7472 	ldrbvc	r7, [pc], #-1138	; 3c0 <startup-0x1ffffc40>
     3bc:	00747865 	rsbseq	r7, r4, r5, ror #16
     3c0:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
     3c4:	5f746e65 	svcpl	0x00746e65
     3c8:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
     3cc:	69740065 	ldmdbvs	r4!, {r0, r2, r5, r6}^
     3d0:	4c656c74 	stclmi	12, cr6, [r5], #-464	; 0xfffffe30
     3d4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     3d8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     3dc:	65725070 	ldrbvs	r5, [r2, #-112]!	; 0xffffff90
     3e0:	72477373 	subvc	r7, r7, #-872415231	; 0xcc000001
     3e4:	69007961 	stmdbvs	r0, {r0, r5, r6, r8, fp, ip, sp, lr}
     3e8:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     3ec:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
     3f0:	74007365 	strvc	r7, [r0], #-869	; 0xfffffc9b
     3f4:	43706d65 	cmnmi	r0, #6464	; 0x1940
     3f8:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
     3fc:	61724765 	cmnvs	r2, r5, ror #14
     400:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     404:	6954706d 	ldmdbvs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
     408:	42656c74 	rsbmi	r6, r5, #116, 24	; 0x7400
     40c:	6b63616c 	blvs	18d89c4 <startup-0x1e72763c>
     410:	736e7500 	cmnvc	lr, #0, 10
     414:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     418:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
     41c:	64007261 	strvs	r7, [r0], #-609	; 0xfffffd9f
     420:	5f776172 	svcpl	0x00776172
     424:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     428:	625f7265 	subsvs	r7, pc, #1342177286	; 0x50000006
     42c:	6b63616c 	blvs	18d89e4 <startup-0x1e72761c>
     430:	6172675f 	cmnvs	r2, pc, asr r7
     434:	6f6d0079 	svcvs	0x006d0079
     438:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     43c:	696c5f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     440:	5f746867 	svcpl	0x00746867
     444:	73746962 	cmnvc	r4, #1605632	; 0x188000
     448:	73616300 	cmnvc	r1, #0, 6
     44c:	5f656c74 	svcpl	0x00656c74
     450:	63616c62 	cmnvs	r1, #25088	; 0x6200
     454:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     458:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     45c:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     460:	006a624f 	rsbeq	r6, sl, pc, asr #4
     464:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     468:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     46c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     470:	6f62616c 	svcvs	0x0062616c
     474:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     478:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     47c:	5049442f 	subpl	r4, r9, pc, lsr #8
     480:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     484:	2f686374 	svccs	0x00686374
     488:	74732f43 	ldrbtvc	r2, [r3], #-3907	; 0xfffff0bd
     48c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
     490:	00632e70 	rsbeq	r2, r3, r0, ror lr
     494:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     498:	656a624f 	strbvs	r6, [sl, #-591]!	; 0xfffffdb1
     49c:	00737463 	rsbseq	r7, r3, r3, ror #8
     4a0:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
     4a4:	7247656c 	subvc	r6, r7, #108, 10	; 0x1b000000
     4a8:	6d007961 	vstrvs.16	s14, [r0, #-194]	; 0xffffff3e	; <UNPREDICTABLE>
     4ac:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     4b0:	72477265 	subvc	r7, r7, #1342177286	; 0x50000006
     4b4:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     4b8:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     4bc:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     4c0:	72756300 	rsbsvc	r6, r5, #0, 6
     4c4:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
     4c8:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
     4cc:	006e6565 	rsbeq	r6, lr, r5, ror #10
     4d0:	706d6574 	rsbvc	r6, sp, r4, ror r5
     4d4:	73657250 	cmnvc	r5, #80, 4
     4d8:	616c4273 	smcvs	50211	; 0xc423
     4dc:	62006b63 	andvs	r6, r0, #101376	; 0x18c00
     4e0:	69625f67 	stmdbvs	r2!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     4e4:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     4e8:	6b63616c 	blvs	18d8aa0 <startup-0x1e727560>
     4ec:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     4f0:	6f6d0065 	svcvs	0x006d0065
     4f4:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     4f8:	72675f72 	rsbvc	r5, r7, #456	; 0x1c8
     4fc:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     500:	00737469 	rsbseq	r7, r3, r9, ror #8
     504:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
     508:	6d49656c 	cfstr64vs	mvdx6, [r9, #-432]	; 0xfffffe50
     50c:	00656761 	rsbeq	r6, r5, r1, ror #14
     510:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     514:	616d4965 	cmnvs	sp, r5, ror #18
     518:	00736567 	rsbseq	r6, r3, r7, ror #10
     51c:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
     520:	735f6d6f 	cmpvc	pc, #7104	; 0x1bc0
     524:	00646565 	rsbeq	r6, r4, r5, ror #10
     528:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     52c:	69660032 	stmdbvs	r6!, {r1, r4, r5}^
     530:	00336572 	eorseq	r6, r3, r2, ror r5
     534:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     538:	72700034 	rsbsvc	r0, r0, #52	; 0x34
     53c:	42737365 	rsbsmi	r7, r3, #-1811939327	; 0x94000001
     540:	6b63616c 	blvs	18d8af8 <startup-0x1e727508>
     544:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     548:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     54c:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     550:	50790065 	rsbspl	r0, r9, r5, rrx
     554:	7400736f 	strvc	r7, [r0], #-879	; 0xfffffc91
     558:	31747865 	cmncc	r4, r5, ror #16
     55c:	65740032 	ldrbvs	r0, [r4, #-50]!	; 0xffffffce
     560:	6954706d 	ldmdbvs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
     564:	4c656c74 	stclmi	12, cr6, [r5], #-464	; 0xfffffe30
     568:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     56c:	64707500 	ldrbtvs	r7, [r0], #-1280	; 0xfffffb00
     570:	00657461 	rsbeq	r7, r5, r1, ror #8
     574:	73657270 	cmnvc	r5, #112, 4
     578:	616d4973 	smcvs	54419	; 0xd493
     57c:	00736567 	rsbseq	r6, r3, r7, ror #10
     580:	706d6574 	rsbvc	r6, sp, r4, ror r5
     584:	6c746954 			; <UNDEFINED> instruction: 0x6c746954
     588:	61724765 	cmnvs	r2, r5, ror #14
     58c:	53740079 	cmnpl	r4, #121	; 0x79
     590:	54776f6c 	ldrbtpl	r6, [r7], #-3948	; 0xfffff094
     594:	00747865 	rsbseq	r7, r4, r5, ror #16
     598:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
     59c:	00745f38 	rsbseq	r5, r4, r8, lsr pc
     5a0:	6b636162 	blvs	18d8b30 <startup-0x1e7274d0>
     5a4:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     5a8:	694c7265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp, lr}^
     5ac:	00746867 	rsbseq	r6, r4, r7, ror #16
     5b0:	6b636162 	blvs	18d8b40 <startup-0x1e7274c0>
     5b4:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     5b8:	72477265 	subvc	r7, r7, #1342177286	; 0x50000006
     5bc:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     5c0:	50706d65 	rsbspl	r6, r0, r5, ror #26
     5c4:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     5c8:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     5cc:	47740074 			; <UNDEFINED> instruction: 0x47740074
     5d0:	4f656d61 	svcmi	0x00656d61
     5d4:	63656a62 	cmnvs	r5, #401408	; 0x62000
     5d8:	50780074 	rsbspl	r0, r8, r4, ror r0
     5dc:	6300736f 	movwvs	r7, #879	; 0x36f
     5e0:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
     5e4:	616c4265 	cmnvs	ip, r5, ror #4
     5e8:	74006b63 	strvc	r6, [r0], #-2915	; 0xfffff49d
     5ec:	31747865 	cmncc	r4, r5, ror #16
     5f0:	65740030 	ldrbvs	r0, [r4, #-48]!	; 0xffffffd0
     5f4:	31317478 	teqcc	r1, r8, ror r4
     5f8:	69656800 	stmdbvs	r5!, {fp, sp, lr}^
     5fc:	00746867 	rsbseq	r6, r4, r7, ror #16
     600:	6e69616d 	powvsez	f6, f1, #5.0
     604:	65727000 	ldrbvs	r7, [r2, #-0]!
     608:	694c7373 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}^
     60c:	00746867 	rsbseq	r6, r4, r7, ror #16
     610:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
     614:	49726574 	ldmdbmi	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     618:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     61c:	61670073 	smcvs	28675	; 0x7003
     620:	624f656d 	subvs	r6, pc, #457179136	; 0x1b400000
     624:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     628:	61647055 	qdsubvs	r7, r5, r4
     62c:	43006574 	movwmi	r6, #1396	; 0x574
     630:	6f6d2f3a 	svcvs	0x006d2f3a
     634:	2f632f70 	svccs	0x00632f70
     638:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     63c:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     640:	6f697461 	svcvs	0x00697461
     644:	2f72656e 	svccs	0x0072656e
     648:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     64c:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     650:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     654:	6d61672f 	stclvs	7, cr6, [r1, #-188]!	; 0xffffff44
     658:	6a626f65 	bvs	189c3f4 <startup-0x1e763c0c>
     65c:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
     660:	68740063 	ldmdavs	r4!, {r0, r1, r5, r6}^
     664:	66007369 	strvs	r7, [r0], -r9, ror #6
     668:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
     66c:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     670:	72696600 	rsbvc	r6, r9, #0, 12
     674:	72473165 	subvc	r3, r7, #1073741849	; 0x40000019
     678:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     67c:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
     680:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
     684:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     688:	72696600 	rsbvc	r6, r9, #0, 12
     68c:	72473365 	subvc	r3, r7, #-1811939327	; 0x94000001
     690:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     694:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
     698:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
     69c:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     6a0:	72696600 	rsbvc	r6, r9, #0, 12
     6a4:	616c4265 	cmnvs	ip, r5, ror #4
     6a8:	74006b63 	strvc	r6, [r0], #-2915	; 0xfffff49d
     6ac:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
     6b0:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     6b4:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     6b8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     6bc:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     6c0:	616c4265 	cmnvs	ip, r5, ror #4
     6c4:	66006b63 	strvs	r6, [r0], -r3, ror #22
     6c8:	31657269 	cmncc	r5, r9, ror #4
     6cc:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     6d0:	69660074 	stmdbvs	r6!, {r2, r4, r5, r6}^
     6d4:	4c346572 	cfldr32mi	mvfx6, [r4], #-456	; 0xfffffe38
     6d8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     6dc:	72696600 	rsbvc	r6, r9, #0, 12
     6e0:	675f3265 	ldrbvs	r3, [pc, -r5, ror #4]
     6e4:	5f796172 	svcpl	0x00796172
     6e8:	73746962 	cmnvc	r4, #1605632	; 0x188000
     6ec:	72696600 	rsbvc	r6, r9, #0, 12
     6f0:	6c5f3465 	cfldrdvs	mvd3, [pc], {101}	; 0x65
     6f4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     6f8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     6fc:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     700:	4c336572 	cfldr32mi	mvfx6, [r3], #-456	; 0xfffffe38
     704:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     708:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     70c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     710:	6f700031 	svcvs	0x00700031
     714:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     718:	66003372 			; <UNDEFINED> instruction: 0x66003372
     71c:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
     720:	6172675f 	cmnvs	r2, pc, asr r7
     724:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     728:	66007374 			; <UNDEFINED> instruction: 0x66007374
     72c:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     730:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     734:	6f700065 	svcvs	0x00700065
     738:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     73c:	66003072 			; <UNDEFINED> instruction: 0x66003072
     740:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
     744:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     748:	6f700074 	svcvs	0x00700074
     74c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     750:	74003272 	strvc	r3, [r0], #-626	; 0xfffffd8e
     754:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
     758:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
     75c:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     760:	72696600 	rsbvc	r6, r9, #0, 12
     764:	675f3165 	ldrbvs	r3, [pc, -r5, ror #2]
     768:	5f796172 	svcpl	0x00796172
     76c:	73746962 	cmnvc	r4, #1605632	; 0x188000
     770:	72696600 	rsbvc	r6, r9, #0, 12
     774:	694c3265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp}^
     778:	00746867 	rsbseq	r6, r4, r7, ror #16
     77c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     780:	696c5f31 	stmdbvs	ip!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     784:	5f746867 	svcpl	0x00746867
     788:	73746962 	cmnvc	r4, #1605632	; 0x188000
     78c:	72696600 	rsbvc	r6, r9, #0, 12
     790:	6c5f3265 	lfmvs	f3, 2, [pc], {101}	; 0x65
     794:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     798:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     79c:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     7a0:	624f6572 	subvs	r6, pc, #478150656	; 0x1c800000
     7a4:	6966006a 	stmdbvs	r6!, {r1, r3, r5, r6}^
     7a8:	47326572 			; <UNDEFINED> instruction: 0x47326572
     7ac:	00796172 	rsbseq	r6, r9, r2, ror r1
     7b0:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     7b4:	72675f34 	rsbvc	r5, r7, #52, 30	; 0xd0
     7b8:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     7bc:	00737469 	rsbseq	r7, r3, r9, ror #8
     7c0:	706d6574 	rsbvc	r6, sp, r4, ror r5
     7c4:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     7c8:	67694c33 			; <UNDEFINED> instruction: 0x67694c33
     7cc:	66007468 	strvs	r7, [r0], -r8, ror #8
     7d0:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
     7d4:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     7d8:	65740065 	ldrbvs	r0, [r4, #-101]!	; 0xffffff9b
     7dc:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     7e0:	4c316572 	cfldr32mi	mvfx6, [r1], #-456	; 0xfffffe38
     7e4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     7e8:	72696600 	rsbvc	r6, r9, #0, 12
     7ec:	69547473 	ldmdbvs	r4, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     7f0:	6900656d 	stmdbvs	r0, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
     7f4:	5f74696e 	svcpl	0x0074696e
     7f8:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     7fc:	72696600 	rsbvc	r6, r9, #0, 12
     800:	6c5f3565 	cfldr64vs	mvdx3, [pc], {101}	; 0x65
     804:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     808:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     80c:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     810:	6d496572 	cfstr64vs	mvdx6, [r9, #-456]	; 0xfffffe38
     814:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     818:	72696600 	rsbvc	r6, r9, #0, 12
     81c:	6d493165 	stfvse	f3, [r9, #-404]	; 0xfffffe6c
     820:	00656761 	rsbeq	r6, r5, r1, ror #14
     824:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     828:	61724734 	cmnvs	r2, r4, lsr r7
     82c:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     830:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     834:	47316572 			; <UNDEFINED> instruction: 0x47316572
     838:	00796172 	rsbseq	r6, r9, r2, ror r1
     83c:	706d6574 	rsbvc	r6, sp, r4, ror r5
     840:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     844:	67694c34 			; <UNDEFINED> instruction: 0x67694c34
     848:	66007468 	strvs	r7, [r0], -r8, ror #8
     84c:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     850:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     854:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     858:	00737469 	rsbseq	r7, r3, r9, ror #8
     85c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     860:	616d4935 	cmnvs	sp, r5, lsr r9
     864:	66006567 	strvs	r6, [r0], -r7, ror #10
     868:	5f657269 	svcpl	0x00657269
     86c:	63616c62 	cmnvs	r1, #25088	; 0x6200
     870:	5f325f6b 	svcpl	0x00325f6b
     874:	73746962 	cmnvc	r4, #1605632	; 0x188000
     878:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     87c:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     880:	694c3265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp}^
     884:	00746867 	rsbseq	r6, r4, r7, ror #16
     888:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     88c:	616d4932 	cmnvs	sp, r2, lsr r9
     890:	74006567 	strvc	r6, [r0], #-1383	; 0xfffffa99
     894:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
     898:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
     89c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     8a0:	3a430074 	bcc	10c0a78 <startup-0x1ef3f588>
     8a4:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     8a8:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 7f4 <startup-0x1ffff80c>
     8ac:	616c706f 	cmnvs	ip, pc, rrx
     8b0:	61726f62 	cmnvs	r2, r2, ror #30
     8b4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     8b8:	442f7265 	strtmi	r7, [pc], #-613	; 8c0 <startup-0x1ffff740>
     8bc:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     8c0:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     8c4:	2f432f68 	svccs	0x00432f68
     8c8:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     8cc:	6600632e 	strvs	r6, [r0], -lr, lsr #6
     8d0:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     8d4:	6172675f 	cmnvs	r2, pc, asr r7
     8d8:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     8dc:	6c007374 	stcvs	3, cr7, [r0], {116}	; 0x74
     8e0:	52747361 	rsbspl	r7, r4, #-2080374783	; 0x84000001
     8e4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     8e8:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
     8ec:	616c0065 	cmnvs	ip, r5, rrx
     8f0:	654c7473 	strbvs	r7, [ip, #-1139]	; 0xfffffb8d
     8f4:	61567466 	cmpvs	r6, r6, ror #8
     8f8:	0065756c 	rsbeq	r7, r5, ip, ror #10
     8fc:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     900:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     904:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     908:	6f62616c 	svcvs	0x0062616c
     90c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     910:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     914:	5049442f 	subpl	r4, r9, pc, lsr #8
     918:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     91c:	2f686374 	svccs	0x00686374
     920:	6c702f43 	ldclvs	15, cr2, [r0], #-268	; 0xfffffef4
     924:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
     928:	7000632e 	andvc	r6, r0, lr, lsr #6
     92c:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
     930:	64705572 	ldrbtvs	r5, [r0], #-1394	; 0xfffffa8e
     934:	00657461 	rsbeq	r7, r5, r1, ror #8
     938:	706d6574 	rsbvc	r6, sp, r4, ror r5
     93c:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     940:	67694c32 			; <UNDEFINED> instruction: 0x67694c32
     944:	62007468 	andvs	r7, r0, #104, 8	; 0x68000000
     948:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     94c:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     950:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     954:	00737469 	rsbseq	r7, r3, r9, ror #8
     958:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     95c:	616d4934 	cmnvs	sp, r4, lsr r9
     960:	62006567 	andvs	r6, r0, #432013312	; 0x19c00000
     964:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     968:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     96c:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     970:	00737469 	rsbseq	r7, r3, r9, ror #8
     974:	706d6574 	rsbvc	r6, sp, r4, ror r5
     978:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     97c:	67694c35 			; <UNDEFINED> instruction: 0x67694c35
     980:	70007468 	andvc	r7, r0, r8, ror #8
     984:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     988:	34317265 	ldrtcc	r7, [r1], #-613	; 0xfffffd9b
     98c:	72696200 	rsbvc	r6, r9, #0, 4
     990:	6c5f3564 	cfldr64vs	mvdx3, [pc], {100}	; 0x64
     994:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     998:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     99c:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
     9a0:	4c336472 	cfldrsmi	mvf6, [r3], #-456	; 0xfffffe38
     9a4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     9a8:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     9ac:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     9b0:	62003931 	andvs	r3, r0, #802816	; 0xc4000
     9b4:	31647269 	cmncc	r4, r9, ror #4
     9b8:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     9bc:	69620074 	stmdbvs	r2!, {r2, r4, r5, r6}^
     9c0:	42336472 	eorsmi	r6, r3, #1912602624	; 0x72000000
     9c4:	6b63616c 	blvs	18d8f7c <startup-0x1e727084>
     9c8:	72696200 	rsbvc	r6, r9, #0, 4
     9cc:	72473164 	subvc	r3, r7, #100, 2
     9d0:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     9d4:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     9d8:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     9dc:	63616c42 	cmnvs	r1, #16896	; 0x4200
     9e0:	6962006b 	stmdbvs	r2!, {r0, r1, r3, r5, r6}^
     9e4:	42356472 	eorsmi	r6, r5, #1912602624	; 0x72000000
     9e8:	6b63616c 	blvs	18d8fa0 <startup-0x1e727060>
     9ec:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     9f0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     9f4:	70003032 	andvc	r3, r0, r2, lsr r0
     9f8:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     9fc:	31327265 	teqcc	r2, r5, ror #4
     a00:	72696200 	rsbvc	r6, r9, #0, 4
     a04:	72473464 	subvc	r3, r7, #100, 8	; 0x64000000
     a08:	62007961 	andvs	r7, r0, #1589248	; 0x184000
     a0c:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     a10:	63616c42 	cmnvs	r1, #16896	; 0x4200
     a14:	6f70006b 	svcvs	0x0070006b
     a18:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     a1c:	00343272 	eorseq	r3, r4, r2, ror r2
     a20:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     a24:	31726574 	cmncc	r2, r4, ror r5
     a28:	65740036 	ldrbvs	r0, [r4, #-54]!	; 0xffffffca
     a2c:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     a30:	47326472 			; <UNDEFINED> instruction: 0x47326472
     a34:	00796172 	rsbseq	r6, r9, r2, ror r1
     a38:	706d6574 	rsbvc	r6, sp, r4, ror r5
     a3c:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     a40:	61724734 	cmnvs	r2, r4, lsr r7
     a44:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     a48:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     a4c:	694c6472 	stmdbvs	ip, {r1, r4, r5, r6, sl, sp, lr}^
     a50:	00746867 	rsbseq	r6, r4, r7, ror #16
     a54:	706d6574 	rsbvc	r6, sp, r4, ror r5
     a58:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     a5c:	61724735 	cmnvs	r2, r5, lsr r7
     a60:	6f700079 	svcvs	0x00700079
     a64:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     a68:	00333172 	eorseq	r3, r3, r2, ror r1
     a6c:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     a70:	6c625f32 	stclvs	15, cr5, [r2], #-200	; 0xffffff38
     a74:	5f6b6361 	svcpl	0x006b6361
     a78:	73746962 	cmnvc	r4, #1605632	; 0x188000
     a7c:	72696200 	rsbvc	r6, r9, #0, 4
     a80:	675f3164 	ldrbvs	r3, [pc, -r4, ror #2]
     a84:	5f796172 	svcpl	0x00796172
     a88:	73746962 	cmnvc	r4, #1605632	; 0x188000
     a8c:	72696200 	rsbvc	r6, r9, #0, 4
     a90:	6d493664 	stclvs	6, cr3, [r9, #-400]	; 0xfffffe70
     a94:	00656761 	rsbeq	r6, r5, r1, ror #14
     a98:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     a9c:	6c625f33 	stclvs	15, cr5, [r2], #-204	; 0xffffff34
     aa0:	5f6b6361 	svcpl	0x006b6361
     aa4:	73746962 	cmnvc	r4, #1605632	; 0x188000
     aa8:	72696200 	rsbvc	r6, r9, #0, 4
     aac:	625f3464 	subsvs	r3, pc, #100, 8	; 0x64000000
     ab0:	6b63616c 	blvs	18d9068 <startup-0x1e726f98>
     ab4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     ab8:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
     abc:	49336472 	ldmdbmi	r3!, {r1, r4, r5, r6, sl, sp, lr}
     ac0:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     ac4:	72696200 	rsbvc	r6, r9, #0, 4
     ac8:	6c5f3164 	ldfvse	f3, [pc], {100}	; 0x64
     acc:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     ad0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     ad4:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
     ad8:	5f356472 	svcpl	0x00356472
     adc:	63616c62 	cmnvs	r1, #25088	; 0x6200
     ae0:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     ae4:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     ae8:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     aec:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     af0:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     af4:	69620074 	stmdbvs	r2!, {r2, r4, r5, r6}^
     af8:	5f356472 	svcpl	0x00356472
     afc:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     b00:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     b04:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
     b08:	47326472 			; <UNDEFINED> instruction: 0x47326472
     b0c:	00796172 	rsbseq	r6, r9, r2, ror r1
     b10:	706d6574 	rsbvc	r6, sp, r4, ror r5
     b14:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     b18:	67694c34 			; <UNDEFINED> instruction: 0x67694c34
     b1c:	74007468 	strvc	r7, [r0], #-1128	; 0xfffffb98
     b20:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     b24:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     b28:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     b2c:	72696200 	rsbvc	r6, r9, #0, 4
     b30:	675f3464 	ldrbvs	r3, [pc, -r4, ror #8]
     b34:	5f796172 	svcpl	0x00796172
     b38:	73746962 	cmnvc	r4, #1605632	; 0x188000
     b3c:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     b40:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     b44:	62003332 	andvs	r3, r0, #-939524096	; 0xc8000000
     b48:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     b4c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     b50:	69620074 	stmdbvs	r2!, {r2, r4, r5, r6}^
     b54:	6d496472 	cfstrdvs	mvd6, [r9, #-456]	; 0xfffffe38
     b58:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     b5c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     b60:	72694270 	rsbvc	r4, r9, #112, 4
     b64:	6c423564 	cfstr64vs	mvdx3, [r2], {100}	; 0x64
     b68:	006b6361 	rsbeq	r6, fp, r1, ror #6
     b6c:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     b70:	616c4234 	cmnvs	ip, r4, lsr r2
     b74:	74006b63 	strvc	r6, [r0], #-2915	; 0xfffff49d
     b78:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     b7c:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     b80:	63616c42 	cmnvs	r1, #16896	; 0x4200
     b84:	6962006b 	stmdbvs	r2!, {r0, r1, r3, r5, r6}^
     b88:	5f336472 	svcpl	0x00336472
     b8c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     b90:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     b94:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
     b98:	42316472 	eorsmi	r6, r1, #1912602624	; 0x72000000
     b9c:	6b63616c 	blvs	18d9154 <startup-0x1e726eac>
     ba0:	72696200 	rsbvc	r6, r9, #0, 4
     ba4:	694c3264 	stmdbvs	ip, {r2, r5, r6, r9, ip, sp}^
     ba8:	00746867 	rsbseq	r6, r4, r7, ror #16
     bac:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     bb0:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     bb4:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     bb8:	6f62616c 	svcvs	0x0062616c
     bbc:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     bc0:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     bc4:	5049442f 	subpl	r4, r9, pc, lsr #8
     bc8:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     bcc:	2f686374 	svccs	0x00686374
     bd0:	69622f43 	stmdbvs	r2!, {r0, r1, r6, r8, r9, sl, fp, sp}^
     bd4:	632e6472 			; <UNDEFINED> instruction: 0x632e6472
     bd8:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     bdc:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     be0:	62006472 	andvs	r6, r0, #1912602624	; 0x72000000
     be4:	4f647269 	svcmi	0x00647269
     be8:	62006a62 	andvs	r6, r0, #401408	; 0x62000
     bec:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     bf0:	6172675f 	cmnvs	r2, pc, asr r7
     bf4:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     bf8:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     bfc:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     c00:	47647269 	strbmi	r7, [r4, -r9, ror #4]!
     c04:	00796172 	rsbseq	r6, r9, r2, ror r1
     c08:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     c0c:	61724735 	cmnvs	r2, r5, lsr r7
     c10:	69620079 	stmdbvs	r2!, {r0, r3, r4, r5, r6}^
     c14:	5f316472 	svcpl	0x00316472
     c18:	63616c62 	cmnvs	r1, #25088	; 0x6200
     c1c:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     c20:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     c24:	31647269 	cmncc	r4, r9, ror #4
     c28:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     c2c:	69620065 	stmdbvs	r2!, {r0, r2, r5, r6}^
     c30:	47336472 			; <UNDEFINED> instruction: 0x47336472
     c34:	00796172 	rsbseq	r6, r9, r2, ror r1
     c38:	616e6966 	cmnvs	lr, r6, ror #18
     c3c:	696f506c 	stmdbvs	pc!, {r2, r3, r5, r6, ip, lr}^	; <UNPREDICTABLE>
     c40:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     c44:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     c48:	72694270 	rsbvc	r4, r9, #112, 4
     c4c:	616c4264 	cmnvs	ip, r4, ror #4
     c50:	74006b63 	strvc	r6, [r0], #-2915	; 0xfffff49d
     c54:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     c58:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     c5c:	63616c42 	cmnvs	r1, #16896	; 0x4200
     c60:	6f70006b 	svcvs	0x0070006b
     c64:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     c68:	00313172 	eorseq	r3, r1, r2, ror r1
     c6c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     c70:	31726574 	cmncc	r2, r4, ror r5
     c74:	69620032 	stmdbvs	r2!, {r1, r4, r5}^
     c78:	4c346472 	cfldrsmi	mvf6, [r4], #-456	; 0xfffffe38
     c7c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     c80:	72696200 	rsbvc	r6, r9, #0, 4
     c84:	6d493564 	cfstr64vs	mvdx3, [r9, #-400]	; 0xfffffe70
     c88:	00656761 	rsbeq	r6, r5, r1, ror #14
     c8c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     c90:	31726574 	cmncc	r2, r4, ror r5
     c94:	6f700035 	svcvs	0x00700035
     c98:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     c9c:	00373172 	eorseq	r3, r7, r2, ror r1
     ca0:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     ca4:	31726574 	cmncc	r2, r4, ror r5
     ca8:	69620038 	stmdbvs	r2!, {r3, r4, r5}^
     cac:	49326472 	ldmdbmi	r2!, {r1, r4, r5, r6, sl, sp, lr}
     cb0:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     cb4:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     cb8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     cbc:	62003232 	andvs	r3, r0, #536870915	; 0x20000003
     cc0:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     cc4:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     cc8:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     ccc:	00737469 	rsbseq	r7, r3, r9, ror #8
     cd0:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     cd4:	6c423268 	sfmvs	f3, 2, [r2], {104}	; 0x68
     cd8:	006b6361 	rsbeq	r6, fp, r1, ror #6
     cdc:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     ce0:	72473168 	subvc	r3, r7, #104, 2
     ce4:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     ce8:	57706d65 	ldrbpl	r6, [r0, -r5, ror #26]!
     cec:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     cf0:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     cf4:	69770074 	ldmdbvs	r7!, {r2, r4, r5, r6}^
     cf8:	4f686374 	svcmi	0x00686374
     cfc:	77006a62 	strvc	r6, [r0, -r2, ror #20]
     d00:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     d04:	6c625f31 	stclvs	15, cr5, [r2], #-196	; 0xffffff3c
     d08:	5f6b6361 	svcpl	0x006b6361
     d0c:	73746962 	cmnvc	r4, #1605632	; 0x188000
     d10:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     d14:	74695770 	strbtvc	r5, [r9], #-1904	; 0xfffff890
     d18:	4c336863 	ldcmi	8, cr6, [r3], #-396	; 0xfffffe74
     d1c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     d20:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     d24:	74695770 	strbtvc	r5, [r9], #-1904	; 0xfffff890
     d28:	4c326863 	ldcmi	8, cr6, [r2], #-396	; 0xfffffe74
     d2c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     d30:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     d34:	4c316863 	ldcmi	8, cr6, [r1], #-396	; 0xfffffe74
     d38:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     d3c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     d40:	74695770 	strbtvc	r5, [r9], #-1904	; 0xfffff890
     d44:	42326863 	eorsmi	r6, r2, #6488064	; 0x630000
     d48:	6b63616c 	blvs	18d9300 <startup-0x1e726d00>
     d4c:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     d50:	5f326863 	svcpl	0x00326863
     d54:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     d58:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     d5c:	77007374 	smlsdxvc	r0, r4, r3, r7
     d60:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     d64:	616d4933 	cmnvs	sp, r3, lsr r9
     d68:	77006567 	strvc	r6, [r0, -r7, ror #10]
     d6c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     d70:	616c4233 	cmnvs	ip, r3, lsr r2
     d74:	77006b63 	strvc	r6, [r0, -r3, ror #22]
     d78:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     d7c:	72675f33 	rsbvc	r5, r7, #51, 30	; 0xcc
     d80:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     d84:	00737469 	rsbseq	r7, r3, r9, ror #8
     d88:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     d8c:	7469775f 	strbtvc	r7, [r9], #-1887	; 0xfffff8a1
     d90:	74006863 	strvc	r6, [r0], #-2147	; 0xfffff79d
     d94:	57706d65 	ldrbpl	r6, [r0, -r5, ror #26]!
     d98:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     d9c:	63616c42 	cmnvs	r1, #16896	; 0x4200
     da0:	6977006b 	ldmdbvs	r7!, {r0, r1, r3, r5, r6}^
     da4:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     da8:	616c625f 	cmnvs	ip, pc, asr r2
     dac:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
     db0:	00737469 	rsbseq	r7, r3, r9, ror #8
     db4:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     db8:	6c5f3368 	mrrcvs	3, 6, r3, pc, cr8	; <UNPREDICTABLE>
     dbc:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     dc0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     dc4:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
     dc8:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     dcc:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     dd0:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     dd4:	47326863 	ldrmi	r6, [r2, -r3, ror #16]!
     dd8:	00796172 	rsbseq	r6, r9, r2, ror r1
     ddc:	706d6574 	rsbvc	r6, sp, r4, ror r5
     de0:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     de4:	61724768 	cmnvs	r2, r8, ror #14
     de8:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     dec:	6957706d 	ldmdbvs	r7, {r0, r2, r3, r5, r6, ip, sp, lr}^
     df0:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     df4:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     df8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     dfc:	74695770 	strbtvc	r5, [r9], #-1904	; 0xfffff890
     e00:	42336863 	eorsmi	r6, r3, #6488064	; 0x630000
     e04:	6b63616c 	blvs	18d93bc <startup-0x1e726c44>
     e08:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     e0c:	5f316863 	svcpl	0x00316863
     e10:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     e14:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     e18:	77007374 	smlsdxvc	r0, r4, r3, r7
     e1c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     e20:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
     e24:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     e28:	00737469 	rsbseq	r7, r3, r9, ror #8
     e2c:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     e30:	6d493468 	cfstrdvs	mvd3, [r9, #-416]	; 0xfffffe60
     e34:	00656761 	rsbeq	r6, r5, r1, ror #14
     e38:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     e3c:	694c3268 	stmdbvs	ip, {r3, r5, r6, r9, ip, sp}^
     e40:	00746867 	rsbseq	r6, r4, r7, ror #16
     e44:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     e48:	6d493168 	stfvse	f3, [r9, #-416]	; 0xfffffe60
     e4c:	00656761 	rsbeq	r6, r5, r1, ror #14
     e50:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     e54:	6c423168 	stfvse	f3, [r2], {104}	; 0x68
     e58:	006b6361 	rsbeq	r6, fp, r1, ror #6
     e5c:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     e60:	694c3368 	stmdbvs	ip, {r3, r5, r6, r8, r9, ip, sp}^
     e64:	00746867 	rsbseq	r6, r4, r7, ror #16
     e68:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     e6c:	616d4968 	cmnvs	sp, r8, ror #18
     e70:	00736567 	rsbseq	r6, r3, r7, ror #10
     e74:	706d6574 	rsbvc	r6, sp, r4, ror r5
     e78:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     e7c:	72473368 	subvc	r3, r7, #104, 6	; 0xa0000001
     e80:	43007961 	movwmi	r7, #2401	; 0x961
     e84:	6f6d2f3a 	svcvs	0x006d2f3a
     e88:	2f632f70 	svccs	0x00632f70
     e8c:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     e90:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     e94:	6f697461 	svcvs	0x00697461
     e98:	2f72656e 	svccs	0x0072656e
     e9c:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     ea0:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     ea4:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     ea8:	7469772f 	strbtvc	r7, [r9], #-1839	; 0xfffff8d1
     eac:	632e6863 			; <UNDEFINED> instruction: 0x632e6863
     eb0:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     eb4:	5f316863 	svcpl	0x00316863
     eb8:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     ebc:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     ec0:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
     ec4:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     ec8:	616c625f 	cmnvs	ip, pc, asr r2
     ecc:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
     ed0:	00737469 	rsbseq	r7, r3, r9, ror #8
     ed4:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     ed8:	6d493268 	sfmvs	f3, 2, [r9, #-416]	; 0xfffffe60
     edc:	00656761 	rsbeq	r6, r5, r1, ror #14
     ee0:	65676170 	strbvs	r6, [r7, #-368]!	; 0xfffffe90
     ee4:	61726700 	cmnvs	r2, r0, lsl #14
     ee8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
     eec:	6165725f 	cmnvs	r5, pc, asr r2
     ef0:	75620064 	strbvc	r0, [r2, #-100]!	; 0xffffff9c
     ef4:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     ef8:	6c617600 	stclvs	6, cr7, [r1], #-0
     efc:	70006575 	andvc	r6, r0, r5, ror r5
     f00:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
     f04:	72640032 	rsbvc	r0, r4, #50	; 0x32
     f08:	675f7761 	ldrbvs	r7, [pc, -r1, ror #14]
     f0c:	5f656d61 	svcpl	0x00656d61
     f10:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     f14:	64007463 	strvs	r7, [r0], #-1123	; 0xfffffb9d
     f18:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     f1c:	63696d5f 	cmnvs	r9, #6080	; 0x17c0
     f20:	67006f72 	smlsdxvs	r0, r2, pc, r6	; <UNPREDICTABLE>
     f24:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
     f28:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
     f2c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     f30:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; dbc <startup-0x1ffff244>
     f34:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
     f38:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
     f3c:	625f7261 	subsvs	r7, pc, #268435462	; 0x10000006
     f40:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
     f44:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     f48:	69700072 	ldmdbvs	r0!, {r1, r4, r5, r6}^
     f4c:	006c6578 	rsbeq	r6, ip, r8, ror r5
     f50:	6a624f67 	bvs	1894cf4 <startup-0x1e76b30c>
     f54:	61726700 	cmnvs	r2, r0, lsl #14
     f58:	63696870 	cmnvs	r9, #112, 16	; 0x700000
     f5c:	6172645f 	cmnvs	r2, pc, asr r4
     f60:	63735f77 	cmnvs	r3, #476	; 0x1dc
     f64:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
     f68:	6c656400 	cfstrdvs	mvd6, [r5], #-0
     f6c:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; eb2 <startup-0x1ffff14e>	; <UNPREDICTABLE>
     f70:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
     f74:	6f687300 	svcvs	0x00687300
     f78:	72665f77 	rsbvc	r5, r6, #476	; 0x1dc
     f7c:	00656d61 	rsbeq	r6, r5, r1, ror #26
     f80:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
     f84:	7270735f 	rsbsvc	r7, r0, #2080374785	; 0x7c000001
     f88:	00657469 	rsbeq	r7, r5, r9, ror #8
     f8c:	616c6564 	cmnvs	ip, r4, ror #10
     f90:	30355f79 	eorscc	r5, r5, r9, ror pc
     f94:	00736e30 	rsbseq	r6, r3, r0, lsr lr
     f98:	70617267 	rsbvc	r7, r1, r7, ror #4
     f9c:	5f636968 	svcpl	0x00636968
     fa0:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
     fa4:	72670065 	rsbvc	r0, r7, #101	; 0x65
     fa8:	63537961 	cmpvs	r3, #1589248	; 0x184000
     fac:	54656c61 	strbtpl	r6, [r5], #-3169	; 0xfffff39f
     fb0:	00747365 	rsbseq	r7, r4, r5, ror #6
     fb4:	70617267 	rsbvc	r7, r1, r7, ror #4
     fb8:	5f636968 	svcpl	0x00636968
     fbc:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
     fc0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     fc4:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
     fc8:	43007261 	movwmi	r7, #609	; 0x261
     fcc:	6f6d2f3a 	svcvs	0x006d2f3a
     fd0:	2f632f70 	svccs	0x00632f70
     fd4:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     fd8:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     fdc:	6f697461 	svcvs	0x00697461
     fe0:	2f72656e 	svccs	0x0072656e
     fe4:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     fe8:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     fec:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     ff0:	6172672f 	cmnvs	r2, pc, lsr #14
     ff4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
     ff8:	00632e73 	rsbeq	r2, r3, r3, ror lr
     ffc:	70617267 	rsbvc	r7, r1, r7, ror #4
    1000:	5f636968 	svcpl	0x00636968
    1004:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1008:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    100c:	6f630061 	svcvs	0x00630061
    1010:	00726f6c 	rsbseq	r6, r2, ip, ror #30
    1014:	5f746573 	svcpl	0x00746573
    1018:	645f7075 	ldrbvs	r7, [pc], #-117	; 1020 <startup-0x1fffefe0>
    101c:	5f776172 	svcpl	0x00776172
    1020:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1024:	00737265 	rsbseq	r7, r3, r5, ror #4
    1028:	70617267 	rsbvc	r7, r1, r7, ror #4
    102c:	5f636968 	svcpl	0x00636968
    1030:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    1034:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1038:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    103c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    1040:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
    1044:	736e3035 	cmnvc	lr, #53	; 0x35
    1048:	6c696600 	stclvs	6, cr6, [r9], #-0
    104c:	6365526c 	cmnvs	r5, #108, 4	; 0xc0000006
    1050:	676e6174 			; <UNDEFINED> instruction: 0x676e6174
    1054:	6d00656c 	cfstr32vs	mvfx6, [r0, #-432]	; 0xfffffe50
    1058:	006b7361 	rsbeq	r7, fp, r1, ror #6
    105c:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
    1060:	656c5f65 	strbvs	r5, [ip, #-3941]!	; 0xfffff09b
    1064:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1068:	61726700 	cmnvs	r2, r0, lsl #14
    106c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    1070:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    1074:	645f6574 	ldrbvs	r6, [pc], #-1396	; 107c <startup-0x1fffef84>
    1078:	00617461 	rsbeq	r7, r1, r1, ror #8
    107c:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    1080:	64697700 	strbtvs	r7, [r9], #-1792	; 0xfffff900
    1084:	695f6874 	ldmdbvs	pc, {r2, r4, r5, r6, fp, sp, lr}^	; <UNPREDICTABLE>
    1088:	79625f6e 	stmdbvc	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    108c:	00736574 	rsbseq	r6, r3, r4, ror r5
    1090:	61656c63 	cmnvs	r5, r3, ror #24
    1094:	6c615f72 	stclvs	15, cr5, [r1], #-456	; 0xfffffe38
    1098:	61625f6c 	cmnvs	r2, ip, ror #30
    109c:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
    10a0:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    10a4:	6c630073 	stclvs	0, cr0, [r3], #-460	; 0xfffffe34
    10a8:	52726165 	rsbspl	r6, r2, #1073741849	; 0x40000019
    10ac:	61746365 	cmnvs	r4, r5, ror #6
    10b0:	656c676e 	strbvs	r6, [ip, #-1902]!	; 0xfffff892
    10b4:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    10b8:	73007865 	movwvc	r7, #2149	; 0x865
    10bc:	63656c65 	cmnvs	r5, #25856	; 0x6500
    10c0:	6f635f74 	svcvs	0x00635f74
    10c4:	6f72746e 	svcvs	0x0072746e
    10c8:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
    10cc:	61726700 	cmnvs	r2, r0, lsl #14
    10d0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    10d4:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    10d8:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
    10dc:	00796461 	rsbseq	r6, r9, r1, ror #8
    10e0:	61656c63 	cmnvs	r5, r3, ror #24
    10e4:	68745f72 	ldmdavs	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    10e8:	61427369 	cmpvs	r2, r9, ror #6
    10ec:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
    10f0:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    10f4:	61726700 	cmnvs	r2, r0, lsl #14
    10f8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    10fc:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    1100:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
    1104:	00657a69 	rsbeq	r7, r5, r9, ror #20
    1108:	70617267 	rsbvc	r7, r1, r7, ror #4
    110c:	5f636968 	svcpl	0x00636968
    1110:	61656c63 	cmnvs	r5, r3, ror #24
    1114:	63735f72 	cmnvs	r3, #456	; 0x1c8
    1118:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    111c:	616f6c00 	cmnvs	pc, r0, lsl #24
    1120:	6d695f64 	stclvs	15, cr5, [r9, #-400]!	; 0xfffffe70
    1124:	00656761 	rsbeq	r6, r5, r1, ror #14
    1128:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    112c:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    1130:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    1134:	6f62616c 	svcvs	0x0062616c
    1138:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    113c:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    1140:	5049442f 	subpl	r4, r9, pc, lsr #8
    1144:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    1148:	2f686374 	svccs	0x00686374
    114c:	6d692f43 	stclvs	15, cr2, [r9, #-268]!	; 0xfffffef4
    1150:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
    1154:	6f6c0063 	svcvs	0x006c0063
    1158:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
    115c:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
    1160:	3a430065 	bcc	10c12fc <startup-0x1ef3ed04>
    1164:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
    1168:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 10b4 <startup-0x1fffef4c>
    116c:	616c706f 	cmnvs	ip, pc, rrx
    1170:	61726f62 	cmnvs	r2, r2, ror #30
    1174:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1178:	442f7265 	strtmi	r7, [pc], #-613	; 1180 <startup-0x1fffee80>
    117c:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
    1180:	63746957 	cmnvs	r4, #1425408	; 0x15c000
    1184:	2f432f68 	svccs	0x00432f68
    1188:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
    118c:	632e6574 			; <UNDEFINED> instruction: 0x632e6574
    1190:	646f4d00 	strbtvs	r4, [pc], #-3328	; 1198 <startup-0x1fffee68>
    1194:	73007265 	movwvc	r7, #613	; 0x265
    1198:	755f7465 	ldrbvc	r7, [pc, #-1125]	; d3b <startup-0x1ffff2c5>
    119c:	49445f70 	stmdbmi	r4, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    11a0:	646f004c 	strbtvs	r0, [pc], #-76	; 11a8 <startup-0x1fffee58>
    11a4:	67694872 			; <UNDEFINED> instruction: 0x67694872
    11a8:	546f0068 	strbtpl	r0, [pc], #-104	; 11b0 <startup-0x1fffee50>
    11ac:	72657079 	rsbvc	r7, r5, #121	; 0x79
    11b0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    11b4:	7550004f 	ldrbvc	r0, [r0, #-79]	; 0xffffffb1
    11b8:	00726450 	rsbseq	r6, r2, r0, asr r4
    11bc:	52726469 	rsbspl	r6, r2, #1761607680	; 0x69000000
    11c0:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    11c4:	00646576 	rsbeq	r6, r4, r6, ror r5
    11c8:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    11cc:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    11d0:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    11d4:	6f62616c 	svcvs	0x0062616c
    11d8:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    11dc:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    11e0:	5049442f 	subpl	r4, r9, pc, lsr #8
    11e4:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    11e8:	2f686374 	svccs	0x00686374
    11ec:	70672f43 	rsbvc	r2, r7, r3, asr #30
    11f0:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
    11f4:	52746f00 	rsbspl	r6, r4, #0, 30
    11f8:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    11fc:	00646576 	rsbeq	r6, r4, r6, ror r5
    1200:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1204:	4c49445f 	cfstrdmi	mvd4, [r9], {95}	; 0x5f
    1208:	6e69735f 	mcrvs	3, 3, r7, cr9, cr15, {2}
    120c:	00656c67 	rsbeq	r6, r5, r7, ror #24
    1210:	4c72646f 	cfldrdmi	mvd6, [r2], #-444	; 0xfffffe44
    1214:	6f00776f 	svcvs	0x0000776f
    1218:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
    121c:	69007264 	stmdbvs	r0, {r2, r5, r6, r9, ip, sp, lr}
    1220:	69487264 	stmdbvs	r8, {r2, r5, r6, r9, ip, sp, lr}^
    1224:	69006867 	stmdbvs	r0, {r0, r1, r2, r5, r6, fp, sp, lr}
    1228:	6f4c7264 	svcvs	0x004c7264
    122c:	646f0077 	strbtvs	r0, [pc], #-119	; 1234 <startup-0x1fffedcc>
    1230:	73655272 	cmnvc	r5, #536870919	; 0x20000007
    1234:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    1238:	65720064 	ldrbvs	r0, [r2, #-100]!	; 0xffffff9c
    123c:	445f6461 	ldrbmi	r6, [pc], #-1121	; 1244 <startup-0x1fffedbc>
    1240:	69004c49 	stmdbvs	r0, {r0, r3, r6, sl, fp, lr}
    1244:	5f74696e 	svcpl	0x0074696e
    1248:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
    124c:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
    1250:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1254:	696d696c 	stmdbvs	sp!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    1258:	61003274 	tstvs	r0, r4, ror r2
    125c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1260:	6165725f 	cmnvs	r5, pc, asr r2
    1264:	61645f64 	cmnvs	r4, r4, ror #30
    1268:	73006174 	movwvc	r6, #372	; 0x174
    126c:	755f7465 	ldrbvc	r7, [pc, #-1125]	; e0f <startup-0x1ffff1f1>
    1270:	73615f70 	cmnvc	r1, #112, 30	; 0x1c0
    1274:	00696963 	rsbeq	r6, r9, r3, ror #18
    1278:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    127c:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
    1280:	63007469 	movwvs	r7, #1129	; 0x469
    1284:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
    1288:	6c63006e 	stclvs	0, cr0, [r3], #-440	; 0xfffffe48
    128c:	5f726165 	svcpl	0x00726165
    1290:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1294:	73610069 	cmnvc	r1, #105	; 0x69
    1298:	5f696963 	svcpl	0x00696963
    129c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    12a0:	61705f65 	cmnvs	r0, r5, ror #30
    12a4:	61007472 	tstvs	r0, r2, ror r4
    12a8:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    12ac:	6165725f 	cmnvs	r5, pc, asr r2
    12b0:	6f635f64 	svcvs	0x00635f64
    12b4:	6f72746e 	svcvs	0x0072746e
    12b8:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
    12bc:	63736100 	cmnvs	r3, #0, 2
    12c0:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
    12c4:	5f6c7274 	svcpl	0x006c7274
    12c8:	5f746962 	svcpl	0x00746962
    12cc:	00746573 	rsbseq	r6, r4, r3, ror r5
    12d0:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    12d4:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
    12d8:	5f657469 	svcpl	0x00657469
    12dc:	00646d63 	rsbeq	r6, r4, r3, ror #26
    12e0:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
    12e4:	65740031 	ldrbvs	r0, [r4, #-49]!	; 0xffffffcf
    12e8:	00327473 	eorseq	r7, r2, r3, ror r4
    12ec:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
    12f0:	00737365 	rsbseq	r7, r3, r5, ror #6
    12f4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    12f8:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
    12fc:	5f657469 	svcpl	0x00657469
    1300:	61746164 	cmnvs	r4, r4, ror #2
    1304:	63736100 	cmnvs	r3, #0, 2
    1308:	745f6969 	ldrbvc	r6, [pc], #-2409	; 1310 <startup-0x1fffecf0>
    130c:	00747365 	rsbseq	r7, r4, r5, ror #6
    1310:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1314:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
    1318:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
    131c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    1320:	73610073 	cmnvc	r1, #115	; 0x73
    1324:	5f696963 	svcpl	0x00696963
    1328:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    132c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1330:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
    1334:	61007261 	tstvs	r0, r1, ror #4
    1338:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    133c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    1340:	61006574 	tstvs	r0, r4, ror r5
    1344:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1348:	546f675f 	strbtpl	r6, [pc], #-1887	; 1350 <startup-0x1fffecb0>
    134c:	0059586f 	subseq	r5, r9, pc, ror #16
    1350:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1354:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
    1358:	5f657469 	svcpl	0x00657469
    135c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
    1360:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
    1364:	61007265 	tstvs	r0, r5, ror #4
    1368:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    136c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    1370:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
    1374:	00726168 	rsbseq	r6, r2, r8, ror #2
    1378:	696d696c 	stmdbvs	sp!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    137c:	43003174 	movwmi	r3, #372	; 0x174
    1380:	6f6d2f3a 	svcvs	0x006d2f3a
    1384:	2f632f70 	svccs	0x00632f70
    1388:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    138c:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    1390:	6f697461 	svcvs	0x00697461
    1394:	2f72656e 	svccs	0x0072656e
    1398:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    139c:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    13a0:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    13a4:	6373612f 	cmnvs	r3, #-1073741813	; 0xc000000b
    13a8:	645f6969 	ldrbvs	r6, [pc], #-2409	; 13b0 <startup-0x1fffec50>
    13ac:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
    13b0:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
    13b4:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
    13b8:	6c735f74 	ldclvs	15, cr5, [r3], #-464	; 0xfffffe30
    13bc:	745f776f 	ldrbvc	r7, [pc], #-1903	; 13c4 <startup-0x1fffec3c>
    13c0:	00747865 	rsbseq	r7, r4, r5, ror #16
    13c4:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
    13c8:	6f5f6874 	svcvs	0x005f6874
    13cc:	6f725f66 	svcvs	0x00725f66
    13d0:	43003177 	movwmi	r3, #375	; 0x177
    13d4:	6f6d2f3a 	svcvs	0x006d2f3a
    13d8:	2f632f70 	svccs	0x00632f70
    13dc:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    13e0:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    13e4:	6f697461 	svcvs	0x00697461
    13e8:	2f72656e 	svccs	0x0072656e
    13ec:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    13f0:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    13f4:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    13f8:	6f6c732f 	svcvs	0x006c732f
    13fc:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
    1400:	632e7478 			; <UNDEFINED> instruction: 0x632e7478
    1404:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1408:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    140c:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    1410:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
    1414:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1418:	616c4273 	smcvs	50211	; 0xc423
    141c:	69006b63 	stmdbvs	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    1420:	6f6f646e 	svcvs	0x006f646e
    1424:	6d497372 	stclvs	3, cr7, [r9, #-456]	; 0xfffffe38
    1428:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    142c:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1430:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1434:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
    1438:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
    143c:	00737469 	rsbseq	r7, r3, r9, ror #8
    1440:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1444:	6f646e49 	svcvs	0x00646e49
    1448:	4773726f 	ldrbmi	r7, [r3, -pc, ror #4]!
    144c:	00796172 	rsbseq	r6, r9, r2, ror r1
    1450:	6f646e69 	svcvs	0x00646e69
    1454:	5f73726f 	svcpl	0x0073726f
    1458:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
    145c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1460:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    1464:	6e49706d 	cdpvs	0, 4, cr7, cr9, cr13, {3}
    1468:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    146c:	67694c73 			; <UNDEFINED> instruction: 0x67694c73
    1470:	69007468 	stmdbvs	r0, {r3, r5, r6, sl, ip, sp, lr}
    1474:	6f6f646e 	svcvs	0x006f646e
    1478:	694c7372 	stmdbvs	ip, {r1, r4, r5, r6, r8, r9, ip, sp, lr}^
    147c:	00746867 	rsbseq	r6, r4, r7, ror #16
    1480:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    1484:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    1488:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    148c:	6f62616c 	svcvs	0x0062616c
    1490:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1494:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    1498:	5049442f 	subpl	r4, r9, pc, lsr #8
    149c:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    14a0:	2f686374 	svccs	0x00686374
    14a4:	6e692f43 	cdpvs	15, 6, cr2, cr9, cr3, {2}
    14a8:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    14ac:	00632e73 	rsbeq	r2, r3, r3, ror lr
    14b0:	6f646e69 	svcvs	0x00646e69
    14b4:	5f73726f 	svcpl	0x0073726f
    14b8:	63616c62 	cmnvs	r1, #25088	; 0x6200
    14bc:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    14c0:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
    14c4:	49706d65 	ldmdbmi	r0!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    14c8:	6f6f646e 	svcvs	0x006f646e
    14cc:	6c427372 	mcrrvs	3, 7, r7, r2, cr2
    14d0:	006b6361 	rsbeq	r6, fp, r1, ror #6
    14d4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    14d8:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
    14dc:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    14e0:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    14e4:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    14e8:	006a624f 	rsbeq	r6, sl, pc, asr #4
    14ec:	6f646e69 	svcvs	0x00646e69
    14f0:	4773726f 	ldrbmi	r7, [r3, -pc, ror #4]!
    14f4:	00796172 	rsbseq	r6, r9, r2, ror r1
    14f8:	6f646e69 	svcvs	0x00646e69
    14fc:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1500:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    1504:	6e690074 	mcrvs	0, 3, r0, cr9, cr4, {3}
    1508:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    150c:	625f3273 	subsvs	r3, pc, #805306375	; 0x30000007
    1510:	6b63616c 	blvs	18d9ac8 <startup-0x1e726538>
    1514:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1518:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    151c:	6e49706d 	cdpvs	0, 4, cr7, cr9, cr13, {3}
    1520:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1524:	694c3273 	stmdbvs	ip, {r0, r1, r4, r5, r6, r9, ip, sp}^
    1528:	00746867 	rsbseq	r6, r4, r7, ror #16
    152c:	6f646e69 	svcvs	0x00646e69
    1530:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1534:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    1538:	2f3a4300 	svccs	0x003a4300
    153c:	2f706f6d 	svccs	0x00706f6d
    1540:	6f4d2f63 	svcvs	0x004d2f63
    1544:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    1548:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    154c:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    1550:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1554:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    1558:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    155c:	692f432f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r8, r9, lr}	; <UNPREDICTABLE>
    1560:	6f6f646e 	svcvs	0x006f646e
    1564:	2e327372 	mrccs	3, 1, r7, cr2, cr2, {3}
    1568:	65740063 	ldrbvs	r0, [r4, #-99]!	; 0xffffff9d
    156c:	6e49706d 	cdpvs	0, 4, cr7, cr9, cr13, {3}
    1570:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1574:	6c423273 	sfmvs	f3, 2, [r2], {115}	; 0x73
    1578:	006b6361 	rsbeq	r6, fp, r1, ror #6
    157c:	6f646e69 	svcvs	0x00646e69
    1580:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1584:	63616c42 	cmnvs	r1, #16896	; 0x4200
    1588:	6e69006b 	cdpvs	0, 6, cr0, cr9, cr11, {3}
    158c:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1590:	6d493273 	sfmvs	f3, 2, [r9, #-460]	; 0xfffffe34
    1594:	00656761 	rsbeq	r6, r5, r1, ror #14
    1598:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    159c:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
    15a0:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    15a4:	6e690032 	mcrvs	0, 3, r0, cr9, cr2, {1}
    15a8:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    15ac:	6c5f3273 	lfmvs	f3, 2, [pc], {115}	; 0x73
    15b0:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    15b4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    15b8:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
    15bc:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    15c0:	6d493273 	sfmvs	f3, 2, [r9, #-460]	; 0xfffffe34
    15c4:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    15c8:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    15cc:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    15d0:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
    15d4:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
    15d8:	00737469 	rsbseq	r7, r3, r9, ror #8
    15dc:	6f646e69 	svcvs	0x00646e69
    15e0:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    15e4:	006a624f 	rsbeq	r6, sl, pc, asr #4
    15e8:	706d6574 	rsbvc	r6, sp, r4, ror r5
    15ec:	6f646e49 	svcvs	0x00646e49
    15f0:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    15f4:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000024 	andeq	r0, r0, r4, lsr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000034 	andcs	r0, r0, r4, lsr r0
  48:	000001c8 	andeq	r0, r0, r8, asr #3
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	300e4101 	andcc	r4, lr, r1, lsl #2
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	00000020 	andeq	r0, r0, r0, lsr #32
  60:	00000000 	andeq	r0, r0, r0
  64:	200001fc 	strdcs	r0, [r0], -ip
  68:	00000a80 	andeq	r0, r0, r0, lsl #21
  6c:	400c0e41 	andmi	r0, ip, r1, asr #28
  70:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  74:	018e4002 	orreq	r4, lr, r2
  78:	06a80e42 	strteq	r0, [r8], r2, asr #28
  7c:	00070d41 	andeq	r0, r7, r1, asr #26
  80:	0000000c 	andeq	r0, r0, ip
  84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  88:	7c020001 	stcvc	0, cr0, [r2], {1}
  8c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000080 	andeq	r0, r0, r0, lsl #1
  98:	20000c7c 	andcs	r0, r0, ip, ror ip
  9c:	00000010 	andeq	r0, r0, r0, lsl r0
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	100e4101 	andne	r4, lr, r1, lsl #2
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000080 	andeq	r0, r0, r0, lsl #1
  b8:	20000c8c 	andcs	r0, r0, ip, lsl #25
  bc:	00000046 	andeq	r0, r0, r6, asr #32
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	100e4101 	andne	r4, lr, r1, lsl #2
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000000c 	andeq	r0, r0, ip
  d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  d8:	7c020001 	stcvc	0, cr0, [r2], {1}
  dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  e8:	20000cd4 	ldrdcs	r0, [r0], -r4
  ec:	00000184 	andeq	r0, r0, r4, lsl #3
  f0:	40080e41 	andmi	r0, r8, r1, asr #28
  f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f8:	380e4101 	stmdacc	lr, {r0, r8, lr}
  fc:	00070d41 	andeq	r0, r7, r1, asr #26
 100:	00000020 	andeq	r0, r0, r0, lsr #32
 104:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 108:	20000e58 	andcs	r0, r0, r8, asr lr
 10c:	00000124 	andeq	r0, r0, r4, lsr #2
 110:	400c0e41 	andmi	r0, ip, r1, asr #28
 114:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 118:	018e4002 	orreq	r4, lr, r2
 11c:	41180e41 	tstmi	r8, r1, asr #28
 120:	0000070d 	andeq	r0, r0, sp, lsl #14
 124:	0000000c 	andeq	r0, r0, ip
 128:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 12c:	7c020001 	stcvc	0, cr0, [r2], {1}
 130:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 134:	0000001c 	andeq	r0, r0, ip, lsl r0
 138:	00000124 	andeq	r0, r0, r4, lsr #2
 13c:	20000f7c 	andcs	r0, r0, ip, ror pc
 140:	000000d8 	ldrdeq	r0, [r0], -r8
 144:	40080e41 	andmi	r0, r8, r1, asr #28
 148:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 14c:	100e4101 	andne	r4, lr, r1, lsl #2
 150:	00070d41 	andeq	r0, r7, r1, asr #26
 154:	0000000c 	andeq	r0, r0, ip
 158:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 15c:	7c020001 	stcvc	0, cr0, [r2], {1}
 160:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 164:	0000001c 	andeq	r0, r0, ip, lsl r0
 168:	00000154 	andeq	r0, r0, r4, asr r1
 16c:	20001054 	andcs	r1, r0, r4, asr r0
 170:	0000020c 	andeq	r0, r0, ip, lsl #4
 174:	40080e41 	andmi	r0, r8, r1, asr #28
 178:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 17c:	480e4101 	stmdami	lr, {r0, r8, lr}
 180:	00070d41 	andeq	r0, r7, r1, asr #26
 184:	00000020 	andeq	r0, r0, r0, lsr #32
 188:	00000154 	andeq	r0, r0, r4, asr r1
 18c:	20001260 	andcs	r1, r0, r0, ror #4
 190:	00000158 	andeq	r0, r0, r8, asr r1
 194:	400c0e41 	andmi	r0, ip, r1, asr #28
 198:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 19c:	018e4002 	orreq	r4, lr, r2
 1a0:	41180e41 	tstmi	r8, r1, asr #28
 1a4:	0000070d 	andeq	r0, r0, sp, lsl #14
 1a8:	0000000c 	andeq	r0, r0, ip
 1ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1b0:	7c020001 	stcvc	0, cr0, [r2], {1}
 1b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1bc:	000001a8 	andeq	r0, r0, r8, lsr #3
 1c0:	200013b8 			; <UNDEFINED> instruction: 0x200013b8
 1c4:	00000140 	andeq	r0, r0, r0, asr #2
 1c8:	40080e41 	andmi	r0, r8, r1, asr #28
 1cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d0:	300e4101 	andcc	r4, lr, r1, lsl #2
 1d4:	00070d41 	andeq	r0, r7, r1, asr #26
 1d8:	00000020 	andeq	r0, r0, r0, lsr #32
 1dc:	000001a8 	andeq	r0, r0, r8, lsr #3
 1e0:	200014f8 	strdcs	r1, [r0], -r8
 1e4:	000000f8 	strdeq	r0, [r0], -r8
 1e8:	400c0e41 	andmi	r0, ip, r1, asr #28
 1ec:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 1f0:	018e4002 	orreq	r4, lr, r2
 1f4:	41180e41 	tstmi	r8, r1, asr #28
 1f8:	0000070d 	andeq	r0, r0, sp, lsl #14
 1fc:	0000000c 	andeq	r0, r0, ip
 200:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 204:	7c020001 	stcvc	0, cr0, [r2], {1}
 208:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 20c:	00000018 	andeq	r0, r0, r8, lsl r0
 210:	000001fc 	strdeq	r0, [r0], -ip
 214:	200015f0 	strdcs	r1, [r0], -r0
 218:	00000044 	andeq	r0, r0, r4, asr #32
 21c:	40080e41 	andmi	r0, r8, r1, asr #28
 220:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 224:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 228:	00000018 	andeq	r0, r0, r8, lsl r0
 22c:	000001fc 	strdeq	r0, [r0], -ip
 230:	20001634 	andcs	r1, r0, r4, lsr r6
 234:	00000044 	andeq	r0, r0, r4, asr #32
 238:	40080e41 	andmi	r0, r8, r1, asr #28
 23c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 240:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 244:	0000001c 	andeq	r0, r0, ip, lsl r0
 248:	000001fc 	strdeq	r0, [r0], -ip
 24c:	20001678 	andcs	r1, r0, r8, ror r6
 250:	0000002c 	andeq	r0, r0, ip, lsr #32
 254:	40080e41 	andmi	r0, r8, r1, asr #28
 258:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 25c:	100e4101 	andne	r4, lr, r1, lsl #2
 260:	00070d41 	andeq	r0, r7, r1, asr #26
 264:	0000001c 	andeq	r0, r0, ip, lsl r0
 268:	000001fc 	strdeq	r0, [r0], -ip
 26c:	200016a4 	andcs	r1, r0, r4, lsr #13
 270:	00000026 	andeq	r0, r0, r6, lsr #32
 274:	40080e41 	andmi	r0, r8, r1, asr #28
 278:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 27c:	100e4101 	andne	r4, lr, r1, lsl #2
 280:	00070d41 	andeq	r0, r7, r1, asr #26
 284:	0000001c 	andeq	r0, r0, ip, lsl r0
 288:	000001fc 	strdeq	r0, [r0], -ip
 28c:	200016ca 	andcs	r1, r0, sl, asr #13
 290:	00000032 	andeq	r0, r0, r2, lsr r0
 294:	40080e41 	andmi	r0, r8, r1, asr #28
 298:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 29c:	180e4101 	stmdane	lr, {r0, r8, lr}
 2a0:	00070d41 	andeq	r0, r7, r1, asr #26
 2a4:	00000018 	andeq	r0, r0, r8, lsl r0
 2a8:	000001fc 	strdeq	r0, [r0], -ip
 2ac:	200016fc 	strdcs	r1, [r0], -ip
 2b0:	00000018 	andeq	r0, r0, r8, lsl r0
 2b4:	40080e41 	andmi	r0, r8, r1, asr #28
 2b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2bc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2c0:	00000018 	andeq	r0, r0, r8, lsl r0
 2c4:	000001fc 	strdeq	r0, [r0], -ip
 2c8:	20001714 	andcs	r1, r0, r4, lsl r7
 2cc:	00000030 	andeq	r0, r0, r0, lsr r0
 2d0:	40080e41 	andmi	r0, r8, r1, asr #28
 2d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e0:	000001fc 	strdeq	r0, [r0], -ip
 2e4:	20001744 	andcs	r1, r0, r4, asr #14
 2e8:	00000050 	andeq	r0, r0, r0, asr r0
 2ec:	40080e41 	andmi	r0, r8, r1, asr #28
 2f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2f8:	00070d41 	andeq	r0, r7, r1, asr #26
 2fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 300:	000001fc 	strdeq	r0, [r0], -ip
 304:	20001794 	mulcs	r0, r4, r7
 308:	00000058 	andeq	r0, r0, r8, asr r0
 30c:	40080e41 	andmi	r0, r8, r1, asr #28
 310:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 314:	180e4101 	stmdane	lr, {r0, r8, lr}
 318:	00070d41 	andeq	r0, r7, r1, asr #26
 31c:	0000001c 	andeq	r0, r0, ip, lsl r0
 320:	000001fc 	strdeq	r0, [r0], -ip
 324:	200017ec 	andcs	r1, r0, ip, ror #15
 328:	00000066 	andeq	r0, r0, r6, rrx
 32c:	40080e41 	andmi	r0, r8, r1, asr #28
 330:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 334:	100e4101 	andne	r4, lr, r1, lsl #2
 338:	00070d41 	andeq	r0, r7, r1, asr #26
 33c:	0000001c 	andeq	r0, r0, ip, lsl r0
 340:	000001fc 	strdeq	r0, [r0], -ip
 344:	20001852 	andcs	r1, r0, r2, asr r8
 348:	0000006e 	andeq	r0, r0, lr, rrx
 34c:	40080e41 	andmi	r0, r8, r1, asr #28
 350:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 354:	100e4101 	andne	r4, lr, r1, lsl #2
 358:	00070d41 	andeq	r0, r7, r1, asr #26
 35c:	0000001c 	andeq	r0, r0, ip, lsl r0
 360:	000001fc 	strdeq	r0, [r0], -ip
 364:	200018c0 	andcs	r1, r0, r0, asr #17
 368:	00000094 	muleq	r0, r4, r0
 36c:	40080e41 	andmi	r0, r8, r1, asr #28
 370:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 374:	180e4101 	stmdane	lr, {r0, r8, lr}
 378:	00070d41 	andeq	r0, r7, r1, asr #26
 37c:	0000001c 	andeq	r0, r0, ip, lsl r0
 380:	000001fc 	strdeq	r0, [r0], -ip
 384:	20001954 	andcs	r1, r0, r4, asr r9
 388:	0000002a 	andeq	r0, r0, sl, lsr #32
 38c:	40080e41 	andmi	r0, r8, r1, asr #28
 390:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 394:	100e4101 	andne	r4, lr, r1, lsl #2
 398:	00070d41 	andeq	r0, r7, r1, asr #26
 39c:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a0:	000001fc 	strdeq	r0, [r0], -ip
 3a4:	2000197e 	andcs	r1, r0, lr, ror r9
 3a8:	0000007e 	andeq	r0, r0, lr, ror r0
 3ac:	40080e41 	andmi	r0, r8, r1, asr #28
 3b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3b4:	100e4101 	andne	r4, lr, r1, lsl #2
 3b8:	00070d41 	andeq	r0, r7, r1, asr #26
 3bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c0:	000001fc 	strdeq	r0, [r0], -ip
 3c4:	200019fc 	strdcs	r1, [r0], -ip
 3c8:	00000046 	andeq	r0, r0, r6, asr #32
 3cc:	40080e41 	andmi	r0, r8, r1, asr #28
 3d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3d4:	100e4101 	andne	r4, lr, r1, lsl #2
 3d8:	00070d41 	andeq	r0, r7, r1, asr #26
 3dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e0:	000001fc 	strdeq	r0, [r0], -ip
 3e4:	20001a42 	andcs	r1, r0, r2, asr #20
 3e8:	00000046 	andeq	r0, r0, r6, asr #32
 3ec:	40080e41 	andmi	r0, r8, r1, asr #28
 3f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3f4:	100e4101 	andne	r4, lr, r1, lsl #2
 3f8:	00070d41 	andeq	r0, r7, r1, asr #26
 3fc:	00000018 	andeq	r0, r0, r8, lsl r0
 400:	000001fc 	strdeq	r0, [r0], -ip
 404:	20001a88 	andcs	r1, r0, r8, lsl #21
 408:	0000006e 	andeq	r0, r0, lr, rrx
 40c:	40080e41 	andmi	r0, r8, r1, asr #28
 410:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 414:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 418:	0000001c 	andeq	r0, r0, ip, lsl r0
 41c:	000001fc 	strdeq	r0, [r0], -ip
 420:	20001af6 	strdcs	r1, [r0], -r6
 424:	00000066 	andeq	r0, r0, r6, rrx
 428:	40080e41 	andmi	r0, r8, r1, asr #28
 42c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 430:	100e4101 	andne	r4, lr, r1, lsl #2
 434:	00070d41 	andeq	r0, r7, r1, asr #26
 438:	0000001c 	andeq	r0, r0, ip, lsl r0
 43c:	000001fc 	strdeq	r0, [r0], -ip
 440:	20001b5c 	andcs	r1, r0, ip, asr fp
 444:	00000180 	andeq	r0, r0, r0, lsl #3
 448:	40080e41 	andmi	r0, r8, r1, asr #28
 44c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 450:	200e4101 	andcs	r4, lr, r1, lsl #2
 454:	00070d41 	andeq	r0, r7, r1, asr #26
 458:	0000001c 	andeq	r0, r0, ip, lsl r0
 45c:	000001fc 	strdeq	r0, [r0], -ip
 460:	20001cdc 	ldrdcs	r1, [r0], -ip
 464:	000001a0 	andeq	r0, r0, r0, lsr #3
 468:	40080e41 	andmi	r0, r8, r1, asr #28
 46c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 470:	280e4101 	stmdacs	lr, {r0, r8, lr}
 474:	00070d41 	andeq	r0, r7, r1, asr #26
 478:	0000001c 	andeq	r0, r0, ip, lsl r0
 47c:	000001fc 	strdeq	r0, [r0], -ip
 480:	20001e7c 	andcs	r1, r0, ip, ror lr
 484:	000000d6 	ldrdeq	r0, [r0], -r6
 488:	40080e41 	andmi	r0, r8, r1, asr #28
 48c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 490:	200e4101 	andcs	r4, lr, r1, lsl #2
 494:	00070d41 	andeq	r0, r7, r1, asr #26
 498:	00000024 	andeq	r0, r0, r4, lsr #32
 49c:	000001fc 	strdeq	r0, [r0], -ip
 4a0:	20001f52 	andcs	r1, r0, r2, asr pc
 4a4:	0000011a 	andeq	r0, r0, sl, lsl r1
 4a8:	40100e41 	andsmi	r0, r0, r1, asr #28
 4ac:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 4b0:	02874003 	addeq	r4, r7, #3
 4b4:	41018e40 	tstmi	r1, r0, asr #28
 4b8:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 4bc:	00000007 	andeq	r0, r0, r7
 4c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4c4:	000001fc 	strdeq	r0, [r0], -ip
 4c8:	2000206c 	andcs	r2, r0, ip, rrx
 4cc:	00000052 	andeq	r0, r0, r2, asr r0
 4d0:	40080e41 	andmi	r0, r8, r1, asr #28
 4d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4d8:	200e4101 	andcs	r4, lr, r1, lsl #2
 4dc:	00070d41 	andeq	r0, r7, r1, asr #26
 4e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4e4:	000001fc 	strdeq	r0, [r0], -ip
 4e8:	200020be 	strhcs	r2, [r0], -lr
 4ec:	00000052 	andeq	r0, r0, r2, asr r0
 4f0:	40080e41 	andmi	r0, r8, r1, asr #28
 4f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4f8:	200e4101 	andcs	r4, lr, r1, lsl #2
 4fc:	00070d41 	andeq	r0, r7, r1, asr #26
 500:	00000020 	andeq	r0, r0, r0, lsr #32
 504:	000001fc 	strdeq	r0, [r0], -ip
 508:	20002110 	andcs	r2, r0, r0, lsl r1
 50c:	00000130 	andeq	r0, r0, r0, lsr r1
 510:	400c0e41 	andmi	r0, ip, r1, asr #28
 514:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 518:	018e4002 	orreq	r4, lr, r2
 51c:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 520:	0000070d 	andeq	r0, r0, sp, lsl #14
 524:	0000001c 	andeq	r0, r0, ip, lsl r0
 528:	000001fc 	strdeq	r0, [r0], -ip
 52c:	20002240 	andcs	r2, r0, r0, asr #4
 530:	00000108 	andeq	r0, r0, r8, lsl #2
 534:	40080e41 	andmi	r0, r8, r1, asr #28
 538:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 53c:	100e4101 	andne	r4, lr, r1, lsl #2
 540:	00070d41 	andeq	r0, r7, r1, asr #26
 544:	0000001c 	andeq	r0, r0, ip, lsl r0
 548:	000001fc 	strdeq	r0, [r0], -ip
 54c:	20002348 	andcs	r2, r0, r8, asr #6
 550:	00000082 	andeq	r0, r0, r2, lsl #1
 554:	40080e41 	andmi	r0, r8, r1, asr #28
 558:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 55c:	200e4101 	andcs	r4, lr, r1, lsl #2
 560:	18070c41 	stmdane	r7, {r0, r6, sl, fp}
 564:	0000001c 	andeq	r0, r0, ip, lsl r0
 568:	000001fc 	strdeq	r0, [r0], -ip
 56c:	200023ca 	andcs	r2, r0, sl, asr #7
 570:	0000006a 	andeq	r0, r0, sl, rrx
 574:	40080e41 	andmi	r0, r8, r1, asr #28
 578:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 57c:	100e4101 	andne	r4, lr, r1, lsl #2
 580:	00070d41 	andeq	r0, r7, r1, asr #26
 584:	0000000c 	andeq	r0, r0, ip
 588:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 58c:	7c020001 	stcvc	0, cr0, [r2], {1}
 590:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 594:	0000001c 	andeq	r0, r0, ip, lsl r0
 598:	00000584 	andeq	r0, r0, r4, lsl #11
 59c:	20002434 	andcs	r2, r0, r4, lsr r4
 5a0:	00000028 	andeq	r0, r0, r8, lsr #32
 5a4:	40080e41 	andmi	r0, r8, r1, asr #28
 5a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5ac:	180e4101 	stmdane	lr, {r0, r8, lr}
 5b0:	00070d41 	andeq	r0, r7, r1, asr #26
 5b4:	0000000c 	andeq	r0, r0, ip
 5b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 5bc:	7c020001 	stcvc	0, cr0, [r2], {1}
 5c0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5c8:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
 5cc:	2000245c 	andcs	r2, r0, ip, asr r4
 5d0:	00000028 	andeq	r0, r0, r8, lsr #32
 5d4:	40080e41 	andmi	r0, r8, r1, asr #28
 5d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5dc:	180e4101 	stmdane	lr, {r0, r8, lr}
 5e0:	00070d41 	andeq	r0, r7, r1, asr #26
 5e4:	0000000c 	andeq	r0, r0, ip
 5e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 5ec:	7c020001 	stcvc	0, cr0, [r2], {1}
 5f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5f4:	00000018 	andeq	r0, r0, r8, lsl r0
 5f8:	000005e4 	andeq	r0, r0, r4, ror #11
 5fc:	20002484 	andcs	r2, r0, r4, lsl #9
 600:	00000018 	andeq	r0, r0, r8, lsl r0
 604:	40080e41 	andmi	r0, r8, r1, asr #28
 608:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 60c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 610:	00000018 	andeq	r0, r0, r8, lsl r0
 614:	000005e4 	andeq	r0, r0, r4, ror #11
 618:	2000249c 	mulcs	r0, ip, r4
 61c:	00000014 	andeq	r0, r0, r4, lsl r0
 620:	40080e41 	andmi	r0, r8, r1, asr #28
 624:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 628:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 62c:	00000020 	andeq	r0, r0, r0, lsr #32
 630:	000005e4 	andeq	r0, r0, r4, ror #11
 634:	200024b0 			; <UNDEFINED> instruction: 0x200024b0
 638:	00000034 	andeq	r0, r0, r4, lsr r0
 63c:	400c0e41 	andmi	r0, ip, r1, asr #28
 640:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 644:	018e4002 	orreq	r4, lr, r2
 648:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 64c:	0000070d 	andeq	r0, r0, sp, lsl #14
 650:	0000000c 	andeq	r0, r0, ip
 654:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 658:	7c020001 	stcvc	0, cr0, [r2], {1}
 65c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 660:	0000001c 	andeq	r0, r0, ip, lsl r0
 664:	00000650 	andeq	r0, r0, r0, asr r6
 668:	200024e4 	andcs	r2, r0, r4, ror #9
 66c:	00000044 	andeq	r0, r0, r4, asr #32
 670:	40080e41 	andmi	r0, r8, r1, asr #28
 674:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 678:	180e4101 	stmdane	lr, {r0, r8, lr}
 67c:	00070d41 	andeq	r0, r7, r1, asr #26
 680:	0000001c 	andeq	r0, r0, ip, lsl r0
 684:	00000650 	andeq	r0, r0, r0, asr r6
 688:	20002528 	andcs	r2, r0, r8, lsr #10
 68c:	00000050 	andeq	r0, r0, r0, asr r0
 690:	40080e41 	andmi	r0, r8, r1, asr #28
 694:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 698:	180e4101 	stmdane	lr, {r0, r8, lr}
 69c:	00070d41 	andeq	r0, r7, r1, asr #26
 6a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6a4:	00000650 	andeq	r0, r0, r0, asr r6
 6a8:	20002578 	andcs	r2, r0, r8, ror r5
 6ac:	0000002a 	andeq	r0, r0, sl, lsr #32
 6b0:	40080e41 	andmi	r0, r8, r1, asr #28
 6b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6b8:	100e4101 	andne	r4, lr, r1, lsl #2
 6bc:	00070d41 	andeq	r0, r7, r1, asr #26
 6c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6c4:	00000650 	andeq	r0, r0, r0, asr r6
 6c8:	200025a2 	andcs	r2, r0, r2, lsr #11
 6cc:	0000002a 	andeq	r0, r0, sl, lsr #32
 6d0:	40080e41 	andmi	r0, r8, r1, asr #28
 6d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6d8:	100e4101 	andne	r4, lr, r1, lsl #2
 6dc:	00070d41 	andeq	r0, r7, r1, asr #26
 6e0:	00000020 	andeq	r0, r0, r0, lsr #32
 6e4:	00000650 	andeq	r0, r0, r0, asr r6
 6e8:	200025cc 	andcs	r2, r0, ip, asr #11
 6ec:	00000054 	andeq	r0, r0, r4, asr r0
 6f0:	400c0e41 	andmi	r0, ip, r1, asr #28
 6f4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 6f8:	018e4002 	orreq	r4, lr, r2
 6fc:	41180e41 	tstmi	r8, r1, asr #28
 700:	0000070d 	andeq	r0, r0, sp, lsl #14
 704:	00000020 	andeq	r0, r0, r0, lsr #32
 708:	00000650 	andeq	r0, r0, r0, asr r6
 70c:	20002620 	andcs	r2, r0, r0, lsr #12
 710:	00000054 	andeq	r0, r0, r4, asr r0
 714:	400c0e41 	andmi	r0, ip, r1, asr #28
 718:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 71c:	018e4002 	orreq	r4, lr, r2
 720:	41180e41 	tstmi	r8, r1, asr #28
 724:	0000070d 	andeq	r0, r0, sp, lsl #14
 728:	0000001c 	andeq	r0, r0, ip, lsl r0
 72c:	00000650 	andeq	r0, r0, r0, asr r6
 730:	20002674 	andcs	r2, r0, r4, ror r6
 734:	00000030 	andeq	r0, r0, r0, lsr r0
 738:	40080e41 	andmi	r0, r8, r1, asr #28
 73c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 740:	100e4101 	andne	r4, lr, r1, lsl #2
 744:	00070d41 	andeq	r0, r7, r1, asr #26
 748:	0000001c 	andeq	r0, r0, ip, lsl r0
 74c:	00000650 	andeq	r0, r0, r0, asr r6
 750:	200026a4 	andcs	r2, r0, r4, lsr #13
 754:	00000034 	andeq	r0, r0, r4, lsr r0
 758:	40080e41 	andmi	r0, r8, r1, asr #28
 75c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 760:	100e4101 	andne	r4, lr, r1, lsl #2
 764:	00070d41 	andeq	r0, r7, r1, asr #26
 768:	0000001c 	andeq	r0, r0, ip, lsl r0
 76c:	00000650 	andeq	r0, r0, r0, asr r6
 770:	200026d8 	ldrdcs	r2, [r0], -r8
 774:	0000003c 	andeq	r0, r0, ip, lsr r0
 778:	40080e41 	andmi	r0, r8, r1, asr #28
 77c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 780:	100e4101 	andne	r4, lr, r1, lsl #2
 784:	00070d41 	andeq	r0, r7, r1, asr #26
 788:	0000001c 	andeq	r0, r0, ip, lsl r0
 78c:	00000650 	andeq	r0, r0, r0, asr r6
 790:	20002714 	andcs	r2, r0, r4, lsl r7
 794:	00000050 	andeq	r0, r0, r0, asr r0
 798:	40080e41 	andmi	r0, r8, r1, asr #28
 79c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7a0:	180e4101 	stmdane	lr, {r0, r8, lr}
 7a4:	00070d41 	andeq	r0, r7, r1, asr #26
 7a8:	00000018 	andeq	r0, r0, r8, lsl r0
 7ac:	00000650 	andeq	r0, r0, r0, asr r6
 7b0:	20002764 	andcs	r2, r0, r4, ror #14
 7b4:	0000009a 	muleq	r0, sl, r0
 7b8:	40080e41 	andmi	r0, r8, r1, asr #28
 7bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7c0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 7c4:	00000018 	andeq	r0, r0, r8, lsl r0
 7c8:	00000650 	andeq	r0, r0, r0, asr r6
 7cc:	200027fe 	strdcs	r2, [r0], -lr
 7d0:	0000001a 	andeq	r0, r0, sl, lsl r0
 7d4:	40080e41 	andmi	r0, r8, r1, asr #28
 7d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7dc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 7e0:	00000018 	andeq	r0, r0, r8, lsl r0
 7e4:	00000650 	andeq	r0, r0, r0, asr r6
 7e8:	20002818 	andcs	r2, r0, r8, lsl r8
 7ec:	00000012 	andeq	r0, r0, r2, lsl r0
 7f0:	40080e41 	andmi	r0, r8, r1, asr #28
 7f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7f8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 7fc:	00000020 	andeq	r0, r0, r0, lsr #32
 800:	00000650 	andeq	r0, r0, r0, asr r6
 804:	2000282a 	andcs	r2, r0, sl, lsr #16
 808:	0000006a 	andeq	r0, r0, sl, rrx
 80c:	400c0e41 	andmi	r0, ip, r1, asr #28
 810:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 814:	018e4002 	orreq	r4, lr, r2
 818:	41300e41 	teqmi	r0, r1, asr #28
 81c:	0000070d 	andeq	r0, r0, sp, lsl #14
 820:	0000001c 	andeq	r0, r0, ip, lsl r0
 824:	00000650 	andeq	r0, r0, r0, asr r6
 828:	20002894 	mulcs	r0, r4, r8
 82c:	0000005e 	andeq	r0, r0, lr, asr r0
 830:	40080e41 	andmi	r0, r8, r1, asr #28
 834:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 838:	100e4101 	andne	r4, lr, r1, lsl #2
 83c:	00070d41 	andeq	r0, r7, r1, asr #26
 840:	0000001c 	andeq	r0, r0, ip, lsl r0
 844:	00000650 	andeq	r0, r0, r0, asr r6
 848:	200028f2 	strdcs	r2, [r0], -r2	; <UNPREDICTABLE>
 84c:	0000008e 	andeq	r0, r0, lr, lsl #1
 850:	40080e41 	andmi	r0, r8, r1, asr #28
 854:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 858:	200e4101 	andcs	r4, lr, r1, lsl #2
 85c:	00070d41 	andeq	r0, r7, r1, asr #26
 860:	00000020 	andeq	r0, r0, r0, lsr #32
 864:	00000650 	andeq	r0, r0, r0, asr r6
 868:	20002980 	andcs	r2, r0, r0, lsl #19
 86c:	00000084 	andeq	r0, r0, r4, lsl #1
 870:	400c0e41 	andmi	r0, ip, r1, asr #28
 874:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 878:	018e4002 	orreq	r4, lr, r2
 87c:	41380e41 	teqmi	r8, r1, asr #28
 880:	0000070d 	andeq	r0, r0, sp, lsl #14
 884:	0000000c 	andeq	r0, r0, ip
 888:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 88c:	7c020001 	stcvc	0, cr0, [r2], {1}
 890:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 894:	0000001c 	andeq	r0, r0, ip, lsl r0
 898:	00000884 	andeq	r0, r0, r4, lsl #17
 89c:	20002a04 	andcs	r2, r0, r4, lsl #20
 8a0:	0000005a 	andeq	r0, r0, sl, asr r0
 8a4:	40080e41 	andmi	r0, r8, r1, asr #28
 8a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8ac:	180e4101 	stmdane	lr, {r0, r8, lr}
 8b0:	00070d41 	andeq	r0, r7, r1, asr #26
 8b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8b8:	00000884 	andeq	r0, r0, r4, lsl #17
 8bc:	20002a5e 	andcs	r2, r0, lr, asr sl
 8c0:	0000003a 	andeq	r0, r0, sl, lsr r0
 8c4:	40080e41 	andmi	r0, r8, r1, asr #28
 8c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8cc:	180e4101 	stmdane	lr, {r0, r8, lr}
 8d0:	00070d41 	andeq	r0, r7, r1, asr #26
 8d4:	0000000c 	andeq	r0, r0, ip
 8d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8dc:	7c020001 	stcvc	0, cr0, [r2], {1}
 8e0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 8e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8e8:	000008d4 	ldrdeq	r0, [r0], -r4
 8ec:	20002a98 	mulcs	r0, r8, sl
 8f0:	00000074 	andeq	r0, r0, r4, ror r0
 8f4:	40080e41 	andmi	r0, r8, r1, asr #28
 8f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8fc:	180e4101 	stmdane	lr, {r0, r8, lr}
 900:	00070d41 	andeq	r0, r7, r1, asr #26
 904:	00000020 	andeq	r0, r0, r0, lsr #32
 908:	000008d4 	ldrdeq	r0, [r0], -r4
 90c:	20002b0c 	andcs	r2, r0, ip, lsl #22
 910:	00000074 	andeq	r0, r0, r4, ror r0
 914:	400c0e41 	andmi	r0, ip, r1, asr #28
 918:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 91c:	018e4002 	orreq	r4, lr, r2
 920:	41180e41 	tstmi	r8, r1, asr #28
 924:	0000070d 	andeq	r0, r0, sp, lsl #14
 928:	0000000c 	andeq	r0, r0, ip
 92c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 930:	7c020001 	stcvc	0, cr0, [r2], {1}
 934:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 938:	0000001c 	andeq	r0, r0, ip, lsl r0
 93c:	00000928 	andeq	r0, r0, r8, lsr #18
 940:	20002b80 	andcs	r2, r0, r0, lsl #23
 944:	00000074 	andeq	r0, r0, r4, ror r0
 948:	40080e41 	andmi	r0, r8, r1, asr #28
 94c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 950:	180e4101 	stmdane	lr, {r0, r8, lr}
 954:	00070d41 	andeq	r0, r7, r1, asr #26
 958:	00000020 	andeq	r0, r0, r0, lsr #32
 95c:	00000928 	andeq	r0, r0, r8, lsr #18
 960:	20002bf4 	strdcs	r2, [r0], -r4
 964:	00000074 	andeq	r0, r0, r4, ror r0
 968:	400c0e41 	andmi	r0, ip, r1, asr #28
 96c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 970:	018e4002 	orreq	r4, lr, r2
 974:	41180e41 	tstmi	r8, r1, asr #28
 978:	0000070d 	andeq	r0, r0, sp, lsl #14
 97c:	0000000c 	andeq	r0, r0, ip
 980:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 984:	7c010001 	stcvc	0, cr0, [r1], {1}
 988:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 98c:	0000000c 	andeq	r0, r0, ip
 990:	0000097c 	andeq	r0, r0, ip, ror r9
 994:	20002c69 	andcs	r2, r0, r9, ror #24
 998:	000001cc 	andeq	r0, r0, ip, asr #3
