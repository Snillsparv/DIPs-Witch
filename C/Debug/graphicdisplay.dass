
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#endif
}

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f8c8 	bl	20000198 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:
void init_app( void ) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*portModer = 0x55555555;
20000014:	4b05      	ldr	r3, [pc, #20]	; (2000002c <init_app+0x1c>)
20000016:	4a06      	ldr	r2, [pc, #24]	; (20000030 <init_app+0x20>)
20000018:	601a      	str	r2, [r3, #0]
	set_up_DIL();
2000001a:	f001 ffb3 	bl	20001f84 <set_up_DIL>
	graphic_initialize();
2000001e:	f001 fab3 	bl	20001588 <graphic_initialize>
	graphic_clear_screen();
20000022:	f001 fae8 	bl	200015f6 <graphic_clear_screen>
}
20000026:	46c0      	nop			; (mov r8, r8)
20000028:	46bd      	mov	sp, r7
2000002a:	bd80      	pop	{r7, pc}
2000002c:	40021000 	andmi	r1, r2, r0
20000030:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000034 <initSprites>:
sprite tempCastleLight;
sprite tempTitleBlack;
sprite tempTitleGray;
sprite tempTitleLight;

void initSprites( void ) {
20000034:	b580      	push	{r7, lr}
20000036:	b08a      	sub	sp, #40	; 0x28
20000038:	af00      	add	r7, sp, #0
	sprite *monsterPointer = &tempMonster;
2000003a:	4b39      	ldr	r3, [pc, #228]	; (20000120 <initSprites+0xec>)
2000003c:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(monsterPointer, monster_black_bits, monster_black_width, monster_black_height);
2000003e:	4939      	ldr	r1, [pc, #228]	; (20000124 <initSprites+0xf0>)
20000040:	6a78      	ldr	r0, [r7, #36]	; 0x24
20000042:	231e      	movs	r3, #30
20000044:	221e      	movs	r2, #30
20000046:	f001 ff89 	bl	20001f5c <load_sprite>
	monster = monsterPointer;
2000004a:	4b37      	ldr	r3, [pc, #220]	; (20000128 <initSprites+0xf4>)
2000004c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000004e:	601a      	str	r2, [r3, #0]
	
	sprite *monsterPointer2 = &tempMonsterLight;
20000050:	4b36      	ldr	r3, [pc, #216]	; (2000012c <initSprites+0xf8>)
20000052:	623b      	str	r3, [r7, #32]
	load_sprite(monsterPointer2, monster_light_bits, monster_light_width, monster_light_height);
20000054:	4936      	ldr	r1, [pc, #216]	; (20000130 <initSprites+0xfc>)
20000056:	6a38      	ldr	r0, [r7, #32]
20000058:	231e      	movs	r3, #30
2000005a:	221e      	movs	r2, #30
2000005c:	f001 ff7e 	bl	20001f5c <load_sprite>
	monsterLight = monsterPointer2;
20000060:	4b34      	ldr	r3, [pc, #208]	; (20000134 <initSprites+0x100>)
20000062:	6a3a      	ldr	r2, [r7, #32]
20000064:	601a      	str	r2, [r3, #0]

	sprite *monsterPointer3 = &tempMonsterGray;
20000066:	4b34      	ldr	r3, [pc, #208]	; (20000138 <initSprites+0x104>)
20000068:	61fb      	str	r3, [r7, #28]
	load_sprite(monsterPointer3, monster_gray_bits, monster_gray_width, monster_gray_height);
2000006a:	4934      	ldr	r1, [pc, #208]	; (2000013c <initSprites+0x108>)
2000006c:	69f8      	ldr	r0, [r7, #28]
2000006e:	231e      	movs	r3, #30
20000070:	221e      	movs	r2, #30
20000072:	f001 ff73 	bl	20001f5c <load_sprite>
	monsterGray = monsterPointer3;
20000076:	4b32      	ldr	r3, [pc, #200]	; (20000140 <initSprites+0x10c>)
20000078:	69fa      	ldr	r2, [r7, #28]
2000007a:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempBg;
2000007c:	4b31      	ldr	r3, [pc, #196]	; (20000144 <initSprites+0x110>)
2000007e:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer4, bg_bits, bg_width, bg_height);
20000080:	4931      	ldr	r1, [pc, #196]	; (20000148 <initSprites+0x114>)
20000082:	69b8      	ldr	r0, [r7, #24]
20000084:	2340      	movs	r3, #64	; 0x40
20000086:	2280      	movs	r2, #128	; 0x80
20000088:	f001 ff68 	bl	20001f5c <load_sprite>
	bg = pointer4;
2000008c:	4b2f      	ldr	r3, [pc, #188]	; (2000014c <initSprites+0x118>)
2000008e:	69ba      	ldr	r2, [r7, #24]
20000090:	601a      	str	r2, [r3, #0]
	
	sprite *pointer5 = &tempCastleBlack;
20000092:	4b2f      	ldr	r3, [pc, #188]	; (20000150 <initSprites+0x11c>)
20000094:	617b      	str	r3, [r7, #20]
	load_sprite(pointer5, castle_black_bits, castle_black_width, castle_black_height);
20000096:	492f      	ldr	r1, [pc, #188]	; (20000154 <initSprites+0x120>)
20000098:	6978      	ldr	r0, [r7, #20]
2000009a:	2340      	movs	r3, #64	; 0x40
2000009c:	2280      	movs	r2, #128	; 0x80
2000009e:	f001 ff5d 	bl	20001f5c <load_sprite>
	castleBlack = pointer5;
200000a2:	4b2d      	ldr	r3, [pc, #180]	; (20000158 <initSprites+0x124>)
200000a4:	697a      	ldr	r2, [r7, #20]
200000a6:	601a      	str	r2, [r3, #0]
	
	sprite *pointer6 = &tempCastleGray;
200000a8:	4b2c      	ldr	r3, [pc, #176]	; (2000015c <initSprites+0x128>)
200000aa:	613b      	str	r3, [r7, #16]
	load_sprite(pointer6, castle_gray_bits, castle_black_width, castle_black_height);
200000ac:	492c      	ldr	r1, [pc, #176]	; (20000160 <initSprites+0x12c>)
200000ae:	6938      	ldr	r0, [r7, #16]
200000b0:	2340      	movs	r3, #64	; 0x40
200000b2:	2280      	movs	r2, #128	; 0x80
200000b4:	f001 ff52 	bl	20001f5c <load_sprite>
	castleGray = pointer6;
200000b8:	4b2a      	ldr	r3, [pc, #168]	; (20000164 <initSprites+0x130>)
200000ba:	693a      	ldr	r2, [r7, #16]
200000bc:	601a      	str	r2, [r3, #0]
	
	sprite *pointer7 = &tempCastleLight;
200000be:	4b2a      	ldr	r3, [pc, #168]	; (20000168 <initSprites+0x134>)
200000c0:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer7, castle_light_bits, castle_black_width, castle_black_height);
200000c2:	492a      	ldr	r1, [pc, #168]	; (2000016c <initSprites+0x138>)
200000c4:	68f8      	ldr	r0, [r7, #12]
200000c6:	2340      	movs	r3, #64	; 0x40
200000c8:	2280      	movs	r2, #128	; 0x80
200000ca:	f001 ff47 	bl	20001f5c <load_sprite>
	castleLight = pointer7;
200000ce:	4b28      	ldr	r3, [pc, #160]	; (20000170 <initSprites+0x13c>)
200000d0:	68fa      	ldr	r2, [r7, #12]
200000d2:	601a      	str	r2, [r3, #0]
	
	sprite *pointer8 = &tempTitleLight;
200000d4:	4b27      	ldr	r3, [pc, #156]	; (20000174 <initSprites+0x140>)
200000d6:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer8, title_light_bits, title_black_width, title_black_height);
200000d8:	4927      	ldr	r1, [pc, #156]	; (20000178 <initSprites+0x144>)
200000da:	68b8      	ldr	r0, [r7, #8]
200000dc:	231e      	movs	r3, #30
200000de:	2232      	movs	r2, #50	; 0x32
200000e0:	f001 ff3c 	bl	20001f5c <load_sprite>
	titleLight = pointer8;
200000e4:	4b25      	ldr	r3, [pc, #148]	; (2000017c <initSprites+0x148>)
200000e6:	68ba      	ldr	r2, [r7, #8]
200000e8:	601a      	str	r2, [r3, #0]
	sprite *pointer9 = &tempTitleGray;
200000ea:	4b25      	ldr	r3, [pc, #148]	; (20000180 <initSprites+0x14c>)
200000ec:	607b      	str	r3, [r7, #4]
	load_sprite(pointer9, title_gray_bits, title_black_width, title_black_height);
200000ee:	4925      	ldr	r1, [pc, #148]	; (20000184 <initSprites+0x150>)
200000f0:	6878      	ldr	r0, [r7, #4]
200000f2:	231e      	movs	r3, #30
200000f4:	2232      	movs	r2, #50	; 0x32
200000f6:	f001 ff31 	bl	20001f5c <load_sprite>
	titleGray = pointer9;
200000fa:	4b23      	ldr	r3, [pc, #140]	; (20000188 <initSprites+0x154>)
200000fc:	687a      	ldr	r2, [r7, #4]
200000fe:	601a      	str	r2, [r3, #0]
	sprite *pointer10 = &tempTitleBlack;
20000100:	4b22      	ldr	r3, [pc, #136]	; (2000018c <initSprites+0x158>)
20000102:	603b      	str	r3, [r7, #0]
	load_sprite(pointer10, title_black_bits, title_black_width, title_black_height);
20000104:	4922      	ldr	r1, [pc, #136]	; (20000190 <initSprites+0x15c>)
20000106:	6838      	ldr	r0, [r7, #0]
20000108:	231e      	movs	r3, #30
2000010a:	2232      	movs	r2, #50	; 0x32
2000010c:	f001 ff26 	bl	20001f5c <load_sprite>
	titleBlack = pointer10;	
20000110:	4b20      	ldr	r3, [pc, #128]	; (20000194 <initSprites+0x160>)
20000112:	683a      	ldr	r2, [r7, #0]
20000114:	601a      	str	r2, [r3, #0]
	
	
}
20000116:	46c0      	nop			; (mov r8, r8)
20000118:	46bd      	mov	sp, r7
2000011a:	b00a      	add	sp, #40	; 0x28
2000011c:	bd80      	pop	{r7, pc}
2000011e:	46c0      	nop			; (mov r8, r8)
20000120:	200027a4 	andcs	r2, r0, r4, lsr #15
20000124:	200048a4 	andcs	r4, r0, r4, lsr #17
20000128:	20002784 	andcs	r2, r0, r4, lsl #15
2000012c:	200027e8 	andcs	r2, r0, r8, ror #15
20000130:	2000491c 	andcs	r4, r0, ip, lsl r9
20000134:	20002804 	andcs	r2, r0, r4, lsl #16
20000138:	200027c0 	andcs	r2, r0, r0, asr #15
2000013c:	20004994 	mulcs	r0, r4, r9
20000140:	20002810 	andcs	r2, r0, r0, lsl r8
20000144:	20002814 	andcs	r2, r0, r4, lsl r8
20000148:	20005888 	andcs	r5, r0, r8, lsl #17
2000014c:	200027bc 			; <UNDEFINED> instruction: 0x200027bc
20000150:	20002788 	andcs	r2, r0, r8, lsl #15
20000154:	20004a0c 	andcs	r4, r0, ip, lsl #20
20000158:	200027a0 	andcs	r2, r0, r0, lsr #15
2000015c:	200027f8 	strdcs	r2, [r0], -r8
20000160:	20004e0c 	andcs	r4, r0, ip, lsl #28
20000164:	2000280c 	andcs	r2, r0, ip, lsl #16
20000168:	200027dc 	ldrdcs	r2, [r0], -ip
2000016c:	2000520c 	andcs	r5, r0, ip, lsl #4
20000170:	200027d8 	ldrdcs	r2, [r0], -r8
20000174:	200027cc 	andcs	r2, r0, ip, asr #15
20000178:	2000560c 	andcs	r5, r0, ip, lsl #12
2000017c:	20002808 	andcs	r2, r0, r8, lsl #16
20000180:	20002794 	mulcs	r0, r4, r7
20000184:	200056e0 	andcs	r5, r0, r0, ror #13
20000188:	200027f4 	strdcs	r2, [r0], -r4
2000018c:	200027b0 			; <UNDEFINED> instruction: 0x200027b0
20000190:	200057b4 			; <UNDEFINED> instruction: 0x200057b4
20000194:	20002820 	andcs	r2, r0, r0, lsr #16

20000198 <main>:
	
int counter = 0;
int current_screen = START_SCREEN;
void main(void)
{
20000198:	b590      	push	{r4, r7, lr}
2000019a:	4cf9      	ldr	r4, [pc, #996]	; (20000580 <main+0x3e8>)
2000019c:	44a5      	add	sp, r4
2000019e:	af00      	add	r7, sp, #0
 * 2. Draw it with method above.
 * 3. Show frame with some long fram_length for testing.
 * 
 * */
	
	init_app();	
200001a0:	f7ff ff36 	bl	20000010 <init_app>
	initSprites();
200001a4:	f7ff ff46 	bl	20000034 <initSprites>
	
	GameObject monsterObj;
	Image monsterImage;
	Image monsterImages[] = {monsterImage};
200001a8:	238d      	movs	r3, #141	; 0x8d
200001aa:	009b      	lsls	r3, r3, #2
200001ac:	18fb      	adds	r3, r7, r3
200001ae:	2290      	movs	r2, #144	; 0x90
200001b0:	0092      	lsls	r2, r2, #2
200001b2:	18ba      	adds	r2, r7, r2
200001b4:	ca13      	ldmia	r2!, {r0, r1, r4}
200001b6:	c313      	stmia	r3!, {r0, r1, r4}
	monsterObj.images = monsterImages;
200001b8:	2393      	movs	r3, #147	; 0x93
200001ba:	009b      	lsls	r3, r3, #2
200001bc:	18fb      	adds	r3, r7, r3
200001be:	228d      	movs	r2, #141	; 0x8d
200001c0:	0092      	lsls	r2, r2, #2
200001c2:	18ba      	adds	r2, r7, r2
200001c4:	601a      	str	r2, [r3, #0]
	load_image(&monsterObj.images[0], monster, monsterGray, monsterLight);
200001c6:	2393      	movs	r3, #147	; 0x93
200001c8:	009b      	lsls	r3, r3, #2
200001ca:	18fb      	adds	r3, r7, r3
200001cc:	6818      	ldr	r0, [r3, #0]
200001ce:	4bed      	ldr	r3, [pc, #948]	; (20000584 <main+0x3ec>)
200001d0:	6819      	ldr	r1, [r3, #0]
200001d2:	4bed      	ldr	r3, [pc, #948]	; (20000588 <main+0x3f0>)
200001d4:	681a      	ldr	r2, [r3, #0]
200001d6:	4bed      	ldr	r3, [pc, #948]	; (2000058c <main+0x3f4>)
200001d8:	681b      	ldr	r3, [r3, #0]
200001da:	f001 feab 	bl	20001f34 <load_image>
	monsterObj.xPos = 30;
200001de:	2393      	movs	r3, #147	; 0x93
200001e0:	009b      	lsls	r3, r3, #2
200001e2:	18fb      	adds	r3, r7, r3
200001e4:	221e      	movs	r2, #30
200001e6:	605a      	str	r2, [r3, #4]
	monsterObj.yPos = 4;
200001e8:	2393      	movs	r3, #147	; 0x93
200001ea:	009b      	lsls	r3, r3, #2
200001ec:	18fb      	adds	r3, r7, r3
200001ee:	2204      	movs	r2, #4
200001f0:	609a      	str	r2, [r3, #8]
	monsterObj.current_frame = 0;
200001f2:	2393      	movs	r3, #147	; 0x93
200001f4:	009b      	lsls	r3, r3, #2
200001f6:	18fb      	adds	r3, r7, r3
200001f8:	2200      	movs	r2, #0
200001fa:	615a      	str	r2, [r3, #20]
	monsterObj.update = playerUpdate;
200001fc:	2393      	movs	r3, #147	; 0x93
200001fe:	009b      	lsls	r3, r3, #2
20000200:	18fb      	adds	r3, r7, r3
20000202:	4ae3      	ldr	r2, [pc, #908]	; (20000590 <main+0x3f8>)
20000204:	60da      	str	r2, [r3, #12]
	
	GameObject titleObj;
	Image titleImage;
	Image titleImages[] = {titleImage};
20000206:	23fc      	movs	r3, #252	; 0xfc
20000208:	005b      	lsls	r3, r3, #1
2000020a:	18fb      	adds	r3, r7, r3
2000020c:	2281      	movs	r2, #129	; 0x81
2000020e:	0092      	lsls	r2, r2, #2
20000210:	18ba      	adds	r2, r7, r2
20000212:	ca13      	ldmia	r2!, {r0, r1, r4}
20000214:	c313      	stmia	r3!, {r0, r1, r4}
	titleObj.images = titleImages;
20000216:	2384      	movs	r3, #132	; 0x84
20000218:	009b      	lsls	r3, r3, #2
2000021a:	18fb      	adds	r3, r7, r3
2000021c:	22fc      	movs	r2, #252	; 0xfc
2000021e:	0052      	lsls	r2, r2, #1
20000220:	18ba      	adds	r2, r7, r2
20000222:	601a      	str	r2, [r3, #0]
	load_image(&titleObj.images[0], titleBlack, titleGray, titleLight);
20000224:	2384      	movs	r3, #132	; 0x84
20000226:	009b      	lsls	r3, r3, #2
20000228:	18fb      	adds	r3, r7, r3
2000022a:	6818      	ldr	r0, [r3, #0]
2000022c:	4bd9      	ldr	r3, [pc, #868]	; (20000594 <main+0x3fc>)
2000022e:	6819      	ldr	r1, [r3, #0]
20000230:	4bd9      	ldr	r3, [pc, #868]	; (20000598 <main+0x400>)
20000232:	681a      	ldr	r2, [r3, #0]
20000234:	4bd9      	ldr	r3, [pc, #868]	; (2000059c <main+0x404>)
20000236:	681b      	ldr	r3, [r3, #0]
20000238:	f001 fe7c 	bl	20001f34 <load_image>
	titleObj.xPos = 1;
2000023c:	2384      	movs	r3, #132	; 0x84
2000023e:	009b      	lsls	r3, r3, #2
20000240:	18fb      	adds	r3, r7, r3
20000242:	2201      	movs	r2, #1
20000244:	605a      	str	r2, [r3, #4]
	titleObj.yPos = -40;
20000246:	2384      	movs	r3, #132	; 0x84
20000248:	009b      	lsls	r3, r3, #2
2000024a:	18fb      	adds	r3, r7, r3
2000024c:	2228      	movs	r2, #40	; 0x28
2000024e:	4252      	negs	r2, r2
20000250:	609a      	str	r2, [r3, #8]
	titleObj.current_frame = 0;
20000252:	2384      	movs	r3, #132	; 0x84
20000254:	009b      	lsls	r3, r3, #2
20000256:	18fb      	adds	r3, r7, r3
20000258:	2200      	movs	r2, #0
2000025a:	615a      	str	r2, [r3, #20]
	monsterObj.image.grayImage = monsterGray;
	monsterObj.image.lightImage = monsterLight;
	*/
	GameObject castleObj;
	Image castleImage;
	Image castleImages[] = {castleImage};
2000025c:	23de      	movs	r3, #222	; 0xde
2000025e:	005b      	lsls	r3, r3, #1
20000260:	18fb      	adds	r3, r7, r3
20000262:	22e4      	movs	r2, #228	; 0xe4
20000264:	0052      	lsls	r2, r2, #1
20000266:	18ba      	adds	r2, r7, r2
20000268:	ca13      	ldmia	r2!, {r0, r1, r4}
2000026a:	c313      	stmia	r3!, {r0, r1, r4}
	castleObj.images = castleImages;
2000026c:	23ea      	movs	r3, #234	; 0xea
2000026e:	005b      	lsls	r3, r3, #1
20000270:	18fb      	adds	r3, r7, r3
20000272:	22de      	movs	r2, #222	; 0xde
20000274:	0052      	lsls	r2, r2, #1
20000276:	18ba      	adds	r2, r7, r2
20000278:	601a      	str	r2, [r3, #0]
	load_image(&castleObj.images[0], castleBlack, castleGray, castleLight);
2000027a:	23ea      	movs	r3, #234	; 0xea
2000027c:	005b      	lsls	r3, r3, #1
2000027e:	18fb      	adds	r3, r7, r3
20000280:	6818      	ldr	r0, [r3, #0]
20000282:	4bc7      	ldr	r3, [pc, #796]	; (200005a0 <main+0x408>)
20000284:	6819      	ldr	r1, [r3, #0]
20000286:	4bc7      	ldr	r3, [pc, #796]	; (200005a4 <main+0x40c>)
20000288:	681a      	ldr	r2, [r3, #0]
2000028a:	4bc7      	ldr	r3, [pc, #796]	; (200005a8 <main+0x410>)
2000028c:	681b      	ldr	r3, [r3, #0]
2000028e:	f001 fe51 	bl	20001f34 <load_image>
	castleObj.xPos = 1;
20000292:	23ea      	movs	r3, #234	; 0xea
20000294:	005b      	lsls	r3, r3, #1
20000296:	18fb      	adds	r3, r7, r3
20000298:	2201      	movs	r2, #1
2000029a:	605a      	str	r2, [r3, #4]
	castleObj.yPos = 1;
2000029c:	23ea      	movs	r3, #234	; 0xea
2000029e:	005b      	lsls	r3, r3, #1
200002a0:	18fb      	adds	r3, r7, r3
200002a2:	2201      	movs	r2, #1
200002a4:	609a      	str	r2, [r3, #8]
	castleObj.current_frame = 0;
200002a6:	23ea      	movs	r3, #234	; 0xea
200002a8:	005b      	lsls	r3, r3, #1
200002aa:	18fb      	adds	r3, r7, r3
200002ac:	2200      	movs	r2, #0
200002ae:	615a      	str	r2, [r3, #20]
	
	GameObject bird;
	init_bird( &bird );
200002b0:	23cc      	movs	r3, #204	; 0xcc
200002b2:	005b      	lsls	r3, r3, #1
200002b4:	18fb      	adds	r3, r7, r3
200002b6:	0018      	movs	r0, r3
200002b8:	f000 fe6e 	bl	20000f98 <init_bird>
	bird.xPos = 180;
200002bc:	23cc      	movs	r3, #204	; 0xcc
200002be:	005b      	lsls	r3, r3, #1
200002c0:	18fb      	adds	r3, r7, r3
200002c2:	22b4      	movs	r2, #180	; 0xb4
200002c4:	605a      	str	r2, [r3, #4]
	bird.yPos = 40;
200002c6:	23cc      	movs	r3, #204	; 0xcc
200002c8:	005b      	lsls	r3, r3, #1
200002ca:	18fb      	adds	r3, r7, r3
200002cc:	2228      	movs	r2, #40	; 0x28
200002ce:	609a      	str	r2, [r3, #8]
	bird.update = gameObjectUpdate;
200002d0:	23cc      	movs	r3, #204	; 0xcc
200002d2:	005b      	lsls	r3, r3, #1
200002d4:	18fb      	adds	r3, r7, r3
200002d6:	4ab5      	ldr	r2, [pc, #724]	; (200005ac <main+0x414>)
200002d8:	60da      	str	r2, [r3, #12]
	
	GameObject fire2;
	init_fire( &fire2 );
200002da:	23ba      	movs	r3, #186	; 0xba
200002dc:	005b      	lsls	r3, r3, #1
200002de:	18fb      	adds	r3, r7, r3
200002e0:	0018      	movs	r0, r3
200002e2:	f000 fc55 	bl	20000b90 <init_fire>
	GameObject fire3;
	init_fire( &fire3 );
200002e6:	23a8      	movs	r3, #168	; 0xa8
200002e8:	005b      	lsls	r3, r3, #1
200002ea:	18fb      	adds	r3, r7, r3
200002ec:	0018      	movs	r0, r3
200002ee:	f000 fc4f 	bl	20000b90 <init_fire>
	GameObject fire4;
	init_fire( &fire4 );
200002f2:	2396      	movs	r3, #150	; 0x96
200002f4:	005b      	lsls	r3, r3, #1
200002f6:	18fb      	adds	r3, r7, r3
200002f8:	0018      	movs	r0, r3
200002fa:	f000 fc49 	bl	20000b90 <init_fire>
	GameObject fire1;
	init_fire( &fire1 );
200002fe:	2384      	movs	r3, #132	; 0x84
20000300:	005b      	lsls	r3, r3, #1
20000302:	18fb      	adds	r3, r7, r3
20000304:	0018      	movs	r0, r3
20000306:	f000 fc43 	bl	20000b90 <init_fire>
	fire2.xPos = 98;
2000030a:	23ba      	movs	r3, #186	; 0xba
2000030c:	005b      	lsls	r3, r3, #1
2000030e:	18fb      	adds	r3, r7, r3
20000310:	2262      	movs	r2, #98	; 0x62
20000312:	605a      	str	r2, [r3, #4]
	fire2.yPos = 26-12;
20000314:	23ba      	movs	r3, #186	; 0xba
20000316:	005b      	lsls	r3, r3, #1
20000318:	18fb      	adds	r3, r7, r3
2000031a:	220e      	movs	r2, #14
2000031c:	609a      	str	r2, [r3, #8]
	fire3.xPos = 115;
2000031e:	4ba4      	ldr	r3, [pc, #656]	; (200005b0 <main+0x418>)
20000320:	229c      	movs	r2, #156	; 0x9c
20000322:	0092      	lsls	r2, r2, #2
20000324:	4694      	mov	ip, r2
20000326:	44bc      	add	ip, r7
20000328:	4463      	add	r3, ip
2000032a:	2273      	movs	r2, #115	; 0x73
2000032c:	605a      	str	r2, [r3, #4]
	fire3.yPos = 34-12;
2000032e:	4ba0      	ldr	r3, [pc, #640]	; (200005b0 <main+0x418>)
20000330:	229c      	movs	r2, #156	; 0x9c
20000332:	0092      	lsls	r2, r2, #2
20000334:	4694      	mov	ip, r2
20000336:	44bc      	add	ip, r7
20000338:	4463      	add	r3, ip
2000033a:	2216      	movs	r2, #22
2000033c:	609a      	str	r2, [r3, #8]
	
	fire1.xPos = 85;
2000033e:	4b9d      	ldr	r3, [pc, #628]	; (200005b4 <main+0x41c>)
20000340:	229c      	movs	r2, #156	; 0x9c
20000342:	0092      	lsls	r2, r2, #2
20000344:	4694      	mov	ip, r2
20000346:	44bc      	add	ip, r7
20000348:	4463      	add	r3, ip
2000034a:	2255      	movs	r2, #85	; 0x55
2000034c:	605a      	str	r2, [r3, #4]
	fire1.yPos = 23-12;
2000034e:	4b99      	ldr	r3, [pc, #612]	; (200005b4 <main+0x41c>)
20000350:	229c      	movs	r2, #156	; 0x9c
20000352:	0092      	lsls	r2, r2, #2
20000354:	4694      	mov	ip, r2
20000356:	44bc      	add	ip, r7
20000358:	4463      	add	r3, ip
2000035a:	220b      	movs	r2, #11
2000035c:	609a      	str	r2, [r3, #8]
	fire4.xPos = 71;
2000035e:	4b96      	ldr	r3, [pc, #600]	; (200005b8 <main+0x420>)
20000360:	229c      	movs	r2, #156	; 0x9c
20000362:	0092      	lsls	r2, r2, #2
20000364:	4694      	mov	ip, r2
20000366:	44bc      	add	ip, r7
20000368:	4463      	add	r3, ip
2000036a:	2247      	movs	r2, #71	; 0x47
2000036c:	605a      	str	r2, [r3, #4]
	fire4.yPos = 27-11;
2000036e:	4b92      	ldr	r3, [pc, #584]	; (200005b8 <main+0x420>)
20000370:	229c      	movs	r2, #156	; 0x9c
20000372:	0092      	lsls	r2, r2, #2
20000374:	4694      	mov	ip, r2
20000376:	44bc      	add	ip, r7
20000378:	4463      	add	r3, ip
2000037a:	2210      	movs	r2, #16
2000037c:	609a      	str	r2, [r3, #8]
	//draw_game_object(&castleObj);
	
	fire2.animation_speed = 2;
2000037e:	23ba      	movs	r3, #186	; 0xba
20000380:	005b      	lsls	r3, r3, #1
20000382:	18fb      	adds	r3, r7, r3
20000384:	2202      	movs	r2, #2
20000386:	61da      	str	r2, [r3, #28]
	fire3.animation_speed = 2;
20000388:	4b89      	ldr	r3, [pc, #548]	; (200005b0 <main+0x418>)
2000038a:	229c      	movs	r2, #156	; 0x9c
2000038c:	0092      	lsls	r2, r2, #2
2000038e:	4694      	mov	ip, r2
20000390:	44bc      	add	ip, r7
20000392:	4463      	add	r3, ip
20000394:	2202      	movs	r2, #2
20000396:	61da      	str	r2, [r3, #28]
	fire1.animation_speed = 2;
20000398:	4b86      	ldr	r3, [pc, #536]	; (200005b4 <main+0x41c>)
2000039a:	229c      	movs	r2, #156	; 0x9c
2000039c:	0092      	lsls	r2, r2, #2
2000039e:	4694      	mov	ip, r2
200003a0:	44bc      	add	ip, r7
200003a2:	4463      	add	r3, ip
200003a4:	2202      	movs	r2, #2
200003a6:	61da      	str	r2, [r3, #28]
	fire4.animation_speed = 2;
200003a8:	4b83      	ldr	r3, [pc, #524]	; (200005b8 <main+0x420>)
200003aa:	229c      	movs	r2, #156	; 0x9c
200003ac:	0092      	lsls	r2, r2, #2
200003ae:	4694      	mov	ip, r2
200003b0:	44bc      	add	ip, r7
200003b2:	4463      	add	r3, ip
200003b4:	2202      	movs	r2, #2
200003b6:	61da      	str	r2, [r3, #28]
	
	fire2.update = gameObjectUpdate;
200003b8:	23ba      	movs	r3, #186	; 0xba
200003ba:	005b      	lsls	r3, r3, #1
200003bc:	18fb      	adds	r3, r7, r3
200003be:	4a7b      	ldr	r2, [pc, #492]	; (200005ac <main+0x414>)
200003c0:	60da      	str	r2, [r3, #12]
	fire3.update = gameObjectUpdate;
200003c2:	4b7b      	ldr	r3, [pc, #492]	; (200005b0 <main+0x418>)
200003c4:	229c      	movs	r2, #156	; 0x9c
200003c6:	0092      	lsls	r2, r2, #2
200003c8:	4694      	mov	ip, r2
200003ca:	44bc      	add	ip, r7
200003cc:	4463      	add	r3, ip
200003ce:	4a77      	ldr	r2, [pc, #476]	; (200005ac <main+0x414>)
200003d0:	60da      	str	r2, [r3, #12]
	fire1.update = gameObjectUpdate;
200003d2:	4b78      	ldr	r3, [pc, #480]	; (200005b4 <main+0x41c>)
200003d4:	229c      	movs	r2, #156	; 0x9c
200003d6:	0092      	lsls	r2, r2, #2
200003d8:	4694      	mov	ip, r2
200003da:	44bc      	add	ip, r7
200003dc:	4463      	add	r3, ip
200003de:	4a73      	ldr	r2, [pc, #460]	; (200005ac <main+0x414>)
200003e0:	60da      	str	r2, [r3, #12]
	fire4.update = gameObjectUpdate;
200003e2:	4b75      	ldr	r3, [pc, #468]	; (200005b8 <main+0x420>)
200003e4:	229c      	movs	r2, #156	; 0x9c
200003e6:	0092      	lsls	r2, r2, #2
200003e8:	4694      	mov	ip, r2
200003ea:	44bc      	add	ip, r7
200003ec:	4463      	add	r3, ip
200003ee:	4a6f      	ldr	r2, [pc, #444]	; (200005ac <main+0x414>)
200003f0:	60da      	str	r2, [r3, #12]
	SlowText text8;
	SlowText text9;
	SlowText text10;
	SlowText text11;
	SlowText text12;
	init_slow_text(&text_kra, "*KRA!* *KRA!*", "   ", 1);
200003f2:	4a72      	ldr	r2, [pc, #456]	; (200005bc <main+0x424>)
200003f4:	4972      	ldr	r1, [pc, #456]	; (200005c0 <main+0x428>)
200003f6:	23f4      	movs	r3, #244	; 0xf4
200003f8:	18f8      	adds	r0, r7, r3
200003fa:	2301      	movs	r3, #1
200003fc:	f002 f8af 	bl	2000255e <init_slow_text>
	init_slow_text(&text1, "For centuries the", "DILs-witches have", 1);
20000400:	4a70      	ldr	r2, [pc, #448]	; (200005c4 <main+0x42c>)
20000402:	4971      	ldr	r1, [pc, #452]	; (200005c8 <main+0x430>)
20000404:	23e0      	movs	r3, #224	; 0xe0
20000406:	18f8      	adds	r0, r7, r3
20000408:	2301      	movs	r3, #1
2000040a:	f002 f8a8 	bl	2000255e <init_slow_text>
	init_slow_text(&text2, "coiled in fear,", "    ", 1);
2000040e:	4a6f      	ldr	r2, [pc, #444]	; (200005cc <main+0x434>)
20000410:	496f      	ldr	r1, [pc, #444]	; (200005d0 <main+0x438>)
20000412:	23cc      	movs	r3, #204	; 0xcc
20000414:	18f8      	adds	r0, r7, r3
20000416:	2301      	movs	r3, #1
20000418:	f002 f8a1 	bl	2000255e <init_slow_text>
	init_slow_text(&text3, "whenever they hear", "that a DIPs-witch", 1);
2000041c:	4a6d      	ldr	r2, [pc, #436]	; (200005d4 <main+0x43c>)
2000041e:	496e      	ldr	r1, [pc, #440]	; (200005d8 <main+0x440>)
20000420:	23b8      	movs	r3, #184	; 0xb8
20000422:	18f8      	adds	r0, r7, r3
20000424:	2301      	movs	r3, #1
20000426:	f002 f89a 	bl	2000255e <init_slow_text>
	init_slow_text(&text4, "is near.", "   ", 1);
2000042a:	4a64      	ldr	r2, [pc, #400]	; (200005bc <main+0x424>)
2000042c:	496b      	ldr	r1, [pc, #428]	; (200005dc <main+0x444>)
2000042e:	23a4      	movs	r3, #164	; 0xa4
20000430:	18f8      	adds	r0, r7, r3
20000432:	2301      	movs	r3, #1
20000434:	f002 f893 	bl	2000255e <init_slow_text>
	init_slow_text(&text5, "So it is quite", "surprising, finding", 1);
20000438:	4a69      	ldr	r2, [pc, #420]	; (200005e0 <main+0x448>)
2000043a:	496a      	ldr	r1, [pc, #424]	; (200005e4 <main+0x44c>)
2000043c:	2390      	movs	r3, #144	; 0x90
2000043e:	18f8      	adds	r0, r7, r3
20000440:	2301      	movs	r3, #1
20000442:	f002 f88c 	bl	2000255e <init_slow_text>
	init_slow_text(&text6, "you here,", "    ", 1);
20000446:	4a61      	ldr	r2, [pc, #388]	; (200005cc <main+0x434>)
20000448:	4967      	ldr	r1, [pc, #412]	; (200005e8 <main+0x450>)
2000044a:	237c      	movs	r3, #124	; 0x7c
2000044c:	18f8      	adds	r0, r7, r3
2000044e:	2301      	movs	r3, #1
20000450:	f002 f885 	bl	2000255e <init_slow_text>
	init_slow_text(&text7, "queen Daffo of DILs,", "heir to king Lear.", 1);
20000454:	4a65      	ldr	r2, [pc, #404]	; (200005ec <main+0x454>)
20000456:	4966      	ldr	r1, [pc, #408]	; (200005f0 <main+0x458>)
20000458:	2368      	movs	r3, #104	; 0x68
2000045a:	18f8      	adds	r0, r7, r3
2000045c:	2301      	movs	r3, #1
2000045e:	f002 f87e 	bl	2000255e <init_slow_text>
	init_slow_text(&text8, "But maybe you're", "tempted, to loot", 1);
20000462:	4a64      	ldr	r2, [pc, #400]	; (200005f4 <main+0x45c>)
20000464:	4964      	ldr	r1, [pc, #400]	; (200005f8 <main+0x460>)
20000466:	2354      	movs	r3, #84	; 0x54
20000468:	18f8      	adds	r0, r7, r3
2000046a:	2301      	movs	r3, #1
2000046c:	f002 f877 	bl	2000255e <init_slow_text>
	init_slow_text(&text9, "from the riches,", "    ", 1);
20000470:	4a56      	ldr	r2, [pc, #344]	; (200005cc <main+0x434>)
20000472:	4962      	ldr	r1, [pc, #392]	; (200005fc <main+0x464>)
20000474:	2340      	movs	r3, #64	; 0x40
20000476:	18f8      	adds	r0, r7, r3
20000478:	2301      	movs	r3, #1
2000047a:	f002 f870 	bl	2000255e <init_slow_text>
	init_slow_text(&text12, "wicked DIPs-witches.", "    ", 1);
2000047e:	4a53      	ldr	r2, [pc, #332]	; (200005cc <main+0x434>)
20000480:	495f      	ldr	r1, [pc, #380]	; (20000600 <main+0x468>)
20000482:	1d38      	adds	r0, r7, #4
20000484:	2301      	movs	r3, #1
20000486:	f002 f86a 	bl	2000255e <init_slow_text>
	init_slow_text(&text10, "so grippily trea-", "sured by", 1);
2000048a:	4a5e      	ldr	r2, [pc, #376]	; (20000604 <main+0x46c>)
2000048c:	495e      	ldr	r1, [pc, #376]	; (20000608 <main+0x470>)
2000048e:	232c      	movs	r3, #44	; 0x2c
20000490:	18f8      	adds	r0, r7, r3
20000492:	2301      	movs	r3, #1
20000494:	f002 f863 	bl	2000255e <init_slow_text>
	init_slow_text(&text11, "Enter, brave witch,", "- reset the switch!", 1);
20000498:	4a5c      	ldr	r2, [pc, #368]	; (2000060c <main+0x474>)
2000049a:	495d      	ldr	r1, [pc, #372]	; (20000610 <main+0x478>)
2000049c:	2318      	movs	r3, #24
2000049e:	18f8      	adds	r0, r7, r3
200004a0:	2301      	movs	r3, #1
200004a2:	f002 f85c 	bl	2000255e <init_slow_text>
	//ascii_write_part("Yeeaaah!!!", "This is working! :)", 5, 10);
	
	clear_ascii();
200004a6:	f001 ff40 	bl	2000232a <clear_ascii>
	//Game loop
	while(1) {
		
		switch(current_screen) {
200004aa:	4b5a      	ldr	r3, [pc, #360]	; (20000614 <main+0x47c>)
200004ac:	681b      	ldr	r3, [r3, #0]
200004ae:	2b01      	cmp	r3, #1
200004b0:	d1fb      	bne.n	200004aa <main+0x312>
			
			case START_SCREEN:
				
				counter++;
200004b2:	4b59      	ldr	r3, [pc, #356]	; (20000618 <main+0x480>)
200004b4:	681b      	ldr	r3, [r3, #0]
200004b6:	1c5a      	adds	r2, r3, #1
200004b8:	4b57      	ldr	r3, [pc, #348]	; (20000618 <main+0x480>)
200004ba:	601a      	str	r2, [r3, #0]
				
				if(titleObj.yPos < 1) {
200004bc:	2384      	movs	r3, #132	; 0x84
200004be:	009b      	lsls	r3, r3, #2
200004c0:	18fb      	adds	r3, r7, r3
200004c2:	689b      	ldr	r3, [r3, #8]
200004c4:	2b00      	cmp	r3, #0
200004c6:	dc08      	bgt.n	200004da <main+0x342>
					titleObj.yPos++;
200004c8:	2384      	movs	r3, #132	; 0x84
200004ca:	009b      	lsls	r3, r3, #2
200004cc:	18fb      	adds	r3, r7, r3
200004ce:	689b      	ldr	r3, [r3, #8]
200004d0:	1c5a      	adds	r2, r3, #1
200004d2:	2384      	movs	r3, #132	; 0x84
200004d4:	009b      	lsls	r3, r3, #2
200004d6:	18fb      	adds	r3, r7, r3
200004d8:	609a      	str	r2, [r3, #8]
				}
				
				draw_game_object(&castleObj);
200004da:	23ea      	movs	r3, #234	; 0xea
200004dc:	005b      	lsls	r3, r3, #1
200004de:	18fb      	adds	r3, r7, r3
200004e0:	0018      	movs	r0, r3
200004e2:	f001 fcb1 	bl	20001e48 <draw_game_object>
				draw_game_object(&fire2);
200004e6:	23ba      	movs	r3, #186	; 0xba
200004e8:	005b      	lsls	r3, r3, #1
200004ea:	18fb      	adds	r3, r7, r3
200004ec:	0018      	movs	r0, r3
200004ee:	f001 fcab 	bl	20001e48 <draw_game_object>
				draw_game_object(&fire3);
200004f2:	23a8      	movs	r3, #168	; 0xa8
200004f4:	005b      	lsls	r3, r3, #1
200004f6:	18fb      	adds	r3, r7, r3
200004f8:	0018      	movs	r0, r3
200004fa:	f001 fca5 	bl	20001e48 <draw_game_object>
				draw_game_object(&fire1);
200004fe:	2384      	movs	r3, #132	; 0x84
20000500:	005b      	lsls	r3, r3, #1
20000502:	18fb      	adds	r3, r7, r3
20000504:	0018      	movs	r0, r3
20000506:	f001 fc9f 	bl	20001e48 <draw_game_object>
				draw_game_object(&fire4);
2000050a:	2396      	movs	r3, #150	; 0x96
2000050c:	005b      	lsls	r3, r3, #1
2000050e:	18fb      	adds	r3, r7, r3
20000510:	0018      	movs	r0, r3
20000512:	f001 fc99 	bl	20001e48 <draw_game_object>
				draw_game_object(&titleObj);
20000516:	2384      	movs	r3, #132	; 0x84
20000518:	009b      	lsls	r3, r3, #2
2000051a:	18fb      	adds	r3, r7, r3
2000051c:	0018      	movs	r0, r3
2000051e:	f001 fc93 	bl	20001e48 <draw_game_object>
				draw_game_object(&bird);
20000522:	23cc      	movs	r3, #204	; 0xcc
20000524:	005b      	lsls	r3, r3, #1
20000526:	18fb      	adds	r3, r7, r3
20000528:	0018      	movs	r0, r3
2000052a:	f001 fc8d 	bl	20001e48 <draw_game_object>
				show_frame(1);
2000052e:	2001      	movs	r0, #1
20000530:	f001 fccb 	bl	20001eca <show_frame>
				
				static int long_text = 40;
				static int short_text = 20;
				static int delay_until_text = 110;
				
				if (counter < delay_until_text - 25 && counter > delay_until_text - 60)
20000534:	4b39      	ldr	r3, [pc, #228]	; (2000061c <main+0x484>)
20000536:	681b      	ldr	r3, [r3, #0]
20000538:	3b19      	subs	r3, #25
2000053a:	001a      	movs	r2, r3
2000053c:	4b36      	ldr	r3, [pc, #216]	; (20000618 <main+0x480>)
2000053e:	681b      	ldr	r3, [r3, #0]
20000540:	429a      	cmp	r2, r3
20000542:	dd13      	ble.n	2000056c <main+0x3d4>
20000544:	4b35      	ldr	r3, [pc, #212]	; (2000061c <main+0x484>)
20000546:	681b      	ldr	r3, [r3, #0]
20000548:	3b3c      	subs	r3, #60	; 0x3c
2000054a:	001a      	movs	r2, r3
2000054c:	4b32      	ldr	r3, [pc, #200]	; (20000618 <main+0x480>)
2000054e:	681b      	ldr	r3, [r3, #0]
20000550:	429a      	cmp	r2, r3
20000552:	da0b      	bge.n	2000056c <main+0x3d4>
					text_kra.display(&text_kra, 20);
20000554:	4b32      	ldr	r3, [pc, #200]	; (20000620 <main+0x488>)
20000556:	229c      	movs	r2, #156	; 0x9c
20000558:	0092      	lsls	r2, r2, #2
2000055a:	4694      	mov	ip, r2
2000055c:	44bc      	add	ip, r7
2000055e:	4463      	add	r3, ip
20000560:	691b      	ldr	r3, [r3, #16]
20000562:	22f4      	movs	r2, #244	; 0xf4
20000564:	18ba      	adds	r2, r7, r2
20000566:	2114      	movs	r1, #20
20000568:	0010      	movs	r0, r2
2000056a:	4798      	blx	r3
				if (counter == delay_until_text - 25)
2000056c:	4b2b      	ldr	r3, [pc, #172]	; (2000061c <main+0x484>)
2000056e:	681b      	ldr	r3, [r3, #0]
20000570:	3b19      	subs	r3, #25
20000572:	001a      	movs	r2, r3
20000574:	4b28      	ldr	r3, [pc, #160]	; (20000618 <main+0x480>)
20000576:	681b      	ldr	r3, [r3, #0]
20000578:	429a      	cmp	r2, r3
2000057a:	d155      	bne.n	20000628 <main+0x490>
2000057c:	e052      	b.n	20000624 <main+0x48c>
2000057e:	46c0      	nop			; (mov r8, r8)
20000580:	fffffd8c 			; <UNDEFINED> instruction: 0xfffffd8c
20000584:	20002784 	andcs	r2, r0, r4, lsl #15
20000588:	20002810 	andcs	r2, r0, r0, lsl r8
2000058c:	20002804 	andcs	r2, r0, r4, lsl #16
20000590:	20000cb5 			; <UNDEFINED> instruction: 0x20000cb5
20000594:	20002820 	andcs	r2, r0, r0, lsr #16
20000598:	200027f4 	strdcs	r2, [r0], -r4
2000059c:	20002808 	andcs	r2, r0, r8, lsl #16
200005a0:	200027a0 	andcs	r2, r0, r0, lsr #15
200005a4:	2000280c 	andcs	r2, r0, ip, lsl #16
200005a8:	200027d8 	ldrdcs	r2, [r0], -r8
200005ac:	200009c5 	andcs	r0, r0, r5, asr #19
200005b0:	fffffee0 			; <UNDEFINED> instruction: 0xfffffee0
200005b4:	fffffe98 			; <UNDEFINED> instruction: 0xfffffe98
200005b8:	fffffebc 			; <UNDEFINED> instruction: 0xfffffebc
200005bc:	20006300 	andcs	r6, r0, r0, lsl #6
200005c0:	20006304 	andcs	r6, r0, r4, lsl #6
200005c4:	20006314 	andcs	r6, r0, r4, lsl r3
200005c8:	20006328 	andcs	r6, r0, r8, lsr #6
200005cc:	2000633c 	andcs	r6, r0, ip, lsr r3
200005d0:	20006344 	andcs	r6, r0, r4, asr #6
200005d4:	20006354 	andcs	r6, r0, r4, asr r3
200005d8:	20006368 	andcs	r6, r0, r8, ror #6
200005dc:	2000637c 	andcs	r6, r0, ip, ror r3
200005e0:	20006388 	andcs	r6, r0, r8, lsl #7
200005e4:	2000639c 	mulcs	r0, ip, r3
200005e8:	200063ac 	andcs	r6, r0, ip, lsr #7
200005ec:	200063b8 			; <UNDEFINED> instruction: 0x200063b8
200005f0:	200063cc 	andcs	r6, r0, ip, asr #7
200005f4:	200063e4 	andcs	r6, r0, r4, ror #7
200005f8:	200063f8 	strdcs	r6, [r0], -r8
200005fc:	2000640c 	andcs	r6, r0, ip, lsl #8
20000600:	20006420 	andcs	r6, r0, r0, lsr #8
20000604:	20006438 	andcs	r6, r0, r8, lsr r4
20000608:	20006444 	andcs	r6, r0, r4, asr #8
2000060c:	20006458 	andcs	r6, r0, r8, asr r4
20000610:	2000646c 	andcs	r6, r0, ip, ror #8
20000614:	20005c88 	andcs	r5, r0, r8, lsl #25
20000618:	20002770 	andcs	r2, r0, r0, ror r7
2000061c:	20005c8c 	andcs	r5, r0, ip, lsl #25
20000620:	fffffe84 			; <UNDEFINED> instruction: 0xfffffe84
					clear_ascii();
20000624:	f001 fe81 	bl	2000232a <clear_ascii>
				
				if (counter < delay_until_text);
20000628:	4bcf      	ldr	r3, [pc, #828]	; (20000968 <main+0x7d0>)
2000062a:	681a      	ldr	r2, [r3, #0]
2000062c:	4bcf      	ldr	r3, [pc, #828]	; (2000096c <main+0x7d4>)
2000062e:	681b      	ldr	r3, [r3, #0]
20000630:	429a      	cmp	r2, r3
20000632:	da00      	bge.n	20000636 <main+0x49e>
20000634:	e147      	b.n	200008c6 <main+0x72e>
				else if (counter < delay_until_text + 1*long_text)
20000636:	4bcd      	ldr	r3, [pc, #820]	; (2000096c <main+0x7d4>)
20000638:	681a      	ldr	r2, [r3, #0]
2000063a:	4bcd      	ldr	r3, [pc, #820]	; (20000970 <main+0x7d8>)
2000063c:	681b      	ldr	r3, [r3, #0]
2000063e:	18d2      	adds	r2, r2, r3
20000640:	4bc9      	ldr	r3, [pc, #804]	; (20000968 <main+0x7d0>)
20000642:	681b      	ldr	r3, [r3, #0]
20000644:	429a      	cmp	r2, r3
20000646:	dd0c      	ble.n	20000662 <main+0x4ca>
					text1.display(&text1, 20);
20000648:	4bca      	ldr	r3, [pc, #808]	; (20000974 <main+0x7dc>)
2000064a:	229c      	movs	r2, #156	; 0x9c
2000064c:	0092      	lsls	r2, r2, #2
2000064e:	4694      	mov	ip, r2
20000650:	44bc      	add	ip, r7
20000652:	4463      	add	r3, ip
20000654:	691b      	ldr	r3, [r3, #16]
20000656:	22e0      	movs	r2, #224	; 0xe0
20000658:	18ba      	adds	r2, r7, r2
2000065a:	2114      	movs	r1, #20
2000065c:	0010      	movs	r0, r2
2000065e:	4798      	blx	r3
20000660:	e131      	b.n	200008c6 <main+0x72e>
				else if(counter < delay_until_text + 1*long_text + 1*short_text)
20000662:	4bc2      	ldr	r3, [pc, #776]	; (2000096c <main+0x7d4>)
20000664:	681a      	ldr	r2, [r3, #0]
20000666:	4bc2      	ldr	r3, [pc, #776]	; (20000970 <main+0x7d8>)
20000668:	681b      	ldr	r3, [r3, #0]
2000066a:	18d2      	adds	r2, r2, r3
2000066c:	4bc2      	ldr	r3, [pc, #776]	; (20000978 <main+0x7e0>)
2000066e:	681b      	ldr	r3, [r3, #0]
20000670:	18d2      	adds	r2, r2, r3
20000672:	4bbd      	ldr	r3, [pc, #756]	; (20000968 <main+0x7d0>)
20000674:	681b      	ldr	r3, [r3, #0]
20000676:	429a      	cmp	r2, r3
20000678:	dd0c      	ble.n	20000694 <main+0x4fc>
					text2.display(&text2, 20);
2000067a:	4bc0      	ldr	r3, [pc, #768]	; (2000097c <main+0x7e4>)
2000067c:	229c      	movs	r2, #156	; 0x9c
2000067e:	0092      	lsls	r2, r2, #2
20000680:	4694      	mov	ip, r2
20000682:	44bc      	add	ip, r7
20000684:	4463      	add	r3, ip
20000686:	691b      	ldr	r3, [r3, #16]
20000688:	22cc      	movs	r2, #204	; 0xcc
2000068a:	18ba      	adds	r2, r7, r2
2000068c:	2114      	movs	r1, #20
2000068e:	0010      	movs	r0, r2
20000690:	4798      	blx	r3
20000692:	e118      	b.n	200008c6 <main+0x72e>
				else if(counter < delay_until_text + 2*long_text + 1*short_text)
20000694:	4bb6      	ldr	r3, [pc, #728]	; (20000970 <main+0x7d8>)
20000696:	681b      	ldr	r3, [r3, #0]
20000698:	005a      	lsls	r2, r3, #1
2000069a:	4bb4      	ldr	r3, [pc, #720]	; (2000096c <main+0x7d4>)
2000069c:	681b      	ldr	r3, [r3, #0]
2000069e:	18d2      	adds	r2, r2, r3
200006a0:	4bb5      	ldr	r3, [pc, #724]	; (20000978 <main+0x7e0>)
200006a2:	681b      	ldr	r3, [r3, #0]
200006a4:	18d2      	adds	r2, r2, r3
200006a6:	4bb0      	ldr	r3, [pc, #704]	; (20000968 <main+0x7d0>)
200006a8:	681b      	ldr	r3, [r3, #0]
200006aa:	429a      	cmp	r2, r3
200006ac:	dd0c      	ble.n	200006c8 <main+0x530>
					text3.display(&text3, 20);
200006ae:	4bb4      	ldr	r3, [pc, #720]	; (20000980 <main+0x7e8>)
200006b0:	229c      	movs	r2, #156	; 0x9c
200006b2:	0092      	lsls	r2, r2, #2
200006b4:	4694      	mov	ip, r2
200006b6:	44bc      	add	ip, r7
200006b8:	4463      	add	r3, ip
200006ba:	691b      	ldr	r3, [r3, #16]
200006bc:	22b8      	movs	r2, #184	; 0xb8
200006be:	18ba      	adds	r2, r7, r2
200006c0:	2114      	movs	r1, #20
200006c2:	0010      	movs	r0, r2
200006c4:	4798      	blx	r3
200006c6:	e0fe      	b.n	200008c6 <main+0x72e>
				else if(counter < delay_until_text + 2*long_text + 2*short_text)
200006c8:	4ba9      	ldr	r3, [pc, #676]	; (20000970 <main+0x7d8>)
200006ca:	681b      	ldr	r3, [r3, #0]
200006cc:	005a      	lsls	r2, r3, #1
200006ce:	4ba7      	ldr	r3, [pc, #668]	; (2000096c <main+0x7d4>)
200006d0:	681b      	ldr	r3, [r3, #0]
200006d2:	18d2      	adds	r2, r2, r3
200006d4:	4ba8      	ldr	r3, [pc, #672]	; (20000978 <main+0x7e0>)
200006d6:	681b      	ldr	r3, [r3, #0]
200006d8:	005b      	lsls	r3, r3, #1
200006da:	18d2      	adds	r2, r2, r3
200006dc:	4ba2      	ldr	r3, [pc, #648]	; (20000968 <main+0x7d0>)
200006de:	681b      	ldr	r3, [r3, #0]
200006e0:	429a      	cmp	r2, r3
200006e2:	dd0c      	ble.n	200006fe <main+0x566>
					text4.display(&text4, 20);
200006e4:	4ba7      	ldr	r3, [pc, #668]	; (20000984 <main+0x7ec>)
200006e6:	229c      	movs	r2, #156	; 0x9c
200006e8:	0092      	lsls	r2, r2, #2
200006ea:	4694      	mov	ip, r2
200006ec:	44bc      	add	ip, r7
200006ee:	4463      	add	r3, ip
200006f0:	691b      	ldr	r3, [r3, #16]
200006f2:	22a4      	movs	r2, #164	; 0xa4
200006f4:	18ba      	adds	r2, r7, r2
200006f6:	2114      	movs	r1, #20
200006f8:	0010      	movs	r0, r2
200006fa:	4798      	blx	r3
200006fc:	e0e3      	b.n	200008c6 <main+0x72e>
				else if(counter < delay_until_text + 3*long_text + 2*short_text)
200006fe:	4b9c      	ldr	r3, [pc, #624]	; (20000970 <main+0x7d8>)
20000700:	681a      	ldr	r2, [r3, #0]
20000702:	0013      	movs	r3, r2
20000704:	005b      	lsls	r3, r3, #1
20000706:	189a      	adds	r2, r3, r2
20000708:	4b98      	ldr	r3, [pc, #608]	; (2000096c <main+0x7d4>)
2000070a:	681b      	ldr	r3, [r3, #0]
2000070c:	18d2      	adds	r2, r2, r3
2000070e:	4b9a      	ldr	r3, [pc, #616]	; (20000978 <main+0x7e0>)
20000710:	681b      	ldr	r3, [r3, #0]
20000712:	005b      	lsls	r3, r3, #1
20000714:	18d2      	adds	r2, r2, r3
20000716:	4b94      	ldr	r3, [pc, #592]	; (20000968 <main+0x7d0>)
20000718:	681b      	ldr	r3, [r3, #0]
2000071a:	429a      	cmp	r2, r3
2000071c:	dd0c      	ble.n	20000738 <main+0x5a0>
					text5.display(&text5, 15);
2000071e:	4b9a      	ldr	r3, [pc, #616]	; (20000988 <main+0x7f0>)
20000720:	229c      	movs	r2, #156	; 0x9c
20000722:	0092      	lsls	r2, r2, #2
20000724:	4694      	mov	ip, r2
20000726:	44bc      	add	ip, r7
20000728:	4463      	add	r3, ip
2000072a:	691b      	ldr	r3, [r3, #16]
2000072c:	2290      	movs	r2, #144	; 0x90
2000072e:	18ba      	adds	r2, r7, r2
20000730:	210f      	movs	r1, #15
20000732:	0010      	movs	r0, r2
20000734:	4798      	blx	r3
20000736:	e0c6      	b.n	200008c6 <main+0x72e>
				else if(counter < delay_until_text + 3*long_text + 3*short_text)
20000738:	4b8d      	ldr	r3, [pc, #564]	; (20000970 <main+0x7d8>)
2000073a:	681a      	ldr	r2, [r3, #0]
2000073c:	0013      	movs	r3, r2
2000073e:	005b      	lsls	r3, r3, #1
20000740:	189a      	adds	r2, r3, r2
20000742:	4b8a      	ldr	r3, [pc, #552]	; (2000096c <main+0x7d4>)
20000744:	681b      	ldr	r3, [r3, #0]
20000746:	18d1      	adds	r1, r2, r3
20000748:	4b8b      	ldr	r3, [pc, #556]	; (20000978 <main+0x7e0>)
2000074a:	681a      	ldr	r2, [r3, #0]
2000074c:	0013      	movs	r3, r2
2000074e:	005b      	lsls	r3, r3, #1
20000750:	189b      	adds	r3, r3, r2
20000752:	18ca      	adds	r2, r1, r3
20000754:	4b84      	ldr	r3, [pc, #528]	; (20000968 <main+0x7d0>)
20000756:	681b      	ldr	r3, [r3, #0]
20000758:	429a      	cmp	r2, r3
2000075a:	dd0c      	ble.n	20000776 <main+0x5de>
					text6.display(&text6, 20);
2000075c:	4b8b      	ldr	r3, [pc, #556]	; (2000098c <main+0x7f4>)
2000075e:	229c      	movs	r2, #156	; 0x9c
20000760:	0092      	lsls	r2, r2, #2
20000762:	4694      	mov	ip, r2
20000764:	44bc      	add	ip, r7
20000766:	4463      	add	r3, ip
20000768:	691b      	ldr	r3, [r3, #16]
2000076a:	227c      	movs	r2, #124	; 0x7c
2000076c:	18ba      	adds	r2, r7, r2
2000076e:	2114      	movs	r1, #20
20000770:	0010      	movs	r0, r2
20000772:	4798      	blx	r3
20000774:	e0a7      	b.n	200008c6 <main+0x72e>
				else if(counter < delay_until_text + 4*long_text + 3*short_text + 3)
20000776:	4b7e      	ldr	r3, [pc, #504]	; (20000970 <main+0x7d8>)
20000778:	681b      	ldr	r3, [r3, #0]
2000077a:	009a      	lsls	r2, r3, #2
2000077c:	4b7b      	ldr	r3, [pc, #492]	; (2000096c <main+0x7d4>)
2000077e:	681b      	ldr	r3, [r3, #0]
20000780:	18d1      	adds	r1, r2, r3
20000782:	4b7d      	ldr	r3, [pc, #500]	; (20000978 <main+0x7e0>)
20000784:	681a      	ldr	r2, [r3, #0]
20000786:	0013      	movs	r3, r2
20000788:	005b      	lsls	r3, r3, #1
2000078a:	189b      	adds	r3, r3, r2
2000078c:	18cb      	adds	r3, r1, r3
2000078e:	1cda      	adds	r2, r3, #3
20000790:	4b75      	ldr	r3, [pc, #468]	; (20000968 <main+0x7d0>)
20000792:	681b      	ldr	r3, [r3, #0]
20000794:	429a      	cmp	r2, r3
20000796:	dd0c      	ble.n	200007b2 <main+0x61a>
					text7.display(&text7, 20);
20000798:	4b7d      	ldr	r3, [pc, #500]	; (20000990 <main+0x7f8>)
2000079a:	229c      	movs	r2, #156	; 0x9c
2000079c:	0092      	lsls	r2, r2, #2
2000079e:	4694      	mov	ip, r2
200007a0:	44bc      	add	ip, r7
200007a2:	4463      	add	r3, ip
200007a4:	691b      	ldr	r3, [r3, #16]
200007a6:	2268      	movs	r2, #104	; 0x68
200007a8:	18ba      	adds	r2, r7, r2
200007aa:	2114      	movs	r1, #20
200007ac:	0010      	movs	r0, r2
200007ae:	4798      	blx	r3
200007b0:	e089      	b.n	200008c6 <main+0x72e>
				else if(counter < delay_until_text + 5*long_text + 3*short_text + 2)
200007b2:	4b6f      	ldr	r3, [pc, #444]	; (20000970 <main+0x7d8>)
200007b4:	681a      	ldr	r2, [r3, #0]
200007b6:	0013      	movs	r3, r2
200007b8:	009b      	lsls	r3, r3, #2
200007ba:	189a      	adds	r2, r3, r2
200007bc:	4b6b      	ldr	r3, [pc, #428]	; (2000096c <main+0x7d4>)
200007be:	681b      	ldr	r3, [r3, #0]
200007c0:	18d1      	adds	r1, r2, r3
200007c2:	4b6d      	ldr	r3, [pc, #436]	; (20000978 <main+0x7e0>)
200007c4:	681a      	ldr	r2, [r3, #0]
200007c6:	0013      	movs	r3, r2
200007c8:	005b      	lsls	r3, r3, #1
200007ca:	189b      	adds	r3, r3, r2
200007cc:	18cb      	adds	r3, r1, r3
200007ce:	1c9a      	adds	r2, r3, #2
200007d0:	4b65      	ldr	r3, [pc, #404]	; (20000968 <main+0x7d0>)
200007d2:	681b      	ldr	r3, [r3, #0]
200007d4:	429a      	cmp	r2, r3
200007d6:	dd0c      	ble.n	200007f2 <main+0x65a>
					text8.display(&text8, 20);
200007d8:	4b6e      	ldr	r3, [pc, #440]	; (20000994 <main+0x7fc>)
200007da:	229c      	movs	r2, #156	; 0x9c
200007dc:	0092      	lsls	r2, r2, #2
200007de:	4694      	mov	ip, r2
200007e0:	44bc      	add	ip, r7
200007e2:	4463      	add	r3, ip
200007e4:	691b      	ldr	r3, [r3, #16]
200007e6:	2254      	movs	r2, #84	; 0x54
200007e8:	18ba      	adds	r2, r7, r2
200007ea:	2114      	movs	r1, #20
200007ec:	0010      	movs	r0, r2
200007ee:	4798      	blx	r3
200007f0:	e069      	b.n	200008c6 <main+0x72e>
				else if(counter < delay_until_text + 5*long_text + 4*short_text + 2)
200007f2:	4b5f      	ldr	r3, [pc, #380]	; (20000970 <main+0x7d8>)
200007f4:	681a      	ldr	r2, [r3, #0]
200007f6:	0013      	movs	r3, r2
200007f8:	009b      	lsls	r3, r3, #2
200007fa:	189a      	adds	r2, r3, r2
200007fc:	4b5b      	ldr	r3, [pc, #364]	; (2000096c <main+0x7d4>)
200007fe:	681b      	ldr	r3, [r3, #0]
20000800:	18d2      	adds	r2, r2, r3
20000802:	4b5d      	ldr	r3, [pc, #372]	; (20000978 <main+0x7e0>)
20000804:	681b      	ldr	r3, [r3, #0]
20000806:	009b      	lsls	r3, r3, #2
20000808:	18d3      	adds	r3, r2, r3
2000080a:	1c9a      	adds	r2, r3, #2
2000080c:	4b56      	ldr	r3, [pc, #344]	; (20000968 <main+0x7d0>)
2000080e:	681b      	ldr	r3, [r3, #0]
20000810:	429a      	cmp	r2, r3
20000812:	dd0c      	ble.n	2000082e <main+0x696>
					text9.display(&text9, 20);
20000814:	4b60      	ldr	r3, [pc, #384]	; (20000998 <main+0x800>)
20000816:	229c      	movs	r2, #156	; 0x9c
20000818:	0092      	lsls	r2, r2, #2
2000081a:	4694      	mov	ip, r2
2000081c:	44bc      	add	ip, r7
2000081e:	4463      	add	r3, ip
20000820:	691b      	ldr	r3, [r3, #16]
20000822:	2240      	movs	r2, #64	; 0x40
20000824:	18ba      	adds	r2, r7, r2
20000826:	2114      	movs	r1, #20
20000828:	0010      	movs	r0, r2
2000082a:	4798      	blx	r3
2000082c:	e04b      	b.n	200008c6 <main+0x72e>
				else if(counter < delay_until_text + 6*long_text + 4*short_text - 2 + 2)
2000082e:	4b50      	ldr	r3, [pc, #320]	; (20000970 <main+0x7d8>)
20000830:	681a      	ldr	r2, [r3, #0]
20000832:	0013      	movs	r3, r2
20000834:	005b      	lsls	r3, r3, #1
20000836:	189b      	adds	r3, r3, r2
20000838:	005b      	lsls	r3, r3, #1
2000083a:	001a      	movs	r2, r3
2000083c:	4b4b      	ldr	r3, [pc, #300]	; (2000096c <main+0x7d4>)
2000083e:	681b      	ldr	r3, [r3, #0]
20000840:	18d2      	adds	r2, r2, r3
20000842:	4b4d      	ldr	r3, [pc, #308]	; (20000978 <main+0x7e0>)
20000844:	681b      	ldr	r3, [r3, #0]
20000846:	009b      	lsls	r3, r3, #2
20000848:	18d2      	adds	r2, r2, r3
2000084a:	4b47      	ldr	r3, [pc, #284]	; (20000968 <main+0x7d0>)
2000084c:	681b      	ldr	r3, [r3, #0]
2000084e:	429a      	cmp	r2, r3
20000850:	dd0c      	ble.n	2000086c <main+0x6d4>
					text10.display(&text10, 15);
20000852:	4b52      	ldr	r3, [pc, #328]	; (2000099c <main+0x804>)
20000854:	229c      	movs	r2, #156	; 0x9c
20000856:	0092      	lsls	r2, r2, #2
20000858:	4694      	mov	ip, r2
2000085a:	44bc      	add	ip, r7
2000085c:	4463      	add	r3, ip
2000085e:	691b      	ldr	r3, [r3, #16]
20000860:	222c      	movs	r2, #44	; 0x2c
20000862:	18ba      	adds	r2, r7, r2
20000864:	210f      	movs	r1, #15
20000866:	0010      	movs	r0, r2
20000868:	4798      	blx	r3
2000086a:	e02c      	b.n	200008c6 <main+0x72e>
				else if(counter < delay_until_text + 6*long_text + 5*short_text + 3 + 2)
2000086c:	4b40      	ldr	r3, [pc, #256]	; (20000970 <main+0x7d8>)
2000086e:	681a      	ldr	r2, [r3, #0]
20000870:	0013      	movs	r3, r2
20000872:	005b      	lsls	r3, r3, #1
20000874:	189b      	adds	r3, r3, r2
20000876:	005b      	lsls	r3, r3, #1
20000878:	001a      	movs	r2, r3
2000087a:	4b3c      	ldr	r3, [pc, #240]	; (2000096c <main+0x7d4>)
2000087c:	681b      	ldr	r3, [r3, #0]
2000087e:	18d1      	adds	r1, r2, r3
20000880:	4b3d      	ldr	r3, [pc, #244]	; (20000978 <main+0x7e0>)
20000882:	681a      	ldr	r2, [r3, #0]
20000884:	0013      	movs	r3, r2
20000886:	009b      	lsls	r3, r3, #2
20000888:	189b      	adds	r3, r3, r2
2000088a:	18cb      	adds	r3, r1, r3
2000088c:	1d5a      	adds	r2, r3, #5
2000088e:	4b36      	ldr	r3, [pc, #216]	; (20000968 <main+0x7d0>)
20000890:	681b      	ldr	r3, [r3, #0]
20000892:	429a      	cmp	r2, r3
20000894:	dd0b      	ble.n	200008ae <main+0x716>
					text12.display(&text12, 15);
20000896:	4b42      	ldr	r3, [pc, #264]	; (200009a0 <main+0x808>)
20000898:	229c      	movs	r2, #156	; 0x9c
2000089a:	0092      	lsls	r2, r2, #2
2000089c:	4694      	mov	ip, r2
2000089e:	44bc      	add	ip, r7
200008a0:	4463      	add	r3, ip
200008a2:	691b      	ldr	r3, [r3, #16]
200008a4:	1d3a      	adds	r2, r7, #4
200008a6:	210f      	movs	r1, #15
200008a8:	0010      	movs	r0, r2
200008aa:	4798      	blx	r3
200008ac:	e00b      	b.n	200008c6 <main+0x72e>
				else {
					text11.display(&text11, 20);
200008ae:	4b3d      	ldr	r3, [pc, #244]	; (200009a4 <main+0x80c>)
200008b0:	229c      	movs	r2, #156	; 0x9c
200008b2:	0092      	lsls	r2, r2, #2
200008b4:	4694      	mov	ip, r2
200008b6:	44bc      	add	ip, r7
200008b8:	4463      	add	r3, ip
200008ba:	691b      	ldr	r3, [r3, #16]
200008bc:	2218      	movs	r2, #24
200008be:	18ba      	adds	r2, r7, r2
200008c0:	2114      	movs	r1, #20
200008c2:	0010      	movs	r0, r2
200008c4:	4798      	blx	r3
				}
				
				
				fire2.update(&fire2);
200008c6:	23ba      	movs	r3, #186	; 0xba
200008c8:	005b      	lsls	r3, r3, #1
200008ca:	18fb      	adds	r3, r7, r3
200008cc:	68db      	ldr	r3, [r3, #12]
200008ce:	22ba      	movs	r2, #186	; 0xba
200008d0:	0052      	lsls	r2, r2, #1
200008d2:	18ba      	adds	r2, r7, r2
200008d4:	0010      	movs	r0, r2
200008d6:	4798      	blx	r3
				fire3.update(&fire3);
200008d8:	4b33      	ldr	r3, [pc, #204]	; (200009a8 <main+0x810>)
200008da:	229c      	movs	r2, #156	; 0x9c
200008dc:	0092      	lsls	r2, r2, #2
200008de:	4694      	mov	ip, r2
200008e0:	44bc      	add	ip, r7
200008e2:	4463      	add	r3, ip
200008e4:	68db      	ldr	r3, [r3, #12]
200008e6:	22a8      	movs	r2, #168	; 0xa8
200008e8:	0052      	lsls	r2, r2, #1
200008ea:	18ba      	adds	r2, r7, r2
200008ec:	0010      	movs	r0, r2
200008ee:	4798      	blx	r3
				fire1.update(&fire1);
200008f0:	4b2e      	ldr	r3, [pc, #184]	; (200009ac <main+0x814>)
200008f2:	229c      	movs	r2, #156	; 0x9c
200008f4:	0092      	lsls	r2, r2, #2
200008f6:	4694      	mov	ip, r2
200008f8:	44bc      	add	ip, r7
200008fa:	4463      	add	r3, ip
200008fc:	68db      	ldr	r3, [r3, #12]
200008fe:	2284      	movs	r2, #132	; 0x84
20000900:	0052      	lsls	r2, r2, #1
20000902:	18ba      	adds	r2, r7, r2
20000904:	0010      	movs	r0, r2
20000906:	4798      	blx	r3
				fire4.update(&fire4);
20000908:	4b29      	ldr	r3, [pc, #164]	; (200009b0 <main+0x818>)
2000090a:	229c      	movs	r2, #156	; 0x9c
2000090c:	0092      	lsls	r2, r2, #2
2000090e:	4694      	mov	ip, r2
20000910:	44bc      	add	ip, r7
20000912:	4463      	add	r3, ip
20000914:	68db      	ldr	r3, [r3, #12]
20000916:	2296      	movs	r2, #150	; 0x96
20000918:	0052      	lsls	r2, r2, #1
2000091a:	18ba      	adds	r2, r7, r2
2000091c:	0010      	movs	r0, r2
2000091e:	4798      	blx	r3
				bird.update(&bird);
20000920:	23cc      	movs	r3, #204	; 0xcc
20000922:	005b      	lsls	r3, r3, #1
20000924:	18fb      	adds	r3, r7, r3
20000926:	68db      	ldr	r3, [r3, #12]
20000928:	22cc      	movs	r2, #204	; 0xcc
2000092a:	0052      	lsls	r2, r2, #1
2000092c:	18ba      	adds	r2, r7, r2
2000092e:	0010      	movs	r0, r2
20000930:	4798      	blx	r3
				bird.xPos -= 2;
20000932:	23cc      	movs	r3, #204	; 0xcc
20000934:	005b      	lsls	r3, r3, #1
20000936:	18fb      	adds	r3, r7, r3
20000938:	685b      	ldr	r3, [r3, #4]
2000093a:	1e9a      	subs	r2, r3, #2
2000093c:	23cc      	movs	r3, #204	; 0xcc
2000093e:	005b      	lsls	r3, r3, #1
20000940:	18fb      	adds	r3, r7, r3
20000942:	605a      	str	r2, [r3, #4]
				if (counter % 2 == 0) {
20000944:	4b08      	ldr	r3, [pc, #32]	; (20000968 <main+0x7d0>)
20000946:	681b      	ldr	r3, [r3, #0]
20000948:	001a      	movs	r2, r3
2000094a:	2301      	movs	r3, #1
2000094c:	4013      	ands	r3, r2
2000094e:	d000      	beq.n	20000952 <main+0x7ba>
20000950:	e5ab      	b.n	200004aa <main+0x312>
					bird.yPos--;
20000952:	23cc      	movs	r3, #204	; 0xcc
20000954:	005b      	lsls	r3, r3, #1
20000956:	18fb      	adds	r3, r7, r3
20000958:	689b      	ldr	r3, [r3, #8]
2000095a:	1e5a      	subs	r2, r3, #1
2000095c:	23cc      	movs	r3, #204	; 0xcc
2000095e:	005b      	lsls	r3, r3, #1
20000960:	18fb      	adds	r3, r7, r3
20000962:	609a      	str	r2, [r3, #8]
		switch(current_screen) {
20000964:	e5a1      	b.n	200004aa <main+0x312>
20000966:	46c0      	nop			; (mov r8, r8)
20000968:	20002770 	andcs	r2, r0, r0, ror r7
2000096c:	20005c8c 	andcs	r5, r0, ip, lsl #25
20000970:	20005c90 	mulcs	r0, r0, ip
20000974:	fffffe70 			; <UNDEFINED> instruction: 0xfffffe70
20000978:	20005c94 	mulcs	r0, r4, ip
2000097c:	fffffe5c 			; <UNDEFINED> instruction: 0xfffffe5c
20000980:	fffffe48 			; <UNDEFINED> instruction: 0xfffffe48
20000984:	fffffe34 			; <UNDEFINED> instruction: 0xfffffe34
20000988:	fffffe20 			; <UNDEFINED> instruction: 0xfffffe20
2000098c:	fffffe0c 			; <UNDEFINED> instruction: 0xfffffe0c
20000990:	fffffdf8 			; <UNDEFINED> instruction: 0xfffffdf8
20000994:	fffffde4 			; <UNDEFINED> instruction: 0xfffffde4
20000998:	fffffdd0 			; <UNDEFINED> instruction: 0xfffffdd0
2000099c:	fffffdbc 			; <UNDEFINED> instruction: 0xfffffdbc
200009a0:	fffffd94 			; <UNDEFINED> instruction: 0xfffffd94
200009a4:	fffffda8 			; <UNDEFINED> instruction: 0xfffffda8
200009a8:	fffffee0 			; <UNDEFINED> instruction: 0xfffffee0
200009ac:	fffffe98 			; <UNDEFINED> instruction: 0xfffffe98
200009b0:	fffffebc 			; <UNDEFINED> instruction: 0xfffffebc

200009b4 <render>:
GameObject* gameObjects[100];
int nGameObjects = 0;


void render(GameObject* this)
{
200009b4:	b580      	push	{r7, lr}
200009b6:	b082      	sub	sp, #8
200009b8:	af00      	add	r7, sp, #0
200009ba:	6078      	str	r0, [r7, #4]
    
}
200009bc:	46c0      	nop			; (mov r8, r8)
200009be:	46bd      	mov	sp, r7
200009c0:	b002      	add	sp, #8
200009c2:	bd80      	pop	{r7, pc}

200009c4 <gameObjectUpdate>:

void gameObjectUpdate(GameObject *this) {
200009c4:	b580      	push	{r7, lr}
200009c6:	b082      	sub	sp, #8
200009c8:	af00      	add	r7, sp, #0
200009ca:	6078      	str	r0, [r7, #4]
	this->animation_counter++;
200009cc:	687b      	ldr	r3, [r7, #4]
200009ce:	6a1b      	ldr	r3, [r3, #32]
200009d0:	1c5a      	adds	r2, r3, #1
200009d2:	687b      	ldr	r3, [r7, #4]
200009d4:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
200009d6:	687b      	ldr	r3, [r7, #4]
200009d8:	6a1a      	ldr	r2, [r3, #32]
200009da:	687b      	ldr	r3, [r7, #4]
200009dc:	69db      	ldr	r3, [r3, #28]
200009de:	429a      	cmp	r2, r3
200009e0:	d10f      	bne.n	20000a02 <gameObjectUpdate+0x3e>
		this->animation_counter = 0;
200009e2:	687b      	ldr	r3, [r7, #4]
200009e4:	2200      	movs	r2, #0
200009e6:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
200009e8:	687b      	ldr	r3, [r7, #4]
200009ea:	695b      	ldr	r3, [r3, #20]
200009ec:	1c5a      	adds	r2, r3, #1
200009ee:	687b      	ldr	r3, [r7, #4]
200009f0:	699b      	ldr	r3, [r3, #24]
200009f2:	0019      	movs	r1, r3
200009f4:	0010      	movs	r0, r2
200009f6:	f001 feb5 	bl	20002764 <__aeabi_idivmod>
200009fa:	000b      	movs	r3, r1
200009fc:	001a      	movs	r2, r3
200009fe:	687b      	ldr	r3, [r7, #4]
20000a00:	615a      	str	r2, [r3, #20]
	}
}
20000a02:	46c0      	nop			; (mov r8, r8)
20000a04:	46bd      	mov	sp, r7
20000a06:	b002      	add	sp, #8
20000a08:	bd80      	pop	{r7, pc}
	...

20000a0c <initSprites>:
Image fire2Image;
Image fire3Image;
Image fire4Image;
Image fire5Image;
Image fireImages[5];
static void initSprites( void ) {	
20000a0c:	b580      	push	{r7, lr}
20000a0e:	b08c      	sub	sp, #48	; 0x30
20000a10:	af00      	add	r7, sp, #0
	sprite *pointer0 = &tempFireBlack;
20000a12:	4b3e      	ldr	r3, [pc, #248]	; (20000b0c <initSprites+0x100>)
20000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer0, fire_black_2_bits, fire1_gray_width, fire1_gray_height);
20000a16:	493e      	ldr	r1, [pc, #248]	; (20000b10 <initSprites+0x104>)
20000a18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20000a1a:	230c      	movs	r3, #12
20000a1c:	2208      	movs	r2, #8
20000a1e:	f001 fa9d 	bl	20001f5c <load_sprite>
	fireBlack = pointer0;
20000a22:	4b3c      	ldr	r3, [pc, #240]	; (20000b14 <initSprites+0x108>)
20000a24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20000a26:	601a      	str	r2, [r3, #0]
	
	sprite *pointer1 = &tempFire1Gray;
20000a28:	4b3b      	ldr	r3, [pc, #236]	; (20000b18 <initSprites+0x10c>)
20000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer1, fire1_gray_bits, fire1_gray_width, fire1_gray_height);
20000a2c:	493b      	ldr	r1, [pc, #236]	; (20000b1c <initSprites+0x110>)
20000a2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20000a30:	230c      	movs	r3, #12
20000a32:	2208      	movs	r2, #8
20000a34:	f001 fa92 	bl	20001f5c <load_sprite>
	fire1Gray = pointer1;
20000a38:	4b39      	ldr	r3, [pc, #228]	; (20000b20 <initSprites+0x114>)
20000a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
20000a3c:	601a      	str	r2, [r3, #0]

	sprite *pointer2 = &tempFire1Light;
20000a3e:	4b39      	ldr	r3, [pc, #228]	; (20000b24 <initSprites+0x118>)
20000a40:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer2, fire1_light_bits, fire1_gray_width, fire1_gray_height);
20000a42:	4939      	ldr	r1, [pc, #228]	; (20000b28 <initSprites+0x11c>)
20000a44:	6a78      	ldr	r0, [r7, #36]	; 0x24
20000a46:	230c      	movs	r3, #12
20000a48:	2208      	movs	r2, #8
20000a4a:	f001 fa87 	bl	20001f5c <load_sprite>
	fire1Light = pointer2;
20000a4e:	4b37      	ldr	r3, [pc, #220]	; (20000b2c <initSprites+0x120>)
20000a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000a52:	601a      	str	r2, [r3, #0]

	sprite *pointer3 = &tempFire2Gray;
20000a54:	4b36      	ldr	r3, [pc, #216]	; (20000b30 <initSprites+0x124>)
20000a56:	623b      	str	r3, [r7, #32]
	load_sprite(pointer3, fire2_gray_bits, fire1_gray_width, fire1_gray_height);
20000a58:	4936      	ldr	r1, [pc, #216]	; (20000b34 <initSprites+0x128>)
20000a5a:	6a38      	ldr	r0, [r7, #32]
20000a5c:	230c      	movs	r3, #12
20000a5e:	2208      	movs	r2, #8
20000a60:	f001 fa7c 	bl	20001f5c <load_sprite>
	fire2Gray = pointer3;
20000a64:	4b34      	ldr	r3, [pc, #208]	; (20000b38 <initSprites+0x12c>)
20000a66:	6a3a      	ldr	r2, [r7, #32]
20000a68:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempFire2Light;
20000a6a:	4b34      	ldr	r3, [pc, #208]	; (20000b3c <initSprites+0x130>)
20000a6c:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer4, fire2_light_bits, fire1_gray_width, fire1_gray_height);
20000a6e:	4934      	ldr	r1, [pc, #208]	; (20000b40 <initSprites+0x134>)
20000a70:	69f8      	ldr	r0, [r7, #28]
20000a72:	230c      	movs	r3, #12
20000a74:	2208      	movs	r2, #8
20000a76:	f001 fa71 	bl	20001f5c <load_sprite>
	fire2Light = pointer4;
20000a7a:	4b32      	ldr	r3, [pc, #200]	; (20000b44 <initSprites+0x138>)
20000a7c:	69fa      	ldr	r2, [r7, #28]
20000a7e:	601a      	str	r2, [r3, #0]

	sprite *pointer5 = &tempFire3Gray;
20000a80:	4b31      	ldr	r3, [pc, #196]	; (20000b48 <initSprites+0x13c>)
20000a82:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer5, fire3_gray_bits, fire1_gray_width, fire1_gray_height);
20000a84:	4931      	ldr	r1, [pc, #196]	; (20000b4c <initSprites+0x140>)
20000a86:	69b8      	ldr	r0, [r7, #24]
20000a88:	230c      	movs	r3, #12
20000a8a:	2208      	movs	r2, #8
20000a8c:	f001 fa66 	bl	20001f5c <load_sprite>
	fire3Gray = pointer5;
20000a90:	4b2f      	ldr	r3, [pc, #188]	; (20000b50 <initSprites+0x144>)
20000a92:	69ba      	ldr	r2, [r7, #24]
20000a94:	601a      	str	r2, [r3, #0]

	sprite *pointer6 = &tempFire3Light;
20000a96:	4b2f      	ldr	r3, [pc, #188]	; (20000b54 <initSprites+0x148>)
20000a98:	617b      	str	r3, [r7, #20]
	load_sprite(pointer6, fire3_light_bits, fire1_gray_width, fire1_gray_height);
20000a9a:	492f      	ldr	r1, [pc, #188]	; (20000b58 <initSprites+0x14c>)
20000a9c:	6978      	ldr	r0, [r7, #20]
20000a9e:	230c      	movs	r3, #12
20000aa0:	2208      	movs	r2, #8
20000aa2:	f001 fa5b 	bl	20001f5c <load_sprite>
	fire3Light = pointer6;
20000aa6:	4b2d      	ldr	r3, [pc, #180]	; (20000b5c <initSprites+0x150>)
20000aa8:	697a      	ldr	r2, [r7, #20]
20000aaa:	601a      	str	r2, [r3, #0]

	sprite *pointer7 = &tempFire4Gray;
20000aac:	4b2c      	ldr	r3, [pc, #176]	; (20000b60 <initSprites+0x154>)
20000aae:	613b      	str	r3, [r7, #16]
	load_sprite(pointer7, fire4_gray_bits, fire1_gray_width, fire1_gray_height);
20000ab0:	492c      	ldr	r1, [pc, #176]	; (20000b64 <initSprites+0x158>)
20000ab2:	6938      	ldr	r0, [r7, #16]
20000ab4:	230c      	movs	r3, #12
20000ab6:	2208      	movs	r2, #8
20000ab8:	f001 fa50 	bl	20001f5c <load_sprite>
	fire4Gray = pointer7;
20000abc:	4b2a      	ldr	r3, [pc, #168]	; (20000b68 <initSprites+0x15c>)
20000abe:	693a      	ldr	r2, [r7, #16]
20000ac0:	601a      	str	r2, [r3, #0]

	sprite *pointer8 = &tempFire4Light;
20000ac2:	4b2a      	ldr	r3, [pc, #168]	; (20000b6c <initSprites+0x160>)
20000ac4:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer8, fire4_light_bits, fire1_gray_width, fire1_gray_height);
20000ac6:	492a      	ldr	r1, [pc, #168]	; (20000b70 <initSprites+0x164>)
20000ac8:	68f8      	ldr	r0, [r7, #12]
20000aca:	230c      	movs	r3, #12
20000acc:	2208      	movs	r2, #8
20000ace:	f001 fa45 	bl	20001f5c <load_sprite>
	fire4Light = pointer8;
20000ad2:	4b28      	ldr	r3, [pc, #160]	; (20000b74 <initSprites+0x168>)
20000ad4:	68fa      	ldr	r2, [r7, #12]
20000ad6:	601a      	str	r2, [r3, #0]

	sprite *pointer9 = &tempFire5Gray;
20000ad8:	4b27      	ldr	r3, [pc, #156]	; (20000b78 <initSprites+0x16c>)
20000ada:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer9, fire5_gray_bits, fire1_gray_width, fire1_gray_height);
20000adc:	4927      	ldr	r1, [pc, #156]	; (20000b7c <initSprites+0x170>)
20000ade:	68b8      	ldr	r0, [r7, #8]
20000ae0:	230c      	movs	r3, #12
20000ae2:	2208      	movs	r2, #8
20000ae4:	f001 fa3a 	bl	20001f5c <load_sprite>
	fire5Gray = pointer9;
20000ae8:	4b25      	ldr	r3, [pc, #148]	; (20000b80 <initSprites+0x174>)
20000aea:	68ba      	ldr	r2, [r7, #8]
20000aec:	601a      	str	r2, [r3, #0]

	sprite *pointer10 = &tempFire5Light;
20000aee:	4b25      	ldr	r3, [pc, #148]	; (20000b84 <initSprites+0x178>)
20000af0:	607b      	str	r3, [r7, #4]
	load_sprite(pointer10, fire5_light_bits, fire1_gray_width, fire1_gray_height);
20000af2:	4925      	ldr	r1, [pc, #148]	; (20000b88 <initSprites+0x17c>)
20000af4:	6878      	ldr	r0, [r7, #4]
20000af6:	230c      	movs	r3, #12
20000af8:	2208      	movs	r2, #8
20000afa:	f001 fa2f 	bl	20001f5c <load_sprite>
	fire5Light = pointer10;
20000afe:	4b23      	ldr	r3, [pc, #140]	; (20000b8c <initSprites+0x180>)
20000b00:	687a      	ldr	r2, [r7, #4]
20000b02:	601a      	str	r2, [r3, #0]
}
20000b04:	46c0      	nop			; (mov r8, r8)
20000b06:	46bd      	mov	sp, r7
20000b08:	b00c      	add	sp, #48	; 0x30
20000b0a:	bd80      	pop	{r7, pc}
20000b0c:	200029ec 	andcs	r2, r0, ip, ror #19
20000b10:	20005c98 	mulcs	r0, r8, ip
20000b14:	20002ae4 	andcs	r2, r0, r4, ror #21
20000b18:	20002ad8 	ldrdcs	r2, [r0], -r8
20000b1c:	20005ca4 	andcs	r5, r0, r4, lsr #25
20000b20:	20002afc 	strdcs	r2, [r0], -ip
20000b24:	20002ab4 			; <UNDEFINED> instruction: 0x20002ab4
20000b28:	20005cb0 			; <UNDEFINED> instruction: 0x20005cb0
20000b2c:	200029b4 			; <UNDEFINED> instruction: 0x200029b4
20000b30:	200029e0 	andcs	r2, r0, r0, ror #19
20000b34:	20005cbc 			; <UNDEFINED> instruction: 0x20005cbc
20000b38:	20002af8 	strdcs	r2, [r0], -r8
20000b3c:	20002ae8 	andcs	r2, r0, r8, ror #21
20000b40:	20005cc8 	andcs	r5, r0, r8, asr #25
20000b44:	20002ad0 	ldrdcs	r2, [r0], -r0
20000b48:	20002a98 	mulcs	r0, r8, sl
20000b4c:	20005cd4 	ldrdcs	r5, [r0], -r4
20000b50:	200029c4 	andcs	r2, r0, r4, asr #19
20000b54:	200029b8 			; <UNDEFINED> instruction: 0x200029b8
20000b58:	20005ce0 	andcs	r5, r0, r0, ror #25
20000b5c:	20002af4 	strdcs	r2, [r0], -r4
20000b60:	200029c8 	andcs	r2, r0, r8, asr #19
20000b64:	20005cec 	andcs	r5, r0, ip, ror #25
20000b68:	20002ab0 			; <UNDEFINED> instruction: 0x20002ab0
20000b6c:	20002a04 	andcs	r2, r0, r4, lsl #20
20000b70:	20005cf8 	strdcs	r5, [r0], -r8
20000b74:	20002a1c 	andcs	r2, r0, ip, lsl sl
20000b78:	20002a8c 	andcs	r2, r0, ip, lsl #21
20000b7c:	20005d04 	andcs	r5, r0, r4, lsl #26
20000b80:	20002acc 	andcs	r2, r0, ip, asr #21
20000b84:	20002ac0 	andcs	r2, r0, r0, asr #21
20000b88:	20005d10 	andcs	r5, r0, r0, lsl sp
20000b8c:	20002ad4 	ldrdcs	r2, [r0], -r4

20000b90 <init_fire>:
	
void init_fire( GameObject *fireObj ) {
20000b90:	b590      	push	{r4, r7, lr}
20000b92:	b083      	sub	sp, #12
20000b94:	af00      	add	r7, sp, #0
20000b96:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20000b98:	4b30      	ldr	r3, [pc, #192]	; (20000c5c <init_fire+0xcc>)
20000b9a:	681b      	ldr	r3, [r3, #0]
20000b9c:	2b00      	cmp	r3, #0
20000b9e:	d049      	beq.n	20000c34 <init_fire+0xa4>
		initSprites();
20000ba0:	f7ff ff34 	bl	20000a0c <initSprites>
		firstTime = 0;			
20000ba4:	4b2d      	ldr	r3, [pc, #180]	; (20000c5c <init_fire+0xcc>)
20000ba6:	2200      	movs	r2, #0
20000ba8:	601a      	str	r2, [r3, #0]

		fireImages[0] = fire1Image;
20000baa:	4b2d      	ldr	r3, [pc, #180]	; (20000c60 <init_fire+0xd0>)
20000bac:	4a2d      	ldr	r2, [pc, #180]	; (20000c64 <init_fire+0xd4>)
20000bae:	ca13      	ldmia	r2!, {r0, r1, r4}
20000bb0:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[1] = fire2Image;
20000bb2:	4b2b      	ldr	r3, [pc, #172]	; (20000c60 <init_fire+0xd0>)
20000bb4:	4a2c      	ldr	r2, [pc, #176]	; (20000c68 <init_fire+0xd8>)
20000bb6:	330c      	adds	r3, #12
20000bb8:	ca13      	ldmia	r2!, {r0, r1, r4}
20000bba:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[2] = fire3Image;
20000bbc:	4b28      	ldr	r3, [pc, #160]	; (20000c60 <init_fire+0xd0>)
20000bbe:	4a2b      	ldr	r2, [pc, #172]	; (20000c6c <init_fire+0xdc>)
20000bc0:	3318      	adds	r3, #24
20000bc2:	ca13      	ldmia	r2!, {r0, r1, r4}
20000bc4:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[3] = fire4Image;
20000bc6:	4b26      	ldr	r3, [pc, #152]	; (20000c60 <init_fire+0xd0>)
20000bc8:	4a29      	ldr	r2, [pc, #164]	; (20000c70 <init_fire+0xe0>)
20000bca:	3324      	adds	r3, #36	; 0x24
20000bcc:	ca13      	ldmia	r2!, {r0, r1, r4}
20000bce:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[4] = fire5Image;
20000bd0:	4b23      	ldr	r3, [pc, #140]	; (20000c60 <init_fire+0xd0>)
20000bd2:	4a28      	ldr	r2, [pc, #160]	; (20000c74 <init_fire+0xe4>)
20000bd4:	3330      	adds	r3, #48	; 0x30
20000bd6:	ca13      	ldmia	r2!, {r0, r1, r4}
20000bd8:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&fireImages[0], fire1Gray, fire1Light, fireBlack);
20000bda:	4b27      	ldr	r3, [pc, #156]	; (20000c78 <init_fire+0xe8>)
20000bdc:	6819      	ldr	r1, [r3, #0]
20000bde:	4b27      	ldr	r3, [pc, #156]	; (20000c7c <init_fire+0xec>)
20000be0:	681a      	ldr	r2, [r3, #0]
20000be2:	4b27      	ldr	r3, [pc, #156]	; (20000c80 <init_fire+0xf0>)
20000be4:	681b      	ldr	r3, [r3, #0]
20000be6:	481e      	ldr	r0, [pc, #120]	; (20000c60 <init_fire+0xd0>)
20000be8:	f001 f9a4 	bl	20001f34 <load_image>
		load_image(&fireImages[1], fire2Gray, fire2Light, fireBlack);
20000bec:	4b25      	ldr	r3, [pc, #148]	; (20000c84 <init_fire+0xf4>)
20000bee:	6819      	ldr	r1, [r3, #0]
20000bf0:	4b25      	ldr	r3, [pc, #148]	; (20000c88 <init_fire+0xf8>)
20000bf2:	681a      	ldr	r2, [r3, #0]
20000bf4:	4b22      	ldr	r3, [pc, #136]	; (20000c80 <init_fire+0xf0>)
20000bf6:	681b      	ldr	r3, [r3, #0]
20000bf8:	4824      	ldr	r0, [pc, #144]	; (20000c8c <init_fire+0xfc>)
20000bfa:	f001 f99b 	bl	20001f34 <load_image>
		load_image(&fireImages[2], fire3Gray, fire3Light, fireBlack);
20000bfe:	4b24      	ldr	r3, [pc, #144]	; (20000c90 <init_fire+0x100>)
20000c00:	6819      	ldr	r1, [r3, #0]
20000c02:	4b24      	ldr	r3, [pc, #144]	; (20000c94 <init_fire+0x104>)
20000c04:	681a      	ldr	r2, [r3, #0]
20000c06:	4b1e      	ldr	r3, [pc, #120]	; (20000c80 <init_fire+0xf0>)
20000c08:	681b      	ldr	r3, [r3, #0]
20000c0a:	4823      	ldr	r0, [pc, #140]	; (20000c98 <init_fire+0x108>)
20000c0c:	f001 f992 	bl	20001f34 <load_image>
		load_image(&fireImages[3], fire4Gray, fire4Light, fireBlack);
20000c10:	4b22      	ldr	r3, [pc, #136]	; (20000c9c <init_fire+0x10c>)
20000c12:	6819      	ldr	r1, [r3, #0]
20000c14:	4b22      	ldr	r3, [pc, #136]	; (20000ca0 <init_fire+0x110>)
20000c16:	681a      	ldr	r2, [r3, #0]
20000c18:	4b19      	ldr	r3, [pc, #100]	; (20000c80 <init_fire+0xf0>)
20000c1a:	681b      	ldr	r3, [r3, #0]
20000c1c:	4821      	ldr	r0, [pc, #132]	; (20000ca4 <init_fire+0x114>)
20000c1e:	f001 f989 	bl	20001f34 <load_image>
		load_image(&fireImages[4], fire5Gray, fire5Light, fireBlack);
20000c22:	4b21      	ldr	r3, [pc, #132]	; (20000ca8 <init_fire+0x118>)
20000c24:	6819      	ldr	r1, [r3, #0]
20000c26:	4b21      	ldr	r3, [pc, #132]	; (20000cac <init_fire+0x11c>)
20000c28:	681a      	ldr	r2, [r3, #0]
20000c2a:	4b15      	ldr	r3, [pc, #84]	; (20000c80 <init_fire+0xf0>)
20000c2c:	681b      	ldr	r3, [r3, #0]
20000c2e:	4820      	ldr	r0, [pc, #128]	; (20000cb0 <init_fire+0x120>)
20000c30:	f001 f980 	bl	20001f34 <load_image>
	}
	
	fireObj->images = fireImages;
20000c34:	687b      	ldr	r3, [r7, #4]
20000c36:	4a0a      	ldr	r2, [pc, #40]	; (20000c60 <init_fire+0xd0>)
20000c38:	601a      	str	r2, [r3, #0]

	fireObj->current_frame = 0;
20000c3a:	687b      	ldr	r3, [r7, #4]
20000c3c:	2200      	movs	r2, #0
20000c3e:	615a      	str	r2, [r3, #20]
	fireObj->n_frames = 5;
20000c40:	687b      	ldr	r3, [r7, #4]
20000c42:	2205      	movs	r2, #5
20000c44:	619a      	str	r2, [r3, #24]
	fireObj->animation_speed = 1;
20000c46:	687b      	ldr	r3, [r7, #4]
20000c48:	2201      	movs	r2, #1
20000c4a:	61da      	str	r2, [r3, #28]
	fireObj->animation_counter = 0;
20000c4c:	687b      	ldr	r3, [r7, #4]
20000c4e:	2200      	movs	r2, #0
20000c50:	621a      	str	r2, [r3, #32]
}
20000c52:	46c0      	nop			; (mov r8, r8)
20000c54:	46bd      	mov	sp, r7
20000c56:	b003      	add	sp, #12
20000c58:	bd90      	pop	{r4, r7, pc}
20000c5a:	46c0      	nop			; (mov r8, r8)
20000c5c:	20005d1c 	andcs	r5, r0, ip, lsl sp
20000c60:	20002a50 	andcs	r2, r0, r0, asr sl
20000c64:	20002a10 	andcs	r2, r0, r0, lsl sl
20000c68:	200029d4 	ldrdcs	r2, [r0], -r4
20000c6c:	200029f8 	strdcs	r2, [r0], -r8
20000c70:	20002aa4 	andcs	r2, r0, r4, lsr #21
20000c74:	20002a44 	andcs	r2, r0, r4, asr #20
20000c78:	20002afc 	strdcs	r2, [r0], -ip
20000c7c:	200029b4 			; <UNDEFINED> instruction: 0x200029b4
20000c80:	20002ae4 	andcs	r2, r0, r4, ror #21
20000c84:	20002af8 	strdcs	r2, [r0], -r8
20000c88:	20002ad0 	ldrdcs	r2, [r0], -r0
20000c8c:	20002a5c 	andcs	r2, r0, ip, asr sl
20000c90:	200029c4 	andcs	r2, r0, r4, asr #19
20000c94:	20002af4 	strdcs	r2, [r0], -r4
20000c98:	20002a68 	andcs	r2, r0, r8, ror #20
20000c9c:	20002ab0 			; <UNDEFINED> instruction: 0x20002ab0
20000ca0:	20002a1c 	andcs	r2, r0, ip, lsl sl
20000ca4:	20002a74 	andcs	r2, r0, r4, ror sl
20000ca8:	20002acc 	andcs	r2, r0, ip, asr #21
20000cac:	20002ad4 	ldrdcs	r2, [r0], -r4
20000cb0:	20002a80 	andcs	r2, r0, r0, lsl #21

20000cb4 <playerUpdate>:
#include "gpio.h"
#include "controls.h"
#include "gameobject.h"
#include "player.h"

void playerUpdate(GameObject *this) {
20000cb4:	b580      	push	{r7, lr}
20000cb6:	b082      	sub	sp, #8
20000cb8:	af00      	add	r7, sp, #0
20000cba:	6078      	str	r0, [r7, #4]
	this->animation_counter++;
20000cbc:	687b      	ldr	r3, [r7, #4]
20000cbe:	6a1b      	ldr	r3, [r3, #32]
20000cc0:	1c5a      	adds	r2, r3, #1
20000cc2:	687b      	ldr	r3, [r7, #4]
20000cc4:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
20000cc6:	687b      	ldr	r3, [r7, #4]
20000cc8:	6a1a      	ldr	r2, [r3, #32]
20000cca:	687b      	ldr	r3, [r7, #4]
20000ccc:	69db      	ldr	r3, [r3, #28]
20000cce:	429a      	cmp	r2, r3
20000cd0:	d10f      	bne.n	20000cf2 <playerUpdate+0x3e>
		this->animation_counter = 0;
20000cd2:	687b      	ldr	r3, [r7, #4]
20000cd4:	2200      	movs	r2, #0
20000cd6:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
20000cd8:	687b      	ldr	r3, [r7, #4]
20000cda:	695b      	ldr	r3, [r3, #20]
20000cdc:	1c5a      	adds	r2, r3, #1
20000cde:	687b      	ldr	r3, [r7, #4]
20000ce0:	699b      	ldr	r3, [r3, #24]
20000ce2:	0019      	movs	r1, r3
20000ce4:	0010      	movs	r0, r2
20000ce6:	f001 fd3d 	bl	20002764 <__aeabi_idivmod>
20000cea:	000b      	movs	r3, r1
20000cec:	001a      	movs	r2, r3
20000cee:	687b      	ldr	r3, [r7, #4]
20000cf0:	615a      	str	r2, [r3, #20]
	
	static lastRightValue = 0;
	static lastLeftValue = 0; 
	static speed = 0;
	
	if (!lastRightValue && read_DIL_single(RIGHT_TRIGGER)){
20000cf2:	4b23      	ldr	r3, [pc, #140]	; (20000d80 <playerUpdate+0xcc>)
20000cf4:	681b      	ldr	r3, [r3, #0]
20000cf6:	2b00      	cmp	r3, #0
20000cf8:	d109      	bne.n	20000d0e <playerUpdate+0x5a>
20000cfa:	2000      	movs	r0, #0
20000cfc:	f001 f958 	bl	20001fb0 <read_DIL_single>
20000d00:	1e03      	subs	r3, r0, #0
20000d02:	d004      	beq.n	20000d0e <playerUpdate+0x5a>
		speed += SPEED_ADD;
20000d04:	4b1f      	ldr	r3, [pc, #124]	; (20000d84 <playerUpdate+0xd0>)
20000d06:	681b      	ldr	r3, [r3, #0]
20000d08:	1cda      	adds	r2, r3, #3
20000d0a:	4b1e      	ldr	r3, [pc, #120]	; (20000d84 <playerUpdate+0xd0>)
20000d0c:	601a      	str	r2, [r3, #0]
	}
	
	if (!lastLeftValue && read_DIL_single(LEFT_TRIGGER)){
20000d0e:	4b1e      	ldr	r3, [pc, #120]	; (20000d88 <playerUpdate+0xd4>)
20000d10:	681b      	ldr	r3, [r3, #0]
20000d12:	2b00      	cmp	r3, #0
20000d14:	d109      	bne.n	20000d2a <playerUpdate+0x76>
20000d16:	2007      	movs	r0, #7
20000d18:	f001 f94a 	bl	20001fb0 <read_DIL_single>
20000d1c:	1e03      	subs	r3, r0, #0
20000d1e:	d004      	beq.n	20000d2a <playerUpdate+0x76>
		speed -= SPEED_ADD;
20000d20:	4b18      	ldr	r3, [pc, #96]	; (20000d84 <playerUpdate+0xd0>)
20000d22:	681b      	ldr	r3, [r3, #0]
20000d24:	1eda      	subs	r2, r3, #3
20000d26:	4b17      	ldr	r3, [pc, #92]	; (20000d84 <playerUpdate+0xd0>)
20000d28:	601a      	str	r2, [r3, #0]
	}
	
	this->xPos += speed;
20000d2a:	687b      	ldr	r3, [r7, #4]
20000d2c:	685a      	ldr	r2, [r3, #4]
20000d2e:	4b15      	ldr	r3, [pc, #84]	; (20000d84 <playerUpdate+0xd0>)
20000d30:	681b      	ldr	r3, [r3, #0]
20000d32:	18d2      	adds	r2, r2, r3
20000d34:	687b      	ldr	r3, [r7, #4]
20000d36:	605a      	str	r2, [r3, #4]
	
	if (speed > 0){
20000d38:	4b12      	ldr	r3, [pc, #72]	; (20000d84 <playerUpdate+0xd0>)
20000d3a:	681b      	ldr	r3, [r3, #0]
20000d3c:	2b00      	cmp	r3, #0
20000d3e:	dd05      	ble.n	20000d4c <playerUpdate+0x98>
		speed--;
20000d40:	4b10      	ldr	r3, [pc, #64]	; (20000d84 <playerUpdate+0xd0>)
20000d42:	681b      	ldr	r3, [r3, #0]
20000d44:	1e5a      	subs	r2, r3, #1
20000d46:	4b0f      	ldr	r3, [pc, #60]	; (20000d84 <playerUpdate+0xd0>)
20000d48:	601a      	str	r2, [r3, #0]
20000d4a:	e008      	b.n	20000d5e <playerUpdate+0xaa>
	}
	else if (speed < 0){
20000d4c:	4b0d      	ldr	r3, [pc, #52]	; (20000d84 <playerUpdate+0xd0>)
20000d4e:	681b      	ldr	r3, [r3, #0]
20000d50:	2b00      	cmp	r3, #0
20000d52:	da04      	bge.n	20000d5e <playerUpdate+0xaa>
		speed++;
20000d54:	4b0b      	ldr	r3, [pc, #44]	; (20000d84 <playerUpdate+0xd0>)
20000d56:	681b      	ldr	r3, [r3, #0]
20000d58:	1c5a      	adds	r2, r3, #1
20000d5a:	4b0a      	ldr	r3, [pc, #40]	; (20000d84 <playerUpdate+0xd0>)
20000d5c:	601a      	str	r2, [r3, #0]
	}
	
	lastRightValue = read_DIL_single(RIGHT_TRIGGER);
20000d5e:	2000      	movs	r0, #0
20000d60:	f001 f926 	bl	20001fb0 <read_DIL_single>
20000d64:	0002      	movs	r2, r0
20000d66:	4b06      	ldr	r3, [pc, #24]	; (20000d80 <playerUpdate+0xcc>)
20000d68:	601a      	str	r2, [r3, #0]
	lastLeftValue = read_DIL_single(LEFT_TRIGGER);
20000d6a:	2007      	movs	r0, #7
20000d6c:	f001 f920 	bl	20001fb0 <read_DIL_single>
20000d70:	0002      	movs	r2, r0
20000d72:	4b05      	ldr	r3, [pc, #20]	; (20000d88 <playerUpdate+0xd4>)
20000d74:	601a      	str	r2, [r3, #0]
	
20000d76:	46c0      	nop			; (mov r8, r8)
20000d78:	46bd      	mov	sp, r7
20000d7a:	b002      	add	sp, #8
20000d7c:	bd80      	pop	{r7, pc}
20000d7e:	46c0      	nop			; (mov r8, r8)
20000d80:	20002778 	andcs	r2, r0, r8, ror r7
20000d84:	2000277c 	andcs	r2, r0, ip, ror r7
20000d88:	20002780 	andcs	r2, r0, r0, lsl #15

20000d8c <initSprites>:
Image bird5Image;
Image bird6Image;
//Image bird7Image;
//Image bird8Image;
Image birdImages[6];
static void initSprites( void ) {	
20000d8c:	b580      	push	{r7, lr}
20000d8e:	b090      	sub	sp, #64	; 0x40
20000d90:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempBirdLight;
20000d92:	4b54      	ldr	r3, [pc, #336]	; (20000ee4 <initSprites+0x158>)
20000d94:	63fb      	str	r3, [r7, #60]	; 0x3c
	load_sprite(pointer11, bird1_light_bits, bird1_black_width, bird1_black_height);
20000d96:	4954      	ldr	r1, [pc, #336]	; (20000ee8 <initSprites+0x15c>)
20000d98:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
20000d9a:	2319      	movs	r3, #25
20000d9c:	2219      	movs	r2, #25
20000d9e:	f001 f8dd 	bl	20001f5c <load_sprite>
	bird1Light = pointer11;
20000da2:	4b52      	ldr	r3, [pc, #328]	; (20000eec <initSprites+0x160>)
20000da4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
20000da6:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempBirdGray;
20000da8:	4b51      	ldr	r3, [pc, #324]	; (20000ef0 <initSprites+0x164>)
20000daa:	63bb      	str	r3, [r7, #56]	; 0x38
	load_sprite(pointer12, bird1_gray_bits, bird1_black_width, bird1_black_height);
20000dac:	4951      	ldr	r1, [pc, #324]	; (20000ef4 <initSprites+0x168>)
20000dae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
20000db0:	2319      	movs	r3, #25
20000db2:	2219      	movs	r2, #25
20000db4:	f001 f8d2 	bl	20001f5c <load_sprite>
	bird1Gray = pointer12;
20000db8:	4b4f      	ldr	r3, [pc, #316]	; (20000ef8 <initSprites+0x16c>)
20000dba:	6bba      	ldr	r2, [r7, #56]	; 0x38
20000dbc:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempBirdBlack;
20000dbe:	4b4f      	ldr	r3, [pc, #316]	; (20000efc <initSprites+0x170>)
20000dc0:	637b      	str	r3, [r7, #52]	; 0x34
	load_sprite(pointer13, bird1_black_bits, bird1_black_width, bird1_black_height);
20000dc2:	494f      	ldr	r1, [pc, #316]	; (20000f00 <initSprites+0x174>)
20000dc4:	6b78      	ldr	r0, [r7, #52]	; 0x34
20000dc6:	2319      	movs	r3, #25
20000dc8:	2219      	movs	r2, #25
20000dca:	f001 f8c7 	bl	20001f5c <load_sprite>
	bird1Black = pointer13;	
20000dce:	4b4d      	ldr	r3, [pc, #308]	; (20000f04 <initSprites+0x178>)
20000dd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
20000dd2:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempBird2Light;
20000dd4:	4b4c      	ldr	r3, [pc, #304]	; (20000f08 <initSprites+0x17c>)
20000dd6:	633b      	str	r3, [r7, #48]	; 0x30
	load_sprite(pointer14, bird2_light_bits, bird2_black_width, bird2_black_height);
20000dd8:	494c      	ldr	r1, [pc, #304]	; (20000f0c <initSprites+0x180>)
20000dda:	6b38      	ldr	r0, [r7, #48]	; 0x30
20000ddc:	2319      	movs	r3, #25
20000dde:	2219      	movs	r2, #25
20000de0:	f001 f8bc 	bl	20001f5c <load_sprite>
	bird2Light = pointer14;
20000de4:	4b4a      	ldr	r3, [pc, #296]	; (20000f10 <initSprites+0x184>)
20000de6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20000de8:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempBird2Gray;
20000dea:	4b4a      	ldr	r3, [pc, #296]	; (20000f14 <initSprites+0x188>)
20000dec:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer15, bird2_gray_bits, bird2_black_width, bird2_black_height);
20000dee:	494a      	ldr	r1, [pc, #296]	; (20000f18 <initSprites+0x18c>)
20000df0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20000df2:	2319      	movs	r3, #25
20000df4:	2219      	movs	r2, #25
20000df6:	f001 f8b1 	bl	20001f5c <load_sprite>
	bird2Gray = pointer15;
20000dfa:	4b48      	ldr	r3, [pc, #288]	; (20000f1c <initSprites+0x190>)
20000dfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20000dfe:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempBird2Black;
20000e00:	4b47      	ldr	r3, [pc, #284]	; (20000f20 <initSprites+0x194>)
20000e02:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer16, bird2_black_bits, bird2_black_width, bird2_black_height);
20000e04:	4947      	ldr	r1, [pc, #284]	; (20000f24 <initSprites+0x198>)
20000e06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20000e08:	2319      	movs	r3, #25
20000e0a:	2219      	movs	r2, #25
20000e0c:	f001 f8a6 	bl	20001f5c <load_sprite>
	bird2Black = pointer16;
20000e10:	4b45      	ldr	r3, [pc, #276]	; (20000f28 <initSprites+0x19c>)
20000e12:	6aba      	ldr	r2, [r7, #40]	; 0x28
20000e14:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempBird3Light;
20000e16:	4b45      	ldr	r3, [pc, #276]	; (20000f2c <initSprites+0x1a0>)
20000e18:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(finalPointer, bird3_light_bits, bird3_black_width, bird3_black_height);
20000e1a:	4945      	ldr	r1, [pc, #276]	; (20000f30 <initSprites+0x1a4>)
20000e1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
20000e1e:	2319      	movs	r3, #25
20000e20:	2219      	movs	r2, #25
20000e22:	f001 f89b 	bl	20001f5c <load_sprite>
	bird3Light = finalPointer;
20000e26:	4b43      	ldr	r3, [pc, #268]	; (20000f34 <initSprites+0x1a8>)
20000e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000e2a:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempBird3Gray;
20000e2c:	4b42      	ldr	r3, [pc, #264]	; (20000f38 <initSprites+0x1ac>)
20000e2e:	623b      	str	r3, [r7, #32]
	load_sprite(pointer17, bird3_gray_bits, bird3_black_width, bird3_black_height);
20000e30:	4942      	ldr	r1, [pc, #264]	; (20000f3c <initSprites+0x1b0>)
20000e32:	6a38      	ldr	r0, [r7, #32]
20000e34:	2319      	movs	r3, #25
20000e36:	2219      	movs	r2, #25
20000e38:	f001 f890 	bl	20001f5c <load_sprite>
	bird3Gray = pointer17;
20000e3c:	4b40      	ldr	r3, [pc, #256]	; (20000f40 <initSprites+0x1b4>)
20000e3e:	6a3a      	ldr	r2, [r7, #32]
20000e40:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempBird3Black;
20000e42:	4b40      	ldr	r3, [pc, #256]	; (20000f44 <initSprites+0x1b8>)
20000e44:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer18, bird3_black_bits, bird3_black_width, bird3_black_height);
20000e46:	4940      	ldr	r1, [pc, #256]	; (20000f48 <initSprites+0x1bc>)
20000e48:	69f8      	ldr	r0, [r7, #28]
20000e4a:	2319      	movs	r3, #25
20000e4c:	2219      	movs	r2, #25
20000e4e:	f001 f885 	bl	20001f5c <load_sprite>
	bird3Black = pointer18;	
20000e52:	4b3e      	ldr	r3, [pc, #248]	; (20000f4c <initSprites+0x1c0>)
20000e54:	69fa      	ldr	r2, [r7, #28]
20000e56:	601a      	str	r2, [r3, #0]
	
	sprite *pointer19 = &tempBird4Light;
20000e58:	4b3d      	ldr	r3, [pc, #244]	; (20000f50 <initSprites+0x1c4>)
20000e5a:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer19, bird4_light_bits, bird4_black_width, bird4_black_height);
20000e5c:	493d      	ldr	r1, [pc, #244]	; (20000f54 <initSprites+0x1c8>)
20000e5e:	69b8      	ldr	r0, [r7, #24]
20000e60:	2319      	movs	r3, #25
20000e62:	2219      	movs	r2, #25
20000e64:	f001 f87a 	bl	20001f5c <load_sprite>
	bird4Light = pointer19;
20000e68:	4b3b      	ldr	r3, [pc, #236]	; (20000f58 <initSprites+0x1cc>)
20000e6a:	69ba      	ldr	r2, [r7, #24]
20000e6c:	601a      	str	r2, [r3, #0]
	sprite *pointer20 = &tempBird4Gray;
20000e6e:	4b3b      	ldr	r3, [pc, #236]	; (20000f5c <initSprites+0x1d0>)
20000e70:	617b      	str	r3, [r7, #20]
	load_sprite(pointer20, bird4_gray_bits, bird4_black_width, bird4_black_height);
20000e72:	493b      	ldr	r1, [pc, #236]	; (20000f60 <initSprites+0x1d4>)
20000e74:	6978      	ldr	r0, [r7, #20]
20000e76:	2319      	movs	r3, #25
20000e78:	2219      	movs	r2, #25
20000e7a:	f001 f86f 	bl	20001f5c <load_sprite>
	bird4Gray = pointer20;
20000e7e:	4b39      	ldr	r3, [pc, #228]	; (20000f64 <initSprites+0x1d8>)
20000e80:	697a      	ldr	r2, [r7, #20]
20000e82:	601a      	str	r2, [r3, #0]
	sprite *pointer21 = &tempBird4Black;
20000e84:	4b38      	ldr	r3, [pc, #224]	; (20000f68 <initSprites+0x1dc>)
20000e86:	613b      	str	r3, [r7, #16]
	load_sprite(pointer21, bird4_black_bits, bird4_black_width, bird4_black_height);
20000e88:	4938      	ldr	r1, [pc, #224]	; (20000f6c <initSprites+0x1e0>)
20000e8a:	6938      	ldr	r0, [r7, #16]
20000e8c:	2319      	movs	r3, #25
20000e8e:	2219      	movs	r2, #25
20000e90:	f001 f864 	bl	20001f5c <load_sprite>
	bird4Black = pointer21;	
20000e94:	4b36      	ldr	r3, [pc, #216]	; (20000f70 <initSprites+0x1e4>)
20000e96:	693a      	ldr	r2, [r7, #16]
20000e98:	601a      	str	r2, [r3, #0]
	
	sprite *pointer22 = &tempBird5Light;
20000e9a:	4b36      	ldr	r3, [pc, #216]	; (20000f74 <initSprites+0x1e8>)
20000e9c:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer22, bird5_light_bits, bird5_black_width, bird5_black_height);
20000e9e:	4936      	ldr	r1, [pc, #216]	; (20000f78 <initSprites+0x1ec>)
20000ea0:	68f8      	ldr	r0, [r7, #12]
20000ea2:	2319      	movs	r3, #25
20000ea4:	2219      	movs	r2, #25
20000ea6:	f001 f859 	bl	20001f5c <load_sprite>
	bird5Light = pointer22;
20000eaa:	4b34      	ldr	r3, [pc, #208]	; (20000f7c <initSprites+0x1f0>)
20000eac:	68fa      	ldr	r2, [r7, #12]
20000eae:	601a      	str	r2, [r3, #0]
	sprite *pointer23 = &tempBird5Gray;
20000eb0:	4b33      	ldr	r3, [pc, #204]	; (20000f80 <initSprites+0x1f4>)
20000eb2:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer23, bird5_gray_bits, bird5_black_width, bird5_black_height);
20000eb4:	4933      	ldr	r1, [pc, #204]	; (20000f84 <initSprites+0x1f8>)
20000eb6:	68b8      	ldr	r0, [r7, #8]
20000eb8:	2319      	movs	r3, #25
20000eba:	2219      	movs	r2, #25
20000ebc:	f001 f84e 	bl	20001f5c <load_sprite>
	bird5Gray = pointer23;
20000ec0:	4b31      	ldr	r3, [pc, #196]	; (20000f88 <initSprites+0x1fc>)
20000ec2:	68ba      	ldr	r2, [r7, #8]
20000ec4:	601a      	str	r2, [r3, #0]
	sprite *pointer24 = &tempBird5Black;
20000ec6:	4b31      	ldr	r3, [pc, #196]	; (20000f8c <initSprites+0x200>)
20000ec8:	607b      	str	r3, [r7, #4]
	load_sprite(pointer24, bird5_black_bits, bird5_black_width, bird5_black_height);
20000eca:	4931      	ldr	r1, [pc, #196]	; (20000f90 <initSprites+0x204>)
20000ecc:	6878      	ldr	r0, [r7, #4]
20000ece:	2319      	movs	r3, #25
20000ed0:	2219      	movs	r2, #25
20000ed2:	f001 f843 	bl	20001f5c <load_sprite>
	bird5Black = pointer24;
20000ed6:	4b2f      	ldr	r3, [pc, #188]	; (20000f94 <initSprites+0x208>)
20000ed8:	687a      	ldr	r2, [r7, #4]
20000eda:	601a      	str	r2, [r3, #0]
}
20000edc:	46c0      	nop			; (mov r8, r8)
20000ede:	46bd      	mov	sp, r7
20000ee0:	b010      	add	sp, #64	; 0x40
20000ee2:	bd80      	pop	{r7, pc}
20000ee4:	20002bf0 	strdcs	r2, [r0], -r0
20000ee8:	20005de8 	andcs	r5, r0, r8, ror #27
20000eec:	20002bfc 	strdcs	r2, [r0], -ip
20000ef0:	20002b8c 	andcs	r2, r0, ip, lsl #23
20000ef4:	20005d84 	andcs	r5, r0, r4, lsl #27
20000ef8:	20002b04 	andcs	r2, r0, r4, lsl #22
20000efc:	20002b7c 	andcs	r2, r0, ip, ror fp
20000f00:	20005d20 	andcs	r5, r0, r0, lsr #26
20000f04:	20002b6c 	andcs	r2, r0, ip, ror #22
20000f08:	20002c00 	andcs	r2, r0, r0, lsl #24
20000f0c:	20005f14 	andcs	r5, r0, r4, lsl pc
20000f10:	20002ca0 	andcs	r2, r0, r0, lsr #25
20000f14:	20002ba8 	andcs	r2, r0, r8, lsr #23
20000f18:	20005eb0 			; <UNDEFINED> instruction: 0x20005eb0
20000f1c:	20002bec 	andcs	r2, r0, ip, ror #23
20000f20:	20002c88 	andcs	r2, r0, r8, lsl #25
20000f24:	20005e4c 	andcs	r5, r0, ip, asr #28
20000f28:	20002b68 	andcs	r2, r0, r8, ror #22
20000f2c:	20002c24 	andcs	r2, r0, r4, lsr #24
20000f30:	20006040 	andcs	r6, r0, r0, asr #32
20000f34:	20002bb4 			; <UNDEFINED> instruction: 0x20002bb4
20000f38:	20002c30 	andcs	r2, r0, r0, lsr ip
20000f3c:	20005fdc 	ldrdcs	r5, [r0], -ip
20000f40:	20002b88 	andcs	r2, r0, r8, lsl #23
20000f44:	20002be0 	andcs	r2, r0, r0, ror #23
20000f48:	20005f78 	andcs	r5, r0, r8, ror pc
20000f4c:	20002b60 	andcs	r2, r0, r0, ror #22
20000f50:	20002c18 	andcs	r2, r0, r8, lsl ip
20000f54:	2000616c 	andcs	r6, r0, ip, ror #2
20000f58:	20002b00 	andcs	r2, r0, r0, lsl #22
20000f5c:	20002c94 	mulcs	r0, r4, ip
20000f60:	20006108 	andcs	r6, r0, r8, lsl #2
20000f64:	20002b64 	andcs	r2, r0, r4, ror #22
20000f68:	20002b18 	andcs	r2, r0, r8, lsl fp
20000f6c:	200060a4 	andcs	r6, r0, r4, lsr #1
20000f70:	20002c84 	andcs	r2, r0, r4, lsl #25
20000f74:	20002b9c 	mulcs	r0, ip, fp
20000f78:	20006298 	mulcs	r0, r8, r2
20000f7c:	20002bdc 	ldrdcs	r2, [r0], -ip
20000f80:	20002bb8 			; <UNDEFINED> instruction: 0x20002bb8
20000f84:	20006234 	andcs	r6, r0, r4, lsr r2
20000f88:	20002b98 	mulcs	r0, r8, fp
20000f8c:	20002bc4 	andcs	r2, r0, r4, asr #23
20000f90:	200061d0 	ldrdcs	r6, [r0], -r0
20000f94:	20002b14 	andcs	r2, r0, r4, lsl fp

20000f98 <init_bird>:
	
void init_bird( GameObject *birdObj ) {
20000f98:	b590      	push	{r4, r7, lr}
20000f9a:	b083      	sub	sp, #12
20000f9c:	af00      	add	r7, sp, #0
20000f9e:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20000fa0:	4b37      	ldr	r3, [pc, #220]	; (20001080 <init_bird+0xe8>)
20000fa2:	681b      	ldr	r3, [r3, #0]
20000fa4:	2b00      	cmp	r3, #0
20000fa6:	d057      	beq.n	20001058 <init_bird+0xc0>
		initSprites();
20000fa8:	f7ff fef0 	bl	20000d8c <initSprites>
		firstTime = 0;			
20000fac:	4b34      	ldr	r3, [pc, #208]	; (20001080 <init_bird+0xe8>)
20000fae:	2200      	movs	r2, #0
20000fb0:	601a      	str	r2, [r3, #0]

		birdImages[0] = bird1Image;
20000fb2:	4b34      	ldr	r3, [pc, #208]	; (20001084 <init_bird+0xec>)
20000fb4:	4a34      	ldr	r2, [pc, #208]	; (20001088 <init_bird+0xf0>)
20000fb6:	ca13      	ldmia	r2!, {r0, r1, r4}
20000fb8:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[1] = bird2Image;
20000fba:	4b32      	ldr	r3, [pc, #200]	; (20001084 <init_bird+0xec>)
20000fbc:	4a33      	ldr	r2, [pc, #204]	; (2000108c <init_bird+0xf4>)
20000fbe:	330c      	adds	r3, #12
20000fc0:	ca13      	ldmia	r2!, {r0, r1, r4}
20000fc2:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[2] = bird3Image;
20000fc4:	4b2f      	ldr	r3, [pc, #188]	; (20001084 <init_bird+0xec>)
20000fc6:	4a32      	ldr	r2, [pc, #200]	; (20001090 <init_bird+0xf8>)
20000fc8:	3318      	adds	r3, #24
20000fca:	ca13      	ldmia	r2!, {r0, r1, r4}
20000fcc:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[3] = bird4Image;
20000fce:	4b2d      	ldr	r3, [pc, #180]	; (20001084 <init_bird+0xec>)
20000fd0:	4a30      	ldr	r2, [pc, #192]	; (20001094 <init_bird+0xfc>)
20000fd2:	3324      	adds	r3, #36	; 0x24
20000fd4:	ca13      	ldmia	r2!, {r0, r1, r4}
20000fd6:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[4] = bird5Image;
20000fd8:	4b2a      	ldr	r3, [pc, #168]	; (20001084 <init_bird+0xec>)
20000fda:	4a2f      	ldr	r2, [pc, #188]	; (20001098 <init_bird+0x100>)
20000fdc:	3330      	adds	r3, #48	; 0x30
20000fde:	ca13      	ldmia	r2!, {r0, r1, r4}
20000fe0:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[5] = bird6Image;
20000fe2:	4b28      	ldr	r3, [pc, #160]	; (20001084 <init_bird+0xec>)
20000fe4:	4a2d      	ldr	r2, [pc, #180]	; (2000109c <init_bird+0x104>)
20000fe6:	333c      	adds	r3, #60	; 0x3c
20000fe8:	ca13      	ldmia	r2!, {r0, r1, r4}
20000fea:	c313      	stmia	r3!, {r0, r1, r4}
//		birdImages[6] = bird7Image;
		//birdImages[7] = bird8Image;
		
		load_image(&birdImages[0], bird1Black, bird1Gray, bird1Light);
20000fec:	4b2c      	ldr	r3, [pc, #176]	; (200010a0 <init_bird+0x108>)
20000fee:	6819      	ldr	r1, [r3, #0]
20000ff0:	4b2c      	ldr	r3, [pc, #176]	; (200010a4 <init_bird+0x10c>)
20000ff2:	681a      	ldr	r2, [r3, #0]
20000ff4:	4b2c      	ldr	r3, [pc, #176]	; (200010a8 <init_bird+0x110>)
20000ff6:	681b      	ldr	r3, [r3, #0]
20000ff8:	4822      	ldr	r0, [pc, #136]	; (20001084 <init_bird+0xec>)
20000ffa:	f000 ff9b 	bl	20001f34 <load_image>
		load_image(&birdImages[1], bird2Black, bird2Gray, bird2Light);
20000ffe:	4b2b      	ldr	r3, [pc, #172]	; (200010ac <init_bird+0x114>)
20001000:	6819      	ldr	r1, [r3, #0]
20001002:	4b2b      	ldr	r3, [pc, #172]	; (200010b0 <init_bird+0x118>)
20001004:	681a      	ldr	r2, [r3, #0]
20001006:	4b2b      	ldr	r3, [pc, #172]	; (200010b4 <init_bird+0x11c>)
20001008:	681b      	ldr	r3, [r3, #0]
2000100a:	482b      	ldr	r0, [pc, #172]	; (200010b8 <init_bird+0x120>)
2000100c:	f000 ff92 	bl	20001f34 <load_image>
		load_image(&birdImages[2], bird3Black, bird3Gray, bird3Light);
20001010:	4b2a      	ldr	r3, [pc, #168]	; (200010bc <init_bird+0x124>)
20001012:	6819      	ldr	r1, [r3, #0]
20001014:	4b2a      	ldr	r3, [pc, #168]	; (200010c0 <init_bird+0x128>)
20001016:	681a      	ldr	r2, [r3, #0]
20001018:	4b2a      	ldr	r3, [pc, #168]	; (200010c4 <init_bird+0x12c>)
2000101a:	681b      	ldr	r3, [r3, #0]
2000101c:	482a      	ldr	r0, [pc, #168]	; (200010c8 <init_bird+0x130>)
2000101e:	f000 ff89 	bl	20001f34 <load_image>
		load_image(&birdImages[3], bird4Black, bird4Gray, bird4Light);
20001022:	4b2a      	ldr	r3, [pc, #168]	; (200010cc <init_bird+0x134>)
20001024:	6819      	ldr	r1, [r3, #0]
20001026:	4b2a      	ldr	r3, [pc, #168]	; (200010d0 <init_bird+0x138>)
20001028:	681a      	ldr	r2, [r3, #0]
2000102a:	4b2a      	ldr	r3, [pc, #168]	; (200010d4 <init_bird+0x13c>)
2000102c:	681b      	ldr	r3, [r3, #0]
2000102e:	482a      	ldr	r0, [pc, #168]	; (200010d8 <init_bird+0x140>)
20001030:	f000 ff80 	bl	20001f34 <load_image>
		load_image(&birdImages[4], bird5Black, bird5Gray, bird5Light);
20001034:	4b29      	ldr	r3, [pc, #164]	; (200010dc <init_bird+0x144>)
20001036:	6819      	ldr	r1, [r3, #0]
20001038:	4b29      	ldr	r3, [pc, #164]	; (200010e0 <init_bird+0x148>)
2000103a:	681a      	ldr	r2, [r3, #0]
2000103c:	4b29      	ldr	r3, [pc, #164]	; (200010e4 <init_bird+0x14c>)
2000103e:	681b      	ldr	r3, [r3, #0]
20001040:	4829      	ldr	r0, [pc, #164]	; (200010e8 <init_bird+0x150>)
20001042:	f000 ff77 	bl	20001f34 <load_image>
		
		//load_image(&birdImages[7], bird2Black, bird2Gray, bird2Light);
		load_image(&birdImages[5], bird3Black, bird3Gray, bird3Light);
20001046:	4b1d      	ldr	r3, [pc, #116]	; (200010bc <init_bird+0x124>)
20001048:	6819      	ldr	r1, [r3, #0]
2000104a:	4b1d      	ldr	r3, [pc, #116]	; (200010c0 <init_bird+0x128>)
2000104c:	681a      	ldr	r2, [r3, #0]
2000104e:	4b1d      	ldr	r3, [pc, #116]	; (200010c4 <init_bird+0x12c>)
20001050:	681b      	ldr	r3, [r3, #0]
20001052:	4826      	ldr	r0, [pc, #152]	; (200010ec <init_bird+0x154>)
20001054:	f000 ff6e 	bl	20001f34 <load_image>
		//load_image(&birdImages[5], bird4Black, bird4Gray, bird4Light);
	}
	
	birdObj->images = birdImages;
20001058:	687b      	ldr	r3, [r7, #4]
2000105a:	4a0a      	ldr	r2, [pc, #40]	; (20001084 <init_bird+0xec>)
2000105c:	601a      	str	r2, [r3, #0]

	birdObj->current_frame = 0;
2000105e:	687b      	ldr	r3, [r7, #4]
20001060:	2200      	movs	r2, #0
20001062:	615a      	str	r2, [r3, #20]
	birdObj->n_frames = 6;
20001064:	687b      	ldr	r3, [r7, #4]
20001066:	2206      	movs	r2, #6
20001068:	619a      	str	r2, [r3, #24]
	birdObj->animation_speed = 1;
2000106a:	687b      	ldr	r3, [r7, #4]
2000106c:	2201      	movs	r2, #1
2000106e:	61da      	str	r2, [r3, #28]
	birdObj->animation_counter = 0;
20001070:	687b      	ldr	r3, [r7, #4]
20001072:	2200      	movs	r2, #0
20001074:	621a      	str	r2, [r3, #32]
}
20001076:	46c0      	nop			; (mov r8, r8)
20001078:	46bd      	mov	sp, r7
2000107a:	b003      	add	sp, #12
2000107c:	bd90      	pop	{r4, r7, pc}
2000107e:	46c0      	nop			; (mov r8, r8)
20001080:	200062fc 	strdcs	r6, [r0], -ip
20001084:	20002c3c 	andcs	r2, r0, ip, lsr ip
20001088:	20002b54 	andcs	r2, r0, r4, asr fp
2000108c:	20002b24 	andcs	r2, r0, r4, lsr #22
20001090:	20002c0c 	andcs	r2, r0, ip, lsl #24
20001094:	20002b70 	andcs	r2, r0, r0, ror fp
20001098:	20002bd0 	ldrdcs	r2, [r0], -r0
2000109c:	20002b08 	andcs	r2, r0, r8, lsl #22
200010a0:	20002b6c 	andcs	r2, r0, ip, ror #22
200010a4:	20002b04 	andcs	r2, r0, r4, lsl #22
200010a8:	20002bfc 	strdcs	r2, [r0], -ip
200010ac:	20002b68 	andcs	r2, r0, r8, ror #22
200010b0:	20002bec 	andcs	r2, r0, ip, ror #23
200010b4:	20002ca0 	andcs	r2, r0, r0, lsr #25
200010b8:	20002c48 	andcs	r2, r0, r8, asr #24
200010bc:	20002b60 	andcs	r2, r0, r0, ror #22
200010c0:	20002b88 	andcs	r2, r0, r8, lsl #23
200010c4:	20002bb4 			; <UNDEFINED> instruction: 0x20002bb4
200010c8:	20002c54 	andcs	r2, r0, r4, asr ip
200010cc:	20002c84 	andcs	r2, r0, r4, lsl #25
200010d0:	20002b64 	andcs	r2, r0, r4, ror #22
200010d4:	20002b00 	andcs	r2, r0, r0, lsl #22
200010d8:	20002c60 	andcs	r2, r0, r0, ror #24
200010dc:	20002b14 	andcs	r2, r0, r4, lsl fp
200010e0:	20002b98 	mulcs	r0, r8, fp
200010e4:	20002bdc 	ldrdcs	r2, [r0], -ip
200010e8:	20002c6c 	andcs	r2, r0, ip, ror #24
200010ec:	20002c78 	andcs	r2, r0, r8, ror ip

200010f0 <delay_250ns>:
#include "graphics.h"


void delay_250ns(void){
200010f0:	b580      	push	{r7, lr}
200010f2:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
200010f4:	4b0c      	ldr	r3, [pc, #48]	; (20001128 <delay_250ns+0x38>)
200010f6:	2200      	movs	r2, #0
200010f8:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/4) -1);
200010fa:	4b0c      	ldr	r3, [pc, #48]	; (2000112c <delay_250ns+0x3c>)
200010fc:	2229      	movs	r2, #41	; 0x29
200010fe:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20001100:	4b0b      	ldr	r3, [pc, #44]	; (20001130 <delay_250ns+0x40>)
20001102:	2200      	movs	r2, #0
20001104:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20001106:	4b08      	ldr	r3, [pc, #32]	; (20001128 <delay_250ns+0x38>)
20001108:	2205      	movs	r2, #5
2000110a:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
2000110c:	46c0      	nop			; (mov r8, r8)
2000110e:	4b06      	ldr	r3, [pc, #24]	; (20001128 <delay_250ns+0x38>)
20001110:	681a      	ldr	r2, [r3, #0]
20001112:	2380      	movs	r3, #128	; 0x80
20001114:	025b      	lsls	r3, r3, #9
20001116:	4013      	ands	r3, r2
20001118:	d0f9      	beq.n	2000110e <delay_250ns+0x1e>
	*STK_CTRL = 0;
2000111a:	4b03      	ldr	r3, [pc, #12]	; (20001128 <delay_250ns+0x38>)
2000111c:	2200      	movs	r2, #0
2000111e:	601a      	str	r2, [r3, #0]
}
20001120:	46c0      	nop			; (mov r8, r8)
20001122:	46bd      	mov	sp, r7
20001124:	bd80      	pop	{r7, pc}
20001126:	46c0      	nop			; (mov r8, r8)
20001128:	e000e010 	and	lr, r0, r0, lsl r0
2000112c:	e000e014 	and	lr, r0, r4, lsl r0
20001130:	e000e018 	and	lr, r0, r8, lsl r0

20001134 <delay_500ns>:

void delay_500ns(void){
20001134:	b580      	push	{r7, lr}
20001136:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
20001138:	4b0c      	ldr	r3, [pc, #48]	; (2000116c <delay_500ns+0x38>)
2000113a:	2200      	movs	r2, #0
2000113c:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/2) -1);
2000113e:	4b0c      	ldr	r3, [pc, #48]	; (20001170 <delay_500ns+0x3c>)
20001140:	2253      	movs	r2, #83	; 0x53
20001142:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20001144:	4b0b      	ldr	r3, [pc, #44]	; (20001174 <delay_500ns+0x40>)
20001146:	2200      	movs	r2, #0
20001148:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
2000114a:	4b08      	ldr	r3, [pc, #32]	; (2000116c <delay_500ns+0x38>)
2000114c:	2205      	movs	r2, #5
2000114e:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
20001150:	46c0      	nop			; (mov r8, r8)
20001152:	4b06      	ldr	r3, [pc, #24]	; (2000116c <delay_500ns+0x38>)
20001154:	681a      	ldr	r2, [r3, #0]
20001156:	2380      	movs	r3, #128	; 0x80
20001158:	025b      	lsls	r3, r3, #9
2000115a:	4013      	ands	r3, r2
2000115c:	d0f9      	beq.n	20001152 <delay_500ns+0x1e>
	*STK_CTRL = 0;
2000115e:	4b03      	ldr	r3, [pc, #12]	; (2000116c <delay_500ns+0x38>)
20001160:	2200      	movs	r2, #0
20001162:	601a      	str	r2, [r3, #0]
}
20001164:	46c0      	nop			; (mov r8, r8)
20001166:	46bd      	mov	sp, r7
20001168:	bd80      	pop	{r7, pc}
2000116a:	46c0      	nop			; (mov r8, r8)
2000116c:	e000e010 	and	lr, r0, r0, lsl r0
20001170:	e000e014 	and	lr, r0, r4, lsl r0
20001174:	e000e018 	and	lr, r0, r8, lsl r0

20001178 <delay_micro>:

void delay_micro(unsigned int us){
20001178:	b580      	push	{r7, lr}
2000117a:	b082      	sub	sp, #8
2000117c:	af00      	add	r7, sp, #0
2000117e:	6078      	str	r0, [r7, #4]
	while(us--) {
20001180:	e007      	b.n	20001192 <delay_micro+0x1a>
		delay_250ns();
20001182:	f7ff ffb5 	bl	200010f0 <delay_250ns>
		delay_250ns();
20001186:	f7ff ffb3 	bl	200010f0 <delay_250ns>
		delay_250ns();
2000118a:	f7ff ffb1 	bl	200010f0 <delay_250ns>
		delay_250ns();
2000118e:	f7ff ffaf 	bl	200010f0 <delay_250ns>
	while(us--) {
20001192:	687b      	ldr	r3, [r7, #4]
20001194:	1e5a      	subs	r2, r3, #1
20001196:	607a      	str	r2, [r7, #4]
20001198:	2b00      	cmp	r3, #0
2000119a:	d1f2      	bne.n	20001182 <delay_micro+0xa>
	}
}
2000119c:	46c0      	nop			; (mov r8, r8)
2000119e:	46bd      	mov	sp, r7
200011a0:	b002      	add	sp, #8
200011a2:	bd80      	pop	{r7, pc}

200011a4 <delay_milli>:

void delay_milli(unsigned int ms){
200011a4:	b580      	push	{r7, lr}
200011a6:	b082      	sub	sp, #8
200011a8:	af00      	add	r7, sp, #0
200011aa:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		while(ms--)
			delay_micro(1);
	#else
		while(ms--)
200011ac:	e004      	b.n	200011b8 <delay_milli+0x14>
			delay_micro(1000);
200011ae:	23fa      	movs	r3, #250	; 0xfa
200011b0:	009b      	lsls	r3, r3, #2
200011b2:	0018      	movs	r0, r3
200011b4:	f7ff ffe0 	bl	20001178 <delay_micro>
		while(ms--)
200011b8:	687b      	ldr	r3, [r7, #4]
200011ba:	1e5a      	subs	r2, r3, #1
200011bc:	607a      	str	r2, [r7, #4]
200011be:	2b00      	cmp	r3, #0
200011c0:	d1f5      	bne.n	200011ae <delay_milli+0xa>
	#endif
}
200011c2:	46c0      	nop			; (mov r8, r8)
200011c4:	46bd      	mov	sp, r7
200011c6:	b002      	add	sp, #8
200011c8:	bd80      	pop	{r7, pc}

200011ca <clear_thisBackBuffer>:
uint8_t draw_buffer_black_light[1024]; // 128 * 64 / 8
uint8_t draw_buffer_black_gray_light[1024]; // 128 * 64 / 8
uint8_t backBuffer[1024]; // 128 * 64 / 8
uint8_t backBufferGray[1024]; // 128 * 64 / 8
uint8_t backBufferLight[1024]; // 128 * 64 / 8
void clear_thisBackBuffer(uint8_t *buffer) {
200011ca:	b580      	push	{r7, lr}
200011cc:	b084      	sub	sp, #16
200011ce:	af00      	add	r7, sp, #0
200011d0:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < 1024; i++)
200011d2:	2300      	movs	r3, #0
200011d4:	60fb      	str	r3, [r7, #12]
200011d6:	e007      	b.n	200011e8 <clear_thisBackBuffer+0x1e>
		buffer[i] = 0;
200011d8:	68fb      	ldr	r3, [r7, #12]
200011da:	687a      	ldr	r2, [r7, #4]
200011dc:	18d3      	adds	r3, r2, r3
200011de:	2200      	movs	r2, #0
200011e0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 1024; i++)
200011e2:	68fb      	ldr	r3, [r7, #12]
200011e4:	3301      	adds	r3, #1
200011e6:	60fb      	str	r3, [r7, #12]
200011e8:	68fb      	ldr	r3, [r7, #12]
200011ea:	4a03      	ldr	r2, [pc, #12]	; (200011f8 <clear_thisBackBuffer+0x2e>)
200011ec:	4293      	cmp	r3, r2
200011ee:	ddf3      	ble.n	200011d8 <clear_thisBackBuffer+0xe>
}
200011f0:	46c0      	nop			; (mov r8, r8)
200011f2:	46bd      	mov	sp, r7
200011f4:	b004      	add	sp, #16
200011f6:	bd80      	pop	{r7, pc}
200011f8:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

200011fc <clear_backBuffer>:
void clear_backBuffer() {
200011fc:	b580      	push	{r7, lr}
200011fe:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
20001200:	4b03      	ldr	r3, [pc, #12]	; (20001210 <clear_backBuffer+0x14>)
20001202:	0018      	movs	r0, r3
20001204:	f7ff ffe1 	bl	200011ca <clear_thisBackBuffer>
}
20001208:	46c0      	nop			; (mov r8, r8)
2000120a:	46bd      	mov	sp, r7
2000120c:	bd80      	pop	{r7, pc}
2000120e:	46c0      	nop			; (mov r8, r8)
20001210:	200034a4 	andcs	r3, r0, r4, lsr #9

20001214 <clear_all_backBuffers>:
void clear_all_backBuffers() {
20001214:	b580      	push	{r7, lr}
20001216:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
20001218:	4b07      	ldr	r3, [pc, #28]	; (20001238 <clear_all_backBuffers+0x24>)
2000121a:	0018      	movs	r0, r3
2000121c:	f7ff ffd5 	bl	200011ca <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferGray);
20001220:	4b06      	ldr	r3, [pc, #24]	; (2000123c <clear_all_backBuffers+0x28>)
20001222:	0018      	movs	r0, r3
20001224:	f7ff ffd1 	bl	200011ca <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferLight);
20001228:	4b05      	ldr	r3, [pc, #20]	; (20001240 <clear_all_backBuffers+0x2c>)
2000122a:	0018      	movs	r0, r3
2000122c:	f7ff ffcd 	bl	200011ca <clear_thisBackBuffer>
}
20001230:	46c0      	nop			; (mov r8, r8)
20001232:	46bd      	mov	sp, r7
20001234:	bd80      	pop	{r7, pc}
20001236:	46c0      	nop			; (mov r8, r8)
20001238:	200034a4 	andcs	r3, r0, r4, lsr #9
2000123c:	20002ca4 	andcs	r2, r0, r4, lsr #25
20001240:	200044a4 	andcs	r4, r0, r4, lsr #9

20001244 <graphic_ctrl_bit_set>:

/* välj grafik-display och ettställ de bitar som är 1 i x */
static void graphic_ctrl_bit_set( uint8_t x) {
20001244:	b580      	push	{r7, lr}
20001246:	b084      	sub	sp, #16
20001248:	af00      	add	r7, sp, #0
2000124a:	0002      	movs	r2, r0
2000124c:	1dfb      	adds	r3, r7, #7
2000124e:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
20001250:	4a0f      	ldr	r2, [pc, #60]	; (20001290 <graphic_ctrl_bit_set+0x4c>)
20001252:	230f      	movs	r3, #15
20001254:	18fb      	adds	r3, r7, r3
20001256:	7812      	ldrb	r2, [r2, #0]
20001258:	701a      	strb	r2, [r3, #0]
	c |= x;
2000125a:	230f      	movs	r3, #15
2000125c:	18fb      	adds	r3, r7, r3
2000125e:	220f      	movs	r2, #15
20001260:	18b9      	adds	r1, r7, r2
20001262:	1dfa      	adds	r2, r7, #7
20001264:	7809      	ldrb	r1, [r1, #0]
20001266:	7812      	ldrb	r2, [r2, #0]
20001268:	430a      	orrs	r2, r1
2000126a:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
2000126c:	230f      	movs	r3, #15
2000126e:	18fb      	adds	r3, r7, r3
20001270:	220f      	movs	r2, #15
20001272:	18ba      	adds	r2, r7, r2
20001274:	7812      	ldrb	r2, [r2, #0]
20001276:	2104      	movs	r1, #4
20001278:	438a      	bics	r2, r1
2000127a:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
2000127c:	4a04      	ldr	r2, [pc, #16]	; (20001290 <graphic_ctrl_bit_set+0x4c>)
2000127e:	230f      	movs	r3, #15
20001280:	18fb      	adds	r3, r7, r3
20001282:	781b      	ldrb	r3, [r3, #0]
20001284:	7013      	strb	r3, [r2, #0]
}
20001286:	46c0      	nop			; (mov r8, r8)
20001288:	46bd      	mov	sp, r7
2000128a:	b004      	add	sp, #16
2000128c:	bd80      	pop	{r7, pc}
2000128e:	46c0      	nop			; (mov r8, r8)
20001290:	40021014 	andmi	r1, r2, r4, lsl r0

20001294 <graphic_ctrl_bit_clear>:
/* välj grafik-display och nollställ de bitar som är 1 i x */
static void graphic_ctrl_bit_clear( uint8_t x) {
20001294:	b580      	push	{r7, lr}
20001296:	b084      	sub	sp, #16
20001298:	af00      	add	r7, sp, #0
2000129a:	0002      	movs	r2, r0
2000129c:	1dfb      	adds	r3, r7, #7
2000129e:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
200012a0:	4a11      	ldr	r2, [pc, #68]	; (200012e8 <graphic_ctrl_bit_clear+0x54>)
200012a2:	230f      	movs	r3, #15
200012a4:	18fb      	adds	r3, r7, r3
200012a6:	7812      	ldrb	r2, [r2, #0]
200012a8:	701a      	strb	r2, [r3, #0]
	c &= ~x;
200012aa:	1dfb      	adds	r3, r7, #7
200012ac:	781b      	ldrb	r3, [r3, #0]
200012ae:	b25b      	sxtb	r3, r3
200012b0:	43db      	mvns	r3, r3
200012b2:	b25b      	sxtb	r3, r3
200012b4:	220f      	movs	r2, #15
200012b6:	18ba      	adds	r2, r7, r2
200012b8:	7812      	ldrb	r2, [r2, #0]
200012ba:	b252      	sxtb	r2, r2
200012bc:	4013      	ands	r3, r2
200012be:	b25a      	sxtb	r2, r3
200012c0:	230f      	movs	r3, #15
200012c2:	18fb      	adds	r3, r7, r3
200012c4:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
200012c6:	230f      	movs	r3, #15
200012c8:	18fb      	adds	r3, r7, r3
200012ca:	220f      	movs	r2, #15
200012cc:	18ba      	adds	r2, r7, r2
200012ce:	7812      	ldrb	r2, [r2, #0]
200012d0:	2104      	movs	r1, #4
200012d2:	438a      	bics	r2, r1
200012d4:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
200012d6:	4a04      	ldr	r2, [pc, #16]	; (200012e8 <graphic_ctrl_bit_clear+0x54>)
200012d8:	230f      	movs	r3, #15
200012da:	18fb      	adds	r3, r7, r3
200012dc:	781b      	ldrb	r3, [r3, #0]
200012de:	7013      	strb	r3, [r2, #0]
}
200012e0:	46c0      	nop			; (mov r8, r8)
200012e2:	46bd      	mov	sp, r7
200012e4:	b004      	add	sp, #16
200012e6:	bd80      	pop	{r7, pc}
200012e8:	40021014 	andmi	r1, r2, r4, lsl r0

200012ec <select_controller>:
void select_controller( uint8_t controller) {
200012ec:	b580      	push	{r7, lr}
200012ee:	b082      	sub	sp, #8
200012f0:	af00      	add	r7, sp, #0
200012f2:	0002      	movs	r2, r0
200012f4:	1dfb      	adds	r3, r7, #7
200012f6:	701a      	strb	r2, [r3, #0]
	switch (controller) {
200012f8:	1dfb      	adds	r3, r7, #7
200012fa:	781b      	ldrb	r3, [r3, #0]
200012fc:	2b08      	cmp	r3, #8
200012fe:	d00f      	beq.n	20001320 <select_controller+0x34>
20001300:	dc02      	bgt.n	20001308 <select_controller+0x1c>
20001302:	2b00      	cmp	r3, #0
20001304:	d005      	beq.n	20001312 <select_controller+0x26>
		case (B_CS1|B_CS2): 
			graphic_ctrl_bit_set(B_CS1); 
			graphic_ctrl_bit_set(B_CS2); 
			break;
	}
}
20001306:	e020      	b.n	2000134a <select_controller+0x5e>
	switch (controller) {
20001308:	2b10      	cmp	r3, #16
2000130a:	d010      	beq.n	2000132e <select_controller+0x42>
2000130c:	2b18      	cmp	r3, #24
2000130e:	d015      	beq.n	2000133c <select_controller+0x50>
}
20001310:	e01b      	b.n	2000134a <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
20001312:	2008      	movs	r0, #8
20001314:	f7ff ffbe 	bl	20001294 <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_clear(B_CS2); 
20001318:	2010      	movs	r0, #16
2000131a:	f7ff ffbb 	bl	20001294 <graphic_ctrl_bit_clear>
			break;
2000131e:	e014      	b.n	2000134a <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
20001320:	2008      	movs	r0, #8
20001322:	f7ff ff8f 	bl	20001244 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS2); 
20001326:	2010      	movs	r0, #16
20001328:	f7ff ffb4 	bl	20001294 <graphic_ctrl_bit_clear>
			break;
2000132c:	e00d      	b.n	2000134a <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
2000132e:	2008      	movs	r0, #8
20001330:	f7ff ffb0 	bl	20001294 <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_set(B_CS2); 
20001334:	2010      	movs	r0, #16
20001336:	f7ff ff85 	bl	20001244 <graphic_ctrl_bit_set>
			break;
2000133a:	e006      	b.n	2000134a <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
2000133c:	2008      	movs	r0, #8
2000133e:	f7ff ff81 	bl	20001244 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_set(B_CS2); 
20001342:	2010      	movs	r0, #16
20001344:	f7ff ff7e 	bl	20001244 <graphic_ctrl_bit_set>
			break;
20001348:	46c0      	nop			; (mov r8, r8)
}
2000134a:	46c0      	nop			; (mov r8, r8)
2000134c:	46bd      	mov	sp, r7
2000134e:	b002      	add	sp, #8
20001350:	bd80      	pop	{r7, pc}

20001352 <graphic_wait_ready>:

void graphic_wait_ready( void ) {
20001352:	b580      	push	{r7, lr}
20001354:	b082      	sub	sp, #8
20001356:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
20001358:	2040      	movs	r0, #64	; 0x40
2000135a:	f7ff ff9b 	bl	20001294 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
2000135e:	4b14      	ldr	r3, [pc, #80]	; (200013b0 <graphic_wait_ready+0x5e>)
20001360:	4a14      	ldr	r2, [pc, #80]	; (200013b4 <graphic_wait_ready+0x62>)
20001362:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
20001364:	2001      	movs	r0, #1
20001366:	f7ff ff95 	bl	20001294 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
2000136a:	2002      	movs	r0, #2
2000136c:	f7ff ff6a 	bl	20001244 <graphic_ctrl_bit_set>
	delay_500ns();
20001370:	f7ff fee0 	bl	20001134 <delay_500ns>
	
	while(1) {
		graphic_ctrl_bit_set(B_E);
20001374:	2040      	movs	r0, #64	; 0x40
20001376:	f7ff ff65 	bl	20001244 <graphic_ctrl_bit_set>
		delay_500ns();
2000137a:	f7ff fedb 	bl	20001134 <delay_500ns>
		c = *portIdrHigh & LCD_BUSY; //...
2000137e:	4b0e      	ldr	r3, [pc, #56]	; (200013b8 <graphic_wait_ready+0x66>)
20001380:	781b      	ldrb	r3, [r3, #0]
20001382:	b2da      	uxtb	r2, r3
20001384:	1dfb      	adds	r3, r7, #7
20001386:	217f      	movs	r1, #127	; 0x7f
20001388:	438a      	bics	r2, r1
2000138a:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
2000138c:	2040      	movs	r0, #64	; 0x40
2000138e:	f7ff ff81 	bl	20001294 <graphic_ctrl_bit_clear>
		delay_500ns();
20001392:	f7ff fecf 	bl	20001134 <delay_500ns>
		/*if (*portIdrHigh & 0x80 == 0x80) {
			break; }*/
		if (c == 0) break;
20001396:	1dfb      	adds	r3, r7, #7
20001398:	781b      	ldrb	r3, [r3, #0]
2000139a:	2b00      	cmp	r3, #0
2000139c:	d000      	beq.n	200013a0 <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
2000139e:	e7e9      	b.n	20001374 <graphic_wait_ready+0x22>
		if (c == 0) break;
200013a0:	46c0      	nop			; (mov r8, r8)
	}
	//graphic_ctrl_bit_set(B_E); //<--
	*portModer = 0x55555555;	
200013a2:	4b03      	ldr	r3, [pc, #12]	; (200013b0 <graphic_wait_ready+0x5e>)
200013a4:	4a05      	ldr	r2, [pc, #20]	; (200013bc <graphic_wait_ready+0x6a>)
200013a6:	601a      	str	r2, [r3, #0]
}
200013a8:	46c0      	nop			; (mov r8, r8)
200013aa:	46bd      	mov	sp, r7
200013ac:	b002      	add	sp, #8
200013ae:	bd80      	pop	{r7, pc}
200013b0:	40021000 	andmi	r1, r2, r0
200013b4:	00005555 	andeq	r5, r0, r5, asr r5
200013b8:	40021011 	andmi	r1, r2, r1, lsl r0
200013bc:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200013c0 <graphic_read>:

static uint8_t graphic_read(uint8_t controller) {
200013c0:	b580      	push	{r7, lr}
200013c2:	b084      	sub	sp, #16
200013c4:	af00      	add	r7, sp, #0
200013c6:	0002      	movs	r2, r0
200013c8:	1dfb      	adds	r3, r7, #7
200013ca:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200013cc:	2040      	movs	r0, #64	; 0x40
200013ce:	f7ff ff61 	bl	20001294 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
200013d2:	4b1c      	ldr	r3, [pc, #112]	; (20001444 <graphic_read+0x84>)
200013d4:	4a1c      	ldr	r2, [pc, #112]	; (20001448 <graphic_read+0x88>)
200013d6:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS);
200013d8:	2001      	movs	r0, #1
200013da:	f7ff ff33 	bl	20001244 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_set(B_RW);
200013de:	2002      	movs	r0, #2
200013e0:	f7ff ff30 	bl	20001244 <graphic_ctrl_bit_set>
	select_controller(controller);
200013e4:	1dfb      	adds	r3, r7, #7
200013e6:	781b      	ldrb	r3, [r3, #0]
200013e8:	0018      	movs	r0, r3
200013ea:	f7ff ff7f 	bl	200012ec <select_controller>
	delay_500ns();
200013ee:	f7ff fea1 	bl	20001134 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200013f2:	2040      	movs	r0, #64	; 0x40
200013f4:	f7ff ff26 	bl	20001244 <graphic_ctrl_bit_set>
	delay_500ns();
200013f8:	f7ff fe9c 	bl	20001134 <delay_500ns>
	unsigned char rv = *portIdrHigh;
200013fc:	4a13      	ldr	r2, [pc, #76]	; (2000144c <graphic_read+0x8c>)
200013fe:	230f      	movs	r3, #15
20001400:	18fb      	adds	r3, r7, r3
20001402:	7812      	ldrb	r2, [r2, #0]
20001404:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20001406:	2040      	movs	r0, #64	; 0x40
20001408:	f7ff ff44 	bl	20001294 <graphic_ctrl_bit_clear>
	*portModer = 0x55555555;
2000140c:	4b0d      	ldr	r3, [pc, #52]	; (20001444 <graphic_read+0x84>)
2000140e:	4a10      	ldr	r2, [pc, #64]	; (20001450 <graphic_read+0x90>)
20001410:	601a      	str	r2, [r3, #0]
	
	if(controller == B_CS1) {
20001412:	1dfb      	adds	r3, r7, #7
20001414:	781b      	ldrb	r3, [r3, #0]
20001416:	2b08      	cmp	r3, #8
20001418:	d104      	bne.n	20001424 <graphic_read+0x64>
		select_controller(B_CS1);
2000141a:	2008      	movs	r0, #8
2000141c:	f7ff ff66 	bl	200012ec <select_controller>
		graphic_wait_ready();
20001420:	f7ff ff97 	bl	20001352 <graphic_wait_ready>
	}
	if(controller == B_CS2) {
20001424:	1dfb      	adds	r3, r7, #7
20001426:	781b      	ldrb	r3, [r3, #0]
20001428:	2b10      	cmp	r3, #16
2000142a:	d104      	bne.n	20001436 <graphic_read+0x76>
		select_controller(B_CS2);
2000142c:	2010      	movs	r0, #16
2000142e:	f7ff ff5d 	bl	200012ec <select_controller>
		graphic_wait_ready();
20001432:	f7ff ff8e 	bl	20001352 <graphic_wait_ready>
	}
	
	return rv;
20001436:	230f      	movs	r3, #15
20001438:	18fb      	adds	r3, r7, r3
2000143a:	781b      	ldrb	r3, [r3, #0]
}
2000143c:	0018      	movs	r0, r3
2000143e:	46bd      	mov	sp, r7
20001440:	b004      	add	sp, #16
20001442:	bd80      	pop	{r7, pc}
20001444:	40021000 	andmi	r1, r2, r0
20001448:	00005555 	andeq	r5, r0, r5, asr r5
2000144c:	40021011 	andmi	r1, r2, r1, lsl r0
20001450:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20001454 <graphic_read_data>:

graphic_read_data(uint8_t controller) {
20001454:	b580      	push	{r7, lr}
20001456:	b082      	sub	sp, #8
20001458:	af00      	add	r7, sp, #0
2000145a:	0002      	movs	r2, r0
2000145c:	1dfb      	adds	r3, r7, #7
2000145e:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
20001460:	1dfb      	adds	r3, r7, #7
20001462:	781b      	ldrb	r3, [r3, #0]
20001464:	0018      	movs	r0, r3
20001466:	f7ff ffab 	bl	200013c0 <graphic_read>
	graphic_read(controller);
2000146a:	1dfb      	adds	r3, r7, #7
2000146c:	781b      	ldrb	r3, [r3, #0]
2000146e:	0018      	movs	r0, r3
20001470:	f7ff ffa6 	bl	200013c0 <graphic_read>
}
20001474:	46c0      	nop			; (mov r8, r8)
20001476:	0018      	movs	r0, r3
20001478:	46bd      	mov	sp, r7
2000147a:	b002      	add	sp, #8
2000147c:	bd80      	pop	{r7, pc}

2000147e <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller) {
2000147e:	b580      	push	{r7, lr}
20001480:	b082      	sub	sp, #8
20001482:	af00      	add	r7, sp, #0
20001484:	0002      	movs	r2, r0
20001486:	1dfb      	adds	r3, r7, #7
20001488:	701a      	strb	r2, [r3, #0]
2000148a:	1dbb      	adds	r3, r7, #6
2000148c:	1c0a      	adds	r2, r1, #0
2000148e:	701a      	strb	r2, [r3, #0]
	*portOdrHigh = value; //I
20001490:	4a19      	ldr	r2, [pc, #100]	; (200014f8 <graphic_write+0x7a>)
20001492:	1dfb      	adds	r3, r7, #7
20001494:	781b      	ldrb	r3, [r3, #0]
20001496:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
20001498:	1dbb      	adds	r3, r7, #6
2000149a:	781b      	ldrb	r3, [r3, #0]
2000149c:	0018      	movs	r0, r3
2000149e:	f7ff ff25 	bl	200012ec <select_controller>
	delay_500ns();
200014a2:	f7ff fe47 	bl	20001134 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200014a6:	2040      	movs	r0, #64	; 0x40
200014a8:	f7ff fecc 	bl	20001244 <graphic_ctrl_bit_set>
	delay_500ns();
200014ac:	f7ff fe42 	bl	20001134 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
200014b0:	2040      	movs	r0, #64	; 0x40
200014b2:	f7ff feef 	bl	20001294 <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1) {
200014b6:	1dbb      	adds	r3, r7, #6
200014b8:	781b      	ldrb	r3, [r3, #0]
200014ba:	2208      	movs	r2, #8
200014bc:	4013      	ands	r3, r2
200014be:	d004      	beq.n	200014ca <graphic_write+0x4c>
		select_controller(B_CS1);
200014c0:	2008      	movs	r0, #8
200014c2:	f7ff ff13 	bl	200012ec <select_controller>
		graphic_wait_ready();
200014c6:	f7ff ff44 	bl	20001352 <graphic_wait_ready>
	}
	if(controller & B_CS2) {
200014ca:	1dbb      	adds	r3, r7, #6
200014cc:	781b      	ldrb	r3, [r3, #0]
200014ce:	2210      	movs	r2, #16
200014d0:	4013      	ands	r3, r2
200014d2:	d004      	beq.n	200014de <graphic_write+0x60>
		select_controller(B_CS2);
200014d4:	2010      	movs	r0, #16
200014d6:	f7ff ff09 	bl	200012ec <select_controller>
		graphic_wait_ready();
200014da:	f7ff ff3a 	bl	20001352 <graphic_wait_ready>
	}
	
	*portOdrHigh = 0;	//I
200014de:	4b06      	ldr	r3, [pc, #24]	; (200014f8 <graphic_write+0x7a>)
200014e0:	2200      	movs	r2, #0
200014e2:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
200014e4:	2040      	movs	r0, #64	; 0x40
200014e6:	f7ff fead 	bl	20001244 <graphic_ctrl_bit_set>
	select_controller(0);
200014ea:	2000      	movs	r0, #0
200014ec:	f7ff fefe 	bl	200012ec <select_controller>
}
200014f0:	46c0      	nop			; (mov r8, r8)
200014f2:	46bd      	mov	sp, r7
200014f4:	b002      	add	sp, #8
200014f6:	bd80      	pop	{r7, pc}
200014f8:	40021015 	andmi	r1, r2, r5, lsl r0

200014fc <graphic_write_command>:
void graphic_write_command(uint8_t command, uint8_t controller) {
200014fc:	b580      	push	{r7, lr}
200014fe:	b082      	sub	sp, #8
20001500:	af00      	add	r7, sp, #0
20001502:	0002      	movs	r2, r0
20001504:	1dfb      	adds	r3, r7, #7
20001506:	701a      	strb	r2, [r3, #0]
20001508:	1dbb      	adds	r3, r7, #6
2000150a:	1c0a      	adds	r2, r1, #0
2000150c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000150e:	2040      	movs	r0, #64	; 0x40
20001510:	f7ff fec0 	bl	20001294 <graphic_ctrl_bit_clear>
	select_controller(controller);
20001514:	1dbb      	adds	r3, r7, #6
20001516:	781b      	ldrb	r3, [r3, #0]
20001518:	0018      	movs	r0, r3
2000151a:	f7ff fee7 	bl	200012ec <select_controller>
	graphic_ctrl_bit_clear(B_RS);
2000151e:	2001      	movs	r0, #1
20001520:	f7ff feb8 	bl	20001294 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RW);
20001524:	2002      	movs	r0, #2
20001526:	f7ff feb5 	bl	20001294 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
2000152a:	1dbb      	adds	r3, r7, #6
2000152c:	781a      	ldrb	r2, [r3, #0]
2000152e:	1dfb      	adds	r3, r7, #7
20001530:	781b      	ldrb	r3, [r3, #0]
20001532:	0011      	movs	r1, r2
20001534:	0018      	movs	r0, r3
20001536:	f7ff ffa2 	bl	2000147e <graphic_write>
}
2000153a:	46c0      	nop			; (mov r8, r8)
2000153c:	46bd      	mov	sp, r7
2000153e:	b002      	add	sp, #8
20001540:	bd80      	pop	{r7, pc}

20001542 <graphic_write_data>:
void graphic_write_data(uint8_t command, uint8_t controller) {
20001542:	b580      	push	{r7, lr}
20001544:	b082      	sub	sp, #8
20001546:	af00      	add	r7, sp, #0
20001548:	0002      	movs	r2, r0
2000154a:	1dfb      	adds	r3, r7, #7
2000154c:	701a      	strb	r2, [r3, #0]
2000154e:	1dbb      	adds	r3, r7, #6
20001550:	1c0a      	adds	r2, r1, #0
20001552:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20001554:	2040      	movs	r0, #64	; 0x40
20001556:	f7ff fe9d 	bl	20001294 <graphic_ctrl_bit_clear>
	select_controller(controller);
2000155a:	1dbb      	adds	r3, r7, #6
2000155c:	781b      	ldrb	r3, [r3, #0]
2000155e:	0018      	movs	r0, r3
20001560:	f7ff fec4 	bl	200012ec <select_controller>
	graphic_ctrl_bit_set(B_RS);
20001564:	2001      	movs	r0, #1
20001566:	f7ff fe6d 	bl	20001244 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
2000156a:	2002      	movs	r0, #2
2000156c:	f7ff fe92 	bl	20001294 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20001570:	1dbb      	adds	r3, r7, #6
20001572:	781a      	ldrb	r2, [r3, #0]
20001574:	1dfb      	adds	r3, r7, #7
20001576:	781b      	ldrb	r3, [r3, #0]
20001578:	0011      	movs	r1, r2
2000157a:	0018      	movs	r0, r3
2000157c:	f7ff ff7f 	bl	2000147e <graphic_write>
}
20001580:	46c0      	nop			; (mov r8, r8)
20001582:	46bd      	mov	sp, r7
20001584:	b002      	add	sp, #8
20001586:	bd80      	pop	{r7, pc}

20001588 <graphic_initialize>:

void graphic_initialize( void ) {
20001588:	b580      	push	{r7, lr}
2000158a:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
2000158c:	2040      	movs	r0, #64	; 0x40
2000158e:	f7ff fe59 	bl	20001244 <graphic_ctrl_bit_set>
	delay_micro(10);
20001592:	200a      	movs	r0, #10
20001594:	f7ff fdf0 	bl	20001178 <delay_micro>
	
	graphic_ctrl_bit_clear(B_CS1);
20001598:	2008      	movs	r0, #8
2000159a:	f7ff fe7b 	bl	20001294 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_CS2);
2000159e:	2010      	movs	r0, #16
200015a0:	f7ff fe78 	bl	20001294 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RST);
200015a4:	2020      	movs	r0, #32
200015a6:	f7ff fe75 	bl	20001294 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_E);
200015aa:	2040      	movs	r0, #64	; 0x40
200015ac:	f7ff fe72 	bl	20001294 <graphic_ctrl_bit_clear>
	//#define SIMULATOR
	delay_milli(30);
200015b0:	201e      	movs	r0, #30
200015b2:	f7ff fdf7 	bl	200011a4 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
200015b6:	2020      	movs	r0, #32
200015b8:	f7ff fe44 	bl	20001244 <graphic_ctrl_bit_set>
	delay_milli(100); //...
200015bc:	2064      	movs	r0, #100	; 0x64
200015be:	f7ff fdf1 	bl	200011a4 <delay_milli>
	
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
200015c2:	2118      	movs	r1, #24
200015c4:	203e      	movs	r0, #62	; 0x3e
200015c6:	f7ff ff99 	bl	200014fc <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
200015ca:	2118      	movs	r1, #24
200015cc:	203f      	movs	r0, #63	; 0x3f
200015ce:	f7ff ff95 	bl	200014fc <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
200015d2:	2118      	movs	r1, #24
200015d4:	20c0      	movs	r0, #192	; 0xc0
200015d6:	f7ff ff91 	bl	200014fc <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
200015da:	2118      	movs	r1, #24
200015dc:	2040      	movs	r0, #64	; 0x40
200015de:	f7ff ff8d 	bl	200014fc <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
200015e2:	2118      	movs	r1, #24
200015e4:	20b8      	movs	r0, #184	; 0xb8
200015e6:	f7ff ff89 	bl	200014fc <graphic_write_command>
	select_controller(0);
200015ea:	2000      	movs	r0, #0
200015ec:	f7ff fe7e 	bl	200012ec <select_controller>
}
200015f0:	46c0      	nop			; (mov r8, r8)
200015f2:	46bd      	mov	sp, r7
200015f4:	bd80      	pop	{r7, pc}

200015f6 <graphic_clear_screen>:
void graphic_clear_screen( void ) {	//Annat i slidesen
200015f6:	b580      	push	{r7, lr}
200015f8:	b082      	sub	sp, #8
200015fa:	af00      	add	r7, sp, #0
	uint8_t page;
	for (page = 0; page < 8; page++) {
200015fc:	1dfb      	adds	r3, r7, #7
200015fe:	2200      	movs	r2, #0
20001600:	701a      	strb	r2, [r3, #0]
20001602:	e023      	b.n	2000164c <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
20001604:	1dfb      	adds	r3, r7, #7
20001606:	781b      	ldrb	r3, [r3, #0]
20001608:	2248      	movs	r2, #72	; 0x48
2000160a:	4252      	negs	r2, r2
2000160c:	4313      	orrs	r3, r2
2000160e:	b2db      	uxtb	r3, r3
20001610:	2118      	movs	r1, #24
20001612:	0018      	movs	r0, r3
20001614:	f7ff ff72 	bl	200014fc <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
20001618:	2118      	movs	r1, #24
2000161a:	2040      	movs	r0, #64	; 0x40
2000161c:	f7ff ff6e 	bl	200014fc <graphic_write_command>
		uint8_t add;
		for (add = 0; add < 64; add++) {
20001620:	1dbb      	adds	r3, r7, #6
20001622:	2200      	movs	r2, #0
20001624:	701a      	strb	r2, [r3, #0]
20001626:	e008      	b.n	2000163a <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1|B_CS2);
20001628:	2118      	movs	r1, #24
2000162a:	2000      	movs	r0, #0
2000162c:	f7ff ff89 	bl	20001542 <graphic_write_data>
		for (add = 0; add < 64; add++) {
20001630:	1dbb      	adds	r3, r7, #6
20001632:	781a      	ldrb	r2, [r3, #0]
20001634:	1dbb      	adds	r3, r7, #6
20001636:	3201      	adds	r2, #1
20001638:	701a      	strb	r2, [r3, #0]
2000163a:	1dbb      	adds	r3, r7, #6
2000163c:	781b      	ldrb	r3, [r3, #0]
2000163e:	2b3f      	cmp	r3, #63	; 0x3f
20001640:	d9f2      	bls.n	20001628 <graphic_clear_screen+0x32>
	for (page = 0; page < 8; page++) {
20001642:	1dfb      	adds	r3, r7, #7
20001644:	781a      	ldrb	r2, [r3, #0]
20001646:	1dfb      	adds	r3, r7, #7
20001648:	3201      	adds	r2, #1
2000164a:	701a      	strb	r2, [r3, #0]
2000164c:	1dfb      	adds	r3, r7, #7
2000164e:	781b      	ldrb	r3, [r3, #0]
20001650:	2b07      	cmp	r3, #7
20001652:	d9d7      	bls.n	20001604 <graphic_clear_screen+0xe>
		}
	}
}
20001654:	46c0      	nop			; (mov r8, r8)
20001656:	46bd      	mov	sp, r7
20001658:	b002      	add	sp, #8
2000165a:	bd80      	pop	{r7, pc}

2000165c <pixel>:

/** Color: 1=light 2=gray 3=black*/
void pixel(int x, int y, int set, int color) {
2000165c:	b580      	push	{r7, lr}
2000165e:	b086      	sub	sp, #24
20001660:	af00      	add	r7, sp, #0
20001662:	60f8      	str	r0, [r7, #12]
20001664:	60b9      	str	r1, [r7, #8]
20001666:	607a      	str	r2, [r7, #4]
20001668:	603b      	str	r3, [r7, #0]
	uint8_t mask;
	int index = 0;
2000166a:	2300      	movs	r3, #0
2000166c:	613b      	str	r3, [r7, #16]
	if( (x > 128 ) || (x < 1) || (y > 64) || (y < 1) ) 
2000166e:	68fb      	ldr	r3, [r7, #12]
20001670:	2b80      	cmp	r3, #128	; 0x80
20001672:	dd00      	ble.n	20001676 <pixel+0x1a>
20001674:	e0a6      	b.n	200017c4 <pixel+0x168>
20001676:	68fb      	ldr	r3, [r7, #12]
20001678:	2b00      	cmp	r3, #0
2000167a:	dc00      	bgt.n	2000167e <pixel+0x22>
2000167c:	e0a2      	b.n	200017c4 <pixel+0x168>
2000167e:	68bb      	ldr	r3, [r7, #8]
20001680:	2b40      	cmp	r3, #64	; 0x40
20001682:	dd00      	ble.n	20001686 <pixel+0x2a>
20001684:	e09e      	b.n	200017c4 <pixel+0x168>
20001686:	68bb      	ldr	r3, [r7, #8]
20001688:	2b00      	cmp	r3, #0
2000168a:	dc00      	bgt.n	2000168e <pixel+0x32>
2000168c:	e09a      	b.n	200017c4 <pixel+0x168>
		return;
	mask = 1 << ((y-1)%8);
2000168e:	68bb      	ldr	r3, [r7, #8]
20001690:	3b01      	subs	r3, #1
20001692:	4a4e      	ldr	r2, [pc, #312]	; (200017cc <pixel+0x170>)
20001694:	4013      	ands	r3, r2
20001696:	d504      	bpl.n	200016a2 <pixel+0x46>
20001698:	3b01      	subs	r3, #1
2000169a:	2208      	movs	r2, #8
2000169c:	4252      	negs	r2, r2
2000169e:	4313      	orrs	r3, r2
200016a0:	3301      	adds	r3, #1
200016a2:	001a      	movs	r2, r3
200016a4:	2301      	movs	r3, #1
200016a6:	4093      	lsls	r3, r2
200016a8:	001a      	movs	r2, r3
200016aa:	2317      	movs	r3, #23
200016ac:	18fb      	adds	r3, r7, r3
200016ae:	701a      	strb	r2, [r3, #0]
	if(x > 64) {
200016b0:	68fb      	ldr	r3, [r7, #12]
200016b2:	2b40      	cmp	r3, #64	; 0x40
200016b4:	dd05      	ble.n	200016c2 <pixel+0x66>
		x -= 65;
200016b6:	68fb      	ldr	r3, [r7, #12]
200016b8:	3b41      	subs	r3, #65	; 0x41
200016ba:	60fb      	str	r3, [r7, #12]
		index = 512;
200016bc:	2380      	movs	r3, #128	; 0x80
200016be:	009b      	lsls	r3, r3, #2
200016c0:	613b      	str	r3, [r7, #16]
	}
	index += x + ((y-1)/8)*64;
200016c2:	68bb      	ldr	r3, [r7, #8]
200016c4:	3b01      	subs	r3, #1
200016c6:	2b00      	cmp	r3, #0
200016c8:	da00      	bge.n	200016cc <pixel+0x70>
200016ca:	3307      	adds	r3, #7
200016cc:	10db      	asrs	r3, r3, #3
200016ce:	019a      	lsls	r2, r3, #6
200016d0:	68fb      	ldr	r3, [r7, #12]
200016d2:	18d3      	adds	r3, r2, r3
200016d4:	693a      	ldr	r2, [r7, #16]
200016d6:	18d3      	adds	r3, r2, r3
200016d8:	613b      	str	r3, [r7, #16]

	if(set == 0)
200016da:	687b      	ldr	r3, [r7, #4]
200016dc:	2b00      	cmp	r3, #0
200016de:	d106      	bne.n	200016ee <pixel+0x92>
		mask = ~mask;
200016e0:	2317      	movs	r3, #23
200016e2:	18fb      	adds	r3, r7, r3
200016e4:	2217      	movs	r2, #23
200016e6:	18ba      	adds	r2, r7, r2
200016e8:	7812      	ldrb	r2, [r2, #0]
200016ea:	43d2      	mvns	r2, r2
200016ec:	701a      	strb	r2, [r3, #0]

	switch (color) {
200016ee:	683b      	ldr	r3, [r7, #0]
200016f0:	2b02      	cmp	r3, #2
200016f2:	d024      	beq.n	2000173e <pixel+0xe2>
200016f4:	2b03      	cmp	r3, #3
200016f6:	d043      	beq.n	20001780 <pixel+0x124>
200016f8:	2b01      	cmp	r3, #1
200016fa:	d164      	bne.n	200017c6 <pixel+0x16a>
		case 1:	
			if(set)
200016fc:	687b      	ldr	r3, [r7, #4]
200016fe:	2b00      	cmp	r3, #0
20001700:	d00e      	beq.n	20001720 <pixel+0xc4>
				backBufferLight[index] |= mask;
20001702:	4a33      	ldr	r2, [pc, #204]	; (200017d0 <pixel+0x174>)
20001704:	693b      	ldr	r3, [r7, #16]
20001706:	18d3      	adds	r3, r2, r3
20001708:	781a      	ldrb	r2, [r3, #0]
2000170a:	2317      	movs	r3, #23
2000170c:	18fb      	adds	r3, r7, r3
2000170e:	781b      	ldrb	r3, [r3, #0]
20001710:	4313      	orrs	r3, r2
20001712:	b2d9      	uxtb	r1, r3
20001714:	4a2e      	ldr	r2, [pc, #184]	; (200017d0 <pixel+0x174>)
20001716:	693b      	ldr	r3, [r7, #16]
20001718:	18d3      	adds	r3, r2, r3
2000171a:	1c0a      	adds	r2, r1, #0
2000171c:	701a      	strb	r2, [r3, #0]
			else
				backBufferLight[index] &= mask;
			break;
2000171e:	e052      	b.n	200017c6 <pixel+0x16a>
				backBufferLight[index] &= mask;
20001720:	4a2b      	ldr	r2, [pc, #172]	; (200017d0 <pixel+0x174>)
20001722:	693b      	ldr	r3, [r7, #16]
20001724:	18d3      	adds	r3, r2, r3
20001726:	781b      	ldrb	r3, [r3, #0]
20001728:	2217      	movs	r2, #23
2000172a:	18ba      	adds	r2, r7, r2
2000172c:	7812      	ldrb	r2, [r2, #0]
2000172e:	4013      	ands	r3, r2
20001730:	b2d9      	uxtb	r1, r3
20001732:	4a27      	ldr	r2, [pc, #156]	; (200017d0 <pixel+0x174>)
20001734:	693b      	ldr	r3, [r7, #16]
20001736:	18d3      	adds	r3, r2, r3
20001738:	1c0a      	adds	r2, r1, #0
2000173a:	701a      	strb	r2, [r3, #0]
			break;
2000173c:	e043      	b.n	200017c6 <pixel+0x16a>
		
		case 2:	
			if(set)
2000173e:	687b      	ldr	r3, [r7, #4]
20001740:	2b00      	cmp	r3, #0
20001742:	d00e      	beq.n	20001762 <pixel+0x106>
				backBufferGray[index] |= mask;
20001744:	4a23      	ldr	r2, [pc, #140]	; (200017d4 <pixel+0x178>)
20001746:	693b      	ldr	r3, [r7, #16]
20001748:	18d3      	adds	r3, r2, r3
2000174a:	781a      	ldrb	r2, [r3, #0]
2000174c:	2317      	movs	r3, #23
2000174e:	18fb      	adds	r3, r7, r3
20001750:	781b      	ldrb	r3, [r3, #0]
20001752:	4313      	orrs	r3, r2
20001754:	b2d9      	uxtb	r1, r3
20001756:	4a1f      	ldr	r2, [pc, #124]	; (200017d4 <pixel+0x178>)
20001758:	693b      	ldr	r3, [r7, #16]
2000175a:	18d3      	adds	r3, r2, r3
2000175c:	1c0a      	adds	r2, r1, #0
2000175e:	701a      	strb	r2, [r3, #0]
			else
				backBufferGray[index] &= mask;
			break;
20001760:	e031      	b.n	200017c6 <pixel+0x16a>
				backBufferGray[index] &= mask;
20001762:	4a1c      	ldr	r2, [pc, #112]	; (200017d4 <pixel+0x178>)
20001764:	693b      	ldr	r3, [r7, #16]
20001766:	18d3      	adds	r3, r2, r3
20001768:	781b      	ldrb	r3, [r3, #0]
2000176a:	2217      	movs	r2, #23
2000176c:	18ba      	adds	r2, r7, r2
2000176e:	7812      	ldrb	r2, [r2, #0]
20001770:	4013      	ands	r3, r2
20001772:	b2d9      	uxtb	r1, r3
20001774:	4a17      	ldr	r2, [pc, #92]	; (200017d4 <pixel+0x178>)
20001776:	693b      	ldr	r3, [r7, #16]
20001778:	18d3      	adds	r3, r2, r3
2000177a:	1c0a      	adds	r2, r1, #0
2000177c:	701a      	strb	r2, [r3, #0]
			break;
2000177e:	e022      	b.n	200017c6 <pixel+0x16a>
		
		case 3:	
			if(set)
20001780:	687b      	ldr	r3, [r7, #4]
20001782:	2b00      	cmp	r3, #0
20001784:	d00e      	beq.n	200017a4 <pixel+0x148>
				backBuffer[index] |= mask;
20001786:	4a14      	ldr	r2, [pc, #80]	; (200017d8 <pixel+0x17c>)
20001788:	693b      	ldr	r3, [r7, #16]
2000178a:	18d3      	adds	r3, r2, r3
2000178c:	781a      	ldrb	r2, [r3, #0]
2000178e:	2317      	movs	r3, #23
20001790:	18fb      	adds	r3, r7, r3
20001792:	781b      	ldrb	r3, [r3, #0]
20001794:	4313      	orrs	r3, r2
20001796:	b2d9      	uxtb	r1, r3
20001798:	4a0f      	ldr	r2, [pc, #60]	; (200017d8 <pixel+0x17c>)
2000179a:	693b      	ldr	r3, [r7, #16]
2000179c:	18d3      	adds	r3, r2, r3
2000179e:	1c0a      	adds	r2, r1, #0
200017a0:	701a      	strb	r2, [r3, #0]
			else
				backBuffer[index] &= mask;
			break;
200017a2:	e010      	b.n	200017c6 <pixel+0x16a>
				backBuffer[index] &= mask;
200017a4:	4a0c      	ldr	r2, [pc, #48]	; (200017d8 <pixel+0x17c>)
200017a6:	693b      	ldr	r3, [r7, #16]
200017a8:	18d3      	adds	r3, r2, r3
200017aa:	781b      	ldrb	r3, [r3, #0]
200017ac:	2217      	movs	r2, #23
200017ae:	18ba      	adds	r2, r7, r2
200017b0:	7812      	ldrb	r2, [r2, #0]
200017b2:	4013      	ands	r3, r2
200017b4:	b2d9      	uxtb	r1, r3
200017b6:	4a08      	ldr	r2, [pc, #32]	; (200017d8 <pixel+0x17c>)
200017b8:	693b      	ldr	r3, [r7, #16]
200017ba:	18d3      	adds	r3, r2, r3
200017bc:	1c0a      	adds	r2, r1, #0
200017be:	701a      	strb	r2, [r3, #0]
			break;
200017c0:	46c0      	nop			; (mov r8, r8)
200017c2:	e000      	b.n	200017c6 <pixel+0x16a>
		return;
200017c4:	46c0      	nop			; (mov r8, r8)
			
	}

}
200017c6:	46bd      	mov	sp, r7
200017c8:	b006      	add	sp, #24
200017ca:	bd80      	pop	{r7, pc}
200017cc:	80000007 	andhi	r0, r0, r7
200017d0:	200044a4 	andcs	r4, r0, r4, lsr #9
200017d4:	20002ca4 	andcs	r2, r0, r4, lsr #25
200017d8:	200034a4 	andcs	r3, r0, r4, lsr #9

200017dc <pixel2>:


void pixel2(int x, int y, int set) {
200017dc:	b580      	push	{r7, lr}
200017de:	b088      	sub	sp, #32
200017e0:	af00      	add	r7, sp, #0
200017e2:	60f8      	str	r0, [r7, #12]
200017e4:	60b9      	str	r1, [r7, #8]
200017e6:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
200017e8:	68fb      	ldr	r3, [r7, #12]
200017ea:	2b00      	cmp	r3, #0
200017ec:	dc00      	bgt.n	200017f0 <pixel2+0x14>
200017ee:	e0bc      	b.n	2000196a <pixel2+0x18e>
200017f0:	68bb      	ldr	r3, [r7, #8]
200017f2:	2b00      	cmp	r3, #0
200017f4:	dc00      	bgt.n	200017f8 <pixel2+0x1c>
200017f6:	e0b8      	b.n	2000196a <pixel2+0x18e>
200017f8:	68fb      	ldr	r3, [r7, #12]
200017fa:	2b80      	cmp	r3, #128	; 0x80
200017fc:	dd00      	ble.n	20001800 <pixel2+0x24>
200017fe:	e0b4      	b.n	2000196a <pixel2+0x18e>
20001800:	68bb      	ldr	r3, [r7, #8]
20001802:	2b40      	cmp	r3, #64	; 0x40
20001804:	dd00      	ble.n	20001808 <pixel2+0x2c>
20001806:	e0b0      	b.n	2000196a <pixel2+0x18e>
	index = (y-1)/8;
20001808:	68bb      	ldr	r3, [r7, #8]
2000180a:	3b01      	subs	r3, #1
2000180c:	2b00      	cmp	r3, #0
2000180e:	da00      	bge.n	20001812 <pixel2+0x36>
20001810:	3307      	adds	r3, #7
20001812:	10db      	asrs	r3, r3, #3
20001814:	61bb      	str	r3, [r7, #24]
	switch( (y-1)%8 ) {
20001816:	68bb      	ldr	r3, [r7, #8]
20001818:	3b01      	subs	r3, #1
2000181a:	4a56      	ldr	r2, [pc, #344]	; (20001974 <pixel2+0x198>)
2000181c:	4013      	ands	r3, r2
2000181e:	d504      	bpl.n	2000182a <pixel2+0x4e>
20001820:	3b01      	subs	r3, #1
20001822:	2208      	movs	r2, #8
20001824:	4252      	negs	r2, r2
20001826:	4313      	orrs	r3, r2
20001828:	3301      	adds	r3, #1
2000182a:	2b07      	cmp	r3, #7
2000182c:	d82c      	bhi.n	20001888 <pixel2+0xac>
2000182e:	009a      	lsls	r2, r3, #2
20001830:	4b51      	ldr	r3, [pc, #324]	; (20001978 <pixel2+0x19c>)
20001832:	18d3      	adds	r3, r2, r3
20001834:	681b      	ldr	r3, [r3, #0]
20001836:	469f      	mov	pc, r3
		case 0: mask = 1; break;
20001838:	231f      	movs	r3, #31
2000183a:	18fb      	adds	r3, r7, r3
2000183c:	2201      	movs	r2, #1
2000183e:	701a      	strb	r2, [r3, #0]
20001840:	e022      	b.n	20001888 <pixel2+0xac>
		case 1: mask = 2; break;
20001842:	231f      	movs	r3, #31
20001844:	18fb      	adds	r3, r7, r3
20001846:	2202      	movs	r2, #2
20001848:	701a      	strb	r2, [r3, #0]
2000184a:	e01d      	b.n	20001888 <pixel2+0xac>
		case 2: mask = 4; break;
2000184c:	231f      	movs	r3, #31
2000184e:	18fb      	adds	r3, r7, r3
20001850:	2204      	movs	r2, #4
20001852:	701a      	strb	r2, [r3, #0]
20001854:	e018      	b.n	20001888 <pixel2+0xac>
		case 3: mask = 8; break;
20001856:	231f      	movs	r3, #31
20001858:	18fb      	adds	r3, r7, r3
2000185a:	2208      	movs	r2, #8
2000185c:	701a      	strb	r2, [r3, #0]
2000185e:	e013      	b.n	20001888 <pixel2+0xac>
		case 4: mask = 0x10; break;
20001860:	231f      	movs	r3, #31
20001862:	18fb      	adds	r3, r7, r3
20001864:	2210      	movs	r2, #16
20001866:	701a      	strb	r2, [r3, #0]
20001868:	e00e      	b.n	20001888 <pixel2+0xac>
		case 5: mask = 0x20; break;
2000186a:	231f      	movs	r3, #31
2000186c:	18fb      	adds	r3, r7, r3
2000186e:	2220      	movs	r2, #32
20001870:	701a      	strb	r2, [r3, #0]
20001872:	e009      	b.n	20001888 <pixel2+0xac>
		case 6: mask = 0x40; break;
20001874:	231f      	movs	r3, #31
20001876:	18fb      	adds	r3, r7, r3
20001878:	2240      	movs	r2, #64	; 0x40
2000187a:	701a      	strb	r2, [r3, #0]
2000187c:	e004      	b.n	20001888 <pixel2+0xac>
		case 7: mask = 0x80; break;
2000187e:	231f      	movs	r3, #31
20001880:	18fb      	adds	r3, r7, r3
20001882:	2280      	movs	r2, #128	; 0x80
20001884:	701a      	strb	r2, [r3, #0]
20001886:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0)
20001888:	687b      	ldr	r3, [r7, #4]
2000188a:	2b00      	cmp	r3, #0
2000188c:	d106      	bne.n	2000189c <pixel2+0xc0>
		mask = ~mask;
2000188e:	231f      	movs	r3, #31
20001890:	18fb      	adds	r3, r7, r3
20001892:	221f      	movs	r2, #31
20001894:	18ba      	adds	r2, r7, r2
20001896:	7812      	ldrb	r2, [r2, #0]
20001898:	43d2      	mvns	r2, r2
2000189a:	701a      	strb	r2, [r3, #0]
	
	if(x > 64){
2000189c:	68fb      	ldr	r3, [r7, #12]
2000189e:	2b40      	cmp	r3, #64	; 0x40
200018a0:	dd07      	ble.n	200018b2 <pixel2+0xd6>
		controller = B_CS2;
200018a2:	231e      	movs	r3, #30
200018a4:	18fb      	adds	r3, r7, r3
200018a6:	2210      	movs	r2, #16
200018a8:	701a      	strb	r2, [r3, #0]
		x = x - 65;
200018aa:	68fb      	ldr	r3, [r7, #12]
200018ac:	3b41      	subs	r3, #65	; 0x41
200018ae:	60fb      	str	r3, [r7, #12]
200018b0:	e006      	b.n	200018c0 <pixel2+0xe4>
	} else {
		controller = B_CS1;
200018b2:	231e      	movs	r3, #30
200018b4:	18fb      	adds	r3, r7, r3
200018b6:	2208      	movs	r2, #8
200018b8:	701a      	strb	r2, [r3, #0]
		x = x-1;
200018ba:	68fb      	ldr	r3, [r7, #12]
200018bc:	3b01      	subs	r3, #1
200018be:	60fb      	str	r3, [r7, #12]
	}
	graphic_write_command(LCD_SET_ADD | x, controller );
200018c0:	68fb      	ldr	r3, [r7, #12]
200018c2:	b25b      	sxtb	r3, r3
200018c4:	2240      	movs	r2, #64	; 0x40
200018c6:	4313      	orrs	r3, r2
200018c8:	b25b      	sxtb	r3, r3
200018ca:	b2da      	uxtb	r2, r3
200018cc:	231e      	movs	r3, #30
200018ce:	18fb      	adds	r3, r7, r3
200018d0:	781b      	ldrb	r3, [r3, #0]
200018d2:	0019      	movs	r1, r3
200018d4:	0010      	movs	r0, r2
200018d6:	f7ff fe11 	bl	200014fc <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller );
200018da:	69bb      	ldr	r3, [r7, #24]
200018dc:	b25b      	sxtb	r3, r3
200018de:	2248      	movs	r2, #72	; 0x48
200018e0:	4252      	negs	r2, r2
200018e2:	4313      	orrs	r3, r2
200018e4:	b25b      	sxtb	r3, r3
200018e6:	b2da      	uxtb	r2, r3
200018e8:	231e      	movs	r3, #30
200018ea:	18fb      	adds	r3, r7, r3
200018ec:	781b      	ldrb	r3, [r3, #0]
200018ee:	0019      	movs	r1, r3
200018f0:	0010      	movs	r0, r2
200018f2:	f7ff fe03 	bl	200014fc <graphic_write_command>
	
	c = graphic_read_data(controller);
200018f6:	231e      	movs	r3, #30
200018f8:	18fb      	adds	r3, r7, r3
200018fa:	781b      	ldrb	r3, [r3, #0]
200018fc:	0018      	movs	r0, r3
200018fe:	f7ff fda9 	bl	20001454 <graphic_read_data>
20001902:	0002      	movs	r2, r0
20001904:	2317      	movs	r3, #23
20001906:	18fb      	adds	r3, r7, r3
20001908:	701a      	strb	r2, [r3, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
2000190a:	68fb      	ldr	r3, [r7, #12]
2000190c:	b25b      	sxtb	r3, r3
2000190e:	2240      	movs	r2, #64	; 0x40
20001910:	4313      	orrs	r3, r2
20001912:	b25b      	sxtb	r3, r3
20001914:	b2da      	uxtb	r2, r3
20001916:	231e      	movs	r3, #30
20001918:	18fb      	adds	r3, r7, r3
2000191a:	781b      	ldrb	r3, [r3, #0]
2000191c:	0019      	movs	r1, r3
2000191e:	0010      	movs	r0, r2
20001920:	f7ff fdec 	bl	200014fc <graphic_write_command>
	
	if(set)
20001924:	687b      	ldr	r3, [r7, #4]
20001926:	2b00      	cmp	r3, #0
20001928:	d00a      	beq.n	20001940 <pixel2+0x164>
		mask = mask | c;
2000192a:	231f      	movs	r3, #31
2000192c:	18fb      	adds	r3, r7, r3
2000192e:	221f      	movs	r2, #31
20001930:	18b9      	adds	r1, r7, r2
20001932:	2217      	movs	r2, #23
20001934:	18ba      	adds	r2, r7, r2
20001936:	7809      	ldrb	r1, [r1, #0]
20001938:	7812      	ldrb	r2, [r2, #0]
2000193a:	430a      	orrs	r2, r1
2000193c:	701a      	strb	r2, [r3, #0]
2000193e:	e009      	b.n	20001954 <pixel2+0x178>
	else
		mask = mask & c;
20001940:	231f      	movs	r3, #31
20001942:	18fb      	adds	r3, r7, r3
20001944:	221f      	movs	r2, #31
20001946:	18ba      	adds	r2, r7, r2
20001948:	2117      	movs	r1, #23
2000194a:	1879      	adds	r1, r7, r1
2000194c:	7812      	ldrb	r2, [r2, #0]
2000194e:	7809      	ldrb	r1, [r1, #0]
20001950:	400a      	ands	r2, r1
20001952:	701a      	strb	r2, [r3, #0]
	
	graphic_write_data(mask, controller);
20001954:	231e      	movs	r3, #30
20001956:	18fb      	adds	r3, r7, r3
20001958:	781a      	ldrb	r2, [r3, #0]
2000195a:	231f      	movs	r3, #31
2000195c:	18fb      	adds	r3, r7, r3
2000195e:	781b      	ldrb	r3, [r3, #0]
20001960:	0011      	movs	r1, r2
20001962:	0018      	movs	r0, r3
20001964:	f7ff fded 	bl	20001542 <graphic_write_data>
20001968:	e000      	b.n	2000196c <pixel2+0x190>
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
2000196a:	46c0      	nop			; (mov r8, r8)
}
2000196c:	46bd      	mov	sp, r7
2000196e:	b008      	add	sp, #32
20001970:	bd80      	pop	{r7, pc}
20001972:	46c0      	nop			; (mov r8, r8)
20001974:	80000007 	andhi	r0, r0, r7
20001978:	20006480 	andcs	r6, r0, r0, lsl #9

2000197c <graphic_draw_screen>:

void graphic_draw_screen(uint8_t *buffer) {
2000197c:	b580      	push	{r7, lr}
2000197e:	b086      	sub	sp, #24
20001980:	af00      	add	r7, sp, #0
20001982:	6078      	str	r0, [r7, #4]
	uint8_t i, j, controller, c;
	unsigned int k = 0;
20001984:	2300      	movs	r3, #0
20001986:	613b      	str	r3, [r7, #16]
	for(c = 0; c < 2; c++) {
20001988:	2315      	movs	r3, #21
2000198a:	18fb      	adds	r3, r7, r3
2000198c:	2200      	movs	r2, #0
2000198e:	701a      	strb	r2, [r3, #0]
20001990:	e056      	b.n	20001a40 <graphic_draw_screen+0xc4>
		controller = (c == 0) ? B_CS1 : B_CS2;
20001992:	2315      	movs	r3, #21
20001994:	18fb      	adds	r3, r7, r3
20001996:	781b      	ldrb	r3, [r3, #0]
20001998:	2b00      	cmp	r3, #0
2000199a:	d101      	bne.n	200019a0 <graphic_draw_screen+0x24>
2000199c:	2208      	movs	r2, #8
2000199e:	e000      	b.n	200019a2 <graphic_draw_screen+0x26>
200019a0:	2210      	movs	r2, #16
200019a2:	230f      	movs	r3, #15
200019a4:	18fb      	adds	r3, r7, r3
200019a6:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 8; j++) {
200019a8:	2316      	movs	r3, #22
200019aa:	18fb      	adds	r3, r7, r3
200019ac:	2200      	movs	r2, #0
200019ae:	701a      	strb	r2, [r3, #0]
200019b0:	e03a      	b.n	20001a28 <graphic_draw_screen+0xac>
			graphic_write_command(LCD_SET_PAGE | j, controller);
200019b2:	2316      	movs	r3, #22
200019b4:	18fb      	adds	r3, r7, r3
200019b6:	781b      	ldrb	r3, [r3, #0]
200019b8:	2248      	movs	r2, #72	; 0x48
200019ba:	4252      	negs	r2, r2
200019bc:	4313      	orrs	r3, r2
200019be:	b2da      	uxtb	r2, r3
200019c0:	230f      	movs	r3, #15
200019c2:	18fb      	adds	r3, r7, r3
200019c4:	781b      	ldrb	r3, [r3, #0]
200019c6:	0019      	movs	r1, r3
200019c8:	0010      	movs	r0, r2
200019ca:	f7ff fd97 	bl	200014fc <graphic_write_command>
			graphic_write_command(LCD_SET_ADD | 0, controller);
200019ce:	230f      	movs	r3, #15
200019d0:	18fb      	adds	r3, r7, r3
200019d2:	781b      	ldrb	r3, [r3, #0]
200019d4:	0019      	movs	r1, r3
200019d6:	2040      	movs	r0, #64	; 0x40
200019d8:	f7ff fd90 	bl	200014fc <graphic_write_command>
			for(i = 0; i <= 63; i++, k++) {
200019dc:	2317      	movs	r3, #23
200019de:	18fb      	adds	r3, r7, r3
200019e0:	2200      	movs	r2, #0
200019e2:	701a      	strb	r2, [r3, #0]
200019e4:	e014      	b.n	20001a10 <graphic_draw_screen+0x94>
				graphic_write_data(buffer[k], controller);
200019e6:	687a      	ldr	r2, [r7, #4]
200019e8:	693b      	ldr	r3, [r7, #16]
200019ea:	18d3      	adds	r3, r2, r3
200019ec:	781a      	ldrb	r2, [r3, #0]
200019ee:	230f      	movs	r3, #15
200019f0:	18fb      	adds	r3, r7, r3
200019f2:	781b      	ldrb	r3, [r3, #0]
200019f4:	0019      	movs	r1, r3
200019f6:	0010      	movs	r0, r2
200019f8:	f7ff fda3 	bl	20001542 <graphic_write_data>
			for(i = 0; i <= 63; i++, k++) {
200019fc:	2317      	movs	r3, #23
200019fe:	18fb      	adds	r3, r7, r3
20001a00:	781a      	ldrb	r2, [r3, #0]
20001a02:	2317      	movs	r3, #23
20001a04:	18fb      	adds	r3, r7, r3
20001a06:	3201      	adds	r2, #1
20001a08:	701a      	strb	r2, [r3, #0]
20001a0a:	693b      	ldr	r3, [r7, #16]
20001a0c:	3301      	adds	r3, #1
20001a0e:	613b      	str	r3, [r7, #16]
20001a10:	2317      	movs	r3, #23
20001a12:	18fb      	adds	r3, r7, r3
20001a14:	781b      	ldrb	r3, [r3, #0]
20001a16:	2b3f      	cmp	r3, #63	; 0x3f
20001a18:	d9e5      	bls.n	200019e6 <graphic_draw_screen+0x6a>
		for(j = 0; j < 8; j++) {
20001a1a:	2316      	movs	r3, #22
20001a1c:	18fb      	adds	r3, r7, r3
20001a1e:	781a      	ldrb	r2, [r3, #0]
20001a20:	2316      	movs	r3, #22
20001a22:	18fb      	adds	r3, r7, r3
20001a24:	3201      	adds	r2, #1
20001a26:	701a      	strb	r2, [r3, #0]
20001a28:	2316      	movs	r3, #22
20001a2a:	18fb      	adds	r3, r7, r3
20001a2c:	781b      	ldrb	r3, [r3, #0]
20001a2e:	2b07      	cmp	r3, #7
20001a30:	d9bf      	bls.n	200019b2 <graphic_draw_screen+0x36>
	for(c = 0; c < 2; c++) {
20001a32:	2315      	movs	r3, #21
20001a34:	18fb      	adds	r3, r7, r3
20001a36:	781a      	ldrb	r2, [r3, #0]
20001a38:	2315      	movs	r3, #21
20001a3a:	18fb      	adds	r3, r7, r3
20001a3c:	3201      	adds	r2, #1
20001a3e:	701a      	strb	r2, [r3, #0]
20001a40:	2315      	movs	r3, #21
20001a42:	18fb      	adds	r3, r7, r3
20001a44:	781b      	ldrb	r3, [r3, #0]
20001a46:	2b01      	cmp	r3, #1
20001a48:	d9a3      	bls.n	20001992 <graphic_draw_screen+0x16>
			}
		}
	}
}
20001a4a:	46c0      	nop			; (mov r8, r8)
20001a4c:	46bd      	mov	sp, r7
20001a4e:	b006      	add	sp, #24
20001a50:	bd80      	pop	{r7, pc}

20001a52 <draw_sprite>:


void grayScaleTest( void );


void draw_sprite(sprite* s, int x, int y, int set, int color) {
20001a52:	b5b0      	push	{r4, r5, r7, lr}
20001a54:	b08a      	sub	sp, #40	; 0x28
20001a56:	af00      	add	r7, sp, #0
20001a58:	60f8      	str	r0, [r7, #12]
20001a5a:	60b9      	str	r1, [r7, #8]
20001a5c:	607a      	str	r2, [r7, #4]
20001a5e:	603b      	str	r3, [r7, #0]
	int i,j,k, width_in_bytes;
	if (s->width % 8 == 0)
20001a60:	68fb      	ldr	r3, [r7, #12]
20001a62:	681b      	ldr	r3, [r3, #0]
20001a64:	2207      	movs	r2, #7
20001a66:	4013      	ands	r3, r2
20001a68:	d104      	bne.n	20001a74 <draw_sprite+0x22>
		width_in_bytes = s->width / 8;
20001a6a:	68fb      	ldr	r3, [r7, #12]
20001a6c:	681b      	ldr	r3, [r3, #0]
20001a6e:	08db      	lsrs	r3, r3, #3
20001a70:	61bb      	str	r3, [r7, #24]
20001a72:	e004      	b.n	20001a7e <draw_sprite+0x2c>
	else
		width_in_bytes = (s->width / 8) + 1;
20001a74:	68fb      	ldr	r3, [r7, #12]
20001a76:	681b      	ldr	r3, [r3, #0]
20001a78:	08db      	lsrs	r3, r3, #3
20001a7a:	3301      	adds	r3, #1
20001a7c:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < s->height; i++)
20001a7e:	2300      	movs	r3, #0
20001a80:	627b      	str	r3, [r7, #36]	; 0x24
20001a82:	e06a      	b.n	20001b5a <draw_sprite+0x108>
		for (j = 0; j < width_in_bytes; j++) {
20001a84:	2300      	movs	r3, #0
20001a86:	623b      	str	r3, [r7, #32]
20001a88:	e060      	b.n	20001b4c <draw_sprite+0xfa>
			unsigned char byte = s->data[i * width_in_bytes + j];
20001a8a:	68fb      	ldr	r3, [r7, #12]
20001a8c:	689b      	ldr	r3, [r3, #8]
20001a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001a90:	69b9      	ldr	r1, [r7, #24]
20001a92:	4351      	muls	r1, r2
20001a94:	6a3a      	ldr	r2, [r7, #32]
20001a96:	188a      	adds	r2, r1, r2
20001a98:	189a      	adds	r2, r3, r2
20001a9a:	2317      	movs	r3, #23
20001a9c:	18fb      	adds	r3, r7, r3
20001a9e:	7812      	ldrb	r2, [r2, #0]
20001aa0:	701a      	strb	r2, [r3, #0]
			for (k =0; k < 8; k++) {
20001aa2:	2300      	movs	r3, #0
20001aa4:	61fb      	str	r3, [r7, #28]
20001aa6:	e04b      	b.n	20001b40 <draw_sprite+0xee>
				if (byte & (1 << k)){
20001aa8:	2317      	movs	r3, #23
20001aaa:	18fb      	adds	r3, r7, r3
20001aac:	781a      	ldrb	r2, [r3, #0]
20001aae:	69fb      	ldr	r3, [r7, #28]
20001ab0:	411a      	asrs	r2, r3
20001ab2:	0013      	movs	r3, r2
20001ab4:	2201      	movs	r2, #1
20001ab6:	4013      	ands	r3, r2
20001ab8:	d03f      	beq.n	20001b3a <draw_sprite+0xe8>
					pixel(8 * j + k + x + 1, i + y + 1, set, color);
20001aba:	6a3b      	ldr	r3, [r7, #32]
20001abc:	00da      	lsls	r2, r3, #3
20001abe:	69fb      	ldr	r3, [r7, #28]
20001ac0:	18d2      	adds	r2, r2, r3
20001ac2:	68bb      	ldr	r3, [r7, #8]
20001ac4:	18d3      	adds	r3, r2, r3
20001ac6:	1c58      	adds	r0, r3, #1
20001ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001aca:	687b      	ldr	r3, [r7, #4]
20001acc:	18d3      	adds	r3, r2, r3
20001ace:	1c59      	adds	r1, r3, #1
20001ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001ad2:	683a      	ldr	r2, [r7, #0]
20001ad4:	f7ff fdc2 	bl	2000165c <pixel>
					
					if(set) {	//Remove the other colors from this pixel
20001ad8:	683b      	ldr	r3, [r7, #0]
20001ada:	2b00      	cmp	r3, #0
20001adc:	d02d      	beq.n	20001b3a <draw_sprite+0xe8>
						pixel(8 * j + k + x + 1, i + y + 1, 0, (color+1) % 3);
20001ade:	6a3b      	ldr	r3, [r7, #32]
20001ae0:	00da      	lsls	r2, r3, #3
20001ae2:	69fb      	ldr	r3, [r7, #28]
20001ae4:	18d2      	adds	r2, r2, r3
20001ae6:	68bb      	ldr	r3, [r7, #8]
20001ae8:	18d3      	adds	r3, r2, r3
20001aea:	1c5c      	adds	r4, r3, #1
20001aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001aee:	687b      	ldr	r3, [r7, #4]
20001af0:	18d3      	adds	r3, r2, r3
20001af2:	1c5d      	adds	r5, r3, #1
20001af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001af6:	3301      	adds	r3, #1
20001af8:	2103      	movs	r1, #3
20001afa:	0018      	movs	r0, r3
20001afc:	f000 fe32 	bl	20002764 <__aeabi_idivmod>
20001b00:	000b      	movs	r3, r1
20001b02:	2200      	movs	r2, #0
20001b04:	0029      	movs	r1, r5
20001b06:	0020      	movs	r0, r4
20001b08:	f7ff fda8 	bl	2000165c <pixel>
						pixel(8 * j + k + x + 1, i + y + 1, 0, (color+2) % 3);
20001b0c:	6a3b      	ldr	r3, [r7, #32]
20001b0e:	00da      	lsls	r2, r3, #3
20001b10:	69fb      	ldr	r3, [r7, #28]
20001b12:	18d2      	adds	r2, r2, r3
20001b14:	68bb      	ldr	r3, [r7, #8]
20001b16:	18d3      	adds	r3, r2, r3
20001b18:	1c5c      	adds	r4, r3, #1
20001b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001b1c:	687b      	ldr	r3, [r7, #4]
20001b1e:	18d3      	adds	r3, r2, r3
20001b20:	1c5d      	adds	r5, r3, #1
20001b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001b24:	3302      	adds	r3, #2
20001b26:	2103      	movs	r1, #3
20001b28:	0018      	movs	r0, r3
20001b2a:	f000 fe1b 	bl	20002764 <__aeabi_idivmod>
20001b2e:	000b      	movs	r3, r1
20001b30:	2200      	movs	r2, #0
20001b32:	0029      	movs	r1, r5
20001b34:	0020      	movs	r0, r4
20001b36:	f7ff fd91 	bl	2000165c <pixel>
			for (k =0; k < 8; k++) {
20001b3a:	69fb      	ldr	r3, [r7, #28]
20001b3c:	3301      	adds	r3, #1
20001b3e:	61fb      	str	r3, [r7, #28]
20001b40:	69fb      	ldr	r3, [r7, #28]
20001b42:	2b07      	cmp	r3, #7
20001b44:	ddb0      	ble.n	20001aa8 <draw_sprite+0x56>
		for (j = 0; j < width_in_bytes; j++) {
20001b46:	6a3b      	ldr	r3, [r7, #32]
20001b48:	3301      	adds	r3, #1
20001b4a:	623b      	str	r3, [r7, #32]
20001b4c:	6a3a      	ldr	r2, [r7, #32]
20001b4e:	69bb      	ldr	r3, [r7, #24]
20001b50:	429a      	cmp	r2, r3
20001b52:	db9a      	blt.n	20001a8a <draw_sprite+0x38>
	for (i = 0; i < s->height; i++)
20001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001b56:	3301      	adds	r3, #1
20001b58:	627b      	str	r3, [r7, #36]	; 0x24
20001b5a:	68fb      	ldr	r3, [r7, #12]
20001b5c:	685a      	ldr	r2, [r3, #4]
20001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001b60:	429a      	cmp	r2, r3
20001b62:	d88f      	bhi.n	20001a84 <draw_sprite+0x32>
					}
				}
			}
		}
}
20001b64:	46c0      	nop			; (mov r8, r8)
20001b66:	46bd      	mov	sp, r7
20001b68:	b00a      	add	sp, #40	; 0x28
20001b6a:	bdb0      	pop	{r4, r5, r7, pc}

20001b6c <fillRectangle>:

void fillRectangle( int x, int y, int width, int height ){
20001b6c:	b580      	push	{r7, lr}
20001b6e:	b086      	sub	sp, #24
20001b70:	af00      	add	r7, sp, #0
20001b72:	60f8      	str	r0, [r7, #12]
20001b74:	60b9      	str	r1, [r7, #8]
20001b76:	607a      	str	r2, [r7, #4]
20001b78:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
20001b7a:	68fb      	ldr	r3, [r7, #12]
20001b7c:	617b      	str	r3, [r7, #20]
20001b7e:	e014      	b.n	20001baa <fillRectangle+0x3e>
		for (j = y; j < y + height; j++) {
20001b80:	68bb      	ldr	r3, [r7, #8]
20001b82:	613b      	str	r3, [r7, #16]
20001b84:	e008      	b.n	20001b98 <fillRectangle+0x2c>
			pixel(i, j, 1, 3);
20001b86:	6939      	ldr	r1, [r7, #16]
20001b88:	6978      	ldr	r0, [r7, #20]
20001b8a:	2303      	movs	r3, #3
20001b8c:	2201      	movs	r2, #1
20001b8e:	f7ff fd65 	bl	2000165c <pixel>
		for (j = y; j < y + height; j++) {
20001b92:	693b      	ldr	r3, [r7, #16]
20001b94:	3301      	adds	r3, #1
20001b96:	613b      	str	r3, [r7, #16]
20001b98:	68ba      	ldr	r2, [r7, #8]
20001b9a:	683b      	ldr	r3, [r7, #0]
20001b9c:	18d2      	adds	r2, r2, r3
20001b9e:	693b      	ldr	r3, [r7, #16]
20001ba0:	429a      	cmp	r2, r3
20001ba2:	dcf0      	bgt.n	20001b86 <fillRectangle+0x1a>
	for (i = x; i < x + width; i++) {
20001ba4:	697b      	ldr	r3, [r7, #20]
20001ba6:	3301      	adds	r3, #1
20001ba8:	617b      	str	r3, [r7, #20]
20001baa:	68fa      	ldr	r2, [r7, #12]
20001bac:	687b      	ldr	r3, [r7, #4]
20001bae:	18d2      	adds	r2, r2, r3
20001bb0:	697b      	ldr	r3, [r7, #20]
20001bb2:	429a      	cmp	r2, r3
20001bb4:	dce4      	bgt.n	20001b80 <fillRectangle+0x14>
		}
	}
}
20001bb6:	46c0      	nop			; (mov r8, r8)
20001bb8:	46bd      	mov	sp, r7
20001bba:	b006      	add	sp, #24
20001bbc:	bd80      	pop	{r7, pc}

20001bbe <clearRectangle>:

void clearRectangle( int x, int y, int width, int height ){
20001bbe:	b580      	push	{r7, lr}
20001bc0:	b086      	sub	sp, #24
20001bc2:	af00      	add	r7, sp, #0
20001bc4:	60f8      	str	r0, [r7, #12]
20001bc6:	60b9      	str	r1, [r7, #8]
20001bc8:	607a      	str	r2, [r7, #4]
20001bca:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
20001bcc:	68fb      	ldr	r3, [r7, #12]
20001bce:	617b      	str	r3, [r7, #20]
20001bd0:	e014      	b.n	20001bfc <clearRectangle+0x3e>
		for (j = y; j < y + height; j++) {
20001bd2:	68bb      	ldr	r3, [r7, #8]
20001bd4:	613b      	str	r3, [r7, #16]
20001bd6:	e008      	b.n	20001bea <clearRectangle+0x2c>
			pixel(i, j, 0, 3);
20001bd8:	6939      	ldr	r1, [r7, #16]
20001bda:	6978      	ldr	r0, [r7, #20]
20001bdc:	2303      	movs	r3, #3
20001bde:	2200      	movs	r2, #0
20001be0:	f7ff fd3c 	bl	2000165c <pixel>
		for (j = y; j < y + height; j++) {
20001be4:	693b      	ldr	r3, [r7, #16]
20001be6:	3301      	adds	r3, #1
20001be8:	613b      	str	r3, [r7, #16]
20001bea:	68ba      	ldr	r2, [r7, #8]
20001bec:	683b      	ldr	r3, [r7, #0]
20001bee:	18d2      	adds	r2, r2, r3
20001bf0:	693b      	ldr	r3, [r7, #16]
20001bf2:	429a      	cmp	r2, r3
20001bf4:	dcf0      	bgt.n	20001bd8 <clearRectangle+0x1a>
	for (i = x; i < x + width; i++) {
20001bf6:	697b      	ldr	r3, [r7, #20]
20001bf8:	3301      	adds	r3, #1
20001bfa:	617b      	str	r3, [r7, #20]
20001bfc:	68fa      	ldr	r2, [r7, #12]
20001bfe:	687b      	ldr	r3, [r7, #4]
20001c00:	18d2      	adds	r2, r2, r3
20001c02:	697b      	ldr	r3, [r7, #20]
20001c04:	429a      	cmp	r2, r3
20001c06:	dce4      	bgt.n	20001bd2 <clearRectangle+0x14>
		}
	}
}
20001c08:	46c0      	nop			; (mov r8, r8)
20001c0a:	46bd      	mov	sp, r7
20001c0c:	b006      	add	sp, #24
20001c0e:	bd80      	pop	{r7, pc}

20001c10 <grayScaleTest>:


void grayScaleTest( void ) {
20001c10:	b590      	push	{r4, r7, lr}
20001c12:	b087      	sub	sp, #28
20001c14:	af00      	add	r7, sp, #0
	int x = 10;
20001c16:	230a      	movs	r3, #10
20001c18:	617b      	str	r3, [r7, #20]
	int y = 10;
20001c1a:	230a      	movs	r3, #10
20001c1c:	613b      	str	r3, [r7, #16]
	int width = 70;
20001c1e:	2346      	movs	r3, #70	; 0x46
20001c20:	60fb      	str	r3, [r7, #12]
	int height = 50;
20001c22:	2332      	movs	r3, #50	; 0x32
20001c24:	60bb      	str	r3, [r7, #8]
	
	int x2 = 50;
20001c26:	2332      	movs	r3, #50	; 0x32
20001c28:	607b      	str	r3, [r7, #4]
	
	fillRectangle(x, y, width, height);
20001c2a:	68bb      	ldr	r3, [r7, #8]
20001c2c:	68fa      	ldr	r2, [r7, #12]
20001c2e:	6939      	ldr	r1, [r7, #16]
20001c30:	6978      	ldr	r0, [r7, #20]
20001c32:	f7ff ff9b 	bl	20001b6c <fillRectangle>
	
	int i;
	int k = 5;
20001c36:	2305      	movs	r3, #5
20001c38:	603b      	str	r3, [r7, #0]
	while(1) {
		clear_backBuffer();
20001c3a:	f7ff fadf 	bl	200011fc <clear_backBuffer>
		fillRectangle(x, y, width, height);
20001c3e:	68bb      	ldr	r3, [r7, #8]
20001c40:	68fa      	ldr	r2, [r7, #12]
20001c42:	6939      	ldr	r1, [r7, #16]
20001c44:	6978      	ldr	r0, [r7, #20]
20001c46:	f7ff ff91 	bl	20001b6c <fillRectangle>
		clearRectangle(x+2+2, y+1, width-k, height-k); //outer square
20001c4a:	697b      	ldr	r3, [r7, #20]
20001c4c:	1d18      	adds	r0, r3, #4
20001c4e:	693b      	ldr	r3, [r7, #16]
20001c50:	1c59      	adds	r1, r3, #1
20001c52:	68fa      	ldr	r2, [r7, #12]
20001c54:	683b      	ldr	r3, [r7, #0]
20001c56:	1ad4      	subs	r4, r2, r3
20001c58:	68ba      	ldr	r2, [r7, #8]
20001c5a:	683b      	ldr	r3, [r7, #0]
20001c5c:	1ad3      	subs	r3, r2, r3
20001c5e:	0022      	movs	r2, r4
20001c60:	f7ff ffad 	bl	20001bbe <clearRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
20001c64:	697b      	ldr	r3, [r7, #20]
20001c66:	1c9a      	adds	r2, r3, #2
20001c68:	683b      	ldr	r3, [r7, #0]
20001c6a:	18d0      	adds	r0, r2, r3
20001c6c:	693b      	ldr	r3, [r7, #16]
20001c6e:	1c99      	adds	r1, r3, #2
20001c70:	68fb      	ldr	r3, [r7, #12]
20001c72:	1f1a      	subs	r2, r3, #4
20001c74:	683b      	ldr	r3, [r7, #0]
20001c76:	1ad4      	subs	r4, r2, r3
20001c78:	68bb      	ldr	r3, [r7, #8]
20001c7a:	1f1a      	subs	r2, r3, #4
20001c7c:	683b      	ldr	r3, [r7, #0]
20001c7e:	1ad3      	subs	r3, r2, r3
20001c80:	0022      	movs	r2, r4
20001c82:	f7ff ff9c 	bl	20001bbe <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
20001c86:	4b2d      	ldr	r3, [pc, #180]	; (20001d3c <grayScaleTest+0x12c>)
20001c88:	0018      	movs	r0, r3
20001c8a:	f7ff fe77 	bl	2000197c <graphic_draw_screen>
		clear_backBuffer();
20001c8e:	f7ff fab5 	bl	200011fc <clear_backBuffer>
		fillRectangle(x, y, width, height);
20001c92:	68bb      	ldr	r3, [r7, #8]
20001c94:	68fa      	ldr	r2, [r7, #12]
20001c96:	6939      	ldr	r1, [r7, #16]
20001c98:	6978      	ldr	r0, [r7, #20]
20001c9a:	f7ff ff67 	bl	20001b6c <fillRectangle>
		
		fillRectangle(x+2+2, y+1, width-k, height-k); //outer white square
20001c9e:	697b      	ldr	r3, [r7, #20]
20001ca0:	1d18      	adds	r0, r3, #4
20001ca2:	693b      	ldr	r3, [r7, #16]
20001ca4:	1c59      	adds	r1, r3, #1
20001ca6:	68fa      	ldr	r2, [r7, #12]
20001ca8:	683b      	ldr	r3, [r7, #0]
20001caa:	1ad4      	subs	r4, r2, r3
20001cac:	68ba      	ldr	r2, [r7, #8]
20001cae:	683b      	ldr	r3, [r7, #0]
20001cb0:	1ad3      	subs	r3, r2, r3
20001cb2:	0022      	movs	r2, r4
20001cb4:	f7ff ff5a 	bl	20001b6c <fillRectangle>
		fillRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
20001cb8:	697b      	ldr	r3, [r7, #20]
20001cba:	1c9a      	adds	r2, r3, #2
20001cbc:	683b      	ldr	r3, [r7, #0]
20001cbe:	18d0      	adds	r0, r2, r3
20001cc0:	693b      	ldr	r3, [r7, #16]
20001cc2:	1c99      	adds	r1, r3, #2
20001cc4:	68fb      	ldr	r3, [r7, #12]
20001cc6:	1f1a      	subs	r2, r3, #4
20001cc8:	683b      	ldr	r3, [r7, #0]
20001cca:	1ad4      	subs	r4, r2, r3
20001ccc:	68bb      	ldr	r3, [r7, #8]
20001cce:	1f1a      	subs	r2, r3, #4
20001cd0:	683b      	ldr	r3, [r7, #0]
20001cd2:	1ad3      	subs	r3, r2, r3
20001cd4:	0022      	movs	r2, r4
20001cd6:	f7ff ff49 	bl	20001b6c <fillRectangle>
		clearRectangle(x+12, y+5, 5, 5);
20001cda:	697b      	ldr	r3, [r7, #20]
20001cdc:	330c      	adds	r3, #12
20001cde:	0018      	movs	r0, r3
20001ce0:	693b      	ldr	r3, [r7, #16]
20001ce2:	1d59      	adds	r1, r3, #5
20001ce4:	2305      	movs	r3, #5
20001ce6:	2205      	movs	r2, #5
20001ce8:	f7ff ff69 	bl	20001bbe <clearRectangle>
		
		graphic_draw_screen(draw_buffer_black);
20001cec:	4b13      	ldr	r3, [pc, #76]	; (20001d3c <grayScaleTest+0x12c>)
20001cee:	0018      	movs	r0, r3
20001cf0:	f7ff fe44 	bl	2000197c <graphic_draw_screen>
		delay_milli(20);
20001cf4:	2014      	movs	r0, #20
20001cf6:	f7ff fa55 	bl	200011a4 <delay_milli>
		
		clear_backBuffer();
20001cfa:	f7ff fa7f 	bl	200011fc <clear_backBuffer>
		fillRectangle(x, y, width, height);
20001cfe:	68bb      	ldr	r3, [r7, #8]
20001d00:	68fa      	ldr	r2, [r7, #12]
20001d02:	6939      	ldr	r1, [r7, #16]
20001d04:	6978      	ldr	r0, [r7, #20]
20001d06:	f7ff ff31 	bl	20001b6c <fillRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
20001d0a:	697b      	ldr	r3, [r7, #20]
20001d0c:	1c9a      	adds	r2, r3, #2
20001d0e:	683b      	ldr	r3, [r7, #0]
20001d10:	18d0      	adds	r0, r2, r3
20001d12:	693b      	ldr	r3, [r7, #16]
20001d14:	1c99      	adds	r1, r3, #2
20001d16:	68fb      	ldr	r3, [r7, #12]
20001d18:	1f1a      	subs	r2, r3, #4
20001d1a:	683b      	ldr	r3, [r7, #0]
20001d1c:	1ad4      	subs	r4, r2, r3
20001d1e:	68bb      	ldr	r3, [r7, #8]
20001d20:	1f1a      	subs	r2, r3, #4
20001d22:	683b      	ldr	r3, [r7, #0]
20001d24:	1ad3      	subs	r3, r2, r3
20001d26:	0022      	movs	r2, r4
20001d28:	f7ff ff49 	bl	20001bbe <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
20001d2c:	4b03      	ldr	r3, [pc, #12]	; (20001d3c <grayScaleTest+0x12c>)
20001d2e:	0018      	movs	r0, r3
20001d30:	f7ff fe24 	bl	2000197c <graphic_draw_screen>
		
		delay_milli(20);
20001d34:	2014      	movs	r0, #20
20001d36:	f7ff fa35 	bl	200011a4 <delay_milli>
		clear_backBuffer();
20001d3a:	e77e      	b.n	20001c3a <grayScaleTest+0x2a>
20001d3c:	20003ca4 	andcs	r3, r0, r4, lsr #25

20001d40 <set_up_draw_buffers>:
	}
}

/** Should prepare the different drawing buffers, before the drawing of each frame.*/
void set_up_draw_buffers( void ) {
20001d40:	b580      	push	{r7, lr}
20001d42:	b082      	sub	sp, #8
20001d44:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 1024; i++) {
20001d46:	2300      	movs	r3, #0
20001d48:	607b      	str	r3, [r7, #4]
20001d4a:	e065      	b.n	20001e18 <set_up_draw_buffers+0xd8>
		draw_buffer_black[i] = backBuffer[i] & (~backBufferGray[i] & ~backBufferLight[i]); //Had to work a bit on these
20001d4c:	4a36      	ldr	r2, [pc, #216]	; (20001e28 <set_up_draw_buffers+0xe8>)
20001d4e:	687b      	ldr	r3, [r7, #4]
20001d50:	18d3      	adds	r3, r2, r3
20001d52:	781b      	ldrb	r3, [r3, #0]
20001d54:	b25b      	sxtb	r3, r3
20001d56:	4935      	ldr	r1, [pc, #212]	; (20001e2c <set_up_draw_buffers+0xec>)
20001d58:	687a      	ldr	r2, [r7, #4]
20001d5a:	188a      	adds	r2, r1, r2
20001d5c:	7811      	ldrb	r1, [r2, #0]
20001d5e:	4834      	ldr	r0, [pc, #208]	; (20001e30 <set_up_draw_buffers+0xf0>)
20001d60:	687a      	ldr	r2, [r7, #4]
20001d62:	1882      	adds	r2, r0, r2
20001d64:	7812      	ldrb	r2, [r2, #0]
20001d66:	430a      	orrs	r2, r1
20001d68:	b2d2      	uxtb	r2, r2
20001d6a:	b252      	sxtb	r2, r2
20001d6c:	43d2      	mvns	r2, r2
20001d6e:	b252      	sxtb	r2, r2
20001d70:	4013      	ands	r3, r2
20001d72:	b25b      	sxtb	r3, r3
20001d74:	b2d9      	uxtb	r1, r3
20001d76:	4a2f      	ldr	r2, [pc, #188]	; (20001e34 <set_up_draw_buffers+0xf4>)
20001d78:	687b      	ldr	r3, [r7, #4]
20001d7a:	18d3      	adds	r3, r2, r3
20001d7c:	1c0a      	adds	r2, r1, #0
20001d7e:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray[i] = (backBuffer[i] | backBufferGray[i]) & ~backBufferLight[i]; //in order to make it possible
20001d80:	4a29      	ldr	r2, [pc, #164]	; (20001e28 <set_up_draw_buffers+0xe8>)
20001d82:	687b      	ldr	r3, [r7, #4]
20001d84:	18d3      	adds	r3, r2, r3
20001d86:	781a      	ldrb	r2, [r3, #0]
20001d88:	4928      	ldr	r1, [pc, #160]	; (20001e2c <set_up_draw_buffers+0xec>)
20001d8a:	687b      	ldr	r3, [r7, #4]
20001d8c:	18cb      	adds	r3, r1, r3
20001d8e:	781b      	ldrb	r3, [r3, #0]
20001d90:	4313      	orrs	r3, r2
20001d92:	b2db      	uxtb	r3, r3
20001d94:	b25b      	sxtb	r3, r3
20001d96:	4926      	ldr	r1, [pc, #152]	; (20001e30 <set_up_draw_buffers+0xf0>)
20001d98:	687a      	ldr	r2, [r7, #4]
20001d9a:	188a      	adds	r2, r1, r2
20001d9c:	7812      	ldrb	r2, [r2, #0]
20001d9e:	b252      	sxtb	r2, r2
20001da0:	43d2      	mvns	r2, r2
20001da2:	b252      	sxtb	r2, r2
20001da4:	4013      	ands	r3, r2
20001da6:	b25b      	sxtb	r3, r3
20001da8:	b2d9      	uxtb	r1, r3
20001daa:	4a23      	ldr	r2, [pc, #140]	; (20001e38 <set_up_draw_buffers+0xf8>)
20001dac:	687b      	ldr	r3, [r7, #4]
20001dae:	18d3      	adds	r3, r2, r3
20001db0:	1c0a      	adds	r2, r1, #0
20001db2:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_light[i] = (backBuffer[i] | backBufferLight[i]) & ~backBufferGray[i]; //to show a lighter sprite
20001db4:	4a1c      	ldr	r2, [pc, #112]	; (20001e28 <set_up_draw_buffers+0xe8>)
20001db6:	687b      	ldr	r3, [r7, #4]
20001db8:	18d3      	adds	r3, r2, r3
20001dba:	781a      	ldrb	r2, [r3, #0]
20001dbc:	491c      	ldr	r1, [pc, #112]	; (20001e30 <set_up_draw_buffers+0xf0>)
20001dbe:	687b      	ldr	r3, [r7, #4]
20001dc0:	18cb      	adds	r3, r1, r3
20001dc2:	781b      	ldrb	r3, [r3, #0]
20001dc4:	4313      	orrs	r3, r2
20001dc6:	b2db      	uxtb	r3, r3
20001dc8:	b25b      	sxtb	r3, r3
20001dca:	4918      	ldr	r1, [pc, #96]	; (20001e2c <set_up_draw_buffers+0xec>)
20001dcc:	687a      	ldr	r2, [r7, #4]
20001dce:	188a      	adds	r2, r1, r2
20001dd0:	7812      	ldrb	r2, [r2, #0]
20001dd2:	b252      	sxtb	r2, r2
20001dd4:	43d2      	mvns	r2, r2
20001dd6:	b252      	sxtb	r2, r2
20001dd8:	4013      	ands	r3, r2
20001dda:	b25b      	sxtb	r3, r3
20001ddc:	b2d9      	uxtb	r1, r3
20001dde:	4a17      	ldr	r2, [pc, #92]	; (20001e3c <set_up_draw_buffers+0xfc>)
20001de0:	687b      	ldr	r3, [r7, #4]
20001de2:	18d3      	adds	r3, r2, r3
20001de4:	1c0a      	adds	r2, r1, #0
20001de6:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray_light[i] = backBuffer[i] | backBufferGray[i] | backBufferLight[i]; //on top of a darker one.
20001de8:	4a0f      	ldr	r2, [pc, #60]	; (20001e28 <set_up_draw_buffers+0xe8>)
20001dea:	687b      	ldr	r3, [r7, #4]
20001dec:	18d3      	adds	r3, r2, r3
20001dee:	781a      	ldrb	r2, [r3, #0]
20001df0:	490e      	ldr	r1, [pc, #56]	; (20001e2c <set_up_draw_buffers+0xec>)
20001df2:	687b      	ldr	r3, [r7, #4]
20001df4:	18cb      	adds	r3, r1, r3
20001df6:	781b      	ldrb	r3, [r3, #0]
20001df8:	4313      	orrs	r3, r2
20001dfa:	b2da      	uxtb	r2, r3
20001dfc:	490c      	ldr	r1, [pc, #48]	; (20001e30 <set_up_draw_buffers+0xf0>)
20001dfe:	687b      	ldr	r3, [r7, #4]
20001e00:	18cb      	adds	r3, r1, r3
20001e02:	781b      	ldrb	r3, [r3, #0]
20001e04:	4313      	orrs	r3, r2
20001e06:	b2d9      	uxtb	r1, r3
20001e08:	4a0d      	ldr	r2, [pc, #52]	; (20001e40 <set_up_draw_buffers+0x100>)
20001e0a:	687b      	ldr	r3, [r7, #4]
20001e0c:	18d3      	adds	r3, r2, r3
20001e0e:	1c0a      	adds	r2, r1, #0
20001e10:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 1024; i++) {
20001e12:	687b      	ldr	r3, [r7, #4]
20001e14:	3301      	adds	r3, #1
20001e16:	607b      	str	r3, [r7, #4]
20001e18:	687b      	ldr	r3, [r7, #4]
20001e1a:	4a0a      	ldr	r2, [pc, #40]	; (20001e44 <set_up_draw_buffers+0x104>)
20001e1c:	4293      	cmp	r3, r2
20001e1e:	dd95      	ble.n	20001d4c <set_up_draw_buffers+0xc>
	}
}
20001e20:	46c0      	nop			; (mov r8, r8)
20001e22:	46bd      	mov	sp, r7
20001e24:	b002      	add	sp, #8
20001e26:	bd80      	pop	{r7, pc}
20001e28:	200034a4 	andcs	r3, r0, r4, lsr #9
20001e2c:	20002ca4 	andcs	r2, r0, r4, lsr #25
20001e30:	200044a4 	andcs	r4, r0, r4, lsr #9
20001e34:	20003ca4 	andcs	r3, r0, r4, lsr #25
20001e38:	200030a4 	andcs	r3, r0, r4, lsr #1
20001e3c:	200038a4 	andcs	r3, r0, r4, lsr #17
20001e40:	200040a4 	andcs	r4, r0, r4, lsr #1
20001e44:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20001e48 <draw_game_object>:

void draw_game_object(GameObject *gObj) {
20001e48:	b580      	push	{r7, lr}
20001e4a:	b086      	sub	sp, #24
20001e4c:	af02      	add	r7, sp, #8
20001e4e:	6078      	str	r0, [r7, #4]
	int frame = gObj->current_frame;
20001e50:	687b      	ldr	r3, [r7, #4]
20001e52:	695b      	ldr	r3, [r3, #20]
20001e54:	60fb      	str	r3, [r7, #12]
	draw_sprite(gObj->images[frame].blackImage, gObj->xPos, gObj->yPos, 1, 3);
20001e56:	687b      	ldr	r3, [r7, #4]
20001e58:	6819      	ldr	r1, [r3, #0]
20001e5a:	68fa      	ldr	r2, [r7, #12]
20001e5c:	0013      	movs	r3, r2
20001e5e:	005b      	lsls	r3, r3, #1
20001e60:	189b      	adds	r3, r3, r2
20001e62:	009b      	lsls	r3, r3, #2
20001e64:	18cb      	adds	r3, r1, r3
20001e66:	6818      	ldr	r0, [r3, #0]
20001e68:	687b      	ldr	r3, [r7, #4]
20001e6a:	6859      	ldr	r1, [r3, #4]
20001e6c:	687b      	ldr	r3, [r7, #4]
20001e6e:	689a      	ldr	r2, [r3, #8]
20001e70:	2303      	movs	r3, #3
20001e72:	9300      	str	r3, [sp, #0]
20001e74:	2301      	movs	r3, #1
20001e76:	f7ff fdec 	bl	20001a52 <draw_sprite>
	draw_sprite(gObj->images[frame].grayImage, gObj->xPos, gObj->yPos, 1, 2);
20001e7a:	687b      	ldr	r3, [r7, #4]
20001e7c:	6819      	ldr	r1, [r3, #0]
20001e7e:	68fa      	ldr	r2, [r7, #12]
20001e80:	0013      	movs	r3, r2
20001e82:	005b      	lsls	r3, r3, #1
20001e84:	189b      	adds	r3, r3, r2
20001e86:	009b      	lsls	r3, r3, #2
20001e88:	18cb      	adds	r3, r1, r3
20001e8a:	6858      	ldr	r0, [r3, #4]
20001e8c:	687b      	ldr	r3, [r7, #4]
20001e8e:	6859      	ldr	r1, [r3, #4]
20001e90:	687b      	ldr	r3, [r7, #4]
20001e92:	689a      	ldr	r2, [r3, #8]
20001e94:	2302      	movs	r3, #2
20001e96:	9300      	str	r3, [sp, #0]
20001e98:	2301      	movs	r3, #1
20001e9a:	f7ff fdda 	bl	20001a52 <draw_sprite>
	draw_sprite(gObj->images[frame].lightImage, gObj->xPos, gObj->yPos, 1, 1);
20001e9e:	687b      	ldr	r3, [r7, #4]
20001ea0:	6819      	ldr	r1, [r3, #0]
20001ea2:	68fa      	ldr	r2, [r7, #12]
20001ea4:	0013      	movs	r3, r2
20001ea6:	005b      	lsls	r3, r3, #1
20001ea8:	189b      	adds	r3, r3, r2
20001eaa:	009b      	lsls	r3, r3, #2
20001eac:	18cb      	adds	r3, r1, r3
20001eae:	6898      	ldr	r0, [r3, #8]
20001eb0:	687b      	ldr	r3, [r7, #4]
20001eb2:	6859      	ldr	r1, [r3, #4]
20001eb4:	687b      	ldr	r3, [r7, #4]
20001eb6:	689a      	ldr	r2, [r3, #8]
20001eb8:	2301      	movs	r3, #1
20001eba:	9300      	str	r3, [sp, #0]
20001ebc:	2301      	movs	r3, #1
20001ebe:	f7ff fdc8 	bl	20001a52 <draw_sprite>
}
20001ec2:	46c0      	nop			; (mov r8, r8)
20001ec4:	46bd      	mov	sp, r7
20001ec6:	b004      	add	sp, #16
20001ec8:	bd80      	pop	{r7, pc}

20001eca <show_frame>:


void show_frame(int frame_length) {
20001eca:	b580      	push	{r7, lr}
20001ecc:	b082      	sub	sp, #8
20001ece:	af00      	add	r7, sp, #0
20001ed0:	6078      	str	r0, [r7, #4]
	set_up_draw_buffers();
20001ed2:	f7ff ff35 	bl	20001d40 <set_up_draw_buffers>
	
	while(frame_length--) {
20001ed6:	e01b      	b.n	20001f10 <show_frame+0x46>
		graphic_draw_screen(draw_buffer_black_gray_light);
20001ed8:	4b13      	ldr	r3, [pc, #76]	; (20001f28 <show_frame+0x5e>)
20001eda:	0018      	movs	r0, r3
20001edc:	f7ff fd4e 	bl	2000197c <graphic_draw_screen>
		delay_milli(1);
20001ee0:	2001      	movs	r0, #1
20001ee2:	f7ff f95f 	bl	200011a4 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
20001ee6:	4b11      	ldr	r3, [pc, #68]	; (20001f2c <show_frame+0x62>)
20001ee8:	0018      	movs	r0, r3
20001eea:	f7ff fd47 	bl	2000197c <graphic_draw_screen>
		delay_milli(1);
20001eee:	2001      	movs	r0, #1
20001ef0:	f7ff f958 	bl	200011a4 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black_gray);
20001ef4:	4b0e      	ldr	r3, [pc, #56]	; (20001f30 <show_frame+0x66>)
20001ef6:	0018      	movs	r0, r3
20001ef8:	f7ff fd40 	bl	2000197c <graphic_draw_screen>
		delay_milli(1);
20001efc:	2001      	movs	r0, #1
20001efe:	f7ff f951 	bl	200011a4 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
20001f02:	4b0a      	ldr	r3, [pc, #40]	; (20001f2c <show_frame+0x62>)
20001f04:	0018      	movs	r0, r3
20001f06:	f7ff fd39 	bl	2000197c <graphic_draw_screen>
		delay_milli(1);
20001f0a:	2001      	movs	r0, #1
20001f0c:	f7ff f94a 	bl	200011a4 <delay_milli>
	while(frame_length--) {
20001f10:	687b      	ldr	r3, [r7, #4]
20001f12:	1e5a      	subs	r2, r3, #1
20001f14:	607a      	str	r2, [r7, #4]
20001f16:	2b00      	cmp	r3, #0
20001f18:	d1de      	bne.n	20001ed8 <show_frame+0xe>
	}
	
	clear_all_backBuffers();	//Maybe we could be more effective by only clearing the necessary stuff,
20001f1a:	f7ff f97b 	bl	20001214 <clear_all_backBuffers>
								//but let's keep it like this if it works.
20001f1e:	46c0      	nop			; (mov r8, r8)
20001f20:	46bd      	mov	sp, r7
20001f22:	b002      	add	sp, #8
20001f24:	bd80      	pop	{r7, pc}
20001f26:	46c0      	nop			; (mov r8, r8)
20001f28:	200040a4 	andcs	r4, r0, r4, lsr #1
20001f2c:	20003ca4 	andcs	r3, r0, r4, lsr #25
20001f30:	200030a4 	andcs	r3, r0, r4, lsr #1

20001f34 <load_image>:
#include "image.h"

void load_image( Image *image, sprite *blackImage, sprite *grayImage, sprite *lightImage ) {
20001f34:	b580      	push	{r7, lr}
20001f36:	b084      	sub	sp, #16
20001f38:	af00      	add	r7, sp, #0
20001f3a:	60f8      	str	r0, [r7, #12]
20001f3c:	60b9      	str	r1, [r7, #8]
20001f3e:	607a      	str	r2, [r7, #4]
20001f40:	603b      	str	r3, [r7, #0]
	image->blackImage = blackImage;
20001f42:	68fb      	ldr	r3, [r7, #12]
20001f44:	68ba      	ldr	r2, [r7, #8]
20001f46:	601a      	str	r2, [r3, #0]
	image->grayImage = grayImage;
20001f48:	68fb      	ldr	r3, [r7, #12]
20001f4a:	687a      	ldr	r2, [r7, #4]
20001f4c:	605a      	str	r2, [r3, #4]
	image->lightImage = lightImage;
20001f4e:	68fb      	ldr	r3, [r7, #12]
20001f50:	683a      	ldr	r2, [r7, #0]
20001f52:	609a      	str	r2, [r3, #8]
}
20001f54:	46c0      	nop			; (mov r8, r8)
20001f56:	46bd      	mov	sp, r7
20001f58:	b004      	add	sp, #16
20001f5a:	bd80      	pop	{r7, pc}

20001f5c <load_sprite>:
#include "sprite.h"

void load_sprite(sprite* s, unsigned char* data, int width, int height)
{
20001f5c:	b580      	push	{r7, lr}
20001f5e:	b084      	sub	sp, #16
20001f60:	af00      	add	r7, sp, #0
20001f62:	60f8      	str	r0, [r7, #12]
20001f64:	60b9      	str	r1, [r7, #8]
20001f66:	607a      	str	r2, [r7, #4]
20001f68:	603b      	str	r3, [r7, #0]
	s->width = width;
20001f6a:	687a      	ldr	r2, [r7, #4]
20001f6c:	68fb      	ldr	r3, [r7, #12]
20001f6e:	601a      	str	r2, [r3, #0]
	s->height = height;
20001f70:	683a      	ldr	r2, [r7, #0]
20001f72:	68fb      	ldr	r3, [r7, #12]
20001f74:	605a      	str	r2, [r3, #4]
	s->data = data;
20001f76:	68fb      	ldr	r3, [r7, #12]
20001f78:	68ba      	ldr	r2, [r7, #8]
20001f7a:	609a      	str	r2, [r3, #8]
}
20001f7c:	46c0      	nop			; (mov r8, r8)
20001f7e:	46bd      	mov	sp, r7
20001f80:	b004      	add	sp, #16
20001f82:	bd80      	pop	{r7, pc}

20001f84 <set_up_DIL>:
#include "gpio.h"

/** Sets up PE0-7 as inports and PE8-15 as outports. */
void set_up_DIL( void ) {
20001f84:	b580      	push	{r7, lr}
20001f86:	af00      	add	r7, sp, #0
	GPIO_D.Moder = 0x55550000;
20001f88:	4b02      	ldr	r3, [pc, #8]	; (20001f94 <set_up_DIL+0x10>)
20001f8a:	4a03      	ldr	r2, [pc, #12]	; (20001f98 <set_up_DIL+0x14>)
20001f8c:	601a      	str	r2, [r3, #0]
}
20001f8e:	46c0      	nop			; (mov r8, r8)
20001f90:	46bd      	mov	sp, r7
20001f92:	bd80      	pop	{r7, pc}
20001f94:	40020c00 	andmi	r0, r2, r0, lsl #24
20001f98:	55550000 	ldrbpl	r0, [r5, #-0]

20001f9c <read_DIL>:

char read_DIL( void ) {
20001f9c:	b580      	push	{r7, lr}
20001f9e:	af00      	add	r7, sp, #0
	return GPIO_D.idrLow;
20001fa0:	4b02      	ldr	r3, [pc, #8]	; (20001fac <read_DIL+0x10>)
20001fa2:	7c1b      	ldrb	r3, [r3, #16]
20001fa4:	b2db      	uxtb	r3, r3
}
20001fa6:	0018      	movs	r0, r3
20001fa8:	46bd      	mov	sp, r7
20001faa:	bd80      	pop	{r7, pc}
20001fac:	40020c00 	andmi	r0, r2, r0, lsl #24

20001fb0 <read_DIL_single>:


int read_DIL_single( int bit ) {
20001fb0:	b590      	push	{r4, r7, lr}
20001fb2:	b085      	sub	sp, #20
20001fb4:	af00      	add	r7, sp, #0
20001fb6:	6078      	str	r0, [r7, #4]
	char DIL = read_DIL();
20001fb8:	230f      	movs	r3, #15
20001fba:	18fc      	adds	r4, r7, r3
20001fbc:	f7ff ffee 	bl	20001f9c <read_DIL>
20001fc0:	0003      	movs	r3, r0
20001fc2:	7023      	strb	r3, [r4, #0]
	if (DIL & (1<<bit)) {
20001fc4:	230f      	movs	r3, #15
20001fc6:	18fb      	adds	r3, r7, r3
20001fc8:	781a      	ldrb	r2, [r3, #0]
20001fca:	687b      	ldr	r3, [r7, #4]
20001fcc:	411a      	asrs	r2, r3
20001fce:	0013      	movs	r3, r2
20001fd0:	2201      	movs	r2, #1
20001fd2:	4013      	ands	r3, r2
20001fd4:	d001      	beq.n	20001fda <read_DIL_single+0x2a>
		return 0;
20001fd6:	2300      	movs	r3, #0
20001fd8:	e000      	b.n	20001fdc <read_DIL_single+0x2c>
	} else {
		return 1;
20001fda:	2301      	movs	r3, #1
	}
20001fdc:	0018      	movs	r0, r3
20001fde:	46bd      	mov	sp, r7
20001fe0:	b005      	add	sp, #20
20001fe2:	bd90      	pop	{r4, r7, pc}

20001fe4 <ascii_ctrl_bit_set>:
void ascii_write_data(unsigned char data);
unsigned char ascii_read_status(void);
unsigned char ascii_read_data(void);


void ascii_ctrl_bit_set(unsigned char x){
20001fe4:	b580      	push	{r7, lr}
20001fe6:	b084      	sub	sp, #16
20001fe8:	af00      	add	r7, sp, #0
20001fea:	0002      	movs	r2, r0
20001fec:	1dfb      	adds	r3, r7, #7
20001fee:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och ettstÃƒÂ¤ll de bitar som ÃƒÂ¤r 1 i x
	unsigned char c;
	c = *portOdrLow;
20001ff0:	4a0c      	ldr	r2, [pc, #48]	; (20002024 <ascii_ctrl_bit_set+0x40>)
20001ff2:	230f      	movs	r3, #15
20001ff4:	18fb      	adds	r3, r7, r3
20001ff6:	7812      	ldrb	r2, [r2, #0]
20001ff8:	701a      	strb	r2, [r3, #0]
	c |= (B_SELECT | x);
20001ffa:	1dfa      	adds	r2, r7, #7
20001ffc:	230f      	movs	r3, #15
20001ffe:	18fb      	adds	r3, r7, r3
20002000:	7812      	ldrb	r2, [r2, #0]
20002002:	781b      	ldrb	r3, [r3, #0]
20002004:	4313      	orrs	r3, r2
20002006:	b2da      	uxtb	r2, r3
20002008:	230f      	movs	r3, #15
2000200a:	18fb      	adds	r3, r7, r3
2000200c:	2104      	movs	r1, #4
2000200e:	430a      	orrs	r2, r1
20002010:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20002012:	4a04      	ldr	r2, [pc, #16]	; (20002024 <ascii_ctrl_bit_set+0x40>)
20002014:	230f      	movs	r3, #15
20002016:	18fb      	adds	r3, r7, r3
20002018:	781b      	ldrb	r3, [r3, #0]
2000201a:	7013      	strb	r3, [r2, #0]
}
2000201c:	46c0      	nop			; (mov r8, r8)
2000201e:	46bd      	mov	sp, r7
20002020:	b004      	add	sp, #16
20002022:	bd80      	pop	{r7, pc}
20002024:	40021014 	andmi	r1, r2, r4, lsl r0

20002028 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
20002028:	b580      	push	{r7, lr}
2000202a:	b084      	sub	sp, #16
2000202c:	af00      	add	r7, sp, #0
2000202e:	0002      	movs	r2, r0
20002030:	1dfb      	adds	r3, r7, #7
20002032:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och nollstÃ¤ll de bitar som Ã¤r 1 i x
	unsigned char c;
	c = *portOdrLow;
20002034:	4a0f      	ldr	r2, [pc, #60]	; (20002074 <ascii_ctrl_bit_clear+0x4c>)
20002036:	230f      	movs	r3, #15
20002038:	18fb      	adds	r3, r7, r3
2000203a:	7812      	ldrb	r2, [r2, #0]
2000203c:	701a      	strb	r2, [r3, #0]
	c = (B_SELECT | c & ~x);
2000203e:	1dfb      	adds	r3, r7, #7
20002040:	781b      	ldrb	r3, [r3, #0]
20002042:	b25b      	sxtb	r3, r3
20002044:	43db      	mvns	r3, r3
20002046:	b25b      	sxtb	r3, r3
20002048:	220f      	movs	r2, #15
2000204a:	18ba      	adds	r2, r7, r2
2000204c:	7812      	ldrb	r2, [r2, #0]
2000204e:	b252      	sxtb	r2, r2
20002050:	4013      	ands	r3, r2
20002052:	b25b      	sxtb	r3, r3
20002054:	2204      	movs	r2, #4
20002056:	4313      	orrs	r3, r2
20002058:	b25a      	sxtb	r2, r3
2000205a:	230f      	movs	r3, #15
2000205c:	18fb      	adds	r3, r7, r3
2000205e:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20002060:	4a04      	ldr	r2, [pc, #16]	; (20002074 <ascii_ctrl_bit_clear+0x4c>)
20002062:	230f      	movs	r3, #15
20002064:	18fb      	adds	r3, r7, r3
20002066:	781b      	ldrb	r3, [r3, #0]
20002068:	7013      	strb	r3, [r2, #0]
}
2000206a:	46c0      	nop			; (mov r8, r8)
2000206c:	46bd      	mov	sp, r7
2000206e:	b004      	add	sp, #16
20002070:	bd80      	pop	{r7, pc}
20002072:	46c0      	nop			; (mov r8, r8)
20002074:	40021014 	andmi	r1, r2, r4, lsl r0

20002078 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20002078:	b580      	push	{r7, lr}
2000207a:	b082      	sub	sp, #8
2000207c:	af00      	add	r7, sp, #0
2000207e:	0002      	movs	r2, r0
20002080:	1dfb      	adds	r3, r7, #7
20002082:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20002084:	2001      	movs	r0, #1
20002086:	f7ff ffcf 	bl	20002028 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
2000208a:	2002      	movs	r0, #2
2000208c:	f7ff ffcc 	bl	20002028 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20002090:	1dfb      	adds	r3, r7, #7
20002092:	781b      	ldrb	r3, [r3, #0]
20002094:	0018      	movs	r0, r3
20002096:	f000 f86d 	bl	20002174 <ascii_write_controller>
}
2000209a:	46c0      	nop			; (mov r8, r8)
2000209c:	46bd      	mov	sp, r7
2000209e:	b002      	add	sp, #8
200020a0:	bd80      	pop	{r7, pc}

200020a2 <ascii_write_data>:

void ascii_write_data(unsigned char data){
200020a2:	b580      	push	{r7, lr}
200020a4:	b082      	sub	sp, #8
200020a6:	af00      	add	r7, sp, #0
200020a8:	0002      	movs	r2, r0
200020aa:	1dfb      	adds	r3, r7, #7
200020ac:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
200020ae:	2001      	movs	r0, #1
200020b0:	f7ff ff98 	bl	20001fe4 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
200020b4:	2002      	movs	r0, #2
200020b6:	f7ff ffb7 	bl	20002028 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
200020ba:	1dfb      	adds	r3, r7, #7
200020bc:	781b      	ldrb	r3, [r3, #0]
200020be:	0018      	movs	r0, r3
200020c0:	f000 f858 	bl	20002174 <ascii_write_controller>
}
200020c4:	46c0      	nop			; (mov r8, r8)
200020c6:	46bd      	mov	sp, r7
200020c8:	b002      	add	sp, #8
200020ca:	bd80      	pop	{r7, pc}

200020cc <ascii_read_status>:

unsigned char ascii_read_status(void){
200020cc:	b590      	push	{r4, r7, lr}
200020ce:	b083      	sub	sp, #12
200020d0:	af00      	add	r7, sp, #0
	//sÃƒÂ¤tt Port E bit15-8 som ingÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
200020d2:	4b11      	ldr	r3, [pc, #68]	; (20002118 <ascii_read_status+0x4c>)
200020d4:	4a10      	ldr	r2, [pc, #64]	; (20002118 <ascii_read_status+0x4c>)
200020d6:	6812      	ldr	r2, [r2, #0]
200020d8:	0412      	lsls	r2, r2, #16
200020da:	0c12      	lsrs	r2, r2, #16
200020dc:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
200020de:	2001      	movs	r0, #1
200020e0:	f7ff ffa2 	bl	20002028 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
200020e4:	2002      	movs	r0, #2
200020e6:	f7ff ff7d 	bl	20001fe4 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
200020ea:	1dfc      	adds	r4, r7, #7
200020ec:	f000 f85a 	bl	200021a4 <ascii_read_controller>
200020f0:	0003      	movs	r3, r0
200020f2:	7023      	strb	r3, [r4, #0]
	//sÃƒÂ¤tt Port E bit15-8 som utgÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
200020f4:	4b08      	ldr	r3, [pc, #32]	; (20002118 <ascii_read_status+0x4c>)
200020f6:	4a08      	ldr	r2, [pc, #32]	; (20002118 <ascii_read_status+0x4c>)
200020f8:	6812      	ldr	r2, [r2, #0]
200020fa:	0412      	lsls	r2, r2, #16
200020fc:	0c12      	lsrs	r2, r2, #16
200020fe:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
20002100:	4b05      	ldr	r3, [pc, #20]	; (20002118 <ascii_read_status+0x4c>)
20002102:	4a05      	ldr	r2, [pc, #20]	; (20002118 <ascii_read_status+0x4c>)
20002104:	6812      	ldr	r2, [r2, #0]
20002106:	4905      	ldr	r1, [pc, #20]	; (2000211c <ascii_read_status+0x50>)
20002108:	430a      	orrs	r2, r1
2000210a:	601a      	str	r2, [r3, #0]
	return rv;
2000210c:	1dfb      	adds	r3, r7, #7
2000210e:	781b      	ldrb	r3, [r3, #0]
}
20002110:	0018      	movs	r0, r3
20002112:	46bd      	mov	sp, r7
20002114:	b003      	add	sp, #12
20002116:	bd90      	pop	{r4, r7, pc}
20002118:	40021000 	andmi	r1, r2, r0
2000211c:	55550000 	ldrbpl	r0, [r5, #-0]

20002120 <ascii_read_data>:

unsigned char ascii_read_data(void){
20002120:	b590      	push	{r4, r7, lr}
20002122:	b083      	sub	sp, #12
20002124:	af00      	add	r7, sp, #0
	//sÃƒÂ¤tt Port E bit15-8 som ingÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20002126:	4b11      	ldr	r3, [pc, #68]	; (2000216c <ascii_read_data+0x4c>)
20002128:	4a10      	ldr	r2, [pc, #64]	; (2000216c <ascii_read_data+0x4c>)
2000212a:	6812      	ldr	r2, [r2, #0]
2000212c:	0412      	lsls	r2, r2, #16
2000212e:	0c12      	lsrs	r2, r2, #16
20002130:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20002132:	2001      	movs	r0, #1
20002134:	f7ff ff56 	bl	20001fe4 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20002138:	2002      	movs	r0, #2
2000213a:	f7ff ff53 	bl	20001fe4 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
2000213e:	1dfc      	adds	r4, r7, #7
20002140:	f000 f830 	bl	200021a4 <ascii_read_controller>
20002144:	0003      	movs	r3, r0
20002146:	7023      	strb	r3, [r4, #0]
	//sÃƒÂ¤tt Port E bit15-8 som utgÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20002148:	4b08      	ldr	r3, [pc, #32]	; (2000216c <ascii_read_data+0x4c>)
2000214a:	4a08      	ldr	r2, [pc, #32]	; (2000216c <ascii_read_data+0x4c>)
2000214c:	6812      	ldr	r2, [r2, #0]
2000214e:	0412      	lsls	r2, r2, #16
20002150:	0c12      	lsrs	r2, r2, #16
20002152:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
20002154:	4b05      	ldr	r3, [pc, #20]	; (2000216c <ascii_read_data+0x4c>)
20002156:	4a05      	ldr	r2, [pc, #20]	; (2000216c <ascii_read_data+0x4c>)
20002158:	6812      	ldr	r2, [r2, #0]
2000215a:	4905      	ldr	r1, [pc, #20]	; (20002170 <ascii_read_data+0x50>)
2000215c:	430a      	orrs	r2, r1
2000215e:	601a      	str	r2, [r3, #0]
	return rv;
20002160:	1dfb      	adds	r3, r7, #7
20002162:	781b      	ldrb	r3, [r3, #0]
}
20002164:	0018      	movs	r0, r3
20002166:	46bd      	mov	sp, r7
20002168:	b003      	add	sp, #12
2000216a:	bd90      	pop	{r4, r7, pc}
2000216c:	40021000 	andmi	r1, r2, r0
20002170:	55550000 	ldrbpl	r0, [r5, #-0]

20002174 <ascii_write_controller>:

void ascii_write_controller(unsigned char c){
20002174:	b580      	push	{r7, lr}
20002176:	b082      	sub	sp, #8
20002178:	af00      	add	r7, sp, #0
2000217a:	0002      	movs	r2, r0
2000217c:	1dfb      	adds	r3, r7, #7
2000217e:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
20002180:	2040      	movs	r0, #64	; 0x40
20002182:	f7ff ff2f 	bl	20001fe4 <ascii_ctrl_bit_set>
	*portOdrHigh = c;
20002186:	4a06      	ldr	r2, [pc, #24]	; (200021a0 <ascii_write_controller+0x2c>)
20002188:	1dfb      	adds	r3, r7, #7
2000218a:	781b      	ldrb	r3, [r3, #0]
2000218c:	7013      	strb	r3, [r2, #0]
	delay_250ns();
2000218e:	f7fe ffaf 	bl	200010f0 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
20002192:	2040      	movs	r0, #64	; 0x40
20002194:	f7ff ff48 	bl	20002028 <ascii_ctrl_bit_clear>
}
20002198:	46c0      	nop			; (mov r8, r8)
2000219a:	46bd      	mov	sp, r7
2000219c:	b002      	add	sp, #8
2000219e:	bd80      	pop	{r7, pc}
200021a0:	40021015 	andmi	r1, r2, r5, lsl r0

200021a4 <ascii_read_controller>:

unsigned char ascii_read_controller(void){
200021a4:	b580      	push	{r7, lr}
200021a6:	b082      	sub	sp, #8
200021a8:	af00      	add	r7, sp, #0
	unsigned char c;
	ascii_ctrl_bit_set(B_E);
200021aa:	2040      	movs	r0, #64	; 0x40
200021ac:	f7ff ff1a 	bl	20001fe4 <ascii_ctrl_bit_set>
	delay_250ns();
200021b0:	f7fe ff9e 	bl	200010f0 <delay_250ns>
	delay_250ns();
200021b4:	f7fe ff9c 	bl	200010f0 <delay_250ns>
	c = *portIdrHigh;
200021b8:	4a06      	ldr	r2, [pc, #24]	; (200021d4 <ascii_read_controller+0x30>)
200021ba:	1dfb      	adds	r3, r7, #7
200021bc:	7812      	ldrb	r2, [r2, #0]
200021be:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
200021c0:	2040      	movs	r0, #64	; 0x40
200021c2:	f7ff ff31 	bl	20002028 <ascii_ctrl_bit_clear>
	return c;
200021c6:	1dfb      	adds	r3, r7, #7
200021c8:	781b      	ldrb	r3, [r3, #0]
}
200021ca:	0018      	movs	r0, r3
200021cc:	46bd      	mov	sp, r7
200021ce:	b002      	add	sp, #8
200021d0:	bd80      	pop	{r7, pc}
200021d2:	46c0      	nop			; (mov r8, r8)
200021d4:	40021011 	andmi	r1, r2, r1, lsl r0

200021d8 <ascii_write_char>:

void ascii_write_char(unsigned char c){
200021d8:	b580      	push	{r7, lr}
200021da:	b082      	sub	sp, #8
200021dc:	af00      	add	r7, sp, #0
200021de:	0002      	movs	r2, r0
200021e0:	1dfb      	adds	r3, r7, #7
200021e2:	701a      	strb	r2, [r3, #0]
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
200021e4:	46c0      	nop			; (mov r8, r8)
200021e6:	f7ff ff71 	bl	200020cc <ascii_read_status>
200021ea:	0003      	movs	r3, r0
200021ec:	001a      	movs	r2, r3
200021ee:	2380      	movs	r3, #128	; 0x80
200021f0:	4013      	ands	r3, r2
200021f2:	2b80      	cmp	r3, #128	; 0x80
200021f4:	d0f7      	beq.n	200021e6 <ascii_write_char+0xe>
		delay_micro(8); //latenstid
200021f6:	2008      	movs	r0, #8
200021f8:	f7fe ffbe 	bl	20001178 <delay_micro>
		ascii_write_data(c);
200021fc:	1dfb      	adds	r3, r7, #7
200021fe:	781b      	ldrb	r3, [r3, #0]
20002200:	0018      	movs	r0, r3
20002202:	f7ff ff4e 	bl	200020a2 <ascii_write_data>
		delay_micro(50); //istÃƒÂ¤llet fÃƒÂ¶r 43us
20002206:	2032      	movs	r0, #50	; 0x32
20002208:	f7fe ffb6 	bl	20001178 <delay_micro>
}
2000220c:	46c0      	nop			; (mov r8, r8)
2000220e:	46bd      	mov	sp, r7
20002210:	b002      	add	sp, #8
20002212:	bd80      	pop	{r7, pc}

20002214 <ascii_goToXY>:

void ascii_goToXY(unsigned char row, unsigned char column){
20002214:	b580      	push	{r7, lr}
20002216:	b084      	sub	sp, #16
20002218:	af00      	add	r7, sp, #0
2000221a:	0002      	movs	r2, r0
2000221c:	1dfb      	adds	r3, r7, #7
2000221e:	701a      	strb	r2, [r3, #0]
20002220:	1dbb      	adds	r3, r7, #6
20002222:	1c0a      	adds	r2, r1, #0
20002224:	701a      	strb	r2, [r3, #0]
	unsigned char address = row-1;
20002226:	230f      	movs	r3, #15
20002228:	18fb      	adds	r3, r7, r3
2000222a:	1dfa      	adds	r2, r7, #7
2000222c:	7812      	ldrb	r2, [r2, #0]
2000222e:	3a01      	subs	r2, #1
20002230:	701a      	strb	r2, [r3, #0]
	if(column == 2){
20002232:	1dbb      	adds	r3, r7, #6
20002234:	781b      	ldrb	r3, [r3, #0]
20002236:	2b02      	cmp	r3, #2
20002238:	d106      	bne.n	20002248 <ascii_goToXY+0x34>
		address += 0x40;
2000223a:	230f      	movs	r3, #15
2000223c:	18fb      	adds	r3, r7, r3
2000223e:	220f      	movs	r2, #15
20002240:	18ba      	adds	r2, r7, r2
20002242:	7812      	ldrb	r2, [r2, #0]
20002244:	3240      	adds	r2, #64	; 0x40
20002246:	701a      	strb	r2, [r3, #0]
	}
	ascii_write_cmd(0x80 | address);
20002248:	230f      	movs	r3, #15
2000224a:	18fb      	adds	r3, r7, r3
2000224c:	781b      	ldrb	r3, [r3, #0]
2000224e:	2280      	movs	r2, #128	; 0x80
20002250:	4252      	negs	r2, r2
20002252:	4313      	orrs	r3, r2
20002254:	b2db      	uxtb	r3, r3
20002256:	0018      	movs	r0, r3
20002258:	f7ff ff0e 	bl	20002078 <ascii_write_cmd>
}
2000225c:	46c0      	nop			; (mov r8, r8)
2000225e:	46bd      	mov	sp, r7
20002260:	b004      	add	sp, #16
20002262:	bd80      	pop	{r7, pc}

20002264 <ascii_init>:

void ascii_init(void){
20002264:	b580      	push	{r7, lr}
20002266:	af00      	add	r7, sp, #0
	//initiera displayen:
		while((ascii_read_status() & 0x80) == 0x80){} //VÃ¤nta tills displayed Ã¤r redo
20002268:	46c0      	nop			; (mov r8, r8)
2000226a:	f7ff ff2f 	bl	200020cc <ascii_read_status>
2000226e:	0003      	movs	r3, r0
20002270:	001a      	movs	r2, r3
20002272:	2380      	movs	r3, #128	; 0x80
20002274:	4013      	ands	r3, r2
20002276:	2b80      	cmp	r3, #128	; 0x80
20002278:	d0f7      	beq.n	2000226a <ascii_init+0x6>
		delay_micro(20); //latenstid 
2000227a:	2014      	movs	r0, #20
2000227c:	f7fe ff7c 	bl	20001178 <delay_micro>
		ascii_write_cmd(0x38); //Function set (39us), 000011NFXX, N = antal rader = 2, F = -->0=5x8<--, 1=5x11
20002280:	2038      	movs	r0, #56	; 0x38
20002282:	f7ff fef9 	bl	20002078 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20002286:	2064      	movs	r0, #100	; 0x64
20002288:	f7fe ff76 	bl	20001178 <delay_micro>
		
	// clear display
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
2000228c:	46c0      	nop			; (mov r8, r8)
2000228e:	f7ff ff1d 	bl	200020cc <ascii_read_status>
20002292:	0003      	movs	r3, r0
20002294:	001a      	movs	r2, r3
20002296:	2380      	movs	r3, #128	; 0x80
20002298:	4013      	ands	r3, r2
2000229a:	2b80      	cmp	r3, #128	; 0x80
2000229c:	d0f7      	beq.n	2000228e <ascii_init+0x2a>
		delay_micro(20); //latenstid
2000229e:	2014      	movs	r0, #20
200022a0:	f7fe ff6a 	bl	20001178 <delay_micro>
		ascii_write_cmd(0x01); 
200022a4:	2001      	movs	r0, #1
200022a6:	f7ff fee7 	bl	20002078 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
200022aa:	2064      	movs	r0, #100	; 0x64
200022ac:	f7fe ff64 	bl	20001178 <delay_micro>

	//display control:
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
200022b0:	46c0      	nop			; (mov r8, r8)
200022b2:	f7ff ff0b 	bl	200020cc <ascii_read_status>
200022b6:	0003      	movs	r3, r0
200022b8:	001a      	movs	r2, r3
200022ba:	2380      	movs	r3, #128	; 0x80
200022bc:	4013      	ands	r3, r2
200022be:	2b80      	cmp	r3, #128	; 0x80
200022c0:	d0f7      	beq.n	200022b2 <ascii_init+0x4e>
		delay_micro(20); //latenstid
200022c2:	2014      	movs	r0, #20
200022c4:	f7fe ff58 	bl	20001178 <delay_micro>
		ascii_write_cmd(0x0C); //000001 + XXX. X:ena = 0:av / 1:pÃƒÂ¥ -  SkÃƒÂ¤rm/MarkÃƒÂ¶r/BlinkaMarkÃƒÂ¶ren
200022c8:	200c      	movs	r0, #12
200022ca:	f7ff fed5 	bl	20002078 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
200022ce:	2064      	movs	r0, #100	; 0x64
200022d0:	f7fe ff52 	bl	20001178 <delay_micro>
		
	// entry mode set
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
200022d4:	46c0      	nop			; (mov r8, r8)
200022d6:	f7ff fef9 	bl	200020cc <ascii_read_status>
200022da:	0003      	movs	r3, r0
200022dc:	001a      	movs	r2, r3
200022de:	2380      	movs	r3, #128	; 0x80
200022e0:	4013      	ands	r3, r2
200022e2:	2b80      	cmp	r3, #128	; 0x80
200022e4:	d0f7      	beq.n	200022d6 <ascii_init+0x72>
		delay_micro(20); //latenstid
200022e6:	2014      	movs	r0, #20
200022e8:	f7fe ff46 	bl	20001178 <delay_micro>
		ascii_write_cmd(0x06); //00000001 + XY. X=0: markÃƒÂ¶ren vÃƒÂ¤nst. || X=1: marÃƒÂ¶kren hÃƒÂ¶g. - Y=0: skift av || Y=1: skift pÃƒÂ¥
200022ec:	2006      	movs	r0, #6
200022ee:	f7ff fec3 	bl	20002078 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
200022f2:	2064      	movs	r0, #100	; 0x64
200022f4:	f7fe ff40 	bl	20001178 <delay_micro>
		
		
}
200022f8:	46c0      	nop			; (mov r8, r8)
200022fa:	46bd      	mov	sp, r7
200022fc:	bd80      	pop	{r7, pc}

200022fe <init_application>:

void init_application(void){
200022fe:	b580      	push	{r7, lr}
20002300:	af00      	add	r7, sp, #0
	#ifdef USBDM
		*((unsigned long *) 0x40023830) = 0x18; //startar klockor pÃ¥ port D och E
		//__asm volatile ("LDR R0, =0x08000209\n BLX R0 \n"); //initiera PLL
	#endif
	//"initierar Port E med anvÃƒÂ¤ndning med LCD-modulen, dvs. sÃƒÂ¥vÃƒÂ¤l port E0-7 som E8-15 sÃƒÂ¤tts till utgÃƒÂ¥ngar
	* portModer = 0x55555555;
20002302:	4b03      	ldr	r3, [pc, #12]	; (20002310 <init_application+0x12>)
20002304:	4a03      	ldr	r2, [pc, #12]	; (20002314 <init_application+0x16>)
20002306:	601a      	str	r2, [r3, #0]
}
20002308:	46c0      	nop			; (mov r8, r8)
2000230a:	46bd      	mov	sp, r7
2000230c:	bd80      	pop	{r7, pc}
2000230e:	46c0      	nop			; (mov r8, r8)
20002310:	40021000 	andmi	r1, r2, r0
20002314:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20002318 <set_up_ascii>:

void set_up_ascii( void ) {
20002318:	b580      	push	{r7, lr}
2000231a:	af00      	add	r7, sp, #0
	init_application();
2000231c:	f7ff ffef 	bl	200022fe <init_application>
	ascii_init();
20002320:	f7ff ffa0 	bl	20002264 <ascii_init>
}
20002324:	46c0      	nop			; (mov r8, r8)
20002326:	46bd      	mov	sp, r7
20002328:	bd80      	pop	{r7, pc}

2000232a <clear_ascii>:

void clear_ascii( void ) {
2000232a:	b590      	push	{r4, r7, lr}
2000232c:	b089      	sub	sp, #36	; 0x24
2000232e:	af00      	add	r7, sp, #0
	char *s;
	char clear[] = "                    ";
20002330:	1d3b      	adds	r3, r7, #4
20002332:	4a17      	ldr	r2, [pc, #92]	; (20002390 <clear_ascii+0x66>)
20002334:	ca13      	ldmia	r2!, {r0, r1, r4}
20002336:	c313      	stmia	r3!, {r0, r1, r4}
20002338:	ca03      	ldmia	r2!, {r0, r1}
2000233a:	c303      	stmia	r3!, {r0, r1}
2000233c:	7812      	ldrb	r2, [r2, #0]
2000233e:	701a      	strb	r2, [r3, #0]
	
	s = clear;
20002340:	1d3b      	adds	r3, r7, #4
20002342:	61fb      	str	r3, [r7, #28]
	ascii_goToXY(1,1);
20002344:	2101      	movs	r1, #1
20002346:	2001      	movs	r0, #1
20002348:	f7ff ff64 	bl	20002214 <ascii_goToXY>
	while(*s){
2000234c:	e006      	b.n	2000235c <clear_ascii+0x32>
		ascii_write_char(*s++);
2000234e:	69fb      	ldr	r3, [r7, #28]
20002350:	1c5a      	adds	r2, r3, #1
20002352:	61fa      	str	r2, [r7, #28]
20002354:	781b      	ldrb	r3, [r3, #0]
20002356:	0018      	movs	r0, r3
20002358:	f7ff ff3e 	bl	200021d8 <ascii_write_char>
	while(*s){
2000235c:	69fb      	ldr	r3, [r7, #28]
2000235e:	781b      	ldrb	r3, [r3, #0]
20002360:	2b00      	cmp	r3, #0
20002362:	d1f4      	bne.n	2000234e <clear_ascii+0x24>
	}
	s = clear;
20002364:	1d3b      	adds	r3, r7, #4
20002366:	61fb      	str	r3, [r7, #28]
	ascii_goToXY(1,2);
20002368:	2102      	movs	r1, #2
2000236a:	2001      	movs	r0, #1
2000236c:	f7ff ff52 	bl	20002214 <ascii_goToXY>
	while(*s){
20002370:	e006      	b.n	20002380 <clear_ascii+0x56>
		ascii_write_char(*s++);
20002372:	69fb      	ldr	r3, [r7, #28]
20002374:	1c5a      	adds	r2, r3, #1
20002376:	61fa      	str	r2, [r7, #28]
20002378:	781b      	ldrb	r3, [r3, #0]
2000237a:	0018      	movs	r0, r3
2000237c:	f7ff ff2c 	bl	200021d8 <ascii_write_char>
	while(*s){
20002380:	69fb      	ldr	r3, [r7, #28]
20002382:	781b      	ldrb	r3, [r3, #0]
20002384:	2b00      	cmp	r3, #0
20002386:	d1f4      	bne.n	20002372 <clear_ascii+0x48>
	}
}
20002388:	46c0      	nop			; (mov r8, r8)
2000238a:	46bd      	mov	sp, r7
2000238c:	b009      	add	sp, #36	; 0x24
2000238e:	bd90      	pop	{r4, r7, pc}
20002390:	200064a0 	andcs	r6, r0, r0, lsr #9

20002394 <ascii_write>:

void ascii_write(char *row1, char *row2) {
20002394:	b580      	push	{r7, lr}
20002396:	b082      	sub	sp, #8
20002398:	af00      	add	r7, sp, #0
2000239a:	6078      	str	r0, [r7, #4]
2000239c:	6039      	str	r1, [r7, #0]
	clear_ascii();
2000239e:	f7ff ffc4 	bl	2000232a <clear_ascii>
	
	ascii_goToXY(1,1);
200023a2:	2101      	movs	r1, #1
200023a4:	2001      	movs	r0, #1
200023a6:	f7ff ff35 	bl	20002214 <ascii_goToXY>
	while(*row1){
200023aa:	e006      	b.n	200023ba <ascii_write+0x26>
		ascii_write_char(*row1++);
200023ac:	687b      	ldr	r3, [r7, #4]
200023ae:	1c5a      	adds	r2, r3, #1
200023b0:	607a      	str	r2, [r7, #4]
200023b2:	781b      	ldrb	r3, [r3, #0]
200023b4:	0018      	movs	r0, r3
200023b6:	f7ff ff0f 	bl	200021d8 <ascii_write_char>
	while(*row1){
200023ba:	687b      	ldr	r3, [r7, #4]
200023bc:	781b      	ldrb	r3, [r3, #0]
200023be:	2b00      	cmp	r3, #0
200023c0:	d1f4      	bne.n	200023ac <ascii_write+0x18>
	}	
	ascii_goToXY(1,2);
200023c2:	2102      	movs	r1, #2
200023c4:	2001      	movs	r0, #1
200023c6:	f7ff ff25 	bl	20002214 <ascii_goToXY>
	while(*row2){
200023ca:	e006      	b.n	200023da <ascii_write+0x46>
		ascii_write_char(*row2++);
200023cc:	683b      	ldr	r3, [r7, #0]
200023ce:	1c5a      	adds	r2, r3, #1
200023d0:	603a      	str	r2, [r7, #0]
200023d2:	781b      	ldrb	r3, [r3, #0]
200023d4:	0018      	movs	r0, r3
200023d6:	f7ff feff 	bl	200021d8 <ascii_write_char>
	while(*row2){
200023da:	683b      	ldr	r3, [r7, #0]
200023dc:	781b      	ldrb	r3, [r3, #0]
200023de:	2b00      	cmp	r3, #0
200023e0:	d1f4      	bne.n	200023cc <ascii_write+0x38>
	}
	
	ascii_goToXY(21,1);
200023e2:	2101      	movs	r1, #1
200023e4:	2015      	movs	r0, #21
200023e6:	f7ff ff15 	bl	20002214 <ascii_goToXY>
}
200023ea:	46c0      	nop			; (mov r8, r8)
200023ec:	46bd      	mov	sp, r7
200023ee:	b002      	add	sp, #8
200023f0:	bd80      	pop	{r7, pc}

200023f2 <ascii_write_part>:

void ascii_write_part(char *row1, char *row2, int limit1, int limit2) {
200023f2:	b580      	push	{r7, lr}
200023f4:	b086      	sub	sp, #24
200023f6:	af00      	add	r7, sp, #0
200023f8:	60f8      	str	r0, [r7, #12]
200023fa:	60b9      	str	r1, [r7, #8]
200023fc:	607a      	str	r2, [r7, #4]
200023fe:	603b      	str	r3, [r7, #0]
	clear_ascii();
20002400:	f7ff ff93 	bl	2000232a <clear_ascii>
	
	ascii_goToXY(1,1);
20002404:	2101      	movs	r1, #1
20002406:	2001      	movs	r0, #1
20002408:	f7ff ff04 	bl	20002214 <ascii_goToXY>
	int i = 0;
2000240c:	2300      	movs	r3, #0
2000240e:	617b      	str	r3, [r7, #20]
	if(limit1 > 0) {
20002410:	687b      	ldr	r3, [r7, #4]
20002412:	2b00      	cmp	r3, #0
20002414:	dd11      	ble.n	2000243a <ascii_write_part+0x48>
		while(*row1 && (i++ < limit1)){
20002416:	e006      	b.n	20002426 <ascii_write_part+0x34>
			ascii_write_char(*row1++);
20002418:	68fb      	ldr	r3, [r7, #12]
2000241a:	1c5a      	adds	r2, r3, #1
2000241c:	60fa      	str	r2, [r7, #12]
2000241e:	781b      	ldrb	r3, [r3, #0]
20002420:	0018      	movs	r0, r3
20002422:	f7ff fed9 	bl	200021d8 <ascii_write_char>
		while(*row1 && (i++ < limit1)){
20002426:	68fb      	ldr	r3, [r7, #12]
20002428:	781b      	ldrb	r3, [r3, #0]
2000242a:	2b00      	cmp	r3, #0
2000242c:	d005      	beq.n	2000243a <ascii_write_part+0x48>
2000242e:	697b      	ldr	r3, [r7, #20]
20002430:	1c5a      	adds	r2, r3, #1
20002432:	617a      	str	r2, [r7, #20]
20002434:	687a      	ldr	r2, [r7, #4]
20002436:	4293      	cmp	r3, r2
20002438:	dbee      	blt.n	20002418 <ascii_write_part+0x26>
		}			
	}

	ascii_goToXY(1,2);
2000243a:	2102      	movs	r1, #2
2000243c:	2001      	movs	r0, #1
2000243e:	f7ff fee9 	bl	20002214 <ascii_goToXY>
	i = 0;
20002442:	2300      	movs	r3, #0
20002444:	617b      	str	r3, [r7, #20]
	if(limit2 > 0) {
20002446:	683b      	ldr	r3, [r7, #0]
20002448:	2b00      	cmp	r3, #0
2000244a:	dd11      	ble.n	20002470 <ascii_write_part+0x7e>
		while(*row2 && (i++ < limit2)){
2000244c:	e006      	b.n	2000245c <ascii_write_part+0x6a>
			ascii_write_char(*row2++);
2000244e:	68bb      	ldr	r3, [r7, #8]
20002450:	1c5a      	adds	r2, r3, #1
20002452:	60ba      	str	r2, [r7, #8]
20002454:	781b      	ldrb	r3, [r3, #0]
20002456:	0018      	movs	r0, r3
20002458:	f7ff febe 	bl	200021d8 <ascii_write_char>
		while(*row2 && (i++ < limit2)){
2000245c:	68bb      	ldr	r3, [r7, #8]
2000245e:	781b      	ldrb	r3, [r3, #0]
20002460:	2b00      	cmp	r3, #0
20002462:	d005      	beq.n	20002470 <ascii_write_part+0x7e>
20002464:	697b      	ldr	r3, [r7, #20]
20002466:	1c5a      	adds	r2, r3, #1
20002468:	617a      	str	r2, [r7, #20]
2000246a:	683a      	ldr	r2, [r7, #0]
2000246c:	4293      	cmp	r3, r2
2000246e:	dbee      	blt.n	2000244e <ascii_write_part+0x5c>
		}
	}
	
	ascii_goToXY(21,1);
20002470:	2101      	movs	r1, #1
20002472:	2015      	movs	r0, #21
20002474:	f7ff fece 	bl	20002214 <ascii_goToXY>
}
20002478:	46c0      	nop			; (mov r8, r8)
2000247a:	46bd      	mov	sp, r7
2000247c:	b006      	add	sp, #24
2000247e:	bd80      	pop	{r7, pc}

20002480 <ascii_test>:



void ascii_test(void) {
20002480:	b590      	push	{r4, r7, lr}
20002482:	b08b      	sub	sp, #44	; 0x2c
20002484:	af00      	add	r7, sp, #0
	char *s;
	char test1[] = "Alfanumerisk";
20002486:	2314      	movs	r3, #20
20002488:	18fb      	adds	r3, r7, r3
2000248a:	4a1c      	ldr	r2, [pc, #112]	; (200024fc <ascii_test+0x7c>)
2000248c:	ca13      	ldmia	r2!, {r0, r1, r4}
2000248e:	c313      	stmia	r3!, {r0, r1, r4}
20002490:	7812      	ldrb	r2, [r2, #0]
20002492:	701a      	strb	r2, [r3, #0]
	char test2[] = "hardåäöare suger";
20002494:	003b      	movs	r3, r7
20002496:	4a1a      	ldr	r2, [pc, #104]	; (20002500 <ascii_test+0x80>)
20002498:	ca13      	ldmia	r2!, {r0, r1, r4}
2000249a:	c313      	stmia	r3!, {r0, r1, r4}
2000249c:	ca03      	ldmia	r2!, {r0, r1}
2000249e:	c303      	stmia	r3!, {r0, r1}
	
	init_application();
200024a0:	f7ff ff2d 	bl	200022fe <init_application>
	ascii_init();
200024a4:	f7ff fede 	bl	20002264 <ascii_init>
	ascii_goToXY(1,1);
200024a8:	2101      	movs	r1, #1
200024aa:	2001      	movs	r0, #1
200024ac:	f7ff feb2 	bl	20002214 <ascii_goToXY>
	s = test1;
200024b0:	2314      	movs	r3, #20
200024b2:	18fb      	adds	r3, r7, r3
200024b4:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
200024b6:	e006      	b.n	200024c6 <ascii_test+0x46>
		ascii_write_char(*s++);
200024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200024ba:	1c5a      	adds	r2, r3, #1
200024bc:	627a      	str	r2, [r7, #36]	; 0x24
200024be:	781b      	ldrb	r3, [r3, #0]
200024c0:	0018      	movs	r0, r3
200024c2:	f7ff fe89 	bl	200021d8 <ascii_write_char>
	while(*s){
200024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200024c8:	781b      	ldrb	r3, [r3, #0]
200024ca:	2b00      	cmp	r3, #0
200024cc:	d1f4      	bne.n	200024b8 <ascii_test+0x38>
	}
	ascii_goToXY(1,2);
200024ce:	2102      	movs	r1, #2
200024d0:	2001      	movs	r0, #1
200024d2:	f7ff fe9f 	bl	20002214 <ascii_goToXY>
	s = test2;
200024d6:	003b      	movs	r3, r7
200024d8:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
200024da:	e006      	b.n	200024ea <ascii_test+0x6a>
		ascii_write_char(*s++);
200024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200024de:	1c5a      	adds	r2, r3, #1
200024e0:	627a      	str	r2, [r7, #36]	; 0x24
200024e2:	781b      	ldrb	r3, [r3, #0]
200024e4:	0018      	movs	r0, r3
200024e6:	f7ff fe77 	bl	200021d8 <ascii_write_char>
	while(*s){
200024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200024ec:	781b      	ldrb	r3, [r3, #0]
200024ee:	2b00      	cmp	r3, #0
200024f0:	d1f4      	bne.n	200024dc <ascii_test+0x5c>
	}
	return 0;
200024f2:	46c0      	nop			; (mov r8, r8)
200024f4:	46bd      	mov	sp, r7
200024f6:	b00b      	add	sp, #44	; 0x2c
200024f8:	bd90      	pop	{r4, r7, pc}
200024fa:	46c0      	nop			; (mov r8, r8)
200024fc:	200064b8 			; <UNDEFINED> instruction: 0x200064b8
20002500:	200064c8 	andcs	r6, r0, r8, asr #9

20002504 <display>:
#include "slow_text.h"
#include "ascii_display.h"

void display(SlowText *this, int length_of_row1) {
20002504:	b580      	push	{r7, lr}
20002506:	b084      	sub	sp, #16
20002508:	af00      	add	r7, sp, #0
2000250a:	6078      	str	r0, [r7, #4]
2000250c:	6039      	str	r1, [r7, #0]
	int limit1 = this->counter / this->speed;
2000250e:	687b      	ldr	r3, [r7, #4]
20002510:	689a      	ldr	r2, [r3, #8]
20002512:	687b      	ldr	r3, [r7, #4]
20002514:	68db      	ldr	r3, [r3, #12]
20002516:	0019      	movs	r1, r3
20002518:	0010      	movs	r0, r2
2000251a:	f000 f83d 	bl	20002598 <__divsi3>
2000251e:	0003      	movs	r3, r0
20002520:	60fb      	str	r3, [r7, #12]
	int limit2 = this->counter / this->speed - length_of_row1;
20002522:	687b      	ldr	r3, [r7, #4]
20002524:	689a      	ldr	r2, [r3, #8]
20002526:	687b      	ldr	r3, [r7, #4]
20002528:	68db      	ldr	r3, [r3, #12]
2000252a:	0019      	movs	r1, r3
2000252c:	0010      	movs	r0, r2
2000252e:	f000 f833 	bl	20002598 <__divsi3>
20002532:	0003      	movs	r3, r0
20002534:	001a      	movs	r2, r3
20002536:	683b      	ldr	r3, [r7, #0]
20002538:	1ad3      	subs	r3, r2, r3
2000253a:	60bb      	str	r3, [r7, #8]
	ascii_write_part(this->row1, this->row2, limit1, limit2);
2000253c:	687b      	ldr	r3, [r7, #4]
2000253e:	6818      	ldr	r0, [r3, #0]
20002540:	687b      	ldr	r3, [r7, #4]
20002542:	6859      	ldr	r1, [r3, #4]
20002544:	68bb      	ldr	r3, [r7, #8]
20002546:	68fa      	ldr	r2, [r7, #12]
20002548:	f7ff ff53 	bl	200023f2 <ascii_write_part>
	
	this->counter++;
2000254c:	687b      	ldr	r3, [r7, #4]
2000254e:	689b      	ldr	r3, [r3, #8]
20002550:	1c5a      	adds	r2, r3, #1
20002552:	687b      	ldr	r3, [r7, #4]
20002554:	609a      	str	r2, [r3, #8]
}
20002556:	46c0      	nop			; (mov r8, r8)
20002558:	46bd      	mov	sp, r7
2000255a:	b004      	add	sp, #16
2000255c:	bd80      	pop	{r7, pc}

2000255e <init_slow_text>:

void init_slow_text(SlowText *obj, char *row1, char *row2, int speed) {
2000255e:	b580      	push	{r7, lr}
20002560:	b084      	sub	sp, #16
20002562:	af00      	add	r7, sp, #0
20002564:	60f8      	str	r0, [r7, #12]
20002566:	60b9      	str	r1, [r7, #8]
20002568:	607a      	str	r2, [r7, #4]
2000256a:	603b      	str	r3, [r7, #0]
	obj->row1 = row1;
2000256c:	68fb      	ldr	r3, [r7, #12]
2000256e:	68ba      	ldr	r2, [r7, #8]
20002570:	601a      	str	r2, [r3, #0]
	obj->row2 = row2;
20002572:	68fb      	ldr	r3, [r7, #12]
20002574:	687a      	ldr	r2, [r7, #4]
20002576:	605a      	str	r2, [r3, #4]
	obj->speed = speed;
20002578:	68fb      	ldr	r3, [r7, #12]
2000257a:	683a      	ldr	r2, [r7, #0]
2000257c:	60da      	str	r2, [r3, #12]
	obj->counter = 0;
2000257e:	68fb      	ldr	r3, [r7, #12]
20002580:	2200      	movs	r2, #0
20002582:	609a      	str	r2, [r3, #8]
	obj->display = display;
20002584:	68fb      	ldr	r3, [r7, #12]
20002586:	4a03      	ldr	r2, [pc, #12]	; (20002594 <init_slow_text+0x36>)
20002588:	611a      	str	r2, [r3, #16]
2000258a:	46c0      	nop			; (mov r8, r8)
2000258c:	46bd      	mov	sp, r7
2000258e:	b004      	add	sp, #16
20002590:	bd80      	pop	{r7, pc}
20002592:	46c0      	nop			; (mov r8, r8)
20002594:	20002505 	andcs	r2, r0, r5, lsl #10

20002598 <__divsi3>:
20002598:	4603      	mov	r3, r0
2000259a:	430b      	orrs	r3, r1
2000259c:	d47f      	bmi.n	2000269e <__divsi3+0x106>
2000259e:	2200      	movs	r2, #0
200025a0:	0843      	lsrs	r3, r0, #1
200025a2:	428b      	cmp	r3, r1
200025a4:	d374      	bcc.n	20002690 <__divsi3+0xf8>
200025a6:	0903      	lsrs	r3, r0, #4
200025a8:	428b      	cmp	r3, r1
200025aa:	d35f      	bcc.n	2000266c <__divsi3+0xd4>
200025ac:	0a03      	lsrs	r3, r0, #8
200025ae:	428b      	cmp	r3, r1
200025b0:	d344      	bcc.n	2000263c <__divsi3+0xa4>
200025b2:	0b03      	lsrs	r3, r0, #12
200025b4:	428b      	cmp	r3, r1
200025b6:	d328      	bcc.n	2000260a <__divsi3+0x72>
200025b8:	0c03      	lsrs	r3, r0, #16
200025ba:	428b      	cmp	r3, r1
200025bc:	d30d      	bcc.n	200025da <__divsi3+0x42>
200025be:	22ff      	movs	r2, #255	; 0xff
200025c0:	0209      	lsls	r1, r1, #8
200025c2:	ba12      	rev	r2, r2
200025c4:	0c03      	lsrs	r3, r0, #16
200025c6:	428b      	cmp	r3, r1
200025c8:	d302      	bcc.n	200025d0 <__divsi3+0x38>
200025ca:	1212      	asrs	r2, r2, #8
200025cc:	0209      	lsls	r1, r1, #8
200025ce:	d065      	beq.n	2000269c <__divsi3+0x104>
200025d0:	0b03      	lsrs	r3, r0, #12
200025d2:	428b      	cmp	r3, r1
200025d4:	d319      	bcc.n	2000260a <__divsi3+0x72>
200025d6:	e000      	b.n	200025da <__divsi3+0x42>
200025d8:	0a09      	lsrs	r1, r1, #8
200025da:	0bc3      	lsrs	r3, r0, #15
200025dc:	428b      	cmp	r3, r1
200025de:	d301      	bcc.n	200025e4 <__divsi3+0x4c>
200025e0:	03cb      	lsls	r3, r1, #15
200025e2:	1ac0      	subs	r0, r0, r3
200025e4:	4152      	adcs	r2, r2
200025e6:	0b83      	lsrs	r3, r0, #14
200025e8:	428b      	cmp	r3, r1
200025ea:	d301      	bcc.n	200025f0 <__divsi3+0x58>
200025ec:	038b      	lsls	r3, r1, #14
200025ee:	1ac0      	subs	r0, r0, r3
200025f0:	4152      	adcs	r2, r2
200025f2:	0b43      	lsrs	r3, r0, #13
200025f4:	428b      	cmp	r3, r1
200025f6:	d301      	bcc.n	200025fc <__divsi3+0x64>
200025f8:	034b      	lsls	r3, r1, #13
200025fa:	1ac0      	subs	r0, r0, r3
200025fc:	4152      	adcs	r2, r2
200025fe:	0b03      	lsrs	r3, r0, #12
20002600:	428b      	cmp	r3, r1
20002602:	d301      	bcc.n	20002608 <__divsi3+0x70>
20002604:	030b      	lsls	r3, r1, #12
20002606:	1ac0      	subs	r0, r0, r3
20002608:	4152      	adcs	r2, r2
2000260a:	0ac3      	lsrs	r3, r0, #11
2000260c:	428b      	cmp	r3, r1
2000260e:	d301      	bcc.n	20002614 <__divsi3+0x7c>
20002610:	02cb      	lsls	r3, r1, #11
20002612:	1ac0      	subs	r0, r0, r3
20002614:	4152      	adcs	r2, r2
20002616:	0a83      	lsrs	r3, r0, #10
20002618:	428b      	cmp	r3, r1
2000261a:	d301      	bcc.n	20002620 <__divsi3+0x88>
2000261c:	028b      	lsls	r3, r1, #10
2000261e:	1ac0      	subs	r0, r0, r3
20002620:	4152      	adcs	r2, r2
20002622:	0a43      	lsrs	r3, r0, #9
20002624:	428b      	cmp	r3, r1
20002626:	d301      	bcc.n	2000262c <__divsi3+0x94>
20002628:	024b      	lsls	r3, r1, #9
2000262a:	1ac0      	subs	r0, r0, r3
2000262c:	4152      	adcs	r2, r2
2000262e:	0a03      	lsrs	r3, r0, #8
20002630:	428b      	cmp	r3, r1
20002632:	d301      	bcc.n	20002638 <__divsi3+0xa0>
20002634:	020b      	lsls	r3, r1, #8
20002636:	1ac0      	subs	r0, r0, r3
20002638:	4152      	adcs	r2, r2
2000263a:	d2cd      	bcs.n	200025d8 <__divsi3+0x40>
2000263c:	09c3      	lsrs	r3, r0, #7
2000263e:	428b      	cmp	r3, r1
20002640:	d301      	bcc.n	20002646 <__divsi3+0xae>
20002642:	01cb      	lsls	r3, r1, #7
20002644:	1ac0      	subs	r0, r0, r3
20002646:	4152      	adcs	r2, r2
20002648:	0983      	lsrs	r3, r0, #6
2000264a:	428b      	cmp	r3, r1
2000264c:	d301      	bcc.n	20002652 <__divsi3+0xba>
2000264e:	018b      	lsls	r3, r1, #6
20002650:	1ac0      	subs	r0, r0, r3
20002652:	4152      	adcs	r2, r2
20002654:	0943      	lsrs	r3, r0, #5
20002656:	428b      	cmp	r3, r1
20002658:	d301      	bcc.n	2000265e <__divsi3+0xc6>
2000265a:	014b      	lsls	r3, r1, #5
2000265c:	1ac0      	subs	r0, r0, r3
2000265e:	4152      	adcs	r2, r2
20002660:	0903      	lsrs	r3, r0, #4
20002662:	428b      	cmp	r3, r1
20002664:	d301      	bcc.n	2000266a <__divsi3+0xd2>
20002666:	010b      	lsls	r3, r1, #4
20002668:	1ac0      	subs	r0, r0, r3
2000266a:	4152      	adcs	r2, r2
2000266c:	08c3      	lsrs	r3, r0, #3
2000266e:	428b      	cmp	r3, r1
20002670:	d301      	bcc.n	20002676 <__divsi3+0xde>
20002672:	00cb      	lsls	r3, r1, #3
20002674:	1ac0      	subs	r0, r0, r3
20002676:	4152      	adcs	r2, r2
20002678:	0883      	lsrs	r3, r0, #2
2000267a:	428b      	cmp	r3, r1
2000267c:	d301      	bcc.n	20002682 <__divsi3+0xea>
2000267e:	008b      	lsls	r3, r1, #2
20002680:	1ac0      	subs	r0, r0, r3
20002682:	4152      	adcs	r2, r2
20002684:	0843      	lsrs	r3, r0, #1
20002686:	428b      	cmp	r3, r1
20002688:	d301      	bcc.n	2000268e <__divsi3+0xf6>
2000268a:	004b      	lsls	r3, r1, #1
2000268c:	1ac0      	subs	r0, r0, r3
2000268e:	4152      	adcs	r2, r2
20002690:	1a41      	subs	r1, r0, r1
20002692:	d200      	bcs.n	20002696 <__divsi3+0xfe>
20002694:	4601      	mov	r1, r0
20002696:	4152      	adcs	r2, r2
20002698:	4610      	mov	r0, r2
2000269a:	4770      	bx	lr
2000269c:	e05d      	b.n	2000275a <__divsi3+0x1c2>
2000269e:	0fca      	lsrs	r2, r1, #31
200026a0:	d000      	beq.n	200026a4 <__divsi3+0x10c>
200026a2:	4249      	negs	r1, r1
200026a4:	1003      	asrs	r3, r0, #32
200026a6:	d300      	bcc.n	200026aa <__divsi3+0x112>
200026a8:	4240      	negs	r0, r0
200026aa:	4053      	eors	r3, r2
200026ac:	2200      	movs	r2, #0
200026ae:	469c      	mov	ip, r3
200026b0:	0903      	lsrs	r3, r0, #4
200026b2:	428b      	cmp	r3, r1
200026b4:	d32d      	bcc.n	20002712 <__divsi3+0x17a>
200026b6:	0a03      	lsrs	r3, r0, #8
200026b8:	428b      	cmp	r3, r1
200026ba:	d312      	bcc.n	200026e2 <__divsi3+0x14a>
200026bc:	22fc      	movs	r2, #252	; 0xfc
200026be:	0189      	lsls	r1, r1, #6
200026c0:	ba12      	rev	r2, r2
200026c2:	0a03      	lsrs	r3, r0, #8
200026c4:	428b      	cmp	r3, r1
200026c6:	d30c      	bcc.n	200026e2 <__divsi3+0x14a>
200026c8:	0189      	lsls	r1, r1, #6
200026ca:	1192      	asrs	r2, r2, #6
200026cc:	428b      	cmp	r3, r1
200026ce:	d308      	bcc.n	200026e2 <__divsi3+0x14a>
200026d0:	0189      	lsls	r1, r1, #6
200026d2:	1192      	asrs	r2, r2, #6
200026d4:	428b      	cmp	r3, r1
200026d6:	d304      	bcc.n	200026e2 <__divsi3+0x14a>
200026d8:	0189      	lsls	r1, r1, #6
200026da:	d03a      	beq.n	20002752 <__divsi3+0x1ba>
200026dc:	1192      	asrs	r2, r2, #6
200026de:	e000      	b.n	200026e2 <__divsi3+0x14a>
200026e0:	0989      	lsrs	r1, r1, #6
200026e2:	09c3      	lsrs	r3, r0, #7
200026e4:	428b      	cmp	r3, r1
200026e6:	d301      	bcc.n	200026ec <__divsi3+0x154>
200026e8:	01cb      	lsls	r3, r1, #7
200026ea:	1ac0      	subs	r0, r0, r3
200026ec:	4152      	adcs	r2, r2
200026ee:	0983      	lsrs	r3, r0, #6
200026f0:	428b      	cmp	r3, r1
200026f2:	d301      	bcc.n	200026f8 <__divsi3+0x160>
200026f4:	018b      	lsls	r3, r1, #6
200026f6:	1ac0      	subs	r0, r0, r3
200026f8:	4152      	adcs	r2, r2
200026fa:	0943      	lsrs	r3, r0, #5
200026fc:	428b      	cmp	r3, r1
200026fe:	d301      	bcc.n	20002704 <__divsi3+0x16c>
20002700:	014b      	lsls	r3, r1, #5
20002702:	1ac0      	subs	r0, r0, r3
20002704:	4152      	adcs	r2, r2
20002706:	0903      	lsrs	r3, r0, #4
20002708:	428b      	cmp	r3, r1
2000270a:	d301      	bcc.n	20002710 <__divsi3+0x178>
2000270c:	010b      	lsls	r3, r1, #4
2000270e:	1ac0      	subs	r0, r0, r3
20002710:	4152      	adcs	r2, r2
20002712:	08c3      	lsrs	r3, r0, #3
20002714:	428b      	cmp	r3, r1
20002716:	d301      	bcc.n	2000271c <__divsi3+0x184>
20002718:	00cb      	lsls	r3, r1, #3
2000271a:	1ac0      	subs	r0, r0, r3
2000271c:	4152      	adcs	r2, r2
2000271e:	0883      	lsrs	r3, r0, #2
20002720:	428b      	cmp	r3, r1
20002722:	d301      	bcc.n	20002728 <__divsi3+0x190>
20002724:	008b      	lsls	r3, r1, #2
20002726:	1ac0      	subs	r0, r0, r3
20002728:	4152      	adcs	r2, r2
2000272a:	d2d9      	bcs.n	200026e0 <__divsi3+0x148>
2000272c:	0843      	lsrs	r3, r0, #1
2000272e:	428b      	cmp	r3, r1
20002730:	d301      	bcc.n	20002736 <__divsi3+0x19e>
20002732:	004b      	lsls	r3, r1, #1
20002734:	1ac0      	subs	r0, r0, r3
20002736:	4152      	adcs	r2, r2
20002738:	1a41      	subs	r1, r0, r1
2000273a:	d200      	bcs.n	2000273e <__divsi3+0x1a6>
2000273c:	4601      	mov	r1, r0
2000273e:	4663      	mov	r3, ip
20002740:	4152      	adcs	r2, r2
20002742:	105b      	asrs	r3, r3, #1
20002744:	4610      	mov	r0, r2
20002746:	d301      	bcc.n	2000274c <__divsi3+0x1b4>
20002748:	4240      	negs	r0, r0
2000274a:	2b00      	cmp	r3, #0
2000274c:	d500      	bpl.n	20002750 <__divsi3+0x1b8>
2000274e:	4249      	negs	r1, r1
20002750:	4770      	bx	lr
20002752:	4663      	mov	r3, ip
20002754:	105b      	asrs	r3, r3, #1
20002756:	d300      	bcc.n	2000275a <__divsi3+0x1c2>
20002758:	4240      	negs	r0, r0
2000275a:	b501      	push	{r0, lr}
2000275c:	2000      	movs	r0, #0
2000275e:	f000 f805 	bl	2000276c <__aeabi_idiv0>
20002762:	bd02      	pop	{r1, pc}

20002764 <__aeabi_idivmod>:
20002764:	2900      	cmp	r1, #0
20002766:	d0f8      	beq.n	2000275a <__divsi3+0x1c2>
20002768:	e716      	b.n	20002598 <__divsi3>
2000276a:	4770      	bx	lr

2000276c <__aeabi_idiv0>:
2000276c:	4770      	bx	lr
2000276e:	46c0      	nop			; (mov r8, r8)

20002770 <counter>:
20002770:	00000000 	andeq	r0, r0, r0

20002774 <nGameObjects>:
20002774:	00000000 	andeq	r0, r0, r0

20002778 <lastRightValue.4092>:
20002778:	00000000 	andeq	r0, r0, r0

2000277c <speed.4094>:
2000277c:	00000000 	andeq	r0, r0, r0

20002780 <lastLeftValue.4093>:
20002780:	00000000 	andeq	r0, r0, r0

20002784 <monster>:
20002784:	00000000 	andeq	r0, r0, r0

20002788 <tempCastleBlack>:
	...

20002794 <tempTitleGray>:
	...

200027a0 <castleBlack>:
200027a0:	00000000 	andeq	r0, r0, r0

200027a4 <tempMonster>:
	...

200027b0 <tempTitleBlack>:
	...

200027bc <bg>:
200027bc:	00000000 	andeq	r0, r0, r0

200027c0 <tempMonsterGray>:
	...

200027cc <tempTitleLight>:
	...

200027d8 <castleLight>:
200027d8:	00000000 	andeq	r0, r0, r0

200027dc <tempCastleLight>:
	...

200027e8 <tempMonsterLight>:
	...

200027f4 <titleGray>:
200027f4:	00000000 	andeq	r0, r0, r0

200027f8 <tempCastleGray>:
	...

20002804 <monsterLight>:
20002804:	00000000 	andeq	r0, r0, r0

20002808 <titleLight>:
20002808:	00000000 	andeq	r0, r0, r0

2000280c <castleGray>:
2000280c:	00000000 	andeq	r0, r0, r0

20002810 <monsterGray>:
20002810:	00000000 	andeq	r0, r0, r0

20002814 <tempBg>:
	...

20002820 <titleBlack>:
20002820:	00000000 	andeq	r0, r0, r0

20002824 <gameObjects>:
	...

200029b4 <fire1Light>:
200029b4:	00000000 	andeq	r0, r0, r0

200029b8 <tempFire3Light>:
	...

200029c4 <fire3Gray>:
200029c4:	00000000 	andeq	r0, r0, r0

200029c8 <tempFire4Gray>:
	...

200029d4 <fire2Image>:
	...

200029e0 <tempFire2Gray>:
	...

200029ec <tempFireBlack>:
	...

200029f8 <fire3Image>:
	...

20002a04 <tempFire4Light>:
	...

20002a10 <fire1Image>:
	...

20002a1c <fire4Light>:
20002a1c:	00000000 	andeq	r0, r0, r0

20002a20 <fireObj>:
	...

20002a44 <fire5Image>:
	...

20002a50 <fireImages>:
	...

20002a8c <tempFire5Gray>:
	...

20002a98 <tempFire3Gray>:
	...

20002aa4 <fire4Image>:
	...

20002ab0 <fire4Gray>:
20002ab0:	00000000 	andeq	r0, r0, r0

20002ab4 <tempFire1Light>:
	...

20002ac0 <tempFire5Light>:
	...

20002acc <fire5Gray>:
20002acc:	00000000 	andeq	r0, r0, r0

20002ad0 <fire2Light>:
20002ad0:	00000000 	andeq	r0, r0, r0

20002ad4 <fire5Light>:
20002ad4:	00000000 	andeq	r0, r0, r0

20002ad8 <tempFire1Gray>:
	...

20002ae4 <fireBlack>:
20002ae4:	00000000 	andeq	r0, r0, r0

20002ae8 <tempFire2Light>:
	...

20002af4 <fire3Light>:
20002af4:	00000000 	andeq	r0, r0, r0

20002af8 <fire2Gray>:
20002af8:	00000000 	andeq	r0, r0, r0

20002afc <fire1Gray>:
20002afc:	00000000 	andeq	r0, r0, r0

20002b00 <bird4Light>:
20002b00:	00000000 	andeq	r0, r0, r0

20002b04 <bird1Gray>:
20002b04:	00000000 	andeq	r0, r0, r0

20002b08 <bird6Image>:
	...

20002b14 <bird5Black>:
20002b14:	00000000 	andeq	r0, r0, r0

20002b18 <tempBird4Black>:
	...

20002b24 <bird2Image>:
	...

20002b30 <birdObj>:
	...

20002b54 <bird1Image>:
	...

20002b60 <bird3Black>:
20002b60:	00000000 	andeq	r0, r0, r0

20002b64 <bird4Gray>:
20002b64:	00000000 	andeq	r0, r0, r0

20002b68 <bird2Black>:
20002b68:	00000000 	andeq	r0, r0, r0

20002b6c <bird1Black>:
20002b6c:	00000000 	andeq	r0, r0, r0

20002b70 <bird4Image>:
	...

20002b7c <tempBirdBlack>:
	...

20002b88 <bird3Gray>:
20002b88:	00000000 	andeq	r0, r0, r0

20002b8c <tempBirdGray>:
	...

20002b98 <bird5Gray>:
20002b98:	00000000 	andeq	r0, r0, r0

20002b9c <tempBird5Light>:
	...

20002ba8 <tempBird2Gray>:
	...

20002bb4 <bird3Light>:
20002bb4:	00000000 	andeq	r0, r0, r0

20002bb8 <tempBird5Gray>:
	...

20002bc4 <tempBird5Black>:
	...

20002bd0 <bird5Image>:
	...

20002bdc <bird5Light>:
20002bdc:	00000000 	andeq	r0, r0, r0

20002be0 <tempBird3Black>:
	...

20002bec <bird2Gray>:
20002bec:	00000000 	andeq	r0, r0, r0

20002bf0 <tempBirdLight>:
	...

20002bfc <bird1Light>:
20002bfc:	00000000 	andeq	r0, r0, r0

20002c00 <tempBird2Light>:
	...

20002c0c <bird3Image>:
	...

20002c18 <tempBird4Light>:
	...

20002c24 <tempBird3Light>:
	...

20002c30 <tempBird3Gray>:
	...

20002c3c <birdImages>:
	...

20002c84 <bird4Black>:
20002c84:	00000000 	andeq	r0, r0, r0

20002c88 <tempBird2Black>:
	...

20002c94 <tempBird4Gray>:
	...

20002ca0 <bird2Light>:
20002ca0:	00000000 	andeq	r0, r0, r0

20002ca4 <backBufferGray>:
	...

200030a4 <draw_buffer_black_gray>:
	...

200034a4 <backBuffer>:
	...

200038a4 <draw_buffer_black_light>:
	...

20003ca4 <draw_buffer_black>:
	...

200040a4 <draw_buffer_black_gray_light>:
	...

200044a4 <backBufferLight>:
	...

200048a4 <monster_black_bits>:
	...
200048b4:	0001c000 	andeq	ip, r1, r0
200048b8:	00023000 	andeq	r3, r2, r0
200048bc:	00021000 	andeq	r1, r2, r0
200048c0:	00060800 	andeq	r0, r6, r0, lsl #16
200048c4:	00040800 	andeq	r0, r4, r0, lsl #16
200048c8:	00040800 	andeq	r0, r4, r0, lsl #16
200048cc:	00092800 	andeq	r2, r9, r0, lsl #16
200048d0:	00092800 	andeq	r2, r9, r0, lsl #16
200048d4:	00100400 	andseq	r0, r0, r0, lsl #8
200048d8:	00100400 	andseq	r0, r0, r0, lsl #8
200048dc:	00200200 	eoreq	r0, r0, r0, lsl #4
200048e0:	00661b00 	rsbeq	r1, r6, r0, lsl #22
200048e4:	0043b100 	subeq	fp, r3, r0, lsl #2
200048e8:	0080e080 	addeq	lr, r0, r0, lsl #1
200048ec:	01800080 	orreq	r0, r0, r0, lsl #1
200048f0:	01000040 	tsteq	r0, r0, asr #32
200048f4:	02000040 	andeq	r0, r0, #64	; 0x40
200048f8:	02000060 	andeq	r0, r0, #96	; 0x60
200048fc:	02000020 	andeq	r0, r0, #32
20004900:	03ff03e0 	mvnseq	r0, #224, 6	; 0x80000003
20004904:	0001fc00 	andeq	pc, r1, r0, lsl #24
	...

2000491c <monster_light_bits>:
	...
20004930:	00010000 	andeq	r0, r1, r0
20004934:	00018000 	andeq	r8, r1, r0
20004938:	0001f000 	andeq	pc, r1, r0
2000493c:	0001f000 	andeq	pc, r1, r0
20004940:	00009000 	andeq	r9, r0, r0
20004944:	00009000 	andeq	r9, r0, r0
20004948:	0000d000 	andeq	sp, r0, r0
2000494c:	0001f800 	andeq	pc, r1, r0, lsl #16
20004950:	0003f800 	andeq	pc, r3, r0, lsl #16
20004954:	0003fc00 	andeq	pc, r3, r0, lsl #24
20004958:	0001e400 	andeq	lr, r1, r0, lsl #8
2000495c:	00044c00 	andeq	r4, r4, r0, lsl #24
20004960:	00060c00 	andeq	r0, r6, r0, lsl #24
20004964:	0006ee00 	andeq	lr, r6, r0, lsl #28
20004968:	000ffe00 	andeq	pc, pc, r0, lsl #28
2000496c:	000f3f00 	andeq	r3, pc, r0, lsl #30
20004970:	00000780 	andeq	r0, r0, r0, lsl #15
20004974:	000003c0 	andeq	r0, r0, r0, asr #7
	...

20004994 <monster_gray_bits>:
	...
200049b4:	00020000 	andeq	r0, r2, r0
200049b8:	00000000 	andeq	r0, r0, r0
200049bc:	00040000 	andeq	r0, r4, r0
200049c0:	00060000 	andeq	r0, r6, r0
200049c4:	000e0000 	andeq	r0, lr, r0
200049c8:	000c0000 	andeq	r0, ip, r0
200049cc:	001c0000 	andseq	r0, ip, r0
200049d0:	00180000 	andseq	r0, r8, r0
200049d4:	00380000 	eorseq	r0, r8, r0
200049d8:	00780000 	rsbseq	r0, r8, r0
200049dc:	00780000 	rsbseq	r0, r8, r0
200049e0:	00f00000 	rscseq	r0, r0, r0
200049e4:	01f0c000 	mvnseq	ip, r0
200049e8:	01fff800 	mvnseq	pc, r0, lsl #16
200049ec:	01fffc00 	mvnseq	pc, r0, lsl #24
200049f0:	0000fc00 	andeq	pc, r0, r0, lsl #24
	...

20004a0c <castle_black_bits>:
20004a0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004a10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004a14:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004a18:	00000000 	andeq	r0, r0, r0
20004a1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004a20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004a24:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004a28:	00000000 	andeq	r0, r0, r0
20004a2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004a30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004a34:	00000001 	andeq	r0, r0, r1
20004a38:	00000000 	andeq	r0, r0, r0
20004a3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004a40:	7fffffff 	svcvc	0x00ffffff
	...
20004a4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004a50:	3fffffff 	svccc	0x00ffffff
	...
20004a5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004a60:	1fffffff 	svcne	0x00ffffff
	...
20004a6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004a70:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
	...
20004a7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004a80:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
	...
20004a8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004a90:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20004b97 <castle_black_bits+0x18b>	; <UNPREDICTABLE>
	...
20004a9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004aa0:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
	...
20004aac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004ab0:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
	...
20004abc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004ac0:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20004acc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004ad0:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20004adc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004ae0:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20004aec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004af0:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
20004afc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004b00:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
20004b0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004b10:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20004b1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004b20:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20004b2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004b30:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
20004b3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004b40:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20004b4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004b50:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20004b5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004b60:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20004b6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004b70:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
20004b74:	04900000 	ldreq	r0, [r0], #0
20004b78:	00000000 	andeq	r0, r0, r0
20004b7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004b80:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
20004b84:	0b680000 	bleq	21a04b8c <firstTime.4093+0x19fe890>
20004b88:	00000000 	andeq	r0, r0, r0
20004b8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004b90:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20004b94:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
20004b98:	00000000 	andeq	r0, r0, r0
20004b9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004ba0:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20004ba4:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
20004ba8:	00000092 	muleq	r0, r2, r0
20004bac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004bb0:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20004bb4:	04100000 	ldreq	r0, [r0], #-0
20004bb8:	0000016d 	andeq	r0, r0, sp, ror #2
20004bbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004bc0:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20004bc4:	04101240 	ldreq	r1, [r0], #-576	; 0xfffffdc0
20004bc8:	00000101 	andeq	r0, r0, r1, lsl #2
20004bcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004bd0:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20004bd4:	04102da0 	ldreq	r2, [r0], #-3488	; 0xfffff260
20004bd8:	00000101 	andeq	r0, r0, r1, lsl #2
20004bdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004be0:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20004be4:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
20004be8:	00000101 	andeq	r0, r0, r1, lsl #2
20004bec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004bf0:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20004bf4:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
20004bf8:	00000101 	andeq	r0, r0, r1, lsl #2
20004bfc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004c00:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20004c04:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20004c08:	00000082 	andeq	r0, r0, r2, lsl #1
20004c0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004c10:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20004c14:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20004c18:	00000092 	muleq	r0, r2, r0
20004c1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004c20:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20004c24:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20004c28:	012400a2 	smulwbeq	r4, r2, r0
20004c2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004c30:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20004c34:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20004c38:	02da00a2 	sbcseq	r0, sl, #162	; 0xa2
20004c3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004c40:	00004fff 	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
20004c44:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20004c48:	020200a2 	andeq	r0, r2, #162	; 0xa2
20004c4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004c50:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004c54:	08081040 	stmdaeq	r8, {r6, ip}
20004c58:	0202009a 	andeq	r0, r2, #154	; 0x9a
20004c5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004c60:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004c64:	08082020 	stmdaeq	r8, {r5, sp}
20004c68:	01040082 	smlabbeq	r4, r2, r0, r0
20004c6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004c70:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004c74:	48082020 	stmdami	r8, {r5, sp}
20004c78:	01040102 	tsteq	r4, r2, lsl #2
20004c7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004c80:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004c84:	b0082020 	andlt	r2, r8, r0, lsr #32
20004c88:	01040101 	tsteq	r4, r1, lsl #2
20004c8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004c90:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004c94:	00082220 	andeq	r2, r8, r0, lsr #4
20004c98:	01040100 	mrseq	r0, (UNDEF: 20)
20004c9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004ca0:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004ca4:	00882420 	addeq	r2, r8, r0, lsr #8
20004ca8:	01040100 	mrseq	r0, (UNDEF: 20)
20004cac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004cb0:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20004cb4:	01082420 	tsteq	r8, r0, lsr #8
20004cb8:	01045a00 	tsteq	r4, r0, lsl #20
20004cbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004cc0:	0000007f 	andeq	r0, r0, pc, ror r0
20004cc4:	01082420 	tsteq	r8, r0, lsr #8
20004cc8:	0104a400 	tsteq	r4, r0, lsl #8
20004ccc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004cd0:	00000001 	andeq	r0, r0, r1
20004cd4:	010b2320 	tsteq	fp, r0, lsr #6
20004cd8:	01030001 	tsteq	r3, r1
20004cdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004ce0:	00000000 	andeq	r0, r0, r0
20004ce4:	00c4c020 	sbceq	ip, r4, r0, lsr #32
20004ce8:	02000002 	andeq	r0, r0, #2
20004cec:	3fffffff 	svccc	0x00ffffff
20004cf0:	00000000 	andeq	r0, r0, r0
20004cf4:	00000020 	andeq	r0, r0, r0, lsr #32
20004cf8:	02200002 	eoreq	r0, r0, #2
20004cfc:	3fffffff 	svccc	0x00ffffff
20004d00:	00000000 	andeq	r0, r0, r0
20004d04:	00000020 	andeq	r0, r0, r0, lsr #32
20004d08:	02400002 	subeq	r0, r0, #2
20004d0c:	1fffffff 	svcne	0x00ffffff
20004d10:	00000000 	andeq	r0, r0, r0
20004d14:	80000020 	andhi	r0, r0, r0, lsr #32
20004d18:	02400001 	subeq	r0, r0, #1
20004d1c:	1fffffff 	svcne	0x00ffffff
20004d20:	00000000 	andeq	r0, r0, r0
20004d24:	00000010 	andeq	r0, r0, r0, lsl r0
20004d28:	02400000 	subeq	r0, r0, #0
20004d2c:	0fffffff 	svceq	0x00ffffff
20004d30:	00000000 	andeq	r0, r0, r0
20004d34:	00000010 	andeq	r0, r0, r0, lsl r0
20004d38:	02300000 	eorseq	r0, r0, #0
20004d3c:	0fffffff 	svceq	0x00ffffff
20004d40:	00000000 	andeq	r0, r0, r0
20004d44:	00000010 	andeq	r0, r0, r0, lsl r0
20004d48:	02000000 	andeq	r0, r0, #0
20004d4c:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
20004d50:	00000000 	andeq	r0, r0, r0
20004d54:	00000010 	andeq	r0, r0, r0, lsl r0
20004d58:	04000000 	streq	r0, [r0], #-0
20004d5c:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
20004d60:	00000000 	andeq	r0, r0, r0
20004d64:	00000010 	andeq	r0, r0, r0, lsl r0
20004d68:	04000000 	streq	r0, [r0], #-0
20004d6c:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20004e73 <castle_gray_bits+0x67>	; <UNPREDICTABLE>
20004d70:	00000000 	andeq	r0, r0, r0
20004d74:	00000008 	andeq	r0, r0, r8
20004d78:	04000000 	streq	r0, [r0], #-0
20004d7c:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20004e83 <castle_gray_bits+0x77>	; <UNPREDICTABLE>
20004d80:	00000000 	andeq	r0, r0, r0
20004d84:	00000008 	andeq	r0, r0, r8
20004d88:	04000000 	streq	r0, [r0], #-0
20004d8c:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20004d90:	00000000 	andeq	r0, r0, r0
20004d94:	00000008 	andeq	r0, r0, r8
20004d98:	060001c0 	streq	r0, [r0], -r0, asr #3
20004d9c:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20004da0:	00000000 	andeq	r0, r0, r0
20004da4:	00000008 	andeq	r0, r0, r8
20004da8:	04000220 	streq	r0, [r0], #-544	; 0xfffffde0
20004dac:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
20004db0:	00000000 	andeq	r0, r0, r0
20004db4:	00000008 	andeq	r0, r0, r8
20004db8:	04100400 	ldreq	r0, [r0], #-1024	; 0xfffffc00
20004dbc:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
20004dc0:	00000000 	andeq	r0, r0, r0
20004dc4:	00000008 	andeq	r0, r0, r8
20004dc8:	04a00400 	strteq	r0, [r0], #1024	; 0x400
20004dcc:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
20004dd0:	00000000 	andeq	r0, r0, r0
20004dd4:	00000008 	andeq	r0, r0, r8
20004dd8:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
20004ddc:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
20004de0:	00000000 	andeq	r0, r0, r0
20004de4:	00000008 	andeq	r0, r0, r8
20004de8:	07400400 	strbeq	r0, [r0, -r0, lsl #8]
20004dec:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20004df0:	00000000 	andeq	r0, r0, r0
20004df4:	00000008 	andeq	r0, r0, r8
20004df8:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
20004dfc:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20004e00:	00000000 	andeq	r0, r0, r0
20004e04:	00000008 	andeq	r0, r0, r8
20004e08:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00

20004e0c <castle_gray_bits>:
	...
20004e14:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20004e18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
20004e24:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20004e28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
20004e34:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20004e38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004e3c:	00000000 	andeq	r0, r0, r0
20004e40:	80000000 	andhi	r0, r0, r0
20004e44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004e48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004e4c:	00000000 	andeq	r0, r0, r0
20004e50:	c0000000 	andgt	r0, r0, r0
20004e54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004e58:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004e5c:	00000000 	andeq	r0, r0, r0
20004e60:	e0000000 	and	r0, r0, r0
20004e64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20004e68:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
20004e6c:	00000000 	andeq	r0, r0, r0
20004e70:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20004e74:	f3ffcfff 			; <UNDEFINED> instruction: 0xf3ffcfff
20004e78:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
20004e7c:	00000000 	andeq	r0, r0, r0
20004e80:	fc000000 	stc2	0, cr0, [r0], {-0}
20004e84:	f1ff8fff 			; <UNDEFINED> instruction: 0xf1ff8fff
20004e88:	fff9ff3f 			; <UNDEFINED> instruction: 0xfff9ff3f
20004e8c:	00000000 	andeq	r0, r0, r0
20004e90:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20004e94:	f0ff8fef 			; <UNDEFINED> instruction: 0xf0ff8fef
20004e98:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
20004e9c:	00000000 	andeq	r0, r0, r0
20004ea0:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20004ea4:	e0ff87ef 	rscs	r8, pc, pc, ror #15
20004ea8:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
20004eac:	00000000 	andeq	r0, r0, r0
20004eb0:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20004eb4:	c07e07e7 	rsbsgt	r0, lr, r7, ror #15
20004eb8:	ffe0fc1f 			; <UNDEFINED> instruction: 0xffe0fc1f
20004ebc:	00000000 	andeq	r0, r0, r0
20004ec0:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20004ec4:	001c07e7 	andseq	r0, ip, r7, ror #15
20004ec8:	ffe0380e 	vcmla.f32	d19, d0, d14[0], #170
20004ecc:	00000000 	andeq	r0, r0, r0
20004ed0:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20004ed4:	000003e3 	andeq	r0, r0, r3, ror #7
20004ed8:	f7c00000 			; <UNDEFINED> instruction: 0xf7c00000
20004edc:	00000000 	andeq	r0, r0, r0
20004ee0:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20004ee4:	000001c3 	andeq	r0, r0, r3, asr #3
20004ee8:	e7800000 	str	r0, [r0, r0]
20004eec:	00000000 	andeq	r0, r0, r0
20004ef0:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20004ef4:	00000003 	andeq	r0, r0, r3
20004ef8:	c3800000 	orrgt	r0, r0, #0
20004efc:	00000000 	andeq	r0, r0, r0
20004f00:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20004f04:	00000001 	andeq	r0, r0, r1
20004f08:	c0000000 	andgt	r0, r0, r0
20004f0c:	00000000 	andeq	r0, r0, r0
20004f10:	9ff00000 	svcls	0x00f00000	; IMB
20004f14:	00000001 	andeq	r0, r0, r1
20004f18:	80000000 	andhi	r0, r0, r0
20004f1c:	00000000 	andeq	r0, r0, r0
20004f20:	8ff00000 	svchi	0x00f00000	; IMB
20004f24:	00000000 	andeq	r0, r0, r0
20004f28:	80000000 	andhi	r0, r0, r0
20004f2c:	00000000 	andeq	r0, r0, r0
20004f30:	8ff80000 	svchi	0x00f80000
	...
20004f40:	0ffc0000 	svceq	0x00fc0000
	...
20004f50:	0ffc0000 	svceq	0x00fc0000
	...
20004f60:	0ffc0000 	svceq	0x00fc0000
	...
20004f70:	0ffc0000 	svceq	0x00fc0000
	...
20004f80:	0ffc0000 	svceq	0x00fc0000
	...
20004f90:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
20004fa0:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
20004fb0:	07fe0000 	ldrbeq	r0, [lr, r0]!
20004fb4:	03800000 	orreq	r0, r0, #0
	...
20004fc0:	03fe0000 	mvnseq	r0, #0
20004fc4:	02000000 	andeq	r0, r0, #0
	...
20004fd0:	03ff0000 	mvnseq	r0, #0
20004fd4:	02000000 	andeq	r0, r0, #0
	...
20004fe0:	03ff0000 	mvnseq	r0, #0
20004fe4:	02000000 	andeq	r0, r0, #0
	...
20004ff0:	03ff0000 	mvnseq	r0, #0
20004ff4:	02000000 	andeq	r0, r0, #0
	...
20005000:	03ff0000 	mvnseq	r0, #0
20005004:	02800c00 	addeq	r0, r0, #0, 24
20005008:	00000060 	andeq	r0, r0, r0, rrx
2000500c:	00000000 	andeq	r0, r0, r0
20005010:	03ff0000 	mvnseq	r0, #0
20005014:	03000800 	movweq	r0, #2048	; 0x800
20005018:	00000040 	andeq	r0, r0, r0, asr #32
2000501c:	00000000 	andeq	r0, r0, r0
20005020:	03ff0000 	mvnseq	r0, #0
20005024:	03000800 	movweq	r0, #2048	; 0x800
20005028:	00000040 	andeq	r0, r0, r0, asr #32
2000502c:	00000000 	andeq	r0, r0, r0
20005030:	03ff8000 	mvnseq	r8, #0
20005034:	03000a00 	movweq	r0, #2560	; 0xa00
20005038:	00000040 	andeq	r0, r0, r0, asr #32
2000503c:	00000000 	andeq	r0, r0, r0
20005040:	01ffb000 	mvnseq	fp, r0
20005044:	03000c00 	movweq	r0, #3072	; 0xc00
20005048:	00000040 	andeq	r0, r0, r0, asr #32
2000504c:	00000000 	andeq	r0, r0, r0
20005050:	01fff800 	mvnseq	pc, r0, lsl #16
20005054:	07800c00 	streq	r0, [r0, r0, lsl #24]
20005058:	00000060 	andeq	r0, r0, r0, rrx
2000505c:	00000000 	andeq	r0, r0, r0
20005060:	01fffc00 	mvnseq	pc, r0, lsl #24
20005064:	04001800 	streq	r1, [r0], #-2048	; 0xfffff800
20005068:	00c00058 	sbceq	r0, r0, r8, asr r0
2000506c:	00000000 	andeq	r0, r0, r0
20005070:	00fffc00 	rscseq	pc, pc, r0, lsl #24
20005074:	06001400 	streq	r1, [r0], -r0, lsl #8
20005078:	00c000c0 	sbceq	r0, r0, r0, asr #1
2000507c:	00000000 	andeq	r0, r0, r0
20005080:	007ffc00 	rsbseq	pc, pc, r0, lsl #24
20005084:	45001000 	strmi	r1, [r0, #-0]
20005088:	008000a0 	addeq	r0, r0, r0, lsr #1
2000508c:	00000000 	andeq	r0, r0, r0
20005090:	007ffe00 	rsbseq	pc, pc, r0, lsl #28
20005094:	80001000 	andhi	r1, r0, r0
20005098:	008000c1 	addeq	r0, r0, r1, asr #1
2000509c:	00000000 	andeq	r0, r0, r0
200050a0:	003ffe00 	eorseq	pc, pc, r0, lsl #28
200050a4:	00001000 	andeq	r1, r0, r0
200050a8:	00a000f0 	strdeq	r0, [r0], r0	; <UNPREDICTABLE>
200050ac:	00000000 	andeq	r0, r0, r0
200050b0:	003fff00 	eorseq	pc, pc, r0, lsl #30
200050b4:	00001000 	andeq	r1, r0, r0
200050b8:	00c000e0 	sbceq	r0, r0, r0, ror #1
200050bc:	00000000 	andeq	r0, r0, r0
200050c0:	001fff80 	andseq	pc, pc, r0, lsl #31
200050c4:	02001800 	andeq	r1, r0, #0, 16
200050c8:	00c000c0 	sbceq	r0, r0, r0, asr #1
200050cc:	00000000 	andeq	r0, r0, r0
200050d0:	0019fffe 			; <UNDEFINED> instruction: 0x0019fffe
200050d4:	02001400 	andeq	r1, r0, #0, 8
200050d8:	00803000 	addeq	r3, r0, r0
200050dc:	00000000 	andeq	r0, r0, r0
200050e0:	0018ffff 			; <UNDEFINED> instruction: 0x0018ffff
200050e4:	05033f00 	streq	r3, [r3, #-3840]	; 0xfffff100
200050e8:	01000000 	mrseq	r0, (UNDEF: 0)
200050ec:	c0000000 	andgt	r0, r0, r0
200050f0:	0008ffff 	strdeq	pc, [r8], -pc	; <UNPREDICTABLE>
200050f4:	00c0e400 	sbceq	lr, r0, r0, lsl #8
200050f8:	01000004 	tsteq	r0, r4
200050fc:	c0000000 	andgt	r0, r0, r0
20005100:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20005104:	00002000 	andeq	r2, r0, r0
20005108:	01000008 	tsteq	r0, r8
2000510c:	e0000000 	and	r0, r0, r0
20005110:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20005114:	00001000 	andeq	r1, r0, r0
20005118:	01000006 	tsteq	r0, r6
2000511c:	e0000000 	and	r0, r0, r0
20005120:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
20005124:	80000000 	andhi	r0, r0, r0
20005128:	01800001 	orreq	r0, r0, r1
2000512c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20005130:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
20005134:	00400000 	subeq	r0, r0, r0
20005138:	01400000 	mrseq	r0, (UNDEF: 64)
2000513c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20005140:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
20005144:	03800000 	orreq	r0, r0, #0
20005148:	01300000 	teqeq	r0, r0
2000514c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20005150:	00001bff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
20005154:	10e00000 	rscne	r0, r0, r0
20005158:	03000000 	movweq	r0, #0
2000515c:	fc000000 	stc2	0, cr0, [r0], {-0}
20005160:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005164:	0f800000 	svceq	0x00800000
20005168:	03900000 	orrseq	r0, r0, #0
2000516c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20005170:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005174:	00000000 	andeq	r0, r0, r0
20005178:	03e00000 	mvneq	r0, #0
2000517c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20005180:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005184:	00000000 	andeq	r0, r0, r0
20005188:	03f40000 	mvnseq	r0, #0
2000518c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20005190:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005194:	00002000 	andeq	r2, r0, r0
20005198:	01f80000 	mvnseq	r0, r0
2000519c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
200051a0:	0000007f 	andeq	r0, r0, pc, ror r0
200051a4:	0010c000 	andseq	ip, r0, r0
200051a8:	03f80000 	mvnseq	r0, #0
200051ac:	ff800000 			; <UNDEFINED> instruction: 0xff800000
200051b0:	0000003f 	andeq	r0, r0, pc, lsr r0
200051b4:	000f0000 	andeq	r0, pc, r0
200051b8:	03e000e0 	mvneq	r0, #224	; 0xe0
200051bc:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
200051c0:	0000001f 	andeq	r0, r0, pc, lsl r0
200051c4:	00026000 	andeq	r6, r2, r0
200051c8:	035001f0 	cmpeq	r0, #240, 2	; 0x3c
200051cc:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
200051d0:	0000001f 	andeq	r0, r0, pc, lsl r0
200051d4:	00118000 	andseq	r8, r1, r0
200051d8:	03ec01f0 	mvneq	r0, #240, 2	; 0x3c
200051dc:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
200051e0:	0000000f 	andeq	r0, r0, pc
200051e4:	200e0000 	andcs	r0, lr, r0
200051e8:	00a022f0 	strdeq	r2, [r0], r0	; <UNPREDICTABLE>
200051ec:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
200051f0:	00000007 	andeq	r0, r0, r7
200051f4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
200051f8:	03c0c170 	biceq	ip, r0, #112, 2
200051fc:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
20005200:	00000003 	andeq	r0, r0, r3
20005204:	e4000000 	str	r0, [r0], #-0
20005208:	03c270f3 	biceq	r7, r2, #243	; 0xf3

2000520c <castle_light_bits>:
	...
20005268:	00000040 	andeq	r0, r0, r0, asr #32
	...
20005274:	0c003000 	stceq	0, cr3, [r0], {-0}
20005278:	00000040 	andeq	r0, r0, r0, asr #32
	...
20005284:	0e007000 	cdpeq	0, 0, cr7, cr0, cr0, {0}
20005288:	000600c0 	andeq	r0, r6, r0, asr #1
	...
20005294:	0f007010 	svceq	0x00007010
20005298:	000601e0 	andeq	r0, r6, r0, ror #3
	...
200052a4:	1f007810 	svcne	0x00007810
200052a8:	000601e0 	andeq	r0, r6, r0, ror #3
	...
200052b4:	3f81f818 	svccc	0x0081f818
200052b8:	001f03e0 	andseq	r0, pc, r0, ror #7
	...
200052c4:	ffe3f818 			; <UNDEFINED> instruction: 0xffe3f818
200052c8:	001fc7f1 			; <UNDEFINED> instruction: 0x001fc7f1
	...
200052d4:	fffffc1c 			; <UNDEFINED> instruction: 0xfffffc1c
200052d8:	083fffff 	ldmdaeq	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
	...
200052e4:	fffffe3c 			; <UNDEFINED> instruction: 0xfffffe3c
200052e8:	187fffff 	ldmdane	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
	...
200052f4:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
200052f8:	3c7fffff 	ldclcc	15, cr15, [pc], #-1020	; 20004f04 <castle_gray_bits+0xf8>
	...
20005304:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20005308:	3fffffff 	svccc	0x00ffffff
2000530c:	00000000 	andeq	r0, r0, r0
20005310:	60000000 	andvs	r0, r0, r0
20005314:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20005318:	7fffffff 	svcvc	0x00ffffff
2000531c:	00000000 	andeq	r0, r0, r0
20005320:	70000000 	andvc	r0, r0, r0
20005324:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005328:	7fffffff 	svcvc	0x00ffffff
2000532c:	00000000 	andeq	r0, r0, r0
20005330:	70000000 	andvc	r0, r0, r0
20005334:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005338:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000533c:	00000000 	andeq	r0, r0, r0
20005340:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20005344:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005348:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000534c:	00000000 	andeq	r0, r0, r0
20005350:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20005354:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005358:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000535c:	00000000 	andeq	r0, r0, r0
20005360:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20005364:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005368:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000536c:	00000000 	andeq	r0, r0, r0
20005370:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20005374:	fb6fffff 	blx	21c0537a <firstTime.4093+0x1bff07e>
20005378:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000537c:	00000000 	andeq	r0, r0, r0
20005380:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20005384:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
20005388:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000538c:	00000000 	andeq	r0, r0, r0
20005390:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20005394:	f407ffff 			; <UNDEFINED> instruction: 0xf407ffff
20005398:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000539c:	00000000 	andeq	r0, r0, r0
200053a0:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200053a4:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
200053a8:	ffffff6d 			; <UNDEFINED> instruction: 0xffffff6d
200053ac:	00000000 	andeq	r0, r0, r0
200053b0:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200053b4:	f80fffff 			; <UNDEFINED> instruction: 0xf80fffff
200053b8:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200053bc:	00000000 	andeq	r0, r0, r0
200053c0:	fc000000 	stc2	0, cr0, [r0], {-0}
200053c4:	f80fedbf 			; <UNDEFINED> instruction: 0xf80fedbf
200053c8:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200053cc:	00000000 	andeq	r0, r0, r0
200053d0:	fc000000 	stc2	0, cr0, [r0], {-0}
200053d4:	f80fc01f 			; <UNDEFINED> instruction: 0xf80fc01f
200053d8:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
200053dc:	00000000 	andeq	r0, r0, r0
200053e0:	fc000000 	stc2	0, cr0, [r0], {-0}
200053e4:	f90fc81f 			; <UNDEFINED> instruction: 0xf90fc81f
200053e8:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
200053ec:	00000000 	andeq	r0, r0, r0
200053f0:	fc000000 	stc2	0, cr0, [r0], {-0}
200053f4:	f90fd41f 			; <UNDEFINED> instruction: 0xf90fd41f
200053f8:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200053fc:	00000000 	andeq	r0, r0, r0
20005400:	fc000000 	stc2	0, cr0, [r0], {-0}
20005404:	f90fe03f 			; <UNDEFINED> instruction: 0xf90fe03f
20005408:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
2000540c:	00000000 	andeq	r0, r0, r0
20005410:	fc000000 	stc2	0, cr0, [r0], {-0}
20005414:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
20005418:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
2000541c:	00000000 	andeq	r0, r0, r0
20005420:	fc000000 	stc2	0, cr0, [r0], {-0}
20005424:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
20005428:	fedbff19 	mrc2	15, 6, pc, cr11, cr9, {0}
2000542c:	00000000 	andeq	r0, r0, r0
20005430:	fc000000 	stc2	0, cr0, [r0], {-0}
20005434:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
20005438:	fd01ff11 	stc2	15, cr15, [r1, #-68]	; 0xffffffbc
2000543c:	00000000 	andeq	r0, r0, r0
20005440:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20005444:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
20005448:	fd01ff19 	stc2	15, cr15, [r1, #-100]	; 0xffffff9c
2000544c:	00000000 	andeq	r0, r0, r0
20005450:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20005454:	f007e03f 			; <UNDEFINED> instruction: 0xf007e03f
20005458:	fc01ff01 	stc2	15, cr15, [r1], {1}
2000545c:	00000000 	andeq	r0, r0, r0
20005460:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20005464:	f007c01f 			; <UNDEFINED> instruction: 0xf007c01f
20005468:	fe03ff01 	cdp2	15, 0, cr15, cr3, cr1, {0}
2000546c:	00000000 	andeq	r0, r0, r0
20005470:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20005474:	b007c01f 	andlt	ip, r7, pc, lsl r0
20005478:	fe03fe01 	cdp2	14, 0, cr15, cr3, cr1, {0}
2000547c:	00000000 	andeq	r0, r0, r0
20005480:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20005484:	0007c01f 	andeq	ip, r7, pc, lsl r0
20005488:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
2000548c:	00000000 	andeq	r0, r0, r0
20005490:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20005494:	0007c01f 	andeq	ip, r7, pc, lsl r0
20005498:	fe03fe10 	mcr2	14, 0, pc, cr3, cr0, {0}	; <UNPREDICTABLE>
2000549c:	00000000 	andeq	r0, r0, r0
200054a0:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
200054a4:	0007c21f 	andeq	ip, r7, pc, lsl r2
200054a8:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
200054ac:	00000000 	andeq	r0, r0, r0
200054b0:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
200054b4:	0087c31f 	addeq	ip, r7, pc, lsl r3
200054b8:	fe03a400 	cdp2	4, 0, cr10, cr3, cr0, {0}
200054bc:	00000000 	andeq	r0, r0, r0
200054c0:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
200054c4:	00c7c31f 	sbceq	ip, r7, pc, lsl r3
200054c8:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
200054cc:	00000000 	andeq	r0, r0, r0
200054d0:	ffe60000 			; <UNDEFINED> instruction: 0xffe60000
200054d4:	00c4c01f 	sbceq	ip, r4, pc, lsl r0
200054d8:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
200054dc:	00000000 	andeq	r0, r0, r0
200054e0:	ffe70000 			; <UNDEFINED> instruction: 0xffe70000
200054e4:	8000001f 	andhi	r0, r0, pc, lsl r0
200054e8:	fc000001 	stc2	0, cr0, [r0], {1}
200054ec:	00000000 	andeq	r0, r0, r0
200054f0:	fff70000 			; <UNDEFINED> instruction: 0xfff70000
200054f4:	8000001f 	andhi	r0, r0, pc, lsl r0
200054f8:	fc000009 	stc2	0, cr0, [r0], {9}
200054fc:	00000000 	andeq	r0, r0, r0
20005500:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20005504:	8000001f 	andhi	r0, r0, pc, lsl r0
20005508:	fc200001 	stc2	0, cr0, [r0], #-4
2000550c:	00000000 	andeq	r0, r0, r0
20005510:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20005514:	0000001f 	andeq	r0, r0, pc, lsl r0
20005518:	fc300000 	ldc2	0, cr0, [r0], #-0
2000551c:	00000000 	andeq	r0, r0, r0
20005520:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20005524:	0000000f 	andeq	r0, r0, pc
20005528:	fc300000 	ldc2	0, cr0, [r0], #-0
2000552c:	00000000 	andeq	r0, r0, r0
20005530:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20005534:	0000000f 	andeq	r0, r0, pc
20005538:	fc000000 	stc2	0, cr0, [r0], {-0}
2000553c:	00000000 	andeq	r0, r0, r0
20005540:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
20005544:	1000000f 	andne	r0, r0, pc
20005548:	fc000000 	stc2	0, cr0, [r0], {-0}
2000554c:	00000000 	andeq	r0, r0, r0
20005550:	ffffe400 			; <UNDEFINED> instruction: 0xffffe400
20005554:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
20005558:	f8080000 			; <UNDEFINED> instruction: 0xf8080000
2000555c:	00000000 	andeq	r0, r0, r0
20005560:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20005564:	0000000f 	andeq	r0, r0, pc
20005568:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
2000556c:	00000000 	andeq	r0, r0, r0
20005570:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20005574:	00000007 	andeq	r0, r0, r7
20005578:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
2000557c:	00000000 	andeq	r0, r0, r0
20005580:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20005584:	00000007 	andeq	r0, r0, r7
20005588:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
2000558c:	00000000 	andeq	r0, r0, r0
20005590:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20005594:	00100007 	andseq	r0, r0, r7
20005598:	f8040000 			; <UNDEFINED> instruction: 0xf8040000
2000559c:	00000000 	andeq	r0, r0, r0
200055a0:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
200055a4:	00080007 	andeq	r0, r8, r7
200055a8:	f80001c0 			; <UNDEFINED> instruction: 0xf80001c0
200055ac:	00000000 	andeq	r0, r0, r0
200055b0:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
200055b4:	00000007 	andeq	r0, r0, r7
200055b8:	f8080300 			; <UNDEFINED> instruction: 0xf8080300
200055bc:	00000000 	andeq	r0, r0, r0
200055c0:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
200055c4:	00200007 	eoreq	r0, r0, r7
200055c8:	f8080200 			; <UNDEFINED> instruction: 0xf8080200
200055cc:	00000000 	andeq	r0, r0, r0
200055d0:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
200055d4:	00000007 	andeq	r0, r0, r7
200055d8:	f8000200 			; <UNDEFINED> instruction: 0xf8000200
200055dc:	00000000 	andeq	r0, r0, r0
200055e0:	fffffff0 			; <UNDEFINED> instruction: 0xfffffff0
200055e4:	00000007 	andeq	r0, r0, r7
200055e8:	f8000100 			; <UNDEFINED> instruction: 0xf8000100
200055ec:	00000000 	andeq	r0, r0, r0
200055f0:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
200055f4:	01000007 	tsteq	r0, r7
200055f8:	f8100280 			; <UNDEFINED> instruction: 0xf8100280
200055fc:	00000000 	andeq	r0, r0, r0
20005600:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20005604:	02000007 	andeq	r0, r0, #7
20005608:	f8000300 			; <UNDEFINED> instruction: 0xf8000300

2000560c <title_light_bits>:
	...
20005628:	00000400 	andeq	r0, r0, r0, lsl #8
2000562c:	30000000 	andcc	r0, r0, r0
20005630:	f80f9e06 			; <UNDEFINED> instruction: 0xf80f9e06
20005634:	06300000 	ldrteq	r0, [r0], -r0
20005638:	00cb8cba 	strheq	r8, [fp], #202	; 0xca
2000563c:	ba033000 	blt	200d1644 <firstTime.4093+0xcb348>
20005640:	0000eb4f 	andeq	lr, r0, pc, asr #22
20005644:	439ef3f0 	orrsmi	pc, lr, #240, 6	; 0xc0000003
20005648:	f000003a 			; <UNDEFINED> instruction: 0xf000003a
2000564c:	5a478e9b 	bpl	211e90c0 <firstTime.4093+0x11e2dc4>
20005650:	9b300000 	blls	20c05658 <firstTime.4093+0xbff35c>
20005654:	019bcd36 	orrseq	ip, fp, r6, lsr sp
20005658:	66db3000 	ldrbvs	r3, [fp], r0
2000565c:	000319d9 	ldrdeq	r1, [r3], -r9
20005660:	19667330 	stmdbne	r6!, {r4, r5, r8, r9, ip, sp, lr}^
20005664:	30000310 	andcc	r0, r0, r0, lsl r3
20005668:	00000001 	andeq	r0, r0, r1
2000566c:	80000000 	andhi	r0, r0, r0
20005670:	001d3e7b 	andseq	r3, sp, fp, ror lr
20005674:	0ac00000 	beq	1f00567c <startup-0xffa984>
20005678:	00000528 	andeq	r0, r0, r8, lsr #10
2000567c:	ec3a4000 	ldc	0, cr4, [sl], #-0
20005680:	0000000d 	andeq	r0, r0, sp
20005684:	05240bc0 	streq	r0, [r4, #-3008]!	; 0xfffff440
20005688:	00f00000 	rscseq	r0, r0, r0
2000568c:	001c0000 	andseq	r0, ip, r0
20005690:	03ebb000 	mvneq	fp, #0
20005694:	00000000 	andeq	r0, r0, r0
20005698:	0c032330 	stceq	3, cr2, [r3], {48}	; 0x30
2000569c:	300123e4 	andcc	r2, r1, r4, ror #7
200056a0:	940c1b2a 	strls	r1, [ip], #-2858	; 0xfffff4d6
200056a4:	ea300120 	b	20c05b2c <firstTime.4093+0xbff830>
200056a8:	ec860c3d 	stc	12, cr0, [r6], {61}	; 0x3d
200056ac:	06ea3001 	strbteq	r3, [sl], r1
200056b0:	01e69648 	mvneq	r9, r8, asr #12
200056b4:	4b9e6b30 	blmi	1e7a037c <startup-0x185fc84>
200056b8:	30012696 	mulcc	r1, r6, r6
200056bc:	92bbb06b 	adcsls	fp, fp, #107	; 0x6b
200056c0:	69f00126 	ldmibvs	r0!, {r1, r2, r5, r8}^
200056c4:	2691b832 			; <UNDEFINED> instruction: 0x2691b832
200056c8:	1e687001 	cdpne	0, 6, cr7, cr8, cr1, {0}
200056cc:	010e9110 	tsteq	lr, r0, lsl r1
	...

200056e0 <title_gray_bits>:
	...
200056e8:	40000000 	andmi	r0, r0, r0
200056ec:	0f840000 	svceq	0x00840000
200056f0:	00b0c3fe 	ldrshteq	ip, [r0], lr
200056f4:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
200056f8:	001f8f1f 	andseq	r8, pc, pc, lsl pc	; <UNPREDICTABLE>
200056fc:	fffffbf8 			; <UNDEFINED> instruction: 0xfffffbf8
20005700:	c8001fff 	stmdagt	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
20005704:	07f061f9 			; <UNDEFINED> instruction: 0x07f061f9
20005708:	f1cc001f 			; <UNDEFINED> instruction: 0xf1cc001f
2000570c:	be347305 	cdplt	3, 3, cr7, cr4, cr5, {0}
20005710:	05f0ce00 	ldrbeq	ip, [r0, #3584]!	; 0xe00
20005714:	007e1430 	rsbseq	r1, lr, r0, lsr r4
20005718:	2041080f 	subcs	r0, r1, pc, lsl #16
2000571c:	0e003e01 	cdpeq	14, 0, cr3, cr0, cr1, {0}
20005720:	01384060 	teqeq	r8, r0, rrx
20005724:	600c001e 	andvs	r0, ip, lr, lsl r0
20005728:	1c4030c0 	mcrrne	0, 12, r3, r0, cr0
2000572c:	10208c00 	eorne	r8, r0, r0, lsl #24
20005730:	0038c024 	eorseq	ip, r8, r4, lsr #32
20005734:	0411088c 	ldreq	r0, [r1], #-2188	; 0xfffff774
20005738:	c800f8ce 	stmdagt	r0, {r1, r2, r3, r6, r7, fp, ip, sp, lr, pc}
2000573c:	ffe6990c 			; <UNDEFINED> instruction: 0xffe6990c
20005740:	7cfa0178 	ldfvce	f0, [sl], #480	; 0x1e0
20005744:	3fe0c184 	svccc	0x00e0c184
20005748:	013ff400 	teqeq	pc, r0, lsl #8	; <UNPREDICTABLE>
2000574c:	001fc0c7 	andseq	ip, pc, r7, asr #1
20005750:	03c03ff0 	biceq	r3, r0, #240, 30	; 0x3c0
20005754:	fc0007e0 	stc2	7, cr0, [r0], {224}	; 0xe0
20005758:	e003803f 	and	r8, r3, pc, lsr r0
2000575c:	7f0c009f 	svcvc	0x000c009f
20005760:	ffc1fbe4 			; <UNDEFINED> instruction: 0xffc1fbe4
20005764:	fc140c03 	ldc2	12, cr0, [r4], {3}
20005768:	03ffc7ff 	mvnseq	ip, #66846720	; 0x3fc0000
2000576c:	f3fc1c0c 	vdup.32	d17, d12[1]
20005770:	0e02dc1b 	mcreq	12, 0, sp, cr2, cr11, {0}
20005774:	63f3e490 	mvnsvs	lr, #144, 8	; 0x90000000
20005778:	018e0218 	orreq	r0, lr, r8, lsl r2
2000577c:	1251e382 	subsne	lr, r1, #134217730	; 0x8000002
20005780:	88018e02 	stmdahi	r1, {r1, r9, sl, fp, pc}
20005784:	020061a7 	andeq	r6, r0, #-1073741783	; 0xc0000029
20005788:	2460008e 	strbtcs	r0, [r0], #-142	; 0xffffff72
2000578c:	8e021041 	cdphi	0, 0, cr1, cr2, cr1, {2}
20005790:	41000300 	mrsmi	r0, LR_irq
20005794:	000e0290 	muleq	lr, r0, r2
20005798:	9048008d 	subls	r0, r8, sp, lsl #1
2000579c:	81040c02 	tsthi	r4, r2, lsl #24
200057a0:	02a04c87 	adceq	r4, r0, #34560	; 0x8700
200057a4:	cffffffc 	svcgt	0x00fffffc
200057a8:	8203e2fc 	andhi	lr, r3, #252, 4	; 0xc000000f
200057ac:	e3f81c07 	mvns	r1, #1792	; 0x700
200057b0:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

200057b4 <title_black_bits>:
	...
200057dc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
200057e0:	01000040 	tsteq	r0, r0, asr #32
200057e4:	400c0000 	andmi	r0, ip, r0
200057e8:	00010080 	andeq	r0, r1, r0, lsl #1
200057ec:	9c200400 	cfstrsls	mvf0, [r0], #-0
200057f0:	000001c4 	andeq	r0, r0, r4, asr #3
200057f4:	a4803104 	strge	r3, [r0], #260	; 0x104
200057f8:	04c00001 	strbeq	r0, [r0], #1
200057fc:	02240209 	eoreq	r0, r4, #-1879048192	; 0x90000000
20005800:	89044000 	stmdbhi	r4, {lr}
20005804:	00042602 	andeq	r2, r4, r2, lsl #12
20005808:	e2888440 	add	r8, r8, #64, 8	; 0x40000000
2000580c:	00000421 	andeq	r0, r0, r1, lsr #8
20005810:	001966f2 			; <UNDEFINED> instruction: 0x001966f2
20005814:	03000007 	movweq	r0, #7
20005818:	00020000 	andeq	r0, r2, r0
2000581c:	f4000000 	vst4.8	{d0-d3}, [r0], r0
20005820:	00003a10 	andeq	r3, r0, r0, lsl sl
20005824:	10058000 	andne	r8, r5, r0
20005828:	00000012 	andeq	r0, r0, r2, lsl r0
2000582c:	1ad87400 	bne	1f622834 <startup-0x9dd7cc>
20005830:	80000000 	andhi	r0, r0, r0
20005834:	0022041b 	eoreq	r0, r2, fp, lsl r4
20005838:	00004000 	andeq	r4, r0, r0
2000583c:	00003800 	andeq	r3, r0, r0, lsl #16
20005840:	0000c0c0 	andeq	ip, r0, r0, asr #1
20005844:	c0000000 	andgt	r0, r0, r0
20005848:	08000045 	stmdaeq	r0, {r0, r2, r6}
2000584c:	144000c7 	strbne	r0, [r0], #-199	; 0xffffff39
20005850:	01281040 			; <UNDEFINED> instruction: 0x01281040
20005854:	71144000 	tstvc	r4, r0
20005858:	00190810 	andseq	r0, r9, r0, lsl r8
2000585c:	90019440 	andls	r9, r1, r0, asr #8
20005860:	4000c928 	andmi	ip, r0, r8, lsr #18
20005864:	2c444c94 	mcrrcs	12, 9, r4, r4, cr4
20005868:	96000049 	strls	r0, [r0], -r9, asr #32
2000586c:	49264740 	stmdbmi	r6!, {r6, r8, r9, sl, lr}
20005870:	60938000 	addsvs	r8, r3, r0
20005874:	00512268 	subseq	r2, r1, r8, ror #4
20005878:	30000000 	andcc	r0, r0, r0
2000587c:	00001d03 	andeq	r1, r0, r3, lsl #26
	...

20005888 <bg_bits>:
	...
20005898:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
2000589c:	0000001f 	andeq	r0, r0, pc, lsl r0
	...
200058a8:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
200058ac:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
200058b8:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
200058bc:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
	...
200058c8:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200058cc:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
	...
200058d8:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200058dc:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
200058e8:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
200058ec:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
200058f8:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
200058fc:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20005a03 <bg_bits+0x17b>	; <UNPREDICTABLE>
20005900:	0001f000 	andeq	pc, r1, r0
20005904:	00000000 	andeq	r0, r0, r0
20005908:	007fe000 	rsbseq	lr, pc, r0
2000590c:	0ffffffe 	svceq	0x00fffffe
20005910:	0003f800 	andeq	pc, r3, r0, lsl #16
20005914:	00000000 	andeq	r0, r0, r0
20005918:	003fe000 	eorseq	lr, pc, r0
2000591c:	7fffffc0 	svcvc	0x00ffffc0
20005920:	0003f800 	andeq	pc, r3, r0, lsl #16
20005924:	001f8000 	andseq	r8, pc, r0
20005928:	001fe000 	andseq	lr, pc, r0
2000592c:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20005930:	0003f801 	andeq	pc, r3, r1, lsl #16
20005934:	003fc000 	eorseq	ip, pc, r0
20005938:	003fe000 	eorseq	lr, pc, r0
2000593c:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
20005940:	3f83f807 	svccc	0x0083f807
20005944:	003fe000 	eorseq	lr, pc, r0
20005948:	01ffe000 	mvnseq	lr, r0
2000594c:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20005950:	7fc3f80f 	svcvc	0x00c3f80f
20005954:	003fe7f8 	ldrshteq	lr, [pc], -r8
20005958:	07ffe000 	ldrbeq	lr, [pc, r0]!
2000595c:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
20005960:	7fe1f01f 	svcvc	0x00e1f01f
20005964:	003ffffc 	ldrshteq	pc, [pc], -ip	; <UNPREDICTABLE>
20005968:	3fffc000 	svccc	0x00ffc000
2000596c:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20005970:	7ff0003f 	svcvc	0x00f0003f
20005974:	007ffffc 	ldrshteq	pc, [pc], #-252	; <UNPREDICTABLE>
20005978:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
2000597c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20005980:	7ff8007f 	svcvc	0x00f8007f
20005984:	3ffffffc 	svccc	0x00fffffc
20005988:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
2000598c:	f8000003 			; <UNDEFINED> instruction: 0xf8000003
20005990:	7ffc00ff 	svcvc	0x00fc00ff
20005994:	7ffffffc 	svcvc	0x00fffffc
20005998:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
2000599c:	e000000f 	and	r0, r0, pc
200059a0:	7ffe01ff 	svcvc	0x00fe01ff
200059a4:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
200059a8:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
200059ac:	8000001f 	andhi	r0, r0, pc, lsl r0
200059b0:	7fff01ff 	svcvc	0x00ff01ff
200059b4:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
200059b8:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
200059bc:	0000007f 	andeq	r0, r0, pc, ror r0
200059c0:	7fff83ff 	svcvc	0x00ff83ff
200059c4:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
200059c8:	ff800000 			; <UNDEFINED> instruction: 0xff800000
200059cc:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200059d0:	7fffc3fe 	svcvc	0x00ffc3fe
200059d4:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
200059d8:	fc7ffff0 	ldc2l	15, cr15, [pc], #-960	; 20005620 <title_light_bits+0x14>
200059dc:	07c001ff 			; <UNDEFINED> instruction: 0x07c001ff
200059e0:	7fffe7fc 	svcvc	0x00ffe7fc
200059e4:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
200059e8:	f0fffffe 			; <UNDEFINED> instruction: 0xf0fffffe
200059ec:	0fe007ff 	svceq	0x00e007ff
200059f0:	7ffff7fc 	svcvc	0x00fff7fc
200059f4:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
200059f8:	c0ffffff 	ldrshtgt	pc, [pc], #255	; <UNPREDICTABLE>
200059fc:	0fe00fff 	svceq	0x00e00fff
20005a00:	7ffffff8 	svcvc	0x00fffff8
20005a04:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20005a08:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20005b0f <bg_bits+0x287>	; <UNPREDICTABLE>
20005a0c:	0fe01fff 	svceq	0x00e01fff
20005a10:	7ffffff8 	svcvc	0x00fffff8
20005a14:	7ffffc00 	svcvc	0x00fffc00
20005a18:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20005b1f <bg_bits+0x297>	; <UNPREDICTABLE>
20005a1c:	0fe03ffe 	svceq	0x00e03ffe
20005a20:	3fdffff0 	svccc	0x00dffff0
20005a24:	3ffffe00 	svccc	0x00fffe00
20005a28:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20005b2f <bg_bits+0x2a7>	; <UNPREDICTABLE>
20005a2c:	0fe03ff8 	svceq	0x00e03ff8
20005a30:	3fe7fff0 	svccc	0x00e7fff0
20005a34:	07fffe00 	ldrbeq	pc, [pc, r0, lsl #28]!	; <UNPREDICTABLE>
20005a38:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
20005a3c:	07c07ff0 			; <UNDEFINED> instruction: 0x07c07ff0
20005a40:	1fe7fff0 	svcne	0x00e7fff0
20005a44:	0ffffe00 	svceq	0x00fffe00
20005a48:	03fc00ff 	mvnseq	r0, #255	; 0xff
20005a4c:	0000ffe0 	andeq	pc, r0, r0, ror #31
20005a50:	1ff3ffe0 	svcne	0x00f3ffe0
20005a54:	1ffffe00 	svcne	0x00fffe00
20005a58:	03fc001f 	mvnseq	r0, #31
20005a5c:	0001ff80 	andeq	pc, r1, r0, lsl #31
20005a60:	1ff9ffe0 	svcne	0x00f9ffe0
20005a64:	3ffffe00 	svccc	0x00fffe00
20005a68:	03fc0007 	mvnseq	r0, #7
20005a6c:	0001ff80 	andeq	pc, r1, r0, lsl #31
20005a70:	0ffcffe0 	svceq	0x00fcffe0
20005a74:	3ffdfe00 	svccc	0x00fdfe00
20005a78:	07f80007 	ldrbeq	r0, [r8, r7]!
20005a7c:	0003ff00 	andeq	pc, r3, r0, lsl #30
20005a80:	0ffe7ff0 	svceq	0x00fe7ff0
20005a84:	3ffcfe00 	svccc	0x00fcfe00
20005a88:	07f80003 	ldrbeq	r0, [r8, r3]!
20005a8c:	0007fe00 	andeq	pc, r7, r0, lsl #28
20005a90:	07fe7ff8 			; <UNDEFINED> instruction: 0x07fe7ff8
20005a94:	3ff8fe00 	svccc	0x00f8fe00
20005a98:	0ff80003 	svceq	0x00f80003
20005a9c:	0007fc00 	andeq	pc, r7, r0, lsl #24
20005aa0:	03fffffc 	mvnseq	pc, #252, 30	; 0x3f0
20005aa4:	3ff87c00 	svccc	0x00f87c00
20005aa8:	0ff80003 	svceq	0x00f80003
20005aac:	0007fc00 	andeq	pc, r7, r0, lsl #24
20005ab0:	01fffffe 	ldrsheq	pc, [pc, #254]	; 20005bb6 <bg_bits+0x32e>	; <UNPREDICTABLE>
20005ab4:	1ff00000 	svcne	0x00f00000	; IMB
20005ab8:	0ff00007 	svceq	0x00f00007
20005abc:	000ff800 	andeq	pc, pc, r0, lsl #16
20005ac0:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20005bc7 <bg_bits+0x33f>	; <UNPREDICTABLE>
20005ac4:	07f0003e 			; <UNDEFINED> instruction: 0x07f0003e
20005ac8:	0ff00007 	svceq	0x00f00007
20005acc:	800ff000 	andhi	pc, pc, r0
20005ad0:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20005ad4:	03e0007f 	mvneq	r0, #127	; 0x7f
20005ad8:	0fe00007 	svceq	0x00e00007
20005adc:	c00ff000 	andgt	pc, pc, r0
20005ae0:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
20005ae4:	0000007f 	andeq	r0, r0, pc, ror r0
20005ae8:	0fe00007 	svceq	0x00e00007
20005aec:	e00ff000 	and	pc, pc, r0
20005af0:	007ffeff 	ldrshteq	pc, [pc], #-239	; <UNPREDICTABLE>
20005af4:	0000007f 	andeq	r0, r0, pc, ror r0
20005af8:	0fe00007 	svceq	0x00e00007
20005afc:	f00ff000 			; <UNDEFINED> instruction: 0xf00ff000
20005b00:	003ffe7f 	eorseq	pc, pc, pc, ror lr	; <UNPREDICTABLE>
20005b04:	0000007f 	andeq	r0, r0, pc, ror r0
20005b08:	0fe00007 	svceq	0x00e00007
20005b0c:	f80ff000 			; <UNDEFINED> instruction: 0xf80ff000
20005b10:	001ffc3f 	andseq	pc, pc, pc, lsr ip	; <UNPREDICTABLE>
20005b14:	0000007f 	andeq	r0, r0, pc, ror r0
20005b18:	1fe0000f 	svcne	0x00e0000f
20005b1c:	fc0ff000 	stc2	0, cr15, [pc], {-0}
20005b20:	000ff81f 	andeq	pc, pc, pc, lsl r8	; <UNPREDICTABLE>
20005b24:	0000003e 	andeq	r0, r0, lr, lsr r0
20005b28:	1fe0000f 	svcne	0x00e0000f
20005b2c:	fc07f000 	stc2	0, cr15, [r7], {-0}
20005b30:	0007f00f 	andeq	pc, r7, pc
20005b34:	00000000 	andeq	r0, r0, r0
20005b38:	1fe0000f 	svcne	0x00e0000f
20005b3c:	fc07f000 	stc2	0, cr15, [r7], {-0}
20005b40:	00000007 	andeq	r0, r0, r7
20005b44:	00000000 	andeq	r0, r0, r0
20005b48:	1fe0000f 	svcne	0x00e0000f
20005b4c:	fc07f800 	stc2	8, cr15, [r7], {-0}
20005b50:	00000003 	andeq	r0, r0, r3
20005b54:	000ff800 	andeq	pc, pc, r0, lsl #16
20005b58:	1fc0001f 	svcne	0x00c0001f
20005b5c:	fc07fc00 	stc2	12, cr15, [r7], {-0}
20005b60:	00000001 	andeq	r0, r0, r1
20005b64:	001ffc00 	andseq	pc, pc, r0, lsl #24
20005b68:	1fc0003f 	svcne	0x00c0003f
20005b6c:	fc07ff80 	stc2	15, cr15, [r7], {128}	; 0x80
20005b70:	00000001 	andeq	r0, r0, r1
20005b74:	003fff00 	eorseq	pc, pc, r0, lsl #30
20005b78:	3fc0003f 	svccc	0x00c0003f
20005b7c:	fc07fffc 	stc2	15, cr15, [r7], {252}	; 0xfc
20005b80:	00000001 	andeq	r0, r0, r1
20005b84:	007fff80 	rsbseq	pc, pc, r0, lsl #31
20005b88:	ffc0003f 			; <UNDEFINED> instruction: 0xffc0003f
20005b8c:	fc03ffff 	stc2	15, cr15, [r3], {255}	; 0xff
20005b90:	00000001 	andeq	r0, r0, r1
20005b94:	00ffffe0 	rscseq	pc, pc, r0, ror #31
20005b98:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20005b9c:	fc01ffff 	stc2	15, cr15, [r1], {255}	; 0xff
20005ba0:	00000007 	andeq	r0, r0, r7
20005ba4:	03fffff0 	mvnseq	pc, #240, 30	; 0x3c0
20005ba8:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20005bac:	fc00ffff 	stc2	15, cr15, [r0], {255}	; 0xff
20005bb0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005bb4:	07fffff8 			; <UNDEFINED> instruction: 0x07fffff8
20005bb8:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20005bbc:	fc007fff 	stc2	15, cr7, [r0], {255}	; 0xff
20005bc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005bc4:	07ff7ffd 			; <UNDEFINED> instruction: 0x07ff7ffd
20005bc8:	ff80007f 			; <UNDEFINED> instruction: 0xff80007f
20005bcc:	fc003fff 	stc2	15, cr3, [r0], {255}	; 0xff
20005bd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005bd4:	0ffe3fff 	svceq	0x00fe3fff
20005bd8:	ff1f007f 			; <UNDEFINED> instruction: 0xff1f007f
20005bdc:	f80007ff 			; <UNDEFINED> instruction: 0xf80007ff
20005be0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005be4:	1ffc3fff 	svcne	0x00fc3fff
20005be8:	fc3f807f 	ldc2	0, cr8, [pc], #-508	; 200059f4 <bg_bits+0x16c>
20005bec:	f800003f 			; <UNDEFINED> instruction: 0xf800003f
20005bf0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005bf4:	1ff83fff 	svcne	0x00f83fff
20005bf8:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
20005bfc:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20005c00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005c04:	3ff03fff 	svccc	0x00f03fff
20005c08:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
20005c0c:	c0000000 	andgt	r0, r0, r0
20005c10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005c14:	7fe03fff 	svcvc	0x00e03fff
20005c18:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
20005c1c:	00000000 	andeq	r0, r0, r0
20005c20:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20005c24:	7fc03fff 	svcvc	0x00c03fff
20005c28:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
20005c2c:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
20005c30:	f800000f 			; <UNDEFINED> instruction: 0xf800000f
20005c34:	ffc01fff 			; <UNDEFINED> instruction: 0xffc01fff
20005c38:	001f003f 	andseq	r0, pc, pc, lsr r0	; <UNPREDICTABLE>
20005c3c:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20005c40:	f8007fff 			; <UNDEFINED> instruction: 0xf8007fff
20005c44:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
20005c48:	0000003f 	andeq	r0, r0, pc, lsr r0
20005c4c:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20005c50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005c54:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
20005c58:	0000003f 	andeq	r0, r0, pc, lsr r0
20005c5c:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20005c60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005c64:	ff001fff 			; <UNDEFINED> instruction: 0xff001fff
20005c68:	0000003f 	andeq	r0, r0, pc, lsr r0
20005c6c:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20005c70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005c74:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}
20005c78:	0000003f 	andeq	r0, r0, pc, lsr r0
20005c7c:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20005c80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005c84:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}

20005c88 <current_screen>:
20005c88:	00000001 	andeq	r0, r0, r1

20005c8c <delay_until_text.4253>:
20005c8c:	0000006e 	andeq	r0, r0, lr, rrx

20005c90 <long_text.4251>:
20005c90:	00000028 	andeq	r0, r0, r8, lsr #32

20005c94 <short_text.4252>:
20005c94:	00000014 	andeq	r0, r0, r4, lsl r0

20005c98 <fire_black_2_bits>:
	...
20005ca0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>

20005ca4 <fire1_gray_bits>:
20005ca4:	00000000 	andeq	r0, r0, r0
20005ca8:	06000804 	streq	r0, [r0], -r4, lsl #16
20005cac:	02494204 	subeq	r4, r9, #4, 4	; 0x40000000

20005cb0 <fire1_light_bits>:
20005cb0:	00002000 	andeq	r2, r0, r0
20005cb4:	48000010 	stmdami	r0, {r4}
20005cb8:	2c243020 	stccs	0, cr3, [r4], #-128	; 0xffffff80

20005cbc <fire2_gray_bits>:
20005cbc:	00000000 	andeq	r0, r0, r0
20005cc0:	10220000 	eorne	r0, r2, r0
20005cc4:	00420444 	subeq	r0, r2, r4, asr #8

20005cc8 <fire2_light_bits>:
20005cc8:	04200000 	strteq	r0, [r0], #-0
20005ccc:	240c0010 	strcs	r0, [ip], #-16
20005cd0:	123c6008 	eorsne	r6, ip, #8

20005cd4 <fire3_gray_bits>:
20005cd4:	00000000 	andeq	r0, r0, r0
20005cd8:	24100802 	ldrcs	r0, [r0], #-2050	; 0xfffff7fe
20005cdc:	00020260 	andeq	r0, r2, r0, ror #4

20005ce0 <fire3_light_bits>:
20005ce0:	10200000 	eorne	r0, r0, r0
20005ce4:	18040400 	stmdane	r4, {sl}
20005ce8:	143c5812 	ldrtne	r5, [ip], #-2066	; 0xfffff7ee

20005cec <fire4_gray_bits>:
20005cec:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
20005cf0:	10320000 	eorsne	r0, r2, r0
20005cf4:	02400012 	subeq	r0, r0, #18

20005cf8 <fire4_light_bits>:
20005cf8:	00001000 	andeq	r1, r0, r0
20005cfc:	04082000 	streq	r2, [r8], #-0
20005d00:	24283a0c 	strtcs	r3, [r8], #-2572	; 0xfffff5f4

20005d04 <fire5_gray_bits>:
20005d04:	00000000 	andeq	r0, r0, r0
20005d08:	22001020 	andcs	r1, r0, #32
20005d0c:	04044206 	streq	r4, [r4], #-518	; 0xfffffdfa

20005d10 <fire5_light_bits>:
20005d10:	00040000 	andeq	r0, r4, r0
20005d14:	04240800 	strteq	r0, [r4], #-2048	; 0xfffff800
20005d18:	502a1810 	eorpl	r1, sl, r0, lsl r8

20005d1c <firstTime.4076>:
20005d1c:	00000001 	andeq	r0, r0, r1

20005d20 <bird1_black_bits>:
	...
20005d30:	00010040 	andeq	r0, r1, r0, asr #32
20005d34:	00118060 	andseq	r8, r1, r0, rrx
20005d38:	00118060 	andseq	r8, r1, r0, rrx
20005d3c:	001b80ec 	andseq	r8, fp, ip, ror #1
20005d40:	003f81fc 	ldrshteq	r8, [pc], -ip
20005d44:	007fe1f8 	ldrshteq	lr, [pc], #-24
20005d48:	007ff3f8 	ldrshteq	pc, [pc], #-56	; <UNPREDICTABLE>
20005d4c:	003ffff8 	ldrshteq	pc, [pc], -r8	; <UNPREDICTABLE>
20005d50:	003fedf8 	ldrshteq	lr, [pc], -r8
20005d54:	001ff1f0 			; <UNDEFINED> instruction: 0x001ff1f0
20005d58:	000ff0e0 	andeq	pc, pc, r0, ror #1
20005d5c:	0007ff80 	andeq	pc, r7, r0, lsl #31
20005d60:	00007c00 	andeq	r7, r0, r0, lsl #24
20005d64:	00008800 	andeq	r8, r0, r0, lsl #16
20005d68:	00033000 	andeq	r3, r3, r0
20005d6c:	00011000 	andeq	r1, r1, r0
	...

20005d84 <bird1_gray_bits>:
	...
20005db8:	00000e00 	andeq	r0, r0, r0, lsl #28
20005dbc:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

20005de8 <bird1_light_bits>:
	...
20005e18:	00001200 	andeq	r1, r0, r0, lsl #4
	...

20005e4c <bird2_black_bits>:
	...
20005e64:	000b0000 	andeq	r0, fp, r0
20005e68:	001e0028 	andseq	r0, lr, r8, lsr #32
20005e6c:	003e0068 	eorseq	r0, lr, r8, rrx
20005e70:	003e007c 	eorseq	r0, lr, ip, ror r0
20005e74:	003e007c 	eorseq	r0, lr, ip, ror r0
20005e78:	007e007c 	rsbseq	r0, lr, ip, ror r0
20005e7c:	007e7cfc 	ldrshteq	r7, [lr], #-204	; 0xffffff34
20005e80:	007ffff8 	ldrshteq	pc, [pc], #-248	; <UNPREDICTABLE>
20005e84:	003fd7f0 	ldrshteq	sp, [pc], -r0
20005e88:	003fc3c0 	eorseq	ip, pc, r0, asr #7
20005e8c:	000fc100 	andeq	ip, pc, r0, lsl #2
20005e90:	00007000 	andeq	r7, r0, r0
20005e94:	0000a000 	andeq	sl, r0, r0
20005e98:	0001e000 	andeq	lr, r1, r0
20005e9c:	0000a000 	andeq	sl, r0, r0
20005ea0:	00008000 	andeq	r8, r0, r0
	...

20005eb0 <bird2_gray_bits>:
	...
20005eec:	00003c00 	andeq	r3, r0, r0, lsl #24
20005ef0:	00003e00 	andeq	r3, r0, r0, lsl #28
	...

20005f14 <bird2_light_bits>:
	...
20005f4c:	00002800 	andeq	r2, r0, r0, lsl #16
	...

20005f78 <bird3_black_bits>:
	...
20005f98:	00280000 	eoreq	r0, r8, r0
20005f9c:	00680020 	rsbeq	r0, r8, r0, lsr #32
20005fa0:	00f80038 	rscseq	r0, r8, r8, lsr r0
20005fa4:	00fc0038 	rscseq	r0, ip, r8, lsr r0
20005fa8:	00fc007c 	rscseq	r0, ip, ip, ror r0
20005fac:	00fe3dfe 	ldrshteq	r3, [lr], #222	; 0xde
20005fb0:	00fffffe 	ldrshteq	pc, [pc], #254	; <UNPREDICTABLE>
20005fb4:	007febfc 	ldrshteq	lr, [pc], #-188
20005fb8:	003ff1f0 	ldrshteq	pc, [pc], -r0	; <UNPREDICTABLE>
20005fbc:	001ff0c0 	andseq	pc, pc, r0, asr #1
20005fc0:	0001e800 	andeq	lr, r1, r0, lsl #16
20005fc4:	00005000 	andeq	r5, r0, r0
20005fc8:	0000f000 	andeq	pc, r0, r0
20005fcc:	00009000 	andeq	r9, r0, r0
	...

20005fdc <bird3_gray_bits>:
	...
2000601c:	00000e00 	andeq	r0, r0, r0, lsl #28
20006020:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

20006040 <bird3_light_bits>:
	...
2000607c:	00001400 	andeq	r1, r0, r0, lsl #8
	...

200060a4 <bird4_black_bits>:
	...
200060d8:	00007800 	andeq	r7, r0, r0, lsl #16
200060dc:	0000ff80 	andeq	pc, r0, r0, lsl #31
200060e0:	0003d7f4 	strdeq	sp, [r3], -r4
200060e4:	008fe3fc 	strdeq	lr, [pc], ip
200060e8:	01ffc1fc 	ldrsheq	ip, [pc, #28]	; 2000610c <bird4_gray_bits+0x4>
200060ec:	00ffd9f8 	ldrshteq	sp, [pc], #152
200060f0:	007fb0f0 	ldrshteq	fp, [pc], #-0
200060f4:	007ea000 	rsbseq	sl, lr, r0
200060f8:	00792000 	rsbseq	r2, r9, r0
200060fc:	00300000 	eorseq	r0, r0, r0
	...

20006108 <bird4_gray_bits>:
	...
20006148:	00001c00 	andeq	r1, r0, r0, lsl #24
2000614c:	00003e00 	andeq	r3, r0, r0, lsl #28
	...

2000616c <bird4_light_bits>:
	...
200061a8:	00002800 	andeq	r2, r0, r0, lsl #16
	...

200061d0 <bird5_black_bits>:
	...
200061fc:	00001c00 	andeq	r1, r0, r0, lsl #24
20006200:	0000ff00 	andeq	pc, r0, r0, lsl #30
20006204:	0003eb00 	andeq	lr, r3, r0, lsl #22
20006208:	0007f180 	andeq	pc, r7, r0, lsl #3
2000620c:	000ff080 	andeq	pc, pc, r0, lsl #1
20006210:	000fff80 	andeq	pc, pc, r0, lsl #31
20006214:	001fd3c0 	andseq	sp, pc, r0, asr #7
20006218:	003fa3c0 	eorseq	sl, pc, r0, asr #7
2000621c:	003fa3c0 	eorseq	sl, pc, r0, asr #7
20006220:	003fd3c0 	eorseq	sp, pc, r0, asr #7
20006224:	003e8380 	eorseq	r8, lr, r0, lsl #7
20006228:	00778580 	rsbseq	r8, r7, r0, lsl #11
2000622c:	00610000 	rsbeq	r0, r1, r0
20006230:	00000000 	andeq	r0, r0, r0

20006234 <bird5_gray_bits>:
	...
2000626c:	00000e00 	andeq	r0, r0, r0, lsl #28
20006270:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

20006298 <bird5_light_bits>:
	...
200062cc:	00001400 	andeq	r1, r0, r0, lsl #8
	...

200062fc <firstTime.4093>:
200062fc:	00000001 	andeq	r0, r0, r1
20006300:	00202020 	eoreq	r2, r0, r0, lsr #32
20006304:	41524b2a 	cmpmi	r2, sl, lsr #22
20006308:	2a202a21 	bcs	20810b94 <firstTime.4093+0x80a898>
2000630c:	2141524b 	cmpcs	r1, fp, asr #4
20006310:	0000002a 	andeq	r0, r0, sl, lsr #32
20006314:	734c4944 	movtvc	r4, #51524	; 0xc944
20006318:	7469772d 	strbtvc	r7, [r9], #-1837	; 0xfffff8d3
2000631c:	73656863 	cmnvc	r5, #6488064	; 0x630000
20006320:	76616820 	strbtvc	r6, [r1], -r0, lsr #16
20006324:	00000065 	andeq	r0, r0, r5, rrx
20006328:	20726f46 	rsbscs	r6, r2, r6, asr #30
2000632c:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
20006330:	65697275 	strbvs	r7, [r9, #-629]!	; 0xfffffd8b
20006334:	68742073 	ldmdavs	r4!, {r0, r1, r4, r5, r6, sp}^
20006338:	00000065 	andeq	r0, r0, r5, rrx
2000633c:	20202020 	eorcs	r2, r0, r0, lsr #32
20006340:	00000000 	andeq	r0, r0, r0
20006344:	6c696f63 	stclvs	15, cr6, [r9], #-396	; 0xfffffe74
20006348:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
2000634c:	6566206e 	strbvs	r2, [r6, #-110]!	; 0xffffff92
20006350:	002c7261 	eoreq	r7, ip, r1, ror #4
20006354:	74616874 	strbtvc	r6, [r1], #-2164	; 0xfffff78c
20006358:	44206120 	strtmi	r6, [r0], #-288	; 0xfffffee0
2000635c:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
20006360:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
20006364:	00000068 	andeq	r0, r0, r8, rrx
20006368:	6e656877 	mcrvs	8, 3, r6, cr5, cr7, {3}
2000636c:	72657665 	rsbvc	r7, r5, #105906176	; 0x6500000
20006370:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
20006374:	65682079 	strbvs	r2, [r8, #-121]!	; 0xffffff87
20006378:	00007261 	andeq	r7, r0, r1, ror #4
2000637c:	6e207369 	cdpvs	3, 2, cr7, cr0, cr9, {3}
20006380:	2e726165 	rpwcssz	f6, f2, f5
20006384:	00000000 	andeq	r0, r0, r0
20006388:	70727573 	rsbsvc	r7, r2, r3, ror r5
2000638c:	69736972 	ldmdbvs	r3!, {r1, r4, r5, r6, r8, fp, sp, lr}^
20006390:	202c676e 	eorcs	r6, ip, lr, ror #14
20006394:	646e6966 	strbtvs	r6, [lr], #-2406	; 0xfffff69a
20006398:	00676e69 	rsbeq	r6, r7, r9, ror #28
2000639c:	69206f53 	stmdbvs	r0!, {r0, r1, r4, r6, r8, r9, sl, fp, sp, lr}
200063a0:	73692074 	cmnvc	r9, #116	; 0x74
200063a4:	69757120 	ldmdbvs	r5!, {r5, r8, ip, sp, lr}^
200063a8:	00006574 	andeq	r6, r0, r4, ror r5
200063ac:	20756f79 	rsbscs	r6, r5, r9, ror pc
200063b0:	65726568 	ldrbvs	r6, [r2, #-1384]!	; 0xfffffa98
200063b4:	0000002c 	andeq	r0, r0, ip, lsr #32
200063b8:	72696568 	rsbvc	r6, r9, #104, 10	; 0x1a000000
200063bc:	206f7420 	rsbcs	r7, pc, r0, lsr #8
200063c0:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
200063c4:	61654c20 	cmnvs	r5, r0, lsr #24
200063c8:	00002e72 	andeq	r2, r0, r2, ror lr
200063cc:	65657571 	strbvs	r7, [r5, #-1393]!	; 0xfffffa8f
200063d0:	6144206e 	cmpvs	r4, lr, rrx
200063d4:	206f6666 	rsbcs	r6, pc, r6, ror #12
200063d8:	4420666f 	strtmi	r6, [r0], #-1647	; 0xfffff991
200063dc:	2c734c49 	ldclcs	12, cr4, [r3], #-292	; 0xfffffedc
200063e0:	00000000 	andeq	r0, r0, r0
200063e4:	706d6574 	rsbvc	r6, sp, r4, ror r5
200063e8:	2c646574 	cfstr64cs	mvdx6, [r4], #-464	; 0xfffffe30
200063ec:	206f7420 	rsbcs	r7, pc, r0, lsr #8
200063f0:	746f6f6c 	strbtvc	r6, [pc], #-3948	; 200063f8 <firstTime.4093+0xfc>
200063f4:	00000000 	andeq	r0, r0, r0
200063f8:	20747542 	rsbscs	r7, r4, r2, asr #10
200063fc:	6279616d 	rsbsvs	r6, r9, #1073741851	; 0x4000001b
20006400:	6f792065 	svcvs	0x00792065
20006404:	65722775 	ldrbvs	r2, [r2, #-1909]!	; 0xfffff88b
20006408:	00000000 	andeq	r0, r0, r0
2000640c:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 2000627c <bird5_gray_bits+0x48>
20006410:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
20006414:	63697220 	cmnvs	r9, #32, 4
20006418:	2c736568 	cfldr64cs	mvdx6, [r3], #-416	; 0xfffffe60
2000641c:	00000000 	andeq	r0, r0, r0
20006420:	6b636977 	blvs	218e0a04 <firstTime.4093+0x18da708>
20006424:	44206465 	strtmi	r6, [r0], #-1125	; 0xfffffb9b
20006428:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
2000642c:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
20006430:	2e736568 	cdpcs	5, 7, cr6, cr3, cr8, {3}
20006434:	00000000 	andeq	r0, r0, r0
20006438:	65727573 	ldrbvs	r7, [r2, #-1395]!	; 0xfffffa8d
2000643c:	79622064 	stmdbvc	r2!, {r2, r5, r6, sp}^
20006440:	00000000 	andeq	r0, r0, r0
20006444:	67206f73 			; <UNDEFINED> instruction: 0x67206f73
20006448:	70706972 	rsbsvc	r6, r0, r2, ror r9
2000644c:	20796c69 	rsbscs	r6, r9, r9, ror #24
20006450:	61657274 	smcvs	22308	; 0x5724
20006454:	0000002d 	andeq	r0, r0, sp, lsr #32
20006458:	6572202d 	ldrbvs	r2, [r2, #-45]!	; 0xffffffd3
2000645c:	20746573 	rsbscs	r6, r4, r3, ror r5
20006460:	20656874 	rsbcs	r6, r5, r4, ror r8
20006464:	74697773 	strbtvc	r7, [r9], #-1907	; 0xfffff88d
20006468:	00216863 	eoreq	r6, r1, r3, ror #16
2000646c:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xfffff1bb
20006470:	62202c72 	eorvs	r2, r0, #29184	; 0x7200
20006474:	65766172 	ldrbvs	r6, [r6, #-370]!	; 0xfffffe8e
20006478:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
2000647c:	002c6863 	eoreq	r6, ip, r3, ror #16
20006480:	20001838 	andcs	r1, r0, r8, lsr r8
20006484:	20001842 	andcs	r1, r0, r2, asr #16
20006488:	2000184c 	andcs	r1, r0, ip, asr #16
2000648c:	20001856 	andcs	r1, r0, r6, asr r8
20006490:	20001860 	andcs	r1, r0, r0, ror #16
20006494:	2000186a 	andcs	r1, r0, sl, ror #16
20006498:	20001874 	andcs	r1, r0, r4, ror r8
2000649c:	2000187e 	andcs	r1, r0, lr, ror r8
200064a0:	20202020 	eorcs	r2, r0, r0, lsr #32
200064a4:	20202020 	eorcs	r2, r0, r0, lsr #32
200064a8:	20202020 	eorcs	r2, r0, r0, lsr #32
200064ac:	20202020 	eorcs	r2, r0, r0, lsr #32
200064b0:	20202020 	eorcs	r2, r0, r0, lsr #32
200064b4:	00000000 	andeq	r0, r0, r0
200064b8:	61666c41 	cmnvs	r6, r1, asr #24
200064bc:	656d756e 	strbvs	r7, [sp, #-1390]!	; 0xfffffa92
200064c0:	6b736972 	blvs	21ce0a90 <firstTime.4093+0x1cda794>
200064c4:	00000000 	andeq	r0, r0, r0
200064c8:	64726168 	ldrbtvs	r6, [r2], #-360	; 0xfffffe98
200064cc:	a4c3a5c3 	strbge	sl, [r3], #1475	; 0x5c3
200064d0:	7261b6c3 	rsbvc	fp, r1, #204472320	; 0xc300000
200064d4:	75732065 	ldrbvc	r2, [r3, #-101]!	; 0xffffff9b
200064d8:	00726567 	rsbseq	r6, r2, r7, ror #10

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000779 	andeq	r0, r0, r9, ror r7
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	0000004e 	andeq	r0, r0, lr, asr #32
      10:	00026b0c 	andeq	r6, r2, ip, lsl #22
	...
      20:	020c0200 	andeq	r0, ip, #0, 4
      24:	00004e05 	andeq	r4, r0, r5, lsl #28
      28:	01d70300 	bicseq	r0, r7, r0, lsl #6
      2c:	07020000 	streq	r0, [r2, -r0]
      30:	0000004e 	andeq	r0, r0, lr, asr #32
      34:	03020300 	movweq	r0, #8960	; 0x2300
      38:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      3c:	0000004e 	andeq	r0, r0, lr, asr #32
      40:	0d480304 	stcleq	3, cr0, [r8, #-16]
      44:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
      48:	00000055 	andeq	r0, r0, r5, asr r0
      4c:	04040008 	streq	r0, [r4], #-8
      50:	00032b07 	andeq	r2, r3, r7, lsl #22
      54:	5b040500 	blpl	10145c <startup-0x1fefeba4>
      58:	04000000 	streq	r0, [r0], #-0
      5c:	02ca0801 	sbceq	r0, sl, #65536	; 0x10000
      60:	9a060000 	bls	180068 <startup-0x1fe7ff98>
      64:	0200000e 	andeq	r0, r0, #14
      68:	0000210a 	andeq	r2, r0, sl, lsl #2
      6c:	029f0700 	addseq	r0, pc, #0, 14
      70:	030c0000 	movweq	r0, #49152	; 0xc000
      74:	00009e06 	andeq	r9, r0, r6, lsl #28
      78:	042d0300 	strteq	r0, [sp], #-768	; 0xfffffd00
      7c:	07030000 	streq	r0, [r3, -r0]
      80:	0000009e 	muleq	r0, lr, r0
      84:	04430300 	strbeq	r0, [r3], #-768	; 0xfffffd00
      88:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
      8c:	0000009e 	muleq	r0, lr, r0
      90:	029b0304 	addseq	r0, fp, #4, 6	; 0x10000000
      94:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
      98:	0000009e 	muleq	r0, lr, r0
      9c:	04050008 	streq	r0, [r5], #-8
      a0:	00000062 	andeq	r0, r0, r2, rrx
      a4:	000b7706 	andeq	r7, fp, r6, lsl #14
      a8:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
      ac:	07000000 	streq	r0, [r0, -r0]
      b0:	00000153 	andeq	r0, r0, r3, asr r1
      b4:	28060424 	stmdacs	r6, {r2, r5, sl}
      b8:	03000001 	movweq	r0, #1
      bc:	00000530 	andeq	r0, r0, r0, lsr r5
      c0:	01280704 			; <UNDEFINED> instruction: 0x01280704
      c4:	03000000 	movweq	r0, #0
      c8:	000000e6 	andeq	r0, r0, r6, ror #1
      cc:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
      d0:	03040000 	movweq	r0, #16384	; 0x4000
      d4:	0000020d 	andeq	r0, r0, sp, lsl #4
      d8:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
      dc:	03080000 	movweq	r0, #32768	; 0x8000
      e0:	00000206 	andeq	r0, r0, r6, lsl #4
      e4:	01460c04 	cmpeq	r6, r4, lsl #24
      e8:	030c0000 	movweq	r0, #49152	; 0xc000
      ec:	00000242 	andeq	r0, r0, r2, asr #4
      f0:	01460d04 	cmpeq	r6, r4, lsl #26
      f4:	03100000 	tsteq	r0, #0
      f8:	0000010e 	andeq	r0, r0, lr, lsl #2
      fc:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
     100:	03140000 	tsteq	r4, #0
     104:	000003e0 	andeq	r0, r0, r0, ror #7
     108:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
     10c:	03180000 	tsteq	r8, #0
     110:	000004e9 	andeq	r0, r0, r9, ror #9
     114:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
     118:	031c0000 	tsteq	ip, #0
     11c:	0000002a 	andeq	r0, r0, sl, lsr #32
     120:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
     124:	00200000 	eoreq	r0, r0, r0
     128:	00a40405 	adceq	r0, r4, r5, lsl #8
     12c:	04080000 	streq	r0, [r8], #-0
     130:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     134:	01400900 	cmpeq	r0, r0, lsl #18
     138:	400a0000 	andmi	r0, sl, r0
     13c:	00000001 	andeq	r0, r0, r1
     140:	00af0405 	adceq	r0, pc, r5, lsl #8
     144:	04050000 	streq	r0, [r5], #-0
     148:	00000135 	andeq	r0, r0, r5, lsr r1
     14c:	00015406 	andeq	r5, r1, r6, lsl #8
     150:	af150400 	svcge	0x00150400
     154:	0b000000 	bleq	15c <startup-0x1ffffea4>
     158:	00000162 	andeq	r0, r0, r2, ror #2
     15c:	00000162 	andeq	r0, r0, r2, ror #2
     160:	0405000c 	streq	r0, [r5], #-12
     164:	0000014c 	andeq	r0, r0, ip, asr #2
     168:	00040a0d 	andeq	r0, r4, sp, lsl #20
     16c:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
     170:	0d000001 	stceq	0, cr0, [r0, #-4]
     174:	000001c1 	andeq	r0, r0, r1, asr #3
     178:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
     17c:	86060000 	strhi	r0, [r6], -r0
     180:	05000001 	streq	r0, [r0, #-1]
     184:	00005b24 	andeq	r5, r0, r4, lsr #22
     188:	017e0b00 	cmneq	lr, r0, lsl #22
     18c:	019a0000 	orrseq	r0, sl, r0
     190:	9a0e0000 	bls	380198 <startup-0x1fc7fe68>
     194:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     198:	04040003 	streq	r0, [r4], #-3
     19c:	0000fa07 	andeq	pc, r0, r7, lsl #20
     1a0:	0c7e0d00 	ldcleq	13, cr0, [lr], #-0
     1a4:	2b050000 	blcs	1401ac <startup-0x1febfe54>
     1a8:	00000189 	andeq	r0, r0, r9, lsl #3
     1ac:	00011c0d 	andeq	r1, r1, sp, lsl #24
     1b0:	892c0500 	stmdbhi	ip!, {r8, sl}
     1b4:	0d000001 	stceq	0, cr0, [r0, #-4]
     1b8:	000004ba 			; <UNDEFINED> instruction: 0x000004ba
     1bc:	01892d05 	orreq	r2, r9, r5, lsl #26
     1c0:	ee0d0000 	cdp	0, 0, cr0, cr13, cr0, {0}
     1c4:	05000001 	streq	r0, [r0, #-1]
     1c8:	0001892e 	andeq	r8, r1, lr, lsr #18
     1cc:	048a0d00 	streq	r0, [sl], #3328	; 0xd00
     1d0:	2f050000 	svccs	0x00050000
     1d4:	00000189 	andeq	r0, r0, r9, lsl #3
     1d8:	0003d10d 	andeq	sp, r3, sp, lsl #2
     1dc:	89300500 	ldmdbhi	r0!, {r8, sl}
     1e0:	0d000001 	stceq	0, cr0, [r0, #-4]
     1e4:	00000176 	andeq	r0, r0, r6, ror r1
     1e8:	01893105 	orreq	r3, r9, r5, lsl #2
     1ec:	5b0b0000 	blpl	2c01f4 <startup-0x1fd3fe0c>
     1f0:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
     1f4:	0f000001 	svceq	0x00000001
     1f8:	0000019a 	muleq	r0, sl, r1
     1fc:	ae100077 	mrcge	0, 0, r0, cr0, cr7, {3}
     200:	06000001 	streq	r0, [r0], -r1
     204:	0001ee03 	andeq	lr, r1, r3, lsl #28
     208:	a4030500 	strge	r0, [r3], #-1280	; 0xfffffb00
     20c:	11200048 			; <UNDEFINED> instruction: 0x11200048
     210:	000004a7 	andeq	r0, r0, r7, lsr #9
     214:	01ee0307 	mvneq	r0, r7, lsl #6
     218:	03050000 	movweq	r0, #20480	; 0x5000
     21c:	2000491c 	andcs	r4, r0, ip, lsl r9
     220:	00050611 	andeq	r0, r5, r1, lsl r6
     224:	ee030800 	cdp	8, 0, cr0, cr3, cr0, {0}
     228:	05000001 	streq	r0, [r0, #-1]
     22c:	00499403 	subeq	r9, r9, r3, lsl #8
     230:	005b0b20 	subseq	r0, fp, r0, lsr #22
     234:	02420000 	subeq	r0, r2, #0
     238:	9a0e0000 	bls	380240 <startup-0x1fc7fdc0>
     23c:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     240:	4f110003 	svcmi	0x00110003
     244:	09000005 	stmdbeq	r0, {r0, r2}
     248:	00023103 	andeq	r3, r2, r3, lsl #2
     24c:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
     250:	1120004a 			; <UNDEFINED> instruction: 0x1120004a
     254:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
     258:	0231030a 	eorseq	r0, r1, #671088640	; 0x28000000
     25c:	03050000 	movweq	r0, #20480	; 0x5000
     260:	20004e0c 	andcs	r4, r0, ip, lsl #28
     264:	00025911 	andeq	r5, r2, r1, lsl r9
     268:	31030b00 	tstcc	r3, r0, lsl #22
     26c:	05000002 	streq	r0, [r0, #-2]
     270:	00520c03 	subseq	r0, r2, r3, lsl #24
     274:	005b0b20 	subseq	r0, fp, r0, lsr #22
     278:	02850000 	addeq	r0, r5, #0
     27c:	9a0f0000 	bls	3c0284 <startup-0x1fc3fd7c>
     280:	d1000001 	tstle	r0, r1
     284:	03831100 	orreq	r1, r3, #0, 2
     288:	030c0000 	movweq	r0, #49152	; 0xc000
     28c:	00000275 	andeq	r0, r0, r5, ror r2
     290:	560c0305 	strpl	r0, [ip], -r5, lsl #6
     294:	15112000 	ldrne	r2, [r1, #-0]
     298:	0d000003 	stceq	0, cr0, [r0, #-12]
     29c:	00027503 	andeq	r7, r2, r3, lsl #10
     2a0:	e0030500 	and	r0, r3, r0, lsl #10
     2a4:	11200056 	qsubne	r0, r6, r0
     2a8:	00000019 	andeq	r0, r0, r9, lsl r0
     2ac:	0275030e 	rsbseq	r0, r5, #939524096	; 0x38000000
     2b0:	03050000 	movweq	r0, #20480	; 0x5000
     2b4:	200057b4 			; <UNDEFINED> instruction: 0x200057b4
     2b8:	0002ac07 	andeq	sl, r2, r7, lsl #24
     2bc:	040f1400 	streq	r1, [pc], #-1024	; 2c4 <startup-0x1ffffd3c>
     2c0:	00000301 	andeq	r0, r0, r1, lsl #6
     2c4:	00110d03 	andseq	r0, r1, r3, lsl #26
     2c8:	01050f00 	tsteq	r5, r0, lsl #30
     2cc:	00000003 	andeq	r0, r0, r3
     2d0:	00044d03 	andeq	r4, r4, r3, lsl #26
     2d4:	01060f00 	tsteq	r6, r0, lsl #30
     2d8:	04000003 	streq	r0, [r0], #-3
     2dc:	00003403 	andeq	r3, r0, r3, lsl #8
     2e0:	2e080f00 	cdpcs	15, 0, cr0, cr8, cr0, {0}
     2e4:	08000001 	stmdaeq	r0, {r0}
     2e8:	0004f303 	andeq	pc, r4, r3, lsl #6
     2ec:	2e090f00 	cdpcs	15, 0, cr0, cr9, cr0, {0}
     2f0:	0c000001 	stceq	0, cr0, [r0], {1}
     2f4:	0002c203 	andeq	ip, r2, r3, lsl #4
     2f8:	240c0f00 	strcs	r0, [ip], #-3840	; 0xfffff100
     2fc:	10000003 	andne	r0, r0, r3
     300:	07040500 	streq	r0, [r4, -r0, lsl #10]
     304:	04000003 	streq	r0, [r0], #-3
     308:	02d30801 	sbcseq	r0, r3, #65536	; 0x10000
     30c:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
     310:	0a000003 	beq	324 <startup-0x1ffffcdc>
     314:	0000031e 	andeq	r0, r0, lr, lsl r3
     318:	00012e0a 	andeq	r2, r1, sl, lsl #28
     31c:	04050000 	streq	r0, [r5], #-0
     320:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
     324:	030e0405 	movweq	r0, #58373	; 0xe405
     328:	ad060000 	stcge	0, cr0, [r6, #-0]
     32c:	0f000002 	svceq	0x00000002
     330:	0002b80d 	andeq	fp, r2, sp, lsl #16
     334:	05281100 	streq	r1, [r8, #-256]!	; 0xffffff00
     338:	03100000 	tsteq	r0, #0
     33c:	00000231 	andeq	r0, r0, r1, lsr r2
     340:	58880305 	stmpl	r8, {r0, r2, r8, r9}
     344:	02042000 	andeq	r2, r4, #0
     348:	00032507 	andeq	r2, r3, r7, lsl #10
     34c:	019d1000 	orrseq	r1, sp, r0
     350:	30010000 	andcc	r0, r1, r0
     354:	0000009e 	muleq	r0, lr, r0
     358:	27840305 	strcs	r0, [r4, r5, lsl #6]
     35c:	4d102000 	ldcmi	0, cr2, [r0, #-0]
     360:	01000003 	tsteq	r0, r3
     364:	00009e31 	andeq	r9, r0, r1, lsr lr
     368:	04030500 	streq	r0, [r3], #-1280	; 0xfffffb00
     36c:	10200028 	eorne	r0, r0, r8, lsr #32
     370:	00000543 	andeq	r0, r0, r3, asr #10
     374:	009e3201 	addseq	r3, lr, r1, lsl #4
     378:	03050000 	movweq	r0, #20480	; 0x5000
     37c:	20002810 	andcs	r2, r0, r0, lsl r8
     380:	00676212 	rsbeq	r6, r7, r2, lsl r2
     384:	009e3301 	addseq	r3, lr, r1, lsl #6
     388:	03050000 	movweq	r0, #20480	; 0x5000
     38c:	200027bc 			; <UNDEFINED> instruction: 0x200027bc
     390:	00015f10 	andeq	r5, r1, r0, lsl pc
     394:	9e360100 	rsflss	f0, f6, f0
     398:	05000000 	streq	r0, [r0, #-0]
     39c:	0027a003 	eoreq	sl, r7, r3
     3a0:	016b1020 	cmneq	fp, r0, lsr #32
     3a4:	37010000 	strcc	r0, [r1, -r0]
     3a8:	0000009e 	muleq	r0, lr, r0
     3ac:	280c0305 	stmdacs	ip, {r0, r2, r8, r9}
     3b0:	38102000 	ldmdacc	r0, {sp}
     3b4:	01000003 	tsteq	r0, r3
     3b8:	00009e38 	andeq	r9, r0, r8, lsr lr
     3bc:	d8030500 	stmdale	r3, {r8, sl}
     3c0:	10200027 	eorne	r0, r0, r7, lsr #32
     3c4:	00000103 	andeq	r0, r0, r3, lsl #2
     3c8:	009e3901 	addseq	r3, lr, r1, lsl #18
     3cc:	03050000 	movweq	r0, #20480	; 0x5000
     3d0:	20002820 	andcs	r2, r0, r0, lsr #16
     3d4:	00000610 	andeq	r0, r0, r0, lsl r6
     3d8:	9e3a0100 	rsflse	f0, f2, f0
     3dc:	05000000 	streq	r0, [r0, #-0]
     3e0:	0027f403 	eoreq	pc, r7, r3, lsl #8
     3e4:	02f71020 	rscseq	r1, r7, #32
     3e8:	3b010000 	blcc	403f0 <startup-0x1ffbfc10>
     3ec:	0000009e 	muleq	r0, lr, r0
     3f0:	28080305 	stmdacs	r8, {r0, r2, r8, r9}
     3f4:	21102000 	tstcs	r0, r0
     3f8:	01000004 	tsteq	r0, r4
     3fc:	0000623d 	andeq	r6, r0, sp, lsr r2
     400:	a4030500 	strge	r0, [r3], #-1280	; 0xfffffb00
     404:	10200027 	eorne	r0, r0, r7, lsr #32
     408:	0000012e 	andeq	r0, r0, lr, lsr #2
     40c:	00623e01 	rsbeq	r3, r2, r1, lsl #28
     410:	03050000 	movweq	r0, #20480	; 0x5000
     414:	200027e8 	andcs	r2, r0, r8, ror #15
     418:	0002d810 	andeq	sp, r2, r0, lsl r8
     41c:	623f0100 	eorsvs	r0, pc, #0, 2
     420:	05000000 	streq	r0, [r0, #-0]
     424:	0027c003 	eoreq	ip, r7, r3
     428:	03e91020 	mvneq	r1, #32
     42c:	41010000 	mrsmi	r0, (UNDEF: 1)
     430:	00000062 	andeq	r0, r0, r2, rrx
     434:	28140305 	ldmdacs	r4, {r0, r2, r8, r9}
     438:	a0102000 	andsge	r2, r0, r0
     43c:	01000003 	tsteq	r0, r3
     440:	00006243 	andeq	r6, r0, r3, asr #4
     444:	88030500 	stmdahi	r3, {r8, sl}
     448:	10200027 	eorne	r0, r0, r7, lsr #32
     44c:	00000374 	andeq	r0, r0, r4, ror r3
     450:	00624401 	rsbeq	r4, r2, r1, lsl #8
     454:	03050000 	movweq	r0, #20480	; 0x5000
     458:	200027f8 	strdcs	r2, [r0], -r8
     45c:	0003c110 	andeq	ip, r3, r0, lsl r1
     460:	62450100 	subvs	r0, r5, #0, 2
     464:	05000000 	streq	r0, [r0, #-0]
     468:	0027dc03 	eoreq	sp, r7, r3, lsl #24
     46c:	00eb1020 	rsceq	r1, fp, r0, lsr #32
     470:	46010000 	strmi	r0, [r1], -r0
     474:	00000062 	andeq	r0, r0, r2, rrx
     478:	27b00305 	ldrcs	r0, [r0, r5, lsl #6]!
     47c:	f0102000 			; <UNDEFINED> instruction: 0xf0102000
     480:	01000003 	tsteq	r0, r3
     484:	00006247 	andeq	r6, r0, r7, asr #4
     488:	94030500 	strls	r0, [r3], #-1280	; 0xfffffb00
     48c:	10200027 	eorne	r0, r0, r7, lsr #32
     490:	000002e8 	andeq	r0, r0, r8, ror #5
     494:	00624801 	rsbeq	r4, r2, r1, lsl #16
     498:	03050000 	movweq	r0, #20480	; 0x5000
     49c:	200027cc 	andcs	r2, r0, ip, asr #15
     4a0:	00003410 	andeq	r3, r0, r0, lsl r4
     4a4:	2e740100 	rpwcss	f0, f4, f0
     4a8:	05000001 	streq	r0, [r0, #-1]
     4ac:	00277003 	eoreq	r7, r7, r3
     4b0:	02331020 	eorseq	r1, r3, #32
     4b4:	75010000 	strvc	r0, [r1, #-0]
     4b8:	0000012e 	andeq	r0, r0, lr, lsr #2
     4bc:	5c880305 	stcpl	3, cr0, [r8], {5}
     4c0:	3f132000 	svccc	0x00132000
     4c4:	01000001 	tsteq	r0, r1
     4c8:	00019876 	andeq	r9, r1, r6, ror r8
     4cc:	00081c20 	andeq	r1, r8, r0, lsr #24
     4d0:	a89c0100 	ldmge	ip, {r8}
     4d4:	11000006 	tstne	r0, r6
     4d8:	00000416 	andeq	r0, r0, r6, lsl r4
     4dc:	014c8401 	cmpeq	ip, r1, lsl #8
     4e0:	91020000 	mrsls	r0, (UNDEF: 2)
     4e4:	0461114c 	strbteq	r1, [r1], #-332	; 0xfffffeb4
     4e8:	85010000 	strhi	r0, [r1, #-0]
     4ec:	000000a4 	andeq	r0, r0, r4, lsr #1
     4f0:	11409102 	cmpne	r0, r2, lsl #2
     4f4:	0000035a 	andeq	r0, r0, sl, asr r3
     4f8:	06a88601 	strteq	r8, [r8], r1, lsl #12
     4fc:	91030000 	mrsls	r0, (UNDEF: 3)
     500:	4a117fb4 	bmi	4603d8 <startup-0x1fb9fc28>
     504:	01000001 	tsteq	r0, r1
     508:	00014c8e 	andeq	r4, r1, lr, lsl #25
     50c:	90910300 	addsls	r0, r1, r0, lsl #6
     510:	047f117f 	ldrbteq	r1, [pc], #-383	; 518 <startup-0x1ffffae8>
     514:	8f010000 	svchi	0x00010000
     518:	000000a4 	andeq	r0, r0, r4, lsr #1
     51c:	7f849103 	svcvc	0x00849103
     520:	00030911 	andeq	r0, r3, r1, lsl r9
     524:	a8900100 	ldmge	r0, {r8}
     528:	03000006 	movweq	r0, #6
     52c:	117ef891 			; <UNDEFINED> instruction: 0x117ef891
     530:	00000219 	andeq	r0, r0, r9, lsl r2
     534:	014c9d01 	cmpeq	ip, r1, lsl #26
     538:	91030000 	mrsls	r0, (UNDEF: 3)
     53c:	37117ed4 			; <UNDEFINED> instruction: 0x37117ed4
     540:	01000005 	tsteq	r0, r5
     544:	0000a49e 	muleq	r0, lr, r4
     548:	c8910300 	ldmgt	r1, {r8, r9}
     54c:	04f9117e 	ldrbteq	r1, [r9], #382	; 0x17e
     550:	9f010000 	svcls	0x00010000
     554:	000006a8 	andeq	r0, r0, r8, lsr #13
     558:	7ebc9103 	asnvce	f1, f3
     55c:	000b2d11 	andeq	r2, fp, r1, lsl sp
     560:	4ca60100 	stfmis	f0, [r6]
     564:	03000001 	movweq	r0, #1
     568:	117e9891 			; <UNDEFINED> instruction: 0x117e9891
     56c:	00000522 	andeq	r0, r0, r2, lsr #10
     570:	014cac01 	cmpeq	ip, r1, lsl #24
     574:	91030000 	mrsls	r0, (UNDEF: 3)
     578:	67117df4 			; <UNDEFINED> instruction: 0x67117df4
     57c:	01000005 	tsteq	r0, r5
     580:	00014cae 	andeq	r4, r1, lr, lsr #25
     584:	d0910300 	addsle	r0, r1, r0, lsl #6
     588:	0000117d 	andeq	r1, r0, sp, ror r1
     58c:	b0010000 	andlt	r0, r1, r0
     590:	0000014c 	andeq	r0, r0, ip, asr #2
     594:	7dac9103 	stfvcd	f1, [ip, #12]!
     598:	00056111 	andeq	r6, r5, r1, lsl r1
     59c:	4cb20100 	ldfmis	f0, [r2]
     5a0:	03000001 	movweq	r0, #1
     5a4:	117d8891 			; <UNDEFINED> instruction: 0x117d8891
     5a8:	00000250 	andeq	r0, r0, r0, asr r2
     5ac:	032ac901 			; <UNDEFINED> instruction: 0x032ac901
     5b0:	91030000 	mrsls	r0, (UNDEF: 3)
     5b4:	68117cf4 	ldmdavs	r1, {r2, r4, r5, r6, r7, sl, fp, ip, sp, lr}
     5b8:	01000003 	tsteq	r0, r3
     5bc:	00032aca 	andeq	r2, r3, sl, asr #21
     5c0:	e0910300 	adds	r0, r1, r0, lsl #6
     5c4:	036e117c 	cmneq	lr, #124, 2
     5c8:	cb010000 	blgt	405d0 <startup-0x1ffbfa30>
     5cc:	0000032a 	andeq	r0, r0, sl, lsr #6
     5d0:	7ccc9103 	stfvcp	f1, [ip], {3}
     5d4:	00014411 	andeq	r4, r1, r1, lsl r4
     5d8:	2acc0100 	bcs	ff3009e0 <firstTime.4093+0xdf2fa6e4>
     5dc:	03000003 	movweq	r0, #3
     5e0:	117cb891 			; <UNDEFINED> instruction: 0x117cb891
     5e4:	000002a6 	andeq	r0, r0, r6, lsr #5
     5e8:	032acd01 			; <UNDEFINED> instruction: 0x032acd01
     5ec:	91030000 	mrsls	r0, (UNDEF: 3)
     5f0:	94117ca4 	ldrls	r7, [r1], #-3236	; 0xfffff35c
     5f4:	01000003 	tsteq	r0, r3
     5f8:	00032ace 	andeq	r2, r3, lr, asr #21
     5fc:	90910300 	addsls	r0, r1, r0, lsl #6
     600:	039a117c 	orrseq	r1, sl, #124, 2
     604:	cf010000 	svcgt	0x00010000
     608:	0000032a 	andeq	r0, r0, sl, lsr #6
     60c:	7bfc9103 	blvc	fff24a20 <firstTime.4093+0xdff1e724>
     610:	0002b611 	andeq	fp, r2, r1, lsl r6
     614:	2ad00100 	bcs	ff400a1c <firstTime.4093+0xdf3fa720>
     618:	03000003 	movweq	r0, #3
     61c:	117be891 			; <UNDEFINED> instruction: 0x117be891
     620:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
     624:	032ad101 			; <UNDEFINED> instruction: 0x032ad101
     628:	91030000 	mrsls	r0, (UNDEF: 3)
     62c:	8e117bd4 			; <UNDEFINED> instruction: 0x8e117bd4
     630:	01000001 	tsteq	r0, r1
     634:	00032ad2 	ldrdeq	r2, [r3], -r2	; <UNPREDICTABLE>
     638:	c0910300 	addsgt	r0, r1, r0, lsl #6
     63c:	0212117b 	andseq	r1, r2, #-1073741794	; 0xc000001e
     640:	d3010000 	movwle	r0, #4096	; 0x1000
     644:	0000032a 	andeq	r0, r0, sl, lsr #6
     648:	7bac9103 	blvc	feb24a5c <firstTime.4093+0xdeb1e760>
     64c:	0001e711 	andeq	lr, r1, r1, lsl r7
     650:	2ad40100 	bcs	ff500a58 <firstTime.4093+0xdf4fa75c>
     654:	03000003 	movweq	r0, #3
     658:	117b9891 			; <UNDEFINED> instruction: 0x117b9891
     65c:	00000249 	andeq	r0, r0, r9, asr #4
     660:	032ad501 			; <UNDEFINED> instruction: 0x032ad501
     664:	91030000 	mrsls	r0, (UNDEF: 3)
     668:	b2147b84 	andslt	r7, r4, #132, 22	; 0x21000
     66c:	b2200004 	eorlt	r0, r0, #4
     670:	11000004 	tstne	r0, r4
     674:	000001dd 	ldrdeq	r0, [r0], -sp
     678:	012efc01 	msreq	CPSR_fsx, r1, lsl #24
     67c:	03050000 	movweq	r0, #20480	; 0x5000
     680:	20005c90 	mulcs	r0, r0, ip
     684:	00043811 	andeq	r3, r4, r1, lsl r8
     688:	2efd0100 	cdpcs	1, 15, cr0, cr13, cr0, {0}
     68c:	05000001 	streq	r0, [r0, #-1]
     690:	005c9403 	subseq	r9, ip, r3, lsl #8
     694:	046e1120 	strbteq	r1, [lr], #-288	; 0xfffffee0
     698:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
     69c:	0000012e 	andeq	r0, r0, lr, lsr #2
     6a0:	5c8c0305 	stcpl	3, cr0, [ip], {5}
     6a4:	00002000 	andeq	r2, r0, r0
     6a8:	0000a40b 	andeq	sl, r0, fp, lsl #8
     6ac:	0006b800 	andeq	fp, r6, r0, lsl #16
     6b0:	019a0f00 	orrseq	r0, sl, r0, lsl #30
     6b4:	00000000 	andeq	r0, r0, r0
     6b8:	0003fe13 	andeq	pc, r3, r3, lsl lr	; <UNPREDICTABLE>
     6bc:	344a0100 	strbcc	r0, [sl], #-256	; 0xffffff00
     6c0:	64200000 	strtvs	r0, [r0], #-0
     6c4:	01000001 	tsteq	r0, r1
     6c8:	00075a9c 	muleq	r7, ip, sl
     6cc:	04521100 	ldrbeq	r1, [r2], #-256	; 0xffffff00
     6d0:	4b010000 	blmi	406d8 <startup-0x1ffbf928>
     6d4:	0000009e 	muleq	r0, lr, r0
     6d8:	11749102 	cmnne	r4, r2, lsl #2
     6dc:	00000223 	andeq	r0, r0, r3, lsr #4
     6e0:	009e4f01 	addseq	r4, lr, r1, lsl #30
     6e4:	91020000 	mrsls	r0, (UNDEF: 2)
     6e8:	04d11170 	ldrbeq	r1, [r1], #368	; 0x170
     6ec:	53010000 	movwpl	r0, #4096	; 0x1000
     6f0:	0000009e 	muleq	r0, lr, r0
     6f4:	116c9102 	cmnne	ip, r2, lsl #2
     6f8:	00000194 	muleq	r0, r4, r1
     6fc:	009e5701 	addseq	r5, lr, r1, lsl #14
     700:	91020000 	mrsls	r0, (UNDEF: 2)
     704:	00101168 	andseq	r1, r0, r8, ror #2
     708:	5b010000 	blpl	40710 <startup-0x1ffbf8f0>
     70c:	0000009e 	muleq	r0, lr, r0
     710:	11649102 	cmnne	r4, r2, lsl #2
     714:	000001a5 	andeq	r0, r0, r5, lsr #3
     718:	009e5f01 	addseq	r5, lr, r1, lsl #30
     71c:	91020000 	mrsls	r0, (UNDEF: 2)
     720:	003c1160 	eorseq	r1, ip, r0, ror #2
     724:	63010000 	movwvs	r0, #4096	; 0x1000
     728:	0000009e 	muleq	r0, lr, r0
     72c:	115c9102 	cmpne	ip, r2, lsl #2
     730:	00000045 	andeq	r0, r0, r5, asr #32
     734:	009e6701 	addseq	r6, lr, r1, lsl #14
     738:	91020000 	mrsls	r0, (UNDEF: 2)
     73c:	01ce1158 	biceq	r1, lr, r8, asr r1
     740:	6a010000 	bvs	40748 <startup-0x1ffbf8b8>
     744:	0000009e 	muleq	r0, lr, r0
     748:	11549102 	cmpne	r4, r2, lsl #2
     74c:	00000518 	andeq	r0, r0, r8, lsl r5
     750:	009e6d01 	addseq	r6, lr, r1, lsl #26
     754:	91020000 	mrsls	r0, (UNDEF: 2)
     758:	44150050 	ldrmi	r0, [r5], #-80	; 0xffffffb0
     75c:	01000003 	tsteq	r0, r3
     760:	0000101c 	andeq	r1, r0, ip, lsl r0
     764:	00002420 	andeq	r2, r0, r0, lsr #8
     768:	169c0100 	ldrne	r0, [ip], r0, lsl #2
     76c:	000004e1 	andeq	r0, r0, r1, ror #9
     770:	00002601 	andeq	r2, r0, r1, lsl #12
     774:	000c2000 	andeq	r2, ip, r0
     778:	9c010000 	stcls	0, cr0, [r1], {-0}
     77c:	0001e000 	andeq	lr, r1, r0
     780:	2e000400 	cfcpyscs	mvf0, mvf0
     784:	04000001 	streq	r0, [r0], #-1
     788:	00004e01 	andeq	r4, r0, r1, lsl #28
     78c:	057e0c00 	ldrbeq	r0, [lr, #-3072]!	; 0xfffff400
     790:	09b40000 	ldmibeq	r4!, {}	; <UNPREDICTABLE>
     794:	00562000 	subseq	r2, r6, r0
     798:	021c0000 	andseq	r0, ip, #0
     79c:	0c020000 	stceq	0, cr0, [r2], {-0}
     7a0:	004e0502 	subeq	r0, lr, r2, lsl #10
     7a4:	d7030000 	strle	r0, [r3, -r0]
     7a8:	02000001 	andeq	r0, r0, #1
     7ac:	00004e07 	andeq	r4, r0, r7, lsl #28
     7b0:	02030000 	andeq	r0, r3, #0
     7b4:	02000003 	andeq	r0, r0, #3
     7b8:	00004e08 	andeq	r4, r0, r8, lsl #28
     7bc:	48030400 	stmdami	r3, {sl}
     7c0:	0200000d 	andeq	r0, r0, #13
     7c4:	00005509 	andeq	r5, r0, r9, lsl #10
     7c8:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
     7cc:	032b0704 			; <UNDEFINED> instruction: 0x032b0704
     7d0:	04050000 	streq	r0, [r5], #-0
     7d4:	0000005b 	andeq	r0, r0, fp, asr r0
     7d8:	ca080104 	bgt	200bf0 <startup-0x1fdff410>
     7dc:	06000002 	streq	r0, [r0], -r2
     7e0:	00000e9a 	muleq	r0, sl, lr
     7e4:	00210a02 	eoreq	r0, r1, r2, lsl #20
     7e8:	9f070000 	svcls	0x00070000
     7ec:	0c000002 	stceq	0, cr0, [r0], {2}
     7f0:	009e0603 	addseq	r0, lr, r3, lsl #12
     7f4:	2d030000 	stccs	0, cr0, [r3, #-0]
     7f8:	03000004 	movweq	r0, #4
     7fc:	00009e07 	andeq	r9, r0, r7, lsl #28
     800:	43030000 	movwmi	r0, #12288	; 0x3000
     804:	03000004 	movweq	r0, #4
     808:	00009e08 	andeq	r9, r0, r8, lsl #28
     80c:	9b030400 	blls	c1814 <startup-0x1ff3e7ec>
     810:	03000002 	movweq	r0, #2
     814:	00009e09 	andeq	r9, r0, r9, lsl #28
     818:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
     81c:	00006204 	andeq	r6, r0, r4, lsl #4
     820:	0b770600 	bleq	1dc2028 <startup-0x1e23dfd8>
     824:	0a030000 	beq	c082c <startup-0x1ff3f7d4>
     828:	0000006d 	andeq	r0, r0, sp, rrx
     82c:	00015307 	andeq	r5, r1, r7, lsl #6
     830:	06042400 	streq	r2, [r4], -r0, lsl #8
     834:	00000128 	andeq	r0, r0, r8, lsr #2
     838:	00053003 	andeq	r3, r5, r3
     83c:	28070400 	stmdacs	r7, {sl}
     840:	00000001 	andeq	r0, r0, r1
     844:	0000e603 	andeq	lr, r0, r3, lsl #12
     848:	2e080400 	cfcpyscs	mvf0, mvf8
     84c:	04000001 	streq	r0, [r0], #-1
     850:	00020d03 	andeq	r0, r2, r3, lsl #26
     854:	2e090400 	cfcpyscs	mvf0, mvf9
     858:	08000001 	stmdaeq	r0, {r0}
     85c:	00020603 	andeq	r0, r2, r3, lsl #12
     860:	460c0400 	strmi	r0, [ip], -r0, lsl #8
     864:	0c000001 	stceq	0, cr0, [r0], {1}
     868:	00024203 	andeq	r4, r2, r3, lsl #4
     86c:	460d0400 	strmi	r0, [sp], -r0, lsl #8
     870:	10000001 	andne	r0, r0, r1
     874:	00010e03 	andeq	r0, r1, r3, lsl #28
     878:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
     87c:	14000001 	strne	r0, [r0], #-1
     880:	0003e003 	andeq	lr, r3, r3
     884:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
     888:	18000001 	stmdane	r0, {r0}
     88c:	0004e903 	andeq	lr, r4, r3, lsl #18
     890:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
     894:	1c000001 	stcne	0, cr0, [r0], {1}
     898:	00002a03 	andeq	r2, r0, r3, lsl #20
     89c:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
     8a0:	20000001 	andcs	r0, r0, r1
     8a4:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
     8a8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     8ac:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     8b0:	40090074 	andmi	r0, r9, r4, ror r0
     8b4:	0a000001 	beq	8c0 <startup-0x1ffff740>
     8b8:	00000140 	andeq	r0, r0, r0, asr #2
     8bc:	af040500 	svcge	0x00040500
     8c0:	05000000 	streq	r0, [r0, #-0]
     8c4:	00013504 	andeq	r3, r1, r4, lsl #10
     8c8:	01540600 	cmpeq	r4, r0, lsl #12
     8cc:	15040000 	strne	r0, [r4, #-0]
     8d0:	000000af 	andeq	r0, r0, pc, lsr #1
     8d4:	0001620b 	andeq	r6, r1, fp, lsl #4
     8d8:	00016200 	andeq	r6, r1, r0, lsl #4
     8dc:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
     8e0:	00014c04 	andeq	r4, r1, r4, lsl #24
     8e4:	040a0d00 	streq	r0, [sl], #-3328	; 0xfffff300
     8e8:	1c040000 	stcne	0, cr0, [r4], {-0}
     8ec:	00000157 	andeq	r0, r0, r7, asr r1
     8f0:	0001c10d 	andeq	ip, r1, sp, lsl #2
     8f4:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
     8f8:	04000001 	streq	r0, [r0], #-1
     8fc:	00fa0704 	rscseq	r0, sl, r4, lsl #14
     900:	680e0000 	stmdavs	lr, {}	; <UNPREDICTABLE>
     904:	01000001 	tsteq	r0, r1
     908:	24030503 	strcs	r0, [r3], #-1283	; 0xfffffafd
     90c:	0e200028 	cdpeq	0, 2, cr0, cr0, cr8, {1}
     910:	00000173 	andeq	r0, r0, r3, ror r1
     914:	03050401 	movweq	r0, #21505	; 0x5401
     918:	20002774 	andcs	r2, r0, r4, ror r7
     91c:	00056d0f 	andeq	r6, r5, pc, lsl #26
     920:	c40c0100 	strgt	r0, [ip], #-256	; 0xffffff00
     924:	46200009 	strtmi	r0, [r0], -r9
     928:	01000000 	mrseq	r0, (UNDEF: 0)
     92c:	0001c39c 	muleq	r1, ip, r3
     930:	05b11000 	ldreq	r1, [r1, #0]!
     934:	0c010000 	stceq	0, cr0, [r1], {-0}
     938:	00000162 	andeq	r0, r0, r2, ror #2
     93c:	00749102 	rsbseq	r9, r4, r2, lsl #2
     940:	00024211 	andeq	r4, r2, r1, lsl r2
     944:	b4070100 	strlt	r0, [r7], #-256	; 0xffffff00
     948:	10200009 	eorne	r0, r0, r9
     94c:	01000000 	mrseq	r0, (UNDEF: 0)
     950:	05b1109c 	ldreq	r1, [r1, #156]!	; 0x9c
     954:	07010000 	streq	r0, [r1, -r0]
     958:	00000162 	andeq	r0, r0, r2, ror #2
     95c:	00749102 	rsbseq	r9, r4, r2, lsl #2
     960:	00052b00 	andeq	r2, r5, r0, lsl #22
     964:	14000400 	strne	r0, [r0], #-1024	; 0xfffffc00
     968:	04000002 	streq	r0, [r0], #-2
     96c:	00004e01 	andeq	r4, r0, r1, lsl #28
     970:	07f10c00 	ldrbeq	r0, [r1, r0, lsl #24]!
     974:	0a0c0000 	beq	30097c <startup-0x1fcff684>
     978:	02a82000 	adceq	r2, r8, #0
     97c:	02aa0000 	adceq	r0, sl, #0
     980:	0c020000 	stceq	0, cr0, [r2], {-0}
     984:	004e0502 	subeq	r0, lr, r2, lsl #10
     988:	d7030000 	strle	r0, [r3, -r0]
     98c:	02000001 	andeq	r0, r0, #1
     990:	00004e07 	andeq	r4, r0, r7, lsl #28
     994:	02030000 	andeq	r0, r3, #0
     998:	02000003 	andeq	r0, r0, #3
     99c:	00004e08 	andeq	r4, r0, r8, lsl #28
     9a0:	48030400 	stmdami	r3, {sl}
     9a4:	0200000d 	andeq	r0, r0, #13
     9a8:	00005509 	andeq	r5, r0, r9, lsl #10
     9ac:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
     9b0:	032b0704 			; <UNDEFINED> instruction: 0x032b0704
     9b4:	04050000 	streq	r0, [r5], #-0
     9b8:	0000005b 	andeq	r0, r0, fp, asr r0
     9bc:	ca080104 	bgt	200dd4 <startup-0x1fdff22c>
     9c0:	06000002 	streq	r0, [r0], -r2
     9c4:	00000e9a 	muleq	r0, sl, lr
     9c8:	00210a02 	eoreq	r0, r1, r2, lsl #20
     9cc:	9f070000 	svcls	0x00070000
     9d0:	0c000002 	stceq	0, cr0, [r0], {2}
     9d4:	009e0603 	addseq	r0, lr, r3, lsl #12
     9d8:	2d030000 	stccs	0, cr0, [r3, #-0]
     9dc:	03000004 	movweq	r0, #4
     9e0:	00009e07 	andeq	r9, r0, r7, lsl #28
     9e4:	43030000 	movwmi	r0, #12288	; 0x3000
     9e8:	03000004 	movweq	r0, #4
     9ec:	00009e08 	andeq	r9, r0, r8, lsl #28
     9f0:	9b030400 	blls	c19f8 <startup-0x1ff3e608>
     9f4:	03000002 	movweq	r0, #2
     9f8:	00009e09 	andeq	r9, r0, r9, lsl #28
     9fc:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
     a00:	00006204 	andeq	r6, r0, r4, lsl #4
     a04:	0b770600 	bleq	1dc220c <startup-0x1e23ddf4>
     a08:	0a030000 	beq	c0a10 <startup-0x1ff3f5f0>
     a0c:	0000006d 	andeq	r0, r0, sp, rrx
     a10:	00015307 	andeq	r5, r1, r7, lsl #6
     a14:	06042400 	streq	r2, [r4], -r0, lsl #8
     a18:	00000128 	andeq	r0, r0, r8, lsr #2
     a1c:	00053003 	andeq	r3, r5, r3
     a20:	28070400 	stmdacs	r7, {sl}
     a24:	00000001 	andeq	r0, r0, r1
     a28:	0000e603 	andeq	lr, r0, r3, lsl #12
     a2c:	2e080400 	cfcpyscs	mvf0, mvf8
     a30:	04000001 	streq	r0, [r0], #-1
     a34:	00020d03 	andeq	r0, r2, r3, lsl #26
     a38:	2e090400 	cfcpyscs	mvf0, mvf9
     a3c:	08000001 	stmdaeq	r0, {r0}
     a40:	00020603 	andeq	r0, r2, r3, lsl #12
     a44:	460c0400 	strmi	r0, [ip], -r0, lsl #8
     a48:	0c000001 	stceq	0, cr0, [r0], {1}
     a4c:	00024203 	andeq	r4, r2, r3, lsl #4
     a50:	460d0400 	strmi	r0, [sp], -r0, lsl #8
     a54:	10000001 	andne	r0, r0, r1
     a58:	00010e03 	andeq	r0, r1, r3, lsl #28
     a5c:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
     a60:	14000001 	strne	r0, [r0], #-1
     a64:	0003e003 	andeq	lr, r3, r3
     a68:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
     a6c:	18000001 	stmdane	r0, {r0}
     a70:	0004e903 	andeq	lr, r4, r3, lsl #18
     a74:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
     a78:	1c000001 	stcne	0, cr0, [r0], {1}
     a7c:	00002a03 	andeq	r2, r0, r3, lsl #20
     a80:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
     a84:	20000001 	andcs	r0, r0, r1
     a88:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
     a8c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     a90:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     a94:	40090074 	andmi	r0, r9, r4, ror r0
     a98:	0a000001 	beq	aa4 <startup-0x1ffff55c>
     a9c:	00000140 	andeq	r0, r0, r0, asr #2
     aa0:	af040500 	svcge	0x00040500
     aa4:	05000000 	streq	r0, [r0, #-0]
     aa8:	00013504 	andeq	r3, r1, r4, lsl #10
     aac:	01540600 	cmpeq	r4, r0, lsl #12
     ab0:	15040000 	strne	r0, [r4, #-0]
     ab4:	000000af 	andeq	r0, r0, pc, lsr #1
     ab8:	0001620b 	andeq	r6, r1, fp, lsl #4
     abc:	00016200 	andeq	r6, r1, r0, lsl #4
     ac0:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
     ac4:	00014c04 	andeq	r4, r1, r4, lsl #24
     ac8:	040a0d00 	streq	r0, [sl], #-3328	; 0xfffff300
     acc:	1c040000 	stcne	0, cr0, [r4], {-0}
     ad0:	00000157 	andeq	r0, r0, r7, asr r1
     ad4:	0001c10d 	andeq	ip, r1, sp, lsl #2
     ad8:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
     adc:	0b000001 	bleq	ae8 <startup-0x1ffff518>
     ae0:	0000005b 	andeq	r0, r0, fp, asr r0
     ae4:	0000018e 	andeq	r0, r0, lr, lsl #3
     ae8:	00018e0e 	andeq	r8, r1, lr, lsl #28
     aec:	04000b00 	streq	r0, [r0], #-2816	; 0xfffff500
     af0:	00fa0704 	rscseq	r0, sl, r4, lsl #14
     af4:	b60f0000 	strlt	r0, [pc], -r0
     af8:	05000007 	streq	r0, [r0, #-7]
     afc:	00017e03 	andeq	r7, r1, r3, lsl #28
     b00:	98030500 	stmdals	r3, {r8, sl}
     b04:	0f20005c 	svceq	0x0020005c
     b08:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
     b0c:	017e0306 	cmneq	lr, r6, lsl #6
     b10:	03050000 	movweq	r0, #20480	; 0x5000
     b14:	20005ca4 	andcs	r5, r0, r4, lsr #25
     b18:	0006cb0f 	andeq	ip, r6, pc, lsl #22
     b1c:	7e030700 	cdpvc	7, 0, cr0, cr3, cr0, {0}
     b20:	05000001 	streq	r0, [r0, #-1]
     b24:	005cb003 	subseq	fp, ip, r3
     b28:	062c0f20 	strteq	r0, [ip], -r0, lsr #30
     b2c:	03080000 	movweq	r0, #32768	; 0x8000
     b30:	0000017e 	andeq	r0, r0, lr, ror r1
     b34:	5cbc0305 	ldcpl	3, cr0, [ip], #20
     b38:	dc0f2000 	stcle	0, cr2, [pc], {-0}
     b3c:	09000006 	stmdbeq	r0, {r1, r2}
     b40:	00017e03 	andeq	r7, r1, r3, lsl #28
     b44:	c8030500 	stmdagt	r3, {r8, sl}
     b48:	0f20005c 	svceq	0x0020005c
     b4c:	0000081e 	andeq	r0, r0, lr, lsl r8
     b50:	017e030a 	cmneq	lr, sl, lsl #6
     b54:	03050000 	movweq	r0, #20480	; 0x5000
     b58:	20005cd4 	ldrdcs	r5, [r0], -r4
     b5c:	00079a0f 	andeq	r9, r7, pc, lsl #20
     b60:	7e030b00 	vmlavc.f64	d0, d3, d0
     b64:	05000001 	streq	r0, [r0, #-1]
     b68:	005ce003 	subseq	lr, ip, r3
     b6c:	06ff0f20 	ldrbteq	r0, [pc], r0, lsr #30
     b70:	030c0000 	movweq	r0, #49152	; 0xc000
     b74:	0000017e 	andeq	r0, r0, lr, ror r1
     b78:	5cec0305 	stclpl	3, cr0, [ip], #20
     b7c:	3c0f2000 	stccc	0, cr2, [pc], {-0}
     b80:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
     b84:	00017e03 	andeq	r7, r1, r3, lsl #28
     b88:	f8030500 			; <UNDEFINED> instruction: 0xf8030500
     b8c:	0f20005c 	svceq	0x0020005c
     b90:	0000066a 	andeq	r0, r0, sl, ror #12
     b94:	017e030e 	cmneq	lr, lr, lsl #6
     b98:	03050000 	movweq	r0, #20480	; 0x5000
     b9c:	20005d04 	andcs	r5, r0, r4, lsl #26
     ba0:	00074c0f 	andeq	r4, r7, pc, lsl #24
     ba4:	7e030f00 	cdpvc	15, 0, cr0, cr3, cr0, {0}
     ba8:	05000001 	streq	r0, [r0, #-1]
     bac:	005d1003 	subseq	r1, sp, r3
     bb0:	05f01020 	ldrbeq	r1, [r0, #32]!
     bb4:	11010000 	mrsne	r0, (UNDEF: 1)
     bb8:	0000009e 	muleq	r0, lr, r0
     bbc:	2ae40305 	bcs	ff9017d8 <firstTime.4093+0xdf8fb4dc>
     bc0:	c0102000 	andsgt	r2, r0, r0
     bc4:	01000005 	tsteq	r0, r5
     bc8:	00009e12 	andeq	r9, r0, r2, lsl lr
     bcc:	fc030500 	stc2	5, cr0, [r3], {-0}
     bd0:	1020002a 	eorne	r0, r0, sl, lsr #32
     bd4:	00000616 	andeq	r0, r0, r6, lsl r6
     bd8:	009e1301 	addseq	r1, lr, r1, lsl #6
     bdc:	03050000 	movweq	r0, #20480	; 0x5000
     be0:	200029b4 			; <UNDEFINED> instruction: 0x200029b4
     be4:	0006f510 	andeq	pc, r6, r0, lsl r5	; <UNPREDICTABLE>
     be8:	9e140100 	muflss	f0, f4, f0
     bec:	05000000 	streq	r0, [r0, #-0]
     bf0:	002af803 	eoreq	pc, sl, r3, lsl #16
     bf4:	06c01020 	strbeq	r1, [r0], r0, lsr #32
     bf8:	15010000 	strne	r0, [r1, #-0]
     bfc:	0000009e 	muleq	r0, lr, r0
     c00:	2ad00305 	bcs	ff40181c <firstTime.4093+0xdf3fb520>
     c04:	d8102000 	ldmdale	r0, {sp}
     c08:	01000005 	tsteq	r0, r5
     c0c:	00009e16 	andeq	r9, r0, r6, lsl lr
     c10:	c4030500 	strgt	r0, [r3], #-1280	; 0xfffffb00
     c14:	10200029 	eorne	r0, r0, r9, lsr #32
     c18:	0000064d 	andeq	r0, r0, sp, asr #12
     c1c:	009e1701 	addseq	r1, lr, r1, lsl #14
     c20:	03050000 	movweq	r0, #20480	; 0x5000
     c24:	20002af4 	strdcs	r2, [r0], -r4
     c28:	00077310 	andeq	r7, r7, r0, lsl r3
     c2c:	9e180100 	muflse	f0, f0, f0
     c30:	05000000 	streq	r0, [r0, #-0]
     c34:	002ab003 	eoreq	fp, sl, r3
     c38:	06211020 	strteq	r1, [r1], -r0, lsr #32
     c3c:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
     c40:	0000009e 	muleq	r0, lr, r0
     c44:	2a1c0305 	bcs	701860 <startup-0x1f8fe7a0>
     c48:	b6102000 	ldrlt	r2, [r0], -r0
     c4c:	01000005 	tsteq	r0, r5
     c50:	00009e1a 	andeq	r9, r0, sl, lsl lr
     c54:	cc030500 	cfstr32gt	mvfx0, [r3], {-0}
     c58:	1020002a 	eorne	r0, r0, sl, lsr #32
     c5c:	0000068e 	andeq	r0, r0, lr, lsl #13
     c60:	009e1b01 	addseq	r1, lr, r1, lsl #22
     c64:	03050000 	movweq	r0, #20480	; 0x5000
     c68:	20002ad4 	ldrdcs	r2, [r0], -r4
     c6c:	00060810 	andeq	r0, r6, r0, lsl r8
     c70:	621d0100 	andsvs	r0, sp, #0, 2
     c74:	05000000 	streq	r0, [r0, #-0]
     c78:	0029ec03 	eoreq	lr, r9, r3, lsl #24
     c7c:	077d1020 	ldrbeq	r1, [sp, -r0, lsr #32]!
     c80:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
     c84:	00000062 	andeq	r0, r0, r2, rrx
     c88:	2ad80305 	bcs	ff6018a4 <firstTime.4093+0xdf5fb5a8>
     c8c:	29102000 	ldmdbcs	r0, {sp}
     c90:	01000007 	tsteq	r0, r7
     c94:	0000621f 	andeq	r6, r0, pc, lsl r2
     c98:	b4030500 	strlt	r0, [r3], #-1280	; 0xfffffb00
     c9c:	1020002a 	eorne	r0, r0, sl, lsr #32
     ca0:	000005ca 	andeq	r0, r0, sl, asr #11
     ca4:	00622001 	rsbeq	r2, r2, r1
     ca8:	03050000 	movweq	r0, #20480	; 0x5000
     cac:	200029e0 	andcs	r2, r0, r0, ror #19
     cb0:	0007c810 	andeq	ip, r7, r0, lsl r8
     cb4:	62210100 	eorvs	r0, r1, #0, 2
     cb8:	05000000 	streq	r0, [r0, #-0]
     cbc:	002ae803 	eoreq	lr, sl, r3, lsl #16
     cc0:	05fa1020 	ldrbeq	r1, [sl, #32]!
     cc4:	22010000 	andcs	r0, r1, #0
     cc8:	00000062 	andeq	r0, r0, r2, rrx
     ccc:	2a980305 	bcs	fe6018e8 <firstTime.4093+0xde5fb5ec>
     cd0:	0f102000 	svceq	0x00102000
     cd4:	01000007 	tsteq	r0, r7
     cd8:	00006223 	andeq	r6, r0, r3, lsr #4
     cdc:	b8030500 	stmdalt	r3, {r8, sl}
     ce0:	10200029 	eorne	r0, r0, r9, lsr #32
     ce4:	000005e2 	andeq	r0, r0, r2, ror #11
     ce8:	00622401 	rsbeq	r2, r2, r1, lsl #8
     cec:	03050000 	movweq	r0, #20480	; 0x5000
     cf0:	200029c8 	andcs	r2, r0, r8, asr #19
     cf4:	00078b10 	andeq	r8, r7, r0, lsl fp
     cf8:	62250100 	eorvs	r0, r5, #0, 2
     cfc:	05000000 	streq	r0, [r0, #-0]
     d00:	002a0403 	eoreq	r0, sl, r3, lsl #8
     d04:	06a21020 	strteq	r1, [r2], r0, lsr #32
     d08:	26010000 	strcs	r0, [r1], -r0
     d0c:	00000062 	andeq	r0, r0, r2, rrx
     d10:	2a8c0305 	bcs	fe30192c <firstTime.4093+0xde2fb630>
     d14:	e2102000 	ands	r2, r0, #0
     d18:	01000007 	tsteq	r0, r7
     d1c:	00006227 	andeq	r6, r0, r7, lsr #4
     d20:	c0030500 	andgt	r0, r3, r0, lsl #10
     d24:	1020002a 	eorne	r0, r0, sl, lsr #32
     d28:	000006ed 	andeq	r0, r0, sp, ror #13
     d2c:	014c2a01 	cmpeq	ip, r1, lsl #20
     d30:	03050000 	movweq	r0, #20480	; 0x5000
     d34:	20002a20 	andcs	r2, r0, r0, lsr #20
     d38:	00076810 	andeq	r6, r7, r0, lsl r8
     d3c:	a42b0100 	strtge	r0, [fp], #-256	; 0xffffff00
     d40:	05000000 	streq	r0, [r0, #-0]
     d44:	002a1003 	eoreq	r1, sl, r3
     d48:	07d71020 	ldrbeq	r1, [r7, r0, lsr #32]
     d4c:	2c010000 	stccs	0, cr0, [r1], {-0}
     d50:	000000a4 	andeq	r0, r0, r4, lsr #1
     d54:	29d40305 	ldmibcs	r4, {r0, r2, r8, r9}^
     d58:	7a102000 	bvc	408d60 <startup-0x1fbf72a0>
     d5c:	01000006 	tsteq	r0, r6
     d60:	0000a42d 	andeq	sl, r0, sp, lsr #8
     d64:	f8030500 			; <UNDEFINED> instruction: 0xf8030500
     d68:	10200029 	eorne	r0, r0, r9, lsr #32
     d6c:	0000071e 	andeq	r0, r0, lr, lsl r7
     d70:	00a42e01 	adceq	r2, r4, r1, lsl #28
     d74:	03050000 	movweq	r0, #20480	; 0x5000
     d78:	20002aa4 	andcs	r2, r0, r4, lsr #21
     d7c:	0007ab10 	andeq	sl, r7, r0, lsl fp
     d80:	a42f0100 	strtge	r0, [pc], #-256	; d88 <startup-0x1ffff278>
     d84:	05000000 	streq	r0, [r0, #-0]
     d88:	002a4403 	eoreq	r4, sl, r3, lsl #8
     d8c:	00a40b20 	adceq	r0, r4, r0, lsr #22
     d90:	043c0000 	ldrteq	r0, [ip], #-0
     d94:	8e0e0000 	cdphi	0, 0, cr0, cr14, cr0, {0}
     d98:	04000001 	streq	r0, [r0], #-1
     d9c:	075d1000 	ldrbeq	r1, [sp, -r0]
     da0:	30010000 	andcc	r0, r1, r0
     da4:	0000042c 	andeq	r0, r0, ip, lsr #8
     da8:	2a500305 	bcs	14019c4 <startup-0x1ebfe63c>
     dac:	42112000 	andsmi	r2, r1, #0
     db0:	01000007 	tsteq	r0, r7
     db4:	000b905f 	andeq	r9, fp, pc, asr r0
     db8:	00012420 	andeq	r2, r1, r0, lsr #8
     dbc:	829c0100 	addshi	r0, ip, #0, 2
     dc0:	12000004 	andne	r0, r0, #4
     dc4:	000006ed 	andeq	r0, r0, sp, ror #13
     dc8:	01625f01 	cmneq	r2, r1, lsl #30
     dcc:	91020000 	mrsls	r0, (UNDEF: 2)
     dd0:	07380f6c 	ldreq	r0, [r8, -ip, ror #30]!
     dd4:	60010000 	andvs	r0, r1, r0
     dd8:	0000012e 	andeq	r0, r0, lr, lsr #2
     ddc:	5d1c0305 	ldcpl	3, cr0, [ip, #-20]	; 0xffffffec
     de0:	13002000 	movwne	r2, #0
     de4:	000003fe 	strdeq	r0, [r0], -lr
     de8:	0a0c3101 	beq	30d1f4 <startup-0x1fcf2e0c>
     dec:	01842000 	orreq	r2, r4, r0
     df0:	9c010000 	stcls	0, cr0, [r1], {-0}
     df4:	0006850f 	andeq	r8, r6, pc, lsl #10
     df8:	9e320100 	rsflss	f0, f2, f0
     dfc:	02000000 	andeq	r0, r0, #0
     e00:	580f7491 	stmdapl	pc, {r0, r4, r7, sl, ip, sp, lr}	; <UNPREDICTABLE>
     e04:	01000006 	tsteq	r0, r6
     e08:	00009e36 	andeq	r9, r0, r6, lsr lr
     e0c:	70910200 	addsvc	r0, r1, r0, lsl #4
     e10:	0006990f 	andeq	r9, r6, pc, lsl #18
     e14:	9e3a0100 	rsflse	f0, f2, f0
     e18:	02000000 	andeq	r0, r0, #0
     e1c:	610f6c91 			; <UNDEFINED> instruction: 0x610f6c91
     e20:	01000006 	tsteq	r0, r6
     e24:	00009e3e 	andeq	r9, r0, lr, lsr lr
     e28:	68910200 	ldmvs	r1, {r9}
     e2c:	0001940f 	andeq	r9, r1, pc, lsl #8
     e30:	9e420100 	dvflss	f0, f2, f0
     e34:	02000000 	andeq	r0, r0, #0
     e38:	100f6491 	mulne	pc, r1, r4	; <UNPREDICTABLE>
     e3c:	01000000 	mrseq	r0, (UNDEF: 0)
     e40:	00009e46 	andeq	r9, r0, r6, asr #28
     e44:	60910200 	addsvs	r0, r1, r0, lsl #4
     e48:	0001a50f 	andeq	sl, r1, pc, lsl #10
     e4c:	9e4a0100 	dvflse	f0, f2, f0
     e50:	02000000 	andeq	r0, r0, #0
     e54:	3c0f5c91 	stccc	12, cr5, [pc], {145}	; 0x91
     e58:	01000000 	mrseq	r0, (UNDEF: 0)
     e5c:	00009e4e 	andeq	r9, r0, lr, asr #28
     e60:	58910200 	ldmpl	r1, {r9}
     e64:	0000450f 	andeq	r4, r0, pc, lsl #10
     e68:	9e520100 	rdflss	f0, f2, f0
     e6c:	02000000 	andeq	r0, r0, #0
     e70:	ce0f5491 	mcrgt	4, 0, r5, cr15, cr1, {4}
     e74:	01000001 	tsteq	r0, r1
     e78:	00009e56 	andeq	r9, r0, r6, asr lr
     e7c:	50910200 	addspl	r0, r1, r0, lsl #4
     e80:	0005180f 	andeq	r1, r5, pc, lsl #16
     e84:	9e5a0100 	rdflse	f0, f2, f0
     e88:	02000000 	andeq	r0, r0, #0
     e8c:	00004c91 	muleq	r0, r1, ip
     e90:	000001d5 	ldrdeq	r0, [r0], -r5
     e94:	03140004 	tsteq	r4, #4
     e98:	01040000 	mrseq	r0, (UNDEF: 4)
     e9c:	0000004e 	andeq	r0, r0, lr, asr #32
     ea0:	00084b0c 	andeq	r4, r8, ip, lsl #22
     ea4:	000cb400 	andeq	fp, ip, r0, lsl #8
     ea8:	0000d820 	andeq	sp, r0, r0, lsr #16
     eac:	00043200 	andeq	r3, r4, r0, lsl #4
     eb0:	07040200 	streq	r0, [r4, -r0, lsl #4]
     eb4:	0000032b 	andeq	r0, r0, fp, lsr #6
     eb8:	25070202 	strcs	r0, [r7, #-514]	; 0xfffffdfe
     ebc:	02000003 	andeq	r0, r0, #3
     ec0:	02ca0801 	sbceq	r0, sl, #65536	; 0x10000
     ec4:	0c030000 	stceq	0, cr0, [r3], {-0}
     ec8:	00630502 	rsbeq	r0, r3, r2, lsl #10
     ecc:	d7040000 	strle	r0, [r4, -r0]
     ed0:	02000001 	andeq	r0, r0, #1
     ed4:	00002107 	andeq	r2, r0, r7, lsl #2
     ed8:	02040000 	andeq	r0, r4, #0
     edc:	02000003 	andeq	r0, r0, #3
     ee0:	00002108 	andeq	r2, r0, r8, lsl #2
     ee4:	48040400 	stmdami	r4, {sl}
     ee8:	0200000d 	andeq	r0, r0, #13
     eec:	00006309 	andeq	r6, r0, r9, lsl #6
     ef0:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
     ef4:	00002f04 	andeq	r2, r0, r4, lsl #30
     ef8:	0e9a0600 	cdpeq	6, 9, cr0, cr10, cr0, {0}
     efc:	0a020000 	beq	80f04 <startup-0x1ff7f0fc>
     f00:	00000036 	andeq	r0, r0, r6, lsr r0
     f04:	00029f07 	andeq	r9, r2, r7, lsl #30
     f08:	06030c00 	streq	r0, [r3], -r0, lsl #24
     f0c:	000000a5 	andeq	r0, r0, r5, lsr #1
     f10:	00042d04 	andeq	r2, r4, r4, lsl #26
     f14:	a5070300 	strge	r0, [r7, #-768]	; 0xfffffd00
     f18:	00000000 	andeq	r0, r0, r0
     f1c:	00044304 	andeq	r4, r4, r4, lsl #6
     f20:	a5080300 	strge	r0, [r8, #-768]	; 0xfffffd00
     f24:	04000000 	streq	r0, [r0], #-0
     f28:	00029b04 	andeq	r9, r2, r4, lsl #22
     f2c:	a5090300 	strge	r0, [r9, #-768]	; 0xfffffd00
     f30:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     f34:	69040500 	stmdbvs	r4, {r8, sl}
     f38:	06000000 	streq	r0, [r0], -r0
     f3c:	00000b77 	andeq	r0, r0, r7, ror fp
     f40:	00740a03 	rsbseq	r0, r4, r3, lsl #20
     f44:	53070000 	movwpl	r0, #28672	; 0x7000
     f48:	24000001 	strcs	r0, [r0], #-1
     f4c:	012f0604 			; <UNDEFINED> instruction: 0x012f0604
     f50:	30040000 	andcc	r0, r4, r0
     f54:	04000005 	streq	r0, [r0], #-5
     f58:	00012f07 	andeq	r2, r1, r7, lsl #30
     f5c:	e6040000 	str	r0, [r4], -r0
     f60:	04000000 	streq	r0, [r0], #-0
     f64:	00013508 	andeq	r3, r1, r8, lsl #10
     f68:	0d040400 	cfstrseq	mvf0, [r4, #-0]
     f6c:	04000002 	streq	r0, [r0], #-2
     f70:	00013509 	andeq	r3, r1, r9, lsl #10
     f74:	06040800 	streq	r0, [r4], -r0, lsl #16
     f78:	04000002 	streq	r0, [r0], #-2
     f7c:	00014d0c 	andeq	r4, r1, ip, lsl #26
     f80:	42040c00 	andmi	r0, r4, #0, 24
     f84:	04000002 	streq	r0, [r0], #-2
     f88:	00014d0d 	andeq	r4, r1, sp, lsl #26
     f8c:	0e041000 	cdpeq	0, 0, cr1, cr4, cr0, {0}
     f90:	04000001 	streq	r0, [r0], #-1
     f94:	00013510 	andeq	r3, r1, r0, lsl r5
     f98:	e0041400 	and	r1, r4, r0, lsl #8
     f9c:	04000003 	streq	r0, [r0], #-3
     fa0:	00013511 	andeq	r3, r1, r1, lsl r5
     fa4:	e9041800 	stmdb	r4, {fp, ip}
     fa8:	04000004 	streq	r0, [r0], #-4
     fac:	00013512 	andeq	r3, r1, r2, lsl r5
     fb0:	2a041c00 	bcs	107fb8 <startup-0x1fef8048>
     fb4:	04000000 	streq	r0, [r0], #-0
     fb8:	00013513 	andeq	r3, r1, r3, lsl r5
     fbc:	05002000 	streq	r2, [r0, #-0]
     fc0:	0000ab04 	andeq	sl, r0, r4, lsl #22
     fc4:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
     fc8:	00746e69 	rsbseq	r6, r4, r9, ror #28
     fcc:	00014709 	andeq	r4, r1, r9, lsl #14
     fd0:	01470a00 	cmpeq	r7, r0, lsl #20
     fd4:	05000000 	streq	r0, [r0, #-0]
     fd8:	0000b604 	andeq	fp, r0, r4, lsl #12
     fdc:	3c040500 	cfstr32cc	mvfx0, [r4], {-0}
     fe0:	06000001 	streq	r0, [r0], -r1
     fe4:	00000154 	andeq	r0, r0, r4, asr r1
     fe8:	00b61504 	adcseq	r1, r6, r4, lsl #10
     fec:	690b0000 	stmdbvs	fp, {}	; <UNPREDICTABLE>
     ff0:	69000001 	stmdbvs	r0, {r0}
     ff4:	0c000001 	stceq	0, cr0, [r0], {1}
     ff8:	53040500 	movwpl	r0, #17664	; 0x4500
     ffc:	0d000001 	stceq	0, cr0, [r0, #-4]
    1000:	0000040a 	andeq	r0, r0, sl, lsl #8
    1004:	015e1c04 	cmpeq	lr, r4, lsl #24
    1008:	c10d0000 	mrsgt	r0, (UNDEF: 13)
    100c:	04000001 	streq	r0, [r0], #-1
    1010:	0001351d 	andeq	r3, r1, sp, lsl r5
    1014:	087a0e00 	ldmdaeq	sl!, {r9, sl, fp}^
    1018:	06010000 	streq	r0, [r1], -r0
    101c:	20000cb4 			; <UNDEFINED> instruction: 0x20000cb4
    1020:	000000d8 	ldrdeq	r0, [r0], -r8
    1024:	b10f9c01 	tstlt	pc, r1, lsl #24
    1028:	01000005 	tsteq	r0, r5
    102c:	00016906 	andeq	r6, r1, r6, lsl #18
    1030:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1034:	00082e10 	andeq	r2, r8, r0, lsl lr
    1038:	350d0100 	strcc	r0, [sp, #-256]	; 0xffffff00
    103c:	05000001 	streq	r0, [r0, #-1]
    1040:	00277803 	eoreq	r7, r7, r3, lsl #16
    1044:	083d1020 	ldmdaeq	sp!, {r5, ip}
    1048:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    104c:	00000135 	andeq	r0, r0, r5, lsr r1
    1050:	27800305 	strcs	r0, [r0, r5, lsl #6]
    1054:	f3102000 	vhadd.u16	d2, d0, d0
    1058:	01000004 	tsteq	r0, r4
    105c:	0001350f 	andeq	r3, r1, pc, lsl #10
    1060:	7c030500 	cfstr32vc	mvfx0, [r3], {-0}
    1064:	00200027 	eoreq	r0, r0, r7, lsr #32
    1068:	00064100 	andeq	r4, r6, r0, lsl #2
    106c:	e2000400 	and	r0, r0, #0, 8
    1070:	04000003 	streq	r0, [r0], #-3
    1074:	00004e01 	andeq	r4, r0, r1, lsl #28
    1078:	0afb0c00 	beq	ffec4080 <firstTime.4093+0xdfebdd84>
    107c:	0d8c0000 	stceq	0, cr0, [ip]
    1080:	03642000 	cmneq	r4, #0
    1084:	04d30000 	ldrbeq	r0, [r3], #0
    1088:	0c020000 	stceq	0, cr0, [r2], {-0}
    108c:	004e0502 	subeq	r0, lr, r2, lsl #10
    1090:	d7030000 	strle	r0, [r3, -r0]
    1094:	02000001 	andeq	r0, r0, #1
    1098:	00004e07 	andeq	r4, r0, r7, lsl #28
    109c:	02030000 	andeq	r0, r3, #0
    10a0:	02000003 	andeq	r0, r0, #3
    10a4:	00004e08 	andeq	r4, r0, r8, lsl #28
    10a8:	48030400 	stmdami	r3, {sl}
    10ac:	0200000d 	andeq	r0, r0, #13
    10b0:	00005509 	andeq	r5, r0, r9, lsl #10
    10b4:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    10b8:	032b0704 			; <UNDEFINED> instruction: 0x032b0704
    10bc:	04050000 	streq	r0, [r5], #-0
    10c0:	0000005b 	andeq	r0, r0, fp, asr r0
    10c4:	ca080104 	bgt	2014dc <startup-0x1fdfeb24>
    10c8:	06000002 	streq	r0, [r0], -r2
    10cc:	00000e9a 	muleq	r0, sl, lr
    10d0:	00210a02 	eoreq	r0, r1, r2, lsl #20
    10d4:	9f070000 	svcls	0x00070000
    10d8:	0c000002 	stceq	0, cr0, [r0], {2}
    10dc:	009e0603 	addseq	r0, lr, r3, lsl #12
    10e0:	2d030000 	stccs	0, cr0, [r3, #-0]
    10e4:	03000004 	movweq	r0, #4
    10e8:	00009e07 	andeq	r9, r0, r7, lsl #28
    10ec:	43030000 	movwmi	r0, #12288	; 0x3000
    10f0:	03000004 	movweq	r0, #4
    10f4:	00009e08 	andeq	r9, r0, r8, lsl #28
    10f8:	9b030400 	blls	c2100 <startup-0x1ff3df00>
    10fc:	03000002 	movweq	r0, #2
    1100:	00009e09 	andeq	r9, r0, r9, lsl #28
    1104:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    1108:	00006204 	andeq	r6, r0, r4, lsl #4
    110c:	0b770600 	bleq	1dc2914 <startup-0x1e23d6ec>
    1110:	0a030000 	beq	c1118 <startup-0x1ff3eee8>
    1114:	0000006d 	andeq	r0, r0, sp, rrx
    1118:	00015307 	andeq	r5, r1, r7, lsl #6
    111c:	06042400 	streq	r2, [r4], -r0, lsl #8
    1120:	00000128 	andeq	r0, r0, r8, lsr #2
    1124:	00053003 	andeq	r3, r5, r3
    1128:	28070400 	stmdacs	r7, {sl}
    112c:	00000001 	andeq	r0, r0, r1
    1130:	0000e603 	andeq	lr, r0, r3, lsl #12
    1134:	2e080400 	cfcpyscs	mvf0, mvf8
    1138:	04000001 	streq	r0, [r0], #-1
    113c:	00020d03 	andeq	r0, r2, r3, lsl #26
    1140:	2e090400 	cfcpyscs	mvf0, mvf9
    1144:	08000001 	stmdaeq	r0, {r0}
    1148:	00020603 	andeq	r0, r2, r3, lsl #12
    114c:	460c0400 	strmi	r0, [ip], -r0, lsl #8
    1150:	0c000001 	stceq	0, cr0, [r0], {1}
    1154:	00024203 	andeq	r4, r2, r3, lsl #4
    1158:	460d0400 	strmi	r0, [sp], -r0, lsl #8
    115c:	10000001 	andne	r0, r0, r1
    1160:	00010e03 	andeq	r0, r1, r3, lsl #28
    1164:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
    1168:	14000001 	strne	r0, [r0], #-1
    116c:	0003e003 	andeq	lr, r3, r3
    1170:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
    1174:	18000001 	stmdane	r0, {r0}
    1178:	0004e903 	andeq	lr, r4, r3, lsl #18
    117c:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
    1180:	1c000001 	stcne	0, cr0, [r0], {1}
    1184:	00002a03 	andeq	r2, r0, r3, lsl #20
    1188:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
    118c:	20000001 	andcs	r0, r0, r1
    1190:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    1194:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1198:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    119c:	40090074 	andmi	r0, r9, r4, ror r0
    11a0:	0a000001 	beq	11ac <startup-0x1fffee54>
    11a4:	00000140 	andeq	r0, r0, r0, asr #2
    11a8:	af040500 	svcge	0x00040500
    11ac:	05000000 	streq	r0, [r0, #-0]
    11b0:	00013504 	andeq	r3, r1, r4, lsl #10
    11b4:	01540600 	cmpeq	r4, r0, lsl #12
    11b8:	15040000 	strne	r0, [r4, #-0]
    11bc:	000000af 	andeq	r0, r0, pc, lsr #1
    11c0:	0001620b 	andeq	r6, r1, fp, lsl #4
    11c4:	00016200 	andeq	r6, r1, r0, lsl #4
    11c8:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    11cc:	00014c04 	andeq	r4, r1, r4, lsl #24
    11d0:	040a0d00 	streq	r0, [sl], #-3328	; 0xfffff300
    11d4:	1c040000 	stcne	0, cr0, [r4], {-0}
    11d8:	00000157 	andeq	r0, r0, r7, asr r1
    11dc:	0001c10d 	andeq	ip, r1, sp, lsl #2
    11e0:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
    11e4:	0b000001 	bleq	11f0 <startup-0x1fffee10>
    11e8:	0000005b 	andeq	r0, r0, fp, asr r0
    11ec:	0000018e 	andeq	r0, r0, lr, lsl #3
    11f0:	00018e0e 	andeq	r8, r1, lr, lsl #28
    11f4:	04006300 	streq	r6, [r0], #-768	; 0xfffffd00
    11f8:	00fa0704 	rscseq	r0, sl, r4, lsl #14
    11fc:	610f0000 	mrsvs	r0, CPSR
    1200:	0500000b 	streq	r0, [r0, #-11]
    1204:	00017e03 	andeq	r7, r1, r3, lsl #28
    1208:	20030500 	andcs	r0, r3, r0, lsl #10
    120c:	0f20005d 	svceq	0x0020005d
    1210:	000009cc 	andeq	r0, r0, ip, asr #19
    1214:	017e0306 	cmneq	lr, r6, lsl #6
    1218:	03050000 	movweq	r0, #20480	; 0x5000
    121c:	20005d84 	andcs	r5, r0, r4, lsl #27
    1220:	000a140f 	andeq	r1, sl, pc, lsl #8
    1224:	7e030700 	cdpvc	7, 0, cr0, cr3, cr0, {0}
    1228:	05000001 	streq	r0, [r0, #-1]
    122c:	005de803 	subseq	lr, sp, r3, lsl #16
    1230:	09bb0f20 	ldmibeq	fp!, {r5, r8, r9, sl, fp}
    1234:	03080000 	movweq	r0, #32768	; 0x8000
    1238:	0000017e 	andeq	r0, r0, lr, ror r1
    123c:	5e4c0305 	cdppl	3, 4, cr0, cr12, cr5, {0}
    1240:	3a0f2000 	bcc	3c9248 <startup-0x1fc36db8>
    1244:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    1248:	00017e03 	andeq	r7, r1, r3, lsl #28
    124c:	b0030500 	andlt	r0, r3, r0, lsl #10
    1250:	0f20005e 	svceq	0x0020005e
    1254:	00000c0e 	andeq	r0, r0, lr, lsl #24
    1258:	017e030a 	cmneq	lr, sl, lsl #6
    125c:	03050000 	movweq	r0, #20480	; 0x5000
    1260:	20005f14 	andcs	r5, r0, r4, lsl pc
    1264:	0009e70f 	andeq	lr, r9, pc, lsl #14
    1268:	7e030b00 	vmlavc.f64	d0, d3, d0
    126c:	05000001 	streq	r0, [r0, #-1]
    1270:	005f7803 	subseq	r7, pc, r3, lsl #16
    1274:	0ad50f20 	beq	ff544efc <firstTime.4093+0xdf53ec00>
    1278:	030c0000 	movweq	r0, #49152	; 0xc000
    127c:	0000017e 	andeq	r0, r0, lr, ror r1
    1280:	5fdc0305 	svcpl	0x00dc0305
    1284:	960f2000 	strls	r2, [pc], -r0
    1288:	0d000008 	stceq	0, cr0, [r0, #-32]	; 0xffffffe0
    128c:	00017e03 	andeq	r7, r1, r3, lsl #28
    1290:	40030500 	andmi	r0, r3, r0, lsl #10
    1294:	0f200060 	svceq	0x00200060
    1298:	000009f8 	strdeq	r0, [r0], -r8
    129c:	017e030e 	cmneq	lr, lr, lsl #6
    12a0:	03050000 	movweq	r0, #20480	; 0x5000
    12a4:	200060a4 	andcs	r6, r0, r4, lsr #1
    12a8:	000a7c0f 	andeq	r7, sl, pc, lsl #24
    12ac:	7e030f00 	cdpvc	15, 0, cr0, cr3, cr0, {0}
    12b0:	05000001 	streq	r0, [r0, #-1]
    12b4:	00610803 	rsbeq	r0, r1, r3, lsl #16
    12b8:	08b20f20 	ldmeq	r2!, {r5, r8, r9, sl, fp}
    12bc:	03100000 	tsteq	r0, #0
    12c0:	0000017e 	andeq	r0, r0, lr, ror r1
    12c4:	616c0305 	cmnvs	ip, r5, lsl #6
    12c8:	250f2000 	strcs	r2, [pc, #-0]	; 12d0 <startup-0x1fffed30>
    12cc:	1100000a 	tstne	r0, sl
    12d0:	00017e03 	andeq	r7, r1, r3, lsl #28
    12d4:	d0030500 	andle	r0, r3, r0, lsl #10
    12d8:	0f200061 	svceq	0x00200061
    12dc:	00000a45 	andeq	r0, r0, r5, asr #20
    12e0:	017e0312 	cmneq	lr, r2, lsl r3
    12e4:	03050000 	movweq	r0, #20480	; 0x5000
    12e8:	20006234 	andcs	r6, r0, r4, lsr r2
    12ec:	0008dc0f 	andeq	sp, r8, pc, lsl #24
    12f0:	7e031300 	cdpvc	3, 0, cr1, cr3, cr0, {0}
    12f4:	05000001 	streq	r0, [r0, #-1]
    12f8:	00629803 	rsbeq	r9, r2, r3, lsl #16
    12fc:	0ae51020 	beq	ff945384 <firstTime.4093+0xdf93f088>
    1300:	15010000 	strne	r0, [r1, #-0]
    1304:	0000009e 	muleq	r0, lr, r0
    1308:	2b6c0305 	blcs	1b01f24 <startup-0x1e4fe0dc>
    130c:	18102000 	ldmdane	r0, {sp}
    1310:	01000009 	tsteq	r0, r9
    1314:	00009e16 	andeq	r9, r0, r6, lsl lr
    1318:	04030500 	streq	r0, [r3], #-1280	; 0xfffffb00
    131c:	1020002b 	eorne	r0, r0, fp, lsr #32
    1320:	00000902 	andeq	r0, r0, r2, lsl #18
    1324:	009e1701 	addseq	r1, lr, r1, lsl #14
    1328:	03050000 	movweq	r0, #20480	; 0x5000
    132c:	20002bfc 	strdcs	r2, [r0], -ip
    1330:	00095a10 	andeq	r5, r9, r0, lsl sl
    1334:	9e180100 	muflse	f0, f0, f0
    1338:	05000000 	streq	r0, [r0, #-0]
    133c:	002b6803 	eoreq	r6, fp, r3, lsl #16
    1340:	0a551020 	beq	15453c8 <startup-0x1eabac38>
    1344:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    1348:	0000009e 	muleq	r0, lr, r0
    134c:	2bec0305 	blcs	ffb01f68 <firstTime.4093+0xdfafbc6c>
    1350:	f0102000 			; <UNDEFINED> instruction: 0xf0102000
    1354:	0100000a 	tsteq	r0, sl
    1358:	00009e1a 	andeq	r9, r0, sl, lsl lr
    135c:	a0030500 	andge	r0, r3, r0, lsl #10
    1360:	1020002c 	eorne	r0, r0, ip, lsr #32
    1364:	0000090d 	andeq	r0, r0, sp, lsl #18
    1368:	009e1b01 	addseq	r1, lr, r1, lsl #22
    136c:	03050000 	movweq	r0, #20480	; 0x5000
    1370:	20002b60 	andcs	r2, r0, r0, ror #22
    1374:	000b7d10 	andeq	r7, fp, r0, lsl sp
    1378:	9e1c0100 	muflse	f0, f4, f0
    137c:	05000000 	streq	r0, [r0, #-0]
    1380:	002b8803 	eoreq	r8, fp, r3, lsl #16
    1384:	08ed1020 	stmiaeq	sp!, {r5, ip}^
    1388:	1d010000 	stcne	0, cr0, [r1, #-0]
    138c:	0000009e 	muleq	r0, lr, r0
    1390:	2bb40305 	blcs	fed01fac <firstTime.4093+0xdecfbcb0>
    1394:	bb102000 	bllt	40939c <startup-0x1fbf6c64>
    1398:	0100000a 	tsteq	r0, sl
    139c:	00009e1e 	andeq	r9, r0, lr, lsl lr
    13a0:	84030500 	strhi	r0, [r3], #-1280	; 0xfffffb00
    13a4:	1020002c 	eorne	r0, r0, ip, lsr #32
    13a8:	00000950 	andeq	r0, r0, r0, asr r9
    13ac:	009e1f01 	addseq	r1, lr, r1, lsl #30
    13b0:	03050000 	movweq	r0, #20480	; 0x5000
    13b4:	20002b64 	andcs	r2, r0, r4, ror #22
    13b8:	000bc510 	andeq	ip, fp, r0, lsl r5
    13bc:	9e200100 	suflss	f0, f0, f0
    13c0:	05000000 	streq	r0, [r0, #-0]
    13c4:	002b0003 	eoreq	r0, fp, r3
    13c8:	09311020 	ldmdbeq	r1!, {r5, ip}
    13cc:	21010000 	mrscs	r0, (UNDEF: 1)
    13d0:	0000009e 	muleq	r0, lr, r0
    13d4:	2b140305 	blcs	501ff0 <startup-0x1fafe010>
    13d8:	57102000 	ldrpl	r2, [r0, -r0]
    13dc:	0100000b 	tsteq	r0, fp
    13e0:	00009e22 	andeq	r9, r0, r2, lsr #28
    13e4:	98030500 	stmdals	r3, {r8, sl}
    13e8:	1020002b 	eorne	r0, r0, fp, lsr #32
    13ec:	00000a96 	muleq	r0, r6, sl
    13f0:	009e2301 	addseq	r2, lr, r1, lsl #6
    13f4:	03050000 	movweq	r0, #20480	; 0x5000
    13f8:	20002bdc 	ldrdcs	r2, [r0], -ip
    13fc:	000b9410 	andeq	r9, fp, r0, lsl r4
    1400:	62250100 	eorvs	r0, r5, #0, 2
    1404:	05000000 	streq	r0, [r0, #-0]
    1408:	002b7c03 	eoreq	r7, fp, r3, lsl #24
    140c:	09951020 	ldmibeq	r5, {r5, ip}
    1410:	26010000 	strcs	r0, [r1], -r0
    1414:	00000062 	andeq	r0, r0, r2, rrx
    1418:	2bf00305 	blcs	ffc02034 <firstTime.4093+0xdfbfbd38>
    141c:	4a102000 	bmi	409424 <startup-0x1fbf6bdc>
    1420:	0100000b 	tsteq	r0, fp
    1424:	00006227 	andeq	r6, r0, r7, lsr #4
    1428:	8c030500 	cfstr32hi	mvfx0, [r3], {-0}
    142c:	1020002b 	eorne	r0, r0, fp, lsr #32
    1430:	00000ac6 	andeq	r0, r0, r6, asr #21
    1434:	00622801 	rsbeq	r2, r2, r1, lsl #16
    1438:	03050000 	movweq	r0, #20480	; 0x5000
    143c:	20002c88 	andcs	r2, r0, r8, lsl #25
    1440:	00088710 	andeq	r8, r8, r0, lsl r7
    1444:	62290100 	eorvs	r0, r9, #0, 2
    1448:	05000000 	streq	r0, [r0, #-0]
    144c:	002c0003 	eoreq	r0, ip, r3
    1450:	09791020 	ldmdbeq	r9!, {r5, ip}^
    1454:	2a010000 	bcs	4145c <startup-0x1ffbeba4>
    1458:	00000062 	andeq	r0, r0, r2, rrx
    145c:	2ba80305 	blcs	fea02078 <firstTime.4093+0xde9fbd7c>
    1460:	a2102000 	andsge	r2, r0, #0
    1464:	0100000b 	tsteq	r0, fp
    1468:	0000622b 	andeq	r6, r0, fp, lsr #4
    146c:	e0030500 	and	r0, r3, r0, lsl #10
    1470:	1020002b 	eorne	r0, r0, fp, lsr #32
    1474:	00000a36 	andeq	r0, r0, r6, lsr sl
    1478:	00622c01 	rsbeq	r2, r2, r1, lsl #24
    147c:	03050000 	movweq	r0, #20480	; 0x5000
    1480:	20002c24 	andcs	r2, r0, r4, lsr #24
    1484:	000a6e10 	andeq	r6, sl, r0, lsl lr
    1488:	622d0100 	eorvs	r0, sp, #0, 2
    148c:	05000000 	streq	r0, [r0, #-0]
    1490:	002c3003 	eoreq	r3, ip, r3
    1494:	09221020 	stmdbeq	r2!, {r5, ip}
    1498:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    149c:	00000062 	andeq	r0, r0, r2, rrx
    14a0:	2b180305 	blcs	6020bc <startup-0x1f9fdf44>
    14a4:	5f102000 	svcpl	0x00102000
    14a8:	0100000a 	tsteq	r0, sl
    14ac:	0000622f 	andeq	r6, r0, pc, lsr #4
    14b0:	18030500 	stmdane	r3, {r8, sl}
    14b4:	1020002c 	eorne	r0, r0, ip, lsr #32
    14b8:	00000987 	andeq	r0, r0, r7, lsl #19
    14bc:	00623001 	rsbeq	r3, r2, r1
    14c0:	03050000 	movweq	r0, #20480	; 0x5000
    14c4:	20002c94 	mulcs	r0, r4, ip
    14c8:	000aac10 	andeq	sl, sl, r0, lsl ip
    14cc:	62310100 	eorsvs	r0, r1, #0, 2
    14d0:	05000000 	streq	r0, [r0, #-0]
    14d4:	002bc403 	eoreq	ip, fp, r3, lsl #8
    14d8:	08c31020 	stmiaeq	r3, {r5, ip}^
    14dc:	32010000 	andcc	r0, r1, #0
    14e0:	00000062 	andeq	r0, r0, r2, rrx
    14e4:	2b9c0305 	blcs	fe702100 <firstTime.4093+0xde6fbe04>
    14e8:	a3102000 	tstge	r0, #0
    14ec:	01000009 	tsteq	r0, r9
    14f0:	00006233 	andeq	r6, r0, r3, lsr r2
    14f4:	b8030500 	stmdalt	r3, {r8, sl}
    14f8:	1020002b 	eorne	r0, r0, fp, lsr #32
    14fc:	00000b32 	andeq	r0, r0, r2, lsr fp
    1500:	014c3601 	cmpeq	ip, r1, lsl #12
    1504:	03050000 	movweq	r0, #20480	; 0x5000
    1508:	20002b30 	andcs	r2, r0, r0, lsr fp
    150c:	000b7210 	andeq	r7, fp, r0, lsl r2
    1510:	a4370100 	ldrtge	r0, [r7], #-256	; 0xffffff00
    1514:	05000000 	streq	r0, [r0, #-0]
    1518:	002b5403 	eoreq	r5, fp, r3, lsl #8
    151c:	0bf91020 	bleq	ffe455a4 <firstTime.4093+0xdfe3f2a8>
    1520:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    1524:	000000a4 	andeq	r0, r0, r4, lsr #1
    1528:	2b240305 	blcs	902144 <startup-0x1f6fdebc>
    152c:	09102000 	ldmdbeq	r0, {sp}
    1530:	0100000a 	tsteq	r0, sl
    1534:	0000a439 	andeq	sl, r0, r9, lsr r4
    1538:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
    153c:	1020002c 	eorne	r0, r0, ip, lsr #32
    1540:	000008a7 	andeq	r0, r0, r7, lsr #17
    1544:	00a43a01 	adceq	r3, r4, r1, lsl #20
    1548:	03050000 	movweq	r0, #20480	; 0x5000
    154c:	20002b70 	andcs	r2, r0, r0, ror fp
    1550:	000bd010 	andeq	sp, fp, r0, lsl r0
    1554:	a43b0100 	ldrtge	r0, [fp], #-256	; 0xffffff00
    1558:	05000000 	streq	r0, [r0, #-0]
    155c:	002bd003 	eoreq	sp, fp, r3
    1560:	09dc1020 	ldmibeq	ip, {r5, ip}^
    1564:	3c010000 	stccc	0, cr0, [r1], {-0}
    1568:	000000a4 	andeq	r0, r0, r4, lsr #1
    156c:	2b080305 	blcs	202188 <startup-0x1fdfde78>
    1570:	a40b2000 	strge	r2, [fp], #-0
    1574:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    1578:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
    157c:	0000018e 	andeq	r0, r0, lr, lsl #3
    1580:	a1100005 	tstge	r0, r5
    1584:	0100000a 	tsteq	r0, sl
    1588:	0005093f 	andeq	r0, r5, pc, lsr r9
    158c:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
    1590:	1120002c 			; <UNDEFINED> instruction: 0x1120002c
    1594:	00000b28 	andeq	r0, r0, r8, lsr #22
    1598:	0f987601 	svceq	0x00987601
    159c:	01582000 	cmpeq	r8, r0
    15a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    15a4:	0000055f 	andeq	r0, r0, pc, asr r5
    15a8:	000b3212 	andeq	r3, fp, r2, lsl r2
    15ac:	62760100 	rsbsvs	r0, r6, #0, 2
    15b0:	02000001 	andeq	r0, r0, #1
    15b4:	380f6c91 	stmdacc	pc, {r0, r4, r7, sl, fp, sp, lr}	; <UNPREDICTABLE>
    15b8:	01000007 	tsteq	r0, r7
    15bc:	00012e77 	andeq	r2, r1, r7, ror lr
    15c0:	fc030500 	stc2	5, cr0, [r3], {-0}
    15c4:	00200062 	eoreq	r0, r0, r2, rrx
    15c8:	0003fe13 	andeq	pc, r3, r3, lsl lr	; <UNPREDICTABLE>
    15cc:	8c400100 	stfhie	f0, [r0], {-0}
    15d0:	0c20000d 	stceq	0, cr0, [r0], #-52	; 0xffffffcc
    15d4:	01000002 	tsteq	r0, r2
    15d8:	0bb10f9c 	bleq	fec45450 <firstTime.4093+0xdec3f154>
    15dc:	42010000 	andmi	r0, r1, #0
    15e0:	0000009e 	muleq	r0, lr, r0
    15e4:	0f749102 	svceq	0x00749102
    15e8:	00000bbb 			; <UNDEFINED> instruction: 0x00000bbb
    15ec:	009e4501 	addseq	r4, lr, r1, lsl #10
    15f0:	91020000 	mrsls	r0, (UNDEF: 2)
    15f4:	09b10f70 	ldmibeq	r1!, {r4, r5, r6, r8, r9, sl, fp}
    15f8:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    15fc:	0000009e 	muleq	r0, lr, r0
    1600:	0f6c9102 	svceq	0x006c9102
    1604:	000008d2 	ldrdeq	r0, [r0], -r2
    1608:	009e4c01 	addseq	r4, lr, r1, lsl #24
    160c:	91020000 	mrsls	r0, (UNDEF: 2)
    1610:	0bdb0f68 	bleq	ff6c53b8 <firstTime.4093+0xdf6bf0bc>
    1614:	4f010000 	svcmi	0x00010000
    1618:	0000009e 	muleq	r0, lr, r0
    161c:	0f649102 	svceq	0x00649102
    1620:	0000096f 	andeq	r0, r0, pc, ror #18
    1624:	009e5201 	addseq	r5, lr, r1, lsl #4
    1628:	91020000 	mrsls	r0, (UNDEF: 2)
    162c:	0b870f60 	bleq	fe1c53b4 <firstTime.4093+0xde1bf0b8>
    1630:	57010000 	strpl	r0, [r1, -r0]
    1634:	0000009e 	muleq	r0, lr, r0
    1638:	0f5c9102 	svceq	0x005c9102
    163c:	00000be5 	andeq	r0, r0, r5, ror #23
    1640:	009e5a01 	addseq	r5, lr, r1, lsl #20
    1644:	91020000 	mrsls	r0, (UNDEF: 2)
    1648:	0bef0f58 	bleq	ffbc53b0 <firstTime.4093+0xdfbbf0b4>
    164c:	5d010000 	stcpl	0, cr0, [r1, #-0]
    1650:	0000009e 	muleq	r0, lr, r0
    1654:	0f549102 	svceq	0x00549102
    1658:	000008f8 	strdeq	r0, [r0], -r8
    165c:	009e6101 	addseq	r6, lr, r1, lsl #2
    1660:	91020000 	mrsls	r0, (UNDEF: 2)
    1664:	093c0f50 	ldmdbeq	ip!, {r4, r6, r8, r9, sl, fp}
    1668:	64010000 	strvs	r0, [r1], #-0
    166c:	0000009e 	muleq	r0, lr, r0
    1670:	0f4c9102 	svceq	0x004c9102
    1674:	00000946 	andeq	r0, r0, r6, asr #18
    1678:	009e6701 	addseq	r6, lr, r1, lsl #14
    167c:	91020000 	mrsls	r0, (UNDEF: 2)
    1680:	0c040f48 	stceq	15, cr0, [r4], {72}	; 0x48
    1684:	6b010000 	blvs	4168c <startup-0x1ffbe974>
    1688:	0000009e 	muleq	r0, lr, r0
    168c:	0f449102 	svceq	0x00449102
    1690:	00000a8c 	andeq	r0, r0, ip, lsl #21
    1694:	009e6e01 	addseq	r6, lr, r1, lsl #28
    1698:	91020000 	mrsls	r0, (UNDEF: 2)
    169c:	09650f40 	stmdbeq	r5!, {r6, r8, r9, sl, fp}^
    16a0:	71010000 	mrsvc	r0, (UNDEF: 1)
    16a4:	0000009e 	muleq	r0, lr, r0
    16a8:	7fbc9103 	svcvc	0x00bc9103
    16ac:	089f0000 	ldmeq	pc, {}	; <UNPREDICTABLE>
    16b0:	00040000 	andeq	r0, r4, r0
    16b4:	000004e2 	andeq	r0, r0, r2, ror #9
    16b8:	004e0104 	subeq	r0, lr, r4, lsl #2
    16bc:	0a0c0000 	beq	3016c4 <startup-0x1fcfe93c>
    16c0:	f000000d 			; <UNDEFINED> instruction: 0xf000000d
    16c4:	44200010 	strtmi	r0, [r0], #-16
    16c8:	b400000e 	strlt	r0, [r0], #-14
    16cc:	02000006 	andeq	r0, r0, #6
    16d0:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
    16d4:	03000000 	movweq	r0, #0
    16d8:	000001d7 	ldrdeq	r0, [r0], -r7
    16dc:	004e0702 	subeq	r0, lr, r2, lsl #14
    16e0:	03000000 	movweq	r0, #0
    16e4:	00000302 	andeq	r0, r0, r2, lsl #6
    16e8:	004e0802 	subeq	r0, lr, r2, lsl #16
    16ec:	03040000 	movweq	r0, #16384	; 0x4000
    16f0:	00000d48 	andeq	r0, r0, r8, asr #26
    16f4:	00550902 	subseq	r0, r5, r2, lsl #18
    16f8:	00080000 	andeq	r0, r8, r0
    16fc:	2b070404 	blcs	1c2714 <startup-0x1fe3d8ec>
    1700:	05000003 	streq	r0, [r0, #-3]
    1704:	00005b04 	andeq	r5, r0, r4, lsl #22
    1708:	08010400 	stmdaeq	r1, {sl}
    170c:	000002ca 	andeq	r0, r0, sl, asr #5
    1710:	000e9a06 	andeq	r9, lr, r6, lsl #20
    1714:	210a0200 	mrscs	r0, R10_fiq
    1718:	07000000 	streq	r0, [r0, -r0]
    171c:	0000029f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    1720:	9e06030c 	cdpls	3, 0, cr0, cr6, cr12, {0}
    1724:	03000000 	movweq	r0, #0
    1728:	0000042d 	andeq	r0, r0, sp, lsr #8
    172c:	009e0703 	addseq	r0, lr, r3, lsl #14
    1730:	03000000 	movweq	r0, #0
    1734:	00000443 	andeq	r0, r0, r3, asr #8
    1738:	009e0803 	addseq	r0, lr, r3, lsl #16
    173c:	03040000 	movweq	r0, #16384	; 0x4000
    1740:	0000029b 	muleq	r0, fp, r2
    1744:	009e0903 	addseq	r0, lr, r3, lsl #18
    1748:	00080000 	andeq	r0, r8, r0
    174c:	00620405 	rsbeq	r0, r2, r5, lsl #8
    1750:	77060000 	strvc	r0, [r6, -r0]
    1754:	0300000b 	movweq	r0, #11
    1758:	00006d0a 	andeq	r6, r0, sl, lsl #26
    175c:	01530700 	cmpeq	r3, r0, lsl #14
    1760:	04240000 	strteq	r0, [r4], #-0
    1764:	00012806 	andeq	r2, r1, r6, lsl #16
    1768:	05300300 	ldreq	r0, [r0, #-768]!	; 0xfffffd00
    176c:	07040000 	streq	r0, [r4, -r0]
    1770:	00000128 	andeq	r0, r0, r8, lsr #2
    1774:	00e60300 	rsceq	r0, r6, r0, lsl #6
    1778:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    177c:	0000012e 	andeq	r0, r0, lr, lsr #2
    1780:	020d0304 	andeq	r0, sp, #4, 6	; 0x10000000
    1784:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    1788:	0000012e 	andeq	r0, r0, lr, lsr #2
    178c:	02060308 	andeq	r0, r6, #8, 6	; 0x20000000
    1790:	0c040000 	stceq	0, cr0, [r4], {-0}
    1794:	00000146 	andeq	r0, r0, r6, asr #2
    1798:	0242030c 	subeq	r0, r2, #12, 6	; 0x30000000
    179c:	0d040000 	stceq	0, cr0, [r4, #-0]
    17a0:	00000146 	andeq	r0, r0, r6, asr #2
    17a4:	010e0310 	tsteq	lr, r0, lsl r3
    17a8:	10040000 	andne	r0, r4, r0
    17ac:	0000012e 	andeq	r0, r0, lr, lsr #2
    17b0:	03e00314 	mvneq	r0, #20, 6	; 0x50000000
    17b4:	11040000 	mrsne	r0, (UNDEF: 4)
    17b8:	0000012e 	andeq	r0, r0, lr, lsr #2
    17bc:	04e90318 	strbteq	r0, [r9], #792	; 0x318
    17c0:	12040000 	andne	r0, r4, #0
    17c4:	0000012e 	andeq	r0, r0, lr, lsr #2
    17c8:	002a031c 	eoreq	r0, sl, ip, lsl r3
    17cc:	13040000 	movwne	r0, #16384	; 0x4000
    17d0:	0000012e 	andeq	r0, r0, lr, lsr #2
    17d4:	04050020 	streq	r0, [r5], #-32	; 0xffffffe0
    17d8:	000000a4 	andeq	r0, r0, r4, lsr #1
    17dc:	69050408 	stmdbvs	r5, {r3, sl}
    17e0:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    17e4:	00000140 	andeq	r0, r0, r0, asr #2
    17e8:	0001400a 	andeq	r4, r1, sl
    17ec:	04050000 	streq	r0, [r5], #-0
    17f0:	000000af 	andeq	r0, r0, pc, lsr #1
    17f4:	01350405 	teqeq	r5, r5, lsl #8
    17f8:	54060000 	strpl	r0, [r6], #-0
    17fc:	04000001 	streq	r0, [r0], #-1
    1800:	0000af15 	andeq	sl, r0, r5, lsl pc
    1804:	01620b00 	cmneq	r2, r0, lsl #22
    1808:	01620000 	cmneq	r2, r0
    180c:	000c0000 	andeq	r0, ip, r0
    1810:	014c0405 	cmpeq	ip, r5, lsl #8
    1814:	0a0d0000 	beq	34181c <startup-0x1fcbe7e4>
    1818:	04000004 	streq	r0, [r0], #-4
    181c:	0001571c 	andeq	r5, r1, ip, lsl r7
    1820:	01c10d00 	biceq	r0, r1, r0, lsl #26
    1824:	1d040000 	stcne	0, cr0, [r4, #-0]
    1828:	0000012e 	andeq	r0, r0, lr, lsr #2
    182c:	00018606 	andeq	r8, r1, r6, lsl #12
    1830:	5b240500 	blpl	902c38 <startup-0x1f6fd3c8>
    1834:	0b000000 	bleq	183c <startup-0x1fffe7c4>
    1838:	0000017e 	andeq	r0, r0, lr, ror r1
    183c:	0000019a 	muleq	r0, sl, r1
    1840:	00019a0e 	andeq	r9, r1, lr, lsl #20
    1844:	0003ff00 	andeq	pc, r3, r0, lsl #30
    1848:	fa070404 	blx	1c2860 <startup-0x1fe3d7a0>
    184c:	0d000000 	stceq	0, cr0, [r0, #-0]
    1850:	00000c7e 	andeq	r0, r0, lr, ror ip
    1854:	01892b05 	orreq	r2, r9, r5, lsl #22
    1858:	1c0d0000 	stcne	0, cr0, [sp], {-0}
    185c:	05000001 	streq	r0, [r0, #-1]
    1860:	0001892c 	andeq	r8, r1, ip, lsr #18
    1864:	04ba0d00 	ldrteq	r0, [sl], #3328	; 0xd00
    1868:	2d050000 	stccs	0, cr0, [r5, #-0]
    186c:	00000189 	andeq	r0, r0, r9, lsl #3
    1870:	0001ee0d 	andeq	lr, r1, sp, lsl #28
    1874:	892e0500 	stmdbhi	lr!, {r8, sl}
    1878:	0d000001 	stceq	0, cr0, [r0, #-4]
    187c:	0000048a 	andeq	r0, r0, sl, lsl #9
    1880:	01892f05 	orreq	r2, r9, r5, lsl #30
    1884:	d10d0000 	mrsle	r0, (UNDEF: 13)
    1888:	05000003 	streq	r0, [r0, #-3]
    188c:	00018930 	andeq	r8, r1, r0, lsr r9
    1890:	01760d00 	cmneq	r6, r0, lsl #26
    1894:	31050000 	mrscc	r0, (UNDEF: 5)
    1898:	00000189 	andeq	r0, r0, r9, lsl #3
    189c:	0001ac0f 	andeq	sl, r1, pc, lsl #24
    18a0:	052b0100 	streq	r0, [fp, #-256]!	; 0xffffff00
    18a4:	003ca403 	eorseq	sl, ip, r3, lsl #8
    18a8:	01b70f20 			; <UNDEFINED> instruction: 0x01b70f20
    18ac:	2c010000 	stccs	0, cr0, [r1], {-0}
    18b0:	30a40305 	adccc	r0, r4, r5, lsl #6
    18b4:	c20f2000 	andgt	r2, pc, #0
    18b8:	01000001 	tsteq	r0, r1
    18bc:	a403052d 	strge	r0, [r3], #-1325	; 0xfffffad3
    18c0:	0f200038 	svceq	0x00200038
    18c4:	000001cd 	andeq	r0, r0, sp, asr #3
    18c8:	03052e01 	movweq	r2, #24065	; 0x5e01
    18cc:	200040a4 	andcs	r4, r0, r4, lsr #1
    18d0:	0001a10f 	andeq	sl, r1, pc, lsl #2
    18d4:	052f0100 	streq	r0, [pc, #-256]!	; 17dc <startup-0x1fffe824>
    18d8:	0034a403 	eorseq	sl, r4, r3, lsl #8
    18dc:	01d81020 	bicseq	r1, r8, r0, lsr #32
    18e0:	05010000 	streq	r0, [r1, #-0]
    18e4:	002ca403 	eoreq	sl, ip, r3, lsl #8
    18e8:	01e31020 	mvneq	r1, r0, lsr #32
    18ec:	05010000 	streq	r0, [r1, #-0]
    18f0:	0044a403 	subeq	sl, r4, r3, lsl #8
    18f4:	0cb41120 	ldfeqs	f1, [r4], #128	; 0x80
    18f8:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    18fc:	001eca01 	andseq	ip, lr, r1, lsl #20
    1900:	00006a20 	andeq	r6, r0, r0, lsr #20
    1904:	6d9c0100 	ldfvss	f0, [ip]
    1908:	12000002 	andne	r0, r0, #2
    190c:	00000d9b 	muleq	r0, fp, sp
    1910:	2e01a801 	cdpcs	8, 0, cr10, cr1, cr1, {0}
    1914:	02000001 	andeq	r0, r0, #1
    1918:	11007491 			; <UNDEFINED> instruction: 0x11007491
    191c:	00000c45 	andeq	r0, r0, r5, asr #24
    1920:	4801a001 	stmdami	r1, {r0, sp, pc}
    1924:	8220001e 	eorhi	r0, r0, #30
    1928:	01000000 	mrseq	r0, (UNDEF: 0)
    192c:	0002a29c 	muleq	r2, ip, r2
    1930:	0c8f1200 	sfmeq	f1, 4, [pc], {0}
    1934:	a0010000 	andge	r0, r1, r0
    1938:	00016201 	andeq	r6, r1, r1, lsl #4
    193c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1940:	00011613 	andeq	r1, r1, r3, lsl r6
    1944:	01a10100 			; <UNDEFINED> instruction: 0x01a10100
    1948:	0000012e 	andeq	r0, r0, lr, lsr #2
    194c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1950:	000d5314 	andeq	r5, sp, r4, lsl r3
    1954:	01960100 	orrseq	r0, r6, r0, lsl #2
    1958:	20001d40 	andcs	r1, r0, r0, asr #26
    195c:	00000108 	andeq	r0, r0, r8, lsl #2
    1960:	02c69c01 	sbceq	r9, r6, #256	; 0x100
    1964:	69150000 	ldmdbvs	r5, {}	; <UNPREDICTABLE>
    1968:	01970100 	orrseq	r0, r7, r0, lsl #2
    196c:	0000012e 	andeq	r0, r0, lr, lsr #2
    1970:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1974:	000ce511 	andeq	lr, ip, r1, lsl r5
    1978:	01700100 	cmneq	r0, r0, lsl #2
    197c:	20001c10 	andcs	r1, r0, r0, lsl ip
    1980:	00000130 	andeq	r0, r0, r0, lsr r1
    1984:	033a9c01 	teqeq	sl, #256	; 0x100
    1988:	78150000 	ldmdavc	r5, {}	; <UNPREDICTABLE>
    198c:	01710100 	cmneq	r1, r0, lsl #2
    1990:	0000012e 	andeq	r0, r0, lr, lsr #2
    1994:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    1998:	72010079 	andvc	r0, r1, #121	; 0x79
    199c:	00012e01 	andeq	r2, r1, r1, lsl #28
    19a0:	68910200 	ldmvs	r1, {r9}
    19a4:	0001d713 	andeq	sp, r1, r3, lsl r7
    19a8:	01730100 	cmneq	r3, r0, lsl #2
    19ac:	0000012e 	andeq	r0, r0, lr, lsr #2
    19b0:	13649102 	cmnne	r4, #-2147483648	; 0x80000000
    19b4:	00000302 	andeq	r0, r0, r2, lsl #6
    19b8:	2e017401 	cdpcs	4, 0, cr7, cr1, cr1, {0}
    19bc:	02000001 	andeq	r0, r0, #1
    19c0:	78156091 	ldmdavc	r5, {r0, r4, r7, sp, lr}
    19c4:	76010032 			; <UNDEFINED> instruction: 0x76010032
    19c8:	00012e01 	andeq	r2, r1, r1, lsl #28
    19cc:	5c910200 	lfmpl	f0, 4, [r1], {0}
    19d0:	01006916 	tsteq	r0, r6, lsl r9
    19d4:	012e017a 			; <UNDEFINED> instruction: 0x012e017a
    19d8:	6b150000 	blvs	5419e0 <startup-0x1fabe620>
    19dc:	017b0100 	cmneq	fp, r0, lsl #2
    19e0:	0000012e 	andeq	r0, r0, lr, lsr #2
    19e4:	00589102 	subseq	r9, r8, r2, lsl #2
    19e8:	000de511 	andeq	lr, sp, r1, lsl r5
    19ec:	01650100 	cmneq	r5, r0, lsl #2
    19f0:	20001bbe 			; <UNDEFINED> instruction: 0x20001bbe
    19f4:	00000052 	andeq	r0, r0, r2, asr r0
    19f8:	03a39c01 			; <UNDEFINED> instruction: 0x03a39c01
    19fc:	78170000 	ldmdavc	r7, {}	; <UNPREDICTABLE>
    1a00:	01650100 	cmneq	r5, r0, lsl #2
    1a04:	0000012e 	andeq	r0, r0, lr, lsr #2
    1a08:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
    1a0c:	65010079 	strvs	r0, [r1, #-121]	; 0xffffff87
    1a10:	00012e01 	andeq	r2, r1, r1, lsl #28
    1a14:	68910200 	ldmvs	r1, {r9}
    1a18:	0001d712 	andeq	sp, r1, r2, lsl r7
    1a1c:	01650100 	cmneq	r5, r0, lsl #2
    1a20:	0000012e 	andeq	r0, r0, lr, lsr #2
    1a24:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
    1a28:	00000302 	andeq	r0, r0, r2, lsl #6
    1a2c:	2e016501 	cfsh32cs	mvfx6, mvfx1, #1
    1a30:	02000001 	andeq	r0, r0, #1
    1a34:	69156091 	ldmdbvs	r5, {r0, r4, r7, sp, lr}
    1a38:	01660100 	cmneq	r6, r0, lsl #2
    1a3c:	0000012e 	andeq	r0, r0, lr, lsr #2
    1a40:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    1a44:	6701006a 	strvs	r0, [r1, -sl, rrx]
    1a48:	00012e01 	andeq	r2, r1, r1, lsl #28
    1a4c:	70910200 	addsvc	r0, r1, r0, lsl #4
    1a50:	0d881100 	stfeqs	f1, [r8]
    1a54:	5b010000 	blpl	41a5c <startup-0x1ffbe5a4>
    1a58:	001b6c01 	andseq	r6, fp, r1, lsl #24
    1a5c:	00005220 	andeq	r5, r0, r0, lsr #4
    1a60:	0c9c0100 	ldfeqs	f0, [ip], {0}
    1a64:	17000004 	strne	r0, [r0, -r4]
    1a68:	5b010078 	blpl	41c50 <startup-0x1ffbe3b0>
    1a6c:	00012e01 	andeq	r2, r1, r1, lsl #28
    1a70:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1a74:	01007917 	tsteq	r0, r7, lsl r9
    1a78:	012e015b 			; <UNDEFINED> instruction: 0x012e015b
    1a7c:	91020000 	mrsls	r0, (UNDEF: 2)
    1a80:	01d71268 	bicseq	r1, r7, r8, ror #4
    1a84:	5b010000 	blpl	41a8c <startup-0x1ffbe574>
    1a88:	00012e01 	andeq	r2, r1, r1, lsl #28
    1a8c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1a90:	00030212 	andeq	r0, r3, r2, lsl r2
    1a94:	015b0100 	cmpeq	fp, r0, lsl #2
    1a98:	0000012e 	andeq	r0, r0, lr, lsr #2
    1a9c:	15609102 	strbne	r9, [r0, #-258]!	; 0xfffffefe
    1aa0:	5c010069 	stcpl	0, cr0, [r1], {105}	; 0x69
    1aa4:	00012e01 	andeq	r2, r1, r1, lsl #28
    1aa8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1aac:	01006a15 	tsteq	r0, r5, lsl sl
    1ab0:	012e015d 			; <UNDEFINED> instruction: 0x012e015d
    1ab4:	91020000 	mrsls	r0, (UNDEF: 2)
    1ab8:	bf110070 	svclt	0x00110070
    1abc:	0100000c 	tsteq	r0, ip
    1ac0:	1a520145 	bne	1481fdc <startup-0x1eb7e024>
    1ac4:	011a2000 	tsteq	sl, r0
    1ac8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1acc:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
    1ad0:	01007317 	tsteq	r0, r7, lsl r3
    1ad4:	009e0145 	addseq	r0, lr, r5, asr #2
    1ad8:	91020000 	mrsls	r0, (UNDEF: 2)
    1adc:	00781754 	rsbseq	r1, r8, r4, asr r7
    1ae0:	2e014501 	cfsh32cs	mvfx4, mvfx1, #1
    1ae4:	02000001 	andeq	r0, r0, #1
    1ae8:	79175091 	ldmdbvc	r7, {r0, r4, r7, ip, lr}
    1aec:	01450100 	mrseq	r0, (UNDEF: 85)
    1af0:	0000012e 	andeq	r0, r0, lr, lsr #2
    1af4:	174c9102 	strbne	r9, [ip, -r2, lsl #2]
    1af8:	00746573 	rsbseq	r6, r4, r3, ror r5
    1afc:	2e014501 	cfsh32cs	mvfx4, mvfx1, #1
    1b00:	02000001 	andeq	r0, r0, #1
    1b04:	4d124891 	ldcmi	8, cr4, [r2, #-580]	; 0xfffffdbc
    1b08:	0100000d 	tsteq	r0, sp
    1b0c:	012e0145 			; <UNDEFINED> instruction: 0x012e0145
    1b10:	91020000 	mrsls	r0, (UNDEF: 2)
    1b14:	00691500 	rsbeq	r1, r9, r0, lsl #10
    1b18:	2e014601 	cfmadd32cs	mvax0, mvfx4, mvfx1, mvfx1
    1b1c:	02000001 	andeq	r0, r0, #1
    1b20:	6a156c91 	bvs	55cd6c <startup-0x1faa3294>
    1b24:	01460100 	mrseq	r0, (UNDEF: 86)
    1b28:	0000012e 	andeq	r0, r0, lr, lsr #2
    1b2c:	15689102 	strbne	r9, [r8, #-258]!	; 0xfffffefe
    1b30:	4601006b 	strmi	r0, [r1], -fp, rrx
    1b34:	00012e01 	andeq	r2, r1, r1, lsl #28
    1b38:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1b3c:	000dc013 	andeq	ip, sp, r3, lsl r0
    1b40:	01460100 	mrseq	r0, (UNDEF: 86)
    1b44:	0000012e 	andeq	r0, r0, lr, lsr #2
    1b48:	18609102 	stmdane	r0!, {r1, r8, ip, pc}^
    1b4c:	20001a8a 	andcs	r1, r0, sl, lsl #21
    1b50:	000000bc 	strheq	r0, [r0], -ip
    1b54:	000dbb13 	andeq	fp, sp, r3, lsl fp
    1b58:	014d0100 	mrseq	r0, (UNDEF: 93)
    1b5c:	0000005b 	andeq	r0, r0, fp, asr r0
    1b60:	005f9102 	subseq	r9, pc, r2, lsl #2
    1b64:	0c941100 	ldfeqs	f1, [r4], {0}
    1b68:	30010000 	andcc	r0, r1, r0
    1b6c:	00197c01 	andseq	r7, r9, r1, lsl #24
    1b70:	0000d620 	andeq	sp, r0, r0, lsr #12
    1b74:	209c0100 	addscs	r0, ip, r0, lsl #2
    1b78:	12000005 	andne	r0, r0, #5
    1b7c:	00000c31 	andeq	r0, r0, r1, lsr ip
    1b80:	20013001 	andcs	r3, r1, r1
    1b84:	02000005 	andeq	r0, r0, #5
    1b88:	69156491 	ldmdbvs	r5, {r0, r4, r7, sl, sp, lr}
    1b8c:	01310100 	teqeq	r1, r0, lsl #2
    1b90:	0000017e 	andeq	r0, r0, lr, ror r1
    1b94:	15779102 	ldrbne	r9, [r7, #-258]!	; 0xfffffefe
    1b98:	3101006a 	tstcc	r1, sl, rrx
    1b9c:	00017e01 	andeq	r7, r1, r1, lsl #28
    1ba0:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    1ba4:	000ff113 	andeq	pc, pc, r3, lsl r1	; <UNPREDICTABLE>
    1ba8:	01310100 	teqeq	r1, r0, lsl #2
    1bac:	0000017e 	andeq	r0, r0, lr, ror r1
    1bb0:	156f9102 	strbne	r9, [pc, #-258]!	; 1ab6 <startup-0x1fffe54a>
    1bb4:	31010063 	tstcc	r1, r3, rrx
    1bb8:	00017e01 	andeq	r7, r1, r1, lsl #28
    1bbc:	75910200 	ldrvc	r0, [r1, #512]	; 0x200
    1bc0:	01006b15 	tsteq	r0, r5, lsl fp
    1bc4:	004e0132 	subeq	r0, lr, r2, lsr r1
    1bc8:	91020000 	mrsls	r0, (UNDEF: 2)
    1bcc:	04050070 	streq	r0, [r5], #-112	; 0xffffff90
    1bd0:	0000017e 	andeq	r0, r0, lr, ror r1
    1bd4:	000c3e11 	andeq	r3, ip, r1, lsl lr
    1bd8:	01080100 	mrseq	r0, (UNDEF: 24)
    1bdc:	200017dc 	ldrdcs	r1, [r0], -ip
    1be0:	000001a0 	andeq	r0, r0, r0, lsr #3
    1be4:	05a09c01 	streq	r9, [r0, #3073]!	; 0xc01
    1be8:	78170000 	ldmdavc	r7, {}	; <UNPREDICTABLE>
    1bec:	01080100 	mrseq	r0, (UNDEF: 24)
    1bf0:	0000012e 	andeq	r0, r0, lr, lsr #2
    1bf4:	17649102 	strbne	r9, [r4, -r2, lsl #2]!
    1bf8:	08010079 	stmdaeq	r1, {r0, r3, r4, r5, r6}
    1bfc:	00012e01 	andeq	r2, r1, r1, lsl #28
    1c00:	60910200 	addsvs	r0, r1, r0, lsl #4
    1c04:	74657317 	strbtvc	r7, [r5], #-791	; 0xfffffce9
    1c08:	01080100 	mrseq	r0, (UNDEF: 24)
    1c0c:	0000012e 	andeq	r0, r0, lr, lsr #2
    1c10:	135c9102 	cmpne	ip, #-2147483648	; 0x80000000
    1c14:	00000d96 	muleq	r0, r6, sp
    1c18:	7e010901 	vmlavc.f16	s0, s2, s2	; <UNPREDICTABLE>
    1c1c:	02000001 	andeq	r0, r0, #1
    1c20:	63157791 	tstvs	r5, #38010880	; 0x2440000
    1c24:	01090100 	mrseq	r0, (UNDEF: 25)
    1c28:	0000017e 	andeq	r0, r0, lr, ror r1
    1c2c:	136f9102 	cmnne	pc, #-2147483648	; 0x80000000
    1c30:	00000ff1 	strdeq	r0, [r0], -r1
    1c34:	7e010901 	vmlavc.f16	s0, s2, s2	; <UNPREDICTABLE>
    1c38:	02000001 	andeq	r0, r0, #1
    1c3c:	f4137691 			; <UNDEFINED> instruction: 0xf4137691
    1c40:	0100000d 	tsteq	r0, sp
    1c44:	012e010a 			; <UNDEFINED> instruction: 0x012e010a
    1c48:	91020000 	mrsls	r0, (UNDEF: 2)
    1c4c:	89190070 	ldmdbhi	r9, {r4, r5, r6}
    1c50:	0100000c 	tsteq	r0, ip
    1c54:	00165cde 			; <UNDEFINED> instruction: 0x00165cde
    1c58:	00018020 	andeq	r8, r1, r0, lsr #32
    1c5c:	069c0100 	ldreq	r0, [ip], r0, lsl #2
    1c60:	1a000006 	bne	1c80 <startup-0x1fffe380>
    1c64:	de010078 	mcrle	0, 0, r0, cr1, cr8, {3}
    1c68:	0000012e 	andeq	r0, r0, lr, lsr #2
    1c6c:	1a6c9102 	bne	1b2607c <startup-0x1e4d9f84>
    1c70:	de010079 	mcrle	0, 0, r0, cr1, cr9, {3}
    1c74:	0000012e 	andeq	r0, r0, lr, lsr #2
    1c78:	1a689102 	bne	1a26088 <startup-0x1e5d9f78>
    1c7c:	00746573 	rsbseq	r6, r4, r3, ror r5
    1c80:	012ede01 			; <UNDEFINED> instruction: 0x012ede01
    1c84:	91020000 	mrsls	r0, (UNDEF: 2)
    1c88:	0d4d1b64 	vstreq	d17, [sp, #-400]	; 0xfffffe70
    1c8c:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    1c90:	0000012e 	andeq	r0, r0, lr, lsr #2
    1c94:	1c609102 	stfnep	f1, [r0], #-8
    1c98:	00000d96 	muleq	r0, r6, sp
    1c9c:	017edf01 	cmneq	lr, r1, lsl #30
    1ca0:	91020000 	mrsls	r0, (UNDEF: 2)
    1ca4:	0df41c77 	ldcleq	12, cr1, [r4, #476]!	; 0x1dc
    1ca8:	e0010000 	and	r0, r1, r0
    1cac:	0000012e 	andeq	r0, r0, lr, lsr #2
    1cb0:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1cb4:	000e471d 	andeq	r4, lr, sp, lsl r7
    1cb8:	f6d10100 			; <UNDEFINED> instruction: 0xf6d10100
    1cbc:	66200015 			; <UNDEFINED> instruction: 0x66200015
    1cc0:	01000000 	mrseq	r0, (UNDEF: 0)
    1cc4:	0006429c 	muleq	r6, ip, r2
    1cc8:	0c1f1c00 	ldceq	12, cr1, [pc], {-0}
    1ccc:	d2010000 	andle	r0, r1, #0
    1cd0:	0000017e 	andeq	r0, r0, lr, ror r1
    1cd4:	18779102 	ldmdane	r7!, {r1, r8, ip, pc}^
    1cd8:	20001604 	andcs	r1, r0, r4, lsl #12
    1cdc:	0000003e 	andeq	r0, r0, lr, lsr r0
    1ce0:	6464611e 	strbtvs	r6, [r4], #-286	; 0xfffffee2
    1ce4:	7ed60100 	cdpvc	1, 13, cr0, cr6, cr0, {0}
    1ce8:	02000001 	andeq	r0, r0, #1
    1cec:	00007691 	muleq	r0, r1, r6
    1cf0:	000e341f 	andeq	r3, lr, pc, lsl r4
    1cf4:	88bd0100 	ldmfdhi	sp!, {r8}
    1cf8:	6e200015 	miavs	acc0, r5, r0
    1cfc:	01000000 	mrseq	r0, (UNDEF: 0)
    1d00:	0da81d9c 	stceq	13, cr1, [r8, #624]!	; 0x270
    1d04:	b5010000 	strlt	r0, [r1, #-0]
    1d08:	20001542 	andcs	r1, r0, r2, asr #10
    1d0c:	00000046 	andeq	r0, r0, r6, asr #32
    1d10:	06859c01 	streq	r9, [r5], r1, lsl #24
    1d14:	701b0000 	andsvc	r0, fp, r0
    1d18:	0100000c 	tsteq	r0, ip
    1d1c:	00017eb5 			; <UNDEFINED> instruction: 0x00017eb5
    1d20:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1d24:	000ff11b 	andeq	pc, pc, fp, lsl r1	; <UNPREDICTABLE>
    1d28:	7eb50100 	frdvcs	f0, f5, f0
    1d2c:	02000001 	andeq	r0, r0, #1
    1d30:	1d007691 	stcne	6, cr7, [r0, #-580]	; 0xfffffdbc
    1d34:	00000c62 	andeq	r0, r0, r2, ror #24
    1d38:	14fcae01 	ldrbtne	sl, [ip], #3585	; 0xe01
    1d3c:	00462000 	subeq	r2, r6, r0
    1d40:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d44:	000006b7 			; <UNDEFINED> instruction: 0x000006b7
    1d48:	000c701b 	andeq	r7, ip, fp, lsl r0
    1d4c:	7eae0100 	fdvvce	f0, f6, f0
    1d50:	02000001 	andeq	r0, r0, #1
    1d54:	f11b7791 			; <UNDEFINED> instruction: 0xf11b7791
    1d58:	0100000f 	tsteq	r0, pc
    1d5c:	00017eae 	andeq	r7, r1, lr, lsr #29
    1d60:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    1d64:	0cd71d00 	ldcleq	13, cr1, [r7], {0}
    1d68:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    1d6c:	2000147e 	andcs	r1, r0, lr, ror r4
    1d70:	0000007e 	andeq	r0, r0, lr, ror r0
    1d74:	06e99c01 	strbteq	r9, [r9], r1, lsl #24
    1d78:	381b0000 	ldmdacc	fp, {}	; <UNPREDICTABLE>
    1d7c:	0100000c 	tsteq	r0, ip
    1d80:	00017e99 	muleq	r1, r9, lr
    1d84:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1d88:	000ff11b 	andeq	pc, pc, fp, lsl r1	; <UNPREDICTABLE>
    1d8c:	7e990100 	fmlvce	f0, f1, f0
    1d90:	02000001 	andeq	r0, r0, #1
    1d94:	20007691 	mulcs	r0, r1, r6
    1d98:	00000d3b 	andeq	r0, r0, fp, lsr sp
    1d9c:	012e9401 			; <UNDEFINED> instruction: 0x012e9401
    1da0:	14540000 	ldrbne	r0, [r4], #-0
    1da4:	002a2000 	eoreq	r2, sl, r0
    1da8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1dac:	00000711 	andeq	r0, r0, r1, lsl r7
    1db0:	000ff11b 	andeq	pc, pc, fp, lsl r1	; <UNPREDICTABLE>
    1db4:	7e940100 	fmlvcs	f0, f4, f0
    1db8:	02000001 	andeq	r0, r0, #1
    1dbc:	21007791 			; <UNDEFINED> instruction: 0x21007791
    1dc0:	00000c24 	andeq	r0, r0, r4, lsr #24
    1dc4:	017e7b01 	cmneq	lr, r1, lsl #22
    1dc8:	13c00000 	bicne	r0, r0, #0
    1dcc:	00942000 	addseq	r2, r4, r0
    1dd0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1dd4:	00000746 	andeq	r0, r0, r6, asr #14
    1dd8:	000ff11b 	andeq	pc, pc, fp, lsl r1	; <UNPREDICTABLE>
    1ddc:	7e7b0100 	rpwvce	f0, f3, f0
    1de0:	02000001 	andeq	r0, r0, #1
    1de4:	721e6f91 	andsvc	r6, lr, #580	; 0x244
    1de8:	84010076 	strhi	r0, [r1], #-118	; 0xffffff8a
    1dec:	0000005b 	andeq	r0, r0, fp, asr r0
    1df0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1df4:	000e0c1d 	andeq	r0, lr, sp, lsl ip
    1df8:	52650100 	rsbpl	r0, r5, #0, 2
    1dfc:	6e200013 	miavs	acc0, r3, r0
    1e00:	01000000 	mrseq	r0, (UNDEF: 0)
    1e04:	0007689c 	muleq	r7, ip, r8
    1e08:	00631e00 	rsbeq	r1, r3, r0, lsl #28
    1e0c:	017e6601 	cmneq	lr, r1, lsl #12
    1e10:	91020000 	mrsls	r0, (UNDEF: 2)
    1e14:	fa1d0077 	blx	741ff8 <startup-0x1f8be008>
    1e18:	0100000d 	tsteq	r0, sp
    1e1c:	0012ec50 	andseq	lr, r2, r0, asr ip
    1e20:	00006620 	andeq	r6, r0, r0, lsr #12
    1e24:	8c9c0100 	ldfhis	f0, [ip], {0}
    1e28:	1b000007 	blne	1e4c <startup-0x1fffe1b4>
    1e2c:	00000ff1 	strdeq	r0, [r0], -r1
    1e30:	017e5001 	cmneq	lr, r1
    1e34:	91020000 	mrsls	r0, (UNDEF: 2)
    1e38:	f3220077 	vqadd.u32	q0, q1, <illegal reg q11.5>
    1e3c:	0100000c 	tsteq	r0, ip
    1e40:	00129449 	andseq	r9, r2, r9, asr #8
    1e44:	00005820 	andeq	r5, r0, r0, lsr #16
    1e48:	ba9c0100 	blt	fe702250 <firstTime.4093+0xde6fbf54>
    1e4c:	1a000007 	bne	1e70 <startup-0x1fffe190>
    1e50:	49010078 	stmdbmi	r1, {r3, r4, r5, r6}
    1e54:	0000017e 	andeq	r0, r0, lr, ror r1
    1e58:	1e6f9102 	lgnnee	f1, f2
    1e5c:	4a010063 	bmi	41ff0 <startup-0x1ffbe010>
    1e60:	0000017e 	andeq	r0, r0, lr, ror r1
    1e64:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1e68:	000d6722 	andeq	r6, sp, r2, lsr #14
    1e6c:	44410100 	strbmi	r0, [r1], #-256	; 0xffffff00
    1e70:	50200012 	eorpl	r0, r0, r2, lsl r0
    1e74:	01000000 	mrseq	r0, (UNDEF: 0)
    1e78:	0007e89c 	muleq	r7, ip, r8
    1e7c:	00781a00 	rsbseq	r1, r8, r0, lsl #20
    1e80:	017e4101 	cmneq	lr, r1, lsl #2
    1e84:	91020000 	mrsls	r0, (UNDEF: 2)
    1e88:	00631e6f 	rsbeq	r1, r3, pc, ror #28
    1e8c:	017e4201 	cmneq	lr, r1, lsl #4
    1e90:	91020000 	mrsls	r0, (UNDEF: 2)
    1e94:	cf1f0077 	svcgt	0x001f0077
    1e98:	0100000d 	tsteq	r0, sp
    1e9c:	0012143a 	andseq	r1, r2, sl, lsr r4
    1ea0:	00003020 	andeq	r3, r0, r0, lsr #32
    1ea4:	1f9c0100 	svcne	0x009c0100
    1ea8:	00000c78 	andeq	r0, r0, r8, ror ip
    1eac:	11fc3701 	mvnsne	r3, r1, lsl #14
    1eb0:	00182000 	andseq	r2, r8, r0
    1eb4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1eb8:	000e1f19 	andeq	r1, lr, r9, lsl pc
    1ebc:	ca320100 	bgt	c822c4 <startup-0x1f37dd3c>
    1ec0:	32200011 	eorcc	r0, r0, #17
    1ec4:	01000000 	mrseq	r0, (UNDEF: 0)
    1ec8:	00083a9c 	muleq	r8, ip, sl
    1ecc:	0c311b00 			; <UNDEFINED> instruction: 0x0c311b00
    1ed0:	32010000 	andcc	r0, r1, #0
    1ed4:	00000520 	andeq	r0, r0, r0, lsr #10
    1ed8:	1e6c9102 	lgnnee	f1, f2
    1edc:	33010069 	movwcc	r0, #4201	; 0x1069
    1ee0:	0000012e 	andeq	r0, r0, lr, lsr #2
    1ee4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1ee8:	000ca81d 	andeq	sl, ip, sp, lsl r8
    1eec:	a4210100 	strtge	r0, [r1], #-256	; 0xffffff00
    1ef0:	26200011 			; <UNDEFINED> instruction: 0x26200011
    1ef4:	01000000 	mrseq	r0, (UNDEF: 0)
    1ef8:	00085d9c 	muleq	r8, ip, sp
    1efc:	736d1a00 	cmnvc	sp, #0, 20
    1f00:	4e210100 	sufmis	f0, f1, f0
    1f04:	02000000 	andeq	r0, r0, #0
    1f08:	1d007491 	cfstrsne	mvf7, [r0, #-580]	; 0xfffffdbc
    1f0c:	00000c56 	andeq	r0, r0, r6, asr ip
    1f10:	11781801 	cmnne	r8, r1, lsl #16
    1f14:	002c2000 	eoreq	r2, ip, r0
    1f18:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f1c:	00000880 	andeq	r0, r0, r0, lsl #17
    1f20:	0073751a 	rsbseq	r7, r3, sl, lsl r5
    1f24:	004e1801 	subeq	r1, lr, r1, lsl #16
    1f28:	91020000 	mrsls	r0, (UNDEF: 2)
    1f2c:	cb230074 	blgt	8c2104 <startup-0x1f73defc>
    1f30:	0100000c 	tsteq	r0, ip
    1f34:	0011340e 	andseq	r3, r1, lr, lsl #8
    1f38:	00004420 	andeq	r4, r0, r0, lsr #8
    1f3c:	239c0100 	orrscs	r0, ip, #0, 2
    1f40:	00000d7c 	andeq	r0, r0, ip, ror sp
    1f44:	10f00401 	rscsne	r0, r0, r1, lsl #8
    1f48:	00442000 	subeq	r2, r4, r0
    1f4c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f50:	00010000 	andeq	r0, r1, r0
    1f54:	0f000400 	svceq	0x00000400
    1f58:	04000007 	streq	r0, [r0], #-7
    1f5c:	00004e01 	andeq	r4, r0, r1, lsl #28
    1f60:	0e670c00 	cdpeq	12, 6, cr0, cr7, cr0, {0}
    1f64:	1f340000 	svcne	0x00340000
    1f68:	00282000 	eoreq	r2, r8, r0
    1f6c:	0a060000 	beq	181f74 <startup-0x1fe7e08c>
    1f70:	0c020000 	stceq	0, cr0, [r2], {-0}
    1f74:	004e0502 	subeq	r0, lr, r2, lsl #10
    1f78:	d7030000 	strle	r0, [r3, -r0]
    1f7c:	02000001 	andeq	r0, r0, #1
    1f80:	00004e07 	andeq	r4, r0, r7, lsl #28
    1f84:	02030000 	andeq	r0, r3, #0
    1f88:	02000003 	andeq	r0, r0, #3
    1f8c:	00004e08 	andeq	r4, r0, r8, lsl #28
    1f90:	48030400 	stmdami	r3, {sl}
    1f94:	0200000d 	andeq	r0, r0, #13
    1f98:	00005509 	andeq	r5, r0, r9, lsl #10
    1f9c:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    1fa0:	032b0704 			; <UNDEFINED> instruction: 0x032b0704
    1fa4:	04050000 	streq	r0, [r5], #-0
    1fa8:	0000005b 	andeq	r0, r0, fp, asr r0
    1fac:	ca080104 	bgt	2023c4 <startup-0x1fdfdc3c>
    1fb0:	06000002 	streq	r0, [r0], -r2
    1fb4:	00000e9a 	muleq	r0, sl, lr
    1fb8:	00210a02 	eoreq	r0, r1, r2, lsl #20
    1fbc:	9f070000 	svcls	0x00070000
    1fc0:	0c000002 	stceq	0, cr0, [r0], {2}
    1fc4:	009e0603 	addseq	r0, lr, r3, lsl #12
    1fc8:	2d030000 	stccs	0, cr0, [r3, #-0]
    1fcc:	03000004 	movweq	r0, #4
    1fd0:	00009e07 	andeq	r9, r0, r7, lsl #28
    1fd4:	43030000 	movwmi	r0, #12288	; 0x3000
    1fd8:	03000004 	movweq	r0, #4
    1fdc:	00009e08 	andeq	r9, r0, r8, lsl #28
    1fe0:	9b030400 	blls	c2fe8 <startup-0x1ff3d018>
    1fe4:	03000002 	movweq	r0, #2
    1fe8:	00009e09 	andeq	r9, r0, r9, lsl #28
    1fec:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    1ff0:	00006204 	andeq	r6, r0, r4, lsl #4
    1ff4:	0b770600 	bleq	1dc37fc <startup-0x1e23c804>
    1ff8:	0a030000 	beq	c2000 <startup-0x1ff3e000>
    1ffc:	0000006d 	andeq	r0, r0, sp, rrx
    2000:	000e5c08 	andeq	r5, lr, r8, lsl #24
    2004:	34030100 	strcc	r0, [r3], #-256	; 0xffffff00
    2008:	2820001f 	stmdacs	r0!, {r0, r1, r2, r3, r4}
    200c:	01000000 	mrseq	r0, (UNDEF: 0)
    2010:	0000fd9c 	muleq	r0, ip, sp
    2014:	0e610900 	vmuleq.f16	s1, s2, s0	; <UNPREDICTABLE>
    2018:	03010000 	movweq	r0, #4096	; 0x1000
    201c:	000000fd 	strdeq	r0, [r0], -sp
    2020:	09749102 	ldmdbeq	r4!, {r1, r8, ip, pc}^
    2024:	0000042d 	andeq	r0, r0, sp, lsr #8
    2028:	009e0301 	addseq	r0, lr, r1, lsl #6
    202c:	91020000 	mrsls	r0, (UNDEF: 2)
    2030:	04430970 	strbeq	r0, [r3], #-2416	; 0xfffff690
    2034:	03010000 	movweq	r0, #4096	; 0x1000
    2038:	0000009e 	muleq	r0, lr, r0
    203c:	096c9102 	stmdbeq	ip!, {r1, r8, ip, pc}^
    2040:	0000029b 	muleq	r0, fp, r2
    2044:	009e0301 	addseq	r0, lr, r1, lsl #6
    2048:	91020000 	mrsls	r0, (UNDEF: 2)
    204c:	04050068 	streq	r0, [r5], #-104	; 0xffffff98
    2050:	000000a4 	andeq	r0, r0, r4, lsr #1
    2054:	0000c300 	andeq	ip, r0, r0, lsl #6
    2058:	96000400 	strls	r0, [r0], -r0, lsl #8
    205c:	04000007 	streq	r0, [r0], #-7
    2060:	00004e01 	andeq	r4, r0, r1, lsl #28
    2064:	0ea10c00 	cdpeq	12, 10, cr0, cr1, cr0, {0}
    2068:	1f5c0000 	svcne	0x005c0000
    206c:	00282000 	eoreq	r2, r8, r0
    2070:	0a7c0000 	beq	1f02078 <startup-0x1e0fdf88>
    2074:	0c020000 	stceq	0, cr0, [r2], {-0}
    2078:	004e0502 	subeq	r0, lr, r2, lsl #10
    207c:	d7030000 	strle	r0, [r3, -r0]
    2080:	02000001 	andeq	r0, r0, #1
    2084:	00004e07 	andeq	r4, r0, r7, lsl #28
    2088:	02030000 	andeq	r0, r3, #0
    208c:	02000003 	andeq	r0, r0, #3
    2090:	00004e08 	andeq	r4, r0, r8, lsl #28
    2094:	48030400 	stmdami	r3, {sl}
    2098:	0200000d 	andeq	r0, r0, #13
    209c:	00005509 	andeq	r5, r0, r9, lsl #10
    20a0:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    20a4:	032b0704 			; <UNDEFINED> instruction: 0x032b0704
    20a8:	04050000 	streq	r0, [r5], #-0
    20ac:	0000005b 	andeq	r0, r0, fp, asr r0
    20b0:	ca080104 	bgt	2024c8 <startup-0x1fdfdb38>
    20b4:	06000002 	streq	r0, [r0], -r2
    20b8:	00000e9a 	muleq	r0, sl, lr
    20bc:	00210a02 	eoreq	r0, r1, r2, lsl #20
    20c0:	95070000 	strls	r0, [r7, #-0]
    20c4:	0100000e 	tsteq	r0, lr
    20c8:	001f5c03 	andseq	r5, pc, r3, lsl #24
    20cc:	00002820 	andeq	r2, r0, r0, lsr #16
    20d0:	b99c0100 	ldmiblt	ip, {r8}
    20d4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    20d8:	03010073 	movweq	r0, #4211	; 0x1073
    20dc:	000000b9 	strheq	r0, [r0], -r9
    20e0:	09749102 	ldmdbeq	r4!, {r1, r8, ip, pc}^
    20e4:	00000d48 	andeq	r0, r0, r8, asr #26
    20e8:	00550301 	subseq	r0, r5, r1, lsl #6
    20ec:	91020000 	mrsls	r0, (UNDEF: 2)
    20f0:	01d70970 	bicseq	r0, r7, r0, ror r9
    20f4:	03010000 	movweq	r0, #4096	; 0x1000
    20f8:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    20fc:	096c9102 	stmdbeq	ip!, {r1, r8, ip, pc}^
    2100:	00000302 	andeq	r0, r0, r2, lsl #6
    2104:	00bf0301 	adcseq	r0, pc, r1, lsl #6
    2108:	91020000 	mrsls	r0, (UNDEF: 2)
    210c:	04050068 	streq	r0, [r5], #-104	; 0xffffff98
    2110:	00000062 	andeq	r0, r0, r2, rrx
    2114:	6905040a 	stmdbvs	r5, {r1, r3, sl}
    2118:	0000746e 	andeq	r7, r0, lr, ror #8
    211c:	00000135 	andeq	r0, r0, r5, lsr r1
    2120:	08280004 	stmdaeq	r8!, {r2}
    2124:	01040000 	mrseq	r0, (UNDEF: 4)
    2128:	0000004e 	andeq	r0, r0, lr, asr #32
    212c:	000f070c 	andeq	r0, pc, ip, lsl #14
    2130:	001f8400 	andseq	r8, pc, r0, lsl #8
    2134:	00006020 	andeq	r6, r0, r0, lsr #32
    2138:	000ae800 	andeq	lr, sl, r0, lsl #16
    213c:	02180200 	andseq	r0, r8, #0, 4
    2140:	0000ae13 	andeq	sl, r0, r3, lsl lr
    2144:	0ed00300 	cdpeq	3, 13, cr0, cr0, cr0, {0}
    2148:	14020000 	strne	r0, [r2], #-0
    214c:	000000ae 	andeq	r0, r0, lr, lsr #1
    2150:	0ee90300 	cdpeq	3, 14, cr0, cr9, cr0, {0}
    2154:	15020000 	strne	r0, [r2, #-0]
    2158:	000000b5 	strheq	r0, [r0], -r5
    215c:	0f340304 	svceq	0x00340304
    2160:	16020000 	strne	r0, [r2], -r0
    2164:	000000b5 	strheq	r0, [r0], -r5
    2168:	0f560306 	svceq	0x00560306
    216c:	17020000 	strne	r0, [r2, -r0]
    2170:	000000ae 	andeq	r0, r0, lr, lsr #1
    2174:	0ef50308 	cdpeq	3, 15, cr0, cr5, cr8, {0}
    2178:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    217c:	000000ae 	andeq	r0, r0, lr, lsr #1
    2180:	0f66030c 	svceq	0x0066030c
    2184:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
    2188:	000000bc 	strheq	r0, [r0], -ip
    218c:	0f5e0310 	svceq	0x005e0310
    2190:	1a020000 	bne	82198 <startup-0x1ff7de68>
    2194:	000000bc 	strheq	r0, [r0], -ip
    2198:	0efb0311 	mrceq	3, 7, r0, cr11, cr1, {0}
    219c:	1b020000 	blne	821a4 <startup-0x1ff7de5c>
    21a0:	000000b5 	strheq	r0, [r0], -r5
    21a4:	0f4f0312 	svceq	0x004f0312
    21a8:	1c020000 	stcne	0, cr0, [r2], {-0}
    21ac:	000000bc 	strheq	r0, [r0], -ip
    21b0:	0ee10314 	mcreq	3, 7, r0, cr1, cr4, {0}
    21b4:	1d020000 	stcne	0, cr0, [r2, #-0]
    21b8:	000000bc 	strheq	r0, [r0], -ip
    21bc:	0f6d0315 	svceq	0x006d0315
    21c0:	1e020000 	cdpne	0, 0, cr0, cr2, cr0, {0}
    21c4:	000000b5 	strheq	r0, [r0], -r5
    21c8:	04040016 	streq	r0, [r4], #-22	; 0xffffffea
    21cc:	00032b07 	andeq	r2, r3, r7, lsl #22
    21d0:	07020400 	streq	r0, [r2, -r0, lsl #8]
    21d4:	00000325 	andeq	r0, r0, r5, lsr #6
    21d8:	ca080104 	bgt	2025f0 <startup-0x1fdfda10>
    21dc:	05000002 	streq	r0, [r0, #-2]
    21e0:	00000ef0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    21e4:	00211f02 	eoreq	r1, r1, r2, lsl #30
    21e8:	3f060000 	svccc	0x00060000
    21ec:	0100000f 	tsteq	r0, pc
    21f0:	0001040d 	andeq	r0, r1, sp, lsl #8
    21f4:	001fb000 	andseq	fp, pc, r0
    21f8:	00003420 	andeq	r3, r0, r0, lsr #8
    21fc:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    2200:	07000001 	streq	r0, [r0, -r1]
    2204:	00746962 	rsbseq	r6, r4, r2, ror #18
    2208:	01040d01 	tsteq	r4, r1, lsl #26
    220c:	91020000 	mrsls	r0, (UNDEF: 2)
    2210:	49440864 	stmdbmi	r4, {r2, r5, r6, fp}^
    2214:	0e01004c 	cdpeq	0, 0, cr0, cr1, cr12, {2}
    2218:	0000010b 	andeq	r0, r0, fp, lsl #2
    221c:	006f9102 	rsbeq	r9, pc, r2, lsl #2
    2220:	69050409 	stmdbvs	r5, {r0, r3, sl}
    2224:	0400746e 	streq	r7, [r0], #-1134	; 0xfffffb92
    2228:	02d30801 	sbcseq	r0, r3, #65536	; 0x10000
    222c:	790a0000 	stmdbvc	sl, {}	; <UNPREDICTABLE>
    2230:	0100000f 	tsteq	r0, pc
    2234:	00010b08 	andeq	r0, r1, r8, lsl #22
    2238:	001f9c00 	andseq	r9, pc, r0, lsl #24
    223c:	00001420 	andeq	r1, r0, r0, lsr #8
    2240:	0b9c0100 	bleq	fe702648 <firstTime.4093+0xde6fc34c>
    2244:	00000ed6 	ldrdeq	r0, [r0], -r6
    2248:	1f840401 	svcne	0x00840401
    224c:	00182000 	andseq	r2, r8, r0
    2250:	9c010000 	stcls	0, cr0, [r1], {-0}
    2254:	0004ed00 	andeq	lr, r4, r0, lsl #26
    2258:	e5000400 	str	r0, [r0, #-1024]	; 0xfffffc00
    225c:	04000008 	streq	r0, [r0], #-8
    2260:	00004e01 	andeq	r4, r0, r1, lsl #28
    2264:	10be0c00 	adcsne	r0, lr, r0, lsl #24
    2268:	1fe40000 	svcne	0x00e40000
    226c:	05202000 	streq	r2, [r0, #-0]!
    2270:	0b570000 	bleq	15c2278 <startup-0x1ea3dd88>
    2274:	0c020000 	stceq	0, cr0, [r2], {-0}
    2278:	004e0502 	subeq	r0, lr, r2, lsl #10
    227c:	d7030000 	strle	r0, [r3, -r0]
    2280:	02000001 	andeq	r0, r0, #1
    2284:	00004e07 	andeq	r4, r0, r7, lsl #28
    2288:	02030000 	andeq	r0, r3, #0
    228c:	02000003 	andeq	r0, r0, #3
    2290:	00004e08 	andeq	r4, r0, r8, lsl #28
    2294:	48030400 	stmdami	r3, {sl}
    2298:	0200000d 	andeq	r0, r0, #13
    229c:	00005509 	andeq	r5, r0, r9, lsl #10
    22a0:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    22a4:	032b0704 			; <UNDEFINED> instruction: 0x032b0704
    22a8:	04050000 	streq	r0, [r5], #-0
    22ac:	0000005b 	andeq	r0, r0, fp, asr r0
    22b0:	ca080104 	bgt	2026c8 <startup-0x1fdfd938>
    22b4:	06000002 	streq	r0, [r0], -r2
    22b8:	00000e9a 	muleq	r0, sl, lr
    22bc:	00210a02 	eoreq	r0, r1, r2, lsl #20
    22c0:	9f070000 	svcls	0x00070000
    22c4:	0c000002 	stceq	0, cr0, [r0], {2}
    22c8:	009e0603 	addseq	r0, lr, r3, lsl #12
    22cc:	2d030000 	stccs	0, cr0, [r3, #-0]
    22d0:	03000004 	movweq	r0, #4
    22d4:	00009e07 	andeq	r9, r0, r7, lsl #28
    22d8:	43030000 	movwmi	r0, #12288	; 0x3000
    22dc:	03000004 	movweq	r0, #4
    22e0:	00009e08 	andeq	r9, r0, r8, lsl #28
    22e4:	9b030400 	blls	c32ec <startup-0x1ff3cd14>
    22e8:	03000002 	movweq	r0, #2
    22ec:	00009e09 	andeq	r9, r0, r9, lsl #28
    22f0:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    22f4:	00006204 	andeq	r6, r0, r4, lsl #4
    22f8:	0b770600 	bleq	1dc3b00 <startup-0x1e23c500>
    22fc:	0a030000 	beq	c2304 <startup-0x1ff3dcfc>
    2300:	0000006d 	andeq	r0, r0, sp, rrx
    2304:	00015307 	andeq	r5, r1, r7, lsl #6
    2308:	06042400 	streq	r2, [r4], -r0, lsl #8
    230c:	00000128 	andeq	r0, r0, r8, lsr #2
    2310:	00053003 	andeq	r3, r5, r3
    2314:	28070400 	stmdacs	r7, {sl}
    2318:	00000001 	andeq	r0, r0, r1
    231c:	0000e603 	andeq	lr, r0, r3, lsl #12
    2320:	2e080400 	cfcpyscs	mvf0, mvf8
    2324:	04000001 	streq	r0, [r0], #-1
    2328:	00020d03 	andeq	r0, r2, r3, lsl #26
    232c:	2e090400 	cfcpyscs	mvf0, mvf9
    2330:	08000001 	stmdaeq	r0, {r0}
    2334:	00020603 	andeq	r0, r2, r3, lsl #12
    2338:	460c0400 	strmi	r0, [ip], -r0, lsl #8
    233c:	0c000001 	stceq	0, cr0, [r0], {1}
    2340:	00024203 	andeq	r4, r2, r3, lsl #4
    2344:	460d0400 	strmi	r0, [sp], -r0, lsl #8
    2348:	10000001 	andne	r0, r0, r1
    234c:	00010e03 	andeq	r0, r1, r3, lsl #28
    2350:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
    2354:	14000001 	strne	r0, [r0], #-1
    2358:	0003e003 	andeq	lr, r3, r3
    235c:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
    2360:	18000001 	stmdane	r0, {r0}
    2364:	0004e903 	andeq	lr, r4, r3, lsl #18
    2368:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
    236c:	1c000001 	stcne	0, cr0, [r0], {1}
    2370:	00002a03 	andeq	r2, r0, r3, lsl #20
    2374:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
    2378:	20000001 	andcs	r0, r0, r1
    237c:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    2380:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2384:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2388:	40090074 	andmi	r0, r9, r4, ror r0
    238c:	0a000001 	beq	2398 <startup-0x1fffdc68>
    2390:	00000140 	andeq	r0, r0, r0, asr #2
    2394:	af040500 	svcge	0x00040500
    2398:	05000000 	streq	r0, [r0, #-0]
    239c:	00013504 	andeq	r3, r1, r4, lsl #10
    23a0:	01540600 	cmpeq	r4, r0, lsl #12
    23a4:	15040000 	strne	r0, [r4, #-0]
    23a8:	000000af 	andeq	r0, r0, pc, lsr #1
    23ac:	0001620b 	andeq	r6, r1, fp, lsl #4
    23b0:	00016200 	andeq	r6, r1, r0, lsl #4
    23b4:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    23b8:	00014c04 	andeq	r4, r1, r4, lsl #24
    23bc:	040a0d00 	streq	r0, [sl], #-3328	; 0xfffff300
    23c0:	1c040000 	stcne	0, cr0, [r4], {-0}
    23c4:	00000157 	andeq	r0, r0, r7, asr r1
    23c8:	0001c10d 	andeq	ip, r1, sp, lsl #2
    23cc:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
    23d0:	06000001 	streq	r0, [r0], -r1
    23d4:	00000186 	andeq	r0, r0, r6, lsl #3
    23d8:	005b2405 	subseq	r2, fp, r5, lsl #8
    23dc:	7e0b0000 	cdpvc	0, 0, cr0, cr11, cr0, {0}
    23e0:	9a000001 	bls	23ec <startup-0x1fffdc14>
    23e4:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    23e8:	0000019a 	muleq	r0, sl, r1
    23ec:	040003ff 	streq	r0, [r0], #-1023	; 0xfffffc01
    23f0:	00fa0704 	rscseq	r0, sl, r4, lsl #14
    23f4:	7e0d0000 	cdpvc	0, 0, cr0, cr13, cr0, {0}
    23f8:	0500000c 	streq	r0, [r0, #-12]
    23fc:	0001892b 	andeq	r8, r1, fp, lsr #18
    2400:	011c0d00 	tsteq	ip, r0, lsl #26
    2404:	2c050000 	stccs	0, cr0, [r5], {-0}
    2408:	00000189 	andeq	r0, r0, r9, lsl #3
    240c:	0004ba0d 	andeq	fp, r4, sp, lsl #20
    2410:	892d0500 	pushhi	{r8, sl}
    2414:	0d000001 	stceq	0, cr0, [r0, #-4]
    2418:	000001ee 	andeq	r0, r0, lr, ror #3
    241c:	01892e05 	orreq	r2, r9, r5, lsl #28
    2420:	8a0d0000 	bhi	342428 <startup-0x1fcbdbd8>
    2424:	05000004 	streq	r0, [r0, #-4]
    2428:	0001892f 	andeq	r8, r1, pc, lsr #18
    242c:	03d10d00 	bicseq	r0, r1, #0, 26
    2430:	30050000 	andcc	r0, r5, r0
    2434:	00000189 	andeq	r0, r0, r9, lsl #3
    2438:	0001760d 	andeq	r7, r1, sp, lsl #12
    243c:	89310500 	ldmdbhi	r1!, {r8, sl}
    2440:	0f000001 	svceq	0x00000001
    2444:	00001044 	andeq	r1, r0, r4, asr #32
    2448:	2480e401 	strcs	lr, [r0], #1025	; 0x401
    244c:	00842000 	addeq	r2, r4, r0
    2450:	9c010000 	stcls	0, cr0, [r1], {-0}
    2454:	0000022c 	andeq	r0, r0, ip, lsr #4
    2458:	01007310 	tsteq	r0, r0, lsl r3
    245c:	00022ce5 	andeq	r2, r2, r5, ror #25
    2460:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2464:	00101f11 	andseq	r1, r0, r1, lsl pc
    2468:	39e60100 	stmibcc	r6!, {r8}^
    246c:	02000002 	andeq	r0, r0, #2
    2470:	25115c91 	ldrcs	r5, [r1, #-3217]	; 0xfffff36f
    2474:	01000010 	tsteq	r0, r0, lsl r0
    2478:	000249e7 	andeq	r4, r2, r7, ror #19
    247c:	48910200 	ldmmi	r1, {r9}
    2480:	32040500 	andcc	r0, r4, #0, 10
    2484:	04000002 	streq	r0, [r0], #-2
    2488:	02d30801 	sbcseq	r0, r3, #65536	; 0x10000
    248c:	320b0000 	andcc	r0, fp, #0
    2490:	49000002 	stmdbmi	r0, {r1}
    2494:	12000002 	andne	r0, r0, #2
    2498:	0000019a 	muleq	r0, sl, r1
    249c:	320b000c 	andcc	r0, fp, #12
    24a0:	59000002 	stmdbpl	r0, {r1}
    24a4:	12000002 	andne	r0, r0, #2
    24a8:	0000019a 	muleq	r0, sl, r1
    24ac:	d50f0013 	strle	r0, [pc, #-19]	; 24a1 <startup-0x1fffdb5f>
    24b0:	0100000f 	tsteq	r0, pc
    24b4:	0023f2cc 	eoreq	pc, r3, ip, asr #5
    24b8:	00008e20 	andeq	r8, r0, r0, lsr #28
    24bc:	b39c0100 	orrslt	r0, ip, #0, 2
    24c0:	13000002 	movwne	r0, #2
    24c4:	0000110d 	andeq	r1, r0, sp, lsl #2
    24c8:	022ccc01 	eoreq	ip, ip, #256	; 0x100
    24cc:	91020000 	mrsls	r0, (UNDEF: 2)
    24d0:	044d136c 	strbeq	r1, [sp], #-876	; 0xfffffc94
    24d4:	cc010000 	stcgt	0, cr0, [r1], {-0}
    24d8:	0000022c 	andeq	r0, r0, ip, lsr #4
    24dc:	13689102 	cmnne	r8, #-2147483648	; 0x80000000
    24e0:	000010b7 	strheq	r1, [r0], -r7
    24e4:	012ecc01 			; <UNDEFINED> instruction: 0x012ecc01
    24e8:	91020000 	mrsls	r0, (UNDEF: 2)
    24ec:	0f931364 	svceq	0x00931364
    24f0:	cc010000 	stcgt	0, cr0, [r1], {-0}
    24f4:	0000012e 	andeq	r0, r0, lr, lsr #2
    24f8:	10609102 	rsbne	r9, r0, r2, lsl #2
    24fc:	d0010069 	andle	r0, r1, r9, rrx
    2500:	0000012e 	andeq	r0, r0, lr, lsr #2
    2504:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2508:	0010760f 	andseq	r7, r0, pc, lsl #12
    250c:	94bd0100 	ldrtls	r0, [sp], #256	; 0x100
    2510:	5e200023 	cdppl	0, 2, cr0, cr0, cr3, {1}
    2514:	01000000 	mrseq	r0, (UNDEF: 0)
    2518:	0002e59c 	muleq	r2, ip, r5
    251c:	110d1300 	mrsne	r1, SP_mon
    2520:	bd010000 	stclt	0, cr0, [r1, #-0]
    2524:	0000022c 	andeq	r0, r0, ip, lsr #4
    2528:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
    252c:	0000044d 	andeq	r0, r0, sp, asr #8
    2530:	022cbd01 	eoreq	fp, ip, #1, 26	; 0x40
    2534:	91020000 	mrsls	r0, (UNDEF: 2)
    2538:	c90f0070 	stmdbgt	pc, {r4, r5, r6}	; <UNPREDICTABLE>
    253c:	0100000f 	tsteq	r0, pc
    2540:	00232aad 	eoreq	r2, r3, sp, lsr #21
    2544:	00006a20 	andeq	r6, r0, r0, lsr #20
    2548:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    254c:	10000003 	andne	r0, r0, r3
    2550:	ae010073 	mcrge	0, 0, r0, cr1, cr3, {3}
    2554:	0000022c 	andeq	r0, r0, ip, lsr #4
    2558:	116c9102 	cmnne	ip, r2, lsl #2
    255c:	00000d04 	andeq	r0, r0, r4, lsl #26
    2560:	0315af01 	tsteq	r5, #1, 30
    2564:	91020000 	mrsls	r0, (UNDEF: 2)
    2568:	320b0054 	andcc	r0, fp, #84	; 0x54
    256c:	25000002 	strcs	r0, [r0, #-2]
    2570:	12000003 	andne	r0, r0, #3
    2574:	0000019a 	muleq	r0, sl, r1
    2578:	aa140014 	bge	5025d0 <startup-0x1fafda30>
    257c:	0100000f 	tsteq	r0, pc
    2580:	002318a8 	eoreq	r1, r3, r8, lsr #17
    2584:	00001220 	andeq	r1, r0, r0, lsr #4
    2588:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    258c:	00000f82 	andeq	r0, r0, r2, lsl #31
    2590:	22fe9f01 	rscscs	r9, lr, #1, 30
    2594:	001a2000 	andseq	r2, sl, r0
    2598:	9c010000 	stcls	0, cr0, [r1], {-0}
    259c:	000fb714 	andeq	fp, pc, r4, lsl r7	; <UNPREDICTABLE>
    25a0:	64830100 	strvs	r0, [r3], #256	; 0x100
    25a4:	9a200022 	bls	802634 <startup-0x1f7fd9cc>
    25a8:	01000000 	mrseq	r0, (UNDEF: 0)
    25ac:	10820f9c 	umullne	r0, r2, ip, pc	; <UNPREDICTABLE>
    25b0:	7b010000 	blvc	425b8 <startup-0x1ffbda48>
    25b4:	20002214 	andcs	r2, r0, r4, lsl r2
    25b8:	00000050 	andeq	r0, r0, r0, asr r0
    25bc:	03989c01 	orrseq	r9, r8, #256	; 0x100
    25c0:	72160000 	andsvc	r0, r6, #0
    25c4:	0100776f 	tsteq	r0, pc, ror #14
    25c8:	00005b7b 	andeq	r5, r0, fp, ror fp
    25cc:	6f910200 	svcvs	0x00910200
    25d0:	000fc213 	andeq	ip, pc, r3, lsl r2	; <UNPREDICTABLE>
    25d4:	5b7b0100 	blpl	1ec29dc <startup-0x1e13d624>
    25d8:	02000000 	andeq	r0, r0, #0
    25dc:	2b116e91 	blcs	45e028 <startup-0x1fba1fd8>
    25e0:	01000010 	tsteq	r0, r0, lsl r0
    25e4:	00005b7c 	andeq	r5, r0, ip, ror fp
    25e8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    25ec:	10a60f00 	adcne	r0, r6, r0, lsl #30
    25f0:	74010000 	strvc	r0, [r1], #-0
    25f4:	200021d8 	ldrdcs	r2, [r0], -r8
    25f8:	0000003c 	andeq	r0, r0, ip, lsr r0
    25fc:	03ba9c01 			; <UNDEFINED> instruction: 0x03ba9c01
    2600:	63160000 	tstvs	r6, #0
    2604:	5b740100 	blpl	1d02a0c <startup-0x1e2fd5f4>
    2608:	02000000 	andeq	r0, r0, #0
    260c:	17007791 			; <UNDEFINED> instruction: 0x17007791
    2610:	00000fe6 	andeq	r0, r0, r6, ror #31
    2614:	005b6a01 	subseq	r6, fp, r1, lsl #20
    2618:	21a40000 			; <UNDEFINED> instruction: 0x21a40000
    261c:	00342000 	eorseq	r2, r4, r0
    2620:	9c010000 	stcls	0, cr0, [r1], {-0}
    2624:	000003e0 	andeq	r0, r0, r0, ror #7
    2628:	01006310 	tsteq	r0, r0, lsl r3
    262c:	00005b6b 	andeq	r5, r0, fp, ror #22
    2630:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2634:	108f0f00 	addne	r0, pc, r0, lsl #30
    2638:	63010000 	movwvs	r0, #4096	; 0x1000
    263c:	20002174 	andcs	r2, r0, r4, ror r1
    2640:	00000030 	andeq	r0, r0, r0, lsr r0
    2644:	04029c01 	streq	r9, [r2], #-3073	; 0xfffff3ff
    2648:	63160000 	tstvs	r6, #0
    264c:	5b630100 	blpl	18c2a54 <startup-0x1e73d5ac>
    2650:	02000000 	andeq	r0, r0, #0
    2654:	17007791 			; <UNDEFINED> instruction: 0x17007791
    2658:	00000f9a 	muleq	r0, sl, pc	; <UNPREDICTABLE>
    265c:	005b5701 	subseq	r5, fp, r1, lsl #14
    2660:	21200000 			; <UNDEFINED> instruction: 0x21200000
    2664:	00542000 	subseq	r2, r4, r0
    2668:	9c010000 	stcls	0, cr0, [r1], {-0}
    266c:	00000429 	andeq	r0, r0, r9, lsr #8
    2670:	00767210 	rsbseq	r7, r6, r0, lsl r2
    2674:	005b5c01 	subseq	r5, fp, r1, lsl #24
    2678:	91020000 	mrsls	r0, (UNDEF: 2)
    267c:	4f17006f 	svcmi	0x0017006f
    2680:	01000010 	tsteq	r0, r0, lsl r0
    2684:	00005b4b 	andeq	r5, r0, fp, asr #22
    2688:	0020cc00 	eoreq	ip, r0, r0, lsl #24
    268c:	00005420 	andeq	r5, r0, r0, lsr #8
    2690:	509c0100 	addspl	r0, ip, r0, lsl #2
    2694:	10000004 	andne	r0, r0, r4
    2698:	01007672 	tsteq	r0, r2, ror r6
    269c:	00005b50 	andeq	r5, r0, r0, asr fp
    26a0:	6f910200 	svcvs	0x00910200
    26a4:	10330f00 	eorsne	r0, r3, r0, lsl #30
    26a8:	45010000 	strmi	r0, [r1, #-0]
    26ac:	200020a2 	andcs	r2, r0, r2, lsr #1
    26b0:	0000002a 	andeq	r0, r0, sl, lsr #32
    26b4:	04749c01 	ldrbteq	r9, [r4], #-3073	; 0xfffff3ff
    26b8:	48130000 	ldmdami	r3, {}	; <UNPREDICTABLE>
    26bc:	0100000d 	tsteq	r0, sp
    26c0:	00005b45 	andeq	r5, r0, r5, asr #22
    26c4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    26c8:	100f0f00 	andne	r0, pc, r0, lsl #30
    26cc:	3f010000 	svccc	0x00010000
    26d0:	20002078 	andcs	r2, r0, r8, ror r0
    26d4:	0000002a 	andeq	r0, r0, sl, lsr #32
    26d8:	04989c01 	ldreq	r9, [r8], #3073	; 0xc01
    26dc:	70130000 	andsvc	r0, r3, r0
    26e0:	0100000c 	tsteq	r0, ip
    26e4:	00005b3f 	andeq	r5, r0, pc, lsr fp
    26e8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    26ec:	10611800 	rsbne	r1, r1, r0, lsl #16
    26f0:	37010000 	strcc	r0, [r1, -r0]
    26f4:	20002028 	andcs	r2, r0, r8, lsr #32
    26f8:	00000050 	andeq	r0, r0, r0, asr r0
    26fc:	04c69c01 	strbeq	r9, [r6], #3073	; 0xc01
    2700:	78160000 	ldmdavc	r6, {}	; <UNPREDICTABLE>
    2704:	5b370100 	blpl	dc2b0c <startup-0x1f23d4f4>
    2708:	02000000 	andeq	r0, r0, #0
    270c:	63106f91 	tstvs	r0, #580	; 0x244
    2710:	5b390100 	blpl	e42b18 <startup-0x1f1bd4e8>
    2714:	02000000 	andeq	r0, r0, #0
    2718:	19007791 	stmdbne	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    271c:	00000ffc 	strdeq	r0, [r0], -ip
    2720:	1fe42f01 	svcne	0x00e42f01
    2724:	00442000 	subeq	r2, r4, r0
    2728:	9c010000 	stcls	0, cr0, [r1], {-0}
    272c:	01007816 	tsteq	r0, r6, lsl r8
    2730:	00005b2f 	andeq	r5, r0, pc, lsr #22
    2734:	6f910200 	svcvs	0x00910200
    2738:	01006310 	tsteq	r0, r0, lsl r3
    273c:	00005b31 	andeq	r5, r0, r1, lsr fp
    2740:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2744:	01400000 	mrseq	r0, (UNDEF: 64)
    2748:	00040000 	andeq	r0, r4, r0
    274c:	00000a63 	andeq	r0, r0, r3, ror #20
    2750:	004e0104 	subeq	r0, lr, r4, lsl #2
    2754:	120c0000 	andne	r0, ip, #0
    2758:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
    275c:	94200025 	strtls	r0, [r0], #-37	; 0xffffffdb
    2760:	b5000000 	strlt	r0, [r0, #-0]
    2764:	0200000c 	andeq	r0, r0, #12
    2768:	000002ac 	andeq	r0, r0, ip, lsr #5
    276c:	6a040214 	bvs	102fc4 <startup-0x1fefd03c>
    2770:	03000000 	movweq	r0, #0
    2774:	0000110d 	andeq	r1, r0, sp, lsl #2
    2778:	006a0502 	rsbeq	r0, sl, r2, lsl #10
    277c:	03000000 	movweq	r0, #0
    2780:	0000044d 	andeq	r0, r0, sp, asr #8
    2784:	006a0602 	rsbeq	r0, sl, r2, lsl #12
    2788:	03040000 	movweq	r0, #16384	; 0x4000
    278c:	00000034 	andeq	r0, r0, r4, lsr r0
    2790:	00770802 	rsbseq	r0, r7, r2, lsl #16
    2794:	03080000 	movweq	r0, #32768	; 0x8000
    2798:	000004f3 	strdeq	r0, [r0], -r3
    279c:	00770902 	rsbseq	r0, r7, r2, lsl #18
    27a0:	030c0000 	movweq	r0, #49152	; 0xc000
    27a4:	000002c2 	andeq	r0, r0, r2, asr #5
    27a8:	00940c02 	addseq	r0, r4, r2, lsl #24
    27ac:	00100000 	andseq	r0, r0, r0
    27b0:	00700404 	rsbseq	r0, r0, r4, lsl #8
    27b4:	01050000 	mrseq	r0, (UNDEF: 5)
    27b8:	0002d308 	andeq	sp, r2, r8, lsl #6
    27bc:	05040600 	streq	r0, [r4, #-1536]	; 0xfffffa00
    27c0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    27c4:	00008e07 	andeq	r8, r0, r7, lsl #28
    27c8:	008e0800 	addeq	r0, lr, r0, lsl #16
    27cc:	77080000 	strvc	r0, [r8, -r0]
    27d0:	00000000 	andeq	r0, r0, r0
    27d4:	00210404 	eoreq	r0, r1, r4, lsl #8
    27d8:	04040000 	streq	r0, [r4], #-0
    27dc:	0000007e 	andeq	r0, r0, lr, ror r0
    27e0:	0002ad09 	andeq	sl, r2, r9, lsl #26
    27e4:	210d0200 	mrscs	r0, SP_fiq
    27e8:	0a000000 	beq	27f0 <startup-0x1fffd810>
    27ec:	000010f4 	strdeq	r1, [r0], -r4
    27f0:	255e0c01 	ldrbcs	r0, [lr, #-3073]	; 0xfffff3ff
    27f4:	003a2000 	eorseq	r2, sl, r0
    27f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    27fc:	000000f3 	strdeq	r0, [r0], -r3
    2800:	6a626f0b 	bvs	189e434 <startup-0x1e761bcc>
    2804:	f30c0100 	vrhadd.u8	d0, d12, d0
    2808:	02000000 	andeq	r0, r0, #0
    280c:	0d0c7491 	cfstrseq	mvf7, [ip, #-580]	; 0xfffffdbc
    2810:	01000011 	tsteq	r0, r1, lsl r0
    2814:	00006a0c 	andeq	r6, r0, ip, lsl #20
    2818:	70910200 	addsvc	r0, r1, r0, lsl #4
    281c:	00044d0c 	andeq	r4, r4, ip, lsl #26
    2820:	6a0c0100 	bvs	302c28 <startup-0x1fcfd3d8>
    2824:	02000000 	andeq	r0, r0, #0
    2828:	f30c6c91 	vqrdmlsh.s<illegal width 8>	d6, d28, d1
    282c:	01000004 	tsteq	r0, r4
    2830:	0000770c 	andeq	r7, r0, ip, lsl #14
    2834:	68910200 	ldmvs	r1, {r9}
    2838:	9a040400 	bls	103840 <startup-0x1fefc7c0>
    283c:	0d000000 	stceq	0, cr0, [r0, #-0]
    2840:	000002c2 	andeq	r0, r0, r2, asr #5
    2844:	25040401 	strcs	r0, [r4, #-1025]	; 0xfffffbff
    2848:	005a2000 	subseq	r2, sl, r0
    284c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2850:	0005b10c 	andeq	fp, r5, ip, lsl #2
    2854:	f3040100 	vrhadd.u8	d0, d4, d0
    2858:	02000000 	andeq	r0, r0, #0
    285c:	030c6c91 	movweq	r6, #52369	; 0xcc91
    2860:	01000011 	tsteq	r0, r1, lsl r0
    2864:	00007704 	andeq	r7, r0, r4, lsl #14
    2868:	68910200 	ldmvs	r1, {r9}
    286c:	0010b70e 	andseq	fp, r0, lr, lsl #14
    2870:	77050100 	strvc	r0, [r5, -r0, lsl #2]
    2874:	02000000 	andeq	r0, r0, #0
    2878:	930e7491 	movwls	r7, #58513	; 0xe491
    287c:	0100000f 	tsteq	r0, pc
    2880:	00007706 	andeq	r7, r0, r6, lsl #14
    2884:	70910200 	addsvc	r0, r1, r0, lsl #4
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	01130200 	tsteq	r3, r0, lsl #4
  14:	0b3a0b0b 	bleq	e82c48 <startup-0x1f17d3b8>
  18:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  1c:	0d030000 	stceq	0, cr0, [r3, #-0]
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	000b3813 	andeq	r3, fp, r3, lsl r8
  2c:	00240400 	eoreq	r0, r4, r0, lsl #8
  30:	0b3e0b0b 	bleq	f82c64 <startup-0x1f07d39c>
  34:	00000e03 	andeq	r0, r0, r3, lsl #28
  38:	0b000f05 	bleq	3c54 <startup-0x1fffc3ac>
  3c:	0013490b 	andseq	r4, r3, fp, lsl #18
  40:	00160600 	andseq	r0, r6, r0, lsl #12
  44:	0b3a0e03 	bleq	e83858 <startup-0x1f17c7a8>
  48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  4c:	13070000 	movwne	r0, #28672	; 0x7000
  50:	0b0e0301 	bleq	380c5c <startup-0x1fc7f3a4>
  54:	3b0b3a0b 	blcc	2ce888 <startup-0x1fd31778>
  58:	0013010b 	andseq	r0, r3, fp, lsl #2
  5c:	00240800 	eoreq	r0, r4, r0, lsl #16
  60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
  64:	00000803 	andeq	r0, r0, r3, lsl #16
  68:	27011509 	strcs	r1, [r1, -r9, lsl #10]
  6c:	00130119 	andseq	r0, r3, r9, lsl r1
  70:	00050a00 	andeq	r0, r5, r0, lsl #20
  74:	00001349 	andeq	r1, r0, r9, asr #6
  78:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
  7c:	00130113 	andseq	r0, r3, r3, lsl r1
  80:	00210c00 	eoreq	r0, r1, r0, lsl #24
  84:	340d0000 	strcc	r0, [sp], #-0
  88:	3a0e0300 	bcc	380c90 <startup-0x1fc7f370>
  8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  90:	3c193f13 	ldccc	15, cr3, [r9], {19}
  94:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
  98:	13490021 	movtne	r0, #36897	; 0x9021
  9c:	0000052f 	andeq	r0, r0, pc, lsr #10
  a0:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
  a4:	000b2f13 	andeq	r2, fp, r3, lsl pc
  a8:	00341000 	eorseq	r1, r4, r0
  ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
  b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  b4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  b8:	34110000 	ldrcc	r0, [r1], #-0
  bc:	3a0e0300 	bcc	380cc4 <startup-0x1fc7f33c>
  c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  c4:	00180213 	andseq	r0, r8, r3, lsl r2
  c8:	00341200 	eorseq	r1, r4, r0, lsl #4
  cc:	0b3a0803 	bleq	e820e0 <startup-0x1f17df20>
  d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  d4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  d8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
  dc:	03193f01 	tsteq	r9, #1, 30
  e0:	3b0b3a0e 	blcc	2ce920 <startup-0x1fd316e0>
  e4:	1119270b 	tstne	r9, fp, lsl #14
  e8:	40061201 	andmi	r1, r6, r1, lsl #4
  ec:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  f0:	00001301 	andeq	r1, r0, r1, lsl #6
  f4:	11010b14 	tstne	r1, r4, lsl fp
  f8:	00061201 	andeq	r1, r6, r1, lsl #4
  fc:	002e1500 	eoreq	r1, lr, r0, lsl #10
 100:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 104:	0b3b0b3a 	bleq	ec2df4 <startup-0x1f13d20c>
 108:	01111927 	tsteq	r1, r7, lsr #18
 10c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 110:	00194296 	mulseq	r9, r6, r2
 114:	002e1600 	eoreq	r1, lr, r0, lsl #12
 118:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 11c:	0b3b0b3a 	bleq	ec2e0c <startup-0x1f13d1f4>
 120:	01111927 	tsteq	r1, r7, lsr #18
 124:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 128:	00194297 	mulseq	r9, r7, r2
 12c:	11010000 	mrsne	r0, (UNDEF: 1)
 130:	130e2501 	movwne	r2, #58625	; 0xe501
 134:	110e030b 	tstne	lr, fp, lsl #6
 138:	10061201 	andne	r1, r6, r1, lsl #4
 13c:	02000017 	andeq	r0, r0, #23
 140:	0b0b0113 	bleq	2c0594 <startup-0x1fd3fa6c>
 144:	0b3b0b3a 	bleq	ec2e34 <startup-0x1f13d1cc>
 148:	00001301 	andeq	r1, r0, r1, lsl #6
 14c:	03000d03 	movweq	r0, #3331	; 0xd03
 150:	3b0b3a0e 	blcc	2ce990 <startup-0x1fd31670>
 154:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 158:	0400000b 	streq	r0, [r0], #-11
 15c:	0b0b0024 	bleq	2c01f4 <startup-0x1fd3fe0c>
 160:	0e030b3e 	vmoveq.16	d3[0], r0
 164:	0f050000 	svceq	0x00050000
 168:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 16c:	06000013 			; <UNDEFINED> instruction: 0x06000013
 170:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 174:	0b3b0b3a 	bleq	ec2e64 <startup-0x1f13d19c>
 178:	00001349 	andeq	r1, r0, r9, asr #6
 17c:	03011307 	movweq	r1, #4871	; 0x1307
 180:	3a0b0b0e 	bcc	2c2dc0 <startup-0x1fd3d240>
 184:	010b3b0b 	tsteq	fp, fp, lsl #22
 188:	08000013 	stmdaeq	r0, {r0, r1, r4}
 18c:	0b0b0024 	bleq	2c0224 <startup-0x1fd3fddc>
 190:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 194:	15090000 	strne	r0, [r9, #-0]
 198:	01192701 	tsteq	r9, r1, lsl #14
 19c:	0a000013 	beq	1f0 <startup-0x1ffffe10>
 1a0:	13490005 	movtne	r0, #36869	; 0x9005
 1a4:	010b0000 	mrseq	r0, (UNDEF: 11)
 1a8:	01134901 	tsteq	r3, r1, lsl #18
 1ac:	0c000013 	stceq	0, cr0, [r0], {19}
 1b0:	00000021 	andeq	r0, r0, r1, lsr #32
 1b4:	0300340d 	movweq	r3, #1037	; 0x40d
 1b8:	3b0b3a0e 	blcc	2ce9f8 <startup-0x1fd31608>
 1bc:	3f13490b 	svccc	0x0013490b
 1c0:	00193c19 	andseq	r3, r9, r9, lsl ip
 1c4:	00340e00 	eorseq	r0, r4, r0, lsl #28
 1c8:	0b3a1347 	bleq	e84eec <startup-0x1f17b114>
 1cc:	18020b3b 	stmdane	r2, {r0, r1, r3, r4, r5, r8, r9, fp}
 1d0:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 1d4:	03193f01 	tsteq	r9, #1, 30
 1d8:	3b0b3a0e 	blcc	2cea18 <startup-0x1fd315e8>
 1dc:	1119270b 	tstne	r9, fp, lsl #14
 1e0:	40061201 	andmi	r1, r6, r1, lsl #4
 1e4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1e8:	00001301 	andeq	r1, r0, r1, lsl #6
 1ec:	03000510 	movweq	r0, #1296	; 0x510
 1f0:	3b0b3a0e 	blcc	2cea30 <startup-0x1fd315d0>
 1f4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1f8:	11000018 	tstne	r0, r8, lsl r0
 1fc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 200:	0b3a0e03 	bleq	e83a14 <startup-0x1f17c5ec>
 204:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 208:	06120111 			; <UNDEFINED> instruction: 0x06120111
 20c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 210:	00000019 	andeq	r0, r0, r9, lsl r0
 214:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 218:	030b130e 	movweq	r1, #45838	; 0xb30e
 21c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 220:	00171006 	andseq	r1, r7, r6
 224:	01130200 	tsteq	r3, r0, lsl #4
 228:	0b3a0b0b 	bleq	e82e5c <startup-0x1f17d1a4>
 22c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 230:	0d030000 	stceq	0, cr0, [r3, #-0]
 234:	3a0e0300 	bcc	380e3c <startup-0x1fc7f1c4>
 238:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 23c:	000b3813 	andeq	r3, fp, r3, lsl r8
 240:	00240400 	eoreq	r0, r4, r0, lsl #8
 244:	0b3e0b0b 	bleq	f82e78 <startup-0x1f07d188>
 248:	00000e03 	andeq	r0, r0, r3, lsl #28
 24c:	0b000f05 	bleq	3e68 <startup-0x1fffc198>
 250:	0013490b 	andseq	r4, r3, fp, lsl #18
 254:	00160600 	andseq	r0, r6, r0, lsl #12
 258:	0b3a0e03 	bleq	e83a6c <startup-0x1f17c594>
 25c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 260:	13070000 	movwne	r0, #28672	; 0x7000
 264:	0b0e0301 	bleq	380e70 <startup-0x1fc7f190>
 268:	3b0b3a0b 	blcc	2cea9c <startup-0x1fd31564>
 26c:	0013010b 	andseq	r0, r3, fp, lsl #2
 270:	00240800 	eoreq	r0, r4, r0, lsl #16
 274:	0b3e0b0b 	bleq	f82ea8 <startup-0x1f07d158>
 278:	00000803 	andeq	r0, r0, r3, lsl #16
 27c:	27011509 	strcs	r1, [r1, -r9, lsl #10]
 280:	00130119 	andseq	r0, r3, r9, lsl r1
 284:	00050a00 	andeq	r0, r5, r0, lsl #20
 288:	00001349 	andeq	r1, r0, r9, asr #6
 28c:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
 290:	00130113 	andseq	r0, r3, r3, lsl r1
 294:	00210c00 	eoreq	r0, r1, r0, lsl #24
 298:	340d0000 	strcc	r0, [sp], #-0
 29c:	3a0e0300 	bcc	380ea4 <startup-0x1fc7f15c>
 2a0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2a4:	3c193f13 	ldccc	15, cr3, [r9], {19}
 2a8:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
 2ac:	13490021 	movtne	r0, #36897	; 0x9021
 2b0:	00000b2f 	andeq	r0, r0, pc, lsr #22
 2b4:	0300340f 	movweq	r3, #1039	; 0x40f
 2b8:	3b0b3a0e 	blcc	2ceaf8 <startup-0x1fd31508>
 2bc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 2c0:	10000018 	andne	r0, r0, r8, lsl r0
 2c4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 2c8:	0b3b0b3a 	bleq	ec2fb8 <startup-0x1f13d048>
 2cc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 2d0:	00001802 	andeq	r1, r0, r2, lsl #16
 2d4:	3f012e11 	svccc	0x00012e11
 2d8:	3a0e0319 	bcc	380f44 <startup-0x1fc7f0bc>
 2dc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 2e0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2e4:	96184006 	ldrls	r4, [r8], -r6
 2e8:	13011942 	movwne	r1, #6466	; 0x1942
 2ec:	05120000 	ldreq	r0, [r2, #-0]
 2f0:	3a0e0300 	bcc	380ef8 <startup-0x1fc7f108>
 2f4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2f8:	00180213 	andseq	r0, r8, r3, lsl r2
 2fc:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
 300:	0b3a0e03 	bleq	e83b14 <startup-0x1f17c4ec>
 304:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 308:	06120111 			; <UNDEFINED> instruction: 0x06120111
 30c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 310:	00000019 	andeq	r0, r0, r9, lsl r0
 314:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 318:	030b130e 	movweq	r1, #45838	; 0xb30e
 31c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 320:	00171006 	andseq	r1, r7, r6
 324:	00240200 	eoreq	r0, r4, r0, lsl #4
 328:	0b3e0b0b 	bleq	f82f5c <startup-0x1f07d0a4>
 32c:	00000e03 	andeq	r0, r0, r3, lsl #28
 330:	0b011303 	bleq	44f44 <startup-0x1ffbb0bc>
 334:	3b0b3a0b 	blcc	2ceb68 <startup-0x1fd31498>
 338:	0013010b 	andseq	r0, r3, fp, lsl #2
 33c:	000d0400 	andeq	r0, sp, r0, lsl #8
 340:	0b3a0e03 	bleq	e83b54 <startup-0x1f17c4ac>
 344:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 348:	00000b38 	andeq	r0, r0, r8, lsr fp
 34c:	0b000f05 	bleq	3f68 <startup-0x1fffc098>
 350:	0013490b 	andseq	r4, r3, fp, lsl #18
 354:	00160600 	andseq	r0, r6, r0, lsl #12
 358:	0b3a0e03 	bleq	e83b6c <startup-0x1f17c494>
 35c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 360:	13070000 	movwne	r0, #28672	; 0x7000
 364:	0b0e0301 	bleq	380f70 <startup-0x1fc7f090>
 368:	3b0b3a0b 	blcc	2ceb9c <startup-0x1fd31464>
 36c:	0013010b 	andseq	r0, r3, fp, lsl #2
 370:	00240800 	eoreq	r0, r4, r0, lsl #16
 374:	0b3e0b0b 	bleq	f82fa8 <startup-0x1f07d058>
 378:	00000803 	andeq	r0, r0, r3, lsl #16
 37c:	27011509 	strcs	r1, [r1, -r9, lsl #10]
 380:	00130119 	andseq	r0, r3, r9, lsl r1
 384:	00050a00 	andeq	r0, r5, r0, lsl #20
 388:	00001349 	andeq	r1, r0, r9, asr #6
 38c:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
 390:	00130113 	andseq	r0, r3, r3, lsl r1
 394:	00210c00 	eoreq	r0, r1, r0, lsl #24
 398:	340d0000 	strcc	r0, [sp], #-0
 39c:	3a0e0300 	bcc	380fa4 <startup-0x1fc7f05c>
 3a0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3a4:	3c193f13 	ldccc	15, cr3, [r9], {19}
 3a8:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
 3ac:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 3b0:	0b3a0e03 	bleq	e83bc4 <startup-0x1f17c43c>
 3b4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 3b8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3bc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 3c0:	0f000019 	svceq	0x00000019
 3c4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 3c8:	0b3b0b3a 	bleq	ec30b8 <startup-0x1f13cf48>
 3cc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 3d0:	34100000 	ldrcc	r0, [r0], #-0
 3d4:	3a0e0300 	bcc	380fdc <startup-0x1fc7f024>
 3d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3dc:	00180213 	andseq	r0, r8, r3, lsl r2
 3e0:	11010000 	mrsne	r0, (UNDEF: 1)
 3e4:	130e2501 	movwne	r2, #58625	; 0xe501
 3e8:	110e030b 	tstne	lr, fp, lsl #6
 3ec:	10061201 	andne	r1, r6, r1, lsl #4
 3f0:	02000017 	andeq	r0, r0, #23
 3f4:	0b0b0113 	bleq	2c0848 <startup-0x1fd3f7b8>
 3f8:	0b3b0b3a 	bleq	ec30e8 <startup-0x1f13cf18>
 3fc:	00001301 	andeq	r1, r0, r1, lsl #6
 400:	03000d03 	movweq	r0, #3331	; 0xd03
 404:	3b0b3a0e 	blcc	2cec44 <startup-0x1fd313bc>
 408:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 40c:	0400000b 	streq	r0, [r0], #-11
 410:	0b0b0024 	bleq	2c04a8 <startup-0x1fd3fb58>
 414:	0e030b3e 	vmoveq.16	d3[0], r0
 418:	0f050000 	svceq	0x00050000
 41c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 420:	06000013 			; <UNDEFINED> instruction: 0x06000013
 424:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 428:	0b3b0b3a 	bleq	ec3118 <startup-0x1f13cee8>
 42c:	00001349 	andeq	r1, r0, r9, asr #6
 430:	03011307 	movweq	r1, #4871	; 0x1307
 434:	3a0b0b0e 	bcc	2c3074 <startup-0x1fd3cf8c>
 438:	010b3b0b 	tsteq	fp, fp, lsl #22
 43c:	08000013 	stmdaeq	r0, {r0, r1, r4}
 440:	0b0b0024 	bleq	2c04d8 <startup-0x1fd3fb28>
 444:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 448:	15090000 	strne	r0, [r9, #-0]
 44c:	01192701 	tsteq	r9, r1, lsl #14
 450:	0a000013 	beq	4a4 <startup-0x1ffffb5c>
 454:	13490005 	movtne	r0, #36869	; 0x9005
 458:	010b0000 	mrseq	r0, (UNDEF: 11)
 45c:	01134901 	tsteq	r3, r1, lsl #18
 460:	0c000013 	stceq	0, cr0, [r0], {19}
 464:	00000021 	andeq	r0, r0, r1, lsr #32
 468:	0300340d 	movweq	r3, #1037	; 0x40d
 46c:	3b0b3a0e 	blcc	2cecac <startup-0x1fd31354>
 470:	3f13490b 	svccc	0x0013490b
 474:	00193c19 	andseq	r3, r9, r9, lsl ip
 478:	00210e00 	eoreq	r0, r1, r0, lsl #28
 47c:	0b2f1349 	bleq	bc51a8 <startup-0x1f43ae58>
 480:	340f0000 	strcc	r0, [pc], #-0	; 488 <startup-0x1ffffb78>
 484:	3a0e0300 	bcc	38108c <startup-0x1fc7ef74>
 488:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 48c:	00180213 	andseq	r0, r8, r3, lsl r2
 490:	00341000 	eorseq	r1, r4, r0
 494:	0b3a0e03 	bleq	e83ca8 <startup-0x1f17c358>
 498:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 49c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 4a0:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 4a4:	03193f01 	tsteq	r9, #1, 30
 4a8:	3b0b3a0e 	blcc	2cece8 <startup-0x1fd31318>
 4ac:	1119270b 	tstne	r9, fp, lsl #14
 4b0:	40061201 	andmi	r1, r6, r1, lsl #4
 4b4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 4b8:	00001301 	andeq	r1, r0, r1, lsl #6
 4bc:	03000512 	movweq	r0, #1298	; 0x512
 4c0:	3b0b3a0e 	blcc	2ced00 <startup-0x1fd31300>
 4c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 4c8:	13000018 	movwne	r0, #24
 4cc:	0e03012e 	adfeqsp	f0, f3, #0.5
 4d0:	0b3b0b3a 	bleq	ec31c0 <startup-0x1f13ce40>
 4d4:	01111927 	tsteq	r1, r7, lsr #18
 4d8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4dc:	00194296 	mulseq	r9, r6, r2
 4e0:	11010000 	mrsne	r0, (UNDEF: 1)
 4e4:	130e2501 	movwne	r2, #58625	; 0xe501
 4e8:	110e030b 	tstne	lr, fp, lsl #6
 4ec:	10061201 	andne	r1, r6, r1, lsl #4
 4f0:	02000017 	andeq	r0, r0, #23
 4f4:	0b0b0113 	bleq	2c0948 <startup-0x1fd3f6b8>
 4f8:	0b3b0b3a 	bleq	ec31e8 <startup-0x1f13ce18>
 4fc:	00001301 	andeq	r1, r0, r1, lsl #6
 500:	03000d03 	movweq	r0, #3331	; 0xd03
 504:	3b0b3a0e 	blcc	2ced44 <startup-0x1fd312bc>
 508:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 50c:	0400000b 	streq	r0, [r0], #-11
 510:	0b0b0024 	bleq	2c05a8 <startup-0x1fd3fa58>
 514:	0e030b3e 	vmoveq.16	d3[0], r0
 518:	0f050000 	svceq	0x00050000
 51c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 520:	06000013 			; <UNDEFINED> instruction: 0x06000013
 524:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 528:	0b3b0b3a 	bleq	ec3218 <startup-0x1f13cde8>
 52c:	00001349 	andeq	r1, r0, r9, asr #6
 530:	03011307 	movweq	r1, #4871	; 0x1307
 534:	3a0b0b0e 	bcc	2c3174 <startup-0x1fd3ce8c>
 538:	010b3b0b 	tsteq	fp, fp, lsl #22
 53c:	08000013 	stmdaeq	r0, {r0, r1, r4}
 540:	0b0b0024 	bleq	2c05d8 <startup-0x1fd3fa28>
 544:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 548:	15090000 	strne	r0, [r9, #-0]
 54c:	01192701 	tsteq	r9, r1, lsl #14
 550:	0a000013 	beq	5a4 <startup-0x1ffffa5c>
 554:	13490005 	movtne	r0, #36869	; 0x9005
 558:	010b0000 	mrseq	r0, (UNDEF: 11)
 55c:	01134901 	tsteq	r3, r1, lsl #18
 560:	0c000013 	stceq	0, cr0, [r0], {19}
 564:	00000021 	andeq	r0, r0, r1, lsr #32
 568:	0300340d 	movweq	r3, #1037	; 0x40d
 56c:	3b0b3a0e 	blcc	2cedac <startup-0x1fd31254>
 570:	3f13490b 	svccc	0x0013490b
 574:	00193c19 	andseq	r3, r9, r9, lsl ip
 578:	00210e00 	eoreq	r0, r1, r0, lsl #28
 57c:	052f1349 	streq	r1, [pc, #-841]!	; 23b <startup-0x1ffffdc5>
 580:	340f0000 	strcc	r0, [pc], #-0	; 588 <startup-0x1ffffa78>
 584:	3a134700 	bcc	4d218c <startup-0x1fb2de74>
 588:	020b3b0b 	andeq	r3, fp, #11264	; 0x2c00
 58c:	10000018 	andne	r0, r0, r8, lsl r0
 590:	13470034 	movtne	r0, #28724	; 0x7034
 594:	18020b3a 	stmdane	r2, {r1, r3, r4, r5, r8, r9, fp}
 598:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 59c:	03193f01 	tsteq	r9, #1, 30
 5a0:	3b0b3a0e 	blcc	2cede0 <startup-0x1fd31220>
 5a4:	11192705 	tstne	r9, r5, lsl #14
 5a8:	40061201 	andmi	r1, r6, r1, lsl #4
 5ac:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 5b0:	00001301 	andeq	r1, r0, r1, lsl #6
 5b4:	03000512 	movweq	r0, #1298	; 0x512
 5b8:	3b0b3a0e 	blcc	2cedf8 <startup-0x1fd31208>
 5bc:	02134905 	andseq	r4, r3, #81920	; 0x14000
 5c0:	13000018 	movwne	r0, #24
 5c4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 5c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 5cc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 5d0:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 5d4:	03193f01 	tsteq	r9, #1, 30
 5d8:	3b0b3a0e 	blcc	2cee18 <startup-0x1fd311e8>
 5dc:	11192705 	tstne	r9, r5, lsl #14
 5e0:	40061201 	andmi	r1, r6, r1, lsl #4
 5e4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 5e8:	00001301 	andeq	r1, r0, r1, lsl #6
 5ec:	03003415 	movweq	r3, #1045	; 0x415
 5f0:	3b0b3a08 	blcc	2cee18 <startup-0x1fd311e8>
 5f4:	02134905 	andseq	r4, r3, #81920	; 0x14000
 5f8:	16000018 			; <UNDEFINED> instruction: 0x16000018
 5fc:	08030034 	stmdaeq	r3, {r2, r4, r5}
 600:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 604:	00001349 	andeq	r1, r0, r9, asr #6
 608:	03000517 	movweq	r0, #1303	; 0x517
 60c:	3b0b3a08 	blcc	2cee34 <startup-0x1fd311cc>
 610:	02134905 	andseq	r4, r3, #81920	; 0x14000
 614:	18000018 	stmdane	r0, {r3, r4}
 618:	0111010b 	tsteq	r1, fp, lsl #2
 61c:	00000612 	andeq	r0, r0, r2, lsl r6
 620:	3f012e19 	svccc	0x00012e19
 624:	3a0e0319 	bcc	381290 <startup-0x1fc7ed70>
 628:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 62c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 630:	97184006 	ldrls	r4, [r8, -r6]
 634:	13011942 	movwne	r1, #6466	; 0x1942
 638:	051a0000 	ldreq	r0, [sl, #-0]
 63c:	3a080300 	bcc	201244 <startup-0x1fdfedbc>
 640:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 644:	00180213 	andseq	r0, r8, r3, lsl r2
 648:	00051b00 	andeq	r1, r5, r0, lsl #22
 64c:	0b3a0e03 	bleq	e83e60 <startup-0x1f17c1a0>
 650:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 654:	00001802 	andeq	r1, r0, r2, lsl #16
 658:	0300341c 	movweq	r3, #1052	; 0x41c
 65c:	3b0b3a0e 	blcc	2cee9c <startup-0x1fd31164>
 660:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 664:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
 668:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 66c:	0b3a0e03 	bleq	e83e80 <startup-0x1f17c180>
 670:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 674:	06120111 			; <UNDEFINED> instruction: 0x06120111
 678:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 67c:	00130119 	andseq	r0, r3, r9, lsl r1
 680:	00341e00 	eorseq	r1, r4, r0, lsl #28
 684:	0b3a0803 	bleq	e82698 <startup-0x1f17d968>
 688:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 68c:	00001802 	andeq	r1, r0, r2, lsl #16
 690:	3f002e1f 	svccc	0x00002e1f
 694:	3a0e0319 	bcc	381300 <startup-0x1fc7ed00>
 698:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 69c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 6a0:	96184006 	ldrls	r4, [r8], -r6
 6a4:	00001942 	andeq	r1, r0, r2, asr #18
 6a8:	3f012e20 	svccc	0x00012e20
 6ac:	3a0e0319 	bcc	381318 <startup-0x1fc7ece8>
 6b0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 6b4:	11134919 	tstne	r3, r9, lsl r9
 6b8:	40061201 	andmi	r1, r6, r1, lsl #4
 6bc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 6c0:	00001301 	andeq	r1, r0, r1, lsl #6
 6c4:	03012e21 	movweq	r2, #7713	; 0x1e21
 6c8:	3b0b3a0e 	blcc	2cef08 <startup-0x1fd310f8>
 6cc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 6d0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 6d4:	96184006 	ldrls	r4, [r8], -r6
 6d8:	13011942 	movwne	r1, #6466	; 0x1942
 6dc:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
 6e0:	3a0e0301 	bcc	3812ec <startup-0x1fc7ed14>
 6e4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 6e8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 6ec:	97184006 	ldrls	r4, [r8, -r6]
 6f0:	13011942 	movwne	r1, #6466	; 0x1942
 6f4:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
 6f8:	03193f00 	tsteq	r9, #0, 30
 6fc:	3b0b3a0e 	blcc	2cef3c <startup-0x1fd310c4>
 700:	1119270b 	tstne	r9, fp, lsl #14
 704:	40061201 	andmi	r1, r6, r1, lsl #4
 708:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 70c:	01000000 	mrseq	r0, (UNDEF: 0)
 710:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 714:	0e030b13 	vmoveq.32	d3[0], r0
 718:	06120111 			; <UNDEFINED> instruction: 0x06120111
 71c:	00001710 	andeq	r1, r0, r0, lsl r7
 720:	0b011302 	bleq	45330 <startup-0x1ffbacd0>
 724:	3b0b3a0b 	blcc	2cef58 <startup-0x1fd310a8>
 728:	0013010b 	andseq	r0, r3, fp, lsl #2
 72c:	000d0300 	andeq	r0, sp, r0, lsl #6
 730:	0b3a0e03 	bleq	e83f44 <startup-0x1f17c0bc>
 734:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 738:	00000b38 	andeq	r0, r0, r8, lsr fp
 73c:	0b002404 	bleq	9754 <startup-0x1fff68ac>
 740:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 744:	0500000e 	streq	r0, [r0, #-14]
 748:	0b0b000f 	bleq	2c078c <startup-0x1fd3f874>
 74c:	00001349 	andeq	r1, r0, r9, asr #6
 750:	03001606 	movweq	r1, #1542	; 0x606
 754:	3b0b3a0e 	blcc	2cef94 <startup-0x1fd3106c>
 758:	0013490b 	andseq	r4, r3, fp, lsl #18
 75c:	01130700 	tsteq	r3, r0, lsl #14
 760:	0b0b0e03 	bleq	2c3f74 <startup-0x1fd3c08c>
 764:	0b3b0b3a 	bleq	ec3454 <startup-0x1f13cbac>
 768:	00001301 	andeq	r1, r0, r1, lsl #6
 76c:	3f012e08 	svccc	0x00012e08
 770:	3a0e0319 	bcc	3813dc <startup-0x1fc7ec24>
 774:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 778:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 77c:	97184006 	ldrls	r4, [r8, -r6]
 780:	13011942 	movwne	r1, #6466	; 0x1942
 784:	05090000 	streq	r0, [r9, #-0]
 788:	3a0e0300 	bcc	381390 <startup-0x1fc7ec70>
 78c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 790:	00180213 	andseq	r0, r8, r3, lsl r2
 794:	11010000 	mrsne	r0, (UNDEF: 1)
 798:	130e2501 	movwne	r2, #58625	; 0xe501
 79c:	110e030b 	tstne	lr, fp, lsl #6
 7a0:	10061201 	andne	r1, r6, r1, lsl #4
 7a4:	02000017 	andeq	r0, r0, #23
 7a8:	0b0b0113 	bleq	2c0bfc <startup-0x1fd3f404>
 7ac:	0b3b0b3a 	bleq	ec349c <startup-0x1f13cb64>
 7b0:	00001301 	andeq	r1, r0, r1, lsl #6
 7b4:	03000d03 	movweq	r0, #3331	; 0xd03
 7b8:	3b0b3a0e 	blcc	2ceff8 <startup-0x1fd31008>
 7bc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 7c0:	0400000b 	streq	r0, [r0], #-11
 7c4:	0b0b0024 	bleq	2c085c <startup-0x1fd3f7a4>
 7c8:	0e030b3e 	vmoveq.16	d3[0], r0
 7cc:	0f050000 	svceq	0x00050000
 7d0:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 7d4:	06000013 			; <UNDEFINED> instruction: 0x06000013
 7d8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 7dc:	0b3b0b3a 	bleq	ec34cc <startup-0x1f13cb34>
 7e0:	00001349 	andeq	r1, r0, r9, asr #6
 7e4:	3f012e07 	svccc	0x00012e07
 7e8:	3a0e0319 	bcc	381454 <startup-0x1fc7ebac>
 7ec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 7f0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 7f4:	97184006 	ldrls	r4, [r8, -r6]
 7f8:	13011942 	movwne	r1, #6466	; 0x1942
 7fc:	05080000 	streq	r0, [r8, #-0]
 800:	3a080300 	bcc	201408 <startup-0x1fdfebf8>
 804:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 808:	00180213 	andseq	r0, r8, r3, lsl r2
 80c:	00050900 	andeq	r0, r5, r0, lsl #18
 810:	0b3a0e03 	bleq	e84024 <startup-0x1f17bfdc>
 814:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 818:	00001802 	andeq	r1, r0, r2, lsl #16
 81c:	0b00240a 	bleq	984c <startup-0x1fff67b4>
 820:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 824:	00000008 	andeq	r0, r0, r8
 828:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 82c:	030b130e 	movweq	r1, #45838	; 0xb30e
 830:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 834:	00171006 	andseq	r1, r7, r6
 838:	01130200 	tsteq	r3, r0, lsl #4
 83c:	0b3a0b0b 	bleq	e83470 <startup-0x1f17cb90>
 840:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 844:	0d030000 	stceq	0, cr0, [r3, #-0]
 848:	3a0e0300 	bcc	381450 <startup-0x1fc7ebb0>
 84c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 850:	000b3813 	andeq	r3, fp, r3, lsl r8
 854:	00240400 	eoreq	r0, r4, r0, lsl #8
 858:	0b3e0b0b 	bleq	f8348c <startup-0x1f07cb74>
 85c:	00000e03 	andeq	r0, r0, r3, lsl #28
 860:	03001605 	movweq	r1, #1541	; 0x605
 864:	3b0b3a0e 	blcc	2cf0a4 <startup-0x1fd30f5c>
 868:	0013490b 	andseq	r4, r3, fp, lsl #18
 86c:	012e0600 			; <UNDEFINED> instruction: 0x012e0600
 870:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 874:	0b3b0b3a 	bleq	ec3564 <startup-0x1f13ca9c>
 878:	13491927 	movtne	r1, #39207	; 0x9927
 87c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 880:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 884:	00130119 	andseq	r0, r3, r9, lsl r1
 888:	00050700 	andeq	r0, r5, r0, lsl #14
 88c:	0b3a0803 	bleq	e828a0 <startup-0x1f17d760>
 890:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 894:	00001802 	andeq	r1, r0, r2, lsl #16
 898:	03003408 	movweq	r3, #1032	; 0x408
 89c:	3b0b3a08 	blcc	2cf0c4 <startup-0x1fd30f3c>
 8a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 8a4:	09000018 	stmdbeq	r0, {r3, r4}
 8a8:	0b0b0024 	bleq	2c0940 <startup-0x1fd3f6c0>
 8ac:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 8b0:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
 8b4:	03193f00 	tsteq	r9, #0, 30
 8b8:	3b0b3a0e 	blcc	2cf0f8 <startup-0x1fd30f08>
 8bc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 8c0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 8c4:	97184006 	ldrls	r4, [r8, -r6]
 8c8:	00001942 	andeq	r1, r0, r2, asr #18
 8cc:	3f002e0b 	svccc	0x00002e0b
 8d0:	3a0e0319 	bcc	38153c <startup-0x1fc7eac4>
 8d4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 8d8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 8dc:	97184006 	ldrls	r4, [r8, -r6]
 8e0:	00001942 	andeq	r1, r0, r2, asr #18
 8e4:	01110100 	tsteq	r1, r0, lsl #2
 8e8:	0b130e25 	bleq	4c4184 <startup-0x1fb3be7c>
 8ec:	01110e03 	tsteq	r1, r3, lsl #28
 8f0:	17100612 			; <UNDEFINED> instruction: 0x17100612
 8f4:	13020000 	movwne	r0, #8192	; 0x2000
 8f8:	3a0b0b01 	bcc	2c3504 <startup-0x1fd3cafc>
 8fc:	010b3b0b 	tsteq	fp, fp, lsl #22
 900:	03000013 	movweq	r0, #19
 904:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 908:	0b3b0b3a 	bleq	ec35f8 <startup-0x1f13ca08>
 90c:	0b381349 	bleq	e05638 <startup-0x1f1fa9c8>
 910:	24040000 	strcs	r0, [r4], #-0
 914:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 918:	000e030b 	andeq	r0, lr, fp, lsl #6
 91c:	000f0500 	andeq	r0, pc, r0, lsl #10
 920:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 924:	16060000 	strne	r0, [r6], -r0
 928:	3a0e0300 	bcc	381530 <startup-0x1fc7ead0>
 92c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 930:	07000013 	smladeq	r0, r3, r0, r0
 934:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 938:	0b3a0b0b 	bleq	e8356c <startup-0x1f17ca94>
 93c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 940:	24080000 	strcs	r0, [r8], #-0
 944:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 948:	0008030b 	andeq	r0, r8, fp, lsl #6
 94c:	01150900 	tsteq	r5, r0, lsl #18
 950:	13011927 	movwne	r1, #6439	; 0x1927
 954:	050a0000 	streq	r0, [sl, #-0]
 958:	00134900 	andseq	r4, r3, r0, lsl #18
 95c:	01010b00 	tsteq	r1, r0, lsl #22
 960:	13011349 	movwne	r1, #4937	; 0x1349
 964:	210c0000 	mrscs	r0, (UNDEF: 12)
 968:	0d000000 	stceq	0, cr0, [r0, #-0]
 96c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 970:	0b3b0b3a 	bleq	ec3660 <startup-0x1f13c9a0>
 974:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 978:	0000193c 	andeq	r1, r0, ip, lsr r9
 97c:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 980:	00052f13 	andeq	r2, r5, r3, lsl pc
 984:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
 988:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 98c:	0b3b0b3a 	bleq	ec367c <startup-0x1f13c984>
 990:	01111927 	tsteq	r1, r7, lsr #18
 994:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 998:	01194296 			; <UNDEFINED> instruction: 0x01194296
 99c:	10000013 	andne	r0, r0, r3, lsl r0
 9a0:	08030034 	stmdaeq	r3, {r2, r4, r5}
 9a4:	0b3b0b3a 	bleq	ec3694 <startup-0x1f13c96c>
 9a8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 9ac:	34110000 	ldrcc	r0, [r1], #-0
 9b0:	3a0e0300 	bcc	3815b8 <startup-0x1fc7ea48>
 9b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 9b8:	00180213 	andseq	r0, r8, r3, lsl r2
 9bc:	00211200 	eoreq	r1, r1, r0, lsl #4
 9c0:	0b2f1349 	bleq	bc56ec <startup-0x1f43a914>
 9c4:	05130000 	ldreq	r0, [r3, #-0]
 9c8:	3a0e0300 	bcc	3815d0 <startup-0x1fc7ea30>
 9cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 9d0:	00180213 	andseq	r0, r8, r3, lsl r2
 9d4:	002e1400 	eoreq	r1, lr, r0, lsl #8
 9d8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 9dc:	0b3b0b3a 	bleq	ec36cc <startup-0x1f13c934>
 9e0:	01111927 	tsteq	r1, r7, lsr #18
 9e4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 9e8:	00194296 	mulseq	r9, r6, r2
 9ec:	002e1500 	eoreq	r1, lr, r0, lsl #10
 9f0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 9f4:	0b3b0b3a 	bleq	ec36e4 <startup-0x1f13c91c>
 9f8:	01111927 	tsteq	r1, r7, lsr #18
 9fc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 a00:	00194297 	mulseq	r9, r7, r2
 a04:	00051600 	andeq	r1, r5, r0, lsl #12
 a08:	0b3a0803 	bleq	e82a1c <startup-0x1f17d5e4>
 a0c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 a10:	00001802 	andeq	r1, r0, r2, lsl #16
 a14:	3f012e17 	svccc	0x00012e17
 a18:	3a0e0319 	bcc	381684 <startup-0x1fc7e97c>
 a1c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 a20:	11134919 	tstne	r3, r9, lsl r9
 a24:	40061201 	andmi	r1, r6, r1, lsl #4
 a28:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 a2c:	00001301 	andeq	r1, r0, r1, lsl #6
 a30:	3f012e18 	svccc	0x00012e18
 a34:	3a0e0319 	bcc	3816a0 <startup-0x1fc7e960>
 a38:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 a3c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 a40:	97184006 	ldrls	r4, [r8, -r6]
 a44:	13011942 	movwne	r1, #6466	; 0x1942
 a48:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 a4c:	03193f01 	tsteq	r9, #1, 30
 a50:	3b0b3a0e 	blcc	2cf290 <startup-0x1fd30d70>
 a54:	1119270b 	tstne	r9, fp, lsl #14
 a58:	40061201 	andmi	r1, r6, r1, lsl #4
 a5c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 a60:	01000000 	mrseq	r0, (UNDEF: 0)
 a64:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 a68:	0e030b13 	vmoveq.32	d3[0], r0
 a6c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 a70:	00001710 	andeq	r1, r0, r0, lsl r7
 a74:	03011302 	movweq	r1, #4866	; 0x1302
 a78:	3a0b0b0e 	bcc	2c36b8 <startup-0x1fd3c948>
 a7c:	010b3b0b 	tsteq	fp, fp, lsl #22
 a80:	03000013 	movweq	r0, #19
 a84:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 a88:	0b3b0b3a 	bleq	ec3778 <startup-0x1f13c888>
 a8c:	0b381349 	bleq	e057b8 <startup-0x1f1fa848>
 a90:	0f040000 	svceq	0x00040000
 a94:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 a98:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
 a9c:	0b0b0024 	bleq	2c0b34 <startup-0x1fd3f4cc>
 aa0:	0e030b3e 	vmoveq.16	d3[0], r0
 aa4:	24060000 	strcs	r0, [r6], #-0
 aa8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 aac:	0008030b 	andeq	r0, r8, fp, lsl #6
 ab0:	01150700 	tsteq	r5, r0, lsl #14
 ab4:	13011927 	movwne	r1, #6439	; 0x1927
 ab8:	05080000 	streq	r0, [r8, #-0]
 abc:	00134900 	andseq	r4, r3, r0, lsl #18
 ac0:	00160900 	andseq	r0, r6, r0, lsl #18
 ac4:	0b3a0e03 	bleq	e842d8 <startup-0x1f17bd28>
 ac8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 acc:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
 ad0:	03193f01 	tsteq	r9, #1, 30
 ad4:	3b0b3a0e 	blcc	2cf314 <startup-0x1fd30cec>
 ad8:	1119270b 	tstne	r9, fp, lsl #14
 adc:	40061201 	andmi	r1, r6, r1, lsl #4
 ae0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 ae4:	00001301 	andeq	r1, r0, r1, lsl #6
 ae8:	0300050b 	movweq	r0, #1291	; 0x50b
 aec:	3b0b3a08 	blcc	2cf314 <startup-0x1fd30cec>
 af0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 af4:	0c000018 	stceq	0, cr0, [r0], {24}
 af8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 afc:	0b3b0b3a 	bleq	ec37ec <startup-0x1f13c814>
 b00:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 b04:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
 b08:	03193f01 	tsteq	r9, #1, 30
 b0c:	3b0b3a0e 	blcc	2cf34c <startup-0x1fd30cb4>
 b10:	1119270b 	tstne	r9, fp, lsl #14
 b14:	40061201 	andmi	r1, r6, r1, lsl #4
 b18:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 b1c:	340e0000 	strcc	r0, [lr], #-0
 b20:	3a0e0300 	bcc	381728 <startup-0x1fc7e8d8>
 b24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 b28:	00180213 	andseq	r0, r8, r3, lsl r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000009a4 	andeq	r0, r0, r4, lsr #19
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	077d0002 	ldrbeq	r0, [sp, -r2]!
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	200009b4 			; <UNDEFINED> instruction: 0x200009b4
  3c:	00000056 	andeq	r0, r0, r6, asr r0
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	09610002 	stmdbeq	r1!, {r1}^
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000a0c 	andcs	r0, r0, ip, lsl #20
  5c:	000002a8 	andeq	r0, r0, r8, lsr #5
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	0e900002 	cdpeq	0, 9, cr0, cr0, cr2, {0}
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000cb4 			; <UNDEFINED> instruction: 0x20000cb4
  7c:	000000d8 	ldrdeq	r0, [r0], -r8
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	10690002 	rsbne	r0, r9, r2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000d8c 	andcs	r0, r0, ip, lsl #27
  9c:	00000364 	andeq	r0, r0, r4, ror #6
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	16ae0002 	strtne	r0, [lr], r2
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200010f0 	strdcs	r1, [r0], -r0
  bc:	00000e44 	andeq	r0, r0, r4, asr #28
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	1f510002 	svcne	0x00510002
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	20001f34 	andcs	r1, r0, r4, lsr pc
  dc:	00000028 	andeq	r0, r0, r8, lsr #32
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	20550002 	subscs	r0, r5, r2
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	20001f5c 	andcs	r1, r0, ip, asr pc
  fc:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	211c0002 	tstcs	ip, r2
 110:	00040000 	andeq	r0, r4, r0
 114:	00000000 	andeq	r0, r0, r0
 118:	20001f84 	andcs	r1, r0, r4, lsl #31
 11c:	00000060 	andeq	r0, r0, r0, rrx
	...
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	22550002 	subscs	r0, r5, #2
 130:	00040000 	andeq	r0, r4, r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20001fe4 	andcs	r1, r0, r4, ror #31
 13c:	00000520 	andeq	r0, r0, r0, lsr #10
	...
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	27460002 	strbcs	r0, [r6, -r2]
 150:	00040000 	andeq	r0, r4, r0
 154:	00000000 	andeq	r0, r0, r0
 158:	20002504 	andcs	r2, r0, r4, lsl #10
 15c:	00000094 	muleq	r0, r4, r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200009b4 			; <UNDEFINED> instruction: 0x200009b4
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000218 	andeq	r0, r0, r8, lsl r2
   4:	01450002 	cmpeq	r5, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	6f6d2f3a 	svcvs	0x006d2f3a
  20:	2f632f70 	svccs	0x00632f70
  24:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
  28:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
  2c:	6f697461 	svcvs	0x00697461
  30:	2f72656e 	svccs	0x0072656e
  34:	73504944 	cmpvc	r0, #68, 18	; 0x110000
  38:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
  3c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
  40:	74730000 	ldrbtvc	r0, [r3], #-0
  44:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  48:	00632e70 	rsbeq	r2, r3, r0, ror lr
  4c:	73000001 	movwvc	r0, #1
  50:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
  54:	00682e65 	rsbeq	r2, r8, r5, ror #28
  58:	69000001 	stmdbvs	r0, {r0}
  5c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
  60:	0100682e 	tsteq	r0, lr, lsr #16
  64:	61670000 	cmnvs	r7, r0
  68:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
  6c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
  70:	0100682e 	tsteq	r0, lr, lsr #16
  74:	72670000 	rsbvc	r0, r7, #0
  78:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  7c:	682e7363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, ip, sp, lr}
  80:	00000100 	andeq	r0, r0, r0, lsl #2
  84:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
  88:	5f726574 	svcpl	0x00726574
  8c:	63616c62 	cmnvs	r1, #25088	; 0x6200
  90:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
  94:	0001006d 	andeq	r0, r1, sp, rrx
  98:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
  9c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
  a0:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
  a4:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
  a8:	01006d62 	tsteq	r0, r2, ror #26
  ac:	6f6d0000 	svcvs	0x006d0000
  b0:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
  b4:	72675f72 	rsbvc	r5, r7, #456	; 0x1c8
  b8:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
  bc:	01006d62 	tsteq	r0, r2, ror #26
  c0:	61630000 	cmnvs	r3, r0
  c4:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
  c8:	616c625f 	cmnvs	ip, pc, asr r2
  cc:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
  d0:	01006d62 	tsteq	r0, r2, ror #26
  d4:	61630000 	cmnvs	r3, r0
  d8:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
  dc:	6172675f 	cmnvs	r2, pc, asr r7
  e0:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
  e4:	0001006d 	andeq	r0, r1, sp, rrx
  e8:	73616300 	cmnvc	r1, #0, 6
  ec:	5f656c74 	svcpl	0x00656c74
  f0:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
  f4:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
  f8:	0001006d 	andeq	r0, r1, sp, rrx
  fc:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
 100:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
 104:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 108:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 10c:	00000100 	andeq	r0, r0, r0, lsl #2
 110:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 114:	72675f65 	rsbvc	r5, r7, #404	; 0x194
 118:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
 11c:	01006d62 	tsteq	r0, r2, ror #26
 120:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
 124:	5f656c74 	svcpl	0x00656c74
 128:	63616c62 	cmnvs	r1, #25088	; 0x6200
 12c:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
 130:	0001006d 	andeq	r0, r1, sp, rrx
 134:	6f6c7300 	svcvs	0x006c7300
 138:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
 13c:	682e7478 	stmdavs	lr!, {r3, r4, r5, r6, sl, ip, sp, lr}
 140:	00000100 	andeq	r0, r0, r0, lsl #2
 144:	782e6762 	stmdavc	lr!, {r1, r5, r6, r8, r9, sl, sp, lr}
 148:	01006d62 	tsteq	r0, r2, ror #26
 14c:	00000000 	andeq	r0, r0, r0
 150:	00000205 	andeq	r0, r0, r5, lsl #4
 154:	26032000 	strcs	r2, [r3], -r0
 158:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
 15c:	01010003 	tsteq	r1, r3
 160:	10020500 	andne	r0, r2, r0, lsl #10
 164:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
 168:	3d2f011b 	stfccs	f0, [pc, #-108]!	; 104 <startup-0x1ffffefc>
 16c:	03303030 	teqeq	r0, #48	; 0x30
 170:	2f3d7426 	svccs	0x003d7426
 174:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
 178:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
 17c:	2f3e672f 	svccs	0x003e672f
 180:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
 184:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
 188:	2f3d672f 	svccs	0x003d672f
 18c:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
 190:	1741023f 	smlaldxne	r0, r1, pc, r2	; <UNPREDICTABLE>
 194:	2f4a0a03 	svccs	0x004a0a03
 198:	bb758332 	bllt	1d60e68 <startup-0x1e29f198>
 19c:	5c595959 	mrrcpl	9, 5, r5, r9, cr9	; <UNPREDICTABLE>
 1a0:	59bb7583 	ldmibpl	fp!, {r0, r1, r7, r8, sl, ip, sp, lr}
 1a4:	580a0367 	stmdapl	sl, {r0, r1, r2, r5, r6, r8, r9}
 1a8:	59bb7583 	ldmibpl	fp!, {r0, r1, r7, r8, sl, ip, sp, lr}
 1ac:	59675b59 	stmdbpl	r7!, {r0, r3, r4, r6, r8, r9, fp, ip, lr}^
 1b0:	68685b59 	stmdavs	r8!, {r0, r3, r4, r6, r8, r9, fp, ip, lr}^
 1b4:	59596768 	ldmdbpl	r9, {r3, r5, r6, r8, r9, sl, sp, lr}^
 1b8:	83838483 	orrhi	r8, r3, #-2097152000	; 0x83000000
 1bc:	83598583 	cmphi	r9, #549453824	; 0x20c00000
 1c0:	83598483 	cmphi	r9, #-2097152000	; 0x83000000
 1c4:	820f0383 	andhi	r0, pc, #201326594	; 0xc000002
 1c8:	75757575 	ldrbvc	r7, [r5, #-1397]!	; 0xfffffa8b
 1cc:	75757575 	ldrbvc	r7, [r5, #-1397]!	; 0xfffffa8b
 1d0:	75677575 	strbvc	r7, [r7, #-1397]!	; 0xfffffa8b
 1d4:	5a4e3277 	bpl	138cbb8 <startup-0x1ec73448>
 1d8:	67679367 	strbvs	r9, [r7, -r7, ror #6]!
 1dc:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
 1e0:	02004267 	andeq	r4, r0, #1879048198	; 0x70000006
 1e4:	82060104 	andhi	r0, r6, #4, 2
 1e8:	02bb8306 	adcseq	r8, fp, #402653184	; 0x18000000
 1ec:	7530135c 	ldrvc	r1, [r0, #-860]!	; 0xfffffca4
 1f0:	c9bbc991 	ldmibgt	fp!, {r0, r4, r7, r8, fp, lr, pc}
 1f4:	c9d7c9c9 	ldmibgt	r7, {r0, r3, r6, r7, r8, fp, lr, pc}^
 1f8:	2108c9f3 	strdcs	ip, [r8, -r3]
 1fc:	c91308c9 	ldmdbgt	r3, {r0, r3, r6, r7, fp}
 200:	08c92f08 	stmiaeq	r9, {r3, r8, r9, sl, fp, sp}^
 204:	2108c913 	tstcs	r8, r3, lsl r9
 208:	bc4b08c9 	mcrrlt	8, 12, r0, fp, cr9
 20c:	bbbb91be 	bllt	feee490c <firstTime.4093+0xdeede610>
 210:	759191bb 	ldrvc	r9, [r1, #443]	; 0x1bb
 214:	02904103 	addseq	r4, r0, #-1073741824	; 0xc0000000
 218:	01010028 	tsteq	r1, r8, lsr #32
 21c:	0000008a 	andeq	r0, r0, sl, lsl #1
 220:	00700002 	rsbseq	r0, r0, r2
 224:	01020000 	mrseq	r0, (UNDEF: 2)
 228:	000d0efb 	strdeq	r0, [sp], -fp
 22c:	01010101 	tsteq	r1, r1, lsl #2
 230:	01000000 	mrseq	r0, (UNDEF: 0)
 234:	43010000 	movwmi	r0, #4096	; 0x1000
 238:	6f6d2f3a 	svcvs	0x006d2f3a
 23c:	2f632f70 	svccs	0x00632f70
 240:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 244:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 248:	6f697461 	svcvs	0x00697461
 24c:	2f72656e 	svccs	0x0072656e
 250:	73504944 	cmpvc	r0, #68, 18	; 0x110000
 254:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
 258:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
 25c:	61670000 	cmnvs	r7, r0
 260:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
 264:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 268:	0100632e 	tsteq	r0, lr, lsr #6
 26c:	70730000 	rsbsvc	r0, r3, r0
 270:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 274:	0100682e 	tsteq	r0, lr, lsr #16
 278:	6d690000 	stclvs	0, cr0, [r9, #-0]
 27c:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
 280:	00010068 	andeq	r0, r1, r8, rrx
 284:	6d616700 	stclvs	7, cr6, [r1, #-0]
 288:	6a626f65 	bvs	189c024 <startup-0x1e763fdc>
 28c:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 290:	00010068 	andeq	r0, r1, r8, rrx
 294:	05000000 	streq	r0, [r0, #-0]
 298:	0009b402 	andeq	fp, r9, r2, lsl #8
 29c:	4c4c1920 	mcrrmi	9, 2, r1, ip, cr0	; <UNPREDICTABLE>
 2a0:	3d67594b 			; <UNDEFINED> instruction: 0x3d67594b
 2a4:	000402ca 	andeq	r0, r4, sl, asr #5
 2a8:	01840101 	orreq	r0, r4, r1, lsl #2
 2ac:	00020000 	andeq	r0, r2, r0
 2b0:	00000137 	andeq	r0, r0, r7, lsr r1
 2b4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 2b8:	0101000d 	tsteq	r1, sp
 2bc:	00000101 	andeq	r0, r0, r1, lsl #2
 2c0:	00000100 	andeq	r0, r0, r0, lsl #2
 2c4:	2f3a4301 	svccs	0x003a4301
 2c8:	2f706f6d 	svccs	0x00706f6d
 2cc:	6f4d2f63 	svcvs	0x004d2f63
 2d0:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
 2d4:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
 2d8:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
 2dc:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 2e0:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
 2e4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
 2e8:	0000432f 	andeq	r4, r0, pc, lsr #6
 2ec:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 2f0:	0100632e 	tsteq	r0, lr, lsr #6
 2f4:	70730000 	rsbsvc	r0, r3, r0
 2f8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 2fc:	0100682e 	tsteq	r0, lr, lsr #16
 300:	6d690000 	stclvs	0, cr0, [r9, #-0]
 304:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
 308:	00010068 	andeq	r0, r1, r8, rrx
 30c:	6d616700 	stclvs	7, cr6, [r1, #-0]
 310:	6a626f65 	bvs	189c0ac <startup-0x1e763f54>
 314:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 318:	00010068 	andeq	r0, r1, r8, rrx
 31c:	72696600 	rsbvc	r6, r9, #0, 12
 320:	6c625f65 	stclvs	15, cr5, [r2], #-404	; 0xfffffe6c
 324:	5f6b6361 	svcpl	0x006b6361
 328:	62782e32 	rsbsvs	r2, r8, #800	; 0x320
 32c:	0001006d 	andeq	r0, r1, sp, rrx
 330:	72696600 	rsbvc	r6, r9, #0, 12
 334:	675f3165 	ldrbvs	r3, [pc, -r5, ror #2]
 338:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
 33c:	006d6278 	rsbeq	r6, sp, r8, ror r2
 340:	66000001 	strvs	r0, [r0], -r1
 344:	31657269 	cmncc	r5, r9, ror #4
 348:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
 34c:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
 350:	01006d62 	tsteq	r0, r2, ror #26
 354:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
 358:	5f326572 	svcpl	0x00326572
 35c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
 360:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 364:	00000100 	andeq	r0, r0, r0, lsl #2
 368:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 36c:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
 370:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
 374:	006d6278 	rsbeq	r6, sp, r8, ror r2
 378:	66000001 	strvs	r0, [r0], -r1
 37c:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
 380:	6172675f 	cmnvs	r2, pc, asr r7
 384:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
 388:	0001006d 	andeq	r0, r1, sp, rrx
 38c:	72696600 	rsbvc	r6, r9, #0, 12
 390:	6c5f3365 	mrrcvs	3, 6, r3, pc, cr5	; <UNPREDICTABLE>
 394:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 398:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 39c:	00000100 	andeq	r0, r0, r0, lsl #2
 3a0:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
 3a4:	72675f34 	rsbvc	r5, r7, #52, 30	; 0xd0
 3a8:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
 3ac:	01006d62 	tsteq	r0, r2, ror #26
 3b0:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
 3b4:	5f346572 	svcpl	0x00346572
 3b8:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 3bc:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
 3c0:	0001006d 	andeq	r0, r1, sp, rrx
 3c4:	72696600 	rsbvc	r6, r9, #0, 12
 3c8:	675f3565 	ldrbvs	r3, [pc, -r5, ror #10]
 3cc:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
 3d0:	006d6278 	rsbeq	r6, sp, r8, ror r2
 3d4:	66000001 	strvs	r0, [r0], -r1
 3d8:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
 3dc:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
 3e0:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
 3e4:	01006d62 	tsteq	r0, r2, ror #26
 3e8:	00000000 	andeq	r0, r0, r0
 3ec:	0a0c0205 	beq	300c08 <startup-0x1fcff3f8>
 3f0:	30032000 	andcc	r2, r3, r0
 3f4:	672f3d01 	strvs	r3, [pc, -r1, lsl #26]!
 3f8:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
 3fc:	2f3e672f 	svccs	0x003e672f
 400:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
 404:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
 408:	2f3e672f 	svccs	0x003e672f
 40c:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
 410:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
 414:	023d672f 	eorseq	r6, sp, #12320768	; 0xbc0000
 418:	4b4c1446 	blmi	1305538 <startup-0x1ecfaac8>
 41c:	594b3e2f 	stmdbpl	fp, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}^
 420:	915a5959 	cmpls	sl, r9, asr r9
 424:	93919191 	orrsls	r9, r1, #1073741860	; 0x40000024
 428:	3d3d3d3e 	ldccc	13, cr3, [sp, #-248]!	; 0xffffff08
 42c:	0031023d 	eorseq	r0, r1, sp, lsr r2
 430:	009d0101 	addseq	r0, sp, r1, lsl #2
 434:	00020000 	andeq	r0, r2, r0
 438:	0000006c 	andeq	r0, r0, ip, rrx
 43c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 440:	0101000d 	tsteq	r1, sp
 444:	00000101 	andeq	r0, r0, r1, lsl #2
 448:	00000100 	andeq	r0, r0, r0, lsl #2
 44c:	2f3a4301 	svccs	0x003a4301
 450:	2f706f6d 	svccs	0x00706f6d
 454:	6f4d2f63 	svcvs	0x004d2f63
 458:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
 45c:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
 460:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
 464:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 468:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
 46c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
 470:	0000432f 	andeq	r4, r0, pc, lsr #6
 474:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 478:	632e7265 			; <UNDEFINED> instruction: 0x632e7265
 47c:	00000100 	andeq	r0, r0, r0, lsl #2
 480:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 484:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
 488:	00000100 	andeq	r0, r0, r0, lsl #2
 48c:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
 490:	00682e65 	rsbeq	r2, r8, r5, ror #28
 494:	67000001 	strvs	r0, [r0, -r1]
 498:	6f656d61 	svcvs	0x00656d61
 49c:	63656a62 	cmnvs	r5, #401408	; 0x62000
 4a0:	00682e74 	rsbeq	r2, r8, r4, ror lr
 4a4:	00000001 	andeq	r0, r0, r1
 4a8:	b4020500 	strlt	r0, [r2], #-1280	; 0xfffffb00
 4ac:	1720000c 	strne	r0, [r0, -ip]!
 4b0:	3d67594b 			; <UNDEFINED> instruction: 0x3d67594b
 4b4:	040200cf 	streq	r0, [r2], #-207	; 0xffffff31
 4b8:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 4bc:	02005b59 	andeq	r5, r0, #91136	; 0x16400
 4c0:	4a060104 	bmi	1808d8 <startup-0x1fe7f728>
 4c4:	765b5906 	ldrbvc	r5, [fp], -r6, lsl #18
 4c8:	5b4b684b 	blpl	12da5fc <startup-0x1ed25a04>
 4cc:	0b026867 	bleq	9a670 <startup-0x1ff65990>
 4d0:	dd010100 	stfles	f0, [r1, #-0]
 4d4:	02000001 	andeq	r0, r0, #1
 4d8:	00018200 	andeq	r8, r1, r0, lsl #4
 4dc:	fb010200 	blx	40ce6 <startup-0x1ffbf31a>
 4e0:	01000d0e 	tsteq	r0, lr, lsl #26
 4e4:	00010101 	andeq	r0, r1, r1, lsl #2
 4e8:	00010000 	andeq	r0, r1, r0
 4ec:	3a430100 	bcc	10c08f4 <startup-0x1ef3f70c>
 4f0:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 4f4:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 440 <startup-0x1ffffbc0>
 4f8:	616c706f 	cmnvs	ip, pc, rrx
 4fc:	61726f62 	cmnvs	r2, r2, ror #30
 500:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 504:	442f7265 	strtmi	r7, [pc], #-613	; 50c <startup-0x1ffffaf4>
 508:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
 50c:	63746957 	cmnvs	r4, #1425408	; 0x15c000
 510:	00432f68 	subeq	r2, r3, r8, ror #30
 514:	72696200 	rsbvc	r6, r9, #0, 4
 518:	00632e64 	rsbeq	r2, r3, r4, ror #28
 51c:	73000001 	movwvc	r0, #1
 520:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 524:	00682e65 	rsbeq	r2, r8, r5, ror #28
 528:	69000001 	stmdbvs	r0, {r0}
 52c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
 530:	0100682e 	tsteq	r0, lr, lsr #16
 534:	61670000 	cmnvs	r7, r0
 538:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
 53c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 540:	0100682e 	tsteq	r0, lr, lsr #16
 544:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
 548:	5f316472 	svcpl	0x00316472
 54c:	63616c62 	cmnvs	r1, #25088	; 0x6200
 550:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
 554:	0001006d 	andeq	r0, r1, sp, rrx
 558:	72696200 	rsbvc	r6, r9, #0, 4
 55c:	675f3164 	ldrbvs	r3, [pc, -r4, ror #2]
 560:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
 564:	006d6278 	rsbeq	r6, sp, r8, ror r2
 568:	62000001 	andvs	r0, r0, #1
 56c:	31647269 	cmncc	r4, r9, ror #4
 570:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
 574:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
 578:	01006d62 	tsteq	r0, r2, ror #26
 57c:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
 580:	5f326472 	svcpl	0x00326472
 584:	63616c62 	cmnvs	r1, #25088	; 0x6200
 588:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
 58c:	0001006d 	andeq	r0, r1, sp, rrx
 590:	72696200 	rsbvc	r6, r9, #0, 4
 594:	675f3264 	ldrbvs	r3, [pc, -r4, ror #4]
 598:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
 59c:	006d6278 	rsbeq	r6, sp, r8, ror r2
 5a0:	62000001 	andvs	r0, r0, #1
 5a4:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
 5a8:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
 5ac:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
 5b0:	01006d62 	tsteq	r0, r2, ror #26
 5b4:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
 5b8:	5f336472 	svcpl	0x00336472
 5bc:	63616c62 	cmnvs	r1, #25088	; 0x6200
 5c0:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
 5c4:	0001006d 	andeq	r0, r1, sp, rrx
 5c8:	72696200 	rsbvc	r6, r9, #0, 4
 5cc:	675f3364 	ldrbvs	r3, [pc, -r4, ror #6]
 5d0:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
 5d4:	006d6278 	rsbeq	r6, sp, r8, ror r2
 5d8:	62000001 	andvs	r0, r0, #1
 5dc:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
 5e0:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
 5e4:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
 5e8:	01006d62 	tsteq	r0, r2, ror #26
 5ec:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
 5f0:	5f346472 	svcpl	0x00346472
 5f4:	63616c62 	cmnvs	r1, #25088	; 0x6200
 5f8:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
 5fc:	0001006d 	andeq	r0, r1, sp, rrx
 600:	72696200 	rsbvc	r6, r9, #0, 4
 604:	675f3464 	ldrbvs	r3, [pc, -r4, ror #8]
 608:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
 60c:	006d6278 	rsbeq	r6, sp, r8, ror r2
 610:	62000001 	andvs	r0, r0, #1
 614:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
 618:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
 61c:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
 620:	01006d62 	tsteq	r0, r2, ror #26
 624:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
 628:	5f356472 	svcpl	0x00356472
 62c:	63616c62 	cmnvs	r1, #25088	; 0x6200
 630:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
 634:	0001006d 	andeq	r0, r1, sp, rrx
 638:	72696200 	rsbvc	r6, r9, #0, 4
 63c:	675f3564 	ldrbvs	r3, [pc, -r4, ror #10]
 640:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
 644:	006d6278 	rsbeq	r6, sp, r8, ror r2
 648:	62000001 	andvs	r0, r0, #1
 64c:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
 650:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
 654:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
 658:	01006d62 	tsteq	r0, r2, ror #26
 65c:	00000000 	andeq	r0, r0, r0
 660:	0d8c0205 	sfmeq	f0, 4, [ip, #20]
 664:	3f032000 	svccc	0x00032000
 668:	672f3e01 	strvs	r3, [pc, -r1, lsl #28]!
 66c:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
 670:	2f3e672f 	svccs	0x003e672f
 674:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
 678:	3f672f3d 	svccc	0x00672f3d
 67c:	2f3d672f 	svccs	0x003d672f
 680:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
 684:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
 688:	2f3d672f 	svccs	0x003d672f
 68c:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
 690:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
 694:	023d672f 	eorseq	r6, sp, #12320768	; 0xbc0000
 698:	4b4c145e 	blmi	1305818 <startup-0x1ecfa7e8>
 69c:	594b3e2f 	stmdbpl	fp, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}^
 6a0:	5c595959 	mrrcpl	9, 5, r5, r9, cr9	; <UNPREDICTABLE>
 6a4:	91919191 			; <UNDEFINED> instruction: 0x91919191
 6a8:	3d3e9493 	cfldrscc	mvf9, [lr, #-588]!	; 0xfffffdb4
 6ac:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
 6b0:	0101003d 	tsteq	r1, sp, lsr r0
 6b4:	0000034e 	andeq	r0, r0, lr, asr #6
 6b8:	007c0002 	rsbseq	r0, ip, r2
 6bc:	01020000 	mrseq	r0, (UNDEF: 2)
 6c0:	000d0efb 	strdeq	r0, [sp], -fp
 6c4:	01010101 	tsteq	r1, r1, lsl #2
 6c8:	01000000 	mrseq	r0, (UNDEF: 0)
 6cc:	43010000 	movwmi	r0, #4096	; 0x1000
 6d0:	6f6d2f3a 	svcvs	0x006d2f3a
 6d4:	2f632f70 	svccs	0x00632f70
 6d8:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 6dc:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 6e0:	6f697461 	svcvs	0x00697461
 6e4:	2f72656e 	svccs	0x0072656e
 6e8:	73504944 	cmpvc	r0, #68, 18	; 0x110000
 6ec:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
 6f0:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
 6f4:	72670000 	rsbvc	r0, r7, #0
 6f8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 6fc:	632e7363 			; <UNDEFINED> instruction: 0x632e7363
 700:	00000100 	andeq	r0, r0, r0, lsl #2
 704:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 708:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
 70c:	00000100 	andeq	r0, r0, r0, lsl #2
 710:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
 714:	00682e65 	rsbeq	r2, r8, r5, ror #28
 718:	67000001 	strvs	r0, [r0, -r1]
 71c:	6f656d61 	svcvs	0x00656d61
 720:	63656a62 	cmnvs	r5, #401408	; 0x62000
 724:	00682e74 	rsbeq	r2, r8, r4, ror lr
 728:	67000001 	strvs	r0, [r0, -r1]
 72c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 730:	2e736369 	cdpcs	3, 7, cr6, cr3, cr9, {3}
 734:	00010068 	andeq	r0, r1, r8, rrx
 738:	05000000 	streq	r0, [r0, #-0]
 73c:	0010f002 	andseq	pc, r0, r2
 740:	3d301520 	cfldr32cc	mvfx1, [r0, #-128]!	; 0xffffff80
 744:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
 748:	06010402 	streq	r0, [r1], -r2, lsl #8
 74c:	3d670620 	stclcc	6, cr0, [r7, #-128]!	; 0xffffff80
 750:	3d3d30a0 	ldccc	0, cr3, [sp, #-640]!	; 0xfffffd80
 754:	02003d3d 	andeq	r3, r0, #3904	; 0xf40
 758:	20060104 	andcs	r0, r6, r4, lsl #2
 75c:	a03d6706 	eorsge	r6, sp, r6, lsl #14
 760:	2f2f214b 	svccs	0x002f214b
 764:	4c5e2a2f 	mrrcmi	10, 2, r2, lr, cr15
 768:	5b57214f 	blpl	15c8cac <startup-0x1ea37354>
 76c:	4c4a0903 	mcrrmi	9, 0, r0, sl, cr3	; <UNPREDICTABLE>
 770:	03040200 	movweq	r0, #16896	; 0x4200
 774:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 778:	02005703 	andeq	r5, r0, #786432	; 0xc0000
 77c:	3c060104 	stfccs	f0, [r6], {4}
 780:	2f674c06 	svccs	0x00674c06
 784:	4b2f674b 	blmi	bda4b8 <startup-0x1f425b48>
 788:	68a14b4b 	stmiavs	r1!, {r0, r1, r3, r6, r8, r9, fp, lr}
 78c:	59839159 	stmibpl	r3, {r0, r3, r4, r6, r8, ip, pc}
 790:	d7596876 			; <UNDEFINED> instruction: 0xd7596876
 794:	67675983 	strbvs	r5, [r7, -r3, lsl #19]!
 798:	03741203 	cmneq	r4, #805306368	; 0x30000000
 79c:	1203206e 	andne	r2, r3, #110	; 0x6e
 7a0:	2070034a 	rsbscs	r0, r0, sl, asr #6
 7a4:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 7a8:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
 7ac:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
 7b0:	3d3d3e4c 	ldccc	14, cr3, [sp, #-304]!	; 0xfffffed0
 7b4:	3d313d3d 	ldccc	13, cr3, [r1, #-244]!	; 0xffffff0c
 7b8:	313d752f 	teqcc	sp, pc, lsr #10
 7bc:	274a7903 	strbcs	r7, [sl, -r3, lsl #18]
 7c0:	67bc3d23 	ldrvs	r3, [ip, r3, lsr #26]!
 7c4:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 7c8:	2f3d2f59 	svccs	0x003d2f59
 7cc:	4b3e3d59 	blmi	f8fd38 <startup-0x1f0702c8>
 7d0:	3d4b303d 	stclcc	0, cr3, [fp, #-244]	; 0xffffff0c
 7d4:	67bc3d31 			; <UNDEFINED> instruction: 0x67bc3d31
 7d8:	915a5959 	cmpls	sl, r9, asr r9
 7dc:	3d2f594b 			; <UNDEFINED> instruction: 0x3d2f594b
 7e0:	3d593e2f 	ldclcc	14, cr3, [r9, #-188]	; 0xffffff44
 7e4:	313d5930 	teqcc	sp, r0, lsr r9
 7e8:	673d3d3d 			; <UNDEFINED> instruction: 0x673d3d3d
 7ec:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 7f0:	914b833d 	cmpls	fp, sp, lsr r3
 7f4:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
 7f8:	3d2f4c83 	stccc	12, cr4, [pc, #-524]!	; 5f4 <startup-0x1ffffa0c>
 7fc:	3d3d3d3e 	ldccc	13, cr3, [sp, #-248]!	; 0xffffff08
 800:	3e3d3d3e 	mrccc	13, 1, r3, cr13, cr14, {1}
 804:	4b4b4b4b 	blmi	12d3538 <startup-0x1ed2cac8>
 808:	3e3d3d4b 	cdpcc	13, 3, cr3, cr13, cr11, {2}
 80c:	004c9f4b 	subeq	r9, ip, fp, asr #30
 810:	4b030402 	blmi	c1820 <startup-0x1ff3e7e0>
 814:	03040200 	movweq	r0, #16896	; 0x4200
 818:	04020049 	streq	r0, [r2], #-73	; 0xffffffb7
 81c:	00580601 	subseq	r0, r8, r1, lsl #12
 820:	06020402 	streq	r0, [r2], -r2, lsl #8
 824:	04020046 	streq	r0, [r2], #-70	; 0xffffffba
 828:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 82c:	2f764d52 	svccs	0x00764d52
 830:	01040200 	mrseq	r0, R12_usr
 834:	02004a06 	andeq	r4, r0, #24576	; 0x6000
 838:	004a0204 	subeq	r0, sl, r4, lsl #4
 83c:	4a030402 	bmi	c184c <startup-0x1ff3e7b4>
 840:	13084c06 	movwne	r4, #35846	; 0x8c06
 844:	bc3e3d3d 	ldclt	13, cr3, [lr], #-244	; 0xffffff0c
 848:	3d76763d 	ldclcc	6, cr7, [r6, #-244]!	; 0xffffff0c
 84c:	23d71fd9 	bicscs	r1, r7, #868	; 0x364
 850:	d71fd93d 			; <UNDEFINED> instruction: 0xd71fd93d
 854:	1fd93d23 	svcne	0x00d93d23
 858:	2e6103d7 	mcrcs	3, 3, r0, cr1, cr7, {6}
 85c:	af202303 	svcge	0x00202303
 860:	04020069 	streq	r0, [r2], #-105	; 0xffffff97
 864:	004a0601 	subeq	r0, sl, r1, lsl #12
 868:	4a020402 	bmi	81878 <startup-0x1ff7e788>
 86c:	03040200 	movweq	r0, #16896	; 0x4200
 870:	754b064a 	strbvc	r0, [fp, #-1610]	; 0xfffff9b6
 874:	59591308 	ldmdbpl	r9, {r3, r8, r9, ip}^
 878:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 87c:	763d5b59 			; <UNDEFINED> instruction: 0x763d5b59
 880:	4b4c4b3d 	blmi	131357c <startup-0x1ececa84>
 884:	9fd8c93e 	svcls	0x00d8c93e
 888:	a0ae3dca 	adcge	r3, lr, sl, asr #27
 88c:	03ac5e03 			; <UNDEFINED> instruction: 0x03ac5e03
 890:	4c842023 	stcmi	0, cr2, [r4], {35}	; 0x23
 894:	0200592f 	andeq	r5, r0, #770048	; 0xbc000
 898:	58060104 	stmdapl	r6, {r2, r8}
 89c:	02040200 	andeq	r0, r4, #0, 4
 8a0:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
 8a4:	02002004 	andeq	r2, r0, #4
 8a8:	3d060404 	cfstrscc	mvf0, [r6, #-16]
 8ac:	0075d759 	rsbseq	sp, r5, r9, asr r7
 8b0:	59030402 	stmdbpl	r3, {r1, sl}
 8b4:	03040200 	movweq	r0, #16896	; 0x4200
 8b8:	040200ab 	streq	r0, [r2], #-171	; 0xffffff55
 8bc:	009e0601 	addseq	r0, lr, r1, lsl #12
 8c0:	06020402 	streq	r0, [r2], -r2, lsl #8
 8c4:	04020055 	streq	r0, [r2], #-85	; 0xffffffab
 8c8:	00740601 	rsbseq	r0, r4, r1, lsl #12
 8cc:	06020402 	streq	r0, [r2], -r2, lsl #8
 8d0:	04020056 	streq	r0, [r2], #-86	; 0xffffffaa
 8d4:	06740601 	ldrbteq	r0, [r4], -r1, lsl #12
 8d8:	52580a03 	subspl	r0, r8, #12288	; 0x3000
 8dc:	595a5976 	ldmdbpl	sl, {r1, r2, r4, r5, r6, r8, fp, ip, lr}^
 8e0:	3dbb3d3d 	ldccc	13, cr3, [fp, #244]!	; 0xf4
 8e4:	083de691 	ldmdaeq	sp!, {r0, r4, r7, r9, sl, sp, lr, pc}
 8e8:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 8ec:	087a0302 	ldmdaeq	sl!, {r1, r8, r9}^
 8f0:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
 8f4:	003c0601 	eorseq	r0, ip, r1, lsl #12
 8f8:	06020402 	streq	r0, [r2], -r2, lsl #8
 8fc:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
 900:	003c0601 	eorseq	r0, ip, r1, lsl #12
 904:	06020402 	streq	r0, [r2], -r2, lsl #8
 908:	04020049 	streq	r0, [r2], #-73	; 0xffffffb7
 90c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 910:	4c580e03 	mrrcmi	14, 0, r0, r8, cr3
 914:	02003d77 	andeq	r3, r0, #7616	; 0x1dc0
 918:	003d0304 	eorseq	r0, sp, r4, lsl #6
 91c:	65030402 	strvs	r0, [r3, #-1026]	; 0xfffffbfe
 920:	01040200 	mrseq	r0, R12_usr
 924:	02003c06 	andeq	r3, r0, #1536	; 0x600
 928:	65060204 	strvs	r0, [r6, #-516]	; 0xfffffdfc
 92c:	01040200 	mrseq	r0, R12_usr
 930:	6b063c06 	blvs	18f950 <startup-0x1fe706b0>
 934:	003d774c 	eorseq	r7, sp, ip, asr #14
 938:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 93c:	03040200 	movweq	r0, #16896	; 0x4200
 940:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
 944:	003c0601 	eorseq	r0, ip, r1, lsl #12
 948:	06020402 	streq	r0, [r2], -r2, lsl #8
 94c:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
 950:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 954:	2f3d4d6b 	svccs	0x003d4d6b
 958:	30302f2f 	eorscc	r2, r0, pc, lsr #30
 95c:	04020069 	streq	r0, [r2], #-105	; 0xffffff97
 960:	02003001 	andeq	r3, r0, #1
 964:	002f0104 	eoreq	r0, pc, r4, lsl #2
 968:	67010402 	strvs	r0, [r1, -r2, lsl #8]
 96c:	01040200 	mrseq	r0, R12_usr
 970:	040200c9 	streq	r0, [r2], #-201	; 0xffffff37
 974:	00130801 	andseq	r0, r3, r1, lsl #16
 978:	4b010402 	blmi	41988 <startup-0x1ffbe678>
 97c:	01040200 	mrseq	r0, R12_usr
 980:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 984:	02006801 	andeq	r6, r0, #65536	; 0x10000
 988:	00c90104 	sbceq	r0, r9, r4, lsl #2
 98c:	08010402 	stmdaeq	r1, {r1, sl}
 990:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 994:	02009201 	andeq	r9, r0, #268435456	; 0x10000000
 998:	004b0104 	subeq	r0, fp, r4, lsl #2
 99c:	3e010402 	cdpcc	4, 0, cr0, cr1, cr2, {0}
 9a0:	01040200 	mrseq	r0, R12_usr
 9a4:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 9a8:	02006701 	andeq	r6, r0, #262144	; 0x40000
 9ac:	13080104 	movwne	r0, #33028	; 0x8104
 9b0:	01040200 	mrseq	r0, R12_usr
 9b4:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
 9b8:	3c6c0301 	stclcc	3, cr0, [ip], #-4
 9bc:	3e3c1903 	vaddcc.f16	s2, s24, s6	; <UNPREDICTABLE>
 9c0:	03040200 	movweq	r0, #16896	; 0x4200
 9c4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 9c8:	00910803 	addseq	r0, r1, r3, lsl #16
 9cc:	08030402 	stmdaeq	r3, {r1, sl}
 9d0:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
 9d4:	00910803 	addseq	r0, r1, r3, lsl #16
 9d8:	08030402 	stmdaeq	r3, {r1, sl}
 9dc:	04020046 	streq	r0, [r2], #-70	; 0xffffffba
 9e0:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 9e4:	4b3e0850 	blmi	f82b2c <startup-0x1f07d4d4>
 9e8:	0821083d 	stmdaeq	r1!, {r0, r2, r3, r4, r5, fp}
 9ec:	4d210821 	stcmi	8, cr0, [r1, #-132]!	; 0xffffff7c
 9f0:	4b21304b 	blmi	84cb24 <startup-0x1f7b34dc>
 9f4:	4b3e4b3e 	blmi	f936f4 <startup-0x1f06c90c>
 9f8:	75034b3e 	strvc	r4, [r3, #-2878]	; 0xfffff4c2
 9fc:	580e033c 	stmdapl	lr, {r2, r3, r4, r5, r8, r9}
 a00:	000b0230 	andeq	r0, fp, r0, lsr r2
 a04:	00720101 	rsbseq	r0, r2, r1, lsl #2
 a08:	00020000 	andeq	r0, r2, r0
 a0c:	0000005b 	andeq	r0, r0, fp, asr r0
 a10:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 a14:	0101000d 	tsteq	r1, sp
 a18:	00000101 	andeq	r0, r0, r1, lsl #2
 a1c:	00000100 	andeq	r0, r0, r0, lsl #2
 a20:	2f3a4301 	svccs	0x003a4301
 a24:	2f706f6d 	svccs	0x00706f6d
 a28:	6f4d2f63 	svcvs	0x004d2f63
 a2c:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
 a30:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
 a34:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
 a38:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 a3c:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
 a40:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
 a44:	0000432f 	andeq	r4, r0, pc, lsr #6
 a48:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
 a4c:	00632e65 	rsbeq	r2, r3, r5, ror #28
 a50:	73000001 	movwvc	r0, #1
 a54:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 a58:	00682e65 	rsbeq	r2, r8, r5, ror #28
 a5c:	69000001 	stmdbvs	r0, {r0}
 a60:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
 a64:	0100682e 	tsteq	r0, lr, lsr #16
 a68:	00000000 	andeq	r0, r0, r0
 a6c:	1f340205 	svcne	0x00340205
 a70:	75142000 	ldrvc	r2, [r4, #-0]
 a74:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
 a78:	01010004 	tsteq	r1, r4
 a7c:	00000068 	andeq	r0, r0, r8, rrx
 a80:	00510002 	subseq	r0, r1, r2
 a84:	01020000 	mrseq	r0, (UNDEF: 2)
 a88:	000d0efb 	strdeq	r0, [sp], -fp
 a8c:	01010101 	tsteq	r1, r1, lsl #2
 a90:	01000000 	mrseq	r0, (UNDEF: 0)
 a94:	43010000 	movwmi	r0, #4096	; 0x1000
 a98:	6f6d2f3a 	svcvs	0x006d2f3a
 a9c:	2f632f70 	svccs	0x00632f70
 aa0:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 aa4:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 aa8:	6f697461 	svcvs	0x00697461
 aac:	2f72656e 	svccs	0x0072656e
 ab0:	73504944 	cmpvc	r0, #68, 18	; 0x110000
 ab4:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
 ab8:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
 abc:	70730000 	rsbsvc	r0, r3, r0
 ac0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 ac4:	0100632e 	tsteq	r0, lr, lsr #6
 ac8:	70730000 	rsbsvc	r0, r3, r0
 acc:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 ad0:	0100682e 	tsteq	r0, lr, lsr #16
 ad4:	00000000 	andeq	r0, r0, r0
 ad8:	1f5c0205 	svcne	0x005c0205
 adc:	75152000 	ldrvc	r2, [r5, #-0]
 ae0:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
 ae4:	01010004 	tsteq	r1, r4
 ae8:	0000006b 	andeq	r0, r0, fp, rrx
 aec:	004d0002 	subeq	r0, sp, r2
 af0:	01020000 	mrseq	r0, (UNDEF: 2)
 af4:	000d0efb 	strdeq	r0, [sp], -fp
 af8:	01010101 	tsteq	r1, r1, lsl #2
 afc:	01000000 	mrseq	r0, (UNDEF: 0)
 b00:	43010000 	movwmi	r0, #4096	; 0x1000
 b04:	6f6d2f3a 	svcvs	0x006d2f3a
 b08:	2f632f70 	svccs	0x00632f70
 b0c:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 b10:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 b14:	6f697461 	svcvs	0x00697461
 b18:	2f72656e 	svccs	0x0072656e
 b1c:	73504944 	cmpvc	r0, #68, 18	; 0x110000
 b20:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
 b24:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
 b28:	70670000 	rsbvc	r0, r7, r0
 b2c:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
 b30:	00000100 	andeq	r0, r0, r0, lsl #2
 b34:	6f697067 	svcvs	0x00697067
 b38:	0100682e 	tsteq	r0, lr, lsr #16
 b3c:	00000000 	andeq	r0, r0, r0
 b40:	1f840205 	svcne	0x00840205
 b44:	2f152000 	svccs	0x00152000
 b48:	3d2f763d 	stccc	6, cr7, [pc, #-244]!	; a5c <startup-0x1ffff5a4>
 b4c:	91674b5b 	cmnls	r7, fp, asr fp
 b50:	04022230 	streq	r2, [r2], #-560	; 0xfffffdd0
 b54:	5a010100 	bpl	40f5c <startup-0x1ffbf0a4>
 b58:	02000001 	andeq	r0, r0, #1
 b5c:	00008100 	andeq	r8, r0, r0, lsl #2
 b60:	fb010200 	blx	4136a <startup-0x1ffbec96>
 b64:	01000d0e 	tsteq	r0, lr, lsl #26
 b68:	00010101 	andeq	r0, r1, r1, lsl #2
 b6c:	00010000 	andeq	r0, r1, r0
 b70:	3a430100 	bcc	10c0f78 <startup-0x1ef3f088>
 b74:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 b78:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; ac4 <startup-0x1ffff53c>
 b7c:	616c706f 	cmnvs	ip, pc, rrx
 b80:	61726f62 	cmnvs	r2, r2, ror #30
 b84:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 b88:	442f7265 	strtmi	r7, [pc], #-613	; b90 <startup-0x1ffff470>
 b8c:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
 b90:	63746957 	cmnvs	r4, #1425408	; 0x15c000
 b94:	00432f68 	subeq	r2, r3, r8, ror #30
 b98:	63736100 	cmnvs	r3, #0, 2
 b9c:	645f6969 	ldrbvs	r6, [pc], #-2409	; ba4 <startup-0x1ffff45c>
 ba0:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 ba4:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 ba8:	00000100 	andeq	r0, r0, r0, lsl #2
 bac:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 bb0:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
 bb4:	00000100 	andeq	r0, r0, r0, lsl #2
 bb8:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
 bbc:	00682e65 	rsbeq	r2, r8, r5, ror #28
 bc0:	67000001 	strvs	r0, [r0, -r1]
 bc4:	6f656d61 	svcvs	0x00656d61
 bc8:	63656a62 	cmnvs	r5, #401408	; 0x62000
 bcc:	00682e74 	rsbeq	r2, r8, r4, ror lr
 bd0:	67000001 	strvs	r0, [r0, -r1]
 bd4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 bd8:	2e736369 	cdpcs	3, 7, cr6, cr3, cr9, {3}
 bdc:	00010068 	andeq	r0, r1, r8, rrx
 be0:	05000000 	streq	r0, [r0, #-0]
 be4:	001fe402 	andseq	lr, pc, r2, lsl #8
 be8:	012e0320 			; <UNDEFINED> instruction: 0x012e0320
 bec:	59bb5969 	ldmibpl	fp!, {r0, r3, r5, r6, r8, fp, ip, lr}
 bf0:	08596968 	ldmdaeq	r9, {r3, r5, r6, r8, fp, sp, lr}^
 bf4:	67765913 			; <UNDEFINED> instruction: 0x67765913
 bf8:	4c593d3d 	mrrcmi	13, 3, r3, r9, cr13
 bfc:	593d3d67 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}
 c00:	3d673e4c 	stclcc	14, cr3, [r7, #-304]!	; 0xfffffed0
 c04:	67675a3d 			; <UNDEFINED> instruction: 0x67675a3d
 c08:	673e842f 	ldrvs	r8, [lr, -pc, lsr #8]!
 c0c:	675a3d3d 	smmlarvs	sl, sp, sp, r3
 c10:	67842f67 	strvs	r2, [r4, r7, ror #30]
 c14:	3d2f4b3d 	fstmdbxcc	pc!, {d4-d33}	;@ Deprecated
 c18:	2f3d3e68 	svccs	0x003d3e68
 c1c:	2f3d4b2f 	svccs	0x003d4b2f
 c20:	02006776 	andeq	r6, r0, #30932992	; 0x1d80000
 c24:	20060104 	andcs	r0, r6, r4, lsl #2
 c28:	593d8306 	ldmdbpl	sp!, {r1, r2, r8, r9, pc}
 c2c:	67914c3d 			; <UNDEFINED> instruction: 0x67914c3d
 c30:	4c9f764b 	ldcmi	6, cr7, [pc], {75}	; 0x4b
 c34:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
 c38:	06200601 	strteq	r0, [r0], -r1, lsl #12
 c3c:	3f3d3d83 	svccc	0x003d3d83
 c40:	01040200 	mrseq	r0, R12_usr
 c44:	83062006 	movwhi	r2, #24582	; 0x6006
 c48:	003f3d3d 	eorseq	r3, pc, sp, lsr sp	; <UNPREDICTABLE>
 c4c:	06010402 	streq	r0, [r1], -r2, lsl #8
 c50:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
 c54:	02003f3d 	andeq	r3, r0, #61, 30	; 0xf4
 c58:	20060104 	andcs	r0, r6, r4, lsl #2
 c5c:	3d3d8306 	ldccc	3, cr8, [sp, #-24]!	; 0xffffffe8
 c60:	3d343e3f 	ldccc	14, cr3, [r4, #-252]!	; 0xffffff04
 c64:	2f2f2f84 	svccs	0x002f2f84
 c68:	2f843e3e 	svccs	0x00843e3e
 c6c:	4d73214b 	ldfmie	f2, [r3, #-300]!	; 0xfffffed4
 c70:	73214b2f 			; <UNDEFINED> instruction: 0x73214b2f
 c74:	3059684d 	subscc	r6, r9, sp, asr #16
 c78:	4d73214b 	ldfmie	f2, [r3, #-300]!	; 0xfffffed4
 c7c:	4e73214b 	rpwmism	f2, f3, #3.0
 c80:	30754c4b 	rsbscc	r4, r5, fp, asr #24
 c84:	213d2f4b 	teqcs	sp, fp, asr #30
 c88:	04020073 	streq	r0, [r2], #-115	; 0xffffff8d
 c8c:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 c90:	3d2f4b6b 	fstmdbxcc	pc!, {d4-d56}	;@ Deprecated
 c94:	02007321 	andeq	r7, r0, #-2080374784	; 0x84000000
 c98:	4a060104 	bmi	1810b0 <startup-0x1fe7ef50>
 c9c:	4e4b6b06 	vmlami.f64	d22, d11, d6
 ca0:	2f68753e 	svccs	0x0068753e
 ca4:	213d4b2f 	teqcs	sp, pc, lsr #22
 ca8:	2f4b4d73 	svccs	0x004b4d73
 cac:	214d7321 	cmpcs	sp, r1, lsr #6
 cb0:	01000802 	tsteq	r0, r2, lsl #16
 cb4:	00007601 	andeq	r7, r0, r1, lsl #12
 cb8:	57000200 	strpl	r0, [r0, -r0, lsl #4]
 cbc:	02000000 	andeq	r0, r0, #0
 cc0:	0d0efb01 	vstreq	d15, [lr, #-4]
 cc4:	01010100 	mrseq	r0, (UNDEF: 17)
 cc8:	00000001 	andeq	r0, r0, r1
 ccc:	01000001 	tsteq	r0, r1
 cd0:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
 cd4:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
 cd8:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
 cdc:	6f62616c 	svcvs	0x0062616c
 ce0:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 ce4:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
 ce8:	5049442f 	subpl	r4, r9, pc, lsr #8
 cec:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
 cf0:	2f686374 	svccs	0x00686374
 cf4:	73000043 	movwvc	r0, #67	; 0x43
 cf8:	5f776f6c 	svcpl	0x00776f6c
 cfc:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 d00:	0100632e 	tsteq	r0, lr, lsr #6
 d04:	6c730000 	ldclvs	0, cr0, [r3], #-0
 d08:	745f776f 	ldrbvc	r7, [pc], #-1903	; d10 <startup-0x1ffff2f0>
 d0c:	2e747865 	cdpcs	8, 7, cr7, cr4, cr5, {3}
 d10:	00010068 	andeq	r0, r1, r8, rrx
 d14:	05000000 	streq	r0, [r0, #-0]
 d18:	00250402 	eoreq	r0, r5, r2, lsl #8
 d1c:	9f591520 	svcls	0x00591520
 d20:	4c5984c9 	cfldrdmi	mvd8, [r9], {201}	; 0xc9
 d24:	3d3d3d75 	ldccc	13, cr3, [sp, #-468]!	; 0xfffffe2c
 d28:	07023d3d 	smladxeq	r2, sp, sp, r3
 d2c:	Address 0x00000d2c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
       4:	69740034 	ldmdbvs	r4!, {r2, r4, r5}^
       8:	47656c74 			; <UNDEFINED> instruction: 0x47656c74
       c:	00796172 	rsbseq	r6, r9, r2, ror r1
      10:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
      14:	35726574 	ldrbcc	r6, [r2, #-1396]!	; 0xfffffa8c
      18:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
      1c:	625f656c 	subsvs	r6, pc, #108, 10	; 0x1b000000
      20:	6b63616c 	blvs	18d85d8 <startup-0x1e727a28>
      24:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
      28:	6e610073 	mcrvs	0, 3, r0, cr1, cr3, {3}
      2c:	74616d69 	strbtvc	r6, [r1], #-3433	; 0xfffff297
      30:	5f6e6f69 	svcpl	0x006e6f69
      34:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
      38:	00726574 	rsbseq	r6, r2, r4, ror r5
      3c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
      40:	37726574 			; <UNDEFINED> instruction: 0x37726574
      44:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
      48:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
      4c:	4e470038 	mcrmi	0, 2, r0, cr7, cr8, {1}
      50:	39432055 	stmdbcc	r3, {r0, r2, r4, r6, sp}^
      54:	2e362039 	mrccs	0, 1, r2, cr6, cr9, {1}
      58:	20312e33 	eorscs	r2, r1, r3, lsr lr
      5c:	37313032 			; <UNDEFINED> instruction: 0x37313032
      60:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
      64:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
      68:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
      6c:	5b202965 	blpl	80a608 <startup-0x1f7f59f8>
      70:	2f4d5241 	svccs	0x004d5241
      74:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
      78:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
      7c:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
      80:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
      84:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
      88:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
      8c:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
      90:	31353534 	teqcc	r5, r4, lsr r5
      94:	2d205d32 	stccs	13, cr5, [r0, #-200]!	; 0xffffff38
      98:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
      9c:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
      a0:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
      a4:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
      a8:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
      ac:	6d2d206d 	stcvs	0, cr2, [sp, #-436]!	; 0xfffffe4c
      b0:	616f6c66 	cmnvs	pc, r6, ror #24
      b4:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
      b8:	6f733d69 	svcvs	0x00733d69
      bc:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
      c0:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
      c4:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
      c8:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
      cc:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
      d0:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
      d4:	672d206d 	strvs	r2, [sp, -sp, rrx]!
      d8:	304f2d20 	subcc	r2, pc, r0, lsr #26
      dc:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
      e0:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
      e4:	50780039 	rsbspl	r0, r8, r9, lsr r0
      e8:	7400736f 	strvc	r7, [r0], #-879	; 0xfffffc91
      ec:	54706d65 	ldrbtpl	r6, [r0], #-3429	; 0xfffff29b
      f0:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
      f4:	63616c42 	cmnvs	r1, #16896	; 0x4200
      f8:	6973006b 	ldmdbvs	r3!, {r0, r1, r3, r5, r6}^
      fc:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
     100:	74006570 	strvc	r6, [r0], #-1392	; 0xfffffa90
     104:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     108:	63616c42 	cmnvs	r1, #16896	; 0x4200
     10c:	7563006b 	strbvc	r0, [r3, #-107]!	; 0xffffff95
     110:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     114:	72665f74 	rsbvc	r5, r6, #116, 30	; 0x1d0
     118:	00656d61 	rsbeq	r6, r5, r1, ror #26
     11c:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
     120:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     124:	5f726566 	svcpl	0x00726566
     128:	63616c62 	cmnvs	r1, #25088	; 0x6200
     12c:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
     130:	6f4d706d 	svcvs	0x004d706d
     134:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     138:	67694c72 			; <UNDEFINED> instruction: 0x67694c72
     13c:	6d007468 	cfstrsvs	mvf7, [r0, #-416]	; 0xfffffe60
     140:	006e6961 	rsbeq	r6, lr, r1, ror #18
     144:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     148:	69740033 	ldmdbvs	r4!, {r0, r1, r4, r5}^
     14c:	4f656c74 	svcmi	0x00656c74
     150:	74006a62 	strvc	r6, [r0], #-2658	; 0xfffff59e
     154:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
     158:	656a624f 	strbvs	r6, [sl, #-591]!	; 0xfffffdb1
     15c:	63007463 	movwvs	r7, #1123	; 0x463
     160:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
     164:	616c4265 	cmnvs	ip, r5, ror #4
     168:	63006b63 	movwvs	r6, #2915	; 0xb63
     16c:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
     170:	61724765 	cmnvs	r2, r5, ror #14
     174:	61620079 	smcvs	8201	; 0x2009
     178:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
     17c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     180:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     184:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
     188:	5f38746e 	svcpl	0x0038746e
     18c:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
     190:	00397478 	eorseq	r7, r9, r8, ror r4
     194:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     198:	34726574 	ldrbtcc	r6, [r2], #-1396	; 0xfffffa8c
     19c:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     1a0:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     1a4:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     1a8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     1ac:	6f6d0036 	svcvs	0x006d0036
     1b0:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     1b4:	6c625f72 	stclvs	15, cr5, [r2], #-456	; 0xfffffe38
     1b8:	5f6b6361 	svcpl	0x006b6361
     1bc:	73746962 	cmnvc	r4, #1605632	; 0x188000
     1c0:	61476e00 	cmpvs	r7, r0, lsl #28
     1c4:	624f656d 	subvs	r6, pc, #457179136	; 0x1b400000
     1c8:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     1cc:	6f700073 	svcvs	0x00700073
     1d0:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     1d4:	77003972 	smlsdxvc	r0, r2, r9, r3
     1d8:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
     1dc:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     1e0:	65745f67 	ldrbvs	r5, [r4, #-3943]!	; 0xfffff099
     1e4:	74007478 	strvc	r7, [r0], #-1144	; 0xfffffb88
     1e8:	31747865 	cmncc	r4, r5, ror #16
     1ec:	72640031 	rsbvc	r0, r4, #49	; 0x31
     1f0:	625f7761 	subsvs	r7, pc, #25427968	; 0x1840000
     1f4:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     1f8:	6c625f72 	stclvs	15, cr5, [r2], #-456	; 0xfffffe38
     1fc:	5f6b6361 	svcpl	0x006b6361
     200:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     204:	70750074 	rsbsvc	r0, r5, r4, ror r0
     208:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
     20c:	6f507900 	svcvs	0x00507900
     210:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     214:	30317478 	eorscc	r7, r1, r8, ror r4
     218:	73616300 	cmnvc	r1, #0, 6
     21c:	4f656c74 	svcmi	0x00656c74
     220:	6d006a62 	vstrvs	s12, [r0, #-392]	; 0xfffffe78
     224:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     228:	6f507265 	svcvs	0x00507265
     22c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     230:	63003272 	movwvs	r3, #626	; 0x272
     234:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
     238:	735f746e 	cmpvc	pc, #1845493760	; 0x6e000000
     23c:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
     240:	6572006e 	ldrbvs	r0, [r2, #-110]!	; 0xffffff92
     244:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
     248:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     24c:	00323174 	eorseq	r3, r2, r4, ror r1
     250:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     254:	61726b5f 	cmnvs	r2, pc, asr fp
     258:	73616300 	cmnvc	r1, #0, 6
     25c:	5f656c74 	svcpl	0x00656c74
     260:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     264:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     268:	43007374 	movwmi	r7, #884	; 0x374
     26c:	6f6d2f3a 	svcvs	0x006d2f3a
     270:	2f632f70 	svccs	0x00632f70
     274:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     278:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     27c:	6f697461 	svcvs	0x00697461
     280:	2f72656e 	svccs	0x0072656e
     284:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     288:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     28c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     290:	6174732f 	cmnvs	r4, pc, lsr #6
     294:	70757472 	rsbsvc	r7, r5, r2, ror r4
     298:	6c00632e 	stcvs	3, cr6, [r0], {46}	; 0x2e
     29c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     2a0:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     2a4:	65740065 	ldrbvs	r0, [r4, #-101]!	; 0xffffff9b
     2a8:	00347478 	eorseq	r7, r4, r8, ror r4
     2ac:	6f6c5374 	svcvs	0x006c5374
     2b0:	78655477 	stmdavc	r5!, {r0, r1, r2, r4, r5, r6, sl, ip, lr}^
     2b4:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
     2b8:	00377478 	eorseq	r7, r7, r8, ror r4
     2bc:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     2c0:	69640038 	stmdbvs	r4!, {r3, r4, r5}^
     2c4:	616c7073 	smcvs	50947	; 0xc703
     2c8:	6e750079 	mrcvs	0, 3, r0, cr5, cr9, {3}
     2cc:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     2d0:	63206465 			; <UNDEFINED> instruction: 0x63206465
     2d4:	00726168 	rsbseq	r6, r2, r8, ror #2
     2d8:	706d6574 	rsbvc	r6, sp, r4, ror r5
     2dc:	736e6f4d 	cmnvc	lr, #308	; 0x134
     2e0:	47726574 			; <UNDEFINED> instruction: 0x47726574
     2e4:	00796172 	rsbseq	r6, r9, r2, ror r1
     2e8:	706d6574 	rsbvc	r6, sp, r4, ror r5
     2ec:	6c746954 			; <UNDEFINED> instruction: 0x6c746954
     2f0:	67694c65 	strbvs	r4, [r9, -r5, ror #24]!
     2f4:	74007468 	strvc	r7, [r0], #-1128	; 0xfffffb98
     2f8:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     2fc:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     300:	65680074 	strbvs	r0, [r8, #-116]!	; 0xffffff8c
     304:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     308:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     30c:	6d49656c 	cfstr64vs	mvdx6, [r9, #-432]	; 0xfffffe50
     310:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     314:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     318:	675f656c 	ldrbvs	r6, [pc, -ip, ror #10]
     31c:	5f796172 	svcpl	0x00796172
     320:	73746962 	cmnvc	r4, #1605632	; 0x188000
     324:	6f687300 	svcvs	0x00687300
     328:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
     32c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     330:	2064656e 	rsbcs	r6, r4, lr, ror #10
     334:	00746e69 	rsbseq	r6, r4, r9, ror #28
     338:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
     33c:	694c656c 	stmdbvs	ip, {r2, r3, r5, r6, r8, sl, sp, lr}^
     340:	00746867 	rsbseq	r6, r4, r7, ror #16
     344:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     348:	7070615f 	rsbsvc	r6, r0, pc, asr r1
     34c:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     350:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     354:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     358:	6f6d0074 	svcvs	0x006d0074
     35c:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     360:	616d4972 	smcvs	54418	; 0xd492
     364:	00736567 	rsbseq	r6, r3, r7, ror #10
     368:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     36c:	65740031 	ldrbvs	r0, [r4, #-49]!	; 0xffffffcf
     370:	00327478 	eorseq	r7, r2, r8, ror r4
     374:	706d6574 	rsbvc	r6, sp, r4, ror r5
     378:	74736143 	ldrbtvc	r6, [r3], #-323	; 0xfffffebd
     37c:	7247656c 	subvc	r6, r7, #108, 10	; 0x1b000000
     380:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     384:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     388:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     38c:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     390:	00737469 	rsbseq	r7, r3, r9, ror #8
     394:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     398:	65740035 	ldrbvs	r0, [r4, #-53]!	; 0xffffffcb
     39c:	00367478 	eorseq	r7, r6, r8, ror r4
     3a0:	706d6574 	rsbvc	r6, sp, r4, ror r5
     3a4:	74736143 	ldrbtvc	r6, [r3], #-323	; 0xfffffebd
     3a8:	6c42656c 	cfstr64vs	mvdx6, [r2], {108}	; 0x6c
     3ac:	006b6361 	rsbeq	r6, fp, r1, ror #6
     3b0:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
     3b4:	675f656c 	ldrbvs	r6, [pc, -ip, ror #10]
     3b8:	5f796172 	svcpl	0x00796172
     3bc:	73746962 	cmnvc	r4, #1605632	; 0x188000
     3c0:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     3c4:	73614370 	cmnvc	r1, #112, 6	; 0xc0000001
     3c8:	4c656c74 	stclmi	12, cr6, [r5], #-464	; 0xfffffe30
     3cc:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     3d0:	63616200 	cmnvs	r1, #0, 4
     3d4:	6675426b 	ldrbtvs	r4, [r5], -fp, ror #4
     3d8:	47726566 	ldrbmi	r6, [r2, -r6, ror #10]!
     3dc:	00796172 	rsbseq	r6, r9, r2, ror r1
     3e0:	72665f6e 	rsbvc	r5, r6, #440	; 0x1b8
     3e4:	73656d61 	cmnvc	r5, #6208	; 0x1840
     3e8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     3ec:	00674270 	rsbeq	r4, r7, r0, ror r2
     3f0:	706d6574 	rsbvc	r6, sp, r4, ror r5
     3f4:	6c746954 			; <UNDEFINED> instruction: 0x6c746954
     3f8:	61724765 	cmnvs	r2, r5, ror #14
     3fc:	6e690079 	mcrvs	0, 3, r0, cr9, cr9, {3}
     400:	70537469 	subsvc	r7, r3, r9, ror #8
     404:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     408:	61670073 	smcvs	28675	; 0x7003
     40c:	624f656d 	subvs	r6, pc, #457179136	; 0x1b400000
     410:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     414:	6f6d0073 	svcvs	0x006d0073
     418:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     41c:	6a624f72 	bvs	18941ec <startup-0x1e76be14>
     420:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     424:	6e6f4d70 	mcrvs	13, 3, r4, cr15, cr0, {3}
     428:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     42c:	616c6200 	cmnvs	ip, r0, lsl #4
     430:	6d496b63 	vstrvs	d22, [r9, #-396]	; 0xfffffe74
     434:	00656761 	rsbeq	r6, r5, r1, ror #14
     438:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     43c:	65745f74 	ldrbvs	r5, [r4, #-3956]!	; 0xfffff08c
     440:	67007478 	smlsdxvs	r0, r8, r4, r7
     444:	49796172 	ldmdbmi	r9!, {r1, r4, r5, r6, r8, sp, lr}^
     448:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     44c:	776f7200 	strbvc	r7, [pc, -r0, lsl #4]!
     450:	6f6d0032 	svcvs	0x006d0032
     454:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     458:	696f5072 	stmdbvs	pc!, {r1, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
     45c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     460:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     464:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     468:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     46c:	65640065 	strbvs	r0, [r4, #-101]!	; 0xffffff9b
     470:	5f79616c 	svcpl	0x0079616c
     474:	69746e75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     478:	65745f6c 	ldrbvs	r5, [r4, #-3948]!	; 0xfffff094
     47c:	74007478 	strvc	r7, [r0], #-1144	; 0xfffffb88
     480:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     484:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     488:	72640065 	rsbvc	r0, r4, #101	; 0x65
     48c:	625f7761 	subsvs	r7, pc, #25427968	; 0x1840000
     490:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     494:	6c625f72 	stclvs	15, cr5, [r2], #-456	; 0xfffffe38
     498:	5f6b6361 	svcpl	0x006b6361
     49c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     4a0:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     4a4:	6d007468 	cfstrsvs	mvf7, [r0, #-416]	; 0xfffffe60
     4a8:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     4ac:	6c5f7265 	lfmvs	f7, 2, [pc], {101}	; 0x65
     4b0:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     4b4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     4b8:	72640073 	rsbvc	r0, r4, #115	; 0x73
     4bc:	625f7761 	subsvs	r7, pc, #25427968	; 0x1840000
     4c0:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     4c4:	6c625f72 	stclvs	15, cr5, [r2], #-456	; 0xfffffe38
     4c8:	5f6b6361 	svcpl	0x006b6361
     4cc:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     4d0:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     4d4:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     4d8:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
     4dc:	33726574 	cmncc	r2, #116, 10	; 0x1d000000
     4e0:	61747300 	cmnvs	r4, r0, lsl #6
     4e4:	70757472 	rsbsvc	r7, r5, r2, ror r4
     4e8:	696e6100 	stmdbvs	lr!, {r8, sp, lr}^
     4ec:	6974616d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     4f0:	735f6e6f 	cmpvc	pc, #1776	; 0x6f0
     4f4:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     4f8:	73616300 	cmnvc	r1, #0, 6
     4fc:	49656c74 	stmdbmi	r5!, {r2, r4, r5, r6, sl, fp, sp, lr}^
     500:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     504:	6f6d0073 	svcvs	0x006d0073
     508:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     50c:	72675f72 	rsbvc	r5, r7, #456	; 0x1c8
     510:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     514:	00737469 	rsbseq	r7, r3, r9, ror #8
     518:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     51c:	31726574 	cmncc	r2, r4, ror r5
     520:	69660030 	stmdbvs	r6!, {r4, r5}^
     524:	00326572 	eorseq	r6, r2, r2, ror r5
     528:	625f6762 	subsvs	r6, pc, #25690112	; 0x1880000
     52c:	00737469 	rsbseq	r7, r3, r9, ror #8
     530:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     534:	63007365 	movwvs	r7, #869	; 0x365
     538:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
     53c:	616d4965 	cmnvs	sp, r5, ror #18
     540:	6d006567 	cfstr32vs	mvfx6, [r0, #-412]	; 0xfffffe64
     544:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     548:	72477265 	subvc	r7, r7, #1342177286	; 0x50000006
     54c:	63007961 	movwvs	r7, #2401	; 0x961
     550:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
     554:	6c625f65 	stclvs	15, cr5, [r2], #-404	; 0xfffffe6c
     558:	5f6b6361 	svcpl	0x006b6361
     55c:	73746962 	cmnvc	r4, #1605632	; 0x188000
     560:	72696600 	rsbvc	r6, r9, #0, 12
     564:	66003165 	strvs	r3, [r0], -r5, ror #2
     568:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     56c:	6d616700 	stclvs	7, cr6, [r1, #-0]
     570:	6a624f65 	bvs	189430c <startup-0x1e76bcf4>
     574:	55746365 	ldrbpl	r6, [r4, #-869]!	; 0xfffffc9b
     578:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
     57c:	3a430065 	bcc	10c0718 <startup-0x1ef3f8e8>
     580:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     584:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 4d0 <startup-0x1ffffb30>
     588:	616c706f 	cmnvs	ip, pc, rrx
     58c:	61726f62 	cmnvs	r2, r2, ror #30
     590:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     594:	442f7265 	strtmi	r7, [pc], #-613	; 59c <startup-0x1ffffa64>
     598:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     59c:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     5a0:	2f432f68 	svccs	0x00432f68
     5a4:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     5a8:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     5ac:	632e7463 			; <UNDEFINED> instruction: 0x632e7463
     5b0:	69687400 	stmdbvs	r8!, {sl, ip, sp, lr}^
     5b4:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     5b8:	47356572 			; <UNDEFINED> instruction: 0x47356572
     5bc:	00796172 	rsbseq	r6, r9, r2, ror r1
     5c0:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     5c4:	61724731 	cmnvs	r2, r1, lsr r7
     5c8:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     5cc:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     5d0:	47326572 			; <UNDEFINED> instruction: 0x47326572
     5d4:	00796172 	rsbseq	r6, r9, r2, ror r1
     5d8:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     5dc:	61724733 	cmnvs	r2, r3, lsr r7
     5e0:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     5e4:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     5e8:	47346572 			; <UNDEFINED> instruction: 0x47346572
     5ec:	00796172 	rsbseq	r6, r9, r2, ror r1
     5f0:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     5f4:	63616c42 	cmnvs	r1, #16896	; 0x4200
     5f8:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
     5fc:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     600:	47336572 			; <UNDEFINED> instruction: 0x47336572
     604:	00796172 	rsbseq	r6, r9, r2, ror r1
     608:	706d6574 	rsbvc	r6, sp, r4, ror r5
     60c:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     610:	63616c42 	cmnvs	r1, #16896	; 0x4200
     614:	6966006b 	stmdbvs	r6!, {r0, r1, r3, r5, r6}^
     618:	4c316572 	cfldr32mi	mvfx6, [r1], #-456	; 0xfffffe38
     61c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     620:	72696600 	rsbvc	r6, r9, #0, 12
     624:	694c3465 	stmdbvs	ip, {r0, r2, r5, r6, sl, ip, sp}^
     628:	00746867 	rsbseq	r6, r4, r7, ror #16
     62c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     630:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
     634:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     638:	00737469 	rsbseq	r7, r3, r9, ror #8
     63c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     640:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     644:	5f746867 	svcpl	0x00746867
     648:	73746962 	cmnvc	r4, #1605632	; 0x188000
     64c:	72696600 	rsbvc	r6, r9, #0, 12
     650:	694c3365 	stmdbvs	ip, {r0, r2, r5, r6, r8, r9, ip, sp}^
     654:	00746867 	rsbseq	r6, r4, r7, ror #16
     658:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     65c:	31726574 	cmncc	r2, r4, ror r5
     660:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     664:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     668:	69660033 	stmdbvs	r6!, {r0, r1, r4, r5}^
     66c:	5f356572 	svcpl	0x00356572
     670:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     674:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     678:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     67c:	49336572 	ldmdbmi	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}
     680:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     684:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     688:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     68c:	69660030 	stmdbvs	r6!, {r4, r5}^
     690:	4c356572 	cfldr32mi	mvfx6, [r5], #-456	; 0xfffffe38
     694:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     698:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     69c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     6a0:	65740032 	ldrbvs	r0, [r4, #-50]!	; 0xffffffce
     6a4:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     6a8:	47356572 			; <UNDEFINED> instruction: 0x47356572
     6ac:	00796172 	rsbseq	r6, r9, r2, ror r1
     6b0:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     6b4:	72675f31 	rsbvc	r5, r7, #49, 30	; 0xc4
     6b8:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     6bc:	00737469 	rsbseq	r7, r3, r9, ror #8
     6c0:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     6c4:	67694c32 			; <UNDEFINED> instruction: 0x67694c32
     6c8:	66007468 	strvs	r7, [r0], -r8, ror #8
     6cc:	31657269 	cmncc	r5, r9, ror #4
     6d0:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     6d4:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     6d8:	00737469 	rsbseq	r7, r3, r9, ror #8
     6dc:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     6e0:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     6e4:	5f746867 	svcpl	0x00746867
     6e8:	73746962 	cmnvc	r4, #1605632	; 0x188000
     6ec:	72696600 	rsbvc	r6, r9, #0, 12
     6f0:	6a624f65 	bvs	189448c <startup-0x1e76bb74>
     6f4:	72696600 	rsbvc	r6, r9, #0, 12
     6f8:	72473265 	subvc	r3, r7, #1342177286	; 0x50000006
     6fc:	66007961 	strvs	r7, [r0], -r1, ror #18
     700:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
     704:	6172675f 	cmnvs	r2, pc, asr r7
     708:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     70c:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     710:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
     714:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     718:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     71c:	69660074 	stmdbvs	r6!, {r2, r4, r5, r6}^
     720:	49346572 	ldmdbmi	r4!, {r1, r4, r5, r6, r8, sl, sp, lr}
     724:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     728:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     72c:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     730:	694c3165 	stmdbvs	ip, {r0, r2, r5, r6, r8, ip, sp}^
     734:	00746867 	rsbseq	r6, r4, r7, ror #16
     738:	73726966 	cmnvc	r2, #1671168	; 0x198000
     73c:	6d695474 	cfstrdvs	mvd5, [r9, #-464]!	; 0xfffffe30
     740:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
     744:	665f7469 	ldrbvs	r7, [pc], -r9, ror #8
     748:	00657269 	rsbeq	r7, r5, r9, ror #4
     74c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     750:	696c5f35 	stmdbvs	ip!, {r0, r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     754:	5f746867 	svcpl	0x00746867
     758:	73746962 	cmnvc	r4, #1605632	; 0x188000
     75c:	72696600 	rsbvc	r6, r9, #0, 12
     760:	616d4965 	cmnvs	sp, r5, ror #18
     764:	00736567 	rsbseq	r6, r3, r7, ror #10
     768:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     76c:	616d4931 	cmnvs	sp, r1, lsr r9
     770:	66006567 	strvs	r6, [r0], -r7, ror #10
     774:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
     778:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     77c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     780:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     784:	72473165 	subvc	r3, r7, #1073741849	; 0x40000019
     788:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     78c:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
     790:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
     794:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     798:	69660074 	stmdbvs	r6!, {r2, r4, r5, r6}^
     79c:	5f336572 	svcpl	0x00336572
     7a0:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     7a4:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     7a8:	66007374 			; <UNDEFINED> instruction: 0x66007374
     7ac:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
     7b0:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     7b4:	69660065 	stmdbvs	r6!, {r0, r2, r5, r6}^
     7b8:	625f6572 	subsvs	r6, pc, #478150656	; 0x1c800000
     7bc:	6b63616c 	blvs	18d8d74 <startup-0x1e72728c>
     7c0:	625f325f 	subsvs	r3, pc, #-268435451	; 0xf0000005
     7c4:	00737469 	rsbseq	r7, r3, r9, ror #8
     7c8:	706d6574 	rsbvc	r6, sp, r4, ror r5
     7cc:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     7d0:	67694c32 			; <UNDEFINED> instruction: 0x67694c32
     7d4:	66007468 	strvs	r7, [r0], -r8, ror #8
     7d8:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
     7dc:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     7e0:	65740065 	ldrbvs	r0, [r4, #-101]!	; 0xffffff9b
     7e4:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     7e8:	4c356572 	cfldr32mi	mvfx6, [r5], #-456	; 0xfffffe38
     7ec:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     7f0:	2f3a4300 	svccs	0x003a4300
     7f4:	2f706f6d 	svccs	0x00706f6d
     7f8:	6f4d2f63 	svcvs	0x004d2f63
     7fc:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     800:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     804:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     808:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     80c:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     810:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     814:	662f432f 	strtvs	r4, [pc], -pc, lsr #6
     818:	2e657269 	cdpcs	2, 6, cr7, cr5, cr9, {3}
     81c:	69660063 	stmdbvs	r6!, {r0, r1, r5, r6}^
     820:	5f336572 	svcpl	0x00336572
     824:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     828:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     82c:	616c0073 	smcvs	49155	; 0xc003
     830:	69527473 	ldmdbvs	r2, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     834:	56746867 	ldrbtpl	r6, [r4], -r7, ror #16
     838:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     83c:	73616c00 	cmnvc	r1, #0, 24
     840:	66654c74 			; <UNDEFINED> instruction: 0x66654c74
     844:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
     848:	43006575 	movwmi	r6, #1397	; 0x575
     84c:	6f6d2f3a 	svcvs	0x006d2f3a
     850:	2f632f70 	svccs	0x00632f70
     854:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     858:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     85c:	6f697461 	svcvs	0x00697461
     860:	2f72656e 	svccs	0x0072656e
     864:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     868:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     86c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     870:	616c702f 	cmnvs	ip, pc, lsr #32
     874:	2e726579 	mrccs	5, 3, r6, cr2, cr9, {3}
     878:	6c700063 	ldclvs	0, cr0, [r0], #-396	; 0xfffffe74
     87c:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
     880:	61647055 	qdsubvs	r7, r5, r4
     884:	74006574 	strvc	r6, [r0], #-1396	; 0xfffffa8c
     888:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     88c:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     890:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     894:	69620074 	stmdbvs	r2!, {r2, r4, r5, r6}^
     898:	5f336472 	svcpl	0x00336472
     89c:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     8a0:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     8a4:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     8a8:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     8ac:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     8b0:	69620065 	stmdbvs	r2!, {r0, r2, r5, r6}^
     8b4:	5f346472 	svcpl	0x00346472
     8b8:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     8bc:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     8c0:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     8c4:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     8c8:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     8cc:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     8d0:	6f700074 	svcvs	0x00700074
     8d4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     8d8:	00343172 	eorseq	r3, r4, r2, ror r1
     8dc:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     8e0:	696c5f35 	stmdbvs	ip!, {r0, r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     8e4:	5f746867 	svcpl	0x00746867
     8e8:	73746962 	cmnvc	r4, #1605632	; 0x188000
     8ec:	72696200 	rsbvc	r6, r9, #0, 4
     8f0:	694c3364 	stmdbvs	ip, {r2, r5, r6, r8, r9, ip, sp}^
     8f4:	00746867 	rsbseq	r6, r4, r7, ror #16
     8f8:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     8fc:	31726574 	cmncc	r2, r4, ror r5
     900:	69620039 	stmdbvs	r2!, {r0, r3, r4, r5}^
     904:	4c316472 	cfldrsmi	mvf6, [r1], #-456	; 0xfffffe38
     908:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     90c:	72696200 	rsbvc	r6, r9, #0, 4
     910:	6c423364 	mcrrvs	3, 6, r3, r2, cr4
     914:	006b6361 	rsbeq	r6, fp, r1, ror #6
     918:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     91c:	61724731 	cmnvs	r2, r1, lsr r7
     920:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     924:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     928:	42346472 	eorsmi	r6, r4, #1912602624	; 0x72000000
     92c:	6b63616c 	blvs	18d8ee4 <startup-0x1e72711c>
     930:	72696200 	rsbvc	r6, r9, #0, 4
     934:	6c423564 	cfstr64vs	mvdx3, [r2], {100}	; 0x64
     938:	006b6361 	rsbeq	r6, fp, r1, ror #6
     93c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     940:	32726574 	rsbscc	r6, r2, #116, 10	; 0x1d000000
     944:	6f700030 	svcvs	0x00700030
     948:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     94c:	00313272 	eorseq	r3, r1, r2, ror r2
     950:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     954:	61724734 	cmnvs	r2, r4, lsr r7
     958:	69620079 	stmdbvs	r2!, {r0, r3, r4, r5, r6}^
     95c:	42326472 	eorsmi	r6, r2, #1912602624	; 0x72000000
     960:	6b63616c 	blvs	18d8f18 <startup-0x1e7270e8>
     964:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     968:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     96c:	70003432 	andvc	r3, r0, r2, lsr r4
     970:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     974:	36317265 	ldrtcc	r7, [r1], -r5, ror #4
     978:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     97c:	72694270 	rsbvc	r4, r9, #112, 4
     980:	72473264 	subvc	r3, r7, #100, 4	; 0x40000006
     984:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     988:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     98c:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     990:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     994:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     998:	72694270 	rsbvc	r4, r9, #112, 4
     99c:	67694c64 	strbvs	r4, [r9, -r4, ror #24]!
     9a0:	74007468 	strvc	r7, [r0], #-1128	; 0xfffffb98
     9a4:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     9a8:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     9ac:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     9b0:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     9b4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     9b8:	62003331 	andvs	r3, r0, #-1006632960	; 0xc4000000
     9bc:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     9c0:	616c625f 	cmnvs	ip, pc, asr r2
     9c4:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
     9c8:	00737469 	rsbseq	r7, r3, r9, ror #8
     9cc:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     9d0:	72675f31 	rsbvc	r5, r7, #49, 30	; 0xc4
     9d4:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     9d8:	00737469 	rsbseq	r7, r3, r9, ror #8
     9dc:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     9e0:	616d4936 	cmnvs	sp, r6, lsr r9
     9e4:	62006567 	andvs	r6, r0, #432013312	; 0x19c00000
     9e8:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     9ec:	616c625f 	cmnvs	ip, pc, asr r2
     9f0:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
     9f4:	00737469 	rsbseq	r7, r3, r9, ror #8
     9f8:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     9fc:	6c625f34 	stclvs	15, cr5, [r2], #-208	; 0xffffff30
     a00:	5f6b6361 	svcpl	0x006b6361
     a04:	73746962 	cmnvc	r4, #1605632	; 0x188000
     a08:	72696200 	rsbvc	r6, r9, #0, 4
     a0c:	6d493364 	stclvs	3, cr3, [r9, #-400]	; 0xfffffe70
     a10:	00656761 	rsbeq	r6, r5, r1, ror #14
     a14:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     a18:	696c5f31 	stmdbvs	ip!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     a1c:	5f746867 	svcpl	0x00746867
     a20:	73746962 	cmnvc	r4, #1605632	; 0x188000
     a24:	72696200 	rsbvc	r6, r9, #0, 4
     a28:	625f3564 	subsvs	r3, pc, #100, 10	; 0x19000000
     a2c:	6b63616c 	blvs	18d8fe4 <startup-0x1e72701c>
     a30:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     a34:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     a38:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     a3c:	4c336472 	cfldrsmi	mvf6, [r3], #-456	; 0xfffffe38
     a40:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     a44:	72696200 	rsbvc	r6, r9, #0, 4
     a48:	675f3564 	ldrbvs	r3, [pc, -r4, ror #10]
     a4c:	5f796172 	svcpl	0x00796172
     a50:	73746962 	cmnvc	r4, #1605632	; 0x188000
     a54:	72696200 	rsbvc	r6, r9, #0, 4
     a58:	72473264 	subvc	r3, r7, #100, 4	; 0x40000006
     a5c:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     a60:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     a64:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     a68:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     a6c:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
     a70:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     a74:	47336472 			; <UNDEFINED> instruction: 0x47336472
     a78:	00796172 	rsbseq	r6, r9, r2, ror r1
     a7c:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     a80:	72675f34 	rsbvc	r5, r7, #52, 30	; 0xd0
     a84:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     a88:	00737469 	rsbseq	r7, r3, r9, ror #8
     a8c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     a90:	32726574 	rsbscc	r6, r2, #116, 10	; 0x1d000000
     a94:	69620033 	stmdbvs	r2!, {r0, r1, r4, r5}^
     a98:	4c356472 	cfldrsmi	mvf6, [r5], #-456	; 0xfffffe38
     a9c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     aa0:	72696200 	rsbvc	r6, r9, #0, 4
     aa4:	616d4964 	cmnvs	sp, r4, ror #18
     aa8:	00736567 	rsbseq	r6, r3, r7, ror #10
     aac:	706d6574 	rsbvc	r6, sp, r4, ror r5
     ab0:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     ab4:	616c4235 	cmnvs	ip, r5, lsr r2
     ab8:	62006b63 	andvs	r6, r0, #101376	; 0x18c00
     abc:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     ac0:	63616c42 	cmnvs	r1, #16896	; 0x4200
     ac4:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
     ac8:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     acc:	42326472 	eorsmi	r6, r2, #1912602624	; 0x72000000
     ad0:	6b63616c 	blvs	18d9088 <startup-0x1e726f78>
     ad4:	72696200 	rsbvc	r6, r9, #0, 4
     ad8:	675f3364 	ldrbvs	r3, [pc, -r4, ror #6]
     adc:	5f796172 	svcpl	0x00796172
     ae0:	73746962 	cmnvc	r4, #1605632	; 0x188000
     ae4:	72696200 	rsbvc	r6, r9, #0, 4
     ae8:	6c423164 	stfvse	f3, [r2], {100}	; 0x64
     aec:	006b6361 	rsbeq	r6, fp, r1, ror #6
     af0:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     af4:	67694c32 			; <UNDEFINED> instruction: 0x67694c32
     af8:	43007468 	movwmi	r7, #1128	; 0x468
     afc:	6f6d2f3a 	svcvs	0x006d2f3a
     b00:	2f632f70 	svccs	0x00632f70
     b04:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     b08:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     b0c:	6f697461 	svcvs	0x00697461
     b10:	2f72656e 	svccs	0x0072656e
     b14:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     b18:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     b1c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     b20:	7269622f 	rsbvc	r6, r9, #-268435454	; 0xf0000002
     b24:	00632e64 	rsbeq	r2, r3, r4, ror #28
     b28:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     b2c:	7269625f 	rsbvc	r6, r9, #-268435451	; 0xf0000005
     b30:	69620064 	stmdbvs	r2!, {r2, r5, r6}^
     b34:	624f6472 	subvs	r6, pc, #1912602624	; 0x72000000
     b38:	6962006a 	stmdbvs	r2!, {r1, r3, r5, r6}^
     b3c:	5f326472 	svcpl	0x00326472
     b40:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     b44:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     b48:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     b4c:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     b50:	72476472 	subvc	r6, r7, #1912602624	; 0x72000000
     b54:	62007961 	andvs	r7, r0, #1589248	; 0x184000
     b58:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     b5c:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     b60:	72696200 	rsbvc	r6, r9, #0, 4
     b64:	625f3164 	subsvs	r3, pc, #100, 2
     b68:	6b63616c 	blvs	18d9120 <startup-0x1e726ee0>
     b6c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     b70:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
     b74:	49316472 	ldmdbmi	r1!, {r1, r4, r5, r6, sl, sp, lr}
     b78:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     b7c:	72696200 	rsbvc	r6, r9, #0, 4
     b80:	72473364 	subvc	r3, r7, #100, 6	; 0x90000001
     b84:	66007961 	strvs	r7, [r0], -r1, ror #18
     b88:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
     b8c:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
     b90:	00726574 	rsbseq	r6, r2, r4, ror r5
     b94:	706d6574 	rsbvc	r6, sp, r4, ror r5
     b98:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     b9c:	63616c42 	cmnvs	r1, #16896	; 0x4200
     ba0:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
     ba4:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     ba8:	42336472 	eorsmi	r6, r3, #1912602624	; 0x72000000
     bac:	6b63616c 	blvs	18d9164 <startup-0x1e726e9c>
     bb0:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     bb4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     bb8:	70003131 	andvc	r3, r0, r1, lsr r1
     bbc:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     bc0:	32317265 	eorscc	r7, r1, #1342177286	; 0x50000006
     bc4:	72696200 	rsbvc	r6, r9, #0, 4
     bc8:	694c3464 	stmdbvs	ip, {r2, r5, r6, sl, ip, sp}^
     bcc:	00746867 	rsbseq	r6, r4, r7, ror #16
     bd0:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     bd4:	616d4935 	cmnvs	sp, r5, lsr r9
     bd8:	70006567 	andvc	r6, r0, r7, ror #10
     bdc:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     be0:	35317265 	ldrcc	r7, [r1, #-613]!	; 0xfffffd9b
     be4:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     be8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     bec:	70003731 	andvc	r3, r0, r1, lsr r7
     bf0:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     bf4:	38317265 	ldmdacc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
     bf8:	72696200 	rsbvc	r6, r9, #0, 4
     bfc:	6d493264 	sfmvs	f3, 2, [r9, #-400]	; 0xfffffe70
     c00:	00656761 	rsbeq	r6, r5, r1, ror #14
     c04:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     c08:	32726574 	rsbscc	r6, r2, #116, 10	; 0x1d000000
     c0c:	69620032 	stmdbvs	r2!, {r1, r4, r5}^
     c10:	5f326472 	svcpl	0x00326472
     c14:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     c18:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     c1c:	70007374 	andvc	r7, r0, r4, ror r3
     c20:	00656761 	rsbeq	r6, r5, r1, ror #14
     c24:	70617267 	rsbvc	r7, r1, r7, ror #4
     c28:	5f636968 	svcpl	0x00636968
     c2c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
     c30:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
     c34:	00726566 	rsbseq	r6, r2, r6, ror #10
     c38:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
     c3c:	69700065 	ldmdbvs	r0!, {r0, r2, r5, r6}^
     c40:	326c6578 	rsbcc	r6, ip, #120, 10	; 0x1e000000
     c44:	61726400 	cmnvs	r2, r0, lsl #8
     c48:	61675f77 	smcvs	30199	; 0x75f7
     c4c:	6f5f656d 	svcvs	0x005f656d
     c50:	63656a62 	cmnvs	r5, #401408	; 0x62000
     c54:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
     c58:	5f79616c 	svcpl	0x0079616c
     c5c:	7263696d 	rsbvc	r6, r3, #1785856	; 0x1b4000
     c60:	7267006f 	rsbvc	r0, r7, #111	; 0x6f
     c64:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
     c68:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
     c6c:	5f657469 	svcpl	0x00657469
     c70:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
     c74:	00646e61 	rsbeq	r6, r4, r1, ror #28
     c78:	61656c63 	cmnvs	r5, r3, ror #24
     c7c:	61625f72 	smcvs	9714	; 0x25f2
     c80:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
     c84:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     c88:	78697000 	stmdavc	r9!, {ip, sp, lr}^
     c8c:	67006c65 	strvs	r6, [r0, -r5, ror #24]
     c90:	006a624f 	rsbeq	r6, sl, pc, asr #4
     c94:	70617267 	rsbvc	r7, r1, r7, ror #4
     c98:	5f636968 	svcpl	0x00636968
     c9c:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
     ca0:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
     ca4:	006e6565 	rsbeq	r6, lr, r5, ror #10
     ca8:	616c6564 	cmnvs	ip, r4, ror #10
     cac:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     cb0:	00696c6c 	rsbeq	r6, r9, ip, ror #24
     cb4:	776f6873 			; <UNDEFINED> instruction: 0x776f6873
     cb8:	6172665f 	cmnvs	r2, pc, asr r6
     cbc:	6400656d 	strvs	r6, [r0], #-1389	; 0xfffffa93
     cc0:	5f776172 	svcpl	0x00776172
     cc4:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     cc8:	64006574 	strvs	r6, [r0], #-1396	; 0xfffffa8c
     ccc:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     cd0:	3030355f 	eorscc	r3, r0, pc, asr r5
     cd4:	6700736e 	strvs	r7, [r0, -lr, ror #6]
     cd8:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
     cdc:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
     ce0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     ce4:	61726700 	cmnvs	r2, r0, lsl #14
     ce8:	61635379 	smcvs	13625	; 0x3539
     cec:	6554656c 	ldrbvs	r6, [r4, #-1388]	; 0xfffffa94
     cf0:	67007473 	smlsdxvs	r0, r3, r4, r7
     cf4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
     cf8:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
     cfc:	5f6c7274 	svcpl	0x006c7274
     d00:	5f746962 	svcpl	0x00746962
     d04:	61656c63 	cmnvs	r5, r3, ror #24
     d08:	3a430072 	bcc	10c0ed8 <startup-0x1ef3f128>
     d0c:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     d10:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; c5c <startup-0x1ffff3a4>
     d14:	616c706f 	cmnvs	ip, pc, rrx
     d18:	61726f62 	cmnvs	r2, r2, ror #30
     d1c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     d20:	442f7265 	strtmi	r7, [pc], #-613	; d28 <startup-0x1ffff2d8>
     d24:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     d28:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     d2c:	2f432f68 	svccs	0x00432f68
     d30:	70617267 	rsbvc	r7, r1, r7, ror #4
     d34:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
     d38:	6700632e 	strvs	r6, [r0, -lr, lsr #6]
     d3c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
     d40:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
     d44:	5f646165 	svcpl	0x00646165
     d48:	61746164 	cmnvs	r4, r4, ror #2
     d4c:	6c6f6300 	stclvs	3, cr6, [pc], #-0	; d54 <startup-0x1ffff2ac>
     d50:	7300726f 	movwvc	r7, #623	; 0x26f
     d54:	755f7465 	ldrbvc	r7, [pc, #-1125]	; 8f7 <startup-0x1ffff709>
     d58:	72645f70 	rsbvc	r5, r4, #112, 30	; 0x1c0
     d5c:	625f7761 	subsvs	r7, pc, #25427968	; 0x1840000
     d60:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     d64:	67007372 	smlsdxvs	r0, r2, r3, r7
     d68:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
     d6c:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
     d70:	5f6c7274 	svcpl	0x006c7274
     d74:	5f746962 	svcpl	0x00746962
     d78:	00746573 	rsbseq	r6, r4, r3, ror r5
     d7c:	616c6564 	cmnvs	ip, r4, ror #10
     d80:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
     d84:	00736e30 	rsbseq	r6, r3, r0, lsr lr
     d88:	6c6c6966 			; <UNDEFINED> instruction: 0x6c6c6966
     d8c:	74636552 	strbtvc	r6, [r3], #-1362	; 0xfffffaae
     d90:	6c676e61 	stclvs	14, cr6, [r7], #-388	; 0xfffffe7c
     d94:	616d0065 	cmnvs	sp, r5, rrx
     d98:	66006b73 			; <UNDEFINED> instruction: 0x66006b73
     d9c:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
     da0:	6e656c5f 	mcrvs	12, 3, r6, cr5, cr15, {2}
     da4:	00687467 	rsbeq	r7, r8, r7, ror #8
     da8:	70617267 	rsbvc	r7, r1, r7, ror #4
     dac:	5f636968 	svcpl	0x00636968
     db0:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
     db4:	61645f65 	cmnvs	r4, r5, ror #30
     db8:	62006174 	andvs	r6, r0, #116, 2
     dbc:	00657479 	rsbeq	r7, r5, r9, ror r4
     dc0:	74646977 	strbtvc	r6, [r4], #-2423	; 0xfffff689
     dc4:	6e695f68 	cdpvs	15, 6, cr5, cr9, cr8, {3}
     dc8:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
     dcc:	63007365 	movwvs	r7, #869	; 0x365
     dd0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     dd4:	6c6c615f 	stfvse	f6, [ip], #-380	; 0xfffffe84
     dd8:	6361625f 	cmnvs	r1, #-268435451	; 0xf0000005
     ddc:	6675426b 	ldrbtvs	r4, [r5], -fp, ror #4
     de0:	73726566 	cmnvc	r2, #427819008	; 0x19800000
     de4:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
     de8:	65527261 	ldrbvs	r7, [r2, #-609]	; 0xfffffd9f
     dec:	6e617463 	cdpvs	4, 6, cr7, cr1, cr3, {3}
     df0:	00656c67 	rsbeq	r6, r5, r7, ror #24
     df4:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
     df8:	65730078 	ldrbvs	r0, [r3, #-120]!	; 0xffffff88
     dfc:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
     e00:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
     e04:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; c3c <startup-0x1ffff3c4>
     e08:	0072656c 	rsbseq	r6, r2, ip, ror #10
     e0c:	70617267 	rsbvc	r7, r1, r7, ror #4
     e10:	5f636968 	svcpl	0x00636968
     e14:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
     e18:	6165725f 	cmnvs	r5, pc, asr r2
     e1c:	63007964 	movwvs	r7, #2404	; 0x964
     e20:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     e24:	6968745f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
     e28:	63614273 	cmnvs	r1, #805306375	; 0x30000007
     e2c:	6675426b 	ldrbtvs	r4, [r5], -fp, ror #4
     e30:	00726566 	rsbseq	r6, r2, r6, ror #10
     e34:	70617267 	rsbvc	r7, r1, r7, ror #4
     e38:	5f636968 	svcpl	0x00636968
     e3c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     e40:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
     e44:	6700657a 	smlsdxvs	r0, sl, r5, r6
     e48:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
     e4c:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
     e50:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     e54:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
     e58:	006e6565 	rsbeq	r6, lr, r5, ror #10
     e5c:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
     e60:	616d695f 	cmnvs	sp, pc, asr r9
     e64:	43006567 	movwmi	r6, #1383	; 0x567
     e68:	6f6d2f3a 	svcvs	0x006d2f3a
     e6c:	2f632f70 	svccs	0x00632f70
     e70:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     e74:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     e78:	6f697461 	svcvs	0x00697461
     e7c:	2f72656e 	svccs	0x0072656e
     e80:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     e84:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     e88:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     e8c:	616d692f 	cmnvs	sp, pc, lsr #18
     e90:	632e6567 			; <UNDEFINED> instruction: 0x632e6567
     e94:	616f6c00 	cmnvs	pc, r0, lsl #24
     e98:	70735f64 	rsbsvc	r5, r3, r4, ror #30
     e9c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     ea0:	2f3a4300 	svccs	0x003a4300
     ea4:	2f706f6d 	svccs	0x00706f6d
     ea8:	6f4d2f63 	svcvs	0x004d2f63
     eac:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     eb0:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     eb4:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     eb8:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     ebc:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     ec0:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     ec4:	732f432f 			; <UNDEFINED> instruction: 0x732f432f
     ec8:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
     ecc:	00632e65 	rsbeq	r2, r3, r5, ror #28
     ed0:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     ed4:	65730072 	ldrbvs	r0, [r3, #-114]!	; 0xffffff8e
     ed8:	70755f74 	rsbsvc	r5, r5, r4, ror pc
     edc:	4c49445f 	cfstrdmi	mvd4, [r9], {95}	; 0x5f
     ee0:	72646f00 	rsbvc	r6, r4, #0, 30
     ee4:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
     ee8:	79546f00 	ldmdbvc	r4, {r8, r9, sl, fp, sp, lr}^
     eec:	00726570 	rsbseq	r6, r2, r0, ror r5
     ef0:	4f495047 	svcmi	0x00495047
     ef4:	50755000 	rsbspl	r5, r5, r0
     ef8:	69007264 	stmdbvs	r0, {r2, r5, r6, r9, ip, sp, lr}
     efc:	65527264 	ldrbvs	r7, [r2, #-612]	; 0xfffffd9c
     f00:	76726573 			; <UNDEFINED> instruction: 0x76726573
     f04:	43006465 	movwmi	r6, #1125	; 0x465
     f08:	6f6d2f3a 	svcvs	0x006d2f3a
     f0c:	2f632f70 	svccs	0x00632f70
     f10:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     f14:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     f18:	6f697461 	svcvs	0x00697461
     f1c:	2f72656e 	svccs	0x0072656e
     f20:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     f24:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     f28:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     f2c:	6970672f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}^
     f30:	00632e6f 	rsbeq	r2, r3, pc, ror #28
     f34:	6552746f 	ldrbvs	r7, [r2, #-1135]	; 0xfffffb91
     f38:	76726573 			; <UNDEFINED> instruction: 0x76726573
     f3c:	72006465 	andvc	r6, r0, #1694498816	; 0x65000000
     f40:	5f646165 	svcpl	0x00646165
     f44:	5f4c4944 	svcpl	0x004c4944
     f48:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
     f4c:	6f00656c 	svcvs	0x0000656c
     f50:	6f4c7264 	svcvs	0x004c7264
     f54:	536f0077 	cmnpl	pc, #119	; 0x77
     f58:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     f5c:	64690072 	strbtvs	r0, [r9], #-114	; 0xffffff8e
     f60:	67694872 			; <UNDEFINED> instruction: 0x67694872
     f64:	64690068 	strbtvs	r0, [r9], #-104	; 0xffffff98
     f68:	776f4c72 			; <UNDEFINED> instruction: 0x776f4c72
     f6c:	72646f00 	rsbvc	r6, r4, #0, 30
     f70:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
     f74:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
     f78:	61657200 	cmnvs	r5, r0, lsl #4
     f7c:	49445f64 	stmdbmi	r4, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     f80:	6e69004c 	cdpvs	0, 6, cr0, cr9, cr12, {2}
     f84:	615f7469 	cmpvs	pc, r9, ror #8
     f88:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
     f8c:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
     f90:	6c006e6f 	stcvs	14, cr6, [r0], {111}	; 0x6f
     f94:	74696d69 	strbtvc	r6, [r9], #-3433	; 0xfffff297
     f98:	73610032 	cmnvc	r1, #50	; 0x32
     f9c:	5f696963 	svcpl	0x00696963
     fa0:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
     fa4:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
     fa8:	65730061 	ldrbvs	r0, [r3, #-97]!	; 0xffffff9f
     fac:	70755f74 	rsbsvc	r5, r5, r4, ror pc
     fb0:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
     fb4:	61006969 	tstvs	r0, r9, ror #18
     fb8:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     fbc:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
     fc0:	6f630074 	svcvs	0x00630074
     fc4:	6e6d756c 	cdpvs	5, 6, cr7, cr13, cr12, {3}
     fc8:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
     fcc:	615f7261 	cmpvs	pc, r1, ror #4
     fd0:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     fd4:	63736100 	cmnvs	r3, #0, 2
     fd8:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
     fdc:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     fe0:	7261705f 	rsbvc	r7, r1, #95	; 0x5f
     fe4:	73610074 	cmnvc	r1, #116	; 0x74
     fe8:	5f696963 	svcpl	0x00696963
     fec:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
     ff0:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
     ff4:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; e2c <startup-0x1ffff1d4>
     ff8:	0072656c 	rsbseq	r6, r2, ip, ror #10
     ffc:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1000:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
    1004:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
    1008:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
    100c:	61007465 	tstvs	r0, r5, ror #8
    1010:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1014:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    1018:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
    101c:	7400646d 	strvc	r6, [r0], #-1133	; 0xfffffb93
    1020:	31747365 	cmncc	r4, r5, ror #6
    1024:	73657400 	cmnvc	r5, #0, 8
    1028:	61003274 	tstvs	r0, r4, ror r2
    102c:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    1030:	61007373 	tstvs	r0, r3, ror r3
    1034:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1038:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    103c:	645f6574 	ldrbvs	r6, [pc], #-1396	; 1044 <startup-0x1fffefbc>
    1040:	00617461 	rsbeq	r7, r1, r1, ror #8
    1044:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1048:	65745f69 	ldrbvs	r5, [r4, #-3945]!	; 0xfffff097
    104c:	61007473 	tstvs	r0, r3, ror r4
    1050:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1054:	6165725f 	cmnvs	r5, pc, asr r2
    1058:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xfffff09c
    105c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1060:	63736100 	cmnvs	r3, #0, 2
    1064:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
    1068:	5f6c7274 	svcpl	0x006c7274
    106c:	5f746962 	svcpl	0x00746962
    1070:	61656c63 	cmnvs	r5, r3, ror #24
    1074:	73610072 	cmnvc	r1, #114	; 0x72
    1078:	5f696963 	svcpl	0x00696963
    107c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    1080:	73610065 	cmnvc	r1, #101	; 0x65
    1084:	5f696963 	svcpl	0x00696963
    1088:	6f546f67 	svcvs	0x00546f67
    108c:	61005958 	tstvs	r0, r8, asr r9
    1090:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1094:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    1098:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
    109c:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    10a0:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
    10a4:	73610072 	cmnvc	r1, #114	; 0x72
    10a8:	5f696963 	svcpl	0x00696963
    10ac:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    10b0:	68635f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    10b4:	6c007261 	sfmvs	f7, 4, [r0], {97}	; 0x61
    10b8:	74696d69 	strbtvc	r6, [r9], #-3433	; 0xfffff297
    10bc:	3a430031 	bcc	10c1188 <startup-0x1ef3ee78>
    10c0:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
    10c4:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 1010 <startup-0x1fffeff0>
    10c8:	616c706f 	cmnvs	ip, pc, rrx
    10cc:	61726f62 	cmnvs	r2, r2, ror #30
    10d0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    10d4:	442f7265 	strtmi	r7, [pc], #-613	; 10dc <startup-0x1fffef24>
    10d8:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
    10dc:	63746957 	cmnvs	r4, #1425408	; 0x15c000
    10e0:	2f432f68 	svccs	0x00432f68
    10e4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    10e8:	69645f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    10ec:	616c7073 	smcvs	50947	; 0xc703
    10f0:	00632e79 	rsbeq	r2, r3, r9, ror lr
    10f4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    10f8:	6f6c735f 	svcvs	0x006c735f
    10fc:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
    1100:	6c007478 	cfstrsvs	mvf7, [r0], {120}	; 0x78
    1104:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
    1108:	666f5f68 	strbtvs	r5, [pc], -r8, ror #30
    110c:	776f725f 			; <UNDEFINED> instruction: 0x776f725f
    1110:	3a430031 	bcc	10c11dc <startup-0x1ef3ee24>
    1114:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
    1118:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 1064 <startup-0x1fffef9c>
    111c:	616c706f 	cmnvs	ip, pc, rrx
    1120:	61726f62 	cmnvs	r2, r2, ror #30
    1124:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1128:	442f7265 	strtmi	r7, [pc], #-613	; 1130 <startup-0x1fffeed0>
    112c:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
    1130:	63746957 	cmnvs	r4, #1425408	; 0x15c000
    1134:	2f432f68 	svccs	0x00432f68
    1138:	776f6c73 			; <UNDEFINED> instruction: 0x776f6c73
    113c:	7865745f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
    1140:	00632e74 	rsbeq	r2, r3, r4, ror lr

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000024 	andeq	r0, r0, r4, lsr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000034 	andcs	r0, r0, r4, lsr r0
  48:	00000164 	andeq	r0, r0, r4, ror #2
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	300e4101 	andcc	r4, lr, r1, lsl #2
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	00000020 	andeq	r0, r0, r0, lsr #32
  60:	00000000 	andeq	r0, r0, r0
  64:	20000198 	mulcs	r0, r8, r1
  68:	0000081c 	andeq	r0, r0, ip, lsl r8
  6c:	400c0e41 	andmi	r0, ip, r1, asr #28
  70:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  74:	018e4002 	orreq	r4, lr, r2
  78:	05800e42 	streq	r0, [r0, #3650]	; 0xe42
  7c:	00070d41 	andeq	r0, r7, r1, asr #26
  80:	0000000c 	andeq	r0, r0, ip
  84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  88:	7c020001 	stcvc	0, cr0, [r2], {1}
  8c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000080 	andeq	r0, r0, r0, lsl #1
  98:	200009b4 			; <UNDEFINED> instruction: 0x200009b4
  9c:	00000010 	andeq	r0, r0, r0, lsl r0
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	100e4101 	andne	r4, lr, r1, lsl #2
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000080 	andeq	r0, r0, r0, lsl #1
  b8:	200009c4 	andcs	r0, r0, r4, asr #19
  bc:	00000046 	andeq	r0, r0, r6, asr #32
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	100e4101 	andne	r4, lr, r1, lsl #2
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000000c 	andeq	r0, r0, ip
  d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  d8:	7c020001 	stcvc	0, cr0, [r2], {1}
  dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  e8:	20000a0c 	andcs	r0, r0, ip, lsl #20
  ec:	00000184 	andeq	r0, r0, r4, lsl #3
  f0:	40080e41 	andmi	r0, r8, r1, asr #28
  f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f8:	380e4101 	stmdacc	lr, {r0, r8, lr}
  fc:	00070d41 	andeq	r0, r7, r1, asr #26
 100:	00000020 	andeq	r0, r0, r0, lsr #32
 104:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 108:	20000b90 	mulcs	r0, r0, fp
 10c:	00000124 	andeq	r0, r0, r4, lsr #2
 110:	400c0e41 	andmi	r0, ip, r1, asr #28
 114:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 118:	018e4002 	orreq	r4, lr, r2
 11c:	41180e41 	tstmi	r8, r1, asr #28
 120:	0000070d 	andeq	r0, r0, sp, lsl #14
 124:	0000000c 	andeq	r0, r0, ip
 128:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 12c:	7c020001 	stcvc	0, cr0, [r2], {1}
 130:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 134:	0000001c 	andeq	r0, r0, ip, lsl r0
 138:	00000124 	andeq	r0, r0, r4, lsr #2
 13c:	20000cb4 			; <UNDEFINED> instruction: 0x20000cb4
 140:	000000d8 	ldrdeq	r0, [r0], -r8
 144:	40080e41 	andmi	r0, r8, r1, asr #28
 148:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 14c:	100e4101 	andne	r4, lr, r1, lsl #2
 150:	00070d41 	andeq	r0, r7, r1, asr #26
 154:	0000000c 	andeq	r0, r0, ip
 158:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 15c:	7c020001 	stcvc	0, cr0, [r2], {1}
 160:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 164:	0000001c 	andeq	r0, r0, ip, lsl r0
 168:	00000154 	andeq	r0, r0, r4, asr r1
 16c:	20000d8c 	andcs	r0, r0, ip, lsl #27
 170:	0000020c 	andeq	r0, r0, ip, lsl #4
 174:	40080e41 	andmi	r0, r8, r1, asr #28
 178:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 17c:	480e4101 	stmdami	lr, {r0, r8, lr}
 180:	00070d41 	andeq	r0, r7, r1, asr #26
 184:	00000020 	andeq	r0, r0, r0, lsr #32
 188:	00000154 	andeq	r0, r0, r4, asr r1
 18c:	20000f98 	mulcs	r0, r8, pc	; <UNPREDICTABLE>
 190:	00000158 	andeq	r0, r0, r8, asr r1
 194:	400c0e41 	andmi	r0, ip, r1, asr #28
 198:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 19c:	018e4002 	orreq	r4, lr, r2
 1a0:	41180e41 	tstmi	r8, r1, asr #28
 1a4:	0000070d 	andeq	r0, r0, sp, lsl #14
 1a8:	0000000c 	andeq	r0, r0, ip
 1ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1b0:	7c020001 	stcvc	0, cr0, [r2], {1}
 1b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1b8:	00000018 	andeq	r0, r0, r8, lsl r0
 1bc:	000001a8 	andeq	r0, r0, r8, lsr #3
 1c0:	200010f0 	strdcs	r1, [r0], -r0
 1c4:	00000044 	andeq	r0, r0, r4, asr #32
 1c8:	40080e41 	andmi	r0, r8, r1, asr #28
 1cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1d4:	00000018 	andeq	r0, r0, r8, lsl r0
 1d8:	000001a8 	andeq	r0, r0, r8, lsr #3
 1dc:	20001134 	andcs	r1, r0, r4, lsr r1
 1e0:	00000044 	andeq	r0, r0, r4, asr #32
 1e4:	40080e41 	andmi	r0, r8, r1, asr #28
 1e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ec:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	000001a8 	andeq	r0, r0, r8, lsr #3
 1f8:	20001178 	andcs	r1, r0, r8, ror r1
 1fc:	0000002c 	andeq	r0, r0, ip, lsr #32
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	100e4101 	andne	r4, lr, r1, lsl #2
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	0000001c 	andeq	r0, r0, ip, lsl r0
 214:	000001a8 	andeq	r0, r0, r8, lsr #3
 218:	200011a4 	andcs	r1, r0, r4, lsr #3
 21c:	00000026 	andeq	r0, r0, r6, lsr #32
 220:	40080e41 	andmi	r0, r8, r1, asr #28
 224:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 228:	100e4101 	andne	r4, lr, r1, lsl #2
 22c:	00070d41 	andeq	r0, r7, r1, asr #26
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	000001a8 	andeq	r0, r0, r8, lsr #3
 238:	200011ca 	andcs	r1, r0, sl, asr #3
 23c:	00000032 	andeq	r0, r0, r2, lsr r0
 240:	40080e41 	andmi	r0, r8, r1, asr #28
 244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 248:	180e4101 	stmdane	lr, {r0, r8, lr}
 24c:	00070d41 	andeq	r0, r7, r1, asr #26
 250:	00000018 	andeq	r0, r0, r8, lsl r0
 254:	000001a8 	andeq	r0, r0, r8, lsr #3
 258:	200011fc 	strdcs	r1, [r0], -ip
 25c:	00000018 	andeq	r0, r0, r8, lsl r0
 260:	40080e41 	andmi	r0, r8, r1, asr #28
 264:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 268:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 26c:	00000018 	andeq	r0, r0, r8, lsl r0
 270:	000001a8 	andeq	r0, r0, r8, lsr #3
 274:	20001214 	andcs	r1, r0, r4, lsl r2
 278:	00000030 	andeq	r0, r0, r0, lsr r0
 27c:	40080e41 	andmi	r0, r8, r1, asr #28
 280:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 284:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 288:	0000001c 	andeq	r0, r0, ip, lsl r0
 28c:	000001a8 	andeq	r0, r0, r8, lsr #3
 290:	20001244 	andcs	r1, r0, r4, asr #4
 294:	00000050 	andeq	r0, r0, r0, asr r0
 298:	40080e41 	andmi	r0, r8, r1, asr #28
 29c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a0:	180e4101 	stmdane	lr, {r0, r8, lr}
 2a4:	00070d41 	andeq	r0, r7, r1, asr #26
 2a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2ac:	000001a8 	andeq	r0, r0, r8, lsr #3
 2b0:	20001294 	mulcs	r0, r4, r2
 2b4:	00000058 	andeq	r0, r0, r8, asr r0
 2b8:	40080e41 	andmi	r0, r8, r1, asr #28
 2bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2c0:	180e4101 	stmdane	lr, {r0, r8, lr}
 2c4:	00070d41 	andeq	r0, r7, r1, asr #26
 2c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2cc:	000001a8 	andeq	r0, r0, r8, lsr #3
 2d0:	200012ec 	andcs	r1, r0, ip, ror #5
 2d4:	00000066 	andeq	r0, r0, r6, rrx
 2d8:	40080e41 	andmi	r0, r8, r1, asr #28
 2dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e0:	100e4101 	andne	r4, lr, r1, lsl #2
 2e4:	00070d41 	andeq	r0, r7, r1, asr #26
 2e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2ec:	000001a8 	andeq	r0, r0, r8, lsr #3
 2f0:	20001352 	andcs	r1, r0, r2, asr r3
 2f4:	0000006e 	andeq	r0, r0, lr, rrx
 2f8:	40080e41 	andmi	r0, r8, r1, asr #28
 2fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 300:	100e4101 	andne	r4, lr, r1, lsl #2
 304:	00070d41 	andeq	r0, r7, r1, asr #26
 308:	0000001c 	andeq	r0, r0, ip, lsl r0
 30c:	000001a8 	andeq	r0, r0, r8, lsr #3
 310:	200013c0 	andcs	r1, r0, r0, asr #7
 314:	00000094 	muleq	r0, r4, r0
 318:	40080e41 	andmi	r0, r8, r1, asr #28
 31c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 320:	180e4101 	stmdane	lr, {r0, r8, lr}
 324:	00070d41 	andeq	r0, r7, r1, asr #26
 328:	0000001c 	andeq	r0, r0, ip, lsl r0
 32c:	000001a8 	andeq	r0, r0, r8, lsr #3
 330:	20001454 	andcs	r1, r0, r4, asr r4
 334:	0000002a 	andeq	r0, r0, sl, lsr #32
 338:	40080e41 	andmi	r0, r8, r1, asr #28
 33c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 340:	100e4101 	andne	r4, lr, r1, lsl #2
 344:	00070d41 	andeq	r0, r7, r1, asr #26
 348:	0000001c 	andeq	r0, r0, ip, lsl r0
 34c:	000001a8 	andeq	r0, r0, r8, lsr #3
 350:	2000147e 	andcs	r1, r0, lr, ror r4
 354:	0000007e 	andeq	r0, r0, lr, ror r0
 358:	40080e41 	andmi	r0, r8, r1, asr #28
 35c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 360:	100e4101 	andne	r4, lr, r1, lsl #2
 364:	00070d41 	andeq	r0, r7, r1, asr #26
 368:	0000001c 	andeq	r0, r0, ip, lsl r0
 36c:	000001a8 	andeq	r0, r0, r8, lsr #3
 370:	200014fc 	strdcs	r1, [r0], -ip
 374:	00000046 	andeq	r0, r0, r6, asr #32
 378:	40080e41 	andmi	r0, r8, r1, asr #28
 37c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 380:	100e4101 	andne	r4, lr, r1, lsl #2
 384:	00070d41 	andeq	r0, r7, r1, asr #26
 388:	0000001c 	andeq	r0, r0, ip, lsl r0
 38c:	000001a8 	andeq	r0, r0, r8, lsr #3
 390:	20001542 	andcs	r1, r0, r2, asr #10
 394:	00000046 	andeq	r0, r0, r6, asr #32
 398:	40080e41 	andmi	r0, r8, r1, asr #28
 39c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3a0:	100e4101 	andne	r4, lr, r1, lsl #2
 3a4:	00070d41 	andeq	r0, r7, r1, asr #26
 3a8:	00000018 	andeq	r0, r0, r8, lsl r0
 3ac:	000001a8 	andeq	r0, r0, r8, lsr #3
 3b0:	20001588 	andcs	r1, r0, r8, lsl #11
 3b4:	0000006e 	andeq	r0, r0, lr, rrx
 3b8:	40080e41 	andmi	r0, r8, r1, asr #28
 3bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3c0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 3c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c8:	000001a8 	andeq	r0, r0, r8, lsr #3
 3cc:	200015f6 	strdcs	r1, [r0], -r6
 3d0:	00000066 	andeq	r0, r0, r6, rrx
 3d4:	40080e41 	andmi	r0, r8, r1, asr #28
 3d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3dc:	100e4101 	andne	r4, lr, r1, lsl #2
 3e0:	00070d41 	andeq	r0, r7, r1, asr #26
 3e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e8:	000001a8 	andeq	r0, r0, r8, lsr #3
 3ec:	2000165c 	andcs	r1, r0, ip, asr r6
 3f0:	00000180 	andeq	r0, r0, r0, lsl #3
 3f4:	40080e41 	andmi	r0, r8, r1, asr #28
 3f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3fc:	200e4101 	andcs	r4, lr, r1, lsl #2
 400:	00070d41 	andeq	r0, r7, r1, asr #26
 404:	0000001c 	andeq	r0, r0, ip, lsl r0
 408:	000001a8 	andeq	r0, r0, r8, lsr #3
 40c:	200017dc 	ldrdcs	r1, [r0], -ip
 410:	000001a0 	andeq	r0, r0, r0, lsr #3
 414:	40080e41 	andmi	r0, r8, r1, asr #28
 418:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 41c:	280e4101 	stmdacs	lr, {r0, r8, lr}
 420:	00070d41 	andeq	r0, r7, r1, asr #26
 424:	0000001c 	andeq	r0, r0, ip, lsl r0
 428:	000001a8 	andeq	r0, r0, r8, lsr #3
 42c:	2000197c 	andcs	r1, r0, ip, ror r9
 430:	000000d6 	ldrdeq	r0, [r0], -r6
 434:	40080e41 	andmi	r0, r8, r1, asr #28
 438:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 43c:	200e4101 	andcs	r4, lr, r1, lsl #2
 440:	00070d41 	andeq	r0, r7, r1, asr #26
 444:	00000024 	andeq	r0, r0, r4, lsr #32
 448:	000001a8 	andeq	r0, r0, r8, lsr #3
 44c:	20001a52 	andcs	r1, r0, r2, asr sl
 450:	0000011a 	andeq	r0, r0, sl, lsl r1
 454:	40100e41 	andsmi	r0, r0, r1, asr #28
 458:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 45c:	02874003 	addeq	r4, r7, #3
 460:	41018e40 	tstmi	r1, r0, asr #28
 464:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 468:	00000007 	andeq	r0, r0, r7
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	000001a8 	andeq	r0, r0, r8, lsr #3
 474:	20001b6c 	andcs	r1, r0, ip, ror #22
 478:	00000052 	andeq	r0, r0, r2, asr r0
 47c:	40080e41 	andmi	r0, r8, r1, asr #28
 480:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 484:	200e4101 	andcs	r4, lr, r1, lsl #2
 488:	00070d41 	andeq	r0, r7, r1, asr #26
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	000001a8 	andeq	r0, r0, r8, lsr #3
 494:	20001bbe 			; <UNDEFINED> instruction: 0x20001bbe
 498:	00000052 	andeq	r0, r0, r2, asr r0
 49c:	40080e41 	andmi	r0, r8, r1, asr #28
 4a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4a4:	200e4101 	andcs	r4, lr, r1, lsl #2
 4a8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ac:	00000020 	andeq	r0, r0, r0, lsr #32
 4b0:	000001a8 	andeq	r0, r0, r8, lsr #3
 4b4:	20001c10 	andcs	r1, r0, r0, lsl ip
 4b8:	00000130 	andeq	r0, r0, r0, lsr r1
 4bc:	400c0e41 	andmi	r0, ip, r1, asr #28
 4c0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 4c4:	018e4002 	orreq	r4, lr, r2
 4c8:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 4cc:	0000070d 	andeq	r0, r0, sp, lsl #14
 4d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d4:	000001a8 	andeq	r0, r0, r8, lsr #3
 4d8:	20001d40 	andcs	r1, r0, r0, asr #26
 4dc:	00000108 	andeq	r0, r0, r8, lsl #2
 4e0:	40080e41 	andmi	r0, r8, r1, asr #28
 4e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e8:	100e4101 	andne	r4, lr, r1, lsl #2
 4ec:	00070d41 	andeq	r0, r7, r1, asr #26
 4f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f4:	000001a8 	andeq	r0, r0, r8, lsr #3
 4f8:	20001e48 	andcs	r1, r0, r8, asr #28
 4fc:	00000082 	andeq	r0, r0, r2, lsl #1
 500:	40080e41 	andmi	r0, r8, r1, asr #28
 504:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 508:	200e4101 	andcs	r4, lr, r1, lsl #2
 50c:	18070c41 	stmdane	r7, {r0, r6, sl, fp}
 510:	0000001c 	andeq	r0, r0, ip, lsl r0
 514:	000001a8 	andeq	r0, r0, r8, lsr #3
 518:	20001eca 	andcs	r1, r0, sl, asr #29
 51c:	0000006a 	andeq	r0, r0, sl, rrx
 520:	40080e41 	andmi	r0, r8, r1, asr #28
 524:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 528:	100e4101 	andne	r4, lr, r1, lsl #2
 52c:	00070d41 	andeq	r0, r7, r1, asr #26
 530:	0000000c 	andeq	r0, r0, ip
 534:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 538:	7c020001 	stcvc	0, cr0, [r2], {1}
 53c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 540:	0000001c 	andeq	r0, r0, ip, lsl r0
 544:	00000530 	andeq	r0, r0, r0, lsr r5
 548:	20001f34 	andcs	r1, r0, r4, lsr pc
 54c:	00000028 	andeq	r0, r0, r8, lsr #32
 550:	40080e41 	andmi	r0, r8, r1, asr #28
 554:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 558:	180e4101 	stmdane	lr, {r0, r8, lr}
 55c:	00070d41 	andeq	r0, r7, r1, asr #26
 560:	0000000c 	andeq	r0, r0, ip
 564:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 568:	7c020001 	stcvc	0, cr0, [r2], {1}
 56c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 570:	0000001c 	andeq	r0, r0, ip, lsl r0
 574:	00000560 	andeq	r0, r0, r0, ror #10
 578:	20001f5c 	andcs	r1, r0, ip, asr pc
 57c:	00000028 	andeq	r0, r0, r8, lsr #32
 580:	40080e41 	andmi	r0, r8, r1, asr #28
 584:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 588:	180e4101 	stmdane	lr, {r0, r8, lr}
 58c:	00070d41 	andeq	r0, r7, r1, asr #26
 590:	0000000c 	andeq	r0, r0, ip
 594:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 598:	7c020001 	stcvc	0, cr0, [r2], {1}
 59c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5a0:	00000018 	andeq	r0, r0, r8, lsl r0
 5a4:	00000590 	muleq	r0, r0, r5
 5a8:	20001f84 	andcs	r1, r0, r4, lsl #31
 5ac:	00000018 	andeq	r0, r0, r8, lsl r0
 5b0:	40080e41 	andmi	r0, r8, r1, asr #28
 5b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5b8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 5bc:	00000018 	andeq	r0, r0, r8, lsl r0
 5c0:	00000590 	muleq	r0, r0, r5
 5c4:	20001f9c 	mulcs	r0, ip, pc	; <UNPREDICTABLE>
 5c8:	00000014 	andeq	r0, r0, r4, lsl r0
 5cc:	40080e41 	andmi	r0, r8, r1, asr #28
 5d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5d4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 5d8:	00000020 	andeq	r0, r0, r0, lsr #32
 5dc:	00000590 	muleq	r0, r0, r5
 5e0:	20001fb0 			; <UNDEFINED> instruction: 0x20001fb0
 5e4:	00000034 	andeq	r0, r0, r4, lsr r0
 5e8:	400c0e41 	andmi	r0, ip, r1, asr #28
 5ec:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 5f0:	018e4002 	orreq	r4, lr, r2
 5f4:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 5f8:	0000070d 	andeq	r0, r0, sp, lsl #14
 5fc:	0000000c 	andeq	r0, r0, ip
 600:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 604:	7c020001 	stcvc	0, cr0, [r2], {1}
 608:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 60c:	0000001c 	andeq	r0, r0, ip, lsl r0
 610:	000005fc 	strdeq	r0, [r0], -ip
 614:	20001fe4 	andcs	r1, r0, r4, ror #31
 618:	00000044 	andeq	r0, r0, r4, asr #32
 61c:	40080e41 	andmi	r0, r8, r1, asr #28
 620:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 624:	180e4101 	stmdane	lr, {r0, r8, lr}
 628:	00070d41 	andeq	r0, r7, r1, asr #26
 62c:	0000001c 	andeq	r0, r0, ip, lsl r0
 630:	000005fc 	strdeq	r0, [r0], -ip
 634:	20002028 	andcs	r2, r0, r8, lsr #32
 638:	00000050 	andeq	r0, r0, r0, asr r0
 63c:	40080e41 	andmi	r0, r8, r1, asr #28
 640:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 644:	180e4101 	stmdane	lr, {r0, r8, lr}
 648:	00070d41 	andeq	r0, r7, r1, asr #26
 64c:	0000001c 	andeq	r0, r0, ip, lsl r0
 650:	000005fc 	strdeq	r0, [r0], -ip
 654:	20002078 	andcs	r2, r0, r8, ror r0
 658:	0000002a 	andeq	r0, r0, sl, lsr #32
 65c:	40080e41 	andmi	r0, r8, r1, asr #28
 660:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 664:	100e4101 	andne	r4, lr, r1, lsl #2
 668:	00070d41 	andeq	r0, r7, r1, asr #26
 66c:	0000001c 	andeq	r0, r0, ip, lsl r0
 670:	000005fc 	strdeq	r0, [r0], -ip
 674:	200020a2 	andcs	r2, r0, r2, lsr #1
 678:	0000002a 	andeq	r0, r0, sl, lsr #32
 67c:	40080e41 	andmi	r0, r8, r1, asr #28
 680:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 684:	100e4101 	andne	r4, lr, r1, lsl #2
 688:	00070d41 	andeq	r0, r7, r1, asr #26
 68c:	00000020 	andeq	r0, r0, r0, lsr #32
 690:	000005fc 	strdeq	r0, [r0], -ip
 694:	200020cc 	andcs	r2, r0, ip, asr #1
 698:	00000054 	andeq	r0, r0, r4, asr r0
 69c:	400c0e41 	andmi	r0, ip, r1, asr #28
 6a0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 6a4:	018e4002 	orreq	r4, lr, r2
 6a8:	41180e41 	tstmi	r8, r1, asr #28
 6ac:	0000070d 	andeq	r0, r0, sp, lsl #14
 6b0:	00000020 	andeq	r0, r0, r0, lsr #32
 6b4:	000005fc 	strdeq	r0, [r0], -ip
 6b8:	20002120 	andcs	r2, r0, r0, lsr #2
 6bc:	00000054 	andeq	r0, r0, r4, asr r0
 6c0:	400c0e41 	andmi	r0, ip, r1, asr #28
 6c4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 6c8:	018e4002 	orreq	r4, lr, r2
 6cc:	41180e41 	tstmi	r8, r1, asr #28
 6d0:	0000070d 	andeq	r0, r0, sp, lsl #14
 6d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 6d8:	000005fc 	strdeq	r0, [r0], -ip
 6dc:	20002174 	andcs	r2, r0, r4, ror r1
 6e0:	00000030 	andeq	r0, r0, r0, lsr r0
 6e4:	40080e41 	andmi	r0, r8, r1, asr #28
 6e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6ec:	100e4101 	andne	r4, lr, r1, lsl #2
 6f0:	00070d41 	andeq	r0, r7, r1, asr #26
 6f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 6f8:	000005fc 	strdeq	r0, [r0], -ip
 6fc:	200021a4 	andcs	r2, r0, r4, lsr #3
 700:	00000034 	andeq	r0, r0, r4, lsr r0
 704:	40080e41 	andmi	r0, r8, r1, asr #28
 708:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 70c:	100e4101 	andne	r4, lr, r1, lsl #2
 710:	00070d41 	andeq	r0, r7, r1, asr #26
 714:	0000001c 	andeq	r0, r0, ip, lsl r0
 718:	000005fc 	strdeq	r0, [r0], -ip
 71c:	200021d8 	ldrdcs	r2, [r0], -r8
 720:	0000003c 	andeq	r0, r0, ip, lsr r0
 724:	40080e41 	andmi	r0, r8, r1, asr #28
 728:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 72c:	100e4101 	andne	r4, lr, r1, lsl #2
 730:	00070d41 	andeq	r0, r7, r1, asr #26
 734:	0000001c 	andeq	r0, r0, ip, lsl r0
 738:	000005fc 	strdeq	r0, [r0], -ip
 73c:	20002214 	andcs	r2, r0, r4, lsl r2
 740:	00000050 	andeq	r0, r0, r0, asr r0
 744:	40080e41 	andmi	r0, r8, r1, asr #28
 748:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 74c:	180e4101 	stmdane	lr, {r0, r8, lr}
 750:	00070d41 	andeq	r0, r7, r1, asr #26
 754:	00000018 	andeq	r0, r0, r8, lsl r0
 758:	000005fc 	strdeq	r0, [r0], -ip
 75c:	20002264 	andcs	r2, r0, r4, ror #4
 760:	0000009a 	muleq	r0, sl, r0
 764:	40080e41 	andmi	r0, r8, r1, asr #28
 768:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 76c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 770:	00000018 	andeq	r0, r0, r8, lsl r0
 774:	000005fc 	strdeq	r0, [r0], -ip
 778:	200022fe 	strdcs	r2, [r0], -lr
 77c:	0000001a 	andeq	r0, r0, sl, lsl r0
 780:	40080e41 	andmi	r0, r8, r1, asr #28
 784:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 788:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 78c:	00000018 	andeq	r0, r0, r8, lsl r0
 790:	000005fc 	strdeq	r0, [r0], -ip
 794:	20002318 	andcs	r2, r0, r8, lsl r3
 798:	00000012 	andeq	r0, r0, r2, lsl r0
 79c:	40080e41 	andmi	r0, r8, r1, asr #28
 7a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7a4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 7a8:	00000020 	andeq	r0, r0, r0, lsr #32
 7ac:	000005fc 	strdeq	r0, [r0], -ip
 7b0:	2000232a 	andcs	r2, r0, sl, lsr #6
 7b4:	0000006a 	andeq	r0, r0, sl, rrx
 7b8:	400c0e41 	andmi	r0, ip, r1, asr #28
 7bc:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 7c0:	018e4002 	orreq	r4, lr, r2
 7c4:	41300e41 	teqmi	r0, r1, asr #28
 7c8:	0000070d 	andeq	r0, r0, sp, lsl #14
 7cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 7d0:	000005fc 	strdeq	r0, [r0], -ip
 7d4:	20002394 	mulcs	r0, r4, r3
 7d8:	0000005e 	andeq	r0, r0, lr, asr r0
 7dc:	40080e41 	andmi	r0, r8, r1, asr #28
 7e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7e4:	100e4101 	andne	r4, lr, r1, lsl #2
 7e8:	00070d41 	andeq	r0, r7, r1, asr #26
 7ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 7f0:	000005fc 	strdeq	r0, [r0], -ip
 7f4:	200023f2 	strdcs	r2, [r0], -r2	; <UNPREDICTABLE>
 7f8:	0000008e 	andeq	r0, r0, lr, lsl #1
 7fc:	40080e41 	andmi	r0, r8, r1, asr #28
 800:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 804:	200e4101 	andcs	r4, lr, r1, lsl #2
 808:	00070d41 	andeq	r0, r7, r1, asr #26
 80c:	00000020 	andeq	r0, r0, r0, lsr #32
 810:	000005fc 	strdeq	r0, [r0], -ip
 814:	20002480 	andcs	r2, r0, r0, lsl #9
 818:	00000084 	andeq	r0, r0, r4, lsl #1
 81c:	400c0e41 	andmi	r0, ip, r1, asr #28
 820:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 824:	018e4002 	orreq	r4, lr, r2
 828:	41380e41 	teqmi	r8, r1, asr #28
 82c:	0000070d 	andeq	r0, r0, sp, lsl #14
 830:	0000000c 	andeq	r0, r0, ip
 834:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 838:	7c020001 	stcvc	0, cr0, [r2], {1}
 83c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 840:	0000001c 	andeq	r0, r0, ip, lsl r0
 844:	00000830 	andeq	r0, r0, r0, lsr r8
 848:	20002504 	andcs	r2, r0, r4, lsl #10
 84c:	0000005a 	andeq	r0, r0, sl, asr r0
 850:	40080e41 	andmi	r0, r8, r1, asr #28
 854:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 858:	180e4101 	stmdane	lr, {r0, r8, lr}
 85c:	00070d41 	andeq	r0, r7, r1, asr #26
 860:	0000001c 	andeq	r0, r0, ip, lsl r0
 864:	00000830 	andeq	r0, r0, r0, lsr r8
 868:	2000255e 	andcs	r2, r0, lr, asr r5
 86c:	0000003a 	andeq	r0, r0, sl, lsr r0
 870:	40080e41 	andmi	r0, r8, r1, asr #28
 874:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 878:	180e4101 	stmdane	lr, {r0, r8, lr}
 87c:	00070d41 	andeq	r0, r7, r1, asr #26
 880:	0000000c 	andeq	r0, r0, ip
 884:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 888:	7c010001 	stcvc	0, cr0, [r1], {1}
 88c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 890:	0000000c 	andeq	r0, r0, ip
 894:	00000880 	andeq	r0, r0, r0, lsl #17
 898:	20002599 	mulcs	r0, r9, r5
 89c:	000001cc 	andeq	r0, r0, ip, asr #3
