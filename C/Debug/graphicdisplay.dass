
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#endif
}

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f8fa 	bl	200001fc <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:
void init_app( void ) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*portModer = 0x55555555;
20000014:	4b05      	ldr	r3, [pc, #20]	; (2000002c <init_app+0x1c>)
20000016:	4a06      	ldr	r2, [pc, #24]	; (20000030 <init_app+0x20>)
20000018:	601a      	str	r2, [r3, #0]
	set_up_DIL();
2000001a:	f002 fdcf 	bl	20002bbc <set_up_DIL>
	graphic_initialize();
2000001e:	f002 f8cf 	bl	200021c0 <graphic_initialize>
	graphic_clear_screen();
20000022:	f002 f904 	bl	2000222e <graphic_clear_screen>
}
20000026:	46c0      	nop			; (mov r8, r8)
20000028:	46bd      	mov	sp, r7
2000002a:	bd80      	pop	{r7, pc}
2000002c:	40021000 	andmi	r1, r2, r0
20000030:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000034 <initSprites>:
sprite tempTitleLight;
sprite tempPressBlack;
sprite tempPressGray;
sprite tempPressLight;

void initSprites( void ) {
20000034:	b580      	push	{r7, lr}
20000036:	b08a      	sub	sp, #40	; 0x28
20000038:	af00      	add	r7, sp, #0
	sprite *monsterPointer = &tempMonster;
2000003a:	4b49      	ldr	r3, [pc, #292]	; (20000160 <initSprites+0x12c>)
2000003c:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(monsterPointer, monster_black_bits, monster_black_width, monster_black_height);
2000003e:	4949      	ldr	r1, [pc, #292]	; (20000164 <initSprites+0x130>)
20000040:	6a78      	ldr	r0, [r7, #36]	; 0x24
20000042:	231e      	movs	r3, #30
20000044:	221e      	movs	r2, #30
20000046:	f002 fda5 	bl	20002b94 <load_sprite>
	monster = monsterPointer;
2000004a:	4b47      	ldr	r3, [pc, #284]	; (20000168 <initSprites+0x134>)
2000004c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000004e:	601a      	str	r2, [r3, #0]
	
	sprite *monsterPointer2 = &tempMonsterLight;
20000050:	4b46      	ldr	r3, [pc, #280]	; (2000016c <initSprites+0x138>)
20000052:	623b      	str	r3, [r7, #32]
	load_sprite(monsterPointer2, monster_light_bits, monster_light_width, monster_light_height);
20000054:	4946      	ldr	r1, [pc, #280]	; (20000170 <initSprites+0x13c>)
20000056:	6a38      	ldr	r0, [r7, #32]
20000058:	231e      	movs	r3, #30
2000005a:	221e      	movs	r2, #30
2000005c:	f002 fd9a 	bl	20002b94 <load_sprite>
	monsterLight = monsterPointer2;
20000060:	4b44      	ldr	r3, [pc, #272]	; (20000174 <initSprites+0x140>)
20000062:	6a3a      	ldr	r2, [r7, #32]
20000064:	601a      	str	r2, [r3, #0]

	sprite *monsterPointer3 = &tempMonsterGray;
20000066:	4b44      	ldr	r3, [pc, #272]	; (20000178 <initSprites+0x144>)
20000068:	61fb      	str	r3, [r7, #28]
	load_sprite(monsterPointer3, monster_gray_bits, monster_gray_width, monster_gray_height);
2000006a:	4944      	ldr	r1, [pc, #272]	; (2000017c <initSprites+0x148>)
2000006c:	69f8      	ldr	r0, [r7, #28]
2000006e:	231e      	movs	r3, #30
20000070:	221e      	movs	r2, #30
20000072:	f002 fd8f 	bl	20002b94 <load_sprite>
	monsterGray = monsterPointer3;
20000076:	4b42      	ldr	r3, [pc, #264]	; (20000180 <initSprites+0x14c>)
20000078:	69fa      	ldr	r2, [r7, #28]
2000007a:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempBg;
2000007c:	4b41      	ldr	r3, [pc, #260]	; (20000184 <initSprites+0x150>)
2000007e:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer4, bg_bits, bg_width, bg_height);
20000080:	4941      	ldr	r1, [pc, #260]	; (20000188 <initSprites+0x154>)
20000082:	69b8      	ldr	r0, [r7, #24]
20000084:	2340      	movs	r3, #64	; 0x40
20000086:	2280      	movs	r2, #128	; 0x80
20000088:	f002 fd84 	bl	20002b94 <load_sprite>
	bg = pointer4;
2000008c:	4b3f      	ldr	r3, [pc, #252]	; (2000018c <initSprites+0x158>)
2000008e:	69ba      	ldr	r2, [r7, #24]
20000090:	601a      	str	r2, [r3, #0]
	
	sprite *pointer5 = &tempCastleBlack;
20000092:	4b3f      	ldr	r3, [pc, #252]	; (20000190 <initSprites+0x15c>)
20000094:	617b      	str	r3, [r7, #20]
	load_sprite(pointer5, castle_black_bits, castle_black_width, castle_black_height);
20000096:	493f      	ldr	r1, [pc, #252]	; (20000194 <initSprites+0x160>)
20000098:	6978      	ldr	r0, [r7, #20]
2000009a:	2340      	movs	r3, #64	; 0x40
2000009c:	2280      	movs	r2, #128	; 0x80
2000009e:	f002 fd79 	bl	20002b94 <load_sprite>
	castleBlack = pointer5;
200000a2:	4b3d      	ldr	r3, [pc, #244]	; (20000198 <initSprites+0x164>)
200000a4:	697a      	ldr	r2, [r7, #20]
200000a6:	601a      	str	r2, [r3, #0]
	
	sprite *pointer6 = &tempCastleGray;
200000a8:	4b3c      	ldr	r3, [pc, #240]	; (2000019c <initSprites+0x168>)
200000aa:	613b      	str	r3, [r7, #16]
	load_sprite(pointer6, castle_gray_bits, castle_black_width, castle_black_height);
200000ac:	493c      	ldr	r1, [pc, #240]	; (200001a0 <initSprites+0x16c>)
200000ae:	6938      	ldr	r0, [r7, #16]
200000b0:	2340      	movs	r3, #64	; 0x40
200000b2:	2280      	movs	r2, #128	; 0x80
200000b4:	f002 fd6e 	bl	20002b94 <load_sprite>
	castleGray = pointer6;
200000b8:	4b3a      	ldr	r3, [pc, #232]	; (200001a4 <initSprites+0x170>)
200000ba:	693a      	ldr	r2, [r7, #16]
200000bc:	601a      	str	r2, [r3, #0]
	
	sprite *pointer7 = &tempCastleLight;
200000be:	4b3a      	ldr	r3, [pc, #232]	; (200001a8 <initSprites+0x174>)
200000c0:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer7, castle_light_bits, castle_black_width, castle_black_height);
200000c2:	493a      	ldr	r1, [pc, #232]	; (200001ac <initSprites+0x178>)
200000c4:	68f8      	ldr	r0, [r7, #12]
200000c6:	2340      	movs	r3, #64	; 0x40
200000c8:	2280      	movs	r2, #128	; 0x80
200000ca:	f002 fd63 	bl	20002b94 <load_sprite>
	castleLight = pointer7;
200000ce:	4b38      	ldr	r3, [pc, #224]	; (200001b0 <initSprites+0x17c>)
200000d0:	68fa      	ldr	r2, [r7, #12]
200000d2:	601a      	str	r2, [r3, #0]
	
	sprite *pointer8 = &tempTitleLight;
200000d4:	4b37      	ldr	r3, [pc, #220]	; (200001b4 <initSprites+0x180>)
200000d6:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer8, title_light_bits, title_black_width, title_black_height);
200000d8:	4937      	ldr	r1, [pc, #220]	; (200001b8 <initSprites+0x184>)
200000da:	68b8      	ldr	r0, [r7, #8]
200000dc:	231e      	movs	r3, #30
200000de:	2232      	movs	r2, #50	; 0x32
200000e0:	f002 fd58 	bl	20002b94 <load_sprite>
	titleLight = pointer8;
200000e4:	4b35      	ldr	r3, [pc, #212]	; (200001bc <initSprites+0x188>)
200000e6:	68ba      	ldr	r2, [r7, #8]
200000e8:	601a      	str	r2, [r3, #0]
	sprite *pointer9 = &tempTitleGray;
200000ea:	4b35      	ldr	r3, [pc, #212]	; (200001c0 <initSprites+0x18c>)
200000ec:	607b      	str	r3, [r7, #4]
	load_sprite(pointer9, title_gray_bits, title_black_width, title_black_height);
200000ee:	4935      	ldr	r1, [pc, #212]	; (200001c4 <initSprites+0x190>)
200000f0:	6878      	ldr	r0, [r7, #4]
200000f2:	231e      	movs	r3, #30
200000f4:	2232      	movs	r2, #50	; 0x32
200000f6:	f002 fd4d 	bl	20002b94 <load_sprite>
	titleGray = pointer9;
200000fa:	4b33      	ldr	r3, [pc, #204]	; (200001c8 <initSprites+0x194>)
200000fc:	687a      	ldr	r2, [r7, #4]
200000fe:	601a      	str	r2, [r3, #0]
	sprite *pointer10 = &tempTitleBlack;
20000100:	4b32      	ldr	r3, [pc, #200]	; (200001cc <initSprites+0x198>)
20000102:	603b      	str	r3, [r7, #0]
	load_sprite(pointer10, title_black_bits, title_black_width, title_black_height);
20000104:	4932      	ldr	r1, [pc, #200]	; (200001d0 <initSprites+0x19c>)
20000106:	6838      	ldr	r0, [r7, #0]
20000108:	231e      	movs	r3, #30
2000010a:	2232      	movs	r2, #50	; 0x32
2000010c:	f002 fd42 	bl	20002b94 <load_sprite>
	titleBlack = pointer10;	
20000110:	4b30      	ldr	r3, [pc, #192]	; (200001d4 <initSprites+0x1a0>)
20000112:	683a      	ldr	r2, [r7, #0]
20000114:	601a      	str	r2, [r3, #0]
	
	pointer8 = &tempPressLight;
20000116:	4b30      	ldr	r3, [pc, #192]	; (200001d8 <initSprites+0x1a4>)
20000118:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer8, press_light_bits, press_black_width, press_black_height);
2000011a:	4930      	ldr	r1, [pc, #192]	; (200001dc <initSprites+0x1a8>)
2000011c:	68b8      	ldr	r0, [r7, #8]
2000011e:	2323      	movs	r3, #35	; 0x23
20000120:	223c      	movs	r2, #60	; 0x3c
20000122:	f002 fd37 	bl	20002b94 <load_sprite>
	pressLight = pointer8;
20000126:	4b2e      	ldr	r3, [pc, #184]	; (200001e0 <initSprites+0x1ac>)
20000128:	68ba      	ldr	r2, [r7, #8]
2000012a:	601a      	str	r2, [r3, #0]
	pointer9 = &tempPressGray;
2000012c:	4b2d      	ldr	r3, [pc, #180]	; (200001e4 <initSprites+0x1b0>)
2000012e:	607b      	str	r3, [r7, #4]
	load_sprite(pointer9, press_gray_bits, press_black_width, press_black_height);
20000130:	492d      	ldr	r1, [pc, #180]	; (200001e8 <initSprites+0x1b4>)
20000132:	6878      	ldr	r0, [r7, #4]
20000134:	2323      	movs	r3, #35	; 0x23
20000136:	223c      	movs	r2, #60	; 0x3c
20000138:	f002 fd2c 	bl	20002b94 <load_sprite>
	pressGray = pointer9;
2000013c:	4b2b      	ldr	r3, [pc, #172]	; (200001ec <initSprites+0x1b8>)
2000013e:	687a      	ldr	r2, [r7, #4]
20000140:	601a      	str	r2, [r3, #0]
	pointer10 = &tempPressBlack;
20000142:	4b2b      	ldr	r3, [pc, #172]	; (200001f0 <initSprites+0x1bc>)
20000144:	603b      	str	r3, [r7, #0]
	load_sprite(pointer10, press_black_bits, press_black_width, press_black_height);
20000146:	492b      	ldr	r1, [pc, #172]	; (200001f4 <initSprites+0x1c0>)
20000148:	6838      	ldr	r0, [r7, #0]
2000014a:	2323      	movs	r3, #35	; 0x23
2000014c:	223c      	movs	r2, #60	; 0x3c
2000014e:	f002 fd21 	bl	20002b94 <load_sprite>
	pressBlack = pointer10;	
20000152:	4b29      	ldr	r3, [pc, #164]	; (200001f8 <initSprites+0x1c4>)
20000154:	683a      	ldr	r2, [r7, #0]
20000156:	601a      	str	r2, [r3, #0]
	
	
}
20000158:	46c0      	nop			; (mov r8, r8)
2000015a:	46bd      	mov	sp, r7
2000015c:	b00a      	add	sp, #40	; 0x28
2000015e:	bd80      	pop	{r7, pc}
20000160:	200035d8 	ldrdcs	r3, [r0], -r8
20000164:	20005a00 	andcs	r5, r0, r0, lsl #20
20000168:	200035ac 	andcs	r3, r0, ip, lsr #11
2000016c:	20003630 	andcs	r3, r0, r0, lsr r6
20000170:	20005a78 	andcs	r5, r0, r8, ror sl
20000174:	20003658 	andcs	r3, r0, r8, asr r6
20000178:	200035f8 	strdcs	r3, [r0], -r8
2000017c:	20005af0 	strdcs	r5, [r0], -r0
20000180:	2000366c 	andcs	r3, r0, ip, ror #12
20000184:	20003670 	andcs	r3, r0, r0, ror r6
20000188:	20006d2c 	andcs	r6, r0, ip, lsr #26
2000018c:	200035f4 	strdcs	r3, [r0], -r4
20000190:	200035b0 			; <UNDEFINED> instruction: 0x200035b0
20000194:	20005eb0 			; <UNDEFINED> instruction: 0x20005eb0
20000198:	200035d4 	ldrdcs	r3, [r0], -r4
2000019c:	2000364c 	andcs	r3, r0, ip, asr #12
200001a0:	200062b0 			; <UNDEFINED> instruction: 0x200062b0
200001a4:	20003660 	andcs	r3, r0, r0, ror #12
200001a8:	20003620 	andcs	r3, r0, r0, lsr #12
200001ac:	200066b0 			; <UNDEFINED> instruction: 0x200066b0
200001b0:	20003610 	andcs	r3, r0, r0, lsl r6
200001b4:	20003604 	andcs	r3, r0, r4, lsl #12
200001b8:	20006ab0 			; <UNDEFINED> instruction: 0x20006ab0
200001bc:	2000365c 	andcs	r3, r0, ip, asr r6
200001c0:	200035c8 	andcs	r3, r0, r8, asr #11
200001c4:	20006b84 	andcs	r6, r0, r4, lsl #23
200001c8:	20003648 	andcs	r3, r0, r8, asr #12
200001cc:	200035e8 	andcs	r3, r0, r8, ror #11
200001d0:	20006c58 	andcs	r6, r0, r8, asr ip
200001d4:	2000367c 	andcs	r3, r0, ip, ror r6
200001d8:	20003614 	andcs	r3, r0, r4, lsl r6
200001dc:	20005c80 	andcs	r5, r0, r0, lsl #25
200001e0:	200035e4 	andcs	r3, r0, r4, ror #11
200001e4:	200035bc 			; <UNDEFINED> instruction: 0x200035bc
200001e8:	20005d98 	mulcs	r0, r8, sp
200001ec:	2000362c 	andcs	r3, r0, ip, lsr #12
200001f0:	2000363c 	andcs	r3, r0, ip, lsr r6
200001f4:	20005b68 	andcs	r5, r0, r8, ror #22
200001f8:	20003668 	andcs	r3, r0, r8, ror #12

200001fc <main>:
	
int counter = 0;
int current_screen = START_SCREEN;
void main(void)
{
200001fc:	b590      	push	{r4, r7, lr}
200001fe:	4cfd      	ldr	r4, [pc, #1012]	; (200005f4 <main+0x3f8>)
20000200:	44a5      	add	sp, r4
20000202:	af00      	add	r7, sp, #0
	
	init_app();	
20000204:	f7ff ff04 	bl	20000010 <init_app>
	initSprites();
20000208:	f7ff ff14 	bl	20000034 <initSprites>
	
	GameObject monsterObj;
	Image monsterImage;
	Image monsterImages[] = {monsterImage};
2000020c:	23c9      	movs	r3, #201	; 0xc9
2000020e:	009b      	lsls	r3, r3, #2
20000210:	18fb      	adds	r3, r7, r3
20000212:	22cc      	movs	r2, #204	; 0xcc
20000214:	0092      	lsls	r2, r2, #2
20000216:	18ba      	adds	r2, r7, r2
20000218:	ca13      	ldmia	r2!, {r0, r1, r4}
2000021a:	c313      	stmia	r3!, {r0, r1, r4}
	monsterObj.images = monsterImages;
2000021c:	23cf      	movs	r3, #207	; 0xcf
2000021e:	009b      	lsls	r3, r3, #2
20000220:	18fb      	adds	r3, r7, r3
20000222:	22c9      	movs	r2, #201	; 0xc9
20000224:	0092      	lsls	r2, r2, #2
20000226:	18ba      	adds	r2, r7, r2
20000228:	601a      	str	r2, [r3, #0]
	load_image(&monsterObj.images[0], monster, monsterGray, monsterLight);
2000022a:	23cf      	movs	r3, #207	; 0xcf
2000022c:	009b      	lsls	r3, r3, #2
2000022e:	18fb      	adds	r3, r7, r3
20000230:	6818      	ldr	r0, [r3, #0]
20000232:	4bf1      	ldr	r3, [pc, #964]	; (200005f8 <main+0x3fc>)
20000234:	6819      	ldr	r1, [r3, #0]
20000236:	4bf1      	ldr	r3, [pc, #964]	; (200005fc <main+0x400>)
20000238:	681a      	ldr	r2, [r3, #0]
2000023a:	4bf1      	ldr	r3, [pc, #964]	; (20000600 <main+0x404>)
2000023c:	681b      	ldr	r3, [r3, #0]
2000023e:	f002 fc95 	bl	20002b6c <load_image>
	monsterObj.xPos = 30;
20000242:	23cf      	movs	r3, #207	; 0xcf
20000244:	009b      	lsls	r3, r3, #2
20000246:	18fb      	adds	r3, r7, r3
20000248:	221e      	movs	r2, #30
2000024a:	605a      	str	r2, [r3, #4]
	monsterObj.yPos = 4;
2000024c:	23cf      	movs	r3, #207	; 0xcf
2000024e:	009b      	lsls	r3, r3, #2
20000250:	18fb      	adds	r3, r7, r3
20000252:	2204      	movs	r2, #4
20000254:	609a      	str	r2, [r3, #8]
	monsterObj.current_frame = 0;
20000256:	23cf      	movs	r3, #207	; 0xcf
20000258:	009b      	lsls	r3, r3, #2
2000025a:	18fb      	adds	r3, r7, r3
2000025c:	2200      	movs	r2, #0
2000025e:	615a      	str	r2, [r3, #20]
	monsterObj.update = playerUpdate;
20000260:	23cf      	movs	r3, #207	; 0xcf
20000262:	009b      	lsls	r3, r3, #2
20000264:	18fb      	adds	r3, r7, r3
20000266:	4ae7      	ldr	r2, [pc, #924]	; (20000604 <main+0x408>)
20000268:	60da      	str	r2, [r3, #12]
	
	GameObject titleObj;
	Image titleImage;
	Image titleImages[] = {titleImage};
2000026a:	23ba      	movs	r3, #186	; 0xba
2000026c:	009b      	lsls	r3, r3, #2
2000026e:	18fb      	adds	r3, r7, r3
20000270:	22bd      	movs	r2, #189	; 0xbd
20000272:	0092      	lsls	r2, r2, #2
20000274:	18ba      	adds	r2, r7, r2
20000276:	ca13      	ldmia	r2!, {r0, r1, r4}
20000278:	c313      	stmia	r3!, {r0, r1, r4}
	titleObj.images = titleImages;
2000027a:	23c0      	movs	r3, #192	; 0xc0
2000027c:	009b      	lsls	r3, r3, #2
2000027e:	18fb      	adds	r3, r7, r3
20000280:	22ba      	movs	r2, #186	; 0xba
20000282:	0092      	lsls	r2, r2, #2
20000284:	18ba      	adds	r2, r7, r2
20000286:	601a      	str	r2, [r3, #0]
	load_image(&titleObj.images[0], titleBlack, titleGray, titleLight);
20000288:	23c0      	movs	r3, #192	; 0xc0
2000028a:	009b      	lsls	r3, r3, #2
2000028c:	18fb      	adds	r3, r7, r3
2000028e:	6818      	ldr	r0, [r3, #0]
20000290:	4bdd      	ldr	r3, [pc, #884]	; (20000608 <main+0x40c>)
20000292:	6819      	ldr	r1, [r3, #0]
20000294:	4bdd      	ldr	r3, [pc, #884]	; (2000060c <main+0x410>)
20000296:	681a      	ldr	r2, [r3, #0]
20000298:	4bdd      	ldr	r3, [pc, #884]	; (20000610 <main+0x414>)
2000029a:	681b      	ldr	r3, [r3, #0]
2000029c:	f002 fc66 	bl	20002b6c <load_image>
	titleObj.xPos = 1;
200002a0:	23c0      	movs	r3, #192	; 0xc0
200002a2:	009b      	lsls	r3, r3, #2
200002a4:	18fb      	adds	r3, r7, r3
200002a6:	2201      	movs	r2, #1
200002a8:	605a      	str	r2, [r3, #4]
	titleObj.yPos = -40;
200002aa:	23c0      	movs	r3, #192	; 0xc0
200002ac:	009b      	lsls	r3, r3, #2
200002ae:	18fb      	adds	r3, r7, r3
200002b0:	2228      	movs	r2, #40	; 0x28
200002b2:	4252      	negs	r2, r2
200002b4:	609a      	str	r2, [r3, #8]
	titleObj.current_frame = 0;
200002b6:	23c0      	movs	r3, #192	; 0xc0
200002b8:	009b      	lsls	r3, r3, #2
200002ba:	18fb      	adds	r3, r7, r3
200002bc:	2200      	movs	r2, #0
200002be:	615a      	str	r2, [r3, #20]
	
	GameObject pressObj;
	Image pressImage;
	Image pressImages[] = {pressImage};
200002c0:	23ab      	movs	r3, #171	; 0xab
200002c2:	009b      	lsls	r3, r3, #2
200002c4:	18fb      	adds	r3, r7, r3
200002c6:	22ae      	movs	r2, #174	; 0xae
200002c8:	0092      	lsls	r2, r2, #2
200002ca:	18ba      	adds	r2, r7, r2
200002cc:	ca13      	ldmia	r2!, {r0, r1, r4}
200002ce:	c313      	stmia	r3!, {r0, r1, r4}
	pressObj.images = pressImages;
200002d0:	23b1      	movs	r3, #177	; 0xb1
200002d2:	009b      	lsls	r3, r3, #2
200002d4:	18fb      	adds	r3, r7, r3
200002d6:	22ab      	movs	r2, #171	; 0xab
200002d8:	0092      	lsls	r2, r2, #2
200002da:	18ba      	adds	r2, r7, r2
200002dc:	601a      	str	r2, [r3, #0]
	load_image(&pressObj.images[0], pressBlack, pressLight, pressGray);
200002de:	23b1      	movs	r3, #177	; 0xb1
200002e0:	009b      	lsls	r3, r3, #2
200002e2:	18fb      	adds	r3, r7, r3
200002e4:	6818      	ldr	r0, [r3, #0]
200002e6:	4bcb      	ldr	r3, [pc, #812]	; (20000614 <main+0x418>)
200002e8:	6819      	ldr	r1, [r3, #0]
200002ea:	4bcb      	ldr	r3, [pc, #812]	; (20000618 <main+0x41c>)
200002ec:	681a      	ldr	r2, [r3, #0]
200002ee:	4bcb      	ldr	r3, [pc, #812]	; (2000061c <main+0x420>)
200002f0:	681b      	ldr	r3, [r3, #0]
200002f2:	f002 fc3b 	bl	20002b6c <load_image>
	pressObj.xPos = 65-30;
200002f6:	23b1      	movs	r3, #177	; 0xb1
200002f8:	009b      	lsls	r3, r3, #2
200002fa:	18fb      	adds	r3, r7, r3
200002fc:	2223      	movs	r2, #35	; 0x23
200002fe:	605a      	str	r2, [r3, #4]
	pressObj.yPos = 29-15;
20000300:	23b1      	movs	r3, #177	; 0xb1
20000302:	009b      	lsls	r3, r3, #2
20000304:	18fb      	adds	r3, r7, r3
20000306:	220e      	movs	r2, #14
20000308:	609a      	str	r2, [r3, #8]
	pressObj.current_frame = 0;
2000030a:	23b1      	movs	r3, #177	; 0xb1
2000030c:	009b      	lsls	r3, r3, #2
2000030e:	18fb      	adds	r3, r7, r3
20000310:	2200      	movs	r2, #0
20000312:	615a      	str	r2, [r3, #20]
	
	GameObject castleObj;
	Image castleImage;
	Image castleImages[] = {castleImage};
20000314:	4bc2      	ldr	r3, [pc, #776]	; (20000620 <main+0x424>)
20000316:	22dc      	movs	r2, #220	; 0xdc
20000318:	0092      	lsls	r2, r2, #2
2000031a:	4694      	mov	ip, r2
2000031c:	44bc      	add	ip, r7
2000031e:	4463      	add	r3, ip
20000320:	229f      	movs	r2, #159	; 0x9f
20000322:	0092      	lsls	r2, r2, #2
20000324:	18ba      	adds	r2, r7, r2
20000326:	ca13      	ldmia	r2!, {r0, r1, r4}
20000328:	c313      	stmia	r3!, {r0, r1, r4}
	castleObj.images = castleImages;
2000032a:	23a2      	movs	r3, #162	; 0xa2
2000032c:	009b      	lsls	r3, r3, #2
2000032e:	18fb      	adds	r3, r7, r3
20000330:	229c      	movs	r2, #156	; 0x9c
20000332:	0092      	lsls	r2, r2, #2
20000334:	18ba      	adds	r2, r7, r2
20000336:	601a      	str	r2, [r3, #0]
	load_image(&castleObj.images[0], castleBlack, castleGray, castleLight);
20000338:	23a2      	movs	r3, #162	; 0xa2
2000033a:	009b      	lsls	r3, r3, #2
2000033c:	18fb      	adds	r3, r7, r3
2000033e:	6818      	ldr	r0, [r3, #0]
20000340:	4bb8      	ldr	r3, [pc, #736]	; (20000624 <main+0x428>)
20000342:	6819      	ldr	r1, [r3, #0]
20000344:	4bb8      	ldr	r3, [pc, #736]	; (20000628 <main+0x42c>)
20000346:	681a      	ldr	r2, [r3, #0]
20000348:	4bb8      	ldr	r3, [pc, #736]	; (2000062c <main+0x430>)
2000034a:	681b      	ldr	r3, [r3, #0]
2000034c:	f002 fc0e 	bl	20002b6c <load_image>
	castleObj.xPos = 1;
20000350:	23a2      	movs	r3, #162	; 0xa2
20000352:	009b      	lsls	r3, r3, #2
20000354:	18fb      	adds	r3, r7, r3
20000356:	2201      	movs	r2, #1
20000358:	605a      	str	r2, [r3, #4]
	castleObj.yPos = 1;
2000035a:	23a2      	movs	r3, #162	; 0xa2
2000035c:	009b      	lsls	r3, r3, #2
2000035e:	18fb      	adds	r3, r7, r3
20000360:	2201      	movs	r2, #1
20000362:	609a      	str	r2, [r3, #8]
	castleObj.current_frame = 0;
20000364:	23a2      	movs	r3, #162	; 0xa2
20000366:	009b      	lsls	r3, r3, #2
20000368:	18fb      	adds	r3, r7, r3
2000036a:	2200      	movs	r2, #0
2000036c:	615a      	str	r2, [r3, #20]
	
	GameObject indoors;
	init_indoors( &indoors );
2000036e:	2393      	movs	r3, #147	; 0x93
20000370:	009b      	lsls	r3, r3, #2
20000372:	18fb      	adds	r3, r7, r3
20000374:	0018      	movs	r0, r3
20000376:	f002 ff6b 	bl	20003250 <init_indoors>
	indoors.xPos = 1;
2000037a:	4bad      	ldr	r3, [pc, #692]	; (20000630 <main+0x434>)
2000037c:	22dc      	movs	r2, #220	; 0xdc
2000037e:	0092      	lsls	r2, r2, #2
20000380:	4694      	mov	ip, r2
20000382:	44bc      	add	ip, r7
20000384:	4463      	add	r3, ip
20000386:	2201      	movs	r2, #1
20000388:	605a      	str	r2, [r3, #4]
	indoors.yPos = 1;
2000038a:	4ba9      	ldr	r3, [pc, #676]	; (20000630 <main+0x434>)
2000038c:	22dc      	movs	r2, #220	; 0xdc
2000038e:	0092      	lsls	r2, r2, #2
20000390:	4694      	mov	ip, r2
20000392:	44bc      	add	ip, r7
20000394:	4463      	add	r3, ip
20000396:	2201      	movs	r2, #1
20000398:	609a      	str	r2, [r3, #8]
	
	GameObject indoors2;
	init_indoors2( &indoors2 );
2000039a:	238a      	movs	r3, #138	; 0x8a
2000039c:	009b      	lsls	r3, r3, #2
2000039e:	18fb      	adds	r3, r7, r3
200003a0:	0018      	movs	r0, r3
200003a2:	f002 ffc9 	bl	20003338 <init_indoors2>
	indoors2.xPos = 1;
200003a6:	4ba3      	ldr	r3, [pc, #652]	; (20000634 <main+0x438>)
200003a8:	22dc      	movs	r2, #220	; 0xdc
200003aa:	0092      	lsls	r2, r2, #2
200003ac:	4694      	mov	ip, r2
200003ae:	44bc      	add	ip, r7
200003b0:	4463      	add	r3, ip
200003b2:	2201      	movs	r2, #1
200003b4:	605a      	str	r2, [r3, #4]
	indoors2.yPos = 1;
200003b6:	4b9f      	ldr	r3, [pc, #636]	; (20000634 <main+0x438>)
200003b8:	22dc      	movs	r2, #220	; 0xdc
200003ba:	0092      	lsls	r2, r2, #2
200003bc:	4694      	mov	ip, r2
200003be:	44bc      	add	ip, r7
200003c0:	4463      	add	r3, ip
200003c2:	2201      	movs	r2, #1
200003c4:	609a      	str	r2, [r3, #8]
	
	GameObject bird;
	init_bird( &bird );
200003c6:	2381      	movs	r3, #129	; 0x81
200003c8:	009b      	lsls	r3, r3, #2
200003ca:	18fb      	adds	r3, r7, r3
200003cc:	0018      	movs	r0, r3
200003ce:	f001 f98d 	bl	200016ec <init_bird>
	bird.xPos = 180;
200003d2:	4b99      	ldr	r3, [pc, #612]	; (20000638 <main+0x43c>)
200003d4:	22dc      	movs	r2, #220	; 0xdc
200003d6:	0092      	lsls	r2, r2, #2
200003d8:	4694      	mov	ip, r2
200003da:	44bc      	add	ip, r7
200003dc:	4463      	add	r3, ip
200003de:	22b4      	movs	r2, #180	; 0xb4
200003e0:	605a      	str	r2, [r3, #4]
	bird.yPos = 40;
200003e2:	4b95      	ldr	r3, [pc, #596]	; (20000638 <main+0x43c>)
200003e4:	22dc      	movs	r2, #220	; 0xdc
200003e6:	0092      	lsls	r2, r2, #2
200003e8:	4694      	mov	ip, r2
200003ea:	44bc      	add	ip, r7
200003ec:	4463      	add	r3, ip
200003ee:	2228      	movs	r2, #40	; 0x28
200003f0:	609a      	str	r2, [r3, #8]
	bird.update = gameObjectUpdate;
200003f2:	4b91      	ldr	r3, [pc, #580]	; (20000638 <main+0x43c>)
200003f4:	22dc      	movs	r2, #220	; 0xdc
200003f6:	0092      	lsls	r2, r2, #2
200003f8:	4694      	mov	ip, r2
200003fa:	44bc      	add	ip, r7
200003fc:	4463      	add	r3, ip
200003fe:	4a8f      	ldr	r2, [pc, #572]	; (2000063c <main+0x440>)
20000400:	60da      	str	r2, [r3, #12]
	
	GameObject DIP;
	init_DIP( &DIP );
20000402:	23f0      	movs	r3, #240	; 0xf0
20000404:	005b      	lsls	r3, r3, #1
20000406:	18fb      	adds	r3, r7, r3
20000408:	0018      	movs	r0, r3
2000040a:	f001 fbd7 	bl	20001bbc <init_DIP>
	DIP.update = DIPUpdate;
2000040e:	4b8c      	ldr	r3, [pc, #560]	; (20000640 <main+0x444>)
20000410:	22dc      	movs	r2, #220	; 0xdc
20000412:	0092      	lsls	r2, r2, #2
20000414:	4694      	mov	ip, r2
20000416:	44bc      	add	ip, r7
20000418:	4463      	add	r3, ip
2000041a:	4a8a      	ldr	r2, [pc, #552]	; (20000644 <main+0x448>)
2000041c:	60da      	str	r2, [r3, #12]
	
	GameObject player;
	init_witch( &player );
2000041e:	23de      	movs	r3, #222	; 0xde
20000420:	005b      	lsls	r3, r3, #1
20000422:	18fb      	adds	r3, r7, r3
20000424:	0018      	movs	r0, r3
20000426:	f001 faad 	bl	20001984 <init_witch>
	player.xPos = 3;
2000042a:	4b87      	ldr	r3, [pc, #540]	; (20000648 <main+0x44c>)
2000042c:	22dc      	movs	r2, #220	; 0xdc
2000042e:	0092      	lsls	r2, r2, #2
20000430:	4694      	mov	ip, r2
20000432:	44bc      	add	ip, r7
20000434:	4463      	add	r3, ip
20000436:	2203      	movs	r2, #3
20000438:	605a      	str	r2, [r3, #4]
	player.yPos = LIMIT_DOWN - 1; //player position
2000043a:	4b83      	ldr	r3, [pc, #524]	; (20000648 <main+0x44c>)
2000043c:	22dc      	movs	r2, #220	; 0xdc
2000043e:	0092      	lsls	r2, r2, #2
20000440:	4694      	mov	ip, r2
20000442:	44bc      	add	ip, r7
20000444:	4463      	add	r3, ip
20000446:	2226      	movs	r2, #38	; 0x26
20000448:	609a      	str	r2, [r3, #8]
	player.update = playerUpdate;
2000044a:	4b7f      	ldr	r3, [pc, #508]	; (20000648 <main+0x44c>)
2000044c:	22dc      	movs	r2, #220	; 0xdc
2000044e:	0092      	lsls	r2, r2, #2
20000450:	4694      	mov	ip, r2
20000452:	44bc      	add	ip, r7
20000454:	4463      	add	r3, ip
20000456:	4a6b      	ldr	r2, [pc, #428]	; (20000604 <main+0x408>)
20000458:	60da      	str	r2, [r3, #12]
	
	GameObject fire2;
	init_fire( &fire2 );
2000045a:	23cc      	movs	r3, #204	; 0xcc
2000045c:	005b      	lsls	r3, r3, #1
2000045e:	18fb      	adds	r3, r7, r3
20000460:	0018      	movs	r0, r3
20000462:	f000 fec1 	bl	200011e8 <init_fire>
	GameObject fire3;
	init_fire( &fire3 );
20000466:	23ba      	movs	r3, #186	; 0xba
20000468:	005b      	lsls	r3, r3, #1
2000046a:	18fb      	adds	r3, r7, r3
2000046c:	0018      	movs	r0, r3
2000046e:	f000 febb 	bl	200011e8 <init_fire>
	GameObject fire4;
	init_fire( &fire4 );
20000472:	23a8      	movs	r3, #168	; 0xa8
20000474:	005b      	lsls	r3, r3, #1
20000476:	18fb      	adds	r3, r7, r3
20000478:	0018      	movs	r0, r3
2000047a:	f000 feb5 	bl	200011e8 <init_fire>
	GameObject fire1;
	init_fire( &fire1 );
2000047e:	2396      	movs	r3, #150	; 0x96
20000480:	005b      	lsls	r3, r3, #1
20000482:	18fb      	adds	r3, r7, r3
20000484:	0018      	movs	r0, r3
20000486:	f000 feaf 	bl	200011e8 <init_fire>
	GameObject fire1_indoors;
	init_fire( &fire1_indoors );
2000048a:	2384      	movs	r3, #132	; 0x84
2000048c:	005b      	lsls	r3, r3, #1
2000048e:	18fb      	adds	r3, r7, r3
20000490:	0018      	movs	r0, r3
20000492:	f000 fea9 	bl	200011e8 <init_fire>
	fire1_indoors.xPos = 50;		//FIRE1_INDO
20000496:	4b6d      	ldr	r3, [pc, #436]	; (2000064c <main+0x450>)
20000498:	22dc      	movs	r2, #220	; 0xdc
2000049a:	0092      	lsls	r2, r2, #2
2000049c:	4694      	mov	ip, r2
2000049e:	44bc      	add	ip, r7
200004a0:	4463      	add	r3, ip
200004a2:	2232      	movs	r2, #50	; 0x32
200004a4:	605a      	str	r2, [r3, #4]
	fire1_indoors.yPos = 64-12-7;
200004a6:	4b69      	ldr	r3, [pc, #420]	; (2000064c <main+0x450>)
200004a8:	22dc      	movs	r2, #220	; 0xdc
200004aa:	0092      	lsls	r2, r2, #2
200004ac:	4694      	mov	ip, r2
200004ae:	44bc      	add	ip, r7
200004b0:	4463      	add	r3, ip
200004b2:	222d      	movs	r2, #45	; 0x2d
200004b4:	609a      	str	r2, [r3, #8]
	fire1_indoors.update = gameObjectUpdate;
200004b6:	4b65      	ldr	r3, [pc, #404]	; (2000064c <main+0x450>)
200004b8:	22dc      	movs	r2, #220	; 0xdc
200004ba:	0092      	lsls	r2, r2, #2
200004bc:	4694      	mov	ip, r2
200004be:	44bc      	add	ip, r7
200004c0:	4463      	add	r3, ip
200004c2:	4a5e      	ldr	r2, [pc, #376]	; (2000063c <main+0x440>)
200004c4:	60da      	str	r2, [r3, #12]
	
	fire2.xPos = 98;
200004c6:	4b62      	ldr	r3, [pc, #392]	; (20000650 <main+0x454>)
200004c8:	22dc      	movs	r2, #220	; 0xdc
200004ca:	0092      	lsls	r2, r2, #2
200004cc:	4694      	mov	ip, r2
200004ce:	44bc      	add	ip, r7
200004d0:	4463      	add	r3, ip
200004d2:	2262      	movs	r2, #98	; 0x62
200004d4:	605a      	str	r2, [r3, #4]
	fire2.yPos = 26-12;
200004d6:	4b5e      	ldr	r3, [pc, #376]	; (20000650 <main+0x454>)
200004d8:	22dc      	movs	r2, #220	; 0xdc
200004da:	0092      	lsls	r2, r2, #2
200004dc:	4694      	mov	ip, r2
200004de:	44bc      	add	ip, r7
200004e0:	4463      	add	r3, ip
200004e2:	220e      	movs	r2, #14
200004e4:	609a      	str	r2, [r3, #8]
	fire3.xPos = 115;
200004e6:	4b5b      	ldr	r3, [pc, #364]	; (20000654 <main+0x458>)
200004e8:	22dc      	movs	r2, #220	; 0xdc
200004ea:	0092      	lsls	r2, r2, #2
200004ec:	4694      	mov	ip, r2
200004ee:	44bc      	add	ip, r7
200004f0:	4463      	add	r3, ip
200004f2:	2273      	movs	r2, #115	; 0x73
200004f4:	605a      	str	r2, [r3, #4]
	fire3.yPos = 34-12;
200004f6:	4b57      	ldr	r3, [pc, #348]	; (20000654 <main+0x458>)
200004f8:	22dc      	movs	r2, #220	; 0xdc
200004fa:	0092      	lsls	r2, r2, #2
200004fc:	4694      	mov	ip, r2
200004fe:	44bc      	add	ip, r7
20000500:	4463      	add	r3, ip
20000502:	2216      	movs	r2, #22
20000504:	609a      	str	r2, [r3, #8]
	
	fire1.xPos = 85;
20000506:	4b54      	ldr	r3, [pc, #336]	; (20000658 <main+0x45c>)
20000508:	22dc      	movs	r2, #220	; 0xdc
2000050a:	0092      	lsls	r2, r2, #2
2000050c:	4694      	mov	ip, r2
2000050e:	44bc      	add	ip, r7
20000510:	4463      	add	r3, ip
20000512:	2255      	movs	r2, #85	; 0x55
20000514:	605a      	str	r2, [r3, #4]
	fire1.yPos = 23-12;
20000516:	4b50      	ldr	r3, [pc, #320]	; (20000658 <main+0x45c>)
20000518:	22dc      	movs	r2, #220	; 0xdc
2000051a:	0092      	lsls	r2, r2, #2
2000051c:	4694      	mov	ip, r2
2000051e:	44bc      	add	ip, r7
20000520:	4463      	add	r3, ip
20000522:	220b      	movs	r2, #11
20000524:	609a      	str	r2, [r3, #8]
	fire4.xPos = 71;
20000526:	4b4d      	ldr	r3, [pc, #308]	; (2000065c <main+0x460>)
20000528:	22dc      	movs	r2, #220	; 0xdc
2000052a:	0092      	lsls	r2, r2, #2
2000052c:	4694      	mov	ip, r2
2000052e:	44bc      	add	ip, r7
20000530:	4463      	add	r3, ip
20000532:	2247      	movs	r2, #71	; 0x47
20000534:	605a      	str	r2, [r3, #4]
	fire4.yPos = 27-11;
20000536:	4b49      	ldr	r3, [pc, #292]	; (2000065c <main+0x460>)
20000538:	22dc      	movs	r2, #220	; 0xdc
2000053a:	0092      	lsls	r2, r2, #2
2000053c:	4694      	mov	ip, r2
2000053e:	44bc      	add	ip, r7
20000540:	4463      	add	r3, ip
20000542:	2210      	movs	r2, #16
20000544:	609a      	str	r2, [r3, #8]
	//draw_game_object(&castleObj);
	
	fire2.animation_speed = 2;
20000546:	4b42      	ldr	r3, [pc, #264]	; (20000650 <main+0x454>)
20000548:	22dc      	movs	r2, #220	; 0xdc
2000054a:	0092      	lsls	r2, r2, #2
2000054c:	4694      	mov	ip, r2
2000054e:	44bc      	add	ip, r7
20000550:	4463      	add	r3, ip
20000552:	2202      	movs	r2, #2
20000554:	61da      	str	r2, [r3, #28]
	fire3.animation_speed = 2;
20000556:	4b3f      	ldr	r3, [pc, #252]	; (20000654 <main+0x458>)
20000558:	22dc      	movs	r2, #220	; 0xdc
2000055a:	0092      	lsls	r2, r2, #2
2000055c:	4694      	mov	ip, r2
2000055e:	44bc      	add	ip, r7
20000560:	4463      	add	r3, ip
20000562:	2202      	movs	r2, #2
20000564:	61da      	str	r2, [r3, #28]
	fire1.animation_speed = 2;
20000566:	4b3c      	ldr	r3, [pc, #240]	; (20000658 <main+0x45c>)
20000568:	22dc      	movs	r2, #220	; 0xdc
2000056a:	0092      	lsls	r2, r2, #2
2000056c:	4694      	mov	ip, r2
2000056e:	44bc      	add	ip, r7
20000570:	4463      	add	r3, ip
20000572:	2202      	movs	r2, #2
20000574:	61da      	str	r2, [r3, #28]
	fire4.animation_speed = 2;
20000576:	4b39      	ldr	r3, [pc, #228]	; (2000065c <main+0x460>)
20000578:	22dc      	movs	r2, #220	; 0xdc
2000057a:	0092      	lsls	r2, r2, #2
2000057c:	4694      	mov	ip, r2
2000057e:	44bc      	add	ip, r7
20000580:	4463      	add	r3, ip
20000582:	2202      	movs	r2, #2
20000584:	61da      	str	r2, [r3, #28]
	
	fire2.update = gameObjectUpdate;
20000586:	4b32      	ldr	r3, [pc, #200]	; (20000650 <main+0x454>)
20000588:	22dc      	movs	r2, #220	; 0xdc
2000058a:	0092      	lsls	r2, r2, #2
2000058c:	4694      	mov	ip, r2
2000058e:	44bc      	add	ip, r7
20000590:	4463      	add	r3, ip
20000592:	4a2a      	ldr	r2, [pc, #168]	; (2000063c <main+0x440>)
20000594:	60da      	str	r2, [r3, #12]
	fire3.update = gameObjectUpdate;
20000596:	4b2f      	ldr	r3, [pc, #188]	; (20000654 <main+0x458>)
20000598:	22dc      	movs	r2, #220	; 0xdc
2000059a:	0092      	lsls	r2, r2, #2
2000059c:	4694      	mov	ip, r2
2000059e:	44bc      	add	ip, r7
200005a0:	4463      	add	r3, ip
200005a2:	4a26      	ldr	r2, [pc, #152]	; (2000063c <main+0x440>)
200005a4:	60da      	str	r2, [r3, #12]
	fire1.update = gameObjectUpdate;
200005a6:	4b2c      	ldr	r3, [pc, #176]	; (20000658 <main+0x45c>)
200005a8:	22dc      	movs	r2, #220	; 0xdc
200005aa:	0092      	lsls	r2, r2, #2
200005ac:	4694      	mov	ip, r2
200005ae:	44bc      	add	ip, r7
200005b0:	4463      	add	r3, ip
200005b2:	4a22      	ldr	r2, [pc, #136]	; (2000063c <main+0x440>)
200005b4:	60da      	str	r2, [r3, #12]
	fire4.update = gameObjectUpdate;
200005b6:	4b29      	ldr	r3, [pc, #164]	; (2000065c <main+0x460>)
200005b8:	22dc      	movs	r2, #220	; 0xdc
200005ba:	0092      	lsls	r2, r2, #2
200005bc:	4694      	mov	ip, r2
200005be:	44bc      	add	ip, r7
200005c0:	4463      	add	r3, ip
200005c2:	4a1e      	ldr	r2, [pc, #120]	; (2000063c <main+0x440>)
200005c4:	60da      	str	r2, [r3, #12]
	SlowText text8;
	SlowText text9;
	SlowText text10;
	SlowText text11;
	SlowText text12;
	init_slow_text(&text_kra, "*KRA!* *KRA!*", "   ", 1);
200005c6:	4a26      	ldr	r2, [pc, #152]	; (20000660 <main+0x464>)
200005c8:	4926      	ldr	r1, [pc, #152]	; (20000664 <main+0x468>)
200005ca:	23f4      	movs	r3, #244	; 0xf4
200005cc:	18f8      	adds	r0, r7, r3
200005ce:	2301      	movs	r3, #1
200005d0:	f002 fde7 	bl	200031a2 <init_slow_text>
	init_slow_text(&text1, "For centuries the", "DILs-witches have", 1);
200005d4:	4a24      	ldr	r2, [pc, #144]	; (20000668 <main+0x46c>)
200005d6:	4925      	ldr	r1, [pc, #148]	; (2000066c <main+0x470>)
200005d8:	23e0      	movs	r3, #224	; 0xe0
200005da:	18f8      	adds	r0, r7, r3
200005dc:	2301      	movs	r3, #1
200005de:	f002 fde0 	bl	200031a2 <init_slow_text>
	init_slow_text(&text2, "coiled in fear,", "    ", 1);
200005e2:	4a23      	ldr	r2, [pc, #140]	; (20000670 <main+0x474>)
200005e4:	4923      	ldr	r1, [pc, #140]	; (20000674 <main+0x478>)
200005e6:	23cc      	movs	r3, #204	; 0xcc
200005e8:	18f8      	adds	r0, r7, r3
200005ea:	2301      	movs	r3, #1
200005ec:	f002 fdd9 	bl	200031a2 <init_slow_text>
	init_slow_text(&text3, "whenever they hear", "that a DIPs-witch", 1);
200005f0:	4a21      	ldr	r2, [pc, #132]	; (20000678 <main+0x47c>)
200005f2:	e043      	b.n	2000067c <main+0x480>
200005f4:	fffffc8c 			; <UNDEFINED> instruction: 0xfffffc8c
200005f8:	200035ac 	andcs	r3, r0, ip, lsr #11
200005fc:	2000366c 	andcs	r3, r0, ip, ror #12
20000600:	20003658 	andcs	r3, r0, r8, asr r6
20000604:	2000130d 	andcs	r1, r0, sp, lsl #6
20000608:	2000367c 	andcs	r3, r0, ip, ror r6
2000060c:	20003648 	andcs	r3, r0, r8, asr #12
20000610:	2000365c 	andcs	r3, r0, ip, asr r6
20000614:	20003668 	andcs	r3, r0, r8, ror #12
20000618:	200035e4 	andcs	r3, r0, r4, ror #11
2000061c:	2000362c 	andcs	r3, r0, ip, lsr #12
20000620:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20000624:	200035d4 	ldrdcs	r3, [r0], -r4
20000628:	20003660 	andcs	r3, r0, r0, ror #12
2000062c:	20003610 	andcs	r3, r0, r0, lsl r6
20000630:	fffffedc 			; <UNDEFINED> instruction: 0xfffffedc
20000634:	fffffeb8 			; <UNDEFINED> instruction: 0xfffffeb8
20000638:	fffffe94 			; <UNDEFINED> instruction: 0xfffffe94
2000063c:	2000101d 	andcs	r1, r0, sp, lsl r0
20000640:	fffffe70 			; <UNDEFINED> instruction: 0xfffffe70
20000644:	20001cb5 			; <UNDEFINED> instruction: 0x20001cb5
20000648:	fffffe4c 			; <UNDEFINED> instruction: 0xfffffe4c
2000064c:	fffffd98 			; <UNDEFINED> instruction: 0xfffffd98
20000650:	fffffe28 			; <UNDEFINED> instruction: 0xfffffe28
20000654:	fffffe04 			; <UNDEFINED> instruction: 0xfffffe04
20000658:	fffffdbc 			; <UNDEFINED> instruction: 0xfffffdbc
2000065c:	fffffde0 			; <UNDEFINED> instruction: 0xfffffde0
20000660:	200093ac 	andcs	r9, r0, ip, lsr #7
20000664:	200093b0 			; <UNDEFINED> instruction: 0x200093b0
20000668:	200093c0 	andcs	r9, r0, r0, asr #7
2000066c:	200093d4 	ldrdcs	r9, [r0], -r4
20000670:	200093e8 	andcs	r9, r0, r8, ror #7
20000674:	200093f0 	strdcs	r9, [r0], -r0
20000678:	20009400 	andcs	r9, r0, r0, lsl #8
2000067c:	49d8      	ldr	r1, [pc, #864]	; (200009e0 <main+0x7e4>)
2000067e:	23b8      	movs	r3, #184	; 0xb8
20000680:	18f8      	adds	r0, r7, r3
20000682:	2301      	movs	r3, #1
20000684:	f002 fd8d 	bl	200031a2 <init_slow_text>
	init_slow_text(&text4, "is near.", "   ", 1);
20000688:	4ad6      	ldr	r2, [pc, #856]	; (200009e4 <main+0x7e8>)
2000068a:	49d7      	ldr	r1, [pc, #860]	; (200009e8 <main+0x7ec>)
2000068c:	23a4      	movs	r3, #164	; 0xa4
2000068e:	18f8      	adds	r0, r7, r3
20000690:	2301      	movs	r3, #1
20000692:	f002 fd86 	bl	200031a2 <init_slow_text>
	init_slow_text(&text5, "So it is quite", "surprising, finding", 1);
20000696:	4ad5      	ldr	r2, [pc, #852]	; (200009ec <main+0x7f0>)
20000698:	49d5      	ldr	r1, [pc, #852]	; (200009f0 <main+0x7f4>)
2000069a:	2390      	movs	r3, #144	; 0x90
2000069c:	18f8      	adds	r0, r7, r3
2000069e:	2301      	movs	r3, #1
200006a0:	f002 fd7f 	bl	200031a2 <init_slow_text>
	init_slow_text(&text6, "you here,", "    ", 1);
200006a4:	4ad3      	ldr	r2, [pc, #844]	; (200009f4 <main+0x7f8>)
200006a6:	49d4      	ldr	r1, [pc, #848]	; (200009f8 <main+0x7fc>)
200006a8:	237c      	movs	r3, #124	; 0x7c
200006aa:	18f8      	adds	r0, r7, r3
200006ac:	2301      	movs	r3, #1
200006ae:	f002 fd78 	bl	200031a2 <init_slow_text>
	init_slow_text(&text7, "queen Daffo of DILs,", "heir to king Lear.", 1);
200006b2:	4ad2      	ldr	r2, [pc, #840]	; (200009fc <main+0x800>)
200006b4:	49d2      	ldr	r1, [pc, #840]	; (20000a00 <main+0x804>)
200006b6:	2368      	movs	r3, #104	; 0x68
200006b8:	18f8      	adds	r0, r7, r3
200006ba:	2301      	movs	r3, #1
200006bc:	f002 fd71 	bl	200031a2 <init_slow_text>
	init_slow_text(&text8, "But maybe you're", "tempted, to loot", 1);
200006c0:	4ad0      	ldr	r2, [pc, #832]	; (20000a04 <main+0x808>)
200006c2:	49d1      	ldr	r1, [pc, #836]	; (20000a08 <main+0x80c>)
200006c4:	2354      	movs	r3, #84	; 0x54
200006c6:	18f8      	adds	r0, r7, r3
200006c8:	2301      	movs	r3, #1
200006ca:	f002 fd6a 	bl	200031a2 <init_slow_text>
	init_slow_text(&text9, "from the riches,", "    ", 1);
200006ce:	4ac9      	ldr	r2, [pc, #804]	; (200009f4 <main+0x7f8>)
200006d0:	49ce      	ldr	r1, [pc, #824]	; (20000a0c <main+0x810>)
200006d2:	2340      	movs	r3, #64	; 0x40
200006d4:	18f8      	adds	r0, r7, r3
200006d6:	2301      	movs	r3, #1
200006d8:	f002 fd63 	bl	200031a2 <init_slow_text>
	init_slow_text(&text12, "wicked DIPs-witches.", "    ", 1);
200006dc:	4ac5      	ldr	r2, [pc, #788]	; (200009f4 <main+0x7f8>)
200006de:	49cc      	ldr	r1, [pc, #816]	; (20000a10 <main+0x814>)
200006e0:	1d38      	adds	r0, r7, #4
200006e2:	2301      	movs	r3, #1
200006e4:	f002 fd5d 	bl	200031a2 <init_slow_text>
	init_slow_text(&text10, "so grippily trea-", "sured by", 1);
200006e8:	4aca      	ldr	r2, [pc, #808]	; (20000a14 <main+0x818>)
200006ea:	49cb      	ldr	r1, [pc, #812]	; (20000a18 <main+0x81c>)
200006ec:	232c      	movs	r3, #44	; 0x2c
200006ee:	18f8      	adds	r0, r7, r3
200006f0:	2301      	movs	r3, #1
200006f2:	f002 fd56 	bl	200031a2 <init_slow_text>
	init_slow_text(&text11, "Enter, brave witch,", "- reset the switch!", 1);
200006f6:	4ac9      	ldr	r2, [pc, #804]	; (20000a1c <main+0x820>)
200006f8:	49c9      	ldr	r1, [pc, #804]	; (20000a20 <main+0x824>)
200006fa:	2318      	movs	r3, #24
200006fc:	18f8      	adds	r0, r7, r3
200006fe:	2301      	movs	r3, #1
20000700:	f002 fd4f 	bl	200031a2 <init_slow_text>
	//ascii_write_part("Yeeaaah!!!", "This is working! :)", 5, 10);
	set_up_ascii();
20000704:	f002 fc2a 	bl	20002f5c <set_up_ascii>
	set_up_DIL();
20000708:	f002 fa58 	bl	20002bbc <set_up_DIL>
	clear_ascii();
2000070c:	f002 fc2f 	bl	20002f6e <clear_ascii>
	
	int is_climbing = 0;
20000710:	2300      	movs	r3, #0
20000712:	22db      	movs	r2, #219	; 0xdb
20000714:	0092      	lsls	r2, r2, #2
20000716:	18ba      	adds	r2, r7, r2
20000718:	6013      	str	r3, [r2, #0]
	int has_climbed = 0;
2000071a:	2300      	movs	r3, #0
2000071c:	22da      	movs	r2, #218	; 0xda
2000071e:	0092      	lsls	r2, r2, #2
20000720:	18ba      	adds	r2, r7, r2
20000722:	6013      	str	r3, [r2, #0]
	int game_over = 0;
20000724:	2300      	movs	r3, #0
20000726:	22d9      	movs	r2, #217	; 0xd9
20000728:	0092      	lsls	r2, r2, #2
2000072a:	18ba      	adds	r2, r7, r2
2000072c:	6013      	str	r3, [r2, #0]
	int game_over_adder = 0;
2000072e:	2300      	movs	r3, #0
20000730:	22d8      	movs	r2, #216	; 0xd8
20000732:	0092      	lsls	r2, r2, #2
20000734:	18ba      	adds	r2, r7, r2
20000736:	6013      	str	r3, [r2, #0]
	
	
	current_screen = RESET_GAME;
20000738:	4bba      	ldr	r3, [pc, #744]	; (20000a24 <main+0x828>)
2000073a:	220a      	movs	r2, #10
2000073c:	601a      	str	r2, [r3, #0]
	
	//Game loop
	while(1) {
			
		switch(current_screen) {
2000073e:	4bb9      	ldr	r3, [pc, #740]	; (20000a24 <main+0x828>)
20000740:	681b      	ldr	r3, [r3, #0]
20000742:	2b01      	cmp	r3, #1
20000744:	d020      	beq.n	20000788 <main+0x58c>
20000746:	dc02      	bgt.n	2000074e <main+0x552>
20000748:	2b00      	cmp	r3, #0
2000074a:	d011      	beq.n	20000770 <main+0x574>
2000074c:	e7f7      	b.n	2000073e <main+0x542>
2000074e:	2b02      	cmp	r3, #2
20000750:	d100      	bne.n	20000754 <main+0x558>
20000752:	e2a3      	b.n	20000c9c <main+0xaa0>
20000754:	2b0a      	cmp	r3, #10
20000756:	d101      	bne.n	2000075c <main+0x560>
20000758:	f000 fbdb 	bl	20000f12 <main+0xd16>
2000075c:	e7ef      	b.n	2000073e <main+0x542>
			
			case SWITCH_LOCK: //before

				while(read_DIL() == 0){
					draw_game_object(&pressObj);
2000075e:	23b1      	movs	r3, #177	; 0xb1
20000760:	009b      	lsls	r3, r3, #2
20000762:	18fb      	adds	r3, r7, r3
20000764:	0018      	movs	r0, r3
20000766:	f002 f98b 	bl	20002a80 <draw_game_object>
					show_frame(1);
2000076a:	2001      	movs	r0, #1
2000076c:	f002 f9c9 	bl	20002b02 <show_frame>
				while(read_DIL() == 0){
20000770:	f002 fa30 	bl	20002bd4 <read_DIL>
20000774:	1e03      	subs	r3, r0, #0
20000776:	d0f2      	beq.n	2000075e <main+0x562>
				}
				
				counter = 0;
20000778:	4bab      	ldr	r3, [pc, #684]	; (20000a28 <main+0x82c>)
2000077a:	2200      	movs	r2, #0
2000077c:	601a      	str	r2, [r3, #0]
				current_screen = START_SCREEN;
2000077e:	4ba9      	ldr	r3, [pc, #676]	; (20000a24 <main+0x828>)
20000780:	2201      	movs	r2, #1
20000782:	601a      	str	r2, [r3, #0]
				break;
20000784:	f000 fc30 	bl	20000fe8 <main+0xdec>
			
			
			case START_SCREEN: //outside
				
				counter++;
20000788:	4ba7      	ldr	r3, [pc, #668]	; (20000a28 <main+0x82c>)
2000078a:	681b      	ldr	r3, [r3, #0]
2000078c:	1c5a      	adds	r2, r3, #1
2000078e:	4ba6      	ldr	r3, [pc, #664]	; (20000a28 <main+0x82c>)
20000790:	601a      	str	r2, [r3, #0]
				
				if(titleObj.yPos < 1) {
20000792:	23c0      	movs	r3, #192	; 0xc0
20000794:	009b      	lsls	r3, r3, #2
20000796:	18fb      	adds	r3, r7, r3
20000798:	689b      	ldr	r3, [r3, #8]
2000079a:	2b00      	cmp	r3, #0
2000079c:	dc08      	bgt.n	200007b0 <main+0x5b4>
					titleObj.yPos++;
2000079e:	23c0      	movs	r3, #192	; 0xc0
200007a0:	009b      	lsls	r3, r3, #2
200007a2:	18fb      	adds	r3, r7, r3
200007a4:	689b      	ldr	r3, [r3, #8]
200007a6:	1c5a      	adds	r2, r3, #1
200007a8:	23c0      	movs	r3, #192	; 0xc0
200007aa:	009b      	lsls	r3, r3, #2
200007ac:	18fb      	adds	r3, r7, r3
200007ae:	609a      	str	r2, [r3, #8]
				}
				
				draw_game_object(&castleObj);
200007b0:	23a2      	movs	r3, #162	; 0xa2
200007b2:	009b      	lsls	r3, r3, #2
200007b4:	18fb      	adds	r3, r7, r3
200007b6:	0018      	movs	r0, r3
200007b8:	f002 f962 	bl	20002a80 <draw_game_object>
				draw_game_object(&fire2);
200007bc:	23cc      	movs	r3, #204	; 0xcc
200007be:	005b      	lsls	r3, r3, #1
200007c0:	18fb      	adds	r3, r7, r3
200007c2:	0018      	movs	r0, r3
200007c4:	f002 f95c 	bl	20002a80 <draw_game_object>
				draw_game_object(&fire3);
200007c8:	23ba      	movs	r3, #186	; 0xba
200007ca:	005b      	lsls	r3, r3, #1
200007cc:	18fb      	adds	r3, r7, r3
200007ce:	0018      	movs	r0, r3
200007d0:	f002 f956 	bl	20002a80 <draw_game_object>
				draw_game_object(&fire1);
200007d4:	2396      	movs	r3, #150	; 0x96
200007d6:	005b      	lsls	r3, r3, #1
200007d8:	18fb      	adds	r3, r7, r3
200007da:	0018      	movs	r0, r3
200007dc:	f002 f950 	bl	20002a80 <draw_game_object>
				draw_game_object(&fire4);
200007e0:	23a8      	movs	r3, #168	; 0xa8
200007e2:	005b      	lsls	r3, r3, #1
200007e4:	18fb      	adds	r3, r7, r3
200007e6:	0018      	movs	r0, r3
200007e8:	f002 f94a 	bl	20002a80 <draw_game_object>
				draw_game_object(&titleObj);
200007ec:	23c0      	movs	r3, #192	; 0xc0
200007ee:	009b      	lsls	r3, r3, #2
200007f0:	18fb      	adds	r3, r7, r3
200007f2:	0018      	movs	r0, r3
200007f4:	f002 f944 	bl	20002a80 <draw_game_object>
				draw_game_object(&bird);
200007f8:	2381      	movs	r3, #129	; 0x81
200007fa:	009b      	lsls	r3, r3, #2
200007fc:	18fb      	adds	r3, r7, r3
200007fe:	0018      	movs	r0, r3
20000800:	f002 f93e 	bl	20002a80 <draw_game_object>
				show_frame(1);
20000804:	2001      	movs	r0, #1
20000806:	f002 f97c 	bl	20002b02 <show_frame>
				
				static int long_text = 40;
				static int short_text = 20;
				static int delay_until_text = 130;
				
				if (counter < delay_until_text - 55 && counter > delay_until_text - 90)
2000080a:	4b88      	ldr	r3, [pc, #544]	; (20000a2c <main+0x830>)
2000080c:	681b      	ldr	r3, [r3, #0]
2000080e:	3b37      	subs	r3, #55	; 0x37
20000810:	001a      	movs	r2, r3
20000812:	4b85      	ldr	r3, [pc, #532]	; (20000a28 <main+0x82c>)
20000814:	681b      	ldr	r3, [r3, #0]
20000816:	429a      	cmp	r2, r3
20000818:	dd13      	ble.n	20000842 <main+0x646>
2000081a:	4b84      	ldr	r3, [pc, #528]	; (20000a2c <main+0x830>)
2000081c:	681b      	ldr	r3, [r3, #0]
2000081e:	3b5a      	subs	r3, #90	; 0x5a
20000820:	001a      	movs	r2, r3
20000822:	4b81      	ldr	r3, [pc, #516]	; (20000a28 <main+0x82c>)
20000824:	681b      	ldr	r3, [r3, #0]
20000826:	429a      	cmp	r2, r3
20000828:	da0b      	bge.n	20000842 <main+0x646>
					text_kra.display(&text_kra, 20);
2000082a:	4b81      	ldr	r3, [pc, #516]	; (20000a30 <main+0x834>)
2000082c:	22dc      	movs	r2, #220	; 0xdc
2000082e:	0092      	lsls	r2, r2, #2
20000830:	4694      	mov	ip, r2
20000832:	44bc      	add	ip, r7
20000834:	4463      	add	r3, ip
20000836:	691b      	ldr	r3, [r3, #16]
20000838:	22f4      	movs	r2, #244	; 0xf4
2000083a:	18ba      	adds	r2, r7, r2
2000083c:	2114      	movs	r1, #20
2000083e:	0010      	movs	r0, r2
20000840:	4798      	blx	r3
				if (counter == delay_until_text - 25)
20000842:	4b7a      	ldr	r3, [pc, #488]	; (20000a2c <main+0x830>)
20000844:	681b      	ldr	r3, [r3, #0]
20000846:	3b19      	subs	r3, #25
20000848:	001a      	movs	r2, r3
2000084a:	4b77      	ldr	r3, [pc, #476]	; (20000a28 <main+0x82c>)
2000084c:	681b      	ldr	r3, [r3, #0]
2000084e:	429a      	cmp	r2, r3
20000850:	d101      	bne.n	20000856 <main+0x65a>
					clear_ascii();
20000852:	f002 fb8c 	bl	20002f6e <clear_ascii>
				
				if (counter < delay_until_text);
20000856:	4b74      	ldr	r3, [pc, #464]	; (20000a28 <main+0x82c>)
20000858:	681a      	ldr	r2, [r3, #0]
2000085a:	4b74      	ldr	r3, [pc, #464]	; (20000a2c <main+0x830>)
2000085c:	681b      	ldr	r3, [r3, #0]
2000085e:	429a      	cmp	r2, r3
20000860:	da00      	bge.n	20000864 <main+0x668>
20000862:	e1a8      	b.n	20000bb6 <main+0x9ba>
				else if (counter < delay_until_text + 1*long_text)
20000864:	4b71      	ldr	r3, [pc, #452]	; (20000a2c <main+0x830>)
20000866:	681a      	ldr	r2, [r3, #0]
20000868:	4b72      	ldr	r3, [pc, #456]	; (20000a34 <main+0x838>)
2000086a:	681b      	ldr	r3, [r3, #0]
2000086c:	18d2      	adds	r2, r2, r3
2000086e:	4b6e      	ldr	r3, [pc, #440]	; (20000a28 <main+0x82c>)
20000870:	681b      	ldr	r3, [r3, #0]
20000872:	429a      	cmp	r2, r3
20000874:	dd0c      	ble.n	20000890 <main+0x694>
					text1.display(&text1, 20);
20000876:	4b70      	ldr	r3, [pc, #448]	; (20000a38 <main+0x83c>)
20000878:	22dc      	movs	r2, #220	; 0xdc
2000087a:	0092      	lsls	r2, r2, #2
2000087c:	4694      	mov	ip, r2
2000087e:	44bc      	add	ip, r7
20000880:	4463      	add	r3, ip
20000882:	691b      	ldr	r3, [r3, #16]
20000884:	22e0      	movs	r2, #224	; 0xe0
20000886:	18ba      	adds	r2, r7, r2
20000888:	2114      	movs	r1, #20
2000088a:	0010      	movs	r0, r2
2000088c:	4798      	blx	r3
2000088e:	e192      	b.n	20000bb6 <main+0x9ba>
				else if(counter < delay_until_text + 1*long_text + 1*short_text)
20000890:	4b66      	ldr	r3, [pc, #408]	; (20000a2c <main+0x830>)
20000892:	681a      	ldr	r2, [r3, #0]
20000894:	4b67      	ldr	r3, [pc, #412]	; (20000a34 <main+0x838>)
20000896:	681b      	ldr	r3, [r3, #0]
20000898:	18d2      	adds	r2, r2, r3
2000089a:	4b68      	ldr	r3, [pc, #416]	; (20000a3c <main+0x840>)
2000089c:	681b      	ldr	r3, [r3, #0]
2000089e:	18d2      	adds	r2, r2, r3
200008a0:	4b61      	ldr	r3, [pc, #388]	; (20000a28 <main+0x82c>)
200008a2:	681b      	ldr	r3, [r3, #0]
200008a4:	429a      	cmp	r2, r3
200008a6:	dd0c      	ble.n	200008c2 <main+0x6c6>
					text2.display(&text2, 20);
200008a8:	4b65      	ldr	r3, [pc, #404]	; (20000a40 <main+0x844>)
200008aa:	22dc      	movs	r2, #220	; 0xdc
200008ac:	0092      	lsls	r2, r2, #2
200008ae:	4694      	mov	ip, r2
200008b0:	44bc      	add	ip, r7
200008b2:	4463      	add	r3, ip
200008b4:	691b      	ldr	r3, [r3, #16]
200008b6:	22cc      	movs	r2, #204	; 0xcc
200008b8:	18ba      	adds	r2, r7, r2
200008ba:	2114      	movs	r1, #20
200008bc:	0010      	movs	r0, r2
200008be:	4798      	blx	r3
200008c0:	e179      	b.n	20000bb6 <main+0x9ba>
				else if(counter < delay_until_text + 2*long_text + 1*short_text)
200008c2:	4b5c      	ldr	r3, [pc, #368]	; (20000a34 <main+0x838>)
200008c4:	681b      	ldr	r3, [r3, #0]
200008c6:	005a      	lsls	r2, r3, #1
200008c8:	4b58      	ldr	r3, [pc, #352]	; (20000a2c <main+0x830>)
200008ca:	681b      	ldr	r3, [r3, #0]
200008cc:	18d2      	adds	r2, r2, r3
200008ce:	4b5b      	ldr	r3, [pc, #364]	; (20000a3c <main+0x840>)
200008d0:	681b      	ldr	r3, [r3, #0]
200008d2:	18d2      	adds	r2, r2, r3
200008d4:	4b54      	ldr	r3, [pc, #336]	; (20000a28 <main+0x82c>)
200008d6:	681b      	ldr	r3, [r3, #0]
200008d8:	429a      	cmp	r2, r3
200008da:	dd0c      	ble.n	200008f6 <main+0x6fa>
					text3.display(&text3, 20);
200008dc:	4b59      	ldr	r3, [pc, #356]	; (20000a44 <main+0x848>)
200008de:	22dc      	movs	r2, #220	; 0xdc
200008e0:	0092      	lsls	r2, r2, #2
200008e2:	4694      	mov	ip, r2
200008e4:	44bc      	add	ip, r7
200008e6:	4463      	add	r3, ip
200008e8:	691b      	ldr	r3, [r3, #16]
200008ea:	22b8      	movs	r2, #184	; 0xb8
200008ec:	18ba      	adds	r2, r7, r2
200008ee:	2114      	movs	r1, #20
200008f0:	0010      	movs	r0, r2
200008f2:	4798      	blx	r3
200008f4:	e15f      	b.n	20000bb6 <main+0x9ba>
				else if(counter < delay_until_text + 2*long_text + 2*short_text)
200008f6:	4b4f      	ldr	r3, [pc, #316]	; (20000a34 <main+0x838>)
200008f8:	681b      	ldr	r3, [r3, #0]
200008fa:	005a      	lsls	r2, r3, #1
200008fc:	4b4b      	ldr	r3, [pc, #300]	; (20000a2c <main+0x830>)
200008fe:	681b      	ldr	r3, [r3, #0]
20000900:	18d2      	adds	r2, r2, r3
20000902:	4b4e      	ldr	r3, [pc, #312]	; (20000a3c <main+0x840>)
20000904:	681b      	ldr	r3, [r3, #0]
20000906:	005b      	lsls	r3, r3, #1
20000908:	18d2      	adds	r2, r2, r3
2000090a:	4b47      	ldr	r3, [pc, #284]	; (20000a28 <main+0x82c>)
2000090c:	681b      	ldr	r3, [r3, #0]
2000090e:	429a      	cmp	r2, r3
20000910:	dd0c      	ble.n	2000092c <main+0x730>
					text4.display(&text4, 20);
20000912:	4b4d      	ldr	r3, [pc, #308]	; (20000a48 <main+0x84c>)
20000914:	22dc      	movs	r2, #220	; 0xdc
20000916:	0092      	lsls	r2, r2, #2
20000918:	4694      	mov	ip, r2
2000091a:	44bc      	add	ip, r7
2000091c:	4463      	add	r3, ip
2000091e:	691b      	ldr	r3, [r3, #16]
20000920:	22a4      	movs	r2, #164	; 0xa4
20000922:	18ba      	adds	r2, r7, r2
20000924:	2114      	movs	r1, #20
20000926:	0010      	movs	r0, r2
20000928:	4798      	blx	r3
2000092a:	e144      	b.n	20000bb6 <main+0x9ba>
				else if(counter < delay_until_text + 3*long_text + 2*short_text)
2000092c:	4b41      	ldr	r3, [pc, #260]	; (20000a34 <main+0x838>)
2000092e:	681a      	ldr	r2, [r3, #0]
20000930:	0013      	movs	r3, r2
20000932:	005b      	lsls	r3, r3, #1
20000934:	189a      	adds	r2, r3, r2
20000936:	4b3d      	ldr	r3, [pc, #244]	; (20000a2c <main+0x830>)
20000938:	681b      	ldr	r3, [r3, #0]
2000093a:	18d2      	adds	r2, r2, r3
2000093c:	4b3f      	ldr	r3, [pc, #252]	; (20000a3c <main+0x840>)
2000093e:	681b      	ldr	r3, [r3, #0]
20000940:	005b      	lsls	r3, r3, #1
20000942:	18d2      	adds	r2, r2, r3
20000944:	4b38      	ldr	r3, [pc, #224]	; (20000a28 <main+0x82c>)
20000946:	681b      	ldr	r3, [r3, #0]
20000948:	429a      	cmp	r2, r3
2000094a:	dd0c      	ble.n	20000966 <main+0x76a>
					text5.display(&text5, 15);
2000094c:	4b3f      	ldr	r3, [pc, #252]	; (20000a4c <main+0x850>)
2000094e:	22dc      	movs	r2, #220	; 0xdc
20000950:	0092      	lsls	r2, r2, #2
20000952:	4694      	mov	ip, r2
20000954:	44bc      	add	ip, r7
20000956:	4463      	add	r3, ip
20000958:	691b      	ldr	r3, [r3, #16]
2000095a:	2290      	movs	r2, #144	; 0x90
2000095c:	18ba      	adds	r2, r7, r2
2000095e:	210f      	movs	r1, #15
20000960:	0010      	movs	r0, r2
20000962:	4798      	blx	r3
20000964:	e127      	b.n	20000bb6 <main+0x9ba>
				else if(counter < delay_until_text + 3*long_text + 3*short_text)
20000966:	4b33      	ldr	r3, [pc, #204]	; (20000a34 <main+0x838>)
20000968:	681a      	ldr	r2, [r3, #0]
2000096a:	0013      	movs	r3, r2
2000096c:	005b      	lsls	r3, r3, #1
2000096e:	189a      	adds	r2, r3, r2
20000970:	4b2e      	ldr	r3, [pc, #184]	; (20000a2c <main+0x830>)
20000972:	681b      	ldr	r3, [r3, #0]
20000974:	18d1      	adds	r1, r2, r3
20000976:	4b31      	ldr	r3, [pc, #196]	; (20000a3c <main+0x840>)
20000978:	681a      	ldr	r2, [r3, #0]
2000097a:	0013      	movs	r3, r2
2000097c:	005b      	lsls	r3, r3, #1
2000097e:	189b      	adds	r3, r3, r2
20000980:	18ca      	adds	r2, r1, r3
20000982:	4b29      	ldr	r3, [pc, #164]	; (20000a28 <main+0x82c>)
20000984:	681b      	ldr	r3, [r3, #0]
20000986:	429a      	cmp	r2, r3
20000988:	dd0c      	ble.n	200009a4 <main+0x7a8>
					text6.display(&text6, 20);
2000098a:	4b31      	ldr	r3, [pc, #196]	; (20000a50 <main+0x854>)
2000098c:	22dc      	movs	r2, #220	; 0xdc
2000098e:	0092      	lsls	r2, r2, #2
20000990:	4694      	mov	ip, r2
20000992:	44bc      	add	ip, r7
20000994:	4463      	add	r3, ip
20000996:	691b      	ldr	r3, [r3, #16]
20000998:	227c      	movs	r2, #124	; 0x7c
2000099a:	18ba      	adds	r2, r7, r2
2000099c:	2114      	movs	r1, #20
2000099e:	0010      	movs	r0, r2
200009a0:	4798      	blx	r3
200009a2:	e108      	b.n	20000bb6 <main+0x9ba>
				else if(counter < delay_until_text + 4*long_text + 3*short_text + 3)
200009a4:	4b23      	ldr	r3, [pc, #140]	; (20000a34 <main+0x838>)
200009a6:	681b      	ldr	r3, [r3, #0]
200009a8:	009a      	lsls	r2, r3, #2
200009aa:	4b20      	ldr	r3, [pc, #128]	; (20000a2c <main+0x830>)
200009ac:	681b      	ldr	r3, [r3, #0]
200009ae:	18d1      	adds	r1, r2, r3
200009b0:	4b22      	ldr	r3, [pc, #136]	; (20000a3c <main+0x840>)
200009b2:	681a      	ldr	r2, [r3, #0]
200009b4:	0013      	movs	r3, r2
200009b6:	005b      	lsls	r3, r3, #1
200009b8:	189b      	adds	r3, r3, r2
200009ba:	18cb      	adds	r3, r1, r3
200009bc:	1cda      	adds	r2, r3, #3
200009be:	4b1a      	ldr	r3, [pc, #104]	; (20000a28 <main+0x82c>)
200009c0:	681b      	ldr	r3, [r3, #0]
200009c2:	429a      	cmp	r2, r3
200009c4:	dd48      	ble.n	20000a58 <main+0x85c>
					text7.display(&text7, 20);
200009c6:	4b23      	ldr	r3, [pc, #140]	; (20000a54 <main+0x858>)
200009c8:	22dc      	movs	r2, #220	; 0xdc
200009ca:	0092      	lsls	r2, r2, #2
200009cc:	4694      	mov	ip, r2
200009ce:	44bc      	add	ip, r7
200009d0:	4463      	add	r3, ip
200009d2:	691b      	ldr	r3, [r3, #16]
200009d4:	2268      	movs	r2, #104	; 0x68
200009d6:	18ba      	adds	r2, r7, r2
200009d8:	2114      	movs	r1, #20
200009da:	0010      	movs	r0, r2
200009dc:	4798      	blx	r3
200009de:	e0ea      	b.n	20000bb6 <main+0x9ba>
200009e0:	20009414 	andcs	r9, r0, r4, lsl r4
200009e4:	200093ac 	andcs	r9, r0, ip, lsr #7
200009e8:	20009428 	andcs	r9, r0, r8, lsr #8
200009ec:	20009434 	andcs	r9, r0, r4, lsr r4
200009f0:	20009448 	andcs	r9, r0, r8, asr #8
200009f4:	200093e8 	andcs	r9, r0, r8, ror #7
200009f8:	20009458 	andcs	r9, r0, r8, asr r4
200009fc:	20009464 	andcs	r9, r0, r4, ror #8
20000a00:	20009478 	andcs	r9, r0, r8, ror r4
20000a04:	20009490 	mulcs	r0, r0, r4
20000a08:	200094a4 	andcs	r9, r0, r4, lsr #9
20000a0c:	200094b8 			; <UNDEFINED> instruction: 0x200094b8
20000a10:	200094cc 	andcs	r9, r0, ip, asr #9
20000a14:	200094e4 	andcs	r9, r0, r4, ror #9
20000a18:	200094f0 	strdcs	r9, [r0], -r0
20000a1c:	20009504 	andcs	r9, r0, r4, lsl #10
20000a20:	20009518 	andcs	r9, r0, r8, lsl r5
20000a24:	2000712c 	andcs	r7, r0, ip, lsr #2
20000a28:	20003584 	andcs	r3, r0, r4, lsl #11
20000a2c:	20007130 	andcs	r7, r0, r0, lsr r1
20000a30:	fffffd84 			; <UNDEFINED> instruction: 0xfffffd84
20000a34:	20007134 	andcs	r7, r0, r4, lsr r1
20000a38:	fffffd70 			; <UNDEFINED> instruction: 0xfffffd70
20000a3c:	20007138 	andcs	r7, r0, r8, lsr r1
20000a40:	fffffd5c 			; <UNDEFINED> instruction: 0xfffffd5c
20000a44:	fffffd48 			; <UNDEFINED> instruction: 0xfffffd48
20000a48:	fffffd34 			; <UNDEFINED> instruction: 0xfffffd34
20000a4c:	fffffd20 			; <UNDEFINED> instruction: 0xfffffd20
20000a50:	fffffd0c 			; <UNDEFINED> instruction: 0xfffffd0c
20000a54:	fffffcf8 			; <UNDEFINED> instruction: 0xfffffcf8
				else if(counter < delay_until_text + 5*long_text + 3*short_text + 2)
20000a58:	4be0      	ldr	r3, [pc, #896]	; (20000ddc <main+0xbe0>)
20000a5a:	681a      	ldr	r2, [r3, #0]
20000a5c:	0013      	movs	r3, r2
20000a5e:	009b      	lsls	r3, r3, #2
20000a60:	189a      	adds	r2, r3, r2
20000a62:	4bdf      	ldr	r3, [pc, #892]	; (20000de0 <main+0xbe4>)
20000a64:	681b      	ldr	r3, [r3, #0]
20000a66:	18d1      	adds	r1, r2, r3
20000a68:	4bde      	ldr	r3, [pc, #888]	; (20000de4 <main+0xbe8>)
20000a6a:	681a      	ldr	r2, [r3, #0]
20000a6c:	0013      	movs	r3, r2
20000a6e:	005b      	lsls	r3, r3, #1
20000a70:	189b      	adds	r3, r3, r2
20000a72:	18cb      	adds	r3, r1, r3
20000a74:	1c9a      	adds	r2, r3, #2
20000a76:	4bdc      	ldr	r3, [pc, #880]	; (20000de8 <main+0xbec>)
20000a78:	681b      	ldr	r3, [r3, #0]
20000a7a:	429a      	cmp	r2, r3
20000a7c:	dd0c      	ble.n	20000a98 <main+0x89c>
					text8.display(&text8, 20);
20000a7e:	4bdb      	ldr	r3, [pc, #876]	; (20000dec <main+0xbf0>)
20000a80:	22dc      	movs	r2, #220	; 0xdc
20000a82:	0092      	lsls	r2, r2, #2
20000a84:	4694      	mov	ip, r2
20000a86:	44bc      	add	ip, r7
20000a88:	4463      	add	r3, ip
20000a8a:	691b      	ldr	r3, [r3, #16]
20000a8c:	2254      	movs	r2, #84	; 0x54
20000a8e:	18ba      	adds	r2, r7, r2
20000a90:	2114      	movs	r1, #20
20000a92:	0010      	movs	r0, r2
20000a94:	4798      	blx	r3
20000a96:	e08e      	b.n	20000bb6 <main+0x9ba>
				else if(counter < delay_until_text + 5*long_text + 4*short_text + 2)
20000a98:	4bd0      	ldr	r3, [pc, #832]	; (20000ddc <main+0xbe0>)
20000a9a:	681a      	ldr	r2, [r3, #0]
20000a9c:	0013      	movs	r3, r2
20000a9e:	009b      	lsls	r3, r3, #2
20000aa0:	189a      	adds	r2, r3, r2
20000aa2:	4bcf      	ldr	r3, [pc, #828]	; (20000de0 <main+0xbe4>)
20000aa4:	681b      	ldr	r3, [r3, #0]
20000aa6:	18d2      	adds	r2, r2, r3
20000aa8:	4bce      	ldr	r3, [pc, #824]	; (20000de4 <main+0xbe8>)
20000aaa:	681b      	ldr	r3, [r3, #0]
20000aac:	009b      	lsls	r3, r3, #2
20000aae:	18d3      	adds	r3, r2, r3
20000ab0:	1c9a      	adds	r2, r3, #2
20000ab2:	4bcd      	ldr	r3, [pc, #820]	; (20000de8 <main+0xbec>)
20000ab4:	681b      	ldr	r3, [r3, #0]
20000ab6:	429a      	cmp	r2, r3
20000ab8:	dd0c      	ble.n	20000ad4 <main+0x8d8>
					text9.display(&text9, 20);
20000aba:	4bcd      	ldr	r3, [pc, #820]	; (20000df0 <main+0xbf4>)
20000abc:	22dc      	movs	r2, #220	; 0xdc
20000abe:	0092      	lsls	r2, r2, #2
20000ac0:	4694      	mov	ip, r2
20000ac2:	44bc      	add	ip, r7
20000ac4:	4463      	add	r3, ip
20000ac6:	691b      	ldr	r3, [r3, #16]
20000ac8:	2240      	movs	r2, #64	; 0x40
20000aca:	18ba      	adds	r2, r7, r2
20000acc:	2114      	movs	r1, #20
20000ace:	0010      	movs	r0, r2
20000ad0:	4798      	blx	r3
20000ad2:	e070      	b.n	20000bb6 <main+0x9ba>
				else if(counter < delay_until_text + 6*long_text + 4*short_text - 2 + 2)
20000ad4:	4bc1      	ldr	r3, [pc, #772]	; (20000ddc <main+0xbe0>)
20000ad6:	681a      	ldr	r2, [r3, #0]
20000ad8:	0013      	movs	r3, r2
20000ada:	005b      	lsls	r3, r3, #1
20000adc:	189b      	adds	r3, r3, r2
20000ade:	005b      	lsls	r3, r3, #1
20000ae0:	001a      	movs	r2, r3
20000ae2:	4bbf      	ldr	r3, [pc, #764]	; (20000de0 <main+0xbe4>)
20000ae4:	681b      	ldr	r3, [r3, #0]
20000ae6:	18d2      	adds	r2, r2, r3
20000ae8:	4bbe      	ldr	r3, [pc, #760]	; (20000de4 <main+0xbe8>)
20000aea:	681b      	ldr	r3, [r3, #0]
20000aec:	009b      	lsls	r3, r3, #2
20000aee:	18d2      	adds	r2, r2, r3
20000af0:	4bbd      	ldr	r3, [pc, #756]	; (20000de8 <main+0xbec>)
20000af2:	681b      	ldr	r3, [r3, #0]
20000af4:	429a      	cmp	r2, r3
20000af6:	dd0c      	ble.n	20000b12 <main+0x916>
					text10.display(&text10, 15);
20000af8:	4bbe      	ldr	r3, [pc, #760]	; (20000df4 <main+0xbf8>)
20000afa:	22dc      	movs	r2, #220	; 0xdc
20000afc:	0092      	lsls	r2, r2, #2
20000afe:	4694      	mov	ip, r2
20000b00:	44bc      	add	ip, r7
20000b02:	4463      	add	r3, ip
20000b04:	691b      	ldr	r3, [r3, #16]
20000b06:	222c      	movs	r2, #44	; 0x2c
20000b08:	18ba      	adds	r2, r7, r2
20000b0a:	210f      	movs	r1, #15
20000b0c:	0010      	movs	r0, r2
20000b0e:	4798      	blx	r3
20000b10:	e051      	b.n	20000bb6 <main+0x9ba>
				else if(counter < delay_until_text + 6*long_text + 5*short_text + 3 + 2)
20000b12:	4bb2      	ldr	r3, [pc, #712]	; (20000ddc <main+0xbe0>)
20000b14:	681a      	ldr	r2, [r3, #0]
20000b16:	0013      	movs	r3, r2
20000b18:	005b      	lsls	r3, r3, #1
20000b1a:	189b      	adds	r3, r3, r2
20000b1c:	005b      	lsls	r3, r3, #1
20000b1e:	001a      	movs	r2, r3
20000b20:	4baf      	ldr	r3, [pc, #700]	; (20000de0 <main+0xbe4>)
20000b22:	681b      	ldr	r3, [r3, #0]
20000b24:	18d1      	adds	r1, r2, r3
20000b26:	4baf      	ldr	r3, [pc, #700]	; (20000de4 <main+0xbe8>)
20000b28:	681a      	ldr	r2, [r3, #0]
20000b2a:	0013      	movs	r3, r2
20000b2c:	009b      	lsls	r3, r3, #2
20000b2e:	189b      	adds	r3, r3, r2
20000b30:	18cb      	adds	r3, r1, r3
20000b32:	1d5a      	adds	r2, r3, #5
20000b34:	4bac      	ldr	r3, [pc, #688]	; (20000de8 <main+0xbec>)
20000b36:	681b      	ldr	r3, [r3, #0]
20000b38:	429a      	cmp	r2, r3
20000b3a:	dd0b      	ble.n	20000b54 <main+0x958>
					text12.display(&text12, 15);
20000b3c:	4bae      	ldr	r3, [pc, #696]	; (20000df8 <main+0xbfc>)
20000b3e:	22dc      	movs	r2, #220	; 0xdc
20000b40:	0092      	lsls	r2, r2, #2
20000b42:	4694      	mov	ip, r2
20000b44:	44bc      	add	ip, r7
20000b46:	4463      	add	r3, ip
20000b48:	691b      	ldr	r3, [r3, #16]
20000b4a:	1d3a      	adds	r2, r7, #4
20000b4c:	210f      	movs	r1, #15
20000b4e:	0010      	movs	r0, r2
20000b50:	4798      	blx	r3
20000b52:	e030      	b.n	20000bb6 <main+0x9ba>
				else if(counter < delay_until_text + 7*long_text + 5*short_text + 6 + 2) {
20000b54:	4ba1      	ldr	r3, [pc, #644]	; (20000ddc <main+0xbe0>)
20000b56:	681a      	ldr	r2, [r3, #0]
20000b58:	0013      	movs	r3, r2
20000b5a:	00db      	lsls	r3, r3, #3
20000b5c:	1a9a      	subs	r2, r3, r2
20000b5e:	4ba0      	ldr	r3, [pc, #640]	; (20000de0 <main+0xbe4>)
20000b60:	681b      	ldr	r3, [r3, #0]
20000b62:	18d1      	adds	r1, r2, r3
20000b64:	4b9f      	ldr	r3, [pc, #636]	; (20000de4 <main+0xbe8>)
20000b66:	681a      	ldr	r2, [r3, #0]
20000b68:	0013      	movs	r3, r2
20000b6a:	009b      	lsls	r3, r3, #2
20000b6c:	189b      	adds	r3, r3, r2
20000b6e:	18cb      	adds	r3, r1, r3
20000b70:	3308      	adds	r3, #8
20000b72:	001a      	movs	r2, r3
20000b74:	4b9c      	ldr	r3, [pc, #624]	; (20000de8 <main+0xbec>)
20000b76:	681b      	ldr	r3, [r3, #0]
20000b78:	429a      	cmp	r2, r3
20000b7a:	dd0c      	ble.n	20000b96 <main+0x99a>
					text11.display(&text11, 20);
20000b7c:	4b9f      	ldr	r3, [pc, #636]	; (20000dfc <main+0xc00>)
20000b7e:	22dc      	movs	r2, #220	; 0xdc
20000b80:	0092      	lsls	r2, r2, #2
20000b82:	4694      	mov	ip, r2
20000b84:	44bc      	add	ip, r7
20000b86:	4463      	add	r3, ip
20000b88:	691b      	ldr	r3, [r3, #16]
20000b8a:	2218      	movs	r2, #24
20000b8c:	18ba      	adds	r2, r7, r2
20000b8e:	2114      	movs	r1, #20
20000b90:	0010      	movs	r0, r2
20000b92:	4798      	blx	r3
20000b94:	e00f      	b.n	20000bb6 <main+0x9ba>
				} else {
					if (read_DIL() == 0) {
20000b96:	f002 f81d 	bl	20002bd4 <read_DIL>
20000b9a:	1e03      	subs	r3, r0, #0
20000b9c:	d10b      	bne.n	20000bb6 <main+0x9ba>
						current_screen = GAME_SCREEN;
20000b9e:	4b98      	ldr	r3, [pc, #608]	; (20000e00 <main+0xc04>)
20000ba0:	2202      	movs	r2, #2
20000ba2:	601a      	str	r2, [r3, #0]
						random_seed = counter;
20000ba4:	4b90      	ldr	r3, [pc, #576]	; (20000de8 <main+0xbec>)
20000ba6:	681a      	ldr	r2, [r3, #0]
20000ba8:	4b96      	ldr	r3, [pc, #600]	; (20000e04 <main+0xc08>)
20000baa:	601a      	str	r2, [r3, #0]
						counter = 0;
20000bac:	4b8e      	ldr	r3, [pc, #568]	; (20000de8 <main+0xbec>)
20000bae:	2200      	movs	r2, #0
20000bb0:	601a      	str	r2, [r3, #0]
						clear_ascii();
20000bb2:	f002 f9dc 	bl	20002f6e <clear_ascii>
					}
				}
				
				if(read_DIL() == SKIP_VALUE) {
20000bb6:	f002 f80d 	bl	20002bd4 <read_DIL>
20000bba:	0003      	movs	r3, r0
20000bbc:	2b81      	cmp	r3, #129	; 0x81
20000bbe:	d10b      	bne.n	20000bd8 <main+0x9dc>
					current_screen = GAME_SCREEN;
20000bc0:	4b8f      	ldr	r3, [pc, #572]	; (20000e00 <main+0xc04>)
20000bc2:	2202      	movs	r2, #2
20000bc4:	601a      	str	r2, [r3, #0]
					random_seed = counter;
20000bc6:	4b88      	ldr	r3, [pc, #544]	; (20000de8 <main+0xbec>)
20000bc8:	681a      	ldr	r2, [r3, #0]
20000bca:	4b8e      	ldr	r3, [pc, #568]	; (20000e04 <main+0xc08>)
20000bcc:	601a      	str	r2, [r3, #0]
					counter = 0;
20000bce:	4b86      	ldr	r3, [pc, #536]	; (20000de8 <main+0xbec>)
20000bd0:	2200      	movs	r2, #0
20000bd2:	601a      	str	r2, [r3, #0]
					clear_ascii();
20000bd4:	f002 f9cb 	bl	20002f6e <clear_ascii>
				}
				
				
				fire2.update(&fire2);
20000bd8:	4b8b      	ldr	r3, [pc, #556]	; (20000e08 <main+0xc0c>)
20000bda:	22dc      	movs	r2, #220	; 0xdc
20000bdc:	0092      	lsls	r2, r2, #2
20000bde:	4694      	mov	ip, r2
20000be0:	44bc      	add	ip, r7
20000be2:	4463      	add	r3, ip
20000be4:	68db      	ldr	r3, [r3, #12]
20000be6:	22cc      	movs	r2, #204	; 0xcc
20000be8:	0052      	lsls	r2, r2, #1
20000bea:	18ba      	adds	r2, r7, r2
20000bec:	0010      	movs	r0, r2
20000bee:	4798      	blx	r3
				fire3.update(&fire3);
20000bf0:	4b86      	ldr	r3, [pc, #536]	; (20000e0c <main+0xc10>)
20000bf2:	22dc      	movs	r2, #220	; 0xdc
20000bf4:	0092      	lsls	r2, r2, #2
20000bf6:	4694      	mov	ip, r2
20000bf8:	44bc      	add	ip, r7
20000bfa:	4463      	add	r3, ip
20000bfc:	68db      	ldr	r3, [r3, #12]
20000bfe:	22ba      	movs	r2, #186	; 0xba
20000c00:	0052      	lsls	r2, r2, #1
20000c02:	18ba      	adds	r2, r7, r2
20000c04:	0010      	movs	r0, r2
20000c06:	4798      	blx	r3
				fire1.update(&fire1);
20000c08:	4b81      	ldr	r3, [pc, #516]	; (20000e10 <main+0xc14>)
20000c0a:	22dc      	movs	r2, #220	; 0xdc
20000c0c:	0092      	lsls	r2, r2, #2
20000c0e:	4694      	mov	ip, r2
20000c10:	44bc      	add	ip, r7
20000c12:	4463      	add	r3, ip
20000c14:	68db      	ldr	r3, [r3, #12]
20000c16:	2296      	movs	r2, #150	; 0x96
20000c18:	0052      	lsls	r2, r2, #1
20000c1a:	18ba      	adds	r2, r7, r2
20000c1c:	0010      	movs	r0, r2
20000c1e:	4798      	blx	r3
				fire4.update(&fire4);
20000c20:	4b7c      	ldr	r3, [pc, #496]	; (20000e14 <main+0xc18>)
20000c22:	22dc      	movs	r2, #220	; 0xdc
20000c24:	0092      	lsls	r2, r2, #2
20000c26:	4694      	mov	ip, r2
20000c28:	44bc      	add	ip, r7
20000c2a:	4463      	add	r3, ip
20000c2c:	68db      	ldr	r3, [r3, #12]
20000c2e:	22a8      	movs	r2, #168	; 0xa8
20000c30:	0052      	lsls	r2, r2, #1
20000c32:	18ba      	adds	r2, r7, r2
20000c34:	0010      	movs	r0, r2
20000c36:	4798      	blx	r3
				bird.update(&bird);
20000c38:	4b77      	ldr	r3, [pc, #476]	; (20000e18 <main+0xc1c>)
20000c3a:	22dc      	movs	r2, #220	; 0xdc
20000c3c:	0092      	lsls	r2, r2, #2
20000c3e:	4694      	mov	ip, r2
20000c40:	44bc      	add	ip, r7
20000c42:	4463      	add	r3, ip
20000c44:	68db      	ldr	r3, [r3, #12]
20000c46:	2281      	movs	r2, #129	; 0x81
20000c48:	0092      	lsls	r2, r2, #2
20000c4a:	18ba      	adds	r2, r7, r2
20000c4c:	0010      	movs	r0, r2
20000c4e:	4798      	blx	r3
				bird.xPos -= 2;
20000c50:	4b71      	ldr	r3, [pc, #452]	; (20000e18 <main+0xc1c>)
20000c52:	22dc      	movs	r2, #220	; 0xdc
20000c54:	0092      	lsls	r2, r2, #2
20000c56:	4694      	mov	ip, r2
20000c58:	44bc      	add	ip, r7
20000c5a:	4463      	add	r3, ip
20000c5c:	685b      	ldr	r3, [r3, #4]
20000c5e:	1e9a      	subs	r2, r3, #2
20000c60:	4b6d      	ldr	r3, [pc, #436]	; (20000e18 <main+0xc1c>)
20000c62:	21dc      	movs	r1, #220	; 0xdc
20000c64:	0089      	lsls	r1, r1, #2
20000c66:	468c      	mov	ip, r1
20000c68:	44bc      	add	ip, r7
20000c6a:	4463      	add	r3, ip
20000c6c:	605a      	str	r2, [r3, #4]
				if (counter % 2 == 0) {
20000c6e:	4b5e      	ldr	r3, [pc, #376]	; (20000de8 <main+0xbec>)
20000c70:	681b      	ldr	r3, [r3, #0]
20000c72:	001a      	movs	r2, r3
20000c74:	2301      	movs	r3, #1
20000c76:	4013      	ands	r3, r2
20000c78:	d000      	beq.n	20000c7c <main+0xa80>
20000c7a:	e1b1      	b.n	20000fe0 <main+0xde4>
					bird.yPos--;
20000c7c:	4b66      	ldr	r3, [pc, #408]	; (20000e18 <main+0xc1c>)
20000c7e:	22dc      	movs	r2, #220	; 0xdc
20000c80:	0092      	lsls	r2, r2, #2
20000c82:	4694      	mov	ip, r2
20000c84:	44bc      	add	ip, r7
20000c86:	4463      	add	r3, ip
20000c88:	689b      	ldr	r3, [r3, #8]
20000c8a:	1e5a      	subs	r2, r3, #1
20000c8c:	4b62      	ldr	r3, [pc, #392]	; (20000e18 <main+0xc1c>)
20000c8e:	21dc      	movs	r1, #220	; 0xdc
20000c90:	0089      	lsls	r1, r1, #2
20000c92:	468c      	mov	ip, r1
20000c94:	44bc      	add	ip, r7
20000c96:	4463      	add	r3, ip
20000c98:	609a      	str	r2, [r3, #8]
				}
				
				break;
20000c9a:	e1a1      	b.n	20000fe0 <main+0xde4>
				
			case GAME_SCREEN: //inside
				
				counter++;
20000c9c:	4b52      	ldr	r3, [pc, #328]	; (20000de8 <main+0xbec>)
20000c9e:	681b      	ldr	r3, [r3, #0]
20000ca0:	1c5a      	adds	r2, r3, #1
20000ca2:	4b51      	ldr	r3, [pc, #324]	; (20000de8 <main+0xbec>)
20000ca4:	601a      	str	r2, [r3, #0]
				if(read_DIL_single( LIGHT_TRIGGER )) {
20000ca6:	2006      	movs	r0, #6
20000ca8:	f001 ffa4 	bl	20002bf4 <read_DIL_single>
20000cac:	1e03      	subs	r3, r0, #0
20000cae:	d006      	beq.n	20000cbe <main+0xac2>
					draw_game_object( &indoors2 );
20000cb0:	238a      	movs	r3, #138	; 0x8a
20000cb2:	009b      	lsls	r3, r3, #2
20000cb4:	18fb      	adds	r3, r7, r3
20000cb6:	0018      	movs	r0, r3
20000cb8:	f001 fee2 	bl	20002a80 <draw_game_object>
20000cbc:	e00b      	b.n	20000cd6 <main+0xada>
				} else {
					draw_game_object( &indoors );
20000cbe:	2393      	movs	r3, #147	; 0x93
20000cc0:	009b      	lsls	r3, r3, #2
20000cc2:	18fb      	adds	r3, r7, r3
20000cc4:	0018      	movs	r0, r3
20000cc6:	f001 fedb 	bl	20002a80 <draw_game_object>
					draw_game_object( &fire1_indoors );
20000cca:	2384      	movs	r3, #132	; 0x84
20000ccc:	005b      	lsls	r3, r3, #1
20000cce:	18fb      	adds	r3, r7, r3
20000cd0:	0018      	movs	r0, r3
20000cd2:	f001 fed5 	bl	20002a80 <draw_game_object>
				}
				draw_game_object( &DIP );
20000cd6:	23f0      	movs	r3, #240	; 0xf0
20000cd8:	005b      	lsls	r3, r3, #1
20000cda:	18fb      	adds	r3, r7, r3
20000cdc:	0018      	movs	r0, r3
20000cde:	f001 fecf 	bl	20002a80 <draw_game_object>
				draw_game_object( &player );
20000ce2:	23de      	movs	r3, #222	; 0xde
20000ce4:	005b      	lsls	r3, r3, #1
20000ce6:	18fb      	adds	r3, r7, r3
20000ce8:	0018      	movs	r0, r3
20000cea:	f001 fec9 	bl	20002a80 <draw_game_object>
				show_frame(1);
20000cee:	2001      	movs	r0, #1
20000cf0:	f001 ff07 	bl	20002b02 <show_frame>
				
				static int last_climb_value = 100;
				if((read_DIL_single(CLIMB_TRIGGER) != last_climb_value) && player.xPos > 90 && player.xPos < 108 && !has_climbed) {
20000cf4:	2004      	movs	r0, #4
20000cf6:	f001 ff7d 	bl	20002bf4 <read_DIL_single>
20000cfa:	0002      	movs	r2, r0
20000cfc:	4b47      	ldr	r3, [pc, #284]	; (20000e1c <main+0xc20>)
20000cfe:	681b      	ldr	r3, [r3, #0]
20000d00:	429a      	cmp	r2, r3
20000d02:	d024      	beq.n	20000d4e <main+0xb52>
20000d04:	4b46      	ldr	r3, [pc, #280]	; (20000e20 <main+0xc24>)
20000d06:	22dc      	movs	r2, #220	; 0xdc
20000d08:	0092      	lsls	r2, r2, #2
20000d0a:	4694      	mov	ip, r2
20000d0c:	44bc      	add	ip, r7
20000d0e:	4463      	add	r3, ip
20000d10:	685b      	ldr	r3, [r3, #4]
20000d12:	2b5a      	cmp	r3, #90	; 0x5a
20000d14:	dd1b      	ble.n	20000d4e <main+0xb52>
20000d16:	4b42      	ldr	r3, [pc, #264]	; (20000e20 <main+0xc24>)
20000d18:	22dc      	movs	r2, #220	; 0xdc
20000d1a:	0092      	lsls	r2, r2, #2
20000d1c:	4694      	mov	ip, r2
20000d1e:	44bc      	add	ip, r7
20000d20:	4463      	add	r3, ip
20000d22:	685b      	ldr	r3, [r3, #4]
20000d24:	2b6b      	cmp	r3, #107	; 0x6b
20000d26:	dc12      	bgt.n	20000d4e <main+0xb52>
20000d28:	23da      	movs	r3, #218	; 0xda
20000d2a:	009b      	lsls	r3, r3, #2
20000d2c:	18fb      	adds	r3, r7, r3
20000d2e:	681b      	ldr	r3, [r3, #0]
20000d30:	2b00      	cmp	r3, #0
20000d32:	d10c      	bne.n	20000d4e <main+0xb52>
					is_climbing = 1;
20000d34:	2301      	movs	r3, #1
20000d36:	22db      	movs	r2, #219	; 0xdb
20000d38:	0092      	lsls	r2, r2, #2
20000d3a:	18ba      	adds	r2, r7, r2
20000d3c:	6013      	str	r3, [r2, #0]
					player.xPos = 98;
20000d3e:	4b38      	ldr	r3, [pc, #224]	; (20000e20 <main+0xc24>)
20000d40:	22dc      	movs	r2, #220	; 0xdc
20000d42:	0092      	lsls	r2, r2, #2
20000d44:	4694      	mov	ip, r2
20000d46:	44bc      	add	ip, r7
20000d48:	4463      	add	r3, ip
20000d4a:	2262      	movs	r2, #98	; 0x62
20000d4c:	605a      	str	r2, [r3, #4]
				}
				last_climb_value = read_DIL_single(CLIMB_TRIGGER);
20000d4e:	2004      	movs	r0, #4
20000d50:	f001 ff50 	bl	20002bf4 <read_DIL_single>
20000d54:	0002      	movs	r2, r0
20000d56:	4b31      	ldr	r3, [pc, #196]	; (20000e1c <main+0xc20>)
20000d58:	601a      	str	r2, [r3, #0]
				
				if(is_climbing) {
20000d5a:	23db      	movs	r3, #219	; 0xdb
20000d5c:	009b      	lsls	r3, r3, #2
20000d5e:	18fb      	adds	r3, r7, r3
20000d60:	681b      	ldr	r3, [r3, #0]
20000d62:	2b00      	cmp	r3, #0
20000d64:	d05e      	beq.n	20000e24 <main+0xc28>
					gameObjectUpdate( &player );
20000d66:	23de      	movs	r3, #222	; 0xde
20000d68:	005b      	lsls	r3, r3, #1
20000d6a:	18fb      	adds	r3, r7, r3
20000d6c:	0018      	movs	r0, r3
20000d6e:	f000 f955 	bl	2000101c <gameObjectUpdate>
					if(player.yPos > 4) {
20000d72:	4b2b      	ldr	r3, [pc, #172]	; (20000e20 <main+0xc24>)
20000d74:	22dc      	movs	r2, #220	; 0xdc
20000d76:	0092      	lsls	r2, r2, #2
20000d78:	4694      	mov	ip, r2
20000d7a:	44bc      	add	ip, r7
20000d7c:	4463      	add	r3, ip
20000d7e:	689b      	ldr	r3, [r3, #8]
20000d80:	2b04      	cmp	r3, #4
20000d82:	dd0f      	ble.n	20000da4 <main+0xba8>
						player.yPos--;
20000d84:	4b26      	ldr	r3, [pc, #152]	; (20000e20 <main+0xc24>)
20000d86:	22dc      	movs	r2, #220	; 0xdc
20000d88:	0092      	lsls	r2, r2, #2
20000d8a:	4694      	mov	ip, r2
20000d8c:	44bc      	add	ip, r7
20000d8e:	4463      	add	r3, ip
20000d90:	689b      	ldr	r3, [r3, #8]
20000d92:	1e5a      	subs	r2, r3, #1
20000d94:	4b22      	ldr	r3, [pc, #136]	; (20000e20 <main+0xc24>)
20000d96:	21dc      	movs	r1, #220	; 0xdc
20000d98:	0089      	lsls	r1, r1, #2
20000d9a:	468c      	mov	ip, r1
20000d9c:	44bc      	add	ip, r7
20000d9e:	4463      	add	r3, ip
20000da0:	609a      	str	r2, [r3, #8]
20000da2:	e04b      	b.n	20000e3c <main+0xc40>
					} else {	//Stay at top level and disable climbing forever!
						player.yPos = 5;
20000da4:	4b1e      	ldr	r3, [pc, #120]	; (20000e20 <main+0xc24>)
20000da6:	22dc      	movs	r2, #220	; 0xdc
20000da8:	0092      	lsls	r2, r2, #2
20000daa:	4694      	mov	ip, r2
20000dac:	44bc      	add	ip, r7
20000dae:	4463      	add	r3, ip
20000db0:	2205      	movs	r2, #5
20000db2:	609a      	str	r2, [r3, #8]
						player.xPos = 96;
20000db4:	4b1a      	ldr	r3, [pc, #104]	; (20000e20 <main+0xc24>)
20000db6:	22dc      	movs	r2, #220	; 0xdc
20000db8:	0092      	lsls	r2, r2, #2
20000dba:	4694      	mov	ip, r2
20000dbc:	44bc      	add	ip, r7
20000dbe:	4463      	add	r3, ip
20000dc0:	2260      	movs	r2, #96	; 0x60
20000dc2:	605a      	str	r2, [r3, #4]
						is_climbing = 0;
20000dc4:	2300      	movs	r3, #0
20000dc6:	22db      	movs	r2, #219	; 0xdb
20000dc8:	0092      	lsls	r2, r2, #2
20000dca:	18ba      	adds	r2, r7, r2
20000dcc:	6013      	str	r3, [r2, #0]
						has_climbed = 1;
20000dce:	2301      	movs	r3, #1
20000dd0:	22da      	movs	r2, #218	; 0xda
20000dd2:	0092      	lsls	r2, r2, #2
20000dd4:	18ba      	adds	r2, r7, r2
20000dd6:	6013      	str	r3, [r2, #0]
20000dd8:	e030      	b.n	20000e3c <main+0xc40>
20000dda:	46c0      	nop			; (mov r8, r8)
20000ddc:	20007134 	andcs	r7, r0, r4, lsr r1
20000de0:	20007130 	andcs	r7, r0, r0, lsr r1
20000de4:	20007138 	andcs	r7, r0, r8, lsr r1
20000de8:	20003584 	andcs	r3, r0, r4, lsl #11
20000dec:	fffffce4 			; <UNDEFINED> instruction: 0xfffffce4
20000df0:	fffffcd0 			; <UNDEFINED> instruction: 0xfffffcd0
20000df4:	fffffcbc 			; <UNDEFINED> instruction: 0xfffffcbc
20000df8:	fffffc94 			; <UNDEFINED> instruction: 0xfffffc94
20000dfc:	fffffca8 			; <UNDEFINED> instruction: 0xfffffca8
20000e00:	2000712c 	andcs	r7, r0, ip, lsr #2
20000e04:	20003664 	andcs	r3, r0, r4, ror #12
20000e08:	fffffe28 			; <UNDEFINED> instruction: 0xfffffe28
20000e0c:	fffffe04 			; <UNDEFINED> instruction: 0xfffffe04
20000e10:	fffffdbc 			; <UNDEFINED> instruction: 0xfffffdbc
20000e14:	fffffde0 			; <UNDEFINED> instruction: 0xfffffde0
20000e18:	fffffe94 			; <UNDEFINED> instruction: 0xfffffe94
20000e1c:	2000713c 	andcs	r7, r0, ip, lsr r1
20000e20:	fffffe4c 			; <UNDEFINED> instruction: 0xfffffe4c
					}
				} else {
					player.update(&player);
20000e24:	4b71      	ldr	r3, [pc, #452]	; (20000fec <main+0xdf0>)
20000e26:	22dc      	movs	r2, #220	; 0xdc
20000e28:	0092      	lsls	r2, r2, #2
20000e2a:	4694      	mov	ip, r2
20000e2c:	44bc      	add	ip, r7
20000e2e:	4463      	add	r3, ip
20000e30:	68db      	ldr	r3, [r3, #12]
20000e32:	22de      	movs	r2, #222	; 0xde
20000e34:	0052      	lsls	r2, r2, #1
20000e36:	18ba      	adds	r2, r7, r2
20000e38:	0010      	movs	r0, r2
20000e3a:	4798      	blx	r3
				}
				
				if (read_DIL_single(EXPLOSION_TRIGGER)){
20000e3c:	2003      	movs	r0, #3
20000e3e:	f001 fed9 	bl	20002bf4 <read_DIL_single>
20000e42:	1e03      	subs	r3, r0, #0
20000e44:	d004      	beq.n	20000e50 <main+0xc54>
					game_over_adder = 1;
20000e46:	2301      	movs	r3, #1
20000e48:	22d8      	movs	r2, #216	; 0xd8
20000e4a:	0092      	lsls	r2, r2, #2
20000e4c:	18ba      	adds	r2, r7, r2
20000e4e:	6013      	str	r3, [r2, #0]
				}
				
				fire1_indoors.update(&fire1_indoors);
20000e50:	4b67      	ldr	r3, [pc, #412]	; (20000ff0 <main+0xdf4>)
20000e52:	22dc      	movs	r2, #220	; 0xdc
20000e54:	0092      	lsls	r2, r2, #2
20000e56:	4694      	mov	ip, r2
20000e58:	44bc      	add	ip, r7
20000e5a:	4463      	add	r3, ip
20000e5c:	68db      	ldr	r3, [r3, #12]
20000e5e:	2284      	movs	r2, #132	; 0x84
20000e60:	0052      	lsls	r2, r2, #1
20000e62:	18ba      	adds	r2, r7, r2
20000e64:	0010      	movs	r0, r2
20000e66:	4798      	blx	r3
				DIP.update(&DIP);
20000e68:	4b62      	ldr	r3, [pc, #392]	; (20000ff4 <main+0xdf8>)
20000e6a:	22dc      	movs	r2, #220	; 0xdc
20000e6c:	0092      	lsls	r2, r2, #2
20000e6e:	4694      	mov	ip, r2
20000e70:	44bc      	add	ip, r7
20000e72:	4463      	add	r3, ip
20000e74:	68db      	ldr	r3, [r3, #12]
20000e76:	22f0      	movs	r2, #240	; 0xf0
20000e78:	0052      	lsls	r2, r2, #1
20000e7a:	18ba      	adds	r2, r7, r2
20000e7c:	0010      	movs	r0, r2
20000e7e:	4798      	blx	r3
				
				static int distance_player_fire;	//fire_collision
				distance_player_fire = (player.xPos + 9) - (fire1_indoors.xPos + 5);
20000e80:	4b5a      	ldr	r3, [pc, #360]	; (20000fec <main+0xdf0>)
20000e82:	22dc      	movs	r2, #220	; 0xdc
20000e84:	0092      	lsls	r2, r2, #2
20000e86:	4694      	mov	ip, r2
20000e88:	44bc      	add	ip, r7
20000e8a:	4463      	add	r3, ip
20000e8c:	685b      	ldr	r3, [r3, #4]
20000e8e:	3309      	adds	r3, #9
20000e90:	001a      	movs	r2, r3
20000e92:	4b57      	ldr	r3, [pc, #348]	; (20000ff0 <main+0xdf4>)
20000e94:	21dc      	movs	r1, #220	; 0xdc
20000e96:	0089      	lsls	r1, r1, #2
20000e98:	468c      	mov	ip, r1
20000e9a:	44bc      	add	ip, r7
20000e9c:	4463      	add	r3, ip
20000e9e:	685b      	ldr	r3, [r3, #4]
20000ea0:	3305      	adds	r3, #5
20000ea2:	1ad2      	subs	r2, r2, r3
20000ea4:	4b54      	ldr	r3, [pc, #336]	; (20000ff8 <main+0xdfc>)
20000ea6:	601a      	str	r2, [r3, #0]
				if(player.yPos > (fire1_indoors.yPos - 18 + 7) && distance_player_fire < 8 && distance_player_fire > -8) {
20000ea8:	4b50      	ldr	r3, [pc, #320]	; (20000fec <main+0xdf0>)
20000eaa:	22dc      	movs	r2, #220	; 0xdc
20000eac:	0092      	lsls	r2, r2, #2
20000eae:	4694      	mov	ip, r2
20000eb0:	44bc      	add	ip, r7
20000eb2:	4463      	add	r3, ip
20000eb4:	689a      	ldr	r2, [r3, #8]
20000eb6:	4b4e      	ldr	r3, [pc, #312]	; (20000ff0 <main+0xdf4>)
20000eb8:	21dc      	movs	r1, #220	; 0xdc
20000eba:	0089      	lsls	r1, r1, #2
20000ebc:	468c      	mov	ip, r1
20000ebe:	44bc      	add	ip, r7
20000ec0:	4463      	add	r3, ip
20000ec2:	689b      	ldr	r3, [r3, #8]
20000ec4:	3b0b      	subs	r3, #11
20000ec6:	429a      	cmp	r2, r3
20000ec8:	dd0c      	ble.n	20000ee4 <main+0xce8>
20000eca:	4b4b      	ldr	r3, [pc, #300]	; (20000ff8 <main+0xdfc>)
20000ecc:	681b      	ldr	r3, [r3, #0]
20000ece:	2b07      	cmp	r3, #7
20000ed0:	dc08      	bgt.n	20000ee4 <main+0xce8>
20000ed2:	4b49      	ldr	r3, [pc, #292]	; (20000ff8 <main+0xdfc>)
20000ed4:	681b      	ldr	r3, [r3, #0]
20000ed6:	3307      	adds	r3, #7
20000ed8:	db04      	blt.n	20000ee4 <main+0xce8>
					game_over_adder = 100;
20000eda:	2364      	movs	r3, #100	; 0x64
20000edc:	22d8      	movs	r2, #216	; 0xd8
20000ede:	0092      	lsls	r2, r2, #2
20000ee0:	18ba      	adds	r2, r7, r2
20000ee2:	6013      	str	r3, [r2, #0]
				}
				
				game_over += game_over_adder;
20000ee4:	23d9      	movs	r3, #217	; 0xd9
20000ee6:	009b      	lsls	r3, r3, #2
20000ee8:	18fb      	adds	r3, r7, r3
20000eea:	681a      	ldr	r2, [r3, #0]
20000eec:	23d8      	movs	r3, #216	; 0xd8
20000eee:	009b      	lsls	r3, r3, #2
20000ef0:	18fb      	adds	r3, r7, r3
20000ef2:	681b      	ldr	r3, [r3, #0]
20000ef4:	18d3      	adds	r3, r2, r3
20000ef6:	22d9      	movs	r2, #217	; 0xd9
20000ef8:	0092      	lsls	r2, r2, #2
20000efa:	18ba      	adds	r2, r7, r2
20000efc:	6013      	str	r3, [r2, #0]
				
				if(game_over >= 100) {
20000efe:	23d9      	movs	r3, #217	; 0xd9
20000f00:	009b      	lsls	r3, r3, #2
20000f02:	18fb      	adds	r3, r7, r3
20000f04:	681b      	ldr	r3, [r3, #0]
20000f06:	2b63      	cmp	r3, #99	; 0x63
20000f08:	dd6d      	ble.n	20000fe6 <main+0xdea>
					current_screen = RESET_GAME;
20000f0a:	4b3c      	ldr	r3, [pc, #240]	; (20000ffc <main+0xe00>)
20000f0c:	220a      	movs	r2, #10
20000f0e:	601a      	str	r2, [r3, #0]
				}
				
				break;
20000f10:	e069      	b.n	20000fe6 <main+0xdea>
				
			
			case RESET_GAME: //restart
				counter = 0;
20000f12:	4b3b      	ldr	r3, [pc, #236]	; (20001000 <main+0xe04>)
20000f14:	2200      	movs	r2, #0
20000f16:	601a      	str	r2, [r3, #0]
				current_screen = START_SCREEN;
20000f18:	4b38      	ldr	r3, [pc, #224]	; (20000ffc <main+0xe00>)
20000f1a:	2201      	movs	r2, #1
20000f1c:	601a      	str	r2, [r3, #0]
				if(read_DIL() == 0) {
20000f1e:	f001 fe59 	bl	20002bd4 <read_DIL>
20000f22:	1e03      	subs	r3, r0, #0
20000f24:	d102      	bne.n	20000f2c <main+0xd30>
					current_screen = SWITCH_LOCK; 
20000f26:	4b35      	ldr	r3, [pc, #212]	; (20000ffc <main+0xe00>)
20000f28:	2200      	movs	r2, #0
20000f2a:	601a      	str	r2, [r3, #0]
				}
	
				static int test = 0;
				test+=2;
20000f2c:	4b35      	ldr	r3, [pc, #212]	; (20001004 <main+0xe08>)
20000f2e:	681b      	ldr	r3, [r3, #0]
20000f30:	1c9a      	adds	r2, r3, #2
20000f32:	4b34      	ldr	r3, [pc, #208]	; (20001004 <main+0xe08>)
20000f34:	601a      	str	r2, [r3, #0]
	
				is_climbing = 0;
20000f36:	2300      	movs	r3, #0
20000f38:	22db      	movs	r2, #219	; 0xdb
20000f3a:	0092      	lsls	r2, r2, #2
20000f3c:	18ba      	adds	r2, r7, r2
20000f3e:	6013      	str	r3, [r2, #0]
				has_climbed = 0;
20000f40:	2300      	movs	r3, #0
20000f42:	22da      	movs	r2, #218	; 0xda
20000f44:	0092      	lsls	r2, r2, #2
20000f46:	18ba      	adds	r2, r7, r2
20000f48:	6013      	str	r3, [r2, #0]
				game_over = 0;
20000f4a:	2300      	movs	r3, #0
20000f4c:	22d9      	movs	r2, #217	; 0xd9
20000f4e:	0092      	lsls	r2, r2, #2
20000f50:	18ba      	adds	r2, r7, r2
20000f52:	6013      	str	r3, [r2, #0]
				game_over_adder = 0;
20000f54:	2300      	movs	r3, #0
20000f56:	22d8      	movs	r2, #216	; 0xd8
20000f58:	0092      	lsls	r2, r2, #2
20000f5a:	18ba      	adds	r2, r7, r2
20000f5c:	6013      	str	r3, [r2, #0]
				fire1_indoors.xPos = 40;		//FIRE1_INDO
20000f5e:	4b24      	ldr	r3, [pc, #144]	; (20000ff0 <main+0xdf4>)
20000f60:	22dc      	movs	r2, #220	; 0xdc
20000f62:	0092      	lsls	r2, r2, #2
20000f64:	4694      	mov	ip, r2
20000f66:	44bc      	add	ip, r7
20000f68:	4463      	add	r3, ip
20000f6a:	2228      	movs	r2, #40	; 0x28
20000f6c:	605a      	str	r2, [r3, #4]
				fire1_indoors.yPos = 64-12-8;
20000f6e:	4b20      	ldr	r3, [pc, #128]	; (20000ff0 <main+0xdf4>)
20000f70:	22dc      	movs	r2, #220	; 0xdc
20000f72:	0092      	lsls	r2, r2, #2
20000f74:	4694      	mov	ip, r2
20000f76:	44bc      	add	ip, r7
20000f78:	4463      	add	r3, ip
20000f7a:	222c      	movs	r2, #44	; 0x2c
20000f7c:	609a      	str	r2, [r3, #8]
				
				bird.xPos = 180;
20000f7e:	4b22      	ldr	r3, [pc, #136]	; (20001008 <main+0xe0c>)
20000f80:	22dc      	movs	r2, #220	; 0xdc
20000f82:	0092      	lsls	r2, r2, #2
20000f84:	4694      	mov	ip, r2
20000f86:	44bc      	add	ip, r7
20000f88:	4463      	add	r3, ip
20000f8a:	22b4      	movs	r2, #180	; 0xb4
20000f8c:	605a      	str	r2, [r3, #4]
				bird.yPos = 40;
20000f8e:	4b1e      	ldr	r3, [pc, #120]	; (20001008 <main+0xe0c>)
20000f90:	22dc      	movs	r2, #220	; 0xdc
20000f92:	0092      	lsls	r2, r2, #2
20000f94:	4694      	mov	ip, r2
20000f96:	44bc      	add	ip, r7
20000f98:	4463      	add	r3, ip
20000f9a:	2228      	movs	r2, #40	; 0x28
20000f9c:	609a      	str	r2, [r3, #8]
				
				DIP.xPos = 100;
20000f9e:	4b15      	ldr	r3, [pc, #84]	; (20000ff4 <main+0xdf8>)
20000fa0:	22dc      	movs	r2, #220	; 0xdc
20000fa2:	0092      	lsls	r2, r2, #2
20000fa4:	4694      	mov	ip, r2
20000fa6:	44bc      	add	ip, r7
20000fa8:	4463      	add	r3, ip
20000faa:	2264      	movs	r2, #100	; 0x64
20000fac:	605a      	str	r2, [r3, #4]
				DIP.yPos = 5;
20000fae:	4b11      	ldr	r3, [pc, #68]	; (20000ff4 <main+0xdf8>)
20000fb0:	22dc      	movs	r2, #220	; 0xdc
20000fb2:	0092      	lsls	r2, r2, #2
20000fb4:	4694      	mov	ip, r2
20000fb6:	44bc      	add	ip, r7
20000fb8:	4463      	add	r3, ip
20000fba:	2205      	movs	r2, #5
20000fbc:	609a      	str	r2, [r3, #8]
				player.xPos = 3;
20000fbe:	4b0b      	ldr	r3, [pc, #44]	; (20000fec <main+0xdf0>)
20000fc0:	22dc      	movs	r2, #220	; 0xdc
20000fc2:	0092      	lsls	r2, r2, #2
20000fc4:	4694      	mov	ip, r2
20000fc6:	44bc      	add	ip, r7
20000fc8:	4463      	add	r3, ip
20000fca:	2203      	movs	r2, #3
20000fcc:	605a      	str	r2, [r3, #4]
				player.yPos = 64-18-7; //player position
20000fce:	4b07      	ldr	r3, [pc, #28]	; (20000fec <main+0xdf0>)
20000fd0:	22dc      	movs	r2, #220	; 0xdc
20000fd2:	0092      	lsls	r2, r2, #2
20000fd4:	4694      	mov	ip, r2
20000fd6:	44bc      	add	ip, r7
20000fd8:	4463      	add	r3, ip
20000fda:	2227      	movs	r2, #39	; 0x27
20000fdc:	609a      	str	r2, [r3, #8]
				
				break;
20000fde:	e003      	b.n	20000fe8 <main+0xdec>
				break;
20000fe0:	46c0      	nop			; (mov r8, r8)
20000fe2:	f7ff fbac 	bl	2000073e <main+0x542>
				break;
20000fe6:	46c0      	nop			; (mov r8, r8)
		switch(current_screen) {
20000fe8:	f7ff fba9 	bl	2000073e <main+0x542>
20000fec:	fffffe4c 			; <UNDEFINED> instruction: 0xfffffe4c
20000ff0:	fffffd98 			; <UNDEFINED> instruction: 0xfffffd98
20000ff4:	fffffe70 			; <UNDEFINED> instruction: 0xfffffe70
20000ff8:	20003588 	andcs	r3, r0, r8, lsl #11
20000ffc:	2000712c 	andcs	r7, r0, ip, lsr #2
20001000:	20003584 	andcs	r3, r0, r4, lsl #11
20001004:	2000358c 	andcs	r3, r0, ip, lsl #11
20001008:	fffffe94 			; <UNDEFINED> instruction: 0xfffffe94

2000100c <render>:
GameObject* gameObjects[100];
int nGameObjects = 0;


void render(GameObject* this)
{
2000100c:	b580      	push	{r7, lr}
2000100e:	b082      	sub	sp, #8
20001010:	af00      	add	r7, sp, #0
20001012:	6078      	str	r0, [r7, #4]
    
}
20001014:	46c0      	nop			; (mov r8, r8)
20001016:	46bd      	mov	sp, r7
20001018:	b002      	add	sp, #8
2000101a:	bd80      	pop	{r7, pc}

2000101c <gameObjectUpdate>:

void gameObjectUpdate(GameObject *this) {
2000101c:	b580      	push	{r7, lr}
2000101e:	b082      	sub	sp, #8
20001020:	af00      	add	r7, sp, #0
20001022:	6078      	str	r0, [r7, #4]
	this->animation_counter++;
20001024:	687b      	ldr	r3, [r7, #4]
20001026:	6a1b      	ldr	r3, [r3, #32]
20001028:	1c5a      	adds	r2, r3, #1
2000102a:	687b      	ldr	r3, [r7, #4]
2000102c:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
2000102e:	687b      	ldr	r3, [r7, #4]
20001030:	6a1a      	ldr	r2, [r3, #32]
20001032:	687b      	ldr	r3, [r7, #4]
20001034:	69db      	ldr	r3, [r3, #28]
20001036:	429a      	cmp	r2, r3
20001038:	d10f      	bne.n	2000105a <gameObjectUpdate+0x3e>
		this->animation_counter = 0;
2000103a:	687b      	ldr	r3, [r7, #4]
2000103c:	2200      	movs	r2, #0
2000103e:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
20001040:	687b      	ldr	r3, [r7, #4]
20001042:	695b      	ldr	r3, [r3, #20]
20001044:	1c5a      	adds	r2, r3, #1
20001046:	687b      	ldr	r3, [r7, #4]
20001048:	699b      	ldr	r3, [r3, #24]
2000104a:	0019      	movs	r1, r3
2000104c:	0010      	movs	r0, r2
2000104e:	f002 fa93 	bl	20003578 <__aeabi_idivmod>
20001052:	000b      	movs	r3, r1
20001054:	001a      	movs	r2, r3
20001056:	687b      	ldr	r3, [r7, #4]
20001058:	615a      	str	r2, [r3, #20]
	}
}
2000105a:	46c0      	nop			; (mov r8, r8)
2000105c:	46bd      	mov	sp, r7
2000105e:	b002      	add	sp, #8
20001060:	bd80      	pop	{r7, pc}
	...

20001064 <initSprites>:
Image fire2Image;
Image fire3Image;
Image fire4Image;
Image fire5Image;
Image fireImages[5];
static void initSprites( void ) {	
20001064:	b580      	push	{r7, lr}
20001066:	b08c      	sub	sp, #48	; 0x30
20001068:	af00      	add	r7, sp, #0
	sprite *pointer0 = &tempFireBlack;
2000106a:	4b3e      	ldr	r3, [pc, #248]	; (20001164 <initSprites+0x100>)
2000106c:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer0, fire_black_2_bits, fire1_gray_width, fire1_gray_height);
2000106e:	493e      	ldr	r1, [pc, #248]	; (20001168 <initSprites+0x104>)
20001070:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20001072:	230c      	movs	r3, #12
20001074:	2208      	movs	r2, #8
20001076:	f001 fd8d 	bl	20002b94 <load_sprite>
	fireBlack = pointer0;
2000107a:	4b3c      	ldr	r3, [pc, #240]	; (2000116c <initSprites+0x108>)
2000107c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
2000107e:	601a      	str	r2, [r3, #0]
	
	sprite *pointer1 = &tempFire1Gray;
20001080:	4b3b      	ldr	r3, [pc, #236]	; (20001170 <initSprites+0x10c>)
20001082:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer1, fire1_gray_bits, fire1_gray_width, fire1_gray_height);
20001084:	493b      	ldr	r1, [pc, #236]	; (20001174 <initSprites+0x110>)
20001086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20001088:	230c      	movs	r3, #12
2000108a:	2208      	movs	r2, #8
2000108c:	f001 fd82 	bl	20002b94 <load_sprite>
	fire1Gray = pointer1;
20001090:	4b39      	ldr	r3, [pc, #228]	; (20001178 <initSprites+0x114>)
20001092:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001094:	601a      	str	r2, [r3, #0]

	sprite *pointer2 = &tempFire1Light;
20001096:	4b39      	ldr	r3, [pc, #228]	; (2000117c <initSprites+0x118>)
20001098:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer2, fire1_light_bits, fire1_gray_width, fire1_gray_height);
2000109a:	4939      	ldr	r1, [pc, #228]	; (20001180 <initSprites+0x11c>)
2000109c:	6a78      	ldr	r0, [r7, #36]	; 0x24
2000109e:	230c      	movs	r3, #12
200010a0:	2208      	movs	r2, #8
200010a2:	f001 fd77 	bl	20002b94 <load_sprite>
	fire1Light = pointer2;
200010a6:	4b37      	ldr	r3, [pc, #220]	; (20001184 <initSprites+0x120>)
200010a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200010aa:	601a      	str	r2, [r3, #0]

	sprite *pointer3 = &tempFire2Gray;
200010ac:	4b36      	ldr	r3, [pc, #216]	; (20001188 <initSprites+0x124>)
200010ae:	623b      	str	r3, [r7, #32]
	load_sprite(pointer3, fire2_gray_bits, fire1_gray_width, fire1_gray_height);
200010b0:	4936      	ldr	r1, [pc, #216]	; (2000118c <initSprites+0x128>)
200010b2:	6a38      	ldr	r0, [r7, #32]
200010b4:	230c      	movs	r3, #12
200010b6:	2208      	movs	r2, #8
200010b8:	f001 fd6c 	bl	20002b94 <load_sprite>
	fire2Gray = pointer3;
200010bc:	4b34      	ldr	r3, [pc, #208]	; (20001190 <initSprites+0x12c>)
200010be:	6a3a      	ldr	r2, [r7, #32]
200010c0:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempFire2Light;
200010c2:	4b34      	ldr	r3, [pc, #208]	; (20001194 <initSprites+0x130>)
200010c4:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer4, fire2_light_bits, fire1_gray_width, fire1_gray_height);
200010c6:	4934      	ldr	r1, [pc, #208]	; (20001198 <initSprites+0x134>)
200010c8:	69f8      	ldr	r0, [r7, #28]
200010ca:	230c      	movs	r3, #12
200010cc:	2208      	movs	r2, #8
200010ce:	f001 fd61 	bl	20002b94 <load_sprite>
	fire2Light = pointer4;
200010d2:	4b32      	ldr	r3, [pc, #200]	; (2000119c <initSprites+0x138>)
200010d4:	69fa      	ldr	r2, [r7, #28]
200010d6:	601a      	str	r2, [r3, #0]

	sprite *pointer5 = &tempFire3Gray;
200010d8:	4b31      	ldr	r3, [pc, #196]	; (200011a0 <initSprites+0x13c>)
200010da:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer5, fire3_gray_bits, fire1_gray_width, fire1_gray_height);
200010dc:	4931      	ldr	r1, [pc, #196]	; (200011a4 <initSprites+0x140>)
200010de:	69b8      	ldr	r0, [r7, #24]
200010e0:	230c      	movs	r3, #12
200010e2:	2208      	movs	r2, #8
200010e4:	f001 fd56 	bl	20002b94 <load_sprite>
	fire3Gray = pointer5;
200010e8:	4b2f      	ldr	r3, [pc, #188]	; (200011a8 <initSprites+0x144>)
200010ea:	69ba      	ldr	r2, [r7, #24]
200010ec:	601a      	str	r2, [r3, #0]

	sprite *pointer6 = &tempFire3Light;
200010ee:	4b2f      	ldr	r3, [pc, #188]	; (200011ac <initSprites+0x148>)
200010f0:	617b      	str	r3, [r7, #20]
	load_sprite(pointer6, fire3_light_bits, fire1_gray_width, fire1_gray_height);
200010f2:	492f      	ldr	r1, [pc, #188]	; (200011b0 <initSprites+0x14c>)
200010f4:	6978      	ldr	r0, [r7, #20]
200010f6:	230c      	movs	r3, #12
200010f8:	2208      	movs	r2, #8
200010fa:	f001 fd4b 	bl	20002b94 <load_sprite>
	fire3Light = pointer6;
200010fe:	4b2d      	ldr	r3, [pc, #180]	; (200011b4 <initSprites+0x150>)
20001100:	697a      	ldr	r2, [r7, #20]
20001102:	601a      	str	r2, [r3, #0]

	sprite *pointer7 = &tempFire4Gray;
20001104:	4b2c      	ldr	r3, [pc, #176]	; (200011b8 <initSprites+0x154>)
20001106:	613b      	str	r3, [r7, #16]
	load_sprite(pointer7, fire4_gray_bits, fire1_gray_width, fire1_gray_height);
20001108:	492c      	ldr	r1, [pc, #176]	; (200011bc <initSprites+0x158>)
2000110a:	6938      	ldr	r0, [r7, #16]
2000110c:	230c      	movs	r3, #12
2000110e:	2208      	movs	r2, #8
20001110:	f001 fd40 	bl	20002b94 <load_sprite>
	fire4Gray = pointer7;
20001114:	4b2a      	ldr	r3, [pc, #168]	; (200011c0 <initSprites+0x15c>)
20001116:	693a      	ldr	r2, [r7, #16]
20001118:	601a      	str	r2, [r3, #0]

	sprite *pointer8 = &tempFire4Light;
2000111a:	4b2a      	ldr	r3, [pc, #168]	; (200011c4 <initSprites+0x160>)
2000111c:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer8, fire4_light_bits, fire1_gray_width, fire1_gray_height);
2000111e:	492a      	ldr	r1, [pc, #168]	; (200011c8 <initSprites+0x164>)
20001120:	68f8      	ldr	r0, [r7, #12]
20001122:	230c      	movs	r3, #12
20001124:	2208      	movs	r2, #8
20001126:	f001 fd35 	bl	20002b94 <load_sprite>
	fire4Light = pointer8;
2000112a:	4b28      	ldr	r3, [pc, #160]	; (200011cc <initSprites+0x168>)
2000112c:	68fa      	ldr	r2, [r7, #12]
2000112e:	601a      	str	r2, [r3, #0]

	sprite *pointer9 = &tempFire5Gray;
20001130:	4b27      	ldr	r3, [pc, #156]	; (200011d0 <initSprites+0x16c>)
20001132:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer9, fire5_gray_bits, fire1_gray_width, fire1_gray_height);
20001134:	4927      	ldr	r1, [pc, #156]	; (200011d4 <initSprites+0x170>)
20001136:	68b8      	ldr	r0, [r7, #8]
20001138:	230c      	movs	r3, #12
2000113a:	2208      	movs	r2, #8
2000113c:	f001 fd2a 	bl	20002b94 <load_sprite>
	fire5Gray = pointer9;
20001140:	4b25      	ldr	r3, [pc, #148]	; (200011d8 <initSprites+0x174>)
20001142:	68ba      	ldr	r2, [r7, #8]
20001144:	601a      	str	r2, [r3, #0]

	sprite *pointer10 = &tempFire5Light;
20001146:	4b25      	ldr	r3, [pc, #148]	; (200011dc <initSprites+0x178>)
20001148:	607b      	str	r3, [r7, #4]
	load_sprite(pointer10, fire5_light_bits, fire1_gray_width, fire1_gray_height);
2000114a:	4925      	ldr	r1, [pc, #148]	; (200011e0 <initSprites+0x17c>)
2000114c:	6878      	ldr	r0, [r7, #4]
2000114e:	230c      	movs	r3, #12
20001150:	2208      	movs	r2, #8
20001152:	f001 fd1f 	bl	20002b94 <load_sprite>
	fire5Light = pointer10;
20001156:	4b23      	ldr	r3, [pc, #140]	; (200011e4 <initSprites+0x180>)
20001158:	687a      	ldr	r2, [r7, #4]
2000115a:	601a      	str	r2, [r3, #0]
}
2000115c:	46c0      	nop			; (mov r8, r8)
2000115e:	46bd      	mov	sp, r7
20001160:	b00c      	add	sp, #48	; 0x30
20001162:	bd80      	pop	{r7, pc}
20001164:	20003848 	andcs	r3, r0, r8, asr #16
20001168:	20007140 	andcs	r7, r0, r0, asr #2
2000116c:	20003940 	andcs	r3, r0, r0, asr #18
20001170:	20003934 	andcs	r3, r0, r4, lsr r9
20001174:	2000714c 	andcs	r7, r0, ip, asr #2
20001178:	20003958 	andcs	r3, r0, r8, asr r9
2000117c:	20003910 	andcs	r3, r0, r0, lsl r9
20001180:	20007158 	andcs	r7, r0, r8, asr r1
20001184:	20003810 	andcs	r3, r0, r0, lsl r8
20001188:	2000383c 	andcs	r3, r0, ip, lsr r8
2000118c:	20007164 	andcs	r7, r0, r4, ror #2
20001190:	20003954 	andcs	r3, r0, r4, asr r9
20001194:	20003944 	andcs	r3, r0, r4, asr #18
20001198:	20007170 	andcs	r7, r0, r0, ror r1
2000119c:	2000392c 	andcs	r3, r0, ip, lsr #18
200011a0:	200038f4 	strdcs	r3, [r0], -r4
200011a4:	2000717c 	andcs	r7, r0, ip, ror r1
200011a8:	20003820 	andcs	r3, r0, r0, lsr #16
200011ac:	20003814 	andcs	r3, r0, r4, lsl r8
200011b0:	20007188 	andcs	r7, r0, r8, lsl #3
200011b4:	20003950 	andcs	r3, r0, r0, asr r9
200011b8:	20003824 	andcs	r3, r0, r4, lsr #16
200011bc:	20007194 	mulcs	r0, r4, r1
200011c0:	2000390c 	andcs	r3, r0, ip, lsl #18
200011c4:	20003860 	andcs	r3, r0, r0, ror #16
200011c8:	200071a0 	andcs	r7, r0, r0, lsr #3
200011cc:	20003878 	andcs	r3, r0, r8, ror r8
200011d0:	200038e8 	andcs	r3, r0, r8, ror #17
200011d4:	200071ac 	andcs	r7, r0, ip, lsr #3
200011d8:	20003928 	andcs	r3, r0, r8, lsr #18
200011dc:	2000391c 	andcs	r3, r0, ip, lsl r9
200011e0:	200071b8 			; <UNDEFINED> instruction: 0x200071b8
200011e4:	20003930 	andcs	r3, r0, r0, lsr r9

200011e8 <init_fire>:
	
void init_fire( GameObject *fireObj ) {
200011e8:	b590      	push	{r4, r7, lr}
200011ea:	b083      	sub	sp, #12
200011ec:	af00      	add	r7, sp, #0
200011ee:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
200011f0:	4b30      	ldr	r3, [pc, #192]	; (200012b4 <init_fire+0xcc>)
200011f2:	681b      	ldr	r3, [r3, #0]
200011f4:	2b00      	cmp	r3, #0
200011f6:	d049      	beq.n	2000128c <init_fire+0xa4>
		initSprites();
200011f8:	f7ff ff34 	bl	20001064 <initSprites>
		firstTime = 0;			
200011fc:	4b2d      	ldr	r3, [pc, #180]	; (200012b4 <init_fire+0xcc>)
200011fe:	2200      	movs	r2, #0
20001200:	601a      	str	r2, [r3, #0]

		fireImages[0] = fire1Image;
20001202:	4b2d      	ldr	r3, [pc, #180]	; (200012b8 <init_fire+0xd0>)
20001204:	4a2d      	ldr	r2, [pc, #180]	; (200012bc <init_fire+0xd4>)
20001206:	ca13      	ldmia	r2!, {r0, r1, r4}
20001208:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[1] = fire2Image;
2000120a:	4b2b      	ldr	r3, [pc, #172]	; (200012b8 <init_fire+0xd0>)
2000120c:	4a2c      	ldr	r2, [pc, #176]	; (200012c0 <init_fire+0xd8>)
2000120e:	330c      	adds	r3, #12
20001210:	ca13      	ldmia	r2!, {r0, r1, r4}
20001212:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[2] = fire3Image;
20001214:	4b28      	ldr	r3, [pc, #160]	; (200012b8 <init_fire+0xd0>)
20001216:	4a2b      	ldr	r2, [pc, #172]	; (200012c4 <init_fire+0xdc>)
20001218:	3318      	adds	r3, #24
2000121a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000121c:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[3] = fire4Image;
2000121e:	4b26      	ldr	r3, [pc, #152]	; (200012b8 <init_fire+0xd0>)
20001220:	4a29      	ldr	r2, [pc, #164]	; (200012c8 <init_fire+0xe0>)
20001222:	3324      	adds	r3, #36	; 0x24
20001224:	ca13      	ldmia	r2!, {r0, r1, r4}
20001226:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[4] = fire5Image;
20001228:	4b23      	ldr	r3, [pc, #140]	; (200012b8 <init_fire+0xd0>)
2000122a:	4a28      	ldr	r2, [pc, #160]	; (200012cc <init_fire+0xe4>)
2000122c:	3330      	adds	r3, #48	; 0x30
2000122e:	ca13      	ldmia	r2!, {r0, r1, r4}
20001230:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&fireImages[0], fire1Gray, fire1Light, fireBlack);
20001232:	4b27      	ldr	r3, [pc, #156]	; (200012d0 <init_fire+0xe8>)
20001234:	6819      	ldr	r1, [r3, #0]
20001236:	4b27      	ldr	r3, [pc, #156]	; (200012d4 <init_fire+0xec>)
20001238:	681a      	ldr	r2, [r3, #0]
2000123a:	4b27      	ldr	r3, [pc, #156]	; (200012d8 <init_fire+0xf0>)
2000123c:	681b      	ldr	r3, [r3, #0]
2000123e:	481e      	ldr	r0, [pc, #120]	; (200012b8 <init_fire+0xd0>)
20001240:	f001 fc94 	bl	20002b6c <load_image>
		load_image(&fireImages[1], fire2Gray, fire2Light, fireBlack);
20001244:	4b25      	ldr	r3, [pc, #148]	; (200012dc <init_fire+0xf4>)
20001246:	6819      	ldr	r1, [r3, #0]
20001248:	4b25      	ldr	r3, [pc, #148]	; (200012e0 <init_fire+0xf8>)
2000124a:	681a      	ldr	r2, [r3, #0]
2000124c:	4b22      	ldr	r3, [pc, #136]	; (200012d8 <init_fire+0xf0>)
2000124e:	681b      	ldr	r3, [r3, #0]
20001250:	4824      	ldr	r0, [pc, #144]	; (200012e4 <init_fire+0xfc>)
20001252:	f001 fc8b 	bl	20002b6c <load_image>
		load_image(&fireImages[2], fire3Gray, fire3Light, fireBlack);
20001256:	4b24      	ldr	r3, [pc, #144]	; (200012e8 <init_fire+0x100>)
20001258:	6819      	ldr	r1, [r3, #0]
2000125a:	4b24      	ldr	r3, [pc, #144]	; (200012ec <init_fire+0x104>)
2000125c:	681a      	ldr	r2, [r3, #0]
2000125e:	4b1e      	ldr	r3, [pc, #120]	; (200012d8 <init_fire+0xf0>)
20001260:	681b      	ldr	r3, [r3, #0]
20001262:	4823      	ldr	r0, [pc, #140]	; (200012f0 <init_fire+0x108>)
20001264:	f001 fc82 	bl	20002b6c <load_image>
		load_image(&fireImages[3], fire4Gray, fire4Light, fireBlack);
20001268:	4b22      	ldr	r3, [pc, #136]	; (200012f4 <init_fire+0x10c>)
2000126a:	6819      	ldr	r1, [r3, #0]
2000126c:	4b22      	ldr	r3, [pc, #136]	; (200012f8 <init_fire+0x110>)
2000126e:	681a      	ldr	r2, [r3, #0]
20001270:	4b19      	ldr	r3, [pc, #100]	; (200012d8 <init_fire+0xf0>)
20001272:	681b      	ldr	r3, [r3, #0]
20001274:	4821      	ldr	r0, [pc, #132]	; (200012fc <init_fire+0x114>)
20001276:	f001 fc79 	bl	20002b6c <load_image>
		load_image(&fireImages[4], fire5Gray, fire5Light, fireBlack);
2000127a:	4b21      	ldr	r3, [pc, #132]	; (20001300 <init_fire+0x118>)
2000127c:	6819      	ldr	r1, [r3, #0]
2000127e:	4b21      	ldr	r3, [pc, #132]	; (20001304 <init_fire+0x11c>)
20001280:	681a      	ldr	r2, [r3, #0]
20001282:	4b15      	ldr	r3, [pc, #84]	; (200012d8 <init_fire+0xf0>)
20001284:	681b      	ldr	r3, [r3, #0]
20001286:	4820      	ldr	r0, [pc, #128]	; (20001308 <init_fire+0x120>)
20001288:	f001 fc70 	bl	20002b6c <load_image>
	}
	
	fireObj->images = fireImages;
2000128c:	687b      	ldr	r3, [r7, #4]
2000128e:	4a0a      	ldr	r2, [pc, #40]	; (200012b8 <init_fire+0xd0>)
20001290:	601a      	str	r2, [r3, #0]

	fireObj->current_frame = 0;
20001292:	687b      	ldr	r3, [r7, #4]
20001294:	2200      	movs	r2, #0
20001296:	615a      	str	r2, [r3, #20]
	fireObj->n_frames = 5;
20001298:	687b      	ldr	r3, [r7, #4]
2000129a:	2205      	movs	r2, #5
2000129c:	619a      	str	r2, [r3, #24]
	fireObj->animation_speed = 1;
2000129e:	687b      	ldr	r3, [r7, #4]
200012a0:	2201      	movs	r2, #1
200012a2:	61da      	str	r2, [r3, #28]
	fireObj->animation_counter = 0;
200012a4:	687b      	ldr	r3, [r7, #4]
200012a6:	2200      	movs	r2, #0
200012a8:	621a      	str	r2, [r3, #32]
}
200012aa:	46c0      	nop			; (mov r8, r8)
200012ac:	46bd      	mov	sp, r7
200012ae:	b003      	add	sp, #12
200012b0:	bd90      	pop	{r4, r7, pc}
200012b2:	46c0      	nop			; (mov r8, r8)
200012b4:	200071c4 	andcs	r7, r0, r4, asr #3
200012b8:	200038ac 	andcs	r3, r0, ip, lsr #17
200012bc:	2000386c 	andcs	r3, r0, ip, ror #16
200012c0:	20003830 	andcs	r3, r0, r0, lsr r8
200012c4:	20003854 	andcs	r3, r0, r4, asr r8
200012c8:	20003900 	andcs	r3, r0, r0, lsl #18
200012cc:	200038a0 	andcs	r3, r0, r0, lsr #17
200012d0:	20003958 	andcs	r3, r0, r8, asr r9
200012d4:	20003810 	andcs	r3, r0, r0, lsl r8
200012d8:	20003940 	andcs	r3, r0, r0, asr #18
200012dc:	20003954 	andcs	r3, r0, r4, asr r9
200012e0:	2000392c 	andcs	r3, r0, ip, lsr #18
200012e4:	200038b8 			; <UNDEFINED> instruction: 0x200038b8
200012e8:	20003820 	andcs	r3, r0, r0, lsr #16
200012ec:	20003950 	andcs	r3, r0, r0, asr r9
200012f0:	200038c4 	andcs	r3, r0, r4, asr #17
200012f4:	2000390c 	andcs	r3, r0, ip, lsl #18
200012f8:	20003878 	andcs	r3, r0, r8, ror r8
200012fc:	200038d0 	ldrdcs	r3, [r0], -r0
20001300:	20003928 	andcs	r3, r0, r8, lsr #18
20001304:	20003930 	andcs	r3, r0, r0, lsr r9
20001308:	200038dc 	ldrdcs	r3, [r0], -ip

2000130c <playerUpdate>:
#include "gpio.h"
#include "controls.h"
#include "gameobject.h"
#include "player.h"

void playerUpdate(GameObject *this) {
2000130c:	b580      	push	{r7, lr}
2000130e:	b082      	sub	sp, #8
20001310:	af00      	add	r7, sp, #0
20001312:	6078      	str	r0, [r7, #4]
	
	// Animate
	this->animation_counter++;
20001314:	687b      	ldr	r3, [r7, #4]
20001316:	6a1b      	ldr	r3, [r3, #32]
20001318:	1c5a      	adds	r2, r3, #1
2000131a:	687b      	ldr	r3, [r7, #4]
2000131c:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
2000131e:	687b      	ldr	r3, [r7, #4]
20001320:	6a1a      	ldr	r2, [r3, #32]
20001322:	687b      	ldr	r3, [r7, #4]
20001324:	69db      	ldr	r3, [r3, #28]
20001326:	429a      	cmp	r2, r3
20001328:	d10f      	bne.n	2000134a <playerUpdate+0x3e>
		this->animation_counter = 0;
2000132a:	687b      	ldr	r3, [r7, #4]
2000132c:	2200      	movs	r2, #0
2000132e:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
20001330:	687b      	ldr	r3, [r7, #4]
20001332:	695b      	ldr	r3, [r3, #20]
20001334:	1c5a      	adds	r2, r3, #1
20001336:	687b      	ldr	r3, [r7, #4]
20001338:	699b      	ldr	r3, [r3, #24]
2000133a:	0019      	movs	r1, r3
2000133c:	0010      	movs	r0, r2
2000133e:	f002 f91b 	bl	20003578 <__aeabi_idivmod>
20001342:	000b      	movs	r3, r1
20001344:	001a      	movs	r2, r3
20001346:	687b      	ldr	r3, [r7, #4]
20001348:	615a      	str	r2, [r3, #20]
	static xSpeed = 0;
	static ySpeed = 0;
	
	// Y position changes
	
	if (lastJumpValue != read_DIL_single(JUMP_TRIGGER) && (this->yPos == LIMIT_DOWN || this->yPos == PLATFORM_Y - PLAYER_HEIGHT)){
2000134a:	2005      	movs	r0, #5
2000134c:	f001 fc52 	bl	20002bf4 <read_DIL_single>
20001350:	0002      	movs	r2, r0
20001352:	4b5e      	ldr	r3, [pc, #376]	; (200014cc <playerUpdate+0x1c0>)
20001354:	681b      	ldr	r3, [r3, #0]
20001356:	429a      	cmp	r2, r3
20001358:	d00b      	beq.n	20001372 <playerUpdate+0x66>
2000135a:	687b      	ldr	r3, [r7, #4]
2000135c:	689b      	ldr	r3, [r3, #8]
2000135e:	2b27      	cmp	r3, #39	; 0x27
20001360:	d003      	beq.n	2000136a <playerUpdate+0x5e>
20001362:	687b      	ldr	r3, [r7, #4]
20001364:	689b      	ldr	r3, [r3, #8]
20001366:	2b05      	cmp	r3, #5
20001368:	d103      	bne.n	20001372 <playerUpdate+0x66>
		ySpeed = -(SPEED_ADD_Y);
2000136a:	4b59      	ldr	r3, [pc, #356]	; (200014d0 <playerUpdate+0x1c4>)
2000136c:	2204      	movs	r2, #4
2000136e:	4252      	negs	r2, r2
20001370:	601a      	str	r2, [r3, #0]
	}
	
	if (this->yPos + ySpeed > LIMIT_DOWN){
20001372:	687b      	ldr	r3, [r7, #4]
20001374:	689a      	ldr	r2, [r3, #8]
20001376:	4b56      	ldr	r3, [pc, #344]	; (200014d0 <playerUpdate+0x1c4>)
20001378:	681b      	ldr	r3, [r3, #0]
2000137a:	18d3      	adds	r3, r2, r3
2000137c:	2b27      	cmp	r3, #39	; 0x27
2000137e:	dd06      	ble.n	2000138e <playerUpdate+0x82>
		this->yPos = LIMIT_DOWN;
20001380:	687b      	ldr	r3, [r7, #4]
20001382:	2227      	movs	r2, #39	; 0x27
20001384:	609a      	str	r2, [r3, #8]
		ySpeed = 0;
20001386:	4b52      	ldr	r3, [pc, #328]	; (200014d0 <playerUpdate+0x1c4>)
20001388:	2200      	movs	r2, #0
2000138a:	601a      	str	r2, [r3, #0]
2000138c:	e020      	b.n	200013d0 <playerUpdate+0xc4>
	}
	else if (this->yPos + ySpeed > PLATFORM_Y - PLAYER_HEIGHT && this->yPos + ySpeed < PLATFORM_Y - PLAYER_HEIGHT + 2*SPEED_ADD_Y){
2000138e:	687b      	ldr	r3, [r7, #4]
20001390:	689a      	ldr	r2, [r3, #8]
20001392:	4b4f      	ldr	r3, [pc, #316]	; (200014d0 <playerUpdate+0x1c4>)
20001394:	681b      	ldr	r3, [r3, #0]
20001396:	18d3      	adds	r3, r2, r3
20001398:	2b05      	cmp	r3, #5
2000139a:	dd0d      	ble.n	200013b8 <playerUpdate+0xac>
2000139c:	687b      	ldr	r3, [r7, #4]
2000139e:	689a      	ldr	r2, [r3, #8]
200013a0:	4b4b      	ldr	r3, [pc, #300]	; (200014d0 <playerUpdate+0x1c4>)
200013a2:	681b      	ldr	r3, [r3, #0]
200013a4:	18d3      	adds	r3, r2, r3
200013a6:	2b0c      	cmp	r3, #12
200013a8:	dc06      	bgt.n	200013b8 <playerUpdate+0xac>
		this->yPos = PLATFORM_Y - PLAYER_HEIGHT;
200013aa:	687b      	ldr	r3, [r7, #4]
200013ac:	2205      	movs	r2, #5
200013ae:	609a      	str	r2, [r3, #8]
		ySpeed = 0;
200013b0:	4b47      	ldr	r3, [pc, #284]	; (200014d0 <playerUpdate+0x1c4>)
200013b2:	2200      	movs	r2, #0
200013b4:	601a      	str	r2, [r3, #0]
200013b6:	e00b      	b.n	200013d0 <playerUpdate+0xc4>
	}
	else{
		this->yPos+=ySpeed;
200013b8:	687b      	ldr	r3, [r7, #4]
200013ba:	689a      	ldr	r2, [r3, #8]
200013bc:	4b44      	ldr	r3, [pc, #272]	; (200014d0 <playerUpdate+0x1c4>)
200013be:	681b      	ldr	r3, [r3, #0]
200013c0:	18d2      	adds	r2, r2, r3
200013c2:	687b      	ldr	r3, [r7, #4]
200013c4:	609a      	str	r2, [r3, #8]
		ySpeed++;
200013c6:	4b42      	ldr	r3, [pc, #264]	; (200014d0 <playerUpdate+0x1c4>)
200013c8:	681b      	ldr	r3, [r3, #0]
200013ca:	1c5a      	adds	r2, r3, #1
200013cc:	4b40      	ldr	r3, [pc, #256]	; (200014d0 <playerUpdate+0x1c4>)
200013ce:	601a      	str	r2, [r3, #0]
	}

	// X position changes
	
	if (!lastRightValue && read_DIL_single(RIGHT_TRIGGER)){ 
200013d0:	4b40      	ldr	r3, [pc, #256]	; (200014d4 <playerUpdate+0x1c8>)
200013d2:	681b      	ldr	r3, [r3, #0]
200013d4:	2b00      	cmp	r3, #0
200013d6:	d109      	bne.n	200013ec <playerUpdate+0xe0>
200013d8:	2000      	movs	r0, #0
200013da:	f001 fc0b 	bl	20002bf4 <read_DIL_single>
200013de:	1e03      	subs	r3, r0, #0
200013e0:	d004      	beq.n	200013ec <playerUpdate+0xe0>
		xSpeed += SPEED_ADD_X;
200013e2:	4b3d      	ldr	r3, [pc, #244]	; (200014d8 <playerUpdate+0x1cc>)
200013e4:	681b      	ldr	r3, [r3, #0]
200013e6:	1cda      	adds	r2, r3, #3
200013e8:	4b3b      	ldr	r3, [pc, #236]	; (200014d8 <playerUpdate+0x1cc>)
200013ea:	601a      	str	r2, [r3, #0]
	}
	
	if (!lastLeftValue && read_DIL_single(LEFT_TRIGGER)){
200013ec:	4b3b      	ldr	r3, [pc, #236]	; (200014dc <playerUpdate+0x1d0>)
200013ee:	681b      	ldr	r3, [r3, #0]
200013f0:	2b00      	cmp	r3, #0
200013f2:	d109      	bne.n	20001408 <playerUpdate+0xfc>
200013f4:	2007      	movs	r0, #7
200013f6:	f001 fbfd 	bl	20002bf4 <read_DIL_single>
200013fa:	1e03      	subs	r3, r0, #0
200013fc:	d004      	beq.n	20001408 <playerUpdate+0xfc>
		xSpeed -= SPEED_ADD_X;
200013fe:	4b36      	ldr	r3, [pc, #216]	; (200014d8 <playerUpdate+0x1cc>)
20001400:	681b      	ldr	r3, [r3, #0]
20001402:	1eda      	subs	r2, r3, #3
20001404:	4b34      	ldr	r3, [pc, #208]	; (200014d8 <playerUpdate+0x1cc>)
20001406:	601a      	str	r2, [r3, #0]
	}
	
	if ((!lastLeftValue && read_DIL_single(LEFT_TRIGGER)) || (!lastRightValue && read_DIL_single(RIGHT_TRIGGER)) && this->yPos != PLATFORM_Y - PLAYER_HEIGHT && this->yPos != LIMIT_DOWN){
20001408:	4b34      	ldr	r3, [pc, #208]	; (200014dc <playerUpdate+0x1d0>)
2000140a:	681b      	ldr	r3, [r3, #0]
2000140c:	2b00      	cmp	r3, #0
2000140e:	d104      	bne.n	2000141a <playerUpdate+0x10e>
20001410:	2007      	movs	r0, #7
20001412:	f001 fbef 	bl	20002bf4 <read_DIL_single>
20001416:	1e03      	subs	r3, r0, #0
20001418:	d110      	bne.n	2000143c <playerUpdate+0x130>
2000141a:	4b2e      	ldr	r3, [pc, #184]	; (200014d4 <playerUpdate+0x1c8>)
2000141c:	681b      	ldr	r3, [r3, #0]
2000141e:	2b00      	cmp	r3, #0
20001420:	d111      	bne.n	20001446 <playerUpdate+0x13a>
20001422:	2000      	movs	r0, #0
20001424:	f001 fbe6 	bl	20002bf4 <read_DIL_single>
20001428:	1e03      	subs	r3, r0, #0
2000142a:	d00c      	beq.n	20001446 <playerUpdate+0x13a>
2000142c:	687b      	ldr	r3, [r7, #4]
2000142e:	689b      	ldr	r3, [r3, #8]
20001430:	2b05      	cmp	r3, #5
20001432:	d008      	beq.n	20001446 <playerUpdate+0x13a>
20001434:	687b      	ldr	r3, [r7, #4]
20001436:	689b      	ldr	r3, [r3, #8]
20001438:	2b27      	cmp	r3, #39	; 0x27
2000143a:	d004      	beq.n	20001446 <playerUpdate+0x13a>
		xSpeed *=2;
2000143c:	4b26      	ldr	r3, [pc, #152]	; (200014d8 <playerUpdate+0x1cc>)
2000143e:	681b      	ldr	r3, [r3, #0]
20001440:	005a      	lsls	r2, r3, #1
20001442:	4b25      	ldr	r3, [pc, #148]	; (200014d8 <playerUpdate+0x1cc>)
20001444:	601a      	str	r2, [r3, #0]
	}
	
	if (this->xPos + xSpeed > LIMIT_RIGHT || this->xPos + xSpeed < LIMIT_LEFT){
20001446:	687b      	ldr	r3, [r7, #4]
20001448:	685a      	ldr	r2, [r3, #4]
2000144a:	4b23      	ldr	r3, [pc, #140]	; (200014d8 <playerUpdate+0x1cc>)
2000144c:	681b      	ldr	r3, [r3, #0]
2000144e:	18d3      	adds	r3, r2, r3
20001450:	2b6e      	cmp	r3, #110	; 0x6e
20001452:	dc06      	bgt.n	20001462 <playerUpdate+0x156>
20001454:	687b      	ldr	r3, [r7, #4]
20001456:	685a      	ldr	r2, [r3, #4]
20001458:	4b1f      	ldr	r3, [pc, #124]	; (200014d8 <playerUpdate+0x1cc>)
2000145a:	681b      	ldr	r3, [r3, #0]
2000145c:	18d3      	adds	r3, r2, r3
2000145e:	2b00      	cmp	r3, #0
20001460:	da04      	bge.n	2000146c <playerUpdate+0x160>
		xSpeed *= -1;	
20001462:	4b1d      	ldr	r3, [pc, #116]	; (200014d8 <playerUpdate+0x1cc>)
20001464:	681b      	ldr	r3, [r3, #0]
20001466:	425a      	negs	r2, r3
20001468:	4b1b      	ldr	r3, [pc, #108]	; (200014d8 <playerUpdate+0x1cc>)
2000146a:	601a      	str	r2, [r3, #0]
	}
	
	this->xPos += xSpeed;	
2000146c:	687b      	ldr	r3, [r7, #4]
2000146e:	685a      	ldr	r2, [r3, #4]
20001470:	4b19      	ldr	r3, [pc, #100]	; (200014d8 <playerUpdate+0x1cc>)
20001472:	681b      	ldr	r3, [r3, #0]
20001474:	18d2      	adds	r2, r2, r3
20001476:	687b      	ldr	r3, [r7, #4]
20001478:	605a      	str	r2, [r3, #4]
	
	if (xSpeed > 0){
2000147a:	4b17      	ldr	r3, [pc, #92]	; (200014d8 <playerUpdate+0x1cc>)
2000147c:	681b      	ldr	r3, [r3, #0]
2000147e:	2b00      	cmp	r3, #0
20001480:	dd05      	ble.n	2000148e <playerUpdate+0x182>
		xSpeed--;
20001482:	4b15      	ldr	r3, [pc, #84]	; (200014d8 <playerUpdate+0x1cc>)
20001484:	681b      	ldr	r3, [r3, #0]
20001486:	1e5a      	subs	r2, r3, #1
20001488:	4b13      	ldr	r3, [pc, #76]	; (200014d8 <playerUpdate+0x1cc>)
2000148a:	601a      	str	r2, [r3, #0]
2000148c:	e008      	b.n	200014a0 <playerUpdate+0x194>
	}
	else if (xSpeed < 0){
2000148e:	4b12      	ldr	r3, [pc, #72]	; (200014d8 <playerUpdate+0x1cc>)
20001490:	681b      	ldr	r3, [r3, #0]
20001492:	2b00      	cmp	r3, #0
20001494:	da04      	bge.n	200014a0 <playerUpdate+0x194>
		xSpeed++;
20001496:	4b10      	ldr	r3, [pc, #64]	; (200014d8 <playerUpdate+0x1cc>)
20001498:	681b      	ldr	r3, [r3, #0]
2000149a:	1c5a      	adds	r2, r3, #1
2000149c:	4b0e      	ldr	r3, [pc, #56]	; (200014d8 <playerUpdate+0x1cc>)
2000149e:	601a      	str	r2, [r3, #0]
	}
	
	// Prepare values
	lastRightValue = read_DIL_single(RIGHT_TRIGGER);
200014a0:	2000      	movs	r0, #0
200014a2:	f001 fba7 	bl	20002bf4 <read_DIL_single>
200014a6:	0002      	movs	r2, r0
200014a8:	4b0a      	ldr	r3, [pc, #40]	; (200014d4 <playerUpdate+0x1c8>)
200014aa:	601a      	str	r2, [r3, #0]
	lastLeftValue = read_DIL_single(LEFT_TRIGGER);
200014ac:	2007      	movs	r0, #7
200014ae:	f001 fba1 	bl	20002bf4 <read_DIL_single>
200014b2:	0002      	movs	r2, r0
200014b4:	4b09      	ldr	r3, [pc, #36]	; (200014dc <playerUpdate+0x1d0>)
200014b6:	601a      	str	r2, [r3, #0]
	lastJumpValue = read_DIL_single(JUMP_TRIGGER);
200014b8:	2005      	movs	r0, #5
200014ba:	f001 fb9b 	bl	20002bf4 <read_DIL_single>
200014be:	0002      	movs	r2, r0
200014c0:	4b02      	ldr	r3, [pc, #8]	; (200014cc <playerUpdate+0x1c0>)
200014c2:	601a      	str	r2, [r3, #0]
	
200014c4:	46c0      	nop			; (mov r8, r8)
200014c6:	46bd      	mov	sp, r7
200014c8:	b002      	add	sp, #8
200014ca:	bd80      	pop	{r7, pc}
200014cc:	20003594 	mulcs	r0, r4, r5
200014d0:	20003598 	mulcs	r0, r8, r5
200014d4:	2000359c 	mulcs	r0, ip, r5
200014d8:	200035a0 	andcs	r3, r0, r0, lsr #11
200014dc:	200035a4 	andcs	r3, r0, r4, lsr #11

200014e0 <initSprites>:
Image bird5Image;
Image bird6Image;
//Image bird7Image;
//Image bird8Image;
Image birdImages[6];
static void initSprites( void ) {	
200014e0:	b580      	push	{r7, lr}
200014e2:	b090      	sub	sp, #64	; 0x40
200014e4:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempBirdLight;
200014e6:	4b54      	ldr	r3, [pc, #336]	; (20001638 <initSprites+0x158>)
200014e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	load_sprite(pointer11, bird1_light_bits, bird1_black_width, bird1_black_height);
200014ea:	4954      	ldr	r1, [pc, #336]	; (2000163c <initSprites+0x15c>)
200014ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
200014ee:	2319      	movs	r3, #25
200014f0:	2219      	movs	r2, #25
200014f2:	f001 fb4f 	bl	20002b94 <load_sprite>
	bird1Light = pointer11;
200014f6:	4b52      	ldr	r3, [pc, #328]	; (20001640 <initSprites+0x160>)
200014f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
200014fa:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempBirdGray;
200014fc:	4b51      	ldr	r3, [pc, #324]	; (20001644 <initSprites+0x164>)
200014fe:	63bb      	str	r3, [r7, #56]	; 0x38
	load_sprite(pointer12, bird1_gray_bits, bird1_black_width, bird1_black_height);
20001500:	4951      	ldr	r1, [pc, #324]	; (20001648 <initSprites+0x168>)
20001502:	6bb8      	ldr	r0, [r7, #56]	; 0x38
20001504:	2319      	movs	r3, #25
20001506:	2219      	movs	r2, #25
20001508:	f001 fb44 	bl	20002b94 <load_sprite>
	bird1Gray = pointer12;
2000150c:	4b4f      	ldr	r3, [pc, #316]	; (2000164c <initSprites+0x16c>)
2000150e:	6bba      	ldr	r2, [r7, #56]	; 0x38
20001510:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempBirdBlack;
20001512:	4b4f      	ldr	r3, [pc, #316]	; (20001650 <initSprites+0x170>)
20001514:	637b      	str	r3, [r7, #52]	; 0x34
	load_sprite(pointer13, bird1_black_bits, bird1_black_width, bird1_black_height);
20001516:	494f      	ldr	r1, [pc, #316]	; (20001654 <initSprites+0x174>)
20001518:	6b78      	ldr	r0, [r7, #52]	; 0x34
2000151a:	2319      	movs	r3, #25
2000151c:	2219      	movs	r2, #25
2000151e:	f001 fb39 	bl	20002b94 <load_sprite>
	bird1Black = pointer13;	
20001522:	4b4d      	ldr	r3, [pc, #308]	; (20001658 <initSprites+0x178>)
20001524:	6b7a      	ldr	r2, [r7, #52]	; 0x34
20001526:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempBird2Light;
20001528:	4b4c      	ldr	r3, [pc, #304]	; (2000165c <initSprites+0x17c>)
2000152a:	633b      	str	r3, [r7, #48]	; 0x30
	load_sprite(pointer14, bird2_light_bits, bird2_black_width, bird2_black_height);
2000152c:	494c      	ldr	r1, [pc, #304]	; (20001660 <initSprites+0x180>)
2000152e:	6b38      	ldr	r0, [r7, #48]	; 0x30
20001530:	2319      	movs	r3, #25
20001532:	2219      	movs	r2, #25
20001534:	f001 fb2e 	bl	20002b94 <load_sprite>
	bird2Light = pointer14;
20001538:	4b4a      	ldr	r3, [pc, #296]	; (20001664 <initSprites+0x184>)
2000153a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
2000153c:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempBird2Gray;
2000153e:	4b4a      	ldr	r3, [pc, #296]	; (20001668 <initSprites+0x188>)
20001540:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer15, bird2_gray_bits, bird2_black_width, bird2_black_height);
20001542:	494a      	ldr	r1, [pc, #296]	; (2000166c <initSprites+0x18c>)
20001544:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20001546:	2319      	movs	r3, #25
20001548:	2219      	movs	r2, #25
2000154a:	f001 fb23 	bl	20002b94 <load_sprite>
	bird2Gray = pointer15;
2000154e:	4b48      	ldr	r3, [pc, #288]	; (20001670 <initSprites+0x190>)
20001550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20001552:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempBird2Black;
20001554:	4b47      	ldr	r3, [pc, #284]	; (20001674 <initSprites+0x194>)
20001556:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer16, bird2_black_bits, bird2_black_width, bird2_black_height);
20001558:	4947      	ldr	r1, [pc, #284]	; (20001678 <initSprites+0x198>)
2000155a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
2000155c:	2319      	movs	r3, #25
2000155e:	2219      	movs	r2, #25
20001560:	f001 fb18 	bl	20002b94 <load_sprite>
	bird2Black = pointer16;
20001564:	4b45      	ldr	r3, [pc, #276]	; (2000167c <initSprites+0x19c>)
20001566:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001568:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempBird3Light;
2000156a:	4b45      	ldr	r3, [pc, #276]	; (20001680 <initSprites+0x1a0>)
2000156c:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(finalPointer, bird3_light_bits, bird3_black_width, bird3_black_height);
2000156e:	4945      	ldr	r1, [pc, #276]	; (20001684 <initSprites+0x1a4>)
20001570:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001572:	2319      	movs	r3, #25
20001574:	2219      	movs	r2, #25
20001576:	f001 fb0d 	bl	20002b94 <load_sprite>
	bird3Light = finalPointer;
2000157a:	4b43      	ldr	r3, [pc, #268]	; (20001688 <initSprites+0x1a8>)
2000157c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000157e:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempBird3Gray;
20001580:	4b42      	ldr	r3, [pc, #264]	; (2000168c <initSprites+0x1ac>)
20001582:	623b      	str	r3, [r7, #32]
	load_sprite(pointer17, bird3_gray_bits, bird3_black_width, bird3_black_height);
20001584:	4942      	ldr	r1, [pc, #264]	; (20001690 <initSprites+0x1b0>)
20001586:	6a38      	ldr	r0, [r7, #32]
20001588:	2319      	movs	r3, #25
2000158a:	2219      	movs	r2, #25
2000158c:	f001 fb02 	bl	20002b94 <load_sprite>
	bird3Gray = pointer17;
20001590:	4b40      	ldr	r3, [pc, #256]	; (20001694 <initSprites+0x1b4>)
20001592:	6a3a      	ldr	r2, [r7, #32]
20001594:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempBird3Black;
20001596:	4b40      	ldr	r3, [pc, #256]	; (20001698 <initSprites+0x1b8>)
20001598:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer18, bird3_black_bits, bird3_black_width, bird3_black_height);
2000159a:	4940      	ldr	r1, [pc, #256]	; (2000169c <initSprites+0x1bc>)
2000159c:	69f8      	ldr	r0, [r7, #28]
2000159e:	2319      	movs	r3, #25
200015a0:	2219      	movs	r2, #25
200015a2:	f001 faf7 	bl	20002b94 <load_sprite>
	bird3Black = pointer18;	
200015a6:	4b3e      	ldr	r3, [pc, #248]	; (200016a0 <initSprites+0x1c0>)
200015a8:	69fa      	ldr	r2, [r7, #28]
200015aa:	601a      	str	r2, [r3, #0]
	
	sprite *pointer19 = &tempBird4Light;
200015ac:	4b3d      	ldr	r3, [pc, #244]	; (200016a4 <initSprites+0x1c4>)
200015ae:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer19, bird4_light_bits, bird4_black_width, bird4_black_height);
200015b0:	493d      	ldr	r1, [pc, #244]	; (200016a8 <initSprites+0x1c8>)
200015b2:	69b8      	ldr	r0, [r7, #24]
200015b4:	2319      	movs	r3, #25
200015b6:	2219      	movs	r2, #25
200015b8:	f001 faec 	bl	20002b94 <load_sprite>
	bird4Light = pointer19;
200015bc:	4b3b      	ldr	r3, [pc, #236]	; (200016ac <initSprites+0x1cc>)
200015be:	69ba      	ldr	r2, [r7, #24]
200015c0:	601a      	str	r2, [r3, #0]
	sprite *pointer20 = &tempBird4Gray;
200015c2:	4b3b      	ldr	r3, [pc, #236]	; (200016b0 <initSprites+0x1d0>)
200015c4:	617b      	str	r3, [r7, #20]
	load_sprite(pointer20, bird4_gray_bits, bird4_black_width, bird4_black_height);
200015c6:	493b      	ldr	r1, [pc, #236]	; (200016b4 <initSprites+0x1d4>)
200015c8:	6978      	ldr	r0, [r7, #20]
200015ca:	2319      	movs	r3, #25
200015cc:	2219      	movs	r2, #25
200015ce:	f001 fae1 	bl	20002b94 <load_sprite>
	bird4Gray = pointer20;
200015d2:	4b39      	ldr	r3, [pc, #228]	; (200016b8 <initSprites+0x1d8>)
200015d4:	697a      	ldr	r2, [r7, #20]
200015d6:	601a      	str	r2, [r3, #0]
	sprite *pointer21 = &tempBird4Black;
200015d8:	4b38      	ldr	r3, [pc, #224]	; (200016bc <initSprites+0x1dc>)
200015da:	613b      	str	r3, [r7, #16]
	load_sprite(pointer21, bird4_black_bits, bird4_black_width, bird4_black_height);
200015dc:	4938      	ldr	r1, [pc, #224]	; (200016c0 <initSprites+0x1e0>)
200015de:	6938      	ldr	r0, [r7, #16]
200015e0:	2319      	movs	r3, #25
200015e2:	2219      	movs	r2, #25
200015e4:	f001 fad6 	bl	20002b94 <load_sprite>
	bird4Black = pointer21;	
200015e8:	4b36      	ldr	r3, [pc, #216]	; (200016c4 <initSprites+0x1e4>)
200015ea:	693a      	ldr	r2, [r7, #16]
200015ec:	601a      	str	r2, [r3, #0]
	
	sprite *pointer22 = &tempBird5Light;
200015ee:	4b36      	ldr	r3, [pc, #216]	; (200016c8 <initSprites+0x1e8>)
200015f0:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer22, bird5_light_bits, bird5_black_width, bird5_black_height);
200015f2:	4936      	ldr	r1, [pc, #216]	; (200016cc <initSprites+0x1ec>)
200015f4:	68f8      	ldr	r0, [r7, #12]
200015f6:	2319      	movs	r3, #25
200015f8:	2219      	movs	r2, #25
200015fa:	f001 facb 	bl	20002b94 <load_sprite>
	bird5Light = pointer22;
200015fe:	4b34      	ldr	r3, [pc, #208]	; (200016d0 <initSprites+0x1f0>)
20001600:	68fa      	ldr	r2, [r7, #12]
20001602:	601a      	str	r2, [r3, #0]
	sprite *pointer23 = &tempBird5Gray;
20001604:	4b33      	ldr	r3, [pc, #204]	; (200016d4 <initSprites+0x1f4>)
20001606:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer23, bird5_gray_bits, bird5_black_width, bird5_black_height);
20001608:	4933      	ldr	r1, [pc, #204]	; (200016d8 <initSprites+0x1f8>)
2000160a:	68b8      	ldr	r0, [r7, #8]
2000160c:	2319      	movs	r3, #25
2000160e:	2219      	movs	r2, #25
20001610:	f001 fac0 	bl	20002b94 <load_sprite>
	bird5Gray = pointer23;
20001614:	4b31      	ldr	r3, [pc, #196]	; (200016dc <initSprites+0x1fc>)
20001616:	68ba      	ldr	r2, [r7, #8]
20001618:	601a      	str	r2, [r3, #0]
	sprite *pointer24 = &tempBird5Black;
2000161a:	4b31      	ldr	r3, [pc, #196]	; (200016e0 <initSprites+0x200>)
2000161c:	607b      	str	r3, [r7, #4]
	load_sprite(pointer24, bird5_black_bits, bird5_black_width, bird5_black_height);
2000161e:	4931      	ldr	r1, [pc, #196]	; (200016e4 <initSprites+0x204>)
20001620:	6878      	ldr	r0, [r7, #4]
20001622:	2319      	movs	r3, #25
20001624:	2219      	movs	r2, #25
20001626:	f001 fab5 	bl	20002b94 <load_sprite>
	bird5Black = pointer24;
2000162a:	4b2f      	ldr	r3, [pc, #188]	; (200016e8 <initSprites+0x208>)
2000162c:	687a      	ldr	r2, [r7, #4]
2000162e:	601a      	str	r2, [r3, #0]
}
20001630:	46c0      	nop			; (mov r8, r8)
20001632:	46bd      	mov	sp, r7
20001634:	b010      	add	sp, #64	; 0x40
20001636:	bd80      	pop	{r7, pc}
20001638:	20003a4c 	andcs	r3, r0, ip, asr #20
2000163c:	20007290 	mulcs	r0, r0, r2
20001640:	20003a58 	andcs	r3, r0, r8, asr sl
20001644:	200039e8 	andcs	r3, r0, r8, ror #19
20001648:	2000722c 	andcs	r7, r0, ip, lsr #4
2000164c:	20003960 	andcs	r3, r0, r0, ror #18
20001650:	200039d8 	ldrdcs	r3, [r0], -r8
20001654:	200071c8 	andcs	r7, r0, r8, asr #3
20001658:	200039c8 	andcs	r3, r0, r8, asr #19
2000165c:	20003a5c 	andcs	r3, r0, ip, asr sl
20001660:	200073bc 			; <UNDEFINED> instruction: 0x200073bc
20001664:	20003afc 	strdcs	r3, [r0], -ip
20001668:	20003a04 	andcs	r3, r0, r4, lsl #20
2000166c:	20007358 	andcs	r7, r0, r8, asr r3
20001670:	20003a48 	andcs	r3, r0, r8, asr #20
20001674:	20003ae4 	andcs	r3, r0, r4, ror #21
20001678:	200072f4 	strdcs	r7, [r0], -r4
2000167c:	200039c4 	andcs	r3, r0, r4, asr #19
20001680:	20003a80 	andcs	r3, r0, r0, lsl #21
20001684:	200074e8 	andcs	r7, r0, r8, ror #9
20001688:	20003a10 	andcs	r3, r0, r0, lsl sl
2000168c:	20003a8c 	andcs	r3, r0, ip, lsl #21
20001690:	20007484 	andcs	r7, r0, r4, lsl #9
20001694:	200039e4 	andcs	r3, r0, r4, ror #19
20001698:	20003a3c 	andcs	r3, r0, ip, lsr sl
2000169c:	20007420 	andcs	r7, r0, r0, lsr #8
200016a0:	200039bc 			; <UNDEFINED> instruction: 0x200039bc
200016a4:	20003a74 	andcs	r3, r0, r4, ror sl
200016a8:	20007614 	andcs	r7, r0, r4, lsl r6
200016ac:	2000395c 	andcs	r3, r0, ip, asr r9
200016b0:	20003af0 	strdcs	r3, [r0], -r0
200016b4:	200075b0 			; <UNDEFINED> instruction: 0x200075b0
200016b8:	200039c0 	andcs	r3, r0, r0, asr #19
200016bc:	20003974 	andcs	r3, r0, r4, ror r9
200016c0:	2000754c 	andcs	r7, r0, ip, asr #10
200016c4:	20003ae0 	andcs	r3, r0, r0, ror #21
200016c8:	200039f8 	strdcs	r3, [r0], -r8
200016cc:	20007740 	andcs	r7, r0, r0, asr #14
200016d0:	20003a38 	andcs	r3, r0, r8, lsr sl
200016d4:	20003a14 	andcs	r3, r0, r4, lsl sl
200016d8:	200076dc 	ldrdcs	r7, [r0], -ip
200016dc:	200039f4 	strdcs	r3, [r0], -r4
200016e0:	20003a20 	andcs	r3, r0, r0, lsr #20
200016e4:	20007678 	andcs	r7, r0, r8, ror r6
200016e8:	20003970 	andcs	r3, r0, r0, ror r9

200016ec <init_bird>:
	
void init_bird( GameObject *birdObj ) {
200016ec:	b590      	push	{r4, r7, lr}
200016ee:	b083      	sub	sp, #12
200016f0:	af00      	add	r7, sp, #0
200016f2:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
200016f4:	4b37      	ldr	r3, [pc, #220]	; (200017d4 <init_bird+0xe8>)
200016f6:	681b      	ldr	r3, [r3, #0]
200016f8:	2b00      	cmp	r3, #0
200016fa:	d057      	beq.n	200017ac <init_bird+0xc0>
		initSprites();
200016fc:	f7ff fef0 	bl	200014e0 <initSprites>
		firstTime = 0;			
20001700:	4b34      	ldr	r3, [pc, #208]	; (200017d4 <init_bird+0xe8>)
20001702:	2200      	movs	r2, #0
20001704:	601a      	str	r2, [r3, #0]

		birdImages[0] = bird1Image;
20001706:	4b34      	ldr	r3, [pc, #208]	; (200017d8 <init_bird+0xec>)
20001708:	4a34      	ldr	r2, [pc, #208]	; (200017dc <init_bird+0xf0>)
2000170a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000170c:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[1] = bird2Image;
2000170e:	4b32      	ldr	r3, [pc, #200]	; (200017d8 <init_bird+0xec>)
20001710:	4a33      	ldr	r2, [pc, #204]	; (200017e0 <init_bird+0xf4>)
20001712:	330c      	adds	r3, #12
20001714:	ca13      	ldmia	r2!, {r0, r1, r4}
20001716:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[2] = bird3Image;
20001718:	4b2f      	ldr	r3, [pc, #188]	; (200017d8 <init_bird+0xec>)
2000171a:	4a32      	ldr	r2, [pc, #200]	; (200017e4 <init_bird+0xf8>)
2000171c:	3318      	adds	r3, #24
2000171e:	ca13      	ldmia	r2!, {r0, r1, r4}
20001720:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[3] = bird4Image;
20001722:	4b2d      	ldr	r3, [pc, #180]	; (200017d8 <init_bird+0xec>)
20001724:	4a30      	ldr	r2, [pc, #192]	; (200017e8 <init_bird+0xfc>)
20001726:	3324      	adds	r3, #36	; 0x24
20001728:	ca13      	ldmia	r2!, {r0, r1, r4}
2000172a:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[4] = bird5Image;
2000172c:	4b2a      	ldr	r3, [pc, #168]	; (200017d8 <init_bird+0xec>)
2000172e:	4a2f      	ldr	r2, [pc, #188]	; (200017ec <init_bird+0x100>)
20001730:	3330      	adds	r3, #48	; 0x30
20001732:	ca13      	ldmia	r2!, {r0, r1, r4}
20001734:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[5] = bird6Image;
20001736:	4b28      	ldr	r3, [pc, #160]	; (200017d8 <init_bird+0xec>)
20001738:	4a2d      	ldr	r2, [pc, #180]	; (200017f0 <init_bird+0x104>)
2000173a:	333c      	adds	r3, #60	; 0x3c
2000173c:	ca13      	ldmia	r2!, {r0, r1, r4}
2000173e:	c313      	stmia	r3!, {r0, r1, r4}
//		birdImages[6] = bird7Image;
		//birdImages[7] = bird8Image;
		
		load_image(&birdImages[0], bird1Black, bird1Gray, bird1Light);
20001740:	4b2c      	ldr	r3, [pc, #176]	; (200017f4 <init_bird+0x108>)
20001742:	6819      	ldr	r1, [r3, #0]
20001744:	4b2c      	ldr	r3, [pc, #176]	; (200017f8 <init_bird+0x10c>)
20001746:	681a      	ldr	r2, [r3, #0]
20001748:	4b2c      	ldr	r3, [pc, #176]	; (200017fc <init_bird+0x110>)
2000174a:	681b      	ldr	r3, [r3, #0]
2000174c:	4822      	ldr	r0, [pc, #136]	; (200017d8 <init_bird+0xec>)
2000174e:	f001 fa0d 	bl	20002b6c <load_image>
		load_image(&birdImages[1], bird2Black, bird2Gray, bird2Light);
20001752:	4b2b      	ldr	r3, [pc, #172]	; (20001800 <init_bird+0x114>)
20001754:	6819      	ldr	r1, [r3, #0]
20001756:	4b2b      	ldr	r3, [pc, #172]	; (20001804 <init_bird+0x118>)
20001758:	681a      	ldr	r2, [r3, #0]
2000175a:	4b2b      	ldr	r3, [pc, #172]	; (20001808 <init_bird+0x11c>)
2000175c:	681b      	ldr	r3, [r3, #0]
2000175e:	482b      	ldr	r0, [pc, #172]	; (2000180c <init_bird+0x120>)
20001760:	f001 fa04 	bl	20002b6c <load_image>
		load_image(&birdImages[2], bird3Black, bird3Gray, bird3Light);
20001764:	4b2a      	ldr	r3, [pc, #168]	; (20001810 <init_bird+0x124>)
20001766:	6819      	ldr	r1, [r3, #0]
20001768:	4b2a      	ldr	r3, [pc, #168]	; (20001814 <init_bird+0x128>)
2000176a:	681a      	ldr	r2, [r3, #0]
2000176c:	4b2a      	ldr	r3, [pc, #168]	; (20001818 <init_bird+0x12c>)
2000176e:	681b      	ldr	r3, [r3, #0]
20001770:	482a      	ldr	r0, [pc, #168]	; (2000181c <init_bird+0x130>)
20001772:	f001 f9fb 	bl	20002b6c <load_image>
		load_image(&birdImages[3], bird4Black, bird4Gray, bird4Light);
20001776:	4b2a      	ldr	r3, [pc, #168]	; (20001820 <init_bird+0x134>)
20001778:	6819      	ldr	r1, [r3, #0]
2000177a:	4b2a      	ldr	r3, [pc, #168]	; (20001824 <init_bird+0x138>)
2000177c:	681a      	ldr	r2, [r3, #0]
2000177e:	4b2a      	ldr	r3, [pc, #168]	; (20001828 <init_bird+0x13c>)
20001780:	681b      	ldr	r3, [r3, #0]
20001782:	482a      	ldr	r0, [pc, #168]	; (2000182c <init_bird+0x140>)
20001784:	f001 f9f2 	bl	20002b6c <load_image>
		load_image(&birdImages[4], bird5Black, bird5Gray, bird5Light);
20001788:	4b29      	ldr	r3, [pc, #164]	; (20001830 <init_bird+0x144>)
2000178a:	6819      	ldr	r1, [r3, #0]
2000178c:	4b29      	ldr	r3, [pc, #164]	; (20001834 <init_bird+0x148>)
2000178e:	681a      	ldr	r2, [r3, #0]
20001790:	4b29      	ldr	r3, [pc, #164]	; (20001838 <init_bird+0x14c>)
20001792:	681b      	ldr	r3, [r3, #0]
20001794:	4829      	ldr	r0, [pc, #164]	; (2000183c <init_bird+0x150>)
20001796:	f001 f9e9 	bl	20002b6c <load_image>
		
		//load_image(&birdImages[7], bird2Black, bird2Gray, bird2Light);
		load_image(&birdImages[5], bird3Black, bird3Gray, bird3Light);
2000179a:	4b1d      	ldr	r3, [pc, #116]	; (20001810 <init_bird+0x124>)
2000179c:	6819      	ldr	r1, [r3, #0]
2000179e:	4b1d      	ldr	r3, [pc, #116]	; (20001814 <init_bird+0x128>)
200017a0:	681a      	ldr	r2, [r3, #0]
200017a2:	4b1d      	ldr	r3, [pc, #116]	; (20001818 <init_bird+0x12c>)
200017a4:	681b      	ldr	r3, [r3, #0]
200017a6:	4826      	ldr	r0, [pc, #152]	; (20001840 <init_bird+0x154>)
200017a8:	f001 f9e0 	bl	20002b6c <load_image>
		//load_image(&birdImages[5], bird4Black, bird4Gray, bird4Light);
	}
	
	birdObj->images = birdImages;
200017ac:	687b      	ldr	r3, [r7, #4]
200017ae:	4a0a      	ldr	r2, [pc, #40]	; (200017d8 <init_bird+0xec>)
200017b0:	601a      	str	r2, [r3, #0]

	birdObj->current_frame = 0;
200017b2:	687b      	ldr	r3, [r7, #4]
200017b4:	2200      	movs	r2, #0
200017b6:	615a      	str	r2, [r3, #20]
	birdObj->n_frames = 6;
200017b8:	687b      	ldr	r3, [r7, #4]
200017ba:	2206      	movs	r2, #6
200017bc:	619a      	str	r2, [r3, #24]
	birdObj->animation_speed = 1;
200017be:	687b      	ldr	r3, [r7, #4]
200017c0:	2201      	movs	r2, #1
200017c2:	61da      	str	r2, [r3, #28]
	birdObj->animation_counter = 0;
200017c4:	687b      	ldr	r3, [r7, #4]
200017c6:	2200      	movs	r2, #0
200017c8:	621a      	str	r2, [r3, #32]
}
200017ca:	46c0      	nop			; (mov r8, r8)
200017cc:	46bd      	mov	sp, r7
200017ce:	b003      	add	sp, #12
200017d0:	bd90      	pop	{r4, r7, pc}
200017d2:	46c0      	nop			; (mov r8, r8)
200017d4:	200077a4 	andcs	r7, r0, r4, lsr #15
200017d8:	20003a98 	mulcs	r0, r8, sl
200017dc:	200039b0 			; <UNDEFINED> instruction: 0x200039b0
200017e0:	20003980 	andcs	r3, r0, r0, lsl #19
200017e4:	20003a68 	andcs	r3, r0, r8, ror #20
200017e8:	200039cc 	andcs	r3, r0, ip, asr #19
200017ec:	20003a2c 	andcs	r3, r0, ip, lsr #20
200017f0:	20003964 	andcs	r3, r0, r4, ror #18
200017f4:	200039c8 	andcs	r3, r0, r8, asr #19
200017f8:	20003960 	andcs	r3, r0, r0, ror #18
200017fc:	20003a58 	andcs	r3, r0, r8, asr sl
20001800:	200039c4 	andcs	r3, r0, r4, asr #19
20001804:	20003a48 	andcs	r3, r0, r8, asr #20
20001808:	20003afc 	strdcs	r3, [r0], -ip
2000180c:	20003aa4 	andcs	r3, r0, r4, lsr #21
20001810:	200039bc 			; <UNDEFINED> instruction: 0x200039bc
20001814:	200039e4 	andcs	r3, r0, r4, ror #19
20001818:	20003a10 	andcs	r3, r0, r0, lsl sl
2000181c:	20003ab0 			; <UNDEFINED> instruction: 0x20003ab0
20001820:	20003ae0 	andcs	r3, r0, r0, ror #21
20001824:	200039c0 	andcs	r3, r0, r0, asr #19
20001828:	2000395c 	andcs	r3, r0, ip, asr r9
2000182c:	20003abc 			; <UNDEFINED> instruction: 0x20003abc
20001830:	20003970 	andcs	r3, r0, r0, ror r9
20001834:	200039f4 	strdcs	r3, [r0], -r4
20001838:	20003a38 	andcs	r3, r0, r8, lsr sl
2000183c:	20003ac8 	andcs	r3, r0, r8, asr #21
20001840:	20003ad4 	ldrdcs	r3, [r0], -r4

20001844 <initSprites>:
Image witch1Image;
Image witch2Image;
Image witch3Image;
Image witch4Image;
Image witchImages[4];
static void initSprites( void ) {	
20001844:	b580      	push	{r7, lr}
20001846:	b08a      	sub	sp, #40	; 0x28
20001848:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempWitchLight;
2000184a:	4b33      	ldr	r3, [pc, #204]	; (20001918 <initSprites+0xd4>)
2000184c:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer11, witch1_light_bits, witch1_black_width, witch1_black_height);
2000184e:	4933      	ldr	r1, [pc, #204]	; (2000191c <initSprites+0xd8>)
20001850:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001852:	2312      	movs	r3, #18
20001854:	2212      	movs	r2, #18
20001856:	f001 f99d 	bl	20002b94 <load_sprite>
	witch1Light = pointer11;
2000185a:	4b31      	ldr	r3, [pc, #196]	; (20001920 <initSprites+0xdc>)
2000185c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000185e:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempWitchGray;
20001860:	4b30      	ldr	r3, [pc, #192]	; (20001924 <initSprites+0xe0>)
20001862:	623b      	str	r3, [r7, #32]
	load_sprite(pointer12, witch1_gray_bits, witch1_black_width, witch1_black_height);
20001864:	4930      	ldr	r1, [pc, #192]	; (20001928 <initSprites+0xe4>)
20001866:	6a38      	ldr	r0, [r7, #32]
20001868:	2312      	movs	r3, #18
2000186a:	2212      	movs	r2, #18
2000186c:	f001 f992 	bl	20002b94 <load_sprite>
	witch1Gray = pointer12;
20001870:	4b2e      	ldr	r3, [pc, #184]	; (2000192c <initSprites+0xe8>)
20001872:	6a3a      	ldr	r2, [r7, #32]
20001874:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempWitchBlack;
20001876:	4b2e      	ldr	r3, [pc, #184]	; (20001930 <initSprites+0xec>)
20001878:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer13, witch1_black_bits, witch1_black_width, witch1_black_height);
2000187a:	492e      	ldr	r1, [pc, #184]	; (20001934 <initSprites+0xf0>)
2000187c:	69f8      	ldr	r0, [r7, #28]
2000187e:	2312      	movs	r3, #18
20001880:	2212      	movs	r2, #18
20001882:	f001 f987 	bl	20002b94 <load_sprite>
	witch1Black = pointer13;	
20001886:	4b2c      	ldr	r3, [pc, #176]	; (20001938 <initSprites+0xf4>)
20001888:	69fa      	ldr	r2, [r7, #28]
2000188a:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempWitch2Light;
2000188c:	4b2b      	ldr	r3, [pc, #172]	; (2000193c <initSprites+0xf8>)
2000188e:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer14, witch2_light_bits, witch2_black_width, witch2_black_height);
20001890:	492b      	ldr	r1, [pc, #172]	; (20001940 <initSprites+0xfc>)
20001892:	69b8      	ldr	r0, [r7, #24]
20001894:	2312      	movs	r3, #18
20001896:	2212      	movs	r2, #18
20001898:	f001 f97c 	bl	20002b94 <load_sprite>
	witch2Light = pointer14;
2000189c:	4b29      	ldr	r3, [pc, #164]	; (20001944 <initSprites+0x100>)
2000189e:	69ba      	ldr	r2, [r7, #24]
200018a0:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempWitch2Gray;
200018a2:	4b29      	ldr	r3, [pc, #164]	; (20001948 <initSprites+0x104>)
200018a4:	617b      	str	r3, [r7, #20]
	load_sprite(pointer15, witch2_gray_bits, witch2_black_width, witch2_black_height);
200018a6:	4929      	ldr	r1, [pc, #164]	; (2000194c <initSprites+0x108>)
200018a8:	6978      	ldr	r0, [r7, #20]
200018aa:	2312      	movs	r3, #18
200018ac:	2212      	movs	r2, #18
200018ae:	f001 f971 	bl	20002b94 <load_sprite>
	witch2Gray = pointer15;
200018b2:	4b27      	ldr	r3, [pc, #156]	; (20001950 <initSprites+0x10c>)
200018b4:	697a      	ldr	r2, [r7, #20]
200018b6:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempWitch2Black;
200018b8:	4b26      	ldr	r3, [pc, #152]	; (20001954 <initSprites+0x110>)
200018ba:	613b      	str	r3, [r7, #16]
	load_sprite(pointer16, witch2_black_bits, witch2_black_width, witch2_black_height);
200018bc:	4926      	ldr	r1, [pc, #152]	; (20001958 <initSprites+0x114>)
200018be:	6938      	ldr	r0, [r7, #16]
200018c0:	2312      	movs	r3, #18
200018c2:	2212      	movs	r2, #18
200018c4:	f001 f966 	bl	20002b94 <load_sprite>
	witch2Black = pointer16;
200018c8:	4b24      	ldr	r3, [pc, #144]	; (2000195c <initSprites+0x118>)
200018ca:	693a      	ldr	r2, [r7, #16]
200018cc:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempWitch3Light;
200018ce:	4b24      	ldr	r3, [pc, #144]	; (20001960 <initSprites+0x11c>)
200018d0:	60fb      	str	r3, [r7, #12]
	load_sprite(finalPointer, witch3_light_bits, witch3_black_width, witch3_black_height);
200018d2:	4924      	ldr	r1, [pc, #144]	; (20001964 <initSprites+0x120>)
200018d4:	68f8      	ldr	r0, [r7, #12]
200018d6:	2312      	movs	r3, #18
200018d8:	2212      	movs	r2, #18
200018da:	f001 f95b 	bl	20002b94 <load_sprite>
	witch3Light = finalPointer;
200018de:	4b22      	ldr	r3, [pc, #136]	; (20001968 <initSprites+0x124>)
200018e0:	68fa      	ldr	r2, [r7, #12]
200018e2:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempWitch3Gray;
200018e4:	4b21      	ldr	r3, [pc, #132]	; (2000196c <initSprites+0x128>)
200018e6:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer17, witch3_gray_bits, witch3_black_width, witch3_black_height);
200018e8:	4921      	ldr	r1, [pc, #132]	; (20001970 <initSprites+0x12c>)
200018ea:	68b8      	ldr	r0, [r7, #8]
200018ec:	2312      	movs	r3, #18
200018ee:	2212      	movs	r2, #18
200018f0:	f001 f950 	bl	20002b94 <load_sprite>
	witch3Gray = pointer17;
200018f4:	4b1f      	ldr	r3, [pc, #124]	; (20001974 <initSprites+0x130>)
200018f6:	68ba      	ldr	r2, [r7, #8]
200018f8:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempWitch3Black;
200018fa:	4b1f      	ldr	r3, [pc, #124]	; (20001978 <initSprites+0x134>)
200018fc:	607b      	str	r3, [r7, #4]
	load_sprite(pointer18, witch3_black_bits, witch3_black_width, witch3_black_height);
200018fe:	491f      	ldr	r1, [pc, #124]	; (2000197c <initSprites+0x138>)
20001900:	6878      	ldr	r0, [r7, #4]
20001902:	2312      	movs	r3, #18
20001904:	2212      	movs	r2, #18
20001906:	f001 f945 	bl	20002b94 <load_sprite>
	witch3Black = pointer18;	
2000190a:	4b1d      	ldr	r3, [pc, #116]	; (20001980 <initSprites+0x13c>)
2000190c:	687a      	ldr	r2, [r7, #4]
2000190e:	601a      	str	r2, [r3, #0]
	
}
20001910:	46c0      	nop			; (mov r8, r8)
20001912:	46bd      	mov	sp, r7
20001914:	b00a      	add	sp, #40	; 0x28
20001916:	bd80      	pop	{r7, pc}
20001918:	20003be8 	andcs	r3, r0, r8, ror #23
2000191c:	20007818 	andcs	r7, r0, r8, lsl r8
20001920:	20003c00 	andcs	r3, r0, r0, lsl #24
20001924:	20003b78 	andcs	r3, r0, r8, ror fp
20001928:	200077e0 	andcs	r7, r0, r0, ror #15
2000192c:	20003b00 	andcs	r3, r0, r0, lsl #22
20001930:	20003b50 	andcs	r3, r0, r0, asr fp
20001934:	200077a8 	andcs	r7, r0, r8, lsr #15
20001938:	20003bd4 	ldrdcs	r3, [r0], -r4
2000193c:	20003bf4 	strdcs	r3, [r0], -r4
20001940:	200078c0 	andcs	r7, r0, r0, asr #17
20001944:	20003b04 	andcs	r3, r0, r4, lsl #22
20001948:	20003b90 	mulcs	r0, r0, fp
2000194c:	20007888 	andcs	r7, r0, r8, lsl #17
20001950:	20003b74 	andcs	r3, r0, r4, ror fp
20001954:	20003b44 	andcs	r3, r0, r4, asr #22
20001958:	20007850 	andcs	r7, r0, r0, asr r8
2000195c:	20003c10 	andcs	r3, r0, r0, lsl ip
20001960:	20003b5c 	andcs	r3, r0, ip, asr fp
20001964:	20007968 	andcs	r7, r0, r8, ror #18
20001968:	20003bc4 	andcs	r3, r0, r4, asr #23
2000196c:	20003bc8 	andcs	r3, r0, r8, asr #23
20001970:	20007930 	andcs	r7, r0, r0, lsr r9
20001974:	20003bd8 	ldrdcs	r3, [r0], -r8
20001978:	20003b84 	andcs	r3, r0, r4, lsl #23
2000197c:	200078f8 	strdcs	r7, [r0], -r8
20001980:	20003b9c 	mulcs	r0, ip, fp

20001984 <init_witch>:
	
void init_witch( GameObject *witchObj ) {
20001984:	b590      	push	{r4, r7, lr}
20001986:	b083      	sub	sp, #12
20001988:	af00      	add	r7, sp, #0
2000198a:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
2000198c:	4b29      	ldr	r3, [pc, #164]	; (20001a34 <init_witch+0xb0>)
2000198e:	681b      	ldr	r3, [r3, #0]
20001990:	2b00      	cmp	r3, #0
20001992:	d03b      	beq.n	20001a0c <init_witch+0x88>
		initSprites();
20001994:	f7ff ff56 	bl	20001844 <initSprites>
		firstTime = 0;			
20001998:	4b26      	ldr	r3, [pc, #152]	; (20001a34 <init_witch+0xb0>)
2000199a:	2200      	movs	r2, #0
2000199c:	601a      	str	r2, [r3, #0]

		witchImages[0] = witch1Image;
2000199e:	4b26      	ldr	r3, [pc, #152]	; (20001a38 <init_witch+0xb4>)
200019a0:	4a26      	ldr	r2, [pc, #152]	; (20001a3c <init_witch+0xb8>)
200019a2:	ca13      	ldmia	r2!, {r0, r1, r4}
200019a4:	c313      	stmia	r3!, {r0, r1, r4}
		witchImages[1] = witch2Image;
200019a6:	4b24      	ldr	r3, [pc, #144]	; (20001a38 <init_witch+0xb4>)
200019a8:	4a25      	ldr	r2, [pc, #148]	; (20001a40 <init_witch+0xbc>)
200019aa:	330c      	adds	r3, #12
200019ac:	ca13      	ldmia	r2!, {r0, r1, r4}
200019ae:	c313      	stmia	r3!, {r0, r1, r4}
		witchImages[2] = witch3Image;
200019b0:	4b21      	ldr	r3, [pc, #132]	; (20001a38 <init_witch+0xb4>)
200019b2:	4a24      	ldr	r2, [pc, #144]	; (20001a44 <init_witch+0xc0>)
200019b4:	3318      	adds	r3, #24
200019b6:	ca13      	ldmia	r2!, {r0, r1, r4}
200019b8:	c313      	stmia	r3!, {r0, r1, r4}
		witchImages[3] = witch4Image;
200019ba:	4b1f      	ldr	r3, [pc, #124]	; (20001a38 <init_witch+0xb4>)
200019bc:	4a22      	ldr	r2, [pc, #136]	; (20001a48 <init_witch+0xc4>)
200019be:	3324      	adds	r3, #36	; 0x24
200019c0:	ca13      	ldmia	r2!, {r0, r1, r4}
200019c2:	c313      	stmia	r3!, {r0, r1, r4}
		
		
		load_image(&witchImages[0], witch1Black, witch1Gray, witch1Light);
200019c4:	4b21      	ldr	r3, [pc, #132]	; (20001a4c <init_witch+0xc8>)
200019c6:	6819      	ldr	r1, [r3, #0]
200019c8:	4b21      	ldr	r3, [pc, #132]	; (20001a50 <init_witch+0xcc>)
200019ca:	681a      	ldr	r2, [r3, #0]
200019cc:	4b21      	ldr	r3, [pc, #132]	; (20001a54 <init_witch+0xd0>)
200019ce:	681b      	ldr	r3, [r3, #0]
200019d0:	4819      	ldr	r0, [pc, #100]	; (20001a38 <init_witch+0xb4>)
200019d2:	f001 f8cb 	bl	20002b6c <load_image>
		load_image(&witchImages[1], witch2Black, witch2Gray, witch2Light);
200019d6:	4b20      	ldr	r3, [pc, #128]	; (20001a58 <init_witch+0xd4>)
200019d8:	6819      	ldr	r1, [r3, #0]
200019da:	4b20      	ldr	r3, [pc, #128]	; (20001a5c <init_witch+0xd8>)
200019dc:	681a      	ldr	r2, [r3, #0]
200019de:	4b20      	ldr	r3, [pc, #128]	; (20001a60 <init_witch+0xdc>)
200019e0:	681b      	ldr	r3, [r3, #0]
200019e2:	4820      	ldr	r0, [pc, #128]	; (20001a64 <init_witch+0xe0>)
200019e4:	f001 f8c2 	bl	20002b6c <load_image>
		load_image(&witchImages[2], witch3Black, witch3Gray, witch3Light);
200019e8:	4b1f      	ldr	r3, [pc, #124]	; (20001a68 <init_witch+0xe4>)
200019ea:	6819      	ldr	r1, [r3, #0]
200019ec:	4b1f      	ldr	r3, [pc, #124]	; (20001a6c <init_witch+0xe8>)
200019ee:	681a      	ldr	r2, [r3, #0]
200019f0:	4b1f      	ldr	r3, [pc, #124]	; (20001a70 <init_witch+0xec>)
200019f2:	681b      	ldr	r3, [r3, #0]
200019f4:	481f      	ldr	r0, [pc, #124]	; (20001a74 <init_witch+0xf0>)
200019f6:	f001 f8b9 	bl	20002b6c <load_image>
		load_image(&witchImages[3], witch2Black, witch2Gray, witch2Light);
200019fa:	4b17      	ldr	r3, [pc, #92]	; (20001a58 <init_witch+0xd4>)
200019fc:	6819      	ldr	r1, [r3, #0]
200019fe:	4b17      	ldr	r3, [pc, #92]	; (20001a5c <init_witch+0xd8>)
20001a00:	681a      	ldr	r2, [r3, #0]
20001a02:	4b17      	ldr	r3, [pc, #92]	; (20001a60 <init_witch+0xdc>)
20001a04:	681b      	ldr	r3, [r3, #0]
20001a06:	481c      	ldr	r0, [pc, #112]	; (20001a78 <init_witch+0xf4>)
20001a08:	f001 f8b0 	bl	20002b6c <load_image>
		
	}
	
	witchObj->images = witchImages;
20001a0c:	687b      	ldr	r3, [r7, #4]
20001a0e:	4a0a      	ldr	r2, [pc, #40]	; (20001a38 <init_witch+0xb4>)
20001a10:	601a      	str	r2, [r3, #0]

	witchObj->current_frame = 0;
20001a12:	687b      	ldr	r3, [r7, #4]
20001a14:	2200      	movs	r2, #0
20001a16:	615a      	str	r2, [r3, #20]
	witchObj->n_frames = 4;
20001a18:	687b      	ldr	r3, [r7, #4]
20001a1a:	2204      	movs	r2, #4
20001a1c:	619a      	str	r2, [r3, #24]
	witchObj->animation_speed = 1;
20001a1e:	687b      	ldr	r3, [r7, #4]
20001a20:	2201      	movs	r2, #1
20001a22:	61da      	str	r2, [r3, #28]
	witchObj->animation_counter = 0;
20001a24:	687b      	ldr	r3, [r7, #4]
20001a26:	2200      	movs	r2, #0
20001a28:	621a      	str	r2, [r3, #32]
}
20001a2a:	46c0      	nop			; (mov r8, r8)
20001a2c:	46bd      	mov	sp, r7
20001a2e:	b003      	add	sp, #12
20001a30:	bd90      	pop	{r4, r7, pc}
20001a32:	46c0      	nop			; (mov r8, r8)
20001a34:	200079a0 	andcs	r7, r0, r0, lsr #19
20001a38:	20003b08 	andcs	r3, r0, r8, lsl #22
20001a3c:	20003bdc 	ldrdcs	r3, [r0], -ip
20001a40:	20003b38 	andcs	r3, r0, r8, lsr fp
20001a44:	20003c04 	andcs	r3, r0, r4, lsl #24
20001a48:	20003b68 	andcs	r3, r0, r8, ror #22
20001a4c:	20003bd4 	ldrdcs	r3, [r0], -r4
20001a50:	20003b00 	andcs	r3, r0, r0, lsl #22
20001a54:	20003c00 	andcs	r3, r0, r0, lsl #24
20001a58:	20003c10 	andcs	r3, r0, r0, lsl ip
20001a5c:	20003b74 	andcs	r3, r0, r4, ror fp
20001a60:	20003b04 	andcs	r3, r0, r4, lsl #22
20001a64:	20003b14 	andcs	r3, r0, r4, lsl fp
20001a68:	20003b9c 	mulcs	r0, ip, fp
20001a6c:	20003bd8 	ldrdcs	r3, [r0], -r8
20001a70:	20003bc4 	andcs	r3, r0, r4, asr #23
20001a74:	20003b20 	andcs	r3, r0, r0, lsr #22
20001a78:	20003b2c 	andcs	r3, r0, ip, lsr #22

20001a7c <initSprites>:
Image DIP1Image;
Image DIP2Image;
Image DIP3Image;
Image DIP4Image;
Image DIPImages[4];
static void initSprites( void ) {	
20001a7c:	b580      	push	{r7, lr}
20001a7e:	b08a      	sub	sp, #40	; 0x28
20001a80:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempDIPLight;
20001a82:	4b33      	ldr	r3, [pc, #204]	; (20001b50 <initSprites+0xd4>)
20001a84:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer11, witch1_light_bits, witch1_black_width, witch1_black_height);
20001a86:	4933      	ldr	r1, [pc, #204]	; (20001b54 <initSprites+0xd8>)
20001a88:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001a8a:	2312      	movs	r3, #18
20001a8c:	2212      	movs	r2, #18
20001a8e:	f001 f881 	bl	20002b94 <load_sprite>
	DIP1Light = pointer11;
20001a92:	4b31      	ldr	r3, [pc, #196]	; (20001b58 <initSprites+0xdc>)
20001a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001a96:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempDIPGray;
20001a98:	4b30      	ldr	r3, [pc, #192]	; (20001b5c <initSprites+0xe0>)
20001a9a:	623b      	str	r3, [r7, #32]
	load_sprite(pointer12, witch1_gray_bits, witch1_black_width, witch1_black_height);
20001a9c:	4930      	ldr	r1, [pc, #192]	; (20001b60 <initSprites+0xe4>)
20001a9e:	6a38      	ldr	r0, [r7, #32]
20001aa0:	2312      	movs	r3, #18
20001aa2:	2212      	movs	r2, #18
20001aa4:	f001 f876 	bl	20002b94 <load_sprite>
	DIP1Gray = pointer12;
20001aa8:	4b2e      	ldr	r3, [pc, #184]	; (20001b64 <initSprites+0xe8>)
20001aaa:	6a3a      	ldr	r2, [r7, #32]
20001aac:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempDIPBlack;
20001aae:	4b2e      	ldr	r3, [pc, #184]	; (20001b68 <initSprites+0xec>)
20001ab0:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer13, witch1_black_bits, witch1_black_width, witch1_black_height);
20001ab2:	492e      	ldr	r1, [pc, #184]	; (20001b6c <initSprites+0xf0>)
20001ab4:	69f8      	ldr	r0, [r7, #28]
20001ab6:	2312      	movs	r3, #18
20001ab8:	2212      	movs	r2, #18
20001aba:	f001 f86b 	bl	20002b94 <load_sprite>
	DIP1Black = pointer13;	
20001abe:	4b2c      	ldr	r3, [pc, #176]	; (20001b70 <initSprites+0xf4>)
20001ac0:	69fa      	ldr	r2, [r7, #28]
20001ac2:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempDIP2Light;
20001ac4:	4b2b      	ldr	r3, [pc, #172]	; (20001b74 <initSprites+0xf8>)
20001ac6:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer14, witch2_light_bits, witch2_black_width, witch2_black_height);
20001ac8:	492b      	ldr	r1, [pc, #172]	; (20001b78 <initSprites+0xfc>)
20001aca:	69b8      	ldr	r0, [r7, #24]
20001acc:	2312      	movs	r3, #18
20001ace:	2212      	movs	r2, #18
20001ad0:	f001 f860 	bl	20002b94 <load_sprite>
	DIP2Light = pointer14;
20001ad4:	4b29      	ldr	r3, [pc, #164]	; (20001b7c <initSprites+0x100>)
20001ad6:	69ba      	ldr	r2, [r7, #24]
20001ad8:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempDIP2Gray;
20001ada:	4b29      	ldr	r3, [pc, #164]	; (20001b80 <initSprites+0x104>)
20001adc:	617b      	str	r3, [r7, #20]
	load_sprite(pointer15, witch2_gray_bits, witch2_black_width, witch2_black_height);
20001ade:	4929      	ldr	r1, [pc, #164]	; (20001b84 <initSprites+0x108>)
20001ae0:	6978      	ldr	r0, [r7, #20]
20001ae2:	2312      	movs	r3, #18
20001ae4:	2212      	movs	r2, #18
20001ae6:	f001 f855 	bl	20002b94 <load_sprite>
	DIP2Gray = pointer15;
20001aea:	4b27      	ldr	r3, [pc, #156]	; (20001b88 <initSprites+0x10c>)
20001aec:	697a      	ldr	r2, [r7, #20]
20001aee:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempDIP2Black;
20001af0:	4b26      	ldr	r3, [pc, #152]	; (20001b8c <initSprites+0x110>)
20001af2:	613b      	str	r3, [r7, #16]
	load_sprite(pointer16, witch2_black_bits, witch2_black_width, witch2_black_height);
20001af4:	4926      	ldr	r1, [pc, #152]	; (20001b90 <initSprites+0x114>)
20001af6:	6938      	ldr	r0, [r7, #16]
20001af8:	2312      	movs	r3, #18
20001afa:	2212      	movs	r2, #18
20001afc:	f001 f84a 	bl	20002b94 <load_sprite>
	DIP2Black = pointer16;
20001b00:	4b24      	ldr	r3, [pc, #144]	; (20001b94 <initSprites+0x118>)
20001b02:	693a      	ldr	r2, [r7, #16]
20001b04:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempDIP3Light;
20001b06:	4b24      	ldr	r3, [pc, #144]	; (20001b98 <initSprites+0x11c>)
20001b08:	60fb      	str	r3, [r7, #12]
	load_sprite(finalPointer, witch3_light_bits, witch3_black_width, witch3_black_height);
20001b0a:	4924      	ldr	r1, [pc, #144]	; (20001b9c <initSprites+0x120>)
20001b0c:	68f8      	ldr	r0, [r7, #12]
20001b0e:	2312      	movs	r3, #18
20001b10:	2212      	movs	r2, #18
20001b12:	f001 f83f 	bl	20002b94 <load_sprite>
	DIP3Light = finalPointer;
20001b16:	4b22      	ldr	r3, [pc, #136]	; (20001ba0 <initSprites+0x124>)
20001b18:	68fa      	ldr	r2, [r7, #12]
20001b1a:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempDIP3Gray;
20001b1c:	4b21      	ldr	r3, [pc, #132]	; (20001ba4 <initSprites+0x128>)
20001b1e:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer17, witch3_gray_bits, witch3_black_width, witch3_black_height);
20001b20:	4921      	ldr	r1, [pc, #132]	; (20001ba8 <initSprites+0x12c>)
20001b22:	68b8      	ldr	r0, [r7, #8]
20001b24:	2312      	movs	r3, #18
20001b26:	2212      	movs	r2, #18
20001b28:	f001 f834 	bl	20002b94 <load_sprite>
	DIP3Gray = pointer17;
20001b2c:	4b1f      	ldr	r3, [pc, #124]	; (20001bac <initSprites+0x130>)
20001b2e:	68ba      	ldr	r2, [r7, #8]
20001b30:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempDIP3Black;
20001b32:	4b1f      	ldr	r3, [pc, #124]	; (20001bb0 <initSprites+0x134>)
20001b34:	607b      	str	r3, [r7, #4]
	load_sprite(pointer18, witch3_black_bits, witch3_black_width, witch3_black_height);
20001b36:	491f      	ldr	r1, [pc, #124]	; (20001bb4 <initSprites+0x138>)
20001b38:	6878      	ldr	r0, [r7, #4]
20001b3a:	2312      	movs	r3, #18
20001b3c:	2212      	movs	r2, #18
20001b3e:	f001 f829 	bl	20002b94 <load_sprite>
	DIP3Black = pointer18;	
20001b42:	4b1d      	ldr	r3, [pc, #116]	; (20001bb8 <initSprites+0x13c>)
20001b44:	687a      	ldr	r2, [r7, #4]
20001b46:	601a      	str	r2, [r3, #0]
	
}
20001b48:	46c0      	nop			; (mov r8, r8)
20001b4a:	46bd      	mov	sp, r7
20001b4c:	b00a      	add	sp, #40	; 0x28
20001b4e:	bd80      	pop	{r7, pc}
20001b50:	20003c5c 	andcs	r3, r0, ip, asr ip
20001b54:	20007a14 	andcs	r7, r0, r4, lsl sl
20001b58:	20003cc8 	andcs	r3, r0, r8, asr #25
20001b5c:	20003d1c 	andcs	r3, r0, ip, lsl sp
20001b60:	200079dc 	ldrdcs	r7, [r0], -ip
20001b64:	20003cf0 	strdcs	r3, [r0], -r0
20001b68:	20003ce4 	andcs	r3, r0, r4, ror #25
20001b6c:	200079a4 	andcs	r7, r0, r4, lsr #19
20001b70:	20003c58 	andcs	r3, r0, r8, asr ip
20001b74:	20003d10 	andcs	r3, r0, r0, lsl sp
20001b78:	20007abc 			; <UNDEFINED> instruction: 0x20007abc
20001b7c:	20003ccc 	andcs	r3, r0, ip, asr #25
20001b80:	20003c48 	andcs	r3, r0, r8, asr #24
20001b84:	20007a84 	andcs	r7, r0, r4, lsl #21
20001b88:	20003c44 	andcs	r3, r0, r4, asr #24
20001b8c:	20003ca4 	andcs	r3, r0, r4, lsr #25
20001b90:	20007a4c 	andcs	r7, r0, ip, asr #20
20001b94:	20003cd4 	ldrdcs	r3, [r0], -r4
20001b98:	20003c68 	andcs	r3, r0, r8, ror #24
20001b9c:	20007b64 	andcs	r7, r0, r4, ror #22
20001ba0:	20003cd0 	ldrdcs	r3, [r0], -r0
20001ba4:	20003cd8 	ldrdcs	r3, [r0], -r8
20001ba8:	20007b2c 	andcs	r7, r0, ip, lsr #22
20001bac:	20003d00 	andcs	r3, r0, r0, lsl #26
20001bb0:	20003cf4 	strdcs	r3, [r0], -r4
20001bb4:	20007af4 	strdcs	r7, [r0], -r4
20001bb8:	20003c54 	andcs	r3, r0, r4, asr ip

20001bbc <init_DIP>:
	
void init_DIP( GameObject *DIPObj ) {
20001bbc:	b590      	push	{r4, r7, lr}
20001bbe:	b083      	sub	sp, #12
20001bc0:	af00      	add	r7, sp, #0
20001bc2:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20001bc4:	4b29      	ldr	r3, [pc, #164]	; (20001c6c <init_DIP+0xb0>)
20001bc6:	681b      	ldr	r3, [r3, #0]
20001bc8:	2b00      	cmp	r3, #0
20001bca:	d03b      	beq.n	20001c44 <init_DIP+0x88>
		initSprites();
20001bcc:	f7ff ff56 	bl	20001a7c <initSprites>
		firstTime = 0;			
20001bd0:	4b26      	ldr	r3, [pc, #152]	; (20001c6c <init_DIP+0xb0>)
20001bd2:	2200      	movs	r2, #0
20001bd4:	601a      	str	r2, [r3, #0]

		DIPImages[0] = DIP1Image;
20001bd6:	4b26      	ldr	r3, [pc, #152]	; (20001c70 <init_DIP+0xb4>)
20001bd8:	4a26      	ldr	r2, [pc, #152]	; (20001c74 <init_DIP+0xb8>)
20001bda:	ca13      	ldmia	r2!, {r0, r1, r4}
20001bdc:	c313      	stmia	r3!, {r0, r1, r4}
		DIPImages[1] = DIP2Image;
20001bde:	4b24      	ldr	r3, [pc, #144]	; (20001c70 <init_DIP+0xb4>)
20001be0:	4a25      	ldr	r2, [pc, #148]	; (20001c78 <init_DIP+0xbc>)
20001be2:	330c      	adds	r3, #12
20001be4:	ca13      	ldmia	r2!, {r0, r1, r4}
20001be6:	c313      	stmia	r3!, {r0, r1, r4}
		DIPImages[2] = DIP3Image;
20001be8:	4b21      	ldr	r3, [pc, #132]	; (20001c70 <init_DIP+0xb4>)
20001bea:	4a24      	ldr	r2, [pc, #144]	; (20001c7c <init_DIP+0xc0>)
20001bec:	3318      	adds	r3, #24
20001bee:	ca13      	ldmia	r2!, {r0, r1, r4}
20001bf0:	c313      	stmia	r3!, {r0, r1, r4}
		DIPImages[3] = DIP4Image;
20001bf2:	4b1f      	ldr	r3, [pc, #124]	; (20001c70 <init_DIP+0xb4>)
20001bf4:	4a22      	ldr	r2, [pc, #136]	; (20001c80 <init_DIP+0xc4>)
20001bf6:	3324      	adds	r3, #36	; 0x24
20001bf8:	ca13      	ldmia	r2!, {r0, r1, r4}
20001bfa:	c313      	stmia	r3!, {r0, r1, r4}
		
		
		load_image(&DIPImages[0], DIP1Black, DIP1Light, DIP1Gray);
20001bfc:	4b21      	ldr	r3, [pc, #132]	; (20001c84 <init_DIP+0xc8>)
20001bfe:	6819      	ldr	r1, [r3, #0]
20001c00:	4b21      	ldr	r3, [pc, #132]	; (20001c88 <init_DIP+0xcc>)
20001c02:	681a      	ldr	r2, [r3, #0]
20001c04:	4b21      	ldr	r3, [pc, #132]	; (20001c8c <init_DIP+0xd0>)
20001c06:	681b      	ldr	r3, [r3, #0]
20001c08:	4819      	ldr	r0, [pc, #100]	; (20001c70 <init_DIP+0xb4>)
20001c0a:	f000 ffaf 	bl	20002b6c <load_image>
		load_image(&DIPImages[1], DIP2Black, DIP2Light, DIP2Gray);
20001c0e:	4b20      	ldr	r3, [pc, #128]	; (20001c90 <init_DIP+0xd4>)
20001c10:	6819      	ldr	r1, [r3, #0]
20001c12:	4b20      	ldr	r3, [pc, #128]	; (20001c94 <init_DIP+0xd8>)
20001c14:	681a      	ldr	r2, [r3, #0]
20001c16:	4b20      	ldr	r3, [pc, #128]	; (20001c98 <init_DIP+0xdc>)
20001c18:	681b      	ldr	r3, [r3, #0]
20001c1a:	4820      	ldr	r0, [pc, #128]	; (20001c9c <init_DIP+0xe0>)
20001c1c:	f000 ffa6 	bl	20002b6c <load_image>
		load_image(&DIPImages[2], DIP3Black, DIP3Light, DIP3Gray);
20001c20:	4b1f      	ldr	r3, [pc, #124]	; (20001ca0 <init_DIP+0xe4>)
20001c22:	6819      	ldr	r1, [r3, #0]
20001c24:	4b1f      	ldr	r3, [pc, #124]	; (20001ca4 <init_DIP+0xe8>)
20001c26:	681a      	ldr	r2, [r3, #0]
20001c28:	4b1f      	ldr	r3, [pc, #124]	; (20001ca8 <init_DIP+0xec>)
20001c2a:	681b      	ldr	r3, [r3, #0]
20001c2c:	481f      	ldr	r0, [pc, #124]	; (20001cac <init_DIP+0xf0>)
20001c2e:	f000 ff9d 	bl	20002b6c <load_image>
		load_image(&DIPImages[3], DIP2Black, DIP2Light, DIP2Gray);
20001c32:	4b17      	ldr	r3, [pc, #92]	; (20001c90 <init_DIP+0xd4>)
20001c34:	6819      	ldr	r1, [r3, #0]
20001c36:	4b17      	ldr	r3, [pc, #92]	; (20001c94 <init_DIP+0xd8>)
20001c38:	681a      	ldr	r2, [r3, #0]
20001c3a:	4b17      	ldr	r3, [pc, #92]	; (20001c98 <init_DIP+0xdc>)
20001c3c:	681b      	ldr	r3, [r3, #0]
20001c3e:	481c      	ldr	r0, [pc, #112]	; (20001cb0 <init_DIP+0xf4>)
20001c40:	f000 ff94 	bl	20002b6c <load_image>
		
	}
	
	DIPObj->images = DIPImages;
20001c44:	687b      	ldr	r3, [r7, #4]
20001c46:	4a0a      	ldr	r2, [pc, #40]	; (20001c70 <init_DIP+0xb4>)
20001c48:	601a      	str	r2, [r3, #0]

	DIPObj->current_frame = 0;
20001c4a:	687b      	ldr	r3, [r7, #4]
20001c4c:	2200      	movs	r2, #0
20001c4e:	615a      	str	r2, [r3, #20]
	DIPObj->n_frames = 4;
20001c50:	687b      	ldr	r3, [r7, #4]
20001c52:	2204      	movs	r2, #4
20001c54:	619a      	str	r2, [r3, #24]
	DIPObj->animation_speed = 1;
20001c56:	687b      	ldr	r3, [r7, #4]
20001c58:	2201      	movs	r2, #1
20001c5a:	61da      	str	r2, [r3, #28]
	DIPObj->animation_counter = 0;
20001c5c:	687b      	ldr	r3, [r7, #4]
20001c5e:	2200      	movs	r2, #0
20001c60:	621a      	str	r2, [r3, #32]
}
20001c62:	46c0      	nop			; (mov r8, r8)
20001c64:	46bd      	mov	sp, r7
20001c66:	b003      	add	sp, #12
20001c68:	bd90      	pop	{r4, r7, pc}
20001c6a:	46c0      	nop			; (mov r8, r8)
20001c6c:	20007b9c 	mulcs	r0, ip, fp
20001c70:	20003c74 	andcs	r3, r0, r4, ror ip
20001c74:	20003cbc 			; <UNDEFINED> instruction: 0x20003cbc
20001c78:	20003c38 	andcs	r3, r0, r8, lsr ip
20001c7c:	20003cb0 			; <UNDEFINED> instruction: 0x20003cb0
20001c80:	20003d04 	andcs	r3, r0, r4, lsl #26
20001c84:	20003c58 	andcs	r3, r0, r8, asr ip
20001c88:	20003cc8 	andcs	r3, r0, r8, asr #25
20001c8c:	20003cf0 	strdcs	r3, [r0], -r0
20001c90:	20003cd4 	ldrdcs	r3, [r0], -r4
20001c94:	20003ccc 	andcs	r3, r0, ip, asr #25
20001c98:	20003c44 	andcs	r3, r0, r4, asr #24
20001c9c:	20003c80 	andcs	r3, r0, r0, lsl #25
20001ca0:	20003c54 	andcs	r3, r0, r4, asr ip
20001ca4:	20003cd0 	ldrdcs	r3, [r0], -r0
20001ca8:	20003d00 	andcs	r3, r0, r0, lsl #26
20001cac:	20003c8c 	andcs	r3, r0, ip, lsl #25
20001cb0:	20003c98 	mulcs	r0, r8, ip

20001cb4 <DIPUpdate>:

void DIPUpdate(GameObject *this) {
20001cb4:	b580      	push	{r7, lr}
20001cb6:	b082      	sub	sp, #8
20001cb8:	af00      	add	r7, sp, #0
20001cba:	6078      	str	r0, [r7, #4]
	gameObjectUpdate(this);
20001cbc:	687b      	ldr	r3, [r7, #4]
20001cbe:	0018      	movs	r0, r3
20001cc0:	f7ff f9ac 	bl	2000101c <gameObjectUpdate>
	static int counter = 0;
	static int direction = -1;
	counter++;
20001cc4:	4b15      	ldr	r3, [pc, #84]	; (20001d1c <DIPUpdate+0x68>)
20001cc6:	681b      	ldr	r3, [r3, #0]
20001cc8:	1c5a      	adds	r2, r3, #1
20001cca:	4b14      	ldr	r3, [pc, #80]	; (20001d1c <DIPUpdate+0x68>)
20001ccc:	601a      	str	r2, [r3, #0]
	this->xPos += (counter % 2)*direction;
20001cce:	687b      	ldr	r3, [r7, #4]
20001cd0:	685a      	ldr	r2, [r3, #4]
20001cd2:	4b12      	ldr	r3, [pc, #72]	; (20001d1c <DIPUpdate+0x68>)
20001cd4:	681b      	ldr	r3, [r3, #0]
20001cd6:	4912      	ldr	r1, [pc, #72]	; (20001d20 <DIPUpdate+0x6c>)
20001cd8:	400b      	ands	r3, r1
20001cda:	d504      	bpl.n	20001ce6 <DIPUpdate+0x32>
20001cdc:	3b01      	subs	r3, #1
20001cde:	2102      	movs	r1, #2
20001ce0:	4249      	negs	r1, r1
20001ce2:	430b      	orrs	r3, r1
20001ce4:	3301      	adds	r3, #1
20001ce6:	0019      	movs	r1, r3
20001ce8:	4b0e      	ldr	r3, [pc, #56]	; (20001d24 <DIPUpdate+0x70>)
20001cea:	681b      	ldr	r3, [r3, #0]
20001cec:	434b      	muls	r3, r1
20001cee:	18d2      	adds	r2, r2, r3
20001cf0:	687b      	ldr	r3, [r7, #4]
20001cf2:	605a      	str	r2, [r3, #4]
	
	if(this->xPos > 115) {
20001cf4:	687b      	ldr	r3, [r7, #4]
20001cf6:	685b      	ldr	r3, [r3, #4]
20001cf8:	2b73      	cmp	r3, #115	; 0x73
20001cfa:	dd04      	ble.n	20001d06 <DIPUpdate+0x52>
		direction = -1;
20001cfc:	4b09      	ldr	r3, [pc, #36]	; (20001d24 <DIPUpdate+0x70>)
20001cfe:	2201      	movs	r2, #1
20001d00:	4252      	negs	r2, r2
20001d02:	601a      	str	r2, [r3, #0]
	} else if(this->xPos < 30) {
		direction = 1;
	}
}
20001d04:	e006      	b.n	20001d14 <DIPUpdate+0x60>
	} else if(this->xPos < 30) {
20001d06:	687b      	ldr	r3, [r7, #4]
20001d08:	685b      	ldr	r3, [r3, #4]
20001d0a:	2b1d      	cmp	r3, #29
20001d0c:	dc02      	bgt.n	20001d14 <DIPUpdate+0x60>
		direction = 1;
20001d0e:	4b05      	ldr	r3, [pc, #20]	; (20001d24 <DIPUpdate+0x70>)
20001d10:	2201      	movs	r2, #1
20001d12:	601a      	str	r2, [r3, #0]
}
20001d14:	46c0      	nop			; (mov r8, r8)
20001d16:	46bd      	mov	sp, r7
20001d18:	b002      	add	sp, #8
20001d1a:	bd80      	pop	{r7, pc}
20001d1c:	200035a8 	andcs	r3, r0, r8, lsr #11
20001d20:	80000001 	andhi	r0, r0, r1
20001d24:	20007ba0 	andcs	r7, r0, r0, lsr #23

20001d28 <delay_250ns>:
#include "graphics.h"


void delay_250ns(void){
20001d28:	b580      	push	{r7, lr}
20001d2a:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
20001d2c:	4b0c      	ldr	r3, [pc, #48]	; (20001d60 <delay_250ns+0x38>)
20001d2e:	2200      	movs	r2, #0
20001d30:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/4) -1);
20001d32:	4b0c      	ldr	r3, [pc, #48]	; (20001d64 <delay_250ns+0x3c>)
20001d34:	2229      	movs	r2, #41	; 0x29
20001d36:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20001d38:	4b0b      	ldr	r3, [pc, #44]	; (20001d68 <delay_250ns+0x40>)
20001d3a:	2200      	movs	r2, #0
20001d3c:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20001d3e:	4b08      	ldr	r3, [pc, #32]	; (20001d60 <delay_250ns+0x38>)
20001d40:	2205      	movs	r2, #5
20001d42:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
20001d44:	46c0      	nop			; (mov r8, r8)
20001d46:	4b06      	ldr	r3, [pc, #24]	; (20001d60 <delay_250ns+0x38>)
20001d48:	681a      	ldr	r2, [r3, #0]
20001d4a:	2380      	movs	r3, #128	; 0x80
20001d4c:	025b      	lsls	r3, r3, #9
20001d4e:	4013      	ands	r3, r2
20001d50:	d0f9      	beq.n	20001d46 <delay_250ns+0x1e>
	*STK_CTRL = 0;
20001d52:	4b03      	ldr	r3, [pc, #12]	; (20001d60 <delay_250ns+0x38>)
20001d54:	2200      	movs	r2, #0
20001d56:	601a      	str	r2, [r3, #0]
}
20001d58:	46c0      	nop			; (mov r8, r8)
20001d5a:	46bd      	mov	sp, r7
20001d5c:	bd80      	pop	{r7, pc}
20001d5e:	46c0      	nop			; (mov r8, r8)
20001d60:	e000e010 	and	lr, r0, r0, lsl r0
20001d64:	e000e014 	and	lr, r0, r4, lsl r0
20001d68:	e000e018 	and	lr, r0, r8, lsl r0

20001d6c <delay_500ns>:

void delay_500ns(void){
20001d6c:	b580      	push	{r7, lr}
20001d6e:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
20001d70:	4b0c      	ldr	r3, [pc, #48]	; (20001da4 <delay_500ns+0x38>)
20001d72:	2200      	movs	r2, #0
20001d74:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/2) -1);
20001d76:	4b0c      	ldr	r3, [pc, #48]	; (20001da8 <delay_500ns+0x3c>)
20001d78:	2253      	movs	r2, #83	; 0x53
20001d7a:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20001d7c:	4b0b      	ldr	r3, [pc, #44]	; (20001dac <delay_500ns+0x40>)
20001d7e:	2200      	movs	r2, #0
20001d80:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20001d82:	4b08      	ldr	r3, [pc, #32]	; (20001da4 <delay_500ns+0x38>)
20001d84:	2205      	movs	r2, #5
20001d86:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
20001d88:	46c0      	nop			; (mov r8, r8)
20001d8a:	4b06      	ldr	r3, [pc, #24]	; (20001da4 <delay_500ns+0x38>)
20001d8c:	681a      	ldr	r2, [r3, #0]
20001d8e:	2380      	movs	r3, #128	; 0x80
20001d90:	025b      	lsls	r3, r3, #9
20001d92:	4013      	ands	r3, r2
20001d94:	d0f9      	beq.n	20001d8a <delay_500ns+0x1e>
	*STK_CTRL = 0;
20001d96:	4b03      	ldr	r3, [pc, #12]	; (20001da4 <delay_500ns+0x38>)
20001d98:	2200      	movs	r2, #0
20001d9a:	601a      	str	r2, [r3, #0]
}
20001d9c:	46c0      	nop			; (mov r8, r8)
20001d9e:	46bd      	mov	sp, r7
20001da0:	bd80      	pop	{r7, pc}
20001da2:	46c0      	nop			; (mov r8, r8)
20001da4:	e000e010 	and	lr, r0, r0, lsl r0
20001da8:	e000e014 	and	lr, r0, r4, lsl r0
20001dac:	e000e018 	and	lr, r0, r8, lsl r0

20001db0 <delay_micro>:

void delay_micro(unsigned int us){
20001db0:	b580      	push	{r7, lr}
20001db2:	b082      	sub	sp, #8
20001db4:	af00      	add	r7, sp, #0
20001db6:	6078      	str	r0, [r7, #4]
	while(us--) {
20001db8:	e007      	b.n	20001dca <delay_micro+0x1a>
		delay_250ns();
20001dba:	f7ff ffb5 	bl	20001d28 <delay_250ns>
		delay_250ns();
20001dbe:	f7ff ffb3 	bl	20001d28 <delay_250ns>
		delay_250ns();
20001dc2:	f7ff ffb1 	bl	20001d28 <delay_250ns>
		delay_250ns();
20001dc6:	f7ff ffaf 	bl	20001d28 <delay_250ns>
	while(us--) {
20001dca:	687b      	ldr	r3, [r7, #4]
20001dcc:	1e5a      	subs	r2, r3, #1
20001dce:	607a      	str	r2, [r7, #4]
20001dd0:	2b00      	cmp	r3, #0
20001dd2:	d1f2      	bne.n	20001dba <delay_micro+0xa>
	}
}
20001dd4:	46c0      	nop			; (mov r8, r8)
20001dd6:	46bd      	mov	sp, r7
20001dd8:	b002      	add	sp, #8
20001dda:	bd80      	pop	{r7, pc}

20001ddc <delay_milli>:

void delay_milli(unsigned int ms){
20001ddc:	b580      	push	{r7, lr}
20001dde:	b082      	sub	sp, #8
20001de0:	af00      	add	r7, sp, #0
20001de2:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		while(ms--)
			delay_micro(1);
	#else
		while(ms--)
20001de4:	e004      	b.n	20001df0 <delay_milli+0x14>
			delay_micro(1000);
20001de6:	23fa      	movs	r3, #250	; 0xfa
20001de8:	009b      	lsls	r3, r3, #2
20001dea:	0018      	movs	r0, r3
20001dec:	f7ff ffe0 	bl	20001db0 <delay_micro>
		while(ms--)
20001df0:	687b      	ldr	r3, [r7, #4]
20001df2:	1e5a      	subs	r2, r3, #1
20001df4:	607a      	str	r2, [r7, #4]
20001df6:	2b00      	cmp	r3, #0
20001df8:	d1f5      	bne.n	20001de6 <delay_milli+0xa>
	#endif
}
20001dfa:	46c0      	nop			; (mov r8, r8)
20001dfc:	46bd      	mov	sp, r7
20001dfe:	b002      	add	sp, #8
20001e00:	bd80      	pop	{r7, pc}

20001e02 <clear_thisBackBuffer>:
uint8_t draw_buffer_black_light[1024]; // 128 * 64 / 8
uint8_t draw_buffer_black_gray_light[1024]; // 128 * 64 / 8
uint8_t backBuffer[1024]; // 128 * 64 / 8
uint8_t backBufferGray[1024]; // 128 * 64 / 8
uint8_t backBufferLight[1024]; // 128 * 64 / 8
void clear_thisBackBuffer(uint8_t *buffer) {
20001e02:	b580      	push	{r7, lr}
20001e04:	b084      	sub	sp, #16
20001e06:	af00      	add	r7, sp, #0
20001e08:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < 1024; i++)
20001e0a:	2300      	movs	r3, #0
20001e0c:	60fb      	str	r3, [r7, #12]
20001e0e:	e007      	b.n	20001e20 <clear_thisBackBuffer+0x1e>
		buffer[i] = 0;
20001e10:	68fb      	ldr	r3, [r7, #12]
20001e12:	687a      	ldr	r2, [r7, #4]
20001e14:	18d3      	adds	r3, r2, r3
20001e16:	2200      	movs	r2, #0
20001e18:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 1024; i++)
20001e1a:	68fb      	ldr	r3, [r7, #12]
20001e1c:	3301      	adds	r3, #1
20001e1e:	60fb      	str	r3, [r7, #12]
20001e20:	68fb      	ldr	r3, [r7, #12]
20001e22:	4a03      	ldr	r2, [pc, #12]	; (20001e30 <clear_thisBackBuffer+0x2e>)
20001e24:	4293      	cmp	r3, r2
20001e26:	ddf3      	ble.n	20001e10 <clear_thisBackBuffer+0xe>
}
20001e28:	46c0      	nop			; (mov r8, r8)
20001e2a:	46bd      	mov	sp, r7
20001e2c:	b004      	add	sp, #16
20001e2e:	bd80      	pop	{r7, pc}
20001e30:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20001e34 <clear_backBuffer>:
void clear_backBuffer() {
20001e34:	b580      	push	{r7, lr}
20001e36:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
20001e38:	4b03      	ldr	r3, [pc, #12]	; (20001e48 <clear_backBuffer+0x14>)
20001e3a:	0018      	movs	r0, r3
20001e3c:	f7ff ffe1 	bl	20001e02 <clear_thisBackBuffer>
}
20001e40:	46c0      	nop			; (mov r8, r8)
20001e42:	46bd      	mov	sp, r7
20001e44:	bd80      	pop	{r7, pc}
20001e46:	46c0      	nop			; (mov r8, r8)
20001e48:	20004528 	andcs	r4, r0, r8, lsr #10

20001e4c <clear_all_backBuffers>:
void clear_all_backBuffers() {
20001e4c:	b580      	push	{r7, lr}
20001e4e:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
20001e50:	4b07      	ldr	r3, [pc, #28]	; (20001e70 <clear_all_backBuffers+0x24>)
20001e52:	0018      	movs	r0, r3
20001e54:	f7ff ffd5 	bl	20001e02 <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferGray);
20001e58:	4b06      	ldr	r3, [pc, #24]	; (20001e74 <clear_all_backBuffers+0x28>)
20001e5a:	0018      	movs	r0, r3
20001e5c:	f7ff ffd1 	bl	20001e02 <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferLight);
20001e60:	4b05      	ldr	r3, [pc, #20]	; (20001e78 <clear_all_backBuffers+0x2c>)
20001e62:	0018      	movs	r0, r3
20001e64:	f7ff ffcd 	bl	20001e02 <clear_thisBackBuffer>
}
20001e68:	46c0      	nop			; (mov r8, r8)
20001e6a:	46bd      	mov	sp, r7
20001e6c:	bd80      	pop	{r7, pc}
20001e6e:	46c0      	nop			; (mov r8, r8)
20001e70:	20004528 	andcs	r4, r0, r8, lsr #10
20001e74:	20003d28 	andcs	r3, r0, r8, lsr #26
20001e78:	20005528 	andcs	r5, r0, r8, lsr #10

20001e7c <graphic_ctrl_bit_set>:

/* välj grafik-display och ettställ de bitar som är 1 i x */
static void graphic_ctrl_bit_set( uint8_t x) {
20001e7c:	b580      	push	{r7, lr}
20001e7e:	b084      	sub	sp, #16
20001e80:	af00      	add	r7, sp, #0
20001e82:	0002      	movs	r2, r0
20001e84:	1dfb      	adds	r3, r7, #7
20001e86:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
20001e88:	4a0f      	ldr	r2, [pc, #60]	; (20001ec8 <graphic_ctrl_bit_set+0x4c>)
20001e8a:	230f      	movs	r3, #15
20001e8c:	18fb      	adds	r3, r7, r3
20001e8e:	7812      	ldrb	r2, [r2, #0]
20001e90:	701a      	strb	r2, [r3, #0]
	c |= x;
20001e92:	230f      	movs	r3, #15
20001e94:	18fb      	adds	r3, r7, r3
20001e96:	220f      	movs	r2, #15
20001e98:	18b9      	adds	r1, r7, r2
20001e9a:	1dfa      	adds	r2, r7, #7
20001e9c:	7809      	ldrb	r1, [r1, #0]
20001e9e:	7812      	ldrb	r2, [r2, #0]
20001ea0:	430a      	orrs	r2, r1
20001ea2:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
20001ea4:	230f      	movs	r3, #15
20001ea6:	18fb      	adds	r3, r7, r3
20001ea8:	220f      	movs	r2, #15
20001eaa:	18ba      	adds	r2, r7, r2
20001eac:	7812      	ldrb	r2, [r2, #0]
20001eae:	2104      	movs	r1, #4
20001eb0:	438a      	bics	r2, r1
20001eb2:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20001eb4:	4a04      	ldr	r2, [pc, #16]	; (20001ec8 <graphic_ctrl_bit_set+0x4c>)
20001eb6:	230f      	movs	r3, #15
20001eb8:	18fb      	adds	r3, r7, r3
20001eba:	781b      	ldrb	r3, [r3, #0]
20001ebc:	7013      	strb	r3, [r2, #0]
}
20001ebe:	46c0      	nop			; (mov r8, r8)
20001ec0:	46bd      	mov	sp, r7
20001ec2:	b004      	add	sp, #16
20001ec4:	bd80      	pop	{r7, pc}
20001ec6:	46c0      	nop			; (mov r8, r8)
20001ec8:	40021014 	andmi	r1, r2, r4, lsl r0

20001ecc <graphic_ctrl_bit_clear>:
/* välj grafik-display och nollställ de bitar som är 1 i x */
static void graphic_ctrl_bit_clear( uint8_t x) {
20001ecc:	b580      	push	{r7, lr}
20001ece:	b084      	sub	sp, #16
20001ed0:	af00      	add	r7, sp, #0
20001ed2:	0002      	movs	r2, r0
20001ed4:	1dfb      	adds	r3, r7, #7
20001ed6:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
20001ed8:	4a11      	ldr	r2, [pc, #68]	; (20001f20 <graphic_ctrl_bit_clear+0x54>)
20001eda:	230f      	movs	r3, #15
20001edc:	18fb      	adds	r3, r7, r3
20001ede:	7812      	ldrb	r2, [r2, #0]
20001ee0:	701a      	strb	r2, [r3, #0]
	c &= ~x;
20001ee2:	1dfb      	adds	r3, r7, #7
20001ee4:	781b      	ldrb	r3, [r3, #0]
20001ee6:	b25b      	sxtb	r3, r3
20001ee8:	43db      	mvns	r3, r3
20001eea:	b25b      	sxtb	r3, r3
20001eec:	220f      	movs	r2, #15
20001eee:	18ba      	adds	r2, r7, r2
20001ef0:	7812      	ldrb	r2, [r2, #0]
20001ef2:	b252      	sxtb	r2, r2
20001ef4:	4013      	ands	r3, r2
20001ef6:	b25a      	sxtb	r2, r3
20001ef8:	230f      	movs	r3, #15
20001efa:	18fb      	adds	r3, r7, r3
20001efc:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
20001efe:	230f      	movs	r3, #15
20001f00:	18fb      	adds	r3, r7, r3
20001f02:	220f      	movs	r2, #15
20001f04:	18ba      	adds	r2, r7, r2
20001f06:	7812      	ldrb	r2, [r2, #0]
20001f08:	2104      	movs	r1, #4
20001f0a:	438a      	bics	r2, r1
20001f0c:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20001f0e:	4a04      	ldr	r2, [pc, #16]	; (20001f20 <graphic_ctrl_bit_clear+0x54>)
20001f10:	230f      	movs	r3, #15
20001f12:	18fb      	adds	r3, r7, r3
20001f14:	781b      	ldrb	r3, [r3, #0]
20001f16:	7013      	strb	r3, [r2, #0]
}
20001f18:	46c0      	nop			; (mov r8, r8)
20001f1a:	46bd      	mov	sp, r7
20001f1c:	b004      	add	sp, #16
20001f1e:	bd80      	pop	{r7, pc}
20001f20:	40021014 	andmi	r1, r2, r4, lsl r0

20001f24 <select_controller>:
void select_controller( uint8_t controller) {
20001f24:	b580      	push	{r7, lr}
20001f26:	b082      	sub	sp, #8
20001f28:	af00      	add	r7, sp, #0
20001f2a:	0002      	movs	r2, r0
20001f2c:	1dfb      	adds	r3, r7, #7
20001f2e:	701a      	strb	r2, [r3, #0]
	switch (controller) {
20001f30:	1dfb      	adds	r3, r7, #7
20001f32:	781b      	ldrb	r3, [r3, #0]
20001f34:	2b08      	cmp	r3, #8
20001f36:	d00f      	beq.n	20001f58 <select_controller+0x34>
20001f38:	dc02      	bgt.n	20001f40 <select_controller+0x1c>
20001f3a:	2b00      	cmp	r3, #0
20001f3c:	d005      	beq.n	20001f4a <select_controller+0x26>
		case (B_CS1|B_CS2): 
			graphic_ctrl_bit_set(B_CS1); 
			graphic_ctrl_bit_set(B_CS2); 
			break;
	}
}
20001f3e:	e020      	b.n	20001f82 <select_controller+0x5e>
	switch (controller) {
20001f40:	2b10      	cmp	r3, #16
20001f42:	d010      	beq.n	20001f66 <select_controller+0x42>
20001f44:	2b18      	cmp	r3, #24
20001f46:	d015      	beq.n	20001f74 <select_controller+0x50>
}
20001f48:	e01b      	b.n	20001f82 <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
20001f4a:	2008      	movs	r0, #8
20001f4c:	f7ff ffbe 	bl	20001ecc <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_clear(B_CS2); 
20001f50:	2010      	movs	r0, #16
20001f52:	f7ff ffbb 	bl	20001ecc <graphic_ctrl_bit_clear>
			break;
20001f56:	e014      	b.n	20001f82 <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
20001f58:	2008      	movs	r0, #8
20001f5a:	f7ff ff8f 	bl	20001e7c <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS2); 
20001f5e:	2010      	movs	r0, #16
20001f60:	f7ff ffb4 	bl	20001ecc <graphic_ctrl_bit_clear>
			break;
20001f64:	e00d      	b.n	20001f82 <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
20001f66:	2008      	movs	r0, #8
20001f68:	f7ff ffb0 	bl	20001ecc <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_set(B_CS2); 
20001f6c:	2010      	movs	r0, #16
20001f6e:	f7ff ff85 	bl	20001e7c <graphic_ctrl_bit_set>
			break;
20001f72:	e006      	b.n	20001f82 <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
20001f74:	2008      	movs	r0, #8
20001f76:	f7ff ff81 	bl	20001e7c <graphic_ctrl_bit_set>
			graphic_ctrl_bit_set(B_CS2); 
20001f7a:	2010      	movs	r0, #16
20001f7c:	f7ff ff7e 	bl	20001e7c <graphic_ctrl_bit_set>
			break;
20001f80:	46c0      	nop			; (mov r8, r8)
}
20001f82:	46c0      	nop			; (mov r8, r8)
20001f84:	46bd      	mov	sp, r7
20001f86:	b002      	add	sp, #8
20001f88:	bd80      	pop	{r7, pc}

20001f8a <graphic_wait_ready>:

void graphic_wait_ready( void ) {
20001f8a:	b580      	push	{r7, lr}
20001f8c:	b082      	sub	sp, #8
20001f8e:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
20001f90:	2040      	movs	r0, #64	; 0x40
20001f92:	f7ff ff9b 	bl	20001ecc <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
20001f96:	4b14      	ldr	r3, [pc, #80]	; (20001fe8 <graphic_wait_ready+0x5e>)
20001f98:	4a14      	ldr	r2, [pc, #80]	; (20001fec <graphic_wait_ready+0x62>)
20001f9a:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
20001f9c:	2001      	movs	r0, #1
20001f9e:	f7ff ff95 	bl	20001ecc <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
20001fa2:	2002      	movs	r0, #2
20001fa4:	f7ff ff6a 	bl	20001e7c <graphic_ctrl_bit_set>
	delay_500ns();
20001fa8:	f7ff fee0 	bl	20001d6c <delay_500ns>
	
	while(1) {
		graphic_ctrl_bit_set(B_E);
20001fac:	2040      	movs	r0, #64	; 0x40
20001fae:	f7ff ff65 	bl	20001e7c <graphic_ctrl_bit_set>
		delay_500ns();
20001fb2:	f7ff fedb 	bl	20001d6c <delay_500ns>
		c = *portIdrHigh & LCD_BUSY; //...
20001fb6:	4b0e      	ldr	r3, [pc, #56]	; (20001ff0 <graphic_wait_ready+0x66>)
20001fb8:	781b      	ldrb	r3, [r3, #0]
20001fba:	b2da      	uxtb	r2, r3
20001fbc:	1dfb      	adds	r3, r7, #7
20001fbe:	217f      	movs	r1, #127	; 0x7f
20001fc0:	438a      	bics	r2, r1
20001fc2:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
20001fc4:	2040      	movs	r0, #64	; 0x40
20001fc6:	f7ff ff81 	bl	20001ecc <graphic_ctrl_bit_clear>
		delay_500ns();
20001fca:	f7ff fecf 	bl	20001d6c <delay_500ns>
		/*if (*portIdrHigh & 0x80 == 0x80) {
			break; }*/
		if (c == 0) break;
20001fce:	1dfb      	adds	r3, r7, #7
20001fd0:	781b      	ldrb	r3, [r3, #0]
20001fd2:	2b00      	cmp	r3, #0
20001fd4:	d000      	beq.n	20001fd8 <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
20001fd6:	e7e9      	b.n	20001fac <graphic_wait_ready+0x22>
		if (c == 0) break;
20001fd8:	46c0      	nop			; (mov r8, r8)
	}
	//graphic_ctrl_bit_set(B_E); //<--
	*portModer = 0x55555555;	
20001fda:	4b03      	ldr	r3, [pc, #12]	; (20001fe8 <graphic_wait_ready+0x5e>)
20001fdc:	4a05      	ldr	r2, [pc, #20]	; (20001ff4 <graphic_wait_ready+0x6a>)
20001fde:	601a      	str	r2, [r3, #0]
}
20001fe0:	46c0      	nop			; (mov r8, r8)
20001fe2:	46bd      	mov	sp, r7
20001fe4:	b002      	add	sp, #8
20001fe6:	bd80      	pop	{r7, pc}
20001fe8:	40021000 	andmi	r1, r2, r0
20001fec:	00005555 	andeq	r5, r0, r5, asr r5
20001ff0:	40021011 	andmi	r1, r2, r1, lsl r0
20001ff4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20001ff8 <graphic_read>:

static uint8_t graphic_read(uint8_t controller) {
20001ff8:	b580      	push	{r7, lr}
20001ffa:	b084      	sub	sp, #16
20001ffc:	af00      	add	r7, sp, #0
20001ffe:	0002      	movs	r2, r0
20002000:	1dfb      	adds	r3, r7, #7
20002002:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20002004:	2040      	movs	r0, #64	; 0x40
20002006:	f7ff ff61 	bl	20001ecc <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
2000200a:	4b1c      	ldr	r3, [pc, #112]	; (2000207c <graphic_read+0x84>)
2000200c:	4a1c      	ldr	r2, [pc, #112]	; (20002080 <graphic_read+0x88>)
2000200e:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS);
20002010:	2001      	movs	r0, #1
20002012:	f7ff ff33 	bl	20001e7c <graphic_ctrl_bit_set>
	graphic_ctrl_bit_set(B_RW);
20002016:	2002      	movs	r0, #2
20002018:	f7ff ff30 	bl	20001e7c <graphic_ctrl_bit_set>
	select_controller(controller);
2000201c:	1dfb      	adds	r3, r7, #7
2000201e:	781b      	ldrb	r3, [r3, #0]
20002020:	0018      	movs	r0, r3
20002022:	f7ff ff7f 	bl	20001f24 <select_controller>
	delay_500ns();
20002026:	f7ff fea1 	bl	20001d6c <delay_500ns>
	graphic_ctrl_bit_set(B_E);
2000202a:	2040      	movs	r0, #64	; 0x40
2000202c:	f7ff ff26 	bl	20001e7c <graphic_ctrl_bit_set>
	delay_500ns();
20002030:	f7ff fe9c 	bl	20001d6c <delay_500ns>
	unsigned char rv = *portIdrHigh;
20002034:	4a13      	ldr	r2, [pc, #76]	; (20002084 <graphic_read+0x8c>)
20002036:	230f      	movs	r3, #15
20002038:	18fb      	adds	r3, r7, r3
2000203a:	7812      	ldrb	r2, [r2, #0]
2000203c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000203e:	2040      	movs	r0, #64	; 0x40
20002040:	f7ff ff44 	bl	20001ecc <graphic_ctrl_bit_clear>
	*portModer = 0x55555555;
20002044:	4b0d      	ldr	r3, [pc, #52]	; (2000207c <graphic_read+0x84>)
20002046:	4a10      	ldr	r2, [pc, #64]	; (20002088 <graphic_read+0x90>)
20002048:	601a      	str	r2, [r3, #0]
	
	if(controller == B_CS1) {
2000204a:	1dfb      	adds	r3, r7, #7
2000204c:	781b      	ldrb	r3, [r3, #0]
2000204e:	2b08      	cmp	r3, #8
20002050:	d104      	bne.n	2000205c <graphic_read+0x64>
		select_controller(B_CS1);
20002052:	2008      	movs	r0, #8
20002054:	f7ff ff66 	bl	20001f24 <select_controller>
		graphic_wait_ready();
20002058:	f7ff ff97 	bl	20001f8a <graphic_wait_ready>
	}
	if(controller == B_CS2) {
2000205c:	1dfb      	adds	r3, r7, #7
2000205e:	781b      	ldrb	r3, [r3, #0]
20002060:	2b10      	cmp	r3, #16
20002062:	d104      	bne.n	2000206e <graphic_read+0x76>
		select_controller(B_CS2);
20002064:	2010      	movs	r0, #16
20002066:	f7ff ff5d 	bl	20001f24 <select_controller>
		graphic_wait_ready();
2000206a:	f7ff ff8e 	bl	20001f8a <graphic_wait_ready>
	}
	
	return rv;
2000206e:	230f      	movs	r3, #15
20002070:	18fb      	adds	r3, r7, r3
20002072:	781b      	ldrb	r3, [r3, #0]
}
20002074:	0018      	movs	r0, r3
20002076:	46bd      	mov	sp, r7
20002078:	b004      	add	sp, #16
2000207a:	bd80      	pop	{r7, pc}
2000207c:	40021000 	andmi	r1, r2, r0
20002080:	00005555 	andeq	r5, r0, r5, asr r5
20002084:	40021011 	andmi	r1, r2, r1, lsl r0
20002088:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000208c <graphic_read_data>:

graphic_read_data(uint8_t controller) {
2000208c:	b580      	push	{r7, lr}
2000208e:	b082      	sub	sp, #8
20002090:	af00      	add	r7, sp, #0
20002092:	0002      	movs	r2, r0
20002094:	1dfb      	adds	r3, r7, #7
20002096:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
20002098:	1dfb      	adds	r3, r7, #7
2000209a:	781b      	ldrb	r3, [r3, #0]
2000209c:	0018      	movs	r0, r3
2000209e:	f7ff ffab 	bl	20001ff8 <graphic_read>
	graphic_read(controller);
200020a2:	1dfb      	adds	r3, r7, #7
200020a4:	781b      	ldrb	r3, [r3, #0]
200020a6:	0018      	movs	r0, r3
200020a8:	f7ff ffa6 	bl	20001ff8 <graphic_read>
}
200020ac:	46c0      	nop			; (mov r8, r8)
200020ae:	0018      	movs	r0, r3
200020b0:	46bd      	mov	sp, r7
200020b2:	b002      	add	sp, #8
200020b4:	bd80      	pop	{r7, pc}

200020b6 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller) {
200020b6:	b580      	push	{r7, lr}
200020b8:	b082      	sub	sp, #8
200020ba:	af00      	add	r7, sp, #0
200020bc:	0002      	movs	r2, r0
200020be:	1dfb      	adds	r3, r7, #7
200020c0:	701a      	strb	r2, [r3, #0]
200020c2:	1dbb      	adds	r3, r7, #6
200020c4:	1c0a      	adds	r2, r1, #0
200020c6:	701a      	strb	r2, [r3, #0]
	*portOdrHigh = value; //I
200020c8:	4a19      	ldr	r2, [pc, #100]	; (20002130 <graphic_write+0x7a>)
200020ca:	1dfb      	adds	r3, r7, #7
200020cc:	781b      	ldrb	r3, [r3, #0]
200020ce:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
200020d0:	1dbb      	adds	r3, r7, #6
200020d2:	781b      	ldrb	r3, [r3, #0]
200020d4:	0018      	movs	r0, r3
200020d6:	f7ff ff25 	bl	20001f24 <select_controller>
	delay_500ns();
200020da:	f7ff fe47 	bl	20001d6c <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200020de:	2040      	movs	r0, #64	; 0x40
200020e0:	f7ff fecc 	bl	20001e7c <graphic_ctrl_bit_set>
	delay_500ns();
200020e4:	f7ff fe42 	bl	20001d6c <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
200020e8:	2040      	movs	r0, #64	; 0x40
200020ea:	f7ff feef 	bl	20001ecc <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1) {
200020ee:	1dbb      	adds	r3, r7, #6
200020f0:	781b      	ldrb	r3, [r3, #0]
200020f2:	2208      	movs	r2, #8
200020f4:	4013      	ands	r3, r2
200020f6:	d004      	beq.n	20002102 <graphic_write+0x4c>
		select_controller(B_CS1);
200020f8:	2008      	movs	r0, #8
200020fa:	f7ff ff13 	bl	20001f24 <select_controller>
		graphic_wait_ready();
200020fe:	f7ff ff44 	bl	20001f8a <graphic_wait_ready>
	}
	if(controller & B_CS2) {
20002102:	1dbb      	adds	r3, r7, #6
20002104:	781b      	ldrb	r3, [r3, #0]
20002106:	2210      	movs	r2, #16
20002108:	4013      	ands	r3, r2
2000210a:	d004      	beq.n	20002116 <graphic_write+0x60>
		select_controller(B_CS2);
2000210c:	2010      	movs	r0, #16
2000210e:	f7ff ff09 	bl	20001f24 <select_controller>
		graphic_wait_ready();
20002112:	f7ff ff3a 	bl	20001f8a <graphic_wait_ready>
	}
	
	*portOdrHigh = 0;	//I
20002116:	4b06      	ldr	r3, [pc, #24]	; (20002130 <graphic_write+0x7a>)
20002118:	2200      	movs	r2, #0
2000211a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
2000211c:	2040      	movs	r0, #64	; 0x40
2000211e:	f7ff fead 	bl	20001e7c <graphic_ctrl_bit_set>
	select_controller(0);
20002122:	2000      	movs	r0, #0
20002124:	f7ff fefe 	bl	20001f24 <select_controller>
}
20002128:	46c0      	nop			; (mov r8, r8)
2000212a:	46bd      	mov	sp, r7
2000212c:	b002      	add	sp, #8
2000212e:	bd80      	pop	{r7, pc}
20002130:	40021015 	andmi	r1, r2, r5, lsl r0

20002134 <graphic_write_command>:
void graphic_write_command(uint8_t command, uint8_t controller) {
20002134:	b580      	push	{r7, lr}
20002136:	b082      	sub	sp, #8
20002138:	af00      	add	r7, sp, #0
2000213a:	0002      	movs	r2, r0
2000213c:	1dfb      	adds	r3, r7, #7
2000213e:	701a      	strb	r2, [r3, #0]
20002140:	1dbb      	adds	r3, r7, #6
20002142:	1c0a      	adds	r2, r1, #0
20002144:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20002146:	2040      	movs	r0, #64	; 0x40
20002148:	f7ff fec0 	bl	20001ecc <graphic_ctrl_bit_clear>
	select_controller(controller);
2000214c:	1dbb      	adds	r3, r7, #6
2000214e:	781b      	ldrb	r3, [r3, #0]
20002150:	0018      	movs	r0, r3
20002152:	f7ff fee7 	bl	20001f24 <select_controller>
	graphic_ctrl_bit_clear(B_RS);
20002156:	2001      	movs	r0, #1
20002158:	f7ff feb8 	bl	20001ecc <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RW);
2000215c:	2002      	movs	r0, #2
2000215e:	f7ff feb5 	bl	20001ecc <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20002162:	1dbb      	adds	r3, r7, #6
20002164:	781a      	ldrb	r2, [r3, #0]
20002166:	1dfb      	adds	r3, r7, #7
20002168:	781b      	ldrb	r3, [r3, #0]
2000216a:	0011      	movs	r1, r2
2000216c:	0018      	movs	r0, r3
2000216e:	f7ff ffa2 	bl	200020b6 <graphic_write>
}
20002172:	46c0      	nop			; (mov r8, r8)
20002174:	46bd      	mov	sp, r7
20002176:	b002      	add	sp, #8
20002178:	bd80      	pop	{r7, pc}

2000217a <graphic_write_data>:
void graphic_write_data(uint8_t command, uint8_t controller) {
2000217a:	b580      	push	{r7, lr}
2000217c:	b082      	sub	sp, #8
2000217e:	af00      	add	r7, sp, #0
20002180:	0002      	movs	r2, r0
20002182:	1dfb      	adds	r3, r7, #7
20002184:	701a      	strb	r2, [r3, #0]
20002186:	1dbb      	adds	r3, r7, #6
20002188:	1c0a      	adds	r2, r1, #0
2000218a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000218c:	2040      	movs	r0, #64	; 0x40
2000218e:	f7ff fe9d 	bl	20001ecc <graphic_ctrl_bit_clear>
	select_controller(controller);
20002192:	1dbb      	adds	r3, r7, #6
20002194:	781b      	ldrb	r3, [r3, #0]
20002196:	0018      	movs	r0, r3
20002198:	f7ff fec4 	bl	20001f24 <select_controller>
	graphic_ctrl_bit_set(B_RS);
2000219c:	2001      	movs	r0, #1
2000219e:	f7ff fe6d 	bl	20001e7c <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
200021a2:	2002      	movs	r0, #2
200021a4:	f7ff fe92 	bl	20001ecc <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
200021a8:	1dbb      	adds	r3, r7, #6
200021aa:	781a      	ldrb	r2, [r3, #0]
200021ac:	1dfb      	adds	r3, r7, #7
200021ae:	781b      	ldrb	r3, [r3, #0]
200021b0:	0011      	movs	r1, r2
200021b2:	0018      	movs	r0, r3
200021b4:	f7ff ff7f 	bl	200020b6 <graphic_write>
}
200021b8:	46c0      	nop			; (mov r8, r8)
200021ba:	46bd      	mov	sp, r7
200021bc:	b002      	add	sp, #8
200021be:	bd80      	pop	{r7, pc}

200021c0 <graphic_initialize>:

void graphic_initialize( void ) {
200021c0:	b580      	push	{r7, lr}
200021c2:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
200021c4:	2040      	movs	r0, #64	; 0x40
200021c6:	f7ff fe59 	bl	20001e7c <graphic_ctrl_bit_set>
	delay_micro(10);
200021ca:	200a      	movs	r0, #10
200021cc:	f7ff fdf0 	bl	20001db0 <delay_micro>
	
	graphic_ctrl_bit_clear(B_CS1);
200021d0:	2008      	movs	r0, #8
200021d2:	f7ff fe7b 	bl	20001ecc <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_CS2);
200021d6:	2010      	movs	r0, #16
200021d8:	f7ff fe78 	bl	20001ecc <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RST);
200021dc:	2020      	movs	r0, #32
200021de:	f7ff fe75 	bl	20001ecc <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_E);
200021e2:	2040      	movs	r0, #64	; 0x40
200021e4:	f7ff fe72 	bl	20001ecc <graphic_ctrl_bit_clear>
	//#define SIMULATOR
	delay_milli(30);
200021e8:	201e      	movs	r0, #30
200021ea:	f7ff fdf7 	bl	20001ddc <delay_milli>
	graphic_ctrl_bit_set(B_RST);
200021ee:	2020      	movs	r0, #32
200021f0:	f7ff fe44 	bl	20001e7c <graphic_ctrl_bit_set>
	delay_milli(100); //...
200021f4:	2064      	movs	r0, #100	; 0x64
200021f6:	f7ff fdf1 	bl	20001ddc <delay_milli>
	
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
200021fa:	2118      	movs	r1, #24
200021fc:	203e      	movs	r0, #62	; 0x3e
200021fe:	f7ff ff99 	bl	20002134 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
20002202:	2118      	movs	r1, #24
20002204:	203f      	movs	r0, #63	; 0x3f
20002206:	f7ff ff95 	bl	20002134 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
2000220a:	2118      	movs	r1, #24
2000220c:	20c0      	movs	r0, #192	; 0xc0
2000220e:	f7ff ff91 	bl	20002134 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
20002212:	2118      	movs	r1, #24
20002214:	2040      	movs	r0, #64	; 0x40
20002216:	f7ff ff8d 	bl	20002134 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
2000221a:	2118      	movs	r1, #24
2000221c:	20b8      	movs	r0, #184	; 0xb8
2000221e:	f7ff ff89 	bl	20002134 <graphic_write_command>
	select_controller(0);
20002222:	2000      	movs	r0, #0
20002224:	f7ff fe7e 	bl	20001f24 <select_controller>
}
20002228:	46c0      	nop			; (mov r8, r8)
2000222a:	46bd      	mov	sp, r7
2000222c:	bd80      	pop	{r7, pc}

2000222e <graphic_clear_screen>:
void graphic_clear_screen( void ) {	//Annat i slidesen
2000222e:	b580      	push	{r7, lr}
20002230:	b082      	sub	sp, #8
20002232:	af00      	add	r7, sp, #0
	uint8_t page;
	for (page = 0; page < 8; page++) {
20002234:	1dfb      	adds	r3, r7, #7
20002236:	2200      	movs	r2, #0
20002238:	701a      	strb	r2, [r3, #0]
2000223a:	e023      	b.n	20002284 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
2000223c:	1dfb      	adds	r3, r7, #7
2000223e:	781b      	ldrb	r3, [r3, #0]
20002240:	2248      	movs	r2, #72	; 0x48
20002242:	4252      	negs	r2, r2
20002244:	4313      	orrs	r3, r2
20002246:	b2db      	uxtb	r3, r3
20002248:	2118      	movs	r1, #24
2000224a:	0018      	movs	r0, r3
2000224c:	f7ff ff72 	bl	20002134 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
20002250:	2118      	movs	r1, #24
20002252:	2040      	movs	r0, #64	; 0x40
20002254:	f7ff ff6e 	bl	20002134 <graphic_write_command>
		uint8_t add;
		for (add = 0; add < 64; add++) {
20002258:	1dbb      	adds	r3, r7, #6
2000225a:	2200      	movs	r2, #0
2000225c:	701a      	strb	r2, [r3, #0]
2000225e:	e008      	b.n	20002272 <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1|B_CS2);
20002260:	2118      	movs	r1, #24
20002262:	2000      	movs	r0, #0
20002264:	f7ff ff89 	bl	2000217a <graphic_write_data>
		for (add = 0; add < 64; add++) {
20002268:	1dbb      	adds	r3, r7, #6
2000226a:	781a      	ldrb	r2, [r3, #0]
2000226c:	1dbb      	adds	r3, r7, #6
2000226e:	3201      	adds	r2, #1
20002270:	701a      	strb	r2, [r3, #0]
20002272:	1dbb      	adds	r3, r7, #6
20002274:	781b      	ldrb	r3, [r3, #0]
20002276:	2b3f      	cmp	r3, #63	; 0x3f
20002278:	d9f2      	bls.n	20002260 <graphic_clear_screen+0x32>
	for (page = 0; page < 8; page++) {
2000227a:	1dfb      	adds	r3, r7, #7
2000227c:	781a      	ldrb	r2, [r3, #0]
2000227e:	1dfb      	adds	r3, r7, #7
20002280:	3201      	adds	r2, #1
20002282:	701a      	strb	r2, [r3, #0]
20002284:	1dfb      	adds	r3, r7, #7
20002286:	781b      	ldrb	r3, [r3, #0]
20002288:	2b07      	cmp	r3, #7
2000228a:	d9d7      	bls.n	2000223c <graphic_clear_screen+0xe>
		}
	}
}
2000228c:	46c0      	nop			; (mov r8, r8)
2000228e:	46bd      	mov	sp, r7
20002290:	b002      	add	sp, #8
20002292:	bd80      	pop	{r7, pc}

20002294 <pixel>:

/** Color: 1=light 2=gray 3=black*/
void pixel(int x, int y, int set, int color) {
20002294:	b580      	push	{r7, lr}
20002296:	b086      	sub	sp, #24
20002298:	af00      	add	r7, sp, #0
2000229a:	60f8      	str	r0, [r7, #12]
2000229c:	60b9      	str	r1, [r7, #8]
2000229e:	607a      	str	r2, [r7, #4]
200022a0:	603b      	str	r3, [r7, #0]
	uint8_t mask;
	int index = 0;
200022a2:	2300      	movs	r3, #0
200022a4:	613b      	str	r3, [r7, #16]
	if( (x > 128 ) || (x < 1) || (y > 64) || (y < 1) ) 
200022a6:	68fb      	ldr	r3, [r7, #12]
200022a8:	2b80      	cmp	r3, #128	; 0x80
200022aa:	dd00      	ble.n	200022ae <pixel+0x1a>
200022ac:	e0a6      	b.n	200023fc <pixel+0x168>
200022ae:	68fb      	ldr	r3, [r7, #12]
200022b0:	2b00      	cmp	r3, #0
200022b2:	dc00      	bgt.n	200022b6 <pixel+0x22>
200022b4:	e0a2      	b.n	200023fc <pixel+0x168>
200022b6:	68bb      	ldr	r3, [r7, #8]
200022b8:	2b40      	cmp	r3, #64	; 0x40
200022ba:	dd00      	ble.n	200022be <pixel+0x2a>
200022bc:	e09e      	b.n	200023fc <pixel+0x168>
200022be:	68bb      	ldr	r3, [r7, #8]
200022c0:	2b00      	cmp	r3, #0
200022c2:	dc00      	bgt.n	200022c6 <pixel+0x32>
200022c4:	e09a      	b.n	200023fc <pixel+0x168>
		return;
	mask = 1 << ((y-1)%8);
200022c6:	68bb      	ldr	r3, [r7, #8]
200022c8:	3b01      	subs	r3, #1
200022ca:	4a4e      	ldr	r2, [pc, #312]	; (20002404 <pixel+0x170>)
200022cc:	4013      	ands	r3, r2
200022ce:	d504      	bpl.n	200022da <pixel+0x46>
200022d0:	3b01      	subs	r3, #1
200022d2:	2208      	movs	r2, #8
200022d4:	4252      	negs	r2, r2
200022d6:	4313      	orrs	r3, r2
200022d8:	3301      	adds	r3, #1
200022da:	001a      	movs	r2, r3
200022dc:	2301      	movs	r3, #1
200022de:	4093      	lsls	r3, r2
200022e0:	001a      	movs	r2, r3
200022e2:	2317      	movs	r3, #23
200022e4:	18fb      	adds	r3, r7, r3
200022e6:	701a      	strb	r2, [r3, #0]
	if(x > 64) {
200022e8:	68fb      	ldr	r3, [r7, #12]
200022ea:	2b40      	cmp	r3, #64	; 0x40
200022ec:	dd05      	ble.n	200022fa <pixel+0x66>
		x -= 65;
200022ee:	68fb      	ldr	r3, [r7, #12]
200022f0:	3b41      	subs	r3, #65	; 0x41
200022f2:	60fb      	str	r3, [r7, #12]
		index = 512;
200022f4:	2380      	movs	r3, #128	; 0x80
200022f6:	009b      	lsls	r3, r3, #2
200022f8:	613b      	str	r3, [r7, #16]
	}
	index += x + ((y-1)/8)*64;
200022fa:	68bb      	ldr	r3, [r7, #8]
200022fc:	3b01      	subs	r3, #1
200022fe:	2b00      	cmp	r3, #0
20002300:	da00      	bge.n	20002304 <pixel+0x70>
20002302:	3307      	adds	r3, #7
20002304:	10db      	asrs	r3, r3, #3
20002306:	019a      	lsls	r2, r3, #6
20002308:	68fb      	ldr	r3, [r7, #12]
2000230a:	18d3      	adds	r3, r2, r3
2000230c:	693a      	ldr	r2, [r7, #16]
2000230e:	18d3      	adds	r3, r2, r3
20002310:	613b      	str	r3, [r7, #16]

	if(set == 0)
20002312:	687b      	ldr	r3, [r7, #4]
20002314:	2b00      	cmp	r3, #0
20002316:	d106      	bne.n	20002326 <pixel+0x92>
		mask = ~mask;
20002318:	2317      	movs	r3, #23
2000231a:	18fb      	adds	r3, r7, r3
2000231c:	2217      	movs	r2, #23
2000231e:	18ba      	adds	r2, r7, r2
20002320:	7812      	ldrb	r2, [r2, #0]
20002322:	43d2      	mvns	r2, r2
20002324:	701a      	strb	r2, [r3, #0]

	switch (color) {
20002326:	683b      	ldr	r3, [r7, #0]
20002328:	2b02      	cmp	r3, #2
2000232a:	d024      	beq.n	20002376 <pixel+0xe2>
2000232c:	2b03      	cmp	r3, #3
2000232e:	d043      	beq.n	200023b8 <pixel+0x124>
20002330:	2b01      	cmp	r3, #1
20002332:	d164      	bne.n	200023fe <pixel+0x16a>
		case 1:	
			if(set)
20002334:	687b      	ldr	r3, [r7, #4]
20002336:	2b00      	cmp	r3, #0
20002338:	d00e      	beq.n	20002358 <pixel+0xc4>
				backBufferLight[index] |= mask;
2000233a:	4a33      	ldr	r2, [pc, #204]	; (20002408 <pixel+0x174>)
2000233c:	693b      	ldr	r3, [r7, #16]
2000233e:	18d3      	adds	r3, r2, r3
20002340:	781a      	ldrb	r2, [r3, #0]
20002342:	2317      	movs	r3, #23
20002344:	18fb      	adds	r3, r7, r3
20002346:	781b      	ldrb	r3, [r3, #0]
20002348:	4313      	orrs	r3, r2
2000234a:	b2d9      	uxtb	r1, r3
2000234c:	4a2e      	ldr	r2, [pc, #184]	; (20002408 <pixel+0x174>)
2000234e:	693b      	ldr	r3, [r7, #16]
20002350:	18d3      	adds	r3, r2, r3
20002352:	1c0a      	adds	r2, r1, #0
20002354:	701a      	strb	r2, [r3, #0]
			else
				backBufferLight[index] &= mask;
			break;
20002356:	e052      	b.n	200023fe <pixel+0x16a>
				backBufferLight[index] &= mask;
20002358:	4a2b      	ldr	r2, [pc, #172]	; (20002408 <pixel+0x174>)
2000235a:	693b      	ldr	r3, [r7, #16]
2000235c:	18d3      	adds	r3, r2, r3
2000235e:	781b      	ldrb	r3, [r3, #0]
20002360:	2217      	movs	r2, #23
20002362:	18ba      	adds	r2, r7, r2
20002364:	7812      	ldrb	r2, [r2, #0]
20002366:	4013      	ands	r3, r2
20002368:	b2d9      	uxtb	r1, r3
2000236a:	4a27      	ldr	r2, [pc, #156]	; (20002408 <pixel+0x174>)
2000236c:	693b      	ldr	r3, [r7, #16]
2000236e:	18d3      	adds	r3, r2, r3
20002370:	1c0a      	adds	r2, r1, #0
20002372:	701a      	strb	r2, [r3, #0]
			break;
20002374:	e043      	b.n	200023fe <pixel+0x16a>
		
		case 2:	
			if(set)
20002376:	687b      	ldr	r3, [r7, #4]
20002378:	2b00      	cmp	r3, #0
2000237a:	d00e      	beq.n	2000239a <pixel+0x106>
				backBufferGray[index] |= mask;
2000237c:	4a23      	ldr	r2, [pc, #140]	; (2000240c <pixel+0x178>)
2000237e:	693b      	ldr	r3, [r7, #16]
20002380:	18d3      	adds	r3, r2, r3
20002382:	781a      	ldrb	r2, [r3, #0]
20002384:	2317      	movs	r3, #23
20002386:	18fb      	adds	r3, r7, r3
20002388:	781b      	ldrb	r3, [r3, #0]
2000238a:	4313      	orrs	r3, r2
2000238c:	b2d9      	uxtb	r1, r3
2000238e:	4a1f      	ldr	r2, [pc, #124]	; (2000240c <pixel+0x178>)
20002390:	693b      	ldr	r3, [r7, #16]
20002392:	18d3      	adds	r3, r2, r3
20002394:	1c0a      	adds	r2, r1, #0
20002396:	701a      	strb	r2, [r3, #0]
			else
				backBufferGray[index] &= mask;
			break;
20002398:	e031      	b.n	200023fe <pixel+0x16a>
				backBufferGray[index] &= mask;
2000239a:	4a1c      	ldr	r2, [pc, #112]	; (2000240c <pixel+0x178>)
2000239c:	693b      	ldr	r3, [r7, #16]
2000239e:	18d3      	adds	r3, r2, r3
200023a0:	781b      	ldrb	r3, [r3, #0]
200023a2:	2217      	movs	r2, #23
200023a4:	18ba      	adds	r2, r7, r2
200023a6:	7812      	ldrb	r2, [r2, #0]
200023a8:	4013      	ands	r3, r2
200023aa:	b2d9      	uxtb	r1, r3
200023ac:	4a17      	ldr	r2, [pc, #92]	; (2000240c <pixel+0x178>)
200023ae:	693b      	ldr	r3, [r7, #16]
200023b0:	18d3      	adds	r3, r2, r3
200023b2:	1c0a      	adds	r2, r1, #0
200023b4:	701a      	strb	r2, [r3, #0]
			break;
200023b6:	e022      	b.n	200023fe <pixel+0x16a>
		
		case 3:	
			if(set)
200023b8:	687b      	ldr	r3, [r7, #4]
200023ba:	2b00      	cmp	r3, #0
200023bc:	d00e      	beq.n	200023dc <pixel+0x148>
				backBuffer[index] |= mask;
200023be:	4a14      	ldr	r2, [pc, #80]	; (20002410 <pixel+0x17c>)
200023c0:	693b      	ldr	r3, [r7, #16]
200023c2:	18d3      	adds	r3, r2, r3
200023c4:	781a      	ldrb	r2, [r3, #0]
200023c6:	2317      	movs	r3, #23
200023c8:	18fb      	adds	r3, r7, r3
200023ca:	781b      	ldrb	r3, [r3, #0]
200023cc:	4313      	orrs	r3, r2
200023ce:	b2d9      	uxtb	r1, r3
200023d0:	4a0f      	ldr	r2, [pc, #60]	; (20002410 <pixel+0x17c>)
200023d2:	693b      	ldr	r3, [r7, #16]
200023d4:	18d3      	adds	r3, r2, r3
200023d6:	1c0a      	adds	r2, r1, #0
200023d8:	701a      	strb	r2, [r3, #0]
			else
				backBuffer[index] &= mask;
			break;
200023da:	e010      	b.n	200023fe <pixel+0x16a>
				backBuffer[index] &= mask;
200023dc:	4a0c      	ldr	r2, [pc, #48]	; (20002410 <pixel+0x17c>)
200023de:	693b      	ldr	r3, [r7, #16]
200023e0:	18d3      	adds	r3, r2, r3
200023e2:	781b      	ldrb	r3, [r3, #0]
200023e4:	2217      	movs	r2, #23
200023e6:	18ba      	adds	r2, r7, r2
200023e8:	7812      	ldrb	r2, [r2, #0]
200023ea:	4013      	ands	r3, r2
200023ec:	b2d9      	uxtb	r1, r3
200023ee:	4a08      	ldr	r2, [pc, #32]	; (20002410 <pixel+0x17c>)
200023f0:	693b      	ldr	r3, [r7, #16]
200023f2:	18d3      	adds	r3, r2, r3
200023f4:	1c0a      	adds	r2, r1, #0
200023f6:	701a      	strb	r2, [r3, #0]
			break;
200023f8:	46c0      	nop			; (mov r8, r8)
200023fa:	e000      	b.n	200023fe <pixel+0x16a>
		return;
200023fc:	46c0      	nop			; (mov r8, r8)
			
	}

}
200023fe:	46bd      	mov	sp, r7
20002400:	b006      	add	sp, #24
20002402:	bd80      	pop	{r7, pc}
20002404:	80000007 	andhi	r0, r0, r7
20002408:	20005528 	andcs	r5, r0, r8, lsr #10
2000240c:	20003d28 	andcs	r3, r0, r8, lsr #26
20002410:	20004528 	andcs	r4, r0, r8, lsr #10

20002414 <pixel2>:


void pixel2(int x, int y, int set) {
20002414:	b580      	push	{r7, lr}
20002416:	b088      	sub	sp, #32
20002418:	af00      	add	r7, sp, #0
2000241a:	60f8      	str	r0, [r7, #12]
2000241c:	60b9      	str	r1, [r7, #8]
2000241e:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20002420:	68fb      	ldr	r3, [r7, #12]
20002422:	2b00      	cmp	r3, #0
20002424:	dc00      	bgt.n	20002428 <pixel2+0x14>
20002426:	e0bc      	b.n	200025a2 <pixel2+0x18e>
20002428:	68bb      	ldr	r3, [r7, #8]
2000242a:	2b00      	cmp	r3, #0
2000242c:	dc00      	bgt.n	20002430 <pixel2+0x1c>
2000242e:	e0b8      	b.n	200025a2 <pixel2+0x18e>
20002430:	68fb      	ldr	r3, [r7, #12]
20002432:	2b80      	cmp	r3, #128	; 0x80
20002434:	dd00      	ble.n	20002438 <pixel2+0x24>
20002436:	e0b4      	b.n	200025a2 <pixel2+0x18e>
20002438:	68bb      	ldr	r3, [r7, #8]
2000243a:	2b40      	cmp	r3, #64	; 0x40
2000243c:	dd00      	ble.n	20002440 <pixel2+0x2c>
2000243e:	e0b0      	b.n	200025a2 <pixel2+0x18e>
	index = (y-1)/8;
20002440:	68bb      	ldr	r3, [r7, #8]
20002442:	3b01      	subs	r3, #1
20002444:	2b00      	cmp	r3, #0
20002446:	da00      	bge.n	2000244a <pixel2+0x36>
20002448:	3307      	adds	r3, #7
2000244a:	10db      	asrs	r3, r3, #3
2000244c:	61bb      	str	r3, [r7, #24]
	switch( (y-1)%8 ) {
2000244e:	68bb      	ldr	r3, [r7, #8]
20002450:	3b01      	subs	r3, #1
20002452:	4a56      	ldr	r2, [pc, #344]	; (200025ac <pixel2+0x198>)
20002454:	4013      	ands	r3, r2
20002456:	d504      	bpl.n	20002462 <pixel2+0x4e>
20002458:	3b01      	subs	r3, #1
2000245a:	2208      	movs	r2, #8
2000245c:	4252      	negs	r2, r2
2000245e:	4313      	orrs	r3, r2
20002460:	3301      	adds	r3, #1
20002462:	2b07      	cmp	r3, #7
20002464:	d82c      	bhi.n	200024c0 <pixel2+0xac>
20002466:	009a      	lsls	r2, r3, #2
20002468:	4b51      	ldr	r3, [pc, #324]	; (200025b0 <pixel2+0x19c>)
2000246a:	18d3      	adds	r3, r2, r3
2000246c:	681b      	ldr	r3, [r3, #0]
2000246e:	469f      	mov	pc, r3
		case 0: mask = 1; break;
20002470:	231f      	movs	r3, #31
20002472:	18fb      	adds	r3, r7, r3
20002474:	2201      	movs	r2, #1
20002476:	701a      	strb	r2, [r3, #0]
20002478:	e022      	b.n	200024c0 <pixel2+0xac>
		case 1: mask = 2; break;
2000247a:	231f      	movs	r3, #31
2000247c:	18fb      	adds	r3, r7, r3
2000247e:	2202      	movs	r2, #2
20002480:	701a      	strb	r2, [r3, #0]
20002482:	e01d      	b.n	200024c0 <pixel2+0xac>
		case 2: mask = 4; break;
20002484:	231f      	movs	r3, #31
20002486:	18fb      	adds	r3, r7, r3
20002488:	2204      	movs	r2, #4
2000248a:	701a      	strb	r2, [r3, #0]
2000248c:	e018      	b.n	200024c0 <pixel2+0xac>
		case 3: mask = 8; break;
2000248e:	231f      	movs	r3, #31
20002490:	18fb      	adds	r3, r7, r3
20002492:	2208      	movs	r2, #8
20002494:	701a      	strb	r2, [r3, #0]
20002496:	e013      	b.n	200024c0 <pixel2+0xac>
		case 4: mask = 0x10; break;
20002498:	231f      	movs	r3, #31
2000249a:	18fb      	adds	r3, r7, r3
2000249c:	2210      	movs	r2, #16
2000249e:	701a      	strb	r2, [r3, #0]
200024a0:	e00e      	b.n	200024c0 <pixel2+0xac>
		case 5: mask = 0x20; break;
200024a2:	231f      	movs	r3, #31
200024a4:	18fb      	adds	r3, r7, r3
200024a6:	2220      	movs	r2, #32
200024a8:	701a      	strb	r2, [r3, #0]
200024aa:	e009      	b.n	200024c0 <pixel2+0xac>
		case 6: mask = 0x40; break;
200024ac:	231f      	movs	r3, #31
200024ae:	18fb      	adds	r3, r7, r3
200024b0:	2240      	movs	r2, #64	; 0x40
200024b2:	701a      	strb	r2, [r3, #0]
200024b4:	e004      	b.n	200024c0 <pixel2+0xac>
		case 7: mask = 0x80; break;
200024b6:	231f      	movs	r3, #31
200024b8:	18fb      	adds	r3, r7, r3
200024ba:	2280      	movs	r2, #128	; 0x80
200024bc:	701a      	strb	r2, [r3, #0]
200024be:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0)
200024c0:	687b      	ldr	r3, [r7, #4]
200024c2:	2b00      	cmp	r3, #0
200024c4:	d106      	bne.n	200024d4 <pixel2+0xc0>
		mask = ~mask;
200024c6:	231f      	movs	r3, #31
200024c8:	18fb      	adds	r3, r7, r3
200024ca:	221f      	movs	r2, #31
200024cc:	18ba      	adds	r2, r7, r2
200024ce:	7812      	ldrb	r2, [r2, #0]
200024d0:	43d2      	mvns	r2, r2
200024d2:	701a      	strb	r2, [r3, #0]
	
	if(x > 64){
200024d4:	68fb      	ldr	r3, [r7, #12]
200024d6:	2b40      	cmp	r3, #64	; 0x40
200024d8:	dd07      	ble.n	200024ea <pixel2+0xd6>
		controller = B_CS2;
200024da:	231e      	movs	r3, #30
200024dc:	18fb      	adds	r3, r7, r3
200024de:	2210      	movs	r2, #16
200024e0:	701a      	strb	r2, [r3, #0]
		x = x - 65;
200024e2:	68fb      	ldr	r3, [r7, #12]
200024e4:	3b41      	subs	r3, #65	; 0x41
200024e6:	60fb      	str	r3, [r7, #12]
200024e8:	e006      	b.n	200024f8 <pixel2+0xe4>
	} else {
		controller = B_CS1;
200024ea:	231e      	movs	r3, #30
200024ec:	18fb      	adds	r3, r7, r3
200024ee:	2208      	movs	r2, #8
200024f0:	701a      	strb	r2, [r3, #0]
		x = x-1;
200024f2:	68fb      	ldr	r3, [r7, #12]
200024f4:	3b01      	subs	r3, #1
200024f6:	60fb      	str	r3, [r7, #12]
	}
	graphic_write_command(LCD_SET_ADD | x, controller );
200024f8:	68fb      	ldr	r3, [r7, #12]
200024fa:	b25b      	sxtb	r3, r3
200024fc:	2240      	movs	r2, #64	; 0x40
200024fe:	4313      	orrs	r3, r2
20002500:	b25b      	sxtb	r3, r3
20002502:	b2da      	uxtb	r2, r3
20002504:	231e      	movs	r3, #30
20002506:	18fb      	adds	r3, r7, r3
20002508:	781b      	ldrb	r3, [r3, #0]
2000250a:	0019      	movs	r1, r3
2000250c:	0010      	movs	r0, r2
2000250e:	f7ff fe11 	bl	20002134 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller );
20002512:	69bb      	ldr	r3, [r7, #24]
20002514:	b25b      	sxtb	r3, r3
20002516:	2248      	movs	r2, #72	; 0x48
20002518:	4252      	negs	r2, r2
2000251a:	4313      	orrs	r3, r2
2000251c:	b25b      	sxtb	r3, r3
2000251e:	b2da      	uxtb	r2, r3
20002520:	231e      	movs	r3, #30
20002522:	18fb      	adds	r3, r7, r3
20002524:	781b      	ldrb	r3, [r3, #0]
20002526:	0019      	movs	r1, r3
20002528:	0010      	movs	r0, r2
2000252a:	f7ff fe03 	bl	20002134 <graphic_write_command>
	
	c = graphic_read_data(controller);
2000252e:	231e      	movs	r3, #30
20002530:	18fb      	adds	r3, r7, r3
20002532:	781b      	ldrb	r3, [r3, #0]
20002534:	0018      	movs	r0, r3
20002536:	f7ff fda9 	bl	2000208c <graphic_read_data>
2000253a:	0002      	movs	r2, r0
2000253c:	2317      	movs	r3, #23
2000253e:	18fb      	adds	r3, r7, r3
20002540:	701a      	strb	r2, [r3, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
20002542:	68fb      	ldr	r3, [r7, #12]
20002544:	b25b      	sxtb	r3, r3
20002546:	2240      	movs	r2, #64	; 0x40
20002548:	4313      	orrs	r3, r2
2000254a:	b25b      	sxtb	r3, r3
2000254c:	b2da      	uxtb	r2, r3
2000254e:	231e      	movs	r3, #30
20002550:	18fb      	adds	r3, r7, r3
20002552:	781b      	ldrb	r3, [r3, #0]
20002554:	0019      	movs	r1, r3
20002556:	0010      	movs	r0, r2
20002558:	f7ff fdec 	bl	20002134 <graphic_write_command>
	
	if(set)
2000255c:	687b      	ldr	r3, [r7, #4]
2000255e:	2b00      	cmp	r3, #0
20002560:	d00a      	beq.n	20002578 <pixel2+0x164>
		mask = mask | c;
20002562:	231f      	movs	r3, #31
20002564:	18fb      	adds	r3, r7, r3
20002566:	221f      	movs	r2, #31
20002568:	18b9      	adds	r1, r7, r2
2000256a:	2217      	movs	r2, #23
2000256c:	18ba      	adds	r2, r7, r2
2000256e:	7809      	ldrb	r1, [r1, #0]
20002570:	7812      	ldrb	r2, [r2, #0]
20002572:	430a      	orrs	r2, r1
20002574:	701a      	strb	r2, [r3, #0]
20002576:	e009      	b.n	2000258c <pixel2+0x178>
	else
		mask = mask & c;
20002578:	231f      	movs	r3, #31
2000257a:	18fb      	adds	r3, r7, r3
2000257c:	221f      	movs	r2, #31
2000257e:	18ba      	adds	r2, r7, r2
20002580:	2117      	movs	r1, #23
20002582:	1879      	adds	r1, r7, r1
20002584:	7812      	ldrb	r2, [r2, #0]
20002586:	7809      	ldrb	r1, [r1, #0]
20002588:	400a      	ands	r2, r1
2000258a:	701a      	strb	r2, [r3, #0]
	
	graphic_write_data(mask, controller);
2000258c:	231e      	movs	r3, #30
2000258e:	18fb      	adds	r3, r7, r3
20002590:	781a      	ldrb	r2, [r3, #0]
20002592:	231f      	movs	r3, #31
20002594:	18fb      	adds	r3, r7, r3
20002596:	781b      	ldrb	r3, [r3, #0]
20002598:	0011      	movs	r1, r2
2000259a:	0018      	movs	r0, r3
2000259c:	f7ff fded 	bl	2000217a <graphic_write_data>
200025a0:	e000      	b.n	200025a4 <pixel2+0x190>
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
200025a2:	46c0      	nop			; (mov r8, r8)
}
200025a4:	46bd      	mov	sp, r7
200025a6:	b008      	add	sp, #32
200025a8:	bd80      	pop	{r7, pc}
200025aa:	46c0      	nop			; (mov r8, r8)
200025ac:	80000007 	andhi	r0, r0, r7
200025b0:	2000952c 	andcs	r9, r0, ip, lsr #10

200025b4 <graphic_draw_screen>:

void graphic_draw_screen(uint8_t *buffer) {
200025b4:	b580      	push	{r7, lr}
200025b6:	b086      	sub	sp, #24
200025b8:	af00      	add	r7, sp, #0
200025ba:	6078      	str	r0, [r7, #4]
	uint8_t i, j, controller, c;
	unsigned int k = 0;
200025bc:	2300      	movs	r3, #0
200025be:	613b      	str	r3, [r7, #16]
	for(c = 0; c < 2; c++) {
200025c0:	2315      	movs	r3, #21
200025c2:	18fb      	adds	r3, r7, r3
200025c4:	2200      	movs	r2, #0
200025c6:	701a      	strb	r2, [r3, #0]
200025c8:	e056      	b.n	20002678 <graphic_draw_screen+0xc4>
		controller = (c == 0) ? B_CS1 : B_CS2;
200025ca:	2315      	movs	r3, #21
200025cc:	18fb      	adds	r3, r7, r3
200025ce:	781b      	ldrb	r3, [r3, #0]
200025d0:	2b00      	cmp	r3, #0
200025d2:	d101      	bne.n	200025d8 <graphic_draw_screen+0x24>
200025d4:	2208      	movs	r2, #8
200025d6:	e000      	b.n	200025da <graphic_draw_screen+0x26>
200025d8:	2210      	movs	r2, #16
200025da:	230f      	movs	r3, #15
200025dc:	18fb      	adds	r3, r7, r3
200025de:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 8; j++) {
200025e0:	2316      	movs	r3, #22
200025e2:	18fb      	adds	r3, r7, r3
200025e4:	2200      	movs	r2, #0
200025e6:	701a      	strb	r2, [r3, #0]
200025e8:	e03a      	b.n	20002660 <graphic_draw_screen+0xac>
			graphic_write_command(LCD_SET_PAGE | j, controller);
200025ea:	2316      	movs	r3, #22
200025ec:	18fb      	adds	r3, r7, r3
200025ee:	781b      	ldrb	r3, [r3, #0]
200025f0:	2248      	movs	r2, #72	; 0x48
200025f2:	4252      	negs	r2, r2
200025f4:	4313      	orrs	r3, r2
200025f6:	b2da      	uxtb	r2, r3
200025f8:	230f      	movs	r3, #15
200025fa:	18fb      	adds	r3, r7, r3
200025fc:	781b      	ldrb	r3, [r3, #0]
200025fe:	0019      	movs	r1, r3
20002600:	0010      	movs	r0, r2
20002602:	f7ff fd97 	bl	20002134 <graphic_write_command>
			graphic_write_command(LCD_SET_ADD | 0, controller);
20002606:	230f      	movs	r3, #15
20002608:	18fb      	adds	r3, r7, r3
2000260a:	781b      	ldrb	r3, [r3, #0]
2000260c:	0019      	movs	r1, r3
2000260e:	2040      	movs	r0, #64	; 0x40
20002610:	f7ff fd90 	bl	20002134 <graphic_write_command>
			for(i = 0; i <= 63; i++, k++) {
20002614:	2317      	movs	r3, #23
20002616:	18fb      	adds	r3, r7, r3
20002618:	2200      	movs	r2, #0
2000261a:	701a      	strb	r2, [r3, #0]
2000261c:	e014      	b.n	20002648 <graphic_draw_screen+0x94>
				graphic_write_data(buffer[k], controller);
2000261e:	687a      	ldr	r2, [r7, #4]
20002620:	693b      	ldr	r3, [r7, #16]
20002622:	18d3      	adds	r3, r2, r3
20002624:	781a      	ldrb	r2, [r3, #0]
20002626:	230f      	movs	r3, #15
20002628:	18fb      	adds	r3, r7, r3
2000262a:	781b      	ldrb	r3, [r3, #0]
2000262c:	0019      	movs	r1, r3
2000262e:	0010      	movs	r0, r2
20002630:	f7ff fda3 	bl	2000217a <graphic_write_data>
			for(i = 0; i <= 63; i++, k++) {
20002634:	2317      	movs	r3, #23
20002636:	18fb      	adds	r3, r7, r3
20002638:	781a      	ldrb	r2, [r3, #0]
2000263a:	2317      	movs	r3, #23
2000263c:	18fb      	adds	r3, r7, r3
2000263e:	3201      	adds	r2, #1
20002640:	701a      	strb	r2, [r3, #0]
20002642:	693b      	ldr	r3, [r7, #16]
20002644:	3301      	adds	r3, #1
20002646:	613b      	str	r3, [r7, #16]
20002648:	2317      	movs	r3, #23
2000264a:	18fb      	adds	r3, r7, r3
2000264c:	781b      	ldrb	r3, [r3, #0]
2000264e:	2b3f      	cmp	r3, #63	; 0x3f
20002650:	d9e5      	bls.n	2000261e <graphic_draw_screen+0x6a>
		for(j = 0; j < 8; j++) {
20002652:	2316      	movs	r3, #22
20002654:	18fb      	adds	r3, r7, r3
20002656:	781a      	ldrb	r2, [r3, #0]
20002658:	2316      	movs	r3, #22
2000265a:	18fb      	adds	r3, r7, r3
2000265c:	3201      	adds	r2, #1
2000265e:	701a      	strb	r2, [r3, #0]
20002660:	2316      	movs	r3, #22
20002662:	18fb      	adds	r3, r7, r3
20002664:	781b      	ldrb	r3, [r3, #0]
20002666:	2b07      	cmp	r3, #7
20002668:	d9bf      	bls.n	200025ea <graphic_draw_screen+0x36>
	for(c = 0; c < 2; c++) {
2000266a:	2315      	movs	r3, #21
2000266c:	18fb      	adds	r3, r7, r3
2000266e:	781a      	ldrb	r2, [r3, #0]
20002670:	2315      	movs	r3, #21
20002672:	18fb      	adds	r3, r7, r3
20002674:	3201      	adds	r2, #1
20002676:	701a      	strb	r2, [r3, #0]
20002678:	2315      	movs	r3, #21
2000267a:	18fb      	adds	r3, r7, r3
2000267c:	781b      	ldrb	r3, [r3, #0]
2000267e:	2b01      	cmp	r3, #1
20002680:	d9a3      	bls.n	200025ca <graphic_draw_screen+0x16>
			}
		}
	}
}
20002682:	46c0      	nop			; (mov r8, r8)
20002684:	46bd      	mov	sp, r7
20002686:	b006      	add	sp, #24
20002688:	bd80      	pop	{r7, pc}

2000268a <draw_sprite>:


void grayScaleTest( void );


void draw_sprite(sprite* s, int x, int y, int set, int color) {
2000268a:	b5b0      	push	{r4, r5, r7, lr}
2000268c:	b08a      	sub	sp, #40	; 0x28
2000268e:	af00      	add	r7, sp, #0
20002690:	60f8      	str	r0, [r7, #12]
20002692:	60b9      	str	r1, [r7, #8]
20002694:	607a      	str	r2, [r7, #4]
20002696:	603b      	str	r3, [r7, #0]
	int i,j,k, width_in_bytes;
	if (s->width % 8 == 0)
20002698:	68fb      	ldr	r3, [r7, #12]
2000269a:	681b      	ldr	r3, [r3, #0]
2000269c:	2207      	movs	r2, #7
2000269e:	4013      	ands	r3, r2
200026a0:	d104      	bne.n	200026ac <draw_sprite+0x22>
		width_in_bytes = s->width / 8;
200026a2:	68fb      	ldr	r3, [r7, #12]
200026a4:	681b      	ldr	r3, [r3, #0]
200026a6:	08db      	lsrs	r3, r3, #3
200026a8:	61bb      	str	r3, [r7, #24]
200026aa:	e004      	b.n	200026b6 <draw_sprite+0x2c>
	else
		width_in_bytes = (s->width / 8) + 1;
200026ac:	68fb      	ldr	r3, [r7, #12]
200026ae:	681b      	ldr	r3, [r3, #0]
200026b0:	08db      	lsrs	r3, r3, #3
200026b2:	3301      	adds	r3, #1
200026b4:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < s->height; i++)
200026b6:	2300      	movs	r3, #0
200026b8:	627b      	str	r3, [r7, #36]	; 0x24
200026ba:	e06a      	b.n	20002792 <draw_sprite+0x108>
		for (j = 0; j < width_in_bytes; j++) {
200026bc:	2300      	movs	r3, #0
200026be:	623b      	str	r3, [r7, #32]
200026c0:	e060      	b.n	20002784 <draw_sprite+0xfa>
			unsigned char byte = s->data[i * width_in_bytes + j];
200026c2:	68fb      	ldr	r3, [r7, #12]
200026c4:	689b      	ldr	r3, [r3, #8]
200026c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200026c8:	69b9      	ldr	r1, [r7, #24]
200026ca:	4351      	muls	r1, r2
200026cc:	6a3a      	ldr	r2, [r7, #32]
200026ce:	188a      	adds	r2, r1, r2
200026d0:	189a      	adds	r2, r3, r2
200026d2:	2317      	movs	r3, #23
200026d4:	18fb      	adds	r3, r7, r3
200026d6:	7812      	ldrb	r2, [r2, #0]
200026d8:	701a      	strb	r2, [r3, #0]
			for (k =0; k < 8; k++) {
200026da:	2300      	movs	r3, #0
200026dc:	61fb      	str	r3, [r7, #28]
200026de:	e04b      	b.n	20002778 <draw_sprite+0xee>
				if (byte & (1 << k)){
200026e0:	2317      	movs	r3, #23
200026e2:	18fb      	adds	r3, r7, r3
200026e4:	781a      	ldrb	r2, [r3, #0]
200026e6:	69fb      	ldr	r3, [r7, #28]
200026e8:	411a      	asrs	r2, r3
200026ea:	0013      	movs	r3, r2
200026ec:	2201      	movs	r2, #1
200026ee:	4013      	ands	r3, r2
200026f0:	d03f      	beq.n	20002772 <draw_sprite+0xe8>
					pixel(8 * j + k + x + 1, i + y + 1, set, color);
200026f2:	6a3b      	ldr	r3, [r7, #32]
200026f4:	00da      	lsls	r2, r3, #3
200026f6:	69fb      	ldr	r3, [r7, #28]
200026f8:	18d2      	adds	r2, r2, r3
200026fa:	68bb      	ldr	r3, [r7, #8]
200026fc:	18d3      	adds	r3, r2, r3
200026fe:	1c58      	adds	r0, r3, #1
20002700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20002702:	687b      	ldr	r3, [r7, #4]
20002704:	18d3      	adds	r3, r2, r3
20002706:	1c59      	adds	r1, r3, #1
20002708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000270a:	683a      	ldr	r2, [r7, #0]
2000270c:	f7ff fdc2 	bl	20002294 <pixel>
					
					if(set) {	//Remove the other colors from this pixel
20002710:	683b      	ldr	r3, [r7, #0]
20002712:	2b00      	cmp	r3, #0
20002714:	d02d      	beq.n	20002772 <draw_sprite+0xe8>
						pixel(8 * j + k + x + 1, i + y + 1, 0, (color+1) % 3);
20002716:	6a3b      	ldr	r3, [r7, #32]
20002718:	00da      	lsls	r2, r3, #3
2000271a:	69fb      	ldr	r3, [r7, #28]
2000271c:	18d2      	adds	r2, r2, r3
2000271e:	68bb      	ldr	r3, [r7, #8]
20002720:	18d3      	adds	r3, r2, r3
20002722:	1c5c      	adds	r4, r3, #1
20002724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20002726:	687b      	ldr	r3, [r7, #4]
20002728:	18d3      	adds	r3, r2, r3
2000272a:	1c5d      	adds	r5, r3, #1
2000272c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000272e:	3301      	adds	r3, #1
20002730:	2103      	movs	r1, #3
20002732:	0018      	movs	r0, r3
20002734:	f000 ff20 	bl	20003578 <__aeabi_idivmod>
20002738:	000b      	movs	r3, r1
2000273a:	2200      	movs	r2, #0
2000273c:	0029      	movs	r1, r5
2000273e:	0020      	movs	r0, r4
20002740:	f7ff fda8 	bl	20002294 <pixel>
						pixel(8 * j + k + x + 1, i + y + 1, 0, (color+2) % 3);
20002744:	6a3b      	ldr	r3, [r7, #32]
20002746:	00da      	lsls	r2, r3, #3
20002748:	69fb      	ldr	r3, [r7, #28]
2000274a:	18d2      	adds	r2, r2, r3
2000274c:	68bb      	ldr	r3, [r7, #8]
2000274e:	18d3      	adds	r3, r2, r3
20002750:	1c5c      	adds	r4, r3, #1
20002752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20002754:	687b      	ldr	r3, [r7, #4]
20002756:	18d3      	adds	r3, r2, r3
20002758:	1c5d      	adds	r5, r3, #1
2000275a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000275c:	3302      	adds	r3, #2
2000275e:	2103      	movs	r1, #3
20002760:	0018      	movs	r0, r3
20002762:	f000 ff09 	bl	20003578 <__aeabi_idivmod>
20002766:	000b      	movs	r3, r1
20002768:	2200      	movs	r2, #0
2000276a:	0029      	movs	r1, r5
2000276c:	0020      	movs	r0, r4
2000276e:	f7ff fd91 	bl	20002294 <pixel>
			for (k =0; k < 8; k++) {
20002772:	69fb      	ldr	r3, [r7, #28]
20002774:	3301      	adds	r3, #1
20002776:	61fb      	str	r3, [r7, #28]
20002778:	69fb      	ldr	r3, [r7, #28]
2000277a:	2b07      	cmp	r3, #7
2000277c:	ddb0      	ble.n	200026e0 <draw_sprite+0x56>
		for (j = 0; j < width_in_bytes; j++) {
2000277e:	6a3b      	ldr	r3, [r7, #32]
20002780:	3301      	adds	r3, #1
20002782:	623b      	str	r3, [r7, #32]
20002784:	6a3a      	ldr	r2, [r7, #32]
20002786:	69bb      	ldr	r3, [r7, #24]
20002788:	429a      	cmp	r2, r3
2000278a:	db9a      	blt.n	200026c2 <draw_sprite+0x38>
	for (i = 0; i < s->height; i++)
2000278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000278e:	3301      	adds	r3, #1
20002790:	627b      	str	r3, [r7, #36]	; 0x24
20002792:	68fb      	ldr	r3, [r7, #12]
20002794:	685a      	ldr	r2, [r3, #4]
20002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002798:	429a      	cmp	r2, r3
2000279a:	d88f      	bhi.n	200026bc <draw_sprite+0x32>
					}
				}
			}
		}
}
2000279c:	46c0      	nop			; (mov r8, r8)
2000279e:	46bd      	mov	sp, r7
200027a0:	b00a      	add	sp, #40	; 0x28
200027a2:	bdb0      	pop	{r4, r5, r7, pc}

200027a4 <fillRectangle>:

void fillRectangle( int x, int y, int width, int height ){
200027a4:	b580      	push	{r7, lr}
200027a6:	b086      	sub	sp, #24
200027a8:	af00      	add	r7, sp, #0
200027aa:	60f8      	str	r0, [r7, #12]
200027ac:	60b9      	str	r1, [r7, #8]
200027ae:	607a      	str	r2, [r7, #4]
200027b0:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
200027b2:	68fb      	ldr	r3, [r7, #12]
200027b4:	617b      	str	r3, [r7, #20]
200027b6:	e014      	b.n	200027e2 <fillRectangle+0x3e>
		for (j = y; j < y + height; j++) {
200027b8:	68bb      	ldr	r3, [r7, #8]
200027ba:	613b      	str	r3, [r7, #16]
200027bc:	e008      	b.n	200027d0 <fillRectangle+0x2c>
			pixel(i, j, 1, 3);
200027be:	6939      	ldr	r1, [r7, #16]
200027c0:	6978      	ldr	r0, [r7, #20]
200027c2:	2303      	movs	r3, #3
200027c4:	2201      	movs	r2, #1
200027c6:	f7ff fd65 	bl	20002294 <pixel>
		for (j = y; j < y + height; j++) {
200027ca:	693b      	ldr	r3, [r7, #16]
200027cc:	3301      	adds	r3, #1
200027ce:	613b      	str	r3, [r7, #16]
200027d0:	68ba      	ldr	r2, [r7, #8]
200027d2:	683b      	ldr	r3, [r7, #0]
200027d4:	18d2      	adds	r2, r2, r3
200027d6:	693b      	ldr	r3, [r7, #16]
200027d8:	429a      	cmp	r2, r3
200027da:	dcf0      	bgt.n	200027be <fillRectangle+0x1a>
	for (i = x; i < x + width; i++) {
200027dc:	697b      	ldr	r3, [r7, #20]
200027de:	3301      	adds	r3, #1
200027e0:	617b      	str	r3, [r7, #20]
200027e2:	68fa      	ldr	r2, [r7, #12]
200027e4:	687b      	ldr	r3, [r7, #4]
200027e6:	18d2      	adds	r2, r2, r3
200027e8:	697b      	ldr	r3, [r7, #20]
200027ea:	429a      	cmp	r2, r3
200027ec:	dce4      	bgt.n	200027b8 <fillRectangle+0x14>
		}
	}
}
200027ee:	46c0      	nop			; (mov r8, r8)
200027f0:	46bd      	mov	sp, r7
200027f2:	b006      	add	sp, #24
200027f4:	bd80      	pop	{r7, pc}

200027f6 <clearRectangle>:

void clearRectangle( int x, int y, int width, int height ){
200027f6:	b580      	push	{r7, lr}
200027f8:	b086      	sub	sp, #24
200027fa:	af00      	add	r7, sp, #0
200027fc:	60f8      	str	r0, [r7, #12]
200027fe:	60b9      	str	r1, [r7, #8]
20002800:	607a      	str	r2, [r7, #4]
20002802:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
20002804:	68fb      	ldr	r3, [r7, #12]
20002806:	617b      	str	r3, [r7, #20]
20002808:	e014      	b.n	20002834 <clearRectangle+0x3e>
		for (j = y; j < y + height; j++) {
2000280a:	68bb      	ldr	r3, [r7, #8]
2000280c:	613b      	str	r3, [r7, #16]
2000280e:	e008      	b.n	20002822 <clearRectangle+0x2c>
			pixel(i, j, 0, 3);
20002810:	6939      	ldr	r1, [r7, #16]
20002812:	6978      	ldr	r0, [r7, #20]
20002814:	2303      	movs	r3, #3
20002816:	2200      	movs	r2, #0
20002818:	f7ff fd3c 	bl	20002294 <pixel>
		for (j = y; j < y + height; j++) {
2000281c:	693b      	ldr	r3, [r7, #16]
2000281e:	3301      	adds	r3, #1
20002820:	613b      	str	r3, [r7, #16]
20002822:	68ba      	ldr	r2, [r7, #8]
20002824:	683b      	ldr	r3, [r7, #0]
20002826:	18d2      	adds	r2, r2, r3
20002828:	693b      	ldr	r3, [r7, #16]
2000282a:	429a      	cmp	r2, r3
2000282c:	dcf0      	bgt.n	20002810 <clearRectangle+0x1a>
	for (i = x; i < x + width; i++) {
2000282e:	697b      	ldr	r3, [r7, #20]
20002830:	3301      	adds	r3, #1
20002832:	617b      	str	r3, [r7, #20]
20002834:	68fa      	ldr	r2, [r7, #12]
20002836:	687b      	ldr	r3, [r7, #4]
20002838:	18d2      	adds	r2, r2, r3
2000283a:	697b      	ldr	r3, [r7, #20]
2000283c:	429a      	cmp	r2, r3
2000283e:	dce4      	bgt.n	2000280a <clearRectangle+0x14>
		}
	}
}
20002840:	46c0      	nop			; (mov r8, r8)
20002842:	46bd      	mov	sp, r7
20002844:	b006      	add	sp, #24
20002846:	bd80      	pop	{r7, pc}

20002848 <grayScaleTest>:


void grayScaleTest( void ) {
20002848:	b590      	push	{r4, r7, lr}
2000284a:	b087      	sub	sp, #28
2000284c:	af00      	add	r7, sp, #0
	int x = 10;
2000284e:	230a      	movs	r3, #10
20002850:	617b      	str	r3, [r7, #20]
	int y = 10;
20002852:	230a      	movs	r3, #10
20002854:	613b      	str	r3, [r7, #16]
	int width = 70;
20002856:	2346      	movs	r3, #70	; 0x46
20002858:	60fb      	str	r3, [r7, #12]
	int height = 50;
2000285a:	2332      	movs	r3, #50	; 0x32
2000285c:	60bb      	str	r3, [r7, #8]
	
	int x2 = 50;
2000285e:	2332      	movs	r3, #50	; 0x32
20002860:	607b      	str	r3, [r7, #4]
	
	fillRectangle(x, y, width, height);
20002862:	68bb      	ldr	r3, [r7, #8]
20002864:	68fa      	ldr	r2, [r7, #12]
20002866:	6939      	ldr	r1, [r7, #16]
20002868:	6978      	ldr	r0, [r7, #20]
2000286a:	f7ff ff9b 	bl	200027a4 <fillRectangle>
	
	int i;
	int k = 5;
2000286e:	2305      	movs	r3, #5
20002870:	603b      	str	r3, [r7, #0]
	while(1) {
		clear_backBuffer();
20002872:	f7ff fadf 	bl	20001e34 <clear_backBuffer>
		fillRectangle(x, y, width, height);
20002876:	68bb      	ldr	r3, [r7, #8]
20002878:	68fa      	ldr	r2, [r7, #12]
2000287a:	6939      	ldr	r1, [r7, #16]
2000287c:	6978      	ldr	r0, [r7, #20]
2000287e:	f7ff ff91 	bl	200027a4 <fillRectangle>
		clearRectangle(x+2+2, y+1, width-k, height-k); //outer square
20002882:	697b      	ldr	r3, [r7, #20]
20002884:	1d18      	adds	r0, r3, #4
20002886:	693b      	ldr	r3, [r7, #16]
20002888:	1c59      	adds	r1, r3, #1
2000288a:	68fa      	ldr	r2, [r7, #12]
2000288c:	683b      	ldr	r3, [r7, #0]
2000288e:	1ad4      	subs	r4, r2, r3
20002890:	68ba      	ldr	r2, [r7, #8]
20002892:	683b      	ldr	r3, [r7, #0]
20002894:	1ad3      	subs	r3, r2, r3
20002896:	0022      	movs	r2, r4
20002898:	f7ff ffad 	bl	200027f6 <clearRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
2000289c:	697b      	ldr	r3, [r7, #20]
2000289e:	1c9a      	adds	r2, r3, #2
200028a0:	683b      	ldr	r3, [r7, #0]
200028a2:	18d0      	adds	r0, r2, r3
200028a4:	693b      	ldr	r3, [r7, #16]
200028a6:	1c99      	adds	r1, r3, #2
200028a8:	68fb      	ldr	r3, [r7, #12]
200028aa:	1f1a      	subs	r2, r3, #4
200028ac:	683b      	ldr	r3, [r7, #0]
200028ae:	1ad4      	subs	r4, r2, r3
200028b0:	68bb      	ldr	r3, [r7, #8]
200028b2:	1f1a      	subs	r2, r3, #4
200028b4:	683b      	ldr	r3, [r7, #0]
200028b6:	1ad3      	subs	r3, r2, r3
200028b8:	0022      	movs	r2, r4
200028ba:	f7ff ff9c 	bl	200027f6 <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
200028be:	4b2d      	ldr	r3, [pc, #180]	; (20002974 <grayScaleTest+0x12c>)
200028c0:	0018      	movs	r0, r3
200028c2:	f7ff fe77 	bl	200025b4 <graphic_draw_screen>
		clear_backBuffer();
200028c6:	f7ff fab5 	bl	20001e34 <clear_backBuffer>
		fillRectangle(x, y, width, height);
200028ca:	68bb      	ldr	r3, [r7, #8]
200028cc:	68fa      	ldr	r2, [r7, #12]
200028ce:	6939      	ldr	r1, [r7, #16]
200028d0:	6978      	ldr	r0, [r7, #20]
200028d2:	f7ff ff67 	bl	200027a4 <fillRectangle>
		
		fillRectangle(x+2+2, y+1, width-k, height-k); //outer white square
200028d6:	697b      	ldr	r3, [r7, #20]
200028d8:	1d18      	adds	r0, r3, #4
200028da:	693b      	ldr	r3, [r7, #16]
200028dc:	1c59      	adds	r1, r3, #1
200028de:	68fa      	ldr	r2, [r7, #12]
200028e0:	683b      	ldr	r3, [r7, #0]
200028e2:	1ad4      	subs	r4, r2, r3
200028e4:	68ba      	ldr	r2, [r7, #8]
200028e6:	683b      	ldr	r3, [r7, #0]
200028e8:	1ad3      	subs	r3, r2, r3
200028ea:	0022      	movs	r2, r4
200028ec:	f7ff ff5a 	bl	200027a4 <fillRectangle>
		fillRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
200028f0:	697b      	ldr	r3, [r7, #20]
200028f2:	1c9a      	adds	r2, r3, #2
200028f4:	683b      	ldr	r3, [r7, #0]
200028f6:	18d0      	adds	r0, r2, r3
200028f8:	693b      	ldr	r3, [r7, #16]
200028fa:	1c99      	adds	r1, r3, #2
200028fc:	68fb      	ldr	r3, [r7, #12]
200028fe:	1f1a      	subs	r2, r3, #4
20002900:	683b      	ldr	r3, [r7, #0]
20002902:	1ad4      	subs	r4, r2, r3
20002904:	68bb      	ldr	r3, [r7, #8]
20002906:	1f1a      	subs	r2, r3, #4
20002908:	683b      	ldr	r3, [r7, #0]
2000290a:	1ad3      	subs	r3, r2, r3
2000290c:	0022      	movs	r2, r4
2000290e:	f7ff ff49 	bl	200027a4 <fillRectangle>
		clearRectangle(x+12, y+5, 5, 5);
20002912:	697b      	ldr	r3, [r7, #20]
20002914:	330c      	adds	r3, #12
20002916:	0018      	movs	r0, r3
20002918:	693b      	ldr	r3, [r7, #16]
2000291a:	1d59      	adds	r1, r3, #5
2000291c:	2305      	movs	r3, #5
2000291e:	2205      	movs	r2, #5
20002920:	f7ff ff69 	bl	200027f6 <clearRectangle>
		
		graphic_draw_screen(draw_buffer_black);
20002924:	4b13      	ldr	r3, [pc, #76]	; (20002974 <grayScaleTest+0x12c>)
20002926:	0018      	movs	r0, r3
20002928:	f7ff fe44 	bl	200025b4 <graphic_draw_screen>
		delay_milli(20);
2000292c:	2014      	movs	r0, #20
2000292e:	f7ff fa55 	bl	20001ddc <delay_milli>
		
		clear_backBuffer();
20002932:	f7ff fa7f 	bl	20001e34 <clear_backBuffer>
		fillRectangle(x, y, width, height);
20002936:	68bb      	ldr	r3, [r7, #8]
20002938:	68fa      	ldr	r2, [r7, #12]
2000293a:	6939      	ldr	r1, [r7, #16]
2000293c:	6978      	ldr	r0, [r7, #20]
2000293e:	f7ff ff31 	bl	200027a4 <fillRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
20002942:	697b      	ldr	r3, [r7, #20]
20002944:	1c9a      	adds	r2, r3, #2
20002946:	683b      	ldr	r3, [r7, #0]
20002948:	18d0      	adds	r0, r2, r3
2000294a:	693b      	ldr	r3, [r7, #16]
2000294c:	1c99      	adds	r1, r3, #2
2000294e:	68fb      	ldr	r3, [r7, #12]
20002950:	1f1a      	subs	r2, r3, #4
20002952:	683b      	ldr	r3, [r7, #0]
20002954:	1ad4      	subs	r4, r2, r3
20002956:	68bb      	ldr	r3, [r7, #8]
20002958:	1f1a      	subs	r2, r3, #4
2000295a:	683b      	ldr	r3, [r7, #0]
2000295c:	1ad3      	subs	r3, r2, r3
2000295e:	0022      	movs	r2, r4
20002960:	f7ff ff49 	bl	200027f6 <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
20002964:	4b03      	ldr	r3, [pc, #12]	; (20002974 <grayScaleTest+0x12c>)
20002966:	0018      	movs	r0, r3
20002968:	f7ff fe24 	bl	200025b4 <graphic_draw_screen>
		
		delay_milli(20);
2000296c:	2014      	movs	r0, #20
2000296e:	f7ff fa35 	bl	20001ddc <delay_milli>
		clear_backBuffer();
20002972:	e77e      	b.n	20002872 <grayScaleTest+0x2a>
20002974:	20004d28 	andcs	r4, r0, r8, lsr #26

20002978 <set_up_draw_buffers>:
	}
}

/** Should prepare the different drawing buffers, before the drawing of each frame.*/
void set_up_draw_buffers( void ) {
20002978:	b580      	push	{r7, lr}
2000297a:	b082      	sub	sp, #8
2000297c:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 1024; i++) {
2000297e:	2300      	movs	r3, #0
20002980:	607b      	str	r3, [r7, #4]
20002982:	e065      	b.n	20002a50 <set_up_draw_buffers+0xd8>
		draw_buffer_black[i] = backBuffer[i] & (~backBufferGray[i] & ~backBufferLight[i]); //Had to work a bit on these
20002984:	4a36      	ldr	r2, [pc, #216]	; (20002a60 <set_up_draw_buffers+0xe8>)
20002986:	687b      	ldr	r3, [r7, #4]
20002988:	18d3      	adds	r3, r2, r3
2000298a:	781b      	ldrb	r3, [r3, #0]
2000298c:	b25b      	sxtb	r3, r3
2000298e:	4935      	ldr	r1, [pc, #212]	; (20002a64 <set_up_draw_buffers+0xec>)
20002990:	687a      	ldr	r2, [r7, #4]
20002992:	188a      	adds	r2, r1, r2
20002994:	7811      	ldrb	r1, [r2, #0]
20002996:	4834      	ldr	r0, [pc, #208]	; (20002a68 <set_up_draw_buffers+0xf0>)
20002998:	687a      	ldr	r2, [r7, #4]
2000299a:	1882      	adds	r2, r0, r2
2000299c:	7812      	ldrb	r2, [r2, #0]
2000299e:	430a      	orrs	r2, r1
200029a0:	b2d2      	uxtb	r2, r2
200029a2:	b252      	sxtb	r2, r2
200029a4:	43d2      	mvns	r2, r2
200029a6:	b252      	sxtb	r2, r2
200029a8:	4013      	ands	r3, r2
200029aa:	b25b      	sxtb	r3, r3
200029ac:	b2d9      	uxtb	r1, r3
200029ae:	4a2f      	ldr	r2, [pc, #188]	; (20002a6c <set_up_draw_buffers+0xf4>)
200029b0:	687b      	ldr	r3, [r7, #4]
200029b2:	18d3      	adds	r3, r2, r3
200029b4:	1c0a      	adds	r2, r1, #0
200029b6:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray[i] = (backBuffer[i] | backBufferGray[i]) & ~backBufferLight[i]; //in order to make it possible
200029b8:	4a29      	ldr	r2, [pc, #164]	; (20002a60 <set_up_draw_buffers+0xe8>)
200029ba:	687b      	ldr	r3, [r7, #4]
200029bc:	18d3      	adds	r3, r2, r3
200029be:	781a      	ldrb	r2, [r3, #0]
200029c0:	4928      	ldr	r1, [pc, #160]	; (20002a64 <set_up_draw_buffers+0xec>)
200029c2:	687b      	ldr	r3, [r7, #4]
200029c4:	18cb      	adds	r3, r1, r3
200029c6:	781b      	ldrb	r3, [r3, #0]
200029c8:	4313      	orrs	r3, r2
200029ca:	b2db      	uxtb	r3, r3
200029cc:	b25b      	sxtb	r3, r3
200029ce:	4926      	ldr	r1, [pc, #152]	; (20002a68 <set_up_draw_buffers+0xf0>)
200029d0:	687a      	ldr	r2, [r7, #4]
200029d2:	188a      	adds	r2, r1, r2
200029d4:	7812      	ldrb	r2, [r2, #0]
200029d6:	b252      	sxtb	r2, r2
200029d8:	43d2      	mvns	r2, r2
200029da:	b252      	sxtb	r2, r2
200029dc:	4013      	ands	r3, r2
200029de:	b25b      	sxtb	r3, r3
200029e0:	b2d9      	uxtb	r1, r3
200029e2:	4a23      	ldr	r2, [pc, #140]	; (20002a70 <set_up_draw_buffers+0xf8>)
200029e4:	687b      	ldr	r3, [r7, #4]
200029e6:	18d3      	adds	r3, r2, r3
200029e8:	1c0a      	adds	r2, r1, #0
200029ea:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_light[i] = (backBuffer[i] | backBufferLight[i]) & ~backBufferGray[i]; //to show a lighter sprite
200029ec:	4a1c      	ldr	r2, [pc, #112]	; (20002a60 <set_up_draw_buffers+0xe8>)
200029ee:	687b      	ldr	r3, [r7, #4]
200029f0:	18d3      	adds	r3, r2, r3
200029f2:	781a      	ldrb	r2, [r3, #0]
200029f4:	491c      	ldr	r1, [pc, #112]	; (20002a68 <set_up_draw_buffers+0xf0>)
200029f6:	687b      	ldr	r3, [r7, #4]
200029f8:	18cb      	adds	r3, r1, r3
200029fa:	781b      	ldrb	r3, [r3, #0]
200029fc:	4313      	orrs	r3, r2
200029fe:	b2db      	uxtb	r3, r3
20002a00:	b25b      	sxtb	r3, r3
20002a02:	4918      	ldr	r1, [pc, #96]	; (20002a64 <set_up_draw_buffers+0xec>)
20002a04:	687a      	ldr	r2, [r7, #4]
20002a06:	188a      	adds	r2, r1, r2
20002a08:	7812      	ldrb	r2, [r2, #0]
20002a0a:	b252      	sxtb	r2, r2
20002a0c:	43d2      	mvns	r2, r2
20002a0e:	b252      	sxtb	r2, r2
20002a10:	4013      	ands	r3, r2
20002a12:	b25b      	sxtb	r3, r3
20002a14:	b2d9      	uxtb	r1, r3
20002a16:	4a17      	ldr	r2, [pc, #92]	; (20002a74 <set_up_draw_buffers+0xfc>)
20002a18:	687b      	ldr	r3, [r7, #4]
20002a1a:	18d3      	adds	r3, r2, r3
20002a1c:	1c0a      	adds	r2, r1, #0
20002a1e:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray_light[i] = backBuffer[i] | backBufferGray[i] | backBufferLight[i]; //on top of a darker one.
20002a20:	4a0f      	ldr	r2, [pc, #60]	; (20002a60 <set_up_draw_buffers+0xe8>)
20002a22:	687b      	ldr	r3, [r7, #4]
20002a24:	18d3      	adds	r3, r2, r3
20002a26:	781a      	ldrb	r2, [r3, #0]
20002a28:	490e      	ldr	r1, [pc, #56]	; (20002a64 <set_up_draw_buffers+0xec>)
20002a2a:	687b      	ldr	r3, [r7, #4]
20002a2c:	18cb      	adds	r3, r1, r3
20002a2e:	781b      	ldrb	r3, [r3, #0]
20002a30:	4313      	orrs	r3, r2
20002a32:	b2da      	uxtb	r2, r3
20002a34:	490c      	ldr	r1, [pc, #48]	; (20002a68 <set_up_draw_buffers+0xf0>)
20002a36:	687b      	ldr	r3, [r7, #4]
20002a38:	18cb      	adds	r3, r1, r3
20002a3a:	781b      	ldrb	r3, [r3, #0]
20002a3c:	4313      	orrs	r3, r2
20002a3e:	b2d9      	uxtb	r1, r3
20002a40:	4a0d      	ldr	r2, [pc, #52]	; (20002a78 <set_up_draw_buffers+0x100>)
20002a42:	687b      	ldr	r3, [r7, #4]
20002a44:	18d3      	adds	r3, r2, r3
20002a46:	1c0a      	adds	r2, r1, #0
20002a48:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 1024; i++) {
20002a4a:	687b      	ldr	r3, [r7, #4]
20002a4c:	3301      	adds	r3, #1
20002a4e:	607b      	str	r3, [r7, #4]
20002a50:	687b      	ldr	r3, [r7, #4]
20002a52:	4a0a      	ldr	r2, [pc, #40]	; (20002a7c <set_up_draw_buffers+0x104>)
20002a54:	4293      	cmp	r3, r2
20002a56:	dd95      	ble.n	20002984 <set_up_draw_buffers+0xc>
	}
}
20002a58:	46c0      	nop			; (mov r8, r8)
20002a5a:	46bd      	mov	sp, r7
20002a5c:	b002      	add	sp, #8
20002a5e:	bd80      	pop	{r7, pc}
20002a60:	20004528 	andcs	r4, r0, r8, lsr #10
20002a64:	20003d28 	andcs	r3, r0, r8, lsr #26
20002a68:	20005528 	andcs	r5, r0, r8, lsr #10
20002a6c:	20004d28 	andcs	r4, r0, r8, lsr #26
20002a70:	20004128 	andcs	r4, r0, r8, lsr #2
20002a74:	20004928 	andcs	r4, r0, r8, lsr #18
20002a78:	20005128 	andcs	r5, r0, r8, lsr #2
20002a7c:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20002a80 <draw_game_object>:

void draw_game_object(GameObject *gObj) {
20002a80:	b580      	push	{r7, lr}
20002a82:	b086      	sub	sp, #24
20002a84:	af02      	add	r7, sp, #8
20002a86:	6078      	str	r0, [r7, #4]
	int frame = gObj->current_frame;
20002a88:	687b      	ldr	r3, [r7, #4]
20002a8a:	695b      	ldr	r3, [r3, #20]
20002a8c:	60fb      	str	r3, [r7, #12]
	draw_sprite(gObj->images[frame].blackImage, gObj->xPos, gObj->yPos, 1, 3);
20002a8e:	687b      	ldr	r3, [r7, #4]
20002a90:	6819      	ldr	r1, [r3, #0]
20002a92:	68fa      	ldr	r2, [r7, #12]
20002a94:	0013      	movs	r3, r2
20002a96:	005b      	lsls	r3, r3, #1
20002a98:	189b      	adds	r3, r3, r2
20002a9a:	009b      	lsls	r3, r3, #2
20002a9c:	18cb      	adds	r3, r1, r3
20002a9e:	6818      	ldr	r0, [r3, #0]
20002aa0:	687b      	ldr	r3, [r7, #4]
20002aa2:	6859      	ldr	r1, [r3, #4]
20002aa4:	687b      	ldr	r3, [r7, #4]
20002aa6:	689a      	ldr	r2, [r3, #8]
20002aa8:	2303      	movs	r3, #3
20002aaa:	9300      	str	r3, [sp, #0]
20002aac:	2301      	movs	r3, #1
20002aae:	f7ff fdec 	bl	2000268a <draw_sprite>
	draw_sprite(gObj->images[frame].grayImage, gObj->xPos, gObj->yPos, 1, 2);
20002ab2:	687b      	ldr	r3, [r7, #4]
20002ab4:	6819      	ldr	r1, [r3, #0]
20002ab6:	68fa      	ldr	r2, [r7, #12]
20002ab8:	0013      	movs	r3, r2
20002aba:	005b      	lsls	r3, r3, #1
20002abc:	189b      	adds	r3, r3, r2
20002abe:	009b      	lsls	r3, r3, #2
20002ac0:	18cb      	adds	r3, r1, r3
20002ac2:	6858      	ldr	r0, [r3, #4]
20002ac4:	687b      	ldr	r3, [r7, #4]
20002ac6:	6859      	ldr	r1, [r3, #4]
20002ac8:	687b      	ldr	r3, [r7, #4]
20002aca:	689a      	ldr	r2, [r3, #8]
20002acc:	2302      	movs	r3, #2
20002ace:	9300      	str	r3, [sp, #0]
20002ad0:	2301      	movs	r3, #1
20002ad2:	f7ff fdda 	bl	2000268a <draw_sprite>
	draw_sprite(gObj->images[frame].lightImage, gObj->xPos, gObj->yPos, 1, 1);
20002ad6:	687b      	ldr	r3, [r7, #4]
20002ad8:	6819      	ldr	r1, [r3, #0]
20002ada:	68fa      	ldr	r2, [r7, #12]
20002adc:	0013      	movs	r3, r2
20002ade:	005b      	lsls	r3, r3, #1
20002ae0:	189b      	adds	r3, r3, r2
20002ae2:	009b      	lsls	r3, r3, #2
20002ae4:	18cb      	adds	r3, r1, r3
20002ae6:	6898      	ldr	r0, [r3, #8]
20002ae8:	687b      	ldr	r3, [r7, #4]
20002aea:	6859      	ldr	r1, [r3, #4]
20002aec:	687b      	ldr	r3, [r7, #4]
20002aee:	689a      	ldr	r2, [r3, #8]
20002af0:	2301      	movs	r3, #1
20002af2:	9300      	str	r3, [sp, #0]
20002af4:	2301      	movs	r3, #1
20002af6:	f7ff fdc8 	bl	2000268a <draw_sprite>
}
20002afa:	46c0      	nop			; (mov r8, r8)
20002afc:	46bd      	mov	sp, r7
20002afe:	b004      	add	sp, #16
20002b00:	bd80      	pop	{r7, pc}

20002b02 <show_frame>:


void show_frame(int frame_length) {
20002b02:	b580      	push	{r7, lr}
20002b04:	b082      	sub	sp, #8
20002b06:	af00      	add	r7, sp, #0
20002b08:	6078      	str	r0, [r7, #4]
	set_up_draw_buffers();
20002b0a:	f7ff ff35 	bl	20002978 <set_up_draw_buffers>
	
	while(frame_length--) {
20002b0e:	e01b      	b.n	20002b48 <show_frame+0x46>
		graphic_draw_screen(draw_buffer_black_gray_light);
20002b10:	4b13      	ldr	r3, [pc, #76]	; (20002b60 <show_frame+0x5e>)
20002b12:	0018      	movs	r0, r3
20002b14:	f7ff fd4e 	bl	200025b4 <graphic_draw_screen>
		delay_milli(1);
20002b18:	2001      	movs	r0, #1
20002b1a:	f7ff f95f 	bl	20001ddc <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
20002b1e:	4b11      	ldr	r3, [pc, #68]	; (20002b64 <show_frame+0x62>)
20002b20:	0018      	movs	r0, r3
20002b22:	f7ff fd47 	bl	200025b4 <graphic_draw_screen>
		delay_milli(1);
20002b26:	2001      	movs	r0, #1
20002b28:	f7ff f958 	bl	20001ddc <delay_milli>
		
		graphic_draw_screen(draw_buffer_black_gray);
20002b2c:	4b0e      	ldr	r3, [pc, #56]	; (20002b68 <show_frame+0x66>)
20002b2e:	0018      	movs	r0, r3
20002b30:	f7ff fd40 	bl	200025b4 <graphic_draw_screen>
		delay_milli(1);
20002b34:	2001      	movs	r0, #1
20002b36:	f7ff f951 	bl	20001ddc <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
20002b3a:	4b0a      	ldr	r3, [pc, #40]	; (20002b64 <show_frame+0x62>)
20002b3c:	0018      	movs	r0, r3
20002b3e:	f7ff fd39 	bl	200025b4 <graphic_draw_screen>
		delay_milli(1);
20002b42:	2001      	movs	r0, #1
20002b44:	f7ff f94a 	bl	20001ddc <delay_milli>
	while(frame_length--) {
20002b48:	687b      	ldr	r3, [r7, #4]
20002b4a:	1e5a      	subs	r2, r3, #1
20002b4c:	607a      	str	r2, [r7, #4]
20002b4e:	2b00      	cmp	r3, #0
20002b50:	d1de      	bne.n	20002b10 <show_frame+0xe>
	}
	
	clear_all_backBuffers();	//Maybe we could be more effective by only clearing the necessary stuff,
20002b52:	f7ff f97b 	bl	20001e4c <clear_all_backBuffers>
								//but let's keep it like this if it works.
20002b56:	46c0      	nop			; (mov r8, r8)
20002b58:	46bd      	mov	sp, r7
20002b5a:	b002      	add	sp, #8
20002b5c:	bd80      	pop	{r7, pc}
20002b5e:	46c0      	nop			; (mov r8, r8)
20002b60:	20005128 	andcs	r5, r0, r8, lsr #2
20002b64:	20004d28 	andcs	r4, r0, r8, lsr #26
20002b68:	20004128 	andcs	r4, r0, r8, lsr #2

20002b6c <load_image>:
#include "image.h"

void load_image( Image *image, sprite *blackImage, sprite *grayImage, sprite *lightImage ) {
20002b6c:	b580      	push	{r7, lr}
20002b6e:	b084      	sub	sp, #16
20002b70:	af00      	add	r7, sp, #0
20002b72:	60f8      	str	r0, [r7, #12]
20002b74:	60b9      	str	r1, [r7, #8]
20002b76:	607a      	str	r2, [r7, #4]
20002b78:	603b      	str	r3, [r7, #0]
	image->blackImage = blackImage;
20002b7a:	68fb      	ldr	r3, [r7, #12]
20002b7c:	68ba      	ldr	r2, [r7, #8]
20002b7e:	601a      	str	r2, [r3, #0]
	image->grayImage = grayImage;
20002b80:	68fb      	ldr	r3, [r7, #12]
20002b82:	687a      	ldr	r2, [r7, #4]
20002b84:	605a      	str	r2, [r3, #4]
	image->lightImage = lightImage;
20002b86:	68fb      	ldr	r3, [r7, #12]
20002b88:	683a      	ldr	r2, [r7, #0]
20002b8a:	609a      	str	r2, [r3, #8]
}
20002b8c:	46c0      	nop			; (mov r8, r8)
20002b8e:	46bd      	mov	sp, r7
20002b90:	b004      	add	sp, #16
20002b92:	bd80      	pop	{r7, pc}

20002b94 <load_sprite>:
#include "sprite.h"

void load_sprite(sprite* s, unsigned char* data, int width, int height)
{
20002b94:	b580      	push	{r7, lr}
20002b96:	b084      	sub	sp, #16
20002b98:	af00      	add	r7, sp, #0
20002b9a:	60f8      	str	r0, [r7, #12]
20002b9c:	60b9      	str	r1, [r7, #8]
20002b9e:	607a      	str	r2, [r7, #4]
20002ba0:	603b      	str	r3, [r7, #0]
	s->width = width;
20002ba2:	687a      	ldr	r2, [r7, #4]
20002ba4:	68fb      	ldr	r3, [r7, #12]
20002ba6:	601a      	str	r2, [r3, #0]
	s->height = height;
20002ba8:	683a      	ldr	r2, [r7, #0]
20002baa:	68fb      	ldr	r3, [r7, #12]
20002bac:	605a      	str	r2, [r3, #4]
	s->data = data;
20002bae:	68fb      	ldr	r3, [r7, #12]
20002bb0:	68ba      	ldr	r2, [r7, #8]
20002bb2:	609a      	str	r2, [r3, #8]
}
20002bb4:	46c0      	nop			; (mov r8, r8)
20002bb6:	46bd      	mov	sp, r7
20002bb8:	b004      	add	sp, #16
20002bba:	bd80      	pop	{r7, pc}

20002bbc <set_up_DIL>:
#include "gpio.h"

/** Sets up PE0-7 as inports and PE8-15 as outports. */
void set_up_DIL( void ) {
20002bbc:	b580      	push	{r7, lr}
20002bbe:	af00      	add	r7, sp, #0
	GPIO_D.Moder = 0x55550000;
20002bc0:	4b02      	ldr	r3, [pc, #8]	; (20002bcc <set_up_DIL+0x10>)
20002bc2:	4a03      	ldr	r2, [pc, #12]	; (20002bd0 <set_up_DIL+0x14>)
20002bc4:	601a      	str	r2, [r3, #0]
}
20002bc6:	46c0      	nop			; (mov r8, r8)
20002bc8:	46bd      	mov	sp, r7
20002bca:	bd80      	pop	{r7, pc}
20002bcc:	40020c00 	andmi	r0, r2, r0, lsl #24
20002bd0:	55550000 	ldrbpl	r0, [r5, #-0]

20002bd4 <read_DIL>:

char read_DIL( void ) {
20002bd4:	b580      	push	{r7, lr}
20002bd6:	af00      	add	r7, sp, #0
	GPIO_D.odrHigh = GPIO_D.idrLow; //Show on bargraph
20002bd8:	4b05      	ldr	r3, [pc, #20]	; (20002bf0 <read_DIL+0x1c>)
20002bda:	4a05      	ldr	r2, [pc, #20]	; (20002bf0 <read_DIL+0x1c>)
20002bdc:	7c12      	ldrb	r2, [r2, #16]
20002bde:	b2d2      	uxtb	r2, r2
20002be0:	755a      	strb	r2, [r3, #21]
	return GPIO_D.idrLow;
20002be2:	4b03      	ldr	r3, [pc, #12]	; (20002bf0 <read_DIL+0x1c>)
20002be4:	7c1b      	ldrb	r3, [r3, #16]
20002be6:	b2db      	uxtb	r3, r3
}
20002be8:	0018      	movs	r0, r3
20002bea:	46bd      	mov	sp, r7
20002bec:	bd80      	pop	{r7, pc}
20002bee:	46c0      	nop			; (mov r8, r8)
20002bf0:	40020c00 	andmi	r0, r2, r0, lsl #24

20002bf4 <read_DIL_single>:


int read_DIL_single( int bit ) {
20002bf4:	b590      	push	{r4, r7, lr}
20002bf6:	b085      	sub	sp, #20
20002bf8:	af00      	add	r7, sp, #0
20002bfa:	6078      	str	r0, [r7, #4]
	char DIL = read_DIL();
20002bfc:	230f      	movs	r3, #15
20002bfe:	18fc      	adds	r4, r7, r3
20002c00:	f7ff ffe8 	bl	20002bd4 <read_DIL>
20002c04:	0003      	movs	r3, r0
20002c06:	7023      	strb	r3, [r4, #0]
	if (DIL & (1<<bit)) {
20002c08:	230f      	movs	r3, #15
20002c0a:	18fb      	adds	r3, r7, r3
20002c0c:	781a      	ldrb	r2, [r3, #0]
20002c0e:	687b      	ldr	r3, [r7, #4]
20002c10:	411a      	asrs	r2, r3
20002c12:	0013      	movs	r3, r2
20002c14:	2201      	movs	r2, #1
20002c16:	4013      	ands	r3, r2
20002c18:	d001      	beq.n	20002c1e <read_DIL_single+0x2a>
		return 1;
20002c1a:	2301      	movs	r3, #1
20002c1c:	e000      	b.n	20002c20 <read_DIL_single+0x2c>
	} else {
		return 0;
20002c1e:	2300      	movs	r3, #0
	}
20002c20:	0018      	movs	r0, r3
20002c22:	46bd      	mov	sp, r7
20002c24:	b005      	add	sp, #20
20002c26:	bd90      	pop	{r4, r7, pc}

20002c28 <ascii_ctrl_bit_set>:
void ascii_write_data(unsigned char data);
unsigned char ascii_read_status(void);
unsigned char ascii_read_data(void);


void ascii_ctrl_bit_set(unsigned char x){
20002c28:	b580      	push	{r7, lr}
20002c2a:	b084      	sub	sp, #16
20002c2c:	af00      	add	r7, sp, #0
20002c2e:	0002      	movs	r2, r0
20002c30:	1dfb      	adds	r3, r7, #7
20002c32:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och ettstÃƒÂ¤ll de bitar som ÃƒÂ¤r 1 i x
	unsigned char c;
	c = *portOdrLow;
20002c34:	4a0c      	ldr	r2, [pc, #48]	; (20002c68 <ascii_ctrl_bit_set+0x40>)
20002c36:	230f      	movs	r3, #15
20002c38:	18fb      	adds	r3, r7, r3
20002c3a:	7812      	ldrb	r2, [r2, #0]
20002c3c:	701a      	strb	r2, [r3, #0]
	c |= (B_SELECT | x);
20002c3e:	1dfa      	adds	r2, r7, #7
20002c40:	230f      	movs	r3, #15
20002c42:	18fb      	adds	r3, r7, r3
20002c44:	7812      	ldrb	r2, [r2, #0]
20002c46:	781b      	ldrb	r3, [r3, #0]
20002c48:	4313      	orrs	r3, r2
20002c4a:	b2da      	uxtb	r2, r3
20002c4c:	230f      	movs	r3, #15
20002c4e:	18fb      	adds	r3, r7, r3
20002c50:	2104      	movs	r1, #4
20002c52:	430a      	orrs	r2, r1
20002c54:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20002c56:	4a04      	ldr	r2, [pc, #16]	; (20002c68 <ascii_ctrl_bit_set+0x40>)
20002c58:	230f      	movs	r3, #15
20002c5a:	18fb      	adds	r3, r7, r3
20002c5c:	781b      	ldrb	r3, [r3, #0]
20002c5e:	7013      	strb	r3, [r2, #0]
}
20002c60:	46c0      	nop			; (mov r8, r8)
20002c62:	46bd      	mov	sp, r7
20002c64:	b004      	add	sp, #16
20002c66:	bd80      	pop	{r7, pc}
20002c68:	40021014 	andmi	r1, r2, r4, lsl r0

20002c6c <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
20002c6c:	b580      	push	{r7, lr}
20002c6e:	b084      	sub	sp, #16
20002c70:	af00      	add	r7, sp, #0
20002c72:	0002      	movs	r2, r0
20002c74:	1dfb      	adds	r3, r7, #7
20002c76:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och nollstÃ¤ll de bitar som Ã¤r 1 i x
	unsigned char c;
	c = *portOdrLow;
20002c78:	4a0f      	ldr	r2, [pc, #60]	; (20002cb8 <ascii_ctrl_bit_clear+0x4c>)
20002c7a:	230f      	movs	r3, #15
20002c7c:	18fb      	adds	r3, r7, r3
20002c7e:	7812      	ldrb	r2, [r2, #0]
20002c80:	701a      	strb	r2, [r3, #0]
	c = (B_SELECT | c & ~x);
20002c82:	1dfb      	adds	r3, r7, #7
20002c84:	781b      	ldrb	r3, [r3, #0]
20002c86:	b25b      	sxtb	r3, r3
20002c88:	43db      	mvns	r3, r3
20002c8a:	b25b      	sxtb	r3, r3
20002c8c:	220f      	movs	r2, #15
20002c8e:	18ba      	adds	r2, r7, r2
20002c90:	7812      	ldrb	r2, [r2, #0]
20002c92:	b252      	sxtb	r2, r2
20002c94:	4013      	ands	r3, r2
20002c96:	b25b      	sxtb	r3, r3
20002c98:	2204      	movs	r2, #4
20002c9a:	4313      	orrs	r3, r2
20002c9c:	b25a      	sxtb	r2, r3
20002c9e:	230f      	movs	r3, #15
20002ca0:	18fb      	adds	r3, r7, r3
20002ca2:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20002ca4:	4a04      	ldr	r2, [pc, #16]	; (20002cb8 <ascii_ctrl_bit_clear+0x4c>)
20002ca6:	230f      	movs	r3, #15
20002ca8:	18fb      	adds	r3, r7, r3
20002caa:	781b      	ldrb	r3, [r3, #0]
20002cac:	7013      	strb	r3, [r2, #0]
}
20002cae:	46c0      	nop			; (mov r8, r8)
20002cb0:	46bd      	mov	sp, r7
20002cb2:	b004      	add	sp, #16
20002cb4:	bd80      	pop	{r7, pc}
20002cb6:	46c0      	nop			; (mov r8, r8)
20002cb8:	40021014 	andmi	r1, r2, r4, lsl r0

20002cbc <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20002cbc:	b580      	push	{r7, lr}
20002cbe:	b082      	sub	sp, #8
20002cc0:	af00      	add	r7, sp, #0
20002cc2:	0002      	movs	r2, r0
20002cc4:	1dfb      	adds	r3, r7, #7
20002cc6:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20002cc8:	2001      	movs	r0, #1
20002cca:	f7ff ffcf 	bl	20002c6c <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20002cce:	2002      	movs	r0, #2
20002cd0:	f7ff ffcc 	bl	20002c6c <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20002cd4:	1dfb      	adds	r3, r7, #7
20002cd6:	781b      	ldrb	r3, [r3, #0]
20002cd8:	0018      	movs	r0, r3
20002cda:	f000 f86d 	bl	20002db8 <ascii_write_controller>
}
20002cde:	46c0      	nop			; (mov r8, r8)
20002ce0:	46bd      	mov	sp, r7
20002ce2:	b002      	add	sp, #8
20002ce4:	bd80      	pop	{r7, pc}

20002ce6 <ascii_write_data>:

void ascii_write_data(unsigned char data){
20002ce6:	b580      	push	{r7, lr}
20002ce8:	b082      	sub	sp, #8
20002cea:	af00      	add	r7, sp, #0
20002cec:	0002      	movs	r2, r0
20002cee:	1dfb      	adds	r3, r7, #7
20002cf0:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20002cf2:	2001      	movs	r0, #1
20002cf4:	f7ff ff98 	bl	20002c28 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20002cf8:	2002      	movs	r0, #2
20002cfa:	f7ff ffb7 	bl	20002c6c <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20002cfe:	1dfb      	adds	r3, r7, #7
20002d00:	781b      	ldrb	r3, [r3, #0]
20002d02:	0018      	movs	r0, r3
20002d04:	f000 f858 	bl	20002db8 <ascii_write_controller>
}
20002d08:	46c0      	nop			; (mov r8, r8)
20002d0a:	46bd      	mov	sp, r7
20002d0c:	b002      	add	sp, #8
20002d0e:	bd80      	pop	{r7, pc}

20002d10 <ascii_read_status>:

unsigned char ascii_read_status(void){
20002d10:	b590      	push	{r4, r7, lr}
20002d12:	b083      	sub	sp, #12
20002d14:	af00      	add	r7, sp, #0
	//sÃƒÂ¤tt Port E bit15-8 som ingÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20002d16:	4b11      	ldr	r3, [pc, #68]	; (20002d5c <ascii_read_status+0x4c>)
20002d18:	4a10      	ldr	r2, [pc, #64]	; (20002d5c <ascii_read_status+0x4c>)
20002d1a:	6812      	ldr	r2, [r2, #0]
20002d1c:	0412      	lsls	r2, r2, #16
20002d1e:	0c12      	lsrs	r2, r2, #16
20002d20:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20002d22:	2001      	movs	r0, #1
20002d24:	f7ff ffa2 	bl	20002c6c <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
20002d28:	2002      	movs	r0, #2
20002d2a:	f7ff ff7d 	bl	20002c28 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20002d2e:	1dfc      	adds	r4, r7, #7
20002d30:	f000 f85a 	bl	20002de8 <ascii_read_controller>
20002d34:	0003      	movs	r3, r0
20002d36:	7023      	strb	r3, [r4, #0]
	//sÃƒÂ¤tt Port E bit15-8 som utgÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20002d38:	4b08      	ldr	r3, [pc, #32]	; (20002d5c <ascii_read_status+0x4c>)
20002d3a:	4a08      	ldr	r2, [pc, #32]	; (20002d5c <ascii_read_status+0x4c>)
20002d3c:	6812      	ldr	r2, [r2, #0]
20002d3e:	0412      	lsls	r2, r2, #16
20002d40:	0c12      	lsrs	r2, r2, #16
20002d42:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
20002d44:	4b05      	ldr	r3, [pc, #20]	; (20002d5c <ascii_read_status+0x4c>)
20002d46:	4a05      	ldr	r2, [pc, #20]	; (20002d5c <ascii_read_status+0x4c>)
20002d48:	6812      	ldr	r2, [r2, #0]
20002d4a:	4905      	ldr	r1, [pc, #20]	; (20002d60 <ascii_read_status+0x50>)
20002d4c:	430a      	orrs	r2, r1
20002d4e:	601a      	str	r2, [r3, #0]
	return rv;
20002d50:	1dfb      	adds	r3, r7, #7
20002d52:	781b      	ldrb	r3, [r3, #0]
}
20002d54:	0018      	movs	r0, r3
20002d56:	46bd      	mov	sp, r7
20002d58:	b003      	add	sp, #12
20002d5a:	bd90      	pop	{r4, r7, pc}
20002d5c:	40021000 	andmi	r1, r2, r0
20002d60:	55550000 	ldrbpl	r0, [r5, #-0]

20002d64 <ascii_read_data>:

unsigned char ascii_read_data(void){
20002d64:	b590      	push	{r4, r7, lr}
20002d66:	b083      	sub	sp, #12
20002d68:	af00      	add	r7, sp, #0
	//sÃƒÂ¤tt Port E bit15-8 som ingÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20002d6a:	4b11      	ldr	r3, [pc, #68]	; (20002db0 <ascii_read_data+0x4c>)
20002d6c:	4a10      	ldr	r2, [pc, #64]	; (20002db0 <ascii_read_data+0x4c>)
20002d6e:	6812      	ldr	r2, [r2, #0]
20002d70:	0412      	lsls	r2, r2, #16
20002d72:	0c12      	lsrs	r2, r2, #16
20002d74:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20002d76:	2001      	movs	r0, #1
20002d78:	f7ff ff56 	bl	20002c28 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20002d7c:	2002      	movs	r0, #2
20002d7e:	f7ff ff53 	bl	20002c28 <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20002d82:	1dfc      	adds	r4, r7, #7
20002d84:	f000 f830 	bl	20002de8 <ascii_read_controller>
20002d88:	0003      	movs	r3, r0
20002d8a:	7023      	strb	r3, [r4, #0]
	//sÃƒÂ¤tt Port E bit15-8 som utgÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20002d8c:	4b08      	ldr	r3, [pc, #32]	; (20002db0 <ascii_read_data+0x4c>)
20002d8e:	4a08      	ldr	r2, [pc, #32]	; (20002db0 <ascii_read_data+0x4c>)
20002d90:	6812      	ldr	r2, [r2, #0]
20002d92:	0412      	lsls	r2, r2, #16
20002d94:	0c12      	lsrs	r2, r2, #16
20002d96:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
20002d98:	4b05      	ldr	r3, [pc, #20]	; (20002db0 <ascii_read_data+0x4c>)
20002d9a:	4a05      	ldr	r2, [pc, #20]	; (20002db0 <ascii_read_data+0x4c>)
20002d9c:	6812      	ldr	r2, [r2, #0]
20002d9e:	4905      	ldr	r1, [pc, #20]	; (20002db4 <ascii_read_data+0x50>)
20002da0:	430a      	orrs	r2, r1
20002da2:	601a      	str	r2, [r3, #0]
	return rv;
20002da4:	1dfb      	adds	r3, r7, #7
20002da6:	781b      	ldrb	r3, [r3, #0]
}
20002da8:	0018      	movs	r0, r3
20002daa:	46bd      	mov	sp, r7
20002dac:	b003      	add	sp, #12
20002dae:	bd90      	pop	{r4, r7, pc}
20002db0:	40021000 	andmi	r1, r2, r0
20002db4:	55550000 	ldrbpl	r0, [r5, #-0]

20002db8 <ascii_write_controller>:

void ascii_write_controller(unsigned char c){
20002db8:	b580      	push	{r7, lr}
20002dba:	b082      	sub	sp, #8
20002dbc:	af00      	add	r7, sp, #0
20002dbe:	0002      	movs	r2, r0
20002dc0:	1dfb      	adds	r3, r7, #7
20002dc2:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
20002dc4:	2040      	movs	r0, #64	; 0x40
20002dc6:	f7ff ff2f 	bl	20002c28 <ascii_ctrl_bit_set>
	*portOdrHigh = c;
20002dca:	4a06      	ldr	r2, [pc, #24]	; (20002de4 <ascii_write_controller+0x2c>)
20002dcc:	1dfb      	adds	r3, r7, #7
20002dce:	781b      	ldrb	r3, [r3, #0]
20002dd0:	7013      	strb	r3, [r2, #0]
	delay_250ns();
20002dd2:	f7fe ffa9 	bl	20001d28 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
20002dd6:	2040      	movs	r0, #64	; 0x40
20002dd8:	f7ff ff48 	bl	20002c6c <ascii_ctrl_bit_clear>
}
20002ddc:	46c0      	nop			; (mov r8, r8)
20002dde:	46bd      	mov	sp, r7
20002de0:	b002      	add	sp, #8
20002de2:	bd80      	pop	{r7, pc}
20002de4:	40021015 	andmi	r1, r2, r5, lsl r0

20002de8 <ascii_read_controller>:

unsigned char ascii_read_controller(void){
20002de8:	b580      	push	{r7, lr}
20002dea:	b082      	sub	sp, #8
20002dec:	af00      	add	r7, sp, #0
	unsigned char c;
	ascii_ctrl_bit_set(B_E);
20002dee:	2040      	movs	r0, #64	; 0x40
20002df0:	f7ff ff1a 	bl	20002c28 <ascii_ctrl_bit_set>
	delay_250ns();
20002df4:	f7fe ff98 	bl	20001d28 <delay_250ns>
	delay_250ns();
20002df8:	f7fe ff96 	bl	20001d28 <delay_250ns>
	c = *portIdrHigh;
20002dfc:	4a06      	ldr	r2, [pc, #24]	; (20002e18 <ascii_read_controller+0x30>)
20002dfe:	1dfb      	adds	r3, r7, #7
20002e00:	7812      	ldrb	r2, [r2, #0]
20002e02:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20002e04:	2040      	movs	r0, #64	; 0x40
20002e06:	f7ff ff31 	bl	20002c6c <ascii_ctrl_bit_clear>
	return c;
20002e0a:	1dfb      	adds	r3, r7, #7
20002e0c:	781b      	ldrb	r3, [r3, #0]
}
20002e0e:	0018      	movs	r0, r3
20002e10:	46bd      	mov	sp, r7
20002e12:	b002      	add	sp, #8
20002e14:	bd80      	pop	{r7, pc}
20002e16:	46c0      	nop			; (mov r8, r8)
20002e18:	40021011 	andmi	r1, r2, r1, lsl r0

20002e1c <ascii_write_char>:

void ascii_write_char(unsigned char c){
20002e1c:	b580      	push	{r7, lr}
20002e1e:	b082      	sub	sp, #8
20002e20:	af00      	add	r7, sp, #0
20002e22:	0002      	movs	r2, r0
20002e24:	1dfb      	adds	r3, r7, #7
20002e26:	701a      	strb	r2, [r3, #0]
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20002e28:	46c0      	nop			; (mov r8, r8)
20002e2a:	f7ff ff71 	bl	20002d10 <ascii_read_status>
20002e2e:	0003      	movs	r3, r0
20002e30:	001a      	movs	r2, r3
20002e32:	2380      	movs	r3, #128	; 0x80
20002e34:	4013      	ands	r3, r2
20002e36:	2b80      	cmp	r3, #128	; 0x80
20002e38:	d0f7      	beq.n	20002e2a <ascii_write_char+0xe>
		delay_micro(8); //latenstid
20002e3a:	2008      	movs	r0, #8
20002e3c:	f7fe ffb8 	bl	20001db0 <delay_micro>
		ascii_write_data(c);
20002e40:	1dfb      	adds	r3, r7, #7
20002e42:	781b      	ldrb	r3, [r3, #0]
20002e44:	0018      	movs	r0, r3
20002e46:	f7ff ff4e 	bl	20002ce6 <ascii_write_data>
		delay_micro(50); //istÃƒÂ¤llet fÃƒÂ¶r 43us
20002e4a:	2032      	movs	r0, #50	; 0x32
20002e4c:	f7fe ffb0 	bl	20001db0 <delay_micro>
}
20002e50:	46c0      	nop			; (mov r8, r8)
20002e52:	46bd      	mov	sp, r7
20002e54:	b002      	add	sp, #8
20002e56:	bd80      	pop	{r7, pc}

20002e58 <ascii_goToXY>:

void ascii_goToXY(unsigned char row, unsigned char column){
20002e58:	b580      	push	{r7, lr}
20002e5a:	b084      	sub	sp, #16
20002e5c:	af00      	add	r7, sp, #0
20002e5e:	0002      	movs	r2, r0
20002e60:	1dfb      	adds	r3, r7, #7
20002e62:	701a      	strb	r2, [r3, #0]
20002e64:	1dbb      	adds	r3, r7, #6
20002e66:	1c0a      	adds	r2, r1, #0
20002e68:	701a      	strb	r2, [r3, #0]
	unsigned char address = row-1;
20002e6a:	230f      	movs	r3, #15
20002e6c:	18fb      	adds	r3, r7, r3
20002e6e:	1dfa      	adds	r2, r7, #7
20002e70:	7812      	ldrb	r2, [r2, #0]
20002e72:	3a01      	subs	r2, #1
20002e74:	701a      	strb	r2, [r3, #0]
	if(column == 2){
20002e76:	1dbb      	adds	r3, r7, #6
20002e78:	781b      	ldrb	r3, [r3, #0]
20002e7a:	2b02      	cmp	r3, #2
20002e7c:	d106      	bne.n	20002e8c <ascii_goToXY+0x34>
		address += 0x40;
20002e7e:	230f      	movs	r3, #15
20002e80:	18fb      	adds	r3, r7, r3
20002e82:	220f      	movs	r2, #15
20002e84:	18ba      	adds	r2, r7, r2
20002e86:	7812      	ldrb	r2, [r2, #0]
20002e88:	3240      	adds	r2, #64	; 0x40
20002e8a:	701a      	strb	r2, [r3, #0]
	}
	ascii_write_cmd(0x80 | address);
20002e8c:	230f      	movs	r3, #15
20002e8e:	18fb      	adds	r3, r7, r3
20002e90:	781b      	ldrb	r3, [r3, #0]
20002e92:	2280      	movs	r2, #128	; 0x80
20002e94:	4252      	negs	r2, r2
20002e96:	4313      	orrs	r3, r2
20002e98:	b2db      	uxtb	r3, r3
20002e9a:	0018      	movs	r0, r3
20002e9c:	f7ff ff0e 	bl	20002cbc <ascii_write_cmd>
}
20002ea0:	46c0      	nop			; (mov r8, r8)
20002ea2:	46bd      	mov	sp, r7
20002ea4:	b004      	add	sp, #16
20002ea6:	bd80      	pop	{r7, pc}

20002ea8 <ascii_init>:

void ascii_init(void){
20002ea8:	b580      	push	{r7, lr}
20002eaa:	af00      	add	r7, sp, #0
	//initiera displayen:
		while((ascii_read_status() & 0x80) == 0x80){} //VÃ¤nta tills displayed Ã¤r redo
20002eac:	46c0      	nop			; (mov r8, r8)
20002eae:	f7ff ff2f 	bl	20002d10 <ascii_read_status>
20002eb2:	0003      	movs	r3, r0
20002eb4:	001a      	movs	r2, r3
20002eb6:	2380      	movs	r3, #128	; 0x80
20002eb8:	4013      	ands	r3, r2
20002eba:	2b80      	cmp	r3, #128	; 0x80
20002ebc:	d0f7      	beq.n	20002eae <ascii_init+0x6>
		delay_micro(20); //latenstid 
20002ebe:	2014      	movs	r0, #20
20002ec0:	f7fe ff76 	bl	20001db0 <delay_micro>
		ascii_write_cmd(0x38); //Function set (39us), 000011NFXX, N = antal rader = 2, F = -->0=5x8<--, 1=5x11
20002ec4:	2038      	movs	r0, #56	; 0x38
20002ec6:	f7ff fef9 	bl	20002cbc <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20002eca:	2064      	movs	r0, #100	; 0x64
20002ecc:	f7fe ff70 	bl	20001db0 <delay_micro>
		
	// clear display
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20002ed0:	46c0      	nop			; (mov r8, r8)
20002ed2:	f7ff ff1d 	bl	20002d10 <ascii_read_status>
20002ed6:	0003      	movs	r3, r0
20002ed8:	001a      	movs	r2, r3
20002eda:	2380      	movs	r3, #128	; 0x80
20002edc:	4013      	ands	r3, r2
20002ede:	2b80      	cmp	r3, #128	; 0x80
20002ee0:	d0f7      	beq.n	20002ed2 <ascii_init+0x2a>
		delay_micro(20); //latenstid
20002ee2:	2014      	movs	r0, #20
20002ee4:	f7fe ff64 	bl	20001db0 <delay_micro>
		ascii_write_cmd(0x01); 
20002ee8:	2001      	movs	r0, #1
20002eea:	f7ff fee7 	bl	20002cbc <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20002eee:	2064      	movs	r0, #100	; 0x64
20002ef0:	f7fe ff5e 	bl	20001db0 <delay_micro>

	//display control:
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20002ef4:	46c0      	nop			; (mov r8, r8)
20002ef6:	f7ff ff0b 	bl	20002d10 <ascii_read_status>
20002efa:	0003      	movs	r3, r0
20002efc:	001a      	movs	r2, r3
20002efe:	2380      	movs	r3, #128	; 0x80
20002f00:	4013      	ands	r3, r2
20002f02:	2b80      	cmp	r3, #128	; 0x80
20002f04:	d0f7      	beq.n	20002ef6 <ascii_init+0x4e>
		delay_micro(20); //latenstid
20002f06:	2014      	movs	r0, #20
20002f08:	f7fe ff52 	bl	20001db0 <delay_micro>
		ascii_write_cmd(0x0C); //000001 + XXX. X:ena = 0:av / 1:pÃƒÂ¥ -  SkÃƒÂ¤rm/MarkÃƒÂ¶r/BlinkaMarkÃƒÂ¶ren
20002f0c:	200c      	movs	r0, #12
20002f0e:	f7ff fed5 	bl	20002cbc <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20002f12:	2064      	movs	r0, #100	; 0x64
20002f14:	f7fe ff4c 	bl	20001db0 <delay_micro>
		
	// entry mode set
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20002f18:	46c0      	nop			; (mov r8, r8)
20002f1a:	f7ff fef9 	bl	20002d10 <ascii_read_status>
20002f1e:	0003      	movs	r3, r0
20002f20:	001a      	movs	r2, r3
20002f22:	2380      	movs	r3, #128	; 0x80
20002f24:	4013      	ands	r3, r2
20002f26:	2b80      	cmp	r3, #128	; 0x80
20002f28:	d0f7      	beq.n	20002f1a <ascii_init+0x72>
		delay_micro(20); //latenstid
20002f2a:	2014      	movs	r0, #20
20002f2c:	f7fe ff40 	bl	20001db0 <delay_micro>
		ascii_write_cmd(0x06); //00000001 + XY. X=0: markÃƒÂ¶ren vÃƒÂ¤nst. || X=1: marÃƒÂ¶kren hÃƒÂ¶g. - Y=0: skift av || Y=1: skift pÃƒÂ¥
20002f30:	2006      	movs	r0, #6
20002f32:	f7ff fec3 	bl	20002cbc <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20002f36:	2064      	movs	r0, #100	; 0x64
20002f38:	f7fe ff3a 	bl	20001db0 <delay_micro>
		
		
}
20002f3c:	46c0      	nop			; (mov r8, r8)
20002f3e:	46bd      	mov	sp, r7
20002f40:	bd80      	pop	{r7, pc}

20002f42 <init_application>:

void init_application(void){
20002f42:	b580      	push	{r7, lr}
20002f44:	af00      	add	r7, sp, #0
	#ifdef USBDM
		*((unsigned long *) 0x40023830) = 0x18; //startar klockor pÃ¥ port D och E
		//__asm volatile ("LDR R0, =0x08000209\n BLX R0 \n"); //initiera PLL
	#endif
	//"initierar Port E med anvÃƒÂ¤ndning med LCD-modulen, dvs. sÃƒÂ¥vÃƒÂ¤l port E0-7 som E8-15 sÃƒÂ¤tts till utgÃƒÂ¥ngar
	* portModer = 0x55555555;
20002f46:	4b03      	ldr	r3, [pc, #12]	; (20002f54 <init_application+0x12>)
20002f48:	4a03      	ldr	r2, [pc, #12]	; (20002f58 <init_application+0x16>)
20002f4a:	601a      	str	r2, [r3, #0]
}
20002f4c:	46c0      	nop			; (mov r8, r8)
20002f4e:	46bd      	mov	sp, r7
20002f50:	bd80      	pop	{r7, pc}
20002f52:	46c0      	nop			; (mov r8, r8)
20002f54:	40021000 	andmi	r1, r2, r0
20002f58:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20002f5c <set_up_ascii>:

void set_up_ascii( void ) {
20002f5c:	b580      	push	{r7, lr}
20002f5e:	af00      	add	r7, sp, #0
	init_application();
20002f60:	f7ff ffef 	bl	20002f42 <init_application>
	ascii_init();
20002f64:	f7ff ffa0 	bl	20002ea8 <ascii_init>
}
20002f68:	46c0      	nop			; (mov r8, r8)
20002f6a:	46bd      	mov	sp, r7
20002f6c:	bd80      	pop	{r7, pc}

20002f6e <clear_ascii>:

void clear_ascii( void ) {
20002f6e:	b590      	push	{r4, r7, lr}
20002f70:	b089      	sub	sp, #36	; 0x24
20002f72:	af00      	add	r7, sp, #0
	char *s;
	char clear[] = "                    ";
20002f74:	1d3b      	adds	r3, r7, #4
20002f76:	4a17      	ldr	r2, [pc, #92]	; (20002fd4 <clear_ascii+0x66>)
20002f78:	ca13      	ldmia	r2!, {r0, r1, r4}
20002f7a:	c313      	stmia	r3!, {r0, r1, r4}
20002f7c:	ca03      	ldmia	r2!, {r0, r1}
20002f7e:	c303      	stmia	r3!, {r0, r1}
20002f80:	7812      	ldrb	r2, [r2, #0]
20002f82:	701a      	strb	r2, [r3, #0]
	
	s = clear;
20002f84:	1d3b      	adds	r3, r7, #4
20002f86:	61fb      	str	r3, [r7, #28]
	ascii_goToXY(1,1);
20002f88:	2101      	movs	r1, #1
20002f8a:	2001      	movs	r0, #1
20002f8c:	f7ff ff64 	bl	20002e58 <ascii_goToXY>
	while(*s){
20002f90:	e006      	b.n	20002fa0 <clear_ascii+0x32>
		ascii_write_char(*s++);
20002f92:	69fb      	ldr	r3, [r7, #28]
20002f94:	1c5a      	adds	r2, r3, #1
20002f96:	61fa      	str	r2, [r7, #28]
20002f98:	781b      	ldrb	r3, [r3, #0]
20002f9a:	0018      	movs	r0, r3
20002f9c:	f7ff ff3e 	bl	20002e1c <ascii_write_char>
	while(*s){
20002fa0:	69fb      	ldr	r3, [r7, #28]
20002fa2:	781b      	ldrb	r3, [r3, #0]
20002fa4:	2b00      	cmp	r3, #0
20002fa6:	d1f4      	bne.n	20002f92 <clear_ascii+0x24>
	}
	s = clear;
20002fa8:	1d3b      	adds	r3, r7, #4
20002faa:	61fb      	str	r3, [r7, #28]
	ascii_goToXY(1,2);
20002fac:	2102      	movs	r1, #2
20002fae:	2001      	movs	r0, #1
20002fb0:	f7ff ff52 	bl	20002e58 <ascii_goToXY>
	while(*s){
20002fb4:	e006      	b.n	20002fc4 <clear_ascii+0x56>
		ascii_write_char(*s++);
20002fb6:	69fb      	ldr	r3, [r7, #28]
20002fb8:	1c5a      	adds	r2, r3, #1
20002fba:	61fa      	str	r2, [r7, #28]
20002fbc:	781b      	ldrb	r3, [r3, #0]
20002fbe:	0018      	movs	r0, r3
20002fc0:	f7ff ff2c 	bl	20002e1c <ascii_write_char>
	while(*s){
20002fc4:	69fb      	ldr	r3, [r7, #28]
20002fc6:	781b      	ldrb	r3, [r3, #0]
20002fc8:	2b00      	cmp	r3, #0
20002fca:	d1f4      	bne.n	20002fb6 <clear_ascii+0x48>
	}
}
20002fcc:	46c0      	nop			; (mov r8, r8)
20002fce:	46bd      	mov	sp, r7
20002fd0:	b009      	add	sp, #36	; 0x24
20002fd2:	bd90      	pop	{r4, r7, pc}
20002fd4:	2000954c 	andcs	r9, r0, ip, asr #10

20002fd8 <ascii_write>:

void ascii_write(char *row1, char *row2) {
20002fd8:	b580      	push	{r7, lr}
20002fda:	b082      	sub	sp, #8
20002fdc:	af00      	add	r7, sp, #0
20002fde:	6078      	str	r0, [r7, #4]
20002fe0:	6039      	str	r1, [r7, #0]
	clear_ascii();
20002fe2:	f7ff ffc4 	bl	20002f6e <clear_ascii>
	
	ascii_goToXY(1,1);
20002fe6:	2101      	movs	r1, #1
20002fe8:	2001      	movs	r0, #1
20002fea:	f7ff ff35 	bl	20002e58 <ascii_goToXY>
	while(*row1){
20002fee:	e006      	b.n	20002ffe <ascii_write+0x26>
		ascii_write_char(*row1++);
20002ff0:	687b      	ldr	r3, [r7, #4]
20002ff2:	1c5a      	adds	r2, r3, #1
20002ff4:	607a      	str	r2, [r7, #4]
20002ff6:	781b      	ldrb	r3, [r3, #0]
20002ff8:	0018      	movs	r0, r3
20002ffa:	f7ff ff0f 	bl	20002e1c <ascii_write_char>
	while(*row1){
20002ffe:	687b      	ldr	r3, [r7, #4]
20003000:	781b      	ldrb	r3, [r3, #0]
20003002:	2b00      	cmp	r3, #0
20003004:	d1f4      	bne.n	20002ff0 <ascii_write+0x18>
	}	
	ascii_goToXY(1,2);
20003006:	2102      	movs	r1, #2
20003008:	2001      	movs	r0, #1
2000300a:	f7ff ff25 	bl	20002e58 <ascii_goToXY>
	while(*row2){
2000300e:	e006      	b.n	2000301e <ascii_write+0x46>
		ascii_write_char(*row2++);
20003010:	683b      	ldr	r3, [r7, #0]
20003012:	1c5a      	adds	r2, r3, #1
20003014:	603a      	str	r2, [r7, #0]
20003016:	781b      	ldrb	r3, [r3, #0]
20003018:	0018      	movs	r0, r3
2000301a:	f7ff feff 	bl	20002e1c <ascii_write_char>
	while(*row2){
2000301e:	683b      	ldr	r3, [r7, #0]
20003020:	781b      	ldrb	r3, [r3, #0]
20003022:	2b00      	cmp	r3, #0
20003024:	d1f4      	bne.n	20003010 <ascii_write+0x38>
	}
	
	ascii_goToXY(21,1);
20003026:	2101      	movs	r1, #1
20003028:	2015      	movs	r0, #21
2000302a:	f7ff ff15 	bl	20002e58 <ascii_goToXY>
}
2000302e:	46c0      	nop			; (mov r8, r8)
20003030:	46bd      	mov	sp, r7
20003032:	b002      	add	sp, #8
20003034:	bd80      	pop	{r7, pc}

20003036 <ascii_write_part>:

void ascii_write_part(char *row1, char *row2, int limit1, int limit2) {
20003036:	b580      	push	{r7, lr}
20003038:	b086      	sub	sp, #24
2000303a:	af00      	add	r7, sp, #0
2000303c:	60f8      	str	r0, [r7, #12]
2000303e:	60b9      	str	r1, [r7, #8]
20003040:	607a      	str	r2, [r7, #4]
20003042:	603b      	str	r3, [r7, #0]
	clear_ascii();
20003044:	f7ff ff93 	bl	20002f6e <clear_ascii>
	
	ascii_goToXY(1,1);
20003048:	2101      	movs	r1, #1
2000304a:	2001      	movs	r0, #1
2000304c:	f7ff ff04 	bl	20002e58 <ascii_goToXY>
	int i = 0;
20003050:	2300      	movs	r3, #0
20003052:	617b      	str	r3, [r7, #20]
	if(limit1 > 0) {
20003054:	687b      	ldr	r3, [r7, #4]
20003056:	2b00      	cmp	r3, #0
20003058:	dd11      	ble.n	2000307e <ascii_write_part+0x48>
		while(*row1 && (i++ < limit1)){
2000305a:	e006      	b.n	2000306a <ascii_write_part+0x34>
			ascii_write_char(*row1++);
2000305c:	68fb      	ldr	r3, [r7, #12]
2000305e:	1c5a      	adds	r2, r3, #1
20003060:	60fa      	str	r2, [r7, #12]
20003062:	781b      	ldrb	r3, [r3, #0]
20003064:	0018      	movs	r0, r3
20003066:	f7ff fed9 	bl	20002e1c <ascii_write_char>
		while(*row1 && (i++ < limit1)){
2000306a:	68fb      	ldr	r3, [r7, #12]
2000306c:	781b      	ldrb	r3, [r3, #0]
2000306e:	2b00      	cmp	r3, #0
20003070:	d005      	beq.n	2000307e <ascii_write_part+0x48>
20003072:	697b      	ldr	r3, [r7, #20]
20003074:	1c5a      	adds	r2, r3, #1
20003076:	617a      	str	r2, [r7, #20]
20003078:	687a      	ldr	r2, [r7, #4]
2000307a:	4293      	cmp	r3, r2
2000307c:	dbee      	blt.n	2000305c <ascii_write_part+0x26>
		}			
	}

	ascii_goToXY(1,2);
2000307e:	2102      	movs	r1, #2
20003080:	2001      	movs	r0, #1
20003082:	f7ff fee9 	bl	20002e58 <ascii_goToXY>
	i = 0;
20003086:	2300      	movs	r3, #0
20003088:	617b      	str	r3, [r7, #20]
	if(limit2 > 0) {
2000308a:	683b      	ldr	r3, [r7, #0]
2000308c:	2b00      	cmp	r3, #0
2000308e:	dd11      	ble.n	200030b4 <ascii_write_part+0x7e>
		while(*row2 && (i++ < limit2)){
20003090:	e006      	b.n	200030a0 <ascii_write_part+0x6a>
			ascii_write_char(*row2++);
20003092:	68bb      	ldr	r3, [r7, #8]
20003094:	1c5a      	adds	r2, r3, #1
20003096:	60ba      	str	r2, [r7, #8]
20003098:	781b      	ldrb	r3, [r3, #0]
2000309a:	0018      	movs	r0, r3
2000309c:	f7ff febe 	bl	20002e1c <ascii_write_char>
		while(*row2 && (i++ < limit2)){
200030a0:	68bb      	ldr	r3, [r7, #8]
200030a2:	781b      	ldrb	r3, [r3, #0]
200030a4:	2b00      	cmp	r3, #0
200030a6:	d005      	beq.n	200030b4 <ascii_write_part+0x7e>
200030a8:	697b      	ldr	r3, [r7, #20]
200030aa:	1c5a      	adds	r2, r3, #1
200030ac:	617a      	str	r2, [r7, #20]
200030ae:	683a      	ldr	r2, [r7, #0]
200030b0:	4293      	cmp	r3, r2
200030b2:	dbee      	blt.n	20003092 <ascii_write_part+0x5c>
		}
	}
	
	ascii_goToXY(21,1);
200030b4:	2101      	movs	r1, #1
200030b6:	2015      	movs	r0, #21
200030b8:	f7ff fece 	bl	20002e58 <ascii_goToXY>
}
200030bc:	46c0      	nop			; (mov r8, r8)
200030be:	46bd      	mov	sp, r7
200030c0:	b006      	add	sp, #24
200030c2:	bd80      	pop	{r7, pc}

200030c4 <ascii_test>:



void ascii_test(void) {
200030c4:	b590      	push	{r4, r7, lr}
200030c6:	b08b      	sub	sp, #44	; 0x2c
200030c8:	af00      	add	r7, sp, #0
	char *s;
	char test1[] = "Alfanumerisk";
200030ca:	2314      	movs	r3, #20
200030cc:	18fb      	adds	r3, r7, r3
200030ce:	4a1c      	ldr	r2, [pc, #112]	; (20003140 <ascii_test+0x7c>)
200030d0:	ca13      	ldmia	r2!, {r0, r1, r4}
200030d2:	c313      	stmia	r3!, {r0, r1, r4}
200030d4:	7812      	ldrb	r2, [r2, #0]
200030d6:	701a      	strb	r2, [r3, #0]
	char test2[] = "hardåäöare suger";
200030d8:	003b      	movs	r3, r7
200030da:	4a1a      	ldr	r2, [pc, #104]	; (20003144 <ascii_test+0x80>)
200030dc:	ca13      	ldmia	r2!, {r0, r1, r4}
200030de:	c313      	stmia	r3!, {r0, r1, r4}
200030e0:	ca03      	ldmia	r2!, {r0, r1}
200030e2:	c303      	stmia	r3!, {r0, r1}
	
	init_application();
200030e4:	f7ff ff2d 	bl	20002f42 <init_application>
	ascii_init();
200030e8:	f7ff fede 	bl	20002ea8 <ascii_init>
	ascii_goToXY(1,1);
200030ec:	2101      	movs	r1, #1
200030ee:	2001      	movs	r0, #1
200030f0:	f7ff feb2 	bl	20002e58 <ascii_goToXY>
	s = test1;
200030f4:	2314      	movs	r3, #20
200030f6:	18fb      	adds	r3, r7, r3
200030f8:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
200030fa:	e006      	b.n	2000310a <ascii_test+0x46>
		ascii_write_char(*s++);
200030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200030fe:	1c5a      	adds	r2, r3, #1
20003100:	627a      	str	r2, [r7, #36]	; 0x24
20003102:	781b      	ldrb	r3, [r3, #0]
20003104:	0018      	movs	r0, r3
20003106:	f7ff fe89 	bl	20002e1c <ascii_write_char>
	while(*s){
2000310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000310c:	781b      	ldrb	r3, [r3, #0]
2000310e:	2b00      	cmp	r3, #0
20003110:	d1f4      	bne.n	200030fc <ascii_test+0x38>
	}
	ascii_goToXY(1,2);
20003112:	2102      	movs	r1, #2
20003114:	2001      	movs	r0, #1
20003116:	f7ff fe9f 	bl	20002e58 <ascii_goToXY>
	s = test2;
2000311a:	003b      	movs	r3, r7
2000311c:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
2000311e:	e006      	b.n	2000312e <ascii_test+0x6a>
		ascii_write_char(*s++);
20003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003122:	1c5a      	adds	r2, r3, #1
20003124:	627a      	str	r2, [r7, #36]	; 0x24
20003126:	781b      	ldrb	r3, [r3, #0]
20003128:	0018      	movs	r0, r3
2000312a:	f7ff fe77 	bl	20002e1c <ascii_write_char>
	while(*s){
2000312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003130:	781b      	ldrb	r3, [r3, #0]
20003132:	2b00      	cmp	r3, #0
20003134:	d1f4      	bne.n	20003120 <ascii_test+0x5c>
	}
	return 0;
20003136:	46c0      	nop			; (mov r8, r8)
20003138:	46bd      	mov	sp, r7
2000313a:	b00b      	add	sp, #44	; 0x2c
2000313c:	bd90      	pop	{r4, r7, pc}
2000313e:	46c0      	nop			; (mov r8, r8)
20003140:	20009564 	andcs	r9, r0, r4, ror #10
20003144:	20009574 	andcs	r9, r0, r4, ror r5

20003148 <display>:
#include "slow_text.h"
#include "ascii_display.h"

void display(SlowText *this, int length_of_row1) {
20003148:	b580      	push	{r7, lr}
2000314a:	b084      	sub	sp, #16
2000314c:	af00      	add	r7, sp, #0
2000314e:	6078      	str	r0, [r7, #4]
20003150:	6039      	str	r1, [r7, #0]
	int limit1 = this->counter / this->speed;
20003152:	687b      	ldr	r3, [r7, #4]
20003154:	689a      	ldr	r2, [r3, #8]
20003156:	687b      	ldr	r3, [r7, #4]
20003158:	68db      	ldr	r3, [r3, #12]
2000315a:	0019      	movs	r1, r3
2000315c:	0010      	movs	r0, r2
2000315e:	f000 f925 	bl	200033ac <__divsi3>
20003162:	0003      	movs	r3, r0
20003164:	60fb      	str	r3, [r7, #12]
	int limit2 = this->counter / this->speed - length_of_row1;
20003166:	687b      	ldr	r3, [r7, #4]
20003168:	689a      	ldr	r2, [r3, #8]
2000316a:	687b      	ldr	r3, [r7, #4]
2000316c:	68db      	ldr	r3, [r3, #12]
2000316e:	0019      	movs	r1, r3
20003170:	0010      	movs	r0, r2
20003172:	f000 f91b 	bl	200033ac <__divsi3>
20003176:	0003      	movs	r3, r0
20003178:	001a      	movs	r2, r3
2000317a:	683b      	ldr	r3, [r7, #0]
2000317c:	1ad3      	subs	r3, r2, r3
2000317e:	60bb      	str	r3, [r7, #8]
	ascii_write_part(this->row1, this->row2, limit1, limit2);
20003180:	687b      	ldr	r3, [r7, #4]
20003182:	6818      	ldr	r0, [r3, #0]
20003184:	687b      	ldr	r3, [r7, #4]
20003186:	6859      	ldr	r1, [r3, #4]
20003188:	68bb      	ldr	r3, [r7, #8]
2000318a:	68fa      	ldr	r2, [r7, #12]
2000318c:	f7ff ff53 	bl	20003036 <ascii_write_part>
	
	this->counter++;
20003190:	687b      	ldr	r3, [r7, #4]
20003192:	689b      	ldr	r3, [r3, #8]
20003194:	1c5a      	adds	r2, r3, #1
20003196:	687b      	ldr	r3, [r7, #4]
20003198:	609a      	str	r2, [r3, #8]
}
2000319a:	46c0      	nop			; (mov r8, r8)
2000319c:	46bd      	mov	sp, r7
2000319e:	b004      	add	sp, #16
200031a0:	bd80      	pop	{r7, pc}

200031a2 <init_slow_text>:

void init_slow_text(SlowText *obj, char *row1, char *row2, int speed) {
200031a2:	b580      	push	{r7, lr}
200031a4:	b084      	sub	sp, #16
200031a6:	af00      	add	r7, sp, #0
200031a8:	60f8      	str	r0, [r7, #12]
200031aa:	60b9      	str	r1, [r7, #8]
200031ac:	607a      	str	r2, [r7, #4]
200031ae:	603b      	str	r3, [r7, #0]
	obj->row1 = row1;
200031b0:	68fb      	ldr	r3, [r7, #12]
200031b2:	68ba      	ldr	r2, [r7, #8]
200031b4:	601a      	str	r2, [r3, #0]
	obj->row2 = row2;
200031b6:	68fb      	ldr	r3, [r7, #12]
200031b8:	687a      	ldr	r2, [r7, #4]
200031ba:	605a      	str	r2, [r3, #4]
	obj->speed = speed;
200031bc:	68fb      	ldr	r3, [r7, #12]
200031be:	683a      	ldr	r2, [r7, #0]
200031c0:	60da      	str	r2, [r3, #12]
	obj->counter = 0;
200031c2:	68fb      	ldr	r3, [r7, #12]
200031c4:	2200      	movs	r2, #0
200031c6:	609a      	str	r2, [r3, #8]
	obj->display = display;
200031c8:	68fb      	ldr	r3, [r7, #12]
200031ca:	4a03      	ldr	r2, [pc, #12]	; (200031d8 <init_slow_text+0x36>)
200031cc:	611a      	str	r2, [r3, #16]
200031ce:	46c0      	nop			; (mov r8, r8)
200031d0:	46bd      	mov	sp, r7
200031d2:	b004      	add	sp, #16
200031d4:	bd80      	pop	{r7, pc}
200031d6:	46c0      	nop			; (mov r8, r8)
200031d8:	20003149 	andcs	r3, r0, r9, asr #2

200031dc <initSprites>:


GameObject indoorsObj;
Image indoorsImage;
Image indoorsImages[1];
static void initSprites( void ) {	
200031dc:	b580      	push	{r7, lr}
200031de:	b084      	sub	sp, #16
200031e0:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempIndoorsLight;
200031e2:	4b12      	ldr	r3, [pc, #72]	; (2000322c <initSprites+0x50>)
200031e4:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer11, indoors_light_bits, indoors_black_width, indoors_black_height);
200031e6:	4912      	ldr	r1, [pc, #72]	; (20003230 <initSprites+0x54>)
200031e8:	68f8      	ldr	r0, [r7, #12]
200031ea:	2340      	movs	r3, #64	; 0x40
200031ec:	2280      	movs	r2, #128	; 0x80
200031ee:	f7ff fcd1 	bl	20002b94 <load_sprite>
	indoorsLight = pointer11;
200031f2:	4b10      	ldr	r3, [pc, #64]	; (20003234 <initSprites+0x58>)
200031f4:	68fa      	ldr	r2, [r7, #12]
200031f6:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempIndoorsGray;
200031f8:	4b0f      	ldr	r3, [pc, #60]	; (20003238 <initSprites+0x5c>)
200031fa:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer12, indoors_gray_bits, indoors_black_width, indoors_black_height);
200031fc:	490f      	ldr	r1, [pc, #60]	; (2000323c <initSprites+0x60>)
200031fe:	68b8      	ldr	r0, [r7, #8]
20003200:	2340      	movs	r3, #64	; 0x40
20003202:	2280      	movs	r2, #128	; 0x80
20003204:	f7ff fcc6 	bl	20002b94 <load_sprite>
	indoorsGray = pointer12;
20003208:	4b0d      	ldr	r3, [pc, #52]	; (20003240 <initSprites+0x64>)
2000320a:	68ba      	ldr	r2, [r7, #8]
2000320c:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempIndoorsBlack;
2000320e:	4b0d      	ldr	r3, [pc, #52]	; (20003244 <initSprites+0x68>)
20003210:	607b      	str	r3, [r7, #4]
	load_sprite(pointer13, indoors_black_bits, indoors_black_width, indoors_black_height);
20003212:	490d      	ldr	r1, [pc, #52]	; (20003248 <initSprites+0x6c>)
20003214:	6878      	ldr	r0, [r7, #4]
20003216:	2340      	movs	r3, #64	; 0x40
20003218:	2280      	movs	r2, #128	; 0x80
2000321a:	f7ff fcbb 	bl	20002b94 <load_sprite>
	indoorsBlack = pointer13;	
2000321e:	4b0b      	ldr	r3, [pc, #44]	; (2000324c <initSprites+0x70>)
20003220:	687a      	ldr	r2, [r7, #4]
20003222:	601a      	str	r2, [r3, #0]
	
}
20003224:	46c0      	nop			; (mov r8, r8)
20003226:	46bd      	mov	sp, r7
20003228:	b004      	add	sp, #16
2000322a:	bd80      	pop	{r7, pc}
2000322c:	20005934 	andcs	r5, r0, r4, lsr r9
20003230:	200083a4 	andcs	r8, r0, r4, lsr #7
20003234:	20005990 	mulcs	r0, r0, r9
20003238:	20005928 	andcs	r5, r0, r8, lsr #18
2000323c:	20007fa4 	andcs	r7, r0, r4, lsr #31
20003240:	2000594c 	andcs	r5, r0, ip, asr #18
20003244:	20005940 	andcs	r5, r0, r0, asr #18
20003248:	20007ba4 	andcs	r7, r0, r4, lsr #23
2000324c:	20005980 	andcs	r5, r0, r0, lsl #19

20003250 <init_indoors>:
	
void init_indoors( GameObject *indoorsObj ) {
20003250:	b590      	push	{r4, r7, lr}
20003252:	b083      	sub	sp, #12
20003254:	af00      	add	r7, sp, #0
20003256:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20003258:	4b14      	ldr	r3, [pc, #80]	; (200032ac <init_indoors+0x5c>)
2000325a:	681b      	ldr	r3, [r3, #0]
2000325c:	2b00      	cmp	r3, #0
2000325e:	d011      	beq.n	20003284 <init_indoors+0x34>
		initSprites();
20003260:	f7ff ffbc 	bl	200031dc <initSprites>
		firstTime = 0;			
20003264:	4b11      	ldr	r3, [pc, #68]	; (200032ac <init_indoors+0x5c>)
20003266:	2200      	movs	r2, #0
20003268:	601a      	str	r2, [r3, #0]

		indoorsImages[0] = indoorsImage;
2000326a:	4b11      	ldr	r3, [pc, #68]	; (200032b0 <init_indoors+0x60>)
2000326c:	4a11      	ldr	r2, [pc, #68]	; (200032b4 <init_indoors+0x64>)
2000326e:	ca13      	ldmia	r2!, {r0, r1, r4}
20003270:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&indoorsImages[0], indoorsBlack, indoorsGray, indoorsLight);
20003272:	4b11      	ldr	r3, [pc, #68]	; (200032b8 <init_indoors+0x68>)
20003274:	6819      	ldr	r1, [r3, #0]
20003276:	4b11      	ldr	r3, [pc, #68]	; (200032bc <init_indoors+0x6c>)
20003278:	681a      	ldr	r2, [r3, #0]
2000327a:	4b11      	ldr	r3, [pc, #68]	; (200032c0 <init_indoors+0x70>)
2000327c:	681b      	ldr	r3, [r3, #0]
2000327e:	480c      	ldr	r0, [pc, #48]	; (200032b0 <init_indoors+0x60>)
20003280:	f7ff fc74 	bl	20002b6c <load_image>
	}
	
	indoorsObj->images = indoorsImages;
20003284:	687b      	ldr	r3, [r7, #4]
20003286:	4a0a      	ldr	r2, [pc, #40]	; (200032b0 <init_indoors+0x60>)
20003288:	601a      	str	r2, [r3, #0]

	indoorsObj->current_frame = 0;
2000328a:	687b      	ldr	r3, [r7, #4]
2000328c:	2200      	movs	r2, #0
2000328e:	615a      	str	r2, [r3, #20]
	indoorsObj->n_frames = 1;
20003290:	687b      	ldr	r3, [r7, #4]
20003292:	2201      	movs	r2, #1
20003294:	619a      	str	r2, [r3, #24]
	indoorsObj->animation_speed = 1;
20003296:	687b      	ldr	r3, [r7, #4]
20003298:	2201      	movs	r2, #1
2000329a:	61da      	str	r2, [r3, #28]
	indoorsObj->animation_counter = 0;
2000329c:	687b      	ldr	r3, [r7, #4]
2000329e:	2200      	movs	r2, #0
200032a0:	621a      	str	r2, [r3, #32]
}
200032a2:	46c0      	nop			; (mov r8, r8)
200032a4:	46bd      	mov	sp, r7
200032a6:	b003      	add	sp, #12
200032a8:	bd90      	pop	{r4, r7, pc}
200032aa:	46c0      	nop			; (mov r8, r8)
200032ac:	200087a4 	andcs	r8, r0, r4, lsr #15
200032b0:	20005974 	andcs	r5, r0, r4, ror r9
200032b4:	20005984 	andcs	r5, r0, r4, lsl #19
200032b8:	20005980 	andcs	r5, r0, r0, lsl #19
200032bc:	2000594c 	andcs	r5, r0, ip, asr #18
200032c0:	20005990 	mulcs	r0, r0, r9

200032c4 <initSprites>:


GameObject indoors2Obj;
Image indoors2Image;
Image indoors2Images[1];
static void initSprites( void ) {	
200032c4:	b580      	push	{r7, lr}
200032c6:	b084      	sub	sp, #16
200032c8:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempIndoors2Light;
200032ca:	4b12      	ldr	r3, [pc, #72]	; (20003314 <initSprites+0x50>)
200032cc:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer11, indoors2_light_bits, indoors2_black_width, indoors2_black_height);
200032ce:	4912      	ldr	r1, [pc, #72]	; (20003318 <initSprites+0x54>)
200032d0:	68f8      	ldr	r0, [r7, #12]
200032d2:	2340      	movs	r3, #64	; 0x40
200032d4:	2280      	movs	r2, #128	; 0x80
200032d6:	f7ff fc5d 	bl	20002b94 <load_sprite>
	indoors2Light = pointer11;
200032da:	4b10      	ldr	r3, [pc, #64]	; (2000331c <initSprites+0x58>)
200032dc:	68fa      	ldr	r2, [r7, #12]
200032de:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempIndoors2Gray;
200032e0:	4b0f      	ldr	r3, [pc, #60]	; (20003320 <initSprites+0x5c>)
200032e2:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer12, indoors2_gray_bits, indoors2_black_width, indoors2_black_height);
200032e4:	490f      	ldr	r1, [pc, #60]	; (20003324 <initSprites+0x60>)
200032e6:	68b8      	ldr	r0, [r7, #8]
200032e8:	2340      	movs	r3, #64	; 0x40
200032ea:	2280      	movs	r2, #128	; 0x80
200032ec:	f7ff fc52 	bl	20002b94 <load_sprite>
	indoors2Gray = pointer12;
200032f0:	4b0d      	ldr	r3, [pc, #52]	; (20003328 <initSprites+0x64>)
200032f2:	68ba      	ldr	r2, [r7, #8]
200032f4:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempIndoors2Black;
200032f6:	4b0d      	ldr	r3, [pc, #52]	; (2000332c <initSprites+0x68>)
200032f8:	607b      	str	r3, [r7, #4]
	load_sprite(pointer13, indoors2_black_bits, indoors2_black_width, indoors2_black_height);
200032fa:	490d      	ldr	r1, [pc, #52]	; (20003330 <initSprites+0x6c>)
200032fc:	6878      	ldr	r0, [r7, #4]
200032fe:	2340      	movs	r3, #64	; 0x40
20003300:	2280      	movs	r2, #128	; 0x80
20003302:	f7ff fc47 	bl	20002b94 <load_sprite>
	indoors2Black = pointer13;	
20003306:	4b0b      	ldr	r3, [pc, #44]	; (20003334 <initSprites+0x70>)
20003308:	687a      	ldr	r2, [r7, #4]
2000330a:	601a      	str	r2, [r3, #0]
	
}
2000330c:	46c0      	nop			; (mov r8, r8)
2000330e:	46bd      	mov	sp, r7
20003310:	b004      	add	sp, #16
20003312:	bd80      	pop	{r7, pc}
20003314:	200059f0 	strdcs	r5, [r0], -r0
20003318:	20008fa8 	andcs	r8, r0, r8, lsr #31
2000331c:	200059e0 	andcs	r5, r0, r0, ror #19
20003320:	200059d4 	ldrdcs	r5, [r0], -r4
20003324:	20008ba8 	andcs	r8, r0, r8, lsr #23
20003328:	200059b8 			; <UNDEFINED> instruction: 0x200059b8
2000332c:	200059e4 	andcs	r5, r0, r4, ror #19
20003330:	200087a8 	andcs	r8, r0, r8, lsr #15
20003334:	200059fc 	strdcs	r5, [r0], -ip

20003338 <init_indoors2>:
	
void init_indoors2( GameObject *indoors2Obj ) {
20003338:	b590      	push	{r4, r7, lr}
2000333a:	b083      	sub	sp, #12
2000333c:	af00      	add	r7, sp, #0
2000333e:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20003340:	4b14      	ldr	r3, [pc, #80]	; (20003394 <init_indoors2+0x5c>)
20003342:	681b      	ldr	r3, [r3, #0]
20003344:	2b00      	cmp	r3, #0
20003346:	d011      	beq.n	2000336c <init_indoors2+0x34>
		initSprites();
20003348:	f7ff ffbc 	bl	200032c4 <initSprites>
		firstTime = 0;			
2000334c:	4b11      	ldr	r3, [pc, #68]	; (20003394 <init_indoors2+0x5c>)
2000334e:	2200      	movs	r2, #0
20003350:	601a      	str	r2, [r3, #0]

		indoors2Images[0] = indoors2Image;
20003352:	4b11      	ldr	r3, [pc, #68]	; (20003398 <init_indoors2+0x60>)
20003354:	4a11      	ldr	r2, [pc, #68]	; (2000339c <init_indoors2+0x64>)
20003356:	ca13      	ldmia	r2!, {r0, r1, r4}
20003358:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&indoors2Images[0], indoors2Black, indoors2Gray, indoors2Light);
2000335a:	4b11      	ldr	r3, [pc, #68]	; (200033a0 <init_indoors2+0x68>)
2000335c:	6819      	ldr	r1, [r3, #0]
2000335e:	4b11      	ldr	r3, [pc, #68]	; (200033a4 <init_indoors2+0x6c>)
20003360:	681a      	ldr	r2, [r3, #0]
20003362:	4b11      	ldr	r3, [pc, #68]	; (200033a8 <init_indoors2+0x70>)
20003364:	681b      	ldr	r3, [r3, #0]
20003366:	480c      	ldr	r0, [pc, #48]	; (20003398 <init_indoors2+0x60>)
20003368:	f7ff fc00 	bl	20002b6c <load_image>
	}
	
	indoors2Obj->images = indoors2Images;
2000336c:	687b      	ldr	r3, [r7, #4]
2000336e:	4a0a      	ldr	r2, [pc, #40]	; (20003398 <init_indoors2+0x60>)
20003370:	601a      	str	r2, [r3, #0]

	indoors2Obj->current_frame = 0;
20003372:	687b      	ldr	r3, [r7, #4]
20003374:	2200      	movs	r2, #0
20003376:	615a      	str	r2, [r3, #20]
	indoors2Obj->n_frames = 1;
20003378:	687b      	ldr	r3, [r7, #4]
2000337a:	2201      	movs	r2, #1
2000337c:	619a      	str	r2, [r3, #24]
	indoors2Obj->animation_speed = 1;
2000337e:	687b      	ldr	r3, [r7, #4]
20003380:	2201      	movs	r2, #1
20003382:	61da      	str	r2, [r3, #28]
	indoors2Obj->animation_counter = 0;
20003384:	687b      	ldr	r3, [r7, #4]
20003386:	2200      	movs	r2, #0
20003388:	621a      	str	r2, [r3, #32]
}
2000338a:	46c0      	nop			; (mov r8, r8)
2000338c:	46bd      	mov	sp, r7
2000338e:	b003      	add	sp, #12
20003390:	bd90      	pop	{r4, r7, pc}
20003392:	46c0      	nop			; (mov r8, r8)
20003394:	200093a8 	andcs	r9, r0, r8, lsr #7
20003398:	200059bc 			; <UNDEFINED> instruction: 0x200059bc
2000339c:	200059c8 	andcs	r5, r0, r8, asr #19
200033a0:	200059fc 	strdcs	r5, [r0], -ip
200033a4:	200059b8 			; <UNDEFINED> instruction: 0x200059b8
200033a8:	200059e0 	andcs	r5, r0, r0, ror #19

200033ac <__divsi3>:
200033ac:	4603      	mov	r3, r0
200033ae:	430b      	orrs	r3, r1
200033b0:	d47f      	bmi.n	200034b2 <__divsi3+0x106>
200033b2:	2200      	movs	r2, #0
200033b4:	0843      	lsrs	r3, r0, #1
200033b6:	428b      	cmp	r3, r1
200033b8:	d374      	bcc.n	200034a4 <__divsi3+0xf8>
200033ba:	0903      	lsrs	r3, r0, #4
200033bc:	428b      	cmp	r3, r1
200033be:	d35f      	bcc.n	20003480 <__divsi3+0xd4>
200033c0:	0a03      	lsrs	r3, r0, #8
200033c2:	428b      	cmp	r3, r1
200033c4:	d344      	bcc.n	20003450 <__divsi3+0xa4>
200033c6:	0b03      	lsrs	r3, r0, #12
200033c8:	428b      	cmp	r3, r1
200033ca:	d328      	bcc.n	2000341e <__divsi3+0x72>
200033cc:	0c03      	lsrs	r3, r0, #16
200033ce:	428b      	cmp	r3, r1
200033d0:	d30d      	bcc.n	200033ee <__divsi3+0x42>
200033d2:	22ff      	movs	r2, #255	; 0xff
200033d4:	0209      	lsls	r1, r1, #8
200033d6:	ba12      	rev	r2, r2
200033d8:	0c03      	lsrs	r3, r0, #16
200033da:	428b      	cmp	r3, r1
200033dc:	d302      	bcc.n	200033e4 <__divsi3+0x38>
200033de:	1212      	asrs	r2, r2, #8
200033e0:	0209      	lsls	r1, r1, #8
200033e2:	d065      	beq.n	200034b0 <__divsi3+0x104>
200033e4:	0b03      	lsrs	r3, r0, #12
200033e6:	428b      	cmp	r3, r1
200033e8:	d319      	bcc.n	2000341e <__divsi3+0x72>
200033ea:	e000      	b.n	200033ee <__divsi3+0x42>
200033ec:	0a09      	lsrs	r1, r1, #8
200033ee:	0bc3      	lsrs	r3, r0, #15
200033f0:	428b      	cmp	r3, r1
200033f2:	d301      	bcc.n	200033f8 <__divsi3+0x4c>
200033f4:	03cb      	lsls	r3, r1, #15
200033f6:	1ac0      	subs	r0, r0, r3
200033f8:	4152      	adcs	r2, r2
200033fa:	0b83      	lsrs	r3, r0, #14
200033fc:	428b      	cmp	r3, r1
200033fe:	d301      	bcc.n	20003404 <__divsi3+0x58>
20003400:	038b      	lsls	r3, r1, #14
20003402:	1ac0      	subs	r0, r0, r3
20003404:	4152      	adcs	r2, r2
20003406:	0b43      	lsrs	r3, r0, #13
20003408:	428b      	cmp	r3, r1
2000340a:	d301      	bcc.n	20003410 <__divsi3+0x64>
2000340c:	034b      	lsls	r3, r1, #13
2000340e:	1ac0      	subs	r0, r0, r3
20003410:	4152      	adcs	r2, r2
20003412:	0b03      	lsrs	r3, r0, #12
20003414:	428b      	cmp	r3, r1
20003416:	d301      	bcc.n	2000341c <__divsi3+0x70>
20003418:	030b      	lsls	r3, r1, #12
2000341a:	1ac0      	subs	r0, r0, r3
2000341c:	4152      	adcs	r2, r2
2000341e:	0ac3      	lsrs	r3, r0, #11
20003420:	428b      	cmp	r3, r1
20003422:	d301      	bcc.n	20003428 <__divsi3+0x7c>
20003424:	02cb      	lsls	r3, r1, #11
20003426:	1ac0      	subs	r0, r0, r3
20003428:	4152      	adcs	r2, r2
2000342a:	0a83      	lsrs	r3, r0, #10
2000342c:	428b      	cmp	r3, r1
2000342e:	d301      	bcc.n	20003434 <__divsi3+0x88>
20003430:	028b      	lsls	r3, r1, #10
20003432:	1ac0      	subs	r0, r0, r3
20003434:	4152      	adcs	r2, r2
20003436:	0a43      	lsrs	r3, r0, #9
20003438:	428b      	cmp	r3, r1
2000343a:	d301      	bcc.n	20003440 <__divsi3+0x94>
2000343c:	024b      	lsls	r3, r1, #9
2000343e:	1ac0      	subs	r0, r0, r3
20003440:	4152      	adcs	r2, r2
20003442:	0a03      	lsrs	r3, r0, #8
20003444:	428b      	cmp	r3, r1
20003446:	d301      	bcc.n	2000344c <__divsi3+0xa0>
20003448:	020b      	lsls	r3, r1, #8
2000344a:	1ac0      	subs	r0, r0, r3
2000344c:	4152      	adcs	r2, r2
2000344e:	d2cd      	bcs.n	200033ec <__divsi3+0x40>
20003450:	09c3      	lsrs	r3, r0, #7
20003452:	428b      	cmp	r3, r1
20003454:	d301      	bcc.n	2000345a <__divsi3+0xae>
20003456:	01cb      	lsls	r3, r1, #7
20003458:	1ac0      	subs	r0, r0, r3
2000345a:	4152      	adcs	r2, r2
2000345c:	0983      	lsrs	r3, r0, #6
2000345e:	428b      	cmp	r3, r1
20003460:	d301      	bcc.n	20003466 <__divsi3+0xba>
20003462:	018b      	lsls	r3, r1, #6
20003464:	1ac0      	subs	r0, r0, r3
20003466:	4152      	adcs	r2, r2
20003468:	0943      	lsrs	r3, r0, #5
2000346a:	428b      	cmp	r3, r1
2000346c:	d301      	bcc.n	20003472 <__divsi3+0xc6>
2000346e:	014b      	lsls	r3, r1, #5
20003470:	1ac0      	subs	r0, r0, r3
20003472:	4152      	adcs	r2, r2
20003474:	0903      	lsrs	r3, r0, #4
20003476:	428b      	cmp	r3, r1
20003478:	d301      	bcc.n	2000347e <__divsi3+0xd2>
2000347a:	010b      	lsls	r3, r1, #4
2000347c:	1ac0      	subs	r0, r0, r3
2000347e:	4152      	adcs	r2, r2
20003480:	08c3      	lsrs	r3, r0, #3
20003482:	428b      	cmp	r3, r1
20003484:	d301      	bcc.n	2000348a <__divsi3+0xde>
20003486:	00cb      	lsls	r3, r1, #3
20003488:	1ac0      	subs	r0, r0, r3
2000348a:	4152      	adcs	r2, r2
2000348c:	0883      	lsrs	r3, r0, #2
2000348e:	428b      	cmp	r3, r1
20003490:	d301      	bcc.n	20003496 <__divsi3+0xea>
20003492:	008b      	lsls	r3, r1, #2
20003494:	1ac0      	subs	r0, r0, r3
20003496:	4152      	adcs	r2, r2
20003498:	0843      	lsrs	r3, r0, #1
2000349a:	428b      	cmp	r3, r1
2000349c:	d301      	bcc.n	200034a2 <__divsi3+0xf6>
2000349e:	004b      	lsls	r3, r1, #1
200034a0:	1ac0      	subs	r0, r0, r3
200034a2:	4152      	adcs	r2, r2
200034a4:	1a41      	subs	r1, r0, r1
200034a6:	d200      	bcs.n	200034aa <__divsi3+0xfe>
200034a8:	4601      	mov	r1, r0
200034aa:	4152      	adcs	r2, r2
200034ac:	4610      	mov	r0, r2
200034ae:	4770      	bx	lr
200034b0:	e05d      	b.n	2000356e <__divsi3+0x1c2>
200034b2:	0fca      	lsrs	r2, r1, #31
200034b4:	d000      	beq.n	200034b8 <__divsi3+0x10c>
200034b6:	4249      	negs	r1, r1
200034b8:	1003      	asrs	r3, r0, #32
200034ba:	d300      	bcc.n	200034be <__divsi3+0x112>
200034bc:	4240      	negs	r0, r0
200034be:	4053      	eors	r3, r2
200034c0:	2200      	movs	r2, #0
200034c2:	469c      	mov	ip, r3
200034c4:	0903      	lsrs	r3, r0, #4
200034c6:	428b      	cmp	r3, r1
200034c8:	d32d      	bcc.n	20003526 <__divsi3+0x17a>
200034ca:	0a03      	lsrs	r3, r0, #8
200034cc:	428b      	cmp	r3, r1
200034ce:	d312      	bcc.n	200034f6 <__divsi3+0x14a>
200034d0:	22fc      	movs	r2, #252	; 0xfc
200034d2:	0189      	lsls	r1, r1, #6
200034d4:	ba12      	rev	r2, r2
200034d6:	0a03      	lsrs	r3, r0, #8
200034d8:	428b      	cmp	r3, r1
200034da:	d30c      	bcc.n	200034f6 <__divsi3+0x14a>
200034dc:	0189      	lsls	r1, r1, #6
200034de:	1192      	asrs	r2, r2, #6
200034e0:	428b      	cmp	r3, r1
200034e2:	d308      	bcc.n	200034f6 <__divsi3+0x14a>
200034e4:	0189      	lsls	r1, r1, #6
200034e6:	1192      	asrs	r2, r2, #6
200034e8:	428b      	cmp	r3, r1
200034ea:	d304      	bcc.n	200034f6 <__divsi3+0x14a>
200034ec:	0189      	lsls	r1, r1, #6
200034ee:	d03a      	beq.n	20003566 <__divsi3+0x1ba>
200034f0:	1192      	asrs	r2, r2, #6
200034f2:	e000      	b.n	200034f6 <__divsi3+0x14a>
200034f4:	0989      	lsrs	r1, r1, #6
200034f6:	09c3      	lsrs	r3, r0, #7
200034f8:	428b      	cmp	r3, r1
200034fa:	d301      	bcc.n	20003500 <__divsi3+0x154>
200034fc:	01cb      	lsls	r3, r1, #7
200034fe:	1ac0      	subs	r0, r0, r3
20003500:	4152      	adcs	r2, r2
20003502:	0983      	lsrs	r3, r0, #6
20003504:	428b      	cmp	r3, r1
20003506:	d301      	bcc.n	2000350c <__divsi3+0x160>
20003508:	018b      	lsls	r3, r1, #6
2000350a:	1ac0      	subs	r0, r0, r3
2000350c:	4152      	adcs	r2, r2
2000350e:	0943      	lsrs	r3, r0, #5
20003510:	428b      	cmp	r3, r1
20003512:	d301      	bcc.n	20003518 <__divsi3+0x16c>
20003514:	014b      	lsls	r3, r1, #5
20003516:	1ac0      	subs	r0, r0, r3
20003518:	4152      	adcs	r2, r2
2000351a:	0903      	lsrs	r3, r0, #4
2000351c:	428b      	cmp	r3, r1
2000351e:	d301      	bcc.n	20003524 <__divsi3+0x178>
20003520:	010b      	lsls	r3, r1, #4
20003522:	1ac0      	subs	r0, r0, r3
20003524:	4152      	adcs	r2, r2
20003526:	08c3      	lsrs	r3, r0, #3
20003528:	428b      	cmp	r3, r1
2000352a:	d301      	bcc.n	20003530 <__divsi3+0x184>
2000352c:	00cb      	lsls	r3, r1, #3
2000352e:	1ac0      	subs	r0, r0, r3
20003530:	4152      	adcs	r2, r2
20003532:	0883      	lsrs	r3, r0, #2
20003534:	428b      	cmp	r3, r1
20003536:	d301      	bcc.n	2000353c <__divsi3+0x190>
20003538:	008b      	lsls	r3, r1, #2
2000353a:	1ac0      	subs	r0, r0, r3
2000353c:	4152      	adcs	r2, r2
2000353e:	d2d9      	bcs.n	200034f4 <__divsi3+0x148>
20003540:	0843      	lsrs	r3, r0, #1
20003542:	428b      	cmp	r3, r1
20003544:	d301      	bcc.n	2000354a <__divsi3+0x19e>
20003546:	004b      	lsls	r3, r1, #1
20003548:	1ac0      	subs	r0, r0, r3
2000354a:	4152      	adcs	r2, r2
2000354c:	1a41      	subs	r1, r0, r1
2000354e:	d200      	bcs.n	20003552 <__divsi3+0x1a6>
20003550:	4601      	mov	r1, r0
20003552:	4663      	mov	r3, ip
20003554:	4152      	adcs	r2, r2
20003556:	105b      	asrs	r3, r3, #1
20003558:	4610      	mov	r0, r2
2000355a:	d301      	bcc.n	20003560 <__divsi3+0x1b4>
2000355c:	4240      	negs	r0, r0
2000355e:	2b00      	cmp	r3, #0
20003560:	d500      	bpl.n	20003564 <__divsi3+0x1b8>
20003562:	4249      	negs	r1, r1
20003564:	4770      	bx	lr
20003566:	4663      	mov	r3, ip
20003568:	105b      	asrs	r3, r3, #1
2000356a:	d300      	bcc.n	2000356e <__divsi3+0x1c2>
2000356c:	4240      	negs	r0, r0
2000356e:	b501      	push	{r0, lr}
20003570:	2000      	movs	r0, #0
20003572:	f000 f805 	bl	20003580 <__aeabi_idiv0>
20003576:	bd02      	pop	{r1, pc}

20003578 <__aeabi_idivmod>:
20003578:	2900      	cmp	r1, #0
2000357a:	d0f8      	beq.n	2000356e <__divsi3+0x1c2>
2000357c:	e716      	b.n	200033ac <__divsi3>
2000357e:	4770      	bx	lr

20003580 <__aeabi_idiv0>:
20003580:	4770      	bx	lr
20003582:	46c0      	nop			; (mov r8, r8)

20003584 <counter>:
20003584:	00000000 	andeq	r0, r0, r0

20003588 <distance_player_fire.4293>:
20003588:	00000000 	andeq	r0, r0, r0

2000358c <test.4295>:
2000358c:	00000000 	andeq	r0, r0, r0

20003590 <nGameObjects>:
20003590:	00000000 	andeq	r0, r0, r0

20003594 <lastJumpValue.4092>:
20003594:	00000000 	andeq	r0, r0, r0

20003598 <ySpeed.4096>:
20003598:	00000000 	andeq	r0, r0, r0

2000359c <lastRightValue.4093>:
2000359c:	00000000 	andeq	r0, r0, r0

200035a0 <xSpeed.4095>:
200035a0:	00000000 	andeq	r0, r0, r0

200035a4 <lastLeftValue.4094>:
200035a4:	00000000 	andeq	r0, r0, r0

200035a8 <counter.4071>:
200035a8:	00000000 	andeq	r0, r0, r0

200035ac <monster>:
200035ac:	00000000 	andeq	r0, r0, r0

200035b0 <tempCastleBlack>:
	...

200035bc <tempPressGray>:
	...

200035c8 <tempTitleGray>:
	...

200035d4 <castleBlack>:
200035d4:	00000000 	andeq	r0, r0, r0

200035d8 <tempMonster>:
	...

200035e4 <pressLight>:
200035e4:	00000000 	andeq	r0, r0, r0

200035e8 <tempTitleBlack>:
	...

200035f4 <bg>:
200035f4:	00000000 	andeq	r0, r0, r0

200035f8 <tempMonsterGray>:
	...

20003604 <tempTitleLight>:
	...

20003610 <castleLight>:
20003610:	00000000 	andeq	r0, r0, r0

20003614 <tempPressLight>:
	...

20003620 <tempCastleLight>:
	...

2000362c <pressGray>:
2000362c:	00000000 	andeq	r0, r0, r0

20003630 <tempMonsterLight>:
	...

2000363c <tempPressBlack>:
	...

20003648 <titleGray>:
20003648:	00000000 	andeq	r0, r0, r0

2000364c <tempCastleGray>:
	...

20003658 <monsterLight>:
20003658:	00000000 	andeq	r0, r0, r0

2000365c <titleLight>:
2000365c:	00000000 	andeq	r0, r0, r0

20003660 <castleGray>:
20003660:	00000000 	andeq	r0, r0, r0

20003664 <random_seed>:
20003664:	00000000 	andeq	r0, r0, r0

20003668 <pressBlack>:
20003668:	00000000 	andeq	r0, r0, r0

2000366c <monsterGray>:
2000366c:	00000000 	andeq	r0, r0, r0

20003670 <tempBg>:
	...

2000367c <titleBlack>:
2000367c:	00000000 	andeq	r0, r0, r0

20003680 <gameObjects>:
	...

20003810 <fire1Light>:
20003810:	00000000 	andeq	r0, r0, r0

20003814 <tempFire3Light>:
	...

20003820 <fire3Gray>:
20003820:	00000000 	andeq	r0, r0, r0

20003824 <tempFire4Gray>:
	...

20003830 <fire2Image>:
	...

2000383c <tempFire2Gray>:
	...

20003848 <tempFireBlack>:
	...

20003854 <fire3Image>:
	...

20003860 <tempFire4Light>:
	...

2000386c <fire1Image>:
	...

20003878 <fire4Light>:
20003878:	00000000 	andeq	r0, r0, r0

2000387c <fireObj>:
	...

200038a0 <fire5Image>:
	...

200038ac <fireImages>:
	...

200038e8 <tempFire5Gray>:
	...

200038f4 <tempFire3Gray>:
	...

20003900 <fire4Image>:
	...

2000390c <fire4Gray>:
2000390c:	00000000 	andeq	r0, r0, r0

20003910 <tempFire1Light>:
	...

2000391c <tempFire5Light>:
	...

20003928 <fire5Gray>:
20003928:	00000000 	andeq	r0, r0, r0

2000392c <fire2Light>:
2000392c:	00000000 	andeq	r0, r0, r0

20003930 <fire5Light>:
20003930:	00000000 	andeq	r0, r0, r0

20003934 <tempFire1Gray>:
	...

20003940 <fireBlack>:
20003940:	00000000 	andeq	r0, r0, r0

20003944 <tempFire2Light>:
	...

20003950 <fire3Light>:
20003950:	00000000 	andeq	r0, r0, r0

20003954 <fire2Gray>:
20003954:	00000000 	andeq	r0, r0, r0

20003958 <fire1Gray>:
20003958:	00000000 	andeq	r0, r0, r0

2000395c <bird4Light>:
2000395c:	00000000 	andeq	r0, r0, r0

20003960 <bird1Gray>:
20003960:	00000000 	andeq	r0, r0, r0

20003964 <bird6Image>:
	...

20003970 <bird5Black>:
20003970:	00000000 	andeq	r0, r0, r0

20003974 <tempBird4Black>:
	...

20003980 <bird2Image>:
	...

2000398c <birdObj>:
	...

200039b0 <bird1Image>:
	...

200039bc <bird3Black>:
200039bc:	00000000 	andeq	r0, r0, r0

200039c0 <bird4Gray>:
200039c0:	00000000 	andeq	r0, r0, r0

200039c4 <bird2Black>:
200039c4:	00000000 	andeq	r0, r0, r0

200039c8 <bird1Black>:
200039c8:	00000000 	andeq	r0, r0, r0

200039cc <bird4Image>:
	...

200039d8 <tempBirdBlack>:
	...

200039e4 <bird3Gray>:
200039e4:	00000000 	andeq	r0, r0, r0

200039e8 <tempBirdGray>:
	...

200039f4 <bird5Gray>:
200039f4:	00000000 	andeq	r0, r0, r0

200039f8 <tempBird5Light>:
	...

20003a04 <tempBird2Gray>:
	...

20003a10 <bird3Light>:
20003a10:	00000000 	andeq	r0, r0, r0

20003a14 <tempBird5Gray>:
	...

20003a20 <tempBird5Black>:
	...

20003a2c <bird5Image>:
	...

20003a38 <bird5Light>:
20003a38:	00000000 	andeq	r0, r0, r0

20003a3c <tempBird3Black>:
	...

20003a48 <bird2Gray>:
20003a48:	00000000 	andeq	r0, r0, r0

20003a4c <tempBirdLight>:
	...

20003a58 <bird1Light>:
20003a58:	00000000 	andeq	r0, r0, r0

20003a5c <tempBird2Light>:
	...

20003a68 <bird3Image>:
	...

20003a74 <tempBird4Light>:
	...

20003a80 <tempBird3Light>:
	...

20003a8c <tempBird3Gray>:
	...

20003a98 <birdImages>:
	...

20003ae0 <bird4Black>:
20003ae0:	00000000 	andeq	r0, r0, r0

20003ae4 <tempBird2Black>:
	...

20003af0 <tempBird4Gray>:
	...

20003afc <bird2Light>:
20003afc:	00000000 	andeq	r0, r0, r0

20003b00 <witch1Gray>:
20003b00:	00000000 	andeq	r0, r0, r0

20003b04 <witch2Light>:
20003b04:	00000000 	andeq	r0, r0, r0

20003b08 <witchImages>:
	...

20003b38 <witch2Image>:
	...

20003b44 <tempWitch2Black>:
	...

20003b50 <tempWitchBlack>:
	...

20003b5c <tempWitch3Light>:
	...

20003b68 <witch4Image>:
	...

20003b74 <witch2Gray>:
20003b74:	00000000 	andeq	r0, r0, r0

20003b78 <tempWitchGray>:
	...

20003b84 <tempWitch3Black>:
	...

20003b90 <tempWitch2Gray>:
	...

20003b9c <witch3Black>:
20003b9c:	00000000 	andeq	r0, r0, r0

20003ba0 <witchObj>:
	...

20003bc4 <witch3Light>:
20003bc4:	00000000 	andeq	r0, r0, r0

20003bc8 <tempWitch3Gray>:
	...

20003bd4 <witch1Black>:
20003bd4:	00000000 	andeq	r0, r0, r0

20003bd8 <witch3Gray>:
20003bd8:	00000000 	andeq	r0, r0, r0

20003bdc <witch1Image>:
	...

20003be8 <tempWitchLight>:
	...

20003bf4 <tempWitch2Light>:
	...

20003c00 <witch1Light>:
20003c00:	00000000 	andeq	r0, r0, r0

20003c04 <witch3Image>:
	...

20003c10 <witch2Black>:
20003c10:	00000000 	andeq	r0, r0, r0

20003c14 <DIPObj>:
	...

20003c38 <DIP2Image>:
	...

20003c44 <DIP2Gray>:
20003c44:	00000000 	andeq	r0, r0, r0

20003c48 <tempDIP2Gray>:
	...

20003c54 <DIP3Black>:
20003c54:	00000000 	andeq	r0, r0, r0

20003c58 <DIP1Black>:
20003c58:	00000000 	andeq	r0, r0, r0

20003c5c <tempDIPLight>:
	...

20003c68 <tempDIP3Light>:
	...

20003c74 <DIPImages>:
	...

20003ca4 <tempDIP2Black>:
	...

20003cb0 <DIP3Image>:
	...

20003cbc <DIP1Image>:
	...

20003cc8 <DIP1Light>:
20003cc8:	00000000 	andeq	r0, r0, r0

20003ccc <DIP2Light>:
20003ccc:	00000000 	andeq	r0, r0, r0

20003cd0 <DIP3Light>:
20003cd0:	00000000 	andeq	r0, r0, r0

20003cd4 <DIP2Black>:
20003cd4:	00000000 	andeq	r0, r0, r0

20003cd8 <tempDIP3Gray>:
	...

20003ce4 <tempDIPBlack>:
	...

20003cf0 <DIP1Gray>:
20003cf0:	00000000 	andeq	r0, r0, r0

20003cf4 <tempDIP3Black>:
	...

20003d00 <DIP3Gray>:
20003d00:	00000000 	andeq	r0, r0, r0

20003d04 <DIP4Image>:
	...

20003d10 <tempDIP2Light>:
	...

20003d1c <tempDIPGray>:
	...

20003d28 <backBufferGray>:
	...

20004128 <draw_buffer_black_gray>:
	...

20004528 <backBuffer>:
	...

20004928 <draw_buffer_black_light>:
	...

20004d28 <draw_buffer_black>:
	...

20005128 <draw_buffer_black_gray_light>:
	...

20005528 <backBufferLight>:
	...

20005928 <tempIndoorsGray>:
	...

20005934 <tempIndoorsLight>:
	...

20005940 <tempIndoorsBlack>:
	...

2000594c <indoorsGray>:
2000594c:	00000000 	andeq	r0, r0, r0

20005950 <indoorsObj>:
	...

20005974 <indoorsImages>:
	...

20005980 <indoorsBlack>:
20005980:	00000000 	andeq	r0, r0, r0

20005984 <indoorsImage>:
	...

20005990 <indoorsLight>:
20005990:	00000000 	andeq	r0, r0, r0

20005994 <indoors2Obj>:
	...

200059b8 <indoors2Gray>:
200059b8:	00000000 	andeq	r0, r0, r0

200059bc <indoors2Images>:
	...

200059c8 <indoors2Image>:
	...

200059d4 <tempIndoors2Gray>:
	...

200059e0 <indoors2Light>:
200059e0:	00000000 	andeq	r0, r0, r0

200059e4 <tempIndoors2Black>:
	...

200059f0 <tempIndoors2Light>:
	...

200059fc <indoors2Black>:
200059fc:	00000000 	andeq	r0, r0, r0

20005a00 <monster_black_bits>:
	...
20005a10:	0001c000 	andeq	ip, r1, r0
20005a14:	00023000 	andeq	r3, r2, r0
20005a18:	00021000 	andeq	r1, r2, r0
20005a1c:	00060800 	andeq	r0, r6, r0, lsl #16
20005a20:	00040800 	andeq	r0, r4, r0, lsl #16
20005a24:	00040800 	andeq	r0, r4, r0, lsl #16
20005a28:	00092800 	andeq	r2, r9, r0, lsl #16
20005a2c:	00092800 	andeq	r2, r9, r0, lsl #16
20005a30:	00100400 	andseq	r0, r0, r0, lsl #8
20005a34:	00100400 	andseq	r0, r0, r0, lsl #8
20005a38:	00200200 	eoreq	r0, r0, r0, lsl #4
20005a3c:	00661b00 	rsbeq	r1, r6, r0, lsl #22
20005a40:	0043b100 	subeq	fp, r3, r0, lsl #2
20005a44:	0080e080 	addeq	lr, r0, r0, lsl #1
20005a48:	01800080 	orreq	r0, r0, r0, lsl #1
20005a4c:	01000040 	tsteq	r0, r0, asr #32
20005a50:	02000040 	andeq	r0, r0, #64	; 0x40
20005a54:	02000060 	andeq	r0, r0, #96	; 0x60
20005a58:	02000020 	andeq	r0, r0, #32
20005a5c:	03ff03e0 	mvnseq	r0, #224, 6	; 0x80000003
20005a60:	0001fc00 	andeq	pc, r1, r0, lsl #24
	...

20005a78 <monster_light_bits>:
	...
20005a8c:	00010000 	andeq	r0, r1, r0
20005a90:	00018000 	andeq	r8, r1, r0
20005a94:	0001f000 	andeq	pc, r1, r0
20005a98:	0001f000 	andeq	pc, r1, r0
20005a9c:	00009000 	andeq	r9, r0, r0
20005aa0:	00009000 	andeq	r9, r0, r0
20005aa4:	0000d000 	andeq	sp, r0, r0
20005aa8:	0001f800 	andeq	pc, r1, r0, lsl #16
20005aac:	0003f800 	andeq	pc, r3, r0, lsl #16
20005ab0:	0003fc00 	andeq	pc, r3, r0, lsl #24
20005ab4:	0001e400 	andeq	lr, r1, r0, lsl #8
20005ab8:	00044c00 	andeq	r4, r4, r0, lsl #24
20005abc:	00060c00 	andeq	r0, r6, r0, lsl #24
20005ac0:	0006ee00 	andeq	lr, r6, r0, lsl #28
20005ac4:	000ffe00 	andeq	pc, pc, r0, lsl #28
20005ac8:	000f3f00 	andeq	r3, pc, r0, lsl #30
20005acc:	00000780 	andeq	r0, r0, r0, lsl #15
20005ad0:	000003c0 	andeq	r0, r0, r0, asr #7
	...

20005af0 <monster_gray_bits>:
	...
20005b10:	00020000 	andeq	r0, r2, r0
20005b14:	00000000 	andeq	r0, r0, r0
20005b18:	00040000 	andeq	r0, r4, r0
20005b1c:	00060000 	andeq	r0, r6, r0
20005b20:	000e0000 	andeq	r0, lr, r0
20005b24:	000c0000 	andeq	r0, ip, r0
20005b28:	001c0000 	andseq	r0, ip, r0
20005b2c:	00180000 	andseq	r0, r8, r0
20005b30:	00380000 	eorseq	r0, r8, r0
20005b34:	00780000 	rsbseq	r0, r8, r0
20005b38:	00780000 	rsbseq	r0, r8, r0
20005b3c:	00f00000 	rscseq	r0, r0, r0
20005b40:	01f0c000 	mvnseq	ip, r0
20005b44:	01fff800 	mvnseq	pc, r0, lsl #16
20005b48:	01fffc00 	mvnseq	pc, r0, lsl #24
20005b4c:	0000fc00 	andeq	pc, r0, r0, lsl #24
	...

20005b68 <press_black_bits>:
	...
20005ba0:	001c0000 	andseq	r0, ip, r0
20005ba4:	00000000 	andeq	r0, r0, r0
20005ba8:	00240000 	eoreq	r0, r4, r0
20005bac:	00000000 	andeq	r0, r0, r0
20005bb0:	00440000 	subeq	r0, r4, r0
20005bb4:	00000000 	andeq	r0, r0, r0
20005bb8:	c5240000 	strgt	r0, [r4, #-0]!
20005bbc:	00000198 	muleq	r0, r8, r1
20005bc0:	2b1c0000 	blcs	20705bc8 <firstTime.4040+0x6fc820>
20005bc4:	00000045 	andeq	r0, r0, r5, asr #32
20005bc8:	e1040000 	mrs	r0, (UNDEF: 4)
20005bcc:	000000cd 	andeq	r0, r0, sp, asr #1
20005bd0:	21040000 	mrscs	r0, (UNDEF: 4)
20005bd4:	00000110 	andeq	r0, r0, r0, lsl r1
20005bd8:	c1040000 	mrsgt	r0, (UNDEF: 4)
20005bdc:	000000cc 	andeq	r0, r0, ip, asr #1
	...
20005c0c:	00000004 	andeq	r0, r0, r4
20005c10:	00000000 	andeq	r0, r0, r0
20005c14:	00000004 	andeq	r0, r0, r4
20005c18:	00000000 	andeq	r0, r0, r0
20005c1c:	00000004 	andeq	r0, r0, r4
20005c20:	0494e000 	ldreq	lr, [r4], #0
20005c24:	00009334 	andeq	r9, r0, r4, lsr r3
20005c28:	04ac9000 	strteq	r9, [ip], #0
20005c2c:	00009494 	muleq	r0, r4, r4
20005c30:	04a49000 	strteq	r9, [r4], #0
20005c34:	0000978c 	andeq	r9, r0, ip, lsl #15
20005c38:	04a49000 	strteq	r9, [r4], #0
20005c3c:	00009094 	muleq	r0, r4, r0
20005c40:	07256000 	streq	r6, [r5, -r0]!
20005c44:	0000e324 	andeq	lr, r0, r4, lsr #6
20005c48:	04000000 	streq	r0, [r0], #-0
20005c4c:	00008000 	andeq	r8, r0, r0
20005c50:	04000000 	streq	r0, [r0], #-0
20005c54:	00008000 	andeq	r8, r0, r0
20005c58:	03000000 	movweq	r0, #0
20005c5c:	00006000 	andeq	r6, r0, r0
	...

20005c80 <press_light_bits>:
	...
20005cc0:	00000200 	andeq	r0, r0, r0, lsl #4
20005cc4:	00000000 	andeq	r0, r0, r0
20005cc8:	00000700 	andeq	r0, r0, r0, lsl #14
20005ccc:	00000000 	andeq	r0, r0, r0
20005cd0:	00000200 	andeq	r0, r0, r0, lsl #4
	...
20005d14:	00800000 	addeq	r0, r0, r0
20005d18:	00000000 	andeq	r0, r0, r0
20005d1c:	01c00000 	biceq	r0, r0, r0
20005d20:	00000000 	andeq	r0, r0, r0
20005d24:	00800000 	addeq	r0, r0, r0
20005d28:	00000010 	andeq	r0, r0, r0, lsl r0
20005d2c:	00000000 	andeq	r0, r0, r0
20005d30:	00000038 	andeq	r0, r0, r8, lsr r0
20005d34:	00000000 	andeq	r0, r0, r0
20005d38:	00000010 	andeq	r0, r0, r0, lsl r0
	...

20005d98 <press_gray_bits>:
	...
20005dd8:	00180000 	andseq	r0, r8, r0
20005ddc:	00000000 	andeq	r0, r0, r0
20005de0:	00380000 	eorseq	r0, r8, r0
20005de4:	00000000 	andeq	r0, r0, r0
20005de8:	00580000 	subseq	r0, r8, r0
20005dec:	00000020 	andeq	r0, r0, r0, lsr #32
20005df0:	d4200000 	strtle	r0, [r0], #-0
20005df4:	0000039a 	muleq	r0, sl, r3
20005df8:	0a380000 	beq	20e05e00 <firstTime.4040+0xdfca58>
20005dfc:	00000102 	andeq	r0, r0, r2, lsl #2
20005e00:	c2080000 	andgt	r0, r8, #0
20005e04:	00000223 	andeq	r0, r0, r3, lsr #4
20005e08:	02080000 	andeq	r0, r8, #0
20005e0c:	00000311 	andeq	r0, r0, r1, lsl r3
20005e10:	c1080000 	mrsgt	r0, (UNDEF: 8)
20005e14:	000001dd 	ldrdeq	r0, [r0], -sp
	...
20005e44:	00000008 	andeq	r0, r0, r8
20005e48:	00000000 	andeq	r0, r0, r0
20005e4c:	00000008 	andeq	r0, r0, r8
20005e50:	00000000 	andeq	r0, r0, r0
20005e54:	00000008 	andeq	r0, r0, r8
20005e58:	09116000 	ldmdbeq	r1, {sp, lr}
20005e5c:	00012328 	andeq	r2, r1, r8, lsr #6
20005e60:	09596000 	ldmdbeq	r9, {sp, lr}^
20005e64:	00012810 	andeq	r2, r1, r0, lsl r8
20005e68:	0b492000 	bleq	2124de70 <firstTime.4040+0x1244ac8>
20005e6c:	00012f08 	andeq	r2, r1, r8, lsl #30
20005e70:	08488000 	stmdaeq	r8, {pc}^
20005e74:	00010458 	andeq	r0, r1, r8, asr r4
20005e78:	0b6be000 	bleq	21afde80 <firstTime.4040+0x1af4ad8>
20005e7c:	00016768 	andeq	r6, r1, r8, ror #14
20005e80:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
20005e84:	00010000 	andeq	r0, r1, r0
20005e88:	0c000000 	stceq	0, cr0, [r0], {-0}
20005e8c:	00018000 	andeq	r8, r1, r0
20005e90:	06000000 	streq	r0, [r0], -r0
20005e94:	0000c000 	andeq	ip, r0, r0
	...

20005eb0 <castle_black_bits>:
20005eb0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005eb4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005eb8:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005ebc:	00000000 	andeq	r0, r0, r0
20005ec0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005ec4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005ec8:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20005ecc:	00000000 	andeq	r0, r0, r0
20005ed0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005ed4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005ed8:	00000001 	andeq	r0, r0, r1
20005edc:	00000000 	andeq	r0, r0, r0
20005ee0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005ee4:	7fffffff 	svcvc	0x00ffffff
	...
20005ef0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005ef4:	3fffffff 	svccc	0x00ffffff
	...
20005f00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005f04:	1fffffff 	svcne	0x00ffffff
	...
20005f10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005f14:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
	...
20005f20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005f24:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
	...
20005f30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005f34:	01ffffff 	ldrsheq	pc, [pc, #255]	; 2000603b <castle_black_bits+0x18b>	; <UNPREDICTABLE>
	...
20005f40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005f44:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
	...
20005f50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005f54:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
	...
20005f60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005f64:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20005f70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005f74:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20005f80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005f84:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20005f90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005f94:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
20005fa0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005fa4:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
20005fb0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005fb4:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20005fc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005fc4:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20005fd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005fd4:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
20005fe0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005fe4:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20005ff0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20005ff4:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20006000:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006004:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
20006010:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006014:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
20006018:	04900000 	ldreq	r0, [r0], #0
2000601c:	00000000 	andeq	r0, r0, r0
20006020:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006024:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
20006028:	0b680000 	bleq	21a06030 <firstTime.4040+0x19fcc88>
2000602c:	00000000 	andeq	r0, r0, r0
20006030:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006034:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20006038:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
2000603c:	00000000 	andeq	r0, r0, r0
20006040:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006044:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20006048:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
2000604c:	00000092 	muleq	r0, r2, r0
20006050:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006054:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20006058:	04100000 	ldreq	r0, [r0], #-0
2000605c:	0000016d 	andeq	r0, r0, sp, ror #2
20006060:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006064:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20006068:	04101240 	ldreq	r1, [r0], #-576	; 0xfffffdc0
2000606c:	00000101 	andeq	r0, r0, r1, lsl #2
20006070:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006074:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20006078:	04102da0 	ldreq	r2, [r0], #-3488	; 0xfffff260
2000607c:	00000101 	andeq	r0, r0, r1, lsl #2
20006080:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006084:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20006088:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
2000608c:	00000101 	andeq	r0, r0, r1, lsl #2
20006090:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006094:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20006098:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
2000609c:	00000101 	andeq	r0, r0, r1, lsl #2
200060a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200060a4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200060a8:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
200060ac:	00000082 	andeq	r0, r0, r2, lsl #1
200060b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200060b4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200060b8:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
200060bc:	00000092 	muleq	r0, r2, r0
200060c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200060c4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200060c8:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
200060cc:	012400a2 	smulwbeq	r4, r2, r0
200060d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200060d4:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
200060d8:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
200060dc:	02da00a2 	sbcseq	r0, sl, #162	; 0xa2
200060e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200060e4:	00004fff 	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
200060e8:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
200060ec:	020200a2 	andeq	r0, r2, #162	; 0xa2
200060f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200060f4:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200060f8:	08081040 	stmdaeq	r8, {r6, ip}
200060fc:	0202009a 	andeq	r0, r2, #154	; 0x9a
20006100:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006104:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006108:	08082020 	stmdaeq	r8, {r5, sp}
2000610c:	01040082 	smlabbeq	r4, r2, r0, r0
20006110:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006114:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006118:	48082020 	stmdami	r8, {r5, sp}
2000611c:	01040102 	tsteq	r4, r2, lsl #2
20006120:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006124:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006128:	b0082020 	andlt	r2, r8, r0, lsr #32
2000612c:	01040101 	tsteq	r4, r1, lsl #2
20006130:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006134:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006138:	00082220 	andeq	r2, r8, r0, lsr #4
2000613c:	01040100 	mrseq	r0, (UNDEF: 20)
20006140:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006144:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006148:	00882420 	addeq	r2, r8, r0, lsr #8
2000614c:	01040100 	mrseq	r0, (UNDEF: 20)
20006150:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006154:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006158:	01082420 	tsteq	r8, r0, lsr #8
2000615c:	01045a00 	tsteq	r4, r0, lsl #20
20006160:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006164:	0000007f 	andeq	r0, r0, pc, ror r0
20006168:	01082420 	tsteq	r8, r0, lsr #8
2000616c:	0104a400 	tsteq	r4, r0, lsl #8
20006170:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006174:	00000001 	andeq	r0, r0, r1
20006178:	010b2320 	tsteq	fp, r0, lsr #6
2000617c:	01030001 	tsteq	r3, r1
20006180:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006184:	00000000 	andeq	r0, r0, r0
20006188:	00c4c020 	sbceq	ip, r4, r0, lsr #32
2000618c:	02000002 	andeq	r0, r0, #2
20006190:	3fffffff 	svccc	0x00ffffff
20006194:	00000000 	andeq	r0, r0, r0
20006198:	00000020 	andeq	r0, r0, r0, lsr #32
2000619c:	02200002 	eoreq	r0, r0, #2
200061a0:	3fffffff 	svccc	0x00ffffff
200061a4:	00000000 	andeq	r0, r0, r0
200061a8:	00000020 	andeq	r0, r0, r0, lsr #32
200061ac:	02400002 	subeq	r0, r0, #2
200061b0:	1fffffff 	svcne	0x00ffffff
200061b4:	00000000 	andeq	r0, r0, r0
200061b8:	80000020 	andhi	r0, r0, r0, lsr #32
200061bc:	02400001 	subeq	r0, r0, #1
200061c0:	1fffffff 	svcne	0x00ffffff
200061c4:	00000000 	andeq	r0, r0, r0
200061c8:	00000010 	andeq	r0, r0, r0, lsl r0
200061cc:	02400000 	subeq	r0, r0, #0
200061d0:	0fffffff 	svceq	0x00ffffff
200061d4:	00000000 	andeq	r0, r0, r0
200061d8:	00000010 	andeq	r0, r0, r0, lsl r0
200061dc:	02300000 	eorseq	r0, r0, #0
200061e0:	0fffffff 	svceq	0x00ffffff
200061e4:	00000000 	andeq	r0, r0, r0
200061e8:	00000010 	andeq	r0, r0, r0, lsl r0
200061ec:	02000000 	andeq	r0, r0, #0
200061f0:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
200061f4:	00000000 	andeq	r0, r0, r0
200061f8:	00000010 	andeq	r0, r0, r0, lsl r0
200061fc:	04000000 	streq	r0, [r0], #-0
20006200:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
20006204:	00000000 	andeq	r0, r0, r0
20006208:	00000010 	andeq	r0, r0, r0, lsl r0
2000620c:	04000000 	streq	r0, [r0], #-0
20006210:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20006317 <castle_gray_bits+0x67>	; <UNPREDICTABLE>
20006214:	00000000 	andeq	r0, r0, r0
20006218:	00000008 	andeq	r0, r0, r8
2000621c:	04000000 	streq	r0, [r0], #-0
20006220:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20006327 <castle_gray_bits+0x77>	; <UNPREDICTABLE>
20006224:	00000000 	andeq	r0, r0, r0
20006228:	00000008 	andeq	r0, r0, r8
2000622c:	04000000 	streq	r0, [r0], #-0
20006230:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20006234:	00000000 	andeq	r0, r0, r0
20006238:	00000008 	andeq	r0, r0, r8
2000623c:	060001c0 	streq	r0, [r0], -r0, asr #3
20006240:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20006244:	00000000 	andeq	r0, r0, r0
20006248:	00000008 	andeq	r0, r0, r8
2000624c:	04000220 	streq	r0, [r0], #-544	; 0xfffffde0
20006250:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
20006254:	00000000 	andeq	r0, r0, r0
20006258:	00000008 	andeq	r0, r0, r8
2000625c:	04100400 	ldreq	r0, [r0], #-1024	; 0xfffffc00
20006260:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
20006264:	00000000 	andeq	r0, r0, r0
20006268:	00000008 	andeq	r0, r0, r8
2000626c:	04a00400 	strteq	r0, [r0], #1024	; 0x400
20006270:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
20006274:	00000000 	andeq	r0, r0, r0
20006278:	00000008 	andeq	r0, r0, r8
2000627c:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
20006280:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
20006284:	00000000 	andeq	r0, r0, r0
20006288:	00000008 	andeq	r0, r0, r8
2000628c:	07400400 	strbeq	r0, [r0, -r0, lsl #8]
20006290:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20006294:	00000000 	andeq	r0, r0, r0
20006298:	00000008 	andeq	r0, r0, r8
2000629c:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
200062a0:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200062a4:	00000000 	andeq	r0, r0, r0
200062a8:	00000008 	andeq	r0, r0, r8
200062ac:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00

200062b0 <castle_gray_bits>:
	...
200062b8:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
200062bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
200062c8:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200062cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
200062d8:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
200062dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200062e0:	00000000 	andeq	r0, r0, r0
200062e4:	80000000 	andhi	r0, r0, r0
200062e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200062ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200062f0:	00000000 	andeq	r0, r0, r0
200062f4:	c0000000 	andgt	r0, r0, r0
200062f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200062fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006300:	00000000 	andeq	r0, r0, r0
20006304:	e0000000 	and	r0, r0, r0
20006308:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000630c:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
20006310:	00000000 	andeq	r0, r0, r0
20006314:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20006318:	f3ffcfff 			; <UNDEFINED> instruction: 0xf3ffcfff
2000631c:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
20006320:	00000000 	andeq	r0, r0, r0
20006324:	fc000000 	stc2	0, cr0, [r0], {-0}
20006328:	f1ff8fff 			; <UNDEFINED> instruction: 0xf1ff8fff
2000632c:	fff9ff3f 			; <UNDEFINED> instruction: 0xfff9ff3f
20006330:	00000000 	andeq	r0, r0, r0
20006334:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20006338:	f0ff8fef 			; <UNDEFINED> instruction: 0xf0ff8fef
2000633c:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
20006340:	00000000 	andeq	r0, r0, r0
20006344:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20006348:	e0ff87ef 	rscs	r8, pc, pc, ror #15
2000634c:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
20006350:	00000000 	andeq	r0, r0, r0
20006354:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20006358:	c07e07e7 	rsbsgt	r0, lr, r7, ror #15
2000635c:	ffe0fc1f 			; <UNDEFINED> instruction: 0xffe0fc1f
20006360:	00000000 	andeq	r0, r0, r0
20006364:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20006368:	001c07e7 	andseq	r0, ip, r7, ror #15
2000636c:	ffe0380e 	vcmla.f32	d19, d0, d14[0], #170
20006370:	00000000 	andeq	r0, r0, r0
20006374:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20006378:	000003e3 	andeq	r0, r0, r3, ror #7
2000637c:	f7c00000 			; <UNDEFINED> instruction: 0xf7c00000
20006380:	00000000 	andeq	r0, r0, r0
20006384:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20006388:	000001c3 	andeq	r0, r0, r3, asr #3
2000638c:	e7800000 	str	r0, [r0, r0]
20006390:	00000000 	andeq	r0, r0, r0
20006394:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20006398:	00000003 	andeq	r0, r0, r3
2000639c:	c3800000 	orrgt	r0, r0, #0
200063a0:	00000000 	andeq	r0, r0, r0
200063a4:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
200063a8:	00000001 	andeq	r0, r0, r1
200063ac:	c0000000 	andgt	r0, r0, r0
200063b0:	00000000 	andeq	r0, r0, r0
200063b4:	9ff00000 	svcls	0x00f00000	; IMB
200063b8:	00000001 	andeq	r0, r0, r1
200063bc:	80000000 	andhi	r0, r0, r0
200063c0:	00000000 	andeq	r0, r0, r0
200063c4:	8ff00000 	svchi	0x00f00000	; IMB
200063c8:	00000000 	andeq	r0, r0, r0
200063cc:	80000000 	andhi	r0, r0, r0
200063d0:	00000000 	andeq	r0, r0, r0
200063d4:	8ff80000 	svchi	0x00f80000
	...
200063e4:	0ffc0000 	svceq	0x00fc0000
	...
200063f4:	0ffc0000 	svceq	0x00fc0000
	...
20006404:	0ffc0000 	svceq	0x00fc0000
	...
20006414:	0ffc0000 	svceq	0x00fc0000
	...
20006424:	0ffc0000 	svceq	0x00fc0000
	...
20006434:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
20006444:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
20006454:	07fe0000 	ldrbeq	r0, [lr, r0]!
20006458:	03800000 	orreq	r0, r0, #0
	...
20006464:	03fe0000 	mvnseq	r0, #0
20006468:	02000000 	andeq	r0, r0, #0
	...
20006474:	03ff0000 	mvnseq	r0, #0
20006478:	02000000 	andeq	r0, r0, #0
	...
20006484:	03ff0000 	mvnseq	r0, #0
20006488:	02000000 	andeq	r0, r0, #0
	...
20006494:	03ff0000 	mvnseq	r0, #0
20006498:	02000000 	andeq	r0, r0, #0
	...
200064a4:	03ff0000 	mvnseq	r0, #0
200064a8:	02800c00 	addeq	r0, r0, #0, 24
200064ac:	00000060 	andeq	r0, r0, r0, rrx
200064b0:	00000000 	andeq	r0, r0, r0
200064b4:	03ff0000 	mvnseq	r0, #0
200064b8:	03000800 	movweq	r0, #2048	; 0x800
200064bc:	00000040 	andeq	r0, r0, r0, asr #32
200064c0:	00000000 	andeq	r0, r0, r0
200064c4:	03ff0000 	mvnseq	r0, #0
200064c8:	03000800 	movweq	r0, #2048	; 0x800
200064cc:	00000040 	andeq	r0, r0, r0, asr #32
200064d0:	00000000 	andeq	r0, r0, r0
200064d4:	03ff8000 	mvnseq	r8, #0
200064d8:	03000a00 	movweq	r0, #2560	; 0xa00
200064dc:	00000040 	andeq	r0, r0, r0, asr #32
200064e0:	00000000 	andeq	r0, r0, r0
200064e4:	01ffb000 	mvnseq	fp, r0
200064e8:	03000c00 	movweq	r0, #3072	; 0xc00
200064ec:	00000040 	andeq	r0, r0, r0, asr #32
200064f0:	00000000 	andeq	r0, r0, r0
200064f4:	01fff800 	mvnseq	pc, r0, lsl #16
200064f8:	07800c00 	streq	r0, [r0, r0, lsl #24]
200064fc:	00000060 	andeq	r0, r0, r0, rrx
20006500:	00000000 	andeq	r0, r0, r0
20006504:	01fffc00 	mvnseq	pc, r0, lsl #24
20006508:	04001800 	streq	r1, [r0], #-2048	; 0xfffff800
2000650c:	00c00058 	sbceq	r0, r0, r8, asr r0
20006510:	00000000 	andeq	r0, r0, r0
20006514:	00fffc00 	rscseq	pc, pc, r0, lsl #24
20006518:	06001400 	streq	r1, [r0], -r0, lsl #8
2000651c:	00c000c0 	sbceq	r0, r0, r0, asr #1
20006520:	00000000 	andeq	r0, r0, r0
20006524:	007ffc00 	rsbseq	pc, pc, r0, lsl #24
20006528:	45001000 	strmi	r1, [r0, #-0]
2000652c:	008000a0 	addeq	r0, r0, r0, lsr #1
20006530:	00000000 	andeq	r0, r0, r0
20006534:	007ffe00 	rsbseq	pc, pc, r0, lsl #28
20006538:	80001000 	andhi	r1, r0, r0
2000653c:	008000c1 	addeq	r0, r0, r1, asr #1
20006540:	00000000 	andeq	r0, r0, r0
20006544:	003ffe00 	eorseq	pc, pc, r0, lsl #28
20006548:	00001000 	andeq	r1, r0, r0
2000654c:	00a000f0 	strdeq	r0, [r0], r0	; <UNPREDICTABLE>
20006550:	00000000 	andeq	r0, r0, r0
20006554:	003fff00 	eorseq	pc, pc, r0, lsl #30
20006558:	00001000 	andeq	r1, r0, r0
2000655c:	00c000e0 	sbceq	r0, r0, r0, ror #1
20006560:	00000000 	andeq	r0, r0, r0
20006564:	001fff80 	andseq	pc, pc, r0, lsl #31
20006568:	02001800 	andeq	r1, r0, #0, 16
2000656c:	00c000c0 	sbceq	r0, r0, r0, asr #1
20006570:	00000000 	andeq	r0, r0, r0
20006574:	0019fffe 			; <UNDEFINED> instruction: 0x0019fffe
20006578:	02001400 	andeq	r1, r0, #0, 8
2000657c:	00803000 	addeq	r3, r0, r0
20006580:	00000000 	andeq	r0, r0, r0
20006584:	0018ffff 			; <UNDEFINED> instruction: 0x0018ffff
20006588:	05033f00 	streq	r3, [r3, #-3840]	; 0xfffff100
2000658c:	01000000 	mrseq	r0, (UNDEF: 0)
20006590:	c0000000 	andgt	r0, r0, r0
20006594:	0008ffff 	strdeq	pc, [r8], -pc	; <UNPREDICTABLE>
20006598:	00c0e400 	sbceq	lr, r0, r0, lsl #8
2000659c:	01000004 	tsteq	r0, r4
200065a0:	c0000000 	andgt	r0, r0, r0
200065a4:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
200065a8:	00002000 	andeq	r2, r0, r0
200065ac:	01000008 	tsteq	r0, r8
200065b0:	e0000000 	and	r0, r0, r0
200065b4:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
200065b8:	00001000 	andeq	r1, r0, r0
200065bc:	01000006 	tsteq	r0, r6
200065c0:	e0000000 	and	r0, r0, r0
200065c4:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
200065c8:	80000000 	andhi	r0, r0, r0
200065cc:	01800001 	orreq	r0, r0, r1
200065d0:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
200065d4:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
200065d8:	00400000 	subeq	r0, r0, r0
200065dc:	01400000 	mrseq	r0, (UNDEF: 64)
200065e0:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
200065e4:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
200065e8:	03800000 	orreq	r0, r0, #0
200065ec:	01300000 	teqeq	r0, r0
200065f0:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200065f4:	00001bff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
200065f8:	10e00000 	rscne	r0, r0, r0
200065fc:	03000000 	movweq	r0, #0
20006600:	fc000000 	stc2	0, cr0, [r0], {-0}
20006604:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006608:	0f800000 	svceq	0x00800000
2000660c:	03900000 	orrseq	r0, r0, #0
20006610:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20006614:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006618:	00000000 	andeq	r0, r0, r0
2000661c:	03e00000 	mvneq	r0, #0
20006620:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20006624:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006628:	00000000 	andeq	r0, r0, r0
2000662c:	03f40000 	mvnseq	r0, #0
20006630:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20006634:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006638:	00002000 	andeq	r2, r0, r0
2000663c:	01f80000 	mvnseq	r0, r0
20006640:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20006644:	0000007f 	andeq	r0, r0, pc, ror r0
20006648:	0010c000 	andseq	ip, r0, r0
2000664c:	03f80000 	mvnseq	r0, #0
20006650:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20006654:	0000003f 	andeq	r0, r0, pc, lsr r0
20006658:	000f0000 	andeq	r0, pc, r0
2000665c:	03e000e0 	mvneq	r0, #224	; 0xe0
20006660:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20006664:	0000001f 	andeq	r0, r0, pc, lsl r0
20006668:	00026000 	andeq	r6, r2, r0
2000666c:	035001f0 	cmpeq	r0, #240, 2	; 0x3c
20006670:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20006674:	0000001f 	andeq	r0, r0, pc, lsl r0
20006678:	00118000 	andseq	r8, r1, r0
2000667c:	03ec01f0 	mvneq	r0, #240, 2	; 0x3c
20006680:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
20006684:	0000000f 	andeq	r0, r0, pc
20006688:	200e0000 	andcs	r0, lr, r0
2000668c:	00a022f0 	strdeq	r2, [r0], r0	; <UNPREDICTABLE>
20006690:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
20006694:	00000007 	andeq	r0, r0, r7
20006698:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
2000669c:	03c0c170 	biceq	ip, r0, #112, 2
200066a0:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
200066a4:	00000003 	andeq	r0, r0, r3
200066a8:	e4000000 	str	r0, [r0], #-0
200066ac:	03c270f3 	biceq	r7, r2, #243	; 0xf3

200066b0 <castle_light_bits>:
	...
2000670c:	00000040 	andeq	r0, r0, r0, asr #32
	...
20006718:	0c003000 	stceq	0, cr3, [r0], {-0}
2000671c:	00000040 	andeq	r0, r0, r0, asr #32
	...
20006728:	0e007000 	cdpeq	0, 0, cr7, cr0, cr0, {0}
2000672c:	000600c0 	andeq	r0, r6, r0, asr #1
	...
20006738:	0f007010 	svceq	0x00007010
2000673c:	000601e0 	andeq	r0, r6, r0, ror #3
	...
20006748:	1f007810 	svcne	0x00007810
2000674c:	000601e0 	andeq	r0, r6, r0, ror #3
	...
20006758:	3f81f818 	svccc	0x0081f818
2000675c:	001f03e0 	andseq	r0, pc, r0, ror #7
	...
20006768:	ffe3f818 			; <UNDEFINED> instruction: 0xffe3f818
2000676c:	001fc7f1 			; <UNDEFINED> instruction: 0x001fc7f1
	...
20006778:	fffffc1c 			; <UNDEFINED> instruction: 0xfffffc1c
2000677c:	083fffff 	ldmdaeq	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
	...
20006788:	fffffe3c 			; <UNDEFINED> instruction: 0xfffffe3c
2000678c:	187fffff 	ldmdane	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
	...
20006798:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
2000679c:	3c7fffff 	ldclcc	15, cr15, [pc], #-1020	; 200063a8 <castle_gray_bits+0xf8>
	...
200067a8:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
200067ac:	3fffffff 	svccc	0x00ffffff
200067b0:	00000000 	andeq	r0, r0, r0
200067b4:	60000000 	andvs	r0, r0, r0
200067b8:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
200067bc:	7fffffff 	svcvc	0x00ffffff
200067c0:	00000000 	andeq	r0, r0, r0
200067c4:	70000000 	andvc	r0, r0, r0
200067c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200067cc:	7fffffff 	svcvc	0x00ffffff
200067d0:	00000000 	andeq	r0, r0, r0
200067d4:	70000000 	andvc	r0, r0, r0
200067d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200067dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200067e0:	00000000 	andeq	r0, r0, r0
200067e4:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
200067e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200067ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200067f0:	00000000 	andeq	r0, r0, r0
200067f4:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
200067f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200067fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006800:	00000000 	andeq	r0, r0, r0
20006804:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20006808:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000680c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006810:	00000000 	andeq	r0, r0, r0
20006814:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20006818:	fb6fffff 	blx	21c0681e <firstTime.4040+0x1bfd476>
2000681c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006820:	00000000 	andeq	r0, r0, r0
20006824:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20006828:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
2000682c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006830:	00000000 	andeq	r0, r0, r0
20006834:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20006838:	f407ffff 			; <UNDEFINED> instruction: 0xf407ffff
2000683c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20006840:	00000000 	andeq	r0, r0, r0
20006844:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20006848:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
2000684c:	ffffff6d 			; <UNDEFINED> instruction: 0xffffff6d
20006850:	00000000 	andeq	r0, r0, r0
20006854:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20006858:	f80fffff 			; <UNDEFINED> instruction: 0xf80fffff
2000685c:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20006860:	00000000 	andeq	r0, r0, r0
20006864:	fc000000 	stc2	0, cr0, [r0], {-0}
20006868:	f80fedbf 			; <UNDEFINED> instruction: 0xf80fedbf
2000686c:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20006870:	00000000 	andeq	r0, r0, r0
20006874:	fc000000 	stc2	0, cr0, [r0], {-0}
20006878:	f80fc01f 			; <UNDEFINED> instruction: 0xf80fc01f
2000687c:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
20006880:	00000000 	andeq	r0, r0, r0
20006884:	fc000000 	stc2	0, cr0, [r0], {-0}
20006888:	f90fc81f 			; <UNDEFINED> instruction: 0xf90fc81f
2000688c:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
20006890:	00000000 	andeq	r0, r0, r0
20006894:	fc000000 	stc2	0, cr0, [r0], {-0}
20006898:	f90fd41f 			; <UNDEFINED> instruction: 0xf90fd41f
2000689c:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200068a0:	00000000 	andeq	r0, r0, r0
200068a4:	fc000000 	stc2	0, cr0, [r0], {-0}
200068a8:	f90fe03f 			; <UNDEFINED> instruction: 0xf90fe03f
200068ac:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
200068b0:	00000000 	andeq	r0, r0, r0
200068b4:	fc000000 	stc2	0, cr0, [r0], {-0}
200068b8:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
200068bc:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
200068c0:	00000000 	andeq	r0, r0, r0
200068c4:	fc000000 	stc2	0, cr0, [r0], {-0}
200068c8:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
200068cc:	fedbff19 	mrc2	15, 6, pc, cr11, cr9, {0}
200068d0:	00000000 	andeq	r0, r0, r0
200068d4:	fc000000 	stc2	0, cr0, [r0], {-0}
200068d8:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
200068dc:	fd01ff11 	stc2	15, cr15, [r1, #-68]	; 0xffffffbc
200068e0:	00000000 	andeq	r0, r0, r0
200068e4:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
200068e8:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
200068ec:	fd01ff19 	stc2	15, cr15, [r1, #-100]	; 0xffffff9c
200068f0:	00000000 	andeq	r0, r0, r0
200068f4:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
200068f8:	f007e03f 			; <UNDEFINED> instruction: 0xf007e03f
200068fc:	fc01ff01 	stc2	15, cr15, [r1], {1}
20006900:	00000000 	andeq	r0, r0, r0
20006904:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20006908:	f007c01f 			; <UNDEFINED> instruction: 0xf007c01f
2000690c:	fe03ff01 	cdp2	15, 0, cr15, cr3, cr1, {0}
20006910:	00000000 	andeq	r0, r0, r0
20006914:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20006918:	b007c01f 	andlt	ip, r7, pc, lsl r0
2000691c:	fe03fe01 	cdp2	14, 0, cr15, cr3, cr1, {0}
20006920:	00000000 	andeq	r0, r0, r0
20006924:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20006928:	0007c01f 	andeq	ip, r7, pc, lsl r0
2000692c:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
20006930:	00000000 	andeq	r0, r0, r0
20006934:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20006938:	0007c01f 	andeq	ip, r7, pc, lsl r0
2000693c:	fe03fe10 	mcr2	14, 0, pc, cr3, cr0, {0}	; <UNPREDICTABLE>
20006940:	00000000 	andeq	r0, r0, r0
20006944:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20006948:	0007c21f 	andeq	ip, r7, pc, lsl r2
2000694c:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
20006950:	00000000 	andeq	r0, r0, r0
20006954:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20006958:	0087c31f 	addeq	ip, r7, pc, lsl r3
2000695c:	fe03a400 	cdp2	4, 0, cr10, cr3, cr0, {0}
20006960:	00000000 	andeq	r0, r0, r0
20006964:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20006968:	00c7c31f 	sbceq	ip, r7, pc, lsl r3
2000696c:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
20006970:	00000000 	andeq	r0, r0, r0
20006974:	ffe60000 			; <UNDEFINED> instruction: 0xffe60000
20006978:	00c4c01f 	sbceq	ip, r4, pc, lsl r0
2000697c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20006980:	00000000 	andeq	r0, r0, r0
20006984:	ffe70000 			; <UNDEFINED> instruction: 0xffe70000
20006988:	8000001f 	andhi	r0, r0, pc, lsl r0
2000698c:	fc000001 	stc2	0, cr0, [r0], {1}
20006990:	00000000 	andeq	r0, r0, r0
20006994:	fff70000 			; <UNDEFINED> instruction: 0xfff70000
20006998:	8000001f 	andhi	r0, r0, pc, lsl r0
2000699c:	fc000009 	stc2	0, cr0, [r0], {9}
200069a0:	00000000 	andeq	r0, r0, r0
200069a4:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200069a8:	8000001f 	andhi	r0, r0, pc, lsl r0
200069ac:	fc200001 	stc2	0, cr0, [r0], #-4
200069b0:	00000000 	andeq	r0, r0, r0
200069b4:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200069b8:	0000001f 	andeq	r0, r0, pc, lsl r0
200069bc:	fc300000 	ldc2	0, cr0, [r0], #-0
200069c0:	00000000 	andeq	r0, r0, r0
200069c4:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
200069c8:	0000000f 	andeq	r0, r0, pc
200069cc:	fc300000 	ldc2	0, cr0, [r0], #-0
200069d0:	00000000 	andeq	r0, r0, r0
200069d4:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
200069d8:	0000000f 	andeq	r0, r0, pc
200069dc:	fc000000 	stc2	0, cr0, [r0], {-0}
200069e0:	00000000 	andeq	r0, r0, r0
200069e4:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
200069e8:	1000000f 	andne	r0, r0, pc
200069ec:	fc000000 	stc2	0, cr0, [r0], {-0}
200069f0:	00000000 	andeq	r0, r0, r0
200069f4:	ffffe400 			; <UNDEFINED> instruction: 0xffffe400
200069f8:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
200069fc:	f8080000 			; <UNDEFINED> instruction: 0xf8080000
20006a00:	00000000 	andeq	r0, r0, r0
20006a04:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20006a08:	0000000f 	andeq	r0, r0, pc
20006a0c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20006a10:	00000000 	andeq	r0, r0, r0
20006a14:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20006a18:	00000007 	andeq	r0, r0, r7
20006a1c:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
20006a20:	00000000 	andeq	r0, r0, r0
20006a24:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20006a28:	00000007 	andeq	r0, r0, r7
20006a2c:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
20006a30:	00000000 	andeq	r0, r0, r0
20006a34:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20006a38:	00100007 	andseq	r0, r0, r7
20006a3c:	f8040000 			; <UNDEFINED> instruction: 0xf8040000
20006a40:	00000000 	andeq	r0, r0, r0
20006a44:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
20006a48:	00080007 	andeq	r0, r8, r7
20006a4c:	f80001c0 			; <UNDEFINED> instruction: 0xf80001c0
20006a50:	00000000 	andeq	r0, r0, r0
20006a54:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
20006a58:	00000007 	andeq	r0, r0, r7
20006a5c:	f8080300 			; <UNDEFINED> instruction: 0xf8080300
20006a60:	00000000 	andeq	r0, r0, r0
20006a64:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
20006a68:	00200007 	eoreq	r0, r0, r7
20006a6c:	f8080200 			; <UNDEFINED> instruction: 0xf8080200
20006a70:	00000000 	andeq	r0, r0, r0
20006a74:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
20006a78:	00000007 	andeq	r0, r0, r7
20006a7c:	f8000200 			; <UNDEFINED> instruction: 0xf8000200
20006a80:	00000000 	andeq	r0, r0, r0
20006a84:	fffffff0 			; <UNDEFINED> instruction: 0xfffffff0
20006a88:	00000007 	andeq	r0, r0, r7
20006a8c:	f8000100 			; <UNDEFINED> instruction: 0xf8000100
20006a90:	00000000 	andeq	r0, r0, r0
20006a94:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
20006a98:	01000007 	tsteq	r0, r7
20006a9c:	f8100280 			; <UNDEFINED> instruction: 0xf8100280
20006aa0:	00000000 	andeq	r0, r0, r0
20006aa4:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20006aa8:	02000007 	andeq	r0, r0, #7
20006aac:	f8000300 			; <UNDEFINED> instruction: 0xf8000300

20006ab0 <title_light_bits>:
	...
20006acc:	00000400 	andeq	r0, r0, r0, lsl #8
20006ad0:	30000000 	andcc	r0, r0, r0
20006ad4:	f80f9e06 			; <UNDEFINED> instruction: 0xf80f9e06
20006ad8:	06300000 	ldrteq	r0, [r0], -r0
20006adc:	00cb8cba 	strheq	r8, [fp], #202	; 0xca
20006ae0:	ba033000 	blt	200d2ae8 <firstTime.4040+0xc9740>
20006ae4:	0000eb4f 	andeq	lr, r0, pc, asr #22
20006ae8:	439ef3f0 	orrsmi	pc, lr, #240, 6	; 0xc0000003
20006aec:	f000003a 			; <UNDEFINED> instruction: 0xf000003a
20006af0:	5a478e9b 	bpl	211ea564 <firstTime.4040+0x11e11bc>
20006af4:	9b300000 	blls	20c06afc <firstTime.4040+0xbfd754>
20006af8:	019bcd36 	orrseq	ip, fp, r6, lsr sp
20006afc:	66db3000 	ldrbvs	r3, [fp], r0
20006b00:	000319d9 	ldrdeq	r1, [r3], -r9
20006b04:	19667330 	stmdbne	r6!, {r4, r5, r8, r9, ip, sp, lr}^
20006b08:	30000310 	andcc	r0, r0, r0, lsl r3
20006b0c:	00000001 	andeq	r0, r0, r1
20006b10:	80000000 	andhi	r0, r0, r0
20006b14:	001d3e7b 	andseq	r3, sp, fp, ror lr
20006b18:	0ac00000 	beq	1f006b20 <startup-0xff94e0>
20006b1c:	00000528 	andeq	r0, r0, r8, lsr #10
20006b20:	ec3a4000 	ldc	0, cr4, [sl], #-0
20006b24:	0000000d 	andeq	r0, r0, sp
20006b28:	05240bc0 	streq	r0, [r4, #-3008]!	; 0xfffff440
20006b2c:	00f00000 	rscseq	r0, r0, r0
20006b30:	001c0000 	andseq	r0, ip, r0
20006b34:	03ebb000 	mvneq	fp, #0
20006b38:	00000000 	andeq	r0, r0, r0
20006b3c:	0c032330 	stceq	3, cr2, [r3], {48}	; 0x30
20006b40:	300123e4 	andcc	r2, r1, r4, ror #7
20006b44:	940c1b2a 	strls	r1, [ip], #-2858	; 0xfffff4d6
20006b48:	ea300120 	b	20c06fd0 <firstTime.4040+0xbfdc28>
20006b4c:	ec860c3d 	stc	12, cr0, [r6], {61}	; 0x3d
20006b50:	06ea3001 	strbteq	r3, [sl], r1
20006b54:	01e69648 	mvneq	r9, r8, asr #12
20006b58:	4b9e6b30 	blmi	1e7a1820 <startup-0x185e7e0>
20006b5c:	30012696 	mulcc	r1, r6, r6
20006b60:	92bbb06b 	adcsls	fp, fp, #107	; 0x6b
20006b64:	69f00126 	ldmibvs	r0!, {r1, r2, r5, r8}^
20006b68:	2691b832 			; <UNDEFINED> instruction: 0x2691b832
20006b6c:	1e687001 	cdpne	0, 6, cr7, cr8, cr1, {0}
20006b70:	010e9110 	tsteq	lr, r0, lsl r1
	...

20006b84 <title_gray_bits>:
	...
20006b8c:	40000000 	andmi	r0, r0, r0
20006b90:	0f840000 	svceq	0x00840000
20006b94:	00b0c3fe 	ldrshteq	ip, [r0], lr
20006b98:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20006b9c:	001f8f1f 	andseq	r8, pc, pc, lsl pc	; <UNPREDICTABLE>
20006ba0:	fffffbf8 			; <UNDEFINED> instruction: 0xfffffbf8
20006ba4:	c8001fff 	stmdagt	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
20006ba8:	07f061f9 			; <UNDEFINED> instruction: 0x07f061f9
20006bac:	f1cc001f 			; <UNDEFINED> instruction: 0xf1cc001f
20006bb0:	be347305 	cdplt	3, 3, cr7, cr4, cr5, {0}
20006bb4:	05f0ce00 	ldrbeq	ip, [r0, #3584]!	; 0xe00
20006bb8:	007e1430 	rsbseq	r1, lr, r0, lsr r4
20006bbc:	2041080f 	subcs	r0, r1, pc, lsl #16
20006bc0:	0e003e01 	cdpeq	14, 0, cr3, cr0, cr1, {0}
20006bc4:	01384060 	teqeq	r8, r0, rrx
20006bc8:	600c001e 	andvs	r0, ip, lr, lsl r0
20006bcc:	1c4030c0 	mcrrne	0, 12, r3, r0, cr0
20006bd0:	10208c00 	eorne	r8, r0, r0, lsl #24
20006bd4:	0038c024 	eorseq	ip, r8, r4, lsr #32
20006bd8:	0411088c 	ldreq	r0, [r1], #-2188	; 0xfffff774
20006bdc:	c800f8ce 	stmdagt	r0, {r1, r2, r3, r6, r7, fp, ip, sp, lr, pc}
20006be0:	ffe6990c 			; <UNDEFINED> instruction: 0xffe6990c
20006be4:	7cfa0178 	ldfvce	f0, [sl], #480	; 0x1e0
20006be8:	3fe0c184 	svccc	0x00e0c184
20006bec:	013ff400 	teqeq	pc, r0, lsl #8	; <UNPREDICTABLE>
20006bf0:	001fc0c7 	andseq	ip, pc, r7, asr #1
20006bf4:	03c03ff0 	biceq	r3, r0, #240, 30	; 0x3c0
20006bf8:	fc0007e0 	stc2	7, cr0, [r0], {224}	; 0xe0
20006bfc:	e003803f 	and	r8, r3, pc, lsr r0
20006c00:	7f0c009f 	svcvc	0x000c009f
20006c04:	ffc1fbe4 			; <UNDEFINED> instruction: 0xffc1fbe4
20006c08:	fc140c03 	ldc2	12, cr0, [r4], {3}
20006c0c:	03ffc7ff 	mvnseq	ip, #66846720	; 0x3fc0000
20006c10:	f3fc1c0c 	vdup.32	d17, d12[1]
20006c14:	0e02dc1b 	mcreq	12, 0, sp, cr2, cr11, {0}
20006c18:	63f3e490 	mvnsvs	lr, #144, 8	; 0x90000000
20006c1c:	018e0218 	orreq	r0, lr, r8, lsl r2
20006c20:	1251e382 	subsne	lr, r1, #134217730	; 0x8000002
20006c24:	88018e02 	stmdahi	r1, {r1, r9, sl, fp, pc}
20006c28:	020061a7 	andeq	r6, r0, #-1073741783	; 0xc0000029
20006c2c:	2460008e 	strbtcs	r0, [r0], #-142	; 0xffffff72
20006c30:	8e021041 	cdphi	0, 0, cr1, cr2, cr1, {2}
20006c34:	41000300 	mrsmi	r0, LR_irq
20006c38:	000e0290 	muleq	lr, r0, r2
20006c3c:	9048008d 	subls	r0, r8, sp, lsl #1
20006c40:	81040c02 	tsthi	r4, r2, lsl #24
20006c44:	02a04c87 	adceq	r4, r0, #34560	; 0x8700
20006c48:	cffffffc 	svcgt	0x00fffffc
20006c4c:	8203e2fc 	andhi	lr, r3, #252, 4	; 0xc000000f
20006c50:	e3f81c07 	mvns	r1, #1792	; 0x700
20006c54:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20006c58 <title_black_bits>:
	...
20006c80:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
20006c84:	01000040 	tsteq	r0, r0, asr #32
20006c88:	400c0000 	andmi	r0, ip, r0
20006c8c:	00010080 	andeq	r0, r1, r0, lsl #1
20006c90:	9c200400 	cfstrsls	mvf0, [r0], #-0
20006c94:	000001c4 	andeq	r0, r0, r4, asr #3
20006c98:	a4803104 	strge	r3, [r0], #260	; 0x104
20006c9c:	04c00001 	strbeq	r0, [r0], #1
20006ca0:	02240209 	eoreq	r0, r4, #-1879048192	; 0x90000000
20006ca4:	89044000 	stmdbhi	r4, {lr}
20006ca8:	00042602 	andeq	r2, r4, r2, lsl #12
20006cac:	e2888440 	add	r8, r8, #64, 8	; 0x40000000
20006cb0:	00000421 	andeq	r0, r0, r1, lsr #8
20006cb4:	001966f2 			; <UNDEFINED> instruction: 0x001966f2
20006cb8:	03000007 	movweq	r0, #7
20006cbc:	00020000 	andeq	r0, r2, r0
20006cc0:	f4000000 	vst4.8	{d0-d3}, [r0], r0
20006cc4:	00003a10 	andeq	r3, r0, r0, lsl sl
20006cc8:	10058000 	andne	r8, r5, r0
20006ccc:	00000012 	andeq	r0, r0, r2, lsl r0
20006cd0:	1ad87400 	bne	1f623cd8 <startup-0x9dc328>
20006cd4:	80000000 	andhi	r0, r0, r0
20006cd8:	0022041b 	eoreq	r0, r2, fp, lsl r4
20006cdc:	00004000 	andeq	r4, r0, r0
20006ce0:	00003800 	andeq	r3, r0, r0, lsl #16
20006ce4:	0000c0c0 	andeq	ip, r0, r0, asr #1
20006ce8:	c0000000 	andgt	r0, r0, r0
20006cec:	08000045 	stmdaeq	r0, {r0, r2, r6}
20006cf0:	144000c7 	strbne	r0, [r0], #-199	; 0xffffff39
20006cf4:	01281040 			; <UNDEFINED> instruction: 0x01281040
20006cf8:	71144000 	tstvc	r4, r0
20006cfc:	00190810 	andseq	r0, r9, r0, lsl r8
20006d00:	90019440 	andls	r9, r1, r0, asr #8
20006d04:	4000c928 	andmi	ip, r0, r8, lsr #18
20006d08:	2c444c94 	mcrrcs	12, 9, r4, r4, cr4
20006d0c:	96000049 	strls	r0, [r0], -r9, asr #32
20006d10:	49264740 	stmdbmi	r6!, {r6, r8, r9, sl, lr}
20006d14:	60938000 	addsvs	r8, r3, r0
20006d18:	00512268 	subseq	r2, r1, r8, ror #4
20006d1c:	30000000 	andcc	r0, r0, r0
20006d20:	00001d03 	andeq	r1, r0, r3, lsl #26
	...

20006d2c <bg_bits>:
	...
20006d3c:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
20006d40:	0000001f 	andeq	r0, r0, pc, lsl r0
	...
20006d4c:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
20006d50:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
20006d5c:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
20006d60:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
	...
20006d6c:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20006d70:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
	...
20006d7c:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20006d80:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
20006d8c:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20006d90:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20006d9c:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
20006da0:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20006ea7 <bg_bits+0x17b>	; <UNPREDICTABLE>
20006da4:	0001f000 	andeq	pc, r1, r0
20006da8:	00000000 	andeq	r0, r0, r0
20006dac:	007fe000 	rsbseq	lr, pc, r0
20006db0:	0ffffffe 	svceq	0x00fffffe
20006db4:	0003f800 	andeq	pc, r3, r0, lsl #16
20006db8:	00000000 	andeq	r0, r0, r0
20006dbc:	003fe000 	eorseq	lr, pc, r0
20006dc0:	7fffffc0 	svcvc	0x00ffffc0
20006dc4:	0003f800 	andeq	pc, r3, r0, lsl #16
20006dc8:	001f8000 	andseq	r8, pc, r0
20006dcc:	001fe000 	andseq	lr, pc, r0
20006dd0:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20006dd4:	0003f801 	andeq	pc, r3, r1, lsl #16
20006dd8:	003fc000 	eorseq	ip, pc, r0
20006ddc:	003fe000 	eorseq	lr, pc, r0
20006de0:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
20006de4:	3f83f807 	svccc	0x0083f807
20006de8:	003fe000 	eorseq	lr, pc, r0
20006dec:	01ffe000 	mvnseq	lr, r0
20006df0:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20006df4:	7fc3f80f 	svcvc	0x00c3f80f
20006df8:	003fe7f8 	ldrshteq	lr, [pc], -r8
20006dfc:	07ffe000 	ldrbeq	lr, [pc, r0]!
20006e00:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
20006e04:	7fe1f01f 	svcvc	0x00e1f01f
20006e08:	003ffffc 	ldrshteq	pc, [pc], -ip	; <UNPREDICTABLE>
20006e0c:	3fffc000 	svccc	0x00ffc000
20006e10:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20006e14:	7ff0003f 	svcvc	0x00f0003f
20006e18:	007ffffc 	ldrshteq	pc, [pc], #-252	; <UNPREDICTABLE>
20006e1c:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20006e20:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20006e24:	7ff8007f 	svcvc	0x00f8007f
20006e28:	3ffffffc 	svccc	0x00fffffc
20006e2c:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20006e30:	f8000003 			; <UNDEFINED> instruction: 0xf8000003
20006e34:	7ffc00ff 	svcvc	0x00fc00ff
20006e38:	7ffffffc 	svcvc	0x00fffffc
20006e3c:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20006e40:	e000000f 	and	r0, r0, pc
20006e44:	7ffe01ff 	svcvc	0x00fe01ff
20006e48:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20006e4c:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
20006e50:	8000001f 	andhi	r0, r0, pc, lsl r0
20006e54:	7fff01ff 	svcvc	0x00ff01ff
20006e58:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20006e5c:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20006e60:	0000007f 	andeq	r0, r0, pc, ror r0
20006e64:	7fff83ff 	svcvc	0x00ff83ff
20006e68:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
20006e6c:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20006e70:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20006e74:	7fffc3fe 	svcvc	0x00ffc3fe
20006e78:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
20006e7c:	fc7ffff0 	ldc2l	15, cr15, [pc], #-960	; 20006ac4 <title_light_bits+0x14>
20006e80:	07c001ff 			; <UNDEFINED> instruction: 0x07c001ff
20006e84:	7fffe7fc 	svcvc	0x00ffe7fc
20006e88:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
20006e8c:	f0fffffe 			; <UNDEFINED> instruction: 0xf0fffffe
20006e90:	0fe007ff 	svceq	0x00e007ff
20006e94:	7ffff7fc 	svcvc	0x00fff7fc
20006e98:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
20006e9c:	c0ffffff 	ldrshtgt	pc, [pc], #255	; <UNPREDICTABLE>
20006ea0:	0fe00fff 	svceq	0x00e00fff
20006ea4:	7ffffff8 	svcvc	0x00fffff8
20006ea8:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20006eac:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20006fb3 <bg_bits+0x287>	; <UNPREDICTABLE>
20006eb0:	0fe01fff 	svceq	0x00e01fff
20006eb4:	7ffffff8 	svcvc	0x00fffff8
20006eb8:	7ffffc00 	svcvc	0x00fffc00
20006ebc:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20006fc3 <bg_bits+0x297>	; <UNPREDICTABLE>
20006ec0:	0fe03ffe 	svceq	0x00e03ffe
20006ec4:	3fdffff0 	svccc	0x00dffff0
20006ec8:	3ffffe00 	svccc	0x00fffe00
20006ecc:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20006fd3 <bg_bits+0x2a7>	; <UNPREDICTABLE>
20006ed0:	0fe03ff8 	svceq	0x00e03ff8
20006ed4:	3fe7fff0 	svccc	0x00e7fff0
20006ed8:	07fffe00 	ldrbeq	pc, [pc, r0, lsl #28]!	; <UNPREDICTABLE>
20006edc:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
20006ee0:	07c07ff0 			; <UNDEFINED> instruction: 0x07c07ff0
20006ee4:	1fe7fff0 	svcne	0x00e7fff0
20006ee8:	0ffffe00 	svceq	0x00fffe00
20006eec:	03fc00ff 	mvnseq	r0, #255	; 0xff
20006ef0:	0000ffe0 	andeq	pc, r0, r0, ror #31
20006ef4:	1ff3ffe0 	svcne	0x00f3ffe0
20006ef8:	1ffffe00 	svcne	0x00fffe00
20006efc:	03fc001f 	mvnseq	r0, #31
20006f00:	0001ff80 	andeq	pc, r1, r0, lsl #31
20006f04:	1ff9ffe0 	svcne	0x00f9ffe0
20006f08:	3ffffe00 	svccc	0x00fffe00
20006f0c:	03fc0007 	mvnseq	r0, #7
20006f10:	0001ff80 	andeq	pc, r1, r0, lsl #31
20006f14:	0ffcffe0 	svceq	0x00fcffe0
20006f18:	3ffdfe00 	svccc	0x00fdfe00
20006f1c:	07f80007 	ldrbeq	r0, [r8, r7]!
20006f20:	0003ff00 	andeq	pc, r3, r0, lsl #30
20006f24:	0ffe7ff0 	svceq	0x00fe7ff0
20006f28:	3ffcfe00 	svccc	0x00fcfe00
20006f2c:	07f80003 	ldrbeq	r0, [r8, r3]!
20006f30:	0007fe00 	andeq	pc, r7, r0, lsl #28
20006f34:	07fe7ff8 			; <UNDEFINED> instruction: 0x07fe7ff8
20006f38:	3ff8fe00 	svccc	0x00f8fe00
20006f3c:	0ff80003 	svceq	0x00f80003
20006f40:	0007fc00 	andeq	pc, r7, r0, lsl #24
20006f44:	03fffffc 	mvnseq	pc, #252, 30	; 0x3f0
20006f48:	3ff87c00 	svccc	0x00f87c00
20006f4c:	0ff80003 	svceq	0x00f80003
20006f50:	0007fc00 	andeq	pc, r7, r0, lsl #24
20006f54:	01fffffe 	ldrsheq	pc, [pc, #254]	; 2000705a <bg_bits+0x32e>	; <UNPREDICTABLE>
20006f58:	1ff00000 	svcne	0x00f00000	; IMB
20006f5c:	0ff00007 	svceq	0x00f00007
20006f60:	000ff800 	andeq	pc, pc, r0, lsl #16
20006f64:	01ffffff 	ldrsheq	pc, [pc, #255]	; 2000706b <bg_bits+0x33f>	; <UNPREDICTABLE>
20006f68:	07f0003e 			; <UNDEFINED> instruction: 0x07f0003e
20006f6c:	0ff00007 	svceq	0x00f00007
20006f70:	800ff000 	andhi	pc, pc, r0
20006f74:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20006f78:	03e0007f 	mvneq	r0, #127	; 0x7f
20006f7c:	0fe00007 	svceq	0x00e00007
20006f80:	c00ff000 	andgt	pc, pc, r0
20006f84:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
20006f88:	0000007f 	andeq	r0, r0, pc, ror r0
20006f8c:	0fe00007 	svceq	0x00e00007
20006f90:	e00ff000 	and	pc, pc, r0
20006f94:	007ffeff 	ldrshteq	pc, [pc], #-239	; <UNPREDICTABLE>
20006f98:	0000007f 	andeq	r0, r0, pc, ror r0
20006f9c:	0fe00007 	svceq	0x00e00007
20006fa0:	f00ff000 			; <UNDEFINED> instruction: 0xf00ff000
20006fa4:	003ffe7f 	eorseq	pc, pc, pc, ror lr	; <UNPREDICTABLE>
20006fa8:	0000007f 	andeq	r0, r0, pc, ror r0
20006fac:	0fe00007 	svceq	0x00e00007
20006fb0:	f80ff000 			; <UNDEFINED> instruction: 0xf80ff000
20006fb4:	001ffc3f 	andseq	pc, pc, pc, lsr ip	; <UNPREDICTABLE>
20006fb8:	0000007f 	andeq	r0, r0, pc, ror r0
20006fbc:	1fe0000f 	svcne	0x00e0000f
20006fc0:	fc0ff000 	stc2	0, cr15, [pc], {-0}
20006fc4:	000ff81f 	andeq	pc, pc, pc, lsl r8	; <UNPREDICTABLE>
20006fc8:	0000003e 	andeq	r0, r0, lr, lsr r0
20006fcc:	1fe0000f 	svcne	0x00e0000f
20006fd0:	fc07f000 	stc2	0, cr15, [r7], {-0}
20006fd4:	0007f00f 	andeq	pc, r7, pc
20006fd8:	00000000 	andeq	r0, r0, r0
20006fdc:	1fe0000f 	svcne	0x00e0000f
20006fe0:	fc07f000 	stc2	0, cr15, [r7], {-0}
20006fe4:	00000007 	andeq	r0, r0, r7
20006fe8:	00000000 	andeq	r0, r0, r0
20006fec:	1fe0000f 	svcne	0x00e0000f
20006ff0:	fc07f800 	stc2	8, cr15, [r7], {-0}
20006ff4:	00000003 	andeq	r0, r0, r3
20006ff8:	000ff800 	andeq	pc, pc, r0, lsl #16
20006ffc:	1fc0001f 	svcne	0x00c0001f
20007000:	fc07fc00 	stc2	12, cr15, [r7], {-0}
20007004:	00000001 	andeq	r0, r0, r1
20007008:	001ffc00 	andseq	pc, pc, r0, lsl #24
2000700c:	1fc0003f 	svcne	0x00c0003f
20007010:	fc07ff80 	stc2	15, cr15, [r7], {128}	; 0x80
20007014:	00000001 	andeq	r0, r0, r1
20007018:	003fff00 	eorseq	pc, pc, r0, lsl #30
2000701c:	3fc0003f 	svccc	0x00c0003f
20007020:	fc07fffc 	stc2	15, cr15, [r7], {252}	; 0xfc
20007024:	00000001 	andeq	r0, r0, r1
20007028:	007fff80 	rsbseq	pc, pc, r0, lsl #31
2000702c:	ffc0003f 			; <UNDEFINED> instruction: 0xffc0003f
20007030:	fc03ffff 	stc2	15, cr15, [r3], {255}	; 0xff
20007034:	00000001 	andeq	r0, r0, r1
20007038:	00ffffe0 	rscseq	pc, pc, r0, ror #31
2000703c:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20007040:	fc01ffff 	stc2	15, cr15, [r1], {255}	; 0xff
20007044:	00000007 	andeq	r0, r0, r7
20007048:	03fffff0 	mvnseq	pc, #240, 30	; 0x3c0
2000704c:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20007050:	fc00ffff 	stc2	15, cr15, [r0], {255}	; 0xff
20007054:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007058:	07fffff8 			; <UNDEFINED> instruction: 0x07fffff8
2000705c:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20007060:	fc007fff 	stc2	15, cr7, [r0], {255}	; 0xff
20007064:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007068:	07ff7ffd 			; <UNDEFINED> instruction: 0x07ff7ffd
2000706c:	ff80007f 			; <UNDEFINED> instruction: 0xff80007f
20007070:	fc003fff 	stc2	15, cr3, [r0], {255}	; 0xff
20007074:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007078:	0ffe3fff 	svceq	0x00fe3fff
2000707c:	ff1f007f 			; <UNDEFINED> instruction: 0xff1f007f
20007080:	f80007ff 			; <UNDEFINED> instruction: 0xf80007ff
20007084:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007088:	1ffc3fff 	svcne	0x00fc3fff
2000708c:	fc3f807f 	ldc2	0, cr8, [pc], #-508	; 20006e98 <bg_bits+0x16c>
20007090:	f800003f 			; <UNDEFINED> instruction: 0xf800003f
20007094:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007098:	1ff83fff 	svcne	0x00f83fff
2000709c:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
200070a0:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
200070a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200070a8:	3ff03fff 	svccc	0x00f03fff
200070ac:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
200070b0:	c0000000 	andgt	r0, r0, r0
200070b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200070b8:	7fe03fff 	svcvc	0x00e03fff
200070bc:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
200070c0:	00000000 	andeq	r0, r0, r0
200070c4:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200070c8:	7fc03fff 	svcvc	0x00c03fff
200070cc:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
200070d0:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
200070d4:	f800000f 			; <UNDEFINED> instruction: 0xf800000f
200070d8:	ffc01fff 			; <UNDEFINED> instruction: 0xffc01fff
200070dc:	001f003f 	andseq	r0, pc, pc, lsr r0	; <UNPREDICTABLE>
200070e0:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
200070e4:	f8007fff 			; <UNDEFINED> instruction: 0xf8007fff
200070e8:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
200070ec:	0000003f 	andeq	r0, r0, pc, lsr r0
200070f0:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
200070f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200070f8:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
200070fc:	0000003f 	andeq	r0, r0, pc, lsr r0
20007100:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20007104:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007108:	ff001fff 			; <UNDEFINED> instruction: 0xff001fff
2000710c:	0000003f 	andeq	r0, r0, pc, lsr r0
20007110:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20007114:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007118:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}
2000711c:	0000003f 	andeq	r0, r0, pc, lsr r0
20007120:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20007124:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007128:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}

2000712c <current_screen>:
2000712c:	00000001 	andeq	r0, r0, r1

20007130 <delay_until_text.4290>:
20007130:	00000082 	andeq	r0, r0, r2, lsl #1

20007134 <long_text.4288>:
20007134:	00000028 	andeq	r0, r0, r8, lsr #32

20007138 <short_text.4289>:
20007138:	00000014 	andeq	r0, r0, r4, lsl r0

2000713c <last_climb_value.4292>:
2000713c:	00000064 	andeq	r0, r0, r4, rrx

20007140 <fire_black_2_bits>:
	...
20007148:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>

2000714c <fire1_gray_bits>:
2000714c:	00000000 	andeq	r0, r0, r0
20007150:	06000804 	streq	r0, [r0], -r4, lsl #16
20007154:	02494204 	subeq	r4, r9, #4, 4	; 0x40000000

20007158 <fire1_light_bits>:
20007158:	00002000 	andeq	r2, r0, r0
2000715c:	48000010 	stmdami	r0, {r4}
20007160:	2c243020 	stccs	0, cr3, [r4], #-128	; 0xffffff80

20007164 <fire2_gray_bits>:
20007164:	00000000 	andeq	r0, r0, r0
20007168:	10220000 	eorne	r0, r2, r0
2000716c:	00420444 	subeq	r0, r2, r4, asr #8

20007170 <fire2_light_bits>:
20007170:	04200000 	strteq	r0, [r0], #-0
20007174:	240c0010 	strcs	r0, [ip], #-16
20007178:	123c6008 	eorsne	r6, ip, #8

2000717c <fire3_gray_bits>:
2000717c:	00000000 	andeq	r0, r0, r0
20007180:	24100802 	ldrcs	r0, [r0], #-2050	; 0xfffff7fe
20007184:	00020260 	andeq	r0, r2, r0, ror #4

20007188 <fire3_light_bits>:
20007188:	10200000 	eorne	r0, r0, r0
2000718c:	18040400 	stmdane	r4, {sl}
20007190:	143c5812 	ldrtne	r5, [ip], #-2066	; 0xfffff7ee

20007194 <fire4_gray_bits>:
20007194:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
20007198:	10320000 	eorsne	r0, r2, r0
2000719c:	02400012 	subeq	r0, r0, #18

200071a0 <fire4_light_bits>:
200071a0:	00001000 	andeq	r1, r0, r0
200071a4:	04082000 	streq	r2, [r8], #-0
200071a8:	24283a0c 	strtcs	r3, [r8], #-2572	; 0xfffff5f4

200071ac <fire5_gray_bits>:
200071ac:	00000000 	andeq	r0, r0, r0
200071b0:	22001020 	andcs	r1, r0, #32
200071b4:	04044206 	streq	r4, [r4], #-518	; 0xfffffdfa

200071b8 <fire5_light_bits>:
200071b8:	00040000 	andeq	r0, r4, r0
200071bc:	04240800 	strteq	r0, [r4], #-2048	; 0xfffff800
200071c0:	502a1810 	eorpl	r1, sl, r0, lsl r8

200071c4 <firstTime.4076>:
200071c4:	00000001 	andeq	r0, r0, r1

200071c8 <bird1_black_bits>:
	...
200071d8:	00010040 	andeq	r0, r1, r0, asr #32
200071dc:	00118060 	andseq	r8, r1, r0, rrx
200071e0:	00118060 	andseq	r8, r1, r0, rrx
200071e4:	001b80ec 	andseq	r8, fp, ip, ror #1
200071e8:	003f81fc 	ldrshteq	r8, [pc], -ip
200071ec:	007fe1f8 	ldrshteq	lr, [pc], #-24
200071f0:	007ff3f8 	ldrshteq	pc, [pc], #-56	; <UNPREDICTABLE>
200071f4:	003ffff8 	ldrshteq	pc, [pc], -r8	; <UNPREDICTABLE>
200071f8:	003fedf8 	ldrshteq	lr, [pc], -r8
200071fc:	001ff1f0 			; <UNDEFINED> instruction: 0x001ff1f0
20007200:	000ff0e0 	andeq	pc, pc, r0, ror #1
20007204:	0007ff80 	andeq	pc, r7, r0, lsl #31
20007208:	00007c00 	andeq	r7, r0, r0, lsl #24
2000720c:	00008800 	andeq	r8, r0, r0, lsl #16
20007210:	00033000 	andeq	r3, r3, r0
20007214:	00011000 	andeq	r1, r1, r0
	...

2000722c <bird1_gray_bits>:
	...
20007260:	00000e00 	andeq	r0, r0, r0, lsl #28
20007264:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

20007290 <bird1_light_bits>:
	...
200072c0:	00001200 	andeq	r1, r0, r0, lsl #4
	...

200072f4 <bird2_black_bits>:
	...
2000730c:	000b0000 	andeq	r0, fp, r0
20007310:	001e0028 	andseq	r0, lr, r8, lsr #32
20007314:	003e0068 	eorseq	r0, lr, r8, rrx
20007318:	003e007c 	eorseq	r0, lr, ip, ror r0
2000731c:	003e007c 	eorseq	r0, lr, ip, ror r0
20007320:	007e007c 	rsbseq	r0, lr, ip, ror r0
20007324:	007e7cfc 	ldrshteq	r7, [lr], #-204	; 0xffffff34
20007328:	007ffff8 	ldrshteq	pc, [pc], #-248	; <UNPREDICTABLE>
2000732c:	003fd7f0 	ldrshteq	sp, [pc], -r0
20007330:	003fc3c0 	eorseq	ip, pc, r0, asr #7
20007334:	000fc100 	andeq	ip, pc, r0, lsl #2
20007338:	00007000 	andeq	r7, r0, r0
2000733c:	0000a000 	andeq	sl, r0, r0
20007340:	0001e000 	andeq	lr, r1, r0
20007344:	0000a000 	andeq	sl, r0, r0
20007348:	00008000 	andeq	r8, r0, r0
	...

20007358 <bird2_gray_bits>:
	...
20007394:	00003c00 	andeq	r3, r0, r0, lsl #24
20007398:	00003e00 	andeq	r3, r0, r0, lsl #28
	...

200073bc <bird2_light_bits>:
	...
200073f4:	00002800 	andeq	r2, r0, r0, lsl #16
	...

20007420 <bird3_black_bits>:
	...
20007440:	00280000 	eoreq	r0, r8, r0
20007444:	00680020 	rsbeq	r0, r8, r0, lsr #32
20007448:	00f80038 	rscseq	r0, r8, r8, lsr r0
2000744c:	00fc0038 	rscseq	r0, ip, r8, lsr r0
20007450:	00fc007c 	rscseq	r0, ip, ip, ror r0
20007454:	00fe3dfe 	ldrshteq	r3, [lr], #222	; 0xde
20007458:	00fffffe 	ldrshteq	pc, [pc], #254	; <UNPREDICTABLE>
2000745c:	007febfc 	ldrshteq	lr, [pc], #-188
20007460:	003ff1f0 	ldrshteq	pc, [pc], -r0	; <UNPREDICTABLE>
20007464:	001ff0c0 	andseq	pc, pc, r0, asr #1
20007468:	0001e800 	andeq	lr, r1, r0, lsl #16
2000746c:	00005000 	andeq	r5, r0, r0
20007470:	0000f000 	andeq	pc, r0, r0
20007474:	00009000 	andeq	r9, r0, r0
	...

20007484 <bird3_gray_bits>:
	...
200074c4:	00000e00 	andeq	r0, r0, r0, lsl #28
200074c8:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

200074e8 <bird3_light_bits>:
	...
20007524:	00001400 	andeq	r1, r0, r0, lsl #8
	...

2000754c <bird4_black_bits>:
	...
20007580:	00007800 	andeq	r7, r0, r0, lsl #16
20007584:	0000ff80 	andeq	pc, r0, r0, lsl #31
20007588:	0003d7f4 	strdeq	sp, [r3], -r4
2000758c:	008fe3fc 	strdeq	lr, [pc], ip
20007590:	01ffc1fc 	ldrsheq	ip, [pc, #28]	; 200075b4 <bird4_gray_bits+0x4>
20007594:	00ffd9f8 	ldrshteq	sp, [pc], #152
20007598:	007fb0f0 	ldrshteq	fp, [pc], #-0
2000759c:	007ea000 	rsbseq	sl, lr, r0
200075a0:	00792000 	rsbseq	r2, r9, r0
200075a4:	00300000 	eorseq	r0, r0, r0
	...

200075b0 <bird4_gray_bits>:
	...
200075f0:	00001c00 	andeq	r1, r0, r0, lsl #24
200075f4:	00003e00 	andeq	r3, r0, r0, lsl #28
	...

20007614 <bird4_light_bits>:
	...
20007650:	00002800 	andeq	r2, r0, r0, lsl #16
	...

20007678 <bird5_black_bits>:
	...
200076a4:	00001c00 	andeq	r1, r0, r0, lsl #24
200076a8:	0000ff00 	andeq	pc, r0, r0, lsl #30
200076ac:	0003eb00 	andeq	lr, r3, r0, lsl #22
200076b0:	0007f180 	andeq	pc, r7, r0, lsl #3
200076b4:	000ff080 	andeq	pc, pc, r0, lsl #1
200076b8:	000fff80 	andeq	pc, pc, r0, lsl #31
200076bc:	001fd3c0 	andseq	sp, pc, r0, asr #7
200076c0:	003fa3c0 	eorseq	sl, pc, r0, asr #7
200076c4:	003fa3c0 	eorseq	sl, pc, r0, asr #7
200076c8:	003fd3c0 	eorseq	sp, pc, r0, asr #7
200076cc:	003e8380 	eorseq	r8, lr, r0, lsl #7
200076d0:	00778580 	rsbseq	r8, r7, r0, lsl #11
200076d4:	00610000 	rsbeq	r0, r1, r0
200076d8:	00000000 	andeq	r0, r0, r0

200076dc <bird5_gray_bits>:
	...
20007714:	00000e00 	andeq	r0, r0, r0, lsl #28
20007718:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

20007740 <bird5_light_bits>:
	...
20007774:	00001400 	andeq	r1, r0, r0, lsl #8
	...

200077a4 <firstTime.4093>:
200077a4:	00000001 	andeq	r0, r0, r1

200077a8 <witch1_black_bits>:
200077a8:	200001f8 	strdcs	r0, [r0], -r8
200077ac:	03400001 	movteq	r0, #1
200077b0:	00074000 	andeq	r4, r7, r0
200077b4:	20000720 	andcs	r0, r0, r0, lsr #14
200077b8:	3ff80066 	svccc	0x00f80066
200077bc:	00044000 	andeq	r4, r4, r0
200077c0:	40000440 	andmi	r0, r0, r0, asr #8
200077c4:	03800004 	orreq	r0, r0, #4
200077c8:	00064000 	andeq	r4, r6, r0
200077cc:	20000640 	andcs	r0, r0, r0, asr #12
200077d0:	0e200006 	cdpeq	0, 2, cr0, cr0, cr6, {0}
200077d4:	000e1000 	andeq	r1, lr, r0
200077d8:	f8000c10 			; <UNDEFINED> instruction: 0xf8000c10
200077dc:	0000001f 	andeq	r0, r0, pc, lsl r0

200077e0 <witch1_gray_bits>:
200077e0:	c0000000 	andgt	r0, r0, r0
200077e4:	00800000 	addeq	r0, r0, r0
200077e8:	00008000 	andeq	r8, r0, r0
200077ec:	c00000c0 	andgt	r0, r0, r0, asr #1
200077f0:	00000001 	andeq	r0, r0, r1
	...
20007800:	00018000 	andeq	r8, r1, r0
20007804:	c0000180 	andgt	r0, r0, r0, lsl #3
20007808:	01c00001 	biceq	r0, r0, r1
2000780c:	0001e000 	andeq	lr, r1, r0
20007810:	000003e0 	andeq	r0, r0, r0, ror #7
20007814:	00000000 	andeq	r0, r0, r0

20007818 <witch1_light_bits>:
	...
2000782c:	00038000 	andeq	r8, r3, r0
20007830:	80000380 	andhi	r0, r0, r0, lsl #7
20007834:	00000003 	andeq	r0, r0, r3
	...

20007850 <witch2_black_bits>:
20007850:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20007854:	01200001 			; <UNDEFINED> instruction: 0x01200001
20007858:	00034000 	andeq	r4, r3, r0
2000785c:	20000740 	andcs	r0, r0, r0, asr #14
20007860:	66200007 	strtvs	r0, [r0], -r7
20007864:	003ff800 	eorseq	pc, pc, r0, lsl #16
20007868:	40000440 	andmi	r0, r0, r0, asr #8
2000786c:	04400004 	strbeq	r0, [r0], #-4
20007870:	00038000 	andeq	r8, r3, r0
20007874:	20000660 	andcs	r0, r0, r0, ror #12
20007878:	0e100006 	cdpeq	0, 1, cr0, cr0, cr6, {0}
2000787c:	001c0800 	andseq	r0, ip, r0, lsl #16
20007880:	fc001c08 	stc2	12, cr1, [r0], {8}
20007884:	0000003f 	andeq	r0, r0, pc, lsr r0

20007888 <witch2_gray_bits>:
20007888:	00000000 	andeq	r0, r0, r0
2000788c:	00c00000 	sbceq	r0, r0, r0
20007890:	00008000 	andeq	r8, r0, r0
20007894:	c0000080 	andgt	r0, r0, r0, lsl #1
20007898:	01c00000 	biceq	r0, r0, r0
	...
200078ac:	c0000180 	andgt	r0, r0, r0, lsl #3
200078b0:	01e00001 	mvneq	r0, r1
200078b4:	0003f000 	andeq	pc, r3, r0
200078b8:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
200078bc:	00000000 	andeq	r0, r0, r0

200078c0 <witch2_light_bits>:
	...
200078d8:	80000380 	andhi	r0, r0, r0, lsl #7
200078dc:	03800003 	orreq	r0, r0, #3
	...

200078f8 <witch3_black_bits>:
200078f8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200078fc:	01200001 			; <UNDEFINED> instruction: 0x01200001
20007900:	00034000 	andeq	r4, r3, r0
20007904:	20000740 	andcs	r0, r0, r0, asr #14
20007908:	66200007 	strtvs	r0, [r0], -r7
2000790c:	003ff800 	eorseq	pc, pc, r0, lsl #16
20007910:	40000440 	andmi	r0, r0, r0, asr #8
20007914:	04400004 	strbeq	r0, [r0], #-4
20007918:	00038000 	andeq	r8, r3, r0
2000791c:	10000660 	andne	r0, r0, r0, ror #12
20007920:	1c08000e 	stcne	0, cr0, [r8], {14}
20007924:	00380800 	eorseq	r0, r8, r0, lsl #16
20007928:	fe003804 	vcmla.f16	d3, d0, d4[0], #0
2000792c:	0000007f 	andeq	r0, r0, pc, ror r0

20007930 <witch3_gray_bits>:
20007930:	00000000 	andeq	r0, r0, r0
20007934:	00c00000 	sbceq	r0, r0, r0
20007938:	00008000 	andeq	r8, r0, r0
2000793c:	c0000080 	andgt	r0, r0, r0, lsl #1
20007940:	01c00000 	biceq	r0, r0, r0
	...
20007954:	e0000180 	and	r0, r0, r0, lsl #3
20007958:	03f00001 	mvnseq	r0, #1
2000795c:	0007f000 	andeq	pc, r7, r0
20007960:	000007f8 	strdeq	r0, [r0], -r8
20007964:	00000000 	andeq	r0, r0, r0

20007968 <witch3_light_bits>:
	...
20007980:	80000380 	andhi	r0, r0, r0, lsl #7
20007984:	03800003 	orreq	r0, r0, #3
	...

200079a0 <firstTime.4067>:
200079a0:	00000001 	andeq	r0, r0, r1

200079a4 <witch1_black_bits>:
200079a4:	200001f8 	strdcs	r0, [r0], -r8
200079a8:	03400001 	movteq	r0, #1
200079ac:	00074000 	andeq	r4, r7, r0
200079b0:	20000720 	andcs	r0, r0, r0, lsr #14
200079b4:	3ff80066 	svccc	0x00f80066
200079b8:	00044000 	andeq	r4, r4, r0
200079bc:	40000440 	andmi	r0, r0, r0, asr #8
200079c0:	03800004 	orreq	r0, r0, #4
200079c4:	00064000 	andeq	r4, r6, r0
200079c8:	20000640 	andcs	r0, r0, r0, asr #12
200079cc:	0e200006 	cdpeq	0, 2, cr0, cr0, cr6, {0}
200079d0:	000e1000 	andeq	r1, lr, r0
200079d4:	f8000c10 			; <UNDEFINED> instruction: 0xf8000c10
200079d8:	0000001f 	andeq	r0, r0, pc, lsl r0

200079dc <witch1_gray_bits>:
200079dc:	c0000000 	andgt	r0, r0, r0
200079e0:	00800000 	addeq	r0, r0, r0
200079e4:	00008000 	andeq	r8, r0, r0
200079e8:	c00000c0 	andgt	r0, r0, r0, asr #1
200079ec:	00000001 	andeq	r0, r0, r1
	...
200079fc:	00018000 	andeq	r8, r1, r0
20007a00:	c0000180 	andgt	r0, r0, r0, lsl #3
20007a04:	01c00001 	biceq	r0, r0, r1
20007a08:	0001e000 	andeq	lr, r1, r0
20007a0c:	000003e0 	andeq	r0, r0, r0, ror #7
20007a10:	00000000 	andeq	r0, r0, r0

20007a14 <witch1_light_bits>:
	...
20007a28:	00038000 	andeq	r8, r3, r0
20007a2c:	80000380 	andhi	r0, r0, r0, lsl #7
20007a30:	00000003 	andeq	r0, r0, r3
	...

20007a4c <witch2_black_bits>:
20007a4c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20007a50:	01200001 			; <UNDEFINED> instruction: 0x01200001
20007a54:	00034000 	andeq	r4, r3, r0
20007a58:	20000740 	andcs	r0, r0, r0, asr #14
20007a5c:	66200007 	strtvs	r0, [r0], -r7
20007a60:	003ff800 	eorseq	pc, pc, r0, lsl #16
20007a64:	40000440 	andmi	r0, r0, r0, asr #8
20007a68:	04400004 	strbeq	r0, [r0], #-4
20007a6c:	00038000 	andeq	r8, r3, r0
20007a70:	20000660 	andcs	r0, r0, r0, ror #12
20007a74:	0e100006 	cdpeq	0, 1, cr0, cr0, cr6, {0}
20007a78:	001c0800 	andseq	r0, ip, r0, lsl #16
20007a7c:	fc001c08 	stc2	12, cr1, [r0], {8}
20007a80:	0000003f 	andeq	r0, r0, pc, lsr r0

20007a84 <witch2_gray_bits>:
20007a84:	00000000 	andeq	r0, r0, r0
20007a88:	00c00000 	sbceq	r0, r0, r0
20007a8c:	00008000 	andeq	r8, r0, r0
20007a90:	c0000080 	andgt	r0, r0, r0, lsl #1
20007a94:	01c00000 	biceq	r0, r0, r0
	...
20007aa8:	c0000180 	andgt	r0, r0, r0, lsl #3
20007aac:	01e00001 	mvneq	r0, r1
20007ab0:	0003f000 	andeq	pc, r3, r0
20007ab4:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
20007ab8:	00000000 	andeq	r0, r0, r0

20007abc <witch2_light_bits>:
	...
20007ad4:	80000380 	andhi	r0, r0, r0, lsl #7
20007ad8:	03800003 	orreq	r0, r0, #3
	...

20007af4 <witch3_black_bits>:
20007af4:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20007af8:	01200001 			; <UNDEFINED> instruction: 0x01200001
20007afc:	00034000 	andeq	r4, r3, r0
20007b00:	20000740 	andcs	r0, r0, r0, asr #14
20007b04:	66200007 	strtvs	r0, [r0], -r7
20007b08:	003ff800 	eorseq	pc, pc, r0, lsl #16
20007b0c:	40000440 	andmi	r0, r0, r0, asr #8
20007b10:	04400004 	strbeq	r0, [r0], #-4
20007b14:	00038000 	andeq	r8, r3, r0
20007b18:	10000660 	andne	r0, r0, r0, ror #12
20007b1c:	1c08000e 	stcne	0, cr0, [r8], {14}
20007b20:	00380800 	eorseq	r0, r8, r0, lsl #16
20007b24:	fe003804 	vcmla.f16	d3, d0, d4[0], #0
20007b28:	0000007f 	andeq	r0, r0, pc, ror r0

20007b2c <witch3_gray_bits>:
20007b2c:	00000000 	andeq	r0, r0, r0
20007b30:	00c00000 	sbceq	r0, r0, r0
20007b34:	00008000 	andeq	r8, r0, r0
20007b38:	c0000080 	andgt	r0, r0, r0, lsl #1
20007b3c:	01c00000 	biceq	r0, r0, r0
	...
20007b50:	e0000180 	and	r0, r0, r0, lsl #3
20007b54:	03f00001 	mvnseq	r0, #1
20007b58:	0007f000 	andeq	pc, r7, r0
20007b5c:	000007f8 	strdeq	r0, [r0], -r8
20007b60:	00000000 	andeq	r0, r0, r0

20007b64 <witch3_light_bits>:
	...
20007b7c:	80000380 	andhi	r0, r0, r0, lsl #7
20007b80:	03800003 	orreq	r0, r0, #3
	...

20007b9c <firstTime.4067>:
20007b9c:	00000001 	andeq	r0, r0, r1

20007ba0 <direction.4072>:
20007ba0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20007ba4 <indoors_black_bits>:
20007ba4:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20007bb4:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20007bc4:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20007bd4:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20007be4:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20007bf4:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20007c04:	00000280 	andeq	r0, r0, r0, lsl #5
	...
20007c14:	00000440 	andeq	r0, r0, r0, asr #8
	...
20007c24:	00002aa8 	andeq	r2, r0, r8, lsr #21
	...
20007c34:	00001290 	muleq	r0, r0, r2
	...
20007c44:	00002c68 	andeq	r2, r0, r8, ror #24
	...
20007c54:	00002008 	andeq	r2, r0, r8
	...
20007c64:	000027c8 	andeq	r2, r0, r8, asr #15
	...
20007c74:	00001ff0 	strdeq	r1, [r0], -r0
	...
20007c84:	00000d60 	andeq	r0, r0, r0, ror #26
	...
20007cf4:	f7fbfe00 			; <UNDEFINED> instruction: 0xf7fbfe00
20007cf8:	7fbfdfef 	svcvc	0x00bfdfef
20007cfc:	fbfdfeff 	blx	1ff87902 <startup-0x786fe>
20007d00:	00ff703f 	rscseq	r7, pc, pc, lsr r0	; <UNPREDICTABLE>
20007d04:	0c060200 	sfmeq	f0, 4, [r6], {-0}
20007d08:	c0603018 	rsbgt	r3, r0, r8, lsl r0
20007d0c:	06030180 	streq	r0, [r3], -r0, lsl #3
20007d10:	0080d02c 	addeq	sp, r0, ip, lsr #32
20007d14:	0c060200 	sfmeq	f0, 4, [r6], {-0}
20007d18:	c0603018 	rsbgt	r3, r0, r8, lsl r0
20007d1c:	06030180 	streq	r0, [r3], -r0, lsl #3
20007d20:	0080d02c 	addeq	sp, r0, ip, lsr #32
20007d24:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20007d28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007d2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007d30:	00ffdfef 	rscseq	sp, pc, pc, ror #31
	...
20007d40:	000050e8 	andeq	r5, r0, r8, ror #1
	...
20007d50:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
20007d60:	00005028 	andeq	r5, r0, r8, lsr #32
	...
20007d70:	00005028 	andeq	r5, r0, r8, lsr #32
	...
20007d80:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
20007d90:	03f050e8 	mvnseq	r5, #232	; 0xe8
	...
20007da0:	0c0c5fe8 	stceq	15, cr5, [ip], {232}	; 0xe8
	...
20007db0:	10025028 	andne	r5, r2, r8, lsr #32
	...
20007dc0:	13fa5028 	mvnsne	r5, #40	; 0x28
	...
20007dd0:	100a5fe8 	andne	r5, sl, r8, ror #31
	...
20007de0:	100a50e8 	andne	r5, sl, r8, ror #1
	...
20007df0:	100a5fe8 	andne	r5, sl, r8, ror #31
	...
20007e00:	100a5028 	andne	r5, sl, r8, lsr #32
	...
20007e10:	100a5028 	andne	r5, sl, r8, lsr #32
	...
20007e20:	100a5fe8 	andne	r5, sl, r8, ror #31
	...
20007e30:	100a50e8 	andne	r5, sl, r8, ror #1
	...
20007e40:	100a5ee8 	andne	r5, sl, r8, ror #29
	...
20007e50:	100a5028 	andne	r5, sl, r8, lsr #32
	...
20007e60:	100a5028 	andne	r5, sl, r8, lsr #32
	...
20007e70:	10025fe8 	andne	r5, r2, r8, ror #31
	...
20007e80:	0ffc50e8 	svceq	0x00fc50e8
	...
20007e90:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
20007ea0:	00005028 	andeq	r5, r0, r8, lsr #32
	...
20007eb0:	00005028 	andeq	r5, r0, r8, lsr #32
	...
20007ec0:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
20007ed0:	000050e8 	andeq	r5, r0, r8, ror #1
	...
20007ee0:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
20007ef0:	00007028 	andeq	r7, r0, r8, lsr #32
	...
20007f00:	00007028 	andeq	r7, r0, r8, lsr #32
	...
20007f10:	00007038 	andeq	r7, r0, r8, lsr r0
20007f14:	f7fbfdfe 			; <UNDEFINED> instruction: 0xf7fbfdfe
20007f18:	7fbfdfef 	svcvc	0x00bfdfef
20007f1c:	fbfdfeff 	blx	1ff87b22 <startup-0x784de>
20007f20:	bfbfeff7 	svclt	0x00bfeff7
20007f24:	0c060301 	stceq	3, cr0, [r6], {1}
20007f28:	c0603018 	rsbgt	r3, r0, r8, lsl r0
20007f2c:	06030180 	streq	r0, [r3], -r0, lsl #3
20007f30:	6030180c 	eorsvs	r1, r0, ip, lsl #16
20007f34:	0c060301 	stceq	3, cr0, [r6], {1}
20007f38:	c0603018 	rsbgt	r3, r0, r8, lsl r0
20007f3c:	06030180 	streq	r0, [r3], -r0, lsl #3
20007f40:	6030180c 	eorsvs	r1, r0, ip, lsl #16
20007f44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f54:	c0603018 	rsbgt	r3, r0, r8, lsl r0
20007f58:	06030180 	streq	r0, [r3], -r0, lsl #3
20007f5c:	6030180c 	eorsvs	r1, r0, ip, lsl #16
20007f60:	030180c0 	movweq	r8, #4288	; 0x10c0
20007f64:	c0603018 	rsbgt	r3, r0, r8, lsl r0
20007f68:	06030180 	streq	r0, [r3], -r0, lsl #3
20007f6c:	6030180c 	eorsvs	r1, r0, ip, lsl #16
20007f70:	030180c0 	movweq	r8, #4288	; 0x10c0
20007f74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007f84:	030180c0 	movweq	r8, #4288	; 0x10c0
20007f88:	30180c06 	andscc	r0, r8, r6, lsl #24
20007f8c:	0180c060 	orreq	ip, r0, r0, rrx
20007f90:	180c0603 	stmdane	ip, {r0, r1, r9, sl}
20007f94:	030180c0 	movweq	r8, #4288	; 0x10c0
20007f98:	30180c06 	andscc	r0, r8, r6, lsl #24
20007f9c:	0180c060 	orreq	ip, r0, r0, rrx
20007fa0:	180c0603 	stmdane	ip, {r0, r1, r9, sl}

20007fa4 <indoors_gray_bits>:
	...
20008004:	00001110 	andeq	r1, r0, r0, lsl r1
	...
20008014:	00001090 	muleq	r0, r0, r0
	...
20008044:	00000390 	muleq	r0, r0, r3
	...
20008054:	00001340 	andeq	r1, r0, r0, asr #6
	...
20008064:	00000830 	andeq	r0, r0, r0, lsr r8
	...
200080f4:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
200080f8:	80402010 	subhi	r2, r0, r0, lsl r0
200080fc:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
20008100:	00008000 	andeq	r8, r0, r0
20008104:	b0582c00 	subslt	r2, r8, r0, lsl #24
20008108:	0582c160 	streq	ip, [r2, #352]	; 0x160
2000810c:	582c160b 	stmdapl	ip!, {r0, r1, r3, r9, sl, ip}
20008110:	010b0000 	mrseq	r0, (UNDEF: 11)
20008114:	71b8dc00 			; <UNDEFINED> instruction: 0x71b8dc00
20008118:	1b8dc6e3 	blne	1e379cac <startup-0x1c86354>
2000811c:	b8dc6e37 	ldmlt	ip, {r0, r1, r2, r4, r5, r9, sl, fp, sp, lr}^
20008120:	01370001 	teqeq	r7, r1
	...
20008130:	01000000 	mrseq	r0, (UNDEF: 0)
20008134:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
20008138:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000813c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008140:	01ff8007 	mvnseq	r8, r7
	...
20008150:	00008000 	andeq	r8, r0, r0
	...
20008160:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20008170:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20008180:	00008000 	andeq	r8, r0, r0
	...
20008190:	00008000 	andeq	r8, r0, r0
	...
200081a0:	00008000 	andeq	r8, r0, r0
	...
200081b0:	00008180 	andeq	r8, r0, r0, lsl #3
	...
200081c0:	20008180 	andcs	r8, r0, r0, lsl #3
	...
200081d0:	20808000 	addcs	r8, r0, r0
	...
200081e0:	20c08100 	sbccs	r8, r0, r0, lsl #2
	...
200081f0:	21e08000 	mvncs	r8, r0
	...
20008200:	2bf08180 	blcs	1fc28808 <startup-0x3d77f8>
	...
20008210:	25c08180 	strbcs	r8, [r0, #384]	; 0x180
	...
20008220:	29e08000 	stmibcs	r0!, {pc}^
	...
20008230:	2bc08100 	blcs	1f028638 <startup-0xfd79c8>
	...
20008240:	20c08110 	sbccs	r8, r0, r0, lsl r1
	...
20008250:	28e0a190 	stmiacs	r0!, {r4, r7, r8, sp, pc}^
	...
20008260:	2bf08180 	blcs	1fc28868 <startup-0x3d7798>
	...
20008270:	28008000 	stmdacs	r0, {pc}
	...
20008280:	3000a010 	andcc	sl, r0, r0, lsl r0
	...
20008290:	1fc0a000 	svcne	0x00c0a000
	...
200082a0:	0000a180 	andeq	sl, r0, r0, lsl #3
	...
200082b0:	00008190 	muleq	r0, r0, r1
	...
200082c0:	00008010 	andeq	r8, r0, r0, lsl r0
	...
200082d0:	00008110 	andeq	r8, r0, r0, lsl r1
	...
200082e0:	0000a010 	andeq	sl, r0, r0, lsl r0
	...
200082f0:	00008190 	muleq	r0, r0, r1
	...
20008300:	00008190 	muleq	r0, r0, r1
	...
20008310:	00008180 	andeq	r8, r0, r0, lsl #3
20008314:	08040201 	stmdaeq	r4, {r0, r9}
20008318:	80402010 	subhi	r2, r0, r0, lsl r0
2000831c:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
20008320:	40401008 	submi	r1, r0, r8
20008324:	b0582c16 	subslt	r2, r8, r6, lsl ip
20008328:	0582c160 	streq	ip, [r2, #352]	; 0x160
2000832c:	582c160b 	stmdapl	ip!, {r0, r1, r3, r9, sl, ip}
20008330:	82c160b0 	sbchi	r6, r1, #176	; 0xb0
20008334:	71b8dc6e 			; <UNDEFINED> instruction: 0x71b8dc6e
20008338:	1b8dc6e3 	blne	1e379ecc <startup-0x1c86134>
2000833c:	b8dc6e37 	ldmlt	ip, {r0, r1, r2, r4, r5, r9, sl, fp, sp, lr}^
20008340:	8dc6e371 	stclhi	3, cr14, [r6, #452]	; 0x1c4
	...
20008354:	0582c160 	streq	ip, [r2, #352]	; 0x160
20008358:	582c160b 	stmdapl	ip!, {r0, r1, r3, r9, sl, ip}
2000835c:	82c160b0 	sbchi	r6, r1, #176	; 0xb0
20008360:	2c160b05 			; <UNDEFINED> instruction: 0x2c160b05
20008364:	1b8dc6e3 	blne	1e379ef8 <startup-0x1c86108>
20008368:	b8dc6e37 	ldmlt	ip, {r0, r1, r2, r4, r5, r9, sl, fp, sp, lr}^
2000836c:	8dc6e371 	stclhi	3, cr14, [r6, #452]	; 0x1c4
20008370:	dc6e371b 	stclle	7, cr3, [lr], #-108	; 0xffffff94
	...
20008384:	2c160b05 			; <UNDEFINED> instruction: 0x2c160b05
20008388:	c160b058 	qdsubgt	fp, r8, r0
2000838c:	160b0582 	strne	r0, [fp], -r2, lsl #11
20008390:	60b0582c 	adcsvs	r5, r0, ip, lsr #16
20008394:	dc6e371b 	stclle	7, cr3, [lr], #-108	; 0xffffff94
20008398:	c6e371b8 			; <UNDEFINED> instruction: 0xc6e371b8
2000839c:	6e371b8d 	vaddvs.f64	d1, d23, d13
200083a0:	e371b8dc 	cmn	r1, #220, 16	; 0xdc0000

200083a4 <indoors_light_bits>:
	...
200083e4:	00001010 	andeq	r1, r0, r0, lsl r0
	...
20008414:	00000300 	andeq	r0, r0, r0, lsl #6
	...
20008424:	00001110 	andeq	r1, r0, r0, lsl r1
	...
20008434:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20008444:	00001000 	andeq	r1, r0, r0
	...
20008454:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
	...
20008464:	00001000 	andeq	r1, r0, r0
	...
20008504:	43a1d000 			; <UNDEFINED> instruction: 0x43a1d000
20008508:	3a1d0e87 	bcc	2074bf2c <firstTime.4040+0x742b84>
2000850c:	a1d0e874 	bicsge	lr, r0, r4, ror r8
20008510:	00742013 	rsbseq	r2, r4, r3, lsl r0
20008514:	82412000 	subhi	r2, r1, #0
20008518:	24120904 	ldrcs	r0, [r2], #-2308	; 0xfffff6fc
2000851c:	41209048 			; <UNDEFINED> instruction: 0x41209048
20008520:	00482012 	subeq	r2, r8, r2, lsl r0
	...
20008530:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008540:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
20008550:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008560:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008570:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008580:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008590:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
200085a0:	00002010 	andeq	r2, r0, r0, lsl r0
	...
200085b0:	00002010 	andeq	r2, r0, r0, lsl r0
	...
200085c0:	00002010 	andeq	r2, r0, r0, lsl r0
	...
200085d0:	03702010 	cmneq	r0, #16
	...
200085e0:	03302e10 	teqeq	r0, #16, 28	; 0x100
	...
200085f0:	02102010 	andseq	r2, r0, #16
	...
20008600:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008610:	02302010 	eorseq	r2, r0, #16
	...
20008620:	02102010 	andseq	r2, r0, #16
	...
20008630:	00302e10 	eorseq	r2, r0, r0, lsl lr
	...
20008640:	03302000 	teqeq	r0, #0
	...
20008650:	03100000 	tsteq	r0, #0
	...
20008660:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008670:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20008680:	00000f00 	andeq	r0, r0, r0, lsl #30
	...
20008690:	00000010 	andeq	r0, r0, r0, lsl r0
	...
200086a0:	00000010 	andeq	r0, r0, r0, lsl r0
	...
200086b0:	00002000 	andeq	r2, r0, r0
	...
200086c0:	00002000 	andeq	r2, r0, r0
	...
200086d0:	00002e00 	andeq	r2, r0, r0, lsl #28
	...
20008724:	43a1d0e8 			; <UNDEFINED> instruction: 0x43a1d0e8
20008728:	3a1d0e87 	bcc	2074c14c <firstTime.4040+0x742da4>
2000872c:	a1d0e874 	bicsge	lr, r0, r4, ror r8
20008730:	1d0e8743 	stcne	7, cr8, [lr, #-268]	; 0xfffffef4
20008734:	82412090 	subhi	r2, r1, #144	; 0x90
20008738:	24120904 	ldrcs	r0, [r2], #-2308	; 0xfffff6fc
2000873c:	41209048 			; <UNDEFINED> instruction: 0x41209048
20008740:	12090482 	andne	r0, r9, #-2113929216	; 0x82000000
	...
20008754:	3a1d0e87 	bcc	2074c178 <firstTime.4040+0x742dd0>
20008758:	a1d0e874 	bicsge	lr, r0, r4, ror r8
2000875c:	1d0e8743 	stcne	7, cr8, [lr, #-268]	; 0xfffffef4
20008760:	d0e8743a 	rscle	r7, r8, sl, lsr r4
20008764:	24120904 	ldrcs	r0, [r2], #-2308	; 0xfffff6fc
20008768:	41209048 			; <UNDEFINED> instruction: 0x41209048
2000876c:	12090482 	andne	r0, r9, #-2113929216	; 0x82000000
20008770:	20904824 	addscs	r4, r0, r4, lsr #16
	...
20008784:	d0e8743a 	rscle	r7, r8, sl, lsr r4
20008788:	0e8743a1 	cdpeq	3, 8, cr4, cr7, cr1, {5}
2000878c:	e8743a1d 	ldmda	r4!, {r0, r2, r3, r4, r9, fp, ip, sp}^
20008790:	8743a1d0 			; <UNDEFINED> instruction: 0x8743a1d0
20008794:	20904824 	addscs	r4, r0, r4, lsr #16
20008798:	09048241 	stmdbeq	r4, {r0, r6, r9, pc}
2000879c:	90482412 	subls	r2, r8, r2, lsl r4
200087a0:	04824120 	streq	r4, [r2], #288	; 0x120

200087a4 <firstTime.4040>:
200087a4:	00000001 	andeq	r0, r0, r1

200087a8 <indoors2_black_bits>:
200087a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200087ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200087b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200087b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200087b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200087bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200087c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200087c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200087c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200087cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200087d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200087d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200087d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200087dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200087e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200087e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200087e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200087ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200087f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200087f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200087f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200087fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008800:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008804:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008808:	ffffeeef 			; <UNDEFINED> instruction: 0xffffeeef
2000880c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008810:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008814:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008818:	ffffec6f 			; <UNDEFINED> instruction: 0xffffec6f
2000881c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008820:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008824:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008828:	ffffeaaf 			; <UNDEFINED> instruction: 0xffffeaaf
2000882c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008830:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008834:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008838:	fffff29f 			; <UNDEFINED> instruction: 0xfffff29f
2000883c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008840:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008844:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008848:	ffffec6f 			; <UNDEFINED> instruction: 0xffffec6f
2000884c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008850:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008854:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008858:	ffffe00f 			; <UNDEFINED> instruction: 0xffffe00f
2000885c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008860:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008864:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008868:	ffffe7cf 			; <UNDEFINED> instruction: 0xffffe7cf
2000886c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008870:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008874:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008878:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000887c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008880:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008884:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008888:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000888c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008890:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008894:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008898:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000889c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200088a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200088a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200088a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200088ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200088b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200088b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200088b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200088bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200088c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200088c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200088c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200088cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200088d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200088d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200088d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200088dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200088e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200088e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200088e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200088ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200088f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200088f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200088f8:	f7fbffff 			; <UNDEFINED> instruction: 0xf7fbffff
200088fc:	7fbfdfef 	svcvc	0x00bfdfef
20008900:	fbfdfeff 	blx	1ff88506 <startup-0x77afa>
20008904:	ffff7fff 			; <UNDEFINED> instruction: 0xffff7fff
20008908:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000890c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008910:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008914:	feffdfef 	cdp2	15, 15, cr13, cr15, cr15, {7}
20008918:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000891c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008920:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008924:	feffdfef 	cdp2	15, 15, cr13, cr15, cr15, {7}
20008928:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000892c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008930:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008934:	feffdfef 	cdp2	15, 15, cr13, cr15, cr15, {7}
20008938:	00000fff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
20008944:	fe0050e8 	cdp2	0, 0, cr5, cr0, cr8, {7}
20008948:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000894c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008950:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008954:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
20008958:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000895c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008960:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008964:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
20008968:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000896c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008970:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008974:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
20008978:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000897c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008980:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008984:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
20008988:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000898c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008990:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008994:	ffff50ef 			; <UNDEFINED> instruction: 0xffff50ef
20008998:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000899c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200089a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200089a4:	ec0d5fef 	stc	15, cr5, [sp], {239}	; 0xef
200089a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200089ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200089b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200089b4:	f003502f 			; <UNDEFINED> instruction: 0xf003502f
200089b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200089bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200089c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200089c4:	d3fb502f 	mvnsle	r5, #47	; 0x2f
200089c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200089cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200089d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200089d4:	d00b5fef 	andle	r5, fp, pc, ror #31
200089d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200089dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200089e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200089e4:	d00b50ef 	andle	r5, fp, pc, ror #1
200089e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200089ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200089f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200089f4:	d00b5fef 	andle	r5, fp, pc, ror #31
200089f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200089fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008a00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008a04:	d00b502f 	andle	r5, fp, pc, lsr #32
20008a08:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008a0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008a10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008a14:	d00b502f 	andle	r5, fp, pc, lsr #32
20008a18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008a1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008a20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008a24:	d00b5fef 	andle	r5, fp, pc, ror #31
20008a28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008a2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008a30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008a34:	d00b50ef 	andle	r5, fp, pc, ror #1
20008a38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008a3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008a40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008a44:	d00b5eef 	andle	r5, fp, pc, ror #29
20008a48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008a4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008a50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008a54:	d00b502f 	andle	r5, fp, pc, lsr #32
20008a58:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008a5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008a60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008a64:	d00b502f 	andle	r5, fp, pc, lsr #32
20008a68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008a6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008a70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008a74:	d0035fef 	andle	r5, r3, pc, ror #31
20008a78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008a7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008a80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008a84:	cffd50ef 	svcgt	0x00fd50ef
20008a88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008a8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008a90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008a94:	e03f5fef 	eors	r5, pc, pc, ror #31
20008a98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008a9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008aa0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008aa4:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
20008aa8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008aac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008ab0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008ab4:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
20008ab8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008abc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008ac0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008ac4:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
20008ac8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008acc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008ad0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008ad4:	ffff50ef 			; <UNDEFINED> instruction: 0xffff50ef
20008ad8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008adc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008ae0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008ae4:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
20008ae8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008aec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008af0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008af4:	ffff7e6f 			; <UNDEFINED> instruction: 0xffff7e6f
20008af8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008afc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b04:	ffff7e6f 			; <UNDEFINED> instruction: 0xffff7e6f
20008b08:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b14:	ffff7e7f 			; <UNDEFINED> instruction: 0xffff7e7f
20008b18:	f7fbfdfe 			; <UNDEFINED> instruction: 0xf7fbfdfe
20008b1c:	7fbfdfef 	svcvc	0x00bfdfef
20008b20:	fbfdfeff 	blx	1ff88726 <startup-0x778da>
20008b24:	bfbfeff7 	svclt	0x00bfeff7
20008b28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b58:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b94:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008b9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008ba0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008ba4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20008ba8 <indoors2_gray_bits>:
	...
20008c08:	00001110 	andeq	r1, r0, r0, lsl r1
	...
20008c18:	00001090 	muleq	r0, r0, r0
	...
20008c48:	00000390 	muleq	r0, r0, r3
	...
20008c58:	00001340 	andeq	r1, r0, r0, asr #6
	...
20008c68:	00000830 	andeq	r0, r0, r0, lsr r8
	...
20008cf8:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
20008cfc:	80402010 	subhi	r2, r0, r0, lsl r0
20008d00:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
20008d04:	00008000 	andeq	r8, r0, r0
	...
20008d14:	01000000 	mrseq	r0, (UNDEF: 0)
	...
20008d24:	01000000 	mrseq	r0, (UNDEF: 0)
	...
20008d34:	01000000 	mrseq	r0, (UNDEF: 0)
20008d38:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
20008d3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008d40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008d44:	01ff8007 	mvnseq	r8, r7
	...
20008d54:	00008000 	andeq	r8, r0, r0
	...
20008d64:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20008d74:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20008d84:	00008000 	andeq	r8, r0, r0
	...
20008d94:	00008000 	andeq	r8, r0, r0
	...
20008da4:	00008000 	andeq	r8, r0, r0
	...
20008db4:	00008180 	andeq	r8, r0, r0, lsl #3
	...
20008dc4:	20008180 	andcs	r8, r0, r0, lsl #3
	...
20008dd4:	20808000 	addcs	r8, r0, r0
	...
20008de4:	20c08100 	sbccs	r8, r0, r0, lsl #2
	...
20008df4:	21e08000 	mvncs	r8, r0
	...
20008e04:	2bf08180 	blcs	1fc2940c <startup-0x3d6bf4>
	...
20008e14:	25c08180 	strbcs	r8, [r0, #384]	; 0x180
	...
20008e24:	29e08000 	stmibcs	r0!, {pc}^
	...
20008e34:	2bc08100 	blcs	1f02923c <startup-0xfd6dc4>
	...
20008e44:	20c08110 	sbccs	r8, r0, r0, lsl r1
	...
20008e54:	28e0a190 	stmiacs	r0!, {r4, r7, r8, sp, pc}^
	...
20008e64:	2bf08180 	blcs	1fc2946c <startup-0x3d6b94>
	...
20008e74:	28008000 	stmdacs	r0, {pc}
	...
20008e84:	3000a010 	andcc	sl, r0, r0, lsl r0
	...
20008e94:	1fc0a000 	svcne	0x00c0a000
	...
20008ea4:	0000a180 	andeq	sl, r0, r0, lsl #3
	...
20008eb4:	00008190 	muleq	r0, r0, r1
	...
20008ec4:	00008010 	andeq	r8, r0, r0, lsl r0
	...
20008ed4:	00008110 	andeq	r8, r0, r0, lsl r1
	...
20008ee4:	0000a010 	andeq	sl, r0, r0, lsl r0
	...
20008ef4:	00008190 	muleq	r0, r0, r1
	...
20008f04:	00008190 	muleq	r0, r0, r1
	...
20008f14:	00008180 	andeq	r8, r0, r0, lsl #3
20008f18:	08040201 	stmdaeq	r4, {r0, r9}
20008f1c:	80402010 	subhi	r2, r0, r0, lsl r0
20008f20:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
20008f24:	40401008 	submi	r1, r0, r8
	...

20008fa8 <indoors2_light_bits>:
	...
20009018:	00000300 	andeq	r0, r0, r0, lsl #6
	...
20009028:	00001110 	andeq	r1, r0, r0, lsl r1
	...
20009038:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20009048:	00001000 	andeq	r1, r0, r0
	...
20009058:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
	...
20009068:	00001000 	andeq	r1, r0, r0
	...
20009114:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009124:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009134:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009144:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
20009154:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009164:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009174:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009184:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009194:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
200091a4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
200091b4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
200091c4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
200091d4:	03702010 	cmneq	r0, #16
	...
200091e4:	03302e10 	teqeq	r0, #16, 28	; 0x100
	...
200091f4:	02102010 	andseq	r2, r0, #16
	...
20009204:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009214:	02302010 	eorseq	r2, r0, #16
	...
20009224:	02102010 	andseq	r2, r0, #16
	...
20009234:	00302e10 	eorseq	r2, r0, r0, lsl lr
	...
20009244:	03302000 	teqeq	r0, #0
	...
20009254:	03100000 	tsteq	r0, #0
	...
20009264:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009274:	00002010 	andeq	r2, r0, r0, lsl r0
	...
20009284:	00000f00 	andeq	r0, r0, r0, lsl #30
	...
20009294:	00000010 	andeq	r0, r0, r0, lsl r0
	...
200092a4:	00000010 	andeq	r0, r0, r0, lsl r0
	...
200092b4:	00002000 	andeq	r2, r0, r0
	...
200092c4:	00002000 	andeq	r2, r0, r0
	...
200092d4:	00002e00 	andeq	r2, r0, r0, lsl #28
	...

200093a8 <firstTime.4040>:
200093a8:	00000001 	andeq	r0, r0, r1
200093ac:	00202020 	eoreq	r2, r0, r0, lsr #32
200093b0:	41524b2a 	cmpmi	r2, sl, lsr #22
200093b4:	2a202a21 	bcs	20813c40 <firstTime.4040+0x80a898>
200093b8:	2141524b 	cmpcs	r1, fp, asr #4
200093bc:	0000002a 	andeq	r0, r0, sl, lsr #32
200093c0:	734c4944 	movtvc	r4, #51524	; 0xc944
200093c4:	7469772d 	strbtvc	r7, [r9], #-1837	; 0xfffff8d3
200093c8:	73656863 	cmnvc	r5, #6488064	; 0x630000
200093cc:	76616820 	strbtvc	r6, [r1], -r0, lsr #16
200093d0:	00000065 	andeq	r0, r0, r5, rrx
200093d4:	20726f46 	rsbscs	r6, r2, r6, asr #30
200093d8:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
200093dc:	65697275 	strbvs	r7, [r9, #-629]!	; 0xfffffd8b
200093e0:	68742073 	ldmdavs	r4!, {r0, r1, r4, r5, r6, sp}^
200093e4:	00000065 	andeq	r0, r0, r5, rrx
200093e8:	20202020 	eorcs	r2, r0, r0, lsr #32
200093ec:	00000000 	andeq	r0, r0, r0
200093f0:	6c696f63 	stclvs	15, cr6, [r9], #-396	; 0xfffffe74
200093f4:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
200093f8:	6566206e 	strbvs	r2, [r6, #-110]!	; 0xffffff92
200093fc:	002c7261 	eoreq	r7, ip, r1, ror #4
20009400:	74616874 	strbtvc	r6, [r1], #-2164	; 0xfffff78c
20009404:	44206120 	strtmi	r6, [r0], #-288	; 0xfffffee0
20009408:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
2000940c:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
20009410:	00000068 	andeq	r0, r0, r8, rrx
20009414:	6e656877 	mcrvs	8, 3, r6, cr5, cr7, {3}
20009418:	72657665 	rsbvc	r7, r5, #105906176	; 0x6500000
2000941c:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
20009420:	65682079 	strbvs	r2, [r8, #-121]!	; 0xffffff87
20009424:	00007261 	andeq	r7, r0, r1, ror #4
20009428:	6e207369 	cdpvs	3, 2, cr7, cr0, cr9, {3}
2000942c:	2e726165 	rpwcssz	f6, f2, f5
20009430:	00000000 	andeq	r0, r0, r0
20009434:	70727573 	rsbsvc	r7, r2, r3, ror r5
20009438:	69736972 	ldmdbvs	r3!, {r1, r4, r5, r6, r8, fp, sp, lr}^
2000943c:	202c676e 	eorcs	r6, ip, lr, ror #14
20009440:	646e6966 	strbtvs	r6, [lr], #-2406	; 0xfffff69a
20009444:	00676e69 	rsbeq	r6, r7, r9, ror #28
20009448:	69206f53 	stmdbvs	r0!, {r0, r1, r4, r6, r8, r9, sl, fp, sp, lr}
2000944c:	73692074 	cmnvc	r9, #116	; 0x74
20009450:	69757120 	ldmdbvs	r5!, {r5, r8, ip, sp, lr}^
20009454:	00006574 	andeq	r6, r0, r4, ror r5
20009458:	20756f79 	rsbscs	r6, r5, r9, ror pc
2000945c:	65726568 	ldrbvs	r6, [r2, #-1384]!	; 0xfffffa98
20009460:	0000002c 	andeq	r0, r0, ip, lsr #32
20009464:	72696568 	rsbvc	r6, r9, #104, 10	; 0x1a000000
20009468:	206f7420 	rsbcs	r7, pc, r0, lsr #8
2000946c:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
20009470:	61654c20 	cmnvs	r5, r0, lsr #24
20009474:	00002e72 	andeq	r2, r0, r2, ror lr
20009478:	65657571 	strbvs	r7, [r5, #-1393]!	; 0xfffffa8f
2000947c:	6144206e 	cmpvs	r4, lr, rrx
20009480:	206f6666 	rsbcs	r6, pc, r6, ror #12
20009484:	4420666f 	strtmi	r6, [r0], #-1647	; 0xfffff991
20009488:	2c734c49 	ldclcs	12, cr4, [r3], #-292	; 0xfffffedc
2000948c:	00000000 	andeq	r0, r0, r0
20009490:	706d6574 	rsbvc	r6, sp, r4, ror r5
20009494:	2c646574 	cfstr64cs	mvdx6, [r4], #-464	; 0xfffffe30
20009498:	206f7420 	rsbcs	r7, pc, r0, lsr #8
2000949c:	746f6f6c 	strbtvc	r6, [pc], #-3948	; 200094a4 <firstTime.4040+0xfc>
200094a0:	00000000 	andeq	r0, r0, r0
200094a4:	20747542 	rsbscs	r7, r4, r2, asr #10
200094a8:	6279616d 	rsbsvs	r6, r9, #1073741851	; 0x4000001b
200094ac:	6f792065 	svcvs	0x00792065
200094b0:	65722775 	ldrbvs	r2, [r2, #-1909]!	; 0xfffff88b
200094b4:	00000000 	andeq	r0, r0, r0
200094b8:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 20009328 <indoors2_light_bits+0x380>
200094bc:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
200094c0:	63697220 	cmnvs	r9, #32, 4
200094c4:	2c736568 	cfldr64cs	mvdx6, [r3], #-416	; 0xfffffe60
200094c8:	00000000 	andeq	r0, r0, r0
200094cc:	6b636977 	blvs	218e3ab0 <firstTime.4040+0x18da708>
200094d0:	44206465 	strtmi	r6, [r0], #-1125	; 0xfffffb9b
200094d4:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
200094d8:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
200094dc:	2e736568 	cdpcs	5, 7, cr6, cr3, cr8, {3}
200094e0:	00000000 	andeq	r0, r0, r0
200094e4:	65727573 	ldrbvs	r7, [r2, #-1395]!	; 0xfffffa8d
200094e8:	79622064 	stmdbvc	r2!, {r2, r5, r6, sp}^
200094ec:	00000000 	andeq	r0, r0, r0
200094f0:	67206f73 			; <UNDEFINED> instruction: 0x67206f73
200094f4:	70706972 	rsbsvc	r6, r0, r2, ror r9
200094f8:	20796c69 	rsbscs	r6, r9, r9, ror #24
200094fc:	61657274 	smcvs	22308	; 0x5724
20009500:	0000002d 	andeq	r0, r0, sp, lsr #32
20009504:	6572202d 	ldrbvs	r2, [r2, #-45]!	; 0xffffffd3
20009508:	20746573 	rsbscs	r6, r4, r3, ror r5
2000950c:	20656874 	rsbcs	r6, r5, r4, ror r8
20009510:	74697773 	strbtvc	r7, [r9], #-1907	; 0xfffff88d
20009514:	00216863 	eoreq	r6, r1, r3, ror #16
20009518:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xfffff1bb
2000951c:	62202c72 	eorvs	r2, r0, #29184	; 0x7200
20009520:	65766172 	ldrbvs	r6, [r6, #-370]!	; 0xfffffe8e
20009524:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
20009528:	002c6863 	eoreq	r6, ip, r3, ror #16
2000952c:	20002470 	andcs	r2, r0, r0, ror r4
20009530:	2000247a 	andcs	r2, r0, sl, ror r4
20009534:	20002484 	andcs	r2, r0, r4, lsl #9
20009538:	2000248e 	andcs	r2, r0, lr, lsl #9
2000953c:	20002498 	mulcs	r0, r8, r4
20009540:	200024a2 	andcs	r2, r0, r2, lsr #9
20009544:	200024ac 	andcs	r2, r0, ip, lsr #9
20009548:	200024b6 			; <UNDEFINED> instruction: 0x200024b6
2000954c:	20202020 	eorcs	r2, r0, r0, lsr #32
20009550:	20202020 	eorcs	r2, r0, r0, lsr #32
20009554:	20202020 	eorcs	r2, r0, r0, lsr #32
20009558:	20202020 	eorcs	r2, r0, r0, lsr #32
2000955c:	20202020 	eorcs	r2, r0, r0, lsr #32
20009560:	00000000 	andeq	r0, r0, r0
20009564:	61666c41 	cmnvs	r6, r1, asr #24
20009568:	656d756e 	strbvs	r7, [sp, #-1390]!	; 0xfffffa92
2000956c:	6b736972 	blvs	21ce3b3c <firstTime.4040+0x1cda794>
20009570:	00000000 	andeq	r0, r0, r0
20009574:	64726168 	ldrbtvs	r6, [r2], #-360	; 0xfffffe98
20009578:	a4c3a5c3 	strbge	sl, [r3], #1475	; 0x5c3
2000957c:	7261b6c3 	rsbvc	fp, r1, #204472320	; 0xc300000
20009580:	75732065 	ldrbvc	r2, [r3, #-101]!	; 0xffffff9b
20009584:	00726567 	rsbseq	r6, r2, r7, ror #10

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000092c 	andeq	r0, r0, ip, lsr #18
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000081 	andeq	r0, r0, r1, lsl #1
      10:	0004940c 	andeq	r9, r4, ip, lsl #8
	...
      20:	020c0200 	andeq	r0, ip, #0, 4
      24:	00004e05 	andeq	r4, r0, r5, lsl #28
      28:	03060300 	movweq	r0, #25344	; 0x6300
      2c:	07020000 	streq	r0, [r2, -r0]
      30:	0000004e 	andeq	r0, r0, lr, asr #32
      34:	065f0300 	ldrbeq	r0, [pc], -r0, lsl #6
      38:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      3c:	0000004e 	andeq	r0, r0, lr, asr #32
      40:	119c0304 	orrsne	r0, ip, r4, lsl #6
      44:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
      48:	00000055 	andeq	r0, r0, r5, asr r0
      4c:	04040008 	streq	r0, [r4], #-8
      50:	00032a07 	andeq	r2, r3, r7, lsl #20
      54:	5b040500 	blpl	10145c <startup-0x1fefeba4>
      58:	04000000 	streq	r0, [r0], #-0
      5c:	04410801 	strbeq	r0, [r1], #-2049	; 0xfffff7ff
      60:	ee060000 	cdp	0, 0, cr0, cr6, cr0, {0}
      64:	02000012 	andeq	r0, r0, #18
      68:	0000210a 	andeq	r2, r0, sl, lsl #2
      6c:	00160700 	andseq	r0, r6, r0, lsl #14
      70:	030c0000 	movweq	r0, #49152	; 0xc000
      74:	00009e06 	andeq	r9, r0, r6, lsl #28
      78:	052c0300 	streq	r0, [ip, #-768]!	; 0xfffffd00
      7c:	07030000 	streq	r0, [r3, -r0]
      80:	0000009e 	muleq	r0, lr, r0
      84:	001d0300 	andseq	r0, sp, r0, lsl #6
      88:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
      8c:	0000009e 	muleq	r0, lr, r0
      90:	00120304 	andseq	r0, r2, r4, lsl #6
      94:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
      98:	0000009e 	muleq	r0, lr, r0
      9c:	04050008 	streq	r0, [r5], #-8
      a0:	00000062 	andeq	r0, r0, r2, rrx
      a4:	000fd706 	andeq	sp, pc, r6, lsl #14
      a8:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
      ac:	07000000 	streq	r0, [r0, -r0]
      b0:	00000624 	andeq	r0, r0, r4, lsr #12
      b4:	28060424 	stmdacs	r6, {r2, r5, sl}
      b8:	03000001 	movweq	r0, #1
      bc:	000003de 	ldrdeq	r0, [r0], -lr
      c0:	01280704 			; <UNDEFINED> instruction: 0x01280704
      c4:	03000000 	movweq	r0, #0
      c8:	00000630 	andeq	r0, r0, r0, lsr r6
      cc:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
      d0:	03040000 	movweq	r0, #16384	; 0x4000
      d4:	00000597 	muleq	r0, r7, r5
      d8:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
      dc:	03080000 	movweq	r0, #32768	; 0x8000
      e0:	000005c3 	andeq	r0, r0, r3, asr #11
      e4:	01460c04 	cmpeq	r6, r4, lsl #24
      e8:	030c0000 	movweq	r0, #49152	; 0xc000
      ec:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
      f0:	01460d04 	cmpeq	r6, r4, lsl #26
      f4:	03100000 	tsteq	r0, #0
      f8:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
      fc:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
     100:	03140000 	tsteq	r4, #0
     104:	00000052 	andeq	r0, r0, r2, asr r0
     108:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
     10c:	03180000 	tsteq	r8, #0
     110:	0000036f 	andeq	r0, r0, pc, ror #6
     114:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
     118:	031c0000 	tsteq	ip, #0
     11c:	0000037f 	andeq	r0, r0, pc, ror r3
     120:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
     124:	00200000 	eoreq	r0, r0, r0
     128:	00a40405 	adceq	r0, r4, r5, lsl #8
     12c:	04080000 	streq	r0, [r8], #-0
     130:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     134:	01400900 	cmpeq	r0, r0, lsl #18
     138:	400a0000 	andmi	r0, sl, r0
     13c:	00000001 	andeq	r0, r0, r1
     140:	00af0405 	adceq	r0, pc, r5, lsl #8
     144:	04050000 	streq	r0, [r5], #-0
     148:	00000135 	andeq	r0, r0, r5, lsr r1
     14c:	00062506 	andeq	r2, r6, r6, lsl #10
     150:	af150400 	svcge	0x00150400
     154:	0b000000 	bleq	15c <startup-0x1ffffea4>
     158:	00000162 	andeq	r0, r0, r2, ror #2
     15c:	00000162 	andeq	r0, r0, r2, ror #2
     160:	0405000c 	streq	r0, [r5], #-12
     164:	0000014c 	andeq	r0, r0, ip, asr #2
     168:	0004c40d 	andeq	ip, r4, sp, lsl #8
     16c:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
     170:	0d000001 	stceq	0, cr0, [r0, #-4]
     174:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
     178:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
     17c:	ee060000 	cdp	0, 0, cr0, cr6, cr0, {0}
     180:	05000005 	streq	r0, [r0, #-5]
     184:	00005b24 	andeq	r5, r0, r4, lsr #22
     188:	017e0b00 	cmneq	lr, r0, lsl #22
     18c:	019a0000 	orrseq	r0, sl, r0
     190:	9a0e0000 	bls	380198 <startup-0x1fc7fe68>
     194:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     198:	04040003 	streq	r0, [r4], #-3
     19c:	00039c07 	andeq	r9, r3, r7, lsl #24
     1a0:	10d20d00 	sbcsne	r0, r2, r0, lsl #26
     1a4:	2b050000 	blcs	1401ac <startup-0x1febfe54>
     1a8:	00000189 	andeq	r0, r0, r9, lsl #3
     1ac:	0002220d 	andeq	r2, r2, sp, lsl #4
     1b0:	892c0500 	stmdbhi	ip!, {r8, sl}
     1b4:	0d000001 	stceq	0, cr0, [r0, #-4]
     1b8:	0000044f 	andeq	r0, r0, pc, asr #8
     1bc:	01892d05 	orreq	r2, r9, r5, lsl #26
     1c0:	0c0d0000 	stceq	0, cr0, [sp], {-0}
     1c4:	05000003 	streq	r0, [r0, #-3]
     1c8:	0001892e 	andeq	r8, r1, lr, lsr #18
     1cc:	029c0d00 	addseq	r0, ip, #0, 26
     1d0:	2f050000 	svccs	0x00050000
     1d4:	00000189 	andeq	r0, r0, r9, lsl #3
     1d8:	0006060d 	andeq	r0, r6, sp, lsl #12
     1dc:	89300500 	ldmdbhi	r0!, {r8, sl}
     1e0:	0d000001 	stceq	0, cr0, [r0, #-4]
     1e4:	000005f6 	strdeq	r0, [r0], -r6
     1e8:	01893105 	orreq	r3, r9, r5, lsl #2
     1ec:	5b0b0000 	blpl	2c01f4 <startup-0x1fd3fe0c>
     1f0:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
     1f4:	0f000001 	svceq	0x00000001
     1f8:	0000019a 	muleq	r0, sl, r1
     1fc:	6d100077 	ldcvs	0, cr0, [r0, #-476]	; 0xfffffe24
     200:	06000002 	streq	r0, [r0], -r2
     204:	0001ee03 	andeq	lr, r1, r3, lsl #28
     208:	00030500 	andeq	r0, r3, r0, lsl #10
     20c:	1120005a 	qsubne	r0, sl, r0
     210:	00000466 	andeq	r0, r0, r6, ror #8
     214:	01ee0307 	mvneq	r0, r7, lsl #6
     218:	03050000 	movweq	r0, #20480	; 0x5000
     21c:	20005a78 	andcs	r5, r0, r8, ror sl
     220:	00053711 	andeq	r3, r5, r1, lsl r7
     224:	ee030800 	cdp	8, 0, cr0, cr3, cr0, {0}
     228:	05000001 	streq	r0, [r0, #-1]
     22c:	005af003 	subseq	pc, sl, r3
     230:	005b0b20 	subseq	r0, fp, r0, lsr #22
     234:	02420000 	subeq	r0, r2, #0
     238:	9a0e0000 	bls	380240 <startup-0x1fc7fdc0>
     23c:	17000001 	strne	r0, [r0, -r1]
     240:	46110001 	ldrmi	r0, [r1], -r1
     244:	09000001 	stmdbeq	r0, {r0}
     248:	00023103 	andeq	r3, r2, r3, lsl #2
     24c:	68030500 	stmdavs	r3, {r8, sl}
     250:	1120005b 	qsubne	r0, fp, r0
     254:	000003c2 	andeq	r0, r0, r2, asr #7
     258:	0231030a 	eorseq	r0, r1, #671088640	; 0x28000000
     25c:	03050000 	movweq	r0, #20480	; 0x5000
     260:	20005c80 	andcs	r5, r0, r0, lsl #25
     264:	00035f11 	andeq	r5, r3, r1, lsl pc
     268:	31030b00 	tstcc	r3, r0, lsl #22
     26c:	05000002 	streq	r0, [r0, #-2]
     270:	005d9803 	subseq	r9, sp, r3, lsl #16
     274:	005b0b20 	subseq	r0, fp, r0, lsr #22
     278:	02860000 	addeq	r0, r6, #0
     27c:	9a0e0000 	bls	380284 <startup-0x1fc7fd7c>
     280:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     284:	79110003 	ldmdbvc	r1, {r0, r1}
     288:	0c000004 	stceq	0, cr0, [r0], {4}
     28c:	00027503 	andeq	r7, r2, r3, lsl #10
     290:	b0030500 	andlt	r0, r3, r0, lsl #10
     294:	1120005e 	qsubne	r0, lr, r0
     298:	00000027 	andeq	r0, r0, r7, lsr #32
     29c:	0275030d 	rsbseq	r0, r5, #872415232	; 0x34000000
     2a0:	03050000 	movweq	r0, #20480	; 0x5000
     2a4:	200062b0 			; <UNDEFINED> instruction: 0x200062b0
     2a8:	00000011 	andeq	r0, r0, r1, lsl r0
     2ac:	75030e00 	strvc	r0, [r3, #-3584]	; 0xfffff200
     2b0:	05000002 	streq	r0, [r0, #-2]
     2b4:	0066b003 	rsbeq	fp, r6, r3
     2b8:	005b0b20 	subseq	r0, fp, r0, lsr #22
     2bc:	02c90000 	sbceq	r0, r9, #0
     2c0:	9a0f0000 	bls	3c02c8 <startup-0x1fc3fd38>
     2c4:	d1000001 	tstle	r0, r1
     2c8:	01981100 	orrseq	r1, r8, r0, lsl #2
     2cc:	030f0000 	movweq	r0, #61440	; 0xf000
     2d0:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
     2d4:	6ab00305 	bvs	fec00ef0 <firstTime.4040+0xdebf7b48>
     2d8:	a5112000 	ldrge	r2, [r1, #-0]
     2dc:	10000003 	andne	r0, r0, r3
     2e0:	0002b903 	andeq	fp, r2, r3, lsl #18
     2e4:	84030500 	strhi	r0, [r3], #-1280	; 0xfffffb00
     2e8:	1120006b 			; <UNDEFINED> instruction: 0x1120006b
     2ec:	000001fa 	strdeq	r0, [r0], -sl
     2f0:	02b90311 	adcseq	r0, r9, #1140850688	; 0x44000000
     2f4:	03050000 	movweq	r0, #20480	; 0x5000
     2f8:	20006c58 	andcs	r6, r0, r8, asr ip
     2fc:	0005e407 	andeq	lr, r5, r7, lsl #8
     300:	04121400 	ldreq	r1, [r2], #-1024	; 0xfffffc00
     304:	00000345 	andeq	r0, r0, r5, asr #6
     308:	00156103 	andseq	r6, r5, r3, lsl #2
     30c:	45051200 	strmi	r1, [r5, #-512]	; 0xfffffe00
     310:	00000003 	andeq	r0, r0, r3
     314:	00026003 	andeq	r6, r2, r3
     318:	45061200 	strmi	r1, [r6, #-512]	; 0xfffffe00
     31c:	04000003 	streq	r0, [r0], #-3
     320:	00038903 	andeq	r8, r3, r3, lsl #18
     324:	2e081200 	cdpcs	2, 0, cr1, cr8, cr0, {0}
     328:	08000001 	stmdaeq	r0, {r0}
     32c:	00037903 	andeq	r7, r3, r3, lsl #18
     330:	2e091200 	cdpcs	2, 0, cr1, cr9, cr0, {0}
     334:	0c000001 	stceq	0, cr0, [r0], {1}
     338:	00026503 	andeq	r6, r2, r3, lsl #10
     33c:	680c1200 	stmdavs	ip, {r9, ip}
     340:	10000003 	andne	r0, r0, r3
     344:	4b040500 	blmi	10174c <startup-0x1fefe8b4>
     348:	04000003 	streq	r0, [r0], #-3
     34c:	044a0801 	strbeq	r0, [sl], #-2049	; 0xfffff7ff
     350:	62090000 	andvs	r0, r9, #0
     354:	0a000003 	beq	368 <startup-0x1ffffc98>
     358:	00000362 	andeq	r0, r0, r2, ror #6
     35c:	00012e0a 	andeq	r2, r1, sl, lsl #28
     360:	04050000 	streq	r0, [r5], #-0
     364:	000002fc 	strdeq	r0, [r0], -ip
     368:	03520405 	cmpeq	r2, #83886080	; 0x5000000
     36c:	e5060000 	str	r0, [r6, #-0]
     370:	12000005 	andne	r0, r0, #5
     374:	0002fc0d 	andeq	pc, r2, sp, lsl #24
     378:	05241100 	streq	r1, [r4, #-256]!	; 0xffffff00
     37c:	03130000 	tsteq	r3, #0
     380:	00000275 	andeq	r0, r0, r5, ror r2
     384:	6d2c0305 	stcvs	3, cr0, [ip, #-20]!	; 0xffffffec
     388:	02042000 	andeq	r2, r4, #0
     38c:	00032407 	andeq	r2, r3, r7, lsl #8
     390:	05611000 	strbeq	r1, [r1, #-0]!
     394:	26010000 	strcs	r0, [r1], -r0
     398:	0000012e 	andeq	r0, r0, lr, lsr #2
     39c:	36640305 	strbtcc	r0, [r4], -r5, lsl #6
     3a0:	19102000 	ldmdbne	r0, {sp}
     3a4:	01000001 	tsteq	r0, r1
     3a8:	00009e3e 	andeq	r9, r0, lr, lsr lr
     3ac:	ac030500 	cfstr32ge	mvfx0, [r3], {-0}
     3b0:	10200035 	eorne	r0, r0, r5, lsr r0
     3b4:	0000018b 	andeq	r0, r0, fp, lsl #3
     3b8:	009e3f01 	addseq	r3, lr, r1, lsl #30
     3bc:	03050000 	movweq	r0, #20480	; 0x5000
     3c0:	20003658 	andcs	r3, r0, r8, asr r6
     3c4:	0004db10 	andeq	sp, r4, r0, lsl fp
     3c8:	9e400100 	dvflss	f0, f0, f0
     3cc:	05000000 	streq	r0, [r0, #-0]
     3d0:	00366c03 	eorseq	r6, r6, r3, lsl #24
     3d4:	67621220 	strbvs	r1, [r2, -r0, lsr #4]!
     3d8:	9e410100 	dvflss	f0, f1, f0
     3dc:	05000000 	streq	r0, [r0, #-0]
     3e0:	0035f403 	eorseq	pc, r5, r3, lsl #8
     3e4:	06351020 	ldrteq	r1, [r5], -r0, lsr #32
     3e8:	44010000 	strmi	r0, [r1], #-0
     3ec:	0000009e 	muleq	r0, lr, r0
     3f0:	35d40305 	ldrbcc	r0, [r4, #773]	; 0x305
     3f4:	d0102000 	andsle	r2, r0, r0
     3f8:	01000004 	tsteq	r0, r4
     3fc:	00009e45 	andeq	r9, r0, r5, asr #28
     400:	60030500 	andvs	r0, r3, r0, lsl #10
     404:	10200036 	eorne	r0, r0, r6, lsr r0
     408:	0000005b 	andeq	r0, r0, fp, asr r0
     40c:	009e4601 	addseq	r4, lr, r1, lsl #12
     410:	03050000 	movweq	r0, #20480	; 0x5000
     414:	20003610 	andcs	r3, r0, r0, lsl r6
     418:	00035410 	andeq	r5, r3, r0, lsl r4
     41c:	9e470100 	dvflss	f0, f7, f0
     420:	05000000 	streq	r0, [r0, #-0]
     424:	00367c03 	eorseq	r7, r6, r3, lsl #24
     428:	04e71020 	strbteq	r1, [r7], #32
     42c:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
     430:	0000009e 	muleq	r0, lr, r0
     434:	36480305 	strbcc	r0, [r8], -r5, lsl #6
     438:	fe102000 	cdp2	0, 1, cr2, cr0, cr0, {0}
     43c:	01000003 	tsteq	r0, r3
     440:	00009e49 	andeq	r9, r0, r9, asr #28
     444:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
     448:	10200036 	eorne	r0, r0, r6, lsr r0
     44c:	0000057f 	andeq	r0, r0, pc, ror r5
     450:	009e4a01 	addseq	r4, lr, r1, lsl #20
     454:	03050000 	movweq	r0, #20480	; 0x5000
     458:	20003668 	andcs	r3, r0, r8, ror #12
     45c:	0001bf10 	andeq	fp, r1, r0, lsl pc
     460:	9e4b0100 	dvflse	f0, f3, f0
     464:	05000000 	streq	r0, [r0, #-0]
     468:	00362c03 	eorseq	r2, r6, r3, lsl #24
     46c:	066b1020 	strbteq	r1, [fp], -r0, lsr #32
     470:	4c010000 	stcmi	0, cr0, [r1], {-0}
     474:	0000009e 	muleq	r0, lr, r0
     478:	35e40305 	strbcc	r0, [r4, #773]!	; 0x305
     47c:	48102000 	ldmdami	r0, {sp}
     480:	01000003 	tsteq	r0, r3
     484:	0000624e 	andeq	r6, r0, lr, asr #4
     488:	d8030500 	stmdale	r3, {r8, sl}
     48c:	10200035 	eorne	r0, r0, r5, lsr r0
     490:	0000020b 	andeq	r0, r0, fp, lsl #4
     494:	00624f01 	rsbeq	r4, r2, r1, lsl #30
     498:	03050000 	movweq	r0, #20480	; 0x5000
     49c:	20003630 	andcs	r3, r0, r0, lsr r6
     4a0:	0001a910 	andeq	sl, r1, r0, lsl r9
     4a4:	62500100 	subsvs	r0, r0, #0, 2
     4a8:	05000000 	streq	r0, [r0, #-0]
     4ac:	0035f803 	eorseq	pc, r5, r3, lsl #16
     4b0:	01ed1020 	mvneq	r1, r0, lsr #32
     4b4:	52010000 	andpl	r0, r1, #0
     4b8:	00000062 	andeq	r0, r0, r2, rrx
     4bc:	36700305 	ldrbtcc	r0, [r0], -r5, lsl #6
     4c0:	71102000 	tstvc	r0, r0
     4c4:	01000000 	mrseq	r0, (UNDEF: 0)
     4c8:	00006254 	andeq	r6, r0, r4, asr r2
     4cc:	b0030500 	andlt	r0, r3, r0, lsl #10
     4d0:	10200035 	eorne	r0, r0, r5, lsr r0
     4d4:	00000423 	andeq	r0, r0, r3, lsr #8
     4d8:	00625501 	rsbeq	r5, r2, r1, lsl #10
     4dc:	03050000 	movweq	r0, #20480	; 0x5000
     4e0:	2000364c 	andcs	r3, r0, ip, asr #12
     4e4:	0002ef10 	andeq	lr, r2, r0, lsl pc
     4e8:	62560100 	subsvs	r0, r6, #0, 2
     4ec:	05000000 	streq	r0, [r0, #-0]
     4f0:	00362003 	eorseq	r2, r6, r3
     4f4:	04321020 	ldrteq	r1, [r2], #-32	; 0xffffffe0
     4f8:	57010000 	strpl	r0, [r1, -r0]
     4fc:	00000062 	andeq	r0, r0, r2, rrx
     500:	35e80305 	strbcc	r0, [r8, #773]!	; 0x305
     504:	d6102000 	ldrle	r2, [r0], -r0
     508:	01000005 	tsteq	r0, r5
     50c:	00006258 	andeq	r6, r0, r8, asr r2
     510:	c8030500 	stmdagt	r3, {r8, sl}
     514:	10200035 	eorne	r0, r0, r5, lsr r0
     518:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     51c:	00625901 	rsbeq	r5, r2, r1, lsl #18
     520:	03050000 	movweq	r0, #20480	; 0x5000
     524:	20003604 	andcs	r3, r0, r4, lsl #12
     528:	00051510 	andeq	r1, r5, r0, lsl r5
     52c:	625a0100 	subsvs	r0, sl, #0, 2
     530:	05000000 	streq	r0, [r0, #-0]
     534:	00363c03 	eorseq	r3, r6, r3, lsl #24
     538:	04091020 	streq	r1, [r9], #-32	; 0xffffffe0
     53c:	5b010000 	blpl	40544 <startup-0x1ffbfabc>
     540:	00000062 	andeq	r0, r0, r2, rrx
     544:	35bc0305 	ldrcc	r0, [ip, #773]!	; 0x305
     548:	15102000 	ldrne	r2, [r0, #-0]
     54c:	01000006 	tsteq	r0, r6
     550:	0000625c 	andeq	r6, r0, ip, asr r2
     554:	14030500 	strne	r0, [r3], #-1280	; 0xfffffb00
     558:	10200036 	eorne	r0, r0, r6, lsr r0
     55c:	00000389 	andeq	r0, r0, r9, lsl #7
     560:	012e9201 			; <UNDEFINED> instruction: 0x012e9201
     564:	03050000 	movweq	r0, #20480	; 0x5000
     568:	20003584 	andcs	r3, r0, r4, lsl #11
     56c:	0004f110 	andeq	pc, r4, r0, lsl r1	; <UNPREDICTABLE>
     570:	2e930100 	fmlcss	f0, f3, f0
     574:	05000001 	streq	r0, [r0, #-1]
     578:	00712c03 	rsbseq	r2, r1, r3, lsl #24
     57c:	06661320 	strbteq	r1, [r6], -r0, lsr #6
     580:	94010000 	strls	r0, [r1], #-0
     584:	200001fc 	strdcs	r0, [r0], -ip
     588:	00000e10 	andeq	r0, r0, r0, lsl lr
     58c:	085b9c01 	ldmdaeq	fp, {r0, sl, fp, ip, pc}^
     590:	91110000 	tstls	r1, r0
     594:	01000003 	tsteq	r0, r3
     598:	00014c9a 	muleq	r1, sl, ip
     59c:	bc910300 	ldclt	3, cr0, [r1], {0}
     5a0:	058a117f 	streq	r1, [sl, #383]	; 0x17f
     5a4:	9b010000 	blls	405ac <startup-0x1ffbfa54>
     5a8:	000000a4 	andeq	r0, r0, r4, lsr #1
     5ac:	7fb09103 	svcvc	0x00b09103
     5b0:	00067611 	andeq	r7, r6, r1, lsl r6
     5b4:	5b9c0100 	blpl	fe7009bc <firstTime.4040+0xde6f7614>
     5b8:	03000008 	movweq	r0, #8
     5bc:	117fa491 			; <UNDEFINED> instruction: 0x117fa491
     5c0:	0000048b 	andeq	r0, r0, fp, lsl #9
     5c4:	014ca401 	cmpeq	ip, r1, lsl #8
     5c8:	91030000 	mrsls	r0, (UNDEF: 3)
     5cc:	72117f80 	andsvc	r7, r1, #128, 30	; 0x200
     5d0:	01000001 	tsteq	r0, r1
     5d4:	0000a4a5 	andeq	sl, r0, r5, lsr #9
     5d8:	f4910300 			; <UNDEFINED> instruction: 0xf4910300
     5dc:	0555117e 	ldrbeq	r1, [r5, #-382]	; 0xfffffe82
     5e0:	a6010000 	strge	r0, [r1], -r0
     5e4:	0000085b 	andeq	r0, r0, fp, asr r8
     5e8:	7ee89103 	urdvce	f1, f3
     5ec:	00029311 	andeq	r9, r2, r1, lsl r3
     5f0:	4cad0100 	stfmis	f0, [sp]
     5f4:	03000001 	movweq	r0, #1
     5f8:	117ec491 			; <UNDEFINED> instruction: 0x117ec491
     5fc:	000003d3 	ldrdeq	r0, [r0], -r3
     600:	00a4ae01 	adceq	sl, r4, r1, lsl #28
     604:	91030000 	mrsls	r0, (UNDEF: 3)
     608:	ca117eb8 	bgt	4600f0 <startup-0x1fb9ff10>
     60c:	01000005 	tsteq	r0, r5
     610:	00085baf 	andeq	r5, r8, pc, lsr #23
     614:	ac910300 	ldcge	3, cr0, [r1], {0}
     618:	012d117e 			; <UNDEFINED> instruction: 0x012d117e
     61c:	b6010000 	strlt	r0, [r1], -r0
     620:	0000014c 	andeq	r0, r0, ip, asr #2
     624:	7e889103 	sinvce	f1, f3
     628:	00054911 	andeq	r4, r5, r1, lsl r9
     62c:	a4b70100 	ldrtge	r0, [r7], #256	; 0x100
     630:	03000000 	movweq	r0, #0
     634:	117dfc91 			; <UNDEFINED> instruction: 0x117dfc91
     638:	00000165 	andeq	r0, r0, r5, ror #2
     63c:	085bb801 	ldmdaeq	fp, {r0, fp, ip, sp, pc}^
     640:	91030000 	mrsls	r0, (UNDEF: 3)
     644:	5d117df0 	ldcpl	13, cr7, [r1, #-960]	; 0xfffffc40
     648:	01000001 	tsteq	r0, r1
     64c:	00014cbf 			; <UNDEFINED> instruction: 0x00014cbf
     650:	cc910300 	ldcgt	3, cr0, [r1], {0}
     654:	1730117d 			; <UNDEFINED> instruction: 0x1730117d
     658:	c4010000 	strgt	r0, [r1], #-0
     65c:	0000014c 	andeq	r0, r0, ip, asr #2
     660:	7da89103 	stfvcd	f1, [r8, #12]!
     664:	000c6011 	andeq	r6, ip, r1, lsl r0
     668:	4cc90100 	stfmie	f0, [r9], {0}
     66c:	03000001 	movweq	r0, #1
     670:	147d8491 	ldrbtne	r8, [sp], #-1169	; 0xfffffb6f
     674:	00504944 	subseq	r4, r0, r4, asr #18
     678:	014ccf01 	cmpeq	ip, r1, lsl #30
     67c:	91030000 	mrsls	r0, (UNDEF: 3)
     680:	38117ce0 	ldmdacc	r1, {r5, r6, r7, sl, fp, ip, sp, lr}
     684:	01000000 	mrseq	r0, (UNDEF: 0)
     688:	00014cd3 	ldrdeq	r4, [r1], -r3
     68c:	bc910300 	ldclt	3, cr0, [r1], {0}
     690:	056d117c 	strbeq	r1, [sp, #-380]!	; 0xfffffe84
     694:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
     698:	0000014c 	andeq	r0, r0, ip, asr #2
     69c:	7c989103 	ldfvcd	f1, [r8], {3}
     6a0:	00057311 	andeq	r7, r5, r1, lsl r3
     6a4:	4cdb0100 	ldfmie	f0, [fp], {0}
     6a8:	03000001 	movweq	r0, #1
     6ac:	117bf491 			; <UNDEFINED> instruction: 0x117bf491
     6b0:	00000579 	andeq	r0, r0, r9, ror r5
     6b4:	014cdd01 	cmpeq	ip, r1, lsl #26
     6b8:	91030000 	mrsls	r0, (UNDEF: 3)
     6bc:	db117bd0 	blle	45f604 <startup-0x1fba09fc>
     6c0:	01000001 	tsteq	r0, r1
     6c4:	00014cdf 	ldrdeq	r4, [r1], -pc	; <UNPREDICTABLE>
     6c8:	ac910300 	ldcge	3, cr0, [r1], {0}
     6cc:	0157117b 	cmpeq	r7, fp, ror r1
     6d0:	e1010000 	mrs	r0, (UNDEF: 1)
     6d4:	0000014c 	andeq	r0, r0, ip, asr #2
     6d8:	7b889103 	blvc	fe224aec <firstTime.4040+0xde21b744>
     6dc:	00003f11 	andeq	r3, r0, r1, lsl pc
     6e0:	6efc0100 	cdpvs	1, 15, cr0, cr12, cr0, {0}
     6e4:	03000003 	movweq	r0, #3
     6e8:	117af491 			; <UNDEFINED> instruction: 0x117af491
     6ec:	00000185 	andeq	r0, r0, r5, lsl #3
     6f0:	036efd01 	msreq	SPSR_fsx, #1, 26	; 0x40
     6f4:	91030000 	mrsls	r0, (UNDEF: 3)
     6f8:	b9117ae0 	ldmdblt	r1, {r5, r6, r7, r9, fp, ip, sp, lr}
     6fc:	01000001 	tsteq	r0, r1
     700:	00036efe 	strdeq	r6, [r3], -lr
     704:	cc910300 	ldcgt	3, cr0, [r1], {0}
     708:	01cf117a 	biceq	r1, pc, sl, ror r1	; <UNPREDICTABLE>
     70c:	ff010000 			; <UNDEFINED> instruction: 0xff010000
     710:	0000036e 	andeq	r0, r0, lr, ror #6
     714:	7ab89103 	bvc	fee24b28 <firstTime.4040+0xdee1b780>
     718:	0001c915 	andeq	ip, r1, r5, lsl r9
     71c:	01000100 	mrseq	r0, (UNDEF: 16)
     720:	0000036e 	andeq	r0, r0, lr, ror #6
     724:	7aa49103 	bvc	fe924b38 <firstTime.4040+0xde91b790>
     728:	0001d515 	andeq	sp, r1, r5, lsl r5
     72c:	01010100 	mrseq	r0, (UNDEF: 17)
     730:	0000036e 	andeq	r0, r0, lr, ror #6
     734:	7a909103 	bvc	fe424b48 <firstTime.4040+0xde41b7a0>
     738:	00023415 	andeq	r3, r2, r5, lsl r4
     73c:	01020100 	mrseq	r0, (UNDEF: 18)
     740:	0000036e 	andeq	r0, r0, lr, ror #6
     744:	79fc9103 	ldmibvc	ip!, {r0, r1, r8, ip, pc}^
     748:	00021c15 	andeq	r1, r2, r5, lsl ip
     74c:	01030100 	mrseq	r0, (UNDEF: 19)
     750:	0000036e 	andeq	r0, r0, lr, ror #6
     754:	79e89103 	stmibvc	r8!, {r0, r1, r8, ip, pc}^
     758:	0001f415 	andeq	pc, r1, r5, lsl r4	; <UNPREDICTABLE>
     75c:	01040100 	mrseq	r0, (UNDEF: 20)
     760:	0000036e 	andeq	r0, r0, lr, ror #6
     764:	79d49103 	ldmibvc	r4, {r0, r1, r8, ip, pc}^
     768:	00023a15 	andeq	r3, r2, r5, lsl sl
     76c:	01050100 	mrseq	r0, (UNDEF: 21)
     770:	0000036e 	andeq	r0, r0, lr, ror #6
     774:	79c09103 	stmibvc	r0, {r0, r1, r8, ip, pc}^
     778:	00065115 	andeq	r5, r6, r5, lsl r1
     77c:	01060100 	mrseq	r0, (UNDEF: 22)
     780:	0000036e 	andeq	r0, r0, lr, ror #6
     784:	79ac9103 	stmibvc	ip!, {r0, r1, r8, ip, pc}
     788:	00065815 	andeq	r5, r6, r5, lsl r8
     78c:	01070100 	mrseq	r0, (UNDEF: 23)
     790:	0000036e 	andeq	r0, r0, lr, ror #6
     794:	79989103 	ldmibvc	r8, {r0, r1, r8, ip, pc}
     798:	0005ad15 	andeq	sl, r5, r5, lsl sp
     79c:	01080100 	mrseq	r0, (UNDEF: 24)
     7a0:	0000036e 	andeq	r0, r0, lr, ror #6
     7a4:	79849103 	stmibvc	r4, {r0, r1, r8, ip, pc}
     7a8:	00012115 	andeq	r2, r1, r5, lsl r1
     7ac:	011b0100 	tsteq	fp, r0, lsl #2
     7b0:	0000012e 	andeq	r0, r0, lr, lsr #2
     7b4:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
     7b8:	000001e1 	andeq	r0, r0, r1, ror #3
     7bc:	2e011c01 	cdpcs	12, 0, cr1, cr1, cr1, {0}
     7c0:	02000001 	andeq	r0, r0, #1
     7c4:	48156891 	ldmdami	r5, {r0, r4, r7, fp, sp, lr}
     7c8:	01000000 	mrseq	r0, (UNDEF: 0)
     7cc:	012e011d 			; <UNDEFINED> instruction: 0x012e011d
     7d0:	91020000 	mrsls	r0, (UNDEF: 2)
     7d4:	06411564 	strbeq	r1, [r1], -r4, ror #10
     7d8:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
     7dc:	00012e01 	andeq	r2, r1, r1, lsl #28
     7e0:	60910200 	addsvs	r0, r1, r0, lsl #4
     7e4:	00075e16 	andeq	r5, r7, r6, lsl lr
     7e8:	00088a20 	andeq	r8, r8, r0, lsr #20
     7ec:	02891500 	addeq	r1, r9, #0, 10
     7f0:	45010000 	strmi	r0, [r1, #-0]
     7f4:	00012e01 	andeq	r2, r1, r1, lsl #28
     7f8:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
     7fc:	15200071 	strne	r0, [r0, #-113]!	; 0xffffff8f
     800:	000003e5 	andeq	r0, r0, r5, ror #7
     804:	2e014601 	cfmadd32cs	mvax0, mvfx4, mvfx1, mvfx1
     808:	05000001 	streq	r0, [r0, #-1]
     80c:	00713803 	rsbseq	r3, r1, r3, lsl #16
     810:	03371520 	teqeq	r7, #32, 10	; 0x8000000
     814:	47010000 	strmi	r0, [r1, -r0]
     818:	00012e01 	andeq	r2, r1, r1, lsl #28
     81c:	30030500 	andcc	r0, r3, r0, lsl #10
     820:	15200071 	strne	r0, [r0, #-113]!	; 0xffffff8f
     824:	0000059c 	muleq	r0, ip, r5
     828:	2e019101 	mvfcss	f1, f1
     82c:	05000001 	streq	r0, [r0, #-1]
     830:	00713c03 	rsbseq	r3, r1, r3, lsl #24
     834:	05001520 	streq	r1, [r0, #-1312]	; 0xfffffae0
     838:	ad010000 	stcge	0, cr0, [r1, #-0]
     83c:	00012e01 	andeq	r2, r1, r1, lsl #28
     840:	88030500 	stmdahi	r3, {r8, sl}
     844:	15200035 	strne	r0, [r0, #-53]!	; 0xffffffcb
     848:	0000149e 	muleq	r0, lr, r4
     84c:	2e01c301 	cdpcs	3, 0, cr12, cr1, cr1, {0}
     850:	05000001 	streq	r0, [r0, #-1]
     854:	00358c03 	eorseq	r8, r5, r3, lsl #24
     858:	0b000020 	bleq	8e0 <startup-0x1ffff720>
     85c:	000000a4 	andeq	r0, r0, r4, lsr #1
     860:	0000086b 	andeq	r0, r0, fp, ror #16
     864:	00019a0f 	andeq	r9, r1, pc, lsl #20
     868:	13000000 	movwne	r0, #0
     86c:	00000417 	andeq	r0, r0, r7, lsl r4
     870:	00345e01 	eorseq	r5, r4, r1, lsl #28
     874:	01c82000 	biceq	r2, r8, r0
     878:	9c010000 	stcls	0, cr0, [r1], {-0}
     87c:	0000090d 	andeq	r0, r0, sp, lsl #18
     880:	00013711 	andeq	r3, r1, r1, lsl r7
     884:	9e5f0100 	rdflse	f0, f7, f0
     888:	02000000 	andeq	r0, r0, #0
     88c:	40117491 	mulsmi	r1, r1, r4
     890:	01000002 	tsteq	r0, r2
     894:	00009e63 	andeq	r9, r0, r3, ror #28
     898:	70910200 	addsvc	r0, r1, r0, lsl #4
     89c:	00025011 	andeq	r5, r2, r1, lsl r0
     8a0:	9e670100 	powlss	f0, f7, f0
     8a4:	02000000 	andeq	r0, r0, #0
     8a8:	b9116c91 	ldmdblt	r1, {r0, r4, r7, sl, fp, sp, lr}
     8ac:	01000002 	tsteq	r0, r2
     8b0:	00009e6b 	andeq	r9, r0, fp, ror #28
     8b4:	68910200 	ldmvs	r1, {r9}
     8b8:	0002c211 	andeq	ip, r2, r1, lsl r2
     8bc:	9e6f0100 	powlse	f0, f7, f0
     8c0:	02000000 	andeq	r0, r0, #0
     8c4:	cb116491 	blgt	459b10 <startup-0x1fba64f0>
     8c8:	01000002 	tsteq	r0, r2
     8cc:	00009e73 	andeq	r9, r0, r3, ror lr
     8d0:	60910200 	addsvs	r0, r1, r0, lsl #4
     8d4:	0002d411 	andeq	sp, r2, r1, lsl r4
     8d8:	9e770100 	rpwlss	f0, f7, f0
     8dc:	02000000 	andeq	r0, r0, #0
     8e0:	dd115c91 	ldcle	12, cr5, [r1, #-580]	; 0xfffffdbc
     8e4:	01000002 	tsteq	r0, r2
     8e8:	00009e7b 	andeq	r9, r0, fp, ror lr
     8ec:	58910200 	ldmpl	r1, {r9}
     8f0:	0002e611 	andeq	lr, r2, r1, lsl r6
     8f4:	9e7e0100 	rpwlse	f0, f6, f0
     8f8:	02000000 	andeq	r0, r0, #0
     8fc:	67115491 			; <UNDEFINED> instruction: 0x67115491
     900:	01000000 	mrseq	r0, (UNDEF: 0)
     904:	00009e81 	andeq	r9, r0, r1, lsl #29
     908:	50910200 	addspl	r0, r1, r0, lsl #4
     90c:	02801700 	addeq	r1, r0, #0, 14
     910:	2a010000 	bcs	40918 <startup-0x1ffbf6e8>
     914:	20000010 	andcs	r0, r0, r0, lsl r0
     918:	00000024 	andeq	r0, r0, r4, lsr #32
     91c:	7d189c01 	ldcvc	12, cr9, [r8, #-4]
     920:	01000001 	tsteq	r0, r1
     924:	00000034 	andeq	r0, r0, r4, lsr r0
     928:	00000c20 	andeq	r0, r0, r0, lsr #24
     92c:	009c0100 	addseq	r0, ip, r0, lsl #2
     930:	000001e0 	andeq	r0, r0, r0, ror #3
     934:	014c0004 	cmpeq	ip, r4
     938:	01040000 	mrseq	r0, (UNDEF: 4)
     93c:	00000081 	andeq	r0, r0, r1, lsl #1
     940:	0006950c 	andeq	r9, r6, ip, lsl #10
     944:	00100c00 	andseq	r0, r0, r0, lsl #24
     948:	00005620 	andeq	r5, r0, r0, lsr #12
     94c:	0002ea00 	andeq	lr, r2, r0, lsl #20
     950:	020c0200 	andeq	r0, ip, #0, 4
     954:	00004e05 	andeq	r4, r0, r5, lsl #28
     958:	03060300 	movweq	r0, #25344	; 0x6300
     95c:	07020000 	streq	r0, [r2, -r0]
     960:	0000004e 	andeq	r0, r0, lr, asr #32
     964:	065f0300 	ldrbeq	r0, [pc], -r0, lsl #6
     968:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     96c:	0000004e 	andeq	r0, r0, lr, asr #32
     970:	119c0304 	orrsne	r0, ip, r4, lsl #6
     974:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     978:	00000055 	andeq	r0, r0, r5, asr r0
     97c:	04040008 	streq	r0, [r4], #-8
     980:	00032a07 	andeq	r2, r3, r7, lsl #20
     984:	5b040500 	blpl	101d8c <startup-0x1fefe274>
     988:	04000000 	streq	r0, [r0], #-0
     98c:	04410801 	strbeq	r0, [r1], #-2049	; 0xfffff7ff
     990:	ee060000 	cdp	0, 0, cr0, cr6, cr0, {0}
     994:	02000012 	andeq	r0, r0, #18
     998:	0000210a 	andeq	r2, r0, sl, lsl #2
     99c:	00160700 	andseq	r0, r6, r0, lsl #14
     9a0:	030c0000 	movweq	r0, #49152	; 0xc000
     9a4:	00009e06 	andeq	r9, r0, r6, lsl #28
     9a8:	052c0300 	streq	r0, [ip, #-768]!	; 0xfffffd00
     9ac:	07030000 	streq	r0, [r3, -r0]
     9b0:	0000009e 	muleq	r0, lr, r0
     9b4:	001d0300 	andseq	r0, sp, r0, lsl #6
     9b8:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     9bc:	0000009e 	muleq	r0, lr, r0
     9c0:	00120304 	andseq	r0, r2, r4, lsl #6
     9c4:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
     9c8:	0000009e 	muleq	r0, lr, r0
     9cc:	04050008 	streq	r0, [r5], #-8
     9d0:	00000062 	andeq	r0, r0, r2, rrx
     9d4:	000fd706 	andeq	sp, pc, r6, lsl #14
     9d8:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
     9dc:	07000000 	streq	r0, [r0, -r0]
     9e0:	00000624 	andeq	r0, r0, r4, lsr #12
     9e4:	28060424 	stmdacs	r6, {r2, r5, sl}
     9e8:	03000001 	movweq	r0, #1
     9ec:	000003de 	ldrdeq	r0, [r0], -lr
     9f0:	01280704 			; <UNDEFINED> instruction: 0x01280704
     9f4:	03000000 	movweq	r0, #0
     9f8:	00000630 	andeq	r0, r0, r0, lsr r6
     9fc:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
     a00:	03040000 	movweq	r0, #16384	; 0x4000
     a04:	00000597 	muleq	r0, r7, r5
     a08:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
     a0c:	03080000 	movweq	r0, #32768	; 0x8000
     a10:	000005c3 	andeq	r0, r0, r3, asr #11
     a14:	01460c04 	cmpeq	r6, r4, lsl #24
     a18:	030c0000 	movweq	r0, #49152	; 0xc000
     a1c:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     a20:	01460d04 	cmpeq	r6, r4, lsl #26
     a24:	03100000 	tsteq	r0, #0
     a28:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     a2c:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
     a30:	03140000 	tsteq	r4, #0
     a34:	00000052 	andeq	r0, r0, r2, asr r0
     a38:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
     a3c:	03180000 	tsteq	r8, #0
     a40:	0000036f 	andeq	r0, r0, pc, ror #6
     a44:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
     a48:	031c0000 	tsteq	ip, #0
     a4c:	0000037f 	andeq	r0, r0, pc, ror r3
     a50:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
     a54:	00200000 	eoreq	r0, r0, r0
     a58:	00a40405 	adceq	r0, r4, r5, lsl #8
     a5c:	04080000 	streq	r0, [r8], #-0
     a60:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     a64:	01400900 	cmpeq	r0, r0, lsl #18
     a68:	400a0000 	andmi	r0, sl, r0
     a6c:	00000001 	andeq	r0, r0, r1
     a70:	00af0405 	adceq	r0, pc, r5, lsl #8
     a74:	04050000 	streq	r0, [r5], #-0
     a78:	00000135 	andeq	r0, r0, r5, lsr r1
     a7c:	00062506 	andeq	r2, r6, r6, lsl #10
     a80:	af150400 	svcge	0x00150400
     a84:	0b000000 	bleq	a8c <startup-0x1ffff574>
     a88:	00000162 	andeq	r0, r0, r2, ror #2
     a8c:	00000162 	andeq	r0, r0, r2, ror #2
     a90:	0405000c 	streq	r0, [r5], #-12
     a94:	0000014c 	andeq	r0, r0, ip, asr #2
     a98:	0004c40d 	andeq	ip, r4, sp, lsl #8
     a9c:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
     aa0:	0d000001 	stceq	0, cr0, [r0, #-4]
     aa4:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
     aa8:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
     aac:	04040000 	streq	r0, [r4], #-0
     ab0:	00039c07 	andeq	r9, r3, r7, lsl #24
     ab4:	01680e00 	cmneq	r8, r0, lsl #28
     ab8:	03010000 	movweq	r0, #4096	; 0x1000
     abc:	36800305 	strcc	r0, [r0], r5, lsl #6
     ac0:	730e2000 	movwvc	r2, #57344	; 0xe000
     ac4:	01000001 	tsteq	r0, r1
     ac8:	90030504 	andls	r0, r3, r4, lsl #10
     acc:	0f200035 	svceq	0x00200035
     ad0:	00000684 	andeq	r0, r0, r4, lsl #13
     ad4:	101c0c01 	andsne	r0, ip, r1, lsl #24
     ad8:	00462000 	subeq	r2, r6, r0
     adc:	9c010000 	stcls	0, cr0, [r1], {-0}
     ae0:	000001c3 	andeq	r0, r0, r3, asr #3
     ae4:	0006c810 	andeq	ip, r6, r0, lsl r8
     ae8:	620c0100 	andvs	r0, ip, #0, 2
     aec:	02000001 	andeq	r0, r0, #1
     af0:	11007491 			; <UNDEFINED> instruction: 0x11007491
     af4:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     af8:	100c0701 	andne	r0, ip, r1, lsl #14
     afc:	00102000 	andseq	r2, r0, r0
     b00:	9c010000 	stcls	0, cr0, [r1], {-0}
     b04:	0006c810 	andeq	ip, r6, r0, lsl r8
     b08:	62070100 	andvs	r0, r7, #0, 2
     b0c:	02000001 	andeq	r0, r0, #1
     b10:	00007491 	muleq	r0, r1, r4
     b14:	0000052b 	andeq	r0, r0, fp, lsr #10
     b18:	02320004 	eorseq	r0, r2, #4
     b1c:	01040000 	mrseq	r0, (UNDEF: 4)
     b20:	00000081 	andeq	r0, r0, r1, lsl #1
     b24:	0009080c 	andeq	r0, r9, ip, lsl #16
     b28:	00106400 	andseq	r6, r0, r0, lsl #8
     b2c:	0002a820 	andeq	sl, r2, r0, lsr #16
     b30:	00037800 	andeq	r7, r3, r0, lsl #16
     b34:	020c0200 	andeq	r0, ip, #0, 4
     b38:	00004e05 	andeq	r4, r0, r5, lsl #28
     b3c:	03060300 	movweq	r0, #25344	; 0x6300
     b40:	07020000 	streq	r0, [r2, -r0]
     b44:	0000004e 	andeq	r0, r0, lr, asr #32
     b48:	065f0300 	ldrbeq	r0, [pc], -r0, lsl #6
     b4c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     b50:	0000004e 	andeq	r0, r0, lr, asr #32
     b54:	119c0304 	orrsne	r0, ip, r4, lsl #6
     b58:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     b5c:	00000055 	andeq	r0, r0, r5, asr r0
     b60:	04040008 	streq	r0, [r4], #-8
     b64:	00032a07 	andeq	r2, r3, r7, lsl #20
     b68:	5b040500 	blpl	101f70 <startup-0x1fefe090>
     b6c:	04000000 	streq	r0, [r0], #-0
     b70:	04410801 	strbeq	r0, [r1], #-2049	; 0xfffff7ff
     b74:	ee060000 	cdp	0, 0, cr0, cr6, cr0, {0}
     b78:	02000012 	andeq	r0, r0, #18
     b7c:	0000210a 	andeq	r2, r0, sl, lsl #2
     b80:	00160700 	andseq	r0, r6, r0, lsl #14
     b84:	030c0000 	movweq	r0, #49152	; 0xc000
     b88:	00009e06 	andeq	r9, r0, r6, lsl #28
     b8c:	052c0300 	streq	r0, [ip, #-768]!	; 0xfffffd00
     b90:	07030000 	streq	r0, [r3, -r0]
     b94:	0000009e 	muleq	r0, lr, r0
     b98:	001d0300 	andseq	r0, sp, r0, lsl #6
     b9c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     ba0:	0000009e 	muleq	r0, lr, r0
     ba4:	00120304 	andseq	r0, r2, r4, lsl #6
     ba8:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
     bac:	0000009e 	muleq	r0, lr, r0
     bb0:	04050008 	streq	r0, [r5], #-8
     bb4:	00000062 	andeq	r0, r0, r2, rrx
     bb8:	000fd706 	andeq	sp, pc, r6, lsl #14
     bbc:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
     bc0:	07000000 	streq	r0, [r0, -r0]
     bc4:	00000624 	andeq	r0, r0, r4, lsr #12
     bc8:	28060424 	stmdacs	r6, {r2, r5, sl}
     bcc:	03000001 	movweq	r0, #1
     bd0:	000003de 	ldrdeq	r0, [r0], -lr
     bd4:	01280704 			; <UNDEFINED> instruction: 0x01280704
     bd8:	03000000 	movweq	r0, #0
     bdc:	00000630 	andeq	r0, r0, r0, lsr r6
     be0:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
     be4:	03040000 	movweq	r0, #16384	; 0x4000
     be8:	00000597 	muleq	r0, r7, r5
     bec:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
     bf0:	03080000 	movweq	r0, #32768	; 0x8000
     bf4:	000005c3 	andeq	r0, r0, r3, asr #11
     bf8:	01460c04 	cmpeq	r6, r4, lsl #24
     bfc:	030c0000 	movweq	r0, #49152	; 0xc000
     c00:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     c04:	01460d04 	cmpeq	r6, r4, lsl #26
     c08:	03100000 	tsteq	r0, #0
     c0c:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     c10:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
     c14:	03140000 	tsteq	r4, #0
     c18:	00000052 	andeq	r0, r0, r2, asr r0
     c1c:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
     c20:	03180000 	tsteq	r8, #0
     c24:	0000036f 	andeq	r0, r0, pc, ror #6
     c28:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
     c2c:	031c0000 	tsteq	ip, #0
     c30:	0000037f 	andeq	r0, r0, pc, ror r3
     c34:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
     c38:	00200000 	eoreq	r0, r0, r0
     c3c:	00a40405 	adceq	r0, r4, r5, lsl #8
     c40:	04080000 	streq	r0, [r8], #-0
     c44:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     c48:	01400900 	cmpeq	r0, r0, lsl #18
     c4c:	400a0000 	andmi	r0, sl, r0
     c50:	00000001 	andeq	r0, r0, r1
     c54:	00af0405 	adceq	r0, pc, r5, lsl #8
     c58:	04050000 	streq	r0, [r5], #-0
     c5c:	00000135 	andeq	r0, r0, r5, lsr r1
     c60:	00062506 	andeq	r2, r6, r6, lsl #10
     c64:	af150400 	svcge	0x00150400
     c68:	0b000000 	bleq	c70 <startup-0x1ffff390>
     c6c:	00000162 	andeq	r0, r0, r2, ror #2
     c70:	00000162 	andeq	r0, r0, r2, ror #2
     c74:	0405000c 	streq	r0, [r5], #-12
     c78:	0000014c 	andeq	r0, r0, ip, asr #2
     c7c:	0004c40d 	andeq	ip, r4, sp, lsl #8
     c80:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
     c84:	0d000001 	stceq	0, cr0, [r0, #-4]
     c88:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
     c8c:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
     c90:	5b0b0000 	blpl	2c0c98 <startup-0x1fd3f368>
     c94:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
     c98:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     c9c:	0000018e 	andeq	r0, r0, lr, lsl #3
     ca0:	0404000b 	streq	r0, [r4], #-11
     ca4:	00039c07 	andeq	r9, r3, r7, lsl #24
     ca8:	08cd0f00 	stmiaeq	sp, {r8, r9, sl, fp}^
     cac:	03050000 	movweq	r0, #20480	; 0x5000
     cb0:	0000017e 	andeq	r0, r0, lr, ror r1
     cb4:	71400305 	cmpvc	r0, r5, lsl #6
     cb8:	c70f2000 	strgt	r2, [pc, -r0]
     cbc:	06000007 	streq	r0, [r0], -r7
     cc0:	00017e03 	andeq	r7, r1, r3, lsl #28
     cc4:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
     cc8:	0f200071 	svceq	0x00200071
     ccc:	000007e2 	andeq	r0, r0, r2, ror #15
     cd0:	017e0307 	cmneq	lr, r7, lsl #6
     cd4:	03050000 	movweq	r0, #20480	; 0x5000
     cd8:	20007158 	andcs	r7, r0, r8, asr r1
     cdc:	0007430f 	andeq	r4, r7, pc, lsl #6
     ce0:	7e030800 	cdpvc	8, 0, cr0, cr3, cr0, {0}
     ce4:	05000001 	streq	r0, [r0, #-1]
     ce8:	00716403 	rsbseq	r6, r1, r3, lsl #8
     cec:	07f30f20 	ldrbeq	r0, [r3, r0, lsr #30]!
     cf0:	03090000 	movweq	r0, #36864	; 0x9000
     cf4:	0000017e 	andeq	r0, r0, lr, ror r1
     cf8:	71700305 	cmnvc	r0, r5, lsl #6
     cfc:	350f2000 	strcc	r2, [pc, #-0]	; d04 <startup-0x1ffff2fc>
     d00:	0a000009 	beq	d2c <startup-0x1ffff2d4>
     d04:	00017e03 	andeq	r7, r1, r3, lsl #28
     d08:	7c030500 	cfstr32vc	mvfx0, [r3], {-0}
     d0c:	0f200071 	svceq	0x00200071
     d10:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
     d14:	017e030b 	cmneq	lr, fp, lsl #6
     d18:	03050000 	movweq	r0, #20480	; 0x5000
     d1c:	20007188 	andcs	r7, r0, r8, lsl #3
     d20:	0008160f 	andeq	r1, r8, pc, lsl #12
     d24:	7e030c00 	cdpvc	12, 0, cr0, cr3, cr0, {0}
     d28:	05000001 	streq	r0, [r0, #-1]
     d2c:	00719403 	rsbseq	r9, r1, r3, lsl #8
     d30:	07530f20 	ldrbeq	r0, [r3, -r0, lsr #30]
     d34:	030d0000 	movweq	r0, #53248	; 0xd000
     d38:	0000017e 	andeq	r0, r0, lr, ror r1
     d3c:	71a00305 	lslvc	r0, r5, #6
     d40:	810f2000 	mrshi	r2, CPSR
     d44:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
     d48:	00017e03 	andeq	r7, r1, r3, lsl #28
     d4c:	ac030500 	cfstr32ge	mvfx0, [r3], {-0}
     d50:	0f200071 	svceq	0x00200071
     d54:	00000863 	andeq	r0, r0, r3, ror #16
     d58:	017e030f 	cmneq	lr, pc, lsl #6
     d5c:	03050000 	movweq	r0, #20480	; 0x5000
     d60:	200071b8 			; <UNDEFINED> instruction: 0x200071b8
     d64:	00070710 	andeq	r0, r7, r0, lsl r7
     d68:	9e110100 	muflss	f0, f1, f0
     d6c:	05000000 	streq	r0, [r0, #-0]
     d70:	00394003 	eorseq	r4, r9, r3
     d74:	06d71020 	ldrbeq	r1, [r7], r0, lsr #32
     d78:	12010000 	andne	r0, r1, #0
     d7c:	0000009e 	muleq	r0, lr, r0
     d80:	39580305 	ldmdbcc	r8, {r0, r2, r8, r9}^
     d84:	2d102000 	ldccs	0, cr2, [r0, #-0]
     d88:	01000007 	tsteq	r0, r7
     d8c:	00009e13 	andeq	r9, r0, r3, lsl lr
     d90:	10030500 	andne	r0, r3, r0, lsl #10
     d94:	10200038 	eorne	r0, r0, r8, lsr r0
     d98:	0000080c 	andeq	r0, r0, ip, lsl #16
     d9c:	009e1401 	addseq	r1, lr, r1, lsl #8
     da0:	03050000 	movweq	r0, #20480	; 0x5000
     da4:	20003954 	andcs	r3, r0, r4, asr r9
     da8:	0007d710 	andeq	sp, r7, r0, lsl r7
     dac:	9e150100 	muflss	f0, f5, f0
     db0:	05000000 	streq	r0, [r0, #-0]
     db4:	00392c03 	eorseq	r2, r9, r3, lsl #24
     db8:	06ef1020 	strbteq	r1, [pc], r0, lsr #32
     dbc:	16010000 	strne	r0, [r1], -r0
     dc0:	0000009e 	muleq	r0, lr, r0
     dc4:	38200305 	stmdacc	r0!, {r0, r2, r8, r9}
     dc8:	64102000 	ldrvs	r2, [r0], #-0
     dcc:	01000007 	tsteq	r0, r7
     dd0:	00009e17 	andeq	r9, r0, r7, lsl lr
     dd4:	50030500 	andpl	r0, r3, r0, lsl #10
     dd8:	10200039 	eorne	r0, r0, r9, lsr r0
     ddc:	0000088a 	andeq	r0, r0, sl, lsl #17
     de0:	009e1801 	addseq	r1, lr, r1, lsl #16
     de4:	03050000 	movweq	r0, #20480	; 0x5000
     de8:	2000390c 	andcs	r3, r0, ip, lsl #18
     dec:	00073810 	andeq	r3, r7, r0, lsl r8
     df0:	9e190100 	muflse	f0, f1, f0
     df4:	05000000 	streq	r0, [r0, #-0]
     df8:	00387803 	eorseq	r7, r8, r3, lsl #16
     dfc:	06cd1020 	strbeq	r1, [sp], r0, lsr #32
     e00:	1a010000 	bne	40e08 <startup-0x1ffbf1f8>
     e04:	0000009e 	muleq	r0, lr, r0
     e08:	39280305 	stmdbcc	r8!, {r0, r2, r8, r9}
     e0c:	a5102000 	ldrge	r2, [r0, #-0]
     e10:	01000007 	tsteq	r0, r7
     e14:	00009e1b 	andeq	r9, r0, fp, lsl lr
     e18:	30030500 	andcc	r0, r3, r0, lsl #10
     e1c:	10200039 	eorne	r0, r0, r9, lsr r0
     e20:	0000071f 	andeq	r0, r0, pc, lsl r7
     e24:	00621d01 	rsbeq	r1, r2, r1, lsl #26
     e28:	03050000 	movweq	r0, #20480	; 0x5000
     e2c:	20003848 	andcs	r3, r0, r8, asr #16
     e30:	00089410 	andeq	r9, r8, r0, lsl r4
     e34:	621e0100 	andsvs	r0, lr, #0, 2
     e38:	05000000 	streq	r0, [r0, #-0]
     e3c:	00393403 	eorseq	r3, r9, r3, lsl #8
     e40:	08401020 	stmdaeq	r0, {r5, ip}^
     e44:	1f010000 	svcne	0x00010000
     e48:	00000062 	andeq	r0, r0, r2, rrx
     e4c:	39100305 	ldmdbcc	r0, {r0, r2, r8, r9}
     e50:	e1102000 	tst	r0, r0
     e54:	01000006 	tsteq	r0, r6
     e58:	00006220 	andeq	r6, r0, r0, lsr #4
     e5c:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
     e60:	10200038 	eorne	r0, r0, r8, lsr r0
     e64:	000008df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     e68:	00622101 	rsbeq	r2, r2, r1, lsl #2
     e6c:	03050000 	movweq	r0, #20480	; 0x5000
     e70:	20003944 	andcs	r3, r0, r4, asr #18
     e74:	00071110 	andeq	r1, r7, r0, lsl r1
     e78:	62220100 	eorvs	r0, r2, #0, 2
     e7c:	05000000 	streq	r0, [r0, #-0]
     e80:	0038f403 	eorseq	pc, r8, r3, lsl #8
     e84:	08261020 	stmdaeq	r6!, {r5, ip}
     e88:	23010000 	movwcs	r0, #4096	; 0x1000
     e8c:	00000062 	andeq	r0, r0, r2, rrx
     e90:	38140305 	ldmdacc	r4, {r0, r2, r8, r9}
     e94:	f9102000 			; <UNDEFINED> instruction: 0xf9102000
     e98:	01000006 	tsteq	r0, r6
     e9c:	00006224 	andeq	r6, r0, r4, lsr #4
     ea0:	24030500 	strcs	r0, [r3], #-1280	; 0xfffffb00
     ea4:	10200038 	eorne	r0, r0, r8, lsr r0
     ea8:	000008a2 	andeq	r0, r0, r2, lsr #17
     eac:	00622501 	rsbeq	r2, r2, r1, lsl #10
     eb0:	03050000 	movweq	r0, #20480	; 0x5000
     eb4:	20003860 	andcs	r3, r0, r0, ror #16
     eb8:	0007b910 	andeq	fp, r7, r0, lsl r9
     ebc:	62260100 	eorvs	r0, r6, #0, 2
     ec0:	05000000 	streq	r0, [r0, #-0]
     ec4:	0038e803 	eorseq	lr, r8, r3, lsl #16
     ec8:	08f91020 	ldmeq	r9!, {r5, ip}^
     ecc:	27010000 	strcs	r0, [r1, -r0]
     ed0:	00000062 	andeq	r0, r0, r2, rrx
     ed4:	391c0305 	ldmdbcc	ip, {r0, r2, r8, r9}
     ed8:	04102000 	ldreq	r2, [r0], #-0
     edc:	01000008 	tsteq	r0, r8
     ee0:	00014c2a 	andeq	r4, r1, sl, lsr #24
     ee4:	7c030500 	cfstr32vc	mvfx0, [r3], {-0}
     ee8:	10200038 	eorne	r0, r0, r8, lsr r0
     eec:	0000087f 	andeq	r0, r0, pc, ror r8
     ef0:	00a42b01 	adceq	r2, r4, r1, lsl #22
     ef4:	03050000 	movweq	r0, #20480	; 0x5000
     ef8:	2000386c 	andcs	r3, r0, ip, ror #16
     efc:	0008ee10 	andeq	lr, r8, r0, lsl lr
     f00:	a42c0100 	strtge	r0, [ip], #-256	; 0xffffff00
     f04:	05000000 	streq	r0, [r0, #-0]
     f08:	00383003 	eorseq	r3, r8, r3
     f0c:	07911020 	ldreq	r1, [r1, r0, lsr #32]
     f10:	2d010000 	stccs	0, cr0, [r1, #-0]
     f14:	000000a4 	andeq	r0, r0, r4, lsr #1
     f18:	38540305 	ldmdacc	r4, {r0, r2, r8, r9}^
     f1c:	35102000 	ldrcc	r2, [r0, #-0]
     f20:	01000008 	tsteq	r0, r8
     f24:	0000a42e 	andeq	sl, r0, lr, lsr #8
     f28:	00030500 	andeq	r0, r3, r0, lsl #10
     f2c:	10200039 	eorne	r0, r0, r9, lsr r0
     f30:	000008c2 	andeq	r0, r0, r2, asr #17
     f34:	00a42f01 	adceq	r2, r4, r1, lsl #30
     f38:	03050000 	movweq	r0, #20480	; 0x5000
     f3c:	200038a0 	andcs	r3, r0, r0, lsr #17
     f40:	0000a40b 	andeq	sl, r0, fp, lsl #8
     f44:	00043c00 	andeq	r3, r4, r0, lsl #24
     f48:	018e0e00 	orreq	r0, lr, r0, lsl #28
     f4c:	00040000 	andeq	r0, r4, r0
     f50:	00087410 	andeq	r7, r8, r0, lsl r4
     f54:	2c300100 	ldfcss	f0, [r0], #-0
     f58:	05000004 	streq	r0, [r0, #-4]
     f5c:	0038ac03 	eorseq	sl, r8, r3, lsl #24
     f60:	08591120 	ldmdaeq	r9, {r5, r8, ip}^
     f64:	5f010000 	svcpl	0x00010000
     f68:	200011e8 	andcs	r1, r0, r8, ror #3
     f6c:	00000124 	andeq	r0, r0, r4, lsr #2
     f70:	04829c01 	streq	r9, [r2], #3073	; 0xc01
     f74:	04120000 	ldreq	r0, [r2], #-0
     f78:	01000008 	tsteq	r0, r8
     f7c:	0001625f 	andeq	r6, r1, pc, asr r2
     f80:	6c910200 	lfmvs	f0, 4, [r1], {0}
     f84:	00084f0f 	andeq	r4, r8, pc, lsl #30
     f88:	2e600100 	powcss	f0, f0, f0
     f8c:	05000001 	streq	r0, [r0, #-1]
     f90:	0071c403 	rsbseq	ip, r1, r3, lsl #8
     f94:	17130020 	ldrne	r0, [r3, -r0, lsr #32]
     f98:	01000004 	tsteq	r0, r4
     f9c:	00106431 	andseq	r6, r0, r1, lsr r4
     fa0:	00018420 	andeq	r8, r1, r0, lsr #8
     fa4:	0f9c0100 	svceq	0x009c0100
     fa8:	0000079c 	muleq	r0, ip, r7
     fac:	009e3201 	addseq	r3, lr, r1, lsl #4
     fb0:	91020000 	mrsls	r0, (UNDEF: 2)
     fb4:	076f0f74 			; <UNDEFINED> instruction: 0x076f0f74
     fb8:	36010000 	strcc	r0, [r1], -r0
     fbc:	0000009e 	muleq	r0, lr, r0
     fc0:	0f709102 	svceq	0x00709102
     fc4:	000007b0 			; <UNDEFINED> instruction: 0x000007b0
     fc8:	009e3a01 	addseq	r3, lr, r1, lsl #20
     fcc:	91020000 	mrsls	r0, (UNDEF: 2)
     fd0:	07780f6c 	ldrbeq	r0, [r8, -ip, ror #30]!
     fd4:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
     fd8:	0000009e 	muleq	r0, lr, r0
     fdc:	0f689102 	svceq	0x00689102
     fe0:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
     fe4:	009e4201 	addseq	r4, lr, r1, lsl #4
     fe8:	91020000 	mrsls	r0, (UNDEF: 2)
     fec:	02c20f64 	sbceq	r0, r2, #100, 30	; 0x190
     ff0:	46010000 	strmi	r0, [r1], -r0
     ff4:	0000009e 	muleq	r0, lr, r0
     ff8:	0f609102 	svceq	0x00609102
     ffc:	000002cb 	andeq	r0, r0, fp, asr #5
    1000:	009e4a01 	addseq	r4, lr, r1, lsl #20
    1004:	91020000 	mrsls	r0, (UNDEF: 2)
    1008:	02d40f5c 	sbcseq	r0, r4, #92, 30	; 0x170
    100c:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    1010:	0000009e 	muleq	r0, lr, r0
    1014:	0f589102 	svceq	0x00589102
    1018:	000002dd 	ldrdeq	r0, [r0], -sp
    101c:	009e5201 	addseq	r5, lr, r1, lsl #4
    1020:	91020000 	mrsls	r0, (UNDEF: 2)
    1024:	02e60f54 	rsceq	r0, r6, #84, 30	; 0x150
    1028:	56010000 	strpl	r0, [r1], -r0
    102c:	0000009e 	muleq	r0, lr, r0
    1030:	0f509102 	svceq	0x00509102
    1034:	00000067 	andeq	r0, r0, r7, rrx
    1038:	009e5a01 	addseq	r5, lr, r1, lsl #20
    103c:	91020000 	mrsls	r0, (UNDEF: 2)
    1040:	f700004c 			; <UNDEFINED> instruction: 0xf700004c
    1044:	04000001 	streq	r0, [r0], #-1
    1048:	00033200 	andeq	r3, r3, r0, lsl #4
    104c:	81010400 	tsthi	r1, r0, lsl #8
    1050:	0c000000 	stceq	0, cr0, [r0], {-0}
    1054:	0000097e 	andeq	r0, r0, lr, ror r9
    1058:	2000130c 	andcs	r1, r0, ip, lsl #6
    105c:	000001d4 	ldrdeq	r0, [r0], -r4
    1060:	00000500 	andeq	r0, r0, r0, lsl #10
    1064:	2a070402 	bcs	1c2074 <startup-0x1fe3df8c>
    1068:	02000003 	andeq	r0, r0, #3
    106c:	03240702 			; <UNDEFINED> instruction: 0x03240702
    1070:	01020000 	mrseq	r0, (UNDEF: 2)
    1074:	00044108 	andeq	r4, r4, r8, lsl #2
    1078:	020c0300 	andeq	r0, ip, #0, 6
    107c:	00006305 	andeq	r6, r0, r5, lsl #6
    1080:	03060400 	movweq	r0, #25600	; 0x6400
    1084:	07020000 	streq	r0, [r2, -r0]
    1088:	00000021 	andeq	r0, r0, r1, lsr #32
    108c:	065f0400 	ldrbeq	r0, [pc], -r0, lsl #8
    1090:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1094:	00000021 	andeq	r0, r0, r1, lsr #32
    1098:	119c0404 	orrsne	r0, ip, r4, lsl #8
    109c:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    10a0:	00000063 	andeq	r0, r0, r3, rrx
    10a4:	04050008 	streq	r0, [r5], #-8
    10a8:	0000002f 	andeq	r0, r0, pc, lsr #32
    10ac:	0012ee06 	andseq	lr, r2, r6, lsl #28
    10b0:	360a0200 	strcc	r0, [sl], -r0, lsl #4
    10b4:	07000000 	streq	r0, [r0, -r0]
    10b8:	00000016 	andeq	r0, r0, r6, lsl r0
    10bc:	a506030c 	strge	r0, [r6, #-780]	; 0xfffffcf4
    10c0:	04000000 	streq	r0, [r0], #-0
    10c4:	0000052c 	andeq	r0, r0, ip, lsr #10
    10c8:	00a50703 	adceq	r0, r5, r3, lsl #14
    10cc:	04000000 	streq	r0, [r0], #-0
    10d0:	0000001d 	andeq	r0, r0, sp, lsl r0
    10d4:	00a50803 	adceq	r0, r5, r3, lsl #16
    10d8:	04040000 	streq	r0, [r4], #-0
    10dc:	00000012 	andeq	r0, r0, r2, lsl r0
    10e0:	00a50903 	adceq	r0, r5, r3, lsl #18
    10e4:	00080000 	andeq	r0, r8, r0
    10e8:	00690405 	rsbeq	r0, r9, r5, lsl #8
    10ec:	d7060000 	strle	r0, [r6, -r0]
    10f0:	0300000f 	movweq	r0, #15
    10f4:	0000740a 	andeq	r7, r0, sl, lsl #8
    10f8:	06240700 	strteq	r0, [r4], -r0, lsl #14
    10fc:	04240000 	strteq	r0, [r4], #-0
    1100:	00012f06 	andeq	r2, r1, r6, lsl #30
    1104:	03de0400 	bicseq	r0, lr, #0, 8
    1108:	07040000 	streq	r0, [r4, -r0]
    110c:	0000012f 	andeq	r0, r0, pc, lsr #2
    1110:	06300400 	ldrteq	r0, [r0], -r0, lsl #8
    1114:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    1118:	00000135 	andeq	r0, r0, r5, lsr r1
    111c:	05970404 	ldreq	r0, [r7, #1028]	; 0x404
    1120:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    1124:	00000135 	andeq	r0, r0, r5, lsr r1
    1128:	05c30408 	strbeq	r0, [r3, #1032]	; 0x408
    112c:	0c040000 	stceq	0, cr0, [r4], {-0}
    1130:	0000014d 	andeq	r0, r0, sp, asr #2
    1134:	02ff040c 	rscseq	r0, pc, #12, 8	; 0xc000000
    1138:	0d040000 	stceq	0, cr0, [r4, #-0]
    113c:	0000014d 	andeq	r0, r0, sp, asr #2
    1140:	03f00410 	mvnseq	r0, #16, 8	; 0x10000000
    1144:	10040000 	andne	r0, r4, r0
    1148:	00000135 	andeq	r0, r0, r5, lsr r1
    114c:	00520414 	subseq	r0, r2, r4, lsl r4
    1150:	11040000 	mrsne	r0, (UNDEF: 4)
    1154:	00000135 	andeq	r0, r0, r5, lsr r1
    1158:	036f0418 	cmneq	pc, #24, 8	; 0x18000000
    115c:	12040000 	andne	r0, r4, #0
    1160:	00000135 	andeq	r0, r0, r5, lsr r1
    1164:	037f041c 	cmneq	pc, #28, 8	; 0x1c000000
    1168:	13040000 	movwne	r0, #16384	; 0x4000
    116c:	00000135 	andeq	r0, r0, r5, lsr r1
    1170:	04050020 	streq	r0, [r5], #-32	; 0xffffffe0
    1174:	000000ab 	andeq	r0, r0, fp, lsr #1
    1178:	69050408 	stmdbvs	r5, {r3, sl}
    117c:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1180:	00000147 	andeq	r0, r0, r7, asr #2
    1184:	0001470a 	andeq	r4, r1, sl, lsl #14
    1188:	04050000 	streq	r0, [r5], #-0
    118c:	000000b6 	strheq	r0, [r0], -r6
    1190:	013c0405 	teqeq	ip, r5, lsl #8
    1194:	25060000 	strcs	r0, [r6, #-0]
    1198:	04000006 	streq	r0, [r0], #-6
    119c:	0000b615 	andeq	fp, r0, r5, lsl r6
    11a0:	01690b00 	cmneq	r9, r0, lsl #22
    11a4:	01690000 	cmneq	r9, r0
    11a8:	000c0000 	andeq	r0, ip, r0
    11ac:	01530405 	cmpeq	r3, r5, lsl #8
    11b0:	c40d0000 	strgt	r0, [sp], #-0
    11b4:	04000004 	streq	r0, [r0], #-4
    11b8:	00015e1c 	andeq	r5, r1, ip, lsl lr
    11bc:	03b50d00 			; <UNDEFINED> instruction: 0x03b50d00
    11c0:	1d040000 	stcne	0, cr0, [r4, #-0]
    11c4:	00000135 	andeq	r0, r0, r5, lsr r1
    11c8:	0009ad0e 	andeq	sl, r9, lr, lsl #26
    11cc:	0c060100 	stfeqs	f0, [r6], {-0}
    11d0:	d4200013 	strtle	r0, [r0], #-19	; 0xffffffed
    11d4:	01000001 	tsteq	r0, r1
    11d8:	06c80f9c 			; <UNDEFINED> instruction: 0x06c80f9c
    11dc:	06010000 	streq	r0, [r1], -r0
    11e0:	00000169 	andeq	r0, r0, r9, ror #2
    11e4:	10749102 	rsbsne	r9, r4, r2, lsl #2
    11e8:	00000954 	andeq	r0, r0, r4, asr r9
    11ec:	01351001 	teqeq	r5, r1
    11f0:	03050000 	movweq	r0, #20480	; 0x5000
    11f4:	20003594 	mulcs	r0, r4, r5
    11f8:	00094510 	andeq	r4, r9, r0, lsl r5
    11fc:	35110100 	ldrcc	r0, [r1, #-256]	; 0xffffff00
    1200:	05000001 	streq	r0, [r0, #-1]
    1204:	00359c03 	eorseq	r9, r5, r3, lsl #24
    1208:	09701020 	ldmdbeq	r0!, {r5, ip}^
    120c:	12010000 	andne	r0, r1, #0
    1210:	00000135 	andeq	r0, r0, r5, lsr r1
    1214:	35a40305 	strcc	r0, [r4, #773]!	; 0x305
    1218:	69102000 	ldmdbvs	r0, {sp}
    121c:	01000009 	tsteq	r0, r9
    1220:	00013513 	andeq	r3, r1, r3, lsl r5
    1224:	a0030500 	andge	r0, r3, r0, lsl #10
    1228:	10200035 	eorne	r0, r0, r5, lsr r0
    122c:	00000962 	andeq	r0, r0, r2, ror #18
    1230:	01351401 	teqeq	r5, r1, lsl #8
    1234:	03050000 	movweq	r0, #20480	; 0x5000
    1238:	20003598 	mulcs	r0, r8, r5
    123c:	06410000 	strbeq	r0, [r1], -r0
    1240:	00040000 	andeq	r0, r4, r0
    1244:	00000400 	andeq	r0, r0, r0, lsl #8
    1248:	00810104 	addeq	r0, r1, r4, lsl #2
    124c:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
    1250:	e000000c 	and	r0, r0, ip
    1254:	64200014 	strtvs	r0, [r0], #-20	; 0xffffffec
    1258:	e7000003 	str	r0, [r0, -r3]
    125c:	02000005 	andeq	r0, r0, #5
    1260:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
    1264:	03000000 	movweq	r0, #0
    1268:	00000306 	andeq	r0, r0, r6, lsl #6
    126c:	004e0702 	subeq	r0, lr, r2, lsl #14
    1270:	03000000 	movweq	r0, #0
    1274:	0000065f 	andeq	r0, r0, pc, asr r6
    1278:	004e0802 	subeq	r0, lr, r2, lsl #16
    127c:	03040000 	movweq	r0, #16384	; 0x4000
    1280:	0000119c 	muleq	r0, ip, r1
    1284:	00550902 	subseq	r0, r5, r2, lsl #18
    1288:	00080000 	andeq	r0, r8, r0
    128c:	2a070404 	bcs	1c22a4 <startup-0x1fe3dd5c>
    1290:	05000003 	streq	r0, [r0, #-3]
    1294:	00005b04 	andeq	r5, r0, r4, lsl #22
    1298:	08010400 	stmdaeq	r1, {sl}
    129c:	00000441 	andeq	r0, r0, r1, asr #8
    12a0:	0012ee06 	andseq	lr, r2, r6, lsl #28
    12a4:	210a0200 	mrscs	r0, R10_fiq
    12a8:	07000000 	streq	r0, [r0, -r0]
    12ac:	00000016 	andeq	r0, r0, r6, lsl r0
    12b0:	9e06030c 	cdpls	3, 0, cr0, cr6, cr12, {0}
    12b4:	03000000 	movweq	r0, #0
    12b8:	0000052c 	andeq	r0, r0, ip, lsr #10
    12bc:	009e0703 	addseq	r0, lr, r3, lsl #14
    12c0:	03000000 	movweq	r0, #0
    12c4:	0000001d 	andeq	r0, r0, sp, lsl r0
    12c8:	009e0803 	addseq	r0, lr, r3, lsl #16
    12cc:	03040000 	movweq	r0, #16384	; 0x4000
    12d0:	00000012 	andeq	r0, r0, r2, lsl r0
    12d4:	009e0903 	addseq	r0, lr, r3, lsl #18
    12d8:	00080000 	andeq	r0, r8, r0
    12dc:	00620405 	rsbeq	r0, r2, r5, lsl #8
    12e0:	d7060000 	strle	r0, [r6, -r0]
    12e4:	0300000f 	movweq	r0, #15
    12e8:	00006d0a 	andeq	r6, r0, sl, lsl #26
    12ec:	06240700 	strteq	r0, [r4], -r0, lsl #14
    12f0:	04240000 	strteq	r0, [r4], #-0
    12f4:	00012806 	andeq	r2, r1, r6, lsl #16
    12f8:	03de0300 	bicseq	r0, lr, #0, 6
    12fc:	07040000 	streq	r0, [r4, -r0]
    1300:	00000128 	andeq	r0, r0, r8, lsr #2
    1304:	06300300 	ldrteq	r0, [r0], -r0, lsl #6
    1308:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    130c:	0000012e 	andeq	r0, r0, lr, lsr #2
    1310:	05970304 	ldreq	r0, [r7, #772]	; 0x304
    1314:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    1318:	0000012e 	andeq	r0, r0, lr, lsr #2
    131c:	05c30308 	strbeq	r0, [r3, #776]	; 0x308
    1320:	0c040000 	stceq	0, cr0, [r4], {-0}
    1324:	00000146 	andeq	r0, r0, r6, asr #2
    1328:	02ff030c 	rscseq	r0, pc, #12, 6	; 0x30000000
    132c:	0d040000 	stceq	0, cr0, [r4, #-0]
    1330:	00000146 	andeq	r0, r0, r6, asr #2
    1334:	03f00310 	mvnseq	r0, #16, 6	; 0x40000000
    1338:	10040000 	andne	r0, r4, r0
    133c:	0000012e 	andeq	r0, r0, lr, lsr #2
    1340:	00520314 	subseq	r0, r2, r4, lsl r3
    1344:	11040000 	mrsne	r0, (UNDEF: 4)
    1348:	0000012e 	andeq	r0, r0, lr, lsr #2
    134c:	036f0318 	cmneq	pc, #24, 6	; 0x60000000
    1350:	12040000 	andne	r0, r4, #0
    1354:	0000012e 	andeq	r0, r0, lr, lsr #2
    1358:	037f031c 	cmneq	pc, #28, 6	; 0x70000000
    135c:	13040000 	movwne	r0, #16384	; 0x4000
    1360:	0000012e 	andeq	r0, r0, lr, lsr #2
    1364:	04050020 	streq	r0, [r5], #-32	; 0xffffffe0
    1368:	000000a4 	andeq	r0, r0, r4, lsr #1
    136c:	69050408 	stmdbvs	r5, {r3, sl}
    1370:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1374:	00000140 	andeq	r0, r0, r0, asr #2
    1378:	0001400a 	andeq	r4, r1, sl
    137c:	04050000 	streq	r0, [r5], #-0
    1380:	000000af 	andeq	r0, r0, pc, lsr #1
    1384:	01350405 	teqeq	r5, r5, lsl #8
    1388:	25060000 	strcs	r0, [r6, #-0]
    138c:	04000006 	streq	r0, [r0], #-6
    1390:	0000af15 	andeq	sl, r0, r5, lsl pc
    1394:	01620b00 	cmneq	r2, r0, lsl #22
    1398:	01620000 	cmneq	r2, r0
    139c:	000c0000 	andeq	r0, ip, r0
    13a0:	014c0405 	cmpeq	ip, r5, lsl #8
    13a4:	c40d0000 	strgt	r0, [sp], #-0
    13a8:	04000004 	streq	r0, [r0], #-4
    13ac:	0001571c 	andeq	r5, r1, ip, lsl r7
    13b0:	03b50d00 			; <UNDEFINED> instruction: 0x03b50d00
    13b4:	1d040000 	stcne	0, cr0, [r4, #-0]
    13b8:	0000012e 	andeq	r0, r0, lr, lsr #2
    13bc:	00005b0b 	andeq	r5, r0, fp, lsl #22
    13c0:	00018e00 	andeq	r8, r1, r0, lsl #28
    13c4:	018e0e00 	orreq	r0, lr, r0, lsl #28
    13c8:	00630000 	rsbeq	r0, r3, r0
    13cc:	9c070404 	cfstrsls	mvf0, [r7], {4}
    13d0:	0f000003 	svceq	0x00000003
    13d4:	00000c94 	muleq	r0, r4, ip
    13d8:	017e0305 	cmneq	lr, r5, lsl #6
    13dc:	03050000 	movweq	r0, #20480	; 0x5000
    13e0:	200071c8 	andcs	r7, r0, r8, asr #3
    13e4:	000aff0f 	andeq	pc, sl, pc, lsl #30
    13e8:	7e030600 	cfmadd32vc	mvax0, mvfx0, mvfx3, mvfx0
    13ec:	05000001 	streq	r0, [r0, #-1]
    13f0:	00722c03 	rsbseq	r2, r2, r3, lsl #24
    13f4:	0b470f20 	bleq	11c507c <startup-0x1ee3af84>
    13f8:	03070000 	movweq	r0, #28672	; 0x7000
    13fc:	0000017e 	andeq	r0, r0, lr, ror r1
    1400:	72900305 	addsvc	r0, r0, #335544320	; 0x14000000
    1404:	ee0f2000 	cdp	0, 0, cr2, cr15, cr0, {0}
    1408:	0800000a 	stmdaeq	r0, {r1, r3}
    140c:	00017e03 	andeq	r7, r1, r3, lsl #28
    1410:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
    1414:	0f200072 	svceq	0x00200072
    1418:	00000c6d 	andeq	r0, r0, sp, ror #24
    141c:	017e0309 	cmneq	lr, r9, lsl #6
    1420:	03050000 	movweq	r0, #20480	; 0x5000
    1424:	20007358 	andcs	r7, r0, r8, asr r3
    1428:	000d410f 	andeq	r4, sp, pc, lsl #2
    142c:	7e030a00 	vmlavc.f32	s0, s6, s0
    1430:	05000001 	streq	r0, [r0, #-1]
    1434:	0073bc03 	rsbseq	fp, r3, r3, lsl #24
    1438:	0b1a0f20 	bleq	6850c0 <startup-0x1f97af40>
    143c:	030b0000 	movweq	r0, #45056	; 0xb000
    1440:	0000017e 	andeq	r0, r0, lr, ror r1
    1444:	74200305 	strtvc	r0, [r0], #-773	; 0xfffffcfb
    1448:	080f2000 	stmdaeq	pc, {sp}	; <UNPREDICTABLE>
    144c:	0c00000c 	stceq	0, cr0, [r0], {12}
    1450:	00017e03 	andeq	r7, r1, r3, lsl #28
    1454:	84030500 	strhi	r0, [r3], #-1280	; 0xfffffb00
    1458:	0f200074 	svceq	0x00200074
    145c:	000009c9 	andeq	r0, r0, r9, asr #19
    1460:	017e030d 	cmneq	lr, sp, lsl #6
    1464:	03050000 	movweq	r0, #20480	; 0x5000
    1468:	200074e8 	andcs	r7, r0, r8, ror #9
    146c:	000b2b0f 	andeq	r2, fp, pc, lsl #22
    1470:	7e030e00 	cdpvc	14, 0, cr0, cr3, cr0, {0}
    1474:	05000001 	streq	r0, [r0, #-1]
    1478:	00754c03 	rsbseq	r4, r5, r3, lsl #24
    147c:	0baf0f20 	bleq	febc5104 <firstTime.4040+0xdebbbd5c>
    1480:	030f0000 	movweq	r0, #61440	; 0xf000
    1484:	0000017e 	andeq	r0, r0, lr, ror r1
    1488:	75b00305 	ldrvc	r0, [r0, #773]!	; 0x305
    148c:	e50f2000 	str	r2, [pc, #-0]	; 1494 <startup-0x1fffeb6c>
    1490:	10000009 	andne	r0, r0, r9
    1494:	00017e03 	andeq	r7, r1, r3, lsl #28
    1498:	14030500 	strne	r0, [r3], #-1280	; 0xfffffb00
    149c:	0f200076 	svceq	0x00200076
    14a0:	00000b58 	andeq	r0, r0, r8, asr fp
    14a4:	017e0311 	cmneq	lr, r1, lsl r3
    14a8:	03050000 	movweq	r0, #20480	; 0x5000
    14ac:	20007678 	andcs	r7, r0, r8, ror r6
    14b0:	000b780f 	andeq	r7, fp, pc, lsl #16
    14b4:	7e031200 	cdpvc	2, 0, cr1, cr3, cr0, {0}
    14b8:	05000001 	streq	r0, [r0, #-1]
    14bc:	0076dc03 	rsbseq	sp, r6, r3, lsl #24
    14c0:	0a0f0f20 	beq	3c5148 <startup-0x1fc3aeb8>
    14c4:	03130000 	tsteq	r3, #0
    14c8:	0000017e 	andeq	r0, r0, lr, ror r1
    14cc:	77400305 	strbvc	r0, [r0, -r5, lsl #6]
    14d0:	18102000 	ldmdane	r0, {sp}
    14d4:	0100000c 	tsteq	r0, ip
    14d8:	00009e15 	andeq	r9, r0, r5, lsl lr
    14dc:	c8030500 	stmdagt	r3, {r8, sl}
    14e0:	10200039 	eorne	r0, r0, r9, lsr r0
    14e4:	00000a4b 	andeq	r0, r0, fp, asr #20
    14e8:	009e1601 	addseq	r1, lr, r1, lsl #12
    14ec:	03050000 	movweq	r0, #20480	; 0x5000
    14f0:	20003960 	andcs	r3, r0, r0, ror #18
    14f4:	000a3510 	andeq	r3, sl, r0, lsl r5
    14f8:	9e170100 	muflss	f0, f7, f0
    14fc:	05000000 	streq	r0, [r0, #-0]
    1500:	003a5803 	eorseq	r5, sl, r3, lsl #16
    1504:	0a8d1020 	beq	fe34558c <firstTime.4040+0xde33c1e4>
    1508:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    150c:	0000009e 	muleq	r0, lr, r0
    1510:	39c40305 	stmibcc	r4, {r0, r2, r8, r9}^
    1514:	88102000 	ldmdahi	r0, {sp}
    1518:	0100000b 	tsteq	r0, fp
    151c:	00009e19 	andeq	r9, r0, r9, lsl lr
    1520:	48030500 	stmdami	r3, {r8, sl}
    1524:	1020003a 	eorne	r0, r0, sl, lsr r0
    1528:	00000c23 	andeq	r0, r0, r3, lsr #24
    152c:	009e1a01 	addseq	r1, lr, r1, lsl #20
    1530:	03050000 	movweq	r0, #20480	; 0x5000
    1534:	20003afc 	strdcs	r3, [r0], -ip
    1538:	000a4010 	andeq	r4, sl, r0, lsl r0
    153c:	9e1b0100 	muflse	f0, f3, f0
    1540:	05000000 	streq	r0, [r0, #-0]
    1544:	0039bc03 	eorseq	fp, r9, r3, lsl #24
    1548:	0cb01020 	ldceq	0, cr1, [r0], #128	; 0x80
    154c:	1c010000 	stcne	0, cr0, [r1], {-0}
    1550:	0000009e 	muleq	r0, lr, r0
    1554:	39e40305 	stmibcc	r4!, {r0, r2, r8, r9}^
    1558:	20102000 	andscs	r2, r0, r0
    155c:	0100000a 	tsteq	r0, sl
    1560:	00009e1d 	andeq	r9, r0, sp, lsl lr
    1564:	10030500 	andne	r0, r3, r0, lsl #10
    1568:	1020003a 	eorne	r0, r0, sl, lsr r0
    156c:	00000bee 	andeq	r0, r0, lr, ror #23
    1570:	009e1e01 	addseq	r1, lr, r1, lsl #28
    1574:	03050000 	movweq	r0, #20480	; 0x5000
    1578:	20003ae0 	andcs	r3, r0, r0, ror #21
    157c:	000a8310 	andeq	r8, sl, r0, lsl r3
    1580:	9e1f0100 	muflse	f0, f7, f0
    1584:	05000000 	streq	r0, [r0, #-0]
    1588:	0039c003 	eorseq	ip, r9, r3
    158c:	0cf81020 	ldcleq	0, cr1, [r8], #128	; 0x80
    1590:	20010000 	andcs	r0, r1, r0
    1594:	0000009e 	muleq	r0, lr, r0
    1598:	395c0305 	ldmdbcc	ip, {r0, r2, r8, r9}^
    159c:	64102000 	ldrvs	r2, [r0], #-0
    15a0:	0100000a 	tsteq	r0, sl
    15a4:	00009e21 	andeq	r9, r0, r1, lsr #28
    15a8:	70030500 	andvc	r0, r3, r0, lsl #10
    15ac:	10200039 	eorne	r0, r0, r9, lsr r0
    15b0:	00000c8a 	andeq	r0, r0, sl, lsl #25
    15b4:	009e2201 	addseq	r2, lr, r1, lsl #4
    15b8:	03050000 	movweq	r0, #20480	; 0x5000
    15bc:	200039f4 	strdcs	r3, [r0], -r4
    15c0:	000bc910 	andeq	ip, fp, r0, lsl r9
    15c4:	9e230100 	suflss	f0, f3, f0
    15c8:	05000000 	streq	r0, [r0, #-0]
    15cc:	003a3803 	eorseq	r3, sl, r3, lsl #16
    15d0:	0cc71020 	stcleq	0, cr1, [r7], {32}
    15d4:	25010000 	strcs	r0, [r1, #-0]
    15d8:	00000062 	andeq	r0, r0, r2, rrx
    15dc:	39d80305 	ldmibcc	r8, {r0, r2, r8, r9}^
    15e0:	c8102000 	ldmdagt	r0, {sp}
    15e4:	0100000a 	tsteq	r0, sl
    15e8:	00006226 	andeq	r6, r0, r6, lsr #4
    15ec:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
    15f0:	1020003a 	eorne	r0, r0, sl, lsr r0
    15f4:	00000c7d 	andeq	r0, r0, sp, ror ip
    15f8:	00622701 	rsbeq	r2, r2, r1, lsl #14
    15fc:	03050000 	movweq	r0, #20480	; 0x5000
    1600:	200039e8 	andcs	r3, r0, r8, ror #19
    1604:	000bf910 	andeq	pc, fp, r0, lsl r9	; <UNPREDICTABLE>
    1608:	62280100 	eorvs	r0, r8, #0, 2
    160c:	05000000 	streq	r0, [r0, #-0]
    1610:	003ae403 	eorseq	lr, sl, r3, lsl #8
    1614:	09ba1020 	ldmibeq	sl!, {r5, ip}
    1618:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    161c:	00000062 	andeq	r0, r0, r2, rrx
    1620:	3a5c0305 	bcc	170223c <startup-0x1e8fddc4>
    1624:	ac102000 	ldcge	0, cr2, [r0], {-0}
    1628:	0100000a 	tsteq	r0, sl
    162c:	0000622a 	andeq	r6, r0, sl, lsr #4
    1630:	04030500 	streq	r0, [r3], #-1280	; 0xfffffb00
    1634:	1020003a 	eorne	r0, r0, sl, lsr r0
    1638:	00000cd5 	ldrdeq	r0, [r0], -r5
    163c:	00622b01 	rsbeq	r2, r2, r1, lsl #22
    1640:	03050000 	movweq	r0, #20480	; 0x5000
    1644:	20003a3c 	andcs	r3, r0, ip, lsr sl
    1648:	000b6910 	andeq	r6, fp, r0, lsl r9
    164c:	622c0100 	eorvs	r0, ip, #0, 2
    1650:	05000000 	streq	r0, [r0, #-0]
    1654:	003a8003 	eorseq	r8, sl, r3
    1658:	0ba11020 	bleq	fe8456e0 <firstTime.4040+0xde83c338>
    165c:	2d010000 	stccs	0, cr0, [r1, #-0]
    1660:	00000062 	andeq	r0, r0, r2, rrx
    1664:	3a8c0305 	bcc	fe302280 <firstTime.4040+0xde2f8ed8>
    1668:	55102000 	ldrpl	r2, [r0, #-0]
    166c:	0100000a 	tsteq	r0, sl
    1670:	0000622e 	andeq	r6, r0, lr, lsr #4
    1674:	74030500 	strvc	r0, [r3], #-1280	; 0xfffffb00
    1678:	10200039 	eorne	r0, r0, r9, lsr r0
    167c:	00000b92 	muleq	r0, r2, fp
    1680:	00622f01 	rsbeq	r2, r2, r1, lsl #30
    1684:	03050000 	movweq	r0, #20480	; 0x5000
    1688:	20003a74 	andcs	r3, r0, r4, ror sl
    168c:	000aba10 	andeq	fp, sl, r0, lsl sl
    1690:	62300100 	eorsvs	r0, r0, #0, 2
    1694:	05000000 	streq	r0, [r0, #-0]
    1698:	003af003 	eorseq	pc, sl, r3
    169c:	0bdf1020 	bleq	ff7c5724 <firstTime.4040+0xdf7bc37c>
    16a0:	31010000 	mrscc	r0, (UNDEF: 1)
    16a4:	00000062 	andeq	r0, r0, r2, rrx
    16a8:	3a200305 	bcc	8022c4 <startup-0x1f7fdd3c>
    16ac:	f6102000 			; <UNDEFINED> instruction: 0xf6102000
    16b0:	01000009 	tsteq	r0, r9
    16b4:	00006232 	andeq	r6, r0, r2, lsr r2
    16b8:	f8030500 			; <UNDEFINED> instruction: 0xf8030500
    16bc:	10200039 	eorne	r0, r0, r9, lsr r0
    16c0:	00000ad6 	ldrdeq	r0, [r0], -r6
    16c4:	00623301 	rsbeq	r3, r2, r1, lsl #6
    16c8:	03050000 	movweq	r0, #20480	; 0x5000
    16cc:	20003a14 	andcs	r3, r0, r4, lsl sl
    16d0:	000c6510 	andeq	r6, ip, r0, lsl r5
    16d4:	4c360100 	ldfmis	f0, [r6], #-0
    16d8:	05000001 	streq	r0, [r0, #-1]
    16dc:	00398c03 	eorseq	r8, r9, r3, lsl #24
    16e0:	0ca51020 	stceq	0, cr1, [r5], #128	; 0x80
    16e4:	37010000 	strcc	r0, [r1, -r0]
    16e8:	000000a4 	andeq	r0, r0, r4, lsr #1
    16ec:	39b00305 	ldmibcc	r0!, {r0, r2, r8, r9}
    16f0:	2c102000 	ldccs	0, cr2, [r0], {-0}
    16f4:	0100000d 	tsteq	r0, sp
    16f8:	0000a438 	andeq	sl, r0, r8, lsr r4
    16fc:	80030500 	andhi	r0, r3, r0, lsl #10
    1700:	10200039 	eorne	r0, r0, r9, lsr r0
    1704:	00000b3c 	andeq	r0, r0, ip, lsr fp
    1708:	00a43901 	adceq	r3, r4, r1, lsl #18
    170c:	03050000 	movweq	r0, #20480	; 0x5000
    1710:	20003a68 	andcs	r3, r0, r8, ror #20
    1714:	0009da10 	andeq	sp, r9, r0, lsl sl
    1718:	a43a0100 	ldrtge	r0, [sl], #-256	; 0xffffff00
    171c:	05000000 	streq	r0, [r0, #-0]
    1720:	0039cc03 	eorseq	ip, r9, r3, lsl #24
    1724:	0d031020 	stceq	0, cr1, [r3, #-128]	; 0xffffff80
    1728:	3b010000 	blcc	41730 <startup-0x1ffbe8d0>
    172c:	000000a4 	andeq	r0, r0, r4, lsr #1
    1730:	3a2c0305 	bcc	b0234c <startup-0x1f4fdcb4>
    1734:	0f102000 	svceq	0x00102000
    1738:	0100000b 	tsteq	r0, fp
    173c:	0000a43c 	andeq	sl, r0, ip, lsr r4
    1740:	64030500 	strvs	r0, [r3], #-1280	; 0xfffffb00
    1744:	0b200039 	bleq	801830 <startup-0x1f7fe7d0>
    1748:	000000a4 	andeq	r0, r0, r4, lsr #1
    174c:	00000519 	andeq	r0, r0, r9, lsl r5
    1750:	00018e0e 	andeq	r8, r1, lr, lsl #28
    1754:	10000500 	andne	r0, r0, r0, lsl #10
    1758:	00000bd4 	ldrdeq	r0, [r0], -r4
    175c:	05093f01 	streq	r3, [r9, #-3841]	; 0xfffff0ff
    1760:	03050000 	movweq	r0, #20480	; 0x5000
    1764:	20003a98 	mulcs	r0, r8, sl
    1768:	000c5b11 	andeq	r5, ip, r1, lsl fp
    176c:	ec760100 	ldfe	f0, [r6], #-0
    1770:	58200016 	stmdapl	r0!, {r1, r2, r4}
    1774:	01000001 	tsteq	r0, r1
    1778:	00055f9c 	muleq	r5, ip, pc	; <UNPREDICTABLE>
    177c:	0c651200 	sfmeq	f1, 2, [r5], #-0
    1780:	76010000 	strvc	r0, [r1], -r0
    1784:	00000162 	andeq	r0, r0, r2, ror #2
    1788:	0f6c9102 	svceq	0x006c9102
    178c:	0000084f 	andeq	r0, r0, pc, asr #16
    1790:	012e7701 			; <UNDEFINED> instruction: 0x012e7701
    1794:	03050000 	movweq	r0, #20480	; 0x5000
    1798:	200077a4 	andcs	r7, r0, r4, lsr #15
    179c:	04171300 	ldreq	r1, [r7], #-768	; 0xfffffd00
    17a0:	40010000 	andmi	r0, r1, r0
    17a4:	200014e0 	andcs	r1, r0, r0, ror #9
    17a8:	0000020c 	andeq	r0, r0, ip, lsl #4
    17ac:	e40f9c01 	str	r9, [pc], #-3073	; 17b4 <startup-0x1fffe84c>
    17b0:	0100000c 	tsteq	r0, ip
    17b4:	00009e42 	andeq	r9, r0, r2, asr #28
    17b8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    17bc:	000cee0f 	andeq	lr, ip, pc, lsl #28
    17c0:	9e450100 	dvflss	f0, f5, f0
    17c4:	02000000 	andeq	r0, r0, #0
    17c8:	e40f7091 	str	r7, [pc], #-145	; 17d0 <startup-0x1fffe830>
    17cc:	0100000a 	tsteq	r0, sl
    17d0:	00009e48 	andeq	r9, r0, r8, asr #28
    17d4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    17d8:	000a050f 	andeq	r0, sl, pc, lsl #10
    17dc:	9e4c0100 	dvflse	f0, f4, f0
    17e0:	02000000 	andeq	r0, r0, #0
    17e4:	0e0f6891 	mcreq	8, 0, r6, cr15, cr1, {4}
    17e8:	0100000d 	tsteq	r0, sp
    17ec:	00009e4f 	andeq	r9, r0, pc, asr #28
    17f0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    17f4:	000aa20f 	andeq	sl, sl, pc, lsl #4
    17f8:	9e520100 	rdflss	f0, f2, f0
    17fc:	02000000 	andeq	r0, r0, #0
    1800:	ba0f6091 	blt	3d9a4c <startup-0x1fc265b4>
    1804:	0100000c 	tsteq	r0, ip
    1808:	00009e57 	andeq	r9, r0, r7, asr lr
    180c:	5c910200 	lfmpl	f0, 4, [r1], {0}
    1810:	000d180f 	andeq	r1, sp, pc, lsl #16
    1814:	9e5a0100 	rdflse	f0, f2, f0
    1818:	02000000 	andeq	r0, r0, #0
    181c:	220f5891 	andcs	r5, pc, #9502720	; 0x910000
    1820:	0100000d 	tsteq	r0, sp
    1824:	00009e5d 	andeq	r9, r0, sp, asr lr
    1828:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    182c:	000a2b0f 	andeq	r2, sl, pc, lsl #22
    1830:	9e610100 	powlss	f0, f1, f0
    1834:	02000000 	andeq	r0, r0, #0
    1838:	6f0f5091 	svcvs	0x000f5091
    183c:	0100000a 	tsteq	r0, sl
    1840:	00009e64 	andeq	r9, r0, r4, ror #28
    1844:	4c910200 	lfmmi	f0, 4, [r1], {0}
    1848:	000a790f 	andeq	r7, sl, pc, lsl #18
    184c:	9e670100 	powlss	f0, f7, f0
    1850:	02000000 	andeq	r0, r0, #0
    1854:	370f4891 			; <UNDEFINED> instruction: 0x370f4891
    1858:	0100000d 	tsteq	r0, sp
    185c:	00009e6b 	andeq	r9, r0, fp, ror #28
    1860:	44910200 	ldrmi	r0, [r1], #512	; 0x200
    1864:	000bbf0f 	andeq	fp, fp, pc, lsl #30
    1868:	9e6e0100 	powlse	f0, f6, f0
    186c:	02000000 	andeq	r0, r0, #0
    1870:	980f4091 	stmdals	pc, {r0, r4, r7, lr}	; <UNPREDICTABLE>
    1874:	0100000a 	tsteq	r0, sl
    1878:	00009e71 	andeq	r9, r0, r1, ror lr
    187c:	bc910300 	ldclt	3, cr0, [r1], {0}
    1880:	9800007f 	stmdals	r0, {r0, r1, r2, r3, r4, r5, r6}
    1884:	04000004 	streq	r0, [r0], #-4
    1888:	00050000 	andeq	r0, r5, r0
    188c:	81010400 	tsthi	r1, r0, lsl #8
    1890:	0c000000 	stceq	0, cr0, [r0], {-0}
    1894:	00000f05 	andeq	r0, r0, r5, lsl #30
    1898:	20001844 	andcs	r1, r0, r4, asr #16
    189c:	00000238 	andeq	r0, r0, r8, lsr r2
    18a0:	000007c8 	andeq	r0, r0, r8, asr #15
    18a4:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
    18a8:	0000004e 	andeq	r0, r0, lr, asr #32
    18ac:	00030603 	andeq	r0, r3, r3, lsl #12
    18b0:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
    18b4:	00000000 	andeq	r0, r0, r0
    18b8:	00065f03 	andeq	r5, r6, r3, lsl #30
    18bc:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
    18c0:	04000000 	streq	r0, [r0], #-0
    18c4:	00119c03 	andseq	r9, r1, r3, lsl #24
    18c8:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
    18cc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    18d0:	07040400 	streq	r0, [r4, -r0, lsl #8]
    18d4:	0000032a 	andeq	r0, r0, sl, lsr #6
    18d8:	005b0405 	subseq	r0, fp, r5, lsl #8
    18dc:	01040000 	mrseq	r0, (UNDEF: 4)
    18e0:	00044108 	andeq	r4, r4, r8, lsl #2
    18e4:	12ee0600 	rscne	r0, lr, #0, 12
    18e8:	0a020000 	beq	818f0 <startup-0x1ff7e710>
    18ec:	00000021 	andeq	r0, r0, r1, lsr #32
    18f0:	00001607 	andeq	r1, r0, r7, lsl #12
    18f4:	06030c00 	streq	r0, [r3], -r0, lsl #24
    18f8:	0000009e 	muleq	r0, lr, r0
    18fc:	00052c03 	andeq	r2, r5, r3, lsl #24
    1900:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
    1904:	00000000 	andeq	r0, r0, r0
    1908:	00001d03 	andeq	r1, r0, r3, lsl #26
    190c:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
    1910:	04000000 	streq	r0, [r0], #-0
    1914:	00001203 	andeq	r1, r0, r3, lsl #4
    1918:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
    191c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1920:	62040500 	andvs	r0, r4, #0, 10
    1924:	06000000 	streq	r0, [r0], -r0
    1928:	00000fd7 	ldrdeq	r0, [r0], -r7
    192c:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
    1930:	24070000 	strcs	r0, [r7], #-0
    1934:	24000006 	strcs	r0, [r0], #-6
    1938:	01280604 			; <UNDEFINED> instruction: 0x01280604
    193c:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    1940:	04000003 	streq	r0, [r0], #-3
    1944:	00012807 	andeq	r2, r1, r7, lsl #16
    1948:	30030000 	andcc	r0, r3, r0
    194c:	04000006 	streq	r0, [r0], #-6
    1950:	00012e08 	andeq	r2, r1, r8, lsl #28
    1954:	97030400 	strls	r0, [r3, -r0, lsl #8]
    1958:	04000005 	streq	r0, [r0], #-5
    195c:	00012e09 	andeq	r2, r1, r9, lsl #28
    1960:	c3030800 	movwgt	r0, #14336	; 0x3800
    1964:	04000005 	streq	r0, [r0], #-5
    1968:	0001460c 	andeq	r4, r1, ip, lsl #12
    196c:	ff030c00 			; <UNDEFINED> instruction: 0xff030c00
    1970:	04000002 	streq	r0, [r0], #-2
    1974:	0001460d 	andeq	r4, r1, sp, lsl #12
    1978:	f0031000 			; <UNDEFINED> instruction: 0xf0031000
    197c:	04000003 	streq	r0, [r0], #-3
    1980:	00012e10 	andeq	r2, r1, r0, lsl lr
    1984:	52031400 	andpl	r1, r3, #0, 8
    1988:	04000000 	streq	r0, [r0], #-0
    198c:	00012e11 	andeq	r2, r1, r1, lsl lr
    1990:	6f031800 	svcvs	0x00031800
    1994:	04000003 	streq	r0, [r0], #-3
    1998:	00012e12 	andeq	r2, r1, r2, lsl lr
    199c:	7f031c00 	svcvc	0x00031c00
    19a0:	04000003 	streq	r0, [r0], #-3
    19a4:	00012e13 	andeq	r2, r1, r3, lsl lr
    19a8:	05002000 	streq	r2, [r0, #-0]
    19ac:	0000a404 	andeq	sl, r0, r4, lsl #8
    19b0:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
    19b4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    19b8:	00014009 	andeq	r4, r1, r9
    19bc:	01400a00 	cmpeq	r0, r0, lsl #20
    19c0:	05000000 	streq	r0, [r0, #-0]
    19c4:	0000af04 	andeq	sl, r0, r4, lsl #30
    19c8:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
    19cc:	06000001 	streq	r0, [r0], -r1
    19d0:	00000625 	andeq	r0, r0, r5, lsr #12
    19d4:	00af1504 	adceq	r1, pc, r4, lsl #10
    19d8:	620b0000 	andvs	r0, fp, #0
    19dc:	62000001 	andvs	r0, r0, #1
    19e0:	0c000001 	stceq	0, cr0, [r0], {1}
    19e4:	4c040500 	cfstr32mi	mvfx0, [r4], {-0}
    19e8:	0d000001 	stceq	0, cr0, [r0, #-4]
    19ec:	000004c4 	andeq	r0, r0, r4, asr #9
    19f0:	01571c04 	cmpeq	r7, r4, lsl #24
    19f4:	b50d0000 	strlt	r0, [sp, #-0]
    19f8:	04000003 	streq	r0, [r0], #-3
    19fc:	00012e1d 	andeq	r2, r1, sp, lsl lr
    1a00:	005b0b00 	subseq	r0, fp, r0, lsl #22
    1a04:	018e0000 	orreq	r0, lr, r0
    1a08:	8e0e0000 	cdphi	0, 0, cr0, cr14, cr0, {0}
    1a0c:	35000001 	strcc	r0, [r0, #-1]
    1a10:	07040400 	streq	r0, [r4, -r0, lsl #8]
    1a14:	0000039c 	muleq	r0, ip, r3
    1a18:	000d810f 	andeq	r8, sp, pc, lsl #2
    1a1c:	7e030500 	cfsh32vc	mvfx0, mvfx3, #0
    1a20:	05000001 	streq	r0, [r0, #-1]
    1a24:	0077a803 	rsbseq	sl, r7, r3, lsl #16
    1a28:	0f330f20 	svceq	0x00330f20
    1a2c:	03060000 	movweq	r0, #24576	; 0x6000
    1a30:	0000017e 	andeq	r0, r0, lr, ror r1
    1a34:	77e00305 	strbvc	r0, [r0, r5, lsl #6]!
    1a38:	8b0f2000 	blhi	3c9a40 <startup-0x1fc365c0>
    1a3c:	0700000e 	streq	r0, [r0, -lr]
    1a40:	00017e03 	andeq	r7, r1, r3, lsl #28
    1a44:	18030500 	stmdane	r3, {r8, sl}
    1a48:	0f200078 	svceq	0x00200078
    1a4c:	00000e24 	andeq	r0, r0, r4, lsr #28
    1a50:	017e0308 	cmneq	lr, r8, lsl #6
    1a54:	03050000 	movweq	r0, #20480	; 0x5000
    1a58:	20007850 	andcs	r7, r0, r0, asr r8
    1a5c:	000e9d0f 	andeq	r9, lr, pc, lsl #26
    1a60:	7e030900 	vmlavc.f16	s0, s6, s0	; <UNPREDICTABLE>
    1a64:	05000001 	streq	r0, [r0, #-1]
    1a68:	00788803 	rsbseq	r8, r8, r3, lsl #16
    1a6c:	0dcf0f20 	stcleq	15, cr0, [pc, #128]	; 1af4 <startup-0x1fffe50c>
    1a70:	030a0000 	movweq	r0, #40960	; 0xa000
    1a74:	0000017e 	andeq	r0, r0, lr, ror r1
    1a78:	78c00305 	stmiavc	r0, {r0, r2, r8, r9}^
    1a7c:	440f2000 	strmi	r2, [pc], #-0	; 1a84 <startup-0x1fffe57c>
    1a80:	0b00000f 	bleq	1ac4 <startup-0x1fffe53c>
    1a84:	00017e03 	andeq	r7, r1, r3, lsl #28
    1a88:	f8030500 			; <UNDEFINED> instruction: 0xf8030500
    1a8c:	0f200078 	svceq	0x00200078
    1a90:	00000df9 	strdeq	r0, [r0], -r9
    1a94:	017e030c 	cmneq	lr, ip, lsl #6
    1a98:	03050000 	movweq	r0, #20480	; 0x5000
    1a9c:	20007930 	andcs	r7, r0, r0, lsr r9
    1aa0:	000e360f 	andeq	r3, lr, pc, lsl #12
    1aa4:	7e030d00 	cdpvc	13, 0, cr0, cr3, cr0, {0}
    1aa8:	05000001 	streq	r0, [r0, #-1]
    1aac:	00796803 	rsbseq	r6, r9, r3, lsl #16
    1ab0:	0ed21020 	cdpeq	0, 13, cr1, cr2, cr0, {1}
    1ab4:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    1ab8:	0000009e 	muleq	r0, lr, r0
    1abc:	3bd40305 	blcc	ff5026d8 <firstTime.4040+0xdf4f9330>
    1ac0:	5e102000 	cdppl	0, 1, cr2, cr0, cr0, {0}
    1ac4:	0100000d 	tsteq	r0, sp
    1ac8:	00009e0f 	andeq	r9, r0, pc, lsl #28
    1acc:	00030500 	andeq	r0, r3, r0, lsl #10
    1ad0:	1020003b 	eorne	r0, r0, fp, lsr r0
    1ad4:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    1ad8:	009e1001 	addseq	r1, lr, r1
    1adc:	03050000 	movweq	r0, #20480	; 0x5000
    1ae0:	20003c00 	andcs	r3, r0, r0, lsl #24
    1ae4:	000d5210 	andeq	r5, sp, r0, lsl r2
    1ae8:	9e110100 	muflss	f0, f1, f0
    1aec:	05000000 	streq	r0, [r0, #-0]
    1af0:	003c1003 	eorseq	r1, ip, r3
    1af4:	0e531020 	cdpeq	0, 5, cr1, cr3, cr0, {1}
    1af8:	12010000 	andne	r0, r1, #0
    1afc:	0000009e 	muleq	r0, lr, r0
    1b00:	3b740305 	blcc	1d0271c <startup-0x1e2fd8e4>
    1b04:	ba102000 	blt	409b0c <startup-0x1fbf64f4>
    1b08:	0100000e 	tsteq	r0, lr
    1b0c:	00009e13 	andeq	r9, r0, r3, lsl lr
    1b10:	04030500 	streq	r0, [r3], #-1280	; 0xfffffb00
    1b14:	1020003b 	eorne	r0, r0, fp, lsr r0
    1b18:	00000ded 	andeq	r0, r0, sp, ror #27
    1b1c:	009e1401 	addseq	r1, lr, r1, lsl #8
    1b20:	03050000 	movweq	r0, #20480	; 0x5000
    1b24:	20003b9c 	mulcs	r0, ip, fp
    1b28:	000e4810 	andeq	r4, lr, r0, lsl r8
    1b2c:	9e150100 	muflss	f0, f5, f0
    1b30:	05000000 	streq	r0, [r0, #-0]
    1b34:	003bd803 	eorseq	sp, fp, r3, lsl #16
    1b38:	0ede1020 	cdpeq	0, 13, cr1, cr14, cr0, {1}
    1b3c:	16010000 	strne	r0, [r1], -r0
    1b40:	0000009e 	muleq	r0, lr, r0
    1b44:	3bc40305 	blcc	ff102760 <firstTime.4040+0xdf0f93b8>
    1b48:	15102000 	ldrne	r2, [r0, #-0]
    1b4c:	0100000e 	tsteq	r0, lr
    1b50:	00006218 	andeq	r6, r0, r8, lsl r2
    1b54:	50030500 	andpl	r0, r3, r0, lsl #10
    1b58:	1020003b 	eorne	r0, r0, fp, lsr r0
    1b5c:	00000d69 	andeq	r0, r0, r9, ror #26
    1b60:	00621901 	rsbeq	r1, r2, r1, lsl #18
    1b64:	03050000 	movweq	r0, #20480	; 0x5000
    1b68:	20003be8 	andcs	r3, r0, r8, ror #23
    1b6c:	000e5e10 	andeq	r5, lr, r0, lsl lr
    1b70:	621a0100 	andsvs	r0, sl, #0, 2
    1b74:	05000000 	streq	r0, [r0, #-0]
    1b78:	003b7803 	eorseq	r7, fp, r3, lsl #16
    1b7c:	0dbf1020 	ldceq	0, cr1, [pc, #128]!	; 1c04 <startup-0x1fffe3fc>
    1b80:	1b010000 	blne	41b88 <startup-0x1ffbe478>
    1b84:	00000062 	andeq	r0, r0, r2, rrx
    1b88:	3b440305 	blcc	11027a4 <startup-0x1eefd85c>
    1b8c:	a3102000 	tstge	r0, #0
    1b90:	0100000d 	tsteq	r0, sp
    1b94:	0000621c 	andeq	r6, r0, ip, lsl r2
    1b98:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
    1b9c:	1020003b 	eorne	r0, r0, fp, lsr r0
    1ba0:	00000e6c 	andeq	r0, r0, ip, ror #28
    1ba4:	00621d01 	rsbeq	r1, r2, r1, lsl #26
    1ba8:	03050000 	movweq	r0, #20480	; 0x5000
    1bac:	20003b90 	mulcs	r0, r0, fp
    1bb0:	000e7b10 	andeq	r7, lr, r0, lsl fp
    1bb4:	621e0100 	andsvs	r0, lr, #0, 2
    1bb8:	05000000 	streq	r0, [r0, #-0]
    1bbc:	003b8403 	eorseq	r8, fp, r3, lsl #8
    1bc0:	0d931020 	ldceq	0, cr1, [r3, #128]	; 0x80
    1bc4:	1f010000 	svcne	0x00010000
    1bc8:	00000062 	andeq	r0, r0, r2, rrx
    1bcc:	3b5c0305 	blcc	17027e8 <startup-0x1e8fd818>
    1bd0:	f6102000 			; <UNDEFINED> instruction: 0xf6102000
    1bd4:	0100000e 	tsteq	r0, lr
    1bd8:	00006220 	andeq	r6, r0, r0, lsr #4
    1bdc:	c8030500 	stmdagt	r3, {r8, sl}
    1be0:	1020003b 	eorne	r0, r0, fp, lsr r0
    1be4:	00000d78 	andeq	r0, r0, r8, ror sp
    1be8:	014c2301 	cmpeq	ip, r1, lsl #6
    1bec:	03050000 	movweq	r0, #20480	; 0x5000
    1bf0:	20003ba0 	andcs	r3, r0, r0, lsr #23
    1bf4:	000ec610 	andeq	ip, lr, r0, lsl r6
    1bf8:	a4240100 	strtge	r0, [r4], #-256	; 0xffffff00
    1bfc:	05000000 	streq	r0, [r0, #-0]
    1c00:	003bdc03 	eorseq	sp, fp, r3, lsl #24
    1c04:	0f561020 	svceq	0x00561020
    1c08:	25010000 	strcs	r0, [r1, #-0]
    1c0c:	000000a4 	andeq	r0, r0, r4, lsr #1
    1c10:	3b380305 	blcc	e0282c <startup-0x1f1fd7d4>
    1c14:	e1102000 	tst	r0, r0
    1c18:	0100000d 	tsteq	r0, sp
    1c1c:	0000a426 	andeq	sl, r0, r6, lsr #8
    1c20:	04030500 	streq	r0, [r3], #-1280	; 0xfffffb00
    1c24:	1020003c 	eorne	r0, r0, ip, lsr r0
    1c28:	00000eae 	andeq	r0, r0, lr, lsr #29
    1c2c:	00a42701 	adceq	r2, r4, r1, lsl #14
    1c30:	03050000 	movweq	r0, #20480	; 0x5000
    1c34:	20003b68 	andcs	r3, r0, r8, ror #22
    1c38:	0000a40b 	andeq	sl, r0, fp, lsl #8
    1c3c:	0003c500 	andeq	ip, r3, r0, lsl #10
    1c40:	018e0e00 	orreq	r0, lr, r0, lsl #28
    1c44:	00030000 	andeq	r0, r3, r0
    1c48:	000eea10 	andeq	lr, lr, r0, lsl sl
    1c4c:	b5280100 	strlt	r0, [r8, #-256]!	; 0xffffff00
    1c50:	05000003 	streq	r0, [r0, #-3]
    1c54:	003b0803 	eorseq	r0, fp, r3, lsl #16
    1c58:	0e0a1120 	adfeqep	f1, f2, f0
    1c5c:	4c010000 	stcmi	0, cr0, [r1], {-0}
    1c60:	20001984 	andcs	r1, r0, r4, lsl #19
    1c64:	000000f8 	strdeq	r0, [r0], -r8
    1c68:	040b9c01 	streq	r9, [fp], #-3073	; 0xfffff3ff
    1c6c:	78120000 	ldmdavc	r2, {}	; <UNPREDICTABLE>
    1c70:	0100000d 	tsteq	r0, sp
    1c74:	0001624c 	andeq	r6, r1, ip, asr #4
    1c78:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1c7c:	00084f0f 	andeq	r4, r8, pc, lsl #30
    1c80:	2e4d0100 	dvfcse	f0, f5, f0
    1c84:	05000001 	streq	r0, [r0, #-1]
    1c88:	0079a003 	rsbseq	sl, r9, r3
    1c8c:	17130020 	ldrne	r0, [r3, -r0, lsr #32]
    1c90:	01000004 	tsteq	r0, r4
    1c94:	00184429 	andseq	r4, r8, r9, lsr #8
    1c98:	00014020 	andeq	r4, r1, r0, lsr #32
    1c9c:	0f9c0100 	svceq	0x009c0100
    1ca0:	00000ce4 	andeq	r0, r0, r4, ror #25
    1ca4:	009e2b01 	addseq	r2, lr, r1, lsl #22
    1ca8:	91020000 	mrsls	r0, (UNDEF: 2)
    1cac:	0cee0f74 	stcleq	15, cr0, [lr], #464	; 0x1d0
    1cb0:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    1cb4:	0000009e 	muleq	r0, lr, r0
    1cb8:	0f709102 	svceq	0x00709102
    1cbc:	00000ae4 	andeq	r0, r0, r4, ror #21
    1cc0:	009e3101 	addseq	r3, lr, r1, lsl #2
    1cc4:	91020000 	mrsls	r0, (UNDEF: 2)
    1cc8:	0a050f6c 	beq	145a80 <startup-0x1feba580>
    1ccc:	35010000 	strcc	r0, [r1, #-0]
    1cd0:	0000009e 	muleq	r0, lr, r0
    1cd4:	0f689102 	svceq	0x00689102
    1cd8:	00000d0e 	andeq	r0, r0, lr, lsl #26
    1cdc:	009e3801 	addseq	r3, lr, r1, lsl #16
    1ce0:	91020000 	mrsls	r0, (UNDEF: 2)
    1ce4:	0aa20f64 	beq	fe885a7c <firstTime.4040+0xde87c6d4>
    1ce8:	3b010000 	blcc	41cf0 <startup-0x1ffbe310>
    1cec:	0000009e 	muleq	r0, lr, r0
    1cf0:	0f609102 	svceq	0x00609102
    1cf4:	00000cba 			; <UNDEFINED> instruction: 0x00000cba
    1cf8:	009e4001 	addseq	r4, lr, r1
    1cfc:	91020000 	mrsls	r0, (UNDEF: 2)
    1d00:	0d180f5c 	ldceq	15, cr0, [r8, #-368]	; 0xfffffe90
    1d04:	43010000 	movwmi	r0, #4096	; 0x1000
    1d08:	0000009e 	muleq	r0, lr, r0
    1d0c:	0f589102 	svceq	0x00589102
    1d10:	00000d22 	andeq	r0, r0, r2, lsr #26
    1d14:	009e4601 	addseq	r4, lr, r1, lsl #12
    1d18:	91020000 	mrsls	r0, (UNDEF: 2)
    1d1c:	de000054 	mcrle	0, 0, r0, cr0, cr4, {2}
    1d20:	04000004 	streq	r0, [r0], #-4
    1d24:	00060000 	andeq	r0, r6, r0
    1d28:	81010400 	tsthi	r1, r0, lsl #8
    1d2c:	0c000000 	stceq	0, cr0, [r0], {-0}
    1d30:	00001039 	andeq	r1, r0, r9, lsr r0
    1d34:	20001a7c 	andcs	r1, r0, ip, ror sl
    1d38:	000002ac 	andeq	r0, r0, ip, lsr #5
    1d3c:	0000092d 	andeq	r0, r0, sp, lsr #18
    1d40:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
    1d44:	0000004e 	andeq	r0, r0, lr, asr #32
    1d48:	00030603 	andeq	r0, r3, r3, lsl #12
    1d4c:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
    1d50:	00000000 	andeq	r0, r0, r0
    1d54:	00065f03 	andeq	r5, r6, r3, lsl #30
    1d58:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
    1d5c:	04000000 	streq	r0, [r0], #-0
    1d60:	00119c03 	andseq	r9, r1, r3, lsl #24
    1d64:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
    1d68:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1d6c:	07040400 	streq	r0, [r4, -r0, lsl #8]
    1d70:	0000032a 	andeq	r0, r0, sl, lsr #6
    1d74:	005b0405 	subseq	r0, fp, r5, lsl #8
    1d78:	01040000 	mrseq	r0, (UNDEF: 4)
    1d7c:	00044108 	andeq	r4, r4, r8, lsl #2
    1d80:	12ee0600 	rscne	r0, lr, #0, 12
    1d84:	0a020000 	beq	81d8c <startup-0x1ff7e274>
    1d88:	00000021 	andeq	r0, r0, r1, lsr #32
    1d8c:	00001607 	andeq	r1, r0, r7, lsl #12
    1d90:	06030c00 	streq	r0, [r3], -r0, lsl #24
    1d94:	0000009e 	muleq	r0, lr, r0
    1d98:	00052c03 	andeq	r2, r5, r3, lsl #24
    1d9c:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
    1da0:	00000000 	andeq	r0, r0, r0
    1da4:	00001d03 	andeq	r1, r0, r3, lsl #26
    1da8:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
    1dac:	04000000 	streq	r0, [r0], #-0
    1db0:	00001203 	andeq	r1, r0, r3, lsl #4
    1db4:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
    1db8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1dbc:	62040500 	andvs	r0, r4, #0, 10
    1dc0:	06000000 	streq	r0, [r0], -r0
    1dc4:	00000fd7 	ldrdeq	r0, [r0], -r7
    1dc8:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
    1dcc:	24070000 	strcs	r0, [r7], #-0
    1dd0:	24000006 	strcs	r0, [r0], #-6
    1dd4:	01280604 			; <UNDEFINED> instruction: 0x01280604
    1dd8:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    1ddc:	04000003 	streq	r0, [r0], #-3
    1de0:	00012807 	andeq	r2, r1, r7, lsl #16
    1de4:	30030000 	andcc	r0, r3, r0
    1de8:	04000006 	streq	r0, [r0], #-6
    1dec:	00012e08 	andeq	r2, r1, r8, lsl #28
    1df0:	97030400 	strls	r0, [r3, -r0, lsl #8]
    1df4:	04000005 	streq	r0, [r0], #-5
    1df8:	00012e09 	andeq	r2, r1, r9, lsl #28
    1dfc:	c3030800 	movwgt	r0, #14336	; 0x3800
    1e00:	04000005 	streq	r0, [r0], #-5
    1e04:	0001460c 	andeq	r4, r1, ip, lsl #12
    1e08:	ff030c00 			; <UNDEFINED> instruction: 0xff030c00
    1e0c:	04000002 	streq	r0, [r0], #-2
    1e10:	0001460d 	andeq	r4, r1, sp, lsl #12
    1e14:	f0031000 			; <UNDEFINED> instruction: 0xf0031000
    1e18:	04000003 	streq	r0, [r0], #-3
    1e1c:	00012e10 	andeq	r2, r1, r0, lsl lr
    1e20:	52031400 	andpl	r1, r3, #0, 8
    1e24:	04000000 	streq	r0, [r0], #-0
    1e28:	00012e11 	andeq	r2, r1, r1, lsl lr
    1e2c:	6f031800 	svcvs	0x00031800
    1e30:	04000003 	streq	r0, [r0], #-3
    1e34:	00012e12 	andeq	r2, r1, r2, lsl lr
    1e38:	7f031c00 	svcvc	0x00031c00
    1e3c:	04000003 	streq	r0, [r0], #-3
    1e40:	00012e13 	andeq	r2, r1, r3, lsl lr
    1e44:	05002000 	streq	r2, [r0, #-0]
    1e48:	0000a404 	andeq	sl, r0, r4, lsl #8
    1e4c:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
    1e50:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1e54:	00014009 	andeq	r4, r1, r9
    1e58:	01400a00 	cmpeq	r0, r0, lsl #20
    1e5c:	05000000 	streq	r0, [r0, #-0]
    1e60:	0000af04 	andeq	sl, r0, r4, lsl #30
    1e64:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
    1e68:	06000001 	streq	r0, [r0], -r1
    1e6c:	00000625 	andeq	r0, r0, r5, lsr #12
    1e70:	00af1504 	adceq	r1, pc, r4, lsl #10
    1e74:	620b0000 	andvs	r0, fp, #0
    1e78:	62000001 	andvs	r0, r0, #1
    1e7c:	0c000001 	stceq	0, cr0, [r0], {1}
    1e80:	4c040500 	cfstr32mi	mvfx0, [r4], {-0}
    1e84:	0d000001 	stceq	0, cr0, [r0, #-4]
    1e88:	000004c4 	andeq	r0, r0, r4, asr #9
    1e8c:	01571c04 	cmpeq	r7, r4, lsl #24
    1e90:	b50d0000 	strlt	r0, [sp, #-0]
    1e94:	04000003 	streq	r0, [r0], #-3
    1e98:	00012e1d 	andeq	r2, r1, sp, lsl lr
    1e9c:	005b0b00 	subseq	r0, fp, r0, lsl #22
    1ea0:	018e0000 	orreq	r0, lr, r0
    1ea4:	8e0e0000 	cdphi	0, 0, cr0, cr14, cr0, {0}
    1ea8:	35000001 	strcc	r0, [r0, #-1]
    1eac:	07040400 	streq	r0, [r4, -r0, lsl #8]
    1eb0:	0000039c 	muleq	r0, ip, r3
    1eb4:	000d810f 	andeq	r8, sp, pc, lsl #2
    1eb8:	7e030500 	cfsh32vc	mvfx0, mvfx3, #0
    1ebc:	05000001 	streq	r0, [r0, #-1]
    1ec0:	0079a403 	rsbseq	sl, r9, r3, lsl #8
    1ec4:	0f330f20 	svceq	0x00330f20
    1ec8:	03060000 	movweq	r0, #24576	; 0x6000
    1ecc:	0000017e 	andeq	r0, r0, lr, ror r1
    1ed0:	79dc0305 	ldmibvc	ip, {r0, r2, r8, r9}^
    1ed4:	8b0f2000 	blhi	3c9edc <startup-0x1fc36124>
    1ed8:	0700000e 	streq	r0, [r0, -lr]
    1edc:	00017e03 	andeq	r7, r1, r3, lsl #28
    1ee0:	14030500 	strne	r0, [r3], #-1280	; 0xfffffb00
    1ee4:	0f20007a 	svceq	0x0020007a
    1ee8:	00000e24 	andeq	r0, r0, r4, lsr #28
    1eec:	017e0308 	cmneq	lr, r8, lsl #6
    1ef0:	03050000 	movweq	r0, #20480	; 0x5000
    1ef4:	20007a4c 	andcs	r7, r0, ip, asr #20
    1ef8:	000e9d0f 	andeq	r9, lr, pc, lsl #26
    1efc:	7e030900 	vmlavc.f16	s0, s6, s0	; <UNPREDICTABLE>
    1f00:	05000001 	streq	r0, [r0, #-1]
    1f04:	007a8403 	rsbseq	r8, sl, r3, lsl #8
    1f08:	0dcf0f20 	stcleq	15, cr0, [pc, #128]	; 1f90 <startup-0x1fffe070>
    1f0c:	030a0000 	movweq	r0, #40960	; 0xa000
    1f10:	0000017e 	andeq	r0, r0, lr, ror r1
    1f14:	7abc0305 	bvc	fef02b30 <firstTime.4040+0xdeef9788>
    1f18:	440f2000 	strmi	r2, [pc], #-0	; 1f20 <startup-0x1fffe0e0>
    1f1c:	0b00000f 	bleq	1f60 <startup-0x1fffe0a0>
    1f20:	00017e03 	andeq	r7, r1, r3, lsl #28
    1f24:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
    1f28:	0f20007a 	svceq	0x0020007a
    1f2c:	00000df9 	strdeq	r0, [r0], -r9
    1f30:	017e030c 	cmneq	lr, ip, lsl #6
    1f34:	03050000 	movweq	r0, #20480	; 0x5000
    1f38:	20007b2c 	andcs	r7, r0, ip, lsr #22
    1f3c:	000e360f 	andeq	r3, lr, pc, lsl #12
    1f40:	7e030d00 	cdpvc	13, 0, cr0, cr3, cr0, {0}
    1f44:	05000001 	streq	r0, [r0, #-1]
    1f48:	007b6403 	rsbseq	r6, fp, r3, lsl #8
    1f4c:	10151020 	andsne	r1, r5, r0, lsr #32
    1f50:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    1f54:	0000009e 	muleq	r0, lr, r0
    1f58:	3c580305 	mrrccc	3, 0, r0, r8, cr5
    1f5c:	84102000 	ldrhi	r2, [r0], #-0
    1f60:	0100000f 	tsteq	r0, pc
    1f64:	00009e0f 	andeq	r9, r0, pc, lsl #28
    1f68:	f0030500 			; <UNDEFINED> instruction: 0xf0030500
    1f6c:	1020003c 	eorne	r0, r0, ip, lsr r0
    1f70:	00000fb3 			; <UNDEFINED> instruction: 0x00000fb3
    1f74:	009e1001 	addseq	r1, lr, r1
    1f78:	03050000 	movweq	r0, #20480	; 0x5000
    1f7c:	20003cc8 	andcs	r3, r0, r8, asr #25
    1f80:	000f9110 	andeq	r9, pc, r0, lsl r1	; <UNPREDICTABLE>
    1f84:	9e110100 	muflss	f0, f1, f0
    1f88:	05000000 	streq	r0, [r0, #-0]
    1f8c:	003cd403 	eorseq	sp, ip, r3, lsl #8
    1f90:	0fe11020 	svceq	0x00e11020
    1f94:	12010000 	andne	r0, r1, #0
    1f98:	0000009e 	muleq	r0, lr, r0
    1f9c:	3c440305 	mcrrcc	3, 0, r0, r4, cr5
    1fa0:	0b102000 	bleq	409fa8 <startup-0x1fbf6058>
    1fa4:	01000010 	tsteq	r0, r0, lsl r0
    1fa8:	00009e13 	andeq	r9, r0, r3, lsl lr
    1fac:	cc030500 	cfstr32gt	mvfx0, [r3], {-0}
    1fb0:	1020003c 	eorne	r0, r0, ip, lsr r0
    1fb4:	00000f9f 	muleq	r0, pc, pc	; <UNPREDICTABLE>
    1fb8:	009e1401 	addseq	r1, lr, r1, lsl #8
    1fbc:	03050000 	movweq	r0, #20480	; 0x5000
    1fc0:	20003c54 	andcs	r3, r0, r4, asr ip
    1fc4:	00102310 	andseq	r2, r0, r0, lsl r3
    1fc8:	9e150100 	muflss	f0, f5, f0
    1fcc:	05000000 	streq	r0, [r0, #-0]
    1fd0:	003d0003 	eorseq	r0, sp, r3
    1fd4:	0f7a1020 	svceq	0x007a1020
    1fd8:	16010000 	strne	r0, [r1], -r0
    1fdc:	0000009e 	muleq	r0, lr, r0
    1fe0:	3cd00305 	ldclcc	3, cr0, [r0], {5}
    1fe4:	2c102000 	ldccs	0, cr2, [r0], {-0}
    1fe8:	01000010 	tsteq	r0, r0, lsl r0
    1fec:	00006218 	andeq	r6, r0, r8, lsl r2
    1ff0:	e4030500 	str	r0, [r3], #-1280	; 0xfffffb00
    1ff4:	1020003c 	eorne	r0, r0, ip, lsr r0
    1ff8:	0000106c 	andeq	r1, r0, ip, rrx
    1ffc:	00621901 	rsbeq	r1, r2, r1, lsl #18
    2000:	03050000 	movweq	r0, #20480	; 0x5000
    2004:	20003c5c 	andcs	r3, r0, ip, asr ip
    2008:	000fbd10 	andeq	fp, pc, r0, lsl sp	; <UNPREDICTABLE>
    200c:	621a0100 	andsvs	r0, sl, #0, 2
    2010:	05000000 	streq	r0, [r0, #-0]
    2014:	003d1c03 	eorseq	r1, sp, r3, lsl #24
    2018:	0f8d1020 	svceq	0x008d1020
    201c:	1b010000 	blne	42024 <startup-0x1ffbdfdc>
    2020:	00000062 	andeq	r0, r0, r2, rrx
    2024:	3ca40305 	stccc	3, cr0, [r4], #20
    2028:	07102000 	ldreq	r2, [r0, -r0]
    202c:	01000010 	tsteq	r0, r0, lsl r0
    2030:	0000621c 	andeq	r6, r0, ip, lsl r2
    2034:	10030500 	andne	r0, r3, r0, lsl #10
    2038:	1020003d 	eorne	r0, r0, sp, lsr r0
    203c:	00000fdd 	ldrdeq	r0, [r0], -sp
    2040:	00621d01 	rsbeq	r1, r2, r1, lsl #26
    2044:	03050000 	movweq	r0, #20480	; 0x5000
    2048:	20003c48 	andcs	r3, r0, r8, asr #24
    204c:	000f9b10 	andeq	r9, pc, r0, lsl fp	; <UNPREDICTABLE>
    2050:	621e0100 	andsvs	r0, lr, #0, 2
    2054:	05000000 	streq	r0, [r0, #-0]
    2058:	003cf403 	eorseq	pc, ip, r3, lsl #8
    205c:	0f761020 	svceq	0x00761020
    2060:	1f010000 	svcne	0x00010000
    2064:	00000062 	andeq	r0, r0, r2, rrx
    2068:	3c680305 	stclcc	3, cr0, [r8], #-20	; 0xffffffec
    206c:	1f102000 	svcne	0x00102000
    2070:	01000010 	tsteq	r0, r0, lsl r0
    2074:	00006220 	andeq	r6, r0, r0, lsr #4
    2078:	d8030500 	stmdale	r3, {r8, sl}
    207c:	1020003c 	eorne	r0, r0, ip, lsr r0
    2080:	00001065 	andeq	r1, r0, r5, rrx
    2084:	014c2301 	cmpeq	ip, r1, lsl #6
    2088:	03050000 	movweq	r0, #20480	; 0x5000
    208c:	20003c14 	andcs	r3, r0, r4, lsl ip
    2090:	000fd310 	andeq	sp, pc, r0, lsl r3	; <UNPREDICTABLE>
    2094:	a4240100 	strtge	r0, [r4], #-256	; 0xffffff00
    2098:	05000000 	streq	r0, [r0, #-0]
    209c:	003cbc03 	eorseq	fp, ip, r3, lsl #24
    20a0:	0f621020 	svceq	0x00621020
    20a4:	25010000 	strcs	r0, [r1, #-0]
    20a8:	000000a4 	andeq	r0, r0, r4, lsr #1
    20ac:	3c380305 	ldccc	3, cr0, [r8], #-20	; 0xffffffec
    20b0:	a9102000 	ldmdbge	r0, {sp}
    20b4:	0100000f 	tsteq	r0, pc
    20b8:	0000a426 	andeq	sl, r0, r6, lsr #8
    20bc:	b0030500 	andlt	r0, r3, r0, lsl #10
    20c0:	1020003c 	eorne	r0, r0, ip, lsr r0
    20c4:	00000fea 	andeq	r0, r0, sl, ror #31
    20c8:	00a42701 	adceq	r2, r4, r1, lsl #14
    20cc:	03050000 	movweq	r0, #20480	; 0x5000
    20d0:	20003d04 	andcs	r3, r0, r4, lsl #26
    20d4:	0000a40b 	andeq	sl, r0, fp, lsl #8
    20d8:	0003c500 	andeq	ip, r3, r0, lsl #10
    20dc:	018e0e00 	orreq	r0, lr, r0, lsl #28
    20e0:	00030000 	andeq	r0, r3, r0
    20e4:	000f6c10 	andeq	r6, pc, r0, lsl ip	; <UNPREDICTABLE>
    20e8:	b5280100 	strlt	r0, [r8, #-256]!	; 0xffffff00
    20ec:	05000003 	streq	r0, [r0, #-3]
    20f0:	003c7403 	eorseq	r7, ip, r3, lsl #8
    20f4:	0fc91120 	svceq	0x00c91120
    20f8:	67010000 	strvs	r0, [r1, -r0]
    20fc:	20001cb4 			; <UNDEFINED> instruction: 0x20001cb4
    2100:	00000074 	andeq	r0, r0, r4, ror r0
    2104:	041c9c01 	ldreq	r9, [ip], #-3073	; 0xfffff3ff
    2108:	c8120000 	ldmdagt	r2, {}	; <UNPREDICTABLE>
    210c:	01000006 	tsteq	r0, r6
    2110:	00016267 	andeq	r6, r1, r7, ror #4
    2114:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2118:	0003890f 	andeq	r8, r3, pc, lsl #18
    211c:	2e690100 	powcse	f0, f1, f0
    2120:	05000001 	streq	r0, [r0, #-1]
    2124:	0035a803 	eorseq	sl, r5, r3, lsl #16
    2128:	0ff40f20 	svceq	0x00f40f20
    212c:	6a010000 	bvs	42134 <startup-0x1ffbdecc>
    2130:	0000012e 	andeq	r0, r0, lr, lsr #2
    2134:	7ba00305 	blvc	fe802d50 <firstTime.4040+0xde7f99a8>
    2138:	11002000 	mrsne	r2, (UNDEF: 0)
    213c:	00000ffe 	strdeq	r0, [r0], -lr
    2140:	1bbc4c01 	blne	fef1514c <firstTime.4040+0xdef0bda4>
    2144:	00f82000 	rscseq	r2, r8, r0
    2148:	9c010000 	stcls	0, cr0, [r1], {-0}
    214c:	00000451 	andeq	r0, r0, r1, asr r4
    2150:	00106512 	andseq	r6, r0, r2, lsl r5
    2154:	624c0100 	subvs	r0, ip, #0, 2
    2158:	02000001 	andeq	r0, r0, #1
    215c:	4f0f6c91 	svcmi	0x000f6c91
    2160:	01000008 	tsteq	r0, r8
    2164:	00012e4d 	andeq	r2, r1, sp, asr #28
    2168:	9c030500 	cfstr32ls	mvfx0, [r3], {-0}
    216c:	0020007b 	eoreq	r0, r0, fp, ror r0
    2170:	00041713 	andeq	r1, r4, r3, lsl r7
    2174:	7c290100 	stfvcs	f0, [r9], #-0
    2178:	4020001a 	eormi	r0, r0, sl, lsl r0
    217c:	01000001 	tsteq	r0, r1
    2180:	0ce40f9c 	stcleq	15, cr0, [r4], #624	; 0x270
    2184:	2b010000 	blcs	4218c <startup-0x1ffbde74>
    2188:	0000009e 	muleq	r0, lr, r0
    218c:	0f749102 	svceq	0x00749102
    2190:	00000cee 	andeq	r0, r0, lr, ror #25
    2194:	009e2e01 	addseq	r2, lr, r1, lsl #28
    2198:	91020000 	mrsls	r0, (UNDEF: 2)
    219c:	0ae40f70 	beq	ff905f64 <firstTime.4040+0xdf8fcbbc>
    21a0:	31010000 	mrscc	r0, (UNDEF: 1)
    21a4:	0000009e 	muleq	r0, lr, r0
    21a8:	0f6c9102 	svceq	0x006c9102
    21ac:	00000a05 	andeq	r0, r0, r5, lsl #20
    21b0:	009e3501 	addseq	r3, lr, r1, lsl #10
    21b4:	91020000 	mrsls	r0, (UNDEF: 2)
    21b8:	0d0e0f68 	stceq	15, cr0, [lr, #-416]	; 0xfffffe60
    21bc:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    21c0:	0000009e 	muleq	r0, lr, r0
    21c4:	0f649102 	svceq	0x00649102
    21c8:	00000aa2 	andeq	r0, r0, r2, lsr #21
    21cc:	009e3b01 	addseq	r3, lr, r1, lsl #22
    21d0:	91020000 	mrsls	r0, (UNDEF: 2)
    21d4:	0cba0f60 	ldceq	15, cr0, [sl], #384	; 0x180
    21d8:	40010000 	andmi	r0, r1, r0
    21dc:	0000009e 	muleq	r0, lr, r0
    21e0:	0f5c9102 	svceq	0x005c9102
    21e4:	00000d18 	andeq	r0, r0, r8, lsl sp
    21e8:	009e4301 	addseq	r4, lr, r1, lsl #6
    21ec:	91020000 	mrsls	r0, (UNDEF: 2)
    21f0:	0d220f58 	stceq	15, cr0, [r2, #-352]!	; 0xfffffea0
    21f4:	46010000 	strmi	r0, [r1], -r0
    21f8:	0000009e 	muleq	r0, lr, r0
    21fc:	00549102 	subseq	r9, r4, r2, lsl #2
    2200:	00089f00 	andeq	r9, r8, r0, lsl #30
    2204:	00000400 	andeq	r0, r0, r0, lsl #8
    2208:	04000007 	streq	r0, [r0], #-7
    220c:	00008101 	andeq	r8, r0, r1, lsl #2
    2210:	115e0c00 	cmpne	lr, r0, lsl #24
    2214:	1d280000 	stcne	0, cr0, [r8, #-0]
    2218:	0e442000 	cdpeq	0, 4, cr2, cr4, cr0, {0}
    221c:	0a9d0000 	beq	fe742224 <firstTime.4040+0xde738e7c>
    2220:	0c020000 	stceq	0, cr0, [r2], {-0}
    2224:	004e0502 	subeq	r0, lr, r2, lsl #10
    2228:	06030000 	streq	r0, [r3], -r0
    222c:	02000003 	andeq	r0, r0, #3
    2230:	00004e07 	andeq	r4, r0, r7, lsl #28
    2234:	5f030000 	svcpl	0x00030000
    2238:	02000006 	andeq	r0, r0, #6
    223c:	00004e08 	andeq	r4, r0, r8, lsl #28
    2240:	9c030400 	cfstrsls	mvf0, [r3], {-0}
    2244:	02000011 	andeq	r0, r0, #17
    2248:	00005509 	andeq	r5, r0, r9, lsl #10
    224c:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    2250:	032a0704 			; <UNDEFINED> instruction: 0x032a0704
    2254:	04050000 	streq	r0, [r5], #-0
    2258:	0000005b 	andeq	r0, r0, fp, asr r0
    225c:	41080104 	tstmi	r8, r4, lsl #2
    2260:	06000004 	streq	r0, [r0], -r4
    2264:	000012ee 	andeq	r1, r0, lr, ror #5
    2268:	00210a02 	eoreq	r0, r1, r2, lsl #20
    226c:	16070000 	strne	r0, [r7], -r0
    2270:	0c000000 	stceq	0, cr0, [r0], {-0}
    2274:	009e0603 	addseq	r0, lr, r3, lsl #12
    2278:	2c030000 	stccs	0, cr0, [r3], {-0}
    227c:	03000005 	movweq	r0, #5
    2280:	00009e07 	andeq	r9, r0, r7, lsl #28
    2284:	1d030000 	stcne	0, cr0, [r3, #-0]
    2288:	03000000 	movweq	r0, #0
    228c:	00009e08 	andeq	r9, r0, r8, lsl #28
    2290:	12030400 	andne	r0, r3, #0, 8
    2294:	03000000 	movweq	r0, #0
    2298:	00009e09 	andeq	r9, r0, r9, lsl #28
    229c:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    22a0:	00006204 	andeq	r6, r0, r4, lsl #4
    22a4:	0fd70600 	svceq	0x00d70600
    22a8:	0a030000 	beq	c22b0 <startup-0x1ff3dd50>
    22ac:	0000006d 	andeq	r0, r0, sp, rrx
    22b0:	00062407 	andeq	r2, r6, r7, lsl #8
    22b4:	06042400 	streq	r2, [r4], -r0, lsl #8
    22b8:	00000128 	andeq	r0, r0, r8, lsr #2
    22bc:	0003de03 	andeq	sp, r3, r3, lsl #28
    22c0:	28070400 	stmdacs	r7, {sl}
    22c4:	00000001 	andeq	r0, r0, r1
    22c8:	00063003 	andeq	r3, r6, r3
    22cc:	2e080400 	cfcpyscs	mvf0, mvf8
    22d0:	04000001 	streq	r0, [r0], #-1
    22d4:	00059703 	andeq	r9, r5, r3, lsl #14
    22d8:	2e090400 	cfcpyscs	mvf0, mvf9
    22dc:	08000001 	stmdaeq	r0, {r0}
    22e0:	0005c303 	andeq	ip, r5, r3, lsl #6
    22e4:	460c0400 	strmi	r0, [ip], -r0, lsl #8
    22e8:	0c000001 	stceq	0, cr0, [r0], {1}
    22ec:	0002ff03 	andeq	pc, r2, r3, lsl #30
    22f0:	460d0400 	strmi	r0, [sp], -r0, lsl #8
    22f4:	10000001 	andne	r0, r0, r1
    22f8:	0003f003 	andeq	pc, r3, r3
    22fc:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
    2300:	14000001 	strne	r0, [r0], #-1
    2304:	00005203 	andeq	r5, r0, r3, lsl #4
    2308:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
    230c:	18000001 	stmdane	r0, {r0}
    2310:	00036f03 	andeq	r6, r3, r3, lsl #30
    2314:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
    2318:	1c000001 	stcne	0, cr0, [r0], {1}
    231c:	00037f03 	andeq	r7, r3, r3, lsl #30
    2320:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
    2324:	20000001 	andcs	r0, r0, r1
    2328:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    232c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2330:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2334:	40090074 	andmi	r0, r9, r4, ror r0
    2338:	0a000001 	beq	2344 <startup-0x1fffdcbc>
    233c:	00000140 	andeq	r0, r0, r0, asr #2
    2340:	af040500 	svcge	0x00040500
    2344:	05000000 	streq	r0, [r0, #-0]
    2348:	00013504 	andeq	r3, r1, r4, lsl #10
    234c:	06250600 	strteq	r0, [r5], -r0, lsl #12
    2350:	15040000 	strne	r0, [r4, #-0]
    2354:	000000af 	andeq	r0, r0, pc, lsr #1
    2358:	0001620b 	andeq	r6, r1, fp, lsl #4
    235c:	00016200 	andeq	r6, r1, r0, lsl #4
    2360:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    2364:	00014c04 	andeq	r4, r1, r4, lsl #24
    2368:	04c40d00 	strbeq	r0, [r4], #3328	; 0xd00
    236c:	1c040000 	stcne	0, cr0, [r4], {-0}
    2370:	00000157 	andeq	r0, r0, r7, asr r1
    2374:	0003b50d 	andeq	fp, r3, sp, lsl #10
    2378:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
    237c:	06000001 	streq	r0, [r0], -r1
    2380:	000005ee 	andeq	r0, r0, lr, ror #11
    2384:	005b2405 	subseq	r2, fp, r5, lsl #8
    2388:	7e0b0000 	cdpvc	0, 0, cr0, cr11, cr0, {0}
    238c:	9a000001 	bls	2398 <startup-0x1fffdc68>
    2390:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    2394:	0000019a 	muleq	r0, sl, r1
    2398:	040003ff 	streq	r0, [r0], #-1023	; 0xfffffc01
    239c:	039c0704 	orrseq	r0, ip, #4, 14	; 0x100000
    23a0:	d20d0000 	andle	r0, sp, #0
    23a4:	05000010 	streq	r0, [r0, #-16]
    23a8:	0001892b 	andeq	r8, r1, fp, lsr #18
    23ac:	02220d00 	eoreq	r0, r2, #0, 26
    23b0:	2c050000 	stccs	0, cr0, [r5], {-0}
    23b4:	00000189 	andeq	r0, r0, r9, lsl #3
    23b8:	00044f0d 	andeq	r4, r4, sp, lsl #30
    23bc:	892d0500 	pushhi	{r8, sl}
    23c0:	0d000001 	stceq	0, cr0, [r0, #-4]
    23c4:	0000030c 	andeq	r0, r0, ip, lsl #6
    23c8:	01892e05 	orreq	r2, r9, r5, lsl #28
    23cc:	9c0d0000 	stcls	0, cr0, [sp], {-0}
    23d0:	05000002 	streq	r0, [r0, #-2]
    23d4:	0001892f 	andeq	r8, r1, pc, lsr #18
    23d8:	06060d00 	streq	r0, [r6], -r0, lsl #26
    23dc:	30050000 	andcc	r0, r5, r0
    23e0:	00000189 	andeq	r0, r0, r9, lsl #3
    23e4:	0005f60d 	andeq	pc, r5, sp, lsl #12
    23e8:	89310500 	ldmdbhi	r1!, {r8, sl}
    23ec:	0f000001 	svceq	0x00000001
    23f0:	000001ac 	andeq	r0, r0, ip, lsr #3
    23f4:	03052b01 	movweq	r2, #23297	; 0x5b01
    23f8:	20004d28 	andcs	r4, r0, r8, lsr #26
    23fc:	0001b70f 	andeq	fp, r1, pc, lsl #14
    2400:	052c0100 	streq	r0, [ip, #-256]!	; 0xffffff00
    2404:	00412803 	subeq	r2, r1, r3, lsl #16
    2408:	01c20f20 	biceq	r0, r2, r0, lsr #30
    240c:	2d010000 	stccs	0, cr0, [r1, #-0]
    2410:	49280305 	stmdbmi	r8!, {r0, r2, r8, r9}
    2414:	cd0f2000 	stcgt	0, cr2, [pc, #-0]	; 241c <startup-0x1fffdbe4>
    2418:	01000001 	tsteq	r0, r1
    241c:	2803052e 	stmdacs	r3, {r1, r2, r3, r5, r8, sl}
    2420:	0f200051 	svceq	0x00200051
    2424:	000001a1 	andeq	r0, r0, r1, lsr #3
    2428:	03052f01 	movweq	r2, #24321	; 0x5f01
    242c:	20004528 	andcs	r4, r0, r8, lsr #10
    2430:	0001d810 	andeq	sp, r1, r0, lsl r8
    2434:	03050100 	movweq	r0, #20736	; 0x5100
    2438:	20003d28 	andcs	r3, r0, r8, lsr #26
    243c:	0001e310 	andeq	lr, r1, r0, lsl r3
    2440:	03050100 	movweq	r0, #20736	; 0x5100
    2444:	20005528 	andcs	r5, r0, r8, lsr #10
    2448:	00110811 	andseq	r0, r1, r1, lsl r8
    244c:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
    2450:	20002b02 	andcs	r2, r0, r2, lsl #22
    2454:	0000006a 	andeq	r0, r0, sl, rrx
    2458:	026d9c01 	rsbeq	r9, sp, #256	; 0x100
    245c:	ef120000 	svc	0x00120000
    2460:	01000011 	tsteq	r0, r1, lsl r0
    2464:	012e01a8 	smulwbeq	lr, r8, r1
    2468:	91020000 	mrsls	r0, (UNDEF: 2)
    246c:	99110074 	ldmdbls	r1, {r2, r4, r5, r6}
    2470:	01000010 	tsteq	r0, r0, lsl r0
    2474:	2a8001a0 	bcs	fe002afc <firstTime.4040+0xddff9754>
    2478:	00822000 	addeq	r2, r2, r0
    247c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2480:	000002a2 	andeq	r0, r0, r2, lsr #5
    2484:	0010e312 	andseq	lr, r0, r2, lsl r3
    2488:	01a00100 	lsleq	r0, r0, #2
    248c:	00000162 	andeq	r0, r0, r2, ror #2
    2490:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    2494:	000003f8 	strdeq	r0, [r0], -r8
    2498:	2e01a101 	mvfcss	f2, f1
    249c:	02000001 	andeq	r0, r0, #1
    24a0:	14007491 	strne	r7, [r0], #-1169	; 0xfffffb6f
    24a4:	000011a7 	andeq	r1, r0, r7, lsr #3
    24a8:	78019601 	stmdavc	r1, {r0, r9, sl, ip, pc}
    24ac:	08200029 	stmdaeq	r0!, {r0, r3, r5}
    24b0:	01000001 	tsteq	r0, r1
    24b4:	0002c69c 	muleq	r2, ip, r6
    24b8:	00691500 	rsbeq	r1, r9, r0, lsl #10
    24bc:	2e019701 	cdpcs	7, 0, cr9, cr1, cr1, {0}
    24c0:	02000001 	andeq	r0, r0, #1
    24c4:	11007491 			; <UNDEFINED> instruction: 0x11007491
    24c8:	00001139 	andeq	r1, r0, r9, lsr r1
    24cc:	48017001 	stmdami	r1, {r0, ip, sp, lr}
    24d0:	30200028 	eorcc	r0, r0, r8, lsr #32
    24d4:	01000001 	tsteq	r0, r1
    24d8:	00033a9c 	muleq	r3, ip, sl
    24dc:	00781500 	rsbseq	r1, r8, r0, lsl #10
    24e0:	2e017101 	adfcss	f7, f1, f1
    24e4:	02000001 	andeq	r0, r0, #1
    24e8:	79156c91 	ldmdbvc	r5, {r0, r4, r7, sl, fp, sp, lr}
    24ec:	01720100 	cmneq	r2, r0, lsl #2
    24f0:	0000012e 	andeq	r0, r0, lr, lsr #2
    24f4:	13689102 	cmnne	r8, #-2147483648	; 0x80000000
    24f8:	00000306 	andeq	r0, r0, r6, lsl #6
    24fc:	2e017301 	cdpcs	3, 0, cr7, cr1, cr1, {0}
    2500:	02000001 	andeq	r0, r0, #1
    2504:	5f136491 	svcpl	0x00136491
    2508:	01000006 	tsteq	r0, r6
    250c:	012e0174 			; <UNDEFINED> instruction: 0x012e0174
    2510:	91020000 	mrsls	r0, (UNDEF: 2)
    2514:	32781560 	rsbscc	r1, r8, #96, 10	; 0x18000000
    2518:	01760100 	cmneq	r6, r0, lsl #2
    251c:	0000012e 	andeq	r0, r0, lr, lsr #2
    2520:	165c9102 	ldrbne	r9, [ip], -r2, lsl #2
    2524:	7a010069 	bvc	426d0 <startup-0x1ffbd930>
    2528:	00012e01 	andeq	r2, r1, r1, lsl #28
    252c:	006b1500 	rsbeq	r1, fp, r0, lsl #10
    2530:	2e017b01 	vmlacs.f64	d7, d1, d1
    2534:	02000001 	andeq	r0, r0, #1
    2538:	11005891 			; <UNDEFINED> instruction: 0x11005891
    253c:	00001239 	andeq	r1, r0, r9, lsr r2
    2540:	f6016501 			; <UNDEFINED> instruction: 0xf6016501
    2544:	52200027 	eorpl	r0, r0, #39	; 0x27
    2548:	01000000 	mrseq	r0, (UNDEF: 0)
    254c:	0003a39c 	muleq	r3, ip, r3
    2550:	00781700 	rsbseq	r1, r8, r0, lsl #14
    2554:	2e016501 	cfsh32cs	mvfx6, mvfx1, #1
    2558:	02000001 	andeq	r0, r0, #1
    255c:	79176c91 	ldmdbvc	r7, {r0, r4, r7, sl, fp, sp, lr}
    2560:	01650100 	cmneq	r5, r0, lsl #2
    2564:	0000012e 	andeq	r0, r0, lr, lsr #2
    2568:	12689102 	rsbne	r9, r8, #-2147483648	; 0x80000000
    256c:	00000306 	andeq	r0, r0, r6, lsl #6
    2570:	2e016501 	cfsh32cs	mvfx6, mvfx1, #1
    2574:	02000001 	andeq	r0, r0, #1
    2578:	5f126491 	svcpl	0x00126491
    257c:	01000006 	tsteq	r0, r6
    2580:	012e0165 			; <UNDEFINED> instruction: 0x012e0165
    2584:	91020000 	mrsls	r0, (UNDEF: 2)
    2588:	00691560 	rsbeq	r1, r9, r0, ror #10
    258c:	2e016601 	cfmadd32cs	mvax0, mvfx6, mvfx1, mvfx1
    2590:	02000001 	andeq	r0, r0, #1
    2594:	6a157491 	bvs	55f7e0 <startup-0x1faa0820>
    2598:	01670100 	cmneq	r7, r0, lsl #2
    259c:	0000012e 	andeq	r0, r0, lr, lsr #2
    25a0:	00709102 	rsbseq	r9, r0, r2, lsl #2
    25a4:	0011dc11 	andseq	sp, r1, r1, lsl ip
    25a8:	015b0100 	cmpeq	fp, r0, lsl #2
    25ac:	200027a4 	andcs	r2, r0, r4, lsr #15
    25b0:	00000052 	andeq	r0, r0, r2, asr r0
    25b4:	040c9c01 	streq	r9, [ip], #-3073	; 0xfffff3ff
    25b8:	78170000 	ldmdavc	r7, {}	; <UNPREDICTABLE>
    25bc:	015b0100 	cmpeq	fp, r0, lsl #2
    25c0:	0000012e 	andeq	r0, r0, lr, lsr #2
    25c4:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
    25c8:	5b010079 	blpl	427b4 <startup-0x1ffbd84c>
    25cc:	00012e01 	andeq	r2, r1, r1, lsl #28
    25d0:	68910200 	ldmvs	r1, {r9}
    25d4:	00030612 	andeq	r0, r3, r2, lsl r6
    25d8:	015b0100 	cmpeq	fp, r0, lsl #2
    25dc:	0000012e 	andeq	r0, r0, lr, lsr #2
    25e0:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
    25e4:	0000065f 	andeq	r0, r0, pc, asr r6
    25e8:	2e015b01 	vmlacs.f64	d5, d1, d1
    25ec:	02000001 	andeq	r0, r0, #1
    25f0:	69156091 	ldmdbvs	r5, {r0, r4, r7, sp, lr}
    25f4:	015c0100 	cmpeq	ip, r0, lsl #2
    25f8:	0000012e 	andeq	r0, r0, lr, lsr #2
    25fc:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    2600:	5d01006a 	stcpl	0, cr0, [r1, #-424]	; 0xfffffe58
    2604:	00012e01 	andeq	r2, r1, r1, lsl #28
    2608:	70910200 	addsvc	r0, r1, r0, lsl #4
    260c:	11131100 	tstne	r3, r0, lsl #2
    2610:	45010000 	strmi	r0, [r1, #-0]
    2614:	00268a01 	eoreq	r8, r6, r1, lsl #20
    2618:	00011a20 	andeq	r1, r1, r0, lsr #20
    261c:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
    2620:	17000004 	strne	r0, [r0, -r4]
    2624:	45010073 	strmi	r0, [r1, #-115]	; 0xffffff8d
    2628:	00009e01 	andeq	r9, r0, r1, lsl #28
    262c:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    2630:	01007817 	tsteq	r0, r7, lsl r8
    2634:	012e0145 			; <UNDEFINED> instruction: 0x012e0145
    2638:	91020000 	mrsls	r0, (UNDEF: 2)
    263c:	00791750 	rsbseq	r1, r9, r0, asr r7
    2640:	2e014501 	cfsh32cs	mvfx4, mvfx1, #1
    2644:	02000001 	andeq	r0, r0, #1
    2648:	73174c91 	tstvc	r7, #37120	; 0x9100
    264c:	01007465 	tsteq	r0, r5, ror #8
    2650:	012e0145 			; <UNDEFINED> instruction: 0x012e0145
    2654:	91020000 	mrsls	r0, (UNDEF: 2)
    2658:	11a11248 			; <UNDEFINED> instruction: 0x11a11248
    265c:	45010000 	strmi	r0, [r1, #-0]
    2660:	00012e01 	andeq	r2, r1, r1, lsl #28
    2664:	00910200 	addseq	r0, r1, r0, lsl #4
    2668:	01006915 	tsteq	r0, r5, lsl r9
    266c:	012e0146 			; <UNDEFINED> instruction: 0x012e0146
    2670:	91020000 	mrsls	r0, (UNDEF: 2)
    2674:	006a156c 	rsbeq	r1, sl, ip, ror #10
    2678:	2e014601 	cfmadd32cs	mvax0, mvfx4, mvfx1, mvfx1
    267c:	02000001 	andeq	r0, r0, #1
    2680:	6b156891 	blvs	55c8cc <startup-0x1faa3734>
    2684:	01460100 	mrseq	r0, (UNDEF: 86)
    2688:	0000012e 	andeq	r0, r0, lr, lsr #2
    268c:	13649102 	cmnne	r4, #-2147483648	; 0x80000000
    2690:	00001214 	andeq	r1, r0, r4, lsl r2
    2694:	2e014601 	cfmadd32cs	mvax0, mvfx4, mvfx1, mvfx1
    2698:	02000001 	andeq	r0, r0, #1
    269c:	c2186091 	andsgt	r6, r8, #145	; 0x91
    26a0:	bc200026 	stclt	0, cr0, [r0], #-152	; 0xffffff68
    26a4:	13000000 	movwne	r0, #0
    26a8:	0000120f 	andeq	r1, r0, pc, lsl #4
    26ac:	5b014d01 	blpl	55ab8 <startup-0x1ffaa548>
    26b0:	02000000 	andeq	r0, r0, #0
    26b4:	00005f91 	muleq	r0, r1, pc	; <UNPREDICTABLE>
    26b8:	0010e811 	andseq	lr, r0, r1, lsl r8
    26bc:	01300100 	teqeq	r0, r0, lsl #2
    26c0:	200025b4 			; <UNDEFINED> instruction: 0x200025b4
    26c4:	000000d6 	ldrdeq	r0, [r0], -r6
    26c8:	05209c01 	streq	r9, [r0, #-3073]!	; 0xfffff3ff
    26cc:	8b120000 	blhi	4826d4 <startup-0x1fb7d92c>
    26d0:	01000010 	tsteq	r0, r0, lsl r0
    26d4:	05200130 	streq	r0, [r0, #-304]!	; 0xfffffed0
    26d8:	91020000 	mrsls	r0, (UNDEF: 2)
    26dc:	00691564 	rsbeq	r1, r9, r4, ror #10
    26e0:	7e013101 	adfvcs	f3, f1, f1
    26e4:	02000001 	andeq	r0, r0, #1
    26e8:	6a157791 	bvs	560534 <startup-0x1fa9facc>
    26ec:	01310100 	teqeq	r1, r0, lsl #2
    26f0:	0000017e 	andeq	r0, r0, lr, ror r1
    26f4:	13769102 	cmnne	r6, #-2147483648	; 0x80000000
    26f8:	00001445 	andeq	r1, r0, r5, asr #8
    26fc:	7e013101 	adfvcs	f3, f1, f1
    2700:	02000001 	andeq	r0, r0, #1
    2704:	63156f91 	tstvs	r5, #580	; 0x244
    2708:	01310100 	teqeq	r1, r0, lsl #2
    270c:	0000017e 	andeq	r0, r0, lr, ror r1
    2710:	15759102 	ldrbne	r9, [r5, #-258]!	; 0xfffffefe
    2714:	3201006b 	andcc	r0, r1, #107	; 0x6b
    2718:	00004e01 	andeq	r4, r0, r1, lsl #28
    271c:	70910200 	addsvc	r0, r1, r0, lsl #4
    2720:	7e040500 	cfsh32vc	mvfx0, mvfx4, #0
    2724:	11000001 	tstne	r0, r1
    2728:	00001092 	muleq	r0, r2, r0
    272c:	14010801 	strne	r0, [r1], #-2049	; 0xfffff7ff
    2730:	a0200024 	eorge	r0, r0, r4, lsr #32
    2734:	01000001 	tsteq	r0, r1
    2738:	0005a09c 	muleq	r5, ip, r0
    273c:	00781700 	rsbseq	r1, r8, r0, lsl #14
    2740:	2e010801 	cdpcs	8, 0, cr0, cr1, cr1, {0}
    2744:	02000001 	andeq	r0, r0, #1
    2748:	79176491 	ldmdbvc	r7, {r0, r4, r7, sl, sp, lr}
    274c:	01080100 	mrseq	r0, (UNDEF: 24)
    2750:	0000012e 	andeq	r0, r0, lr, lsr #2
    2754:	17609102 	strbne	r9, [r0, -r2, lsl #2]!
    2758:	00746573 	rsbseq	r6, r4, r3, ror r5
    275c:	2e010801 	cdpcs	8, 0, cr0, cr1, cr1, {0}
    2760:	02000001 	andeq	r0, r0, #1
    2764:	ea135c91 	b	4d99b0 <startup-0x1fb26650>
    2768:	01000011 	tsteq	r0, r1, lsl r0
    276c:	017e0109 	cmneq	lr, r9, lsl #2
    2770:	91020000 	mrsls	r0, (UNDEF: 2)
    2774:	00631577 	rsbeq	r1, r3, r7, ror r5
    2778:	7e010901 	vmlavc.f16	s0, s2, s2	; <UNPREDICTABLE>
    277c:	02000001 	andeq	r0, r0, #1
    2780:	45136f91 	ldrmi	r6, [r3, #-3985]	; 0xfffff06f
    2784:	01000014 	tsteq	r0, r4, lsl r0
    2788:	017e0109 	cmneq	lr, r9, lsl #2
    278c:	91020000 	mrsls	r0, (UNDEF: 2)
    2790:	12481376 	subne	r1, r8, #-671088639	; 0xd8000001
    2794:	0a010000 	beq	4279c <startup-0x1ffbd864>
    2798:	00012e01 	andeq	r2, r1, r1, lsl #28
    279c:	70910200 	addsvc	r0, r1, r0, lsl #4
    27a0:	10dd1900 	sbcsne	r1, sp, r0, lsl #18
    27a4:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    27a8:	20002294 	mulcs	r0, r4, r2
    27ac:	00000180 	andeq	r0, r0, r0, lsl #3
    27b0:	06069c01 	streq	r9, [r6], -r1, lsl #24
    27b4:	781a0000 	ldmdavc	sl, {}	; <UNPREDICTABLE>
    27b8:	2ede0100 	cdpcs	1, 13, cr0, cr14, cr0, {0}
    27bc:	02000001 	andeq	r0, r0, #1
    27c0:	791a6c91 	ldmdbvc	sl, {r0, r4, r7, sl, fp, sp, lr}
    27c4:	2ede0100 	cdpcs	1, 13, cr0, cr14, cr0, {0}
    27c8:	02000001 	andeq	r0, r0, #1
    27cc:	731a6891 	tstvc	sl, #9502720	; 0x910000
    27d0:	01007465 	tsteq	r0, r5, ror #8
    27d4:	00012ede 	ldrdeq	r2, [r1], -lr
    27d8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    27dc:	0011a11b 	andseq	sl, r1, fp, lsl r1
    27e0:	2ede0100 	cdpcs	1, 13, cr0, cr14, cr0, {0}
    27e4:	02000001 	andeq	r0, r0, #1
    27e8:	ea1c6091 	b	71aa34 <startup-0x1f8e55cc>
    27ec:	01000011 	tsteq	r0, r1, lsl r0
    27f0:	00017edf 	ldrdeq	r7, [r1], -pc	; <UNPREDICTABLE>
    27f4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    27f8:	0012481c 	andseq	r4, r2, ip, lsl r8
    27fc:	2ee00100 	cdpcs	1, 14, cr0, cr0, cr0, {0}
    2800:	02000001 	andeq	r0, r0, #1
    2804:	1d007091 	stcne	0, cr7, [r0, #-580]	; 0xfffffdbc
    2808:	0000129b 	muleq	r0, fp, r2
    280c:	222ed101 	eorcs	sp, lr, #1073741824	; 0x40000000
    2810:	00662000 	rsbeq	r2, r6, r0
    2814:	9c010000 	stcls	0, cr0, [r1], {-0}
    2818:	00000642 	andeq	r0, r0, r2, asr #12
    281c:	0010791c 	andseq	r7, r0, ip, lsl r9
    2820:	7ed20100 	cdpvc	1, 13, cr0, cr2, cr0, {0}
    2824:	02000001 	andeq	r0, r0, #1
    2828:	3c187791 	ldccc	7, cr7, [r8], {145}	; 0x91
    282c:	3e200022 	cdpcc	0, 2, cr0, cr0, cr2, {1}
    2830:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2834:	00646461 	rsbeq	r6, r4, r1, ror #8
    2838:	017ed601 	cmneq	lr, r1, lsl #12
    283c:	91020000 	mrsls	r0, (UNDEF: 2)
    2840:	1f000076 	svcne	0x00000076
    2844:	00001288 	andeq	r1, r0, r8, lsl #5
    2848:	21c0bd01 	biccs	fp, r0, r1, lsl #26
    284c:	006e2000 	rsbeq	r2, lr, r0
    2850:	9c010000 	stcls	0, cr0, [r1], {-0}
    2854:	0011fc1d 	andseq	pc, r1, sp, lsl ip	; <UNPREDICTABLE>
    2858:	7ab50100 	bvc	fed42c60 <firstTime.4040+0xded398b8>
    285c:	46200021 	strtmi	r0, [r0], -r1, lsr #32
    2860:	01000000 	mrseq	r0, (UNDEF: 0)
    2864:	0006859c 	muleq	r6, ip, r5
    2868:	10c41b00 	sbcne	r1, r4, r0, lsl #22
    286c:	b5010000 	strlt	r0, [r1, #-0]
    2870:	0000017e 	andeq	r0, r0, lr, ror r1
    2874:	1b779102 	blne	1de6c84 <startup-0x1e21937c>
    2878:	00001445 	andeq	r1, r0, r5, asr #8
    287c:	017eb501 	cmneq	lr, r1, lsl #10
    2880:	91020000 	mrsls	r0, (UNDEF: 2)
    2884:	b61d0076 			; <UNDEFINED> instruction: 0xb61d0076
    2888:	01000010 	tsteq	r0, r0, lsl r0
    288c:	002134ae 	eoreq	r3, r1, lr, lsr #9
    2890:	00004620 	andeq	r4, r0, r0, lsr #12
    2894:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
    2898:	1b000006 	blne	28b8 <startup-0x1fffd748>
    289c:	000010c4 	andeq	r1, r0, r4, asr #1
    28a0:	017eae01 	cmneq	lr, r1, lsl #28
    28a4:	91020000 	mrsls	r0, (UNDEF: 2)
    28a8:	14451b77 	strbne	r1, [r5], #-2935	; 0xfffff489
    28ac:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    28b0:	0000017e 	andeq	r0, r0, lr, ror r1
    28b4:	00769102 	rsbseq	r9, r6, r2, lsl #2
    28b8:	00112b1d 	andseq	r2, r1, sp, lsl fp
    28bc:	b6990100 	ldrlt	r0, [r9], r0, lsl #2
    28c0:	7e200020 	cdpvc	0, 2, cr0, cr0, cr0, {1}
    28c4:	01000000 	mrseq	r0, (UNDEF: 0)
    28c8:	0006e99c 	muleq	r6, ip, r9
    28cc:	05a71b00 	streq	r1, [r7, #2816]!	; 0xb00
    28d0:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    28d4:	0000017e 	andeq	r0, r0, lr, ror r1
    28d8:	1b779102 	blne	1de6ce8 <startup-0x1e219318>
    28dc:	00001445 	andeq	r1, r0, r5, asr #8
    28e0:	017e9901 	cmneq	lr, r1, lsl #18
    28e4:	91020000 	mrsls	r0, (UNDEF: 2)
    28e8:	8f200076 	svchi	0x00200076
    28ec:	01000011 	tsteq	r0, r1, lsl r0
    28f0:	00012e94 	muleq	r1, r4, lr
    28f4:	00208c00 	eoreq	r8, r0, r0, lsl #24
    28f8:	00002a20 	andeq	r2, r0, r0, lsr #20
    28fc:	119c0100 	orrsne	r0, ip, r0, lsl #2
    2900:	1b000007 	blne	2924 <startup-0x1fffd6dc>
    2904:	00001445 	andeq	r1, r0, r5, asr #8
    2908:	017e9401 	cmneq	lr, r1, lsl #8
    290c:	91020000 	mrsls	r0, (UNDEF: 2)
    2910:	7e210077 	mcrvc	0, 1, r0, cr1, cr7, {3}
    2914:	01000010 	tsteq	r0, r0, lsl r0
    2918:	00017e7b 	andeq	r7, r1, fp, ror lr
    291c:	001ff800 	andseq	pc, pc, r0, lsl #16
    2920:	00009420 	andeq	r9, r0, r0, lsr #8
    2924:	469c0100 	ldrmi	r0, [ip], r0, lsl #2
    2928:	1b000007 	blne	294c <startup-0x1fffd6b4>
    292c:	00001445 	andeq	r1, r0, r5, asr #8
    2930:	017e7b01 	cmneq	lr, r1, lsl #22
    2934:	91020000 	mrsls	r0, (UNDEF: 2)
    2938:	76721e6f 	ldrbtvc	r1, [r2], -pc, ror #28
    293c:	5b840100 	blpl	fe102d44 <firstTime.4040+0xde0f999c>
    2940:	02000000 	andeq	r0, r0, #0
    2944:	1d007791 	stcne	7, cr7, [r0, #-580]	; 0xfffffdbc
    2948:	00001260 	andeq	r1, r0, r0, ror #4
    294c:	1f8a6501 	svcne	0x008a6501
    2950:	006e2000 	rsbeq	r2, lr, r0
    2954:	9c010000 	stcls	0, cr0, [r1], {-0}
    2958:	00000768 	andeq	r0, r0, r8, ror #14
    295c:	0100631e 	tsteq	r0, lr, lsl r3
    2960:	00017e66 	andeq	r7, r1, r6, ror #28
    2964:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2968:	124e1d00 	subne	r1, lr, #0, 26
    296c:	50010000 	andpl	r0, r1, r0
    2970:	20001f24 	andcs	r1, r0, r4, lsr #30
    2974:	00000066 	andeq	r0, r0, r6, rrx
    2978:	078c9c01 	streq	r9, [ip, r1, lsl #24]
    297c:	451b0000 	ldrmi	r0, [fp, #-0]
    2980:	01000014 	tsteq	r0, r4, lsl r0
    2984:	00017e50 	andeq	r7, r1, r0, asr lr
    2988:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    298c:	11472200 	mrsne	r2, (UNDEF: 103)
    2990:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    2994:	20001ecc 	andcs	r1, r0, ip, asr #29
    2998:	00000058 	andeq	r0, r0, r8, asr r0
    299c:	07ba9c01 	ldreq	r9, [sl, r1, lsl #24]!
    29a0:	781a0000 	ldmdavc	sl, {}	; <UNPREDICTABLE>
    29a4:	7e490100 	dvfvce	f0, f1, f0
    29a8:	02000001 	andeq	r0, r0, #1
    29ac:	631e6f91 	tstvs	lr, #580	; 0x244
    29b0:	7e4a0100 	dvfvce	f0, f2, f0
    29b4:	02000001 	andeq	r0, r0, #1
    29b8:	22007791 	andcs	r7, r0, #38010880	; 0x2440000
    29bc:	000011bb 			; <UNDEFINED> instruction: 0x000011bb
    29c0:	1e7c4101 	rpwnee	f4, f4, f1
    29c4:	00502000 	subseq	r2, r0, r0
    29c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    29cc:	000007e8 	andeq	r0, r0, r8, ror #15
    29d0:	0100781a 	tsteq	r0, sl, lsl r8
    29d4:	00017e41 	andeq	r7, r1, r1, asr #28
    29d8:	6f910200 	svcvs	0x00910200
    29dc:	0100631e 	tsteq	r0, lr, lsl r3
    29e0:	00017e42 	andeq	r7, r1, r2, asr #28
    29e4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    29e8:	12231f00 	eorne	r1, r3, #0, 30
    29ec:	3a010000 	bcc	429f4 <startup-0x1ffbd60c>
    29f0:	20001e4c 	andcs	r1, r0, ip, asr #28
    29f4:	00000030 	andeq	r0, r0, r0, lsr r0
    29f8:	cc1f9c01 	ldcgt	12, cr9, [pc], {1}
    29fc:	01000010 	tsteq	r0, r0, lsl r0
    2a00:	001e3437 	andseq	r3, lr, r7, lsr r4
    2a04:	00001820 	andeq	r1, r0, r0, lsr #16
    2a08:	199c0100 	ldmibne	ip, {r8}
    2a0c:	00001273 	andeq	r1, r0, r3, ror r2
    2a10:	1e023201 	cdpne	2, 0, cr3, cr2, cr1, {0}
    2a14:	00322000 	eorseq	r2, r2, r0
    2a18:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a1c:	0000083a 	andeq	r0, r0, sl, lsr r8
    2a20:	00108b1b 	andseq	r8, r0, fp, lsl fp
    2a24:	20320100 	eorscs	r0, r2, r0, lsl #2
    2a28:	02000005 	andeq	r0, r0, #5
    2a2c:	691e6c91 	ldmdbvs	lr, {r0, r4, r7, sl, fp, sp, lr}
    2a30:	2e330100 	rsfcss	f0, f3, f0
    2a34:	02000001 	andeq	r0, r0, #1
    2a38:	1d007491 	cfstrsne	mvf7, [r0, #-580]	; 0xfffffdbc
    2a3c:	000010fc 	strdeq	r1, [r0], -ip
    2a40:	1ddc2101 	ldfnee	f2, [ip, #4]
    2a44:	00262000 	eoreq	r2, r6, r0
    2a48:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a4c:	0000085d 	andeq	r0, r0, sp, asr r8
    2a50:	00736d1a 	rsbseq	r6, r3, sl, lsl sp
    2a54:	004e2101 	subeq	r2, lr, r1, lsl #2
    2a58:	91020000 	mrsls	r0, (UNDEF: 2)
    2a5c:	aa1d0074 	bge	742c34 <startup-0x1f8bd3cc>
    2a60:	01000010 	tsteq	r0, r0, lsl r0
    2a64:	001db018 	andseq	fp, sp, r8, lsl r0
    2a68:	00002c20 	andeq	r2, r0, r0, lsr #24
    2a6c:	809c0100 	addshi	r0, ip, r0, lsl #2
    2a70:	1a000008 	bne	2a98 <startup-0x1fffd568>
    2a74:	01007375 	tsteq	r0, r5, ror r3
    2a78:	00004e18 	andeq	r4, r0, r8, lsl lr
    2a7c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2a80:	111f2300 	tstne	pc, r0, lsl #6
    2a84:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    2a88:	20001d6c 	andcs	r1, r0, ip, ror #26
    2a8c:	00000044 	andeq	r0, r0, r4, asr #32
    2a90:	d0239c01 	eorle	r9, r3, r1, lsl #24
    2a94:	01000011 	tsteq	r0, r1, lsl r0
    2a98:	001d2804 	andseq	r2, sp, r4, lsl #16
    2a9c:	00004420 	andeq	r4, r0, r0, lsr #8
    2aa0:	009c0100 	addseq	r0, ip, r0, lsl #2
    2aa4:	00000100 	andeq	r0, r0, r0, lsl #2
    2aa8:	092d0004 	stmfdeq	sp!, {r2}
    2aac:	01040000 	mrseq	r0, (UNDEF: 4)
    2ab0:	00000081 	andeq	r0, r0, r1, lsl #1
    2ab4:	0012bb0c 	andseq	fp, r2, ip, lsl #22
    2ab8:	002b6c00 	eoreq	r6, fp, r0, lsl #24
    2abc:	00002820 	andeq	r2, r0, r0, lsr #16
    2ac0:	000def00 	andeq	lr, sp, r0, lsl #30
    2ac4:	020c0200 	andeq	r0, ip, #0, 4
    2ac8:	00004e05 	andeq	r4, r0, r5, lsl #28
    2acc:	03060300 	movweq	r0, #25344	; 0x6300
    2ad0:	07020000 	streq	r0, [r2, -r0]
    2ad4:	0000004e 	andeq	r0, r0, lr, asr #32
    2ad8:	065f0300 	ldrbeq	r0, [pc], -r0, lsl #6
    2adc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2ae0:	0000004e 	andeq	r0, r0, lr, asr #32
    2ae4:	119c0304 	orrsne	r0, ip, r4, lsl #6
    2ae8:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    2aec:	00000055 	andeq	r0, r0, r5, asr r0
    2af0:	04040008 	streq	r0, [r4], #-8
    2af4:	00032a07 	andeq	r2, r3, r7, lsl #20
    2af8:	5b040500 	blpl	103f00 <startup-0x1fefc100>
    2afc:	04000000 	streq	r0, [r0], #-0
    2b00:	04410801 	strbeq	r0, [r1], #-2049	; 0xfffff7ff
    2b04:	ee060000 	cdp	0, 0, cr0, cr6, cr0, {0}
    2b08:	02000012 	andeq	r0, r0, #18
    2b0c:	0000210a 	andeq	r2, r0, sl, lsl #2
    2b10:	00160700 	andseq	r0, r6, r0, lsl #14
    2b14:	030c0000 	movweq	r0, #49152	; 0xc000
    2b18:	00009e06 	andeq	r9, r0, r6, lsl #28
    2b1c:	052c0300 	streq	r0, [ip, #-768]!	; 0xfffffd00
    2b20:	07030000 	streq	r0, [r3, -r0]
    2b24:	0000009e 	muleq	r0, lr, r0
    2b28:	001d0300 	andseq	r0, sp, r0, lsl #6
    2b2c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2b30:	0000009e 	muleq	r0, lr, r0
    2b34:	00120304 	andseq	r0, r2, r4, lsl #6
    2b38:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    2b3c:	0000009e 	muleq	r0, lr, r0
    2b40:	04050008 	streq	r0, [r5], #-8
    2b44:	00000062 	andeq	r0, r0, r2, rrx
    2b48:	000fd706 	andeq	sp, pc, r6, lsl #14
    2b4c:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
    2b50:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2b54:	000012b0 			; <UNDEFINED> instruction: 0x000012b0
    2b58:	2b6c0301 	blcs	1b03764 <startup-0x1e4fc89c>
    2b5c:	00282000 	eoreq	r2, r8, r0
    2b60:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b64:	000000fd 	strdeq	r0, [r0], -sp
    2b68:	0012b509 	andseq	fp, r2, r9, lsl #10
    2b6c:	fd030100 	stc2	1, cr0, [r3, #-0]
    2b70:	02000000 	andeq	r0, r0, #0
    2b74:	2c097491 	cfstrscs	mvf7, [r9], {145}	; 0x91
    2b78:	01000005 	tsteq	r0, r5
    2b7c:	00009e03 	andeq	r9, r0, r3, lsl #28
    2b80:	70910200 	addsvc	r0, r1, r0, lsl #4
    2b84:	00001d09 	andeq	r1, r0, r9, lsl #26
    2b88:	9e030100 	adflss	f0, f3, f0
    2b8c:	02000000 	andeq	r0, r0, #0
    2b90:	12096c91 	andne	r6, r9, #37120	; 0x9100
    2b94:	01000000 	mrseq	r0, (UNDEF: 0)
    2b98:	00009e03 	andeq	r9, r0, r3, lsl #28
    2b9c:	68910200 	ldmvs	r1, {r9}
    2ba0:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    2ba4:	00000000 	andeq	r0, r0, r0
    2ba8:	000000c3 	andeq	r0, r0, r3, asr #1
    2bac:	09b40004 	ldmibeq	r4!, {r2}
    2bb0:	01040000 	mrseq	r0, (UNDEF: 4)
    2bb4:	00000081 	andeq	r0, r0, r1, lsl #1
    2bb8:	0012f50c 	andseq	pc, r2, ip, lsl #10
    2bbc:	002b9400 	eoreq	r9, fp, r0, lsl #8
    2bc0:	00002820 	andeq	r2, r0, r0, lsr #16
    2bc4:	000e6500 	andeq	r6, lr, r0, lsl #10
    2bc8:	020c0200 	andeq	r0, ip, #0, 4
    2bcc:	00004e05 	andeq	r4, r0, r5, lsl #28
    2bd0:	03060300 	movweq	r0, #25344	; 0x6300
    2bd4:	07020000 	streq	r0, [r2, -r0]
    2bd8:	0000004e 	andeq	r0, r0, lr, asr #32
    2bdc:	065f0300 	ldrbeq	r0, [pc], -r0, lsl #6
    2be0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2be4:	0000004e 	andeq	r0, r0, lr, asr #32
    2be8:	119c0304 	orrsne	r0, ip, r4, lsl #6
    2bec:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    2bf0:	00000055 	andeq	r0, r0, r5, asr r0
    2bf4:	04040008 	streq	r0, [r4], #-8
    2bf8:	00032a07 	andeq	r2, r3, r7, lsl #20
    2bfc:	5b040500 	blpl	104004 <startup-0x1fefbffc>
    2c00:	04000000 	streq	r0, [r0], #-0
    2c04:	04410801 	strbeq	r0, [r1], #-2049	; 0xfffff7ff
    2c08:	ee060000 	cdp	0, 0, cr0, cr6, cr0, {0}
    2c0c:	02000012 	andeq	r0, r0, #18
    2c10:	0000210a 	andeq	r2, r0, sl, lsl #2
    2c14:	12e90700 	rscne	r0, r9, #0, 14
    2c18:	03010000 	movweq	r0, #4096	; 0x1000
    2c1c:	20002b94 	mulcs	r0, r4, fp
    2c20:	00000028 	andeq	r0, r0, r8, lsr #32
    2c24:	00b99c01 	adcseq	r9, r9, r1, lsl #24
    2c28:	73080000 	movwvc	r0, #32768	; 0x8000
    2c2c:	b9030100 	stmdblt	r3, {r8}
    2c30:	02000000 	andeq	r0, r0, #0
    2c34:	9c097491 	cfstrsls	mvf7, [r9], {145}	; 0x91
    2c38:	01000011 	tsteq	r0, r1, lsl r0
    2c3c:	00005503 	andeq	r5, r0, r3, lsl #10
    2c40:	70910200 	addsvc	r0, r1, r0, lsl #4
    2c44:	00030609 	andeq	r0, r3, r9, lsl #12
    2c48:	bf030100 	svclt	0x00030100
    2c4c:	02000000 	andeq	r0, r0, #0
    2c50:	5f096c91 	svcpl	0x00096c91
    2c54:	01000006 	tsteq	r0, r6
    2c58:	0000bf03 	andeq	fp, r0, r3, lsl #30
    2c5c:	68910200 	ldmvs	r1, {r9}
    2c60:	62040500 	andvs	r0, r4, #0, 10
    2c64:	0a000000 	beq	2c6c <startup-0x1fffd394>
    2c68:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2c6c:	35000074 	strcc	r0, [r0, #-116]	; 0xffffff8c
    2c70:	04000001 	streq	r0, [r0], #-1
    2c74:	000a4600 	andeq	r4, sl, r0, lsl #12
    2c78:	81010400 	tsthi	r1, r0, lsl #8
    2c7c:	0c000000 	stceq	0, cr0, [r0], {-0}
    2c80:	0000135b 	andeq	r1, r0, fp, asr r3
    2c84:	20002bbc 			; <UNDEFINED> instruction: 0x20002bbc
    2c88:	0000006c 	andeq	r0, r0, ip, rrx
    2c8c:	00000ed1 	ldrdeq	r0, [r0], -r1
    2c90:	13021802 	movwne	r1, #10242	; 0x2802
    2c94:	000000ae 	andeq	r0, r0, lr, lsr #1
    2c98:	00132403 	andseq	r2, r3, r3, lsl #8
    2c9c:	ae140200 	cdpge	2, 1, cr0, cr4, cr0, {0}
    2ca0:	00000000 	andeq	r0, r0, r0
    2ca4:	00133d03 	andseq	r3, r3, r3, lsl #26
    2ca8:	b5150200 	ldrlt	r0, [r5, #-512]	; 0xfffffe00
    2cac:	04000000 	streq	r0, [r0], #-0
    2cb0:	00138803 	andseq	r8, r3, r3, lsl #16
    2cb4:	b5160200 	ldrlt	r0, [r6, #-512]	; 0xfffffe00
    2cb8:	06000000 	streq	r0, [r0], -r0
    2cbc:	0013aa03 	andseq	sl, r3, r3, lsl #20
    2cc0:	ae170200 	cdpge	2, 1, cr0, cr7, cr0, {0}
    2cc4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2cc8:	00134903 	andseq	r4, r3, r3, lsl #18
    2ccc:	ae180200 	cdpge	2, 1, cr0, cr8, cr0, {0}
    2cd0:	0c000000 	stceq	0, cr0, [r0], {-0}
    2cd4:	0013ba03 	andseq	fp, r3, r3, lsl #20
    2cd8:	bc190200 	lfmlt	f0, 4, [r9], {-0}
    2cdc:	10000000 	andne	r0, r0, r0
    2ce0:	0013b203 	andseq	fp, r3, r3, lsl #4
    2ce4:	bc1a0200 	lfmlt	f0, 4, [sl], {-0}
    2ce8:	11000000 	mrsne	r0, (UNDEF: 0)
    2cec:	00134f03 	andseq	r4, r3, r3, lsl #30
    2cf0:	b51b0200 	ldrlt	r0, [fp, #-512]	; 0xfffffe00
    2cf4:	12000000 	andne	r0, r0, #0
    2cf8:	0013a303 	andseq	sl, r3, r3, lsl #6
    2cfc:	bc1c0200 	lfmlt	f0, 4, [ip], {-0}
    2d00:	14000000 	strne	r0, [r0], #-0
    2d04:	00133503 	andseq	r3, r3, r3, lsl #10
    2d08:	bc1d0200 	lfmlt	f0, 4, [sp], {-0}
    2d0c:	15000000 	strne	r0, [r0, #-0]
    2d10:	0013c103 	andseq	ip, r3, r3, lsl #2
    2d14:	b51e0200 	ldrlt	r0, [lr, #-512]	; 0xfffffe00
    2d18:	16000000 	strne	r0, [r0], -r0
    2d1c:	07040400 	streq	r0, [r4, -r0, lsl #8]
    2d20:	0000032a 	andeq	r0, r0, sl, lsr #6
    2d24:	24070204 	strcs	r0, [r7], #-516	; 0xfffffdfc
    2d28:	04000003 	streq	r0, [r0], #-3
    2d2c:	04410801 	strbeq	r0, [r1], #-2049	; 0xfffff7ff
    2d30:	44050000 	strmi	r0, [r5], #-0
    2d34:	02000013 	andeq	r0, r0, #19
    2d38:	0000211f 	andeq	r2, r0, pc, lsl r1
    2d3c:	13930600 	orrsne	r0, r3, #0, 12
    2d40:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    2d44:	00000104 	andeq	r0, r0, r4, lsl #2
    2d48:	20002bf4 	strdcs	r2, [r0], -r4
    2d4c:	00000034 	andeq	r0, r0, r4, lsr r0
    2d50:	01049c01 	tsteq	r4, r1, lsl #24
    2d54:	62070000 	andvs	r0, r7, #0
    2d58:	01007469 	tsteq	r0, r9, ror #8
    2d5c:	0001040e 	andeq	r0, r1, lr, lsl #8
    2d60:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2d64:	4c494408 	cfstrdmi	mvd4, [r9], {8}
    2d68:	0b0f0100 	bleq	3c3170 <startup-0x1fc3ce90>
    2d6c:	02000001 	andeq	r0, r0, #1
    2d70:	09006f91 	stmdbeq	r0, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
    2d74:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2d78:	01040074 	tsteq	r4, r4, ror r0
    2d7c:	00044a08 	andeq	r4, r4, r8, lsl #20
    2d80:	13cd0a00 	bicne	r0, sp, #0, 20
    2d84:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    2d88:	0000010b 	andeq	r0, r0, fp, lsl #2
    2d8c:	20002bd4 	ldrdcs	r2, [r0], -r4
    2d90:	00000020 	andeq	r0, r0, r0, lsr #32
    2d94:	2a0b9c01 	bcs	2e9da0 <startup-0x1fd16260>
    2d98:	01000013 	tsteq	r0, r3, lsl r0
    2d9c:	002bbc04 	eoreq	fp, fp, r4, lsl #24
    2da0:	00001820 	andeq	r1, r0, r0, lsr #16
    2da4:	009c0100 	addseq	r0, ip, r0, lsl #2
    2da8:	000004ed 	andeq	r0, r0, sp, ror #9
    2dac:	0b030004 	bleq	c2dc4 <startup-0x1ff3d23c>
    2db0:	01040000 	mrseq	r0, (UNDEF: 4)
    2db4:	00000081 	andeq	r0, r0, r1, lsl #1
    2db8:	0015120c 	andseq	r1, r5, ip, lsl #4
    2dbc:	002c2800 	eoreq	r2, ip, r0, lsl #16
    2dc0:	00052020 	andeq	r2, r5, r0, lsr #32
    2dc4:	000f4100 	andeq	r4, pc, r0, lsl #2
    2dc8:	020c0200 	andeq	r0, ip, #0, 4
    2dcc:	00004e05 	andeq	r4, r0, r5, lsl #28
    2dd0:	03060300 	movweq	r0, #25344	; 0x6300
    2dd4:	07020000 	streq	r0, [r2, -r0]
    2dd8:	0000004e 	andeq	r0, r0, lr, asr #32
    2ddc:	065f0300 	ldrbeq	r0, [pc], -r0, lsl #6
    2de0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2de4:	0000004e 	andeq	r0, r0, lr, asr #32
    2de8:	119c0304 	orrsne	r0, ip, r4, lsl #6
    2dec:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    2df0:	00000055 	andeq	r0, r0, r5, asr r0
    2df4:	04040008 	streq	r0, [r4], #-8
    2df8:	00032a07 	andeq	r2, r3, r7, lsl #20
    2dfc:	5b040500 	blpl	104204 <startup-0x1fefbdfc>
    2e00:	04000000 	streq	r0, [r0], #-0
    2e04:	04410801 	strbeq	r0, [r1], #-2049	; 0xfffff7ff
    2e08:	ee060000 	cdp	0, 0, cr0, cr6, cr0, {0}
    2e0c:	02000012 	andeq	r0, r0, #18
    2e10:	0000210a 	andeq	r2, r0, sl, lsl #2
    2e14:	00160700 	andseq	r0, r6, r0, lsl #14
    2e18:	030c0000 	movweq	r0, #49152	; 0xc000
    2e1c:	00009e06 	andeq	r9, r0, r6, lsl #28
    2e20:	052c0300 	streq	r0, [ip, #-768]!	; 0xfffffd00
    2e24:	07030000 	streq	r0, [r3, -r0]
    2e28:	0000009e 	muleq	r0, lr, r0
    2e2c:	001d0300 	andseq	r0, sp, r0, lsl #6
    2e30:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2e34:	0000009e 	muleq	r0, lr, r0
    2e38:	00120304 	andseq	r0, r2, r4, lsl #6
    2e3c:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    2e40:	0000009e 	muleq	r0, lr, r0
    2e44:	04050008 	streq	r0, [r5], #-8
    2e48:	00000062 	andeq	r0, r0, r2, rrx
    2e4c:	000fd706 	andeq	sp, pc, r6, lsl #14
    2e50:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
    2e54:	07000000 	streq	r0, [r0, -r0]
    2e58:	00000624 	andeq	r0, r0, r4, lsr #12
    2e5c:	28060424 	stmdacs	r6, {r2, r5, sl}
    2e60:	03000001 	movweq	r0, #1
    2e64:	000003de 	ldrdeq	r0, [r0], -lr
    2e68:	01280704 			; <UNDEFINED> instruction: 0x01280704
    2e6c:	03000000 	movweq	r0, #0
    2e70:	00000630 	andeq	r0, r0, r0, lsr r6
    2e74:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
    2e78:	03040000 	movweq	r0, #16384	; 0x4000
    2e7c:	00000597 	muleq	r0, r7, r5
    2e80:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
    2e84:	03080000 	movweq	r0, #32768	; 0x8000
    2e88:	000005c3 	andeq	r0, r0, r3, asr #11
    2e8c:	01460c04 	cmpeq	r6, r4, lsl #24
    2e90:	030c0000 	movweq	r0, #49152	; 0xc000
    2e94:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2e98:	01460d04 	cmpeq	r6, r4, lsl #26
    2e9c:	03100000 	tsteq	r0, #0
    2ea0:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2ea4:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
    2ea8:	03140000 	tsteq	r4, #0
    2eac:	00000052 	andeq	r0, r0, r2, asr r0
    2eb0:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
    2eb4:	03180000 	tsteq	r8, #0
    2eb8:	0000036f 	andeq	r0, r0, pc, ror #6
    2ebc:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
    2ec0:	031c0000 	tsteq	ip, #0
    2ec4:	0000037f 	andeq	r0, r0, pc, ror r3
    2ec8:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
    2ecc:	00200000 	eoreq	r0, r0, r0
    2ed0:	00a40405 	adceq	r0, r4, r5, lsl #8
    2ed4:	04080000 	streq	r0, [r8], #-0
    2ed8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    2edc:	01400900 	cmpeq	r0, r0, lsl #18
    2ee0:	400a0000 	andmi	r0, sl, r0
    2ee4:	00000001 	andeq	r0, r0, r1
    2ee8:	00af0405 	adceq	r0, pc, r5, lsl #8
    2eec:	04050000 	streq	r0, [r5], #-0
    2ef0:	00000135 	andeq	r0, r0, r5, lsr r1
    2ef4:	00062506 	andeq	r2, r6, r6, lsl #10
    2ef8:	af150400 	svcge	0x00150400
    2efc:	0b000000 	bleq	2f04 <startup-0x1fffd0fc>
    2f00:	00000162 	andeq	r0, r0, r2, ror #2
    2f04:	00000162 	andeq	r0, r0, r2, ror #2
    2f08:	0405000c 	streq	r0, [r5], #-12
    2f0c:	0000014c 	andeq	r0, r0, ip, asr #2
    2f10:	0004c40d 	andeq	ip, r4, sp, lsl #8
    2f14:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
    2f18:	0d000001 	stceq	0, cr0, [r0, #-4]
    2f1c:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
    2f20:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
    2f24:	ee060000 	cdp	0, 0, cr0, cr6, cr0, {0}
    2f28:	05000005 	streq	r0, [r0, #-5]
    2f2c:	00005b24 	andeq	r5, r0, r4, lsr #22
    2f30:	017e0b00 	cmneq	lr, r0, lsl #22
    2f34:	019a0000 	orrseq	r0, sl, r0
    2f38:	9a0e0000 	bls	382f40 <startup-0x1fc7d0c0>
    2f3c:	ff000001 			; <UNDEFINED> instruction: 0xff000001
    2f40:	04040003 	streq	r0, [r4], #-3
    2f44:	00039c07 	andeq	r9, r3, r7, lsl #24
    2f48:	10d20d00 	sbcsne	r0, r2, r0, lsl #26
    2f4c:	2b050000 	blcs	142f54 <startup-0x1febd0ac>
    2f50:	00000189 	andeq	r0, r0, r9, lsl #3
    2f54:	0002220d 	andeq	r2, r2, sp, lsl #4
    2f58:	892c0500 	stmdbhi	ip!, {r8, sl}
    2f5c:	0d000001 	stceq	0, cr0, [r0, #-4]
    2f60:	0000044f 	andeq	r0, r0, pc, asr #8
    2f64:	01892d05 	orreq	r2, r9, r5, lsl #26
    2f68:	0c0d0000 	stceq	0, cr0, [sp], {-0}
    2f6c:	05000003 	streq	r0, [r0, #-3]
    2f70:	0001892e 	andeq	r8, r1, lr, lsr #18
    2f74:	029c0d00 	addseq	r0, ip, #0, 26
    2f78:	2f050000 	svccs	0x00050000
    2f7c:	00000189 	andeq	r0, r0, r9, lsl #3
    2f80:	0006060d 	andeq	r0, r6, sp, lsl #12
    2f84:	89300500 	ldmdbhi	r0!, {r8, sl}
    2f88:	0d000001 	stceq	0, cr0, [r0, #-4]
    2f8c:	000005f6 	strdeq	r0, [r0], -r6
    2f90:	01893105 	orreq	r3, r9, r5, lsl #2
    2f94:	980f0000 	stmdals	pc, {}	; <UNPREDICTABLE>
    2f98:	01000014 	tsteq	r0, r4, lsl r0
    2f9c:	0030c4e4 	eorseq	ip, r0, r4, ror #9
    2fa0:	00008420 	andeq	r8, r0, r0, lsr #8
    2fa4:	2c9c0100 	ldfcss	f0, [ip], {0}
    2fa8:	10000002 	andne	r0, r0, r2
    2fac:	e5010073 	str	r0, [r1, #-115]	; 0xffffff8d
    2fb0:	0000022c 	andeq	r0, r0, ip, lsr #4
    2fb4:	116c9102 	cmnne	ip, r2, lsl #2
    2fb8:	00001473 	andeq	r1, r0, r3, ror r4
    2fbc:	0239e601 	eorseq	lr, r9, #1048576	; 0x100000
    2fc0:	91020000 	mrsls	r0, (UNDEF: 2)
    2fc4:	1479115c 	ldrbtne	r1, [r9], #-348	; 0xfffffea4
    2fc8:	e7010000 	str	r0, [r1, -r0]
    2fcc:	00000249 	andeq	r0, r0, r9, asr #4
    2fd0:	00489102 	subeq	r9, r8, r2, lsl #2
    2fd4:	02320405 	eorseq	r0, r2, #83886080	; 0x5000000
    2fd8:	01040000 	mrseq	r0, (UNDEF: 4)
    2fdc:	00044a08 	andeq	r4, r4, r8, lsl #20
    2fe0:	02320b00 	eorseq	r0, r2, #0, 22
    2fe4:	02490000 	subeq	r0, r9, #0
    2fe8:	9a120000 	bls	482ff0 <startup-0x1fb7d010>
    2fec:	0c000001 	stceq	0, cr0, [r0], {1}
    2ff0:	02320b00 	eorseq	r0, r2, #0, 22
    2ff4:	02590000 	subseq	r0, r9, #0
    2ff8:	9a120000 	bls	483000 <startup-0x1fb7d000>
    2ffc:	13000001 	movwne	r0, #1
    3000:	14290f00 	strtne	r0, [r9], #-3840	; 0xfffff100
    3004:	cc010000 	stcgt	0, cr0, [r1], {-0}
    3008:	20003036 	andcs	r3, r0, r6, lsr r0
    300c:	0000008e 	andeq	r0, r0, lr, lsl #1
    3010:	02b39c01 	adcseq	r9, r3, #256	; 0x100
    3014:	61130000 	tstvs	r3, r0
    3018:	01000015 	tsteq	r0, r5, lsl r0
    301c:	00022ccc 	andeq	r2, r2, ip, asr #25
    3020:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3024:	00026013 	andeq	r6, r2, r3, lsl r0
    3028:	2ccc0100 	stfcse	f0, [ip], {0}
    302c:	02000002 	andeq	r0, r0, #2
    3030:	0b136891 	bleq	4dd27c <startup-0x1fb22d84>
    3034:	01000015 	tsteq	r0, r5, lsl r0
    3038:	00012ecc 	andeq	r2, r1, ip, asr #29
    303c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3040:	0013e713 	andseq	lr, r3, r3, lsl r7
    3044:	2ecc0100 	polcse	f0, f4, f0
    3048:	02000001 	andeq	r0, r0, #1
    304c:	69106091 	ldmdbvs	r0, {r0, r4, r7, sp, lr}
    3050:	2ed00100 	cdpcs	1, 13, cr0, cr0, cr0, {0}
    3054:	02000001 	andeq	r0, r0, #1
    3058:	0f007491 	svceq	0x00007491
    305c:	000014ca 	andeq	r1, r0, sl, asr #9
    3060:	2fd8bd01 	svccs	0x00d8bd01
    3064:	005e2000 	subseq	r2, lr, r0
    3068:	9c010000 	stcls	0, cr0, [r1], {-0}
    306c:	000002e5 	andeq	r0, r0, r5, ror #5
    3070:	00156113 	andseq	r6, r5, r3, lsl r1
    3074:	2cbd0100 	ldfcss	f0, [sp]
    3078:	02000002 	andeq	r0, r0, #2
    307c:	60137491 	mulsvs	r3, r1, r4
    3080:	01000002 	tsteq	r0, r2
    3084:	00022cbd 			; <UNDEFINED> instruction: 0x00022cbd
    3088:	70910200 	addsvc	r0, r1, r0, lsl #4
    308c:	141d0f00 	ldrne	r0, [sp], #-3840	; 0xfffff100
    3090:	ad010000 	stcge	0, cr0, [r1, #-0]
    3094:	20002f6e 	andcs	r2, r0, lr, ror #30
    3098:	0000006a 	andeq	r0, r0, sl, rrx
    309c:	03159c01 	tsteq	r5, #256	; 0x100
    30a0:	73100000 	tstvc	r0, #0
    30a4:	2cae0100 	stfcss	f0, [lr]
    30a8:	02000002 	andeq	r0, r0, #2
    30ac:	58116c91 	ldmdapl	r1, {r0, r4, r7, sl, fp, sp, lr}
    30b0:	01000011 	tsteq	r0, r1, lsl r0
    30b4:	000315af 	andeq	r1, r3, pc, lsr #11
    30b8:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    30bc:	02320b00 	eorseq	r0, r2, #0, 22
    30c0:	03250000 			; <UNDEFINED> instruction: 0x03250000
    30c4:	9a120000 	bls	4830cc <startup-0x1fb7cf34>
    30c8:	14000001 	strne	r0, [r0], #-1
    30cc:	13fe1400 	mvnsne	r1, #0, 8
    30d0:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    30d4:	20002f5c 	andcs	r2, r0, ip, asr pc
    30d8:	00000012 	andeq	r0, r0, r2, lsl r0
    30dc:	d6159c01 	ldrle	r9, [r5], -r1, lsl #24
    30e0:	01000013 	tsteq	r0, r3, lsl r0
    30e4:	002f429f 	mlaeq	pc, pc, r2, r4	; <UNPREDICTABLE>
    30e8:	00001a20 	andeq	r1, r0, r0, lsr #20
    30ec:	149c0100 	ldrne	r0, [ip], #256	; 0x100
    30f0:	0000140b 	andeq	r1, r0, fp, lsl #8
    30f4:	2ea88301 	cdpcs	3, 10, cr8, cr8, cr1, {0}
    30f8:	009a2000 	addseq	r2, sl, r0
    30fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    3100:	0014d60f 	andseq	sp, r4, pc, lsl #12
    3104:	587b0100 	ldmdapl	fp!, {r8}^
    3108:	5020002e 	eorpl	r0, r0, lr, lsr #32
    310c:	01000000 	mrseq	r0, (UNDEF: 0)
    3110:	0003989c 	muleq	r3, ip, r8
    3114:	6f721600 	svcvs	0x00721600
    3118:	7b010077 	blvc	432fc <startup-0x1ffbcd04>
    311c:	0000005b 	andeq	r0, r0, fp, asr r0
    3120:	136f9102 	cmnne	pc, #-2147483648	; 0x80000000
    3124:	00001416 	andeq	r1, r0, r6, lsl r4
    3128:	005b7b01 	subseq	r7, fp, r1, lsl #22
    312c:	91020000 	mrsls	r0, (UNDEF: 2)
    3130:	147f116e 	ldrbtne	r1, [pc], #-366	; 3138 <startup-0x1fffcec8>
    3134:	7c010000 	stcvc	0, cr0, [r1], {-0}
    3138:	0000005b 	andeq	r0, r0, fp, asr r0
    313c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    3140:	0014fa0f 	andseq	pc, r4, pc, lsl #20
    3144:	1c740100 	ldfnee	f0, [r4], #-0
    3148:	3c20002e 	stccc	0, cr0, [r0], #-184	; 0xffffff48
    314c:	01000000 	mrseq	r0, (UNDEF: 0)
    3150:	0003ba9c 	muleq	r3, ip, sl
    3154:	00631600 	rsbeq	r1, r3, r0, lsl #12
    3158:	005b7401 	subseq	r7, fp, r1, lsl #8
    315c:	91020000 	mrsls	r0, (UNDEF: 2)
    3160:	3a170077 	bcc	5c3344 <startup-0x1fa3ccbc>
    3164:	01000014 	tsteq	r0, r4, lsl r0
    3168:	00005b6a 	andeq	r5, r0, sl, ror #22
    316c:	002de800 	eoreq	lr, sp, r0, lsl #16
    3170:	00003420 	andeq	r3, r0, r0, lsr #8
    3174:	e09c0100 	adds	r0, ip, r0, lsl #2
    3178:	10000003 	andne	r0, r0, r3
    317c:	6b010063 	blvs	43310 <startup-0x1ffbccf0>
    3180:	0000005b 	andeq	r0, r0, fp, asr r0
    3184:	00779102 	rsbseq	r9, r7, r2, lsl #2
    3188:	0014e30f 	andseq	lr, r4, pc, lsl #6
    318c:	b8630100 	stmdalt	r3!, {r8}^
    3190:	3020002d 	eorcc	r0, r0, sp, lsr #32
    3194:	01000000 	mrseq	r0, (UNDEF: 0)
    3198:	0004029c 	muleq	r4, ip, r2
    319c:	00631600 	rsbeq	r1, r3, r0, lsl #12
    31a0:	005b6301 	subseq	r6, fp, r1, lsl #6
    31a4:	91020000 	mrsls	r0, (UNDEF: 2)
    31a8:	ee170077 	mrc	0, 0, r0, cr7, cr7, {3}
    31ac:	01000013 	tsteq	r0, r3, lsl r0
    31b0:	00005b57 	andeq	r5, r0, r7, asr fp
    31b4:	002d6400 	eoreq	r6, sp, r0, lsl #8
    31b8:	00005420 	andeq	r5, r0, r0, lsr #8
    31bc:	299c0100 	ldmibcs	ip, {r8}
    31c0:	10000004 	andne	r0, r0, r4
    31c4:	01007672 	tsteq	r0, r2, ror r6
    31c8:	00005b5c 	andeq	r5, r0, ip, asr fp
    31cc:	6f910200 	svcvs	0x00910200
    31d0:	14a31700 	strtne	r1, [r3], #1792	; 0x700
    31d4:	4b010000 	blmi	431dc <startup-0x1ffbce24>
    31d8:	0000005b 	andeq	r0, r0, fp, asr r0
    31dc:	20002d10 	andcs	r2, r0, r0, lsl sp
    31e0:	00000054 	andeq	r0, r0, r4, asr r0
    31e4:	04509c01 	ldrbeq	r9, [r0], #-3073	; 0xfffff3ff
    31e8:	72100000 	andsvc	r0, r0, #0
    31ec:	50010076 	andpl	r0, r1, r6, ror r0
    31f0:	0000005b 	andeq	r0, r0, fp, asr r0
    31f4:	006f9102 	rsbeq	r9, pc, r2, lsl #2
    31f8:	0014870f 	andseq	r8, r4, pc, lsl #14
    31fc:	e6450100 	strb	r0, [r5], -r0, lsl #2
    3200:	2a20002c 	bcs	8032b8 <startup-0x1f7fcd48>
    3204:	01000000 	mrseq	r0, (UNDEF: 0)
    3208:	0004749c 	muleq	r4, ip, r4
    320c:	119c1300 	orrsne	r1, ip, r0, lsl #6
    3210:	45010000 	strmi	r0, [r1, #-0]
    3214:	0000005b 	andeq	r0, r0, fp, asr r0
    3218:	00779102 	rsbseq	r9, r7, r2, lsl #2
    321c:	0014630f 	andseq	r6, r4, pc, lsl #6
    3220:	bc3f0100 	ldflts	f0, [pc], #-0	; 3228 <startup-0x1fffcdd8>
    3224:	2a20002c 	bcs	8032dc <startup-0x1f7fcd24>
    3228:	01000000 	mrseq	r0, (UNDEF: 0)
    322c:	0004989c 	muleq	r4, ip, r8
    3230:	10c41300 	sbcne	r1, r4, r0, lsl #6
    3234:	3f010000 	svccc	0x00010000
    3238:	0000005b 	andeq	r0, r0, fp, asr r0
    323c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    3240:	0014b518 	andseq	fp, r4, r8, lsl r5
    3244:	6c370100 	ldfvss	f0, [r7], #-0
    3248:	5020002c 	eorpl	r0, r0, ip, lsr #32
    324c:	01000000 	mrseq	r0, (UNDEF: 0)
    3250:	0004c69c 	muleq	r4, ip, r6
    3254:	00781600 	rsbseq	r1, r8, r0, lsl #12
    3258:	005b3701 	subseq	r3, fp, r1, lsl #14
    325c:	91020000 	mrsls	r0, (UNDEF: 2)
    3260:	0063106f 	rsbeq	r1, r3, pc, rrx
    3264:	005b3901 	subseq	r3, fp, r1, lsl #18
    3268:	91020000 	mrsls	r0, (UNDEF: 2)
    326c:	50190077 	andspl	r0, r9, r7, ror r0
    3270:	01000014 	tsteq	r0, r4, lsl r0
    3274:	002c282f 	eoreq	r2, ip, pc, lsr #16
    3278:	00004420 	andeq	r4, r0, r0, lsr #8
    327c:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    3280:	2f010078 	svccs	0x00010078
    3284:	0000005b 	andeq	r0, r0, fp, asr r0
    3288:	106f9102 	rsbne	r9, pc, r2, lsl #2
    328c:	31010063 	tstcc	r1, r3, rrx
    3290:	0000005b 	andeq	r0, r0, fp, asr r0
    3294:	00779102 	rsbseq	r9, r7, r2, lsl #2
    3298:	00014000 	andeq	r4, r1, r0
    329c:	81000400 	tsthi	r0, r0, lsl #8
    32a0:	0400000c 	streq	r0, [r0], #-12
    32a4:	00008101 	andeq	r8, r0, r1, lsl #2
    32a8:	15660c00 	strbne	r0, [r6, #-3072]!	; 0xfffff400
    32ac:	31480000 	mrscc	r0, (UNDEF: 72)
    32b0:	00942000 	addseq	r2, r4, r0
    32b4:	109f0000 	addsne	r0, pc, r0
    32b8:	e4020000 	str	r0, [r2], #-0
    32bc:	14000005 	strne	r0, [r0], #-5
    32c0:	006a0402 	rsbeq	r0, sl, r2, lsl #8
    32c4:	61030000 	mrsvs	r0, (UNDEF: 3)
    32c8:	02000015 	andeq	r0, r0, #21
    32cc:	00006a05 	andeq	r6, r0, r5, lsl #20
    32d0:	60030000 	andvs	r0, r3, r0
    32d4:	02000002 	andeq	r0, r0, #2
    32d8:	00006a06 	andeq	r6, r0, r6, lsl #20
    32dc:	89030400 	stmdbhi	r3, {sl}
    32e0:	02000003 	andeq	r0, r0, #3
    32e4:	00007708 	andeq	r7, r0, r8, lsl #14
    32e8:	79030800 	stmdbvc	r3, {fp}
    32ec:	02000003 	andeq	r0, r0, #3
    32f0:	00007709 	andeq	r7, r0, r9, lsl #14
    32f4:	65030c00 	strvs	r0, [r3, #-3072]	; 0xfffff400
    32f8:	02000002 	andeq	r0, r0, #2
    32fc:	0000940c 	andeq	r9, r0, ip, lsl #8
    3300:	04001000 	streq	r1, [r0], #-0
    3304:	00007004 	andeq	r7, r0, r4
    3308:	08010500 	stmdaeq	r1, {r8, sl}
    330c:	0000044a 	andeq	r0, r0, sl, asr #8
    3310:	69050406 	stmdbvs	r5, {r1, r2, sl}
    3314:	0700746e 	streq	r7, [r0, -lr, ror #8]
    3318:	0000008e 	andeq	r0, r0, lr, lsl #1
    331c:	00008e08 	andeq	r8, r0, r8, lsl #28
    3320:	00770800 	rsbseq	r0, r7, r0, lsl #16
    3324:	04000000 	streq	r0, [r0], #-0
    3328:	00002104 	andeq	r2, r0, r4, lsl #2
    332c:	7e040400 	cfcpysvc	mvf0, mvf4
    3330:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    3334:	000005e5 	andeq	r0, r0, r5, ror #11
    3338:	00210d02 	eoreq	r0, r1, r2, lsl #26
    333c:	480a0000 	stmdami	sl, {}	; <UNPREDICTABLE>
    3340:	01000015 	tsteq	r0, r5, lsl r0
    3344:	0031a20c 	eorseq	sl, r1, ip, lsl #4
    3348:	00003a20 	andeq	r3, r0, r0, lsr #20
    334c:	f39c0100 	vaddw.u16	q0, q6, d0
    3350:	0b000000 	bleq	3358 <startup-0x1fffcca8>
    3354:	006a626f 	rsbeq	r6, sl, pc, ror #4
    3358:	00f30c01 	rscseq	r0, r3, r1, lsl #24
    335c:	91020000 	mrsls	r0, (UNDEF: 2)
    3360:	15610c74 	strbne	r0, [r1, #-3188]!	; 0xfffff38c
    3364:	0c010000 	stceq	0, cr0, [r1], {-0}
    3368:	0000006a 	andeq	r0, r0, sl, rrx
    336c:	0c709102 	ldfeqp	f1, [r0], #-8
    3370:	00000260 	andeq	r0, r0, r0, ror #4
    3374:	006a0c01 	rsbeq	r0, sl, r1, lsl #24
    3378:	91020000 	mrsls	r0, (UNDEF: 2)
    337c:	03790c6c 	cmneq	r9, #108, 24	; 0x6c00
    3380:	0c010000 	stceq	0, cr0, [r1], {-0}
    3384:	00000077 	andeq	r0, r0, r7, ror r0
    3388:	00689102 	rsbeq	r9, r8, r2, lsl #2
    338c:	009a0404 	addseq	r0, sl, r4, lsl #8
    3390:	650d0000 	strvs	r0, [sp, #-0]
    3394:	01000002 	tsteq	r0, r2
    3398:	00314804 	eorseq	r4, r1, r4, lsl #16
    339c:	00005a20 	andeq	r5, r0, r0, lsr #20
    33a0:	0c9c0100 	ldfeqs	f0, [ip], {0}
    33a4:	000006c8 	andeq	r0, r0, r8, asr #13
    33a8:	00f30401 	rscseq	r0, r3, r1, lsl #8
    33ac:	91020000 	mrsls	r0, (UNDEF: 2)
    33b0:	15570c6c 	ldrbne	r0, [r7, #-3180]	; 0xfffff394
    33b4:	04010000 	streq	r0, [r1], #-0
    33b8:	00000077 	andeq	r0, r0, r7, ror r0
    33bc:	0e689102 	lgneqe	f1, f2
    33c0:	0000150b 	andeq	r1, r0, fp, lsl #10
    33c4:	00770501 	rsbseq	r0, r7, r1, lsl #10
    33c8:	91020000 	mrsls	r0, (UNDEF: 2)
    33cc:	13e70e74 	mvnne	r0, #116, 28	; 0x740
    33d0:	06010000 	streq	r0, [r1], -r0
    33d4:	00000077 	andeq	r0, r0, r7, ror r0
    33d8:	00709102 	rsbseq	r9, r0, r2, lsl #2
    33dc:	0002e000 	andeq	lr, r2, r0
    33e0:	4c000400 	cfstrsmi	mvf0, [r0], {-0}
    33e4:	0400000d 	streq	r0, [r0], #-13
    33e8:	00008101 	andeq	r8, r0, r1, lsl #2
    33ec:	16130c00 	ldrne	r0, [r3], -r0, lsl #24
    33f0:	31dc0000 	bicscc	r0, ip, r0
    33f4:	00e82000 	rsceq	r2, r8, r0
    33f8:	11190000 	tstne	r9, r0
    33fc:	0c020000 	stceq	0, cr0, [r2], {-0}
    3400:	004e0502 	subeq	r0, lr, r2, lsl #10
    3404:	06030000 	streq	r0, [r3], -r0
    3408:	02000003 	andeq	r0, r0, #3
    340c:	00004e07 	andeq	r4, r0, r7, lsl #28
    3410:	5f030000 	svcpl	0x00030000
    3414:	02000006 	andeq	r0, r0, #6
    3418:	00004e08 	andeq	r4, r0, r8, lsl #28
    341c:	9c030400 	cfstrsls	mvf0, [r3], {-0}
    3420:	02000011 	andeq	r0, r0, #17
    3424:	00005509 	andeq	r5, r0, r9, lsl #10
    3428:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    342c:	032a0704 			; <UNDEFINED> instruction: 0x032a0704
    3430:	04050000 	streq	r0, [r5], #-0
    3434:	0000005b 	andeq	r0, r0, fp, asr r0
    3438:	41080104 	tstmi	r8, r4, lsl #2
    343c:	06000004 	streq	r0, [r0], -r4
    3440:	000012ee 	andeq	r1, r0, lr, ror #5
    3444:	00210a02 	eoreq	r0, r1, r2, lsl #20
    3448:	16070000 	strne	r0, [r7], -r0
    344c:	0c000000 	stceq	0, cr0, [r0], {-0}
    3450:	009e0603 	addseq	r0, lr, r3, lsl #12
    3454:	2c030000 	stccs	0, cr0, [r3], {-0}
    3458:	03000005 	movweq	r0, #5
    345c:	00009e07 	andeq	r9, r0, r7, lsl #28
    3460:	1d030000 	stcne	0, cr0, [r3, #-0]
    3464:	03000000 	movweq	r0, #0
    3468:	00009e08 	andeq	r9, r0, r8, lsl #28
    346c:	12030400 	andne	r0, r3, #0, 8
    3470:	03000000 	movweq	r0, #0
    3474:	00009e09 	andeq	r9, r0, r9, lsl #28
    3478:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    347c:	00006204 	andeq	r6, r0, r4, lsl #4
    3480:	0fd70600 	svceq	0x00d70600
    3484:	0a030000 	beq	c348c <startup-0x1ff3cb74>
    3488:	0000006d 	andeq	r0, r0, sp, rrx
    348c:	00062407 	andeq	r2, r6, r7, lsl #8
    3490:	06042400 	streq	r2, [r4], -r0, lsl #8
    3494:	00000128 	andeq	r0, r0, r8, lsr #2
    3498:	0003de03 	andeq	sp, r3, r3, lsl #28
    349c:	28070400 	stmdacs	r7, {sl}
    34a0:	00000001 	andeq	r0, r0, r1
    34a4:	00063003 	andeq	r3, r6, r3
    34a8:	2e080400 	cfcpyscs	mvf0, mvf8
    34ac:	04000001 	streq	r0, [r0], #-1
    34b0:	00059703 	andeq	r9, r5, r3, lsl #14
    34b4:	2e090400 	cfcpyscs	mvf0, mvf9
    34b8:	08000001 	stmdaeq	r0, {r0}
    34bc:	0005c303 	andeq	ip, r5, r3, lsl #6
    34c0:	460c0400 	strmi	r0, [ip], -r0, lsl #8
    34c4:	0c000001 	stceq	0, cr0, [r0], {1}
    34c8:	0002ff03 	andeq	pc, r2, r3, lsl #30
    34cc:	460d0400 	strmi	r0, [sp], -r0, lsl #8
    34d0:	10000001 	andne	r0, r0, r1
    34d4:	0003f003 	andeq	pc, r3, r3
    34d8:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
    34dc:	14000001 	strne	r0, [r0], #-1
    34e0:	00005203 	andeq	r5, r0, r3, lsl #4
    34e4:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
    34e8:	18000001 	stmdane	r0, {r0}
    34ec:	00036f03 	andeq	r6, r3, r3, lsl #30
    34f0:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
    34f4:	1c000001 	stcne	0, cr0, [r0], {1}
    34f8:	00037f03 	andeq	r7, r3, r3, lsl #30
    34fc:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
    3500:	20000001 	andcs	r0, r0, r1
    3504:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    3508:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    350c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    3510:	40090074 	andmi	r0, r9, r4, ror r0
    3514:	0a000001 	beq	3520 <startup-0x1fffcae0>
    3518:	00000140 	andeq	r0, r0, r0, asr #2
    351c:	af040500 	svcge	0x00040500
    3520:	05000000 	streq	r0, [r0, #-0]
    3524:	00013504 	andeq	r3, r1, r4, lsl #10
    3528:	06250600 	strteq	r0, [r5], -r0, lsl #12
    352c:	15040000 	strne	r0, [r4, #-0]
    3530:	000000af 	andeq	r0, r0, pc, lsr #1
    3534:	0001620b 	andeq	r6, r1, fp, lsl #4
    3538:	00016200 	andeq	r6, r1, r0, lsl #4
    353c:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    3540:	00014c04 	andeq	r4, r1, r4, lsl #24
    3544:	04c40d00 	strbeq	r0, [r4], #3328	; 0xd00
    3548:	1c040000 	stcne	0, cr0, [r4], {-0}
    354c:	00000157 	andeq	r0, r0, r7, asr r1
    3550:	0003b50d 	andeq	fp, r3, sp, lsl #10
    3554:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
    3558:	0b000001 	bleq	3564 <startup-0x1fffca9c>
    355c:	0000005b 	andeq	r0, r0, fp, asr r0
    3560:	0000018f 	andeq	r0, r0, pc, lsl #3
    3564:	00018f0e 	andeq	r8, r1, lr, lsl #30
    3568:	0003ff00 	andeq	pc, r3, r0, lsl #30
    356c:	9c070404 	cfstrsls	mvf0, [r7], {4}
    3570:	0f000003 	svceq	0x00000003
    3574:	00001643 	andeq	r1, r0, r3, asr #12
    3578:	017e0305 	cmneq	lr, r5, lsl #6
    357c:	03050000 	movweq	r0, #20480	; 0x5000
    3580:	20007ba4 	andcs	r7, r0, r4, lsr #23
    3584:	0015e30f 	andseq	lr, r5, pc, lsl #6
    3588:	7e030600 	cfmadd32vc	mvax0, mvfx0, mvfx3, mvfx0
    358c:	05000001 	streq	r0, [r0, #-1]
    3590:	007fa403 	rsbseq	sl, pc, r3, lsl #8
    3594:	15c00f20 	strbne	r0, [r0, #3872]	; 0xf20
    3598:	03070000 	movweq	r0, #28672	; 0x7000
    359c:	0000017e 	andeq	r0, r0, lr, ror r1
    35a0:	83a40305 			; <UNDEFINED> instruction: 0x83a40305
    35a4:	a5102000 	ldrge	r2, [r0, #-0]
    35a8:	01000015 	tsteq	r0, r5, lsl r0
    35ac:	00009e08 	andeq	r9, r0, r8, lsl #28
    35b0:	80030500 	andhi	r0, r3, r0, lsl #10
    35b4:	10200059 	eorne	r0, r0, r9, asr r0
    35b8:	0000167f 	andeq	r1, r0, pc, ror r6
    35bc:	009e0901 	addseq	r0, lr, r1, lsl #18
    35c0:	03050000 	movweq	r0, #20480	; 0x5000
    35c4:	2000594c 	andcs	r5, r0, ip, asr #18
    35c8:	00160610 	andseq	r0, r6, r0, lsl r6
    35cc:	9e0a0100 	adflse	f0, f2, f0
    35d0:	05000000 	streq	r0, [r0, #-0]
    35d4:	00599003 	subseq	r9, r9, r3
    35d8:	16561020 	ldrbne	r1, [r6], -r0, lsr #32
    35dc:	0c010000 	stceq	0, cr0, [r1], {-0}
    35e0:	00000062 	andeq	r0, r0, r2, rrx
    35e4:	59400305 	stmdbpl	r0, {r0, r2, r8, r9}^
    35e8:	f5102000 			; <UNDEFINED> instruction: 0xf5102000
    35ec:	01000015 	tsteq	r0, r5, lsl r0
    35f0:	0000620d 	andeq	r6, r0, sp, lsl #4
    35f4:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
    35f8:	10200059 	eorne	r0, r0, r9, asr r0
    35fc:	000015d3 	ldrdeq	r1, [r0], -r3
    3600:	00620e01 	rsbeq	r0, r2, r1, lsl #28
    3604:	03050000 	movweq	r0, #20480	; 0x5000
    3608:	20005928 	andcs	r5, r0, r8, lsr #18
    360c:	00167410 	andseq	r7, r6, r0, lsl r4
    3610:	4c110100 	ldfmis	f0, [r1], {-0}
    3614:	05000001 	streq	r0, [r0, #-1]
    3618:	00595003 	subseq	r5, r9, r3
    361c:	15981020 	ldrne	r1, [r8, #32]
    3620:	12010000 	andne	r0, r1, #0
    3624:	000000a4 	andeq	r0, r0, r4, lsr #1
    3628:	59840305 	stmibpl	r4, {r0, r2, r8, r9}
    362c:	a40b2000 	strge	r2, [fp], #-0
    3630:	61000000 	mrsvs	r0, (UNDEF: 0)
    3634:	11000002 	tstne	r0, r2
    3638:	0000018f 	andeq	r0, r0, pc, lsl #3
    363c:	b2100000 	andslt	r0, r0, #0
    3640:	01000015 	tsteq	r0, r5, lsl r0
    3644:	00025113 	andeq	r5, r2, r3, lsl r1
    3648:	74030500 	strvc	r0, [r3], #-1280	; 0xfffffb00
    364c:	12200059 	eorne	r0, r0, #89	; 0x59
    3650:	00001667 	andeq	r1, r0, r7, ror #12
    3654:	32502201 	subscc	r2, r0, #268435456	; 0x10000000
    3658:	00742000 	rsbseq	r2, r4, r0
    365c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3660:	000002a7 	andeq	r0, r0, r7, lsr #5
    3664:	00167413 	andseq	r7, r6, r3, lsl r4
    3668:	62220100 	eorvs	r0, r2, #0, 2
    366c:	02000001 	andeq	r0, r0, #1
    3670:	4f0f6c91 	svcmi	0x000f6c91
    3674:	01000008 	tsteq	r0, r8
    3678:	00012e23 	andeq	r2, r1, r3, lsr #28
    367c:	a4030500 	strge	r0, [r3], #-1280	; 0xfffffb00
    3680:	00200087 	eoreq	r0, r0, r7, lsl #1
    3684:	00041714 	andeq	r1, r4, r4, lsl r7
    3688:	dc140100 	ldfles	f0, [r4], {-0}
    368c:	74200031 	strtvc	r0, [r0], #-49	; 0xffffffcf
    3690:	01000000 	mrseq	r0, (UNDEF: 0)
    3694:	0ce40f9c 	stcleq	15, cr0, [r4], #624	; 0x270
    3698:	16010000 	strne	r0, [r1], -r0
    369c:	0000009e 	muleq	r0, lr, r0
    36a0:	0f749102 	svceq	0x00749102
    36a4:	00000cee 	andeq	r0, r0, lr, ror #25
    36a8:	009e1901 	addseq	r1, lr, r1, lsl #18
    36ac:	91020000 	mrsls	r0, (UNDEF: 2)
    36b0:	0ae40f70 	beq	ff907478 <firstTime.4040+0xdf8fe0d0>
    36b4:	1c010000 	stcne	0, cr0, [r1], {-0}
    36b8:	0000009e 	muleq	r0, lr, r0
    36bc:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    36c0:	0002e000 	andeq	lr, r2, r0
    36c4:	55000400 	strpl	r0, [r0, #-1024]	; 0xfffffc00
    36c8:	0400000e 	streq	r0, [r0], #-14
    36cc:	00008101 	andeq	r8, r0, r1, lsl #2
    36d0:	16cc0c00 	strbne	r0, [ip], r0, lsl #24
    36d4:	32c40000 	sbccc	r0, r4, #0
    36d8:	00e82000 	rsceq	r2, r8, r0
    36dc:	11f30000 	mvnsne	r0, r0
    36e0:	0c020000 	stceq	0, cr0, [r2], {-0}
    36e4:	004e0502 	subeq	r0, lr, r2, lsl #10
    36e8:	06030000 	streq	r0, [r3], -r0
    36ec:	02000003 	andeq	r0, r0, #3
    36f0:	00004e07 	andeq	r4, r0, r7, lsl #28
    36f4:	5f030000 	svcpl	0x00030000
    36f8:	02000006 	andeq	r0, r0, #6
    36fc:	00004e08 	andeq	r4, r0, r8, lsl #28
    3700:	9c030400 	cfstrsls	mvf0, [r3], {-0}
    3704:	02000011 	andeq	r0, r0, #17
    3708:	00005509 	andeq	r5, r0, r9, lsl #10
    370c:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    3710:	032a0704 			; <UNDEFINED> instruction: 0x032a0704
    3714:	04050000 	streq	r0, [r5], #-0
    3718:	0000005b 	andeq	r0, r0, fp, asr r0
    371c:	41080104 	tstmi	r8, r4, lsl #2
    3720:	06000004 	streq	r0, [r0], -r4
    3724:	000012ee 	andeq	r1, r0, lr, ror #5
    3728:	00210a02 	eoreq	r0, r1, r2, lsl #20
    372c:	16070000 	strne	r0, [r7], -r0
    3730:	0c000000 	stceq	0, cr0, [r0], {-0}
    3734:	009e0603 	addseq	r0, lr, r3, lsl #12
    3738:	2c030000 	stccs	0, cr0, [r3], {-0}
    373c:	03000005 	movweq	r0, #5
    3740:	00009e07 	andeq	r9, r0, r7, lsl #28
    3744:	1d030000 	stcne	0, cr0, [r3, #-0]
    3748:	03000000 	movweq	r0, #0
    374c:	00009e08 	andeq	r9, r0, r8, lsl #28
    3750:	12030400 	andne	r0, r3, #0, 8
    3754:	03000000 	movweq	r0, #0
    3758:	00009e09 	andeq	r9, r0, r9, lsl #28
    375c:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    3760:	00006204 	andeq	r6, r0, r4, lsl #4
    3764:	0fd70600 	svceq	0x00d70600
    3768:	0a030000 	beq	c3770 <startup-0x1ff3c890>
    376c:	0000006d 	andeq	r0, r0, sp, rrx
    3770:	00062407 	andeq	r2, r6, r7, lsl #8
    3774:	06042400 	streq	r2, [r4], -r0, lsl #8
    3778:	00000128 	andeq	r0, r0, r8, lsr #2
    377c:	0003de03 	andeq	sp, r3, r3, lsl #28
    3780:	28070400 	stmdacs	r7, {sl}
    3784:	00000001 	andeq	r0, r0, r1
    3788:	00063003 	andeq	r3, r6, r3
    378c:	2e080400 	cfcpyscs	mvf0, mvf8
    3790:	04000001 	streq	r0, [r0], #-1
    3794:	00059703 	andeq	r9, r5, r3, lsl #14
    3798:	2e090400 	cfcpyscs	mvf0, mvf9
    379c:	08000001 	stmdaeq	r0, {r0}
    37a0:	0005c303 	andeq	ip, r5, r3, lsl #6
    37a4:	460c0400 	strmi	r0, [ip], -r0, lsl #8
    37a8:	0c000001 	stceq	0, cr0, [r0], {1}
    37ac:	0002ff03 	andeq	pc, r2, r3, lsl #30
    37b0:	460d0400 	strmi	r0, [sp], -r0, lsl #8
    37b4:	10000001 	andne	r0, r0, r1
    37b8:	0003f003 	andeq	pc, r3, r3
    37bc:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
    37c0:	14000001 	strne	r0, [r0], #-1
    37c4:	00005203 	andeq	r5, r0, r3, lsl #4
    37c8:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
    37cc:	18000001 	stmdane	r0, {r0}
    37d0:	00036f03 	andeq	r6, r3, r3, lsl #30
    37d4:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
    37d8:	1c000001 	stcne	0, cr0, [r0], {1}
    37dc:	00037f03 	andeq	r7, r3, r3, lsl #30
    37e0:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
    37e4:	20000001 	andcs	r0, r0, r1
    37e8:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    37ec:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    37f0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    37f4:	40090074 	andmi	r0, r9, r4, ror r0
    37f8:	0a000001 	beq	3804 <startup-0x1fffc7fc>
    37fc:	00000140 	andeq	r0, r0, r0, asr #2
    3800:	af040500 	svcge	0x00040500
    3804:	05000000 	streq	r0, [r0, #-0]
    3808:	00013504 	andeq	r3, r1, r4, lsl #10
    380c:	06250600 	strteq	r0, [r5], -r0, lsl #12
    3810:	15040000 	strne	r0, [r4, #-0]
    3814:	000000af 	andeq	r0, r0, pc, lsr #1
    3818:	0001620b 	andeq	r6, r1, fp, lsl #4
    381c:	00016200 	andeq	r6, r1, r0, lsl #4
    3820:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    3824:	00014c04 	andeq	r4, r1, r4, lsl #24
    3828:	04c40d00 	strbeq	r0, [r4], #3328	; 0xd00
    382c:	1c040000 	stcne	0, cr0, [r4], {-0}
    3830:	00000157 	andeq	r0, r0, r7, asr r1
    3834:	0003b50d 	andeq	fp, r3, sp, lsl #10
    3838:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
    383c:	0b000001 	bleq	3848 <startup-0x1fffc7b8>
    3840:	0000005b 	andeq	r0, r0, fp, asr r0
    3844:	0000018f 	andeq	r0, r0, pc, lsl #3
    3848:	00018f0e 	andeq	r8, r1, lr, lsl #30
    384c:	0003ff00 	andeq	pc, r3, r0, lsl #30
    3850:	9c070404 	cfstrsls	mvf0, [r7], {4}
    3854:	0f000003 	svceq	0x00000003
    3858:	00001699 	muleq	r0, r9, r6
    385c:	017e0305 	cmneq	lr, r5, lsl #6
    3860:	03050000 	movweq	r0, #20480	; 0x5000
    3864:	200087a8 	andcs	r8, r0, r8, lsr #15
    3868:	00175c0f 	andseq	r5, r7, pc, lsl #24
    386c:	7e030600 	cfmadd32vc	mvax0, mvfx0, mvfx3, mvfx0
    3870:	05000001 	streq	r0, [r0, #-1]
    3874:	008ba803 	addeq	sl, fp, r3, lsl #16
    3878:	17390f20 	ldrne	r0, [r9, -r0, lsr #30]!
    387c:	03070000 	movweq	r0, #28672	; 0x7000
    3880:	0000017e 	andeq	r0, r0, lr, ror r1
    3884:	8fa80305 	svchi	0x00a80305
    3888:	0f102000 	svceq	0x00102000
    388c:	01000017 	tsteq	r0, r7, lsl r0
    3890:	00009e08 	andeq	r9, r0, r8, lsl #28
    3894:	fc030500 	stc2	5, cr0, [r3], {-0}
    3898:	10200059 	eorne	r0, r0, r9, asr r0
    389c:	000016bf 			; <UNDEFINED> instruction: 0x000016bf
    38a0:	009e0901 	addseq	r0, lr, r1, lsl #18
    38a4:	03050000 	movweq	r0, #20480	; 0x5000
    38a8:	200059b8 			; <UNDEFINED> instruction: 0x200059b8
    38ac:	00168b10 	andseq	r8, r6, r0, lsl fp
    38b0:	9e0a0100 	adflse	f0, f2, f0
    38b4:	05000000 	streq	r0, [r0, #-0]
    38b8:	0059e003 	subseq	lr, r9, r3
    38bc:	16fd1020 	ldrbtne	r1, [sp], r0, lsr #32
    38c0:	0c010000 	stceq	0, cr0, [r1], {-0}
    38c4:	00000062 	andeq	r0, r0, r2, rrx
    38c8:	59e40305 	stmibpl	r4!, {r0, r2, r8, r9}^
    38cc:	ad102000 	ldcge	0, cr2, [r0, #-0]
    38d0:	01000016 	tsteq	r0, r6, lsl r0
    38d4:	0000620d 	andeq	r6, r0, sp, lsl #4
    38d8:	f0030500 			; <UNDEFINED> instruction: 0xf0030500
    38dc:	10200059 	eorne	r0, r0, r9, asr r0
    38e0:	0000177b 	andeq	r1, r0, fp, ror r7
    38e4:	00620e01 	rsbeq	r0, r2, r1, lsl #28
    38e8:	03050000 	movweq	r0, #20480	; 0x5000
    38ec:	200059d4 	ldrdcs	r5, [r0], -r4
    38f0:	00176f10 	andseq	r6, r7, r0, lsl pc
    38f4:	4c110100 	ldfmis	f0, [r1], {-0}
    38f8:	05000001 	streq	r0, [r0, #-1]
    38fc:	00599403 	subseq	r9, r9, r3, lsl #8
    3900:	171d1020 	ldrne	r1, [sp, -r0, lsr #32]
    3904:	12010000 	andne	r0, r1, #0
    3908:	000000a4 	andeq	r0, r0, r4, lsr #1
    390c:	59c80305 	stmibpl	r8, {r0, r2, r8, r9}^
    3910:	a40b2000 	strge	r2, [fp], #-0
    3914:	61000000 	mrsvs	r0, (UNDEF: 0)
    3918:	11000002 	tstne	r0, r2
    391c:	0000018f 	andeq	r0, r0, pc, lsl #3
    3920:	4d100000 	ldcmi	0, cr0, [r0, #-0]
    3924:	01000017 	tsteq	r0, r7, lsl r0
    3928:	00025113 	andeq	r5, r2, r3, lsl r1
    392c:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
    3930:	12200059 	eorne	r0, r0, #89	; 0x59
    3934:	0000172b 	andeq	r1, r0, fp, lsr #14
    3938:	33382201 	teqcc	r8, #268435456	; 0x10000000
    393c:	00742000 	rsbseq	r2, r4, r0
    3940:	9c010000 	stcls	0, cr0, [r1], {-0}
    3944:	000002a7 	andeq	r0, r0, r7, lsr #5
    3948:	00176f13 	andseq	r6, r7, r3, lsl pc
    394c:	62220100 	eorvs	r0, r2, #0, 2
    3950:	02000001 	andeq	r0, r0, #1
    3954:	4f0f6c91 	svcmi	0x000f6c91
    3958:	01000008 	tsteq	r0, r8
    395c:	00012e23 	andeq	r2, r1, r3, lsr #28
    3960:	a8030500 	stmdage	r3, {r8, sl}
    3964:	00200093 	mlaeq	r0, r3, r0, r0
    3968:	00041714 	andeq	r1, r4, r4, lsl r7
    396c:	c4140100 	ldrgt	r0, [r4], #-256	; 0xffffff00
    3970:	74200032 	strtvc	r0, [r0], #-50	; 0xffffffce
    3974:	01000000 	mrseq	r0, (UNDEF: 0)
    3978:	0ce40f9c 	stcleq	15, cr0, [r4], #624	; 0x270
    397c:	16010000 	strne	r0, [r1], -r0
    3980:	0000009e 	muleq	r0, lr, r0
    3984:	0f749102 	svceq	0x00749102
    3988:	00000cee 	andeq	r0, r0, lr, ror #25
    398c:	009e1901 	addseq	r1, lr, r1, lsl #18
    3990:	91020000 	mrsls	r0, (UNDEF: 2)
    3994:	0ae40f70 	beq	ff90775c <firstTime.4040+0xdf8fe3b4>
    3998:	1c010000 	stcne	0, cr0, [r1], {-0}
    399c:	0000009e 	muleq	r0, lr, r0
    39a0:	006c9102 	rsbeq	r9, ip, r2, lsl #2
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	01130200 	tsteq	r3, r0, lsl #4
  14:	0b3a0b0b 	bleq	e82c48 <startup-0x1f17d3b8>
  18:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  1c:	0d030000 	stceq	0, cr0, [r3, #-0]
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	000b3813 	andeq	r3, fp, r3, lsl r8
  2c:	00240400 	eoreq	r0, r4, r0, lsl #8
  30:	0b3e0b0b 	bleq	f82c64 <startup-0x1f07d39c>
  34:	00000e03 	andeq	r0, r0, r3, lsl #28
  38:	0b000f05 	bleq	3c54 <startup-0x1fffc3ac>
  3c:	0013490b 	andseq	r4, r3, fp, lsl #18
  40:	00160600 	andseq	r0, r6, r0, lsl #12
  44:	0b3a0e03 	bleq	e83858 <startup-0x1f17c7a8>
  48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  4c:	13070000 	movwne	r0, #28672	; 0x7000
  50:	0b0e0301 	bleq	380c5c <startup-0x1fc7f3a4>
  54:	3b0b3a0b 	blcc	2ce888 <startup-0x1fd31778>
  58:	0013010b 	andseq	r0, r3, fp, lsl #2
  5c:	00240800 	eoreq	r0, r4, r0, lsl #16
  60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
  64:	00000803 	andeq	r0, r0, r3, lsl #16
  68:	27011509 	strcs	r1, [r1, -r9, lsl #10]
  6c:	00130119 	andseq	r0, r3, r9, lsl r1
  70:	00050a00 	andeq	r0, r5, r0, lsl #20
  74:	00001349 	andeq	r1, r0, r9, asr #6
  78:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
  7c:	00130113 	andseq	r0, r3, r3, lsl r1
  80:	00210c00 	eoreq	r0, r1, r0, lsl #24
  84:	340d0000 	strcc	r0, [sp], #-0
  88:	3a0e0300 	bcc	380c90 <startup-0x1fc7f370>
  8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  90:	3c193f13 	ldccc	15, cr3, [r9], {19}
  94:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
  98:	13490021 	movtne	r0, #36897	; 0x9021
  9c:	0000052f 	andeq	r0, r0, pc, lsr #10
  a0:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
  a4:	000b2f13 	andeq	r2, fp, r3, lsl pc
  a8:	00341000 	eorseq	r1, r4, r0
  ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
  b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  b4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  b8:	34110000 	ldrcc	r0, [r1], #-0
  bc:	3a0e0300 	bcc	380cc4 <startup-0x1fc7f33c>
  c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  c4:	00180213 	andseq	r0, r8, r3, lsl r2
  c8:	00341200 	eorseq	r1, r4, r0, lsl #4
  cc:	0b3a0803 	bleq	e820e0 <startup-0x1f17df20>
  d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  d4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  d8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
  dc:	03193f01 	tsteq	r9, #1, 30
  e0:	3b0b3a0e 	blcc	2ce920 <startup-0x1fd316e0>
  e4:	1119270b 	tstne	r9, fp, lsl #14
  e8:	40061201 	andmi	r1, r6, r1, lsl #4
  ec:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  f0:	00001301 	andeq	r1, r0, r1, lsl #6
  f4:	03003414 	movweq	r3, #1044	; 0x414
  f8:	3b0b3a08 	blcc	2ce920 <startup-0x1fd316e0>
  fc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 100:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 104:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 108:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 10c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 110:	0b160000 	bleq	580118 <startup-0x1fa7fee8>
 114:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 118:	17000006 	strne	r0, [r0, -r6]
 11c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 120:	0b3a0e03 	bleq	e83934 <startup-0x1f17c6cc>
 124:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 128:	06120111 			; <UNDEFINED> instruction: 0x06120111
 12c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 130:	18000019 	stmdane	r0, {r0, r3, r4}
 134:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 138:	0b3a0e03 	bleq	e8394c <startup-0x1f17c6b4>
 13c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 140:	06120111 			; <UNDEFINED> instruction: 0x06120111
 144:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 148:	00000019 	andeq	r0, r0, r9, lsl r0
 14c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 150:	030b130e 	movweq	r1, #45838	; 0xb30e
 154:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 158:	00171006 	andseq	r1, r7, r6
 15c:	01130200 	tsteq	r3, r0, lsl #4
 160:	0b3a0b0b 	bleq	e82d94 <startup-0x1f17d26c>
 164:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 168:	0d030000 	stceq	0, cr0, [r3, #-0]
 16c:	3a0e0300 	bcc	380d74 <startup-0x1fc7f28c>
 170:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 174:	000b3813 	andeq	r3, fp, r3, lsl r8
 178:	00240400 	eoreq	r0, r4, r0, lsl #8
 17c:	0b3e0b0b 	bleq	f82db0 <startup-0x1f07d250>
 180:	00000e03 	andeq	r0, r0, r3, lsl #28
 184:	0b000f05 	bleq	3da0 <startup-0x1fffc260>
 188:	0013490b 	andseq	r4, r3, fp, lsl #18
 18c:	00160600 	andseq	r0, r6, r0, lsl #12
 190:	0b3a0e03 	bleq	e839a4 <startup-0x1f17c65c>
 194:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 198:	13070000 	movwne	r0, #28672	; 0x7000
 19c:	0b0e0301 	bleq	380da8 <startup-0x1fc7f258>
 1a0:	3b0b3a0b 	blcc	2ce9d4 <startup-0x1fd3162c>
 1a4:	0013010b 	andseq	r0, r3, fp, lsl #2
 1a8:	00240800 	eoreq	r0, r4, r0, lsl #16
 1ac:	0b3e0b0b 	bleq	f82de0 <startup-0x1f07d220>
 1b0:	00000803 	andeq	r0, r0, r3, lsl #16
 1b4:	27011509 	strcs	r1, [r1, -r9, lsl #10]
 1b8:	00130119 	andseq	r0, r3, r9, lsl r1
 1bc:	00050a00 	andeq	r0, r5, r0, lsl #20
 1c0:	00001349 	andeq	r1, r0, r9, asr #6
 1c4:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
 1c8:	00130113 	andseq	r0, r3, r3, lsl r1
 1cc:	00210c00 	eoreq	r0, r1, r0, lsl #24
 1d0:	340d0000 	strcc	r0, [sp], #-0
 1d4:	3a0e0300 	bcc	380ddc <startup-0x1fc7f224>
 1d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1dc:	3c193f13 	ldccc	15, cr3, [r9], {19}
 1e0:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
 1e4:	13470034 	movtne	r0, #28724	; 0x7034
 1e8:	0b3b0b3a 	bleq	ec2ed8 <startup-0x1f13d128>
 1ec:	00001802 	andeq	r1, r0, r2, lsl #16
 1f0:	3f012e0f 	svccc	0x00012e0f
 1f4:	3a0e0319 	bcc	380e60 <startup-0x1fc7f1a0>
 1f8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 1fc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 200:	96184006 	ldrls	r4, [r8], -r6
 204:	13011942 	movwne	r1, #6466	; 0x1942
 208:	05100000 	ldreq	r0, [r0, #-0]
 20c:	3a0e0300 	bcc	380e14 <startup-0x1fc7f1ec>
 210:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 214:	00180213 	andseq	r0, r8, r3, lsl r2
 218:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 21c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 220:	0b3b0b3a 	bleq	ec2f10 <startup-0x1f13d0f0>
 224:	01111927 	tsteq	r1, r7, lsr #18
 228:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 22c:	00194297 	mulseq	r9, r7, r2
 230:	11010000 	mrsne	r0, (UNDEF: 1)
 234:	130e2501 	movwne	r2, #58625	; 0xe501
 238:	110e030b 	tstne	lr, fp, lsl #6
 23c:	10061201 	andne	r1, r6, r1, lsl #4
 240:	02000017 	andeq	r0, r0, #23
 244:	0b0b0113 	bleq	2c0698 <startup-0x1fd3f968>
 248:	0b3b0b3a 	bleq	ec2f38 <startup-0x1f13d0c8>
 24c:	00001301 	andeq	r1, r0, r1, lsl #6
 250:	03000d03 	movweq	r0, #3331	; 0xd03
 254:	3b0b3a0e 	blcc	2cea94 <startup-0x1fd3156c>
 258:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 25c:	0400000b 	streq	r0, [r0], #-11
 260:	0b0b0024 	bleq	2c02f8 <startup-0x1fd3fd08>
 264:	0e030b3e 	vmoveq.16	d3[0], r0
 268:	0f050000 	svceq	0x00050000
 26c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 270:	06000013 			; <UNDEFINED> instruction: 0x06000013
 274:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 278:	0b3b0b3a 	bleq	ec2f68 <startup-0x1f13d098>
 27c:	00001349 	andeq	r1, r0, r9, asr #6
 280:	03011307 	movweq	r1, #4871	; 0x1307
 284:	3a0b0b0e 	bcc	2c2ec4 <startup-0x1fd3d13c>
 288:	010b3b0b 	tsteq	fp, fp, lsl #22
 28c:	08000013 	stmdaeq	r0, {r0, r1, r4}
 290:	0b0b0024 	bleq	2c0328 <startup-0x1fd3fcd8>
 294:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 298:	15090000 	strne	r0, [r9, #-0]
 29c:	01192701 	tsteq	r9, r1, lsl #14
 2a0:	0a000013 	beq	2f4 <startup-0x1ffffd0c>
 2a4:	13490005 	movtne	r0, #36869	; 0x9005
 2a8:	010b0000 	mrseq	r0, (UNDEF: 11)
 2ac:	01134901 	tsteq	r3, r1, lsl #18
 2b0:	0c000013 	stceq	0, cr0, [r0], {19}
 2b4:	00000021 	andeq	r0, r0, r1, lsr #32
 2b8:	0300340d 	movweq	r3, #1037	; 0x40d
 2bc:	3b0b3a0e 	blcc	2ceafc <startup-0x1fd31504>
 2c0:	3f13490b 	svccc	0x0013490b
 2c4:	00193c19 	andseq	r3, r9, r9, lsl ip
 2c8:	00210e00 	eoreq	r0, r1, r0, lsl #28
 2cc:	0b2f1349 	bleq	bc4ff8 <startup-0x1f43b008>
 2d0:	340f0000 	strcc	r0, [pc], #-0	; 2d8 <startup-0x1ffffd28>
 2d4:	3a0e0300 	bcc	380edc <startup-0x1fc7f124>
 2d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2dc:	00180213 	andseq	r0, r8, r3, lsl r2
 2e0:	00341000 	eorseq	r1, r4, r0
 2e4:	0b3a0e03 	bleq	e83af8 <startup-0x1f17c508>
 2e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2ec:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 2f0:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 2f4:	03193f01 	tsteq	r9, #1, 30
 2f8:	3b0b3a0e 	blcc	2ceb38 <startup-0x1fd314c8>
 2fc:	1119270b 	tstne	r9, fp, lsl #14
 300:	40061201 	andmi	r1, r6, r1, lsl #4
 304:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 308:	00001301 	andeq	r1, r0, r1, lsl #6
 30c:	03000512 	movweq	r0, #1298	; 0x512
 310:	3b0b3a0e 	blcc	2ceb50 <startup-0x1fd314b0>
 314:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 318:	13000018 	movwne	r0, #24
 31c:	0e03012e 	adfeqsp	f0, f3, #0.5
 320:	0b3b0b3a 	bleq	ec3010 <startup-0x1f13cff0>
 324:	01111927 	tsteq	r1, r7, lsr #18
 328:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 32c:	00194296 	mulseq	r9, r6, r2
 330:	11010000 	mrsne	r0, (UNDEF: 1)
 334:	130e2501 	movwne	r2, #58625	; 0xe501
 338:	110e030b 	tstne	lr, fp, lsl #6
 33c:	10061201 	andne	r1, r6, r1, lsl #4
 340:	02000017 	andeq	r0, r0, #23
 344:	0b0b0024 	bleq	2c03dc <startup-0x1fd3fc24>
 348:	0e030b3e 	vmoveq.16	d3[0], r0
 34c:	13030000 	movwne	r0, #12288	; 0x3000
 350:	3a0b0b01 	bcc	2c2f5c <startup-0x1fd3d0a4>
 354:	010b3b0b 	tsteq	fp, fp, lsl #22
 358:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 35c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 360:	0b3b0b3a 	bleq	ec3050 <startup-0x1f13cfb0>
 364:	0b381349 	bleq	e05090 <startup-0x1f1faf70>
 368:	0f050000 	svceq	0x00050000
 36c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 370:	06000013 			; <UNDEFINED> instruction: 0x06000013
 374:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 378:	0b3b0b3a 	bleq	ec3068 <startup-0x1f13cf98>
 37c:	00001349 	andeq	r1, r0, r9, asr #6
 380:	03011307 	movweq	r1, #4871	; 0x1307
 384:	3a0b0b0e 	bcc	2c2fc4 <startup-0x1fd3d03c>
 388:	010b3b0b 	tsteq	fp, fp, lsl #22
 38c:	08000013 	stmdaeq	r0, {r0, r1, r4}
 390:	0b0b0024 	bleq	2c0428 <startup-0x1fd3fbd8>
 394:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 398:	15090000 	strne	r0, [r9, #-0]
 39c:	01192701 	tsteq	r9, r1, lsl #14
 3a0:	0a000013 	beq	3f4 <startup-0x1ffffc0c>
 3a4:	13490005 	movtne	r0, #36869	; 0x9005
 3a8:	010b0000 	mrseq	r0, (UNDEF: 11)
 3ac:	01134901 	tsteq	r3, r1, lsl #18
 3b0:	0c000013 	stceq	0, cr0, [r0], {19}
 3b4:	00000021 	andeq	r0, r0, r1, lsr #32
 3b8:	0300340d 	movweq	r3, #1037	; 0x40d
 3bc:	3b0b3a0e 	blcc	2cebfc <startup-0x1fd31404>
 3c0:	3f13490b 	svccc	0x0013490b
 3c4:	00193c19 	andseq	r3, r9, r9, lsl ip
 3c8:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
 3cc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 3d0:	0b3b0b3a 	bleq	ec30c0 <startup-0x1f13cf40>
 3d4:	01111927 	tsteq	r1, r7, lsr #18
 3d8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3dc:	00194296 	mulseq	r9, r6, r2
 3e0:	00050f00 	andeq	r0, r5, r0, lsl #30
 3e4:	0b3a0e03 	bleq	e83bf8 <startup-0x1f17c408>
 3e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3ec:	00001802 	andeq	r1, r0, r2, lsl #16
 3f0:	03003410 	movweq	r3, #1040	; 0x410
 3f4:	3b0b3a0e 	blcc	2cec34 <startup-0x1fd313cc>
 3f8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 3fc:	00000018 	andeq	r0, r0, r8, lsl r0
 400:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 404:	030b130e 	movweq	r1, #45838	; 0xb30e
 408:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 40c:	00171006 	andseq	r1, r7, r6
 410:	01130200 	tsteq	r3, r0, lsl #4
 414:	0b3a0b0b 	bleq	e83048 <startup-0x1f17cfb8>
 418:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 41c:	0d030000 	stceq	0, cr0, [r3, #-0]
 420:	3a0e0300 	bcc	381028 <startup-0x1fc7efd8>
 424:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 428:	000b3813 	andeq	r3, fp, r3, lsl r8
 42c:	00240400 	eoreq	r0, r4, r0, lsl #8
 430:	0b3e0b0b 	bleq	f83064 <startup-0x1f07cf9c>
 434:	00000e03 	andeq	r0, r0, r3, lsl #28
 438:	0b000f05 	bleq	4054 <startup-0x1fffbfac>
 43c:	0013490b 	andseq	r4, r3, fp, lsl #18
 440:	00160600 	andseq	r0, r6, r0, lsl #12
 444:	0b3a0e03 	bleq	e83c58 <startup-0x1f17c3a8>
 448:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 44c:	13070000 	movwne	r0, #28672	; 0x7000
 450:	0b0e0301 	bleq	38105c <startup-0x1fc7efa4>
 454:	3b0b3a0b 	blcc	2cec88 <startup-0x1fd31378>
 458:	0013010b 	andseq	r0, r3, fp, lsl #2
 45c:	00240800 	eoreq	r0, r4, r0, lsl #16
 460:	0b3e0b0b 	bleq	f83094 <startup-0x1f07cf6c>
 464:	00000803 	andeq	r0, r0, r3, lsl #16
 468:	27011509 	strcs	r1, [r1, -r9, lsl #10]
 46c:	00130119 	andseq	r0, r3, r9, lsl r1
 470:	00050a00 	andeq	r0, r5, r0, lsl #20
 474:	00001349 	andeq	r1, r0, r9, asr #6
 478:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
 47c:	00130113 	andseq	r0, r3, r3, lsl r1
 480:	00210c00 	eoreq	r0, r1, r0, lsl #24
 484:	340d0000 	strcc	r0, [sp], #-0
 488:	3a0e0300 	bcc	381090 <startup-0x1fc7ef70>
 48c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 490:	3c193f13 	ldccc	15, cr3, [r9], {19}
 494:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
 498:	13490021 	movtne	r0, #36897	; 0x9021
 49c:	00000b2f 	andeq	r0, r0, pc, lsr #22
 4a0:	0300340f 	movweq	r3, #1039	; 0x40f
 4a4:	3b0b3a0e 	blcc	2cece4 <startup-0x1fd3131c>
 4a8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 4ac:	10000018 	andne	r0, r0, r8, lsl r0
 4b0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 4b4:	0b3b0b3a 	bleq	ec31a4 <startup-0x1f13ce5c>
 4b8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 4bc:	00001802 	andeq	r1, r0, r2, lsl #16
 4c0:	3f012e11 	svccc	0x00012e11
 4c4:	3a0e0319 	bcc	381130 <startup-0x1fc7eed0>
 4c8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 4cc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 4d0:	96184006 	ldrls	r4, [r8], -r6
 4d4:	13011942 	movwne	r1, #6466	; 0x1942
 4d8:	05120000 	ldreq	r0, [r2, #-0]
 4dc:	3a0e0300 	bcc	3810e4 <startup-0x1fc7ef1c>
 4e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4e4:	00180213 	andseq	r0, r8, r3, lsl r2
 4e8:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
 4ec:	0b3a0e03 	bleq	e83d00 <startup-0x1f17c300>
 4f0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 4f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 4f8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 4fc:	00000019 	andeq	r0, r0, r9, lsl r0
 500:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 504:	030b130e 	movweq	r1, #45838	; 0xb30e
 508:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 50c:	00171006 	andseq	r1, r7, r6
 510:	01130200 	tsteq	r3, r0, lsl #4
 514:	0b3a0b0b 	bleq	e83148 <startup-0x1f17ceb8>
 518:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 51c:	0d030000 	stceq	0, cr0, [r3, #-0]
 520:	3a0e0300 	bcc	381128 <startup-0x1fc7eed8>
 524:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 528:	000b3813 	andeq	r3, fp, r3, lsl r8
 52c:	00240400 	eoreq	r0, r4, r0, lsl #8
 530:	0b3e0b0b 	bleq	f83164 <startup-0x1f07ce9c>
 534:	00000e03 	andeq	r0, r0, r3, lsl #28
 538:	0b000f05 	bleq	4154 <startup-0x1fffbeac>
 53c:	0013490b 	andseq	r4, r3, fp, lsl #18
 540:	00160600 	andseq	r0, r6, r0, lsl #12
 544:	0b3a0e03 	bleq	e83d58 <startup-0x1f17c2a8>
 548:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 54c:	13070000 	movwne	r0, #28672	; 0x7000
 550:	0b0e0301 	bleq	38115c <startup-0x1fc7eea4>
 554:	3b0b3a0b 	blcc	2ced88 <startup-0x1fd31278>
 558:	0013010b 	andseq	r0, r3, fp, lsl #2
 55c:	00240800 	eoreq	r0, r4, r0, lsl #16
 560:	0b3e0b0b 	bleq	f83194 <startup-0x1f07ce6c>
 564:	00000803 	andeq	r0, r0, r3, lsl #16
 568:	27011509 	strcs	r1, [r1, -r9, lsl #10]
 56c:	00130119 	andseq	r0, r3, r9, lsl r1
 570:	00050a00 	andeq	r0, r5, r0, lsl #20
 574:	00001349 	andeq	r1, r0, r9, asr #6
 578:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
 57c:	00130113 	andseq	r0, r3, r3, lsl r1
 580:	00210c00 	eoreq	r0, r1, r0, lsl #24
 584:	340d0000 	strcc	r0, [sp], #-0
 588:	3a0e0300 	bcc	381190 <startup-0x1fc7ee70>
 58c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 590:	3c193f13 	ldccc	15, cr3, [r9], {19}
 594:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
 598:	13490021 	movtne	r0, #36897	; 0x9021
 59c:	00000b2f 	andeq	r0, r0, pc, lsr #22
 5a0:	0300340f 	movweq	r3, #1039	; 0x40f
 5a4:	3b0b3a0e 	blcc	2cede4 <startup-0x1fd3121c>
 5a8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 5ac:	10000018 	andne	r0, r0, r8, lsl r0
 5b0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 5b4:	0b3b0b3a 	bleq	ec32a4 <startup-0x1f13cd5c>
 5b8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 5bc:	00001802 	andeq	r1, r0, r2, lsl #16
 5c0:	3f012e11 	svccc	0x00012e11
 5c4:	3a0e0319 	bcc	381230 <startup-0x1fc7edd0>
 5c8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 5cc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 5d0:	96184006 	ldrls	r4, [r8], -r6
 5d4:	13011942 	movwne	r1, #6466	; 0x1942
 5d8:	05120000 	ldreq	r0, [r2, #-0]
 5dc:	3a0e0300 	bcc	3811e4 <startup-0x1fc7ee1c>
 5e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 5e4:	00180213 	andseq	r0, r8, r3, lsl r2
 5e8:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
 5ec:	0b3a0e03 	bleq	e83e00 <startup-0x1f17c200>
 5f0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 5f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5f8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 5fc:	00000019 	andeq	r0, r0, r9, lsl r0
 600:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 604:	030b130e 	movweq	r1, #45838	; 0xb30e
 608:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 60c:	00171006 	andseq	r1, r7, r6
 610:	01130200 	tsteq	r3, r0, lsl #4
 614:	0b3a0b0b 	bleq	e83248 <startup-0x1f17cdb8>
 618:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 61c:	0d030000 	stceq	0, cr0, [r3, #-0]
 620:	3a0e0300 	bcc	381228 <startup-0x1fc7edd8>
 624:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 628:	000b3813 	andeq	r3, fp, r3, lsl r8
 62c:	00240400 	eoreq	r0, r4, r0, lsl #8
 630:	0b3e0b0b 	bleq	f83264 <startup-0x1f07cd9c>
 634:	00000e03 	andeq	r0, r0, r3, lsl #28
 638:	0b000f05 	bleq	4254 <startup-0x1fffbdac>
 63c:	0013490b 	andseq	r4, r3, fp, lsl #18
 640:	00160600 	andseq	r0, r6, r0, lsl #12
 644:	0b3a0e03 	bleq	e83e58 <startup-0x1f17c1a8>
 648:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 64c:	13070000 	movwne	r0, #28672	; 0x7000
 650:	0b0e0301 	bleq	38125c <startup-0x1fc7eda4>
 654:	3b0b3a0b 	blcc	2cee88 <startup-0x1fd31178>
 658:	0013010b 	andseq	r0, r3, fp, lsl #2
 65c:	00240800 	eoreq	r0, r4, r0, lsl #16
 660:	0b3e0b0b 	bleq	f83294 <startup-0x1f07cd6c>
 664:	00000803 	andeq	r0, r0, r3, lsl #16
 668:	27011509 	strcs	r1, [r1, -r9, lsl #10]
 66c:	00130119 	andseq	r0, r3, r9, lsl r1
 670:	00050a00 	andeq	r0, r5, r0, lsl #20
 674:	00001349 	andeq	r1, r0, r9, asr #6
 678:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
 67c:	00130113 	andseq	r0, r3, r3, lsl r1
 680:	00210c00 	eoreq	r0, r1, r0, lsl #24
 684:	340d0000 	strcc	r0, [sp], #-0
 688:	3a0e0300 	bcc	381290 <startup-0x1fc7ed70>
 68c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 690:	3c193f13 	ldccc	15, cr3, [r9], {19}
 694:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
 698:	13490021 	movtne	r0, #36897	; 0x9021
 69c:	00000b2f 	andeq	r0, r0, pc, lsr #22
 6a0:	0300340f 	movweq	r3, #1039	; 0x40f
 6a4:	3b0b3a0e 	blcc	2ceee4 <startup-0x1fd3111c>
 6a8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 6ac:	10000018 	andne	r0, r0, r8, lsl r0
 6b0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 6b4:	0b3b0b3a 	bleq	ec33a4 <startup-0x1f13cc5c>
 6b8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 6bc:	00001802 	andeq	r1, r0, r2, lsl #16
 6c0:	3f012e11 	svccc	0x00012e11
 6c4:	3a0e0319 	bcc	381330 <startup-0x1fc7ecd0>
 6c8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 6cc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 6d0:	96184006 	ldrls	r4, [r8], -r6
 6d4:	13011942 	movwne	r1, #6466	; 0x1942
 6d8:	05120000 	ldreq	r0, [r2, #-0]
 6dc:	3a0e0300 	bcc	3812e4 <startup-0x1fc7ed1c>
 6e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6e4:	00180213 	andseq	r0, r8, r3, lsl r2
 6e8:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
 6ec:	0b3a0e03 	bleq	e83f00 <startup-0x1f17c100>
 6f0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 6f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 6f8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 6fc:	00000019 	andeq	r0, r0, r9, lsl r0
 700:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 704:	030b130e 	movweq	r1, #45838	; 0xb30e
 708:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 70c:	00171006 	andseq	r1, r7, r6
 710:	01130200 	tsteq	r3, r0, lsl #4
 714:	0b3a0b0b 	bleq	e83348 <startup-0x1f17ccb8>
 718:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 71c:	0d030000 	stceq	0, cr0, [r3, #-0]
 720:	3a0e0300 	bcc	381328 <startup-0x1fc7ecd8>
 724:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 728:	000b3813 	andeq	r3, fp, r3, lsl r8
 72c:	00240400 	eoreq	r0, r4, r0, lsl #8
 730:	0b3e0b0b 	bleq	f83364 <startup-0x1f07cc9c>
 734:	00000e03 	andeq	r0, r0, r3, lsl #28
 738:	0b000f05 	bleq	4354 <startup-0x1fffbcac>
 73c:	0013490b 	andseq	r4, r3, fp, lsl #18
 740:	00160600 	andseq	r0, r6, r0, lsl #12
 744:	0b3a0e03 	bleq	e83f58 <startup-0x1f17c0a8>
 748:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 74c:	13070000 	movwne	r0, #28672	; 0x7000
 750:	0b0e0301 	bleq	38135c <startup-0x1fc7eca4>
 754:	3b0b3a0b 	blcc	2cef88 <startup-0x1fd31078>
 758:	0013010b 	andseq	r0, r3, fp, lsl #2
 75c:	00240800 	eoreq	r0, r4, r0, lsl #16
 760:	0b3e0b0b 	bleq	f83394 <startup-0x1f07cc6c>
 764:	00000803 	andeq	r0, r0, r3, lsl #16
 768:	27011509 	strcs	r1, [r1, -r9, lsl #10]
 76c:	00130119 	andseq	r0, r3, r9, lsl r1
 770:	00050a00 	andeq	r0, r5, r0, lsl #20
 774:	00001349 	andeq	r1, r0, r9, asr #6
 778:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
 77c:	00130113 	andseq	r0, r3, r3, lsl r1
 780:	00210c00 	eoreq	r0, r1, r0, lsl #24
 784:	340d0000 	strcc	r0, [sp], #-0
 788:	3a0e0300 	bcc	381390 <startup-0x1fc7ec70>
 78c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 790:	3c193f13 	ldccc	15, cr3, [r9], {19}
 794:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
 798:	13490021 	movtne	r0, #36897	; 0x9021
 79c:	0000052f 	andeq	r0, r0, pc, lsr #10
 7a0:	4700340f 	strmi	r3, [r0, -pc, lsl #8]
 7a4:	3b0b3a13 	blcc	2ceff8 <startup-0x1fd31008>
 7a8:	0018020b 	andseq	r0, r8, fp, lsl #4
 7ac:	00341000 	eorseq	r1, r4, r0
 7b0:	0b3a1347 	bleq	e854d4 <startup-0x1f17ab2c>
 7b4:	00001802 	andeq	r1, r0, r2, lsl #16
 7b8:	3f012e11 	svccc	0x00012e11
 7bc:	3a0e0319 	bcc	381428 <startup-0x1fc7ebd8>
 7c0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 7c4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 7c8:	96184006 	ldrls	r4, [r8], -r6
 7cc:	13011942 	movwne	r1, #6466	; 0x1942
 7d0:	05120000 	ldreq	r0, [r2, #-0]
 7d4:	3a0e0300 	bcc	3813dc <startup-0x1fc7ec24>
 7d8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 7dc:	00180213 	andseq	r0, r8, r3, lsl r2
 7e0:	00341300 	eorseq	r1, r4, r0, lsl #6
 7e4:	0b3a0e03 	bleq	e83ff8 <startup-0x1f17c008>
 7e8:	1349053b 	movtne	r0, #38203	; 0x953b
 7ec:	00001802 	andeq	r1, r0, r2, lsl #16
 7f0:	3f012e14 	svccc	0x00012e14
 7f4:	3a0e0319 	bcc	381460 <startup-0x1fc7eba0>
 7f8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 7fc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 800:	97184006 	ldrls	r4, [r8, -r6]
 804:	13011942 	movwne	r1, #6466	; 0x1942
 808:	34150000 	ldrcc	r0, [r5], #-0
 80c:	3a080300 	bcc	201414 <startup-0x1fdfebec>
 810:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 814:	00180213 	andseq	r0, r8, r3, lsl r2
 818:	00341600 	eorseq	r1, r4, r0, lsl #12
 81c:	0b3a0803 	bleq	e82830 <startup-0x1f17d7d0>
 820:	1349053b 	movtne	r0, #38203	; 0x953b
 824:	05170000 	ldreq	r0, [r7, #-0]
 828:	3a080300 	bcc	201430 <startup-0x1fdfebd0>
 82c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 830:	00180213 	andseq	r0, r8, r3, lsl r2
 834:	010b1800 	tsteq	fp, r0, lsl #16
 838:	06120111 			; <UNDEFINED> instruction: 0x06120111
 83c:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 840:	03193f01 	tsteq	r9, #1, 30
 844:	3b0b3a0e 	blcc	2cf084 <startup-0x1fd30f7c>
 848:	1119270b 	tstne	r9, fp, lsl #14
 84c:	40061201 	andmi	r1, r6, r1, lsl #4
 850:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 854:	00001301 	andeq	r1, r0, r1, lsl #6
 858:	0300051a 	movweq	r0, #1306	; 0x51a
 85c:	3b0b3a08 	blcc	2cf084 <startup-0x1fd30f7c>
 860:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 864:	1b000018 	blne	8cc <startup-0x1ffff734>
 868:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 86c:	0b3b0b3a 	bleq	ec355c <startup-0x1f13caa4>
 870:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 874:	341c0000 	ldrcc	r0, [ip], #-0
 878:	3a0e0300 	bcc	381480 <startup-0x1fc7eb80>
 87c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 880:	00180213 	andseq	r0, r8, r3, lsl r2
 884:	012e1d00 			; <UNDEFINED> instruction: 0x012e1d00
 888:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 88c:	0b3b0b3a 	bleq	ec357c <startup-0x1f13ca84>
 890:	01111927 	tsteq	r1, r7, lsr #18
 894:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 898:	01194296 			; <UNDEFINED> instruction: 0x01194296
 89c:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
 8a0:	08030034 	stmdaeq	r3, {r2, r4, r5}
 8a4:	0b3b0b3a 	bleq	ec3594 <startup-0x1f13ca6c>
 8a8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 8ac:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
 8b0:	03193f00 	tsteq	r9, #0, 30
 8b4:	3b0b3a0e 	blcc	2cf0f4 <startup-0x1fd30f0c>
 8b8:	1119270b 	tstne	r9, fp, lsl #14
 8bc:	40061201 	andmi	r1, r6, r1, lsl #4
 8c0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 8c4:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
 8c8:	03193f01 	tsteq	r9, #1, 30
 8cc:	3b0b3a0e 	blcc	2cf10c <startup-0x1fd30ef4>
 8d0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 8d4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 8d8:	96184006 	ldrls	r4, [r8], -r6
 8dc:	13011942 	movwne	r1, #6466	; 0x1942
 8e0:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
 8e4:	3a0e0301 	bcc	3814f0 <startup-0x1fc7eb10>
 8e8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 8ec:	11134919 	tstne	r3, r9, lsl r9
 8f0:	40061201 	andmi	r1, r6, r1, lsl #4
 8f4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 8f8:	00001301 	andeq	r1, r0, r1, lsl #6
 8fc:	03012e22 	movweq	r2, #7714	; 0x1e22
 900:	3b0b3a0e 	blcc	2cf140 <startup-0x1fd30ec0>
 904:	1119270b 	tstne	r9, fp, lsl #14
 908:	40061201 	andmi	r1, r6, r1, lsl #4
 90c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 910:	00001301 	andeq	r1, r0, r1, lsl #6
 914:	3f002e23 	svccc	0x00002e23
 918:	3a0e0319 	bcc	381584 <startup-0x1fc7ea7c>
 91c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 920:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 924:	97184006 	ldrls	r4, [r8, -r6]
 928:	00001942 	andeq	r1, r0, r2, asr #18
 92c:	01110100 	tsteq	r1, r0, lsl #2
 930:	0b130e25 	bleq	4c41cc <startup-0x1fb3be34>
 934:	01110e03 	tsteq	r1, r3, lsl #28
 938:	17100612 			; <UNDEFINED> instruction: 0x17100612
 93c:	13020000 	movwne	r0, #8192	; 0x2000
 940:	3a0b0b01 	bcc	2c354c <startup-0x1fd3cab4>
 944:	010b3b0b 	tsteq	fp, fp, lsl #22
 948:	03000013 	movweq	r0, #19
 94c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 950:	0b3b0b3a 	bleq	ec3640 <startup-0x1f13c9c0>
 954:	0b381349 	bleq	e05680 <startup-0x1f1fa980>
 958:	24040000 	strcs	r0, [r4], #-0
 95c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 960:	000e030b 	andeq	r0, lr, fp, lsl #6
 964:	000f0500 	andeq	r0, pc, r0, lsl #10
 968:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 96c:	16060000 	strne	r0, [r6], -r0
 970:	3a0e0300 	bcc	381578 <startup-0x1fc7ea88>
 974:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 978:	07000013 	smladeq	r0, r3, r0, r0
 97c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 980:	0b3a0b0b 	bleq	e835b4 <startup-0x1f17ca4c>
 984:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 988:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
 98c:	03193f01 	tsteq	r9, #1, 30
 990:	3b0b3a0e 	blcc	2cf1d0 <startup-0x1fd30e30>
 994:	1119270b 	tstne	r9, fp, lsl #14
 998:	40061201 	andmi	r1, r6, r1, lsl #4
 99c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 9a0:	00001301 	andeq	r1, r0, r1, lsl #6
 9a4:	03000509 	movweq	r0, #1289	; 0x509
 9a8:	3b0b3a0e 	blcc	2cf1e8 <startup-0x1fd30e18>
 9ac:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 9b0:	00000018 	andeq	r0, r0, r8, lsl r0
 9b4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 9b8:	030b130e 	movweq	r1, #45838	; 0xb30e
 9bc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 9c0:	00171006 	andseq	r1, r7, r6
 9c4:	01130200 	tsteq	r3, r0, lsl #4
 9c8:	0b3a0b0b 	bleq	e835fc <startup-0x1f17ca04>
 9cc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 9d0:	0d030000 	stceq	0, cr0, [r3, #-0]
 9d4:	3a0e0300 	bcc	3815dc <startup-0x1fc7ea24>
 9d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 9dc:	000b3813 	andeq	r3, fp, r3, lsl r8
 9e0:	00240400 	eoreq	r0, r4, r0, lsl #8
 9e4:	0b3e0b0b 	bleq	f83618 <startup-0x1f07c9e8>
 9e8:	00000e03 	andeq	r0, r0, r3, lsl #28
 9ec:	0b000f05 	bleq	4608 <startup-0x1fffb9f8>
 9f0:	0013490b 	andseq	r4, r3, fp, lsl #18
 9f4:	00160600 	andseq	r0, r6, r0, lsl #12
 9f8:	0b3a0e03 	bleq	e8420c <startup-0x1f17bdf4>
 9fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 a00:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
 a04:	03193f01 	tsteq	r9, #1, 30
 a08:	3b0b3a0e 	blcc	2cf248 <startup-0x1fd30db8>
 a0c:	1119270b 	tstne	r9, fp, lsl #14
 a10:	40061201 	andmi	r1, r6, r1, lsl #4
 a14:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 a18:	00001301 	andeq	r1, r0, r1, lsl #6
 a1c:	03000508 	movweq	r0, #1288	; 0x508
 a20:	3b0b3a08 	blcc	2cf248 <startup-0x1fd30db8>
 a24:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 a28:	09000018 	stmdbeq	r0, {r3, r4}
 a2c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 a30:	0b3b0b3a 	bleq	ec3720 <startup-0x1f13c8e0>
 a34:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 a38:	240a0000 	strcs	r0, [sl], #-0
 a3c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 a40:	0008030b 	andeq	r0, r8, fp, lsl #6
 a44:	11010000 	mrsne	r0, (UNDEF: 1)
 a48:	130e2501 	movwne	r2, #58625	; 0xe501
 a4c:	110e030b 	tstne	lr, fp, lsl #6
 a50:	10061201 	andne	r1, r6, r1, lsl #4
 a54:	02000017 	andeq	r0, r0, #23
 a58:	0b0b0113 	bleq	2c0eac <startup-0x1fd3f154>
 a5c:	0b3b0b3a 	bleq	ec374c <startup-0x1f13c8b4>
 a60:	00001301 	andeq	r1, r0, r1, lsl #6
 a64:	03000d03 	movweq	r0, #3331	; 0xd03
 a68:	3b0b3a0e 	blcc	2cf2a8 <startup-0x1fd30d58>
 a6c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 a70:	0400000b 	streq	r0, [r0], #-11
 a74:	0b0b0024 	bleq	2c0b0c <startup-0x1fd3f4f4>
 a78:	0e030b3e 	vmoveq.16	d3[0], r0
 a7c:	16050000 	strne	r0, [r5], -r0
 a80:	3a0e0300 	bcc	381688 <startup-0x1fc7e978>
 a84:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 a88:	06000013 			; <UNDEFINED> instruction: 0x06000013
 a8c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 a90:	0b3a0e03 	bleq	e842a4 <startup-0x1f17bd5c>
 a94:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 a98:	01111349 	tsteq	r1, r9, asr #6
 a9c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 aa0:	01194296 			; <UNDEFINED> instruction: 0x01194296
 aa4:	07000013 	smladeq	r0, r3, r0, r0
 aa8:	08030005 	stmdaeq	r3, {r0, r2}
 aac:	0b3b0b3a 	bleq	ec379c <startup-0x1f13c864>
 ab0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 ab4:	34080000 	strcc	r0, [r8], #-0
 ab8:	3a080300 	bcc	2016c0 <startup-0x1fdfe940>
 abc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 ac0:	00180213 	andseq	r0, r8, r3, lsl r2
 ac4:	00240900 	eoreq	r0, r4, r0, lsl #18
 ac8:	0b3e0b0b 	bleq	f836fc <startup-0x1f07c904>
 acc:	00000803 	andeq	r0, r0, r3, lsl #16
 ad0:	3f002e0a 	svccc	0x00002e0a
 ad4:	3a0e0319 	bcc	381740 <startup-0x1fc7e8c0>
 ad8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 adc:	11134919 	tstne	r3, r9, lsl r9
 ae0:	40061201 	andmi	r1, r6, r1, lsl #4
 ae4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 ae8:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
 aec:	03193f00 	tsteq	r9, #0, 30
 af0:	3b0b3a0e 	blcc	2cf330 <startup-0x1fd30cd0>
 af4:	1119270b 	tstne	r9, fp, lsl #14
 af8:	40061201 	andmi	r1, r6, r1, lsl #4
 afc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 b00:	01000000 	mrseq	r0, (UNDEF: 0)
 b04:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 b08:	0e030b13 	vmoveq.32	d3[0], r0
 b0c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 b10:	00001710 	andeq	r1, r0, r0, lsl r7
 b14:	0b011302 	bleq	45724 <startup-0x1ffba8dc>
 b18:	3b0b3a0b 	blcc	2cf34c <startup-0x1fd30cb4>
 b1c:	0013010b 	andseq	r0, r3, fp, lsl #2
 b20:	000d0300 	andeq	r0, sp, r0, lsl #6
 b24:	0b3a0e03 	bleq	e84338 <startup-0x1f17bcc8>
 b28:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 b2c:	00000b38 	andeq	r0, r0, r8, lsr fp
 b30:	0b002404 	bleq	9b48 <startup-0x1fff64b8>
 b34:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 b38:	0500000e 	streq	r0, [r0, #-14]
 b3c:	0b0b000f 	bleq	2c0b80 <startup-0x1fd3f480>
 b40:	00001349 	andeq	r1, r0, r9, asr #6
 b44:	03001606 	movweq	r1, #1542	; 0x606
 b48:	3b0b3a0e 	blcc	2cf388 <startup-0x1fd30c78>
 b4c:	0013490b 	andseq	r4, r3, fp, lsl #18
 b50:	01130700 	tsteq	r3, r0, lsl #14
 b54:	0b0b0e03 	bleq	2c4368 <startup-0x1fd3bc98>
 b58:	0b3b0b3a 	bleq	ec3848 <startup-0x1f13c7b8>
 b5c:	00001301 	andeq	r1, r0, r1, lsl #6
 b60:	0b002408 	bleq	9b88 <startup-0x1fff6478>
 b64:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 b68:	09000008 	stmdbeq	r0, {r3}
 b6c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 b70:	00001301 	andeq	r1, r0, r1, lsl #6
 b74:	4900050a 	stmdbmi	r0, {r1, r3, r8, sl}
 b78:	0b000013 	bleq	bcc <startup-0x1ffff434>
 b7c:	13490101 	movtne	r0, #37121	; 0x9101
 b80:	00001301 	andeq	r1, r0, r1, lsl #6
 b84:	0000210c 	andeq	r2, r0, ip, lsl #2
 b88:	00340d00 	eorseq	r0, r4, r0, lsl #26
 b8c:	0b3a0e03 	bleq	e843a0 <startup-0x1f17bc60>
 b90:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 b94:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 b98:	210e0000 	mrscs	r0, (UNDEF: 14)
 b9c:	2f134900 	svccs	0x00134900
 ba0:	0f000005 	svceq	0x00000005
 ba4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 ba8:	0b3a0e03 	bleq	e843bc <startup-0x1f17bc44>
 bac:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 bb0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 bb4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 bb8:	00130119 	andseq	r0, r3, r9, lsl r1
 bbc:	00341000 	eorseq	r1, r4, r0
 bc0:	0b3a0803 	bleq	e82bd4 <startup-0x1f17d42c>
 bc4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 bc8:	00001802 	andeq	r1, r0, r2, lsl #16
 bcc:	03003411 	movweq	r3, #1041	; 0x411
 bd0:	3b0b3a0e 	blcc	2cf410 <startup-0x1fd30bf0>
 bd4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 bd8:	12000018 	andne	r0, r0, #24
 bdc:	13490021 	movtne	r0, #36897	; 0x9021
 be0:	00000b2f 	andeq	r0, r0, pc, lsr #22
 be4:	03000513 	movweq	r0, #1299	; 0x513
 be8:	3b0b3a0e 	blcc	2cf428 <startup-0x1fd30bd8>
 bec:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 bf0:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
 bf4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 bf8:	0b3a0e03 	bleq	e8440c <startup-0x1f17bbf4>
 bfc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 c00:	06120111 			; <UNDEFINED> instruction: 0x06120111
 c04:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 c08:	15000019 	strne	r0, [r0, #-25]	; 0xffffffe7
 c0c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 c10:	0b3a0e03 	bleq	e84424 <startup-0x1f17bbdc>
 c14:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 c18:	06120111 			; <UNDEFINED> instruction: 0x06120111
 c1c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 c20:	16000019 			; <UNDEFINED> instruction: 0x16000019
 c24:	08030005 	stmdaeq	r3, {r0, r2}
 c28:	0b3b0b3a 	bleq	ec3918 <startup-0x1f13c6e8>
 c2c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 c30:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 c34:	03193f01 	tsteq	r9, #1, 30
 c38:	3b0b3a0e 	blcc	2cf478 <startup-0x1fd30b88>
 c3c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 c40:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 c44:	96184006 	ldrls	r4, [r8], -r6
 c48:	13011942 	movwne	r1, #6466	; 0x1942
 c4c:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
 c50:	03193f01 	tsteq	r9, #1, 30
 c54:	3b0b3a0e 	blcc	2cf494 <startup-0x1fd30b6c>
 c58:	1119270b 	tstne	r9, fp, lsl #14
 c5c:	40061201 	andmi	r1, r6, r1, lsl #4
 c60:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 c64:	00001301 	andeq	r1, r0, r1, lsl #6
 c68:	3f012e19 	svccc	0x00012e19
 c6c:	3a0e0319 	bcc	3818d8 <startup-0x1fc7e728>
 c70:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 c74:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 c78:	97184006 	ldrls	r4, [r8, -r6]
 c7c:	00001942 	andeq	r1, r0, r2, asr #18
 c80:	01110100 	tsteq	r1, r0, lsl #2
 c84:	0b130e25 	bleq	4c4520 <startup-0x1fb3bae0>
 c88:	01110e03 	tsteq	r1, r3, lsl #28
 c8c:	17100612 			; <UNDEFINED> instruction: 0x17100612
 c90:	13020000 	movwne	r0, #8192	; 0x2000
 c94:	0b0e0301 	bleq	3818a0 <startup-0x1fc7e760>
 c98:	3b0b3a0b 	blcc	2cf4cc <startup-0x1fd30b34>
 c9c:	0013010b 	andseq	r0, r3, fp, lsl #2
 ca0:	000d0300 	andeq	r0, sp, r0, lsl #6
 ca4:	0b3a0e03 	bleq	e844b8 <startup-0x1f17bb48>
 ca8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 cac:	00000b38 	andeq	r0, r0, r8, lsr fp
 cb0:	0b000f04 	bleq	48c8 <startup-0x1fffb738>
 cb4:	0013490b 	andseq	r4, r3, fp, lsl #18
 cb8:	00240500 	eoreq	r0, r4, r0, lsl #10
 cbc:	0b3e0b0b 	bleq	f838f0 <startup-0x1f07c710>
 cc0:	00000e03 	andeq	r0, r0, r3, lsl #28
 cc4:	0b002406 	bleq	9ce4 <startup-0x1fff631c>
 cc8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 ccc:	07000008 	streq	r0, [r0, -r8]
 cd0:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 cd4:	00001301 	andeq	r1, r0, r1, lsl #6
 cd8:	49000508 	stmdbmi	r0, {r3, r8, sl}
 cdc:	09000013 	stmdbeq	r0, {r0, r1, r4}
 ce0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 ce4:	0b3b0b3a 	bleq	ec39d4 <startup-0x1f13c62c>
 ce8:	00001349 	andeq	r1, r0, r9, asr #6
 cec:	3f012e0a 	svccc	0x00012e0a
 cf0:	3a0e0319 	bcc	38195c <startup-0x1fc7e6a4>
 cf4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 cf8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 cfc:	97184006 	ldrls	r4, [r8, -r6]
 d00:	13011942 	movwne	r1, #6466	; 0x1942
 d04:	050b0000 	streq	r0, [fp, #-0]
 d08:	3a080300 	bcc	201910 <startup-0x1fdfe6f0>
 d0c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 d10:	00180213 	andseq	r0, r8, r3, lsl r2
 d14:	00050c00 	andeq	r0, r5, r0, lsl #24
 d18:	0b3a0e03 	bleq	e8452c <startup-0x1f17bad4>
 d1c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 d20:	00001802 	andeq	r1, r0, r2, lsl #16
 d24:	3f012e0d 	svccc	0x00012e0d
 d28:	3a0e0319 	bcc	381994 <startup-0x1fc7e66c>
 d2c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 d30:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 d34:	96184006 	ldrls	r4, [r8], -r6
 d38:	00001942 	andeq	r1, r0, r2, asr #18
 d3c:	0300340e 	movweq	r3, #1038	; 0x40e
 d40:	3b0b3a0e 	blcc	2cf580 <startup-0x1fd30a80>
 d44:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 d48:	00000018 	andeq	r0, r0, r8, lsl r0
 d4c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 d50:	030b130e 	movweq	r1, #45838	; 0xb30e
 d54:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 d58:	00171006 	andseq	r1, r7, r6
 d5c:	01130200 	tsteq	r3, r0, lsl #4
 d60:	0b3a0b0b 	bleq	e83994 <startup-0x1f17c66c>
 d64:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 d68:	0d030000 	stceq	0, cr0, [r3, #-0]
 d6c:	3a0e0300 	bcc	381974 <startup-0x1fc7e68c>
 d70:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 d74:	000b3813 	andeq	r3, fp, r3, lsl r8
 d78:	00240400 	eoreq	r0, r4, r0, lsl #8
 d7c:	0b3e0b0b 	bleq	f839b0 <startup-0x1f07c650>
 d80:	00000e03 	andeq	r0, r0, r3, lsl #28
 d84:	0b000f05 	bleq	49a0 <startup-0x1fffb660>
 d88:	0013490b 	andseq	r4, r3, fp, lsl #18
 d8c:	00160600 	andseq	r0, r6, r0, lsl #12
 d90:	0b3a0e03 	bleq	e845a4 <startup-0x1f17ba5c>
 d94:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 d98:	13070000 	movwne	r0, #28672	; 0x7000
 d9c:	0b0e0301 	bleq	3819a8 <startup-0x1fc7e658>
 da0:	3b0b3a0b 	blcc	2cf5d4 <startup-0x1fd30a2c>
 da4:	0013010b 	andseq	r0, r3, fp, lsl #2
 da8:	00240800 	eoreq	r0, r4, r0, lsl #16
 dac:	0b3e0b0b 	bleq	f839e0 <startup-0x1f07c620>
 db0:	00000803 	andeq	r0, r0, r3, lsl #16
 db4:	27011509 	strcs	r1, [r1, -r9, lsl #10]
 db8:	00130119 	andseq	r0, r3, r9, lsl r1
 dbc:	00050a00 	andeq	r0, r5, r0, lsl #20
 dc0:	00001349 	andeq	r1, r0, r9, asr #6
 dc4:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
 dc8:	00130113 	andseq	r0, r3, r3, lsl r1
 dcc:	00210c00 	eoreq	r0, r1, r0, lsl #24
 dd0:	340d0000 	strcc	r0, [sp], #-0
 dd4:	3a0e0300 	bcc	3819dc <startup-0x1fc7e624>
 dd8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 ddc:	3c193f13 	ldccc	15, cr3, [r9], {19}
 de0:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
 de4:	13490021 	movtne	r0, #36897	; 0x9021
 de8:	0000052f 	andeq	r0, r0, pc, lsr #10
 dec:	0300340f 	movweq	r3, #1039	; 0x40f
 df0:	3b0b3a0e 	blcc	2cf630 <startup-0x1fd309d0>
 df4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 df8:	10000018 	andne	r0, r0, r8, lsl r0
 dfc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 e00:	0b3b0b3a 	bleq	ec3af0 <startup-0x1f13c510>
 e04:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 e08:	00001802 	andeq	r1, r0, r2, lsl #16
 e0c:	49002111 	stmdbmi	r0, {r0, r4, r8, sp}
 e10:	000b2f13 	andeq	r2, fp, r3, lsl pc
 e14:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
 e18:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 e1c:	0b3b0b3a 	bleq	ec3b0c <startup-0x1f13c4f4>
 e20:	01111927 	tsteq	r1, r7, lsr #18
 e24:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 e28:	01194296 			; <UNDEFINED> instruction: 0x01194296
 e2c:	13000013 	movwne	r0, #19
 e30:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 e34:	0b3b0b3a 	bleq	ec3b24 <startup-0x1f13c4dc>
 e38:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 e3c:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 e40:	3a0e0301 	bcc	381a4c <startup-0x1fc7e5b4>
 e44:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 e48:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 e4c:	96184006 	ldrls	r4, [r8], -r6
 e50:	00001942 	andeq	r1, r0, r2, asr #18
 e54:	01110100 	tsteq	r1, r0, lsl #2
 e58:	0b130e25 	bleq	4c46f4 <startup-0x1fb3b90c>
 e5c:	01110e03 	tsteq	r1, r3, lsl #28
 e60:	17100612 			; <UNDEFINED> instruction: 0x17100612
 e64:	13020000 	movwne	r0, #8192	; 0x2000
 e68:	3a0b0b01 	bcc	2c3a74 <startup-0x1fd3c58c>
 e6c:	010b3b0b 	tsteq	fp, fp, lsl #22
 e70:	03000013 	movweq	r0, #19
 e74:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 e78:	0b3b0b3a 	bleq	ec3b68 <startup-0x1f13c498>
 e7c:	0b381349 	bleq	e05ba8 <startup-0x1f1fa458>
 e80:	24040000 	strcs	r0, [r4], #-0
 e84:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 e88:	000e030b 	andeq	r0, lr, fp, lsl #6
 e8c:	000f0500 	andeq	r0, pc, r0, lsl #10
 e90:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 e94:	16060000 	strne	r0, [r6], -r0
 e98:	3a0e0300 	bcc	381aa0 <startup-0x1fc7e560>
 e9c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 ea0:	07000013 	smladeq	r0, r3, r0, r0
 ea4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 ea8:	0b3a0b0b 	bleq	e83adc <startup-0x1f17c524>
 eac:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 eb0:	24080000 	strcs	r0, [r8], #-0
 eb4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 eb8:	0008030b 	andeq	r0, r8, fp, lsl #6
 ebc:	01150900 	tsteq	r5, r0, lsl #18
 ec0:	13011927 	movwne	r1, #6439	; 0x1927
 ec4:	050a0000 	streq	r0, [sl, #-0]
 ec8:	00134900 	andseq	r4, r3, r0, lsl #18
 ecc:	01010b00 	tsteq	r1, r0, lsl #22
 ed0:	13011349 	movwne	r1, #4937	; 0x1349
 ed4:	210c0000 	mrscs	r0, (UNDEF: 12)
 ed8:	0d000000 	stceq	0, cr0, [r0, #-0]
 edc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 ee0:	0b3b0b3a 	bleq	ec3bd0 <startup-0x1f13c430>
 ee4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 ee8:	0000193c 	andeq	r1, r0, ip, lsr r9
 eec:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 ef0:	00052f13 	andeq	r2, r5, r3, lsl pc
 ef4:	00340f00 	eorseq	r0, r4, r0, lsl #30
 ef8:	0b3a0e03 	bleq	e8470c <startup-0x1f17b8f4>
 efc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 f00:	00001802 	andeq	r1, r0, r2, lsl #16
 f04:	03003410 	movweq	r3, #1040	; 0x410
 f08:	3b0b3a0e 	blcc	2cf748 <startup-0x1fd308b8>
 f0c:	3f13490b 	svccc	0x0013490b
 f10:	00180219 	andseq	r0, r8, r9, lsl r2
 f14:	00211100 	eoreq	r1, r1, r0, lsl #2
 f18:	0b2f1349 	bleq	bc5c44 <startup-0x1f43a3bc>
 f1c:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 f20:	03193f01 	tsteq	r9, #1, 30
 f24:	3b0b3a0e 	blcc	2cf764 <startup-0x1fd3089c>
 f28:	1119270b 	tstne	r9, fp, lsl #14
 f2c:	40061201 	andmi	r1, r6, r1, lsl #4
 f30:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 f34:	00001301 	andeq	r1, r0, r1, lsl #6
 f38:	03000513 	movweq	r0, #1299	; 0x513
 f3c:	3b0b3a0e 	blcc	2cf77c <startup-0x1fd30884>
 f40:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 f44:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
 f48:	0e03012e 	adfeqsp	f0, f3, #0.5
 f4c:	0b3b0b3a 	bleq	ec3c3c <startup-0x1f13c3c4>
 f50:	01111927 	tsteq	r1, r7, lsr #18
 f54:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 f58:	00194296 	mulseq	r9, r6, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000ffc 	strdeq	r0, [r0], -ip
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	09300002 	ldmdbeq	r0!, {r1}
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	2000100c 	andcs	r1, r0, ip
  3c:	00000056 	andeq	r0, r0, r6, asr r0
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	0b140002 	bleq	50005c <startup-0x1fafffa4>
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20001064 	andcs	r1, r0, r4, rrx
  5c:	000002a8 	andeq	r0, r0, r8, lsr #5
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	10430002 	subne	r0, r3, r2
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	2000130c 	andcs	r1, r0, ip, lsl #6
  7c:	000001d4 	ldrdeq	r0, [r0], -r4
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	123e0002 	eorsne	r0, lr, #2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	200014e0 	andcs	r1, r0, r0, ror #9
  9c:	00000364 	andeq	r0, r0, r4, ror #6
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	18830002 	stmne	r3, {r1}
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20001844 	andcs	r1, r0, r4, asr #16
  bc:	00000238 	andeq	r0, r0, r8, lsr r2
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	1d1f0002 	ldcne	0, cr0, [pc, #-8]	; cc <startup-0x1fffff34>
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	20001a7c 	andcs	r1, r0, ip, ror sl
  dc:	000002ac 	andeq	r0, r0, ip, lsr #5
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	22010002 	andcs	r0, r1, #2
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	20001d28 	andcs	r1, r0, r8, lsr #26
  fc:	00000e44 	andeq	r0, r0, r4, asr #28
	...
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	2aa40002 	bcs	fe90011c <firstTime.4040+0xde8f6d74>
 110:	00040000 	andeq	r0, r4, r0
 114:	00000000 	andeq	r0, r0, r0
 118:	20002b6c 	andcs	r2, r0, ip, ror #22
 11c:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	2ba80002 	blcs	fea0013c <firstTime.4040+0xde9f6d94>
 130:	00040000 	andeq	r0, r4, r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20002b94 	mulcs	r0, r4, fp
 13c:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	2c6f0002 	stclcs	0, cr0, [pc], #-8	; 14c <startup-0x1ffffeb4>
 150:	00040000 	andeq	r0, r4, r0
 154:	00000000 	andeq	r0, r0, r0
 158:	20002bbc 			; <UNDEFINED> instruction: 0x20002bbc
 15c:	0000006c 	andeq	r0, r0, ip, rrx
	...
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
 16c:	2da80002 	stccs	0, cr0, [r8, #8]!
 170:	00040000 	andeq	r0, r4, r0
 174:	00000000 	andeq	r0, r0, r0
 178:	20002c28 	andcs	r2, r0, r8, lsr #24
 17c:	00000520 	andeq	r0, r0, r0, lsr #10
	...
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	32990002 	addscc	r0, r9, #2
 190:	00040000 	andeq	r0, r4, r0
 194:	00000000 	andeq	r0, r0, r0
 198:	20003148 	andcs	r3, r0, r8, asr #2
 19c:	00000094 	muleq	r0, r4, r0
	...
 1a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ac:	33dd0002 	bicscc	r0, sp, #2
 1b0:	00040000 	andeq	r0, r4, r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	200031dc 	ldrdcs	r3, [r0], -ip
 1bc:	000000e8 	andeq	r0, r0, r8, ror #1
	...
 1c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1cc:	36c10002 	strbcc	r0, [r1], r2
 1d0:	00040000 	andeq	r0, r4, r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	200032c4 	andcs	r3, r0, r4, asr #5
 1dc:	000000e8 	andeq	r0, r0, r8, ror #1
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	2000100c 	andcs	r1, r0, ip
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000002e6 	andeq	r0, r0, r6, ror #5
       4:	017d0002 	cmneq	sp, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	43010000 	movwmi	r0, #4096	; 0x1000
      1c:	6f6d2f3a 	svcvs	0x006d2f3a
      20:	2f632f70 	svccs	0x00632f70
      24:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
      28:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
      2c:	6f697461 	svcvs	0x00697461
      30:	2f72656e 	svccs	0x0072656e
      34:	73504944 	cmpvc	r0, #68, 18	; 0x110000
      38:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
      3c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
      40:	74730000 	ldrbtvc	r0, [r3], #-0
      44:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
      48:	00632e70 	rsbeq	r2, r3, r0, ror lr
      4c:	73000001 	movwvc	r0, #1
      50:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
      54:	00682e65 	rsbeq	r2, r8, r5, ror #28
      58:	69000001 	stmdbvs	r0, {r0}
      5c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
      60:	0100682e 	tsteq	r0, lr, lsr #16
      64:	61670000 	cmnvs	r7, r0
      68:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
      6c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
      70:	0100682e 	tsteq	r0, lr, lsr #16
      74:	72670000 	rsbvc	r0, r7, #0
      78:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
      7c:	682e7363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, ip, sp, lr}
      80:	00000100 	andeq	r0, r0, r0, lsl #2
      84:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
      88:	5f726574 	svcpl	0x00726574
      8c:	63616c62 	cmnvs	r1, #25088	; 0x6200
      90:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
      94:	0001006d 	andeq	r0, r1, sp, rrx
      98:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
      9c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
      a0:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
      a4:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
      a8:	01006d62 	tsteq	r0, r2, ror #26
      ac:	6f6d0000 	svcvs	0x006d0000
      b0:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
      b4:	72675f72 	rsbvc	r5, r7, #456	; 0x1c8
      b8:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
      bc:	01006d62 	tsteq	r0, r2, ror #26
      c0:	72700000 	rsbsvc	r0, r0, #0
      c4:	5f737365 	svcpl	0x00737365
      c8:	63616c62 	cmnvs	r1, #25088	; 0x6200
      cc:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
      d0:	0001006d 	andeq	r0, r1, sp, rrx
      d4:	65727000 	ldrbvs	r7, [r2, #-0]!
      d8:	6c5f7373 	mrrcvs	3, 7, r7, pc, cr3	; <UNPREDICTABLE>
      dc:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
      e0:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
      e4:	00000100 	andeq	r0, r0, r0, lsl #2
      e8:	73657270 	cmnvc	r5, #112, 4
      ec:	72675f73 	rsbvc	r5, r7, #460	; 0x1cc
      f0:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
      f4:	01006d62 	tsteq	r0, r2, ror #26
      f8:	61630000 	cmnvs	r3, r0
      fc:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     100:	616c625f 	cmnvs	ip, pc, asr r2
     104:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     108:	01006d62 	tsteq	r0, r2, ror #26
     10c:	61630000 	cmnvs	r3, r0
     110:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     114:	6172675f 	cmnvs	r2, pc, asr r7
     118:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     11c:	0001006d 	andeq	r0, r1, sp, rrx
     120:	73616300 	cmnvc	r1, #0, 6
     124:	5f656c74 	svcpl	0x00656c74
     128:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     12c:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     130:	0001006d 	andeq	r0, r1, sp, rrx
     134:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     138:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
     13c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     140:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     144:	00000100 	andeq	r0, r0, r0, lsl #2
     148:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     14c:	72675f65 	rsbvc	r5, r7, #404	; 0x194
     150:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     154:	01006d62 	tsteq	r0, r2, ror #26
     158:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
     15c:	5f656c74 	svcpl	0x00656c74
     160:	63616c62 	cmnvs	r1, #25088	; 0x6200
     164:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     168:	0001006d 	andeq	r0, r1, sp, rrx
     16c:	6f6c7300 	svcvs	0x006c7300
     170:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
     174:	682e7478 	stmdavs	lr!, {r3, r4, r5, r6, sl, ip, sp, lr}
     178:	00000100 	andeq	r0, r0, r0, lsl #2
     17c:	782e6762 	stmdavc	lr!, {r1, r5, r6, r8, r9, sl, sp, lr}
     180:	01006d62 	tsteq	r0, r2, ror #26
     184:	00000000 	andeq	r0, r0, r0
     188:	00000205 	andeq	r0, r0, r5, lsl #4
     18c:	34032000 	strcc	r2, [r3], #-0
     190:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
     194:	01010003 	tsteq	r1, r3
     198:	10020500 	andne	r0, r2, r0, lsl #10
     19c:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
     1a0:	3d2f0129 	stfccs	f0, [pc, #-164]!	; 104 <startup-0x1ffffefc>
     1a4:	03303030 	teqeq	r0, #48	; 0x30
     1a8:	2f3d742c 	svccs	0x003d742c
     1ac:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     1b0:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     1b4:	2f3e672f 	svccs	0x003e672f
     1b8:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     1bc:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     1c0:	2f3d672f 	svccs	0x003d672f
     1c4:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     1c8:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     1cc:	2f3d672f 	svccs	0x003d672f
     1d0:	52023f67 	andpl	r3, r2, #412	; 0x19c
     1d4:	322f4c17 	eorcc	r4, pc, #5888	; 0x1700
     1d8:	59bb7583 	ldmibpl	fp!, {r0, r1, r7, r8, sl, ip, sp, lr}
     1dc:	835c5959 	cmphi	ip, #1458176	; 0x164000
     1e0:	6759bb75 			; <UNDEFINED> instruction: 0x6759bb75
     1e4:	bb75835c 	bllt	1d60f5c <startup-0x1e29f0a4>
     1e8:	ad5c5959 	vldrge.16	s11, [ip, #-178]	; 0xffffff4e	; <UNPREDICTABLE>
     1ec:	5959bb75 	ldmdbpl	r9, {r0, r2, r4, r5, r6, r8, r9, fp, ip, sp, pc}^
     1f0:	8583675b 	strhi	r6, [r3, #1883]	; 0x75b
     1f4:	67858367 	strvs	r8, [r5, r7, ror #6]
     1f8:	67858383 	strvs	r8, [r5, r3, lsl #7]
     1fc:	83836785 	orrhi	r6, r3, #34865152	; 0x2140000
     200:	68686885 	stmdavs	r8!, {r0, r2, r7, fp, sp, lr}^
     204:	83836768 	orrhi	r6, r3, #104, 14	; 0x1a00000
     208:	83838384 	orrhi	r8, r3, #132, 6	; 0x10000002
     20c:	83838384 	orrhi	r8, r3, #132, 6	; 0x10000002
     210:	83838385 	orrhi	r8, r3, #335544322	; 0x14000002
     214:	83838384 	orrhi	r8, r3, #132, 6	; 0x10000002
     218:	75820f03 	strvc	r0, [r2, #3843]	; 0xf03
     21c:	4c027575 	cfstr32mi	mvfx7, [r2], {117}	; 0x75
     220:	75757513 	ldrbvc	r7, [r5, #-1299]!	; 0xfffffaed
     224:	67757575 			; <UNDEFINED> instruction: 0x67757575
     228:	2f2f7675 	svccs	0x002f7675
     22c:	59595930 	ldmdbpl	r9, {r4, r5, r8, fp, ip, lr}^
     230:	67f7415b 	ubfxvs	r4, fp, #2, #24
     234:	3d3d4f3a 	ldccc	15, cr4, [sp, #-232]!	; 0xffffff18
     238:	93675a33 	cmnls	r7, #208896	; 0x33000
     23c:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
     240:	42676767 	rsbmi	r6, r7, #27000832	; 0x19c0000
     244:	01040200 	mrseq	r0, R12_usr
     248:	83068206 	movwhi	r8, #25094	; 0x6206
     24c:	753083bb 	ldrvc	r8, [r0, #-955]!	; 0xfffffc45
     250:	c9bbc991 	ldmibgt	fp!, {r0, r4, r7, r8, fp, lr, pc}
     254:	c9d7c9c9 	ldmibgt	r7, {r0, r3, r6, r7, r8, fp, lr, pc}^
     258:	2108c9f3 	strdcs	ip, [r8, -r3]
     25c:	021308c9 	andseq	r0, r3, #13172736	; 0xc90000
     260:	2f081349 	svccs	0x00081349
     264:	c91308c9 	ldmdbgt	r3, {r0, r3, r6, r7, fp}
     268:	08c92108 	stmiaeq	r9, {r3, r8, sp}^
     26c:	3d08bb4b 	vstrcc	d11, [r8, #-300]	; 0xfffffed4
     270:	4b3d4bca 	blmi	f531a0 <startup-0x1f0ace60>
     274:	3d59323d 	lfmcc	f3, 2, [r9, #-244]	; 0xffffff0c
     278:	bb323d4b 	bllt	c8f7ac <startup-0x1f370854>
     27c:	bbbbbbbb 	bllt	feeef170 <firstTime.4040+0xdeee5dc8>
     280:	24e775e5 	strbtcs	r7, [r7], #1509	; 0x5e5
     284:	67765959 			; <UNDEFINED> instruction: 0x67765959
     288:	3f676768 	svccc	0x00676768
     28c:	01040200 	mrseq	r0, R12_usr
     290:	02008206 	andeq	r8, r0, #1610612736	; 0x60000000
     294:	00900204 	addseq	r0, r0, r4, lsl #4
     298:	90030402 	andls	r0, r3, r2, lsl #8
     29c:	84596706 	ldrbhi	r6, [r9], #-1798	; 0xfffff8fa
     2a0:	91676768 	cmnls	r7, r8, ror #14
     2a4:	598383f4 	stmibpl	r3, {r2, r4, r5, r6, r7, r8, r9, pc}
     2a8:	bd152b02 	vldrlt	d2, [r5, #-8]
     2ac:	bdbb5b59 			; <UNDEFINED> instruction: 0xbdbb5b59
     2b0:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
     2b4:	08060104 	stmdaeq	r6, {r2, r8}
     2b8:	04020012 	streq	r0, [r2], #-18	; 0xffffffee
     2bc:	4b064a02 	blmi	192acc <startup-0x1fe6d534>
     2c0:	3f67ca5b 	svccc	0x0067ca5b
     2c4:	4b3d3d24 	blmi	f4f75c <startup-0x1f0b08a4>
     2c8:	59595a40 	ldmdbpl	r9, {r6, r9, fp, ip, lr}^
     2cc:	84835959 	strhi	r5, [r3], #2393	; 0x959
     2d0:	83838483 	orrhi	r8, r3, #-2097152000	; 0x83000000
     2d4:	ad038483 	cfstrsge	mvf8, [r3, #-524]	; 0xfffffdf4
     2d8:	3703207f 	smlsdxcc	r3, pc, r0, r2	; <UNPREDICTABLE>
     2dc:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
     2e0:	7eed0301 	cdpvc	3, 14, cr0, cr13, cr1, {0}
     2e4:	00120220 	andseq	r0, r2, r0, lsr #4
     2e8:	008a0101 	addeq	r0, sl, r1, lsl #2
     2ec:	00020000 	andeq	r0, r2, r0
     2f0:	00000070 	andeq	r0, r0, r0, ror r0
     2f4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     2f8:	0101000d 	tsteq	r1, sp
     2fc:	00000101 	andeq	r0, r0, r1, lsl #2
     300:	00000100 	andeq	r0, r0, r0, lsl #2
     304:	2f3a4301 	svccs	0x003a4301
     308:	2f706f6d 	svccs	0x00706f6d
     30c:	6f4d2f63 	svcvs	0x004d2f63
     310:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     314:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     318:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     31c:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     320:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     324:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     328:	0000432f 	andeq	r4, r0, pc, lsr #6
     32c:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     330:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     334:	632e7463 			; <UNDEFINED> instruction: 0x632e7463
     338:	00000100 	andeq	r0, r0, r0, lsl #2
     33c:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     340:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
     344:	00000100 	andeq	r0, r0, r0, lsl #2
     348:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     34c:	00682e65 	rsbeq	r2, r8, r5, ror #28
     350:	67000001 	strvs	r0, [r0, -r1]
     354:	6f656d61 	svcvs	0x00656d61
     358:	63656a62 	cmnvs	r5, #401408	; 0x62000
     35c:	00682e74 	rsbeq	r2, r8, r4, ror lr
     360:	00000001 	andeq	r0, r0, r1
     364:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
     368:	19200010 	stmdbne	r0!, {r4}
     36c:	594b4c4c 	stmdbpl	fp, {r2, r3, r6, sl, fp, lr}^
     370:	02ca3d67 	sbceq	r3, sl, #6592	; 0x19c0
     374:	01010004 	tsteq	r1, r4
     378:	00000184 	andeq	r0, r0, r4, lsl #3
     37c:	01370002 	teqeq	r7, r2
     380:	01020000 	mrseq	r0, (UNDEF: 2)
     384:	000d0efb 	strdeq	r0, [sp], -fp
     388:	01010101 	tsteq	r1, r1, lsl #2
     38c:	01000000 	mrseq	r0, (UNDEF: 0)
     390:	43010000 	movwmi	r0, #4096	; 0x1000
     394:	6f6d2f3a 	svcvs	0x006d2f3a
     398:	2f632f70 	svccs	0x00632f70
     39c:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     3a0:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     3a4:	6f697461 	svcvs	0x00697461
     3a8:	2f72656e 	svccs	0x0072656e
     3ac:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     3b0:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     3b4:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     3b8:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     3bc:	632e6572 			; <UNDEFINED> instruction: 0x632e6572
     3c0:	00000100 	andeq	r0, r0, r0, lsl #2
     3c4:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     3c8:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
     3cc:	00000100 	andeq	r0, r0, r0, lsl #2
     3d0:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     3d4:	00682e65 	rsbeq	r2, r8, r5, ror #28
     3d8:	67000001 	strvs	r0, [r0, -r1]
     3dc:	6f656d61 	svcvs	0x00656d61
     3e0:	63656a62 	cmnvs	r5, #401408	; 0x62000
     3e4:	00682e74 	rsbeq	r2, r8, r4, ror lr
     3e8:	66000001 	strvs	r0, [r0], -r1
     3ec:	5f657269 	svcpl	0x00657269
     3f0:	63616c62 	cmnvs	r1, #25088	; 0x6200
     3f4:	2e325f6b 	cdpcs	15, 3, cr5, cr2, cr11, {3}
     3f8:	006d6278 	rsbeq	r6, sp, r8, ror r2
     3fc:	66000001 	strvs	r0, [r0], -r1
     400:	31657269 	cmncc	r5, r9, ror #4
     404:	6172675f 	cmnvs	r2, pc, asr r7
     408:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     40c:	0001006d 	andeq	r0, r1, sp, rrx
     410:	72696600 	rsbvc	r6, r9, #0, 12
     414:	6c5f3165 	ldfvse	f3, [pc], {101}	; 0x65
     418:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     41c:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     420:	00000100 	andeq	r0, r0, r0, lsl #2
     424:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     428:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
     42c:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     430:	01006d62 	tsteq	r0, r2, ror #26
     434:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     438:	5f326572 	svcpl	0x00326572
     43c:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     440:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     444:	0001006d 	andeq	r0, r1, sp, rrx
     448:	72696600 	rsbvc	r6, r9, #0, 12
     44c:	675f3365 	ldrbvs	r3, [pc, -r5, ror #6]
     450:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     454:	006d6278 	rsbeq	r6, sp, r8, ror r2
     458:	66000001 	strvs	r0, [r0], -r1
     45c:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     460:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     464:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     468:	01006d62 	tsteq	r0, r2, ror #26
     46c:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     470:	5f346572 	svcpl	0x00346572
     474:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     478:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     47c:	00000100 	andeq	r0, r0, r0, lsl #2
     480:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     484:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     488:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     48c:	006d6278 	rsbeq	r6, sp, r8, ror r2
     490:	66000001 	strvs	r0, [r0], -r1
     494:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
     498:	6172675f 	cmnvs	r2, pc, asr r7
     49c:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     4a0:	0001006d 	andeq	r0, r1, sp, rrx
     4a4:	72696600 	rsbvc	r6, r9, #0, 12
     4a8:	6c5f3565 	cfldr64vs	mvdx3, [pc], {101}	; 0x65
     4ac:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     4b0:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     4b4:	00000100 	andeq	r0, r0, r0, lsl #2
     4b8:	02050000 	andeq	r0, r5, #0
     4bc:	20001064 	andcs	r1, r0, r4, rrx
     4c0:	3d013003 	stccc	0, cr3, [r1, #-12]
     4c4:	2f3e672f 	svccs	0x003e672f
     4c8:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     4cc:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     4d0:	2f3e672f 	svccs	0x003e672f
     4d4:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     4d8:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     4dc:	2f3e672f 	svccs	0x003e672f
     4e0:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     4e4:	1446023d 	strbne	r0, [r6], #-573	; 0xfffffdc3
     4e8:	3e2f4b4c 	vnmulcc.f64	d4, d15, d12
     4ec:	5959594b 	ldmdbpl	r9, {r0, r1, r3, r6, r8, fp, ip, lr}^
     4f0:	9191915a 	orrsls	r9, r1, sl, asr r1
     4f4:	3d3e9391 	ldccc	3, cr9, [lr, #-580]!	; 0xfffffdbc
     4f8:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
     4fc:	01010031 	tsteq	r1, r1, lsr r0
     500:	000000e3 	andeq	r0, r0, r3, ror #1
     504:	006c0002 	rsbeq	r0, ip, r2
     508:	01020000 	mrseq	r0, (UNDEF: 2)
     50c:	000d0efb 	strdeq	r0, [sp], -fp
     510:	01010101 	tsteq	r1, r1, lsl #2
     514:	01000000 	mrseq	r0, (UNDEF: 0)
     518:	43010000 	movwmi	r0, #4096	; 0x1000
     51c:	6f6d2f3a 	svcvs	0x006d2f3a
     520:	2f632f70 	svccs	0x00632f70
     524:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     528:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     52c:	6f697461 	svcvs	0x00697461
     530:	2f72656e 	svccs	0x0072656e
     534:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     538:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     53c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     540:	6c700000 	ldclvs	0, cr0, [r0], #-0
     544:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
     548:	0100632e 	tsteq	r0, lr, lsr #6
     54c:	70730000 	rsbsvc	r0, r3, r0
     550:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     554:	0100682e 	tsteq	r0, lr, lsr #16
     558:	6d690000 	stclvs	0, cr0, [r9, #-0]
     55c:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
     560:	00010068 	andeq	r0, r1, r8, rrx
     564:	6d616700 	stclvs	7, cr6, [r1, #-0]
     568:	6a626f65 	bvs	189c304 <startup-0x1e763cfc>
     56c:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
     570:	00010068 	andeq	r0, r1, r8, rrx
     574:	05000000 	streq	r0, [r0, #-0]
     578:	00130c02 	andseq	r0, r3, r2, lsl #24
     57c:	594d1720 	stmdbpl	sp, {r5, r8, r9, sl, ip}^
     580:	0c033d67 	stceq	13, cr3, [r3], {103}	; 0x67
     584:	040200c8 	streq	r0, [r2], #-200	; 0xffffff38
     588:	00820601 	addeq	r0, r2, r1, lsl #12
     58c:	4a020402 	bmi	8159c <startup-0x1ff7ea64>
     590:	754d4b06 	strbvc	r4, [sp, #-2822]	; 0xfffff4fa
     594:	02004c3d 	andeq	r4, r0, #15616	; 0x3d00
     598:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
     59c:	4d3d7506 	cfldr32mi	mvfx7, [sp, #-24]!	; 0xffffffe8
     5a0:	02005d75 	andeq	r5, r0, #7488	; 0x1d40
     5a4:	4a060104 	bmi	1809bc <startup-0x1fe7f644>
     5a8:	005b5906 	subseq	r5, fp, r6, lsl #18
     5ac:	06010402 	streq	r0, [r1], -r2, lsl #8
     5b0:	5b59064a 	blpl	1641ee0 <startup-0x1e9be120>
     5b4:	01040200 	mrseq	r0, R12_usr
     5b8:	02004a06 	andeq	r4, r0, #24576	; 0x6000
     5bc:	00580304 	subseq	r0, r8, r4, lsl #6
     5c0:	4a040402 	bmi	1015d0 <startup-0x1fefea30>
     5c4:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
     5c8:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
     5cc:	4b064a06 	blmi	192dec <startup-0x1fe6d214>
     5d0:	0402005b 	streq	r0, [r2], #-91	; 0xffffffa5
     5d4:	06740601 	ldrbteq	r0, [r4], -r1, lsl #12
     5d8:	4b765b75 	blmi	1d973b4 <startup-0x1e268c4c>
     5dc:	675c4b68 	ldrbvs	r4, [ip, -r8, ror #22]
     5e0:	0e026867 	cdpeq	8, 0, cr6, cr2, cr7, {3}
     5e4:	dd010100 	stfles	f0, [r1, #-0]
     5e8:	02000001 	andeq	r0, r0, #1
     5ec:	00018200 	andeq	r8, r1, r0, lsl #4
     5f0:	fb010200 	blx	40dfa <startup-0x1ffbf206>
     5f4:	01000d0e 	tsteq	r0, lr, lsl #26
     5f8:	00010101 	andeq	r0, r1, r1, lsl #2
     5fc:	00010000 	andeq	r0, r1, r0
     600:	3a430100 	bcc	10c0a08 <startup-0x1ef3f5f8>
     604:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     608:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 554 <startup-0x1ffffaac>
     60c:	616c706f 	cmnvs	ip, pc, rrx
     610:	61726f62 	cmnvs	r2, r2, ror #30
     614:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     618:	442f7265 	strtmi	r7, [pc], #-613	; 620 <startup-0x1ffff9e0>
     61c:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     620:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     624:	00432f68 	subeq	r2, r3, r8, ror #30
     628:	72696200 	rsbvc	r6, r9, #0, 4
     62c:	00632e64 	rsbeq	r2, r3, r4, ror #28
     630:	73000001 	movwvc	r0, #1
     634:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
     638:	00682e65 	rsbeq	r2, r8, r5, ror #28
     63c:	69000001 	stmdbvs	r0, {r0}
     640:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     644:	0100682e 	tsteq	r0, lr, lsr #16
     648:	61670000 	cmnvs	r7, r0
     64c:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
     650:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     654:	0100682e 	tsteq	r0, lr, lsr #16
     658:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     65c:	5f316472 	svcpl	0x00316472
     660:	63616c62 	cmnvs	r1, #25088	; 0x6200
     664:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     668:	0001006d 	andeq	r0, r1, sp, rrx
     66c:	72696200 	rsbvc	r6, r9, #0, 4
     670:	675f3164 	ldrbvs	r3, [pc, -r4, ror #2]
     674:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     678:	006d6278 	rsbeq	r6, sp, r8, ror r2
     67c:	62000001 	andvs	r0, r0, #1
     680:	31647269 	cmncc	r4, r9, ror #4
     684:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     688:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     68c:	01006d62 	tsteq	r0, r2, ror #26
     690:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     694:	5f326472 	svcpl	0x00326472
     698:	63616c62 	cmnvs	r1, #25088	; 0x6200
     69c:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     6a0:	0001006d 	andeq	r0, r1, sp, rrx
     6a4:	72696200 	rsbvc	r6, r9, #0, 4
     6a8:	675f3264 	ldrbvs	r3, [pc, -r4, ror #4]
     6ac:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     6b0:	006d6278 	rsbeq	r6, sp, r8, ror r2
     6b4:	62000001 	andvs	r0, r0, #1
     6b8:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     6bc:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     6c0:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     6c4:	01006d62 	tsteq	r0, r2, ror #26
     6c8:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     6cc:	5f336472 	svcpl	0x00336472
     6d0:	63616c62 	cmnvs	r1, #25088	; 0x6200
     6d4:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     6d8:	0001006d 	andeq	r0, r1, sp, rrx
     6dc:	72696200 	rsbvc	r6, r9, #0, 4
     6e0:	675f3364 	ldrbvs	r3, [pc, -r4, ror #6]
     6e4:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     6e8:	006d6278 	rsbeq	r6, sp, r8, ror r2
     6ec:	62000001 	andvs	r0, r0, #1
     6f0:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     6f4:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     6f8:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     6fc:	01006d62 	tsteq	r0, r2, ror #26
     700:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     704:	5f346472 	svcpl	0x00346472
     708:	63616c62 	cmnvs	r1, #25088	; 0x6200
     70c:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     710:	0001006d 	andeq	r0, r1, sp, rrx
     714:	72696200 	rsbvc	r6, r9, #0, 4
     718:	675f3464 	ldrbvs	r3, [pc, -r4, ror #8]
     71c:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     720:	006d6278 	rsbeq	r6, sp, r8, ror r2
     724:	62000001 	andvs	r0, r0, #1
     728:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     72c:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     730:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     734:	01006d62 	tsteq	r0, r2, ror #26
     738:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     73c:	5f356472 	svcpl	0x00356472
     740:	63616c62 	cmnvs	r1, #25088	; 0x6200
     744:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     748:	0001006d 	andeq	r0, r1, sp, rrx
     74c:	72696200 	rsbvc	r6, r9, #0, 4
     750:	675f3564 	ldrbvs	r3, [pc, -r4, ror #10]
     754:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     758:	006d6278 	rsbeq	r6, sp, r8, ror r2
     75c:	62000001 	andvs	r0, r0, #1
     760:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     764:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     768:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     76c:	01006d62 	tsteq	r0, r2, ror #26
     770:	00000000 	andeq	r0, r0, r0
     774:	14e00205 	strbtne	r0, [r0], #517	; 0x205
     778:	3f032000 	svccc	0x00032000
     77c:	672f3e01 	strvs	r3, [pc, -r1, lsl #28]!
     780:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     784:	2f3e672f 	svccs	0x003e672f
     788:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     78c:	3f672f3d 	svccc	0x00672f3d
     790:	2f3d672f 	svccs	0x003d672f
     794:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     798:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     79c:	2f3d672f 	svccs	0x003d672f
     7a0:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     7a4:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     7a8:	023d672f 	eorseq	r6, sp, #12320768	; 0xbc0000
     7ac:	4b4c145e 	blmi	130592c <startup-0x1ecfa6d4>
     7b0:	594b3e2f 	stmdbpl	fp, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}^
     7b4:	5c595959 	mrrcpl	9, 5, r5, r9, cr9	; <UNPREDICTABLE>
     7b8:	91919191 			; <UNDEFINED> instruction: 0x91919191
     7bc:	3d3e9493 	cfldrscc	mvf9, [lr, #-588]!	; 0xfffffdb4
     7c0:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
     7c4:	0101003d 	tsteq	r1, sp, lsr r0
     7c8:	00000161 	andeq	r0, r0, r1, ror #2
     7cc:	011c0002 	tsteq	ip, r2
     7d0:	01020000 	mrseq	r0, (UNDEF: 2)
     7d4:	000d0efb 	strdeq	r0, [sp], -fp
     7d8:	01010101 	tsteq	r1, r1, lsl #2
     7dc:	01000000 	mrseq	r0, (UNDEF: 0)
     7e0:	43010000 	movwmi	r0, #4096	; 0x1000
     7e4:	6f6d2f3a 	svcvs	0x006d2f3a
     7e8:	2f632f70 	svccs	0x00632f70
     7ec:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     7f0:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     7f4:	6f697461 	svcvs	0x00697461
     7f8:	2f72656e 	svccs	0x0072656e
     7fc:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     800:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     804:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     808:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     80c:	2e686374 	mcrcs	3, 3, r6, cr8, cr4, {3}
     810:	00010063 	andeq	r0, r1, r3, rrx
     814:	72707300 	rsbsvc	r7, r0, #0, 6
     818:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
     81c:	00010068 	andeq	r0, r1, r8, rrx
     820:	616d6900 	cmnvs	sp, r0, lsl #18
     824:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     828:	00000100 	andeq	r0, r0, r0, lsl #2
     82c:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     830:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     834:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
     838:	00000100 	andeq	r0, r0, r0, lsl #2
     83c:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     840:	625f3168 	subsvs	r3, pc, #104, 2
     844:	6b63616c 	blvs	18d8dfc <startup-0x1e727204>
     848:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     84c:	00000100 	andeq	r0, r0, r0, lsl #2
     850:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     854:	675f3168 	ldrbvs	r3, [pc, -r8, ror #2]
     858:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     85c:	006d6278 	rsbeq	r6, sp, r8, ror r2
     860:	77000001 	strvc	r0, [r0, -r1]
     864:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     868:	696c5f31 	stmdbvs	ip!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     86c:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     870:	006d6278 	rsbeq	r6, sp, r8, ror r2
     874:	77000001 	strvc	r0, [r0, -r1]
     878:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     87c:	6c625f32 	stclvs	15, cr5, [r2], #-200	; 0xffffff38
     880:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     884:	006d6278 	rsbeq	r6, sp, r8, ror r2
     888:	77000001 	strvc	r0, [r0, -r1]
     88c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     890:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
     894:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     898:	01006d62 	tsteq	r0, r2, ror #26
     89c:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     8a0:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     8a4:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     8a8:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     8ac:	01006d62 	tsteq	r0, r2, ror #26
     8b0:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     8b4:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     8b8:	616c625f 	cmnvs	ip, pc, asr r2
     8bc:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     8c0:	01006d62 	tsteq	r0, r2, ror #26
     8c4:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     8c8:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     8cc:	6172675f 	cmnvs	r2, pc, asr r7
     8d0:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     8d4:	0001006d 	andeq	r0, r1, sp, rrx
     8d8:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     8dc:	5f336863 	svcpl	0x00336863
     8e0:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     8e4:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     8e8:	0001006d 	andeq	r0, r1, sp, rrx
     8ec:	05000000 	streq	r0, [r0, #-0]
     8f0:	00184402 	andseq	r4, r8, r2, lsl #8
     8f4:	01280320 			; <UNDEFINED> instruction: 0x01280320
     8f8:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     8fc:	2f3d672f 	svccs	0x003d672f
     900:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     904:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     908:	2f3f672f 	svccs	0x003f672f
     90c:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     910:	3e672f3d 	mcrcc	15, 3, r2, cr7, cr13, {1}
     914:	4c143a02 			; <UNDEFINED> instruction: 0x4c143a02
     918:	4b3e2f4b 	blmi	f8c64c <startup-0x1f0739b4>
     91c:	915b5959 	cmpls	fp, r9, asr r9
     920:	3e949191 	mrccc	1, 4, r9, cr4, cr1, {4}
     924:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     928:	01002902 	tsteq	r0, r2, lsl #18
     92c:	00016c01 	andeq	r6, r1, r1, lsl #24
     930:	1a000200 	bne	1138 <startup-0x1fffeec8>
     934:	02000001 	andeq	r0, r0, #1
     938:	0d0efb01 	vstreq	d15, [lr, #-4]
     93c:	01010100 	mrseq	r0, (UNDEF: 17)
     940:	00000001 	andeq	r0, r0, r1
     944:	01000001 	tsteq	r0, r1
     948:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     94c:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     950:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     954:	6f62616c 	svcvs	0x0062616c
     958:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     95c:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     960:	5049442f 	subpl	r4, r9, pc, lsr #8
     964:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     968:	2f686374 	svccs	0x00686374
     96c:	44000043 	strmi	r0, [r0], #-67	; 0xffffffbd
     970:	632e5049 			; <UNDEFINED> instruction: 0x632e5049
     974:	00000100 	andeq	r0, r0, r0, lsl #2
     978:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     97c:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
     980:	00000100 	andeq	r0, r0, r0, lsl #2
     984:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     988:	00682e65 	rsbeq	r2, r8, r5, ror #28
     98c:	67000001 	strvs	r0, [r0, -r1]
     990:	6f656d61 	svcvs	0x00656d61
     994:	63656a62 	cmnvs	r5, #401408	; 0x62000
     998:	00682e74 	rsbeq	r2, r8, r4, ror lr
     99c:	77000001 	strvc	r0, [r0, -r1]
     9a0:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     9a4:	6c625f31 	stclvs	15, cr5, [r2], #-196	; 0xffffff3c
     9a8:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     9ac:	006d6278 	rsbeq	r6, sp, r8, ror r2
     9b0:	77000001 	strvc	r0, [r0, -r1]
     9b4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     9b8:	72675f31 	rsbvc	r5, r7, #49, 30	; 0xc4
     9bc:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     9c0:	01006d62 	tsteq	r0, r2, ror #26
     9c4:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     9c8:	31686374 	smccc	34356	; 0x8634
     9cc:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     9d0:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     9d4:	01006d62 	tsteq	r0, r2, ror #26
     9d8:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     9dc:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     9e0:	616c625f 	cmnvs	ip, pc, asr r2
     9e4:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     9e8:	01006d62 	tsteq	r0, r2, ror #26
     9ec:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     9f0:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     9f4:	6172675f 	cmnvs	r2, pc, asr r7
     9f8:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     9fc:	0001006d 	andeq	r0, r1, sp, rrx
     a00:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     a04:	5f326863 	svcpl	0x00326863
     a08:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     a0c:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     a10:	0001006d 	andeq	r0, r1, sp, rrx
     a14:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     a18:	5f336863 	svcpl	0x00336863
     a1c:	63616c62 	cmnvs	r1, #25088	; 0x6200
     a20:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     a24:	0001006d 	andeq	r0, r1, sp, rrx
     a28:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     a2c:	5f336863 	svcpl	0x00336863
     a30:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     a34:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     a38:	00000100 	andeq	r0, r0, r0, lsl #2
     a3c:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     a40:	6c5f3368 	mrrcvs	3, 6, r3, pc, cr8	; <UNPREDICTABLE>
     a44:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     a48:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     a4c:	00000100 	andeq	r0, r0, r0, lsl #2
     a50:	02050000 	andeq	r0, r5, #0
     a54:	20001a7c 	andcs	r1, r0, ip, ror sl
     a58:	3e012803 	cdpcc	8, 0, cr2, cr1, cr3, {0}
     a5c:	2f3d672f 	svccs	0x003d672f
     a60:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     a64:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     a68:	2f3d672f 	svccs	0x003d672f
     a6c:	672f3f67 	strvs	r3, [pc, -r7, ror #30]!
     a70:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     a74:	023e672f 	eorseq	r6, lr, #12320768	; 0xbc0000
     a78:	4b4c143a 	blmi	1305b68 <startup-0x1ecfa498>
     a7c:	594b3e2f 	stmdbpl	fp, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}^
     a80:	91915b59 	orrsls	r5, r1, r9, asr fp
     a84:	3d3e9491 	cfldrscc	mvf9, [lr, #-580]!	; 0xfffffdbc
     a88:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
     a8c:	4d4b1429 	cfstrdmi	mvd1, [fp, #-164]	; 0xffffff5c
     a90:	4b300859 	blmi	c02bfc <startup-0x1f3fd404>
     a94:	3e4b1d4e 	cdpcc	13, 4, cr1, cr11, cr14, {2}
     a98:	01000a02 	tsteq	r0, r2, lsl #20
     a9c:	00034e01 	andeq	r4, r3, r1, lsl #28
     aa0:	7c000200 	sfmvc	f0, 4, [r0], {-0}
     aa4:	02000000 	andeq	r0, r0, #0
     aa8:	0d0efb01 	vstreq	d15, [lr, #-4]
     aac:	01010100 	mrseq	r0, (UNDEF: 17)
     ab0:	00000001 	andeq	r0, r0, r1
     ab4:	01000001 	tsteq	r0, r1
     ab8:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     abc:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     ac0:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     ac4:	6f62616c 	svcvs	0x0062616c
     ac8:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     acc:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     ad0:	5049442f 	subpl	r4, r9, pc, lsr #8
     ad4:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     ad8:	2f686374 	svccs	0x00686374
     adc:	67000043 	strvs	r0, [r0, -r3, asr #32]
     ae0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
     ae4:	2e736369 	cdpcs	3, 7, cr6, cr3, cr9, {3}
     ae8:	00010063 	andeq	r0, r1, r3, rrx
     aec:	72707300 	rsbsvc	r7, r0, #0, 6
     af0:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
     af4:	00010068 	andeq	r0, r1, r8, rrx
     af8:	616d6900 	cmnvs	sp, r0, lsl #18
     afc:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     b00:	00000100 	andeq	r0, r0, r0, lsl #2
     b04:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     b08:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     b0c:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
     b10:	00000100 	andeq	r0, r0, r0, lsl #2
     b14:	70617267 	rsbvc	r7, r1, r7, ror #4
     b18:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
     b1c:	0100682e 	tsteq	r0, lr, lsr #16
     b20:	00000000 	andeq	r0, r0, r0
     b24:	1d280205 	sfmne	f0, 4, [r8, #-20]!	; 0xffffffec
     b28:	30152000 	andscc	r2, r5, r0
     b2c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     b30:	01040200 	mrseq	r0, R12_usr
     b34:	67062006 	strvs	r2, [r6, -r6]
     b38:	3d30a03d 	ldccc	0, cr10, [r0, #-244]!	; 0xffffff0c
     b3c:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
     b40:	06010402 	streq	r0, [r1], -r2, lsl #8
     b44:	3d670620 	stclcc	6, cr0, [r7, #-128]!	; 0xffffff80
     b48:	2f214ba0 	svccs	0x00214ba0
     b4c:	5e2a2f2f 	cdppl	15, 2, cr2, cr10, cr15, {1}
     b50:	57214f4c 	strpl	r4, [r1, -ip, asr #30]!
     b54:	4a09035b 	bmi	2418c8 <startup-0x1fdbe738>
     b58:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
     b5c:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
     b60:	00570304 	subseq	r0, r7, r4, lsl #6
     b64:	06010402 	streq	r0, [r1], -r2, lsl #8
     b68:	674c063c 	smlaldxvs	r0, ip, ip, r6
     b6c:	2f674b2f 	svccs	0x00674b2f
     b70:	a14b4b4b 	cmpge	fp, fp, asr #22
     b74:	83915968 	orrshi	r5, r1, #104, 18	; 0x1a0000
     b78:	59687659 	stmdbpl	r8!, {r0, r3, r4, r6, r9, sl, ip, sp, lr}^
     b7c:	675983d7 	smmlsvs	r9, r7, r3, r8
     b80:	74120367 	ldrvc	r0, [r2], #-871	; 0xfffffc99
     b84:	03206e03 			; <UNDEFINED> instruction: 0x03206e03
     b88:	70034a12 	andvc	r4, r3, r2, lsl sl
     b8c:	223d3d20 	eorscs	r3, sp, #32, 26	; 0x800
     b90:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
     b94:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
     b98:	3d3e4c22 	ldccc	12, cr4, [lr, #-136]!	; 0xffffff78
     b9c:	313d3d3d 	teqcc	sp, sp, lsr sp
     ba0:	3d752f3d 	ldclcc	15, cr2, [r5, #-244]!	; 0xffffff0c
     ba4:	4a790331 	bmi	1e41870 <startup-0x1e1be790>
     ba8:	bc3d2327 	ldclt	3, cr2, [sp], #-156	; 0xffffff64
     bac:	3d3d3d67 	ldccc	13, cr3, [sp, #-412]!	; 0xfffffe64
     bb0:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
     bb4:	3e3d592f 	vaddcc.f16	s10, s26, s31	; <UNPREDICTABLE>
     bb8:	4b303d4b 	blmi	c100ec <startup-0x1f3eff14>
     bbc:	bc3d313d 	ldflts	f3, [sp], #-244	; 0xffffff0c
     bc0:	5a595967 	bpl	1657164 <startup-0x1e9a8e9c>
     bc4:	2f594b91 	svccs	0x00594b91
     bc8:	593e2f3d 	ldmdbpl	lr!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}
     bcc:	3d59303d 	ldclcc	0, cr3, [r9, #-244]	; 0xffffff0c
     bd0:	3d3d3d31 	ldccc	13, cr3, [sp, #-196]!	; 0xffffff3c
     bd4:	593d9167 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, ip, pc}
     bd8:	4b833d3d 	blmi	fe0d00d4 <firstTime.4040+0xde0c6d2c>
     bdc:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
     be0:	2f4c833d 	svccs	0x004c833d
     be4:	3d3d3e3d 	ldccc	14, cr3, [sp, #-244]!	; 0xffffff0c
     be8:	3d3d3e3d 	ldccc	14, cr3, [sp, #-244]!	; 0xffffff0c
     bec:	4b4b4b3e 	blmi	12d38ec <startup-0x1ed2c714>
     bf0:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
     bf4:	4c9f4b3e 	vldmiami	pc, {d4-<overflow reg d34>}
     bf8:	03040200 	movweq	r0, #16896	; 0x4200
     bfc:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
     c00:	02004903 	andeq	r4, r0, #49152	; 0xc000
     c04:	58060104 	stmdapl	r6, {r2, r8}
     c08:	02040200 	andeq	r0, r4, #0, 4
     c0c:	02004606 	andeq	r4, r0, #6291456	; 0x600000
     c10:	58060104 	stmdapl	r6, {r2, r8}
     c14:	764d5206 	strbvc	r5, [sp], -r6, lsl #4
     c18:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
     c1c:	004a0601 	subeq	r0, sl, r1, lsl #12
     c20:	4a020402 	bmi	81c30 <startup-0x1ff7e3d0>
     c24:	03040200 	movweq	r0, #16896	; 0x4200
     c28:	084c064a 	stmdaeq	ip, {r1, r3, r6, r9, sl}^
     c2c:	3e3d3d13 	mrccc	13, 1, r3, cr13, cr3, {0}
     c30:	76763dbc 			; <UNDEFINED> instruction: 0x76763dbc
     c34:	d71fd93d 			; <UNDEFINED> instruction: 0xd71fd93d
     c38:	1fd93d23 	svcne	0x00d93d23
     c3c:	d93d23d7 	ldmdble	sp!, {r0, r1, r2, r4, r6, r7, r8, r9, sp}
     c40:	6103d71f 	tstvs	r3, pc, lsl r7
     c44:	2023032e 	eorcs	r0, r3, lr, lsr #6
     c48:	020069af 	andeq	r6, r0, #2867200	; 0x2bc000
     c4c:	4a060104 	bmi	181064 <startup-0x1fe7ef9c>
     c50:	02040200 	andeq	r0, r4, #0, 4
     c54:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
     c58:	4b064a03 	blmi	19346c <startup-0x1fe6cb94>
     c5c:	59130875 	ldmdbpl	r3, {r0, r2, r4, r5, r6, fp}
     c60:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
     c64:	3d5b5959 	vldrcc.16	s11, [fp, #-178]	; 0xffffff4e	; <UNPREDICTABLE>
     c68:	4c4b3d76 	mcrrmi	13, 7, r3, fp, cr6
     c6c:	d8c93e4b 	stmiale	r9, {r0, r1, r3, r6, r9, sl, fp, ip, sp}^
     c70:	ae3dca9f 			; <UNDEFINED> instruction: 0xae3dca9f
     c74:	ac5e03a0 	mrrcge	3, 10, r0, lr, cr0
     c78:	84202303 	strthi	r2, [r0], #-771	; 0xfffffcfd
     c7c:	00592f4c 	subseq	r2, r9, ip, asr #30
     c80:	06010402 	streq	r0, [r1], -r2, lsl #8
     c84:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
     c88:	02002e02 	andeq	r2, r0, #2, 28
     c8c:	00200404 	eoreq	r0, r0, r4, lsl #8
     c90:	06040402 	streq	r0, [r4], -r2, lsl #8
     c94:	75d7593d 	ldrbvc	r5, [r7, #2365]	; 0x93d
     c98:	03040200 	movweq	r0, #16896	; 0x4200
     c9c:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
     ca0:	0200ab03 	andeq	sl, r0, #3072	; 0xc00
     ca4:	9e060104 	adflss	f0, f6, f4
     ca8:	02040200 	andeq	r0, r4, #0, 4
     cac:	02005506 	andeq	r5, r0, #25165824	; 0x1800000
     cb0:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
     cb4:	02040200 	andeq	r0, r4, #0, 4
     cb8:	02005606 	andeq	r5, r0, #6291456	; 0x600000
     cbc:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
     cc0:	580a0306 	stmdapl	sl, {r1, r2, r8, r9}
     cc4:	5a597652 	bpl	165e614 <startup-0x1e9a19ec>
     cc8:	bb3d3d59 	bllt	f50234 <startup-0x1f0afdcc>
     ccc:	3de6913d 	stfccp	f1, [r6, #244]!	; 0xf4
     cd0:	02006708 	andeq	r6, r0, #8, 14	; 0x200000
     cd4:	7a030204 	bvc	c14ec <startup-0x1ff3eb14>
     cd8:	02006608 	andeq	r6, r0, #8, 12	; 0x800000
     cdc:	3c060104 	stfccs	f0, [r6], {4}
     ce0:	02040200 	andeq	r0, r4, #0, 4
     ce4:	02003a06 	andeq	r3, r0, #24576	; 0x6000
     ce8:	3c060104 	stfccs	f0, [r6], {4}
     cec:	02040200 	andeq	r0, r4, #0, 4
     cf0:	02004906 	andeq	r4, r0, #98304	; 0x18000
     cf4:	3c060104 	stfccs	f0, [r6], {4}
     cf8:	580e0306 	stmdapl	lr, {r1, r2, r8, r9}
     cfc:	003d774c 	eorseq	r7, sp, ip, asr #14
     d00:	3d030402 	cfstrscc	mvf0, [r3, #-8]
     d04:	03040200 	movweq	r0, #16896	; 0x4200
     d08:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
     d0c:	003c0601 	eorseq	r0, ip, r1, lsl #12
     d10:	06020402 	streq	r0, [r2], -r2, lsl #8
     d14:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
     d18:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
     d1c:	3d774c6b 	ldclcc	12, cr4, [r7, #-428]!	; 0xfffffe54
     d20:	03040200 	movweq	r0, #16896	; 0x4200
     d24:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     d28:	02006503 	andeq	r6, r0, #12582912	; 0xc00000
     d2c:	3c060104 	stfccs	f0, [r6], {4}
     d30:	02040200 	andeq	r0, r4, #0, 4
     d34:	02006506 	andeq	r6, r0, #25165824	; 0x1800000
     d38:	3c060104 	stfccs	f0, [r6], {4}
     d3c:	3d4d6b06 	vstrcc	d22, [sp, #-24]	; 0xffffffe8
     d40:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
     d44:	02006930 	andeq	r6, r0, #48, 18	; 0xc0000
     d48:	00300104 	eorseq	r0, r0, r4, lsl #2
     d4c:	2f010402 	svccs	0x00010402
     d50:	01040200 	mrseq	r0, R12_usr
     d54:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
     d58:	0200c901 	andeq	ip, r0, #16384	; 0x4000
     d5c:	13080104 	movwne	r0, #33028	; 0x8104
     d60:	01040200 	mrseq	r0, R12_usr
     d64:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
     d68:	02002f01 	andeq	r2, r0, #1, 30
     d6c:	00680104 	rsbeq	r0, r8, r4, lsl #2
     d70:	c9010402 	stmdbgt	r1, {r1, sl}
     d74:	01040200 	mrseq	r0, R12_usr
     d78:	02001308 	andeq	r1, r0, #8, 6	; 0x20000000
     d7c:	00920104 	addseq	r0, r2, r4, lsl #2
     d80:	4b010402 	blmi	41d90 <startup-0x1ffbe270>
     d84:	01040200 	mrseq	r0, R12_usr
     d88:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
     d8c:	02002f01 	andeq	r2, r0, #1, 30
     d90:	00670104 	rsbeq	r0, r7, r4, lsl #2
     d94:	08010402 	stmdaeq	r1, {r1, sl}
     d98:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
     d9c:	02004c01 	andeq	r4, r0, #256	; 0x100
     da0:	6c030104 	stfvss	f0, [r3], {4}
     da4:	3c19033c 	ldccc	3, cr0, [r9], {60}	; 0x3c
     da8:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
     dac:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
     db0:	91080304 	tstls	r8, r4, lsl #6
     db4:	03040200 	movweq	r0, #16896	; 0x4200
     db8:	02009108 	andeq	r9, r0, #8, 2
     dbc:	91080304 	tstls	r8, r4, lsl #6
     dc0:	03040200 	movweq	r0, #16896	; 0x4200
     dc4:	02004608 	andeq	r4, r0, #8, 12	; 0x800000
     dc8:	3c060104 	stfccs	f0, [r6], {4}
     dcc:	3e085006 	cdpcc	0, 0, cr5, cr8, cr6, {0}
     dd0:	21083d4b 	tstcs	r8, fp, asr #26
     dd4:	21082108 	tstcs	r8, r8, lsl #2
     dd8:	21304b4d 	teqcs	r0, sp, asr #22
     ddc:	3e4b3e4b 	cdpcc	14, 4, cr3, cr11, cr11, {2}
     de0:	034b3e4b 	movteq	r3, #48715	; 0xbe4b
     de4:	0e033c75 	mcreq	12, 0, r3, cr3, cr5, {3}
     de8:	0b023058 	bleq	8cf50 <startup-0x1ff730b0>
     dec:	72010100 	andvc	r0, r1, #0, 2
     df0:	02000000 	andeq	r0, r0, #0
     df4:	00005b00 	andeq	r5, r0, r0, lsl #22
     df8:	fb010200 	blx	41602 <startup-0x1ffbe9fe>
     dfc:	01000d0e 	tsteq	r0, lr, lsl #26
     e00:	00010101 	andeq	r0, r1, r1, lsl #2
     e04:	00010000 	andeq	r0, r1, r0
     e08:	3a430100 	bcc	10c1210 <startup-0x1ef3edf0>
     e0c:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     e10:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; d5c <startup-0x1ffff2a4>
     e14:	616c706f 	cmnvs	ip, pc, rrx
     e18:	61726f62 	cmnvs	r2, r2, ror #30
     e1c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     e20:	442f7265 	strtmi	r7, [pc], #-613	; e28 <startup-0x1ffff1d8>
     e24:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     e28:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     e2c:	00432f68 	subeq	r2, r3, r8, ror #30
     e30:	616d6900 	cmnvs	sp, r0, lsl #18
     e34:	632e6567 			; <UNDEFINED> instruction: 0x632e6567
     e38:	00000100 	andeq	r0, r0, r0, lsl #2
     e3c:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     e40:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
     e44:	00000100 	andeq	r0, r0, r0, lsl #2
     e48:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     e4c:	00682e65 	rsbeq	r2, r8, r5, ror #28
     e50:	00000001 	andeq	r0, r0, r1
     e54:	6c020500 	cfstr32vs	mvfx0, [r2], {-0}
     e58:	1420002b 	strtne	r0, [r0], #-43	; 0xffffffd5
     e5c:	3d3d3d75 	ldccc	13, cr3, [sp, #-468]!	; 0xfffffe2c
     e60:	01000402 	tsteq	r0, r2, lsl #8
     e64:	00006801 	andeq	r6, r0, r1, lsl #16
     e68:	51000200 	mrspl	r0, R8_usr
     e6c:	02000000 	andeq	r0, r0, #0
     e70:	0d0efb01 	vstreq	d15, [lr, #-4]
     e74:	01010100 	mrseq	r0, (UNDEF: 17)
     e78:	00000001 	andeq	r0, r0, r1
     e7c:	01000001 	tsteq	r0, r1
     e80:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     e84:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     e88:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     e8c:	6f62616c 	svcvs	0x0062616c
     e90:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     e94:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     e98:	5049442f 	subpl	r4, r9, pc, lsr #8
     e9c:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     ea0:	2f686374 	svccs	0x00686374
     ea4:	73000043 	movwvc	r0, #67	; 0x43
     ea8:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
     eac:	00632e65 	rsbeq	r2, r3, r5, ror #28
     eb0:	73000001 	movwvc	r0, #1
     eb4:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
     eb8:	00682e65 	rsbeq	r2, r8, r5, ror #28
     ebc:	00000001 	andeq	r0, r0, r1
     ec0:	94020500 	strls	r0, [r2], #-1280	; 0xfffffb00
     ec4:	1520002b 	strne	r0, [r0, #-43]!	; 0xffffffd5
     ec8:	3d3d3d75 	ldccc	13, cr3, [sp, #-468]!	; 0xfffffe2c
     ecc:	01000402 	tsteq	r0, r2, lsl #8
     ed0:	00006c01 	andeq	r6, r0, r1, lsl #24
     ed4:	4d000200 	sfmmi	f0, 4, [r0, #-0]
     ed8:	02000000 	andeq	r0, r0, #0
     edc:	0d0efb01 	vstreq	d15, [lr, #-4]
     ee0:	01010100 	mrseq	r0, (UNDEF: 17)
     ee4:	00000001 	andeq	r0, r0, r1
     ee8:	01000001 	tsteq	r0, r1
     eec:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     ef0:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     ef4:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     ef8:	6f62616c 	svcvs	0x0062616c
     efc:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     f00:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     f04:	5049442f 	subpl	r4, r9, pc, lsr #8
     f08:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     f0c:	2f686374 	svccs	0x00686374
     f10:	67000043 	strvs	r0, [r0, -r3, asr #32]
     f14:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
     f18:	00010063 	andeq	r0, r1, r3, rrx
     f1c:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
     f20:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     f24:	00000001 	andeq	r0, r0, r1
     f28:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
     f2c:	1520002b 	strne	r0, [r0, #-43]!	; 0xffffffd5
     f30:	2f763d2f 	svccs	0x00763d2f
     f34:	4b693d59 	blmi	1a504a0 <startup-0x1e5afb60>
     f38:	22309167 	eorscs	r9, r0, #-1073741799	; 0xc0000019
     f3c:	01000402 	tsteq	r0, r2, lsl #8
     f40:	00015a01 	andeq	r5, r1, r1, lsl #20
     f44:	81000200 	mrshi	r0, R8_usr
     f48:	02000000 	andeq	r0, r0, #0
     f4c:	0d0efb01 	vstreq	d15, [lr, #-4]
     f50:	01010100 	mrseq	r0, (UNDEF: 17)
     f54:	00000001 	andeq	r0, r0, r1
     f58:	01000001 	tsteq	r0, r1
     f5c:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     f60:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     f64:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     f68:	6f62616c 	svcvs	0x0062616c
     f6c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     f70:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     f74:	5049442f 	subpl	r4, r9, pc, lsr #8
     f78:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     f7c:	2f686374 	svccs	0x00686374
     f80:	61000043 	tstvs	r0, r3, asr #32
     f84:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     f88:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
     f8c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
     f90:	0100632e 	tsteq	r0, lr, lsr #6
     f94:	70730000 	rsbsvc	r0, r3, r0
     f98:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     f9c:	0100682e 	tsteq	r0, lr, lsr #16
     fa0:	6d690000 	stclvs	0, cr0, [r9, #-0]
     fa4:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
     fa8:	00010068 	andeq	r0, r1, r8, rrx
     fac:	6d616700 	stclvs	7, cr6, [r1, #-0]
     fb0:	6a626f65 	bvs	189cd4c <startup-0x1e7632b4>
     fb4:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
     fb8:	00010068 	andeq	r0, r1, r8, rrx
     fbc:	61726700 	cmnvs	r2, r0, lsl #14
     fc0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
     fc4:	00682e73 	rsbeq	r2, r8, r3, ror lr
     fc8:	00000001 	andeq	r0, r0, r1
     fcc:	28020500 	stmdacs	r2, {r8, sl}
     fd0:	0320002c 			; <UNDEFINED> instruction: 0x0320002c
     fd4:	5969012e 	stmdbpl	r9!, {r1, r2, r3, r5, r8}^
     fd8:	696859bb 	stmdbvs	r8!, {r0, r1, r3, r4, r5, r7, r8, fp, ip, lr}^
     fdc:	59130859 	ldmdbpl	r3, {r0, r3, r4, r6, fp}
     fe0:	3d3d6776 	ldccc	7, cr6, [sp, #-472]!	; 0xfffffe28
     fe4:	3d674c59 	stclcc	12, cr4, [r7, #-356]!	; 0xfffffe9c
     fe8:	3e4c593d 			; <UNDEFINED> instruction: 0x3e4c593d
     fec:	5a3d3d67 	bpl	f50590 <startup-0x1f0afa70>
     ff0:	842f6767 	strthi	r6, [pc], #-1895	; ff8 <startup-0x1ffff008>
     ff4:	3d3d673e 	ldccc	7, cr6, [sp, #-248]!	; 0xffffff08
     ff8:	2f67675a 	svccs	0x0067675a
     ffc:	4b3d6784 	blmi	f5ae14 <startup-0x1f0a51ec>
    1000:	3e683d2f 	cdpcc	13, 6, cr3, cr8, cr15, {1}
    1004:	4b2f2f3d 	blmi	bccd00 <startup-0x1f433300>
    1008:	67762f3d 			; <UNDEFINED> instruction: 0x67762f3d
    100c:	01040200 	mrseq	r0, R12_usr
    1010:	83062006 	movwhi	r2, #24582	; 0x6006
    1014:	4c3d593d 			; <UNDEFINED> instruction: 0x4c3d593d
    1018:	764b6791 			; <UNDEFINED> instruction: 0x764b6791
    101c:	00304c9f 	mlaseq	r0, pc, ip, r4	; <UNPREDICTABLE>
    1020:	06010402 	streq	r0, [r1], -r2, lsl #8
    1024:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
    1028:	02003f3d 	andeq	r3, r0, #61, 30	; 0xf4
    102c:	20060104 	andcs	r0, r6, r4, lsl #2
    1030:	3d3d8306 	ldccc	3, cr8, [sp, #-24]!	; 0xffffffe8
    1034:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
    1038:	06200601 	strteq	r0, [r0], -r1, lsl #12
    103c:	3f3d3d83 	svccc	0x003d3d83
    1040:	01040200 	mrseq	r0, R12_usr
    1044:	83062006 	movwhi	r2, #24582	; 0x6006
    1048:	3e3f3d3d 	mrccc	13, 1, r3, cr15, cr13, {1}
    104c:	2f843d34 	svccs	0x00843d34
    1050:	3e3e2f2f 	cdpcc	15, 3, cr2, cr14, cr15, {1}
    1054:	214b2f84 	smlalbbcs	r2, fp, r4, pc	; <UNPREDICTABLE>
    1058:	4b2f4d73 	blmi	bd462c <startup-0x1f42b9d4>
    105c:	684d7321 	stmdavs	sp, {r0, r5, r8, r9, ip, sp, lr}^
    1060:	214b3059 	qdaddcs	r3, r9, fp
    1064:	214b4d73 	hvccs	46291	; 0xb4d3
    1068:	4c4b4e73 	mcrrmi	14, 7, r4, fp, cr3
    106c:	2f4b3075 	svccs	0x004b3075
    1070:	0073213d 	rsbseq	r2, r3, sp, lsr r1
    1074:	06010402 	streq	r0, [r1], -r2, lsl #8
    1078:	4b6b064a 	blmi	1ac29a8 <startup-0x1e53d658>
    107c:	73213d2f 			; <UNDEFINED> instruction: 0x73213d2f
    1080:	01040200 	mrseq	r0, R12_usr
    1084:	6b064a06 	blvs	1938a4 <startup-0x1fe6c75c>
    1088:	753e4e4b 	ldrvc	r4, [lr, #-3659]!	; 0xfffff1b5
    108c:	4b2f2f68 	blmi	bcce34 <startup-0x1f4331cc>
    1090:	4d73213d 	ldfmie	f2, [r3, #-244]!	; 0xffffff0c
    1094:	73212f4b 			; <UNDEFINED> instruction: 0x73212f4b
    1098:	0802214d 	stmdaeq	r2, {r0, r2, r3, r6, r8, sp}
    109c:	76010100 	strvc	r0, [r1], -r0, lsl #2
    10a0:	02000000 	andeq	r0, r0, #0
    10a4:	00005700 	andeq	r5, r0, r0, lsl #14
    10a8:	fb010200 	blx	418b2 <startup-0x1ffbe74e>
    10ac:	01000d0e 	tsteq	r0, lr, lsl #26
    10b0:	00010101 	andeq	r0, r1, r1, lsl #2
    10b4:	00010000 	andeq	r0, r1, r0
    10b8:	3a430100 	bcc	10c14c0 <startup-0x1ef3eb40>
    10bc:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
    10c0:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 100c <startup-0x1fffeff4>
    10c4:	616c706f 	cmnvs	ip, pc, rrx
    10c8:	61726f62 	cmnvs	r2, r2, ror #30
    10cc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    10d0:	442f7265 	strtmi	r7, [pc], #-613	; 10d8 <startup-0x1fffef28>
    10d4:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
    10d8:	63746957 	cmnvs	r4, #1425408	; 0x15c000
    10dc:	00432f68 	subeq	r2, r3, r8, ror #30
    10e0:	6f6c7300 	svcvs	0x006c7300
    10e4:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
    10e8:	632e7478 			; <UNDEFINED> instruction: 0x632e7478
    10ec:	00000100 	andeq	r0, r0, r0, lsl #2
    10f0:	776f6c73 			; <UNDEFINED> instruction: 0x776f6c73
    10f4:	7865745f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
    10f8:	00682e74 	rsbeq	r2, r8, r4, ror lr
    10fc:	00000001 	andeq	r0, r0, r1
    1100:	48020500 	stmdami	r2, {r8, sl}
    1104:	15200031 	strne	r0, [r0, #-49]!	; 0xffffffcf
    1108:	84c99f59 	strbhi	r9, [r9], #3929	; 0xf59
    110c:	3d754c59 	ldclcc	12, cr4, [r5, #-356]!	; 0xfffffe9c
    1110:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    1114:	01000702 	tsteq	r0, r2, lsl #14
    1118:	0000d601 	andeq	sp, r0, r1, lsl #12
    111c:	ab000200 	blge	1924 <startup-0x1fffe6dc>
    1120:	02000000 	andeq	r0, r0, #0
    1124:	0d0efb01 	vstreq	d15, [lr, #-4]
    1128:	01010100 	mrseq	r0, (UNDEF: 17)
    112c:	00000001 	andeq	r0, r0, r1
    1130:	01000001 	tsteq	r0, r1
    1134:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    1138:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    113c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    1140:	6f62616c 	svcvs	0x0062616c
    1144:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1148:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    114c:	5049442f 	subpl	r4, r9, pc, lsr #8
    1150:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    1154:	2f686374 	svccs	0x00686374
    1158:	69000043 	stmdbvs	r0, {r0, r1, r6}
    115c:	6f6f646e 	svcvs	0x006f646e
    1160:	632e7372 			; <UNDEFINED> instruction: 0x632e7372
    1164:	00000100 	andeq	r0, r0, r0, lsl #2
    1168:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
    116c:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
    1170:	00000100 	andeq	r0, r0, r0, lsl #2
    1174:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
    1178:	00682e65 	rsbeq	r2, r8, r5, ror #28
    117c:	67000001 	strvs	r0, [r0, -r1]
    1180:	6f656d61 	svcvs	0x00656d61
    1184:	63656a62 	cmnvs	r5, #401408	; 0x62000
    1188:	00682e74 	rsbeq	r2, r8, r4, ror lr
    118c:	69000001 	stmdbvs	r0, {r0}
    1190:	6f6f646e 	svcvs	0x006f646e
    1194:	625f7372 	subsvs	r7, pc, #-939524095	; 0xc8000001
    1198:	6b63616c 	blvs	18d9750 <startup-0x1e7268b0>
    119c:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
    11a0:	00000100 	andeq	r0, r0, r0, lsl #2
    11a4:	6f646e69 	svcvs	0x00646e69
    11a8:	5f73726f 	svcpl	0x0073726f
    11ac:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
    11b0:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
    11b4:	00000100 	andeq	r0, r0, r0, lsl #2
    11b8:	6f646e69 	svcvs	0x00646e69
    11bc:	5f73726f 	svcpl	0x0073726f
    11c0:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    11c4:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
    11c8:	0001006d 	andeq	r0, r1, sp, rrx
    11cc:	05000000 	streq	r0, [r0, #-0]
    11d0:	0031dc02 	eorseq	sp, r1, r2, lsl #24
    11d4:	01130320 	tsteq	r3, r0, lsr #6
    11d8:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
    11dc:	2f3d672f 	svccs	0x003d672f
    11e0:	5a083e67 	bpl	210b84 <startup-0x1fdef47c>
    11e4:	3e2f4b4c 	vnmulcc.f64	d4, d15, d12
    11e8:	3d3e934c 	ldccc	3, cr9, [lr, #-304]!	; 0xfffffed0
    11ec:	083d3d3d 	ldmdaeq	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
    11f0:	da010100 	ble	415f8 <startup-0x1ffbea08>
    11f4:	02000000 	andeq	r0, r0, #0
    11f8:	0000af00 	andeq	sl, r0, r0, lsl #30
    11fc:	fb010200 	blx	41a06 <startup-0x1ffbe5fa>
    1200:	01000d0e 	tsteq	r0, lr, lsl #26
    1204:	00010101 	andeq	r0, r1, r1, lsl #2
    1208:	00010000 	andeq	r0, r1, r0
    120c:	3a430100 	bcc	10c1614 <startup-0x1ef3e9ec>
    1210:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
    1214:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 1160 <startup-0x1fffeea0>
    1218:	616c706f 	cmnvs	ip, pc, rrx
    121c:	61726f62 	cmnvs	r2, r2, ror #30
    1220:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1224:	442f7265 	strtmi	r7, [pc], #-613	; 122c <startup-0x1fffedd4>
    1228:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
    122c:	63746957 	cmnvs	r4, #1425408	; 0x15c000
    1230:	00432f68 	subeq	r2, r3, r8, ror #30
    1234:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1238:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    123c:	00632e32 	rsbeq	r2, r3, r2, lsr lr
    1240:	73000001 	movwvc	r0, #1
    1244:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
    1248:	00682e65 	rsbeq	r2, r8, r5, ror #28
    124c:	69000001 	stmdbvs	r0, {r0}
    1250:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1254:	0100682e 	tsteq	r0, lr, lsr #16
    1258:	61670000 	cmnvs	r7, r0
    125c:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
    1260:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
    1264:	0100682e 	tsteq	r0, lr, lsr #16
    1268:	6e690000 	cdpvs	0, 6, cr0, cr9, cr0, {0}
    126c:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1270:	625f3273 	subsvs	r3, pc, #805306375	; 0x30000007
    1274:	6b63616c 	blvs	18d982c <startup-0x1e7267d4>
    1278:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
    127c:	00000100 	andeq	r0, r0, r0, lsl #2
    1280:	6f646e69 	svcvs	0x00646e69
    1284:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1288:	6172675f 	cmnvs	r2, pc, asr r7
    128c:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
    1290:	0001006d 	andeq	r0, r1, sp, rrx
    1294:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1298:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    129c:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    12a0:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
    12a4:	006d6278 	rsbeq	r6, sp, r8, ror r2
    12a8:	00000001 	andeq	r0, r0, r1
    12ac:	c4020500 	strgt	r0, [r2], #-1280	; 0xfffffb00
    12b0:	03200032 			; <UNDEFINED> instruction: 0x03200032
    12b4:	2f3e0113 	svccs	0x003e0113
    12b8:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
    12bc:	3e672f3d 	mcrcc	15, 3, r2, cr7, cr13, {1}
    12c0:	4b4c5a08 	blmi	1317ae8 <startup-0x1ece8518>
    12c4:	934c3e2f 	movtls	r3, #52783	; 0xce2f
    12c8:	3d3d3d3e 	ldccc	13, cr3, [sp, #-248]!	; 0xffffff08
    12cc:	0100083d 	tsteq	r0, sp, lsr r8
    12d0:	Address 0x000012d0 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
       4:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
       8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
       c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
      10:	696c0073 	stmdbvs	ip!, {r0, r1, r4, r5, r6}^
      14:	49746867 	ldmdbmi	r4!, {r0, r1, r2, r5, r6, fp, sp, lr}^
      18:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
      1c:	61726700 	cmnvs	r2, r0, lsl #14
      20:	616d4979 	smcvs	54425	; 0xd499
      24:	63006567 	movwvs	r6, #1383	; 0x567
      28:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
      2c:	72675f65 	rsbvc	r5, r7, #404	; 0x194
      30:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
      34:	00737469 	rsbseq	r7, r3, r9, ror #8
      38:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
      3c:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
      40:	5f747865 	svcpl	0x00747865
      44:	0061726b 	rsbeq	r7, r1, fp, ror #4
      48:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
      4c:	65766f5f 	ldrbvs	r6, [r6, #-3935]!	; 0xfffff0a1
      50:	5f6e0072 	svcpl	0x006e0072
      54:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
      58:	63007365 	movwvs	r7, #869	; 0x365
      5c:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
      60:	67694c65 	strbvs	r4, [r9, -r5, ror #24]!
      64:	70007468 	andvc	r7, r0, r8, ror #8
      68:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
      6c:	30317265 	eorscc	r7, r1, r5, ror #4
      70:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
      74:	73614370 	cmnvc	r1, #112, 6	; 0xc0000001
      78:	42656c74 	rsbmi	r6, r5, #116, 24	; 0x7400
      7c:	6b63616c 	blvs	18d8634 <startup-0x1e7279cc>
      80:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
      84:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
      88:	332e3620 			; <UNDEFINED> instruction: 0x332e3620
      8c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
      90:	30373130 	eorscc	r3, r7, r0, lsr r1
      94:	20353132 	eorscs	r3, r5, r2, lsr r1
      98:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
      9c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
      a0:	415b2029 	cmpmi	fp, r9, lsr #32
      a4:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff35a <firstTime.4040+0xdfff5fb2>
      a8:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
      ac:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
      b0:	72622d36 	rsbvc	r2, r2, #3456	; 0xd80
      b4:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
      b8:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
      bc:	6f697369 	svcvs	0x00697369
      c0:	3432206e 	ldrtcc	r2, [r2], #-110	; 0xffffff92
      c4:	32313535 	eorscc	r3, r1, #222298112	; 0xd400000
      c8:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
      cc:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
      d0:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
      d4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
      d8:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
      dc:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
      e0:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
      e4:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
      e8:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
      ec:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
      f0:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
      f4:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
      f8:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
      fc:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     100:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
     104:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
     108:	20672d20 	rsbcs	r2, r7, r0, lsr #26
     10c:	20304f2d 	eorscs	r4, r0, sp, lsr #30
     110:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
     114:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
     118:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     11c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     120:	5f736900 	svcpl	0x00736900
     124:	6d696c63 	stclvs	12, cr6, [r9, #-396]!	; 0xfffffe74
     128:	676e6962 	strbvs	r6, [lr, -r2, ror #18]!
     12c:	73616300 	cmnvc	r1, #0, 6
     130:	4f656c74 	svcmi	0x00656c74
     134:	6d006a62 	vstrvs	s12, [r0, #-392]	; 0xfffffe78
     138:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     13c:	6f507265 	svcvs	0x00507265
     140:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     144:	72700072 	rsbsvc	r0, r0, #114	; 0x72
     148:	5f737365 	svcpl	0x00737365
     14c:	63616c62 	cmnvs	r1, #25088	; 0x6200
     150:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     154:	66007374 			; <UNDEFINED> instruction: 0x66007374
     158:	31657269 	cmncc	r5, r9, ror #4
     15c:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
     160:	73726f6f 	cmnvc	r2, #444	; 0x1bc
     164:	73616300 	cmnvc	r1, #0, 6
     168:	49656c74 	stmdbmi	r5!, {r2, r4, r5, r6, sl, fp, sp, lr}^
     16c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     170:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
     174:	49656c74 	stmdbmi	r5!, {r2, r4, r5, r6, sl, fp, sp, lr}^
     178:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     17c:	61747300 	cmnvs	r4, r0, lsl #6
     180:	70757472 	rsbsvc	r7, r5, r2, ror r4
     184:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     188:	6d003174 	stfvss	f3, [r0, #-464]	; 0xfffffe30
     18c:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     190:	694c7265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp, lr}^
     194:	00746867 	rsbseq	r6, r4, r7, ror #16
     198:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     19c:	696c5f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     1a0:	5f746867 	svcpl	0x00746867
     1a4:	73746962 	cmnvc	r4, #1605632	; 0x188000
     1a8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     1ac:	6e6f4d70 	mcrvs	13, 3, r4, cr15, cr0, {3}
     1b0:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     1b4:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     1b8:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     1bc:	70003274 	andvc	r3, r0, r4, ror r2
     1c0:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     1c4:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     1c8:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     1cc:	74003474 	strvc	r3, [r0], #-1140	; 0xfffffb8c
     1d0:	33747865 	cmncc	r4, #6619136	; 0x650000
     1d4:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     1d8:	66003574 			; <UNDEFINED> instruction: 0x66003574
     1dc:	31657269 	cmncc	r5, r9, ror #4
     1e0:	73616800 	cmnvc	r1, #0, 16
     1e4:	696c635f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
     1e8:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
     1ec:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     1f0:	00674270 	rsbeq	r4, r7, r0, ror r2
     1f4:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     1f8:	69740038 	ldmdbvs	r4!, {r3, r4, r5}^
     1fc:	5f656c74 	svcpl	0x00656c74
     200:	63616c62 	cmnvs	r1, #25088	; 0x6200
     204:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     208:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     20c:	4d706d65 	ldclmi	13, cr6, [r0, #-404]!	; 0xfffffe6c
     210:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     214:	694c7265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp, lr}^
     218:	00746867 	rsbseq	r6, r4, r7, ror #16
     21c:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     220:	72640037 	rsbvc	r0, r4, #55	; 0x37
     224:	625f7761 	subsvs	r7, pc, #25427968	; 0x1840000
     228:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     22c:	6c625f72 	stclvs	15, cr5, [r2], #-456	; 0xfffffe38
     230:	006b6361 	rsbeq	r6, fp, r1, ror #6
     234:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     238:	65740036 	ldrbvs	r0, [r4, #-54]!	; 0xffffffca
     23c:	00397478 	eorseq	r7, r9, r8, ror r4
     240:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
     244:	50726574 	rsbspl	r6, r2, r4, ror r5
     248:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     24c:	00327265 	eorseq	r7, r2, r5, ror #4
     250:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
     254:	50726574 	rsbspl	r6, r2, r4, ror r5
     258:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     25c:	00337265 	eorseq	r7, r3, r5, ror #4
     260:	32776f72 	rsbscc	r6, r7, #456	; 0x1c8
     264:	73696400 	cmnvc	r9, #0, 8
     268:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
     26c:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     270:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     274:	616c625f 	cmnvs	ip, pc, asr r2
     278:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
     27c:	00737469 	rsbseq	r7, r3, r9, ror #8
     280:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     284:	7070615f 	rsbsvc	r6, r0, pc, asr r1
     288:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     28c:	65745f67 	ldrbvs	r5, [r4, #-3943]!	; 0xfffff099
     290:	70007478 	andvc	r7, r0, r8, ror r4
     294:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     298:	006a624f 	rsbeq	r6, sl, pc, asr #4
     29c:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
     2a0:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     2a4:	5f726566 	svcpl	0x00726566
     2a8:	63616c62 	cmnvs	r1, #25088	; 0x6200
     2ac:	72675f6b 	rsbvc	r5, r7, #428	; 0x1ac
     2b0:	6c5f7961 	mrrcvs	9, 6, r7, pc, cr1	; <UNPREDICTABLE>
     2b4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     2b8:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     2bc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     2c0:	6f700034 	svcvs	0x00700034
     2c4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     2c8:	70003572 	andvc	r3, r0, r2, ror r5
     2cc:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     2d0:	00367265 	eorseq	r7, r6, r5, ror #4
     2d4:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     2d8:	37726574 			; <UNDEFINED> instruction: 0x37726574
     2dc:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     2e0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     2e4:	6f700038 	svcvs	0x00700038
     2e8:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     2ec:	74003972 	strvc	r3, [r0], #-2418	; 0xfffff68e
     2f0:	43706d65 	cmnmi	r0, #6464	; 0x1940
     2f4:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
     2f8:	67694c65 	strbvs	r4, [r9, -r5, ror #24]!
     2fc:	72007468 	andvc	r7, r0, #104, 8	; 0x68000000
     300:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
     304:	69770072 	ldmdbvs	r7!, {r1, r4, r5, r6}^
     308:	00687464 	rsbeq	r7, r8, r4, ror #8
     30c:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
     310:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     314:	5f726566 	svcpl	0x00726566
     318:	63616c62 	cmnvs	r1, #25088	; 0x6200
     31c:	696c5f6b 	stmdbvs	ip!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     320:	00746867 	rsbseq	r6, r4, r7, ror #16
     324:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     328:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
     32c:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     330:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
     334:	6400746e 	strvs	r7, [r0], #-1134	; 0xfffffb92
     338:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     33c:	746e755f 	strbtvc	r7, [lr], #-1375	; 0xfffffaa1
     340:	745f6c69 	ldrbvc	r6, [pc], #-3177	; 348 <startup-0x1ffffcb8>
     344:	00747865 	rsbseq	r7, r4, r5, ror #16
     348:	706d6574 	rsbvc	r6, sp, r4, ror r5
     34c:	736e6f4d 	cmnvc	lr, #308	; 0x134
     350:	00726574 	rsbseq	r6, r2, r4, ror r5
     354:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     358:	616c4265 	cmnvs	ip, r5, ror #4
     35c:	70006b63 	andvc	r6, r0, r3, ror #22
     360:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     364:	6172675f 	cmnvs	r2, pc, asr r7
     368:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     36c:	61007374 	tstvs	r0, r4, ror r3
     370:	616d696e 	cmnvs	sp, lr, ror #18
     374:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     378:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
     37c:	61006465 	tstvs	r0, r5, ror #8
     380:	616d696e 	cmnvs	sp, lr, ror #18
     384:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     388:	756f635f 	strbvc	r6, [pc, #-863]!	; 31 <startup-0x1fffffcf>
     38c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     390:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     394:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     398:	006a624f 	rsbeq	r6, sl, pc, asr #4
     39c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
     3a0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     3a4:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     3a8:	675f656c 	ldrbvs	r6, [pc, -ip, ror #10]
     3ac:	5f796172 	svcpl	0x00796172
     3b0:	73746962 	cmnvc	r4, #1605632	; 0x188000
     3b4:	61476e00 	cmpvs	r7, r0, lsl #28
     3b8:	624f656d 	subvs	r6, pc, #457179136	; 0x1b400000
     3bc:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     3c0:	72700073 	rsbsvc	r0, r0, #115	; 0x73
     3c4:	5f737365 	svcpl	0x00737365
     3c8:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     3cc:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     3d0:	70007374 	andvc	r7, r0, r4, ror r3
     3d4:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     3d8:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     3dc:	6d690065 	stclvs	0, cr0, [r9, #-404]!	; 0xfffffe6c
     3e0:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     3e4:	6f687300 	svcvs	0x00687300
     3e8:	745f7472 	ldrbvc	r7, [pc], #-1138	; 3f0 <startup-0x1ffffc10>
     3ec:	00747865 	rsbseq	r7, r4, r5, ror #16
     3f0:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
     3f4:	5f746e65 	svcpl	0x00746e65
     3f8:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
     3fc:	69740065 	ldmdbvs	r4!, {r0, r2, r5, r6}^
     400:	4c656c74 	stclmi	12, cr6, [r5], #-464	; 0xfffffe30
     404:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     408:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     40c:	65725070 	ldrbvs	r5, [r2, #-112]!	; 0xffffff90
     410:	72477373 	subvc	r7, r7, #-872415231	; 0xcc000001
     414:	69007961 	stmdbvs	r0, {r0, r5, r6, r8, fp, ip, sp, lr}
     418:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     41c:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
     420:	74007365 	strvc	r7, [r0], #-869	; 0xfffffc9b
     424:	43706d65 	cmnmi	r0, #6464	; 0x1940
     428:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
     42c:	61724765 	cmnvs	r2, r5, ror #14
     430:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     434:	6954706d 	ldmdbvs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
     438:	42656c74 	rsbmi	r6, r5, #116, 24	; 0x7400
     43c:	6b63616c 	blvs	18d89f4 <startup-0x1e72760c>
     440:	736e7500 	cmnvc	lr, #0, 10
     444:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     448:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
     44c:	64007261 	strvs	r7, [r0], #-609	; 0xfffffd9f
     450:	5f776172 	svcpl	0x00776172
     454:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     458:	625f7265 	subsvs	r7, pc, #1342177286	; 0x50000006
     45c:	6b63616c 	blvs	18d8a14 <startup-0x1e7275ec>
     460:	6172675f 	cmnvs	r2, pc, asr r7
     464:	6f6d0079 	svcvs	0x006d0079
     468:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     46c:	696c5f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     470:	5f746867 	svcpl	0x00746867
     474:	73746962 	cmnvc	r4, #1605632	; 0x188000
     478:	73616300 	cmnvc	r1, #0, 6
     47c:	5f656c74 	svcpl	0x00656c74
     480:	63616c62 	cmnvs	r1, #25088	; 0x6200
     484:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     488:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     48c:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     490:	006a624f 	rsbeq	r6, sl, pc, asr #4
     494:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     498:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     49c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     4a0:	6f62616c 	svcvs	0x0062616c
     4a4:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     4a8:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     4ac:	5049442f 	subpl	r4, r9, pc, lsr #8
     4b0:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     4b4:	2f686374 	svccs	0x00686374
     4b8:	74732f43 	ldrbtvc	r2, [r3], #-3907	; 0xfffff0bd
     4bc:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
     4c0:	00632e70 	rsbeq	r2, r3, r0, ror lr
     4c4:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     4c8:	656a624f 	strbvs	r6, [sl, #-591]!	; 0xfffffdb1
     4cc:	00737463 	rsbseq	r7, r3, r3, ror #8
     4d0:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
     4d4:	7247656c 	subvc	r6, r7, #108, 10	; 0x1b000000
     4d8:	6d007961 	vstrvs.16	s14, [r0, #-194]	; 0xffffff3e	; <UNPREDICTABLE>
     4dc:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     4e0:	72477265 	subvc	r7, r7, #1342177286	; 0x50000006
     4e4:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     4e8:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     4ec:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     4f0:	72756300 	rsbsvc	r6, r5, #0, 6
     4f4:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
     4f8:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
     4fc:	006e6565 	rsbeq	r6, lr, r5, ror #10
     500:	74736964 	ldrbtvc	r6, [r3], #-2404	; 0xfffff69c
     504:	65636e61 	strbvs	r6, [r3, #-3681]!	; 0xfffff19f
     508:	616c705f 	qdsubvs	r7, pc, ip	; <UNPREDICTABLE>
     50c:	5f726579 	svcpl	0x00726579
     510:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     514:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     518:	65725070 	ldrbvs	r5, [r2, #-112]!	; 0xffffff90
     51c:	6c427373 	mcrrvs	3, 7, r7, r2, cr3
     520:	006b6361 	rsbeq	r6, fp, r1, ror #6
     524:	625f6762 	subsvs	r6, pc, #25690112	; 0x1880000
     528:	00737469 	rsbseq	r7, r3, r9, ror #8
     52c:	63616c62 	cmnvs	r1, #25088	; 0x6200
     530:	616d496b 	cmnvs	sp, fp, ror #18
     534:	6d006567 	cfstr32vs	mvfx6, [r0, #-412]	; 0xfffffe64
     538:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     53c:	675f7265 	ldrbvs	r7, [pc, -r5, ror #4]
     540:	5f796172 	svcpl	0x00796172
     544:	73746962 	cmnvc	r4, #1605632	; 0x188000
     548:	73616300 	cmnvc	r1, #0, 6
     54c:	49656c74 	stmdbmi	r5!, {r2, r4, r5, r6, sl, fp, sp, lr}^
     550:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     554:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     558:	6d49656c 	cfstr64vs	mvdx6, [r9, #-432]	; 0xfffffe50
     55c:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     560:	6e617200 	cdpvs	2, 6, cr7, cr1, cr0, {0}
     564:	5f6d6f64 	svcpl	0x006d6f64
     568:	64656573 	strbtvs	r6, [r5], #-1395	; 0xfffffa8d
     56c:	72696600 	rsbvc	r6, r9, #0, 12
     570:	66003265 	strvs	r3, [r0], -r5, ror #4
     574:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     578:	72696600 	rsbvc	r6, r9, #0, 12
     57c:	70003465 	andvc	r3, r0, r5, ror #8
     580:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     584:	63616c42 	cmnvs	r1, #16896	; 0x4200
     588:	6f6d006b 	svcvs	0x006d006b
     58c:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     590:	616d4972 	smcvs	54418	; 0xd492
     594:	79006567 	stmdbvc	r0, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     598:	00736f50 	rsbseq	r6, r3, r0, asr pc
     59c:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
     5a0:	696c635f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
     5a4:	765f626d 	ldrbvc	r6, [pc], -sp, ror #4
     5a8:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     5ac:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     5b0:	00323174 	eorseq	r3, r2, r4, ror r1
     5b4:	706d6574 	rsbvc	r6, sp, r4, ror r5
     5b8:	6c746954 			; <UNDEFINED> instruction: 0x6c746954
     5bc:	67694c65 	strbvs	r4, [r9, -r5, ror #24]!
     5c0:	75007468 	strvc	r7, [r0, #-1128]	; 0xfffffb98
     5c4:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
     5c8:	72700065 	rsbsvc	r0, r0, #101	; 0x65
     5cc:	49737365 	ldmdbmi	r3!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
     5d0:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     5d4:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     5d8:	6954706d 	ldmdbvs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
     5dc:	47656c74 			; <UNDEFINED> instruction: 0x47656c74
     5e0:	00796172 	rsbseq	r6, r9, r2, ror r1
     5e4:	6f6c5374 	svcvs	0x006c5374
     5e8:	78655477 	stmdavc	r5!, {r0, r1, r2, r4, r5, r6, sl, ip, lr}^
     5ec:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
     5f0:	5f38746e 	svcpl	0x0038746e
     5f4:	61620074 	smcvs	8196	; 0x2004
     5f8:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
     5fc:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     600:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     604:	61620074 	smcvs	8196	; 0x2004
     608:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
     60c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     610:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     614:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     618:	65725070 	ldrbvs	r5, [r2, #-112]!	; 0xffffff90
     61c:	694c7373 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}^
     620:	00746867 	rsbseq	r6, r4, r7, ror #16
     624:	6d614774 	stclvs	7, cr4, [r1, #-464]!	; 0xfffffe30
     628:	6a624f65 	bvs	18943c4 <startup-0x1e76bc3c>
     62c:	00746365 	rsbseq	r6, r4, r5, ror #6
     630:	736f5078 	cmnvc	pc, #120	; 0x78
     634:	73616300 	cmnvc	r1, #0, 6
     638:	42656c74 	rsbmi	r6, r5, #116, 24	; 0x7400
     63c:	6b63616c 	blvs	18d8bf4 <startup-0x1e72740c>
     640:	6d616700 	stclvs	7, cr6, [r1, #-0]
     644:	766f5f65 	strbtvc	r5, [pc], -r5, ror #30
     648:	615f7265 	cmpvs	pc, r5, ror #4
     64c:	72656464 	rsbvc	r6, r5, #100, 8	; 0x64000000
     650:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     654:	00303174 	eorseq	r3, r0, r4, ror r1
     658:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     65c:	68003131 	stmdavs	r0, {r0, r4, r5, r8, ip, sp}
     660:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
     664:	616d0074 	smcvs	53252	; 0xd004
     668:	70006e69 	andvc	r6, r0, r9, ror #28
     66c:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     670:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     674:	6f6d0074 	svcvs	0x006d0074
     678:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     67c:	616d4972 	smcvs	54418	; 0xd492
     680:	00736567 	rsbseq	r6, r3, r7, ror #10
     684:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     688:	656a624f 	strbvs	r6, [sl, #-591]!	; 0xfffffdb1
     68c:	70557463 	subsvc	r7, r5, r3, ror #8
     690:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
     694:	2f3a4300 	svccs	0x003a4300
     698:	2f706f6d 	svccs	0x00706f6d
     69c:	6f4d2f63 	svcvs	0x004d2f63
     6a0:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     6a4:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     6a8:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     6ac:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     6b0:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     6b4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     6b8:	672f432f 	strvs	r4, [pc, -pc, lsr #6]!
     6bc:	6f656d61 	svcvs	0x00656d61
     6c0:	63656a62 	cmnvs	r5, #401408	; 0x62000
     6c4:	00632e74 	rsbeq	r2, r3, r4, ror lr
     6c8:	73696874 	cmnvc	r9, #116, 16	; 0x740000
     6cc:	72696600 	rsbvc	r6, r9, #0, 12
     6d0:	72473565 	subvc	r3, r7, #423624704	; 0x19400000
     6d4:	66007961 	strvs	r7, [r0], -r1, ror #18
     6d8:	31657269 	cmncc	r5, r9, ror #4
     6dc:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     6e0:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     6e4:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     6e8:	72473265 	subvc	r3, r7, #1342177286	; 0x50000006
     6ec:	66007961 	strvs	r7, [r0], -r1, ror #18
     6f0:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     6f4:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     6f8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     6fc:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     700:	72473465 	subvc	r3, r7, #1694498816	; 0x65000000
     704:	66007961 	strvs	r7, [r0], -r1, ror #18
     708:	42657269 	rsbmi	r7, r5, #-1879048186	; 0x90000006
     70c:	6b63616c 	blvs	18d8cc4 <startup-0x1e72733c>
     710:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     714:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     718:	72473365 	subvc	r3, r7, #-1811939327	; 0x94000001
     71c:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     720:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
     724:	42657269 	rsbmi	r7, r5, #-1879048186	; 0x90000006
     728:	6b63616c 	blvs	18d8ce0 <startup-0x1e727320>
     72c:	72696600 	rsbvc	r6, r9, #0, 12
     730:	694c3165 	stmdbvs	ip, {r0, r2, r5, r6, r8, ip, sp}^
     734:	00746867 	rsbseq	r6, r4, r7, ror #16
     738:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     73c:	67694c34 			; <UNDEFINED> instruction: 0x67694c34
     740:	66007468 	strvs	r7, [r0], -r8, ror #8
     744:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
     748:	6172675f 	cmnvs	r2, pc, asr r7
     74c:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     750:	66007374 			; <UNDEFINED> instruction: 0x66007374
     754:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
     758:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     75c:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     760:	00737469 	rsbseq	r7, r3, r9, ror #8
     764:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     768:	67694c33 			; <UNDEFINED> instruction: 0x67694c33
     76c:	70007468 	andvc	r7, r0, r8, ror #8
     770:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     774:	00317265 	eorseq	r7, r1, r5, ror #4
     778:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     77c:	33726574 	cmncc	r2, #116, 10	; 0x1d000000
     780:	72696600 	rsbvc	r6, r9, #0, 12
     784:	675f3565 	ldrbvs	r3, [pc, -r5, ror #10]
     788:	5f796172 	svcpl	0x00796172
     78c:	73746962 	cmnvc	r4, #1605632	; 0x188000
     790:	72696600 	rsbvc	r6, r9, #0, 12
     794:	6d493365 	stclvs	3, cr3, [r9, #-404]	; 0xfffffe6c
     798:	00656761 	rsbeq	r6, r5, r1, ror #14
     79c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     7a0:	30726574 	rsbscc	r6, r2, r4, ror r5
     7a4:	72696600 	rsbvc	r6, r9, #0, 12
     7a8:	694c3565 	stmdbvs	ip, {r0, r2, r5, r6, r8, sl, ip, sp}^
     7ac:	00746867 	rsbseq	r6, r4, r7, ror #16
     7b0:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     7b4:	32726574 	rsbscc	r6, r2, #116, 10	; 0x1d000000
     7b8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     7bc:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     7c0:	72473565 	subvc	r3, r7, #423624704	; 0x19400000
     7c4:	66007961 	strvs	r7, [r0], -r1, ror #18
     7c8:	31657269 	cmncc	r5, r9, ror #4
     7cc:	6172675f 	cmnvs	r2, pc, asr r7
     7d0:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     7d4:	66007374 			; <UNDEFINED> instruction: 0x66007374
     7d8:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
     7dc:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     7e0:	69660074 	stmdbvs	r6!, {r2, r4, r5, r6}^
     7e4:	5f316572 	svcpl	0x00316572
     7e8:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     7ec:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     7f0:	66007374 			; <UNDEFINED> instruction: 0x66007374
     7f4:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
     7f8:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     7fc:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     800:	00737469 	rsbseq	r7, r3, r9, ror #8
     804:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     808:	006a624f 	rsbeq	r6, sl, pc, asr #4
     80c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     810:	61724732 	cmnvs	r2, r2, lsr r7
     814:	69660079 	stmdbvs	r6!, {r0, r3, r4, r5, r6}^
     818:	5f346572 	svcpl	0x00346572
     81c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     820:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     824:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     828:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     82c:	4c336572 	cfldr32mi	mvfx6, [r3], #-456	; 0xfffffe38
     830:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     834:	72696600 	rsbvc	r6, r9, #0, 12
     838:	6d493465 	cfstrdvs	mvd3, [r9, #-404]	; 0xfffffe6c
     83c:	00656761 	rsbeq	r6, r5, r1, ror #14
     840:	706d6574 	rsbvc	r6, sp, r4, ror r5
     844:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     848:	67694c31 			; <UNDEFINED> instruction: 0x67694c31
     84c:	66007468 	strvs	r7, [r0], -r8, ror #8
     850:	74737269 	ldrbtvc	r7, [r3], #-617	; 0xfffffd97
     854:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     858:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     85c:	69665f74 	stmdbvs	r6!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     860:	66006572 			; <UNDEFINED> instruction: 0x66006572
     864:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
     868:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     86c:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     870:	00737469 	rsbseq	r7, r3, r9, ror #8
     874:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     878:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     87c:	66007365 	strvs	r7, [r0], -r5, ror #6
     880:	31657269 	cmncc	r5, r9, ror #4
     884:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     888:	69660065 	stmdbvs	r6!, {r0, r2, r5, r6}^
     88c:	47346572 			; <UNDEFINED> instruction: 0x47346572
     890:	00796172 	rsbseq	r6, r9, r2, ror r1
     894:	706d6574 	rsbvc	r6, sp, r4, ror r5
     898:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     89c:	61724731 	cmnvs	r2, r1, lsr r7
     8a0:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     8a4:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     8a8:	4c346572 	cfldr32mi	mvfx6, [r4], #-456	; 0xfffffe38
     8ac:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     8b0:	72696600 	rsbvc	r6, r9, #0, 12
     8b4:	6c5f3365 	mrrcvs	3, 6, r3, pc, cr5	; <UNPREDICTABLE>
     8b8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     8bc:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     8c0:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     8c4:	49356572 	ldmdbmi	r5!, {r1, r4, r5, r6, r8, sl, sp, lr}
     8c8:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     8cc:	72696600 	rsbvc	r6, r9, #0, 12
     8d0:	6c625f65 	stclvs	15, cr5, [r2], #-404	; 0xfffffe6c
     8d4:	5f6b6361 	svcpl	0x006b6361
     8d8:	69625f32 	stmdbvs	r2!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     8dc:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     8e0:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
     8e4:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
     8e8:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     8ec:	69660074 	stmdbvs	r6!, {r2, r4, r5, r6}^
     8f0:	49326572 	ldmdbmi	r2!, {r1, r4, r5, r6, r8, sl, sp, lr}
     8f4:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     8f8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     8fc:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     900:	694c3565 	stmdbvs	ip, {r0, r2, r5, r6, r8, sl, ip, sp}^
     904:	00746867 	rsbseq	r6, r4, r7, ror #16
     908:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     90c:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     910:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     914:	6f62616c 	svcvs	0x0062616c
     918:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     91c:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     920:	5049442f 	subpl	r4, r9, pc, lsr #8
     924:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     928:	2f686374 	svccs	0x00686374
     92c:	69662f43 	stmdbvs	r6!, {r0, r1, r6, r8, r9, sl, fp, sp}^
     930:	632e6572 			; <UNDEFINED> instruction: 0x632e6572
     934:	72696600 	rsbvc	r6, r9, #0, 12
     938:	675f3365 	ldrbvs	r3, [pc, -r5, ror #6]
     93c:	5f796172 	svcpl	0x00796172
     940:	73746962 	cmnvc	r4, #1605632	; 0x188000
     944:	73616c00 	cmnvc	r1, #0, 24
     948:	67695274 			; <UNDEFINED> instruction: 0x67695274
     94c:	61567468 	cmpvs	r6, r8, ror #8
     950:	0065756c 	rsbeq	r7, r5, ip, ror #10
     954:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
     958:	706d754a 	rsbvc	r7, sp, sl, asr #10
     95c:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
     960:	53790065 	cmnpl	r9, #101	; 0x65
     964:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     968:	70537800 	subsvc	r7, r3, r0, lsl #16
     96c:	00646565 	rsbeq	r6, r4, r5, ror #10
     970:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
     974:	7466654c 	strbtvc	r6, [r6], #-1356	; 0xfffffab4
     978:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
     97c:	3a430065 	bcc	10c0b18 <startup-0x1ef3f4e8>
     980:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     984:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 8d0 <startup-0x1ffff730>
     988:	616c706f 	cmnvs	ip, pc, rrx
     98c:	61726f62 	cmnvs	r2, r2, ror #30
     990:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     994:	442f7265 	strtmi	r7, [pc], #-613	; 99c <startup-0x1ffff664>
     998:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     99c:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     9a0:	2f432f68 	svccs	0x00432f68
     9a4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
     9a8:	632e7265 			; <UNDEFINED> instruction: 0x632e7265
     9ac:	616c7000 	cmnvs	ip, r0
     9b0:	55726579 	ldrbpl	r6, [r2, #-1401]!	; 0xfffffa87
     9b4:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
     9b8:	65740065 	ldrbvs	r0, [r4, #-101]!	; 0xffffff9b
     9bc:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     9c0:	4c326472 	cfldrsmi	mvf6, [r2], #-456	; 0xfffffe38
     9c4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     9c8:	72696200 	rsbvc	r6, r9, #0, 4
     9cc:	6c5f3364 	mrrcvs	3, 6, r3, pc, cr4	; <UNPREDICTABLE>
     9d0:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     9d4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     9d8:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
     9dc:	49346472 	ldmdbmi	r4!, {r1, r4, r5, r6, sl, sp, lr}
     9e0:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     9e4:	72696200 	rsbvc	r6, r9, #0, 4
     9e8:	6c5f3464 	cfldrdvs	mvd3, [pc], {100}	; 0x64
     9ec:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     9f0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     9f4:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     9f8:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     9fc:	4c356472 	cfldrsmi	mvf6, [r5], #-456	; 0xfffffe38
     a00:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     a04:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     a08:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     a0c:	62003431 	andvs	r3, r0, #822083584	; 0x31000000
     a10:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     a14:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     a18:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     a1c:	00737469 	rsbseq	r7, r3, r9, ror #8
     a20:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     a24:	67694c33 			; <UNDEFINED> instruction: 0x67694c33
     a28:	70007468 	andvc	r7, r0, r8, ror #8
     a2c:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     a30:	39317265 	ldmdbcc	r1!, {r0, r2, r5, r6, r9, ip, sp, lr}
     a34:	72696200 	rsbvc	r6, r9, #0, 4
     a38:	694c3164 	stmdbvs	ip, {r2, r5, r6, r8, ip, sp}^
     a3c:	00746867 	rsbseq	r6, r4, r7, ror #16
     a40:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     a44:	616c4233 	cmnvs	ip, r3, lsr r2
     a48:	62006b63 	andvs	r6, r0, #101376	; 0x18c00
     a4c:	31647269 	cmncc	r4, r9, ror #4
     a50:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     a54:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     a58:	72694270 	rsbvc	r4, r9, #112, 4
     a5c:	6c423464 	cfstrdvs	mvd3, [r2], {100}	; 0x64
     a60:	006b6361 	rsbeq	r6, fp, r1, ror #6
     a64:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     a68:	616c4235 	cmnvs	ip, r5, lsr r2
     a6c:	70006b63 	andvc	r6, r0, r3, ror #22
     a70:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     a74:	30327265 	eorscc	r7, r2, r5, ror #4
     a78:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     a7c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     a80:	62003132 	andvs	r3, r0, #-2147483636	; 0x8000000c
     a84:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     a88:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     a8c:	72696200 	rsbvc	r6, r9, #0, 4
     a90:	6c423264 	sfmvs	f3, 2, [r2], {100}	; 0x64
     a94:	006b6361 	rsbeq	r6, fp, r1, ror #6
     a98:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     a9c:	32726574 	rsbscc	r6, r2, #116, 10	; 0x1d000000
     aa0:	6f700034 	svcvs	0x00700034
     aa4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     aa8:	00363172 	eorseq	r3, r6, r2, ror r1
     aac:	706d6574 	rsbvc	r6, sp, r4, ror r5
     ab0:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     ab4:	61724732 	cmnvs	r2, r2, lsr r7
     ab8:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     abc:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     ac0:	47346472 			; <UNDEFINED> instruction: 0x47346472
     ac4:	00796172 	rsbseq	r6, r9, r2, ror r1
     ac8:	706d6574 	rsbvc	r6, sp, r4, ror r5
     acc:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     ad0:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     ad4:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
     ad8:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     adc:	47356472 			; <UNDEFINED> instruction: 0x47356472
     ae0:	00796172 	rsbseq	r6, r9, r2, ror r1
     ae4:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     ae8:	31726574 	cmncc	r2, r4, ror r5
     aec:	69620033 	stmdbvs	r2!, {r0, r1, r4, r5}^
     af0:	5f326472 	svcpl	0x00326472
     af4:	63616c62 	cmnvs	r1, #25088	; 0x6200
     af8:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     afc:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     b00:	31647269 	cmncc	r4, r9, ror #4
     b04:	6172675f 	cmnvs	r2, pc, asr r7
     b08:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     b0c:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     b10:	36647269 	strbtcc	r7, [r4], -r9, ror #4
     b14:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     b18:	69620065 	stmdbvs	r2!, {r0, r2, r5, r6}^
     b1c:	5f336472 	svcpl	0x00336472
     b20:	63616c62 	cmnvs	r1, #25088	; 0x6200
     b24:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     b28:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     b2c:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     b30:	616c625f 	cmnvs	ip, pc, asr r2
     b34:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
     b38:	00737469 	rsbseq	r7, r3, r9, ror #8
     b3c:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     b40:	616d4933 	cmnvs	sp, r3, lsr r9
     b44:	62006567 	andvs	r6, r0, #432013312	; 0x19c00000
     b48:	31647269 	cmncc	r4, r9, ror #4
     b4c:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     b50:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     b54:	00737469 	rsbseq	r7, r3, r9, ror #8
     b58:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     b5c:	6c625f35 	stclvs	15, cr5, [r2], #-212	; 0xffffff2c
     b60:	5f6b6361 	svcpl	0x006b6361
     b64:	73746962 	cmnvc	r4, #1605632	; 0x188000
     b68:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     b6c:	72694270 	rsbvc	r4, r9, #112, 4
     b70:	694c3364 	stmdbvs	ip, {r2, r5, r6, r8, r9, ip, sp}^
     b74:	00746867 	rsbseq	r6, r4, r7, ror #16
     b78:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     b7c:	72675f35 	rsbvc	r5, r7, #53, 30	; 0xd4
     b80:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     b84:	00737469 	rsbseq	r7, r3, r9, ror #8
     b88:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     b8c:	61724732 	cmnvs	r2, r2, lsr r7
     b90:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     b94:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     b98:	4c346472 	cfldrsmi	mvf6, [r4], #-456	; 0xfffffe38
     b9c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     ba0:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     ba4:	72694270 	rsbvc	r4, r9, #112, 4
     ba8:	72473364 	subvc	r3, r7, #100, 6	; 0x90000001
     bac:	62007961 	andvs	r7, r0, #1589248	; 0x184000
     bb0:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     bb4:	6172675f 	cmnvs	r2, pc, asr r7
     bb8:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     bbc:	70007374 	andvc	r7, r0, r4, ror r3
     bc0:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     bc4:	33327265 	teqcc	r2, #1342177286	; 0x50000006
     bc8:	72696200 	rsbvc	r6, r9, #0, 4
     bcc:	694c3564 	stmdbvs	ip, {r2, r5, r6, r8, sl, ip, sp}^
     bd0:	00746867 	rsbseq	r6, r4, r7, ror #16
     bd4:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     bd8:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     bdc:	74007365 	strvc	r7, [r0], #-869	; 0xfffffc9b
     be0:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     be4:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     be8:	63616c42 	cmnvs	r1, #16896	; 0x4200
     bec:	6962006b 	stmdbvs	r2!, {r0, r1, r3, r5, r6}^
     bf0:	42346472 	eorsmi	r6, r4, #1912602624	; 0x72000000
     bf4:	6b63616c 	blvs	18d91ac <startup-0x1e726e54>
     bf8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     bfc:	72694270 	rsbvc	r4, r9, #112, 4
     c00:	6c423264 	sfmvs	f3, 2, [r2], {100}	; 0x64
     c04:	006b6361 	rsbeq	r6, fp, r1, ror #6
     c08:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     c0c:	72675f33 	rsbvc	r5, r7, #51, 30	; 0xcc
     c10:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     c14:	00737469 	rsbseq	r7, r3, r9, ror #8
     c18:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     c1c:	616c4231 	cmnvs	ip, r1, lsr r2
     c20:	62006b63 	andvs	r6, r0, #101376	; 0x18c00
     c24:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     c28:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     c2c:	3a430074 	bcc	10c0e04 <startup-0x1ef3f1fc>
     c30:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     c34:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; b80 <startup-0x1ffff480>
     c38:	616c706f 	cmnvs	ip, pc, rrx
     c3c:	61726f62 	cmnvs	r2, r2, ror #30
     c40:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     c44:	442f7265 	strtmi	r7, [pc], #-613	; c4c <startup-0x1ffff3b4>
     c48:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     c4c:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     c50:	2f432f68 	svccs	0x00432f68
     c54:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     c58:	6900632e 	stmdbvs	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
     c5c:	5f74696e 	svcpl	0x0074696e
     c60:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     c64:	72696200 	rsbvc	r6, r9, #0, 4
     c68:	6a624f64 	bvs	1894a00 <startup-0x1e76b600>
     c6c:	72696200 	rsbvc	r6, r9, #0, 4
     c70:	675f3264 	ldrbvs	r3, [pc, -r4, ror #4]
     c74:	5f796172 	svcpl	0x00796172
     c78:	73746962 	cmnvc	r4, #1605632	; 0x188000
     c7c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     c80:	72694270 	rsbvc	r4, r9, #112, 4
     c84:	61724764 	cmnvs	r2, r4, ror #14
     c88:	69620079 	stmdbvs	r2!, {r0, r3, r4, r5, r6}^
     c8c:	47356472 			; <UNDEFINED> instruction: 0x47356472
     c90:	00796172 	rsbseq	r6, r9, r2, ror r1
     c94:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     c98:	6c625f31 	stclvs	15, cr5, [r2], #-196	; 0xffffff3c
     c9c:	5f6b6361 	svcpl	0x006b6361
     ca0:	73746962 	cmnvc	r4, #1605632	; 0x188000
     ca4:	72696200 	rsbvc	r6, r9, #0, 4
     ca8:	6d493164 	stfvse	f3, [r9, #-400]	; 0xfffffe70
     cac:	00656761 	rsbeq	r6, r5, r1, ror #14
     cb0:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     cb4:	61724733 	cmnvs	r2, r3, lsr r7
     cb8:	69660079 	stmdbvs	r6!, {r0, r3, r4, r5, r6}^
     cbc:	506c616e 	rsbpl	r6, ip, lr, ror #2
     cc0:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     cc4:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
     cc8:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     ccc:	42647269 	rsbmi	r7, r4, #-1879048186	; 0x90000006
     cd0:	6b63616c 	blvs	18d9288 <startup-0x1e726d78>
     cd4:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     cd8:	72694270 	rsbvc	r4, r9, #112, 4
     cdc:	6c423364 	mcrrvs	3, 6, r3, r2, cr4
     ce0:	006b6361 	rsbeq	r6, fp, r1, ror #6
     ce4:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     ce8:	31726574 	cmncc	r2, r4, ror r5
     cec:	6f700031 	svcvs	0x00700031
     cf0:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     cf4:	00323172 	eorseq	r3, r2, r2, ror r1
     cf8:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     cfc:	67694c34 			; <UNDEFINED> instruction: 0x67694c34
     d00:	62007468 	andvs	r7, r0, #104, 8	; 0x68000000
     d04:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     d08:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     d0c:	6f700065 	svcvs	0x00700065
     d10:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     d14:	00353172 	eorseq	r3, r5, r2, ror r1
     d18:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     d1c:	31726574 	cmncc	r2, r4, ror r5
     d20:	6f700037 	svcvs	0x00700037
     d24:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     d28:	00383172 	eorseq	r3, r8, r2, ror r1
     d2c:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     d30:	616d4932 	cmnvs	sp, r2, lsr r9
     d34:	70006567 	andvc	r6, r0, r7, ror #10
     d38:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     d3c:	32327265 	eorscc	r7, r2, #1342177286	; 0x50000006
     d40:	72696200 	rsbvc	r6, r9, #0, 4
     d44:	6c5f3264 	lfmvs	f3, 2, [pc], {100}	; 0x64
     d48:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     d4c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     d50:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
     d54:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     d58:	63616c42 	cmnvs	r1, #16896	; 0x4200
     d5c:	6977006b 	ldmdbvs	r7!, {r0, r1, r3, r5, r6}^
     d60:	31686374 	smccc	34356	; 0x8634
     d64:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     d68:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     d6c:	74695770 	strbtvc	r5, [r9], #-1904	; 0xfffff890
     d70:	694c6863 	stmdbvs	ip, {r0, r1, r5, r6, fp, sp, lr}^
     d74:	00746867 	rsbseq	r6, r4, r7, ror #16
     d78:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     d7c:	6a624f68 	bvs	1894b24 <startup-0x1e76b4dc>
     d80:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     d84:	5f316863 	svcpl	0x00316863
     d88:	63616c62 	cmnvs	r1, #25088	; 0x6200
     d8c:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     d90:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     d94:	57706d65 	ldrbpl	r6, [r0, -r5, ror #26]!
     d98:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     d9c:	67694c33 			; <UNDEFINED> instruction: 0x67694c33
     da0:	74007468 	strvc	r7, [r0], #-1128	; 0xfffffb98
     da4:	57706d65 	ldrbpl	r6, [r0, -r5, ror #26]!
     da8:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     dac:	67694c32 			; <UNDEFINED> instruction: 0x67694c32
     db0:	77007468 	strvc	r7, [r0, -r8, ror #8]
     db4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     db8:	67694c31 			; <UNDEFINED> instruction: 0x67694c31
     dbc:	74007468 	strvc	r7, [r0], #-1128	; 0xfffffb98
     dc0:	57706d65 	ldrbpl	r6, [r0, -r5, ror #26]!
     dc4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     dc8:	616c4232 	cmnvs	ip, r2, lsr r2
     dcc:	77006b63 	strvc	r6, [r0, -r3, ror #22]
     dd0:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     dd4:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     dd8:	5f746867 	svcpl	0x00746867
     ddc:	73746962 	cmnvc	r4, #1605632	; 0x188000
     de0:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     de4:	49336863 	ldmdbmi	r3!, {r0, r1, r5, r6, fp, sp, lr}
     de8:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     dec:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     df0:	42336863 	eorsmi	r6, r3, #6488064	; 0x630000
     df4:	6b63616c 	blvs	18d93ac <startup-0x1e726c54>
     df8:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     dfc:	5f336863 	svcpl	0x00336863
     e00:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     e04:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     e08:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
     e0c:	775f7469 	ldrbvc	r7, [pc, -r9, ror #8]
     e10:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     e14:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     e18:	74695770 	strbtvc	r5, [r9], #-1904	; 0xfffff890
     e1c:	6c426863 	mcrrvs	8, 6, r6, r2, cr3
     e20:	006b6361 	rsbeq	r6, fp, r1, ror #6
     e24:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     e28:	625f3268 	subsvs	r3, pc, #104, 4	; 0x80000006
     e2c:	6b63616c 	blvs	18d93e4 <startup-0x1e726c1c>
     e30:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     e34:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
     e38:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     e3c:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     e40:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     e44:	00737469 	rsbseq	r7, r3, r9, ror #8
     e48:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     e4c:	72473368 	subvc	r3, r7, #104, 6	; 0xa0000001
     e50:	77007961 	strvc	r7, [r0, -r1, ror #18]
     e54:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     e58:	61724732 	cmnvs	r2, r2, lsr r7
     e5c:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     e60:	6957706d 	ldmdbvs	r7, {r0, r2, r3, r5, r6, ip, sp, lr}^
     e64:	47686374 			; <UNDEFINED> instruction: 0x47686374
     e68:	00796172 	rsbseq	r6, r9, r2, ror r1
     e6c:	706d6574 	rsbvc	r6, sp, r4, ror r5
     e70:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     e74:	72473268 	subvc	r3, r7, #104, 4	; 0x80000006
     e78:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     e7c:	57706d65 	ldrbpl	r6, [r0, -r5, ror #26]!
     e80:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     e84:	616c4233 	cmnvs	ip, r3, lsr r2
     e88:	77006b63 	strvc	r6, [r0, -r3, ror #22]
     e8c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     e90:	696c5f31 	stmdbvs	ip!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     e94:	5f746867 	svcpl	0x00746867
     e98:	73746962 	cmnvc	r4, #1605632	; 0x188000
     e9c:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     ea0:	5f326863 	svcpl	0x00326863
     ea4:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     ea8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     eac:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
     eb0:	34686374 	strbtcc	r6, [r8], #-884	; 0xfffffc8c
     eb4:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     eb8:	69770065 	ldmdbvs	r7!, {r0, r2, r5, r6}^
     ebc:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     ec0:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     ec4:	69770074 	ldmdbvs	r7!, {r2, r4, r5, r6}^
     ec8:	31686374 	smccc	34356	; 0x8634
     ecc:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     ed0:	69770065 	ldmdbvs	r7!, {r0, r2, r5, r6}^
     ed4:	31686374 	smccc	34356	; 0x8634
     ed8:	63616c42 	cmnvs	r1, #16896	; 0x4200
     edc:	6977006b 	ldmdbvs	r7!, {r0, r1, r3, r5, r6}^
     ee0:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     ee4:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     ee8:	69770074 	ldmdbvs	r7!, {r2, r4, r5, r6}^
     eec:	49686374 	stmdbmi	r8!, {r2, r4, r5, r6, r8, r9, sp, lr}^
     ef0:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     ef4:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     ef8:	6957706d 	ldmdbvs	r7, {r0, r2, r3, r5, r6, ip, sp, lr}^
     efc:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     f00:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     f04:	2f3a4300 	svccs	0x003a4300
     f08:	2f706f6d 	svccs	0x00706f6d
     f0c:	6f4d2f63 	svcvs	0x004d2f63
     f10:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     f14:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     f18:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     f1c:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     f20:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     f24:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     f28:	772f432f 	strvc	r4, [pc, -pc, lsr #6]!
     f2c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     f30:	7700632e 	strvc	r6, [r0, -lr, lsr #6]
     f34:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     f38:	72675f31 	rsbvc	r5, r7, #49, 30	; 0xc4
     f3c:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     f40:	00737469 	rsbseq	r7, r3, r9, ror #8
     f44:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     f48:	625f3368 	subsvs	r3, pc, #104, 6	; 0xa0000001
     f4c:	6b63616c 	blvs	18d9504 <startup-0x1e726afc>
     f50:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     f54:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
     f58:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     f5c:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     f60:	49440065 	stmdbmi	r4, {r0, r2, r5, r6}^
     f64:	6d493250 	sfmvs	f3, 2, [r9, #-320]	; 0xfffffec0
     f68:	00656761 	rsbeq	r6, r5, r1, ror #14
     f6c:	49504944 	ldmdbmi	r0, {r2, r6, r8, fp, lr}^
     f70:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     f74:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     f78:	4944706d 	stmdbmi	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
     f7c:	694c3350 	stmdbvs	ip, {r4, r6, r8, r9, ip, sp}^
     f80:	00746867 	rsbseq	r6, r4, r7, ror #16
     f84:	31504944 	cmpcc	r0, r4, asr #18
     f88:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     f8c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     f90:	50494470 	subpl	r4, r9, r0, ror r4
     f94:	616c4232 	cmnvs	ip, r2, lsr r2
     f98:	74006b63 	strvc	r6, [r0], #-2915	; 0xfffff49d
     f9c:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
     fa0:	42335049 	eorsmi	r5, r3, #73	; 0x49
     fa4:	6b63616c 	blvs	18d955c <startup-0x1e726aa4>
     fa8:	50494400 	subpl	r4, r9, r0, lsl #8
     fac:	616d4933 	cmnvs	sp, r3, lsr r9
     fb0:	44006567 	strmi	r6, [r0], #-1383	; 0xfffffa99
     fb4:	4c315049 	ldcmi	0, cr5, [r1], #-292	; 0xfffffedc
     fb8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     fbc:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     fc0:	50494470 	subpl	r4, r9, r0, ror r4
     fc4:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     fc8:	50494400 	subpl	r4, r9, r0, lsl #8
     fcc:	61647055 	qdsubvs	r7, r5, r4
     fd0:	44006574 	strmi	r6, [r0], #-1396	; 0xfffffa8c
     fd4:	49315049 	ldmdbmi	r1!, {r0, r3, r6, ip, lr}
     fd8:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     fdc:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     fe0:	50494470 	subpl	r4, r9, r0, ror r4
     fe4:	61724732 	cmnvs	r2, r2, lsr r7
     fe8:	49440079 	stmdbmi	r4, {r0, r3, r4, r5, r6}^
     fec:	6d493450 	cfstrdvs	mvd3, [r9, #-320]	; 0xfffffec0
     ff0:	00656761 	rsbeq	r6, r5, r1, ror #14
     ff4:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
     ff8:	6f697463 	svcvs	0x00697463
     ffc:	6e69006e 	cdpvs	0, 6, cr0, cr9, cr14, {3}
    1000:	445f7469 	ldrbmi	r7, [pc], #-1129	; 1008 <startup-0x1fffeff8>
    1004:	74005049 	strvc	r5, [r0], #-73	; 0xffffffb7
    1008:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
    100c:	4c325049 	ldcmi	0, cr5, [r2], #-292	; 0xfffffedc
    1010:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1014:	50494400 	subpl	r4, r9, r0, lsl #8
    1018:	616c4231 	cmnvs	ip, r1, lsr r2
    101c:	74006b63 	strvc	r6, [r0], #-2915	; 0xfffff49d
    1020:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
    1024:	47335049 	ldrmi	r5, [r3, -r9, asr #32]!
    1028:	00796172 	rsbseq	r6, r9, r2, ror r1
    102c:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1030:	42504944 	subsmi	r4, r0, #68, 18	; 0x110000
    1034:	6b63616c 	blvs	18d95ec <startup-0x1e726a14>
    1038:	2f3a4300 	svccs	0x003a4300
    103c:	2f706f6d 	svccs	0x00706f6d
    1040:	6f4d2f63 	svcvs	0x004d2f63
    1044:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    1048:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    104c:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    1050:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1054:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    1058:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    105c:	442f432f 	strtmi	r4, [pc], #-815	; 1064 <startup-0x1fffef9c>
    1060:	632e5049 			; <UNDEFINED> instruction: 0x632e5049
    1064:	50494400 	subpl	r4, r9, r0, lsl #8
    1068:	006a624f 	rsbeq	r6, sl, pc, asr #4
    106c:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1070:	4c504944 	mrrcmi	9, 4, r4, r0, cr4	; <UNPREDICTABLE>
    1074:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1078:	67617000 	strbvs	r7, [r1, -r0]!
    107c:	72670065 	rsbvc	r0, r7, #101	; 0x65
    1080:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
    1084:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
    1088:	62006461 	andvs	r6, r0, #1627389952	; 0x61000000
    108c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    1090:	69700072 	ldmdbvs	r0!, {r1, r4, r5, r6}^
    1094:	326c6578 	rsbcc	r6, ip, #120, 10	; 0x1e000000
    1098:	61726400 	cmnvs	r2, r0, lsl #8
    109c:	61675f77 	smcvs	30199	; 0x75f7
    10a0:	6f5f656d 	svcvs	0x005f656d
    10a4:	63656a62 	cmnvs	r5, #401408	; 0x62000
    10a8:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
    10ac:	5f79616c 	svcpl	0x0079616c
    10b0:	7263696d 	rsbvc	r6, r3, #1785856	; 0x1b4000
    10b4:	7267006f 	rsbvc	r0, r7, #111	; 0x6f
    10b8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
    10bc:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
    10c0:	5f657469 	svcpl	0x00657469
    10c4:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
    10c8:	00646e61 	rsbeq	r6, r4, r1, ror #28
    10cc:	61656c63 	cmnvs	r5, r3, ror #24
    10d0:	61625f72 	smcvs	9714	; 0x25f2
    10d4:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
    10d8:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    10dc:	78697000 	stmdavc	r9!, {ip, sp, lr}^
    10e0:	67006c65 	strvs	r6, [r0, -r5, ror #24]
    10e4:	006a624f 	rsbeq	r6, sl, pc, asr #4
    10e8:	70617267 	rsbvc	r7, r1, r7, ror #4
    10ec:	5f636968 	svcpl	0x00636968
    10f0:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
    10f4:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
    10f8:	006e6565 	rsbeq	r6, lr, r5, ror #10
    10fc:	616c6564 	cmnvs	ip, r4, ror #10
    1100:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1104:	00696c6c 	rsbeq	r6, r9, ip, ror #24
    1108:	776f6873 			; <UNDEFINED> instruction: 0x776f6873
    110c:	6172665f 	cmnvs	r2, pc, asr r6
    1110:	6400656d 	strvs	r6, [r0], #-1389	; 0xfffffa93
    1114:	5f776172 	svcpl	0x00776172
    1118:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
    111c:	64006574 	strvs	r6, [r0], #-1396	; 0xfffffa8c
    1120:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    1124:	3030355f 	eorscc	r3, r0, pc, asr r5
    1128:	6700736e 	strvs	r7, [r0, -lr, ror #6]
    112c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
    1130:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
    1134:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1138:	61726700 	cmnvs	r2, r0, lsl #14
    113c:	61635379 	smcvs	13625	; 0x3539
    1140:	6554656c 	ldrbvs	r6, [r4, #-1388]	; 0xfffffa94
    1144:	67007473 	smlsdxvs	r0, r3, r4, r7
    1148:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
    114c:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
    1150:	5f6c7274 	svcpl	0x006c7274
    1154:	5f746962 	svcpl	0x00746962
    1158:	61656c63 	cmnvs	r5, r3, ror #24
    115c:	3a430072 	bcc	10c132c <startup-0x1ef3ecd4>
    1160:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
    1164:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 10b0 <startup-0x1fffef50>
    1168:	616c706f 	cmnvs	ip, pc, rrx
    116c:	61726f62 	cmnvs	r2, r2, ror #30
    1170:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1174:	442f7265 	strtmi	r7, [pc], #-613	; 117c <startup-0x1fffee84>
    1178:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
    117c:	63746957 	cmnvs	r4, #1425408	; 0x15c000
    1180:	2f432f68 	svccs	0x00432f68
    1184:	70617267 	rsbvc	r7, r1, r7, ror #4
    1188:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
    118c:	6700632e 	strvs	r6, [r0, -lr, lsr #6]
    1190:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
    1194:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
    1198:	5f646165 	svcpl	0x00646165
    119c:	61746164 	cmnvs	r4, r4, ror #2
    11a0:	6c6f6300 	stclvs	3, cr6, [pc], #-0	; 11a8 <startup-0x1fffee58>
    11a4:	7300726f 	movwvc	r7, #623	; 0x26f
    11a8:	755f7465 	ldrbvc	r7, [pc, #-1125]	; d4b <startup-0x1ffff2b5>
    11ac:	72645f70 	rsbvc	r5, r4, #112, 30	; 0x1c0
    11b0:	625f7761 	subsvs	r7, pc, #25427968	; 0x1840000
    11b4:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    11b8:	67007372 	smlsdxvs	r0, r2, r3, r7
    11bc:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
    11c0:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
    11c4:	5f6c7274 	svcpl	0x006c7274
    11c8:	5f746962 	svcpl	0x00746962
    11cc:	00746573 	rsbseq	r6, r4, r3, ror r5
    11d0:	616c6564 	cmnvs	ip, r4, ror #10
    11d4:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
    11d8:	00736e30 	rsbseq	r6, r3, r0, lsr lr
    11dc:	6c6c6966 			; <UNDEFINED> instruction: 0x6c6c6966
    11e0:	74636552 	strbtvc	r6, [r3], #-1362	; 0xfffffaae
    11e4:	6c676e61 	stclvs	14, cr6, [r7], #-388	; 0xfffffe7c
    11e8:	616d0065 	cmnvs	sp, r5, rrx
    11ec:	66006b73 			; <UNDEFINED> instruction: 0x66006b73
    11f0:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
    11f4:	6e656c5f 	mcrvs	12, 3, r6, cr5, cr15, {2}
    11f8:	00687467 	rsbeq	r7, r8, r7, ror #8
    11fc:	70617267 	rsbvc	r7, r1, r7, ror #4
    1200:	5f636968 	svcpl	0x00636968
    1204:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    1208:	61645f65 	cmnvs	r4, r5, ror #30
    120c:	62006174 	andvs	r6, r0, #116, 2
    1210:	00657479 	rsbeq	r7, r5, r9, ror r4
    1214:	74646977 	strbtvc	r6, [r4], #-2423	; 0xfffff689
    1218:	6e695f68 	cdpvs	15, 6, cr5, cr9, cr8, {3}
    121c:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
    1220:	63007365 	movwvs	r7, #869	; 0x365
    1224:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1228:	6c6c615f 	stfvse	f6, [ip], #-380	; 0xfffffe84
    122c:	6361625f 	cmnvs	r1, #-268435451	; 0xf0000005
    1230:	6675426b 	ldrbtvs	r4, [r5], -fp, ror #4
    1234:	73726566 	cmnvc	r2, #427819008	; 0x19800000
    1238:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
    123c:	65527261 	ldrbvs	r7, [r2, #-609]	; 0xfffffd9f
    1240:	6e617463 	cdpvs	4, 6, cr7, cr1, cr3, {3}
    1244:	00656c67 	rsbeq	r6, r5, r7, ror #24
    1248:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
    124c:	65730078 	ldrbvs	r0, [r3, #-120]!	; 0xffffff88
    1250:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    1254:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    1258:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 1090 <startup-0x1fffef70>
    125c:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1260:	70617267 	rsbvc	r7, r1, r7, ror #4
    1264:	5f636968 	svcpl	0x00636968
    1268:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
    126c:	6165725f 	cmnvs	r5, pc, asr r2
    1270:	63007964 	movwvs	r7, #2404	; 0x964
    1274:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1278:	6968745f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
    127c:	63614273 	cmnvs	r1, #805306375	; 0x30000007
    1280:	6675426b 	ldrbtvs	r4, [r5], -fp, ror #4
    1284:	00726566 	rsbseq	r6, r2, r6, ror #10
    1288:	70617267 	rsbvc	r7, r1, r7, ror #4
    128c:	5f636968 	svcpl	0x00636968
    1290:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    1294:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    1298:	6700657a 	smlsdxvs	r0, sl, r5, r6
    129c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
    12a0:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
    12a4:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    12a8:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
    12ac:	006e6565 	rsbeq	r6, lr, r5, ror #10
    12b0:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
    12b4:	616d695f 	cmnvs	sp, pc, asr r9
    12b8:	43006567 	movwmi	r6, #1383	; 0x567
    12bc:	6f6d2f3a 	svcvs	0x006d2f3a
    12c0:	2f632f70 	svccs	0x00632f70
    12c4:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    12c8:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    12cc:	6f697461 	svcvs	0x00697461
    12d0:	2f72656e 	svccs	0x0072656e
    12d4:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    12d8:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    12dc:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    12e0:	616d692f 	cmnvs	sp, pc, lsr #18
    12e4:	632e6567 			; <UNDEFINED> instruction: 0x632e6567
    12e8:	616f6c00 	cmnvs	pc, r0, lsl #24
    12ec:	70735f64 	rsbsvc	r5, r3, r4, ror #30
    12f0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    12f4:	2f3a4300 	svccs	0x003a4300
    12f8:	2f706f6d 	svccs	0x00706f6d
    12fc:	6f4d2f63 	svcvs	0x004d2f63
    1300:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    1304:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    1308:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    130c:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1310:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    1314:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1318:	732f432f 			; <UNDEFINED> instruction: 0x732f432f
    131c:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
    1320:	00632e65 	rsbeq	r2, r3, r5, ror #28
    1324:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1328:	65730072 	ldrbvs	r0, [r3, #-114]!	; 0xffffff8e
    132c:	70755f74 	rsbsvc	r5, r5, r4, ror pc
    1330:	4c49445f 	cfstrdmi	mvd4, [r9], {95}	; 0x5f
    1334:	72646f00 	rsbvc	r6, r4, #0, 30
    1338:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
    133c:	79546f00 	ldmdbvc	r4, {r8, r9, sl, fp, sp, lr}^
    1340:	00726570 	rsbseq	r6, r2, r0, ror r5
    1344:	4f495047 	svcmi	0x00495047
    1348:	50755000 	rsbspl	r5, r5, r0
    134c:	69007264 	stmdbvs	r0, {r2, r5, r6, r9, ip, sp, lr}
    1350:	65527264 	ldrbvs	r7, [r2, #-612]	; 0xfffffd9c
    1354:	76726573 			; <UNDEFINED> instruction: 0x76726573
    1358:	43006465 	movwmi	r6, #1125	; 0x465
    135c:	6f6d2f3a 	svcvs	0x006d2f3a
    1360:	2f632f70 	svccs	0x00632f70
    1364:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    1368:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    136c:	6f697461 	svcvs	0x00697461
    1370:	2f72656e 	svccs	0x0072656e
    1374:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    1378:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    137c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    1380:	6970672f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}^
    1384:	00632e6f 	rsbeq	r2, r3, pc, ror #28
    1388:	6552746f 	ldrbvs	r7, [r2, #-1135]	; 0xfffffb91
    138c:	76726573 			; <UNDEFINED> instruction: 0x76726573
    1390:	72006465 	andvc	r6, r0, #1694498816	; 0x65000000
    1394:	5f646165 	svcpl	0x00646165
    1398:	5f4c4944 	svcpl	0x004c4944
    139c:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
    13a0:	6f00656c 	svcvs	0x0000656c
    13a4:	6f4c7264 	svcvs	0x004c7264
    13a8:	536f0077 	cmnpl	pc, #119	; 0x77
    13ac:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
    13b0:	64690072 	strbtvs	r0, [r9], #-114	; 0xffffff8e
    13b4:	67694872 			; <UNDEFINED> instruction: 0x67694872
    13b8:	64690068 	strbtvs	r0, [r9], #-104	; 0xffffff98
    13bc:	776f4c72 			; <UNDEFINED> instruction: 0x776f4c72
    13c0:	72646f00 	rsbvc	r6, r4, #0, 30
    13c4:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    13c8:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    13cc:	61657200 	cmnvs	r5, r0, lsl #4
    13d0:	49445f64 	stmdbmi	r4, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    13d4:	6e69004c 	cdpvs	0, 6, cr0, cr9, cr12, {2}
    13d8:	615f7469 	cmpvs	pc, r9, ror #8
    13dc:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
    13e0:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    13e4:	6c006e6f 	stcvs	14, cr6, [r0], {111}	; 0x6f
    13e8:	74696d69 	strbtvc	r6, [r9], #-3433	; 0xfffff297
    13ec:	73610032 	cmnvc	r1, #50	; 0x32
    13f0:	5f696963 	svcpl	0x00696963
    13f4:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    13f8:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    13fc:	65730061 	ldrbvs	r0, [r3, #-97]!	; 0xffffff9f
    1400:	70755f74 	rsbsvc	r5, r5, r4, ror pc
    1404:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
    1408:	61006969 	tstvs	r0, r9, ror #18
    140c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1410:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    1414:	6f630074 	svcvs	0x00630074
    1418:	6e6d756c 	cdpvs	5, 6, cr7, cr13, cr12, {3}
    141c:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
    1420:	615f7261 	cmpvs	pc, r1, ror #4
    1424:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1428:	63736100 	cmnvs	r3, #0, 2
    142c:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
    1430:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1434:	7261705f 	rsbvc	r7, r1, #95	; 0x5f
    1438:	73610074 	cmnvc	r1, #116	; 0x74
    143c:	5f696963 	svcpl	0x00696963
    1440:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1444:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    1448:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 1280 <startup-0x1fffed80>
    144c:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1450:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1454:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
    1458:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
    145c:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
    1460:	61007465 	tstvs	r0, r5, ror #8
    1464:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1468:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    146c:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
    1470:	7400646d 	strvc	r6, [r0], #-1133	; 0xfffffb93
    1474:	31747365 	cmncc	r4, r5, ror #6
    1478:	73657400 	cmnvc	r5, #0, 8
    147c:	61003274 	tstvs	r0, r4, ror r2
    1480:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    1484:	61007373 	tstvs	r0, r3, ror r3
    1488:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    148c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    1490:	645f6574 	ldrbvs	r6, [pc], #-1396	; 1498 <startup-0x1fffeb68>
    1494:	00617461 	rsbeq	r7, r1, r1, ror #8
    1498:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    149c:	65745f69 	ldrbvs	r5, [r4, #-3945]!	; 0xfffff097
    14a0:	61007473 	tstvs	r0, r3, ror r4
    14a4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    14a8:	6165725f 	cmnvs	r5, pc, asr r2
    14ac:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xfffff09c
    14b0:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    14b4:	63736100 	cmnvs	r3, #0, 2
    14b8:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
    14bc:	5f6c7274 	svcpl	0x006c7274
    14c0:	5f746962 	svcpl	0x00746962
    14c4:	61656c63 	cmnvs	r5, r3, ror #24
    14c8:	73610072 	cmnvc	r1, #114	; 0x72
    14cc:	5f696963 	svcpl	0x00696963
    14d0:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    14d4:	73610065 	cmnvc	r1, #101	; 0x65
    14d8:	5f696963 	svcpl	0x00696963
    14dc:	6f546f67 	svcvs	0x00546f67
    14e0:	61005958 	tstvs	r0, r8, asr r9
    14e4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    14e8:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    14ec:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
    14f0:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    14f4:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
    14f8:	73610072 	cmnvc	r1, #114	; 0x72
    14fc:	5f696963 	svcpl	0x00696963
    1500:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    1504:	68635f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    1508:	6c007261 	sfmvs	f7, 4, [r0], {97}	; 0x61
    150c:	74696d69 	strbtvc	r6, [r9], #-3433	; 0xfffff297
    1510:	3a430031 	bcc	10c15dc <startup-0x1ef3ea24>
    1514:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
    1518:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 1464 <startup-0x1fffeb9c>
    151c:	616c706f 	cmnvs	ip, pc, rrx
    1520:	61726f62 	cmnvs	r2, r2, ror #30
    1524:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1528:	442f7265 	strtmi	r7, [pc], #-613	; 1530 <startup-0x1fffead0>
    152c:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
    1530:	63746957 	cmnvs	r4, #1425408	; 0x15c000
    1534:	2f432f68 	svccs	0x00432f68
    1538:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    153c:	69645f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1540:	616c7073 	smcvs	50947	; 0xc703
    1544:	00632e79 	rsbeq	r2, r3, r9, ror lr
    1548:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    154c:	6f6c735f 	svcvs	0x006c735f
    1550:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
    1554:	6c007478 	cfstrsvs	mvf7, [r0], {120}	; 0x78
    1558:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
    155c:	666f5f68 	strbtvs	r5, [pc], -r8, ror #30
    1560:	776f725f 			; <UNDEFINED> instruction: 0x776f725f
    1564:	3a430031 	bcc	10c1630 <startup-0x1ef3e9d0>
    1568:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
    156c:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 14b8 <startup-0x1fffeb48>
    1570:	616c706f 	cmnvs	ip, pc, rrx
    1574:	61726f62 	cmnvs	r2, r2, ror #30
    1578:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    157c:	442f7265 	strtmi	r7, [pc], #-613	; 1584 <startup-0x1fffea7c>
    1580:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
    1584:	63746957 	cmnvs	r4, #1425408	; 0x15c000
    1588:	2f432f68 	svccs	0x00432f68
    158c:	776f6c73 			; <UNDEFINED> instruction: 0x776f6c73
    1590:	7865745f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
    1594:	00632e74 	rsbeq	r2, r3, r4, ror lr
    1598:	6f646e69 	svcvs	0x00646e69
    159c:	4973726f 	ldmdbmi	r3!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    15a0:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    15a4:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    15a8:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    15ac:	63616c42 	cmnvs	r1, #16896	; 0x4200
    15b0:	6e69006b 	cdpvs	0, 6, cr0, cr9, cr11, {3}
    15b4:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    15b8:	616d4973 	smcvs	54419	; 0xd493
    15bc:	00736567 	rsbseq	r6, r3, r7, ror #10
    15c0:	6f646e69 	svcvs	0x00646e69
    15c4:	5f73726f 	svcpl	0x0073726f
    15c8:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    15cc:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    15d0:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
    15d4:	49706d65 	ldmdbmi	r0!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    15d8:	6f6f646e 	svcvs	0x006f646e
    15dc:	72477372 	subvc	r7, r7, #-939524095	; 0xc8000001
    15e0:	69007961 	stmdbvs	r0, {r0, r5, r6, r8, fp, ip, sp, lr}
    15e4:	6f6f646e 	svcvs	0x006f646e
    15e8:	675f7372 			; <UNDEFINED> instruction: 0x675f7372
    15ec:	5f796172 	svcpl	0x00796172
    15f0:	73746962 	cmnvc	r4, #1605632	; 0x188000
    15f4:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    15f8:	646e4970 	strbtvs	r4, [lr], #-2416	; 0xfffff690
    15fc:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1600:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    1604:	6e690074 	mcrvs	0, 3, r0, cr9, cr4, {3}
    1608:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    160c:	67694c73 			; <UNDEFINED> instruction: 0x67694c73
    1610:	43007468 	movwmi	r7, #1128	; 0x468
    1614:	6f6d2f3a 	svcvs	0x006d2f3a
    1618:	2f632f70 	svccs	0x00632f70
    161c:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    1620:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    1624:	6f697461 	svcvs	0x00697461
    1628:	2f72656e 	svccs	0x0072656e
    162c:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    1630:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    1634:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    1638:	646e692f 	strbtvs	r6, [lr], #-2351	; 0xfffff6d1
    163c:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1640:	6900632e 	stmdbvs	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
    1644:	6f6f646e 	svcvs	0x006f646e
    1648:	625f7372 	subsvs	r7, pc, #-939524095	; 0xc8000001
    164c:	6b63616c 	blvs	18d9c04 <startup-0x1e7263fc>
    1650:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1654:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    1658:	6e49706d 	cdpvs	0, 4, cr7, cr9, cr13, {3}
    165c:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1660:	616c4273 	smcvs	50211	; 0xc423
    1664:	69006b63 	stmdbvs	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    1668:	5f74696e 	svcpl	0x0074696e
    166c:	6f646e69 	svcvs	0x00646e69
    1670:	0073726f 	rsbseq	r7, r3, pc, ror #4
    1674:	6f646e69 	svcvs	0x00646e69
    1678:	4f73726f 	svcmi	0x0073726f
    167c:	69006a62 	stmdbvs	r0, {r1, r5, r6, r9, fp, sp, lr}
    1680:	6f6f646e 	svcvs	0x006f646e
    1684:	72477372 	subvc	r7, r7, #-939524095	; 0xc8000001
    1688:	69007961 	stmdbvs	r0, {r0, r5, r6, r8, fp, ip, sp, lr}
    168c:	6f6f646e 	svcvs	0x006f646e
    1690:	4c327372 	ldcmi	3, cr7, [r2], #-456	; 0xfffffe38
    1694:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1698:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    169c:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    16a0:	6c625f32 	stclvs	15, cr5, [r2], #-200	; 0xffffff38
    16a4:	5f6b6361 	svcpl	0x006b6361
    16a8:	73746962 	cmnvc	r4, #1605632	; 0x188000
    16ac:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    16b0:	646e4970 	strbtvs	r4, [lr], #-2416	; 0xfffff690
    16b4:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    16b8:	67694c32 			; <UNDEFINED> instruction: 0x67694c32
    16bc:	69007468 	stmdbvs	r0, {r3, r5, r6, sl, ip, sp, lr}
    16c0:	6f6f646e 	svcvs	0x006f646e
    16c4:	47327372 			; <UNDEFINED> instruction: 0x47327372
    16c8:	00796172 	rsbseq	r6, r9, r2, ror r1
    16cc:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    16d0:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    16d4:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    16d8:	6f62616c 	svcvs	0x0062616c
    16dc:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    16e0:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    16e4:	5049442f 	subpl	r4, r9, pc, lsr #8
    16e8:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    16ec:	2f686374 	svccs	0x00686374
    16f0:	6e692f43 	cdpvs	15, 6, cr2, cr9, cr3, {2}
    16f4:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    16f8:	632e3273 			; <UNDEFINED> instruction: 0x632e3273
    16fc:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1700:	646e4970 	strbtvs	r4, [lr], #-2416	; 0xfffff690
    1704:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1708:	616c4232 	cmnvs	ip, r2, lsr r2
    170c:	69006b63 	stmdbvs	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    1710:	6f6f646e 	svcvs	0x006f646e
    1714:	42327372 	eorsmi	r7, r2, #-939524095	; 0xc8000001
    1718:	6b63616c 	blvs	18d9cd0 <startup-0x1e726330>
    171c:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1720:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1724:	616d4932 	cmnvs	sp, r2, lsr r9
    1728:	69006567 	stmdbvs	r0, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
    172c:	5f74696e 	svcpl	0x0074696e
    1730:	6f646e69 	svcvs	0x00646e69
    1734:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1738:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    173c:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1740:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    1744:	5f746867 	svcpl	0x00746867
    1748:	73746962 	cmnvc	r4, #1605632	; 0x188000
    174c:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1750:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1754:	616d4932 	cmnvs	sp, r2, lsr r9
    1758:	00736567 	rsbseq	r6, r3, r7, ror #10
    175c:	6f646e69 	svcvs	0x00646e69
    1760:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1764:	6172675f 	cmnvs	r2, pc, asr r7
    1768:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    176c:	69007374 	stmdbvs	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
    1770:	6f6f646e 	svcvs	0x006f646e
    1774:	4f327372 	svcmi	0x00327372
    1778:	74006a62 	strvc	r6, [r0], #-2658	; 0xfffff59e
    177c:	49706d65 	ldmdbmi	r0!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    1780:	6f6f646e 	svcvs	0x006f646e
    1784:	47327372 			; <UNDEFINED> instruction: 0x47327372
    1788:	00796172 	rsbseq	r6, r9, r2, ror r1

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000024 	andeq	r0, r0, r4, lsr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000034 	andcs	r0, r0, r4, lsr r0
  48:	000001c8 	andeq	r0, r0, r8, asr #3
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	300e4101 	andcc	r4, lr, r1, lsl #2
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	00000020 	andeq	r0, r0, r0, lsr #32
  60:	00000000 	andeq	r0, r0, r0
  64:	200001fc 	strdcs	r0, [r0], -ip
  68:	00000e10 	andeq	r0, r0, r0, lsl lr
  6c:	400c0e41 	andmi	r0, ip, r1, asr #28
  70:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  74:	018e4002 	orreq	r4, lr, r2
  78:	07800e42 	streq	r0, [r0, r2, asr #28]
  7c:	00070d41 	andeq	r0, r7, r1, asr #26
  80:	0000000c 	andeq	r0, r0, ip
  84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  88:	7c020001 	stcvc	0, cr0, [r2], {1}
  8c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000080 	andeq	r0, r0, r0, lsl #1
  98:	2000100c 	andcs	r1, r0, ip
  9c:	00000010 	andeq	r0, r0, r0, lsl r0
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	100e4101 	andne	r4, lr, r1, lsl #2
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000080 	andeq	r0, r0, r0, lsl #1
  b8:	2000101c 	andcs	r1, r0, ip, lsl r0
  bc:	00000046 	andeq	r0, r0, r6, asr #32
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	100e4101 	andne	r4, lr, r1, lsl #2
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000000c 	andeq	r0, r0, ip
  d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  d8:	7c020001 	stcvc	0, cr0, [r2], {1}
  dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  e8:	20001064 	andcs	r1, r0, r4, rrx
  ec:	00000184 	andeq	r0, r0, r4, lsl #3
  f0:	40080e41 	andmi	r0, r8, r1, asr #28
  f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f8:	380e4101 	stmdacc	lr, {r0, r8, lr}
  fc:	00070d41 	andeq	r0, r7, r1, asr #26
 100:	00000020 	andeq	r0, r0, r0, lsr #32
 104:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 108:	200011e8 	andcs	r1, r0, r8, ror #3
 10c:	00000124 	andeq	r0, r0, r4, lsr #2
 110:	400c0e41 	andmi	r0, ip, r1, asr #28
 114:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 118:	018e4002 	orreq	r4, lr, r2
 11c:	41180e41 	tstmi	r8, r1, asr #28
 120:	0000070d 	andeq	r0, r0, sp, lsl #14
 124:	0000000c 	andeq	r0, r0, ip
 128:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 12c:	7c020001 	stcvc	0, cr0, [r2], {1}
 130:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 134:	0000001c 	andeq	r0, r0, ip, lsl r0
 138:	00000124 	andeq	r0, r0, r4, lsr #2
 13c:	2000130c 	andcs	r1, r0, ip, lsl #6
 140:	000001d4 	ldrdeq	r0, [r0], -r4
 144:	40080e41 	andmi	r0, r8, r1, asr #28
 148:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 14c:	100e4101 	andne	r4, lr, r1, lsl #2
 150:	00070d41 	andeq	r0, r7, r1, asr #26
 154:	0000000c 	andeq	r0, r0, ip
 158:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 15c:	7c020001 	stcvc	0, cr0, [r2], {1}
 160:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 164:	0000001c 	andeq	r0, r0, ip, lsl r0
 168:	00000154 	andeq	r0, r0, r4, asr r1
 16c:	200014e0 	andcs	r1, r0, r0, ror #9
 170:	0000020c 	andeq	r0, r0, ip, lsl #4
 174:	40080e41 	andmi	r0, r8, r1, asr #28
 178:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 17c:	480e4101 	stmdami	lr, {r0, r8, lr}
 180:	00070d41 	andeq	r0, r7, r1, asr #26
 184:	00000020 	andeq	r0, r0, r0, lsr #32
 188:	00000154 	andeq	r0, r0, r4, asr r1
 18c:	200016ec 	andcs	r1, r0, ip, ror #13
 190:	00000158 	andeq	r0, r0, r8, asr r1
 194:	400c0e41 	andmi	r0, ip, r1, asr #28
 198:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 19c:	018e4002 	orreq	r4, lr, r2
 1a0:	41180e41 	tstmi	r8, r1, asr #28
 1a4:	0000070d 	andeq	r0, r0, sp, lsl #14
 1a8:	0000000c 	andeq	r0, r0, ip
 1ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1b0:	7c020001 	stcvc	0, cr0, [r2], {1}
 1b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1bc:	000001a8 	andeq	r0, r0, r8, lsr #3
 1c0:	20001844 	andcs	r1, r0, r4, asr #16
 1c4:	00000140 	andeq	r0, r0, r0, asr #2
 1c8:	40080e41 	andmi	r0, r8, r1, asr #28
 1cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d0:	300e4101 	andcc	r4, lr, r1, lsl #2
 1d4:	00070d41 	andeq	r0, r7, r1, asr #26
 1d8:	00000020 	andeq	r0, r0, r0, lsr #32
 1dc:	000001a8 	andeq	r0, r0, r8, lsr #3
 1e0:	20001984 	andcs	r1, r0, r4, lsl #19
 1e4:	000000f8 	strdeq	r0, [r0], -r8
 1e8:	400c0e41 	andmi	r0, ip, r1, asr #28
 1ec:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 1f0:	018e4002 	orreq	r4, lr, r2
 1f4:	41180e41 	tstmi	r8, r1, asr #28
 1f8:	0000070d 	andeq	r0, r0, sp, lsl #14
 1fc:	0000000c 	andeq	r0, r0, ip
 200:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 204:	7c020001 	stcvc	0, cr0, [r2], {1}
 208:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 20c:	0000001c 	andeq	r0, r0, ip, lsl r0
 210:	000001fc 	strdeq	r0, [r0], -ip
 214:	20001a7c 	andcs	r1, r0, ip, ror sl
 218:	00000140 	andeq	r0, r0, r0, asr #2
 21c:	40080e41 	andmi	r0, r8, r1, asr #28
 220:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 224:	300e4101 	andcc	r4, lr, r1, lsl #2
 228:	00070d41 	andeq	r0, r7, r1, asr #26
 22c:	00000020 	andeq	r0, r0, r0, lsr #32
 230:	000001fc 	strdeq	r0, [r0], -ip
 234:	20001bbc 			; <UNDEFINED> instruction: 0x20001bbc
 238:	000000f8 	strdeq	r0, [r0], -r8
 23c:	400c0e41 	andmi	r0, ip, r1, asr #28
 240:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 244:	018e4002 	orreq	r4, lr, r2
 248:	41180e41 	tstmi	r8, r1, asr #28
 24c:	0000070d 	andeq	r0, r0, sp, lsl #14
 250:	0000001c 	andeq	r0, r0, ip, lsl r0
 254:	000001fc 	strdeq	r0, [r0], -ip
 258:	20001cb4 			; <UNDEFINED> instruction: 0x20001cb4
 25c:	00000074 	andeq	r0, r0, r4, ror r0
 260:	40080e41 	andmi	r0, r8, r1, asr #28
 264:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 268:	100e4101 	andne	r4, lr, r1, lsl #2
 26c:	00070d41 	andeq	r0, r7, r1, asr #26
 270:	0000000c 	andeq	r0, r0, ip
 274:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 278:	7c020001 	stcvc	0, cr0, [r2], {1}
 27c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 280:	00000018 	andeq	r0, r0, r8, lsl r0
 284:	00000270 	andeq	r0, r0, r0, ror r2
 288:	20001d28 	andcs	r1, r0, r8, lsr #26
 28c:	00000044 	andeq	r0, r0, r4, asr #32
 290:	40080e41 	andmi	r0, r8, r1, asr #28
 294:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 298:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 29c:	00000018 	andeq	r0, r0, r8, lsl r0
 2a0:	00000270 	andeq	r0, r0, r0, ror r2
 2a4:	20001d6c 	andcs	r1, r0, ip, ror #26
 2a8:	00000044 	andeq	r0, r0, r4, asr #32
 2ac:	40080e41 	andmi	r0, r8, r1, asr #28
 2b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2bc:	00000270 	andeq	r0, r0, r0, ror r2
 2c0:	20001db0 			; <UNDEFINED> instruction: 0x20001db0
 2c4:	0000002c 	andeq	r0, r0, ip, lsr #32
 2c8:	40080e41 	andmi	r0, r8, r1, asr #28
 2cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d0:	100e4101 	andne	r4, lr, r1, lsl #2
 2d4:	00070d41 	andeq	r0, r7, r1, asr #26
 2d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2dc:	00000270 	andeq	r0, r0, r0, ror r2
 2e0:	20001ddc 	ldrdcs	r1, [r0], -ip
 2e4:	00000026 	andeq	r0, r0, r6, lsr #32
 2e8:	40080e41 	andmi	r0, r8, r1, asr #28
 2ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f0:	100e4101 	andne	r4, lr, r1, lsl #2
 2f4:	00070d41 	andeq	r0, r7, r1, asr #26
 2f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2fc:	00000270 	andeq	r0, r0, r0, ror r2
 300:	20001e02 	andcs	r1, r0, r2, lsl #28
 304:	00000032 	andeq	r0, r0, r2, lsr r0
 308:	40080e41 	andmi	r0, r8, r1, asr #28
 30c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 310:	180e4101 	stmdane	lr, {r0, r8, lr}
 314:	00070d41 	andeq	r0, r7, r1, asr #26
 318:	00000018 	andeq	r0, r0, r8, lsl r0
 31c:	00000270 	andeq	r0, r0, r0, ror r2
 320:	20001e34 	andcs	r1, r0, r4, lsr lr
 324:	00000018 	andeq	r0, r0, r8, lsl r0
 328:	40080e41 	andmi	r0, r8, r1, asr #28
 32c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 330:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 334:	00000018 	andeq	r0, r0, r8, lsl r0
 338:	00000270 	andeq	r0, r0, r0, ror r2
 33c:	20001e4c 	andcs	r1, r0, ip, asr #28
 340:	00000030 	andeq	r0, r0, r0, lsr r0
 344:	40080e41 	andmi	r0, r8, r1, asr #28
 348:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 34c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 350:	0000001c 	andeq	r0, r0, ip, lsl r0
 354:	00000270 	andeq	r0, r0, r0, ror r2
 358:	20001e7c 	andcs	r1, r0, ip, ror lr
 35c:	00000050 	andeq	r0, r0, r0, asr r0
 360:	40080e41 	andmi	r0, r8, r1, asr #28
 364:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 368:	180e4101 	stmdane	lr, {r0, r8, lr}
 36c:	00070d41 	andeq	r0, r7, r1, asr #26
 370:	0000001c 	andeq	r0, r0, ip, lsl r0
 374:	00000270 	andeq	r0, r0, r0, ror r2
 378:	20001ecc 	andcs	r1, r0, ip, asr #29
 37c:	00000058 	andeq	r0, r0, r8, asr r0
 380:	40080e41 	andmi	r0, r8, r1, asr #28
 384:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 388:	180e4101 	stmdane	lr, {r0, r8, lr}
 38c:	00070d41 	andeq	r0, r7, r1, asr #26
 390:	0000001c 	andeq	r0, r0, ip, lsl r0
 394:	00000270 	andeq	r0, r0, r0, ror r2
 398:	20001f24 	andcs	r1, r0, r4, lsr #30
 39c:	00000066 	andeq	r0, r0, r6, rrx
 3a0:	40080e41 	andmi	r0, r8, r1, asr #28
 3a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3a8:	100e4101 	andne	r4, lr, r1, lsl #2
 3ac:	00070d41 	andeq	r0, r7, r1, asr #26
 3b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b4:	00000270 	andeq	r0, r0, r0, ror r2
 3b8:	20001f8a 	andcs	r1, r0, sl, lsl #31
 3bc:	0000006e 	andeq	r0, r0, lr, rrx
 3c0:	40080e41 	andmi	r0, r8, r1, asr #28
 3c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3c8:	100e4101 	andne	r4, lr, r1, lsl #2
 3cc:	00070d41 	andeq	r0, r7, r1, asr #26
 3d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d4:	00000270 	andeq	r0, r0, r0, ror r2
 3d8:	20001ff8 	strdcs	r1, [r0], -r8
 3dc:	00000094 	muleq	r0, r4, r0
 3e0:	40080e41 	andmi	r0, r8, r1, asr #28
 3e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3e8:	180e4101 	stmdane	lr, {r0, r8, lr}
 3ec:	00070d41 	andeq	r0, r7, r1, asr #26
 3f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f4:	00000270 	andeq	r0, r0, r0, ror r2
 3f8:	2000208c 	andcs	r2, r0, ip, lsl #1
 3fc:	0000002a 	andeq	r0, r0, sl, lsr #32
 400:	40080e41 	andmi	r0, r8, r1, asr #28
 404:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 408:	100e4101 	andne	r4, lr, r1, lsl #2
 40c:	00070d41 	andeq	r0, r7, r1, asr #26
 410:	0000001c 	andeq	r0, r0, ip, lsl r0
 414:	00000270 	andeq	r0, r0, r0, ror r2
 418:	200020b6 	strhcs	r2, [r0], -r6
 41c:	0000007e 	andeq	r0, r0, lr, ror r0
 420:	40080e41 	andmi	r0, r8, r1, asr #28
 424:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 428:	100e4101 	andne	r4, lr, r1, lsl #2
 42c:	00070d41 	andeq	r0, r7, r1, asr #26
 430:	0000001c 	andeq	r0, r0, ip, lsl r0
 434:	00000270 	andeq	r0, r0, r0, ror r2
 438:	20002134 	andcs	r2, r0, r4, lsr r1
 43c:	00000046 	andeq	r0, r0, r6, asr #32
 440:	40080e41 	andmi	r0, r8, r1, asr #28
 444:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 448:	100e4101 	andne	r4, lr, r1, lsl #2
 44c:	00070d41 	andeq	r0, r7, r1, asr #26
 450:	0000001c 	andeq	r0, r0, ip, lsl r0
 454:	00000270 	andeq	r0, r0, r0, ror r2
 458:	2000217a 	andcs	r2, r0, sl, ror r1
 45c:	00000046 	andeq	r0, r0, r6, asr #32
 460:	40080e41 	andmi	r0, r8, r1, asr #28
 464:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 468:	100e4101 	andne	r4, lr, r1, lsl #2
 46c:	00070d41 	andeq	r0, r7, r1, asr #26
 470:	00000018 	andeq	r0, r0, r8, lsl r0
 474:	00000270 	andeq	r0, r0, r0, ror r2
 478:	200021c0 	andcs	r2, r0, r0, asr #3
 47c:	0000006e 	andeq	r0, r0, lr, rrx
 480:	40080e41 	andmi	r0, r8, r1, asr #28
 484:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 488:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	00000270 	andeq	r0, r0, r0, ror r2
 494:	2000222e 	andcs	r2, r0, lr, lsr #4
 498:	00000066 	andeq	r0, r0, r6, rrx
 49c:	40080e41 	andmi	r0, r8, r1, asr #28
 4a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4a4:	100e4101 	andne	r4, lr, r1, lsl #2
 4a8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b0:	00000270 	andeq	r0, r0, r0, ror r2
 4b4:	20002294 	mulcs	r0, r4, r2
 4b8:	00000180 	andeq	r0, r0, r0, lsl #3
 4bc:	40080e41 	andmi	r0, r8, r1, asr #28
 4c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4c4:	200e4101 	andcs	r4, lr, r1, lsl #2
 4c8:	00070d41 	andeq	r0, r7, r1, asr #26
 4cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d0:	00000270 	andeq	r0, r0, r0, ror r2
 4d4:	20002414 	andcs	r2, r0, r4, lsl r4
 4d8:	000001a0 	andeq	r0, r0, r0, lsr #3
 4dc:	40080e41 	andmi	r0, r8, r1, asr #28
 4e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e4:	280e4101 	stmdacs	lr, {r0, r8, lr}
 4e8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f0:	00000270 	andeq	r0, r0, r0, ror r2
 4f4:	200025b4 			; <UNDEFINED> instruction: 0x200025b4
 4f8:	000000d6 	ldrdeq	r0, [r0], -r6
 4fc:	40080e41 	andmi	r0, r8, r1, asr #28
 500:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 504:	200e4101 	andcs	r4, lr, r1, lsl #2
 508:	00070d41 	andeq	r0, r7, r1, asr #26
 50c:	00000024 	andeq	r0, r0, r4, lsr #32
 510:	00000270 	andeq	r0, r0, r0, ror r2
 514:	2000268a 	andcs	r2, r0, sl, lsl #13
 518:	0000011a 	andeq	r0, r0, sl, lsl r1
 51c:	40100e41 	andsmi	r0, r0, r1, asr #28
 520:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 524:	02874003 	addeq	r4, r7, #3
 528:	41018e40 	tstmi	r1, r0, asr #28
 52c:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 530:	00000007 	andeq	r0, r0, r7
 534:	0000001c 	andeq	r0, r0, ip, lsl r0
 538:	00000270 	andeq	r0, r0, r0, ror r2
 53c:	200027a4 	andcs	r2, r0, r4, lsr #15
 540:	00000052 	andeq	r0, r0, r2, asr r0
 544:	40080e41 	andmi	r0, r8, r1, asr #28
 548:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 54c:	200e4101 	andcs	r4, lr, r1, lsl #2
 550:	00070d41 	andeq	r0, r7, r1, asr #26
 554:	0000001c 	andeq	r0, r0, ip, lsl r0
 558:	00000270 	andeq	r0, r0, r0, ror r2
 55c:	200027f6 	strdcs	r2, [r0], -r6
 560:	00000052 	andeq	r0, r0, r2, asr r0
 564:	40080e41 	andmi	r0, r8, r1, asr #28
 568:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 56c:	200e4101 	andcs	r4, lr, r1, lsl #2
 570:	00070d41 	andeq	r0, r7, r1, asr #26
 574:	00000020 	andeq	r0, r0, r0, lsr #32
 578:	00000270 	andeq	r0, r0, r0, ror r2
 57c:	20002848 	andcs	r2, r0, r8, asr #16
 580:	00000130 	andeq	r0, r0, r0, lsr r1
 584:	400c0e41 	andmi	r0, ip, r1, asr #28
 588:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 58c:	018e4002 	orreq	r4, lr, r2
 590:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 594:	0000070d 	andeq	r0, r0, sp, lsl #14
 598:	0000001c 	andeq	r0, r0, ip, lsl r0
 59c:	00000270 	andeq	r0, r0, r0, ror r2
 5a0:	20002978 	andcs	r2, r0, r8, ror r9
 5a4:	00000108 	andeq	r0, r0, r8, lsl #2
 5a8:	40080e41 	andmi	r0, r8, r1, asr #28
 5ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5b0:	100e4101 	andne	r4, lr, r1, lsl #2
 5b4:	00070d41 	andeq	r0, r7, r1, asr #26
 5b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5bc:	00000270 	andeq	r0, r0, r0, ror r2
 5c0:	20002a80 	andcs	r2, r0, r0, lsl #21
 5c4:	00000082 	andeq	r0, r0, r2, lsl #1
 5c8:	40080e41 	andmi	r0, r8, r1, asr #28
 5cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5d0:	200e4101 	andcs	r4, lr, r1, lsl #2
 5d4:	18070c41 	stmdane	r7, {r0, r6, sl, fp}
 5d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5dc:	00000270 	andeq	r0, r0, r0, ror r2
 5e0:	20002b02 	andcs	r2, r0, r2, lsl #22
 5e4:	0000006a 	andeq	r0, r0, sl, rrx
 5e8:	40080e41 	andmi	r0, r8, r1, asr #28
 5ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5f0:	100e4101 	andne	r4, lr, r1, lsl #2
 5f4:	00070d41 	andeq	r0, r7, r1, asr #26
 5f8:	0000000c 	andeq	r0, r0, ip
 5fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 600:	7c020001 	stcvc	0, cr0, [r2], {1}
 604:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 608:	0000001c 	andeq	r0, r0, ip, lsl r0
 60c:	000005f8 	strdeq	r0, [r0], -r8
 610:	20002b6c 	andcs	r2, r0, ip, ror #22
 614:	00000028 	andeq	r0, r0, r8, lsr #32
 618:	40080e41 	andmi	r0, r8, r1, asr #28
 61c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 620:	180e4101 	stmdane	lr, {r0, r8, lr}
 624:	00070d41 	andeq	r0, r7, r1, asr #26
 628:	0000000c 	andeq	r0, r0, ip
 62c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 630:	7c020001 	stcvc	0, cr0, [r2], {1}
 634:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 638:	0000001c 	andeq	r0, r0, ip, lsl r0
 63c:	00000628 	andeq	r0, r0, r8, lsr #12
 640:	20002b94 	mulcs	r0, r4, fp
 644:	00000028 	andeq	r0, r0, r8, lsr #32
 648:	40080e41 	andmi	r0, r8, r1, asr #28
 64c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 650:	180e4101 	stmdane	lr, {r0, r8, lr}
 654:	00070d41 	andeq	r0, r7, r1, asr #26
 658:	0000000c 	andeq	r0, r0, ip
 65c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 660:	7c020001 	stcvc	0, cr0, [r2], {1}
 664:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 668:	00000018 	andeq	r0, r0, r8, lsl r0
 66c:	00000658 	andeq	r0, r0, r8, asr r6
 670:	20002bbc 			; <UNDEFINED> instruction: 0x20002bbc
 674:	00000018 	andeq	r0, r0, r8, lsl r0
 678:	40080e41 	andmi	r0, r8, r1, asr #28
 67c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 680:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 684:	00000018 	andeq	r0, r0, r8, lsl r0
 688:	00000658 	andeq	r0, r0, r8, asr r6
 68c:	20002bd4 	ldrdcs	r2, [r0], -r4
 690:	00000020 	andeq	r0, r0, r0, lsr #32
 694:	40080e41 	andmi	r0, r8, r1, asr #28
 698:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 69c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 6a0:	00000020 	andeq	r0, r0, r0, lsr #32
 6a4:	00000658 	andeq	r0, r0, r8, asr r6
 6a8:	20002bf4 	strdcs	r2, [r0], -r4
 6ac:	00000034 	andeq	r0, r0, r4, lsr r0
 6b0:	400c0e41 	andmi	r0, ip, r1, asr #28
 6b4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 6b8:	018e4002 	orreq	r4, lr, r2
 6bc:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 6c0:	0000070d 	andeq	r0, r0, sp, lsl #14
 6c4:	0000000c 	andeq	r0, r0, ip
 6c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 6cc:	7c020001 	stcvc	0, cr0, [r2], {1}
 6d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 6d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 6d8:	000006c4 	andeq	r0, r0, r4, asr #13
 6dc:	20002c28 	andcs	r2, r0, r8, lsr #24
 6e0:	00000044 	andeq	r0, r0, r4, asr #32
 6e4:	40080e41 	andmi	r0, r8, r1, asr #28
 6e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6ec:	180e4101 	stmdane	lr, {r0, r8, lr}
 6f0:	00070d41 	andeq	r0, r7, r1, asr #26
 6f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 6f8:	000006c4 	andeq	r0, r0, r4, asr #13
 6fc:	20002c6c 	andcs	r2, r0, ip, ror #24
 700:	00000050 	andeq	r0, r0, r0, asr r0
 704:	40080e41 	andmi	r0, r8, r1, asr #28
 708:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 70c:	180e4101 	stmdane	lr, {r0, r8, lr}
 710:	00070d41 	andeq	r0, r7, r1, asr #26
 714:	0000001c 	andeq	r0, r0, ip, lsl r0
 718:	000006c4 	andeq	r0, r0, r4, asr #13
 71c:	20002cbc 			; <UNDEFINED> instruction: 0x20002cbc
 720:	0000002a 	andeq	r0, r0, sl, lsr #32
 724:	40080e41 	andmi	r0, r8, r1, asr #28
 728:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 72c:	100e4101 	andne	r4, lr, r1, lsl #2
 730:	00070d41 	andeq	r0, r7, r1, asr #26
 734:	0000001c 	andeq	r0, r0, ip, lsl r0
 738:	000006c4 	andeq	r0, r0, r4, asr #13
 73c:	20002ce6 	andcs	r2, r0, r6, ror #25
 740:	0000002a 	andeq	r0, r0, sl, lsr #32
 744:	40080e41 	andmi	r0, r8, r1, asr #28
 748:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 74c:	100e4101 	andne	r4, lr, r1, lsl #2
 750:	00070d41 	andeq	r0, r7, r1, asr #26
 754:	00000020 	andeq	r0, r0, r0, lsr #32
 758:	000006c4 	andeq	r0, r0, r4, asr #13
 75c:	20002d10 	andcs	r2, r0, r0, lsl sp
 760:	00000054 	andeq	r0, r0, r4, asr r0
 764:	400c0e41 	andmi	r0, ip, r1, asr #28
 768:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 76c:	018e4002 	orreq	r4, lr, r2
 770:	41180e41 	tstmi	r8, r1, asr #28
 774:	0000070d 	andeq	r0, r0, sp, lsl #14
 778:	00000020 	andeq	r0, r0, r0, lsr #32
 77c:	000006c4 	andeq	r0, r0, r4, asr #13
 780:	20002d64 	andcs	r2, r0, r4, ror #26
 784:	00000054 	andeq	r0, r0, r4, asr r0
 788:	400c0e41 	andmi	r0, ip, r1, asr #28
 78c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 790:	018e4002 	orreq	r4, lr, r2
 794:	41180e41 	tstmi	r8, r1, asr #28
 798:	0000070d 	andeq	r0, r0, sp, lsl #14
 79c:	0000001c 	andeq	r0, r0, ip, lsl r0
 7a0:	000006c4 	andeq	r0, r0, r4, asr #13
 7a4:	20002db8 			; <UNDEFINED> instruction: 0x20002db8
 7a8:	00000030 	andeq	r0, r0, r0, lsr r0
 7ac:	40080e41 	andmi	r0, r8, r1, asr #28
 7b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7b4:	100e4101 	andne	r4, lr, r1, lsl #2
 7b8:	00070d41 	andeq	r0, r7, r1, asr #26
 7bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 7c0:	000006c4 	andeq	r0, r0, r4, asr #13
 7c4:	20002de8 	andcs	r2, r0, r8, ror #27
 7c8:	00000034 	andeq	r0, r0, r4, lsr r0
 7cc:	40080e41 	andmi	r0, r8, r1, asr #28
 7d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7d4:	100e4101 	andne	r4, lr, r1, lsl #2
 7d8:	00070d41 	andeq	r0, r7, r1, asr #26
 7dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 7e0:	000006c4 	andeq	r0, r0, r4, asr #13
 7e4:	20002e1c 	andcs	r2, r0, ip, lsl lr
 7e8:	0000003c 	andeq	r0, r0, ip, lsr r0
 7ec:	40080e41 	andmi	r0, r8, r1, asr #28
 7f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7f4:	100e4101 	andne	r4, lr, r1, lsl #2
 7f8:	00070d41 	andeq	r0, r7, r1, asr #26
 7fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 800:	000006c4 	andeq	r0, r0, r4, asr #13
 804:	20002e58 	andcs	r2, r0, r8, asr lr
 808:	00000050 	andeq	r0, r0, r0, asr r0
 80c:	40080e41 	andmi	r0, r8, r1, asr #28
 810:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 814:	180e4101 	stmdane	lr, {r0, r8, lr}
 818:	00070d41 	andeq	r0, r7, r1, asr #26
 81c:	00000018 	andeq	r0, r0, r8, lsl r0
 820:	000006c4 	andeq	r0, r0, r4, asr #13
 824:	20002ea8 	andcs	r2, r0, r8, lsr #29
 828:	0000009a 	muleq	r0, sl, r0
 82c:	40080e41 	andmi	r0, r8, r1, asr #28
 830:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 834:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 838:	00000018 	andeq	r0, r0, r8, lsl r0
 83c:	000006c4 	andeq	r0, r0, r4, asr #13
 840:	20002f42 	andcs	r2, r0, r2, asr #30
 844:	0000001a 	andeq	r0, r0, sl, lsl r0
 848:	40080e41 	andmi	r0, r8, r1, asr #28
 84c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 850:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 854:	00000018 	andeq	r0, r0, r8, lsl r0
 858:	000006c4 	andeq	r0, r0, r4, asr #13
 85c:	20002f5c 	andcs	r2, r0, ip, asr pc
 860:	00000012 	andeq	r0, r0, r2, lsl r0
 864:	40080e41 	andmi	r0, r8, r1, asr #28
 868:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 86c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 870:	00000020 	andeq	r0, r0, r0, lsr #32
 874:	000006c4 	andeq	r0, r0, r4, asr #13
 878:	20002f6e 	andcs	r2, r0, lr, ror #30
 87c:	0000006a 	andeq	r0, r0, sl, rrx
 880:	400c0e41 	andmi	r0, ip, r1, asr #28
 884:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 888:	018e4002 	orreq	r4, lr, r2
 88c:	41300e41 	teqmi	r0, r1, asr #28
 890:	0000070d 	andeq	r0, r0, sp, lsl #14
 894:	0000001c 	andeq	r0, r0, ip, lsl r0
 898:	000006c4 	andeq	r0, r0, r4, asr #13
 89c:	20002fd8 	ldrdcs	r2, [r0], -r8
 8a0:	0000005e 	andeq	r0, r0, lr, asr r0
 8a4:	40080e41 	andmi	r0, r8, r1, asr #28
 8a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8ac:	100e4101 	andne	r4, lr, r1, lsl #2
 8b0:	00070d41 	andeq	r0, r7, r1, asr #26
 8b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8b8:	000006c4 	andeq	r0, r0, r4, asr #13
 8bc:	20003036 	andcs	r3, r0, r6, lsr r0
 8c0:	0000008e 	andeq	r0, r0, lr, lsl #1
 8c4:	40080e41 	andmi	r0, r8, r1, asr #28
 8c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8cc:	200e4101 	andcs	r4, lr, r1, lsl #2
 8d0:	00070d41 	andeq	r0, r7, r1, asr #26
 8d4:	00000020 	andeq	r0, r0, r0, lsr #32
 8d8:	000006c4 	andeq	r0, r0, r4, asr #13
 8dc:	200030c4 	andcs	r3, r0, r4, asr #1
 8e0:	00000084 	andeq	r0, r0, r4, lsl #1
 8e4:	400c0e41 	andmi	r0, ip, r1, asr #28
 8e8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 8ec:	018e4002 	orreq	r4, lr, r2
 8f0:	41380e41 	teqmi	r8, r1, asr #28
 8f4:	0000070d 	andeq	r0, r0, sp, lsl #14
 8f8:	0000000c 	andeq	r0, r0, ip
 8fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 900:	7c020001 	stcvc	0, cr0, [r2], {1}
 904:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 908:	0000001c 	andeq	r0, r0, ip, lsl r0
 90c:	000008f8 	strdeq	r0, [r0], -r8
 910:	20003148 	andcs	r3, r0, r8, asr #2
 914:	0000005a 	andeq	r0, r0, sl, asr r0
 918:	40080e41 	andmi	r0, r8, r1, asr #28
 91c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 920:	180e4101 	stmdane	lr, {r0, r8, lr}
 924:	00070d41 	andeq	r0, r7, r1, asr #26
 928:	0000001c 	andeq	r0, r0, ip, lsl r0
 92c:	000008f8 	strdeq	r0, [r0], -r8
 930:	200031a2 	andcs	r3, r0, r2, lsr #3
 934:	0000003a 	andeq	r0, r0, sl, lsr r0
 938:	40080e41 	andmi	r0, r8, r1, asr #28
 93c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 940:	180e4101 	stmdane	lr, {r0, r8, lr}
 944:	00070d41 	andeq	r0, r7, r1, asr #26
 948:	0000000c 	andeq	r0, r0, ip
 94c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 950:	7c020001 	stcvc	0, cr0, [r2], {1}
 954:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 958:	0000001c 	andeq	r0, r0, ip, lsl r0
 95c:	00000948 	andeq	r0, r0, r8, asr #18
 960:	200031dc 	ldrdcs	r3, [r0], -ip
 964:	00000074 	andeq	r0, r0, r4, ror r0
 968:	40080e41 	andmi	r0, r8, r1, asr #28
 96c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 970:	180e4101 	stmdane	lr, {r0, r8, lr}
 974:	00070d41 	andeq	r0, r7, r1, asr #26
 978:	00000020 	andeq	r0, r0, r0, lsr #32
 97c:	00000948 	andeq	r0, r0, r8, asr #18
 980:	20003250 	andcs	r3, r0, r0, asr r2
 984:	00000074 	andeq	r0, r0, r4, ror r0
 988:	400c0e41 	andmi	r0, ip, r1, asr #28
 98c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 990:	018e4002 	orreq	r4, lr, r2
 994:	41180e41 	tstmi	r8, r1, asr #28
 998:	0000070d 	andeq	r0, r0, sp, lsl #14
 99c:	0000000c 	andeq	r0, r0, ip
 9a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 9a4:	7c020001 	stcvc	0, cr0, [r2], {1}
 9a8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 9ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 9b0:	0000099c 	muleq	r0, ip, r9
 9b4:	200032c4 	andcs	r3, r0, r4, asr #5
 9b8:	00000074 	andeq	r0, r0, r4, ror r0
 9bc:	40080e41 	andmi	r0, r8, r1, asr #28
 9c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 9c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 9c8:	00070d41 	andeq	r0, r7, r1, asr #26
 9cc:	00000020 	andeq	r0, r0, r0, lsr #32
 9d0:	0000099c 	muleq	r0, ip, r9
 9d4:	20003338 	andcs	r3, r0, r8, lsr r3
 9d8:	00000074 	andeq	r0, r0, r4, ror r0
 9dc:	400c0e41 	andmi	r0, ip, r1, asr #28
 9e0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 9e4:	018e4002 	orreq	r4, lr, r2
 9e8:	41180e41 	tstmi	r8, r1, asr #28
 9ec:	0000070d 	andeq	r0, r0, sp, lsl #14
 9f0:	0000000c 	andeq	r0, r0, ip
 9f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 9f8:	7c010001 	stcvc	0, cr0, [r1], {1}
 9fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a00:	0000000c 	andeq	r0, r0, ip
 a04:	000009f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 a08:	200033ad 	andcs	r3, r0, sp, lsr #7
 a0c:	000001cc 	andeq	r0, r0, ip, asr #3
