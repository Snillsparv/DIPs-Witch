
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#endif
}

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f8fa 	bl	200001fc <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:
void init_app( void ) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*portModer = 0x55555555;
20000014:	4b05      	ldr	r3, [pc, #20]	; (2000002c <init_app+0x1c>)
20000016:	4a06      	ldr	r2, [pc, #24]	; (20000030 <init_app+0x20>)
20000018:	601a      	str	r2, [r3, #0]
	set_up_DIL();
2000001a:	f003 fec9 	bl	20003db0 <set_up_DIL>
	graphic_initialize();
2000001e:	f003 f9c9 	bl	200033b4 <graphic_initialize>
	graphic_clear_screen();
20000022:	f003 f9fe 	bl	20003422 <graphic_clear_screen>
}
20000026:	46c0      	nop			; (mov r8, r8)
20000028:	46bd      	mov	sp, r7
2000002a:	bd80      	pop	{r7, pc}
2000002c:	40021000 	andmi	r1, r2, r0
20000030:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000034 <initSprites>:
sprite tempTitleLight;
sprite tempPressBlack;
sprite tempPressGray;
sprite tempPressLight;

void initSprites( void ) {
20000034:	b580      	push	{r7, lr}
20000036:	b08a      	sub	sp, #40	; 0x28
20000038:	af00      	add	r7, sp, #0
	sprite *monsterPointer = &tempMonster;
2000003a:	4b49      	ldr	r3, [pc, #292]	; (20000160 <initSprites+0x12c>)
2000003c:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(monsterPointer, monster_black_bits, monster_black_width, monster_black_height);
2000003e:	4949      	ldr	r1, [pc, #292]	; (20000164 <initSprites+0x130>)
20000040:	6a78      	ldr	r0, [r7, #36]	; 0x24
20000042:	231e      	movs	r3, #30
20000044:	221e      	movs	r2, #30
20000046:	f003 fe9f 	bl	20003d88 <load_sprite>
	monster = monsterPointer;
2000004a:	4b47      	ldr	r3, [pc, #284]	; (20000168 <initSprites+0x134>)
2000004c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000004e:	601a      	str	r2, [r3, #0]
	
	sprite *monsterPointer2 = &tempMonsterLight;
20000050:	4b46      	ldr	r3, [pc, #280]	; (2000016c <initSprites+0x138>)
20000052:	623b      	str	r3, [r7, #32]
	load_sprite(monsterPointer2, monster_light_bits, monster_light_width, monster_light_height);
20000054:	4946      	ldr	r1, [pc, #280]	; (20000170 <initSprites+0x13c>)
20000056:	6a38      	ldr	r0, [r7, #32]
20000058:	231e      	movs	r3, #30
2000005a:	221e      	movs	r2, #30
2000005c:	f003 fe94 	bl	20003d88 <load_sprite>
	monsterLight = monsterPointer2;
20000060:	4b44      	ldr	r3, [pc, #272]	; (20000174 <initSprites+0x140>)
20000062:	6a3a      	ldr	r2, [r7, #32]
20000064:	601a      	str	r2, [r3, #0]

	sprite *monsterPointer3 = &tempMonsterGray;
20000066:	4b44      	ldr	r3, [pc, #272]	; (20000178 <initSprites+0x144>)
20000068:	61fb      	str	r3, [r7, #28]
	load_sprite(monsterPointer3, monster_gray_bits, monster_gray_width, monster_gray_height);
2000006a:	4944      	ldr	r1, [pc, #272]	; (2000017c <initSprites+0x148>)
2000006c:	69f8      	ldr	r0, [r7, #28]
2000006e:	231e      	movs	r3, #30
20000070:	221e      	movs	r2, #30
20000072:	f003 fe89 	bl	20003d88 <load_sprite>
	monsterGray = monsterPointer3;
20000076:	4b42      	ldr	r3, [pc, #264]	; (20000180 <initSprites+0x14c>)
20000078:	69fa      	ldr	r2, [r7, #28]
2000007a:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempBg;
2000007c:	4b41      	ldr	r3, [pc, #260]	; (20000184 <initSprites+0x150>)
2000007e:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer4, bg_bits, bg_width, bg_height);
20000080:	4941      	ldr	r1, [pc, #260]	; (20000188 <initSprites+0x154>)
20000082:	69b8      	ldr	r0, [r7, #24]
20000084:	2340      	movs	r3, #64	; 0x40
20000086:	2280      	movs	r2, #128	; 0x80
20000088:	f003 fe7e 	bl	20003d88 <load_sprite>
	bg = pointer4;
2000008c:	4b3f      	ldr	r3, [pc, #252]	; (2000018c <initSprites+0x158>)
2000008e:	69ba      	ldr	r2, [r7, #24]
20000090:	601a      	str	r2, [r3, #0]
	
	sprite *pointer5 = &tempCastleBlack;
20000092:	4b3f      	ldr	r3, [pc, #252]	; (20000190 <initSprites+0x15c>)
20000094:	617b      	str	r3, [r7, #20]
	load_sprite(pointer5, castle_black_bits, castle_black_width, castle_black_height);
20000096:	493f      	ldr	r1, [pc, #252]	; (20000194 <initSprites+0x160>)
20000098:	6978      	ldr	r0, [r7, #20]
2000009a:	2340      	movs	r3, #64	; 0x40
2000009c:	2280      	movs	r2, #128	; 0x80
2000009e:	f003 fe73 	bl	20003d88 <load_sprite>
	castleBlack = pointer5;
200000a2:	4b3d      	ldr	r3, [pc, #244]	; (20000198 <initSprites+0x164>)
200000a4:	697a      	ldr	r2, [r7, #20]
200000a6:	601a      	str	r2, [r3, #0]
	
	sprite *pointer6 = &tempCastleGray;
200000a8:	4b3c      	ldr	r3, [pc, #240]	; (2000019c <initSprites+0x168>)
200000aa:	613b      	str	r3, [r7, #16]
	load_sprite(pointer6, castle_gray_bits, castle_black_width, castle_black_height);
200000ac:	493c      	ldr	r1, [pc, #240]	; (200001a0 <initSprites+0x16c>)
200000ae:	6938      	ldr	r0, [r7, #16]
200000b0:	2340      	movs	r3, #64	; 0x40
200000b2:	2280      	movs	r2, #128	; 0x80
200000b4:	f003 fe68 	bl	20003d88 <load_sprite>
	castleGray = pointer6;
200000b8:	4b3a      	ldr	r3, [pc, #232]	; (200001a4 <initSprites+0x170>)
200000ba:	693a      	ldr	r2, [r7, #16]
200000bc:	601a      	str	r2, [r3, #0]
	
	sprite *pointer7 = &tempCastleLight;
200000be:	4b3a      	ldr	r3, [pc, #232]	; (200001a8 <initSprites+0x174>)
200000c0:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer7, castle_light_bits, castle_black_width, castle_black_height);
200000c2:	493a      	ldr	r1, [pc, #232]	; (200001ac <initSprites+0x178>)
200000c4:	68f8      	ldr	r0, [r7, #12]
200000c6:	2340      	movs	r3, #64	; 0x40
200000c8:	2280      	movs	r2, #128	; 0x80
200000ca:	f003 fe5d 	bl	20003d88 <load_sprite>
	castleLight = pointer7;
200000ce:	4b38      	ldr	r3, [pc, #224]	; (200001b0 <initSprites+0x17c>)
200000d0:	68fa      	ldr	r2, [r7, #12]
200000d2:	601a      	str	r2, [r3, #0]
	
	sprite *pointer8 = &tempTitleLight;
200000d4:	4b37      	ldr	r3, [pc, #220]	; (200001b4 <initSprites+0x180>)
200000d6:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer8, title_light_bits, title_black_width, title_black_height);
200000d8:	4937      	ldr	r1, [pc, #220]	; (200001b8 <initSprites+0x184>)
200000da:	68b8      	ldr	r0, [r7, #8]
200000dc:	231e      	movs	r3, #30
200000de:	2232      	movs	r2, #50	; 0x32
200000e0:	f003 fe52 	bl	20003d88 <load_sprite>
	titleLight = pointer8;
200000e4:	4b35      	ldr	r3, [pc, #212]	; (200001bc <initSprites+0x188>)
200000e6:	68ba      	ldr	r2, [r7, #8]
200000e8:	601a      	str	r2, [r3, #0]
	sprite *pointer9 = &tempTitleGray;
200000ea:	4b35      	ldr	r3, [pc, #212]	; (200001c0 <initSprites+0x18c>)
200000ec:	607b      	str	r3, [r7, #4]
	load_sprite(pointer9, title_gray_bits, title_black_width, title_black_height);
200000ee:	4935      	ldr	r1, [pc, #212]	; (200001c4 <initSprites+0x190>)
200000f0:	6878      	ldr	r0, [r7, #4]
200000f2:	231e      	movs	r3, #30
200000f4:	2232      	movs	r2, #50	; 0x32
200000f6:	f003 fe47 	bl	20003d88 <load_sprite>
	titleGray = pointer9;
200000fa:	4b33      	ldr	r3, [pc, #204]	; (200001c8 <initSprites+0x194>)
200000fc:	687a      	ldr	r2, [r7, #4]
200000fe:	601a      	str	r2, [r3, #0]
	sprite *pointer10 = &tempTitleBlack;
20000100:	4b32      	ldr	r3, [pc, #200]	; (200001cc <initSprites+0x198>)
20000102:	603b      	str	r3, [r7, #0]
	load_sprite(pointer10, title_black_bits, title_black_width, title_black_height);
20000104:	4932      	ldr	r1, [pc, #200]	; (200001d0 <initSprites+0x19c>)
20000106:	6838      	ldr	r0, [r7, #0]
20000108:	231e      	movs	r3, #30
2000010a:	2232      	movs	r2, #50	; 0x32
2000010c:	f003 fe3c 	bl	20003d88 <load_sprite>
	titleBlack = pointer10;	
20000110:	4b30      	ldr	r3, [pc, #192]	; (200001d4 <initSprites+0x1a0>)
20000112:	683a      	ldr	r2, [r7, #0]
20000114:	601a      	str	r2, [r3, #0]
	
	pointer8 = &tempPressLight;
20000116:	4b30      	ldr	r3, [pc, #192]	; (200001d8 <initSprites+0x1a4>)
20000118:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer8, press_light_bits, press_black_width, press_black_height);
2000011a:	4930      	ldr	r1, [pc, #192]	; (200001dc <initSprites+0x1a8>)
2000011c:	68b8      	ldr	r0, [r7, #8]
2000011e:	2323      	movs	r3, #35	; 0x23
20000120:	223c      	movs	r2, #60	; 0x3c
20000122:	f003 fe31 	bl	20003d88 <load_sprite>
	pressLight = pointer8;
20000126:	4b2e      	ldr	r3, [pc, #184]	; (200001e0 <initSprites+0x1ac>)
20000128:	68ba      	ldr	r2, [r7, #8]
2000012a:	601a      	str	r2, [r3, #0]
	pointer9 = &tempPressGray;
2000012c:	4b2d      	ldr	r3, [pc, #180]	; (200001e4 <initSprites+0x1b0>)
2000012e:	607b      	str	r3, [r7, #4]
	load_sprite(pointer9, press_gray_bits, press_black_width, press_black_height);
20000130:	492d      	ldr	r1, [pc, #180]	; (200001e8 <initSprites+0x1b4>)
20000132:	6878      	ldr	r0, [r7, #4]
20000134:	2323      	movs	r3, #35	; 0x23
20000136:	223c      	movs	r2, #60	; 0x3c
20000138:	f003 fe26 	bl	20003d88 <load_sprite>
	pressGray = pointer9;
2000013c:	4b2b      	ldr	r3, [pc, #172]	; (200001ec <initSprites+0x1b8>)
2000013e:	687a      	ldr	r2, [r7, #4]
20000140:	601a      	str	r2, [r3, #0]
	pointer10 = &tempPressBlack;
20000142:	4b2b      	ldr	r3, [pc, #172]	; (200001f0 <initSprites+0x1bc>)
20000144:	603b      	str	r3, [r7, #0]
	load_sprite(pointer10, press_black_bits, press_black_width, press_black_height);
20000146:	492b      	ldr	r1, [pc, #172]	; (200001f4 <initSprites+0x1c0>)
20000148:	6838      	ldr	r0, [r7, #0]
2000014a:	2323      	movs	r3, #35	; 0x23
2000014c:	223c      	movs	r2, #60	; 0x3c
2000014e:	f003 fe1b 	bl	20003d88 <load_sprite>
	pressBlack = pointer10;	
20000152:	4b29      	ldr	r3, [pc, #164]	; (200001f8 <initSprites+0x1c4>)
20000154:	683a      	ldr	r2, [r7, #0]
20000156:	601a      	str	r2, [r3, #0]
	
	
}
20000158:	46c0      	nop			; (mov r8, r8)
2000015a:	46bd      	mov	sp, r7
2000015c:	b00a      	add	sp, #40	; 0x28
2000015e:	bd80      	pop	{r7, pc}
20000160:	200049c0 	andcs	r4, r0, r0, asr #19
20000164:	200072b0 			; <UNDEFINED> instruction: 0x200072b0
20000168:	20004994 	mulcs	r0, r4, r9
2000016c:	20004a18 	andcs	r4, r0, r8, lsl sl
20000170:	20007328 	andcs	r7, r0, r8, lsr #6
20000174:	20004a40 	andcs	r4, r0, r0, asr #20
20000178:	200049e0 	andcs	r4, r0, r0, ror #19
2000017c:	200073a0 	andcs	r7, r0, r0, lsr #7
20000180:	20004a54 	andcs	r4, r0, r4, asr sl
20000184:	20004a58 	andcs	r4, r0, r8, asr sl
20000188:	200085dc 	ldrdcs	r8, [r0], -ip
2000018c:	200049dc 	ldrdcs	r4, [r0], -ip
20000190:	20004998 	mulcs	r0, r8, r9
20000194:	20007760 	andcs	r7, r0, r0, ror #14
20000198:	200049bc 			; <UNDEFINED> instruction: 0x200049bc
2000019c:	20004a34 	andcs	r4, r0, r4, lsr sl
200001a0:	20007b60 	andcs	r7, r0, r0, ror #22
200001a4:	20004a48 	andcs	r4, r0, r8, asr #20
200001a8:	20004a08 	andcs	r4, r0, r8, lsl #20
200001ac:	20007f60 	andcs	r7, r0, r0, ror #30
200001b0:	200049f8 	strdcs	r4, [r0], -r8
200001b4:	200049ec 	andcs	r4, r0, ip, ror #19
200001b8:	20008360 	andcs	r8, r0, r0, ror #6
200001bc:	20004a44 	andcs	r4, r0, r4, asr #20
200001c0:	200049b0 			; <UNDEFINED> instruction: 0x200049b0
200001c4:	20008434 	andcs	r8, r0, r4, lsr r4
200001c8:	20004a30 	andcs	r4, r0, r0, lsr sl
200001cc:	200049d0 	ldrdcs	r4, [r0], -r0
200001d0:	20008508 	andcs	r8, r0, r8, lsl #10
200001d4:	20004a64 	andcs	r4, r0, r4, ror #20
200001d8:	200049fc 	strdcs	r4, [r0], -ip
200001dc:	20007530 	andcs	r7, r0, r0, lsr r5
200001e0:	200049cc 	andcs	r4, r0, ip, asr #19
200001e4:	200049a4 	andcs	r4, r0, r4, lsr #19
200001e8:	20007648 	andcs	r7, r0, r8, asr #12
200001ec:	20004a14 	andcs	r4, r0, r4, lsl sl
200001f0:	20004a24 	andcs	r4, r0, r4, lsr #20
200001f4:	20007418 	andcs	r7, r0, r8, lsl r4
200001f8:	20004a50 	andcs	r4, r0, r0, asr sl

200001fc <main>:
	
int counter = 0;
int current_screen = START_SCREEN;
void main(void)
{
200001fc:	b590      	push	{r4, r7, lr}
200001fe:	4cfe      	ldr	r4, [pc, #1016]	; (200005f8 <main+0x3fc>)
20000200:	44a5      	add	sp, r4
20000202:	af00      	add	r7, sp, #0
	
	init_app();	
20000204:	f7ff ff04 	bl	20000010 <init_app>
	initSprites();
20000208:	f7ff ff14 	bl	20000034 <initSprites>
	
	GameObject monsterObj;
	Image monsterImage;
	Image monsterImages[] = {monsterImage};
2000020c:	4bfb      	ldr	r3, [pc, #1004]	; (200005fc <main+0x400>)
2000020e:	18fb      	adds	r3, r7, r3
20000210:	228e      	movs	r2, #142	; 0x8e
20000212:	00d2      	lsls	r2, r2, #3
20000214:	18ba      	adds	r2, r7, r2
20000216:	ca13      	ldmia	r2!, {r0, r1, r4}
20000218:	c313      	stmia	r3!, {r0, r1, r4}
	monsterObj.images = monsterImages;
2000021a:	4bf9      	ldr	r3, [pc, #996]	; (20000600 <main+0x404>)
2000021c:	18fb      	adds	r3, r7, r3
2000021e:	4af7      	ldr	r2, [pc, #988]	; (200005fc <main+0x400>)
20000220:	18ba      	adds	r2, r7, r2
20000222:	601a      	str	r2, [r3, #0]
	load_image(&monsterObj.images[0], monster, monsterGray, monsterLight);
20000224:	4bf6      	ldr	r3, [pc, #984]	; (20000600 <main+0x404>)
20000226:	18fb      	adds	r3, r7, r3
20000228:	6818      	ldr	r0, [r3, #0]
2000022a:	4bf6      	ldr	r3, [pc, #984]	; (20000604 <main+0x408>)
2000022c:	6819      	ldr	r1, [r3, #0]
2000022e:	4bf6      	ldr	r3, [pc, #984]	; (20000608 <main+0x40c>)
20000230:	681a      	ldr	r2, [r3, #0]
20000232:	4bf6      	ldr	r3, [pc, #984]	; (2000060c <main+0x410>)
20000234:	681b      	ldr	r3, [r3, #0]
20000236:	f003 fd93 	bl	20003d60 <load_image>
	monsterObj.xPos = 30;
2000023a:	4bf1      	ldr	r3, [pc, #964]	; (20000600 <main+0x404>)
2000023c:	18fb      	adds	r3, r7, r3
2000023e:	221e      	movs	r2, #30
20000240:	605a      	str	r2, [r3, #4]
	monsterObj.yPos = 4;
20000242:	4bef      	ldr	r3, [pc, #956]	; (20000600 <main+0x404>)
20000244:	18fb      	adds	r3, r7, r3
20000246:	2204      	movs	r2, #4
20000248:	609a      	str	r2, [r3, #8]
	monsterObj.current_frame = 0;
2000024a:	4bed      	ldr	r3, [pc, #948]	; (20000600 <main+0x404>)
2000024c:	18fb      	adds	r3, r7, r3
2000024e:	2200      	movs	r2, #0
20000250:	615a      	str	r2, [r3, #20]
	monsterObj.update = playerUpdate;
20000252:	4beb      	ldr	r3, [pc, #940]	; (20000600 <main+0x404>)
20000254:	18fb      	adds	r3, r7, r3
20000256:	4aee      	ldr	r2, [pc, #952]	; (20000610 <main+0x414>)
20000258:	60da      	str	r2, [r3, #12]
	
	GameObject titleObj;
	Image titleImage;
	Image titleImages[] = {titleImage};
2000025a:	2385      	movs	r3, #133	; 0x85
2000025c:	00db      	lsls	r3, r3, #3
2000025e:	18fb      	adds	r3, r7, r3
20000260:	4aec      	ldr	r2, [pc, #944]	; (20000614 <main+0x418>)
20000262:	18ba      	adds	r2, r7, r2
20000264:	ca13      	ldmia	r2!, {r0, r1, r4}
20000266:	c313      	stmia	r3!, {r0, r1, r4}
	titleObj.images = titleImages;
20000268:	2388      	movs	r3, #136	; 0x88
2000026a:	00db      	lsls	r3, r3, #3
2000026c:	18fb      	adds	r3, r7, r3
2000026e:	2285      	movs	r2, #133	; 0x85
20000270:	00d2      	lsls	r2, r2, #3
20000272:	18ba      	adds	r2, r7, r2
20000274:	601a      	str	r2, [r3, #0]
	load_image(&titleObj.images[0], titleBlack, titleGray, titleLight);
20000276:	2388      	movs	r3, #136	; 0x88
20000278:	00db      	lsls	r3, r3, #3
2000027a:	18fb      	adds	r3, r7, r3
2000027c:	6818      	ldr	r0, [r3, #0]
2000027e:	4be6      	ldr	r3, [pc, #920]	; (20000618 <main+0x41c>)
20000280:	6819      	ldr	r1, [r3, #0]
20000282:	4be6      	ldr	r3, [pc, #920]	; (2000061c <main+0x420>)
20000284:	681a      	ldr	r2, [r3, #0]
20000286:	4be6      	ldr	r3, [pc, #920]	; (20000620 <main+0x424>)
20000288:	681b      	ldr	r3, [r3, #0]
2000028a:	f003 fd69 	bl	20003d60 <load_image>
	titleObj.xPos = 1;
2000028e:	2388      	movs	r3, #136	; 0x88
20000290:	00db      	lsls	r3, r3, #3
20000292:	18fb      	adds	r3, r7, r3
20000294:	2201      	movs	r2, #1
20000296:	605a      	str	r2, [r3, #4]
	titleObj.yPos = -40;
20000298:	2388      	movs	r3, #136	; 0x88
2000029a:	00db      	lsls	r3, r3, #3
2000029c:	18fb      	adds	r3, r7, r3
2000029e:	2228      	movs	r2, #40	; 0x28
200002a0:	4252      	negs	r2, r2
200002a2:	609a      	str	r2, [r3, #8]
	titleObj.current_frame = 0;
200002a4:	2388      	movs	r3, #136	; 0x88
200002a6:	00db      	lsls	r3, r3, #3
200002a8:	18fb      	adds	r3, r7, r3
200002aa:	2200      	movs	r2, #0
200002ac:	615a      	str	r2, [r3, #20]
	
	GameObject pressObj;
	Image pressImage;
	Image pressImages[] = {pressImage};
200002ae:	23fb      	movs	r3, #251	; 0xfb
200002b0:	009b      	lsls	r3, r3, #2
200002b2:	18fb      	adds	r3, r7, r3
200002b4:	22fe      	movs	r2, #254	; 0xfe
200002b6:	0092      	lsls	r2, r2, #2
200002b8:	18ba      	adds	r2, r7, r2
200002ba:	ca13      	ldmia	r2!, {r0, r1, r4}
200002bc:	c313      	stmia	r3!, {r0, r1, r4}
	pressObj.images = pressImages;
200002be:	4bd9      	ldr	r3, [pc, #868]	; (20000624 <main+0x428>)
200002c0:	18fb      	adds	r3, r7, r3
200002c2:	22fb      	movs	r2, #251	; 0xfb
200002c4:	0092      	lsls	r2, r2, #2
200002c6:	18ba      	adds	r2, r7, r2
200002c8:	601a      	str	r2, [r3, #0]
	load_image(&pressObj.images[0], pressBlack, pressLight, pressGray);
200002ca:	4bd6      	ldr	r3, [pc, #856]	; (20000624 <main+0x428>)
200002cc:	18fb      	adds	r3, r7, r3
200002ce:	6818      	ldr	r0, [r3, #0]
200002d0:	4bd5      	ldr	r3, [pc, #852]	; (20000628 <main+0x42c>)
200002d2:	6819      	ldr	r1, [r3, #0]
200002d4:	4bd5      	ldr	r3, [pc, #852]	; (2000062c <main+0x430>)
200002d6:	681a      	ldr	r2, [r3, #0]
200002d8:	4bd5      	ldr	r3, [pc, #852]	; (20000630 <main+0x434>)
200002da:	681b      	ldr	r3, [r3, #0]
200002dc:	f003 fd40 	bl	20003d60 <load_image>
	pressObj.xPos = 65-30;
200002e0:	4bd0      	ldr	r3, [pc, #832]	; (20000624 <main+0x428>)
200002e2:	18fb      	adds	r3, r7, r3
200002e4:	2223      	movs	r2, #35	; 0x23
200002e6:	605a      	str	r2, [r3, #4]
	pressObj.yPos = 29-15;
200002e8:	4bce      	ldr	r3, [pc, #824]	; (20000624 <main+0x428>)
200002ea:	18fb      	adds	r3, r7, r3
200002ec:	220e      	movs	r2, #14
200002ee:	609a      	str	r2, [r3, #8]
	pressObj.current_frame = 0;
200002f0:	4bcc      	ldr	r3, [pc, #816]	; (20000624 <main+0x428>)
200002f2:	18fb      	adds	r3, r7, r3
200002f4:	2200      	movs	r2, #0
200002f6:	615a      	str	r2, [r3, #20]
	
	GameObject castleObj;
	Image castleImage;
	Image castleImages[] = {castleImage};
200002f8:	4bce      	ldr	r3, [pc, #824]	; (20000634 <main+0x438>)
200002fa:	2298      	movs	r2, #152	; 0x98
200002fc:	00d2      	lsls	r2, r2, #3
200002fe:	18ba      	adds	r2, r7, r2
20000300:	18d1      	adds	r1, r2, r3
20000302:	4bcd      	ldr	r3, [pc, #820]	; (20000638 <main+0x43c>)
20000304:	2298      	movs	r2, #152	; 0x98
20000306:	00d2      	lsls	r2, r2, #3
20000308:	18ba      	adds	r2, r7, r2
2000030a:	18d2      	adds	r2, r2, r3
2000030c:	000b      	movs	r3, r1
2000030e:	ca13      	ldmia	r2!, {r0, r1, r4}
20000310:	c313      	stmia	r3!, {r0, r1, r4}
	castleObj.images = castleImages;
20000312:	23f2      	movs	r3, #242	; 0xf2
20000314:	009b      	lsls	r3, r3, #2
20000316:	18fb      	adds	r3, r7, r3
20000318:	22ec      	movs	r2, #236	; 0xec
2000031a:	0092      	lsls	r2, r2, #2
2000031c:	18ba      	adds	r2, r7, r2
2000031e:	601a      	str	r2, [r3, #0]
	load_image(&castleObj.images[0], castleBlack, castleGray, castleLight);
20000320:	23f2      	movs	r3, #242	; 0xf2
20000322:	009b      	lsls	r3, r3, #2
20000324:	18fb      	adds	r3, r7, r3
20000326:	6818      	ldr	r0, [r3, #0]
20000328:	4bc4      	ldr	r3, [pc, #784]	; (2000063c <main+0x440>)
2000032a:	6819      	ldr	r1, [r3, #0]
2000032c:	4bc4      	ldr	r3, [pc, #784]	; (20000640 <main+0x444>)
2000032e:	681a      	ldr	r2, [r3, #0]
20000330:	4bc4      	ldr	r3, [pc, #784]	; (20000644 <main+0x448>)
20000332:	681b      	ldr	r3, [r3, #0]
20000334:	f003 fd14 	bl	20003d60 <load_image>
	castleObj.xPos = 1;
20000338:	23f2      	movs	r3, #242	; 0xf2
2000033a:	009b      	lsls	r3, r3, #2
2000033c:	18fb      	adds	r3, r7, r3
2000033e:	2201      	movs	r2, #1
20000340:	605a      	str	r2, [r3, #4]
	castleObj.yPos = 1;
20000342:	23f2      	movs	r3, #242	; 0xf2
20000344:	009b      	lsls	r3, r3, #2
20000346:	18fb      	adds	r3, r7, r3
20000348:	2201      	movs	r2, #1
2000034a:	609a      	str	r2, [r3, #8]
	castleObj.current_frame = 0;
2000034c:	23f2      	movs	r3, #242	; 0xf2
2000034e:	009b      	lsls	r3, r3, #2
20000350:	18fb      	adds	r3, r7, r3
20000352:	2200      	movs	r2, #0
20000354:	615a      	str	r2, [r3, #20]

	GameObject roger;
	init_roger( &roger );
20000356:	23e3      	movs	r3, #227	; 0xe3
20000358:	009b      	lsls	r3, r3, #2
2000035a:	18fb      	adds	r3, r7, r3
2000035c:	0018      	movs	r0, r3
2000035e:	f004 f9cd 	bl	200046fc <init_roger>
	roger.xPos = 1;
20000362:	4bb9      	ldr	r3, [pc, #740]	; (20000648 <main+0x44c>)
20000364:	2298      	movs	r2, #152	; 0x98
20000366:	00d2      	lsls	r2, r2, #3
20000368:	4694      	mov	ip, r2
2000036a:	44bc      	add	ip, r7
2000036c:	4463      	add	r3, ip
2000036e:	2201      	movs	r2, #1
20000370:	605a      	str	r2, [r3, #4]
	roger.yPos = 1;
20000372:	4bb5      	ldr	r3, [pc, #724]	; (20000648 <main+0x44c>)
20000374:	2298      	movs	r2, #152	; 0x98
20000376:	00d2      	lsls	r2, r2, #3
20000378:	4694      	mov	ip, r2
2000037a:	44bc      	add	ip, r7
2000037c:	4463      	add	r3, ip
2000037e:	2201      	movs	r2, #1
20000380:	609a      	str	r2, [r3, #8]
	
	GameObject indoors;
	init_indoors( &indoors );
20000382:	23da      	movs	r3, #218	; 0xda
20000384:	009b      	lsls	r3, r3, #2
20000386:	18fb      	adds	r3, r7, r3
20000388:	0018      	movs	r0, r3
2000038a:	f004 f85b 	bl	20004444 <init_indoors>
	indoors.xPos = 1;
2000038e:	4baf      	ldr	r3, [pc, #700]	; (2000064c <main+0x450>)
20000390:	2298      	movs	r2, #152	; 0x98
20000392:	00d2      	lsls	r2, r2, #3
20000394:	4694      	mov	ip, r2
20000396:	44bc      	add	ip, r7
20000398:	4463      	add	r3, ip
2000039a:	2201      	movs	r2, #1
2000039c:	605a      	str	r2, [r3, #4]
	indoors.yPos = 1;
2000039e:	4bab      	ldr	r3, [pc, #684]	; (2000064c <main+0x450>)
200003a0:	2298      	movs	r2, #152	; 0x98
200003a2:	00d2      	lsls	r2, r2, #3
200003a4:	4694      	mov	ip, r2
200003a6:	44bc      	add	ip, r7
200003a8:	4463      	add	r3, ip
200003aa:	2201      	movs	r2, #1
200003ac:	609a      	str	r2, [r3, #8]
	
	GameObject indoors2;
	init_indoors2( &indoors2 );
200003ae:	23d1      	movs	r3, #209	; 0xd1
200003b0:	009b      	lsls	r3, r3, #2
200003b2:	18fb      	adds	r3, r7, r3
200003b4:	0018      	movs	r0, r3
200003b6:	f004 f8b9 	bl	2000452c <init_indoors2>
	indoors2.xPos = 1;
200003ba:	4ba5      	ldr	r3, [pc, #660]	; (20000650 <main+0x454>)
200003bc:	2298      	movs	r2, #152	; 0x98
200003be:	00d2      	lsls	r2, r2, #3
200003c0:	4694      	mov	ip, r2
200003c2:	44bc      	add	ip, r7
200003c4:	4463      	add	r3, ip
200003c6:	2201      	movs	r2, #1
200003c8:	605a      	str	r2, [r3, #4]
	indoors2.yPos = 1;
200003ca:	4ba1      	ldr	r3, [pc, #644]	; (20000650 <main+0x454>)
200003cc:	2298      	movs	r2, #152	; 0x98
200003ce:	00d2      	lsls	r2, r2, #3
200003d0:	4694      	mov	ip, r2
200003d2:	44bc      	add	ip, r7
200003d4:	4463      	add	r3, ip
200003d6:	2201      	movs	r2, #1
200003d8:	609a      	str	r2, [r3, #8]
	
	GameObject trophy;
	init_trophy( &trophy );
200003da:	23c8      	movs	r3, #200	; 0xc8
200003dc:	009b      	lsls	r3, r3, #2
200003de:	18fb      	adds	r3, r7, r3
200003e0:	0018      	movs	r0, r3
200003e2:	f004 f917 	bl	20004614 <init_trophy>

	
	GameObject hair;
	init_flame(&hair);
200003e6:	23bf      	movs	r3, #191	; 0xbf
200003e8:	009b      	lsls	r3, r3, #2
200003ea:	18fb      	adds	r3, r7, r3
200003ec:	0018      	movs	r0, r3
200003ee:	f002 fa7d 	bl	200028ec <init_flame>
	hair.xPos = 40;
200003f2:	4b98      	ldr	r3, [pc, #608]	; (20000654 <main+0x458>)
200003f4:	2298      	movs	r2, #152	; 0x98
200003f6:	00d2      	lsls	r2, r2, #3
200003f8:	4694      	mov	ip, r2
200003fa:	44bc      	add	ip, r7
200003fc:	4463      	add	r3, ip
200003fe:	2228      	movs	r2, #40	; 0x28
20000400:	605a      	str	r2, [r3, #4]
	hair.yPos = 10;
20000402:	4b94      	ldr	r3, [pc, #592]	; (20000654 <main+0x458>)
20000404:	2298      	movs	r2, #152	; 0x98
20000406:	00d2      	lsls	r2, r2, #3
20000408:	4694      	mov	ip, r2
2000040a:	44bc      	add	ip, r7
2000040c:	4463      	add	r3, ip
2000040e:	220a      	movs	r2, #10
20000410:	609a      	str	r2, [r3, #8]
	hair.update = gameObjectUpdate;
20000412:	4b90      	ldr	r3, [pc, #576]	; (20000654 <main+0x458>)
20000414:	2298      	movs	r2, #152	; 0x98
20000416:	00d2      	lsls	r2, r2, #3
20000418:	4694      	mov	ip, r2
2000041a:	44bc      	add	ip, r7
2000041c:	4463      	add	r3, ip
2000041e:	4a8e      	ldr	r2, [pc, #568]	; (20000658 <main+0x45c>)
20000420:	60da      	str	r2, [r3, #12]
	
	GameObject bird;
	init_bird( &bird );
20000422:	23b6      	movs	r3, #182	; 0xb6
20000424:	009b      	lsls	r3, r3, #2
20000426:	18fb      	adds	r3, r7, r3
20000428:	0018      	movs	r0, r3
2000042a:	f001 fe0b 	bl	20002044 <init_bird>
	bird.xPos = 180;
2000042e:	4b8b      	ldr	r3, [pc, #556]	; (2000065c <main+0x460>)
20000430:	2298      	movs	r2, #152	; 0x98
20000432:	00d2      	lsls	r2, r2, #3
20000434:	4694      	mov	ip, r2
20000436:	44bc      	add	ip, r7
20000438:	4463      	add	r3, ip
2000043a:	22b4      	movs	r2, #180	; 0xb4
2000043c:	605a      	str	r2, [r3, #4]
	bird.yPos = 40;
2000043e:	4b87      	ldr	r3, [pc, #540]	; (2000065c <main+0x460>)
20000440:	2298      	movs	r2, #152	; 0x98
20000442:	00d2      	lsls	r2, r2, #3
20000444:	4694      	mov	ip, r2
20000446:	44bc      	add	ip, r7
20000448:	4463      	add	r3, ip
2000044a:	2228      	movs	r2, #40	; 0x28
2000044c:	609a      	str	r2, [r3, #8]
	bird.update = gameObjectUpdate;
2000044e:	4b83      	ldr	r3, [pc, #524]	; (2000065c <main+0x460>)
20000450:	2298      	movs	r2, #152	; 0x98
20000452:	00d2      	lsls	r2, r2, #3
20000454:	4694      	mov	ip, r2
20000456:	44bc      	add	ip, r7
20000458:	4463      	add	r3, ip
2000045a:	4a7f      	ldr	r2, [pc, #508]	; (20000658 <main+0x45c>)
2000045c:	60da      	str	r2, [r3, #12]
	
	GameObject boom;
	init_boom( &boom );
2000045e:	23ad      	movs	r3, #173	; 0xad
20000460:	009b      	lsls	r3, r3, #2
20000462:	18fb      	adds	r3, r7, r3
20000464:	0018      	movs	r0, r3
20000466:	f002 fbfd 	bl	20002c64 <init_boom>
	boom.update = gameObjectUpdate;
2000046a:	4b7d      	ldr	r3, [pc, #500]	; (20000660 <main+0x464>)
2000046c:	2298      	movs	r2, #152	; 0x98
2000046e:	00d2      	lsls	r2, r2, #3
20000470:	4694      	mov	ip, r2
20000472:	44bc      	add	ip, r7
20000474:	4463      	add	r3, ip
20000476:	4a78      	ldr	r2, [pc, #480]	; (20000658 <main+0x45c>)
20000478:	60da      	str	r2, [r3, #12]
	
	GameObject DIP;
	init_DIP( &DIP );
2000047a:	23a4      	movs	r3, #164	; 0xa4
2000047c:	009b      	lsls	r3, r3, #2
2000047e:	18fb      	adds	r3, r7, r3
20000480:	0018      	movs	r0, r3
20000482:	f002 f847 	bl	20002514 <init_DIP>
	DIP.update = DIPUpdate;
20000486:	4b77      	ldr	r3, [pc, #476]	; (20000664 <main+0x468>)
20000488:	2298      	movs	r2, #152	; 0x98
2000048a:	00d2      	lsls	r2, r2, #3
2000048c:	4694      	mov	ip, r2
2000048e:	44bc      	add	ip, r7
20000490:	4463      	add	r3, ip
20000492:	4a75      	ldr	r2, [pc, #468]	; (20000668 <main+0x46c>)
20000494:	60da      	str	r2, [r3, #12]
	
	GameObject player;
	init_witch( &player );
20000496:	239b      	movs	r3, #155	; 0x9b
20000498:	009b      	lsls	r3, r3, #2
2000049a:	18fb      	adds	r3, r7, r3
2000049c:	0018      	movs	r0, r3
2000049e:	f001 ff1d 	bl	200022dc <init_witch>
	player.xPos = 3;
200004a2:	4b72      	ldr	r3, [pc, #456]	; (2000066c <main+0x470>)
200004a4:	2298      	movs	r2, #152	; 0x98
200004a6:	00d2      	lsls	r2, r2, #3
200004a8:	4694      	mov	ip, r2
200004aa:	44bc      	add	ip, r7
200004ac:	4463      	add	r3, ip
200004ae:	2203      	movs	r2, #3
200004b0:	605a      	str	r2, [r3, #4]
	player.yPos = LIMIT_DOWN - 1; //player position
200004b2:	4b6e      	ldr	r3, [pc, #440]	; (2000066c <main+0x470>)
200004b4:	2298      	movs	r2, #152	; 0x98
200004b6:	00d2      	lsls	r2, r2, #3
200004b8:	4694      	mov	ip, r2
200004ba:	44bc      	add	ip, r7
200004bc:	4463      	add	r3, ip
200004be:	2226      	movs	r2, #38	; 0x26
200004c0:	609a      	str	r2, [r3, #8]
	player.update = playerUpdate;
200004c2:	4b6a      	ldr	r3, [pc, #424]	; (2000066c <main+0x470>)
200004c4:	2298      	movs	r2, #152	; 0x98
200004c6:	00d2      	lsls	r2, r2, #3
200004c8:	4694      	mov	ip, r2
200004ca:	44bc      	add	ip, r7
200004cc:	4463      	add	r3, ip
200004ce:	4a50      	ldr	r2, [pc, #320]	; (20000610 <main+0x414>)
200004d0:	60da      	str	r2, [r3, #12]
	
	GameObject fire2;
	init_fire( &fire2 );
200004d2:	2392      	movs	r3, #146	; 0x92
200004d4:	009b      	lsls	r3, r3, #2
200004d6:	18fb      	adds	r3, r7, r3
200004d8:	0018      	movs	r0, r3
200004da:	f001 fafb 	bl	20001ad4 <init_fire>
	GameObject fire3;
	init_fire( &fire3 );
200004de:	2389      	movs	r3, #137	; 0x89
200004e0:	009b      	lsls	r3, r3, #2
200004e2:	18fb      	adds	r3, r7, r3
200004e4:	0018      	movs	r0, r3
200004e6:	f001 faf5 	bl	20001ad4 <init_fire>
	GameObject fire4;
	init_fire( &fire4 );
200004ea:	2380      	movs	r3, #128	; 0x80
200004ec:	009b      	lsls	r3, r3, #2
200004ee:	18fb      	adds	r3, r7, r3
200004f0:	0018      	movs	r0, r3
200004f2:	f001 faef 	bl	20001ad4 <init_fire>
	GameObject fire1;
	init_fire( &fire1 );
200004f6:	23ee      	movs	r3, #238	; 0xee
200004f8:	005b      	lsls	r3, r3, #1
200004fa:	18fb      	adds	r3, r7, r3
200004fc:	0018      	movs	r0, r3
200004fe:	f001 fae9 	bl	20001ad4 <init_fire>
	
	GameObject fire1_indoors;
	init_fire( &fire1_indoors );
20000502:	23dc      	movs	r3, #220	; 0xdc
20000504:	005b      	lsls	r3, r3, #1
20000506:	18fb      	adds	r3, r7, r3
20000508:	0018      	movs	r0, r3
2000050a:	f001 fae3 	bl	20001ad4 <init_fire>
	fire1_indoors.xPos = 50;		//FIRE1_INDO
2000050e:	4b58      	ldr	r3, [pc, #352]	; (20000670 <main+0x474>)
20000510:	2298      	movs	r2, #152	; 0x98
20000512:	00d2      	lsls	r2, r2, #3
20000514:	4694      	mov	ip, r2
20000516:	44bc      	add	ip, r7
20000518:	4463      	add	r3, ip
2000051a:	2232      	movs	r2, #50	; 0x32
2000051c:	605a      	str	r2, [r3, #4]
	fire1_indoors.yPos = 64-12-7;
2000051e:	4b54      	ldr	r3, [pc, #336]	; (20000670 <main+0x474>)
20000520:	2298      	movs	r2, #152	; 0x98
20000522:	00d2      	lsls	r2, r2, #3
20000524:	4694      	mov	ip, r2
20000526:	44bc      	add	ip, r7
20000528:	4463      	add	r3, ip
2000052a:	222d      	movs	r2, #45	; 0x2d
2000052c:	609a      	str	r2, [r3, #8]
	fire1_indoors.update = gameObjectUpdate;
2000052e:	4b50      	ldr	r3, [pc, #320]	; (20000670 <main+0x474>)
20000530:	2298      	movs	r2, #152	; 0x98
20000532:	00d2      	lsls	r2, r2, #3
20000534:	4694      	mov	ip, r2
20000536:	44bc      	add	ip, r7
20000538:	4463      	add	r3, ip
2000053a:	4a47      	ldr	r2, [pc, #284]	; (20000658 <main+0x45c>)
2000053c:	60da      	str	r2, [r3, #12]
	GameObject fire2_indoors;
	init_fire( &fire2_indoors );
2000053e:	23ca      	movs	r3, #202	; 0xca
20000540:	005b      	lsls	r3, r3, #1
20000542:	18fb      	adds	r3, r7, r3
20000544:	0018      	movs	r0, r3
20000546:	f001 fac5 	bl	20001ad4 <init_fire>
	fire2_indoors.update = gameObjectUpdate;
2000054a:	4b4a      	ldr	r3, [pc, #296]	; (20000674 <main+0x478>)
2000054c:	2298      	movs	r2, #152	; 0x98
2000054e:	00d2      	lsls	r2, r2, #3
20000550:	4694      	mov	ip, r2
20000552:	44bc      	add	ip, r7
20000554:	4463      	add	r3, ip
20000556:	4a40      	ldr	r2, [pc, #256]	; (20000658 <main+0x45c>)
20000558:	60da      	str	r2, [r3, #12]
	GameObject fire3_indoors;
	init_fire( &fire3_indoors );
2000055a:	23b8      	movs	r3, #184	; 0xb8
2000055c:	005b      	lsls	r3, r3, #1
2000055e:	18fb      	adds	r3, r7, r3
20000560:	0018      	movs	r0, r3
20000562:	f001 fab7 	bl	20001ad4 <init_fire>
	fire3_indoors.update = gameObjectUpdate;
20000566:	4b44      	ldr	r3, [pc, #272]	; (20000678 <main+0x47c>)
20000568:	2298      	movs	r2, #152	; 0x98
2000056a:	00d2      	lsls	r2, r2, #3
2000056c:	4694      	mov	ip, r2
2000056e:	44bc      	add	ip, r7
20000570:	4463      	add	r3, ip
20000572:	4a39      	ldr	r2, [pc, #228]	; (20000658 <main+0x45c>)
20000574:	60da      	str	r2, [r3, #12]
	GameObject fires[] = {fire1_indoors, fire2_indoors, fire3_indoors};
20000576:	4b41      	ldr	r3, [pc, #260]	; (2000067c <main+0x480>)
20000578:	2298      	movs	r2, #152	; 0x98
2000057a:	00d2      	lsls	r2, r2, #3
2000057c:	18ba      	adds	r2, r7, r2
2000057e:	18d1      	adds	r1, r2, r3
20000580:	4b3b      	ldr	r3, [pc, #236]	; (20000670 <main+0x474>)
20000582:	2298      	movs	r2, #152	; 0x98
20000584:	00d2      	lsls	r2, r2, #3
20000586:	18ba      	adds	r2, r7, r2
20000588:	18d2      	adds	r2, r2, r3
2000058a:	000b      	movs	r3, r1
2000058c:	ca13      	ldmia	r2!, {r0, r1, r4}
2000058e:	c313      	stmia	r3!, {r0, r1, r4}
20000590:	ca13      	ldmia	r2!, {r0, r1, r4}
20000592:	c313      	stmia	r3!, {r0, r1, r4}
20000594:	ca13      	ldmia	r2!, {r0, r1, r4}
20000596:	c313      	stmia	r3!, {r0, r1, r4}
20000598:	4b38      	ldr	r3, [pc, #224]	; (2000067c <main+0x480>)
2000059a:	2298      	movs	r2, #152	; 0x98
2000059c:	00d2      	lsls	r2, r2, #3
2000059e:	4694      	mov	ip, r2
200005a0:	44bc      	add	ip, r7
200005a2:	4463      	add	r3, ip
200005a4:	4a33      	ldr	r2, [pc, #204]	; (20000674 <main+0x478>)
200005a6:	2198      	movs	r1, #152	; 0x98
200005a8:	00c9      	lsls	r1, r1, #3
200005aa:	468c      	mov	ip, r1
200005ac:	44bc      	add	ip, r7
200005ae:	4462      	add	r2, ip
200005b0:	3324      	adds	r3, #36	; 0x24
200005b2:	ca13      	ldmia	r2!, {r0, r1, r4}
200005b4:	c313      	stmia	r3!, {r0, r1, r4}
200005b6:	ca13      	ldmia	r2!, {r0, r1, r4}
200005b8:	c313      	stmia	r3!, {r0, r1, r4}
200005ba:	ca13      	ldmia	r2!, {r0, r1, r4}
200005bc:	c313      	stmia	r3!, {r0, r1, r4}
200005be:	4b2f      	ldr	r3, [pc, #188]	; (2000067c <main+0x480>)
200005c0:	2298      	movs	r2, #152	; 0x98
200005c2:	00d2      	lsls	r2, r2, #3
200005c4:	4694      	mov	ip, r2
200005c6:	44bc      	add	ip, r7
200005c8:	4463      	add	r3, ip
200005ca:	4a2b      	ldr	r2, [pc, #172]	; (20000678 <main+0x47c>)
200005cc:	2198      	movs	r1, #152	; 0x98
200005ce:	00c9      	lsls	r1, r1, #3
200005d0:	468c      	mov	ip, r1
200005d2:	44bc      	add	ip, r7
200005d4:	4462      	add	r2, ip
200005d6:	3348      	adds	r3, #72	; 0x48
200005d8:	ca13      	ldmia	r2!, {r0, r1, r4}
200005da:	c313      	stmia	r3!, {r0, r1, r4}
200005dc:	ca13      	ldmia	r2!, {r0, r1, r4}
200005de:	c313      	stmia	r3!, {r0, r1, r4}
200005e0:	ca13      	ldmia	r2!, {r0, r1, r4}
200005e2:	c313      	stmia	r3!, {r0, r1, r4}
	
	
	fire2.xPos = 98;
200005e4:	4b26      	ldr	r3, [pc, #152]	; (20000680 <main+0x484>)
200005e6:	2298      	movs	r2, #152	; 0x98
200005e8:	00d2      	lsls	r2, r2, #3
200005ea:	4694      	mov	ip, r2
200005ec:	44bc      	add	ip, r7
200005ee:	4463      	add	r3, ip
200005f0:	2262      	movs	r2, #98	; 0x62
200005f2:	605a      	str	r2, [r3, #4]
200005f4:	e046      	b.n	20000684 <main+0x488>
200005f6:	46c0      	nop			; (mov r8, r8)
200005f8:	fffffb3c 			; <UNDEFINED> instruction: 0xfffffb3c
200005fc:	00000464 	andeq	r0, r0, r4, ror #8
20000600:	0000047c 	andeq	r0, r0, ip, ror r4
20000604:	20004994 	mulcs	r0, r4, r9
20000608:	20004a54 	andcs	r4, r0, r4, asr sl
2000060c:	20004a40 	andcs	r4, r0, r0, asr #20
20000610:	20001c35 	andcs	r1, r0, r5, lsr ip
20000614:	00000434 	andeq	r0, r0, r4, lsr r4
20000618:	20004a64 	andcs	r4, r0, r4, ror #20
2000061c:	20004a30 	andcs	r4, r0, r0, lsr sl
20000620:	20004a44 	andcs	r4, r0, r4, asr #20
20000624:	00000404 	andeq	r0, r0, r4, lsl #8
20000628:	20004a50 	andcs	r4, r0, r0, asr sl
2000062c:	200049cc 	andcs	r4, r0, ip, asr #19
20000630:	20004a14 	andcs	r4, r0, r4, lsl sl
20000634:	fffffef0 			; <UNDEFINED> instruction: 0xfffffef0
20000638:	fffffefc 			; <UNDEFINED> instruction: 0xfffffefc
2000063c:	200049bc 			; <UNDEFINED> instruction: 0x200049bc
20000640:	20004a48 	andcs	r4, r0, r8, asr #20
20000644:	200049f8 	strdcs	r4, [r0], -r8
20000648:	fffffecc 			; <UNDEFINED> instruction: 0xfffffecc
2000064c:	fffffea8 			; <UNDEFINED> instruction: 0xfffffea8
20000650:	fffffe84 			; <UNDEFINED> instruction: 0xfffffe84
20000654:	fffffe3c 			; <UNDEFINED> instruction: 0xfffffe3c
20000658:	20001909 	andcs	r1, r0, r9, lsl #18
2000065c:	fffffe18 			; <UNDEFINED> instruction: 0xfffffe18
20000660:	fffffdf4 			; <UNDEFINED> instruction: 0xfffffdf4
20000664:	fffffdd0 			; <UNDEFINED> instruction: 0xfffffdd0
20000668:	20002635 	andcs	r2, r0, r5, lsr r6
2000066c:	fffffdac 			; <UNDEFINED> instruction: 0xfffffdac
20000670:	fffffcf8 			; <UNDEFINED> instruction: 0xfffffcf8
20000674:	fffffcd4 			; <UNDEFINED> instruction: 0xfffffcd4
20000678:	fffffcb0 			; <UNDEFINED> instruction: 0xfffffcb0
2000067c:	fffffc44 			; <UNDEFINED> instruction: 0xfffffc44
20000680:	fffffd88 			; <UNDEFINED> instruction: 0xfffffd88
	fire2.yPos = 26-12;
20000684:	4be9      	ldr	r3, [pc, #932]	; (20000a2c <main+0x830>)
20000686:	2298      	movs	r2, #152	; 0x98
20000688:	00d2      	lsls	r2, r2, #3
2000068a:	4694      	mov	ip, r2
2000068c:	44bc      	add	ip, r7
2000068e:	4463      	add	r3, ip
20000690:	220e      	movs	r2, #14
20000692:	609a      	str	r2, [r3, #8]
	fire3.xPos = 115;
20000694:	4be6      	ldr	r3, [pc, #920]	; (20000a30 <main+0x834>)
20000696:	2298      	movs	r2, #152	; 0x98
20000698:	00d2      	lsls	r2, r2, #3
2000069a:	4694      	mov	ip, r2
2000069c:	44bc      	add	ip, r7
2000069e:	4463      	add	r3, ip
200006a0:	2273      	movs	r2, #115	; 0x73
200006a2:	605a      	str	r2, [r3, #4]
	fire3.yPos = 34-12;
200006a4:	4be2      	ldr	r3, [pc, #904]	; (20000a30 <main+0x834>)
200006a6:	2298      	movs	r2, #152	; 0x98
200006a8:	00d2      	lsls	r2, r2, #3
200006aa:	4694      	mov	ip, r2
200006ac:	44bc      	add	ip, r7
200006ae:	4463      	add	r3, ip
200006b0:	2216      	movs	r2, #22
200006b2:	609a      	str	r2, [r3, #8]
	
	fire1.xPos = 85;
200006b4:	4bdf      	ldr	r3, [pc, #892]	; (20000a34 <main+0x838>)
200006b6:	2298      	movs	r2, #152	; 0x98
200006b8:	00d2      	lsls	r2, r2, #3
200006ba:	4694      	mov	ip, r2
200006bc:	44bc      	add	ip, r7
200006be:	4463      	add	r3, ip
200006c0:	2255      	movs	r2, #85	; 0x55
200006c2:	605a      	str	r2, [r3, #4]
	fire1.yPos = 23-12;
200006c4:	4bdb      	ldr	r3, [pc, #876]	; (20000a34 <main+0x838>)
200006c6:	2298      	movs	r2, #152	; 0x98
200006c8:	00d2      	lsls	r2, r2, #3
200006ca:	4694      	mov	ip, r2
200006cc:	44bc      	add	ip, r7
200006ce:	4463      	add	r3, ip
200006d0:	220b      	movs	r2, #11
200006d2:	609a      	str	r2, [r3, #8]
	fire4.xPos = 71;
200006d4:	4bd8      	ldr	r3, [pc, #864]	; (20000a38 <main+0x83c>)
200006d6:	2298      	movs	r2, #152	; 0x98
200006d8:	00d2      	lsls	r2, r2, #3
200006da:	4694      	mov	ip, r2
200006dc:	44bc      	add	ip, r7
200006de:	4463      	add	r3, ip
200006e0:	2247      	movs	r2, #71	; 0x47
200006e2:	605a      	str	r2, [r3, #4]
	fire4.yPos = 27-11;
200006e4:	4bd4      	ldr	r3, [pc, #848]	; (20000a38 <main+0x83c>)
200006e6:	2298      	movs	r2, #152	; 0x98
200006e8:	00d2      	lsls	r2, r2, #3
200006ea:	4694      	mov	ip, r2
200006ec:	44bc      	add	ip, r7
200006ee:	4463      	add	r3, ip
200006f0:	2210      	movs	r2, #16
200006f2:	609a      	str	r2, [r3, #8]
	//draw_game_object(&castleObj);
	
	fire2.animation_speed = 2;
200006f4:	4bcd      	ldr	r3, [pc, #820]	; (20000a2c <main+0x830>)
200006f6:	2298      	movs	r2, #152	; 0x98
200006f8:	00d2      	lsls	r2, r2, #3
200006fa:	4694      	mov	ip, r2
200006fc:	44bc      	add	ip, r7
200006fe:	4463      	add	r3, ip
20000700:	2202      	movs	r2, #2
20000702:	61da      	str	r2, [r3, #28]
	fire3.animation_speed = 2;
20000704:	4bca      	ldr	r3, [pc, #808]	; (20000a30 <main+0x834>)
20000706:	2298      	movs	r2, #152	; 0x98
20000708:	00d2      	lsls	r2, r2, #3
2000070a:	4694      	mov	ip, r2
2000070c:	44bc      	add	ip, r7
2000070e:	4463      	add	r3, ip
20000710:	2202      	movs	r2, #2
20000712:	61da      	str	r2, [r3, #28]
	fire1.animation_speed = 2;
20000714:	4bc7      	ldr	r3, [pc, #796]	; (20000a34 <main+0x838>)
20000716:	2298      	movs	r2, #152	; 0x98
20000718:	00d2      	lsls	r2, r2, #3
2000071a:	4694      	mov	ip, r2
2000071c:	44bc      	add	ip, r7
2000071e:	4463      	add	r3, ip
20000720:	2202      	movs	r2, #2
20000722:	61da      	str	r2, [r3, #28]
	fire4.animation_speed = 2;
20000724:	4bc4      	ldr	r3, [pc, #784]	; (20000a38 <main+0x83c>)
20000726:	2298      	movs	r2, #152	; 0x98
20000728:	00d2      	lsls	r2, r2, #3
2000072a:	4694      	mov	ip, r2
2000072c:	44bc      	add	ip, r7
2000072e:	4463      	add	r3, ip
20000730:	2202      	movs	r2, #2
20000732:	61da      	str	r2, [r3, #28]
	
	fire2.update = gameObjectUpdate;
20000734:	4bbd      	ldr	r3, [pc, #756]	; (20000a2c <main+0x830>)
20000736:	2298      	movs	r2, #152	; 0x98
20000738:	00d2      	lsls	r2, r2, #3
2000073a:	4694      	mov	ip, r2
2000073c:	44bc      	add	ip, r7
2000073e:	4463      	add	r3, ip
20000740:	4abe      	ldr	r2, [pc, #760]	; (20000a3c <main+0x840>)
20000742:	60da      	str	r2, [r3, #12]
	fire3.update = gameObjectUpdate;
20000744:	4bba      	ldr	r3, [pc, #744]	; (20000a30 <main+0x834>)
20000746:	2298      	movs	r2, #152	; 0x98
20000748:	00d2      	lsls	r2, r2, #3
2000074a:	4694      	mov	ip, r2
2000074c:	44bc      	add	ip, r7
2000074e:	4463      	add	r3, ip
20000750:	4aba      	ldr	r2, [pc, #744]	; (20000a3c <main+0x840>)
20000752:	60da      	str	r2, [r3, #12]
	fire1.update = gameObjectUpdate;
20000754:	4bb7      	ldr	r3, [pc, #732]	; (20000a34 <main+0x838>)
20000756:	2298      	movs	r2, #152	; 0x98
20000758:	00d2      	lsls	r2, r2, #3
2000075a:	4694      	mov	ip, r2
2000075c:	44bc      	add	ip, r7
2000075e:	4463      	add	r3, ip
20000760:	4ab6      	ldr	r2, [pc, #728]	; (20000a3c <main+0x840>)
20000762:	60da      	str	r2, [r3, #12]
	fire4.update = gameObjectUpdate;
20000764:	4bb4      	ldr	r3, [pc, #720]	; (20000a38 <main+0x83c>)
20000766:	2298      	movs	r2, #152	; 0x98
20000768:	00d2      	lsls	r2, r2, #3
2000076a:	4694      	mov	ip, r2
2000076c:	44bc      	add	ip, r7
2000076e:	4463      	add	r3, ip
20000770:	4ab2      	ldr	r2, [pc, #712]	; (20000a3c <main+0x840>)
20000772:	60da      	str	r2, [r3, #12]
	SlowText text8;
	SlowText text9;
	SlowText text10;
	SlowText text11;
	SlowText text12;
	init_slow_text(&text_kra, "*KRA!* *KRA!*", "   ", 1);
20000774:	4ab2      	ldr	r2, [pc, #712]	; (20000a40 <main+0x844>)
20000776:	49b3      	ldr	r1, [pc, #716]	; (20000a44 <main+0x848>)
20000778:	23f0      	movs	r3, #240	; 0xf0
2000077a:	18f8      	adds	r0, r7, r3
2000077c:	2301      	movs	r3, #1
2000077e:	f003 fe0a 	bl	20004396 <init_slow_text>
	init_slow_text(&text1, "For centuries the", "DILs-witches have", 1);
20000782:	4ab1      	ldr	r2, [pc, #708]	; (20000a48 <main+0x84c>)
20000784:	49b1      	ldr	r1, [pc, #708]	; (20000a4c <main+0x850>)
20000786:	23dc      	movs	r3, #220	; 0xdc
20000788:	18f8      	adds	r0, r7, r3
2000078a:	2301      	movs	r3, #1
2000078c:	f003 fe03 	bl	20004396 <init_slow_text>
	init_slow_text(&text2, "coiled in fear,", "    ", 1);
20000790:	4aaf      	ldr	r2, [pc, #700]	; (20000a50 <main+0x854>)
20000792:	49b0      	ldr	r1, [pc, #704]	; (20000a54 <main+0x858>)
20000794:	23c8      	movs	r3, #200	; 0xc8
20000796:	18f8      	adds	r0, r7, r3
20000798:	2301      	movs	r3, #1
2000079a:	f003 fdfc 	bl	20004396 <init_slow_text>
	init_slow_text(&text3, "whenever they hear", "that a DIPs-witch", 1);
2000079e:	4aae      	ldr	r2, [pc, #696]	; (20000a58 <main+0x85c>)
200007a0:	49ae      	ldr	r1, [pc, #696]	; (20000a5c <main+0x860>)
200007a2:	23b4      	movs	r3, #180	; 0xb4
200007a4:	18f8      	adds	r0, r7, r3
200007a6:	2301      	movs	r3, #1
200007a8:	f003 fdf5 	bl	20004396 <init_slow_text>
	init_slow_text(&text4, "is near.", "   ", 1);
200007ac:	4aa4      	ldr	r2, [pc, #656]	; (20000a40 <main+0x844>)
200007ae:	49ac      	ldr	r1, [pc, #688]	; (20000a60 <main+0x864>)
200007b0:	23a0      	movs	r3, #160	; 0xa0
200007b2:	18f8      	adds	r0, r7, r3
200007b4:	2301      	movs	r3, #1
200007b6:	f003 fdee 	bl	20004396 <init_slow_text>
	init_slow_text(&text5, "So it is quite", "surprising, finding", 1);
200007ba:	4aaa      	ldr	r2, [pc, #680]	; (20000a64 <main+0x868>)
200007bc:	49aa      	ldr	r1, [pc, #680]	; (20000a68 <main+0x86c>)
200007be:	238c      	movs	r3, #140	; 0x8c
200007c0:	18f8      	adds	r0, r7, r3
200007c2:	2301      	movs	r3, #1
200007c4:	f003 fde7 	bl	20004396 <init_slow_text>
	init_slow_text(&text6, "you here,", "    ", 1);
200007c8:	4aa1      	ldr	r2, [pc, #644]	; (20000a50 <main+0x854>)
200007ca:	49a8      	ldr	r1, [pc, #672]	; (20000a6c <main+0x870>)
200007cc:	2378      	movs	r3, #120	; 0x78
200007ce:	18f8      	adds	r0, r7, r3
200007d0:	2301      	movs	r3, #1
200007d2:	f003 fde0 	bl	20004396 <init_slow_text>
	init_slow_text(&text7, "queen Daffo of DILs,", "heir to king Lear.", 1);
200007d6:	4aa6      	ldr	r2, [pc, #664]	; (20000a70 <main+0x874>)
200007d8:	49a6      	ldr	r1, [pc, #664]	; (20000a74 <main+0x878>)
200007da:	2364      	movs	r3, #100	; 0x64
200007dc:	18f8      	adds	r0, r7, r3
200007de:	2301      	movs	r3, #1
200007e0:	f003 fdd9 	bl	20004396 <init_slow_text>
	init_slow_text(&text8, "But maybe you're", "tempted, to loot", 1);
200007e4:	4aa4      	ldr	r2, [pc, #656]	; (20000a78 <main+0x87c>)
200007e6:	49a5      	ldr	r1, [pc, #660]	; (20000a7c <main+0x880>)
200007e8:	2350      	movs	r3, #80	; 0x50
200007ea:	18f8      	adds	r0, r7, r3
200007ec:	2301      	movs	r3, #1
200007ee:	f003 fdd2 	bl	20004396 <init_slow_text>
	init_slow_text(&text9, "from the riches,", "    ", 1);
200007f2:	4a97      	ldr	r2, [pc, #604]	; (20000a50 <main+0x854>)
200007f4:	49a2      	ldr	r1, [pc, #648]	; (20000a80 <main+0x884>)
200007f6:	233c      	movs	r3, #60	; 0x3c
200007f8:	18f8      	adds	r0, r7, r3
200007fa:	2301      	movs	r3, #1
200007fc:	f003 fdcb 	bl	20004396 <init_slow_text>
	init_slow_text(&text12, "wicked DIPs-witches.", "    ", 1);
20000800:	4a93      	ldr	r2, [pc, #588]	; (20000a50 <main+0x854>)
20000802:	49a0      	ldr	r1, [pc, #640]	; (20000a84 <main+0x888>)
20000804:	0038      	movs	r0, r7
20000806:	2301      	movs	r3, #1
20000808:	f003 fdc5 	bl	20004396 <init_slow_text>
	init_slow_text(&text10, "so grippily trea-", "sured by", 1);
2000080c:	4a9e      	ldr	r2, [pc, #632]	; (20000a88 <main+0x88c>)
2000080e:	499f      	ldr	r1, [pc, #636]	; (20000a8c <main+0x890>)
20000810:	2328      	movs	r3, #40	; 0x28
20000812:	18f8      	adds	r0, r7, r3
20000814:	2301      	movs	r3, #1
20000816:	f003 fdbe 	bl	20004396 <init_slow_text>
	init_slow_text(&text11, "Enter, brave witch,", "- reset the switch!", 1);
2000081a:	4a9d      	ldr	r2, [pc, #628]	; (20000a90 <main+0x894>)
2000081c:	499d      	ldr	r1, [pc, #628]	; (20000a94 <main+0x898>)
2000081e:	2314      	movs	r3, #20
20000820:	18f8      	adds	r0, r7, r3
20000822:	2301      	movs	r3, #1
20000824:	f003 fdb7 	bl	20004396 <init_slow_text>
	//ascii_write_part("Yeeaaah!!!", "This is working! :)", 5, 10);
	set_up_ascii();
20000828:	f003 fc92 	bl	20004150 <set_up_ascii>
	set_up_DIL();
2000082c:	f003 fac0 	bl	20003db0 <set_up_DIL>
	clear_ascii();
20000830:	f003 fc97 	bl	20004162 <clear_ascii>
	
	int is_climbing = 0;
20000834:	2300      	movs	r3, #0
20000836:	4a98      	ldr	r2, [pc, #608]	; (20000a98 <main+0x89c>)
20000838:	18ba      	adds	r2, r7, r2
2000083a:	6013      	str	r3, [r2, #0]
	int has_climbed = 0;
2000083c:	2300      	movs	r3, #0
2000083e:	2297      	movs	r2, #151	; 0x97
20000840:	00d2      	lsls	r2, r2, #3
20000842:	18ba      	adds	r2, r7, r2
20000844:	6013      	str	r3, [r2, #0]
	int game_over = 0;
20000846:	2300      	movs	r3, #0
20000848:	4a94      	ldr	r2, [pc, #592]	; (20000a9c <main+0x8a0>)
2000084a:	18ba      	adds	r2, r7, r2
2000084c:	6013      	str	r3, [r2, #0]
	int game_over_adder = 0;
2000084e:	2300      	movs	r3, #0
20000850:	2296      	movs	r2, #150	; 0x96
20000852:	00d2      	lsls	r2, r2, #3
20000854:	18ba      	adds	r2, r7, r2
20000856:	6013      	str	r3, [r2, #0]
	int no_DIP = 0;
20000858:	2300      	movs	r3, #0
2000085a:	4a91      	ldr	r2, [pc, #580]	; (20000aa0 <main+0x8a4>)
2000085c:	18ba      	adds	r2, r7, r2
2000085e:	6013      	str	r3, [r2, #0]
	int exploding = 0;
20000860:	2300      	movs	r3, #0
20000862:	2295      	movs	r2, #149	; 0x95
20000864:	00d2      	lsls	r2, r2, #3
20000866:	18ba      	adds	r2, r7, r2
20000868:	6013      	str	r3, [r2, #0]
	int first = 1;
2000086a:	2301      	movs	r3, #1
2000086c:	4a8d      	ldr	r2, [pc, #564]	; (20000aa4 <main+0x8a8>)
2000086e:	18ba      	adds	r2, r7, r2
20000870:	6013      	str	r3, [r2, #0]
	int lastFireTrigger = 0;
20000872:	2300      	movs	r3, #0
20000874:	2294      	movs	r2, #148	; 0x94
20000876:	00d2      	lsls	r2, r2, #3
20000878:	18ba      	adds	r2, r7, r2
2000087a:	6013      	str	r3, [r2, #0]
		
	current_screen = WIN_SCREEN; //RESET_GAME;
2000087c:	4b8a      	ldr	r3, [pc, #552]	; (20000aa8 <main+0x8ac>)
2000087e:	2204      	movs	r2, #4
20000880:	601a      	str	r2, [r3, #0]
	
	//Game loop
	while(1) {
			
		switch(current_screen) {
20000882:	4b89      	ldr	r3, [pc, #548]	; (20000aa8 <main+0x8ac>)
20000884:	681b      	ldr	r3, [r3, #0]
20000886:	2b0a      	cmp	r3, #10
20000888:	d8fb      	bhi.n	20000882 <main+0x686>
2000088a:	009a      	lsls	r2, r3, #2
2000088c:	4b87      	ldr	r3, [pc, #540]	; (20000aac <main+0x8b0>)
2000088e:	18d3      	adds	r3, r2, r3
20000890:	681b      	ldr	r3, [r3, #0]
20000892:	469f      	mov	pc, r3
			
			case SWITCH_LOCK: //before

				while(read_DIL() == 0){
					draw_game_object(&pressObj);
20000894:	4b86      	ldr	r3, [pc, #536]	; (20000ab0 <main+0x8b4>)
20000896:	18fb      	adds	r3, r7, r3
20000898:	0018      	movs	r0, r3
2000089a:	f003 f9eb 	bl	20003c74 <draw_game_object>
					show_frame(1);
2000089e:	2001      	movs	r0, #1
200008a0:	f003 fa29 	bl	20003cf6 <show_frame>
				while(read_DIL() == 0){
200008a4:	f003 fa90 	bl	20003dc8 <read_DIL>
200008a8:	1e03      	subs	r3, r0, #0
200008aa:	d0f3      	beq.n	20000894 <main+0x698>
				}
				
				counter = 0;
200008ac:	4b81      	ldr	r3, [pc, #516]	; (20000ab4 <main+0x8b8>)
200008ae:	2200      	movs	r2, #0
200008b0:	601a      	str	r2, [r3, #0]
				current_screen = START_SCREEN;
200008b2:	4b7d      	ldr	r3, [pc, #500]	; (20000aa8 <main+0x8ac>)
200008b4:	2201      	movs	r2, #1
200008b6:	601a      	str	r2, [r3, #0]
				break;
200008b8:	f000 ffeb 	bl	20001892 <main+0x1696>
			
			
			case START_SCREEN: //outside
				
				counter++;
200008bc:	4b7d      	ldr	r3, [pc, #500]	; (20000ab4 <main+0x8b8>)
200008be:	681b      	ldr	r3, [r3, #0]
200008c0:	1c5a      	adds	r2, r3, #1
200008c2:	4b7c      	ldr	r3, [pc, #496]	; (20000ab4 <main+0x8b8>)
200008c4:	601a      	str	r2, [r3, #0]
				
				if(titleObj.yPos < 1) {
200008c6:	2388      	movs	r3, #136	; 0x88
200008c8:	00db      	lsls	r3, r3, #3
200008ca:	18fb      	adds	r3, r7, r3
200008cc:	689b      	ldr	r3, [r3, #8]
200008ce:	2b00      	cmp	r3, #0
200008d0:	dc08      	bgt.n	200008e4 <main+0x6e8>
					titleObj.yPos++;
200008d2:	2388      	movs	r3, #136	; 0x88
200008d4:	00db      	lsls	r3, r3, #3
200008d6:	18fb      	adds	r3, r7, r3
200008d8:	689b      	ldr	r3, [r3, #8]
200008da:	1c5a      	adds	r2, r3, #1
200008dc:	2388      	movs	r3, #136	; 0x88
200008de:	00db      	lsls	r3, r3, #3
200008e0:	18fb      	adds	r3, r7, r3
200008e2:	609a      	str	r2, [r3, #8]
				}
				
				draw_game_object(&castleObj);
200008e4:	23f2      	movs	r3, #242	; 0xf2
200008e6:	009b      	lsls	r3, r3, #2
200008e8:	18fb      	adds	r3, r7, r3
200008ea:	0018      	movs	r0, r3
200008ec:	f003 f9c2 	bl	20003c74 <draw_game_object>
				draw_game_object(&fire2);
200008f0:	2392      	movs	r3, #146	; 0x92
200008f2:	009b      	lsls	r3, r3, #2
200008f4:	18fb      	adds	r3, r7, r3
200008f6:	0018      	movs	r0, r3
200008f8:	f003 f9bc 	bl	20003c74 <draw_game_object>
				draw_game_object(&fire3);
200008fc:	2389      	movs	r3, #137	; 0x89
200008fe:	009b      	lsls	r3, r3, #2
20000900:	18fb      	adds	r3, r7, r3
20000902:	0018      	movs	r0, r3
20000904:	f003 f9b6 	bl	20003c74 <draw_game_object>
				draw_game_object(&fire1);
20000908:	23ee      	movs	r3, #238	; 0xee
2000090a:	005b      	lsls	r3, r3, #1
2000090c:	18fb      	adds	r3, r7, r3
2000090e:	0018      	movs	r0, r3
20000910:	f003 f9b0 	bl	20003c74 <draw_game_object>
				draw_game_object(&fire4);
20000914:	2380      	movs	r3, #128	; 0x80
20000916:	009b      	lsls	r3, r3, #2
20000918:	18fb      	adds	r3, r7, r3
2000091a:	0018      	movs	r0, r3
2000091c:	f003 f9aa 	bl	20003c74 <draw_game_object>
				draw_game_object(&titleObj);
20000920:	2388      	movs	r3, #136	; 0x88
20000922:	00db      	lsls	r3, r3, #3
20000924:	18fb      	adds	r3, r7, r3
20000926:	0018      	movs	r0, r3
20000928:	f003 f9a4 	bl	20003c74 <draw_game_object>
				draw_game_object(&bird);
2000092c:	23b6      	movs	r3, #182	; 0xb6
2000092e:	009b      	lsls	r3, r3, #2
20000930:	18fb      	adds	r3, r7, r3
20000932:	0018      	movs	r0, r3
20000934:	f003 f99e 	bl	20003c74 <draw_game_object>
				show_frame(1);
20000938:	2001      	movs	r0, #1
2000093a:	f003 f9dc 	bl	20003cf6 <show_frame>
				
				static int long_text = 40;
				static int short_text = 20;
				static int delay_until_text = 130;
				
				if (counter < delay_until_text - 55 && counter > delay_until_text - 90)
2000093e:	4b5e      	ldr	r3, [pc, #376]	; (20000ab8 <main+0x8bc>)
20000940:	681b      	ldr	r3, [r3, #0]
20000942:	3b37      	subs	r3, #55	; 0x37
20000944:	001a      	movs	r2, r3
20000946:	4b5b      	ldr	r3, [pc, #364]	; (20000ab4 <main+0x8b8>)
20000948:	681b      	ldr	r3, [r3, #0]
2000094a:	429a      	cmp	r2, r3
2000094c:	dd13      	ble.n	20000976 <main+0x77a>
2000094e:	4b5a      	ldr	r3, [pc, #360]	; (20000ab8 <main+0x8bc>)
20000950:	681b      	ldr	r3, [r3, #0]
20000952:	3b5a      	subs	r3, #90	; 0x5a
20000954:	001a      	movs	r2, r3
20000956:	4b57      	ldr	r3, [pc, #348]	; (20000ab4 <main+0x8b8>)
20000958:	681b      	ldr	r3, [r3, #0]
2000095a:	429a      	cmp	r2, r3
2000095c:	da0b      	bge.n	20000976 <main+0x77a>
					text_kra.display(&text_kra, 20);
2000095e:	4b57      	ldr	r3, [pc, #348]	; (20000abc <main+0x8c0>)
20000960:	2298      	movs	r2, #152	; 0x98
20000962:	00d2      	lsls	r2, r2, #3
20000964:	4694      	mov	ip, r2
20000966:	44bc      	add	ip, r7
20000968:	4463      	add	r3, ip
2000096a:	691b      	ldr	r3, [r3, #16]
2000096c:	22f0      	movs	r2, #240	; 0xf0
2000096e:	18ba      	adds	r2, r7, r2
20000970:	2114      	movs	r1, #20
20000972:	0010      	movs	r0, r2
20000974:	4798      	blx	r3
				if (counter == delay_until_text - 25)
20000976:	4b50      	ldr	r3, [pc, #320]	; (20000ab8 <main+0x8bc>)
20000978:	681b      	ldr	r3, [r3, #0]
2000097a:	3b19      	subs	r3, #25
2000097c:	001a      	movs	r2, r3
2000097e:	4b4d      	ldr	r3, [pc, #308]	; (20000ab4 <main+0x8b8>)
20000980:	681b      	ldr	r3, [r3, #0]
20000982:	429a      	cmp	r2, r3
20000984:	d101      	bne.n	2000098a <main+0x78e>
					clear_ascii();
20000986:	f003 fbec 	bl	20004162 <clear_ascii>
				
				if (counter < delay_until_text);
2000098a:	4b4a      	ldr	r3, [pc, #296]	; (20000ab4 <main+0x8b8>)
2000098c:	681a      	ldr	r2, [r3, #0]
2000098e:	4b4a      	ldr	r3, [pc, #296]	; (20000ab8 <main+0x8bc>)
20000990:	681b      	ldr	r3, [r3, #0]
20000992:	429a      	cmp	r2, r3
20000994:	da00      	bge.n	20000998 <main+0x79c>
20000996:	e1c5      	b.n	20000d24 <main+0xb28>
				else if (counter < delay_until_text + 1*long_text)
20000998:	4b47      	ldr	r3, [pc, #284]	; (20000ab8 <main+0x8bc>)
2000099a:	681a      	ldr	r2, [r3, #0]
2000099c:	4b48      	ldr	r3, [pc, #288]	; (20000ac0 <main+0x8c4>)
2000099e:	681b      	ldr	r3, [r3, #0]
200009a0:	18d2      	adds	r2, r2, r3
200009a2:	4b44      	ldr	r3, [pc, #272]	; (20000ab4 <main+0x8b8>)
200009a4:	681b      	ldr	r3, [r3, #0]
200009a6:	429a      	cmp	r2, r3
200009a8:	dd0c      	ble.n	200009c4 <main+0x7c8>
					text1.display(&text1, 20);
200009aa:	4b46      	ldr	r3, [pc, #280]	; (20000ac4 <main+0x8c8>)
200009ac:	2298      	movs	r2, #152	; 0x98
200009ae:	00d2      	lsls	r2, r2, #3
200009b0:	4694      	mov	ip, r2
200009b2:	44bc      	add	ip, r7
200009b4:	4463      	add	r3, ip
200009b6:	691b      	ldr	r3, [r3, #16]
200009b8:	22dc      	movs	r2, #220	; 0xdc
200009ba:	18ba      	adds	r2, r7, r2
200009bc:	2114      	movs	r1, #20
200009be:	0010      	movs	r0, r2
200009c0:	4798      	blx	r3
200009c2:	e1af      	b.n	20000d24 <main+0xb28>
				else if(counter < delay_until_text + 1*long_text + 1*short_text)
200009c4:	4b3c      	ldr	r3, [pc, #240]	; (20000ab8 <main+0x8bc>)
200009c6:	681a      	ldr	r2, [r3, #0]
200009c8:	4b3d      	ldr	r3, [pc, #244]	; (20000ac0 <main+0x8c4>)
200009ca:	681b      	ldr	r3, [r3, #0]
200009cc:	18d2      	adds	r2, r2, r3
200009ce:	4b3e      	ldr	r3, [pc, #248]	; (20000ac8 <main+0x8cc>)
200009d0:	681b      	ldr	r3, [r3, #0]
200009d2:	18d2      	adds	r2, r2, r3
200009d4:	4b37      	ldr	r3, [pc, #220]	; (20000ab4 <main+0x8b8>)
200009d6:	681b      	ldr	r3, [r3, #0]
200009d8:	429a      	cmp	r2, r3
200009da:	dd0c      	ble.n	200009f6 <main+0x7fa>
					text2.display(&text2, 20);
200009dc:	4b3b      	ldr	r3, [pc, #236]	; (20000acc <main+0x8d0>)
200009de:	2298      	movs	r2, #152	; 0x98
200009e0:	00d2      	lsls	r2, r2, #3
200009e2:	4694      	mov	ip, r2
200009e4:	44bc      	add	ip, r7
200009e6:	4463      	add	r3, ip
200009e8:	691b      	ldr	r3, [r3, #16]
200009ea:	22c8      	movs	r2, #200	; 0xc8
200009ec:	18ba      	adds	r2, r7, r2
200009ee:	2114      	movs	r1, #20
200009f0:	0010      	movs	r0, r2
200009f2:	4798      	blx	r3
200009f4:	e196      	b.n	20000d24 <main+0xb28>
				else if(counter < delay_until_text + 2*long_text + 1*short_text)
200009f6:	4b32      	ldr	r3, [pc, #200]	; (20000ac0 <main+0x8c4>)
200009f8:	681b      	ldr	r3, [r3, #0]
200009fa:	005a      	lsls	r2, r3, #1
200009fc:	4b2e      	ldr	r3, [pc, #184]	; (20000ab8 <main+0x8bc>)
200009fe:	681b      	ldr	r3, [r3, #0]
20000a00:	18d2      	adds	r2, r2, r3
20000a02:	4b31      	ldr	r3, [pc, #196]	; (20000ac8 <main+0x8cc>)
20000a04:	681b      	ldr	r3, [r3, #0]
20000a06:	18d2      	adds	r2, r2, r3
20000a08:	4b2a      	ldr	r3, [pc, #168]	; (20000ab4 <main+0x8b8>)
20000a0a:	681b      	ldr	r3, [r3, #0]
20000a0c:	429a      	cmp	r2, r3
20000a0e:	dd61      	ble.n	20000ad4 <main+0x8d8>
					text3.display(&text3, 20);
20000a10:	4b2f      	ldr	r3, [pc, #188]	; (20000ad0 <main+0x8d4>)
20000a12:	2298      	movs	r2, #152	; 0x98
20000a14:	00d2      	lsls	r2, r2, #3
20000a16:	4694      	mov	ip, r2
20000a18:	44bc      	add	ip, r7
20000a1a:	4463      	add	r3, ip
20000a1c:	691b      	ldr	r3, [r3, #16]
20000a1e:	22b4      	movs	r2, #180	; 0xb4
20000a20:	18ba      	adds	r2, r7, r2
20000a22:	2114      	movs	r1, #20
20000a24:	0010      	movs	r0, r2
20000a26:	4798      	blx	r3
20000a28:	e17c      	b.n	20000d24 <main+0xb28>
20000a2a:	46c0      	nop			; (mov r8, r8)
20000a2c:	fffffd88 			; <UNDEFINED> instruction: 0xfffffd88
20000a30:	fffffd64 			; <UNDEFINED> instruction: 0xfffffd64
20000a34:	fffffd1c 			; <UNDEFINED> instruction: 0xfffffd1c
20000a38:	fffffd40 			; <UNDEFINED> instruction: 0xfffffd40
20000a3c:	20001909 	andcs	r1, r0, r9, lsl #18
20000a40:	2000f4c0 	andcs	pc, r0, r0, asr #9
20000a44:	2000f4c4 	andcs	pc, r0, r4, asr #9
20000a48:	2000f4d4 	ldrdcs	pc, [r0], -r4
20000a4c:	2000f4e8 	andcs	pc, r0, r8, ror #9
20000a50:	2000f4fc 	strdcs	pc, [r0], -ip
20000a54:	2000f504 	andcs	pc, r0, r4, lsl #10
20000a58:	2000f514 	andcs	pc, r0, r4, lsl r5	; <UNPREDICTABLE>
20000a5c:	2000f528 	andcs	pc, r0, r8, lsr #10
20000a60:	2000f53c 	andcs	pc, r0, ip, lsr r5	; <UNPREDICTABLE>
20000a64:	2000f548 	andcs	pc, r0, r8, asr #10
20000a68:	2000f55c 	andcs	pc, r0, ip, asr r5	; <UNPREDICTABLE>
20000a6c:	2000f56c 	andcs	pc, r0, ip, ror #10
20000a70:	2000f578 	andcs	pc, r0, r8, ror r5	; <UNPREDICTABLE>
20000a74:	2000f58c 	andcs	pc, r0, ip, lsl #11
20000a78:	2000f5a4 	andcs	pc, r0, r4, lsr #11
20000a7c:	2000f5b8 			; <UNDEFINED> instruction: 0x2000f5b8
20000a80:	2000f5cc 	andcs	pc, r0, ip, asr #11
20000a84:	2000f5e0 	andcs	pc, r0, r0, ror #11
20000a88:	2000f5f8 	strdcs	pc, [r0], -r8
20000a8c:	2000f604 	andcs	pc, r0, r4, lsl #12
20000a90:	2000f618 	andcs	pc, r0, r8, lsl r6	; <UNPREDICTABLE>
20000a94:	2000f62c 	andcs	pc, r0, ip, lsr #12
20000a98:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
20000a9c:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
20000aa0:	000004ac 	andeq	r0, r0, ip, lsr #9
20000aa4:	000004a4 	andeq	r0, r0, r4, lsr #9
20000aa8:	200089dc 	ldrdcs	r8, [r0], -ip
20000aac:	2000f758 	andcs	pc, r0, r8, asr r7	; <UNPREDICTABLE>
20000ab0:	00000404 	andeq	r0, r0, r4, lsl #8
20000ab4:	20004948 	andcs	r4, r0, r8, asr #18
20000ab8:	200089e0 	andcs	r8, r0, r0, ror #19
20000abc:	fffffc30 			; <UNDEFINED> instruction: 0xfffffc30
20000ac0:	200089e4 	andcs	r8, r0, r4, ror #19
20000ac4:	fffffc1c 			; <UNDEFINED> instruction: 0xfffffc1c
20000ac8:	200089e8 	andcs	r8, r0, r8, ror #19
20000acc:	fffffc08 			; <UNDEFINED> instruction: 0xfffffc08
20000ad0:	fffffbf4 			; <UNDEFINED> instruction: 0xfffffbf4
				else if(counter < delay_until_text + 2*long_text + 2*short_text)
20000ad4:	4bdb      	ldr	r3, [pc, #876]	; (20000e44 <main+0xc48>)
20000ad6:	681b      	ldr	r3, [r3, #0]
20000ad8:	005a      	lsls	r2, r3, #1
20000ada:	4bdb      	ldr	r3, [pc, #876]	; (20000e48 <main+0xc4c>)
20000adc:	681b      	ldr	r3, [r3, #0]
20000ade:	18d2      	adds	r2, r2, r3
20000ae0:	4bda      	ldr	r3, [pc, #872]	; (20000e4c <main+0xc50>)
20000ae2:	681b      	ldr	r3, [r3, #0]
20000ae4:	005b      	lsls	r3, r3, #1
20000ae6:	18d2      	adds	r2, r2, r3
20000ae8:	4bd9      	ldr	r3, [pc, #868]	; (20000e50 <main+0xc54>)
20000aea:	681b      	ldr	r3, [r3, #0]
20000aec:	429a      	cmp	r2, r3
20000aee:	dd0c      	ble.n	20000b0a <main+0x90e>
					text4.display(&text4, 20);
20000af0:	4bd8      	ldr	r3, [pc, #864]	; (20000e54 <main+0xc58>)
20000af2:	2298      	movs	r2, #152	; 0x98
20000af4:	00d2      	lsls	r2, r2, #3
20000af6:	4694      	mov	ip, r2
20000af8:	44bc      	add	ip, r7
20000afa:	4463      	add	r3, ip
20000afc:	691b      	ldr	r3, [r3, #16]
20000afe:	22a0      	movs	r2, #160	; 0xa0
20000b00:	18ba      	adds	r2, r7, r2
20000b02:	2114      	movs	r1, #20
20000b04:	0010      	movs	r0, r2
20000b06:	4798      	blx	r3
20000b08:	e10c      	b.n	20000d24 <main+0xb28>
				else if(counter < delay_until_text + 3*long_text + 2*short_text)
20000b0a:	4bce      	ldr	r3, [pc, #824]	; (20000e44 <main+0xc48>)
20000b0c:	681a      	ldr	r2, [r3, #0]
20000b0e:	0013      	movs	r3, r2
20000b10:	005b      	lsls	r3, r3, #1
20000b12:	189a      	adds	r2, r3, r2
20000b14:	4bcc      	ldr	r3, [pc, #816]	; (20000e48 <main+0xc4c>)
20000b16:	681b      	ldr	r3, [r3, #0]
20000b18:	18d2      	adds	r2, r2, r3
20000b1a:	4bcc      	ldr	r3, [pc, #816]	; (20000e4c <main+0xc50>)
20000b1c:	681b      	ldr	r3, [r3, #0]
20000b1e:	005b      	lsls	r3, r3, #1
20000b20:	18d2      	adds	r2, r2, r3
20000b22:	4bcb      	ldr	r3, [pc, #812]	; (20000e50 <main+0xc54>)
20000b24:	681b      	ldr	r3, [r3, #0]
20000b26:	429a      	cmp	r2, r3
20000b28:	dd0c      	ble.n	20000b44 <main+0x948>
					text5.display(&text5, 15);
20000b2a:	4bcb      	ldr	r3, [pc, #812]	; (20000e58 <main+0xc5c>)
20000b2c:	2298      	movs	r2, #152	; 0x98
20000b2e:	00d2      	lsls	r2, r2, #3
20000b30:	4694      	mov	ip, r2
20000b32:	44bc      	add	ip, r7
20000b34:	4463      	add	r3, ip
20000b36:	691b      	ldr	r3, [r3, #16]
20000b38:	228c      	movs	r2, #140	; 0x8c
20000b3a:	18ba      	adds	r2, r7, r2
20000b3c:	210f      	movs	r1, #15
20000b3e:	0010      	movs	r0, r2
20000b40:	4798      	blx	r3
20000b42:	e0ef      	b.n	20000d24 <main+0xb28>
				else if(counter < delay_until_text + 3*long_text + 3*short_text)
20000b44:	4bbf      	ldr	r3, [pc, #764]	; (20000e44 <main+0xc48>)
20000b46:	681a      	ldr	r2, [r3, #0]
20000b48:	0013      	movs	r3, r2
20000b4a:	005b      	lsls	r3, r3, #1
20000b4c:	189a      	adds	r2, r3, r2
20000b4e:	4bbe      	ldr	r3, [pc, #760]	; (20000e48 <main+0xc4c>)
20000b50:	681b      	ldr	r3, [r3, #0]
20000b52:	18d1      	adds	r1, r2, r3
20000b54:	4bbd      	ldr	r3, [pc, #756]	; (20000e4c <main+0xc50>)
20000b56:	681a      	ldr	r2, [r3, #0]
20000b58:	0013      	movs	r3, r2
20000b5a:	005b      	lsls	r3, r3, #1
20000b5c:	189b      	adds	r3, r3, r2
20000b5e:	18ca      	adds	r2, r1, r3
20000b60:	4bbb      	ldr	r3, [pc, #748]	; (20000e50 <main+0xc54>)
20000b62:	681b      	ldr	r3, [r3, #0]
20000b64:	429a      	cmp	r2, r3
20000b66:	dd0c      	ble.n	20000b82 <main+0x986>
					text6.display(&text6, 20);
20000b68:	4bbc      	ldr	r3, [pc, #752]	; (20000e5c <main+0xc60>)
20000b6a:	2298      	movs	r2, #152	; 0x98
20000b6c:	00d2      	lsls	r2, r2, #3
20000b6e:	4694      	mov	ip, r2
20000b70:	44bc      	add	ip, r7
20000b72:	4463      	add	r3, ip
20000b74:	691b      	ldr	r3, [r3, #16]
20000b76:	2278      	movs	r2, #120	; 0x78
20000b78:	18ba      	adds	r2, r7, r2
20000b7a:	2114      	movs	r1, #20
20000b7c:	0010      	movs	r0, r2
20000b7e:	4798      	blx	r3
20000b80:	e0d0      	b.n	20000d24 <main+0xb28>
				else if(counter < delay_until_text + 4*long_text + 3*short_text + 3)
20000b82:	4bb0      	ldr	r3, [pc, #704]	; (20000e44 <main+0xc48>)
20000b84:	681b      	ldr	r3, [r3, #0]
20000b86:	009a      	lsls	r2, r3, #2
20000b88:	4baf      	ldr	r3, [pc, #700]	; (20000e48 <main+0xc4c>)
20000b8a:	681b      	ldr	r3, [r3, #0]
20000b8c:	18d1      	adds	r1, r2, r3
20000b8e:	4baf      	ldr	r3, [pc, #700]	; (20000e4c <main+0xc50>)
20000b90:	681a      	ldr	r2, [r3, #0]
20000b92:	0013      	movs	r3, r2
20000b94:	005b      	lsls	r3, r3, #1
20000b96:	189b      	adds	r3, r3, r2
20000b98:	18cb      	adds	r3, r1, r3
20000b9a:	1cda      	adds	r2, r3, #3
20000b9c:	4bac      	ldr	r3, [pc, #688]	; (20000e50 <main+0xc54>)
20000b9e:	681b      	ldr	r3, [r3, #0]
20000ba0:	429a      	cmp	r2, r3
20000ba2:	dd0c      	ble.n	20000bbe <main+0x9c2>
					text7.display(&text7, 20);
20000ba4:	4bae      	ldr	r3, [pc, #696]	; (20000e60 <main+0xc64>)
20000ba6:	2298      	movs	r2, #152	; 0x98
20000ba8:	00d2      	lsls	r2, r2, #3
20000baa:	4694      	mov	ip, r2
20000bac:	44bc      	add	ip, r7
20000bae:	4463      	add	r3, ip
20000bb0:	691b      	ldr	r3, [r3, #16]
20000bb2:	2264      	movs	r2, #100	; 0x64
20000bb4:	18ba      	adds	r2, r7, r2
20000bb6:	2114      	movs	r1, #20
20000bb8:	0010      	movs	r0, r2
20000bba:	4798      	blx	r3
20000bbc:	e0b2      	b.n	20000d24 <main+0xb28>
				else if(counter < delay_until_text + 5*long_text + 3*short_text + 2)
20000bbe:	4ba1      	ldr	r3, [pc, #644]	; (20000e44 <main+0xc48>)
20000bc0:	681a      	ldr	r2, [r3, #0]
20000bc2:	0013      	movs	r3, r2
20000bc4:	009b      	lsls	r3, r3, #2
20000bc6:	189a      	adds	r2, r3, r2
20000bc8:	4b9f      	ldr	r3, [pc, #636]	; (20000e48 <main+0xc4c>)
20000bca:	681b      	ldr	r3, [r3, #0]
20000bcc:	18d1      	adds	r1, r2, r3
20000bce:	4b9f      	ldr	r3, [pc, #636]	; (20000e4c <main+0xc50>)
20000bd0:	681a      	ldr	r2, [r3, #0]
20000bd2:	0013      	movs	r3, r2
20000bd4:	005b      	lsls	r3, r3, #1
20000bd6:	189b      	adds	r3, r3, r2
20000bd8:	18cb      	adds	r3, r1, r3
20000bda:	1c9a      	adds	r2, r3, #2
20000bdc:	4b9c      	ldr	r3, [pc, #624]	; (20000e50 <main+0xc54>)
20000bde:	681b      	ldr	r3, [r3, #0]
20000be0:	429a      	cmp	r2, r3
20000be2:	dd0c      	ble.n	20000bfe <main+0xa02>
					text8.display(&text8, 20);
20000be4:	4b9f      	ldr	r3, [pc, #636]	; (20000e64 <main+0xc68>)
20000be6:	2298      	movs	r2, #152	; 0x98
20000be8:	00d2      	lsls	r2, r2, #3
20000bea:	4694      	mov	ip, r2
20000bec:	44bc      	add	ip, r7
20000bee:	4463      	add	r3, ip
20000bf0:	691b      	ldr	r3, [r3, #16]
20000bf2:	2250      	movs	r2, #80	; 0x50
20000bf4:	18ba      	adds	r2, r7, r2
20000bf6:	2114      	movs	r1, #20
20000bf8:	0010      	movs	r0, r2
20000bfa:	4798      	blx	r3
20000bfc:	e092      	b.n	20000d24 <main+0xb28>
				else if(counter < delay_until_text + 5*long_text + 4*short_text + 2)
20000bfe:	4b91      	ldr	r3, [pc, #580]	; (20000e44 <main+0xc48>)
20000c00:	681a      	ldr	r2, [r3, #0]
20000c02:	0013      	movs	r3, r2
20000c04:	009b      	lsls	r3, r3, #2
20000c06:	189a      	adds	r2, r3, r2
20000c08:	4b8f      	ldr	r3, [pc, #572]	; (20000e48 <main+0xc4c>)
20000c0a:	681b      	ldr	r3, [r3, #0]
20000c0c:	18d2      	adds	r2, r2, r3
20000c0e:	4b8f      	ldr	r3, [pc, #572]	; (20000e4c <main+0xc50>)
20000c10:	681b      	ldr	r3, [r3, #0]
20000c12:	009b      	lsls	r3, r3, #2
20000c14:	18d3      	adds	r3, r2, r3
20000c16:	1c9a      	adds	r2, r3, #2
20000c18:	4b8d      	ldr	r3, [pc, #564]	; (20000e50 <main+0xc54>)
20000c1a:	681b      	ldr	r3, [r3, #0]
20000c1c:	429a      	cmp	r2, r3
20000c1e:	dd0c      	ble.n	20000c3a <main+0xa3e>
					text9.display(&text9, 20);
20000c20:	4b91      	ldr	r3, [pc, #580]	; (20000e68 <main+0xc6c>)
20000c22:	2298      	movs	r2, #152	; 0x98
20000c24:	00d2      	lsls	r2, r2, #3
20000c26:	4694      	mov	ip, r2
20000c28:	44bc      	add	ip, r7
20000c2a:	4463      	add	r3, ip
20000c2c:	691b      	ldr	r3, [r3, #16]
20000c2e:	223c      	movs	r2, #60	; 0x3c
20000c30:	18ba      	adds	r2, r7, r2
20000c32:	2114      	movs	r1, #20
20000c34:	0010      	movs	r0, r2
20000c36:	4798      	blx	r3
20000c38:	e074      	b.n	20000d24 <main+0xb28>
				else if(counter < delay_until_text + 6*long_text + 4*short_text - 2 + 2)
20000c3a:	4b82      	ldr	r3, [pc, #520]	; (20000e44 <main+0xc48>)
20000c3c:	681a      	ldr	r2, [r3, #0]
20000c3e:	0013      	movs	r3, r2
20000c40:	005b      	lsls	r3, r3, #1
20000c42:	189b      	adds	r3, r3, r2
20000c44:	005b      	lsls	r3, r3, #1
20000c46:	001a      	movs	r2, r3
20000c48:	4b7f      	ldr	r3, [pc, #508]	; (20000e48 <main+0xc4c>)
20000c4a:	681b      	ldr	r3, [r3, #0]
20000c4c:	18d2      	adds	r2, r2, r3
20000c4e:	4b7f      	ldr	r3, [pc, #508]	; (20000e4c <main+0xc50>)
20000c50:	681b      	ldr	r3, [r3, #0]
20000c52:	009b      	lsls	r3, r3, #2
20000c54:	18d2      	adds	r2, r2, r3
20000c56:	4b7e      	ldr	r3, [pc, #504]	; (20000e50 <main+0xc54>)
20000c58:	681b      	ldr	r3, [r3, #0]
20000c5a:	429a      	cmp	r2, r3
20000c5c:	dd0c      	ble.n	20000c78 <main+0xa7c>
					text10.display(&text10, 15);
20000c5e:	4b83      	ldr	r3, [pc, #524]	; (20000e6c <main+0xc70>)
20000c60:	2298      	movs	r2, #152	; 0x98
20000c62:	00d2      	lsls	r2, r2, #3
20000c64:	4694      	mov	ip, r2
20000c66:	44bc      	add	ip, r7
20000c68:	4463      	add	r3, ip
20000c6a:	691b      	ldr	r3, [r3, #16]
20000c6c:	2228      	movs	r2, #40	; 0x28
20000c6e:	18ba      	adds	r2, r7, r2
20000c70:	210f      	movs	r1, #15
20000c72:	0010      	movs	r0, r2
20000c74:	4798      	blx	r3
20000c76:	e055      	b.n	20000d24 <main+0xb28>
				else if(counter < delay_until_text + 6*long_text + 5*short_text + 3 + 2)
20000c78:	4b72      	ldr	r3, [pc, #456]	; (20000e44 <main+0xc48>)
20000c7a:	681a      	ldr	r2, [r3, #0]
20000c7c:	0013      	movs	r3, r2
20000c7e:	005b      	lsls	r3, r3, #1
20000c80:	189b      	adds	r3, r3, r2
20000c82:	005b      	lsls	r3, r3, #1
20000c84:	001a      	movs	r2, r3
20000c86:	4b70      	ldr	r3, [pc, #448]	; (20000e48 <main+0xc4c>)
20000c88:	681b      	ldr	r3, [r3, #0]
20000c8a:	18d1      	adds	r1, r2, r3
20000c8c:	4b6f      	ldr	r3, [pc, #444]	; (20000e4c <main+0xc50>)
20000c8e:	681a      	ldr	r2, [r3, #0]
20000c90:	0013      	movs	r3, r2
20000c92:	009b      	lsls	r3, r3, #2
20000c94:	189b      	adds	r3, r3, r2
20000c96:	18cb      	adds	r3, r1, r3
20000c98:	1d5a      	adds	r2, r3, #5
20000c9a:	4b6d      	ldr	r3, [pc, #436]	; (20000e50 <main+0xc54>)
20000c9c:	681b      	ldr	r3, [r3, #0]
20000c9e:	429a      	cmp	r2, r3
20000ca0:	dd0b      	ble.n	20000cba <main+0xabe>
					text12.display(&text12, 15);
20000ca2:	4b73      	ldr	r3, [pc, #460]	; (20000e70 <main+0xc74>)
20000ca4:	2298      	movs	r2, #152	; 0x98
20000ca6:	00d2      	lsls	r2, r2, #3
20000ca8:	4694      	mov	ip, r2
20000caa:	44bc      	add	ip, r7
20000cac:	4463      	add	r3, ip
20000cae:	691b      	ldr	r3, [r3, #16]
20000cb0:	003a      	movs	r2, r7
20000cb2:	210f      	movs	r1, #15
20000cb4:	0010      	movs	r0, r2
20000cb6:	4798      	blx	r3
20000cb8:	e034      	b.n	20000d24 <main+0xb28>
				else if(counter < delay_until_text + 7*long_text + 5*short_text + 6 + 2) {
20000cba:	4b62      	ldr	r3, [pc, #392]	; (20000e44 <main+0xc48>)
20000cbc:	681a      	ldr	r2, [r3, #0]
20000cbe:	0013      	movs	r3, r2
20000cc0:	00db      	lsls	r3, r3, #3
20000cc2:	1a9a      	subs	r2, r3, r2
20000cc4:	4b60      	ldr	r3, [pc, #384]	; (20000e48 <main+0xc4c>)
20000cc6:	681b      	ldr	r3, [r3, #0]
20000cc8:	18d1      	adds	r1, r2, r3
20000cca:	4b60      	ldr	r3, [pc, #384]	; (20000e4c <main+0xc50>)
20000ccc:	681a      	ldr	r2, [r3, #0]
20000cce:	0013      	movs	r3, r2
20000cd0:	009b      	lsls	r3, r3, #2
20000cd2:	189b      	adds	r3, r3, r2
20000cd4:	18cb      	adds	r3, r1, r3
20000cd6:	3308      	adds	r3, #8
20000cd8:	001a      	movs	r2, r3
20000cda:	4b5d      	ldr	r3, [pc, #372]	; (20000e50 <main+0xc54>)
20000cdc:	681b      	ldr	r3, [r3, #0]
20000cde:	429a      	cmp	r2, r3
20000ce0:	dd0c      	ble.n	20000cfc <main+0xb00>
					text11.display(&text11, 20);
20000ce2:	4b64      	ldr	r3, [pc, #400]	; (20000e74 <main+0xc78>)
20000ce4:	2298      	movs	r2, #152	; 0x98
20000ce6:	00d2      	lsls	r2, r2, #3
20000ce8:	4694      	mov	ip, r2
20000cea:	44bc      	add	ip, r7
20000cec:	4463      	add	r3, ip
20000cee:	691b      	ldr	r3, [r3, #16]
20000cf0:	2214      	movs	r2, #20
20000cf2:	18ba      	adds	r2, r7, r2
20000cf4:	2114      	movs	r1, #20
20000cf6:	0010      	movs	r0, r2
20000cf8:	4798      	blx	r3
20000cfa:	e013      	b.n	20000d24 <main+0xb28>
				} else {
					if (read_DIL() == 0) {
20000cfc:	f003 f864 	bl	20003dc8 <read_DIL>
20000d00:	1e03      	subs	r3, r0, #0
20000d02:	d10f      	bne.n	20000d24 <main+0xb28>
						current_screen = GAME_SCREEN;
20000d04:	4b5c      	ldr	r3, [pc, #368]	; (20000e78 <main+0xc7c>)
20000d06:	2202      	movs	r2, #2
20000d08:	601a      	str	r2, [r3, #0]
						random_seed = counter;
20000d0a:	4b51      	ldr	r3, [pc, #324]	; (20000e50 <main+0xc54>)
20000d0c:	681a      	ldr	r2, [r3, #0]
20000d0e:	4b5b      	ldr	r3, [pc, #364]	; (20000e7c <main+0xc80>)
20000d10:	601a      	str	r2, [r3, #0]
						counter = 0;
20000d12:	4b4f      	ldr	r3, [pc, #316]	; (20000e50 <main+0xc54>)
20000d14:	2200      	movs	r2, #0
20000d16:	601a      	str	r2, [r3, #0]
						ascii_write("Daffo: I'm feeling ","a bit spooked out...");
20000d18:	4a59      	ldr	r2, [pc, #356]	; (20000e80 <main+0xc84>)
20000d1a:	4b5a      	ldr	r3, [pc, #360]	; (20000e84 <main+0xc88>)
20000d1c:	0011      	movs	r1, r2
20000d1e:	0018      	movs	r0, r3
20000d20:	f003 fa54 	bl	200041cc <ascii_write>
					}
				}
				
				if(read_DIL() == SKIP_VALUE) {
20000d24:	f003 f850 	bl	20003dc8 <read_DIL>
20000d28:	0003      	movs	r3, r0
20000d2a:	2b81      	cmp	r3, #129	; 0x81
20000d2c:	d10f      	bne.n	20000d4e <main+0xb52>
					current_screen = GAME_SCREEN;
20000d2e:	4b52      	ldr	r3, [pc, #328]	; (20000e78 <main+0xc7c>)
20000d30:	2202      	movs	r2, #2
20000d32:	601a      	str	r2, [r3, #0]
					random_seed = counter;
20000d34:	4b46      	ldr	r3, [pc, #280]	; (20000e50 <main+0xc54>)
20000d36:	681a      	ldr	r2, [r3, #0]
20000d38:	4b50      	ldr	r3, [pc, #320]	; (20000e7c <main+0xc80>)
20000d3a:	601a      	str	r2, [r3, #0]
					counter = 0;
20000d3c:	4b44      	ldr	r3, [pc, #272]	; (20000e50 <main+0xc54>)
20000d3e:	2200      	movs	r2, #0
20000d40:	601a      	str	r2, [r3, #0]
					ascii_write("Daffo: I'm feeling ","a bit spooked out...");
20000d42:	4a4f      	ldr	r2, [pc, #316]	; (20000e80 <main+0xc84>)
20000d44:	4b4f      	ldr	r3, [pc, #316]	; (20000e84 <main+0xc88>)
20000d46:	0011      	movs	r1, r2
20000d48:	0018      	movs	r0, r3
20000d4a:	f003 fa3f 	bl	200041cc <ascii_write>
				}
				
				
				fire2.update(&fire2);
20000d4e:	4b4e      	ldr	r3, [pc, #312]	; (20000e88 <main+0xc8c>)
20000d50:	2298      	movs	r2, #152	; 0x98
20000d52:	00d2      	lsls	r2, r2, #3
20000d54:	4694      	mov	ip, r2
20000d56:	44bc      	add	ip, r7
20000d58:	4463      	add	r3, ip
20000d5a:	68db      	ldr	r3, [r3, #12]
20000d5c:	2292      	movs	r2, #146	; 0x92
20000d5e:	0092      	lsls	r2, r2, #2
20000d60:	18ba      	adds	r2, r7, r2
20000d62:	0010      	movs	r0, r2
20000d64:	4798      	blx	r3
				fire3.update(&fire3);
20000d66:	4b49      	ldr	r3, [pc, #292]	; (20000e8c <main+0xc90>)
20000d68:	2298      	movs	r2, #152	; 0x98
20000d6a:	00d2      	lsls	r2, r2, #3
20000d6c:	4694      	mov	ip, r2
20000d6e:	44bc      	add	ip, r7
20000d70:	4463      	add	r3, ip
20000d72:	68db      	ldr	r3, [r3, #12]
20000d74:	2289      	movs	r2, #137	; 0x89
20000d76:	0092      	lsls	r2, r2, #2
20000d78:	18ba      	adds	r2, r7, r2
20000d7a:	0010      	movs	r0, r2
20000d7c:	4798      	blx	r3
				fire1.update(&fire1);
20000d7e:	4b44      	ldr	r3, [pc, #272]	; (20000e90 <main+0xc94>)
20000d80:	2298      	movs	r2, #152	; 0x98
20000d82:	00d2      	lsls	r2, r2, #3
20000d84:	4694      	mov	ip, r2
20000d86:	44bc      	add	ip, r7
20000d88:	4463      	add	r3, ip
20000d8a:	68db      	ldr	r3, [r3, #12]
20000d8c:	22ee      	movs	r2, #238	; 0xee
20000d8e:	0052      	lsls	r2, r2, #1
20000d90:	18ba      	adds	r2, r7, r2
20000d92:	0010      	movs	r0, r2
20000d94:	4798      	blx	r3
				fire4.update(&fire4);
20000d96:	4b3f      	ldr	r3, [pc, #252]	; (20000e94 <main+0xc98>)
20000d98:	2298      	movs	r2, #152	; 0x98
20000d9a:	00d2      	lsls	r2, r2, #3
20000d9c:	4694      	mov	ip, r2
20000d9e:	44bc      	add	ip, r7
20000da0:	4463      	add	r3, ip
20000da2:	68db      	ldr	r3, [r3, #12]
20000da4:	2280      	movs	r2, #128	; 0x80
20000da6:	0092      	lsls	r2, r2, #2
20000da8:	18ba      	adds	r2, r7, r2
20000daa:	0010      	movs	r0, r2
20000dac:	4798      	blx	r3
				bird.update(&bird);
20000dae:	4b3a      	ldr	r3, [pc, #232]	; (20000e98 <main+0xc9c>)
20000db0:	2298      	movs	r2, #152	; 0x98
20000db2:	00d2      	lsls	r2, r2, #3
20000db4:	4694      	mov	ip, r2
20000db6:	44bc      	add	ip, r7
20000db8:	4463      	add	r3, ip
20000dba:	68db      	ldr	r3, [r3, #12]
20000dbc:	22b6      	movs	r2, #182	; 0xb6
20000dbe:	0092      	lsls	r2, r2, #2
20000dc0:	18ba      	adds	r2, r7, r2
20000dc2:	0010      	movs	r0, r2
20000dc4:	4798      	blx	r3
				bird.xPos -= 2;
20000dc6:	4b34      	ldr	r3, [pc, #208]	; (20000e98 <main+0xc9c>)
20000dc8:	2298      	movs	r2, #152	; 0x98
20000dca:	00d2      	lsls	r2, r2, #3
20000dcc:	4694      	mov	ip, r2
20000dce:	44bc      	add	ip, r7
20000dd0:	4463      	add	r3, ip
20000dd2:	685b      	ldr	r3, [r3, #4]
20000dd4:	1e9a      	subs	r2, r3, #2
20000dd6:	4b30      	ldr	r3, [pc, #192]	; (20000e98 <main+0xc9c>)
20000dd8:	2198      	movs	r1, #152	; 0x98
20000dda:	00c9      	lsls	r1, r1, #3
20000ddc:	468c      	mov	ip, r1
20000dde:	44bc      	add	ip, r7
20000de0:	4463      	add	r3, ip
20000de2:	605a      	str	r2, [r3, #4]
				if (counter % 2 == 0) {
20000de4:	4b1a      	ldr	r3, [pc, #104]	; (20000e50 <main+0xc54>)
20000de6:	681b      	ldr	r3, [r3, #0]
20000de8:	001a      	movs	r2, r3
20000dea:	2301      	movs	r3, #1
20000dec:	4013      	ands	r3, r2
20000dee:	d001      	beq.n	20000df4 <main+0xbf8>
20000df0:	f000 fd4b 	bl	2000188a <main+0x168e>
					bird.yPos--;
20000df4:	4b28      	ldr	r3, [pc, #160]	; (20000e98 <main+0xc9c>)
20000df6:	2298      	movs	r2, #152	; 0x98
20000df8:	00d2      	lsls	r2, r2, #3
20000dfa:	4694      	mov	ip, r2
20000dfc:	44bc      	add	ip, r7
20000dfe:	4463      	add	r3, ip
20000e00:	689b      	ldr	r3, [r3, #8]
20000e02:	1e5a      	subs	r2, r3, #1
20000e04:	4b24      	ldr	r3, [pc, #144]	; (20000e98 <main+0xc9c>)
20000e06:	2198      	movs	r1, #152	; 0x98
20000e08:	00c9      	lsls	r1, r1, #3
20000e0a:	468c      	mov	ip, r1
20000e0c:	44bc      	add	ip, r7
20000e0e:	4463      	add	r3, ip
20000e10:	609a      	str	r2, [r3, #8]
				}
				
				break;
20000e12:	f000 fd3a 	bl	2000188a <main+0x168e>
				
			case GAME_SCREEN: //inside
				
				counter++;
20000e16:	4b0e      	ldr	r3, [pc, #56]	; (20000e50 <main+0xc54>)
20000e18:	681b      	ldr	r3, [r3, #0]
20000e1a:	1c5a      	adds	r2, r3, #1
20000e1c:	4b0c      	ldr	r3, [pc, #48]	; (20000e50 <main+0xc54>)
20000e1e:	601a      	str	r2, [r3, #0]
				if(read_DIL_single( LIGHT_TRIGGER )) {
20000e20:	2006      	movs	r0, #6
20000e22:	f002 ffe1 	bl	20003de8 <read_DIL_single>
20000e26:	1e03      	subs	r3, r0, #0
20000e28:	d03c      	beq.n	20000ea4 <main+0xca8>
					draw_game_object( &indoors2 );
20000e2a:	23d1      	movs	r3, #209	; 0xd1
20000e2c:	009b      	lsls	r3, r3, #2
20000e2e:	18fb      	adds	r3, r7, r3
20000e30:	0018      	movs	r0, r3
20000e32:	f002 ff1f 	bl	20003c74 <draw_game_object>
					ascii_write("*click*","");
20000e36:	4a19      	ldr	r2, [pc, #100]	; (20000e9c <main+0xca0>)
20000e38:	4b19      	ldr	r3, [pc, #100]	; (20000ea0 <main+0xca4>)
20000e3a:	0011      	movs	r1, r2
20000e3c:	0018      	movs	r0, r3
20000e3e:	f003 f9c5 	bl	200041cc <ascii_write>
20000e42:	e03b      	b.n	20000ebc <main+0xcc0>
20000e44:	200089e4 	andcs	r8, r0, r4, ror #19
20000e48:	200089e0 	andcs	r8, r0, r0, ror #19
20000e4c:	200089e8 	andcs	r8, r0, r8, ror #19
20000e50:	20004948 	andcs	r4, r0, r8, asr #18
20000e54:	fffffbe0 			; <UNDEFINED> instruction: 0xfffffbe0
20000e58:	fffffbcc 			; <UNDEFINED> instruction: 0xfffffbcc
20000e5c:	fffffbb8 			; <UNDEFINED> instruction: 0xfffffbb8
20000e60:	fffffba4 			; <UNDEFINED> instruction: 0xfffffba4
20000e64:	fffffb90 			; <UNDEFINED> instruction: 0xfffffb90
20000e68:	fffffb7c 			; <UNDEFINED> instruction: 0xfffffb7c
20000e6c:	fffffb68 			; <UNDEFINED> instruction: 0xfffffb68
20000e70:	fffffb40 			; <UNDEFINED> instruction: 0xfffffb40
20000e74:	fffffb54 			; <UNDEFINED> instruction: 0xfffffb54
20000e78:	200089dc 	ldrdcs	r8, [r0], -ip
20000e7c:	20004a4c 	andcs	r4, r0, ip, asr #20
20000e80:	2000f640 	andcs	pc, r0, r0, asr #12
20000e84:	2000f658 	andcs	pc, r0, r8, asr r6	; <UNPREDICTABLE>
20000e88:	fffffd88 			; <UNDEFINED> instruction: 0xfffffd88
20000e8c:	fffffd64 			; <UNDEFINED> instruction: 0xfffffd64
20000e90:	fffffd1c 			; <UNDEFINED> instruction: 0xfffffd1c
20000e94:	fffffd40 			; <UNDEFINED> instruction: 0xfffffd40
20000e98:	fffffe18 			; <UNDEFINED> instruction: 0xfffffe18
20000e9c:	2000f66c 	andcs	pc, r0, ip, ror #12
20000ea0:	2000f670 	andcs	pc, r0, r0, ror r6	; <UNPREDICTABLE>
				} else {
					draw_game_object( &indoors );
20000ea4:	23da      	movs	r3, #218	; 0xda
20000ea6:	009b      	lsls	r3, r3, #2
20000ea8:	18fb      	adds	r3, r7, r3
20000eaa:	0018      	movs	r0, r3
20000eac:	f002 fee2 	bl	20003c74 <draw_game_object>
					draw_game_object( &trophy );
20000eb0:	23c8      	movs	r3, #200	; 0xc8
20000eb2:	009b      	lsls	r3, r3, #2
20000eb4:	18fb      	adds	r3, r7, r3
20000eb6:	0018      	movs	r0, r3
20000eb8:	f002 fedc 	bl	20003c74 <draw_game_object>
				}
				
				if(!no_DIP)
20000ebc:	4be1      	ldr	r3, [pc, #900]	; (20001244 <main+0x1048>)
20000ebe:	18fb      	adds	r3, r7, r3
20000ec0:	681b      	ldr	r3, [r3, #0]
20000ec2:	2b00      	cmp	r3, #0
20000ec4:	d105      	bne.n	20000ed2 <main+0xcd6>
					draw_game_object( &DIP );
20000ec6:	23a4      	movs	r3, #164	; 0xa4
20000ec8:	009b      	lsls	r3, r3, #2
20000eca:	18fb      	adds	r3, r7, r3
20000ecc:	0018      	movs	r0, r3
20000ece:	f002 fed1 	bl	20003c74 <draw_game_object>
				draw_game_object( &player );
20000ed2:	239b      	movs	r3, #155	; 0x9b
20000ed4:	009b      	lsls	r3, r3, #2
20000ed6:	18fb      	adds	r3, r7, r3
20000ed8:	0018      	movs	r0, r3
20000eda:	f002 fecb 	bl	20003c74 <draw_game_object>
				static int i;
				for(i = 0; i < 3; i++) {
20000ede:	4bda      	ldr	r3, [pc, #872]	; (20001248 <main+0x104c>)
20000ee0:	2200      	movs	r2, #0
20000ee2:	601a      	str	r2, [r3, #0]
20000ee4:	e029      	b.n	20000f3a <main+0xd3e>
					draw_game_object( &fires[i] );
20000ee6:	4bd8      	ldr	r3, [pc, #864]	; (20001248 <main+0x104c>)
20000ee8:	681a      	ldr	r2, [r3, #0]
20000eea:	1d79      	adds	r1, r7, #5
20000eec:	31ff      	adds	r1, #255	; 0xff
20000eee:	0013      	movs	r3, r2
20000ef0:	00db      	lsls	r3, r3, #3
20000ef2:	189b      	adds	r3, r3, r2
20000ef4:	009b      	lsls	r3, r3, #2
20000ef6:	18cb      	adds	r3, r1, r3
20000ef8:	0018      	movs	r0, r3
20000efa:	f002 febb 	bl	20003c74 <draw_game_object>
					fires[i].update( &fires[i] );
20000efe:	4bd2      	ldr	r3, [pc, #840]	; (20001248 <main+0x104c>)
20000f00:	681a      	ldr	r2, [r3, #0]
20000f02:	4bd2      	ldr	r3, [pc, #840]	; (2000124c <main+0x1050>)
20000f04:	2198      	movs	r1, #152	; 0x98
20000f06:	00c9      	lsls	r1, r1, #3
20000f08:	1879      	adds	r1, r7, r1
20000f0a:	18c9      	adds	r1, r1, r3
20000f0c:	0013      	movs	r3, r2
20000f0e:	00db      	lsls	r3, r3, #3
20000f10:	189b      	adds	r3, r3, r2
20000f12:	009b      	lsls	r3, r3, #2
20000f14:	18cb      	adds	r3, r1, r3
20000f16:	330c      	adds	r3, #12
20000f18:	6819      	ldr	r1, [r3, #0]
20000f1a:	4bcb      	ldr	r3, [pc, #812]	; (20001248 <main+0x104c>)
20000f1c:	681a      	ldr	r2, [r3, #0]
20000f1e:	1d78      	adds	r0, r7, #5
20000f20:	30ff      	adds	r0, #255	; 0xff
20000f22:	0013      	movs	r3, r2
20000f24:	00db      	lsls	r3, r3, #3
20000f26:	189b      	adds	r3, r3, r2
20000f28:	009b      	lsls	r3, r3, #2
20000f2a:	18c3      	adds	r3, r0, r3
20000f2c:	0018      	movs	r0, r3
20000f2e:	4788      	blx	r1
				for(i = 0; i < 3; i++) {
20000f30:	4bc5      	ldr	r3, [pc, #788]	; (20001248 <main+0x104c>)
20000f32:	681b      	ldr	r3, [r3, #0]
20000f34:	1c5a      	adds	r2, r3, #1
20000f36:	4bc4      	ldr	r3, [pc, #784]	; (20001248 <main+0x104c>)
20000f38:	601a      	str	r2, [r3, #0]
20000f3a:	4bc3      	ldr	r3, [pc, #780]	; (20001248 <main+0x104c>)
20000f3c:	681b      	ldr	r3, [r3, #0]
20000f3e:	2b02      	cmp	r3, #2
20000f40:	ddd1      	ble.n	20000ee6 <main+0xcea>
				}
				draw_game_object( &hair );
20000f42:	23bf      	movs	r3, #191	; 0xbf
20000f44:	009b      	lsls	r3, r3, #2
20000f46:	18fb      	adds	r3, r7, r3
20000f48:	0018      	movs	r0, r3
20000f4a:	f002 fe93 	bl	20003c74 <draw_game_object>
				if(exploding) {
20000f4e:	2395      	movs	r3, #149	; 0x95
20000f50:	00db      	lsls	r3, r3, #3
20000f52:	18fb      	adds	r3, r7, r3
20000f54:	681b      	ldr	r3, [r3, #0]
20000f56:	2b00      	cmp	r3, #0
20000f58:	d055      	beq.n	20001006 <main+0xe0a>
					if (first) {
20000f5a:	4bbd      	ldr	r3, [pc, #756]	; (20001250 <main+0x1054>)
20000f5c:	18fb      	adds	r3, r7, r3
20000f5e:	681b      	ldr	r3, [r3, #0]
20000f60:	2b00      	cmp	r3, #0
20000f62:	d035      	beq.n	20000fd0 <main+0xdd4>
						boom.xPos = player.xPos + 9 - 53;
20000f64:	4bbb      	ldr	r3, [pc, #748]	; (20001254 <main+0x1058>)
20000f66:	2298      	movs	r2, #152	; 0x98
20000f68:	00d2      	lsls	r2, r2, #3
20000f6a:	4694      	mov	ip, r2
20000f6c:	44bc      	add	ip, r7
20000f6e:	4463      	add	r3, ip
20000f70:	685b      	ldr	r3, [r3, #4]
20000f72:	3b2c      	subs	r3, #44	; 0x2c
20000f74:	001a      	movs	r2, r3
20000f76:	4bb8      	ldr	r3, [pc, #736]	; (20001258 <main+0x105c>)
20000f78:	2198      	movs	r1, #152	; 0x98
20000f7a:	00c9      	lsls	r1, r1, #3
20000f7c:	468c      	mov	ip, r1
20000f7e:	44bc      	add	ip, r7
20000f80:	4463      	add	r3, ip
20000f82:	605a      	str	r2, [r3, #4]
						boom.yPos = player.yPos + 9 - 27;
20000f84:	4bb3      	ldr	r3, [pc, #716]	; (20001254 <main+0x1058>)
20000f86:	2298      	movs	r2, #152	; 0x98
20000f88:	00d2      	lsls	r2, r2, #3
20000f8a:	4694      	mov	ip, r2
20000f8c:	44bc      	add	ip, r7
20000f8e:	4463      	add	r3, ip
20000f90:	689b      	ldr	r3, [r3, #8]
20000f92:	3b12      	subs	r3, #18
20000f94:	001a      	movs	r2, r3
20000f96:	4bb0      	ldr	r3, [pc, #704]	; (20001258 <main+0x105c>)
20000f98:	2198      	movs	r1, #152	; 0x98
20000f9a:	00c9      	lsls	r1, r1, #3
20000f9c:	468c      	mov	ip, r1
20000f9e:	44bc      	add	ip, r7
20000fa0:	4463      	add	r3, ip
20000fa2:	609a      	str	r2, [r3, #8]
						player.xPos = -100;
20000fa4:	4bab      	ldr	r3, [pc, #684]	; (20001254 <main+0x1058>)
20000fa6:	2298      	movs	r2, #152	; 0x98
20000fa8:	00d2      	lsls	r2, r2, #3
20000faa:	4694      	mov	ip, r2
20000fac:	44bc      	add	ip, r7
20000fae:	4463      	add	r3, ip
20000fb0:	2264      	movs	r2, #100	; 0x64
20000fb2:	4252      	negs	r2, r2
20000fb4:	605a      	str	r2, [r3, #4]
						player.yPos = -100;
20000fb6:	4ba7      	ldr	r3, [pc, #668]	; (20001254 <main+0x1058>)
20000fb8:	2298      	movs	r2, #152	; 0x98
20000fba:	00d2      	lsls	r2, r2, #3
20000fbc:	4694      	mov	ip, r2
20000fbe:	44bc      	add	ip, r7
20000fc0:	4463      	add	r3, ip
20000fc2:	2264      	movs	r2, #100	; 0x64
20000fc4:	4252      	negs	r2, r2
20000fc6:	609a      	str	r2, [r3, #8]
						first = 0;
20000fc8:	2300      	movs	r3, #0
20000fca:	4aa1      	ldr	r2, [pc, #644]	; (20001250 <main+0x1054>)
20000fcc:	18ba      	adds	r2, r7, r2
20000fce:	6013      	str	r3, [r2, #0]
					}					
					draw_game_object( &boom );
20000fd0:	23ad      	movs	r3, #173	; 0xad
20000fd2:	009b      	lsls	r3, r3, #2
20000fd4:	18fb      	adds	r3, r7, r3
20000fd6:	0018      	movs	r0, r3
20000fd8:	f002 fe4c 	bl	20003c74 <draw_game_object>
					if(boom.current_frame < 10)
20000fdc:	4b9e      	ldr	r3, [pc, #632]	; (20001258 <main+0x105c>)
20000fde:	2298      	movs	r2, #152	; 0x98
20000fe0:	00d2      	lsls	r2, r2, #3
20000fe2:	4694      	mov	ip, r2
20000fe4:	44bc      	add	ip, r7
20000fe6:	4463      	add	r3, ip
20000fe8:	695b      	ldr	r3, [r3, #20]
20000fea:	2b09      	cmp	r3, #9
20000fec:	dc0b      	bgt.n	20001006 <main+0xe0a>
						boom.update( &boom );
20000fee:	4b9a      	ldr	r3, [pc, #616]	; (20001258 <main+0x105c>)
20000ff0:	2298      	movs	r2, #152	; 0x98
20000ff2:	00d2      	lsls	r2, r2, #3
20000ff4:	4694      	mov	ip, r2
20000ff6:	44bc      	add	ip, r7
20000ff8:	4463      	add	r3, ip
20000ffa:	68db      	ldr	r3, [r3, #12]
20000ffc:	22ad      	movs	r2, #173	; 0xad
20000ffe:	0092      	lsls	r2, r2, #2
20001000:	18ba      	adds	r2, r7, r2
20001002:	0010      	movs	r0, r2
20001004:	4798      	blx	r3
				}
				
				show_frame(1);
20001006:	2001      	movs	r0, #1
20001008:	f002 fe75 	bl	20003cf6 <show_frame>
				
				static int last_climb_value = 100;
				if((read_DIL_single(CLIMB_TRIGGER) != last_climb_value) && player.xPos > 90 && player.xPos < 108 && !has_climbed) {
2000100c:	2004      	movs	r0, #4
2000100e:	f002 feeb 	bl	20003de8 <read_DIL_single>
20001012:	0002      	movs	r2, r0
20001014:	4b91      	ldr	r3, [pc, #580]	; (2000125c <main+0x1060>)
20001016:	681b      	ldr	r3, [r3, #0]
20001018:	429a      	cmp	r2, r3
2000101a:	d023      	beq.n	20001064 <main+0xe68>
2000101c:	4b8d      	ldr	r3, [pc, #564]	; (20001254 <main+0x1058>)
2000101e:	2298      	movs	r2, #152	; 0x98
20001020:	00d2      	lsls	r2, r2, #3
20001022:	4694      	mov	ip, r2
20001024:	44bc      	add	ip, r7
20001026:	4463      	add	r3, ip
20001028:	685b      	ldr	r3, [r3, #4]
2000102a:	2b5a      	cmp	r3, #90	; 0x5a
2000102c:	dd1a      	ble.n	20001064 <main+0xe68>
2000102e:	4b89      	ldr	r3, [pc, #548]	; (20001254 <main+0x1058>)
20001030:	2298      	movs	r2, #152	; 0x98
20001032:	00d2      	lsls	r2, r2, #3
20001034:	4694      	mov	ip, r2
20001036:	44bc      	add	ip, r7
20001038:	4463      	add	r3, ip
2000103a:	685b      	ldr	r3, [r3, #4]
2000103c:	2b6b      	cmp	r3, #107	; 0x6b
2000103e:	dc11      	bgt.n	20001064 <main+0xe68>
20001040:	2397      	movs	r3, #151	; 0x97
20001042:	00db      	lsls	r3, r3, #3
20001044:	18fb      	adds	r3, r7, r3
20001046:	681b      	ldr	r3, [r3, #0]
20001048:	2b00      	cmp	r3, #0
2000104a:	d10b      	bne.n	20001064 <main+0xe68>
					is_climbing = 1;
2000104c:	2301      	movs	r3, #1
2000104e:	4a84      	ldr	r2, [pc, #528]	; (20001260 <main+0x1064>)
20001050:	18ba      	adds	r2, r7, r2
20001052:	6013      	str	r3, [r2, #0]
					player.xPos = 98;
20001054:	4b7f      	ldr	r3, [pc, #508]	; (20001254 <main+0x1058>)
20001056:	2298      	movs	r2, #152	; 0x98
20001058:	00d2      	lsls	r2, r2, #3
2000105a:	4694      	mov	ip, r2
2000105c:	44bc      	add	ip, r7
2000105e:	4463      	add	r3, ip
20001060:	2262      	movs	r2, #98	; 0x62
20001062:	605a      	str	r2, [r3, #4]
				}
				last_climb_value = read_DIL_single(CLIMB_TRIGGER);
20001064:	2004      	movs	r0, #4
20001066:	f002 febf 	bl	20003de8 <read_DIL_single>
2000106a:	0002      	movs	r2, r0
2000106c:	4b7b      	ldr	r3, [pc, #492]	; (2000125c <main+0x1060>)
2000106e:	601a      	str	r2, [r3, #0]
				
				if(is_climbing) {
20001070:	4b7b      	ldr	r3, [pc, #492]	; (20001260 <main+0x1064>)
20001072:	18fb      	adds	r3, r7, r3
20001074:	681b      	ldr	r3, [r3, #0]
20001076:	2b00      	cmp	r3, #0
20001078:	d060      	beq.n	2000113c <main+0xf40>
					gameObjectUpdate( &player );
2000107a:	239b      	movs	r3, #155	; 0x9b
2000107c:	009b      	lsls	r3, r3, #2
2000107e:	18fb      	adds	r3, r7, r3
20001080:	0018      	movs	r0, r3
20001082:	f000 fc41 	bl	20001908 <gameObjectUpdate>
					if (player.yPos % 6 == 0){
20001086:	4b73      	ldr	r3, [pc, #460]	; (20001254 <main+0x1058>)
20001088:	2298      	movs	r2, #152	; 0x98
2000108a:	00d2      	lsls	r2, r2, #3
2000108c:	4694      	mov	ip, r2
2000108e:	44bc      	add	ip, r7
20001090:	4463      	add	r3, ip
20001092:	689b      	ldr	r3, [r3, #8]
20001094:	2106      	movs	r1, #6
20001096:	0018      	movs	r0, r3
20001098:	f003 fc50 	bl	2000493c <__aeabi_idivmod>
2000109c:	1e0b      	subs	r3, r1, #0
2000109e:	d106      	bne.n	200010ae <main+0xeb2>
						ascii_write("*tipp*","");
200010a0:	4a70      	ldr	r2, [pc, #448]	; (20001264 <main+0x1068>)
200010a2:	4b71      	ldr	r3, [pc, #452]	; (20001268 <main+0x106c>)
200010a4:	0011      	movs	r1, r2
200010a6:	0018      	movs	r0, r3
200010a8:	f003 f890 	bl	200041cc <ascii_write>
200010ac:	e013      	b.n	200010d6 <main+0xeda>
					}
					else if (player.yPos % 6 == 3) {
200010ae:	4b69      	ldr	r3, [pc, #420]	; (20001254 <main+0x1058>)
200010b0:	2298      	movs	r2, #152	; 0x98
200010b2:	00d2      	lsls	r2, r2, #3
200010b4:	4694      	mov	ip, r2
200010b6:	44bc      	add	ip, r7
200010b8:	4463      	add	r3, ip
200010ba:	689b      	ldr	r3, [r3, #8]
200010bc:	2106      	movs	r1, #6
200010be:	0018      	movs	r0, r3
200010c0:	f003 fc3c 	bl	2000493c <__aeabi_idivmod>
200010c4:	000b      	movs	r3, r1
200010c6:	2b03      	cmp	r3, #3
200010c8:	d105      	bne.n	200010d6 <main+0xeda>
						ascii_write("*tapp*","");
200010ca:	4a66      	ldr	r2, [pc, #408]	; (20001264 <main+0x1068>)
200010cc:	4b67      	ldr	r3, [pc, #412]	; (2000126c <main+0x1070>)
200010ce:	0011      	movs	r1, r2
200010d0:	0018      	movs	r0, r3
200010d2:	f003 f87b 	bl	200041cc <ascii_write>
					}
					if(player.yPos > 4) {
200010d6:	4b5f      	ldr	r3, [pc, #380]	; (20001254 <main+0x1058>)
200010d8:	2298      	movs	r2, #152	; 0x98
200010da:	00d2      	lsls	r2, r2, #3
200010dc:	4694      	mov	ip, r2
200010de:	44bc      	add	ip, r7
200010e0:	4463      	add	r3, ip
200010e2:	689b      	ldr	r3, [r3, #8]
200010e4:	2b04      	cmp	r3, #4
200010e6:	dd0f      	ble.n	20001108 <main+0xf0c>
						player.yPos--;
200010e8:	4b5a      	ldr	r3, [pc, #360]	; (20001254 <main+0x1058>)
200010ea:	2298      	movs	r2, #152	; 0x98
200010ec:	00d2      	lsls	r2, r2, #3
200010ee:	4694      	mov	ip, r2
200010f0:	44bc      	add	ip, r7
200010f2:	4463      	add	r3, ip
200010f4:	689b      	ldr	r3, [r3, #8]
200010f6:	1e5a      	subs	r2, r3, #1
200010f8:	4b56      	ldr	r3, [pc, #344]	; (20001254 <main+0x1058>)
200010fa:	2198      	movs	r1, #152	; 0x98
200010fc:	00c9      	lsls	r1, r1, #3
200010fe:	468c      	mov	ip, r1
20001100:	44bc      	add	ip, r7
20001102:	4463      	add	r3, ip
20001104:	609a      	str	r2, [r3, #8]
20001106:	e025      	b.n	20001154 <main+0xf58>
					} else {	//Stay at top level and disable climbing forever!
						player.yPos = 5;
20001108:	4b52      	ldr	r3, [pc, #328]	; (20001254 <main+0x1058>)
2000110a:	2298      	movs	r2, #152	; 0x98
2000110c:	00d2      	lsls	r2, r2, #3
2000110e:	4694      	mov	ip, r2
20001110:	44bc      	add	ip, r7
20001112:	4463      	add	r3, ip
20001114:	2205      	movs	r2, #5
20001116:	609a      	str	r2, [r3, #8]
						player.xPos = 96;
20001118:	4b4e      	ldr	r3, [pc, #312]	; (20001254 <main+0x1058>)
2000111a:	2298      	movs	r2, #152	; 0x98
2000111c:	00d2      	lsls	r2, r2, #3
2000111e:	4694      	mov	ip, r2
20001120:	44bc      	add	ip, r7
20001122:	4463      	add	r3, ip
20001124:	2260      	movs	r2, #96	; 0x60
20001126:	605a      	str	r2, [r3, #4]
						is_climbing = 0;
20001128:	2300      	movs	r3, #0
2000112a:	4a4d      	ldr	r2, [pc, #308]	; (20001260 <main+0x1064>)
2000112c:	18ba      	adds	r2, r7, r2
2000112e:	6013      	str	r3, [r2, #0]
						has_climbed = 1;
20001130:	2301      	movs	r3, #1
20001132:	2297      	movs	r2, #151	; 0x97
20001134:	00d2      	lsls	r2, r2, #3
20001136:	18ba      	adds	r2, r7, r2
20001138:	6013      	str	r3, [r2, #0]
2000113a:	e00b      	b.n	20001154 <main+0xf58>
					}
				} else {
					player.update(&player);
2000113c:	4b45      	ldr	r3, [pc, #276]	; (20001254 <main+0x1058>)
2000113e:	2298      	movs	r2, #152	; 0x98
20001140:	00d2      	lsls	r2, r2, #3
20001142:	4694      	mov	ip, r2
20001144:	44bc      	add	ip, r7
20001146:	4463      	add	r3, ip
20001148:	68db      	ldr	r3, [r3, #12]
2000114a:	229b      	movs	r2, #155	; 0x9b
2000114c:	0092      	lsls	r2, r2, #2
2000114e:	18ba      	adds	r2, r7, r2
20001150:	0010      	movs	r0, r2
20001152:	4798      	blx	r3
				}
				
				if (trophy.yPos >= player.yPos && (player.xPos + PLAYER_WIDTH/2 >= trophy.xPos && player.xPos <= trophy.xPos + PLAYER_WIDTH/2 )) {
20001154:	4b46      	ldr	r3, [pc, #280]	; (20001270 <main+0x1074>)
20001156:	2298      	movs	r2, #152	; 0x98
20001158:	00d2      	lsls	r2, r2, #3
2000115a:	4694      	mov	ip, r2
2000115c:	44bc      	add	ip, r7
2000115e:	4463      	add	r3, ip
20001160:	689a      	ldr	r2, [r3, #8]
20001162:	4b3c      	ldr	r3, [pc, #240]	; (20001254 <main+0x1058>)
20001164:	2198      	movs	r1, #152	; 0x98
20001166:	00c9      	lsls	r1, r1, #3
20001168:	468c      	mov	ip, r1
2000116a:	44bc      	add	ip, r7
2000116c:	4463      	add	r3, ip
2000116e:	689b      	ldr	r3, [r3, #8]
20001170:	429a      	cmp	r2, r3
20001172:	db28      	blt.n	200011c6 <main+0xfca>
20001174:	4b37      	ldr	r3, [pc, #220]	; (20001254 <main+0x1058>)
20001176:	2298      	movs	r2, #152	; 0x98
20001178:	00d2      	lsls	r2, r2, #3
2000117a:	4694      	mov	ip, r2
2000117c:	44bc      	add	ip, r7
2000117e:	4463      	add	r3, ip
20001180:	685b      	ldr	r3, [r3, #4]
20001182:	3309      	adds	r3, #9
20001184:	001a      	movs	r2, r3
20001186:	4b3a      	ldr	r3, [pc, #232]	; (20001270 <main+0x1074>)
20001188:	2198      	movs	r1, #152	; 0x98
2000118a:	00c9      	lsls	r1, r1, #3
2000118c:	468c      	mov	ip, r1
2000118e:	44bc      	add	ip, r7
20001190:	4463      	add	r3, ip
20001192:	685b      	ldr	r3, [r3, #4]
20001194:	429a      	cmp	r2, r3
20001196:	db16      	blt.n	200011c6 <main+0xfca>
20001198:	4b2e      	ldr	r3, [pc, #184]	; (20001254 <main+0x1058>)
2000119a:	2298      	movs	r2, #152	; 0x98
2000119c:	00d2      	lsls	r2, r2, #3
2000119e:	4694      	mov	ip, r2
200011a0:	44bc      	add	ip, r7
200011a2:	4463      	add	r3, ip
200011a4:	685a      	ldr	r2, [r3, #4]
200011a6:	4b32      	ldr	r3, [pc, #200]	; (20001270 <main+0x1074>)
200011a8:	2198      	movs	r1, #152	; 0x98
200011aa:	00c9      	lsls	r1, r1, #3
200011ac:	468c      	mov	ip, r1
200011ae:	44bc      	add	ip, r7
200011b0:	4463      	add	r3, ip
200011b2:	685b      	ldr	r3, [r3, #4]
200011b4:	3309      	adds	r3, #9
200011b6:	429a      	cmp	r2, r3
200011b8:	dc05      	bgt.n	200011c6 <main+0xfca>
					ascii_write("Daffo: I need magic ","to grab the trophy!");
200011ba:	4a2e      	ldr	r2, [pc, #184]	; (20001274 <main+0x1078>)
200011bc:	4b2e      	ldr	r3, [pc, #184]	; (20001278 <main+0x107c>)
200011be:	0011      	movs	r1, r2
200011c0:	0018      	movs	r0, r3
200011c2:	f003 f803 	bl	200041cc <ascii_write>
				}
				
				if (read_DIL_single(EXPLOSION_TRIGGER)){
200011c6:	2003      	movs	r0, #3
200011c8:	f002 fe0e 	bl	20003de8 <read_DIL_single>
200011cc:	1e03      	subs	r3, r0, #0
200011ce:	d067      	beq.n	200012a0 <main+0x10a4>
					if (trophy.yPos >= player.yPos && (player.xPos + PLAYER_WIDTH/2 >= trophy.xPos && player.xPos <= trophy.xPos + PLAYER_WIDTH/2 )){
200011d0:	4b27      	ldr	r3, [pc, #156]	; (20001270 <main+0x1074>)
200011d2:	2298      	movs	r2, #152	; 0x98
200011d4:	00d2      	lsls	r2, r2, #3
200011d6:	4694      	mov	ip, r2
200011d8:	44bc      	add	ip, r7
200011da:	4463      	add	r3, ip
200011dc:	689a      	ldr	r2, [r3, #8]
200011de:	4b1d      	ldr	r3, [pc, #116]	; (20001254 <main+0x1058>)
200011e0:	2198      	movs	r1, #152	; 0x98
200011e2:	00c9      	lsls	r1, r1, #3
200011e4:	468c      	mov	ip, r1
200011e6:	44bc      	add	ip, r7
200011e8:	4463      	add	r3, ip
200011ea:	689b      	ldr	r3, [r3, #8]
200011ec:	429a      	cmp	r2, r3
200011ee:	db47      	blt.n	20001280 <main+0x1084>
200011f0:	4b18      	ldr	r3, [pc, #96]	; (20001254 <main+0x1058>)
200011f2:	2298      	movs	r2, #152	; 0x98
200011f4:	00d2      	lsls	r2, r2, #3
200011f6:	4694      	mov	ip, r2
200011f8:	44bc      	add	ip, r7
200011fa:	4463      	add	r3, ip
200011fc:	685b      	ldr	r3, [r3, #4]
200011fe:	3309      	adds	r3, #9
20001200:	001a      	movs	r2, r3
20001202:	4b1b      	ldr	r3, [pc, #108]	; (20001270 <main+0x1074>)
20001204:	2198      	movs	r1, #152	; 0x98
20001206:	00c9      	lsls	r1, r1, #3
20001208:	468c      	mov	ip, r1
2000120a:	44bc      	add	ip, r7
2000120c:	4463      	add	r3, ip
2000120e:	685b      	ldr	r3, [r3, #4]
20001210:	429a      	cmp	r2, r3
20001212:	db35      	blt.n	20001280 <main+0x1084>
20001214:	4b0f      	ldr	r3, [pc, #60]	; (20001254 <main+0x1058>)
20001216:	2298      	movs	r2, #152	; 0x98
20001218:	00d2      	lsls	r2, r2, #3
2000121a:	4694      	mov	ip, r2
2000121c:	44bc      	add	ip, r7
2000121e:	4463      	add	r3, ip
20001220:	685a      	ldr	r2, [r3, #4]
20001222:	4b13      	ldr	r3, [pc, #76]	; (20001270 <main+0x1074>)
20001224:	2198      	movs	r1, #152	; 0x98
20001226:	00c9      	lsls	r1, r1, #3
20001228:	468c      	mov	ip, r1
2000122a:	44bc      	add	ip, r7
2000122c:	4463      	add	r3, ip
2000122e:	685b      	ldr	r3, [r3, #4]
20001230:	3309      	adds	r3, #9
20001232:	429a      	cmp	r2, r3
20001234:	dc24      	bgt.n	20001280 <main+0x1084>
						//TODO WIN
						ascii_write("PLACEHOLDER DU VANN","");
20001236:	4a0b      	ldr	r2, [pc, #44]	; (20001264 <main+0x1068>)
20001238:	4b10      	ldr	r3, [pc, #64]	; (2000127c <main+0x1080>)
2000123a:	0011      	movs	r1, r2
2000123c:	0018      	movs	r0, r3
2000123e:	f002 ffc5 	bl	200041cc <ascii_write>
20001242:	e02d      	b.n	200012a0 <main+0x10a4>
20001244:	000004ac 	andeq	r0, r0, ip, lsr #9
20001248:	2000494c 	andcs	r4, r0, ip, asr #18
2000124c:	fffffc44 			; <UNDEFINED> instruction: 0xfffffc44
20001250:	000004a4 	andeq	r0, r0, r4, lsr #9
20001254:	fffffdac 			; <UNDEFINED> instruction: 0xfffffdac
20001258:	fffffdf4 			; <UNDEFINED> instruction: 0xfffffdf4
2000125c:	200089ec 	andcs	r8, r0, ip, ror #19
20001260:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
20001264:	2000f66c 	andcs	pc, r0, ip, ror #12
20001268:	2000f678 	andcs	pc, r0, r8, ror r6	; <UNPREDICTABLE>
2000126c:	2000f680 	andcs	pc, r0, r0, lsl #13
20001270:	fffffe60 			; <UNDEFINED> instruction: 0xfffffe60
20001274:	2000f688 	andcs	pc, r0, r8, lsl #13
20001278:	2000f69c 	mulcs	r0, ip, r6
2000127c:	2000f6b4 			; <UNDEFINED> instruction: 0x2000f6b4
					}
					else{
						game_over_adder = 5;
20001280:	2305      	movs	r3, #5
20001282:	2296      	movs	r2, #150	; 0x96
20001284:	00d2      	lsls	r2, r2, #3
20001286:	18ba      	adds	r2, r7, r2
20001288:	6013      	str	r3, [r2, #0]
						ascii_write("*KABOOOOM*","");
2000128a:	4a64      	ldr	r2, [pc, #400]	; (2000141c <main+0x1220>)
2000128c:	4b64      	ldr	r3, [pc, #400]	; (20001420 <main+0x1224>)
2000128e:	0011      	movs	r1, r2
20001290:	0018      	movs	r0, r3
20001292:	f002 ff9b 	bl	200041cc <ascii_write>
						exploding = 1;
20001296:	2301      	movs	r3, #1
20001298:	2295      	movs	r2, #149	; 0x95
2000129a:	00d2      	lsls	r2, r2, #3
2000129c:	18ba      	adds	r2, r7, r2
2000129e:	6013      	str	r3, [r2, #0]
				}
				
				//fire1_indoors.update(&fire1_indoors);
				//fire updates done above
				
				hair.update(&hair);
200012a0:	4b60      	ldr	r3, [pc, #384]	; (20001424 <main+0x1228>)
200012a2:	2298      	movs	r2, #152	; 0x98
200012a4:	00d2      	lsls	r2, r2, #3
200012a6:	4694      	mov	ip, r2
200012a8:	44bc      	add	ip, r7
200012aa:	4463      	add	r3, ip
200012ac:	68db      	ldr	r3, [r3, #12]
200012ae:	22bf      	movs	r2, #191	; 0xbf
200012b0:	0092      	lsls	r2, r2, #2
200012b2:	18ba      	adds	r2, r7, r2
200012b4:	0010      	movs	r0, r2
200012b6:	4798      	blx	r3
				if(read_DIL_single(HAIR_TRIGGER)) {
200012b8:	2001      	movs	r0, #1
200012ba:	f002 fd95 	bl	20003de8 <read_DIL_single>
200012be:	1e03      	subs	r3, r0, #0
200012c0:	d02a      	beq.n	20001318 <main+0x111c>
					if (lastFireTrigger == 0){
200012c2:	2394      	movs	r3, #148	; 0x94
200012c4:	00db      	lsls	r3, r3, #3
200012c6:	18fb      	adds	r3, r7, r3
200012c8:	681b      	ldr	r3, [r3, #0]
200012ca:	2b00      	cmp	r3, #0
200012cc:	d105      	bne.n	200012da <main+0x10de>
						ascii_write("*FwOOOo*","");
200012ce:	4a53      	ldr	r2, [pc, #332]	; (2000141c <main+0x1220>)
200012d0:	4b55      	ldr	r3, [pc, #340]	; (20001428 <main+0x122c>)
200012d2:	0011      	movs	r1, r2
200012d4:	0018      	movs	r0, r3
200012d6:	f002 ff79 	bl	200041cc <ascii_write>
					}
					hair.xPos = player.xPos;
200012da:	4b54      	ldr	r3, [pc, #336]	; (2000142c <main+0x1230>)
200012dc:	2298      	movs	r2, #152	; 0x98
200012de:	00d2      	lsls	r2, r2, #3
200012e0:	4694      	mov	ip, r2
200012e2:	44bc      	add	ip, r7
200012e4:	4463      	add	r3, ip
200012e6:	685a      	ldr	r2, [r3, #4]
200012e8:	4b4e      	ldr	r3, [pc, #312]	; (20001424 <main+0x1228>)
200012ea:	2198      	movs	r1, #152	; 0x98
200012ec:	00c9      	lsls	r1, r1, #3
200012ee:	468c      	mov	ip, r1
200012f0:	44bc      	add	ip, r7
200012f2:	4463      	add	r3, ip
200012f4:	605a      	str	r2, [r3, #4]
					hair.yPos = player.yPos - 28;
200012f6:	4b4d      	ldr	r3, [pc, #308]	; (2000142c <main+0x1230>)
200012f8:	2298      	movs	r2, #152	; 0x98
200012fa:	00d2      	lsls	r2, r2, #3
200012fc:	4694      	mov	ip, r2
200012fe:	44bc      	add	ip, r7
20001300:	4463      	add	r3, ip
20001302:	689b      	ldr	r3, [r3, #8]
20001304:	3b1c      	subs	r3, #28
20001306:	001a      	movs	r2, r3
20001308:	4b46      	ldr	r3, [pc, #280]	; (20001424 <main+0x1228>)
2000130a:	2198      	movs	r1, #152	; 0x98
2000130c:	00c9      	lsls	r1, r1, #3
2000130e:	468c      	mov	ip, r1
20001310:	44bc      	add	ip, r7
20001312:	4463      	add	r3, ip
20001314:	609a      	str	r2, [r3, #8]
20001316:	e011      	b.n	2000133c <main+0x1140>
				} else {
					hair.xPos = -100;
20001318:	4b42      	ldr	r3, [pc, #264]	; (20001424 <main+0x1228>)
2000131a:	2298      	movs	r2, #152	; 0x98
2000131c:	00d2      	lsls	r2, r2, #3
2000131e:	4694      	mov	ip, r2
20001320:	44bc      	add	ip, r7
20001322:	4463      	add	r3, ip
20001324:	2264      	movs	r2, #100	; 0x64
20001326:	4252      	negs	r2, r2
20001328:	605a      	str	r2, [r3, #4]
					hair.yPos = -100;
2000132a:	4b3e      	ldr	r3, [pc, #248]	; (20001424 <main+0x1228>)
2000132c:	2298      	movs	r2, #152	; 0x98
2000132e:	00d2      	lsls	r2, r2, #3
20001330:	4694      	mov	ip, r2
20001332:	44bc      	add	ip, r7
20001334:	4463      	add	r3, ip
20001336:	2264      	movs	r2, #100	; 0x64
20001338:	4252      	negs	r2, r2
2000133a:	609a      	str	r2, [r3, #8]
				}
				
				
				
				if (!no_DIP && DIP.yPos >= player.yPos && (player.xPos + DIP_WIDTH/2 >= DIP.xPos && player.xPos <= DIP.xPos + DIP_WIDTH/2 )){ // DIP_collision
2000133c:	4b3c      	ldr	r3, [pc, #240]	; (20001430 <main+0x1234>)
2000133e:	18fb      	adds	r3, r7, r3
20001340:	681b      	ldr	r3, [r3, #0]
20001342:	2b00      	cmp	r3, #0
20001344:	d143      	bne.n	200013ce <main+0x11d2>
20001346:	4b3b      	ldr	r3, [pc, #236]	; (20001434 <main+0x1238>)
20001348:	2298      	movs	r2, #152	; 0x98
2000134a:	00d2      	lsls	r2, r2, #3
2000134c:	4694      	mov	ip, r2
2000134e:	44bc      	add	ip, r7
20001350:	4463      	add	r3, ip
20001352:	689a      	ldr	r2, [r3, #8]
20001354:	4b35      	ldr	r3, [pc, #212]	; (2000142c <main+0x1230>)
20001356:	2198      	movs	r1, #152	; 0x98
20001358:	00c9      	lsls	r1, r1, #3
2000135a:	468c      	mov	ip, r1
2000135c:	44bc      	add	ip, r7
2000135e:	4463      	add	r3, ip
20001360:	689b      	ldr	r3, [r3, #8]
20001362:	429a      	cmp	r2, r3
20001364:	db33      	blt.n	200013ce <main+0x11d2>
20001366:	4b31      	ldr	r3, [pc, #196]	; (2000142c <main+0x1230>)
20001368:	2298      	movs	r2, #152	; 0x98
2000136a:	00d2      	lsls	r2, r2, #3
2000136c:	4694      	mov	ip, r2
2000136e:	44bc      	add	ip, r7
20001370:	4463      	add	r3, ip
20001372:	685b      	ldr	r3, [r3, #4]
20001374:	3309      	adds	r3, #9
20001376:	001a      	movs	r2, r3
20001378:	4b2e      	ldr	r3, [pc, #184]	; (20001434 <main+0x1238>)
2000137a:	2198      	movs	r1, #152	; 0x98
2000137c:	00c9      	lsls	r1, r1, #3
2000137e:	468c      	mov	ip, r1
20001380:	44bc      	add	ip, r7
20001382:	4463      	add	r3, ip
20001384:	685b      	ldr	r3, [r3, #4]
20001386:	429a      	cmp	r2, r3
20001388:	db21      	blt.n	200013ce <main+0x11d2>
2000138a:	4b28      	ldr	r3, [pc, #160]	; (2000142c <main+0x1230>)
2000138c:	2298      	movs	r2, #152	; 0x98
2000138e:	00d2      	lsls	r2, r2, #3
20001390:	4694      	mov	ip, r2
20001392:	44bc      	add	ip, r7
20001394:	4463      	add	r3, ip
20001396:	685a      	ldr	r2, [r3, #4]
20001398:	4b26      	ldr	r3, [pc, #152]	; (20001434 <main+0x1238>)
2000139a:	2198      	movs	r1, #152	; 0x98
2000139c:	00c9      	lsls	r1, r1, #3
2000139e:	468c      	mov	ip, r1
200013a0:	44bc      	add	ip, r7
200013a2:	4463      	add	r3, ip
200013a4:	685b      	ldr	r3, [r3, #4]
200013a6:	3309      	adds	r3, #9
200013a8:	429a      	cmp	r2, r3
200013aa:	dc10      	bgt.n	200013ce <main+0x11d2>
					game_over_adder = 5;
200013ac:	2305      	movs	r3, #5
200013ae:	2296      	movs	r2, #150	; 0x96
200013b0:	00d2      	lsls	r2, r2, #3
200013b2:	18ba      	adds	r2, r7, r2
200013b4:	6013      	str	r3, [r2, #0]
					ascii_write("DIPs-WITCH:","      NyAHAHAHAH!");
200013b6:	4a20      	ldr	r2, [pc, #128]	; (20001438 <main+0x123c>)
200013b8:	4b20      	ldr	r3, [pc, #128]	; (2000143c <main+0x1240>)
200013ba:	0011      	movs	r1, r2
200013bc:	0018      	movs	r0, r3
200013be:	f002 ff05 	bl	200041cc <ascii_write>
					exploding = 1;
200013c2:	2301      	movs	r3, #1
200013c4:	2295      	movs	r2, #149	; 0x95
200013c6:	00d2      	lsls	r2, r2, #3
200013c8:	18ba      	adds	r2, r7, r2
200013ca:	6013      	str	r3, [r2, #0]
200013cc:	e022      	b.n	20001414 <main+0x1218>
				} else if(!no_DIP) {
200013ce:	4b18      	ldr	r3, [pc, #96]	; (20001430 <main+0x1234>)
200013d0:	18fb      	adds	r3, r7, r3
200013d2:	681b      	ldr	r3, [r3, #0]
200013d4:	2b00      	cmp	r3, #0
200013d6:	d11d      	bne.n	20001414 <main+0x1218>
					setPlayerPosition(player.xPos, player.yPos);
200013d8:	4b14      	ldr	r3, [pc, #80]	; (2000142c <main+0x1230>)
200013da:	2298      	movs	r2, #152	; 0x98
200013dc:	00d2      	lsls	r2, r2, #3
200013de:	4694      	mov	ip, r2
200013e0:	44bc      	add	ip, r7
200013e2:	4463      	add	r3, ip
200013e4:	685a      	ldr	r2, [r3, #4]
200013e6:	4b11      	ldr	r3, [pc, #68]	; (2000142c <main+0x1230>)
200013e8:	2198      	movs	r1, #152	; 0x98
200013ea:	00c9      	lsls	r1, r1, #3
200013ec:	468c      	mov	ip, r1
200013ee:	44bc      	add	ip, r7
200013f0:	4463      	add	r3, ip
200013f2:	689b      	ldr	r3, [r3, #8]
200013f4:	0019      	movs	r1, r3
200013f6:	0010      	movs	r0, r2
200013f8:	f001 f908 	bl	2000260c <setPlayerPosition>
					DIP.update(&DIP);					
200013fc:	4b0d      	ldr	r3, [pc, #52]	; (20001434 <main+0x1238>)
200013fe:	2298      	movs	r2, #152	; 0x98
20001400:	00d2      	lsls	r2, r2, #3
20001402:	4694      	mov	ip, r2
20001404:	44bc      	add	ip, r7
20001406:	4463      	add	r3, ip
20001408:	68db      	ldr	r3, [r3, #12]
2000140a:	22a4      	movs	r2, #164	; 0xa4
2000140c:	0092      	lsls	r2, r2, #2
2000140e:	18ba      	adds	r2, r7, r2
20001410:	0010      	movs	r0, r2
20001412:	4798      	blx	r3
				}
				
				static int distance_player_fire;	//fire_collision
				static int j;
				for(j = 0; j < 3; j++) {
20001414:	4b0a      	ldr	r3, [pc, #40]	; (20001440 <main+0x1244>)
20001416:	2200      	movs	r2, #0
20001418:	601a      	str	r2, [r3, #0]
2000141a:	e07a      	b.n	20001512 <main+0x1316>
2000141c:	2000f66c 	andcs	pc, r0, ip, ror #12
20001420:	2000f6c8 	andcs	pc, r0, r8, asr #13
20001424:	fffffe3c 			; <UNDEFINED> instruction: 0xfffffe3c
20001428:	2000f6d4 	ldrdcs	pc, [r0], -r4
2000142c:	fffffdac 			; <UNDEFINED> instruction: 0xfffffdac
20001430:	000004ac 	andeq	r0, r0, ip, lsr #9
20001434:	fffffdd0 			; <UNDEFINED> instruction: 0xfffffdd0
20001438:	2000f6e0 	andcs	pc, r0, r0, ror #13
2000143c:	2000f6f4 	strdcs	pc, [r0], -r4
20001440:	20004950 	andcs	r4, r0, r0, asr r9
					distance_player_fire = (player.xPos + 9) - (fires[j].xPos + 5);
20001444:	4b97      	ldr	r3, [pc, #604]	; (200016a4 <main+0x14a8>)
20001446:	2298      	movs	r2, #152	; 0x98
20001448:	00d2      	lsls	r2, r2, #3
2000144a:	4694      	mov	ip, r2
2000144c:	44bc      	add	ip, r7
2000144e:	4463      	add	r3, ip
20001450:	685b      	ldr	r3, [r3, #4]
20001452:	3309      	adds	r3, #9
20001454:	0019      	movs	r1, r3
20001456:	4b94      	ldr	r3, [pc, #592]	; (200016a8 <main+0x14ac>)
20001458:	681a      	ldr	r2, [r3, #0]
2000145a:	4b94      	ldr	r3, [pc, #592]	; (200016ac <main+0x14b0>)
2000145c:	2098      	movs	r0, #152	; 0x98
2000145e:	00c0      	lsls	r0, r0, #3
20001460:	1838      	adds	r0, r7, r0
20001462:	18c0      	adds	r0, r0, r3
20001464:	0013      	movs	r3, r2
20001466:	00db      	lsls	r3, r3, #3
20001468:	189b      	adds	r3, r3, r2
2000146a:	009b      	lsls	r3, r3, #2
2000146c:	18c3      	adds	r3, r0, r3
2000146e:	3304      	adds	r3, #4
20001470:	681b      	ldr	r3, [r3, #0]
20001472:	3305      	adds	r3, #5
20001474:	1aca      	subs	r2, r1, r3
20001476:	4b8e      	ldr	r3, [pc, #568]	; (200016b0 <main+0x14b4>)
20001478:	601a      	str	r2, [r3, #0]
					if(player.yPos > (fires[j].yPos - 18 + 7) && 
2000147a:	4b8a      	ldr	r3, [pc, #552]	; (200016a4 <main+0x14a8>)
2000147c:	2298      	movs	r2, #152	; 0x98
2000147e:	00d2      	lsls	r2, r2, #3
20001480:	4694      	mov	ip, r2
20001482:	44bc      	add	ip, r7
20001484:	4463      	add	r3, ip
20001486:	6899      	ldr	r1, [r3, #8]
20001488:	4b87      	ldr	r3, [pc, #540]	; (200016a8 <main+0x14ac>)
2000148a:	681a      	ldr	r2, [r3, #0]
2000148c:	4b87      	ldr	r3, [pc, #540]	; (200016ac <main+0x14b0>)
2000148e:	2098      	movs	r0, #152	; 0x98
20001490:	00c0      	lsls	r0, r0, #3
20001492:	1838      	adds	r0, r7, r0
20001494:	18c0      	adds	r0, r0, r3
20001496:	0013      	movs	r3, r2
20001498:	00db      	lsls	r3, r3, #3
2000149a:	189b      	adds	r3, r3, r2
2000149c:	009b      	lsls	r3, r3, #2
2000149e:	18c3      	adds	r3, r0, r3
200014a0:	3308      	adds	r3, #8
200014a2:	681b      	ldr	r3, [r3, #0]
200014a4:	3b0b      	subs	r3, #11
200014a6:	4299      	cmp	r1, r3
200014a8:	dd2e      	ble.n	20001508 <main+0x130c>
							player.yPos < fires[j].yPos && distance_player_fire < 8 && distance_player_fire > -8) {
200014aa:	4b7e      	ldr	r3, [pc, #504]	; (200016a4 <main+0x14a8>)
200014ac:	2298      	movs	r2, #152	; 0x98
200014ae:	00d2      	lsls	r2, r2, #3
200014b0:	4694      	mov	ip, r2
200014b2:	44bc      	add	ip, r7
200014b4:	4463      	add	r3, ip
200014b6:	6899      	ldr	r1, [r3, #8]
200014b8:	4b7b      	ldr	r3, [pc, #492]	; (200016a8 <main+0x14ac>)
200014ba:	681a      	ldr	r2, [r3, #0]
200014bc:	4b7b      	ldr	r3, [pc, #492]	; (200016ac <main+0x14b0>)
200014be:	2098      	movs	r0, #152	; 0x98
200014c0:	00c0      	lsls	r0, r0, #3
200014c2:	1838      	adds	r0, r7, r0
200014c4:	18c0      	adds	r0, r0, r3
200014c6:	0013      	movs	r3, r2
200014c8:	00db      	lsls	r3, r3, #3
200014ca:	189b      	adds	r3, r3, r2
200014cc:	009b      	lsls	r3, r3, #2
200014ce:	18c3      	adds	r3, r0, r3
200014d0:	3308      	adds	r3, #8
200014d2:	681b      	ldr	r3, [r3, #0]
					if(player.yPos > (fires[j].yPos - 18 + 7) && 
200014d4:	4299      	cmp	r1, r3
200014d6:	da17      	bge.n	20001508 <main+0x130c>
							player.yPos < fires[j].yPos && distance_player_fire < 8 && distance_player_fire > -8) {
200014d8:	4b75      	ldr	r3, [pc, #468]	; (200016b0 <main+0x14b4>)
200014da:	681b      	ldr	r3, [r3, #0]
200014dc:	2b07      	cmp	r3, #7
200014de:	dc13      	bgt.n	20001508 <main+0x130c>
200014e0:	4b73      	ldr	r3, [pc, #460]	; (200016b0 <main+0x14b4>)
200014e2:	681b      	ldr	r3, [r3, #0]
200014e4:	3307      	adds	r3, #7
200014e6:	db0f      	blt.n	20001508 <main+0x130c>
						game_over_adder = 10;
200014e8:	230a      	movs	r3, #10
200014ea:	2296      	movs	r2, #150	; 0x96
200014ec:	00d2      	lsls	r2, r2, #3
200014ee:	18ba      	adds	r2, r7, r2
200014f0:	6013      	str	r3, [r2, #0]
						ascii_write("*FWOOSH*","");
200014f2:	4a70      	ldr	r2, [pc, #448]	; (200016b4 <main+0x14b8>)
200014f4:	4b70      	ldr	r3, [pc, #448]	; (200016b8 <main+0x14bc>)
200014f6:	0011      	movs	r1, r2
200014f8:	0018      	movs	r0, r3
200014fa:	f002 fe67 	bl	200041cc <ascii_write>
						exploding = 1;
200014fe:	2301      	movs	r3, #1
20001500:	2295      	movs	r2, #149	; 0x95
20001502:	00d2      	lsls	r2, r2, #3
20001504:	18ba      	adds	r2, r7, r2
20001506:	6013      	str	r3, [r2, #0]
				for(j = 0; j < 3; j++) {
20001508:	4b67      	ldr	r3, [pc, #412]	; (200016a8 <main+0x14ac>)
2000150a:	681b      	ldr	r3, [r3, #0]
2000150c:	1c5a      	adds	r2, r3, #1
2000150e:	4b66      	ldr	r3, [pc, #408]	; (200016a8 <main+0x14ac>)
20001510:	601a      	str	r2, [r3, #0]
20001512:	4b65      	ldr	r3, [pc, #404]	; (200016a8 <main+0x14ac>)
20001514:	681b      	ldr	r3, [r3, #0]
20001516:	2b02      	cmp	r3, #2
20001518:	dd94      	ble.n	20001444 <main+0x1248>
					}					
				}
				
				static int trophy_burned = 0;	//trophy burning
				static int distance_hair_trophy;
				distance_hair_trophy = (hair.xPos + 9) - (trophy.xPos + 5);
2000151a:	4b68      	ldr	r3, [pc, #416]	; (200016bc <main+0x14c0>)
2000151c:	2298      	movs	r2, #152	; 0x98
2000151e:	00d2      	lsls	r2, r2, #3
20001520:	4694      	mov	ip, r2
20001522:	44bc      	add	ip, r7
20001524:	4463      	add	r3, ip
20001526:	685b      	ldr	r3, [r3, #4]
20001528:	3309      	adds	r3, #9
2000152a:	001a      	movs	r2, r3
2000152c:	4b64      	ldr	r3, [pc, #400]	; (200016c0 <main+0x14c4>)
2000152e:	2198      	movs	r1, #152	; 0x98
20001530:	00c9      	lsls	r1, r1, #3
20001532:	468c      	mov	ip, r1
20001534:	44bc      	add	ip, r7
20001536:	4463      	add	r3, ip
20001538:	685b      	ldr	r3, [r3, #4]
2000153a:	3305      	adds	r3, #5
2000153c:	1ad2      	subs	r2, r2, r3
2000153e:	4b61      	ldr	r3, [pc, #388]	; (200016c4 <main+0x14c8>)
20001540:	601a      	str	r2, [r3, #0]
				if(!trophy_burned && abs(distance_hair_trophy) < 5) {
20001542:	4b61      	ldr	r3, [pc, #388]	; (200016c8 <main+0x14cc>)
20001544:	681b      	ldr	r3, [r3, #0]
20001546:	2b00      	cmp	r3, #0
20001548:	d136      	bne.n	200015b8 <main+0x13bc>
2000154a:	4b5e      	ldr	r3, [pc, #376]	; (200016c4 <main+0x14c8>)
2000154c:	681b      	ldr	r3, [r3, #0]
2000154e:	3304      	adds	r3, #4
20001550:	db32      	blt.n	200015b8 <main+0x13bc>
20001552:	4b5c      	ldr	r3, [pc, #368]	; (200016c4 <main+0x14c8>)
20001554:	681b      	ldr	r3, [r3, #0]
20001556:	2b04      	cmp	r3, #4
20001558:	dc2e      	bgt.n	200015b8 <main+0x13bc>
					trophy_burned = 1;
2000155a:	4b5b      	ldr	r3, [pc, #364]	; (200016c8 <main+0x14cc>)
2000155c:	2201      	movs	r2, #1
2000155e:	601a      	str	r2, [r3, #0]
					fires[1].xPos = trophy.xPos;
20001560:	4b57      	ldr	r3, [pc, #348]	; (200016c0 <main+0x14c4>)
20001562:	2298      	movs	r2, #152	; 0x98
20001564:	00d2      	lsls	r2, r2, #3
20001566:	4694      	mov	ip, r2
20001568:	44bc      	add	ip, r7
2000156a:	4463      	add	r3, ip
2000156c:	685a      	ldr	r2, [r3, #4]
2000156e:	4b4f      	ldr	r3, [pc, #316]	; (200016ac <main+0x14b0>)
20001570:	2198      	movs	r1, #152	; 0x98
20001572:	00c9      	lsls	r1, r1, #3
20001574:	468c      	mov	ip, r1
20001576:	44bc      	add	ip, r7
20001578:	4463      	add	r3, ip
2000157a:	629a      	str	r2, [r3, #40]	; 0x28
					fires[1].yPos = trophy.yPos + 5;
2000157c:	4b50      	ldr	r3, [pc, #320]	; (200016c0 <main+0x14c4>)
2000157e:	2298      	movs	r2, #152	; 0x98
20001580:	00d2      	lsls	r2, r2, #3
20001582:	4694      	mov	ip, r2
20001584:	44bc      	add	ip, r7
20001586:	4463      	add	r3, ip
20001588:	689b      	ldr	r3, [r3, #8]
2000158a:	1d5a      	adds	r2, r3, #5
2000158c:	4b47      	ldr	r3, [pc, #284]	; (200016ac <main+0x14b0>)
2000158e:	2198      	movs	r1, #152	; 0x98
20001590:	00c9      	lsls	r1, r1, #3
20001592:	468c      	mov	ip, r1
20001594:	44bc      	add	ip, r7
20001596:	4463      	add	r3, ip
20001598:	62da      	str	r2, [r3, #44]	; 0x2c
					trophy.xPos = 500;
2000159a:	4b49      	ldr	r3, [pc, #292]	; (200016c0 <main+0x14c4>)
2000159c:	2298      	movs	r2, #152	; 0x98
2000159e:	00d2      	lsls	r2, r2, #3
200015a0:	4694      	mov	ip, r2
200015a2:	44bc      	add	ip, r7
200015a4:	4463      	add	r3, ip
200015a6:	22fa      	movs	r2, #250	; 0xfa
200015a8:	0052      	lsls	r2, r2, #1
200015aa:	605a      	str	r2, [r3, #4]
					ascii_write("DAFFO:  ","        Oops...!");
200015ac:	4a47      	ldr	r2, [pc, #284]	; (200016cc <main+0x14d0>)
200015ae:	4b48      	ldr	r3, [pc, #288]	; (200016d0 <main+0x14d4>)
200015b0:	0011      	movs	r1, r2
200015b2:	0018      	movs	r0, r3
200015b4:	f002 fe0a 	bl	200041cc <ascii_write>
				}
				
				static int DIP_burned = 0;
				static int distance_hair_DIP;
				distance_hair_DIP = (hair.xPos + 9) - (DIP.xPos + 9);
200015b8:	4b40      	ldr	r3, [pc, #256]	; (200016bc <main+0x14c0>)
200015ba:	2298      	movs	r2, #152	; 0x98
200015bc:	00d2      	lsls	r2, r2, #3
200015be:	4694      	mov	ip, r2
200015c0:	44bc      	add	ip, r7
200015c2:	4463      	add	r3, ip
200015c4:	685b      	ldr	r3, [r3, #4]
200015c6:	3309      	adds	r3, #9
200015c8:	001a      	movs	r2, r3
200015ca:	4b42      	ldr	r3, [pc, #264]	; (200016d4 <main+0x14d8>)
200015cc:	2198      	movs	r1, #152	; 0x98
200015ce:	00c9      	lsls	r1, r1, #3
200015d0:	468c      	mov	ip, r1
200015d2:	44bc      	add	ip, r7
200015d4:	4463      	add	r3, ip
200015d6:	685b      	ldr	r3, [r3, #4]
200015d8:	3309      	adds	r3, #9
200015da:	1ad2      	subs	r2, r2, r3
200015dc:	4b3e      	ldr	r3, [pc, #248]	; (200016d8 <main+0x14dc>)
200015de:	601a      	str	r2, [r3, #0]
				if(!DIP_burned && read_DIL_single(LIGHT_TRIGGER) && player.yPos > 10 && abs(distance_hair_DIP) < 5) {
200015e0:	4b3e      	ldr	r3, [pc, #248]	; (200016dc <main+0x14e0>)
200015e2:	681b      	ldr	r3, [r3, #0]
200015e4:	2b00      	cmp	r3, #0
200015e6:	d13f      	bne.n	20001668 <main+0x146c>
200015e8:	2006      	movs	r0, #6
200015ea:	f002 fbfd 	bl	20003de8 <read_DIL_single>
200015ee:	1e03      	subs	r3, r0, #0
200015f0:	d03a      	beq.n	20001668 <main+0x146c>
200015f2:	4b2c      	ldr	r3, [pc, #176]	; (200016a4 <main+0x14a8>)
200015f4:	2298      	movs	r2, #152	; 0x98
200015f6:	00d2      	lsls	r2, r2, #3
200015f8:	4694      	mov	ip, r2
200015fa:	44bc      	add	ip, r7
200015fc:	4463      	add	r3, ip
200015fe:	689b      	ldr	r3, [r3, #8]
20001600:	2b0a      	cmp	r3, #10
20001602:	dd31      	ble.n	20001668 <main+0x146c>
20001604:	4b34      	ldr	r3, [pc, #208]	; (200016d8 <main+0x14dc>)
20001606:	681b      	ldr	r3, [r3, #0]
20001608:	3304      	adds	r3, #4
2000160a:	db2d      	blt.n	20001668 <main+0x146c>
2000160c:	4b32      	ldr	r3, [pc, #200]	; (200016d8 <main+0x14dc>)
2000160e:	681b      	ldr	r3, [r3, #0]
20001610:	2b04      	cmp	r3, #4
20001612:	dc29      	bgt.n	20001668 <main+0x146c>
					ascii_write("DIPs-WITCH:","         ARHGRGHR!");
20001614:	4a32      	ldr	r2, [pc, #200]	; (200016e0 <main+0x14e4>)
20001616:	4b33      	ldr	r3, [pc, #204]	; (200016e4 <main+0x14e8>)
20001618:	0011      	movs	r1, r2
2000161a:	0018      	movs	r0, r3
2000161c:	f002 fdd6 	bl	200041cc <ascii_write>
					DIP_burned = 1;
20001620:	4b2e      	ldr	r3, [pc, #184]	; (200016dc <main+0x14e0>)
20001622:	2201      	movs	r2, #1
20001624:	601a      	str	r2, [r3, #0]
					fires[2].xPos = DIP.xPos;
20001626:	4b2b      	ldr	r3, [pc, #172]	; (200016d4 <main+0x14d8>)
20001628:	2298      	movs	r2, #152	; 0x98
2000162a:	00d2      	lsls	r2, r2, #3
2000162c:	4694      	mov	ip, r2
2000162e:	44bc      	add	ip, r7
20001630:	4463      	add	r3, ip
20001632:	685a      	ldr	r2, [r3, #4]
20001634:	4b1d      	ldr	r3, [pc, #116]	; (200016ac <main+0x14b0>)
20001636:	2198      	movs	r1, #152	; 0x98
20001638:	00c9      	lsls	r1, r1, #3
2000163a:	468c      	mov	ip, r1
2000163c:	44bc      	add	ip, r7
2000163e:	4463      	add	r3, ip
20001640:	64da      	str	r2, [r3, #76]	; 0x4c
					fires[2].yPos = DIP.yPos + 6;
20001642:	4b24      	ldr	r3, [pc, #144]	; (200016d4 <main+0x14d8>)
20001644:	2298      	movs	r2, #152	; 0x98
20001646:	00d2      	lsls	r2, r2, #3
20001648:	4694      	mov	ip, r2
2000164a:	44bc      	add	ip, r7
2000164c:	4463      	add	r3, ip
2000164e:	689b      	ldr	r3, [r3, #8]
20001650:	1d9a      	adds	r2, r3, #6
20001652:	4b16      	ldr	r3, [pc, #88]	; (200016ac <main+0x14b0>)
20001654:	2198      	movs	r1, #152	; 0x98
20001656:	00c9      	lsls	r1, r1, #3
20001658:	468c      	mov	ip, r1
2000165a:	44bc      	add	ip, r7
2000165c:	4463      	add	r3, ip
2000165e:	651a      	str	r2, [r3, #80]	; 0x50
					no_DIP = 1;
20001660:	2301      	movs	r3, #1
20001662:	4a21      	ldr	r2, [pc, #132]	; (200016e8 <main+0x14ec>)
20001664:	18ba      	adds	r2, r7, r2
20001666:	6013      	str	r3, [r2, #0]
				}
				
				lastFireTrigger = read_DIL_single(HAIR_TRIGGER);
20001668:	2001      	movs	r0, #1
2000166a:	f002 fbbd 	bl	20003de8 <read_DIL_single>
2000166e:	0003      	movs	r3, r0
20001670:	2294      	movs	r2, #148	; 0x94
20001672:	00d2      	lsls	r2, r2, #3
20001674:	18ba      	adds	r2, r7, r2
20001676:	6013      	str	r3, [r2, #0]
				
				game_over += game_over_adder;
20001678:	4b1c      	ldr	r3, [pc, #112]	; (200016ec <main+0x14f0>)
2000167a:	18fb      	adds	r3, r7, r3
2000167c:	681a      	ldr	r2, [r3, #0]
2000167e:	2396      	movs	r3, #150	; 0x96
20001680:	00db      	lsls	r3, r3, #3
20001682:	18fb      	adds	r3, r7, r3
20001684:	681b      	ldr	r3, [r3, #0]
20001686:	18d3      	adds	r3, r2, r3
20001688:	4a18      	ldr	r2, [pc, #96]	; (200016ec <main+0x14f0>)
2000168a:	18ba      	adds	r2, r7, r2
2000168c:	6013      	str	r3, [r2, #0]
				
				if(game_over >= 100) {
2000168e:	4b17      	ldr	r3, [pc, #92]	; (200016ec <main+0x14f0>)
20001690:	18fb      	adds	r3, r7, r3
20001692:	681b      	ldr	r3, [r3, #0]
20001694:	2b63      	cmp	r3, #99	; 0x63
20001696:	dc00      	bgt.n	2000169a <main+0x149e>
20001698:	e0fa      	b.n	20001890 <main+0x1694>
					current_screen = RESET_GAME;
2000169a:	4b15      	ldr	r3, [pc, #84]	; (200016f0 <main+0x14f4>)
2000169c:	220a      	movs	r2, #10
2000169e:	601a      	str	r2, [r3, #0]
				}
				
				break;
200016a0:	e0f6      	b.n	20001890 <main+0x1694>
200016a2:	46c0      	nop			; (mov r8, r8)
200016a4:	fffffdac 			; <UNDEFINED> instruction: 0xfffffdac
200016a8:	20004950 	andcs	r4, r0, r0, asr r9
200016ac:	fffffc44 			; <UNDEFINED> instruction: 0xfffffc44
200016b0:	20004954 	andcs	r4, r0, r4, asr r9
200016b4:	2000f66c 	andcs	pc, r0, ip, ror #12
200016b8:	2000f700 	andcs	pc, r0, r0, lsl #14
200016bc:	fffffe3c 			; <UNDEFINED> instruction: 0xfffffe3c
200016c0:	fffffe60 			; <UNDEFINED> instruction: 0xfffffe60
200016c4:	20004958 	andcs	r4, r0, r8, asr r9
200016c8:	2000495c 	andcs	r4, r0, ip, asr r9
200016cc:	2000f70c 	andcs	pc, r0, ip, lsl #14
200016d0:	2000f720 	andcs	pc, r0, r0, lsr #14
200016d4:	fffffdd0 			; <UNDEFINED> instruction: 0xfffffdd0
200016d8:	20004960 	andcs	r4, r0, r0, ror #18
200016dc:	20004964 	andcs	r4, r0, r4, ror #18
200016e0:	2000f72c 	andcs	pc, r0, ip, lsr #14
200016e4:	2000f6f4 	strdcs	pc, [r0], -r4
200016e8:	000004ac 	andeq	r0, r0, ip, lsr #9
200016ec:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
200016f0:	200089dc 	ldrdcs	r8, [r0], -ip
				
			
			case RESET_GAME: //restart
				counter = 0;
200016f4:	4b68      	ldr	r3, [pc, #416]	; (20001898 <main+0x169c>)
200016f6:	2200      	movs	r2, #0
200016f8:	601a      	str	r2, [r3, #0]
				current_screen = START_SCREEN;
200016fa:	4b68      	ldr	r3, [pc, #416]	; (2000189c <main+0x16a0>)
200016fc:	2201      	movs	r2, #1
200016fe:	601a      	str	r2, [r3, #0]
				if(read_DIL() == 0) {
20001700:	f002 fb62 	bl	20003dc8 <read_DIL>
20001704:	1e03      	subs	r3, r0, #0
20001706:	d102      	bne.n	2000170e <main+0x1512>
					current_screen = SWITCH_LOCK; 
20001708:	4b64      	ldr	r3, [pc, #400]	; (2000189c <main+0x16a0>)
2000170a:	2200      	movs	r2, #0
2000170c:	601a      	str	r2, [r3, #0]
				}
	
				static int test = 0;
				test+=2;
2000170e:	4b64      	ldr	r3, [pc, #400]	; (200018a0 <main+0x16a4>)
20001710:	681b      	ldr	r3, [r3, #0]
20001712:	1c9a      	adds	r2, r3, #2
20001714:	4b62      	ldr	r3, [pc, #392]	; (200018a0 <main+0x16a4>)
20001716:	601a      	str	r2, [r3, #0]
				
				boom.current_frame = 0;
20001718:	4b62      	ldr	r3, [pc, #392]	; (200018a4 <main+0x16a8>)
2000171a:	2298      	movs	r2, #152	; 0x98
2000171c:	00d2      	lsls	r2, r2, #3
2000171e:	4694      	mov	ip, r2
20001720:	44bc      	add	ip, r7
20001722:	4463      	add	r3, ip
20001724:	2200      	movs	r2, #0
20001726:	615a      	str	r2, [r3, #20]
				first = 1;
20001728:	2301      	movs	r3, #1
2000172a:	4a5f      	ldr	r2, [pc, #380]	; (200018a8 <main+0x16ac>)
2000172c:	18ba      	adds	r2, r7, r2
2000172e:	6013      	str	r3, [r2, #0]
				exploding = 0;
20001730:	2300      	movs	r3, #0
20001732:	2295      	movs	r2, #149	; 0x95
20001734:	00d2      	lsls	r2, r2, #3
20001736:	18ba      	adds	r2, r7, r2
20001738:	6013      	str	r3, [r2, #0]
				is_climbing = 0;
2000173a:	2300      	movs	r3, #0
2000173c:	4a5b      	ldr	r2, [pc, #364]	; (200018ac <main+0x16b0>)
2000173e:	18ba      	adds	r2, r7, r2
20001740:	6013      	str	r3, [r2, #0]
				has_climbed = 0;
20001742:	2300      	movs	r3, #0
20001744:	2297      	movs	r2, #151	; 0x97
20001746:	00d2      	lsls	r2, r2, #3
20001748:	18ba      	adds	r2, r7, r2
2000174a:	6013      	str	r3, [r2, #0]
				game_over = 0;
2000174c:	2300      	movs	r3, #0
2000174e:	4a58      	ldr	r2, [pc, #352]	; (200018b0 <main+0x16b4>)
20001750:	18ba      	adds	r2, r7, r2
20001752:	6013      	str	r3, [r2, #0]
				game_over_adder = 0;
20001754:	2300      	movs	r3, #0
20001756:	2296      	movs	r2, #150	; 0x96
20001758:	00d2      	lsls	r2, r2, #3
2000175a:	18ba      	adds	r2, r7, r2
2000175c:	6013      	str	r3, [r2, #0]
				fires[0].xPos = 40;		//FIRE1_INDO
2000175e:	4b55      	ldr	r3, [pc, #340]	; (200018b4 <main+0x16b8>)
20001760:	2298      	movs	r2, #152	; 0x98
20001762:	00d2      	lsls	r2, r2, #3
20001764:	4694      	mov	ip, r2
20001766:	44bc      	add	ip, r7
20001768:	4463      	add	r3, ip
2000176a:	2228      	movs	r2, #40	; 0x28
2000176c:	605a      	str	r2, [r3, #4]
				fires[0].yPos = 64-12-8;
2000176e:	4b51      	ldr	r3, [pc, #324]	; (200018b4 <main+0x16b8>)
20001770:	2298      	movs	r2, #152	; 0x98
20001772:	00d2      	lsls	r2, r2, #3
20001774:	4694      	mov	ip, r2
20001776:	44bc      	add	ip, r7
20001778:	4463      	add	r3, ip
2000177a:	222c      	movs	r2, #44	; 0x2c
2000177c:	609a      	str	r2, [r3, #8]
				fires[2].xPos = -50;		//FIRE1_INDO
2000177e:	4b4d      	ldr	r3, [pc, #308]	; (200018b4 <main+0x16b8>)
20001780:	2298      	movs	r2, #152	; 0x98
20001782:	00d2      	lsls	r2, r2, #3
20001784:	4694      	mov	ip, r2
20001786:	44bc      	add	ip, r7
20001788:	4463      	add	r3, ip
2000178a:	2232      	movs	r2, #50	; 0x32
2000178c:	4252      	negs	r2, r2
2000178e:	64da      	str	r2, [r3, #76]	; 0x4c
				fires[2].yPos = -50;
20001790:	4b48      	ldr	r3, [pc, #288]	; (200018b4 <main+0x16b8>)
20001792:	2298      	movs	r2, #152	; 0x98
20001794:	00d2      	lsls	r2, r2, #3
20001796:	4694      	mov	ip, r2
20001798:	44bc      	add	ip, r7
2000179a:	4463      	add	r3, ip
2000179c:	2232      	movs	r2, #50	; 0x32
2000179e:	4252      	negs	r2, r2
200017a0:	651a      	str	r2, [r3, #80]	; 0x50
				fires[1].xPos = -50;		//FIRE1_INDO
200017a2:	4b44      	ldr	r3, [pc, #272]	; (200018b4 <main+0x16b8>)
200017a4:	2298      	movs	r2, #152	; 0x98
200017a6:	00d2      	lsls	r2, r2, #3
200017a8:	4694      	mov	ip, r2
200017aa:	44bc      	add	ip, r7
200017ac:	4463      	add	r3, ip
200017ae:	2232      	movs	r2, #50	; 0x32
200017b0:	4252      	negs	r2, r2
200017b2:	629a      	str	r2, [r3, #40]	; 0x28
				fires[1].yPos = -50;
200017b4:	4b3f      	ldr	r3, [pc, #252]	; (200018b4 <main+0x16b8>)
200017b6:	2298      	movs	r2, #152	; 0x98
200017b8:	00d2      	lsls	r2, r2, #3
200017ba:	4694      	mov	ip, r2
200017bc:	44bc      	add	ip, r7
200017be:	4463      	add	r3, ip
200017c0:	2232      	movs	r2, #50	; 0x32
200017c2:	4252      	negs	r2, r2
200017c4:	62da      	str	r2, [r3, #44]	; 0x2c
				bird.xPos = 180;
200017c6:	4b3c      	ldr	r3, [pc, #240]	; (200018b8 <main+0x16bc>)
200017c8:	2298      	movs	r2, #152	; 0x98
200017ca:	00d2      	lsls	r2, r2, #3
200017cc:	4694      	mov	ip, r2
200017ce:	44bc      	add	ip, r7
200017d0:	4463      	add	r3, ip
200017d2:	22b4      	movs	r2, #180	; 0xb4
200017d4:	605a      	str	r2, [r3, #4]
				bird.yPos = 40;
200017d6:	4b38      	ldr	r3, [pc, #224]	; (200018b8 <main+0x16bc>)
200017d8:	2298      	movs	r2, #152	; 0x98
200017da:	00d2      	lsls	r2, r2, #3
200017dc:	4694      	mov	ip, r2
200017de:	44bc      	add	ip, r7
200017e0:	4463      	add	r3, ip
200017e2:	2228      	movs	r2, #40	; 0x28
200017e4:	609a      	str	r2, [r3, #8]
				
				trophy.xPos = 24;
200017e6:	4b35      	ldr	r3, [pc, #212]	; (200018bc <main+0x16c0>)
200017e8:	2298      	movs	r2, #152	; 0x98
200017ea:	00d2      	lsls	r2, r2, #3
200017ec:	4694      	mov	ip, r2
200017ee:	44bc      	add	ip, r7
200017f0:	4463      	add	r3, ip
200017f2:	2218      	movs	r2, #24
200017f4:	605a      	str	r2, [r3, #4]
				trophy.yPos = 5;
200017f6:	4b31      	ldr	r3, [pc, #196]	; (200018bc <main+0x16c0>)
200017f8:	2298      	movs	r2, #152	; 0x98
200017fa:	00d2      	lsls	r2, r2, #3
200017fc:	4694      	mov	ip, r2
200017fe:	44bc      	add	ip, r7
20001800:	4463      	add	r3, ip
20001802:	2205      	movs	r2, #5
20001804:	609a      	str	r2, [r3, #8]
				trophy_burned = 0;
20001806:	4b2e      	ldr	r3, [pc, #184]	; (200018c0 <main+0x16c4>)
20001808:	2200      	movs	r2, #0
2000180a:	601a      	str	r2, [r3, #0]
				
				DIP.xPos = 100;
2000180c:	4b2d      	ldr	r3, [pc, #180]	; (200018c4 <main+0x16c8>)
2000180e:	2298      	movs	r2, #152	; 0x98
20001810:	00d2      	lsls	r2, r2, #3
20001812:	4694      	mov	ip, r2
20001814:	44bc      	add	ip, r7
20001816:	4463      	add	r3, ip
20001818:	2264      	movs	r2, #100	; 0x64
2000181a:	605a      	str	r2, [r3, #4]
				DIP.yPos = 5;
2000181c:	4b29      	ldr	r3, [pc, #164]	; (200018c4 <main+0x16c8>)
2000181e:	2298      	movs	r2, #152	; 0x98
20001820:	00d2      	lsls	r2, r2, #3
20001822:	4694      	mov	ip, r2
20001824:	44bc      	add	ip, r7
20001826:	4463      	add	r3, ip
20001828:	2205      	movs	r2, #5
2000182a:	609a      	str	r2, [r3, #8]
				DIP_burned = 0;
2000182c:	4b26      	ldr	r3, [pc, #152]	; (200018c8 <main+0x16cc>)
2000182e:	2200      	movs	r2, #0
20001830:	601a      	str	r2, [r3, #0]
				no_DIP = 0;
20001832:	2300      	movs	r3, #0
20001834:	4a25      	ldr	r2, [pc, #148]	; (200018cc <main+0x16d0>)
20001836:	18ba      	adds	r2, r7, r2
20001838:	6013      	str	r3, [r2, #0]
				
				lastFireTrigger = 0;
2000183a:	2300      	movs	r3, #0
2000183c:	2294      	movs	r2, #148	; 0x94
2000183e:	00d2      	lsls	r2, r2, #3
20001840:	18ba      	adds	r2, r7, r2
20001842:	6013      	str	r3, [r2, #0]
				
				playerReset();
20001844:	f000 f9d8 	bl	20001bf8 <playerReset>
				player.xPos = 3;
20001848:	4b21      	ldr	r3, [pc, #132]	; (200018d0 <main+0x16d4>)
2000184a:	2298      	movs	r2, #152	; 0x98
2000184c:	00d2      	lsls	r2, r2, #3
2000184e:	4694      	mov	ip, r2
20001850:	44bc      	add	ip, r7
20001852:	4463      	add	r3, ip
20001854:	2203      	movs	r2, #3
20001856:	605a      	str	r2, [r3, #4]
				player.yPos = 64-18-7; //player position
20001858:	4b1d      	ldr	r3, [pc, #116]	; (200018d0 <main+0x16d4>)
2000185a:	2298      	movs	r2, #152	; 0x98
2000185c:	00d2      	lsls	r2, r2, #3
2000185e:	4694      	mov	ip, r2
20001860:	44bc      	add	ip, r7
20001862:	4463      	add	r3, ip
20001864:	2227      	movs	r2, #39	; 0x27
20001866:	609a      	str	r2, [r3, #8]
				//clear_ascii();
				ascii_write("                    ","                    ");
20001868:	4a1a      	ldr	r2, [pc, #104]	; (200018d4 <main+0x16d8>)
2000186a:	4b1a      	ldr	r3, [pc, #104]	; (200018d4 <main+0x16d8>)
2000186c:	0011      	movs	r1, r2
2000186e:	0018      	movs	r0, r3
20001870:	f002 fcac 	bl	200041cc <ascii_write>
				break;
20001874:	e00d      	b.n	20001892 <main+0x1696>
				
				
			case WIN_SCREEN:
				draw_game_object( &roger );
20001876:	23e3      	movs	r3, #227	; 0xe3
20001878:	009b      	lsls	r3, r3, #2
2000187a:	18fb      	adds	r3, r7, r3
2000187c:	0018      	movs	r0, r3
2000187e:	f002 f9f9 	bl	20003c74 <draw_game_object>
				show_frame(1);
20001882:	2001      	movs	r0, #1
20001884:	f002 fa37 	bl	20003cf6 <show_frame>
				break;
20001888:	e003      	b.n	20001892 <main+0x1696>
				break;
2000188a:	46c0      	nop			; (mov r8, r8)
2000188c:	f7fe fff9 	bl	20000882 <main+0x686>
				break;
20001890:	46c0      	nop			; (mov r8, r8)
		switch(current_screen) {
20001892:	f7fe fff6 	bl	20000882 <main+0x686>
20001896:	46c0      	nop			; (mov r8, r8)
20001898:	20004948 	andcs	r4, r0, r8, asr #18
2000189c:	200089dc 	ldrdcs	r8, [r0], -ip
200018a0:	20004968 	andcs	r4, r0, r8, ror #18
200018a4:	fffffdf4 			; <UNDEFINED> instruction: 0xfffffdf4
200018a8:	000004a4 	andeq	r0, r0, r4, lsr #9
200018ac:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
200018b0:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
200018b4:	fffffc44 			; <UNDEFINED> instruction: 0xfffffc44
200018b8:	fffffe18 			; <UNDEFINED> instruction: 0xfffffe18
200018bc:	fffffe60 			; <UNDEFINED> instruction: 0xfffffe60
200018c0:	2000495c 	andcs	r4, r0, ip, asr r9
200018c4:	fffffdd0 			; <UNDEFINED> instruction: 0xfffffdd0
200018c8:	20004964 	andcs	r4, r0, r4, ror #18
200018cc:	000004ac 	andeq	r0, r0, ip, lsr #9
200018d0:	fffffdac 			; <UNDEFINED> instruction: 0xfffffdac
200018d4:	2000f740 	andcs	pc, r0, r0, asr #14

200018d8 <abs>:
		
	}
	
}

int abs(int value) {
200018d8:	b580      	push	{r7, lr}
200018da:	b082      	sub	sp, #8
200018dc:	af00      	add	r7, sp, #0
200018de:	6078      	str	r0, [r7, #4]
	if(value < 0) {
200018e0:	687b      	ldr	r3, [r7, #4]
200018e2:	2b00      	cmp	r3, #0
200018e4:	da02      	bge.n	200018ec <abs+0x14>
		return -value;
200018e6:	687b      	ldr	r3, [r7, #4]
200018e8:	425b      	negs	r3, r3
200018ea:	e000      	b.n	200018ee <abs+0x16>
	}
	return value;
200018ec:	687b      	ldr	r3, [r7, #4]
}
200018ee:	0018      	movs	r0, r3
200018f0:	46bd      	mov	sp, r7
200018f2:	b002      	add	sp, #8
200018f4:	bd80      	pop	{r7, pc}
200018f6:	46c0      	nop			; (mov r8, r8)

200018f8 <render>:
GameObject* gameObjects[100];
int nGameObjects = 0;


void render(GameObject* this)
{
200018f8:	b580      	push	{r7, lr}
200018fa:	b082      	sub	sp, #8
200018fc:	af00      	add	r7, sp, #0
200018fe:	6078      	str	r0, [r7, #4]
    
}
20001900:	46c0      	nop			; (mov r8, r8)
20001902:	46bd      	mov	sp, r7
20001904:	b002      	add	sp, #8
20001906:	bd80      	pop	{r7, pc}

20001908 <gameObjectUpdate>:

void gameObjectUpdate(GameObject *this) {
20001908:	b580      	push	{r7, lr}
2000190a:	b082      	sub	sp, #8
2000190c:	af00      	add	r7, sp, #0
2000190e:	6078      	str	r0, [r7, #4]
	this->animation_counter++;
20001910:	687b      	ldr	r3, [r7, #4]
20001912:	6a1b      	ldr	r3, [r3, #32]
20001914:	1c5a      	adds	r2, r3, #1
20001916:	687b      	ldr	r3, [r7, #4]
20001918:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
2000191a:	687b      	ldr	r3, [r7, #4]
2000191c:	6a1a      	ldr	r2, [r3, #32]
2000191e:	687b      	ldr	r3, [r7, #4]
20001920:	69db      	ldr	r3, [r3, #28]
20001922:	429a      	cmp	r2, r3
20001924:	d10f      	bne.n	20001946 <gameObjectUpdate+0x3e>
		this->animation_counter = 0;
20001926:	687b      	ldr	r3, [r7, #4]
20001928:	2200      	movs	r2, #0
2000192a:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
2000192c:	687b      	ldr	r3, [r7, #4]
2000192e:	695b      	ldr	r3, [r3, #20]
20001930:	1c5a      	adds	r2, r3, #1
20001932:	687b      	ldr	r3, [r7, #4]
20001934:	699b      	ldr	r3, [r3, #24]
20001936:	0019      	movs	r1, r3
20001938:	0010      	movs	r0, r2
2000193a:	f002 ffff 	bl	2000493c <__aeabi_idivmod>
2000193e:	000b      	movs	r3, r1
20001940:	001a      	movs	r2, r3
20001942:	687b      	ldr	r3, [r7, #4]
20001944:	615a      	str	r2, [r3, #20]
	}
}
20001946:	46c0      	nop			; (mov r8, r8)
20001948:	46bd      	mov	sp, r7
2000194a:	b002      	add	sp, #8
2000194c:	bd80      	pop	{r7, pc}
	...

20001950 <initSprites>:
Image fire2Image;
Image fire3Image;
Image fire4Image;
Image fire5Image;
Image fireImages[5];
static void initSprites( void ) {	
20001950:	b580      	push	{r7, lr}
20001952:	b08c      	sub	sp, #48	; 0x30
20001954:	af00      	add	r7, sp, #0
	sprite *pointer0 = &tempFireBlack;
20001956:	4b3e      	ldr	r3, [pc, #248]	; (20001a50 <initSprites+0x100>)
20001958:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer0, fire_black_2_bits, fire1_gray_width, fire1_gray_height);
2000195a:	493e      	ldr	r1, [pc, #248]	; (20001a54 <initSprites+0x104>)
2000195c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
2000195e:	230c      	movs	r3, #12
20001960:	2208      	movs	r2, #8
20001962:	f002 fa11 	bl	20003d88 <load_sprite>
	fireBlack = pointer0;
20001966:	4b3c      	ldr	r3, [pc, #240]	; (20001a58 <initSprites+0x108>)
20001968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
2000196a:	601a      	str	r2, [r3, #0]
	
	sprite *pointer1 = &tempFire1Gray;
2000196c:	4b3b      	ldr	r3, [pc, #236]	; (20001a5c <initSprites+0x10c>)
2000196e:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer1, fire1_gray_bits, fire1_gray_width, fire1_gray_height);
20001970:	493b      	ldr	r1, [pc, #236]	; (20001a60 <initSprites+0x110>)
20001972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20001974:	230c      	movs	r3, #12
20001976:	2208      	movs	r2, #8
20001978:	f002 fa06 	bl	20003d88 <load_sprite>
	fire1Gray = pointer1;
2000197c:	4b39      	ldr	r3, [pc, #228]	; (20001a64 <initSprites+0x114>)
2000197e:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001980:	601a      	str	r2, [r3, #0]

	sprite *pointer2 = &tempFire1Light;
20001982:	4b39      	ldr	r3, [pc, #228]	; (20001a68 <initSprites+0x118>)
20001984:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer2, fire1_light_bits, fire1_gray_width, fire1_gray_height);
20001986:	4939      	ldr	r1, [pc, #228]	; (20001a6c <initSprites+0x11c>)
20001988:	6a78      	ldr	r0, [r7, #36]	; 0x24
2000198a:	230c      	movs	r3, #12
2000198c:	2208      	movs	r2, #8
2000198e:	f002 f9fb 	bl	20003d88 <load_sprite>
	fire1Light = pointer2;
20001992:	4b37      	ldr	r3, [pc, #220]	; (20001a70 <initSprites+0x120>)
20001994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001996:	601a      	str	r2, [r3, #0]

	sprite *pointer3 = &tempFire2Gray;
20001998:	4b36      	ldr	r3, [pc, #216]	; (20001a74 <initSprites+0x124>)
2000199a:	623b      	str	r3, [r7, #32]
	load_sprite(pointer3, fire2_gray_bits, fire1_gray_width, fire1_gray_height);
2000199c:	4936      	ldr	r1, [pc, #216]	; (20001a78 <initSprites+0x128>)
2000199e:	6a38      	ldr	r0, [r7, #32]
200019a0:	230c      	movs	r3, #12
200019a2:	2208      	movs	r2, #8
200019a4:	f002 f9f0 	bl	20003d88 <load_sprite>
	fire2Gray = pointer3;
200019a8:	4b34      	ldr	r3, [pc, #208]	; (20001a7c <initSprites+0x12c>)
200019aa:	6a3a      	ldr	r2, [r7, #32]
200019ac:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempFire2Light;
200019ae:	4b34      	ldr	r3, [pc, #208]	; (20001a80 <initSprites+0x130>)
200019b0:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer4, fire2_light_bits, fire1_gray_width, fire1_gray_height);
200019b2:	4934      	ldr	r1, [pc, #208]	; (20001a84 <initSprites+0x134>)
200019b4:	69f8      	ldr	r0, [r7, #28]
200019b6:	230c      	movs	r3, #12
200019b8:	2208      	movs	r2, #8
200019ba:	f002 f9e5 	bl	20003d88 <load_sprite>
	fire2Light = pointer4;
200019be:	4b32      	ldr	r3, [pc, #200]	; (20001a88 <initSprites+0x138>)
200019c0:	69fa      	ldr	r2, [r7, #28]
200019c2:	601a      	str	r2, [r3, #0]

	sprite *pointer5 = &tempFire3Gray;
200019c4:	4b31      	ldr	r3, [pc, #196]	; (20001a8c <initSprites+0x13c>)
200019c6:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer5, fire3_gray_bits, fire1_gray_width, fire1_gray_height);
200019c8:	4931      	ldr	r1, [pc, #196]	; (20001a90 <initSprites+0x140>)
200019ca:	69b8      	ldr	r0, [r7, #24]
200019cc:	230c      	movs	r3, #12
200019ce:	2208      	movs	r2, #8
200019d0:	f002 f9da 	bl	20003d88 <load_sprite>
	fire3Gray = pointer5;
200019d4:	4b2f      	ldr	r3, [pc, #188]	; (20001a94 <initSprites+0x144>)
200019d6:	69ba      	ldr	r2, [r7, #24]
200019d8:	601a      	str	r2, [r3, #0]

	sprite *pointer6 = &tempFire3Light;
200019da:	4b2f      	ldr	r3, [pc, #188]	; (20001a98 <initSprites+0x148>)
200019dc:	617b      	str	r3, [r7, #20]
	load_sprite(pointer6, fire3_light_bits, fire1_gray_width, fire1_gray_height);
200019de:	492f      	ldr	r1, [pc, #188]	; (20001a9c <initSprites+0x14c>)
200019e0:	6978      	ldr	r0, [r7, #20]
200019e2:	230c      	movs	r3, #12
200019e4:	2208      	movs	r2, #8
200019e6:	f002 f9cf 	bl	20003d88 <load_sprite>
	fire3Light = pointer6;
200019ea:	4b2d      	ldr	r3, [pc, #180]	; (20001aa0 <initSprites+0x150>)
200019ec:	697a      	ldr	r2, [r7, #20]
200019ee:	601a      	str	r2, [r3, #0]

	sprite *pointer7 = &tempFire4Gray;
200019f0:	4b2c      	ldr	r3, [pc, #176]	; (20001aa4 <initSprites+0x154>)
200019f2:	613b      	str	r3, [r7, #16]
	load_sprite(pointer7, fire4_gray_bits, fire1_gray_width, fire1_gray_height);
200019f4:	492c      	ldr	r1, [pc, #176]	; (20001aa8 <initSprites+0x158>)
200019f6:	6938      	ldr	r0, [r7, #16]
200019f8:	230c      	movs	r3, #12
200019fa:	2208      	movs	r2, #8
200019fc:	f002 f9c4 	bl	20003d88 <load_sprite>
	fire4Gray = pointer7;
20001a00:	4b2a      	ldr	r3, [pc, #168]	; (20001aac <initSprites+0x15c>)
20001a02:	693a      	ldr	r2, [r7, #16]
20001a04:	601a      	str	r2, [r3, #0]

	sprite *pointer8 = &tempFire4Light;
20001a06:	4b2a      	ldr	r3, [pc, #168]	; (20001ab0 <initSprites+0x160>)
20001a08:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer8, fire4_light_bits, fire1_gray_width, fire1_gray_height);
20001a0a:	492a      	ldr	r1, [pc, #168]	; (20001ab4 <initSprites+0x164>)
20001a0c:	68f8      	ldr	r0, [r7, #12]
20001a0e:	230c      	movs	r3, #12
20001a10:	2208      	movs	r2, #8
20001a12:	f002 f9b9 	bl	20003d88 <load_sprite>
	fire4Light = pointer8;
20001a16:	4b28      	ldr	r3, [pc, #160]	; (20001ab8 <initSprites+0x168>)
20001a18:	68fa      	ldr	r2, [r7, #12]
20001a1a:	601a      	str	r2, [r3, #0]

	sprite *pointer9 = &tempFire5Gray;
20001a1c:	4b27      	ldr	r3, [pc, #156]	; (20001abc <initSprites+0x16c>)
20001a1e:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer9, fire5_gray_bits, fire1_gray_width, fire1_gray_height);
20001a20:	4927      	ldr	r1, [pc, #156]	; (20001ac0 <initSprites+0x170>)
20001a22:	68b8      	ldr	r0, [r7, #8]
20001a24:	230c      	movs	r3, #12
20001a26:	2208      	movs	r2, #8
20001a28:	f002 f9ae 	bl	20003d88 <load_sprite>
	fire5Gray = pointer9;
20001a2c:	4b25      	ldr	r3, [pc, #148]	; (20001ac4 <initSprites+0x174>)
20001a2e:	68ba      	ldr	r2, [r7, #8]
20001a30:	601a      	str	r2, [r3, #0]

	sprite *pointer10 = &tempFire5Light;
20001a32:	4b25      	ldr	r3, [pc, #148]	; (20001ac8 <initSprites+0x178>)
20001a34:	607b      	str	r3, [r7, #4]
	load_sprite(pointer10, fire5_light_bits, fire1_gray_width, fire1_gray_height);
20001a36:	4925      	ldr	r1, [pc, #148]	; (20001acc <initSprites+0x17c>)
20001a38:	6878      	ldr	r0, [r7, #4]
20001a3a:	230c      	movs	r3, #12
20001a3c:	2208      	movs	r2, #8
20001a3e:	f002 f9a3 	bl	20003d88 <load_sprite>
	fire5Light = pointer10;
20001a42:	4b23      	ldr	r3, [pc, #140]	; (20001ad0 <initSprites+0x180>)
20001a44:	687a      	ldr	r2, [r7, #4]
20001a46:	601a      	str	r2, [r3, #0]
}
20001a48:	46c0      	nop			; (mov r8, r8)
20001a4a:	46bd      	mov	sp, r7
20001a4c:	b00c      	add	sp, #48	; 0x30
20001a4e:	bd80      	pop	{r7, pc}
20001a50:	20004c30 	andcs	r4, r0, r0, lsr ip
20001a54:	200089f0 	strdcs	r8, [r0], -r0
20001a58:	20004d28 	andcs	r4, r0, r8, lsr #26
20001a5c:	20004d1c 	andcs	r4, r0, ip, lsl sp
20001a60:	200089fc 	strdcs	r8, [r0], -ip
20001a64:	20004d40 	andcs	r4, r0, r0, asr #26
20001a68:	20004cf8 	strdcs	r4, [r0], -r8
20001a6c:	20008a08 	andcs	r8, r0, r8, lsl #20
20001a70:	20004bf8 	strdcs	r4, [r0], -r8
20001a74:	20004c24 	andcs	r4, r0, r4, lsr #24
20001a78:	20008a14 	andcs	r8, r0, r4, lsl sl
20001a7c:	20004d3c 	andcs	r4, r0, ip, lsr sp
20001a80:	20004d2c 	andcs	r4, r0, ip, lsr #26
20001a84:	20008a20 	andcs	r8, r0, r0, lsr #20
20001a88:	20004d14 	andcs	r4, r0, r4, lsl sp
20001a8c:	20004cdc 	ldrdcs	r4, [r0], -ip
20001a90:	20008a2c 	andcs	r8, r0, ip, lsr #20
20001a94:	20004c08 	andcs	r4, r0, r8, lsl #24
20001a98:	20004bfc 	strdcs	r4, [r0], -ip
20001a9c:	20008a38 	andcs	r8, r0, r8, lsr sl
20001aa0:	20004d38 	andcs	r4, r0, r8, lsr sp
20001aa4:	20004c0c 	andcs	r4, r0, ip, lsl #24
20001aa8:	20008a44 	andcs	r8, r0, r4, asr #20
20001aac:	20004cf4 	strdcs	r4, [r0], -r4	; <UNPREDICTABLE>
20001ab0:	20004c48 	andcs	r4, r0, r8, asr #24
20001ab4:	20008a50 	andcs	r8, r0, r0, asr sl
20001ab8:	20004c60 	andcs	r4, r0, r0, ror #24
20001abc:	20004cd0 	ldrdcs	r4, [r0], -r0
20001ac0:	20008a5c 	andcs	r8, r0, ip, asr sl
20001ac4:	20004d10 	andcs	r4, r0, r0, lsl sp
20001ac8:	20004d04 	andcs	r4, r0, r4, lsl #26
20001acc:	20008a68 	andcs	r8, r0, r8, ror #20
20001ad0:	20004d18 	andcs	r4, r0, r8, lsl sp

20001ad4 <init_fire>:
	
void init_fire( GameObject *fireObj ) {
20001ad4:	b590      	push	{r4, r7, lr}
20001ad6:	b083      	sub	sp, #12
20001ad8:	af00      	add	r7, sp, #0
20001ada:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20001adc:	4b30      	ldr	r3, [pc, #192]	; (20001ba0 <init_fire+0xcc>)
20001ade:	681b      	ldr	r3, [r3, #0]
20001ae0:	2b00      	cmp	r3, #0
20001ae2:	d049      	beq.n	20001b78 <init_fire+0xa4>
		initSprites();
20001ae4:	f7ff ff34 	bl	20001950 <initSprites>
		firstTime = 0;			
20001ae8:	4b2d      	ldr	r3, [pc, #180]	; (20001ba0 <init_fire+0xcc>)
20001aea:	2200      	movs	r2, #0
20001aec:	601a      	str	r2, [r3, #0]

		fireImages[0] = fire1Image;
20001aee:	4b2d      	ldr	r3, [pc, #180]	; (20001ba4 <init_fire+0xd0>)
20001af0:	4a2d      	ldr	r2, [pc, #180]	; (20001ba8 <init_fire+0xd4>)
20001af2:	ca13      	ldmia	r2!, {r0, r1, r4}
20001af4:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[1] = fire2Image;
20001af6:	4b2b      	ldr	r3, [pc, #172]	; (20001ba4 <init_fire+0xd0>)
20001af8:	4a2c      	ldr	r2, [pc, #176]	; (20001bac <init_fire+0xd8>)
20001afa:	330c      	adds	r3, #12
20001afc:	ca13      	ldmia	r2!, {r0, r1, r4}
20001afe:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[2] = fire3Image;
20001b00:	4b28      	ldr	r3, [pc, #160]	; (20001ba4 <init_fire+0xd0>)
20001b02:	4a2b      	ldr	r2, [pc, #172]	; (20001bb0 <init_fire+0xdc>)
20001b04:	3318      	adds	r3, #24
20001b06:	ca13      	ldmia	r2!, {r0, r1, r4}
20001b08:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[3] = fire4Image;
20001b0a:	4b26      	ldr	r3, [pc, #152]	; (20001ba4 <init_fire+0xd0>)
20001b0c:	4a29      	ldr	r2, [pc, #164]	; (20001bb4 <init_fire+0xe0>)
20001b0e:	3324      	adds	r3, #36	; 0x24
20001b10:	ca13      	ldmia	r2!, {r0, r1, r4}
20001b12:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[4] = fire5Image;
20001b14:	4b23      	ldr	r3, [pc, #140]	; (20001ba4 <init_fire+0xd0>)
20001b16:	4a28      	ldr	r2, [pc, #160]	; (20001bb8 <init_fire+0xe4>)
20001b18:	3330      	adds	r3, #48	; 0x30
20001b1a:	ca13      	ldmia	r2!, {r0, r1, r4}
20001b1c:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&fireImages[0], fire1Gray, fire1Light, fireBlack);
20001b1e:	4b27      	ldr	r3, [pc, #156]	; (20001bbc <init_fire+0xe8>)
20001b20:	6819      	ldr	r1, [r3, #0]
20001b22:	4b27      	ldr	r3, [pc, #156]	; (20001bc0 <init_fire+0xec>)
20001b24:	681a      	ldr	r2, [r3, #0]
20001b26:	4b27      	ldr	r3, [pc, #156]	; (20001bc4 <init_fire+0xf0>)
20001b28:	681b      	ldr	r3, [r3, #0]
20001b2a:	481e      	ldr	r0, [pc, #120]	; (20001ba4 <init_fire+0xd0>)
20001b2c:	f002 f918 	bl	20003d60 <load_image>
		load_image(&fireImages[1], fire2Gray, fire2Light, fireBlack);
20001b30:	4b25      	ldr	r3, [pc, #148]	; (20001bc8 <init_fire+0xf4>)
20001b32:	6819      	ldr	r1, [r3, #0]
20001b34:	4b25      	ldr	r3, [pc, #148]	; (20001bcc <init_fire+0xf8>)
20001b36:	681a      	ldr	r2, [r3, #0]
20001b38:	4b22      	ldr	r3, [pc, #136]	; (20001bc4 <init_fire+0xf0>)
20001b3a:	681b      	ldr	r3, [r3, #0]
20001b3c:	4824      	ldr	r0, [pc, #144]	; (20001bd0 <init_fire+0xfc>)
20001b3e:	f002 f90f 	bl	20003d60 <load_image>
		load_image(&fireImages[2], fire3Gray, fire3Light, fireBlack);
20001b42:	4b24      	ldr	r3, [pc, #144]	; (20001bd4 <init_fire+0x100>)
20001b44:	6819      	ldr	r1, [r3, #0]
20001b46:	4b24      	ldr	r3, [pc, #144]	; (20001bd8 <init_fire+0x104>)
20001b48:	681a      	ldr	r2, [r3, #0]
20001b4a:	4b1e      	ldr	r3, [pc, #120]	; (20001bc4 <init_fire+0xf0>)
20001b4c:	681b      	ldr	r3, [r3, #0]
20001b4e:	4823      	ldr	r0, [pc, #140]	; (20001bdc <init_fire+0x108>)
20001b50:	f002 f906 	bl	20003d60 <load_image>
		load_image(&fireImages[3], fire4Gray, fire4Light, fireBlack);
20001b54:	4b22      	ldr	r3, [pc, #136]	; (20001be0 <init_fire+0x10c>)
20001b56:	6819      	ldr	r1, [r3, #0]
20001b58:	4b22      	ldr	r3, [pc, #136]	; (20001be4 <init_fire+0x110>)
20001b5a:	681a      	ldr	r2, [r3, #0]
20001b5c:	4b19      	ldr	r3, [pc, #100]	; (20001bc4 <init_fire+0xf0>)
20001b5e:	681b      	ldr	r3, [r3, #0]
20001b60:	4821      	ldr	r0, [pc, #132]	; (20001be8 <init_fire+0x114>)
20001b62:	f002 f8fd 	bl	20003d60 <load_image>
		load_image(&fireImages[4], fire5Gray, fire5Light, fireBlack);
20001b66:	4b21      	ldr	r3, [pc, #132]	; (20001bec <init_fire+0x118>)
20001b68:	6819      	ldr	r1, [r3, #0]
20001b6a:	4b21      	ldr	r3, [pc, #132]	; (20001bf0 <init_fire+0x11c>)
20001b6c:	681a      	ldr	r2, [r3, #0]
20001b6e:	4b15      	ldr	r3, [pc, #84]	; (20001bc4 <init_fire+0xf0>)
20001b70:	681b      	ldr	r3, [r3, #0]
20001b72:	4820      	ldr	r0, [pc, #128]	; (20001bf4 <init_fire+0x120>)
20001b74:	f002 f8f4 	bl	20003d60 <load_image>
	}
	
	fireObj->images = fireImages;
20001b78:	687b      	ldr	r3, [r7, #4]
20001b7a:	4a0a      	ldr	r2, [pc, #40]	; (20001ba4 <init_fire+0xd0>)
20001b7c:	601a      	str	r2, [r3, #0]

	fireObj->current_frame = 0;
20001b7e:	687b      	ldr	r3, [r7, #4]
20001b80:	2200      	movs	r2, #0
20001b82:	615a      	str	r2, [r3, #20]
	fireObj->n_frames = 5;
20001b84:	687b      	ldr	r3, [r7, #4]
20001b86:	2205      	movs	r2, #5
20001b88:	619a      	str	r2, [r3, #24]
	fireObj->animation_speed = 1;
20001b8a:	687b      	ldr	r3, [r7, #4]
20001b8c:	2201      	movs	r2, #1
20001b8e:	61da      	str	r2, [r3, #28]
	fireObj->animation_counter = 0;
20001b90:	687b      	ldr	r3, [r7, #4]
20001b92:	2200      	movs	r2, #0
20001b94:	621a      	str	r2, [r3, #32]
}
20001b96:	46c0      	nop			; (mov r8, r8)
20001b98:	46bd      	mov	sp, r7
20001b9a:	b003      	add	sp, #12
20001b9c:	bd90      	pop	{r4, r7, pc}
20001b9e:	46c0      	nop			; (mov r8, r8)
20001ba0:	20008a74 	andcs	r8, r0, r4, ror sl
20001ba4:	20004c94 	mulcs	r0, r4, ip
20001ba8:	20004c54 	andcs	r4, r0, r4, asr ip
20001bac:	20004c18 	andcs	r4, r0, r8, lsl ip
20001bb0:	20004c3c 	andcs	r4, r0, ip, lsr ip
20001bb4:	20004ce8 	andcs	r4, r0, r8, ror #25
20001bb8:	20004c88 	andcs	r4, r0, r8, lsl #25
20001bbc:	20004d40 	andcs	r4, r0, r0, asr #26
20001bc0:	20004bf8 	strdcs	r4, [r0], -r8
20001bc4:	20004d28 	andcs	r4, r0, r8, lsr #26
20001bc8:	20004d3c 	andcs	r4, r0, ip, lsr sp
20001bcc:	20004d14 	andcs	r4, r0, r4, lsl sp
20001bd0:	20004ca0 	andcs	r4, r0, r0, lsr #25
20001bd4:	20004c08 	andcs	r4, r0, r8, lsl #24
20001bd8:	20004d38 	andcs	r4, r0, r8, lsr sp
20001bdc:	20004cac 	andcs	r4, r0, ip, lsr #25
20001be0:	20004cf4 	strdcs	r4, [r0], -r4	; <UNPREDICTABLE>
20001be4:	20004c60 	andcs	r4, r0, r0, ror #24
20001be8:	20004cb8 			; <UNDEFINED> instruction: 0x20004cb8
20001bec:	20004d10 	andcs	r4, r0, r0, lsl sp
20001bf0:	20004d18 	andcs	r4, r0, r8, lsl sp
20001bf4:	20004cc4 	andcs	r4, r0, r4, asr #25

20001bf8 <playerReset>:
	static lastRightValue = 0;
	static lastLeftValue = 0; 
	static xSpeed = 0;
	static ySpeed = 0;

void playerReset(void){
20001bf8:	b580      	push	{r7, lr}
20001bfa:	af00      	add	r7, sp, #0
	lastJumpValue = 0;
20001bfc:	4b08      	ldr	r3, [pc, #32]	; (20001c20 <playerReset+0x28>)
20001bfe:	2200      	movs	r2, #0
20001c00:	601a      	str	r2, [r3, #0]
	lastRightValue = 0;
20001c02:	4b08      	ldr	r3, [pc, #32]	; (20001c24 <playerReset+0x2c>)
20001c04:	2200      	movs	r2, #0
20001c06:	601a      	str	r2, [r3, #0]
	lastLeftValue = 0; 
20001c08:	4b07      	ldr	r3, [pc, #28]	; (20001c28 <playerReset+0x30>)
20001c0a:	2200      	movs	r2, #0
20001c0c:	601a      	str	r2, [r3, #0]
	xSpeed = 0;
20001c0e:	4b07      	ldr	r3, [pc, #28]	; (20001c2c <playerReset+0x34>)
20001c10:	2200      	movs	r2, #0
20001c12:	601a      	str	r2, [r3, #0]
	ySpeed = 0;
20001c14:	4b06      	ldr	r3, [pc, #24]	; (20001c30 <playerReset+0x38>)
20001c16:	2200      	movs	r2, #0
20001c18:	601a      	str	r2, [r3, #0]
}
20001c1a:	46c0      	nop			; (mov r8, r8)
20001c1c:	46bd      	mov	sp, r7
20001c1e:	bd80      	pop	{r7, pc}
20001c20:	20004970 	andcs	r4, r0, r0, ror r9
20001c24:	20004974 	andcs	r4, r0, r4, ror r9
20001c28:	20004978 	andcs	r4, r0, r8, ror r9
20001c2c:	2000497c 	andcs	r4, r0, ip, ror r9
20001c30:	20004980 	andcs	r4, r0, r0, lsl #19

20001c34 <playerUpdate>:

void playerUpdate(GameObject *this) {
20001c34:	b580      	push	{r7, lr}
20001c36:	b082      	sub	sp, #8
20001c38:	af00      	add	r7, sp, #0
20001c3a:	6078      	str	r0, [r7, #4]
	
	// Animate
	this->animation_counter++;
20001c3c:	687b      	ldr	r3, [r7, #4]
20001c3e:	6a1b      	ldr	r3, [r3, #32]
20001c40:	1c5a      	adds	r2, r3, #1
20001c42:	687b      	ldr	r3, [r7, #4]
20001c44:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
20001c46:	687b      	ldr	r3, [r7, #4]
20001c48:	6a1a      	ldr	r2, [r3, #32]
20001c4a:	687b      	ldr	r3, [r7, #4]
20001c4c:	69db      	ldr	r3, [r3, #28]
20001c4e:	429a      	cmp	r2, r3
20001c50:	d10f      	bne.n	20001c72 <playerUpdate+0x3e>
		this->animation_counter = 0;
20001c52:	687b      	ldr	r3, [r7, #4]
20001c54:	2200      	movs	r2, #0
20001c56:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
20001c58:	687b      	ldr	r3, [r7, #4]
20001c5a:	695b      	ldr	r3, [r3, #20]
20001c5c:	1c5a      	adds	r2, r3, #1
20001c5e:	687b      	ldr	r3, [r7, #4]
20001c60:	699b      	ldr	r3, [r3, #24]
20001c62:	0019      	movs	r1, r3
20001c64:	0010      	movs	r0, r2
20001c66:	f002 fe69 	bl	2000493c <__aeabi_idivmod>
20001c6a:	000b      	movs	r3, r1
20001c6c:	001a      	movs	r2, r3
20001c6e:	687b      	ldr	r3, [r7, #4]
20001c70:	615a      	str	r2, [r3, #20]
	}
	
	// Y position changes
	
	if (lastJumpValue != read_DIL_single(JUMP_TRIGGER) && (this->yPos == LIMIT_DOWN || this->yPos == PLATFORM_Y - PLAYER_HEIGHT)){
20001c72:	2005      	movs	r0, #5
20001c74:	f002 f8b8 	bl	20003de8 <read_DIL_single>
20001c78:	0002      	movs	r2, r0
20001c7a:	4b68      	ldr	r3, [pc, #416]	; (20001e1c <playerUpdate+0x1e8>)
20001c7c:	681b      	ldr	r3, [r3, #0]
20001c7e:	429a      	cmp	r2, r3
20001c80:	d00b      	beq.n	20001c9a <playerUpdate+0x66>
20001c82:	687b      	ldr	r3, [r7, #4]
20001c84:	689b      	ldr	r3, [r3, #8]
20001c86:	2b27      	cmp	r3, #39	; 0x27
20001c88:	d003      	beq.n	20001c92 <playerUpdate+0x5e>
20001c8a:	687b      	ldr	r3, [r7, #4]
20001c8c:	689b      	ldr	r3, [r3, #8]
20001c8e:	2b05      	cmp	r3, #5
20001c90:	d103      	bne.n	20001c9a <playerUpdate+0x66>
		ySpeed = -(SPEED_ADD_Y);
20001c92:	4b63      	ldr	r3, [pc, #396]	; (20001e20 <playerUpdate+0x1ec>)
20001c94:	2204      	movs	r2, #4
20001c96:	4252      	negs	r2, r2
20001c98:	601a      	str	r2, [r3, #0]
	}
	
	if (this->yPos + ySpeed > LIMIT_DOWN){
20001c9a:	687b      	ldr	r3, [r7, #4]
20001c9c:	689a      	ldr	r2, [r3, #8]
20001c9e:	4b60      	ldr	r3, [pc, #384]	; (20001e20 <playerUpdate+0x1ec>)
20001ca0:	681b      	ldr	r3, [r3, #0]
20001ca2:	18d3      	adds	r3, r2, r3
20001ca4:	2b27      	cmp	r3, #39	; 0x27
20001ca6:	dd10      	ble.n	20001cca <playerUpdate+0x96>
		this->yPos = LIMIT_DOWN;
20001ca8:	687b      	ldr	r3, [r7, #4]
20001caa:	2227      	movs	r2, #39	; 0x27
20001cac:	609a      	str	r2, [r3, #8]
		if (ySpeed == SPEED_ADD_Y + 1){
20001cae:	4b5c      	ldr	r3, [pc, #368]	; (20001e20 <playerUpdate+0x1ec>)
20001cb0:	681b      	ldr	r3, [r3, #0]
20001cb2:	2b05      	cmp	r3, #5
20001cb4:	d105      	bne.n	20001cc2 <playerUpdate+0x8e>
			ascii_write("*THUMP*","");
20001cb6:	4a5b      	ldr	r2, [pc, #364]	; (20001e24 <playerUpdate+0x1f0>)
20001cb8:	4b5b      	ldr	r3, [pc, #364]	; (20001e28 <playerUpdate+0x1f4>)
20001cba:	0011      	movs	r1, r2
20001cbc:	0018      	movs	r0, r3
20001cbe:	f002 fa85 	bl	200041cc <ascii_write>
		}
		ySpeed = 0;
20001cc2:	4b57      	ldr	r3, [pc, #348]	; (20001e20 <playerUpdate+0x1ec>)
20001cc4:	2200      	movs	r2, #0
20001cc6:	601a      	str	r2, [r3, #0]
20001cc8:	e02a      	b.n	20001d20 <playerUpdate+0xec>
	}
	else if (this->yPos + ySpeed > PLATFORM_Y - PLAYER_HEIGHT && this->yPos + ySpeed < PLATFORM_Y - PLAYER_HEIGHT + 2*SPEED_ADD_Y){
20001cca:	687b      	ldr	r3, [r7, #4]
20001ccc:	689a      	ldr	r2, [r3, #8]
20001cce:	4b54      	ldr	r3, [pc, #336]	; (20001e20 <playerUpdate+0x1ec>)
20001cd0:	681b      	ldr	r3, [r3, #0]
20001cd2:	18d3      	adds	r3, r2, r3
20001cd4:	2b05      	cmp	r3, #5
20001cd6:	dd17      	ble.n	20001d08 <playerUpdate+0xd4>
20001cd8:	687b      	ldr	r3, [r7, #4]
20001cda:	689a      	ldr	r2, [r3, #8]
20001cdc:	4b50      	ldr	r3, [pc, #320]	; (20001e20 <playerUpdate+0x1ec>)
20001cde:	681b      	ldr	r3, [r3, #0]
20001ce0:	18d3      	adds	r3, r2, r3
20001ce2:	2b0c      	cmp	r3, #12
20001ce4:	dc10      	bgt.n	20001d08 <playerUpdate+0xd4>
		this->yPos = PLATFORM_Y - PLAYER_HEIGHT;
20001ce6:	687b      	ldr	r3, [r7, #4]
20001ce8:	2205      	movs	r2, #5
20001cea:	609a      	str	r2, [r3, #8]
		if (ySpeed == SPEED_ADD_Y + 1){
20001cec:	4b4c      	ldr	r3, [pc, #304]	; (20001e20 <playerUpdate+0x1ec>)
20001cee:	681b      	ldr	r3, [r3, #0]
20001cf0:	2b05      	cmp	r3, #5
20001cf2:	d105      	bne.n	20001d00 <playerUpdate+0xcc>
			ascii_write("*THUMP*","");
20001cf4:	4a4b      	ldr	r2, [pc, #300]	; (20001e24 <playerUpdate+0x1f0>)
20001cf6:	4b4c      	ldr	r3, [pc, #304]	; (20001e28 <playerUpdate+0x1f4>)
20001cf8:	0011      	movs	r1, r2
20001cfa:	0018      	movs	r0, r3
20001cfc:	f002 fa66 	bl	200041cc <ascii_write>
		}
		ySpeed = 0;
20001d00:	4b47      	ldr	r3, [pc, #284]	; (20001e20 <playerUpdate+0x1ec>)
20001d02:	2200      	movs	r2, #0
20001d04:	601a      	str	r2, [r3, #0]
20001d06:	e00b      	b.n	20001d20 <playerUpdate+0xec>
	}
	else{
		this->yPos+=ySpeed;
20001d08:	687b      	ldr	r3, [r7, #4]
20001d0a:	689a      	ldr	r2, [r3, #8]
20001d0c:	4b44      	ldr	r3, [pc, #272]	; (20001e20 <playerUpdate+0x1ec>)
20001d0e:	681b      	ldr	r3, [r3, #0]
20001d10:	18d2      	adds	r2, r2, r3
20001d12:	687b      	ldr	r3, [r7, #4]
20001d14:	609a      	str	r2, [r3, #8]
		ySpeed++;
20001d16:	4b42      	ldr	r3, [pc, #264]	; (20001e20 <playerUpdate+0x1ec>)
20001d18:	681b      	ldr	r3, [r3, #0]
20001d1a:	1c5a      	adds	r2, r3, #1
20001d1c:	4b40      	ldr	r3, [pc, #256]	; (20001e20 <playerUpdate+0x1ec>)
20001d1e:	601a      	str	r2, [r3, #0]
	}

	// X position changes
	
	if (!lastRightValue && read_DIL_single(RIGHT_TRIGGER)){ 
20001d20:	4b42      	ldr	r3, [pc, #264]	; (20001e2c <playerUpdate+0x1f8>)
20001d22:	681b      	ldr	r3, [r3, #0]
20001d24:	2b00      	cmp	r3, #0
20001d26:	d109      	bne.n	20001d3c <playerUpdate+0x108>
20001d28:	2000      	movs	r0, #0
20001d2a:	f002 f85d 	bl	20003de8 <read_DIL_single>
20001d2e:	1e03      	subs	r3, r0, #0
20001d30:	d004      	beq.n	20001d3c <playerUpdate+0x108>
		xSpeed += SPEED_ADD_X;
20001d32:	4b3f      	ldr	r3, [pc, #252]	; (20001e30 <playerUpdate+0x1fc>)
20001d34:	681b      	ldr	r3, [r3, #0]
20001d36:	1cda      	adds	r2, r3, #3
20001d38:	4b3d      	ldr	r3, [pc, #244]	; (20001e30 <playerUpdate+0x1fc>)
20001d3a:	601a      	str	r2, [r3, #0]
	}
	
	if (!lastLeftValue && read_DIL_single(LEFT_TRIGGER)){
20001d3c:	4b3d      	ldr	r3, [pc, #244]	; (20001e34 <playerUpdate+0x200>)
20001d3e:	681b      	ldr	r3, [r3, #0]
20001d40:	2b00      	cmp	r3, #0
20001d42:	d109      	bne.n	20001d58 <playerUpdate+0x124>
20001d44:	2007      	movs	r0, #7
20001d46:	f002 f84f 	bl	20003de8 <read_DIL_single>
20001d4a:	1e03      	subs	r3, r0, #0
20001d4c:	d004      	beq.n	20001d58 <playerUpdate+0x124>
		xSpeed -= SPEED_ADD_X;
20001d4e:	4b38      	ldr	r3, [pc, #224]	; (20001e30 <playerUpdate+0x1fc>)
20001d50:	681b      	ldr	r3, [r3, #0]
20001d52:	1eda      	subs	r2, r3, #3
20001d54:	4b36      	ldr	r3, [pc, #216]	; (20001e30 <playerUpdate+0x1fc>)
20001d56:	601a      	str	r2, [r3, #0]
	}
	
	if (((!lastLeftValue && read_DIL_single(LEFT_TRIGGER)) || (!lastRightValue && read_DIL_single(RIGHT_TRIGGER))) && this->yPos != PLATFORM_Y - PLAYER_HEIGHT && this->yPos != LIMIT_DOWN){
20001d58:	4b36      	ldr	r3, [pc, #216]	; (20001e34 <playerUpdate+0x200>)
20001d5a:	681b      	ldr	r3, [r3, #0]
20001d5c:	2b00      	cmp	r3, #0
20001d5e:	d104      	bne.n	20001d6a <playerUpdate+0x136>
20001d60:	2007      	movs	r0, #7
20001d62:	f002 f841 	bl	20003de8 <read_DIL_single>
20001d66:	1e03      	subs	r3, r0, #0
20001d68:	d108      	bne.n	20001d7c <playerUpdate+0x148>
20001d6a:	4b30      	ldr	r3, [pc, #192]	; (20001e2c <playerUpdate+0x1f8>)
20001d6c:	681b      	ldr	r3, [r3, #0]
20001d6e:	2b00      	cmp	r3, #0
20001d70:	d111      	bne.n	20001d96 <playerUpdate+0x162>
20001d72:	2000      	movs	r0, #0
20001d74:	f002 f838 	bl	20003de8 <read_DIL_single>
20001d78:	1e03      	subs	r3, r0, #0
20001d7a:	d00c      	beq.n	20001d96 <playerUpdate+0x162>
20001d7c:	687b      	ldr	r3, [r7, #4]
20001d7e:	689b      	ldr	r3, [r3, #8]
20001d80:	2b05      	cmp	r3, #5
20001d82:	d008      	beq.n	20001d96 <playerUpdate+0x162>
20001d84:	687b      	ldr	r3, [r7, #4]
20001d86:	689b      	ldr	r3, [r3, #8]
20001d88:	2b27      	cmp	r3, #39	; 0x27
20001d8a:	d004      	beq.n	20001d96 <playerUpdate+0x162>
		xSpeed *=2;
20001d8c:	4b28      	ldr	r3, [pc, #160]	; (20001e30 <playerUpdate+0x1fc>)
20001d8e:	681b      	ldr	r3, [r3, #0]
20001d90:	005a      	lsls	r2, r3, #1
20001d92:	4b27      	ldr	r3, [pc, #156]	; (20001e30 <playerUpdate+0x1fc>)
20001d94:	601a      	str	r2, [r3, #0]
	}
	
	if (this->xPos + xSpeed > LIMIT_RIGHT || this->xPos + xSpeed < LIMIT_LEFT){
20001d96:	687b      	ldr	r3, [r7, #4]
20001d98:	685a      	ldr	r2, [r3, #4]
20001d9a:	4b25      	ldr	r3, [pc, #148]	; (20001e30 <playerUpdate+0x1fc>)
20001d9c:	681b      	ldr	r3, [r3, #0]
20001d9e:	18d3      	adds	r3, r2, r3
20001da0:	2b6e      	cmp	r3, #110	; 0x6e
20001da2:	dc06      	bgt.n	20001db2 <playerUpdate+0x17e>
20001da4:	687b      	ldr	r3, [r7, #4]
20001da6:	685a      	ldr	r2, [r3, #4]
20001da8:	4b21      	ldr	r3, [pc, #132]	; (20001e30 <playerUpdate+0x1fc>)
20001daa:	681b      	ldr	r3, [r3, #0]
20001dac:	18d3      	adds	r3, r2, r3
20001dae:	2b00      	cmp	r3, #0
20001db0:	da04      	bge.n	20001dbc <playerUpdate+0x188>
		xSpeed *= -1;	
20001db2:	4b1f      	ldr	r3, [pc, #124]	; (20001e30 <playerUpdate+0x1fc>)
20001db4:	681b      	ldr	r3, [r3, #0]
20001db6:	425a      	negs	r2, r3
20001db8:	4b1d      	ldr	r3, [pc, #116]	; (20001e30 <playerUpdate+0x1fc>)
20001dba:	601a      	str	r2, [r3, #0]
	}
	
	this->xPos += xSpeed;	
20001dbc:	687b      	ldr	r3, [r7, #4]
20001dbe:	685a      	ldr	r2, [r3, #4]
20001dc0:	4b1b      	ldr	r3, [pc, #108]	; (20001e30 <playerUpdate+0x1fc>)
20001dc2:	681b      	ldr	r3, [r3, #0]
20001dc4:	18d2      	adds	r2, r2, r3
20001dc6:	687b      	ldr	r3, [r7, #4]
20001dc8:	605a      	str	r2, [r3, #4]
	
	if (xSpeed > 0){
20001dca:	4b19      	ldr	r3, [pc, #100]	; (20001e30 <playerUpdate+0x1fc>)
20001dcc:	681b      	ldr	r3, [r3, #0]
20001dce:	2b00      	cmp	r3, #0
20001dd0:	dd05      	ble.n	20001dde <playerUpdate+0x1aa>
		xSpeed--;
20001dd2:	4b17      	ldr	r3, [pc, #92]	; (20001e30 <playerUpdate+0x1fc>)
20001dd4:	681b      	ldr	r3, [r3, #0]
20001dd6:	1e5a      	subs	r2, r3, #1
20001dd8:	4b15      	ldr	r3, [pc, #84]	; (20001e30 <playerUpdate+0x1fc>)
20001dda:	601a      	str	r2, [r3, #0]
20001ddc:	e008      	b.n	20001df0 <playerUpdate+0x1bc>
	}
	else if (xSpeed < 0){
20001dde:	4b14      	ldr	r3, [pc, #80]	; (20001e30 <playerUpdate+0x1fc>)
20001de0:	681b      	ldr	r3, [r3, #0]
20001de2:	2b00      	cmp	r3, #0
20001de4:	da04      	bge.n	20001df0 <playerUpdate+0x1bc>
		xSpeed++;
20001de6:	4b12      	ldr	r3, [pc, #72]	; (20001e30 <playerUpdate+0x1fc>)
20001de8:	681b      	ldr	r3, [r3, #0]
20001dea:	1c5a      	adds	r2, r3, #1
20001dec:	4b10      	ldr	r3, [pc, #64]	; (20001e30 <playerUpdate+0x1fc>)
20001dee:	601a      	str	r2, [r3, #0]
	}
	
	// Prepare values
	lastRightValue = read_DIL_single(RIGHT_TRIGGER);
20001df0:	2000      	movs	r0, #0
20001df2:	f001 fff9 	bl	20003de8 <read_DIL_single>
20001df6:	0002      	movs	r2, r0
20001df8:	4b0c      	ldr	r3, [pc, #48]	; (20001e2c <playerUpdate+0x1f8>)
20001dfa:	601a      	str	r2, [r3, #0]
	lastLeftValue = read_DIL_single(LEFT_TRIGGER);
20001dfc:	2007      	movs	r0, #7
20001dfe:	f001 fff3 	bl	20003de8 <read_DIL_single>
20001e02:	0002      	movs	r2, r0
20001e04:	4b0b      	ldr	r3, [pc, #44]	; (20001e34 <playerUpdate+0x200>)
20001e06:	601a      	str	r2, [r3, #0]
	lastJumpValue = read_DIL_single(JUMP_TRIGGER);
20001e08:	2005      	movs	r0, #5
20001e0a:	f001 ffed 	bl	20003de8 <read_DIL_single>
20001e0e:	0002      	movs	r2, r0
20001e10:	4b02      	ldr	r3, [pc, #8]	; (20001e1c <playerUpdate+0x1e8>)
20001e12:	601a      	str	r2, [r3, #0]
	
20001e14:	46c0      	nop			; (mov r8, r8)
20001e16:	46bd      	mov	sp, r7
20001e18:	b002      	add	sp, #8
20001e1a:	bd80      	pop	{r7, pc}
20001e1c:	20004970 	andcs	r4, r0, r0, ror r9
20001e20:	20004980 	andcs	r4, r0, r0, lsl #19
20001e24:	2000f784 	andcs	pc, r0, r4, lsl #15
20001e28:	2000f788 	andcs	pc, r0, r8, lsl #15
20001e2c:	20004974 	andcs	r4, r0, r4, ror r9
20001e30:	2000497c 	andcs	r4, r0, ip, ror r9
20001e34:	20004978 	andcs	r4, r0, r8, ror r9

20001e38 <initSprites>:
Image bird5Image;
Image bird6Image;
//Image bird7Image;
//Image bird8Image;
Image birdImages[6];
static void initSprites( void ) {	
20001e38:	b580      	push	{r7, lr}
20001e3a:	b090      	sub	sp, #64	; 0x40
20001e3c:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempBirdLight;
20001e3e:	4b54      	ldr	r3, [pc, #336]	; (20001f90 <initSprites+0x158>)
20001e40:	63fb      	str	r3, [r7, #60]	; 0x3c
	load_sprite(pointer11, bird1_light_bits, bird1_black_width, bird1_black_height);
20001e42:	4954      	ldr	r1, [pc, #336]	; (20001f94 <initSprites+0x15c>)
20001e44:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
20001e46:	2319      	movs	r3, #25
20001e48:	2219      	movs	r2, #25
20001e4a:	f001 ff9d 	bl	20003d88 <load_sprite>
	bird1Light = pointer11;
20001e4e:	4b52      	ldr	r3, [pc, #328]	; (20001f98 <initSprites+0x160>)
20001e50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
20001e52:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempBirdGray;
20001e54:	4b51      	ldr	r3, [pc, #324]	; (20001f9c <initSprites+0x164>)
20001e56:	63bb      	str	r3, [r7, #56]	; 0x38
	load_sprite(pointer12, bird1_gray_bits, bird1_black_width, bird1_black_height);
20001e58:	4951      	ldr	r1, [pc, #324]	; (20001fa0 <initSprites+0x168>)
20001e5a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
20001e5c:	2319      	movs	r3, #25
20001e5e:	2219      	movs	r2, #25
20001e60:	f001 ff92 	bl	20003d88 <load_sprite>
	bird1Gray = pointer12;
20001e64:	4b4f      	ldr	r3, [pc, #316]	; (20001fa4 <initSprites+0x16c>)
20001e66:	6bba      	ldr	r2, [r7, #56]	; 0x38
20001e68:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempBirdBlack;
20001e6a:	4b4f      	ldr	r3, [pc, #316]	; (20001fa8 <initSprites+0x170>)
20001e6c:	637b      	str	r3, [r7, #52]	; 0x34
	load_sprite(pointer13, bird1_black_bits, bird1_black_width, bird1_black_height);
20001e6e:	494f      	ldr	r1, [pc, #316]	; (20001fac <initSprites+0x174>)
20001e70:	6b78      	ldr	r0, [r7, #52]	; 0x34
20001e72:	2319      	movs	r3, #25
20001e74:	2219      	movs	r2, #25
20001e76:	f001 ff87 	bl	20003d88 <load_sprite>
	bird1Black = pointer13;	
20001e7a:	4b4d      	ldr	r3, [pc, #308]	; (20001fb0 <initSprites+0x178>)
20001e7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
20001e7e:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempBird2Light;
20001e80:	4b4c      	ldr	r3, [pc, #304]	; (20001fb4 <initSprites+0x17c>)
20001e82:	633b      	str	r3, [r7, #48]	; 0x30
	load_sprite(pointer14, bird2_light_bits, bird2_black_width, bird2_black_height);
20001e84:	494c      	ldr	r1, [pc, #304]	; (20001fb8 <initSprites+0x180>)
20001e86:	6b38      	ldr	r0, [r7, #48]	; 0x30
20001e88:	2319      	movs	r3, #25
20001e8a:	2219      	movs	r2, #25
20001e8c:	f001 ff7c 	bl	20003d88 <load_sprite>
	bird2Light = pointer14;
20001e90:	4b4a      	ldr	r3, [pc, #296]	; (20001fbc <initSprites+0x184>)
20001e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20001e94:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempBird2Gray;
20001e96:	4b4a      	ldr	r3, [pc, #296]	; (20001fc0 <initSprites+0x188>)
20001e98:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer15, bird2_gray_bits, bird2_black_width, bird2_black_height);
20001e9a:	494a      	ldr	r1, [pc, #296]	; (20001fc4 <initSprites+0x18c>)
20001e9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20001e9e:	2319      	movs	r3, #25
20001ea0:	2219      	movs	r2, #25
20001ea2:	f001 ff71 	bl	20003d88 <load_sprite>
	bird2Gray = pointer15;
20001ea6:	4b48      	ldr	r3, [pc, #288]	; (20001fc8 <initSprites+0x190>)
20001ea8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20001eaa:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempBird2Black;
20001eac:	4b47      	ldr	r3, [pc, #284]	; (20001fcc <initSprites+0x194>)
20001eae:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer16, bird2_black_bits, bird2_black_width, bird2_black_height);
20001eb0:	4947      	ldr	r1, [pc, #284]	; (20001fd0 <initSprites+0x198>)
20001eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20001eb4:	2319      	movs	r3, #25
20001eb6:	2219      	movs	r2, #25
20001eb8:	f001 ff66 	bl	20003d88 <load_sprite>
	bird2Black = pointer16;
20001ebc:	4b45      	ldr	r3, [pc, #276]	; (20001fd4 <initSprites+0x19c>)
20001ebe:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001ec0:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempBird3Light;
20001ec2:	4b45      	ldr	r3, [pc, #276]	; (20001fd8 <initSprites+0x1a0>)
20001ec4:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(finalPointer, bird3_light_bits, bird3_black_width, bird3_black_height);
20001ec6:	4945      	ldr	r1, [pc, #276]	; (20001fdc <initSprites+0x1a4>)
20001ec8:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001eca:	2319      	movs	r3, #25
20001ecc:	2219      	movs	r2, #25
20001ece:	f001 ff5b 	bl	20003d88 <load_sprite>
	bird3Light = finalPointer;
20001ed2:	4b43      	ldr	r3, [pc, #268]	; (20001fe0 <initSprites+0x1a8>)
20001ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001ed6:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempBird3Gray;
20001ed8:	4b42      	ldr	r3, [pc, #264]	; (20001fe4 <initSprites+0x1ac>)
20001eda:	623b      	str	r3, [r7, #32]
	load_sprite(pointer17, bird3_gray_bits, bird3_black_width, bird3_black_height);
20001edc:	4942      	ldr	r1, [pc, #264]	; (20001fe8 <initSprites+0x1b0>)
20001ede:	6a38      	ldr	r0, [r7, #32]
20001ee0:	2319      	movs	r3, #25
20001ee2:	2219      	movs	r2, #25
20001ee4:	f001 ff50 	bl	20003d88 <load_sprite>
	bird3Gray = pointer17;
20001ee8:	4b40      	ldr	r3, [pc, #256]	; (20001fec <initSprites+0x1b4>)
20001eea:	6a3a      	ldr	r2, [r7, #32]
20001eec:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempBird3Black;
20001eee:	4b40      	ldr	r3, [pc, #256]	; (20001ff0 <initSprites+0x1b8>)
20001ef0:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer18, bird3_black_bits, bird3_black_width, bird3_black_height);
20001ef2:	4940      	ldr	r1, [pc, #256]	; (20001ff4 <initSprites+0x1bc>)
20001ef4:	69f8      	ldr	r0, [r7, #28]
20001ef6:	2319      	movs	r3, #25
20001ef8:	2219      	movs	r2, #25
20001efa:	f001 ff45 	bl	20003d88 <load_sprite>
	bird3Black = pointer18;	
20001efe:	4b3e      	ldr	r3, [pc, #248]	; (20001ff8 <initSprites+0x1c0>)
20001f00:	69fa      	ldr	r2, [r7, #28]
20001f02:	601a      	str	r2, [r3, #0]
	
	sprite *pointer19 = &tempBird4Light;
20001f04:	4b3d      	ldr	r3, [pc, #244]	; (20001ffc <initSprites+0x1c4>)
20001f06:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer19, bird4_light_bits, bird4_black_width, bird4_black_height);
20001f08:	493d      	ldr	r1, [pc, #244]	; (20002000 <initSprites+0x1c8>)
20001f0a:	69b8      	ldr	r0, [r7, #24]
20001f0c:	2319      	movs	r3, #25
20001f0e:	2219      	movs	r2, #25
20001f10:	f001 ff3a 	bl	20003d88 <load_sprite>
	bird4Light = pointer19;
20001f14:	4b3b      	ldr	r3, [pc, #236]	; (20002004 <initSprites+0x1cc>)
20001f16:	69ba      	ldr	r2, [r7, #24]
20001f18:	601a      	str	r2, [r3, #0]
	sprite *pointer20 = &tempBird4Gray;
20001f1a:	4b3b      	ldr	r3, [pc, #236]	; (20002008 <initSprites+0x1d0>)
20001f1c:	617b      	str	r3, [r7, #20]
	load_sprite(pointer20, bird4_gray_bits, bird4_black_width, bird4_black_height);
20001f1e:	493b      	ldr	r1, [pc, #236]	; (2000200c <initSprites+0x1d4>)
20001f20:	6978      	ldr	r0, [r7, #20]
20001f22:	2319      	movs	r3, #25
20001f24:	2219      	movs	r2, #25
20001f26:	f001 ff2f 	bl	20003d88 <load_sprite>
	bird4Gray = pointer20;
20001f2a:	4b39      	ldr	r3, [pc, #228]	; (20002010 <initSprites+0x1d8>)
20001f2c:	697a      	ldr	r2, [r7, #20]
20001f2e:	601a      	str	r2, [r3, #0]
	sprite *pointer21 = &tempBird4Black;
20001f30:	4b38      	ldr	r3, [pc, #224]	; (20002014 <initSprites+0x1dc>)
20001f32:	613b      	str	r3, [r7, #16]
	load_sprite(pointer21, bird4_black_bits, bird4_black_width, bird4_black_height);
20001f34:	4938      	ldr	r1, [pc, #224]	; (20002018 <initSprites+0x1e0>)
20001f36:	6938      	ldr	r0, [r7, #16]
20001f38:	2319      	movs	r3, #25
20001f3a:	2219      	movs	r2, #25
20001f3c:	f001 ff24 	bl	20003d88 <load_sprite>
	bird4Black = pointer21;	
20001f40:	4b36      	ldr	r3, [pc, #216]	; (2000201c <initSprites+0x1e4>)
20001f42:	693a      	ldr	r2, [r7, #16]
20001f44:	601a      	str	r2, [r3, #0]
	
	sprite *pointer22 = &tempBird5Light;
20001f46:	4b36      	ldr	r3, [pc, #216]	; (20002020 <initSprites+0x1e8>)
20001f48:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer22, bird5_light_bits, bird5_black_width, bird5_black_height);
20001f4a:	4936      	ldr	r1, [pc, #216]	; (20002024 <initSprites+0x1ec>)
20001f4c:	68f8      	ldr	r0, [r7, #12]
20001f4e:	2319      	movs	r3, #25
20001f50:	2219      	movs	r2, #25
20001f52:	f001 ff19 	bl	20003d88 <load_sprite>
	bird5Light = pointer22;
20001f56:	4b34      	ldr	r3, [pc, #208]	; (20002028 <initSprites+0x1f0>)
20001f58:	68fa      	ldr	r2, [r7, #12]
20001f5a:	601a      	str	r2, [r3, #0]
	sprite *pointer23 = &tempBird5Gray;
20001f5c:	4b33      	ldr	r3, [pc, #204]	; (2000202c <initSprites+0x1f4>)
20001f5e:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer23, bird5_gray_bits, bird5_black_width, bird5_black_height);
20001f60:	4933      	ldr	r1, [pc, #204]	; (20002030 <initSprites+0x1f8>)
20001f62:	68b8      	ldr	r0, [r7, #8]
20001f64:	2319      	movs	r3, #25
20001f66:	2219      	movs	r2, #25
20001f68:	f001 ff0e 	bl	20003d88 <load_sprite>
	bird5Gray = pointer23;
20001f6c:	4b31      	ldr	r3, [pc, #196]	; (20002034 <initSprites+0x1fc>)
20001f6e:	68ba      	ldr	r2, [r7, #8]
20001f70:	601a      	str	r2, [r3, #0]
	sprite *pointer24 = &tempBird5Black;
20001f72:	4b31      	ldr	r3, [pc, #196]	; (20002038 <initSprites+0x200>)
20001f74:	607b      	str	r3, [r7, #4]
	load_sprite(pointer24, bird5_black_bits, bird5_black_width, bird5_black_height);
20001f76:	4931      	ldr	r1, [pc, #196]	; (2000203c <initSprites+0x204>)
20001f78:	6878      	ldr	r0, [r7, #4]
20001f7a:	2319      	movs	r3, #25
20001f7c:	2219      	movs	r2, #25
20001f7e:	f001 ff03 	bl	20003d88 <load_sprite>
	bird5Black = pointer24;
20001f82:	4b2f      	ldr	r3, [pc, #188]	; (20002040 <initSprites+0x208>)
20001f84:	687a      	ldr	r2, [r7, #4]
20001f86:	601a      	str	r2, [r3, #0]
}
20001f88:	46c0      	nop			; (mov r8, r8)
20001f8a:	46bd      	mov	sp, r7
20001f8c:	b010      	add	sp, #64	; 0x40
20001f8e:	bd80      	pop	{r7, pc}
20001f90:	20004e34 	andcs	r4, r0, r4, lsr lr
20001f94:	20008b40 	andcs	r8, r0, r0, asr #22
20001f98:	20004e40 	andcs	r4, r0, r0, asr #28
20001f9c:	20004dd0 	ldrdcs	r4, [r0], -r0
20001fa0:	20008adc 	ldrdcs	r8, [r0], -ip
20001fa4:	20004d48 	andcs	r4, r0, r8, asr #26
20001fa8:	20004dc0 	andcs	r4, r0, r0, asr #27
20001fac:	20008a78 	andcs	r8, r0, r8, ror sl
20001fb0:	20004db0 			; <UNDEFINED> instruction: 0x20004db0
20001fb4:	20004e44 	andcs	r4, r0, r4, asr #28
20001fb8:	20008c6c 	andcs	r8, r0, ip, ror #24
20001fbc:	20004ee4 	andcs	r4, r0, r4, ror #29
20001fc0:	20004dec 	andcs	r4, r0, ip, ror #27
20001fc4:	20008c08 	andcs	r8, r0, r8, lsl #24
20001fc8:	20004e30 	andcs	r4, r0, r0, lsr lr
20001fcc:	20004ecc 	andcs	r4, r0, ip, asr #29
20001fd0:	20008ba4 	andcs	r8, r0, r4, lsr #23
20001fd4:	20004dac 	andcs	r4, r0, ip, lsr #27
20001fd8:	20004e68 	andcs	r4, r0, r8, ror #28
20001fdc:	20008d98 	mulcs	r0, r8, sp
20001fe0:	20004df8 	strdcs	r4, [r0], -r8
20001fe4:	20004e74 	andcs	r4, r0, r4, ror lr
20001fe8:	20008d34 	andcs	r8, r0, r4, lsr sp
20001fec:	20004dcc 	andcs	r4, r0, ip, asr #27
20001ff0:	20004e24 	andcs	r4, r0, r4, lsr #28
20001ff4:	20008cd0 	ldrdcs	r8, [r0], -r0
20001ff8:	20004da4 	andcs	r4, r0, r4, lsr #27
20001ffc:	20004e5c 	andcs	r4, r0, ip, asr lr
20002000:	20008ec4 	andcs	r8, r0, r4, asr #29
20002004:	20004d44 	andcs	r4, r0, r4, asr #26
20002008:	20004ed8 	ldrdcs	r4, [r0], -r8
2000200c:	20008e60 	andcs	r8, r0, r0, ror #28
20002010:	20004da8 	andcs	r4, r0, r8, lsr #27
20002014:	20004d5c 	andcs	r4, r0, ip, asr sp
20002018:	20008dfc 	strdcs	r8, [r0], -ip
2000201c:	20004ec8 	andcs	r4, r0, r8, asr #29
20002020:	20004de0 	andcs	r4, r0, r0, ror #27
20002024:	20008ff0 	strdcs	r8, [r0], -r0
20002028:	20004e20 	andcs	r4, r0, r0, lsr #28
2000202c:	20004dfc 	strdcs	r4, [r0], -ip
20002030:	20008f8c 	andcs	r8, r0, ip, lsl #31
20002034:	20004ddc 	ldrdcs	r4, [r0], -ip
20002038:	20004e08 	andcs	r4, r0, r8, lsl #28
2000203c:	20008f28 	andcs	r8, r0, r8, lsr #30
20002040:	20004d58 	andcs	r4, r0, r8, asr sp

20002044 <init_bird>:
	
void init_bird( GameObject *birdObj ) {
20002044:	b590      	push	{r4, r7, lr}
20002046:	b083      	sub	sp, #12
20002048:	af00      	add	r7, sp, #0
2000204a:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
2000204c:	4b37      	ldr	r3, [pc, #220]	; (2000212c <init_bird+0xe8>)
2000204e:	681b      	ldr	r3, [r3, #0]
20002050:	2b00      	cmp	r3, #0
20002052:	d057      	beq.n	20002104 <init_bird+0xc0>
		initSprites();
20002054:	f7ff fef0 	bl	20001e38 <initSprites>
		firstTime = 0;			
20002058:	4b34      	ldr	r3, [pc, #208]	; (2000212c <init_bird+0xe8>)
2000205a:	2200      	movs	r2, #0
2000205c:	601a      	str	r2, [r3, #0]

		birdImages[0] = bird1Image;
2000205e:	4b34      	ldr	r3, [pc, #208]	; (20002130 <init_bird+0xec>)
20002060:	4a34      	ldr	r2, [pc, #208]	; (20002134 <init_bird+0xf0>)
20002062:	ca13      	ldmia	r2!, {r0, r1, r4}
20002064:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[1] = bird2Image;
20002066:	4b32      	ldr	r3, [pc, #200]	; (20002130 <init_bird+0xec>)
20002068:	4a33      	ldr	r2, [pc, #204]	; (20002138 <init_bird+0xf4>)
2000206a:	330c      	adds	r3, #12
2000206c:	ca13      	ldmia	r2!, {r0, r1, r4}
2000206e:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[2] = bird3Image;
20002070:	4b2f      	ldr	r3, [pc, #188]	; (20002130 <init_bird+0xec>)
20002072:	4a32      	ldr	r2, [pc, #200]	; (2000213c <init_bird+0xf8>)
20002074:	3318      	adds	r3, #24
20002076:	ca13      	ldmia	r2!, {r0, r1, r4}
20002078:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[3] = bird4Image;
2000207a:	4b2d      	ldr	r3, [pc, #180]	; (20002130 <init_bird+0xec>)
2000207c:	4a30      	ldr	r2, [pc, #192]	; (20002140 <init_bird+0xfc>)
2000207e:	3324      	adds	r3, #36	; 0x24
20002080:	ca13      	ldmia	r2!, {r0, r1, r4}
20002082:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[4] = bird5Image;
20002084:	4b2a      	ldr	r3, [pc, #168]	; (20002130 <init_bird+0xec>)
20002086:	4a2f      	ldr	r2, [pc, #188]	; (20002144 <init_bird+0x100>)
20002088:	3330      	adds	r3, #48	; 0x30
2000208a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000208c:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[5] = bird6Image;
2000208e:	4b28      	ldr	r3, [pc, #160]	; (20002130 <init_bird+0xec>)
20002090:	4a2d      	ldr	r2, [pc, #180]	; (20002148 <init_bird+0x104>)
20002092:	333c      	adds	r3, #60	; 0x3c
20002094:	ca13      	ldmia	r2!, {r0, r1, r4}
20002096:	c313      	stmia	r3!, {r0, r1, r4}
//		birdImages[6] = bird7Image;
		//birdImages[7] = bird8Image;
		
		load_image(&birdImages[0], bird1Black, bird1Gray, bird1Light);
20002098:	4b2c      	ldr	r3, [pc, #176]	; (2000214c <init_bird+0x108>)
2000209a:	6819      	ldr	r1, [r3, #0]
2000209c:	4b2c      	ldr	r3, [pc, #176]	; (20002150 <init_bird+0x10c>)
2000209e:	681a      	ldr	r2, [r3, #0]
200020a0:	4b2c      	ldr	r3, [pc, #176]	; (20002154 <init_bird+0x110>)
200020a2:	681b      	ldr	r3, [r3, #0]
200020a4:	4822      	ldr	r0, [pc, #136]	; (20002130 <init_bird+0xec>)
200020a6:	f001 fe5b 	bl	20003d60 <load_image>
		load_image(&birdImages[1], bird2Black, bird2Gray, bird2Light);
200020aa:	4b2b      	ldr	r3, [pc, #172]	; (20002158 <init_bird+0x114>)
200020ac:	6819      	ldr	r1, [r3, #0]
200020ae:	4b2b      	ldr	r3, [pc, #172]	; (2000215c <init_bird+0x118>)
200020b0:	681a      	ldr	r2, [r3, #0]
200020b2:	4b2b      	ldr	r3, [pc, #172]	; (20002160 <init_bird+0x11c>)
200020b4:	681b      	ldr	r3, [r3, #0]
200020b6:	482b      	ldr	r0, [pc, #172]	; (20002164 <init_bird+0x120>)
200020b8:	f001 fe52 	bl	20003d60 <load_image>
		load_image(&birdImages[2], bird3Black, bird3Gray, bird3Light);
200020bc:	4b2a      	ldr	r3, [pc, #168]	; (20002168 <init_bird+0x124>)
200020be:	6819      	ldr	r1, [r3, #0]
200020c0:	4b2a      	ldr	r3, [pc, #168]	; (2000216c <init_bird+0x128>)
200020c2:	681a      	ldr	r2, [r3, #0]
200020c4:	4b2a      	ldr	r3, [pc, #168]	; (20002170 <init_bird+0x12c>)
200020c6:	681b      	ldr	r3, [r3, #0]
200020c8:	482a      	ldr	r0, [pc, #168]	; (20002174 <init_bird+0x130>)
200020ca:	f001 fe49 	bl	20003d60 <load_image>
		load_image(&birdImages[3], bird4Black, bird4Gray, bird4Light);
200020ce:	4b2a      	ldr	r3, [pc, #168]	; (20002178 <init_bird+0x134>)
200020d0:	6819      	ldr	r1, [r3, #0]
200020d2:	4b2a      	ldr	r3, [pc, #168]	; (2000217c <init_bird+0x138>)
200020d4:	681a      	ldr	r2, [r3, #0]
200020d6:	4b2a      	ldr	r3, [pc, #168]	; (20002180 <init_bird+0x13c>)
200020d8:	681b      	ldr	r3, [r3, #0]
200020da:	482a      	ldr	r0, [pc, #168]	; (20002184 <init_bird+0x140>)
200020dc:	f001 fe40 	bl	20003d60 <load_image>
		load_image(&birdImages[4], bird5Black, bird5Gray, bird5Light);
200020e0:	4b29      	ldr	r3, [pc, #164]	; (20002188 <init_bird+0x144>)
200020e2:	6819      	ldr	r1, [r3, #0]
200020e4:	4b29      	ldr	r3, [pc, #164]	; (2000218c <init_bird+0x148>)
200020e6:	681a      	ldr	r2, [r3, #0]
200020e8:	4b29      	ldr	r3, [pc, #164]	; (20002190 <init_bird+0x14c>)
200020ea:	681b      	ldr	r3, [r3, #0]
200020ec:	4829      	ldr	r0, [pc, #164]	; (20002194 <init_bird+0x150>)
200020ee:	f001 fe37 	bl	20003d60 <load_image>
		
		//load_image(&birdImages[7], bird2Black, bird2Gray, bird2Light);
		load_image(&birdImages[5], bird3Black, bird3Gray, bird3Light);
200020f2:	4b1d      	ldr	r3, [pc, #116]	; (20002168 <init_bird+0x124>)
200020f4:	6819      	ldr	r1, [r3, #0]
200020f6:	4b1d      	ldr	r3, [pc, #116]	; (2000216c <init_bird+0x128>)
200020f8:	681a      	ldr	r2, [r3, #0]
200020fa:	4b1d      	ldr	r3, [pc, #116]	; (20002170 <init_bird+0x12c>)
200020fc:	681b      	ldr	r3, [r3, #0]
200020fe:	4826      	ldr	r0, [pc, #152]	; (20002198 <init_bird+0x154>)
20002100:	f001 fe2e 	bl	20003d60 <load_image>
		//load_image(&birdImages[5], bird4Black, bird4Gray, bird4Light);
	}
	
	birdObj->images = birdImages;
20002104:	687b      	ldr	r3, [r7, #4]
20002106:	4a0a      	ldr	r2, [pc, #40]	; (20002130 <init_bird+0xec>)
20002108:	601a      	str	r2, [r3, #0]

	birdObj->current_frame = 0;
2000210a:	687b      	ldr	r3, [r7, #4]
2000210c:	2200      	movs	r2, #0
2000210e:	615a      	str	r2, [r3, #20]
	birdObj->n_frames = 6;
20002110:	687b      	ldr	r3, [r7, #4]
20002112:	2206      	movs	r2, #6
20002114:	619a      	str	r2, [r3, #24]
	birdObj->animation_speed = 1;
20002116:	687b      	ldr	r3, [r7, #4]
20002118:	2201      	movs	r2, #1
2000211a:	61da      	str	r2, [r3, #28]
	birdObj->animation_counter = 0;
2000211c:	687b      	ldr	r3, [r7, #4]
2000211e:	2200      	movs	r2, #0
20002120:	621a      	str	r2, [r3, #32]
}
20002122:	46c0      	nop			; (mov r8, r8)
20002124:	46bd      	mov	sp, r7
20002126:	b003      	add	sp, #12
20002128:	bd90      	pop	{r4, r7, pc}
2000212a:	46c0      	nop			; (mov r8, r8)
2000212c:	20009054 	andcs	r9, r0, r4, asr r0
20002130:	20004e80 	andcs	r4, r0, r0, lsl #29
20002134:	20004d98 	mulcs	r0, r8, sp
20002138:	20004d68 	andcs	r4, r0, r8, ror #26
2000213c:	20004e50 	andcs	r4, r0, r0, asr lr
20002140:	20004db4 			; <UNDEFINED> instruction: 0x20004db4
20002144:	20004e14 	andcs	r4, r0, r4, lsl lr
20002148:	20004d4c 	andcs	r4, r0, ip, asr #26
2000214c:	20004db0 			; <UNDEFINED> instruction: 0x20004db0
20002150:	20004d48 	andcs	r4, r0, r8, asr #26
20002154:	20004e40 	andcs	r4, r0, r0, asr #28
20002158:	20004dac 	andcs	r4, r0, ip, lsr #27
2000215c:	20004e30 	andcs	r4, r0, r0, lsr lr
20002160:	20004ee4 	andcs	r4, r0, r4, ror #29
20002164:	20004e8c 	andcs	r4, r0, ip, lsl #29
20002168:	20004da4 	andcs	r4, r0, r4, lsr #27
2000216c:	20004dcc 	andcs	r4, r0, ip, asr #27
20002170:	20004df8 	strdcs	r4, [r0], -r8
20002174:	20004e98 	mulcs	r0, r8, lr
20002178:	20004ec8 	andcs	r4, r0, r8, asr #29
2000217c:	20004da8 	andcs	r4, r0, r8, lsr #27
20002180:	20004d44 	andcs	r4, r0, r4, asr #26
20002184:	20004ea4 	andcs	r4, r0, r4, lsr #29
20002188:	20004d58 	andcs	r4, r0, r8, asr sp
2000218c:	20004ddc 	ldrdcs	r4, [r0], -ip
20002190:	20004e20 	andcs	r4, r0, r0, lsr #28
20002194:	20004eb0 			; <UNDEFINED> instruction: 0x20004eb0
20002198:	20004ebc 			; <UNDEFINED> instruction: 0x20004ebc

2000219c <initSprites>:
Image witch1Image;
Image witch2Image;
Image witch3Image;
Image witch4Image;
Image witchImages[4];
static void initSprites( void ) {	
2000219c:	b580      	push	{r7, lr}
2000219e:	b08a      	sub	sp, #40	; 0x28
200021a0:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempWitchLight;
200021a2:	4b33      	ldr	r3, [pc, #204]	; (20002270 <initSprites+0xd4>)
200021a4:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer11, witch1_light_bits, witch1_black_width, witch1_black_height);
200021a6:	4933      	ldr	r1, [pc, #204]	; (20002274 <initSprites+0xd8>)
200021a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
200021aa:	2312      	movs	r3, #18
200021ac:	2212      	movs	r2, #18
200021ae:	f001 fdeb 	bl	20003d88 <load_sprite>
	witch1Light = pointer11;
200021b2:	4b31      	ldr	r3, [pc, #196]	; (20002278 <initSprites+0xdc>)
200021b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200021b6:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempWitchGray;
200021b8:	4b30      	ldr	r3, [pc, #192]	; (2000227c <initSprites+0xe0>)
200021ba:	623b      	str	r3, [r7, #32]
	load_sprite(pointer12, witch1_gray_bits, witch1_black_width, witch1_black_height);
200021bc:	4930      	ldr	r1, [pc, #192]	; (20002280 <initSprites+0xe4>)
200021be:	6a38      	ldr	r0, [r7, #32]
200021c0:	2312      	movs	r3, #18
200021c2:	2212      	movs	r2, #18
200021c4:	f001 fde0 	bl	20003d88 <load_sprite>
	witch1Gray = pointer12;
200021c8:	4b2e      	ldr	r3, [pc, #184]	; (20002284 <initSprites+0xe8>)
200021ca:	6a3a      	ldr	r2, [r7, #32]
200021cc:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempWitchBlack;
200021ce:	4b2e      	ldr	r3, [pc, #184]	; (20002288 <initSprites+0xec>)
200021d0:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer13, witch1_black_bits, witch1_black_width, witch1_black_height);
200021d2:	492e      	ldr	r1, [pc, #184]	; (2000228c <initSprites+0xf0>)
200021d4:	69f8      	ldr	r0, [r7, #28]
200021d6:	2312      	movs	r3, #18
200021d8:	2212      	movs	r2, #18
200021da:	f001 fdd5 	bl	20003d88 <load_sprite>
	witch1Black = pointer13;	
200021de:	4b2c      	ldr	r3, [pc, #176]	; (20002290 <initSprites+0xf4>)
200021e0:	69fa      	ldr	r2, [r7, #28]
200021e2:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempWitch2Light;
200021e4:	4b2b      	ldr	r3, [pc, #172]	; (20002294 <initSprites+0xf8>)
200021e6:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer14, witch2_light_bits, witch2_black_width, witch2_black_height);
200021e8:	492b      	ldr	r1, [pc, #172]	; (20002298 <initSprites+0xfc>)
200021ea:	69b8      	ldr	r0, [r7, #24]
200021ec:	2312      	movs	r3, #18
200021ee:	2212      	movs	r2, #18
200021f0:	f001 fdca 	bl	20003d88 <load_sprite>
	witch2Light = pointer14;
200021f4:	4b29      	ldr	r3, [pc, #164]	; (2000229c <initSprites+0x100>)
200021f6:	69ba      	ldr	r2, [r7, #24]
200021f8:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempWitch2Gray;
200021fa:	4b29      	ldr	r3, [pc, #164]	; (200022a0 <initSprites+0x104>)
200021fc:	617b      	str	r3, [r7, #20]
	load_sprite(pointer15, witch2_gray_bits, witch2_black_width, witch2_black_height);
200021fe:	4929      	ldr	r1, [pc, #164]	; (200022a4 <initSprites+0x108>)
20002200:	6978      	ldr	r0, [r7, #20]
20002202:	2312      	movs	r3, #18
20002204:	2212      	movs	r2, #18
20002206:	f001 fdbf 	bl	20003d88 <load_sprite>
	witch2Gray = pointer15;
2000220a:	4b27      	ldr	r3, [pc, #156]	; (200022a8 <initSprites+0x10c>)
2000220c:	697a      	ldr	r2, [r7, #20]
2000220e:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempWitch2Black;
20002210:	4b26      	ldr	r3, [pc, #152]	; (200022ac <initSprites+0x110>)
20002212:	613b      	str	r3, [r7, #16]
	load_sprite(pointer16, witch2_black_bits, witch2_black_width, witch2_black_height);
20002214:	4926      	ldr	r1, [pc, #152]	; (200022b0 <initSprites+0x114>)
20002216:	6938      	ldr	r0, [r7, #16]
20002218:	2312      	movs	r3, #18
2000221a:	2212      	movs	r2, #18
2000221c:	f001 fdb4 	bl	20003d88 <load_sprite>
	witch2Black = pointer16;
20002220:	4b24      	ldr	r3, [pc, #144]	; (200022b4 <initSprites+0x118>)
20002222:	693a      	ldr	r2, [r7, #16]
20002224:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempWitch3Light;
20002226:	4b24      	ldr	r3, [pc, #144]	; (200022b8 <initSprites+0x11c>)
20002228:	60fb      	str	r3, [r7, #12]
	load_sprite(finalPointer, witch3_light_bits, witch3_black_width, witch3_black_height);
2000222a:	4924      	ldr	r1, [pc, #144]	; (200022bc <initSprites+0x120>)
2000222c:	68f8      	ldr	r0, [r7, #12]
2000222e:	2312      	movs	r3, #18
20002230:	2212      	movs	r2, #18
20002232:	f001 fda9 	bl	20003d88 <load_sprite>
	witch3Light = finalPointer;
20002236:	4b22      	ldr	r3, [pc, #136]	; (200022c0 <initSprites+0x124>)
20002238:	68fa      	ldr	r2, [r7, #12]
2000223a:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempWitch3Gray;
2000223c:	4b21      	ldr	r3, [pc, #132]	; (200022c4 <initSprites+0x128>)
2000223e:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer17, witch3_gray_bits, witch3_black_width, witch3_black_height);
20002240:	4921      	ldr	r1, [pc, #132]	; (200022c8 <initSprites+0x12c>)
20002242:	68b8      	ldr	r0, [r7, #8]
20002244:	2312      	movs	r3, #18
20002246:	2212      	movs	r2, #18
20002248:	f001 fd9e 	bl	20003d88 <load_sprite>
	witch3Gray = pointer17;
2000224c:	4b1f      	ldr	r3, [pc, #124]	; (200022cc <initSprites+0x130>)
2000224e:	68ba      	ldr	r2, [r7, #8]
20002250:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempWitch3Black;
20002252:	4b1f      	ldr	r3, [pc, #124]	; (200022d0 <initSprites+0x134>)
20002254:	607b      	str	r3, [r7, #4]
	load_sprite(pointer18, witch3_black_bits, witch3_black_width, witch3_black_height);
20002256:	491f      	ldr	r1, [pc, #124]	; (200022d4 <initSprites+0x138>)
20002258:	6878      	ldr	r0, [r7, #4]
2000225a:	2312      	movs	r3, #18
2000225c:	2212      	movs	r2, #18
2000225e:	f001 fd93 	bl	20003d88 <load_sprite>
	witch3Black = pointer18;	
20002262:	4b1d      	ldr	r3, [pc, #116]	; (200022d8 <initSprites+0x13c>)
20002264:	687a      	ldr	r2, [r7, #4]
20002266:	601a      	str	r2, [r3, #0]
	
}
20002268:	46c0      	nop			; (mov r8, r8)
2000226a:	46bd      	mov	sp, r7
2000226c:	b00a      	add	sp, #40	; 0x28
2000226e:	bd80      	pop	{r7, pc}
20002270:	20004fd0 	ldrdcs	r4, [r0], -r0
20002274:	200090c8 	andcs	r9, r0, r8, asr #1
20002278:	20004fe8 	andcs	r4, r0, r8, ror #31
2000227c:	20004f60 	andcs	r4, r0, r0, ror #30
20002280:	20009090 	mulcs	r0, r0, r0
20002284:	20004ee8 	andcs	r4, r0, r8, ror #29
20002288:	20004f38 	andcs	r4, r0, r8, lsr pc
2000228c:	20009058 	andcs	r9, r0, r8, asr r0
20002290:	20004fbc 			; <UNDEFINED> instruction: 0x20004fbc
20002294:	20004fdc 	ldrdcs	r4, [r0], -ip
20002298:	20009170 	andcs	r9, r0, r0, ror r1
2000229c:	20004eec 	andcs	r4, r0, ip, ror #29
200022a0:	20004f78 	andcs	r4, r0, r8, ror pc
200022a4:	20009138 	andcs	r9, r0, r8, lsr r1
200022a8:	20004f5c 	andcs	r4, r0, ip, asr pc
200022ac:	20004f2c 	andcs	r4, r0, ip, lsr #30
200022b0:	20009100 	andcs	r9, r0, r0, lsl #2
200022b4:	20004ff8 	strdcs	r4, [r0], -r8
200022b8:	20004f44 	andcs	r4, r0, r4, asr #30
200022bc:	20009218 	andcs	r9, r0, r8, lsl r2
200022c0:	20004fac 	andcs	r4, r0, ip, lsr #31
200022c4:	20004fb0 			; <UNDEFINED> instruction: 0x20004fb0
200022c8:	200091e0 	andcs	r9, r0, r0, ror #3
200022cc:	20004fc0 	andcs	r4, r0, r0, asr #31
200022d0:	20004f6c 	andcs	r4, r0, ip, ror #30
200022d4:	200091a8 	andcs	r9, r0, r8, lsr #3
200022d8:	20004f84 	andcs	r4, r0, r4, lsl #31

200022dc <init_witch>:
	
void init_witch( GameObject *witchObj ) {
200022dc:	b590      	push	{r4, r7, lr}
200022de:	b083      	sub	sp, #12
200022e0:	af00      	add	r7, sp, #0
200022e2:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
200022e4:	4b29      	ldr	r3, [pc, #164]	; (2000238c <init_witch+0xb0>)
200022e6:	681b      	ldr	r3, [r3, #0]
200022e8:	2b00      	cmp	r3, #0
200022ea:	d03b      	beq.n	20002364 <init_witch+0x88>
		initSprites();
200022ec:	f7ff ff56 	bl	2000219c <initSprites>
		firstTime = 0;			
200022f0:	4b26      	ldr	r3, [pc, #152]	; (2000238c <init_witch+0xb0>)
200022f2:	2200      	movs	r2, #0
200022f4:	601a      	str	r2, [r3, #0]

		witchImages[0] = witch1Image;
200022f6:	4b26      	ldr	r3, [pc, #152]	; (20002390 <init_witch+0xb4>)
200022f8:	4a26      	ldr	r2, [pc, #152]	; (20002394 <init_witch+0xb8>)
200022fa:	ca13      	ldmia	r2!, {r0, r1, r4}
200022fc:	c313      	stmia	r3!, {r0, r1, r4}
		witchImages[1] = witch2Image;
200022fe:	4b24      	ldr	r3, [pc, #144]	; (20002390 <init_witch+0xb4>)
20002300:	4a25      	ldr	r2, [pc, #148]	; (20002398 <init_witch+0xbc>)
20002302:	330c      	adds	r3, #12
20002304:	ca13      	ldmia	r2!, {r0, r1, r4}
20002306:	c313      	stmia	r3!, {r0, r1, r4}
		witchImages[2] = witch3Image;
20002308:	4b21      	ldr	r3, [pc, #132]	; (20002390 <init_witch+0xb4>)
2000230a:	4a24      	ldr	r2, [pc, #144]	; (2000239c <init_witch+0xc0>)
2000230c:	3318      	adds	r3, #24
2000230e:	ca13      	ldmia	r2!, {r0, r1, r4}
20002310:	c313      	stmia	r3!, {r0, r1, r4}
		witchImages[3] = witch4Image;
20002312:	4b1f      	ldr	r3, [pc, #124]	; (20002390 <init_witch+0xb4>)
20002314:	4a22      	ldr	r2, [pc, #136]	; (200023a0 <init_witch+0xc4>)
20002316:	3324      	adds	r3, #36	; 0x24
20002318:	ca13      	ldmia	r2!, {r0, r1, r4}
2000231a:	c313      	stmia	r3!, {r0, r1, r4}
		
		
		load_image(&witchImages[0], witch1Black, witch1Gray, witch1Light);
2000231c:	4b21      	ldr	r3, [pc, #132]	; (200023a4 <init_witch+0xc8>)
2000231e:	6819      	ldr	r1, [r3, #0]
20002320:	4b21      	ldr	r3, [pc, #132]	; (200023a8 <init_witch+0xcc>)
20002322:	681a      	ldr	r2, [r3, #0]
20002324:	4b21      	ldr	r3, [pc, #132]	; (200023ac <init_witch+0xd0>)
20002326:	681b      	ldr	r3, [r3, #0]
20002328:	4819      	ldr	r0, [pc, #100]	; (20002390 <init_witch+0xb4>)
2000232a:	f001 fd19 	bl	20003d60 <load_image>
		load_image(&witchImages[1], witch2Black, witch2Gray, witch2Light);
2000232e:	4b20      	ldr	r3, [pc, #128]	; (200023b0 <init_witch+0xd4>)
20002330:	6819      	ldr	r1, [r3, #0]
20002332:	4b20      	ldr	r3, [pc, #128]	; (200023b4 <init_witch+0xd8>)
20002334:	681a      	ldr	r2, [r3, #0]
20002336:	4b20      	ldr	r3, [pc, #128]	; (200023b8 <init_witch+0xdc>)
20002338:	681b      	ldr	r3, [r3, #0]
2000233a:	4820      	ldr	r0, [pc, #128]	; (200023bc <init_witch+0xe0>)
2000233c:	f001 fd10 	bl	20003d60 <load_image>
		load_image(&witchImages[2], witch3Black, witch3Gray, witch3Light);
20002340:	4b1f      	ldr	r3, [pc, #124]	; (200023c0 <init_witch+0xe4>)
20002342:	6819      	ldr	r1, [r3, #0]
20002344:	4b1f      	ldr	r3, [pc, #124]	; (200023c4 <init_witch+0xe8>)
20002346:	681a      	ldr	r2, [r3, #0]
20002348:	4b1f      	ldr	r3, [pc, #124]	; (200023c8 <init_witch+0xec>)
2000234a:	681b      	ldr	r3, [r3, #0]
2000234c:	481f      	ldr	r0, [pc, #124]	; (200023cc <init_witch+0xf0>)
2000234e:	f001 fd07 	bl	20003d60 <load_image>
		load_image(&witchImages[3], witch2Black, witch2Gray, witch2Light);
20002352:	4b17      	ldr	r3, [pc, #92]	; (200023b0 <init_witch+0xd4>)
20002354:	6819      	ldr	r1, [r3, #0]
20002356:	4b17      	ldr	r3, [pc, #92]	; (200023b4 <init_witch+0xd8>)
20002358:	681a      	ldr	r2, [r3, #0]
2000235a:	4b17      	ldr	r3, [pc, #92]	; (200023b8 <init_witch+0xdc>)
2000235c:	681b      	ldr	r3, [r3, #0]
2000235e:	481c      	ldr	r0, [pc, #112]	; (200023d0 <init_witch+0xf4>)
20002360:	f001 fcfe 	bl	20003d60 <load_image>
		
	}
	
	witchObj->images = witchImages;
20002364:	687b      	ldr	r3, [r7, #4]
20002366:	4a0a      	ldr	r2, [pc, #40]	; (20002390 <init_witch+0xb4>)
20002368:	601a      	str	r2, [r3, #0]

	witchObj->current_frame = 0;
2000236a:	687b      	ldr	r3, [r7, #4]
2000236c:	2200      	movs	r2, #0
2000236e:	615a      	str	r2, [r3, #20]
	witchObj->n_frames = 4;
20002370:	687b      	ldr	r3, [r7, #4]
20002372:	2204      	movs	r2, #4
20002374:	619a      	str	r2, [r3, #24]
	witchObj->animation_speed = 1;
20002376:	687b      	ldr	r3, [r7, #4]
20002378:	2201      	movs	r2, #1
2000237a:	61da      	str	r2, [r3, #28]
	witchObj->animation_counter = 0;
2000237c:	687b      	ldr	r3, [r7, #4]
2000237e:	2200      	movs	r2, #0
20002380:	621a      	str	r2, [r3, #32]
}
20002382:	46c0      	nop			; (mov r8, r8)
20002384:	46bd      	mov	sp, r7
20002386:	b003      	add	sp, #12
20002388:	bd90      	pop	{r4, r7, pc}
2000238a:	46c0      	nop			; (mov r8, r8)
2000238c:	20009250 	andcs	r9, r0, r0, asr r2
20002390:	20004ef0 	strdcs	r4, [r0], -r0
20002394:	20004fc4 	andcs	r4, r0, r4, asr #31
20002398:	20004f20 	andcs	r4, r0, r0, lsr #30
2000239c:	20004fec 	andcs	r4, r0, ip, ror #31
200023a0:	20004f50 	andcs	r4, r0, r0, asr pc
200023a4:	20004fbc 			; <UNDEFINED> instruction: 0x20004fbc
200023a8:	20004ee8 	andcs	r4, r0, r8, ror #29
200023ac:	20004fe8 	andcs	r4, r0, r8, ror #31
200023b0:	20004ff8 	strdcs	r4, [r0], -r8
200023b4:	20004f5c 	andcs	r4, r0, ip, asr pc
200023b8:	20004eec 	andcs	r4, r0, ip, ror #29
200023bc:	20004efc 	strdcs	r4, [r0], -ip
200023c0:	20004f84 	andcs	r4, r0, r4, lsl #31
200023c4:	20004fc0 	andcs	r4, r0, r0, asr #31
200023c8:	20004fac 	andcs	r4, r0, ip, lsr #31
200023cc:	20004f08 	andcs	r4, r0, r8, lsl #30
200023d0:	20004f14 	andcs	r4, r0, r4, lsl pc

200023d4 <initSprites>:
Image DIP1Image;
Image DIP2Image;
Image DIP3Image;
Image DIP4Image;
Image DIPImages[4];
static void initSprites( void ) {	
200023d4:	b580      	push	{r7, lr}
200023d6:	b08a      	sub	sp, #40	; 0x28
200023d8:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempDIPLight;
200023da:	4b33      	ldr	r3, [pc, #204]	; (200024a8 <initSprites+0xd4>)
200023dc:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer11, witch1_light_bits, witch1_black_width, witch1_black_height);
200023de:	4933      	ldr	r1, [pc, #204]	; (200024ac <initSprites+0xd8>)
200023e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
200023e2:	2312      	movs	r3, #18
200023e4:	2212      	movs	r2, #18
200023e6:	f001 fccf 	bl	20003d88 <load_sprite>
	DIP1Light = pointer11;
200023ea:	4b31      	ldr	r3, [pc, #196]	; (200024b0 <initSprites+0xdc>)
200023ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200023ee:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempDIPGray;
200023f0:	4b30      	ldr	r3, [pc, #192]	; (200024b4 <initSprites+0xe0>)
200023f2:	623b      	str	r3, [r7, #32]
	load_sprite(pointer12, witch1_gray_bits, witch1_black_width, witch1_black_height);
200023f4:	4930      	ldr	r1, [pc, #192]	; (200024b8 <initSprites+0xe4>)
200023f6:	6a38      	ldr	r0, [r7, #32]
200023f8:	2312      	movs	r3, #18
200023fa:	2212      	movs	r2, #18
200023fc:	f001 fcc4 	bl	20003d88 <load_sprite>
	DIP1Gray = pointer12;
20002400:	4b2e      	ldr	r3, [pc, #184]	; (200024bc <initSprites+0xe8>)
20002402:	6a3a      	ldr	r2, [r7, #32]
20002404:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempDIPBlack;
20002406:	4b2e      	ldr	r3, [pc, #184]	; (200024c0 <initSprites+0xec>)
20002408:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer13, witch1_black_bits, witch1_black_width, witch1_black_height);
2000240a:	492e      	ldr	r1, [pc, #184]	; (200024c4 <initSprites+0xf0>)
2000240c:	69f8      	ldr	r0, [r7, #28]
2000240e:	2312      	movs	r3, #18
20002410:	2212      	movs	r2, #18
20002412:	f001 fcb9 	bl	20003d88 <load_sprite>
	DIP1Black = pointer13;	
20002416:	4b2c      	ldr	r3, [pc, #176]	; (200024c8 <initSprites+0xf4>)
20002418:	69fa      	ldr	r2, [r7, #28]
2000241a:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempDIP2Light;
2000241c:	4b2b      	ldr	r3, [pc, #172]	; (200024cc <initSprites+0xf8>)
2000241e:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer14, witch2_light_bits, witch2_black_width, witch2_black_height);
20002420:	492b      	ldr	r1, [pc, #172]	; (200024d0 <initSprites+0xfc>)
20002422:	69b8      	ldr	r0, [r7, #24]
20002424:	2312      	movs	r3, #18
20002426:	2212      	movs	r2, #18
20002428:	f001 fcae 	bl	20003d88 <load_sprite>
	DIP2Light = pointer14;
2000242c:	4b29      	ldr	r3, [pc, #164]	; (200024d4 <initSprites+0x100>)
2000242e:	69ba      	ldr	r2, [r7, #24]
20002430:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempDIP2Gray;
20002432:	4b29      	ldr	r3, [pc, #164]	; (200024d8 <initSprites+0x104>)
20002434:	617b      	str	r3, [r7, #20]
	load_sprite(pointer15, witch2_gray_bits, witch2_black_width, witch2_black_height);
20002436:	4929      	ldr	r1, [pc, #164]	; (200024dc <initSprites+0x108>)
20002438:	6978      	ldr	r0, [r7, #20]
2000243a:	2312      	movs	r3, #18
2000243c:	2212      	movs	r2, #18
2000243e:	f001 fca3 	bl	20003d88 <load_sprite>
	DIP2Gray = pointer15;
20002442:	4b27      	ldr	r3, [pc, #156]	; (200024e0 <initSprites+0x10c>)
20002444:	697a      	ldr	r2, [r7, #20]
20002446:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempDIP2Black;
20002448:	4b26      	ldr	r3, [pc, #152]	; (200024e4 <initSprites+0x110>)
2000244a:	613b      	str	r3, [r7, #16]
	load_sprite(pointer16, witch2_black_bits, witch2_black_width, witch2_black_height);
2000244c:	4926      	ldr	r1, [pc, #152]	; (200024e8 <initSprites+0x114>)
2000244e:	6938      	ldr	r0, [r7, #16]
20002450:	2312      	movs	r3, #18
20002452:	2212      	movs	r2, #18
20002454:	f001 fc98 	bl	20003d88 <load_sprite>
	DIP2Black = pointer16;
20002458:	4b24      	ldr	r3, [pc, #144]	; (200024ec <initSprites+0x118>)
2000245a:	693a      	ldr	r2, [r7, #16]
2000245c:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempDIP3Light;
2000245e:	4b24      	ldr	r3, [pc, #144]	; (200024f0 <initSprites+0x11c>)
20002460:	60fb      	str	r3, [r7, #12]
	load_sprite(finalPointer, witch3_light_bits, witch3_black_width, witch3_black_height);
20002462:	4924      	ldr	r1, [pc, #144]	; (200024f4 <initSprites+0x120>)
20002464:	68f8      	ldr	r0, [r7, #12]
20002466:	2312      	movs	r3, #18
20002468:	2212      	movs	r2, #18
2000246a:	f001 fc8d 	bl	20003d88 <load_sprite>
	DIP3Light = finalPointer;
2000246e:	4b22      	ldr	r3, [pc, #136]	; (200024f8 <initSprites+0x124>)
20002470:	68fa      	ldr	r2, [r7, #12]
20002472:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempDIP3Gray;
20002474:	4b21      	ldr	r3, [pc, #132]	; (200024fc <initSprites+0x128>)
20002476:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer17, witch3_gray_bits, witch3_black_width, witch3_black_height);
20002478:	4921      	ldr	r1, [pc, #132]	; (20002500 <initSprites+0x12c>)
2000247a:	68b8      	ldr	r0, [r7, #8]
2000247c:	2312      	movs	r3, #18
2000247e:	2212      	movs	r2, #18
20002480:	f001 fc82 	bl	20003d88 <load_sprite>
	DIP3Gray = pointer17;
20002484:	4b1f      	ldr	r3, [pc, #124]	; (20002504 <initSprites+0x130>)
20002486:	68ba      	ldr	r2, [r7, #8]
20002488:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempDIP3Black;
2000248a:	4b1f      	ldr	r3, [pc, #124]	; (20002508 <initSprites+0x134>)
2000248c:	607b      	str	r3, [r7, #4]
	load_sprite(pointer18, witch3_black_bits, witch3_black_width, witch3_black_height);
2000248e:	491f      	ldr	r1, [pc, #124]	; (2000250c <initSprites+0x138>)
20002490:	6878      	ldr	r0, [r7, #4]
20002492:	2312      	movs	r3, #18
20002494:	2212      	movs	r2, #18
20002496:	f001 fc77 	bl	20003d88 <load_sprite>
	DIP3Black = pointer18;	
2000249a:	4b1d      	ldr	r3, [pc, #116]	; (20002510 <initSprites+0x13c>)
2000249c:	687a      	ldr	r2, [r7, #4]
2000249e:	601a      	str	r2, [r3, #0]
	
}
200024a0:	46c0      	nop			; (mov r8, r8)
200024a2:	46bd      	mov	sp, r7
200024a4:	b00a      	add	sp, #40	; 0x28
200024a6:	bd80      	pop	{r7, pc}
200024a8:	20005044 	andcs	r5, r0, r4, asr #32
200024ac:	200092c4 	andcs	r9, r0, r4, asr #5
200024b0:	200050b0 	strhcs	r5, [r0], -r0
200024b4:	20005104 	andcs	r5, r0, r4, lsl #2
200024b8:	2000928c 	andcs	r9, r0, ip, lsl #5
200024bc:	200050d8 	ldrdcs	r5, [r0], -r8
200024c0:	200050cc 	andcs	r5, r0, ip, asr #1
200024c4:	20009254 	andcs	r9, r0, r4, asr r2
200024c8:	20005040 	andcs	r5, r0, r0, asr #32
200024cc:	200050f8 	strdcs	r5, [r0], -r8
200024d0:	2000936c 	andcs	r9, r0, ip, ror #6
200024d4:	200050b4 	strhcs	r5, [r0], -r4
200024d8:	20005030 	andcs	r5, r0, r0, lsr r0
200024dc:	20009334 	andcs	r9, r0, r4, lsr r3
200024e0:	2000502c 	andcs	r5, r0, ip, lsr #32
200024e4:	2000508c 	andcs	r5, r0, ip, lsl #1
200024e8:	200092fc 	strdcs	r9, [r0], -ip
200024ec:	200050bc 	strhcs	r5, [r0], -ip
200024f0:	20005050 	andcs	r5, r0, r0, asr r0
200024f4:	20009414 	andcs	r9, r0, r4, lsl r4
200024f8:	200050b8 	strhcs	r5, [r0], -r8
200024fc:	200050c0 	andcs	r5, r0, r0, asr #1
20002500:	200093dc 	ldrdcs	r9, [r0], -ip
20002504:	200050e8 	andcs	r5, r0, r8, ror #1
20002508:	200050dc 	ldrdcs	r5, [r0], -ip
2000250c:	200093a4 	andcs	r9, r0, r4, lsr #7
20002510:	2000503c 	andcs	r5, r0, ip, lsr r0

20002514 <init_DIP>:
	
void init_DIP( GameObject *DIPObj ) {
20002514:	b590      	push	{r4, r7, lr}
20002516:	b083      	sub	sp, #12
20002518:	af00      	add	r7, sp, #0
2000251a:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
2000251c:	4b29      	ldr	r3, [pc, #164]	; (200025c4 <init_DIP+0xb0>)
2000251e:	681b      	ldr	r3, [r3, #0]
20002520:	2b00      	cmp	r3, #0
20002522:	d03b      	beq.n	2000259c <init_DIP+0x88>
		initSprites();
20002524:	f7ff ff56 	bl	200023d4 <initSprites>
		firstTime = 0;			
20002528:	4b26      	ldr	r3, [pc, #152]	; (200025c4 <init_DIP+0xb0>)
2000252a:	2200      	movs	r2, #0
2000252c:	601a      	str	r2, [r3, #0]

		DIPImages[0] = DIP1Image;
2000252e:	4b26      	ldr	r3, [pc, #152]	; (200025c8 <init_DIP+0xb4>)
20002530:	4a26      	ldr	r2, [pc, #152]	; (200025cc <init_DIP+0xb8>)
20002532:	ca13      	ldmia	r2!, {r0, r1, r4}
20002534:	c313      	stmia	r3!, {r0, r1, r4}
		DIPImages[1] = DIP2Image;
20002536:	4b24      	ldr	r3, [pc, #144]	; (200025c8 <init_DIP+0xb4>)
20002538:	4a25      	ldr	r2, [pc, #148]	; (200025d0 <init_DIP+0xbc>)
2000253a:	330c      	adds	r3, #12
2000253c:	ca13      	ldmia	r2!, {r0, r1, r4}
2000253e:	c313      	stmia	r3!, {r0, r1, r4}
		DIPImages[2] = DIP3Image;
20002540:	4b21      	ldr	r3, [pc, #132]	; (200025c8 <init_DIP+0xb4>)
20002542:	4a24      	ldr	r2, [pc, #144]	; (200025d4 <init_DIP+0xc0>)
20002544:	3318      	adds	r3, #24
20002546:	ca13      	ldmia	r2!, {r0, r1, r4}
20002548:	c313      	stmia	r3!, {r0, r1, r4}
		DIPImages[3] = DIP4Image;
2000254a:	4b1f      	ldr	r3, [pc, #124]	; (200025c8 <init_DIP+0xb4>)
2000254c:	4a22      	ldr	r2, [pc, #136]	; (200025d8 <init_DIP+0xc4>)
2000254e:	3324      	adds	r3, #36	; 0x24
20002550:	ca13      	ldmia	r2!, {r0, r1, r4}
20002552:	c313      	stmia	r3!, {r0, r1, r4}
		
		
		load_image(&DIPImages[0], DIP1Black, DIP1Light, DIP1Gray);
20002554:	4b21      	ldr	r3, [pc, #132]	; (200025dc <init_DIP+0xc8>)
20002556:	6819      	ldr	r1, [r3, #0]
20002558:	4b21      	ldr	r3, [pc, #132]	; (200025e0 <init_DIP+0xcc>)
2000255a:	681a      	ldr	r2, [r3, #0]
2000255c:	4b21      	ldr	r3, [pc, #132]	; (200025e4 <init_DIP+0xd0>)
2000255e:	681b      	ldr	r3, [r3, #0]
20002560:	4819      	ldr	r0, [pc, #100]	; (200025c8 <init_DIP+0xb4>)
20002562:	f001 fbfd 	bl	20003d60 <load_image>
		load_image(&DIPImages[1], DIP2Black, DIP2Light, DIP2Gray);
20002566:	4b20      	ldr	r3, [pc, #128]	; (200025e8 <init_DIP+0xd4>)
20002568:	6819      	ldr	r1, [r3, #0]
2000256a:	4b20      	ldr	r3, [pc, #128]	; (200025ec <init_DIP+0xd8>)
2000256c:	681a      	ldr	r2, [r3, #0]
2000256e:	4b20      	ldr	r3, [pc, #128]	; (200025f0 <init_DIP+0xdc>)
20002570:	681b      	ldr	r3, [r3, #0]
20002572:	4820      	ldr	r0, [pc, #128]	; (200025f4 <init_DIP+0xe0>)
20002574:	f001 fbf4 	bl	20003d60 <load_image>
		load_image(&DIPImages[2], DIP3Black, DIP3Light, DIP3Gray);
20002578:	4b1f      	ldr	r3, [pc, #124]	; (200025f8 <init_DIP+0xe4>)
2000257a:	6819      	ldr	r1, [r3, #0]
2000257c:	4b1f      	ldr	r3, [pc, #124]	; (200025fc <init_DIP+0xe8>)
2000257e:	681a      	ldr	r2, [r3, #0]
20002580:	4b1f      	ldr	r3, [pc, #124]	; (20002600 <init_DIP+0xec>)
20002582:	681b      	ldr	r3, [r3, #0]
20002584:	481f      	ldr	r0, [pc, #124]	; (20002604 <init_DIP+0xf0>)
20002586:	f001 fbeb 	bl	20003d60 <load_image>
		load_image(&DIPImages[3], DIP2Black, DIP2Light, DIP2Gray);
2000258a:	4b17      	ldr	r3, [pc, #92]	; (200025e8 <init_DIP+0xd4>)
2000258c:	6819      	ldr	r1, [r3, #0]
2000258e:	4b17      	ldr	r3, [pc, #92]	; (200025ec <init_DIP+0xd8>)
20002590:	681a      	ldr	r2, [r3, #0]
20002592:	4b17      	ldr	r3, [pc, #92]	; (200025f0 <init_DIP+0xdc>)
20002594:	681b      	ldr	r3, [r3, #0]
20002596:	481c      	ldr	r0, [pc, #112]	; (20002608 <init_DIP+0xf4>)
20002598:	f001 fbe2 	bl	20003d60 <load_image>
		
	}
	
	DIPObj->images = DIPImages;
2000259c:	687b      	ldr	r3, [r7, #4]
2000259e:	4a0a      	ldr	r2, [pc, #40]	; (200025c8 <init_DIP+0xb4>)
200025a0:	601a      	str	r2, [r3, #0]

	DIPObj->current_frame = 0;
200025a2:	687b      	ldr	r3, [r7, #4]
200025a4:	2200      	movs	r2, #0
200025a6:	615a      	str	r2, [r3, #20]
	DIPObj->n_frames = 4;
200025a8:	687b      	ldr	r3, [r7, #4]
200025aa:	2204      	movs	r2, #4
200025ac:	619a      	str	r2, [r3, #24]
	DIPObj->animation_speed = 1;
200025ae:	687b      	ldr	r3, [r7, #4]
200025b0:	2201      	movs	r2, #1
200025b2:	61da      	str	r2, [r3, #28]
	DIPObj->animation_counter = 0;
200025b4:	687b      	ldr	r3, [r7, #4]
200025b6:	2200      	movs	r2, #0
200025b8:	621a      	str	r2, [r3, #32]
}
200025ba:	46c0      	nop			; (mov r8, r8)
200025bc:	46bd      	mov	sp, r7
200025be:	b003      	add	sp, #12
200025c0:	bd90      	pop	{r4, r7, pc}
200025c2:	46c0      	nop			; (mov r8, r8)
200025c4:	2000944c 	andcs	r9, r0, ip, asr #8
200025c8:	2000505c 	andcs	r5, r0, ip, asr r0
200025cc:	200050a4 	andcs	r5, r0, r4, lsr #1
200025d0:	20005020 	andcs	r5, r0, r0, lsr #32
200025d4:	20005098 	mulcs	r0, r8, r0
200025d8:	200050ec 	andcs	r5, r0, ip, ror #1
200025dc:	20005040 	andcs	r5, r0, r0, asr #32
200025e0:	200050b0 	strhcs	r5, [r0], -r0
200025e4:	200050d8 	ldrdcs	r5, [r0], -r8
200025e8:	200050bc 	strhcs	r5, [r0], -ip
200025ec:	200050b4 	strhcs	r5, [r0], -r4
200025f0:	2000502c 	andcs	r5, r0, ip, lsr #32
200025f4:	20005068 	andcs	r5, r0, r8, rrx
200025f8:	2000503c 	andcs	r5, r0, ip, lsr r0
200025fc:	200050b8 	strhcs	r5, [r0], -r8
20002600:	200050e8 	andcs	r5, r0, r8, ror #1
20002604:	20005074 	andcs	r5, r0, r4, ror r0
20002608:	20005080 	andcs	r5, r0, r0, lsl #1

2000260c <setPlayerPosition>:

static int playerPositionX = 0;
static int playerPositionY = 0;

void setPlayerPosition(int x, int y){
2000260c:	b580      	push	{r7, lr}
2000260e:	b082      	sub	sp, #8
20002610:	af00      	add	r7, sp, #0
20002612:	6078      	str	r0, [r7, #4]
20002614:	6039      	str	r1, [r7, #0]
	playerPositionX = x;
20002616:	4b05      	ldr	r3, [pc, #20]	; (2000262c <setPlayerPosition+0x20>)
20002618:	687a      	ldr	r2, [r7, #4]
2000261a:	601a      	str	r2, [r3, #0]
	playerPositionY = y;
2000261c:	4b04      	ldr	r3, [pc, #16]	; (20002630 <setPlayerPosition+0x24>)
2000261e:	683a      	ldr	r2, [r7, #0]
20002620:	601a      	str	r2, [r3, #0]
}
20002622:	46c0      	nop			; (mov r8, r8)
20002624:	46bd      	mov	sp, r7
20002626:	b002      	add	sp, #8
20002628:	bd80      	pop	{r7, pc}
2000262a:	46c0      	nop			; (mov r8, r8)
2000262c:	20004984 	andcs	r4, r0, r4, lsl #19
20002630:	20004988 	andcs	r4, r0, r8, lsl #19

20002634 <DIPUpdate>:


void DIPUpdate(GameObject *this) {
20002634:	b580      	push	{r7, lr}
20002636:	b082      	sub	sp, #8
20002638:	af00      	add	r7, sp, #0
2000263a:	6078      	str	r0, [r7, #4]
	gameObjectUpdate(this);
2000263c:	687b      	ldr	r3, [r7, #4]
2000263e:	0018      	movs	r0, r3
20002640:	f7ff f962 	bl	20001908 <gameObjectUpdate>
	static int counter = 0;
	static int direction = -1;
	static int isRunning = 0;
	counter++;
20002644:	4b39      	ldr	r3, [pc, #228]	; (2000272c <DIPUpdate+0xf8>)
20002646:	681b      	ldr	r3, [r3, #0]
20002648:	1c5a      	adds	r2, r3, #1
2000264a:	4b38      	ldr	r3, [pc, #224]	; (2000272c <DIPUpdate+0xf8>)
2000264c:	601a      	str	r2, [r3, #0]
	
	if (!read_DIL_single(LIGHT_TRIGGER)){ // Only move if the light is off
2000264e:	2006      	movs	r0, #6
20002650:	f001 fbca 	bl	20003de8 <read_DIL_single>
20002654:	1e03      	subs	r3, r0, #0
20002656:	d165      	bne.n	20002724 <DIPUpdate+0xf0>
		
		if (this->yPos >= playerPositionY){
20002658:	687b      	ldr	r3, [r7, #4]
2000265a:	689a      	ldr	r2, [r3, #8]
2000265c:	4b34      	ldr	r3, [pc, #208]	; (20002730 <DIPUpdate+0xfc>)
2000265e:	681b      	ldr	r3, [r3, #0]
20002660:	429a      	cmp	r2, r3
20002662:	db03      	blt.n	2000266c <DIPUpdate+0x38>
			isRunning = 1;
20002664:	4b33      	ldr	r3, [pc, #204]	; (20002734 <DIPUpdate+0x100>)
20002666:	2201      	movs	r2, #1
20002668:	601a      	str	r2, [r3, #0]
2000266a:	e023      	b.n	200026b4 <DIPUpdate+0x80>
		}
		else if ((playerPositionX + DIP_WIDTH >= this->xPos && playerPositionX <= this->xPos + DIP_WIDTH )) { // Move faster if player is below or on the same level
2000266c:	4b32      	ldr	r3, [pc, #200]	; (20002738 <DIPUpdate+0x104>)
2000266e:	681b      	ldr	r3, [r3, #0]
20002670:	3312      	adds	r3, #18
20002672:	001a      	movs	r2, r3
20002674:	687b      	ldr	r3, [r7, #4]
20002676:	685b      	ldr	r3, [r3, #4]
20002678:	429a      	cmp	r2, r3
2000267a:	db1b      	blt.n	200026b4 <DIPUpdate+0x80>
2000267c:	687b      	ldr	r3, [r7, #4]
2000267e:	685b      	ldr	r3, [r3, #4]
20002680:	3312      	adds	r3, #18
20002682:	001a      	movs	r2, r3
20002684:	4b2c      	ldr	r3, [pc, #176]	; (20002738 <DIPUpdate+0x104>)
20002686:	681b      	ldr	r3, [r3, #0]
20002688:	429a      	cmp	r2, r3
2000268a:	db13      	blt.n	200026b4 <DIPUpdate+0x80>
			isRunning = 1;
2000268c:	4b29      	ldr	r3, [pc, #164]	; (20002734 <DIPUpdate+0x100>)
2000268e:	2201      	movs	r2, #1
20002690:	601a      	str	r2, [r3, #0]
			if (RIGHT_POINT - playerPositionX > playerPositionX - LEFT_POINT){
20002692:	4b29      	ldr	r3, [pc, #164]	; (20002738 <DIPUpdate+0x104>)
20002694:	681b      	ldr	r3, [r3, #0]
20002696:	226b      	movs	r2, #107	; 0x6b
20002698:	1ad2      	subs	r2, r2, r3
2000269a:	4b27      	ldr	r3, [pc, #156]	; (20002738 <DIPUpdate+0x104>)
2000269c:	681b      	ldr	r3, [r3, #0]
2000269e:	3b2e      	subs	r3, #46	; 0x2e
200026a0:	429a      	cmp	r2, r3
200026a2:	dd03      	ble.n	200026ac <DIPUpdate+0x78>
				direction = 1;
200026a4:	4b25      	ldr	r3, [pc, #148]	; (2000273c <DIPUpdate+0x108>)
200026a6:	2201      	movs	r2, #1
200026a8:	601a      	str	r2, [r3, #0]
200026aa:	e003      	b.n	200026b4 <DIPUpdate+0x80>
			}
			else{
				direction = -1;
200026ac:	4b23      	ldr	r3, [pc, #140]	; (2000273c <DIPUpdate+0x108>)
200026ae:	2201      	movs	r2, #1
200026b0:	4252      	negs	r2, r2
200026b2:	601a      	str	r2, [r3, #0]
			}
		} 
		
		
		
		if (isRunning){
200026b4:	4b1f      	ldr	r3, [pc, #124]	; (20002734 <DIPUpdate+0x100>)
200026b6:	681b      	ldr	r3, [r3, #0]
200026b8:	2b00      	cmp	r3, #0
200026ba:	d00a      	beq.n	200026d2 <DIPUpdate+0x9e>
			this->xPos += direction*3;
200026bc:	687b      	ldr	r3, [r7, #4]
200026be:	6859      	ldr	r1, [r3, #4]
200026c0:	4b1e      	ldr	r3, [pc, #120]	; (2000273c <DIPUpdate+0x108>)
200026c2:	681a      	ldr	r2, [r3, #0]
200026c4:	0013      	movs	r3, r2
200026c6:	005b      	lsls	r3, r3, #1
200026c8:	189b      	adds	r3, r3, r2
200026ca:	18ca      	adds	r2, r1, r3
200026cc:	687b      	ldr	r3, [r7, #4]
200026ce:	605a      	str	r2, [r3, #4]
200026d0:	e012      	b.n	200026f8 <DIPUpdate+0xc4>
		} else {
			this->xPos += (counter % 2)*direction;
200026d2:	687b      	ldr	r3, [r7, #4]
200026d4:	685a      	ldr	r2, [r3, #4]
200026d6:	4b15      	ldr	r3, [pc, #84]	; (2000272c <DIPUpdate+0xf8>)
200026d8:	681b      	ldr	r3, [r3, #0]
200026da:	4919      	ldr	r1, [pc, #100]	; (20002740 <DIPUpdate+0x10c>)
200026dc:	400b      	ands	r3, r1
200026de:	d504      	bpl.n	200026ea <DIPUpdate+0xb6>
200026e0:	3b01      	subs	r3, #1
200026e2:	2102      	movs	r1, #2
200026e4:	4249      	negs	r1, r1
200026e6:	430b      	orrs	r3, r1
200026e8:	3301      	adds	r3, #1
200026ea:	0019      	movs	r1, r3
200026ec:	4b13      	ldr	r3, [pc, #76]	; (2000273c <DIPUpdate+0x108>)
200026ee:	681b      	ldr	r3, [r3, #0]
200026f0:	434b      	muls	r3, r1
200026f2:	18d2      	adds	r2, r2, r3
200026f4:	687b      	ldr	r3, [r7, #4]
200026f6:	605a      	str	r2, [r3, #4]
		}
		
		if(this->xPos > RIGHT_POINT) {
200026f8:	687b      	ldr	r3, [r7, #4]
200026fa:	685b      	ldr	r3, [r3, #4]
200026fc:	2b6b      	cmp	r3, #107	; 0x6b
200026fe:	dd07      	ble.n	20002710 <DIPUpdate+0xdc>
			isRunning = 0;
20002700:	4b0c      	ldr	r3, [pc, #48]	; (20002734 <DIPUpdate+0x100>)
20002702:	2200      	movs	r2, #0
20002704:	601a      	str	r2, [r3, #0]
			direction = -1;
20002706:	4b0d      	ldr	r3, [pc, #52]	; (2000273c <DIPUpdate+0x108>)
20002708:	2201      	movs	r2, #1
2000270a:	4252      	negs	r2, r2
2000270c:	601a      	str	r2, [r3, #0]
		} else if(this->xPos < LEFT_POINT) {
			isRunning = 0;
			direction = 1;
		}
	}
}
2000270e:	e009      	b.n	20002724 <DIPUpdate+0xf0>
		} else if(this->xPos < LEFT_POINT) {
20002710:	687b      	ldr	r3, [r7, #4]
20002712:	685b      	ldr	r3, [r3, #4]
20002714:	2b2d      	cmp	r3, #45	; 0x2d
20002716:	dc05      	bgt.n	20002724 <DIPUpdate+0xf0>
			isRunning = 0;
20002718:	4b06      	ldr	r3, [pc, #24]	; (20002734 <DIPUpdate+0x100>)
2000271a:	2200      	movs	r2, #0
2000271c:	601a      	str	r2, [r3, #0]
			direction = 1;
2000271e:	4b07      	ldr	r3, [pc, #28]	; (2000273c <DIPUpdate+0x108>)
20002720:	2201      	movs	r2, #1
20002722:	601a      	str	r2, [r3, #0]
}
20002724:	46c0      	nop			; (mov r8, r8)
20002726:	46bd      	mov	sp, r7
20002728:	b002      	add	sp, #8
2000272a:	bd80      	pop	{r7, pc}
2000272c:	2000498c 	andcs	r4, r0, ip, lsl #19
20002730:	20004988 	andcs	r4, r0, r8, lsl #19
20002734:	20004990 	mulcs	r0, r0, r9
20002738:	20004984 	andcs	r4, r0, r4, lsl #19
2000273c:	20009450 	andcs	r9, r0, r0, asr r4
20002740:	80000001 	andhi	r0, r0, r1

20002744 <initSprites>:
Image flame1Image;
Image flame2Image;
Image flame3Image;
Image flame4Image;
Image flameImages[4];
static void initSprites( void ) {	
20002744:	b580      	push	{r7, lr}
20002746:	b08c      	sub	sp, #48	; 0x30
20002748:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempFlameLight;
2000274a:	4b44      	ldr	r3, [pc, #272]	; (2000285c <initSprites+0x118>)
2000274c:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer11, flame1_light_bits, flame1_black_width, flame1_black_height);
2000274e:	4944      	ldr	r1, [pc, #272]	; (20002860 <initSprites+0x11c>)
20002750:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20002752:	2327      	movs	r3, #39	; 0x27
20002754:	2211      	movs	r2, #17
20002756:	f001 fb17 	bl	20003d88 <load_sprite>
	flame1Light = pointer11;
2000275a:	4b42      	ldr	r3, [pc, #264]	; (20002864 <initSprites+0x120>)
2000275c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
2000275e:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempFlameGray;
20002760:	4b41      	ldr	r3, [pc, #260]	; (20002868 <initSprites+0x124>)
20002762:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer12, flame1_gray_bits, flame1_black_width, flame1_black_height);
20002764:	4941      	ldr	r1, [pc, #260]	; (2000286c <initSprites+0x128>)
20002766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20002768:	2327      	movs	r3, #39	; 0x27
2000276a:	2211      	movs	r2, #17
2000276c:	f001 fb0c 	bl	20003d88 <load_sprite>
	flame1Gray = pointer12;
20002770:	4b3f      	ldr	r3, [pc, #252]	; (20002870 <initSprites+0x12c>)
20002772:	6aba      	ldr	r2, [r7, #40]	; 0x28
20002774:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempFlameBlack;
20002776:	4b3f      	ldr	r3, [pc, #252]	; (20002874 <initSprites+0x130>)
20002778:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer13, flame1_black_bits, flame1_black_width, flame1_black_height);
2000277a:	493f      	ldr	r1, [pc, #252]	; (20002878 <initSprites+0x134>)
2000277c:	6a78      	ldr	r0, [r7, #36]	; 0x24
2000277e:	2327      	movs	r3, #39	; 0x27
20002780:	2211      	movs	r2, #17
20002782:	f001 fb01 	bl	20003d88 <load_sprite>
	flame1Black = pointer13;	
20002786:	4b3d      	ldr	r3, [pc, #244]	; (2000287c <initSprites+0x138>)
20002788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000278a:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempFlame2Light;
2000278c:	4b3c      	ldr	r3, [pc, #240]	; (20002880 <initSprites+0x13c>)
2000278e:	623b      	str	r3, [r7, #32]
	load_sprite(pointer14, flame2_light_bits, flame2_black_width, flame2_black_height);
20002790:	493c      	ldr	r1, [pc, #240]	; (20002884 <initSprites+0x140>)
20002792:	6a38      	ldr	r0, [r7, #32]
20002794:	2327      	movs	r3, #39	; 0x27
20002796:	2211      	movs	r2, #17
20002798:	f001 faf6 	bl	20003d88 <load_sprite>
	flame2Light = pointer14;
2000279c:	4b3a      	ldr	r3, [pc, #232]	; (20002888 <initSprites+0x144>)
2000279e:	6a3a      	ldr	r2, [r7, #32]
200027a0:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempFlame2Gray;
200027a2:	4b3a      	ldr	r3, [pc, #232]	; (2000288c <initSprites+0x148>)
200027a4:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer15, flame2_gray_bits, flame2_black_width, flame2_black_height);
200027a6:	493a      	ldr	r1, [pc, #232]	; (20002890 <initSprites+0x14c>)
200027a8:	69f8      	ldr	r0, [r7, #28]
200027aa:	2327      	movs	r3, #39	; 0x27
200027ac:	2211      	movs	r2, #17
200027ae:	f001 faeb 	bl	20003d88 <load_sprite>
	flame2Gray = pointer15;
200027b2:	4b38      	ldr	r3, [pc, #224]	; (20002894 <initSprites+0x150>)
200027b4:	69fa      	ldr	r2, [r7, #28]
200027b6:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempFlame2Black;
200027b8:	4b37      	ldr	r3, [pc, #220]	; (20002898 <initSprites+0x154>)
200027ba:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer16, flame2_black_bits, flame2_black_width, flame2_black_height);
200027bc:	4937      	ldr	r1, [pc, #220]	; (2000289c <initSprites+0x158>)
200027be:	69b8      	ldr	r0, [r7, #24]
200027c0:	2327      	movs	r3, #39	; 0x27
200027c2:	2211      	movs	r2, #17
200027c4:	f001 fae0 	bl	20003d88 <load_sprite>
	flame2Black = pointer16;
200027c8:	4b35      	ldr	r3, [pc, #212]	; (200028a0 <initSprites+0x15c>)
200027ca:	69ba      	ldr	r2, [r7, #24]
200027cc:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempFlame3Light;
200027ce:	4b35      	ldr	r3, [pc, #212]	; (200028a4 <initSprites+0x160>)
200027d0:	617b      	str	r3, [r7, #20]
	load_sprite(finalPointer, flame3_light_bits, flame3_black_width, flame3_black_height);
200027d2:	4935      	ldr	r1, [pc, #212]	; (200028a8 <initSprites+0x164>)
200027d4:	6978      	ldr	r0, [r7, #20]
200027d6:	2327      	movs	r3, #39	; 0x27
200027d8:	2211      	movs	r2, #17
200027da:	f001 fad5 	bl	20003d88 <load_sprite>
	flame3Light = finalPointer;
200027de:	4b33      	ldr	r3, [pc, #204]	; (200028ac <initSprites+0x168>)
200027e0:	697a      	ldr	r2, [r7, #20]
200027e2:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempFlame3Gray;
200027e4:	4b32      	ldr	r3, [pc, #200]	; (200028b0 <initSprites+0x16c>)
200027e6:	613b      	str	r3, [r7, #16]
	load_sprite(pointer17, flame3_gray_bits, flame3_black_width, flame3_black_height);
200027e8:	4932      	ldr	r1, [pc, #200]	; (200028b4 <initSprites+0x170>)
200027ea:	6938      	ldr	r0, [r7, #16]
200027ec:	2327      	movs	r3, #39	; 0x27
200027ee:	2211      	movs	r2, #17
200027f0:	f001 faca 	bl	20003d88 <load_sprite>
	flame3Gray = pointer17;
200027f4:	4b30      	ldr	r3, [pc, #192]	; (200028b8 <initSprites+0x174>)
200027f6:	693a      	ldr	r2, [r7, #16]
200027f8:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempFlame3Black;
200027fa:	4b30      	ldr	r3, [pc, #192]	; (200028bc <initSprites+0x178>)
200027fc:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer18, flame3_black_bits, flame3_black_width, flame3_black_height);
200027fe:	4930      	ldr	r1, [pc, #192]	; (200028c0 <initSprites+0x17c>)
20002800:	68f8      	ldr	r0, [r7, #12]
20002802:	2327      	movs	r3, #39	; 0x27
20002804:	2211      	movs	r2, #17
20002806:	f001 fabf 	bl	20003d88 <load_sprite>
	flame3Black = pointer18;	
2000280a:	4b2e      	ldr	r3, [pc, #184]	; (200028c4 <initSprites+0x180>)
2000280c:	68fa      	ldr	r2, [r7, #12]
2000280e:	601a      	str	r2, [r3, #0]
	
	sprite *pointer19 = &tempFlame4Light;
20002810:	4b2d      	ldr	r3, [pc, #180]	; (200028c8 <initSprites+0x184>)
20002812:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer19, flame4_light_bits, flame4_black_width, flame4_black_height);
20002814:	492d      	ldr	r1, [pc, #180]	; (200028cc <initSprites+0x188>)
20002816:	68b8      	ldr	r0, [r7, #8]
20002818:	2327      	movs	r3, #39	; 0x27
2000281a:	2211      	movs	r2, #17
2000281c:	f001 fab4 	bl	20003d88 <load_sprite>
	flame4Light = pointer19;
20002820:	4b2b      	ldr	r3, [pc, #172]	; (200028d0 <initSprites+0x18c>)
20002822:	68ba      	ldr	r2, [r7, #8]
20002824:	601a      	str	r2, [r3, #0]
	sprite *pointer20 = &tempFlame4Gray;
20002826:	4b2b      	ldr	r3, [pc, #172]	; (200028d4 <initSprites+0x190>)
20002828:	607b      	str	r3, [r7, #4]
	load_sprite(pointer20, flame4_gray_bits, flame4_black_width, flame4_black_height);
2000282a:	492b      	ldr	r1, [pc, #172]	; (200028d8 <initSprites+0x194>)
2000282c:	6878      	ldr	r0, [r7, #4]
2000282e:	2327      	movs	r3, #39	; 0x27
20002830:	2211      	movs	r2, #17
20002832:	f001 faa9 	bl	20003d88 <load_sprite>
	flame4Gray = pointer20;
20002836:	4b29      	ldr	r3, [pc, #164]	; (200028dc <initSprites+0x198>)
20002838:	687a      	ldr	r2, [r7, #4]
2000283a:	601a      	str	r2, [r3, #0]
	sprite *pointer21 = &tempFlame4Black;
2000283c:	4b28      	ldr	r3, [pc, #160]	; (200028e0 <initSprites+0x19c>)
2000283e:	603b      	str	r3, [r7, #0]
	load_sprite(pointer21, flame4_black_bits, flame4_black_width, flame4_black_height);
20002840:	4928      	ldr	r1, [pc, #160]	; (200028e4 <initSprites+0x1a0>)
20002842:	6838      	ldr	r0, [r7, #0]
20002844:	2327      	movs	r3, #39	; 0x27
20002846:	2211      	movs	r2, #17
20002848:	f001 fa9e 	bl	20003d88 <load_sprite>
	flame4Black = pointer21;	
2000284c:	4b26      	ldr	r3, [pc, #152]	; (200028e8 <initSprites+0x1a4>)
2000284e:	683a      	ldr	r2, [r7, #0]
20002850:	601a      	str	r2, [r3, #0]
	
}
20002852:	46c0      	nop			; (mov r8, r8)
20002854:	46bd      	mov	sp, r7
20002856:	b00c      	add	sp, #48	; 0x30
20002858:	bd80      	pop	{r7, pc}
2000285a:	46c0      	nop			; (mov r8, r8)
2000285c:	2000522c 	andcs	r5, r0, ip, lsr #4
20002860:	20009544 	andcs	r9, r0, r4, asr #10
20002864:	200051a4 	andcs	r5, r0, r4, lsr #3
20002868:	20005110 	andcs	r5, r0, r0, lsl r1
2000286c:	200094cc 	andcs	r9, r0, ip, asr #9
20002870:	200051a0 	andcs	r5, r0, r0, lsr #3
20002874:	20005240 	andcs	r5, r0, r0, asr #4
20002878:	20009454 	andcs	r9, r0, r4, asr r4
2000287c:	20005228 	andcs	r5, r0, r8, lsr #4
20002880:	20005178 	andcs	r5, r0, r8, ror r1
20002884:	200096ac 	andcs	r9, r0, ip, lsr #13
20002888:	20005238 	andcs	r5, r0, r8, lsr r2
2000288c:	200051dc 	ldrdcs	r5, [r0], -ip
20002890:	20009634 	andcs	r9, r0, r4, lsr r6
20002894:	2000519c 	mulcs	r0, ip, r1
20002898:	20005190 	mulcs	r0, r0, r1
2000289c:	200095bc 			; <UNDEFINED> instruction: 0x200095bc
200028a0:	20005250 	andcs	r5, r0, r0, asr r2
200028a4:	20005138 	andcs	r5, r0, r8, lsr r1
200028a8:	20009814 	andcs	r9, r0, r4, lsl r8
200028ac:	20005134 	andcs	r5, r0, r4, lsr r1
200028b0:	20005184 	andcs	r5, r0, r4, lsl #3
200028b4:	2000979c 	mulcs	r0, ip, r7
200028b8:	20005150 	andcs	r5, r0, r0, asr r1
200028bc:	20005218 	andcs	r5, r0, r8, lsl r2
200028c0:	20009724 	andcs	r9, r0, r4, lsr #14
200028c4:	2000523c 	andcs	r5, r0, ip, lsr r2
200028c8:	2000511c 	andcs	r5, r0, ip, lsl r1
200028cc:	2000997c 	andcs	r9, r0, ip, ror r9
200028d0:	2000524c 	andcs	r5, r0, ip, asr #4
200028d4:	200051b4 			; <UNDEFINED> instruction: 0x200051b4
200028d8:	20009904 	andcs	r9, r0, r4, lsl #18
200028dc:	200051c0 	andcs	r5, r0, r0, asr #3
200028e0:	200051a8 	andcs	r5, r0, r8, lsr #3
200028e4:	2000988c 	andcs	r9, r0, ip, lsl #17
200028e8:	20005224 	andcs	r5, r0, r4, lsr #4

200028ec <init_flame>:
	
void init_flame( GameObject *flameObj ) {
200028ec:	b590      	push	{r4, r7, lr}
200028ee:	b083      	sub	sp, #12
200028f0:	af00      	add	r7, sp, #0
200028f2:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
200028f4:	4b29      	ldr	r3, [pc, #164]	; (2000299c <init_flame+0xb0>)
200028f6:	681b      	ldr	r3, [r3, #0]
200028f8:	2b00      	cmp	r3, #0
200028fa:	d03b      	beq.n	20002974 <init_flame+0x88>
		initSprites();
200028fc:	f7ff ff22 	bl	20002744 <initSprites>
		firstTime = 0;			
20002900:	4b26      	ldr	r3, [pc, #152]	; (2000299c <init_flame+0xb0>)
20002902:	2200      	movs	r2, #0
20002904:	601a      	str	r2, [r3, #0]

		flameImages[0] = flame1Image;
20002906:	4b26      	ldr	r3, [pc, #152]	; (200029a0 <init_flame+0xb4>)
20002908:	4a26      	ldr	r2, [pc, #152]	; (200029a4 <init_flame+0xb8>)
2000290a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000290c:	c313      	stmia	r3!, {r0, r1, r4}
		flameImages[1] = flame2Image;
2000290e:	4b24      	ldr	r3, [pc, #144]	; (200029a0 <init_flame+0xb4>)
20002910:	4a25      	ldr	r2, [pc, #148]	; (200029a8 <init_flame+0xbc>)
20002912:	330c      	adds	r3, #12
20002914:	ca13      	ldmia	r2!, {r0, r1, r4}
20002916:	c313      	stmia	r3!, {r0, r1, r4}
		flameImages[2] = flame3Image;
20002918:	4b21      	ldr	r3, [pc, #132]	; (200029a0 <init_flame+0xb4>)
2000291a:	4a24      	ldr	r2, [pc, #144]	; (200029ac <init_flame+0xc0>)
2000291c:	3318      	adds	r3, #24
2000291e:	ca13      	ldmia	r2!, {r0, r1, r4}
20002920:	c313      	stmia	r3!, {r0, r1, r4}
		flameImages[3] = flame4Image;
20002922:	4b1f      	ldr	r3, [pc, #124]	; (200029a0 <init_flame+0xb4>)
20002924:	4a22      	ldr	r2, [pc, #136]	; (200029b0 <init_flame+0xc4>)
20002926:	3324      	adds	r3, #36	; 0x24
20002928:	ca13      	ldmia	r2!, {r0, r1, r4}
2000292a:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&flameImages[0], flame1Black, flame1Gray, flame1Light);
2000292c:	4b21      	ldr	r3, [pc, #132]	; (200029b4 <init_flame+0xc8>)
2000292e:	6819      	ldr	r1, [r3, #0]
20002930:	4b21      	ldr	r3, [pc, #132]	; (200029b8 <init_flame+0xcc>)
20002932:	681a      	ldr	r2, [r3, #0]
20002934:	4b21      	ldr	r3, [pc, #132]	; (200029bc <init_flame+0xd0>)
20002936:	681b      	ldr	r3, [r3, #0]
20002938:	4819      	ldr	r0, [pc, #100]	; (200029a0 <init_flame+0xb4>)
2000293a:	f001 fa11 	bl	20003d60 <load_image>
		load_image(&flameImages[1], flame2Black, flame2Gray, flame2Light);
2000293e:	4b20      	ldr	r3, [pc, #128]	; (200029c0 <init_flame+0xd4>)
20002940:	6819      	ldr	r1, [r3, #0]
20002942:	4b20      	ldr	r3, [pc, #128]	; (200029c4 <init_flame+0xd8>)
20002944:	681a      	ldr	r2, [r3, #0]
20002946:	4b20      	ldr	r3, [pc, #128]	; (200029c8 <init_flame+0xdc>)
20002948:	681b      	ldr	r3, [r3, #0]
2000294a:	4820      	ldr	r0, [pc, #128]	; (200029cc <init_flame+0xe0>)
2000294c:	f001 fa08 	bl	20003d60 <load_image>
		load_image(&flameImages[2], flame3Black, flame3Gray, flame3Light);
20002950:	4b1f      	ldr	r3, [pc, #124]	; (200029d0 <init_flame+0xe4>)
20002952:	6819      	ldr	r1, [r3, #0]
20002954:	4b1f      	ldr	r3, [pc, #124]	; (200029d4 <init_flame+0xe8>)
20002956:	681a      	ldr	r2, [r3, #0]
20002958:	4b1f      	ldr	r3, [pc, #124]	; (200029d8 <init_flame+0xec>)
2000295a:	681b      	ldr	r3, [r3, #0]
2000295c:	481f      	ldr	r0, [pc, #124]	; (200029dc <init_flame+0xf0>)
2000295e:	f001 f9ff 	bl	20003d60 <load_image>
		load_image(&flameImages[3], flame4Black, flame4Gray, flame4Light);
20002962:	4b1f      	ldr	r3, [pc, #124]	; (200029e0 <init_flame+0xf4>)
20002964:	6819      	ldr	r1, [r3, #0]
20002966:	4b1f      	ldr	r3, [pc, #124]	; (200029e4 <init_flame+0xf8>)
20002968:	681a      	ldr	r2, [r3, #0]
2000296a:	4b1f      	ldr	r3, [pc, #124]	; (200029e8 <init_flame+0xfc>)
2000296c:	681b      	ldr	r3, [r3, #0]
2000296e:	481f      	ldr	r0, [pc, #124]	; (200029ec <init_flame+0x100>)
20002970:	f001 f9f6 	bl	20003d60 <load_image>
}
	
	flameObj->images = flameImages;
20002974:	687b      	ldr	r3, [r7, #4]
20002976:	4a0a      	ldr	r2, [pc, #40]	; (200029a0 <init_flame+0xb4>)
20002978:	601a      	str	r2, [r3, #0]

	flameObj->current_frame = 0;
2000297a:	687b      	ldr	r3, [r7, #4]
2000297c:	2200      	movs	r2, #0
2000297e:	615a      	str	r2, [r3, #20]
	flameObj->n_frames = 4;
20002980:	687b      	ldr	r3, [r7, #4]
20002982:	2204      	movs	r2, #4
20002984:	619a      	str	r2, [r3, #24]
	flameObj->animation_speed = 1;
20002986:	687b      	ldr	r3, [r7, #4]
20002988:	2201      	movs	r2, #1
2000298a:	61da      	str	r2, [r3, #28]
	flameObj->animation_counter = 0;
2000298c:	687b      	ldr	r3, [r7, #4]
2000298e:	2200      	movs	r2, #0
20002990:	621a      	str	r2, [r3, #32]
}
20002992:	46c0      	nop			; (mov r8, r8)
20002994:	46bd      	mov	sp, r7
20002996:	b003      	add	sp, #12
20002998:	bd90      	pop	{r4, r7, pc}
2000299a:	46c0      	nop			; (mov r8, r8)
2000299c:	200099f4 	strdcs	r9, [r0], -r4
200029a0:	200051e8 	andcs	r5, r0, r8, ror #3
200029a4:	200051d0 	ldrdcs	r5, [r0], -r0
200029a8:	20005128 	andcs	r5, r0, r8, lsr #2
200029ac:	20005144 	andcs	r5, r0, r4, asr #2
200029b0:	200051c4 	andcs	r5, r0, r4, asr #3
200029b4:	20005228 	andcs	r5, r0, r8, lsr #4
200029b8:	200051a0 	andcs	r5, r0, r0, lsr #3
200029bc:	200051a4 	andcs	r5, r0, r4, lsr #3
200029c0:	20005250 	andcs	r5, r0, r0, asr r2
200029c4:	2000519c 	mulcs	r0, ip, r1
200029c8:	20005238 	andcs	r5, r0, r8, lsr r2
200029cc:	200051f4 	strdcs	r5, [r0], -r4
200029d0:	2000523c 	andcs	r5, r0, ip, lsr r2
200029d4:	20005150 	andcs	r5, r0, r0, asr r1
200029d8:	20005134 	andcs	r5, r0, r4, lsr r1
200029dc:	20005200 	andcs	r5, r0, r0, lsl #4
200029e0:	20005224 	andcs	r5, r0, r4, lsr #4
200029e4:	200051c0 	andcs	r5, r0, r0, asr #3
200029e8:	2000524c 	andcs	r5, r0, ip, asr #4
200029ec:	2000520c 	andcs	r5, r0, ip, lsl #4

200029f0 <initSprites>:
Image boom12Image;
Image boom13Image;
Image boom14Image;
Image boom15Image;
Image boomImages[15];
static void initSprites( void ) {	
200029f0:	b580      	push	{r7, lr}
200029f2:	b092      	sub	sp, #72	; 0x48
200029f4:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempBoomLight;
200029f6:	4b65      	ldr	r3, [pc, #404]	; (20002b8c <initSprites+0x19c>)
200029f8:	647b      	str	r3, [r7, #68]	; 0x44
	load_sprite(pointer11, boom1_light_bits, boom1_black_width, boom1_black_height);
200029fa:	4965      	ldr	r1, [pc, #404]	; (20002b90 <initSprites+0x1a0>)
200029fc:	6c78      	ldr	r0, [r7, #68]	; 0x44
200029fe:	2337      	movs	r3, #55	; 0x37
20002a00:	226a      	movs	r2, #106	; 0x6a
20002a02:	f001 f9c1 	bl	20003d88 <load_sprite>
	boom1Light = pointer11;
20002a06:	4b63      	ldr	r3, [pc, #396]	; (20002b94 <initSprites+0x1a4>)
20002a08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
20002a0a:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempBoomGray;
20002a0c:	4b62      	ldr	r3, [pc, #392]	; (20002b98 <initSprites+0x1a8>)
20002a0e:	643b      	str	r3, [r7, #64]	; 0x40
	load_sprite(pointer12, boom1_gray_bits, boom1_black_width, boom1_black_height);
20002a10:	4962      	ldr	r1, [pc, #392]	; (20002b9c <initSprites+0x1ac>)
20002a12:	6c38      	ldr	r0, [r7, #64]	; 0x40
20002a14:	2337      	movs	r3, #55	; 0x37
20002a16:	226a      	movs	r2, #106	; 0x6a
20002a18:	f001 f9b6 	bl	20003d88 <load_sprite>
	boom1Gray = pointer12;
20002a1c:	4b60      	ldr	r3, [pc, #384]	; (20002ba0 <initSprites+0x1b0>)
20002a1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
20002a20:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempBoomBlack;
20002a22:	4b60      	ldr	r3, [pc, #384]	; (20002ba4 <initSprites+0x1b4>)
20002a24:	63fb      	str	r3, [r7, #60]	; 0x3c
	load_sprite(pointer13, boom1_black_bits, boom1_black_width, boom1_black_height);
20002a26:	4960      	ldr	r1, [pc, #384]	; (20002ba8 <initSprites+0x1b8>)
20002a28:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
20002a2a:	2337      	movs	r3, #55	; 0x37
20002a2c:	226a      	movs	r2, #106	; 0x6a
20002a2e:	f001 f9ab 	bl	20003d88 <load_sprite>
	boom1Black = pointer13;	
20002a32:	4b5e      	ldr	r3, [pc, #376]	; (20002bac <initSprites+0x1bc>)
20002a34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
20002a36:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempBoom2Light;
20002a38:	4b5d      	ldr	r3, [pc, #372]	; (20002bb0 <initSprites+0x1c0>)
20002a3a:	63bb      	str	r3, [r7, #56]	; 0x38
	load_sprite(pointer14, boom2_light_bits, boom2_black_width, boom2_black_height);
20002a3c:	495d      	ldr	r1, [pc, #372]	; (20002bb4 <initSprites+0x1c4>)
20002a3e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
20002a40:	2337      	movs	r3, #55	; 0x37
20002a42:	226a      	movs	r2, #106	; 0x6a
20002a44:	f001 f9a0 	bl	20003d88 <load_sprite>
	boom2Light = pointer14;
20002a48:	4b5b      	ldr	r3, [pc, #364]	; (20002bb8 <initSprites+0x1c8>)
20002a4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
20002a4c:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempBoom2Gray;
20002a4e:	4b5b      	ldr	r3, [pc, #364]	; (20002bbc <initSprites+0x1cc>)
20002a50:	637b      	str	r3, [r7, #52]	; 0x34
	load_sprite(pointer15, boom2_gray_bits, boom2_black_width, boom2_black_height);
20002a52:	495b      	ldr	r1, [pc, #364]	; (20002bc0 <initSprites+0x1d0>)
20002a54:	6b78      	ldr	r0, [r7, #52]	; 0x34
20002a56:	2337      	movs	r3, #55	; 0x37
20002a58:	226a      	movs	r2, #106	; 0x6a
20002a5a:	f001 f995 	bl	20003d88 <load_sprite>
	boom2Gray = pointer15;
20002a5e:	4b59      	ldr	r3, [pc, #356]	; (20002bc4 <initSprites+0x1d4>)
20002a60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
20002a62:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempBoom2Black;
20002a64:	4b58      	ldr	r3, [pc, #352]	; (20002bc8 <initSprites+0x1d8>)
20002a66:	633b      	str	r3, [r7, #48]	; 0x30
	load_sprite(pointer16, boom2_black_bits, boom2_black_width, boom2_black_height);
20002a68:	4958      	ldr	r1, [pc, #352]	; (20002bcc <initSprites+0x1dc>)
20002a6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
20002a6c:	2337      	movs	r3, #55	; 0x37
20002a6e:	226a      	movs	r2, #106	; 0x6a
20002a70:	f001 f98a 	bl	20003d88 <load_sprite>
	boom2Black = pointer16;
20002a74:	4b56      	ldr	r3, [pc, #344]	; (20002bd0 <initSprites+0x1e0>)
20002a76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20002a78:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempBoom3Light;
20002a7a:	4b56      	ldr	r3, [pc, #344]	; (20002bd4 <initSprites+0x1e4>)
20002a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(finalPointer, boom3_light_bits, boom3_black_width, boom3_black_height);
20002a7e:	4956      	ldr	r1, [pc, #344]	; (20002bd8 <initSprites+0x1e8>)
20002a80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20002a82:	2337      	movs	r3, #55	; 0x37
20002a84:	226a      	movs	r2, #106	; 0x6a
20002a86:	f001 f97f 	bl	20003d88 <load_sprite>
	boom3Light = finalPointer;
20002a8a:	4b54      	ldr	r3, [pc, #336]	; (20002bdc <initSprites+0x1ec>)
20002a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20002a8e:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempBoom3Gray;
20002a90:	4b53      	ldr	r3, [pc, #332]	; (20002be0 <initSprites+0x1f0>)
20002a92:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer17, boom3_gray_bits, boom3_black_width, boom3_black_height);
20002a94:	4953      	ldr	r1, [pc, #332]	; (20002be4 <initSprites+0x1f4>)
20002a96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20002a98:	2337      	movs	r3, #55	; 0x37
20002a9a:	226a      	movs	r2, #106	; 0x6a
20002a9c:	f001 f974 	bl	20003d88 <load_sprite>
	boom3Gray = pointer17;
20002aa0:	4b51      	ldr	r3, [pc, #324]	; (20002be8 <initSprites+0x1f8>)
20002aa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
20002aa4:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempBoom3Black;
20002aa6:	4b51      	ldr	r3, [pc, #324]	; (20002bec <initSprites+0x1fc>)
20002aa8:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer18, boom3_black_bits, boom3_black_width, boom3_black_height);
20002aaa:	4951      	ldr	r1, [pc, #324]	; (20002bf0 <initSprites+0x200>)
20002aac:	6a78      	ldr	r0, [r7, #36]	; 0x24
20002aae:	2337      	movs	r3, #55	; 0x37
20002ab0:	226a      	movs	r2, #106	; 0x6a
20002ab2:	f001 f969 	bl	20003d88 <load_sprite>
	boom3Black = pointer18;	
20002ab6:	4b4f      	ldr	r3, [pc, #316]	; (20002bf4 <initSprites+0x204>)
20002ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20002aba:	601a      	str	r2, [r3, #0]
	
	sprite *pointer19 = &tempBoom4Light;
20002abc:	4b4e      	ldr	r3, [pc, #312]	; (20002bf8 <initSprites+0x208>)
20002abe:	623b      	str	r3, [r7, #32]
	load_sprite(pointer19, boom4_light_bits, boom4_black_width, boom4_black_height);
20002ac0:	494e      	ldr	r1, [pc, #312]	; (20002bfc <initSprites+0x20c>)
20002ac2:	6a38      	ldr	r0, [r7, #32]
20002ac4:	2337      	movs	r3, #55	; 0x37
20002ac6:	226a      	movs	r2, #106	; 0x6a
20002ac8:	f001 f95e 	bl	20003d88 <load_sprite>
	boom4Light = pointer19;
20002acc:	4b4c      	ldr	r3, [pc, #304]	; (20002c00 <initSprites+0x210>)
20002ace:	6a3a      	ldr	r2, [r7, #32]
20002ad0:	601a      	str	r2, [r3, #0]
	sprite *pointer20 = &tempBoom4Gray;
20002ad2:	4b4c      	ldr	r3, [pc, #304]	; (20002c04 <initSprites+0x214>)
20002ad4:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer20, boom4_gray_bits, boom4_black_width, boom4_black_height);
20002ad6:	494c      	ldr	r1, [pc, #304]	; (20002c08 <initSprites+0x218>)
20002ad8:	69f8      	ldr	r0, [r7, #28]
20002ada:	2337      	movs	r3, #55	; 0x37
20002adc:	226a      	movs	r2, #106	; 0x6a
20002ade:	f001 f953 	bl	20003d88 <load_sprite>
	boom4Gray = pointer20;
20002ae2:	4b4a      	ldr	r3, [pc, #296]	; (20002c0c <initSprites+0x21c>)
20002ae4:	69fa      	ldr	r2, [r7, #28]
20002ae6:	601a      	str	r2, [r3, #0]
	sprite *pointer21 = &tempBoom4Black;
20002ae8:	4b49      	ldr	r3, [pc, #292]	; (20002c10 <initSprites+0x220>)
20002aea:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer21, boom4_black_bits, boom4_black_width, boom4_black_height);
20002aec:	4949      	ldr	r1, [pc, #292]	; (20002c14 <initSprites+0x224>)
20002aee:	69b8      	ldr	r0, [r7, #24]
20002af0:	2337      	movs	r3, #55	; 0x37
20002af2:	226a      	movs	r2, #106	; 0x6a
20002af4:	f001 f948 	bl	20003d88 <load_sprite>
	boom4Black = pointer21;	
20002af8:	4b47      	ldr	r3, [pc, #284]	; (20002c18 <initSprites+0x228>)
20002afa:	69ba      	ldr	r2, [r7, #24]
20002afc:	601a      	str	r2, [r3, #0]
	
	sprite *pointer22 = &tempBoom5Light;
20002afe:	4b47      	ldr	r3, [pc, #284]	; (20002c1c <initSprites+0x22c>)
20002b00:	617b      	str	r3, [r7, #20]
	load_sprite(pointer22, boom5_light_bits, boom5_black_width, boom5_black_height);
20002b02:	4947      	ldr	r1, [pc, #284]	; (20002c20 <initSprites+0x230>)
20002b04:	6978      	ldr	r0, [r7, #20]
20002b06:	2337      	movs	r3, #55	; 0x37
20002b08:	226a      	movs	r2, #106	; 0x6a
20002b0a:	f001 f93d 	bl	20003d88 <load_sprite>
	boom5Light = pointer22;
20002b0e:	4b45      	ldr	r3, [pc, #276]	; (20002c24 <initSprites+0x234>)
20002b10:	697a      	ldr	r2, [r7, #20]
20002b12:	601a      	str	r2, [r3, #0]
	sprite *pointer23 = &tempBoom5Gray;
20002b14:	4b44      	ldr	r3, [pc, #272]	; (20002c28 <initSprites+0x238>)
20002b16:	613b      	str	r3, [r7, #16]
	load_sprite(pointer23, boom5_gray_bits, boom5_black_width, boom5_black_height);
20002b18:	4944      	ldr	r1, [pc, #272]	; (20002c2c <initSprites+0x23c>)
20002b1a:	6938      	ldr	r0, [r7, #16]
20002b1c:	2337      	movs	r3, #55	; 0x37
20002b1e:	226a      	movs	r2, #106	; 0x6a
20002b20:	f001 f932 	bl	20003d88 <load_sprite>
	boom5Gray = pointer23;
20002b24:	4b42      	ldr	r3, [pc, #264]	; (20002c30 <initSprites+0x240>)
20002b26:	693a      	ldr	r2, [r7, #16]
20002b28:	601a      	str	r2, [r3, #0]
	sprite *pointer24 = &tempBoom5Black;
20002b2a:	4b42      	ldr	r3, [pc, #264]	; (20002c34 <initSprites+0x244>)
20002b2c:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer24, boom5_black_bits, boom5_black_width, boom5_black_height);
20002b2e:	4942      	ldr	r1, [pc, #264]	; (20002c38 <initSprites+0x248>)
20002b30:	68f8      	ldr	r0, [r7, #12]
20002b32:	2337      	movs	r3, #55	; 0x37
20002b34:	226a      	movs	r2, #106	; 0x6a
20002b36:	f001 f927 	bl	20003d88 <load_sprite>
	boom5Black = pointer24;
20002b3a:	4b40      	ldr	r3, [pc, #256]	; (20002c3c <initSprites+0x24c>)
20002b3c:	68fa      	ldr	r2, [r7, #12]
20002b3e:	601a      	str	r2, [r3, #0]

	sprite *pointer25 = &tempBoom6Light;
20002b40:	4b3f      	ldr	r3, [pc, #252]	; (20002c40 <initSprites+0x250>)
20002b42:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer25, boom6_light_bits, boom6_black_width, boom6_black_height);
20002b44:	493f      	ldr	r1, [pc, #252]	; (20002c44 <initSprites+0x254>)
20002b46:	68b8      	ldr	r0, [r7, #8]
20002b48:	2337      	movs	r3, #55	; 0x37
20002b4a:	226a      	movs	r2, #106	; 0x6a
20002b4c:	f001 f91c 	bl	20003d88 <load_sprite>
	boom6Light = pointer25;
20002b50:	4b3d      	ldr	r3, [pc, #244]	; (20002c48 <initSprites+0x258>)
20002b52:	68ba      	ldr	r2, [r7, #8]
20002b54:	601a      	str	r2, [r3, #0]
	sprite *pointer26 = &tempBoom6Gray;
20002b56:	4b3d      	ldr	r3, [pc, #244]	; (20002c4c <initSprites+0x25c>)
20002b58:	607b      	str	r3, [r7, #4]
	load_sprite(pointer26, boom6_gray_bits, boom6_black_width, boom6_black_height);
20002b5a:	493d      	ldr	r1, [pc, #244]	; (20002c50 <initSprites+0x260>)
20002b5c:	6878      	ldr	r0, [r7, #4]
20002b5e:	2337      	movs	r3, #55	; 0x37
20002b60:	226a      	movs	r2, #106	; 0x6a
20002b62:	f001 f911 	bl	20003d88 <load_sprite>
	boom6Gray = pointer26;
20002b66:	4b3b      	ldr	r3, [pc, #236]	; (20002c54 <initSprites+0x264>)
20002b68:	687a      	ldr	r2, [r7, #4]
20002b6a:	601a      	str	r2, [r3, #0]
	sprite *pointer27 = &tempBoom6Black;
20002b6c:	4b3a      	ldr	r3, [pc, #232]	; (20002c58 <initSprites+0x268>)
20002b6e:	603b      	str	r3, [r7, #0]
	load_sprite(pointer27, boom6_black_bits, boom6_black_width, boom6_black_height);
20002b70:	493a      	ldr	r1, [pc, #232]	; (20002c5c <initSprites+0x26c>)
20002b72:	6838      	ldr	r0, [r7, #0]
20002b74:	2337      	movs	r3, #55	; 0x37
20002b76:	226a      	movs	r2, #106	; 0x6a
20002b78:	f001 f906 	bl	20003d88 <load_sprite>
	boom6Black = pointer27;
20002b7c:	4b38      	ldr	r3, [pc, #224]	; (20002c60 <initSprites+0x270>)
20002b7e:	683a      	ldr	r2, [r7, #0]
20002b80:	601a      	str	r2, [r3, #0]
}
20002b82:	46c0      	nop			; (mov r8, r8)
20002b84:	46bd      	mov	sp, r7
20002b86:	b012      	add	sp, #72	; 0x48
20002b88:	bd80      	pop	{r7, pc}
20002b8a:	46c0      	nop			; (mov r8, r8)
20002b8c:	2000526c 	andcs	r5, r0, ip, ror #4
20002b90:	2000a000 	andcs	sl, r0, r0
20002b94:	200054dc 	ldrdcs	r5, [r0], -ip
20002b98:	2000542c 	andcs	r5, r0, ip, lsr #8
20002b9c:	20009cfc 	strdcs	r9, [r0], -ip
20002ba0:	20005478 	andcs	r5, r0, r8, ror r4
20002ba4:	200054f4 	strdcs	r5, [r0], -r4
20002ba8:	200099f8 	strdcs	r9, [r0], -r8
20002bac:	2000543c 	andcs	r5, r0, ip, lsr r4
20002bb0:	200054c4 	andcs	r5, r0, r4, asr #9
20002bb4:	2000a90c 	andcs	sl, r0, ip, lsl #18
20002bb8:	200054f0 	strdcs	r5, [r0], -r0
20002bbc:	2000544c 	andcs	r5, r0, ip, asr #8
20002bc0:	2000a608 	andcs	sl, r0, r8, lsl #12
20002bc4:	20005438 	andcs	r5, r0, r8, lsr r4
20002bc8:	20005260 	andcs	r5, r0, r0, ror #4
20002bcc:	2000a304 	andcs	sl, r0, r4, lsl #6
20002bd0:	200054ec 	andcs	r5, r0, ip, ror #9
20002bd4:	20005338 	andcs	r5, r0, r8, lsr r3
20002bd8:	2000b218 	andcs	fp, r0, r8, lsl r2
20002bdc:	2000529c 	mulcs	r0, ip, r2
20002be0:	20005464 	andcs	r5, r0, r4, ror #8
20002be4:	2000af14 	andcs	sl, r0, r4, lsl pc
20002be8:	200052f4 	strdcs	r5, [r0], -r4
20002bec:	20005410 	andcs	r5, r0, r0, lsl r4
20002bf0:	2000ac10 	andcs	sl, r0, r0, lsl ip
20002bf4:	200052a0 	andcs	r5, r0, r0, lsr #5
20002bf8:	200052f8 	strdcs	r5, [r0], -r8
20002bfc:	2000bb24 	andcs	fp, r0, r4, lsr #22
20002c00:	200052c0 	andcs	r5, r0, r0, asr #5
20002c04:	20005458 	andcs	r5, r0, r8, asr r4
20002c08:	2000b820 	andcs	fp, r0, r0, lsr #16
20002c0c:	20005470 	andcs	r5, r0, r0, ror r4
20002c10:	200054b8 			; <UNDEFINED> instruction: 0x200054b8
20002c14:	2000b51c 	andcs	fp, r0, ip, lsl r5
20002c18:	2000541c 	andcs	r5, r0, ip, lsl r4
20002c1c:	200054ac 	andcs	r5, r0, ip, lsr #9
20002c20:	2000c430 	andcs	ip, r0, r0, lsr r4
20002c24:	20005474 	andcs	r5, r0, r4, ror r4
20002c28:	20005254 	andcs	r5, r0, r4, asr r2
20002c2c:	2000c12c 	andcs	ip, r0, ip, lsr #2
20002c30:	20005304 	andcs	r5, r0, r4, lsl #6
20002c34:	200054d0 	ldrdcs	r5, [r0], -r0
20002c38:	2000be28 	andcs	fp, r0, r8, lsr #28
20002c3c:	200052bc 			; <UNDEFINED> instruction: 0x200052bc
20002c40:	20005278 	andcs	r5, r0, r8, ror r2
20002c44:	2000cd3c 	andcs	ip, r0, ip, lsr sp
20002c48:	20005354 	andcs	r5, r0, r4, asr r3
20002c4c:	20005440 	andcs	r5, r0, r0, asr #8
20002c50:	2000ca38 	andcs	ip, r0, r8, lsr sl
20002c54:	20005344 	andcs	r5, r0, r4, asr #6
20002c58:	20005420 	andcs	r5, r0, r0, lsr #8
20002c5c:	2000c734 	andcs	ip, r0, r4, lsr r7
20002c60:	2000540c 	andcs	r5, r0, ip, lsl #8

20002c64 <init_boom>:
	
void init_boom( GameObject *boomObj ) {
20002c64:	b590      	push	{r4, r7, lr}
20002c66:	b083      	sub	sp, #12
20002c68:	af00      	add	r7, sp, #0
20002c6a:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20002c6c:	4b7a      	ldr	r3, [pc, #488]	; (20002e58 <init_boom+0x1f4>)
20002c6e:	681b      	ldr	r3, [r3, #0]
20002c70:	2b00      	cmp	r3, #0
20002c72:	d100      	bne.n	20002c76 <init_boom+0x12>
20002c74:	e0dd      	b.n	20002e32 <init_boom+0x1ce>
		initSprites();
20002c76:	f7ff febb 	bl	200029f0 <initSprites>
		firstTime = 0;			
20002c7a:	4b77      	ldr	r3, [pc, #476]	; (20002e58 <init_boom+0x1f4>)
20002c7c:	2200      	movs	r2, #0
20002c7e:	601a      	str	r2, [r3, #0]

		boomImages[0] = boom1Image;
20002c80:	4b76      	ldr	r3, [pc, #472]	; (20002e5c <init_boom+0x1f8>)
20002c82:	4a77      	ldr	r2, [pc, #476]	; (20002e60 <init_boom+0x1fc>)
20002c84:	ca13      	ldmia	r2!, {r0, r1, r4}
20002c86:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[1] = boom2Image;
20002c88:	4b74      	ldr	r3, [pc, #464]	; (20002e5c <init_boom+0x1f8>)
20002c8a:	4a76      	ldr	r2, [pc, #472]	; (20002e64 <init_boom+0x200>)
20002c8c:	330c      	adds	r3, #12
20002c8e:	ca13      	ldmia	r2!, {r0, r1, r4}
20002c90:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[2] = boom3Image;
20002c92:	4b72      	ldr	r3, [pc, #456]	; (20002e5c <init_boom+0x1f8>)
20002c94:	4a74      	ldr	r2, [pc, #464]	; (20002e68 <init_boom+0x204>)
20002c96:	3318      	adds	r3, #24
20002c98:	ca13      	ldmia	r2!, {r0, r1, r4}
20002c9a:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[3] = boom4Image;
20002c9c:	4b6f      	ldr	r3, [pc, #444]	; (20002e5c <init_boom+0x1f8>)
20002c9e:	4a73      	ldr	r2, [pc, #460]	; (20002e6c <init_boom+0x208>)
20002ca0:	3324      	adds	r3, #36	; 0x24
20002ca2:	ca13      	ldmia	r2!, {r0, r1, r4}
20002ca4:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[4] = boom5Image;
20002ca6:	4b6d      	ldr	r3, [pc, #436]	; (20002e5c <init_boom+0x1f8>)
20002ca8:	4a71      	ldr	r2, [pc, #452]	; (20002e70 <init_boom+0x20c>)
20002caa:	3330      	adds	r3, #48	; 0x30
20002cac:	ca13      	ldmia	r2!, {r0, r1, r4}
20002cae:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[5] = boom6Image;
20002cb0:	4b6a      	ldr	r3, [pc, #424]	; (20002e5c <init_boom+0x1f8>)
20002cb2:	4a70      	ldr	r2, [pc, #448]	; (20002e74 <init_boom+0x210>)
20002cb4:	333c      	adds	r3, #60	; 0x3c
20002cb6:	ca13      	ldmia	r2!, {r0, r1, r4}
20002cb8:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[6] = boom7Image;
20002cba:	4b68      	ldr	r3, [pc, #416]	; (20002e5c <init_boom+0x1f8>)
20002cbc:	4a6e      	ldr	r2, [pc, #440]	; (20002e78 <init_boom+0x214>)
20002cbe:	3348      	adds	r3, #72	; 0x48
20002cc0:	ca13      	ldmia	r2!, {r0, r1, r4}
20002cc2:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[7] = boom8Image;
20002cc4:	4b65      	ldr	r3, [pc, #404]	; (20002e5c <init_boom+0x1f8>)
20002cc6:	4a6d      	ldr	r2, [pc, #436]	; (20002e7c <init_boom+0x218>)
20002cc8:	3354      	adds	r3, #84	; 0x54
20002cca:	ca13      	ldmia	r2!, {r0, r1, r4}
20002ccc:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[8] = boom9Image;
20002cce:	4b63      	ldr	r3, [pc, #396]	; (20002e5c <init_boom+0x1f8>)
20002cd0:	4a6b      	ldr	r2, [pc, #428]	; (20002e80 <init_boom+0x21c>)
20002cd2:	3360      	adds	r3, #96	; 0x60
20002cd4:	ca13      	ldmia	r2!, {r0, r1, r4}
20002cd6:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[9] = boom10Image;
20002cd8:	4b60      	ldr	r3, [pc, #384]	; (20002e5c <init_boom+0x1f8>)
20002cda:	4a6a      	ldr	r2, [pc, #424]	; (20002e84 <init_boom+0x220>)
20002cdc:	336c      	adds	r3, #108	; 0x6c
20002cde:	ca13      	ldmia	r2!, {r0, r1, r4}
20002ce0:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[10] = boom11Image;
20002ce2:	4b5e      	ldr	r3, [pc, #376]	; (20002e5c <init_boom+0x1f8>)
20002ce4:	4a68      	ldr	r2, [pc, #416]	; (20002e88 <init_boom+0x224>)
20002ce6:	3378      	adds	r3, #120	; 0x78
20002ce8:	ca13      	ldmia	r2!, {r0, r1, r4}
20002cea:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[11] = boom12Image;
20002cec:	4b5b      	ldr	r3, [pc, #364]	; (20002e5c <init_boom+0x1f8>)
20002cee:	2284      	movs	r2, #132	; 0x84
20002cf0:	4966      	ldr	r1, [pc, #408]	; (20002e8c <init_boom+0x228>)
20002cf2:	189b      	adds	r3, r3, r2
20002cf4:	000a      	movs	r2, r1
20002cf6:	ca13      	ldmia	r2!, {r0, r1, r4}
20002cf8:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[12] = boom13Image;
20002cfa:	4b58      	ldr	r3, [pc, #352]	; (20002e5c <init_boom+0x1f8>)
20002cfc:	2290      	movs	r2, #144	; 0x90
20002cfe:	4964      	ldr	r1, [pc, #400]	; (20002e90 <init_boom+0x22c>)
20002d00:	189b      	adds	r3, r3, r2
20002d02:	000a      	movs	r2, r1
20002d04:	ca13      	ldmia	r2!, {r0, r1, r4}
20002d06:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[13] = boom14Image;
20002d08:	4b54      	ldr	r3, [pc, #336]	; (20002e5c <init_boom+0x1f8>)
20002d0a:	229c      	movs	r2, #156	; 0x9c
20002d0c:	4961      	ldr	r1, [pc, #388]	; (20002e94 <init_boom+0x230>)
20002d0e:	189b      	adds	r3, r3, r2
20002d10:	000a      	movs	r2, r1
20002d12:	ca13      	ldmia	r2!, {r0, r1, r4}
20002d14:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[14] = boom15Image;
20002d16:	4b51      	ldr	r3, [pc, #324]	; (20002e5c <init_boom+0x1f8>)
20002d18:	22a8      	movs	r2, #168	; 0xa8
20002d1a:	495f      	ldr	r1, [pc, #380]	; (20002e98 <init_boom+0x234>)
20002d1c:	189b      	adds	r3, r3, r2
20002d1e:	000a      	movs	r2, r1
20002d20:	ca13      	ldmia	r2!, {r0, r1, r4}
20002d22:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&boomImages[0], boom1Black, boom1Gray, boom1Light);
20002d24:	4b5d      	ldr	r3, [pc, #372]	; (20002e9c <init_boom+0x238>)
20002d26:	6819      	ldr	r1, [r3, #0]
20002d28:	4b5d      	ldr	r3, [pc, #372]	; (20002ea0 <init_boom+0x23c>)
20002d2a:	681a      	ldr	r2, [r3, #0]
20002d2c:	4b5d      	ldr	r3, [pc, #372]	; (20002ea4 <init_boom+0x240>)
20002d2e:	681b      	ldr	r3, [r3, #0]
20002d30:	484a      	ldr	r0, [pc, #296]	; (20002e5c <init_boom+0x1f8>)
20002d32:	f001 f815 	bl	20003d60 <load_image>
		load_image(&boomImages[1], boom2Black, boom2Gray, boom2Light);
20002d36:	4b5c      	ldr	r3, [pc, #368]	; (20002ea8 <init_boom+0x244>)
20002d38:	6819      	ldr	r1, [r3, #0]
20002d3a:	4b5c      	ldr	r3, [pc, #368]	; (20002eac <init_boom+0x248>)
20002d3c:	681a      	ldr	r2, [r3, #0]
20002d3e:	4b5c      	ldr	r3, [pc, #368]	; (20002eb0 <init_boom+0x24c>)
20002d40:	681b      	ldr	r3, [r3, #0]
20002d42:	485c      	ldr	r0, [pc, #368]	; (20002eb4 <init_boom+0x250>)
20002d44:	f001 f80c 	bl	20003d60 <load_image>
		load_image(&boomImages[2], boom3Black, boom3Gray, boom3Light);
20002d48:	4b5b      	ldr	r3, [pc, #364]	; (20002eb8 <init_boom+0x254>)
20002d4a:	6819      	ldr	r1, [r3, #0]
20002d4c:	4b5b      	ldr	r3, [pc, #364]	; (20002ebc <init_boom+0x258>)
20002d4e:	681a      	ldr	r2, [r3, #0]
20002d50:	4b5b      	ldr	r3, [pc, #364]	; (20002ec0 <init_boom+0x25c>)
20002d52:	681b      	ldr	r3, [r3, #0]
20002d54:	485b      	ldr	r0, [pc, #364]	; (20002ec4 <init_boom+0x260>)
20002d56:	f001 f803 	bl	20003d60 <load_image>
		load_image(&boomImages[3], boom4Black, boom4Gray, boom4Light);
20002d5a:	4b5b      	ldr	r3, [pc, #364]	; (20002ec8 <init_boom+0x264>)
20002d5c:	6819      	ldr	r1, [r3, #0]
20002d5e:	4b5b      	ldr	r3, [pc, #364]	; (20002ecc <init_boom+0x268>)
20002d60:	681a      	ldr	r2, [r3, #0]
20002d62:	4b5b      	ldr	r3, [pc, #364]	; (20002ed0 <init_boom+0x26c>)
20002d64:	681b      	ldr	r3, [r3, #0]
20002d66:	485b      	ldr	r0, [pc, #364]	; (20002ed4 <init_boom+0x270>)
20002d68:	f000 fffa 	bl	20003d60 <load_image>
		load_image(&boomImages[4], boom5Black, boom5Gray, boom5Light);
20002d6c:	4b5a      	ldr	r3, [pc, #360]	; (20002ed8 <init_boom+0x274>)
20002d6e:	6819      	ldr	r1, [r3, #0]
20002d70:	4b5a      	ldr	r3, [pc, #360]	; (20002edc <init_boom+0x278>)
20002d72:	681a      	ldr	r2, [r3, #0]
20002d74:	4b5a      	ldr	r3, [pc, #360]	; (20002ee0 <init_boom+0x27c>)
20002d76:	681b      	ldr	r3, [r3, #0]
20002d78:	485a      	ldr	r0, [pc, #360]	; (20002ee4 <init_boom+0x280>)
20002d7a:	f000 fff1 	bl	20003d60 <load_image>
		load_image(&boomImages[5], boom6Black, boom6Gray, boom6Light);
20002d7e:	4b5a      	ldr	r3, [pc, #360]	; (20002ee8 <init_boom+0x284>)
20002d80:	6819      	ldr	r1, [r3, #0]
20002d82:	4b5a      	ldr	r3, [pc, #360]	; (20002eec <init_boom+0x288>)
20002d84:	681a      	ldr	r2, [r3, #0]
20002d86:	4b5a      	ldr	r3, [pc, #360]	; (20002ef0 <init_boom+0x28c>)
20002d88:	681b      	ldr	r3, [r3, #0]
20002d8a:	485a      	ldr	r0, [pc, #360]	; (20002ef4 <init_boom+0x290>)
20002d8c:	f000 ffe8 	bl	20003d60 <load_image>
		load_image(&boomImages[6], boom6Black, boom6Gray, boom6Light);
20002d90:	4b55      	ldr	r3, [pc, #340]	; (20002ee8 <init_boom+0x284>)
20002d92:	6819      	ldr	r1, [r3, #0]
20002d94:	4b55      	ldr	r3, [pc, #340]	; (20002eec <init_boom+0x288>)
20002d96:	681a      	ldr	r2, [r3, #0]
20002d98:	4b55      	ldr	r3, [pc, #340]	; (20002ef0 <init_boom+0x28c>)
20002d9a:	681b      	ldr	r3, [r3, #0]
20002d9c:	4856      	ldr	r0, [pc, #344]	; (20002ef8 <init_boom+0x294>)
20002d9e:	f000 ffdf 	bl	20003d60 <load_image>
		load_image(&boomImages[7], boom6Black, boom6Gray, boom6Light);
20002da2:	4b51      	ldr	r3, [pc, #324]	; (20002ee8 <init_boom+0x284>)
20002da4:	6819      	ldr	r1, [r3, #0]
20002da6:	4b51      	ldr	r3, [pc, #324]	; (20002eec <init_boom+0x288>)
20002da8:	681a      	ldr	r2, [r3, #0]
20002daa:	4b51      	ldr	r3, [pc, #324]	; (20002ef0 <init_boom+0x28c>)
20002dac:	681b      	ldr	r3, [r3, #0]
20002dae:	4853      	ldr	r0, [pc, #332]	; (20002efc <init_boom+0x298>)
20002db0:	f000 ffd6 	bl	20003d60 <load_image>
		load_image(&boomImages[8], boom6Black, boom6Gray, boom6Light);
20002db4:	4b4c      	ldr	r3, [pc, #304]	; (20002ee8 <init_boom+0x284>)
20002db6:	6819      	ldr	r1, [r3, #0]
20002db8:	4b4c      	ldr	r3, [pc, #304]	; (20002eec <init_boom+0x288>)
20002dba:	681a      	ldr	r2, [r3, #0]
20002dbc:	4b4c      	ldr	r3, [pc, #304]	; (20002ef0 <init_boom+0x28c>)
20002dbe:	681b      	ldr	r3, [r3, #0]
20002dc0:	484f      	ldr	r0, [pc, #316]	; (20002f00 <init_boom+0x29c>)
20002dc2:	f000 ffcd 	bl	20003d60 <load_image>
		load_image(&boomImages[9], boom6Black, boom6Gray, boom6Light);
20002dc6:	4b48      	ldr	r3, [pc, #288]	; (20002ee8 <init_boom+0x284>)
20002dc8:	6819      	ldr	r1, [r3, #0]
20002dca:	4b48      	ldr	r3, [pc, #288]	; (20002eec <init_boom+0x288>)
20002dcc:	681a      	ldr	r2, [r3, #0]
20002dce:	4b48      	ldr	r3, [pc, #288]	; (20002ef0 <init_boom+0x28c>)
20002dd0:	681b      	ldr	r3, [r3, #0]
20002dd2:	484c      	ldr	r0, [pc, #304]	; (20002f04 <init_boom+0x2a0>)
20002dd4:	f000 ffc4 	bl	20003d60 <load_image>
		load_image(&boomImages[10], boom6Black, boom6Gray, boom6Light);
20002dd8:	4b43      	ldr	r3, [pc, #268]	; (20002ee8 <init_boom+0x284>)
20002dda:	6819      	ldr	r1, [r3, #0]
20002ddc:	4b43      	ldr	r3, [pc, #268]	; (20002eec <init_boom+0x288>)
20002dde:	681a      	ldr	r2, [r3, #0]
20002de0:	4b43      	ldr	r3, [pc, #268]	; (20002ef0 <init_boom+0x28c>)
20002de2:	681b      	ldr	r3, [r3, #0]
20002de4:	4848      	ldr	r0, [pc, #288]	; (20002f08 <init_boom+0x2a4>)
20002de6:	f000 ffbb 	bl	20003d60 <load_image>
		load_image(&boomImages[11], boom6Black, boom6Gray, boom6Light);
20002dea:	4b3f      	ldr	r3, [pc, #252]	; (20002ee8 <init_boom+0x284>)
20002dec:	6819      	ldr	r1, [r3, #0]
20002dee:	4b3f      	ldr	r3, [pc, #252]	; (20002eec <init_boom+0x288>)
20002df0:	681a      	ldr	r2, [r3, #0]
20002df2:	4b3f      	ldr	r3, [pc, #252]	; (20002ef0 <init_boom+0x28c>)
20002df4:	681b      	ldr	r3, [r3, #0]
20002df6:	4845      	ldr	r0, [pc, #276]	; (20002f0c <init_boom+0x2a8>)
20002df8:	f000 ffb2 	bl	20003d60 <load_image>
		load_image(&boomImages[12], boom6Black, boom6Gray, boom6Light);
20002dfc:	4b3a      	ldr	r3, [pc, #232]	; (20002ee8 <init_boom+0x284>)
20002dfe:	6819      	ldr	r1, [r3, #0]
20002e00:	4b3a      	ldr	r3, [pc, #232]	; (20002eec <init_boom+0x288>)
20002e02:	681a      	ldr	r2, [r3, #0]
20002e04:	4b3a      	ldr	r3, [pc, #232]	; (20002ef0 <init_boom+0x28c>)
20002e06:	681b      	ldr	r3, [r3, #0]
20002e08:	4841      	ldr	r0, [pc, #260]	; (20002f10 <init_boom+0x2ac>)
20002e0a:	f000 ffa9 	bl	20003d60 <load_image>
		load_image(&boomImages[13], boom6Black, boom6Gray, boom6Light);
20002e0e:	4b36      	ldr	r3, [pc, #216]	; (20002ee8 <init_boom+0x284>)
20002e10:	6819      	ldr	r1, [r3, #0]
20002e12:	4b36      	ldr	r3, [pc, #216]	; (20002eec <init_boom+0x288>)
20002e14:	681a      	ldr	r2, [r3, #0]
20002e16:	4b36      	ldr	r3, [pc, #216]	; (20002ef0 <init_boom+0x28c>)
20002e18:	681b      	ldr	r3, [r3, #0]
20002e1a:	483e      	ldr	r0, [pc, #248]	; (20002f14 <init_boom+0x2b0>)
20002e1c:	f000 ffa0 	bl	20003d60 <load_image>
		load_image(&boomImages[14], boom6Black, boom6Gray, boom6Light);
20002e20:	4b31      	ldr	r3, [pc, #196]	; (20002ee8 <init_boom+0x284>)
20002e22:	6819      	ldr	r1, [r3, #0]
20002e24:	4b31      	ldr	r3, [pc, #196]	; (20002eec <init_boom+0x288>)
20002e26:	681a      	ldr	r2, [r3, #0]
20002e28:	4b31      	ldr	r3, [pc, #196]	; (20002ef0 <init_boom+0x28c>)
20002e2a:	681b      	ldr	r3, [r3, #0]
20002e2c:	483a      	ldr	r0, [pc, #232]	; (20002f18 <init_boom+0x2b4>)
20002e2e:	f000 ff97 	bl	20003d60 <load_image>
	}
	
	boomObj->images = boomImages;
20002e32:	687b      	ldr	r3, [r7, #4]
20002e34:	4a09      	ldr	r2, [pc, #36]	; (20002e5c <init_boom+0x1f8>)
20002e36:	601a      	str	r2, [r3, #0]

	boomObj->current_frame = 0;
20002e38:	687b      	ldr	r3, [r7, #4]
20002e3a:	2200      	movs	r2, #0
20002e3c:	615a      	str	r2, [r3, #20]
	boomObj->n_frames = 15;
20002e3e:	687b      	ldr	r3, [r7, #4]
20002e40:	220f      	movs	r2, #15
20002e42:	619a      	str	r2, [r3, #24]
	boomObj->animation_speed = 1;
20002e44:	687b      	ldr	r3, [r7, #4]
20002e46:	2201      	movs	r2, #1
20002e48:	61da      	str	r2, [r3, #28]
	boomObj->animation_counter = 0;
20002e4a:	687b      	ldr	r3, [r7, #4]
20002e4c:	2200      	movs	r2, #0
20002e4e:	621a      	str	r2, [r3, #32]
}
20002e50:	46c0      	nop			; (mov r8, r8)
20002e52:	46bd      	mov	sp, r7
20002e54:	b003      	add	sp, #12
20002e56:	bd90      	pop	{r4, r7, pc}
20002e58:	2000d040 	andcs	sp, r0, r0, asr #32
20002e5c:	20005358 	andcs	r5, r0, r8, asr r3
20002e60:	20005488 	andcs	r5, r0, r8, lsl #9
20002e64:	200052b0 			; <UNDEFINED> instruction: 0x200052b0
20002e68:	200054a0 	andcs	r5, r0, r0, lsr #9
20002e6c:	200052a4 	andcs	r5, r0, r4, lsr #5
20002e70:	200052e8 	andcs	r5, r0, r8, ror #5
20002e74:	2000532c 	andcs	r5, r0, ip, lsr #6
20002e78:	20005494 	mulcs	r0, r4, r4
20002e7c:	200052dc 	ldrdcs	r5, [r0], -ip
20002e80:	20005284 	andcs	r5, r0, r4, lsl #5
20002e84:	200052c4 	andcs	r5, r0, r4, asr #5
20002e88:	2000547c 	andcs	r5, r0, ip, ror r4
20002e8c:	20005290 	mulcs	r0, r0, r2
20002e90:	20005348 	andcs	r5, r0, r8, asr #6
20002e94:	200052d0 	ldrdcs	r5, [r0], -r0
20002e98:	200054e0 	andcs	r5, r0, r0, ror #9
20002e9c:	2000543c 	andcs	r5, r0, ip, lsr r4
20002ea0:	20005478 	andcs	r5, r0, r8, ror r4
20002ea4:	200054dc 	ldrdcs	r5, [r0], -ip
20002ea8:	200054ec 	andcs	r5, r0, ip, ror #9
20002eac:	20005438 	andcs	r5, r0, r8, lsr r4
20002eb0:	200054f0 	strdcs	r5, [r0], -r0
20002eb4:	20005364 	andcs	r5, r0, r4, ror #6
20002eb8:	200052a0 	andcs	r5, r0, r0, lsr #5
20002ebc:	200052f4 	strdcs	r5, [r0], -r4
20002ec0:	2000529c 	mulcs	r0, ip, r2
20002ec4:	20005370 	andcs	r5, r0, r0, ror r3
20002ec8:	2000541c 	andcs	r5, r0, ip, lsl r4
20002ecc:	20005470 	andcs	r5, r0, r0, ror r4
20002ed0:	200052c0 	andcs	r5, r0, r0, asr #5
20002ed4:	2000537c 	andcs	r5, r0, ip, ror r3
20002ed8:	200052bc 			; <UNDEFINED> instruction: 0x200052bc
20002edc:	20005304 	andcs	r5, r0, r4, lsl #6
20002ee0:	20005474 	andcs	r5, r0, r4, ror r4
20002ee4:	20005388 	andcs	r5, r0, r8, lsl #7
20002ee8:	2000540c 	andcs	r5, r0, ip, lsl #8
20002eec:	20005344 	andcs	r5, r0, r4, asr #6
20002ef0:	20005354 	andcs	r5, r0, r4, asr r3
20002ef4:	20005394 	mulcs	r0, r4, r3
20002ef8:	200053a0 	andcs	r5, r0, r0, lsr #7
20002efc:	200053ac 	andcs	r5, r0, ip, lsr #7
20002f00:	200053b8 			; <UNDEFINED> instruction: 0x200053b8
20002f04:	200053c4 	andcs	r5, r0, r4, asr #7
20002f08:	200053d0 	ldrdcs	r5, [r0], -r0
20002f0c:	200053dc 	ldrdcs	r5, [r0], -ip
20002f10:	200053e8 	andcs	r5, r0, r8, ror #7
20002f14:	200053f4 	strdcs	r5, [r0], -r4
20002f18:	20005400 	andcs	r5, r0, r0, lsl #8

20002f1c <delay_250ns>:
#include "graphics.h"


void delay_250ns(void){
20002f1c:	b580      	push	{r7, lr}
20002f1e:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
20002f20:	4b0c      	ldr	r3, [pc, #48]	; (20002f54 <delay_250ns+0x38>)
20002f22:	2200      	movs	r2, #0
20002f24:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/4) -1);
20002f26:	4b0c      	ldr	r3, [pc, #48]	; (20002f58 <delay_250ns+0x3c>)
20002f28:	2229      	movs	r2, #41	; 0x29
20002f2a:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20002f2c:	4b0b      	ldr	r3, [pc, #44]	; (20002f5c <delay_250ns+0x40>)
20002f2e:	2200      	movs	r2, #0
20002f30:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20002f32:	4b08      	ldr	r3, [pc, #32]	; (20002f54 <delay_250ns+0x38>)
20002f34:	2205      	movs	r2, #5
20002f36:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
20002f38:	46c0      	nop			; (mov r8, r8)
20002f3a:	4b06      	ldr	r3, [pc, #24]	; (20002f54 <delay_250ns+0x38>)
20002f3c:	681a      	ldr	r2, [r3, #0]
20002f3e:	2380      	movs	r3, #128	; 0x80
20002f40:	025b      	lsls	r3, r3, #9
20002f42:	4013      	ands	r3, r2
20002f44:	d0f9      	beq.n	20002f3a <delay_250ns+0x1e>
	*STK_CTRL = 0;
20002f46:	4b03      	ldr	r3, [pc, #12]	; (20002f54 <delay_250ns+0x38>)
20002f48:	2200      	movs	r2, #0
20002f4a:	601a      	str	r2, [r3, #0]
}
20002f4c:	46c0      	nop			; (mov r8, r8)
20002f4e:	46bd      	mov	sp, r7
20002f50:	bd80      	pop	{r7, pc}
20002f52:	46c0      	nop			; (mov r8, r8)
20002f54:	e000e010 	and	lr, r0, r0, lsl r0
20002f58:	e000e014 	and	lr, r0, r4, lsl r0
20002f5c:	e000e018 	and	lr, r0, r8, lsl r0

20002f60 <delay_500ns>:

void delay_500ns(void){
20002f60:	b580      	push	{r7, lr}
20002f62:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
20002f64:	4b0c      	ldr	r3, [pc, #48]	; (20002f98 <delay_500ns+0x38>)
20002f66:	2200      	movs	r2, #0
20002f68:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/2) -1);
20002f6a:	4b0c      	ldr	r3, [pc, #48]	; (20002f9c <delay_500ns+0x3c>)
20002f6c:	2253      	movs	r2, #83	; 0x53
20002f6e:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20002f70:	4b0b      	ldr	r3, [pc, #44]	; (20002fa0 <delay_500ns+0x40>)
20002f72:	2200      	movs	r2, #0
20002f74:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20002f76:	4b08      	ldr	r3, [pc, #32]	; (20002f98 <delay_500ns+0x38>)
20002f78:	2205      	movs	r2, #5
20002f7a:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
20002f7c:	46c0      	nop			; (mov r8, r8)
20002f7e:	4b06      	ldr	r3, [pc, #24]	; (20002f98 <delay_500ns+0x38>)
20002f80:	681a      	ldr	r2, [r3, #0]
20002f82:	2380      	movs	r3, #128	; 0x80
20002f84:	025b      	lsls	r3, r3, #9
20002f86:	4013      	ands	r3, r2
20002f88:	d0f9      	beq.n	20002f7e <delay_500ns+0x1e>
	*STK_CTRL = 0;
20002f8a:	4b03      	ldr	r3, [pc, #12]	; (20002f98 <delay_500ns+0x38>)
20002f8c:	2200      	movs	r2, #0
20002f8e:	601a      	str	r2, [r3, #0]
}
20002f90:	46c0      	nop			; (mov r8, r8)
20002f92:	46bd      	mov	sp, r7
20002f94:	bd80      	pop	{r7, pc}
20002f96:	46c0      	nop			; (mov r8, r8)
20002f98:	e000e010 	and	lr, r0, r0, lsl r0
20002f9c:	e000e014 	and	lr, r0, r4, lsl r0
20002fa0:	e000e018 	and	lr, r0, r8, lsl r0

20002fa4 <delay_micro>:

void delay_micro(unsigned int us){
20002fa4:	b580      	push	{r7, lr}
20002fa6:	b082      	sub	sp, #8
20002fa8:	af00      	add	r7, sp, #0
20002faa:	6078      	str	r0, [r7, #4]
	while(us--) {
20002fac:	e007      	b.n	20002fbe <delay_micro+0x1a>
		delay_250ns();
20002fae:	f7ff ffb5 	bl	20002f1c <delay_250ns>
		delay_250ns();
20002fb2:	f7ff ffb3 	bl	20002f1c <delay_250ns>
		delay_250ns();
20002fb6:	f7ff ffb1 	bl	20002f1c <delay_250ns>
		delay_250ns();
20002fba:	f7ff ffaf 	bl	20002f1c <delay_250ns>
	while(us--) {
20002fbe:	687b      	ldr	r3, [r7, #4]
20002fc0:	1e5a      	subs	r2, r3, #1
20002fc2:	607a      	str	r2, [r7, #4]
20002fc4:	2b00      	cmp	r3, #0
20002fc6:	d1f2      	bne.n	20002fae <delay_micro+0xa>
	}
}
20002fc8:	46c0      	nop			; (mov r8, r8)
20002fca:	46bd      	mov	sp, r7
20002fcc:	b002      	add	sp, #8
20002fce:	bd80      	pop	{r7, pc}

20002fd0 <delay_milli>:

void delay_milli(unsigned int ms){
20002fd0:	b580      	push	{r7, lr}
20002fd2:	b082      	sub	sp, #8
20002fd4:	af00      	add	r7, sp, #0
20002fd6:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		while(ms--)
			delay_micro(1);
	#else
		while(ms--)
20002fd8:	e004      	b.n	20002fe4 <delay_milli+0x14>
			delay_micro(1000);
20002fda:	23fa      	movs	r3, #250	; 0xfa
20002fdc:	009b      	lsls	r3, r3, #2
20002fde:	0018      	movs	r0, r3
20002fe0:	f7ff ffe0 	bl	20002fa4 <delay_micro>
		while(ms--)
20002fe4:	687b      	ldr	r3, [r7, #4]
20002fe6:	1e5a      	subs	r2, r3, #1
20002fe8:	607a      	str	r2, [r7, #4]
20002fea:	2b00      	cmp	r3, #0
20002fec:	d1f5      	bne.n	20002fda <delay_milli+0xa>
	#endif
}
20002fee:	46c0      	nop			; (mov r8, r8)
20002ff0:	46bd      	mov	sp, r7
20002ff2:	b002      	add	sp, #8
20002ff4:	bd80      	pop	{r7, pc}

20002ff6 <clear_thisBackBuffer>:
uint8_t draw_buffer_black_light[1024]; // 128 * 64 / 8
uint8_t draw_buffer_black_gray_light[1024]; // 128 * 64 / 8
uint8_t backBuffer[1024]; // 128 * 64 / 8
uint8_t backBufferGray[1024]; // 128 * 64 / 8
uint8_t backBufferLight[1024]; // 128 * 64 / 8
void clear_thisBackBuffer(uint8_t *buffer) {
20002ff6:	b580      	push	{r7, lr}
20002ff8:	b084      	sub	sp, #16
20002ffa:	af00      	add	r7, sp, #0
20002ffc:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < 1024; i++)
20002ffe:	2300      	movs	r3, #0
20003000:	60fb      	str	r3, [r7, #12]
20003002:	e007      	b.n	20003014 <clear_thisBackBuffer+0x1e>
		buffer[i] = 0;
20003004:	68fb      	ldr	r3, [r7, #12]
20003006:	687a      	ldr	r2, [r7, #4]
20003008:	18d3      	adds	r3, r2, r3
2000300a:	2200      	movs	r2, #0
2000300c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 1024; i++)
2000300e:	68fb      	ldr	r3, [r7, #12]
20003010:	3301      	adds	r3, #1
20003012:	60fb      	str	r3, [r7, #12]
20003014:	68fb      	ldr	r3, [r7, #12]
20003016:	4a03      	ldr	r2, [pc, #12]	; (20003024 <clear_thisBackBuffer+0x2e>)
20003018:	4293      	cmp	r3, r2
2000301a:	ddf3      	ble.n	20003004 <clear_thisBackBuffer+0xe>
}
2000301c:	46c0      	nop			; (mov r8, r8)
2000301e:	46bd      	mov	sp, r7
20003020:	b004      	add	sp, #16
20003022:	bd80      	pop	{r7, pc}
20003024:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20003028 <clear_backBuffer>:
void clear_backBuffer() {
20003028:	b580      	push	{r7, lr}
2000302a:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
2000302c:	4b03      	ldr	r3, [pc, #12]	; (2000303c <clear_backBuffer+0x14>)
2000302e:	0018      	movs	r0, r3
20003030:	f7ff ffe1 	bl	20002ff6 <clear_thisBackBuffer>
}
20003034:	46c0      	nop			; (mov r8, r8)
20003036:	46bd      	mov	sp, r7
20003038:	bd80      	pop	{r7, pc}
2000303a:	46c0      	nop			; (mov r8, r8)
2000303c:	20005d00 	andcs	r5, r0, r0, lsl #26

20003040 <clear_all_backBuffers>:
void clear_all_backBuffers() {
20003040:	b580      	push	{r7, lr}
20003042:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
20003044:	4b07      	ldr	r3, [pc, #28]	; (20003064 <clear_all_backBuffers+0x24>)
20003046:	0018      	movs	r0, r3
20003048:	f7ff ffd5 	bl	20002ff6 <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferGray);
2000304c:	4b06      	ldr	r3, [pc, #24]	; (20003068 <clear_all_backBuffers+0x28>)
2000304e:	0018      	movs	r0, r3
20003050:	f7ff ffd1 	bl	20002ff6 <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferLight);
20003054:	4b05      	ldr	r3, [pc, #20]	; (2000306c <clear_all_backBuffers+0x2c>)
20003056:	0018      	movs	r0, r3
20003058:	f7ff ffcd 	bl	20002ff6 <clear_thisBackBuffer>
}
2000305c:	46c0      	nop			; (mov r8, r8)
2000305e:	46bd      	mov	sp, r7
20003060:	bd80      	pop	{r7, pc}
20003062:	46c0      	nop			; (mov r8, r8)
20003064:	20005d00 	andcs	r5, r0, r0, lsl #26
20003068:	20005500 	andcs	r5, r0, r0, lsl #10
2000306c:	20006d00 	andcs	r6, r0, r0, lsl #26

20003070 <graphic_ctrl_bit_set>:

/* välj grafik-display och ettställ de bitar som är 1 i x */
static void graphic_ctrl_bit_set( uint8_t x) {
20003070:	b580      	push	{r7, lr}
20003072:	b084      	sub	sp, #16
20003074:	af00      	add	r7, sp, #0
20003076:	0002      	movs	r2, r0
20003078:	1dfb      	adds	r3, r7, #7
2000307a:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
2000307c:	4a0f      	ldr	r2, [pc, #60]	; (200030bc <graphic_ctrl_bit_set+0x4c>)
2000307e:	230f      	movs	r3, #15
20003080:	18fb      	adds	r3, r7, r3
20003082:	7812      	ldrb	r2, [r2, #0]
20003084:	701a      	strb	r2, [r3, #0]
	c |= x;
20003086:	230f      	movs	r3, #15
20003088:	18fb      	adds	r3, r7, r3
2000308a:	220f      	movs	r2, #15
2000308c:	18b9      	adds	r1, r7, r2
2000308e:	1dfa      	adds	r2, r7, #7
20003090:	7809      	ldrb	r1, [r1, #0]
20003092:	7812      	ldrb	r2, [r2, #0]
20003094:	430a      	orrs	r2, r1
20003096:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
20003098:	230f      	movs	r3, #15
2000309a:	18fb      	adds	r3, r7, r3
2000309c:	220f      	movs	r2, #15
2000309e:	18ba      	adds	r2, r7, r2
200030a0:	7812      	ldrb	r2, [r2, #0]
200030a2:	2104      	movs	r1, #4
200030a4:	438a      	bics	r2, r1
200030a6:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
200030a8:	4a04      	ldr	r2, [pc, #16]	; (200030bc <graphic_ctrl_bit_set+0x4c>)
200030aa:	230f      	movs	r3, #15
200030ac:	18fb      	adds	r3, r7, r3
200030ae:	781b      	ldrb	r3, [r3, #0]
200030b0:	7013      	strb	r3, [r2, #0]
}
200030b2:	46c0      	nop			; (mov r8, r8)
200030b4:	46bd      	mov	sp, r7
200030b6:	b004      	add	sp, #16
200030b8:	bd80      	pop	{r7, pc}
200030ba:	46c0      	nop			; (mov r8, r8)
200030bc:	40021014 	andmi	r1, r2, r4, lsl r0

200030c0 <graphic_ctrl_bit_clear>:
/* välj grafik-display och nollställ de bitar som är 1 i x */
static void graphic_ctrl_bit_clear( uint8_t x) {
200030c0:	b580      	push	{r7, lr}
200030c2:	b084      	sub	sp, #16
200030c4:	af00      	add	r7, sp, #0
200030c6:	0002      	movs	r2, r0
200030c8:	1dfb      	adds	r3, r7, #7
200030ca:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
200030cc:	4a11      	ldr	r2, [pc, #68]	; (20003114 <graphic_ctrl_bit_clear+0x54>)
200030ce:	230f      	movs	r3, #15
200030d0:	18fb      	adds	r3, r7, r3
200030d2:	7812      	ldrb	r2, [r2, #0]
200030d4:	701a      	strb	r2, [r3, #0]
	c &= ~x;
200030d6:	1dfb      	adds	r3, r7, #7
200030d8:	781b      	ldrb	r3, [r3, #0]
200030da:	b25b      	sxtb	r3, r3
200030dc:	43db      	mvns	r3, r3
200030de:	b25b      	sxtb	r3, r3
200030e0:	220f      	movs	r2, #15
200030e2:	18ba      	adds	r2, r7, r2
200030e4:	7812      	ldrb	r2, [r2, #0]
200030e6:	b252      	sxtb	r2, r2
200030e8:	4013      	ands	r3, r2
200030ea:	b25a      	sxtb	r2, r3
200030ec:	230f      	movs	r3, #15
200030ee:	18fb      	adds	r3, r7, r3
200030f0:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
200030f2:	230f      	movs	r3, #15
200030f4:	18fb      	adds	r3, r7, r3
200030f6:	220f      	movs	r2, #15
200030f8:	18ba      	adds	r2, r7, r2
200030fa:	7812      	ldrb	r2, [r2, #0]
200030fc:	2104      	movs	r1, #4
200030fe:	438a      	bics	r2, r1
20003100:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20003102:	4a04      	ldr	r2, [pc, #16]	; (20003114 <graphic_ctrl_bit_clear+0x54>)
20003104:	230f      	movs	r3, #15
20003106:	18fb      	adds	r3, r7, r3
20003108:	781b      	ldrb	r3, [r3, #0]
2000310a:	7013      	strb	r3, [r2, #0]
}
2000310c:	46c0      	nop			; (mov r8, r8)
2000310e:	46bd      	mov	sp, r7
20003110:	b004      	add	sp, #16
20003112:	bd80      	pop	{r7, pc}
20003114:	40021014 	andmi	r1, r2, r4, lsl r0

20003118 <select_controller>:
void select_controller( uint8_t controller) {
20003118:	b580      	push	{r7, lr}
2000311a:	b082      	sub	sp, #8
2000311c:	af00      	add	r7, sp, #0
2000311e:	0002      	movs	r2, r0
20003120:	1dfb      	adds	r3, r7, #7
20003122:	701a      	strb	r2, [r3, #0]
	switch (controller) {
20003124:	1dfb      	adds	r3, r7, #7
20003126:	781b      	ldrb	r3, [r3, #0]
20003128:	2b08      	cmp	r3, #8
2000312a:	d00f      	beq.n	2000314c <select_controller+0x34>
2000312c:	dc02      	bgt.n	20003134 <select_controller+0x1c>
2000312e:	2b00      	cmp	r3, #0
20003130:	d005      	beq.n	2000313e <select_controller+0x26>
		case (B_CS1|B_CS2): 
			graphic_ctrl_bit_set(B_CS1); 
			graphic_ctrl_bit_set(B_CS2); 
			break;
	}
}
20003132:	e020      	b.n	20003176 <select_controller+0x5e>
	switch (controller) {
20003134:	2b10      	cmp	r3, #16
20003136:	d010      	beq.n	2000315a <select_controller+0x42>
20003138:	2b18      	cmp	r3, #24
2000313a:	d015      	beq.n	20003168 <select_controller+0x50>
}
2000313c:	e01b      	b.n	20003176 <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
2000313e:	2008      	movs	r0, #8
20003140:	f7ff ffbe 	bl	200030c0 <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_clear(B_CS2); 
20003144:	2010      	movs	r0, #16
20003146:	f7ff ffbb 	bl	200030c0 <graphic_ctrl_bit_clear>
			break;
2000314a:	e014      	b.n	20003176 <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
2000314c:	2008      	movs	r0, #8
2000314e:	f7ff ff8f 	bl	20003070 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS2); 
20003152:	2010      	movs	r0, #16
20003154:	f7ff ffb4 	bl	200030c0 <graphic_ctrl_bit_clear>
			break;
20003158:	e00d      	b.n	20003176 <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
2000315a:	2008      	movs	r0, #8
2000315c:	f7ff ffb0 	bl	200030c0 <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_set(B_CS2); 
20003160:	2010      	movs	r0, #16
20003162:	f7ff ff85 	bl	20003070 <graphic_ctrl_bit_set>
			break;
20003166:	e006      	b.n	20003176 <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
20003168:	2008      	movs	r0, #8
2000316a:	f7ff ff81 	bl	20003070 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_set(B_CS2); 
2000316e:	2010      	movs	r0, #16
20003170:	f7ff ff7e 	bl	20003070 <graphic_ctrl_bit_set>
			break;
20003174:	46c0      	nop			; (mov r8, r8)
}
20003176:	46c0      	nop			; (mov r8, r8)
20003178:	46bd      	mov	sp, r7
2000317a:	b002      	add	sp, #8
2000317c:	bd80      	pop	{r7, pc}

2000317e <graphic_wait_ready>:

void graphic_wait_ready( void ) {
2000317e:	b580      	push	{r7, lr}
20003180:	b082      	sub	sp, #8
20003182:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
20003184:	2040      	movs	r0, #64	; 0x40
20003186:	f7ff ff9b 	bl	200030c0 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
2000318a:	4b14      	ldr	r3, [pc, #80]	; (200031dc <graphic_wait_ready+0x5e>)
2000318c:	4a14      	ldr	r2, [pc, #80]	; (200031e0 <graphic_wait_ready+0x62>)
2000318e:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
20003190:	2001      	movs	r0, #1
20003192:	f7ff ff95 	bl	200030c0 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
20003196:	2002      	movs	r0, #2
20003198:	f7ff ff6a 	bl	20003070 <graphic_ctrl_bit_set>
	delay_500ns();
2000319c:	f7ff fee0 	bl	20002f60 <delay_500ns>
	
	while(1) {
		graphic_ctrl_bit_set(B_E);
200031a0:	2040      	movs	r0, #64	; 0x40
200031a2:	f7ff ff65 	bl	20003070 <graphic_ctrl_bit_set>
		delay_500ns();
200031a6:	f7ff fedb 	bl	20002f60 <delay_500ns>
		c = *portIdrHigh & LCD_BUSY; //...
200031aa:	4b0e      	ldr	r3, [pc, #56]	; (200031e4 <graphic_wait_ready+0x66>)
200031ac:	781b      	ldrb	r3, [r3, #0]
200031ae:	b2da      	uxtb	r2, r3
200031b0:	1dfb      	adds	r3, r7, #7
200031b2:	217f      	movs	r1, #127	; 0x7f
200031b4:	438a      	bics	r2, r1
200031b6:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
200031b8:	2040      	movs	r0, #64	; 0x40
200031ba:	f7ff ff81 	bl	200030c0 <graphic_ctrl_bit_clear>
		delay_500ns();
200031be:	f7ff fecf 	bl	20002f60 <delay_500ns>
		/*if (*portIdrHigh & 0x80 == 0x80) {
			break; }*/
		if (c == 0) break;
200031c2:	1dfb      	adds	r3, r7, #7
200031c4:	781b      	ldrb	r3, [r3, #0]
200031c6:	2b00      	cmp	r3, #0
200031c8:	d000      	beq.n	200031cc <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
200031ca:	e7e9      	b.n	200031a0 <graphic_wait_ready+0x22>
		if (c == 0) break;
200031cc:	46c0      	nop			; (mov r8, r8)
	}
	//graphic_ctrl_bit_set(B_E); //<--
	*portModer = 0x55555555;	
200031ce:	4b03      	ldr	r3, [pc, #12]	; (200031dc <graphic_wait_ready+0x5e>)
200031d0:	4a05      	ldr	r2, [pc, #20]	; (200031e8 <graphic_wait_ready+0x6a>)
200031d2:	601a      	str	r2, [r3, #0]
}
200031d4:	46c0      	nop			; (mov r8, r8)
200031d6:	46bd      	mov	sp, r7
200031d8:	b002      	add	sp, #8
200031da:	bd80      	pop	{r7, pc}
200031dc:	40021000 	andmi	r1, r2, r0
200031e0:	00005555 	andeq	r5, r0, r5, asr r5
200031e4:	40021011 	andmi	r1, r2, r1, lsl r0
200031e8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200031ec <graphic_read>:

static uint8_t graphic_read(uint8_t controller) {
200031ec:	b580      	push	{r7, lr}
200031ee:	b084      	sub	sp, #16
200031f0:	af00      	add	r7, sp, #0
200031f2:	0002      	movs	r2, r0
200031f4:	1dfb      	adds	r3, r7, #7
200031f6:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200031f8:	2040      	movs	r0, #64	; 0x40
200031fa:	f7ff ff61 	bl	200030c0 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
200031fe:	4b1c      	ldr	r3, [pc, #112]	; (20003270 <graphic_read+0x84>)
20003200:	4a1c      	ldr	r2, [pc, #112]	; (20003274 <graphic_read+0x88>)
20003202:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS);
20003204:	2001      	movs	r0, #1
20003206:	f7ff ff33 	bl	20003070 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_set(B_RW);
2000320a:	2002      	movs	r0, #2
2000320c:	f7ff ff30 	bl	20003070 <graphic_ctrl_bit_set>
	select_controller(controller);
20003210:	1dfb      	adds	r3, r7, #7
20003212:	781b      	ldrb	r3, [r3, #0]
20003214:	0018      	movs	r0, r3
20003216:	f7ff ff7f 	bl	20003118 <select_controller>
	delay_500ns();
2000321a:	f7ff fea1 	bl	20002f60 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
2000321e:	2040      	movs	r0, #64	; 0x40
20003220:	f7ff ff26 	bl	20003070 <graphic_ctrl_bit_set>
	delay_500ns();
20003224:	f7ff fe9c 	bl	20002f60 <delay_500ns>
	unsigned char rv = *portIdrHigh;
20003228:	4a13      	ldr	r2, [pc, #76]	; (20003278 <graphic_read+0x8c>)
2000322a:	230f      	movs	r3, #15
2000322c:	18fb      	adds	r3, r7, r3
2000322e:	7812      	ldrb	r2, [r2, #0]
20003230:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20003232:	2040      	movs	r0, #64	; 0x40
20003234:	f7ff ff44 	bl	200030c0 <graphic_ctrl_bit_clear>
	*portModer = 0x55555555;
20003238:	4b0d      	ldr	r3, [pc, #52]	; (20003270 <graphic_read+0x84>)
2000323a:	4a10      	ldr	r2, [pc, #64]	; (2000327c <graphic_read+0x90>)
2000323c:	601a      	str	r2, [r3, #0]
	
	if(controller == B_CS1) {
2000323e:	1dfb      	adds	r3, r7, #7
20003240:	781b      	ldrb	r3, [r3, #0]
20003242:	2b08      	cmp	r3, #8
20003244:	d104      	bne.n	20003250 <graphic_read+0x64>
		select_controller(B_CS1);
20003246:	2008      	movs	r0, #8
20003248:	f7ff ff66 	bl	20003118 <select_controller>
		graphic_wait_ready();
2000324c:	f7ff ff97 	bl	2000317e <graphic_wait_ready>
	}
	if(controller == B_CS2) {
20003250:	1dfb      	adds	r3, r7, #7
20003252:	781b      	ldrb	r3, [r3, #0]
20003254:	2b10      	cmp	r3, #16
20003256:	d104      	bne.n	20003262 <graphic_read+0x76>
		select_controller(B_CS2);
20003258:	2010      	movs	r0, #16
2000325a:	f7ff ff5d 	bl	20003118 <select_controller>
		graphic_wait_ready();
2000325e:	f7ff ff8e 	bl	2000317e <graphic_wait_ready>
	}
	
	return rv;
20003262:	230f      	movs	r3, #15
20003264:	18fb      	adds	r3, r7, r3
20003266:	781b      	ldrb	r3, [r3, #0]
}
20003268:	0018      	movs	r0, r3
2000326a:	46bd      	mov	sp, r7
2000326c:	b004      	add	sp, #16
2000326e:	bd80      	pop	{r7, pc}
20003270:	40021000 	andmi	r1, r2, r0
20003274:	00005555 	andeq	r5, r0, r5, asr r5
20003278:	40021011 	andmi	r1, r2, r1, lsl r0
2000327c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20003280 <graphic_read_data>:

graphic_read_data(uint8_t controller) {
20003280:	b580      	push	{r7, lr}
20003282:	b082      	sub	sp, #8
20003284:	af00      	add	r7, sp, #0
20003286:	0002      	movs	r2, r0
20003288:	1dfb      	adds	r3, r7, #7
2000328a:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
2000328c:	1dfb      	adds	r3, r7, #7
2000328e:	781b      	ldrb	r3, [r3, #0]
20003290:	0018      	movs	r0, r3
20003292:	f7ff ffab 	bl	200031ec <graphic_read>
	graphic_read(controller);
20003296:	1dfb      	adds	r3, r7, #7
20003298:	781b      	ldrb	r3, [r3, #0]
2000329a:	0018      	movs	r0, r3
2000329c:	f7ff ffa6 	bl	200031ec <graphic_read>
}
200032a0:	46c0      	nop			; (mov r8, r8)
200032a2:	0018      	movs	r0, r3
200032a4:	46bd      	mov	sp, r7
200032a6:	b002      	add	sp, #8
200032a8:	bd80      	pop	{r7, pc}

200032aa <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller) {
200032aa:	b580      	push	{r7, lr}
200032ac:	b082      	sub	sp, #8
200032ae:	af00      	add	r7, sp, #0
200032b0:	0002      	movs	r2, r0
200032b2:	1dfb      	adds	r3, r7, #7
200032b4:	701a      	strb	r2, [r3, #0]
200032b6:	1dbb      	adds	r3, r7, #6
200032b8:	1c0a      	adds	r2, r1, #0
200032ba:	701a      	strb	r2, [r3, #0]
	*portOdrHigh = value; //I
200032bc:	4a19      	ldr	r2, [pc, #100]	; (20003324 <graphic_write+0x7a>)
200032be:	1dfb      	adds	r3, r7, #7
200032c0:	781b      	ldrb	r3, [r3, #0]
200032c2:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
200032c4:	1dbb      	adds	r3, r7, #6
200032c6:	781b      	ldrb	r3, [r3, #0]
200032c8:	0018      	movs	r0, r3
200032ca:	f7ff ff25 	bl	20003118 <select_controller>
	delay_500ns();
200032ce:	f7ff fe47 	bl	20002f60 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200032d2:	2040      	movs	r0, #64	; 0x40
200032d4:	f7ff fecc 	bl	20003070 <graphic_ctrl_bit_set>
	delay_500ns();
200032d8:	f7ff fe42 	bl	20002f60 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
200032dc:	2040      	movs	r0, #64	; 0x40
200032de:	f7ff feef 	bl	200030c0 <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1) {
200032e2:	1dbb      	adds	r3, r7, #6
200032e4:	781b      	ldrb	r3, [r3, #0]
200032e6:	2208      	movs	r2, #8
200032e8:	4013      	ands	r3, r2
200032ea:	d004      	beq.n	200032f6 <graphic_write+0x4c>
		select_controller(B_CS1);
200032ec:	2008      	movs	r0, #8
200032ee:	f7ff ff13 	bl	20003118 <select_controller>
		graphic_wait_ready();
200032f2:	f7ff ff44 	bl	2000317e <graphic_wait_ready>
	}
	if(controller & B_CS2) {
200032f6:	1dbb      	adds	r3, r7, #6
200032f8:	781b      	ldrb	r3, [r3, #0]
200032fa:	2210      	movs	r2, #16
200032fc:	4013      	ands	r3, r2
200032fe:	d004      	beq.n	2000330a <graphic_write+0x60>
		select_controller(B_CS2);
20003300:	2010      	movs	r0, #16
20003302:	f7ff ff09 	bl	20003118 <select_controller>
		graphic_wait_ready();
20003306:	f7ff ff3a 	bl	2000317e <graphic_wait_ready>
	}
	
	*portOdrHigh = 0;	//I
2000330a:	4b06      	ldr	r3, [pc, #24]	; (20003324 <graphic_write+0x7a>)
2000330c:	2200      	movs	r2, #0
2000330e:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
20003310:	2040      	movs	r0, #64	; 0x40
20003312:	f7ff fead 	bl	20003070 <graphic_ctrl_bit_set>
	select_controller(0);
20003316:	2000      	movs	r0, #0
20003318:	f7ff fefe 	bl	20003118 <select_controller>
}
2000331c:	46c0      	nop			; (mov r8, r8)
2000331e:	46bd      	mov	sp, r7
20003320:	b002      	add	sp, #8
20003322:	bd80      	pop	{r7, pc}
20003324:	40021015 	andmi	r1, r2, r5, lsl r0

20003328 <graphic_write_command>:
void graphic_write_command(uint8_t command, uint8_t controller) {
20003328:	b580      	push	{r7, lr}
2000332a:	b082      	sub	sp, #8
2000332c:	af00      	add	r7, sp, #0
2000332e:	0002      	movs	r2, r0
20003330:	1dfb      	adds	r3, r7, #7
20003332:	701a      	strb	r2, [r3, #0]
20003334:	1dbb      	adds	r3, r7, #6
20003336:	1c0a      	adds	r2, r1, #0
20003338:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000333a:	2040      	movs	r0, #64	; 0x40
2000333c:	f7ff fec0 	bl	200030c0 <graphic_ctrl_bit_clear>
	select_controller(controller);
20003340:	1dbb      	adds	r3, r7, #6
20003342:	781b      	ldrb	r3, [r3, #0]
20003344:	0018      	movs	r0, r3
20003346:	f7ff fee7 	bl	20003118 <select_controller>
	graphic_ctrl_bit_clear(B_RS);
2000334a:	2001      	movs	r0, #1
2000334c:	f7ff feb8 	bl	200030c0 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RW);
20003350:	2002      	movs	r0, #2
20003352:	f7ff feb5 	bl	200030c0 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20003356:	1dbb      	adds	r3, r7, #6
20003358:	781a      	ldrb	r2, [r3, #0]
2000335a:	1dfb      	adds	r3, r7, #7
2000335c:	781b      	ldrb	r3, [r3, #0]
2000335e:	0011      	movs	r1, r2
20003360:	0018      	movs	r0, r3
20003362:	f7ff ffa2 	bl	200032aa <graphic_write>
}
20003366:	46c0      	nop			; (mov r8, r8)
20003368:	46bd      	mov	sp, r7
2000336a:	b002      	add	sp, #8
2000336c:	bd80      	pop	{r7, pc}

2000336e <graphic_write_data>:
void graphic_write_data(uint8_t command, uint8_t controller) {
2000336e:	b580      	push	{r7, lr}
20003370:	b082      	sub	sp, #8
20003372:	af00      	add	r7, sp, #0
20003374:	0002      	movs	r2, r0
20003376:	1dfb      	adds	r3, r7, #7
20003378:	701a      	strb	r2, [r3, #0]
2000337a:	1dbb      	adds	r3, r7, #6
2000337c:	1c0a      	adds	r2, r1, #0
2000337e:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20003380:	2040      	movs	r0, #64	; 0x40
20003382:	f7ff fe9d 	bl	200030c0 <graphic_ctrl_bit_clear>
	select_controller(controller);
20003386:	1dbb      	adds	r3, r7, #6
20003388:	781b      	ldrb	r3, [r3, #0]
2000338a:	0018      	movs	r0, r3
2000338c:	f7ff fec4 	bl	20003118 <select_controller>
	graphic_ctrl_bit_set(B_RS);
20003390:	2001      	movs	r0, #1
20003392:	f7ff fe6d 	bl	20003070 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20003396:	2002      	movs	r0, #2
20003398:	f7ff fe92 	bl	200030c0 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
2000339c:	1dbb      	adds	r3, r7, #6
2000339e:	781a      	ldrb	r2, [r3, #0]
200033a0:	1dfb      	adds	r3, r7, #7
200033a2:	781b      	ldrb	r3, [r3, #0]
200033a4:	0011      	movs	r1, r2
200033a6:	0018      	movs	r0, r3
200033a8:	f7ff ff7f 	bl	200032aa <graphic_write>
}
200033ac:	46c0      	nop			; (mov r8, r8)
200033ae:	46bd      	mov	sp, r7
200033b0:	b002      	add	sp, #8
200033b2:	bd80      	pop	{r7, pc}

200033b4 <graphic_initialize>:

void graphic_initialize( void ) {
200033b4:	b580      	push	{r7, lr}
200033b6:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
200033b8:	2040      	movs	r0, #64	; 0x40
200033ba:	f7ff fe59 	bl	20003070 <graphic_ctrl_bit_set>
	delay_micro(10);
200033be:	200a      	movs	r0, #10
200033c0:	f7ff fdf0 	bl	20002fa4 <delay_micro>
	
	graphic_ctrl_bit_clear(B_CS1);
200033c4:	2008      	movs	r0, #8
200033c6:	f7ff fe7b 	bl	200030c0 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_CS2);
200033ca:	2010      	movs	r0, #16
200033cc:	f7ff fe78 	bl	200030c0 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RST);
200033d0:	2020      	movs	r0, #32
200033d2:	f7ff fe75 	bl	200030c0 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_E);
200033d6:	2040      	movs	r0, #64	; 0x40
200033d8:	f7ff fe72 	bl	200030c0 <graphic_ctrl_bit_clear>
	//#define SIMULATOR
	delay_milli(30);
200033dc:	201e      	movs	r0, #30
200033de:	f7ff fdf7 	bl	20002fd0 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
200033e2:	2020      	movs	r0, #32
200033e4:	f7ff fe44 	bl	20003070 <graphic_ctrl_bit_set>
	delay_milli(100); //...
200033e8:	2064      	movs	r0, #100	; 0x64
200033ea:	f7ff fdf1 	bl	20002fd0 <delay_milli>
	
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
200033ee:	2118      	movs	r1, #24
200033f0:	203e      	movs	r0, #62	; 0x3e
200033f2:	f7ff ff99 	bl	20003328 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
200033f6:	2118      	movs	r1, #24
200033f8:	203f      	movs	r0, #63	; 0x3f
200033fa:	f7ff ff95 	bl	20003328 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
200033fe:	2118      	movs	r1, #24
20003400:	20c0      	movs	r0, #192	; 0xc0
20003402:	f7ff ff91 	bl	20003328 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
20003406:	2118      	movs	r1, #24
20003408:	2040      	movs	r0, #64	; 0x40
2000340a:	f7ff ff8d 	bl	20003328 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
2000340e:	2118      	movs	r1, #24
20003410:	20b8      	movs	r0, #184	; 0xb8
20003412:	f7ff ff89 	bl	20003328 <graphic_write_command>
	select_controller(0);
20003416:	2000      	movs	r0, #0
20003418:	f7ff fe7e 	bl	20003118 <select_controller>
}
2000341c:	46c0      	nop			; (mov r8, r8)
2000341e:	46bd      	mov	sp, r7
20003420:	bd80      	pop	{r7, pc}

20003422 <graphic_clear_screen>:
void graphic_clear_screen( void ) {	//Annat i slidesen
20003422:	b580      	push	{r7, lr}
20003424:	b082      	sub	sp, #8
20003426:	af00      	add	r7, sp, #0
	uint8_t page;
	for (page = 0; page < 8; page++) {
20003428:	1dfb      	adds	r3, r7, #7
2000342a:	2200      	movs	r2, #0
2000342c:	701a      	strb	r2, [r3, #0]
2000342e:	e023      	b.n	20003478 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
20003430:	1dfb      	adds	r3, r7, #7
20003432:	781b      	ldrb	r3, [r3, #0]
20003434:	2248      	movs	r2, #72	; 0x48
20003436:	4252      	negs	r2, r2
20003438:	4313      	orrs	r3, r2
2000343a:	b2db      	uxtb	r3, r3
2000343c:	2118      	movs	r1, #24
2000343e:	0018      	movs	r0, r3
20003440:	f7ff ff72 	bl	20003328 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
20003444:	2118      	movs	r1, #24
20003446:	2040      	movs	r0, #64	; 0x40
20003448:	f7ff ff6e 	bl	20003328 <graphic_write_command>
		uint8_t add;
		for (add = 0; add < 64; add++) {
2000344c:	1dbb      	adds	r3, r7, #6
2000344e:	2200      	movs	r2, #0
20003450:	701a      	strb	r2, [r3, #0]
20003452:	e008      	b.n	20003466 <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1|B_CS2);
20003454:	2118      	movs	r1, #24
20003456:	2000      	movs	r0, #0
20003458:	f7ff ff89 	bl	2000336e <graphic_write_data>
		for (add = 0; add < 64; add++) {
2000345c:	1dbb      	adds	r3, r7, #6
2000345e:	781a      	ldrb	r2, [r3, #0]
20003460:	1dbb      	adds	r3, r7, #6
20003462:	3201      	adds	r2, #1
20003464:	701a      	strb	r2, [r3, #0]
20003466:	1dbb      	adds	r3, r7, #6
20003468:	781b      	ldrb	r3, [r3, #0]
2000346a:	2b3f      	cmp	r3, #63	; 0x3f
2000346c:	d9f2      	bls.n	20003454 <graphic_clear_screen+0x32>
	for (page = 0; page < 8; page++) {
2000346e:	1dfb      	adds	r3, r7, #7
20003470:	781a      	ldrb	r2, [r3, #0]
20003472:	1dfb      	adds	r3, r7, #7
20003474:	3201      	adds	r2, #1
20003476:	701a      	strb	r2, [r3, #0]
20003478:	1dfb      	adds	r3, r7, #7
2000347a:	781b      	ldrb	r3, [r3, #0]
2000347c:	2b07      	cmp	r3, #7
2000347e:	d9d7      	bls.n	20003430 <graphic_clear_screen+0xe>
		}
	}
}
20003480:	46c0      	nop			; (mov r8, r8)
20003482:	46bd      	mov	sp, r7
20003484:	b002      	add	sp, #8
20003486:	bd80      	pop	{r7, pc}

20003488 <pixel>:

/** Color: 1=light 2=gray 3=black*/
void pixel(int x, int y, int set, int color) {
20003488:	b580      	push	{r7, lr}
2000348a:	b086      	sub	sp, #24
2000348c:	af00      	add	r7, sp, #0
2000348e:	60f8      	str	r0, [r7, #12]
20003490:	60b9      	str	r1, [r7, #8]
20003492:	607a      	str	r2, [r7, #4]
20003494:	603b      	str	r3, [r7, #0]
	uint8_t mask;
	int index = 0;
20003496:	2300      	movs	r3, #0
20003498:	613b      	str	r3, [r7, #16]
	if( (x > 128 ) || (x < 1) || (y > 64) || (y < 1) ) 
2000349a:	68fb      	ldr	r3, [r7, #12]
2000349c:	2b80      	cmp	r3, #128	; 0x80
2000349e:	dd00      	ble.n	200034a2 <pixel+0x1a>
200034a0:	e0a6      	b.n	200035f0 <pixel+0x168>
200034a2:	68fb      	ldr	r3, [r7, #12]
200034a4:	2b00      	cmp	r3, #0
200034a6:	dc00      	bgt.n	200034aa <pixel+0x22>
200034a8:	e0a2      	b.n	200035f0 <pixel+0x168>
200034aa:	68bb      	ldr	r3, [r7, #8]
200034ac:	2b40      	cmp	r3, #64	; 0x40
200034ae:	dd00      	ble.n	200034b2 <pixel+0x2a>
200034b0:	e09e      	b.n	200035f0 <pixel+0x168>
200034b2:	68bb      	ldr	r3, [r7, #8]
200034b4:	2b00      	cmp	r3, #0
200034b6:	dc00      	bgt.n	200034ba <pixel+0x32>
200034b8:	e09a      	b.n	200035f0 <pixel+0x168>
		return;
	mask = 1 << ((y-1)%8);
200034ba:	68bb      	ldr	r3, [r7, #8]
200034bc:	3b01      	subs	r3, #1
200034be:	4a4e      	ldr	r2, [pc, #312]	; (200035f8 <pixel+0x170>)
200034c0:	4013      	ands	r3, r2
200034c2:	d504      	bpl.n	200034ce <pixel+0x46>
200034c4:	3b01      	subs	r3, #1
200034c6:	2208      	movs	r2, #8
200034c8:	4252      	negs	r2, r2
200034ca:	4313      	orrs	r3, r2
200034cc:	3301      	adds	r3, #1
200034ce:	001a      	movs	r2, r3
200034d0:	2301      	movs	r3, #1
200034d2:	4093      	lsls	r3, r2
200034d4:	001a      	movs	r2, r3
200034d6:	2317      	movs	r3, #23
200034d8:	18fb      	adds	r3, r7, r3
200034da:	701a      	strb	r2, [r3, #0]
	if(x > 64) {
200034dc:	68fb      	ldr	r3, [r7, #12]
200034de:	2b40      	cmp	r3, #64	; 0x40
200034e0:	dd05      	ble.n	200034ee <pixel+0x66>
		x -= 65;
200034e2:	68fb      	ldr	r3, [r7, #12]
200034e4:	3b41      	subs	r3, #65	; 0x41
200034e6:	60fb      	str	r3, [r7, #12]
		index = 512;
200034e8:	2380      	movs	r3, #128	; 0x80
200034ea:	009b      	lsls	r3, r3, #2
200034ec:	613b      	str	r3, [r7, #16]
	}
	index += x + ((y-1)/8)*64;
200034ee:	68bb      	ldr	r3, [r7, #8]
200034f0:	3b01      	subs	r3, #1
200034f2:	2b00      	cmp	r3, #0
200034f4:	da00      	bge.n	200034f8 <pixel+0x70>
200034f6:	3307      	adds	r3, #7
200034f8:	10db      	asrs	r3, r3, #3
200034fa:	019a      	lsls	r2, r3, #6
200034fc:	68fb      	ldr	r3, [r7, #12]
200034fe:	18d3      	adds	r3, r2, r3
20003500:	693a      	ldr	r2, [r7, #16]
20003502:	18d3      	adds	r3, r2, r3
20003504:	613b      	str	r3, [r7, #16]

	if(set == 0)
20003506:	687b      	ldr	r3, [r7, #4]
20003508:	2b00      	cmp	r3, #0
2000350a:	d106      	bne.n	2000351a <pixel+0x92>
		mask = ~mask;
2000350c:	2317      	movs	r3, #23
2000350e:	18fb      	adds	r3, r7, r3
20003510:	2217      	movs	r2, #23
20003512:	18ba      	adds	r2, r7, r2
20003514:	7812      	ldrb	r2, [r2, #0]
20003516:	43d2      	mvns	r2, r2
20003518:	701a      	strb	r2, [r3, #0]

	switch (color) {
2000351a:	683b      	ldr	r3, [r7, #0]
2000351c:	2b02      	cmp	r3, #2
2000351e:	d024      	beq.n	2000356a <pixel+0xe2>
20003520:	2b03      	cmp	r3, #3
20003522:	d043      	beq.n	200035ac <pixel+0x124>
20003524:	2b01      	cmp	r3, #1
20003526:	d164      	bne.n	200035f2 <pixel+0x16a>
		case 1:	
			if(set)
20003528:	687b      	ldr	r3, [r7, #4]
2000352a:	2b00      	cmp	r3, #0
2000352c:	d00e      	beq.n	2000354c <pixel+0xc4>
				backBufferLight[index] |= mask;
2000352e:	4a33      	ldr	r2, [pc, #204]	; (200035fc <pixel+0x174>)
20003530:	693b      	ldr	r3, [r7, #16]
20003532:	18d3      	adds	r3, r2, r3
20003534:	781a      	ldrb	r2, [r3, #0]
20003536:	2317      	movs	r3, #23
20003538:	18fb      	adds	r3, r7, r3
2000353a:	781b      	ldrb	r3, [r3, #0]
2000353c:	4313      	orrs	r3, r2
2000353e:	b2d9      	uxtb	r1, r3
20003540:	4a2e      	ldr	r2, [pc, #184]	; (200035fc <pixel+0x174>)
20003542:	693b      	ldr	r3, [r7, #16]
20003544:	18d3      	adds	r3, r2, r3
20003546:	1c0a      	adds	r2, r1, #0
20003548:	701a      	strb	r2, [r3, #0]
			else
				backBufferLight[index] &= mask;
			break;
2000354a:	e052      	b.n	200035f2 <pixel+0x16a>
				backBufferLight[index] &= mask;
2000354c:	4a2b      	ldr	r2, [pc, #172]	; (200035fc <pixel+0x174>)
2000354e:	693b      	ldr	r3, [r7, #16]
20003550:	18d3      	adds	r3, r2, r3
20003552:	781b      	ldrb	r3, [r3, #0]
20003554:	2217      	movs	r2, #23
20003556:	18ba      	adds	r2, r7, r2
20003558:	7812      	ldrb	r2, [r2, #0]
2000355a:	4013      	ands	r3, r2
2000355c:	b2d9      	uxtb	r1, r3
2000355e:	4a27      	ldr	r2, [pc, #156]	; (200035fc <pixel+0x174>)
20003560:	693b      	ldr	r3, [r7, #16]
20003562:	18d3      	adds	r3, r2, r3
20003564:	1c0a      	adds	r2, r1, #0
20003566:	701a      	strb	r2, [r3, #0]
			break;
20003568:	e043      	b.n	200035f2 <pixel+0x16a>
		
		case 2:	
			if(set)
2000356a:	687b      	ldr	r3, [r7, #4]
2000356c:	2b00      	cmp	r3, #0
2000356e:	d00e      	beq.n	2000358e <pixel+0x106>
				backBufferGray[index] |= mask;
20003570:	4a23      	ldr	r2, [pc, #140]	; (20003600 <pixel+0x178>)
20003572:	693b      	ldr	r3, [r7, #16]
20003574:	18d3      	adds	r3, r2, r3
20003576:	781a      	ldrb	r2, [r3, #0]
20003578:	2317      	movs	r3, #23
2000357a:	18fb      	adds	r3, r7, r3
2000357c:	781b      	ldrb	r3, [r3, #0]
2000357e:	4313      	orrs	r3, r2
20003580:	b2d9      	uxtb	r1, r3
20003582:	4a1f      	ldr	r2, [pc, #124]	; (20003600 <pixel+0x178>)
20003584:	693b      	ldr	r3, [r7, #16]
20003586:	18d3      	adds	r3, r2, r3
20003588:	1c0a      	adds	r2, r1, #0
2000358a:	701a      	strb	r2, [r3, #0]
			else
				backBufferGray[index] &= mask;
			break;
2000358c:	e031      	b.n	200035f2 <pixel+0x16a>
				backBufferGray[index] &= mask;
2000358e:	4a1c      	ldr	r2, [pc, #112]	; (20003600 <pixel+0x178>)
20003590:	693b      	ldr	r3, [r7, #16]
20003592:	18d3      	adds	r3, r2, r3
20003594:	781b      	ldrb	r3, [r3, #0]
20003596:	2217      	movs	r2, #23
20003598:	18ba      	adds	r2, r7, r2
2000359a:	7812      	ldrb	r2, [r2, #0]
2000359c:	4013      	ands	r3, r2
2000359e:	b2d9      	uxtb	r1, r3
200035a0:	4a17      	ldr	r2, [pc, #92]	; (20003600 <pixel+0x178>)
200035a2:	693b      	ldr	r3, [r7, #16]
200035a4:	18d3      	adds	r3, r2, r3
200035a6:	1c0a      	adds	r2, r1, #0
200035a8:	701a      	strb	r2, [r3, #0]
			break;
200035aa:	e022      	b.n	200035f2 <pixel+0x16a>
		
		case 3:	
			if(set)
200035ac:	687b      	ldr	r3, [r7, #4]
200035ae:	2b00      	cmp	r3, #0
200035b0:	d00e      	beq.n	200035d0 <pixel+0x148>
				backBuffer[index] |= mask;
200035b2:	4a14      	ldr	r2, [pc, #80]	; (20003604 <pixel+0x17c>)
200035b4:	693b      	ldr	r3, [r7, #16]
200035b6:	18d3      	adds	r3, r2, r3
200035b8:	781a      	ldrb	r2, [r3, #0]
200035ba:	2317      	movs	r3, #23
200035bc:	18fb      	adds	r3, r7, r3
200035be:	781b      	ldrb	r3, [r3, #0]
200035c0:	4313      	orrs	r3, r2
200035c2:	b2d9      	uxtb	r1, r3
200035c4:	4a0f      	ldr	r2, [pc, #60]	; (20003604 <pixel+0x17c>)
200035c6:	693b      	ldr	r3, [r7, #16]
200035c8:	18d3      	adds	r3, r2, r3
200035ca:	1c0a      	adds	r2, r1, #0
200035cc:	701a      	strb	r2, [r3, #0]
			else
				backBuffer[index] &= mask;
			break;
200035ce:	e010      	b.n	200035f2 <pixel+0x16a>
				backBuffer[index] &= mask;
200035d0:	4a0c      	ldr	r2, [pc, #48]	; (20003604 <pixel+0x17c>)
200035d2:	693b      	ldr	r3, [r7, #16]
200035d4:	18d3      	adds	r3, r2, r3
200035d6:	781b      	ldrb	r3, [r3, #0]
200035d8:	2217      	movs	r2, #23
200035da:	18ba      	adds	r2, r7, r2
200035dc:	7812      	ldrb	r2, [r2, #0]
200035de:	4013      	ands	r3, r2
200035e0:	b2d9      	uxtb	r1, r3
200035e2:	4a08      	ldr	r2, [pc, #32]	; (20003604 <pixel+0x17c>)
200035e4:	693b      	ldr	r3, [r7, #16]
200035e6:	18d3      	adds	r3, r2, r3
200035e8:	1c0a      	adds	r2, r1, #0
200035ea:	701a      	strb	r2, [r3, #0]
			break;
200035ec:	46c0      	nop			; (mov r8, r8)
200035ee:	e000      	b.n	200035f2 <pixel+0x16a>
		return;
200035f0:	46c0      	nop			; (mov r8, r8)
			
	}

}
200035f2:	46bd      	mov	sp, r7
200035f4:	b006      	add	sp, #24
200035f6:	bd80      	pop	{r7, pc}
200035f8:	80000007 	andhi	r0, r0, r7
200035fc:	20006d00 	andcs	r6, r0, r0, lsl #26
20003600:	20005500 	andcs	r5, r0, r0, lsl #10
20003604:	20005d00 	andcs	r5, r0, r0, lsl #26

20003608 <pixel2>:


void pixel2(int x, int y, int set) {
20003608:	b580      	push	{r7, lr}
2000360a:	b088      	sub	sp, #32
2000360c:	af00      	add	r7, sp, #0
2000360e:	60f8      	str	r0, [r7, #12]
20003610:	60b9      	str	r1, [r7, #8]
20003612:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20003614:	68fb      	ldr	r3, [r7, #12]
20003616:	2b00      	cmp	r3, #0
20003618:	dc00      	bgt.n	2000361c <pixel2+0x14>
2000361a:	e0bc      	b.n	20003796 <pixel2+0x18e>
2000361c:	68bb      	ldr	r3, [r7, #8]
2000361e:	2b00      	cmp	r3, #0
20003620:	dc00      	bgt.n	20003624 <pixel2+0x1c>
20003622:	e0b8      	b.n	20003796 <pixel2+0x18e>
20003624:	68fb      	ldr	r3, [r7, #12]
20003626:	2b80      	cmp	r3, #128	; 0x80
20003628:	dd00      	ble.n	2000362c <pixel2+0x24>
2000362a:	e0b4      	b.n	20003796 <pixel2+0x18e>
2000362c:	68bb      	ldr	r3, [r7, #8]
2000362e:	2b40      	cmp	r3, #64	; 0x40
20003630:	dd00      	ble.n	20003634 <pixel2+0x2c>
20003632:	e0b0      	b.n	20003796 <pixel2+0x18e>
	index = (y-1)/8;
20003634:	68bb      	ldr	r3, [r7, #8]
20003636:	3b01      	subs	r3, #1
20003638:	2b00      	cmp	r3, #0
2000363a:	da00      	bge.n	2000363e <pixel2+0x36>
2000363c:	3307      	adds	r3, #7
2000363e:	10db      	asrs	r3, r3, #3
20003640:	61bb      	str	r3, [r7, #24]
	switch( (y-1)%8 ) {
20003642:	68bb      	ldr	r3, [r7, #8]
20003644:	3b01      	subs	r3, #1
20003646:	4a56      	ldr	r2, [pc, #344]	; (200037a0 <pixel2+0x198>)
20003648:	4013      	ands	r3, r2
2000364a:	d504      	bpl.n	20003656 <pixel2+0x4e>
2000364c:	3b01      	subs	r3, #1
2000364e:	2208      	movs	r2, #8
20003650:	4252      	negs	r2, r2
20003652:	4313      	orrs	r3, r2
20003654:	3301      	adds	r3, #1
20003656:	2b07      	cmp	r3, #7
20003658:	d82c      	bhi.n	200036b4 <pixel2+0xac>
2000365a:	009a      	lsls	r2, r3, #2
2000365c:	4b51      	ldr	r3, [pc, #324]	; (200037a4 <pixel2+0x19c>)
2000365e:	18d3      	adds	r3, r2, r3
20003660:	681b      	ldr	r3, [r3, #0]
20003662:	469f      	mov	pc, r3
		case 0: mask = 1; break;
20003664:	231f      	movs	r3, #31
20003666:	18fb      	adds	r3, r7, r3
20003668:	2201      	movs	r2, #1
2000366a:	701a      	strb	r2, [r3, #0]
2000366c:	e022      	b.n	200036b4 <pixel2+0xac>
		case 1: mask = 2; break;
2000366e:	231f      	movs	r3, #31
20003670:	18fb      	adds	r3, r7, r3
20003672:	2202      	movs	r2, #2
20003674:	701a      	strb	r2, [r3, #0]
20003676:	e01d      	b.n	200036b4 <pixel2+0xac>
		case 2: mask = 4; break;
20003678:	231f      	movs	r3, #31
2000367a:	18fb      	adds	r3, r7, r3
2000367c:	2204      	movs	r2, #4
2000367e:	701a      	strb	r2, [r3, #0]
20003680:	e018      	b.n	200036b4 <pixel2+0xac>
		case 3: mask = 8; break;
20003682:	231f      	movs	r3, #31
20003684:	18fb      	adds	r3, r7, r3
20003686:	2208      	movs	r2, #8
20003688:	701a      	strb	r2, [r3, #0]
2000368a:	e013      	b.n	200036b4 <pixel2+0xac>
		case 4: mask = 0x10; break;
2000368c:	231f      	movs	r3, #31
2000368e:	18fb      	adds	r3, r7, r3
20003690:	2210      	movs	r2, #16
20003692:	701a      	strb	r2, [r3, #0]
20003694:	e00e      	b.n	200036b4 <pixel2+0xac>
		case 5: mask = 0x20; break;
20003696:	231f      	movs	r3, #31
20003698:	18fb      	adds	r3, r7, r3
2000369a:	2220      	movs	r2, #32
2000369c:	701a      	strb	r2, [r3, #0]
2000369e:	e009      	b.n	200036b4 <pixel2+0xac>
		case 6: mask = 0x40; break;
200036a0:	231f      	movs	r3, #31
200036a2:	18fb      	adds	r3, r7, r3
200036a4:	2240      	movs	r2, #64	; 0x40
200036a6:	701a      	strb	r2, [r3, #0]
200036a8:	e004      	b.n	200036b4 <pixel2+0xac>
		case 7: mask = 0x80; break;
200036aa:	231f      	movs	r3, #31
200036ac:	18fb      	adds	r3, r7, r3
200036ae:	2280      	movs	r2, #128	; 0x80
200036b0:	701a      	strb	r2, [r3, #0]
200036b2:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0)
200036b4:	687b      	ldr	r3, [r7, #4]
200036b6:	2b00      	cmp	r3, #0
200036b8:	d106      	bne.n	200036c8 <pixel2+0xc0>
		mask = ~mask;
200036ba:	231f      	movs	r3, #31
200036bc:	18fb      	adds	r3, r7, r3
200036be:	221f      	movs	r2, #31
200036c0:	18ba      	adds	r2, r7, r2
200036c2:	7812      	ldrb	r2, [r2, #0]
200036c4:	43d2      	mvns	r2, r2
200036c6:	701a      	strb	r2, [r3, #0]
	
	if(x > 64){
200036c8:	68fb      	ldr	r3, [r7, #12]
200036ca:	2b40      	cmp	r3, #64	; 0x40
200036cc:	dd07      	ble.n	200036de <pixel2+0xd6>
		controller = B_CS2;
200036ce:	231e      	movs	r3, #30
200036d0:	18fb      	adds	r3, r7, r3
200036d2:	2210      	movs	r2, #16
200036d4:	701a      	strb	r2, [r3, #0]
		x = x - 65;
200036d6:	68fb      	ldr	r3, [r7, #12]
200036d8:	3b41      	subs	r3, #65	; 0x41
200036da:	60fb      	str	r3, [r7, #12]
200036dc:	e006      	b.n	200036ec <pixel2+0xe4>
	} else {
		controller = B_CS1;
200036de:	231e      	movs	r3, #30
200036e0:	18fb      	adds	r3, r7, r3
200036e2:	2208      	movs	r2, #8
200036e4:	701a      	strb	r2, [r3, #0]
		x = x-1;
200036e6:	68fb      	ldr	r3, [r7, #12]
200036e8:	3b01      	subs	r3, #1
200036ea:	60fb      	str	r3, [r7, #12]
	}
	graphic_write_command(LCD_SET_ADD | x, controller );
200036ec:	68fb      	ldr	r3, [r7, #12]
200036ee:	b25b      	sxtb	r3, r3
200036f0:	2240      	movs	r2, #64	; 0x40
200036f2:	4313      	orrs	r3, r2
200036f4:	b25b      	sxtb	r3, r3
200036f6:	b2da      	uxtb	r2, r3
200036f8:	231e      	movs	r3, #30
200036fa:	18fb      	adds	r3, r7, r3
200036fc:	781b      	ldrb	r3, [r3, #0]
200036fe:	0019      	movs	r1, r3
20003700:	0010      	movs	r0, r2
20003702:	f7ff fe11 	bl	20003328 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller );
20003706:	69bb      	ldr	r3, [r7, #24]
20003708:	b25b      	sxtb	r3, r3
2000370a:	2248      	movs	r2, #72	; 0x48
2000370c:	4252      	negs	r2, r2
2000370e:	4313      	orrs	r3, r2
20003710:	b25b      	sxtb	r3, r3
20003712:	b2da      	uxtb	r2, r3
20003714:	231e      	movs	r3, #30
20003716:	18fb      	adds	r3, r7, r3
20003718:	781b      	ldrb	r3, [r3, #0]
2000371a:	0019      	movs	r1, r3
2000371c:	0010      	movs	r0, r2
2000371e:	f7ff fe03 	bl	20003328 <graphic_write_command>
	
	c = graphic_read_data(controller);
20003722:	231e      	movs	r3, #30
20003724:	18fb      	adds	r3, r7, r3
20003726:	781b      	ldrb	r3, [r3, #0]
20003728:	0018      	movs	r0, r3
2000372a:	f7ff fda9 	bl	20003280 <graphic_read_data>
2000372e:	0002      	movs	r2, r0
20003730:	2317      	movs	r3, #23
20003732:	18fb      	adds	r3, r7, r3
20003734:	701a      	strb	r2, [r3, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
20003736:	68fb      	ldr	r3, [r7, #12]
20003738:	b25b      	sxtb	r3, r3
2000373a:	2240      	movs	r2, #64	; 0x40
2000373c:	4313      	orrs	r3, r2
2000373e:	b25b      	sxtb	r3, r3
20003740:	b2da      	uxtb	r2, r3
20003742:	231e      	movs	r3, #30
20003744:	18fb      	adds	r3, r7, r3
20003746:	781b      	ldrb	r3, [r3, #0]
20003748:	0019      	movs	r1, r3
2000374a:	0010      	movs	r0, r2
2000374c:	f7ff fdec 	bl	20003328 <graphic_write_command>
	
	if(set)
20003750:	687b      	ldr	r3, [r7, #4]
20003752:	2b00      	cmp	r3, #0
20003754:	d00a      	beq.n	2000376c <pixel2+0x164>
		mask = mask | c;
20003756:	231f      	movs	r3, #31
20003758:	18fb      	adds	r3, r7, r3
2000375a:	221f      	movs	r2, #31
2000375c:	18b9      	adds	r1, r7, r2
2000375e:	2217      	movs	r2, #23
20003760:	18ba      	adds	r2, r7, r2
20003762:	7809      	ldrb	r1, [r1, #0]
20003764:	7812      	ldrb	r2, [r2, #0]
20003766:	430a      	orrs	r2, r1
20003768:	701a      	strb	r2, [r3, #0]
2000376a:	e009      	b.n	20003780 <pixel2+0x178>
	else
		mask = mask & c;
2000376c:	231f      	movs	r3, #31
2000376e:	18fb      	adds	r3, r7, r3
20003770:	221f      	movs	r2, #31
20003772:	18ba      	adds	r2, r7, r2
20003774:	2117      	movs	r1, #23
20003776:	1879      	adds	r1, r7, r1
20003778:	7812      	ldrb	r2, [r2, #0]
2000377a:	7809      	ldrb	r1, [r1, #0]
2000377c:	400a      	ands	r2, r1
2000377e:	701a      	strb	r2, [r3, #0]
	
	graphic_write_data(mask, controller);
20003780:	231e      	movs	r3, #30
20003782:	18fb      	adds	r3, r7, r3
20003784:	781a      	ldrb	r2, [r3, #0]
20003786:	231f      	movs	r3, #31
20003788:	18fb      	adds	r3, r7, r3
2000378a:	781b      	ldrb	r3, [r3, #0]
2000378c:	0011      	movs	r1, r2
2000378e:	0018      	movs	r0, r3
20003790:	f7ff fded 	bl	2000336e <graphic_write_data>
20003794:	e000      	b.n	20003798 <pixel2+0x190>
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20003796:	46c0      	nop			; (mov r8, r8)
}
20003798:	46bd      	mov	sp, r7
2000379a:	b008      	add	sp, #32
2000379c:	bd80      	pop	{r7, pc}
2000379e:	46c0      	nop			; (mov r8, r8)
200037a0:	80000007 	andhi	r0, r0, r7
200037a4:	2000f790 	mulcs	r0, r0, r7

200037a8 <graphic_draw_screen>:

void graphic_draw_screen(uint8_t *buffer) {
200037a8:	b580      	push	{r7, lr}
200037aa:	b086      	sub	sp, #24
200037ac:	af00      	add	r7, sp, #0
200037ae:	6078      	str	r0, [r7, #4]
	uint8_t i, j, controller, c;
	unsigned int k = 0;
200037b0:	2300      	movs	r3, #0
200037b2:	613b      	str	r3, [r7, #16]
	for(c = 0; c < 2; c++) {
200037b4:	2315      	movs	r3, #21
200037b6:	18fb      	adds	r3, r7, r3
200037b8:	2200      	movs	r2, #0
200037ba:	701a      	strb	r2, [r3, #0]
200037bc:	e056      	b.n	2000386c <graphic_draw_screen+0xc4>
		controller = (c == 0) ? B_CS1 : B_CS2;
200037be:	2315      	movs	r3, #21
200037c0:	18fb      	adds	r3, r7, r3
200037c2:	781b      	ldrb	r3, [r3, #0]
200037c4:	2b00      	cmp	r3, #0
200037c6:	d101      	bne.n	200037cc <graphic_draw_screen+0x24>
200037c8:	2208      	movs	r2, #8
200037ca:	e000      	b.n	200037ce <graphic_draw_screen+0x26>
200037cc:	2210      	movs	r2, #16
200037ce:	230f      	movs	r3, #15
200037d0:	18fb      	adds	r3, r7, r3
200037d2:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 8; j++) {
200037d4:	2316      	movs	r3, #22
200037d6:	18fb      	adds	r3, r7, r3
200037d8:	2200      	movs	r2, #0
200037da:	701a      	strb	r2, [r3, #0]
200037dc:	e03a      	b.n	20003854 <graphic_draw_screen+0xac>
			graphic_write_command(LCD_SET_PAGE | j, controller);
200037de:	2316      	movs	r3, #22
200037e0:	18fb      	adds	r3, r7, r3
200037e2:	781b      	ldrb	r3, [r3, #0]
200037e4:	2248      	movs	r2, #72	; 0x48
200037e6:	4252      	negs	r2, r2
200037e8:	4313      	orrs	r3, r2
200037ea:	b2da      	uxtb	r2, r3
200037ec:	230f      	movs	r3, #15
200037ee:	18fb      	adds	r3, r7, r3
200037f0:	781b      	ldrb	r3, [r3, #0]
200037f2:	0019      	movs	r1, r3
200037f4:	0010      	movs	r0, r2
200037f6:	f7ff fd97 	bl	20003328 <graphic_write_command>
			graphic_write_command(LCD_SET_ADD | 0, controller);
200037fa:	230f      	movs	r3, #15
200037fc:	18fb      	adds	r3, r7, r3
200037fe:	781b      	ldrb	r3, [r3, #0]
20003800:	0019      	movs	r1, r3
20003802:	2040      	movs	r0, #64	; 0x40
20003804:	f7ff fd90 	bl	20003328 <graphic_write_command>
			for(i = 0; i <= 63; i++, k++) {
20003808:	2317      	movs	r3, #23
2000380a:	18fb      	adds	r3, r7, r3
2000380c:	2200      	movs	r2, #0
2000380e:	701a      	strb	r2, [r3, #0]
20003810:	e014      	b.n	2000383c <graphic_draw_screen+0x94>
				graphic_write_data(buffer[k], controller);
20003812:	687a      	ldr	r2, [r7, #4]
20003814:	693b      	ldr	r3, [r7, #16]
20003816:	18d3      	adds	r3, r2, r3
20003818:	781a      	ldrb	r2, [r3, #0]
2000381a:	230f      	movs	r3, #15
2000381c:	18fb      	adds	r3, r7, r3
2000381e:	781b      	ldrb	r3, [r3, #0]
20003820:	0019      	movs	r1, r3
20003822:	0010      	movs	r0, r2
20003824:	f7ff fda3 	bl	2000336e <graphic_write_data>
			for(i = 0; i <= 63; i++, k++) {
20003828:	2317      	movs	r3, #23
2000382a:	18fb      	adds	r3, r7, r3
2000382c:	781a      	ldrb	r2, [r3, #0]
2000382e:	2317      	movs	r3, #23
20003830:	18fb      	adds	r3, r7, r3
20003832:	3201      	adds	r2, #1
20003834:	701a      	strb	r2, [r3, #0]
20003836:	693b      	ldr	r3, [r7, #16]
20003838:	3301      	adds	r3, #1
2000383a:	613b      	str	r3, [r7, #16]
2000383c:	2317      	movs	r3, #23
2000383e:	18fb      	adds	r3, r7, r3
20003840:	781b      	ldrb	r3, [r3, #0]
20003842:	2b3f      	cmp	r3, #63	; 0x3f
20003844:	d9e5      	bls.n	20003812 <graphic_draw_screen+0x6a>
		for(j = 0; j < 8; j++) {
20003846:	2316      	movs	r3, #22
20003848:	18fb      	adds	r3, r7, r3
2000384a:	781a      	ldrb	r2, [r3, #0]
2000384c:	2316      	movs	r3, #22
2000384e:	18fb      	adds	r3, r7, r3
20003850:	3201      	adds	r2, #1
20003852:	701a      	strb	r2, [r3, #0]
20003854:	2316      	movs	r3, #22
20003856:	18fb      	adds	r3, r7, r3
20003858:	781b      	ldrb	r3, [r3, #0]
2000385a:	2b07      	cmp	r3, #7
2000385c:	d9bf      	bls.n	200037de <graphic_draw_screen+0x36>
	for(c = 0; c < 2; c++) {
2000385e:	2315      	movs	r3, #21
20003860:	18fb      	adds	r3, r7, r3
20003862:	781a      	ldrb	r2, [r3, #0]
20003864:	2315      	movs	r3, #21
20003866:	18fb      	adds	r3, r7, r3
20003868:	3201      	adds	r2, #1
2000386a:	701a      	strb	r2, [r3, #0]
2000386c:	2315      	movs	r3, #21
2000386e:	18fb      	adds	r3, r7, r3
20003870:	781b      	ldrb	r3, [r3, #0]
20003872:	2b01      	cmp	r3, #1
20003874:	d9a3      	bls.n	200037be <graphic_draw_screen+0x16>
			}
		}
	}
}
20003876:	46c0      	nop			; (mov r8, r8)
20003878:	46bd      	mov	sp, r7
2000387a:	b006      	add	sp, #24
2000387c:	bd80      	pop	{r7, pc}

2000387e <draw_sprite>:


void grayScaleTest( void );


void draw_sprite(sprite* s, int x, int y, int set, int color) {
2000387e:	b5b0      	push	{r4, r5, r7, lr}
20003880:	b08a      	sub	sp, #40	; 0x28
20003882:	af00      	add	r7, sp, #0
20003884:	60f8      	str	r0, [r7, #12]
20003886:	60b9      	str	r1, [r7, #8]
20003888:	607a      	str	r2, [r7, #4]
2000388a:	603b      	str	r3, [r7, #0]
	int i,j,k, width_in_bytes;
	if (s->width % 8 == 0)
2000388c:	68fb      	ldr	r3, [r7, #12]
2000388e:	681b      	ldr	r3, [r3, #0]
20003890:	2207      	movs	r2, #7
20003892:	4013      	ands	r3, r2
20003894:	d104      	bne.n	200038a0 <draw_sprite+0x22>
		width_in_bytes = s->width / 8;
20003896:	68fb      	ldr	r3, [r7, #12]
20003898:	681b      	ldr	r3, [r3, #0]
2000389a:	08db      	lsrs	r3, r3, #3
2000389c:	61bb      	str	r3, [r7, #24]
2000389e:	e004      	b.n	200038aa <draw_sprite+0x2c>
	else
		width_in_bytes = (s->width / 8) + 1;
200038a0:	68fb      	ldr	r3, [r7, #12]
200038a2:	681b      	ldr	r3, [r3, #0]
200038a4:	08db      	lsrs	r3, r3, #3
200038a6:	3301      	adds	r3, #1
200038a8:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < s->height; i++)
200038aa:	2300      	movs	r3, #0
200038ac:	627b      	str	r3, [r7, #36]	; 0x24
200038ae:	e06a      	b.n	20003986 <draw_sprite+0x108>
		for (j = 0; j < width_in_bytes; j++) {
200038b0:	2300      	movs	r3, #0
200038b2:	623b      	str	r3, [r7, #32]
200038b4:	e060      	b.n	20003978 <draw_sprite+0xfa>
			unsigned char byte = s->data[i * width_in_bytes + j];
200038b6:	68fb      	ldr	r3, [r7, #12]
200038b8:	689b      	ldr	r3, [r3, #8]
200038ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200038bc:	69b9      	ldr	r1, [r7, #24]
200038be:	4351      	muls	r1, r2
200038c0:	6a3a      	ldr	r2, [r7, #32]
200038c2:	188a      	adds	r2, r1, r2
200038c4:	189a      	adds	r2, r3, r2
200038c6:	2317      	movs	r3, #23
200038c8:	18fb      	adds	r3, r7, r3
200038ca:	7812      	ldrb	r2, [r2, #0]
200038cc:	701a      	strb	r2, [r3, #0]
			for (k =0; k < 8; k++) {
200038ce:	2300      	movs	r3, #0
200038d0:	61fb      	str	r3, [r7, #28]
200038d2:	e04b      	b.n	2000396c <draw_sprite+0xee>
				if (byte & (1 << k)){
200038d4:	2317      	movs	r3, #23
200038d6:	18fb      	adds	r3, r7, r3
200038d8:	781a      	ldrb	r2, [r3, #0]
200038da:	69fb      	ldr	r3, [r7, #28]
200038dc:	411a      	asrs	r2, r3
200038de:	0013      	movs	r3, r2
200038e0:	2201      	movs	r2, #1
200038e2:	4013      	ands	r3, r2
200038e4:	d03f      	beq.n	20003966 <draw_sprite+0xe8>
					pixel(8 * j + k + x + 1, i + y + 1, set, color);
200038e6:	6a3b      	ldr	r3, [r7, #32]
200038e8:	00da      	lsls	r2, r3, #3
200038ea:	69fb      	ldr	r3, [r7, #28]
200038ec:	18d2      	adds	r2, r2, r3
200038ee:	68bb      	ldr	r3, [r7, #8]
200038f0:	18d3      	adds	r3, r2, r3
200038f2:	1c58      	adds	r0, r3, #1
200038f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200038f6:	687b      	ldr	r3, [r7, #4]
200038f8:	18d3      	adds	r3, r2, r3
200038fa:	1c59      	adds	r1, r3, #1
200038fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200038fe:	683a      	ldr	r2, [r7, #0]
20003900:	f7ff fdc2 	bl	20003488 <pixel>
					
					if(set) {	//Remove the other colors from this pixel
20003904:	683b      	ldr	r3, [r7, #0]
20003906:	2b00      	cmp	r3, #0
20003908:	d02d      	beq.n	20003966 <draw_sprite+0xe8>
						pixel(8 * j + k + x + 1, i + y + 1, 0, (color+1) % 3);
2000390a:	6a3b      	ldr	r3, [r7, #32]
2000390c:	00da      	lsls	r2, r3, #3
2000390e:	69fb      	ldr	r3, [r7, #28]
20003910:	18d2      	adds	r2, r2, r3
20003912:	68bb      	ldr	r3, [r7, #8]
20003914:	18d3      	adds	r3, r2, r3
20003916:	1c5c      	adds	r4, r3, #1
20003918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000391a:	687b      	ldr	r3, [r7, #4]
2000391c:	18d3      	adds	r3, r2, r3
2000391e:	1c5d      	adds	r5, r3, #1
20003920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20003922:	3301      	adds	r3, #1
20003924:	2103      	movs	r1, #3
20003926:	0018      	movs	r0, r3
20003928:	f001 f808 	bl	2000493c <__aeabi_idivmod>
2000392c:	000b      	movs	r3, r1
2000392e:	2200      	movs	r2, #0
20003930:	0029      	movs	r1, r5
20003932:	0020      	movs	r0, r4
20003934:	f7ff fda8 	bl	20003488 <pixel>
						pixel(8 * j + k + x + 1, i + y + 1, 0, (color+2) % 3);
20003938:	6a3b      	ldr	r3, [r7, #32]
2000393a:	00da      	lsls	r2, r3, #3
2000393c:	69fb      	ldr	r3, [r7, #28]
2000393e:	18d2      	adds	r2, r2, r3
20003940:	68bb      	ldr	r3, [r7, #8]
20003942:	18d3      	adds	r3, r2, r3
20003944:	1c5c      	adds	r4, r3, #1
20003946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20003948:	687b      	ldr	r3, [r7, #4]
2000394a:	18d3      	adds	r3, r2, r3
2000394c:	1c5d      	adds	r5, r3, #1
2000394e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20003950:	3302      	adds	r3, #2
20003952:	2103      	movs	r1, #3
20003954:	0018      	movs	r0, r3
20003956:	f000 fff1 	bl	2000493c <__aeabi_idivmod>
2000395a:	000b      	movs	r3, r1
2000395c:	2200      	movs	r2, #0
2000395e:	0029      	movs	r1, r5
20003960:	0020      	movs	r0, r4
20003962:	f7ff fd91 	bl	20003488 <pixel>
			for (k =0; k < 8; k++) {
20003966:	69fb      	ldr	r3, [r7, #28]
20003968:	3301      	adds	r3, #1
2000396a:	61fb      	str	r3, [r7, #28]
2000396c:	69fb      	ldr	r3, [r7, #28]
2000396e:	2b07      	cmp	r3, #7
20003970:	ddb0      	ble.n	200038d4 <draw_sprite+0x56>
		for (j = 0; j < width_in_bytes; j++) {
20003972:	6a3b      	ldr	r3, [r7, #32]
20003974:	3301      	adds	r3, #1
20003976:	623b      	str	r3, [r7, #32]
20003978:	6a3a      	ldr	r2, [r7, #32]
2000397a:	69bb      	ldr	r3, [r7, #24]
2000397c:	429a      	cmp	r2, r3
2000397e:	db9a      	blt.n	200038b6 <draw_sprite+0x38>
	for (i = 0; i < s->height; i++)
20003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003982:	3301      	adds	r3, #1
20003984:	627b      	str	r3, [r7, #36]	; 0x24
20003986:	68fb      	ldr	r3, [r7, #12]
20003988:	685a      	ldr	r2, [r3, #4]
2000398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000398c:	429a      	cmp	r2, r3
2000398e:	d88f      	bhi.n	200038b0 <draw_sprite+0x32>
					}
				}
			}
		}
}
20003990:	46c0      	nop			; (mov r8, r8)
20003992:	46bd      	mov	sp, r7
20003994:	b00a      	add	sp, #40	; 0x28
20003996:	bdb0      	pop	{r4, r5, r7, pc}

20003998 <fillRectangle>:

void fillRectangle( int x, int y, int width, int height ){
20003998:	b580      	push	{r7, lr}
2000399a:	b086      	sub	sp, #24
2000399c:	af00      	add	r7, sp, #0
2000399e:	60f8      	str	r0, [r7, #12]
200039a0:	60b9      	str	r1, [r7, #8]
200039a2:	607a      	str	r2, [r7, #4]
200039a4:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
200039a6:	68fb      	ldr	r3, [r7, #12]
200039a8:	617b      	str	r3, [r7, #20]
200039aa:	e014      	b.n	200039d6 <fillRectangle+0x3e>
		for (j = y; j < y + height; j++) {
200039ac:	68bb      	ldr	r3, [r7, #8]
200039ae:	613b      	str	r3, [r7, #16]
200039b0:	e008      	b.n	200039c4 <fillRectangle+0x2c>
			pixel(i, j, 1, 3);
200039b2:	6939      	ldr	r1, [r7, #16]
200039b4:	6978      	ldr	r0, [r7, #20]
200039b6:	2303      	movs	r3, #3
200039b8:	2201      	movs	r2, #1
200039ba:	f7ff fd65 	bl	20003488 <pixel>
		for (j = y; j < y + height; j++) {
200039be:	693b      	ldr	r3, [r7, #16]
200039c0:	3301      	adds	r3, #1
200039c2:	613b      	str	r3, [r7, #16]
200039c4:	68ba      	ldr	r2, [r7, #8]
200039c6:	683b      	ldr	r3, [r7, #0]
200039c8:	18d2      	adds	r2, r2, r3
200039ca:	693b      	ldr	r3, [r7, #16]
200039cc:	429a      	cmp	r2, r3
200039ce:	dcf0      	bgt.n	200039b2 <fillRectangle+0x1a>
	for (i = x; i < x + width; i++) {
200039d0:	697b      	ldr	r3, [r7, #20]
200039d2:	3301      	adds	r3, #1
200039d4:	617b      	str	r3, [r7, #20]
200039d6:	68fa      	ldr	r2, [r7, #12]
200039d8:	687b      	ldr	r3, [r7, #4]
200039da:	18d2      	adds	r2, r2, r3
200039dc:	697b      	ldr	r3, [r7, #20]
200039de:	429a      	cmp	r2, r3
200039e0:	dce4      	bgt.n	200039ac <fillRectangle+0x14>
		}
	}
}
200039e2:	46c0      	nop			; (mov r8, r8)
200039e4:	46bd      	mov	sp, r7
200039e6:	b006      	add	sp, #24
200039e8:	bd80      	pop	{r7, pc}

200039ea <clearRectangle>:

void clearRectangle( int x, int y, int width, int height ){
200039ea:	b580      	push	{r7, lr}
200039ec:	b086      	sub	sp, #24
200039ee:	af00      	add	r7, sp, #0
200039f0:	60f8      	str	r0, [r7, #12]
200039f2:	60b9      	str	r1, [r7, #8]
200039f4:	607a      	str	r2, [r7, #4]
200039f6:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
200039f8:	68fb      	ldr	r3, [r7, #12]
200039fa:	617b      	str	r3, [r7, #20]
200039fc:	e014      	b.n	20003a28 <clearRectangle+0x3e>
		for (j = y; j < y + height; j++) {
200039fe:	68bb      	ldr	r3, [r7, #8]
20003a00:	613b      	str	r3, [r7, #16]
20003a02:	e008      	b.n	20003a16 <clearRectangle+0x2c>
			pixel(i, j, 0, 3);
20003a04:	6939      	ldr	r1, [r7, #16]
20003a06:	6978      	ldr	r0, [r7, #20]
20003a08:	2303      	movs	r3, #3
20003a0a:	2200      	movs	r2, #0
20003a0c:	f7ff fd3c 	bl	20003488 <pixel>
		for (j = y; j < y + height; j++) {
20003a10:	693b      	ldr	r3, [r7, #16]
20003a12:	3301      	adds	r3, #1
20003a14:	613b      	str	r3, [r7, #16]
20003a16:	68ba      	ldr	r2, [r7, #8]
20003a18:	683b      	ldr	r3, [r7, #0]
20003a1a:	18d2      	adds	r2, r2, r3
20003a1c:	693b      	ldr	r3, [r7, #16]
20003a1e:	429a      	cmp	r2, r3
20003a20:	dcf0      	bgt.n	20003a04 <clearRectangle+0x1a>
	for (i = x; i < x + width; i++) {
20003a22:	697b      	ldr	r3, [r7, #20]
20003a24:	3301      	adds	r3, #1
20003a26:	617b      	str	r3, [r7, #20]
20003a28:	68fa      	ldr	r2, [r7, #12]
20003a2a:	687b      	ldr	r3, [r7, #4]
20003a2c:	18d2      	adds	r2, r2, r3
20003a2e:	697b      	ldr	r3, [r7, #20]
20003a30:	429a      	cmp	r2, r3
20003a32:	dce4      	bgt.n	200039fe <clearRectangle+0x14>
		}
	}
}
20003a34:	46c0      	nop			; (mov r8, r8)
20003a36:	46bd      	mov	sp, r7
20003a38:	b006      	add	sp, #24
20003a3a:	bd80      	pop	{r7, pc}

20003a3c <grayScaleTest>:


void grayScaleTest( void ) {
20003a3c:	b590      	push	{r4, r7, lr}
20003a3e:	b087      	sub	sp, #28
20003a40:	af00      	add	r7, sp, #0
	int x = 10;
20003a42:	230a      	movs	r3, #10
20003a44:	617b      	str	r3, [r7, #20]
	int y = 10;
20003a46:	230a      	movs	r3, #10
20003a48:	613b      	str	r3, [r7, #16]
	int width = 70;
20003a4a:	2346      	movs	r3, #70	; 0x46
20003a4c:	60fb      	str	r3, [r7, #12]
	int height = 50;
20003a4e:	2332      	movs	r3, #50	; 0x32
20003a50:	60bb      	str	r3, [r7, #8]
	
	int x2 = 50;
20003a52:	2332      	movs	r3, #50	; 0x32
20003a54:	607b      	str	r3, [r7, #4]
	
	fillRectangle(x, y, width, height);
20003a56:	68bb      	ldr	r3, [r7, #8]
20003a58:	68fa      	ldr	r2, [r7, #12]
20003a5a:	6939      	ldr	r1, [r7, #16]
20003a5c:	6978      	ldr	r0, [r7, #20]
20003a5e:	f7ff ff9b 	bl	20003998 <fillRectangle>
	
	int i;
	int k = 5;
20003a62:	2305      	movs	r3, #5
20003a64:	603b      	str	r3, [r7, #0]
	while(1) {
		clear_backBuffer();
20003a66:	f7ff fadf 	bl	20003028 <clear_backBuffer>
		fillRectangle(x, y, width, height);
20003a6a:	68bb      	ldr	r3, [r7, #8]
20003a6c:	68fa      	ldr	r2, [r7, #12]
20003a6e:	6939      	ldr	r1, [r7, #16]
20003a70:	6978      	ldr	r0, [r7, #20]
20003a72:	f7ff ff91 	bl	20003998 <fillRectangle>
		clearRectangle(x+2+2, y+1, width-k, height-k); //outer square
20003a76:	697b      	ldr	r3, [r7, #20]
20003a78:	1d18      	adds	r0, r3, #4
20003a7a:	693b      	ldr	r3, [r7, #16]
20003a7c:	1c59      	adds	r1, r3, #1
20003a7e:	68fa      	ldr	r2, [r7, #12]
20003a80:	683b      	ldr	r3, [r7, #0]
20003a82:	1ad4      	subs	r4, r2, r3
20003a84:	68ba      	ldr	r2, [r7, #8]
20003a86:	683b      	ldr	r3, [r7, #0]
20003a88:	1ad3      	subs	r3, r2, r3
20003a8a:	0022      	movs	r2, r4
20003a8c:	f7ff ffad 	bl	200039ea <clearRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
20003a90:	697b      	ldr	r3, [r7, #20]
20003a92:	1c9a      	adds	r2, r3, #2
20003a94:	683b      	ldr	r3, [r7, #0]
20003a96:	18d0      	adds	r0, r2, r3
20003a98:	693b      	ldr	r3, [r7, #16]
20003a9a:	1c99      	adds	r1, r3, #2
20003a9c:	68fb      	ldr	r3, [r7, #12]
20003a9e:	1f1a      	subs	r2, r3, #4
20003aa0:	683b      	ldr	r3, [r7, #0]
20003aa2:	1ad4      	subs	r4, r2, r3
20003aa4:	68bb      	ldr	r3, [r7, #8]
20003aa6:	1f1a      	subs	r2, r3, #4
20003aa8:	683b      	ldr	r3, [r7, #0]
20003aaa:	1ad3      	subs	r3, r2, r3
20003aac:	0022      	movs	r2, r4
20003aae:	f7ff ff9c 	bl	200039ea <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
20003ab2:	4b2d      	ldr	r3, [pc, #180]	; (20003b68 <grayScaleTest+0x12c>)
20003ab4:	0018      	movs	r0, r3
20003ab6:	f7ff fe77 	bl	200037a8 <graphic_draw_screen>
		clear_backBuffer();
20003aba:	f7ff fab5 	bl	20003028 <clear_backBuffer>
		fillRectangle(x, y, width, height);
20003abe:	68bb      	ldr	r3, [r7, #8]
20003ac0:	68fa      	ldr	r2, [r7, #12]
20003ac2:	6939      	ldr	r1, [r7, #16]
20003ac4:	6978      	ldr	r0, [r7, #20]
20003ac6:	f7ff ff67 	bl	20003998 <fillRectangle>
		
		fillRectangle(x+2+2, y+1, width-k, height-k); //outer white square
20003aca:	697b      	ldr	r3, [r7, #20]
20003acc:	1d18      	adds	r0, r3, #4
20003ace:	693b      	ldr	r3, [r7, #16]
20003ad0:	1c59      	adds	r1, r3, #1
20003ad2:	68fa      	ldr	r2, [r7, #12]
20003ad4:	683b      	ldr	r3, [r7, #0]
20003ad6:	1ad4      	subs	r4, r2, r3
20003ad8:	68ba      	ldr	r2, [r7, #8]
20003ada:	683b      	ldr	r3, [r7, #0]
20003adc:	1ad3      	subs	r3, r2, r3
20003ade:	0022      	movs	r2, r4
20003ae0:	f7ff ff5a 	bl	20003998 <fillRectangle>
		fillRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
20003ae4:	697b      	ldr	r3, [r7, #20]
20003ae6:	1c9a      	adds	r2, r3, #2
20003ae8:	683b      	ldr	r3, [r7, #0]
20003aea:	18d0      	adds	r0, r2, r3
20003aec:	693b      	ldr	r3, [r7, #16]
20003aee:	1c99      	adds	r1, r3, #2
20003af0:	68fb      	ldr	r3, [r7, #12]
20003af2:	1f1a      	subs	r2, r3, #4
20003af4:	683b      	ldr	r3, [r7, #0]
20003af6:	1ad4      	subs	r4, r2, r3
20003af8:	68bb      	ldr	r3, [r7, #8]
20003afa:	1f1a      	subs	r2, r3, #4
20003afc:	683b      	ldr	r3, [r7, #0]
20003afe:	1ad3      	subs	r3, r2, r3
20003b00:	0022      	movs	r2, r4
20003b02:	f7ff ff49 	bl	20003998 <fillRectangle>
		clearRectangle(x+12, y+5, 5, 5);
20003b06:	697b      	ldr	r3, [r7, #20]
20003b08:	330c      	adds	r3, #12
20003b0a:	0018      	movs	r0, r3
20003b0c:	693b      	ldr	r3, [r7, #16]
20003b0e:	1d59      	adds	r1, r3, #5
20003b10:	2305      	movs	r3, #5
20003b12:	2205      	movs	r2, #5
20003b14:	f7ff ff69 	bl	200039ea <clearRectangle>
		
		graphic_draw_screen(draw_buffer_black);
20003b18:	4b13      	ldr	r3, [pc, #76]	; (20003b68 <grayScaleTest+0x12c>)
20003b1a:	0018      	movs	r0, r3
20003b1c:	f7ff fe44 	bl	200037a8 <graphic_draw_screen>
		delay_milli(20);
20003b20:	2014      	movs	r0, #20
20003b22:	f7ff fa55 	bl	20002fd0 <delay_milli>
		
		clear_backBuffer();
20003b26:	f7ff fa7f 	bl	20003028 <clear_backBuffer>
		fillRectangle(x, y, width, height);
20003b2a:	68bb      	ldr	r3, [r7, #8]
20003b2c:	68fa      	ldr	r2, [r7, #12]
20003b2e:	6939      	ldr	r1, [r7, #16]
20003b30:	6978      	ldr	r0, [r7, #20]
20003b32:	f7ff ff31 	bl	20003998 <fillRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
20003b36:	697b      	ldr	r3, [r7, #20]
20003b38:	1c9a      	adds	r2, r3, #2
20003b3a:	683b      	ldr	r3, [r7, #0]
20003b3c:	18d0      	adds	r0, r2, r3
20003b3e:	693b      	ldr	r3, [r7, #16]
20003b40:	1c99      	adds	r1, r3, #2
20003b42:	68fb      	ldr	r3, [r7, #12]
20003b44:	1f1a      	subs	r2, r3, #4
20003b46:	683b      	ldr	r3, [r7, #0]
20003b48:	1ad4      	subs	r4, r2, r3
20003b4a:	68bb      	ldr	r3, [r7, #8]
20003b4c:	1f1a      	subs	r2, r3, #4
20003b4e:	683b      	ldr	r3, [r7, #0]
20003b50:	1ad3      	subs	r3, r2, r3
20003b52:	0022      	movs	r2, r4
20003b54:	f7ff ff49 	bl	200039ea <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
20003b58:	4b03      	ldr	r3, [pc, #12]	; (20003b68 <grayScaleTest+0x12c>)
20003b5a:	0018      	movs	r0, r3
20003b5c:	f7ff fe24 	bl	200037a8 <graphic_draw_screen>
		
		delay_milli(20);
20003b60:	2014      	movs	r0, #20
20003b62:	f7ff fa35 	bl	20002fd0 <delay_milli>
		clear_backBuffer();
20003b66:	e77e      	b.n	20003a66 <grayScaleTest+0x2a>
20003b68:	20006500 	andcs	r6, r0, r0, lsl #10

20003b6c <set_up_draw_buffers>:
	}
}

/** Should prepare the different drawing buffers, before the drawing of each frame.*/
void set_up_draw_buffers( void ) {
20003b6c:	b580      	push	{r7, lr}
20003b6e:	b082      	sub	sp, #8
20003b70:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 1024; i++) {
20003b72:	2300      	movs	r3, #0
20003b74:	607b      	str	r3, [r7, #4]
20003b76:	e065      	b.n	20003c44 <set_up_draw_buffers+0xd8>
		draw_buffer_black[i] = backBuffer[i] & (~backBufferGray[i] & ~backBufferLight[i]); //Had to work a bit on these
20003b78:	4a36      	ldr	r2, [pc, #216]	; (20003c54 <set_up_draw_buffers+0xe8>)
20003b7a:	687b      	ldr	r3, [r7, #4]
20003b7c:	18d3      	adds	r3, r2, r3
20003b7e:	781b      	ldrb	r3, [r3, #0]
20003b80:	b25b      	sxtb	r3, r3
20003b82:	4935      	ldr	r1, [pc, #212]	; (20003c58 <set_up_draw_buffers+0xec>)
20003b84:	687a      	ldr	r2, [r7, #4]
20003b86:	188a      	adds	r2, r1, r2
20003b88:	7811      	ldrb	r1, [r2, #0]
20003b8a:	4834      	ldr	r0, [pc, #208]	; (20003c5c <set_up_draw_buffers+0xf0>)
20003b8c:	687a      	ldr	r2, [r7, #4]
20003b8e:	1882      	adds	r2, r0, r2
20003b90:	7812      	ldrb	r2, [r2, #0]
20003b92:	430a      	orrs	r2, r1
20003b94:	b2d2      	uxtb	r2, r2
20003b96:	b252      	sxtb	r2, r2
20003b98:	43d2      	mvns	r2, r2
20003b9a:	b252      	sxtb	r2, r2
20003b9c:	4013      	ands	r3, r2
20003b9e:	b25b      	sxtb	r3, r3
20003ba0:	b2d9      	uxtb	r1, r3
20003ba2:	4a2f      	ldr	r2, [pc, #188]	; (20003c60 <set_up_draw_buffers+0xf4>)
20003ba4:	687b      	ldr	r3, [r7, #4]
20003ba6:	18d3      	adds	r3, r2, r3
20003ba8:	1c0a      	adds	r2, r1, #0
20003baa:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray[i] = (backBuffer[i] | backBufferGray[i]) & ~backBufferLight[i]; //in order to make it possible
20003bac:	4a29      	ldr	r2, [pc, #164]	; (20003c54 <set_up_draw_buffers+0xe8>)
20003bae:	687b      	ldr	r3, [r7, #4]
20003bb0:	18d3      	adds	r3, r2, r3
20003bb2:	781a      	ldrb	r2, [r3, #0]
20003bb4:	4928      	ldr	r1, [pc, #160]	; (20003c58 <set_up_draw_buffers+0xec>)
20003bb6:	687b      	ldr	r3, [r7, #4]
20003bb8:	18cb      	adds	r3, r1, r3
20003bba:	781b      	ldrb	r3, [r3, #0]
20003bbc:	4313      	orrs	r3, r2
20003bbe:	b2db      	uxtb	r3, r3
20003bc0:	b25b      	sxtb	r3, r3
20003bc2:	4926      	ldr	r1, [pc, #152]	; (20003c5c <set_up_draw_buffers+0xf0>)
20003bc4:	687a      	ldr	r2, [r7, #4]
20003bc6:	188a      	adds	r2, r1, r2
20003bc8:	7812      	ldrb	r2, [r2, #0]
20003bca:	b252      	sxtb	r2, r2
20003bcc:	43d2      	mvns	r2, r2
20003bce:	b252      	sxtb	r2, r2
20003bd0:	4013      	ands	r3, r2
20003bd2:	b25b      	sxtb	r3, r3
20003bd4:	b2d9      	uxtb	r1, r3
20003bd6:	4a23      	ldr	r2, [pc, #140]	; (20003c64 <set_up_draw_buffers+0xf8>)
20003bd8:	687b      	ldr	r3, [r7, #4]
20003bda:	18d3      	adds	r3, r2, r3
20003bdc:	1c0a      	adds	r2, r1, #0
20003bde:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_light[i] = (backBuffer[i] | backBufferLight[i]) & ~backBufferGray[i]; //to show a lighter sprite
20003be0:	4a1c      	ldr	r2, [pc, #112]	; (20003c54 <set_up_draw_buffers+0xe8>)
20003be2:	687b      	ldr	r3, [r7, #4]
20003be4:	18d3      	adds	r3, r2, r3
20003be6:	781a      	ldrb	r2, [r3, #0]
20003be8:	491c      	ldr	r1, [pc, #112]	; (20003c5c <set_up_draw_buffers+0xf0>)
20003bea:	687b      	ldr	r3, [r7, #4]
20003bec:	18cb      	adds	r3, r1, r3
20003bee:	781b      	ldrb	r3, [r3, #0]
20003bf0:	4313      	orrs	r3, r2
20003bf2:	b2db      	uxtb	r3, r3
20003bf4:	b25b      	sxtb	r3, r3
20003bf6:	4918      	ldr	r1, [pc, #96]	; (20003c58 <set_up_draw_buffers+0xec>)
20003bf8:	687a      	ldr	r2, [r7, #4]
20003bfa:	188a      	adds	r2, r1, r2
20003bfc:	7812      	ldrb	r2, [r2, #0]
20003bfe:	b252      	sxtb	r2, r2
20003c00:	43d2      	mvns	r2, r2
20003c02:	b252      	sxtb	r2, r2
20003c04:	4013      	ands	r3, r2
20003c06:	b25b      	sxtb	r3, r3
20003c08:	b2d9      	uxtb	r1, r3
20003c0a:	4a17      	ldr	r2, [pc, #92]	; (20003c68 <set_up_draw_buffers+0xfc>)
20003c0c:	687b      	ldr	r3, [r7, #4]
20003c0e:	18d3      	adds	r3, r2, r3
20003c10:	1c0a      	adds	r2, r1, #0
20003c12:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray_light[i] = backBuffer[i] | backBufferGray[i] | backBufferLight[i]; //on top of a darker one.
20003c14:	4a0f      	ldr	r2, [pc, #60]	; (20003c54 <set_up_draw_buffers+0xe8>)
20003c16:	687b      	ldr	r3, [r7, #4]
20003c18:	18d3      	adds	r3, r2, r3
20003c1a:	781a      	ldrb	r2, [r3, #0]
20003c1c:	490e      	ldr	r1, [pc, #56]	; (20003c58 <set_up_draw_buffers+0xec>)
20003c1e:	687b      	ldr	r3, [r7, #4]
20003c20:	18cb      	adds	r3, r1, r3
20003c22:	781b      	ldrb	r3, [r3, #0]
20003c24:	4313      	orrs	r3, r2
20003c26:	b2da      	uxtb	r2, r3
20003c28:	490c      	ldr	r1, [pc, #48]	; (20003c5c <set_up_draw_buffers+0xf0>)
20003c2a:	687b      	ldr	r3, [r7, #4]
20003c2c:	18cb      	adds	r3, r1, r3
20003c2e:	781b      	ldrb	r3, [r3, #0]
20003c30:	4313      	orrs	r3, r2
20003c32:	b2d9      	uxtb	r1, r3
20003c34:	4a0d      	ldr	r2, [pc, #52]	; (20003c6c <set_up_draw_buffers+0x100>)
20003c36:	687b      	ldr	r3, [r7, #4]
20003c38:	18d3      	adds	r3, r2, r3
20003c3a:	1c0a      	adds	r2, r1, #0
20003c3c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 1024; i++) {
20003c3e:	687b      	ldr	r3, [r7, #4]
20003c40:	3301      	adds	r3, #1
20003c42:	607b      	str	r3, [r7, #4]
20003c44:	687b      	ldr	r3, [r7, #4]
20003c46:	4a0a      	ldr	r2, [pc, #40]	; (20003c70 <set_up_draw_buffers+0x104>)
20003c48:	4293      	cmp	r3, r2
20003c4a:	dd95      	ble.n	20003b78 <set_up_draw_buffers+0xc>
	}
}
20003c4c:	46c0      	nop			; (mov r8, r8)
20003c4e:	46bd      	mov	sp, r7
20003c50:	b002      	add	sp, #8
20003c52:	bd80      	pop	{r7, pc}
20003c54:	20005d00 	andcs	r5, r0, r0, lsl #26
20003c58:	20005500 	andcs	r5, r0, r0, lsl #10
20003c5c:	20006d00 	andcs	r6, r0, r0, lsl #26
20003c60:	20006500 	andcs	r6, r0, r0, lsl #10
20003c64:	20005900 	andcs	r5, r0, r0, lsl #18
20003c68:	20006100 	andcs	r6, r0, r0, lsl #2
20003c6c:	20006900 	andcs	r6, r0, r0, lsl #18
20003c70:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20003c74 <draw_game_object>:

void draw_game_object(GameObject *gObj) {
20003c74:	b580      	push	{r7, lr}
20003c76:	b086      	sub	sp, #24
20003c78:	af02      	add	r7, sp, #8
20003c7a:	6078      	str	r0, [r7, #4]
	int frame = gObj->current_frame;
20003c7c:	687b      	ldr	r3, [r7, #4]
20003c7e:	695b      	ldr	r3, [r3, #20]
20003c80:	60fb      	str	r3, [r7, #12]
	draw_sprite(gObj->images[frame].blackImage, gObj->xPos, gObj->yPos, 1, 3);
20003c82:	687b      	ldr	r3, [r7, #4]
20003c84:	6819      	ldr	r1, [r3, #0]
20003c86:	68fa      	ldr	r2, [r7, #12]
20003c88:	0013      	movs	r3, r2
20003c8a:	005b      	lsls	r3, r3, #1
20003c8c:	189b      	adds	r3, r3, r2
20003c8e:	009b      	lsls	r3, r3, #2
20003c90:	18cb      	adds	r3, r1, r3
20003c92:	6818      	ldr	r0, [r3, #0]
20003c94:	687b      	ldr	r3, [r7, #4]
20003c96:	6859      	ldr	r1, [r3, #4]
20003c98:	687b      	ldr	r3, [r7, #4]
20003c9a:	689a      	ldr	r2, [r3, #8]
20003c9c:	2303      	movs	r3, #3
20003c9e:	9300      	str	r3, [sp, #0]
20003ca0:	2301      	movs	r3, #1
20003ca2:	f7ff fdec 	bl	2000387e <draw_sprite>
	draw_sprite(gObj->images[frame].grayImage, gObj->xPos, gObj->yPos, 1, 2);
20003ca6:	687b      	ldr	r3, [r7, #4]
20003ca8:	6819      	ldr	r1, [r3, #0]
20003caa:	68fa      	ldr	r2, [r7, #12]
20003cac:	0013      	movs	r3, r2
20003cae:	005b      	lsls	r3, r3, #1
20003cb0:	189b      	adds	r3, r3, r2
20003cb2:	009b      	lsls	r3, r3, #2
20003cb4:	18cb      	adds	r3, r1, r3
20003cb6:	6858      	ldr	r0, [r3, #4]
20003cb8:	687b      	ldr	r3, [r7, #4]
20003cba:	6859      	ldr	r1, [r3, #4]
20003cbc:	687b      	ldr	r3, [r7, #4]
20003cbe:	689a      	ldr	r2, [r3, #8]
20003cc0:	2302      	movs	r3, #2
20003cc2:	9300      	str	r3, [sp, #0]
20003cc4:	2301      	movs	r3, #1
20003cc6:	f7ff fdda 	bl	2000387e <draw_sprite>
	draw_sprite(gObj->images[frame].lightImage, gObj->xPos, gObj->yPos, 1, 1);
20003cca:	687b      	ldr	r3, [r7, #4]
20003ccc:	6819      	ldr	r1, [r3, #0]
20003cce:	68fa      	ldr	r2, [r7, #12]
20003cd0:	0013      	movs	r3, r2
20003cd2:	005b      	lsls	r3, r3, #1
20003cd4:	189b      	adds	r3, r3, r2
20003cd6:	009b      	lsls	r3, r3, #2
20003cd8:	18cb      	adds	r3, r1, r3
20003cda:	6898      	ldr	r0, [r3, #8]
20003cdc:	687b      	ldr	r3, [r7, #4]
20003cde:	6859      	ldr	r1, [r3, #4]
20003ce0:	687b      	ldr	r3, [r7, #4]
20003ce2:	689a      	ldr	r2, [r3, #8]
20003ce4:	2301      	movs	r3, #1
20003ce6:	9300      	str	r3, [sp, #0]
20003ce8:	2301      	movs	r3, #1
20003cea:	f7ff fdc8 	bl	2000387e <draw_sprite>
}
20003cee:	46c0      	nop			; (mov r8, r8)
20003cf0:	46bd      	mov	sp, r7
20003cf2:	b004      	add	sp, #16
20003cf4:	bd80      	pop	{r7, pc}

20003cf6 <show_frame>:


void show_frame(int frame_length) {
20003cf6:	b580      	push	{r7, lr}
20003cf8:	b082      	sub	sp, #8
20003cfa:	af00      	add	r7, sp, #0
20003cfc:	6078      	str	r0, [r7, #4]
	set_up_draw_buffers();
20003cfe:	f7ff ff35 	bl	20003b6c <set_up_draw_buffers>
	
	while(frame_length--) {
20003d02:	e01b      	b.n	20003d3c <show_frame+0x46>
		graphic_draw_screen(draw_buffer_black_gray_light);
20003d04:	4b13      	ldr	r3, [pc, #76]	; (20003d54 <show_frame+0x5e>)
20003d06:	0018      	movs	r0, r3
20003d08:	f7ff fd4e 	bl	200037a8 <graphic_draw_screen>
		delay_milli(1);
20003d0c:	2001      	movs	r0, #1
20003d0e:	f7ff f95f 	bl	20002fd0 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
20003d12:	4b11      	ldr	r3, [pc, #68]	; (20003d58 <show_frame+0x62>)
20003d14:	0018      	movs	r0, r3
20003d16:	f7ff fd47 	bl	200037a8 <graphic_draw_screen>
		delay_milli(1);
20003d1a:	2001      	movs	r0, #1
20003d1c:	f7ff f958 	bl	20002fd0 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black_gray);
20003d20:	4b0e      	ldr	r3, [pc, #56]	; (20003d5c <show_frame+0x66>)
20003d22:	0018      	movs	r0, r3
20003d24:	f7ff fd40 	bl	200037a8 <graphic_draw_screen>
		delay_milli(1);
20003d28:	2001      	movs	r0, #1
20003d2a:	f7ff f951 	bl	20002fd0 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
20003d2e:	4b0a      	ldr	r3, [pc, #40]	; (20003d58 <show_frame+0x62>)
20003d30:	0018      	movs	r0, r3
20003d32:	f7ff fd39 	bl	200037a8 <graphic_draw_screen>
		delay_milli(1);
20003d36:	2001      	movs	r0, #1
20003d38:	f7ff f94a 	bl	20002fd0 <delay_milli>
	while(frame_length--) {
20003d3c:	687b      	ldr	r3, [r7, #4]
20003d3e:	1e5a      	subs	r2, r3, #1
20003d40:	607a      	str	r2, [r7, #4]
20003d42:	2b00      	cmp	r3, #0
20003d44:	d1de      	bne.n	20003d04 <show_frame+0xe>
	}
	
	clear_all_backBuffers();	//Maybe we could be more effective by only clearing the necessary stuff,
20003d46:	f7ff f97b 	bl	20003040 <clear_all_backBuffers>
								//but let's keep it like this if it works.
20003d4a:	46c0      	nop			; (mov r8, r8)
20003d4c:	46bd      	mov	sp, r7
20003d4e:	b002      	add	sp, #8
20003d50:	bd80      	pop	{r7, pc}
20003d52:	46c0      	nop			; (mov r8, r8)
20003d54:	20006900 	andcs	r6, r0, r0, lsl #18
20003d58:	20006500 	andcs	r6, r0, r0, lsl #10
20003d5c:	20005900 	andcs	r5, r0, r0, lsl #18

20003d60 <load_image>:
#include "image.h"

void load_image( Image *image, sprite *blackImage, sprite *grayImage, sprite *lightImage ) {
20003d60:	b580      	push	{r7, lr}
20003d62:	b084      	sub	sp, #16
20003d64:	af00      	add	r7, sp, #0
20003d66:	60f8      	str	r0, [r7, #12]
20003d68:	60b9      	str	r1, [r7, #8]
20003d6a:	607a      	str	r2, [r7, #4]
20003d6c:	603b      	str	r3, [r7, #0]
	image->blackImage = blackImage;
20003d6e:	68fb      	ldr	r3, [r7, #12]
20003d70:	68ba      	ldr	r2, [r7, #8]
20003d72:	601a      	str	r2, [r3, #0]
	image->grayImage = grayImage;
20003d74:	68fb      	ldr	r3, [r7, #12]
20003d76:	687a      	ldr	r2, [r7, #4]
20003d78:	605a      	str	r2, [r3, #4]
	image->lightImage = lightImage;
20003d7a:	68fb      	ldr	r3, [r7, #12]
20003d7c:	683a      	ldr	r2, [r7, #0]
20003d7e:	609a      	str	r2, [r3, #8]
}
20003d80:	46c0      	nop			; (mov r8, r8)
20003d82:	46bd      	mov	sp, r7
20003d84:	b004      	add	sp, #16
20003d86:	bd80      	pop	{r7, pc}

20003d88 <load_sprite>:
#include "sprite.h"

void load_sprite(sprite* s, unsigned char* data, int width, int height)
{
20003d88:	b580      	push	{r7, lr}
20003d8a:	b084      	sub	sp, #16
20003d8c:	af00      	add	r7, sp, #0
20003d8e:	60f8      	str	r0, [r7, #12]
20003d90:	60b9      	str	r1, [r7, #8]
20003d92:	607a      	str	r2, [r7, #4]
20003d94:	603b      	str	r3, [r7, #0]
	s->width = width;
20003d96:	687a      	ldr	r2, [r7, #4]
20003d98:	68fb      	ldr	r3, [r7, #12]
20003d9a:	601a      	str	r2, [r3, #0]
	s->height = height;
20003d9c:	683a      	ldr	r2, [r7, #0]
20003d9e:	68fb      	ldr	r3, [r7, #12]
20003da0:	605a      	str	r2, [r3, #4]
	s->data = data;
20003da2:	68fb      	ldr	r3, [r7, #12]
20003da4:	68ba      	ldr	r2, [r7, #8]
20003da6:	609a      	str	r2, [r3, #8]
}
20003da8:	46c0      	nop			; (mov r8, r8)
20003daa:	46bd      	mov	sp, r7
20003dac:	b004      	add	sp, #16
20003dae:	bd80      	pop	{r7, pc}

20003db0 <set_up_DIL>:
#include "gpio.h"

/** Sets up PE0-7 as inports and PE8-15 as outports. */
void set_up_DIL( void ) {
20003db0:	b580      	push	{r7, lr}
20003db2:	af00      	add	r7, sp, #0
	GPIO_D.Moder = 0x55550000;
20003db4:	4b02      	ldr	r3, [pc, #8]	; (20003dc0 <set_up_DIL+0x10>)
20003db6:	4a03      	ldr	r2, [pc, #12]	; (20003dc4 <set_up_DIL+0x14>)
20003db8:	601a      	str	r2, [r3, #0]
}
20003dba:	46c0      	nop			; (mov r8, r8)
20003dbc:	46bd      	mov	sp, r7
20003dbe:	bd80      	pop	{r7, pc}
20003dc0:	40020c00 	andmi	r0, r2, r0, lsl #24
20003dc4:	55550000 	ldrbpl	r0, [r5, #-0]

20003dc8 <read_DIL>:

char read_DIL( void ) {
20003dc8:	b580      	push	{r7, lr}
20003dca:	af00      	add	r7, sp, #0
	GPIO_D.odrHigh = GPIO_D.idrLow; //Show on bargraph
20003dcc:	4b05      	ldr	r3, [pc, #20]	; (20003de4 <read_DIL+0x1c>)
20003dce:	4a05      	ldr	r2, [pc, #20]	; (20003de4 <read_DIL+0x1c>)
20003dd0:	7c12      	ldrb	r2, [r2, #16]
20003dd2:	b2d2      	uxtb	r2, r2
20003dd4:	755a      	strb	r2, [r3, #21]
	return GPIO_D.idrLow;
20003dd6:	4b03      	ldr	r3, [pc, #12]	; (20003de4 <read_DIL+0x1c>)
20003dd8:	7c1b      	ldrb	r3, [r3, #16]
20003dda:	b2db      	uxtb	r3, r3
}
20003ddc:	0018      	movs	r0, r3
20003dde:	46bd      	mov	sp, r7
20003de0:	bd80      	pop	{r7, pc}
20003de2:	46c0      	nop			; (mov r8, r8)
20003de4:	40020c00 	andmi	r0, r2, r0, lsl #24

20003de8 <read_DIL_single>:


int read_DIL_single( int bit ) {
20003de8:	b590      	push	{r4, r7, lr}
20003dea:	b085      	sub	sp, #20
20003dec:	af00      	add	r7, sp, #0
20003dee:	6078      	str	r0, [r7, #4]
	char DIL = read_DIL();
20003df0:	230f      	movs	r3, #15
20003df2:	18fc      	adds	r4, r7, r3
20003df4:	f7ff ffe8 	bl	20003dc8 <read_DIL>
20003df8:	0003      	movs	r3, r0
20003dfa:	7023      	strb	r3, [r4, #0]
	if (DIL & (1<<bit)) {
20003dfc:	230f      	movs	r3, #15
20003dfe:	18fb      	adds	r3, r7, r3
20003e00:	781a      	ldrb	r2, [r3, #0]
20003e02:	687b      	ldr	r3, [r7, #4]
20003e04:	411a      	asrs	r2, r3
20003e06:	0013      	movs	r3, r2
20003e08:	2201      	movs	r2, #1
20003e0a:	4013      	ands	r3, r2
20003e0c:	d001      	beq.n	20003e12 <read_DIL_single+0x2a>
		return 1;
20003e0e:	2301      	movs	r3, #1
20003e10:	e000      	b.n	20003e14 <read_DIL_single+0x2c>
	} else {
		return 0;
20003e12:	2300      	movs	r3, #0
	}
20003e14:	0018      	movs	r0, r3
20003e16:	46bd      	mov	sp, r7
20003e18:	b005      	add	sp, #20
20003e1a:	bd90      	pop	{r4, r7, pc}

20003e1c <ascii_ctrl_bit_set>:
void ascii_write_data(unsigned char data);
unsigned char ascii_read_status(void);
unsigned char ascii_read_data(void);


void ascii_ctrl_bit_set(unsigned char x){
20003e1c:	b580      	push	{r7, lr}
20003e1e:	b084      	sub	sp, #16
20003e20:	af00      	add	r7, sp, #0
20003e22:	0002      	movs	r2, r0
20003e24:	1dfb      	adds	r3, r7, #7
20003e26:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och ettstÃƒÂ¤ll de bitar som ÃƒÂ¤r 1 i x
	unsigned char c;
	c = *portOdrLow;
20003e28:	4a0c      	ldr	r2, [pc, #48]	; (20003e5c <ascii_ctrl_bit_set+0x40>)
20003e2a:	230f      	movs	r3, #15
20003e2c:	18fb      	adds	r3, r7, r3
20003e2e:	7812      	ldrb	r2, [r2, #0]
20003e30:	701a      	strb	r2, [r3, #0]
	c |= (B_SELECT | x);
20003e32:	1dfa      	adds	r2, r7, #7
20003e34:	230f      	movs	r3, #15
20003e36:	18fb      	adds	r3, r7, r3
20003e38:	7812      	ldrb	r2, [r2, #0]
20003e3a:	781b      	ldrb	r3, [r3, #0]
20003e3c:	4313      	orrs	r3, r2
20003e3e:	b2da      	uxtb	r2, r3
20003e40:	230f      	movs	r3, #15
20003e42:	18fb      	adds	r3, r7, r3
20003e44:	2104      	movs	r1, #4
20003e46:	430a      	orrs	r2, r1
20003e48:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20003e4a:	4a04      	ldr	r2, [pc, #16]	; (20003e5c <ascii_ctrl_bit_set+0x40>)
20003e4c:	230f      	movs	r3, #15
20003e4e:	18fb      	adds	r3, r7, r3
20003e50:	781b      	ldrb	r3, [r3, #0]
20003e52:	7013      	strb	r3, [r2, #0]
}
20003e54:	46c0      	nop			; (mov r8, r8)
20003e56:	46bd      	mov	sp, r7
20003e58:	b004      	add	sp, #16
20003e5a:	bd80      	pop	{r7, pc}
20003e5c:	40021014 	andmi	r1, r2, r4, lsl r0

20003e60 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
20003e60:	b580      	push	{r7, lr}
20003e62:	b084      	sub	sp, #16
20003e64:	af00      	add	r7, sp, #0
20003e66:	0002      	movs	r2, r0
20003e68:	1dfb      	adds	r3, r7, #7
20003e6a:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och nollstÃ¤ll de bitar som Ã¤r 1 i x
	unsigned char c;
	c = *portOdrLow;
20003e6c:	4a0f      	ldr	r2, [pc, #60]	; (20003eac <ascii_ctrl_bit_clear+0x4c>)
20003e6e:	230f      	movs	r3, #15
20003e70:	18fb      	adds	r3, r7, r3
20003e72:	7812      	ldrb	r2, [r2, #0]
20003e74:	701a      	strb	r2, [r3, #0]
	c = (B_SELECT | c & ~x);
20003e76:	1dfb      	adds	r3, r7, #7
20003e78:	781b      	ldrb	r3, [r3, #0]
20003e7a:	b25b      	sxtb	r3, r3
20003e7c:	43db      	mvns	r3, r3
20003e7e:	b25b      	sxtb	r3, r3
20003e80:	220f      	movs	r2, #15
20003e82:	18ba      	adds	r2, r7, r2
20003e84:	7812      	ldrb	r2, [r2, #0]
20003e86:	b252      	sxtb	r2, r2
20003e88:	4013      	ands	r3, r2
20003e8a:	b25b      	sxtb	r3, r3
20003e8c:	2204      	movs	r2, #4
20003e8e:	4313      	orrs	r3, r2
20003e90:	b25a      	sxtb	r2, r3
20003e92:	230f      	movs	r3, #15
20003e94:	18fb      	adds	r3, r7, r3
20003e96:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20003e98:	4a04      	ldr	r2, [pc, #16]	; (20003eac <ascii_ctrl_bit_clear+0x4c>)
20003e9a:	230f      	movs	r3, #15
20003e9c:	18fb      	adds	r3, r7, r3
20003e9e:	781b      	ldrb	r3, [r3, #0]
20003ea0:	7013      	strb	r3, [r2, #0]
}
20003ea2:	46c0      	nop			; (mov r8, r8)
20003ea4:	46bd      	mov	sp, r7
20003ea6:	b004      	add	sp, #16
20003ea8:	bd80      	pop	{r7, pc}
20003eaa:	46c0      	nop			; (mov r8, r8)
20003eac:	40021014 	andmi	r1, r2, r4, lsl r0

20003eb0 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20003eb0:	b580      	push	{r7, lr}
20003eb2:	b082      	sub	sp, #8
20003eb4:	af00      	add	r7, sp, #0
20003eb6:	0002      	movs	r2, r0
20003eb8:	1dfb      	adds	r3, r7, #7
20003eba:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20003ebc:	2001      	movs	r0, #1
20003ebe:	f7ff ffcf 	bl	20003e60 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20003ec2:	2002      	movs	r0, #2
20003ec4:	f7ff ffcc 	bl	20003e60 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20003ec8:	1dfb      	adds	r3, r7, #7
20003eca:	781b      	ldrb	r3, [r3, #0]
20003ecc:	0018      	movs	r0, r3
20003ece:	f000 f86d 	bl	20003fac <ascii_write_controller>
}
20003ed2:	46c0      	nop			; (mov r8, r8)
20003ed4:	46bd      	mov	sp, r7
20003ed6:	b002      	add	sp, #8
20003ed8:	bd80      	pop	{r7, pc}

20003eda <ascii_write_data>:

void ascii_write_data(unsigned char data){
20003eda:	b580      	push	{r7, lr}
20003edc:	b082      	sub	sp, #8
20003ede:	af00      	add	r7, sp, #0
20003ee0:	0002      	movs	r2, r0
20003ee2:	1dfb      	adds	r3, r7, #7
20003ee4:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20003ee6:	2001      	movs	r0, #1
20003ee8:	f7ff ff98 	bl	20003e1c <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20003eec:	2002      	movs	r0, #2
20003eee:	f7ff ffb7 	bl	20003e60 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20003ef2:	1dfb      	adds	r3, r7, #7
20003ef4:	781b      	ldrb	r3, [r3, #0]
20003ef6:	0018      	movs	r0, r3
20003ef8:	f000 f858 	bl	20003fac <ascii_write_controller>
}
20003efc:	46c0      	nop			; (mov r8, r8)
20003efe:	46bd      	mov	sp, r7
20003f00:	b002      	add	sp, #8
20003f02:	bd80      	pop	{r7, pc}

20003f04 <ascii_read_status>:

unsigned char ascii_read_status(void){
20003f04:	b590      	push	{r4, r7, lr}
20003f06:	b083      	sub	sp, #12
20003f08:	af00      	add	r7, sp, #0
	//sÃƒÂ¤tt Port E bit15-8 som ingÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20003f0a:	4b11      	ldr	r3, [pc, #68]	; (20003f50 <ascii_read_status+0x4c>)
20003f0c:	4a10      	ldr	r2, [pc, #64]	; (20003f50 <ascii_read_status+0x4c>)
20003f0e:	6812      	ldr	r2, [r2, #0]
20003f10:	0412      	lsls	r2, r2, #16
20003f12:	0c12      	lsrs	r2, r2, #16
20003f14:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20003f16:	2001      	movs	r0, #1
20003f18:	f7ff ffa2 	bl	20003e60 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
20003f1c:	2002      	movs	r0, #2
20003f1e:	f7ff ff7d 	bl	20003e1c <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20003f22:	1dfc      	adds	r4, r7, #7
20003f24:	f000 f85a 	bl	20003fdc <ascii_read_controller>
20003f28:	0003      	movs	r3, r0
20003f2a:	7023      	strb	r3, [r4, #0]
	//sÃƒÂ¤tt Port E bit15-8 som utgÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20003f2c:	4b08      	ldr	r3, [pc, #32]	; (20003f50 <ascii_read_status+0x4c>)
20003f2e:	4a08      	ldr	r2, [pc, #32]	; (20003f50 <ascii_read_status+0x4c>)
20003f30:	6812      	ldr	r2, [r2, #0]
20003f32:	0412      	lsls	r2, r2, #16
20003f34:	0c12      	lsrs	r2, r2, #16
20003f36:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
20003f38:	4b05      	ldr	r3, [pc, #20]	; (20003f50 <ascii_read_status+0x4c>)
20003f3a:	4a05      	ldr	r2, [pc, #20]	; (20003f50 <ascii_read_status+0x4c>)
20003f3c:	6812      	ldr	r2, [r2, #0]
20003f3e:	4905      	ldr	r1, [pc, #20]	; (20003f54 <ascii_read_status+0x50>)
20003f40:	430a      	orrs	r2, r1
20003f42:	601a      	str	r2, [r3, #0]
	return rv;
20003f44:	1dfb      	adds	r3, r7, #7
20003f46:	781b      	ldrb	r3, [r3, #0]
}
20003f48:	0018      	movs	r0, r3
20003f4a:	46bd      	mov	sp, r7
20003f4c:	b003      	add	sp, #12
20003f4e:	bd90      	pop	{r4, r7, pc}
20003f50:	40021000 	andmi	r1, r2, r0
20003f54:	55550000 	ldrbpl	r0, [r5, #-0]

20003f58 <ascii_read_data>:

unsigned char ascii_read_data(void){
20003f58:	b590      	push	{r4, r7, lr}
20003f5a:	b083      	sub	sp, #12
20003f5c:	af00      	add	r7, sp, #0
	//sÃƒÂ¤tt Port E bit15-8 som ingÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20003f5e:	4b11      	ldr	r3, [pc, #68]	; (20003fa4 <ascii_read_data+0x4c>)
20003f60:	4a10      	ldr	r2, [pc, #64]	; (20003fa4 <ascii_read_data+0x4c>)
20003f62:	6812      	ldr	r2, [r2, #0]
20003f64:	0412      	lsls	r2, r2, #16
20003f66:	0c12      	lsrs	r2, r2, #16
20003f68:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20003f6a:	2001      	movs	r0, #1
20003f6c:	f7ff ff56 	bl	20003e1c <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20003f70:	2002      	movs	r0, #2
20003f72:	f7ff ff53 	bl	20003e1c <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20003f76:	1dfc      	adds	r4, r7, #7
20003f78:	f000 f830 	bl	20003fdc <ascii_read_controller>
20003f7c:	0003      	movs	r3, r0
20003f7e:	7023      	strb	r3, [r4, #0]
	//sÃƒÂ¤tt Port E bit15-8 som utgÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20003f80:	4b08      	ldr	r3, [pc, #32]	; (20003fa4 <ascii_read_data+0x4c>)
20003f82:	4a08      	ldr	r2, [pc, #32]	; (20003fa4 <ascii_read_data+0x4c>)
20003f84:	6812      	ldr	r2, [r2, #0]
20003f86:	0412      	lsls	r2, r2, #16
20003f88:	0c12      	lsrs	r2, r2, #16
20003f8a:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
20003f8c:	4b05      	ldr	r3, [pc, #20]	; (20003fa4 <ascii_read_data+0x4c>)
20003f8e:	4a05      	ldr	r2, [pc, #20]	; (20003fa4 <ascii_read_data+0x4c>)
20003f90:	6812      	ldr	r2, [r2, #0]
20003f92:	4905      	ldr	r1, [pc, #20]	; (20003fa8 <ascii_read_data+0x50>)
20003f94:	430a      	orrs	r2, r1
20003f96:	601a      	str	r2, [r3, #0]
	return rv;
20003f98:	1dfb      	adds	r3, r7, #7
20003f9a:	781b      	ldrb	r3, [r3, #0]
}
20003f9c:	0018      	movs	r0, r3
20003f9e:	46bd      	mov	sp, r7
20003fa0:	b003      	add	sp, #12
20003fa2:	bd90      	pop	{r4, r7, pc}
20003fa4:	40021000 	andmi	r1, r2, r0
20003fa8:	55550000 	ldrbpl	r0, [r5, #-0]

20003fac <ascii_write_controller>:

void ascii_write_controller(unsigned char c){
20003fac:	b580      	push	{r7, lr}
20003fae:	b082      	sub	sp, #8
20003fb0:	af00      	add	r7, sp, #0
20003fb2:	0002      	movs	r2, r0
20003fb4:	1dfb      	adds	r3, r7, #7
20003fb6:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
20003fb8:	2040      	movs	r0, #64	; 0x40
20003fba:	f7ff ff2f 	bl	20003e1c <ascii_ctrl_bit_set>
	*portOdrHigh = c;
20003fbe:	4a06      	ldr	r2, [pc, #24]	; (20003fd8 <ascii_write_controller+0x2c>)
20003fc0:	1dfb      	adds	r3, r7, #7
20003fc2:	781b      	ldrb	r3, [r3, #0]
20003fc4:	7013      	strb	r3, [r2, #0]
	delay_250ns();
20003fc6:	f7fe ffa9 	bl	20002f1c <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
20003fca:	2040      	movs	r0, #64	; 0x40
20003fcc:	f7ff ff48 	bl	20003e60 <ascii_ctrl_bit_clear>
}
20003fd0:	46c0      	nop			; (mov r8, r8)
20003fd2:	46bd      	mov	sp, r7
20003fd4:	b002      	add	sp, #8
20003fd6:	bd80      	pop	{r7, pc}
20003fd8:	40021015 	andmi	r1, r2, r5, lsl r0

20003fdc <ascii_read_controller>:

unsigned char ascii_read_controller(void){
20003fdc:	b580      	push	{r7, lr}
20003fde:	b082      	sub	sp, #8
20003fe0:	af00      	add	r7, sp, #0
	unsigned char c;
	ascii_ctrl_bit_set(B_E);
20003fe2:	2040      	movs	r0, #64	; 0x40
20003fe4:	f7ff ff1a 	bl	20003e1c <ascii_ctrl_bit_set>
	delay_250ns();
20003fe8:	f7fe ff98 	bl	20002f1c <delay_250ns>
	delay_250ns();
20003fec:	f7fe ff96 	bl	20002f1c <delay_250ns>
	c = *portIdrHigh;
20003ff0:	4a06      	ldr	r2, [pc, #24]	; (2000400c <ascii_read_controller+0x30>)
20003ff2:	1dfb      	adds	r3, r7, #7
20003ff4:	7812      	ldrb	r2, [r2, #0]
20003ff6:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20003ff8:	2040      	movs	r0, #64	; 0x40
20003ffa:	f7ff ff31 	bl	20003e60 <ascii_ctrl_bit_clear>
	return c;
20003ffe:	1dfb      	adds	r3, r7, #7
20004000:	781b      	ldrb	r3, [r3, #0]
}
20004002:	0018      	movs	r0, r3
20004004:	46bd      	mov	sp, r7
20004006:	b002      	add	sp, #8
20004008:	bd80      	pop	{r7, pc}
2000400a:	46c0      	nop			; (mov r8, r8)
2000400c:	40021011 	andmi	r1, r2, r1, lsl r0

20004010 <ascii_write_char>:

void ascii_write_char(unsigned char c){
20004010:	b580      	push	{r7, lr}
20004012:	b082      	sub	sp, #8
20004014:	af00      	add	r7, sp, #0
20004016:	0002      	movs	r2, r0
20004018:	1dfb      	adds	r3, r7, #7
2000401a:	701a      	strb	r2, [r3, #0]
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
2000401c:	46c0      	nop			; (mov r8, r8)
2000401e:	f7ff ff71 	bl	20003f04 <ascii_read_status>
20004022:	0003      	movs	r3, r0
20004024:	001a      	movs	r2, r3
20004026:	2380      	movs	r3, #128	; 0x80
20004028:	4013      	ands	r3, r2
2000402a:	2b80      	cmp	r3, #128	; 0x80
2000402c:	d0f7      	beq.n	2000401e <ascii_write_char+0xe>
		delay_micro(8); //latenstid
2000402e:	2008      	movs	r0, #8
20004030:	f7fe ffb8 	bl	20002fa4 <delay_micro>
		ascii_write_data(c);
20004034:	1dfb      	adds	r3, r7, #7
20004036:	781b      	ldrb	r3, [r3, #0]
20004038:	0018      	movs	r0, r3
2000403a:	f7ff ff4e 	bl	20003eda <ascii_write_data>
		delay_micro(50); //istÃƒÂ¤llet fÃƒÂ¶r 43us
2000403e:	2032      	movs	r0, #50	; 0x32
20004040:	f7fe ffb0 	bl	20002fa4 <delay_micro>
}
20004044:	46c0      	nop			; (mov r8, r8)
20004046:	46bd      	mov	sp, r7
20004048:	b002      	add	sp, #8
2000404a:	bd80      	pop	{r7, pc}

2000404c <ascii_goToXY>:

void ascii_goToXY(unsigned char row, unsigned char column){
2000404c:	b580      	push	{r7, lr}
2000404e:	b084      	sub	sp, #16
20004050:	af00      	add	r7, sp, #0
20004052:	0002      	movs	r2, r0
20004054:	1dfb      	adds	r3, r7, #7
20004056:	701a      	strb	r2, [r3, #0]
20004058:	1dbb      	adds	r3, r7, #6
2000405a:	1c0a      	adds	r2, r1, #0
2000405c:	701a      	strb	r2, [r3, #0]
	unsigned char address = row-1;
2000405e:	230f      	movs	r3, #15
20004060:	18fb      	adds	r3, r7, r3
20004062:	1dfa      	adds	r2, r7, #7
20004064:	7812      	ldrb	r2, [r2, #0]
20004066:	3a01      	subs	r2, #1
20004068:	701a      	strb	r2, [r3, #0]
	if(column == 2){
2000406a:	1dbb      	adds	r3, r7, #6
2000406c:	781b      	ldrb	r3, [r3, #0]
2000406e:	2b02      	cmp	r3, #2
20004070:	d106      	bne.n	20004080 <ascii_goToXY+0x34>
		address += 0x40;
20004072:	230f      	movs	r3, #15
20004074:	18fb      	adds	r3, r7, r3
20004076:	220f      	movs	r2, #15
20004078:	18ba      	adds	r2, r7, r2
2000407a:	7812      	ldrb	r2, [r2, #0]
2000407c:	3240      	adds	r2, #64	; 0x40
2000407e:	701a      	strb	r2, [r3, #0]
	}
	ascii_write_cmd(0x80 | address);
20004080:	230f      	movs	r3, #15
20004082:	18fb      	adds	r3, r7, r3
20004084:	781b      	ldrb	r3, [r3, #0]
20004086:	2280      	movs	r2, #128	; 0x80
20004088:	4252      	negs	r2, r2
2000408a:	4313      	orrs	r3, r2
2000408c:	b2db      	uxtb	r3, r3
2000408e:	0018      	movs	r0, r3
20004090:	f7ff ff0e 	bl	20003eb0 <ascii_write_cmd>
}
20004094:	46c0      	nop			; (mov r8, r8)
20004096:	46bd      	mov	sp, r7
20004098:	b004      	add	sp, #16
2000409a:	bd80      	pop	{r7, pc}

2000409c <ascii_init>:

void ascii_init(void){
2000409c:	b580      	push	{r7, lr}
2000409e:	af00      	add	r7, sp, #0
	//initiera displayen:
		while((ascii_read_status() & 0x80) == 0x80){} //VÃ¤nta tills displayed Ã¤r redo
200040a0:	46c0      	nop			; (mov r8, r8)
200040a2:	f7ff ff2f 	bl	20003f04 <ascii_read_status>
200040a6:	0003      	movs	r3, r0
200040a8:	001a      	movs	r2, r3
200040aa:	2380      	movs	r3, #128	; 0x80
200040ac:	4013      	ands	r3, r2
200040ae:	2b80      	cmp	r3, #128	; 0x80
200040b0:	d0f7      	beq.n	200040a2 <ascii_init+0x6>
		delay_micro(20); //latenstid 
200040b2:	2014      	movs	r0, #20
200040b4:	f7fe ff76 	bl	20002fa4 <delay_micro>
		ascii_write_cmd(0x38); //Function set (39us), 000011NFXX, N = antal rader = 2, F = -->0=5x8<--, 1=5x11
200040b8:	2038      	movs	r0, #56	; 0x38
200040ba:	f7ff fef9 	bl	20003eb0 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
200040be:	2064      	movs	r0, #100	; 0x64
200040c0:	f7fe ff70 	bl	20002fa4 <delay_micro>
		
	// clear display
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
200040c4:	46c0      	nop			; (mov r8, r8)
200040c6:	f7ff ff1d 	bl	20003f04 <ascii_read_status>
200040ca:	0003      	movs	r3, r0
200040cc:	001a      	movs	r2, r3
200040ce:	2380      	movs	r3, #128	; 0x80
200040d0:	4013      	ands	r3, r2
200040d2:	2b80      	cmp	r3, #128	; 0x80
200040d4:	d0f7      	beq.n	200040c6 <ascii_init+0x2a>
		delay_micro(20); //latenstid
200040d6:	2014      	movs	r0, #20
200040d8:	f7fe ff64 	bl	20002fa4 <delay_micro>
		ascii_write_cmd(0x01); 
200040dc:	2001      	movs	r0, #1
200040de:	f7ff fee7 	bl	20003eb0 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
200040e2:	2064      	movs	r0, #100	; 0x64
200040e4:	f7fe ff5e 	bl	20002fa4 <delay_micro>

	//display control:
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
200040e8:	46c0      	nop			; (mov r8, r8)
200040ea:	f7ff ff0b 	bl	20003f04 <ascii_read_status>
200040ee:	0003      	movs	r3, r0
200040f0:	001a      	movs	r2, r3
200040f2:	2380      	movs	r3, #128	; 0x80
200040f4:	4013      	ands	r3, r2
200040f6:	2b80      	cmp	r3, #128	; 0x80
200040f8:	d0f7      	beq.n	200040ea <ascii_init+0x4e>
		delay_micro(20); //latenstid
200040fa:	2014      	movs	r0, #20
200040fc:	f7fe ff52 	bl	20002fa4 <delay_micro>
		ascii_write_cmd(0x0C); //000001 + XXX. X:ena = 0:av / 1:pÃƒÂ¥ -  SkÃƒÂ¤rm/MarkÃƒÂ¶r/BlinkaMarkÃƒÂ¶ren
20004100:	200c      	movs	r0, #12
20004102:	f7ff fed5 	bl	20003eb0 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20004106:	2064      	movs	r0, #100	; 0x64
20004108:	f7fe ff4c 	bl	20002fa4 <delay_micro>
		
	// entry mode set
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
2000410c:	46c0      	nop			; (mov r8, r8)
2000410e:	f7ff fef9 	bl	20003f04 <ascii_read_status>
20004112:	0003      	movs	r3, r0
20004114:	001a      	movs	r2, r3
20004116:	2380      	movs	r3, #128	; 0x80
20004118:	4013      	ands	r3, r2
2000411a:	2b80      	cmp	r3, #128	; 0x80
2000411c:	d0f7      	beq.n	2000410e <ascii_init+0x72>
		delay_micro(20); //latenstid
2000411e:	2014      	movs	r0, #20
20004120:	f7fe ff40 	bl	20002fa4 <delay_micro>
		ascii_write_cmd(0x06); //00000001 + XY. X=0: markÃƒÂ¶ren vÃƒÂ¤nst. || X=1: marÃƒÂ¶kren hÃƒÂ¶g. - Y=0: skift av || Y=1: skift pÃƒÂ¥
20004124:	2006      	movs	r0, #6
20004126:	f7ff fec3 	bl	20003eb0 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
2000412a:	2064      	movs	r0, #100	; 0x64
2000412c:	f7fe ff3a 	bl	20002fa4 <delay_micro>
		
		
}
20004130:	46c0      	nop			; (mov r8, r8)
20004132:	46bd      	mov	sp, r7
20004134:	bd80      	pop	{r7, pc}

20004136 <init_application>:

void init_application(void){
20004136:	b580      	push	{r7, lr}
20004138:	af00      	add	r7, sp, #0
	#ifdef USBDM
		*((unsigned long *) 0x40023830) = 0x18; //startar klockor pÃ¥ port D och E
		//__asm volatile ("LDR R0, =0x08000209\n BLX R0 \n"); //initiera PLL
	#endif
	//"initierar Port E med anvÃƒÂ¤ndning med LCD-modulen, dvs. sÃƒÂ¥vÃƒÂ¤l port E0-7 som E8-15 sÃƒÂ¤tts till utgÃƒÂ¥ngar
	* portModer = 0x55555555;
2000413a:	4b03      	ldr	r3, [pc, #12]	; (20004148 <init_application+0x12>)
2000413c:	4a03      	ldr	r2, [pc, #12]	; (2000414c <init_application+0x16>)
2000413e:	601a      	str	r2, [r3, #0]
}
20004140:	46c0      	nop			; (mov r8, r8)
20004142:	46bd      	mov	sp, r7
20004144:	bd80      	pop	{r7, pc}
20004146:	46c0      	nop			; (mov r8, r8)
20004148:	40021000 	andmi	r1, r2, r0
2000414c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20004150 <set_up_ascii>:

void set_up_ascii( void ) {
20004150:	b580      	push	{r7, lr}
20004152:	af00      	add	r7, sp, #0
	init_application();
20004154:	f7ff ffef 	bl	20004136 <init_application>
	ascii_init();
20004158:	f7ff ffa0 	bl	2000409c <ascii_init>
}
2000415c:	46c0      	nop			; (mov r8, r8)
2000415e:	46bd      	mov	sp, r7
20004160:	bd80      	pop	{r7, pc}

20004162 <clear_ascii>:

void clear_ascii( void ) {
20004162:	b590      	push	{r4, r7, lr}
20004164:	b089      	sub	sp, #36	; 0x24
20004166:	af00      	add	r7, sp, #0
	char *s;
	char clear[] = "                    ";
20004168:	1d3b      	adds	r3, r7, #4
2000416a:	4a17      	ldr	r2, [pc, #92]	; (200041c8 <clear_ascii+0x66>)
2000416c:	ca13      	ldmia	r2!, {r0, r1, r4}
2000416e:	c313      	stmia	r3!, {r0, r1, r4}
20004170:	ca03      	ldmia	r2!, {r0, r1}
20004172:	c303      	stmia	r3!, {r0, r1}
20004174:	7812      	ldrb	r2, [r2, #0]
20004176:	701a      	strb	r2, [r3, #0]
	
	s = clear;
20004178:	1d3b      	adds	r3, r7, #4
2000417a:	61fb      	str	r3, [r7, #28]
	ascii_goToXY(1,1);
2000417c:	2101      	movs	r1, #1
2000417e:	2001      	movs	r0, #1
20004180:	f7ff ff64 	bl	2000404c <ascii_goToXY>
	while(*s){
20004184:	e006      	b.n	20004194 <clear_ascii+0x32>
		ascii_write_char(*s++);
20004186:	69fb      	ldr	r3, [r7, #28]
20004188:	1c5a      	adds	r2, r3, #1
2000418a:	61fa      	str	r2, [r7, #28]
2000418c:	781b      	ldrb	r3, [r3, #0]
2000418e:	0018      	movs	r0, r3
20004190:	f7ff ff3e 	bl	20004010 <ascii_write_char>
	while(*s){
20004194:	69fb      	ldr	r3, [r7, #28]
20004196:	781b      	ldrb	r3, [r3, #0]
20004198:	2b00      	cmp	r3, #0
2000419a:	d1f4      	bne.n	20004186 <clear_ascii+0x24>
	}
	s = clear;
2000419c:	1d3b      	adds	r3, r7, #4
2000419e:	61fb      	str	r3, [r7, #28]
	ascii_goToXY(1,2);
200041a0:	2102      	movs	r1, #2
200041a2:	2001      	movs	r0, #1
200041a4:	f7ff ff52 	bl	2000404c <ascii_goToXY>
	while(*s){
200041a8:	e006      	b.n	200041b8 <clear_ascii+0x56>
		ascii_write_char(*s++);
200041aa:	69fb      	ldr	r3, [r7, #28]
200041ac:	1c5a      	adds	r2, r3, #1
200041ae:	61fa      	str	r2, [r7, #28]
200041b0:	781b      	ldrb	r3, [r3, #0]
200041b2:	0018      	movs	r0, r3
200041b4:	f7ff ff2c 	bl	20004010 <ascii_write_char>
	while(*s){
200041b8:	69fb      	ldr	r3, [r7, #28]
200041ba:	781b      	ldrb	r3, [r3, #0]
200041bc:	2b00      	cmp	r3, #0
200041be:	d1f4      	bne.n	200041aa <clear_ascii+0x48>
	}
}
200041c0:	46c0      	nop			; (mov r8, r8)
200041c2:	46bd      	mov	sp, r7
200041c4:	b009      	add	sp, #36	; 0x24
200041c6:	bd90      	pop	{r4, r7, pc}
200041c8:	2000f7b0 			; <UNDEFINED> instruction: 0x2000f7b0

200041cc <ascii_write>:

void ascii_write(char *row1, char *row2) {
200041cc:	b580      	push	{r7, lr}
200041ce:	b082      	sub	sp, #8
200041d0:	af00      	add	r7, sp, #0
200041d2:	6078      	str	r0, [r7, #4]
200041d4:	6039      	str	r1, [r7, #0]
	clear_ascii();
200041d6:	f7ff ffc4 	bl	20004162 <clear_ascii>
	
	ascii_goToXY(1,1);
200041da:	2101      	movs	r1, #1
200041dc:	2001      	movs	r0, #1
200041de:	f7ff ff35 	bl	2000404c <ascii_goToXY>
	while(*row1){
200041e2:	e006      	b.n	200041f2 <ascii_write+0x26>
		ascii_write_char(*row1++);
200041e4:	687b      	ldr	r3, [r7, #4]
200041e6:	1c5a      	adds	r2, r3, #1
200041e8:	607a      	str	r2, [r7, #4]
200041ea:	781b      	ldrb	r3, [r3, #0]
200041ec:	0018      	movs	r0, r3
200041ee:	f7ff ff0f 	bl	20004010 <ascii_write_char>
	while(*row1){
200041f2:	687b      	ldr	r3, [r7, #4]
200041f4:	781b      	ldrb	r3, [r3, #0]
200041f6:	2b00      	cmp	r3, #0
200041f8:	d1f4      	bne.n	200041e4 <ascii_write+0x18>
	}	
	ascii_goToXY(1,2);
200041fa:	2102      	movs	r1, #2
200041fc:	2001      	movs	r0, #1
200041fe:	f7ff ff25 	bl	2000404c <ascii_goToXY>
	while(*row2){
20004202:	e006      	b.n	20004212 <ascii_write+0x46>
		ascii_write_char(*row2++);
20004204:	683b      	ldr	r3, [r7, #0]
20004206:	1c5a      	adds	r2, r3, #1
20004208:	603a      	str	r2, [r7, #0]
2000420a:	781b      	ldrb	r3, [r3, #0]
2000420c:	0018      	movs	r0, r3
2000420e:	f7ff feff 	bl	20004010 <ascii_write_char>
	while(*row2){
20004212:	683b      	ldr	r3, [r7, #0]
20004214:	781b      	ldrb	r3, [r3, #0]
20004216:	2b00      	cmp	r3, #0
20004218:	d1f4      	bne.n	20004204 <ascii_write+0x38>
	}
	
	ascii_goToXY(21,1);
2000421a:	2101      	movs	r1, #1
2000421c:	2015      	movs	r0, #21
2000421e:	f7ff ff15 	bl	2000404c <ascii_goToXY>
}
20004222:	46c0      	nop			; (mov r8, r8)
20004224:	46bd      	mov	sp, r7
20004226:	b002      	add	sp, #8
20004228:	bd80      	pop	{r7, pc}

2000422a <ascii_write_part>:

void ascii_write_part(char *row1, char *row2, int limit1, int limit2) {
2000422a:	b580      	push	{r7, lr}
2000422c:	b086      	sub	sp, #24
2000422e:	af00      	add	r7, sp, #0
20004230:	60f8      	str	r0, [r7, #12]
20004232:	60b9      	str	r1, [r7, #8]
20004234:	607a      	str	r2, [r7, #4]
20004236:	603b      	str	r3, [r7, #0]
	clear_ascii();
20004238:	f7ff ff93 	bl	20004162 <clear_ascii>
	
	ascii_goToXY(1,1);
2000423c:	2101      	movs	r1, #1
2000423e:	2001      	movs	r0, #1
20004240:	f7ff ff04 	bl	2000404c <ascii_goToXY>
	int i = 0;
20004244:	2300      	movs	r3, #0
20004246:	617b      	str	r3, [r7, #20]
	if(limit1 > 0) {
20004248:	687b      	ldr	r3, [r7, #4]
2000424a:	2b00      	cmp	r3, #0
2000424c:	dd11      	ble.n	20004272 <ascii_write_part+0x48>
		while(*row1 && (i++ < limit1)){
2000424e:	e006      	b.n	2000425e <ascii_write_part+0x34>
			ascii_write_char(*row1++);
20004250:	68fb      	ldr	r3, [r7, #12]
20004252:	1c5a      	adds	r2, r3, #1
20004254:	60fa      	str	r2, [r7, #12]
20004256:	781b      	ldrb	r3, [r3, #0]
20004258:	0018      	movs	r0, r3
2000425a:	f7ff fed9 	bl	20004010 <ascii_write_char>
		while(*row1 && (i++ < limit1)){
2000425e:	68fb      	ldr	r3, [r7, #12]
20004260:	781b      	ldrb	r3, [r3, #0]
20004262:	2b00      	cmp	r3, #0
20004264:	d005      	beq.n	20004272 <ascii_write_part+0x48>
20004266:	697b      	ldr	r3, [r7, #20]
20004268:	1c5a      	adds	r2, r3, #1
2000426a:	617a      	str	r2, [r7, #20]
2000426c:	687a      	ldr	r2, [r7, #4]
2000426e:	4293      	cmp	r3, r2
20004270:	dbee      	blt.n	20004250 <ascii_write_part+0x26>
		}			
	}

	ascii_goToXY(1,2);
20004272:	2102      	movs	r1, #2
20004274:	2001      	movs	r0, #1
20004276:	f7ff fee9 	bl	2000404c <ascii_goToXY>
	i = 0;
2000427a:	2300      	movs	r3, #0
2000427c:	617b      	str	r3, [r7, #20]
	if(limit2 > 0) {
2000427e:	683b      	ldr	r3, [r7, #0]
20004280:	2b00      	cmp	r3, #0
20004282:	dd11      	ble.n	200042a8 <ascii_write_part+0x7e>
		while(*row2 && (i++ < limit2)){
20004284:	e006      	b.n	20004294 <ascii_write_part+0x6a>
			ascii_write_char(*row2++);
20004286:	68bb      	ldr	r3, [r7, #8]
20004288:	1c5a      	adds	r2, r3, #1
2000428a:	60ba      	str	r2, [r7, #8]
2000428c:	781b      	ldrb	r3, [r3, #0]
2000428e:	0018      	movs	r0, r3
20004290:	f7ff febe 	bl	20004010 <ascii_write_char>
		while(*row2 && (i++ < limit2)){
20004294:	68bb      	ldr	r3, [r7, #8]
20004296:	781b      	ldrb	r3, [r3, #0]
20004298:	2b00      	cmp	r3, #0
2000429a:	d005      	beq.n	200042a8 <ascii_write_part+0x7e>
2000429c:	697b      	ldr	r3, [r7, #20]
2000429e:	1c5a      	adds	r2, r3, #1
200042a0:	617a      	str	r2, [r7, #20]
200042a2:	683a      	ldr	r2, [r7, #0]
200042a4:	4293      	cmp	r3, r2
200042a6:	dbee      	blt.n	20004286 <ascii_write_part+0x5c>
		}
	}
	
	ascii_goToXY(21,1);
200042a8:	2101      	movs	r1, #1
200042aa:	2015      	movs	r0, #21
200042ac:	f7ff fece 	bl	2000404c <ascii_goToXY>
}
200042b0:	46c0      	nop			; (mov r8, r8)
200042b2:	46bd      	mov	sp, r7
200042b4:	b006      	add	sp, #24
200042b6:	bd80      	pop	{r7, pc}

200042b8 <ascii_test>:



void ascii_test(void) {
200042b8:	b590      	push	{r4, r7, lr}
200042ba:	b08b      	sub	sp, #44	; 0x2c
200042bc:	af00      	add	r7, sp, #0
	char *s;
	char test1[] = "Alfanumerisk";
200042be:	2314      	movs	r3, #20
200042c0:	18fb      	adds	r3, r7, r3
200042c2:	4a1c      	ldr	r2, [pc, #112]	; (20004334 <ascii_test+0x7c>)
200042c4:	ca13      	ldmia	r2!, {r0, r1, r4}
200042c6:	c313      	stmia	r3!, {r0, r1, r4}
200042c8:	7812      	ldrb	r2, [r2, #0]
200042ca:	701a      	strb	r2, [r3, #0]
	char test2[] = "hardåäöare suger";
200042cc:	003b      	movs	r3, r7
200042ce:	4a1a      	ldr	r2, [pc, #104]	; (20004338 <ascii_test+0x80>)
200042d0:	ca13      	ldmia	r2!, {r0, r1, r4}
200042d2:	c313      	stmia	r3!, {r0, r1, r4}
200042d4:	ca03      	ldmia	r2!, {r0, r1}
200042d6:	c303      	stmia	r3!, {r0, r1}
	
	init_application();
200042d8:	f7ff ff2d 	bl	20004136 <init_application>
	ascii_init();
200042dc:	f7ff fede 	bl	2000409c <ascii_init>
	ascii_goToXY(1,1);
200042e0:	2101      	movs	r1, #1
200042e2:	2001      	movs	r0, #1
200042e4:	f7ff feb2 	bl	2000404c <ascii_goToXY>
	s = test1;
200042e8:	2314      	movs	r3, #20
200042ea:	18fb      	adds	r3, r7, r3
200042ec:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
200042ee:	e006      	b.n	200042fe <ascii_test+0x46>
		ascii_write_char(*s++);
200042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200042f2:	1c5a      	adds	r2, r3, #1
200042f4:	627a      	str	r2, [r7, #36]	; 0x24
200042f6:	781b      	ldrb	r3, [r3, #0]
200042f8:	0018      	movs	r0, r3
200042fa:	f7ff fe89 	bl	20004010 <ascii_write_char>
	while(*s){
200042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20004300:	781b      	ldrb	r3, [r3, #0]
20004302:	2b00      	cmp	r3, #0
20004304:	d1f4      	bne.n	200042f0 <ascii_test+0x38>
	}
	ascii_goToXY(1,2);
20004306:	2102      	movs	r1, #2
20004308:	2001      	movs	r0, #1
2000430a:	f7ff fe9f 	bl	2000404c <ascii_goToXY>
	s = test2;
2000430e:	003b      	movs	r3, r7
20004310:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
20004312:	e006      	b.n	20004322 <ascii_test+0x6a>
		ascii_write_char(*s++);
20004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20004316:	1c5a      	adds	r2, r3, #1
20004318:	627a      	str	r2, [r7, #36]	; 0x24
2000431a:	781b      	ldrb	r3, [r3, #0]
2000431c:	0018      	movs	r0, r3
2000431e:	f7ff fe77 	bl	20004010 <ascii_write_char>
	while(*s){
20004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20004324:	781b      	ldrb	r3, [r3, #0]
20004326:	2b00      	cmp	r3, #0
20004328:	d1f4      	bne.n	20004314 <ascii_test+0x5c>
	}
	return 0;
2000432a:	46c0      	nop			; (mov r8, r8)
2000432c:	46bd      	mov	sp, r7
2000432e:	b00b      	add	sp, #44	; 0x2c
20004330:	bd90      	pop	{r4, r7, pc}
20004332:	46c0      	nop			; (mov r8, r8)
20004334:	2000f7c8 	andcs	pc, r0, r8, asr #15
20004338:	2000f7d8 	ldrdcs	pc, [r0], -r8

2000433c <display>:
#include "slow_text.h"
#include "ascii_display.h"

void display(SlowText *this, int length_of_row1) {
2000433c:	b580      	push	{r7, lr}
2000433e:	b084      	sub	sp, #16
20004340:	af00      	add	r7, sp, #0
20004342:	6078      	str	r0, [r7, #4]
20004344:	6039      	str	r1, [r7, #0]
	int limit1 = this->counter / this->speed;
20004346:	687b      	ldr	r3, [r7, #4]
20004348:	689a      	ldr	r2, [r3, #8]
2000434a:	687b      	ldr	r3, [r7, #4]
2000434c:	68db      	ldr	r3, [r3, #12]
2000434e:	0019      	movs	r1, r3
20004350:	0010      	movs	r0, r2
20004352:	f000 fa0d 	bl	20004770 <__divsi3>
20004356:	0003      	movs	r3, r0
20004358:	60fb      	str	r3, [r7, #12]
	int limit2 = this->counter / this->speed - length_of_row1;
2000435a:	687b      	ldr	r3, [r7, #4]
2000435c:	689a      	ldr	r2, [r3, #8]
2000435e:	687b      	ldr	r3, [r7, #4]
20004360:	68db      	ldr	r3, [r3, #12]
20004362:	0019      	movs	r1, r3
20004364:	0010      	movs	r0, r2
20004366:	f000 fa03 	bl	20004770 <__divsi3>
2000436a:	0003      	movs	r3, r0
2000436c:	001a      	movs	r2, r3
2000436e:	683b      	ldr	r3, [r7, #0]
20004370:	1ad3      	subs	r3, r2, r3
20004372:	60bb      	str	r3, [r7, #8]
	ascii_write_part(this->row1, this->row2, limit1, limit2);
20004374:	687b      	ldr	r3, [r7, #4]
20004376:	6818      	ldr	r0, [r3, #0]
20004378:	687b      	ldr	r3, [r7, #4]
2000437a:	6859      	ldr	r1, [r3, #4]
2000437c:	68bb      	ldr	r3, [r7, #8]
2000437e:	68fa      	ldr	r2, [r7, #12]
20004380:	f7ff ff53 	bl	2000422a <ascii_write_part>
	
	this->counter++;
20004384:	687b      	ldr	r3, [r7, #4]
20004386:	689b      	ldr	r3, [r3, #8]
20004388:	1c5a      	adds	r2, r3, #1
2000438a:	687b      	ldr	r3, [r7, #4]
2000438c:	609a      	str	r2, [r3, #8]
}
2000438e:	46c0      	nop			; (mov r8, r8)
20004390:	46bd      	mov	sp, r7
20004392:	b004      	add	sp, #16
20004394:	bd80      	pop	{r7, pc}

20004396 <init_slow_text>:

void init_slow_text(SlowText *obj, char *row1, char *row2, int speed) {
20004396:	b580      	push	{r7, lr}
20004398:	b084      	sub	sp, #16
2000439a:	af00      	add	r7, sp, #0
2000439c:	60f8      	str	r0, [r7, #12]
2000439e:	60b9      	str	r1, [r7, #8]
200043a0:	607a      	str	r2, [r7, #4]
200043a2:	603b      	str	r3, [r7, #0]
	obj->row1 = row1;
200043a4:	68fb      	ldr	r3, [r7, #12]
200043a6:	68ba      	ldr	r2, [r7, #8]
200043a8:	601a      	str	r2, [r3, #0]
	obj->row2 = row2;
200043aa:	68fb      	ldr	r3, [r7, #12]
200043ac:	687a      	ldr	r2, [r7, #4]
200043ae:	605a      	str	r2, [r3, #4]
	obj->speed = speed;
200043b0:	68fb      	ldr	r3, [r7, #12]
200043b2:	683a      	ldr	r2, [r7, #0]
200043b4:	60da      	str	r2, [r3, #12]
	obj->counter = 0;
200043b6:	68fb      	ldr	r3, [r7, #12]
200043b8:	2200      	movs	r2, #0
200043ba:	609a      	str	r2, [r3, #8]
	obj->display = display;
200043bc:	68fb      	ldr	r3, [r7, #12]
200043be:	4a03      	ldr	r2, [pc, #12]	; (200043cc <init_slow_text+0x36>)
200043c0:	611a      	str	r2, [r3, #16]
200043c2:	46c0      	nop			; (mov r8, r8)
200043c4:	46bd      	mov	sp, r7
200043c6:	b004      	add	sp, #16
200043c8:	bd80      	pop	{r7, pc}
200043ca:	46c0      	nop			; (mov r8, r8)
200043cc:	2000433d 	andcs	r4, r0, sp, lsr r3

200043d0 <initSprites>:


GameObject indoorsObj;
Image indoorsImage;
Image indoorsImages[1];
static void initSprites( void ) {	
200043d0:	b580      	push	{r7, lr}
200043d2:	b084      	sub	sp, #16
200043d4:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempIndoorsLight;
200043d6:	4b12      	ldr	r3, [pc, #72]	; (20004420 <initSprites+0x50>)
200043d8:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer11, indoors_light_bits, indoors_black_width, indoors_black_height);
200043da:	4912      	ldr	r1, [pc, #72]	; (20004424 <initSprites+0x54>)
200043dc:	68f8      	ldr	r0, [r7, #12]
200043de:	2340      	movs	r3, #64	; 0x40
200043e0:	2280      	movs	r2, #128	; 0x80
200043e2:	f7ff fcd1 	bl	20003d88 <load_sprite>
	indoorsLight = pointer11;
200043e6:	4b10      	ldr	r3, [pc, #64]	; (20004428 <initSprites+0x58>)
200043e8:	68fa      	ldr	r2, [r7, #12]
200043ea:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempIndoorsGray;
200043ec:	4b0f      	ldr	r3, [pc, #60]	; (2000442c <initSprites+0x5c>)
200043ee:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer12, indoors_gray_bits, indoors_black_width, indoors_black_height);
200043f0:	490f      	ldr	r1, [pc, #60]	; (20004430 <initSprites+0x60>)
200043f2:	68b8      	ldr	r0, [r7, #8]
200043f4:	2340      	movs	r3, #64	; 0x40
200043f6:	2280      	movs	r2, #128	; 0x80
200043f8:	f7ff fcc6 	bl	20003d88 <load_sprite>
	indoorsGray = pointer12;
200043fc:	4b0d      	ldr	r3, [pc, #52]	; (20004434 <initSprites+0x64>)
200043fe:	68ba      	ldr	r2, [r7, #8]
20004400:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempIndoorsBlack;
20004402:	4b0d      	ldr	r3, [pc, #52]	; (20004438 <initSprites+0x68>)
20004404:	607b      	str	r3, [r7, #4]
	load_sprite(pointer13, indoors_black_bits, indoors_black_width, indoors_black_height);
20004406:	490d      	ldr	r1, [pc, #52]	; (2000443c <initSprites+0x6c>)
20004408:	6878      	ldr	r0, [r7, #4]
2000440a:	2340      	movs	r3, #64	; 0x40
2000440c:	2280      	movs	r2, #128	; 0x80
2000440e:	f7ff fcbb 	bl	20003d88 <load_sprite>
	indoorsBlack = pointer13;	
20004412:	4b0b      	ldr	r3, [pc, #44]	; (20004440 <initSprites+0x70>)
20004414:	687a      	ldr	r2, [r7, #4]
20004416:	601a      	str	r2, [r3, #0]
	
}
20004418:	46c0      	nop			; (mov r8, r8)
2000441a:	46bd      	mov	sp, r7
2000441c:	b004      	add	sp, #16
2000441e:	bd80      	pop	{r7, pc}
20004420:	2000710c 	andcs	r7, r0, ip, lsl #2
20004424:	2000d844 	andcs	sp, r0, r4, asr #16
20004428:	20007168 	andcs	r7, r0, r8, ror #2
2000442c:	20007100 	andcs	r7, r0, r0, lsl #2
20004430:	2000d444 	andcs	sp, r0, r4, asr #8
20004434:	20007124 	andcs	r7, r0, r4, lsr #2
20004438:	20007118 	andcs	r7, r0, r8, lsl r1
2000443c:	2000d044 	andcs	sp, r0, r4, asr #32
20004440:	20007158 	andcs	r7, r0, r8, asr r1

20004444 <init_indoors>:
	
void init_indoors( GameObject *indoorsObj ) {
20004444:	b590      	push	{r4, r7, lr}
20004446:	b083      	sub	sp, #12
20004448:	af00      	add	r7, sp, #0
2000444a:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
2000444c:	4b14      	ldr	r3, [pc, #80]	; (200044a0 <init_indoors+0x5c>)
2000444e:	681b      	ldr	r3, [r3, #0]
20004450:	2b00      	cmp	r3, #0
20004452:	d011      	beq.n	20004478 <init_indoors+0x34>
		initSprites();
20004454:	f7ff ffbc 	bl	200043d0 <initSprites>
		firstTime = 0;			
20004458:	4b11      	ldr	r3, [pc, #68]	; (200044a0 <init_indoors+0x5c>)
2000445a:	2200      	movs	r2, #0
2000445c:	601a      	str	r2, [r3, #0]

		indoorsImages[0] = indoorsImage;
2000445e:	4b11      	ldr	r3, [pc, #68]	; (200044a4 <init_indoors+0x60>)
20004460:	4a11      	ldr	r2, [pc, #68]	; (200044a8 <init_indoors+0x64>)
20004462:	ca13      	ldmia	r2!, {r0, r1, r4}
20004464:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&indoorsImages[0], indoorsBlack, indoorsGray, indoorsLight);
20004466:	4b11      	ldr	r3, [pc, #68]	; (200044ac <init_indoors+0x68>)
20004468:	6819      	ldr	r1, [r3, #0]
2000446a:	4b11      	ldr	r3, [pc, #68]	; (200044b0 <init_indoors+0x6c>)
2000446c:	681a      	ldr	r2, [r3, #0]
2000446e:	4b11      	ldr	r3, [pc, #68]	; (200044b4 <init_indoors+0x70>)
20004470:	681b      	ldr	r3, [r3, #0]
20004472:	480c      	ldr	r0, [pc, #48]	; (200044a4 <init_indoors+0x60>)
20004474:	f7ff fc74 	bl	20003d60 <load_image>
	}
	
	indoorsObj->images = indoorsImages;
20004478:	687b      	ldr	r3, [r7, #4]
2000447a:	4a0a      	ldr	r2, [pc, #40]	; (200044a4 <init_indoors+0x60>)
2000447c:	601a      	str	r2, [r3, #0]

	indoorsObj->current_frame = 0;
2000447e:	687b      	ldr	r3, [r7, #4]
20004480:	2200      	movs	r2, #0
20004482:	615a      	str	r2, [r3, #20]
	indoorsObj->n_frames = 1;
20004484:	687b      	ldr	r3, [r7, #4]
20004486:	2201      	movs	r2, #1
20004488:	619a      	str	r2, [r3, #24]
	indoorsObj->animation_speed = 1;
2000448a:	687b      	ldr	r3, [r7, #4]
2000448c:	2201      	movs	r2, #1
2000448e:	61da      	str	r2, [r3, #28]
	indoorsObj->animation_counter = 0;
20004490:	687b      	ldr	r3, [r7, #4]
20004492:	2200      	movs	r2, #0
20004494:	621a      	str	r2, [r3, #32]
}
20004496:	46c0      	nop			; (mov r8, r8)
20004498:	46bd      	mov	sp, r7
2000449a:	b003      	add	sp, #12
2000449c:	bd90      	pop	{r4, r7, pc}
2000449e:	46c0      	nop			; (mov r8, r8)
200044a0:	2000dc44 	andcs	sp, r0, r4, asr #24
200044a4:	2000714c 	andcs	r7, r0, ip, asr #2
200044a8:	2000715c 	andcs	r7, r0, ip, asr r1
200044ac:	20007158 	andcs	r7, r0, r8, asr r1
200044b0:	20007124 	andcs	r7, r0, r4, lsr #2
200044b4:	20007168 	andcs	r7, r0, r8, ror #2

200044b8 <initSprites>:


GameObject indoors2Obj;
Image indoors2Image;
Image indoors2Images[1];
static void initSprites( void ) {	
200044b8:	b580      	push	{r7, lr}
200044ba:	b084      	sub	sp, #16
200044bc:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempIndoors2Light;
200044be:	4b12      	ldr	r3, [pc, #72]	; (20004508 <initSprites+0x50>)
200044c0:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer11, indoors2_light_bits, indoors2_black_width, indoors2_black_height);
200044c2:	4912      	ldr	r1, [pc, #72]	; (2000450c <initSprites+0x54>)
200044c4:	68f8      	ldr	r0, [r7, #12]
200044c6:	2340      	movs	r3, #64	; 0x40
200044c8:	2280      	movs	r2, #128	; 0x80
200044ca:	f7ff fc5d 	bl	20003d88 <load_sprite>
	indoors2Light = pointer11;
200044ce:	4b10      	ldr	r3, [pc, #64]	; (20004510 <initSprites+0x58>)
200044d0:	68fa      	ldr	r2, [r7, #12]
200044d2:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempIndoors2Gray;
200044d4:	4b0f      	ldr	r3, [pc, #60]	; (20004514 <initSprites+0x5c>)
200044d6:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer12, indoors2_gray_bits, indoors2_black_width, indoors2_black_height);
200044d8:	490f      	ldr	r1, [pc, #60]	; (20004518 <initSprites+0x60>)
200044da:	68b8      	ldr	r0, [r7, #8]
200044dc:	2340      	movs	r3, #64	; 0x40
200044de:	2280      	movs	r2, #128	; 0x80
200044e0:	f7ff fc52 	bl	20003d88 <load_sprite>
	indoors2Gray = pointer12;
200044e4:	4b0d      	ldr	r3, [pc, #52]	; (2000451c <initSprites+0x64>)
200044e6:	68ba      	ldr	r2, [r7, #8]
200044e8:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempIndoors2Black;
200044ea:	4b0d      	ldr	r3, [pc, #52]	; (20004520 <initSprites+0x68>)
200044ec:	607b      	str	r3, [r7, #4]
	load_sprite(pointer13, indoors2_black_bits, indoors2_black_width, indoors2_black_height);
200044ee:	490d      	ldr	r1, [pc, #52]	; (20004524 <initSprites+0x6c>)
200044f0:	6878      	ldr	r0, [r7, #4]
200044f2:	2340      	movs	r3, #64	; 0x40
200044f4:	2280      	movs	r2, #128	; 0x80
200044f6:	f7ff fc47 	bl	20003d88 <load_sprite>
	indoors2Black = pointer13;	
200044fa:	4b0b      	ldr	r3, [pc, #44]	; (20004528 <initSprites+0x70>)
200044fc:	687a      	ldr	r2, [r7, #4]
200044fe:	601a      	str	r2, [r3, #0]
	
}
20004500:	46c0      	nop			; (mov r8, r8)
20004502:	46bd      	mov	sp, r7
20004504:	b004      	add	sp, #16
20004506:	bd80      	pop	{r7, pc}
20004508:	200071c8 	andcs	r7, r0, r8, asr #3
2000450c:	2000e448 	andcs	lr, r0, r8, asr #8
20004510:	200071b8 			; <UNDEFINED> instruction: 0x200071b8
20004514:	200071ac 	andcs	r7, r0, ip, lsr #3
20004518:	2000e048 	andcs	lr, r0, r8, asr #32
2000451c:	20007190 	mulcs	r0, r0, r1
20004520:	200071bc 			; <UNDEFINED> instruction: 0x200071bc
20004524:	2000dc48 	andcs	sp, r0, r8, asr #24
20004528:	200071d4 	ldrdcs	r7, [r0], -r4

2000452c <init_indoors2>:
	
void init_indoors2( GameObject *indoors2Obj ) {
2000452c:	b590      	push	{r4, r7, lr}
2000452e:	b083      	sub	sp, #12
20004530:	af00      	add	r7, sp, #0
20004532:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20004534:	4b14      	ldr	r3, [pc, #80]	; (20004588 <init_indoors2+0x5c>)
20004536:	681b      	ldr	r3, [r3, #0]
20004538:	2b00      	cmp	r3, #0
2000453a:	d011      	beq.n	20004560 <init_indoors2+0x34>
		initSprites();
2000453c:	f7ff ffbc 	bl	200044b8 <initSprites>
		firstTime = 0;			
20004540:	4b11      	ldr	r3, [pc, #68]	; (20004588 <init_indoors2+0x5c>)
20004542:	2200      	movs	r2, #0
20004544:	601a      	str	r2, [r3, #0]

		indoors2Images[0] = indoors2Image;
20004546:	4b11      	ldr	r3, [pc, #68]	; (2000458c <init_indoors2+0x60>)
20004548:	4a11      	ldr	r2, [pc, #68]	; (20004590 <init_indoors2+0x64>)
2000454a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000454c:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&indoors2Images[0], indoors2Black, indoors2Gray, indoors2Light);
2000454e:	4b11      	ldr	r3, [pc, #68]	; (20004594 <init_indoors2+0x68>)
20004550:	6819      	ldr	r1, [r3, #0]
20004552:	4b11      	ldr	r3, [pc, #68]	; (20004598 <init_indoors2+0x6c>)
20004554:	681a      	ldr	r2, [r3, #0]
20004556:	4b11      	ldr	r3, [pc, #68]	; (2000459c <init_indoors2+0x70>)
20004558:	681b      	ldr	r3, [r3, #0]
2000455a:	480c      	ldr	r0, [pc, #48]	; (2000458c <init_indoors2+0x60>)
2000455c:	f7ff fc00 	bl	20003d60 <load_image>
	}
	
	indoors2Obj->images = indoors2Images;
20004560:	687b      	ldr	r3, [r7, #4]
20004562:	4a0a      	ldr	r2, [pc, #40]	; (2000458c <init_indoors2+0x60>)
20004564:	601a      	str	r2, [r3, #0]

	indoors2Obj->current_frame = 0;
20004566:	687b      	ldr	r3, [r7, #4]
20004568:	2200      	movs	r2, #0
2000456a:	615a      	str	r2, [r3, #20]
	indoors2Obj->n_frames = 1;
2000456c:	687b      	ldr	r3, [r7, #4]
2000456e:	2201      	movs	r2, #1
20004570:	619a      	str	r2, [r3, #24]
	indoors2Obj->animation_speed = 1;
20004572:	687b      	ldr	r3, [r7, #4]
20004574:	2201      	movs	r2, #1
20004576:	61da      	str	r2, [r3, #28]
	indoors2Obj->animation_counter = 0;
20004578:	687b      	ldr	r3, [r7, #4]
2000457a:	2200      	movs	r2, #0
2000457c:	621a      	str	r2, [r3, #32]
}
2000457e:	46c0      	nop			; (mov r8, r8)
20004580:	46bd      	mov	sp, r7
20004582:	b003      	add	sp, #12
20004584:	bd90      	pop	{r4, r7, pc}
20004586:	46c0      	nop			; (mov r8, r8)
20004588:	2000e848 	andcs	lr, r0, r8, asr #16
2000458c:	20007194 	mulcs	r0, r4, r1
20004590:	200071a0 	andcs	r7, r0, r0, lsr #3
20004594:	200071d4 	ldrdcs	r7, [r0], -r4
20004598:	20007190 	mulcs	r0, r0, r1
2000459c:	200071b8 			; <UNDEFINED> instruction: 0x200071b8

200045a0 <initSprites>:


GameObject trophyObj;
Image trophyImage;
Image trophyImages[1];
static void initSprites( void ) {	
200045a0:	b580      	push	{r7, lr}
200045a2:	b084      	sub	sp, #16
200045a4:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempTrophyLight;
200045a6:	4b12      	ldr	r3, [pc, #72]	; (200045f0 <initSprites+0x50>)
200045a8:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer11, trophy_light_bits, trophy_black_width, trophy_black_height);
200045aa:	4912      	ldr	r1, [pc, #72]	; (200045f4 <initSprites+0x54>)
200045ac:	68f8      	ldr	r0, [r7, #12]
200045ae:	2311      	movs	r3, #17
200045b0:	220b      	movs	r2, #11
200045b2:	f7ff fbe9 	bl	20003d88 <load_sprite>
	trophyLight = pointer11;
200045b6:	4b10      	ldr	r3, [pc, #64]	; (200045f8 <initSprites+0x58>)
200045b8:	68fa      	ldr	r2, [r7, #12]
200045ba:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempTrophyGray;
200045bc:	4b0f      	ldr	r3, [pc, #60]	; (200045fc <initSprites+0x5c>)
200045be:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer12, trophy_gray_bits, trophy_black_width, trophy_black_height);
200045c0:	490f      	ldr	r1, [pc, #60]	; (20004600 <initSprites+0x60>)
200045c2:	68b8      	ldr	r0, [r7, #8]
200045c4:	2311      	movs	r3, #17
200045c6:	220b      	movs	r2, #11
200045c8:	f7ff fbde 	bl	20003d88 <load_sprite>
	trophyGray = pointer12;
200045cc:	4b0d      	ldr	r3, [pc, #52]	; (20004604 <initSprites+0x64>)
200045ce:	68ba      	ldr	r2, [r7, #8]
200045d0:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempTrophyBlack;
200045d2:	4b0d      	ldr	r3, [pc, #52]	; (20004608 <initSprites+0x68>)
200045d4:	607b      	str	r3, [r7, #4]
	load_sprite(pointer13, trophy_black_bits, trophy_black_width, trophy_black_height);
200045d6:	490d      	ldr	r1, [pc, #52]	; (2000460c <initSprites+0x6c>)
200045d8:	6878      	ldr	r0, [r7, #4]
200045da:	2311      	movs	r3, #17
200045dc:	220b      	movs	r2, #11
200045de:	f7ff fbd3 	bl	20003d88 <load_sprite>
	trophyBlack = pointer13;	
200045e2:	4b0b      	ldr	r3, [pc, #44]	; (20004610 <initSprites+0x70>)
200045e4:	687a      	ldr	r2, [r7, #4]
200045e6:	601a      	str	r2, [r3, #0]
	
}
200045e8:	46c0      	nop			; (mov r8, r8)
200045ea:	46bd      	mov	sp, r7
200045ec:	b004      	add	sp, #16
200045ee:	bd80      	pop	{r7, pc}
200045f0:	200071f4 	strdcs	r7, [r0], -r4
200045f4:	2000e894 	mulcs	r0, r4, r8
200045f8:	20007240 	andcs	r7, r0, r0, asr #4
200045fc:	20007234 	andcs	r7, r0, r4, lsr r2
20004600:	2000e870 	andcs	lr, r0, r0, ror r8
20004604:	20007224 	andcs	r7, r0, r4, lsr #4
20004608:	20007228 	andcs	r7, r0, r8, lsr #4
2000460c:	2000e84c 	andcs	lr, r0, ip, asr #16
20004610:	200071e4 	andcs	r7, r0, r4, ror #3

20004614 <init_trophy>:
	
void init_trophy( GameObject *trophyObj ) {
20004614:	b590      	push	{r4, r7, lr}
20004616:	b083      	sub	sp, #12
20004618:	af00      	add	r7, sp, #0
2000461a:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
2000461c:	4b14      	ldr	r3, [pc, #80]	; (20004670 <init_trophy+0x5c>)
2000461e:	681b      	ldr	r3, [r3, #0]
20004620:	2b00      	cmp	r3, #0
20004622:	d011      	beq.n	20004648 <init_trophy+0x34>
		initSprites();
20004624:	f7ff ffbc 	bl	200045a0 <initSprites>
		firstTime = 0;			
20004628:	4b11      	ldr	r3, [pc, #68]	; (20004670 <init_trophy+0x5c>)
2000462a:	2200      	movs	r2, #0
2000462c:	601a      	str	r2, [r3, #0]

		trophyImages[0] = trophyImage;
2000462e:	4b11      	ldr	r3, [pc, #68]	; (20004674 <init_trophy+0x60>)
20004630:	4a11      	ldr	r2, [pc, #68]	; (20004678 <init_trophy+0x64>)
20004632:	ca13      	ldmia	r2!, {r0, r1, r4}
20004634:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&trophyImages[0], trophyBlack, trophyGray, trophyLight);
20004636:	4b11      	ldr	r3, [pc, #68]	; (2000467c <init_trophy+0x68>)
20004638:	6819      	ldr	r1, [r3, #0]
2000463a:	4b11      	ldr	r3, [pc, #68]	; (20004680 <init_trophy+0x6c>)
2000463c:	681a      	ldr	r2, [r3, #0]
2000463e:	4b11      	ldr	r3, [pc, #68]	; (20004684 <init_trophy+0x70>)
20004640:	681b      	ldr	r3, [r3, #0]
20004642:	480c      	ldr	r0, [pc, #48]	; (20004674 <init_trophy+0x60>)
20004644:	f7ff fb8c 	bl	20003d60 <load_image>
	}
	
	trophyObj->images = trophyImages;
20004648:	687b      	ldr	r3, [r7, #4]
2000464a:	4a0a      	ldr	r2, [pc, #40]	; (20004674 <init_trophy+0x60>)
2000464c:	601a      	str	r2, [r3, #0]

	trophyObj->current_frame = 0;
2000464e:	687b      	ldr	r3, [r7, #4]
20004650:	2200      	movs	r2, #0
20004652:	615a      	str	r2, [r3, #20]
	trophyObj->n_frames = 1;
20004654:	687b      	ldr	r3, [r7, #4]
20004656:	2201      	movs	r2, #1
20004658:	619a      	str	r2, [r3, #24]
	trophyObj->animation_speed = 1;
2000465a:	687b      	ldr	r3, [r7, #4]
2000465c:	2201      	movs	r2, #1
2000465e:	61da      	str	r2, [r3, #28]
	trophyObj->animation_counter = 0;
20004660:	687b      	ldr	r3, [r7, #4]
20004662:	2200      	movs	r2, #0
20004664:	621a      	str	r2, [r3, #32]
}
20004666:	46c0      	nop			; (mov r8, r8)
20004668:	46bd      	mov	sp, r7
2000466a:	b003      	add	sp, #12
2000466c:	bd90      	pop	{r4, r7, pc}
2000466e:	46c0      	nop			; (mov r8, r8)
20004670:	2000e8b8 			; <UNDEFINED> instruction: 0x2000e8b8
20004674:	200071d8 	ldrdcs	r7, [r0], -r8
20004678:	200071e8 	andcs	r7, r0, r8, ror #3
2000467c:	200071e4 	andcs	r7, r0, r4, ror #3
20004680:	20007224 	andcs	r7, r0, r4, lsr #4
20004684:	20007240 	andcs	r7, r0, r0, asr #4

20004688 <initSprites>:


GameObject rogerObj;
Image rogerImage;
Image rogerImages[1];
static void initSprites( void ) {	
20004688:	b580      	push	{r7, lr}
2000468a:	b084      	sub	sp, #16
2000468c:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempRogerLight;
2000468e:	4b12      	ldr	r3, [pc, #72]	; (200046d8 <initSprites+0x50>)
20004690:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer11, roger_light_bits, roger_black_width, roger_black_height);
20004692:	4912      	ldr	r1, [pc, #72]	; (200046dc <initSprites+0x54>)
20004694:	68f8      	ldr	r0, [r7, #12]
20004696:	2340      	movs	r3, #64	; 0x40
20004698:	2280      	movs	r2, #128	; 0x80
2000469a:	f7ff fb75 	bl	20003d88 <load_sprite>
	rogerLight = pointer11;
2000469e:	4b10      	ldr	r3, [pc, #64]	; (200046e0 <initSprites+0x58>)
200046a0:	68fa      	ldr	r2, [r7, #12]
200046a2:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempRogerGray;
200046a4:	4b0f      	ldr	r3, [pc, #60]	; (200046e4 <initSprites+0x5c>)
200046a6:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer12, roger_gray_bits, roger_black_width, roger_black_height);
200046a8:	490f      	ldr	r1, [pc, #60]	; (200046e8 <initSprites+0x60>)
200046aa:	68b8      	ldr	r0, [r7, #8]
200046ac:	2340      	movs	r3, #64	; 0x40
200046ae:	2280      	movs	r2, #128	; 0x80
200046b0:	f7ff fb6a 	bl	20003d88 <load_sprite>
	rogerGray = pointer12;
200046b4:	4b0d      	ldr	r3, [pc, #52]	; (200046ec <initSprites+0x64>)
200046b6:	68ba      	ldr	r2, [r7, #8]
200046b8:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempRogerBlack;
200046ba:	4b0d      	ldr	r3, [pc, #52]	; (200046f0 <initSprites+0x68>)
200046bc:	607b      	str	r3, [r7, #4]
	load_sprite(pointer13, roger_black_bits, roger_black_width, roger_black_height);
200046be:	490d      	ldr	r1, [pc, #52]	; (200046f4 <initSprites+0x6c>)
200046c0:	6878      	ldr	r0, [r7, #4]
200046c2:	2340      	movs	r3, #64	; 0x40
200046c4:	2280      	movs	r2, #128	; 0x80
200046c6:	f7ff fb5f 	bl	20003d88 <load_sprite>
	rogerBlack = pointer13;	
200046ca:	4b0b      	ldr	r3, [pc, #44]	; (200046f8 <initSprites+0x70>)
200046cc:	687a      	ldr	r2, [r7, #4]
200046ce:	601a      	str	r2, [r3, #0]
	
}
200046d0:	46c0      	nop			; (mov r8, r8)
200046d2:	46bd      	mov	sp, r7
200046d4:	b004      	add	sp, #16
200046d6:	bd80      	pop	{r7, pc}
200046d8:	20007260 	andcs	r7, r0, r0, ror #4
200046dc:	2000f0bc 	strhcs	pc, [r0], -ip	; <UNPREDICTABLE>
200046e0:	2000726c 	andcs	r7, r0, ip, ror #4
200046e4:	20007254 	andcs	r7, r0, r4, asr r2
200046e8:	2000ecbc 			; <UNDEFINED> instruction: 0x2000ecbc
200046ec:	20007250 	andcs	r7, r0, r0, asr r2
200046f0:	20007294 	mulcs	r0, r4, r2
200046f4:	2000e8bc 			; <UNDEFINED> instruction: 0x2000e8bc
200046f8:	200072a0 	andcs	r7, r0, r0, lsr #5

200046fc <init_roger>:
	
void init_roger( GameObject *rogerObj ) {
200046fc:	b590      	push	{r4, r7, lr}
200046fe:	b083      	sub	sp, #12
20004700:	af00      	add	r7, sp, #0
20004702:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20004704:	4b14      	ldr	r3, [pc, #80]	; (20004758 <init_roger+0x5c>)
20004706:	681b      	ldr	r3, [r3, #0]
20004708:	2b00      	cmp	r3, #0
2000470a:	d011      	beq.n	20004730 <init_roger+0x34>
		initSprites();
2000470c:	f7ff ffbc 	bl	20004688 <initSprites>
		firstTime = 0;			
20004710:	4b11      	ldr	r3, [pc, #68]	; (20004758 <init_roger+0x5c>)
20004712:	2200      	movs	r2, #0
20004714:	601a      	str	r2, [r3, #0]

		rogerImages[0] = rogerImage;
20004716:	4b11      	ldr	r3, [pc, #68]	; (2000475c <init_roger+0x60>)
20004718:	4a11      	ldr	r2, [pc, #68]	; (20004760 <init_roger+0x64>)
2000471a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000471c:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&rogerImages[0], rogerBlack, rogerGray, rogerLight);
2000471e:	4b11      	ldr	r3, [pc, #68]	; (20004764 <init_roger+0x68>)
20004720:	6819      	ldr	r1, [r3, #0]
20004722:	4b11      	ldr	r3, [pc, #68]	; (20004768 <init_roger+0x6c>)
20004724:	681a      	ldr	r2, [r3, #0]
20004726:	4b11      	ldr	r3, [pc, #68]	; (2000476c <init_roger+0x70>)
20004728:	681b      	ldr	r3, [r3, #0]
2000472a:	480c      	ldr	r0, [pc, #48]	; (2000475c <init_roger+0x60>)
2000472c:	f7ff fb18 	bl	20003d60 <load_image>
	}
	
	rogerObj->images = rogerImages;
20004730:	687b      	ldr	r3, [r7, #4]
20004732:	4a0a      	ldr	r2, [pc, #40]	; (2000475c <init_roger+0x60>)
20004734:	601a      	str	r2, [r3, #0]

	rogerObj->current_frame = 0;
20004736:	687b      	ldr	r3, [r7, #4]
20004738:	2200      	movs	r2, #0
2000473a:	615a      	str	r2, [r3, #20]
	rogerObj->n_frames = 1;
2000473c:	687b      	ldr	r3, [r7, #4]
2000473e:	2201      	movs	r2, #1
20004740:	619a      	str	r2, [r3, #24]
	rogerObj->animation_speed = 1;
20004742:	687b      	ldr	r3, [r7, #4]
20004744:	2201      	movs	r2, #1
20004746:	61da      	str	r2, [r3, #28]
	rogerObj->animation_counter = 0;
20004748:	687b      	ldr	r3, [r7, #4]
2000474a:	2200      	movs	r2, #0
2000474c:	621a      	str	r2, [r3, #32]
}
2000474e:	46c0      	nop			; (mov r8, r8)
20004750:	46bd      	mov	sp, r7
20004752:	b003      	add	sp, #12
20004754:	bd90      	pop	{r4, r7, pc}
20004756:	46c0      	nop			; (mov r8, r8)
20004758:	2000f4bc 			; <UNDEFINED> instruction: 0x2000f4bc
2000475c:	200072a4 	andcs	r7, r0, r4, lsr #5
20004760:	20007244 	andcs	r7, r0, r4, asr #4
20004764:	200072a0 	andcs	r7, r0, r0, lsr #5
20004768:	20007250 	andcs	r7, r0, r0, asr r2
2000476c:	2000726c 	andcs	r7, r0, ip, ror #4

20004770 <__divsi3>:
20004770:	4603      	mov	r3, r0
20004772:	430b      	orrs	r3, r1
20004774:	d47f      	bmi.n	20004876 <__divsi3+0x106>
20004776:	2200      	movs	r2, #0
20004778:	0843      	lsrs	r3, r0, #1
2000477a:	428b      	cmp	r3, r1
2000477c:	d374      	bcc.n	20004868 <__divsi3+0xf8>
2000477e:	0903      	lsrs	r3, r0, #4
20004780:	428b      	cmp	r3, r1
20004782:	d35f      	bcc.n	20004844 <__divsi3+0xd4>
20004784:	0a03      	lsrs	r3, r0, #8
20004786:	428b      	cmp	r3, r1
20004788:	d344      	bcc.n	20004814 <__divsi3+0xa4>
2000478a:	0b03      	lsrs	r3, r0, #12
2000478c:	428b      	cmp	r3, r1
2000478e:	d328      	bcc.n	200047e2 <__divsi3+0x72>
20004790:	0c03      	lsrs	r3, r0, #16
20004792:	428b      	cmp	r3, r1
20004794:	d30d      	bcc.n	200047b2 <__divsi3+0x42>
20004796:	22ff      	movs	r2, #255	; 0xff
20004798:	0209      	lsls	r1, r1, #8
2000479a:	ba12      	rev	r2, r2
2000479c:	0c03      	lsrs	r3, r0, #16
2000479e:	428b      	cmp	r3, r1
200047a0:	d302      	bcc.n	200047a8 <__divsi3+0x38>
200047a2:	1212      	asrs	r2, r2, #8
200047a4:	0209      	lsls	r1, r1, #8
200047a6:	d065      	beq.n	20004874 <__divsi3+0x104>
200047a8:	0b03      	lsrs	r3, r0, #12
200047aa:	428b      	cmp	r3, r1
200047ac:	d319      	bcc.n	200047e2 <__divsi3+0x72>
200047ae:	e000      	b.n	200047b2 <__divsi3+0x42>
200047b0:	0a09      	lsrs	r1, r1, #8
200047b2:	0bc3      	lsrs	r3, r0, #15
200047b4:	428b      	cmp	r3, r1
200047b6:	d301      	bcc.n	200047bc <__divsi3+0x4c>
200047b8:	03cb      	lsls	r3, r1, #15
200047ba:	1ac0      	subs	r0, r0, r3
200047bc:	4152      	adcs	r2, r2
200047be:	0b83      	lsrs	r3, r0, #14
200047c0:	428b      	cmp	r3, r1
200047c2:	d301      	bcc.n	200047c8 <__divsi3+0x58>
200047c4:	038b      	lsls	r3, r1, #14
200047c6:	1ac0      	subs	r0, r0, r3
200047c8:	4152      	adcs	r2, r2
200047ca:	0b43      	lsrs	r3, r0, #13
200047cc:	428b      	cmp	r3, r1
200047ce:	d301      	bcc.n	200047d4 <__divsi3+0x64>
200047d0:	034b      	lsls	r3, r1, #13
200047d2:	1ac0      	subs	r0, r0, r3
200047d4:	4152      	adcs	r2, r2
200047d6:	0b03      	lsrs	r3, r0, #12
200047d8:	428b      	cmp	r3, r1
200047da:	d301      	bcc.n	200047e0 <__divsi3+0x70>
200047dc:	030b      	lsls	r3, r1, #12
200047de:	1ac0      	subs	r0, r0, r3
200047e0:	4152      	adcs	r2, r2
200047e2:	0ac3      	lsrs	r3, r0, #11
200047e4:	428b      	cmp	r3, r1
200047e6:	d301      	bcc.n	200047ec <__divsi3+0x7c>
200047e8:	02cb      	lsls	r3, r1, #11
200047ea:	1ac0      	subs	r0, r0, r3
200047ec:	4152      	adcs	r2, r2
200047ee:	0a83      	lsrs	r3, r0, #10
200047f0:	428b      	cmp	r3, r1
200047f2:	d301      	bcc.n	200047f8 <__divsi3+0x88>
200047f4:	028b      	lsls	r3, r1, #10
200047f6:	1ac0      	subs	r0, r0, r3
200047f8:	4152      	adcs	r2, r2
200047fa:	0a43      	lsrs	r3, r0, #9
200047fc:	428b      	cmp	r3, r1
200047fe:	d301      	bcc.n	20004804 <__divsi3+0x94>
20004800:	024b      	lsls	r3, r1, #9
20004802:	1ac0      	subs	r0, r0, r3
20004804:	4152      	adcs	r2, r2
20004806:	0a03      	lsrs	r3, r0, #8
20004808:	428b      	cmp	r3, r1
2000480a:	d301      	bcc.n	20004810 <__divsi3+0xa0>
2000480c:	020b      	lsls	r3, r1, #8
2000480e:	1ac0      	subs	r0, r0, r3
20004810:	4152      	adcs	r2, r2
20004812:	d2cd      	bcs.n	200047b0 <__divsi3+0x40>
20004814:	09c3      	lsrs	r3, r0, #7
20004816:	428b      	cmp	r3, r1
20004818:	d301      	bcc.n	2000481e <__divsi3+0xae>
2000481a:	01cb      	lsls	r3, r1, #7
2000481c:	1ac0      	subs	r0, r0, r3
2000481e:	4152      	adcs	r2, r2
20004820:	0983      	lsrs	r3, r0, #6
20004822:	428b      	cmp	r3, r1
20004824:	d301      	bcc.n	2000482a <__divsi3+0xba>
20004826:	018b      	lsls	r3, r1, #6
20004828:	1ac0      	subs	r0, r0, r3
2000482a:	4152      	adcs	r2, r2
2000482c:	0943      	lsrs	r3, r0, #5
2000482e:	428b      	cmp	r3, r1
20004830:	d301      	bcc.n	20004836 <__divsi3+0xc6>
20004832:	014b      	lsls	r3, r1, #5
20004834:	1ac0      	subs	r0, r0, r3
20004836:	4152      	adcs	r2, r2
20004838:	0903      	lsrs	r3, r0, #4
2000483a:	428b      	cmp	r3, r1
2000483c:	d301      	bcc.n	20004842 <__divsi3+0xd2>
2000483e:	010b      	lsls	r3, r1, #4
20004840:	1ac0      	subs	r0, r0, r3
20004842:	4152      	adcs	r2, r2
20004844:	08c3      	lsrs	r3, r0, #3
20004846:	428b      	cmp	r3, r1
20004848:	d301      	bcc.n	2000484e <__divsi3+0xde>
2000484a:	00cb      	lsls	r3, r1, #3
2000484c:	1ac0      	subs	r0, r0, r3
2000484e:	4152      	adcs	r2, r2
20004850:	0883      	lsrs	r3, r0, #2
20004852:	428b      	cmp	r3, r1
20004854:	d301      	bcc.n	2000485a <__divsi3+0xea>
20004856:	008b      	lsls	r3, r1, #2
20004858:	1ac0      	subs	r0, r0, r3
2000485a:	4152      	adcs	r2, r2
2000485c:	0843      	lsrs	r3, r0, #1
2000485e:	428b      	cmp	r3, r1
20004860:	d301      	bcc.n	20004866 <__divsi3+0xf6>
20004862:	004b      	lsls	r3, r1, #1
20004864:	1ac0      	subs	r0, r0, r3
20004866:	4152      	adcs	r2, r2
20004868:	1a41      	subs	r1, r0, r1
2000486a:	d200      	bcs.n	2000486e <__divsi3+0xfe>
2000486c:	4601      	mov	r1, r0
2000486e:	4152      	adcs	r2, r2
20004870:	4610      	mov	r0, r2
20004872:	4770      	bx	lr
20004874:	e05d      	b.n	20004932 <__divsi3+0x1c2>
20004876:	0fca      	lsrs	r2, r1, #31
20004878:	d000      	beq.n	2000487c <__divsi3+0x10c>
2000487a:	4249      	negs	r1, r1
2000487c:	1003      	asrs	r3, r0, #32
2000487e:	d300      	bcc.n	20004882 <__divsi3+0x112>
20004880:	4240      	negs	r0, r0
20004882:	4053      	eors	r3, r2
20004884:	2200      	movs	r2, #0
20004886:	469c      	mov	ip, r3
20004888:	0903      	lsrs	r3, r0, #4
2000488a:	428b      	cmp	r3, r1
2000488c:	d32d      	bcc.n	200048ea <__divsi3+0x17a>
2000488e:	0a03      	lsrs	r3, r0, #8
20004890:	428b      	cmp	r3, r1
20004892:	d312      	bcc.n	200048ba <__divsi3+0x14a>
20004894:	22fc      	movs	r2, #252	; 0xfc
20004896:	0189      	lsls	r1, r1, #6
20004898:	ba12      	rev	r2, r2
2000489a:	0a03      	lsrs	r3, r0, #8
2000489c:	428b      	cmp	r3, r1
2000489e:	d30c      	bcc.n	200048ba <__divsi3+0x14a>
200048a0:	0189      	lsls	r1, r1, #6
200048a2:	1192      	asrs	r2, r2, #6
200048a4:	428b      	cmp	r3, r1
200048a6:	d308      	bcc.n	200048ba <__divsi3+0x14a>
200048a8:	0189      	lsls	r1, r1, #6
200048aa:	1192      	asrs	r2, r2, #6
200048ac:	428b      	cmp	r3, r1
200048ae:	d304      	bcc.n	200048ba <__divsi3+0x14a>
200048b0:	0189      	lsls	r1, r1, #6
200048b2:	d03a      	beq.n	2000492a <__divsi3+0x1ba>
200048b4:	1192      	asrs	r2, r2, #6
200048b6:	e000      	b.n	200048ba <__divsi3+0x14a>
200048b8:	0989      	lsrs	r1, r1, #6
200048ba:	09c3      	lsrs	r3, r0, #7
200048bc:	428b      	cmp	r3, r1
200048be:	d301      	bcc.n	200048c4 <__divsi3+0x154>
200048c0:	01cb      	lsls	r3, r1, #7
200048c2:	1ac0      	subs	r0, r0, r3
200048c4:	4152      	adcs	r2, r2
200048c6:	0983      	lsrs	r3, r0, #6
200048c8:	428b      	cmp	r3, r1
200048ca:	d301      	bcc.n	200048d0 <__divsi3+0x160>
200048cc:	018b      	lsls	r3, r1, #6
200048ce:	1ac0      	subs	r0, r0, r3
200048d0:	4152      	adcs	r2, r2
200048d2:	0943      	lsrs	r3, r0, #5
200048d4:	428b      	cmp	r3, r1
200048d6:	d301      	bcc.n	200048dc <__divsi3+0x16c>
200048d8:	014b      	lsls	r3, r1, #5
200048da:	1ac0      	subs	r0, r0, r3
200048dc:	4152      	adcs	r2, r2
200048de:	0903      	lsrs	r3, r0, #4
200048e0:	428b      	cmp	r3, r1
200048e2:	d301      	bcc.n	200048e8 <__divsi3+0x178>
200048e4:	010b      	lsls	r3, r1, #4
200048e6:	1ac0      	subs	r0, r0, r3
200048e8:	4152      	adcs	r2, r2
200048ea:	08c3      	lsrs	r3, r0, #3
200048ec:	428b      	cmp	r3, r1
200048ee:	d301      	bcc.n	200048f4 <__divsi3+0x184>
200048f0:	00cb      	lsls	r3, r1, #3
200048f2:	1ac0      	subs	r0, r0, r3
200048f4:	4152      	adcs	r2, r2
200048f6:	0883      	lsrs	r3, r0, #2
200048f8:	428b      	cmp	r3, r1
200048fa:	d301      	bcc.n	20004900 <__divsi3+0x190>
200048fc:	008b      	lsls	r3, r1, #2
200048fe:	1ac0      	subs	r0, r0, r3
20004900:	4152      	adcs	r2, r2
20004902:	d2d9      	bcs.n	200048b8 <__divsi3+0x148>
20004904:	0843      	lsrs	r3, r0, #1
20004906:	428b      	cmp	r3, r1
20004908:	d301      	bcc.n	2000490e <__divsi3+0x19e>
2000490a:	004b      	lsls	r3, r1, #1
2000490c:	1ac0      	subs	r0, r0, r3
2000490e:	4152      	adcs	r2, r2
20004910:	1a41      	subs	r1, r0, r1
20004912:	d200      	bcs.n	20004916 <__divsi3+0x1a6>
20004914:	4601      	mov	r1, r0
20004916:	4663      	mov	r3, ip
20004918:	4152      	adcs	r2, r2
2000491a:	105b      	asrs	r3, r3, #1
2000491c:	4610      	mov	r0, r2
2000491e:	d301      	bcc.n	20004924 <__divsi3+0x1b4>
20004920:	4240      	negs	r0, r0
20004922:	2b00      	cmp	r3, #0
20004924:	d500      	bpl.n	20004928 <__divsi3+0x1b8>
20004926:	4249      	negs	r1, r1
20004928:	4770      	bx	lr
2000492a:	4663      	mov	r3, ip
2000492c:	105b      	asrs	r3, r3, #1
2000492e:	d300      	bcc.n	20004932 <__divsi3+0x1c2>
20004930:	4240      	negs	r0, r0
20004932:	b501      	push	{r0, lr}
20004934:	2000      	movs	r0, #0
20004936:	f000 f805 	bl	20004944 <__aeabi_idiv0>
2000493a:	bd02      	pop	{r1, pc}

2000493c <__aeabi_idivmod>:
2000493c:	2900      	cmp	r1, #0
2000493e:	d0f8      	beq.n	20004932 <__divsi3+0x1c2>
20004940:	e716      	b.n	20004770 <__divsi3>
20004942:	4770      	bx	lr

20004944 <__aeabi_idiv0>:
20004944:	4770      	bx	lr
20004946:	46c0      	nop			; (mov r8, r8)

20004948 <counter>:
20004948:	00000000 	andeq	r0, r0, r0

2000494c <i.4314>:
2000494c:	00000000 	andeq	r0, r0, r0

20004950 <j.4320>:
20004950:	00000000 	andeq	r0, r0, r0

20004954 <distance_player_fire.4319>:
20004954:	00000000 	andeq	r0, r0, r0

20004958 <distance_hair_trophy.4325>:
20004958:	00000000 	andeq	r0, r0, r0

2000495c <trophy_burned.4324>:
2000495c:	00000000 	andeq	r0, r0, r0

20004960 <distance_hair_DIP.4327>:
20004960:	00000000 	andeq	r0, r0, r0

20004964 <DIP_burned.4326>:
20004964:	00000000 	andeq	r0, r0, r0

20004968 <test.4329>:
20004968:	00000000 	andeq	r0, r0, r0

2000496c <nGameObjects>:
2000496c:	00000000 	andeq	r0, r0, r0

20004970 <lastJumpValue>:
20004970:	00000000 	andeq	r0, r0, r0

20004974 <lastRightValue>:
20004974:	00000000 	andeq	r0, r0, r0

20004978 <lastLeftValue>:
20004978:	00000000 	andeq	r0, r0, r0

2000497c <xSpeed>:
2000497c:	00000000 	andeq	r0, r0, r0

20004980 <ySpeed>:
20004980:	00000000 	andeq	r0, r0, r0

20004984 <playerPositionX>:
20004984:	00000000 	andeq	r0, r0, r0

20004988 <playerPositionY>:
20004988:	00000000 	andeq	r0, r0, r0

2000498c <counter.4152>:
2000498c:	00000000 	andeq	r0, r0, r0

20004990 <isRunning.4154>:
20004990:	00000000 	andeq	r0, r0, r0

20004994 <monster>:
20004994:	00000000 	andeq	r0, r0, r0

20004998 <tempCastleBlack>:
	...

200049a4 <tempPressGray>:
	...

200049b0 <tempTitleGray>:
	...

200049bc <castleBlack>:
200049bc:	00000000 	andeq	r0, r0, r0

200049c0 <tempMonster>:
	...

200049cc <pressLight>:
200049cc:	00000000 	andeq	r0, r0, r0

200049d0 <tempTitleBlack>:
	...

200049dc <bg>:
200049dc:	00000000 	andeq	r0, r0, r0

200049e0 <tempMonsterGray>:
	...

200049ec <tempTitleLight>:
	...

200049f8 <castleLight>:
200049f8:	00000000 	andeq	r0, r0, r0

200049fc <tempPressLight>:
	...

20004a08 <tempCastleLight>:
	...

20004a14 <pressGray>:
20004a14:	00000000 	andeq	r0, r0, r0

20004a18 <tempMonsterLight>:
	...

20004a24 <tempPressBlack>:
	...

20004a30 <titleGray>:
20004a30:	00000000 	andeq	r0, r0, r0

20004a34 <tempCastleGray>:
	...

20004a40 <monsterLight>:
20004a40:	00000000 	andeq	r0, r0, r0

20004a44 <titleLight>:
20004a44:	00000000 	andeq	r0, r0, r0

20004a48 <castleGray>:
20004a48:	00000000 	andeq	r0, r0, r0

20004a4c <random_seed>:
20004a4c:	00000000 	andeq	r0, r0, r0

20004a50 <pressBlack>:
20004a50:	00000000 	andeq	r0, r0, r0

20004a54 <monsterGray>:
20004a54:	00000000 	andeq	r0, r0, r0

20004a58 <tempBg>:
	...

20004a64 <titleBlack>:
20004a64:	00000000 	andeq	r0, r0, r0

20004a68 <gameObjects>:
	...

20004bf8 <fire1Light>:
20004bf8:	00000000 	andeq	r0, r0, r0

20004bfc <tempFire3Light>:
	...

20004c08 <fire3Gray>:
20004c08:	00000000 	andeq	r0, r0, r0

20004c0c <tempFire4Gray>:
	...

20004c18 <fire2Image>:
	...

20004c24 <tempFire2Gray>:
	...

20004c30 <tempFireBlack>:
	...

20004c3c <fire3Image>:
	...

20004c48 <tempFire4Light>:
	...

20004c54 <fire1Image>:
	...

20004c60 <fire4Light>:
20004c60:	00000000 	andeq	r0, r0, r0

20004c64 <fireObj>:
	...

20004c88 <fire5Image>:
	...

20004c94 <fireImages>:
	...

20004cd0 <tempFire5Gray>:
	...

20004cdc <tempFire3Gray>:
	...

20004ce8 <fire4Image>:
	...

20004cf4 <fire4Gray>:
20004cf4:	00000000 	andeq	r0, r0, r0

20004cf8 <tempFire1Light>:
	...

20004d04 <tempFire5Light>:
	...

20004d10 <fire5Gray>:
20004d10:	00000000 	andeq	r0, r0, r0

20004d14 <fire2Light>:
20004d14:	00000000 	andeq	r0, r0, r0

20004d18 <fire5Light>:
20004d18:	00000000 	andeq	r0, r0, r0

20004d1c <tempFire1Gray>:
	...

20004d28 <fireBlack>:
20004d28:	00000000 	andeq	r0, r0, r0

20004d2c <tempFire2Light>:
	...

20004d38 <fire3Light>:
20004d38:	00000000 	andeq	r0, r0, r0

20004d3c <fire2Gray>:
20004d3c:	00000000 	andeq	r0, r0, r0

20004d40 <fire1Gray>:
20004d40:	00000000 	andeq	r0, r0, r0

20004d44 <bird4Light>:
20004d44:	00000000 	andeq	r0, r0, r0

20004d48 <bird1Gray>:
20004d48:	00000000 	andeq	r0, r0, r0

20004d4c <bird6Image>:
	...

20004d58 <bird5Black>:
20004d58:	00000000 	andeq	r0, r0, r0

20004d5c <tempBird4Black>:
	...

20004d68 <bird2Image>:
	...

20004d74 <birdObj>:
	...

20004d98 <bird1Image>:
	...

20004da4 <bird3Black>:
20004da4:	00000000 	andeq	r0, r0, r0

20004da8 <bird4Gray>:
20004da8:	00000000 	andeq	r0, r0, r0

20004dac <bird2Black>:
20004dac:	00000000 	andeq	r0, r0, r0

20004db0 <bird1Black>:
20004db0:	00000000 	andeq	r0, r0, r0

20004db4 <bird4Image>:
	...

20004dc0 <tempBirdBlack>:
	...

20004dcc <bird3Gray>:
20004dcc:	00000000 	andeq	r0, r0, r0

20004dd0 <tempBirdGray>:
	...

20004ddc <bird5Gray>:
20004ddc:	00000000 	andeq	r0, r0, r0

20004de0 <tempBird5Light>:
	...

20004dec <tempBird2Gray>:
	...

20004df8 <bird3Light>:
20004df8:	00000000 	andeq	r0, r0, r0

20004dfc <tempBird5Gray>:
	...

20004e08 <tempBird5Black>:
	...

20004e14 <bird5Image>:
	...

20004e20 <bird5Light>:
20004e20:	00000000 	andeq	r0, r0, r0

20004e24 <tempBird3Black>:
	...

20004e30 <bird2Gray>:
20004e30:	00000000 	andeq	r0, r0, r0

20004e34 <tempBirdLight>:
	...

20004e40 <bird1Light>:
20004e40:	00000000 	andeq	r0, r0, r0

20004e44 <tempBird2Light>:
	...

20004e50 <bird3Image>:
	...

20004e5c <tempBird4Light>:
	...

20004e68 <tempBird3Light>:
	...

20004e74 <tempBird3Gray>:
	...

20004e80 <birdImages>:
	...

20004ec8 <bird4Black>:
20004ec8:	00000000 	andeq	r0, r0, r0

20004ecc <tempBird2Black>:
	...

20004ed8 <tempBird4Gray>:
	...

20004ee4 <bird2Light>:
20004ee4:	00000000 	andeq	r0, r0, r0

20004ee8 <witch1Gray>:
20004ee8:	00000000 	andeq	r0, r0, r0

20004eec <witch2Light>:
20004eec:	00000000 	andeq	r0, r0, r0

20004ef0 <witchImages>:
	...

20004f20 <witch2Image>:
	...

20004f2c <tempWitch2Black>:
	...

20004f38 <tempWitchBlack>:
	...

20004f44 <tempWitch3Light>:
	...

20004f50 <witch4Image>:
	...

20004f5c <witch2Gray>:
20004f5c:	00000000 	andeq	r0, r0, r0

20004f60 <tempWitchGray>:
	...

20004f6c <tempWitch3Black>:
	...

20004f78 <tempWitch2Gray>:
	...

20004f84 <witch3Black>:
20004f84:	00000000 	andeq	r0, r0, r0

20004f88 <witchObj>:
	...

20004fac <witch3Light>:
20004fac:	00000000 	andeq	r0, r0, r0

20004fb0 <tempWitch3Gray>:
	...

20004fbc <witch1Black>:
20004fbc:	00000000 	andeq	r0, r0, r0

20004fc0 <witch3Gray>:
20004fc0:	00000000 	andeq	r0, r0, r0

20004fc4 <witch1Image>:
	...

20004fd0 <tempWitchLight>:
	...

20004fdc <tempWitch2Light>:
	...

20004fe8 <witch1Light>:
20004fe8:	00000000 	andeq	r0, r0, r0

20004fec <witch3Image>:
	...

20004ff8 <witch2Black>:
20004ff8:	00000000 	andeq	r0, r0, r0

20004ffc <DIPObj>:
	...

20005020 <DIP2Image>:
	...

2000502c <DIP2Gray>:
2000502c:	00000000 	andeq	r0, r0, r0

20005030 <tempDIP2Gray>:
	...

2000503c <DIP3Black>:
2000503c:	00000000 	andeq	r0, r0, r0

20005040 <DIP1Black>:
20005040:	00000000 	andeq	r0, r0, r0

20005044 <tempDIPLight>:
	...

20005050 <tempDIP3Light>:
	...

2000505c <DIPImages>:
	...

2000508c <tempDIP2Black>:
	...

20005098 <DIP3Image>:
	...

200050a4 <DIP1Image>:
	...

200050b0 <DIP1Light>:
200050b0:	00000000 	andeq	r0, r0, r0

200050b4 <DIP2Light>:
200050b4:	00000000 	andeq	r0, r0, r0

200050b8 <DIP3Light>:
200050b8:	00000000 	andeq	r0, r0, r0

200050bc <DIP2Black>:
200050bc:	00000000 	andeq	r0, r0, r0

200050c0 <tempDIP3Gray>:
	...

200050cc <tempDIPBlack>:
	...

200050d8 <DIP1Gray>:
200050d8:	00000000 	andeq	r0, r0, r0

200050dc <tempDIP3Black>:
	...

200050e8 <DIP3Gray>:
200050e8:	00000000 	andeq	r0, r0, r0

200050ec <DIP4Image>:
	...

200050f8 <tempDIP2Light>:
	...

20005104 <tempDIPGray>:
	...

20005110 <tempFlameGray>:
	...

2000511c <tempFlame4Light>:
	...

20005128 <flame2Image>:
	...

20005134 <flame3Light>:
20005134:	00000000 	andeq	r0, r0, r0

20005138 <tempFlame3Light>:
	...

20005144 <flame3Image>:
	...

20005150 <flame3Gray>:
20005150:	00000000 	andeq	r0, r0, r0

20005154 <flameObj>:
	...

20005178 <tempFlame2Light>:
	...

20005184 <tempFlame3Gray>:
	...

20005190 <tempFlame2Black>:
	...

2000519c <flame2Gray>:
2000519c:	00000000 	andeq	r0, r0, r0

200051a0 <flame1Gray>:
200051a0:	00000000 	andeq	r0, r0, r0

200051a4 <flame1Light>:
200051a4:	00000000 	andeq	r0, r0, r0

200051a8 <tempFlame4Black>:
	...

200051b4 <tempFlame4Gray>:
	...

200051c0 <flame4Gray>:
200051c0:	00000000 	andeq	r0, r0, r0

200051c4 <flame4Image>:
	...

200051d0 <flame1Image>:
	...

200051dc <tempFlame2Gray>:
	...

200051e8 <flameImages>:
	...

20005218 <tempFlame3Black>:
	...

20005224 <flame4Black>:
20005224:	00000000 	andeq	r0, r0, r0

20005228 <flame1Black>:
20005228:	00000000 	andeq	r0, r0, r0

2000522c <tempFlameLight>:
	...

20005238 <flame2Light>:
20005238:	00000000 	andeq	r0, r0, r0

2000523c <flame3Black>:
2000523c:	00000000 	andeq	r0, r0, r0

20005240 <tempFlameBlack>:
	...

2000524c <flame4Light>:
2000524c:	00000000 	andeq	r0, r0, r0

20005250 <flame2Black>:
20005250:	00000000 	andeq	r0, r0, r0

20005254 <tempBoom5Gray>:
	...

20005260 <tempBoom2Black>:
	...

2000526c <tempBoomLight>:
	...

20005278 <tempBoom6Light>:
	...

20005284 <boom9Image>:
	...

20005290 <boom12Image>:
	...

2000529c <boom3Light>:
2000529c:	00000000 	andeq	r0, r0, r0

200052a0 <boom3Black>:
200052a0:	00000000 	andeq	r0, r0, r0

200052a4 <boom4Image>:
	...

200052b0 <boom2Image>:
	...

200052bc <boom5Black>:
200052bc:	00000000 	andeq	r0, r0, r0

200052c0 <boom4Light>:
200052c0:	00000000 	andeq	r0, r0, r0

200052c4 <boom10Image>:
	...

200052d0 <boom14Image>:
	...

200052dc <boom8Image>:
	...

200052e8 <boom5Image>:
	...

200052f4 <boom3Gray>:
200052f4:	00000000 	andeq	r0, r0, r0

200052f8 <tempBoom4Light>:
	...

20005304 <boom5Gray>:
20005304:	00000000 	andeq	r0, r0, r0

20005308 <boomObj>:
	...

2000532c <boom6Image>:
	...

20005338 <tempBoom3Light>:
	...

20005344 <boom6Gray>:
20005344:	00000000 	andeq	r0, r0, r0

20005348 <boom13Image>:
	...

20005354 <boom6Light>:
20005354:	00000000 	andeq	r0, r0, r0

20005358 <boomImages>:
	...

2000540c <boom6Black>:
2000540c:	00000000 	andeq	r0, r0, r0

20005410 <tempBoom3Black>:
	...

2000541c <boom4Black>:
2000541c:	00000000 	andeq	r0, r0, r0

20005420 <tempBoom6Black>:
	...

2000542c <tempBoomGray>:
	...

20005438 <boom2Gray>:
20005438:	00000000 	andeq	r0, r0, r0

2000543c <boom1Black>:
2000543c:	00000000 	andeq	r0, r0, r0

20005440 <tempBoom6Gray>:
	...

2000544c <tempBoom2Gray>:
	...

20005458 <tempBoom4Gray>:
	...

20005464 <tempBoom3Gray>:
	...

20005470 <boom4Gray>:
20005470:	00000000 	andeq	r0, r0, r0

20005474 <boom5Light>:
20005474:	00000000 	andeq	r0, r0, r0

20005478 <boom1Gray>:
20005478:	00000000 	andeq	r0, r0, r0

2000547c <boom11Image>:
	...

20005488 <boom1Image>:
	...

20005494 <boom7Image>:
	...

200054a0 <boom3Image>:
	...

200054ac <tempBoom5Light>:
	...

200054b8 <tempBoom4Black>:
	...

200054c4 <tempBoom2Light>:
	...

200054d0 <tempBoom5Black>:
	...

200054dc <boom1Light>:
200054dc:	00000000 	andeq	r0, r0, r0

200054e0 <boom15Image>:
	...

200054ec <boom2Black>:
200054ec:	00000000 	andeq	r0, r0, r0

200054f0 <boom2Light>:
200054f0:	00000000 	andeq	r0, r0, r0

200054f4 <tempBoomBlack>:
	...

20005500 <backBufferGray>:
	...

20005900 <draw_buffer_black_gray>:
	...

20005d00 <backBuffer>:
	...

20006100 <draw_buffer_black_light>:
	...

20006500 <draw_buffer_black>:
	...

20006900 <draw_buffer_black_gray_light>:
	...

20006d00 <backBufferLight>:
	...

20007100 <tempIndoorsGray>:
	...

2000710c <tempIndoorsLight>:
	...

20007118 <tempIndoorsBlack>:
	...

20007124 <indoorsGray>:
20007124:	00000000 	andeq	r0, r0, r0

20007128 <indoorsObj>:
	...

2000714c <indoorsImages>:
	...

20007158 <indoorsBlack>:
20007158:	00000000 	andeq	r0, r0, r0

2000715c <indoorsImage>:
	...

20007168 <indoorsLight>:
20007168:	00000000 	andeq	r0, r0, r0

2000716c <indoors2Obj>:
	...

20007190 <indoors2Gray>:
20007190:	00000000 	andeq	r0, r0, r0

20007194 <indoors2Images>:
	...

200071a0 <indoors2Image>:
	...

200071ac <tempIndoors2Gray>:
	...

200071b8 <indoors2Light>:
200071b8:	00000000 	andeq	r0, r0, r0

200071bc <tempIndoors2Black>:
	...

200071c8 <tempIndoors2Light>:
	...

200071d4 <indoors2Black>:
200071d4:	00000000 	andeq	r0, r0, r0

200071d8 <trophyImages>:
	...

200071e4 <trophyBlack>:
200071e4:	00000000 	andeq	r0, r0, r0

200071e8 <trophyImage>:
	...

200071f4 <tempTrophyLight>:
	...

20007200 <trophyObj>:
	...

20007224 <trophyGray>:
20007224:	00000000 	andeq	r0, r0, r0

20007228 <tempTrophyBlack>:
	...

20007234 <tempTrophyGray>:
	...

20007240 <trophyLight>:
20007240:	00000000 	andeq	r0, r0, r0

20007244 <rogerImage>:
	...

20007250 <rogerGray>:
20007250:	00000000 	andeq	r0, r0, r0

20007254 <tempRogerGray>:
	...

20007260 <tempRogerLight>:
	...

2000726c <rogerLight>:
2000726c:	00000000 	andeq	r0, r0, r0

20007270 <rogerObj>:
	...

20007294 <tempRogerBlack>:
	...

200072a0 <rogerBlack>:
200072a0:	00000000 	andeq	r0, r0, r0

200072a4 <rogerImages>:
	...

200072b0 <monster_black_bits>:
	...
200072c0:	0001c000 	andeq	ip, r1, r0
200072c4:	00023000 	andeq	r3, r2, r0
200072c8:	00021000 	andeq	r1, r2, r0
200072cc:	00060800 	andeq	r0, r6, r0, lsl #16
200072d0:	00040800 	andeq	r0, r4, r0, lsl #16
200072d4:	00040800 	andeq	r0, r4, r0, lsl #16
200072d8:	00092800 	andeq	r2, r9, r0, lsl #16
200072dc:	00092800 	andeq	r2, r9, r0, lsl #16
200072e0:	00100400 	andseq	r0, r0, r0, lsl #8
200072e4:	00100400 	andseq	r0, r0, r0, lsl #8
200072e8:	00200200 	eoreq	r0, r0, r0, lsl #4
200072ec:	00661b00 	rsbeq	r1, r6, r0, lsl #22
200072f0:	0043b100 	subeq	fp, r3, r0, lsl #2
200072f4:	0080e080 	addeq	lr, r0, r0, lsl #1
200072f8:	01800080 	orreq	r0, r0, r0, lsl #1
200072fc:	01000040 	tsteq	r0, r0, asr #32
20007300:	02000040 	andeq	r0, r0, #64	; 0x40
20007304:	02000060 	andeq	r0, r0, #96	; 0x60
20007308:	02000020 	andeq	r0, r0, #32
2000730c:	03ff03e0 	mvnseq	r0, #224, 6	; 0x80000003
20007310:	0001fc00 	andeq	pc, r1, r0, lsl #24
	...

20007328 <monster_light_bits>:
	...
2000733c:	00010000 	andeq	r0, r1, r0
20007340:	00018000 	andeq	r8, r1, r0
20007344:	0001f000 	andeq	pc, r1, r0
20007348:	0001f000 	andeq	pc, r1, r0
2000734c:	00009000 	andeq	r9, r0, r0
20007350:	00009000 	andeq	r9, r0, r0
20007354:	0000d000 	andeq	sp, r0, r0
20007358:	0001f800 	andeq	pc, r1, r0, lsl #16
2000735c:	0003f800 	andeq	pc, r3, r0, lsl #16
20007360:	0003fc00 	andeq	pc, r3, r0, lsl #24
20007364:	0001e400 	andeq	lr, r1, r0, lsl #8
20007368:	00044c00 	andeq	r4, r4, r0, lsl #24
2000736c:	00060c00 	andeq	r0, r6, r0, lsl #24
20007370:	0006ee00 	andeq	lr, r6, r0, lsl #28
20007374:	000ffe00 	andeq	pc, pc, r0, lsl #28
20007378:	000f3f00 	andeq	r3, pc, r0, lsl #30
2000737c:	00000780 	andeq	r0, r0, r0, lsl #15
20007380:	000003c0 	andeq	r0, r0, r0, asr #7
	...

200073a0 <monster_gray_bits>:
	...
200073c0:	00020000 	andeq	r0, r2, r0
200073c4:	00000000 	andeq	r0, r0, r0
200073c8:	00040000 	andeq	r0, r4, r0
200073cc:	00060000 	andeq	r0, r6, r0
200073d0:	000e0000 	andeq	r0, lr, r0
200073d4:	000c0000 	andeq	r0, ip, r0
200073d8:	001c0000 	andseq	r0, ip, r0
200073dc:	00180000 	andseq	r0, r8, r0
200073e0:	00380000 	eorseq	r0, r8, r0
200073e4:	00780000 	rsbseq	r0, r8, r0
200073e8:	00780000 	rsbseq	r0, r8, r0
200073ec:	00f00000 	rscseq	r0, r0, r0
200073f0:	01f0c000 	mvnseq	ip, r0
200073f4:	01fff800 	mvnseq	pc, r0, lsl #16
200073f8:	01fffc00 	mvnseq	pc, r0, lsl #24
200073fc:	0000fc00 	andeq	pc, r0, r0, lsl #24
	...

20007418 <press_black_bits>:
	...
20007450:	001c0000 	andseq	r0, ip, r0
20007454:	00000000 	andeq	r0, r0, r0
20007458:	00240000 	eoreq	r0, r4, r0
2000745c:	00000000 	andeq	r0, r0, r0
20007460:	00440000 	subeq	r0, r4, r0
20007464:	00000000 	andeq	r0, r0, r0
20007468:	c5240000 	strgt	r0, [r4, #-0]!
2000746c:	00000198 	muleq	r0, r8, r1
20007470:	2b1c0000 	blcs	20707478 <firstTime.4040+0x6f7fbc>
20007474:	00000045 	andeq	r0, r0, r5, asr #32
20007478:	e1040000 	mrs	r0, (UNDEF: 4)
2000747c:	000000cd 	andeq	r0, r0, sp, asr #1
20007480:	21040000 	mrscs	r0, (UNDEF: 4)
20007484:	00000110 	andeq	r0, r0, r0, lsl r1
20007488:	c1040000 	mrsgt	r0, (UNDEF: 4)
2000748c:	000000cc 	andeq	r0, r0, ip, asr #1
	...
200074bc:	00000004 	andeq	r0, r0, r4
200074c0:	00000000 	andeq	r0, r0, r0
200074c4:	00000004 	andeq	r0, r0, r4
200074c8:	00000000 	andeq	r0, r0, r0
200074cc:	00000004 	andeq	r0, r0, r4
200074d0:	0494e000 	ldreq	lr, [r4], #0
200074d4:	00009334 	andeq	r9, r0, r4, lsr r3
200074d8:	04ac9000 	strteq	r9, [ip], #0
200074dc:	00009494 	muleq	r0, r4, r4
200074e0:	04a49000 	strteq	r9, [r4], #0
200074e4:	0000978c 	andeq	r9, r0, ip, lsl #15
200074e8:	04a49000 	strteq	r9, [r4], #0
200074ec:	00009094 	muleq	r0, r4, r0
200074f0:	07256000 	streq	r6, [r5, -r0]!
200074f4:	0000e324 	andeq	lr, r0, r4, lsr #6
200074f8:	04000000 	streq	r0, [r0], #-0
200074fc:	00008000 	andeq	r8, r0, r0
20007500:	04000000 	streq	r0, [r0], #-0
20007504:	00008000 	andeq	r8, r0, r0
20007508:	03000000 	movweq	r0, #0
2000750c:	00006000 	andeq	r6, r0, r0
	...

20007530 <press_light_bits>:
	...
20007570:	00000200 	andeq	r0, r0, r0, lsl #4
20007574:	00000000 	andeq	r0, r0, r0
20007578:	00000700 	andeq	r0, r0, r0, lsl #14
2000757c:	00000000 	andeq	r0, r0, r0
20007580:	00000200 	andeq	r0, r0, r0, lsl #4
	...
200075c4:	00800000 	addeq	r0, r0, r0
200075c8:	00000000 	andeq	r0, r0, r0
200075cc:	01c00000 	biceq	r0, r0, r0
200075d0:	00000000 	andeq	r0, r0, r0
200075d4:	00800000 	addeq	r0, r0, r0
200075d8:	00000010 	andeq	r0, r0, r0, lsl r0
200075dc:	00000000 	andeq	r0, r0, r0
200075e0:	00000038 	andeq	r0, r0, r8, lsr r0
200075e4:	00000000 	andeq	r0, r0, r0
200075e8:	00000010 	andeq	r0, r0, r0, lsl r0
	...

20007648 <press_gray_bits>:
	...
20007688:	00180000 	andseq	r0, r8, r0
2000768c:	00000000 	andeq	r0, r0, r0
20007690:	00380000 	eorseq	r0, r8, r0
20007694:	00000000 	andeq	r0, r0, r0
20007698:	00580000 	subseq	r0, r8, r0
2000769c:	00000020 	andeq	r0, r0, r0, lsr #32
200076a0:	d4200000 	strtle	r0, [r0], #-0
200076a4:	0000039a 	muleq	r0, sl, r3
200076a8:	0a380000 	beq	20e076b0 <firstTime.4040+0xdf81f4>
200076ac:	00000102 	andeq	r0, r0, r2, lsl #2
200076b0:	c2080000 	andgt	r0, r8, #0
200076b4:	00000223 	andeq	r0, r0, r3, lsr #4
200076b8:	02080000 	andeq	r0, r8, #0
200076bc:	00000311 	andeq	r0, r0, r1, lsl r3
200076c0:	c1080000 	mrsgt	r0, (UNDEF: 8)
200076c4:	000001dd 	ldrdeq	r0, [r0], -sp
	...
200076f4:	00000008 	andeq	r0, r0, r8
200076f8:	00000000 	andeq	r0, r0, r0
200076fc:	00000008 	andeq	r0, r0, r8
20007700:	00000000 	andeq	r0, r0, r0
20007704:	00000008 	andeq	r0, r0, r8
20007708:	09116000 	ldmdbeq	r1, {sp, lr}
2000770c:	00012328 	andeq	r2, r1, r8, lsr #6
20007710:	09596000 	ldmdbeq	r9, {sp, lr}^
20007714:	00012810 	andeq	r2, r1, r0, lsl r8
20007718:	0b492000 	bleq	2124f720 <firstTime.4040+0x1240264>
2000771c:	00012f08 	andeq	r2, r1, r8, lsl #30
20007720:	08488000 	stmdaeq	r8, {pc}^
20007724:	00010458 	andeq	r0, r1, r8, asr r4
20007728:	0b6be000 	bleq	21aff730 <firstTime.4040+0x1af0274>
2000772c:	00016768 	andeq	r6, r1, r8, ror #14
20007730:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
20007734:	00010000 	andeq	r0, r1, r0
20007738:	0c000000 	stceq	0, cr0, [r0], {-0}
2000773c:	00018000 	andeq	r8, r1, r0
20007740:	06000000 	streq	r0, [r0], -r0
20007744:	0000c000 	andeq	ip, r0, r0
	...

20007760 <castle_black_bits>:
20007760:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007764:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007768:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000776c:	00000000 	andeq	r0, r0, r0
20007770:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007774:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007778:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000777c:	00000000 	andeq	r0, r0, r0
20007780:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007784:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007788:	00000001 	andeq	r0, r0, r1
2000778c:	00000000 	andeq	r0, r0, r0
20007790:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007794:	7fffffff 	svcvc	0x00ffffff
	...
200077a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200077a4:	3fffffff 	svccc	0x00ffffff
	...
200077b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200077b4:	1fffffff 	svcne	0x00ffffff
	...
200077c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200077c4:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
	...
200077d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200077d4:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
	...
200077e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200077e4:	01ffffff 	ldrsheq	pc, [pc, #255]	; 200078eb <castle_black_bits+0x18b>	; <UNPREDICTABLE>
	...
200077f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200077f4:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
	...
20007800:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007804:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
	...
20007810:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007814:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20007820:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007824:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20007830:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007834:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20007840:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007844:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
20007850:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007854:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
20007860:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007864:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20007870:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007874:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20007880:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007884:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
20007890:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007894:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
200078a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200078a4:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
200078b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200078b4:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
200078c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200078c4:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
200078c8:	04900000 	ldreq	r0, [r0], #0
200078cc:	00000000 	andeq	r0, r0, r0
200078d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200078d4:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
200078d8:	0b680000 	bleq	21a078e0 <firstTime.4040+0x19f8424>
200078dc:	00000000 	andeq	r0, r0, r0
200078e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200078e4:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
200078e8:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
200078ec:	00000000 	andeq	r0, r0, r0
200078f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200078f4:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
200078f8:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
200078fc:	00000092 	muleq	r0, r2, r0
20007900:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007904:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20007908:	04100000 	ldreq	r0, [r0], #-0
2000790c:	0000016d 	andeq	r0, r0, sp, ror #2
20007910:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007914:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20007918:	04101240 	ldreq	r1, [r0], #-576	; 0xfffffdc0
2000791c:	00000101 	andeq	r0, r0, r1, lsl #2
20007920:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007924:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20007928:	04102da0 	ldreq	r2, [r0], #-3488	; 0xfffff260
2000792c:	00000101 	andeq	r0, r0, r1, lsl #2
20007930:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007934:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20007938:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
2000793c:	00000101 	andeq	r0, r0, r1, lsl #2
20007940:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007944:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20007948:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
2000794c:	00000101 	andeq	r0, r0, r1, lsl #2
20007950:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007954:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20007958:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
2000795c:	00000082 	andeq	r0, r0, r2, lsl #1
20007960:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007964:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20007968:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
2000796c:	00000092 	muleq	r0, r2, r0
20007970:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007974:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20007978:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
2000797c:	012400a2 	smulwbeq	r4, r2, r0
20007980:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007984:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20007988:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
2000798c:	02da00a2 	sbcseq	r0, sl, #162	; 0xa2
20007990:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007994:	00004fff 	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
20007998:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
2000799c:	020200a2 	andeq	r0, r2, #162	; 0xa2
200079a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200079a4:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200079a8:	08081040 	stmdaeq	r8, {r6, ip}
200079ac:	0202009a 	andeq	r0, r2, #154	; 0x9a
200079b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200079b4:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200079b8:	08082020 	stmdaeq	r8, {r5, sp}
200079bc:	01040082 	smlabbeq	r4, r2, r0, r0
200079c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200079c4:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200079c8:	48082020 	stmdami	r8, {r5, sp}
200079cc:	01040102 	tsteq	r4, r2, lsl #2
200079d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200079d4:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200079d8:	b0082020 	andlt	r2, r8, r0, lsr #32
200079dc:	01040101 	tsteq	r4, r1, lsl #2
200079e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200079e4:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200079e8:	00082220 	andeq	r2, r8, r0, lsr #4
200079ec:	01040100 	mrseq	r0, (UNDEF: 20)
200079f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200079f4:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200079f8:	00882420 	addeq	r2, r8, r0, lsr #8
200079fc:	01040100 	mrseq	r0, (UNDEF: 20)
20007a00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007a04:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20007a08:	01082420 	tsteq	r8, r0, lsr #8
20007a0c:	01045a00 	tsteq	r4, r0, lsl #20
20007a10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007a14:	0000007f 	andeq	r0, r0, pc, ror r0
20007a18:	01082420 	tsteq	r8, r0, lsr #8
20007a1c:	0104a400 	tsteq	r4, r0, lsl #8
20007a20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007a24:	00000001 	andeq	r0, r0, r1
20007a28:	010b2320 	tsteq	fp, r0, lsr #6
20007a2c:	01030001 	tsteq	r3, r1
20007a30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007a34:	00000000 	andeq	r0, r0, r0
20007a38:	00c4c020 	sbceq	ip, r4, r0, lsr #32
20007a3c:	02000002 	andeq	r0, r0, #2
20007a40:	3fffffff 	svccc	0x00ffffff
20007a44:	00000000 	andeq	r0, r0, r0
20007a48:	00000020 	andeq	r0, r0, r0, lsr #32
20007a4c:	02200002 	eoreq	r0, r0, #2
20007a50:	3fffffff 	svccc	0x00ffffff
20007a54:	00000000 	andeq	r0, r0, r0
20007a58:	00000020 	andeq	r0, r0, r0, lsr #32
20007a5c:	02400002 	subeq	r0, r0, #2
20007a60:	1fffffff 	svcne	0x00ffffff
20007a64:	00000000 	andeq	r0, r0, r0
20007a68:	80000020 	andhi	r0, r0, r0, lsr #32
20007a6c:	02400001 	subeq	r0, r0, #1
20007a70:	1fffffff 	svcne	0x00ffffff
20007a74:	00000000 	andeq	r0, r0, r0
20007a78:	00000010 	andeq	r0, r0, r0, lsl r0
20007a7c:	02400000 	subeq	r0, r0, #0
20007a80:	0fffffff 	svceq	0x00ffffff
20007a84:	00000000 	andeq	r0, r0, r0
20007a88:	00000010 	andeq	r0, r0, r0, lsl r0
20007a8c:	02300000 	eorseq	r0, r0, #0
20007a90:	0fffffff 	svceq	0x00ffffff
20007a94:	00000000 	andeq	r0, r0, r0
20007a98:	00000010 	andeq	r0, r0, r0, lsl r0
20007a9c:	02000000 	andeq	r0, r0, #0
20007aa0:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
20007aa4:	00000000 	andeq	r0, r0, r0
20007aa8:	00000010 	andeq	r0, r0, r0, lsl r0
20007aac:	04000000 	streq	r0, [r0], #-0
20007ab0:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
20007ab4:	00000000 	andeq	r0, r0, r0
20007ab8:	00000010 	andeq	r0, r0, r0, lsl r0
20007abc:	04000000 	streq	r0, [r0], #-0
20007ac0:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20007bc7 <castle_gray_bits+0x67>	; <UNPREDICTABLE>
20007ac4:	00000000 	andeq	r0, r0, r0
20007ac8:	00000008 	andeq	r0, r0, r8
20007acc:	04000000 	streq	r0, [r0], #-0
20007ad0:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20007bd7 <castle_gray_bits+0x77>	; <UNPREDICTABLE>
20007ad4:	00000000 	andeq	r0, r0, r0
20007ad8:	00000008 	andeq	r0, r0, r8
20007adc:	04000000 	streq	r0, [r0], #-0
20007ae0:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20007ae4:	00000000 	andeq	r0, r0, r0
20007ae8:	00000008 	andeq	r0, r0, r8
20007aec:	060001c0 	streq	r0, [r0], -r0, asr #3
20007af0:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20007af4:	00000000 	andeq	r0, r0, r0
20007af8:	00000008 	andeq	r0, r0, r8
20007afc:	04000220 	streq	r0, [r0], #-544	; 0xfffffde0
20007b00:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
20007b04:	00000000 	andeq	r0, r0, r0
20007b08:	00000008 	andeq	r0, r0, r8
20007b0c:	04100400 	ldreq	r0, [r0], #-1024	; 0xfffffc00
20007b10:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
20007b14:	00000000 	andeq	r0, r0, r0
20007b18:	00000008 	andeq	r0, r0, r8
20007b1c:	04a00400 	strteq	r0, [r0], #1024	; 0x400
20007b20:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
20007b24:	00000000 	andeq	r0, r0, r0
20007b28:	00000008 	andeq	r0, r0, r8
20007b2c:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
20007b30:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
20007b34:	00000000 	andeq	r0, r0, r0
20007b38:	00000008 	andeq	r0, r0, r8
20007b3c:	07400400 	strbeq	r0, [r0, -r0, lsl #8]
20007b40:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20007b44:	00000000 	andeq	r0, r0, r0
20007b48:	00000008 	andeq	r0, r0, r8
20007b4c:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
20007b50:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20007b54:	00000000 	andeq	r0, r0, r0
20007b58:	00000008 	andeq	r0, r0, r8
20007b5c:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00

20007b60 <castle_gray_bits>:
	...
20007b68:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20007b6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
20007b78:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20007b7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
20007b88:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20007b8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007b90:	00000000 	andeq	r0, r0, r0
20007b94:	80000000 	andhi	r0, r0, r0
20007b98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007b9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007ba0:	00000000 	andeq	r0, r0, r0
20007ba4:	c0000000 	andgt	r0, r0, r0
20007ba8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007bac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007bb0:	00000000 	andeq	r0, r0, r0
20007bb4:	e0000000 	and	r0, r0, r0
20007bb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007bbc:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
20007bc0:	00000000 	andeq	r0, r0, r0
20007bc4:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20007bc8:	f3ffcfff 			; <UNDEFINED> instruction: 0xf3ffcfff
20007bcc:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
20007bd0:	00000000 	andeq	r0, r0, r0
20007bd4:	fc000000 	stc2	0, cr0, [r0], {-0}
20007bd8:	f1ff8fff 			; <UNDEFINED> instruction: 0xf1ff8fff
20007bdc:	fff9ff3f 			; <UNDEFINED> instruction: 0xfff9ff3f
20007be0:	00000000 	andeq	r0, r0, r0
20007be4:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20007be8:	f0ff8fef 			; <UNDEFINED> instruction: 0xf0ff8fef
20007bec:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
20007bf0:	00000000 	andeq	r0, r0, r0
20007bf4:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20007bf8:	e0ff87ef 	rscs	r8, pc, pc, ror #15
20007bfc:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
20007c00:	00000000 	andeq	r0, r0, r0
20007c04:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20007c08:	c07e07e7 	rsbsgt	r0, lr, r7, ror #15
20007c0c:	ffe0fc1f 			; <UNDEFINED> instruction: 0xffe0fc1f
20007c10:	00000000 	andeq	r0, r0, r0
20007c14:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20007c18:	001c07e7 	andseq	r0, ip, r7, ror #15
20007c1c:	ffe0380e 	vcmla.f32	d19, d0, d14[0], #170
20007c20:	00000000 	andeq	r0, r0, r0
20007c24:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20007c28:	000003e3 	andeq	r0, r0, r3, ror #7
20007c2c:	f7c00000 			; <UNDEFINED> instruction: 0xf7c00000
20007c30:	00000000 	andeq	r0, r0, r0
20007c34:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20007c38:	000001c3 	andeq	r0, r0, r3, asr #3
20007c3c:	e7800000 	str	r0, [r0, r0]
20007c40:	00000000 	andeq	r0, r0, r0
20007c44:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20007c48:	00000003 	andeq	r0, r0, r3
20007c4c:	c3800000 	orrgt	r0, r0, #0
20007c50:	00000000 	andeq	r0, r0, r0
20007c54:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20007c58:	00000001 	andeq	r0, r0, r1
20007c5c:	c0000000 	andgt	r0, r0, r0
20007c60:	00000000 	andeq	r0, r0, r0
20007c64:	9ff00000 	svcls	0x00f00000	; IMB
20007c68:	00000001 	andeq	r0, r0, r1
20007c6c:	80000000 	andhi	r0, r0, r0
20007c70:	00000000 	andeq	r0, r0, r0
20007c74:	8ff00000 	svchi	0x00f00000	; IMB
20007c78:	00000000 	andeq	r0, r0, r0
20007c7c:	80000000 	andhi	r0, r0, r0
20007c80:	00000000 	andeq	r0, r0, r0
20007c84:	8ff80000 	svchi	0x00f80000
	...
20007c94:	0ffc0000 	svceq	0x00fc0000
	...
20007ca4:	0ffc0000 	svceq	0x00fc0000
	...
20007cb4:	0ffc0000 	svceq	0x00fc0000
	...
20007cc4:	0ffc0000 	svceq	0x00fc0000
	...
20007cd4:	0ffc0000 	svceq	0x00fc0000
	...
20007ce4:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
20007cf4:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
20007d04:	07fe0000 	ldrbeq	r0, [lr, r0]!
20007d08:	03800000 	orreq	r0, r0, #0
	...
20007d14:	03fe0000 	mvnseq	r0, #0
20007d18:	02000000 	andeq	r0, r0, #0
	...
20007d24:	03ff0000 	mvnseq	r0, #0
20007d28:	02000000 	andeq	r0, r0, #0
	...
20007d34:	03ff0000 	mvnseq	r0, #0
20007d38:	02000000 	andeq	r0, r0, #0
	...
20007d44:	03ff0000 	mvnseq	r0, #0
20007d48:	02000000 	andeq	r0, r0, #0
	...
20007d54:	03ff0000 	mvnseq	r0, #0
20007d58:	02800c00 	addeq	r0, r0, #0, 24
20007d5c:	00000060 	andeq	r0, r0, r0, rrx
20007d60:	00000000 	andeq	r0, r0, r0
20007d64:	03ff0000 	mvnseq	r0, #0
20007d68:	03000800 	movweq	r0, #2048	; 0x800
20007d6c:	00000040 	andeq	r0, r0, r0, asr #32
20007d70:	00000000 	andeq	r0, r0, r0
20007d74:	03ff0000 	mvnseq	r0, #0
20007d78:	03000800 	movweq	r0, #2048	; 0x800
20007d7c:	00000040 	andeq	r0, r0, r0, asr #32
20007d80:	00000000 	andeq	r0, r0, r0
20007d84:	03ff8000 	mvnseq	r8, #0
20007d88:	03000a00 	movweq	r0, #2560	; 0xa00
20007d8c:	00000040 	andeq	r0, r0, r0, asr #32
20007d90:	00000000 	andeq	r0, r0, r0
20007d94:	01ffb000 	mvnseq	fp, r0
20007d98:	03000c00 	movweq	r0, #3072	; 0xc00
20007d9c:	00000040 	andeq	r0, r0, r0, asr #32
20007da0:	00000000 	andeq	r0, r0, r0
20007da4:	01fff800 	mvnseq	pc, r0, lsl #16
20007da8:	07800c00 	streq	r0, [r0, r0, lsl #24]
20007dac:	00000060 	andeq	r0, r0, r0, rrx
20007db0:	00000000 	andeq	r0, r0, r0
20007db4:	01fffc00 	mvnseq	pc, r0, lsl #24
20007db8:	04001800 	streq	r1, [r0], #-2048	; 0xfffff800
20007dbc:	00c00058 	sbceq	r0, r0, r8, asr r0
20007dc0:	00000000 	andeq	r0, r0, r0
20007dc4:	00fffc00 	rscseq	pc, pc, r0, lsl #24
20007dc8:	06001400 	streq	r1, [r0], -r0, lsl #8
20007dcc:	00c000c0 	sbceq	r0, r0, r0, asr #1
20007dd0:	00000000 	andeq	r0, r0, r0
20007dd4:	007ffc00 	rsbseq	pc, pc, r0, lsl #24
20007dd8:	45001000 	strmi	r1, [r0, #-0]
20007ddc:	008000a0 	addeq	r0, r0, r0, lsr #1
20007de0:	00000000 	andeq	r0, r0, r0
20007de4:	007ffe00 	rsbseq	pc, pc, r0, lsl #28
20007de8:	80001000 	andhi	r1, r0, r0
20007dec:	008000c1 	addeq	r0, r0, r1, asr #1
20007df0:	00000000 	andeq	r0, r0, r0
20007df4:	003ffe00 	eorseq	pc, pc, r0, lsl #28
20007df8:	00001000 	andeq	r1, r0, r0
20007dfc:	00a000f0 	strdeq	r0, [r0], r0	; <UNPREDICTABLE>
20007e00:	00000000 	andeq	r0, r0, r0
20007e04:	003fff00 	eorseq	pc, pc, r0, lsl #30
20007e08:	00001000 	andeq	r1, r0, r0
20007e0c:	00c000e0 	sbceq	r0, r0, r0, ror #1
20007e10:	00000000 	andeq	r0, r0, r0
20007e14:	001fff80 	andseq	pc, pc, r0, lsl #31
20007e18:	02001800 	andeq	r1, r0, #0, 16
20007e1c:	00c000c0 	sbceq	r0, r0, r0, asr #1
20007e20:	00000000 	andeq	r0, r0, r0
20007e24:	0019fffe 			; <UNDEFINED> instruction: 0x0019fffe
20007e28:	02001400 	andeq	r1, r0, #0, 8
20007e2c:	00803000 	addeq	r3, r0, r0
20007e30:	00000000 	andeq	r0, r0, r0
20007e34:	0018ffff 			; <UNDEFINED> instruction: 0x0018ffff
20007e38:	05033f00 	streq	r3, [r3, #-3840]	; 0xfffff100
20007e3c:	01000000 	mrseq	r0, (UNDEF: 0)
20007e40:	c0000000 	andgt	r0, r0, r0
20007e44:	0008ffff 	strdeq	pc, [r8], -pc	; <UNPREDICTABLE>
20007e48:	00c0e400 	sbceq	lr, r0, r0, lsl #8
20007e4c:	01000004 	tsteq	r0, r4
20007e50:	c0000000 	andgt	r0, r0, r0
20007e54:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20007e58:	00002000 	andeq	r2, r0, r0
20007e5c:	01000008 	tsteq	r0, r8
20007e60:	e0000000 	and	r0, r0, r0
20007e64:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20007e68:	00001000 	andeq	r1, r0, r0
20007e6c:	01000006 	tsteq	r0, r6
20007e70:	e0000000 	and	r0, r0, r0
20007e74:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
20007e78:	80000000 	andhi	r0, r0, r0
20007e7c:	01800001 	orreq	r0, r0, r1
20007e80:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20007e84:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
20007e88:	00400000 	subeq	r0, r0, r0
20007e8c:	01400000 	mrseq	r0, (UNDEF: 64)
20007e90:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20007e94:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
20007e98:	03800000 	orreq	r0, r0, #0
20007e9c:	01300000 	teqeq	r0, r0
20007ea0:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20007ea4:	00001bff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
20007ea8:	10e00000 	rscne	r0, r0, r0
20007eac:	03000000 	movweq	r0, #0
20007eb0:	fc000000 	stc2	0, cr0, [r0], {-0}
20007eb4:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20007eb8:	0f800000 	svceq	0x00800000
20007ebc:	03900000 	orrseq	r0, r0, #0
20007ec0:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20007ec4:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20007ec8:	00000000 	andeq	r0, r0, r0
20007ecc:	03e00000 	mvneq	r0, #0
20007ed0:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20007ed4:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20007ed8:	00000000 	andeq	r0, r0, r0
20007edc:	03f40000 	mvnseq	r0, #0
20007ee0:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20007ee4:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20007ee8:	00002000 	andeq	r2, r0, r0
20007eec:	01f80000 	mvnseq	r0, r0
20007ef0:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20007ef4:	0000007f 	andeq	r0, r0, pc, ror r0
20007ef8:	0010c000 	andseq	ip, r0, r0
20007efc:	03f80000 	mvnseq	r0, #0
20007f00:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20007f04:	0000003f 	andeq	r0, r0, pc, lsr r0
20007f08:	000f0000 	andeq	r0, pc, r0
20007f0c:	03e000e0 	mvneq	r0, #224	; 0xe0
20007f10:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20007f14:	0000001f 	andeq	r0, r0, pc, lsl r0
20007f18:	00026000 	andeq	r6, r2, r0
20007f1c:	035001f0 	cmpeq	r0, #240, 2	; 0x3c
20007f20:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20007f24:	0000001f 	andeq	r0, r0, pc, lsl r0
20007f28:	00118000 	andseq	r8, r1, r0
20007f2c:	03ec01f0 	mvneq	r0, #240, 2	; 0x3c
20007f30:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
20007f34:	0000000f 	andeq	r0, r0, pc
20007f38:	200e0000 	andcs	r0, lr, r0
20007f3c:	00a022f0 	strdeq	r2, [r0], r0	; <UNPREDICTABLE>
20007f40:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
20007f44:	00000007 	andeq	r0, r0, r7
20007f48:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
20007f4c:	03c0c170 	biceq	ip, r0, #112, 2
20007f50:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
20007f54:	00000003 	andeq	r0, r0, r3
20007f58:	e4000000 	str	r0, [r0], #-0
20007f5c:	03c270f3 	biceq	r7, r2, #243	; 0xf3

20007f60 <castle_light_bits>:
	...
20007fbc:	00000040 	andeq	r0, r0, r0, asr #32
	...
20007fc8:	0c003000 	stceq	0, cr3, [r0], {-0}
20007fcc:	00000040 	andeq	r0, r0, r0, asr #32
	...
20007fd8:	0e007000 	cdpeq	0, 0, cr7, cr0, cr0, {0}
20007fdc:	000600c0 	andeq	r0, r6, r0, asr #1
	...
20007fe8:	0f007010 	svceq	0x00007010
20007fec:	000601e0 	andeq	r0, r6, r0, ror #3
	...
20007ff8:	1f007810 	svcne	0x00007810
20007ffc:	000601e0 	andeq	r0, r6, r0, ror #3
	...
20008008:	3f81f818 	svccc	0x0081f818
2000800c:	001f03e0 	andseq	r0, pc, r0, ror #7
	...
20008018:	ffe3f818 			; <UNDEFINED> instruction: 0xffe3f818
2000801c:	001fc7f1 			; <UNDEFINED> instruction: 0x001fc7f1
	...
20008028:	fffffc1c 			; <UNDEFINED> instruction: 0xfffffc1c
2000802c:	083fffff 	ldmdaeq	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
	...
20008038:	fffffe3c 			; <UNDEFINED> instruction: 0xfffffe3c
2000803c:	187fffff 	ldmdane	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
	...
20008048:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
2000804c:	3c7fffff 	ldclcc	15, cr15, [pc], #-1020	; 20007c58 <castle_gray_bits+0xf8>
	...
20008058:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
2000805c:	3fffffff 	svccc	0x00ffffff
20008060:	00000000 	andeq	r0, r0, r0
20008064:	60000000 	andvs	r0, r0, r0
20008068:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
2000806c:	7fffffff 	svcvc	0x00ffffff
20008070:	00000000 	andeq	r0, r0, r0
20008074:	70000000 	andvc	r0, r0, r0
20008078:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000807c:	7fffffff 	svcvc	0x00ffffff
20008080:	00000000 	andeq	r0, r0, r0
20008084:	70000000 	andvc	r0, r0, r0
20008088:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000808c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008090:	00000000 	andeq	r0, r0, r0
20008094:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20008098:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000809c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080a0:	00000000 	andeq	r0, r0, r0
200080a4:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
200080a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080b0:	00000000 	andeq	r0, r0, r0
200080b4:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
200080b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080c0:	00000000 	andeq	r0, r0, r0
200080c4:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
200080c8:	fb6fffff 	blx	21c080ce <firstTime.4040+0x1bf8c12>
200080cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080d0:	00000000 	andeq	r0, r0, r0
200080d4:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
200080d8:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
200080dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080e0:	00000000 	andeq	r0, r0, r0
200080e4:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200080e8:	f407ffff 			; <UNDEFINED> instruction: 0xf407ffff
200080ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200080f0:	00000000 	andeq	r0, r0, r0
200080f4:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200080f8:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
200080fc:	ffffff6d 			; <UNDEFINED> instruction: 0xffffff6d
20008100:	00000000 	andeq	r0, r0, r0
20008104:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20008108:	f80fffff 			; <UNDEFINED> instruction: 0xf80fffff
2000810c:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20008110:	00000000 	andeq	r0, r0, r0
20008114:	fc000000 	stc2	0, cr0, [r0], {-0}
20008118:	f80fedbf 			; <UNDEFINED> instruction: 0xf80fedbf
2000811c:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20008120:	00000000 	andeq	r0, r0, r0
20008124:	fc000000 	stc2	0, cr0, [r0], {-0}
20008128:	f80fc01f 			; <UNDEFINED> instruction: 0xf80fc01f
2000812c:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
20008130:	00000000 	andeq	r0, r0, r0
20008134:	fc000000 	stc2	0, cr0, [r0], {-0}
20008138:	f90fc81f 			; <UNDEFINED> instruction: 0xf90fc81f
2000813c:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
20008140:	00000000 	andeq	r0, r0, r0
20008144:	fc000000 	stc2	0, cr0, [r0], {-0}
20008148:	f90fd41f 			; <UNDEFINED> instruction: 0xf90fd41f
2000814c:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20008150:	00000000 	andeq	r0, r0, r0
20008154:	fc000000 	stc2	0, cr0, [r0], {-0}
20008158:	f90fe03f 			; <UNDEFINED> instruction: 0xf90fe03f
2000815c:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
20008160:	00000000 	andeq	r0, r0, r0
20008164:	fc000000 	stc2	0, cr0, [r0], {-0}
20008168:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
2000816c:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
20008170:	00000000 	andeq	r0, r0, r0
20008174:	fc000000 	stc2	0, cr0, [r0], {-0}
20008178:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
2000817c:	fedbff19 	mrc2	15, 6, pc, cr11, cr9, {0}
20008180:	00000000 	andeq	r0, r0, r0
20008184:	fc000000 	stc2	0, cr0, [r0], {-0}
20008188:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
2000818c:	fd01ff11 	stc2	15, cr15, [r1, #-68]	; 0xffffffbc
20008190:	00000000 	andeq	r0, r0, r0
20008194:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20008198:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
2000819c:	fd01ff19 	stc2	15, cr15, [r1, #-100]	; 0xffffff9c
200081a0:	00000000 	andeq	r0, r0, r0
200081a4:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
200081a8:	f007e03f 			; <UNDEFINED> instruction: 0xf007e03f
200081ac:	fc01ff01 	stc2	15, cr15, [r1], {1}
200081b0:	00000000 	andeq	r0, r0, r0
200081b4:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
200081b8:	f007c01f 			; <UNDEFINED> instruction: 0xf007c01f
200081bc:	fe03ff01 	cdp2	15, 0, cr15, cr3, cr1, {0}
200081c0:	00000000 	andeq	r0, r0, r0
200081c4:	ff000000 			; <UNDEFINED> instruction: 0xff000000
200081c8:	b007c01f 	andlt	ip, r7, pc, lsl r0
200081cc:	fe03fe01 	cdp2	14, 0, cr15, cr3, cr1, {0}
200081d0:	00000000 	andeq	r0, r0, r0
200081d4:	ff800000 			; <UNDEFINED> instruction: 0xff800000
200081d8:	0007c01f 	andeq	ip, r7, pc, lsl r0
200081dc:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
200081e0:	00000000 	andeq	r0, r0, r0
200081e4:	ff800000 			; <UNDEFINED> instruction: 0xff800000
200081e8:	0007c01f 	andeq	ip, r7, pc, lsl r0
200081ec:	fe03fe10 	mcr2	14, 0, pc, cr3, cr0, {0}	; <UNPREDICTABLE>
200081f0:	00000000 	andeq	r0, r0, r0
200081f4:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
200081f8:	0007c21f 	andeq	ip, r7, pc, lsl r2
200081fc:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
20008200:	00000000 	andeq	r0, r0, r0
20008204:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20008208:	0087c31f 	addeq	ip, r7, pc, lsl r3
2000820c:	fe03a400 	cdp2	4, 0, cr10, cr3, cr0, {0}
20008210:	00000000 	andeq	r0, r0, r0
20008214:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20008218:	00c7c31f 	sbceq	ip, r7, pc, lsl r3
2000821c:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
20008220:	00000000 	andeq	r0, r0, r0
20008224:	ffe60000 			; <UNDEFINED> instruction: 0xffe60000
20008228:	00c4c01f 	sbceq	ip, r4, pc, lsl r0
2000822c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20008230:	00000000 	andeq	r0, r0, r0
20008234:	ffe70000 			; <UNDEFINED> instruction: 0xffe70000
20008238:	8000001f 	andhi	r0, r0, pc, lsl r0
2000823c:	fc000001 	stc2	0, cr0, [r0], {1}
20008240:	00000000 	andeq	r0, r0, r0
20008244:	fff70000 			; <UNDEFINED> instruction: 0xfff70000
20008248:	8000001f 	andhi	r0, r0, pc, lsl r0
2000824c:	fc000009 	stc2	0, cr0, [r0], {9}
20008250:	00000000 	andeq	r0, r0, r0
20008254:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20008258:	8000001f 	andhi	r0, r0, pc, lsl r0
2000825c:	fc200001 	stc2	0, cr0, [r0], #-4
20008260:	00000000 	andeq	r0, r0, r0
20008264:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20008268:	0000001f 	andeq	r0, r0, pc, lsl r0
2000826c:	fc300000 	ldc2	0, cr0, [r0], #-0
20008270:	00000000 	andeq	r0, r0, r0
20008274:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20008278:	0000000f 	andeq	r0, r0, pc
2000827c:	fc300000 	ldc2	0, cr0, [r0], #-0
20008280:	00000000 	andeq	r0, r0, r0
20008284:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20008288:	0000000f 	andeq	r0, r0, pc
2000828c:	fc000000 	stc2	0, cr0, [r0], {-0}
20008290:	00000000 	andeq	r0, r0, r0
20008294:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
20008298:	1000000f 	andne	r0, r0, pc
2000829c:	fc000000 	stc2	0, cr0, [r0], {-0}
200082a0:	00000000 	andeq	r0, r0, r0
200082a4:	ffffe400 			; <UNDEFINED> instruction: 0xffffe400
200082a8:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
200082ac:	f8080000 			; <UNDEFINED> instruction: 0xf8080000
200082b0:	00000000 	andeq	r0, r0, r0
200082b4:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200082b8:	0000000f 	andeq	r0, r0, pc
200082bc:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200082c0:	00000000 	andeq	r0, r0, r0
200082c4:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200082c8:	00000007 	andeq	r0, r0, r7
200082cc:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
200082d0:	00000000 	andeq	r0, r0, r0
200082d4:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
200082d8:	00000007 	andeq	r0, r0, r7
200082dc:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
200082e0:	00000000 	andeq	r0, r0, r0
200082e4:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
200082e8:	00100007 	andseq	r0, r0, r7
200082ec:	f8040000 			; <UNDEFINED> instruction: 0xf8040000
200082f0:	00000000 	andeq	r0, r0, r0
200082f4:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
200082f8:	00080007 	andeq	r0, r8, r7
200082fc:	f80001c0 			; <UNDEFINED> instruction: 0xf80001c0
20008300:	00000000 	andeq	r0, r0, r0
20008304:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
20008308:	00000007 	andeq	r0, r0, r7
2000830c:	f8080300 			; <UNDEFINED> instruction: 0xf8080300
20008310:	00000000 	andeq	r0, r0, r0
20008314:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
20008318:	00200007 	eoreq	r0, r0, r7
2000831c:	f8080200 			; <UNDEFINED> instruction: 0xf8080200
20008320:	00000000 	andeq	r0, r0, r0
20008324:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
20008328:	00000007 	andeq	r0, r0, r7
2000832c:	f8000200 			; <UNDEFINED> instruction: 0xf8000200
20008330:	00000000 	andeq	r0, r0, r0
20008334:	fffffff0 			; <UNDEFINED> instruction: 0xfffffff0
20008338:	00000007 	andeq	r0, r0, r7
2000833c:	f8000100 			; <UNDEFINED> instruction: 0xf8000100
20008340:	00000000 	andeq	r0, r0, r0
20008344:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
20008348:	01000007 	tsteq	r0, r7
2000834c:	f8100280 			; <UNDEFINED> instruction: 0xf8100280
20008350:	00000000 	andeq	r0, r0, r0
20008354:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20008358:	02000007 	andeq	r0, r0, #7
2000835c:	f8000300 			; <UNDEFINED> instruction: 0xf8000300

20008360 <title_light_bits>:
	...
2000837c:	00000400 	andeq	r0, r0, r0, lsl #8
20008380:	30000000 	andcc	r0, r0, r0
20008384:	f80f9e06 			; <UNDEFINED> instruction: 0xf80f9e06
20008388:	06300000 	ldrteq	r0, [r0], -r0
2000838c:	00cb8cba 	strheq	r8, [fp], #202	; 0xca
20008390:	ba033000 	blt	200d4398 <firstTime.4040+0xc4edc>
20008394:	0000eb4f 	andeq	lr, r0, pc, asr #22
20008398:	439ef3f0 	orrsmi	pc, lr, #240, 6	; 0xc0000003
2000839c:	f000003a 			; <UNDEFINED> instruction: 0xf000003a
200083a0:	5a478e9b 	bpl	211ebe14 <firstTime.4040+0x11dc958>
200083a4:	9b300000 	blls	20c083ac <firstTime.4040+0xbf8ef0>
200083a8:	019bcd36 	orrseq	ip, fp, r6, lsr sp
200083ac:	66db3000 	ldrbvs	r3, [fp], r0
200083b0:	000319d9 	ldrdeq	r1, [r3], -r9
200083b4:	19667330 	stmdbne	r6!, {r4, r5, r8, r9, ip, sp, lr}^
200083b8:	30000310 	andcc	r0, r0, r0, lsl r3
200083bc:	00000001 	andeq	r0, r0, r1
200083c0:	80000000 	andhi	r0, r0, r0
200083c4:	001d3e7b 	andseq	r3, sp, fp, ror lr
200083c8:	0ac00000 	beq	1f0083d0 <startup-0xff7c30>
200083cc:	00000528 	andeq	r0, r0, r8, lsr #10
200083d0:	ec3a4000 	ldc	0, cr4, [sl], #-0
200083d4:	0000000d 	andeq	r0, r0, sp
200083d8:	05240bc0 	streq	r0, [r4, #-3008]!	; 0xfffff440
200083dc:	00f00000 	rscseq	r0, r0, r0
200083e0:	001c0000 	andseq	r0, ip, r0
200083e4:	03ebb000 	mvneq	fp, #0
200083e8:	00000000 	andeq	r0, r0, r0
200083ec:	0c032330 	stceq	3, cr2, [r3], {48}	; 0x30
200083f0:	300123e4 	andcc	r2, r1, r4, ror #7
200083f4:	940c1b2a 	strls	r1, [ip], #-2858	; 0xfffff4d6
200083f8:	ea300120 	b	20c08880 <firstTime.4040+0xbf93c4>
200083fc:	ec860c3d 	stc	12, cr0, [r6], {61}	; 0x3d
20008400:	06ea3001 	strbteq	r3, [sl], r1
20008404:	01e69648 	mvneq	r9, r8, asr #12
20008408:	4b9e6b30 	blmi	1e7a30d0 <startup-0x185cf30>
2000840c:	30012696 	mulcc	r1, r6, r6
20008410:	92bbb06b 	adcsls	fp, fp, #107	; 0x6b
20008414:	69f00126 	ldmibvs	r0!, {r1, r2, r5, r8}^
20008418:	2691b832 			; <UNDEFINED> instruction: 0x2691b832
2000841c:	1e687001 	cdpne	0, 6, cr7, cr8, cr1, {0}
20008420:	010e9110 	tsteq	lr, r0, lsl r1
	...

20008434 <title_gray_bits>:
	...
2000843c:	40000000 	andmi	r0, r0, r0
20008440:	0f840000 	svceq	0x00840000
20008444:	00b0c3fe 	ldrshteq	ip, [r0], lr
20008448:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
2000844c:	001f8f1f 	andseq	r8, pc, pc, lsl pc	; <UNPREDICTABLE>
20008450:	fffffbf8 			; <UNDEFINED> instruction: 0xfffffbf8
20008454:	c8001fff 	stmdagt	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
20008458:	07f061f9 			; <UNDEFINED> instruction: 0x07f061f9
2000845c:	f1cc001f 			; <UNDEFINED> instruction: 0xf1cc001f
20008460:	be347305 	cdplt	3, 3, cr7, cr4, cr5, {0}
20008464:	05f0ce00 	ldrbeq	ip, [r0, #3584]!	; 0xe00
20008468:	007e1430 	rsbseq	r1, lr, r0, lsr r4
2000846c:	2041080f 	subcs	r0, r1, pc, lsl #16
20008470:	0e003e01 	cdpeq	14, 0, cr3, cr0, cr1, {0}
20008474:	01384060 	teqeq	r8, r0, rrx
20008478:	600c001e 	andvs	r0, ip, lr, lsl r0
2000847c:	1c4030c0 	mcrrne	0, 12, r3, r0, cr0
20008480:	10208c00 	eorne	r8, r0, r0, lsl #24
20008484:	0038c024 	eorseq	ip, r8, r4, lsr #32
20008488:	0411088c 	ldreq	r0, [r1], #-2188	; 0xfffff774
2000848c:	c800f8ce 	stmdagt	r0, {r1, r2, r3, r6, r7, fp, ip, sp, lr, pc}
20008490:	ffe6990c 			; <UNDEFINED> instruction: 0xffe6990c
20008494:	7cfa0178 	ldfvce	f0, [sl], #480	; 0x1e0
20008498:	3fe0c184 	svccc	0x00e0c184
2000849c:	013ff400 	teqeq	pc, r0, lsl #8	; <UNPREDICTABLE>
200084a0:	001fc0c7 	andseq	ip, pc, r7, asr #1
200084a4:	03c03ff0 	biceq	r3, r0, #240, 30	; 0x3c0
200084a8:	fc0007e0 	stc2	7, cr0, [r0], {224}	; 0xe0
200084ac:	e003803f 	and	r8, r3, pc, lsr r0
200084b0:	7f0c009f 	svcvc	0x000c009f
200084b4:	ffc1fbe4 			; <UNDEFINED> instruction: 0xffc1fbe4
200084b8:	fc140c03 	ldc2	12, cr0, [r4], {3}
200084bc:	03ffc7ff 	mvnseq	ip, #66846720	; 0x3fc0000
200084c0:	f3fc1c0c 	vdup.32	d17, d12[1]
200084c4:	0e02dc1b 	mcreq	12, 0, sp, cr2, cr11, {0}
200084c8:	63f3e490 	mvnsvs	lr, #144, 8	; 0x90000000
200084cc:	018e0218 	orreq	r0, lr, r8, lsl r2
200084d0:	1251e382 	subsne	lr, r1, #134217730	; 0x8000002
200084d4:	88018e02 	stmdahi	r1, {r1, r9, sl, fp, pc}
200084d8:	020061a7 	andeq	r6, r0, #-1073741783	; 0xc0000029
200084dc:	2460008e 	strbtcs	r0, [r0], #-142	; 0xffffff72
200084e0:	8e021041 	cdphi	0, 0, cr1, cr2, cr1, {2}
200084e4:	41000300 	mrsmi	r0, LR_irq
200084e8:	000e0290 	muleq	lr, r0, r2
200084ec:	9048008d 	subls	r0, r8, sp, lsl #1
200084f0:	81040c02 	tsthi	r4, r2, lsl #24
200084f4:	02a04c87 	adceq	r4, r0, #34560	; 0x8700
200084f8:	cffffffc 	svcgt	0x00fffffc
200084fc:	8203e2fc 	andhi	lr, r3, #252, 4	; 0xc000000f
20008500:	e3f81c07 	mvns	r1, #1792	; 0x700
20008504:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20008508 <title_black_bits>:
	...
20008530:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
20008534:	01000040 	tsteq	r0, r0, asr #32
20008538:	400c0000 	andmi	r0, ip, r0
2000853c:	00010080 	andeq	r0, r1, r0, lsl #1
20008540:	9c200400 	cfstrsls	mvf0, [r0], #-0
20008544:	000001c4 	andeq	r0, r0, r4, asr #3
20008548:	a4803104 	strge	r3, [r0], #260	; 0x104
2000854c:	04c00001 	strbeq	r0, [r0], #1
20008550:	02240209 	eoreq	r0, r4, #-1879048192	; 0x90000000
20008554:	89044000 	stmdbhi	r4, {lr}
20008558:	00042602 	andeq	r2, r4, r2, lsl #12
2000855c:	e2888440 	add	r8, r8, #64, 8	; 0x40000000
20008560:	00000421 	andeq	r0, r0, r1, lsr #8
20008564:	001966f2 			; <UNDEFINED> instruction: 0x001966f2
20008568:	03000007 	movweq	r0, #7
2000856c:	00020000 	andeq	r0, r2, r0
20008570:	f4000000 	vst4.8	{d0-d3}, [r0], r0
20008574:	00003a10 	andeq	r3, r0, r0, lsl sl
20008578:	10058000 	andne	r8, r5, r0
2000857c:	00000012 	andeq	r0, r0, r2, lsl r0
20008580:	1ad87400 	bne	1f625588 <startup-0x9daa78>
20008584:	80000000 	andhi	r0, r0, r0
20008588:	0022041b 	eoreq	r0, r2, fp, lsl r4
2000858c:	00004000 	andeq	r4, r0, r0
20008590:	00003800 	andeq	r3, r0, r0, lsl #16
20008594:	0000c0c0 	andeq	ip, r0, r0, asr #1
20008598:	c0000000 	andgt	r0, r0, r0
2000859c:	08000045 	stmdaeq	r0, {r0, r2, r6}
200085a0:	144000c7 	strbne	r0, [r0], #-199	; 0xffffff39
200085a4:	01281040 			; <UNDEFINED> instruction: 0x01281040
200085a8:	71144000 	tstvc	r4, r0
200085ac:	00190810 	andseq	r0, r9, r0, lsl r8
200085b0:	90019440 	andls	r9, r1, r0, asr #8
200085b4:	4000c928 	andmi	ip, r0, r8, lsr #18
200085b8:	2c444c94 	mcrrcs	12, 9, r4, r4, cr4
200085bc:	96000049 	strls	r0, [r0], -r9, asr #32
200085c0:	49264740 	stmdbmi	r6!, {r6, r8, r9, sl, lr}
200085c4:	60938000 	addsvs	r8, r3, r0
200085c8:	00512268 	subseq	r2, r1, r8, ror #4
200085cc:	30000000 	andcc	r0, r0, r0
200085d0:	00001d03 	andeq	r1, r0, r3, lsl #26
	...

200085dc <bg_bits>:
	...
200085ec:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
200085f0:	0000001f 	andeq	r0, r0, pc, lsl r0
	...
200085fc:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
20008600:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
2000860c:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
20008610:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
	...
2000861c:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20008620:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
	...
2000862c:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20008630:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
2000863c:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20008640:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
2000864c:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
20008650:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20008757 <bg_bits+0x17b>	; <UNPREDICTABLE>
20008654:	0001f000 	andeq	pc, r1, r0
20008658:	00000000 	andeq	r0, r0, r0
2000865c:	007fe000 	rsbseq	lr, pc, r0
20008660:	0ffffffe 	svceq	0x00fffffe
20008664:	0003f800 	andeq	pc, r3, r0, lsl #16
20008668:	00000000 	andeq	r0, r0, r0
2000866c:	003fe000 	eorseq	lr, pc, r0
20008670:	7fffffc0 	svcvc	0x00ffffc0
20008674:	0003f800 	andeq	pc, r3, r0, lsl #16
20008678:	001f8000 	andseq	r8, pc, r0
2000867c:	001fe000 	andseq	lr, pc, r0
20008680:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20008684:	0003f801 	andeq	pc, r3, r1, lsl #16
20008688:	003fc000 	eorseq	ip, pc, r0
2000868c:	003fe000 	eorseq	lr, pc, r0
20008690:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
20008694:	3f83f807 	svccc	0x0083f807
20008698:	003fe000 	eorseq	lr, pc, r0
2000869c:	01ffe000 	mvnseq	lr, r0
200086a0:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200086a4:	7fc3f80f 	svcvc	0x00c3f80f
200086a8:	003fe7f8 	ldrshteq	lr, [pc], -r8
200086ac:	07ffe000 	ldrbeq	lr, [pc, r0]!
200086b0:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
200086b4:	7fe1f01f 	svcvc	0x00e1f01f
200086b8:	003ffffc 	ldrshteq	pc, [pc], -ip	; <UNPREDICTABLE>
200086bc:	3fffc000 	svccc	0x00ffc000
200086c0:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
200086c4:	7ff0003f 	svcvc	0x00f0003f
200086c8:	007ffffc 	ldrshteq	pc, [pc], #-252	; <UNPREDICTABLE>
200086cc:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
200086d0:	ff000000 			; <UNDEFINED> instruction: 0xff000000
200086d4:	7ff8007f 	svcvc	0x00f8007f
200086d8:	3ffffffc 	svccc	0x00fffffc
200086dc:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
200086e0:	f8000003 			; <UNDEFINED> instruction: 0xf8000003
200086e4:	7ffc00ff 	svcvc	0x00fc00ff
200086e8:	7ffffffc 	svcvc	0x00fffffc
200086ec:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200086f0:	e000000f 	and	r0, r0, pc
200086f4:	7ffe01ff 	svcvc	0x00fe01ff
200086f8:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
200086fc:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
20008700:	8000001f 	andhi	r0, r0, pc, lsl r0
20008704:	7fff01ff 	svcvc	0x00ff01ff
20008708:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
2000870c:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20008710:	0000007f 	andeq	r0, r0, pc, ror r0
20008714:	7fff83ff 	svcvc	0x00ff83ff
20008718:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
2000871c:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20008720:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20008724:	7fffc3fe 	svcvc	0x00ffc3fe
20008728:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
2000872c:	fc7ffff0 	ldc2l	15, cr15, [pc], #-960	; 20008374 <title_light_bits+0x14>
20008730:	07c001ff 			; <UNDEFINED> instruction: 0x07c001ff
20008734:	7fffe7fc 	svcvc	0x00ffe7fc
20008738:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
2000873c:	f0fffffe 			; <UNDEFINED> instruction: 0xf0fffffe
20008740:	0fe007ff 	svceq	0x00e007ff
20008744:	7ffff7fc 	svcvc	0x00fff7fc
20008748:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
2000874c:	c0ffffff 	ldrshtgt	pc, [pc], #255	; <UNPREDICTABLE>
20008750:	0fe00fff 	svceq	0x00e00fff
20008754:	7ffffff8 	svcvc	0x00fffff8
20008758:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
2000875c:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20008863 <bg_bits+0x287>	; <UNPREDICTABLE>
20008760:	0fe01fff 	svceq	0x00e01fff
20008764:	7ffffff8 	svcvc	0x00fffff8
20008768:	7ffffc00 	svcvc	0x00fffc00
2000876c:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20008873 <bg_bits+0x297>	; <UNPREDICTABLE>
20008770:	0fe03ffe 	svceq	0x00e03ffe
20008774:	3fdffff0 	svccc	0x00dffff0
20008778:	3ffffe00 	svccc	0x00fffe00
2000877c:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20008883 <bg_bits+0x2a7>	; <UNPREDICTABLE>
20008780:	0fe03ff8 	svceq	0x00e03ff8
20008784:	3fe7fff0 	svccc	0x00e7fff0
20008788:	07fffe00 	ldrbeq	pc, [pc, r0, lsl #28]!	; <UNPREDICTABLE>
2000878c:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
20008790:	07c07ff0 			; <UNDEFINED> instruction: 0x07c07ff0
20008794:	1fe7fff0 	svcne	0x00e7fff0
20008798:	0ffffe00 	svceq	0x00fffe00
2000879c:	03fc00ff 	mvnseq	r0, #255	; 0xff
200087a0:	0000ffe0 	andeq	pc, r0, r0, ror #31
200087a4:	1ff3ffe0 	svcne	0x00f3ffe0
200087a8:	1ffffe00 	svcne	0x00fffe00
200087ac:	03fc001f 	mvnseq	r0, #31
200087b0:	0001ff80 	andeq	pc, r1, r0, lsl #31
200087b4:	1ff9ffe0 	svcne	0x00f9ffe0
200087b8:	3ffffe00 	svccc	0x00fffe00
200087bc:	03fc0007 	mvnseq	r0, #7
200087c0:	0001ff80 	andeq	pc, r1, r0, lsl #31
200087c4:	0ffcffe0 	svceq	0x00fcffe0
200087c8:	3ffdfe00 	svccc	0x00fdfe00
200087cc:	07f80007 	ldrbeq	r0, [r8, r7]!
200087d0:	0003ff00 	andeq	pc, r3, r0, lsl #30
200087d4:	0ffe7ff0 	svceq	0x00fe7ff0
200087d8:	3ffcfe00 	svccc	0x00fcfe00
200087dc:	07f80003 	ldrbeq	r0, [r8, r3]!
200087e0:	0007fe00 	andeq	pc, r7, r0, lsl #28
200087e4:	07fe7ff8 			; <UNDEFINED> instruction: 0x07fe7ff8
200087e8:	3ff8fe00 	svccc	0x00f8fe00
200087ec:	0ff80003 	svceq	0x00f80003
200087f0:	0007fc00 	andeq	pc, r7, r0, lsl #24
200087f4:	03fffffc 	mvnseq	pc, #252, 30	; 0x3f0
200087f8:	3ff87c00 	svccc	0x00f87c00
200087fc:	0ff80003 	svceq	0x00f80003
20008800:	0007fc00 	andeq	pc, r7, r0, lsl #24
20008804:	01fffffe 	ldrsheq	pc, [pc, #254]	; 2000890a <bg_bits+0x32e>	; <UNPREDICTABLE>
20008808:	1ff00000 	svcne	0x00f00000	; IMB
2000880c:	0ff00007 	svceq	0x00f00007
20008810:	000ff800 	andeq	pc, pc, r0, lsl #16
20008814:	01ffffff 	ldrsheq	pc, [pc, #255]	; 2000891b <bg_bits+0x33f>	; <UNPREDICTABLE>
20008818:	07f0003e 			; <UNDEFINED> instruction: 0x07f0003e
2000881c:	0ff00007 	svceq	0x00f00007
20008820:	800ff000 	andhi	pc, pc, r0
20008824:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20008828:	03e0007f 	mvneq	r0, #127	; 0x7f
2000882c:	0fe00007 	svceq	0x00e00007
20008830:	c00ff000 	andgt	pc, pc, r0
20008834:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
20008838:	0000007f 	andeq	r0, r0, pc, ror r0
2000883c:	0fe00007 	svceq	0x00e00007
20008840:	e00ff000 	and	pc, pc, r0
20008844:	007ffeff 	ldrshteq	pc, [pc], #-239	; <UNPREDICTABLE>
20008848:	0000007f 	andeq	r0, r0, pc, ror r0
2000884c:	0fe00007 	svceq	0x00e00007
20008850:	f00ff000 			; <UNDEFINED> instruction: 0xf00ff000
20008854:	003ffe7f 	eorseq	pc, pc, pc, ror lr	; <UNPREDICTABLE>
20008858:	0000007f 	andeq	r0, r0, pc, ror r0
2000885c:	0fe00007 	svceq	0x00e00007
20008860:	f80ff000 			; <UNDEFINED> instruction: 0xf80ff000
20008864:	001ffc3f 	andseq	pc, pc, pc, lsr ip	; <UNPREDICTABLE>
20008868:	0000007f 	andeq	r0, r0, pc, ror r0
2000886c:	1fe0000f 	svcne	0x00e0000f
20008870:	fc0ff000 	stc2	0, cr15, [pc], {-0}
20008874:	000ff81f 	andeq	pc, pc, pc, lsl r8	; <UNPREDICTABLE>
20008878:	0000003e 	andeq	r0, r0, lr, lsr r0
2000887c:	1fe0000f 	svcne	0x00e0000f
20008880:	fc07f000 	stc2	0, cr15, [r7], {-0}
20008884:	0007f00f 	andeq	pc, r7, pc
20008888:	00000000 	andeq	r0, r0, r0
2000888c:	1fe0000f 	svcne	0x00e0000f
20008890:	fc07f000 	stc2	0, cr15, [r7], {-0}
20008894:	00000007 	andeq	r0, r0, r7
20008898:	00000000 	andeq	r0, r0, r0
2000889c:	1fe0000f 	svcne	0x00e0000f
200088a0:	fc07f800 	stc2	8, cr15, [r7], {-0}
200088a4:	00000003 	andeq	r0, r0, r3
200088a8:	000ff800 	andeq	pc, pc, r0, lsl #16
200088ac:	1fc0001f 	svcne	0x00c0001f
200088b0:	fc07fc00 	stc2	12, cr15, [r7], {-0}
200088b4:	00000001 	andeq	r0, r0, r1
200088b8:	001ffc00 	andseq	pc, pc, r0, lsl #24
200088bc:	1fc0003f 	svcne	0x00c0003f
200088c0:	fc07ff80 	stc2	15, cr15, [r7], {128}	; 0x80
200088c4:	00000001 	andeq	r0, r0, r1
200088c8:	003fff00 	eorseq	pc, pc, r0, lsl #30
200088cc:	3fc0003f 	svccc	0x00c0003f
200088d0:	fc07fffc 	stc2	15, cr15, [r7], {252}	; 0xfc
200088d4:	00000001 	andeq	r0, r0, r1
200088d8:	007fff80 	rsbseq	pc, pc, r0, lsl #31
200088dc:	ffc0003f 			; <UNDEFINED> instruction: 0xffc0003f
200088e0:	fc03ffff 	stc2	15, cr15, [r3], {255}	; 0xff
200088e4:	00000001 	andeq	r0, r0, r1
200088e8:	00ffffe0 	rscseq	pc, pc, r0, ror #31
200088ec:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
200088f0:	fc01ffff 	stc2	15, cr15, [r1], {255}	; 0xff
200088f4:	00000007 	andeq	r0, r0, r7
200088f8:	03fffff0 	mvnseq	pc, #240, 30	; 0x3c0
200088fc:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20008900:	fc00ffff 	stc2	15, cr15, [r0], {255}	; 0xff
20008904:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008908:	07fffff8 			; <UNDEFINED> instruction: 0x07fffff8
2000890c:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
20008910:	fc007fff 	stc2	15, cr7, [r0], {255}	; 0xff
20008914:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008918:	07ff7ffd 			; <UNDEFINED> instruction: 0x07ff7ffd
2000891c:	ff80007f 			; <UNDEFINED> instruction: 0xff80007f
20008920:	fc003fff 	stc2	15, cr3, [r0], {255}	; 0xff
20008924:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008928:	0ffe3fff 	svceq	0x00fe3fff
2000892c:	ff1f007f 			; <UNDEFINED> instruction: 0xff1f007f
20008930:	f80007ff 			; <UNDEFINED> instruction: 0xf80007ff
20008934:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008938:	1ffc3fff 	svcne	0x00fc3fff
2000893c:	fc3f807f 	ldc2	0, cr8, [pc], #-508	; 20008748 <bg_bits+0x16c>
20008940:	f800003f 			; <UNDEFINED> instruction: 0xf800003f
20008944:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008948:	1ff83fff 	svcne	0x00f83fff
2000894c:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
20008950:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20008954:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008958:	3ff03fff 	svccc	0x00f03fff
2000895c:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
20008960:	c0000000 	andgt	r0, r0, r0
20008964:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008968:	7fe03fff 	svcvc	0x00e03fff
2000896c:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
20008970:	00000000 	andeq	r0, r0, r0
20008974:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20008978:	7fc03fff 	svcvc	0x00c03fff
2000897c:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
20008980:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
20008984:	f800000f 			; <UNDEFINED> instruction: 0xf800000f
20008988:	ffc01fff 			; <UNDEFINED> instruction: 0xffc01fff
2000898c:	001f003f 	andseq	r0, pc, pc, lsr r0	; <UNPREDICTABLE>
20008990:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20008994:	f8007fff 			; <UNDEFINED> instruction: 0xf8007fff
20008998:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
2000899c:	0000003f 	andeq	r0, r0, pc, lsr r0
200089a0:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
200089a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200089a8:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
200089ac:	0000003f 	andeq	r0, r0, pc, lsr r0
200089b0:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
200089b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200089b8:	ff001fff 			; <UNDEFINED> instruction: 0xff001fff
200089bc:	0000003f 	andeq	r0, r0, pc, lsr r0
200089c0:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
200089c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200089c8:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}
200089cc:	0000003f 	andeq	r0, r0, pc, lsr r0
200089d0:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
200089d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200089d8:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}

200089dc <current_screen>:
200089dc:	00000001 	andeq	r0, r0, r1

200089e0 <delay_until_text.4312>:
200089e0:	00000082 	andeq	r0, r0, r2, lsl #1

200089e4 <long_text.4310>:
200089e4:	00000028 	andeq	r0, r0, r8, lsr #32

200089e8 <short_text.4311>:
200089e8:	00000014 	andeq	r0, r0, r4, lsl r0

200089ec <last_climb_value.4318>:
200089ec:	00000064 	andeq	r0, r0, r4, rrx

200089f0 <fire_black_2_bits>:
	...
200089f8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>

200089fc <fire1_gray_bits>:
200089fc:	00000000 	andeq	r0, r0, r0
20008a00:	06000804 	streq	r0, [r0], -r4, lsl #16
20008a04:	02494204 	subeq	r4, r9, #4, 4	; 0x40000000

20008a08 <fire1_light_bits>:
20008a08:	00002000 	andeq	r2, r0, r0
20008a0c:	48000010 	stmdami	r0, {r4}
20008a10:	2c243020 	stccs	0, cr3, [r4], #-128	; 0xffffff80

20008a14 <fire2_gray_bits>:
20008a14:	00000000 	andeq	r0, r0, r0
20008a18:	10220000 	eorne	r0, r2, r0
20008a1c:	00420444 	subeq	r0, r2, r4, asr #8

20008a20 <fire2_light_bits>:
20008a20:	04200000 	strteq	r0, [r0], #-0
20008a24:	240c0010 	strcs	r0, [ip], #-16
20008a28:	123c6008 	eorsne	r6, ip, #8

20008a2c <fire3_gray_bits>:
20008a2c:	00000000 	andeq	r0, r0, r0
20008a30:	24100802 	ldrcs	r0, [r0], #-2050	; 0xfffff7fe
20008a34:	00020260 	andeq	r0, r2, r0, ror #4

20008a38 <fire3_light_bits>:
20008a38:	10200000 	eorne	r0, r0, r0
20008a3c:	18040400 	stmdane	r4, {sl}
20008a40:	143c5812 	ldrtne	r5, [ip], #-2066	; 0xfffff7ee

20008a44 <fire4_gray_bits>:
20008a44:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
20008a48:	10320000 	eorsne	r0, r2, r0
20008a4c:	02400012 	subeq	r0, r0, #18

20008a50 <fire4_light_bits>:
20008a50:	00001000 	andeq	r1, r0, r0
20008a54:	04082000 	streq	r2, [r8], #-0
20008a58:	24283a0c 	strtcs	r3, [r8], #-2572	; 0xfffff5f4

20008a5c <fire5_gray_bits>:
20008a5c:	00000000 	andeq	r0, r0, r0
20008a60:	22001020 	andcs	r1, r0, #32
20008a64:	04044206 	streq	r4, [r4], #-518	; 0xfffffdfa

20008a68 <fire5_light_bits>:
20008a68:	00040000 	andeq	r0, r4, r0
20008a6c:	04240800 	strteq	r0, [r4], #-2048	; 0xfffff800
20008a70:	502a1810 	eorpl	r1, sl, r0, lsl r8

20008a74 <firstTime.4076>:
20008a74:	00000001 	andeq	r0, r0, r1

20008a78 <bird1_black_bits>:
	...
20008a88:	00010040 	andeq	r0, r1, r0, asr #32
20008a8c:	00118060 	andseq	r8, r1, r0, rrx
20008a90:	00118060 	andseq	r8, r1, r0, rrx
20008a94:	001b80ec 	andseq	r8, fp, ip, ror #1
20008a98:	003f81fc 	ldrshteq	r8, [pc], -ip
20008a9c:	007fe1f8 	ldrshteq	lr, [pc], #-24
20008aa0:	007ff3f8 	ldrshteq	pc, [pc], #-56	; <UNPREDICTABLE>
20008aa4:	003ffff8 	ldrshteq	pc, [pc], -r8	; <UNPREDICTABLE>
20008aa8:	003fedf8 	ldrshteq	lr, [pc], -r8
20008aac:	001ff1f0 			; <UNDEFINED> instruction: 0x001ff1f0
20008ab0:	000ff0e0 	andeq	pc, pc, r0, ror #1
20008ab4:	0007ff80 	andeq	pc, r7, r0, lsl #31
20008ab8:	00007c00 	andeq	r7, r0, r0, lsl #24
20008abc:	00008800 	andeq	r8, r0, r0, lsl #16
20008ac0:	00033000 	andeq	r3, r3, r0
20008ac4:	00011000 	andeq	r1, r1, r0
	...

20008adc <bird1_gray_bits>:
	...
20008b10:	00000e00 	andeq	r0, r0, r0, lsl #28
20008b14:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

20008b40 <bird1_light_bits>:
	...
20008b70:	00001200 	andeq	r1, r0, r0, lsl #4
	...

20008ba4 <bird2_black_bits>:
	...
20008bbc:	000b0000 	andeq	r0, fp, r0
20008bc0:	001e0028 	andseq	r0, lr, r8, lsr #32
20008bc4:	003e0068 	eorseq	r0, lr, r8, rrx
20008bc8:	003e007c 	eorseq	r0, lr, ip, ror r0
20008bcc:	003e007c 	eorseq	r0, lr, ip, ror r0
20008bd0:	007e007c 	rsbseq	r0, lr, ip, ror r0
20008bd4:	007e7cfc 	ldrshteq	r7, [lr], #-204	; 0xffffff34
20008bd8:	007ffff8 	ldrshteq	pc, [pc], #-248	; <UNPREDICTABLE>
20008bdc:	003fd7f0 	ldrshteq	sp, [pc], -r0
20008be0:	003fc3c0 	eorseq	ip, pc, r0, asr #7
20008be4:	000fc100 	andeq	ip, pc, r0, lsl #2
20008be8:	00007000 	andeq	r7, r0, r0
20008bec:	0000a000 	andeq	sl, r0, r0
20008bf0:	0001e000 	andeq	lr, r1, r0
20008bf4:	0000a000 	andeq	sl, r0, r0
20008bf8:	00008000 	andeq	r8, r0, r0
	...

20008c08 <bird2_gray_bits>:
	...
20008c44:	00003c00 	andeq	r3, r0, r0, lsl #24
20008c48:	00003e00 	andeq	r3, r0, r0, lsl #28
	...

20008c6c <bird2_light_bits>:
	...
20008ca4:	00002800 	andeq	r2, r0, r0, lsl #16
	...

20008cd0 <bird3_black_bits>:
	...
20008cf0:	00280000 	eoreq	r0, r8, r0
20008cf4:	00680020 	rsbeq	r0, r8, r0, lsr #32
20008cf8:	00f80038 	rscseq	r0, r8, r8, lsr r0
20008cfc:	00fc0038 	rscseq	r0, ip, r8, lsr r0
20008d00:	00fc007c 	rscseq	r0, ip, ip, ror r0
20008d04:	00fe3dfe 	ldrshteq	r3, [lr], #222	; 0xde
20008d08:	00fffffe 	ldrshteq	pc, [pc], #254	; <UNPREDICTABLE>
20008d0c:	007febfc 	ldrshteq	lr, [pc], #-188
20008d10:	003ff1f0 	ldrshteq	pc, [pc], -r0	; <UNPREDICTABLE>
20008d14:	001ff0c0 	andseq	pc, pc, r0, asr #1
20008d18:	0001e800 	andeq	lr, r1, r0, lsl #16
20008d1c:	00005000 	andeq	r5, r0, r0
20008d20:	0000f000 	andeq	pc, r0, r0
20008d24:	00009000 	andeq	r9, r0, r0
	...

20008d34 <bird3_gray_bits>:
	...
20008d74:	00000e00 	andeq	r0, r0, r0, lsl #28
20008d78:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

20008d98 <bird3_light_bits>:
	...
20008dd4:	00001400 	andeq	r1, r0, r0, lsl #8
	...

20008dfc <bird4_black_bits>:
	...
20008e30:	00007800 	andeq	r7, r0, r0, lsl #16
20008e34:	0000ff80 	andeq	pc, r0, r0, lsl #31
20008e38:	0003d7f4 	strdeq	sp, [r3], -r4
20008e3c:	008fe3fc 	strdeq	lr, [pc], ip
20008e40:	01ffc1fc 	ldrsheq	ip, [pc, #28]	; 20008e64 <bird4_gray_bits+0x4>
20008e44:	00ffd9f8 	ldrshteq	sp, [pc], #152
20008e48:	007fb0f0 	ldrshteq	fp, [pc], #-0
20008e4c:	007ea000 	rsbseq	sl, lr, r0
20008e50:	00792000 	rsbseq	r2, r9, r0
20008e54:	00300000 	eorseq	r0, r0, r0
	...

20008e60 <bird4_gray_bits>:
	...
20008ea0:	00001c00 	andeq	r1, r0, r0, lsl #24
20008ea4:	00003e00 	andeq	r3, r0, r0, lsl #28
	...

20008ec4 <bird4_light_bits>:
	...
20008f00:	00002800 	andeq	r2, r0, r0, lsl #16
	...

20008f28 <bird5_black_bits>:
	...
20008f54:	00001c00 	andeq	r1, r0, r0, lsl #24
20008f58:	0000ff00 	andeq	pc, r0, r0, lsl #30
20008f5c:	0003eb00 	andeq	lr, r3, r0, lsl #22
20008f60:	0007f180 	andeq	pc, r7, r0, lsl #3
20008f64:	000ff080 	andeq	pc, pc, r0, lsl #1
20008f68:	000fff80 	andeq	pc, pc, r0, lsl #31
20008f6c:	001fd3c0 	andseq	sp, pc, r0, asr #7
20008f70:	003fa3c0 	eorseq	sl, pc, r0, asr #7
20008f74:	003fa3c0 	eorseq	sl, pc, r0, asr #7
20008f78:	003fd3c0 	eorseq	sp, pc, r0, asr #7
20008f7c:	003e8380 	eorseq	r8, lr, r0, lsl #7
20008f80:	00778580 	rsbseq	r8, r7, r0, lsl #11
20008f84:	00610000 	rsbeq	r0, r1, r0
20008f88:	00000000 	andeq	r0, r0, r0

20008f8c <bird5_gray_bits>:
	...
20008fc4:	00000e00 	andeq	r0, r0, r0, lsl #28
20008fc8:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

20008ff0 <bird5_light_bits>:
	...
20009024:	00001400 	andeq	r1, r0, r0, lsl #8
	...

20009054 <firstTime.4093>:
20009054:	00000001 	andeq	r0, r0, r1

20009058 <witch1_black_bits>:
20009058:	200001f8 	strdcs	r0, [r0], -r8
2000905c:	03400001 	movteq	r0, #1
20009060:	00074000 	andeq	r4, r7, r0
20009064:	20000720 	andcs	r0, r0, r0, lsr #14
20009068:	3ff80066 	svccc	0x00f80066
2000906c:	00044000 	andeq	r4, r4, r0
20009070:	40000440 	andmi	r0, r0, r0, asr #8
20009074:	03800004 	orreq	r0, r0, #4
20009078:	00064000 	andeq	r4, r6, r0
2000907c:	20000640 	andcs	r0, r0, r0, asr #12
20009080:	0e200006 	cdpeq	0, 2, cr0, cr0, cr6, {0}
20009084:	000e1000 	andeq	r1, lr, r0
20009088:	f8000c10 			; <UNDEFINED> instruction: 0xf8000c10
2000908c:	0000001f 	andeq	r0, r0, pc, lsl r0

20009090 <witch1_gray_bits>:
20009090:	c0000000 	andgt	r0, r0, r0
20009094:	00800000 	addeq	r0, r0, r0
20009098:	00008000 	andeq	r8, r0, r0
2000909c:	c00000c0 	andgt	r0, r0, r0, asr #1
200090a0:	00000001 	andeq	r0, r0, r1
	...
200090b0:	00018000 	andeq	r8, r1, r0
200090b4:	c0000180 	andgt	r0, r0, r0, lsl #3
200090b8:	01c00001 	biceq	r0, r0, r1
200090bc:	0001e000 	andeq	lr, r1, r0
200090c0:	000003e0 	andeq	r0, r0, r0, ror #7
200090c4:	00000000 	andeq	r0, r0, r0

200090c8 <witch1_light_bits>:
	...
200090dc:	00038000 	andeq	r8, r3, r0
200090e0:	80000380 	andhi	r0, r0, r0, lsl #7
200090e4:	00000003 	andeq	r0, r0, r3
	...

20009100 <witch2_black_bits>:
20009100:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20009104:	01200001 			; <UNDEFINED> instruction: 0x01200001
20009108:	00034000 	andeq	r4, r3, r0
2000910c:	20000740 	andcs	r0, r0, r0, asr #14
20009110:	66200007 	strtvs	r0, [r0], -r7
20009114:	003ff800 	eorseq	pc, pc, r0, lsl #16
20009118:	40000440 	andmi	r0, r0, r0, asr #8
2000911c:	04400004 	strbeq	r0, [r0], #-4
20009120:	00038000 	andeq	r8, r3, r0
20009124:	20000660 	andcs	r0, r0, r0, ror #12
20009128:	0e100006 	cdpeq	0, 1, cr0, cr0, cr6, {0}
2000912c:	001c0800 	andseq	r0, ip, r0, lsl #16
20009130:	fc001c08 	stc2	12, cr1, [r0], {8}
20009134:	0000003f 	andeq	r0, r0, pc, lsr r0

20009138 <witch2_gray_bits>:
20009138:	00000000 	andeq	r0, r0, r0
2000913c:	00c00000 	sbceq	r0, r0, r0
20009140:	00008000 	andeq	r8, r0, r0
20009144:	c0000080 	andgt	r0, r0, r0, lsl #1
20009148:	01c00000 	biceq	r0, r0, r0
	...
2000915c:	c0000180 	andgt	r0, r0, r0, lsl #3
20009160:	01e00001 	mvneq	r0, r1
20009164:	0003f000 	andeq	pc, r3, r0
20009168:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
2000916c:	00000000 	andeq	r0, r0, r0

20009170 <witch2_light_bits>:
	...
20009188:	80000380 	andhi	r0, r0, r0, lsl #7
2000918c:	03800003 	orreq	r0, r0, #3
	...

200091a8 <witch3_black_bits>:
200091a8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200091ac:	01200001 			; <UNDEFINED> instruction: 0x01200001
200091b0:	00034000 	andeq	r4, r3, r0
200091b4:	20000740 	andcs	r0, r0, r0, asr #14
200091b8:	66200007 	strtvs	r0, [r0], -r7
200091bc:	003ff800 	eorseq	pc, pc, r0, lsl #16
200091c0:	40000440 	andmi	r0, r0, r0, asr #8
200091c4:	04400004 	strbeq	r0, [r0], #-4
200091c8:	00038000 	andeq	r8, r3, r0
200091cc:	10000660 	andne	r0, r0, r0, ror #12
200091d0:	1c08000e 	stcne	0, cr0, [r8], {14}
200091d4:	00380800 	eorseq	r0, r8, r0, lsl #16
200091d8:	fe003804 	vcmla.f16	d3, d0, d4[0], #0
200091dc:	0000007f 	andeq	r0, r0, pc, ror r0

200091e0 <witch3_gray_bits>:
200091e0:	00000000 	andeq	r0, r0, r0
200091e4:	00c00000 	sbceq	r0, r0, r0
200091e8:	00008000 	andeq	r8, r0, r0
200091ec:	c0000080 	andgt	r0, r0, r0, lsl #1
200091f0:	01c00000 	biceq	r0, r0, r0
	...
20009204:	e0000180 	and	r0, r0, r0, lsl #3
20009208:	03f00001 	mvnseq	r0, #1
2000920c:	0007f000 	andeq	pc, r7, r0
20009210:	000007f8 	strdeq	r0, [r0], -r8
20009214:	00000000 	andeq	r0, r0, r0

20009218 <witch3_light_bits>:
	...
20009230:	80000380 	andhi	r0, r0, r0, lsl #7
20009234:	03800003 	orreq	r0, r0, #3
	...

20009250 <firstTime.4067>:
20009250:	00000001 	andeq	r0, r0, r1

20009254 <witch1_black_bits>:
20009254:	200001f8 	strdcs	r0, [r0], -r8
20009258:	03400001 	movteq	r0, #1
2000925c:	00074000 	andeq	r4, r7, r0
20009260:	20000720 	andcs	r0, r0, r0, lsr #14
20009264:	3ff80066 	svccc	0x00f80066
20009268:	00044000 	andeq	r4, r4, r0
2000926c:	40000440 	andmi	r0, r0, r0, asr #8
20009270:	03800004 	orreq	r0, r0, #4
20009274:	00064000 	andeq	r4, r6, r0
20009278:	20000640 	andcs	r0, r0, r0, asr #12
2000927c:	0e200006 	cdpeq	0, 2, cr0, cr0, cr6, {0}
20009280:	000e1000 	andeq	r1, lr, r0
20009284:	f8000c10 			; <UNDEFINED> instruction: 0xf8000c10
20009288:	0000001f 	andeq	r0, r0, pc, lsl r0

2000928c <witch1_gray_bits>:
2000928c:	c0000000 	andgt	r0, r0, r0
20009290:	00800000 	addeq	r0, r0, r0
20009294:	00008000 	andeq	r8, r0, r0
20009298:	c00000c0 	andgt	r0, r0, r0, asr #1
2000929c:	00000001 	andeq	r0, r0, r1
	...
200092ac:	00018000 	andeq	r8, r1, r0
200092b0:	c0000180 	andgt	r0, r0, r0, lsl #3
200092b4:	01c00001 	biceq	r0, r0, r1
200092b8:	0001e000 	andeq	lr, r1, r0
200092bc:	000003e0 	andeq	r0, r0, r0, ror #7
200092c0:	00000000 	andeq	r0, r0, r0

200092c4 <witch1_light_bits>:
	...
200092d8:	00038000 	andeq	r8, r3, r0
200092dc:	80000380 	andhi	r0, r0, r0, lsl #7
200092e0:	00000003 	andeq	r0, r0, r3
	...

200092fc <witch2_black_bits>:
200092fc:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20009300:	01200001 			; <UNDEFINED> instruction: 0x01200001
20009304:	00034000 	andeq	r4, r3, r0
20009308:	20000740 	andcs	r0, r0, r0, asr #14
2000930c:	66200007 	strtvs	r0, [r0], -r7
20009310:	003ff800 	eorseq	pc, pc, r0, lsl #16
20009314:	40000440 	andmi	r0, r0, r0, asr #8
20009318:	04400004 	strbeq	r0, [r0], #-4
2000931c:	00038000 	andeq	r8, r3, r0
20009320:	20000660 	andcs	r0, r0, r0, ror #12
20009324:	0e100006 	cdpeq	0, 1, cr0, cr0, cr6, {0}
20009328:	001c0800 	andseq	r0, ip, r0, lsl #16
2000932c:	fc001c08 	stc2	12, cr1, [r0], {8}
20009330:	0000003f 	andeq	r0, r0, pc, lsr r0

20009334 <witch2_gray_bits>:
20009334:	00000000 	andeq	r0, r0, r0
20009338:	00c00000 	sbceq	r0, r0, r0
2000933c:	00008000 	andeq	r8, r0, r0
20009340:	c0000080 	andgt	r0, r0, r0, lsl #1
20009344:	01c00000 	biceq	r0, r0, r0
	...
20009358:	c0000180 	andgt	r0, r0, r0, lsl #3
2000935c:	01e00001 	mvneq	r0, r1
20009360:	0003f000 	andeq	pc, r3, r0
20009364:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
20009368:	00000000 	andeq	r0, r0, r0

2000936c <witch2_light_bits>:
	...
20009384:	80000380 	andhi	r0, r0, r0, lsl #7
20009388:	03800003 	orreq	r0, r0, #3
	...

200093a4 <witch3_black_bits>:
200093a4:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200093a8:	01200001 			; <UNDEFINED> instruction: 0x01200001
200093ac:	00034000 	andeq	r4, r3, r0
200093b0:	20000740 	andcs	r0, r0, r0, asr #14
200093b4:	66200007 	strtvs	r0, [r0], -r7
200093b8:	003ff800 	eorseq	pc, pc, r0, lsl #16
200093bc:	40000440 	andmi	r0, r0, r0, asr #8
200093c0:	04400004 	strbeq	r0, [r0], #-4
200093c4:	00038000 	andeq	r8, r3, r0
200093c8:	10000660 	andne	r0, r0, r0, ror #12
200093cc:	1c08000e 	stcne	0, cr0, [r8], {14}
200093d0:	00380800 	eorseq	r0, r8, r0, lsl #16
200093d4:	fe003804 	vcmla.f16	d3, d0, d4[0], #0
200093d8:	0000007f 	andeq	r0, r0, pc, ror r0

200093dc <witch3_gray_bits>:
200093dc:	00000000 	andeq	r0, r0, r0
200093e0:	00c00000 	sbceq	r0, r0, r0
200093e4:	00008000 	andeq	r8, r0, r0
200093e8:	c0000080 	andgt	r0, r0, r0, lsl #1
200093ec:	01c00000 	biceq	r0, r0, r0
	...
20009400:	e0000180 	and	r0, r0, r0, lsl #3
20009404:	03f00001 	mvnseq	r0, #1
20009408:	0007f000 	andeq	pc, r7, r0
2000940c:	000007f8 	strdeq	r0, [r0], -r8
20009410:	00000000 	andeq	r0, r0, r0

20009414 <witch3_light_bits>:
	...
2000942c:	80000380 	andhi	r0, r0, r0, lsl #7
20009430:	03800003 	orreq	r0, r0, #3
	...

2000944c <firstTime.4142>:
2000944c:	00000001 	andeq	r0, r0, r1

20009450 <direction.4153>:
20009450:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20009454 <flame1_black_bits>:
20009454:	80000000 	andhi	r0, r0, r0
20009458:	00000008 	andeq	r0, r0, r8
2000945c:	00004800 	andeq	r4, r0, r0, lsl #16
20009460:	48004a08 	stmdami	r0, {r3, r9, fp, lr}
20009464:	02400002 	subeq	r0, r0, #2
20009468:	00541400 	subseq	r1, r4, r0, lsl #8
2000946c:	22005040 	andcs	r5, r0, #64	; 0x40
20009470:	a01200b0 	ldrhge	r0, [r2], -r0	; <UNPREDICTABLE>
20009474:	00011200 	andeq	r1, r1, r0, lsl #4
20009478:	01001000 	mrseq	r1, (UNDEF: 0)
2000947c:	01000000 	mrseq	r0, (UNDEF: 0)
20009480:	00210001 	eoreq	r0, r1, r1
20009484:	40000042 	andmi	r0, r0, r2, asr #32
20009488:	20410000 	subcs	r0, r1, r0
2000948c:	01200101 			; <UNDEFINED> instruction: 0x01200101
20009490:	12012001 	andne	r2, r1, #1
20009494:	90400000 	subls	r0, r0, r0
20009498:	00800200 	addeq	r0, r0, r0, lsl #4
2000949c:	04008000 	streq	r8, [r0], #-0
200094a0:	20080001 	andcs	r0, r8, r1
200094a4:	00080800 	andeq	r0, r8, r0, lsl #16
	...
200094b0:	00001000 	andeq	r1, r0, r0
200094b4:	3200001c 	andcc	r0, r0, #28
200094b8:	002f0000 	eoreq	r0, pc, r0
200094bc:	00003f00 	andeq	r3, r0, r0, lsl #30
200094c0:	01000007 	tsteq	r0, r7
200094c4:	00010000 	andeq	r0, r1, r0
200094c8:	00000000 	andeq	r0, r0, r0

200094cc <flame1_gray_bits>:
	...
200094ec:	00080000 	andeq	r0, r8, r0
200094f0:	00000000 	andeq	r0, r0, r0
200094f4:	00900008 	addseq	r0, r0, r8
200094f8:	0002a000 	andeq	sl, r2, r0
200094fc:	b0001bb0 			; <UNDEFINED> instruction: 0xb0001bb0
20009500:	0fb0001f 	svceq	0x00b0001f
20009504:	000fe000 	andeq	lr, pc, r0
20009508:	e0000fe0 	and	r0, r0, r0, ror #31
2000950c:	0fa0000f 	svceq	0x00a0000f
20009510:	0007e000 	andeq	lr, r7, r0
20009514:	800003c0 	andhi	r0, r0, r0, asr #7
20009518:	07c00002 	strbeq	r0, [r0, r2]
2000951c:	00078000 	andeq	r8, r7, r0
20009520:	80000380 	andhi	r0, r0, r0, lsl #7
20009524:	09800003 	stmibeq	r0, {r0, r1}
20009528:	00018000 	andeq	r8, r1, r0
2000952c:	0c000000 	stceq	0, cr0, [r0], {-0}
20009530:	00100000 	andseq	r0, r0, r0
	...

20009544 <flame1_light_bits>:
	...
2000954c:	00080000 	andeq	r0, r8, r0
20009550:	80000080 	andhi	r0, r0, r0, lsl #1
20009554:	0c88000c 	stceq	0, cr0, [r8], {12}
20009558:	00098800 	andeq	r8, r9, r0, lsl #16
2000955c:	c8000db8 	stmdagt	r0, {r3, r4, r5, r7, r8, sl, fp}
20009560:	5fe8004d 	svcpl	0x00e8004d
20009564:	00f6e800 	rscseq	lr, r6, r0, lsl #16
20009568:	fc00eff8 	stc2	15, cr14, [r0], {248}	; 0xf8
2000956c:	fe6c00f7 	mcr2	0, 3, r0, cr12, cr7, {7}
20009570:	00dc5c00 	sbcseq	r5, ip, r0, lsl #24
20009574:	0c00e40c 	cfstrseq	mvf14, [r0], {12}
20009578:	d00e01e0 	andle	r0, lr, r0, ror #3
2000957c:	00d01e00 	sbcseq	r1, r0, r0, lsl #28
20009580:	0c00d01a 	stceq	0, cr13, [r0], {26}
20009584:	600e00f0 	strdvs	r0, [lr], -r0	; <UNPREDICTABLE>
20009588:	00681c00 	rsbeq	r1, r8, r0, lsl #24
2000958c:	70003c3c 	andvc	r3, r0, ip, lsr ip
20009590:	1830003c 	ldmdane	r0!, {r2, r3, r4, r5}
20009594:	00307000 	eorseq	r7, r0, r0
20009598:	78003c78 	stmdavc	r0, {r3, r4, r5, r6, sl, fp, ip, sp}
2000959c:	16700038 			; <UNDEFINED> instruction: 0x16700038
200095a0:	001e6000 	andseq	r6, lr, r0
200095a4:	c0000fe0 	andgt	r0, r0, r0, ror #31
200095a8:	0fc0000f 	svceq	0x00c0000f
	...

200095bc <flame2_black_bits>:
200095bc:	00000000 	andeq	r0, r0, r0
200095c0:	40040042 	andmi	r0, r4, r2, asr #32
200095c4:	00044400 	andeq	r4, r4, r0, lsl #8
200095c8:	04000440 	streq	r0, [r0], #-1088	; 0xfffffbc0
200095cc:	22a00022 	adccs	r0, r0, #34	; 0x22
200095d0:	00aaa800 	adceq	sl, sl, r0, lsl #16
200095d4:	00009108 	andeq	r9, r0, r8, lsl #2
200095d8:	84800090 	strhi	r0, [r0], #144	; 0x90
200095dc:	00040400 	andeq	r0, r4, r0, lsl #8
200095e0:	20008004 	andcs	r8, r0, r4
200095e4:	00850090 	umulleq	r0, r5, r0, r0
200095e8:	01000000 	mrseq	r0, (UNDEF: 0)
200095ec:	20000002 	andcs	r0, r0, r2
200095f0:	84200084 	strthi	r0, [r0], #-132	; 0xffffff7c
200095f4:	00000200 	andeq	r0, r0, r0, lsl #4
200095f8:	02004004 	andeq	r4, r0, #4
200095fc:	a00a0080 	andge	r0, sl, r0, lsl #1
20009600:	00240800 	eoreq	r0, r4, r0, lsl #16
20009604:	08002048 	stmdaeq	r0, {r3, r6, sp}
20009608:	00000000 	andeq	r0, r0, r0
2000960c:	00101000 	andseq	r1, r0, r0
20009610:	00004050 	andeq	r4, r0, r0, asr r0
20009614:	10000040 	andne	r0, r0, r0, asr #32
20009618:	00001000 	andeq	r1, r0, r0
2000961c:	3200001c 	andcc	r0, r0, #28
20009620:	002f0000 	eoreq	r0, pc, r0
20009624:	00003f00 	andeq	r3, r0, r0, lsl #30
20009628:	01000007 	tsteq	r0, r7
2000962c:	00010000 	andeq	r0, r1, r0
20009630:	00000000 	andeq	r0, r0, r0

20009634 <flame2_gray_bits>:
	...
20009654:	00002000 	andeq	r2, r0, r0
20009658:	40000010 	andmi	r0, r0, r0, lsl r0
2000965c:	27600002 	strbcs	r0, [r0, -r2]!
20009660:	001fe000 	andseq	lr, pc, r0
20009664:	c0000fe0 	andgt	r0, r0, r0, ror #31
20009668:	0bc00003 	bleq	1f00967c <startup-0xff6984>
2000966c:	000fe000 	andeq	lr, pc, r0
20009670:	c0000fd0 	ldrdgt	r0, [r0], -r0	; <UNPREDICTABLE>
20009674:	0fc0000f 	svceq	0x00c0000f
20009678:	0003e000 	andeq	lr, r3, r0
2000967c:	c00007a0 	andgt	r0, r0, r0, lsr #15
20009680:	0b800007 	bleq	1e0096a4 <startup-0x1ff695c>
20009684:	0003c000 	andeq	ip, r3, r0
20009688:	80000380 	andhi	r0, r0, r0, lsl #7
2000968c:	03800003 	orreq	r0, r0, #3
20009690:	00000000 	andeq	r0, r0, r0
20009694:	0c000000 	stceq	0, cr0, [r0], {-0}
20009698:	00100000 	andseq	r0, r0, r0
	...

200096ac <flame2_light_bits>:
	...
200096b4:	00020000 	andeq	r0, r2, r0
200096b8:	20000220 	andcs	r0, r0, r0, lsr #4
200096bc:	05400005 	strbeq	r0, [r0, #-5]
200096c0:	00054000 	andeq	r4, r5, r0
200096c4:	fc0026f4 	stc2	6, cr2, [r0], {244}	; 0xf4
200096c8:	137c0027 	cmnne	ip, #39	; 0x27
200096cc:	00fbda00 	rscseq	sp, fp, r0, lsl #20
200096d0:	9e007fea 	cdpls	15, 0, cr7, cr0, cr10, {7}
200096d4:	d818006d 	ldmdale	r8, {r0, r2, r3, r5, r6}
200096d8:	00e01c00 	rsceq	r1, r0, r0, lsl #24
200096dc:	1e00f01c 	mcrne	0, 0, pc, cr0, cr12, {0}	; <UNPREDICTABLE>
200096e0:	701e0078 	andsvc	r0, lr, r8, ror r0
200096e4:	00f01c00 	rscseq	r1, r0, r0, lsl #24
200096e8:	3c003028 	stccc	0, cr3, [r0], {40}	; 0x28
200096ec:	50240070 	eorpl	r0, r4, r0, ror r0
200096f0:	01d81001 	bicseq	r1, r8, r1
200096f4:	30004810 	andcc	r4, r0, r0, lsl r8
200096f8:	34780038 	ldrbtcc	r0, [r8], #-56	; 0xffffffc8
200096fc:	002c2000 	eoreq	r2, ip, r0
20009700:	50003c20 	andpl	r3, r0, r0, lsr #24
20009704:	0c700038 	ldcleq	0, cr0, [r0], #-224	; 0xffffff20
20009708:	001fe000 	andseq	lr, pc, r0
2000970c:	c0000fe0 	andgt	r0, r0, r0, ror #31
20009710:	0fc0000f 	svceq	0x00c0000f
	...

20009724 <flame3_black_bits>:
20009724:	02000400 	andeq	r0, r0, #0, 8
20009728:	04000000 	streq	r0, [r0], #-0
2000972c:	00044000 	andeq	r4, r4, r0
20009730:	a4000404 	strge	r0, [r0], #-1028	; 0xfffffbfc
20009734:	52a00098 	adcpl	r0, r0, #152	; 0x98
20009738:	01028a00 	tsteq	r2, r0, lsl #20
2000973c:	00012028 	andeq	r2, r1, r8, lsr #32
20009740:	00020100 	andeq	r0, r2, r0, lsl #2
20009744:	01028200 	mrseq	r8, R10_usr
20009748:	80000092 	mulhi	r0, r2, r0
2000974c:	00810000 	addeq	r0, r1, r0
20009750:	01400901 	cmpeq	r0, r1, lsl #18
20009754:	01004008 	tsteq	r0, r8
20009758:	02000002 	andeq	r0, r0, #2
2000975c:	01004001 	tsteq	r0, r1
20009760:	02000002 	andeq	r0, r0, #2
20009764:	a1000000 	mrsge	r0, (UNDEF: 0)
20009768:	00002400 	andeq	r2, r0, r0, lsl #8
2000976c:	10004000 	andne	r4, r0, r0
20009770:	40000044 	andmi	r0, r0, r4, asr #32
20009774:	00400800 	subeq	r0, r0, r0, lsl #16
20009778:	00000808 	andeq	r0, r0, r8, lsl #16
2000977c:	00000000 	andeq	r0, r0, r0
20009780:	00001000 	andeq	r1, r0, r0
20009784:	3200001c 	andcc	r0, r0, #28
20009788:	002f0000 	eoreq	r0, pc, r0
2000978c:	00003f00 	andeq	r3, r0, r0, lsl #30
20009790:	01000007 	tsteq	r0, r7
20009794:	00010000 	andeq	r0, r1, r0
20009798:	00000000 	andeq	r0, r0, r0

2000979c <flame3_gray_bits>:
	...
200097bc:	00002000 	andeq	r2, r0, r0
200097c0:	00000040 	andeq	r0, r0, r0, asr #32
200097c4:	17600023 	strbne	r0, [r0, -r3, lsr #32]!
200097c8:	0017e000 	andseq	lr, r7, r0
200097cc:	e0000fe0 	and	r0, r0, r0, ror #31
200097d0:	3de0003d 	stclcc	0, cr0, [r0, #244]!	; 0xf4
200097d4:	001fa000 	andseq	sl, pc, r0
200097d8:	f0001fe8 			; <UNDEFINED> instruction: 0xf0001fe8
200097dc:	0ee0000f 	cdpeq	0, 14, cr0, cr0, cr15, {0}
200097e0:	000fc000 	andeq	ip, pc, r0
200097e4:	c0000fe0 	andgt	r0, r0, r0, ror #31
200097e8:	17c0000b 	strbne	r0, [r0, fp]
200097ec:	00078000 	andeq	r8, r7, r0
200097f0:	80000780 	andhi	r0, r0, r0, lsl #15
200097f4:	03400003 	movteq	r0, #3
200097f8:	00030000 	andeq	r0, r3, r0
200097fc:	0c000000 	stceq	0, cr0, [r0], {-0}
20009800:	00100000 	andseq	r0, r0, r0
	...

20009814 <flame3_light_bits>:
20009814:	00000000 	andeq	r0, r0, r0
20009818:	00400000 	subeq	r0, r0, r0
2000981c:	00020000 	andeq	r0, r2, r0
20009820:	40000240 	andmi	r0, r0, r0, asr #4
20009824:	014c0002 	cmpeq	ip, r2
20009828:	00317400 	eorseq	r7, r1, r0, lsl #8
2000982c:	fc0017d4 	stc2	7, cr1, [r0], {212}	; 0xd4
20009830:	bff8003f 	svclt	0x00f8003f
20009834:	00fd5800 	rscseq	r5, sp, r0, lsl #16
20009838:	7800ff28 	stmdavc	r0, {r3, r5, r8, r9, sl, fp, ip, sp, lr, pc}
2000983c:	e81c00dc 	ldmda	ip, {r2, r3, r4, r6, r7}
20009840:	00a81600 	adceq	r1, r8, r0, lsl #12
20009844:	1e00b016 	mcrne	0, 0, fp, cr0, cr6, {0}
20009848:	c01e00c0 	andsgt	r0, lr, r0, asr #1
2000984c:	00e01c00 	rsceq	r1, r0, r0, lsl #24
20009850:	0c00c014 	stceq	0, cr12, [r0], {20}
20009854:	401c00f0 	ldrshmi	r0, [ip], -r0	; <UNPREDICTABLE>
20009858:	00f01800 	rscseq	r1, r0, r0, lsl #16
2000985c:	2800b01c 	stmdacs	r0, {r2, r3, r4, ip, sp, pc}
20009860:	283c0030 	ldmdacs	ip!, {r4, r5}
20009864:	00385400 	eorseq	r5, r8, r0, lsl #8
20009868:	70003070 	andvc	r3, r0, r0, ror r0
2000986c:	3cb0001c 	ldccc	0, cr0, [r0], #112	; 0x70
20009870:	003ce000 	eorseq	lr, ip, r0
20009874:	c0001fe0 	andgt	r1, r0, r0, ror #31
20009878:	0fc0000f 	svceq	0x00c0000f
	...

2000988c <flame4_black_bits>:
2000988c:	00000100 	andeq	r0, r0, r0, lsl #2
20009890:	10820000 	addne	r0, r2, r0
20009894:	00008000 	andeq	r8, r0, r0
20009898:	000028c8 	andeq	r2, r0, r8, asr #17
2000989c:	05540004 	ldrbeq	r0, [r4, #-4]
200098a0:	00a55400 	adceq	r5, r5, r0, lsl #8
200098a4:	08002420 	stmdaeq	r0, {r5, sl, sp}
200098a8:	50000082 	andpl	r0, r0, r2, lsl #1
200098ac:	01000400 	tsteq	r0, r0, lsl #8
200098b0:	00010444 	andeq	r0, r1, r4, asr #8
200098b4:	84120124 	ldrhi	r0, [r2], #-292	; 0xfffffedc
200098b8:	00841000 	addeq	r1, r4, r0
200098bc:	01008001 	tsteq	r0, r1
200098c0:	200100a0 	andcs	r0, r1, r0, lsr #1
200098c4:	01000000 	mrseq	r0, (UNDEF: 0)
200098c8:	00000022 	andeq	r0, r0, r2, lsr #32
200098cc:	80020000 	andhi	r0, r2, r0
200098d0:	00808a00 	addeq	r8, r0, r0, lsl #20
200098d4:	04004000 	streq	r4, [r0], #-0
200098d8:	20440000 	subcs	r0, r4, r0
200098dc:	00200000 	eoreq	r0, r0, r0
200098e0:	00000008 	andeq	r0, r0, r8
200098e4:	00000010 	andeq	r0, r0, r0, lsl r0
200098e8:	00001000 	andeq	r1, r0, r0
200098ec:	3200001c 	andcc	r0, r0, #28
200098f0:	002f0000 	eoreq	r0, pc, r0
200098f4:	00003f00 	andeq	r3, r0, r0, lsl #30
200098f8:	01000007 	tsteq	r0, r7
200098fc:	00010000 	andeq	r0, r1, r0
20009900:	00000000 	andeq	r0, r0, r0

20009904 <flame4_gray_bits>:
	...
20009928:	40000000 	andmi	r0, r0, r0
2000992c:	08200010 	stmdaeq	r0!, {r4}
20009930:	0008c000 	andeq	ip, r8, r0
20009934:	f0000fc4 			; <UNDEFINED> instruction: 0xf0000fc4
20009938:	1ff80007 	svcne	0x00f80007
2000993c:	001ff000 	andseq	pc, pc, r0
20009940:	f0001fd0 			; <UNDEFINED> instruction: 0xf0001fd0
20009944:	1fc0001f 	svcne	0x00c0001f
20009948:	001f5000 	andseq	r5, pc, r0
2000994c:	e0000fe0 	and	r0, r0, r0, ror #31
20009950:	07800007 	streq	r0, [r0, r7]
20009954:	00078000 	andeq	r8, r7, r0
20009958:	00000780 	andeq	r0, r0, r0, lsl #15
2000995c:	0300000b 	movweq	r0, #11
20009960:	00010000 	andeq	r0, r1, r0
20009964:	0c000000 	stceq	0, cr0, [r0], {-0}
20009968:	00100000 	andseq	r0, r0, r0
	...

2000997c <flame4_light_bits>:
	...
20009984:	00040000 	andeq	r0, r4, r0
20009988:	40000400 	andmi	r0, r0, r0, lsl #8
2000998c:	c8800048 	stmgt	r0, {r3, r6}
20009990:	00488000 	subeq	r8, r8, r0
20009994:	e4004ac4 	str	r4, [r0], #-2756	; 0xfffff53c
20009998:	2fec007d 	svccs	0x00ec007d
2000999c:	00fff800 	rscseq	pc, pc, r0, lsl #16
200099a0:	be00fbb8 	vmovlt.16	d16[0], pc
200099a4:	73cc00cb 	bicvc	r0, ip, #203	; 0xcb
200099a8:	00732e00 	rsbseq	r2, r3, r0, lsl #28
200099ac:	0e00703a 	mcreq	0, 0, r7, cr0, cr10, {1}
200099b0:	c0060050 	andgt	r0, r6, r0, asr r0
200099b4:	00e00e00 	rsceq	r0, r0, r0, lsl #28
200099b8:	0e00a00c 	cdpeq	0, 0, cr10, cr0, cr12, {0}
200099bc:	601c00e0 	andsvs	r0, ip, r0, ror #1
200099c0:	00602400 	rsbeq	r2, r0, r0, lsl #8
200099c4:	1800301c 	stmdane	r0, {r2, r3, r4, ip, sp}
200099c8:	50380078 	eorspl	r0, r8, r8, ror r0
200099cc:	00587000 	subseq	r7, r8, r0
200099d0:	f0003830 			; <UNDEFINED> instruction: 0xf0003830
200099d4:	1cf00024 	ldclne	0, cr0, [r0], #144	; 0x90
200099d8:	001ee000 	andseq	lr, lr, r0
200099dc:	c0001fe0 	andgt	r1, r0, r0, ror #31
200099e0:	0fc0000f 	svceq	0x00c0000f
	...

200099f4 <firstTime.4079>:
200099f4:	00000001 	andeq	r0, r0, r1

200099f8 <boom1_black_bits>:
	...
20009b5c:	0000003e 	andeq	r0, r0, lr, lsr r0
	...
20009b68:	00630000 	rsbeq	r0, r3, r0
	...
20009b74:	80000000 	andhi	r0, r0, r0
20009b78:	00000043 	andeq	r0, r0, r3, asr #32
	...
20009b84:	00638000 	rsbeq	r8, r3, r0
	...
20009b90:	80000000 	andhi	r0, r0, r0
20009b94:	0000003f 	andeq	r0, r0, pc, lsr r0
	...
20009ba0:	001f0000 	andseq	r0, pc, r0
	...

20009cfc <boom1_gray_bits>:
	...
20009e6c:	00040000 	andeq	r0, r4, r0
	...
20009e7c:	00000024 	andeq	r0, r0, r4, lsr #32
	...
20009e88:	001c0000 	andseq	r0, ip, r0
	...

2000a000 <boom1_light_bits>:
	...
2000a170:	00180000 	andseq	r0, r8, r0
	...
2000a180:	00000018 	andeq	r0, r0, r8, lsl r0
	...

2000a304 <boom2_black_bits>:
	...
2000a420:	00007c00 	andeq	r7, r0, r0, lsl #24
	...
2000a42c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
2000a430:	00000038 	andeq	r0, r0, r8, lsr r0
	...
2000a43c:	0fffff00 	svceq	0x00ffff00
	...
2000a448:	ff800000 			; <UNDEFINED> instruction: 0xff800000
2000a44c:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
	...
2000a458:	3ffeff80 	svccc	0x00feff80
	...
2000a464:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
2000a468:	00007f00 	andeq	r7, r0, r0, lsl #30
	...
2000a474:	7c01ffc0 	stcvc	15, cr15, [r1], {192}	; 0xc0
	...
2000a480:	ff800000 			; <UNDEFINED> instruction: 0xff800000
2000a484:	0000ff01 	andeq	pc, r0, r1, lsl #30
	...
2000a490:	fff1f800 	vcmla.f32	d31, d1, d0[0], #270
	...
2000a49c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
2000a4a0:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
	...
2000a4ac:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
	...
2000a4b8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
2000a4bc:	0000603f 	andeq	r6, r0, pc, lsr r0
	...
2000a4c8:	001ffc00 	andseq	pc, pc, r0, lsl #24
	...
2000a4d4:	fc000000 	stc2	0, cr0, [r0], {-0}
2000a4d8:	0000000f 	andeq	r0, r0, pc
	...
2000a4e4:	0003fc00 	andeq	pc, r3, r0, lsl #24
	...
2000a4f0:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
2000a4f4:	00000001 	andeq	r0, r0, r1
	...

2000a608 <boom2_gray_bits>:
	...
2000a75c:	00010000 	andeq	r0, r1, r0
	...
2000a76c:	0000000f 	andeq	r0, r0, pc
	...
2000a778:	03020000 	movweq	r0, #8192	; 0x2000
	...
2000a788:	000000fe 	strdeq	r0, [r0], -lr
	...
2000a794:	000e0000 	andeq	r0, lr, r0
	...

2000a90c <boom2_light_bits>:
	...
2000aa70:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
2000aa7c:	00fc0000 	rscseq	r0, ip, r0
	...

2000ac10 <boom3_black_bits>:
	...
2000ace4:	000e0000 	andeq	r0, lr, r0
	...
2000acf0:	80000000 	andhi	r0, r0, r0
2000acf4:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
2000ad00:	03ffc000 	mvnseq	ip, #0
	...
2000ad0c:	e0000000 	and	r0, r0, r0
2000ad10:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000ad14:	000001fc 	strdeq	r0, [r0], -ip
2000ad18:	00000000 	andeq	r0, r0, r0
2000ad1c:	1f8ff000 	svcne	0x008ff000
2000ad20:	03ff0000 	mvnseq	r0, #0
2000ad24:	00000000 	andeq	r0, r0, r0
2000ad28:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
2000ad2c:	e0003e1f 	and	r3, r0, pc, lsl lr
2000ad30:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000ad34:	00000000 	andeq	r0, r0, r0
2000ad38:	783ff000 	ldmdavc	pc!, {ip, sp, lr, pc}	; <UNPREDICTABLE>
2000ad3c:	07fff800 	ldrbeq	pc, [pc, r0, lsl #16]!	; <UNPREDICTABLE>
2000ad40:	00000000 	andeq	r0, r0, r0
2000ad44:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
2000ad48:	fc00f8ff 	stc2	8, cr15, [r0], {255}	; 0xff
2000ad4c:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000ad50:	00000000 	andeq	r0, r0, r0
2000ad54:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
2000ad58:	0fe03e00 	svceq	0x00e03e00
2000ad5c:	00000000 	andeq	r0, r0, r0
2000ad60:	c0000000 	andgt	r0, r0, r0
2000ad64:	0700ffff 			; <UNDEFINED> instruction: 0x0700ffff
2000ad68:	00001fe0 	andeq	r1, r0, r0, ror #31
2000ad6c:	00000000 	andeq	r0, r0, r0
2000ad70:	3fffc000 	svccc	0x00ffc000
2000ad74:	3fe00300 	svccc	0x00e00300
2000ad78:	00000000 	andeq	r0, r0, r0
2000ad7c:	e0000000 	and	r0, r0, r0
2000ad80:	ff1c07ff 			; <UNDEFINED> instruction: 0xff1c07ff
2000ad84:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
2000ad88:	00000000 	andeq	r0, r0, r0
2000ad8c:	81ffc000 	mvnshi	ip, r0
2000ad90:	3fffff3f 	svccc	0x00ffff3f
	...
2000ad9c:	fe7fc07f 	mrc2	0, 3, ip, cr15, cr15, {3}
2000ada0:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
2000ada4:	00000000 	andeq	r0, r0, r0
2000ada8:	e0000000 	and	r0, r0, r0
2000adac:	0ffff87f 	svceq	0x00fff87f
	...
2000adb8:	007df800 	rsbseq	pc, sp, r0, lsl #16
2000adbc:	000007fe 	strdeq	r0, [r0], -lr
2000adc0:	00000000 	andeq	r0, r0, r0
2000adc4:	fc000000 	stc2	0, cr0, [r0], {-0}
2000adc8:	03fc00f8 	mvnseq	r0, #248	; 0xf8
	...
2000add4:	01f87e00 	mvnseq	r7, r0, lsl #28
2000add8:	00000030 	andeq	r0, r0, r0, lsr r0
2000addc:	00000000 	andeq	r0, r0, r0
2000ade0:	7f800000 	svcvc	0x00800000
2000ade4:	000003f8 	strdeq	r0, [r0], -r8
	...
2000adf0:	07fc7fc0 	ldrbeq	r7, [ip, r0, asr #31]!
	...
2000adfc:	fff00000 			; <UNDEFINED> instruction: 0xfff00000	; IMB
2000ae00:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
2000ae0c:	07fffff0 			; <UNDEFINED> instruction: 0x07fffff0
	...
2000ae18:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
2000ae1c:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
2000ae28:	03ffbe00 	mvnseq	fp, #0, 28
	...
2000ae38:	000003fe 	strdeq	r0, [r0], -lr
	...
2000ae44:	01f00000 	mvnseq	r0, r0
	...

2000af14 <boom3_gray_bits>:
	...
2000b020:	00700000 	rsbseq	r0, r0, r0
	...
2000b030:	00000020 	andeq	r0, r0, r0, lsr #32
	...
2000b03c:	04c00000 	strbeq	r0, [r0], #0
	...
2000b04c:	00000700 	andeq	r0, r0, r0, lsl #14
	...
2000b05c:	0010c000 	andseq	ip, r0, r0
	...
2000b068:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
2000b06c:	00000010 	andeq	r0, r0, r0, lsl r0
	...
2000b078:	001ffc00 	andseq	pc, pc, r0, lsl #24
	...
2000b0bc:	00020000 	andeq	r0, r2, r0
	...
2000b0cc:	00000001 	andeq	r0, r0, r1
	...
2000b0d8:	00018000 	andeq	r8, r1, r0
	...
2000b0e4:	80000000 	andhi	r0, r0, r0
2000b0e8:	00000007 	andeq	r0, r0, r7
	...
2000b0f4:	00038000 	andeq	r8, r3, r0
	...

2000b218 <boom3_light_bits>:
	...
2000b334:	000001c0 	andeq	r0, r0, r0, asr #3
	...
2000b340:	03000000 	movweq	r0, #0
	...
2000b360:	000f0000 	andeq	r0, pc, r0
	...
2000b36c:	80000000 	andhi	r0, r0, r0
2000b370:	0000000f 	andeq	r0, r0, pc
	...
2000b3d0:	00000006 	andeq	r0, r0, r6
	...
2000b3dc:	00060000 	andeq	r0, r6, r0
	...

2000b51c <boom4_black_bits>:
	...
2000b578:	00000060 	andeq	r0, r0, r0, rrx
2000b57c:	00000000 	andeq	r0, r0, r0
2000b580:	7c000000 	stcvc	0, cr0, [r0], {-0}
2000b584:	00200000 	eoreq	r0, r0, r0
	...
2000b590:	0001fc00 	andeq	pc, r1, r0, lsl #24
	...
2000b59c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
2000b5a0:	00000003 	andeq	r0, r0, r3
	...
2000b5ac:	0003f000 	andeq	pc, r3, r0
	...
2000b5b8:	607ff000 	rsbsvs	pc, pc, r0
2000b5bc:	f8000007 			; <UNDEFINED> instruction: 0xf8000007
2000b5c0:	00000001 	andeq	r0, r0, r1
2000b5c4:	ff81c000 			; <UNDEFINED> instruction: 0xff81c000
2000b5c8:	0007e1ff 	strdeq	lr, [r7], -pc	; <UNPREDICTABLE>
2000b5cc:	0783ff80 	streq	pc, [r3, r0, lsl #31]
2000b5d0:	c0000000 	andgt	r0, r0, r0
2000b5d4:	f3ffff81 			; <UNDEFINED> instruction: 0xf3ffff81
2000b5d8:	ffffe003 			; <UNDEFINED> instruction: 0xffffe003
2000b5dc:	00000783 	andeq	r0, r0, r3, lsl #15
2000b5e0:	ff80c000 			; <UNDEFINED> instruction: 0xff80c000
2000b5e4:	f003f7ff 			; <UNDEFINED> instruction: 0xf003f7ff
2000b5e8:	0787ffff 			; <UNDEFINED> instruction: 0x0787ffff
2000b5ec:	00000000 	andeq	r0, r0, r0
2000b5f0:	f7c3ff80 			; <UNDEFINED> instruction: 0xf7c3ff80
2000b5f4:	cffff003 	svcgt	0x00fff003
2000b5f8:	00000787 	andeq	r0, r0, r7, lsl #15
2000b5fc:	ff800000 			; <UNDEFINED> instruction: 0xff800000
2000b600:	f001efe3 			; <UNDEFINED> instruction: 0xf001efe3
2000b604:	030787ff 	movweq	r8, #30719	; 0x77ff
2000b608:	00000000 	andeq	r0, r0, r0
2000b60c:	8ff0ff80 	svchi	0x00f0ff80
2000b610:	87fff001 	ldrbhi	pc, [pc, r1]!	; <UNPREDICTABLE>
2000b614:	00000003 	andeq	r0, r0, r3
2000b618:	7f800000 	svcvc	0x00800000
2000b61c:	e0000ff8 	strd	r0, [r0], -r8
2000b620:	00c387ff 	strdeq	r8, [r3], #127	; 0x7f
2000b624:	00000000 	andeq	r0, r0, r0
2000b628:	07ffff80 	ldrbeq	pc, [pc, r0, lsl #31]!	; <UNPREDICTABLE>
2000b62c:	c7fff800 	ldrbgt	pc, [pc, r0, lsl #16]!	; <UNPREDICTABLE>
2000b630:	000000c3 	andeq	r0, r0, r3, asr #1
2000b634:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
2000b638:	fc0003ff 	stc2	3, cr0, [r0], {255}	; 0xff
2000b63c:	0001e3ff 	strdeq	lr, [r1], -pc	; <UNPREDICTABLE>
2000b640:	c0000000 	andgt	r0, r0, r0
2000b644:	039fffc0 	orrseq	pc, pc, #192, 30	; 0x300
2000b648:	f9fffc00 			; <UNDEFINED> instruction: 0xf9fffc00
2000b64c:	00000000 	andeq	r0, r0, r0
2000b650:	ffe0c000 			; <UNDEFINED> instruction: 0xffe0c000
2000b654:	fc007807 	stc2	8, cr7, [r0], {7}
2000b658:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
2000b65c:	00000000 	andeq	r0, r0, r0
2000b660:	7e03ffe0 	cdpvc	15, 0, cr15, cr3, cr0, {7}
2000b664:	3ffffc00 	svccc	0x00fffc00
2000b668:	0000001c 	andeq	r0, r0, ip, lsl r0
2000b66c:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
2000b670:	fc00ff00 	stc2	15, cr15, [r0], {-0}
2000b674:	007e1fff 	ldrshteq	r1, [lr], #-255	; 0xffffff01
2000b678:	00000000 	andeq	r0, r0, r0
2000b67c:	7f803f00 	svcvc	0x00803f00
2000b680:	3ffe3800 	svccc	0x00fe3800
2000b684:	000000fe 	strdeq	r0, [r0], -lr
2000b688:	00000000 	andeq	r0, r0, r0
2000b68c:	02007f80 	andeq	r7, r0, #128, 30	; 0x200
2000b690:	00fe1ff8 	ldrshteq	r1, [lr], #248	; 0xf8
2000b694:	00000000 	andeq	r0, r0, r0
2000b698:	7f800000 	svcvc	0x00800000
2000b69c:	1ff00700 	svcne	0x00f00700
2000b6a0:	000000ee 	andeq	r0, r0, lr, ror #1
2000b6a4:	00000000 	andeq	r0, r0, r0
2000b6a8:	0787ff80 	streq	pc, [r7, r0, lsl #31]
2000b6ac:	006607e0 	rsbeq	r0, r6, r0, ror #15
2000b6b0:	00000000 	andeq	r0, r0, r0
2000b6b4:	ff83c000 			; <UNDEFINED> instruction: 0xff83c000
2000b6b8:	00000fc3 	andeq	r0, r0, r3, asr #31
2000b6bc:	00000076 	andeq	r0, r0, r6, ror r0
2000b6c0:	e0000000 	and	r0, r0, r0
2000b6c4:	0fffffc3 	svceq	0x00ffffc3
2000b6c8:	003f0000 	eorseq	r0, pc, r0
2000b6cc:	00000000 	andeq	r0, r0, r0
2000b6d0:	ffe3f000 			; <UNDEFINED> instruction: 0xffe3f000
2000b6d4:	80000fff 	strdhi	r0, [r0], -pc	; <UNPREDICTABLE>
2000b6d8:	0000003f 	andeq	r0, r0, pc, lsr r0
2000b6dc:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
2000b6e0:	0ffffff3 	svceq	0x00fffff3
2000b6e4:	003f81fe 	ldrshteq	r8, [pc], -lr
2000b6e8:	00000000 	andeq	r0, r0, r0
2000b6ec:	9ffbe000 	svcls	0x00fbe000
2000b6f0:	81ff03ff 	ldrshhi	r0, [pc, #63]	; 2000b737 <boom4_black_bits+0x21b>
2000b6f4:	0000001f 	andeq	r0, r0, pc, lsl r0
2000b6f8:	00000000 	andeq	r0, r0, r0
2000b6fc:	00ff1ff8 	ldrshteq	r1, [pc], #248
2000b700:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000b704:	00000000 	andeq	r0, r0, r0
2000b708:	3ff80000 	svccc	0x00f80000
2000b70c:	00fe001f 	rscseq	r0, lr, pc, lsl r0
	...
2000b718:	001e7ff8 			; <UNDEFINED> instruction: 0x001e7ff8
2000b71c:	000000fc 	strdeq	r0, [r0], -ip
2000b720:	00000000 	andeq	r0, r0, r0
2000b724:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
2000b728:	0078003f 	rsbseq	r0, r8, pc, lsr r0
	...
2000b734:	007ffffc 	ldrshteq	pc, [pc], #-252	; <UNPREDICTABLE>
	...
2000b740:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
2000b744:	0000007f 	andeq	r0, r0, pc, ror r0
2000b748:	00000000 	andeq	r0, r0, r0
2000b74c:	04000000 	streq	r0, [r0], #-0
2000b750:	007fc07e 	rsbseq	ip, pc, lr, ror r0	; <UNPREDICTABLE>
	...
2000b75c:	001e0000 	andseq	r0, lr, r0
2000b760:	0000007f 	andeq	r0, r0, pc, ror r0
	...
2000b76c:	1c3c1e0c 	ldcne	14, cr1, [ip], #-48	; 0xffffffd0
	...
2000b778:	ff000000 			; <UNDEFINED> instruction: 0xff000000
2000b77c:	00007c00 	andeq	r7, r0, r0, lsl #24
	...
2000b788:	fc01ff00 	stc2	15, cr15, [r1], {-0}
	...
2000b794:	ff000000 			; <UNDEFINED> instruction: 0xff000000
2000b798:	0000fc01 	andeq	pc, r0, r1, lsl #24
	...
2000b7a4:	fc01fc00 	stc2	12, cr15, [r1], {-0}
2000b7a8:	00000001 	andeq	r0, r0, r1
2000b7ac:	00000000 	andeq	r0, r0, r0
2000b7b0:	e0000000 	and	r0, r0, r0
2000b7b4:	0000f801 	andeq	pc, r0, r1, lsl #16
	...

2000b820 <boom4_gray_bits>:
	...
2000b8bc:	80000000 	andhi	r0, r0, r0
	...
2000b8f4:	002c0000 	eoreq	r0, ip, r0
2000b8f8:	30000000 	andcc	r0, r0, r0
	...
2000b904:	00000004 	andeq	r0, r0, r4
2000b908:	00001800 	andeq	r1, r0, r0, lsl #16
2000b90c:	00000000 	andeq	r0, r0, r0
2000b910:	000f0000 	andeq	r0, pc, r0
2000b914:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
2000b918:	00000000 	andeq	r0, r0, r0
2000b91c:	80000000 	andhi	r0, r0, r0
2000b920:	00000007 	andeq	r0, r0, r7
2000b924:	00005800 	andeq	r5, r0, r0, lsl #16
	...
2000b930:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
	...
2000b940:	00001c00 	andeq	r1, r0, r0, lsl #24
	...
2000b94c:	06000000 	streq	r0, [r0], -r0
	...
2000b990:	01c00000 	biceq	r0, r0, r0
	...
2000b9a0:	00000020 	andeq	r0, r0, r0, lsr #32
2000b9a4:	00000010 	andeq	r0, r0, r0, lsl r0
2000b9a8:	00000000 	andeq	r0, r0, r0
2000b9ac:	00380000 	eorseq	r0, r8, r0
2000b9b0:	00180000 	andseq	r0, r8, r0
	...
2000b9bc:	0000003c 	andeq	r0, r0, ip, lsr r0
2000b9c0:	00000008 	andeq	r0, r0, r8
	...
2000b9f0:	60000000 	andvs	r0, r0, r0
	...
2000ba00:	00006000 	andeq	r6, r0, r0
	...
2000ba0c:	c0000000 	andgt	r0, r0, r0
	...
2000ba1c:	00018000 	andeq	r8, r1, r0
	...

2000bb24 <boom4_light_bits>:
	...
2000bbf8:	00100000 	andseq	r0, r0, r0
	...
2000bc08:	00000018 	andeq	r0, r0, r8, lsl r0
2000bc0c:	00006000 	andeq	r6, r0, r0
	...
2000bc18:	20000000 	andcs	r0, r0, r0
	...
2000bc28:	00002000 	andeq	r2, r0, r0
	...
2000bca4:	000000c0 	andeq	r0, r0, r0, asr #1
	...
2000bcb0:	00400000 	subeq	r0, r0, r0
	...
2000bd04:	00008000 	andeq	r8, r0, r0
	...

2000be28 <boom5_black_bits>:
	...
2000be84:	00000060 	andeq	r0, r0, r0, rrx
2000be88:	00000000 	andeq	r0, r0, r0
2000be8c:	7c000000 	stcvc	0, cr0, [r0], {-0}
2000be90:	00200000 	eoreq	r0, r0, r0
	...
2000be9c:	0001fc00 	andeq	pc, r1, r0, lsl #24
2000bea0:	00000020 	andeq	r0, r0, r0, lsr #32
2000bea4:	00000000 	andeq	r0, r0, r0
2000bea8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
2000beac:	00000003 	andeq	r0, r0, r3
	...
2000beb8:	0003f000 	andeq	pc, r3, r0
	...
2000bec4:	607ff000 	rsbsvs	pc, pc, r0
2000bec8:	f8000006 			; <UNDEFINED> instruction: 0xf8000006
2000becc:	00000001 	andeq	r0, r0, r1
2000bed0:	ff81c000 			; <UNDEFINED> instruction: 0xff81c000
2000bed4:	0006e1ff 	strdeq	lr, [r6], -pc	; <UNPREDICTABLE>
2000bed8:	0783ff80 	streq	pc, [r3, r0, lsl #31]
2000bedc:	c0000000 	andgt	r0, r0, r0
2000bee0:	f3ffff81 			; <UNDEFINED> instruction: 0xf3ffff81
2000bee4:	ffffe00e 			; <UNDEFINED> instruction: 0xffffe00e
2000bee8:	00000783 	andeq	r0, r0, r3, lsl #15
2000beec:	ff80c000 			; <UNDEFINED> instruction: 0xff80c000
2000bef0:	f007f7ff 			; <UNDEFINED> instruction: 0xf007f7ff
2000bef4:	0787ffff 			; <UNDEFINED> instruction: 0x0787ffff
2000bef8:	00000000 	andeq	r0, r0, r0
2000befc:	f7f1ff80 			; <UNDEFINED> instruction: 0xf7f1ff80
2000bf00:	cffff007 	svcgt	0x00fff007
2000bf04:	00000787 	andeq	r0, r0, r7, lsl #15
2000bf08:	ff800000 			; <UNDEFINED> instruction: 0xff800000
2000bf0c:	f003eff0 			; <UNDEFINED> instruction: 0xf003eff0
2000bf10:	0707c3ff 			; <UNDEFINED> instruction: 0x0707c3ff
2000bf14:	00000000 	andeq	r0, r0, r0
2000bf18:	cff0ff80 	svcgt	0x00f0ff80
2000bf1c:	c3fff003 	mvnsgt	pc, #3
2000bf20:	00000603 	andeq	r0, r0, r3, lsl #12
2000bf24:	7f800000 	svcvc	0x00800000
2000bf28:	e0038ff8 	strd	r8, [r3], -r8	; <UNPREDICTABLE>
2000bf2c:	04c3e3ff 	strbeq	lr, [r3], #1023	; 0x3ff
2000bf30:	00000000 	andeq	r0, r0, r0
2000bf34:	07f87f80 	ldrbeq	r7, [r8, r0, lsl #31]!
2000bf38:	e3fff803 	mvns	pc, #196608	; 0x30000
2000bf3c:	000004c3 	andeq	r0, r0, r3, asr #9
2000bf40:	3fc00000 	svccc	0x00c00000
2000bf44:	fc0003ff 	stc2	3, cr0, [r0], {255}	; 0xff
2000bf48:	0481f3ff 	streq	pc, [r1], #1023	; 0x3ff
2000bf4c:	c0000000 	andgt	r0, r0, r0
2000bf50:	03bfffc0 			; <UNDEFINED> instruction: 0x03bfffc0
2000bf54:	f9fffc00 			; <UNDEFINED> instruction: 0xf9fffc00
2000bf58:	00000081 	andeq	r0, r0, r1, lsl #1
2000bf5c:	ffe0c000 			; <UNDEFINED> instruction: 0xffe0c000
2000bf60:	fc00781f 	stc2	8, cr7, [r0], {31}
2000bf64:	0001fcff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
2000bf68:	40000000 	andmi	r0, r0, r0
2000bf6c:	7e07ffe0 	cdpvc	15, 0, cr15, cr7, cr0, {7}
2000bf70:	3ffffc00 	svccc	0x00fffc00
2000bf74:	0000001c 	andeq	r0, r0, ip, lsl r0
2000bf78:	ffc04000 			; <UNDEFINED> instruction: 0xffc04000
2000bf7c:	fc00ff07 	stc2	15, cr15, [r0], {7}
2000bf80:	007e1fff 	ldrshteq	r1, [lr], #-255	; 0xffffff01
2000bf84:	00000000 	andeq	r0, r0, r0
2000bf88:	7f83ffc0 	svcvc	0x0083ffc0
2000bf8c:	3ffe7800 	svccc	0x00fe7800
2000bf90:	000000fe 	strdeq	r0, [r0], -lr
2000bf94:	ff800000 			; <UNDEFINED> instruction: 0xff800000
2000bf98:	63007f81 	movwvs	r7, #3969	; 0xf81
2000bf9c:	00fe1ff8 	ldrshteq	r1, [lr], #248	; 0xf8
2000bfa0:	00000000 	andeq	r0, r0, r0
2000bfa4:	7f803f00 	svcvc	0x00803f00
2000bfa8:	1ff06700 	svcne	0x00f06700
2000bfac:	000000f6 	strdeq	r0, [r0], -r6
2000bfb0:	02000000 	andeq	r0, r0, #0
2000bfb4:	4781ff80 	strmi	pc, [r1, r0, lsl #31]
2000bfb8:	00660fe0 	rsbeq	r0, r6, r0, ror #31
2000bfbc:	00000000 	andeq	r0, r0, r0
2000bfc0:	ff83c000 			; <UNDEFINED> instruction: 0xff83c000
2000bfc4:	0e004fc0 	cdpeq	15, 0, cr4, cr0, cr0, {6}
2000bfc8:	00000066 	andeq	r0, r0, r6, rrx
2000bfcc:	e0000000 	and	r0, r0, r0
2000bfd0:	0ff07fc3 	svceq	0x00f07fc3
2000bfd4:	00770c00 	rsbseq	r0, r7, r0, lsl #24
2000bfd8:	00000000 	andeq	r0, r0, r0
2000bfdc:	7fe3f000 	svcvc	0x00e3f000
2000bfe0:	8c000fff 	stchi	15, cr0, [r0], {255}	; 0xff
2000bfe4:	0000007f 	andeq	r0, r0, pc, ror r0
2000bfe8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
2000bfec:	0ffffff3 	svceq	0x00fffff3
2000bff0:	007f81fe 	ldrshteq	r8, [pc], #-30
2000bff4:	00000000 	andeq	r0, r0, r0
2000bff8:	fffbe000 			; <UNDEFINED> instruction: 0xfffbe000
2000bffc:	81ff03ff 	ldrshhi	r0, [pc, #63]	; 2000c043 <boom5_black_bits+0x21b>
2000c000:	0000007f 	andeq	r0, r0, pc, ror r0
2000c004:	00000000 	andeq	r0, r0, r0
2000c008:	00ff1ff8 	ldrshteq	r1, [pc], #248
2000c00c:	006f01ff 	strdeq	r0, [pc], #-31	; <UNPREDICTABLE>
2000c010:	00000000 	andeq	r0, r0, r0
2000c014:	0ff80000 	svceq	0x00f80000
2000c018:	00fe001e 	rscseq	r0, lr, lr, lsl r0
2000c01c:	00000042 	andeq	r0, r0, r2, asr #32
2000c020:	00000000 	andeq	r0, r0, r0
2000c024:	001e7ff8 			; <UNDEFINED> instruction: 0x001e7ff8
2000c028:	004200fe 	strdeq	r0, [r2], #-14
2000c02c:	00000000 	andeq	r0, r0, r0
2000c030:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
2000c034:	007c003c 	rsbseq	r0, ip, ip, lsr r0
	...
2000c040:	007ffffc 	ldrshteq	pc, [pc], #-252	; <UNPREDICTABLE>
2000c044:	0000001c 	andeq	r0, r0, ip, lsl r0
2000c048:	00000000 	andeq	r0, r0, r0
2000c04c:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
2000c050:	000c007f 	andeq	r0, ip, pc, ror r0
2000c054:	00000000 	andeq	r0, r0, r0
2000c058:	04000000 	streq	r0, [r0], #-0
2000c05c:	007fc07e 	rsbseq	ip, pc, lr, ror r0	; <UNPREDICTABLE>
2000c060:	0000000c 	andeq	r0, r0, ip
2000c064:	00000000 	andeq	r0, r0, r0
2000c068:	001e0000 	andseq	r0, lr, r0
2000c06c:	0000007f 	andeq	r0, r0, pc, ror r0
	...
2000c078:	1c3c1e0e 	ldcne	14, cr1, [ip], #-56	; 0xffffffc8
	...
2000c084:	ff0c0000 			; <UNDEFINED> instruction: 0xff0c0000
2000c088:	00007c00 	andeq	r7, r0, r0, lsl #24
	...
2000c094:	fc01ff0c 	stc2	15, cr15, [r1], {12}
	...
2000c0a0:	ff040000 			; <UNDEFINED> instruction: 0xff040000
2000c0a4:	0000fc01 	andeq	pc, r0, r1, lsl #24
	...
2000c0b0:	fc01fc00 	stc2	12, cr15, [r1], {-0}
2000c0b4:	00000001 	andeq	r0, r0, r1
2000c0b8:	00000000 	andeq	r0, r0, r0
2000c0bc:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
2000c0c0:	0000f801 	andeq	pc, r0, r1, lsl #16
	...
2000c0cc:	9801f000 	stmdals	r1, {ip, sp, lr, pc}
	...
2000c0d8:	c0000000 	andgt	r0, r0, r0
2000c0dc:	00001000 	andeq	r1, r0, r0
	...
2000c0e8:	10000000 	andne	r0, r0, r0
	...

2000c12c <boom5_gray_bits>:
	...
2000c1c8:	80000000 	andhi	r0, r0, r0
	...
2000c1d8:	00010000 	andeq	r0, r1, r0
	...
2000c1e8:	00000001 	andeq	r0, r0, r1
	...
2000c200:	000e0000 	andeq	r0, lr, r0
2000c204:	20000000 	andcs	r0, r0, r0
	...
2000c210:	00000007 	andeq	r0, r0, r7
2000c214:	00000c00 	andeq	r0, r0, r0, lsl #24
2000c218:	00000000 	andeq	r0, r0, r0
2000c21c:	00030000 	andeq	r0, r3, r0
2000c220:	0c000000 	stceq	0, cr0, [r0], {-0}
2000c224:	00000000 	andeq	r0, r0, r0
2000c228:	80000000 	andhi	r0, r0, r0
2000c22c:	00000001 	andeq	r0, r0, r1
2000c230:	00000400 	andeq	r0, r0, r0, lsl #8
2000c234:	00000000 	andeq	r0, r0, r0
2000c238:	00058000 	andeq	r8, r5, r0
2000c23c:	14000000 	strne	r0, [r0], #-0
2000c240:	00000000 	andeq	r0, r0, r0
2000c244:	c0000000 	andgt	r0, r0, r0
2000c248:	00000000 	andeq	r0, r0, r0
2000c24c:	00000c00 	andeq	r0, r0, r0, lsl #24
	...
2000c258:	06000000 	streq	r0, [r0], -r0
	...
2000c268:	00000300 	andeq	r0, r0, r0, lsl #6
	...
2000c29c:	00e80000 	rsceq	r0, r8, r0
	...
2000c2ac:	0000008c 	andeq	r0, r0, ip, lsl #1
2000c2b0:	00000008 	andeq	r0, r0, r8
2000c2b4:	00000000 	andeq	r0, r0, r0
2000c2b8:	00060000 	andeq	r0, r6, r0
2000c2bc:	00080000 	andeq	r0, r8, r0
	...
2000c2c8:	0000003f 	andeq	r0, r0, pc, lsr r0
2000c2cc:	00000018 	andeq	r0, r0, r8, lsl r0
2000c2d0:	00000000 	andeq	r0, r0, r0
2000c2d4:	000f8000 	andeq	r8, pc, r0
2000c2d8:	00080000 	andeq	r0, r8, r0
2000c2dc:	00000000 	andeq	r0, r0, r0
2000c2e0:	80000000 	andhi	r0, r0, r0
	...
2000c30c:	00002000 	andeq	r2, r0, r0
	...
2000c318:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
2000c31c:	00000001 	andeq	r0, r0, r1
	...
2000c328:	00018000 	andeq	r8, r1, r0
	...
2000c338:	00000003 	andeq	r0, r0, r3
	...

2000c430 <boom5_light_bits>:
	...
2000c4d0:	00000001 	andeq	r0, r0, r1
	...
2000c508:	10000000 	andne	r0, r0, r0
	...
2000c514:	00000008 	andeq	r0, r0, r8
2000c518:	00003000 	andeq	r3, r0, r0
2000c51c:	00000000 	andeq	r0, r0, r0
2000c520:	000c0000 	andeq	r0, ip, r0
2000c524:	30000000 	andcc	r0, r0, r0
	...
2000c530:	00000006 	andeq	r0, r0, r6
2000c534:	00001800 	andeq	r1, r0, r0, lsl #16
2000c538:	00000000 	andeq	r0, r0, r0
2000c53c:	00020000 	andeq	r0, r2, r0
2000c540:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
	...
2000c5b0:	00000070 	andeq	r0, r0, r0, ror r0
	...
2000c5bc:	00780000 	rsbseq	r0, r8, r0
2000c5c0:	00100000 	andseq	r0, r0, r0
	...
2000c610:	0000c000 	andeq	ip, r0, r0
	...

2000c734 <boom6_black_bits>:
	...
2000c790:	00000060 	andeq	r0, r0, r0, rrx
2000c794:	00000000 	andeq	r0, r0, r0
2000c798:	7c000000 	stcvc	0, cr0, [r0], {-0}
2000c79c:	00200000 	eoreq	r0, r0, r0
	...
2000c7a8:	0001fc00 	andeq	pc, r1, r0, lsl #24
2000c7ac:	00000020 	andeq	r0, r0, r0, lsr #32
2000c7b0:	00000000 	andeq	r0, r0, r0
2000c7b4:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
2000c7b8:	00200003 	eoreq	r0, r0, r3
	...
2000c7c4:	0003f000 	andeq	pc, r3, r0
	...
2000c7d0:	607ff000 	rsbsvs	pc, pc, r0
2000c7d4:	f8000006 			; <UNDEFINED> instruction: 0xf8000006
2000c7d8:	00000001 	andeq	r0, r0, r1
2000c7dc:	ff81c000 			; <UNDEFINED> instruction: 0xff81c000
2000c7e0:	000661ff 	strdeq	r6, [r6], -pc	; <UNPREDICTABLE>
2000c7e4:	0783ff80 	streq	pc, [r3, r0, lsl #31]
2000c7e8:	c0000000 	andgt	r0, r0, r0
2000c7ec:	73ffff81 	mvnsvc	pc, #516	; 0x204
2000c7f0:	ffffe00e 			; <UNDEFINED> instruction: 0xffffe00e
2000c7f4:	00000783 	andeq	r0, r0, r3, lsl #15
2000c7f8:	ff80c000 			; <UNDEFINED> instruction: 0xff80c000
2000c7fc:	f00ef7f8 			; <UNDEFINED> instruction: 0xf00ef7f8
2000c800:	0787ffff 			; <UNDEFINED> instruction: 0x0787ffff
2000c804:	40000000 	andmi	r0, r0, r0
2000c808:	f7f03f80 			; <UNDEFINED> instruction: 0xf7f03f80
2000c80c:	e3fff007 	mvns	pc, #7
2000c810:	00000787 	andeq	r0, r0, r7, lsl #15
2000c814:	1f800000 	svcne	0x00800000
2000c818:	f007efe0 			; <UNDEFINED> instruction: 0xf007efe0
2000c81c:	0707c1ff 			; <UNDEFINED> instruction: 0x0707c1ff
2000c820:	00000000 	andeq	r0, r0, r0
2000c824:	cfe01f80 	svcgt	0x00e01f80
2000c828:	c1fff003 	mvnsgt	pc, r3
2000c82c:	00000603 	andeq	r0, r0, r3, lsl #12
2000c830:	1f800000 	svcne	0x00800000
2000c834:	f0038ff0 			; <UNDEFINED> instruction: 0xf0038ff0
2000c838:	04c3c1ff 	strbeq	ip, [r3], #511	; 0x1ff
2000c83c:	00000000 	andeq	r0, r0, r0
2000c840:	07fc1f80 	ldrbeq	r1, [ip, r0, lsl #31]!
2000c844:	c1fff803 	mvnsgt	pc, r3, lsl #16
2000c848:	000004c3 	andeq	r0, r0, r3, asr #9
2000c84c:	1fc00000 	svcne	0x00c00000
2000c850:	fc0203ff 	stc2	3, cr0, [r2], {255}	; 0xff
2000c854:	04c1c0ff 	strbeq	ip, [r1], #255	; 0xff
2000c858:	c0000000 	andgt	r0, r0, r0
2000c85c:	03bfffc0 			; <UNDEFINED> instruction: 0x03bfffc0
2000c860:	f07ffc00 			; <UNDEFINED> instruction: 0xf07ffc00
2000c864:	00000481 	andeq	r0, r0, r1, lsl #9
2000c868:	ffe0c000 			; <UNDEFINED> instruction: 0xffe0c000
2000c86c:	fc00799f 	stc2	9, cr7, [r0], {159}	; 0x9f	; <UNPREDICTABLE>
2000c870:	0081f87f 	addeq	pc, r1, pc, ror r8	; <UNPREDICTABLE>
2000c874:	40000000 	andmi	r0, r0, r0
2000c878:	7e87ffe0 	cdpvc	15, 8, cr15, cr7, cr0, {7}
2000c87c:	387ffc00 	ldmdacc	pc!, {sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
2000c880:	0000001c 	andeq	r0, r0, ip, lsl r0
2000c884:	ffc04000 			; <UNDEFINED> instruction: 0xffc04000
2000c888:	fc00ff07 	stc2	15, cr15, [r0], {7}
2000c88c:	007e1fff 	ldrshteq	r1, [lr], #-255	; 0xffffff01
2000c890:	40000000 	andmi	r0, r0, r0
2000c894:	7f83ffc0 	svcvc	0x0083ffc0
2000c898:	3ffe7800 	svccc	0x00fe7800
2000c89c:	000000fe 	strdeq	r0, [r0], -lr
2000c8a0:	ff800000 			; <UNDEFINED> instruction: 0xff800000
2000c8a4:	63007f81 	movwvs	r7, #3969	; 0xf81
2000c8a8:	00ee1ff8 	strdeq	r1, [lr], #248	; 0xf8	; <UNPREDICTABLE>
2000c8ac:	00000000 	andeq	r0, r0, r0
2000c8b0:	7f803f00 	svcvc	0x00803f00
2000c8b4:	1ff06600 	svcne	0x00f06600
2000c8b8:	000000e6 	andeq	r0, r0, r6, ror #1
2000c8bc:	07000000 	streq	r0, [r0, -r0]
2000c8c0:	4600ff80 	strmi	pc, [r0], -r0, lsl #31
2000c8c4:	00660fe0 	rsbeq	r0, r6, r0, ror #31
2000c8c8:	00000000 	andeq	r0, r0, r0
2000c8cc:	3f83c300 	svccc	0x0083c300
2000c8d0:	0e004f80 	cdpeq	15, 0, cr4, cr0, cr0, {4}
2000c8d4:	00000066 	andeq	r0, r0, r6, rrx
2000c8d8:	e3000000 	movw	r0, #0
2000c8dc:	0ff03fc3 	svceq	0x00f03fc3
2000c8e0:	007f0c00 	rsbseq	r0, pc, r0, lsl #24
2000c8e4:	00000000 	andeq	r0, r0, r0
2000c8e8:	ffe3f300 			; <UNDEFINED> instruction: 0xffe3f300
2000c8ec:	8c000fff 	stchi	15, cr0, [r0], {255}	; 0xff
2000c8f0:	0000007f 	andeq	r0, r0, pc, ror r0
2000c8f4:	f1000000 	cps	#0
2000c8f8:	0ffffff3 	svceq	0x00fffff3
2000c8fc:	007f89fe 	ldrshteq	r8, [pc], #-158
2000c900:	00000000 	andeq	r0, r0, r0
2000c904:	3ffbe000 	svccc	0x00fbe000
2000c908:	89ff03ff 	ldmibhi	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9}^	; <UNPREDICTABLE>
2000c90c:	0000007f 	andeq	r0, r0, pc, ror r0
2000c910:	80000000 	andhi	r0, r0, r0
2000c914:	00ff1ffb 	ldrshteq	r1, [pc], #251
2000c918:	006f01ff 	strdeq	r0, [pc], #-31	; <UNPREDICTABLE>
2000c91c:	00000000 	andeq	r0, r0, r0
2000c920:	0ff98000 	svceq	0x00f98000
2000c924:	00fe001e 	rscseq	r0, lr, lr, lsl r0
2000c928:	00000066 	andeq	r0, r0, r6, rrx
2000c92c:	80000000 	andhi	r0, r0, r0
2000c930:	001e3ff8 			; <UNDEFINED> instruction: 0x001e3ff8
2000c934:	004200fe 	strdeq	r0, [r2], #-14
2000c938:	00000000 	andeq	r0, r0, r0
2000c93c:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
2000c940:	007c003c 	rsbseq	r0, ip, ip, lsr r0
2000c944:	00000042 	andeq	r0, r0, r2, asr #32
2000c948:	00000000 	andeq	r0, r0, r0
2000c94c:	0079fffc 	ldrshteq	pc, [r9], #-252	; 0xffffff04	; <UNPREDICTABLE>
2000c950:	0002001c 	andeq	r0, r2, ip, lsl r0
2000c954:	00000000 	andeq	r0, r0, r0
2000c958:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
2000c95c:	000c007f 	andeq	r0, ip, pc, ror r0
2000c960:	00000002 	andeq	r0, r0, r2
2000c964:	04000000 	streq	r0, [r0], #-0
2000c968:	007fc07e 	rsbseq	ip, pc, lr, ror r0	; <UNPREDICTABLE>
2000c96c:	0000000c 	andeq	r0, r0, ip
2000c970:	00000000 	andeq	r0, r0, r0
2000c974:	003e0400 	eorseq	r0, lr, r0, lsl #8
2000c978:	0004007f 	andeq	r0, r4, pc, ror r0
	...
2000c984:	1c3c1e1e 	ldcne	14, cr1, [ip], #-120	; 0xffffff88
2000c988:	00000004 	andeq	r0, r0, r4
2000c98c:	00000000 	andeq	r0, r0, r0
2000c990:	ff1c0000 			; <UNDEFINED> instruction: 0xff1c0000
2000c994:	00007c00 	andeq	r7, r0, r0, lsl #24
	...
2000c9a0:	fc01ff1c 	stc2	15, cr15, [r1], {28}
	...
2000c9ac:	ff0c0000 			; <UNDEFINED> instruction: 0xff0c0000
2000c9b0:	0000fc01 	andeq	pc, r0, r1, lsl #24
	...
2000c9bc:	fc01fc08 	stc2	12, cr15, [r1], {8}
2000c9c0:	00000001 	andeq	r0, r0, r1
2000c9c4:	00000000 	andeq	r0, r0, r0
2000c9c8:	f0080000 			; <UNDEFINED> instruction: 0xf0080000
2000c9cc:	0000f801 	andeq	pc, r0, r1, lsl #16
	...
2000c9d8:	d801f008 	stmdale	r1, {r3, ip, sp, lr, pc}
	...
2000c9e4:	e0000000 	and	r0, r0, r0
2000c9e8:	00009000 	andeq	r9, r0, r0
	...
2000c9f4:	90006000 	andls	r6, r0, r0
	...
2000ca00:	40000000 	andmi	r0, r0, r0
2000ca04:	00001000 	andeq	r1, r0, r0
	...
2000ca10:	00004000 	andeq	r4, r0, r0
	...

2000ca38 <boom6_gray_bits>:
	...
2000cad4:	80000000 	andhi	r0, r0, r0
	...
2000cae4:	00008000 	andeq	r8, r0, r0
	...
2000caf0:	80000000 	andhi	r0, r0, r0
2000caf4:	00000001 	andeq	r0, r0, r1
	...
2000cb00:	00010007 	andeq	r0, r1, r7
	...
2000cb0c:	0008c000 	andeq	ip, r8, r0
2000cb10:	1c000000 	stcne	0, cr0, [r0], {-0}
2000cb14:	00000000 	andeq	r0, r0, r0
2000cb18:	e0000000 	and	r0, r0, r0
2000cb1c:	00000018 	andeq	r0, r0, r8, lsl r0
2000cb20:	00002600 	andeq	r2, r0, r0, lsl #12
2000cb24:	00000000 	andeq	r0, r0, r0
2000cb28:	00136000 	andseq	r6, r3, r0
2000cb2c:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
2000cb30:	00000000 	andeq	r0, r0, r0
2000cb34:	e0000000 	and	r0, r0, r0
2000cb38:	0000000f 	andeq	r0, r0, pc
2000cb3c:	00002600 	andeq	r2, r0, r0, lsl #12
2000cb40:	00000000 	andeq	r0, r0, r0
2000cb44:	0003e000 	andeq	lr, r3, r0
2000cb48:	26000000 	strcs	r0, [r0], -r0
2000cb4c:	00000000 	andeq	r0, r0, r0
2000cb50:	e0000000 	and	r0, r0, r0
2000cb54:	00000000 	andeq	r0, r0, r0
2000cb58:	00003300 	andeq	r3, r0, r0, lsl #6
	...
2000cb64:	09800000 	stmibeq	r0, {}	; <UNPREDICTABLE>
	...
2000cb74:	00000780 	andeq	r0, r0, r0, lsl #15
	...
2000cb80:	07800000 	streq	r0, [r0, r0]
	...
2000cb9c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
2000cba8:	008c0000 	addeq	r0, ip, r0
2000cbac:	00100000 	andseq	r0, r0, r0
	...
2000cbb8:	00000106 	andeq	r0, r0, r6, lsl #2
2000cbbc:	00000008 	andeq	r0, r0, r8
2000cbc0:	00000000 	andeq	r0, r0, r0
2000cbc4:	01630000 	cmneq	r3, r0
2000cbc8:	00080000 	andeq	r0, r8, r0
2000cbcc:	00000000 	andeq	r0, r0, r0
2000cbd0:	c0000000 	andgt	r0, r0, r0
2000cbd4:	0000007f 	andeq	r0, r0, pc, ror r0
2000cbd8:	00000018 	andeq	r0, r0, r8, lsl r0
2000cbdc:	00000000 	andeq	r0, r0, r0
2000cbe0:	000fc000 	andeq	ip, pc, r0
	...
2000cc08:	c0000000 	andgt	r0, r0, r0
	...
2000cc18:	00002000 	andeq	r2, r0, r0
	...
2000cc24:	70000000 	andvc	r0, r0, r0
	...
2000cc34:	0001c000 	andeq	ip, r1, r0
	...
2000cc44:	00000003 	andeq	r0, r0, r3
	...
2000cc50:	00060000 	andeq	r0, r6, r0
	...

2000cd3c <boom6_light_bits>:
	...
2000cddc:	00000001 	andeq	r0, r0, r1
	...
2000cde8:	00010000 	andeq	r0, r1, r0
	...
2000ce10:	00070000 	andeq	r0, r7, r0
	...
2000ce20:	00000007 	andeq	r0, r0, r7
2000ce24:	00001800 	andeq	r1, r0, r0, lsl #16
2000ce28:	00000000 	andeq	r0, r0, r0
2000ce2c:	000c8000 	andeq	r8, ip, r0
2000ce30:	10000000 	andne	r0, r0, r0
	...
2000ce40:	00001800 	andeq	r1, r0, r0, lsl #16
	...
2000ce4c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
	...
2000ce5c:	00000c00 	andeq	r0, r0, r0, lsl #24
	...
2000ce68:	06000000 	streq	r0, [r0], -r0
	...
2000ceac:	00700000 	rsbseq	r0, r0, r0
	...
2000cebc:	000000f8 	strdeq	r0, [r0], -r8
2000cec0:	00000010 	andeq	r0, r0, r0, lsl r0
2000cec4:	00000000 	andeq	r0, r0, r0
2000cec8:	009c0000 	addseq	r0, ip, r0
2000cecc:	00100000 	andseq	r0, r0, r0
	...
2000cf1c:	0000c000 	andeq	ip, r0, r0
	...
2000cf28:	80000000 	andhi	r0, r0, r0
2000cf2c:	00000001 	andeq	r0, r0, r1
	...

2000d040 <firstTime.4114>:
2000d040:	00000001 	andeq	r0, r0, r1

2000d044 <indoors_black_bits>:
2000d044:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000d054:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000d064:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000d074:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000d084:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000d094:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000d0a4:	00000280 	andeq	r0, r0, r0, lsl #5
	...
2000d0b4:	00000440 	andeq	r0, r0, r0, asr #8
	...
2000d0c4:	00002aa8 	andeq	r2, r0, r8, lsr #21
	...
2000d0d4:	00001290 	muleq	r0, r0, r2
	...
2000d0e4:	00002c68 	andeq	r2, r0, r8, ror #24
	...
2000d0f4:	00002008 	andeq	r2, r0, r8
	...
2000d104:	000027c8 	andeq	r2, r0, r8, asr #15
	...
2000d114:	00001ff0 	strdeq	r1, [r0], -r0
	...
2000d124:	00000d60 	andeq	r0, r0, r0, ror #26
	...
2000d194:	f7fbfe00 			; <UNDEFINED> instruction: 0xf7fbfe00
2000d198:	7fbfdfef 	svcvc	0x00bfdfef
2000d19c:	fbfdfeff 	blx	1ff8cda2 <startup-0x7325e>
2000d1a0:	00ff703f 	rscseq	r7, pc, pc, lsr r0	; <UNPREDICTABLE>
2000d1a4:	0c060200 	sfmeq	f0, 4, [r6], {-0}
2000d1a8:	c0603018 	rsbgt	r3, r0, r8, lsl r0
2000d1ac:	06030180 	streq	r0, [r3], -r0, lsl #3
2000d1b0:	0080d02c 	addeq	sp, r0, ip, lsr #32
2000d1b4:	0c060200 	sfmeq	f0, 4, [r6], {-0}
2000d1b8:	c0603018 	rsbgt	r3, r0, r8, lsl r0
2000d1bc:	06030180 	streq	r0, [r3], -r0, lsl #3
2000d1c0:	0080d02c 	addeq	sp, r0, ip, lsr #32
2000d1c4:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
2000d1c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d1cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d1d0:	00ffdfef 	rscseq	sp, pc, pc, ror #31
	...
2000d1e0:	000050e8 	andeq	r5, r0, r8, ror #1
	...
2000d1f0:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
2000d200:	00005028 	andeq	r5, r0, r8, lsr #32
	...
2000d210:	00005028 	andeq	r5, r0, r8, lsr #32
	...
2000d220:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
2000d230:	03f050e8 	mvnseq	r5, #232	; 0xe8
	...
2000d240:	0c0c5fe8 	stceq	15, cr5, [ip], {232}	; 0xe8
	...
2000d250:	10025028 	andne	r5, r2, r8, lsr #32
	...
2000d260:	13fa5028 	mvnsne	r5, #40	; 0x28
	...
2000d270:	100a5fe8 	andne	r5, sl, r8, ror #31
	...
2000d280:	100a50e8 	andne	r5, sl, r8, ror #1
	...
2000d290:	100a5fe8 	andne	r5, sl, r8, ror #31
	...
2000d2a0:	100a5028 	andne	r5, sl, r8, lsr #32
	...
2000d2b0:	100a5028 	andne	r5, sl, r8, lsr #32
	...
2000d2c0:	100a5fe8 	andne	r5, sl, r8, ror #31
	...
2000d2d0:	100a50e8 	andne	r5, sl, r8, ror #1
	...
2000d2e0:	100a5ee8 	andne	r5, sl, r8, ror #29
	...
2000d2f0:	100a5028 	andne	r5, sl, r8, lsr #32
	...
2000d300:	100a5028 	andne	r5, sl, r8, lsr #32
	...
2000d310:	10025fe8 	andne	r5, r2, r8, ror #31
	...
2000d320:	0ffc50e8 	svceq	0x00fc50e8
	...
2000d330:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
2000d340:	00005028 	andeq	r5, r0, r8, lsr #32
	...
2000d350:	00005028 	andeq	r5, r0, r8, lsr #32
	...
2000d360:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
2000d370:	000050e8 	andeq	r5, r0, r8, ror #1
	...
2000d380:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
2000d390:	00007028 	andeq	r7, r0, r8, lsr #32
	...
2000d3a0:	00007028 	andeq	r7, r0, r8, lsr #32
	...
2000d3b0:	00007038 	andeq	r7, r0, r8, lsr r0
2000d3b4:	f7fbfdfe 			; <UNDEFINED> instruction: 0xf7fbfdfe
2000d3b8:	7fbfdfef 	svcvc	0x00bfdfef
2000d3bc:	fbfdfeff 	blx	1ff8cfc2 <startup-0x7303e>
2000d3c0:	bfbfeff7 	svclt	0x00bfeff7
2000d3c4:	0c060301 	stceq	3, cr0, [r6], {1}
2000d3c8:	c0603018 	rsbgt	r3, r0, r8, lsl r0
2000d3cc:	06030180 	streq	r0, [r3], -r0, lsl #3
2000d3d0:	6030180c 	eorsvs	r1, r0, ip, lsl #16
2000d3d4:	0c060301 	stceq	3, cr0, [r6], {1}
2000d3d8:	c0603018 	rsbgt	r3, r0, r8, lsl r0
2000d3dc:	06030180 	streq	r0, [r3], -r0, lsl #3
2000d3e0:	6030180c 	eorsvs	r1, r0, ip, lsl #16
2000d3e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d3e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d3ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d3f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d3f4:	c0603018 	rsbgt	r3, r0, r8, lsl r0
2000d3f8:	06030180 	streq	r0, [r3], -r0, lsl #3
2000d3fc:	6030180c 	eorsvs	r1, r0, ip, lsl #16
2000d400:	030180c0 	movweq	r8, #4288	; 0x10c0
2000d404:	c0603018 	rsbgt	r3, r0, r8, lsl r0
2000d408:	06030180 	streq	r0, [r3], -r0, lsl #3
2000d40c:	6030180c 	eorsvs	r1, r0, ip, lsl #16
2000d410:	030180c0 	movweq	r8, #4288	; 0x10c0
2000d414:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d418:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d41c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d420:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d424:	030180c0 	movweq	r8, #4288	; 0x10c0
2000d428:	30180c06 	andscc	r0, r8, r6, lsl #24
2000d42c:	0180c060 	orreq	ip, r0, r0, rrx
2000d430:	180c0603 	stmdane	ip, {r0, r1, r9, sl}
2000d434:	030180c0 	movweq	r8, #4288	; 0x10c0
2000d438:	30180c06 	andscc	r0, r8, r6, lsl #24
2000d43c:	0180c060 	orreq	ip, r0, r0, rrx
2000d440:	180c0603 	stmdane	ip, {r0, r1, r9, sl}

2000d444 <indoors_gray_bits>:
	...
2000d4a4:	00001110 	andeq	r1, r0, r0, lsl r1
	...
2000d4b4:	00001090 	muleq	r0, r0, r0
	...
2000d4e4:	00000390 	muleq	r0, r0, r3
	...
2000d4f4:	00001340 	andeq	r1, r0, r0, asr #6
	...
2000d504:	00000830 	andeq	r0, r0, r0, lsr r8
	...
2000d594:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
2000d598:	80402010 	subhi	r2, r0, r0, lsl r0
2000d59c:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
2000d5a0:	00008000 	andeq	r8, r0, r0
2000d5a4:	b0582c00 	subslt	r2, r8, r0, lsl #24
2000d5a8:	0582c160 	streq	ip, [r2, #352]	; 0x160
2000d5ac:	582c160b 	stmdapl	ip!, {r0, r1, r3, r9, sl, ip}
2000d5b0:	010b0000 	mrseq	r0, (UNDEF: 11)
2000d5b4:	71b8dc00 			; <UNDEFINED> instruction: 0x71b8dc00
2000d5b8:	1b8dc6e3 	blne	1e37f14c <startup-0x1c80eb4>
2000d5bc:	b8dc6e37 	ldmlt	ip, {r0, r1, r2, r4, r5, r9, sl, fp, sp, lr}^
2000d5c0:	01370001 	teqeq	r7, r1
	...
2000d5d0:	01000000 	mrseq	r0, (UNDEF: 0)
2000d5d4:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
2000d5d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d5dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d5e0:	01ff8007 	mvnseq	r8, r7
	...
2000d5f0:	00008000 	andeq	r8, r0, r0
	...
2000d600:	00008180 	andeq	r8, r0, r0, lsl #3
	...
2000d610:	00008180 	andeq	r8, r0, r0, lsl #3
	...
2000d620:	00008000 	andeq	r8, r0, r0
	...
2000d630:	00008000 	andeq	r8, r0, r0
	...
2000d640:	00008000 	andeq	r8, r0, r0
	...
2000d650:	00008180 	andeq	r8, r0, r0, lsl #3
	...
2000d660:	20008180 	andcs	r8, r0, r0, lsl #3
	...
2000d670:	20808000 	addcs	r8, r0, r0
	...
2000d680:	20c08100 	sbccs	r8, r0, r0, lsl #2
	...
2000d690:	21e08000 	mvncs	r8, r0
	...
2000d6a0:	2bf08180 	blcs	1fc2dca8 <startup-0x3d2358>
	...
2000d6b0:	25c08180 	strbcs	r8, [r0, #384]	; 0x180
	...
2000d6c0:	29e08000 	stmibcs	r0!, {pc}^
	...
2000d6d0:	2bc08100 	blcs	1f02dad8 <startup-0xfd2528>
	...
2000d6e0:	20c08110 	sbccs	r8, r0, r0, lsl r1
	...
2000d6f0:	28e0a190 	stmiacs	r0!, {r4, r7, r8, sp, pc}^
	...
2000d700:	2bf08180 	blcs	1fc2dd08 <startup-0x3d22f8>
	...
2000d710:	28008000 	stmdacs	r0, {pc}
	...
2000d720:	3000a010 	andcc	sl, r0, r0, lsl r0
	...
2000d730:	1fc0a000 	svcne	0x00c0a000
	...
2000d740:	0000a180 	andeq	sl, r0, r0, lsl #3
	...
2000d750:	00008190 	muleq	r0, r0, r1
	...
2000d760:	00008010 	andeq	r8, r0, r0, lsl r0
	...
2000d770:	00008110 	andeq	r8, r0, r0, lsl r1
	...
2000d780:	0000a010 	andeq	sl, r0, r0, lsl r0
	...
2000d790:	00008190 	muleq	r0, r0, r1
	...
2000d7a0:	00008190 	muleq	r0, r0, r1
	...
2000d7b0:	00008180 	andeq	r8, r0, r0, lsl #3
2000d7b4:	08040201 	stmdaeq	r4, {r0, r9}
2000d7b8:	80402010 	subhi	r2, r0, r0, lsl r0
2000d7bc:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
2000d7c0:	40401008 	submi	r1, r0, r8
2000d7c4:	b0582c16 	subslt	r2, r8, r6, lsl ip
2000d7c8:	0582c160 	streq	ip, [r2, #352]	; 0x160
2000d7cc:	582c160b 	stmdapl	ip!, {r0, r1, r3, r9, sl, ip}
2000d7d0:	82c160b0 	sbchi	r6, r1, #176	; 0xb0
2000d7d4:	71b8dc6e 			; <UNDEFINED> instruction: 0x71b8dc6e
2000d7d8:	1b8dc6e3 	blne	1e37f36c <startup-0x1c80c94>
2000d7dc:	b8dc6e37 	ldmlt	ip, {r0, r1, r2, r4, r5, r9, sl, fp, sp, lr}^
2000d7e0:	8dc6e371 	stclhi	3, cr14, [r6, #452]	; 0x1c4
	...
2000d7f4:	0582c160 	streq	ip, [r2, #352]	; 0x160
2000d7f8:	582c160b 	stmdapl	ip!, {r0, r1, r3, r9, sl, ip}
2000d7fc:	82c160b0 	sbchi	r6, r1, #176	; 0xb0
2000d800:	2c160b05 			; <UNDEFINED> instruction: 0x2c160b05
2000d804:	1b8dc6e3 	blne	1e37f398 <startup-0x1c80c68>
2000d808:	b8dc6e37 	ldmlt	ip, {r0, r1, r2, r4, r5, r9, sl, fp, sp, lr}^
2000d80c:	8dc6e371 	stclhi	3, cr14, [r6, #452]	; 0x1c4
2000d810:	dc6e371b 	stclle	7, cr3, [lr], #-108	; 0xffffff94
	...
2000d824:	2c160b05 			; <UNDEFINED> instruction: 0x2c160b05
2000d828:	c160b058 	qdsubgt	fp, r8, r0
2000d82c:	160b0582 	strne	r0, [fp], -r2, lsl #11
2000d830:	60b0582c 	adcsvs	r5, r0, ip, lsr #16
2000d834:	dc6e371b 	stclle	7, cr3, [lr], #-108	; 0xffffff94
2000d838:	c6e371b8 			; <UNDEFINED> instruction: 0xc6e371b8
2000d83c:	6e371b8d 	vaddvs.f64	d1, d23, d13
2000d840:	e371b8dc 	cmn	r1, #220, 16	; 0xdc0000

2000d844 <indoors_light_bits>:
	...
2000d884:	00001010 	andeq	r1, r0, r0, lsl r0
	...
2000d8b4:	00000300 	andeq	r0, r0, r0, lsl #6
	...
2000d8c4:	00001110 	andeq	r1, r0, r0, lsl r1
	...
2000d8d4:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000d8e4:	00001000 	andeq	r1, r0, r0
	...
2000d8f4:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
	...
2000d904:	00001000 	andeq	r1, r0, r0
	...
2000d9a4:	43a1d000 			; <UNDEFINED> instruction: 0x43a1d000
2000d9a8:	3a1d0e87 	bcc	207513cc <firstTime.4040+0x741f10>
2000d9ac:	a1d0e874 	bicsge	lr, r0, r4, ror r8
2000d9b0:	00742013 	rsbseq	r2, r4, r3, lsl r0
2000d9b4:	82412000 	subhi	r2, r1, #0
2000d9b8:	24120904 	ldrcs	r0, [r2], #-2308	; 0xfffff6fc
2000d9bc:	41209048 			; <UNDEFINED> instruction: 0x41209048
2000d9c0:	00482012 	subeq	r2, r8, r2, lsl r0
	...
2000d9d0:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000d9e0:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
2000d9f0:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000da00:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000da10:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000da20:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000da30:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
2000da40:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000da50:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000da60:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000da70:	03702010 	cmneq	r0, #16
	...
2000da80:	03302e10 	teqeq	r0, #16, 28	; 0x100
	...
2000da90:	02102010 	andseq	r2, r0, #16
	...
2000daa0:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000dab0:	02302010 	eorseq	r2, r0, #16
	...
2000dac0:	02102010 	andseq	r2, r0, #16
	...
2000dad0:	00302e10 	eorseq	r2, r0, r0, lsl lr
	...
2000dae0:	03302000 	teqeq	r0, #0
	...
2000daf0:	03100000 	tsteq	r0, #0
	...
2000db00:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000db10:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000db20:	00000f00 	andeq	r0, r0, r0, lsl #30
	...
2000db30:	00000010 	andeq	r0, r0, r0, lsl r0
	...
2000db40:	00000010 	andeq	r0, r0, r0, lsl r0
	...
2000db50:	00002000 	andeq	r2, r0, r0
	...
2000db60:	00002000 	andeq	r2, r0, r0
	...
2000db70:	00002e00 	andeq	r2, r0, r0, lsl #28
	...
2000dbc4:	43a1d0e8 			; <UNDEFINED> instruction: 0x43a1d0e8
2000dbc8:	3a1d0e87 	bcc	207515ec <firstTime.4040+0x742130>
2000dbcc:	a1d0e874 	bicsge	lr, r0, r4, ror r8
2000dbd0:	1d0e8743 	stcne	7, cr8, [lr, #-268]	; 0xfffffef4
2000dbd4:	82412090 	subhi	r2, r1, #144	; 0x90
2000dbd8:	24120904 	ldrcs	r0, [r2], #-2308	; 0xfffff6fc
2000dbdc:	41209048 			; <UNDEFINED> instruction: 0x41209048
2000dbe0:	12090482 	andne	r0, r9, #-2113929216	; 0x82000000
	...
2000dbf4:	3a1d0e87 	bcc	20751618 <firstTime.4040+0x74215c>
2000dbf8:	a1d0e874 	bicsge	lr, r0, r4, ror r8
2000dbfc:	1d0e8743 	stcne	7, cr8, [lr, #-268]	; 0xfffffef4
2000dc00:	d0e8743a 	rscle	r7, r8, sl, lsr r4
2000dc04:	24120904 	ldrcs	r0, [r2], #-2308	; 0xfffff6fc
2000dc08:	41209048 			; <UNDEFINED> instruction: 0x41209048
2000dc0c:	12090482 	andne	r0, r9, #-2113929216	; 0x82000000
2000dc10:	20904824 	addscs	r4, r0, r4, lsr #16
	...
2000dc24:	d0e8743a 	rscle	r7, r8, sl, lsr r4
2000dc28:	0e8743a1 	cdpeq	3, 8, cr4, cr7, cr1, {5}
2000dc2c:	e8743a1d 	ldmda	r4!, {r0, r2, r3, r4, r9, fp, ip, sp}^
2000dc30:	8743a1d0 			; <UNDEFINED> instruction: 0x8743a1d0
2000dc34:	20904824 	addscs	r4, r0, r4, lsr #16
2000dc38:	09048241 	stmdbeq	r4, {r0, r6, r9, pc}
2000dc3c:	90482412 	subls	r2, r8, r2, lsl r4
2000dc40:	04824120 	streq	r4, [r2], #288	; 0x120

2000dc44 <firstTime.4040>:
2000dc44:	00000001 	andeq	r0, r0, r1

2000dc48 <indoors2_black_bits>:
2000dc48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc58:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc94:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dca0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dca4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dca8:	ffffeeef 			; <UNDEFINED> instruction: 0xffffeeef
2000dcac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dcb0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dcb4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dcb8:	ffffec6f 			; <UNDEFINED> instruction: 0xffffec6f
2000dcbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dcc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dcc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dcc8:	ffffeaaf 			; <UNDEFINED> instruction: 0xffffeaaf
2000dccc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dcd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dcd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dcd8:	fffff29f 			; <UNDEFINED> instruction: 0xfffff29f
2000dcdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dce0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dce4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dce8:	ffffec6f 			; <UNDEFINED> instruction: 0xffffec6f
2000dcec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dcf0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dcf4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dcf8:	ffffe00f 			; <UNDEFINED> instruction: 0xffffe00f
2000dcfc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd04:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd08:	ffffe7cf 			; <UNDEFINED> instruction: 0xffffe7cf
2000dd0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd24:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd58:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd94:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dd98:	f7fbffff 			; <UNDEFINED> instruction: 0xf7fbffff
2000dd9c:	7fbfdfef 	svcvc	0x00bfdfef
2000dda0:	fbfdfeff 	blx	1ff8d9a6 <startup-0x7265a>
2000dda4:	ffff7fff 			; <UNDEFINED> instruction: 0xffff7fff
2000dda8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000ddac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000ddb0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000ddb4:	feffdfef 	cdp2	15, 15, cr13, cr15, cr15, {7}
2000ddb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000ddbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000ddc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000ddc4:	feffdfef 	cdp2	15, 15, cr13, cr15, cr15, {7}
2000ddc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000ddcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000ddd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000ddd4:	feffdfef 	cdp2	15, 15, cr13, cr15, cr15, {7}
2000ddd8:	00000fff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
2000dde4:	fe0050e8 	cdp2	0, 0, cr5, cr0, cr8, {7}
2000dde8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000ddec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000ddf0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000ddf4:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
2000ddf8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000ddfc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de04:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
2000de08:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de14:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
2000de18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de24:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
2000de28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de34:	ffff50ef 			; <UNDEFINED> instruction: 0xffff50ef
2000de38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de44:	ec0d5fef 	stc	15, cr5, [sp], {239}	; 0xef
2000de48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de54:	f003502f 			; <UNDEFINED> instruction: 0xf003502f
2000de58:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de64:	d3fb502f 	mvnsle	r5, #47	; 0x2f
2000de68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de74:	d00b5fef 	andle	r5, fp, pc, ror #31
2000de78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de84:	d00b50ef 	andle	r5, fp, pc, ror #1
2000de88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de94:	d00b5fef 	andle	r5, fp, pc, ror #31
2000de98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dea0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dea4:	d00b502f 	andle	r5, fp, pc, lsr #32
2000dea8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000deac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000deb0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000deb4:	d00b502f 	andle	r5, fp, pc, lsr #32
2000deb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000debc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dec0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dec4:	d00b5fef 	andle	r5, fp, pc, ror #31
2000dec8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000decc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000ded0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000ded4:	d00b50ef 	andle	r5, fp, pc, ror #1
2000ded8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dedc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dee0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dee4:	d00b5eef 	andle	r5, fp, pc, ror #29
2000dee8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000deec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000def0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000def4:	d00b502f 	andle	r5, fp, pc, lsr #32
2000def8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000defc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000df00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000df04:	d00b502f 	andle	r5, fp, pc, lsr #32
2000df08:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000df0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000df10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000df14:	d0035fef 	andle	r5, r3, pc, ror #31
2000df18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000df1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000df20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000df24:	cffd50ef 	svcgt	0x00fd50ef
2000df28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000df2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000df30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000df34:	e03f5fef 	eors	r5, pc, pc, ror #31
2000df38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000df3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000df40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000df44:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
2000df48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000df4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000df50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000df54:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
2000df58:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000df5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000df60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000df64:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
2000df68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000df6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000df70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000df74:	ffff50ef 			; <UNDEFINED> instruction: 0xffff50ef
2000df78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000df7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000df80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000df84:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
2000df88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000df8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000df90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000df94:	ffff7e6f 			; <UNDEFINED> instruction: 0xffff7e6f
2000df98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000df9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dfa0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dfa4:	ffff7e6f 			; <UNDEFINED> instruction: 0xffff7e6f
2000dfa8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dfac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dfb0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dfb4:	ffff7e7f 			; <UNDEFINED> instruction: 0xffff7e7f
2000dfb8:	f7fbfdfe 			; <UNDEFINED> instruction: 0xf7fbfdfe
2000dfbc:	7fbfdfef 	svcvc	0x00bfdfef
2000dfc0:	fbfdfeff 	blx	1ff8dbc6 <startup-0x7243a>
2000dfc4:	bfbfeff7 	svclt	0x00bfeff7
2000dfc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dfcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dfd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dfd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dfd8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dfdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dfe0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dfe4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dfe8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dfec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dff0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dff4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dff8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dffc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000e000:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000e004:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000e008:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000e00c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000e010:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000e014:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000e018:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000e01c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000e020:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000e024:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000e028:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000e02c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000e030:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000e034:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000e038:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000e03c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000e040:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000e044:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

2000e048 <indoors2_gray_bits>:
	...
2000e0a8:	00001110 	andeq	r1, r0, r0, lsl r1
	...
2000e0b8:	00001090 	muleq	r0, r0, r0
	...
2000e0e8:	00000390 	muleq	r0, r0, r3
	...
2000e0f8:	00001340 	andeq	r1, r0, r0, asr #6
	...
2000e108:	00000830 	andeq	r0, r0, r0, lsr r8
	...
2000e198:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
2000e19c:	80402010 	subhi	r2, r0, r0, lsl r0
2000e1a0:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
2000e1a4:	00008000 	andeq	r8, r0, r0
	...
2000e1b4:	01000000 	mrseq	r0, (UNDEF: 0)
	...
2000e1c4:	01000000 	mrseq	r0, (UNDEF: 0)
	...
2000e1d4:	01000000 	mrseq	r0, (UNDEF: 0)
2000e1d8:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
2000e1dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000e1e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000e1e4:	01ff8007 	mvnseq	r8, r7
	...
2000e1f4:	00008000 	andeq	r8, r0, r0
	...
2000e204:	00008180 	andeq	r8, r0, r0, lsl #3
	...
2000e214:	00008180 	andeq	r8, r0, r0, lsl #3
	...
2000e224:	00008000 	andeq	r8, r0, r0
	...
2000e234:	00008000 	andeq	r8, r0, r0
	...
2000e244:	00008000 	andeq	r8, r0, r0
	...
2000e254:	00008180 	andeq	r8, r0, r0, lsl #3
	...
2000e264:	20008180 	andcs	r8, r0, r0, lsl #3
	...
2000e274:	20808000 	addcs	r8, r0, r0
	...
2000e284:	20c08100 	sbccs	r8, r0, r0, lsl #2
	...
2000e294:	21e08000 	mvncs	r8, r0
	...
2000e2a4:	2bf08180 	blcs	1fc2e8ac <startup-0x3d1754>
	...
2000e2b4:	25c08180 	strbcs	r8, [r0, #384]	; 0x180
	...
2000e2c4:	29e08000 	stmibcs	r0!, {pc}^
	...
2000e2d4:	2bc08100 	blcs	1f02e6dc <startup-0xfd1924>
	...
2000e2e4:	20c08110 	sbccs	r8, r0, r0, lsl r1
	...
2000e2f4:	28e0a190 	stmiacs	r0!, {r4, r7, r8, sp, pc}^
	...
2000e304:	2bf08180 	blcs	1fc2e90c <startup-0x3d16f4>
	...
2000e314:	28008000 	stmdacs	r0, {pc}
	...
2000e324:	3000a010 	andcc	sl, r0, r0, lsl r0
	...
2000e334:	1fc0a000 	svcne	0x00c0a000
	...
2000e344:	0000a180 	andeq	sl, r0, r0, lsl #3
	...
2000e354:	00008190 	muleq	r0, r0, r1
	...
2000e364:	00008010 	andeq	r8, r0, r0, lsl r0
	...
2000e374:	00008110 	andeq	r8, r0, r0, lsl r1
	...
2000e384:	0000a010 	andeq	sl, r0, r0, lsl r0
	...
2000e394:	00008190 	muleq	r0, r0, r1
	...
2000e3a4:	00008190 	muleq	r0, r0, r1
	...
2000e3b4:	00008180 	andeq	r8, r0, r0, lsl #3
2000e3b8:	08040201 	stmdaeq	r4, {r0, r9}
2000e3bc:	80402010 	subhi	r2, r0, r0, lsl r0
2000e3c0:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
2000e3c4:	40401008 	submi	r1, r0, r8
	...

2000e448 <indoors2_light_bits>:
	...
2000e4b8:	00000300 	andeq	r0, r0, r0, lsl #6
	...
2000e4c8:	00001110 	andeq	r1, r0, r0, lsl r1
	...
2000e4d8:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000e4e8:	00001000 	andeq	r1, r0, r0
	...
2000e4f8:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
	...
2000e508:	00001000 	andeq	r1, r0, r0
	...
2000e5b4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e5c4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e5d4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e5e4:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
2000e5f4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e604:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e614:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e624:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e634:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
2000e644:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e654:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e664:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e674:	03702010 	cmneq	r0, #16
	...
2000e684:	03302e10 	teqeq	r0, #16, 28	; 0x100
	...
2000e694:	02102010 	andseq	r2, r0, #16
	...
2000e6a4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e6b4:	02302010 	eorseq	r2, r0, #16
	...
2000e6c4:	02102010 	andseq	r2, r0, #16
	...
2000e6d4:	00302e10 	eorseq	r2, r0, r0, lsl lr
	...
2000e6e4:	03302000 	teqeq	r0, #0
	...
2000e6f4:	03100000 	tsteq	r0, #0
	...
2000e704:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e714:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e724:	00000f00 	andeq	r0, r0, r0, lsl #30
	...
2000e734:	00000010 	andeq	r0, r0, r0, lsl r0
	...
2000e744:	00000010 	andeq	r0, r0, r0, lsl r0
	...
2000e754:	00002000 	andeq	r2, r0, r0
	...
2000e764:	00002000 	andeq	r2, r0, r0
	...
2000e774:	00002e00 	andeq	r2, r0, r0, lsl #28
	...

2000e848 <firstTime.4040>:
2000e848:	00000001 	andeq	r0, r0, r1

2000e84c <trophy_black_bits>:
2000e84c:	00d40028 	sbcseq	r0, r4, r8, lsr #32
2000e850:	03fe01aa 	mvnseq	r0, #-2147483606	; 0x8000002a
2000e854:	02220401 	eoreq	r0, r2, #16777216	; 0x1000000
2000e858:	02220232 	eoreq	r0, r2, #536870915	; 0x20000003
2000e85c:	00880124 	addeq	r0, r8, r4, lsr #2
2000e860:	00500088 	subseq	r0, r0, r8, lsl #1
2000e864:	00880088 	addeq	r0, r8, r8, lsl #1
2000e868:	020201fc 	andeq	r0, r2, #252, 2	; 0x3f
2000e86c:	00000202 	andeq	r0, r0, r2, lsl #4

2000e870 <trophy_gray_bits>:
	...
2000e878:	01000300 	mrseq	r0, LR_irq
2000e87c:	01000100 	mrseq	r0, (UNDEF: 16)
2000e880:	00000080 	andeq	r0, r0, r0, lsl #1
2000e884:	00000000 	andeq	r0, r0, r0
2000e888:	00400040 	subeq	r0, r0, r0, asr #32
2000e88c:	01f00000 	mvnseq	r0, r0
2000e890:	000001e8 	andeq	r0, r0, r8, ror #3

2000e894 <trophy_light_bits>:
2000e894:	00000000 	andeq	r0, r0, r0
2000e898:	00000050 	andeq	r0, r0, r0, asr r0
2000e89c:	008800ec 	addeq	r0, r8, ip, ror #1
2000e8a0:	008800c0 	addeq	r0, r8, r0, asr #1
2000e8a4:	00600048 	rsbeq	r0, r0, r8, asr #32
2000e8a8:	00200060 	eoreq	r0, r0, r0, rrx
2000e8ac:	00200020 	eoreq	r0, r0, r0, lsr #32
2000e8b0:	000c0000 	andeq	r0, ip, r0
2000e8b4:	00000014 	andeq	r0, r0, r4, lsl r0

2000e8b8 <firstTime.4040>:
2000e8b8:	00000001 	andeq	r0, r0, r1

2000e8bc <roger_black_bits>:
2000e8bc:	00000000 	andeq	r0, r0, r0
2000e8c0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
	...
2000e8d0:	8fc00000 	svchi	0x00c00000
2000e8d4:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
2000e8e0:	fff00000 			; <UNDEFINED> instruction: 0xfff00000	; IMB
2000e8e4:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
2000e8f0:	ffbe0000 			; <UNDEFINED> instruction: 0xffbe0000
2000e8f4:	00000fff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
2000e900:	c3fe0000 	mvnsgt	r0, #0
2000e904:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
	...
2000e910:	00cf0000 	sbceq	r0, pc, r0
2000e914:	00002fff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
	...
2000e920:	800f0000 	andhi	r0, pc, r0
2000e924:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
	...
2000e930:	80000000 	andhi	r0, r0, r0
2000e934:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
	...
2000e940:	c0000000 	andgt	r0, r0, r0
2000e944:	00006fff 	strdeq	r6, [r0], -pc	; <UNPREDICTABLE>
	...
2000e954:	00007ffc 	strdeq	r7, [r0], -ip
	...
2000e964:	0000fff0 	strdeq	pc, [r0], -r0
	...
2000e974:	0001ffd0 	ldrdeq	pc, [r1], -r0
	...
2000e984:	0001ffd0 	ldrdeq	pc, [r1], -r0
	...
2000e994:	0003fff2 	strdeq	pc, [r3], -r2
2000e998:	07000000 	streq	r0, [r0, -r0]
	...
2000e9a4:	00037fa4 	andeq	r7, r3, r4, lsr #31
2000e9a8:	07800000 	streq	r0, [r0, r0]
2000e9ac:	00078f00 	andeq	r8, r7, r0, lsl #30
2000e9b0:	00000000 	andeq	r0, r0, r0
2000e9b4:	00073f08 	andeq	r3, r7, r8, lsl #30
2000e9b8:	07800000 	streq	r0, [r0, r0]
2000e9bc:	00078f00 	andeq	r8, r7, r0, lsl #30
2000e9c0:	00000000 	andeq	r0, r0, r0
2000e9c4:	000e0f00 	andeq	r0, lr, r0, lsl #30
2000e9c8:	038000c0 	orreq	r0, r0, #192	; 0xc0
2000e9cc:	00038e00 	andeq	r8, r3, r0, lsl #28
2000e9d0:	00000000 	andeq	r0, r0, r0
2000e9d4:	000c0700 	andeq	r0, ip, r0, lsl #14
2000e9d8:	038001e0 	orreq	r0, r0, #224, 2	; 0x38
2000e9dc:	0003de00 	andeq	sp, r3, r0, lsl #28
2000e9e0:	00000000 	andeq	r0, r0, r0
2000e9e4:	000c0000 	andeq	r0, ip, r0
2000e9e8:	038000c0 	orreq	r0, r0, #192	; 0xc0
2000e9ec:	38e1fc00 	stmiacc	r1!, {sl, fp, ip, sp, lr, pc}^
2000e9f0:	00000006 	andeq	r0, r0, r6
2000e9f4:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
2000e9f8:	0381d80e 	orreq	sp, r1, #917504	; 0xe0000
2000e9fc:	79f0f800 	ldmibvc	r0!, {fp, ip, sp, lr, pc}^
2000ea00:	00000007 	andeq	r0, r0, r7
2000ea04:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
2000ea08:	0383f9cf 	orreq	pc, r3, #3391488	; 0x33c000
2000ea0c:	73f87000 	mvnsvc	r7, #0
2000ea10:	00000007 	andeq	r0, r0, r7
2000ea14:	5c000000 	stcpl	0, cr0, [r0], {-0}
2000ea18:	0387f9e7 	orreq	pc, r7, #3784704	; 0x39c000
2000ea1c:	73b87000 			; <UNDEFINED> instruction: 0x73b87000
2000ea20:	00000007 	andeq	r0, r0, r7
2000ea24:	fc000000 	stc2	0, cr0, [r0], {-0}
2000ea28:	018771e7 	orreq	r7, r7, r7, ror #3
2000ea2c:	73b87000 			; <UNDEFINED> instruction: 0x73b87000
2000ea30:	00000007 	andeq	r0, r0, r7
2000ea34:	fc000000 	stc2	0, cr0, [r0], {-0}
2000ea38:	000771c7 	andeq	r7, r7, r7, asr #3
2000ea3c:	73b87000 			; <UNDEFINED> instruction: 0x73b87000
2000ea40:	00000007 	andeq	r0, r0, r7
2000ea44:	fc000000 	stc2	0, cr0, [r0], {-0}
2000ea48:	000771c7 	andeq	r7, r7, r7, asr #3
2000ea4c:	f3f87000 	vrev64.32	d23, d0
2000ea50:	0000000f 	andeq	r0, r0, pc
2000ea54:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
2000ea58:	018771c3 	orreq	r7, r7, r3, asr #3
2000ea5c:	e1f0f800 	mvns	pc, r0, lsl #16
2000ea60:	0000000f 	andeq	r0, r0, pc
2000ea64:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
2000ea68:	03cf73c3 	biceq	r7, pc, #201326595	; 0xc000003
2000ea6c:	c0e0f800 	rscgt	pc, r0, r0, lsl #16
2000ea70:	0000000d 	andeq	r0, r0, sp
2000ea74:	10000000 	andne	r0, r0, r0
2000ea78:	018e3381 	orreq	r3, lr, r1, lsl #7
	...
2000eaf4:	00000780 	andeq	r0, r0, r0, lsl #15
	...
2000eb04:	00000020 	andeq	r0, r0, r0, lsr #32
	...
2000eb14:	00000020 	andeq	r0, r0, r0, lsr #32
	...
2000eb30:	00000c00 	andeq	r0, r0, r0, lsl #24
	...
2000eb40:	00003f80 	andeq	r3, r0, r0, lsl #31
	...
2000eb50:	00003f80 	andeq	r3, r0, r0, lsl #31
	...
2000eb5c:	c0000000 	andgt	r0, r0, r0
2000eb60:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
	...
2000eb6c:	c0000000 	andgt	r0, r0, r0
2000eb70:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
	...
2000eb7c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
2000eb80:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
	...
2000eb8c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
2000eb90:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
	...
2000eb9c:	fc000000 	stc2	0, cr0, [r0], {-0}
2000eba0:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
	...
2000ebac:	ff000000 			; <UNDEFINED> instruction: 0xff000000
2000ebb0:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
	...
2000ebbc:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
2000ebc0:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
2000ebc4:	003fe000 	eorseq	lr, pc, r0
2000ebc8:	00000000 	andeq	r0, r0, r0
2000ebcc:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
2000ebd0:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
2000ebd4:	00ffe000 	rscseq	lr, pc, r0
2000ebd8:	00000000 	andeq	r0, r0, r0
2000ebdc:	fff00000 			; <UNDEFINED> instruction: 0xfff00000	; IMB
2000ebe0:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
2000ebe4:	03ffe000 	mvnseq	lr, #0
2000ebe8:	00000000 	andeq	r0, r0, r0
2000ebec:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
2000ebf0:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
2000ebf4:	0ffff000 	svceq	0x00fff000
2000ebf8:	00000000 	andeq	r0, r0, r0
2000ebfc:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
2000ec00:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
2000ec04:	3ffff000 	svccc	0x00fff000
2000ec08:	00000000 	andeq	r0, r0, r0
2000ec0c:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
2000ec10:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
2000ec14:	fffff038 			; <UNDEFINED> instruction: 0xfffff038
2000ec18:	00000000 	andeq	r0, r0, r0
2000ec1c:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
2000ec20:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
2000ec24:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
2000ec28:	00000001 	andeq	r0, r0, r1
2000ec2c:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
2000ec30:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
2000ec34:	fffffc00 			; <UNDEFINED> instruction: 0xfffffc00
2000ec38:	00000001 	andeq	r0, r0, r1
2000ec3c:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
2000ec40:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
2000ec44:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
2000ec48:	0000007f 	andeq	r0, r0, pc, ror r0
2000ec4c:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
2000ec50:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
2000ec54:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
2000ec58:	0000007f 	andeq	r0, r0, pc, ror r0
2000ec5c:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
2000ec60:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
2000ec64:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
2000ec68:	0000007f 	andeq	r0, r0, pc, ror r0
2000ec6c:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
2000ec70:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
2000ec74:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
2000ec78:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000ec7c:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
2000ec80:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
2000ec84:	ffffff20 			; <UNDEFINED> instruction: 0xffffff20
2000ec88:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000ec8c:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
2000ec90:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
2000ec94:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
2000ec98:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000ec9c:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
2000eca0:	00407fff 	strdeq	r7, [r0], #-255	; 0xffffff01
2000eca4:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
2000eca8:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000ecac:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
2000ecb0:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
2000ecb4:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
2000ecb8:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

2000ecbc <roger_gray_bits>:
2000ecbc:	00000000 	andeq	r0, r0, r0
2000ecc0:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
2000ecc4:	0000003f 	andeq	r0, r0, pc, lsr r0
	...
2000ecd0:	70000000 	andvc	r0, r0, r0
	...
2000ecf0:	00400000 	subeq	r0, r0, r0
	...
2000ed00:	3c000000 	stccc	0, cr0, [r0], {-0}
	...
2000ed10:	ff300000 			; <UNDEFINED> instruction: 0xff300000
2000ed14:	00001000 	andeq	r1, r0, r0
	...
2000ed20:	7ff00000 	svcvc	0x00f00000	; IMB
	...
2000ed30:	7fff8000 	svcvc	0x00ff8000
2000ed34:	00008000 	andeq	r8, r0, r0
	...
2000ed40:	3effc000 	cdpcc	0, 15, cr12, cr15, cr0, {0}
2000ed44:	00009000 	andeq	r9, r0, r0
	...
2000ed50:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
2000ed54:	00038003 	andeq	r8, r3, r3
	...
2000ed60:	fff7c000 			; <UNDEFINED> instruction: 0xfff7c000
2000ed64:	0003000f 	andeq	r0, r3, pc
	...
2000ed70:	fcf3c000 	ldc2l	0, cr12, [r3]
2000ed74:	0002002f 	andeq	r0, r2, pc, lsr #32
	...
2000ed80:	fc71c000 	ldc2l	0, cr12, [r1], #-0
2000ed84:	0006002f 	andeq	r0, r6, pc, lsr #32
	...
2000ed90:	f031c000 			; <UNDEFINED> instruction: 0xf031c000
2000ed94:	0004000d 	andeq	r0, r4, sp
	...
2000eda0:	e003c000 	and	ip, r3, r0
2000eda4:	000c805b 	andeq	r8, ip, fp, asr r0
	...
2000edb0:	0003e000 	andeq	lr, r3, r0
2000edb4:	0008c0f7 	strdeq	ip, [r8], -r7
	...
2000edc0:	0001e000 	andeq	lr, r1, r0
2000edc4:	0001f0fc 	strdeq	pc, [r1], -ip
	...
2000edd0:	0001e000 	andeq	lr, r1, r0
2000edd4:	0003f8f0 	strdeq	pc, [r3], -r0
	...
2000ede0:	0001e000 	andeq	lr, r1, r0
2000ede4:	0003ffe0 	andeq	pc, r3, r0, ror #31
	...
2000edf0:	0000e000 	andeq	lr, r0, r0
2000edf4:	0003ff80 	andeq	pc, r3, r0, lsl #31
	...
2000ee00:	00006000 	andeq	r6, r0, r0
2000ee04:	000bff00 	andeq	pc, fp, r0, lsl #30
	...
2000ee10:	00006000 	andeq	r6, r0, r0
2000ee14:	000ffe00 	andeq	pc, pc, r0, lsl #28
	...
2000ee20:	00002000 	andeq	r2, r0, r0
2000ee24:	000ff000 	andeq	pc, pc, r0
	...
2000ee30:	00002000 	andeq	r2, r0, r0
2000ee34:	000ff800 	andeq	pc, pc, r0, lsl #16
	...
2000ee44:	0007f800 	andeq	pc, r7, r0, lsl #16
	...
2000ee54:	0007f800 	andeq	pc, r7, r0, lsl #16
	...
2000ee64:	0007f800 	andeq	pc, r7, r0, lsl #16
	...
2000ee74:	0007f800 	andeq	pc, r7, r0, lsl #16
	...
2000ee84:	0007f800 	andeq	pc, r7, r0, lsl #16
	...
2000ee94:	0007f000 	andeq	pc, r7, r0
	...
2000eea4:	0007f800 	andeq	pc, r7, r0, lsl #16
	...
2000eeb4:	0003fc00 	andeq	pc, r3, r0, lsl #24
	...
2000eec4:	0003fc00 	andeq	pc, r3, r0, lsl #24
	...
2000eed0:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
2000eed4:	0003fc00 	andeq	pc, r3, r0, lsl #24
	...
2000eee0:	7c000800 	stcvc	8, cr0, [r0], {-0}
2000eee4:	0003ff80 	andeq	pc, r3, r0, lsl #31
	...
2000eef0:	60000800 	andvs	r0, r0, r0, lsl #16
2000eef4:	0003f870 	andeq	pc, r3, r0, ror r8	; <UNPREDICTABLE>
	...
2000ef00:	70000800 	andvc	r0, r0, r0, lsl #16
2000ef04:	0003ffd0 	ldrdeq	pc, [r3], -r0
	...
2000ef10:	00000800 	andeq	r0, r0, r0, lsl #16
2000ef14:	0003ffd0 	ldrdeq	pc, [r3], -r0
	...
2000ef24:	0003fff0 	strdeq	pc, [r3], -r0
	...
2000ef30:	00003000 	andeq	r3, r0, r0
2000ef34:	0003fff0 	strdeq	pc, [r3], -r0
	...
2000ef44:	0003fff0 	strdeq	pc, [r3], -r0
	...
2000ef54:	0003f3f0 	strdeq	pc, [r3], -r0
	...
2000ef64:	0003fff0 	strdeq	pc, [r3], -r0
	...
2000ef74:	0003fee0 	andeq	pc, r3, r0, ror #29
	...
2000ef84:	0001ffe0 	andeq	pc, r1, r0, ror #31
	...
2000ef94:	0001ffe0 	andeq	pc, r1, r0, ror #31
	...
2000efa4:	0002fff0 	strdeq	pc, [r2], -r0
	...
2000efb4:	0003fff8 	strdeq	pc, [r3], -r8
	...
2000efc4:	00001ffc 	strdeq	r1, [r0], -ip
	...
2000efd4:	00001ff8 	strdeq	r1, [r0], -r8
	...
2000efe4:	00001ff0 	strdeq	r1, [r0], -r0
	...
2000eff4:	00000ff8 	strdeq	r0, [r0], -r8
	...
2000f000:	40000000 	andmi	r0, r0, r0
2000f004:	00000ff8 	strdeq	r0, [r0], -r8
	...
2000f010:	c0000000 	andgt	r0, r0, r0
2000f014:	00000fc7 	andeq	r0, r0, r7, asr #31
	...
2000f024:	000007fe 	strdeq	r0, [r0], -lr
	...
2000f034:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
2000f044:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
2000f050:	80000000 	andhi	r0, r0, r0
2000f054:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
2000f064:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
2000f070:	00004000 	andeq	r4, r0, r0
2000f074:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
2000f080:	00304000 	eorseq	r4, r0, r0
2000f084:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
2000f090:	80e00000 	rschi	r0, r0, r0
2000f094:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
2000f0a0:	f0a08000 			; <UNDEFINED> instruction: 0xf0a08000
2000f0a4:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
2000f0b0:	f3c08000 	vaddl.u8	q12, d0, d0
2000f0b4:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
2000f0b8:	00000000 	andeq	r0, r0, r0

2000f0bc <roger_light_bits>:
	...
2000f140:	01000000 	mrseq	r0, (UNDEF: 0)
	...
2000f150:	00004000 	andeq	r4, r0, r0
	...
2000f160:	00080000 	andeq	r0, r8, r0
	...
2000f170:	030c0000 	movweq	r0, #49152	; 0xc000
	...
2000f180:	038e0000 	orreq	r0, lr, #0
	...
2000f190:	0fce0000 	svceq	0x00ce0000
	...
2000f1a0:	1ffc0000 	svcne	0x00fc0000
	...
2000f1b0:	ff9c0000 			; <UNDEFINED> instruction: 0xff9c0000
2000f1b4:	00000000 	andeq	r0, r0, r0
2000f1b8:	00400000 	subeq	r0, r0, r0
2000f1bc:	00081000 	andeq	r1, r8, r0
2000f1c0:	008e0000 	addeq	r0, lr, r0
2000f1c4:	00000003 	andeq	r0, r0, r3
2000f1c8:	00400000 	subeq	r0, r0, r0
2000f1cc:	000c1000 	andeq	r1, ip, r0
2000f1d0:	008e0000 	addeq	r0, lr, r0
2000f1d4:	0000000e 	andeq	r0, r0, lr
2000f1d8:	00400000 	subeq	r0, r0, r0
2000f1dc:	00042000 	andeq	r2, r4, r0
2000f1e0:	00c60000 	sbceq	r0, r6, r0
2000f1e4:	00000011 	andeq	r0, r0, r1, lsl r0
2000f1e8:	00400030 	subeq	r0, r0, r0, lsr r0
2000f1ec:	00060000 	andeq	r0, r6, r0
2000f1f0:	00e70000 	rsceq	r0, r7, r0
2000f1f4:	00000070 	andeq	r0, r0, r0, ror r0
2000f1f8:	004000e0 	subeq	r0, r0, r0, ror #1
2000f1fc:	82030000 	andhi	r0, r3, #0
2000f200:	00838008 	addeq	r8, r3, r8
2000f204:	810000f8 	strdhi	r0, [r0, -r8]
2000f208:	00400000 	subeq	r0, r0, r0
2000f20c:	84018000 	strhi	r8, [r1], #-0
2000f210:	00038008 	andeq	r8, r3, r8
2000f214:	830001f8 	movwhi	r0, #504	; 0x1f8
2000f218:	00400410 	subeq	r0, r0, r0, lsl r4
2000f21c:	84408000 	strbhi	r8, [r0], #-0
2000f220:	0007c008 	andeq	ip, r7, r8
2000f224:	02000ff0 	andeq	r0, r0, #240, 30	; 0x3c0
2000f228:	00408c10 	subeq	r8, r0, r0, lsl ip
2000f22c:	84408000 	strbhi	r8, [r0], #-0
2000f230:	0003c008 	andeq	ip, r3, r8
2000f234:	020007e0 	andeq	r0, r0, #224, 14	; 0x3800000
2000f238:	01c08830 	biceq	r8, r0, r0, lsr r8
2000f23c:	84408000 	strbhi	r8, [r0], #-0
2000f240:	0081e018 	addeq	lr, r1, r8, lsl r0
2000f244:	020007f8 	andeq	r0, r0, #248, 14	; 0x3e00000
2000f248:	00008820 	andeq	r8, r0, r0, lsr #16
2000f24c:	04018000 	streq	r8, [r1], #-0
2000f250:	0021e010 	eoreq	lr, r1, r0, lsl r0
2000f254:	460007fc 			; <UNDEFINED> instruction: 0x460007fc
2000f258:	00008820 	andeq	r8, r0, r0, lsr #16
2000f25c:	06010000 	streq	r0, [r1], -r0
2000f260:	0001e010 	andeq	lr, r1, r0, lsl r0
2000f264:	440007f8 	strmi	r0, [r0], #-2040	; 0xfffff808
2000f268:	00008820 	andeq	r8, r0, r0, lsr #16
2000f26c:	03010000 	movweq	r0, #4096	; 0x1000
2000f270:	0000e012 	andeq	lr, r0, r2, lsl r0
2000f274:	ec0007dd 	stc	7, cr0, [r0], {221}	; 0xdd
2000f278:	00418860 	subeq	r8, r1, r0, ror #16
2000f27c:	c1e1e000 	mvngt	lr, r0
2000f280:	0300e01f 	movweq	lr, #31
2000f284:	880007ff 	stmdahi	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl}
2000f288:	01c719c0 	biceq	r1, r7, r0, asr #19
2000f28c:	00000000 	andeq	r0, r0, r0
2000f290:	0f80d000 	svceq	0x0080d000
2000f294:	00000fd9 	ldrdeq	r0, [r0], -r9
	...
2000f2a0:	3d808000 	stccc	0, cr8, [r0]
2000f2a4:	000007d8 	ldrdeq	r0, [r0], -r8
	...
2000f2b0:	ffc08000 			; <UNDEFINED> instruction: 0xffc08000
2000f2b4:	000003f8 	strdeq	r0, [r0], -r8
	...
2000f2c0:	f3c18000 	vaddl.u8	q12, d1, d0
2000f2c4:	000003fb 	strdeq	r0, [r0], -fp
	...
2000f2d0:	c1e10800 	mvngt	r0, r0, lsl #16
2000f2d4:	000003f9 	strdeq	r0, [r0], -r9
	...
2000f2e0:	83c00000 	bichi	r0, r0, #0
2000f2e4:	00000059 	andeq	r0, r0, r9, asr r0
	...
2000f2f0:	9d008000 	stcls	0, cr8, [r0, #-0]
2000f2f4:	00000008 	andeq	r0, r0, r8
	...
2000f300:	8c014000 	stchi	0, cr4, [r1], {-0}
	...
2000f310:	7f005000 	svcvc	0x00005000
2000f314:	00000008 	andeq	r0, r0, r8
	...
2000f320:	3e001000 	cdpcc	0, 0, cr1, cr0, cr0, {0}
2000f324:	00000008 	andeq	r0, r0, r8
	...
2000f334:	00000008 	andeq	r0, r0, r8
	...
2000f344:	00000008 	andeq	r0, r0, r8
	...
2000f350:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
2000f354:	00000c08 	andeq	r0, r0, r8, lsl #24
	...
2000f360:	3c00c000 	stccc	0, cr12, [r0], {-0}
2000f364:	00000008 	andeq	r0, r0, r8
	...
2000f370:	1c000000 	stcne	0, cr0, [r0], {-0}
2000f374:	00000118 	andeq	r0, r0, r8, lsl r1
	...
2000f380:	06008000 	streq	r8, [r0], -r0
2000f384:	00000018 	andeq	r0, r0, r8, lsl r0
	...
2000f390:	0300c000 	movweq	ip, #0
2000f394:	00000018 	andeq	r0, r0, r8, lsl r0
	...
2000f3a0:	e380c000 	orr	ip, r0, #0
2000f3a4:	00010008 	andeq	r0, r1, r8
	...
2000f3b0:	e180c000 	orr	ip, r0, r0
2000f3b4:	00000007 	andeq	r0, r0, r7
	...
2000f3c0:	00418000 	subeq	r8, r1, r0
2000f3c4:	00000003 	andeq	r0, r0, r3
	...
2000f3d0:	00218000 	eoreq	r8, r1, r0
2000f3d4:	00000007 	andeq	r0, r0, r7
	...
2000f3e0:	00130000 	andseq	r0, r3, r0
2000f3e4:	0000000f 	andeq	r0, r0, pc
	...
2000f3f0:	87810000 	strhi	r0, [r1, r0]
2000f3f4:	00000007 	andeq	r0, r0, r7
	...
2000f400:	bfc70000 	svclt	0x00c70000
2000f404:	00000007 	andeq	r0, r0, r7
	...
2000f410:	38e70000 	stmiacc	r7!, {}^	; <UNPREDICTABLE>
	...
2000f420:	800e0000 	andhi	r0, lr, r0
2000f424:	00000001 	andeq	r0, r0, r1
	...
2000f430:	f49c0000 			; <UNDEFINED> instruction: 0xf49c0000
	...
2000f440:	fff00000 			; <UNDEFINED> instruction: 0xfff00000	; IMB
	...
2000f450:	63b80000 			; <UNDEFINED> instruction: 0x63b80000
	...
2000f460:	e3704000 	cmn	r0, #0
	...
2000f470:	f0700000 			; <UNDEFINED> instruction: 0xf0700000
2000f474:	00000040 	andeq	r0, r0, r0, asr #32
	...
2000f480:	f3c00000 	vaddl.u8	q8, d0, d0
	...
2000f490:	7f108000 	svcvc	0x00108000
2000f494:	00000040 	andeq	r0, r0, r0, asr #32
	...
2000f4a0:	0f100000 	svceq	0x00100000
2000f4a4:	00000040 	andeq	r0, r0, r0, asr #32
	...
2000f4b0:	0c280000 	stceq	0, cr0, [r8], #-0
2000f4b4:	00000040 	andeq	r0, r0, r0, asr #32
2000f4b8:	00000000 	andeq	r0, r0, r0

2000f4bc <firstTime.4040>:
2000f4bc:	00000001 	andeq	r0, r0, r1
2000f4c0:	00202020 	eoreq	r2, r0, r0, lsr #32
2000f4c4:	41524b2a 	cmpmi	r2, sl, lsr #22
2000f4c8:	2a202a21 	bcs	20819d54 <firstTime.4040+0x80a898>
2000f4cc:	2141524b 	cmpcs	r1, fp, asr #4
2000f4d0:	0000002a 	andeq	r0, r0, sl, lsr #32
2000f4d4:	734c4944 	movtvc	r4, #51524	; 0xc944
2000f4d8:	7469772d 	strbtvc	r7, [r9], #-1837	; 0xfffff8d3
2000f4dc:	73656863 	cmnvc	r5, #6488064	; 0x630000
2000f4e0:	76616820 	strbtvc	r6, [r1], -r0, lsr #16
2000f4e4:	00000065 	andeq	r0, r0, r5, rrx
2000f4e8:	20726f46 	rsbscs	r6, r2, r6, asr #30
2000f4ec:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
2000f4f0:	65697275 	strbvs	r7, [r9, #-629]!	; 0xfffffd8b
2000f4f4:	68742073 	ldmdavs	r4!, {r0, r1, r4, r5, r6, sp}^
2000f4f8:	00000065 	andeq	r0, r0, r5, rrx
2000f4fc:	20202020 	eorcs	r2, r0, r0, lsr #32
2000f500:	00000000 	andeq	r0, r0, r0
2000f504:	6c696f63 	stclvs	15, cr6, [r9], #-396	; 0xfffffe74
2000f508:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
2000f50c:	6566206e 	strbvs	r2, [r6, #-110]!	; 0xffffff92
2000f510:	002c7261 	eoreq	r7, ip, r1, ror #4
2000f514:	74616874 	strbtvc	r6, [r1], #-2164	; 0xfffff78c
2000f518:	44206120 	strtmi	r6, [r0], #-288	; 0xfffffee0
2000f51c:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
2000f520:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
2000f524:	00000068 	andeq	r0, r0, r8, rrx
2000f528:	6e656877 	mcrvs	8, 3, r6, cr5, cr7, {3}
2000f52c:	72657665 	rsbvc	r7, r5, #105906176	; 0x6500000
2000f530:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
2000f534:	65682079 	strbvs	r2, [r8, #-121]!	; 0xffffff87
2000f538:	00007261 	andeq	r7, r0, r1, ror #4
2000f53c:	6e207369 	cdpvs	3, 2, cr7, cr0, cr9, {3}
2000f540:	2e726165 	rpwcssz	f6, f2, f5
2000f544:	00000000 	andeq	r0, r0, r0
2000f548:	70727573 	rsbsvc	r7, r2, r3, ror r5
2000f54c:	69736972 	ldmdbvs	r3!, {r1, r4, r5, r6, r8, fp, sp, lr}^
2000f550:	202c676e 	eorcs	r6, ip, lr, ror #14
2000f554:	646e6966 	strbtvs	r6, [lr], #-2406	; 0xfffff69a
2000f558:	00676e69 	rsbeq	r6, r7, r9, ror #28
2000f55c:	69206f53 	stmdbvs	r0!, {r0, r1, r4, r6, r8, r9, sl, fp, sp, lr}
2000f560:	73692074 	cmnvc	r9, #116	; 0x74
2000f564:	69757120 	ldmdbvs	r5!, {r5, r8, ip, sp, lr}^
2000f568:	00006574 	andeq	r6, r0, r4, ror r5
2000f56c:	20756f79 	rsbscs	r6, r5, r9, ror pc
2000f570:	65726568 	ldrbvs	r6, [r2, #-1384]!	; 0xfffffa98
2000f574:	0000002c 	andeq	r0, r0, ip, lsr #32
2000f578:	72696568 	rsbvc	r6, r9, #104, 10	; 0x1a000000
2000f57c:	206f7420 	rsbcs	r7, pc, r0, lsr #8
2000f580:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
2000f584:	61654c20 	cmnvs	r5, r0, lsr #24
2000f588:	00002e72 	andeq	r2, r0, r2, ror lr
2000f58c:	65657571 	strbvs	r7, [r5, #-1393]!	; 0xfffffa8f
2000f590:	6144206e 	cmpvs	r4, lr, rrx
2000f594:	206f6666 	rsbcs	r6, pc, r6, ror #12
2000f598:	4420666f 	strtmi	r6, [r0], #-1647	; 0xfffff991
2000f59c:	2c734c49 	ldclcs	12, cr4, [r3], #-292	; 0xfffffedc
2000f5a0:	00000000 	andeq	r0, r0, r0
2000f5a4:	706d6574 	rsbvc	r6, sp, r4, ror r5
2000f5a8:	2c646574 	cfstr64cs	mvdx6, [r4], #-464	; 0xfffffe30
2000f5ac:	206f7420 	rsbcs	r7, pc, r0, lsr #8
2000f5b0:	746f6f6c 	strbtvc	r6, [pc], #-3948	; 2000f5b8 <firstTime.4040+0xfc>
2000f5b4:	00000000 	andeq	r0, r0, r0
2000f5b8:	20747542 	rsbscs	r7, r4, r2, asr #10
2000f5bc:	6279616d 	rsbsvs	r6, r9, #1073741851	; 0x4000001b
2000f5c0:	6f792065 	svcvs	0x00792065
2000f5c4:	65722775 	ldrbvs	r2, [r2, #-1909]!	; 0xfffff88b
2000f5c8:	00000000 	andeq	r0, r0, r0
2000f5cc:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 2000f43c <roger_light_bits+0x380>
2000f5d0:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
2000f5d4:	63697220 	cmnvs	r9, #32, 4
2000f5d8:	2c736568 	cfldr64cs	mvdx6, [r3], #-416	; 0xfffffe60
2000f5dc:	00000000 	andeq	r0, r0, r0
2000f5e0:	6b636977 	blvs	218e9bc4 <firstTime.4040+0x18da708>
2000f5e4:	44206465 	strtmi	r6, [r0], #-1125	; 0xfffffb9b
2000f5e8:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
2000f5ec:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
2000f5f0:	2e736568 	cdpcs	5, 7, cr6, cr3, cr8, {3}
2000f5f4:	00000000 	andeq	r0, r0, r0
2000f5f8:	65727573 	ldrbvs	r7, [r2, #-1395]!	; 0xfffffa8d
2000f5fc:	79622064 	stmdbvc	r2!, {r2, r5, r6, sp}^
2000f600:	00000000 	andeq	r0, r0, r0
2000f604:	67206f73 			; <UNDEFINED> instruction: 0x67206f73
2000f608:	70706972 	rsbsvc	r6, r0, r2, ror r9
2000f60c:	20796c69 	rsbscs	r6, r9, r9, ror #24
2000f610:	61657274 	smcvs	22308	; 0x5724
2000f614:	0000002d 	andeq	r0, r0, sp, lsr #32
2000f618:	6572202d 	ldrbvs	r2, [r2, #-45]!	; 0xffffffd3
2000f61c:	20746573 	rsbscs	r6, r4, r3, ror r5
2000f620:	20656874 	rsbcs	r6, r5, r4, ror r8
2000f624:	74697773 	strbtvc	r7, [r9], #-1907	; 0xfffff88d
2000f628:	00216863 	eoreq	r6, r1, r3, ror #16
2000f62c:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xfffff1bb
2000f630:	62202c72 	eorvs	r2, r0, #29184	; 0x7200
2000f634:	65766172 	ldrbvs	r6, [r6, #-370]!	; 0xfffffe8e
2000f638:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
2000f63c:	002c6863 	eoreq	r6, ip, r3, ror #16
2000f640:	69622061 	stmdbvs	r2!, {r0, r5, r6, sp}^
2000f644:	70732074 	rsbsvc	r2, r3, r4, ror r0
2000f648:	656b6f6f 	strbvs	r6, [fp, #-3951]!	; 0xfffff091
2000f64c:	756f2064 	strbvc	r2, [pc, #-100]!	; 2000f5f0 <firstTime.4040+0x134>
2000f650:	2e2e2e74 	mcrcs	14, 1, r2, cr14, cr4, {3}
2000f654:	00000000 	andeq	r0, r0, r0
2000f658:	66666144 	strbtvs	r6, [r6], -r4, asr #2
2000f65c:	49203a6f 	stmdbmi	r0!, {r0, r1, r2, r3, r5, r6, r9, fp, ip, sp}
2000f660:	66206d27 	strtvs	r6, [r0], -r7, lsr #26
2000f664:	696c6565 	stmdbvs	ip!, {r0, r2, r5, r6, r8, sl, sp, lr}^
2000f668:	0020676e 	eoreq	r6, r0, lr, ror #14
2000f66c:	00000000 	andeq	r0, r0, r0
2000f670:	696c632a 	stmdbvs	ip!, {r1, r3, r5, r8, r9, sp, lr}^
2000f674:	002a6b63 	eoreq	r6, sl, r3, ror #22
2000f678:	7069742a 	rsbvc	r7, r9, sl, lsr #8
2000f67c:	00002a70 	andeq	r2, r0, r0, ror sl
2000f680:	7061742a 	rsbvc	r7, r1, sl, lsr #8
2000f684:	00002a70 	andeq	r2, r0, r0, ror sl
2000f688:	67206f74 			; <UNDEFINED> instruction: 0x67206f74
2000f68c:	20626172 	rsbcs	r6, r2, r2, ror r1
2000f690:	20656874 	rsbcs	r6, r5, r4, ror r8
2000f694:	706f7274 	rsbvc	r7, pc, r4, ror r2	; <UNPREDICTABLE>
2000f698:	00217968 	eoreq	r7, r1, r8, ror #18
2000f69c:	66666144 	strbtvs	r6, [r6], -r4, asr #2
2000f6a0:	49203a6f 	stmdbmi	r0!, {r0, r1, r2, r3, r5, r6, r9, fp, ip, sp}
2000f6a4:	65656e20 	strbvs	r6, [r5, #-3616]!	; 0xfffff1e0
2000f6a8:	616d2064 	cmnvs	sp, r4, rrx
2000f6ac:	20636967 	rsbcs	r6, r3, r7, ror #18
2000f6b0:	00000000 	andeq	r0, r0, r0
2000f6b4:	43414c50 	movtmi	r4, #7248	; 0x1c50
2000f6b8:	4c4f4845 	mcrrmi	8, 4, r4, pc, cr5
2000f6bc:	20524544 	subscs	r4, r2, r4, asr #10
2000f6c0:	56205544 	strtpl	r5, [r0], -r4, asr #10
2000f6c4:	004e4e41 	subeq	r4, lr, r1, asr #28
2000f6c8:	42414b2a 	submi	r4, r1, #43008	; 0xa800
2000f6cc:	4f4f4f4f 	svcmi	0x004f4f4f
2000f6d0:	00002a4d 	andeq	r2, r0, sp, asr #20
2000f6d4:	4f77462a 	svcmi	0x0077462a
2000f6d8:	2a6f4f4f 	bcs	21be341c <firstTime.4040+0x1bd3f60>
2000f6dc:	00000000 	andeq	r0, r0, r0
2000f6e0:	20202020 	eorcs	r2, r0, r0, lsr #32
2000f6e4:	794e2020 	stmdbvc	lr, {r5, sp}^
2000f6e8:	48414841 	stmdami	r1, {r0, r6, fp, lr}^
2000f6ec:	48414841 	stmdami	r1, {r0, r6, fp, lr}^
2000f6f0:	00000021 	andeq	r0, r0, r1, lsr #32
2000f6f4:	73504944 	cmpvc	r0, #68, 18	; 0x110000
2000f6f8:	5449572d 	strbpl	r5, [r9], #-1837	; 0xfffff8d3
2000f6fc:	003a4843 	eorseq	r4, sl, r3, asr #16
2000f700:	4f57462a 	svcmi	0x0057462a
2000f704:	2a48534f 	bcs	21224448 <firstTime.4040+0x1214f8c>
2000f708:	00000000 	andeq	r0, r0, r0
2000f70c:	20202020 	eorcs	r2, r0, r0, lsr #32
2000f710:	20202020 	eorcs	r2, r0, r0, lsr #32
2000f714:	73706f4f 	cmnvc	r0, #316	; 0x13c
2000f718:	212e2e2e 			; <UNDEFINED> instruction: 0x212e2e2e
2000f71c:	00000000 	andeq	r0, r0, r0
2000f720:	46464144 	strbmi	r4, [r6], -r4, asr #2
2000f724:	20203a4f 	eorcs	r3, r0, pc, asr #20
2000f728:	00000000 	andeq	r0, r0, r0
2000f72c:	20202020 	eorcs	r2, r0, r0, lsr #32
2000f730:	20202020 	eorcs	r2, r0, r0, lsr #32
2000f734:	48524120 	ldmdami	r2, {r5, r8, lr}^
2000f738:	48475247 	stmdami	r7, {r0, r1, r2, r6, r9, ip, lr}^
2000f73c:	00002152 	andeq	r2, r0, r2, asr r1
2000f740:	20202020 	eorcs	r2, r0, r0, lsr #32
2000f744:	20202020 	eorcs	r2, r0, r0, lsr #32
2000f748:	20202020 	eorcs	r2, r0, r0, lsr #32
2000f74c:	20202020 	eorcs	r2, r0, r0, lsr #32
2000f750:	20202020 	eorcs	r2, r0, r0, lsr #32
2000f754:	00000000 	andeq	r0, r0, r0
2000f758:	200008a4 	andcs	r0, r0, r4, lsr #17
2000f75c:	200008bc 			; <UNDEFINED> instruction: 0x200008bc
2000f760:	20000e16 	andcs	r0, r0, r6, lsl lr
2000f764:	20000882 	andcs	r0, r0, r2, lsl #17
2000f768:	20001876 	andcs	r1, r0, r6, ror r8
2000f76c:	20000882 	andcs	r0, r0, r2, lsl #17
2000f770:	20000882 	andcs	r0, r0, r2, lsl #17
2000f774:	20000882 	andcs	r0, r0, r2, lsl #17
2000f778:	20000882 	andcs	r0, r0, r2, lsl #17
2000f77c:	20000882 	andcs	r0, r0, r2, lsl #17
2000f780:	200016f4 	strdcs	r1, [r0], -r4
2000f784:	00000000 	andeq	r0, r0, r0
2000f788:	5548542a 	strbpl	r5, [r8, #-1066]	; 0xfffffbd6
2000f78c:	002a504d 	eoreq	r5, sl, sp, asr #32
2000f790:	20003664 	andcs	r3, r0, r4, ror #12
2000f794:	2000366e 	andcs	r3, r0, lr, ror #12
2000f798:	20003678 	andcs	r3, r0, r8, ror r6
2000f79c:	20003682 	andcs	r3, r0, r2, lsl #13
2000f7a0:	2000368c 	andcs	r3, r0, ip, lsl #13
2000f7a4:	20003696 	mulcs	r0, r6, r6
2000f7a8:	200036a0 	andcs	r3, r0, r0, lsr #13
2000f7ac:	200036aa 	andcs	r3, r0, sl, lsr #13
2000f7b0:	20202020 	eorcs	r2, r0, r0, lsr #32
2000f7b4:	20202020 	eorcs	r2, r0, r0, lsr #32
2000f7b8:	20202020 	eorcs	r2, r0, r0, lsr #32
2000f7bc:	20202020 	eorcs	r2, r0, r0, lsr #32
2000f7c0:	20202020 	eorcs	r2, r0, r0, lsr #32
2000f7c4:	00000000 	andeq	r0, r0, r0
2000f7c8:	61666c41 	cmnvs	r6, r1, asr #24
2000f7cc:	656d756e 	strbvs	r7, [sp, #-1390]!	; 0xfffffa92
2000f7d0:	6b736972 	blvs	21ce9da0 <firstTime.4040+0x1cda8e4>
2000f7d4:	00000000 	andeq	r0, r0, r0
2000f7d8:	64726168 	ldrbtvs	r6, [r2], #-360	; 0xfffffe98
2000f7dc:	a4c3a5c3 	strbge	sl, [r3], #1475	; 0x5c3
2000f7e0:	7261b6c3 	rsbvc	fp, r1, #204472320	; 0xc300000
2000f7e4:	75732065 	ldrbvc	r2, [r3, #-101]!	; 0xffffff9b
2000f7e8:	00726567 	rsbseq	r6, r2, r7, ror #10

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000abb 			; <UNDEFINED> instruction: 0x00000abb
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      10:	0005260c 	andeq	r2, r5, ip, lsl #12
	...
      20:	020c0200 	andeq	r0, ip, #0, 4
      24:	00004e05 	andeq	r4, r0, r5, lsl #28
      28:	035b0300 	cmpeq	fp, #0, 6
      2c:	07020000 	streq	r0, [r2, -r0]
      30:	0000004e 	andeq	r0, r0, lr, asr #32
      34:	07190300 	ldreq	r0, [r9, -r0, lsl #6]
      38:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      3c:	0000004e 	andeq	r0, r0, lr, asr #32
      40:	19240304 	stmdbne	r4!, {r2, r8, r9}
      44:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
      48:	00000055 	andeq	r0, r0, r5, asr r0
      4c:	04040008 	streq	r0, [r4], #-8
      50:	00038907 	andeq	r8, r3, r7, lsl #18
      54:	5b040500 	blpl	10145c <startup-0x1fefeba4>
      58:	04000000 	streq	r0, [r0], #-0
      5c:	04d30801 	ldrbeq	r0, [r3], #2049	; 0x801
      60:	76060000 	strvc	r0, [r6], -r0
      64:	0200001a 	andeq	r0, r0, #26
      68:	0000210a 	andeq	r2, r0, sl, lsl #2
      6c:	00340700 	eorseq	r0, r4, r0, lsl #14
      70:	030c0000 	movweq	r0, #49152	; 0xc000
      74:	00009e06 	andeq	r9, r0, r6, lsl #28
      78:	05c90300 	strbeq	r0, [r9, #768]	; 0x300
      7c:	07030000 	streq	r0, [r3, -r0]
      80:	0000009e 	muleq	r0, lr, r0
      84:	003b0300 	eorseq	r0, fp, r0, lsl #6
      88:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
      8c:	0000009e 	muleq	r0, lr, r0
      90:	00300304 	eorseq	r0, r0, r4, lsl #6
      94:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
      98:	0000009e 	muleq	r0, lr, r0
      9c:	04050008 	streq	r0, [r5], #-8
      a0:	00000062 	andeq	r0, r0, r2, rrx
      a4:	00163406 	andseq	r3, r6, r6, lsl #8
      a8:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
      ac:	07000000 	streq	r0, [r0, -r0]
      b0:	000006de 	ldrdeq	r0, [r0], -lr
      b4:	28060424 	stmdacs	r6, {r2, r5, sl}
      b8:	03000001 	movweq	r0, #1
      bc:	00000461 	andeq	r0, r0, r1, ror #8
      c0:	01280704 			; <UNDEFINED> instruction: 0x01280704
      c4:	03000000 	movweq	r0, #0
      c8:	000006ea 	andeq	r0, r0, sl, ror #13
      cc:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
      d0:	03040000 	movweq	r0, #16384	; 0x4000
      d4:	0000063a 	andeq	r0, r0, sl, lsr r6
      d8:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
      dc:	03080000 	movweq	r0, #32768	; 0x8000
      e0:	00000666 	andeq	r0, r0, r6, ror #12
      e4:	01460c04 	cmpeq	r6, r4, lsl #24
      e8:	030c0000 	movweq	r0, #49152	; 0xc000
      ec:	00000342 	andeq	r0, r0, r2, asr #6
      f0:	01460d04 	cmpeq	r6, r4, lsl #26
      f4:	03100000 	tsteq	r0, #0
      f8:	00000473 	andeq	r0, r0, r3, ror r4
      fc:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
     100:	03140000 	tsteq	r4, #0
     104:	00000070 	andeq	r0, r0, r0, ror r0
     108:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
     10c:	03180000 	tsteq	r8, #0
     110:	000003d9 	ldrdeq	r0, [r0], -r9
     114:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
     118:	031c0000 	tsteq	ip, #0
     11c:	000003e9 	andeq	r0, r0, r9, ror #7
     120:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
     124:	00200000 	eoreq	r0, r0, r0
     128:	00a40405 	adceq	r0, r4, r5, lsl #8
     12c:	04080000 	streq	r0, [r8], #-0
     130:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     134:	01400900 	cmpeq	r0, r0, lsl #18
     138:	400a0000 	andmi	r0, sl, r0
     13c:	00000001 	andeq	r0, r0, r1
     140:	00af0405 	adceq	r0, pc, r5, lsl #8
     144:	04050000 	streq	r0, [r5], #-0
     148:	00000135 	andeq	r0, r0, r5, lsr r1
     14c:	0006df06 	andeq	sp, r6, r6, lsl #30
     150:	af150400 	svcge	0x00150400
     154:	0b000000 	bleq	15c <startup-0x1ffffea4>
     158:	00000162 	andeq	r0, r0, r2, ror #2
     15c:	00000162 	andeq	r0, r0, r2, ror #2
     160:	0405000c 	streq	r0, [r5], #-12
     164:	0000014c 	andeq	r0, r0, ip, asr #2
     168:	0005560d 	andeq	r5, r5, sp, lsl #12
     16c:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
     170:	0d000001 	stceq	0, cr0, [r0, #-4]
     174:	00000424 	andeq	r0, r0, r4, lsr #8
     178:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
     17c:	a2060000 	andge	r0, r6, #0
     180:	05000006 	streq	r0, [r0, #-6]
     184:	00005b24 	andeq	r5, r0, r4, lsr #22
     188:	017e0b00 	cmneq	lr, r0, lsl #22
     18c:	019a0000 	orrseq	r0, sl, r0
     190:	9a0e0000 	bls	380198 <startup-0x1fc7fe68>
     194:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     198:	04040003 	streq	r0, [r4], #-3
     19c:	00040607 	andeq	r0, r4, r7, lsl #12
     1a0:	185a0d00 	ldmdane	sl, {r8, sl, fp}^
     1a4:	2b050000 	blcs	1401ac <startup-0x1febfe54>
     1a8:	00000189 	andeq	r0, r0, r9, lsl #3
     1ac:	0002480d 	andeq	r4, r2, sp, lsl #16
     1b0:	892c0500 	stmdbhi	ip!, {r8, sl}
     1b4:	0d000001 	stceq	0, cr0, [r0, #-4]
     1b8:	000004e1 	andeq	r0, r0, r1, ror #9
     1bc:	01892d05 	orreq	r2, r9, r5, lsl #26
     1c0:	6b0d0000 	blvs	3401c8 <startup-0x1fcbfe38>
     1c4:	05000003 	streq	r0, [r0, #-3]
     1c8:	0001892e 	andeq	r8, r1, lr, lsr #18
     1cc:	02d00d00 	sbcseq	r0, r0, #0, 26
     1d0:	2f050000 	svccs	0x00050000
     1d4:	00000189 	andeq	r0, r0, r9, lsl #3
     1d8:	0006c00d 	andeq	ip, r6, sp
     1dc:	89300500 	ldmdbhi	r0!, {r8, sl}
     1e0:	0d000001 	stceq	0, cr0, [r0, #-4]
     1e4:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
     1e8:	01893105 	orreq	r3, r9, r5, lsl #2
     1ec:	5b0b0000 	blpl	2c01f4 <startup-0x1fd3fe0c>
     1f0:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
     1f4:	0f000001 	svceq	0x00000001
     1f8:	0000019a 	muleq	r0, sl, r1
     1fc:	93100077 	tstls	r0, #119	; 0x77
     200:	06000002 	streq	r0, [r0], -r2
     204:	0001ee03 	andeq	lr, r1, r3, lsl #28
     208:	b0030500 	andlt	r0, r3, r0, lsl #10
     20c:	11200072 			; <UNDEFINED> instruction: 0x11200072
     210:	000004f8 	strdeq	r0, [r0], -r8
     214:	01ee0307 	mvneq	r0, r7, lsl #6
     218:	03050000 	movweq	r0, #20480	; 0x5000
     21c:	20007328 	andcs	r7, r0, r8, lsr #6
     220:	0005d411 	andeq	sp, r5, r1, lsl r4
     224:	ee030800 	cdp	8, 0, cr0, cr3, cr0, {0}
     228:	05000001 	streq	r0, [r0, #-1]
     22c:	0073a003 	rsbseq	sl, r3, r3
     230:	005b0b20 	subseq	r0, fp, r0, lsr #22
     234:	02420000 	subeq	r0, r2, #0
     238:	9a0e0000 	bls	380240 <startup-0x1fc7fdc0>
     23c:	17000001 	strne	r0, [r0, -r1]
     240:	6c110001 	ldcvs	0, cr0, [r1], {1}
     244:	09000001 	stmdbeq	r0, {r0}
     248:	00023103 	andeq	r3, r2, r3, lsl #2
     24c:	18030500 	stmdane	r3, {r8, sl}
     250:	11200074 			; <UNDEFINED> instruction: 0x11200074
     254:	00000431 	andeq	r0, r0, r1, lsr r4
     258:	0231030a 	eorseq	r0, r1, #671088640	; 0x28000000
     25c:	03050000 	movweq	r0, #20480	; 0x5000
     260:	20007530 	andcs	r7, r0, r0, lsr r5
     264:	0003be11 	andeq	fp, r3, r1, lsl lr
     268:	31030b00 	tstcc	r3, r0, lsl #22
     26c:	05000002 	streq	r0, [r0, #-2]
     270:	00764803 	rsbseq	r4, r6, r3, lsl #16
     274:	005b0b20 	subseq	r0, fp, r0, lsr #22
     278:	02860000 	addeq	r0, r6, #0
     27c:	9a0e0000 	bls	380284 <startup-0x1fc7fd7c>
     280:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     284:	0b110003 	bleq	440298 <startup-0x1fbbfd68>
     288:	0c000005 	stceq	0, cr0, [r0], {5}
     28c:	00027503 	andeq	r7, r2, r3, lsl #10
     290:	60030500 	andvs	r0, r3, r0, lsl #10
     294:	11200077 			; <UNDEFINED> instruction: 0x11200077
     298:	00000045 	andeq	r0, r0, r5, asr #32
     29c:	0275030d 	rsbseq	r0, r5, #872415232	; 0x34000000
     2a0:	03050000 	movweq	r0, #20480	; 0x5000
     2a4:	20007b60 	andcs	r7, r0, r0, ror #22
     2a8:	00001011 	andeq	r1, r0, r1, lsl r0
     2ac:	75030e00 	strvc	r0, [r3, #-3584]	; 0xfffff200
     2b0:	05000002 	streq	r0, [r0, #-2]
     2b4:	007f6003 	rsbseq	r6, pc, r3
     2b8:	005b0b20 	subseq	r0, fp, r0, lsr #22
     2bc:	02c90000 	sbceq	r0, r9, #0
     2c0:	9a0f0000 	bls	3c02c8 <startup-0x1fc3fd38>
     2c4:	d1000001 	tstle	r0, r1
     2c8:	01be1100 			; <UNDEFINED> instruction: 0x01be1100
     2cc:	030f0000 	movweq	r0, #61440	; 0xf000
     2d0:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
     2d4:	83600305 	cmnhi	r0, #335544320	; 0x14000000
     2d8:	0f112000 	svceq	0x00112000
     2dc:	10000004 	andne	r0, r0, r4
     2e0:	0002b903 	andeq	fp, r2, r3, lsl #18
     2e4:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
     2e8:	11200084 	smlawbne	r0, r4, r0, r0
     2ec:	00000220 	andeq	r0, r0, r0, lsr #4
     2f0:	02b90311 	adcseq	r0, r9, #1140850688	; 0x44000000
     2f4:	03050000 	movweq	r0, #20480	; 0x5000
     2f8:	20008508 	andcs	r8, r0, r8, lsl #10
     2fc:	00069807 	andeq	r9, r6, r7, lsl #16
     300:	04121400 	ldreq	r1, [r2], #-1024	; 0xfffffc00
     304:	00000345 	andeq	r0, r0, r5, asr #6
     308:	001ce903 	andseq	lr, ip, r3, lsl #18
     30c:	45051200 	strmi	r1, [r5, #-512]	; 0xfffffe00
     310:	00000003 	andeq	r0, r0, r3
     314:	00028603 	andeq	r8, r2, r3, lsl #12
     318:	45061200 	strmi	r1, [r6, #-512]	; 0xfffffe00
     31c:	04000003 	streq	r0, [r0], #-3
     320:	0003f303 	andeq	pc, r3, r3, lsl #6
     324:	2e081200 	cdpcs	2, 0, cr1, cr8, cr0, {0}
     328:	08000001 	stmdaeq	r0, {r0}
     32c:	0003e303 	andeq	lr, r3, r3, lsl #6
     330:	2e091200 	cdpcs	2, 0, cr1, cr9, cr0, {0}
     334:	0c000001 	stceq	0, cr0, [r0], {1}
     338:	00028b03 	andeq	r8, r2, r3, lsl #22
     33c:	680c1200 	stmdavs	ip, {r9, ip}
     340:	10000003 	andne	r0, r0, r3
     344:	4b040500 	blmi	10174c <startup-0x1fefe8b4>
     348:	04000003 	streq	r0, [r0], #-3
     34c:	04dc0801 	ldrbeq	r0, [ip], #2049	; 0x801
     350:	62090000 	andvs	r0, r9, #0
     354:	0a000003 	beq	368 <startup-0x1ffffc98>
     358:	00000362 	andeq	r0, r0, r2, ror #6
     35c:	00012e0a 	andeq	r2, r1, sl, lsl #28
     360:	04050000 	streq	r0, [r5], #-0
     364:	000002fc 	strdeq	r0, [r0], -ip
     368:	03520405 	cmpeq	r2, #83886080	; 0x5000000
     36c:	99060000 	stmdbls	r6, {}	; <UNPREDICTABLE>
     370:	12000006 	andne	r0, r0, #6
     374:	0002fc0d 	andeq	pc, r2, sp, lsl #24
     378:	05c11100 	strbeq	r1, [r1, #256]	; 0x100
     37c:	03130000 	tsteq	r3, #0
     380:	00000275 	andeq	r0, r0, r5, ror r2
     384:	85dc0305 	ldrbhi	r0, [ip, #773]	; 0x305
     388:	02042000 	andeq	r2, r4, #0
     38c:	00038307 	andeq	r8, r3, r7, lsl #6
     390:	06041000 	streq	r1, [r4], -r0
     394:	22010000 	andcs	r0, r1, #0
     398:	0000012e 	andeq	r0, r0, lr, lsr #2
     39c:	4a4c0305 	bmi	1300fb8 <startup-0x1ecff048>
     3a0:	37102000 	ldrcc	r2, [r0, -r0]
     3a4:	01000001 	tsteq	r0, r1
     3a8:	00009e3a 	andeq	r9, r0, sl, lsr lr
     3ac:	94030500 	strls	r0, [r3], #-1280	; 0xfffffb00
     3b0:	10200049 	eorne	r0, r0, r9, asr #32
     3b4:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
     3b8:	009e3b01 	addseq	r3, lr, r1, lsl #22
     3bc:	03050000 	movweq	r0, #20480	; 0x5000
     3c0:	20004a40 	andcs	r4, r0, r0, asr #20
     3c4:	00056d10 	andeq	r6, r5, r0, lsl sp
     3c8:	9e3c0100 	rsflse	f0, f4, f0
     3cc:	05000000 	streq	r0, [r0, #-0]
     3d0:	004a5403 	subeq	r5, sl, r3, lsl #8
     3d4:	67621220 	strbvs	r1, [r2, -r0, lsr #4]!
     3d8:	9e3d0100 	rsflse	f0, f5, f0
     3dc:	05000000 	streq	r0, [r0, #-0]
     3e0:	0049dc03 	subeq	sp, r9, r3, lsl #24
     3e4:	06ef1020 	strbteq	r1, [pc], r0, lsr #32
     3e8:	40010000 	andmi	r0, r1, r0
     3ec:	0000009e 	muleq	r0, lr, r0
     3f0:	49bc0305 	ldmibmi	ip!, {r0, r2, r8, r9}
     3f4:	62102000 	andsvs	r2, r0, #0
     3f8:	01000005 	tsteq	r0, r5
     3fc:	00009e41 	andeq	r9, r0, r1, asr #28
     400:	48030500 	stmdami	r3, {r8, sl}
     404:	1020004a 	eorne	r0, r0, sl, asr #32
     408:	00000079 	andeq	r0, r0, r9, ror r0
     40c:	009e4201 	addseq	r4, lr, r1, lsl #4
     410:	03050000 	movweq	r0, #20480	; 0x5000
     414:	200049f8 	strdcs	r4, [r0], -r8
     418:	0003b310 	andeq	fp, r3, r0, lsl r3
     41c:	9e430100 	dvflss	f0, f3, f0
     420:	05000000 	streq	r0, [r0, #-0]
     424:	004a6403 	subeq	r6, sl, r3, lsl #8
     428:	05791020 	ldrbeq	r1, [r9, #-32]!	; 0xffffffe0
     42c:	44010000 	strmi	r0, [r1], #-0
     430:	0000009e 	muleq	r0, lr, r0
     434:	4a300305 	bmi	c01050 <startup-0x1f3fefb0>
     438:	81102000 	tsthi	r0, r0
     43c:	01000004 	tsteq	r0, r4
     440:	00009e45 	andeq	r9, r0, r5, asr #28
     444:	44030500 	strmi	r0, [r3], #-1280	; 0xfffffb00
     448:	1020004a 	eorne	r0, r0, sl, asr #32
     44c:	00000622 	andeq	r0, r0, r2, lsr #12
     450:	009e4601 	addseq	r4, lr, r1, lsl #12
     454:	03050000 	movweq	r0, #20480	; 0x5000
     458:	20004a50 	andcs	r4, r0, r0, asr sl
     45c:	0001e510 	andeq	lr, r1, r0, lsl r5
     460:	9e470100 	dvflss	f0, f7, f0
     464:	05000000 	streq	r0, [r0, #-0]
     468:	004a1403 	subeq	r1, sl, r3, lsl #8
     46c:	07251020 	streq	r1, [r5, -r0, lsr #32]!
     470:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
     474:	0000009e 	muleq	r0, lr, r0
     478:	49cc0305 	stmibmi	ip, {r0, r2, r8, r9}^
     47c:	a7102000 	ldrge	r2, [r0, -r0]
     480:	01000003 	tsteq	r0, r3
     484:	0000624a 	andeq	r6, r0, sl, asr #4
     488:	c0030500 	andgt	r0, r3, r0, lsl #10
     48c:	10200049 	eorne	r0, r0, r9, asr #32
     490:	00000231 	andeq	r0, r0, r1, lsr r2
     494:	00624b01 	rsbeq	r4, r2, r1, lsl #22
     498:	03050000 	movweq	r0, #20480	; 0x5000
     49c:	20004a18 	andcs	r4, r0, r8, lsl sl
     4a0:	0001cf10 	andeq	ip, r1, r0, lsl pc
     4a4:	624c0100 	subvs	r0, ip, #0, 2
     4a8:	05000000 	streq	r0, [r0, #-0]
     4ac:	0049e003 	subeq	lr, r9, r3
     4b0:	020d1020 	andeq	r1, sp, #32
     4b4:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
     4b8:	00000062 	andeq	r0, r0, r2, rrx
     4bc:	4a580305 	bmi	16010d8 <startup-0x1e9fef28>
     4c0:	8f102000 	svchi	0x00102000
     4c4:	01000000 	mrseq	r0, (UNDEF: 0)
     4c8:	00006250 	andeq	r6, r0, r0, asr r2
     4cc:	98030500 	stmdals	r3, {r8, sl}
     4d0:	10200049 	eorne	r0, r0, r9, asr #32
     4d4:	000004b5 			; <UNDEFINED> instruction: 0x000004b5
     4d8:	00625101 	rsbeq	r5, r2, r1, lsl #2
     4dc:	03050000 	movweq	r0, #20480	; 0x5000
     4e0:	20004a34 	andcs	r4, r0, r4, lsr sl
     4e4:	00033210 	andeq	r3, r3, r0, lsl r2
     4e8:	62520100 	subsvs	r0, r2, #0, 2
     4ec:	05000000 	streq	r0, [r0, #-0]
     4f0:	004a0803 	subeq	r0, sl, r3, lsl #16
     4f4:	04c41020 	strbeq	r1, [r4], #32
     4f8:	53010000 	movwpl	r0, #4096	; 0x1000
     4fc:	00000062 	andeq	r0, r0, r2, rrx
     500:	49d00305 	ldmibmi	r0, {r0, r2, r8, r9}^
     504:	8a102000 	bhi	40850c <startup-0x1fbf7af4>
     508:	01000006 	tsteq	r0, r6
     50c:	00006254 	andeq	r6, r0, r4, asr r2
     510:	b0030500 	andlt	r0, r3, r0, lsl #10
     514:	10200049 	eorne	r0, r0, r9, asr #32
     518:	00000657 	andeq	r0, r0, r7, asr r6
     51c:	00625501 	rsbeq	r5, r2, r1, lsl #10
     520:	03050000 	movweq	r0, #20480	; 0x5000
     524:	200049ec 	andcs	r4, r0, ip, ror #19
     528:	0005b210 	andeq	fp, r5, r0, lsl r2
     52c:	62560100 	subsvs	r0, r6, #0, 2
     530:	05000000 	streq	r0, [r0, #-0]
     534:	004a2403 	subeq	r2, sl, r3, lsl #8
     538:	048c1020 	streq	r1, [ip], #32
     53c:	57010000 	strpl	r0, [r1, -r0]
     540:	00000062 	andeq	r0, r0, r2, rrx
     544:	49a40305 	stmibmi	r4!, {r0, r2, r8, r9}
     548:	cf102000 	svcgt	0x00102000
     54c:	01000006 	tsteq	r0, r6
     550:	00006258 	andeq	r6, r0, r8, asr r2
     554:	fc030500 	stc2	5, cr0, [r3], {-0}
     558:	10200049 	eorne	r0, r0, r9, asr #32
     55c:	000003f3 	strdeq	r0, [r0], -r3
     560:	012e8e01 			; <UNDEFINED> instruction: 0x012e8e01
     564:	03050000 	movweq	r0, #20480	; 0x5000
     568:	20004948 	andcs	r4, r0, r8, asr #18
     56c:	00058e10 	andeq	r8, r5, r0, lsl lr
     570:	2e8f0100 	rmfcse	f0, f7, f0
     574:	05000001 	streq	r0, [r0, #-1]
     578:	0089dc03 	addeq	sp, r9, r3, lsl #24
     57c:	62611320 	rsbvs	r1, r1, #32, 6	; 0x80000000
     580:	6d010073 	stcvs	0, cr0, [r1, #-460]	; 0xfffffe34
     584:	00012e02 	andeq	r2, r1, r2, lsl #28
     588:	0018d800 	andseq	sp, r8, r0, lsl #16
     58c:	00001e20 	andeq	r1, r0, r0, lsr #28
     590:	a79c0100 	ldrge	r0, [ip, r0, lsl #2]
     594:	14000005 	strne	r0, [r0], #-5
     598:	0000064a 	andeq	r0, r0, sl, asr #12
     59c:	2e026d01 	cdpcs	13, 0, cr6, cr2, cr1, {0}
     5a0:	02000001 	andeq	r0, r0, #1
     5a4:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
     5a8:	00000720 	andeq	r0, r0, r0, lsr #14
     5ac:	01fc9001 	mvnseq	r9, r1
     5b0:	16dc2000 	ldrbne	r2, [ip], r0
     5b4:	9c010000 	stcls	0, cr0, [r1], {-0}
     5b8:	000009da 	ldrdeq	r0, [r0], -sl
     5bc:	0003fb11 	andeq	pc, r3, r1, lsl fp	; <UNPREDICTABLE>
     5c0:	4c960100 	ldfmis	f0, [r6], {0}
     5c4:	03000001 	movweq	r0, #1
     5c8:	117fac91 			; <UNDEFINED> instruction: 0x117fac91
     5cc:	0000062d 	andeq	r0, r0, sp, lsr #12
     5d0:	00a49701 	adceq	r9, r4, r1, lsl #14
     5d4:	91030000 	mrsls	r0, (UNDEF: 3)
     5d8:	30117fa0 	andscc	r7, r1, r0, lsr #31
     5dc:	01000007 	tsteq	r0, r7
     5e0:	0009da98 	muleq	r9, r8, sl
     5e4:	94910300 	ldrls	r0, [r1], #768	; 0x300
     5e8:	051d117f 	ldreq	r1, [sp, #-383]	; 0xfffffe81
     5ec:	a0010000 	andge	r0, r1, r0
     5f0:	0000014c 	andeq	r0, r0, ip, asr #2
     5f4:	7ef09103 	nrmvcs	f1, f3
     5f8:	00019811 	andeq	r9, r1, r1, lsl r8
     5fc:	a4a10100 	strtge	r0, [r1], #256	; 0x100
     600:	03000000 	movweq	r0, #0
     604:	117ee491 			; <UNDEFINED> instruction: 0x117ee491
     608:	000005f8 	strdeq	r0, [r0], -r8
     60c:	09daa201 	ldmibeq	sl, {r0, r9, sp, pc}^
     610:	91030000 	mrsls	r0, (UNDEF: 3)
     614:	b9117ed8 	ldmdblt	r1, {r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
     618:	01000002 	tsteq	r0, r2
     61c:	00014ca9 	andeq	r4, r1, r9, lsr #25
     620:	b4910300 	ldrlt	r0, [r1], #768	; 0x300
     624:	0456117e 	ldrbeq	r1, [r6], #-382	; 0xfffffe82
     628:	aa010000 	bge	40630 <startup-0x1ffbf9d0>
     62c:	000000a4 	andeq	r0, r0, r4, lsr #1
     630:	7ea89103 	tanvce	f1, f3
     634:	00067411 	andeq	r7, r6, r1, lsl r4
     638:	daab0100 	ble	feac0a40 <firstTime.4040+0xdeab1584>
     63c:	03000009 	movweq	r0, #9
     640:	117e9c91 			; <UNDEFINED> instruction: 0x117e9c91
     644:	00000154 	andeq	r0, r0, r4, asr r1
     648:	014cb201 	cmpeq	ip, r1, lsl #4
     64c:	91030000 	mrsls	r0, (UNDEF: 3)
     650:	e6117df8 			; <UNDEFINED> instruction: 0xe6117df8
     654:	01000005 	tsteq	r0, r5
     658:	0000a4b3 			; <UNDEFINED> instruction: 0x0000a4b3
     65c:	ec910300 	ldc	3, cr0, [r1], {0}
     660:	018b117d 	orreq	r1, fp, sp, ror r1
     664:	b4010000 	strlt	r0, [r1], #-0
     668:	000009da 	ldrdeq	r0, [r0], -sl
     66c:	7de09103 	stfvcp	f1, [r0, #12]!
     670:	00044711 	andeq	r4, r4, r1, lsl r7
     674:	4cbb0100 	ldfmis	f0, [fp]
     678:	03000001 	movweq	r0, #1
     67c:	167dbc91 			; <UNDEFINED> instruction: 0x167dbc91
     680:	00000442 	andeq	r0, r0, r2, asr #8
     684:	012ebc01 			; <UNDEFINED> instruction: 0x012ebc01
     688:	06900000 	ldreq	r0, [r0], r0
     68c:	00170000 	andseq	r0, r7, r0
     690:	00018311 	andeq	r8, r1, r1, lsl r3
     694:	4cc00100 	stfmie	f0, [r0], {0}
     698:	03000001 	movweq	r0, #1
     69c:	117d9891 			; <UNDEFINED> instruction: 0x117d9891
     6a0:	00001eb8 			; <UNDEFINED> instruction: 0x00001eb8
     6a4:	014cc501 	cmpeq	ip, r1, lsl #10
     6a8:	91030000 	mrsls	r0, (UNDEF: 3)
     6ac:	19117cf4 	ldmdbne	r1, {r2, r4, r5, r6, r7, sl, fp, ip, sp, lr}
     6b0:	01000003 	tsteq	r0, r3
     6b4:	00014cca 	andeq	r4, r1, sl, asr #25
     6b8:	d0910300 	addsle	r0, r1, r0, lsl #6
     6bc:	02ed167c 	rsceq	r1, sp, #124, 12	; 0x7c00000
     6c0:	cb010000 	blgt	406c8 <startup-0x1ffbf938>
     6c4:	0000012e 	andeq	r0, r0, lr, lsr #2
     6c8:	000006ce 	andeq	r0, r0, lr, asr #13
     6cc:	1f110017 	svcne	0x00110017
     6d0:	01000004 	tsteq	r0, r4
     6d4:	00014cce 	andeq	r4, r1, lr, asr #25
     6d8:	ac910300 	ldcge	3, cr0, [r1], {0}
     6dc:	03ce167c 	biceq	r1, lr, #124, 12	; 0x7c00000
     6e0:	cf010000 	svcgt	0x00010000
     6e4:	0000012e 	andeq	r0, r0, lr, lsr #2
     6e8:	000006ee 	andeq	r0, r0, lr, ror #13
     6ec:	26110017 			; <UNDEFINED> instruction: 0x26110017
     6f0:	0100000d 	tsteq	r0, sp
     6f4:	00014cd4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
     6f8:	88910300 	ldmhi	r1, {r8, r9}
     6fc:	0366117c 	cmneq	r6, #124, 2
     700:	da010000 	ble	40708 <startup-0x1ffbf8f8>
     704:	0000014c 	andeq	r0, r0, ip, asr #2
     708:	7be49103 	blvc	ff924b1c <firstTime.4040+0xdf915660>
     70c:	00036116 	andeq	r6, r3, r6, lsl r1
     710:	2edb0100 	cdpcs	1, 13, cr0, cr11, cr0, {0}
     714:	1d000001 	stcne	0, cr0, [r0, #-4]
     718:	17000007 	strne	r0, [r0, -r7]
     71c:	49441800 	stmdbmi	r4, {fp, ip}^
     720:	de010050 	mcrle	0, 0, r0, cr1, cr0, {2}
     724:	0000014c 	andeq	r0, r0, ip, asr #2
     728:	7bc09103 	blvc	ff024b3c <firstTime.4040+0xdf015680>
     72c:	00005611 	andeq	r5, r0, r1, lsl r6
     730:	4ce20100 	stfmie	f0, [r2]
     734:	03000001 	movweq	r0, #1
     738:	117b9c91 			; <UNDEFINED> instruction: 0x117b9c91
     73c:	00000610 	andeq	r0, r0, r0, lsl r6
     740:	014ce801 	cmpeq	ip, r1, lsl #16
     744:	91030000 	mrsls	r0, (UNDEF: 3)
     748:	16117af8 			; <UNDEFINED> instruction: 0x16117af8
     74c:	01000006 	tsteq	r0, r6
     750:	00014cea 	andeq	r4, r1, sl, ror #25
     754:	d4910300 	ldrle	r0, [r1], #768	; 0x300
     758:	061c117a 			; <UNDEFINED> instruction: 0x061c117a
     75c:	ec010000 	stc	0, cr0, [r1], {-0}
     760:	0000014c 	andeq	r0, r0, ip, asr #2
     764:	7ab09103 	bvc	fec24b78 <firstTime.4040+0xdec156bc>
     768:	0001fb11 	andeq	pc, r1, r1, lsl fp	; <UNPREDICTABLE>
     76c:	4cee0100 	stfmie	f0, [lr]
     770:	03000001 	movweq	r0, #1
     774:	117a8c91 			; <UNDEFINED> instruction: 0x117a8c91
     778:	0000017d 	andeq	r0, r0, sp, ror r1
     77c:	014cf101 	cmpeq	ip, r1, lsl #2	; <UNPREDICTABLE>
     780:	91030000 	mrsls	r0, (UNDEF: 3)
     784:	c21179e8 	andsgt	r7, r1, #232, 18	; 0x3a0000
     788:	01000002 	tsteq	r0, r2
     78c:	00014cf6 	strdeq	r4, [r1], -r6
     790:	c4910300 	ldrgt	r0, [r1], #768	; 0x300
     794:	00221179 	eoreq	r1, r2, r9, ror r1
     798:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
     79c:	0000014c 	andeq	r0, r0, ip, asr #2
     7a0:	79a09103 	stmibvc	r0!, {r0, r1, r8, ip, pc}
     7a4:	0006aa11 	andeq	sl, r6, r1, lsl sl
     7a8:	eafc0100 	b	fff00bb0 <firstTime.4040+0xdfef16f4>
     7ac:	03000009 	movweq	r0, #9
     7b0:	1978b491 	ldmdbne	r8!, {r0, r4, r7, sl, ip, sp, pc}^
     7b4:	0000005d 	andeq	r0, r0, sp, asr r0
     7b8:	6e011401 	cdpvs	4, 0, cr1, cr1, cr1, {0}
     7bc:	03000003 	movweq	r0, #3
     7c0:	1978a091 	ldmdbne	r8!, {r0, r4, r7, sp, pc}^
     7c4:	000001ab 	andeq	r0, r0, fp, lsr #3
     7c8:	6e011501 	cfsh32vs	mvfx1, mvfx1, #1
     7cc:	03000003 	movweq	r0, #3
     7d0:	19788c91 	ldmdbne	r8!, {r0, r4, r7, sl, fp, pc}^
     7d4:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     7d8:	6e011601 	cfmadd32vs	mvax0, mvfx1, mvfx1, mvfx1
     7dc:	03000003 	movweq	r0, #3
     7e0:	1977f891 	ldmdbne	r7!, {r0, r4, r7, fp, ip, sp, lr, pc}^
     7e4:	00000214 	andeq	r0, r0, r4, lsl r2
     7e8:	6e011701 	cdpvs	7, 0, cr1, cr1, cr1, {0}
     7ec:	03000003 	movweq	r0, #3
     7f0:	1977e491 	ldmdbne	r7!, {r0, r4, r7, sl, sp, lr, pc}^
     7f4:	000001ef 	andeq	r0, r0, pc, ror #3
     7f8:	6e011801 	cdpvs	8, 0, cr1, cr1, cr1, {0}
     7fc:	03000003 	movweq	r0, #3
     800:	1977d091 	ldmdbne	r7!, {r0, r4, r7, ip, lr, pc}^
     804:	000001f5 	strdeq	r0, [r0], -r5
     808:	6e011901 	vmlavs.f16	s2, s2, s2	; <UNPREDICTABLE>
     80c:	03000003 	movweq	r0, #3
     810:	1977bc91 	ldmdbne	r7!, {r0, r4, r7, sl, fp, ip, sp, pc}^
     814:	0000025a 	andeq	r0, r0, sl, asr r2
     818:	6e011a01 	vmlavs.f32	s2, s2, s2
     81c:	03000003 	movweq	r0, #3
     820:	1977a891 	ldmdbne	r7!, {r0, r4, r7, fp, sp, pc}^
     824:	00000242 	andeq	r0, r0, r2, asr #4
     828:	6e011b01 	vmlavs.f64	d1, d1, d1
     82c:	03000003 	movweq	r0, #3
     830:	19779491 	ldmdbne	r7!, {r0, r4, r7, sl, ip, pc}^
     834:	0000021a 	andeq	r0, r0, sl, lsl r2
     838:	6e011c01 	cdpvs	12, 0, cr1, cr1, cr1, {0}
     83c:	03000003 	movweq	r0, #3
     840:	19778091 	ldmdbne	r7!, {r0, r4, r7, pc}^
     844:	00000260 	andeq	r0, r0, r0, ror #4
     848:	6e011d01 	cdpvs	13, 0, cr1, cr1, cr1, {0}
     84c:	03000003 	movweq	r0, #3
     850:	1976ec91 	ldmdbne	r6!, {r0, r4, r7, sl, fp, sp, lr, pc}^
     854:	0000070b 	andeq	r0, r0, fp, lsl #14
     858:	6e011e01 	cdpvs	14, 0, cr1, cr1, cr1, {0}
     85c:	03000003 	movweq	r0, #3
     860:	1976d891 	ldmdbne	r6!, {r0, r4, r7, fp, ip, lr, pc}^
     864:	00000712 	andeq	r0, r0, r2, lsl r7
     868:	6e011f01 	cdpvs	15, 0, cr1, cr1, cr1, {0}
     86c:	03000003 	movweq	r0, #3
     870:	1976c491 	ldmdbne	r6!, {r0, r4, r7, sl, lr, pc}^
     874:	00000650 	andeq	r0, r0, r0, asr r6
     878:	6e012001 	cdpvs	0, 0, cr2, cr1, cr1, {0}
     87c:	03000003 	movweq	r0, #3
     880:	1976b091 	ldmdbne	r6!, {r0, r4, r7, ip, sp, pc}^
     884:	0000013f 	andeq	r0, r0, pc, lsr r1
     888:	2e013301 	cdpcs	3, 0, cr3, cr1, cr1, {0}
     88c:	02000001 	andeq	r0, r0, #1
     890:	01196c91 			; <UNDEFINED> instruction: 0x01196c91
     894:	01000002 	tsteq	r0, r2
     898:	012e0134 			; <UNDEFINED> instruction: 0x012e0134
     89c:	91020000 	mrsls	r0, (UNDEF: 2)
     8a0:	00661968 	rsbeq	r1, r6, r8, ror #18
     8a4:	35010000 	strcc	r0, [r1, #-0]
     8a8:	00012e01 	andeq	r2, r1, r1, lsl #28
     8ac:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     8b0:	0006fb19 	andeq	pc, r6, r9, lsl fp	; <UNPREDICTABLE>
     8b4:	01360100 	teqeq	r6, r0, lsl #2
     8b8:	0000012e 	andeq	r0, r0, lr, lsr #2
     8bc:	19609102 	stmdbne	r0!, {r1, r8, ip, pc}^
     8c0:	0000066d 	andeq	r0, r0, sp, ror #12
     8c4:	2e013701 	cdpcs	7, 0, cr3, cr1, cr1, {0}
     8c8:	02000001 	andeq	r0, r0, #1
     8cc:	80195c91 	mulshi	r9, r1, ip
     8d0:	01000006 	tsteq	r0, r6
     8d4:	012e0138 			; <UNDEFINED> instruction: 0x012e0138
     8d8:	91020000 	mrsls	r0, (UNDEF: 2)
     8dc:	05f21958 	ldrbeq	r1, [r2, #2392]!	; 0x958
     8e0:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
     8e4:	00012e01 	andeq	r2, r1, r1, lsl #28
     8e8:	54910200 	ldrpl	r0, [r1], #512	; 0x200
     8ec:	00000019 	andeq	r0, r0, r9, lsl r0
     8f0:	013a0100 	teqeq	sl, r0, lsl #2
     8f4:	0000012e 	andeq	r0, r0, lr, lsr #2
     8f8:	1a509102 	bne	1424d08 <startup-0x1ebdb2f8>
     8fc:	20000894 	mulcs	r0, r4, r8
     900:	00000ffe 	strdeq	r0, [r0], -lr
     904:	0002af19 	andeq	sl, r2, r9, lsl pc
     908:	01600100 	cmneq	r0, r0, lsl #2
     90c:	0000012e 	andeq	r0, r0, lr, lsr #2
     910:	89e40305 	stmibhi	r4!, {r0, r2, r8, r9}^
     914:	68192000 	ldmdavs	r9, {sp}
     918:	01000004 	tsteq	r0, r4
     91c:	012e0161 			; <UNDEFINED> instruction: 0x012e0161
     920:	03050000 	movweq	r0, #20480	; 0x5000
     924:	200089e8 	andcs	r8, r0, r8, ror #19
     928:	00039619 	andeq	r9, r3, r9, lsl r6
     92c:	01620100 	cmneq	r2, r0, lsl #2
     930:	0000012e 	andeq	r0, r0, lr, lsr #2
     934:	89e00305 	stmibhi	r0!, {r0, r2, r8, r9}^
     938:	691b2000 	ldmdbvs	fp, {sp}
     93c:	01ad0100 			; <UNDEFINED> instruction: 0x01ad0100
     940:	0000012e 	andeq	r0, r0, lr, lsr #2
     944:	494c0305 	stmdbmi	ip, {r0, r2, r8, r9}^
     948:	3f192000 	svccc	0x00192000
     94c:	01000006 	tsteq	r0, r6
     950:	012e01c2 	smlawteq	lr, r2, r1, r0
     954:	03050000 	movweq	r0, #20480	; 0x5000
     958:	200089ec 	andcs	r8, r0, ip, ror #19
     95c:	00059d19 	andeq	r9, r5, r9, lsl sp
     960:	02070100 	andeq	r0, r7, #0, 2
     964:	0000012e 	andeq	r0, r0, lr, lsr #2
     968:	49540305 	ldmdbmi	r4, {r0, r2, r8, r9}^
     96c:	6a1b2000 	bvs	6c8974 <startup-0x1f93768c>
     970:	02080100 	andeq	r0, r8, #0, 2
     974:	0000012e 	andeq	r0, r0, lr, lsr #2
     978:	49500305 	ldmdbmi	r0, {r0, r2, r8, r9}^
     97c:	5e192000 	cdppl	0, 1, cr2, cr9, cr0, {0}
     980:	01000001 	tsteq	r0, r1
     984:	012e0213 			; <UNDEFINED> instruction: 0x012e0213
     988:	03050000 	movweq	r0, #20480	; 0x5000
     98c:	2000495c 	andcs	r4, r0, ip, asr r9
     990:	00030b19 	andeq	r0, r3, r9, lsl fp
     994:	02140100 	andseq	r0, r4, #0, 2
     998:	0000012e 	andeq	r0, r0, lr, lsr #2
     99c:	49580305 	ldmdbmi	r8, {r0, r2, r8, r9}^
     9a0:	83192000 	tsthi	r9, #0
     9a4:	01000005 	tsteq	r0, r5
     9a8:	012e021e 			; <UNDEFINED> instruction: 0x012e021e
     9ac:	03050000 	movweq	r0, #20480	; 0x5000
     9b0:	20004964 	andcs	r4, r0, r4, ror #18
     9b4:	00034919 	andeq	r4, r3, r9, lsl r9
     9b8:	021f0100 	andseq	r0, pc, #0, 2
     9bc:	0000012e 	andeq	r0, r0, lr, lsr #2
     9c0:	49600305 	stmdbmi	r0!, {r0, r2, r8, r9}^
     9c4:	26192000 	ldrcs	r2, [r9], -r0
     9c8:	0100001c 	tsteq	r0, ip, lsl r0
     9cc:	012e023b 			; <UNDEFINED> instruction: 0x012e023b
     9d0:	03050000 	movweq	r0, #20480	; 0x5000
     9d4:	20004968 	andcs	r4, r0, r8, ror #18
     9d8:	a40b0000 	strge	r0, [fp], #-0
     9dc:	ea000000 	b	9e4 <startup-0x1ffff61c>
     9e0:	0f000009 	svceq	0x00000009
     9e4:	0000019a 	muleq	r0, sl, r1
     9e8:	4c0b0000 	stcmi	0, cr0, [fp], {-0}
     9ec:	fa000001 	blx	9f8 <startup-0x1ffff608>
     9f0:	0f000009 	svceq	0x00000009
     9f4:	0000019a 	muleq	r0, sl, r1
     9f8:	a9150002 	ldmdbge	r5, {r1}
     9fc:	01000004 	tsteq	r0, r4
     a00:	0000345a 	andeq	r3, r0, sl, asr r4
     a04:	0001c820 	andeq	ip, r1, r0, lsr #16
     a08:	9c9c0100 	ldflss	f0, [ip], {0}
     a0c:	1100000a 	tstne	r0, sl
     a10:	0000049a 	muleq	r0, sl, r4
     a14:	009e5b01 	addseq	r5, lr, r1, lsl #22
     a18:	91020000 	mrsls	r0, (UNDEF: 2)
     a1c:	02661174 	rsbeq	r1, r6, #116, 2
     a20:	5f010000 	svcpl	0x00010000
     a24:	0000009e 	muleq	r0, lr, r0
     a28:	11709102 	cmnne	r0, r2, lsl #2
     a2c:	00000276 	andeq	r0, r0, r6, ror r2
     a30:	009e6301 	addseq	r6, lr, r1, lsl #6
     a34:	91020000 	mrsls	r0, (UNDEF: 2)
     a38:	044d116c 	strbeq	r1, [sp], #-364	; 0xfffffe94
     a3c:	67010000 	strvs	r0, [r1, -r0]
     a40:	0000009e 	muleq	r0, lr, r0
     a44:	11689102 	cmnne	r8, r2, lsl #2
     a48:	000002f9 	strdeq	r0, [r0], -r9
     a4c:	009e6b01 	addseq	r6, lr, r1, lsl #22
     a50:	91020000 	mrsls	r0, (UNDEF: 2)
     a54:	03021164 	movweq	r1, #8548	; 0x2164
     a58:	6f010000 	svcvs	0x00010000
     a5c:	0000009e 	muleq	r0, lr, r0
     a60:	11609102 	cmnne	r0, r2, lsl #2
     a64:	0000014b 	andeq	r0, r0, fp, asr #2
     a68:	009e7301 	addseq	r7, lr, r1, lsl #6
     a6c:	91020000 	mrsls	r0, (UNDEF: 2)
     a70:	0320115c 			; <UNDEFINED> instruction: 0x0320115c
     a74:	77010000 	strvc	r0, [r1, -r0]
     a78:	0000009e 	muleq	r0, lr, r0
     a7c:	11589102 	cmpne	r8, r2, lsl #2
     a80:	00000329 	andeq	r0, r0, r9, lsr #6
     a84:	009e7a01 	addseq	r7, lr, r1, lsl #20
     a88:	91020000 	mrsls	r0, (UNDEF: 2)
     a8c:	00851154 	addeq	r1, r5, r4, asr r1
     a90:	7d010000 	stcvc	0, cr0, [r1, #-0]
     a94:	0000009e 	muleq	r0, lr, r0
     a98:	00509102 	subseq	r9, r0, r2, lsl #2
     a9c:	0002a61c 	andeq	sl, r2, ip, lsl r6
     aa0:	10260100 	eorne	r0, r6, r0, lsl #2
     aa4:	24200000 	strtcs	r0, [r0], #-0
     aa8:	01000000 	mrseq	r0, (UNDEF: 0)
     aac:	01a31d9c 			; <UNDEFINED> instruction: 0x01a31d9c
     ab0:	30010000 	andcc	r0, r1, r0
     ab4:	20000000 	andcs	r0, r0, r0
     ab8:	0000000c 	andeq	r0, r0, ip
     abc:	e0009c01 	and	r9, r0, r1, lsl #24
     ac0:	04000001 	streq	r0, [r0], #-1
     ac4:	00019e00 	andeq	r9, r1, r0, lsl #28
     ac8:	9f010400 	svcls	0x00010400
     acc:	0c000000 	stceq	0, cr0, [r0], {-0}
     ad0:	0000074f 	andeq	r0, r0, pc, asr #14
     ad4:	200018f8 	strdcs	r1, [r0], -r8
     ad8:	00000056 	andeq	r0, r0, r6, asr r0
     adc:	000003db 	ldrdeq	r0, [r0], -fp
     ae0:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
     ae4:	0000004e 	andeq	r0, r0, lr, asr #32
     ae8:	00035b03 	andeq	r5, r3, r3, lsl #22
     aec:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
     af0:	00000000 	andeq	r0, r0, r0
     af4:	00071903 	andeq	r1, r7, r3, lsl #18
     af8:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
     afc:	04000000 	streq	r0, [r0], #-0
     b00:	00192403 	andseq	r2, r9, r3, lsl #8
     b04:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
     b08:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     b0c:	07040400 	streq	r0, [r4, -r0, lsl #8]
     b10:	00000389 	andeq	r0, r0, r9, lsl #7
     b14:	005b0405 	subseq	r0, fp, r5, lsl #8
     b18:	01040000 	mrseq	r0, (UNDEF: 4)
     b1c:	0004d308 	andeq	sp, r4, r8, lsl #6
     b20:	1a760600 	bne	1d82328 <startup-0x1e27dcd8>
     b24:	0a020000 	beq	80b2c <startup-0x1ff7f4d4>
     b28:	00000021 	andeq	r0, r0, r1, lsr #32
     b2c:	00003407 	andeq	r3, r0, r7, lsl #8
     b30:	06030c00 	streq	r0, [r3], -r0, lsl #24
     b34:	0000009e 	muleq	r0, lr, r0
     b38:	0005c903 	andeq	ip, r5, r3, lsl #18
     b3c:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
     b40:	00000000 	andeq	r0, r0, r0
     b44:	00003b03 	andeq	r3, r0, r3, lsl #22
     b48:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
     b4c:	04000000 	streq	r0, [r0], #-0
     b50:	00003003 	andeq	r3, r0, r3
     b54:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
     b58:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     b5c:	62040500 	andvs	r0, r4, #0, 10
     b60:	06000000 	streq	r0, [r0], -r0
     b64:	00001634 	andeq	r1, r0, r4, lsr r6
     b68:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
     b6c:	de070000 	cdple	0, 0, cr0, cr7, cr0, {0}
     b70:	24000006 	strcs	r0, [r0], #-6
     b74:	01280604 			; <UNDEFINED> instruction: 0x01280604
     b78:	61030000 	mrsvs	r0, (UNDEF: 3)
     b7c:	04000004 	streq	r0, [r0], #-4
     b80:	00012807 	andeq	r2, r1, r7, lsl #16
     b84:	ea030000 	b	c0b8c <startup-0x1ff3f474>
     b88:	04000006 	streq	r0, [r0], #-6
     b8c:	00012e08 	andeq	r2, r1, r8, lsl #28
     b90:	3a030400 	bcc	c1b98 <startup-0x1ff3e468>
     b94:	04000006 	streq	r0, [r0], #-6
     b98:	00012e09 	andeq	r2, r1, r9, lsl #28
     b9c:	66030800 	strvs	r0, [r3], -r0, lsl #16
     ba0:	04000006 	streq	r0, [r0], #-6
     ba4:	0001460c 	andeq	r4, r1, ip, lsl #12
     ba8:	42030c00 	andmi	r0, r3, #0, 24
     bac:	04000003 	streq	r0, [r0], #-3
     bb0:	0001460d 	andeq	r4, r1, sp, lsl #12
     bb4:	73031000 	movwvc	r1, #12288	; 0x3000
     bb8:	04000004 	streq	r0, [r0], #-4
     bbc:	00012e10 	andeq	r2, r1, r0, lsl lr
     bc0:	70031400 	andvc	r1, r3, r0, lsl #8
     bc4:	04000000 	streq	r0, [r0], #-0
     bc8:	00012e11 	andeq	r2, r1, r1, lsl lr
     bcc:	d9031800 	stmdble	r3, {fp, ip}
     bd0:	04000003 	streq	r0, [r0], #-3
     bd4:	00012e12 	andeq	r2, r1, r2, lsl lr
     bd8:	e9031c00 	stmdb	r3, {sl, fp, ip}
     bdc:	04000003 	streq	r0, [r0], #-3
     be0:	00012e13 	andeq	r2, r1, r3, lsl lr
     be4:	05002000 	streq	r2, [r0, #-0]
     be8:	0000a404 	andeq	sl, r0, r4, lsl #8
     bec:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
     bf0:	00746e69 	rsbseq	r6, r4, r9, ror #28
     bf4:	00014009 	andeq	r4, r1, r9
     bf8:	01400a00 	cmpeq	r0, r0, lsl #20
     bfc:	05000000 	streq	r0, [r0, #-0]
     c00:	0000af04 	andeq	sl, r0, r4, lsl #30
     c04:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
     c08:	06000001 	streq	r0, [r0], -r1
     c0c:	000006df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     c10:	00af1504 	adceq	r1, pc, r4, lsl #10
     c14:	620b0000 	andvs	r0, fp, #0
     c18:	62000001 	andvs	r0, r0, #1
     c1c:	0c000001 	stceq	0, cr0, [r0], {1}
     c20:	4c040500 	cfstr32mi	mvfx0, [r4], {-0}
     c24:	0d000001 	stceq	0, cr0, [r0, #-4]
     c28:	00000556 	andeq	r0, r0, r6, asr r5
     c2c:	01571c04 	cmpeq	r7, r4, lsl #24
     c30:	240d0000 	strcs	r0, [sp], #-0
     c34:	04000004 	streq	r0, [r0], #-4
     c38:	00012e1d 	andeq	r2, r1, sp, lsl lr
     c3c:	07040400 	streq	r0, [r4, -r0, lsl #8]
     c40:	00000406 	andeq	r0, r0, r6, lsl #8
     c44:	0001680e 	andeq	r6, r1, lr, lsl #16
     c48:	05030100 	streq	r0, [r3, #-256]	; 0xffffff00
     c4c:	004a6803 	subeq	r6, sl, r3, lsl #16
     c50:	01730e20 	cmneq	r3, r0, lsr #28
     c54:	04010000 	streq	r0, [r1], #-0
     c58:	496c0305 	stmdbmi	ip!, {r0, r2, r8, r9}^
     c5c:	3e0f2000 	cdpcc	0, 0, cr2, cr15, cr0, {0}
     c60:	01000007 	tsteq	r0, r7
     c64:	0019080c 	andseq	r0, r9, ip, lsl #16
     c68:	00004620 	andeq	r4, r0, r0, lsr #12
     c6c:	c39c0100 	orrsgt	r0, ip, #0, 2
     c70:	10000001 	andne	r0, r0, r1
     c74:	00000782 	andeq	r0, r0, r2, lsl #15
     c78:	01620c01 	cmneq	r2, r1, lsl #24
     c7c:	91020000 	mrsls	r0, (UNDEF: 2)
     c80:	42110074 	andsmi	r0, r1, #116	; 0x74
     c84:	01000003 	tsteq	r0, r3
     c88:	0018f807 	andseq	pc, r8, r7, lsl #16
     c8c:	00001020 	andeq	r1, r0, r0, lsr #32
     c90:	109c0100 	addsne	r0, ip, r0, lsl #2
     c94:	00000782 	andeq	r0, r0, r2, lsl #15
     c98:	01620701 	cmneq	r2, r1, lsl #14
     c9c:	91020000 	mrsls	r0, (UNDEF: 2)
     ca0:	2b000074 	blcs	e78 <startup-0x1ffff188>
     ca4:	04000005 	streq	r0, [r0], #-5
     ca8:	00028400 	andeq	r8, r2, r0, lsl #8
     cac:	9f010400 	svcls	0x00010400
     cb0:	0c000000 	stceq	0, cr0, [r0], {-0}
     cb4:	000009c2 	andeq	r0, r0, r2, asr #19
     cb8:	20001950 	andcs	r1, r0, r0, asr r9
     cbc:	000002a8 	andeq	r0, r0, r8, lsr #5
     cc0:	00000469 	andeq	r0, r0, r9, ror #8
     cc4:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
     cc8:	0000004e 	andeq	r0, r0, lr, asr #32
     ccc:	00035b03 	andeq	r5, r3, r3, lsl #22
     cd0:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
     cd4:	00000000 	andeq	r0, r0, r0
     cd8:	00071903 	andeq	r1, r7, r3, lsl #18
     cdc:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
     ce0:	04000000 	streq	r0, [r0], #-0
     ce4:	00192403 	andseq	r2, r9, r3, lsl #8
     ce8:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
     cec:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     cf0:	07040400 	streq	r0, [r4, -r0, lsl #8]
     cf4:	00000389 	andeq	r0, r0, r9, lsl #7
     cf8:	005b0405 	subseq	r0, fp, r5, lsl #8
     cfc:	01040000 	mrseq	r0, (UNDEF: 4)
     d00:	0004d308 	andeq	sp, r4, r8, lsl #6
     d04:	1a760600 	bne	1d8250c <startup-0x1e27daf4>
     d08:	0a020000 	beq	80d10 <startup-0x1ff7f2f0>
     d0c:	00000021 	andeq	r0, r0, r1, lsr #32
     d10:	00003407 	andeq	r3, r0, r7, lsl #8
     d14:	06030c00 	streq	r0, [r3], -r0, lsl #24
     d18:	0000009e 	muleq	r0, lr, r0
     d1c:	0005c903 	andeq	ip, r5, r3, lsl #18
     d20:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
     d24:	00000000 	andeq	r0, r0, r0
     d28:	00003b03 	andeq	r3, r0, r3, lsl #22
     d2c:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
     d30:	04000000 	streq	r0, [r0], #-0
     d34:	00003003 	andeq	r3, r0, r3
     d38:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
     d3c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     d40:	62040500 	andvs	r0, r4, #0, 10
     d44:	06000000 	streq	r0, [r0], -r0
     d48:	00001634 	andeq	r1, r0, r4, lsr r6
     d4c:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
     d50:	de070000 	cdple	0, 0, cr0, cr7, cr0, {0}
     d54:	24000006 	strcs	r0, [r0], #-6
     d58:	01280604 			; <UNDEFINED> instruction: 0x01280604
     d5c:	61030000 	mrsvs	r0, (UNDEF: 3)
     d60:	04000004 	streq	r0, [r0], #-4
     d64:	00012807 	andeq	r2, r1, r7, lsl #16
     d68:	ea030000 	b	c0d70 <startup-0x1ff3f290>
     d6c:	04000006 	streq	r0, [r0], #-6
     d70:	00012e08 	andeq	r2, r1, r8, lsl #28
     d74:	3a030400 	bcc	c1d7c <startup-0x1ff3e284>
     d78:	04000006 	streq	r0, [r0], #-6
     d7c:	00012e09 	andeq	r2, r1, r9, lsl #28
     d80:	66030800 	strvs	r0, [r3], -r0, lsl #16
     d84:	04000006 	streq	r0, [r0], #-6
     d88:	0001460c 	andeq	r4, r1, ip, lsl #12
     d8c:	42030c00 	andmi	r0, r3, #0, 24
     d90:	04000003 	streq	r0, [r0], #-3
     d94:	0001460d 	andeq	r4, r1, sp, lsl #12
     d98:	73031000 	movwvc	r1, #12288	; 0x3000
     d9c:	04000004 	streq	r0, [r0], #-4
     da0:	00012e10 	andeq	r2, r1, r0, lsl lr
     da4:	70031400 	andvc	r1, r3, r0, lsl #8
     da8:	04000000 	streq	r0, [r0], #-0
     dac:	00012e11 	andeq	r2, r1, r1, lsl lr
     db0:	d9031800 	stmdble	r3, {fp, ip}
     db4:	04000003 	streq	r0, [r0], #-3
     db8:	00012e12 	andeq	r2, r1, r2, lsl lr
     dbc:	e9031c00 	stmdb	r3, {sl, fp, ip}
     dc0:	04000003 	streq	r0, [r0], #-3
     dc4:	00012e13 	andeq	r2, r1, r3, lsl lr
     dc8:	05002000 	streq	r2, [r0, #-0]
     dcc:	0000a404 	andeq	sl, r0, r4, lsl #8
     dd0:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
     dd4:	00746e69 	rsbseq	r6, r4, r9, ror #28
     dd8:	00014009 	andeq	r4, r1, r9
     ddc:	01400a00 	cmpeq	r0, r0, lsl #20
     de0:	05000000 	streq	r0, [r0, #-0]
     de4:	0000af04 	andeq	sl, r0, r4, lsl #30
     de8:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
     dec:	06000001 	streq	r0, [r0], -r1
     df0:	000006df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     df4:	00af1504 	adceq	r1, pc, r4, lsl #10
     df8:	620b0000 	andvs	r0, fp, #0
     dfc:	62000001 	andvs	r0, r0, #1
     e00:	0c000001 	stceq	0, cr0, [r0], {1}
     e04:	4c040500 	cfstr32mi	mvfx0, [r4], {-0}
     e08:	0d000001 	stceq	0, cr0, [r0, #-4]
     e0c:	00000556 	andeq	r0, r0, r6, asr r5
     e10:	01571c04 	cmpeq	r7, r4, lsl #24
     e14:	240d0000 	strcs	r0, [sp], #-0
     e18:	04000004 	streq	r0, [r0], #-4
     e1c:	00012e1d 	andeq	r2, r1, sp, lsl lr
     e20:	005b0b00 	subseq	r0, fp, r0, lsl #22
     e24:	018e0000 	orreq	r0, lr, r0
     e28:	8e0e0000 	cdphi	0, 0, cr0, cr14, cr0, {0}
     e2c:	0b000001 	bleq	e38 <startup-0x1ffff1c8>
     e30:	07040400 	streq	r0, [r4, -r0, lsl #8]
     e34:	00000406 	andeq	r0, r0, r6, lsl #8
     e38:	0009870f 	andeq	r8, r9, pc, lsl #14
     e3c:	7e030500 	cfsh32vc	mvfx0, mvfx3, #0
     e40:	05000001 	streq	r0, [r0, #-1]
     e44:	0089f003 	addeq	pc, r9, r3
     e48:	08810f20 	stmeq	r1, {r5, r8, r9, sl, fp}
     e4c:	03060000 	movweq	r0, #24576	; 0x6000
     e50:	0000017e 	andeq	r0, r0, lr, ror r1
     e54:	89fc0305 	ldmibhi	ip!, {r0, r2, r8, r9}^
     e58:	9c0f2000 	stcls	0, cr2, [pc], {-0}
     e5c:	07000008 	streq	r0, [r0, -r8]
     e60:	00017e03 	andeq	r7, r1, r3, lsl #28
     e64:	08030500 	stmdaeq	r3, {r8, sl}
     e68:	0f20008a 	svceq	0x0020008a
     e6c:	000007fd 	strdeq	r0, [r0], -sp
     e70:	017e0308 	cmneq	lr, r8, lsl #6
     e74:	03050000 	movweq	r0, #20480	; 0x5000
     e78:	20008a14 	andcs	r8, r0, r4, lsl sl
     e7c:	0008ad0f 	andeq	sl, r8, pc, lsl #26
     e80:	7e030900 	vmlavc.f16	s0, s6, s0	; <UNPREDICTABLE>
     e84:	05000001 	streq	r0, [r0, #-1]
     e88:	008a2003 	addeq	r2, sl, r3
     e8c:	09ef0f20 	stmibeq	pc!, {r5, r8, r9, sl, fp}^	; <UNPREDICTABLE>
     e90:	030a0000 	movweq	r0, #40960	; 0xa000
     e94:	0000017e 	andeq	r0, r0, lr, ror r1
     e98:	8a2c0305 	bhi	b01ab4 <startup-0x1f4fe54c>
     e9c:	6b0f2000 	blvs	3c8ea4 <startup-0x1fc3715c>
     ea0:	0b000009 	bleq	ecc <startup-0x1ffff134>
     ea4:	00017e03 	andeq	r7, r1, r3, lsl #28
     ea8:	38030500 	stmdacc	r3, {r8, sl}
     eac:	0f20008a 	svceq	0x0020008a
     eb0:	000008d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     eb4:	017e030c 	cmneq	lr, ip, lsl #6
     eb8:	03050000 	movweq	r0, #20480	; 0x5000
     ebc:	20008a44 	andcs	r8, r0, r4, asr #20
     ec0:	00080d0f 	andeq	r0, r8, pc, lsl #26
     ec4:	7e030d00 	cdpvc	13, 0, cr0, cr3, cr0, {0}
     ec8:	05000001 	streq	r0, [r0, #-1]
     ecc:	008a5003 	addeq	r5, sl, r3
     ed0:	083b0f20 	ldmdaeq	fp!, {r5, r8, r9, sl, fp}
     ed4:	030e0000 	movweq	r0, #57344	; 0xe000
     ed8:	0000017e 	andeq	r0, r0, lr, ror r1
     edc:	8a5c0305 	bhi	1701af8 <startup-0x1e8fe508>
     ee0:	1d0f2000 	stcne	0, cr2, [pc, #-0]	; ee8 <startup-0x1ffff118>
     ee4:	0f000009 	svceq	0x00000009
     ee8:	00017e03 	andeq	r7, r1, r3, lsl #28
     eec:	68030500 	stmdavs	r3, {r8, sl}
     ef0:	1020008a 	eorne	r0, r0, sl, lsl #1
     ef4:	000007c1 	andeq	r0, r0, r1, asr #15
     ef8:	009e1101 	addseq	r1, lr, r1, lsl #2
     efc:	03050000 	movweq	r0, #20480	; 0x5000
     f00:	20004d28 	andcs	r4, r0, r8, lsr #26
     f04:	00079110 	andeq	r9, r7, r0, lsl r1
     f08:	9e120100 	muflss	f0, f2, f0
     f0c:	05000000 	streq	r0, [r0, #-0]
     f10:	004d4003 	subeq	r4, sp, r3
     f14:	07e71020 	strbeq	r1, [r7, r0, lsr #32]!
     f18:	13010000 	movwne	r0, #4096	; 0x1000
     f1c:	0000009e 	muleq	r0, lr, r0
     f20:	4bf80305 	blmi	ffe01b3c <firstTime.4040+0xdfdf2680>
     f24:	c6102000 	ldrgt	r2, [r0], -r0
     f28:	01000008 	tsteq	r0, r8
     f2c:	00009e14 	andeq	r9, r0, r4, lsl lr
     f30:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
     f34:	1020004d 	eorne	r0, r0, sp, asr #32
     f38:	00000891 	muleq	r0, r1, r8
     f3c:	009e1501 	addseq	r1, lr, r1, lsl #10
     f40:	03050000 	movweq	r0, #20480	; 0x5000
     f44:	20004d14 	andcs	r4, r0, r4, lsl sp
     f48:	0007a910 	andeq	sl, r7, r0, lsl r9
     f4c:	9e160100 	muflss	f0, f6, f0
     f50:	05000000 	streq	r0, [r0, #-0]
     f54:	004c0803 	subeq	r0, ip, r3, lsl #16
     f58:	081e1020 	ldmdaeq	lr, {r5, ip}
     f5c:	17010000 	strne	r0, [r1, -r0]
     f60:	0000009e 	muleq	r0, lr, r0
     f64:	4d380305 	ldcmi	3, cr0, [r8, #-20]!	; 0xffffffec
     f68:	44102000 	ldrmi	r2, [r0], #-0
     f6c:	01000009 	tsteq	r0, r9
     f70:	00009e18 	andeq	r9, r0, r8, lsl lr
     f74:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
     f78:	1020004c 	eorne	r0, r0, ip, asr #32
     f7c:	000007f2 	strdeq	r0, [r0], -r2
     f80:	009e1901 	addseq	r1, lr, r1, lsl #18
     f84:	03050000 	movweq	r0, #20480	; 0x5000
     f88:	20004c60 	andcs	r4, r0, r0, ror #24
     f8c:	00078710 	andeq	r8, r7, r0, lsl r7
     f90:	9e1a0100 	muflse	f0, f2, f0
     f94:	05000000 	streq	r0, [r0, #-0]
     f98:	004d1003 	subeq	r1, sp, r3
     f9c:	085f1020 	ldmdaeq	pc, {r5, ip}^	; <UNPREDICTABLE>
     fa0:	1b010000 	blne	40fa8 <startup-0x1ffbf058>
     fa4:	0000009e 	muleq	r0, lr, r0
     fa8:	4d180305 	ldcmi	3, cr0, [r8, #-20]	; 0xffffffec
     fac:	d9102000 	ldmdble	r0, {sp}
     fb0:	01000007 	tsteq	r0, r7
     fb4:	0000621d 	andeq	r6, r0, sp, lsl r2
     fb8:	30030500 	andcc	r0, r3, r0, lsl #10
     fbc:	1020004c 	eorne	r0, r0, ip, asr #32
     fc0:	0000094e 	andeq	r0, r0, lr, asr #18
     fc4:	00621e01 	rsbeq	r1, r2, r1, lsl #28
     fc8:	03050000 	movweq	r0, #20480	; 0x5000
     fcc:	20004d1c 	andcs	r4, r0, ip, lsl sp
     fd0:	0008fa10 	andeq	pc, r8, r0, lsl sl	; <UNPREDICTABLE>
     fd4:	621f0100 	andsvs	r0, pc, #0, 2
     fd8:	05000000 	streq	r0, [r0, #-0]
     fdc:	004cf803 	subeq	pc, ip, r3, lsl #16
     fe0:	079b1020 	ldreq	r1, [fp, r0, lsr #32]
     fe4:	20010000 	andcs	r0, r1, r0
     fe8:	00000062 	andeq	r0, r0, r2, rrx
     fec:	4c240305 	stcmi	3, cr0, [r4], #-20	; 0xffffffec
     ff0:	99102000 	ldmdbls	r0, {sp}
     ff4:	01000009 	tsteq	r0, r9
     ff8:	00006221 	andeq	r6, r0, r1, lsr #4
     ffc:	2c030500 	cfstr32cs	mvfx0, [r3], {-0}
    1000:	1020004d 	eorne	r0, r0, sp, asr #32
    1004:	000007cb 	andeq	r0, r0, fp, asr #15
    1008:	00622201 	rsbeq	r2, r2, r1, lsl #4
    100c:	03050000 	movweq	r0, #20480	; 0x5000
    1010:	20004cdc 	ldrdcs	r4, [r0], -ip
    1014:	0008e010 	andeq	lr, r8, r0, lsl r0
    1018:	62230100 	eorvs	r0, r3, #0, 2
    101c:	05000000 	streq	r0, [r0, #-0]
    1020:	004bfc03 	subeq	pc, fp, r3, lsl #24
    1024:	07b31020 	ldreq	r1, [r3, r0, lsr #32]!
    1028:	24010000 	strcs	r0, [r1], #-0
    102c:	00000062 	andeq	r0, r0, r2, rrx
    1030:	4c0c0305 	stcmi	3, cr0, [ip], {5}
    1034:	5c102000 	ldcpl	0, cr2, [r0], {-0}
    1038:	01000009 	tsteq	r0, r9
    103c:	00006225 	andeq	r6, r0, r5, lsr #4
    1040:	48030500 	stmdami	r3, {r8, sl}
    1044:	1020004c 	eorne	r0, r0, ip, asr #32
    1048:	00000873 	andeq	r0, r0, r3, ror r8
    104c:	00622601 	rsbeq	r2, r2, r1, lsl #12
    1050:	03050000 	movweq	r0, #20480	; 0x5000
    1054:	20004cd0 	ldrdcs	r4, [r0], -r0
    1058:	0009b310 	andeq	fp, r9, r0, lsl r3
    105c:	62270100 	eorvs	r0, r7, #0, 2
    1060:	05000000 	streq	r0, [r0, #-0]
    1064:	004d0403 	subeq	r0, sp, r3, lsl #8
    1068:	08be1020 	ldmeq	lr!, {r5, ip}
    106c:	2a010000 	bcs	41074 <startup-0x1ffbef8c>
    1070:	0000014c 	andeq	r0, r0, ip, asr #2
    1074:	4c640305 	stclmi	3, cr0, [r4], #-20	; 0xffffffec
    1078:	39102000 	ldmdbcc	r0, {sp}
    107c:	01000009 	tsteq	r0, r9
    1080:	0000a42b 	andeq	sl, r0, fp, lsr #8
    1084:	54030500 	strpl	r0, [r3], #-1280	; 0xfffffb00
    1088:	1020004c 	eorne	r0, r0, ip, asr #32
    108c:	000009a8 	andeq	r0, r0, r8, lsr #19
    1090:	00a42c01 	adceq	r2, r4, r1, lsl #24
    1094:	03050000 	movweq	r0, #20480	; 0x5000
    1098:	20004c18 	andcs	r4, r0, r8, lsl ip
    109c:	00084b10 	andeq	r4, r8, r0, lsl fp
    10a0:	a42d0100 	strtge	r0, [sp], #-256	; 0xffffff00
    10a4:	05000000 	streq	r0, [r0, #-0]
    10a8:	004c3c03 	subeq	r3, ip, r3, lsl #24
    10ac:	08ef1020 	stmiaeq	pc!, {r5, ip}^	; <UNPREDICTABLE>
    10b0:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    10b4:	000000a4 	andeq	r0, r0, r4, lsr #1
    10b8:	4ce80305 	stclmi	3, cr0, [r8], #20
    10bc:	7c102000 	ldcvc	0, cr2, [r0], {-0}
    10c0:	01000009 	tsteq	r0, r9
    10c4:	0000a42f 	andeq	sl, r0, pc, lsr #8
    10c8:	88030500 	stmdahi	r3, {r8, sl}
    10cc:	0b20004c 	bleq	801204 <startup-0x1f7fedfc>
    10d0:	000000a4 	andeq	r0, r0, r4, lsr #1
    10d4:	0000043c 	andeq	r0, r0, ip, lsr r4
    10d8:	00018e0e 	andeq	r8, r1, lr, lsl #28
    10dc:	10000400 	andne	r0, r0, r0, lsl #8
    10e0:	0000092e 	andeq	r0, r0, lr, lsr #18
    10e4:	042c3001 	strteq	r3, [ip], #-1
    10e8:	03050000 	movweq	r0, #20480	; 0x5000
    10ec:	20004c94 	mulcs	r0, r4, ip
    10f0:	00091311 	andeq	r1, r9, r1, lsl r3
    10f4:	d45f0100 	ldrble	r0, [pc], #-256	; 10fc <startup-0x1fffef04>
    10f8:	2420001a 	strtcs	r0, [r0], #-26	; 0xffffffe6
    10fc:	01000001 	tsteq	r0, r1
    1100:	0004829c 	muleq	r4, ip, r2
    1104:	08be1200 	ldmeq	lr!, {r9, ip}
    1108:	5f010000 	svcpl	0x00010000
    110c:	00000162 	andeq	r0, r0, r2, ror #2
    1110:	0f6c9102 	svceq	0x006c9102
    1114:	00000909 	andeq	r0, r0, r9, lsl #18
    1118:	012e6001 			; <UNDEFINED> instruction: 0x012e6001
    111c:	03050000 	movweq	r0, #20480	; 0x5000
    1120:	20008a74 	andcs	r8, r0, r4, ror sl
    1124:	04a91300 	strteq	r1, [r9], #768	; 0x300
    1128:	31010000 	mrscc	r0, (UNDEF: 1)
    112c:	20001950 	andcs	r1, r0, r0, asr r9
    1130:	00000184 	andeq	r0, r0, r4, lsl #3
    1134:	560f9c01 	strpl	r9, [pc], -r1, lsl #24
    1138:	01000008 	tsteq	r0, r8
    113c:	00009e32 	andeq	r9, r0, r2, lsr lr
    1140:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1144:	0008290f 	andeq	r2, r8, pc, lsl #18
    1148:	9e360100 	rsflss	f0, f6, f0
    114c:	02000000 	andeq	r0, r0, #0
    1150:	6a0f7091 	bvs	3dd39c <startup-0x1fc22c64>
    1154:	01000008 	tsteq	r0, r8
    1158:	00009e3a 	andeq	r9, r0, sl, lsr lr
    115c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1160:	0008320f 	andeq	r3, r8, pc, lsl #4
    1164:	9e3e0100 	rsflse	f0, f6, f0
    1168:	02000000 	andeq	r0, r0, #0
    116c:	4d0f6891 	stcmi	8, cr6, [pc, #-580]	; f30 <startup-0x1ffff0d0>
    1170:	01000004 	tsteq	r0, r4
    1174:	00009e42 	andeq	r9, r0, r2, asr #28
    1178:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    117c:	0002f90f 	andeq	pc, r2, pc, lsl #18
    1180:	9e460100 	dvflss	f0, f6, f0
    1184:	02000000 	andeq	r0, r0, #0
    1188:	020f6091 	andeq	r6, pc, #145	; 0x91
    118c:	01000003 	tsteq	r0, r3
    1190:	00009e4a 	andeq	r9, r0, sl, asr #28
    1194:	5c910200 	lfmpl	f0, 4, [r1], {0}
    1198:	00014b0f 	andeq	r4, r1, pc, lsl #22
    119c:	9e4e0100 	dvflse	f0, f6, f0
    11a0:	02000000 	andeq	r0, r0, #0
    11a4:	200f5891 	mulcs	pc, r1, r8	; <UNPREDICTABLE>
    11a8:	01000003 	tsteq	r0, r3
    11ac:	00009e52 	andeq	r9, r0, r2, asr lr
    11b0:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    11b4:	0003290f 	andeq	r2, r3, pc, lsl #18
    11b8:	9e560100 	rdflss	f0, f6, f0
    11bc:	02000000 	andeq	r0, r0, #0
    11c0:	850f5091 	strhi	r5, [pc, #-145]	; 1137 <startup-0x1fffeec9>
    11c4:	01000000 	mrseq	r0, (UNDEF: 0)
    11c8:	00009e5a 	andeq	r9, r0, sl, asr lr
    11cc:	4c910200 	lfmmi	f0, 4, [r1], {0}
    11d0:	020c0000 	andeq	r0, ip, #0
    11d4:	00040000 	andeq	r0, r4, r0
    11d8:	00000384 	andeq	r0, r0, r4, lsl #7
    11dc:	009f0104 	addseq	r0, pc, r4, lsl #2
    11e0:	380c0000 	stmdacc	ip, {}	; <UNPREDICTABLE>
    11e4:	f800000a 			; <UNDEFINED> instruction: 0xf800000a
    11e8:	4020001b 	eormi	r0, r0, fp, lsl r0
    11ec:	f1000002 	cps	#2
    11f0:	02000005 	andeq	r0, r0, #5
    11f4:	03890704 	orreq	r0, r9, #4, 14	; 0x100000
    11f8:	02020000 	andeq	r0, r2, #0
    11fc:	00038307 	andeq	r8, r3, r7, lsl #6
    1200:	08010200 	stmdaeq	r1, {r9}
    1204:	000004d3 	ldrdeq	r0, [r0], -r3
    1208:	05020c03 	streq	r0, [r2, #-3075]	; 0xfffff3fd
    120c:	00000063 	andeq	r0, r0, r3, rrx
    1210:	00035b04 	andeq	r5, r3, r4, lsl #22
    1214:	21070200 	mrscs	r0, (UNDEF: 39)
    1218:	00000000 	andeq	r0, r0, r0
    121c:	00071904 	andeq	r1, r7, r4, lsl #18
    1220:	21080200 	mrscs	r0, R8_fiq
    1224:	04000000 	streq	r0, [r0], #-0
    1228:	00192404 	andseq	r2, r9, r4, lsl #8
    122c:	63090200 	movwvs	r0, #37376	; 0x9200
    1230:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1234:	2f040500 	svccs	0x00040500
    1238:	06000000 	streq	r0, [r0], -r0
    123c:	00001a76 	andeq	r1, r0, r6, ror sl
    1240:	00360a02 	eorseq	r0, r6, r2, lsl #20
    1244:	34070000 	strcc	r0, [r7], #-0
    1248:	0c000000 	stceq	0, cr0, [r0], {-0}
    124c:	00a50603 	adceq	r0, r5, r3, lsl #12
    1250:	c9040000 	stmdbgt	r4, {}	; <UNPREDICTABLE>
    1254:	03000005 	movweq	r0, #5
    1258:	0000a507 	andeq	sl, r0, r7, lsl #10
    125c:	3b040000 	blcc	101264 <startup-0x1fefed9c>
    1260:	03000000 	movweq	r0, #0
    1264:	0000a508 	andeq	sl, r0, r8, lsl #10
    1268:	30040400 	andcc	r0, r4, r0, lsl #8
    126c:	03000000 	movweq	r0, #0
    1270:	0000a509 	andeq	sl, r0, r9, lsl #10
    1274:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    1278:	00006904 	andeq	r6, r0, r4, lsl #18
    127c:	16340600 	ldrtne	r0, [r4], -r0, lsl #12
    1280:	0a030000 	beq	c1288 <startup-0x1ff3ed78>
    1284:	00000074 	andeq	r0, r0, r4, ror r0
    1288:	0006de07 	andeq	sp, r6, r7, lsl #28
    128c:	06042400 	streq	r2, [r4], -r0, lsl #8
    1290:	0000012f 	andeq	r0, r0, pc, lsr #2
    1294:	00046104 	andeq	r6, r4, r4, lsl #2
    1298:	2f070400 	svccs	0x00070400
    129c:	00000001 	andeq	r0, r0, r1
    12a0:	0006ea04 	andeq	lr, r6, r4, lsl #20
    12a4:	35080400 	strcc	r0, [r8, #-1024]	; 0xfffffc00
    12a8:	04000001 	streq	r0, [r0], #-1
    12ac:	00063a04 	andeq	r3, r6, r4, lsl #20
    12b0:	35090400 	strcc	r0, [r9, #-1024]	; 0xfffffc00
    12b4:	08000001 	stmdaeq	r0, {r0}
    12b8:	00066604 	andeq	r6, r6, r4, lsl #12
    12bc:	4d0c0400 	cfstrsmi	mvf0, [ip, #-0]
    12c0:	0c000001 	stceq	0, cr0, [r0], {1}
    12c4:	00034204 	andeq	r4, r3, r4, lsl #4
    12c8:	4d0d0400 	cfstrsmi	mvf0, [sp, #-0]
    12cc:	10000001 	andne	r0, r0, r1
    12d0:	00047304 	andeq	r7, r4, r4, lsl #6
    12d4:	35100400 	ldrcc	r0, [r0, #-1024]	; 0xfffffc00
    12d8:	14000001 	strne	r0, [r0], #-1
    12dc:	00007004 	andeq	r7, r0, r4
    12e0:	35110400 	ldrcc	r0, [r1, #-1024]	; 0xfffffc00
    12e4:	18000001 	stmdane	r0, {r0}
    12e8:	0003d904 	andeq	sp, r3, r4, lsl #18
    12ec:	35120400 	ldrcc	r0, [r2, #-1024]	; 0xfffffc00
    12f0:	1c000001 	stcne	0, cr0, [r0], {1}
    12f4:	0003e904 	andeq	lr, r3, r4, lsl #18
    12f8:	35130400 	ldrcc	r0, [r3, #-1024]	; 0xfffffc00
    12fc:	20000001 	andcs	r0, r0, r1
    1300:	ab040500 	blge	102708 <startup-0x1fefd8f8>
    1304:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1308:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    130c:	47090074 	smlsdxmi	r9, r4, r0, r0
    1310:	0a000001 	beq	131c <startup-0x1fffece4>
    1314:	00000147 	andeq	r0, r0, r7, asr #2
    1318:	b6040500 	strlt	r0, [r4], -r0, lsl #10
    131c:	05000000 	streq	r0, [r0, #-0]
    1320:	00013c04 	andeq	r3, r1, r4, lsl #24
    1324:	06df0600 	ldrbeq	r0, [pc], r0, lsl #12
    1328:	15040000 	strne	r0, [r4, #-0]
    132c:	000000b6 	strheq	r0, [r0], -r6
    1330:	0001690b 	andeq	r6, r1, fp, lsl #18
    1334:	00016900 	andeq	r6, r1, r0, lsl #18
    1338:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    133c:	00015304 	andeq	r5, r1, r4, lsl #6
    1340:	05560d00 	ldrbeq	r0, [r6, #-3328]	; 0xfffff300
    1344:	1c040000 	stcne	0, cr0, [r4], {-0}
    1348:	0000015e 	andeq	r0, r0, lr, asr r1
    134c:	0004240d 	andeq	r2, r4, sp, lsl #8
    1350:	351d0400 	ldrcc	r0, [sp, #-1024]	; 0xfffffc00
    1354:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    1358:	00000a0e 	andeq	r0, r0, lr, lsl #20
    135c:	01350801 	teqeq	r5, r1, lsl #16
    1360:	03050000 	movweq	r0, #20480	; 0x5000
    1364:	20004970 	andcs	r4, r0, r0, ror r9
    1368:	0009ff0e 	andeq	pc, r9, lr, lsl #30
    136c:	35090100 	strcc	r0, [r9, #-256]	; 0xffffff00
    1370:	05000001 	streq	r0, [r0, #-1]
    1374:	00497403 	subeq	r7, r9, r3, lsl #8
    1378:	0a2a0e20 	beq	a84c00 <startup-0x1f57b400>
    137c:	0a010000 	beq	41384 <startup-0x1ffbec7c>
    1380:	00000135 	andeq	r0, r0, r5, lsr r1
    1384:	49780305 	ldmdbmi	r8!, {r0, r2, r8, r9}^
    1388:	230e2000 	movwcs	r2, #57344	; 0xe000
    138c:	0100000a 	tsteq	r0, sl
    1390:	0001350b 	andeq	r3, r1, fp, lsl #10
    1394:	7c030500 	cfstr32vc	mvfx0, [r3], {-0}
    1398:	0e200049 	cdpeq	0, 2, cr0, cr0, cr9, {2}
    139c:	00000a1c 	andeq	r0, r0, ip, lsl sl
    13a0:	01350c01 	teqeq	r5, r1, lsl #24
    13a4:	03050000 	movweq	r0, #20480	; 0x5000
    13a8:	20004980 	andcs	r4, r0, r0, lsl #19
    13ac:	000a730f 	andeq	r7, sl, pc, lsl #6
    13b0:	34160100 	ldrcc	r0, [r6], #-256	; 0xffffff00
    13b4:	0420001c 	strteq	r0, [r0], #-28	; 0xffffffe4
    13b8:	01000002 	tsteq	r0, r2
    13bc:	0001fe9c 	muleq	r1, ip, lr
    13c0:	07821000 	streq	r1, [r2, r0]
    13c4:	16010000 	strne	r0, [r1], -r0
    13c8:	00000169 	andeq	r0, r0, r9, ror #2
    13cc:	00749102 	rsbseq	r9, r4, r2, lsl #2
    13d0:	000a6711 	andeq	r6, sl, r1, lsl r7
    13d4:	f80e0100 			; <UNDEFINED> instruction: 0xf80e0100
    13d8:	3c20001b 	stccc	0, cr0, [r0], #-108	; 0xffffff94
    13dc:	01000000 	mrseq	r0, (UNDEF: 0)
    13e0:	0641009c 			; <UNDEFINED> instruction: 0x0641009c
    13e4:	00040000 	andeq	r0, r4, r0
    13e8:	0000046c 	andeq	r0, r0, ip, ror #8
    13ec:	009f0104 	addseq	r0, pc, r4, lsl #2
    13f0:	f40c0000 	vst4.8	{d0-d3}, [ip], r0
    13f4:	3800000c 	stmdacc	r0, {r2, r3}
    13f8:	6420001e 	strtvs	r0, [r0], #-30	; 0xffffffe2
    13fc:	e3000003 	movw	r0, #3
    1400:	02000006 	andeq	r0, r0, #6
    1404:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
    1408:	03000000 	movweq	r0, #0
    140c:	0000035b 	andeq	r0, r0, fp, asr r3
    1410:	004e0702 	subeq	r0, lr, r2, lsl #14
    1414:	03000000 	movweq	r0, #0
    1418:	00000719 	andeq	r0, r0, r9, lsl r7
    141c:	004e0802 	subeq	r0, lr, r2, lsl #16
    1420:	03040000 	movweq	r0, #16384	; 0x4000
    1424:	00001924 	andeq	r1, r0, r4, lsr #18
    1428:	00550902 	subseq	r0, r5, r2, lsl #18
    142c:	00080000 	andeq	r0, r8, r0
    1430:	89070404 	stmdbhi	r7, {r2, sl}
    1434:	05000003 	streq	r0, [r0, #-3]
    1438:	00005b04 	andeq	r5, r0, r4, lsl #22
    143c:	08010400 	stmdaeq	r1, {sl}
    1440:	000004d3 	ldrdeq	r0, [r0], -r3
    1444:	001a7606 	andseq	r7, sl, r6, lsl #12
    1448:	210a0200 	mrscs	r0, R10_fiq
    144c:	07000000 	streq	r0, [r0, -r0]
    1450:	00000034 	andeq	r0, r0, r4, lsr r0
    1454:	9e06030c 	cdpls	3, 0, cr0, cr6, cr12, {0}
    1458:	03000000 	movweq	r0, #0
    145c:	000005c9 	andeq	r0, r0, r9, asr #11
    1460:	009e0703 	addseq	r0, lr, r3, lsl #14
    1464:	03000000 	movweq	r0, #0
    1468:	0000003b 	andeq	r0, r0, fp, lsr r0
    146c:	009e0803 	addseq	r0, lr, r3, lsl #16
    1470:	03040000 	movweq	r0, #16384	; 0x4000
    1474:	00000030 	andeq	r0, r0, r0, lsr r0
    1478:	009e0903 	addseq	r0, lr, r3, lsl #18
    147c:	00080000 	andeq	r0, r8, r0
    1480:	00620405 	rsbeq	r0, r2, r5, lsl #8
    1484:	34060000 	strcc	r0, [r6], #-0
    1488:	03000016 	movweq	r0, #22
    148c:	00006d0a 	andeq	r6, r0, sl, lsl #26
    1490:	06de0700 	ldrbeq	r0, [lr], r0, lsl #14
    1494:	04240000 	strteq	r0, [r4], #-0
    1498:	00012806 	andeq	r2, r1, r6, lsl #16
    149c:	04610300 	strbteq	r0, [r1], #-768	; 0xfffffd00
    14a0:	07040000 	streq	r0, [r4, -r0]
    14a4:	00000128 	andeq	r0, r0, r8, lsr #2
    14a8:	06ea0300 	strbteq	r0, [sl], r0, lsl #6
    14ac:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    14b0:	0000012e 	andeq	r0, r0, lr, lsr #2
    14b4:	063a0304 	ldrteq	r0, [sl], -r4, lsl #6
    14b8:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    14bc:	0000012e 	andeq	r0, r0, lr, lsr #2
    14c0:	06660308 	strbteq	r0, [r6], -r8, lsl #6
    14c4:	0c040000 	stceq	0, cr0, [r4], {-0}
    14c8:	00000146 	andeq	r0, r0, r6, asr #2
    14cc:	0342030c 	movteq	r0, #8972	; 0x230c
    14d0:	0d040000 	stceq	0, cr0, [r4, #-0]
    14d4:	00000146 	andeq	r0, r0, r6, asr #2
    14d8:	04730310 	ldrbteq	r0, [r3], #-784	; 0xfffffcf0
    14dc:	10040000 	andne	r0, r4, r0
    14e0:	0000012e 	andeq	r0, r0, lr, lsr #2
    14e4:	00700314 	rsbseq	r0, r0, r4, lsl r3
    14e8:	11040000 	mrsne	r0, (UNDEF: 4)
    14ec:	0000012e 	andeq	r0, r0, lr, lsr #2
    14f0:	03d90318 	bicseq	r0, r9, #24, 6	; 0x60000000
    14f4:	12040000 	andne	r0, r4, #0
    14f8:	0000012e 	andeq	r0, r0, lr, lsr #2
    14fc:	03e9031c 	mvneq	r0, #28, 6	; 0x70000000
    1500:	13040000 	movwne	r0, #16384	; 0x4000
    1504:	0000012e 	andeq	r0, r0, lr, lsr #2
    1508:	04050020 	streq	r0, [r5], #-32	; 0xffffffe0
    150c:	000000a4 	andeq	r0, r0, r4, lsr #1
    1510:	69050408 	stmdbvs	r5, {r3, sl}
    1514:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1518:	00000140 	andeq	r0, r0, r0, asr #2
    151c:	0001400a 	andeq	r4, r1, sl
    1520:	04050000 	streq	r0, [r5], #-0
    1524:	000000af 	andeq	r0, r0, pc, lsr #1
    1528:	01350405 	teqeq	r5, r5, lsl #8
    152c:	df060000 	svcle	0x00060000
    1530:	04000006 	streq	r0, [r0], #-6
    1534:	0000af15 	andeq	sl, r0, r5, lsl pc
    1538:	01620b00 	cmneq	r2, r0, lsl #22
    153c:	01620000 	cmneq	r2, r0
    1540:	000c0000 	andeq	r0, ip, r0
    1544:	014c0405 	cmpeq	ip, r5, lsl #8
    1548:	560d0000 	strpl	r0, [sp], -r0
    154c:	04000005 	streq	r0, [r0], #-5
    1550:	0001571c 	andeq	r5, r1, ip, lsl r7
    1554:	04240d00 	strteq	r0, [r4], #-3328	; 0xfffff300
    1558:	1d040000 	stcne	0, cr0, [r4, #-0]
    155c:	0000012e 	andeq	r0, r0, lr, lsr #2
    1560:	00005b0b 	andeq	r5, r0, fp, lsl #22
    1564:	00018e00 	andeq	r8, r1, r0, lsl #28
    1568:	018e0e00 	orreq	r0, lr, r0, lsl #28
    156c:	00630000 	rsbeq	r0, r3, r0
    1570:	06070404 	streq	r0, [r7], -r4, lsl #8
    1574:	0f000004 	svceq	0x00000004
    1578:	00000d5a 	andeq	r0, r0, sl, asr sp
    157c:	017e0305 	cmneq	lr, r5, lsl #6
    1580:	03050000 	movweq	r0, #20480	; 0x5000
    1584:	20008a78 	andcs	r8, r0, r8, ror sl
    1588:	000bc50f 	andeq	ip, fp, pc, lsl #10
    158c:	7e030600 	cfmadd32vc	mvax0, mvfx0, mvfx3, mvfx0
    1590:	05000001 	streq	r0, [r0, #-1]
    1594:	008adc03 	addeq	sp, sl, r3, lsl #24
    1598:	0c0d0f20 	stceq	15, cr0, [sp], {32}
    159c:	03070000 	movweq	r0, #28672	; 0x7000
    15a0:	0000017e 	andeq	r0, r0, lr, ror r1
    15a4:	8b400305 	blhi	10021c0 <startup-0x1effde40>
    15a8:	b40f2000 	strlt	r2, [pc], #-0	; 15b0 <startup-0x1fffea50>
    15ac:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    15b0:	00017e03 	andeq	r7, r1, r3, lsl #28
    15b4:	a4030500 	strge	r0, [r3], #-1280	; 0xfffffb00
    15b8:	0f20008b 	svceq	0x0020008b
    15bc:	00000d33 	andeq	r0, r0, r3, lsr sp
    15c0:	017e0309 	cmneq	lr, r9, lsl #6
    15c4:	03050000 	movweq	r0, #20480	; 0x5000
    15c8:	20008c08 	andcs	r8, r0, r8, lsl #24
    15cc:	000e070f 	andeq	r0, lr, pc, lsl #14
    15d0:	7e030a00 	vmlavc.f32	s0, s6, s0
    15d4:	05000001 	streq	r0, [r0, #-1]
    15d8:	008c6c03 	addeq	r6, ip, r3, lsl #24
    15dc:	0be00f20 	bleq	ff805264 <firstTime.4040+0xdf7f5da8>
    15e0:	030b0000 	movweq	r0, #45056	; 0xb000
    15e4:	0000017e 	andeq	r0, r0, lr, ror r1
    15e8:	8cd00305 	ldclhi	3, cr0, [r0], {5}
    15ec:	ce0f2000 	cdpgt	0, 0, cr2, cr15, cr0, {0}
    15f0:	0c00000c 	stceq	0, cr0, [r0], {12}
    15f4:	00017e03 	andeq	r7, r1, r3, lsl #28
    15f8:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
    15fc:	0f20008d 	svceq	0x0020008d
    1600:	00000a8f 	andeq	r0, r0, pc, lsl #21
    1604:	017e030d 	cmneq	lr, sp, lsl #6
    1608:	03050000 	movweq	r0, #20480	; 0x5000
    160c:	20008d98 	mulcs	r0, r8, sp
    1610:	000bf10f 	andeq	pc, fp, pc, lsl #2
    1614:	7e030e00 	cdpvc	14, 0, cr0, cr3, cr0, {0}
    1618:	05000001 	streq	r0, [r0, #-1]
    161c:	008dfc03 	addeq	pc, sp, r3, lsl #24
    1620:	0c750f20 	ldcleq	15, cr0, [r5], #-128	; 0xffffff80
    1624:	030f0000 	movweq	r0, #61440	; 0xf000
    1628:	0000017e 	andeq	r0, r0, lr, ror r1
    162c:	8e600305 	cdphi	3, 6, cr0, cr0, cr5, {0}
    1630:	ab0f2000 	blge	3c9638 <startup-0x1fc369c8>
    1634:	1000000a 	andne	r0, r0, sl
    1638:	00017e03 	andeq	r7, r1, r3, lsl #28
    163c:	c4030500 	strgt	r0, [r3], #-1280	; 0xfffffb00
    1640:	0f20008e 	svceq	0x0020008e
    1644:	00000c1e 	andeq	r0, r0, lr, lsl ip
    1648:	017e0311 	cmneq	lr, r1, lsl r3
    164c:	03050000 	movweq	r0, #20480	; 0x5000
    1650:	20008f28 	andcs	r8, r0, r8, lsr #30
    1654:	000c3e0f 	andeq	r3, ip, pc, lsl #28
    1658:	7e031200 	cdpvc	2, 0, cr1, cr3, cr0, {0}
    165c:	05000001 	streq	r0, [r0, #-1]
    1660:	008f8c03 	addeq	r8, pc, r3, lsl #24
    1664:	0ad50f20 	beq	ff5452ec <firstTime.4040+0xdf535e30>
    1668:	03130000 	tsteq	r3, #0
    166c:	0000017e 	andeq	r0, r0, lr, ror r1
    1670:	8ff00305 	svchi	0x00f00305
    1674:	de102000 	cdple	0, 1, cr2, cr0, cr0, {0}
    1678:	0100000c 	tsteq	r0, ip
    167c:	00009e15 	andeq	r9, r0, r5, lsl lr
    1680:	b0030500 	andlt	r0, r3, r0, lsl #10
    1684:	1020004d 	eorne	r0, r0, sp, asr #32
    1688:	00000b11 	andeq	r0, r0, r1, lsl fp
    168c:	009e1601 	addseq	r1, lr, r1, lsl #12
    1690:	03050000 	movweq	r0, #20480	; 0x5000
    1694:	20004d48 	andcs	r4, r0, r8, asr #26
    1698:	000afb10 	andeq	pc, sl, r0, lsl fp	; <UNPREDICTABLE>
    169c:	9e170100 	muflss	f0, f7, f0
    16a0:	05000000 	streq	r0, [r0, #-0]
    16a4:	004e4003 	subeq	r4, lr, r3
    16a8:	0b531020 	bleq	14c5730 <startup-0x1eb3a8d0>
    16ac:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    16b0:	0000009e 	muleq	r0, lr, r0
    16b4:	4dac0305 	stcmi	3, cr0, [ip, #20]!
    16b8:	4e102000 	cdpmi	0, 1, cr2, cr0, cr0, {0}
    16bc:	0100000c 	tsteq	r0, ip
    16c0:	00009e19 	andeq	r9, r0, r9, lsl lr
    16c4:	30030500 	andcc	r0, r3, r0, lsl #10
    16c8:	1020004e 	eorne	r0, r0, lr, asr #32
    16cc:	00000ce9 	andeq	r0, r0, r9, ror #25
    16d0:	009e1a01 	addseq	r1, lr, r1, lsl #20
    16d4:	03050000 	movweq	r0, #20480	; 0x5000
    16d8:	20004ee4 	andcs	r4, r0, r4, ror #29
    16dc:	000b0610 	andeq	r0, fp, r0, lsl r6
    16e0:	9e1b0100 	muflse	f0, f3, f0
    16e4:	05000000 	streq	r0, [r0, #-0]
    16e8:	004da403 	subeq	sl, sp, r3, lsl #8
    16ec:	0d761020 	ldcleq	0, cr1, [r6, #-128]!	; 0xffffff80
    16f0:	1c010000 	stcne	0, cr0, [r1], {-0}
    16f4:	0000009e 	muleq	r0, lr, r0
    16f8:	4dcc0305 	stclmi	3, cr0, [ip, #20]
    16fc:	e6102000 	ldr	r2, [r0], -r0
    1700:	0100000a 	tsteq	r0, sl
    1704:	00009e1d 	andeq	r9, r0, sp, lsl lr
    1708:	f8030500 			; <UNDEFINED> instruction: 0xf8030500
    170c:	1020004d 	eorne	r0, r0, sp, asr #32
    1710:	00000cb4 			; <UNDEFINED> instruction: 0x00000cb4
    1714:	009e1e01 	addseq	r1, lr, r1, lsl #28
    1718:	03050000 	movweq	r0, #20480	; 0x5000
    171c:	20004ec8 	andcs	r4, r0, r8, asr #29
    1720:	000b4910 	andeq	r4, fp, r0, lsl r9
    1724:	9e1f0100 	muflse	f0, f7, f0
    1728:	05000000 	streq	r0, [r0, #-0]
    172c:	004da803 	subeq	sl, sp, r3, lsl #16
    1730:	0dbe1020 	ldceq	0, cr1, [lr, #128]!	; 0x80
    1734:	20010000 	andcs	r0, r1, r0
    1738:	0000009e 	muleq	r0, lr, r0
    173c:	4d440305 	stclmi	3, cr0, [r4, #-20]	; 0xffffffec
    1740:	2a102000 	bcs	409748 <startup-0x1fbf68b8>
    1744:	0100000b 	tsteq	r0, fp
    1748:	00009e21 	andeq	r9, r0, r1, lsr #28
    174c:	58030500 	stmdapl	r3, {r8, sl}
    1750:	1020004d 	eorne	r0, r0, sp, asr #32
    1754:	00000d50 	andeq	r0, r0, r0, asr sp
    1758:	009e2201 	addseq	r2, lr, r1, lsl #4
    175c:	03050000 	movweq	r0, #20480	; 0x5000
    1760:	20004ddc 	ldrdcs	r4, [r0], -ip
    1764:	000c8f10 	andeq	r8, ip, r0, lsl pc
    1768:	9e230100 	suflss	f0, f3, f0
    176c:	05000000 	streq	r0, [r0, #-0]
    1770:	004e2003 	subeq	r2, lr, r3
    1774:	0d8d1020 	stceq	0, cr1, [sp, #128]	; 0x80
    1778:	25010000 	strcs	r0, [r1, #-0]
    177c:	00000062 	andeq	r0, r0, r2, rrx
    1780:	4dc00305 	stclmi	3, cr0, [r0, #20]
    1784:	8e102000 	cdphi	0, 1, cr2, cr0, cr0, {0}
    1788:	0100000b 	tsteq	r0, fp
    178c:	00006226 	andeq	r6, r0, r6, lsr #4
    1790:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
    1794:	1020004e 	eorne	r0, r0, lr, asr #32
    1798:	00000d43 	andeq	r0, r0, r3, asr #26
    179c:	00622701 	rsbeq	r2, r2, r1, lsl #14
    17a0:	03050000 	movweq	r0, #20480	; 0x5000
    17a4:	20004dd0 	ldrdcs	r4, [r0], -r0
    17a8:	000cbf10 	andeq	fp, ip, r0, lsl pc
    17ac:	62280100 	eorvs	r0, r8, #0, 2
    17b0:	05000000 	streq	r0, [r0, #-0]
    17b4:	004ecc03 	subeq	ip, lr, r3, lsl #24
    17b8:	0a801020 	beq	fe005840 <firstTime.4040+0xddff6384>
    17bc:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    17c0:	00000062 	andeq	r0, r0, r2, rrx
    17c4:	4e440305 	cdpmi	3, 4, cr0, cr4, cr5, {0}
    17c8:	72102000 	andsvc	r2, r0, #0
    17cc:	0100000b 	tsteq	r0, fp
    17d0:	0000622a 	andeq	r6, r0, sl, lsr #4
    17d4:	ec030500 	cfstr32	mvfx0, [r3], {-0}
    17d8:	1020004d 	eorne	r0, r0, sp, asr #32
    17dc:	00000d9b 	muleq	r0, fp, sp
    17e0:	00622b01 	rsbeq	r2, r2, r1, lsl #22
    17e4:	03050000 	movweq	r0, #20480	; 0x5000
    17e8:	20004e24 	andcs	r4, r0, r4, lsr #28
    17ec:	000c2f10 	andeq	r2, ip, r0, lsl pc
    17f0:	622c0100 	eorvs	r0, ip, #0, 2
    17f4:	05000000 	streq	r0, [r0, #-0]
    17f8:	004e6803 	subeq	r6, lr, r3, lsl #16
    17fc:	0c671020 	stcleq	0, cr1, [r7], #-128	; 0xffffff80
    1800:	2d010000 	stccs	0, cr0, [r1, #-0]
    1804:	00000062 	andeq	r0, r0, r2, rrx
    1808:	4e740305 	cdpmi	3, 7, cr0, cr4, cr5, {0}
    180c:	1b102000 	blne	409814 <startup-0x1fbf67ec>
    1810:	0100000b 	tsteq	r0, fp
    1814:	0000622e 	andeq	r6, r0, lr, lsr #4
    1818:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
    181c:	1020004d 	eorne	r0, r0, sp, asr #32
    1820:	00000c58 	andeq	r0, r0, r8, asr ip
    1824:	00622f01 	rsbeq	r2, r2, r1, lsl #30
    1828:	03050000 	movweq	r0, #20480	; 0x5000
    182c:	20004e5c 	andcs	r4, r0, ip, asr lr
    1830:	000b8010 	andeq	r8, fp, r0, lsl r0
    1834:	62300100 	eorsvs	r0, r0, #0, 2
    1838:	05000000 	streq	r0, [r0, #-0]
    183c:	004ed803 	subeq	sp, lr, r3, lsl #16
    1840:	0ca51020 	stceq	0, cr1, [r5], #128	; 0x80
    1844:	31010000 	mrscc	r0, (UNDEF: 1)
    1848:	00000062 	andeq	r0, r0, r2, rrx
    184c:	4e080305 	cdpmi	3, 0, cr0, cr8, cr5, {0}
    1850:	bc102000 	ldclt	0, cr2, [r0], {-0}
    1854:	0100000a 	tsteq	r0, sl
    1858:	00006232 	andeq	r6, r0, r2, lsr r2
    185c:	e0030500 	and	r0, r3, r0, lsl #10
    1860:	1020004d 	eorne	r0, r0, sp, asr #32
    1864:	00000b9c 	muleq	r0, ip, fp
    1868:	00623301 	rsbeq	r3, r2, r1, lsl #6
    186c:	03050000 	movweq	r0, #20480	; 0x5000
    1870:	20004dfc 	strdcs	r4, [r0], -ip
    1874:	000d2b10 	andeq	r2, sp, r0, lsl fp
    1878:	4c360100 	ldfmis	f0, [r6], #-0
    187c:	05000001 	streq	r0, [r0, #-1]
    1880:	004d7403 	subeq	r7, sp, r3, lsl #8
    1884:	0d6b1020 	stcleq	0, cr1, [fp, #-128]!	; 0xffffff80
    1888:	37010000 	strcc	r0, [r1, -r0]
    188c:	000000a4 	andeq	r0, r0, r4, lsr #1
    1890:	4d980305 	ldcmi	3, cr0, [r8, #20]
    1894:	f2102000 	vhadd.s16	d2, d0, d0
    1898:	0100000d 	tsteq	r0, sp
    189c:	0000a438 	andeq	sl, r0, r8, lsr r4
    18a0:	68030500 	stmdavs	r3, {r8, sl}
    18a4:	1020004d 	eorne	r0, r0, sp, asr #32
    18a8:	00000c02 	andeq	r0, r0, r2, lsl #24
    18ac:	00a43901 	adceq	r3, r4, r1, lsl #18
    18b0:	03050000 	movweq	r0, #20480	; 0x5000
    18b4:	20004e50 	andcs	r4, r0, r0, asr lr
    18b8:	000aa010 	andeq	sl, sl, r0, lsl r0
    18bc:	a43a0100 	ldrtge	r0, [sl], #-256	; 0xffffff00
    18c0:	05000000 	streq	r0, [r0, #-0]
    18c4:	004db403 	subeq	fp, sp, r3, lsl #8
    18c8:	0dc91020 	stcleq	0, cr1, [r9, #128]	; 0x80
    18cc:	3b010000 	blcc	418d4 <startup-0x1ffbe72c>
    18d0:	000000a4 	andeq	r0, r0, r4, lsr #1
    18d4:	4e140305 	cdpmi	3, 1, cr0, cr4, cr5, {0}
    18d8:	d5102000 	ldrle	r2, [r0, #-0]
    18dc:	0100000b 	tsteq	r0, fp
    18e0:	0000a43c 	andeq	sl, r0, ip, lsr r4
    18e4:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
    18e8:	0b20004d 	bleq	801a24 <startup-0x1f7fe5dc>
    18ec:	000000a4 	andeq	r0, r0, r4, lsr #1
    18f0:	00000519 	andeq	r0, r0, r9, lsl r5
    18f4:	00018e0e 	andeq	r8, r1, lr, lsl #28
    18f8:	10000500 	andne	r0, r0, r0, lsl #10
    18fc:	00000c9a 	muleq	r0, sl, ip
    1900:	05093f01 	streq	r3, [r9, #-3841]	; 0xfffff0ff
    1904:	03050000 	movweq	r0, #20480	; 0x5000
    1908:	20004e80 	andcs	r4, r0, r0, lsl #29
    190c:	000d2111 	andeq	r2, sp, r1, lsl r1
    1910:	44760100 	ldrbtmi	r0, [r6], #-256	; 0xffffff00
    1914:	58200020 	stmdapl	r0!, {r5}
    1918:	01000001 	tsteq	r0, r1
    191c:	00055f9c 	muleq	r5, ip, pc	; <UNPREDICTABLE>
    1920:	0d2b1200 	sfmeq	f1, 4, [fp, #-0]
    1924:	76010000 	strvc	r0, [r1], -r0
    1928:	00000162 	andeq	r0, r0, r2, ror #2
    192c:	0f6c9102 	svceq	0x006c9102
    1930:	00000909 	andeq	r0, r0, r9, lsl #18
    1934:	012e7701 			; <UNDEFINED> instruction: 0x012e7701
    1938:	03050000 	movweq	r0, #20480	; 0x5000
    193c:	20009054 	andcs	r9, r0, r4, asr r0
    1940:	04a91300 	strteq	r1, [r9], #768	; 0x300
    1944:	40010000 	andmi	r0, r1, r0
    1948:	20001e38 	andcs	r1, r0, r8, lsr lr
    194c:	0000020c 	andeq	r0, r0, ip, lsl #4
    1950:	aa0f9c01 	bge	3e895c <startup-0x1fc176a4>
    1954:	0100000d 	tsteq	r0, sp
    1958:	00009e42 	andeq	r9, r0, r2, asr #28
    195c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1960:	000db40f 	andeq	fp, sp, pc, lsl #8
    1964:	9e450100 	dvflss	f0, f5, f0
    1968:	02000000 	andeq	r0, r0, #0
    196c:	aa0f7091 	bge	3ddbb8 <startup-0x1fc22448>
    1970:	0100000b 	tsteq	r0, fp
    1974:	00009e48 	andeq	r9, r0, r8, asr #28
    1978:	6c910200 	lfmvs	f0, 4, [r1], {0}
    197c:	000acb0f 	andeq	ip, sl, pc, lsl #22
    1980:	9e4c0100 	dvflse	f0, f4, f0
    1984:	02000000 	andeq	r0, r0, #0
    1988:	d40f6891 	strle	r6, [pc], #-2193	; 1990 <startup-0x1fffe670>
    198c:	0100000d 	tsteq	r0, sp
    1990:	00009e4f 	andeq	r9, r0, pc, asr #28
    1994:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1998:	000b680f 	andeq	r6, fp, pc, lsl #16
    199c:	9e520100 	rdflss	f0, f2, f0
    19a0:	02000000 	andeq	r0, r0, #0
    19a4:	800f6091 	mulhi	pc, r1, r0	; <UNPREDICTABLE>
    19a8:	0100000d 	tsteq	r0, sp
    19ac:	00009e57 	andeq	r9, r0, r7, asr lr
    19b0:	5c910200 	lfmpl	f0, 4, [r1], {0}
    19b4:	000dde0f 	andeq	sp, sp, pc, lsl #28
    19b8:	9e5a0100 	rdflse	f0, f2, f0
    19bc:	02000000 	andeq	r0, r0, #0
    19c0:	e80f5891 	stmda	pc, {r0, r4, r7, fp, ip, lr}	; <UNPREDICTABLE>
    19c4:	0100000d 	tsteq	r0, sp
    19c8:	00009e5d 	andeq	r9, r0, sp, asr lr
    19cc:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    19d0:	000af10f 	andeq	pc, sl, pc, lsl #2
    19d4:	9e610100 	powlss	f0, f1, f0
    19d8:	02000000 	andeq	r0, r0, #0
    19dc:	350f5091 	strcc	r5, [pc, #-145]	; 1953 <startup-0x1fffe6ad>
    19e0:	0100000b 	tsteq	r0, fp
    19e4:	00009e64 	andeq	r9, r0, r4, ror #28
    19e8:	4c910200 	lfmmi	f0, 4, [r1], {0}
    19ec:	000b3f0f 	andeq	r3, fp, pc, lsl #30
    19f0:	9e670100 	powlss	f0, f7, f0
    19f4:	02000000 	andeq	r0, r0, #0
    19f8:	fd0f4891 	stc2	8, cr4, [pc, #-580]	; 17bc <startup-0x1fffe844>
    19fc:	0100000d 	tsteq	r0, sp
    1a00:	00009e6b 	andeq	r9, r0, fp, ror #28
    1a04:	44910200 	ldrmi	r0, [r1], #512	; 0x200
    1a08:	000c850f 	andeq	r8, ip, pc, lsl #10
    1a0c:	9e6e0100 	powlse	f0, f6, f0
    1a10:	02000000 	andeq	r0, r0, #0
    1a14:	5e0f4091 	mcrpl	0, 0, r4, cr15, cr1, {4}
    1a18:	0100000b 	tsteq	r0, fp
    1a1c:	00009e71 	andeq	r9, r0, r1, ror lr
    1a20:	bc910300 	ldclt	3, cr0, [r1], {0}
    1a24:	9800007f 	stmdals	r0, {r0, r1, r2, r3, r4, r5, r6}
    1a28:	04000004 	streq	r0, [r0], #-4
    1a2c:	00056c00 	andeq	r6, r5, r0, lsl #24
    1a30:	9f010400 	svcls	0x00010400
    1a34:	0c000000 	stceq	0, cr0, [r0], {-0}
    1a38:	00000fcb 	andeq	r0, r0, fp, asr #31
    1a3c:	2000219c 	mulcs	r0, ip, r1
    1a40:	00000238 	andeq	r0, r0, r8, lsr r2
    1a44:	000008c4 	andeq	r0, r0, r4, asr #17
    1a48:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
    1a4c:	0000004e 	andeq	r0, r0, lr, asr #32
    1a50:	00035b03 	andeq	r5, r3, r3, lsl #22
    1a54:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
    1a58:	00000000 	andeq	r0, r0, r0
    1a5c:	00071903 	andeq	r1, r7, r3, lsl #18
    1a60:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
    1a64:	04000000 	streq	r0, [r0], #-0
    1a68:	00192403 	andseq	r2, r9, r3, lsl #8
    1a6c:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
    1a70:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1a74:	07040400 	streq	r0, [r4, -r0, lsl #8]
    1a78:	00000389 	andeq	r0, r0, r9, lsl #7
    1a7c:	005b0405 	subseq	r0, fp, r5, lsl #8
    1a80:	01040000 	mrseq	r0, (UNDEF: 4)
    1a84:	0004d308 	andeq	sp, r4, r8, lsl #6
    1a88:	1a760600 	bne	1d83290 <startup-0x1e27cd70>
    1a8c:	0a020000 	beq	81a94 <startup-0x1ff7e56c>
    1a90:	00000021 	andeq	r0, r0, r1, lsr #32
    1a94:	00003407 	andeq	r3, r0, r7, lsl #8
    1a98:	06030c00 	streq	r0, [r3], -r0, lsl #24
    1a9c:	0000009e 	muleq	r0, lr, r0
    1aa0:	0005c903 	andeq	ip, r5, r3, lsl #18
    1aa4:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
    1aa8:	00000000 	andeq	r0, r0, r0
    1aac:	00003b03 	andeq	r3, r0, r3, lsl #22
    1ab0:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
    1ab4:	04000000 	streq	r0, [r0], #-0
    1ab8:	00003003 	andeq	r3, r0, r3
    1abc:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
    1ac0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1ac4:	62040500 	andvs	r0, r4, #0, 10
    1ac8:	06000000 	streq	r0, [r0], -r0
    1acc:	00001634 	andeq	r1, r0, r4, lsr r6
    1ad0:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
    1ad4:	de070000 	cdple	0, 0, cr0, cr7, cr0, {0}
    1ad8:	24000006 	strcs	r0, [r0], #-6
    1adc:	01280604 			; <UNDEFINED> instruction: 0x01280604
    1ae0:	61030000 	mrsvs	r0, (UNDEF: 3)
    1ae4:	04000004 	streq	r0, [r0], #-4
    1ae8:	00012807 	andeq	r2, r1, r7, lsl #16
    1aec:	ea030000 	b	c1af4 <startup-0x1ff3e50c>
    1af0:	04000006 	streq	r0, [r0], #-6
    1af4:	00012e08 	andeq	r2, r1, r8, lsl #28
    1af8:	3a030400 	bcc	c2b00 <startup-0x1ff3d500>
    1afc:	04000006 	streq	r0, [r0], #-6
    1b00:	00012e09 	andeq	r2, r1, r9, lsl #28
    1b04:	66030800 	strvs	r0, [r3], -r0, lsl #16
    1b08:	04000006 	streq	r0, [r0], #-6
    1b0c:	0001460c 	andeq	r4, r1, ip, lsl #12
    1b10:	42030c00 	andmi	r0, r3, #0, 24
    1b14:	04000003 	streq	r0, [r0], #-3
    1b18:	0001460d 	andeq	r4, r1, sp, lsl #12
    1b1c:	73031000 	movwvc	r1, #12288	; 0x3000
    1b20:	04000004 	streq	r0, [r0], #-4
    1b24:	00012e10 	andeq	r2, r1, r0, lsl lr
    1b28:	70031400 	andvc	r1, r3, r0, lsl #8
    1b2c:	04000000 	streq	r0, [r0], #-0
    1b30:	00012e11 	andeq	r2, r1, r1, lsl lr
    1b34:	d9031800 	stmdble	r3, {fp, ip}
    1b38:	04000003 	streq	r0, [r0], #-3
    1b3c:	00012e12 	andeq	r2, r1, r2, lsl lr
    1b40:	e9031c00 	stmdb	r3, {sl, fp, ip}
    1b44:	04000003 	streq	r0, [r0], #-3
    1b48:	00012e13 	andeq	r2, r1, r3, lsl lr
    1b4c:	05002000 	streq	r2, [r0, #-0]
    1b50:	0000a404 	andeq	sl, r0, r4, lsl #8
    1b54:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
    1b58:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1b5c:	00014009 	andeq	r4, r1, r9
    1b60:	01400a00 	cmpeq	r0, r0, lsl #20
    1b64:	05000000 	streq	r0, [r0, #-0]
    1b68:	0000af04 	andeq	sl, r0, r4, lsl #30
    1b6c:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
    1b70:	06000001 	streq	r0, [r0], -r1
    1b74:	000006df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1b78:	00af1504 	adceq	r1, pc, r4, lsl #10
    1b7c:	620b0000 	andvs	r0, fp, #0
    1b80:	62000001 	andvs	r0, r0, #1
    1b84:	0c000001 	stceq	0, cr0, [r0], {1}
    1b88:	4c040500 	cfstr32mi	mvfx0, [r4], {-0}
    1b8c:	0d000001 	stceq	0, cr0, [r0, #-4]
    1b90:	00000556 	andeq	r0, r0, r6, asr r5
    1b94:	01571c04 	cmpeq	r7, r4, lsl #24
    1b98:	240d0000 	strcs	r0, [sp], #-0
    1b9c:	04000004 	streq	r0, [r0], #-4
    1ba0:	00012e1d 	andeq	r2, r1, sp, lsl lr
    1ba4:	005b0b00 	subseq	r0, fp, r0, lsl #22
    1ba8:	018e0000 	orreq	r0, lr, r0
    1bac:	8e0e0000 	cdphi	0, 0, cr0, cr14, cr0, {0}
    1bb0:	35000001 	strcc	r0, [r0, #-1]
    1bb4:	07040400 	streq	r0, [r4, -r0, lsl #8]
    1bb8:	00000406 	andeq	r0, r0, r6, lsl #8
    1bbc:	000e470f 	andeq	r4, lr, pc, lsl #14
    1bc0:	7e030500 	cfsh32vc	mvfx0, mvfx3, #0
    1bc4:	05000001 	streq	r0, [r0, #-1]
    1bc8:	00905803 	addseq	r5, r0, r3, lsl #16
    1bcc:	0ff90f20 	svceq	0x00f90f20
    1bd0:	03060000 	movweq	r0, #24576	; 0x6000
    1bd4:	0000017e 	andeq	r0, r0, lr, ror r1
    1bd8:	90900305 	addsls	r0, r0, r5, lsl #6
    1bdc:	510f2000 	mrspl	r2, CPSR
    1be0:	0700000f 	streq	r0, [r0, -pc]
    1be4:	00017e03 	andeq	r7, r1, r3, lsl #28
    1be8:	c8030500 	stmdagt	r3, {r8, sl}
    1bec:	0f200090 	svceq	0x00200090
    1bf0:	00000eea 	andeq	r0, r0, sl, ror #29
    1bf4:	017e0308 	cmneq	lr, r8, lsl #6
    1bf8:	03050000 	movweq	r0, #20480	; 0x5000
    1bfc:	20009100 	andcs	r9, r0, r0, lsl #2
    1c00:	000f630f 	andeq	r6, pc, pc, lsl #6
    1c04:	7e030900 	vmlavc.f16	s0, s6, s0	; <UNPREDICTABLE>
    1c08:	05000001 	streq	r0, [r0, #-1]
    1c0c:	00913803 	addseq	r3, r1, r3, lsl #16
    1c10:	0e950f20 	cdpeq	15, 9, cr0, cr5, cr0, {1}
    1c14:	030a0000 	movweq	r0, #40960	; 0xa000
    1c18:	0000017e 	andeq	r0, r0, lr, ror r1
    1c1c:	91700305 	cmnls	r0, r5, lsl #6
    1c20:	0a0f2000 	beq	3c9c28 <startup-0x1fc363d8>
    1c24:	0b000010 	bleq	1c6c <startup-0x1fffe394>
    1c28:	00017e03 	andeq	r7, r1, r3, lsl #28
    1c2c:	a8030500 	stmdage	r3, {r8, sl}
    1c30:	0f200091 	svceq	0x00200091
    1c34:	00000ebf 			; <UNDEFINED> instruction: 0x00000ebf
    1c38:	017e030c 	cmneq	lr, ip, lsl #6
    1c3c:	03050000 	movweq	r0, #20480	; 0x5000
    1c40:	200091e0 	andcs	r9, r0, r0, ror #3
    1c44:	000efc0f 	andeq	pc, lr, pc, lsl #24
    1c48:	7e030d00 	cdpvc	13, 0, cr0, cr3, cr0, {0}
    1c4c:	05000001 	streq	r0, [r0, #-1]
    1c50:	00921803 	addseq	r1, r2, r3, lsl #16
    1c54:	0f981020 	svceq	0x00981020
    1c58:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    1c5c:	0000009e 	muleq	r0, lr, r0
    1c60:	4fbc0305 	svcmi	0x00bc0305
    1c64:	24102000 	ldrcs	r2, [r0], #-0
    1c68:	0100000e 	tsteq	r0, lr
    1c6c:	00009e0f 	andeq	r9, r0, pc, lsl #28
    1c70:	e8030500 	stmda	r3, {r8, sl}
    1c74:	1020004e 	eorne	r0, r0, lr, asr #32
    1c78:	00000e79 	andeq	r0, r0, r9, ror lr
    1c7c:	009e1001 	addseq	r1, lr, r1
    1c80:	03050000 	movweq	r0, #20480	; 0x5000
    1c84:	20004fe8 	andcs	r4, r0, r8, ror #31
    1c88:	000e1810 	andeq	r1, lr, r0, lsl r8
    1c8c:	9e110100 	muflss	f0, f1, f0
    1c90:	05000000 	streq	r0, [r0, #-0]
    1c94:	004ff803 	subeq	pc, pc, r3, lsl #16
    1c98:	0f191020 	svceq	0x00191020
    1c9c:	12010000 	andne	r0, r1, #0
    1ca0:	0000009e 	muleq	r0, lr, r0
    1ca4:	4f5c0305 	svcmi	0x005c0305
    1ca8:	80102000 	andshi	r2, r0, r0
    1cac:	0100000f 	tsteq	r0, pc
    1cb0:	00009e13 	andeq	r9, r0, r3, lsl lr
    1cb4:	ec030500 	cfstr32	mvfx0, [r3], {-0}
    1cb8:	1020004e 	eorne	r0, r0, lr, asr #32
    1cbc:	00000eb3 			; <UNDEFINED> instruction: 0x00000eb3
    1cc0:	009e1401 	addseq	r1, lr, r1, lsl #8
    1cc4:	03050000 	movweq	r0, #20480	; 0x5000
    1cc8:	20004f84 	andcs	r4, r0, r4, lsl #31
    1ccc:	000f0e10 	andeq	r0, pc, r0, lsl lr	; <UNPREDICTABLE>
    1cd0:	9e150100 	muflss	f0, f5, f0
    1cd4:	05000000 	streq	r0, [r0, #-0]
    1cd8:	004fc003 	subeq	ip, pc, r3
    1cdc:	0fa41020 	svceq	0x00a41020
    1ce0:	16010000 	strne	r0, [r1], -r0
    1ce4:	0000009e 	muleq	r0, lr, r0
    1ce8:	4fac0305 	svcmi	0x00ac0305
    1cec:	db102000 	blle	409cf4 <startup-0x1fbf630c>
    1cf0:	0100000e 	tsteq	r0, lr
    1cf4:	00006218 	andeq	r6, r0, r8, lsl r2
    1cf8:	38030500 	stmdacc	r3, {r8, sl}
    1cfc:	1020004f 	eorne	r0, r0, pc, asr #32
    1d00:	00000e2f 	andeq	r0, r0, pc, lsr #28
    1d04:	00621901 	rsbeq	r1, r2, r1, lsl #18
    1d08:	03050000 	movweq	r0, #20480	; 0x5000
    1d0c:	20004fd0 	ldrdcs	r4, [r0], -r0
    1d10:	000f2410 	andeq	r2, pc, r0, lsl r4	; <UNPREDICTABLE>
    1d14:	621a0100 	andsvs	r0, sl, #0, 2
    1d18:	05000000 	streq	r0, [r0, #-0]
    1d1c:	004f6003 	subeq	r6, pc, r3
    1d20:	0e851020 	cdpeq	0, 8, cr1, cr5, cr0, {1}
    1d24:	1b010000 	blne	41d2c <startup-0x1ffbe2d4>
    1d28:	00000062 	andeq	r0, r0, r2, rrx
    1d2c:	4f2c0305 	svcmi	0x002c0305
    1d30:	69102000 	ldmdbvs	r0, {sp}
    1d34:	0100000e 	tsteq	r0, lr
    1d38:	0000621c 	andeq	r6, r0, ip, lsl r2
    1d3c:	dc030500 	cfstr32le	mvfx0, [r3], {-0}
    1d40:	1020004f 	eorne	r0, r0, pc, asr #32
    1d44:	00000f32 	andeq	r0, r0, r2, lsr pc
    1d48:	00621d01 	rsbeq	r1, r2, r1, lsl #26
    1d4c:	03050000 	movweq	r0, #20480	; 0x5000
    1d50:	20004f78 	andcs	r4, r0, r8, ror pc
    1d54:	000f4110 	andeq	r4, pc, r0, lsl r1	; <UNPREDICTABLE>
    1d58:	621e0100 	andsvs	r0, lr, #0, 2
    1d5c:	05000000 	streq	r0, [r0, #-0]
    1d60:	004f6c03 	subeq	r6, pc, r3, lsl #24
    1d64:	0e591020 	cdpeq	0, 5, cr1, cr9, cr0, {1}
    1d68:	1f010000 	svcne	0x00010000
    1d6c:	00000062 	andeq	r0, r0, r2, rrx
    1d70:	4f440305 	svcmi	0x00440305
    1d74:	bc102000 	ldclt	0, cr2, [r0], {-0}
    1d78:	0100000f 	tsteq	r0, pc
    1d7c:	00006220 	andeq	r6, r0, r0, lsr #4
    1d80:	b0030500 	andlt	r0, r3, r0, lsl #10
    1d84:	1020004f 	eorne	r0, r0, pc, asr #32
    1d88:	00000e3e 	andeq	r0, r0, lr, lsr lr
    1d8c:	014c2301 	cmpeq	ip, r1, lsl #6
    1d90:	03050000 	movweq	r0, #20480	; 0x5000
    1d94:	20004f88 	andcs	r4, r0, r8, lsl #31
    1d98:	000f8c10 	andeq	r8, pc, r0, lsl ip	; <UNPREDICTABLE>
    1d9c:	a4240100 	strtge	r0, [r4], #-256	; 0xffffff00
    1da0:	05000000 	streq	r0, [r0, #-0]
    1da4:	004fc403 	subeq	ip, pc, r3, lsl #8
    1da8:	101c1020 	andsne	r1, ip, r0, lsr #32
    1dac:	25010000 	strcs	r0, [r1, #-0]
    1db0:	000000a4 	andeq	r0, r0, r4, lsr #1
    1db4:	4f200305 	svcmi	0x00200305
    1db8:	a7102000 	ldrge	r2, [r0, -r0]
    1dbc:	0100000e 	tsteq	r0, lr
    1dc0:	0000a426 	andeq	sl, r0, r6, lsr #8
    1dc4:	ec030500 	cfstr32	mvfx0, [r3], {-0}
    1dc8:	1020004f 	eorne	r0, r0, pc, asr #32
    1dcc:	00000f74 	andeq	r0, r0, r4, ror pc
    1dd0:	00a42701 	adceq	r2, r4, r1, lsl #14
    1dd4:	03050000 	movweq	r0, #20480	; 0x5000
    1dd8:	20004f50 	andcs	r4, r0, r0, asr pc
    1ddc:	0000a40b 	andeq	sl, r0, fp, lsl #8
    1de0:	0003c500 	andeq	ip, r3, r0, lsl #10
    1de4:	018e0e00 	orreq	r0, lr, r0, lsl #28
    1de8:	00030000 	andeq	r0, r3, r0
    1dec:	000fb010 	andeq	fp, pc, r0, lsl r0	; <UNPREDICTABLE>
    1df0:	b5280100 	strlt	r0, [r8, #-256]!	; 0xffffff00
    1df4:	05000003 	streq	r0, [r0, #-3]
    1df8:	004ef003 	subeq	pc, lr, r3
    1dfc:	0ed01120 	cdpeq	1, 13, cr1, cr0, cr0, {1}
    1e00:	4c010000 	stcmi	0, cr0, [r1], {-0}
    1e04:	200022dc 	ldrdcs	r2, [r0], -ip
    1e08:	000000f8 	strdeq	r0, [r0], -r8
    1e0c:	040b9c01 	streq	r9, [fp], #-3073	; 0xfffff3ff
    1e10:	3e120000 	cdpcc	0, 1, cr0, cr2, cr0, {0}
    1e14:	0100000e 	tsteq	r0, lr
    1e18:	0001624c 	andeq	r6, r1, ip, asr #4
    1e1c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1e20:	0009090f 	andeq	r0, r9, pc, lsl #18
    1e24:	2e4d0100 	dvfcse	f0, f5, f0
    1e28:	05000001 	streq	r0, [r0, #-1]
    1e2c:	00925003 	addseq	r5, r2, r3
    1e30:	a9130020 	ldmdbge	r3, {r5}
    1e34:	01000004 	tsteq	r0, r4
    1e38:	00219c29 	eoreq	r9, r1, r9, lsr #24
    1e3c:	00014020 	andeq	r4, r1, r0, lsr #32
    1e40:	0f9c0100 	svceq	0x009c0100
    1e44:	00000daa 	andeq	r0, r0, sl, lsr #27
    1e48:	009e2b01 	addseq	r2, lr, r1, lsl #22
    1e4c:	91020000 	mrsls	r0, (UNDEF: 2)
    1e50:	0db40f74 	ldceq	15, cr0, [r4, #464]!	; 0x1d0
    1e54:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    1e58:	0000009e 	muleq	r0, lr, r0
    1e5c:	0f709102 	svceq	0x00709102
    1e60:	00000baa 	andeq	r0, r0, sl, lsr #23
    1e64:	009e3101 	addseq	r3, lr, r1, lsl #2
    1e68:	91020000 	mrsls	r0, (UNDEF: 2)
    1e6c:	0acb0f6c 	beq	ff2c5c24 <firstTime.4040+0xdf2b6768>
    1e70:	35010000 	strcc	r0, [r1, #-0]
    1e74:	0000009e 	muleq	r0, lr, r0
    1e78:	0f689102 	svceq	0x00689102
    1e7c:	00000dd4 	ldrdeq	r0, [r0], -r4
    1e80:	009e3801 	addseq	r3, lr, r1, lsl #16
    1e84:	91020000 	mrsls	r0, (UNDEF: 2)
    1e88:	0b680f64 	bleq	1a05c20 <startup-0x1e5fa3e0>
    1e8c:	3b010000 	blcc	41e94 <startup-0x1ffbe16c>
    1e90:	0000009e 	muleq	r0, lr, r0
    1e94:	0f609102 	svceq	0x00609102
    1e98:	00000d80 	andeq	r0, r0, r0, lsl #27
    1e9c:	009e4001 	addseq	r4, lr, r1
    1ea0:	91020000 	mrsls	r0, (UNDEF: 2)
    1ea4:	0dde0f5c 	ldcleq	15, cr0, [lr, #368]	; 0x170
    1ea8:	43010000 	movwmi	r0, #4096	; 0x1000
    1eac:	0000009e 	muleq	r0, lr, r0
    1eb0:	0f589102 	svceq	0x00589102
    1eb4:	00000de8 	andeq	r0, r0, r8, ror #27
    1eb8:	009e4601 	addseq	r4, lr, r1, lsl #12
    1ebc:	91020000 	mrsls	r0, (UNDEF: 2)
    1ec0:	46000054 			; <UNDEFINED> instruction: 0x46000054
    1ec4:	04000005 	streq	r0, [r0], #-5
    1ec8:	00066c00 	andeq	r6, r6, r0, lsl #24
    1ecc:	9f010400 	svcls	0x00010400
    1ed0:	0c000000 	stceq	0, cr0, [r0], {-0}
    1ed4:	0000110f 	andeq	r1, r0, pc, lsl #2
    1ed8:	200023d4 	ldrdcs	r2, [r0], -r4
    1edc:	00000370 	andeq	r0, r0, r0, ror r3
    1ee0:	00000a29 	andeq	r0, r0, r9, lsr #20
    1ee4:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
    1ee8:	0000004e 	andeq	r0, r0, lr, asr #32
    1eec:	00035b03 	andeq	r5, r3, r3, lsl #22
    1ef0:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
    1ef4:	00000000 	andeq	r0, r0, r0
    1ef8:	00071903 	andeq	r1, r7, r3, lsl #18
    1efc:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
    1f00:	04000000 	streq	r0, [r0], #-0
    1f04:	00192403 	andseq	r2, r9, r3, lsl #8
    1f08:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
    1f0c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1f10:	07040400 	streq	r0, [r4, -r0, lsl #8]
    1f14:	00000389 	andeq	r0, r0, r9, lsl #7
    1f18:	005b0405 	subseq	r0, fp, r5, lsl #8
    1f1c:	01040000 	mrseq	r0, (UNDEF: 4)
    1f20:	0004d308 	andeq	sp, r4, r8, lsl #6
    1f24:	1a760600 	bne	1d8372c <startup-0x1e27c8d4>
    1f28:	0a020000 	beq	81f30 <startup-0x1ff7e0d0>
    1f2c:	00000021 	andeq	r0, r0, r1, lsr #32
    1f30:	00003407 	andeq	r3, r0, r7, lsl #8
    1f34:	06030c00 	streq	r0, [r3], -r0, lsl #24
    1f38:	0000009e 	muleq	r0, lr, r0
    1f3c:	0005c903 	andeq	ip, r5, r3, lsl #18
    1f40:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
    1f44:	00000000 	andeq	r0, r0, r0
    1f48:	00003b03 	andeq	r3, r0, r3, lsl #22
    1f4c:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
    1f50:	04000000 	streq	r0, [r0], #-0
    1f54:	00003003 	andeq	r3, r0, r3
    1f58:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
    1f5c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1f60:	62040500 	andvs	r0, r4, #0, 10
    1f64:	06000000 	streq	r0, [r0], -r0
    1f68:	00001634 	andeq	r1, r0, r4, lsr r6
    1f6c:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
    1f70:	de070000 	cdple	0, 0, cr0, cr7, cr0, {0}
    1f74:	24000006 	strcs	r0, [r0], #-6
    1f78:	01280604 			; <UNDEFINED> instruction: 0x01280604
    1f7c:	61030000 	mrsvs	r0, (UNDEF: 3)
    1f80:	04000004 	streq	r0, [r0], #-4
    1f84:	00012807 	andeq	r2, r1, r7, lsl #16
    1f88:	ea030000 	b	c1f90 <startup-0x1ff3e070>
    1f8c:	04000006 	streq	r0, [r0], #-6
    1f90:	00012e08 	andeq	r2, r1, r8, lsl #28
    1f94:	3a030400 	bcc	c2f9c <startup-0x1ff3d064>
    1f98:	04000006 	streq	r0, [r0], #-6
    1f9c:	00012e09 	andeq	r2, r1, r9, lsl #28
    1fa0:	66030800 	strvs	r0, [r3], -r0, lsl #16
    1fa4:	04000006 	streq	r0, [r0], #-6
    1fa8:	0001460c 	andeq	r4, r1, ip, lsl #12
    1fac:	42030c00 	andmi	r0, r3, #0, 24
    1fb0:	04000003 	streq	r0, [r0], #-3
    1fb4:	0001460d 	andeq	r4, r1, sp, lsl #12
    1fb8:	73031000 	movwvc	r1, #12288	; 0x3000
    1fbc:	04000004 	streq	r0, [r0], #-4
    1fc0:	00012e10 	andeq	r2, r1, r0, lsl lr
    1fc4:	70031400 	andvc	r1, r3, r0, lsl #8
    1fc8:	04000000 	streq	r0, [r0], #-0
    1fcc:	00012e11 	andeq	r2, r1, r1, lsl lr
    1fd0:	d9031800 	stmdble	r3, {fp, ip}
    1fd4:	04000003 	streq	r0, [r0], #-3
    1fd8:	00012e12 	andeq	r2, r1, r2, lsl lr
    1fdc:	e9031c00 	stmdb	r3, {sl, fp, ip}
    1fe0:	04000003 	streq	r0, [r0], #-3
    1fe4:	00012e13 	andeq	r2, r1, r3, lsl lr
    1fe8:	05002000 	streq	r2, [r0, #-0]
    1fec:	0000a404 	andeq	sl, r0, r4, lsl #8
    1ff0:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
    1ff4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1ff8:	00014009 	andeq	r4, r1, r9
    1ffc:	01400a00 	cmpeq	r0, r0, lsl #20
    2000:	05000000 	streq	r0, [r0, #-0]
    2004:	0000af04 	andeq	sl, r0, r4, lsl #30
    2008:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
    200c:	06000001 	streq	r0, [r0], -r1
    2010:	000006df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2014:	00af1504 	adceq	r1, pc, r4, lsl #10
    2018:	620b0000 	andvs	r0, fp, #0
    201c:	62000001 	andvs	r0, r0, #1
    2020:	0c000001 	stceq	0, cr0, [r0], {1}
    2024:	4c040500 	cfstr32mi	mvfx0, [r4], {-0}
    2028:	0d000001 	stceq	0, cr0, [r0, #-4]
    202c:	00000556 	andeq	r0, r0, r6, asr r5
    2030:	01571c04 	cmpeq	r7, r4, lsl #24
    2034:	240d0000 	strcs	r0, [sp], #-0
    2038:	04000004 	streq	r0, [r0], #-4
    203c:	00012e1d 	andeq	r2, r1, sp, lsl lr
    2040:	07020400 	streq	r0, [r2, -r0, lsl #8]
    2044:	00000383 	andeq	r0, r0, r3, lsl #7
    2048:	00005b0b 	andeq	r5, r0, fp, lsl #22
    204c:	00019500 	andeq	r9, r1, r0, lsl #10
    2050:	01950e00 	orrseq	r0, r5, r0, lsl #28
    2054:	00350000 	eorseq	r0, r5, r0
    2058:	06070404 	streq	r0, [r7], -r4, lsl #8
    205c:	0f000004 	svceq	0x00000004
    2060:	00000e47 	andeq	r0, r0, r7, asr #28
    2064:	01850305 	orreq	r0, r5, r5, lsl #6
    2068:	03050000 	movweq	r0, #20480	; 0x5000
    206c:	20009254 	andcs	r9, r0, r4, asr r2
    2070:	000ff90f 	andeq	pc, pc, pc, lsl #18
    2074:	85030600 	strhi	r0, [r3, #-1536]	; 0xfffffa00
    2078:	05000001 	streq	r0, [r0, #-1]
    207c:	00928c03 	addseq	r8, r2, r3, lsl #24
    2080:	0f510f20 	svceq	0x00510f20
    2084:	03070000 	movweq	r0, #28672	; 0x7000
    2088:	00000185 	andeq	r0, r0, r5, lsl #3
    208c:	92c40305 	sbcls	r0, r4, #335544320	; 0x14000000
    2090:	ea0f2000 	b	3ca098 <startup-0x1fc35f68>
    2094:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    2098:	00018503 	andeq	r8, r1, r3, lsl #10
    209c:	fc030500 	stc2	5, cr0, [r3], {-0}
    20a0:	0f200092 	svceq	0x00200092
    20a4:	00000f63 	andeq	r0, r0, r3, ror #30
    20a8:	01850309 	orreq	r0, r5, r9, lsl #6
    20ac:	03050000 	movweq	r0, #20480	; 0x5000
    20b0:	20009334 	andcs	r9, r0, r4, lsr r3
    20b4:	000e950f 	andeq	r9, lr, pc, lsl #10
    20b8:	85030a00 	strhi	r0, [r3, #-2560]	; 0xfffff600
    20bc:	05000001 	streq	r0, [r0, #-1]
    20c0:	00936c03 	addseq	r6, r3, r3, lsl #24
    20c4:	100a0f20 	andne	r0, sl, r0, lsr #30
    20c8:	030b0000 	movweq	r0, #45056	; 0xb000
    20cc:	00000185 	andeq	r0, r0, r5, lsl #3
    20d0:	93a40305 			; <UNDEFINED> instruction: 0x93a40305
    20d4:	bf0f2000 	svclt	0x000f2000
    20d8:	0c00000e 	stceq	0, cr0, [r0], {14}
    20dc:	00018503 	andeq	r8, r1, r3, lsl #10
    20e0:	dc030500 	cfstr32le	mvfx0, [r3], {-0}
    20e4:	0f200093 	svceq	0x00200093
    20e8:	00000efc 	strdeq	r0, [r0], -ip
    20ec:	0185030d 	orreq	r0, r5, sp, lsl #6
    20f0:	03050000 	movweq	r0, #20480	; 0x5000
    20f4:	20009414 	andcs	r9, r0, r4, lsl r4
    20f8:	0010ae10 	andseq	sl, r0, r0, lsl lr
    20fc:	9e120100 	muflss	f0, f2, f0
    2100:	05000000 	streq	r0, [r0, #-0]
    2104:	00504003 	subseq	r4, r0, r3
    2108:	10791020 	rsbsne	r1, r9, r0, lsr #32
    210c:	13010000 	movwne	r0, #4096	; 0x1000
    2110:	0000009e 	muleq	r0, lr, r0
    2114:	50d80305 	sbcspl	r0, r8, r5, lsl #6
    2118:	3b102000 	blcc	40a120 <startup-0x1fbf5ee0>
    211c:	01000011 	tsteq	r0, r1, lsl r0
    2120:	00009e14 	andeq	r9, r0, r4, lsl lr
    2124:	b0030500 	andlt	r0, r3, r0, lsl #10
    2128:	10200050 	eorne	r0, r0, r0, asr r0
    212c:	000010fb 	strdeq	r1, [r0], -fp
    2130:	009e1501 	addseq	r1, lr, r1, lsl #10
    2134:	03050000 	movweq	r0, #20480	; 0x5000
    2138:	200050bc 	strhcs	r5, [r0], -ip
    213c:	00107010 	andseq	r7, r0, r0, lsl r0
    2140:	9e160100 	muflss	f0, f6, f0
    2144:	05000000 	streq	r0, [r0, #-0]
    2148:	00502c03 	subseq	r2, r0, r3, lsl #24
    214c:	104a1020 	subne	r1, sl, r0, lsr #32
    2150:	17010000 	strne	r0, [r1, -r0]
    2154:	0000009e 	muleq	r0, lr, r0
    2158:	50b40305 	adcspl	r0, r4, r5, lsl #6
    215c:	62102000 	andsvs	r2, r0, #0
    2160:	01000010 	tsteq	r0, r0, lsl r0
    2164:	00009e18 	andeq	r9, r0, r8, lsl lr
    2168:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
    216c:	10200050 	eorne	r0, r0, r0, asr r0
    2170:	000010cc 	andeq	r1, r0, ip, asr #1
    2174:	009e1901 	addseq	r1, lr, r1, lsl #18
    2178:	03050000 	movweq	r0, #20480	; 0x5000
    217c:	200050e8 	andcs	r5, r0, r8, ror #1
    2180:	0010e310 	andseq	lr, r0, r0, lsl r3
    2184:	9e1a0100 	muflse	f0, f2, f0
    2188:	05000000 	streq	r0, [r0, #-0]
    218c:	0050b803 	subseq	fp, r0, r3, lsl #16
    2190:	114c1020 	cmpne	ip, r0, lsr #32
    2194:	1c010000 	stcne	0, cr0, [r1], {-0}
    2198:	00000062 	andeq	r0, r0, r2, rrx
    219c:	50cc0305 	sbcpl	r0, ip, r5, lsl #6
    21a0:	82102000 	andshi	r2, r0, #0
    21a4:	01000010 	tsteq	r0, r0, lsl r0
    21a8:	0000621d 	andeq	r6, r0, sp, lsl r2
    21ac:	44030500 	strmi	r0, [r3], #-1280	; 0xfffffb00
    21b0:	10200050 	eorne	r0, r0, r0, asr r0
    21b4:	000010a2 	andeq	r1, r0, r2, lsr #1
    21b8:	00621e01 	rsbeq	r1, r2, r1, lsl #28
    21bc:	03050000 	movweq	r0, #20480	; 0x5000
    21c0:	20005104 	andcs	r5, r0, r4, lsl #2
    21c4:	0010f710 	andseq	pc, r0, r0, lsl r7	; <UNPREDICTABLE>
    21c8:	621f0100 	andsvs	r0, pc, #0, 2
    21cc:	05000000 	streq	r0, [r0, #-0]
    21d0:	00508c03 	subseq	r8, r0, r3, lsl #24
    21d4:	10461020 	subne	r1, r6, r0, lsr #32
    21d8:	20010000 	andcs	r0, r1, r0
    21dc:	00000062 	andeq	r0, r0, r2, rrx
    21e0:	50f80305 	rscspl	r0, r8, r5, lsl #6
    21e4:	6c102000 	ldcvs	0, cr2, [r0], {-0}
    21e8:	01000010 	tsteq	r0, r0, lsl r0
    21ec:	00006221 	andeq	r6, r0, r1, lsr #4
    21f0:	30030500 	andcc	r0, r3, r0, lsl #10
    21f4:	10200050 	eorne	r0, r0, r0, asr r0
    21f8:	0000105e 	andeq	r1, r0, lr, asr r0
    21fc:	00622201 	rsbeq	r2, r2, r1, lsl #4
    2200:	03050000 	movweq	r0, #20480	; 0x5000
    2204:	200050dc 	ldrdcs	r5, [r0], -ip
    2208:	0010df10 	andseq	sp, r0, r0, lsl pc
    220c:	62230100 	eorvs	r0, r3, #0, 2
    2210:	05000000 	streq	r0, [r0, #-0]
    2214:	00505003 	subseq	r5, r0, r3
    2218:	10c81020 	sbcne	r1, r8, r0, lsr #32
    221c:	24010000 	strcs	r0, [r1], #-0
    2220:	00000062 	andeq	r0, r0, r2, rrx
    2224:	50c00305 	sbcpl	r0, r0, r5, lsl #6
    2228:	45102000 	ldrmi	r2, [r0, #-0]
    222c:	01000011 	tsteq	r0, r1, lsl r0
    2230:	00014c27 	andeq	r4, r1, r7, lsr #24
    2234:	fc030500 	stc2	5, cr0, [r3], {-0}
    2238:	1020004f 	eorne	r0, r0, pc, asr #32
    223c:	0000103c 	andeq	r1, r0, ip, lsr r0
    2240:	00a42801 	adceq	r2, r4, r1, lsl #16
    2244:	03050000 	movweq	r0, #20480	; 0x5000
    2248:	200050a4 	andcs	r5, r0, r4, lsr #1
    224c:	00110510 	andseq	r0, r1, r0, lsl r5
    2250:	a4290100 	strtge	r0, [r9], #-256	; 0xffffff00
    2254:	05000000 	streq	r0, [r0, #-0]
    2258:	00502003 	subseq	r2, r0, r3
    225c:	10d51020 	sbcsne	r1, r5, r0, lsr #32
    2260:	2a010000 	bcs	42268 <startup-0x1ffbdd98>
    2264:	000000a4 	andeq	r0, r0, r4, lsr #1
    2268:	50980305 	addspl	r0, r8, r5, lsl #6
    226c:	32102000 	andscc	r2, r0, #0
    2270:	01000010 	tsteq	r0, r0, lsl r0
    2274:	0000a42b 	andeq	sl, r0, fp, lsr #8
    2278:	ec030500 	cfstr32	mvfx0, [r3], {-0}
    227c:	0b200050 	bleq	8023c4 <startup-0x1f7fdc3c>
    2280:	000000a4 	andeq	r0, r0, r4, lsr #1
    2284:	000003cc 	andeq	r0, r0, ip, asr #7
    2288:	0001950e 	andeq	r9, r1, lr, lsl #10
    228c:	10000300 	andne	r0, r0, r0, lsl #6
    2290:	0000108f 	andeq	r1, r0, pc, lsl #1
    2294:	03bc2c01 			; <UNDEFINED> instruction: 0x03bc2c01
    2298:	03050000 	movweq	r0, #20480	; 0x5000
    229c:	2000505c 	andcs	r5, r0, ip, asr r0
    22a0:	0011590f 	andseq	r5, r1, pc, lsl #18
    22a4:	2e6b0100 	powcse	f0, f3, f0
    22a8:	05000001 	streq	r0, [r0, #-1]
    22ac:	00498403 	subeq	r8, r9, r3, lsl #8
    22b0:	10b80f20 	adcsne	r0, r8, r0, lsr #30
    22b4:	6c010000 	stcvs	0, cr0, [r1], {-0}
    22b8:	0000012e 	andeq	r0, r0, lr, lsr #2
    22bc:	49880305 	stmibmi	r8, {r0, r2, r8, r9}
    22c0:	ed112000 	ldc	0, cr2, [r1, #-0]
    22c4:	01000010 	tsteq	r0, r0, lsl r0
    22c8:	00263474 	eoreq	r3, r6, r4, ror r4
    22cc:	00011020 	andeq	r1, r1, r0, lsr #32
    22d0:	569c0100 	ldrpl	r0, [ip], r0, lsl #2
    22d4:	12000004 	andne	r0, r0, #4
    22d8:	00000782 	andeq	r0, r0, r2, lsl #15
    22dc:	01627401 	cmneq	r2, r1, lsl #8
    22e0:	91020000 	mrsls	r0, (UNDEF: 2)
    22e4:	03f30f74 	mvnseq	r0, #116, 30	; 0x1d0
    22e8:	76010000 	strvc	r0, [r1], -r0
    22ec:	0000012e 	andeq	r0, r0, lr, lsr #2
    22f0:	498c0305 	stmibmi	ip, {r0, r2, r8, r9}
    22f4:	280f2000 	stmdacs	pc, {sp}	; <UNPREDICTABLE>
    22f8:	01000010 	tsteq	r0, r0, lsl r0
    22fc:	00012e77 	andeq	r2, r1, r7, ror lr
    2300:	50030500 	andpl	r0, r3, r0, lsl #10
    2304:	0f200094 	svceq	0x00200094
    2308:	00001054 	andeq	r1, r0, r4, asr r0
    230c:	012e7801 			; <UNDEFINED> instruction: 0x012e7801
    2310:	03050000 	movweq	r0, #20480	; 0x5000
    2314:	20004990 	mulcs	r0, r0, r9
    2318:	11691300 	cmnne	r9, r0, lsl #6
    231c:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    2320:	2000260c 	andcs	r2, r0, ip, lsl #12
    2324:	00000028 	andeq	r0, r0, r8, lsr #32
    2328:	04849c01 	streq	r9, [r4], #3073	; 0xc01
    232c:	78140000 	ldmdavc	r4, {}	; <UNPREDICTABLE>
    2330:	2e6e0100 	powcse	f0, f6, f0
    2334:	02000001 	andeq	r0, r0, #1
    2338:	79147491 	ldmdbvc	r4, {r0, r4, r7, sl, ip, sp, lr}
    233c:	2e6e0100 	powcse	f0, f6, f0
    2340:	02000001 	andeq	r0, r0, #1
    2344:	11007091 	swpne	r7, r1, [r0]
    2348:	00001099 	muleq	r0, r9, r0
    234c:	25145001 	ldrcs	r5, [r4, #-1]
    2350:	00f82000 	rscseq	r2, r8, r0
    2354:	9c010000 	stcls	0, cr0, [r1], {-0}
    2358:	000004b9 			; <UNDEFINED> instruction: 0x000004b9
    235c:	00114512 	andseq	r4, r1, r2, lsl r5
    2360:	62500100 	subsvs	r0, r0, #0, 2
    2364:	02000001 	andeq	r0, r0, #1
    2368:	090f6c91 	stmdbeq	pc, {r0, r4, r7, sl, fp, sp, lr}	; <UNPREDICTABLE>
    236c:	01000009 	tsteq	r0, r9
    2370:	00012e51 	andeq	r2, r1, r1, asr lr
    2374:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
    2378:	00200094 	mlaeq	r0, r4, r0, r0
    237c:	0004a915 	andeq	sl, r4, r5, lsl r9
    2380:	d42d0100 	strtle	r0, [sp], #-256	; 0xffffff00
    2384:	40200023 	eormi	r0, r0, r3, lsr #32
    2388:	01000001 	tsteq	r0, r1
    238c:	0daa0f9c 	stceq	15, cr0, [sl, #624]!	; 0x270
    2390:	2f010000 	svccs	0x00010000
    2394:	0000009e 	muleq	r0, lr, r0
    2398:	0f749102 	svceq	0x00749102
    239c:	00000db4 			; <UNDEFINED> instruction: 0x00000db4
    23a0:	009e3201 	addseq	r3, lr, r1, lsl #4
    23a4:	91020000 	mrsls	r0, (UNDEF: 2)
    23a8:	0baa0f70 	bleq	fea86170 <firstTime.4040+0xdea76cb4>
    23ac:	35010000 	strcc	r0, [r1, #-0]
    23b0:	0000009e 	muleq	r0, lr, r0
    23b4:	0f6c9102 	svceq	0x006c9102
    23b8:	00000acb 	andeq	r0, r0, fp, asr #21
    23bc:	009e3901 	addseq	r3, lr, r1, lsl #18
    23c0:	91020000 	mrsls	r0, (UNDEF: 2)
    23c4:	0dd40f68 	ldcleq	15, cr0, [r4, #416]	; 0x1a0
    23c8:	3c010000 	stccc	0, cr0, [r1], {-0}
    23cc:	0000009e 	muleq	r0, lr, r0
    23d0:	0f649102 	svceq	0x00649102
    23d4:	00000b68 	andeq	r0, r0, r8, ror #22
    23d8:	009e3f01 	addseq	r3, lr, r1, lsl #30
    23dc:	91020000 	mrsls	r0, (UNDEF: 2)
    23e0:	0d800f60 	stceq	15, cr0, [r0, #384]	; 0x180
    23e4:	44010000 	strmi	r0, [r1], #-0
    23e8:	0000009e 	muleq	r0, lr, r0
    23ec:	0f5c9102 	svceq	0x005c9102
    23f0:	00000dde 	ldrdeq	r0, [r0], -lr
    23f4:	009e4701 	addseq	r4, lr, r1, lsl #14
    23f8:	91020000 	mrsls	r0, (UNDEF: 2)
    23fc:	0de80f58 	stcleq	15, cr0, [r8, #352]!	; 0x160
    2400:	4a010000 	bmi	42408 <startup-0x1ffbdbf8>
    2404:	0000009e 	muleq	r0, lr, r0
    2408:	00549102 	subseq	r9, r4, r2, lsl #2
    240c:	00055b00 	andeq	r5, r5, r0, lsl #22
    2410:	95000400 	strls	r0, [r0, #-1024]	; 0xfffffc00
    2414:	04000007 	streq	r0, [r0], #-7
    2418:	00009f01 	andeq	r9, r0, r1, lsl #30
    241c:	13b30c00 			; <UNDEFINED> instruction: 0x13b30c00
    2420:	27440000 	strbcs	r0, [r4, -r0]
    2424:	02ac2000 	adceq	r2, ip, #0
    2428:	0bb00000 	bleq	fec02430 <firstTime.4040+0xdebf2f74>
    242c:	0c020000 	stceq	0, cr0, [r2], {-0}
    2430:	004e0502 	subeq	r0, lr, r2, lsl #10
    2434:	5b030000 	blpl	c243c <startup-0x1ff3dbc4>
    2438:	02000003 	andeq	r0, r0, #3
    243c:	00004e07 	andeq	r4, r0, r7, lsl #28
    2440:	19030000 	stmdbne	r3, {}	; <UNPREDICTABLE>
    2444:	02000007 	andeq	r0, r0, #7
    2448:	00004e08 	andeq	r4, r0, r8, lsl #28
    244c:	24030400 	strcs	r0, [r3], #-1024	; 0xfffffc00
    2450:	02000019 	andeq	r0, r0, #25
    2454:	00005509 	andeq	r5, r0, r9, lsl #10
    2458:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    245c:	03890704 	orreq	r0, r9, #4, 14	; 0x100000
    2460:	04050000 	streq	r0, [r5], #-0
    2464:	0000005b 	andeq	r0, r0, fp, asr r0
    2468:	d3080104 	movwle	r0, #33028	; 0x8104
    246c:	06000004 	streq	r0, [r0], -r4
    2470:	00001a76 	andeq	r1, r0, r6, ror sl
    2474:	00210a02 	eoreq	r0, r1, r2, lsl #20
    2478:	34070000 	strcc	r0, [r7], #-0
    247c:	0c000000 	stceq	0, cr0, [r0], {-0}
    2480:	009e0603 	addseq	r0, lr, r3, lsl #12
    2484:	c9030000 	stmdbgt	r3, {}	; <UNPREDICTABLE>
    2488:	03000005 	movweq	r0, #5
    248c:	00009e07 	andeq	r9, r0, r7, lsl #28
    2490:	3b030000 	blcc	c2498 <startup-0x1ff3db68>
    2494:	03000000 	movweq	r0, #0
    2498:	00009e08 	andeq	r9, r0, r8, lsl #28
    249c:	30030400 	andcc	r0, r3, r0, lsl #8
    24a0:	03000000 	movweq	r0, #0
    24a4:	00009e09 	andeq	r9, r0, r9, lsl #28
    24a8:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    24ac:	00006204 	andeq	r6, r0, r4, lsl #4
    24b0:	16340600 	ldrtne	r0, [r4], -r0, lsl #12
    24b4:	0a030000 	beq	c24bc <startup-0x1ff3db44>
    24b8:	0000006d 	andeq	r0, r0, sp, rrx
    24bc:	0006de07 	andeq	sp, r6, r7, lsl #28
    24c0:	06042400 	streq	r2, [r4], -r0, lsl #8
    24c4:	00000128 	andeq	r0, r0, r8, lsr #2
    24c8:	00046103 	andeq	r6, r4, r3, lsl #2
    24cc:	28070400 	stmdacs	r7, {sl}
    24d0:	00000001 	andeq	r0, r0, r1
    24d4:	0006ea03 	andeq	lr, r6, r3, lsl #20
    24d8:	2e080400 	cfcpyscs	mvf0, mvf8
    24dc:	04000001 	streq	r0, [r0], #-1
    24e0:	00063a03 	andeq	r3, r6, r3, lsl #20
    24e4:	2e090400 	cfcpyscs	mvf0, mvf9
    24e8:	08000001 	stmdaeq	r0, {r0}
    24ec:	00066603 	andeq	r6, r6, r3, lsl #12
    24f0:	460c0400 	strmi	r0, [ip], -r0, lsl #8
    24f4:	0c000001 	stceq	0, cr0, [r0], {1}
    24f8:	00034203 	andeq	r4, r3, r3, lsl #4
    24fc:	460d0400 	strmi	r0, [sp], -r0, lsl #8
    2500:	10000001 	andne	r0, r0, r1
    2504:	00047303 	andeq	r7, r4, r3, lsl #6
    2508:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
    250c:	14000001 	strne	r0, [r0], #-1
    2510:	00007003 	andeq	r7, r0, r3
    2514:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
    2518:	18000001 	stmdane	r0, {r0}
    251c:	0003d903 	andeq	sp, r3, r3, lsl #18
    2520:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
    2524:	1c000001 	stcne	0, cr0, [r0], {1}
    2528:	0003e903 	andeq	lr, r3, r3, lsl #18
    252c:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
    2530:	20000001 	andcs	r0, r0, r1
    2534:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    2538:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    253c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2540:	40090074 	andmi	r0, r9, r4, ror r0
    2544:	0a000001 	beq	2550 <startup-0x1fffdab0>
    2548:	00000140 	andeq	r0, r0, r0, asr #2
    254c:	af040500 	svcge	0x00040500
    2550:	05000000 	streq	r0, [r0, #-0]
    2554:	00013504 	andeq	r3, r1, r4, lsl #10
    2558:	06df0600 	ldrbeq	r0, [pc], r0, lsl #12
    255c:	15040000 	strne	r0, [r4, #-0]
    2560:	000000af 	andeq	r0, r0, pc, lsr #1
    2564:	0001620b 	andeq	r6, r1, fp, lsl #4
    2568:	00016200 	andeq	r6, r1, r0, lsl #4
    256c:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    2570:	00014c04 	andeq	r4, r1, r4, lsl #24
    2574:	05560d00 	ldrbeq	r0, [r6, #-3328]	; 0xfffff300
    2578:	1c040000 	stcne	0, cr0, [r4], {-0}
    257c:	00000157 	andeq	r0, r0, r7, asr r1
    2580:	0004240d 	andeq	r2, r4, sp, lsl #8
    2584:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
    2588:	0b000001 	bleq	2594 <startup-0x1fffda6c>
    258c:	0000005b 	andeq	r0, r0, fp, asr r0
    2590:	0000018e 	andeq	r0, r0, lr, lsl #3
    2594:	00018e0e 	andeq	r8, r1, lr, lsl #28
    2598:	04007400 	streq	r7, [r0], #-1024	; 0xfffffc00
    259c:	04060704 	streq	r0, [r6], #-1796	; 0xfffff8fc
    25a0:	420f0000 	andmi	r0, pc, #0
    25a4:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    25a8:	00017e03 	andeq	r7, r1, r3, lsl #28
    25ac:	54030500 	strpl	r0, [r3], #-1280	; 0xfffffb00
    25b0:	0f200094 	svceq	0x00200094
    25b4:	0000117b 	andeq	r1, r0, fp, ror r1
    25b8:	017e0306 	cmneq	lr, r6, lsl #6
    25bc:	03050000 	movweq	r0, #20480	; 0x5000
    25c0:	200094cc 	andcs	r9, r0, ip, asr #9
    25c4:	0012380f 	andseq	r3, r2, pc, lsl #16
    25c8:	7e030700 	cdpvc	7, 0, cr0, cr3, cr0, {0}
    25cc:	05000001 	streq	r0, [r0, #-1]
    25d0:	00954403 	addseq	r4, r5, r3, lsl #8
    25d4:	13040f20 	movwne	r0, #20256	; 0x4f20
    25d8:	03080000 	movweq	r0, #32768	; 0x8000
    25dc:	0000017e 	andeq	r0, r0, lr, ror r1
    25e0:	95bc0305 	ldrls	r0, [ip, #773]!	; 0x305
    25e4:	980f2000 	stmdals	pc, {sp}	; <UNPREDICTABLE>
    25e8:	09000011 	stmdbeq	r0, {r0, r4}
    25ec:	00017e03 	andeq	r7, r1, r3, lsl #28
    25f0:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
    25f4:	0f200096 	svceq	0x00200096
    25f8:	000011b8 			; <UNDEFINED> instruction: 0x000011b8
    25fc:	017e030a 	cmneq	lr, sl, lsl #6
    2600:	03050000 	movweq	r0, #20480	; 0x5000
    2604:	200096ac 	andcs	r9, r0, ip, lsr #13
    2608:	0012a90f 	andseq	sl, r2, pc, lsl #18
    260c:	7e030b00 	vmlavc.f64	d0, d3, d0
    2610:	05000001 	streq	r0, [r0, #-1]
    2614:	00972403 	addseq	r2, r7, r3, lsl #8
    2618:	12cd0f20 	sbcne	r0, sp, #32, 30	; 0x80
    261c:	030c0000 	movweq	r0, #49152	; 0xc000
    2620:	0000017e 	andeq	r0, r0, lr, ror r1
    2624:	979c0305 	ldrls	r0, [ip, r5, lsl #6]
    2628:	020f2000 	andeq	r2, pc, #0
    262c:	0d000012 	stceq	0, cr0, [r0, #-72]	; 0xffffffb8
    2630:	00017e03 	andeq	r7, r1, r3, lsl #28
    2634:	14030500 	strne	r0, [r3], #-1280	; 0xfffffb00
    2638:	0f200098 	svceq	0x00200098
    263c:	00001325 	andeq	r1, r0, r5, lsr #6
    2640:	017e030e 	cmneq	lr, lr, lsl #6
    2644:	03050000 	movweq	r0, #20480	; 0x5000
    2648:	2000988c 	andcs	r9, r0, ip, lsl #17
    264c:	0013600f 	andseq	r6, r3, pc
    2650:	7e030f00 	cdpvc	15, 0, cr0, cr3, cr0, {0}
    2654:	05000001 	streq	r0, [r0, #-1]
    2658:	00990403 	addseq	r0, r9, r3, lsl #8
    265c:	12bb0f20 	adcsne	r0, fp, #32, 30	; 0x80
    2660:	03100000 	tsteq	r0, #0
    2664:	0000017e 	andeq	r0, r0, lr, ror r1
    2668:	997c0305 	ldmdbls	ip!, {r0, r2, r8, r9}^
    266c:	8c102000 	ldchi	0, cr2, [r0], {-0}
    2670:	01000011 	tsteq	r0, r1, lsl r0
    2674:	00009e11 	andeq	r9, r0, r1, lsl lr
    2678:	28030500 	stmdacs	r3, {r8, sl}
    267c:	10200052 	eorne	r0, r0, r2, asr r0
    2680:	000012f9 	strdeq	r1, [r0], -r9
    2684:	009e1201 	addseq	r1, lr, r1, lsl #4
    2688:	03050000 	movweq	r0, #20480	; 0x5000
    268c:	200051a0 	andcs	r5, r0, r0, lsr #3
    2690:	00135410 	andseq	r5, r3, r0, lsl r4
    2694:	9e130100 	muflss	f0, f3, f0
    2698:	05000000 	streq	r0, [r0, #-0]
    269c:	0051a403 	subseq	sl, r1, r3, lsl #8
    26a0:	11d61020 	bicsne	r1, r6, r0, lsr #32
    26a4:	14010000 	strne	r0, [r1], #-0
    26a8:	0000009e 	muleq	r0, lr, r0
    26ac:	52500305 	subspl	r0, r0, #335544320	; 0x14000000
    26b0:	a8102000 	ldmdage	r0, {sp}
    26b4:	01000013 	tsteq	r0, r3, lsl r0
    26b8:	00009e15 	andeq	r9, r0, r5, lsl lr
    26bc:	9c030500 	cfstr32ls	mvfx0, [r3], {-0}
    26c0:	10200051 	eorne	r0, r0, r1, asr r0
    26c4:	000013fb 	strdeq	r1, [r0], -fp
    26c8:	009e1601 	addseq	r1, lr, r1, lsl #12
    26cc:	03050000 	movweq	r0, #20480	; 0x5000
    26d0:	20005238 	andcs	r5, r0, r8, lsr r2
    26d4:	00125610 	andseq	r5, r2, r0, lsl r6
    26d8:	9e170100 	muflss	f0, f7, f0
    26dc:	05000000 	streq	r0, [r0, #-0]
    26e0:	00523c03 	subseq	r3, r2, r3, lsl #24
    26e4:	12721020 	rsbsne	r1, r2, #32
    26e8:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    26ec:	0000009e 	muleq	r0, lr, r0
    26f0:	51500305 	cmppl	r0, r5, lsl #6
    26f4:	ca102000 	bgt	40a6fc <startup-0x1fbf5904>
    26f8:	01000011 	tsteq	r0, r1, lsl r0
    26fc:	00009e19 	andeq	r9, r0, r9, lsl lr
    2700:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
    2704:	10200051 	eorne	r0, r0, r1, asr r0
    2708:	000013ef 	andeq	r1, r0, pc, ror #7
    270c:	009e1a01 	addseq	r1, lr, r1, lsl #20
    2710:	03050000 	movweq	r0, #20480	; 0x5000
    2714:	20005224 	andcs	r5, r0, r4, lsr #4
    2718:	00133710 	andseq	r3, r3, r0, lsl r7
    271c:	9e1b0100 	muflse	f0, f3, f0
    2720:	05000000 	streq	r0, [r0, #-0]
    2724:	0051c003 	subseq	ip, r1, r3
    2728:	13711020 	cmnne	r1, #32
    272c:	1c010000 	stcne	0, cr0, [r1], {-0}
    2730:	0000009e 	muleq	r0, lr, r0
    2734:	524c0305 	subpl	r0, ip, #335544320	; 0x14000000
    2738:	16102000 	ldrne	r2, [r0], -r0
    273c:	01000013 	tsteq	r0, r3, lsl r0
    2740:	0000621e 	andeq	r6, r0, lr, lsl r2
    2744:	40030500 	andmi	r0, r3, r0, lsl #10
    2748:	10200052 	eorne	r0, r0, r2, asr r0
    274c:	000011a9 	andeq	r1, r0, r9, lsr #3
    2750:	00621f01 	rsbeq	r1, r2, r1, lsl #30
    2754:	03050000 	movweq	r0, #20480	; 0x5000
    2758:	2000522c 	andcs	r5, r0, ip, lsr #4
    275c:	0013e110 	andseq	lr, r3, r0, lsl r1
    2760:	62200100 	eorvs	r0, r0, #0, 2
    2764:	05000000 	streq	r0, [r0, #-0]
    2768:	00511003 	subseq	r1, r1, r3
    276c:	11e21020 	mvnne	r1, r0, lsr #32
    2770:	21010000 	mrscs	r0, (UNDEF: 1)
    2774:	00000062 	andeq	r0, r0, r2, rrx
    2778:	51900305 	orrspl	r0, r0, r5, lsl #6
    277c:	f2102000 	vhadd.s16	d2, d0, d0
    2780:	01000011 	tsteq	r0, r1, lsl r0
    2784:	00006222 	andeq	r6, r0, r2, lsr #4
    2788:	78030500 	stmdavc	r3, {r8, sl}
    278c:	10200051 	eorne	r0, r0, r1, asr r0
    2790:	0000121d 	andeq	r1, r0, sp, lsl r2
    2794:	00622301 	rsbeq	r2, r2, r1, lsl #6
    2798:	03050000 	movweq	r0, #20480	; 0x5000
    279c:	200051dc 	ldrdcs	r5, [r0], -ip
    27a0:	00139810 	andseq	r9, r3, r0, lsl r8
    27a4:	62240100 	eorvs	r0, r4, #0, 2
    27a8:	05000000 	streq	r0, [r0, #-0]
    27ac:	00521803 	subseq	r1, r2, r3, lsl #16
    27b0:	12621020 	rsbne	r1, r2, #32
    27b4:	25010000 	strcs	r0, [r1, #-0]
    27b8:	00000062 	andeq	r0, r0, r2, rrx
    27bc:	51380305 	teqpl	r8, r5, lsl #6
    27c0:	7d102000 	ldcvc	0, cr2, [r0, #-0]
    27c4:	01000013 	tsteq	r0, r3, lsl r0
    27c8:	00006226 	andeq	r6, r0, r6, lsr #4
    27cc:	84030500 	strhi	r0, [r3], #-1280	; 0xfffffb00
    27d0:	10200051 	eorne	r0, r0, r1, asr r0
    27d4:	0000127d 	andeq	r1, r0, sp, ror r2
    27d8:	00622701 	rsbeq	r2, r2, r1, lsl #14
    27dc:	03050000 	movweq	r0, #20480	; 0x5000
    27e0:	200051a8 	andcs	r5, r0, r8, lsr #3
    27e4:	00128d10 	andseq	r8, r2, r0, lsl sp
    27e8:	62280100 	eorvs	r0, r8, #0, 2
    27ec:	05000000 	streq	r0, [r0, #-0]
    27f0:	00511c03 	subseq	r1, r1, r3, lsl #24
    27f4:	12de1020 	sbcsne	r1, lr, #32
    27f8:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    27fc:	00000062 	andeq	r0, r0, r2, rrx
    2800:	51b40305 			; <UNDEFINED> instruction: 0x51b40305
    2804:	14102000 	ldrne	r2, [r0], #-0
    2808:	01000012 	tsteq	r0, r2, lsl r0
    280c:	00014c2c 	andeq	r4, r1, ip, lsr #24
    2810:	54030500 	strpl	r0, [r3], #-1280	; 0xfffffb00
    2814:	10200051 	eorne	r0, r0, r1, asr r0
    2818:	0000124a 	andeq	r1, r0, sl, asr #4
    281c:	00a42d01 	adceq	r2, r4, r1, lsl #26
    2820:	03050000 	movweq	r0, #20480	; 0x5000
    2824:	200051d0 	ldrdcs	r5, [r0], -r0
    2828:	0012ed10 	andseq	lr, r2, r0, lsl sp
    282c:	a42e0100 	strtge	r0, [lr], #-256	; 0xffffff00
    2830:	05000000 	streq	r0, [r0, #-0]
    2834:	00512803 	subseq	r2, r1, r3, lsl #16
    2838:	129d1020 	addsne	r1, sp, #32
    283c:	2f010000 	svccs	0x00010000
    2840:	000000a4 	andeq	r0, r0, r4, lsr #1
    2844:	51440305 	cmppl	r4, r5, lsl #6
    2848:	2c102000 	ldccs	0, cr2, [r0], {-0}
    284c:	01000012 	tsteq	r0, r2, lsl r0
    2850:	0000a430 	andeq	sl, r0, r0, lsr r4
    2854:	c4030500 	strgt	r0, [r3], #-1280	; 0xfffffb00
    2858:	0b200051 	bleq	8029a4 <startup-0x1f7fd65c>
    285c:	000000a4 	andeq	r0, r0, r4, lsr #1
    2860:	0000045e 	andeq	r0, r0, lr, asr r4
    2864:	00018e0e 	andeq	r8, r1, lr, lsl #28
    2868:	10000300 	andne	r0, r0, r0, lsl #6
    286c:	0000138c 	andeq	r1, r0, ip, lsl #7
    2870:	044e3101 	strbeq	r3, [lr], #-257	; 0xfffffeff
    2874:	03050000 	movweq	r0, #20480	; 0x5000
    2878:	200051e8 	andcs	r5, r0, r8, ror #3
    287c:	0003ce11 	andeq	ip, r3, r1, lsl lr
    2880:	ec5f0100 	ldfe	f0, [pc], {-0}
    2884:	04200028 	strteq	r0, [r0], #-40	; 0xffffffd8
    2888:	01000001 	tsteq	r0, r1
    288c:	0004a49c 	muleq	r4, ip, r4
    2890:	12141200 	andsne	r1, r4, #0, 4
    2894:	5f010000 	svcpl	0x00010000
    2898:	00000162 	andeq	r0, r0, r2, ror #2
    289c:	0f6c9102 	svceq	0x006c9102
    28a0:	00000909 	andeq	r0, r0, r9, lsl #18
    28a4:	012e6001 			; <UNDEFINED> instruction: 0x012e6001
    28a8:	03050000 	movweq	r0, #20480	; 0x5000
    28ac:	200099f4 	strdcs	r9, [r0], -r4
    28b0:	04a91300 	strteq	r1, [r9], #768	; 0x300
    28b4:	32010000 	andcc	r0, r1, #0
    28b8:	20002744 	andcs	r2, r0, r4, asr #14
    28bc:	000001a8 	andeq	r0, r0, r8, lsr #3
    28c0:	aa0f9c01 	bge	3e98cc <startup-0x1fc16734>
    28c4:	0100000d 	tsteq	r0, sp
    28c8:	00009e34 	andeq	r9, r0, r4, lsr lr
    28cc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    28d0:	000db40f 	andeq	fp, sp, pc, lsl #8
    28d4:	9e370100 	rsflss	f0, f7, f0
    28d8:	02000000 	andeq	r0, r0, #0
    28dc:	aa0f7091 	bge	3deb28 <startup-0x1fc214d8>
    28e0:	0100000b 	tsteq	r0, fp
    28e4:	00009e3a 	andeq	r9, r0, sl, lsr lr
    28e8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    28ec:	000acb0f 	andeq	ip, sl, pc, lsl #22
    28f0:	9e3e0100 	rsflse	f0, f6, f0
    28f4:	02000000 	andeq	r0, r0, #0
    28f8:	d40f6891 	strle	r6, [pc], #-2193	; 2900 <startup-0x1fffd700>
    28fc:	0100000d 	tsteq	r0, sp
    2900:	00009e41 	andeq	r9, r0, r1, asr #28
    2904:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2908:	000b680f 	andeq	r6, fp, pc, lsl #16
    290c:	9e440100 	dvflss	f0, f4, f0
    2910:	02000000 	andeq	r0, r0, #0
    2914:	800f6091 	mulhi	pc, r1, r0	; <UNPREDICTABLE>
    2918:	0100000d 	tsteq	r0, sp
    291c:	00009e49 	andeq	r9, r0, r9, asr #28
    2920:	5c910200 	lfmpl	f0, 4, [r1], {0}
    2924:	000dde0f 	andeq	sp, sp, pc, lsl #28
    2928:	9e4c0100 	dvflse	f0, f4, f0
    292c:	02000000 	andeq	r0, r0, #0
    2930:	e80f5891 	stmda	pc, {r0, r4, r7, fp, ip, lr}	; <UNPREDICTABLE>
    2934:	0100000d 	tsteq	r0, sp
    2938:	00009e4f 	andeq	r9, r0, pc, asr #28
    293c:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    2940:	000af10f 	andeq	pc, sl, pc, lsl #2
    2944:	9e530100 	rdflss	f0, f3, f0
    2948:	02000000 	andeq	r0, r0, #0
    294c:	350f5091 	strcc	r5, [pc, #-145]	; 28c3 <startup-0x1fffd73d>
    2950:	0100000b 	tsteq	r0, fp
    2954:	00009e56 	andeq	r9, r0, r6, asr lr
    2958:	4c910200 	lfmmi	f0, 4, [r1], {0}
    295c:	000b3f0f 	andeq	r3, fp, pc, lsl #30
    2960:	9e590100 	rdflse	f0, f1, f0
    2964:	02000000 	andeq	r0, r0, #0
    2968:	00004891 	muleq	r0, r1, r8
    296c:	000007a1 	andeq	r0, r0, r1, lsr #15
    2970:	08950004 	ldmeq	r5, {r2}
    2974:	01040000 	mrseq	r0, (UNDEF: 4)
    2978:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    297c:	0014590c 	andseq	r5, r4, ip, lsl #18
    2980:	0029f000 	eoreq	pc, r9, r0
    2984:	00052c20 	andeq	r2, r5, r0, lsr #24
    2988:	000d5900 	andeq	r5, sp, r0, lsl #18
    298c:	020c0200 	andeq	r0, ip, #0, 4
    2990:	00004e05 	andeq	r4, r0, r5, lsl #28
    2994:	035b0300 	cmpeq	fp, #0, 6
    2998:	07020000 	streq	r0, [r2, -r0]
    299c:	0000004e 	andeq	r0, r0, lr, asr #32
    29a0:	07190300 	ldreq	r0, [r9, -r0, lsl #6]
    29a4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    29a8:	0000004e 	andeq	r0, r0, lr, asr #32
    29ac:	19240304 	stmdbne	r4!, {r2, r8, r9}
    29b0:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    29b4:	00000055 	andeq	r0, r0, r5, asr r0
    29b8:	04040008 	streq	r0, [r4], #-8
    29bc:	00038907 	andeq	r8, r3, r7, lsl #18
    29c0:	5b040500 	blpl	103dc8 <startup-0x1fefc238>
    29c4:	04000000 	streq	r0, [r0], #-0
    29c8:	04d30801 	ldrbeq	r0, [r3], #2049	; 0x801
    29cc:	76060000 	strvc	r0, [r6], -r0
    29d0:	0200001a 	andeq	r0, r0, #26
    29d4:	0000210a 	andeq	r2, r0, sl, lsl #2
    29d8:	00340700 	eorseq	r0, r4, r0, lsl #14
    29dc:	030c0000 	movweq	r0, #49152	; 0xc000
    29e0:	00009e06 	andeq	r9, r0, r6, lsl #28
    29e4:	05c90300 	strbeq	r0, [r9, #768]	; 0x300
    29e8:	07030000 	streq	r0, [r3, -r0]
    29ec:	0000009e 	muleq	r0, lr, r0
    29f0:	003b0300 	eorseq	r0, fp, r0, lsl #6
    29f4:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    29f8:	0000009e 	muleq	r0, lr, r0
    29fc:	00300304 	eorseq	r0, r0, r4, lsl #6
    2a00:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    2a04:	0000009e 	muleq	r0, lr, r0
    2a08:	04050008 	streq	r0, [r5], #-8
    2a0c:	00000062 	andeq	r0, r0, r2, rrx
    2a10:	00163406 	andseq	r3, r6, r6, lsl #8
    2a14:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
    2a18:	07000000 	streq	r0, [r0, -r0]
    2a1c:	000006de 	ldrdeq	r0, [r0], -lr
    2a20:	28060424 	stmdacs	r6, {r2, r5, sl}
    2a24:	03000001 	movweq	r0, #1
    2a28:	00000461 	andeq	r0, r0, r1, ror #8
    2a2c:	01280704 			; <UNDEFINED> instruction: 0x01280704
    2a30:	03000000 	movweq	r0, #0
    2a34:	000006ea 	andeq	r0, r0, sl, ror #13
    2a38:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
    2a3c:	03040000 	movweq	r0, #16384	; 0x4000
    2a40:	0000063a 	andeq	r0, r0, sl, lsr r6
    2a44:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
    2a48:	03080000 	movweq	r0, #32768	; 0x8000
    2a4c:	00000666 	andeq	r0, r0, r6, ror #12
    2a50:	01460c04 	cmpeq	r6, r4, lsl #24
    2a54:	030c0000 	movweq	r0, #49152	; 0xc000
    2a58:	00000342 	andeq	r0, r0, r2, asr #6
    2a5c:	01460d04 	cmpeq	r6, r4, lsl #26
    2a60:	03100000 	tsteq	r0, #0
    2a64:	00000473 	andeq	r0, r0, r3, ror r4
    2a68:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
    2a6c:	03140000 	tsteq	r4, #0
    2a70:	00000070 	andeq	r0, r0, r0, ror r0
    2a74:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
    2a78:	03180000 	tsteq	r8, #0
    2a7c:	000003d9 	ldrdeq	r0, [r0], -r9
    2a80:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
    2a84:	031c0000 	tsteq	ip, #0
    2a88:	000003e9 	andeq	r0, r0, r9, ror #7
    2a8c:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
    2a90:	00200000 	eoreq	r0, r0, r0
    2a94:	00a40405 	adceq	r0, r4, r5, lsl #8
    2a98:	04080000 	streq	r0, [r8], #-0
    2a9c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    2aa0:	01400900 	cmpeq	r0, r0, lsl #18
    2aa4:	400a0000 	andmi	r0, sl, r0
    2aa8:	00000001 	andeq	r0, r0, r1
    2aac:	00af0405 	adceq	r0, pc, r5, lsl #8
    2ab0:	04050000 	streq	r0, [r5], #-0
    2ab4:	00000135 	andeq	r0, r0, r5, lsr r1
    2ab8:	0006df06 	andeq	sp, r6, r6, lsl #30
    2abc:	af150400 	svcge	0x00150400
    2ac0:	0b000000 	bleq	2ac8 <startup-0x1fffd538>
    2ac4:	00000162 	andeq	r0, r0, r2, ror #2
    2ac8:	00000162 	andeq	r0, r0, r2, ror #2
    2acc:	0405000c 	streq	r0, [r5], #-12
    2ad0:	0000014c 	andeq	r0, r0, ip, asr #2
    2ad4:	0005560d 	andeq	r5, r5, sp, lsl #12
    2ad8:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
    2adc:	0d000001 	stceq	0, cr0, [r0, #-4]
    2ae0:	00000424 	andeq	r0, r0, r4, lsr #8
    2ae4:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
    2ae8:	5b0b0000 	blpl	2c2af0 <startup-0x1fd3d510>
    2aec:	8f000000 	svchi	0x00000000
    2af0:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    2af4:	0000018f 	andeq	r0, r0, pc, lsl #3
    2af8:	04000301 	streq	r0, [r0], #-769	; 0xfffffcff
    2afc:	04060704 	streq	r0, [r6], #-1796	; 0xfffff8fc
    2b00:	2b0f0000 	blcs	3c2b08 <startup-0x1fc3d4f8>
    2b04:	05000015 	streq	r0, [r0, #-21]	; 0xffffffeb
    2b08:	00017e03 	andeq	r7, r1, r3, lsl #28
    2b0c:	f8030500 			; <UNDEFINED> instruction: 0xf8030500
    2b10:	0f200099 	svceq	0x00200099
    2b14:	00001441 	andeq	r1, r0, r1, asr #8
    2b18:	017e0306 	cmneq	lr, r6, lsl #6
    2b1c:	03050000 	movweq	r0, #20480	; 0x5000
    2b20:	20009cfc 	strdcs	r9, [r0], -ip
    2b24:	00175e0f 	andseq	r5, r7, pc, lsl #28
    2b28:	7e030700 	cdpvc	7, 0, cr0, cr3, cr0, {0}
    2b2c:	05000001 	streq	r0, [r0, #-1]
    2b30:	00a00003 	adceq	r0, r0, r3
    2b34:	15640f20 	strbne	r0, [r4, #-3872]!	; 0xfffff0e0
    2b38:	03080000 	movweq	r0, #32768	; 0x8000
    2b3c:	0000017e 	andeq	r0, r0, lr, ror r1
    2b40:	a3040305 	movwge	r0, #17157	; 0x4305
    2b44:	ad0f2000 	stcge	0, cr2, [pc, #-0]	; 2b4c <startup-0x1fffd4b4>
    2b48:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    2b4c:	00017e03 	andeq	r7, r1, r3, lsl #28
    2b50:	08030500 	stmdaeq	r3, {r8, sl}
    2b54:	0f2000a6 	svceq	0x002000a6
    2b58:	00001780 	andeq	r1, r0, r0, lsl #15
    2b5c:	017e030a 	cmneq	lr, sl, lsl #6
    2b60:	03050000 	movweq	r0, #20480	; 0x5000
    2b64:	2000a90c 	andcs	sl, r0, ip, lsl #18
    2b68:	00171c0f 	andseq	r1, r7, pc, lsl #24
    2b6c:	7e030b00 	vmlavc.f64	d0, d3, d0
    2b70:	05000001 	streq	r0, [r0, #-1]
    2b74:	00ac1003 	adceq	r1, ip, r3
    2b78:	15c10f20 	strbne	r0, [r1, #3872]	; 0xf20
    2b7c:	030c0000 	movweq	r0, #49152	; 0xc000
    2b80:	0000017e 	andeq	r0, r0, lr, ror r1
    2b84:	af140305 	svcge	0x00140305
    2b88:	d10f2000 	mrsle	r2, CPSR
    2b8c:	0d000015 	stceq	0, cr0, [r0, #-84]	; 0xffffffac
    2b90:	00017e03 	andeq	r7, r1, r3, lsl #28
    2b94:	18030500 	stmdane	r3, {r8, sl}
    2b98:	0f2000b2 	svceq	0x002000b2
    2b9c:	000014b3 			; <UNDEFINED> instruction: 0x000014b3
    2ba0:	017e030e 	cmneq	lr, lr, lsl #6
    2ba4:	03050000 	movweq	r0, #20480	; 0x5000
    2ba8:	2000b51c 	andcs	fp, r0, ip, lsl r5
    2bac:	0015540f 	andseq	r5, r5, pc, lsl #8
    2bb0:	7e030f00 	cdpvc	15, 0, cr0, cr3, cr0, {0}
    2bb4:	05000001 	streq	r0, [r0, #-1]
    2bb8:	00b82003 	adcseq	r2, r8, r3
    2bbc:	174d0f20 	strbne	r0, [sp, -r0, lsr #30]
    2bc0:	03100000 	tsteq	r0, #0
    2bc4:	0000017e 	andeq	r0, r0, lr, ror r1
    2bc8:	bb240305 	bllt	9037e4 <startup-0x1f6fc81c>
    2bcc:	6f0f2000 	svcvs	0x000f2000
    2bd0:	11000017 	tstne	r0, r7, lsl r0
    2bd4:	00017e03 	andeq	r7, r1, r3, lsl #28
    2bd8:	28030500 	stmdacs	r3, {r8, sl}
    2bdc:	0f2000be 	svceq	0x002000be
    2be0:	000014c4 	andeq	r1, r0, r4, asr #9
    2be4:	017e0312 	cmneq	lr, r2, lsl r3
    2be8:	03050000 	movweq	r0, #20480	; 0x5000
    2bec:	2000c12c 	andcs	ip, r0, ip, lsr #2
    2bf0:	0016110f 	andseq	r1, r6, pc, lsl #2
    2bf4:	7e031300 	cdpvc	3, 0, cr1, cr3, cr0, {0}
    2bf8:	05000001 	streq	r0, [r0, #-1]
    2bfc:	00c43003 	sbceq	r3, r4, r3
    2c00:	17910f20 	ldrne	r0, [r1, r0, lsr #30]
    2c04:	03140000 	tsteq	r4, #0
    2c08:	0000017e 	andeq	r0, r0, lr, ror r1
    2c0c:	c7340305 	ldrgt	r0, [r4, -r5, lsl #6]!
    2c10:	f70f2000 			; <UNDEFINED> instruction: 0xf70f2000
    2c14:	15000015 	strne	r0, [r0, #-21]	; 0xffffffeb
    2c18:	00017e03 	andeq	r7, r1, r3, lsl #28
    2c1c:	38030500 	stmdacc	r3, {r8, sl}
    2c20:	0f2000ca 	svceq	0x002000ca
    2c24:	0000163a 	andeq	r1, r0, sl, lsr r6
    2c28:	017e0316 	cmneq	lr, r6, lsl r3
    2c2c:	03050000 	movweq	r0, #20480	; 0x5000
    2c30:	2000cd3c 	andcs	ip, r0, ip, lsr sp
    2c34:	00172d10 	andseq	r2, r7, r0, lsl sp
    2c38:	9e180100 	muflse	f0, f0, f0
    2c3c:	05000000 	streq	r0, [r0, #-0]
    2c40:	00543c03 	subseq	r3, r4, r3, lsl #24
    2c44:	14941020 	ldrne	r1, [r4], #32
    2c48:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    2c4c:	0000009e 	muleq	r0, lr, r0
    2c50:	54780305 	ldrbtpl	r0, [r8], #-773	; 0xfffffcfb
    2c54:	20102000 	andscs	r2, r0, r0
    2c58:	01000015 	tsteq	r0, r5, lsl r0
    2c5c:	00009e1a 	andeq	r9, r0, sl, lsl lr
    2c60:	dc030500 	cfstr32le	mvfx0, [r3], {-0}
    2c64:	10200054 	eorne	r0, r0, r4, asr r0
    2c68:	0000159d 	muleq	r0, sp, r5
    2c6c:	009e1b01 	addseq	r1, lr, r1, lsl #22
    2c70:	03050000 	movweq	r0, #20480	; 0x5000
    2c74:	200054ec 	andcs	r5, r0, ip, ror #9
    2c78:	00167910 	andseq	r7, r6, r0, lsl r9
    2c7c:	9e1c0100 	muflse	f0, f4, f0
    2c80:	05000000 	streq	r0, [r0, #-0]
    2c84:	00543803 	subseq	r3, r4, r3, lsl #16
    2c88:	16df1020 	ldrbne	r1, [pc], r0, lsr #32
    2c8c:	1d010000 	stcne	0, cr0, [r1, #-0]
    2c90:	0000009e 	muleq	r0, lr, r0
    2c94:	54f00305 	ldrbtpl	r0, [r0], #773	; 0x305
    2c98:	e3102000 	tst	r0, #0
    2c9c:	01000014 	tsteq	r0, r4, lsl r0
    2ca0:	00009e1e 	andeq	r9, r0, lr, lsl lr
    2ca4:	a0030500 	andge	r0, r3, r0, lsl #10
    2ca8:	10200052 	eorne	r0, r0, r2, asr r0
    2cac:	00001703 	andeq	r1, r0, r3, lsl #14
    2cb0:	009e1f01 	addseq	r1, lr, r1, lsl #30
    2cb4:	03050000 	movweq	r0, #20480	; 0x5000
    2cb8:	200052f4 	strdcs	r5, [r0], -r4
    2cbc:	0015ec10 	andseq	lr, r5, r0, lsl ip
    2cc0:	9e200100 	suflss	f0, f0, f0
    2cc4:	05000000 	streq	r0, [r0, #-0]
    2cc8:	00529c03 	subseq	r9, r2, r3, lsl #24
    2ccc:	17a21020 	strne	r1, [r2, r0, lsr #32]!
    2cd0:	21010000 	mrscs	r0, (UNDEF: 1)
    2cd4:	0000009e 	muleq	r0, lr, r0
    2cd8:	541c0305 	ldrpl	r0, [ip], #-773	; 0xfffffcfb
    2cdc:	ea102000 	b	40ace4 <startup-0x1fbf531c>
    2ce0:	01000016 	tsteq	r0, r6, lsl r0
    2ce4:	00009e22 	andeq	r9, r0, r2, lsr #28
    2ce8:	70030500 	andvc	r0, r3, r0, lsl #10
    2cec:	10200054 	eorne	r0, r0, r4, asr r0
    2cf0:	000014fd 	strdeq	r1, [r0], -sp
    2cf4:	009e2301 	addseq	r2, lr, r1, lsl #6
    2cf8:	03050000 	movweq	r0, #20480	; 0x5000
    2cfc:	200052c0 	andcs	r5, r0, r0, asr #5
    2d00:	00158310 	andseq	r8, r5, r0, lsl r3
    2d04:	9e240100 	suflss	f0, f4, f0
    2d08:	05000000 	streq	r0, [r0, #-0]
    2d0c:	0052bc03 	subseq	fp, r2, r3, lsl #24
    2d10:	16071020 	strne	r1, [r7], -r0, lsr #32
    2d14:	25010000 	strcs	r0, [r1, #-0]
    2d18:	0000009e 	muleq	r0, lr, r0
    2d1c:	53040305 	movwpl	r0, #17157	; 0x4305
    2d20:	ba102000 	blt	40ad28 <startup-0x1fbf52d8>
    2d24:	01000016 	tsteq	r0, r6, lsl r0
    2d28:	00009e26 	andeq	r9, r0, r6, lsr #28
    2d2c:	74030500 	strvc	r0, [r3], #-1280	; 0xfffffb00
    2d30:	10200054 	eorne	r0, r0, r4, asr r0
    2d34:	00001742 	andeq	r1, r0, r2, asr #14
    2d38:	009e2701 	addseq	r2, lr, r1, lsl #14
    2d3c:	03050000 	movweq	r0, #20480	; 0x5000
    2d40:	2000540c 	andcs	r5, r0, ip, lsl #8
    2d44:	00173810 	andseq	r3, r7, r0, lsl r8
    2d48:	9e280100 	suflse	f0, f0, f0
    2d4c:	05000000 	streq	r0, [r0, #-0]
    2d50:	00534403 	subseq	r4, r3, r3, lsl #8
    2d54:	15a81020 	strne	r1, [r8, #32]!
    2d58:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    2d5c:	0000009e 	muleq	r0, lr, r0
    2d60:	53540305 	cmppl	r4, #335544320	; 0x14000000
    2d64:	75102000 	ldrvc	r2, [r0, #-0]
    2d68:	01000015 	tsteq	r0, r5, lsl r0
    2d6c:	0000622b 	andeq	r6, r0, fp, lsr #4
    2d70:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
    2d74:	10200054 	eorne	r0, r0, r4, asr r0
    2d78:	000016ac 	andeq	r1, r0, ip, lsr #13
    2d7c:	00622c01 	rsbeq	r2, r2, r1, lsl #24
    2d80:	03050000 	movweq	r0, #20480	; 0x5000
    2d84:	2000526c 	andcs	r5, r0, ip, ror #4
    2d88:	00154710 	andseq	r4, r5, r0, lsl r7
    2d8c:	622d0100 	eorvs	r0, sp, #0, 2
    2d90:	05000000 	streq	r0, [r0, #-0]
    2d94:	00542c03 	subseq	r2, r4, r3, lsl #24
    2d98:	158e1020 	strne	r1, [lr, #32]
    2d9c:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    2da0:	00000062 	andeq	r0, r0, r2, rrx
    2da4:	52600305 	rsbpl	r0, r0, #335544320	; 0x14000000
    2da8:	c5102000 	ldrgt	r2, [r0, #-0]
    2dac:	01000016 	tsteq	r0, r6, lsl r0
    2db0:	0000622f 	andeq	r6, r0, pc, lsr #4
    2db4:	c4030500 	strgt	r0, [r3], #-1280	; 0xfffffb00
    2db8:	10200054 	eorne	r0, r0, r4, asr r0
    2dbc:	00001661 	andeq	r1, r0, r1, ror #12
    2dc0:	00623001 	rsbeq	r3, r2, r1
    2dc4:	03050000 	movweq	r0, #20480	; 0x5000
    2dc8:	2000544c 	andcs	r5, r0, ip, asr #8
    2dcc:	00170d10 	andseq	r0, r7, r0, lsl sp
    2dd0:	62310100 	eorsvs	r0, r1, #0, 2
    2dd4:	05000000 	streq	r0, [r0, #-0]
    2dd8:	00541003 	subseq	r1, r4, r3
    2ddc:	14ee1020 	strbtne	r1, [lr], #32
    2de0:	32010000 	andcc	r0, r1, #0
    2de4:	00000062 	andeq	r0, r0, r2, rrx
    2de8:	53380305 	teqpl	r8, #335544320	; 0x14000000
    2dec:	d8102000 	ldmdale	r0, {sp}
    2df0:	01000017 	tsteq	r0, r7, lsl r0
    2df4:	00006233 	andeq	r6, r0, r3, lsr r2
    2df8:	64030500 	strvs	r0, [r3], #-1280	; 0xfffffb00
    2dfc:	10200054 	eorne	r0, r0, r4, asr r0
    2e00:	000017e6 	andeq	r1, r0, r6, ror #15
    2e04:	00623401 	rsbeq	r3, r2, r1, lsl #8
    2e08:	03050000 	movweq	r0, #20480	; 0x5000
    2e0c:	200054b8 			; <UNDEFINED> instruction: 0x200054b8
    2e10:	00168e10 	andseq	r8, r6, r0, lsl lr
    2e14:	62350100 	eorsvs	r0, r5, #0, 2
    2e18:	05000000 	streq	r0, [r0, #-0]
    2e1c:	0052f803 	subseq	pc, r2, r3, lsl #16
    2e20:	15b31020 	ldrne	r1, [r3, #32]!
    2e24:	36010000 	strcc	r0, [r1], -r0
    2e28:	00000062 	andeq	r0, r0, r2, rrx
    2e2c:	54580305 	ldrbpl	r0, [r8], #-773	; 0xfffffcfb
    2e30:	9d102000 	ldcls	0, cr2, [r0, #-0]
    2e34:	01000016 	tsteq	r0, r6, lsl r0
    2e38:	00006237 	andeq	r6, r0, r7, lsr r2
    2e3c:	d0030500 	andle	r0, r3, r0, lsl #10
    2e40:	10200054 	eorne	r0, r0, r4, asr r0
    2e44:	000017bd 			; <UNDEFINED> instruction: 0x000017bd
    2e48:	00623801 	rsbeq	r3, r2, r1, lsl #16
    2e4c:	03050000 	movweq	r0, #20480	; 0x5000
    2e50:	200054ac 	andcs	r5, r0, ip, lsr #9
    2e54:	00148610 	andseq	r8, r4, r0, lsl r6
    2e58:	62390100 	eorsvs	r0, r9, #0, 2
    2e5c:	05000000 	streq	r0, [r0, #-0]
    2e60:	00525403 	subseq	r5, r2, r3, lsl #8
    2e64:	16f41020 	ldrbtne	r1, [r4], r0, lsr #32
    2e68:	3a010000 	bcc	42e70 <startup-0x1ffbd190>
    2e6c:	00000062 	andeq	r0, r0, r2, rrx
    2e70:	54200305 	strtpl	r0, [r0], #-773	; 0xfffffcfb
    2e74:	d4102000 	ldrle	r2, [r0], #-0
    2e78:	01000014 	tsteq	r0, r4, lsl r0
    2e7c:	0000623b 	andeq	r6, r0, fp, lsr r2
    2e80:	78030500 	stmdavc	r3, {r8, sl}
    2e84:	10200052 	eorne	r0, r0, r2, asr r0
    2e88:	00001433 	andeq	r1, r0, r3, lsr r4
    2e8c:	00623c01 	rsbeq	r3, r2, r1, lsl #24
    2e90:	03050000 	movweq	r0, #20480	; 0x5000
    2e94:	20005440 	andcs	r5, r0, r0, asr #8
    2e98:	00145110 	andseq	r5, r4, r0, lsl r1
    2e9c:	4c3f0100 	ldfmis	f0, [pc], #-0	; 2ea4 <startup-0x1fffd15c>
    2ea0:	05000001 	streq	r0, [r0, #-1]
    2ea4:	00530803 	subseq	r0, r3, r3, lsl #16
    2ea8:	14121020 	ldrne	r1, [r2], #-32	; 0xffffffe0
    2eac:	40010000 	andmi	r0, r1, r0
    2eb0:	000000a4 	andeq	r0, r0, r4, lsr #1
    2eb4:	54880305 	strpl	r0, [r8], #773	; 0x305
    2eb8:	d4102000 	ldrle	r2, [r0], #-0
    2ebc:	01000016 	tsteq	r0, r6, lsl r0
    2ec0:	0000a441 	andeq	sl, r0, r1, asr #8
    2ec4:	b0030500 	andlt	r0, r3, r0, lsl #10
    2ec8:	10200052 	eorne	r0, r0, r2, asr r0
    2ecc:	0000153c 	andeq	r1, r0, ip, lsr r5
    2ed0:	00a44201 	adceq	r4, r4, r1, lsl #4
    2ed4:	03050000 	movweq	r0, #20480	; 0x5000
    2ed8:	200054a0 	andcs	r5, r0, r0, lsr #9
    2edc:	00165610 	andseq	r5, r6, r0, lsl r6
    2ee0:	a4430100 	strbge	r0, [r3], #-256	; 0xffffff00
    2ee4:	05000000 	streq	r0, [r0, #-0]
    2ee8:	0052a403 	subseq	sl, r2, r3, lsl #8
    2eec:	14281020 	strtne	r1, [r8], #-32	; 0xffffffe0
    2ef0:	44010000 	strmi	r0, [r1], #-0
    2ef4:	000000a4 	andeq	r0, r0, r4, lsr #1
    2ef8:	52e80305 	rscpl	r0, r8, #335544320	; 0x14000000
    2efc:	a8102000 	ldmdage	r0, {sp}
    2f00:	01000014 	tsteq	r0, r4, lsl r0
    2f04:	0000a445 	andeq	sl, r0, r5, asr #8
    2f08:	2c030500 	cfstr32cs	mvfx0, [r3], {-0}
    2f0c:	10200053 	eorne	r0, r0, r3, asr r0
    2f10:	0000164b 	andeq	r1, r0, fp, asr #12
    2f14:	00a44601 	adceq	r4, r4, r1, lsl #12
    2f18:	03050000 	movweq	r0, #20480	; 0x5000
    2f1c:	20005494 	mulcs	r0, r4, r4
    2f20:	00140710 	andseq	r0, r4, r0, lsl r7
    2f24:	a4470100 	strbge	r0, [r7], #-256	; 0xffffff00
    2f28:	05000000 	streq	r0, [r0, #-0]
    2f2c:	0052dc03 	subseq	sp, r2, r3, lsl #24
    2f30:	141d1020 	ldrne	r1, [sp], #-32	; 0xffffffe0
    2f34:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    2f38:	000000a4 	andeq	r0, r0, r4, lsr #1
    2f3c:	52840305 	addpl	r0, r4, #335544320	; 0x14000000
    2f40:	2e102000 	cdpcs	0, 1, cr2, cr0, cr0, {0}
    2f44:	01000016 	tsteq	r0, r6, lsl r0
    2f48:	0000a449 	andeq	sl, r0, r9, asr #8
    2f4c:	c4030500 	strgt	r0, [r3], #-1280	; 0xfffffb00
    2f50:	10200052 	eorne	r0, r0, r2, asr r0
    2f54:	000017f5 	strdeq	r1, [r0], -r5
    2f58:	00a44a01 	adceq	r4, r4, r1, lsl #20
    2f5c:	03050000 	movweq	r0, #20480	; 0x5000
    2f60:	2000547c 	andcs	r5, r0, ip, ror r4
    2f64:	00150810 	andseq	r0, r5, r0, lsl r8
    2f68:	a44b0100 	strbge	r0, [fp], #-256	; 0xffffff00
    2f6c:	05000000 	streq	r0, [r0, #-0]
    2f70:	00529003 	subseq	r9, r2, r3
    2f74:	16221020 	strtne	r1, [r2], -r0, lsr #32
    2f78:	4c010000 	stcmi	0, cr0, [r1], {-0}
    2f7c:	000000a4 	andeq	r0, r0, r4, lsr #1
    2f80:	53480305 	movtpl	r0, #33541	; 0x8305
    2f84:	cc102000 	ldcgt	0, cr2, [r0], {-0}
    2f88:	01000017 	tsteq	r0, r7, lsl r0
    2f8c:	0000a44d 	andeq	sl, r0, sp, asr #8
    2f90:	d0030500 	andle	r0, r3, r0, lsl #10
    2f94:	10200052 	eorne	r0, r0, r2, asr r0
    2f98:	00001514 	andeq	r1, r0, r4, lsl r5
    2f9c:	00a44e01 	adceq	r4, r4, r1, lsl #28
    2fa0:	03050000 	movweq	r0, #20480	; 0x5000
    2fa4:	200054e0 	andcs	r5, r0, r0, ror #9
    2fa8:	0000a40b 	andeq	sl, r0, fp, lsl #8
    2fac:	00064c00 	andeq	r4, r6, r0, lsl #24
    2fb0:	018f1100 	orreq	r1, pc, r0, lsl #2
    2fb4:	000e0000 	andeq	r0, lr, r0
    2fb8:	00168310 	andseq	r8, r6, r0, lsl r3
    2fbc:	3c4f0100 	stfcce	f0, [pc], {-0}
    2fc0:	05000006 	streq	r0, [r0, #-6]
    2fc4:	00535803 	subseq	r5, r3, r3, lsl #16
    2fc8:	03611220 	cmneq	r1, #32, 4
    2fcc:	90010000 	andls	r0, r1, r0
    2fd0:	20002c64 	andcs	r2, r0, r4, ror #24
    2fd4:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    2fd8:	06929c01 	ldreq	r9, [r2], r1, lsl #24
    2fdc:	51130000 	tstpl	r3, r0
    2fe0:	01000014 	tsteq	r0, r4, lsl r0
    2fe4:	00016290 	muleq	r1, r0, r2
    2fe8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2fec:	0009090f 	andeq	r0, r9, pc, lsl #18
    2ff0:	2e910100 	fmlcss	f0, f1, f0
    2ff4:	05000001 	streq	r0, [r0, #-1]
    2ff8:	00d04003 	sbcseq	r4, r0, r3
    2ffc:	a9140020 	ldmdbge	r4, {r5}
    3000:	01000004 	tsteq	r0, r4
    3004:	0029f050 	eoreq	pc, r9, r0, asr r0	; <UNPREDICTABLE>
    3008:	00027420 	andeq	r7, r2, r0, lsr #8
    300c:	0f9c0100 	svceq	0x009c0100
    3010:	00000daa 	andeq	r0, r0, sl, lsr #27
    3014:	009e5201 	addseq	r5, lr, r1, lsl #4
    3018:	91020000 	mrsls	r0, (UNDEF: 2)
    301c:	0db40f74 	ldceq	15, cr0, [r4, #464]!	; 0x1d0
    3020:	55010000 	strpl	r0, [r1, #-0]
    3024:	0000009e 	muleq	r0, lr, r0
    3028:	0f709102 	svceq	0x00709102
    302c:	00000baa 	andeq	r0, r0, sl, lsr #23
    3030:	009e5801 	addseq	r5, lr, r1, lsl #16
    3034:	91020000 	mrsls	r0, (UNDEF: 2)
    3038:	0acb0f6c 	beq	ff2c6df0 <firstTime.4040+0xdf2b7934>
    303c:	5c010000 	stcpl	0, cr0, [r1], {-0}
    3040:	0000009e 	muleq	r0, lr, r0
    3044:	0f689102 	svceq	0x00689102
    3048:	00000dd4 	ldrdeq	r0, [r0], -r4
    304c:	009e5f01 	addseq	r5, lr, r1, lsl #30
    3050:	91020000 	mrsls	r0, (UNDEF: 2)
    3054:	0b680f64 	bleq	1a06dec <startup-0x1e5f9214>
    3058:	62010000 	andvs	r0, r1, #0
    305c:	0000009e 	muleq	r0, lr, r0
    3060:	0f609102 	svceq	0x00609102
    3064:	00000d80 	andeq	r0, r0, r0, lsl #27
    3068:	009e6701 	addseq	r6, lr, r1, lsl #14
    306c:	91020000 	mrsls	r0, (UNDEF: 2)
    3070:	0dde0f5c 	ldcleq	15, cr0, [lr, #368]	; 0x170
    3074:	6a010000 	bvs	4307c <startup-0x1ffbcf84>
    3078:	0000009e 	muleq	r0, lr, r0
    307c:	0f589102 	svceq	0x00589102
    3080:	00000de8 	andeq	r0, r0, r8, ror #27
    3084:	009e6d01 	addseq	r6, lr, r1, lsl #26
    3088:	91020000 	mrsls	r0, (UNDEF: 2)
    308c:	0af10f54 	beq	ffc46de4 <firstTime.4040+0xdfc37928>
    3090:	71010000 	mrsvc	r0, (UNDEF: 1)
    3094:	0000009e 	muleq	r0, lr, r0
    3098:	0f509102 	svceq	0x00509102
    309c:	00000b35 	andeq	r0, r0, r5, lsr fp
    30a0:	009e7401 	addseq	r7, lr, r1, lsl #8
    30a4:	91020000 	mrsls	r0, (UNDEF: 2)
    30a8:	0b3f0f4c 	bleq	fc6de0 <startup-0x1f039220>
    30ac:	77010000 	strvc	r0, [r1, -r0]
    30b0:	0000009e 	muleq	r0, lr, r0
    30b4:	0f489102 	svceq	0x00489102
    30b8:	00000dfd 	strdeq	r0, [r0], -sp
    30bc:	009e7b01 	addseq	r7, lr, r1, lsl #22
    30c0:	91020000 	mrsls	r0, (UNDEF: 2)
    30c4:	0c850f44 	stceq	15, cr0, [r5], {68}	; 0x44
    30c8:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    30cc:	0000009e 	muleq	r0, lr, r0
    30d0:	0f409102 	svceq	0x00409102
    30d4:	00000b5e 	andeq	r0, r0, lr, asr fp
    30d8:	009e8101 	addseq	r8, lr, r1, lsl #2
    30dc:	91030000 	mrsls	r0, (UNDEF: 3)
    30e0:	e20f7fbc 	and	r7, pc, #188, 30	; 0x2f0
    30e4:	01000015 	tsteq	r0, r5, lsl r0
    30e8:	00009e85 	andeq	r9, r0, r5, lsl #29
    30ec:	b8910300 	ldmlt	r1, {r8, r9}
    30f0:	166f0f7f 	uqsub16ne	r0, pc, pc	; <UNPREDICTABLE>
    30f4:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    30f8:	0000009e 	muleq	r0, lr, r0
    30fc:	7fb49103 	svcvc	0x00b49103
    3100:	00149e0f 	andseq	r9, r4, pc, lsl #28
    3104:	9e8b0100 	rmflse	f0, f3, f0
    3108:	03000000 	movweq	r0, #0
    310c:	007fb091 			; <UNDEFINED> instruction: 0x007fb091
    3110:	00089f00 	andeq	r9, r8, r0, lsl #30
    3114:	9e000400 	cfcpysls	mvf0, mvf0
    3118:	04000009 	streq	r0, [r0], #-9
    311c:	00009f01 	andeq	r9, r0, r1, lsl #30
    3120:	18e60c00 	stmiane	r6!, {sl, fp}^
    3124:	2f1c0000 	svccs	0x001c0000
    3128:	0e442000 	cdpeq	0, 4, cr2, cr4, cr0, {0}
    312c:	0f8e0000 	svceq	0x008e0000
    3130:	0c020000 	stceq	0, cr0, [r2], {-0}
    3134:	004e0502 	subeq	r0, lr, r2, lsl #10
    3138:	5b030000 	blpl	c3140 <startup-0x1ff3cec0>
    313c:	02000003 	andeq	r0, r0, #3
    3140:	00004e07 	andeq	r4, r0, r7, lsl #28
    3144:	19030000 	stmdbne	r3, {}	; <UNPREDICTABLE>
    3148:	02000007 	andeq	r0, r0, #7
    314c:	00004e08 	andeq	r4, r0, r8, lsl #28
    3150:	24030400 	strcs	r0, [r3], #-1024	; 0xfffffc00
    3154:	02000019 	andeq	r0, r0, #25
    3158:	00005509 	andeq	r5, r0, r9, lsl #10
    315c:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    3160:	03890704 	orreq	r0, r9, #4, 14	; 0x100000
    3164:	04050000 	streq	r0, [r5], #-0
    3168:	0000005b 	andeq	r0, r0, fp, asr r0
    316c:	d3080104 	movwle	r0, #33028	; 0x8104
    3170:	06000004 	streq	r0, [r0], -r4
    3174:	00001a76 	andeq	r1, r0, r6, ror sl
    3178:	00210a02 	eoreq	r0, r1, r2, lsl #20
    317c:	34070000 	strcc	r0, [r7], #-0
    3180:	0c000000 	stceq	0, cr0, [r0], {-0}
    3184:	009e0603 	addseq	r0, lr, r3, lsl #12
    3188:	c9030000 	stmdbgt	r3, {}	; <UNPREDICTABLE>
    318c:	03000005 	movweq	r0, #5
    3190:	00009e07 	andeq	r9, r0, r7, lsl #28
    3194:	3b030000 	blcc	c319c <startup-0x1ff3ce64>
    3198:	03000000 	movweq	r0, #0
    319c:	00009e08 	andeq	r9, r0, r8, lsl #28
    31a0:	30030400 	andcc	r0, r3, r0, lsl #8
    31a4:	03000000 	movweq	r0, #0
    31a8:	00009e09 	andeq	r9, r0, r9, lsl #28
    31ac:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    31b0:	00006204 	andeq	r6, r0, r4, lsl #4
    31b4:	16340600 	ldrtne	r0, [r4], -r0, lsl #12
    31b8:	0a030000 	beq	c31c0 <startup-0x1ff3ce40>
    31bc:	0000006d 	andeq	r0, r0, sp, rrx
    31c0:	0006de07 	andeq	sp, r6, r7, lsl #28
    31c4:	06042400 	streq	r2, [r4], -r0, lsl #8
    31c8:	00000128 	andeq	r0, r0, r8, lsr #2
    31cc:	00046103 	andeq	r6, r4, r3, lsl #2
    31d0:	28070400 	stmdacs	r7, {sl}
    31d4:	00000001 	andeq	r0, r0, r1
    31d8:	0006ea03 	andeq	lr, r6, r3, lsl #20
    31dc:	2e080400 	cfcpyscs	mvf0, mvf8
    31e0:	04000001 	streq	r0, [r0], #-1
    31e4:	00063a03 	andeq	r3, r6, r3, lsl #20
    31e8:	2e090400 	cfcpyscs	mvf0, mvf9
    31ec:	08000001 	stmdaeq	r0, {r0}
    31f0:	00066603 	andeq	r6, r6, r3, lsl #12
    31f4:	460c0400 	strmi	r0, [ip], -r0, lsl #8
    31f8:	0c000001 	stceq	0, cr0, [r0], {1}
    31fc:	00034203 	andeq	r4, r3, r3, lsl #4
    3200:	460d0400 	strmi	r0, [sp], -r0, lsl #8
    3204:	10000001 	andne	r0, r0, r1
    3208:	00047303 	andeq	r7, r4, r3, lsl #6
    320c:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
    3210:	14000001 	strne	r0, [r0], #-1
    3214:	00007003 	andeq	r7, r0, r3
    3218:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
    321c:	18000001 	stmdane	r0, {r0}
    3220:	0003d903 	andeq	sp, r3, r3, lsl #18
    3224:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
    3228:	1c000001 	stcne	0, cr0, [r0], {1}
    322c:	0003e903 	andeq	lr, r3, r3, lsl #18
    3230:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
    3234:	20000001 	andcs	r0, r0, r1
    3238:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    323c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3240:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    3244:	40090074 	andmi	r0, r9, r4, ror r0
    3248:	0a000001 	beq	3254 <startup-0x1fffcdac>
    324c:	00000140 	andeq	r0, r0, r0, asr #2
    3250:	af040500 	svcge	0x00040500
    3254:	05000000 	streq	r0, [r0, #-0]
    3258:	00013504 	andeq	r3, r1, r4, lsl #10
    325c:	06df0600 	ldrbeq	r0, [pc], r0, lsl #12
    3260:	15040000 	strne	r0, [r4, #-0]
    3264:	000000af 	andeq	r0, r0, pc, lsr #1
    3268:	0001620b 	andeq	r6, r1, fp, lsl #4
    326c:	00016200 	andeq	r6, r1, r0, lsl #4
    3270:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    3274:	00014c04 	andeq	r4, r1, r4, lsl #24
    3278:	05560d00 	ldrbeq	r0, [r6, #-3328]	; 0xfffff300
    327c:	1c040000 	stcne	0, cr0, [r4], {-0}
    3280:	00000157 	andeq	r0, r0, r7, asr r1
    3284:	0004240d 	andeq	r2, r4, sp, lsl #8
    3288:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
    328c:	06000001 	streq	r0, [r0], -r1
    3290:	000006a2 	andeq	r0, r0, r2, lsr #13
    3294:	005b2405 	subseq	r2, fp, r5, lsl #8
    3298:	7e0b0000 	cdpvc	0, 0, cr0, cr11, cr0, {0}
    329c:	9a000001 	bls	32a8 <startup-0x1fffcd58>
    32a0:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    32a4:	0000019a 	muleq	r0, sl, r1
    32a8:	040003ff 	streq	r0, [r0], #-1023	; 0xfffffc01
    32ac:	04060704 	streq	r0, [r6], #-1796	; 0xfffff8fc
    32b0:	5a0d0000 	bpl	3432b8 <startup-0x1fcbcd48>
    32b4:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
    32b8:	0001892b 	andeq	r8, r1, fp, lsr #18
    32bc:	02480d00 	subeq	r0, r8, #0, 26
    32c0:	2c050000 	stccs	0, cr0, [r5], {-0}
    32c4:	00000189 	andeq	r0, r0, r9, lsl #3
    32c8:	0004e10d 	andeq	lr, r4, sp, lsl #2
    32cc:	892d0500 	pushhi	{r8, sl}
    32d0:	0d000001 	stceq	0, cr0, [r0, #-4]
    32d4:	0000036b 	andeq	r0, r0, fp, ror #6
    32d8:	01892e05 	orreq	r2, r9, r5, lsl #28
    32dc:	d00d0000 	andle	r0, sp, r0
    32e0:	05000002 	streq	r0, [r0, #-2]
    32e4:	0001892f 	andeq	r8, r1, pc, lsr #18
    32e8:	06c00d00 	strbeq	r0, [r0], r0, lsl #26
    32ec:	30050000 	andcc	r0, r5, r0
    32f0:	00000189 	andeq	r0, r0, r9, lsl #3
    32f4:	0006b00d 	andeq	fp, r6, sp
    32f8:	89310500 	ldmdbhi	r1!, {r8, sl}
    32fc:	0f000001 	svceq	0x00000001
    3300:	000001ac 	andeq	r0, r0, ip, lsr #3
    3304:	03052b01 	movweq	r2, #23297	; 0x5b01
    3308:	20006500 	andcs	r6, r0, r0, lsl #10
    330c:	0001b70f 	andeq	fp, r1, pc, lsl #14
    3310:	052c0100 	streq	r0, [ip, #-256]!	; 0xffffff00
    3314:	00590003 	subseq	r0, r9, r3
    3318:	01c20f20 	biceq	r0, r2, r0, lsr #30
    331c:	2d010000 	stccs	0, cr0, [r1, #-0]
    3320:	61000305 	tstvs	r0, r5, lsl #6
    3324:	cd0f2000 	stcgt	0, cr2, [pc, #-0]	; 332c <startup-0x1fffccd4>
    3328:	01000001 	tsteq	r0, r1
    332c:	0003052e 	andeq	r0, r3, lr, lsr #10
    3330:	0f200069 	svceq	0x00200069
    3334:	000001a1 	andeq	r0, r0, r1, lsr #3
    3338:	03052f01 	movweq	r2, #24321	; 0x5f01
    333c:	20005d00 	andcs	r5, r0, r0, lsl #26
    3340:	0001d810 	andeq	sp, r1, r0, lsl r8
    3344:	03050100 	movweq	r0, #20736	; 0x5100
    3348:	20005500 	andcs	r5, r0, r0, lsl #10
    334c:	0001e310 	andeq	lr, r1, r0, lsl r3
    3350:	03050100 	movweq	r0, #20736	; 0x5100
    3354:	20006d00 	andcs	r6, r0, r0, lsl #26
    3358:	00189011 	andseq	r9, r8, r1, lsl r0
    335c:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
    3360:	20003cf6 	strdcs	r3, [r0], -r6
    3364:	0000006a 	andeq	r0, r0, sl, rrx
    3368:	026d9c01 	rsbeq	r9, sp, #256	; 0x100
    336c:	77120000 	ldrvc	r0, [r2, -r0]
    3370:	01000019 	tsteq	r0, r9, lsl r0
    3374:	012e01a8 	smulwbeq	lr, r8, r1
    3378:	91020000 	mrsls	r0, (UNDEF: 2)
    337c:	21110074 	tstcs	r1, r4, ror r0
    3380:	01000018 	tsteq	r0, r8, lsl r0
    3384:	3c7401a0 	ldfcce	f0, [r4], #-640	; 0xfffffd80
    3388:	00822000 	addeq	r2, r2, r0
    338c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3390:	000002a2 	andeq	r0, r0, r2, lsr #5
    3394:	00186b12 	andseq	r6, r8, r2, lsl fp
    3398:	01a00100 	lsleq	r0, r0, #2
    339c:	00000162 	andeq	r0, r0, r2, ror #2
    33a0:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    33a4:	0000047b 	andeq	r0, r0, fp, ror r4
    33a8:	2e01a101 	mvfcss	f2, f1
    33ac:	02000001 	andeq	r0, r0, #1
    33b0:	14007491 	strne	r7, [r0], #-1169	; 0xfffffb6f
    33b4:	0000192f 	andeq	r1, r0, pc, lsr #18
    33b8:	6c019601 	stcvs	6, cr9, [r1], {1}
    33bc:	0820003b 	stmdaeq	r0!, {r0, r1, r3, r4, r5}
    33c0:	01000001 	tsteq	r0, r1
    33c4:	0002c69c 	muleq	r2, ip, r6
    33c8:	00691500 	rsbeq	r1, r9, r0, lsl #10
    33cc:	2e019701 	cdpcs	7, 0, cr9, cr1, cr1, {0}
    33d0:	02000001 	andeq	r0, r0, #1
    33d4:	11007491 			; <UNDEFINED> instruction: 0x11007491
    33d8:	000018c1 	andeq	r1, r0, r1, asr #17
    33dc:	3c017001 	stccc	0, cr7, [r1], {1}
    33e0:	3020003a 	eorcc	r0, r0, sl, lsr r0
    33e4:	01000001 	tsteq	r0, r1
    33e8:	00033a9c 	muleq	r3, ip, sl
    33ec:	00781500 	rsbseq	r1, r8, r0, lsl #10
    33f0:	2e017101 	adfcss	f7, f1, f1
    33f4:	02000001 	andeq	r0, r0, #1
    33f8:	79156c91 	ldmdbvc	r5, {r0, r4, r7, sl, fp, sp, lr}
    33fc:	01720100 	cmneq	r2, r0, lsl #2
    3400:	0000012e 	andeq	r0, r0, lr, lsr #2
    3404:	13689102 	cmnne	r8, #-2147483648	; 0x80000000
    3408:	0000035b 	andeq	r0, r0, fp, asr r3
    340c:	2e017301 	cdpcs	3, 0, cr7, cr1, cr1, {0}
    3410:	02000001 	andeq	r0, r0, #1
    3414:	19136491 	ldmdbne	r3, {r0, r4, r7, sl, sp, lr}
    3418:	01000007 	tsteq	r0, r7
    341c:	012e0174 			; <UNDEFINED> instruction: 0x012e0174
    3420:	91020000 	mrsls	r0, (UNDEF: 2)
    3424:	32781560 	rsbscc	r1, r8, #96, 10	; 0x18000000
    3428:	01760100 	cmneq	r6, r0, lsl #2
    342c:	0000012e 	andeq	r0, r0, lr, lsr #2
    3430:	165c9102 	ldrbne	r9, [ip], -r2, lsl #2
    3434:	7a010069 	bvc	435e0 <startup-0x1ffbca20>
    3438:	00012e01 	andeq	r2, r1, r1, lsl #28
    343c:	006b1500 	rsbeq	r1, fp, r0, lsl #10
    3440:	2e017b01 	vmlacs.f64	d7, d1, d1
    3444:	02000001 	andeq	r0, r0, #1
    3448:	11005891 			; <UNDEFINED> instruction: 0x11005891
    344c:	000019c1 	andeq	r1, r0, r1, asr #19
    3450:	ea016501 	b	5c85c <startup-0x1ffa37a4>
    3454:	52200039 	eorpl	r0, r0, #57	; 0x39
    3458:	01000000 	mrseq	r0, (UNDEF: 0)
    345c:	0003a39c 	muleq	r3, ip, r3
    3460:	00781700 	rsbseq	r1, r8, r0, lsl #14
    3464:	2e016501 	cfsh32cs	mvfx6, mvfx1, #1
    3468:	02000001 	andeq	r0, r0, #1
    346c:	79176c91 	ldmdbvc	r7, {r0, r4, r7, sl, fp, sp, lr}
    3470:	01650100 	cmneq	r5, r0, lsl #2
    3474:	0000012e 	andeq	r0, r0, lr, lsr #2
    3478:	12689102 	rsbne	r9, r8, #-2147483648	; 0x80000000
    347c:	0000035b 	andeq	r0, r0, fp, asr r3
    3480:	2e016501 	cfsh32cs	mvfx6, mvfx1, #1
    3484:	02000001 	andeq	r0, r0, #1
    3488:	19126491 	ldmdbne	r2, {r0, r4, r7, sl, sp, lr}
    348c:	01000007 	tsteq	r0, r7
    3490:	012e0165 			; <UNDEFINED> instruction: 0x012e0165
    3494:	91020000 	mrsls	r0, (UNDEF: 2)
    3498:	00691560 	rsbeq	r1, r9, r0, ror #10
    349c:	2e016601 	cfmadd32cs	mvax0, mvfx6, mvfx1, mvfx1
    34a0:	02000001 	andeq	r0, r0, #1
    34a4:	6a157491 	bvs	5606f0 <startup-0x1fa9f910>
    34a8:	01670100 	cmneq	r7, r0, lsl #2
    34ac:	0000012e 	andeq	r0, r0, lr, lsr #2
    34b0:	00709102 	rsbseq	r9, r0, r2, lsl #2
    34b4:	00196411 	andseq	r6, r9, r1, lsl r4
    34b8:	015b0100 	cmpeq	fp, r0, lsl #2
    34bc:	20003998 	mulcs	r0, r8, r9
    34c0:	00000052 	andeq	r0, r0, r2, asr r0
    34c4:	040c9c01 	streq	r9, [ip], #-3073	; 0xfffff3ff
    34c8:	78170000 	ldmdavc	r7, {}	; <UNPREDICTABLE>
    34cc:	015b0100 	cmpeq	fp, r0, lsl #2
    34d0:	0000012e 	andeq	r0, r0, lr, lsr #2
    34d4:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
    34d8:	5b010079 	blpl	436c4 <startup-0x1ffbc93c>
    34dc:	00012e01 	andeq	r2, r1, r1, lsl #28
    34e0:	68910200 	ldmvs	r1, {r9}
    34e4:	00035b12 	andeq	r5, r3, r2, lsl fp
    34e8:	015b0100 	cmpeq	fp, r0, lsl #2
    34ec:	0000012e 	andeq	r0, r0, lr, lsr #2
    34f0:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
    34f4:	00000719 	andeq	r0, r0, r9, lsl r7
    34f8:	2e015b01 	vmlacs.f64	d5, d1, d1
    34fc:	02000001 	andeq	r0, r0, #1
    3500:	69156091 	ldmdbvs	r5, {r0, r4, r7, sp, lr}
    3504:	015c0100 	cmpeq	ip, r0, lsl #2
    3508:	0000012e 	andeq	r0, r0, lr, lsr #2
    350c:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    3510:	5d01006a 	stcpl	0, cr0, [r1, #-424]	; 0xfffffe58
    3514:	00012e01 	andeq	r2, r1, r1, lsl #28
    3518:	70910200 	addsvc	r0, r1, r0, lsl #4
    351c:	189b1100 	ldmne	fp, {r8, ip}
    3520:	45010000 	strmi	r0, [r1, #-0]
    3524:	00387e01 	eorseq	r7, r8, r1, lsl #28
    3528:	00011a20 	andeq	r1, r1, r0, lsr #20
    352c:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
    3530:	17000004 	strne	r0, [r0, -r4]
    3534:	45010073 	strmi	r0, [r1, #-115]	; 0xffffff8d
    3538:	00009e01 	andeq	r9, r0, r1, lsl #28
    353c:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    3540:	01007817 	tsteq	r0, r7, lsl r8
    3544:	012e0145 			; <UNDEFINED> instruction: 0x012e0145
    3548:	91020000 	mrsls	r0, (UNDEF: 2)
    354c:	00791750 	rsbseq	r1, r9, r0, asr r7
    3550:	2e014501 	cfsh32cs	mvfx4, mvfx1, #1
    3554:	02000001 	andeq	r0, r0, #1
    3558:	73174c91 	tstvc	r7, #37120	; 0x9100
    355c:	01007465 	tsteq	r0, r5, ror #8
    3560:	012e0145 			; <UNDEFINED> instruction: 0x012e0145
    3564:	91020000 	mrsls	r0, (UNDEF: 2)
    3568:	19291248 	stmdbne	r9!, {r3, r6, r9, ip}
    356c:	45010000 	strmi	r0, [r1, #-0]
    3570:	00012e01 	andeq	r2, r1, r1, lsl #28
    3574:	00910200 	addseq	r0, r1, r0, lsl #4
    3578:	01006915 	tsteq	r0, r5, lsl r9
    357c:	012e0146 			; <UNDEFINED> instruction: 0x012e0146
    3580:	91020000 	mrsls	r0, (UNDEF: 2)
    3584:	006a156c 	rsbeq	r1, sl, ip, ror #10
    3588:	2e014601 	cfmadd32cs	mvax0, mvfx4, mvfx1, mvfx1
    358c:	02000001 	andeq	r0, r0, #1
    3590:	6b156891 	blvs	55d7dc <startup-0x1faa2824>
    3594:	01460100 	mrseq	r0, (UNDEF: 86)
    3598:	0000012e 	andeq	r0, r0, lr, lsr #2
    359c:	13649102 	cmnne	r4, #-2147483648	; 0x80000000
    35a0:	0000199c 	muleq	r0, ip, r9
    35a4:	2e014601 	cfmadd32cs	mvax0, mvfx4, mvfx1, mvfx1
    35a8:	02000001 	andeq	r0, r0, #1
    35ac:	b6186091 			; <UNDEFINED> instruction: 0xb6186091
    35b0:	bc200038 	stclt	0, cr0, [r0], #-224	; 0xffffff20
    35b4:	13000000 	movwne	r0, #0
    35b8:	00001997 	muleq	r0, r7, r9
    35bc:	5b014d01 	blpl	569c8 <startup-0x1ffa9638>
    35c0:	02000000 	andeq	r0, r0, #0
    35c4:	00005f91 	muleq	r0, r1, pc	; <UNPREDICTABLE>
    35c8:	00187011 	andseq	r7, r8, r1, lsl r0
    35cc:	01300100 	teqeq	r0, r0, lsl #2
    35d0:	200037a8 	andcs	r3, r0, r8, lsr #15
    35d4:	000000d6 	ldrdeq	r0, [r0], -r6
    35d8:	05209c01 	streq	r9, [r0, #-3073]!	; 0xfffff3ff
    35dc:	13120000 	tstne	r2, #0
    35e0:	01000018 	tsteq	r0, r8, lsl r0
    35e4:	05200130 	streq	r0, [r0, #-304]!	; 0xfffffed0
    35e8:	91020000 	mrsls	r0, (UNDEF: 2)
    35ec:	00691564 	rsbeq	r1, r9, r4, ror #10
    35f0:	7e013101 	adfvcs	f3, f1, f1
    35f4:	02000001 	andeq	r0, r0, #1
    35f8:	6a157791 	bvs	561444 <startup-0x1fa9ebbc>
    35fc:	01310100 	teqeq	r1, r0, lsl #2
    3600:	0000017e 	andeq	r0, r0, lr, ror r1
    3604:	13769102 	cmnne	r6, #-2147483648	; 0x80000000
    3608:	00001bcd 	andeq	r1, r0, sp, asr #23
    360c:	7e013101 	adfvcs	f3, f1, f1
    3610:	02000001 	andeq	r0, r0, #1
    3614:	63156f91 	tstvs	r5, #580	; 0x244
    3618:	01310100 	teqeq	r1, r0, lsl #2
    361c:	0000017e 	andeq	r0, r0, lr, ror r1
    3620:	15759102 	ldrbne	r9, [r5, #-258]!	; 0xfffffefe
    3624:	3201006b 	andcc	r0, r1, #107	; 0x6b
    3628:	00004e01 	andeq	r4, r0, r1, lsl #28
    362c:	70910200 	addsvc	r0, r1, r0, lsl #4
    3630:	7e040500 	cfsh32vc	mvfx0, mvfx4, #0
    3634:	11000001 	tstne	r0, r1
    3638:	0000181a 	andeq	r1, r0, sl, lsl r8
    363c:	08010801 	stmdaeq	r1, {r0, fp}
    3640:	a0200036 	eorge	r0, r0, r6, lsr r0
    3644:	01000001 	tsteq	r0, r1
    3648:	0005a09c 	muleq	r5, ip, r0
    364c:	00781700 	rsbseq	r1, r8, r0, lsl #14
    3650:	2e010801 	cdpcs	8, 0, cr0, cr1, cr1, {0}
    3654:	02000001 	andeq	r0, r0, #1
    3658:	79176491 	ldmdbvc	r7, {r0, r4, r7, sl, sp, lr}
    365c:	01080100 	mrseq	r0, (UNDEF: 24)
    3660:	0000012e 	andeq	r0, r0, lr, lsr #2
    3664:	17609102 	strbne	r9, [r0, -r2, lsl #2]!
    3668:	00746573 	rsbseq	r6, r4, r3, ror r5
    366c:	2e010801 	cdpcs	8, 0, cr0, cr1, cr1, {0}
    3670:	02000001 	andeq	r0, r0, #1
    3674:	72135c91 	andsvc	r5, r3, #37120	; 0x9100
    3678:	01000019 	tsteq	r0, r9, lsl r0
    367c:	017e0109 	cmneq	lr, r9, lsl #2
    3680:	91020000 	mrsls	r0, (UNDEF: 2)
    3684:	00631577 	rsbeq	r1, r3, r7, ror r5
    3688:	7e010901 	vmlavc.f16	s0, s2, s2	; <UNPREDICTABLE>
    368c:	02000001 	andeq	r0, r0, #1
    3690:	cd136f91 	ldcgt	15, cr6, [r3, #-580]	; 0xfffffdbc
    3694:	0100001b 	tsteq	r0, fp, lsl r0
    3698:	017e0109 	cmneq	lr, r9, lsl #2
    369c:	91020000 	mrsls	r0, (UNDEF: 2)
    36a0:	19d01376 	ldmibne	r0, {r1, r2, r4, r5, r6, r8, r9, ip}^
    36a4:	0a010000 	beq	436ac <startup-0x1ffbc954>
    36a8:	00012e01 	andeq	r2, r1, r1, lsl #28
    36ac:	70910200 	addsvc	r0, r1, r0, lsl #4
    36b0:	18651900 	stmdane	r5!, {r8, fp, ip}^
    36b4:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    36b8:	20003488 	andcs	r3, r0, r8, lsl #9
    36bc:	00000180 	andeq	r0, r0, r0, lsl #3
    36c0:	06069c01 	streq	r9, [r6], -r1, lsl #24
    36c4:	781a0000 	ldmdavc	sl, {}	; <UNPREDICTABLE>
    36c8:	2ede0100 	cdpcs	1, 13, cr0, cr14, cr0, {0}
    36cc:	02000001 	andeq	r0, r0, #1
    36d0:	791a6c91 	ldmdbvc	sl, {r0, r4, r7, sl, fp, sp, lr}
    36d4:	2ede0100 	cdpcs	1, 13, cr0, cr14, cr0, {0}
    36d8:	02000001 	andeq	r0, r0, #1
    36dc:	731a6891 	tstvc	sl, #9502720	; 0x910000
    36e0:	01007465 	tsteq	r0, r5, ror #8
    36e4:	00012ede 	ldrdeq	r2, [r1], -lr
    36e8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    36ec:	0019291b 	andseq	r2, r9, fp, lsl r9
    36f0:	2ede0100 	cdpcs	1, 13, cr0, cr14, cr0, {0}
    36f4:	02000001 	andeq	r0, r0, #1
    36f8:	721c6091 	andsvc	r6, ip, #145	; 0x91
    36fc:	01000019 	tsteq	r0, r9, lsl r0
    3700:	00017edf 	ldrdeq	r7, [r1], -pc	; <UNPREDICTABLE>
    3704:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3708:	0019d01c 	andseq	sp, r9, ip, lsl r0
    370c:	2ee00100 	cdpcs	1, 14, cr0, cr0, cr0, {0}
    3710:	02000001 	andeq	r0, r0, #1
    3714:	1d007091 	stcne	0, cr7, [r0, #-580]	; 0xfffffdbc
    3718:	00001a23 	andeq	r1, r0, r3, lsr #20
    371c:	3422d101 	strtcc	sp, [r2], #-257	; 0xfffffeff
    3720:	00662000 	rsbeq	r2, r6, r0
    3724:	9c010000 	stcls	0, cr0, [r1], {-0}
    3728:	00000642 	andeq	r0, r0, r2, asr #12
    372c:	0018011c 	andseq	r0, r8, ip, lsl r1
    3730:	7ed20100 	cdpvc	1, 13, cr0, cr2, cr0, {0}
    3734:	02000001 	andeq	r0, r0, #1
    3738:	30187791 	mulscc	r8, r1, r7
    373c:	3e200034 	mcrcc	0, 1, r0, cr0, cr4, {1}
    3740:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    3744:	00646461 	rsbeq	r6, r4, r1, ror #8
    3748:	017ed601 	cmneq	lr, r1, lsl #12
    374c:	91020000 	mrsls	r0, (UNDEF: 2)
    3750:	1f000076 	svcne	0x00000076
    3754:	00001a10 	andeq	r1, r0, r0, lsl sl
    3758:	33b4bd01 			; <UNDEFINED> instruction: 0x33b4bd01
    375c:	006e2000 	rsbeq	r2, lr, r0
    3760:	9c010000 	stcls	0, cr0, [r1], {-0}
    3764:	0019841d 	andseq	r8, r9, sp, lsl r4
    3768:	6eb50100 	frdvss	f0, f5, f0
    376c:	46200033 			; <UNDEFINED> instruction: 0x46200033
    3770:	01000000 	mrseq	r0, (UNDEF: 0)
    3774:	0006859c 	muleq	r6, ip, r5
    3778:	184c1b00 	stmdane	ip, {r8, r9, fp, ip}^
    377c:	b5010000 	strlt	r0, [r1, #-0]
    3780:	0000017e 	andeq	r0, r0, lr, ror r1
    3784:	1b779102 	blne	1de7b94 <startup-0x1e21846c>
    3788:	00001bcd 	andeq	r1, r0, sp, asr #23
    378c:	017eb501 	cmneq	lr, r1, lsl #10
    3790:	91020000 	mrsls	r0, (UNDEF: 2)
    3794:	3e1d0076 	mrccc	0, 0, r0, cr13, cr6, {3}
    3798:	01000018 	tsteq	r0, r8, lsl r0
    379c:	003328ae 	eorseq	r2, r3, lr, lsr #17
    37a0:	00004620 	andeq	r4, r0, r0, lsr #12
    37a4:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
    37a8:	1b000006 	blne	37c8 <startup-0x1fffc838>
    37ac:	0000184c 	andeq	r1, r0, ip, asr #16
    37b0:	017eae01 	cmneq	lr, r1, lsl #28
    37b4:	91020000 	mrsls	r0, (UNDEF: 2)
    37b8:	1bcd1b77 	blne	ff34a59c <firstTime.4040+0xdf33b0e0>
    37bc:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    37c0:	0000017e 	andeq	r0, r0, lr, ror r1
    37c4:	00769102 	rsbseq	r9, r6, r2, lsl #2
    37c8:	0018b31d 	andseq	fp, r8, sp, lsl r3
    37cc:	aa990100 	bge	fe643bd4 <firstTime.4040+0xde634718>
    37d0:	7e200032 	mcrvc	0, 1, r0, cr0, cr2, {1}
    37d4:	01000000 	mrseq	r0, (UNDEF: 0)
    37d8:	0006e99c 	muleq	r6, ip, r9
    37dc:	064a1b00 	strbeq	r1, [sl], -r0, lsl #22
    37e0:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    37e4:	0000017e 	andeq	r0, r0, lr, ror r1
    37e8:	1b779102 	blne	1de7bf8 <startup-0x1e218408>
    37ec:	00001bcd 	andeq	r1, r0, sp, asr #23
    37f0:	017e9901 	cmneq	lr, r1, lsl #18
    37f4:	91020000 	mrsls	r0, (UNDEF: 2)
    37f8:	17200076 			; <UNDEFINED> instruction: 0x17200076
    37fc:	01000019 	tsteq	r0, r9, lsl r0
    3800:	00012e94 	muleq	r1, r4, lr
    3804:	00328000 	eorseq	r8, r2, r0
    3808:	00002a20 	andeq	r2, r0, r0, lsr #20
    380c:	119c0100 	orrsne	r0, ip, r0, lsl #2
    3810:	1b000007 	blne	3834 <startup-0x1fffc7cc>
    3814:	00001bcd 	andeq	r1, r0, sp, asr #23
    3818:	017e9401 	cmneq	lr, r1, lsl #8
    381c:	91020000 	mrsls	r0, (UNDEF: 2)
    3820:	06210077 			; <UNDEFINED> instruction: 0x06210077
    3824:	01000018 	tsteq	r0, r8, lsl r0
    3828:	00017e7b 	andeq	r7, r1, fp, ror lr
    382c:	0031ec00 	eorseq	lr, r1, r0, lsl #24
    3830:	00009420 	andeq	r9, r0, r0, lsr #8
    3834:	469c0100 	ldrmi	r0, [ip], r0, lsl #2
    3838:	1b000007 	blne	385c <startup-0x1fffc7a4>
    383c:	00001bcd 	andeq	r1, r0, sp, asr #23
    3840:	017e7b01 	cmneq	lr, r1, lsl #22
    3844:	91020000 	mrsls	r0, (UNDEF: 2)
    3848:	76721e6f 	ldrbtvc	r1, [r2], -pc, ror #28
    384c:	5b840100 	blpl	fe103c54 <firstTime.4040+0xde0f4798>
    3850:	02000000 	andeq	r0, r0, #0
    3854:	1d007791 	stcne	7, cr7, [r0, #-580]	; 0xfffffdbc
    3858:	000019e8 	andeq	r1, r0, r8, ror #19
    385c:	317e6501 	cmncc	lr, r1, lsl #10
    3860:	006e2000 	rsbeq	r2, lr, r0
    3864:	9c010000 	stcls	0, cr0, [r1], {-0}
    3868:	00000768 	andeq	r0, r0, r8, ror #14
    386c:	0100631e 	tsteq	r0, lr, lsl r3
    3870:	00017e66 	andeq	r7, r1, r6, ror #28
    3874:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3878:	19d61d00 	ldmibne	r6, {r8, sl, fp, ip}^
    387c:	50010000 	andpl	r0, r1, r0
    3880:	20003118 	andcs	r3, r0, r8, lsl r1
    3884:	00000066 	andeq	r0, r0, r6, rrx
    3888:	078c9c01 	streq	r9, [ip, r1, lsl #24]
    388c:	cd1b0000 	ldcgt	0, cr0, [fp, #-0]
    3890:	0100001b 	tsteq	r0, fp, lsl r0
    3894:	00017e50 	andeq	r7, r1, r0, asr lr
    3898:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    389c:	18cf2200 	stmiane	pc, {r9, sp}^	; <UNPREDICTABLE>
    38a0:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    38a4:	200030c0 	andcs	r3, r0, r0, asr #1
    38a8:	00000058 	andeq	r0, r0, r8, asr r0
    38ac:	07ba9c01 	ldreq	r9, [sl, r1, lsl #24]!
    38b0:	781a0000 	ldmdavc	sl, {}	; <UNPREDICTABLE>
    38b4:	7e490100 	dvfvce	f0, f1, f0
    38b8:	02000001 	andeq	r0, r0, #1
    38bc:	631e6f91 	tstvs	lr, #580	; 0x244
    38c0:	7e4a0100 	dvfvce	f0, f2, f0
    38c4:	02000001 	andeq	r0, r0, #1
    38c8:	22007791 	andcs	r7, r0, #38010880	; 0x2440000
    38cc:	00001943 	andeq	r1, r0, r3, asr #18
    38d0:	30704101 	rsbscc	r4, r0, r1, lsl #2
    38d4:	00502000 	subseq	r2, r0, r0
    38d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    38dc:	000007e8 	andeq	r0, r0, r8, ror #15
    38e0:	0100781a 	tsteq	r0, sl, lsl r8
    38e4:	00017e41 	andeq	r7, r1, r1, asr #28
    38e8:	6f910200 	svcvs	0x00910200
    38ec:	0100631e 	tsteq	r0, lr, lsl r3
    38f0:	00017e42 	andeq	r7, r1, r2, asr #28
    38f4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    38f8:	19ab1f00 	stmibne	fp!, {r8, r9, sl, fp, ip}
    38fc:	3a010000 	bcc	43904 <startup-0x1ffbc6fc>
    3900:	20003040 	andcs	r3, r0, r0, asr #32
    3904:	00000030 	andeq	r0, r0, r0, lsr r0
    3908:	541f9c01 	ldrpl	r9, [pc], #-3073	; 3910 <startup-0x1fffc6f0>
    390c:	01000018 	tsteq	r0, r8, lsl r0
    3910:	00302837 	eorseq	r2, r0, r7, lsr r8
    3914:	00001820 	andeq	r1, r0, r0, lsr #16
    3918:	199c0100 	ldmibne	ip, {r8}
    391c:	000019fb 	strdeq	r1, [r0], -fp
    3920:	2ff63201 	svccs	0x00f63201
    3924:	00322000 	eorseq	r2, r2, r0
    3928:	9c010000 	stcls	0, cr0, [r1], {-0}
    392c:	0000083a 	andeq	r0, r0, sl, lsr r8
    3930:	0018131b 	andseq	r1, r8, fp, lsl r3
    3934:	20320100 	eorscs	r0, r2, r0, lsl #2
    3938:	02000005 	andeq	r0, r0, #5
    393c:	691e6c91 	ldmdbvs	lr, {r0, r4, r7, sl, fp, sp, lr}
    3940:	2e330100 	rsfcss	f0, f3, f0
    3944:	02000001 	andeq	r0, r0, #1
    3948:	1d007491 	cfstrsne	mvf7, [r0, #-580]	; 0xfffffdbc
    394c:	00001884 	andeq	r1, r0, r4, lsl #17
    3950:	2fd02101 	svccs	0x00d02101
    3954:	00262000 	eoreq	r2, r6, r0
    3958:	9c010000 	stcls	0, cr0, [r1], {-0}
    395c:	0000085d 	andeq	r0, r0, sp, asr r8
    3960:	00736d1a 	rsbseq	r6, r3, sl, lsl sp
    3964:	004e2101 	subeq	r2, lr, r1, lsl #2
    3968:	91020000 	mrsls	r0, (UNDEF: 2)
    396c:	321d0074 	andscc	r0, sp, #116	; 0x74
    3970:	01000018 	tsteq	r0, r8, lsl r0
    3974:	002fa418 	eoreq	sl, pc, r8, lsl r4	; <UNPREDICTABLE>
    3978:	00002c20 	andeq	r2, r0, r0, lsr #24
    397c:	809c0100 	addshi	r0, ip, r0, lsl #2
    3980:	1a000008 	bne	39a8 <startup-0x1fffc658>
    3984:	01007375 	tsteq	r0, r5, ror r3
    3988:	00004e18 	andeq	r4, r0, r8, lsl lr
    398c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3990:	18a72300 	stmiane	r7!, {r8, r9, sp}
    3994:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    3998:	20002f60 	andcs	r2, r0, r0, ror #30
    399c:	00000044 	andeq	r0, r0, r4, asr #32
    39a0:	58239c01 	stmdapl	r3!, {r0, sl, fp, ip, pc}
    39a4:	01000019 	tsteq	r0, r9, lsl r0
    39a8:	002f1c04 	eoreq	r1, pc, r4, lsl #24
    39ac:	00004420 	andeq	r4, r0, r0, lsr #8
    39b0:	009c0100 	addseq	r0, ip, r0, lsl #2
    39b4:	00000100 	andeq	r0, r0, r0, lsl #2
    39b8:	0bcb0004 	bleq	ff2c39d0 <firstTime.4040+0xdf2b4514>
    39bc:	01040000 	mrseq	r0, (UNDEF: 4)
    39c0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    39c4:	001a430c 	andseq	r4, sl, ip, lsl #6
    39c8:	003d6000 	eorseq	r6, sp, r0
    39cc:	00002820 	andeq	r2, r0, r0, lsr #16
    39d0:	0012e000 	andseq	lr, r2, r0
    39d4:	020c0200 	andeq	r0, ip, #0, 4
    39d8:	00004e05 	andeq	r4, r0, r5, lsl #28
    39dc:	035b0300 	cmpeq	fp, #0, 6
    39e0:	07020000 	streq	r0, [r2, -r0]
    39e4:	0000004e 	andeq	r0, r0, lr, asr #32
    39e8:	07190300 	ldreq	r0, [r9, -r0, lsl #6]
    39ec:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    39f0:	0000004e 	andeq	r0, r0, lr, asr #32
    39f4:	19240304 	stmdbne	r4!, {r2, r8, r9}
    39f8:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    39fc:	00000055 	andeq	r0, r0, r5, asr r0
    3a00:	04040008 	streq	r0, [r4], #-8
    3a04:	00038907 	andeq	r8, r3, r7, lsl #18
    3a08:	5b040500 	blpl	104e10 <startup-0x1fefb1f0>
    3a0c:	04000000 	streq	r0, [r0], #-0
    3a10:	04d30801 	ldrbeq	r0, [r3], #2049	; 0x801
    3a14:	76060000 	strvc	r0, [r6], -r0
    3a18:	0200001a 	andeq	r0, r0, #26
    3a1c:	0000210a 	andeq	r2, r0, sl, lsl #2
    3a20:	00340700 	eorseq	r0, r4, r0, lsl #14
    3a24:	030c0000 	movweq	r0, #49152	; 0xc000
    3a28:	00009e06 	andeq	r9, r0, r6, lsl #28
    3a2c:	05c90300 	strbeq	r0, [r9, #768]	; 0x300
    3a30:	07030000 	streq	r0, [r3, -r0]
    3a34:	0000009e 	muleq	r0, lr, r0
    3a38:	003b0300 	eorseq	r0, fp, r0, lsl #6
    3a3c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    3a40:	0000009e 	muleq	r0, lr, r0
    3a44:	00300304 	eorseq	r0, r0, r4, lsl #6
    3a48:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    3a4c:	0000009e 	muleq	r0, lr, r0
    3a50:	04050008 	streq	r0, [r5], #-8
    3a54:	00000062 	andeq	r0, r0, r2, rrx
    3a58:	00163406 	andseq	r3, r6, r6, lsl #8
    3a5c:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
    3a60:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3a64:	00001a38 	andeq	r1, r0, r8, lsr sl
    3a68:	3d600301 	stclcc	3, cr0, [r0, #-4]!
    3a6c:	00282000 	eoreq	r2, r8, r0
    3a70:	9c010000 	stcls	0, cr0, [r1], {-0}
    3a74:	000000fd 	strdeq	r0, [r0], -sp
    3a78:	001a3d09 	andseq	r3, sl, r9, lsl #26
    3a7c:	fd030100 	stc2	1, cr0, [r3, #-0]
    3a80:	02000000 	andeq	r0, r0, #0
    3a84:	c9097491 	stmdbgt	r9, {r0, r4, r7, sl, ip, sp, lr}
    3a88:	01000005 	tsteq	r0, r5
    3a8c:	00009e03 	andeq	r9, r0, r3, lsl #28
    3a90:	70910200 	addsvc	r0, r1, r0, lsl #4
    3a94:	00003b09 	andeq	r3, r0, r9, lsl #22
    3a98:	9e030100 	adflss	f0, f3, f0
    3a9c:	02000000 	andeq	r0, r0, #0
    3aa0:	30096c91 	mulcc	r9, r1, ip
    3aa4:	01000000 	mrseq	r0, (UNDEF: 0)
    3aa8:	00009e03 	andeq	r9, r0, r3, lsl #28
    3aac:	68910200 	ldmvs	r1, {r9}
    3ab0:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    3ab4:	00000000 	andeq	r0, r0, r0
    3ab8:	000000c3 	andeq	r0, r0, r3, asr #1
    3abc:	0c520004 	mrrceq	0, 0, r0, r2, cr4
    3ac0:	01040000 	mrseq	r0, (UNDEF: 4)
    3ac4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3ac8:	001a7d0c 	andseq	r7, sl, ip, lsl #26
    3acc:	003d8800 	eorseq	r8, sp, r0, lsl #16
    3ad0:	00002820 	andeq	r2, r0, r0, lsr #16
    3ad4:	00135600 	andseq	r5, r3, r0, lsl #12
    3ad8:	020c0200 	andeq	r0, ip, #0, 4
    3adc:	00004e05 	andeq	r4, r0, r5, lsl #28
    3ae0:	035b0300 	cmpeq	fp, #0, 6
    3ae4:	07020000 	streq	r0, [r2, -r0]
    3ae8:	0000004e 	andeq	r0, r0, lr, asr #32
    3aec:	07190300 	ldreq	r0, [r9, -r0, lsl #6]
    3af0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    3af4:	0000004e 	andeq	r0, r0, lr, asr #32
    3af8:	19240304 	stmdbne	r4!, {r2, r8, r9}
    3afc:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    3b00:	00000055 	andeq	r0, r0, r5, asr r0
    3b04:	04040008 	streq	r0, [r4], #-8
    3b08:	00038907 	andeq	r8, r3, r7, lsl #18
    3b0c:	5b040500 	blpl	104f14 <startup-0x1fefb0ec>
    3b10:	04000000 	streq	r0, [r0], #-0
    3b14:	04d30801 	ldrbeq	r0, [r3], #2049	; 0x801
    3b18:	76060000 	strvc	r0, [r6], -r0
    3b1c:	0200001a 	andeq	r0, r0, #26
    3b20:	0000210a 	andeq	r2, r0, sl, lsl #2
    3b24:	1a710700 	bne	1c4572c <startup-0x1e3ba8d4>
    3b28:	03010000 	movweq	r0, #4096	; 0x1000
    3b2c:	20003d88 	andcs	r3, r0, r8, lsl #27
    3b30:	00000028 	andeq	r0, r0, r8, lsr #32
    3b34:	00b99c01 	adcseq	r9, r9, r1, lsl #24
    3b38:	73080000 	movwvc	r0, #32768	; 0x8000
    3b3c:	b9030100 	stmdblt	r3, {r8}
    3b40:	02000000 	andeq	r0, r0, #0
    3b44:	24097491 	strcs	r7, [r9], #-1169	; 0xfffffb6f
    3b48:	01000019 	tsteq	r0, r9, lsl r0
    3b4c:	00005503 	andeq	r5, r0, r3, lsl #10
    3b50:	70910200 	addsvc	r0, r1, r0, lsl #4
    3b54:	00035b09 	andeq	r5, r3, r9, lsl #22
    3b58:	bf030100 	svclt	0x00030100
    3b5c:	02000000 	andeq	r0, r0, #0
    3b60:	19096c91 	stmdbne	r9, {r0, r4, r7, sl, fp, sp, lr}
    3b64:	01000007 	tsteq	r0, r7
    3b68:	0000bf03 	andeq	fp, r0, r3, lsl #30
    3b6c:	68910200 	ldmvs	r1, {r9}
    3b70:	62040500 	andvs	r0, r4, #0, 10
    3b74:	0a000000 	beq	3b7c <startup-0x1fffc484>
    3b78:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    3b7c:	35000074 	strcc	r0, [r0, #-116]	; 0xffffff8c
    3b80:	04000001 	streq	r0, [r0], #-1
    3b84:	000ce400 	andeq	lr, ip, r0, lsl #8
    3b88:	9f010400 	svcls	0x00010400
    3b8c:	0c000000 	stceq	0, cr0, [r0], {-0}
    3b90:	00001ae3 	andeq	r1, r0, r3, ror #21
    3b94:	20003db0 			; <UNDEFINED> instruction: 0x20003db0
    3b98:	0000006c 	andeq	r0, r0, ip, rrx
    3b9c:	000013c2 	andeq	r1, r0, r2, asr #7
    3ba0:	13021802 	movwne	r1, #10242	; 0x2802
    3ba4:	000000ae 	andeq	r0, r0, lr, lsr #1
    3ba8:	001aac03 	andseq	sl, sl, r3, lsl #24
    3bac:	ae140200 	cdpge	2, 1, cr0, cr4, cr0, {0}
    3bb0:	00000000 	andeq	r0, r0, r0
    3bb4:	001ac503 	andseq	ip, sl, r3, lsl #10
    3bb8:	b5150200 	ldrlt	r0, [r5, #-512]	; 0xfffffe00
    3bbc:	04000000 	streq	r0, [r0], #-0
    3bc0:	001b1003 	andseq	r1, fp, r3
    3bc4:	b5160200 	ldrlt	r0, [r6, #-512]	; 0xfffffe00
    3bc8:	06000000 	streq	r0, [r0], -r0
    3bcc:	001b3203 	andseq	r3, fp, r3, lsl #4
    3bd0:	ae170200 	cdpge	2, 1, cr0, cr7, cr0, {0}
    3bd4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3bd8:	001ad103 	andseq	sp, sl, r3, lsl #2
    3bdc:	ae180200 	cdpge	2, 1, cr0, cr8, cr0, {0}
    3be0:	0c000000 	stceq	0, cr0, [r0], {-0}
    3be4:	001b4203 	andseq	r4, fp, r3, lsl #4
    3be8:	bc190200 	lfmlt	f0, 4, [r9], {-0}
    3bec:	10000000 	andne	r0, r0, r0
    3bf0:	001b3a03 	andseq	r3, fp, r3, lsl #20
    3bf4:	bc1a0200 	lfmlt	f0, 4, [sl], {-0}
    3bf8:	11000000 	mrsne	r0, (UNDEF: 0)
    3bfc:	001ad703 	andseq	sp, sl, r3, lsl #14
    3c00:	b51b0200 	ldrlt	r0, [fp, #-512]	; 0xfffffe00
    3c04:	12000000 	andne	r0, r0, #0
    3c08:	001b2b03 	andseq	r2, fp, r3, lsl #22
    3c0c:	bc1c0200 	lfmlt	f0, 4, [ip], {-0}
    3c10:	14000000 	strne	r0, [r0], #-0
    3c14:	001abd03 	andseq	fp, sl, r3, lsl #26
    3c18:	bc1d0200 	lfmlt	f0, 4, [sp], {-0}
    3c1c:	15000000 	strne	r0, [r0, #-0]
    3c20:	001b4903 	andseq	r4, fp, r3, lsl #18
    3c24:	b51e0200 	ldrlt	r0, [lr, #-512]	; 0xfffffe00
    3c28:	16000000 	strne	r0, [r0], -r0
    3c2c:	07040400 	streq	r0, [r4, -r0, lsl #8]
    3c30:	00000389 	andeq	r0, r0, r9, lsl #7
    3c34:	83070204 	movwhi	r0, #29188	; 0x7204
    3c38:	04000003 	streq	r0, [r0], #-3
    3c3c:	04d30801 	ldrbeq	r0, [r3], #2049	; 0x801
    3c40:	cc050000 	stcgt	0, cr0, [r5], {-0}
    3c44:	0200001a 	andeq	r0, r0, #26
    3c48:	0000211f 	andeq	r2, r0, pc, lsl r1
    3c4c:	1b1b0600 	blne	6c5454 <startup-0x1f93abac>
    3c50:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    3c54:	00000104 	andeq	r0, r0, r4, lsl #2
    3c58:	20003de8 	andcs	r3, r0, r8, ror #27
    3c5c:	00000034 	andeq	r0, r0, r4, lsr r0
    3c60:	01049c01 	tsteq	r4, r1, lsl #24
    3c64:	62070000 	andvs	r0, r7, #0
    3c68:	01007469 	tsteq	r0, r9, ror #8
    3c6c:	0001040e 	andeq	r0, r1, lr, lsl #8
    3c70:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3c74:	4c494408 	cfstrdmi	mvd4, [r9], {8}
    3c78:	0b0f0100 	bleq	3c4080 <startup-0x1fc3bf80>
    3c7c:	02000001 	andeq	r0, r0, #1
    3c80:	09006f91 	stmdbeq	r0, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
    3c84:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    3c88:	01040074 	tsteq	r4, r4, ror r0
    3c8c:	0004dc08 	andeq	sp, r4, r8, lsl #24
    3c90:	1b550a00 	blne	1546498 <startup-0x1eab9b68>
    3c94:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    3c98:	0000010b 	andeq	r0, r0, fp, lsl #2
    3c9c:	20003dc8 	andcs	r3, r0, r8, asr #27
    3ca0:	00000020 	andeq	r0, r0, r0, lsr #32
    3ca4:	b20b9c01 	andlt	r9, fp, #256	; 0x100
    3ca8:	0100001a 	tsteq	r0, sl, lsl r0
    3cac:	003db004 	eorseq	fp, sp, r4
    3cb0:	00001820 	andeq	r1, r0, r0, lsr #16
    3cb4:	009c0100 	addseq	r0, ip, r0, lsl #2
    3cb8:	000004ed 	andeq	r0, r0, sp, ror #9
    3cbc:	0da10004 	stceq	0, cr0, [r1, #16]!
    3cc0:	01040000 	mrseq	r0, (UNDEF: 4)
    3cc4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3cc8:	001c9a0c 	andseq	r9, ip, ip, lsl #20
    3ccc:	003e1c00 	eorseq	r1, lr, r0, lsl #24
    3cd0:	00052020 	andeq	r2, r5, r0, lsr #32
    3cd4:	00143200 	andseq	r3, r4, r0, lsl #4
    3cd8:	020c0200 	andeq	r0, ip, #0, 4
    3cdc:	00004e05 	andeq	r4, r0, r5, lsl #28
    3ce0:	035b0300 	cmpeq	fp, #0, 6
    3ce4:	07020000 	streq	r0, [r2, -r0]
    3ce8:	0000004e 	andeq	r0, r0, lr, asr #32
    3cec:	07190300 	ldreq	r0, [r9, -r0, lsl #6]
    3cf0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    3cf4:	0000004e 	andeq	r0, r0, lr, asr #32
    3cf8:	19240304 	stmdbne	r4!, {r2, r8, r9}
    3cfc:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    3d00:	00000055 	andeq	r0, r0, r5, asr r0
    3d04:	04040008 	streq	r0, [r4], #-8
    3d08:	00038907 	andeq	r8, r3, r7, lsl #18
    3d0c:	5b040500 	blpl	105114 <startup-0x1fefaeec>
    3d10:	04000000 	streq	r0, [r0], #-0
    3d14:	04d30801 	ldrbeq	r0, [r3], #2049	; 0x801
    3d18:	76060000 	strvc	r0, [r6], -r0
    3d1c:	0200001a 	andeq	r0, r0, #26
    3d20:	0000210a 	andeq	r2, r0, sl, lsl #2
    3d24:	00340700 	eorseq	r0, r4, r0, lsl #14
    3d28:	030c0000 	movweq	r0, #49152	; 0xc000
    3d2c:	00009e06 	andeq	r9, r0, r6, lsl #28
    3d30:	05c90300 	strbeq	r0, [r9, #768]	; 0x300
    3d34:	07030000 	streq	r0, [r3, -r0]
    3d38:	0000009e 	muleq	r0, lr, r0
    3d3c:	003b0300 	eorseq	r0, fp, r0, lsl #6
    3d40:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    3d44:	0000009e 	muleq	r0, lr, r0
    3d48:	00300304 	eorseq	r0, r0, r4, lsl #6
    3d4c:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    3d50:	0000009e 	muleq	r0, lr, r0
    3d54:	04050008 	streq	r0, [r5], #-8
    3d58:	00000062 	andeq	r0, r0, r2, rrx
    3d5c:	00163406 	andseq	r3, r6, r6, lsl #8
    3d60:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
    3d64:	07000000 	streq	r0, [r0, -r0]
    3d68:	000006de 	ldrdeq	r0, [r0], -lr
    3d6c:	28060424 	stmdacs	r6, {r2, r5, sl}
    3d70:	03000001 	movweq	r0, #1
    3d74:	00000461 	andeq	r0, r0, r1, ror #8
    3d78:	01280704 			; <UNDEFINED> instruction: 0x01280704
    3d7c:	03000000 	movweq	r0, #0
    3d80:	000006ea 	andeq	r0, r0, sl, ror #13
    3d84:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
    3d88:	03040000 	movweq	r0, #16384	; 0x4000
    3d8c:	0000063a 	andeq	r0, r0, sl, lsr r6
    3d90:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
    3d94:	03080000 	movweq	r0, #32768	; 0x8000
    3d98:	00000666 	andeq	r0, r0, r6, ror #12
    3d9c:	01460c04 	cmpeq	r6, r4, lsl #24
    3da0:	030c0000 	movweq	r0, #49152	; 0xc000
    3da4:	00000342 	andeq	r0, r0, r2, asr #6
    3da8:	01460d04 	cmpeq	r6, r4, lsl #26
    3dac:	03100000 	tsteq	r0, #0
    3db0:	00000473 	andeq	r0, r0, r3, ror r4
    3db4:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
    3db8:	03140000 	tsteq	r4, #0
    3dbc:	00000070 	andeq	r0, r0, r0, ror r0
    3dc0:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
    3dc4:	03180000 	tsteq	r8, #0
    3dc8:	000003d9 	ldrdeq	r0, [r0], -r9
    3dcc:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
    3dd0:	031c0000 	tsteq	ip, #0
    3dd4:	000003e9 	andeq	r0, r0, r9, ror #7
    3dd8:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
    3ddc:	00200000 	eoreq	r0, r0, r0
    3de0:	00a40405 	adceq	r0, r4, r5, lsl #8
    3de4:	04080000 	streq	r0, [r8], #-0
    3de8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    3dec:	01400900 	cmpeq	r0, r0, lsl #18
    3df0:	400a0000 	andmi	r0, sl, r0
    3df4:	00000001 	andeq	r0, r0, r1
    3df8:	00af0405 	adceq	r0, pc, r5, lsl #8
    3dfc:	04050000 	streq	r0, [r5], #-0
    3e00:	00000135 	andeq	r0, r0, r5, lsr r1
    3e04:	0006df06 	andeq	sp, r6, r6, lsl #30
    3e08:	af150400 	svcge	0x00150400
    3e0c:	0b000000 	bleq	3e14 <startup-0x1fffc1ec>
    3e10:	00000162 	andeq	r0, r0, r2, ror #2
    3e14:	00000162 	andeq	r0, r0, r2, ror #2
    3e18:	0405000c 	streq	r0, [r5], #-12
    3e1c:	0000014c 	andeq	r0, r0, ip, asr #2
    3e20:	0005560d 	andeq	r5, r5, sp, lsl #12
    3e24:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
    3e28:	0d000001 	stceq	0, cr0, [r0, #-4]
    3e2c:	00000424 	andeq	r0, r0, r4, lsr #8
    3e30:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
    3e34:	a2060000 	andge	r0, r6, #0
    3e38:	05000006 	streq	r0, [r0, #-6]
    3e3c:	00005b24 	andeq	r5, r0, r4, lsr #22
    3e40:	017e0b00 	cmneq	lr, r0, lsl #22
    3e44:	019a0000 	orrseq	r0, sl, r0
    3e48:	9a0e0000 	bls	383e50 <startup-0x1fc7c1b0>
    3e4c:	ff000001 			; <UNDEFINED> instruction: 0xff000001
    3e50:	04040003 	streq	r0, [r4], #-3
    3e54:	00040607 	andeq	r0, r4, r7, lsl #12
    3e58:	185a0d00 	ldmdane	sl, {r8, sl, fp}^
    3e5c:	2b050000 	blcs	143e64 <startup-0x1febc19c>
    3e60:	00000189 	andeq	r0, r0, r9, lsl #3
    3e64:	0002480d 	andeq	r4, r2, sp, lsl #16
    3e68:	892c0500 	stmdbhi	ip!, {r8, sl}
    3e6c:	0d000001 	stceq	0, cr0, [r0, #-4]
    3e70:	000004e1 	andeq	r0, r0, r1, ror #9
    3e74:	01892d05 	orreq	r2, r9, r5, lsl #26
    3e78:	6b0d0000 	blvs	343e80 <startup-0x1fcbc180>
    3e7c:	05000003 	streq	r0, [r0, #-3]
    3e80:	0001892e 	andeq	r8, r1, lr, lsr #18
    3e84:	02d00d00 	sbcseq	r0, r0, #0, 26
    3e88:	2f050000 	svccs	0x00050000
    3e8c:	00000189 	andeq	r0, r0, r9, lsl #3
    3e90:	0006c00d 	andeq	ip, r6, sp
    3e94:	89300500 	ldmdbhi	r0!, {r8, sl}
    3e98:	0d000001 	stceq	0, cr0, [r0, #-4]
    3e9c:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
    3ea0:	01893105 	orreq	r3, r9, r5, lsl #2
    3ea4:	200f0000 	andcs	r0, pc, r0
    3ea8:	0100001c 	tsteq	r0, ip, lsl r0
    3eac:	0042b8e4 	subeq	fp, r2, r4, ror #17
    3eb0:	00008420 	andeq	r8, r0, r0, lsr #8
    3eb4:	2c9c0100 	ldfcss	f0, [ip], {0}
    3eb8:	10000002 	andne	r0, r0, r2
    3ebc:	e5010073 	str	r0, [r1, #-115]	; 0xffffff8d
    3ec0:	0000022c 	andeq	r0, r0, ip, lsr #4
    3ec4:	116c9102 	cmnne	ip, r2, lsl #2
    3ec8:	00001bfb 	strdeq	r1, [r0], -fp
    3ecc:	0239e601 	eorseq	lr, r9, #1048576	; 0x100000
    3ed0:	91020000 	mrsls	r0, (UNDEF: 2)
    3ed4:	1c01115c 	stfnes	f1, [r1], {92}	; 0x5c
    3ed8:	e7010000 	str	r0, [r1, -r0]
    3edc:	00000249 	andeq	r0, r0, r9, asr #4
    3ee0:	00489102 	subeq	r9, r8, r2, lsl #2
    3ee4:	02320405 	eorseq	r0, r2, #83886080	; 0x5000000
    3ee8:	01040000 	mrseq	r0, (UNDEF: 4)
    3eec:	0004dc08 	andeq	sp, r4, r8, lsl #24
    3ef0:	02320b00 	eorseq	r0, r2, #0, 22
    3ef4:	02490000 	subeq	r0, r9, #0
    3ef8:	9a120000 	bls	483f00 <startup-0x1fb7c100>
    3efc:	0c000001 	stceq	0, cr0, [r0], {1}
    3f00:	02320b00 	eorseq	r0, r2, #0, 22
    3f04:	02590000 	subseq	r0, r9, #0
    3f08:	9a120000 	bls	483f10 <startup-0x1fb7c0f0>
    3f0c:	13000001 	movwne	r0, #1
    3f10:	1bb10f00 	blne	fec47b18 <firstTime.4040+0xdec3865c>
    3f14:	cc010000 	stcgt	0, cr0, [r1], {-0}
    3f18:	2000422a 	andcs	r4, r0, sl, lsr #4
    3f1c:	0000008e 	andeq	r0, r0, lr, lsl #1
    3f20:	02b39c01 	adcseq	r9, r3, #256	; 0x100
    3f24:	e9130000 	ldmdb	r3, {}	; <UNPREDICTABLE>
    3f28:	0100001c 	tsteq	r0, ip, lsl r0
    3f2c:	00022ccc 	andeq	r2, r2, ip, asr #25
    3f30:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3f34:	00028613 	andeq	r8, r2, r3, lsl r6
    3f38:	2ccc0100 	stfcse	f0, [ip], {0}
    3f3c:	02000002 	andeq	r0, r0, #2
    3f40:	93136891 	tstls	r3, #9502720	; 0x910000
    3f44:	0100001c 	tsteq	r0, ip, lsl r0
    3f48:	00012ecc 	andeq	r2, r1, ip, asr #29
    3f4c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3f50:	001b6f13 	andseq	r6, fp, r3, lsl pc
    3f54:	2ecc0100 	polcse	f0, f4, f0
    3f58:	02000001 	andeq	r0, r0, #1
    3f5c:	69106091 	ldmdbvs	r0, {r0, r4, r7, sp, lr}
    3f60:	2ed00100 	cdpcs	1, 13, cr0, cr0, cr0, {0}
    3f64:	02000001 	andeq	r0, r0, #1
    3f68:	0f007491 	svceq	0x00007491
    3f6c:	00001c52 	andeq	r1, r0, r2, asr ip
    3f70:	41ccbd01 	bicmi	fp, ip, r1, lsl #26
    3f74:	005e2000 	subseq	r2, lr, r0
    3f78:	9c010000 	stcls	0, cr0, [r1], {-0}
    3f7c:	000002e5 	andeq	r0, r0, r5, ror #5
    3f80:	001ce913 	andseq	lr, ip, r3, lsl r9
    3f84:	2cbd0100 	ldfcss	f0, [sp]
    3f88:	02000002 	andeq	r0, r0, #2
    3f8c:	86137491 			; <UNDEFINED> instruction: 0x86137491
    3f90:	01000002 	tsteq	r0, r2
    3f94:	00022cbd 			; <UNDEFINED> instruction: 0x00022cbd
    3f98:	70910200 	addsvc	r0, r1, r0, lsl #4
    3f9c:	1ba50f00 	blne	fe947ba4 <firstTime.4040+0xde9386e8>
    3fa0:	ad010000 	stcge	0, cr0, [r1, #-0]
    3fa4:	20004162 	andcs	r4, r0, r2, ror #2
    3fa8:	0000006a 	andeq	r0, r0, sl, rrx
    3fac:	03159c01 	tsteq	r5, #256	; 0x100
    3fb0:	73100000 	tstvc	r0, #0
    3fb4:	2cae0100 	stfcss	f0, [lr]
    3fb8:	02000002 	andeq	r0, r0, #2
    3fbc:	e0116c91 	muls	r1, r1, ip
    3fc0:	01000018 	tsteq	r0, r8, lsl r0
    3fc4:	000315af 	andeq	r1, r3, pc, lsr #11
    3fc8:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    3fcc:	02320b00 	eorseq	r0, r2, #0, 22
    3fd0:	03250000 			; <UNDEFINED> instruction: 0x03250000
    3fd4:	9a120000 	bls	483fdc <startup-0x1fb7c024>
    3fd8:	14000001 	strne	r0, [r0], #-1
    3fdc:	1b861400 	blne	fe188fe4 <firstTime.4040+0xde179b28>
    3fe0:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    3fe4:	20004150 	andcs	r4, r0, r0, asr r1
    3fe8:	00000012 	andeq	r0, r0, r2, lsl r0
    3fec:	5e159c01 	cdppl	12, 1, cr9, cr5, cr1, {0}
    3ff0:	0100001b 	tsteq	r0, fp, lsl r0
    3ff4:	0041369f 	umaaleq	r3, r1, pc, r6	; <UNPREDICTABLE>
    3ff8:	00001a20 	andeq	r1, r0, r0, lsr #20
    3ffc:	149c0100 	ldrne	r0, [ip], #256	; 0x100
    4000:	00001b93 	muleq	r0, r3, fp
    4004:	409c8301 	addsmi	r8, ip, r1, lsl #6
    4008:	009a2000 	addseq	r2, sl, r0
    400c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4010:	001c5e0f 	andseq	r5, ip, pc, lsl #28
    4014:	4c7b0100 	ldfmie	f0, [fp], #-0
    4018:	50200040 	eorpl	r0, r0, r0, asr #32
    401c:	01000000 	mrseq	r0, (UNDEF: 0)
    4020:	0003989c 	muleq	r3, ip, r8
    4024:	6f721600 	svcvs	0x00721600
    4028:	7b010077 	blvc	4420c <startup-0x1ffbbdf4>
    402c:	0000005b 	andeq	r0, r0, fp, asr r0
    4030:	136f9102 	cmnne	pc, #-2147483648	; 0x80000000
    4034:	00001b9e 	muleq	r0, lr, fp
    4038:	005b7b01 	subseq	r7, fp, r1, lsl #22
    403c:	91020000 	mrsls	r0, (UNDEF: 2)
    4040:	1c07116e 	stfnes	f1, [r7], {110}	; 0x6e
    4044:	7c010000 	stcvc	0, cr0, [r1], {-0}
    4048:	0000005b 	andeq	r0, r0, fp, asr r0
    404c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    4050:	001c820f 	andseq	r8, ip, pc, lsl #4
    4054:	10740100 	rsbsne	r0, r4, r0, lsl #2
    4058:	3c200040 	stccc	0, cr0, [r0], #-256	; 0xffffff00
    405c:	01000000 	mrseq	r0, (UNDEF: 0)
    4060:	0003ba9c 	muleq	r3, ip, sl
    4064:	00631600 	rsbeq	r1, r3, r0, lsl #12
    4068:	005b7401 	subseq	r7, fp, r1, lsl #8
    406c:	91020000 	mrsls	r0, (UNDEF: 2)
    4070:	c2170077 	andsgt	r0, r7, #119	; 0x77
    4074:	0100001b 	tsteq	r0, fp, lsl r0
    4078:	00005b6a 	andeq	r5, r0, sl, ror #22
    407c:	003fdc00 	eorseq	sp, pc, r0, lsl #24
    4080:	00003420 	andeq	r3, r0, r0, lsr #8
    4084:	e09c0100 	adds	r0, ip, r0, lsl #2
    4088:	10000003 	andne	r0, r0, r3
    408c:	6b010063 	blvs	44220 <startup-0x1ffbbde0>
    4090:	0000005b 	andeq	r0, r0, fp, asr r0
    4094:	00779102 	rsbseq	r9, r7, r2, lsl #2
    4098:	001c6b0f 	andseq	r6, ip, pc, lsl #22
    409c:	ac630100 	stfgee	f0, [r3], #-0
    40a0:	3020003f 	eorcc	r0, r0, pc, lsr r0
    40a4:	01000000 	mrseq	r0, (UNDEF: 0)
    40a8:	0004029c 	muleq	r4, ip, r2
    40ac:	00631600 	rsbeq	r1, r3, r0, lsl #12
    40b0:	005b6301 	subseq	r6, fp, r1, lsl #6
    40b4:	91020000 	mrsls	r0, (UNDEF: 2)
    40b8:	76170077 			; <UNDEFINED> instruction: 0x76170077
    40bc:	0100001b 	tsteq	r0, fp, lsl r0
    40c0:	00005b57 	andeq	r5, r0, r7, asr fp
    40c4:	003f5800 	eorseq	r5, pc, r0, lsl #16
    40c8:	00005420 	andeq	r5, r0, r0, lsr #8
    40cc:	299c0100 	ldmibcs	ip, {r8}
    40d0:	10000004 	andne	r0, r0, r4
    40d4:	01007672 	tsteq	r0, r2, ror r6
    40d8:	00005b5c 	andeq	r5, r0, ip, asr fp
    40dc:	6f910200 	svcvs	0x00910200
    40e0:	1c2b1700 	stcne	7, cr1, [fp], #-0
    40e4:	4b010000 	blmi	440ec <startup-0x1ffbbf14>
    40e8:	0000005b 	andeq	r0, r0, fp, asr r0
    40ec:	20003f04 	andcs	r3, r0, r4, lsl #30
    40f0:	00000054 	andeq	r0, r0, r4, asr r0
    40f4:	04509c01 	ldrbeq	r9, [r0], #-3073	; 0xfffff3ff
    40f8:	72100000 	andsvc	r0, r0, #0
    40fc:	50010076 	andpl	r0, r1, r6, ror r0
    4100:	0000005b 	andeq	r0, r0, fp, asr r0
    4104:	006f9102 	rsbeq	r9, pc, r2, lsl #2
    4108:	001c0f0f 	andseq	r0, ip, pc, lsl #30
    410c:	da450100 	ble	1144514 <startup-0x1eebbaec>
    4110:	2a20003e 	bcs	804210 <startup-0x1f7fbdf0>
    4114:	01000000 	mrseq	r0, (UNDEF: 0)
    4118:	0004749c 	muleq	r4, ip, r4
    411c:	19241300 	stmdbne	r4!, {r8, r9, ip}
    4120:	45010000 	strmi	r0, [r1, #-0]
    4124:	0000005b 	andeq	r0, r0, fp, asr r0
    4128:	00779102 	rsbseq	r9, r7, r2, lsl #2
    412c:	001beb0f 	andseq	lr, fp, pc, lsl #22
    4130:	b03f0100 	eorslt	r0, pc, r0, lsl #2
    4134:	2a20003e 	bcs	804234 <startup-0x1f7fbdcc>
    4138:	01000000 	mrseq	r0, (UNDEF: 0)
    413c:	0004989c 	muleq	r4, ip, r8
    4140:	184c1300 	stmdane	ip, {r8, r9, ip}^
    4144:	3f010000 	svccc	0x00010000
    4148:	0000005b 	andeq	r0, r0, fp, asr r0
    414c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    4150:	001c3d18 	andseq	r3, ip, r8, lsl sp
    4154:	60370100 	eorsvs	r0, r7, r0, lsl #2
    4158:	5020003e 	eorpl	r0, r0, lr, lsr r0
    415c:	01000000 	mrseq	r0, (UNDEF: 0)
    4160:	0004c69c 	muleq	r4, ip, r6
    4164:	00781600 	rsbseq	r1, r8, r0, lsl #12
    4168:	005b3701 	subseq	r3, fp, r1, lsl #14
    416c:	91020000 	mrsls	r0, (UNDEF: 2)
    4170:	0063106f 	rsbeq	r1, r3, pc, rrx
    4174:	005b3901 	subseq	r3, fp, r1, lsl #18
    4178:	91020000 	mrsls	r0, (UNDEF: 2)
    417c:	d8190077 	ldmdale	r9, {r0, r1, r2, r4, r5, r6}
    4180:	0100001b 	tsteq	r0, fp, lsl r0
    4184:	003e1c2f 	eorseq	r1, lr, pc, lsr #24
    4188:	00004420 	andeq	r4, r0, r0, lsr #8
    418c:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    4190:	2f010078 	svccs	0x00010078
    4194:	0000005b 	andeq	r0, r0, fp, asr r0
    4198:	106f9102 	rsbne	r9, pc, r2, lsl #2
    419c:	31010063 	tstcc	r1, r3, rrx
    41a0:	0000005b 	andeq	r0, r0, fp, asr r0
    41a4:	00779102 	rsbseq	r9, r7, r2, lsl #2
    41a8:	00014000 	andeq	r4, r1, r0
    41ac:	1f000400 	svcne	0x00000400
    41b0:	0400000f 	streq	r0, [r0], #-15
    41b4:	00009f01 	andeq	r9, r0, r1, lsl #30
    41b8:	1cee0c00 	stclne	12, cr0, [lr]
    41bc:	433c0000 	teqmi	ip, #0
    41c0:	00942000 	addseq	r2, r4, r0
    41c4:	15900000 	ldrne	r0, [r0]
    41c8:	98020000 	stmdals	r2, {}	; <UNPREDICTABLE>
    41cc:	14000006 	strne	r0, [r0], #-6
    41d0:	006a0402 	rsbeq	r0, sl, r2, lsl #8
    41d4:	e9030000 	stmdb	r3, {}	; <UNPREDICTABLE>
    41d8:	0200001c 	andeq	r0, r0, #28
    41dc:	00006a05 	andeq	r6, r0, r5, lsl #20
    41e0:	86030000 	strhi	r0, [r3], -r0
    41e4:	02000002 	andeq	r0, r0, #2
    41e8:	00006a06 	andeq	r6, r0, r6, lsl #20
    41ec:	f3030400 	vshl.u8	d0, d0, d3
    41f0:	02000003 	andeq	r0, r0, #3
    41f4:	00007708 	andeq	r7, r0, r8, lsl #14
    41f8:	e3030800 	movw	r0, #14336	; 0x3800
    41fc:	02000003 	andeq	r0, r0, #3
    4200:	00007709 	andeq	r7, r0, r9, lsl #14
    4204:	8b030c00 	blhi	c720c <startup-0x1ff38df4>
    4208:	02000002 	andeq	r0, r0, #2
    420c:	0000940c 	andeq	r9, r0, ip, lsl #8
    4210:	04001000 	streq	r1, [r0], #-0
    4214:	00007004 	andeq	r7, r0, r4
    4218:	08010500 	stmdaeq	r1, {r8, sl}
    421c:	000004dc 	ldrdeq	r0, [r0], -ip
    4220:	69050406 	stmdbvs	r5, {r1, r2, sl}
    4224:	0700746e 	streq	r7, [r0, -lr, ror #8]
    4228:	0000008e 	andeq	r0, r0, lr, lsl #1
    422c:	00008e08 	andeq	r8, r0, r8, lsl #28
    4230:	00770800 	rsbseq	r0, r7, r0, lsl #16
    4234:	04000000 	streq	r0, [r0], #-0
    4238:	00002104 	andeq	r2, r0, r4, lsl #2
    423c:	7e040400 	cfcpysvc	mvf0, mvf4
    4240:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    4244:	00000699 	muleq	r0, r9, r6
    4248:	00210d02 	eoreq	r0, r1, r2, lsl #26
    424c:	d00a0000 	andle	r0, sl, r0
    4250:	0100001c 	tsteq	r0, ip, lsl r0
    4254:	0043960c 	subeq	r9, r3, ip, lsl #12
    4258:	00003a20 	andeq	r3, r0, r0, lsr #20
    425c:	f39c0100 	vaddw.u16	q0, q6, d0
    4260:	0b000000 	bleq	4268 <startup-0x1fffbd98>
    4264:	006a626f 	rsbeq	r6, sl, pc, ror #4
    4268:	00f30c01 	rscseq	r0, r3, r1, lsl #24
    426c:	91020000 	mrsls	r0, (UNDEF: 2)
    4270:	1ce90c74 	stclne	12, cr0, [r9], #464	; 0x1d0
    4274:	0c010000 	stceq	0, cr0, [r1], {-0}
    4278:	0000006a 	andeq	r0, r0, sl, rrx
    427c:	0c709102 	ldfeqp	f1, [r0], #-8
    4280:	00000286 	andeq	r0, r0, r6, lsl #5
    4284:	006a0c01 	rsbeq	r0, sl, r1, lsl #24
    4288:	91020000 	mrsls	r0, (UNDEF: 2)
    428c:	03e30c6c 	mvneq	r0, #108, 24	; 0x6c00
    4290:	0c010000 	stceq	0, cr0, [r1], {-0}
    4294:	00000077 	andeq	r0, r0, r7, ror r0
    4298:	00689102 	rsbeq	r9, r8, r2, lsl #2
    429c:	009a0404 	addseq	r0, sl, r4, lsl #8
    42a0:	8b0d0000 	blhi	3442a8 <startup-0x1fcbbd58>
    42a4:	01000002 	tsteq	r0, r2
    42a8:	00433c04 	subeq	r3, r3, r4, lsl #24
    42ac:	00005a20 	andeq	r5, r0, r0, lsr #20
    42b0:	0c9c0100 	ldfeqs	f0, [ip], {0}
    42b4:	00000782 	andeq	r0, r0, r2, lsl #15
    42b8:	00f30401 	rscseq	r0, r3, r1, lsl #8
    42bc:	91020000 	mrsls	r0, (UNDEF: 2)
    42c0:	1cdf0c6c 	ldclne	12, cr0, [pc], {108}	; 0x6c
    42c4:	04010000 	streq	r0, [r1], #-0
    42c8:	00000077 	andeq	r0, r0, r7, ror r0
    42cc:	0e689102 	lgneqe	f1, f2
    42d0:	00001c93 	muleq	r0, r3, ip
    42d4:	00770501 	rsbseq	r0, r7, r1, lsl #10
    42d8:	91020000 	mrsls	r0, (UNDEF: 2)
    42dc:	1b6f0e74 	blne	1bc7cb4 <startup-0x1e43834c>
    42e0:	06010000 	streq	r0, [r1], -r0
    42e4:	00000077 	andeq	r0, r0, r7, ror r0
    42e8:	00709102 	rsbseq	r9, r0, r2, lsl #2
    42ec:	0002e000 	andeq	lr, r2, r0
    42f0:	ea000400 	b	52f8 <startup-0x1fffad08>
    42f4:	0400000f 	streq	r0, [r0], #-15
    42f8:	00009f01 	andeq	r9, r0, r1, lsl #30
    42fc:	1d9b0c00 	ldcne	12, cr0, [fp]
    4300:	43d00000 	bicsmi	r0, r0, #0
    4304:	00e82000 	rsceq	r2, r8, r0
    4308:	160a0000 	strne	r0, [sl], -r0
    430c:	0c020000 	stceq	0, cr0, [r2], {-0}
    4310:	004e0502 	subeq	r0, lr, r2, lsl #10
    4314:	5b030000 	blpl	c431c <startup-0x1ff3bce4>
    4318:	02000003 	andeq	r0, r0, #3
    431c:	00004e07 	andeq	r4, r0, r7, lsl #28
    4320:	19030000 	stmdbne	r3, {}	; <UNPREDICTABLE>
    4324:	02000007 	andeq	r0, r0, #7
    4328:	00004e08 	andeq	r4, r0, r8, lsl #28
    432c:	24030400 	strcs	r0, [r3], #-1024	; 0xfffffc00
    4330:	02000019 	andeq	r0, r0, #25
    4334:	00005509 	andeq	r5, r0, r9, lsl #10
    4338:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    433c:	03890704 	orreq	r0, r9, #4, 14	; 0x100000
    4340:	04050000 	streq	r0, [r5], #-0
    4344:	0000005b 	andeq	r0, r0, fp, asr r0
    4348:	d3080104 	movwle	r0, #33028	; 0x8104
    434c:	06000004 	streq	r0, [r0], -r4
    4350:	00001a76 	andeq	r1, r0, r6, ror sl
    4354:	00210a02 	eoreq	r0, r1, r2, lsl #20
    4358:	34070000 	strcc	r0, [r7], #-0
    435c:	0c000000 	stceq	0, cr0, [r0], {-0}
    4360:	009e0603 	addseq	r0, lr, r3, lsl #12
    4364:	c9030000 	stmdbgt	r3, {}	; <UNPREDICTABLE>
    4368:	03000005 	movweq	r0, #5
    436c:	00009e07 	andeq	r9, r0, r7, lsl #28
    4370:	3b030000 	blcc	c4378 <startup-0x1ff3bc88>
    4374:	03000000 	movweq	r0, #0
    4378:	00009e08 	andeq	r9, r0, r8, lsl #28
    437c:	30030400 	andcc	r0, r3, r0, lsl #8
    4380:	03000000 	movweq	r0, #0
    4384:	00009e09 	andeq	r9, r0, r9, lsl #28
    4388:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    438c:	00006204 	andeq	r6, r0, r4, lsl #4
    4390:	16340600 	ldrtne	r0, [r4], -r0, lsl #12
    4394:	0a030000 	beq	c439c <startup-0x1ff3bc64>
    4398:	0000006d 	andeq	r0, r0, sp, rrx
    439c:	0006de07 	andeq	sp, r6, r7, lsl #28
    43a0:	06042400 	streq	r2, [r4], -r0, lsl #8
    43a4:	00000128 	andeq	r0, r0, r8, lsr #2
    43a8:	00046103 	andeq	r6, r4, r3, lsl #2
    43ac:	28070400 	stmdacs	r7, {sl}
    43b0:	00000001 	andeq	r0, r0, r1
    43b4:	0006ea03 	andeq	lr, r6, r3, lsl #20
    43b8:	2e080400 	cfcpyscs	mvf0, mvf8
    43bc:	04000001 	streq	r0, [r0], #-1
    43c0:	00063a03 	andeq	r3, r6, r3, lsl #20
    43c4:	2e090400 	cfcpyscs	mvf0, mvf9
    43c8:	08000001 	stmdaeq	r0, {r0}
    43cc:	00066603 	andeq	r6, r6, r3, lsl #12
    43d0:	460c0400 	strmi	r0, [ip], -r0, lsl #8
    43d4:	0c000001 	stceq	0, cr0, [r0], {1}
    43d8:	00034203 	andeq	r4, r3, r3, lsl #4
    43dc:	460d0400 	strmi	r0, [sp], -r0, lsl #8
    43e0:	10000001 	andne	r0, r0, r1
    43e4:	00047303 	andeq	r7, r4, r3, lsl #6
    43e8:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
    43ec:	14000001 	strne	r0, [r0], #-1
    43f0:	00007003 	andeq	r7, r0, r3
    43f4:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
    43f8:	18000001 	stmdane	r0, {r0}
    43fc:	0003d903 	andeq	sp, r3, r3, lsl #18
    4400:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
    4404:	1c000001 	stcne	0, cr0, [r0], {1}
    4408:	0003e903 	andeq	lr, r3, r3, lsl #18
    440c:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
    4410:	20000001 	andcs	r0, r0, r1
    4414:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    4418:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    441c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    4420:	40090074 	andmi	r0, r9, r4, ror r0
    4424:	0a000001 	beq	4430 <startup-0x1fffbbd0>
    4428:	00000140 	andeq	r0, r0, r0, asr #2
    442c:	af040500 	svcge	0x00040500
    4430:	05000000 	streq	r0, [r0, #-0]
    4434:	00013504 	andeq	r3, r1, r4, lsl #10
    4438:	06df0600 	ldrbeq	r0, [pc], r0, lsl #12
    443c:	15040000 	strne	r0, [r4, #-0]
    4440:	000000af 	andeq	r0, r0, pc, lsr #1
    4444:	0001620b 	andeq	r6, r1, fp, lsl #4
    4448:	00016200 	andeq	r6, r1, r0, lsl #4
    444c:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    4450:	00014c04 	andeq	r4, r1, r4, lsl #24
    4454:	05560d00 	ldrbeq	r0, [r6, #-3328]	; 0xfffff300
    4458:	1c040000 	stcne	0, cr0, [r4], {-0}
    445c:	00000157 	andeq	r0, r0, r7, asr r1
    4460:	0004240d 	andeq	r2, r4, sp, lsl #8
    4464:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
    4468:	0b000001 	bleq	4474 <startup-0x1fffbb8c>
    446c:	0000005b 	andeq	r0, r0, fp, asr r0
    4470:	0000018f 	andeq	r0, r0, pc, lsl #3
    4474:	00018f0e 	andeq	r8, r1, lr, lsl #30
    4478:	0003ff00 	andeq	pc, r3, r0, lsl #30
    447c:	06070404 	streq	r0, [r7], -r4, lsl #8
    4480:	0f000004 	svceq	0x00000004
    4484:	00001dcb 	andeq	r1, r0, fp, asr #27
    4488:	017e0305 	cmneq	lr, r5, lsl #6
    448c:	03050000 	movweq	r0, #20480	; 0x5000
    4490:	2000d044 	andcs	sp, r0, r4, asr #32
    4494:	001d6b0f 	andseq	r6, sp, pc, lsl #22
    4498:	7e030600 	cfmadd32vc	mvax0, mvfx0, mvfx3, mvfx0
    449c:	05000001 	streq	r0, [r0, #-1]
    44a0:	00d44403 	sbcseq	r4, r4, r3, lsl #8
    44a4:	1d480f20 	stclne	15, cr0, [r8, #-128]	; 0xffffff80
    44a8:	03070000 	movweq	r0, #28672	; 0x7000
    44ac:	0000017e 	andeq	r0, r0, lr, ror r1
    44b0:	d8440305 	stmdale	r4, {r0, r2, r8, r9}^
    44b4:	2d102000 	ldccs	0, cr2, [r0, #-0]
    44b8:	0100001d 	tsteq	r0, sp, lsl r0
    44bc:	00009e08 	andeq	r9, r0, r8, lsl #28
    44c0:	58030500 	stmdapl	r3, {r8, sl}
    44c4:	10200071 	eorne	r0, r0, r1, ror r0
    44c8:	00001e07 	andeq	r1, r0, r7, lsl #28
    44cc:	009e0901 	addseq	r0, lr, r1, lsl #18
    44d0:	03050000 	movweq	r0, #20480	; 0x5000
    44d4:	20007124 	andcs	r7, r0, r4, lsr #2
    44d8:	001d8e10 	andseq	r8, sp, r0, lsl lr
    44dc:	9e0a0100 	adflse	f0, f2, f0
    44e0:	05000000 	streq	r0, [r0, #-0]
    44e4:	00716803 	rsbseq	r6, r1, r3, lsl #16
    44e8:	1dde1020 	ldclne	0, cr1, [lr, #128]	; 0x80
    44ec:	0c010000 	stceq	0, cr0, [r1], {-0}
    44f0:	00000062 	andeq	r0, r0, r2, rrx
    44f4:	71180305 	tstvc	r8, r5, lsl #6
    44f8:	7d102000 	ldcvc	0, cr2, [r0, #-0]
    44fc:	0100001d 	tsteq	r0, sp, lsl r0
    4500:	0000620d 	andeq	r6, r0, sp, lsl #4
    4504:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
    4508:	10200071 	eorne	r0, r0, r1, ror r0
    450c:	00001d5b 	andeq	r1, r0, fp, asr sp
    4510:	00620e01 	rsbeq	r0, r2, r1, lsl #28
    4514:	03050000 	movweq	r0, #20480	; 0x5000
    4518:	20007100 	andcs	r7, r0, r0, lsl #2
    451c:	001dfc10 	andseq	pc, sp, r0, lsl ip	; <UNPREDICTABLE>
    4520:	4c110100 	ldfmis	f0, [r1], {-0}
    4524:	05000001 	streq	r0, [r0, #-1]
    4528:	00712803 	rsbseq	r2, r1, r3, lsl #16
    452c:	1d201020 	stcne	0, cr1, [r0, #-128]!	; 0xffffff80
    4530:	12010000 	andne	r0, r1, #0
    4534:	000000a4 	andeq	r0, r0, r4, lsr #1
    4538:	715c0305 	cmpvc	ip, r5, lsl #6
    453c:	a40b2000 	strge	r2, [fp], #-0
    4540:	61000000 	mrsvs	r0, (UNDEF: 0)
    4544:	11000002 	tstne	r0, r2
    4548:	0000018f 	andeq	r0, r0, pc, lsl #3
    454c:	3a100000 	bcc	404554 <startup-0x1fbfbaac>
    4550:	0100001d 	tsteq	r0, sp, lsl r0
    4554:	00025113 	andeq	r5, r2, r3, lsl r1
    4558:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
    455c:	12200071 	eorne	r0, r0, #113	; 0x71
    4560:	00001def 	andeq	r1, r0, pc, ror #27
    4564:	44442201 	strbmi	r2, [r4], #-513	; 0xfffffdff
    4568:	00742000 	rsbseq	r2, r4, r0
    456c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4570:	000002a7 	andeq	r0, r0, r7, lsr #5
    4574:	001dfc13 	andseq	pc, sp, r3, lsl ip	; <UNPREDICTABLE>
    4578:	62220100 	eorvs	r0, r2, #0, 2
    457c:	02000001 	andeq	r0, r0, #1
    4580:	090f6c91 	stmdbeq	pc, {r0, r4, r7, sl, fp, sp, lr}	; <UNPREDICTABLE>
    4584:	01000009 	tsteq	r0, r9
    4588:	00012e23 	andeq	r2, r1, r3, lsr #28
    458c:	44030500 	strmi	r0, [r3], #-1280	; 0xfffffb00
    4590:	002000dc 	ldrdeq	r0, [r0], -ip	; <UNPREDICTABLE>
    4594:	0004a914 	andeq	sl, r4, r4, lsl r9
    4598:	d0140100 	andsle	r0, r4, r0, lsl #2
    459c:	74200043 	strtvc	r0, [r0], #-67	; 0xffffffbd
    45a0:	01000000 	mrseq	r0, (UNDEF: 0)
    45a4:	0daa0f9c 	stceq	15, cr0, [sl, #624]!	; 0x270
    45a8:	16010000 	strne	r0, [r1], -r0
    45ac:	0000009e 	muleq	r0, lr, r0
    45b0:	0f749102 	svceq	0x00749102
    45b4:	00000db4 			; <UNDEFINED> instruction: 0x00000db4
    45b8:	009e1901 	addseq	r1, lr, r1, lsl #18
    45bc:	91020000 	mrsls	r0, (UNDEF: 2)
    45c0:	0baa0f70 	bleq	fea88388 <firstTime.4040+0xdea78ecc>
    45c4:	1c010000 	stcne	0, cr0, [r1], {-0}
    45c8:	0000009e 	muleq	r0, lr, r0
    45cc:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    45d0:	0002e000 	andeq	lr, r2, r0
    45d4:	f3000400 	vshl.u8	d0, d0, d0
    45d8:	04000010 	streq	r0, [r0], #-16
    45dc:	00009f01 	andeq	r9, r0, r1, lsl #30
    45e0:	1e540c00 	cdpne	12, 5, cr0, cr4, cr0, {0}
    45e4:	44b80000 	ldrtmi	r0, [r8], #0
    45e8:	00e82000 	rsceq	r2, r8, r0
    45ec:	16e40000 	strbtne	r0, [r4], r0
    45f0:	0c020000 	stceq	0, cr0, [r2], {-0}
    45f4:	004e0502 	subeq	r0, lr, r2, lsl #10
    45f8:	5b030000 	blpl	c4600 <startup-0x1ff3ba00>
    45fc:	02000003 	andeq	r0, r0, #3
    4600:	00004e07 	andeq	r4, r0, r7, lsl #28
    4604:	19030000 	stmdbne	r3, {}	; <UNPREDICTABLE>
    4608:	02000007 	andeq	r0, r0, #7
    460c:	00004e08 	andeq	r4, r0, r8, lsl #28
    4610:	24030400 	strcs	r0, [r3], #-1024	; 0xfffffc00
    4614:	02000019 	andeq	r0, r0, #25
    4618:	00005509 	andeq	r5, r0, r9, lsl #10
    461c:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    4620:	03890704 	orreq	r0, r9, #4, 14	; 0x100000
    4624:	04050000 	streq	r0, [r5], #-0
    4628:	0000005b 	andeq	r0, r0, fp, asr r0
    462c:	d3080104 	movwle	r0, #33028	; 0x8104
    4630:	06000004 	streq	r0, [r0], -r4
    4634:	00001a76 	andeq	r1, r0, r6, ror sl
    4638:	00210a02 	eoreq	r0, r1, r2, lsl #20
    463c:	34070000 	strcc	r0, [r7], #-0
    4640:	0c000000 	stceq	0, cr0, [r0], {-0}
    4644:	009e0603 	addseq	r0, lr, r3, lsl #12
    4648:	c9030000 	stmdbgt	r3, {}	; <UNPREDICTABLE>
    464c:	03000005 	movweq	r0, #5
    4650:	00009e07 	andeq	r9, r0, r7, lsl #28
    4654:	3b030000 	blcc	c465c <startup-0x1ff3b9a4>
    4658:	03000000 	movweq	r0, #0
    465c:	00009e08 	andeq	r9, r0, r8, lsl #28
    4660:	30030400 	andcc	r0, r3, r0, lsl #8
    4664:	03000000 	movweq	r0, #0
    4668:	00009e09 	andeq	r9, r0, r9, lsl #28
    466c:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    4670:	00006204 	andeq	r6, r0, r4, lsl #4
    4674:	16340600 	ldrtne	r0, [r4], -r0, lsl #12
    4678:	0a030000 	beq	c4680 <startup-0x1ff3b980>
    467c:	0000006d 	andeq	r0, r0, sp, rrx
    4680:	0006de07 	andeq	sp, r6, r7, lsl #28
    4684:	06042400 	streq	r2, [r4], -r0, lsl #8
    4688:	00000128 	andeq	r0, r0, r8, lsr #2
    468c:	00046103 	andeq	r6, r4, r3, lsl #2
    4690:	28070400 	stmdacs	r7, {sl}
    4694:	00000001 	andeq	r0, r0, r1
    4698:	0006ea03 	andeq	lr, r6, r3, lsl #20
    469c:	2e080400 	cfcpyscs	mvf0, mvf8
    46a0:	04000001 	streq	r0, [r0], #-1
    46a4:	00063a03 	andeq	r3, r6, r3, lsl #20
    46a8:	2e090400 	cfcpyscs	mvf0, mvf9
    46ac:	08000001 	stmdaeq	r0, {r0}
    46b0:	00066603 	andeq	r6, r6, r3, lsl #12
    46b4:	460c0400 	strmi	r0, [ip], -r0, lsl #8
    46b8:	0c000001 	stceq	0, cr0, [r0], {1}
    46bc:	00034203 	andeq	r4, r3, r3, lsl #4
    46c0:	460d0400 	strmi	r0, [sp], -r0, lsl #8
    46c4:	10000001 	andne	r0, r0, r1
    46c8:	00047303 	andeq	r7, r4, r3, lsl #6
    46cc:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
    46d0:	14000001 	strne	r0, [r0], #-1
    46d4:	00007003 	andeq	r7, r0, r3
    46d8:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
    46dc:	18000001 	stmdane	r0, {r0}
    46e0:	0003d903 	andeq	sp, r3, r3, lsl #18
    46e4:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
    46e8:	1c000001 	stcne	0, cr0, [r0], {1}
    46ec:	0003e903 	andeq	lr, r3, r3, lsl #18
    46f0:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
    46f4:	20000001 	andcs	r0, r0, r1
    46f8:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    46fc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4700:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    4704:	40090074 	andmi	r0, r9, r4, ror r0
    4708:	0a000001 	beq	4714 <startup-0x1fffb8ec>
    470c:	00000140 	andeq	r0, r0, r0, asr #2
    4710:	af040500 	svcge	0x00040500
    4714:	05000000 	streq	r0, [r0, #-0]
    4718:	00013504 	andeq	r3, r1, r4, lsl #10
    471c:	06df0600 	ldrbeq	r0, [pc], r0, lsl #12
    4720:	15040000 	strne	r0, [r4, #-0]
    4724:	000000af 	andeq	r0, r0, pc, lsr #1
    4728:	0001620b 	andeq	r6, r1, fp, lsl #4
    472c:	00016200 	andeq	r6, r1, r0, lsl #4
    4730:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    4734:	00014c04 	andeq	r4, r1, r4, lsl #24
    4738:	05560d00 	ldrbeq	r0, [r6, #-3328]	; 0xfffff300
    473c:	1c040000 	stcne	0, cr0, [r4], {-0}
    4740:	00000157 	andeq	r0, r0, r7, asr r1
    4744:	0004240d 	andeq	r2, r4, sp, lsl #8
    4748:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
    474c:	0b000001 	bleq	4758 <startup-0x1fffb8a8>
    4750:	0000005b 	andeq	r0, r0, fp, asr r0
    4754:	0000018f 	andeq	r0, r0, pc, lsl #3
    4758:	00018f0e 	andeq	r8, r1, lr, lsl #30
    475c:	0003ff00 	andeq	pc, r3, r0, lsl #30
    4760:	06070404 	streq	r0, [r7], -r4, lsl #8
    4764:	0f000004 	svceq	0x00000004
    4768:	00001e21 	andeq	r1, r0, r1, lsr #28
    476c:	017e0305 	cmneq	lr, r5, lsl #6
    4770:	03050000 	movweq	r0, #20480	; 0x5000
    4774:	2000dc48 	andcs	sp, r0, r8, asr #24
    4778:	001ee40f 	andseq	lr, lr, pc, lsl #8
    477c:	7e030600 	cfmadd32vc	mvax0, mvfx0, mvfx3, mvfx0
    4780:	05000001 	streq	r0, [r0, #-1]
    4784:	00e04803 	rsceq	r4, r0, r3, lsl #16
    4788:	1ec10f20 	cdpne	15, 12, cr0, cr1, cr0, {1}
    478c:	03070000 	movweq	r0, #28672	; 0x7000
    4790:	0000017e 	andeq	r0, r0, lr, ror r1
    4794:	e4480305 	strb	r0, [r8], #-773	; 0xfffffcfb
    4798:	97102000 	ldrls	r2, [r0, -r0]
    479c:	0100001e 	tsteq	r0, lr, lsl r0
    47a0:	00009e08 	andeq	r9, r0, r8, lsl #28
    47a4:	d4030500 	strle	r0, [r3], #-1280	; 0xfffffb00
    47a8:	10200071 	eorne	r0, r0, r1, ror r0
    47ac:	00001e47 	andeq	r1, r0, r7, asr #28
    47b0:	009e0901 	addseq	r0, lr, r1, lsl #18
    47b4:	03050000 	movweq	r0, #20480	; 0x5000
    47b8:	20007190 	mulcs	r0, r0, r1
    47bc:	001e1310 	andseq	r1, lr, r0, lsl r3
    47c0:	9e0a0100 	adflse	f0, f2, f0
    47c4:	05000000 	streq	r0, [r0, #-0]
    47c8:	0071b803 	rsbseq	fp, r1, r3, lsl #16
    47cc:	1e851020 	cdpne	0, 8, cr1, cr5, cr0, {1}
    47d0:	0c010000 	stceq	0, cr0, [r1], {-0}
    47d4:	00000062 	andeq	r0, r0, r2, rrx
    47d8:	71bc0305 			; <UNDEFINED> instruction: 0x71bc0305
    47dc:	35102000 	ldrcc	r2, [r0, #-0]
    47e0:	0100001e 	tsteq	r0, lr, lsl r0
    47e4:	0000620d 	andeq	r6, r0, sp, lsl #4
    47e8:	c8030500 	stmdagt	r3, {r8, sl}
    47ec:	10200071 	eorne	r0, r0, r1, ror r0
    47f0:	00001f03 	andeq	r1, r0, r3, lsl #30
    47f4:	00620e01 	rsbeq	r0, r2, r1, lsl #28
    47f8:	03050000 	movweq	r0, #20480	; 0x5000
    47fc:	200071ac 	andcs	r7, r0, ip, lsr #3
    4800:	001ef710 	andseq	pc, lr, r0, lsl r7	; <UNPREDICTABLE>
    4804:	4c110100 	ldfmis	f0, [r1], {-0}
    4808:	05000001 	streq	r0, [r0, #-1]
    480c:	00716c03 	rsbseq	r6, r1, r3, lsl #24
    4810:	1ea51020 	cdpne	0, 10, cr1, cr5, cr0, {1}
    4814:	12010000 	andne	r0, r1, #0
    4818:	000000a4 	andeq	r0, r0, r4, lsr #1
    481c:	71a00305 	lslvc	r0, r5, #6
    4820:	a40b2000 	strge	r2, [fp], #-0
    4824:	61000000 	mrsvs	r0, (UNDEF: 0)
    4828:	11000002 	tstne	r0, r2
    482c:	0000018f 	andeq	r0, r0, pc, lsl #3
    4830:	d5100000 	ldrle	r0, [r0, #-0]
    4834:	0100001e 	tsteq	r0, lr, lsl r0
    4838:	00025113 	andeq	r5, r2, r3, lsl r1
    483c:	94030500 	strls	r0, [r3], #-1280	; 0xfffffb00
    4840:	12200071 	eorne	r0, r0, #113	; 0x71
    4844:	00001eb3 			; <UNDEFINED> instruction: 0x00001eb3
    4848:	452c2201 	strmi	r2, [ip, #-513]!	; 0xfffffdff
    484c:	00742000 	rsbseq	r2, r4, r0
    4850:	9c010000 	stcls	0, cr0, [r1], {-0}
    4854:	000002a7 	andeq	r0, r0, r7, lsr #5
    4858:	001ef713 	andseq	pc, lr, r3, lsl r7	; <UNPREDICTABLE>
    485c:	62220100 	eorvs	r0, r2, #0, 2
    4860:	02000001 	andeq	r0, r0, #1
    4864:	090f6c91 	stmdbeq	pc, {r0, r4, r7, sl, fp, sp, lr}	; <UNPREDICTABLE>
    4868:	01000009 	tsteq	r0, r9
    486c:	00012e23 	andeq	r2, r1, r3, lsr #28
    4870:	48030500 	stmdami	r3, {r8, sl}
    4874:	002000e8 	eoreq	r0, r0, r8, ror #1
    4878:	0004a914 	andeq	sl, r4, r4, lsl r9
    487c:	b8140100 	ldmdalt	r4, {r8}
    4880:	74200044 	strtvc	r0, [r0], #-68	; 0xffffffbc
    4884:	01000000 	mrseq	r0, (UNDEF: 0)
    4888:	0daa0f9c 	stceq	15, cr0, [sl, #624]!	; 0x270
    488c:	16010000 	strne	r0, [r1], -r0
    4890:	0000009e 	muleq	r0, lr, r0
    4894:	0f749102 	svceq	0x00749102
    4898:	00000db4 			; <UNDEFINED> instruction: 0x00000db4
    489c:	009e1901 	addseq	r1, lr, r1, lsl #18
    48a0:	91020000 	mrsls	r0, (UNDEF: 2)
    48a4:	0baa0f70 	bleq	fea8866c <firstTime.4040+0xdea791b0>
    48a8:	1c010000 	stcne	0, cr0, [r1], {-0}
    48ac:	0000009e 	muleq	r0, lr, r0
    48b0:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    48b4:	0002df00 	andeq	sp, r2, r0, lsl #30
    48b8:	fc000400 	stc2	4, cr0, [r0], {-0}
    48bc:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
    48c0:	00009f01 	andeq	r9, r0, r1, lsl #30
    48c4:	1f140c00 	svcne	0x00140c00
    48c8:	45a00000 	strmi	r0, [r0, #0]!
    48cc:	00e82000 	rsceq	r2, r8, r0
    48d0:	17c20000 	strbne	r0, [r2, r0]
    48d4:	0c020000 	stceq	0, cr0, [r2], {-0}
    48d8:	004e0502 	subeq	r0, lr, r2, lsl #10
    48dc:	5b030000 	blpl	c48e4 <startup-0x1ff3b71c>
    48e0:	02000003 	andeq	r0, r0, #3
    48e4:	00004e07 	andeq	r4, r0, r7, lsl #28
    48e8:	19030000 	stmdbne	r3, {}	; <UNPREDICTABLE>
    48ec:	02000007 	andeq	r0, r0, #7
    48f0:	00004e08 	andeq	r4, r0, r8, lsl #28
    48f4:	24030400 	strcs	r0, [r3], #-1024	; 0xfffffc00
    48f8:	02000019 	andeq	r0, r0, #25
    48fc:	00005509 	andeq	r5, r0, r9, lsl #10
    4900:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    4904:	03890704 	orreq	r0, r9, #4, 14	; 0x100000
    4908:	04050000 	streq	r0, [r5], #-0
    490c:	0000005b 	andeq	r0, r0, fp, asr r0
    4910:	d3080104 	movwle	r0, #33028	; 0x8104
    4914:	06000004 	streq	r0, [r0], -r4
    4918:	00001a76 	andeq	r1, r0, r6, ror sl
    491c:	00210a02 	eoreq	r0, r1, r2, lsl #20
    4920:	34070000 	strcc	r0, [r7], #-0
    4924:	0c000000 	stceq	0, cr0, [r0], {-0}
    4928:	009e0603 	addseq	r0, lr, r3, lsl #12
    492c:	c9030000 	stmdbgt	r3, {}	; <UNPREDICTABLE>
    4930:	03000005 	movweq	r0, #5
    4934:	00009e07 	andeq	r9, r0, r7, lsl #28
    4938:	3b030000 	blcc	c4940 <startup-0x1ff3b6c0>
    493c:	03000000 	movweq	r0, #0
    4940:	00009e08 	andeq	r9, r0, r8, lsl #28
    4944:	30030400 	andcc	r0, r3, r0, lsl #8
    4948:	03000000 	movweq	r0, #0
    494c:	00009e09 	andeq	r9, r0, r9, lsl #28
    4950:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    4954:	00006204 	andeq	r6, r0, r4, lsl #4
    4958:	16340600 	ldrtne	r0, [r4], -r0, lsl #12
    495c:	0a030000 	beq	c4964 <startup-0x1ff3b69c>
    4960:	0000006d 	andeq	r0, r0, sp, rrx
    4964:	0006de07 	andeq	sp, r6, r7, lsl #28
    4968:	06042400 	streq	r2, [r4], -r0, lsl #8
    496c:	00000128 	andeq	r0, r0, r8, lsr #2
    4970:	00046103 	andeq	r6, r4, r3, lsl #2
    4974:	28070400 	stmdacs	r7, {sl}
    4978:	00000001 	andeq	r0, r0, r1
    497c:	0006ea03 	andeq	lr, r6, r3, lsl #20
    4980:	2e080400 	cfcpyscs	mvf0, mvf8
    4984:	04000001 	streq	r0, [r0], #-1
    4988:	00063a03 	andeq	r3, r6, r3, lsl #20
    498c:	2e090400 	cfcpyscs	mvf0, mvf9
    4990:	08000001 	stmdaeq	r0, {r0}
    4994:	00066603 	andeq	r6, r6, r3, lsl #12
    4998:	460c0400 	strmi	r0, [ip], -r0, lsl #8
    499c:	0c000001 	stceq	0, cr0, [r0], {1}
    49a0:	00034203 	andeq	r4, r3, r3, lsl #4
    49a4:	460d0400 	strmi	r0, [sp], -r0, lsl #8
    49a8:	10000001 	andne	r0, r0, r1
    49ac:	00047303 	andeq	r7, r4, r3, lsl #6
    49b0:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
    49b4:	14000001 	strne	r0, [r0], #-1
    49b8:	00007003 	andeq	r7, r0, r3
    49bc:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
    49c0:	18000001 	stmdane	r0, {r0}
    49c4:	0003d903 	andeq	sp, r3, r3, lsl #18
    49c8:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
    49cc:	1c000001 	stcne	0, cr0, [r0], {1}
    49d0:	0003e903 	andeq	lr, r3, r3, lsl #18
    49d4:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
    49d8:	20000001 	andcs	r0, r0, r1
    49dc:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    49e0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    49e4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    49e8:	40090074 	andmi	r0, r9, r4, ror r0
    49ec:	0a000001 	beq	49f8 <startup-0x1fffb608>
    49f0:	00000140 	andeq	r0, r0, r0, asr #2
    49f4:	af040500 	svcge	0x00040500
    49f8:	05000000 	streq	r0, [r0, #-0]
    49fc:	00013504 	andeq	r3, r1, r4, lsl #10
    4a00:	06df0600 	ldrbeq	r0, [pc], r0, lsl #12
    4a04:	15040000 	strne	r0, [r4, #-0]
    4a08:	000000af 	andeq	r0, r0, pc, lsr #1
    4a0c:	0001620b 	andeq	r6, r1, fp, lsl #4
    4a10:	00016200 	andeq	r6, r1, r0, lsl #4
    4a14:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    4a18:	00014c04 	andeq	r4, r1, r4, lsl #24
    4a1c:	05560d00 	ldrbeq	r0, [r6, #-3328]	; 0xfffff300
    4a20:	1c040000 	stcne	0, cr0, [r4], {-0}
    4a24:	00000157 	andeq	r0, r0, r7, asr r1
    4a28:	0004240d 	andeq	r2, r4, sp, lsl #8
    4a2c:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
    4a30:	0b000001 	bleq	4a3c <startup-0x1fffb5c4>
    4a34:	0000005b 	andeq	r0, r0, fp, asr r0
    4a38:	0000018e 	andeq	r0, r0, lr, lsl #3
    4a3c:	00018e0e 	andeq	r8, r1, lr, lsl #28
    4a40:	04002100 	streq	r2, [r0], #-256	; 0xffffff00
    4a44:	04060704 	streq	r0, [r6], #-1796	; 0xfffff8fc
    4a48:	430f0000 	movwmi	r0, #61440	; 0xf000
    4a4c:	0500001f 	streq	r0, [r0, #-31]	; 0xffffffe1
    4a50:	00017e03 	andeq	r7, r1, r3, lsl #28
    4a54:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
    4a58:	0f2000e8 	svceq	0x002000e8
    4a5c:	00001f8d 	andeq	r1, r0, sp, lsl #31
    4a60:	017e0306 	cmneq	lr, r6, lsl #6
    4a64:	03050000 	movweq	r0, #20480	; 0x5000
    4a68:	2000e870 	andcs	lr, r0, r0, ror r8
    4a6c:	001f6b0f 	andseq	r6, pc, pc, lsl #22
    4a70:	7e030700 	cdpvc	7, 0, cr0, cr3, cr0, {0}
    4a74:	05000001 	streq	r0, [r0, #-1]
    4a78:	00e89403 	rsceq	r9, r8, r3, lsl #8
    4a7c:	1fd21020 	svcne	0x00d21020
    4a80:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    4a84:	0000009e 	muleq	r0, lr, r0
    4a88:	71e40305 	mvnvc	r0, r5, lsl #6
    4a8c:	ae102000 	cdpge	0, 1, cr2, cr0, cr0, {0}
    4a90:	0100001f 	tsteq	r0, pc, lsl r0
    4a94:	00009e09 	andeq	r9, r0, r9, lsl #28
    4a98:	24030500 	strcs	r0, [r3], #-1280	; 0xfffffb00
    4a9c:	10200072 	eorne	r0, r0, r2, ror r0
    4aa0:	00001f55 	andeq	r1, r0, r5, asr pc
    4aa4:	009e0a01 	addseq	r0, lr, r1, lsl #20
    4aa8:	03050000 	movweq	r0, #20480	; 0x5000
    4aac:	20007240 	andcs	r7, r0, r0, asr #4
    4ab0:	001f7d10 	andseq	r7, pc, r0, lsl sp	; <UNPREDICTABLE>
    4ab4:	620c0100 	andvs	r0, ip, #0, 2
    4ab8:	05000000 	streq	r0, [r0, #-0]
    4abc:	00722803 	rsbseq	r2, r2, r3, lsl #16
    4ac0:	1f9e1020 	svcne	0x009e1020
    4ac4:	0d010000 	stceq	0, cr0, [r1, #-0]
    4ac8:	00000062 	andeq	r0, r0, r2, rrx
    4acc:	71f40305 	mvnsvc	r0, r5, lsl #6
    4ad0:	de102000 	cdple	0, 1, cr2, cr0, cr0, {0}
    4ad4:	0100001f 	tsteq	r0, pc, lsl r0
    4ad8:	0000620e 	andeq	r6, r0, lr, lsl #4
    4adc:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
    4ae0:	10200072 	eorne	r0, r0, r2, ror r0
    4ae4:	00001f61 	andeq	r1, r0, r1, ror #30
    4ae8:	014c1101 	cmpeq	ip, r1, lsl #2
    4aec:	03050000 	movweq	r0, #20480	; 0x5000
    4af0:	20007200 	andcs	r7, r0, r0, lsl #4
    4af4:	001fc610 	andseq	ip, pc, r0, lsl r6	; <UNPREDICTABLE>
    4af8:	a4120100 	ldrge	r0, [r2], #-256	; 0xffffff00
    4afc:	05000000 	streq	r0, [r0, #-0]
    4b00:	0071e803 	rsbseq	lr, r1, r3, lsl #16
    4b04:	00a40b20 	adceq	r0, r4, r0, lsr #22
    4b08:	02600000 	rsbeq	r0, r0, #0
    4b0c:	8e0e0000 	cdphi	0, 0, cr0, cr14, cr0, {0}
    4b10:	00000001 	andeq	r0, r0, r1
    4b14:	1fb91000 	svcne	0x00b91000
    4b18:	13010000 	movwne	r0, #4096	; 0x1000
    4b1c:	00000250 	andeq	r0, r0, r0, asr r2
    4b20:	71d80305 	bicsvc	r0, r8, r5, lsl #6
    4b24:	ed112000 	ldc	0, cr2, [r1, #-0]
    4b28:	01000002 	tsteq	r0, r2
    4b2c:	00461422 	subeq	r1, r6, r2, lsr #8
    4b30:	00007420 	andeq	r7, r0, r0, lsr #8
    4b34:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
    4b38:	12000002 	andne	r0, r0, #2
    4b3c:	00001f61 	andeq	r1, r0, r1, ror #30
    4b40:	01622201 	cmneq	r2, r1, lsl #4
    4b44:	91020000 	mrsls	r0, (UNDEF: 2)
    4b48:	09090f6c 	stmdbeq	r9, {r2, r3, r5, r6, r8, r9, sl, fp}
    4b4c:	23010000 	movwcs	r0, #4096	; 0x1000
    4b50:	0000012e 	andeq	r0, r0, lr, lsr #2
    4b54:	e8b80305 	ldm	r8!, {r0, r2, r8, r9}
    4b58:	13002000 	movwne	r2, #0
    4b5c:	000004a9 	andeq	r0, r0, r9, lsr #9
    4b60:	45a01401 	strmi	r1, [r0, #1025]!	; 0x401
    4b64:	00742000 	rsbseq	r2, r4, r0
    4b68:	9c010000 	stcls	0, cr0, [r1], {-0}
    4b6c:	000daa0f 	andeq	sl, sp, pc, lsl #20
    4b70:	9e160100 	muflss	f0, f6, f0
    4b74:	02000000 	andeq	r0, r0, #0
    4b78:	b40f7491 	strlt	r7, [pc], #-1169	; 4b80 <startup-0x1fffb480>
    4b7c:	0100000d 	tsteq	r0, sp
    4b80:	00009e19 	andeq	r9, r0, r9, lsl lr
    4b84:	70910200 	addsvc	r0, r1, r0, lsl #4
    4b88:	000baa0f 	andeq	sl, fp, pc, lsl #20
    4b8c:	9e1c0100 	muflse	f0, f4, f0
    4b90:	02000000 	andeq	r0, r0, #0
    4b94:	00006c91 	muleq	r0, r1, ip
    4b98:	000002e0 	andeq	r0, r0, r0, ror #5
    4b9c:	12fc0004 	rscsne	r0, ip, #4
    4ba0:	01040000 	mrseq	r0, (UNDEF: 4)
    4ba4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4ba8:	0020070c 	eoreq	r0, r0, ip, lsl #14
    4bac:	00468800 	subeq	r8, r6, r0, lsl #16
    4bb0:	0000e820 	andeq	lr, r0, r0, lsr #16
    4bb4:	00189800 	andseq	r9, r8, r0, lsl #16
    4bb8:	020c0200 	andeq	r0, ip, #0, 4
    4bbc:	00004e05 	andeq	r4, r0, r5, lsl #28
    4bc0:	035b0300 	cmpeq	fp, #0, 6
    4bc4:	07020000 	streq	r0, [r2, -r0]
    4bc8:	0000004e 	andeq	r0, r0, lr, asr #32
    4bcc:	07190300 	ldreq	r0, [r9, -r0, lsl #6]
    4bd0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    4bd4:	0000004e 	andeq	r0, r0, lr, asr #32
    4bd8:	19240304 	stmdbne	r4!, {r2, r8, r9}
    4bdc:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    4be0:	00000055 	andeq	r0, r0, r5, asr r0
    4be4:	04040008 	streq	r0, [r4], #-8
    4be8:	00038907 	andeq	r8, r3, r7, lsl #18
    4bec:	5b040500 	blpl	105ff4 <startup-0x1fefa00c>
    4bf0:	04000000 	streq	r0, [r0], #-0
    4bf4:	04d30801 	ldrbeq	r0, [r3], #2049	; 0x801
    4bf8:	76060000 	strvc	r0, [r6], -r0
    4bfc:	0200001a 	andeq	r0, r0, #26
    4c00:	0000210a 	andeq	r2, r0, sl, lsl #2
    4c04:	00340700 	eorseq	r0, r4, r0, lsl #14
    4c08:	030c0000 	movweq	r0, #49152	; 0xc000
    4c0c:	00009e06 	andeq	r9, r0, r6, lsl #28
    4c10:	05c90300 	strbeq	r0, [r9, #768]	; 0x300
    4c14:	07030000 	streq	r0, [r3, -r0]
    4c18:	0000009e 	muleq	r0, lr, r0
    4c1c:	003b0300 	eorseq	r0, fp, r0, lsl #6
    4c20:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    4c24:	0000009e 	muleq	r0, lr, r0
    4c28:	00300304 	eorseq	r0, r0, r4, lsl #6
    4c2c:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    4c30:	0000009e 	muleq	r0, lr, r0
    4c34:	04050008 	streq	r0, [r5], #-8
    4c38:	00000062 	andeq	r0, r0, r2, rrx
    4c3c:	00163406 	andseq	r3, r6, r6, lsl #8
    4c40:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
    4c44:	07000000 	streq	r0, [r0, -r0]
    4c48:	000006de 	ldrdeq	r0, [r0], -lr
    4c4c:	28060424 	stmdacs	r6, {r2, r5, sl}
    4c50:	03000001 	movweq	r0, #1
    4c54:	00000461 	andeq	r0, r0, r1, ror #8
    4c58:	01280704 			; <UNDEFINED> instruction: 0x01280704
    4c5c:	03000000 	movweq	r0, #0
    4c60:	000006ea 	andeq	r0, r0, sl, ror #13
    4c64:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
    4c68:	03040000 	movweq	r0, #16384	; 0x4000
    4c6c:	0000063a 	andeq	r0, r0, sl, lsr r6
    4c70:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
    4c74:	03080000 	movweq	r0, #32768	; 0x8000
    4c78:	00000666 	andeq	r0, r0, r6, ror #12
    4c7c:	01460c04 	cmpeq	r6, r4, lsl #24
    4c80:	030c0000 	movweq	r0, #49152	; 0xc000
    4c84:	00000342 	andeq	r0, r0, r2, asr #6
    4c88:	01460d04 	cmpeq	r6, r4, lsl #26
    4c8c:	03100000 	tsteq	r0, #0
    4c90:	00000473 	andeq	r0, r0, r3, ror r4
    4c94:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
    4c98:	03140000 	tsteq	r4, #0
    4c9c:	00000070 	andeq	r0, r0, r0, ror r0
    4ca0:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
    4ca4:	03180000 	tsteq	r8, #0
    4ca8:	000003d9 	ldrdeq	r0, [r0], -r9
    4cac:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
    4cb0:	031c0000 	tsteq	ip, #0
    4cb4:	000003e9 	andeq	r0, r0, r9, ror #7
    4cb8:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
    4cbc:	00200000 	eoreq	r0, r0, r0
    4cc0:	00a40405 	adceq	r0, r4, r5, lsl #8
    4cc4:	04080000 	streq	r0, [r8], #-0
    4cc8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    4ccc:	01400900 	cmpeq	r0, r0, lsl #18
    4cd0:	400a0000 	andmi	r0, sl, r0
    4cd4:	00000001 	andeq	r0, r0, r1
    4cd8:	00af0405 	adceq	r0, pc, r5, lsl #8
    4cdc:	04050000 	streq	r0, [r5], #-0
    4ce0:	00000135 	andeq	r0, r0, r5, lsr r1
    4ce4:	0006df06 	andeq	sp, r6, r6, lsl #30
    4ce8:	af150400 	svcge	0x00150400
    4cec:	0b000000 	bleq	4cf4 <startup-0x1fffb30c>
    4cf0:	00000162 	andeq	r0, r0, r2, ror #2
    4cf4:	00000162 	andeq	r0, r0, r2, ror #2
    4cf8:	0405000c 	streq	r0, [r5], #-12
    4cfc:	0000014c 	andeq	r0, r0, ip, asr #2
    4d00:	0005560d 	andeq	r5, r5, sp, lsl #12
    4d04:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
    4d08:	0d000001 	stceq	0, cr0, [r0, #-4]
    4d0c:	00000424 	andeq	r0, r0, r4, lsr #8
    4d10:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
    4d14:	5b0b0000 	blpl	2c4d1c <startup-0x1fd3b2e4>
    4d18:	8f000000 	svchi	0x00000000
    4d1c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    4d20:	0000018f 	andeq	r0, r0, pc, lsl #3
    4d24:	040003ff 	streq	r0, [r0], #-1023	; 0xfffffc01
    4d28:	04060704 	streq	r0, [r6], #-1796	; 0xfffff8fc
    4d2c:	ed0f0000 	stc	0, cr0, [pc, #-0]	; 4d34 <startup-0x1fffb2cc>
    4d30:	0500001f 	streq	r0, [r0, #-31]	; 0xffffffe1
    4d34:	00017e03 	andeq	r7, r1, r3, lsl #28
    4d38:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
    4d3c:	0f2000e8 	svceq	0x002000e8
    4d40:	00002052 	andeq	r2, r0, r2, asr r0
    4d44:	017e0306 	cmneq	lr, r6, lsl #6
    4d48:	03050000 	movweq	r0, #20480	; 0x5000
    4d4c:	2000ecbc 			; <UNDEFINED> instruction: 0x2000ecbc
    4d50:	0020830f 	eoreq	r8, r0, pc, lsl #6
    4d54:	7e030700 	cdpvc	7, 0, cr0, cr3, cr0, {0}
    4d58:	05000001 	streq	r0, [r0, #-1]
    4d5c:	00f0bc03 	rscseq	fp, r0, r3, lsl #24
    4d60:	209f1020 	addscs	r1, pc, r0, lsr #32
    4d64:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    4d68:	0000009e 	muleq	r0, lr, r0
    4d6c:	72a00305 	adcvc	r0, r0, #335544320	; 0x14000000
    4d70:	6e102000 	cdpvs	0, 1, cr2, cr0, cr0, {0}
    4d74:	01000020 	tsteq	r0, r0, lsr #32
    4d78:	00009e09 	andeq	r9, r0, r9, lsl #28
    4d7c:	50030500 	andpl	r0, r3, r0, lsl #10
    4d80:	10200072 	eorne	r0, r0, r2, ror r0
    4d84:	00002078 	andeq	r2, r0, r8, ror r0
    4d88:	009e0a01 	addseq	r0, lr, r1, lsl #20
    4d8c:	03050000 	movweq	r0, #20480	; 0x5000
    4d90:	2000726c 	andcs	r7, r0, ip, ror #4
    4d94:	00204310 	eoreq	r4, r0, r0, lsl r3
    4d98:	620c0100 	andvs	r0, ip, #0, 2
    4d9c:	05000000 	streq	r0, [r0, #-0]
    4da0:	00729403 	rsbseq	r9, r2, r3, lsl #8
    4da4:	20aa1020 	adccs	r1, sl, r0, lsr #32
    4da8:	0d010000 	stceq	0, cr0, [r1, #-0]
    4dac:	00000062 	andeq	r0, r0, r2, rrx
    4db0:	72600305 	rsbvc	r0, r0, #335544320	; 0x14000000
    4db4:	35102000 	ldrcc	r2, [r0, #-0]
    4db8:	01000020 	tsteq	r0, r0, lsr #32
    4dbc:	0000620e 	andeq	r6, r0, lr, lsl #4
    4dc0:	54030500 	strpl	r0, [r3], #-1280	; 0xfffffb00
    4dc4:	10200072 	eorne	r0, r0, r2, ror r0
    4dc8:	00001ffe 	strdeq	r1, [r0], -lr
    4dcc:	014c1101 	cmpeq	ip, r1, lsl #2
    4dd0:	03050000 	movweq	r0, #20480	; 0x5000
    4dd4:	20007270 	andcs	r7, r0, r0, ror r2
    4dd8:	00209410 	eoreq	r9, r0, r0, lsl r4
    4ddc:	a4120100 	ldrge	r0, [r2], #-256	; 0xffffff00
    4de0:	05000000 	streq	r0, [r0, #-0]
    4de4:	00724403 	rsbseq	r4, r2, r3, lsl #8
    4de8:	00a40b20 	adceq	r0, r4, r0, lsr #22
    4dec:	02610000 	rsbeq	r0, r1, #0
    4df0:	8f110000 	svchi	0x00110000
    4df4:	00000001 	andeq	r0, r0, r1
    4df8:	20621000 	rsbcs	r1, r2, r0
    4dfc:	13010000 	movwne	r0, #4096	; 0x1000
    4e00:	00000251 	andeq	r0, r0, r1, asr r2
    4e04:	72a40305 	adcvc	r0, r4, #335544320	; 0x14000000
    4e08:	42122000 	andsmi	r2, r2, #0
    4e0c:	01000004 	tsteq	r0, r4
    4e10:	0046fc22 	subeq	pc, r6, r2, lsr #24
    4e14:	00007420 	andeq	r7, r0, r0, lsr #8
    4e18:	a79c0100 	ldrge	r0, [ip, r0, lsl #2]
    4e1c:	13000002 	movwne	r0, #2
    4e20:	00001ffe 	strdeq	r1, [r0], -lr
    4e24:	01622201 	cmneq	r2, r1, lsl #4
    4e28:	91020000 	mrsls	r0, (UNDEF: 2)
    4e2c:	09090f6c 	stmdbeq	r9, {r2, r3, r5, r6, r8, r9, sl, fp}
    4e30:	23010000 	movwcs	r0, #4096	; 0x1000
    4e34:	0000012e 	andeq	r0, r0, lr, lsr #2
    4e38:	f4bc0305 			; <UNDEFINED> instruction: 0xf4bc0305
    4e3c:	14002000 	strne	r2, [r0], #-0
    4e40:	000004a9 	andeq	r0, r0, r9, lsr #9
    4e44:	46881401 	strmi	r1, [r8], r1, lsl #8
    4e48:	00742000 	rsbseq	r2, r4, r0
    4e4c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4e50:	000daa0f 	andeq	sl, sp, pc, lsl #20
    4e54:	9e160100 	muflss	f0, f6, f0
    4e58:	02000000 	andeq	r0, r0, #0
    4e5c:	b40f7491 	strlt	r7, [pc], #-1169	; 4e64 <startup-0x1fffb19c>
    4e60:	0100000d 	tsteq	r0, sp
    4e64:	00009e19 	andeq	r9, r0, r9, lsl lr
    4e68:	70910200 	addsvc	r0, r1, r0, lsl #4
    4e6c:	000baa0f 	andeq	sl, fp, pc, lsl #20
    4e70:	9e1c0100 	muflse	f0, f4, f0
    4e74:	02000000 	andeq	r0, r0, #0
    4e78:	00006c91 	muleq	r0, r1, ip

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	1117550e 	tstne	r7, lr, lsl #10
       c:	00171001 	andseq	r1, r7, r1
      10:	01130200 	tsteq	r3, r0, lsl #4
      14:	0b3a0b0b 	bleq	e82c48 <startup-0x1f17d3b8>
      18:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      1c:	0d030000 	stceq	0, cr0, [r3, #-0]
      20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
      24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      28:	000b3813 	andeq	r3, fp, r3, lsl r8
      2c:	00240400 	eoreq	r0, r4, r0, lsl #8
      30:	0b3e0b0b 	bleq	f82c64 <startup-0x1f07d39c>
      34:	00000e03 	andeq	r0, r0, r3, lsl #28
      38:	0b000f05 	bleq	3c54 <startup-0x1fffc3ac>
      3c:	0013490b 	andseq	r4, r3, fp, lsl #18
      40:	00160600 	andseq	r0, r6, r0, lsl #12
      44:	0b3a0e03 	bleq	e83858 <startup-0x1f17c7a8>
      48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      4c:	13070000 	movwne	r0, #28672	; 0x7000
      50:	0b0e0301 	bleq	380c5c <startup-0x1fc7f3a4>
      54:	3b0b3a0b 	blcc	2ce888 <startup-0x1fd31778>
      58:	0013010b 	andseq	r0, r3, fp, lsl #2
      5c:	00240800 	eoreq	r0, r4, r0, lsl #16
      60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
      64:	00000803 	andeq	r0, r0, r3, lsl #16
      68:	27011509 	strcs	r1, [r1, -r9, lsl #10]
      6c:	00130119 	andseq	r0, r3, r9, lsl r1
      70:	00050a00 	andeq	r0, r5, r0, lsl #20
      74:	00001349 	andeq	r1, r0, r9, asr #6
      78:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
      7c:	00130113 	andseq	r0, r3, r3, lsl r1
      80:	00210c00 	eoreq	r0, r1, r0, lsl #24
      84:	340d0000 	strcc	r0, [sp], #-0
      88:	3a0e0300 	bcc	380c90 <startup-0x1fc7f370>
      8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      90:	3c193f13 	ldccc	15, cr3, [r9], {19}
      94:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
      98:	13490021 	movtne	r0, #36897	; 0x9021
      9c:	0000052f 	andeq	r0, r0, pc, lsr #10
      a0:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
      a4:	000b2f13 	andeq	r2, fp, r3, lsl pc
      a8:	00341000 	eorseq	r1, r4, r0
      ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
      b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      b4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
      b8:	34110000 	ldrcc	r0, [r1], #-0
      bc:	3a0e0300 	bcc	380cc4 <startup-0x1fc7f33c>
      c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      c4:	00180213 	andseq	r0, r8, r3, lsl r2
      c8:	00341200 	eorseq	r1, r4, r0, lsl #4
      cc:	0b3a0803 	bleq	e820e0 <startup-0x1f17df20>
      d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      d4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
      d8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
      dc:	03193f01 	tsteq	r9, #1, 30
      e0:	3b0b3a08 	blcc	2ce908 <startup-0x1fd316f8>
      e4:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
      e8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
      ec:	97184006 	ldrls	r4, [r8, -r6]
      f0:	13011942 	movwne	r1, #6466	; 0x1942
      f4:	05140000 	ldreq	r0, [r4, #-0]
      f8:	3a0e0300 	bcc	380d00 <startup-0x1fc7f300>
      fc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     100:	00180213 	andseq	r0, r8, r3, lsl r2
     104:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
     108:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     10c:	0b3b0b3a 	bleq	ec2dfc <startup-0x1f13d204>
     110:	01111927 	tsteq	r1, r7, lsr #18
     114:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     118:	01194296 			; <UNDEFINED> instruction: 0x01194296
     11c:	16000013 			; <UNDEFINED> instruction: 0x16000013
     120:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     124:	0b3a0e03 	bleq	e83938 <startup-0x1f17c6c8>
     128:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     12c:	1301193c 	movwne	r1, #6460	; 0x193c
     130:	18170000 	ldmdane	r7, {}	; <UNPREDICTABLE>
     134:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     138:	08030034 	stmdaeq	r3, {r2, r4, r5}
     13c:	0b3b0b3a 	bleq	ec2e2c <startup-0x1f13d1d4>
     140:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     144:	34190000 	ldrcc	r0, [r9], #-0
     148:	3a0e0300 	bcc	380d50 <startup-0x1fc7f2b0>
     14c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     150:	00180213 	andseq	r0, r8, r3, lsl r2
     154:	010b1a00 	tsteq	fp, r0, lsl #20
     158:	06120111 			; <UNDEFINED> instruction: 0x06120111
     15c:	341b0000 	ldrcc	r0, [fp], #-0
     160:	3a080300 	bcc	200d68 <startup-0x1fdff298>
     164:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     168:	00180213 	andseq	r0, r8, r3, lsl r2
     16c:	002e1c00 	eoreq	r1, lr, r0, lsl #24
     170:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     174:	0b3b0b3a 	bleq	ec2e64 <startup-0x1f13d19c>
     178:	01111927 	tsteq	r1, r7, lsr #18
     17c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     180:	00194296 	mulseq	r9, r6, r2
     184:	002e1d00 	eoreq	r1, lr, r0, lsl #26
     188:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     18c:	0b3b0b3a 	bleq	ec2e7c <startup-0x1f13d184>
     190:	01111927 	tsteq	r1, r7, lsr #18
     194:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     198:	00194297 	mulseq	r9, r7, r2
     19c:	11010000 	mrsne	r0, (UNDEF: 1)
     1a0:	130e2501 	movwne	r2, #58625	; 0xe501
     1a4:	110e030b 	tstne	lr, fp, lsl #6
     1a8:	10061201 	andne	r1, r6, r1, lsl #4
     1ac:	02000017 	andeq	r0, r0, #23
     1b0:	0b0b0113 	bleq	2c0604 <startup-0x1fd3f9fc>
     1b4:	0b3b0b3a 	bleq	ec2ea4 <startup-0x1f13d15c>
     1b8:	00001301 	andeq	r1, r0, r1, lsl #6
     1bc:	03000d03 	movweq	r0, #3331	; 0xd03
     1c0:	3b0b3a0e 	blcc	2cea00 <startup-0x1fd31600>
     1c4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     1c8:	0400000b 	streq	r0, [r0], #-11
     1cc:	0b0b0024 	bleq	2c0264 <startup-0x1fd3fd9c>
     1d0:	0e030b3e 	vmoveq.16	d3[0], r0
     1d4:	0f050000 	svceq	0x00050000
     1d8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     1dc:	06000013 			; <UNDEFINED> instruction: 0x06000013
     1e0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     1e4:	0b3b0b3a 	bleq	ec2ed4 <startup-0x1f13d12c>
     1e8:	00001349 	andeq	r1, r0, r9, asr #6
     1ec:	03011307 	movweq	r1, #4871	; 0x1307
     1f0:	3a0b0b0e 	bcc	2c2e30 <startup-0x1fd3d1d0>
     1f4:	010b3b0b 	tsteq	fp, fp, lsl #22
     1f8:	08000013 	stmdaeq	r0, {r0, r1, r4}
     1fc:	0b0b0024 	bleq	2c0294 <startup-0x1fd3fd6c>
     200:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     204:	15090000 	strne	r0, [r9, #-0]
     208:	01192701 	tsteq	r9, r1, lsl #14
     20c:	0a000013 	beq	260 <startup-0x1ffffda0>
     210:	13490005 	movtne	r0, #36869	; 0x9005
     214:	010b0000 	mrseq	r0, (UNDEF: 11)
     218:	01134901 	tsteq	r3, r1, lsl #18
     21c:	0c000013 	stceq	0, cr0, [r0], {19}
     220:	00000021 	andeq	r0, r0, r1, lsr #32
     224:	0300340d 	movweq	r3, #1037	; 0x40d
     228:	3b0b3a0e 	blcc	2cea68 <startup-0x1fd31598>
     22c:	3f13490b 	svccc	0x0013490b
     230:	00193c19 	andseq	r3, r9, r9, lsl ip
     234:	00340e00 	eorseq	r0, r4, r0, lsl #28
     238:	0b3a1347 	bleq	e84f5c <startup-0x1f17b0a4>
     23c:	18020b3b 	stmdane	r2, {r0, r1, r3, r4, r5, r8, r9, fp}
     240:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
     244:	03193f01 	tsteq	r9, #1, 30
     248:	3b0b3a0e 	blcc	2cea88 <startup-0x1fd31578>
     24c:	1119270b 	tstne	r9, fp, lsl #14
     250:	40061201 	andmi	r1, r6, r1, lsl #4
     254:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     258:	00001301 	andeq	r1, r0, r1, lsl #6
     25c:	03000510 	movweq	r0, #1296	; 0x510
     260:	3b0b3a0e 	blcc	2ceaa0 <startup-0x1fd31560>
     264:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     268:	11000018 	tstne	r0, r8, lsl r0
     26c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     270:	0b3a0e03 	bleq	e83a84 <startup-0x1f17c57c>
     274:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     278:	06120111 			; <UNDEFINED> instruction: 0x06120111
     27c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     280:	00000019 	andeq	r0, r0, r9, lsl r0
     284:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     288:	030b130e 	movweq	r1, #45838	; 0xb30e
     28c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     290:	00171006 	andseq	r1, r7, r6
     294:	01130200 	tsteq	r3, r0, lsl #4
     298:	0b3a0b0b 	bleq	e82ecc <startup-0x1f17d134>
     29c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     2a0:	0d030000 	stceq	0, cr0, [r3, #-0]
     2a4:	3a0e0300 	bcc	380eac <startup-0x1fc7f154>
     2a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2ac:	000b3813 	andeq	r3, fp, r3, lsl r8
     2b0:	00240400 	eoreq	r0, r4, r0, lsl #8
     2b4:	0b3e0b0b 	bleq	f82ee8 <startup-0x1f07d118>
     2b8:	00000e03 	andeq	r0, r0, r3, lsl #28
     2bc:	0b000f05 	bleq	3ed8 <startup-0x1fffc128>
     2c0:	0013490b 	andseq	r4, r3, fp, lsl #18
     2c4:	00160600 	andseq	r0, r6, r0, lsl #12
     2c8:	0b3a0e03 	bleq	e83adc <startup-0x1f17c524>
     2cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     2d0:	13070000 	movwne	r0, #28672	; 0x7000
     2d4:	0b0e0301 	bleq	380ee0 <startup-0x1fc7f120>
     2d8:	3b0b3a0b 	blcc	2ceb0c <startup-0x1fd314f4>
     2dc:	0013010b 	andseq	r0, r3, fp, lsl #2
     2e0:	00240800 	eoreq	r0, r4, r0, lsl #16
     2e4:	0b3e0b0b 	bleq	f82f18 <startup-0x1f07d0e8>
     2e8:	00000803 	andeq	r0, r0, r3, lsl #16
     2ec:	27011509 	strcs	r1, [r1, -r9, lsl #10]
     2f0:	00130119 	andseq	r0, r3, r9, lsl r1
     2f4:	00050a00 	andeq	r0, r5, r0, lsl #20
     2f8:	00001349 	andeq	r1, r0, r9, asr #6
     2fc:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
     300:	00130113 	andseq	r0, r3, r3, lsl r1
     304:	00210c00 	eoreq	r0, r1, r0, lsl #24
     308:	340d0000 	strcc	r0, [sp], #-0
     30c:	3a0e0300 	bcc	380f14 <startup-0x1fc7f0ec>
     310:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     314:	3c193f13 	ldccc	15, cr3, [r9], {19}
     318:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
     31c:	13490021 	movtne	r0, #36897	; 0x9021
     320:	00000b2f 	andeq	r0, r0, pc, lsr #22
     324:	0300340f 	movweq	r3, #1039	; 0x40f
     328:	3b0b3a0e 	blcc	2ceb68 <startup-0x1fd31498>
     32c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     330:	10000018 	andne	r0, r0, r8, lsl r0
     334:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     338:	0b3b0b3a 	bleq	ec3028 <startup-0x1f13cfd8>
     33c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     340:	00001802 	andeq	r1, r0, r2, lsl #16
     344:	3f012e11 	svccc	0x00012e11
     348:	3a0e0319 	bcc	380fb4 <startup-0x1fc7f04c>
     34c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     350:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     354:	96184006 	ldrls	r4, [r8], -r6
     358:	13011942 	movwne	r1, #6466	; 0x1942
     35c:	05120000 	ldreq	r0, [r2, #-0]
     360:	3a0e0300 	bcc	380f68 <startup-0x1fc7f098>
     364:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     368:	00180213 	andseq	r0, r8, r3, lsl r2
     36c:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
     370:	0b3a0e03 	bleq	e83b84 <startup-0x1f17c47c>
     374:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     378:	06120111 			; <UNDEFINED> instruction: 0x06120111
     37c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     380:	00000019 	andeq	r0, r0, r9, lsl r0
     384:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     388:	030b130e 	movweq	r1, #45838	; 0xb30e
     38c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     390:	00171006 	andseq	r1, r7, r6
     394:	00240200 	eoreq	r0, r4, r0, lsl #4
     398:	0b3e0b0b 	bleq	f82fcc <startup-0x1f07d034>
     39c:	00000e03 	andeq	r0, r0, r3, lsl #28
     3a0:	0b011303 	bleq	44fb4 <startup-0x1ffbb04c>
     3a4:	3b0b3a0b 	blcc	2cebd8 <startup-0x1fd31428>
     3a8:	0013010b 	andseq	r0, r3, fp, lsl #2
     3ac:	000d0400 	andeq	r0, sp, r0, lsl #8
     3b0:	0b3a0e03 	bleq	e83bc4 <startup-0x1f17c43c>
     3b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     3b8:	00000b38 	andeq	r0, r0, r8, lsr fp
     3bc:	0b000f05 	bleq	3fd8 <startup-0x1fffc028>
     3c0:	0013490b 	andseq	r4, r3, fp, lsl #18
     3c4:	00160600 	andseq	r0, r6, r0, lsl #12
     3c8:	0b3a0e03 	bleq	e83bdc <startup-0x1f17c424>
     3cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     3d0:	13070000 	movwne	r0, #28672	; 0x7000
     3d4:	0b0e0301 	bleq	380fe0 <startup-0x1fc7f020>
     3d8:	3b0b3a0b 	blcc	2cec0c <startup-0x1fd313f4>
     3dc:	0013010b 	andseq	r0, r3, fp, lsl #2
     3e0:	00240800 	eoreq	r0, r4, r0, lsl #16
     3e4:	0b3e0b0b 	bleq	f83018 <startup-0x1f07cfe8>
     3e8:	00000803 	andeq	r0, r0, r3, lsl #16
     3ec:	27011509 	strcs	r1, [r1, -r9, lsl #10]
     3f0:	00130119 	andseq	r0, r3, r9, lsl r1
     3f4:	00050a00 	andeq	r0, r5, r0, lsl #20
     3f8:	00001349 	andeq	r1, r0, r9, asr #6
     3fc:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
     400:	00130113 	andseq	r0, r3, r3, lsl r1
     404:	00210c00 	eoreq	r0, r1, r0, lsl #24
     408:	340d0000 	strcc	r0, [sp], #-0
     40c:	3a0e0300 	bcc	381014 <startup-0x1fc7efec>
     410:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     414:	3c193f13 	ldccc	15, cr3, [r9], {19}
     418:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
     41c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     420:	0b3b0b3a 	bleq	ec3110 <startup-0x1f13cef0>
     424:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     428:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
     42c:	03193f01 	tsteq	r9, #1, 30
     430:	3b0b3a0e 	blcc	2cec70 <startup-0x1fd31390>
     434:	1119270b 	tstne	r9, fp, lsl #14
     438:	40061201 	andmi	r1, r6, r1, lsl #4
     43c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     440:	00001301 	andeq	r1, r0, r1, lsl #6
     444:	03000510 	movweq	r0, #1296	; 0x510
     448:	3b0b3a0e 	blcc	2cec88 <startup-0x1fd31378>
     44c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     450:	11000018 	tstne	r0, r8, lsl r0
     454:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     458:	0b3a0e03 	bleq	e83c6c <startup-0x1f17c394>
     45c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     460:	06120111 			; <UNDEFINED> instruction: 0x06120111
     464:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     468:	00000019 	andeq	r0, r0, r9, lsl r0
     46c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     470:	030b130e 	movweq	r1, #45838	; 0xb30e
     474:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     478:	00171006 	andseq	r1, r7, r6
     47c:	01130200 	tsteq	r3, r0, lsl #4
     480:	0b3a0b0b 	bleq	e830b4 <startup-0x1f17cf4c>
     484:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     488:	0d030000 	stceq	0, cr0, [r3, #-0]
     48c:	3a0e0300 	bcc	381094 <startup-0x1fc7ef6c>
     490:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     494:	000b3813 	andeq	r3, fp, r3, lsl r8
     498:	00240400 	eoreq	r0, r4, r0, lsl #8
     49c:	0b3e0b0b 	bleq	f830d0 <startup-0x1f07cf30>
     4a0:	00000e03 	andeq	r0, r0, r3, lsl #28
     4a4:	0b000f05 	bleq	40c0 <startup-0x1fffbf40>
     4a8:	0013490b 	andseq	r4, r3, fp, lsl #18
     4ac:	00160600 	andseq	r0, r6, r0, lsl #12
     4b0:	0b3a0e03 	bleq	e83cc4 <startup-0x1f17c33c>
     4b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     4b8:	13070000 	movwne	r0, #28672	; 0x7000
     4bc:	0b0e0301 	bleq	3810c8 <startup-0x1fc7ef38>
     4c0:	3b0b3a0b 	blcc	2cecf4 <startup-0x1fd3130c>
     4c4:	0013010b 	andseq	r0, r3, fp, lsl #2
     4c8:	00240800 	eoreq	r0, r4, r0, lsl #16
     4cc:	0b3e0b0b 	bleq	f83100 <startup-0x1f07cf00>
     4d0:	00000803 	andeq	r0, r0, r3, lsl #16
     4d4:	27011509 	strcs	r1, [r1, -r9, lsl #10]
     4d8:	00130119 	andseq	r0, r3, r9, lsl r1
     4dc:	00050a00 	andeq	r0, r5, r0, lsl #20
     4e0:	00001349 	andeq	r1, r0, r9, asr #6
     4e4:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
     4e8:	00130113 	andseq	r0, r3, r3, lsl r1
     4ec:	00210c00 	eoreq	r0, r1, r0, lsl #24
     4f0:	340d0000 	strcc	r0, [sp], #-0
     4f4:	3a0e0300 	bcc	3810fc <startup-0x1fc7ef04>
     4f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4fc:	3c193f13 	ldccc	15, cr3, [r9], {19}
     500:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
     504:	13490021 	movtne	r0, #36897	; 0x9021
     508:	00000b2f 	andeq	r0, r0, pc, lsr #22
     50c:	0300340f 	movweq	r3, #1039	; 0x40f
     510:	3b0b3a0e 	blcc	2ced50 <startup-0x1fd312b0>
     514:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     518:	10000018 	andne	r0, r0, r8, lsl r0
     51c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     520:	0b3b0b3a 	bleq	ec3210 <startup-0x1f13cdf0>
     524:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     528:	00001802 	andeq	r1, r0, r2, lsl #16
     52c:	3f012e11 	svccc	0x00012e11
     530:	3a0e0319 	bcc	38119c <startup-0x1fc7ee64>
     534:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     538:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     53c:	96184006 	ldrls	r4, [r8], -r6
     540:	13011942 	movwne	r1, #6466	; 0x1942
     544:	05120000 	ldreq	r0, [r2, #-0]
     548:	3a0e0300 	bcc	381150 <startup-0x1fc7eeb0>
     54c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     550:	00180213 	andseq	r0, r8, r3, lsl r2
     554:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
     558:	0b3a0e03 	bleq	e83d6c <startup-0x1f17c294>
     55c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     560:	06120111 			; <UNDEFINED> instruction: 0x06120111
     564:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     568:	00000019 	andeq	r0, r0, r9, lsl r0
     56c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     570:	030b130e 	movweq	r1, #45838	; 0xb30e
     574:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     578:	00171006 	andseq	r1, r7, r6
     57c:	01130200 	tsteq	r3, r0, lsl #4
     580:	0b3a0b0b 	bleq	e831b4 <startup-0x1f17ce4c>
     584:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     588:	0d030000 	stceq	0, cr0, [r3, #-0]
     58c:	3a0e0300 	bcc	381194 <startup-0x1fc7ee6c>
     590:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     594:	000b3813 	andeq	r3, fp, r3, lsl r8
     598:	00240400 	eoreq	r0, r4, r0, lsl #8
     59c:	0b3e0b0b 	bleq	f831d0 <startup-0x1f07ce30>
     5a0:	00000e03 	andeq	r0, r0, r3, lsl #28
     5a4:	0b000f05 	bleq	41c0 <startup-0x1fffbe40>
     5a8:	0013490b 	andseq	r4, r3, fp, lsl #18
     5ac:	00160600 	andseq	r0, r6, r0, lsl #12
     5b0:	0b3a0e03 	bleq	e83dc4 <startup-0x1f17c23c>
     5b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     5b8:	13070000 	movwne	r0, #28672	; 0x7000
     5bc:	0b0e0301 	bleq	3811c8 <startup-0x1fc7ee38>
     5c0:	3b0b3a0b 	blcc	2cedf4 <startup-0x1fd3120c>
     5c4:	0013010b 	andseq	r0, r3, fp, lsl #2
     5c8:	00240800 	eoreq	r0, r4, r0, lsl #16
     5cc:	0b3e0b0b 	bleq	f83200 <startup-0x1f07ce00>
     5d0:	00000803 	andeq	r0, r0, r3, lsl #16
     5d4:	27011509 	strcs	r1, [r1, -r9, lsl #10]
     5d8:	00130119 	andseq	r0, r3, r9, lsl r1
     5dc:	00050a00 	andeq	r0, r5, r0, lsl #20
     5e0:	00001349 	andeq	r1, r0, r9, asr #6
     5e4:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
     5e8:	00130113 	andseq	r0, r3, r3, lsl r1
     5ec:	00210c00 	eoreq	r0, r1, r0, lsl #24
     5f0:	340d0000 	strcc	r0, [sp], #-0
     5f4:	3a0e0300 	bcc	3811fc <startup-0x1fc7ee04>
     5f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     5fc:	3c193f13 	ldccc	15, cr3, [r9], {19}
     600:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
     604:	13490021 	movtne	r0, #36897	; 0x9021
     608:	00000b2f 	andeq	r0, r0, pc, lsr #22
     60c:	0300340f 	movweq	r3, #1039	; 0x40f
     610:	3b0b3a0e 	blcc	2cee50 <startup-0x1fd311b0>
     614:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     618:	10000018 	andne	r0, r0, r8, lsl r0
     61c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     620:	0b3b0b3a 	bleq	ec3310 <startup-0x1f13ccf0>
     624:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     628:	00001802 	andeq	r1, r0, r2, lsl #16
     62c:	3f012e11 	svccc	0x00012e11
     630:	3a0e0319 	bcc	38129c <startup-0x1fc7ed64>
     634:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     638:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     63c:	96184006 	ldrls	r4, [r8], -r6
     640:	13011942 	movwne	r1, #6466	; 0x1942
     644:	05120000 	ldreq	r0, [r2, #-0]
     648:	3a0e0300 	bcc	381250 <startup-0x1fc7edb0>
     64c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     650:	00180213 	andseq	r0, r8, r3, lsl r2
     654:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
     658:	0b3a0e03 	bleq	e83e6c <startup-0x1f17c194>
     65c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     660:	06120111 			; <UNDEFINED> instruction: 0x06120111
     664:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     668:	00000019 	andeq	r0, r0, r9, lsl r0
     66c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     670:	030b130e 	movweq	r1, #45838	; 0xb30e
     674:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     678:	00171006 	andseq	r1, r7, r6
     67c:	01130200 	tsteq	r3, r0, lsl #4
     680:	0b3a0b0b 	bleq	e832b4 <startup-0x1f17cd4c>
     684:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     688:	0d030000 	stceq	0, cr0, [r3, #-0]
     68c:	3a0e0300 	bcc	381294 <startup-0x1fc7ed6c>
     690:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     694:	000b3813 	andeq	r3, fp, r3, lsl r8
     698:	00240400 	eoreq	r0, r4, r0, lsl #8
     69c:	0b3e0b0b 	bleq	f832d0 <startup-0x1f07cd30>
     6a0:	00000e03 	andeq	r0, r0, r3, lsl #28
     6a4:	0b000f05 	bleq	42c0 <startup-0x1fffbd40>
     6a8:	0013490b 	andseq	r4, r3, fp, lsl #18
     6ac:	00160600 	andseq	r0, r6, r0, lsl #12
     6b0:	0b3a0e03 	bleq	e83ec4 <startup-0x1f17c13c>
     6b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     6b8:	13070000 	movwne	r0, #28672	; 0x7000
     6bc:	0b0e0301 	bleq	3812c8 <startup-0x1fc7ed38>
     6c0:	3b0b3a0b 	blcc	2ceef4 <startup-0x1fd3110c>
     6c4:	0013010b 	andseq	r0, r3, fp, lsl #2
     6c8:	00240800 	eoreq	r0, r4, r0, lsl #16
     6cc:	0b3e0b0b 	bleq	f83300 <startup-0x1f07cd00>
     6d0:	00000803 	andeq	r0, r0, r3, lsl #16
     6d4:	27011509 	strcs	r1, [r1, -r9, lsl #10]
     6d8:	00130119 	andseq	r0, r3, r9, lsl r1
     6dc:	00050a00 	andeq	r0, r5, r0, lsl #20
     6e0:	00001349 	andeq	r1, r0, r9, asr #6
     6e4:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
     6e8:	00130113 	andseq	r0, r3, r3, lsl r1
     6ec:	00210c00 	eoreq	r0, r1, r0, lsl #24
     6f0:	340d0000 	strcc	r0, [sp], #-0
     6f4:	3a0e0300 	bcc	3812fc <startup-0x1fc7ed04>
     6f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6fc:	3c193f13 	ldccc	15, cr3, [r9], {19}
     700:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
     704:	13490021 	movtne	r0, #36897	; 0x9021
     708:	00000b2f 	andeq	r0, r0, pc, lsr #22
     70c:	0300340f 	movweq	r3, #1039	; 0x40f
     710:	3b0b3a0e 	blcc	2cef50 <startup-0x1fd310b0>
     714:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     718:	10000018 	andne	r0, r0, r8, lsl r0
     71c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     720:	0b3b0b3a 	bleq	ec3410 <startup-0x1f13cbf0>
     724:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     728:	00001802 	andeq	r1, r0, r2, lsl #16
     72c:	3f012e11 	svccc	0x00012e11
     730:	3a0e0319 	bcc	38139c <startup-0x1fc7ec64>
     734:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     738:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     73c:	96184006 	ldrls	r4, [r8], -r6
     740:	13011942 	movwne	r1, #6466	; 0x1942
     744:	05120000 	ldreq	r0, [r2, #-0]
     748:	3a0e0300 	bcc	381350 <startup-0x1fc7ecb0>
     74c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     750:	00180213 	andseq	r0, r8, r3, lsl r2
     754:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
     758:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     75c:	0b3b0b3a 	bleq	ec344c <startup-0x1f13cbb4>
     760:	01111927 	tsteq	r1, r7, lsr #18
     764:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     768:	01194297 			; <UNDEFINED> instruction: 0x01194297
     76c:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
     770:	08030005 	stmdaeq	r3, {r0, r2}
     774:	0b3b0b3a 	bleq	ec3464 <startup-0x1f13cb9c>
     778:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     77c:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
     780:	3a0e0301 	bcc	38138c <startup-0x1fc7ec74>
     784:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     788:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     78c:	96184006 	ldrls	r4, [r8], -r6
     790:	00001942 	andeq	r1, r0, r2, asr #18
     794:	01110100 	tsteq	r1, r0, lsl #2
     798:	0b130e25 	bleq	4c4034 <startup-0x1fb3bfcc>
     79c:	01110e03 	tsteq	r1, r3, lsl #28
     7a0:	17100612 			; <UNDEFINED> instruction: 0x17100612
     7a4:	13020000 	movwne	r0, #8192	; 0x2000
     7a8:	3a0b0b01 	bcc	2c33b4 <startup-0x1fd3cc4c>
     7ac:	010b3b0b 	tsteq	fp, fp, lsl #22
     7b0:	03000013 	movweq	r0, #19
     7b4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     7b8:	0b3b0b3a 	bleq	ec34a8 <startup-0x1f13cb58>
     7bc:	0b381349 	bleq	e054e8 <startup-0x1f1fab18>
     7c0:	24040000 	strcs	r0, [r4], #-0
     7c4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     7c8:	000e030b 	andeq	r0, lr, fp, lsl #6
     7cc:	000f0500 	andeq	r0, pc, r0, lsl #10
     7d0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     7d4:	16060000 	strne	r0, [r6], -r0
     7d8:	3a0e0300 	bcc	3813e0 <startup-0x1fc7ec20>
     7dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     7e0:	07000013 	smladeq	r0, r3, r0, r0
     7e4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     7e8:	0b3a0b0b 	bleq	e8341c <startup-0x1f17cbe4>
     7ec:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     7f0:	24080000 	strcs	r0, [r8], #-0
     7f4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     7f8:	0008030b 	andeq	r0, r8, fp, lsl #6
     7fc:	01150900 	tsteq	r5, r0, lsl #18
     800:	13011927 	movwne	r1, #6439	; 0x1927
     804:	050a0000 	streq	r0, [sl, #-0]
     808:	00134900 	andseq	r4, r3, r0, lsl #18
     80c:	01010b00 	tsteq	r1, r0, lsl #22
     810:	13011349 	movwne	r1, #4937	; 0x1349
     814:	210c0000 	mrscs	r0, (UNDEF: 12)
     818:	0d000000 	stceq	0, cr0, [r0, #-0]
     81c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     820:	0b3b0b3a 	bleq	ec3510 <startup-0x1f13caf0>
     824:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     828:	0000193c 	andeq	r1, r0, ip, lsr r9
     82c:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
     830:	000b2f13 	andeq	r2, fp, r3, lsl pc
     834:	00340f00 	eorseq	r0, r4, r0, lsl #30
     838:	0b3a0e03 	bleq	e8404c <startup-0x1f17bfb4>
     83c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     840:	00001802 	andeq	r1, r0, r2, lsl #16
     844:	03003410 	movweq	r3, #1040	; 0x410
     848:	3b0b3a0e 	blcc	2cf088 <startup-0x1fd30f78>
     84c:	3f13490b 	svccc	0x0013490b
     850:	00180219 	andseq	r0, r8, r9, lsl r2
     854:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
     858:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     85c:	0b3b0b3a 	bleq	ec354c <startup-0x1f13cab4>
     860:	01111927 	tsteq	r1, r7, lsr #18
     864:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     868:	01194296 			; <UNDEFINED> instruction: 0x01194296
     86c:	12000013 	andne	r0, r0, #19
     870:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     874:	0b3b0b3a 	bleq	ec3564 <startup-0x1f13ca9c>
     878:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     87c:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
     880:	3a0e0301 	bcc	38148c <startup-0x1fc7eb74>
     884:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     888:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     88c:	96184006 	ldrls	r4, [r8], -r6
     890:	00001942 	andeq	r1, r0, r2, asr #18
     894:	01110100 	tsteq	r1, r0, lsl #2
     898:	0b130e25 	bleq	4c4134 <startup-0x1fb3becc>
     89c:	01110e03 	tsteq	r1, r3, lsl #28
     8a0:	17100612 			; <UNDEFINED> instruction: 0x17100612
     8a4:	13020000 	movwne	r0, #8192	; 0x2000
     8a8:	3a0b0b01 	bcc	2c34b4 <startup-0x1fd3cb4c>
     8ac:	010b3b0b 	tsteq	fp, fp, lsl #22
     8b0:	03000013 	movweq	r0, #19
     8b4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     8b8:	0b3b0b3a 	bleq	ec35a8 <startup-0x1f13ca58>
     8bc:	0b381349 	bleq	e055e8 <startup-0x1f1faa18>
     8c0:	24040000 	strcs	r0, [r4], #-0
     8c4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     8c8:	000e030b 	andeq	r0, lr, fp, lsl #6
     8cc:	000f0500 	andeq	r0, pc, r0, lsl #10
     8d0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     8d4:	16060000 	strne	r0, [r6], -r0
     8d8:	3a0e0300 	bcc	3814e0 <startup-0x1fc7eb20>
     8dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8e0:	07000013 	smladeq	r0, r3, r0, r0
     8e4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     8e8:	0b3a0b0b 	bleq	e8351c <startup-0x1f17cae4>
     8ec:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     8f0:	24080000 	strcs	r0, [r8], #-0
     8f4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     8f8:	0008030b 	andeq	r0, r8, fp, lsl #6
     8fc:	01150900 	tsteq	r5, r0, lsl #18
     900:	13011927 	movwne	r1, #6439	; 0x1927
     904:	050a0000 	streq	r0, [sl, #-0]
     908:	00134900 	andseq	r4, r3, r0, lsl #18
     90c:	01010b00 	tsteq	r1, r0, lsl #22
     910:	13011349 	movwne	r1, #4937	; 0x1349
     914:	210c0000 	mrscs	r0, (UNDEF: 12)
     918:	0d000000 	stceq	0, cr0, [r0, #-0]
     91c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     920:	0b3b0b3a 	bleq	ec3610 <startup-0x1f13c9f0>
     924:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     928:	0000193c 	andeq	r1, r0, ip, lsr r9
     92c:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
     930:	00052f13 	andeq	r2, r5, r3, lsl pc
     934:	00340f00 	eorseq	r0, r4, r0, lsl #30
     938:	0b3a0e03 	bleq	e8414c <startup-0x1f17beb4>
     93c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     940:	00001802 	andeq	r1, r0, r2, lsl #16
     944:	03003410 	movweq	r3, #1040	; 0x410
     948:	3b0b3a0e 	blcc	2cf188 <startup-0x1fd30e78>
     94c:	3f13490b 	svccc	0x0013490b
     950:	00180219 	andseq	r0, r8, r9, lsl r2
     954:	00211100 	eoreq	r1, r1, r0, lsl #2
     958:	0b2f1349 	bleq	bc5684 <startup-0x1f43a97c>
     95c:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
     960:	03193f01 	tsteq	r9, #1, 30
     964:	3b0b3a0e 	blcc	2cf1a4 <startup-0x1fd30e5c>
     968:	1119270b 	tstne	r9, fp, lsl #14
     96c:	40061201 	andmi	r1, r6, r1, lsl #4
     970:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     974:	00001301 	andeq	r1, r0, r1, lsl #6
     978:	03000513 	movweq	r0, #1299	; 0x513
     97c:	3b0b3a0e 	blcc	2cf1bc <startup-0x1fd30e44>
     980:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     984:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
     988:	0e03012e 	adfeqsp	f0, f3, #0.5
     98c:	0b3b0b3a 	bleq	ec367c <startup-0x1f13c984>
     990:	01111927 	tsteq	r1, r7, lsr #18
     994:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     998:	00194296 	mulseq	r9, r6, r2
     99c:	11010000 	mrsne	r0, (UNDEF: 1)
     9a0:	130e2501 	movwne	r2, #58625	; 0xe501
     9a4:	110e030b 	tstne	lr, fp, lsl #6
     9a8:	10061201 	andne	r1, r6, r1, lsl #4
     9ac:	02000017 	andeq	r0, r0, #23
     9b0:	0b0b0113 	bleq	2c0e04 <startup-0x1fd3f1fc>
     9b4:	0b3b0b3a 	bleq	ec36a4 <startup-0x1f13c95c>
     9b8:	00001301 	andeq	r1, r0, r1, lsl #6
     9bc:	03000d03 	movweq	r0, #3331	; 0xd03
     9c0:	3b0b3a0e 	blcc	2cf200 <startup-0x1fd30e00>
     9c4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     9c8:	0400000b 	streq	r0, [r0], #-11
     9cc:	0b0b0024 	bleq	2c0a64 <startup-0x1fd3f59c>
     9d0:	0e030b3e 	vmoveq.16	d3[0], r0
     9d4:	0f050000 	svceq	0x00050000
     9d8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     9dc:	06000013 			; <UNDEFINED> instruction: 0x06000013
     9e0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     9e4:	0b3b0b3a 	bleq	ec36d4 <startup-0x1f13c92c>
     9e8:	00001349 	andeq	r1, r0, r9, asr #6
     9ec:	03011307 	movweq	r1, #4871	; 0x1307
     9f0:	3a0b0b0e 	bcc	2c3630 <startup-0x1fd3c9d0>
     9f4:	010b3b0b 	tsteq	fp, fp, lsl #22
     9f8:	08000013 	stmdaeq	r0, {r0, r1, r4}
     9fc:	0b0b0024 	bleq	2c0a94 <startup-0x1fd3f56c>
     a00:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     a04:	15090000 	strne	r0, [r9, #-0]
     a08:	01192701 	tsteq	r9, r1, lsl #14
     a0c:	0a000013 	beq	a60 <startup-0x1ffff5a0>
     a10:	13490005 	movtne	r0, #36869	; 0x9005
     a14:	010b0000 	mrseq	r0, (UNDEF: 11)
     a18:	01134901 	tsteq	r3, r1, lsl #18
     a1c:	0c000013 	stceq	0, cr0, [r0], {19}
     a20:	00000021 	andeq	r0, r0, r1, lsr #32
     a24:	0300340d 	movweq	r3, #1037	; 0x40d
     a28:	3b0b3a0e 	blcc	2cf268 <startup-0x1fd30d98>
     a2c:	3f13490b 	svccc	0x0013490b
     a30:	00193c19 	andseq	r3, r9, r9, lsl ip
     a34:	00210e00 	eoreq	r0, r1, r0, lsl #28
     a38:	052f1349 	streq	r1, [pc, #-841]!	; 6f7 <startup-0x1ffff909>
     a3c:	340f0000 	strcc	r0, [pc], #-0	; a44 <startup-0x1ffff5bc>
     a40:	3a134700 	bcc	4d2648 <startup-0x1fb2d9b8>
     a44:	020b3b0b 	andeq	r3, fp, #11264	; 0x2c00
     a48:	10000018 	andne	r0, r0, r8, lsl r0
     a4c:	13470034 	movtne	r0, #28724	; 0x7034
     a50:	18020b3a 	stmdane	r2, {r1, r3, r4, r5, r8, r9, fp}
     a54:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     a58:	03193f01 	tsteq	r9, #1, 30
     a5c:	3b0b3a0e 	blcc	2cf29c <startup-0x1fd30d64>
     a60:	11192705 	tstne	r9, r5, lsl #14
     a64:	40061201 	andmi	r1, r6, r1, lsl #4
     a68:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     a6c:	00001301 	andeq	r1, r0, r1, lsl #6
     a70:	03000512 	movweq	r0, #1298	; 0x512
     a74:	3b0b3a0e 	blcc	2cf2b4 <startup-0x1fd30d4c>
     a78:	02134905 	andseq	r4, r3, #81920	; 0x14000
     a7c:	13000018 	movwne	r0, #24
     a80:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     a84:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a88:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     a8c:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
     a90:	03193f01 	tsteq	r9, #1, 30
     a94:	3b0b3a0e 	blcc	2cf2d4 <startup-0x1fd30d2c>
     a98:	11192705 	tstne	r9, r5, lsl #14
     a9c:	40061201 	andmi	r1, r6, r1, lsl #4
     aa0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     aa4:	00001301 	andeq	r1, r0, r1, lsl #6
     aa8:	03003415 	movweq	r3, #1045	; 0x415
     aac:	3b0b3a08 	blcc	2cf2d4 <startup-0x1fd30d2c>
     ab0:	02134905 	andseq	r4, r3, #81920	; 0x14000
     ab4:	16000018 			; <UNDEFINED> instruction: 0x16000018
     ab8:	08030034 	stmdaeq	r3, {r2, r4, r5}
     abc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     ac0:	00001349 	andeq	r1, r0, r9, asr #6
     ac4:	03000517 	movweq	r0, #1303	; 0x517
     ac8:	3b0b3a08 	blcc	2cf2f0 <startup-0x1fd30d10>
     acc:	02134905 	andseq	r4, r3, #81920	; 0x14000
     ad0:	18000018 	stmdane	r0, {r3, r4}
     ad4:	0111010b 	tsteq	r1, fp, lsl #2
     ad8:	00000612 	andeq	r0, r0, r2, lsl r6
     adc:	3f012e19 	svccc	0x00012e19
     ae0:	3a0e0319 	bcc	38174c <startup-0x1fc7e8b4>
     ae4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     ae8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     aec:	97184006 	ldrls	r4, [r8, -r6]
     af0:	13011942 	movwne	r1, #6466	; 0x1942
     af4:	051a0000 	ldreq	r0, [sl, #-0]
     af8:	3a080300 	bcc	201700 <startup-0x1fdfe900>
     afc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b00:	00180213 	andseq	r0, r8, r3, lsl r2
     b04:	00051b00 	andeq	r1, r5, r0, lsl #22
     b08:	0b3a0e03 	bleq	e8431c <startup-0x1f17bce4>
     b0c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     b10:	00001802 	andeq	r1, r0, r2, lsl #16
     b14:	0300341c 	movweq	r3, #1052	; 0x41c
     b18:	3b0b3a0e 	blcc	2cf358 <startup-0x1fd30ca8>
     b1c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     b20:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
     b24:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     b28:	0b3a0e03 	bleq	e8433c <startup-0x1f17bcc4>
     b2c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     b30:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b34:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     b38:	00130119 	andseq	r0, r3, r9, lsl r1
     b3c:	00341e00 	eorseq	r1, r4, r0, lsl #28
     b40:	0b3a0803 	bleq	e82b54 <startup-0x1f17d4ac>
     b44:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     b48:	00001802 	andeq	r1, r0, r2, lsl #16
     b4c:	3f002e1f 	svccc	0x00002e1f
     b50:	3a0e0319 	bcc	3817bc <startup-0x1fc7e844>
     b54:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     b58:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     b5c:	96184006 	ldrls	r4, [r8], -r6
     b60:	00001942 	andeq	r1, r0, r2, asr #18
     b64:	3f012e20 	svccc	0x00012e20
     b68:	3a0e0319 	bcc	3817d4 <startup-0x1fc7e82c>
     b6c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     b70:	11134919 	tstne	r3, r9, lsl r9
     b74:	40061201 	andmi	r1, r6, r1, lsl #4
     b78:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     b7c:	00001301 	andeq	r1, r0, r1, lsl #6
     b80:	03012e21 	movweq	r2, #7713	; 0x1e21
     b84:	3b0b3a0e 	blcc	2cf3c4 <startup-0x1fd30c3c>
     b88:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     b8c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     b90:	96184006 	ldrls	r4, [r8], -r6
     b94:	13011942 	movwne	r1, #6466	; 0x1942
     b98:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
     b9c:	3a0e0301 	bcc	3817a8 <startup-0x1fc7e858>
     ba0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     ba4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     ba8:	97184006 	ldrls	r4, [r8, -r6]
     bac:	13011942 	movwne	r1, #6466	; 0x1942
     bb0:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
     bb4:	03193f00 	tsteq	r9, #0, 30
     bb8:	3b0b3a0e 	blcc	2cf3f8 <startup-0x1fd30c08>
     bbc:	1119270b 	tstne	r9, fp, lsl #14
     bc0:	40061201 	andmi	r1, r6, r1, lsl #4
     bc4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     bc8:	01000000 	mrseq	r0, (UNDEF: 0)
     bcc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     bd0:	0e030b13 	vmoveq.32	d3[0], r0
     bd4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     bd8:	00001710 	andeq	r1, r0, r0, lsl r7
     bdc:	0b011302 	bleq	457ec <startup-0x1ffba814>
     be0:	3b0b3a0b 	blcc	2cf414 <startup-0x1fd30bec>
     be4:	0013010b 	andseq	r0, r3, fp, lsl #2
     be8:	000d0300 	andeq	r0, sp, r0, lsl #6
     bec:	0b3a0e03 	bleq	e84400 <startup-0x1f17bc00>
     bf0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     bf4:	00000b38 	andeq	r0, r0, r8, lsr fp
     bf8:	0b002404 	bleq	9c10 <startup-0x1fff63f0>
     bfc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     c00:	0500000e 	streq	r0, [r0, #-14]
     c04:	0b0b000f 	bleq	2c0c48 <startup-0x1fd3f3b8>
     c08:	00001349 	andeq	r1, r0, r9, asr #6
     c0c:	03001606 	movweq	r1, #1542	; 0x606
     c10:	3b0b3a0e 	blcc	2cf450 <startup-0x1fd30bb0>
     c14:	0013490b 	andseq	r4, r3, fp, lsl #18
     c18:	01130700 	tsteq	r3, r0, lsl #14
     c1c:	0b0b0e03 	bleq	2c4430 <startup-0x1fd3bbd0>
     c20:	0b3b0b3a 	bleq	ec3910 <startup-0x1f13c6f0>
     c24:	00001301 	andeq	r1, r0, r1, lsl #6
     c28:	3f012e08 	svccc	0x00012e08
     c2c:	3a0e0319 	bcc	381898 <startup-0x1fc7e768>
     c30:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     c34:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     c38:	97184006 	ldrls	r4, [r8, -r6]
     c3c:	13011942 	movwne	r1, #6466	; 0x1942
     c40:	05090000 	streq	r0, [r9, #-0]
     c44:	3a0e0300 	bcc	38184c <startup-0x1fc7e7b4>
     c48:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c4c:	00180213 	andseq	r0, r8, r3, lsl r2
     c50:	11010000 	mrsne	r0, (UNDEF: 1)
     c54:	130e2501 	movwne	r2, #58625	; 0xe501
     c58:	110e030b 	tstne	lr, fp, lsl #6
     c5c:	10061201 	andne	r1, r6, r1, lsl #4
     c60:	02000017 	andeq	r0, r0, #23
     c64:	0b0b0113 	bleq	2c10b8 <startup-0x1fd3ef48>
     c68:	0b3b0b3a 	bleq	ec3958 <startup-0x1f13c6a8>
     c6c:	00001301 	andeq	r1, r0, r1, lsl #6
     c70:	03000d03 	movweq	r0, #3331	; 0xd03
     c74:	3b0b3a0e 	blcc	2cf4b4 <startup-0x1fd30b4c>
     c78:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     c7c:	0400000b 	streq	r0, [r0], #-11
     c80:	0b0b0024 	bleq	2c0d18 <startup-0x1fd3f2e8>
     c84:	0e030b3e 	vmoveq.16	d3[0], r0
     c88:	0f050000 	svceq	0x00050000
     c8c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     c90:	06000013 			; <UNDEFINED> instruction: 0x06000013
     c94:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     c98:	0b3b0b3a 	bleq	ec3988 <startup-0x1f13c678>
     c9c:	00001349 	andeq	r1, r0, r9, asr #6
     ca0:	3f012e07 	svccc	0x00012e07
     ca4:	3a0e0319 	bcc	381910 <startup-0x1fc7e6f0>
     ca8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     cac:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     cb0:	97184006 	ldrls	r4, [r8, -r6]
     cb4:	13011942 	movwne	r1, #6466	; 0x1942
     cb8:	05080000 	streq	r0, [r8, #-0]
     cbc:	3a080300 	bcc	2018c4 <startup-0x1fdfe73c>
     cc0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     cc4:	00180213 	andseq	r0, r8, r3, lsl r2
     cc8:	00050900 	andeq	r0, r5, r0, lsl #18
     ccc:	0b3a0e03 	bleq	e844e0 <startup-0x1f17bb20>
     cd0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     cd4:	00001802 	andeq	r1, r0, r2, lsl #16
     cd8:	0b00240a 	bleq	9d08 <startup-0x1fff62f8>
     cdc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     ce0:	00000008 	andeq	r0, r0, r8
     ce4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     ce8:	030b130e 	movweq	r1, #45838	; 0xb30e
     cec:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     cf0:	00171006 	andseq	r1, r7, r6
     cf4:	01130200 	tsteq	r3, r0, lsl #4
     cf8:	0b3a0b0b 	bleq	e8392c <startup-0x1f17c6d4>
     cfc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     d00:	0d030000 	stceq	0, cr0, [r3, #-0]
     d04:	3a0e0300 	bcc	38190c <startup-0x1fc7e6f4>
     d08:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d0c:	000b3813 	andeq	r3, fp, r3, lsl r8
     d10:	00240400 	eoreq	r0, r4, r0, lsl #8
     d14:	0b3e0b0b 	bleq	f83948 <startup-0x1f07c6b8>
     d18:	00000e03 	andeq	r0, r0, r3, lsl #28
     d1c:	03001605 	movweq	r1, #1541	; 0x605
     d20:	3b0b3a0e 	blcc	2cf560 <startup-0x1fd30aa0>
     d24:	0013490b 	andseq	r4, r3, fp, lsl #18
     d28:	012e0600 			; <UNDEFINED> instruction: 0x012e0600
     d2c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     d30:	0b3b0b3a 	bleq	ec3a20 <startup-0x1f13c5e0>
     d34:	13491927 	movtne	r1, #39207	; 0x9927
     d38:	06120111 			; <UNDEFINED> instruction: 0x06120111
     d3c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     d40:	00130119 	andseq	r0, r3, r9, lsl r1
     d44:	00050700 	andeq	r0, r5, r0, lsl #14
     d48:	0b3a0803 	bleq	e82d5c <startup-0x1f17d2a4>
     d4c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     d50:	00001802 	andeq	r1, r0, r2, lsl #16
     d54:	03003408 	movweq	r3, #1032	; 0x408
     d58:	3b0b3a08 	blcc	2cf580 <startup-0x1fd30a80>
     d5c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     d60:	09000018 	stmdbeq	r0, {r3, r4}
     d64:	0b0b0024 	bleq	2c0dfc <startup-0x1fd3f204>
     d68:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     d6c:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
     d70:	03193f00 	tsteq	r9, #0, 30
     d74:	3b0b3a0e 	blcc	2cf5b4 <startup-0x1fd30a4c>
     d78:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     d7c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     d80:	97184006 	ldrls	r4, [r8, -r6]
     d84:	00001942 	andeq	r1, r0, r2, asr #18
     d88:	3f002e0b 	svccc	0x00002e0b
     d8c:	3a0e0319 	bcc	3819f8 <startup-0x1fc7e608>
     d90:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     d94:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     d98:	97184006 	ldrls	r4, [r8, -r6]
     d9c:	00001942 	andeq	r1, r0, r2, asr #18
     da0:	01110100 	tsteq	r1, r0, lsl #2
     da4:	0b130e25 	bleq	4c4640 <startup-0x1fb3b9c0>
     da8:	01110e03 	tsteq	r1, r3, lsl #28
     dac:	17100612 			; <UNDEFINED> instruction: 0x17100612
     db0:	13020000 	movwne	r0, #8192	; 0x2000
     db4:	3a0b0b01 	bcc	2c39c0 <startup-0x1fd3c640>
     db8:	010b3b0b 	tsteq	fp, fp, lsl #22
     dbc:	03000013 	movweq	r0, #19
     dc0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     dc4:	0b3b0b3a 	bleq	ec3ab4 <startup-0x1f13c54c>
     dc8:	0b381349 	bleq	e05af4 <startup-0x1f1fa50c>
     dcc:	24040000 	strcs	r0, [r4], #-0
     dd0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     dd4:	000e030b 	andeq	r0, lr, fp, lsl #6
     dd8:	000f0500 	andeq	r0, pc, r0, lsl #10
     ddc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     de0:	16060000 	strne	r0, [r6], -r0
     de4:	3a0e0300 	bcc	3819ec <startup-0x1fc7e614>
     de8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     dec:	07000013 	smladeq	r0, r3, r0, r0
     df0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     df4:	0b3a0b0b 	bleq	e83a28 <startup-0x1f17c5d8>
     df8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     dfc:	24080000 	strcs	r0, [r8], #-0
     e00:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     e04:	0008030b 	andeq	r0, r8, fp, lsl #6
     e08:	01150900 	tsteq	r5, r0, lsl #18
     e0c:	13011927 	movwne	r1, #6439	; 0x1927
     e10:	050a0000 	streq	r0, [sl, #-0]
     e14:	00134900 	andseq	r4, r3, r0, lsl #18
     e18:	01010b00 	tsteq	r1, r0, lsl #22
     e1c:	13011349 	movwne	r1, #4937	; 0x1349
     e20:	210c0000 	mrscs	r0, (UNDEF: 12)
     e24:	0d000000 	stceq	0, cr0, [r0, #-0]
     e28:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     e2c:	0b3b0b3a 	bleq	ec3b1c <startup-0x1f13c4e4>
     e30:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     e34:	0000193c 	andeq	r1, r0, ip, lsr r9
     e38:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
     e3c:	00052f13 	andeq	r2, r5, r3, lsl pc
     e40:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
     e44:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     e48:	0b3b0b3a 	bleq	ec3b38 <startup-0x1f13c4c8>
     e4c:	01111927 	tsteq	r1, r7, lsr #18
     e50:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     e54:	01194296 			; <UNDEFINED> instruction: 0x01194296
     e58:	10000013 	andne	r0, r0, r3, lsl r0
     e5c:	08030034 	stmdaeq	r3, {r2, r4, r5}
     e60:	0b3b0b3a 	bleq	ec3b50 <startup-0x1f13c4b0>
     e64:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     e68:	34110000 	ldrcc	r0, [r1], #-0
     e6c:	3a0e0300 	bcc	381a74 <startup-0x1fc7e58c>
     e70:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e74:	00180213 	andseq	r0, r8, r3, lsl r2
     e78:	00211200 	eoreq	r1, r1, r0, lsl #4
     e7c:	0b2f1349 	bleq	bc5ba8 <startup-0x1f43a458>
     e80:	05130000 	ldreq	r0, [r3, #-0]
     e84:	3a0e0300 	bcc	381a8c <startup-0x1fc7e574>
     e88:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e8c:	00180213 	andseq	r0, r8, r3, lsl r2
     e90:	002e1400 	eoreq	r1, lr, r0, lsl #8
     e94:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     e98:	0b3b0b3a 	bleq	ec3b88 <startup-0x1f13c478>
     e9c:	01111927 	tsteq	r1, r7, lsr #18
     ea0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     ea4:	00194296 	mulseq	r9, r6, r2
     ea8:	002e1500 	eoreq	r1, lr, r0, lsl #10
     eac:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     eb0:	0b3b0b3a 	bleq	ec3ba0 <startup-0x1f13c460>
     eb4:	01111927 	tsteq	r1, r7, lsr #18
     eb8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     ebc:	00194297 	mulseq	r9, r7, r2
     ec0:	00051600 	andeq	r1, r5, r0, lsl #12
     ec4:	0b3a0803 	bleq	e82ed8 <startup-0x1f17d128>
     ec8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ecc:	00001802 	andeq	r1, r0, r2, lsl #16
     ed0:	3f012e17 	svccc	0x00012e17
     ed4:	3a0e0319 	bcc	381b40 <startup-0x1fc7e4c0>
     ed8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     edc:	11134919 	tstne	r3, r9, lsl r9
     ee0:	40061201 	andmi	r1, r6, r1, lsl #4
     ee4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     ee8:	00001301 	andeq	r1, r0, r1, lsl #6
     eec:	3f012e18 	svccc	0x00012e18
     ef0:	3a0e0319 	bcc	381b5c <startup-0x1fc7e4a4>
     ef4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     ef8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     efc:	97184006 	ldrls	r4, [r8, -r6]
     f00:	13011942 	movwne	r1, #6466	; 0x1942
     f04:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
     f08:	03193f01 	tsteq	r9, #1, 30
     f0c:	3b0b3a0e 	blcc	2cf74c <startup-0x1fd308b4>
     f10:	1119270b 	tstne	r9, fp, lsl #14
     f14:	40061201 	andmi	r1, r6, r1, lsl #4
     f18:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     f1c:	01000000 	mrseq	r0, (UNDEF: 0)
     f20:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     f24:	0e030b13 	vmoveq.32	d3[0], r0
     f28:	06120111 			; <UNDEFINED> instruction: 0x06120111
     f2c:	00001710 	andeq	r1, r0, r0, lsl r7
     f30:	03011302 	movweq	r1, #4866	; 0x1302
     f34:	3a0b0b0e 	bcc	2c3b74 <startup-0x1fd3c48c>
     f38:	010b3b0b 	tsteq	fp, fp, lsl #22
     f3c:	03000013 	movweq	r0, #19
     f40:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     f44:	0b3b0b3a 	bleq	ec3c34 <startup-0x1f13c3cc>
     f48:	0b381349 	bleq	e05c74 <startup-0x1f1fa38c>
     f4c:	0f040000 	svceq	0x00040000
     f50:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     f54:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
     f58:	0b0b0024 	bleq	2c0ff0 <startup-0x1fd3f010>
     f5c:	0e030b3e 	vmoveq.16	d3[0], r0
     f60:	24060000 	strcs	r0, [r6], #-0
     f64:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     f68:	0008030b 	andeq	r0, r8, fp, lsl #6
     f6c:	01150700 	tsteq	r5, r0, lsl #14
     f70:	13011927 	movwne	r1, #6439	; 0x1927
     f74:	05080000 	streq	r0, [r8, #-0]
     f78:	00134900 	andseq	r4, r3, r0, lsl #18
     f7c:	00160900 	andseq	r0, r6, r0, lsl #18
     f80:	0b3a0e03 	bleq	e84794 <startup-0x1f17b86c>
     f84:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f88:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
     f8c:	03193f01 	tsteq	r9, #1, 30
     f90:	3b0b3a0e 	blcc	2cf7d0 <startup-0x1fd30830>
     f94:	1119270b 	tstne	r9, fp, lsl #14
     f98:	40061201 	andmi	r1, r6, r1, lsl #4
     f9c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     fa0:	00001301 	andeq	r1, r0, r1, lsl #6
     fa4:	0300050b 	movweq	r0, #1291	; 0x50b
     fa8:	3b0b3a08 	blcc	2cf7d0 <startup-0x1fd30830>
     fac:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     fb0:	0c000018 	stceq	0, cr0, [r0], {24}
     fb4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     fb8:	0b3b0b3a 	bleq	ec3ca8 <startup-0x1f13c358>
     fbc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     fc0:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
     fc4:	03193f01 	tsteq	r9, #1, 30
     fc8:	3b0b3a0e 	blcc	2cf808 <startup-0x1fd307f8>
     fcc:	1119270b 	tstne	r9, fp, lsl #14
     fd0:	40061201 	andmi	r1, r6, r1, lsl #4
     fd4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     fd8:	340e0000 	strcc	r0, [lr], #-0
     fdc:	3a0e0300 	bcc	381be4 <startup-0x1fc7e41c>
     fe0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fe4:	00180213 	andseq	r0, r8, r3, lsl r2
     fe8:	11010000 	mrsne	r0, (UNDEF: 1)
     fec:	130e2501 	movwne	r2, #58625	; 0xe501
     ff0:	110e030b 	tstne	lr, fp, lsl #6
     ff4:	10061201 	andne	r1, r6, r1, lsl #4
     ff8:	02000017 	andeq	r0, r0, #23
     ffc:	0b0b0113 	bleq	2c1450 <startup-0x1fd3ebb0>
    1000:	0b3b0b3a 	bleq	ec3cf0 <startup-0x1f13c310>
    1004:	00001301 	andeq	r1, r0, r1, lsl #6
    1008:	03000d03 	movweq	r0, #3331	; 0xd03
    100c:	3b0b3a0e 	blcc	2cf84c <startup-0x1fd307b4>
    1010:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1014:	0400000b 	streq	r0, [r0], #-11
    1018:	0b0b0024 	bleq	2c10b0 <startup-0x1fd3ef50>
    101c:	0e030b3e 	vmoveq.16	d3[0], r0
    1020:	0f050000 	svceq	0x00050000
    1024:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1028:	06000013 			; <UNDEFINED> instruction: 0x06000013
    102c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1030:	0b3b0b3a 	bleq	ec3d20 <startup-0x1f13c2e0>
    1034:	00001349 	andeq	r1, r0, r9, asr #6
    1038:	03011307 	movweq	r1, #4871	; 0x1307
    103c:	3a0b0b0e 	bcc	2c3c7c <startup-0x1fd3c384>
    1040:	010b3b0b 	tsteq	fp, fp, lsl #22
    1044:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1048:	0b0b0024 	bleq	2c10e0 <startup-0x1fd3ef20>
    104c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1050:	15090000 	strne	r0, [r9, #-0]
    1054:	01192701 	tsteq	r9, r1, lsl #14
    1058:	0a000013 	beq	10ac <startup-0x1fffef54>
    105c:	13490005 	movtne	r0, #36869	; 0x9005
    1060:	010b0000 	mrseq	r0, (UNDEF: 11)
    1064:	01134901 	tsteq	r3, r1, lsl #18
    1068:	0c000013 	stceq	0, cr0, [r0], {19}
    106c:	00000021 	andeq	r0, r0, r1, lsr #32
    1070:	0300340d 	movweq	r3, #1037	; 0x40d
    1074:	3b0b3a0e 	blcc	2cf8b4 <startup-0x1fd3074c>
    1078:	3f13490b 	svccc	0x0013490b
    107c:	00193c19 	andseq	r3, r9, r9, lsl ip
    1080:	00210e00 	eoreq	r0, r1, r0, lsl #28
    1084:	052f1349 	streq	r1, [pc, #-841]!	; d43 <startup-0x1ffff2bd>
    1088:	340f0000 	strcc	r0, [pc], #-0	; 1090 <startup-0x1fffef70>
    108c:	3a0e0300 	bcc	381c94 <startup-0x1fc7e36c>
    1090:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1094:	00180213 	andseq	r0, r8, r3, lsl r2
    1098:	00341000 	eorseq	r1, r4, r0
    109c:	0b3a0e03 	bleq	e848b0 <startup-0x1f17b750>
    10a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    10a4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    10a8:	21110000 	tstcs	r1, r0
    10ac:	2f134900 	svccs	0x00134900
    10b0:	1200000b 	andne	r0, r0, #11
    10b4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    10b8:	0b3a0e03 	bleq	e848cc <startup-0x1f17b734>
    10bc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    10c0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    10c4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    10c8:	00130119 	andseq	r0, r3, r9, lsl r1
    10cc:	00051300 	andeq	r1, r5, r0, lsl #6
    10d0:	0b3a0e03 	bleq	e848e4 <startup-0x1f17b71c>
    10d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    10d8:	00001802 	andeq	r1, r0, r2, lsl #16
    10dc:	03012e14 	movweq	r2, #7700	; 0x1e14
    10e0:	3b0b3a0e 	blcc	2cf920 <startup-0x1fd306e0>
    10e4:	1119270b 	tstne	r9, fp, lsl #14
    10e8:	40061201 	andmi	r1, r6, r1, lsl #4
    10ec:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    10f0:	01000000 	mrseq	r0, (UNDEF: 0)
    10f4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    10f8:	0e030b13 	vmoveq.32	d3[0], r0
    10fc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1100:	00001710 	andeq	r1, r0, r0, lsl r7
    1104:	0b011302 	bleq	45d14 <startup-0x1ffba2ec>
    1108:	3b0b3a0b 	blcc	2cf93c <startup-0x1fd306c4>
    110c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1110:	000d0300 	andeq	r0, sp, r0, lsl #6
    1114:	0b3a0e03 	bleq	e84928 <startup-0x1f17b6d8>
    1118:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    111c:	00000b38 	andeq	r0, r0, r8, lsr fp
    1120:	0b002404 	bleq	a138 <startup-0x1fff5ec8>
    1124:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1128:	0500000e 	streq	r0, [r0, #-14]
    112c:	0b0b000f 	bleq	2c1170 <startup-0x1fd3ee90>
    1130:	00001349 	andeq	r1, r0, r9, asr #6
    1134:	03001606 	movweq	r1, #1542	; 0x606
    1138:	3b0b3a0e 	blcc	2cf978 <startup-0x1fd30688>
    113c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1140:	01130700 	tsteq	r3, r0, lsl #14
    1144:	0b0b0e03 	bleq	2c4958 <startup-0x1fd3b6a8>
    1148:	0b3b0b3a 	bleq	ec3e38 <startup-0x1f13c1c8>
    114c:	00001301 	andeq	r1, r0, r1, lsl #6
    1150:	0b002408 	bleq	a178 <startup-0x1fff5e88>
    1154:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1158:	09000008 	stmdbeq	r0, {r3}
    115c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    1160:	00001301 	andeq	r1, r0, r1, lsl #6
    1164:	4900050a 	stmdbmi	r0, {r1, r3, r8, sl}
    1168:	0b000013 	bleq	11bc <startup-0x1fffee44>
    116c:	13490101 	movtne	r0, #37121	; 0x9101
    1170:	00001301 	andeq	r1, r0, r1, lsl #6
    1174:	0000210c 	andeq	r2, r0, ip, lsl #2
    1178:	00340d00 	eorseq	r0, r4, r0, lsl #26
    117c:	0b3a0e03 	bleq	e84990 <startup-0x1f17b670>
    1180:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1184:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1188:	210e0000 	mrscs	r0, (UNDEF: 14)
    118c:	2f134900 	svccs	0x00134900
    1190:	0f000005 	svceq	0x00000005
    1194:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1198:	0b3b0b3a 	bleq	ec3e88 <startup-0x1f13c178>
    119c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    11a0:	34100000 	ldrcc	r0, [r0], #-0
    11a4:	3a0e0300 	bcc	381dac <startup-0x1fc7e254>
    11a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    11ac:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    11b0:	11000018 	tstne	r0, r8, lsl r0
    11b4:	13490021 	movtne	r0, #36897	; 0x9021
    11b8:	00000b2f 	andeq	r0, r0, pc, lsr #22
    11bc:	3f012e12 	svccc	0x00012e12
    11c0:	3a0e0319 	bcc	381e2c <startup-0x1fc7e1d4>
    11c4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    11c8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    11cc:	96184006 	ldrls	r4, [r8], -r6
    11d0:	13011942 	movwne	r1, #6466	; 0x1942
    11d4:	05130000 	ldreq	r0, [r3, #-0]
    11d8:	3a0e0300 	bcc	381de0 <startup-0x1fc7e220>
    11dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    11e0:	00180213 	andseq	r0, r8, r3, lsl r2
    11e4:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
    11e8:	0b3a0e03 	bleq	e849fc <startup-0x1f17b604>
    11ec:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    11f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    11f4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    11f8:	00000019 	andeq	r0, r0, r9, lsl r0
    11fc:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1200:	030b130e 	movweq	r1, #45838	; 0xb30e
    1204:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    1208:	00171006 	andseq	r1, r7, r6
    120c:	01130200 	tsteq	r3, r0, lsl #4
    1210:	0b3a0b0b 	bleq	e83e44 <startup-0x1f17c1bc>
    1214:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1218:	0d030000 	stceq	0, cr0, [r3, #-0]
    121c:	3a0e0300 	bcc	381e24 <startup-0x1fc7e1dc>
    1220:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1224:	000b3813 	andeq	r3, fp, r3, lsl r8
    1228:	00240400 	eoreq	r0, r4, r0, lsl #8
    122c:	0b3e0b0b 	bleq	f83e60 <startup-0x1f07c1a0>
    1230:	00000e03 	andeq	r0, r0, r3, lsl #28
    1234:	0b000f05 	bleq	4e50 <startup-0x1fffb1b0>
    1238:	0013490b 	andseq	r4, r3, fp, lsl #18
    123c:	00160600 	andseq	r0, r6, r0, lsl #12
    1240:	0b3a0e03 	bleq	e84a54 <startup-0x1f17b5ac>
    1244:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1248:	13070000 	movwne	r0, #28672	; 0x7000
    124c:	0b0e0301 	bleq	381e58 <startup-0x1fc7e1a8>
    1250:	3b0b3a0b 	blcc	2cfa84 <startup-0x1fd3057c>
    1254:	0013010b 	andseq	r0, r3, fp, lsl #2
    1258:	00240800 	eoreq	r0, r4, r0, lsl #16
    125c:	0b3e0b0b 	bleq	f83e90 <startup-0x1f07c170>
    1260:	00000803 	andeq	r0, r0, r3, lsl #16
    1264:	27011509 	strcs	r1, [r1, -r9, lsl #10]
    1268:	00130119 	andseq	r0, r3, r9, lsl r1
    126c:	00050a00 	andeq	r0, r5, r0, lsl #20
    1270:	00001349 	andeq	r1, r0, r9, asr #6
    1274:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
    1278:	00130113 	andseq	r0, r3, r3, lsl r1
    127c:	00210c00 	eoreq	r0, r1, r0, lsl #24
    1280:	340d0000 	strcc	r0, [sp], #-0
    1284:	3a0e0300 	bcc	381e8c <startup-0x1fc7e174>
    1288:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    128c:	3c193f13 	ldccc	15, cr3, [r9], {19}
    1290:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
    1294:	13490021 	movtne	r0, #36897	; 0x9021
    1298:	00000b2f 	andeq	r0, r0, pc, lsr #22
    129c:	0300340f 	movweq	r3, #1039	; 0x40f
    12a0:	3b0b3a0e 	blcc	2cfae0 <startup-0x1fd30520>
    12a4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    12a8:	10000018 	andne	r0, r0, r8, lsl r0
    12ac:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    12b0:	0b3b0b3a 	bleq	ec3fa0 <startup-0x1f13c060>
    12b4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    12b8:	00001802 	andeq	r1, r0, r2, lsl #16
    12bc:	3f012e11 	svccc	0x00012e11
    12c0:	3a0e0319 	bcc	381f2c <startup-0x1fc7e0d4>
    12c4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    12c8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    12cc:	96184006 	ldrls	r4, [r8], -r6
    12d0:	13011942 	movwne	r1, #6466	; 0x1942
    12d4:	05120000 	ldreq	r0, [r2, #-0]
    12d8:	3a0e0300 	bcc	381ee0 <startup-0x1fc7e120>
    12dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    12e0:	00180213 	andseq	r0, r8, r3, lsl r2
    12e4:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
    12e8:	0b3a0e03 	bleq	e84afc <startup-0x1f17b504>
    12ec:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    12f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    12f4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    12f8:	00000019 	andeq	r0, r0, r9, lsl r0
    12fc:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1300:	030b130e 	movweq	r1, #45838	; 0xb30e
    1304:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    1308:	00171006 	andseq	r1, r7, r6
    130c:	01130200 	tsteq	r3, r0, lsl #4
    1310:	0b3a0b0b 	bleq	e83f44 <startup-0x1f17c0bc>
    1314:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1318:	0d030000 	stceq	0, cr0, [r3, #-0]
    131c:	3a0e0300 	bcc	381f24 <startup-0x1fc7e0dc>
    1320:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1324:	000b3813 	andeq	r3, fp, r3, lsl r8
    1328:	00240400 	eoreq	r0, r4, r0, lsl #8
    132c:	0b3e0b0b 	bleq	f83f60 <startup-0x1f07c0a0>
    1330:	00000e03 	andeq	r0, r0, r3, lsl #28
    1334:	0b000f05 	bleq	4f50 <startup-0x1fffb0b0>
    1338:	0013490b 	andseq	r4, r3, fp, lsl #18
    133c:	00160600 	andseq	r0, r6, r0, lsl #12
    1340:	0b3a0e03 	bleq	e84b54 <startup-0x1f17b4ac>
    1344:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1348:	13070000 	movwne	r0, #28672	; 0x7000
    134c:	0b0e0301 	bleq	381f58 <startup-0x1fc7e0a8>
    1350:	3b0b3a0b 	blcc	2cfb84 <startup-0x1fd3047c>
    1354:	0013010b 	andseq	r0, r3, fp, lsl #2
    1358:	00240800 	eoreq	r0, r4, r0, lsl #16
    135c:	0b3e0b0b 	bleq	f83f90 <startup-0x1f07c070>
    1360:	00000803 	andeq	r0, r0, r3, lsl #16
    1364:	27011509 	strcs	r1, [r1, -r9, lsl #10]
    1368:	00130119 	andseq	r0, r3, r9, lsl r1
    136c:	00050a00 	andeq	r0, r5, r0, lsl #20
    1370:	00001349 	andeq	r1, r0, r9, asr #6
    1374:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
    1378:	00130113 	andseq	r0, r3, r3, lsl r1
    137c:	00210c00 	eoreq	r0, r1, r0, lsl #24
    1380:	340d0000 	strcc	r0, [sp], #-0
    1384:	3a0e0300 	bcc	381f8c <startup-0x1fc7e074>
    1388:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    138c:	3c193f13 	ldccc	15, cr3, [r9], {19}
    1390:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
    1394:	13490021 	movtne	r0, #36897	; 0x9021
    1398:	0000052f 	andeq	r0, r0, pc, lsr #10
    139c:	0300340f 	movweq	r3, #1039	; 0x40f
    13a0:	3b0b3a0e 	blcc	2cfbe0 <startup-0x1fd30420>
    13a4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    13a8:	10000018 	andne	r0, r0, r8, lsl r0
    13ac:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    13b0:	0b3b0b3a 	bleq	ec40a0 <startup-0x1f13bf60>
    13b4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    13b8:	00001802 	andeq	r1, r0, r2, lsl #16
    13bc:	49002111 	stmdbmi	r0, {r0, r4, r8, sp}
    13c0:	000b2f13 	andeq	r2, fp, r3, lsl pc
    13c4:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
    13c8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    13cc:	0b3b0b3a 	bleq	ec40bc <startup-0x1f13bf44>
    13d0:	01111927 	tsteq	r1, r7, lsr #18
    13d4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    13d8:	01194296 			; <UNDEFINED> instruction: 0x01194296
    13dc:	13000013 	movwne	r0, #19
    13e0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    13e4:	0b3b0b3a 	bleq	ec40d4 <startup-0x1f13bf2c>
    13e8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    13ec:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    13f0:	3a0e0301 	bcc	381ffc <startup-0x1fc7e004>
    13f4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    13f8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    13fc:	96184006 	ldrls	r4, [r8], -r6
    1400:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000018e6 	andeq	r1, r0, r6, ror #17
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	0abf0002 	beq	fefc003c <firstTime.4040+0xdefb0b80>
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	200018f8 	strdcs	r1, [r0], -r8
  3c:	00000056 	andeq	r0, r0, r6, asr r0
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	0ca30002 	stceq	0, cr0, [r3], #8
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20001950 	andcs	r1, r0, r0, asr r9
  5c:	000002a8 	andeq	r0, r0, r8, lsr #5
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	11d20002 	bicsne	r0, r2, r2
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20001bf8 	strdcs	r1, [r0], -r8
  7c:	00000240 	andeq	r0, r0, r0, asr #4
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	13e20002 	mvnne	r0, #2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20001e38 	andcs	r1, r0, r8, lsr lr
  9c:	00000364 	andeq	r0, r0, r4, ror #6
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	1a270002 	bne	9c00bc <startup-0x1f63ff44>
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	2000219c 	mulcs	r0, ip, r1
  bc:	00000238 	andeq	r0, r0, r8, lsr r2
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	1ec30002 	cdpne	0, 12, cr0, cr3, cr2, {0}
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	200023d4 	ldrdcs	r2, [r0], -r4
  dc:	00000370 	andeq	r0, r0, r0, ror r3
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	240d0002 	strcs	r0, [sp], #-2
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	20002744 	andcs	r2, r0, r4, asr #14
  fc:	000002ac 	andeq	r0, r0, ip, lsr #5
	...
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	296c0002 	stmdbcs	ip!, {r1}^
 110:	00040000 	andeq	r0, r4, r0
 114:	00000000 	andeq	r0, r0, r0
 118:	200029f0 	strdcs	r2, [r0], -r0
 11c:	0000052c 	andeq	r0, r0, ip, lsr #10
	...
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	31110002 	tstcc	r1, r2
 130:	00040000 	andeq	r0, r4, r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20002f1c 	andcs	r2, r0, ip, lsl pc
 13c:	00000e44 	andeq	r0, r0, r4, asr #28
	...
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	39b40002 	ldmibcc	r4!, {r1}
 150:	00040000 	andeq	r0, r4, r0
 154:	00000000 	andeq	r0, r0, r0
 158:	20003d60 	andcs	r3, r0, r0, ror #26
 15c:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
 16c:	3ab80002 	bcc	fee0017c <firstTime.4040+0xdedf0cc0>
 170:	00040000 	andeq	r0, r4, r0
 174:	00000000 	andeq	r0, r0, r0
 178:	20003d88 	andcs	r3, r0, r8, lsl #27
 17c:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	3b7f0002 	blcc	1fc019c <startup-0x1e03fe64>
 190:	00040000 	andeq	r0, r4, r0
 194:	00000000 	andeq	r0, r0, r0
 198:	20003db0 			; <UNDEFINED> instruction: 0x20003db0
 19c:	0000006c 	andeq	r0, r0, ip, rrx
	...
 1a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ac:	3cb80002 	ldccc	0, cr0, [r8], #8
 1b0:	00040000 	andeq	r0, r4, r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	20003e1c 	andcs	r3, r0, ip, lsl lr
 1bc:	00000520 	andeq	r0, r0, r0, lsr #10
	...
 1c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1cc:	41a90002 			; <UNDEFINED> instruction: 0x41a90002
 1d0:	00040000 	andeq	r0, r4, r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	2000433c 	andcs	r4, r0, ip, lsr r3
 1dc:	00000094 	muleq	r0, r4, r0
	...
 1e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ec:	42ed0002 	rscmi	r0, sp, #2
 1f0:	00040000 	andeq	r0, r4, r0
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	200043d0 	ldrdcs	r4, [r0], -r0
 1fc:	000000e8 	andeq	r0, r0, r8, ror #1
	...
 208:	0000001c 	andeq	r0, r0, ip, lsl r0
 20c:	45d10002 	ldrbmi	r0, [r1, #2]
 210:	00040000 	andeq	r0, r4, r0
 214:	00000000 	andeq	r0, r0, r0
 218:	200044b8 			; <UNDEFINED> instruction: 0x200044b8
 21c:	000000e8 	andeq	r0, r0, r8, ror #1
	...
 228:	0000001c 	andeq	r0, r0, ip, lsl r0
 22c:	48b50002 	ldmmi	r5!, {r1}
 230:	00040000 	andeq	r0, r4, r0
 234:	00000000 	andeq	r0, r0, r0
 238:	200045a0 	andcs	r4, r0, r0, lsr #11
 23c:	000000e8 	andeq	r0, r0, r8, ror #1
	...
 248:	0000001c 	andeq	r0, r0, ip, lsl r0
 24c:	4b980002 	blmi	fe60025c <firstTime.4040+0xde5f0da0>
 250:	00040000 	andeq	r0, r4, r0
 254:	00000000 	andeq	r0, r0, r0
 258:	20004688 	andcs	r4, r0, r8, lsl #13
 25c:	000000e8 	andeq	r0, r0, r8, ror #1
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200018f6 	strdcs	r1, [r0], -r6
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000003d7 	ldrdeq	r0, [r0], -r7
       4:	017d0002 	cmneq	sp, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	43010000 	movwmi	r0, #4096	; 0x1000
      1c:	6f6d2f3a 	svcvs	0x006d2f3a
      20:	2f632f70 	svccs	0x00632f70
      24:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
      28:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
      2c:	6f697461 	svcvs	0x00697461
      30:	2f72656e 	svccs	0x0072656e
      34:	73504944 	cmpvc	r0, #68, 18	; 0x110000
      38:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
      3c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
      40:	74730000 	ldrbtvc	r0, [r3], #-0
      44:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
      48:	00632e70 	rsbeq	r2, r3, r0, ror lr
      4c:	73000001 	movwvc	r0, #1
      50:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
      54:	00682e65 	rsbeq	r2, r8, r5, ror #28
      58:	69000001 	stmdbvs	r0, {r0}
      5c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
      60:	0100682e 	tsteq	r0, lr, lsr #16
      64:	61670000 	cmnvs	r7, r0
      68:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
      6c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
      70:	0100682e 	tsteq	r0, lr, lsr #16
      74:	72670000 	rsbvc	r0, r7, #0
      78:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
      7c:	682e7363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, ip, sp, lr}
      80:	00000100 	andeq	r0, r0, r0, lsl #2
      84:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
      88:	5f726574 	svcpl	0x00726574
      8c:	63616c62 	cmnvs	r1, #25088	; 0x6200
      90:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
      94:	0001006d 	andeq	r0, r1, sp, rrx
      98:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
      9c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
      a0:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
      a4:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
      a8:	01006d62 	tsteq	r0, r2, ror #26
      ac:	6f6d0000 	svcvs	0x006d0000
      b0:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
      b4:	72675f72 	rsbvc	r5, r7, #456	; 0x1c8
      b8:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
      bc:	01006d62 	tsteq	r0, r2, ror #26
      c0:	72700000 	rsbsvc	r0, r0, #0
      c4:	5f737365 	svcpl	0x00737365
      c8:	63616c62 	cmnvs	r1, #25088	; 0x6200
      cc:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
      d0:	0001006d 	andeq	r0, r1, sp, rrx
      d4:	65727000 	ldrbvs	r7, [r2, #-0]!
      d8:	6c5f7373 	mrrcvs	3, 7, r7, pc, cr3	; <UNPREDICTABLE>
      dc:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
      e0:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
      e4:	00000100 	andeq	r0, r0, r0, lsl #2
      e8:	73657270 	cmnvc	r5, #112, 4
      ec:	72675f73 	rsbvc	r5, r7, #460	; 0x1cc
      f0:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
      f4:	01006d62 	tsteq	r0, r2, ror #26
      f8:	61630000 	cmnvs	r3, r0
      fc:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     100:	616c625f 	cmnvs	ip, pc, asr r2
     104:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     108:	01006d62 	tsteq	r0, r2, ror #26
     10c:	61630000 	cmnvs	r3, r0
     110:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     114:	6172675f 	cmnvs	r2, pc, asr r7
     118:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     11c:	0001006d 	andeq	r0, r1, sp, rrx
     120:	73616300 	cmnvc	r1, #0, 6
     124:	5f656c74 	svcpl	0x00656c74
     128:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     12c:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     130:	0001006d 	andeq	r0, r1, sp, rrx
     134:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     138:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
     13c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     140:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     144:	00000100 	andeq	r0, r0, r0, lsl #2
     148:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     14c:	72675f65 	rsbvc	r5, r7, #404	; 0x194
     150:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     154:	01006d62 	tsteq	r0, r2, ror #26
     158:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
     15c:	5f656c74 	svcpl	0x00656c74
     160:	63616c62 	cmnvs	r1, #25088	; 0x6200
     164:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     168:	0001006d 	andeq	r0, r1, sp, rrx
     16c:	6f6c7300 	svcvs	0x006c7300
     170:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
     174:	682e7478 	stmdavs	lr!, {r3, r4, r5, r6, sl, ip, sp, lr}
     178:	00000100 	andeq	r0, r0, r0, lsl #2
     17c:	782e6762 	stmdavc	lr!, {r1, r5, r6, r8, r9, sl, sp, lr}
     180:	01006d62 	tsteq	r0, r2, ror #26
     184:	00000000 	andeq	r0, r0, r0
     188:	00000205 	andeq	r0, r0, r5, lsl #4
     18c:	30032000 	andcc	r2, r3, r0
     190:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
     194:	01010003 	tsteq	r1, r3
     198:	10020500 	andne	r0, r2, r0, lsl #10
     19c:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
     1a0:	3d2f0125 	stfccs	f0, [pc, #-148]!	; 114 <startup-0x1ffffeec>
     1a4:	03303030 	teqeq	r0, #48	; 0x30
     1a8:	2f3d742c 	svccs	0x003d742c
     1ac:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     1b0:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     1b4:	2f3e672f 	svccs	0x003e672f
     1b8:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     1bc:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     1c0:	2f3d672f 	svccs	0x003d672f
     1c4:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     1c8:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     1cc:	2f3d672f 	svccs	0x003d672f
     1d0:	52023f67 	andpl	r3, r2, #412	; 0x19c
     1d4:	322f4c17 	eorcc	r4, pc, #5888	; 0x1700
     1d8:	4bad5975 	blmi	feb567b4 <firstTime.4040+0xdeb472f8>
     1dc:	754e4b4b 	strbvc	r4, [lr, #-2891]	; 0xfffff4b5
     1e0:	6759bb75 			; <UNDEFINED> instruction: 0x6759bb75
     1e4:	ad67835c 	stclge	3, cr8, [r7, #-368]!	; 0xfffffe90
     1e8:	c94e4b4b 	stmdbgt	lr, {r0, r1, r3, r6, r8, r9, fp, lr}^
     1ec:	5959bb75 	ldmdbpl	r9, {r0, r2, r4, r5, r6, r8, r9, fp, ip, sp, pc}^
     1f0:	8583675b 	strhi	r6, [r3, #1883]	; 0x75b
     1f4:	67858367 	strvs	r8, [r5, r7, ror #6]
     1f8:	676a8583 	strbvs	r8, [sl, -r3, lsl #11]!
     1fc:	67858383 	strvs	r8, [r5, r3, lsl #7]
     200:	67858383 	strvs	r8, [r5, r3, lsl #7]
     204:	67856785 	strvs	r6, [r5, r5, lsl #15]
     208:	68858383 	stmvs	r5, {r0, r1, r7, r8, r9, pc}
     20c:	67696868 	strbvs	r6, [r9, -r8, ror #16]!
     210:	67848383 	strvs	r8, [r4, r3, lsl #7]
     214:	02836784 	addeq	r6, r3, #132, 14	; 0x2100000
     218:	50021537 	andpl	r1, r2, r7, lsr r5
     21c:	84838313 	strhi	r8, [r3], #787	; 0x313
     220:	85838383 	strhi	r8, [r3, #899]	; 0x383
     224:	84838383 	strhi	r8, [r3], #899	; 0x383
     228:	03838383 	orreq	r8, r3, #201326594	; 0xc000002
     22c:	7575820f 	ldrbvc	r8, [r5, #-527]!	; 0xfffffdf1
     230:	75757575 	ldrbvc	r7, [r5, #-1397]!	; 0xfffffa8b
     234:	75757575 	ldrbvc	r7, [r5, #-1397]!	; 0xfffffa8b
     238:	2f767567 	svccs	0x00767567
     23c:	594b302f 	stmdbpl	fp, {r0, r1, r2, r3, r5, ip, sp}^
     240:	594b594b 	stmdbpl	fp, {r0, r1, r3, r6, r8, fp, ip, lr}^
     244:	95415a4b 	strbls	r5, [r1, #-2635]	; 0xfffff5b5
     248:	3d4f3a59 	vstrcc	s7, [pc, #-356]	; ec <startup-0x1fffff14>
     24c:	675a333d 	smmlarvs	sl, sp, r3, r3
     250:	67676793 			; <UNDEFINED> instruction: 0x67676793
     254:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
     258:	04020042 	streq	r0, [r2], #-66	; 0xffffffbe
     25c:	06820601 	streq	r0, [r2], r1, lsl #12
     260:	3083bb83 	addcc	fp, r3, r3, lsl #23
     264:	bbc99175 	bllt	ff264840 <firstTime.4040+0xdf255384>
     268:	6202c9c9 	andvs	ip, r2, #3293184	; 0x324000
     26c:	f3c9d713 	vqshl.u8	d29, d3, #1
     270:	c92108c9 	stmdbgt	r1!, {r0, r3, r6, r7, fp}
     274:	08c91308 	stmiaeq	r9, {r3, r8, r9, ip}^
     278:	1308c92f 	movwne	ip, #35119	; 0x892f
     27c:	c92108c9 	stmdbgt	r1!, {r0, r3, r6, r7, fp}
     280:	08bb4b08 	ldmeq	fp!, {r3, r8, r9, fp, lr}
     284:	3d4bca3d 	vstrcc	s25, [fp, #-244]	; 0xffffff0c
     288:	596a3d4b 	stmdbpl	sl!, {r0, r1, r3, r6, r8, sl, fp, ip, sp}^
     28c:	6a3d4b3d 	bvs	f52f88 <startup-0x1f0ad078>
     290:	bbbbbbbb 	bllt	feeef184 <firstTime.4040+0xdeedfcc8>
     294:	e783e5bb 			; <UNDEFINED> instruction: 0xe783e5bb
     298:	67595932 	smmlarvs	r9, r2, r9, r5
     29c:	67143702 	ldrvs	r3, [r4, -r2, lsl #14]
     2a0:	68675969 	stmdavs	r7!, {r0, r3, r5, r6, r8, fp, ip, lr}^
     2a4:	03040200 	movweq	r0, #16896	; 0x4200
     2a8:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
     2ac:	0200bb03 	andeq	fp, r0, #3072	; 0xc00
     2b0:	80080304 	andhi	r0, r8, r4, lsl #6
     2b4:	01040200 	mrseq	r0, R12_usr
     2b8:	4e065806 	cdpmi	8, 0, cr5, cr6, cr6, {0}
     2bc:	f3596767 	vabd.u16	q11, <illegal reg q4.5>, <illegal reg q11.5>
     2c0:	4c9191f3 	ldfmid	f1, [r1], {243}	; 0xf3
     2c4:	3fbd9167 	svccc	0x00bd9167
     2c8:	01040200 	mrseq	r0, R12_usr
     2cc:	02008206 	andeq	r8, r0, #1610612736	; 0x60000000
     2d0:	00900204 	addseq	r0, r0, r4, lsl #4
     2d4:	90030402 	andls	r0, r3, r2, lsl #8
     2d8:	844b6706 	strbhi	r6, [fp], #-1798	; 0xfffff8fa
     2dc:	c9675968 	stmdbgt	r7!, {r3, r5, r6, r8, fp, ip, lr}^
     2e0:	9168d776 	smcls	36214	; 0x8d76
     2e4:	4b8383f4 	blmi	fe0e12bc <firstTime.4040+0xde0d1e00>
     2e8:	0200bd69 	andeq	fp, r0, #6720	; 0x1a40
     2ec:	f2060104 	vrhadd.s8	d0, d6, d4
     2f0:	02040200 	andeq	r0, r4, #0, 4
     2f4:	08062008 	stmdaeq	r6, {r3, sp}
     2f8:	00596913 	subseq	r6, r9, r3, lsl r9
     2fc:	06010402 	streq	r0, [r1], -r2, lsl #8
     300:	040200f2 	streq	r0, [r2], #-242	; 0xffffff0e
     304:	06200802 	strteq	r0, [r0], -r2, lsl #16
     308:	25021408 	strcs	r1, [r2, #-1032]	; 0xfffffbf8
     30c:	5f675915 	svcpl	0x00675915
     310:	686759bb 	stmdavs	r7!, {r0, r1, r3, r4, r5, r7, r8, fp, ip, lr}^
     314:	911408d7 			; <UNDEFINED> instruction: 0x911408d7
     318:	04020095 	streq	r0, [r2], #-149	; 0xffffff6b
     31c:	00580601 	subseq	r0, r8, r1, lsl #12
     320:	f2020402 	vshl.s8	d0, d2, d2
     324:	03040200 	movweq	r0, #16896	; 0x4200
     328:	08062008 	stmdaeq	r6, {r3, sp}
     32c:	67675913 			; <UNDEFINED> instruction: 0x67675913
     330:	bf210859 	svclt	0x00210859
     334:	9f087508 	svcls	0x00087508
     338:	01040200 	mrseq	r0, R12_usr
     33c:	02007508 	andeq	r7, r0, #8, 10	; 0x2000000
     340:	49080104 	stmdbmi	r8, {r2, r8}
     344:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
     348:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
     34c:	0067594b 	rsbeq	r5, r7, fp, asr #18
     350:	03020402 	movweq	r0, #9218	; 0x2402
     354:	0200587a 	andeq	r5, r0, #7995392	; 0x7a0000
     358:	58060104 	stmdapl	r6, {r2, r8}
     35c:	4a0c0306 	bmi	300f7c <startup-0x1fcff084>
     360:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
     364:	4a060104 	bmi	18077c <startup-0x1fe7f884>
     368:	02040200 	andeq	r0, r4, #0, 4
     36c:	3d4b064a 	stclcc	6, cr0, [fp, #-296]	; 0xfffffed8
     370:	6b91e5d7 	blvs	fe479ad4 <firstTime.4040+0xde46a618>
     374:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
     378:	4a060104 	bmi	180790 <startup-0x1fe7f870>
     37c:	02040200 	andeq	r0, r4, #0, 4
     380:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
     384:	02009003 	andeq	r9, r0, #3
     388:	064a0404 	strbeq	r0, [sl], -r4, lsl #8
     38c:	d73d674b 	ldrle	r6, [sp, -fp, asr #14]!
     390:	ae844de5 	cdpge	13, 8, cr4, cr4, cr5, {7}
     394:	2a023f67 	bcs	90138 <startup-0x1ff6fec8>
     398:	4b3d3d16 	blmi	f4f7f8 <startup-0x1f0b0808>
     39c:	4b835a40 	blmi	fe0d6ca4 <firstTime.4040+0xde0c77e8>
     3a0:	4b594b59 	blmi	165310c <startup-0x1e9acef4>
     3a4:	91838359 	orrls	r8, r3, r9, asr r3
     3a8:	83919191 	orrshi	r9, r1, #1073741860	; 0x40000024
     3ac:	3e838384 	cdpcc	3, 8, cr8, cr3, cr4, {4}
     3b0:	4c3d8383 	ldcmi	3, cr8, [sp], #-524	; 0xfffffdf4
     3b4:	84832f5a 	strhi	r2, [r3], #3930	; 0xf5a
     3b8:	3d672467 	cfstrdcc	mvd2, [r7, #-412]!	; 0xfffffe64
     3bc:	207eb903 	rsbscs	fp, lr, r3, lsl #18
     3c0:	3c019403 	cfstrscc	mvf9, [r1], {3}
     3c4:	01040200 	mrseq	r0, R12_usr
     3c8:	207e9003 	rsbscs	r9, lr, r3
     3cc:	0202ac03 	andeq	sl, r2, #768	; 0x300
     3d0:	3d4b0123 	stfcce	f0, [fp, #-140]	; 0xffffff74
     3d4:	0402213e 	streq	r2, [r2], #-318	; 0xfffffec2
     3d8:	8a010100 	bhi	407e0 <startup-0x1ffbf820>
     3dc:	02000000 	andeq	r0, r0, #0
     3e0:	00007000 	andeq	r7, r0, r0
     3e4:	fb010200 	blx	40bee <startup-0x1ffbf412>
     3e8:	01000d0e 	tsteq	r0, lr, lsl #26
     3ec:	00010101 	andeq	r0, r1, r1, lsl #2
     3f0:	00010000 	andeq	r0, r1, r0
     3f4:	3a430100 	bcc	10c07fc <startup-0x1ef3f804>
     3f8:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     3fc:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 348 <startup-0x1ffffcb8>
     400:	616c706f 	cmnvs	ip, pc, rrx
     404:	61726f62 	cmnvs	r2, r2, ror #30
     408:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     40c:	442f7265 	strtmi	r7, [pc], #-613	; 414 <startup-0x1ffffbec>
     410:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     414:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     418:	00432f68 	subeq	r2, r3, r8, ror #30
     41c:	6d616700 	stclvs	7, cr6, [r1, #-0]
     420:	6a626f65 	bvs	189c1bc <startup-0x1e763e44>
     424:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
     428:	00010063 	andeq	r0, r1, r3, rrx
     42c:	72707300 	rsbsvc	r7, r0, #0, 6
     430:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
     434:	00010068 	andeq	r0, r1, r8, rrx
     438:	616d6900 	cmnvs	sp, r0, lsl #18
     43c:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     440:	00000100 	andeq	r0, r0, r0, lsl #2
     444:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     448:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     44c:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
     450:	00000100 	andeq	r0, r0, r0, lsl #2
     454:	02050000 	andeq	r0, r5, #0
     458:	200018f8 	strdcs	r1, [r0], -r8
     45c:	4b4c4c19 	blmi	13134c8 <startup-0x1ececb38>
     460:	ca3d6759 	bgt	f5a1cc <startup-0x1f0a5e34>
     464:	01000402 	tsteq	r0, r2, lsl #8
     468:	00018401 	andeq	r8, r1, r1, lsl #8
     46c:	37000200 	strcc	r0, [r0, -r0, lsl #4]
     470:	02000001 	andeq	r0, r0, #1
     474:	0d0efb01 	vstreq	d15, [lr, #-4]
     478:	01010100 	mrseq	r0, (UNDEF: 17)
     47c:	00000001 	andeq	r0, r0, r1
     480:	01000001 	tsteq	r0, r1
     484:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     488:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     48c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     490:	6f62616c 	svcvs	0x0062616c
     494:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     498:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     49c:	5049442f 	subpl	r4, r9, pc, lsr #8
     4a0:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     4a4:	2f686374 	svccs	0x00686374
     4a8:	66000043 	strvs	r0, [r0], -r3, asr #32
     4ac:	2e657269 	cdpcs	2, 6, cr7, cr5, cr9, {3}
     4b0:	00010063 	andeq	r0, r1, r3, rrx
     4b4:	72707300 	rsbsvc	r7, r0, #0, 6
     4b8:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
     4bc:	00010068 	andeq	r0, r1, r8, rrx
     4c0:	616d6900 	cmnvs	sp, r0, lsl #18
     4c4:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     4c8:	00000100 	andeq	r0, r0, r0, lsl #2
     4cc:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     4d0:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     4d4:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
     4d8:	00000100 	andeq	r0, r0, r0, lsl #2
     4dc:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     4e0:	616c625f 	cmnvs	ip, pc, asr r2
     4e4:	325f6b63 	subscc	r6, pc, #101376	; 0x18c00
     4e8:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     4ec:	00000100 	andeq	r0, r0, r0, lsl #2
     4f0:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     4f4:	72675f31 	rsbvc	r5, r7, #49, 30	; 0xc4
     4f8:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     4fc:	01006d62 	tsteq	r0, r2, ror #26
     500:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     504:	5f316572 	svcpl	0x00316572
     508:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     50c:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     510:	0001006d 	andeq	r0, r1, sp, rrx
     514:	72696600 	rsbvc	r6, r9, #0, 12
     518:	675f3265 	ldrbvs	r3, [pc, -r5, ror #4]
     51c:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     520:	006d6278 	rsbeq	r6, sp, r8, ror r2
     524:	66000001 	strvs	r0, [r0], -r1
     528:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
     52c:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     530:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     534:	01006d62 	tsteq	r0, r2, ror #26
     538:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     53c:	5f336572 	svcpl	0x00336572
     540:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     544:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     548:	00000100 	andeq	r0, r0, r0, lsl #2
     54c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     550:	696c5f33 	stmdbvs	ip!, {r0, r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     554:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     558:	006d6278 	rsbeq	r6, sp, r8, ror r2
     55c:	66000001 	strvs	r0, [r0], -r1
     560:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
     564:	6172675f 	cmnvs	r2, pc, asr r7
     568:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     56c:	0001006d 	andeq	r0, r1, sp, rrx
     570:	72696600 	rsbvc	r6, r9, #0, 12
     574:	6c5f3465 	cfldrdvs	mvd3, [pc], {101}	; 0x65
     578:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     57c:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     580:	00000100 	andeq	r0, r0, r0, lsl #2
     584:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     588:	72675f35 	rsbvc	r5, r7, #53, 30	; 0xd4
     58c:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     590:	01006d62 	tsteq	r0, r2, ror #26
     594:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     598:	5f356572 	svcpl	0x00356572
     59c:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     5a0:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     5a4:	0001006d 	andeq	r0, r1, sp, rrx
     5a8:	05000000 	streq	r0, [r0, #-0]
     5ac:	00195002 	andseq	r5, r9, r2
     5b0:	01300320 	teqeq	r0, r0, lsr #6
     5b4:	3e672f3d 	mcrcc	15, 3, r2, cr7, cr13, {1}
     5b8:	2f3e672f 	svccs	0x003e672f
     5bc:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     5c0:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     5c4:	2f3e672f 	svccs	0x003e672f
     5c8:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     5cc:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     5d0:	2f3e672f 	svccs	0x003e672f
     5d4:	46023d67 	strmi	r3, [r2], -r7, ror #26
     5d8:	2f4b4c14 	svccs	0x004b4c14
     5dc:	59594b3e 	ldmdbpl	r9, {r1, r2, r3, r4, r5, r8, r9, fp, lr}^
     5e0:	91915a59 	orrsls	r5, r1, r9, asr sl
     5e4:	3e939191 	mrccc	1, 4, r9, cr3, cr1, {4}
     5e8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     5ec:	01003102 	tsteq	r0, r2, lsl #2
     5f0:	0000ee01 	andeq	lr, r0, r1, lsl #28
     5f4:	6c000200 	sfmvs	f0, 4, [r0], {-0}
     5f8:	02000000 	andeq	r0, r0, #0
     5fc:	0d0efb01 	vstreq	d15, [lr, #-4]
     600:	01010100 	mrseq	r0, (UNDEF: 17)
     604:	00000001 	andeq	r0, r0, r1
     608:	01000001 	tsteq	r0, r1
     60c:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     610:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     614:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     618:	6f62616c 	svcvs	0x0062616c
     61c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     620:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     624:	5049442f 	subpl	r4, r9, pc, lsr #8
     628:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     62c:	2f686374 	svccs	0x00686374
     630:	70000043 	andvc	r0, r0, r3, asr #32
     634:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
     638:	00632e72 	rsbeq	r2, r3, r2, ror lr
     63c:	73000001 	movwvc	r0, #1
     640:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
     644:	00682e65 	rsbeq	r2, r8, r5, ror #28
     648:	69000001 	stmdbvs	r0, {r0}
     64c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     650:	0100682e 	tsteq	r0, lr, lsr #16
     654:	61670000 	cmnvs	r7, r0
     658:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
     65c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     660:	0100682e 	tsteq	r0, lr, lsr #16
     664:	00000000 	andeq	r0, r0, r0
     668:	1bf80205 	blne	ffe00e84 <firstTime.4040+0xdfdf19c8>
     66c:	0d032000 	stceq	0, cr2, [r3, #-0]
     670:	3d3d2f01 	ldccc	15, cr2, [sp, #-4]!
     674:	ca3d3d3d 	bgt	f4fb70 <startup-0x1f0b0490>
     678:	3d67594d 			; <UNDEFINED> instruction: 0x3d67594d
     67c:	040200cd 	streq	r0, [r2], #-205	; 0xffffff33
     680:	00820601 	addeq	r0, r2, r1, lsl #12
     684:	4a020402 	bmi	81694 <startup-0x1ff7e96c>
     688:	754d4b06 	strbvc	r4, [sp, #-2822]	; 0xfffff4fa
     68c:	4c684b3d 			; <UNDEFINED> instruction: 0x4c684b3d
     690:	01040200 	mrseq	r0, R12_usr
     694:	75067406 	strvc	r7, [r6, #-1030]	; 0xfffffbfa
     698:	4d684b3d 	fstmdbxmi	r8!, {d20-d49}	;@ Deprecated
     69c:	02005d75 	andeq	r5, r0, #7488	; 0x1d40
     6a0:	4a060104 	bmi	180ab8 <startup-0x1fe7f548>
     6a4:	005b5906 	subseq	r5, fp, r6, lsl #18
     6a8:	06010402 	streq	r0, [r1], -r2, lsl #8
     6ac:	5b59064a 	blpl	1641fdc <startup-0x1e9be024>
     6b0:	01040200 	mrseq	r0, R12_usr
     6b4:	02004a06 	andeq	r4, r0, #24576	; 0x6000
     6b8:	00580404 	subseq	r0, r8, r4, lsl #8
     6bc:	4a050402 	bmi	1416cc <startup-0x1febe934>
     6c0:	06040200 	streq	r0, [r4], -r0, lsl #4
     6c4:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
     6c8:	4b064a07 	blmi	192eec <startup-0x1fe6d114>
     6cc:	0402005b 	streq	r0, [r2], #-91	; 0xffffffa5
     6d0:	06740601 	ldrbteq	r0, [r4], -r1, lsl #12
     6d4:	4b765b75 	blmi	1d974b0 <startup-0x1e268b50>
     6d8:	675c4b68 	ldrbvs	r4, [ip, -r8, ror #22]
     6dc:	12026867 	andne	r6, r2, #6750208	; 0x670000
     6e0:	dd010100 	stfles	f0, [r1, #-0]
     6e4:	02000001 	andeq	r0, r0, #1
     6e8:	00018200 	andeq	r8, r1, r0, lsl #4
     6ec:	fb010200 	blx	40ef6 <startup-0x1ffbf10a>
     6f0:	01000d0e 	tsteq	r0, lr, lsl #26
     6f4:	00010101 	andeq	r0, r1, r1, lsl #2
     6f8:	00010000 	andeq	r0, r1, r0
     6fc:	3a430100 	bcc	10c0b04 <startup-0x1ef3f4fc>
     700:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     704:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 650 <startup-0x1ffff9b0>
     708:	616c706f 	cmnvs	ip, pc, rrx
     70c:	61726f62 	cmnvs	r2, r2, ror #30
     710:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     714:	442f7265 	strtmi	r7, [pc], #-613	; 71c <startup-0x1ffff8e4>
     718:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     71c:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     720:	00432f68 	subeq	r2, r3, r8, ror #30
     724:	72696200 	rsbvc	r6, r9, #0, 4
     728:	00632e64 	rsbeq	r2, r3, r4, ror #28
     72c:	73000001 	movwvc	r0, #1
     730:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
     734:	00682e65 	rsbeq	r2, r8, r5, ror #28
     738:	69000001 	stmdbvs	r0, {r0}
     73c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     740:	0100682e 	tsteq	r0, lr, lsr #16
     744:	61670000 	cmnvs	r7, r0
     748:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
     74c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     750:	0100682e 	tsteq	r0, lr, lsr #16
     754:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     758:	5f316472 	svcpl	0x00316472
     75c:	63616c62 	cmnvs	r1, #25088	; 0x6200
     760:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     764:	0001006d 	andeq	r0, r1, sp, rrx
     768:	72696200 	rsbvc	r6, r9, #0, 4
     76c:	675f3164 	ldrbvs	r3, [pc, -r4, ror #2]
     770:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     774:	006d6278 	rsbeq	r6, sp, r8, ror r2
     778:	62000001 	andvs	r0, r0, #1
     77c:	31647269 	cmncc	r4, r9, ror #4
     780:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     784:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     788:	01006d62 	tsteq	r0, r2, ror #26
     78c:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     790:	5f326472 	svcpl	0x00326472
     794:	63616c62 	cmnvs	r1, #25088	; 0x6200
     798:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     79c:	0001006d 	andeq	r0, r1, sp, rrx
     7a0:	72696200 	rsbvc	r6, r9, #0, 4
     7a4:	675f3264 	ldrbvs	r3, [pc, -r4, ror #4]
     7a8:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     7ac:	006d6278 	rsbeq	r6, sp, r8, ror r2
     7b0:	62000001 	andvs	r0, r0, #1
     7b4:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     7b8:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     7bc:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     7c0:	01006d62 	tsteq	r0, r2, ror #26
     7c4:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     7c8:	5f336472 	svcpl	0x00336472
     7cc:	63616c62 	cmnvs	r1, #25088	; 0x6200
     7d0:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     7d4:	0001006d 	andeq	r0, r1, sp, rrx
     7d8:	72696200 	rsbvc	r6, r9, #0, 4
     7dc:	675f3364 	ldrbvs	r3, [pc, -r4, ror #6]
     7e0:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     7e4:	006d6278 	rsbeq	r6, sp, r8, ror r2
     7e8:	62000001 	andvs	r0, r0, #1
     7ec:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     7f0:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     7f4:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     7f8:	01006d62 	tsteq	r0, r2, ror #26
     7fc:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     800:	5f346472 	svcpl	0x00346472
     804:	63616c62 	cmnvs	r1, #25088	; 0x6200
     808:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     80c:	0001006d 	andeq	r0, r1, sp, rrx
     810:	72696200 	rsbvc	r6, r9, #0, 4
     814:	675f3464 	ldrbvs	r3, [pc, -r4, ror #8]
     818:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     81c:	006d6278 	rsbeq	r6, sp, r8, ror r2
     820:	62000001 	andvs	r0, r0, #1
     824:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     828:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     82c:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     830:	01006d62 	tsteq	r0, r2, ror #26
     834:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     838:	5f356472 	svcpl	0x00356472
     83c:	63616c62 	cmnvs	r1, #25088	; 0x6200
     840:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     844:	0001006d 	andeq	r0, r1, sp, rrx
     848:	72696200 	rsbvc	r6, r9, #0, 4
     84c:	675f3564 	ldrbvs	r3, [pc, -r4, ror #10]
     850:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     854:	006d6278 	rsbeq	r6, sp, r8, ror r2
     858:	62000001 	andvs	r0, r0, #1
     85c:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     860:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     864:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     868:	01006d62 	tsteq	r0, r2, ror #26
     86c:	00000000 	andeq	r0, r0, r0
     870:	1e380205 	cdpne	2, 3, cr0, cr8, cr5, {0}
     874:	3f032000 	svccc	0x00032000
     878:	672f3e01 	strvs	r3, [pc, -r1, lsl #28]!
     87c:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     880:	2f3e672f 	svccs	0x003e672f
     884:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     888:	3f672f3d 	svccc	0x00672f3d
     88c:	2f3d672f 	svccs	0x003d672f
     890:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     894:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     898:	2f3d672f 	svccs	0x003d672f
     89c:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     8a0:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     8a4:	023d672f 	eorseq	r6, sp, #12320768	; 0xbc0000
     8a8:	4b4c145e 	blmi	1305a28 <startup-0x1ecfa5d8>
     8ac:	594b3e2f 	stmdbpl	fp, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}^
     8b0:	5c595959 	mrrcpl	9, 5, r5, r9, cr9	; <UNPREDICTABLE>
     8b4:	91919191 			; <UNDEFINED> instruction: 0x91919191
     8b8:	3d3e9493 	cfldrscc	mvf9, [lr, #-588]!	; 0xfffffdb4
     8bc:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
     8c0:	0101003d 	tsteq	r1, sp, lsr r0
     8c4:	00000161 	andeq	r0, r0, r1, ror #2
     8c8:	011c0002 	tsteq	ip, r2
     8cc:	01020000 	mrseq	r0, (UNDEF: 2)
     8d0:	000d0efb 	strdeq	r0, [sp], -fp
     8d4:	01010101 	tsteq	r1, r1, lsl #2
     8d8:	01000000 	mrseq	r0, (UNDEF: 0)
     8dc:	43010000 	movwmi	r0, #4096	; 0x1000
     8e0:	6f6d2f3a 	svcvs	0x006d2f3a
     8e4:	2f632f70 	svccs	0x00632f70
     8e8:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     8ec:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     8f0:	6f697461 	svcvs	0x00697461
     8f4:	2f72656e 	svccs	0x0072656e
     8f8:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     8fc:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     900:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     904:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     908:	2e686374 	mcrcs	3, 3, r6, cr8, cr4, {3}
     90c:	00010063 	andeq	r0, r1, r3, rrx
     910:	72707300 	rsbsvc	r7, r0, #0, 6
     914:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
     918:	00010068 	andeq	r0, r1, r8, rrx
     91c:	616d6900 	cmnvs	sp, r0, lsl #18
     920:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     924:	00000100 	andeq	r0, r0, r0, lsl #2
     928:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     92c:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     930:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
     934:	00000100 	andeq	r0, r0, r0, lsl #2
     938:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     93c:	625f3168 	subsvs	r3, pc, #104, 2
     940:	6b63616c 	blvs	18d8ef8 <startup-0x1e727108>
     944:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     948:	00000100 	andeq	r0, r0, r0, lsl #2
     94c:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     950:	675f3168 	ldrbvs	r3, [pc, -r8, ror #2]
     954:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     958:	006d6278 	rsbeq	r6, sp, r8, ror r2
     95c:	77000001 	strvc	r0, [r0, -r1]
     960:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     964:	696c5f31 	stmdbvs	ip!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     968:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     96c:	006d6278 	rsbeq	r6, sp, r8, ror r2
     970:	77000001 	strvc	r0, [r0, -r1]
     974:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     978:	6c625f32 	stclvs	15, cr5, [r2], #-200	; 0xffffff38
     97c:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     980:	006d6278 	rsbeq	r6, sp, r8, ror r2
     984:	77000001 	strvc	r0, [r0, -r1]
     988:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     98c:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
     990:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     994:	01006d62 	tsteq	r0, r2, ror #26
     998:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     99c:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     9a0:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     9a4:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     9a8:	01006d62 	tsteq	r0, r2, ror #26
     9ac:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     9b0:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     9b4:	616c625f 	cmnvs	ip, pc, asr r2
     9b8:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     9bc:	01006d62 	tsteq	r0, r2, ror #26
     9c0:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     9c4:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     9c8:	6172675f 	cmnvs	r2, pc, asr r7
     9cc:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     9d0:	0001006d 	andeq	r0, r1, sp, rrx
     9d4:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     9d8:	5f336863 	svcpl	0x00336863
     9dc:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     9e0:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     9e4:	0001006d 	andeq	r0, r1, sp, rrx
     9e8:	05000000 	streq	r0, [r0, #-0]
     9ec:	00219c02 	eoreq	r9, r1, r2, lsl #24
     9f0:	01280320 			; <UNDEFINED> instruction: 0x01280320
     9f4:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     9f8:	2f3d672f 	svccs	0x003d672f
     9fc:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     a00:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     a04:	2f3f672f 	svccs	0x003f672f
     a08:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     a0c:	3e672f3d 	mcrcc	15, 3, r2, cr7, cr13, {1}
     a10:	4c143a02 			; <UNDEFINED> instruction: 0x4c143a02
     a14:	4b3e2f4b 	blmi	f8c748 <startup-0x1f0738b8>
     a18:	915b5959 	cmpls	fp, r9, asr r9
     a1c:	3e949191 	mrccc	1, 4, r9, cr4, cr1, {4}
     a20:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     a24:	01002902 	tsteq	r0, r2, lsl #18
     a28:	00018301 	andeq	r8, r1, r1, lsl #6
     a2c:	1a000200 	bne	1234 <startup-0x1fffedcc>
     a30:	02000001 	andeq	r0, r0, #1
     a34:	0d0efb01 	vstreq	d15, [lr, #-4]
     a38:	01010100 	mrseq	r0, (UNDEF: 17)
     a3c:	00000001 	andeq	r0, r0, r1
     a40:	01000001 	tsteq	r0, r1
     a44:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     a48:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     a4c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     a50:	6f62616c 	svcvs	0x0062616c
     a54:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     a58:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     a5c:	5049442f 	subpl	r4, r9, pc, lsr #8
     a60:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     a64:	2f686374 	svccs	0x00686374
     a68:	44000043 	strmi	r0, [r0], #-67	; 0xffffffbd
     a6c:	632e5049 			; <UNDEFINED> instruction: 0x632e5049
     a70:	00000100 	andeq	r0, r0, r0, lsl #2
     a74:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     a78:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
     a7c:	00000100 	andeq	r0, r0, r0, lsl #2
     a80:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     a84:	00682e65 	rsbeq	r2, r8, r5, ror #28
     a88:	67000001 	strvs	r0, [r0, -r1]
     a8c:	6f656d61 	svcvs	0x00656d61
     a90:	63656a62 	cmnvs	r5, #401408	; 0x62000
     a94:	00682e74 	rsbeq	r2, r8, r4, ror lr
     a98:	77000001 	strvc	r0, [r0, -r1]
     a9c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     aa0:	6c625f31 	stclvs	15, cr5, [r2], #-196	; 0xffffff3c
     aa4:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     aa8:	006d6278 	rsbeq	r6, sp, r8, ror r2
     aac:	77000001 	strvc	r0, [r0, -r1]
     ab0:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     ab4:	72675f31 	rsbvc	r5, r7, #49, 30	; 0xc4
     ab8:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     abc:	01006d62 	tsteq	r0, r2, ror #26
     ac0:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     ac4:	31686374 	smccc	34356	; 0x8634
     ac8:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     acc:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     ad0:	01006d62 	tsteq	r0, r2, ror #26
     ad4:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     ad8:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     adc:	616c625f 	cmnvs	ip, pc, asr r2
     ae0:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     ae4:	01006d62 	tsteq	r0, r2, ror #26
     ae8:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     aec:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     af0:	6172675f 	cmnvs	r2, pc, asr r7
     af4:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     af8:	0001006d 	andeq	r0, r1, sp, rrx
     afc:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     b00:	5f326863 	svcpl	0x00326863
     b04:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     b08:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     b0c:	0001006d 	andeq	r0, r1, sp, rrx
     b10:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     b14:	5f336863 	svcpl	0x00336863
     b18:	63616c62 	cmnvs	r1, #25088	; 0x6200
     b1c:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     b20:	0001006d 	andeq	r0, r1, sp, rrx
     b24:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     b28:	5f336863 	svcpl	0x00336863
     b2c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     b30:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     b34:	00000100 	andeq	r0, r0, r0, lsl #2
     b38:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     b3c:	6c5f3368 	mrrcvs	3, 6, r3, pc, cr8	; <UNPREDICTABLE>
     b40:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     b44:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     b48:	00000100 	andeq	r0, r0, r0, lsl #2
     b4c:	02050000 	andeq	r0, r5, #0
     b50:	200023d4 	ldrdcs	r2, [r0], -r4
     b54:	3e012c03 	cdpcc	12, 0, cr2, cr1, cr3, {0}
     b58:	2f3d672f 	svccs	0x003d672f
     b5c:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     b60:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     b64:	2f3d672f 	svccs	0x003d672f
     b68:	672f3f67 	strvs	r3, [pc, -r7, ror #30]!
     b6c:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     b70:	023e672f 	eorseq	r6, lr, #12320768	; 0xbc0000
     b74:	4b4c143a 	blmi	1305c64 <startup-0x1ecfa39c>
     b78:	594b3e2f 	stmdbpl	fp, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}^
     b7c:	91915b59 	orrsls	r5, r1, r9, asr fp
     b80:	3d3e9491 	cfldrscc	mvf9, [lr, #-580]!	; 0xfffffdbc
     b84:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
     b88:	3d591729 	ldclcc	7, cr1, [r9, #-164]	; 0xffffff5c
     b8c:	4e4b933d 	mcrmi	3, 2, r9, cr11, cr13, {1}
     b90:	4c675a5a 			; <UNDEFINED> instruction: 0x4c675a5a
     b94:	01040200 	mrseq	r0, R12_usr
     b98:	83068206 	movwhi	r8, #25094	; 0x6206
     b9c:	504d913d 	subpl	r9, sp, sp, lsr r1
     ba0:	3108ae4b 	tstcc	r8, fp, asr #28
     ba4:	1b503d4b 	blne	14100d8 <startup-0x1ebeff28>
     ba8:	023f3d4b 	eorseq	r3, pc, #4800	; 0x12c0
     bac:	01010010 	tsteq	r1, r0, lsl r0
     bb0:	000001a5 	andeq	r0, r0, r5, lsr #3
     bb4:	01570002 	cmpeq	r7, r2
     bb8:	01020000 	mrseq	r0, (UNDEF: 2)
     bbc:	000d0efb 	strdeq	r0, [sp], -fp
     bc0:	01010101 	tsteq	r1, r1, lsl #2
     bc4:	01000000 	mrseq	r0, (UNDEF: 0)
     bc8:	43010000 	movwmi	r0, #4096	; 0x1000
     bcc:	6f6d2f3a 	svcvs	0x006d2f3a
     bd0:	2f632f70 	svccs	0x00632f70
     bd4:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     bd8:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     bdc:	6f697461 	svcvs	0x00697461
     be0:	2f72656e 	svccs	0x0072656e
     be4:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     be8:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     bec:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     bf0:	6c660000 	stclvs	0, cr0, [r6], #-0
     bf4:	2e656d61 	cdpcs	13, 6, cr6, cr5, cr1, {3}
     bf8:	00010063 	andeq	r0, r1, r3, rrx
     bfc:	72707300 	rsbsvc	r7, r0, #0, 6
     c00:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
     c04:	00010068 	andeq	r0, r1, r8, rrx
     c08:	616d6900 	cmnvs	sp, r0, lsl #18
     c0c:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     c10:	00000100 	andeq	r0, r0, r0, lsl #2
     c14:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     c18:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     c1c:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
     c20:	00000100 	andeq	r0, r0, r0, lsl #2
     c24:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
     c28:	625f3165 	subsvs	r3, pc, #1073741849	; 0x40000019
     c2c:	6b63616c 	blvs	18d91e4 <startup-0x1e726e1c>
     c30:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     c34:	00000100 	andeq	r0, r0, r0, lsl #2
     c38:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
     c3c:	675f3165 	ldrbvs	r3, [pc, -r5, ror #2]
     c40:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     c44:	006d6278 	rsbeq	r6, sp, r8, ror r2
     c48:	66000001 	strvs	r0, [r0], -r1
     c4c:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
     c50:	696c5f31 	stmdbvs	ip!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     c54:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     c58:	006d6278 	rsbeq	r6, sp, r8, ror r2
     c5c:	66000001 	strvs	r0, [r0], -r1
     c60:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
     c64:	6c625f32 	stclvs	15, cr5, [r2], #-200	; 0xffffff38
     c68:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     c6c:	006d6278 	rsbeq	r6, sp, r8, ror r2
     c70:	66000001 	strvs	r0, [r0], -r1
     c74:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
     c78:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
     c7c:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     c80:	01006d62 	tsteq	r0, r2, ror #26
     c84:	6c660000 	stclvs	0, cr0, [r6], #-0
     c88:	32656d61 	rsbcc	r6, r5, #6208	; 0x1840
     c8c:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     c90:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     c94:	01006d62 	tsteq	r0, r2, ror #26
     c98:	6c660000 	stclvs	0, cr0, [r6], #-0
     c9c:	33656d61 	cmncc	r5, #6208	; 0x1840
     ca0:	616c625f 	cmnvs	ip, pc, asr r2
     ca4:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     ca8:	01006d62 	tsteq	r0, r2, ror #26
     cac:	6c660000 	stclvs	0, cr0, [r6], #-0
     cb0:	33656d61 	cmncc	r5, #6208	; 0x1840
     cb4:	6172675f 	cmnvs	r2, pc, asr r7
     cb8:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     cbc:	0001006d 	andeq	r0, r1, sp, rrx
     cc0:	616c6600 	cmnvs	ip, r0, lsl #12
     cc4:	5f33656d 	svcpl	0x0033656d
     cc8:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     ccc:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     cd0:	0001006d 	andeq	r0, r1, sp, rrx
     cd4:	616c6600 	cmnvs	ip, r0, lsl #12
     cd8:	5f34656d 	svcpl	0x0034656d
     cdc:	63616c62 	cmnvs	r1, #25088	; 0x6200
     ce0:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     ce4:	0001006d 	andeq	r0, r1, sp, rrx
     ce8:	616c6600 	cmnvs	ip, r0, lsl #12
     cec:	5f34656d 	svcpl	0x0034656d
     cf0:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     cf4:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     cf8:	00000100 	andeq	r0, r0, r0, lsl #2
     cfc:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
     d00:	6c5f3465 	cfldrdvs	mvd3, [pc], {101}	; 0x65
     d04:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     d08:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     d0c:	00000100 	andeq	r0, r0, r0, lsl #2
     d10:	02050000 	andeq	r0, r5, #0
     d14:	20002744 	andcs	r2, r0, r4, asr #14
     d18:	3e013103 	adfccs	f3, f1, f3
     d1c:	2f3d672f 	svccs	0x003d672f
     d20:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     d24:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     d28:	2f3d672f 	svccs	0x003d672f
     d2c:	672f3f67 	strvs	r3, [pc, -r7, ror #30]!
     d30:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     d34:	2f3e672f 	svccs	0x003e672f
     d38:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     d3c:	3e672f3d 	mcrcc	15, 3, r2, cr7, cr13, {1}
     d40:	4c144d02 	ldcmi	13, cr4, [r4], {2}
     d44:	4b3e2f4b 	blmi	f8ca78 <startup-0x1f073588>
     d48:	915a5959 	cmpls	sl, r9, asr r9
     d4c:	3e939191 	mrccc	1, 4, r9, cr3, cr1, {4}
     d50:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     d54:	01002f02 	tsteq	r0, r2, lsl #30
     d58:	00023101 	andeq	r3, r2, r1, lsl #2
     d5c:	ba000200 	blt	1564 <startup-0x1fffea9c>
     d60:	02000001 	andeq	r0, r0, #1
     d64:	0d0efb01 	vstreq	d15, [lr, #-4]
     d68:	01010100 	mrseq	r0, (UNDEF: 17)
     d6c:	00000001 	andeq	r0, r0, r1
     d70:	01000001 	tsteq	r0, r1
     d74:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     d78:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     d7c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     d80:	6f62616c 	svcvs	0x0062616c
     d84:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     d88:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     d8c:	5049442f 	subpl	r4, r9, pc, lsr #8
     d90:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     d94:	2f686374 	svccs	0x00686374
     d98:	62000043 	andvs	r0, r0, #67	; 0x43
     d9c:	2e6d6f6f 	cdpcs	15, 6, cr6, cr13, cr15, {3}
     da0:	00010063 	andeq	r0, r1, r3, rrx
     da4:	72707300 	rsbsvc	r7, r0, #0, 6
     da8:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
     dac:	00010068 	andeq	r0, r1, r8, rrx
     db0:	616d6900 	cmnvs	sp, r0, lsl #18
     db4:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     db8:	00000100 	andeq	r0, r0, r0, lsl #2
     dbc:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     dc0:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     dc4:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
     dc8:	00000100 	andeq	r0, r0, r0, lsl #2
     dcc:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; c4c <startup-0x1ffff3b4>
     dd0:	6c625f31 	stclvs	15, cr5, [r2], #-196	; 0xffffff3c
     dd4:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     dd8:	006d6278 	rsbeq	r6, sp, r8, ror r2
     ddc:	62000001 	andvs	r0, r0, #1
     de0:	316d6f6f 	cmncc	sp, pc, ror #30
     de4:	6172675f 	cmnvs	r2, pc, asr r7
     de8:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     dec:	0001006d 	andeq	r0, r1, sp, rrx
     df0:	6f6f6200 	svcvs	0x006f6200
     df4:	6c5f316d 	ldfvse	f3, [pc], {109}	; 0x6d
     df8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     dfc:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     e00:	00000100 	andeq	r0, r0, r0, lsl #2
     e04:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; c84 <startup-0x1ffff37c>
     e08:	6c625f32 	stclvs	15, cr5, [r2], #-200	; 0xffffff38
     e0c:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     e10:	006d6278 	rsbeq	r6, sp, r8, ror r2
     e14:	62000001 	andvs	r0, r0, #1
     e18:	326d6f6f 	rsbcc	r6, sp, #444	; 0x1bc
     e1c:	6172675f 	cmnvs	r2, pc, asr r7
     e20:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     e24:	0001006d 	andeq	r0, r1, sp, rrx
     e28:	6f6f6200 	svcvs	0x006f6200
     e2c:	6c5f326d 	lfmvs	f3, 2, [pc], {109}	; 0x6d
     e30:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     e34:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     e38:	00000100 	andeq	r0, r0, r0, lsl #2
     e3c:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; cbc <startup-0x1ffff344>
     e40:	6c625f33 	stclvs	15, cr5, [r2], #-204	; 0xffffff34
     e44:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     e48:	006d6278 	rsbeq	r6, sp, r8, ror r2
     e4c:	62000001 	andvs	r0, r0, #1
     e50:	336d6f6f 	cmncc	sp, #444	; 0x1bc
     e54:	6172675f 	cmnvs	r2, pc, asr r7
     e58:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     e5c:	0001006d 	andeq	r0, r1, sp, rrx
     e60:	6f6f6200 	svcvs	0x006f6200
     e64:	6c5f336d 	mrrcvs	3, 6, r3, pc, cr13	; <UNPREDICTABLE>
     e68:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     e6c:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     e70:	00000100 	andeq	r0, r0, r0, lsl #2
     e74:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; cf4 <startup-0x1ffff30c>
     e78:	6c625f34 	stclvs	15, cr5, [r2], #-208	; 0xffffff30
     e7c:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     e80:	006d6278 	rsbeq	r6, sp, r8, ror r2
     e84:	62000001 	andvs	r0, r0, #1
     e88:	346d6f6f 	strbtcc	r6, [sp], #-3951	; 0xfffff091
     e8c:	6172675f 	cmnvs	r2, pc, asr r7
     e90:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     e94:	0001006d 	andeq	r0, r1, sp, rrx
     e98:	6f6f6200 	svcvs	0x006f6200
     e9c:	6c5f346d 	cfldrdvs	mvd3, [pc], {109}	; 0x6d
     ea0:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     ea4:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     ea8:	00000100 	andeq	r0, r0, r0, lsl #2
     eac:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; d2c <startup-0x1ffff2d4>
     eb0:	6c625f35 	stclvs	15, cr5, [r2], #-212	; 0xffffff2c
     eb4:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     eb8:	006d6278 	rsbeq	r6, sp, r8, ror r2
     ebc:	62000001 	andvs	r0, r0, #1
     ec0:	356d6f6f 	strbcc	r6, [sp, #-3951]!	; 0xfffff091
     ec4:	6172675f 	cmnvs	r2, pc, asr r7
     ec8:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     ecc:	0001006d 	andeq	r0, r1, sp, rrx
     ed0:	6f6f6200 	svcvs	0x006f6200
     ed4:	6c5f356d 	cfldr64vs	mvdx3, [pc], {109}	; 0x6d
     ed8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     edc:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     ee0:	00000100 	andeq	r0, r0, r0, lsl #2
     ee4:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; d64 <startup-0x1ffff29c>
     ee8:	6c625f36 	stclvs	15, cr5, [r2], #-216	; 0xffffff28
     eec:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     ef0:	006d6278 	rsbeq	r6, sp, r8, ror r2
     ef4:	62000001 	andvs	r0, r0, #1
     ef8:	366d6f6f 	strbtcc	r6, [sp], -pc, ror #30
     efc:	6172675f 	cmnvs	r2, pc, asr r7
     f00:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     f04:	0001006d 	andeq	r0, r1, sp, rrx
     f08:	6f6f6200 	svcvs	0x006f6200
     f0c:	6c5f366d 	mrrcvs	6, 6, r3, pc, cr13	; <UNPREDICTABLE>
     f10:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     f14:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     f18:	00000100 	andeq	r0, r0, r0, lsl #2
     f1c:	02050000 	andeq	r0, r5, #0
     f20:	200029f0 	strdcs	r2, [r0], -r0
     f24:	0100cf03 	tsteq	r0, r3, lsl #30
     f28:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     f2c:	2f3d672f 	svccs	0x003d672f
     f30:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     f34:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     f38:	2f3f672f 	svccs	0x003f672f
     f3c:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     f40:	3e672f3d 	mcrcc	15, 3, r2, cr7, cr13, {1}
     f44:	2f3d672f 	svccs	0x003d672f
     f48:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     f4c:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     f50:	2f3d672f 	svccs	0x003d672f
     f54:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     f58:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     f5c:	023d672f 	eorseq	r6, sp, #12320768	; 0xbc0000
     f60:	594c1471 	stmdbpl	ip, {r0, r4, r5, r6, sl, ip}^
     f64:	594b3e2f 	stmdbpl	fp, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}^
     f68:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
     f6c:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
     f70:	75757559 	ldrbvc	r7, [r5, #-1369]!	; 0xfffffaa7
     f74:	91919176 	orrsls	r9, r1, r6, ror r1
     f78:	91919191 			; <UNDEFINED> instruction: 0x91919191
     f7c:	91919191 			; <UNDEFINED> instruction: 0x91919191
     f80:	93919191 	orrsls	r9, r1, #1073741860	; 0x40000024
     f84:	3d3d3d3e 	ldccc	13, cr3, [sp, #-248]!	; 0xffffff08
     f88:	0066023d 	rsbeq	r0, r6, sp, lsr r2
     f8c:	034e0101 	movteq	r0, #57601	; 0xe101
     f90:	00020000 	andeq	r0, r2, r0
     f94:	0000007c 	andeq	r0, r0, ip, ror r0
     f98:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     f9c:	0101000d 	tsteq	r1, sp
     fa0:	00000101 	andeq	r0, r0, r1, lsl #2
     fa4:	00000100 	andeq	r0, r0, r0, lsl #2
     fa8:	2f3a4301 	svccs	0x003a4301
     fac:	2f706f6d 	svccs	0x00706f6d
     fb0:	6f4d2f63 	svcvs	0x004d2f63
     fb4:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     fb8:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     fbc:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     fc0:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     fc4:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     fc8:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     fcc:	0000432f 	andeq	r4, r0, pc, lsr #6
     fd0:	70617267 	rsbvc	r7, r1, r7, ror #4
     fd4:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
     fd8:	0100632e 	tsteq	r0, lr, lsr #6
     fdc:	70730000 	rsbsvc	r0, r3, r0
     fe0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     fe4:	0100682e 	tsteq	r0, lr, lsr #16
     fe8:	6d690000 	stclvs	0, cr0, [r9, #-0]
     fec:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
     ff0:	00010068 	andeq	r0, r1, r8, rrx
     ff4:	6d616700 	stclvs	7, cr6, [r1, #-0]
     ff8:	6a626f65 	bvs	189cd94 <startup-0x1e76326c>
     ffc:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
    1000:	00010068 	andeq	r0, r1, r8, rrx
    1004:	61726700 	cmnvs	r2, r0, lsl #14
    1008:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    100c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1010:	00000001 	andeq	r0, r0, r1
    1014:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
    1018:	1520002f 	strne	r0, [r0, #-47]!	; 0xffffffd1
    101c:	3d3d3d30 	ldccc	13, cr3, [sp, #-192]!	; 0xffffff40
    1020:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    1024:	06200601 	strteq	r0, [r0], -r1, lsl #12
    1028:	30a03d67 	adccc	r3, r0, r7, ror #26
    102c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    1030:	01040200 	mrseq	r0, R12_usr
    1034:	67062006 	strvs	r2, [r6, -r6]
    1038:	214ba03d 	cmpcs	fp, sp, lsr r0
    103c:	2a2f2f2f 	bcs	bccd00 <startup-0x1f433300>
    1040:	214f4c5e 	cmpcs	pc, lr, asr ip	; <UNPREDICTABLE>
    1044:	09035b57 	stmdbeq	r3, {r0, r1, r2, r4, r6, r8, r9, fp, ip, lr}
    1048:	02004c4a 	andeq	r4, r0, #18944	; 0x4a00
    104c:	003d0304 	eorseq	r0, sp, r4, lsl #6
    1050:	57030402 	strpl	r0, [r3, -r2, lsl #8]
    1054:	01040200 	mrseq	r0, R12_usr
    1058:	4c063c06 	stcmi	12, cr3, [r6], {6}
    105c:	674b2f67 	strbvs	r2, [fp, -r7, ror #30]
    1060:	4b4b4b2f 	blmi	12d3d24 <startup-0x1ed2c2dc>
    1064:	915968a1 	cmpls	r9, r1, lsr #17
    1068:	68765983 	ldmdavs	r6!, {r0, r1, r7, r8, fp, ip, lr}^
    106c:	5983d759 	stmibpl	r3, {r0, r3, r4, r6, r8, r9, sl, ip, lr, pc}
    1070:	12036767 	andne	r6, r3, #27000832	; 0x19c0000
    1074:	206e0374 	rsbcs	r0, lr, r4, ror r3
    1078:	034a1203 	movteq	r1, #41475	; 0xa203
    107c:	3d3d2070 	ldccc	0, cr2, [sp, #-448]!	; 0xfffffe40
    1080:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
    1084:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
    1088:	3e4c223d 	mcrcc	2, 2, r2, cr12, cr13, {1}
    108c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    1090:	752f3d31 	strvc	r3, [pc, #-3377]!	; 367 <startup-0x1ffffc99>
    1094:	7903313d 	stmdbvc	r3, {r0, r2, r3, r4, r5, r8, ip, sp}
    1098:	3d23274a 	stccc	7, cr2, [r3, #-296]!	; 0xfffffed8
    109c:	3d3d67bc 	ldccc	7, cr6, [sp, #-752]!	; 0xfffffd10
    10a0:	2f593d3d 	svccs	0x00593d3d
    10a4:	3d592f3d 	ldclcc	15, cr2, [r9, #-244]	; 0xffffff0c
    10a8:	303d4b3e 	eorscc	r4, sp, lr, lsr fp
    10ac:	3d313d4b 	ldccc	13, cr3, [r1, #-300]!	; 0xfffffed4
    10b0:	595967bc 	ldmdbpl	r9, {r2, r3, r4, r5, r7, r8, r9, sl, sp, lr}^
    10b4:	594b915a 	stmdbpl	fp, {r1, r3, r4, r6, r8, ip, pc}^
    10b8:	3e2f3d2f 	cdpcc	13, 2, cr3, cr15, cr15, {1}
    10bc:	59303d59 	ldmdbpl	r0!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
    10c0:	3d3d313d 	ldfccs	f3, [sp, #-244]!	; 0xffffff0c
    10c4:	3d91673d 	ldccc	7, cr6, [r1, #244]	; 0xf4
    10c8:	833d3d59 	teqhi	sp, #5696	; 0x1640
    10cc:	593d914b 	ldmdbpl	sp!, {r0, r1, r3, r6, r8, ip, pc}
    10d0:	4c833d3d 	stcmi	13, cr3, [r3], {61}	; 0x3d
    10d4:	3d3e3d2f 	ldccc	13, cr3, [lr, #-188]!	; 0xffffff44
    10d8:	3d3e3d3d 	ldccc	13, cr3, [lr, #-244]!	; 0xffffff0c
    10dc:	4b4b3e3d 	blmi	12d09d8 <startup-0x1ed2f628>
    10e0:	3d4b4b4b 	vstrcc	d20, [fp, #-300]	; 0xfffffed4
    10e4:	9f4b3e3d 	svcls	0x004b3e3d
    10e8:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
    10ec:	02004b03 	andeq	r4, r0, #3072	; 0xc00
    10f0:	00490304 	subeq	r0, r9, r4, lsl #6
    10f4:	06010402 	streq	r0, [r1], -r2, lsl #8
    10f8:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
    10fc:	00460602 	subeq	r0, r6, r2, lsl #12
    1100:	06010402 	streq	r0, [r1], -r2, lsl #8
    1104:	4d520658 	ldclmi	6, cr0, [r2, #-352]	; 0xfffffea0
    1108:	02002f76 	andeq	r2, r0, #472	; 0x1d8
    110c:	4a060104 	bmi	181524 <startup-0x1fe7eadc>
    1110:	02040200 	andeq	r0, r4, #0, 4
    1114:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    1118:	4c064a03 			; <UNDEFINED> instruction: 0x4c064a03
    111c:	3d3d1308 	ldccc	3, cr1, [sp, #-32]!	; 0xffffffe0
    1120:	763dbc3e 			; <UNDEFINED> instruction: 0x763dbc3e
    1124:	1fd93d76 	svcne	0x00d93d76
    1128:	d93d23d7 	ldmdble	sp!, {r0, r1, r2, r4, r6, r7, r8, r9, sp}
    112c:	3d23d71f 	stccc	7, cr13, [r3, #-124]!	; 0xffffff84
    1130:	03d71fd9 	bicseq	r1, r7, #868	; 0x364
    1134:	23032e61 	movwcs	r2, #15969	; 0x3e61
    1138:	0069af20 	rsbeq	sl, r9, r0, lsr #30
    113c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1140:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    1144:	02004a02 	andeq	r4, r0, #8192	; 0x2000
    1148:	064a0304 	strbeq	r0, [sl], -r4, lsl #6
    114c:	1308754b 	movwne	r7, #34123	; 0x854b
    1150:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    1154:	5b595959 	blpl	16576c0 <startup-0x1e9a8940>
    1158:	4b3d763d 	blmi	f5ea54 <startup-0x1f0a15ac>
    115c:	c93e4b4c 	ldmdbgt	lr!, {r2, r3, r6, r8, r9, fp, lr}
    1160:	3dca9fd8 	stclcc	15, cr9, [sl, #864]	; 0x360
    1164:	5e03a0ae 	cdppl	0, 0, cr10, cr3, cr14, {5}
    1168:	202303ac 	eorcs	r0, r3, ip, lsr #7
    116c:	592f4c84 	stmdbpl	pc!, {r2, r7, sl, fp, lr}	; <UNPREDICTABLE>
    1170:	01040200 	mrseq	r0, R12_usr
    1174:	02005806 	andeq	r5, r0, #393216	; 0x60000
    1178:	002e0204 	eoreq	r0, lr, r4, lsl #4
    117c:	20040402 	andcs	r0, r4, r2, lsl #8
    1180:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    1184:	d7593d06 	ldrble	r3, [r9, -r6, lsl #26]
    1188:	04020075 	streq	r0, [r2], #-117	; 0xffffff8b
    118c:	02005903 	andeq	r5, r0, #49152	; 0xc000
    1190:	00ab0304 	adceq	r0, fp, r4, lsl #6
    1194:	06010402 	streq	r0, [r1], -r2, lsl #8
    1198:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
    119c:	00550602 	subseq	r0, r5, r2, lsl #12
    11a0:	06010402 	streq	r0, [r1], -r2, lsl #8
    11a4:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    11a8:	00560602 	subseq	r0, r6, r2, lsl #12
    11ac:	06010402 	streq	r0, [r1], -r2, lsl #8
    11b0:	0a030674 	beq	c2b88 <startup-0x1ff3d478>
    11b4:	59765258 	ldmdbpl	r6!, {r3, r4, r6, r9, ip, lr}^
    11b8:	3d3d595a 			; <UNDEFINED> instruction: 0x3d3d595a
    11bc:	e6913dbb 			; <UNDEFINED> instruction: 0xe6913dbb
    11c0:	0067083d 	rsbeq	r0, r7, sp, lsr r8
    11c4:	03020402 	movweq	r0, #9218	; 0x2402
    11c8:	0066087a 	rsbeq	r0, r6, sl, ror r8
    11cc:	06010402 	streq	r0, [r1], -r2, lsl #8
    11d0:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    11d4:	003a0602 	eorseq	r0, sl, r2, lsl #12
    11d8:	06010402 	streq	r0, [r1], -r2, lsl #8
    11dc:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    11e0:	00490602 	subeq	r0, r9, r2, lsl #12
    11e4:	06010402 	streq	r0, [r1], -r2, lsl #8
    11e8:	0e03063c 	mcreq	6, 0, r0, cr3, cr12, {1}
    11ec:	3d774c58 	ldclcc	12, cr4, [r7, #-352]!	; 0xfffffea0
    11f0:	03040200 	movweq	r0, #16896	; 0x4200
    11f4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    11f8:	02006503 	andeq	r6, r0, #12582912	; 0xc00000
    11fc:	3c060104 	stfccs	f0, [r6], {4}
    1200:	02040200 	andeq	r0, r4, #0, 4
    1204:	02006506 	andeq	r6, r0, #25165824	; 0x1800000
    1208:	3c060104 	stfccs	f0, [r6], {4}
    120c:	774c6b06 	strbvc	r6, [ip, -r6, lsl #22]
    1210:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    1214:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
    1218:	00650304 	rsbeq	r0, r5, r4, lsl #6
    121c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1220:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    1224:	00650602 	rsbeq	r0, r5, r2, lsl #12
    1228:	06010402 	streq	r0, [r1], -r2, lsl #8
    122c:	4d6b063c 	stclmi	6, cr0, [fp, #-240]!	; 0xffffff10
    1230:	2f2f2f3d 	svccs	0x002f2f3d
    1234:	00693030 	rsbeq	r3, r9, r0, lsr r0
    1238:	30010402 	andcc	r0, r1, r2, lsl #8
    123c:	01040200 	mrseq	r0, R12_usr
    1240:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
    1244:	02006701 	andeq	r6, r0, #262144	; 0x40000
    1248:	00c90104 	sbceq	r0, r9, r4, lsl #2
    124c:	08010402 	stmdaeq	r1, {r1, sl}
    1250:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
    1254:	02004b01 	andeq	r4, r0, #1024	; 0x400
    1258:	002f0104 	eoreq	r0, pc, r4, lsl #2
    125c:	68010402 	stmdavs	r1, {r1, sl}
    1260:	01040200 	mrseq	r0, R12_usr
    1264:	040200c9 	streq	r0, [r2], #-201	; 0xffffff37
    1268:	00130801 	andseq	r0, r3, r1, lsl #16
    126c:	92010402 	andls	r0, r1, #33554432	; 0x2000000
    1270:	01040200 	mrseq	r0, R12_usr
    1274:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
    1278:	02003e01 	andeq	r3, r0, #1, 28
    127c:	002f0104 	eoreq	r0, pc, r4, lsl #2
    1280:	67010402 	strvs	r0, [r1, -r2, lsl #8]
    1284:	01040200 	mrseq	r0, R12_usr
    1288:	02001308 	andeq	r1, r0, #8, 6	; 0x20000000
    128c:	004c0104 	subeq	r0, ip, r4, lsl #2
    1290:	03010402 	movweq	r0, #5122	; 0x1402
    1294:	19033c6c 	stmdbne	r3, {r2, r3, r5, r6, sl, fp, ip, sp}
    1298:	02003e3c 	andeq	r3, r0, #60, 28	; 0x3c0
    129c:	003d0304 	eorseq	r0, sp, r4, lsl #6
    12a0:	08030402 	stmdaeq	r3, {r1, sl}
    12a4:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
    12a8:	00910803 	addseq	r0, r1, r3, lsl #16
    12ac:	08030402 	stmdaeq	r3, {r1, sl}
    12b0:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
    12b4:	00460803 	subeq	r0, r6, r3, lsl #16
    12b8:	06010402 	streq	r0, [r1], -r2, lsl #8
    12bc:	0850063c 	ldmdaeq	r0, {r2, r3, r4, r5, r9, sl}^
    12c0:	083d4b3e 	ldmdaeq	sp!, {r1, r2, r3, r4, r5, r8, r9, fp, lr}
    12c4:	08210821 	stmdaeq	r1!, {r0, r5, fp}
    12c8:	304b4d21 	subcc	r4, fp, r1, lsr #26
    12cc:	4b3e4b21 	blmi	f93f58 <startup-0x1f06c0a8>
    12d0:	4b3e4b3e 	blmi	f93fd0 <startup-0x1f06c030>
    12d4:	033c7503 	teqeq	ip, #12582912	; 0xc00000
    12d8:	0230580e 	eorseq	r5, r0, #917504	; 0xe0000
    12dc:	0101000b 	tsteq	r1, fp
    12e0:	00000072 	andeq	r0, r0, r2, ror r0
    12e4:	005b0002 	subseq	r0, fp, r2
    12e8:	01020000 	mrseq	r0, (UNDEF: 2)
    12ec:	000d0efb 	strdeq	r0, [sp], -fp
    12f0:	01010101 	tsteq	r1, r1, lsl #2
    12f4:	01000000 	mrseq	r0, (UNDEF: 0)
    12f8:	43010000 	movwmi	r0, #4096	; 0x1000
    12fc:	6f6d2f3a 	svcvs	0x006d2f3a
    1300:	2f632f70 	svccs	0x00632f70
    1304:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    1308:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    130c:	6f697461 	svcvs	0x00697461
    1310:	2f72656e 	svccs	0x0072656e
    1314:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    1318:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    131c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    1320:	6d690000 	stclvs	0, cr0, [r9, #-0]
    1324:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
    1328:	00010063 	andeq	r0, r1, r3, rrx
    132c:	72707300 	rsbsvc	r7, r0, #0, 6
    1330:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
    1334:	00010068 	andeq	r0, r1, r8, rrx
    1338:	616d6900 	cmnvs	sp, r0, lsl #18
    133c:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
    1340:	00000100 	andeq	r0, r0, r0, lsl #2
    1344:	02050000 	andeq	r0, r5, #0
    1348:	20003d60 	andcs	r3, r0, r0, ror #26
    134c:	3d3d7514 	cfldr32cc	mvfx7, [sp, #-80]!	; 0xffffffb0
    1350:	0004023d 	andeq	r0, r4, sp, lsr r2
    1354:	00680101 	rsbeq	r0, r8, r1, lsl #2
    1358:	00020000 	andeq	r0, r2, r0
    135c:	00000051 	andeq	r0, r0, r1, asr r0
    1360:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1364:	0101000d 	tsteq	r1, sp
    1368:	00000101 	andeq	r0, r0, r1, lsl #2
    136c:	00000100 	andeq	r0, r0, r0, lsl #2
    1370:	2f3a4301 	svccs	0x003a4301
    1374:	2f706f6d 	svccs	0x00706f6d
    1378:	6f4d2f63 	svcvs	0x004d2f63
    137c:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    1380:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    1384:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    1388:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    138c:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    1390:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1394:	0000432f 	andeq	r4, r0, pc, lsr #6
    1398:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
    139c:	632e6574 			; <UNDEFINED> instruction: 0x632e6574
    13a0:	00000100 	andeq	r0, r0, r0, lsl #2
    13a4:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
    13a8:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
    13ac:	00000100 	andeq	r0, r0, r0, lsl #2
    13b0:	02050000 	andeq	r0, r5, #0
    13b4:	20003d88 	andcs	r3, r0, r8, lsl #27
    13b8:	3d3d7515 	cfldr32cc	mvfx7, [sp, #-84]!	; 0xffffffac
    13bc:	0004023d 	andeq	r0, r4, sp, lsr r2
    13c0:	006c0101 	rsbeq	r0, ip, r1, lsl #2
    13c4:	00020000 	andeq	r0, r2, r0
    13c8:	0000004d 	andeq	r0, r0, sp, asr #32
    13cc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    13d0:	0101000d 	tsteq	r1, sp
    13d4:	00000101 	andeq	r0, r0, r1, lsl #2
    13d8:	00000100 	andeq	r0, r0, r0, lsl #2
    13dc:	2f3a4301 	svccs	0x003a4301
    13e0:	2f706f6d 	svccs	0x00706f6d
    13e4:	6f4d2f63 	svcvs	0x004d2f63
    13e8:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    13ec:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    13f0:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    13f4:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    13f8:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    13fc:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1400:	0000432f 	andeq	r4, r0, pc, lsr #6
    1404:	6f697067 	svcvs	0x00697067
    1408:	0100632e 	tsteq	r0, lr, lsr #6
    140c:	70670000 	rsbvc	r0, r7, r0
    1410:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    1414:	00000100 	andeq	r0, r0, r0, lsl #2
    1418:	02050000 	andeq	r0, r5, #0
    141c:	20003db0 			; <UNDEFINED> instruction: 0x20003db0
    1420:	763d2f15 	shadd16vc	r2, sp, r5
    1424:	693d592f 	ldmdbvs	sp!, {r0, r1, r2, r3, r5, r8, fp, ip, lr}
    1428:	3091674b 	addscc	r6, r1, fp, asr #14
    142c:	00040222 	andeq	r0, r4, r2, lsr #4
    1430:	015a0101 	cmpeq	sl, r1, lsl #2
    1434:	00020000 	andeq	r0, r2, r0
    1438:	00000081 	andeq	r0, r0, r1, lsl #1
    143c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1440:	0101000d 	tsteq	r1, sp
    1444:	00000101 	andeq	r0, r0, r1, lsl #2
    1448:	00000100 	andeq	r0, r0, r0, lsl #2
    144c:	2f3a4301 	svccs	0x003a4301
    1450:	2f706f6d 	svccs	0x00706f6d
    1454:	6f4d2f63 	svcvs	0x004d2f63
    1458:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    145c:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    1460:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    1464:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1468:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    146c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1470:	0000432f 	andeq	r4, r0, pc, lsr #6
    1474:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1478:	69645f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    147c:	616c7073 	smcvs	50947	; 0xc703
    1480:	00632e79 	rsbeq	r2, r3, r9, ror lr
    1484:	73000001 	movwvc	r0, #1
    1488:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
    148c:	00682e65 	rsbeq	r2, r8, r5, ror #28
    1490:	69000001 	stmdbvs	r0, {r0}
    1494:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1498:	0100682e 	tsteq	r0, lr, lsr #16
    149c:	61670000 	cmnvs	r7, r0
    14a0:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
    14a4:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
    14a8:	0100682e 	tsteq	r0, lr, lsr #16
    14ac:	72670000 	rsbvc	r0, r7, #0
    14b0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
    14b4:	682e7363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, ip, sp, lr}
    14b8:	00000100 	andeq	r0, r0, r0, lsl #2
    14bc:	02050000 	andeq	r0, r5, #0
    14c0:	20003e1c 	andcs	r3, r0, ip, lsl lr
    14c4:	69012e03 	stmdbvs	r1, {r0, r1, r9, sl, fp, sp}
    14c8:	6859bb59 	ldmdavs	r9, {r0, r3, r4, r6, r8, r9, fp, ip, sp, pc}^
    14cc:	13085969 	movwne	r5, #35177	; 0x8969
    14d0:	3d677659 	stclcc	6, cr7, [r7, #-356]!	; 0xfffffe9c
    14d4:	674c593d 	smlaldxvs	r5, ip, sp, r9
    14d8:	4c593d3d 	mrrcmi	13, 3, r3, r9, cr13
    14dc:	3d3d673e 	ldccc	7, cr6, [sp, #-248]!	; 0xffffff08
    14e0:	2f67675a 	svccs	0x0067675a
    14e4:	3d673e84 	stclcc	14, cr3, [r7, #-528]!	; 0xfffffdf0
    14e8:	67675a3d 			; <UNDEFINED> instruction: 0x67675a3d
    14ec:	3d67842f 	cfstrdcc	mvd8, [r7, #-188]!	; 0xffffff44
    14f0:	683d2f4b 	ldmdavs	sp!, {r0, r1, r3, r6, r8, r9, sl, fp, sp}
    14f4:	2f2f3d3e 	svccs	0x002f3d3e
    14f8:	762f3d4b 	strtvc	r3, [pc], -fp, asr #26
    14fc:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    1500:	06200601 	strteq	r0, [r0], -r1, lsl #12
    1504:	3d593d83 	ldclcc	13, cr3, [r9, #-524]	; 0xfffffdf4
    1508:	4b67914c 	blmi	19e5a40 <startup-0x1e61a5c0>
    150c:	304c9f76 	subcc	r9, ip, r6, ror pc
    1510:	01040200 	mrseq	r0, R12_usr
    1514:	83062006 	movwhi	r2, #24582	; 0x6006
    1518:	003f3d3d 	eorseq	r3, pc, sp, lsr sp	; <UNPREDICTABLE>
    151c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1520:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
    1524:	02003f3d 	andeq	r3, r0, #61, 30	; 0xf4
    1528:	20060104 	andcs	r0, r6, r4, lsl #2
    152c:	3d3d8306 	ldccc	3, cr8, [sp, #-24]!	; 0xffffffe8
    1530:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
    1534:	06200601 	strteq	r0, [r0], -r1, lsl #12
    1538:	3f3d3d83 	svccc	0x003d3d83
    153c:	843d343e 	ldrthi	r3, [sp], #-1086	; 0xfffffbc2
    1540:	3e2f2f2f 	cdpcc	15, 2, cr2, cr15, cr15, {1}
    1544:	4b2f843e 	blmi	be2644 <startup-0x1f41d9bc>
    1548:	2f4d7321 	svccs	0x004d7321
    154c:	4d73214b 	ldfmie	f2, [r3, #-300]!	; 0xfffffed4
    1550:	4b305968 	blmi	c17af8 <startup-0x1f3e8508>
    1554:	4b4d7321 	blmi	135e1e0 <startup-0x1eca1e20>
    1558:	4b4e7321 	blmi	139e1e4 <startup-0x1ec61e1c>
    155c:	4b30754c 	blmi	c1ea94 <startup-0x1f3e156c>
    1560:	73213d2f 			; <UNDEFINED> instruction: 0x73213d2f
    1564:	01040200 	mrseq	r0, R12_usr
    1568:	6b064a06 	blvs	193d88 <startup-0x1fe6c278>
    156c:	213d2f4b 	teqcs	sp, fp, asr #30
    1570:	04020073 	streq	r0, [r2], #-115	; 0xffffff8d
    1574:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    1578:	3e4e4b6b 	vmlscc.f64	d20, d14, d27
    157c:	2f2f6875 	svccs	0x002f6875
    1580:	73213d4b 			; <UNDEFINED> instruction: 0x73213d4b
    1584:	212f4b4d 			; <UNDEFINED> instruction: 0x212f4b4d
    1588:	02214d73 	eoreq	r4, r1, #7360	; 0x1cc0
    158c:	01010008 	tsteq	r1, r8
    1590:	00000076 	andeq	r0, r0, r6, ror r0
    1594:	00570002 	subseq	r0, r7, r2
    1598:	01020000 	mrseq	r0, (UNDEF: 2)
    159c:	000d0efb 	strdeq	r0, [sp], -fp
    15a0:	01010101 	tsteq	r1, r1, lsl #2
    15a4:	01000000 	mrseq	r0, (UNDEF: 0)
    15a8:	43010000 	movwmi	r0, #4096	; 0x1000
    15ac:	6f6d2f3a 	svcvs	0x006d2f3a
    15b0:	2f632f70 	svccs	0x00632f70
    15b4:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    15b8:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    15bc:	6f697461 	svcvs	0x00697461
    15c0:	2f72656e 	svccs	0x0072656e
    15c4:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    15c8:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    15cc:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    15d0:	6c730000 	ldclvs	0, cr0, [r3], #-0
    15d4:	745f776f 	ldrbvc	r7, [pc], #-1903	; 15dc <startup-0x1fffea24>
    15d8:	2e747865 	cdpcs	8, 7, cr7, cr4, cr5, {3}
    15dc:	00010063 	andeq	r0, r1, r3, rrx
    15e0:	6f6c7300 	svcvs	0x006c7300
    15e4:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
    15e8:	682e7478 	stmdavs	lr!, {r3, r4, r5, r6, sl, ip, sp, lr}
    15ec:	00000100 	andeq	r0, r0, r0, lsl #2
    15f0:	02050000 	andeq	r0, r5, #0
    15f4:	2000433c 	andcs	r4, r0, ip, lsr r3
    15f8:	c99f5915 	ldmibgt	pc, {r0, r2, r4, r8, fp, ip, lr}	; <UNPREDICTABLE>
    15fc:	754c5984 	strbvc	r5, [ip, #-2436]	; 0xfffff67c
    1600:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    1604:	0007023d 	andeq	r0, r7, sp, lsr r2
    1608:	00d60101 	sbcseq	r0, r6, r1, lsl #2
    160c:	00020000 	andeq	r0, r2, r0
    1610:	000000ab 	andeq	r0, r0, fp, lsr #1
    1614:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1618:	0101000d 	tsteq	r1, sp
    161c:	00000101 	andeq	r0, r0, r1, lsl #2
    1620:	00000100 	andeq	r0, r0, r0, lsl #2
    1624:	2f3a4301 	svccs	0x003a4301
    1628:	2f706f6d 	svccs	0x00706f6d
    162c:	6f4d2f63 	svcvs	0x004d2f63
    1630:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    1634:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    1638:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    163c:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1640:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    1644:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1648:	0000432f 	andeq	r4, r0, pc, lsr #6
    164c:	6f646e69 	svcvs	0x00646e69
    1650:	2e73726f 	cdpcs	2, 7, cr7, cr3, cr15, {3}
    1654:	00010063 	andeq	r0, r1, r3, rrx
    1658:	72707300 	rsbsvc	r7, r0, #0, 6
    165c:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
    1660:	00010068 	andeq	r0, r1, r8, rrx
    1664:	616d6900 	cmnvs	sp, r0, lsl #18
    1668:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
    166c:	00000100 	andeq	r0, r0, r0, lsl #2
    1670:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
    1674:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
    1678:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
    167c:	00000100 	andeq	r0, r0, r0, lsl #2
    1680:	6f646e69 	svcvs	0x00646e69
    1684:	5f73726f 	svcpl	0x0073726f
    1688:	63616c62 	cmnvs	r1, #25088	; 0x6200
    168c:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
    1690:	0001006d 	andeq	r0, r1, sp, rrx
    1694:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1698:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    169c:	6172675f 	cmnvs	r2, pc, asr r7
    16a0:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
    16a4:	0001006d 	andeq	r0, r1, sp, rrx
    16a8:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    16ac:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    16b0:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
    16b4:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
    16b8:	01006d62 	tsteq	r0, r2, ror #26
    16bc:	00000000 	andeq	r0, r0, r0
    16c0:	43d00205 	bicsmi	r0, r0, #1342177280	; 0x50000000
    16c4:	13032000 	movwne	r2, #12288	; 0x3000
    16c8:	672f3e01 	strvs	r3, [pc, -r1, lsl #28]!
    16cc:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
    16d0:	083e672f 	ldmdaeq	lr!, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}
    16d4:	2f4b4c5a 	svccs	0x004b4c5a
    16d8:	3e934c3e 	mrccc	12, 4, r4, cr3, cr14, {1}
    16dc:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    16e0:	01010008 	tsteq	r1, r8
    16e4:	000000da 	ldrdeq	r0, [r0], -sl
    16e8:	00af0002 	adceq	r0, pc, r2
    16ec:	01020000 	mrseq	r0, (UNDEF: 2)
    16f0:	000d0efb 	strdeq	r0, [sp], -fp
    16f4:	01010101 	tsteq	r1, r1, lsl #2
    16f8:	01000000 	mrseq	r0, (UNDEF: 0)
    16fc:	43010000 	movwmi	r0, #4096	; 0x1000
    1700:	6f6d2f3a 	svcvs	0x006d2f3a
    1704:	2f632f70 	svccs	0x00632f70
    1708:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    170c:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    1710:	6f697461 	svcvs	0x00697461
    1714:	2f72656e 	svccs	0x0072656e
    1718:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    171c:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    1720:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    1724:	6e690000 	cdpvs	0, 6, cr0, cr9, cr0, {0}
    1728:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    172c:	632e3273 			; <UNDEFINED> instruction: 0x632e3273
    1730:	00000100 	andeq	r0, r0, r0, lsl #2
    1734:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
    1738:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
    173c:	00000100 	andeq	r0, r0, r0, lsl #2
    1740:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
    1744:	00682e65 	rsbeq	r2, r8, r5, ror #28
    1748:	67000001 	strvs	r0, [r0, -r1]
    174c:	6f656d61 	svcvs	0x00656d61
    1750:	63656a62 	cmnvs	r5, #401408	; 0x62000
    1754:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1758:	69000001 	stmdbvs	r0, {r0}
    175c:	6f6f646e 	svcvs	0x006f646e
    1760:	5f327372 	svcpl	0x00327372
    1764:	63616c62 	cmnvs	r1, #25088	; 0x6200
    1768:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
    176c:	0001006d 	andeq	r0, r1, sp, rrx
    1770:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1774:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1778:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
    177c:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
    1780:	01006d62 	tsteq	r0, r2, ror #26
    1784:	6e690000 	cdpvs	0, 6, cr0, cr9, cr0, {0}
    1788:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    178c:	6c5f3273 	lfmvs	f3, 2, [pc], {115}	; 0x73
    1790:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1794:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
    1798:	00000100 	andeq	r0, r0, r0, lsl #2
    179c:	02050000 	andeq	r0, r5, #0
    17a0:	200044b8 			; <UNDEFINED> instruction: 0x200044b8
    17a4:	3e011303 	cdpcc	3, 0, cr1, cr1, cr3, {0}
    17a8:	2f3d672f 	svccs	0x003d672f
    17ac:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
    17b0:	4c5a083e 	mrrcmi	8, 3, r0, sl, cr14
    17b4:	4c3e2f4b 	ldcmi	15, cr2, [lr], #-300	; 0xfffffed4
    17b8:	3d3d3e93 	ldccc	14, cr3, [sp, #-588]!	; 0xfffffdb4
    17bc:	00083d3d 	andeq	r3, r8, sp, lsr sp
    17c0:	00d20101 	sbcseq	r0, r2, r1, lsl #2
    17c4:	00020000 	andeq	r0, r2, r0
    17c8:	000000a7 	andeq	r0, r0, r7, lsr #1
    17cc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    17d0:	0101000d 	tsteq	r1, sp
    17d4:	00000101 	andeq	r0, r0, r1, lsl #2
    17d8:	00000100 	andeq	r0, r0, r0, lsl #2
    17dc:	2f3a4301 	svccs	0x003a4301
    17e0:	2f706f6d 	svccs	0x00706f6d
    17e4:	6f4d2f63 	svcvs	0x004d2f63
    17e8:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    17ec:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    17f0:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    17f4:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    17f8:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    17fc:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1800:	0000432f 	andeq	r4, r0, pc, lsr #6
    1804:	706f7274 	rsbvc	r7, pc, r4, ror r2	; <UNPREDICTABLE>
    1808:	632e7968 			; <UNDEFINED> instruction: 0x632e7968
    180c:	00000100 	andeq	r0, r0, r0, lsl #2
    1810:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
    1814:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
    1818:	00000100 	andeq	r0, r0, r0, lsl #2
    181c:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
    1820:	00682e65 	rsbeq	r2, r8, r5, ror #28
    1824:	67000001 	strvs	r0, [r0, -r1]
    1828:	6f656d61 	svcvs	0x00656d61
    182c:	63656a62 	cmnvs	r5, #401408	; 0x62000
    1830:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1834:	74000001 	strvc	r0, [r0], #-1
    1838:	68706f72 	ldmdavs	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    183c:	6c625f79 	stclvs	15, cr5, [r2], #-484	; 0xfffffe1c
    1840:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
    1844:	006d6278 	rsbeq	r6, sp, r8, ror r2
    1848:	74000001 	strvc	r0, [r0], #-1
    184c:	68706f72 	ldmdavs	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    1850:	72675f79 	rsbvc	r5, r7, #484	; 0x1e4
    1854:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
    1858:	01006d62 	tsteq	r0, r2, ror #26
    185c:	72740000 	rsbsvc	r0, r4, #0
    1860:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1864:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
    1868:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
    186c:	01006d62 	tsteq	r0, r2, ror #26
    1870:	00000000 	andeq	r0, r0, r0
    1874:	45a00205 	strmi	r0, [r0, #517]!	; 0x205
    1878:	13032000 	movwne	r2, #12288	; 0x3000
    187c:	672f3e01 	strvs	r3, [pc, -r1, lsl #28]!
    1880:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
    1884:	083e672f 	ldmdaeq	lr!, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}
    1888:	2f4b4c5a 	svccs	0x004b4c5a
    188c:	3e934c3e 	mrccc	12, 4, r4, cr3, cr14, {1}
    1890:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    1894:	01010008 	tsteq	r1, r8
    1898:	000000ce 	andeq	r0, r0, lr, asr #1
    189c:	00a30002 	adceq	r0, r3, r2
    18a0:	01020000 	mrseq	r0, (UNDEF: 2)
    18a4:	000d0efb 	strdeq	r0, [sp], -fp
    18a8:	01010101 	tsteq	r1, r1, lsl #2
    18ac:	01000000 	mrseq	r0, (UNDEF: 0)
    18b0:	43010000 	movwmi	r0, #4096	; 0x1000
    18b4:	6f6d2f3a 	svcvs	0x006d2f3a
    18b8:	2f632f70 	svccs	0x00632f70
    18bc:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    18c0:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    18c4:	6f697461 	svcvs	0x00697461
    18c8:	2f72656e 	svccs	0x0072656e
    18cc:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    18d0:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    18d4:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    18d8:	6f720000 	svcvs	0x00720000
    18dc:	2e726567 	cdpcs	5, 7, cr6, cr2, cr7, {3}
    18e0:	00010063 	andeq	r0, r1, r3, rrx
    18e4:	72707300 	rsbsvc	r7, r0, #0, 6
    18e8:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
    18ec:	00010068 	andeq	r0, r1, r8, rrx
    18f0:	616d6900 	cmnvs	sp, r0, lsl #18
    18f4:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
    18f8:	00000100 	andeq	r0, r0, r0, lsl #2
    18fc:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
    1900:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
    1904:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
    1908:	00000100 	andeq	r0, r0, r0, lsl #2
    190c:	65676f72 	strbvs	r6, [r7, #-3954]!	; 0xfffff08e
    1910:	6c625f72 	stclvs	15, cr5, [r2], #-456	; 0xfffffe38
    1914:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
    1918:	006d6278 	rsbeq	r6, sp, r8, ror r2
    191c:	72000001 	andvc	r0, r0, #1
    1920:	7265676f 	rsbvc	r6, r5, #29097984	; 0x1bc0000
    1924:	6172675f 	cmnvs	r2, pc, asr r7
    1928:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
    192c:	0001006d 	andeq	r0, r1, sp, rrx
    1930:	676f7200 	strbvs	r7, [pc, -r0, lsl #4]!
    1934:	6c5f7265 	lfmvs	f7, 2, [pc], {101}	; 0x65
    1938:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    193c:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
    1940:	00000100 	andeq	r0, r0, r0, lsl #2
    1944:	02050000 	andeq	r0, r5, #0
    1948:	20004688 	andcs	r4, r0, r8, lsl #13
    194c:	3e011303 	cdpcc	3, 0, cr1, cr1, cr3, {0}
    1950:	2f3d672f 	svccs	0x003d672f
    1954:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
    1958:	4c5a083e 	mrrcmi	8, 3, r0, sl, cr14
    195c:	4c3e2f4b 	ldcmi	15, cr2, [lr], #-300	; 0xfffffed4
    1960:	3d3d3e93 	ldccc	14, cr3, [sp, #-588]!	; 0xfffffdb4
    1964:	00083d3d 	andeq	r3, r8, sp, lsr sp
    1968:	Address 0x00001968 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
       4:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
       8:	67697254 			; <UNDEFINED> instruction: 0x67697254
       c:	00726567 	rsbseq	r6, r2, r7, ror #10
      10:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
      14:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
      18:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
      1c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
      20:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
      24:	5f336572 	svcpl	0x00336572
      28:	6f646e69 	svcvs	0x00646e69
      2c:	0073726f 	rsbseq	r7, r3, pc, ror #4
      30:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
      34:	616d4974 	smcvs	54420	; 0xd494
      38:	67006567 	strvs	r6, [r0, -r7, ror #10]
      3c:	49796172 	ldmdbmi	r9!, {r1, r4, r5, r6, r8, sp, lr}^
      40:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
      44:	73616300 	cmnvc	r1, #0, 6
      48:	5f656c74 	svcpl	0x00656c74
      4c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
      50:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
      54:	6c700073 	ldclvs	0, cr0, [r0], #-460	; 0xfffffe34
      58:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
      5c:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
      60:	726b5f74 	rsbvc	r5, fp, #116, 30	; 0x1d0
      64:	61670061 	cmnvs	r7, r1, rrx
      68:	6f5f656d 	svcvs	0x005f656d
      6c:	00726576 	rsbseq	r6, r2, r6, ror r5
      70:	72665f6e 	rsbvc	r5, r6, #440	; 0x1b8
      74:	73656d61 	cmnvc	r5, #6208	; 0x1840
      78:	73616300 	cmnvc	r1, #0, 6
      7c:	4c656c74 	stclmi	12, cr6, [r5], #-464	; 0xfffffe30
      80:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
      84:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
      88:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
      8c:	74003031 	strvc	r3, [r0], #-49	; 0xffffffcf
      90:	43706d65 	cmnmi	r0, #6464	; 0x1940
      94:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
      98:	616c4265 	cmnvs	ip, r5, ror #4
      9c:	47006b63 	strmi	r6, [r0, -r3, ror #22]
      a0:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
      a4:	36203939 			; <UNDEFINED> instruction: 0x36203939
      a8:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
      ac:	31303220 	teqcc	r0, r0, lsr #4
      b0:	31323037 	teqcc	r2, r7, lsr r0
      b4:	72282035 	eorvc	r2, r8, #53	; 0x35
      b8:	61656c65 	cmnvs	r5, r5, ror #24
      bc:	20296573 	eorcs	r6, r9, r3, ror r5
      c0:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
      c4:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
      c8:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
      cc:	2d362d64 	ldccs	13, cr2, [r6, #-400]!	; 0xfffffe70
      d0:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
      d4:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
      d8:	73697665 	cmnvc	r9, #105906176	; 0x6500000
      dc:	206e6f69 	rsbcs	r6, lr, r9, ror #30
      e0:	35353432 	ldrcc	r3, [r5, #-1074]!	; 0xfffffbce
      e4:	205d3231 	subscs	r3, sp, r1, lsr r2
      e8:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
      ec:	20626d75 	rsbcs	r6, r2, r5, ror sp
      f0:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
      f4:	613d6863 	teqvs	sp, r3, ror #16
      f8:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
      fc:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
     100:	6f6c666d 	svcvs	0x006c666d
     104:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
     108:	733d6962 	teqvc	sp, #1605632	; 0x188000
     10c:	2074666f 	rsbscs	r6, r4, pc, ror #12
     110:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
     114:	20626d75 	rsbcs	r6, r2, r5, ror sp
     118:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
     11c:	613d6863 	teqvs	sp, r3, ror #16
     120:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
     124:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
     128:	4f2d2067 	svcmi	0x002d2067
     12c:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
     130:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
     134:	6d003939 	vstrvs.16	s6, [r0, #-114]	; 0xffffff8e	; <UNPREDICTABLE>
     138:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     13c:	69007265 	stmdbvs	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     140:	6c635f73 	stclvs	15, cr5, [r3], #-460	; 0xfffffe34
     144:	69626d69 	stmdbvs	r2!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
     148:	7000676e 	andvc	r6, r0, lr, ror #14
     14c:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     150:	00377265 	eorseq	r7, r7, r5, ror #4
     154:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
     158:	624f656c 	subvs	r6, pc, #108, 10	; 0x1b000000
     15c:	7274006a 	rsbsvc	r0, r4, #106	; 0x6a
     160:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
     164:	7275625f 	rsbsvc	r6, r5, #-268435451	; 0xf0000005
     168:	0064656e 	rsbeq	r6, r4, lr, ror #10
     16c:	73657270 	cmnvc	r5, #112, 4
     170:	6c625f73 	stclvs	15, cr5, [r2], #-460	; 0xfffffe34
     174:	5f6b6361 	svcpl	0x006b6361
     178:	73746962 	cmnvc	r4, #1605632	; 0x188000
     17c:	72696600 	rsbvc	r6, r9, #0, 12
     180:	695f3165 	ldmdbvs	pc, {r0, r2, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     184:	6f6f646e 	svcvs	0x006f646e
     188:	63007372 	movwvs	r7, #882	; 0x372
     18c:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
     190:	616d4965 	cmnvs	sp, r5, ror #18
     194:	00736567 	rsbseq	r6, r3, r7, ror #10
     198:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     19c:	616d4965 	cmnvs	sp, r5, ror #18
     1a0:	73006567 	movwvc	r6, #1383	; 0x567
     1a4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     1a8:	74007075 	strvc	r7, [r0], #-117	; 0xffffff8b
     1ac:	31747865 	cmncc	r4, r5, ror #16
     1b0:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     1b4:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     1b8:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     1bc:	69740074 	ldmdbvs	r4!, {r2, r4, r5, r6}^
     1c0:	5f656c74 	svcpl	0x00656c74
     1c4:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     1c8:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     1cc:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     1d0:	4d706d65 	ldclmi	13, cr6, [r0, #-404]!	; 0xfffffe6c
     1d4:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     1d8:	72477265 	subvc	r7, r7, #1342177286	; 0x50000006
     1dc:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     1e0:	32747865 	rsbscc	r7, r4, #6619136	; 0x650000
     1e4:	65727000 	ldrbvs	r7, [r2, #-0]!
     1e8:	72477373 	subvc	r7, r7, #-872415231	; 0xcc000001
     1ec:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     1f0:	34747865 	ldrbtcc	r7, [r4], #-2149	; 0xfffff79b
     1f4:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     1f8:	66003574 			; <UNDEFINED> instruction: 0x66003574
     1fc:	31657269 	cmncc	r5, r9, ror #4
     200:	73616800 	cmnvc	r1, #0, 16
     204:	696c635f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
     208:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
     20c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     210:	00674270 	rsbeq	r4, r7, r0, ror r2
     214:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     218:	65740033 	ldrbvs	r0, [r4, #-51]!	; 0xffffffcd
     21c:	00387478 	eorseq	r7, r8, r8, ror r4
     220:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     224:	6c625f65 	stclvs	15, cr5, [r2], #-404	; 0xfffffe6c
     228:	5f6b6361 	svcpl	0x006b6361
     22c:	73746962 	cmnvc	r4, #1605632	; 0x188000
     230:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     234:	6e6f4d70 	mcrvs	13, 3, r4, cr15, cr0, {3}
     238:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     23c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     240:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
     244:	00377478 	eorseq	r7, r7, r8, ror r4
     248:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
     24c:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     250:	5f726566 	svcpl	0x00726566
     254:	63616c62 	cmnvs	r1, #25088	; 0x6200
     258:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
     25c:	00367478 	eorseq	r7, r6, r8, ror r4
     260:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     264:	6f6d0039 	svcvs	0x006d0039
     268:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     26c:	696f5072 	stmdbvs	pc!, {r1, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
     270:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     274:	6f6d0032 	svcvs	0x006d0032
     278:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     27c:	696f5072 	stmdbvs	pc!, {r1, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
     280:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     284:	6f720033 	svcvs	0x00720033
     288:	64003277 	strvs	r3, [r0], #-631	; 0xfffffd89
     28c:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
     290:	6d007961 	vstrvs.16	s14, [r0, #-194]	; 0xffffff3e	; <UNPREDICTABLE>
     294:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     298:	625f7265 	subsvs	r7, pc, #1342177286	; 0x50000006
     29c:	6b63616c 	blvs	18d8854 <startup-0x1e7277ac>
     2a0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     2a4:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
     2a8:	615f7469 	cmpvs	pc, r9, ror #8
     2ac:	6c007070 	stcvs	0, cr7, [r0], {112}	; 0x70
     2b0:	5f676e6f 	svcpl	0x00676e6f
     2b4:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     2b8:	65727000 	ldrbvs	r7, [r2, #-0]!
     2bc:	624f7373 	subvs	r7, pc, #-872415231	; 0xcc000001
     2c0:	6966006a 	stmdbvs	r6!, {r1, r3, r5, r6}^
     2c4:	5f326572 	svcpl	0x00326572
     2c8:	6f646e69 	svcvs	0x00646e69
     2cc:	0073726f 	rsbseq	r7, r3, pc, ror #4
     2d0:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
     2d4:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     2d8:	5f726566 	svcpl	0x00726566
     2dc:	63616c62 	cmnvs	r1, #25088	; 0x6200
     2e0:	72675f6b 	rsbvc	r5, r7, #428	; 0x1ac
     2e4:	6c5f7961 	mrrcvs	9, 6, r7, pc, cr1	; <UNPREDICTABLE>
     2e8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     2ec:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     2f0:	72745f74 	rsbsvc	r5, r4, #116, 30	; 0x1d0
     2f4:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
     2f8:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     2fc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     300:	6f700035 	svcvs	0x00700035
     304:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     308:	64003672 	strvs	r3, [r0], #-1650	; 0xfffff98e
     30c:	61747369 	cmnvs	r4, r9, ror #6
     310:	5f65636e 	svcpl	0x0065636e
     314:	72696168 	rsbvc	r6, r9, #104, 2
     318:	6f72745f 	svcvs	0x0072745f
     31c:	00796870 	rsbseq	r6, r9, r0, ror r8
     320:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     324:	38726574 	ldmdacc	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     328:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     32c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     330:	65740039 	ldrbvs	r0, [r4, #-57]!	; 0xffffffc7
     334:	6143706d 	cmpvs	r3, sp, rrx
     338:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     33c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     340:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
     344:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
     348:	73696400 	cmnvc	r9, #0, 8
     34c:	636e6174 	cmnvs	lr, #116, 2
     350:	61685f65 	cmnvs	r8, r5, ror #30
     354:	445f7269 	ldrbmi	r7, [pc], #-617	; 35c <startup-0x1ffffca4>
     358:	77005049 	strvc	r5, [r0, -r9, asr #32]
     35c:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
     360:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     364:	6f625f74 	svcvs	0x00625f74
     368:	64006d6f 	strvs	r6, [r0], #-3439	; 0xfffff291
     36c:	5f776172 	svcpl	0x00776172
     370:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     374:	625f7265 	subsvs	r7, pc, #1342177286	; 0x50000006
     378:	6b63616c 	blvs	18d8930 <startup-0x1e7276d0>
     37c:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     380:	73007468 	movwvc	r7, #1128	; 0x468
     384:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
     388:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     38c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     390:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     394:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
     398:	5f79616c 	svcpl	0x0079616c
     39c:	69746e75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     3a0:	65745f6c 	ldrbvs	r5, [r4, #-3948]!	; 0xfffff094
     3a4:	74007478 	strvc	r7, [r0], #-1144	; 0xfffffb88
     3a8:	4d706d65 	ldclmi	13, cr6, [r0, #-404]!	; 0xfffffe6c
     3ac:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     3b0:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
     3b4:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     3b8:	63616c42 	cmnvs	r1, #16896	; 0x4200
     3bc:	7270006b 	rsbsvc	r0, r0, #107	; 0x6b
     3c0:	5f737365 	svcpl	0x00737365
     3c4:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     3c8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     3cc:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
     3d0:	665f7469 	ldrbvs	r7, [pc], -r9, ror #8
     3d4:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
     3d8:	696e6100 	stmdbvs	lr!, {r8, sp, lr}^
     3dc:	6974616d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     3e0:	735f6e6f 	cmpvc	pc, #1776	; 0x6f0
     3e4:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     3e8:	696e6100 	stmdbvs	lr!, {r8, sp, lr}^
     3ec:	6974616d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     3f0:	635f6e6f 	cmpvs	pc, #1776	; 0x6f0
     3f4:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     3f8:	6d007265 	sfmvs	f7, 4, [r0, #-404]	; 0xfffffe6c
     3fc:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     400:	624f7265 	subvs	r7, pc, #1342177286	; 0x50000006
     404:	6973006a 	ldmdbvs	r3!, {r1, r3, r5, r6}^
     408:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
     40c:	74006570 	strvc	r6, [r0], #-1392	; 0xfffffa90
     410:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     414:	6172675f 	cmnvs	r2, pc, asr r7
     418:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     41c:	68007374 	stmdavs	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
     420:	00726961 	rsbseq	r6, r2, r1, ror #18
     424:	6d61476e 	stclvs	7, cr4, [r1, #-440]!	; 0xfffffe48
     428:	6a624f65 	bvs	18941c4 <startup-0x1e76be3c>
     42c:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
     430:	65727000 	ldrbvs	r7, [r2, #-0]!
     434:	6c5f7373 	mrrcvs	3, 7, r7, pc, cr3	; <UNPREDICTABLE>
     438:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     43c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     440:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
     444:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
     448:	7265676f 	rsbvc	r6, r5, #29097984	; 0x1bc0000
     44c:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     450:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     454:	72700034 	rsbsvc	r0, r0, #52	; 0x34
     458:	49737365 	ldmdbmi	r3!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
     45c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     460:	616d6900 	cmnvs	sp, r0, lsl #18
     464:	00736567 	rsbseq	r6, r3, r7, ror #10
     468:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     46c:	65745f74 	ldrbvs	r5, [r4, #-3956]!	; 0xfffff08c
     470:	63007478 	movwvs	r7, #1144	; 0x478
     474:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
     478:	665f746e 	ldrbvs	r7, [pc], -lr, ror #8
     47c:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
     480:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     484:	694c656c 	stmdbvs	ip, {r2, r3, r5, r6, r8, sl, sp, lr}^
     488:	00746867 	rsbseq	r6, r4, r7, ror #16
     48c:	706d6574 	rsbvc	r6, sp, r4, ror r5
     490:	73657250 	cmnvc	r5, #80, 4
     494:	61724773 	cmnvs	r2, r3, ror r7
     498:	6f6d0079 	svcvs	0x006d0079
     49c:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     4a0:	696f5072 	stmdbvs	pc!, {r1, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
     4a4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     4a8:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     4ac:	72705374 	rsbsvc	r5, r0, #116, 6	; 0xd0000001
     4b0:	73657469 	cmnvc	r5, #1761607680	; 0x69000000
     4b4:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     4b8:	73614370 	cmnvc	r1, #112, 6	; 0xc0000001
     4bc:	47656c74 			; <UNDEFINED> instruction: 0x47656c74
     4c0:	00796172 	rsbseq	r6, r9, r2, ror r1
     4c4:	706d6574 	rsbvc	r6, sp, r4, ror r5
     4c8:	6c746954 			; <UNDEFINED> instruction: 0x6c746954
     4cc:	616c4265 	cmnvs	ip, r5, ror #4
     4d0:	75006b63 	strvc	r6, [r0, #-2915]	; 0xfffff49d
     4d4:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     4d8:	2064656e 	rsbcs	r6, r4, lr, ror #10
     4dc:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
     4e0:	61726400 	cmnvs	r2, r0, lsl #8
     4e4:	75625f77 	strbvc	r5, [r2, #-3959]!	; 0xfffff089
     4e8:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     4ec:	616c625f 	cmnvs	ip, pc, asr r2
     4f0:	675f6b63 	ldrbvs	r6, [pc, -r3, ror #22]
     4f4:	00796172 	rsbseq	r6, r9, r2, ror r1
     4f8:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
     4fc:	5f726574 	svcpl	0x00726574
     500:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     504:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     508:	63007374 	movwvs	r7, #884	; 0x374
     50c:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
     510:	6c625f65 	stclvs	15, cr5, [r2], #-404	; 0xfffffe6c
     514:	5f6b6361 	svcpl	0x006b6361
     518:	73746962 	cmnvc	r4, #1605632	; 0x188000
     51c:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     520:	624f656c 	subvs	r6, pc, #108, 10	; 0x1b000000
     524:	3a43006a 	bcc	10c06d4 <startup-0x1ef3f92c>
     528:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     52c:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 478 <startup-0x1ffffb88>
     530:	616c706f 	cmnvs	ip, pc, rrx
     534:	61726f62 	cmnvs	r2, r2, ror #30
     538:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     53c:	442f7265 	strtmi	r7, [pc], #-613	; 544 <startup-0x1ffffabc>
     540:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     544:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     548:	2f432f68 	svccs	0x00432f68
     54c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     550:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
     554:	61670063 	cmnvs	r7, r3, rrx
     558:	624f656d 	subvs	r6, pc, #457179136	; 0x1b400000
     55c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     560:	61630073 	smcvs	12291	; 0x3003
     564:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     568:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     56c:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     570:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     574:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     578:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     57c:	7247656c 	subvc	r6, r7, #108, 10	; 0x1b000000
     580:	44007961 	strmi	r7, [r0], #-2401	; 0xfffff69f
     584:	625f5049 	subsvs	r5, pc, #73	; 0x49
     588:	656e7275 	strbvs	r7, [lr, #-629]!	; 0xfffffd8b
     58c:	75630064 	strbvc	r0, [r3, #-100]!	; 0xffffff9c
     590:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     594:	63735f74 	cmnvs	r3, #116, 30	; 0x1d0
     598:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
     59c:	73696400 	cmnvc	r9, #0, 8
     5a0:	636e6174 	cmnvs	lr, #116, 2
     5a4:	6c705f65 	ldclvs	15, cr5, [r0], #-404	; 0xfffffe6c
     5a8:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
     5ac:	7269665f 	rsbvc	r6, r9, #99614720	; 0x5f00000
     5b0:	65740065 	ldrbvs	r0, [r4, #-101]!	; 0xffffff9b
     5b4:	7250706d 	subsvc	r7, r0, #109	; 0x6d
     5b8:	42737365 	rsbsmi	r7, r3, #-1811939327	; 0x94000001
     5bc:	6b63616c 	blvs	18d8b74 <startup-0x1e72748c>
     5c0:	5f676200 	svcpl	0x00676200
     5c4:	73746962 	cmnvc	r4, #1605632	; 0x188000
     5c8:	616c6200 	cmnvs	ip, r0, lsl #4
     5cc:	6d496b63 	vstrvs	d22, [r9, #-396]	; 0xfffffe74
     5d0:	00656761 	rsbeq	r6, r5, r1, ror #14
     5d4:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
     5d8:	5f726574 	svcpl	0x00726574
     5dc:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     5e0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     5e4:	61630073 	smcvs	12291	; 0x3003
     5e8:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     5ec:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     5f0:	69660065 	stmdbvs	r6!, {r0, r2, r5, r6}^
     5f4:	00747372 	rsbseq	r7, r4, r2, ror r3
     5f8:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     5fc:	616d4965 	cmnvs	sp, r5, ror #18
     600:	00736567 	rsbseq	r6, r3, r7, ror #10
     604:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
     608:	735f6d6f 	cmpvc	pc, #7104	; 0x1bc0
     60c:	00646565 	rsbeq	r6, r4, r5, ror #10
     610:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     614:	69660032 	stmdbvs	r6!, {r1, r4, r5}^
     618:	00336572 	eorseq	r6, r3, r2, ror r5
     61c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     620:	72700034 	rsbsvc	r0, r0, #52	; 0x34
     624:	42737365 	rsbsmi	r7, r3, #-1811939327	; 0x94000001
     628:	6b63616c 	blvs	18d8be0 <startup-0x1e727420>
     62c:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     630:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     634:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     638:	50790065 	rsbspl	r0, r9, r5, rrx
     63c:	6c00736f 	stcvs	3, cr7, [r0], {111}	; 0x6f
     640:	5f747361 	svcpl	0x00747361
     644:	6d696c63 	stclvs	12, cr6, [r9, #-396]!	; 0xfffffe74
     648:	61765f62 	cmnvs	r6, r2, ror #30
     64c:	0065756c 	rsbeq	r7, r5, ip, ror #10
     650:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     654:	74003231 	strvc	r3, [r0], #-561	; 0xfffffdcf
     658:	54706d65 	ldrbtpl	r6, [r0], #-3429	; 0xfffff29b
     65c:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     660:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     664:	70750074 	rsbsvc	r0, r5, r4, ror r0
     668:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
     66c:	5f6f6e00 	svcpl	0x006f6e00
     670:	00504944 	subseq	r4, r0, r4, asr #18
     674:	73657270 	cmnvc	r5, #112, 4
     678:	616d4973 	smcvs	54419	; 0xd493
     67c:	00736567 	rsbseq	r6, r3, r7, ror #10
     680:	6c707865 	ldclvs	8, cr7, [r0], #-404	; 0xfffffe6c
     684:	6e69646f 	cdpvs	4, 6, cr6, cr9, cr15, {3}
     688:	65740067 	ldrbvs	r0, [r4, #-103]!	; 0xffffff99
     68c:	6954706d 	ldmdbvs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
     690:	47656c74 			; <UNDEFINED> instruction: 0x47656c74
     694:	00796172 	rsbseq	r6, r9, r2, ror r1
     698:	6f6c5374 	svcvs	0x006c5374
     69c:	78655477 	stmdavc	r5!, {r0, r1, r2, r4, r5, r6, sl, ip, lr}^
     6a0:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
     6a4:	5f38746e 	svcpl	0x0038746e
     6a8:	69660074 	stmdbvs	r6!, {r2, r4, r5, r6}^
     6ac:	00736572 	rsbseq	r6, r3, r2, ror r5
     6b0:	6b636162 	blvs	18d8c40 <startup-0x1e7273c0>
     6b4:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     6b8:	694c7265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp, lr}^
     6bc:	00746867 	rsbseq	r6, r4, r7, ror #16
     6c0:	6b636162 	blvs	18d8c50 <startup-0x1e7273b0>
     6c4:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     6c8:	72477265 	subvc	r7, r7, #1342177286	; 0x50000006
     6cc:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     6d0:	50706d65 	rsbspl	r6, r0, r5, ror #26
     6d4:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     6d8:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     6dc:	47740074 			; <UNDEFINED> instruction: 0x47740074
     6e0:	4f656d61 	svcmi	0x00656d61
     6e4:	63656a62 	cmnvs	r5, #401408	; 0x62000
     6e8:	50780074 	rsbspl	r0, r8, r4, ror r0
     6ec:	6300736f 	movwvs	r7, #879	; 0x36f
     6f0:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
     6f4:	616c4265 	cmnvs	ip, r5, ror #4
     6f8:	67006b63 	strvs	r6, [r0, -r3, ror #22]
     6fc:	5f656d61 	svcpl	0x00656d61
     700:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
     704:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
     708:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
     70c:	31747865 	cmncc	r4, r5, ror #16
     710:	65740030 	ldrbvs	r0, [r4, #-48]!	; 0xffffffd0
     714:	31317478 	teqcc	r1, r8, ror r4
     718:	69656800 	stmdbvs	r5!, {fp, sp, lr}^
     71c:	00746867 	rsbseq	r6, r4, r7, ror #16
     720:	6e69616d 	powvsez	f6, f1, #5.0
     724:	65727000 	ldrbvs	r7, [r2, #-0]!
     728:	694c7373 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}^
     72c:	00746867 	rsbseq	r6, r4, r7, ror #16
     730:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
     734:	49726574 	ldmdbmi	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     738:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     73c:	61670073 	smcvs	28675	; 0x7003
     740:	624f656d 	subvs	r6, pc, #457179136	; 0x1b400000
     744:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     748:	61647055 	qdsubvs	r7, r5, r4
     74c:	43006574 	movwmi	r6, #1396	; 0x574
     750:	6f6d2f3a 	svcvs	0x006d2f3a
     754:	2f632f70 	svccs	0x00632f70
     758:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     75c:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     760:	6f697461 	svcvs	0x00697461
     764:	2f72656e 	svccs	0x0072656e
     768:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     76c:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     770:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     774:	6d61672f 	stclvs	7, cr6, [r1, #-188]!	; 0xffffff44
     778:	6a626f65 	bvs	189c514 <startup-0x1e763aec>
     77c:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
     780:	68740063 	ldmdavs	r4!, {r0, r1, r5, r6}^
     784:	66007369 	strvs	r7, [r0], -r9, ror #6
     788:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
     78c:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     790:	72696600 	rsbvc	r6, r9, #0, 12
     794:	72473165 	subvc	r3, r7, #1073741849	; 0x40000019
     798:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     79c:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
     7a0:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
     7a4:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     7a8:	72696600 	rsbvc	r6, r9, #0, 12
     7ac:	72473365 	subvc	r3, r7, #-1811939327	; 0x94000001
     7b0:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     7b4:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
     7b8:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
     7bc:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     7c0:	72696600 	rsbvc	r6, r9, #0, 12
     7c4:	616c4265 	cmnvs	ip, r5, ror #4
     7c8:	74006b63 	strvc	r6, [r0], #-2915	; 0xfffff49d
     7cc:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
     7d0:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     7d4:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     7d8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     7dc:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     7e0:	616c4265 	cmnvs	ip, r5, ror #4
     7e4:	66006b63 	strvs	r6, [r0], -r3, ror #22
     7e8:	31657269 	cmncc	r5, r9, ror #4
     7ec:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     7f0:	69660074 	stmdbvs	r6!, {r2, r4, r5, r6}^
     7f4:	4c346572 	cfldr32mi	mvfx6, [r4], #-456	; 0xfffffe38
     7f8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     7fc:	72696600 	rsbvc	r6, r9, #0, 12
     800:	675f3265 	ldrbvs	r3, [pc, -r5, ror #4]
     804:	5f796172 	svcpl	0x00796172
     808:	73746962 	cmnvc	r4, #1605632	; 0x188000
     80c:	72696600 	rsbvc	r6, r9, #0, 12
     810:	6c5f3465 	cfldrdvs	mvd3, [pc], {101}	; 0x65
     814:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     818:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     81c:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     820:	4c336572 	cfldr32mi	mvfx6, [r3], #-456	; 0xfffffe38
     824:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     828:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     82c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     830:	6f700031 	svcvs	0x00700031
     834:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     838:	66003372 			; <UNDEFINED> instruction: 0x66003372
     83c:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
     840:	6172675f 	cmnvs	r2, pc, asr r7
     844:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     848:	66007374 			; <UNDEFINED> instruction: 0x66007374
     84c:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     850:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     854:	6f700065 	svcvs	0x00700065
     858:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     85c:	66003072 			; <UNDEFINED> instruction: 0x66003072
     860:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
     864:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     868:	6f700074 	svcvs	0x00700074
     86c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     870:	74003272 	strvc	r3, [r0], #-626	; 0xfffffd8e
     874:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
     878:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
     87c:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     880:	72696600 	rsbvc	r6, r9, #0, 12
     884:	675f3165 	ldrbvs	r3, [pc, -r5, ror #2]
     888:	5f796172 	svcpl	0x00796172
     88c:	73746962 	cmnvc	r4, #1605632	; 0x188000
     890:	72696600 	rsbvc	r6, r9, #0, 12
     894:	694c3265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp}^
     898:	00746867 	rsbseq	r6, r4, r7, ror #16
     89c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     8a0:	696c5f31 	stmdbvs	ip!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     8a4:	5f746867 	svcpl	0x00746867
     8a8:	73746962 	cmnvc	r4, #1605632	; 0x188000
     8ac:	72696600 	rsbvc	r6, r9, #0, 12
     8b0:	6c5f3265 	lfmvs	f3, 2, [pc], {101}	; 0x65
     8b4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     8b8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     8bc:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     8c0:	624f6572 	subvs	r6, pc, #478150656	; 0x1c800000
     8c4:	6966006a 	stmdbvs	r6!, {r1, r3, r5, r6}^
     8c8:	47326572 			; <UNDEFINED> instruction: 0x47326572
     8cc:	00796172 	rsbseq	r6, r9, r2, ror r1
     8d0:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     8d4:	72675f34 	rsbvc	r5, r7, #52, 30	; 0xd0
     8d8:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     8dc:	00737469 	rsbseq	r7, r3, r9, ror #8
     8e0:	706d6574 	rsbvc	r6, sp, r4, ror r5
     8e4:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     8e8:	67694c33 			; <UNDEFINED> instruction: 0x67694c33
     8ec:	66007468 	strvs	r7, [r0], -r8, ror #8
     8f0:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
     8f4:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     8f8:	65740065 	ldrbvs	r0, [r4, #-101]!	; 0xffffff9b
     8fc:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     900:	4c316572 	cfldr32mi	mvfx6, [r1], #-456	; 0xfffffe38
     904:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     908:	72696600 	rsbvc	r6, r9, #0, 12
     90c:	69547473 	ldmdbvs	r4, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     910:	6900656d 	stmdbvs	r0, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
     914:	5f74696e 	svcpl	0x0074696e
     918:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     91c:	72696600 	rsbvc	r6, r9, #0, 12
     920:	6c5f3565 	cfldr64vs	mvdx3, [pc], {101}	; 0x65
     924:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     928:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     92c:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     930:	6d496572 	cfstr64vs	mvdx6, [r9, #-456]	; 0xfffffe38
     934:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     938:	72696600 	rsbvc	r6, r9, #0, 12
     93c:	6d493165 	stfvse	f3, [r9, #-404]	; 0xfffffe6c
     940:	00656761 	rsbeq	r6, r5, r1, ror #14
     944:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     948:	61724734 	cmnvs	r2, r4, lsr r7
     94c:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     950:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     954:	47316572 			; <UNDEFINED> instruction: 0x47316572
     958:	00796172 	rsbseq	r6, r9, r2, ror r1
     95c:	706d6574 	rsbvc	r6, sp, r4, ror r5
     960:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     964:	67694c34 			; <UNDEFINED> instruction: 0x67694c34
     968:	66007468 	strvs	r7, [r0], -r8, ror #8
     96c:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     970:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     974:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     978:	00737469 	rsbseq	r7, r3, r9, ror #8
     97c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     980:	616d4935 	cmnvs	sp, r5, lsr r9
     984:	66006567 	strvs	r6, [r0], -r7, ror #10
     988:	5f657269 	svcpl	0x00657269
     98c:	63616c62 	cmnvs	r1, #25088	; 0x6200
     990:	5f325f6b 	svcpl	0x00325f6b
     994:	73746962 	cmnvc	r4, #1605632	; 0x188000
     998:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     99c:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     9a0:	694c3265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp}^
     9a4:	00746867 	rsbseq	r6, r4, r7, ror #16
     9a8:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     9ac:	616d4932 	cmnvs	sp, r2, lsr r9
     9b0:	74006567 	strvc	r6, [r0], #-1383	; 0xfffffa99
     9b4:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
     9b8:	35657269 	strbcc	r7, [r5, #-617]!	; 0xfffffd97
     9bc:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     9c0:	3a430074 	bcc	10c0b98 <startup-0x1ef3f468>
     9c4:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     9c8:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 914 <startup-0x1ffff6ec>
     9cc:	616c706f 	cmnvs	ip, pc, rrx
     9d0:	61726f62 	cmnvs	r2, r2, ror #30
     9d4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     9d8:	442f7265 	strtmi	r7, [pc], #-613	; 9e0 <startup-0x1ffff620>
     9dc:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     9e0:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     9e4:	2f432f68 	svccs	0x00432f68
     9e8:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     9ec:	6600632e 	strvs	r6, [r0], -lr, lsr #6
     9f0:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     9f4:	6172675f 	cmnvs	r2, pc, asr r7
     9f8:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     9fc:	6c007374 	stcvs	3, cr7, [r0], {116}	; 0x74
     a00:	52747361 	rsbspl	r7, r4, #-2080374783	; 0x84000001
     a04:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     a08:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
     a0c:	616c0065 	cmnvs	ip, r5, rrx
     a10:	754a7473 	strbvc	r7, [sl, #-1139]	; 0xfffffb8d
     a14:	6156706d 	cmpvs	r6, sp, rrx
     a18:	0065756c 	rsbeq	r7, r5, ip, ror #10
     a1c:	65705379 	ldrbvs	r5, [r0, #-889]!	; 0xfffffc87
     a20:	78006465 	stmdavc	r0, {r0, r2, r5, r6, sl, sp, lr}
     a24:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     a28:	616c0064 	cmnvs	ip, r4, rrx
     a2c:	654c7473 	strbvs	r7, [ip, #-1139]	; 0xfffffb8d
     a30:	61567466 	cmpvs	r6, r6, ror #8
     a34:	0065756c 	rsbeq	r7, r5, ip, ror #10
     a38:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     a3c:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     a40:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     a44:	6f62616c 	svcvs	0x0062616c
     a48:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     a4c:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     a50:	5049442f 	subpl	r4, r9, pc, lsr #8
     a54:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     a58:	2f686374 	svccs	0x00686374
     a5c:	6c702f43 	ldclvs	15, cr2, [r0], #-268	; 0xfffffef4
     a60:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
     a64:	7000632e 	andvc	r6, r0, lr, lsr #6
     a68:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
     a6c:	73655272 	cmnvc	r5, #536870919	; 0x20000007
     a70:	70007465 	andvc	r7, r0, r5, ror #8
     a74:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
     a78:	64705572 	ldrbtvs	r5, [r0], #-1394	; 0xfffffa8e
     a7c:	00657461 	rsbeq	r7, r5, r1, ror #8
     a80:	706d6574 	rsbvc	r6, sp, r4, ror r5
     a84:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     a88:	67694c32 			; <UNDEFINED> instruction: 0x67694c32
     a8c:	62007468 	andvs	r7, r0, #104, 8	; 0x68000000
     a90:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     a94:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     a98:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     a9c:	00737469 	rsbseq	r7, r3, r9, ror #8
     aa0:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     aa4:	616d4934 	cmnvs	sp, r4, lsr r9
     aa8:	62006567 	andvs	r6, r0, #432013312	; 0x19c00000
     aac:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     ab0:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     ab4:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     ab8:	00737469 	rsbseq	r7, r3, r9, ror #8
     abc:	706d6574 	rsbvc	r6, sp, r4, ror r5
     ac0:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     ac4:	67694c35 			; <UNDEFINED> instruction: 0x67694c35
     ac8:	70007468 	andvc	r7, r0, r8, ror #8
     acc:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     ad0:	34317265 	ldrtcc	r7, [r1], #-613	; 0xfffffd9b
     ad4:	72696200 	rsbvc	r6, r9, #0, 4
     ad8:	6c5f3564 	cfldr64vs	mvdx3, [pc], {100}	; 0x64
     adc:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     ae0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     ae4:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
     ae8:	4c336472 	cfldrsmi	mvf6, [r3], #-456	; 0xfffffe38
     aec:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     af0:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     af4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     af8:	62003931 	andvs	r3, r0, #802816	; 0xc4000
     afc:	31647269 	cmncc	r4, r9, ror #4
     b00:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     b04:	69620074 	stmdbvs	r2!, {r2, r4, r5, r6}^
     b08:	42336472 	eorsmi	r6, r3, #1912602624	; 0x72000000
     b0c:	6b63616c 	blvs	18d90c4 <startup-0x1e726f3c>
     b10:	72696200 	rsbvc	r6, r9, #0, 4
     b14:	72473164 	subvc	r3, r7, #100, 2
     b18:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     b1c:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     b20:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     b24:	63616c42 	cmnvs	r1, #16896	; 0x4200
     b28:	6962006b 	stmdbvs	r2!, {r0, r1, r3, r5, r6}^
     b2c:	42356472 	eorsmi	r6, r5, #1912602624	; 0x72000000
     b30:	6b63616c 	blvs	18d90e8 <startup-0x1e726f18>
     b34:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     b38:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     b3c:	70003032 	andvc	r3, r0, r2, lsr r0
     b40:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     b44:	31327265 	teqcc	r2, r5, ror #4
     b48:	72696200 	rsbvc	r6, r9, #0, 4
     b4c:	72473464 	subvc	r3, r7, #100, 8	; 0x64000000
     b50:	62007961 	andvs	r7, r0, #1589248	; 0x184000
     b54:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     b58:	63616c42 	cmnvs	r1, #16896	; 0x4200
     b5c:	6f70006b 	svcvs	0x0070006b
     b60:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     b64:	00343272 	eorseq	r3, r4, r2, ror r2
     b68:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     b6c:	31726574 	cmncc	r2, r4, ror r5
     b70:	65740036 	ldrbvs	r0, [r4, #-54]!	; 0xffffffca
     b74:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     b78:	47326472 			; <UNDEFINED> instruction: 0x47326472
     b7c:	00796172 	rsbseq	r6, r9, r2, ror r1
     b80:	706d6574 	rsbvc	r6, sp, r4, ror r5
     b84:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     b88:	61724734 	cmnvs	r2, r4, lsr r7
     b8c:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     b90:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     b94:	694c6472 	stmdbvs	ip, {r1, r4, r5, r6, sl, sp, lr}^
     b98:	00746867 	rsbseq	r6, r4, r7, ror #16
     b9c:	706d6574 	rsbvc	r6, sp, r4, ror r5
     ba0:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     ba4:	61724735 	cmnvs	r2, r5, lsr r7
     ba8:	6f700079 	svcvs	0x00700079
     bac:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     bb0:	00333172 	eorseq	r3, r3, r2, ror r1
     bb4:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     bb8:	6c625f32 	stclvs	15, cr5, [r2], #-200	; 0xffffff38
     bbc:	5f6b6361 	svcpl	0x006b6361
     bc0:	73746962 	cmnvc	r4, #1605632	; 0x188000
     bc4:	72696200 	rsbvc	r6, r9, #0, 4
     bc8:	675f3164 	ldrbvs	r3, [pc, -r4, ror #2]
     bcc:	5f796172 	svcpl	0x00796172
     bd0:	73746962 	cmnvc	r4, #1605632	; 0x188000
     bd4:	72696200 	rsbvc	r6, r9, #0, 4
     bd8:	6d493664 	stclvs	6, cr3, [r9, #-400]	; 0xfffffe70
     bdc:	00656761 	rsbeq	r6, r5, r1, ror #14
     be0:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     be4:	6c625f33 	stclvs	15, cr5, [r2], #-204	; 0xffffff34
     be8:	5f6b6361 	svcpl	0x006b6361
     bec:	73746962 	cmnvc	r4, #1605632	; 0x188000
     bf0:	72696200 	rsbvc	r6, r9, #0, 4
     bf4:	625f3464 	subsvs	r3, pc, #100, 8	; 0x64000000
     bf8:	6b63616c 	blvs	18d91b0 <startup-0x1e726e50>
     bfc:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     c00:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
     c04:	49336472 	ldmdbmi	r3!, {r1, r4, r5, r6, sl, sp, lr}
     c08:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     c0c:	72696200 	rsbvc	r6, r9, #0, 4
     c10:	6c5f3164 	ldfvse	f3, [pc], {100}	; 0x64
     c14:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     c18:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     c1c:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
     c20:	5f356472 	svcpl	0x00356472
     c24:	63616c62 	cmnvs	r1, #25088	; 0x6200
     c28:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     c2c:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     c30:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     c34:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     c38:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     c3c:	69620074 	stmdbvs	r2!, {r2, r4, r5, r6}^
     c40:	5f356472 	svcpl	0x00356472
     c44:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     c48:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     c4c:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
     c50:	47326472 			; <UNDEFINED> instruction: 0x47326472
     c54:	00796172 	rsbseq	r6, r9, r2, ror r1
     c58:	706d6574 	rsbvc	r6, sp, r4, ror r5
     c5c:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     c60:	67694c34 			; <UNDEFINED> instruction: 0x67694c34
     c64:	74007468 	strvc	r7, [r0], #-1128	; 0xfffffb98
     c68:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     c6c:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     c70:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     c74:	72696200 	rsbvc	r6, r9, #0, 4
     c78:	675f3464 	ldrbvs	r3, [pc, -r4, ror #8]
     c7c:	5f796172 	svcpl	0x00796172
     c80:	73746962 	cmnvc	r4, #1605632	; 0x188000
     c84:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     c88:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     c8c:	62003332 	andvs	r3, r0, #-939524096	; 0xc8000000
     c90:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     c94:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     c98:	69620074 	stmdbvs	r2!, {r2, r4, r5, r6}^
     c9c:	6d496472 	cfstrdvs	mvd6, [r9, #-456]	; 0xfffffe38
     ca0:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     ca4:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     ca8:	72694270 	rsbvc	r4, r9, #112, 4
     cac:	6c423564 	cfstr64vs	mvdx3, [r2], {100}	; 0x64
     cb0:	006b6361 	rsbeq	r6, fp, r1, ror #6
     cb4:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     cb8:	616c4234 	cmnvs	ip, r4, lsr r2
     cbc:	74006b63 	strvc	r6, [r0], #-2915	; 0xfffff49d
     cc0:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     cc4:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     cc8:	63616c42 	cmnvs	r1, #16896	; 0x4200
     ccc:	6962006b 	stmdbvs	r2!, {r0, r1, r3, r5, r6}^
     cd0:	5f336472 	svcpl	0x00336472
     cd4:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     cd8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     cdc:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
     ce0:	42316472 	eorsmi	r6, r1, #1912602624	; 0x72000000
     ce4:	6b63616c 	blvs	18d929c <startup-0x1e726d64>
     ce8:	72696200 	rsbvc	r6, r9, #0, 4
     cec:	694c3264 	stmdbvs	ip, {r2, r5, r6, r9, ip, sp}^
     cf0:	00746867 	rsbseq	r6, r4, r7, ror #16
     cf4:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     cf8:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     cfc:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     d00:	6f62616c 	svcvs	0x0062616c
     d04:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     d08:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     d0c:	5049442f 	subpl	r4, r9, pc, lsr #8
     d10:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     d14:	2f686374 	svccs	0x00686374
     d18:	69622f43 	stmdbvs	r2!, {r0, r1, r6, r8, r9, sl, fp, sp}^
     d1c:	632e6472 			; <UNDEFINED> instruction: 0x632e6472
     d20:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     d24:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     d28:	62006472 	andvs	r6, r0, #1912602624	; 0x72000000
     d2c:	4f647269 	svcmi	0x00647269
     d30:	62006a62 	andvs	r6, r0, #401408	; 0x62000
     d34:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     d38:	6172675f 	cmnvs	r2, pc, asr r7
     d3c:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     d40:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     d44:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     d48:	47647269 	strbmi	r7, [r4, -r9, ror #4]!
     d4c:	00796172 	rsbseq	r6, r9, r2, ror r1
     d50:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     d54:	61724735 	cmnvs	r2, r5, lsr r7
     d58:	69620079 	stmdbvs	r2!, {r0, r3, r4, r5, r6}^
     d5c:	5f316472 	svcpl	0x00316472
     d60:	63616c62 	cmnvs	r1, #25088	; 0x6200
     d64:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     d68:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     d6c:	31647269 	cmncc	r4, r9, ror #4
     d70:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     d74:	69620065 	stmdbvs	r2!, {r0, r2, r5, r6}^
     d78:	47336472 			; <UNDEFINED> instruction: 0x47336472
     d7c:	00796172 	rsbseq	r6, r9, r2, ror r1
     d80:	616e6966 	cmnvs	lr, r6, ror #18
     d84:	696f506c 	stmdbvs	pc!, {r2, r3, r5, r6, ip, lr}^	; <UNPREDICTABLE>
     d88:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     d8c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     d90:	72694270 	rsbvc	r4, r9, #112, 4
     d94:	616c4264 	cmnvs	ip, r4, ror #4
     d98:	74006b63 	strvc	r6, [r0], #-2915	; 0xfffff49d
     d9c:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     da0:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     da4:	63616c42 	cmnvs	r1, #16896	; 0x4200
     da8:	6f70006b 	svcvs	0x0070006b
     dac:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     db0:	00313172 	eorseq	r3, r1, r2, ror r1
     db4:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     db8:	31726574 	cmncc	r2, r4, ror r5
     dbc:	69620032 	stmdbvs	r2!, {r1, r4, r5}^
     dc0:	4c346472 	cfldrsmi	mvf6, [r4], #-456	; 0xfffffe38
     dc4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     dc8:	72696200 	rsbvc	r6, r9, #0, 4
     dcc:	6d493564 	cfstr64vs	mvdx3, [r9, #-400]	; 0xfffffe70
     dd0:	00656761 	rsbeq	r6, r5, r1, ror #14
     dd4:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     dd8:	31726574 	cmncc	r2, r4, ror r5
     ddc:	6f700035 	svcvs	0x00700035
     de0:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     de4:	00373172 	eorseq	r3, r7, r2, ror r1
     de8:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     dec:	31726574 	cmncc	r2, r4, ror r5
     df0:	69620038 	stmdbvs	r2!, {r3, r4, r5}^
     df4:	49326472 	ldmdbmi	r2!, {r1, r4, r5, r6, sl, sp, lr}
     df8:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     dfc:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     e00:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     e04:	62003232 	andvs	r3, r0, #536870915	; 0x20000003
     e08:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     e0c:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     e10:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     e14:	00737469 	rsbseq	r7, r3, r9, ror #8
     e18:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     e1c:	6c423268 	sfmvs	f3, 2, [r2], {104}	; 0x68
     e20:	006b6361 	rsbeq	r6, fp, r1, ror #6
     e24:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     e28:	72473168 	subvc	r3, r7, #104, 2
     e2c:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     e30:	57706d65 	ldrbpl	r6, [r0, -r5, ror #26]!
     e34:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     e38:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     e3c:	69770074 	ldmdbvs	r7!, {r2, r4, r5, r6}^
     e40:	4f686374 	svcmi	0x00686374
     e44:	77006a62 	strvc	r6, [r0, -r2, ror #20]
     e48:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     e4c:	6c625f31 	stclvs	15, cr5, [r2], #-196	; 0xffffff3c
     e50:	5f6b6361 	svcpl	0x006b6361
     e54:	73746962 	cmnvc	r4, #1605632	; 0x188000
     e58:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     e5c:	74695770 	strbtvc	r5, [r9], #-1904	; 0xfffff890
     e60:	4c336863 	ldcmi	8, cr6, [r3], #-396	; 0xfffffe74
     e64:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     e68:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     e6c:	74695770 	strbtvc	r5, [r9], #-1904	; 0xfffff890
     e70:	4c326863 	ldcmi	8, cr6, [r2], #-396	; 0xfffffe74
     e74:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     e78:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     e7c:	4c316863 	ldcmi	8, cr6, [r1], #-396	; 0xfffffe74
     e80:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     e84:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     e88:	74695770 	strbtvc	r5, [r9], #-1904	; 0xfffff890
     e8c:	42326863 	eorsmi	r6, r2, #6488064	; 0x630000
     e90:	6b63616c 	blvs	18d9448 <startup-0x1e726bb8>
     e94:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     e98:	5f326863 	svcpl	0x00326863
     e9c:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     ea0:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     ea4:	77007374 	smlsdxvc	r0, r4, r3, r7
     ea8:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     eac:	616d4933 	cmnvs	sp, r3, lsr r9
     eb0:	77006567 	strvc	r6, [r0, -r7, ror #10]
     eb4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     eb8:	616c4233 	cmnvs	ip, r3, lsr r2
     ebc:	77006b63 	strvc	r6, [r0, -r3, ror #22]
     ec0:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     ec4:	72675f33 	rsbvc	r5, r7, #51, 30	; 0xcc
     ec8:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     ecc:	00737469 	rsbseq	r7, r3, r9, ror #8
     ed0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     ed4:	7469775f 	strbtvc	r7, [r9], #-1887	; 0xfffff8a1
     ed8:	74006863 	strvc	r6, [r0], #-2147	; 0xfffff79d
     edc:	57706d65 	ldrbpl	r6, [r0, -r5, ror #26]!
     ee0:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     ee4:	63616c42 	cmnvs	r1, #16896	; 0x4200
     ee8:	6977006b 	ldmdbvs	r7!, {r0, r1, r3, r5, r6}^
     eec:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     ef0:	616c625f 	cmnvs	ip, pc, asr r2
     ef4:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
     ef8:	00737469 	rsbseq	r7, r3, r9, ror #8
     efc:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     f00:	6c5f3368 	mrrcvs	3, 6, r3, pc, cr8	; <UNPREDICTABLE>
     f04:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     f08:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     f0c:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
     f10:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     f14:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     f18:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     f1c:	47326863 	ldrmi	r6, [r2, -r3, ror #16]!
     f20:	00796172 	rsbseq	r6, r9, r2, ror r1
     f24:	706d6574 	rsbvc	r6, sp, r4, ror r5
     f28:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     f2c:	61724768 	cmnvs	r2, r8, ror #14
     f30:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     f34:	6957706d 	ldmdbvs	r7, {r0, r2, r3, r5, r6, ip, sp, lr}^
     f38:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     f3c:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     f40:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     f44:	74695770 	strbtvc	r5, [r9], #-1904	; 0xfffff890
     f48:	42336863 	eorsmi	r6, r3, #6488064	; 0x630000
     f4c:	6b63616c 	blvs	18d9504 <startup-0x1e726afc>
     f50:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     f54:	5f316863 	svcpl	0x00316863
     f58:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     f5c:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     f60:	77007374 	smlsdxvc	r0, r4, r3, r7
     f64:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     f68:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
     f6c:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     f70:	00737469 	rsbseq	r7, r3, r9, ror #8
     f74:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     f78:	6d493468 	cfstrdvs	mvd3, [r9, #-416]	; 0xfffffe60
     f7c:	00656761 	rsbeq	r6, r5, r1, ror #14
     f80:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     f84:	694c3268 	stmdbvs	ip, {r3, r5, r6, r9, ip, sp}^
     f88:	00746867 	rsbseq	r6, r4, r7, ror #16
     f8c:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     f90:	6d493168 	stfvse	f3, [r9, #-416]	; 0xfffffe60
     f94:	00656761 	rsbeq	r6, r5, r1, ror #14
     f98:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     f9c:	6c423168 	stfvse	f3, [r2], {104}	; 0x68
     fa0:	006b6361 	rsbeq	r6, fp, r1, ror #6
     fa4:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     fa8:	694c3368 	stmdbvs	ip, {r3, r5, r6, r8, r9, ip, sp}^
     fac:	00746867 	rsbseq	r6, r4, r7, ror #16
     fb0:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     fb4:	616d4968 	cmnvs	sp, r8, ror #18
     fb8:	00736567 	rsbseq	r6, r3, r7, ror #10
     fbc:	706d6574 	rsbvc	r6, sp, r4, ror r5
     fc0:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     fc4:	72473368 	subvc	r3, r7, #104, 6	; 0xa0000001
     fc8:	43007961 	movwmi	r7, #2401	; 0x961
     fcc:	6f6d2f3a 	svcvs	0x006d2f3a
     fd0:	2f632f70 	svccs	0x00632f70
     fd4:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     fd8:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     fdc:	6f697461 	svcvs	0x00697461
     fe0:	2f72656e 	svccs	0x0072656e
     fe4:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     fe8:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     fec:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     ff0:	7469772f 	strbtvc	r7, [r9], #-1839	; 0xfffff8d1
     ff4:	632e6863 			; <UNDEFINED> instruction: 0x632e6863
     ff8:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     ffc:	5f316863 	svcpl	0x00316863
    1000:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
    1004:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1008:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
    100c:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
    1010:	616c625f 	cmnvs	ip, pc, asr r2
    1014:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
    1018:	00737469 	rsbseq	r7, r3, r9, ror #8
    101c:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
    1020:	6d493268 	sfmvs	f3, 2, [r9, #-416]	; 0xfffffe60
    1024:	00656761 	rsbeq	r6, r5, r1, ror #14
    1028:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
    102c:	6f697463 	svcvs	0x00697463
    1030:	4944006e 	stmdbmi	r4, {r1, r2, r3, r5, r6}^
    1034:	6d493450 	cfstrdvs	mvd3, [r9, #-320]	; 0xfffffec0
    1038:	00656761 	rsbeq	r6, r5, r1, ror #14
    103c:	31504944 	cmpcc	r0, r4, asr #18
    1040:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    1044:	65740065 	ldrbvs	r0, [r4, #-101]!	; 0xffffff9b
    1048:	4944706d 	stmdbmi	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
    104c:	694c3250 	stmdbvs	ip, {r4, r6, r9, ip, sp}^
    1050:	00746867 	rsbseq	r6, r4, r7, ror #16
    1054:	75527369 	ldrbvc	r7, [r2, #-873]	; 0xfffffc97
    1058:	6e696e6e 	cdpvs	14, 6, cr6, cr9, cr14, {3}
    105c:	65740067 	ldrbvs	r0, [r4, #-103]!	; 0xffffff99
    1060:	4944706d 	stmdbmi	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
    1064:	6c423350 	mcrrvs	3, 5, r3, r2, cr0
    1068:	006b6361 	rsbeq	r6, fp, r1, ror #6
    106c:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1070:	32504944 	subscc	r4, r0, #68, 18	; 0x110000
    1074:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    1078:	50494400 	subpl	r4, r9, r0, lsl #8
    107c:	61724731 	cmnvs	r2, r1, lsr r7
    1080:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
    1084:	4944706d 	stmdbmi	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
    1088:	67694c50 			; <UNDEFINED> instruction: 0x67694c50
    108c:	44007468 	strmi	r7, [r0], #-1128	; 0xfffffb98
    1090:	6d495049 	stclvs	0, cr5, [r9, #-292]	; 0xfffffedc
    1094:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    1098:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
    109c:	49445f74 	stmdbmi	r4, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    10a0:	65740050 	ldrbvs	r0, [r4, #-80]!	; 0xffffffb0
    10a4:	4944706d 	stmdbmi	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
    10a8:	61724750 	cmnvs	r2, r0, asr r7
    10ac:	49440079 	stmdbmi	r4, {r0, r3, r4, r5, r6}^
    10b0:	6c423150 	stfvse	f3, [r2], {80}	; 0x50
    10b4:	006b6361 	rsbeq	r6, fp, r1, ror #6
    10b8:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
    10bc:	6f507265 	svcvs	0x00507265
    10c0:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    10c4:	00596e6f 	subseq	r6, r9, pc, ror #28
    10c8:	706d6574 	rsbvc	r6, sp, r4, ror r5
    10cc:	33504944 	cmpcc	r0, #68, 18	; 0x110000
    10d0:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    10d4:	50494400 	subpl	r4, r9, r0, lsl #8
    10d8:	616d4933 	cmnvs	sp, r3, lsr r9
    10dc:	74006567 	strvc	r6, [r0], #-1383	; 0xfffffa99
    10e0:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
    10e4:	4c335049 	ldcmi	0, cr5, [r3], #-292	; 0xfffffedc
    10e8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    10ec:	50494400 	subpl	r4, r9, r0, lsl #8
    10f0:	61647055 	qdsubvs	r7, r5, r4
    10f4:	74006574 	strvc	r6, [r0], #-1396	; 0xfffffa8c
    10f8:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
    10fc:	42325049 	eorsmi	r5, r2, #73	; 0x49
    1100:	6b63616c 	blvs	18d96b8 <startup-0x1e726948>
    1104:	50494400 	subpl	r4, r9, r0, lsl #8
    1108:	616d4932 	cmnvs	sp, r2, lsr r9
    110c:	43006567 	movwmi	r6, #1383	; 0x567
    1110:	6f6d2f3a 	svcvs	0x006d2f3a
    1114:	2f632f70 	svccs	0x00632f70
    1118:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    111c:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    1120:	6f697461 	svcvs	0x00697461
    1124:	2f72656e 	svccs	0x0072656e
    1128:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    112c:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    1130:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    1134:	5049442f 	subpl	r4, r9, pc, lsr #8
    1138:	4400632e 	strmi	r6, [r0], #-814	; 0xfffffcd2
    113c:	4c315049 	ldcmi	0, cr5, [r1], #-292	; 0xfffffedc
    1140:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1144:	50494400 	subpl	r4, r9, r0, lsl #8
    1148:	006a624f 	rsbeq	r6, sl, pc, asr #4
    114c:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1150:	42504944 	subsmi	r4, r0, #68, 18	; 0x110000
    1154:	6b63616c 	blvs	18d970c <startup-0x1e7268f4>
    1158:	616c7000 	cmnvs	ip, r0
    115c:	50726579 	rsbspl	r6, r2, r9, ror r5
    1160:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
    1164:	586e6f69 	stmdapl	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1168:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    116c:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
    1170:	6f507265 	svcvs	0x00507265
    1174:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    1178:	66006e6f 	strvs	r6, [r0], -pc, ror #28
    117c:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    1180:	72675f31 	rsbvc	r5, r7, #49, 30	; 0xc4
    1184:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
    1188:	00737469 	rsbseq	r7, r3, r9, ror #8
    118c:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    1190:	6c423165 	stfvse	f3, [r2], {101}	; 0x65
    1194:	006b6361 	rsbeq	r6, fp, r1, ror #6
    1198:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    119c:	675f3265 	ldrbvs	r3, [pc, -r5, ror #4]
    11a0:	5f796172 	svcpl	0x00796172
    11a4:	73746962 	cmnvc	r4, #1605632	; 0x188000
    11a8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    11ac:	616c4670 	smcvs	50272	; 0xc460
    11b0:	694c656d 	stmdbvs	ip, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
    11b4:	00746867 	rsbseq	r6, r4, r7, ror #16
    11b8:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    11bc:	6c5f3265 	lfmvs	f3, 2, [pc], {101}	; 0x65
    11c0:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    11c4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    11c8:	6c660073 	stclvs	0, cr0, [r6], #-460	; 0xfffffe34
    11cc:	33656d61 	cmncc	r5, #6208	; 0x1840
    11d0:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    11d4:	6c660074 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30
    11d8:	32656d61 	rsbcc	r6, r5, #6208	; 0x1840
    11dc:	63616c42 	cmnvs	r1, #16896	; 0x4200
    11e0:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
    11e4:	6c46706d 	mcrrvs	0, 6, r7, r6, cr13
    11e8:	32656d61 	rsbcc	r6, r5, #6208	; 0x1840
    11ec:	63616c42 	cmnvs	r1, #16896	; 0x4200
    11f0:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
    11f4:	6c46706d 	mcrrvs	0, 6, r7, r6, cr13
    11f8:	32656d61 	rsbcc	r6, r5, #6208	; 0x1840
    11fc:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    1200:	6c660074 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30
    1204:	33656d61 	cmncc	r5, #6208	; 0x1840
    1208:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
    120c:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
    1210:	00737469 	rsbseq	r7, r3, r9, ror #8
    1214:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    1218:	6a624f65 	bvs	1894fb4 <startup-0x1e76b04c>
    121c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1220:	616c4670 	smcvs	50272	; 0xc460
    1224:	4732656d 	ldrmi	r6, [r2, -sp, ror #10]!
    1228:	00796172 	rsbseq	r6, r9, r2, ror r1
    122c:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    1230:	6d493465 	cfstrdvs	mvd3, [r9, #-404]	; 0xfffffe6c
    1234:	00656761 	rsbeq	r6, r5, r1, ror #14
    1238:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    123c:	6c5f3165 	ldfvse	f3, [pc], {101}	; 0x65
    1240:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1244:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1248:	6c660073 	stclvs	0, cr0, [r6], #-460	; 0xfffffe34
    124c:	31656d61 	cmncc	r5, r1, ror #26
    1250:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    1254:	6c660065 	stclvs	0, cr0, [r6], #-404	; 0xfffffe6c
    1258:	33656d61 	cmncc	r5, #6208	; 0x1840
    125c:	63616c42 	cmnvs	r1, #16896	; 0x4200
    1260:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
    1264:	6c46706d 	mcrrvs	0, 6, r7, r6, cr13
    1268:	33656d61 	cmncc	r5, #6208	; 0x1840
    126c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    1270:	6c660074 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30
    1274:	33656d61 	cmncc	r5, #6208	; 0x1840
    1278:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    127c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1280:	616c4670 	smcvs	50272	; 0xc460
    1284:	4234656d 	eorsmi	r6, r4, #457179136	; 0x1b400000
    1288:	6b63616c 	blvs	18d9840 <startup-0x1e7267c0>
    128c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1290:	616c4670 	smcvs	50272	; 0xc460
    1294:	4c34656d 	cfldr32mi	mvfx6, [r4], #-436	; 0xfffffe4c
    1298:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    129c:	616c6600 	cmnvs	ip, r0, lsl #12
    12a0:	4933656d 	ldmdbmi	r3!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
    12a4:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    12a8:	616c6600 	cmnvs	ip, r0, lsl #12
    12ac:	5f33656d 	svcpl	0x0033656d
    12b0:	63616c62 	cmnvs	r1, #25088	; 0x6200
    12b4:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    12b8:	66007374 			; <UNDEFINED> instruction: 0x66007374
    12bc:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    12c0:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    12c4:	5f746867 	svcpl	0x00746867
    12c8:	73746962 	cmnvc	r4, #1605632	; 0x188000
    12cc:	616c6600 	cmnvs	ip, r0, lsl #12
    12d0:	5f33656d 	svcpl	0x0033656d
    12d4:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
    12d8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    12dc:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    12e0:	6c46706d 	mcrrvs	0, 6, r7, r6, cr13
    12e4:	34656d61 	strbtcc	r6, [r5], #-3425	; 0xfffff29f
    12e8:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    12ec:	616c6600 	cmnvs	ip, r0, lsl #12
    12f0:	4932656d 	ldmdbmi	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
    12f4:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    12f8:	616c6600 	cmnvs	ip, r0, lsl #12
    12fc:	4731656d 	ldrmi	r6, [r1, -sp, ror #10]!
    1300:	00796172 	rsbseq	r6, r9, r2, ror r1
    1304:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    1308:	625f3265 	subsvs	r3, pc, #1342177286	; 0x50000006
    130c:	6b63616c 	blvs	18d98c4 <startup-0x1e72673c>
    1310:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1314:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    1318:	6c46706d 	mcrrvs	0, 6, r7, r6, cr13
    131c:	42656d61 	rsbmi	r6, r5, #6208	; 0x1840
    1320:	6b63616c 	blvs	18d98d8 <startup-0x1e726728>
    1324:	616c6600 	cmnvs	ip, r0, lsl #12
    1328:	5f34656d 	svcpl	0x0034656d
    132c:	63616c62 	cmnvs	r1, #25088	; 0x6200
    1330:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1334:	66007374 			; <UNDEFINED> instruction: 0x66007374
    1338:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    133c:	61724734 	cmnvs	r2, r4, lsr r7
    1340:	6c660079 	stclvs	0, cr0, [r6], #-484	; 0xfffffe1c
    1344:	31656d61 	cmncc	r5, r1, ror #26
    1348:	616c625f 	cmnvs	ip, pc, asr r2
    134c:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
    1350:	00737469 	rsbseq	r7, r3, r9, ror #8
    1354:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    1358:	694c3165 	stmdbvs	ip, {r0, r2, r5, r6, r8, ip, sp}^
    135c:	00746867 	rsbseq	r6, r4, r7, ror #16
    1360:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    1364:	675f3465 	ldrbvs	r3, [pc, -r5, ror #8]
    1368:	5f796172 	svcpl	0x00796172
    136c:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1370:	616c6600 	cmnvs	ip, r0, lsl #12
    1374:	4c34656d 	cfldr32mi	mvfx6, [r4], #-436	; 0xfffffe4c
    1378:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    137c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1380:	616c4670 	smcvs	50272	; 0xc460
    1384:	4733656d 	ldrmi	r6, [r3, -sp, ror #10]!
    1388:	00796172 	rsbseq	r6, r9, r2, ror r1
    138c:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    1390:	616d4965 	cmnvs	sp, r5, ror #18
    1394:	00736567 	rsbseq	r6, r3, r7, ror #10
    1398:	706d6574 	rsbvc	r6, sp, r4, ror r5
    139c:	6d616c46 	stclvs	12, cr6, [r1, #-280]!	; 0xfffffee8
    13a0:	6c423365 	mcrrvs	3, 6, r3, r2, cr5
    13a4:	006b6361 	rsbeq	r6, fp, r1, ror #6
    13a8:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    13ac:	72473265 	subvc	r3, r7, #1342177286	; 0x50000006
    13b0:	43007961 	movwmi	r7, #2401	; 0x961
    13b4:	6f6d2f3a 	svcvs	0x006d2f3a
    13b8:	2f632f70 	svccs	0x00632f70
    13bc:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    13c0:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    13c4:	6f697461 	svcvs	0x00697461
    13c8:	2f72656e 	svccs	0x0072656e
    13cc:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    13d0:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    13d4:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    13d8:	616c662f 	cmnvs	ip, pc, lsr #12
    13dc:	632e656d 			; <UNDEFINED> instruction: 0x632e656d
    13e0:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    13e4:	616c4670 	smcvs	50272	; 0xc460
    13e8:	7247656d 	subvc	r6, r7, #457179136	; 0x1b400000
    13ec:	66007961 	strvs	r7, [r0], -r1, ror #18
    13f0:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    13f4:	616c4234 	cmnvs	ip, r4, lsr r2
    13f8:	66006b63 	strvs	r6, [r0], -r3, ror #22
    13fc:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    1400:	67694c32 			; <UNDEFINED> instruction: 0x67694c32
    1404:	62007468 	andvs	r7, r0, #104, 8	; 0x68000000
    1408:	386d6f6f 	stmdacc	sp!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    140c:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    1410:	6f620065 	svcvs	0x00620065
    1414:	49316d6f 	ldmdbmi	r1!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    1418:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    141c:	6f6f6200 	svcvs	0x006f6200
    1420:	6d49396d 	vstrvs.16	s7, [r9, #-218]	; 0xffffff26	; <UNPREDICTABLE>
    1424:	00656761 	rsbeq	r6, r5, r1, ror #14
    1428:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 12a8 <startup-0x1fffed58>
    142c:	616d4935 	cmnvs	sp, r5, lsr r9
    1430:	74006567 	strvc	r6, [r0], #-1383	; 0xfffffa99
    1434:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
    1438:	366d6f6f 	strbtcc	r6, [sp], -pc, ror #30
    143c:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    1440:	6f6f6200 	svcvs	0x006f6200
    1444:	675f316d 	ldrbvs	r3, [pc, -sp, ror #2]
    1448:	5f796172 	svcpl	0x00796172
    144c:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1450:	6f6f6200 	svcvs	0x006f6200
    1454:	6a624f6d 	bvs	1895210 <startup-0x1e76adf0>
    1458:	2f3a4300 	svccs	0x003a4300
    145c:	2f706f6d 	svccs	0x00706f6d
    1460:	6f4d2f63 	svcvs	0x004d2f63
    1464:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    1468:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    146c:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    1470:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1474:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    1478:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    147c:	622f432f 	eorvs	r4, pc, #-1140850688	; 0xbc000000
    1480:	2e6d6f6f 	cdpcs	15, 6, cr6, cr13, cr15, {3}
    1484:	65740063 	ldrbvs	r0, [r4, #-99]!	; 0xffffff9d
    1488:	6f42706d 	svcvs	0x0042706d
    148c:	47356d6f 	ldrmi	r6, [r5, -pc, ror #26]!
    1490:	00796172 	rsbseq	r6, r9, r2, ror r1
    1494:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 1314 <startup-0x1fffecec>
    1498:	61724731 	cmnvs	r2, r1, lsr r7
    149c:	6f700079 	svcvs	0x00700079
    14a0:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    14a4:	00373272 	eorseq	r3, r7, r2, ror r2
    14a8:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 1328 <startup-0x1fffecd8>
    14ac:	616d4936 	cmnvs	sp, r6, lsr r9
    14b0:	62006567 	andvs	r6, r0, #432013312	; 0x19c00000
    14b4:	346d6f6f 	strbtcc	r6, [sp], #-3951	; 0xfffff091
    14b8:	616c625f 	cmnvs	ip, pc, asr r2
    14bc:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
    14c0:	00737469 	rsbseq	r7, r3, r9, ror #8
    14c4:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 1344 <startup-0x1fffecbc>
    14c8:	72675f35 	rsbvc	r5, r7, #53, 30	; 0xd4
    14cc:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
    14d0:	00737469 	rsbseq	r7, r3, r9, ror #8
    14d4:	706d6574 	rsbvc	r6, sp, r4, ror r5
    14d8:	6d6f6f42 	stclvs	15, cr6, [pc, #-264]!	; 13d8 <startup-0x1fffec28>
    14dc:	67694c36 			; <UNDEFINED> instruction: 0x67694c36
    14e0:	62007468 	andvs	r7, r0, #104, 8	; 0x68000000
    14e4:	336d6f6f 	cmncc	sp, #444	; 0x1bc
    14e8:	63616c42 	cmnvs	r1, #16896	; 0x4200
    14ec:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
    14f0:	6f42706d 	svcvs	0x0042706d
    14f4:	4c336d6f 	ldcmi	13, cr6, [r3], #-444	; 0xfffffe44
    14f8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    14fc:	6f6f6200 	svcvs	0x006f6200
    1500:	694c346d 	stmdbvs	ip, {r0, r2, r3, r5, r6, sl, ip, sp}^
    1504:	00746867 	rsbseq	r6, r4, r7, ror #16
    1508:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 1388 <startup-0x1fffec78>
    150c:	6d493231 	sfmvs	f3, 2, [r9, #-196]	; 0xffffff3c
    1510:	00656761 	rsbeq	r6, r5, r1, ror #14
    1514:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 1394 <startup-0x1fffec6c>
    1518:	6d493531 	cfstr64vs	mvdx3, [r9, #-196]	; 0xffffff3c
    151c:	00656761 	rsbeq	r6, r5, r1, ror #14
    1520:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 13a0 <startup-0x1fffec60>
    1524:	67694c31 			; <UNDEFINED> instruction: 0x67694c31
    1528:	62007468 	andvs	r7, r0, #104, 8	; 0x68000000
    152c:	316d6f6f 	cmncc	sp, pc, ror #30
    1530:	616c625f 	cmnvs	ip, pc, asr r2
    1534:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
    1538:	00737469 	rsbseq	r7, r3, r9, ror #8
    153c:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 13bc <startup-0x1fffec44>
    1540:	616d4933 	cmnvs	sp, r3, lsr r9
    1544:	74006567 	strvc	r6, [r0], #-1383	; 0xfffffa99
    1548:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
    154c:	476d6f6f 	strbmi	r6, [sp, -pc, ror #30]!
    1550:	00796172 	rsbseq	r6, r9, r2, ror r1
    1554:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 13d4 <startup-0x1fffec2c>
    1558:	72675f34 	rsbvc	r5, r7, #52, 30	; 0xd0
    155c:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
    1560:	00737469 	rsbseq	r7, r3, r9, ror #8
    1564:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 13e4 <startup-0x1fffec1c>
    1568:	6c625f32 	stclvs	15, cr5, [r2], #-200	; 0xffffff38
    156c:	5f6b6361 	svcpl	0x006b6361
    1570:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1574:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1578:	6f6f4270 	svcvs	0x006f4270
    157c:	616c426d 	cmnvs	ip, sp, ror #4
    1580:	62006b63 	andvs	r6, r0, #101376	; 0x18c00
    1584:	356d6f6f 	strbcc	r6, [sp, #-3951]!	; 0xfffff091
    1588:	63616c42 	cmnvs	r1, #16896	; 0x4200
    158c:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
    1590:	6f42706d 	svcvs	0x0042706d
    1594:	42326d6f 	eorsmi	r6, r2, #7104	; 0x1bc0
    1598:	6b63616c 	blvs	18d9b50 <startup-0x1e7264b0>
    159c:	6f6f6200 	svcvs	0x006f6200
    15a0:	6c42326d 	sfmvs	f3, 2, [r2], {109}	; 0x6d
    15a4:	006b6361 	rsbeq	r6, fp, r1, ror #6
    15a8:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 1428 <startup-0x1fffebd8>
    15ac:	67694c36 			; <UNDEFINED> instruction: 0x67694c36
    15b0:	74007468 	strvc	r7, [r0], #-1128	; 0xfffffb98
    15b4:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
    15b8:	346d6f6f 	strbtcc	r6, [sp], #-3951	; 0xfffff091
    15bc:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    15c0:	6f6f6200 	svcvs	0x006f6200
    15c4:	675f336d 	ldrbvs	r3, [pc, -sp, ror #6]
    15c8:	5f796172 	svcpl	0x00796172
    15cc:	73746962 	cmnvc	r4, #1605632	; 0x188000
    15d0:	6f6f6200 	svcvs	0x006f6200
    15d4:	6c5f336d 	mrrcvs	3, 6, r3, pc, cr13	; <UNPREDICTABLE>
    15d8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    15dc:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    15e0:	6f700073 	svcvs	0x00700073
    15e4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    15e8:	00353272 	eorseq	r3, r5, r2, ror r2
    15ec:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 146c <startup-0x1fffeb94>
    15f0:	67694c33 			; <UNDEFINED> instruction: 0x67694c33
    15f4:	62007468 	andvs	r7, r0, #104, 8	; 0x68000000
    15f8:	366d6f6f 	strbtcc	r6, [sp], -pc, ror #30
    15fc:	6172675f 	cmnvs	r2, pc, asr r7
    1600:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1604:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
    1608:	356d6f6f 	strbcc	r6, [sp, #-3951]!	; 0xfffff091
    160c:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    1610:	6f6f6200 	svcvs	0x006f6200
    1614:	6c5f356d 	cfldr64vs	mvdx3, [pc], {109}	; 0x6d
    1618:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    161c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1620:	6f620073 	svcvs	0x00620073
    1624:	33316d6f 	teqcc	r1, #7104	; 0x1bc0
    1628:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    162c:	6f620065 	svcvs	0x00620065
    1630:	30316d6f 	eorscc	r6, r1, pc, ror #26
    1634:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    1638:	6f620065 	svcvs	0x00620065
    163c:	5f366d6f 	svcpl	0x00366d6f
    1640:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    1644:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1648:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
    164c:	376d6f6f 	strbcc	r6, [sp, -pc, ror #30]!
    1650:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    1654:	6f620065 	svcvs	0x00620065
    1658:	49346d6f 	ldmdbmi	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    165c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1660:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1664:	6f6f4270 	svcvs	0x006f4270
    1668:	7247326d 	subvc	r3, r7, #-805306362	; 0xd0000006
    166c:	70007961 	andvc	r7, r0, r1, ror #18
    1670:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
    1674:	36327265 	ldrtcc	r7, [r2], -r5, ror #4
    1678:	6f6f6200 	svcvs	0x006f6200
    167c:	7247326d 	subvc	r3, r7, #-805306362	; 0xd0000006
    1680:	62007961 	andvs	r7, r0, #1589248	; 0x184000
    1684:	496d6f6f 	stmdbmi	sp!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1688:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    168c:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    1690:	6f42706d 	svcvs	0x0042706d
    1694:	4c346d6f 	ldcmi	13, cr6, [r4], #-444	; 0xfffffe44
    1698:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    169c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    16a0:	6f6f4270 	svcvs	0x006f4270
    16a4:	6c42356d 	cfstr64vs	mvdx3, [r2], {109}	; 0x6d
    16a8:	006b6361 	rsbeq	r6, fp, r1, ror #6
    16ac:	706d6574 	rsbvc	r6, sp, r4, ror r5
    16b0:	6d6f6f42 	stclvs	15, cr6, [pc, #-264]!	; 15b0 <startup-0x1fffea50>
    16b4:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    16b8:	6f620074 	svcvs	0x00620074
    16bc:	4c356d6f 	ldcmi	13, cr6, [r5], #-444	; 0xfffffe44
    16c0:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    16c4:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    16c8:	6f6f4270 	svcvs	0x006f4270
    16cc:	694c326d 	stmdbvs	ip, {r0, r2, r3, r5, r6, r9, ip, sp}^
    16d0:	00746867 	rsbseq	r6, r4, r7, ror #16
    16d4:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 1554 <startup-0x1fffeaac>
    16d8:	616d4932 	cmnvs	sp, r2, lsr r9
    16dc:	62006567 	andvs	r6, r0, #432013312	; 0x19c00000
    16e0:	326d6f6f 	rsbcc	r6, sp, #444	; 0x1bc
    16e4:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    16e8:	6f620074 	svcvs	0x00620074
    16ec:	47346d6f 	ldrmi	r6, [r4, -pc, ror #26]!
    16f0:	00796172 	rsbseq	r6, r9, r2, ror r1
    16f4:	706d6574 	rsbvc	r6, sp, r4, ror r5
    16f8:	6d6f6f42 	stclvs	15, cr6, [pc, #-264]!	; 15f8 <startup-0x1fffea08>
    16fc:	616c4236 	cmnvs	ip, r6, lsr r2
    1700:	62006b63 	andvs	r6, r0, #101376	; 0x18c00
    1704:	336d6f6f 	cmncc	sp, #444	; 0x1bc
    1708:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    170c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1710:	6f6f4270 	svcvs	0x006f4270
    1714:	6c42336d 	mcrrvs	3, 6, r3, r2, cr13
    1718:	006b6361 	rsbeq	r6, fp, r1, ror #6
    171c:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 159c <startup-0x1fffea64>
    1720:	6c625f33 	stclvs	15, cr5, [r2], #-204	; 0xffffff34
    1724:	5f6b6361 	svcpl	0x006b6361
    1728:	73746962 	cmnvc	r4, #1605632	; 0x188000
    172c:	6f6f6200 	svcvs	0x006f6200
    1730:	6c42316d 	stfvse	f3, [r2], {109}	; 0x6d
    1734:	006b6361 	rsbeq	r6, fp, r1, ror #6
    1738:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 15b8 <startup-0x1fffea48>
    173c:	61724736 	cmnvs	r2, r6, lsr r7
    1740:	6f620079 	svcvs	0x00620079
    1744:	42366d6f 	eorsmi	r6, r6, #7104	; 0x1bc0
    1748:	6b63616c 	blvs	18d9d00 <startup-0x1e726300>
    174c:	6f6f6200 	svcvs	0x006f6200
    1750:	6c5f346d 	cfldrdvs	mvd3, [pc], {109}	; 0x6d
    1754:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1758:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    175c:	6f620073 	svcvs	0x00620073
    1760:	5f316d6f 	svcpl	0x00316d6f
    1764:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    1768:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    176c:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
    1770:	356d6f6f 	strbcc	r6, [sp, #-3951]!	; 0xfffff091
    1774:	616c625f 	cmnvs	ip, pc, asr r2
    1778:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
    177c:	00737469 	rsbseq	r7, r3, r9, ror #8
    1780:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 1600 <startup-0x1fffea00>
    1784:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    1788:	5f746867 	svcpl	0x00746867
    178c:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1790:	6f6f6200 	svcvs	0x006f6200
    1794:	625f366d 	subsvs	r3, pc, #114294784	; 0x6d00000
    1798:	6b63616c 	blvs	18d9d50 <startup-0x1e7262b0>
    179c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    17a0:	6f620073 	svcvs	0x00620073
    17a4:	42346d6f 	eorsmi	r6, r4, #7104	; 0x1bc0
    17a8:	6b63616c 	blvs	18d9d60 <startup-0x1e7262a0>
    17ac:	6f6f6200 	svcvs	0x006f6200
    17b0:	675f326d 	ldrbvs	r3, [pc, -sp, ror #4]
    17b4:	5f796172 	svcpl	0x00796172
    17b8:	73746962 	cmnvc	r4, #1605632	; 0x188000
    17bc:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    17c0:	6f6f4270 	svcvs	0x006f4270
    17c4:	694c356d 	stmdbvs	ip, {r0, r2, r3, r5, r6, r8, sl, ip, sp}^
    17c8:	00746867 	rsbseq	r6, r4, r7, ror #16
    17cc:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 164c <startup-0x1fffe9b4>
    17d0:	6d493431 	cfstrdvs	mvd3, [r9, #-196]	; 0xffffff3c
    17d4:	00656761 	rsbeq	r6, r5, r1, ror #14
    17d8:	706d6574 	rsbvc	r6, sp, r4, ror r5
    17dc:	6d6f6f42 	stclvs	15, cr6, [pc, #-264]!	; 16dc <startup-0x1fffe924>
    17e0:	61724733 	cmnvs	r2, r3, lsr r7
    17e4:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
    17e8:	6f42706d 	svcvs	0x0042706d
    17ec:	42346d6f 	eorsmi	r6, r4, #7104	; 0x1bc0
    17f0:	6b63616c 	blvs	18d9da8 <startup-0x1e726258>
    17f4:	6f6f6200 	svcvs	0x006f6200
    17f8:	4931316d 	ldmdbmi	r1!, {r0, r2, r3, r5, r6, r8, ip, sp}
    17fc:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1800:	67617000 	strbvs	r7, [r1, -r0]!
    1804:	72670065 	rsbvc	r0, r7, #101	; 0x65
    1808:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
    180c:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
    1810:	62006461 	andvs	r6, r0, #1627389952	; 0x61000000
    1814:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    1818:	69700072 	ldmdbvs	r0!, {r1, r4, r5, r6}^
    181c:	326c6578 	rsbcc	r6, ip, #120, 10	; 0x1e000000
    1820:	61726400 	cmnvs	r2, r0, lsl #8
    1824:	61675f77 	smcvs	30199	; 0x75f7
    1828:	6f5f656d 	svcvs	0x005f656d
    182c:	63656a62 	cmnvs	r5, #401408	; 0x62000
    1830:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
    1834:	5f79616c 	svcpl	0x0079616c
    1838:	7263696d 	rsbvc	r6, r3, #1785856	; 0x1b4000
    183c:	7267006f 	rsbvc	r0, r7, #111	; 0x6f
    1840:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
    1844:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
    1848:	5f657469 	svcpl	0x00657469
    184c:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
    1850:	00646e61 	rsbeq	r6, r4, r1, ror #28
    1854:	61656c63 	cmnvs	r5, r3, ror #24
    1858:	61625f72 	smcvs	9714	; 0x25f2
    185c:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
    1860:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1864:	78697000 	stmdavc	r9!, {ip, sp, lr}^
    1868:	67006c65 	strvs	r6, [r0, -r5, ror #24]
    186c:	006a624f 	rsbeq	r6, sl, pc, asr #4
    1870:	70617267 	rsbvc	r7, r1, r7, ror #4
    1874:	5f636968 	svcpl	0x00636968
    1878:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
    187c:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
    1880:	006e6565 	rsbeq	r6, lr, r5, ror #10
    1884:	616c6564 	cmnvs	ip, r4, ror #10
    1888:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    188c:	00696c6c 	rsbeq	r6, r9, ip, ror #24
    1890:	776f6873 			; <UNDEFINED> instruction: 0x776f6873
    1894:	6172665f 	cmnvs	r2, pc, asr r6
    1898:	6400656d 	strvs	r6, [r0], #-1389	; 0xfffffa93
    189c:	5f776172 	svcpl	0x00776172
    18a0:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
    18a4:	64006574 	strvs	r6, [r0], #-1396	; 0xfffffa8c
    18a8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    18ac:	3030355f 	eorscc	r3, r0, pc, asr r5
    18b0:	6700736e 	strvs	r7, [r0, -lr, ror #6]
    18b4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
    18b8:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
    18bc:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    18c0:	61726700 	cmnvs	r2, r0, lsl #14
    18c4:	61635379 	smcvs	13625	; 0x3539
    18c8:	6554656c 	ldrbvs	r6, [r4, #-1388]	; 0xfffffa94
    18cc:	67007473 	smlsdxvs	r0, r3, r4, r7
    18d0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
    18d4:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
    18d8:	5f6c7274 	svcpl	0x006c7274
    18dc:	5f746962 	svcpl	0x00746962
    18e0:	61656c63 	cmnvs	r5, r3, ror #24
    18e4:	3a430072 	bcc	10c1ab4 <startup-0x1ef3e54c>
    18e8:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
    18ec:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 1838 <startup-0x1fffe7c8>
    18f0:	616c706f 	cmnvs	ip, pc, rrx
    18f4:	61726f62 	cmnvs	r2, r2, ror #30
    18f8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    18fc:	442f7265 	strtmi	r7, [pc], #-613	; 1904 <startup-0x1fffe6fc>
    1900:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
    1904:	63746957 	cmnvs	r4, #1425408	; 0x15c000
    1908:	2f432f68 	svccs	0x00432f68
    190c:	70617267 	rsbvc	r7, r1, r7, ror #4
    1910:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
    1914:	6700632e 	strvs	r6, [r0, -lr, lsr #6]
    1918:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
    191c:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
    1920:	5f646165 	svcpl	0x00646165
    1924:	61746164 	cmnvs	r4, r4, ror #2
    1928:	6c6f6300 	stclvs	3, cr6, [pc], #-0	; 1930 <startup-0x1fffe6d0>
    192c:	7300726f 	movwvc	r7, #623	; 0x26f
    1930:	755f7465 	ldrbvc	r7, [pc, #-1125]	; 14d3 <startup-0x1fffeb2d>
    1934:	72645f70 	rsbvc	r5, r4, #112, 30	; 0x1c0
    1938:	625f7761 	subsvs	r7, pc, #25427968	; 0x1840000
    193c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    1940:	67007372 	smlsdxvs	r0, r2, r3, r7
    1944:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
    1948:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
    194c:	5f6c7274 	svcpl	0x006c7274
    1950:	5f746962 	svcpl	0x00746962
    1954:	00746573 	rsbseq	r6, r4, r3, ror r5
    1958:	616c6564 	cmnvs	ip, r4, ror #10
    195c:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
    1960:	00736e30 	rsbseq	r6, r3, r0, lsr lr
    1964:	6c6c6966 			; <UNDEFINED> instruction: 0x6c6c6966
    1968:	74636552 	strbtvc	r6, [r3], #-1362	; 0xfffffaae
    196c:	6c676e61 	stclvs	14, cr6, [r7], #-388	; 0xfffffe7c
    1970:	616d0065 	cmnvs	sp, r5, rrx
    1974:	66006b73 			; <UNDEFINED> instruction: 0x66006b73
    1978:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
    197c:	6e656c5f 	mcrvs	12, 3, r6, cr5, cr15, {2}
    1980:	00687467 	rsbeq	r7, r8, r7, ror #8
    1984:	70617267 	rsbvc	r7, r1, r7, ror #4
    1988:	5f636968 	svcpl	0x00636968
    198c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    1990:	61645f65 	cmnvs	r4, r5, ror #30
    1994:	62006174 	andvs	r6, r0, #116, 2
    1998:	00657479 	rsbeq	r7, r5, r9, ror r4
    199c:	74646977 	strbtvc	r6, [r4], #-2423	; 0xfffff689
    19a0:	6e695f68 	cdpvs	15, 6, cr5, cr9, cr8, {3}
    19a4:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
    19a8:	63007365 	movwvs	r7, #869	; 0x365
    19ac:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    19b0:	6c6c615f 	stfvse	f6, [ip], #-380	; 0xfffffe84
    19b4:	6361625f 	cmnvs	r1, #-268435451	; 0xf0000005
    19b8:	6675426b 	ldrbtvs	r4, [r5], -fp, ror #4
    19bc:	73726566 	cmnvc	r2, #427819008	; 0x19800000
    19c0:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
    19c4:	65527261 	ldrbvs	r7, [r2, #-609]	; 0xfffffd9f
    19c8:	6e617463 	cdpvs	4, 6, cr7, cr1, cr3, {3}
    19cc:	00656c67 	rsbeq	r6, r5, r7, ror #24
    19d0:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
    19d4:	65730078 	ldrbvs	r0, [r3, #-120]!	; 0xffffff88
    19d8:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    19dc:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    19e0:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 1818 <startup-0x1fffe7e8>
    19e4:	0072656c 	rsbseq	r6, r2, ip, ror #10
    19e8:	70617267 	rsbvc	r7, r1, r7, ror #4
    19ec:	5f636968 	svcpl	0x00636968
    19f0:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
    19f4:	6165725f 	cmnvs	r5, pc, asr r2
    19f8:	63007964 	movwvs	r7, #2404	; 0x964
    19fc:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1a00:	6968745f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
    1a04:	63614273 	cmnvs	r1, #805306375	; 0x30000007
    1a08:	6675426b 	ldrbtvs	r4, [r5], -fp, ror #4
    1a0c:	00726566 	rsbseq	r6, r2, r6, ror #10
    1a10:	70617267 	rsbvc	r7, r1, r7, ror #4
    1a14:	5f636968 	svcpl	0x00636968
    1a18:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    1a1c:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    1a20:	6700657a 	smlsdxvs	r0, sl, r5, r6
    1a24:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
    1a28:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
    1a2c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1a30:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
    1a34:	006e6565 	rsbeq	r6, lr, r5, ror #10
    1a38:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
    1a3c:	616d695f 	cmnvs	sp, pc, asr r9
    1a40:	43006567 	movwmi	r6, #1383	; 0x567
    1a44:	6f6d2f3a 	svcvs	0x006d2f3a
    1a48:	2f632f70 	svccs	0x00632f70
    1a4c:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    1a50:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    1a54:	6f697461 	svcvs	0x00697461
    1a58:	2f72656e 	svccs	0x0072656e
    1a5c:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    1a60:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    1a64:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    1a68:	616d692f 	cmnvs	sp, pc, lsr #18
    1a6c:	632e6567 			; <UNDEFINED> instruction: 0x632e6567
    1a70:	616f6c00 	cmnvs	pc, r0, lsl #24
    1a74:	70735f64 	rsbsvc	r5, r3, r4, ror #30
    1a78:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1a7c:	2f3a4300 	svccs	0x003a4300
    1a80:	2f706f6d 	svccs	0x00706f6d
    1a84:	6f4d2f63 	svcvs	0x004d2f63
    1a88:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    1a8c:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    1a90:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    1a94:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1a98:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    1a9c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1aa0:	732f432f 			; <UNDEFINED> instruction: 0x732f432f
    1aa4:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
    1aa8:	00632e65 	rsbeq	r2, r3, r5, ror #28
    1aac:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1ab0:	65730072 	ldrbvs	r0, [r3, #-114]!	; 0xffffff8e
    1ab4:	70755f74 	rsbsvc	r5, r5, r4, ror pc
    1ab8:	4c49445f 	cfstrdmi	mvd4, [r9], {95}	; 0x5f
    1abc:	72646f00 	rsbvc	r6, r4, #0, 30
    1ac0:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
    1ac4:	79546f00 	ldmdbvc	r4, {r8, r9, sl, fp, sp, lr}^
    1ac8:	00726570 	rsbseq	r6, r2, r0, ror r5
    1acc:	4f495047 	svcmi	0x00495047
    1ad0:	50755000 	rsbspl	r5, r5, r0
    1ad4:	69007264 	stmdbvs	r0, {r2, r5, r6, r9, ip, sp, lr}
    1ad8:	65527264 	ldrbvs	r7, [r2, #-612]	; 0xfffffd9c
    1adc:	76726573 			; <UNDEFINED> instruction: 0x76726573
    1ae0:	43006465 	movwmi	r6, #1125	; 0x465
    1ae4:	6f6d2f3a 	svcvs	0x006d2f3a
    1ae8:	2f632f70 	svccs	0x00632f70
    1aec:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    1af0:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    1af4:	6f697461 	svcvs	0x00697461
    1af8:	2f72656e 	svccs	0x0072656e
    1afc:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    1b00:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    1b04:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    1b08:	6970672f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}^
    1b0c:	00632e6f 	rsbeq	r2, r3, pc, ror #28
    1b10:	6552746f 	ldrbvs	r7, [r2, #-1135]	; 0xfffffb91
    1b14:	76726573 			; <UNDEFINED> instruction: 0x76726573
    1b18:	72006465 	andvc	r6, r0, #1694498816	; 0x65000000
    1b1c:	5f646165 	svcpl	0x00646165
    1b20:	5f4c4944 	svcpl	0x004c4944
    1b24:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
    1b28:	6f00656c 	svcvs	0x0000656c
    1b2c:	6f4c7264 	svcvs	0x004c7264
    1b30:	536f0077 	cmnpl	pc, #119	; 0x77
    1b34:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
    1b38:	64690072 	strbtvs	r0, [r9], #-114	; 0xffffff8e
    1b3c:	67694872 			; <UNDEFINED> instruction: 0x67694872
    1b40:	64690068 	strbtvs	r0, [r9], #-104	; 0xffffff98
    1b44:	776f4c72 			; <UNDEFINED> instruction: 0x776f4c72
    1b48:	72646f00 	rsbvc	r6, r4, #0, 30
    1b4c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1b50:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    1b54:	61657200 	cmnvs	r5, r0, lsl #4
    1b58:	49445f64 	stmdbmi	r4, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    1b5c:	6e69004c 	cdpvs	0, 6, cr0, cr9, cr12, {2}
    1b60:	615f7469 	cmpvs	pc, r9, ror #8
    1b64:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
    1b68:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    1b6c:	6c006e6f 	stcvs	14, cr6, [r0], {111}	; 0x6f
    1b70:	74696d69 	strbtvc	r6, [r9], #-3433	; 0xfffff297
    1b74:	73610032 	cmnvc	r1, #50	; 0x32
    1b78:	5f696963 	svcpl	0x00696963
    1b7c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1b80:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    1b84:	65730061 	ldrbvs	r0, [r3, #-97]!	; 0xffffff9f
    1b88:	70755f74 	rsbsvc	r5, r5, r4, ror pc
    1b8c:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
    1b90:	61006969 	tstvs	r0, r9, ror #18
    1b94:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1b98:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    1b9c:	6f630074 	svcvs	0x00630074
    1ba0:	6e6d756c 	cdpvs	5, 6, cr7, cr13, cr12, {3}
    1ba4:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
    1ba8:	615f7261 	cmpvs	pc, r1, ror #4
    1bac:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1bb0:	63736100 	cmnvs	r3, #0, 2
    1bb4:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
    1bb8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1bbc:	7261705f 	rsbvc	r7, r1, #95	; 0x5f
    1bc0:	73610074 	cmnvc	r1, #116	; 0x74
    1bc4:	5f696963 	svcpl	0x00696963
    1bc8:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1bcc:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    1bd0:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 1a08 <startup-0x1fffe5f8>
    1bd4:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1bd8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1bdc:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
    1be0:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
    1be4:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
    1be8:	61007465 	tstvs	r0, r5, ror #8
    1bec:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1bf0:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    1bf4:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
    1bf8:	7400646d 	strvc	r6, [r0], #-1133	; 0xfffffb93
    1bfc:	31747365 	cmncc	r4, r5, ror #6
    1c00:	73657400 	cmnvc	r5, #0, 8
    1c04:	61003274 	tstvs	r0, r4, ror r2
    1c08:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    1c0c:	61007373 	tstvs	r0, r3, ror r3
    1c10:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1c14:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    1c18:	645f6574 	ldrbvs	r6, [pc], #-1396	; 1c20 <startup-0x1fffe3e0>
    1c1c:	00617461 	rsbeq	r7, r1, r1, ror #8
    1c20:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1c24:	65745f69 	ldrbvs	r5, [r4, #-3945]!	; 0xfffff097
    1c28:	61007473 	tstvs	r0, r3, ror r4
    1c2c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1c30:	6165725f 	cmnvs	r5, pc, asr r2
    1c34:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xfffff09c
    1c38:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1c3c:	63736100 	cmnvs	r3, #0, 2
    1c40:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
    1c44:	5f6c7274 	svcpl	0x006c7274
    1c48:	5f746962 	svcpl	0x00746962
    1c4c:	61656c63 	cmnvs	r5, r3, ror #24
    1c50:	73610072 	cmnvc	r1, #114	; 0x72
    1c54:	5f696963 	svcpl	0x00696963
    1c58:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    1c5c:	73610065 	cmnvc	r1, #101	; 0x65
    1c60:	5f696963 	svcpl	0x00696963
    1c64:	6f546f67 	svcvs	0x00546f67
    1c68:	61005958 	tstvs	r0, r8, asr r9
    1c6c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1c70:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    1c74:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
    1c78:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    1c7c:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
    1c80:	73610072 	cmnvc	r1, #114	; 0x72
    1c84:	5f696963 	svcpl	0x00696963
    1c88:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    1c8c:	68635f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    1c90:	6c007261 	sfmvs	f7, 4, [r0], {97}	; 0x61
    1c94:	74696d69 	strbtvc	r6, [r9], #-3433	; 0xfffff297
    1c98:	3a430031 	bcc	10c1d64 <startup-0x1ef3e29c>
    1c9c:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
    1ca0:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 1bec <startup-0x1fffe414>
    1ca4:	616c706f 	cmnvs	ip, pc, rrx
    1ca8:	61726f62 	cmnvs	r2, r2, ror #30
    1cac:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1cb0:	442f7265 	strtmi	r7, [pc], #-613	; 1cb8 <startup-0x1fffe348>
    1cb4:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
    1cb8:	63746957 	cmnvs	r4, #1425408	; 0x15c000
    1cbc:	2f432f68 	svccs	0x00432f68
    1cc0:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1cc4:	69645f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1cc8:	616c7073 	smcvs	50947	; 0xc703
    1ccc:	00632e79 	rsbeq	r2, r3, r9, ror lr
    1cd0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    1cd4:	6f6c735f 	svcvs	0x006c735f
    1cd8:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
    1cdc:	6c007478 	cfstrsvs	mvf7, [r0], {120}	; 0x78
    1ce0:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
    1ce4:	666f5f68 	strbtvs	r5, [pc], -r8, ror #30
    1ce8:	776f725f 			; <UNDEFINED> instruction: 0x776f725f
    1cec:	3a430031 	bcc	10c1db8 <startup-0x1ef3e248>
    1cf0:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
    1cf4:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 1c40 <startup-0x1fffe3c0>
    1cf8:	616c706f 	cmnvs	ip, pc, rrx
    1cfc:	61726f62 	cmnvs	r2, r2, ror #30
    1d00:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1d04:	442f7265 	strtmi	r7, [pc], #-613	; 1d0c <startup-0x1fffe2f4>
    1d08:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
    1d0c:	63746957 	cmnvs	r4, #1425408	; 0x15c000
    1d10:	2f432f68 	svccs	0x00432f68
    1d14:	776f6c73 			; <UNDEFINED> instruction: 0x776f6c73
    1d18:	7865745f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
    1d1c:	00632e74 	rsbeq	r2, r3, r4, ror lr
    1d20:	6f646e69 	svcvs	0x00646e69
    1d24:	4973726f 	ldmdbmi	r3!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    1d28:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1d2c:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1d30:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1d34:	63616c42 	cmnvs	r1, #16896	; 0x4200
    1d38:	6e69006b 	cdpvs	0, 6, cr0, cr9, cr11, {3}
    1d3c:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1d40:	616d4973 	smcvs	54419	; 0xd493
    1d44:	00736567 	rsbseq	r6, r3, r7, ror #10
    1d48:	6f646e69 	svcvs	0x00646e69
    1d4c:	5f73726f 	svcpl	0x0073726f
    1d50:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    1d54:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1d58:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
    1d5c:	49706d65 	ldmdbmi	r0!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    1d60:	6f6f646e 	svcvs	0x006f646e
    1d64:	72477372 	subvc	r7, r7, #-939524095	; 0xc8000001
    1d68:	69007961 	stmdbvs	r0, {r0, r5, r6, r8, fp, ip, sp, lr}
    1d6c:	6f6f646e 	svcvs	0x006f646e
    1d70:	675f7372 			; <UNDEFINED> instruction: 0x675f7372
    1d74:	5f796172 	svcpl	0x00796172
    1d78:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1d7c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1d80:	646e4970 	strbtvs	r4, [lr], #-2416	; 0xfffff690
    1d84:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1d88:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    1d8c:	6e690074 	mcrvs	0, 3, r0, cr9, cr4, {3}
    1d90:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1d94:	67694c73 			; <UNDEFINED> instruction: 0x67694c73
    1d98:	43007468 	movwmi	r7, #1128	; 0x468
    1d9c:	6f6d2f3a 	svcvs	0x006d2f3a
    1da0:	2f632f70 	svccs	0x00632f70
    1da4:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    1da8:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    1dac:	6f697461 	svcvs	0x00697461
    1db0:	2f72656e 	svccs	0x0072656e
    1db4:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    1db8:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    1dbc:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    1dc0:	646e692f 	strbtvs	r6, [lr], #-2351	; 0xfffff6d1
    1dc4:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1dc8:	6900632e 	stmdbvs	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
    1dcc:	6f6f646e 	svcvs	0x006f646e
    1dd0:	625f7372 	subsvs	r7, pc, #-939524095	; 0xc8000001
    1dd4:	6b63616c 	blvs	18da38c <startup-0x1e725c74>
    1dd8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1ddc:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    1de0:	6e49706d 	cdpvs	0, 4, cr7, cr9, cr13, {3}
    1de4:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1de8:	616c4273 	smcvs	50211	; 0xc423
    1dec:	69006b63 	stmdbvs	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    1df0:	5f74696e 	svcpl	0x0074696e
    1df4:	6f646e69 	svcvs	0x00646e69
    1df8:	0073726f 	rsbseq	r7, r3, pc, ror #4
    1dfc:	6f646e69 	svcvs	0x00646e69
    1e00:	4f73726f 	svcmi	0x0073726f
    1e04:	69006a62 	stmdbvs	r0, {r1, r5, r6, r9, fp, sp, lr}
    1e08:	6f6f646e 	svcvs	0x006f646e
    1e0c:	72477372 	subvc	r7, r7, #-939524095	; 0xc8000001
    1e10:	69007961 	stmdbvs	r0, {r0, r5, r6, r8, fp, ip, sp, lr}
    1e14:	6f6f646e 	svcvs	0x006f646e
    1e18:	4c327372 	ldcmi	3, cr7, [r2], #-456	; 0xfffffe38
    1e1c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1e20:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1e24:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1e28:	6c625f32 	stclvs	15, cr5, [r2], #-200	; 0xffffff38
    1e2c:	5f6b6361 	svcpl	0x006b6361
    1e30:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1e34:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1e38:	646e4970 	strbtvs	r4, [lr], #-2416	; 0xfffff690
    1e3c:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1e40:	67694c32 			; <UNDEFINED> instruction: 0x67694c32
    1e44:	69007468 	stmdbvs	r0, {r3, r5, r6, sl, ip, sp, lr}
    1e48:	6f6f646e 	svcvs	0x006f646e
    1e4c:	47327372 			; <UNDEFINED> instruction: 0x47327372
    1e50:	00796172 	rsbseq	r6, r9, r2, ror r1
    1e54:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    1e58:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    1e5c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    1e60:	6f62616c 	svcvs	0x0062616c
    1e64:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1e68:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    1e6c:	5049442f 	subpl	r4, r9, pc, lsr #8
    1e70:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    1e74:	2f686374 	svccs	0x00686374
    1e78:	6e692f43 	cdpvs	15, 6, cr2, cr9, cr3, {2}
    1e7c:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1e80:	632e3273 			; <UNDEFINED> instruction: 0x632e3273
    1e84:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1e88:	646e4970 	strbtvs	r4, [lr], #-2416	; 0xfffff690
    1e8c:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1e90:	616c4232 	cmnvs	ip, r2, lsr r2
    1e94:	69006b63 	stmdbvs	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    1e98:	6f6f646e 	svcvs	0x006f646e
    1e9c:	42327372 	eorsmi	r7, r2, #-939524095	; 0xc8000001
    1ea0:	6b63616c 	blvs	18da458 <startup-0x1e725ba8>
    1ea4:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1ea8:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1eac:	616d4932 	cmnvs	sp, r2, lsr r9
    1eb0:	69006567 	stmdbvs	r0, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
    1eb4:	5f74696e 	svcpl	0x0074696e
    1eb8:	6f646e69 	svcvs	0x00646e69
    1ebc:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1ec0:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1ec4:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1ec8:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    1ecc:	5f746867 	svcpl	0x00746867
    1ed0:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1ed4:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1ed8:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1edc:	616d4932 	cmnvs	sp, r2, lsr r9
    1ee0:	00736567 	rsbseq	r6, r3, r7, ror #10
    1ee4:	6f646e69 	svcvs	0x00646e69
    1ee8:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1eec:	6172675f 	cmnvs	r2, pc, asr r7
    1ef0:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1ef4:	69007374 	stmdbvs	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
    1ef8:	6f6f646e 	svcvs	0x006f646e
    1efc:	4f327372 	svcmi	0x00327372
    1f00:	74006a62 	strvc	r6, [r0], #-2658	; 0xfffff59e
    1f04:	49706d65 	ldmdbmi	r0!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    1f08:	6f6f646e 	svcvs	0x006f646e
    1f0c:	47327372 			; <UNDEFINED> instruction: 0x47327372
    1f10:	00796172 	rsbseq	r6, r9, r2, ror r1
    1f14:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    1f18:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    1f1c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    1f20:	6f62616c 	svcvs	0x0062616c
    1f24:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1f28:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    1f2c:	5049442f 	subpl	r4, r9, pc, lsr #8
    1f30:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    1f34:	2f686374 	svccs	0x00686374
    1f38:	72742f43 	rsbsvc	r2, r4, #268	; 0x10c
    1f3c:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1f40:	7400632e 	strvc	r6, [r0], #-814	; 0xfffffcd2
    1f44:	68706f72 	ldmdavs	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    1f48:	6c625f79 	stclvs	15, cr5, [r2], #-484	; 0xfffffe1c
    1f4c:	5f6b6361 	svcpl	0x006b6361
    1f50:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1f54:	6f727400 	svcvs	0x00727400
    1f58:	4c796870 	ldclmi	8, cr6, [r9], #-448	; 0xfffffe40
    1f5c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1f60:	6f727400 	svcvs	0x00727400
    1f64:	4f796870 	svcmi	0x00796870
    1f68:	74006a62 	strvc	r6, [r0], #-2658	; 0xfffff59e
    1f6c:	68706f72 	ldmdavs	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    1f70:	696c5f79 	stmdbvs	ip!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1f74:	5f746867 	svcpl	0x00746867
    1f78:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1f7c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1f80:	6f725470 	svcvs	0x00725470
    1f84:	42796870 	rsbsmi	r6, r9, #112, 16	; 0x700000
    1f88:	6b63616c 	blvs	18da540 <startup-0x1e725ac0>
    1f8c:	6f727400 	svcvs	0x00727400
    1f90:	5f796870 	svcpl	0x00796870
    1f94:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
    1f98:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1f9c:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    1fa0:	7254706d 	subsvc	r7, r4, #109	; 0x6d
    1fa4:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1fa8:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    1fac:	72740074 	rsbsvc	r0, r4, #116	; 0x74
    1fb0:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1fb4:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    1fb8:	6f727400 	svcvs	0x00727400
    1fbc:	49796870 	ldmdbmi	r9!, {r4, r5, r6, fp, sp, lr}^
    1fc0:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1fc4:	72740073 	rsbsvc	r0, r4, #115	; 0x73
    1fc8:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1fcc:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    1fd0:	72740065 	rsbsvc	r0, r4, #101	; 0x65
    1fd4:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1fd8:	63616c42 	cmnvs	r1, #16896	; 0x4200
    1fdc:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
    1fe0:	7254706d 	subsvc	r7, r4, #109	; 0x6d
    1fe4:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1fe8:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    1fec:	676f7200 	strbvs	r7, [pc, -r0, lsl #4]!
    1ff0:	625f7265 	subsvs	r7, pc, #1342177286	; 0x50000006
    1ff4:	6b63616c 	blvs	18da5ac <startup-0x1e725a54>
    1ff8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1ffc:	6f720073 	svcvs	0x00720073
    2000:	4f726567 	svcmi	0x00726567
    2004:	43006a62 	movwmi	r6, #2658	; 0xa62
    2008:	6f6d2f3a 	svcvs	0x006d2f3a
    200c:	2f632f70 	svccs	0x00632f70
    2010:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    2014:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    2018:	6f697461 	svcvs	0x00697461
    201c:	2f72656e 	svccs	0x0072656e
    2020:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    2024:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    2028:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    202c:	676f722f 	strbvs	r7, [pc, -pc, lsr #4]!
    2030:	632e7265 			; <UNDEFINED> instruction: 0x632e7265
    2034:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    2038:	676f5270 			; <UNDEFINED> instruction: 0x676f5270
    203c:	72477265 	subvc	r7, r7, #1342177286	; 0x50000006
    2040:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
    2044:	52706d65 	rsbspl	r6, r0, #6464	; 0x1940
    2048:	7265676f 	rsbvc	r6, r5, #29097984	; 0x1bc0000
    204c:	63616c42 	cmnvs	r1, #16896	; 0x4200
    2050:	6f72006b 	svcvs	0x0072006b
    2054:	5f726567 	svcpl	0x00726567
    2058:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
    205c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    2060:	6f720073 	svcvs	0x00720073
    2064:	49726567 	ldmdbmi	r2!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^
    2068:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    206c:	6f720073 	svcvs	0x00720073
    2070:	47726567 	ldrbmi	r6, [r2, -r7, ror #10]!
    2074:	00796172 	rsbseq	r6, r9, r2, ror r1
    2078:	65676f72 	strbvs	r6, [r7, #-3954]!	; 0xfffff08e
    207c:	67694c72 			; <UNDEFINED> instruction: 0x67694c72
    2080:	72007468 	andvc	r7, r0, #104, 8	; 0x68000000
    2084:	7265676f 	rsbvc	r6, r5, #29097984	; 0x1bc0000
    2088:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
    208c:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
    2090:	00737469 	rsbseq	r7, r3, r9, ror #8
    2094:	65676f72 	strbvs	r6, [r7, #-3954]!	; 0xfffff08e
    2098:	616d4972 	smcvs	54418	; 0xd492
    209c:	72006567 	andvc	r6, r0, #432013312	; 0x19c00000
    20a0:	7265676f 	rsbvc	r6, r5, #29097984	; 0x1bc0000
    20a4:	63616c42 	cmnvs	r1, #16896	; 0x4200
    20a8:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
    20ac:	6f52706d 	svcvs	0x0052706d
    20b0:	4c726567 	cfldr64mi	mvdx6, [r2], #-412	; 0xfffffe64
    20b4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000024 	andeq	r0, r0, r4, lsr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000034 	andcs	r0, r0, r4, lsr r0
  48:	000001c8 	andeq	r0, r0, r8, asr #3
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	300e4101 	andcc	r4, lr, r1, lsl #2
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	00000020 	andeq	r0, r0, r0, lsr #32
  60:	00000000 	andeq	r0, r0, r0
  64:	200001fc 	strdcs	r0, [r0], -ip
  68:	000016dc 	ldrdeq	r1, [r0], -ip
  6c:	400c0e41 	andmi	r0, ip, r1, asr #28
  70:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  74:	018e4002 	orreq	r4, lr, r2
  78:	09d00e42 	ldmibeq	r0, {r1, r6, r9, sl, fp}^
  7c:	00070d41 	andeq	r0, r7, r1, asr #26
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	00000000 	andeq	r0, r0, r0
  88:	200018d8 	ldrdcs	r1, [r0], -r8
  8c:	0000001e 	andeq	r0, r0, lr, lsl r0
  90:	40080e41 	andmi	r0, r8, r1, asr #28
  94:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  98:	100e4101 	andne	r4, lr, r1, lsl #2
  9c:	00070d41 	andeq	r0, r7, r1, asr #26
  a0:	0000000c 	andeq	r0, r0, ip
  a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  a8:	7c020001 	stcvc	0, cr0, [r2], {1}
  ac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	000000a0 	andeq	r0, r0, r0, lsr #1
  b8:	200018f8 	strdcs	r1, [r0], -r8
  bc:	00000010 	andeq	r0, r0, r0, lsl r0
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	100e4101 	andne	r4, lr, r1, lsl #2
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	000000a0 	andeq	r0, r0, r0, lsr #1
  d8:	20001908 	andcs	r1, r0, r8, lsl #18
  dc:	00000046 	andeq	r0, r0, r6, asr #32
  e0:	40080e41 	andmi	r0, r8, r1, asr #28
  e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e8:	100e4101 	andne	r4, lr, r1, lsl #2
  ec:	00070d41 	andeq	r0, r7, r1, asr #26
  f0:	0000000c 	andeq	r0, r0, ip
  f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  f8:	7c020001 	stcvc	0, cr0, [r2], {1}
  fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 108:	20001950 	andcs	r1, r0, r0, asr r9
 10c:	00000184 	andeq	r0, r0, r4, lsl #3
 110:	40080e41 	andmi	r0, r8, r1, asr #28
 114:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 118:	380e4101 	stmdacc	lr, {r0, r8, lr}
 11c:	00070d41 	andeq	r0, r7, r1, asr #26
 120:	00000020 	andeq	r0, r0, r0, lsr #32
 124:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 128:	20001ad4 	ldrdcs	r1, [r0], -r4
 12c:	00000124 	andeq	r0, r0, r4, lsr #2
 130:	400c0e41 	andmi	r0, ip, r1, asr #28
 134:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 138:	018e4002 	orreq	r4, lr, r2
 13c:	41180e41 	tstmi	r8, r1, asr #28
 140:	0000070d 	andeq	r0, r0, sp, lsl #14
 144:	0000000c 	andeq	r0, r0, ip
 148:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 14c:	7c020001 	stcvc	0, cr0, [r2], {1}
 150:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 154:	00000018 	andeq	r0, r0, r8, lsl r0
 158:	00000144 	andeq	r0, r0, r4, asr #2
 15c:	20001bf8 	strdcs	r1, [r0], -r8
 160:	0000003c 	andeq	r0, r0, ip, lsr r0
 164:	40080e41 	andmi	r0, r8, r1, asr #28
 168:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 16c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 170:	0000001c 	andeq	r0, r0, ip, lsl r0
 174:	00000144 	andeq	r0, r0, r4, asr #2
 178:	20001c34 	andcs	r1, r0, r4, lsr ip
 17c:	00000204 	andeq	r0, r0, r4, lsl #4
 180:	40080e41 	andmi	r0, r8, r1, asr #28
 184:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 188:	100e4101 	andne	r4, lr, r1, lsl #2
 18c:	00070d41 	andeq	r0, r7, r1, asr #26
 190:	0000000c 	andeq	r0, r0, ip
 194:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 198:	7c020001 	stcvc	0, cr0, [r2], {1}
 19c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a4:	00000190 	muleq	r0, r0, r1
 1a8:	20001e38 	andcs	r1, r0, r8, lsr lr
 1ac:	0000020c 	andeq	r0, r0, ip, lsl #4
 1b0:	40080e41 	andmi	r0, r8, r1, asr #28
 1b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b8:	480e4101 	stmdami	lr, {r0, r8, lr}
 1bc:	00070d41 	andeq	r0, r7, r1, asr #26
 1c0:	00000020 	andeq	r0, r0, r0, lsr #32
 1c4:	00000190 	muleq	r0, r0, r1
 1c8:	20002044 	andcs	r2, r0, r4, asr #32
 1cc:	00000158 	andeq	r0, r0, r8, asr r1
 1d0:	400c0e41 	andmi	r0, ip, r1, asr #28
 1d4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 1d8:	018e4002 	orreq	r4, lr, r2
 1dc:	41180e41 	tstmi	r8, r1, asr #28
 1e0:	0000070d 	andeq	r0, r0, sp, lsl #14
 1e4:	0000000c 	andeq	r0, r0, ip
 1e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1ec:	7c020001 	stcvc	0, cr0, [r2], {1}
 1f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f8:	000001e4 	andeq	r0, r0, r4, ror #3
 1fc:	2000219c 	mulcs	r0, ip, r1
 200:	00000140 	andeq	r0, r0, r0, asr #2
 204:	40080e41 	andmi	r0, r8, r1, asr #28
 208:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 20c:	300e4101 	andcc	r4, lr, r1, lsl #2
 210:	00070d41 	andeq	r0, r7, r1, asr #26
 214:	00000020 	andeq	r0, r0, r0, lsr #32
 218:	000001e4 	andeq	r0, r0, r4, ror #3
 21c:	200022dc 	ldrdcs	r2, [r0], -ip
 220:	000000f8 	strdeq	r0, [r0], -r8
 224:	400c0e41 	andmi	r0, ip, r1, asr #28
 228:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 22c:	018e4002 	orreq	r4, lr, r2
 230:	41180e41 	tstmi	r8, r1, asr #28
 234:	0000070d 	andeq	r0, r0, sp, lsl #14
 238:	0000000c 	andeq	r0, r0, ip
 23c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 240:	7c020001 	stcvc	0, cr0, [r2], {1}
 244:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 248:	0000001c 	andeq	r0, r0, ip, lsl r0
 24c:	00000238 	andeq	r0, r0, r8, lsr r2
 250:	200023d4 	ldrdcs	r2, [r0], -r4
 254:	00000140 	andeq	r0, r0, r0, asr #2
 258:	40080e41 	andmi	r0, r8, r1, asr #28
 25c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 260:	300e4101 	andcc	r4, lr, r1, lsl #2
 264:	00070d41 	andeq	r0, r7, r1, asr #26
 268:	00000020 	andeq	r0, r0, r0, lsr #32
 26c:	00000238 	andeq	r0, r0, r8, lsr r2
 270:	20002514 	andcs	r2, r0, r4, lsl r5
 274:	000000f8 	strdeq	r0, [r0], -r8
 278:	400c0e41 	andmi	r0, ip, r1, asr #28
 27c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 280:	018e4002 	orreq	r4, lr, r2
 284:	41180e41 	tstmi	r8, r1, asr #28
 288:	0000070d 	andeq	r0, r0, sp, lsl #14
 28c:	0000001c 	andeq	r0, r0, ip, lsl r0
 290:	00000238 	andeq	r0, r0, r8, lsr r2
 294:	2000260c 	andcs	r2, r0, ip, lsl #12
 298:	00000028 	andeq	r0, r0, r8, lsr #32
 29c:	40080e41 	andmi	r0, r8, r1, asr #28
 2a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a4:	100e4101 	andne	r4, lr, r1, lsl #2
 2a8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b0:	00000238 	andeq	r0, r0, r8, lsr r2
 2b4:	20002634 	andcs	r2, r0, r4, lsr r6
 2b8:	00000110 	andeq	r0, r0, r0, lsl r1
 2bc:	40080e41 	andmi	r0, r8, r1, asr #28
 2c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2c4:	100e4101 	andne	r4, lr, r1, lsl #2
 2c8:	00070d41 	andeq	r0, r7, r1, asr #26
 2cc:	0000000c 	andeq	r0, r0, ip
 2d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2d4:	7c020001 	stcvc	0, cr0, [r2], {1}
 2d8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e0:	000002cc 	andeq	r0, r0, ip, asr #5
 2e4:	20002744 	andcs	r2, r0, r4, asr #14
 2e8:	000001a8 	andeq	r0, r0, r8, lsr #3
 2ec:	40080e41 	andmi	r0, r8, r1, asr #28
 2f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f4:	380e4101 	stmdacc	lr, {r0, r8, lr}
 2f8:	00070d41 	andeq	r0, r7, r1, asr #26
 2fc:	00000020 	andeq	r0, r0, r0, lsr #32
 300:	000002cc 	andeq	r0, r0, ip, asr #5
 304:	200028ec 	andcs	r2, r0, ip, ror #17
 308:	00000104 	andeq	r0, r0, r4, lsl #2
 30c:	400c0e41 	andmi	r0, ip, r1, asr #28
 310:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 314:	018e4002 	orreq	r4, lr, r2
 318:	41180e41 	tstmi	r8, r1, asr #28
 31c:	0000070d 	andeq	r0, r0, sp, lsl #14
 320:	0000000c 	andeq	r0, r0, ip
 324:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 328:	7c020001 	stcvc	0, cr0, [r2], {1}
 32c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 330:	0000001c 	andeq	r0, r0, ip, lsl r0
 334:	00000320 	andeq	r0, r0, r0, lsr #6
 338:	200029f0 	strdcs	r2, [r0], -r0
 33c:	00000274 	andeq	r0, r0, r4, ror r2
 340:	40080e41 	andmi	r0, r8, r1, asr #28
 344:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 348:	500e4101 	andpl	r4, lr, r1, lsl #2
 34c:	00070d41 	andeq	r0, r7, r1, asr #26
 350:	00000020 	andeq	r0, r0, r0, lsr #32
 354:	00000320 	andeq	r0, r0, r0, lsr #6
 358:	20002c64 	andcs	r2, r0, r4, ror #24
 35c:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 360:	400c0e41 	andmi	r0, ip, r1, asr #28
 364:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 368:	018e4002 	orreq	r4, lr, r2
 36c:	41180e41 	tstmi	r8, r1, asr #28
 370:	0000070d 	andeq	r0, r0, sp, lsl #14
 374:	0000000c 	andeq	r0, r0, ip
 378:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 37c:	7c020001 	stcvc	0, cr0, [r2], {1}
 380:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 384:	00000018 	andeq	r0, r0, r8, lsl r0
 388:	00000374 	andeq	r0, r0, r4, ror r3
 38c:	20002f1c 	andcs	r2, r0, ip, lsl pc
 390:	00000044 	andeq	r0, r0, r4, asr #32
 394:	40080e41 	andmi	r0, r8, r1, asr #28
 398:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 39c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 3a0:	00000018 	andeq	r0, r0, r8, lsl r0
 3a4:	00000374 	andeq	r0, r0, r4, ror r3
 3a8:	20002f60 	andcs	r2, r0, r0, ror #30
 3ac:	00000044 	andeq	r0, r0, r4, asr #32
 3b0:	40080e41 	andmi	r0, r8, r1, asr #28
 3b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3b8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 3bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c0:	00000374 	andeq	r0, r0, r4, ror r3
 3c4:	20002fa4 	andcs	r2, r0, r4, lsr #31
 3c8:	0000002c 	andeq	r0, r0, ip, lsr #32
 3cc:	40080e41 	andmi	r0, r8, r1, asr #28
 3d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3d4:	100e4101 	andne	r4, lr, r1, lsl #2
 3d8:	00070d41 	andeq	r0, r7, r1, asr #26
 3dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e0:	00000374 	andeq	r0, r0, r4, ror r3
 3e4:	20002fd0 	ldrdcs	r2, [r0], -r0
 3e8:	00000026 	andeq	r0, r0, r6, lsr #32
 3ec:	40080e41 	andmi	r0, r8, r1, asr #28
 3f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3f4:	100e4101 	andne	r4, lr, r1, lsl #2
 3f8:	00070d41 	andeq	r0, r7, r1, asr #26
 3fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 400:	00000374 	andeq	r0, r0, r4, ror r3
 404:	20002ff6 	strdcs	r2, [r0], -r6
 408:	00000032 	andeq	r0, r0, r2, lsr r0
 40c:	40080e41 	andmi	r0, r8, r1, asr #28
 410:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 414:	180e4101 	stmdane	lr, {r0, r8, lr}
 418:	00070d41 	andeq	r0, r7, r1, asr #26
 41c:	00000018 	andeq	r0, r0, r8, lsl r0
 420:	00000374 	andeq	r0, r0, r4, ror r3
 424:	20003028 	andcs	r3, r0, r8, lsr #32
 428:	00000018 	andeq	r0, r0, r8, lsl r0
 42c:	40080e41 	andmi	r0, r8, r1, asr #28
 430:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 434:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 438:	00000018 	andeq	r0, r0, r8, lsl r0
 43c:	00000374 	andeq	r0, r0, r4, ror r3
 440:	20003040 	andcs	r3, r0, r0, asr #32
 444:	00000030 	andeq	r0, r0, r0, lsr r0
 448:	40080e41 	andmi	r0, r8, r1, asr #28
 44c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 450:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 454:	0000001c 	andeq	r0, r0, ip, lsl r0
 458:	00000374 	andeq	r0, r0, r4, ror r3
 45c:	20003070 	andcs	r3, r0, r0, ror r0
 460:	00000050 	andeq	r0, r0, r0, asr r0
 464:	40080e41 	andmi	r0, r8, r1, asr #28
 468:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 46c:	180e4101 	stmdane	lr, {r0, r8, lr}
 470:	00070d41 	andeq	r0, r7, r1, asr #26
 474:	0000001c 	andeq	r0, r0, ip, lsl r0
 478:	00000374 	andeq	r0, r0, r4, ror r3
 47c:	200030c0 	andcs	r3, r0, r0, asr #1
 480:	00000058 	andeq	r0, r0, r8, asr r0
 484:	40080e41 	andmi	r0, r8, r1, asr #28
 488:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 48c:	180e4101 	stmdane	lr, {r0, r8, lr}
 490:	00070d41 	andeq	r0, r7, r1, asr #26
 494:	0000001c 	andeq	r0, r0, ip, lsl r0
 498:	00000374 	andeq	r0, r0, r4, ror r3
 49c:	20003118 	andcs	r3, r0, r8, lsl r1
 4a0:	00000066 	andeq	r0, r0, r6, rrx
 4a4:	40080e41 	andmi	r0, r8, r1, asr #28
 4a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4ac:	100e4101 	andne	r4, lr, r1, lsl #2
 4b0:	00070d41 	andeq	r0, r7, r1, asr #26
 4b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b8:	00000374 	andeq	r0, r0, r4, ror r3
 4bc:	2000317e 	andcs	r3, r0, lr, ror r1
 4c0:	0000006e 	andeq	r0, r0, lr, rrx
 4c4:	40080e41 	andmi	r0, r8, r1, asr #28
 4c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4cc:	100e4101 	andne	r4, lr, r1, lsl #2
 4d0:	00070d41 	andeq	r0, r7, r1, asr #26
 4d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d8:	00000374 	andeq	r0, r0, r4, ror r3
 4dc:	200031ec 	andcs	r3, r0, ip, ror #3
 4e0:	00000094 	muleq	r0, r4, r0
 4e4:	40080e41 	andmi	r0, r8, r1, asr #28
 4e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4ec:	180e4101 	stmdane	lr, {r0, r8, lr}
 4f0:	00070d41 	andeq	r0, r7, r1, asr #26
 4f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f8:	00000374 	andeq	r0, r0, r4, ror r3
 4fc:	20003280 	andcs	r3, r0, r0, lsl #5
 500:	0000002a 	andeq	r0, r0, sl, lsr #32
 504:	40080e41 	andmi	r0, r8, r1, asr #28
 508:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 50c:	100e4101 	andne	r4, lr, r1, lsl #2
 510:	00070d41 	andeq	r0, r7, r1, asr #26
 514:	0000001c 	andeq	r0, r0, ip, lsl r0
 518:	00000374 	andeq	r0, r0, r4, ror r3
 51c:	200032aa 	andcs	r3, r0, sl, lsr #5
 520:	0000007e 	andeq	r0, r0, lr, ror r0
 524:	40080e41 	andmi	r0, r8, r1, asr #28
 528:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 52c:	100e4101 	andne	r4, lr, r1, lsl #2
 530:	00070d41 	andeq	r0, r7, r1, asr #26
 534:	0000001c 	andeq	r0, r0, ip, lsl r0
 538:	00000374 	andeq	r0, r0, r4, ror r3
 53c:	20003328 	andcs	r3, r0, r8, lsr #6
 540:	00000046 	andeq	r0, r0, r6, asr #32
 544:	40080e41 	andmi	r0, r8, r1, asr #28
 548:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 54c:	100e4101 	andne	r4, lr, r1, lsl #2
 550:	00070d41 	andeq	r0, r7, r1, asr #26
 554:	0000001c 	andeq	r0, r0, ip, lsl r0
 558:	00000374 	andeq	r0, r0, r4, ror r3
 55c:	2000336e 	andcs	r3, r0, lr, ror #6
 560:	00000046 	andeq	r0, r0, r6, asr #32
 564:	40080e41 	andmi	r0, r8, r1, asr #28
 568:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 56c:	100e4101 	andne	r4, lr, r1, lsl #2
 570:	00070d41 	andeq	r0, r7, r1, asr #26
 574:	00000018 	andeq	r0, r0, r8, lsl r0
 578:	00000374 	andeq	r0, r0, r4, ror r3
 57c:	200033b4 			; <UNDEFINED> instruction: 0x200033b4
 580:	0000006e 	andeq	r0, r0, lr, rrx
 584:	40080e41 	andmi	r0, r8, r1, asr #28
 588:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 58c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 590:	0000001c 	andeq	r0, r0, ip, lsl r0
 594:	00000374 	andeq	r0, r0, r4, ror r3
 598:	20003422 	andcs	r3, r0, r2, lsr #8
 59c:	00000066 	andeq	r0, r0, r6, rrx
 5a0:	40080e41 	andmi	r0, r8, r1, asr #28
 5a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5a8:	100e4101 	andne	r4, lr, r1, lsl #2
 5ac:	00070d41 	andeq	r0, r7, r1, asr #26
 5b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5b4:	00000374 	andeq	r0, r0, r4, ror r3
 5b8:	20003488 	andcs	r3, r0, r8, lsl #9
 5bc:	00000180 	andeq	r0, r0, r0, lsl #3
 5c0:	40080e41 	andmi	r0, r8, r1, asr #28
 5c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5c8:	200e4101 	andcs	r4, lr, r1, lsl #2
 5cc:	00070d41 	andeq	r0, r7, r1, asr #26
 5d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5d4:	00000374 	andeq	r0, r0, r4, ror r3
 5d8:	20003608 	andcs	r3, r0, r8, lsl #12
 5dc:	000001a0 	andeq	r0, r0, r0, lsr #3
 5e0:	40080e41 	andmi	r0, r8, r1, asr #28
 5e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5e8:	280e4101 	stmdacs	lr, {r0, r8, lr}
 5ec:	00070d41 	andeq	r0, r7, r1, asr #26
 5f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5f4:	00000374 	andeq	r0, r0, r4, ror r3
 5f8:	200037a8 	andcs	r3, r0, r8, lsr #15
 5fc:	000000d6 	ldrdeq	r0, [r0], -r6
 600:	40080e41 	andmi	r0, r8, r1, asr #28
 604:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 608:	200e4101 	andcs	r4, lr, r1, lsl #2
 60c:	00070d41 	andeq	r0, r7, r1, asr #26
 610:	00000024 	andeq	r0, r0, r4, lsr #32
 614:	00000374 	andeq	r0, r0, r4, ror r3
 618:	2000387e 	andcs	r3, r0, lr, ror r8
 61c:	0000011a 	andeq	r0, r0, sl, lsl r1
 620:	40100e41 	andsmi	r0, r0, r1, asr #28
 624:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 628:	02874003 	addeq	r4, r7, #3
 62c:	41018e40 	tstmi	r1, r0, asr #28
 630:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 634:	00000007 	andeq	r0, r0, r7
 638:	0000001c 	andeq	r0, r0, ip, lsl r0
 63c:	00000374 	andeq	r0, r0, r4, ror r3
 640:	20003998 	mulcs	r0, r8, r9
 644:	00000052 	andeq	r0, r0, r2, asr r0
 648:	40080e41 	andmi	r0, r8, r1, asr #28
 64c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 650:	200e4101 	andcs	r4, lr, r1, lsl #2
 654:	00070d41 	andeq	r0, r7, r1, asr #26
 658:	0000001c 	andeq	r0, r0, ip, lsl r0
 65c:	00000374 	andeq	r0, r0, r4, ror r3
 660:	200039ea 	andcs	r3, r0, sl, ror #19
 664:	00000052 	andeq	r0, r0, r2, asr r0
 668:	40080e41 	andmi	r0, r8, r1, asr #28
 66c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 670:	200e4101 	andcs	r4, lr, r1, lsl #2
 674:	00070d41 	andeq	r0, r7, r1, asr #26
 678:	00000020 	andeq	r0, r0, r0, lsr #32
 67c:	00000374 	andeq	r0, r0, r4, ror r3
 680:	20003a3c 	andcs	r3, r0, ip, lsr sl
 684:	00000130 	andeq	r0, r0, r0, lsr r1
 688:	400c0e41 	andmi	r0, ip, r1, asr #28
 68c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 690:	018e4002 	orreq	r4, lr, r2
 694:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 698:	0000070d 	andeq	r0, r0, sp, lsl #14
 69c:	0000001c 	andeq	r0, r0, ip, lsl r0
 6a0:	00000374 	andeq	r0, r0, r4, ror r3
 6a4:	20003b6c 	andcs	r3, r0, ip, ror #22
 6a8:	00000108 	andeq	r0, r0, r8, lsl #2
 6ac:	40080e41 	andmi	r0, r8, r1, asr #28
 6b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6b4:	100e4101 	andne	r4, lr, r1, lsl #2
 6b8:	00070d41 	andeq	r0, r7, r1, asr #26
 6bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 6c0:	00000374 	andeq	r0, r0, r4, ror r3
 6c4:	20003c74 	andcs	r3, r0, r4, ror ip
 6c8:	00000082 	andeq	r0, r0, r2, lsl #1
 6cc:	40080e41 	andmi	r0, r8, r1, asr #28
 6d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6d4:	200e4101 	andcs	r4, lr, r1, lsl #2
 6d8:	18070c41 	stmdane	r7, {r0, r6, sl, fp}
 6dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 6e0:	00000374 	andeq	r0, r0, r4, ror r3
 6e4:	20003cf6 	strdcs	r3, [r0], -r6
 6e8:	0000006a 	andeq	r0, r0, sl, rrx
 6ec:	40080e41 	andmi	r0, r8, r1, asr #28
 6f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6f4:	100e4101 	andne	r4, lr, r1, lsl #2
 6f8:	00070d41 	andeq	r0, r7, r1, asr #26
 6fc:	0000000c 	andeq	r0, r0, ip
 700:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 704:	7c020001 	stcvc	0, cr0, [r2], {1}
 708:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 70c:	0000001c 	andeq	r0, r0, ip, lsl r0
 710:	000006fc 	strdeq	r0, [r0], -ip
 714:	20003d60 	andcs	r3, r0, r0, ror #26
 718:	00000028 	andeq	r0, r0, r8, lsr #32
 71c:	40080e41 	andmi	r0, r8, r1, asr #28
 720:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 724:	180e4101 	stmdane	lr, {r0, r8, lr}
 728:	00070d41 	andeq	r0, r7, r1, asr #26
 72c:	0000000c 	andeq	r0, r0, ip
 730:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 734:	7c020001 	stcvc	0, cr0, [r2], {1}
 738:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 73c:	0000001c 	andeq	r0, r0, ip, lsl r0
 740:	0000072c 	andeq	r0, r0, ip, lsr #14
 744:	20003d88 	andcs	r3, r0, r8, lsl #27
 748:	00000028 	andeq	r0, r0, r8, lsr #32
 74c:	40080e41 	andmi	r0, r8, r1, asr #28
 750:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 754:	180e4101 	stmdane	lr, {r0, r8, lr}
 758:	00070d41 	andeq	r0, r7, r1, asr #26
 75c:	0000000c 	andeq	r0, r0, ip
 760:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 764:	7c020001 	stcvc	0, cr0, [r2], {1}
 768:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 76c:	00000018 	andeq	r0, r0, r8, lsl r0
 770:	0000075c 	andeq	r0, r0, ip, asr r7
 774:	20003db0 			; <UNDEFINED> instruction: 0x20003db0
 778:	00000018 	andeq	r0, r0, r8, lsl r0
 77c:	40080e41 	andmi	r0, r8, r1, asr #28
 780:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 784:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 788:	00000018 	andeq	r0, r0, r8, lsl r0
 78c:	0000075c 	andeq	r0, r0, ip, asr r7
 790:	20003dc8 	andcs	r3, r0, r8, asr #27
 794:	00000020 	andeq	r0, r0, r0, lsr #32
 798:	40080e41 	andmi	r0, r8, r1, asr #28
 79c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7a0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 7a4:	00000020 	andeq	r0, r0, r0, lsr #32
 7a8:	0000075c 	andeq	r0, r0, ip, asr r7
 7ac:	20003de8 	andcs	r3, r0, r8, ror #27
 7b0:	00000034 	andeq	r0, r0, r4, lsr r0
 7b4:	400c0e41 	andmi	r0, ip, r1, asr #28
 7b8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 7bc:	018e4002 	orreq	r4, lr, r2
 7c0:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 7c4:	0000070d 	andeq	r0, r0, sp, lsl #14
 7c8:	0000000c 	andeq	r0, r0, ip
 7cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 7d0:	7c020001 	stcvc	0, cr0, [r2], {1}
 7d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 7d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 7dc:	000007c8 	andeq	r0, r0, r8, asr #15
 7e0:	20003e1c 	andcs	r3, r0, ip, lsl lr
 7e4:	00000044 	andeq	r0, r0, r4, asr #32
 7e8:	40080e41 	andmi	r0, r8, r1, asr #28
 7ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7f0:	180e4101 	stmdane	lr, {r0, r8, lr}
 7f4:	00070d41 	andeq	r0, r7, r1, asr #26
 7f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 7fc:	000007c8 	andeq	r0, r0, r8, asr #15
 800:	20003e60 	andcs	r3, r0, r0, ror #28
 804:	00000050 	andeq	r0, r0, r0, asr r0
 808:	40080e41 	andmi	r0, r8, r1, asr #28
 80c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 810:	180e4101 	stmdane	lr, {r0, r8, lr}
 814:	00070d41 	andeq	r0, r7, r1, asr #26
 818:	0000001c 	andeq	r0, r0, ip, lsl r0
 81c:	000007c8 	andeq	r0, r0, r8, asr #15
 820:	20003eb0 			; <UNDEFINED> instruction: 0x20003eb0
 824:	0000002a 	andeq	r0, r0, sl, lsr #32
 828:	40080e41 	andmi	r0, r8, r1, asr #28
 82c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 830:	100e4101 	andne	r4, lr, r1, lsl #2
 834:	00070d41 	andeq	r0, r7, r1, asr #26
 838:	0000001c 	andeq	r0, r0, ip, lsl r0
 83c:	000007c8 	andeq	r0, r0, r8, asr #15
 840:	20003eda 	ldrdcs	r3, [r0], -sl
 844:	0000002a 	andeq	r0, r0, sl, lsr #32
 848:	40080e41 	andmi	r0, r8, r1, asr #28
 84c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 850:	100e4101 	andne	r4, lr, r1, lsl #2
 854:	00070d41 	andeq	r0, r7, r1, asr #26
 858:	00000020 	andeq	r0, r0, r0, lsr #32
 85c:	000007c8 	andeq	r0, r0, r8, asr #15
 860:	20003f04 	andcs	r3, r0, r4, lsl #30
 864:	00000054 	andeq	r0, r0, r4, asr r0
 868:	400c0e41 	andmi	r0, ip, r1, asr #28
 86c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 870:	018e4002 	orreq	r4, lr, r2
 874:	41180e41 	tstmi	r8, r1, asr #28
 878:	0000070d 	andeq	r0, r0, sp, lsl #14
 87c:	00000020 	andeq	r0, r0, r0, lsr #32
 880:	000007c8 	andeq	r0, r0, r8, asr #15
 884:	20003f58 	andcs	r3, r0, r8, asr pc
 888:	00000054 	andeq	r0, r0, r4, asr r0
 88c:	400c0e41 	andmi	r0, ip, r1, asr #28
 890:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 894:	018e4002 	orreq	r4, lr, r2
 898:	41180e41 	tstmi	r8, r1, asr #28
 89c:	0000070d 	andeq	r0, r0, sp, lsl #14
 8a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 8a4:	000007c8 	andeq	r0, r0, r8, asr #15
 8a8:	20003fac 	andcs	r3, r0, ip, lsr #31
 8ac:	00000030 	andeq	r0, r0, r0, lsr r0
 8b0:	40080e41 	andmi	r0, r8, r1, asr #28
 8b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8b8:	100e4101 	andne	r4, lr, r1, lsl #2
 8bc:	00070d41 	andeq	r0, r7, r1, asr #26
 8c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 8c4:	000007c8 	andeq	r0, r0, r8, asr #15
 8c8:	20003fdc 	ldrdcs	r3, [r0], -ip
 8cc:	00000034 	andeq	r0, r0, r4, lsr r0
 8d0:	40080e41 	andmi	r0, r8, r1, asr #28
 8d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8d8:	100e4101 	andne	r4, lr, r1, lsl #2
 8dc:	00070d41 	andeq	r0, r7, r1, asr #26
 8e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 8e4:	000007c8 	andeq	r0, r0, r8, asr #15
 8e8:	20004010 	andcs	r4, r0, r0, lsl r0
 8ec:	0000003c 	andeq	r0, r0, ip, lsr r0
 8f0:	40080e41 	andmi	r0, r8, r1, asr #28
 8f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8f8:	100e4101 	andne	r4, lr, r1, lsl #2
 8fc:	00070d41 	andeq	r0, r7, r1, asr #26
 900:	0000001c 	andeq	r0, r0, ip, lsl r0
 904:	000007c8 	andeq	r0, r0, r8, asr #15
 908:	2000404c 	andcs	r4, r0, ip, asr #32
 90c:	00000050 	andeq	r0, r0, r0, asr r0
 910:	40080e41 	andmi	r0, r8, r1, asr #28
 914:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 918:	180e4101 	stmdane	lr, {r0, r8, lr}
 91c:	00070d41 	andeq	r0, r7, r1, asr #26
 920:	00000018 	andeq	r0, r0, r8, lsl r0
 924:	000007c8 	andeq	r0, r0, r8, asr #15
 928:	2000409c 	mulcs	r0, ip, r0
 92c:	0000009a 	muleq	r0, sl, r0
 930:	40080e41 	andmi	r0, r8, r1, asr #28
 934:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 938:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 93c:	00000018 	andeq	r0, r0, r8, lsl r0
 940:	000007c8 	andeq	r0, r0, r8, asr #15
 944:	20004136 	andcs	r4, r0, r6, lsr r1
 948:	0000001a 	andeq	r0, r0, sl, lsl r0
 94c:	40080e41 	andmi	r0, r8, r1, asr #28
 950:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 954:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 958:	00000018 	andeq	r0, r0, r8, lsl r0
 95c:	000007c8 	andeq	r0, r0, r8, asr #15
 960:	20004150 	andcs	r4, r0, r0, asr r1
 964:	00000012 	andeq	r0, r0, r2, lsl r0
 968:	40080e41 	andmi	r0, r8, r1, asr #28
 96c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 970:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 974:	00000020 	andeq	r0, r0, r0, lsr #32
 978:	000007c8 	andeq	r0, r0, r8, asr #15
 97c:	20004162 	andcs	r4, r0, r2, ror #2
 980:	0000006a 	andeq	r0, r0, sl, rrx
 984:	400c0e41 	andmi	r0, ip, r1, asr #28
 988:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 98c:	018e4002 	orreq	r4, lr, r2
 990:	41300e41 	teqmi	r0, r1, asr #28
 994:	0000070d 	andeq	r0, r0, sp, lsl #14
 998:	0000001c 	andeq	r0, r0, ip, lsl r0
 99c:	000007c8 	andeq	r0, r0, r8, asr #15
 9a0:	200041cc 	andcs	r4, r0, ip, asr #3
 9a4:	0000005e 	andeq	r0, r0, lr, asr r0
 9a8:	40080e41 	andmi	r0, r8, r1, asr #28
 9ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 9b0:	100e4101 	andne	r4, lr, r1, lsl #2
 9b4:	00070d41 	andeq	r0, r7, r1, asr #26
 9b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 9bc:	000007c8 	andeq	r0, r0, r8, asr #15
 9c0:	2000422a 	andcs	r4, r0, sl, lsr #4
 9c4:	0000008e 	andeq	r0, r0, lr, lsl #1
 9c8:	40080e41 	andmi	r0, r8, r1, asr #28
 9cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 9d0:	200e4101 	andcs	r4, lr, r1, lsl #2
 9d4:	00070d41 	andeq	r0, r7, r1, asr #26
 9d8:	00000020 	andeq	r0, r0, r0, lsr #32
 9dc:	000007c8 	andeq	r0, r0, r8, asr #15
 9e0:	200042b8 			; <UNDEFINED> instruction: 0x200042b8
 9e4:	00000084 	andeq	r0, r0, r4, lsl #1
 9e8:	400c0e41 	andmi	r0, ip, r1, asr #28
 9ec:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 9f0:	018e4002 	orreq	r4, lr, r2
 9f4:	41380e41 	teqmi	r8, r1, asr #28
 9f8:	0000070d 	andeq	r0, r0, sp, lsl #14
 9fc:	0000000c 	andeq	r0, r0, ip
 a00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a04:	7c020001 	stcvc	0, cr0, [r2], {1}
 a08:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a0c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a10:	000009fc 	strdeq	r0, [r0], -ip
 a14:	2000433c 	andcs	r4, r0, ip, lsr r3
 a18:	0000005a 	andeq	r0, r0, sl, asr r0
 a1c:	40080e41 	andmi	r0, r8, r1, asr #28
 a20:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a24:	180e4101 	stmdane	lr, {r0, r8, lr}
 a28:	00070d41 	andeq	r0, r7, r1, asr #26
 a2c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a30:	000009fc 	strdeq	r0, [r0], -ip
 a34:	20004396 	mulcs	r0, r6, r3
 a38:	0000003a 	andeq	r0, r0, sl, lsr r0
 a3c:	40080e41 	andmi	r0, r8, r1, asr #28
 a40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a44:	180e4101 	stmdane	lr, {r0, r8, lr}
 a48:	00070d41 	andeq	r0, r7, r1, asr #26
 a4c:	0000000c 	andeq	r0, r0, ip
 a50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a54:	7c020001 	stcvc	0, cr0, [r2], {1}
 a58:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a5c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a60:	00000a4c 	andeq	r0, r0, ip, asr #20
 a64:	200043d0 	ldrdcs	r4, [r0], -r0
 a68:	00000074 	andeq	r0, r0, r4, ror r0
 a6c:	40080e41 	andmi	r0, r8, r1, asr #28
 a70:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a74:	180e4101 	stmdane	lr, {r0, r8, lr}
 a78:	00070d41 	andeq	r0, r7, r1, asr #26
 a7c:	00000020 	andeq	r0, r0, r0, lsr #32
 a80:	00000a4c 	andeq	r0, r0, ip, asr #20
 a84:	20004444 	andcs	r4, r0, r4, asr #8
 a88:	00000074 	andeq	r0, r0, r4, ror r0
 a8c:	400c0e41 	andmi	r0, ip, r1, asr #28
 a90:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 a94:	018e4002 	orreq	r4, lr, r2
 a98:	41180e41 	tstmi	r8, r1, asr #28
 a9c:	0000070d 	andeq	r0, r0, sp, lsl #14
 aa0:	0000000c 	andeq	r0, r0, ip
 aa4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 aa8:	7c020001 	stcvc	0, cr0, [r2], {1}
 aac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 ab0:	0000001c 	andeq	r0, r0, ip, lsl r0
 ab4:	00000aa0 	andeq	r0, r0, r0, lsr #21
 ab8:	200044b8 			; <UNDEFINED> instruction: 0x200044b8
 abc:	00000074 	andeq	r0, r0, r4, ror r0
 ac0:	40080e41 	andmi	r0, r8, r1, asr #28
 ac4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ac8:	180e4101 	stmdane	lr, {r0, r8, lr}
 acc:	00070d41 	andeq	r0, r7, r1, asr #26
 ad0:	00000020 	andeq	r0, r0, r0, lsr #32
 ad4:	00000aa0 	andeq	r0, r0, r0, lsr #21
 ad8:	2000452c 	andcs	r4, r0, ip, lsr #10
 adc:	00000074 	andeq	r0, r0, r4, ror r0
 ae0:	400c0e41 	andmi	r0, ip, r1, asr #28
 ae4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 ae8:	018e4002 	orreq	r4, lr, r2
 aec:	41180e41 	tstmi	r8, r1, asr #28
 af0:	0000070d 	andeq	r0, r0, sp, lsl #14
 af4:	0000000c 	andeq	r0, r0, ip
 af8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 afc:	7c020001 	stcvc	0, cr0, [r2], {1}
 b00:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 b04:	0000001c 	andeq	r0, r0, ip, lsl r0
 b08:	00000af4 	strdeq	r0, [r0], -r4
 b0c:	200045a0 	andcs	r4, r0, r0, lsr #11
 b10:	00000074 	andeq	r0, r0, r4, ror r0
 b14:	40080e41 	andmi	r0, r8, r1, asr #28
 b18:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b1c:	180e4101 	stmdane	lr, {r0, r8, lr}
 b20:	00070d41 	andeq	r0, r7, r1, asr #26
 b24:	00000020 	andeq	r0, r0, r0, lsr #32
 b28:	00000af4 	strdeq	r0, [r0], -r4
 b2c:	20004614 	andcs	r4, r0, r4, lsl r6
 b30:	00000074 	andeq	r0, r0, r4, ror r0
 b34:	400c0e41 	andmi	r0, ip, r1, asr #28
 b38:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 b3c:	018e4002 	orreq	r4, lr, r2
 b40:	41180e41 	tstmi	r8, r1, asr #28
 b44:	0000070d 	andeq	r0, r0, sp, lsl #14
 b48:	0000000c 	andeq	r0, r0, ip
 b4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 b50:	7c020001 	stcvc	0, cr0, [r2], {1}
 b54:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 b58:	0000001c 	andeq	r0, r0, ip, lsl r0
 b5c:	00000b48 	andeq	r0, r0, r8, asr #22
 b60:	20004688 	andcs	r4, r0, r8, lsl #13
 b64:	00000074 	andeq	r0, r0, r4, ror r0
 b68:	40080e41 	andmi	r0, r8, r1, asr #28
 b6c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b70:	180e4101 	stmdane	lr, {r0, r8, lr}
 b74:	00070d41 	andeq	r0, r7, r1, asr #26
 b78:	00000020 	andeq	r0, r0, r0, lsr #32
 b7c:	00000b48 	andeq	r0, r0, r8, asr #22
 b80:	200046fc 	strdcs	r4, [r0], -ip
 b84:	00000074 	andeq	r0, r0, r4, ror r0
 b88:	400c0e41 	andmi	r0, ip, r1, asr #28
 b8c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 b90:	018e4002 	orreq	r4, lr, r2
 b94:	41180e41 	tstmi	r8, r1, asr #28
 b98:	0000070d 	andeq	r0, r0, sp, lsl #14
 b9c:	0000000c 	andeq	r0, r0, ip
 ba0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 ba4:	7c010001 	stcvc	0, cr0, [r1], {1}
 ba8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 bac:	0000000c 	andeq	r0, r0, ip
 bb0:	00000b9c 	muleq	r0, ip, fp
 bb4:	20004771 	andcs	r4, r0, r1, ror r7
 bb8:	000001cc 	andeq	r0, r0, ip, asr #3
