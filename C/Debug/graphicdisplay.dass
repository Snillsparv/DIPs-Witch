
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#endif
}

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f8fa 	bl	200001fc <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:
void init_app( void ) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*portModer = 0x55555555;
20000014:	4b05      	ldr	r3, [pc, #20]	; (2000002c <init_app+0x1c>)
20000016:	4a06      	ldr	r2, [pc, #24]	; (20000030 <init_app+0x20>)
20000018:	601a      	str	r2, [r3, #0]
	set_up_DIL();
2000001a:	f003 fd89 	bl	20003b30 <set_up_DIL>
	graphic_initialize();
2000001e:	f003 f889 	bl	20003134 <graphic_initialize>
	graphic_clear_screen();
20000022:	f003 f8be 	bl	200031a2 <graphic_clear_screen>
}
20000026:	46c0      	nop			; (mov r8, r8)
20000028:	46bd      	mov	sp, r7
2000002a:	bd80      	pop	{r7, pc}
2000002c:	40021000 	andmi	r1, r2, r0
20000030:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000034 <initSprites>:
sprite tempTitleLight;
sprite tempPressBlack;
sprite tempPressGray;
sprite tempPressLight;

void initSprites( void ) {
20000034:	b580      	push	{r7, lr}
20000036:	b08a      	sub	sp, #40	; 0x28
20000038:	af00      	add	r7, sp, #0
	sprite *monsterPointer = &tempMonster;
2000003a:	4b49      	ldr	r3, [pc, #292]	; (20000160 <initSprites+0x12c>)
2000003c:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(monsterPointer, monster_black_bits, monster_black_width, monster_black_height);
2000003e:	4949      	ldr	r1, [pc, #292]	; (20000164 <initSprites+0x130>)
20000040:	6a78      	ldr	r0, [r7, #36]	; 0x24
20000042:	231e      	movs	r3, #30
20000044:	221e      	movs	r2, #30
20000046:	f003 fd5f 	bl	20003b08 <load_sprite>
	monster = monsterPointer;
2000004a:	4b47      	ldr	r3, [pc, #284]	; (20000168 <initSprites+0x134>)
2000004c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000004e:	601a      	str	r2, [r3, #0]
	
	sprite *monsterPointer2 = &tempMonsterLight;
20000050:	4b46      	ldr	r3, [pc, #280]	; (2000016c <initSprites+0x138>)
20000052:	623b      	str	r3, [r7, #32]
	load_sprite(monsterPointer2, monster_light_bits, monster_light_width, monster_light_height);
20000054:	4946      	ldr	r1, [pc, #280]	; (20000170 <initSprites+0x13c>)
20000056:	6a38      	ldr	r0, [r7, #32]
20000058:	231e      	movs	r3, #30
2000005a:	221e      	movs	r2, #30
2000005c:	f003 fd54 	bl	20003b08 <load_sprite>
	monsterLight = monsterPointer2;
20000060:	4b44      	ldr	r3, [pc, #272]	; (20000174 <initSprites+0x140>)
20000062:	6a3a      	ldr	r2, [r7, #32]
20000064:	601a      	str	r2, [r3, #0]

	sprite *monsterPointer3 = &tempMonsterGray;
20000066:	4b44      	ldr	r3, [pc, #272]	; (20000178 <initSprites+0x144>)
20000068:	61fb      	str	r3, [r7, #28]
	load_sprite(monsterPointer3, monster_gray_bits, monster_gray_width, monster_gray_height);
2000006a:	4944      	ldr	r1, [pc, #272]	; (2000017c <initSprites+0x148>)
2000006c:	69f8      	ldr	r0, [r7, #28]
2000006e:	231e      	movs	r3, #30
20000070:	221e      	movs	r2, #30
20000072:	f003 fd49 	bl	20003b08 <load_sprite>
	monsterGray = monsterPointer3;
20000076:	4b42      	ldr	r3, [pc, #264]	; (20000180 <initSprites+0x14c>)
20000078:	69fa      	ldr	r2, [r7, #28]
2000007a:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempBg;
2000007c:	4b41      	ldr	r3, [pc, #260]	; (20000184 <initSprites+0x150>)
2000007e:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer4, bg_bits, bg_width, bg_height);
20000080:	4941      	ldr	r1, [pc, #260]	; (20000188 <initSprites+0x154>)
20000082:	69b8      	ldr	r0, [r7, #24]
20000084:	2340      	movs	r3, #64	; 0x40
20000086:	2280      	movs	r2, #128	; 0x80
20000088:	f003 fd3e 	bl	20003b08 <load_sprite>
	bg = pointer4;
2000008c:	4b3f      	ldr	r3, [pc, #252]	; (2000018c <initSprites+0x158>)
2000008e:	69ba      	ldr	r2, [r7, #24]
20000090:	601a      	str	r2, [r3, #0]
	
	sprite *pointer5 = &tempCastleBlack;
20000092:	4b3f      	ldr	r3, [pc, #252]	; (20000190 <initSprites+0x15c>)
20000094:	617b      	str	r3, [r7, #20]
	load_sprite(pointer5, castle_black_bits, castle_black_width, castle_black_height);
20000096:	493f      	ldr	r1, [pc, #252]	; (20000194 <initSprites+0x160>)
20000098:	6978      	ldr	r0, [r7, #20]
2000009a:	2340      	movs	r3, #64	; 0x40
2000009c:	2280      	movs	r2, #128	; 0x80
2000009e:	f003 fd33 	bl	20003b08 <load_sprite>
	castleBlack = pointer5;
200000a2:	4b3d      	ldr	r3, [pc, #244]	; (20000198 <initSprites+0x164>)
200000a4:	697a      	ldr	r2, [r7, #20]
200000a6:	601a      	str	r2, [r3, #0]
	
	sprite *pointer6 = &tempCastleGray;
200000a8:	4b3c      	ldr	r3, [pc, #240]	; (2000019c <initSprites+0x168>)
200000aa:	613b      	str	r3, [r7, #16]
	load_sprite(pointer6, castle_gray_bits, castle_black_width, castle_black_height);
200000ac:	493c      	ldr	r1, [pc, #240]	; (200001a0 <initSprites+0x16c>)
200000ae:	6938      	ldr	r0, [r7, #16]
200000b0:	2340      	movs	r3, #64	; 0x40
200000b2:	2280      	movs	r2, #128	; 0x80
200000b4:	f003 fd28 	bl	20003b08 <load_sprite>
	castleGray = pointer6;
200000b8:	4b3a      	ldr	r3, [pc, #232]	; (200001a4 <initSprites+0x170>)
200000ba:	693a      	ldr	r2, [r7, #16]
200000bc:	601a      	str	r2, [r3, #0]
	
	sprite *pointer7 = &tempCastleLight;
200000be:	4b3a      	ldr	r3, [pc, #232]	; (200001a8 <initSprites+0x174>)
200000c0:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer7, castle_light_bits, castle_black_width, castle_black_height);
200000c2:	493a      	ldr	r1, [pc, #232]	; (200001ac <initSprites+0x178>)
200000c4:	68f8      	ldr	r0, [r7, #12]
200000c6:	2340      	movs	r3, #64	; 0x40
200000c8:	2280      	movs	r2, #128	; 0x80
200000ca:	f003 fd1d 	bl	20003b08 <load_sprite>
	castleLight = pointer7;
200000ce:	4b38      	ldr	r3, [pc, #224]	; (200001b0 <initSprites+0x17c>)
200000d0:	68fa      	ldr	r2, [r7, #12]
200000d2:	601a      	str	r2, [r3, #0]
	
	sprite *pointer8 = &tempTitleLight;
200000d4:	4b37      	ldr	r3, [pc, #220]	; (200001b4 <initSprites+0x180>)
200000d6:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer8, title_light_bits, title_black_width, title_black_height);
200000d8:	4937      	ldr	r1, [pc, #220]	; (200001b8 <initSprites+0x184>)
200000da:	68b8      	ldr	r0, [r7, #8]
200000dc:	231e      	movs	r3, #30
200000de:	2232      	movs	r2, #50	; 0x32
200000e0:	f003 fd12 	bl	20003b08 <load_sprite>
	titleLight = pointer8;
200000e4:	4b35      	ldr	r3, [pc, #212]	; (200001bc <initSprites+0x188>)
200000e6:	68ba      	ldr	r2, [r7, #8]
200000e8:	601a      	str	r2, [r3, #0]
	sprite *pointer9 = &tempTitleGray;
200000ea:	4b35      	ldr	r3, [pc, #212]	; (200001c0 <initSprites+0x18c>)
200000ec:	607b      	str	r3, [r7, #4]
	load_sprite(pointer9, title_gray_bits, title_black_width, title_black_height);
200000ee:	4935      	ldr	r1, [pc, #212]	; (200001c4 <initSprites+0x190>)
200000f0:	6878      	ldr	r0, [r7, #4]
200000f2:	231e      	movs	r3, #30
200000f4:	2232      	movs	r2, #50	; 0x32
200000f6:	f003 fd07 	bl	20003b08 <load_sprite>
	titleGray = pointer9;
200000fa:	4b33      	ldr	r3, [pc, #204]	; (200001c8 <initSprites+0x194>)
200000fc:	687a      	ldr	r2, [r7, #4]
200000fe:	601a      	str	r2, [r3, #0]
	sprite *pointer10 = &tempTitleBlack;
20000100:	4b32      	ldr	r3, [pc, #200]	; (200001cc <initSprites+0x198>)
20000102:	603b      	str	r3, [r7, #0]
	load_sprite(pointer10, title_black_bits, title_black_width, title_black_height);
20000104:	4932      	ldr	r1, [pc, #200]	; (200001d0 <initSprites+0x19c>)
20000106:	6838      	ldr	r0, [r7, #0]
20000108:	231e      	movs	r3, #30
2000010a:	2232      	movs	r2, #50	; 0x32
2000010c:	f003 fcfc 	bl	20003b08 <load_sprite>
	titleBlack = pointer10;	
20000110:	4b30      	ldr	r3, [pc, #192]	; (200001d4 <initSprites+0x1a0>)
20000112:	683a      	ldr	r2, [r7, #0]
20000114:	601a      	str	r2, [r3, #0]
	
	pointer8 = &tempPressLight;
20000116:	4b30      	ldr	r3, [pc, #192]	; (200001d8 <initSprites+0x1a4>)
20000118:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer8, press_light_bits, press_black_width, press_black_height);
2000011a:	4930      	ldr	r1, [pc, #192]	; (200001dc <initSprites+0x1a8>)
2000011c:	68b8      	ldr	r0, [r7, #8]
2000011e:	2323      	movs	r3, #35	; 0x23
20000120:	223c      	movs	r2, #60	; 0x3c
20000122:	f003 fcf1 	bl	20003b08 <load_sprite>
	pressLight = pointer8;
20000126:	4b2e      	ldr	r3, [pc, #184]	; (200001e0 <initSprites+0x1ac>)
20000128:	68ba      	ldr	r2, [r7, #8]
2000012a:	601a      	str	r2, [r3, #0]
	pointer9 = &tempPressGray;
2000012c:	4b2d      	ldr	r3, [pc, #180]	; (200001e4 <initSprites+0x1b0>)
2000012e:	607b      	str	r3, [r7, #4]
	load_sprite(pointer9, press_gray_bits, press_black_width, press_black_height);
20000130:	492d      	ldr	r1, [pc, #180]	; (200001e8 <initSprites+0x1b4>)
20000132:	6878      	ldr	r0, [r7, #4]
20000134:	2323      	movs	r3, #35	; 0x23
20000136:	223c      	movs	r2, #60	; 0x3c
20000138:	f003 fce6 	bl	20003b08 <load_sprite>
	pressGray = pointer9;
2000013c:	4b2b      	ldr	r3, [pc, #172]	; (200001ec <initSprites+0x1b8>)
2000013e:	687a      	ldr	r2, [r7, #4]
20000140:	601a      	str	r2, [r3, #0]
	pointer10 = &tempPressBlack;
20000142:	4b2b      	ldr	r3, [pc, #172]	; (200001f0 <initSprites+0x1bc>)
20000144:	603b      	str	r3, [r7, #0]
	load_sprite(pointer10, press_black_bits, press_black_width, press_black_height);
20000146:	492b      	ldr	r1, [pc, #172]	; (200001f4 <initSprites+0x1c0>)
20000148:	6838      	ldr	r0, [r7, #0]
2000014a:	2323      	movs	r3, #35	; 0x23
2000014c:	223c      	movs	r2, #60	; 0x3c
2000014e:	f003 fcdb 	bl	20003b08 <load_sprite>
	pressBlack = pointer10;	
20000152:	4b29      	ldr	r3, [pc, #164]	; (200001f8 <initSprites+0x1c4>)
20000154:	683a      	ldr	r2, [r7, #0]
20000156:	601a      	str	r2, [r3, #0]
	
	
}
20000158:	46c0      	nop			; (mov r8, r8)
2000015a:	46bd      	mov	sp, r7
2000015c:	b00a      	add	sp, #40	; 0x28
2000015e:	bd80      	pop	{r7, pc}
20000160:	20004658 	andcs	r4, r0, r8, asr r6
20000164:	20006edc 	ldrdcs	r6, [r0], -ip
20000168:	2000462c 	andcs	r4, r0, ip, lsr #12
2000016c:	200046b0 			; <UNDEFINED> instruction: 0x200046b0
20000170:	20006f54 	andcs	r6, r0, r4, asr pc
20000174:	200046d8 	ldrdcs	r4, [r0], -r8
20000178:	20004678 	andcs	r4, r0, r8, ror r6
2000017c:	20006fcc 	andcs	r6, r0, ip, asr #31
20000180:	200046ec 	andcs	r4, r0, ip, ror #13
20000184:	200046f0 	strdcs	r4, [r0], -r0
20000188:	20008208 	andcs	r8, r0, r8, lsl #4
2000018c:	20004674 	andcs	r4, r0, r4, ror r6
20000190:	20004630 	andcs	r4, r0, r0, lsr r6
20000194:	2000738c 	andcs	r7, r0, ip, lsl #7
20000198:	20004654 	andcs	r4, r0, r4, asr r6
2000019c:	200046cc 	andcs	r4, r0, ip, asr #13
200001a0:	2000778c 	andcs	r7, r0, ip, lsl #15
200001a4:	200046e0 	andcs	r4, r0, r0, ror #13
200001a8:	200046a0 	andcs	r4, r0, r0, lsr #13
200001ac:	20007b8c 	andcs	r7, r0, ip, lsl #23
200001b0:	20004690 	mulcs	r0, r0, r6
200001b4:	20004684 	andcs	r4, r0, r4, lsl #13
200001b8:	20007f8c 	andcs	r7, r0, ip, lsl #31
200001bc:	200046dc 	ldrdcs	r4, [r0], -ip
200001c0:	20004648 	andcs	r4, r0, r8, asr #12
200001c4:	20008060 	andcs	r8, r0, r0, rrx
200001c8:	200046c8 	andcs	r4, r0, r8, asr #13
200001cc:	20004668 	andcs	r4, r0, r8, ror #12
200001d0:	20008134 	andcs	r8, r0, r4, lsr r1
200001d4:	200046fc 	strdcs	r4, [r0], -ip
200001d8:	20004694 	mulcs	r0, r4, r6
200001dc:	2000715c 	andcs	r7, r0, ip, asr r1
200001e0:	20004664 	andcs	r4, r0, r4, ror #12
200001e4:	2000463c 	andcs	r4, r0, ip, lsr r6
200001e8:	20007274 	andcs	r7, r0, r4, ror r2
200001ec:	200046ac 	andcs	r4, r0, ip, lsr #13
200001f0:	200046bc 			; <UNDEFINED> instruction: 0x200046bc
200001f4:	20007044 	andcs	r7, r0, r4, asr #32
200001f8:	200046e8 	andcs	r4, r0, r8, ror #13

200001fc <main>:
	
int counter = 0;
int current_screen = START_SCREEN;
void main(void)
{
200001fc:	b590      	push	{r4, r7, lr}
200001fe:	4cfe      	ldr	r4, [pc, #1016]	; (200005f8 <main+0x3fc>)
20000200:	44a5      	add	sp, r4
20000202:	af00      	add	r7, sp, #0
	
	init_app();	
20000204:	f7ff ff04 	bl	20000010 <init_app>
	initSprites();
20000208:	f7ff ff14 	bl	20000034 <initSprites>
	
	GameObject monsterObj;
	Image monsterImage;
	Image monsterImages[] = {monsterImage};
2000020c:	4bfb      	ldr	r3, [pc, #1004]	; (200005fc <main+0x400>)
2000020e:	18fb      	adds	r3, r7, r3
20000210:	228a      	movs	r2, #138	; 0x8a
20000212:	00d2      	lsls	r2, r2, #3
20000214:	18ba      	adds	r2, r7, r2
20000216:	ca13      	ldmia	r2!, {r0, r1, r4}
20000218:	c313      	stmia	r3!, {r0, r1, r4}
	monsterObj.images = monsterImages;
2000021a:	4bf9      	ldr	r3, [pc, #996]	; (20000600 <main+0x404>)
2000021c:	18fb      	adds	r3, r7, r3
2000021e:	4af7      	ldr	r2, [pc, #988]	; (200005fc <main+0x400>)
20000220:	18ba      	adds	r2, r7, r2
20000222:	601a      	str	r2, [r3, #0]
	load_image(&monsterObj.images[0], monster, monsterGray, monsterLight);
20000224:	4bf6      	ldr	r3, [pc, #984]	; (20000600 <main+0x404>)
20000226:	18fb      	adds	r3, r7, r3
20000228:	6818      	ldr	r0, [r3, #0]
2000022a:	4bf6      	ldr	r3, [pc, #984]	; (20000604 <main+0x408>)
2000022c:	6819      	ldr	r1, [r3, #0]
2000022e:	4bf6      	ldr	r3, [pc, #984]	; (20000608 <main+0x40c>)
20000230:	681a      	ldr	r2, [r3, #0]
20000232:	4bf6      	ldr	r3, [pc, #984]	; (2000060c <main+0x410>)
20000234:	681b      	ldr	r3, [r3, #0]
20000236:	f003 fc53 	bl	20003ae0 <load_image>
	monsterObj.xPos = 30;
2000023a:	4bf1      	ldr	r3, [pc, #964]	; (20000600 <main+0x404>)
2000023c:	18fb      	adds	r3, r7, r3
2000023e:	221e      	movs	r2, #30
20000240:	605a      	str	r2, [r3, #4]
	monsterObj.yPos = 4;
20000242:	4bef      	ldr	r3, [pc, #956]	; (20000600 <main+0x404>)
20000244:	18fb      	adds	r3, r7, r3
20000246:	2204      	movs	r2, #4
20000248:	609a      	str	r2, [r3, #8]
	monsterObj.current_frame = 0;
2000024a:	4bed      	ldr	r3, [pc, #948]	; (20000600 <main+0x404>)
2000024c:	18fb      	adds	r3, r7, r3
2000024e:	2200      	movs	r2, #0
20000250:	615a      	str	r2, [r3, #20]
	monsterObj.update = playerUpdate;
20000252:	4beb      	ldr	r3, [pc, #940]	; (20000600 <main+0x404>)
20000254:	18fb      	adds	r3, r7, r3
20000256:	4aee      	ldr	r2, [pc, #952]	; (20000610 <main+0x414>)
20000258:	60da      	str	r2, [r3, #12]
	
	GameObject titleObj;
	Image titleImage;
	Image titleImages[] = {titleImage};
2000025a:	2381      	movs	r3, #129	; 0x81
2000025c:	00db      	lsls	r3, r3, #3
2000025e:	18fb      	adds	r3, r7, r3
20000260:	4aec      	ldr	r2, [pc, #944]	; (20000614 <main+0x418>)
20000262:	18ba      	adds	r2, r7, r2
20000264:	ca13      	ldmia	r2!, {r0, r1, r4}
20000266:	c313      	stmia	r3!, {r0, r1, r4}
	titleObj.images = titleImages;
20000268:	2384      	movs	r3, #132	; 0x84
2000026a:	00db      	lsls	r3, r3, #3
2000026c:	18fb      	adds	r3, r7, r3
2000026e:	2281      	movs	r2, #129	; 0x81
20000270:	00d2      	lsls	r2, r2, #3
20000272:	18ba      	adds	r2, r7, r2
20000274:	601a      	str	r2, [r3, #0]
	load_image(&titleObj.images[0], titleBlack, titleGray, titleLight);
20000276:	2384      	movs	r3, #132	; 0x84
20000278:	00db      	lsls	r3, r3, #3
2000027a:	18fb      	adds	r3, r7, r3
2000027c:	6818      	ldr	r0, [r3, #0]
2000027e:	4be6      	ldr	r3, [pc, #920]	; (20000618 <main+0x41c>)
20000280:	6819      	ldr	r1, [r3, #0]
20000282:	4be6      	ldr	r3, [pc, #920]	; (2000061c <main+0x420>)
20000284:	681a      	ldr	r2, [r3, #0]
20000286:	4be6      	ldr	r3, [pc, #920]	; (20000620 <main+0x424>)
20000288:	681b      	ldr	r3, [r3, #0]
2000028a:	f003 fc29 	bl	20003ae0 <load_image>
	titleObj.xPos = 1;
2000028e:	2384      	movs	r3, #132	; 0x84
20000290:	00db      	lsls	r3, r3, #3
20000292:	18fb      	adds	r3, r7, r3
20000294:	2201      	movs	r2, #1
20000296:	605a      	str	r2, [r3, #4]
	titleObj.yPos = -40;
20000298:	2384      	movs	r3, #132	; 0x84
2000029a:	00db      	lsls	r3, r3, #3
2000029c:	18fb      	adds	r3, r7, r3
2000029e:	2228      	movs	r2, #40	; 0x28
200002a0:	4252      	negs	r2, r2
200002a2:	609a      	str	r2, [r3, #8]
	titleObj.current_frame = 0;
200002a4:	2384      	movs	r3, #132	; 0x84
200002a6:	00db      	lsls	r3, r3, #3
200002a8:	18fb      	adds	r3, r7, r3
200002aa:	2200      	movs	r2, #0
200002ac:	615a      	str	r2, [r3, #20]
	
	GameObject pressObj;
	Image pressImage;
	Image pressImages[] = {pressImage};
200002ae:	23f3      	movs	r3, #243	; 0xf3
200002b0:	009b      	lsls	r3, r3, #2
200002b2:	18fb      	adds	r3, r7, r3
200002b4:	22f6      	movs	r2, #246	; 0xf6
200002b6:	0092      	lsls	r2, r2, #2
200002b8:	18ba      	adds	r2, r7, r2
200002ba:	ca13      	ldmia	r2!, {r0, r1, r4}
200002bc:	c313      	stmia	r3!, {r0, r1, r4}
	pressObj.images = pressImages;
200002be:	23f9      	movs	r3, #249	; 0xf9
200002c0:	009b      	lsls	r3, r3, #2
200002c2:	18fb      	adds	r3, r7, r3
200002c4:	22f3      	movs	r2, #243	; 0xf3
200002c6:	0092      	lsls	r2, r2, #2
200002c8:	18ba      	adds	r2, r7, r2
200002ca:	601a      	str	r2, [r3, #0]
	load_image(&pressObj.images[0], pressBlack, pressLight, pressGray);
200002cc:	23f9      	movs	r3, #249	; 0xf9
200002ce:	009b      	lsls	r3, r3, #2
200002d0:	18fb      	adds	r3, r7, r3
200002d2:	6818      	ldr	r0, [r3, #0]
200002d4:	4bd3      	ldr	r3, [pc, #844]	; (20000624 <main+0x428>)
200002d6:	6819      	ldr	r1, [r3, #0]
200002d8:	4bd3      	ldr	r3, [pc, #844]	; (20000628 <main+0x42c>)
200002da:	681a      	ldr	r2, [r3, #0]
200002dc:	4bd3      	ldr	r3, [pc, #844]	; (2000062c <main+0x430>)
200002de:	681b      	ldr	r3, [r3, #0]
200002e0:	f003 fbfe 	bl	20003ae0 <load_image>
	pressObj.xPos = 65-30;
200002e4:	23f9      	movs	r3, #249	; 0xf9
200002e6:	009b      	lsls	r3, r3, #2
200002e8:	18fb      	adds	r3, r7, r3
200002ea:	2223      	movs	r2, #35	; 0x23
200002ec:	605a      	str	r2, [r3, #4]
	pressObj.yPos = 29-15;
200002ee:	23f9      	movs	r3, #249	; 0xf9
200002f0:	009b      	lsls	r3, r3, #2
200002f2:	18fb      	adds	r3, r7, r3
200002f4:	220e      	movs	r2, #14
200002f6:	609a      	str	r2, [r3, #8]
	pressObj.current_frame = 0;
200002f8:	23f9      	movs	r3, #249	; 0xf9
200002fa:	009b      	lsls	r3, r3, #2
200002fc:	18fb      	adds	r3, r7, r3
200002fe:	2200      	movs	r2, #0
20000300:	615a      	str	r2, [r3, #20]
	
	GameObject castleObj;
	Image castleImage;
	Image castleImages[] = {castleImage};
20000302:	4bcb      	ldr	r3, [pc, #812]	; (20000630 <main+0x434>)
20000304:	2293      	movs	r2, #147	; 0x93
20000306:	00d2      	lsls	r2, r2, #3
20000308:	4694      	mov	ip, r2
2000030a:	44bc      	add	ip, r7
2000030c:	4463      	add	r3, ip
2000030e:	22e7      	movs	r2, #231	; 0xe7
20000310:	0092      	lsls	r2, r2, #2
20000312:	18ba      	adds	r2, r7, r2
20000314:	ca13      	ldmia	r2!, {r0, r1, r4}
20000316:	c313      	stmia	r3!, {r0, r1, r4}
	castleObj.images = castleImages;
20000318:	23ea      	movs	r3, #234	; 0xea
2000031a:	009b      	lsls	r3, r3, #2
2000031c:	18fb      	adds	r3, r7, r3
2000031e:	22e4      	movs	r2, #228	; 0xe4
20000320:	0092      	lsls	r2, r2, #2
20000322:	18ba      	adds	r2, r7, r2
20000324:	601a      	str	r2, [r3, #0]
	load_image(&castleObj.images[0], castleBlack, castleGray, castleLight);
20000326:	23ea      	movs	r3, #234	; 0xea
20000328:	009b      	lsls	r3, r3, #2
2000032a:	18fb      	adds	r3, r7, r3
2000032c:	6818      	ldr	r0, [r3, #0]
2000032e:	4bc1      	ldr	r3, [pc, #772]	; (20000634 <main+0x438>)
20000330:	6819      	ldr	r1, [r3, #0]
20000332:	4bc1      	ldr	r3, [pc, #772]	; (20000638 <main+0x43c>)
20000334:	681a      	ldr	r2, [r3, #0]
20000336:	4bc1      	ldr	r3, [pc, #772]	; (2000063c <main+0x440>)
20000338:	681b      	ldr	r3, [r3, #0]
2000033a:	f003 fbd1 	bl	20003ae0 <load_image>
	castleObj.xPos = 1;
2000033e:	23ea      	movs	r3, #234	; 0xea
20000340:	009b      	lsls	r3, r3, #2
20000342:	18fb      	adds	r3, r7, r3
20000344:	2201      	movs	r2, #1
20000346:	605a      	str	r2, [r3, #4]
	castleObj.yPos = 1;
20000348:	23ea      	movs	r3, #234	; 0xea
2000034a:	009b      	lsls	r3, r3, #2
2000034c:	18fb      	adds	r3, r7, r3
2000034e:	2201      	movs	r2, #1
20000350:	609a      	str	r2, [r3, #8]
	castleObj.current_frame = 0;
20000352:	23ea      	movs	r3, #234	; 0xea
20000354:	009b      	lsls	r3, r3, #2
20000356:	18fb      	adds	r3, r7, r3
20000358:	2200      	movs	r2, #0
2000035a:	615a      	str	r2, [r3, #20]
	
	GameObject indoors;
	init_indoors( &indoors );
2000035c:	23db      	movs	r3, #219	; 0xdb
2000035e:	009b      	lsls	r3, r3, #2
20000360:	18fb      	adds	r3, r7, r3
20000362:	0018      	movs	r0, r3
20000364:	f003 ff2e 	bl	200041c4 <init_indoors>
	indoors.xPos = 1;
20000368:	4bb5      	ldr	r3, [pc, #724]	; (20000640 <main+0x444>)
2000036a:	2293      	movs	r2, #147	; 0x93
2000036c:	00d2      	lsls	r2, r2, #3
2000036e:	4694      	mov	ip, r2
20000370:	44bc      	add	ip, r7
20000372:	4463      	add	r3, ip
20000374:	2201      	movs	r2, #1
20000376:	605a      	str	r2, [r3, #4]
	indoors.yPos = 1;
20000378:	4bb1      	ldr	r3, [pc, #708]	; (20000640 <main+0x444>)
2000037a:	2293      	movs	r2, #147	; 0x93
2000037c:	00d2      	lsls	r2, r2, #3
2000037e:	4694      	mov	ip, r2
20000380:	44bc      	add	ip, r7
20000382:	4463      	add	r3, ip
20000384:	2201      	movs	r2, #1
20000386:	609a      	str	r2, [r3, #8]
	
	GameObject indoors2;
	init_indoors2( &indoors2 );
20000388:	23d2      	movs	r3, #210	; 0xd2
2000038a:	009b      	lsls	r3, r3, #2
2000038c:	18fb      	adds	r3, r7, r3
2000038e:	0018      	movs	r0, r3
20000390:	f003 ff8c 	bl	200042ac <init_indoors2>
	indoors2.xPos = 1;
20000394:	4bab      	ldr	r3, [pc, #684]	; (20000644 <main+0x448>)
20000396:	2293      	movs	r2, #147	; 0x93
20000398:	00d2      	lsls	r2, r2, #3
2000039a:	4694      	mov	ip, r2
2000039c:	44bc      	add	ip, r7
2000039e:	4463      	add	r3, ip
200003a0:	2201      	movs	r2, #1
200003a2:	605a      	str	r2, [r3, #4]
	indoors2.yPos = 1;
200003a4:	4ba7      	ldr	r3, [pc, #668]	; (20000644 <main+0x448>)
200003a6:	2293      	movs	r2, #147	; 0x93
200003a8:	00d2      	lsls	r2, r2, #3
200003aa:	4694      	mov	ip, r2
200003ac:	44bc      	add	ip, r7
200003ae:	4463      	add	r3, ip
200003b0:	2201      	movs	r2, #1
200003b2:	609a      	str	r2, [r3, #8]
	
	GameObject trophy;
	init_trophy( &trophy );
200003b4:	23c9      	movs	r3, #201	; 0xc9
200003b6:	009b      	lsls	r3, r3, #2
200003b8:	18fb      	adds	r3, r7, r3
200003ba:	0018      	movs	r0, r3
200003bc:	f003 ffea 	bl	20004394 <init_trophy>

	
	GameObject hair;
	init_flame(&hair);
200003c0:	23c0      	movs	r3, #192	; 0xc0
200003c2:	009b      	lsls	r3, r3, #2
200003c4:	18fb      	adds	r3, r7, r3
200003c6:	0018      	movs	r0, r3
200003c8:	f002 f950 	bl	2000266c <init_flame>
	hair.xPos = 40;
200003cc:	4b9e      	ldr	r3, [pc, #632]	; (20000648 <main+0x44c>)
200003ce:	2293      	movs	r2, #147	; 0x93
200003d0:	00d2      	lsls	r2, r2, #3
200003d2:	4694      	mov	ip, r2
200003d4:	44bc      	add	ip, r7
200003d6:	4463      	add	r3, ip
200003d8:	2228      	movs	r2, #40	; 0x28
200003da:	605a      	str	r2, [r3, #4]
	hair.yPos = 10;
200003dc:	4b9a      	ldr	r3, [pc, #616]	; (20000648 <main+0x44c>)
200003de:	2293      	movs	r2, #147	; 0x93
200003e0:	00d2      	lsls	r2, r2, #3
200003e2:	4694      	mov	ip, r2
200003e4:	44bc      	add	ip, r7
200003e6:	4463      	add	r3, ip
200003e8:	220a      	movs	r2, #10
200003ea:	609a      	str	r2, [r3, #8]
	hair.update = gameObjectUpdate;
200003ec:	4b96      	ldr	r3, [pc, #600]	; (20000648 <main+0x44c>)
200003ee:	2293      	movs	r2, #147	; 0x93
200003f0:	00d2      	lsls	r2, r2, #3
200003f2:	4694      	mov	ip, r2
200003f4:	44bc      	add	ip, r7
200003f6:	4463      	add	r3, ip
200003f8:	4a94      	ldr	r2, [pc, #592]	; (2000064c <main+0x450>)
200003fa:	60da      	str	r2, [r3, #12]
	
	GameObject bird;
	init_bird( &bird );
200003fc:	23b7      	movs	r3, #183	; 0xb7
200003fe:	009b      	lsls	r3, r3, #2
20000400:	18fb      	adds	r3, r7, r3
20000402:	0018      	movs	r0, r3
20000404:	f001 fcde 	bl	20001dc4 <init_bird>
	bird.xPos = 180;
20000408:	4b91      	ldr	r3, [pc, #580]	; (20000650 <main+0x454>)
2000040a:	2293      	movs	r2, #147	; 0x93
2000040c:	00d2      	lsls	r2, r2, #3
2000040e:	4694      	mov	ip, r2
20000410:	44bc      	add	ip, r7
20000412:	4463      	add	r3, ip
20000414:	22b4      	movs	r2, #180	; 0xb4
20000416:	605a      	str	r2, [r3, #4]
	bird.yPos = 40;
20000418:	4b8d      	ldr	r3, [pc, #564]	; (20000650 <main+0x454>)
2000041a:	2293      	movs	r2, #147	; 0x93
2000041c:	00d2      	lsls	r2, r2, #3
2000041e:	4694      	mov	ip, r2
20000420:	44bc      	add	ip, r7
20000422:	4463      	add	r3, ip
20000424:	2228      	movs	r2, #40	; 0x28
20000426:	609a      	str	r2, [r3, #8]
	bird.update = gameObjectUpdate;
20000428:	4b89      	ldr	r3, [pc, #548]	; (20000650 <main+0x454>)
2000042a:	2293      	movs	r2, #147	; 0x93
2000042c:	00d2      	lsls	r2, r2, #3
2000042e:	4694      	mov	ip, r2
20000430:	44bc      	add	ip, r7
20000432:	4463      	add	r3, ip
20000434:	4a85      	ldr	r2, [pc, #532]	; (2000064c <main+0x450>)
20000436:	60da      	str	r2, [r3, #12]
	
	GameObject boom;
	init_boom( &boom );
20000438:	23ae      	movs	r3, #174	; 0xae
2000043a:	009b      	lsls	r3, r3, #2
2000043c:	18fb      	adds	r3, r7, r3
2000043e:	0018      	movs	r0, r3
20000440:	f002 fad0 	bl	200029e4 <init_boom>
	boom.update = gameObjectUpdate;
20000444:	4b83      	ldr	r3, [pc, #524]	; (20000654 <main+0x458>)
20000446:	2293      	movs	r2, #147	; 0x93
20000448:	00d2      	lsls	r2, r2, #3
2000044a:	4694      	mov	ip, r2
2000044c:	44bc      	add	ip, r7
2000044e:	4463      	add	r3, ip
20000450:	4a7e      	ldr	r2, [pc, #504]	; (2000064c <main+0x450>)
20000452:	60da      	str	r2, [r3, #12]
	
	GameObject DIP;
	init_DIP( &DIP );
20000454:	23a5      	movs	r3, #165	; 0xa5
20000456:	009b      	lsls	r3, r3, #2
20000458:	18fb      	adds	r3, r7, r3
2000045a:	0018      	movs	r0, r3
2000045c:	f001 ff1a 	bl	20002294 <init_DIP>
	DIP.update = DIPUpdate;
20000460:	4b7d      	ldr	r3, [pc, #500]	; (20000658 <main+0x45c>)
20000462:	2293      	movs	r2, #147	; 0x93
20000464:	00d2      	lsls	r2, r2, #3
20000466:	4694      	mov	ip, r2
20000468:	44bc      	add	ip, r7
2000046a:	4463      	add	r3, ip
2000046c:	4a7b      	ldr	r2, [pc, #492]	; (2000065c <main+0x460>)
2000046e:	60da      	str	r2, [r3, #12]
	
	GameObject player;
	init_witch( &player );
20000470:	239c      	movs	r3, #156	; 0x9c
20000472:	009b      	lsls	r3, r3, #2
20000474:	18fb      	adds	r3, r7, r3
20000476:	0018      	movs	r0, r3
20000478:	f001 fdf0 	bl	2000205c <init_witch>
	player.xPos = 3;
2000047c:	4b78      	ldr	r3, [pc, #480]	; (20000660 <main+0x464>)
2000047e:	2293      	movs	r2, #147	; 0x93
20000480:	00d2      	lsls	r2, r2, #3
20000482:	4694      	mov	ip, r2
20000484:	44bc      	add	ip, r7
20000486:	4463      	add	r3, ip
20000488:	2203      	movs	r2, #3
2000048a:	605a      	str	r2, [r3, #4]
	player.yPos = LIMIT_DOWN - 1; //player position
2000048c:	4b74      	ldr	r3, [pc, #464]	; (20000660 <main+0x464>)
2000048e:	2293      	movs	r2, #147	; 0x93
20000490:	00d2      	lsls	r2, r2, #3
20000492:	4694      	mov	ip, r2
20000494:	44bc      	add	ip, r7
20000496:	4463      	add	r3, ip
20000498:	2226      	movs	r2, #38	; 0x26
2000049a:	609a      	str	r2, [r3, #8]
	player.update = playerUpdate;
2000049c:	4b70      	ldr	r3, [pc, #448]	; (20000660 <main+0x464>)
2000049e:	2293      	movs	r2, #147	; 0x93
200004a0:	00d2      	lsls	r2, r2, #3
200004a2:	4694      	mov	ip, r2
200004a4:	44bc      	add	ip, r7
200004a6:	4463      	add	r3, ip
200004a8:	4a59      	ldr	r2, [pc, #356]	; (20000610 <main+0x414>)
200004aa:	60da      	str	r2, [r3, #12]
	
	GameObject fire2;
	init_fire( &fire2 );
200004ac:	2393      	movs	r3, #147	; 0x93
200004ae:	009b      	lsls	r3, r3, #2
200004b0:	18fb      	adds	r3, r7, r3
200004b2:	0018      	movs	r0, r3
200004b4:	f001 f9ec 	bl	20001890 <init_fire>
	GameObject fire3;
	init_fire( &fire3 );
200004b8:	238a      	movs	r3, #138	; 0x8a
200004ba:	009b      	lsls	r3, r3, #2
200004bc:	18fb      	adds	r3, r7, r3
200004be:	0018      	movs	r0, r3
200004c0:	f001 f9e6 	bl	20001890 <init_fire>
	GameObject fire4;
	init_fire( &fire4 );
200004c4:	2381      	movs	r3, #129	; 0x81
200004c6:	009b      	lsls	r3, r3, #2
200004c8:	18fb      	adds	r3, r7, r3
200004ca:	0018      	movs	r0, r3
200004cc:	f001 f9e0 	bl	20001890 <init_fire>
	GameObject fire1;
	init_fire( &fire1 );
200004d0:	23f0      	movs	r3, #240	; 0xf0
200004d2:	005b      	lsls	r3, r3, #1
200004d4:	18fb      	adds	r3, r7, r3
200004d6:	0018      	movs	r0, r3
200004d8:	f001 f9da 	bl	20001890 <init_fire>
	
	GameObject fire1_indoors;
	init_fire( &fire1_indoors );
200004dc:	23de      	movs	r3, #222	; 0xde
200004de:	005b      	lsls	r3, r3, #1
200004e0:	18fb      	adds	r3, r7, r3
200004e2:	0018      	movs	r0, r3
200004e4:	f001 f9d4 	bl	20001890 <init_fire>
	fire1_indoors.xPos = 50;		//FIRE1_INDO
200004e8:	4b5e      	ldr	r3, [pc, #376]	; (20000664 <main+0x468>)
200004ea:	2293      	movs	r2, #147	; 0x93
200004ec:	00d2      	lsls	r2, r2, #3
200004ee:	4694      	mov	ip, r2
200004f0:	44bc      	add	ip, r7
200004f2:	4463      	add	r3, ip
200004f4:	2232      	movs	r2, #50	; 0x32
200004f6:	605a      	str	r2, [r3, #4]
	fire1_indoors.yPos = 64-12-7;
200004f8:	4b5a      	ldr	r3, [pc, #360]	; (20000664 <main+0x468>)
200004fa:	2293      	movs	r2, #147	; 0x93
200004fc:	00d2      	lsls	r2, r2, #3
200004fe:	4694      	mov	ip, r2
20000500:	44bc      	add	ip, r7
20000502:	4463      	add	r3, ip
20000504:	222d      	movs	r2, #45	; 0x2d
20000506:	609a      	str	r2, [r3, #8]
	fire1_indoors.update = gameObjectUpdate;
20000508:	4b56      	ldr	r3, [pc, #344]	; (20000664 <main+0x468>)
2000050a:	2293      	movs	r2, #147	; 0x93
2000050c:	00d2      	lsls	r2, r2, #3
2000050e:	4694      	mov	ip, r2
20000510:	44bc      	add	ip, r7
20000512:	4463      	add	r3, ip
20000514:	4a4d      	ldr	r2, [pc, #308]	; (2000064c <main+0x450>)
20000516:	60da      	str	r2, [r3, #12]
	GameObject fire2_indoors;
	init_fire( &fire2_indoors );
20000518:	23cc      	movs	r3, #204	; 0xcc
2000051a:	005b      	lsls	r3, r3, #1
2000051c:	18fb      	adds	r3, r7, r3
2000051e:	0018      	movs	r0, r3
20000520:	f001 f9b6 	bl	20001890 <init_fire>
	fire2_indoors.update = gameObjectUpdate;
20000524:	4b50      	ldr	r3, [pc, #320]	; (20000668 <main+0x46c>)
20000526:	2293      	movs	r2, #147	; 0x93
20000528:	00d2      	lsls	r2, r2, #3
2000052a:	4694      	mov	ip, r2
2000052c:	44bc      	add	ip, r7
2000052e:	4463      	add	r3, ip
20000530:	4a46      	ldr	r2, [pc, #280]	; (2000064c <main+0x450>)
20000532:	60da      	str	r2, [r3, #12]
	GameObject fire3_indoors;
	init_fire( &fire3_indoors );
20000534:	23ba      	movs	r3, #186	; 0xba
20000536:	005b      	lsls	r3, r3, #1
20000538:	18fb      	adds	r3, r7, r3
2000053a:	0018      	movs	r0, r3
2000053c:	f001 f9a8 	bl	20001890 <init_fire>
	fire3_indoors.update = gameObjectUpdate;
20000540:	4b4a      	ldr	r3, [pc, #296]	; (2000066c <main+0x470>)
20000542:	2293      	movs	r2, #147	; 0x93
20000544:	00d2      	lsls	r2, r2, #3
20000546:	4694      	mov	ip, r2
20000548:	44bc      	add	ip, r7
2000054a:	4463      	add	r3, ip
2000054c:	4a3f      	ldr	r2, [pc, #252]	; (2000064c <main+0x450>)
2000054e:	60da      	str	r2, [r3, #12]
	GameObject fires[] = {fire1_indoors, fire2_indoors, fire3_indoors};
20000550:	4b47      	ldr	r3, [pc, #284]	; (20000670 <main+0x474>)
20000552:	2293      	movs	r2, #147	; 0x93
20000554:	00d2      	lsls	r2, r2, #3
20000556:	18ba      	adds	r2, r7, r2
20000558:	18d1      	adds	r1, r2, r3
2000055a:	4b42      	ldr	r3, [pc, #264]	; (20000664 <main+0x468>)
2000055c:	2293      	movs	r2, #147	; 0x93
2000055e:	00d2      	lsls	r2, r2, #3
20000560:	18ba      	adds	r2, r7, r2
20000562:	18d2      	adds	r2, r2, r3
20000564:	000b      	movs	r3, r1
20000566:	ca13      	ldmia	r2!, {r0, r1, r4}
20000568:	c313      	stmia	r3!, {r0, r1, r4}
2000056a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000056c:	c313      	stmia	r3!, {r0, r1, r4}
2000056e:	ca13      	ldmia	r2!, {r0, r1, r4}
20000570:	c313      	stmia	r3!, {r0, r1, r4}
20000572:	4b3f      	ldr	r3, [pc, #252]	; (20000670 <main+0x474>)
20000574:	2293      	movs	r2, #147	; 0x93
20000576:	00d2      	lsls	r2, r2, #3
20000578:	4694      	mov	ip, r2
2000057a:	44bc      	add	ip, r7
2000057c:	4463      	add	r3, ip
2000057e:	4a3a      	ldr	r2, [pc, #232]	; (20000668 <main+0x46c>)
20000580:	2193      	movs	r1, #147	; 0x93
20000582:	00c9      	lsls	r1, r1, #3
20000584:	468c      	mov	ip, r1
20000586:	44bc      	add	ip, r7
20000588:	4462      	add	r2, ip
2000058a:	3324      	adds	r3, #36	; 0x24
2000058c:	ca13      	ldmia	r2!, {r0, r1, r4}
2000058e:	c313      	stmia	r3!, {r0, r1, r4}
20000590:	ca13      	ldmia	r2!, {r0, r1, r4}
20000592:	c313      	stmia	r3!, {r0, r1, r4}
20000594:	ca13      	ldmia	r2!, {r0, r1, r4}
20000596:	c313      	stmia	r3!, {r0, r1, r4}
20000598:	4b35      	ldr	r3, [pc, #212]	; (20000670 <main+0x474>)
2000059a:	2293      	movs	r2, #147	; 0x93
2000059c:	00d2      	lsls	r2, r2, #3
2000059e:	4694      	mov	ip, r2
200005a0:	44bc      	add	ip, r7
200005a2:	4463      	add	r3, ip
200005a4:	4a31      	ldr	r2, [pc, #196]	; (2000066c <main+0x470>)
200005a6:	2193      	movs	r1, #147	; 0x93
200005a8:	00c9      	lsls	r1, r1, #3
200005aa:	468c      	mov	ip, r1
200005ac:	44bc      	add	ip, r7
200005ae:	4462      	add	r2, ip
200005b0:	3348      	adds	r3, #72	; 0x48
200005b2:	ca13      	ldmia	r2!, {r0, r1, r4}
200005b4:	c313      	stmia	r3!, {r0, r1, r4}
200005b6:	ca13      	ldmia	r2!, {r0, r1, r4}
200005b8:	c313      	stmia	r3!, {r0, r1, r4}
200005ba:	ca13      	ldmia	r2!, {r0, r1, r4}
200005bc:	c313      	stmia	r3!, {r0, r1, r4}
	
	
	fire2.xPos = 98;
200005be:	4b2d      	ldr	r3, [pc, #180]	; (20000674 <main+0x478>)
200005c0:	2293      	movs	r2, #147	; 0x93
200005c2:	00d2      	lsls	r2, r2, #3
200005c4:	4694      	mov	ip, r2
200005c6:	44bc      	add	ip, r7
200005c8:	4463      	add	r3, ip
200005ca:	2262      	movs	r2, #98	; 0x62
200005cc:	605a      	str	r2, [r3, #4]
	fire2.yPos = 26-12;
200005ce:	4b29      	ldr	r3, [pc, #164]	; (20000674 <main+0x478>)
200005d0:	2293      	movs	r2, #147	; 0x93
200005d2:	00d2      	lsls	r2, r2, #3
200005d4:	4694      	mov	ip, r2
200005d6:	44bc      	add	ip, r7
200005d8:	4463      	add	r3, ip
200005da:	220e      	movs	r2, #14
200005dc:	609a      	str	r2, [r3, #8]
	fire3.xPos = 115;
200005de:	4b26      	ldr	r3, [pc, #152]	; (20000678 <main+0x47c>)
200005e0:	2293      	movs	r2, #147	; 0x93
200005e2:	00d2      	lsls	r2, r2, #3
200005e4:	4694      	mov	ip, r2
200005e6:	44bc      	add	ip, r7
200005e8:	4463      	add	r3, ip
200005ea:	2273      	movs	r2, #115	; 0x73
200005ec:	605a      	str	r2, [r3, #4]
	fire3.yPos = 34-12;
200005ee:	4b22      	ldr	r3, [pc, #136]	; (20000678 <main+0x47c>)
200005f0:	2293      	movs	r2, #147	; 0x93
200005f2:	00d2      	lsls	r2, r2, #3
200005f4:	4694      	mov	ip, r2
200005f6:	e041      	b.n	2000067c <main+0x480>
200005f8:	fffffb64 			; <UNDEFINED> instruction: 0xfffffb64
200005fc:	00000444 	andeq	r0, r0, r4, asr #8
20000600:	0000045c 	andeq	r0, r0, ip, asr r4
20000604:	2000462c 	andcs	r4, r0, ip, lsr #12
20000608:	200046ec 	andcs	r4, r0, ip, ror #13
2000060c:	200046d8 	ldrdcs	r4, [r0], -r8
20000610:	200019b5 			; <UNDEFINED> instruction: 0x200019b5
20000614:	00000414 	andeq	r0, r0, r4, lsl r4
20000618:	200046fc 	strdcs	r4, [r0], -ip
2000061c:	200046c8 	andcs	r4, r0, r8, asr #13
20000620:	200046dc 	ldrdcs	r4, [r0], -ip
20000624:	200046e8 	andcs	r4, r0, r8, ror #13
20000628:	20004664 	andcs	r4, r0, r4, ror #12
2000062c:	200046ac 	andcs	r4, r0, ip, lsr #13
20000630:	fffffef8 			; <UNDEFINED> instruction: 0xfffffef8
20000634:	20004654 	andcs	r4, r0, r4, asr r6
20000638:	200046e0 	andcs	r4, r0, r0, ror #13
2000063c:	20004690 	mulcs	r0, r0, r6
20000640:	fffffed4 			; <UNDEFINED> instruction: 0xfffffed4
20000644:	fffffeb0 			; <UNDEFINED> instruction: 0xfffffeb0
20000648:	fffffe68 			; <UNDEFINED> instruction: 0xfffffe68
2000064c:	200016c5 	andcs	r1, r0, r5, asr #13
20000650:	fffffe44 			; <UNDEFINED> instruction: 0xfffffe44
20000654:	fffffe20 			; <UNDEFINED> instruction: 0xfffffe20
20000658:	fffffdfc 			; <UNDEFINED> instruction: 0xfffffdfc
2000065c:	200023b5 			; <UNDEFINED> instruction: 0x200023b5
20000660:	fffffdd8 			; <UNDEFINED> instruction: 0xfffffdd8
20000664:	fffffd24 			; <UNDEFINED> instruction: 0xfffffd24
20000668:	fffffd00 			; <UNDEFINED> instruction: 0xfffffd00
2000066c:	fffffcdc 			; <UNDEFINED> instruction: 0xfffffcdc
20000670:	fffffc70 			; <UNDEFINED> instruction: 0xfffffc70
20000674:	fffffdb4 			; <UNDEFINED> instruction: 0xfffffdb4
20000678:	fffffd90 			; <UNDEFINED> instruction: 0xfffffd90
2000067c:	44bc      	add	ip, r7
2000067e:	4463      	add	r3, ip
20000680:	2216      	movs	r2, #22
20000682:	609a      	str	r2, [r3, #8]
	
	fire1.xPos = 85;
20000684:	4bea      	ldr	r3, [pc, #936]	; (20000a30 <main+0x834>)
20000686:	2293      	movs	r2, #147	; 0x93
20000688:	00d2      	lsls	r2, r2, #3
2000068a:	4694      	mov	ip, r2
2000068c:	44bc      	add	ip, r7
2000068e:	4463      	add	r3, ip
20000690:	2255      	movs	r2, #85	; 0x55
20000692:	605a      	str	r2, [r3, #4]
	fire1.yPos = 23-12;
20000694:	4be6      	ldr	r3, [pc, #920]	; (20000a30 <main+0x834>)
20000696:	2293      	movs	r2, #147	; 0x93
20000698:	00d2      	lsls	r2, r2, #3
2000069a:	4694      	mov	ip, r2
2000069c:	44bc      	add	ip, r7
2000069e:	4463      	add	r3, ip
200006a0:	220b      	movs	r2, #11
200006a2:	609a      	str	r2, [r3, #8]
	fire4.xPos = 71;
200006a4:	4be3      	ldr	r3, [pc, #908]	; (20000a34 <main+0x838>)
200006a6:	2293      	movs	r2, #147	; 0x93
200006a8:	00d2      	lsls	r2, r2, #3
200006aa:	4694      	mov	ip, r2
200006ac:	44bc      	add	ip, r7
200006ae:	4463      	add	r3, ip
200006b0:	2247      	movs	r2, #71	; 0x47
200006b2:	605a      	str	r2, [r3, #4]
	fire4.yPos = 27-11;
200006b4:	4bdf      	ldr	r3, [pc, #892]	; (20000a34 <main+0x838>)
200006b6:	2293      	movs	r2, #147	; 0x93
200006b8:	00d2      	lsls	r2, r2, #3
200006ba:	4694      	mov	ip, r2
200006bc:	44bc      	add	ip, r7
200006be:	4463      	add	r3, ip
200006c0:	2210      	movs	r2, #16
200006c2:	609a      	str	r2, [r3, #8]
	//draw_game_object(&castleObj);
	
	fire2.animation_speed = 2;
200006c4:	4bdc      	ldr	r3, [pc, #880]	; (20000a38 <main+0x83c>)
200006c6:	2293      	movs	r2, #147	; 0x93
200006c8:	00d2      	lsls	r2, r2, #3
200006ca:	4694      	mov	ip, r2
200006cc:	44bc      	add	ip, r7
200006ce:	4463      	add	r3, ip
200006d0:	2202      	movs	r2, #2
200006d2:	61da      	str	r2, [r3, #28]
	fire3.animation_speed = 2;
200006d4:	4bd9      	ldr	r3, [pc, #868]	; (20000a3c <main+0x840>)
200006d6:	2293      	movs	r2, #147	; 0x93
200006d8:	00d2      	lsls	r2, r2, #3
200006da:	4694      	mov	ip, r2
200006dc:	44bc      	add	ip, r7
200006de:	4463      	add	r3, ip
200006e0:	2202      	movs	r2, #2
200006e2:	61da      	str	r2, [r3, #28]
	fire1.animation_speed = 2;
200006e4:	4bd2      	ldr	r3, [pc, #840]	; (20000a30 <main+0x834>)
200006e6:	2293      	movs	r2, #147	; 0x93
200006e8:	00d2      	lsls	r2, r2, #3
200006ea:	4694      	mov	ip, r2
200006ec:	44bc      	add	ip, r7
200006ee:	4463      	add	r3, ip
200006f0:	2202      	movs	r2, #2
200006f2:	61da      	str	r2, [r3, #28]
	fire4.animation_speed = 2;
200006f4:	4bcf      	ldr	r3, [pc, #828]	; (20000a34 <main+0x838>)
200006f6:	2293      	movs	r2, #147	; 0x93
200006f8:	00d2      	lsls	r2, r2, #3
200006fa:	4694      	mov	ip, r2
200006fc:	44bc      	add	ip, r7
200006fe:	4463      	add	r3, ip
20000700:	2202      	movs	r2, #2
20000702:	61da      	str	r2, [r3, #28]
	
	fire2.update = gameObjectUpdate;
20000704:	4bcc      	ldr	r3, [pc, #816]	; (20000a38 <main+0x83c>)
20000706:	2293      	movs	r2, #147	; 0x93
20000708:	00d2      	lsls	r2, r2, #3
2000070a:	4694      	mov	ip, r2
2000070c:	44bc      	add	ip, r7
2000070e:	4463      	add	r3, ip
20000710:	4acb      	ldr	r2, [pc, #812]	; (20000a40 <main+0x844>)
20000712:	60da      	str	r2, [r3, #12]
	fire3.update = gameObjectUpdate;
20000714:	4bc9      	ldr	r3, [pc, #804]	; (20000a3c <main+0x840>)
20000716:	2293      	movs	r2, #147	; 0x93
20000718:	00d2      	lsls	r2, r2, #3
2000071a:	4694      	mov	ip, r2
2000071c:	44bc      	add	ip, r7
2000071e:	4463      	add	r3, ip
20000720:	4ac7      	ldr	r2, [pc, #796]	; (20000a40 <main+0x844>)
20000722:	60da      	str	r2, [r3, #12]
	fire1.update = gameObjectUpdate;
20000724:	4bc2      	ldr	r3, [pc, #776]	; (20000a30 <main+0x834>)
20000726:	2293      	movs	r2, #147	; 0x93
20000728:	00d2      	lsls	r2, r2, #3
2000072a:	4694      	mov	ip, r2
2000072c:	44bc      	add	ip, r7
2000072e:	4463      	add	r3, ip
20000730:	4ac3      	ldr	r2, [pc, #780]	; (20000a40 <main+0x844>)
20000732:	60da      	str	r2, [r3, #12]
	fire4.update = gameObjectUpdate;
20000734:	4bbf      	ldr	r3, [pc, #764]	; (20000a34 <main+0x838>)
20000736:	2293      	movs	r2, #147	; 0x93
20000738:	00d2      	lsls	r2, r2, #3
2000073a:	4694      	mov	ip, r2
2000073c:	44bc      	add	ip, r7
2000073e:	4463      	add	r3, ip
20000740:	4abf      	ldr	r2, [pc, #764]	; (20000a40 <main+0x844>)
20000742:	60da      	str	r2, [r3, #12]
	SlowText text8;
	SlowText text9;
	SlowText text10;
	SlowText text11;
	SlowText text12;
	init_slow_text(&text_kra, "*KRA!* *KRA!*", "   ", 1);
20000744:	4abf      	ldr	r2, [pc, #764]	; (20000a44 <main+0x848>)
20000746:	49c0      	ldr	r1, [pc, #768]	; (20000a48 <main+0x84c>)
20000748:	23f4      	movs	r3, #244	; 0xf4
2000074a:	18f8      	adds	r0, r7, r3
2000074c:	2301      	movs	r3, #1
2000074e:	f003 fce2 	bl	20004116 <init_slow_text>
	init_slow_text(&text1, "For centuries the", "DILs-witches have", 1);
20000752:	4abe      	ldr	r2, [pc, #760]	; (20000a4c <main+0x850>)
20000754:	49be      	ldr	r1, [pc, #760]	; (20000a50 <main+0x854>)
20000756:	23e0      	movs	r3, #224	; 0xe0
20000758:	18f8      	adds	r0, r7, r3
2000075a:	2301      	movs	r3, #1
2000075c:	f003 fcdb 	bl	20004116 <init_slow_text>
	init_slow_text(&text2, "coiled in fear,", "    ", 1);
20000760:	4abc      	ldr	r2, [pc, #752]	; (20000a54 <main+0x858>)
20000762:	49bd      	ldr	r1, [pc, #756]	; (20000a58 <main+0x85c>)
20000764:	23cc      	movs	r3, #204	; 0xcc
20000766:	18f8      	adds	r0, r7, r3
20000768:	2301      	movs	r3, #1
2000076a:	f003 fcd4 	bl	20004116 <init_slow_text>
	init_slow_text(&text3, "whenever they hear", "that a DIPs-witch", 1);
2000076e:	4abb      	ldr	r2, [pc, #748]	; (20000a5c <main+0x860>)
20000770:	49bb      	ldr	r1, [pc, #748]	; (20000a60 <main+0x864>)
20000772:	23b8      	movs	r3, #184	; 0xb8
20000774:	18f8      	adds	r0, r7, r3
20000776:	2301      	movs	r3, #1
20000778:	f003 fccd 	bl	20004116 <init_slow_text>
	init_slow_text(&text4, "is near.", "   ", 1);
2000077c:	4ab1      	ldr	r2, [pc, #708]	; (20000a44 <main+0x848>)
2000077e:	49b9      	ldr	r1, [pc, #740]	; (20000a64 <main+0x868>)
20000780:	23a4      	movs	r3, #164	; 0xa4
20000782:	18f8      	adds	r0, r7, r3
20000784:	2301      	movs	r3, #1
20000786:	f003 fcc6 	bl	20004116 <init_slow_text>
	init_slow_text(&text5, "So it is quite", "surprising, finding", 1);
2000078a:	4ab7      	ldr	r2, [pc, #732]	; (20000a68 <main+0x86c>)
2000078c:	49b7      	ldr	r1, [pc, #732]	; (20000a6c <main+0x870>)
2000078e:	2390      	movs	r3, #144	; 0x90
20000790:	18f8      	adds	r0, r7, r3
20000792:	2301      	movs	r3, #1
20000794:	f003 fcbf 	bl	20004116 <init_slow_text>
	init_slow_text(&text6, "you here,", "    ", 1);
20000798:	4aae      	ldr	r2, [pc, #696]	; (20000a54 <main+0x858>)
2000079a:	49b5      	ldr	r1, [pc, #724]	; (20000a70 <main+0x874>)
2000079c:	237c      	movs	r3, #124	; 0x7c
2000079e:	18f8      	adds	r0, r7, r3
200007a0:	2301      	movs	r3, #1
200007a2:	f003 fcb8 	bl	20004116 <init_slow_text>
	init_slow_text(&text7, "queen Daffo of DILs,", "heir to king Lear.", 1);
200007a6:	4ab3      	ldr	r2, [pc, #716]	; (20000a74 <main+0x878>)
200007a8:	49b3      	ldr	r1, [pc, #716]	; (20000a78 <main+0x87c>)
200007aa:	2368      	movs	r3, #104	; 0x68
200007ac:	18f8      	adds	r0, r7, r3
200007ae:	2301      	movs	r3, #1
200007b0:	f003 fcb1 	bl	20004116 <init_slow_text>
	init_slow_text(&text8, "But maybe you're", "tempted, to loot", 1);
200007b4:	4ab1      	ldr	r2, [pc, #708]	; (20000a7c <main+0x880>)
200007b6:	49b2      	ldr	r1, [pc, #712]	; (20000a80 <main+0x884>)
200007b8:	2354      	movs	r3, #84	; 0x54
200007ba:	18f8      	adds	r0, r7, r3
200007bc:	2301      	movs	r3, #1
200007be:	f003 fcaa 	bl	20004116 <init_slow_text>
	init_slow_text(&text9, "from the riches,", "    ", 1);
200007c2:	4aa4      	ldr	r2, [pc, #656]	; (20000a54 <main+0x858>)
200007c4:	49af      	ldr	r1, [pc, #700]	; (20000a84 <main+0x888>)
200007c6:	2340      	movs	r3, #64	; 0x40
200007c8:	18f8      	adds	r0, r7, r3
200007ca:	2301      	movs	r3, #1
200007cc:	f003 fca3 	bl	20004116 <init_slow_text>
	init_slow_text(&text12, "wicked DIPs-witches.", "    ", 1);
200007d0:	4aa0      	ldr	r2, [pc, #640]	; (20000a54 <main+0x858>)
200007d2:	49ad      	ldr	r1, [pc, #692]	; (20000a88 <main+0x88c>)
200007d4:	1d38      	adds	r0, r7, #4
200007d6:	2301      	movs	r3, #1
200007d8:	f003 fc9d 	bl	20004116 <init_slow_text>
	init_slow_text(&text10, "so grippily trea-", "sured by", 1);
200007dc:	4aab      	ldr	r2, [pc, #684]	; (20000a8c <main+0x890>)
200007de:	49ac      	ldr	r1, [pc, #688]	; (20000a90 <main+0x894>)
200007e0:	232c      	movs	r3, #44	; 0x2c
200007e2:	18f8      	adds	r0, r7, r3
200007e4:	2301      	movs	r3, #1
200007e6:	f003 fc96 	bl	20004116 <init_slow_text>
	init_slow_text(&text11, "Enter, brave witch,", "- reset the switch!", 1);
200007ea:	4aaa      	ldr	r2, [pc, #680]	; (20000a94 <main+0x898>)
200007ec:	49aa      	ldr	r1, [pc, #680]	; (20000a98 <main+0x89c>)
200007ee:	2318      	movs	r3, #24
200007f0:	18f8      	adds	r0, r7, r3
200007f2:	2301      	movs	r3, #1
200007f4:	f003 fc8f 	bl	20004116 <init_slow_text>
	//ascii_write_part("Yeeaaah!!!", "This is working! :)", 5, 10);
	set_up_ascii();
200007f8:	f003 fb6a 	bl	20003ed0 <set_up_ascii>
	set_up_DIL();
200007fc:	f003 f998 	bl	20003b30 <set_up_DIL>
	clear_ascii();
20000800:	f003 fb6f 	bl	20003ee2 <clear_ascii>
	
	int is_climbing = 0;
20000804:	2300      	movs	r3, #0
20000806:	4aa5      	ldr	r2, [pc, #660]	; (20000a9c <main+0x8a0>)
20000808:	18ba      	adds	r2, r7, r2
2000080a:	6013      	str	r3, [r2, #0]
	int has_climbed = 0;
2000080c:	2300      	movs	r3, #0
2000080e:	2292      	movs	r2, #146	; 0x92
20000810:	00d2      	lsls	r2, r2, #3
20000812:	18ba      	adds	r2, r7, r2
20000814:	6013      	str	r3, [r2, #0]
	int game_over = 0;
20000816:	2300      	movs	r3, #0
20000818:	4aa1      	ldr	r2, [pc, #644]	; (20000aa0 <main+0x8a4>)
2000081a:	18ba      	adds	r2, r7, r2
2000081c:	6013      	str	r3, [r2, #0]
	int game_over_adder = 0;
2000081e:	2300      	movs	r3, #0
20000820:	2291      	movs	r2, #145	; 0x91
20000822:	00d2      	lsls	r2, r2, #3
20000824:	18ba      	adds	r2, r7, r2
20000826:	6013      	str	r3, [r2, #0]
	int no_DIP = 0;
20000828:	2300      	movs	r3, #0
2000082a:	4a9e      	ldr	r2, [pc, #632]	; (20000aa4 <main+0x8a8>)
2000082c:	18ba      	adds	r2, r7, r2
2000082e:	6013      	str	r3, [r2, #0]
	int exploding = 0;
20000830:	2300      	movs	r3, #0
20000832:	2290      	movs	r2, #144	; 0x90
20000834:	00d2      	lsls	r2, r2, #3
20000836:	18ba      	adds	r2, r7, r2
20000838:	6013      	str	r3, [r2, #0]
	
	current_screen = RESET_GAME;
2000083a:	4b9b      	ldr	r3, [pc, #620]	; (20000aa8 <main+0x8ac>)
2000083c:	220a      	movs	r2, #10
2000083e:	601a      	str	r2, [r3, #0]
	
	//Game loop
	while(1) {
			
		switch(current_screen) {
20000840:	4b99      	ldr	r3, [pc, #612]	; (20000aa8 <main+0x8ac>)
20000842:	681b      	ldr	r3, [r3, #0]
20000844:	2b01      	cmp	r3, #1
20000846:	d020      	beq.n	2000088a <main+0x68e>
20000848:	dc02      	bgt.n	20000850 <main+0x654>
2000084a:	2b00      	cmp	r3, #0
2000084c:	d011      	beq.n	20000872 <main+0x676>
2000084e:	e7f7      	b.n	20000840 <main+0x644>
20000850:	2b02      	cmp	r3, #2
20000852:	d100      	bne.n	20000856 <main+0x65a>
20000854:	e2ba      	b.n	20000dcc <main+0xbd0>
20000856:	2b0a      	cmp	r3, #10
20000858:	d101      	bne.n	2000085e <main+0x662>
2000085a:	f000 fe51 	bl	20001500 <main+0x1304>
2000085e:	e7ef      	b.n	20000840 <main+0x644>
			
			case SWITCH_LOCK: //before

				while(read_DIL() == 0){
					draw_game_object(&pressObj);
20000860:	23f9      	movs	r3, #249	; 0xf9
20000862:	009b      	lsls	r3, r3, #2
20000864:	18fb      	adds	r3, r7, r3
20000866:	0018      	movs	r0, r3
20000868:	f003 f8c4 	bl	200039f4 <draw_game_object>
					show_frame(1);
2000086c:	2001      	movs	r0, #1
2000086e:	f003 f902 	bl	20003a76 <show_frame>
				while(read_DIL() == 0){
20000872:	f003 f969 	bl	20003b48 <read_DIL>
20000876:	1e03      	subs	r3, r0, #0
20000878:	d0f2      	beq.n	20000860 <main+0x664>
				}
				
				counter = 0;
2000087a:	4b8c      	ldr	r3, [pc, #560]	; (20000aac <main+0x8b0>)
2000087c:	2200      	movs	r2, #0
2000087e:	601a      	str	r2, [r3, #0]
				current_screen = START_SCREEN;
20000880:	4b89      	ldr	r3, [pc, #548]	; (20000aa8 <main+0x8ac>)
20000882:	2201      	movs	r2, #1
20000884:	601a      	str	r2, [r3, #0]
				break;
20000886:	f000 fee9 	bl	2000165c <main+0x1460>
			
			
			case START_SCREEN: //outside
				
				counter++;
2000088a:	4b88      	ldr	r3, [pc, #544]	; (20000aac <main+0x8b0>)
2000088c:	681b      	ldr	r3, [r3, #0]
2000088e:	1c5a      	adds	r2, r3, #1
20000890:	4b86      	ldr	r3, [pc, #536]	; (20000aac <main+0x8b0>)
20000892:	601a      	str	r2, [r3, #0]
				
				if(titleObj.yPos < 1) {
20000894:	2384      	movs	r3, #132	; 0x84
20000896:	00db      	lsls	r3, r3, #3
20000898:	18fb      	adds	r3, r7, r3
2000089a:	689b      	ldr	r3, [r3, #8]
2000089c:	2b00      	cmp	r3, #0
2000089e:	dc08      	bgt.n	200008b2 <main+0x6b6>
					titleObj.yPos++;
200008a0:	2384      	movs	r3, #132	; 0x84
200008a2:	00db      	lsls	r3, r3, #3
200008a4:	18fb      	adds	r3, r7, r3
200008a6:	689b      	ldr	r3, [r3, #8]
200008a8:	1c5a      	adds	r2, r3, #1
200008aa:	2384      	movs	r3, #132	; 0x84
200008ac:	00db      	lsls	r3, r3, #3
200008ae:	18fb      	adds	r3, r7, r3
200008b0:	609a      	str	r2, [r3, #8]
				}
				
				draw_game_object(&castleObj);
200008b2:	23ea      	movs	r3, #234	; 0xea
200008b4:	009b      	lsls	r3, r3, #2
200008b6:	18fb      	adds	r3, r7, r3
200008b8:	0018      	movs	r0, r3
200008ba:	f003 f89b 	bl	200039f4 <draw_game_object>
				draw_game_object(&fire2);
200008be:	2393      	movs	r3, #147	; 0x93
200008c0:	009b      	lsls	r3, r3, #2
200008c2:	18fb      	adds	r3, r7, r3
200008c4:	0018      	movs	r0, r3
200008c6:	f003 f895 	bl	200039f4 <draw_game_object>
				draw_game_object(&fire3);
200008ca:	238a      	movs	r3, #138	; 0x8a
200008cc:	009b      	lsls	r3, r3, #2
200008ce:	18fb      	adds	r3, r7, r3
200008d0:	0018      	movs	r0, r3
200008d2:	f003 f88f 	bl	200039f4 <draw_game_object>
				draw_game_object(&fire1);
200008d6:	23f0      	movs	r3, #240	; 0xf0
200008d8:	005b      	lsls	r3, r3, #1
200008da:	18fb      	adds	r3, r7, r3
200008dc:	0018      	movs	r0, r3
200008de:	f003 f889 	bl	200039f4 <draw_game_object>
				draw_game_object(&fire4);
200008e2:	2381      	movs	r3, #129	; 0x81
200008e4:	009b      	lsls	r3, r3, #2
200008e6:	18fb      	adds	r3, r7, r3
200008e8:	0018      	movs	r0, r3
200008ea:	f003 f883 	bl	200039f4 <draw_game_object>
				draw_game_object(&titleObj);
200008ee:	2384      	movs	r3, #132	; 0x84
200008f0:	00db      	lsls	r3, r3, #3
200008f2:	18fb      	adds	r3, r7, r3
200008f4:	0018      	movs	r0, r3
200008f6:	f003 f87d 	bl	200039f4 <draw_game_object>
				draw_game_object(&bird);
200008fa:	23b7      	movs	r3, #183	; 0xb7
200008fc:	009b      	lsls	r3, r3, #2
200008fe:	18fb      	adds	r3, r7, r3
20000900:	0018      	movs	r0, r3
20000902:	f003 f877 	bl	200039f4 <draw_game_object>
				show_frame(1);
20000906:	2001      	movs	r0, #1
20000908:	f003 f8b5 	bl	20003a76 <show_frame>
				
				static int long_text = 40;
				static int short_text = 20;
				static int delay_until_text = 130;
				
				if (counter < delay_until_text - 55 && counter > delay_until_text - 90)
2000090c:	4b68      	ldr	r3, [pc, #416]	; (20000ab0 <main+0x8b4>)
2000090e:	681b      	ldr	r3, [r3, #0]
20000910:	3b37      	subs	r3, #55	; 0x37
20000912:	001a      	movs	r2, r3
20000914:	4b65      	ldr	r3, [pc, #404]	; (20000aac <main+0x8b0>)
20000916:	681b      	ldr	r3, [r3, #0]
20000918:	429a      	cmp	r2, r3
2000091a:	dd13      	ble.n	20000944 <main+0x748>
2000091c:	4b64      	ldr	r3, [pc, #400]	; (20000ab0 <main+0x8b4>)
2000091e:	681b      	ldr	r3, [r3, #0]
20000920:	3b5a      	subs	r3, #90	; 0x5a
20000922:	001a      	movs	r2, r3
20000924:	4b61      	ldr	r3, [pc, #388]	; (20000aac <main+0x8b0>)
20000926:	681b      	ldr	r3, [r3, #0]
20000928:	429a      	cmp	r2, r3
2000092a:	da0b      	bge.n	20000944 <main+0x748>
					text_kra.display(&text_kra, 20);
2000092c:	4b61      	ldr	r3, [pc, #388]	; (20000ab4 <main+0x8b8>)
2000092e:	2293      	movs	r2, #147	; 0x93
20000930:	00d2      	lsls	r2, r2, #3
20000932:	4694      	mov	ip, r2
20000934:	44bc      	add	ip, r7
20000936:	4463      	add	r3, ip
20000938:	691b      	ldr	r3, [r3, #16]
2000093a:	22f4      	movs	r2, #244	; 0xf4
2000093c:	18ba      	adds	r2, r7, r2
2000093e:	2114      	movs	r1, #20
20000940:	0010      	movs	r0, r2
20000942:	4798      	blx	r3
				if (counter == delay_until_text - 25)
20000944:	4b5a      	ldr	r3, [pc, #360]	; (20000ab0 <main+0x8b4>)
20000946:	681b      	ldr	r3, [r3, #0]
20000948:	3b19      	subs	r3, #25
2000094a:	001a      	movs	r2, r3
2000094c:	4b57      	ldr	r3, [pc, #348]	; (20000aac <main+0x8b0>)
2000094e:	681b      	ldr	r3, [r3, #0]
20000950:	429a      	cmp	r2, r3
20000952:	d101      	bne.n	20000958 <main+0x75c>
					clear_ascii();
20000954:	f003 fac5 	bl	20003ee2 <clear_ascii>
				
				if (counter < delay_until_text);
20000958:	4b54      	ldr	r3, [pc, #336]	; (20000aac <main+0x8b0>)
2000095a:	681a      	ldr	r2, [r3, #0]
2000095c:	4b54      	ldr	r3, [pc, #336]	; (20000ab0 <main+0x8b4>)
2000095e:	681b      	ldr	r3, [r3, #0]
20000960:	429a      	cmp	r2, r3
20000962:	da00      	bge.n	20000966 <main+0x76a>
20000964:	e1bd      	b.n	20000ce2 <main+0xae6>
				else if (counter < delay_until_text + 1*long_text)
20000966:	4b52      	ldr	r3, [pc, #328]	; (20000ab0 <main+0x8b4>)
20000968:	681a      	ldr	r2, [r3, #0]
2000096a:	4b53      	ldr	r3, [pc, #332]	; (20000ab8 <main+0x8bc>)
2000096c:	681b      	ldr	r3, [r3, #0]
2000096e:	18d2      	adds	r2, r2, r3
20000970:	4b4e      	ldr	r3, [pc, #312]	; (20000aac <main+0x8b0>)
20000972:	681b      	ldr	r3, [r3, #0]
20000974:	429a      	cmp	r2, r3
20000976:	dd0c      	ble.n	20000992 <main+0x796>
					text1.display(&text1, 20);
20000978:	4b50      	ldr	r3, [pc, #320]	; (20000abc <main+0x8c0>)
2000097a:	2293      	movs	r2, #147	; 0x93
2000097c:	00d2      	lsls	r2, r2, #3
2000097e:	4694      	mov	ip, r2
20000980:	44bc      	add	ip, r7
20000982:	4463      	add	r3, ip
20000984:	691b      	ldr	r3, [r3, #16]
20000986:	22e0      	movs	r2, #224	; 0xe0
20000988:	18ba      	adds	r2, r7, r2
2000098a:	2114      	movs	r1, #20
2000098c:	0010      	movs	r0, r2
2000098e:	4798      	blx	r3
20000990:	e1a7      	b.n	20000ce2 <main+0xae6>
				else if(counter < delay_until_text + 1*long_text + 1*short_text)
20000992:	4b47      	ldr	r3, [pc, #284]	; (20000ab0 <main+0x8b4>)
20000994:	681a      	ldr	r2, [r3, #0]
20000996:	4b48      	ldr	r3, [pc, #288]	; (20000ab8 <main+0x8bc>)
20000998:	681b      	ldr	r3, [r3, #0]
2000099a:	18d2      	adds	r2, r2, r3
2000099c:	4b48      	ldr	r3, [pc, #288]	; (20000ac0 <main+0x8c4>)
2000099e:	681b      	ldr	r3, [r3, #0]
200009a0:	18d2      	adds	r2, r2, r3
200009a2:	4b42      	ldr	r3, [pc, #264]	; (20000aac <main+0x8b0>)
200009a4:	681b      	ldr	r3, [r3, #0]
200009a6:	429a      	cmp	r2, r3
200009a8:	dd0c      	ble.n	200009c4 <main+0x7c8>
					text2.display(&text2, 20);
200009aa:	4b46      	ldr	r3, [pc, #280]	; (20000ac4 <main+0x8c8>)
200009ac:	2293      	movs	r2, #147	; 0x93
200009ae:	00d2      	lsls	r2, r2, #3
200009b0:	4694      	mov	ip, r2
200009b2:	44bc      	add	ip, r7
200009b4:	4463      	add	r3, ip
200009b6:	691b      	ldr	r3, [r3, #16]
200009b8:	22cc      	movs	r2, #204	; 0xcc
200009ba:	18ba      	adds	r2, r7, r2
200009bc:	2114      	movs	r1, #20
200009be:	0010      	movs	r0, r2
200009c0:	4798      	blx	r3
200009c2:	e18e      	b.n	20000ce2 <main+0xae6>
				else if(counter < delay_until_text + 2*long_text + 1*short_text)
200009c4:	4b3c      	ldr	r3, [pc, #240]	; (20000ab8 <main+0x8bc>)
200009c6:	681b      	ldr	r3, [r3, #0]
200009c8:	005a      	lsls	r2, r3, #1
200009ca:	4b39      	ldr	r3, [pc, #228]	; (20000ab0 <main+0x8b4>)
200009cc:	681b      	ldr	r3, [r3, #0]
200009ce:	18d2      	adds	r2, r2, r3
200009d0:	4b3b      	ldr	r3, [pc, #236]	; (20000ac0 <main+0x8c4>)
200009d2:	681b      	ldr	r3, [r3, #0]
200009d4:	18d2      	adds	r2, r2, r3
200009d6:	4b35      	ldr	r3, [pc, #212]	; (20000aac <main+0x8b0>)
200009d8:	681b      	ldr	r3, [r3, #0]
200009da:	429a      	cmp	r2, r3
200009dc:	dd0c      	ble.n	200009f8 <main+0x7fc>
					text3.display(&text3, 20);
200009de:	4b3a      	ldr	r3, [pc, #232]	; (20000ac8 <main+0x8cc>)
200009e0:	2293      	movs	r2, #147	; 0x93
200009e2:	00d2      	lsls	r2, r2, #3
200009e4:	4694      	mov	ip, r2
200009e6:	44bc      	add	ip, r7
200009e8:	4463      	add	r3, ip
200009ea:	691b      	ldr	r3, [r3, #16]
200009ec:	22b8      	movs	r2, #184	; 0xb8
200009ee:	18ba      	adds	r2, r7, r2
200009f0:	2114      	movs	r1, #20
200009f2:	0010      	movs	r0, r2
200009f4:	4798      	blx	r3
200009f6:	e174      	b.n	20000ce2 <main+0xae6>
				else if(counter < delay_until_text + 2*long_text + 2*short_text)
200009f8:	4b2f      	ldr	r3, [pc, #188]	; (20000ab8 <main+0x8bc>)
200009fa:	681b      	ldr	r3, [r3, #0]
200009fc:	005a      	lsls	r2, r3, #1
200009fe:	4b2c      	ldr	r3, [pc, #176]	; (20000ab0 <main+0x8b4>)
20000a00:	681b      	ldr	r3, [r3, #0]
20000a02:	18d2      	adds	r2, r2, r3
20000a04:	4b2e      	ldr	r3, [pc, #184]	; (20000ac0 <main+0x8c4>)
20000a06:	681b      	ldr	r3, [r3, #0]
20000a08:	005b      	lsls	r3, r3, #1
20000a0a:	18d2      	adds	r2, r2, r3
20000a0c:	4b27      	ldr	r3, [pc, #156]	; (20000aac <main+0x8b0>)
20000a0e:	681b      	ldr	r3, [r3, #0]
20000a10:	429a      	cmp	r2, r3
20000a12:	dd5d      	ble.n	20000ad0 <main+0x8d4>
					text4.display(&text4, 20);
20000a14:	4b2d      	ldr	r3, [pc, #180]	; (20000acc <main+0x8d0>)
20000a16:	2293      	movs	r2, #147	; 0x93
20000a18:	00d2      	lsls	r2, r2, #3
20000a1a:	4694      	mov	ip, r2
20000a1c:	44bc      	add	ip, r7
20000a1e:	4463      	add	r3, ip
20000a20:	691b      	ldr	r3, [r3, #16]
20000a22:	22a4      	movs	r2, #164	; 0xa4
20000a24:	18ba      	adds	r2, r7, r2
20000a26:	2114      	movs	r1, #20
20000a28:	0010      	movs	r0, r2
20000a2a:	4798      	blx	r3
20000a2c:	e159      	b.n	20000ce2 <main+0xae6>
20000a2e:	46c0      	nop			; (mov r8, r8)
20000a30:	fffffd48 			; <UNDEFINED> instruction: 0xfffffd48
20000a34:	fffffd6c 			; <UNDEFINED> instruction: 0xfffffd6c
20000a38:	fffffdb4 			; <UNDEFINED> instruction: 0xfffffdb4
20000a3c:	fffffd90 			; <UNDEFINED> instruction: 0xfffffd90
20000a40:	200016c5 	andcs	r1, r0, r5, asr #13
20000a44:	2000e4ec 	andcs	lr, r0, ip, ror #9
20000a48:	2000e4f0 	strdcs	lr, [r0], -r0
20000a4c:	2000e500 	andcs	lr, r0, r0, lsl #10
20000a50:	2000e514 	andcs	lr, r0, r4, lsl r5
20000a54:	2000e528 	andcs	lr, r0, r8, lsr #10
20000a58:	2000e530 	andcs	lr, r0, r0, lsr r5
20000a5c:	2000e540 	andcs	lr, r0, r0, asr #10
20000a60:	2000e554 	andcs	lr, r0, r4, asr r5
20000a64:	2000e568 	andcs	lr, r0, r8, ror #10
20000a68:	2000e574 	andcs	lr, r0, r4, ror r5
20000a6c:	2000e588 	andcs	lr, r0, r8, lsl #11
20000a70:	2000e598 	mulcs	r0, r8, r5
20000a74:	2000e5a4 	andcs	lr, r0, r4, lsr #11
20000a78:	2000e5b8 			; <UNDEFINED> instruction: 0x2000e5b8
20000a7c:	2000e5d0 	ldrdcs	lr, [r0], -r0
20000a80:	2000e5e4 	andcs	lr, r0, r4, ror #11
20000a84:	2000e5f8 	strdcs	lr, [r0], -r8
20000a88:	2000e60c 	andcs	lr, r0, ip, lsl #12
20000a8c:	2000e624 	andcs	lr, r0, r4, lsr #12
20000a90:	2000e630 	andcs	lr, r0, r0, lsr r6
20000a94:	2000e644 	andcs	lr, r0, r4, asr #12
20000a98:	2000e658 	andcs	lr, r0, r8, asr r6
20000a9c:	00000494 	muleq	r0, r4, r4
20000aa0:	0000048c 	andeq	r0, r0, ip, lsl #9
20000aa4:	00000484 	andeq	r0, r0, r4, lsl #9
20000aa8:	20008608 	andcs	r8, r0, r8, lsl #12
20000aac:	200045e0 	andcs	r4, r0, r0, ror #11
20000ab0:	2000860c 	andcs	r8, r0, ip, lsl #12
20000ab4:	fffffc5c 			; <UNDEFINED> instruction: 0xfffffc5c
20000ab8:	20008610 	andcs	r8, r0, r0, lsl r6
20000abc:	fffffc48 			; <UNDEFINED> instruction: 0xfffffc48
20000ac0:	20008614 	andcs	r8, r0, r4, lsl r6
20000ac4:	fffffc34 			; <UNDEFINED> instruction: 0xfffffc34
20000ac8:	fffffc20 			; <UNDEFINED> instruction: 0xfffffc20
20000acc:	fffffc0c 			; <UNDEFINED> instruction: 0xfffffc0c
				else if(counter < delay_until_text + 3*long_text + 2*short_text)
20000ad0:	4bda      	ldr	r3, [pc, #872]	; (20000e3c <main+0xc40>)
20000ad2:	681a      	ldr	r2, [r3, #0]
20000ad4:	0013      	movs	r3, r2
20000ad6:	005b      	lsls	r3, r3, #1
20000ad8:	189a      	adds	r2, r3, r2
20000ada:	4bd9      	ldr	r3, [pc, #868]	; (20000e40 <main+0xc44>)
20000adc:	681b      	ldr	r3, [r3, #0]
20000ade:	18d2      	adds	r2, r2, r3
20000ae0:	4bd8      	ldr	r3, [pc, #864]	; (20000e44 <main+0xc48>)
20000ae2:	681b      	ldr	r3, [r3, #0]
20000ae4:	005b      	lsls	r3, r3, #1
20000ae6:	18d2      	adds	r2, r2, r3
20000ae8:	4bd7      	ldr	r3, [pc, #860]	; (20000e48 <main+0xc4c>)
20000aea:	681b      	ldr	r3, [r3, #0]
20000aec:	429a      	cmp	r2, r3
20000aee:	dd0c      	ble.n	20000b0a <main+0x90e>
					text5.display(&text5, 15);
20000af0:	4bd6      	ldr	r3, [pc, #856]	; (20000e4c <main+0xc50>)
20000af2:	2293      	movs	r2, #147	; 0x93
20000af4:	00d2      	lsls	r2, r2, #3
20000af6:	4694      	mov	ip, r2
20000af8:	44bc      	add	ip, r7
20000afa:	4463      	add	r3, ip
20000afc:	691b      	ldr	r3, [r3, #16]
20000afe:	2290      	movs	r2, #144	; 0x90
20000b00:	18ba      	adds	r2, r7, r2
20000b02:	210f      	movs	r1, #15
20000b04:	0010      	movs	r0, r2
20000b06:	4798      	blx	r3
20000b08:	e0eb      	b.n	20000ce2 <main+0xae6>
				else if(counter < delay_until_text + 3*long_text + 3*short_text)
20000b0a:	4bcc      	ldr	r3, [pc, #816]	; (20000e3c <main+0xc40>)
20000b0c:	681a      	ldr	r2, [r3, #0]
20000b0e:	0013      	movs	r3, r2
20000b10:	005b      	lsls	r3, r3, #1
20000b12:	189a      	adds	r2, r3, r2
20000b14:	4bca      	ldr	r3, [pc, #808]	; (20000e40 <main+0xc44>)
20000b16:	681b      	ldr	r3, [r3, #0]
20000b18:	18d1      	adds	r1, r2, r3
20000b1a:	4bca      	ldr	r3, [pc, #808]	; (20000e44 <main+0xc48>)
20000b1c:	681a      	ldr	r2, [r3, #0]
20000b1e:	0013      	movs	r3, r2
20000b20:	005b      	lsls	r3, r3, #1
20000b22:	189b      	adds	r3, r3, r2
20000b24:	18ca      	adds	r2, r1, r3
20000b26:	4bc8      	ldr	r3, [pc, #800]	; (20000e48 <main+0xc4c>)
20000b28:	681b      	ldr	r3, [r3, #0]
20000b2a:	429a      	cmp	r2, r3
20000b2c:	dd0c      	ble.n	20000b48 <main+0x94c>
					text6.display(&text6, 20);
20000b2e:	4bc8      	ldr	r3, [pc, #800]	; (20000e50 <main+0xc54>)
20000b30:	2293      	movs	r2, #147	; 0x93
20000b32:	00d2      	lsls	r2, r2, #3
20000b34:	4694      	mov	ip, r2
20000b36:	44bc      	add	ip, r7
20000b38:	4463      	add	r3, ip
20000b3a:	691b      	ldr	r3, [r3, #16]
20000b3c:	227c      	movs	r2, #124	; 0x7c
20000b3e:	18ba      	adds	r2, r7, r2
20000b40:	2114      	movs	r1, #20
20000b42:	0010      	movs	r0, r2
20000b44:	4798      	blx	r3
20000b46:	e0cc      	b.n	20000ce2 <main+0xae6>
				else if(counter < delay_until_text + 4*long_text + 3*short_text + 3)
20000b48:	4bbc      	ldr	r3, [pc, #752]	; (20000e3c <main+0xc40>)
20000b4a:	681b      	ldr	r3, [r3, #0]
20000b4c:	009a      	lsls	r2, r3, #2
20000b4e:	4bbc      	ldr	r3, [pc, #752]	; (20000e40 <main+0xc44>)
20000b50:	681b      	ldr	r3, [r3, #0]
20000b52:	18d1      	adds	r1, r2, r3
20000b54:	4bbb      	ldr	r3, [pc, #748]	; (20000e44 <main+0xc48>)
20000b56:	681a      	ldr	r2, [r3, #0]
20000b58:	0013      	movs	r3, r2
20000b5a:	005b      	lsls	r3, r3, #1
20000b5c:	189b      	adds	r3, r3, r2
20000b5e:	18cb      	adds	r3, r1, r3
20000b60:	1cda      	adds	r2, r3, #3
20000b62:	4bb9      	ldr	r3, [pc, #740]	; (20000e48 <main+0xc4c>)
20000b64:	681b      	ldr	r3, [r3, #0]
20000b66:	429a      	cmp	r2, r3
20000b68:	dd0c      	ble.n	20000b84 <main+0x988>
					text7.display(&text7, 20);
20000b6a:	4bba      	ldr	r3, [pc, #744]	; (20000e54 <main+0xc58>)
20000b6c:	2293      	movs	r2, #147	; 0x93
20000b6e:	00d2      	lsls	r2, r2, #3
20000b70:	4694      	mov	ip, r2
20000b72:	44bc      	add	ip, r7
20000b74:	4463      	add	r3, ip
20000b76:	691b      	ldr	r3, [r3, #16]
20000b78:	2268      	movs	r2, #104	; 0x68
20000b7a:	18ba      	adds	r2, r7, r2
20000b7c:	2114      	movs	r1, #20
20000b7e:	0010      	movs	r0, r2
20000b80:	4798      	blx	r3
20000b82:	e0ae      	b.n	20000ce2 <main+0xae6>
				else if(counter < delay_until_text + 5*long_text + 3*short_text + 2)
20000b84:	4bad      	ldr	r3, [pc, #692]	; (20000e3c <main+0xc40>)
20000b86:	681a      	ldr	r2, [r3, #0]
20000b88:	0013      	movs	r3, r2
20000b8a:	009b      	lsls	r3, r3, #2
20000b8c:	189a      	adds	r2, r3, r2
20000b8e:	4bac      	ldr	r3, [pc, #688]	; (20000e40 <main+0xc44>)
20000b90:	681b      	ldr	r3, [r3, #0]
20000b92:	18d1      	adds	r1, r2, r3
20000b94:	4bab      	ldr	r3, [pc, #684]	; (20000e44 <main+0xc48>)
20000b96:	681a      	ldr	r2, [r3, #0]
20000b98:	0013      	movs	r3, r2
20000b9a:	005b      	lsls	r3, r3, #1
20000b9c:	189b      	adds	r3, r3, r2
20000b9e:	18cb      	adds	r3, r1, r3
20000ba0:	1c9a      	adds	r2, r3, #2
20000ba2:	4ba9      	ldr	r3, [pc, #676]	; (20000e48 <main+0xc4c>)
20000ba4:	681b      	ldr	r3, [r3, #0]
20000ba6:	429a      	cmp	r2, r3
20000ba8:	dd0c      	ble.n	20000bc4 <main+0x9c8>
					text8.display(&text8, 20);
20000baa:	4bab      	ldr	r3, [pc, #684]	; (20000e58 <main+0xc5c>)
20000bac:	2293      	movs	r2, #147	; 0x93
20000bae:	00d2      	lsls	r2, r2, #3
20000bb0:	4694      	mov	ip, r2
20000bb2:	44bc      	add	ip, r7
20000bb4:	4463      	add	r3, ip
20000bb6:	691b      	ldr	r3, [r3, #16]
20000bb8:	2254      	movs	r2, #84	; 0x54
20000bba:	18ba      	adds	r2, r7, r2
20000bbc:	2114      	movs	r1, #20
20000bbe:	0010      	movs	r0, r2
20000bc0:	4798      	blx	r3
20000bc2:	e08e      	b.n	20000ce2 <main+0xae6>
				else if(counter < delay_until_text + 5*long_text + 4*short_text + 2)
20000bc4:	4b9d      	ldr	r3, [pc, #628]	; (20000e3c <main+0xc40>)
20000bc6:	681a      	ldr	r2, [r3, #0]
20000bc8:	0013      	movs	r3, r2
20000bca:	009b      	lsls	r3, r3, #2
20000bcc:	189a      	adds	r2, r3, r2
20000bce:	4b9c      	ldr	r3, [pc, #624]	; (20000e40 <main+0xc44>)
20000bd0:	681b      	ldr	r3, [r3, #0]
20000bd2:	18d2      	adds	r2, r2, r3
20000bd4:	4b9b      	ldr	r3, [pc, #620]	; (20000e44 <main+0xc48>)
20000bd6:	681b      	ldr	r3, [r3, #0]
20000bd8:	009b      	lsls	r3, r3, #2
20000bda:	18d3      	adds	r3, r2, r3
20000bdc:	1c9a      	adds	r2, r3, #2
20000bde:	4b9a      	ldr	r3, [pc, #616]	; (20000e48 <main+0xc4c>)
20000be0:	681b      	ldr	r3, [r3, #0]
20000be2:	429a      	cmp	r2, r3
20000be4:	dd0c      	ble.n	20000c00 <main+0xa04>
					text9.display(&text9, 20);
20000be6:	4b9d      	ldr	r3, [pc, #628]	; (20000e5c <main+0xc60>)
20000be8:	2293      	movs	r2, #147	; 0x93
20000bea:	00d2      	lsls	r2, r2, #3
20000bec:	4694      	mov	ip, r2
20000bee:	44bc      	add	ip, r7
20000bf0:	4463      	add	r3, ip
20000bf2:	691b      	ldr	r3, [r3, #16]
20000bf4:	2240      	movs	r2, #64	; 0x40
20000bf6:	18ba      	adds	r2, r7, r2
20000bf8:	2114      	movs	r1, #20
20000bfa:	0010      	movs	r0, r2
20000bfc:	4798      	blx	r3
20000bfe:	e070      	b.n	20000ce2 <main+0xae6>
				else if(counter < delay_until_text + 6*long_text + 4*short_text - 2 + 2)
20000c00:	4b8e      	ldr	r3, [pc, #568]	; (20000e3c <main+0xc40>)
20000c02:	681a      	ldr	r2, [r3, #0]
20000c04:	0013      	movs	r3, r2
20000c06:	005b      	lsls	r3, r3, #1
20000c08:	189b      	adds	r3, r3, r2
20000c0a:	005b      	lsls	r3, r3, #1
20000c0c:	001a      	movs	r2, r3
20000c0e:	4b8c      	ldr	r3, [pc, #560]	; (20000e40 <main+0xc44>)
20000c10:	681b      	ldr	r3, [r3, #0]
20000c12:	18d2      	adds	r2, r2, r3
20000c14:	4b8b      	ldr	r3, [pc, #556]	; (20000e44 <main+0xc48>)
20000c16:	681b      	ldr	r3, [r3, #0]
20000c18:	009b      	lsls	r3, r3, #2
20000c1a:	18d2      	adds	r2, r2, r3
20000c1c:	4b8a      	ldr	r3, [pc, #552]	; (20000e48 <main+0xc4c>)
20000c1e:	681b      	ldr	r3, [r3, #0]
20000c20:	429a      	cmp	r2, r3
20000c22:	dd0c      	ble.n	20000c3e <main+0xa42>
					text10.display(&text10, 15);
20000c24:	4b8e      	ldr	r3, [pc, #568]	; (20000e60 <main+0xc64>)
20000c26:	2293      	movs	r2, #147	; 0x93
20000c28:	00d2      	lsls	r2, r2, #3
20000c2a:	4694      	mov	ip, r2
20000c2c:	44bc      	add	ip, r7
20000c2e:	4463      	add	r3, ip
20000c30:	691b      	ldr	r3, [r3, #16]
20000c32:	222c      	movs	r2, #44	; 0x2c
20000c34:	18ba      	adds	r2, r7, r2
20000c36:	210f      	movs	r1, #15
20000c38:	0010      	movs	r0, r2
20000c3a:	4798      	blx	r3
20000c3c:	e051      	b.n	20000ce2 <main+0xae6>
				else if(counter < delay_until_text + 6*long_text + 5*short_text + 3 + 2)
20000c3e:	4b7f      	ldr	r3, [pc, #508]	; (20000e3c <main+0xc40>)
20000c40:	681a      	ldr	r2, [r3, #0]
20000c42:	0013      	movs	r3, r2
20000c44:	005b      	lsls	r3, r3, #1
20000c46:	189b      	adds	r3, r3, r2
20000c48:	005b      	lsls	r3, r3, #1
20000c4a:	001a      	movs	r2, r3
20000c4c:	4b7c      	ldr	r3, [pc, #496]	; (20000e40 <main+0xc44>)
20000c4e:	681b      	ldr	r3, [r3, #0]
20000c50:	18d1      	adds	r1, r2, r3
20000c52:	4b7c      	ldr	r3, [pc, #496]	; (20000e44 <main+0xc48>)
20000c54:	681a      	ldr	r2, [r3, #0]
20000c56:	0013      	movs	r3, r2
20000c58:	009b      	lsls	r3, r3, #2
20000c5a:	189b      	adds	r3, r3, r2
20000c5c:	18cb      	adds	r3, r1, r3
20000c5e:	1d5a      	adds	r2, r3, #5
20000c60:	4b79      	ldr	r3, [pc, #484]	; (20000e48 <main+0xc4c>)
20000c62:	681b      	ldr	r3, [r3, #0]
20000c64:	429a      	cmp	r2, r3
20000c66:	dd0b      	ble.n	20000c80 <main+0xa84>
					text12.display(&text12, 15);
20000c68:	4b7e      	ldr	r3, [pc, #504]	; (20000e64 <main+0xc68>)
20000c6a:	2293      	movs	r2, #147	; 0x93
20000c6c:	00d2      	lsls	r2, r2, #3
20000c6e:	4694      	mov	ip, r2
20000c70:	44bc      	add	ip, r7
20000c72:	4463      	add	r3, ip
20000c74:	691b      	ldr	r3, [r3, #16]
20000c76:	1d3a      	adds	r2, r7, #4
20000c78:	210f      	movs	r1, #15
20000c7a:	0010      	movs	r0, r2
20000c7c:	4798      	blx	r3
20000c7e:	e030      	b.n	20000ce2 <main+0xae6>
				else if(counter < delay_until_text + 7*long_text + 5*short_text + 6 + 2) {
20000c80:	4b6e      	ldr	r3, [pc, #440]	; (20000e3c <main+0xc40>)
20000c82:	681a      	ldr	r2, [r3, #0]
20000c84:	0013      	movs	r3, r2
20000c86:	00db      	lsls	r3, r3, #3
20000c88:	1a9a      	subs	r2, r3, r2
20000c8a:	4b6d      	ldr	r3, [pc, #436]	; (20000e40 <main+0xc44>)
20000c8c:	681b      	ldr	r3, [r3, #0]
20000c8e:	18d1      	adds	r1, r2, r3
20000c90:	4b6c      	ldr	r3, [pc, #432]	; (20000e44 <main+0xc48>)
20000c92:	681a      	ldr	r2, [r3, #0]
20000c94:	0013      	movs	r3, r2
20000c96:	009b      	lsls	r3, r3, #2
20000c98:	189b      	adds	r3, r3, r2
20000c9a:	18cb      	adds	r3, r1, r3
20000c9c:	3308      	adds	r3, #8
20000c9e:	001a      	movs	r2, r3
20000ca0:	4b69      	ldr	r3, [pc, #420]	; (20000e48 <main+0xc4c>)
20000ca2:	681b      	ldr	r3, [r3, #0]
20000ca4:	429a      	cmp	r2, r3
20000ca6:	dd0c      	ble.n	20000cc2 <main+0xac6>
					text11.display(&text11, 20);
20000ca8:	4b6f      	ldr	r3, [pc, #444]	; (20000e68 <main+0xc6c>)
20000caa:	2293      	movs	r2, #147	; 0x93
20000cac:	00d2      	lsls	r2, r2, #3
20000cae:	4694      	mov	ip, r2
20000cb0:	44bc      	add	ip, r7
20000cb2:	4463      	add	r3, ip
20000cb4:	691b      	ldr	r3, [r3, #16]
20000cb6:	2218      	movs	r2, #24
20000cb8:	18ba      	adds	r2, r7, r2
20000cba:	2114      	movs	r1, #20
20000cbc:	0010      	movs	r0, r2
20000cbe:	4798      	blx	r3
20000cc0:	e00f      	b.n	20000ce2 <main+0xae6>
				} else {
					if (read_DIL() == 0) {
20000cc2:	f002 ff41 	bl	20003b48 <read_DIL>
20000cc6:	1e03      	subs	r3, r0, #0
20000cc8:	d10b      	bne.n	20000ce2 <main+0xae6>
						current_screen = GAME_SCREEN;
20000cca:	4b68      	ldr	r3, [pc, #416]	; (20000e6c <main+0xc70>)
20000ccc:	2202      	movs	r2, #2
20000cce:	601a      	str	r2, [r3, #0]
						random_seed = counter;
20000cd0:	4b5d      	ldr	r3, [pc, #372]	; (20000e48 <main+0xc4c>)
20000cd2:	681a      	ldr	r2, [r3, #0]
20000cd4:	4b66      	ldr	r3, [pc, #408]	; (20000e70 <main+0xc74>)
20000cd6:	601a      	str	r2, [r3, #0]
						counter = 0;
20000cd8:	4b5b      	ldr	r3, [pc, #364]	; (20000e48 <main+0xc4c>)
20000cda:	2200      	movs	r2, #0
20000cdc:	601a      	str	r2, [r3, #0]
						clear_ascii();
20000cde:	f003 f900 	bl	20003ee2 <clear_ascii>
					}
				}
				
				if(read_DIL() == SKIP_VALUE) {
20000ce2:	f002 ff31 	bl	20003b48 <read_DIL>
20000ce6:	0003      	movs	r3, r0
20000ce8:	2b81      	cmp	r3, #129	; 0x81
20000cea:	d10b      	bne.n	20000d04 <main+0xb08>
					current_screen = GAME_SCREEN;
20000cec:	4b5f      	ldr	r3, [pc, #380]	; (20000e6c <main+0xc70>)
20000cee:	2202      	movs	r2, #2
20000cf0:	601a      	str	r2, [r3, #0]
					random_seed = counter;
20000cf2:	4b55      	ldr	r3, [pc, #340]	; (20000e48 <main+0xc4c>)
20000cf4:	681a      	ldr	r2, [r3, #0]
20000cf6:	4b5e      	ldr	r3, [pc, #376]	; (20000e70 <main+0xc74>)
20000cf8:	601a      	str	r2, [r3, #0]
					counter = 0;
20000cfa:	4b53      	ldr	r3, [pc, #332]	; (20000e48 <main+0xc4c>)
20000cfc:	2200      	movs	r2, #0
20000cfe:	601a      	str	r2, [r3, #0]
					clear_ascii();
20000d00:	f003 f8ef 	bl	20003ee2 <clear_ascii>
				}
				
				
				fire2.update(&fire2);
20000d04:	4b5b      	ldr	r3, [pc, #364]	; (20000e74 <main+0xc78>)
20000d06:	2293      	movs	r2, #147	; 0x93
20000d08:	00d2      	lsls	r2, r2, #3
20000d0a:	4694      	mov	ip, r2
20000d0c:	44bc      	add	ip, r7
20000d0e:	4463      	add	r3, ip
20000d10:	68db      	ldr	r3, [r3, #12]
20000d12:	2293      	movs	r2, #147	; 0x93
20000d14:	0092      	lsls	r2, r2, #2
20000d16:	18ba      	adds	r2, r7, r2
20000d18:	0010      	movs	r0, r2
20000d1a:	4798      	blx	r3
				fire3.update(&fire3);
20000d1c:	4b56      	ldr	r3, [pc, #344]	; (20000e78 <main+0xc7c>)
20000d1e:	2293      	movs	r2, #147	; 0x93
20000d20:	00d2      	lsls	r2, r2, #3
20000d22:	4694      	mov	ip, r2
20000d24:	44bc      	add	ip, r7
20000d26:	4463      	add	r3, ip
20000d28:	68db      	ldr	r3, [r3, #12]
20000d2a:	228a      	movs	r2, #138	; 0x8a
20000d2c:	0092      	lsls	r2, r2, #2
20000d2e:	18ba      	adds	r2, r7, r2
20000d30:	0010      	movs	r0, r2
20000d32:	4798      	blx	r3
				fire1.update(&fire1);
20000d34:	4b51      	ldr	r3, [pc, #324]	; (20000e7c <main+0xc80>)
20000d36:	2293      	movs	r2, #147	; 0x93
20000d38:	00d2      	lsls	r2, r2, #3
20000d3a:	4694      	mov	ip, r2
20000d3c:	44bc      	add	ip, r7
20000d3e:	4463      	add	r3, ip
20000d40:	68db      	ldr	r3, [r3, #12]
20000d42:	22f0      	movs	r2, #240	; 0xf0
20000d44:	0052      	lsls	r2, r2, #1
20000d46:	18ba      	adds	r2, r7, r2
20000d48:	0010      	movs	r0, r2
20000d4a:	4798      	blx	r3
				fire4.update(&fire4);
20000d4c:	4b4c      	ldr	r3, [pc, #304]	; (20000e80 <main+0xc84>)
20000d4e:	2293      	movs	r2, #147	; 0x93
20000d50:	00d2      	lsls	r2, r2, #3
20000d52:	4694      	mov	ip, r2
20000d54:	44bc      	add	ip, r7
20000d56:	4463      	add	r3, ip
20000d58:	68db      	ldr	r3, [r3, #12]
20000d5a:	2281      	movs	r2, #129	; 0x81
20000d5c:	0092      	lsls	r2, r2, #2
20000d5e:	18ba      	adds	r2, r7, r2
20000d60:	0010      	movs	r0, r2
20000d62:	4798      	blx	r3
				bird.update(&bird);
20000d64:	4b47      	ldr	r3, [pc, #284]	; (20000e84 <main+0xc88>)
20000d66:	2293      	movs	r2, #147	; 0x93
20000d68:	00d2      	lsls	r2, r2, #3
20000d6a:	4694      	mov	ip, r2
20000d6c:	44bc      	add	ip, r7
20000d6e:	4463      	add	r3, ip
20000d70:	68db      	ldr	r3, [r3, #12]
20000d72:	22b7      	movs	r2, #183	; 0xb7
20000d74:	0092      	lsls	r2, r2, #2
20000d76:	18ba      	adds	r2, r7, r2
20000d78:	0010      	movs	r0, r2
20000d7a:	4798      	blx	r3
				bird.xPos -= 2;
20000d7c:	4b41      	ldr	r3, [pc, #260]	; (20000e84 <main+0xc88>)
20000d7e:	2293      	movs	r2, #147	; 0x93
20000d80:	00d2      	lsls	r2, r2, #3
20000d82:	4694      	mov	ip, r2
20000d84:	44bc      	add	ip, r7
20000d86:	4463      	add	r3, ip
20000d88:	685b      	ldr	r3, [r3, #4]
20000d8a:	1e9a      	subs	r2, r3, #2
20000d8c:	4b3d      	ldr	r3, [pc, #244]	; (20000e84 <main+0xc88>)
20000d8e:	2193      	movs	r1, #147	; 0x93
20000d90:	00c9      	lsls	r1, r1, #3
20000d92:	468c      	mov	ip, r1
20000d94:	44bc      	add	ip, r7
20000d96:	4463      	add	r3, ip
20000d98:	605a      	str	r2, [r3, #4]
				if (counter % 2 == 0) {
20000d9a:	4b2b      	ldr	r3, [pc, #172]	; (20000e48 <main+0xc4c>)
20000d9c:	681b      	ldr	r3, [r3, #0]
20000d9e:	001a      	movs	r2, r3
20000da0:	2301      	movs	r3, #1
20000da2:	4013      	ands	r3, r2
20000da4:	d001      	beq.n	20000daa <main+0xbae>
20000da6:	f000 fc55 	bl	20001654 <main+0x1458>
					bird.yPos--;
20000daa:	4b36      	ldr	r3, [pc, #216]	; (20000e84 <main+0xc88>)
20000dac:	2293      	movs	r2, #147	; 0x93
20000dae:	00d2      	lsls	r2, r2, #3
20000db0:	4694      	mov	ip, r2
20000db2:	44bc      	add	ip, r7
20000db4:	4463      	add	r3, ip
20000db6:	689b      	ldr	r3, [r3, #8]
20000db8:	1e5a      	subs	r2, r3, #1
20000dba:	4b32      	ldr	r3, [pc, #200]	; (20000e84 <main+0xc88>)
20000dbc:	2193      	movs	r1, #147	; 0x93
20000dbe:	00c9      	lsls	r1, r1, #3
20000dc0:	468c      	mov	ip, r1
20000dc2:	44bc      	add	ip, r7
20000dc4:	4463      	add	r3, ip
20000dc6:	609a      	str	r2, [r3, #8]
				}
				
				break;
20000dc8:	f000 fc44 	bl	20001654 <main+0x1458>
				
			case GAME_SCREEN: //inside
				
				counter++;
20000dcc:	4b1e      	ldr	r3, [pc, #120]	; (20000e48 <main+0xc4c>)
20000dce:	681b      	ldr	r3, [r3, #0]
20000dd0:	1c5a      	adds	r2, r3, #1
20000dd2:	4b1d      	ldr	r3, [pc, #116]	; (20000e48 <main+0xc4c>)
20000dd4:	601a      	str	r2, [r3, #0]
				if(read_DIL_single( LIGHT_TRIGGER )) {
20000dd6:	2006      	movs	r0, #6
20000dd8:	f002 fec6 	bl	20003b68 <read_DIL_single>
20000ddc:	1e03      	subs	r3, r0, #0
20000dde:	d00c      	beq.n	20000dfa <main+0xbfe>
					draw_game_object( &indoors2 );
20000de0:	23d2      	movs	r3, #210	; 0xd2
20000de2:	009b      	lsls	r3, r3, #2
20000de4:	18fb      	adds	r3, r7, r3
20000de6:	0018      	movs	r0, r3
20000de8:	f002 fe04 	bl	200039f4 <draw_game_object>
					ascii_write("*click*","");
20000dec:	4a26      	ldr	r2, [pc, #152]	; (20000e88 <main+0xc8c>)
20000dee:	4b27      	ldr	r3, [pc, #156]	; (20000e8c <main+0xc90>)
20000df0:	0011      	movs	r1, r2
20000df2:	0018      	movs	r0, r3
20000df4:	f003 f8aa 	bl	20003f4c <ascii_write>
20000df8:	e00b      	b.n	20000e12 <main+0xc16>
				} else {
					draw_game_object( &indoors );
20000dfa:	23db      	movs	r3, #219	; 0xdb
20000dfc:	009b      	lsls	r3, r3, #2
20000dfe:	18fb      	adds	r3, r7, r3
20000e00:	0018      	movs	r0, r3
20000e02:	f002 fdf7 	bl	200039f4 <draw_game_object>
					draw_game_object( &trophy );
20000e06:	23c9      	movs	r3, #201	; 0xc9
20000e08:	009b      	lsls	r3, r3, #2
20000e0a:	18fb      	adds	r3, r7, r3
20000e0c:	0018      	movs	r0, r3
20000e0e:	f002 fdf1 	bl	200039f4 <draw_game_object>
				}
				
				if(!no_DIP)
20000e12:	4b1f      	ldr	r3, [pc, #124]	; (20000e90 <main+0xc94>)
20000e14:	18fb      	adds	r3, r7, r3
20000e16:	681b      	ldr	r3, [r3, #0]
20000e18:	2b00      	cmp	r3, #0
20000e1a:	d105      	bne.n	20000e28 <main+0xc2c>
					draw_game_object( &DIP );
20000e1c:	23a5      	movs	r3, #165	; 0xa5
20000e1e:	009b      	lsls	r3, r3, #2
20000e20:	18fb      	adds	r3, r7, r3
20000e22:	0018      	movs	r0, r3
20000e24:	f002 fde6 	bl	200039f4 <draw_game_object>
				draw_game_object( &player );
20000e28:	239c      	movs	r3, #156	; 0x9c
20000e2a:	009b      	lsls	r3, r3, #2
20000e2c:	18fb      	adds	r3, r7, r3
20000e2e:	0018      	movs	r0, r3
20000e30:	f002 fde0 	bl	200039f4 <draw_game_object>
				static int i;
				for(i = 0; i < 3; i++) {
20000e34:	4b17      	ldr	r3, [pc, #92]	; (20000e94 <main+0xc98>)
20000e36:	2200      	movs	r2, #0
20000e38:	601a      	str	r2, [r3, #0]
20000e3a:	e059      	b.n	20000ef0 <main+0xcf4>
20000e3c:	20008610 	andcs	r8, r0, r0, lsl r6
20000e40:	2000860c 	andcs	r8, r0, ip, lsl #12
20000e44:	20008614 	andcs	r8, r0, r4, lsl r6
20000e48:	200045e0 	andcs	r4, r0, r0, ror #11
20000e4c:	fffffbf8 			; <UNDEFINED> instruction: 0xfffffbf8
20000e50:	fffffbe4 			; <UNDEFINED> instruction: 0xfffffbe4
20000e54:	fffffbd0 			; <UNDEFINED> instruction: 0xfffffbd0
20000e58:	fffffbbc 			; <UNDEFINED> instruction: 0xfffffbbc
20000e5c:	fffffba8 			; <UNDEFINED> instruction: 0xfffffba8
20000e60:	fffffb94 			; <UNDEFINED> instruction: 0xfffffb94
20000e64:	fffffb6c 			; <UNDEFINED> instruction: 0xfffffb6c
20000e68:	fffffb80 			; <UNDEFINED> instruction: 0xfffffb80
20000e6c:	20008608 	andcs	r8, r0, r8, lsl #12
20000e70:	200046e4 	andcs	r4, r0, r4, ror #13
20000e74:	fffffdb4 			; <UNDEFINED> instruction: 0xfffffdb4
20000e78:	fffffd90 			; <UNDEFINED> instruction: 0xfffffd90
20000e7c:	fffffd48 			; <UNDEFINED> instruction: 0xfffffd48
20000e80:	fffffd6c 			; <UNDEFINED> instruction: 0xfffffd6c
20000e84:	fffffe44 			; <UNDEFINED> instruction: 0xfffffe44
20000e88:	2000e66c 	andcs	lr, r0, ip, ror #12
20000e8c:	2000e670 	andcs	lr, r0, r0, ror r6
20000e90:	00000484 	andeq	r0, r0, r4, lsl #9
20000e94:	200045e4 	andcs	r4, r0, r4, ror #11
					draw_game_object( &fires[i] );
20000e98:	4bc1      	ldr	r3, [pc, #772]	; (200011a0 <main+0xfa4>)
20000e9a:	681a      	ldr	r2, [r3, #0]
20000e9c:	2384      	movs	r3, #132	; 0x84
20000e9e:	005b      	lsls	r3, r3, #1
20000ea0:	18f9      	adds	r1, r7, r3
20000ea2:	0013      	movs	r3, r2
20000ea4:	00db      	lsls	r3, r3, #3
20000ea6:	189b      	adds	r3, r3, r2
20000ea8:	009b      	lsls	r3, r3, #2
20000eaa:	18cb      	adds	r3, r1, r3
20000eac:	0018      	movs	r0, r3
20000eae:	f002 fda1 	bl	200039f4 <draw_game_object>
					fires[i].update( &fires[i] );
20000eb2:	4bbb      	ldr	r3, [pc, #748]	; (200011a0 <main+0xfa4>)
20000eb4:	681a      	ldr	r2, [r3, #0]
20000eb6:	4bbb      	ldr	r3, [pc, #748]	; (200011a4 <main+0xfa8>)
20000eb8:	2193      	movs	r1, #147	; 0x93
20000eba:	00c9      	lsls	r1, r1, #3
20000ebc:	1879      	adds	r1, r7, r1
20000ebe:	18c9      	adds	r1, r1, r3
20000ec0:	0013      	movs	r3, r2
20000ec2:	00db      	lsls	r3, r3, #3
20000ec4:	189b      	adds	r3, r3, r2
20000ec6:	009b      	lsls	r3, r3, #2
20000ec8:	18cb      	adds	r3, r1, r3
20000eca:	330c      	adds	r3, #12
20000ecc:	6819      	ldr	r1, [r3, #0]
20000ece:	4bb4      	ldr	r3, [pc, #720]	; (200011a0 <main+0xfa4>)
20000ed0:	681a      	ldr	r2, [r3, #0]
20000ed2:	2384      	movs	r3, #132	; 0x84
20000ed4:	005b      	lsls	r3, r3, #1
20000ed6:	18f8      	adds	r0, r7, r3
20000ed8:	0013      	movs	r3, r2
20000eda:	00db      	lsls	r3, r3, #3
20000edc:	189b      	adds	r3, r3, r2
20000ede:	009b      	lsls	r3, r3, #2
20000ee0:	18c3      	adds	r3, r0, r3
20000ee2:	0018      	movs	r0, r3
20000ee4:	4788      	blx	r1
				for(i = 0; i < 3; i++) {
20000ee6:	4bae      	ldr	r3, [pc, #696]	; (200011a0 <main+0xfa4>)
20000ee8:	681b      	ldr	r3, [r3, #0]
20000eea:	1c5a      	adds	r2, r3, #1
20000eec:	4bac      	ldr	r3, [pc, #688]	; (200011a0 <main+0xfa4>)
20000eee:	601a      	str	r2, [r3, #0]
20000ef0:	4bab      	ldr	r3, [pc, #684]	; (200011a0 <main+0xfa4>)
20000ef2:	681b      	ldr	r3, [r3, #0]
20000ef4:	2b02      	cmp	r3, #2
20000ef6:	ddcf      	ble.n	20000e98 <main+0xc9c>
				}
				draw_game_object( &hair );
20000ef8:	23c0      	movs	r3, #192	; 0xc0
20000efa:	009b      	lsls	r3, r3, #2
20000efc:	18fb      	adds	r3, r7, r3
20000efe:	0018      	movs	r0, r3
20000f00:	f002 fd78 	bl	200039f4 <draw_game_object>
				if(exploding) {
20000f04:	2390      	movs	r3, #144	; 0x90
20000f06:	00db      	lsls	r3, r3, #3
20000f08:	18fb      	adds	r3, r7, r3
20000f0a:	681b      	ldr	r3, [r3, #0]
20000f0c:	2b00      	cmp	r3, #0
20000f0e:	d053      	beq.n	20000fb8 <main+0xdbc>
					static int first = 1;
					if (first) {
20000f10:	4ba5      	ldr	r3, [pc, #660]	; (200011a8 <main+0xfac>)
20000f12:	681b      	ldr	r3, [r3, #0]
20000f14:	2b00      	cmp	r3, #0
20000f16:	d034      	beq.n	20000f82 <main+0xd86>
						boom.xPos = player.xPos + 9 - 53;
20000f18:	4ba4      	ldr	r3, [pc, #656]	; (200011ac <main+0xfb0>)
20000f1a:	2293      	movs	r2, #147	; 0x93
20000f1c:	00d2      	lsls	r2, r2, #3
20000f1e:	4694      	mov	ip, r2
20000f20:	44bc      	add	ip, r7
20000f22:	4463      	add	r3, ip
20000f24:	685b      	ldr	r3, [r3, #4]
20000f26:	3b2c      	subs	r3, #44	; 0x2c
20000f28:	001a      	movs	r2, r3
20000f2a:	4ba1      	ldr	r3, [pc, #644]	; (200011b0 <main+0xfb4>)
20000f2c:	2193      	movs	r1, #147	; 0x93
20000f2e:	00c9      	lsls	r1, r1, #3
20000f30:	468c      	mov	ip, r1
20000f32:	44bc      	add	ip, r7
20000f34:	4463      	add	r3, ip
20000f36:	605a      	str	r2, [r3, #4]
						boom.yPos = player.yPos + 9 - 27;
20000f38:	4b9c      	ldr	r3, [pc, #624]	; (200011ac <main+0xfb0>)
20000f3a:	2293      	movs	r2, #147	; 0x93
20000f3c:	00d2      	lsls	r2, r2, #3
20000f3e:	4694      	mov	ip, r2
20000f40:	44bc      	add	ip, r7
20000f42:	4463      	add	r3, ip
20000f44:	689b      	ldr	r3, [r3, #8]
20000f46:	3b12      	subs	r3, #18
20000f48:	001a      	movs	r2, r3
20000f4a:	4b99      	ldr	r3, [pc, #612]	; (200011b0 <main+0xfb4>)
20000f4c:	2193      	movs	r1, #147	; 0x93
20000f4e:	00c9      	lsls	r1, r1, #3
20000f50:	468c      	mov	ip, r1
20000f52:	44bc      	add	ip, r7
20000f54:	4463      	add	r3, ip
20000f56:	609a      	str	r2, [r3, #8]
						player.xPos = -100;
20000f58:	4b94      	ldr	r3, [pc, #592]	; (200011ac <main+0xfb0>)
20000f5a:	2293      	movs	r2, #147	; 0x93
20000f5c:	00d2      	lsls	r2, r2, #3
20000f5e:	4694      	mov	ip, r2
20000f60:	44bc      	add	ip, r7
20000f62:	4463      	add	r3, ip
20000f64:	2264      	movs	r2, #100	; 0x64
20000f66:	4252      	negs	r2, r2
20000f68:	605a      	str	r2, [r3, #4]
						player.yPos = -100;
20000f6a:	4b90      	ldr	r3, [pc, #576]	; (200011ac <main+0xfb0>)
20000f6c:	2293      	movs	r2, #147	; 0x93
20000f6e:	00d2      	lsls	r2, r2, #3
20000f70:	4694      	mov	ip, r2
20000f72:	44bc      	add	ip, r7
20000f74:	4463      	add	r3, ip
20000f76:	2264      	movs	r2, #100	; 0x64
20000f78:	4252      	negs	r2, r2
20000f7a:	609a      	str	r2, [r3, #8]
						first = 0;
20000f7c:	4b8a      	ldr	r3, [pc, #552]	; (200011a8 <main+0xfac>)
20000f7e:	2200      	movs	r2, #0
20000f80:	601a      	str	r2, [r3, #0]
					}					
					draw_game_object( &boom );
20000f82:	23ae      	movs	r3, #174	; 0xae
20000f84:	009b      	lsls	r3, r3, #2
20000f86:	18fb      	adds	r3, r7, r3
20000f88:	0018      	movs	r0, r3
20000f8a:	f002 fd33 	bl	200039f4 <draw_game_object>
					if(boom.current_frame < 10)
20000f8e:	4b88      	ldr	r3, [pc, #544]	; (200011b0 <main+0xfb4>)
20000f90:	2293      	movs	r2, #147	; 0x93
20000f92:	00d2      	lsls	r2, r2, #3
20000f94:	4694      	mov	ip, r2
20000f96:	44bc      	add	ip, r7
20000f98:	4463      	add	r3, ip
20000f9a:	695b      	ldr	r3, [r3, #20]
20000f9c:	2b09      	cmp	r3, #9
20000f9e:	dc0b      	bgt.n	20000fb8 <main+0xdbc>
						boom.update( &boom );
20000fa0:	4b83      	ldr	r3, [pc, #524]	; (200011b0 <main+0xfb4>)
20000fa2:	2293      	movs	r2, #147	; 0x93
20000fa4:	00d2      	lsls	r2, r2, #3
20000fa6:	4694      	mov	ip, r2
20000fa8:	44bc      	add	ip, r7
20000faa:	4463      	add	r3, ip
20000fac:	68db      	ldr	r3, [r3, #12]
20000fae:	22ae      	movs	r2, #174	; 0xae
20000fb0:	0092      	lsls	r2, r2, #2
20000fb2:	18ba      	adds	r2, r7, r2
20000fb4:	0010      	movs	r0, r2
20000fb6:	4798      	blx	r3
				}
				
				show_frame(1);
20000fb8:	2001      	movs	r0, #1
20000fba:	f002 fd5c 	bl	20003a76 <show_frame>
				
				static int last_climb_value = 100;
				if((read_DIL_single(CLIMB_TRIGGER) != last_climb_value) && player.xPos > 90 && player.xPos < 108 && !has_climbed) {
20000fbe:	2004      	movs	r0, #4
20000fc0:	f002 fdd2 	bl	20003b68 <read_DIL_single>
20000fc4:	0002      	movs	r2, r0
20000fc6:	4b7b      	ldr	r3, [pc, #492]	; (200011b4 <main+0xfb8>)
20000fc8:	681b      	ldr	r3, [r3, #0]
20000fca:	429a      	cmp	r2, r3
20000fcc:	d023      	beq.n	20001016 <main+0xe1a>
20000fce:	4b77      	ldr	r3, [pc, #476]	; (200011ac <main+0xfb0>)
20000fd0:	2293      	movs	r2, #147	; 0x93
20000fd2:	00d2      	lsls	r2, r2, #3
20000fd4:	4694      	mov	ip, r2
20000fd6:	44bc      	add	ip, r7
20000fd8:	4463      	add	r3, ip
20000fda:	685b      	ldr	r3, [r3, #4]
20000fdc:	2b5a      	cmp	r3, #90	; 0x5a
20000fde:	dd1a      	ble.n	20001016 <main+0xe1a>
20000fe0:	4b72      	ldr	r3, [pc, #456]	; (200011ac <main+0xfb0>)
20000fe2:	2293      	movs	r2, #147	; 0x93
20000fe4:	00d2      	lsls	r2, r2, #3
20000fe6:	4694      	mov	ip, r2
20000fe8:	44bc      	add	ip, r7
20000fea:	4463      	add	r3, ip
20000fec:	685b      	ldr	r3, [r3, #4]
20000fee:	2b6b      	cmp	r3, #107	; 0x6b
20000ff0:	dc11      	bgt.n	20001016 <main+0xe1a>
20000ff2:	2392      	movs	r3, #146	; 0x92
20000ff4:	00db      	lsls	r3, r3, #3
20000ff6:	18fb      	adds	r3, r7, r3
20000ff8:	681b      	ldr	r3, [r3, #0]
20000ffa:	2b00      	cmp	r3, #0
20000ffc:	d10b      	bne.n	20001016 <main+0xe1a>
					is_climbing = 1;
20000ffe:	2301      	movs	r3, #1
20001000:	4a6d      	ldr	r2, [pc, #436]	; (200011b8 <main+0xfbc>)
20001002:	18ba      	adds	r2, r7, r2
20001004:	6013      	str	r3, [r2, #0]
					player.xPos = 98;
20001006:	4b69      	ldr	r3, [pc, #420]	; (200011ac <main+0xfb0>)
20001008:	2293      	movs	r2, #147	; 0x93
2000100a:	00d2      	lsls	r2, r2, #3
2000100c:	4694      	mov	ip, r2
2000100e:	44bc      	add	ip, r7
20001010:	4463      	add	r3, ip
20001012:	2262      	movs	r2, #98	; 0x62
20001014:	605a      	str	r2, [r3, #4]
				}
				last_climb_value = read_DIL_single(CLIMB_TRIGGER);
20001016:	2004      	movs	r0, #4
20001018:	f002 fda6 	bl	20003b68 <read_DIL_single>
2000101c:	0002      	movs	r2, r0
2000101e:	4b65      	ldr	r3, [pc, #404]	; (200011b4 <main+0xfb8>)
20001020:	601a      	str	r2, [r3, #0]
				
				if(is_climbing) {
20001022:	4b65      	ldr	r3, [pc, #404]	; (200011b8 <main+0xfbc>)
20001024:	18fb      	adds	r3, r7, r3
20001026:	681b      	ldr	r3, [r3, #0]
20001028:	2b00      	cmp	r3, #0
2000102a:	d044      	beq.n	200010b6 <main+0xeba>
					gameObjectUpdate( &player );
2000102c:	239c      	movs	r3, #156	; 0x9c
2000102e:	009b      	lsls	r3, r3, #2
20001030:	18fb      	adds	r3, r7, r3
20001032:	0018      	movs	r0, r3
20001034:	f000 fb46 	bl	200016c4 <gameObjectUpdate>
					if(player.yPos > 4) {
20001038:	4b5c      	ldr	r3, [pc, #368]	; (200011ac <main+0xfb0>)
2000103a:	2293      	movs	r2, #147	; 0x93
2000103c:	00d2      	lsls	r2, r2, #3
2000103e:	4694      	mov	ip, r2
20001040:	44bc      	add	ip, r7
20001042:	4463      	add	r3, ip
20001044:	689b      	ldr	r3, [r3, #8]
20001046:	2b04      	cmp	r3, #4
20001048:	dd15      	ble.n	20001076 <main+0xe7a>
						player.yPos--;
2000104a:	4b58      	ldr	r3, [pc, #352]	; (200011ac <main+0xfb0>)
2000104c:	2293      	movs	r2, #147	; 0x93
2000104e:	00d2      	lsls	r2, r2, #3
20001050:	4694      	mov	ip, r2
20001052:	44bc      	add	ip, r7
20001054:	4463      	add	r3, ip
20001056:	689b      	ldr	r3, [r3, #8]
20001058:	1e5a      	subs	r2, r3, #1
2000105a:	4b54      	ldr	r3, [pc, #336]	; (200011ac <main+0xfb0>)
2000105c:	2193      	movs	r1, #147	; 0x93
2000105e:	00c9      	lsls	r1, r1, #3
20001060:	468c      	mov	ip, r1
20001062:	44bc      	add	ip, r7
20001064:	4463      	add	r3, ip
20001066:	609a      	str	r2, [r3, #8]
						ascii_write("*tipp*","");
20001068:	4a54      	ldr	r2, [pc, #336]	; (200011bc <main+0xfc0>)
2000106a:	4b55      	ldr	r3, [pc, #340]	; (200011c0 <main+0xfc4>)
2000106c:	0011      	movs	r1, r2
2000106e:	0018      	movs	r0, r3
20001070:	f002 ff6c 	bl	20003f4c <ascii_write>
20001074:	e02b      	b.n	200010ce <main+0xed2>
					} else {	//Stay at top level and disable climbing forever!
						player.yPos = 5;
20001076:	4b4d      	ldr	r3, [pc, #308]	; (200011ac <main+0xfb0>)
20001078:	2293      	movs	r2, #147	; 0x93
2000107a:	00d2      	lsls	r2, r2, #3
2000107c:	4694      	mov	ip, r2
2000107e:	44bc      	add	ip, r7
20001080:	4463      	add	r3, ip
20001082:	2205      	movs	r2, #5
20001084:	609a      	str	r2, [r3, #8]
						player.xPos = 96;
20001086:	4b49      	ldr	r3, [pc, #292]	; (200011ac <main+0xfb0>)
20001088:	2293      	movs	r2, #147	; 0x93
2000108a:	00d2      	lsls	r2, r2, #3
2000108c:	4694      	mov	ip, r2
2000108e:	44bc      	add	ip, r7
20001090:	4463      	add	r3, ip
20001092:	2260      	movs	r2, #96	; 0x60
20001094:	605a      	str	r2, [r3, #4]
						is_climbing = 0;
20001096:	2300      	movs	r3, #0
20001098:	4a47      	ldr	r2, [pc, #284]	; (200011b8 <main+0xfbc>)
2000109a:	18ba      	adds	r2, r7, r2
2000109c:	6013      	str	r3, [r2, #0]
						has_climbed = 1;
2000109e:	2301      	movs	r3, #1
200010a0:	2292      	movs	r2, #146	; 0x92
200010a2:	00d2      	lsls	r2, r2, #3
200010a4:	18ba      	adds	r2, r7, r2
200010a6:	6013      	str	r3, [r2, #0]
						ascii_write("*tapp*","");
200010a8:	4a44      	ldr	r2, [pc, #272]	; (200011bc <main+0xfc0>)
200010aa:	4b46      	ldr	r3, [pc, #280]	; (200011c4 <main+0xfc8>)
200010ac:	0011      	movs	r1, r2
200010ae:	0018      	movs	r0, r3
200010b0:	f002 ff4c 	bl	20003f4c <ascii_write>
200010b4:	e00b      	b.n	200010ce <main+0xed2>
					}
				} else {
					player.update(&player);
200010b6:	4b3d      	ldr	r3, [pc, #244]	; (200011ac <main+0xfb0>)
200010b8:	2293      	movs	r2, #147	; 0x93
200010ba:	00d2      	lsls	r2, r2, #3
200010bc:	4694      	mov	ip, r2
200010be:	44bc      	add	ip, r7
200010c0:	4463      	add	r3, ip
200010c2:	68db      	ldr	r3, [r3, #12]
200010c4:	229c      	movs	r2, #156	; 0x9c
200010c6:	0092      	lsls	r2, r2, #2
200010c8:	18ba      	adds	r2, r7, r2
200010ca:	0010      	movs	r0, r2
200010cc:	4798      	blx	r3
				}
				
				if (read_DIL_single(EXPLOSION_TRIGGER)){
200010ce:	2003      	movs	r0, #3
200010d0:	f002 fd4a 	bl	20003b68 <read_DIL_single>
200010d4:	1e03      	subs	r3, r0, #0
200010d6:	d00f      	beq.n	200010f8 <main+0xefc>
					game_over_adder = 3;
200010d8:	2303      	movs	r3, #3
200010da:	2291      	movs	r2, #145	; 0x91
200010dc:	00d2      	lsls	r2, r2, #3
200010de:	18ba      	adds	r2, r7, r2
200010e0:	6013      	str	r3, [r2, #0]
					ascii_write("*KABOOOOM*","");
200010e2:	4a36      	ldr	r2, [pc, #216]	; (200011bc <main+0xfc0>)
200010e4:	4b38      	ldr	r3, [pc, #224]	; (200011c8 <main+0xfcc>)
200010e6:	0011      	movs	r1, r2
200010e8:	0018      	movs	r0, r3
200010ea:	f002 ff2f 	bl	20003f4c <ascii_write>
					exploding = 1;
200010ee:	2301      	movs	r3, #1
200010f0:	2290      	movs	r2, #144	; 0x90
200010f2:	00d2      	lsls	r2, r2, #3
200010f4:	18ba      	adds	r2, r7, r2
200010f6:	6013      	str	r3, [r2, #0]
				}
				
				//fire1_indoors.update(&fire1_indoors);
				//fire updates done above
				if(!no_DIP) {
200010f8:	4b34      	ldr	r3, [pc, #208]	; (200011cc <main+0xfd0>)
200010fa:	18fb      	adds	r3, r7, r3
200010fc:	681b      	ldr	r3, [r3, #0]
200010fe:	2b00      	cmp	r3, #0
20001100:	d11d      	bne.n	2000113e <main+0xf42>
					setPlayerPosition(player.xPos, player.yPos);
20001102:	4b2a      	ldr	r3, [pc, #168]	; (200011ac <main+0xfb0>)
20001104:	2293      	movs	r2, #147	; 0x93
20001106:	00d2      	lsls	r2, r2, #3
20001108:	4694      	mov	ip, r2
2000110a:	44bc      	add	ip, r7
2000110c:	4463      	add	r3, ip
2000110e:	685a      	ldr	r2, [r3, #4]
20001110:	4b26      	ldr	r3, [pc, #152]	; (200011ac <main+0xfb0>)
20001112:	2193      	movs	r1, #147	; 0x93
20001114:	00c9      	lsls	r1, r1, #3
20001116:	468c      	mov	ip, r1
20001118:	44bc      	add	ip, r7
2000111a:	4463      	add	r3, ip
2000111c:	689b      	ldr	r3, [r3, #8]
2000111e:	0019      	movs	r1, r3
20001120:	0010      	movs	r0, r2
20001122:	f001 f933 	bl	2000238c <setPlayerPosition>
					DIP.update(&DIP);					
20001126:	4b2a      	ldr	r3, [pc, #168]	; (200011d0 <main+0xfd4>)
20001128:	2293      	movs	r2, #147	; 0x93
2000112a:	00d2      	lsls	r2, r2, #3
2000112c:	4694      	mov	ip, r2
2000112e:	44bc      	add	ip, r7
20001130:	4463      	add	r3, ip
20001132:	68db      	ldr	r3, [r3, #12]
20001134:	22a5      	movs	r2, #165	; 0xa5
20001136:	0092      	lsls	r2, r2, #2
20001138:	18ba      	adds	r2, r7, r2
2000113a:	0010      	movs	r0, r2
2000113c:	4798      	blx	r3
				}
				hair.update(&hair);
2000113e:	4b25      	ldr	r3, [pc, #148]	; (200011d4 <main+0xfd8>)
20001140:	2293      	movs	r2, #147	; 0x93
20001142:	00d2      	lsls	r2, r2, #3
20001144:	4694      	mov	ip, r2
20001146:	44bc      	add	ip, r7
20001148:	4463      	add	r3, ip
2000114a:	68db      	ldr	r3, [r3, #12]
2000114c:	22c0      	movs	r2, #192	; 0xc0
2000114e:	0092      	lsls	r2, r2, #2
20001150:	18ba      	adds	r2, r7, r2
20001152:	0010      	movs	r0, r2
20001154:	4798      	blx	r3
				if(read_DIL_single(HAIR_TRIGGER)) {
20001156:	2001      	movs	r0, #1
20001158:	f002 fd06 	bl	20003b68 <read_DIL_single>
2000115c:	1e03      	subs	r3, r0, #0
2000115e:	d03b      	beq.n	200011d8 <main+0xfdc>
					hair.xPos = player.xPos;
20001160:	4b12      	ldr	r3, [pc, #72]	; (200011ac <main+0xfb0>)
20001162:	2293      	movs	r2, #147	; 0x93
20001164:	00d2      	lsls	r2, r2, #3
20001166:	4694      	mov	ip, r2
20001168:	44bc      	add	ip, r7
2000116a:	4463      	add	r3, ip
2000116c:	685a      	ldr	r2, [r3, #4]
2000116e:	4b19      	ldr	r3, [pc, #100]	; (200011d4 <main+0xfd8>)
20001170:	2193      	movs	r1, #147	; 0x93
20001172:	00c9      	lsls	r1, r1, #3
20001174:	468c      	mov	ip, r1
20001176:	44bc      	add	ip, r7
20001178:	4463      	add	r3, ip
2000117a:	605a      	str	r2, [r3, #4]
					hair.yPos = player.yPos - 28;
2000117c:	4b0b      	ldr	r3, [pc, #44]	; (200011ac <main+0xfb0>)
2000117e:	2293      	movs	r2, #147	; 0x93
20001180:	00d2      	lsls	r2, r2, #3
20001182:	4694      	mov	ip, r2
20001184:	44bc      	add	ip, r7
20001186:	4463      	add	r3, ip
20001188:	689b      	ldr	r3, [r3, #8]
2000118a:	3b1c      	subs	r3, #28
2000118c:	001a      	movs	r2, r3
2000118e:	4b11      	ldr	r3, [pc, #68]	; (200011d4 <main+0xfd8>)
20001190:	2193      	movs	r1, #147	; 0x93
20001192:	00c9      	lsls	r1, r1, #3
20001194:	468c      	mov	ip, r1
20001196:	44bc      	add	ip, r7
20001198:	4463      	add	r3, ip
2000119a:	609a      	str	r2, [r3, #8]
2000119c:	e02e      	b.n	200011fc <main+0x1000>
2000119e:	46c0      	nop			; (mov r8, r8)
200011a0:	200045e4 	andcs	r4, r0, r4, ror #11
200011a4:	fffffc70 			; <UNDEFINED> instruction: 0xfffffc70
200011a8:	20008618 	andcs	r8, r0, r8, lsl r6
200011ac:	fffffdd8 			; <UNDEFINED> instruction: 0xfffffdd8
200011b0:	fffffe20 			; <UNDEFINED> instruction: 0xfffffe20
200011b4:	2000861c 	andcs	r8, r0, ip, lsl r6
200011b8:	00000494 	muleq	r0, r4, r4
200011bc:	2000e66c 	andcs	lr, r0, ip, ror #12
200011c0:	2000e678 	andcs	lr, r0, r8, ror r6
200011c4:	2000e680 	andcs	lr, r0, r0, lsl #13
200011c8:	2000e688 	andcs	lr, r0, r8, lsl #13
200011cc:	00000484 	andeq	r0, r0, r4, lsl #9
200011d0:	fffffdfc 			; <UNDEFINED> instruction: 0xfffffdfc
200011d4:	fffffe68 			; <UNDEFINED> instruction: 0xfffffe68
				} else {
					hair.xPos = -100;
200011d8:	4bb7      	ldr	r3, [pc, #732]	; (200014b8 <main+0x12bc>)
200011da:	2293      	movs	r2, #147	; 0x93
200011dc:	00d2      	lsls	r2, r2, #3
200011de:	4694      	mov	ip, r2
200011e0:	44bc      	add	ip, r7
200011e2:	4463      	add	r3, ip
200011e4:	2264      	movs	r2, #100	; 0x64
200011e6:	4252      	negs	r2, r2
200011e8:	605a      	str	r2, [r3, #4]
					hair.yPos = -100;
200011ea:	4bb3      	ldr	r3, [pc, #716]	; (200014b8 <main+0x12bc>)
200011ec:	2293      	movs	r2, #147	; 0x93
200011ee:	00d2      	lsls	r2, r2, #3
200011f0:	4694      	mov	ip, r2
200011f2:	44bc      	add	ip, r7
200011f4:	4463      	add	r3, ip
200011f6:	2264      	movs	r2, #100	; 0x64
200011f8:	4252      	negs	r2, r2
200011fa:	609a      	str	r2, [r3, #8]
				}
				
				
				
				if (!no_DIP && DIP.yPos >= player.yPos && (player.xPos + DIP_WIDTH/2 >= DIP.xPos && player.xPos <= DIP.xPos + DIP_WIDTH/2 )){ // DIP_collision
200011fc:	4baf      	ldr	r3, [pc, #700]	; (200014bc <main+0x12c0>)
200011fe:	18fb      	adds	r3, r7, r3
20001200:	681b      	ldr	r3, [r3, #0]
20001202:	2b00      	cmp	r3, #0
20001204:	d13d      	bne.n	20001282 <main+0x1086>
20001206:	4bae      	ldr	r3, [pc, #696]	; (200014c0 <main+0x12c4>)
20001208:	2293      	movs	r2, #147	; 0x93
2000120a:	00d2      	lsls	r2, r2, #3
2000120c:	4694      	mov	ip, r2
2000120e:	44bc      	add	ip, r7
20001210:	4463      	add	r3, ip
20001212:	689a      	ldr	r2, [r3, #8]
20001214:	4bab      	ldr	r3, [pc, #684]	; (200014c4 <main+0x12c8>)
20001216:	2193      	movs	r1, #147	; 0x93
20001218:	00c9      	lsls	r1, r1, #3
2000121a:	468c      	mov	ip, r1
2000121c:	44bc      	add	ip, r7
2000121e:	4463      	add	r3, ip
20001220:	689b      	ldr	r3, [r3, #8]
20001222:	429a      	cmp	r2, r3
20001224:	db2d      	blt.n	20001282 <main+0x1086>
20001226:	4ba7      	ldr	r3, [pc, #668]	; (200014c4 <main+0x12c8>)
20001228:	2293      	movs	r2, #147	; 0x93
2000122a:	00d2      	lsls	r2, r2, #3
2000122c:	4694      	mov	ip, r2
2000122e:	44bc      	add	ip, r7
20001230:	4463      	add	r3, ip
20001232:	685b      	ldr	r3, [r3, #4]
20001234:	3309      	adds	r3, #9
20001236:	001a      	movs	r2, r3
20001238:	4ba1      	ldr	r3, [pc, #644]	; (200014c0 <main+0x12c4>)
2000123a:	2193      	movs	r1, #147	; 0x93
2000123c:	00c9      	lsls	r1, r1, #3
2000123e:	468c      	mov	ip, r1
20001240:	44bc      	add	ip, r7
20001242:	4463      	add	r3, ip
20001244:	685b      	ldr	r3, [r3, #4]
20001246:	429a      	cmp	r2, r3
20001248:	db1b      	blt.n	20001282 <main+0x1086>
2000124a:	4b9e      	ldr	r3, [pc, #632]	; (200014c4 <main+0x12c8>)
2000124c:	2293      	movs	r2, #147	; 0x93
2000124e:	00d2      	lsls	r2, r2, #3
20001250:	4694      	mov	ip, r2
20001252:	44bc      	add	ip, r7
20001254:	4463      	add	r3, ip
20001256:	685a      	ldr	r2, [r3, #4]
20001258:	4b99      	ldr	r3, [pc, #612]	; (200014c0 <main+0x12c4>)
2000125a:	2193      	movs	r1, #147	; 0x93
2000125c:	00c9      	lsls	r1, r1, #3
2000125e:	468c      	mov	ip, r1
20001260:	44bc      	add	ip, r7
20001262:	4463      	add	r3, ip
20001264:	685b      	ldr	r3, [r3, #4]
20001266:	3309      	adds	r3, #9
20001268:	429a      	cmp	r2, r3
2000126a:	dc0a      	bgt.n	20001282 <main+0x1086>
					game_over_adder = 100;
2000126c:	2364      	movs	r3, #100	; 0x64
2000126e:	2291      	movs	r2, #145	; 0x91
20001270:	00d2      	lsls	r2, r2, #3
20001272:	18ba      	adds	r2, r7, r2
20001274:	6013      	str	r3, [r2, #0]
					ascii_write("DIPs-WITCH:","       NyAHAHAHAH");
20001276:	4a94      	ldr	r2, [pc, #592]	; (200014c8 <main+0x12cc>)
20001278:	4b94      	ldr	r3, [pc, #592]	; (200014cc <main+0x12d0>)
2000127a:	0011      	movs	r1, r2
2000127c:	0018      	movs	r0, r3
2000127e:	f002 fe65 	bl	20003f4c <ascii_write>
				}
				
				static int distance_player_fire;	//fire_collision
				static int j;
				for(j = 0; j < 3; j++) {
20001282:	4b93      	ldr	r3, [pc, #588]	; (200014d0 <main+0x12d4>)
20001284:	2200      	movs	r2, #0
20001286:	601a      	str	r2, [r3, #0]
20001288:	e061      	b.n	2000134e <main+0x1152>
					distance_player_fire = (player.xPos + 9) - (fires[j].xPos + 5);
2000128a:	4b8e      	ldr	r3, [pc, #568]	; (200014c4 <main+0x12c8>)
2000128c:	2293      	movs	r2, #147	; 0x93
2000128e:	00d2      	lsls	r2, r2, #3
20001290:	4694      	mov	ip, r2
20001292:	44bc      	add	ip, r7
20001294:	4463      	add	r3, ip
20001296:	685b      	ldr	r3, [r3, #4]
20001298:	3309      	adds	r3, #9
2000129a:	0019      	movs	r1, r3
2000129c:	4b8c      	ldr	r3, [pc, #560]	; (200014d0 <main+0x12d4>)
2000129e:	681a      	ldr	r2, [r3, #0]
200012a0:	4b8c      	ldr	r3, [pc, #560]	; (200014d4 <main+0x12d8>)
200012a2:	2093      	movs	r0, #147	; 0x93
200012a4:	00c0      	lsls	r0, r0, #3
200012a6:	1838      	adds	r0, r7, r0
200012a8:	18c0      	adds	r0, r0, r3
200012aa:	0013      	movs	r3, r2
200012ac:	00db      	lsls	r3, r3, #3
200012ae:	189b      	adds	r3, r3, r2
200012b0:	009b      	lsls	r3, r3, #2
200012b2:	18c3      	adds	r3, r0, r3
200012b4:	3304      	adds	r3, #4
200012b6:	681b      	ldr	r3, [r3, #0]
200012b8:	3305      	adds	r3, #5
200012ba:	1aca      	subs	r2, r1, r3
200012bc:	4b86      	ldr	r3, [pc, #536]	; (200014d8 <main+0x12dc>)
200012be:	601a      	str	r2, [r3, #0]
					if(player.yPos > (fires[j].yPos - 18 + 7) && 
200012c0:	4b80      	ldr	r3, [pc, #512]	; (200014c4 <main+0x12c8>)
200012c2:	2293      	movs	r2, #147	; 0x93
200012c4:	00d2      	lsls	r2, r2, #3
200012c6:	4694      	mov	ip, r2
200012c8:	44bc      	add	ip, r7
200012ca:	4463      	add	r3, ip
200012cc:	6899      	ldr	r1, [r3, #8]
200012ce:	4b80      	ldr	r3, [pc, #512]	; (200014d0 <main+0x12d4>)
200012d0:	681a      	ldr	r2, [r3, #0]
200012d2:	4b80      	ldr	r3, [pc, #512]	; (200014d4 <main+0x12d8>)
200012d4:	2093      	movs	r0, #147	; 0x93
200012d6:	00c0      	lsls	r0, r0, #3
200012d8:	1838      	adds	r0, r7, r0
200012da:	18c0      	adds	r0, r0, r3
200012dc:	0013      	movs	r3, r2
200012de:	00db      	lsls	r3, r3, #3
200012e0:	189b      	adds	r3, r3, r2
200012e2:	009b      	lsls	r3, r3, #2
200012e4:	18c3      	adds	r3, r0, r3
200012e6:	3308      	adds	r3, #8
200012e8:	681b      	ldr	r3, [r3, #0]
200012ea:	3b0b      	subs	r3, #11
200012ec:	4299      	cmp	r1, r3
200012ee:	dd29      	ble.n	20001344 <main+0x1148>
							player.yPos < fires[j].yPos && distance_player_fire < 8 && distance_player_fire > -8) {
200012f0:	4b74      	ldr	r3, [pc, #464]	; (200014c4 <main+0x12c8>)
200012f2:	2293      	movs	r2, #147	; 0x93
200012f4:	00d2      	lsls	r2, r2, #3
200012f6:	4694      	mov	ip, r2
200012f8:	44bc      	add	ip, r7
200012fa:	4463      	add	r3, ip
200012fc:	6899      	ldr	r1, [r3, #8]
200012fe:	4b74      	ldr	r3, [pc, #464]	; (200014d0 <main+0x12d4>)
20001300:	681a      	ldr	r2, [r3, #0]
20001302:	4b74      	ldr	r3, [pc, #464]	; (200014d4 <main+0x12d8>)
20001304:	2093      	movs	r0, #147	; 0x93
20001306:	00c0      	lsls	r0, r0, #3
20001308:	1838      	adds	r0, r7, r0
2000130a:	18c0      	adds	r0, r0, r3
2000130c:	0013      	movs	r3, r2
2000130e:	00db      	lsls	r3, r3, #3
20001310:	189b      	adds	r3, r3, r2
20001312:	009b      	lsls	r3, r3, #2
20001314:	18c3      	adds	r3, r0, r3
20001316:	3308      	adds	r3, #8
20001318:	681b      	ldr	r3, [r3, #0]
					if(player.yPos > (fires[j].yPos - 18 + 7) && 
2000131a:	4299      	cmp	r1, r3
2000131c:	da12      	bge.n	20001344 <main+0x1148>
							player.yPos < fires[j].yPos && distance_player_fire < 8 && distance_player_fire > -8) {
2000131e:	4b6e      	ldr	r3, [pc, #440]	; (200014d8 <main+0x12dc>)
20001320:	681b      	ldr	r3, [r3, #0]
20001322:	2b07      	cmp	r3, #7
20001324:	dc0e      	bgt.n	20001344 <main+0x1148>
20001326:	4b6c      	ldr	r3, [pc, #432]	; (200014d8 <main+0x12dc>)
20001328:	681b      	ldr	r3, [r3, #0]
2000132a:	3307      	adds	r3, #7
2000132c:	db0a      	blt.n	20001344 <main+0x1148>
						game_over_adder = 20;
2000132e:	2314      	movs	r3, #20
20001330:	2291      	movs	r2, #145	; 0x91
20001332:	00d2      	lsls	r2, r2, #3
20001334:	18ba      	adds	r2, r7, r2
20001336:	6013      	str	r3, [r2, #0]
						ascii_write("*FWOOSH*","");
20001338:	4a68      	ldr	r2, [pc, #416]	; (200014dc <main+0x12e0>)
2000133a:	4b69      	ldr	r3, [pc, #420]	; (200014e0 <main+0x12e4>)
2000133c:	0011      	movs	r1, r2
2000133e:	0018      	movs	r0, r3
20001340:	f002 fe04 	bl	20003f4c <ascii_write>
				for(j = 0; j < 3; j++) {
20001344:	4b62      	ldr	r3, [pc, #392]	; (200014d0 <main+0x12d4>)
20001346:	681b      	ldr	r3, [r3, #0]
20001348:	1c5a      	adds	r2, r3, #1
2000134a:	4b61      	ldr	r3, [pc, #388]	; (200014d0 <main+0x12d4>)
2000134c:	601a      	str	r2, [r3, #0]
2000134e:	4b60      	ldr	r3, [pc, #384]	; (200014d0 <main+0x12d4>)
20001350:	681b      	ldr	r3, [r3, #0]
20001352:	2b02      	cmp	r3, #2
20001354:	dd99      	ble.n	2000128a <main+0x108e>
					}					
				}
				
				static int trophy_burned = 0;	//trophy burning
				static int distance_hair_trophy;
				distance_hair_trophy = (hair.xPos + 9) - (trophy.xPos + 5);
20001356:	4b58      	ldr	r3, [pc, #352]	; (200014b8 <main+0x12bc>)
20001358:	2293      	movs	r2, #147	; 0x93
2000135a:	00d2      	lsls	r2, r2, #3
2000135c:	4694      	mov	ip, r2
2000135e:	44bc      	add	ip, r7
20001360:	4463      	add	r3, ip
20001362:	685b      	ldr	r3, [r3, #4]
20001364:	3309      	adds	r3, #9
20001366:	001a      	movs	r2, r3
20001368:	4b5e      	ldr	r3, [pc, #376]	; (200014e4 <main+0x12e8>)
2000136a:	2193      	movs	r1, #147	; 0x93
2000136c:	00c9      	lsls	r1, r1, #3
2000136e:	468c      	mov	ip, r1
20001370:	44bc      	add	ip, r7
20001372:	4463      	add	r3, ip
20001374:	685b      	ldr	r3, [r3, #4]
20001376:	3305      	adds	r3, #5
20001378:	1ad2      	subs	r2, r2, r3
2000137a:	4b5b      	ldr	r3, [pc, #364]	; (200014e8 <main+0x12ec>)
2000137c:	601a      	str	r2, [r3, #0]
				if(!trophy_burned && abs(distance_hair_trophy) < 5) {
2000137e:	4b5b      	ldr	r3, [pc, #364]	; (200014ec <main+0x12f0>)
20001380:	681b      	ldr	r3, [r3, #0]
20001382:	2b00      	cmp	r3, #0
20001384:	d130      	bne.n	200013e8 <main+0x11ec>
20001386:	4b58      	ldr	r3, [pc, #352]	; (200014e8 <main+0x12ec>)
20001388:	681b      	ldr	r3, [r3, #0]
2000138a:	3304      	adds	r3, #4
2000138c:	db2c      	blt.n	200013e8 <main+0x11ec>
2000138e:	4b56      	ldr	r3, [pc, #344]	; (200014e8 <main+0x12ec>)
20001390:	681b      	ldr	r3, [r3, #0]
20001392:	2b04      	cmp	r3, #4
20001394:	dc28      	bgt.n	200013e8 <main+0x11ec>
					trophy_burned = 1;
20001396:	4b55      	ldr	r3, [pc, #340]	; (200014ec <main+0x12f0>)
20001398:	2201      	movs	r2, #1
2000139a:	601a      	str	r2, [r3, #0]
					fires[1].xPos = trophy.xPos;
2000139c:	4b51      	ldr	r3, [pc, #324]	; (200014e4 <main+0x12e8>)
2000139e:	2293      	movs	r2, #147	; 0x93
200013a0:	00d2      	lsls	r2, r2, #3
200013a2:	4694      	mov	ip, r2
200013a4:	44bc      	add	ip, r7
200013a6:	4463      	add	r3, ip
200013a8:	685a      	ldr	r2, [r3, #4]
200013aa:	4b4a      	ldr	r3, [pc, #296]	; (200014d4 <main+0x12d8>)
200013ac:	2193      	movs	r1, #147	; 0x93
200013ae:	00c9      	lsls	r1, r1, #3
200013b0:	468c      	mov	ip, r1
200013b2:	44bc      	add	ip, r7
200013b4:	4463      	add	r3, ip
200013b6:	629a      	str	r2, [r3, #40]	; 0x28
					fires[1].yPos = trophy.yPos + 5;
200013b8:	4b4a      	ldr	r3, [pc, #296]	; (200014e4 <main+0x12e8>)
200013ba:	2293      	movs	r2, #147	; 0x93
200013bc:	00d2      	lsls	r2, r2, #3
200013be:	4694      	mov	ip, r2
200013c0:	44bc      	add	ip, r7
200013c2:	4463      	add	r3, ip
200013c4:	689b      	ldr	r3, [r3, #8]
200013c6:	1d5a      	adds	r2, r3, #5
200013c8:	4b42      	ldr	r3, [pc, #264]	; (200014d4 <main+0x12d8>)
200013ca:	2193      	movs	r1, #147	; 0x93
200013cc:	00c9      	lsls	r1, r1, #3
200013ce:	468c      	mov	ip, r1
200013d0:	44bc      	add	ip, r7
200013d2:	4463      	add	r3, ip
200013d4:	62da      	str	r2, [r3, #44]	; 0x2c
					trophy.xPos = 500;
200013d6:	4b43      	ldr	r3, [pc, #268]	; (200014e4 <main+0x12e8>)
200013d8:	2293      	movs	r2, #147	; 0x93
200013da:	00d2      	lsls	r2, r2, #3
200013dc:	4694      	mov	ip, r2
200013de:	44bc      	add	ip, r7
200013e0:	4463      	add	r3, ip
200013e2:	22fa      	movs	r2, #250	; 0xfa
200013e4:	0052      	lsls	r2, r2, #1
200013e6:	605a      	str	r2, [r3, #4]
				}
				
				static int DIP_burned = 0;
				static int distance_hair_DIP;
				distance_hair_DIP = (hair.xPos + 9) - (DIP.xPos + 9);
200013e8:	4b33      	ldr	r3, [pc, #204]	; (200014b8 <main+0x12bc>)
200013ea:	2293      	movs	r2, #147	; 0x93
200013ec:	00d2      	lsls	r2, r2, #3
200013ee:	4694      	mov	ip, r2
200013f0:	44bc      	add	ip, r7
200013f2:	4463      	add	r3, ip
200013f4:	685b      	ldr	r3, [r3, #4]
200013f6:	3309      	adds	r3, #9
200013f8:	001a      	movs	r2, r3
200013fa:	4b31      	ldr	r3, [pc, #196]	; (200014c0 <main+0x12c4>)
200013fc:	2193      	movs	r1, #147	; 0x93
200013fe:	00c9      	lsls	r1, r1, #3
20001400:	468c      	mov	ip, r1
20001402:	44bc      	add	ip, r7
20001404:	4463      	add	r3, ip
20001406:	685b      	ldr	r3, [r3, #4]
20001408:	3309      	adds	r3, #9
2000140a:	1ad2      	subs	r2, r2, r3
2000140c:	4b38      	ldr	r3, [pc, #224]	; (200014f0 <main+0x12f4>)
2000140e:	601a      	str	r2, [r3, #0]
				if(!DIP_burned && read_DIL_single(LIGHT_TRIGGER) && player.yPos > 10 && abs(distance_hair_DIP) < 5) {
20001410:	4b38      	ldr	r3, [pc, #224]	; (200014f4 <main+0x12f8>)
20001412:	681b      	ldr	r3, [r3, #0]
20001414:	2b00      	cmp	r3, #0
20001416:	d139      	bne.n	2000148c <main+0x1290>
20001418:	2006      	movs	r0, #6
2000141a:	f002 fba5 	bl	20003b68 <read_DIL_single>
2000141e:	1e03      	subs	r3, r0, #0
20001420:	d034      	beq.n	2000148c <main+0x1290>
20001422:	4b28      	ldr	r3, [pc, #160]	; (200014c4 <main+0x12c8>)
20001424:	2293      	movs	r2, #147	; 0x93
20001426:	00d2      	lsls	r2, r2, #3
20001428:	4694      	mov	ip, r2
2000142a:	44bc      	add	ip, r7
2000142c:	4463      	add	r3, ip
2000142e:	689b      	ldr	r3, [r3, #8]
20001430:	2b0a      	cmp	r3, #10
20001432:	dd2b      	ble.n	2000148c <main+0x1290>
20001434:	4b2e      	ldr	r3, [pc, #184]	; (200014f0 <main+0x12f4>)
20001436:	681b      	ldr	r3, [r3, #0]
20001438:	3304      	adds	r3, #4
2000143a:	db27      	blt.n	2000148c <main+0x1290>
2000143c:	4b2c      	ldr	r3, [pc, #176]	; (200014f0 <main+0x12f4>)
2000143e:	681b      	ldr	r3, [r3, #0]
20001440:	2b04      	cmp	r3, #4
20001442:	dc23      	bgt.n	2000148c <main+0x1290>
					DIP_burned = 1;
20001444:	4b2b      	ldr	r3, [pc, #172]	; (200014f4 <main+0x12f8>)
20001446:	2201      	movs	r2, #1
20001448:	601a      	str	r2, [r3, #0]
					fires[2].xPos = DIP.xPos;
2000144a:	4b1d      	ldr	r3, [pc, #116]	; (200014c0 <main+0x12c4>)
2000144c:	2293      	movs	r2, #147	; 0x93
2000144e:	00d2      	lsls	r2, r2, #3
20001450:	4694      	mov	ip, r2
20001452:	44bc      	add	ip, r7
20001454:	4463      	add	r3, ip
20001456:	685a      	ldr	r2, [r3, #4]
20001458:	4b1e      	ldr	r3, [pc, #120]	; (200014d4 <main+0x12d8>)
2000145a:	2193      	movs	r1, #147	; 0x93
2000145c:	00c9      	lsls	r1, r1, #3
2000145e:	468c      	mov	ip, r1
20001460:	44bc      	add	ip, r7
20001462:	4463      	add	r3, ip
20001464:	64da      	str	r2, [r3, #76]	; 0x4c
					fires[2].yPos = DIP.yPos + 6;
20001466:	4b16      	ldr	r3, [pc, #88]	; (200014c0 <main+0x12c4>)
20001468:	2293      	movs	r2, #147	; 0x93
2000146a:	00d2      	lsls	r2, r2, #3
2000146c:	4694      	mov	ip, r2
2000146e:	44bc      	add	ip, r7
20001470:	4463      	add	r3, ip
20001472:	689b      	ldr	r3, [r3, #8]
20001474:	1d9a      	adds	r2, r3, #6
20001476:	4b17      	ldr	r3, [pc, #92]	; (200014d4 <main+0x12d8>)
20001478:	2193      	movs	r1, #147	; 0x93
2000147a:	00c9      	lsls	r1, r1, #3
2000147c:	468c      	mov	ip, r1
2000147e:	44bc      	add	ip, r7
20001480:	4463      	add	r3, ip
20001482:	651a      	str	r2, [r3, #80]	; 0x50
					no_DIP = 1;
20001484:	2301      	movs	r3, #1
20001486:	4a0d      	ldr	r2, [pc, #52]	; (200014bc <main+0x12c0>)
20001488:	18ba      	adds	r2, r7, r2
2000148a:	6013      	str	r3, [r2, #0]
				}
				
				game_over += game_over_adder;
2000148c:	4b1a      	ldr	r3, [pc, #104]	; (200014f8 <main+0x12fc>)
2000148e:	18fb      	adds	r3, r7, r3
20001490:	681a      	ldr	r2, [r3, #0]
20001492:	2391      	movs	r3, #145	; 0x91
20001494:	00db      	lsls	r3, r3, #3
20001496:	18fb      	adds	r3, r7, r3
20001498:	681b      	ldr	r3, [r3, #0]
2000149a:	18d3      	adds	r3, r2, r3
2000149c:	4a16      	ldr	r2, [pc, #88]	; (200014f8 <main+0x12fc>)
2000149e:	18ba      	adds	r2, r7, r2
200014a0:	6013      	str	r3, [r2, #0]
				
				if(game_over >= 100) {
200014a2:	4b15      	ldr	r3, [pc, #84]	; (200014f8 <main+0x12fc>)
200014a4:	18fb      	adds	r3, r7, r3
200014a6:	681b      	ldr	r3, [r3, #0]
200014a8:	2b63      	cmp	r3, #99	; 0x63
200014aa:	dc00      	bgt.n	200014ae <main+0x12b2>
200014ac:	e0d5      	b.n	2000165a <main+0x145e>
					current_screen = RESET_GAME;
200014ae:	4b13      	ldr	r3, [pc, #76]	; (200014fc <main+0x1300>)
200014b0:	220a      	movs	r2, #10
200014b2:	601a      	str	r2, [r3, #0]
				}
				
				break;
200014b4:	e0d1      	b.n	2000165a <main+0x145e>
200014b6:	46c0      	nop			; (mov r8, r8)
200014b8:	fffffe68 			; <UNDEFINED> instruction: 0xfffffe68
200014bc:	00000484 	andeq	r0, r0, r4, lsl #9
200014c0:	fffffdfc 			; <UNDEFINED> instruction: 0xfffffdfc
200014c4:	fffffdd8 			; <UNDEFINED> instruction: 0xfffffdd8
200014c8:	2000e694 	mulcs	r0, r4, r6
200014cc:	2000e6a8 	andcs	lr, r0, r8, lsr #13
200014d0:	200045e8 	andcs	r4, r0, r8, ror #11
200014d4:	fffffc70 			; <UNDEFINED> instruction: 0xfffffc70
200014d8:	200045ec 	andcs	r4, r0, ip, ror #11
200014dc:	2000e66c 	andcs	lr, r0, ip, ror #12
200014e0:	2000e6b4 			; <UNDEFINED> instruction: 0x2000e6b4
200014e4:	fffffe8c 			; <UNDEFINED> instruction: 0xfffffe8c
200014e8:	200045f0 	strdcs	r4, [r0], -r0
200014ec:	200045f4 	strdcs	r4, [r0], -r4	; <UNPREDICTABLE>
200014f0:	200045f8 	strdcs	r4, [r0], -r8
200014f4:	200045fc 	strdcs	r4, [r0], -ip
200014f8:	0000048c 	andeq	r0, r0, ip, lsl #9
200014fc:	20008608 	andcs	r8, r0, r8, lsl #12
				
			
			case RESET_GAME: //restart
				counter = 0;
20001500:	4b57      	ldr	r3, [pc, #348]	; (20001660 <main+0x1464>)
20001502:	2200      	movs	r2, #0
20001504:	601a      	str	r2, [r3, #0]
				current_screen = START_SCREEN;
20001506:	4b57      	ldr	r3, [pc, #348]	; (20001664 <main+0x1468>)
20001508:	2201      	movs	r2, #1
2000150a:	601a      	str	r2, [r3, #0]
				if(read_DIL() == 0) {
2000150c:	f002 fb1c 	bl	20003b48 <read_DIL>
20001510:	1e03      	subs	r3, r0, #0
20001512:	d102      	bne.n	2000151a <main+0x131e>
					current_screen = SWITCH_LOCK; 
20001514:	4b53      	ldr	r3, [pc, #332]	; (20001664 <main+0x1468>)
20001516:	2200      	movs	r2, #0
20001518:	601a      	str	r2, [r3, #0]
				}
	
				static int test = 0;
				test+=2;
2000151a:	4b53      	ldr	r3, [pc, #332]	; (20001668 <main+0x146c>)
2000151c:	681b      	ldr	r3, [r3, #0]
2000151e:	1c9a      	adds	r2, r3, #2
20001520:	4b51      	ldr	r3, [pc, #324]	; (20001668 <main+0x146c>)
20001522:	601a      	str	r2, [r3, #0]
	
				exploding = 0;
20001524:	2300      	movs	r3, #0
20001526:	2290      	movs	r2, #144	; 0x90
20001528:	00d2      	lsls	r2, r2, #3
2000152a:	18ba      	adds	r2, r7, r2
2000152c:	6013      	str	r3, [r2, #0]
				is_climbing = 0;
2000152e:	2300      	movs	r3, #0
20001530:	4a4e      	ldr	r2, [pc, #312]	; (2000166c <main+0x1470>)
20001532:	18ba      	adds	r2, r7, r2
20001534:	6013      	str	r3, [r2, #0]
				has_climbed = 0;
20001536:	2300      	movs	r3, #0
20001538:	2292      	movs	r2, #146	; 0x92
2000153a:	00d2      	lsls	r2, r2, #3
2000153c:	18ba      	adds	r2, r7, r2
2000153e:	6013      	str	r3, [r2, #0]
				game_over = 0;
20001540:	2300      	movs	r3, #0
20001542:	4a4b      	ldr	r2, [pc, #300]	; (20001670 <main+0x1474>)
20001544:	18ba      	adds	r2, r7, r2
20001546:	6013      	str	r3, [r2, #0]
				game_over_adder = 0;
20001548:	2300      	movs	r3, #0
2000154a:	2291      	movs	r2, #145	; 0x91
2000154c:	00d2      	lsls	r2, r2, #3
2000154e:	18ba      	adds	r2, r7, r2
20001550:	6013      	str	r3, [r2, #0]
				fires[0].xPos = 40;		//FIRE1_INDO
20001552:	4b48      	ldr	r3, [pc, #288]	; (20001674 <main+0x1478>)
20001554:	2293      	movs	r2, #147	; 0x93
20001556:	00d2      	lsls	r2, r2, #3
20001558:	4694      	mov	ip, r2
2000155a:	44bc      	add	ip, r7
2000155c:	4463      	add	r3, ip
2000155e:	2228      	movs	r2, #40	; 0x28
20001560:	605a      	str	r2, [r3, #4]
				fires[0].yPos = 64-12-8;
20001562:	4b44      	ldr	r3, [pc, #272]	; (20001674 <main+0x1478>)
20001564:	2293      	movs	r2, #147	; 0x93
20001566:	00d2      	lsls	r2, r2, #3
20001568:	4694      	mov	ip, r2
2000156a:	44bc      	add	ip, r7
2000156c:	4463      	add	r3, ip
2000156e:	222c      	movs	r2, #44	; 0x2c
20001570:	609a      	str	r2, [r3, #8]
				fires[2].xPos = -50;		//FIRE1_INDO
20001572:	4b40      	ldr	r3, [pc, #256]	; (20001674 <main+0x1478>)
20001574:	2293      	movs	r2, #147	; 0x93
20001576:	00d2      	lsls	r2, r2, #3
20001578:	4694      	mov	ip, r2
2000157a:	44bc      	add	ip, r7
2000157c:	4463      	add	r3, ip
2000157e:	2232      	movs	r2, #50	; 0x32
20001580:	4252      	negs	r2, r2
20001582:	64da      	str	r2, [r3, #76]	; 0x4c
				fires[2].yPos = -50;
20001584:	4b3b      	ldr	r3, [pc, #236]	; (20001674 <main+0x1478>)
20001586:	2293      	movs	r2, #147	; 0x93
20001588:	00d2      	lsls	r2, r2, #3
2000158a:	4694      	mov	ip, r2
2000158c:	44bc      	add	ip, r7
2000158e:	4463      	add	r3, ip
20001590:	2232      	movs	r2, #50	; 0x32
20001592:	4252      	negs	r2, r2
20001594:	651a      	str	r2, [r3, #80]	; 0x50
				fires[1].xPos = -50;		//FIRE1_INDO
20001596:	4b37      	ldr	r3, [pc, #220]	; (20001674 <main+0x1478>)
20001598:	2293      	movs	r2, #147	; 0x93
2000159a:	00d2      	lsls	r2, r2, #3
2000159c:	4694      	mov	ip, r2
2000159e:	44bc      	add	ip, r7
200015a0:	4463      	add	r3, ip
200015a2:	2232      	movs	r2, #50	; 0x32
200015a4:	4252      	negs	r2, r2
200015a6:	629a      	str	r2, [r3, #40]	; 0x28
				fires[1].yPos = -50;
200015a8:	4b32      	ldr	r3, [pc, #200]	; (20001674 <main+0x1478>)
200015aa:	2293      	movs	r2, #147	; 0x93
200015ac:	00d2      	lsls	r2, r2, #3
200015ae:	4694      	mov	ip, r2
200015b0:	44bc      	add	ip, r7
200015b2:	4463      	add	r3, ip
200015b4:	2232      	movs	r2, #50	; 0x32
200015b6:	4252      	negs	r2, r2
200015b8:	62da      	str	r2, [r3, #44]	; 0x2c
				bird.xPos = 180;
200015ba:	4b2f      	ldr	r3, [pc, #188]	; (20001678 <main+0x147c>)
200015bc:	2293      	movs	r2, #147	; 0x93
200015be:	00d2      	lsls	r2, r2, #3
200015c0:	4694      	mov	ip, r2
200015c2:	44bc      	add	ip, r7
200015c4:	4463      	add	r3, ip
200015c6:	22b4      	movs	r2, #180	; 0xb4
200015c8:	605a      	str	r2, [r3, #4]
				bird.yPos = 40;
200015ca:	4b2b      	ldr	r3, [pc, #172]	; (20001678 <main+0x147c>)
200015cc:	2293      	movs	r2, #147	; 0x93
200015ce:	00d2      	lsls	r2, r2, #3
200015d0:	4694      	mov	ip, r2
200015d2:	44bc      	add	ip, r7
200015d4:	4463      	add	r3, ip
200015d6:	2228      	movs	r2, #40	; 0x28
200015d8:	609a      	str	r2, [r3, #8]
				
				trophy.xPos = 19;
200015da:	4b28      	ldr	r3, [pc, #160]	; (2000167c <main+0x1480>)
200015dc:	2293      	movs	r2, #147	; 0x93
200015de:	00d2      	lsls	r2, r2, #3
200015e0:	4694      	mov	ip, r2
200015e2:	44bc      	add	ip, r7
200015e4:	4463      	add	r3, ip
200015e6:	2213      	movs	r2, #19
200015e8:	605a      	str	r2, [r3, #4]
				trophy.yPos = 5;
200015ea:	4b24      	ldr	r3, [pc, #144]	; (2000167c <main+0x1480>)
200015ec:	2293      	movs	r2, #147	; 0x93
200015ee:	00d2      	lsls	r2, r2, #3
200015f0:	4694      	mov	ip, r2
200015f2:	44bc      	add	ip, r7
200015f4:	4463      	add	r3, ip
200015f6:	2205      	movs	r2, #5
200015f8:	609a      	str	r2, [r3, #8]
				trophy_burned = 0;
200015fa:	4b21      	ldr	r3, [pc, #132]	; (20001680 <main+0x1484>)
200015fc:	2200      	movs	r2, #0
200015fe:	601a      	str	r2, [r3, #0]
				
				DIP.xPos = 100;
20001600:	4b20      	ldr	r3, [pc, #128]	; (20001684 <main+0x1488>)
20001602:	2293      	movs	r2, #147	; 0x93
20001604:	00d2      	lsls	r2, r2, #3
20001606:	4694      	mov	ip, r2
20001608:	44bc      	add	ip, r7
2000160a:	4463      	add	r3, ip
2000160c:	2264      	movs	r2, #100	; 0x64
2000160e:	605a      	str	r2, [r3, #4]
				DIP.yPos = 5;
20001610:	4b1c      	ldr	r3, [pc, #112]	; (20001684 <main+0x1488>)
20001612:	2293      	movs	r2, #147	; 0x93
20001614:	00d2      	lsls	r2, r2, #3
20001616:	4694      	mov	ip, r2
20001618:	44bc      	add	ip, r7
2000161a:	4463      	add	r3, ip
2000161c:	2205      	movs	r2, #5
2000161e:	609a      	str	r2, [r3, #8]
				DIP_burned = 0;
20001620:	4b19      	ldr	r3, [pc, #100]	; (20001688 <main+0x148c>)
20001622:	2200      	movs	r2, #0
20001624:	601a      	str	r2, [r3, #0]
				no_DIP = 0;
20001626:	2300      	movs	r3, #0
20001628:	4a18      	ldr	r2, [pc, #96]	; (2000168c <main+0x1490>)
2000162a:	18ba      	adds	r2, r7, r2
2000162c:	6013      	str	r3, [r2, #0]
				
				player.xPos = 3;
2000162e:	4b18      	ldr	r3, [pc, #96]	; (20001690 <main+0x1494>)
20001630:	2293      	movs	r2, #147	; 0x93
20001632:	00d2      	lsls	r2, r2, #3
20001634:	4694      	mov	ip, r2
20001636:	44bc      	add	ip, r7
20001638:	4463      	add	r3, ip
2000163a:	2203      	movs	r2, #3
2000163c:	605a      	str	r2, [r3, #4]
				player.yPos = 64-18-7; //player position
2000163e:	4b14      	ldr	r3, [pc, #80]	; (20001690 <main+0x1494>)
20001640:	2293      	movs	r2, #147	; 0x93
20001642:	00d2      	lsls	r2, r2, #3
20001644:	4694      	mov	ip, r2
20001646:	44bc      	add	ip, r7
20001648:	4463      	add	r3, ip
2000164a:	2227      	movs	r2, #39	; 0x27
2000164c:	609a      	str	r2, [r3, #8]
				clear_ascii();
2000164e:	f002 fc48 	bl	20003ee2 <clear_ascii>
				break;
20001652:	e003      	b.n	2000165c <main+0x1460>
				break;
20001654:	46c0      	nop			; (mov r8, r8)
20001656:	f7ff f8f3 	bl	20000840 <main+0x644>
				break;
2000165a:	46c0      	nop			; (mov r8, r8)
		switch(current_screen) {
2000165c:	f7ff f8f0 	bl	20000840 <main+0x644>
20001660:	200045e0 	andcs	r4, r0, r0, ror #11
20001664:	20008608 	andcs	r8, r0, r8, lsl #12
20001668:	20004600 	andcs	r4, r0, r0, lsl #12
2000166c:	00000494 	muleq	r0, r4, r4
20001670:	0000048c 	andeq	r0, r0, ip, lsl #9
20001674:	fffffc70 			; <UNDEFINED> instruction: 0xfffffc70
20001678:	fffffe44 			; <UNDEFINED> instruction: 0xfffffe44
2000167c:	fffffe8c 			; <UNDEFINED> instruction: 0xfffffe8c
20001680:	200045f4 	strdcs	r4, [r0], -r4	; <UNPREDICTABLE>
20001684:	fffffdfc 			; <UNDEFINED> instruction: 0xfffffdfc
20001688:	200045fc 	strdcs	r4, [r0], -ip
2000168c:	00000484 	andeq	r0, r0, r4, lsl #9
20001690:	fffffdd8 			; <UNDEFINED> instruction: 0xfffffdd8

20001694 <abs>:
		
	}
	
}

int abs(int value) {
20001694:	b580      	push	{r7, lr}
20001696:	b082      	sub	sp, #8
20001698:	af00      	add	r7, sp, #0
2000169a:	6078      	str	r0, [r7, #4]
	if(value < 0) {
2000169c:	687b      	ldr	r3, [r7, #4]
2000169e:	2b00      	cmp	r3, #0
200016a0:	da02      	bge.n	200016a8 <abs+0x14>
		return -value;
200016a2:	687b      	ldr	r3, [r7, #4]
200016a4:	425b      	negs	r3, r3
200016a6:	e000      	b.n	200016aa <abs+0x16>
	}
	return value;
200016a8:	687b      	ldr	r3, [r7, #4]
}
200016aa:	0018      	movs	r0, r3
200016ac:	46bd      	mov	sp, r7
200016ae:	b002      	add	sp, #8
200016b0:	bd80      	pop	{r7, pc}
200016b2:	46c0      	nop			; (mov r8, r8)

200016b4 <render>:
GameObject* gameObjects[100];
int nGameObjects = 0;


void render(GameObject* this)
{
200016b4:	b580      	push	{r7, lr}
200016b6:	b082      	sub	sp, #8
200016b8:	af00      	add	r7, sp, #0
200016ba:	6078      	str	r0, [r7, #4]
    
}
200016bc:	46c0      	nop			; (mov r8, r8)
200016be:	46bd      	mov	sp, r7
200016c0:	b002      	add	sp, #8
200016c2:	bd80      	pop	{r7, pc}

200016c4 <gameObjectUpdate>:

void gameObjectUpdate(GameObject *this) {
200016c4:	b580      	push	{r7, lr}
200016c6:	b082      	sub	sp, #8
200016c8:	af00      	add	r7, sp, #0
200016ca:	6078      	str	r0, [r7, #4]
	this->animation_counter++;
200016cc:	687b      	ldr	r3, [r7, #4]
200016ce:	6a1b      	ldr	r3, [r3, #32]
200016d0:	1c5a      	adds	r2, r3, #1
200016d2:	687b      	ldr	r3, [r7, #4]
200016d4:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
200016d6:	687b      	ldr	r3, [r7, #4]
200016d8:	6a1a      	ldr	r2, [r3, #32]
200016da:	687b      	ldr	r3, [r7, #4]
200016dc:	69db      	ldr	r3, [r3, #28]
200016de:	429a      	cmp	r2, r3
200016e0:	d10f      	bne.n	20001702 <gameObjectUpdate+0x3e>
		this->animation_counter = 0;
200016e2:	687b      	ldr	r3, [r7, #4]
200016e4:	2200      	movs	r2, #0
200016e6:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
200016e8:	687b      	ldr	r3, [r7, #4]
200016ea:	695b      	ldr	r3, [r3, #20]
200016ec:	1c5a      	adds	r2, r3, #1
200016ee:	687b      	ldr	r3, [r7, #4]
200016f0:	699b      	ldr	r3, [r3, #24]
200016f2:	0019      	movs	r1, r3
200016f4:	0010      	movs	r0, r2
200016f6:	f002 ff6d 	bl	200045d4 <__aeabi_idivmod>
200016fa:	000b      	movs	r3, r1
200016fc:	001a      	movs	r2, r3
200016fe:	687b      	ldr	r3, [r7, #4]
20001700:	615a      	str	r2, [r3, #20]
	}
}
20001702:	46c0      	nop			; (mov r8, r8)
20001704:	46bd      	mov	sp, r7
20001706:	b002      	add	sp, #8
20001708:	bd80      	pop	{r7, pc}
	...

2000170c <initSprites>:
Image fire2Image;
Image fire3Image;
Image fire4Image;
Image fire5Image;
Image fireImages[5];
static void initSprites( void ) {	
2000170c:	b580      	push	{r7, lr}
2000170e:	b08c      	sub	sp, #48	; 0x30
20001710:	af00      	add	r7, sp, #0
	sprite *pointer0 = &tempFireBlack;
20001712:	4b3e      	ldr	r3, [pc, #248]	; (2000180c <initSprites+0x100>)
20001714:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer0, fire_black_2_bits, fire1_gray_width, fire1_gray_height);
20001716:	493e      	ldr	r1, [pc, #248]	; (20001810 <initSprites+0x104>)
20001718:	6af8      	ldr	r0, [r7, #44]	; 0x2c
2000171a:	230c      	movs	r3, #12
2000171c:	2208      	movs	r2, #8
2000171e:	f002 f9f3 	bl	20003b08 <load_sprite>
	fireBlack = pointer0;
20001722:	4b3c      	ldr	r3, [pc, #240]	; (20001814 <initSprites+0x108>)
20001724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20001726:	601a      	str	r2, [r3, #0]
	
	sprite *pointer1 = &tempFire1Gray;
20001728:	4b3b      	ldr	r3, [pc, #236]	; (20001818 <initSprites+0x10c>)
2000172a:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer1, fire1_gray_bits, fire1_gray_width, fire1_gray_height);
2000172c:	493b      	ldr	r1, [pc, #236]	; (2000181c <initSprites+0x110>)
2000172e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20001730:	230c      	movs	r3, #12
20001732:	2208      	movs	r2, #8
20001734:	f002 f9e8 	bl	20003b08 <load_sprite>
	fire1Gray = pointer1;
20001738:	4b39      	ldr	r3, [pc, #228]	; (20001820 <initSprites+0x114>)
2000173a:	6aba      	ldr	r2, [r7, #40]	; 0x28
2000173c:	601a      	str	r2, [r3, #0]

	sprite *pointer2 = &tempFire1Light;
2000173e:	4b39      	ldr	r3, [pc, #228]	; (20001824 <initSprites+0x118>)
20001740:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer2, fire1_light_bits, fire1_gray_width, fire1_gray_height);
20001742:	4939      	ldr	r1, [pc, #228]	; (20001828 <initSprites+0x11c>)
20001744:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001746:	230c      	movs	r3, #12
20001748:	2208      	movs	r2, #8
2000174a:	f002 f9dd 	bl	20003b08 <load_sprite>
	fire1Light = pointer2;
2000174e:	4b37      	ldr	r3, [pc, #220]	; (2000182c <initSprites+0x120>)
20001750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001752:	601a      	str	r2, [r3, #0]

	sprite *pointer3 = &tempFire2Gray;
20001754:	4b36      	ldr	r3, [pc, #216]	; (20001830 <initSprites+0x124>)
20001756:	623b      	str	r3, [r7, #32]
	load_sprite(pointer3, fire2_gray_bits, fire1_gray_width, fire1_gray_height);
20001758:	4936      	ldr	r1, [pc, #216]	; (20001834 <initSprites+0x128>)
2000175a:	6a38      	ldr	r0, [r7, #32]
2000175c:	230c      	movs	r3, #12
2000175e:	2208      	movs	r2, #8
20001760:	f002 f9d2 	bl	20003b08 <load_sprite>
	fire2Gray = pointer3;
20001764:	4b34      	ldr	r3, [pc, #208]	; (20001838 <initSprites+0x12c>)
20001766:	6a3a      	ldr	r2, [r7, #32]
20001768:	601a      	str	r2, [r3, #0]

	sprite *pointer4 = &tempFire2Light;
2000176a:	4b34      	ldr	r3, [pc, #208]	; (2000183c <initSprites+0x130>)
2000176c:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer4, fire2_light_bits, fire1_gray_width, fire1_gray_height);
2000176e:	4934      	ldr	r1, [pc, #208]	; (20001840 <initSprites+0x134>)
20001770:	69f8      	ldr	r0, [r7, #28]
20001772:	230c      	movs	r3, #12
20001774:	2208      	movs	r2, #8
20001776:	f002 f9c7 	bl	20003b08 <load_sprite>
	fire2Light = pointer4;
2000177a:	4b32      	ldr	r3, [pc, #200]	; (20001844 <initSprites+0x138>)
2000177c:	69fa      	ldr	r2, [r7, #28]
2000177e:	601a      	str	r2, [r3, #0]

	sprite *pointer5 = &tempFire3Gray;
20001780:	4b31      	ldr	r3, [pc, #196]	; (20001848 <initSprites+0x13c>)
20001782:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer5, fire3_gray_bits, fire1_gray_width, fire1_gray_height);
20001784:	4931      	ldr	r1, [pc, #196]	; (2000184c <initSprites+0x140>)
20001786:	69b8      	ldr	r0, [r7, #24]
20001788:	230c      	movs	r3, #12
2000178a:	2208      	movs	r2, #8
2000178c:	f002 f9bc 	bl	20003b08 <load_sprite>
	fire3Gray = pointer5;
20001790:	4b2f      	ldr	r3, [pc, #188]	; (20001850 <initSprites+0x144>)
20001792:	69ba      	ldr	r2, [r7, #24]
20001794:	601a      	str	r2, [r3, #0]

	sprite *pointer6 = &tempFire3Light;
20001796:	4b2f      	ldr	r3, [pc, #188]	; (20001854 <initSprites+0x148>)
20001798:	617b      	str	r3, [r7, #20]
	load_sprite(pointer6, fire3_light_bits, fire1_gray_width, fire1_gray_height);
2000179a:	492f      	ldr	r1, [pc, #188]	; (20001858 <initSprites+0x14c>)
2000179c:	6978      	ldr	r0, [r7, #20]
2000179e:	230c      	movs	r3, #12
200017a0:	2208      	movs	r2, #8
200017a2:	f002 f9b1 	bl	20003b08 <load_sprite>
	fire3Light = pointer6;
200017a6:	4b2d      	ldr	r3, [pc, #180]	; (2000185c <initSprites+0x150>)
200017a8:	697a      	ldr	r2, [r7, #20]
200017aa:	601a      	str	r2, [r3, #0]

	sprite *pointer7 = &tempFire4Gray;
200017ac:	4b2c      	ldr	r3, [pc, #176]	; (20001860 <initSprites+0x154>)
200017ae:	613b      	str	r3, [r7, #16]
	load_sprite(pointer7, fire4_gray_bits, fire1_gray_width, fire1_gray_height);
200017b0:	492c      	ldr	r1, [pc, #176]	; (20001864 <initSprites+0x158>)
200017b2:	6938      	ldr	r0, [r7, #16]
200017b4:	230c      	movs	r3, #12
200017b6:	2208      	movs	r2, #8
200017b8:	f002 f9a6 	bl	20003b08 <load_sprite>
	fire4Gray = pointer7;
200017bc:	4b2a      	ldr	r3, [pc, #168]	; (20001868 <initSprites+0x15c>)
200017be:	693a      	ldr	r2, [r7, #16]
200017c0:	601a      	str	r2, [r3, #0]

	sprite *pointer8 = &tempFire4Light;
200017c2:	4b2a      	ldr	r3, [pc, #168]	; (2000186c <initSprites+0x160>)
200017c4:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer8, fire4_light_bits, fire1_gray_width, fire1_gray_height);
200017c6:	492a      	ldr	r1, [pc, #168]	; (20001870 <initSprites+0x164>)
200017c8:	68f8      	ldr	r0, [r7, #12]
200017ca:	230c      	movs	r3, #12
200017cc:	2208      	movs	r2, #8
200017ce:	f002 f99b 	bl	20003b08 <load_sprite>
	fire4Light = pointer8;
200017d2:	4b28      	ldr	r3, [pc, #160]	; (20001874 <initSprites+0x168>)
200017d4:	68fa      	ldr	r2, [r7, #12]
200017d6:	601a      	str	r2, [r3, #0]

	sprite *pointer9 = &tempFire5Gray;
200017d8:	4b27      	ldr	r3, [pc, #156]	; (20001878 <initSprites+0x16c>)
200017da:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer9, fire5_gray_bits, fire1_gray_width, fire1_gray_height);
200017dc:	4927      	ldr	r1, [pc, #156]	; (2000187c <initSprites+0x170>)
200017de:	68b8      	ldr	r0, [r7, #8]
200017e0:	230c      	movs	r3, #12
200017e2:	2208      	movs	r2, #8
200017e4:	f002 f990 	bl	20003b08 <load_sprite>
	fire5Gray = pointer9;
200017e8:	4b25      	ldr	r3, [pc, #148]	; (20001880 <initSprites+0x174>)
200017ea:	68ba      	ldr	r2, [r7, #8]
200017ec:	601a      	str	r2, [r3, #0]

	sprite *pointer10 = &tempFire5Light;
200017ee:	4b25      	ldr	r3, [pc, #148]	; (20001884 <initSprites+0x178>)
200017f0:	607b      	str	r3, [r7, #4]
	load_sprite(pointer10, fire5_light_bits, fire1_gray_width, fire1_gray_height);
200017f2:	4925      	ldr	r1, [pc, #148]	; (20001888 <initSprites+0x17c>)
200017f4:	6878      	ldr	r0, [r7, #4]
200017f6:	230c      	movs	r3, #12
200017f8:	2208      	movs	r2, #8
200017fa:	f002 f985 	bl	20003b08 <load_sprite>
	fire5Light = pointer10;
200017fe:	4b23      	ldr	r3, [pc, #140]	; (2000188c <initSprites+0x180>)
20001800:	687a      	ldr	r2, [r7, #4]
20001802:	601a      	str	r2, [r3, #0]
}
20001804:	46c0      	nop			; (mov r8, r8)
20001806:	46bd      	mov	sp, r7
20001808:	b00c      	add	sp, #48	; 0x30
2000180a:	bd80      	pop	{r7, pc}
2000180c:	200048c8 	andcs	r4, r0, r8, asr #17
20001810:	20008620 	andcs	r8, r0, r0, lsr #12
20001814:	200049c0 	andcs	r4, r0, r0, asr #19
20001818:	200049b4 			; <UNDEFINED> instruction: 0x200049b4
2000181c:	2000862c 	andcs	r8, r0, ip, lsr #12
20001820:	200049d8 	ldrdcs	r4, [r0], -r8
20001824:	20004990 	mulcs	r0, r0, r9
20001828:	20008638 	andcs	r8, r0, r8, lsr r6
2000182c:	20004890 	mulcs	r0, r0, r8
20001830:	200048bc 			; <UNDEFINED> instruction: 0x200048bc
20001834:	20008644 	andcs	r8, r0, r4, asr #12
20001838:	200049d4 	ldrdcs	r4, [r0], -r4	; <UNPREDICTABLE>
2000183c:	200049c4 	andcs	r4, r0, r4, asr #19
20001840:	20008650 	andcs	r8, r0, r0, asr r6
20001844:	200049ac 	andcs	r4, r0, ip, lsr #19
20001848:	20004974 	andcs	r4, r0, r4, ror r9
2000184c:	2000865c 	andcs	r8, r0, ip, asr r6
20001850:	200048a0 	andcs	r4, r0, r0, lsr #17
20001854:	20004894 	mulcs	r0, r4, r8
20001858:	20008668 	andcs	r8, r0, r8, ror #12
2000185c:	200049d0 	ldrdcs	r4, [r0], -r0
20001860:	200048a4 	andcs	r4, r0, r4, lsr #17
20001864:	20008674 	andcs	r8, r0, r4, ror r6
20001868:	2000498c 	andcs	r4, r0, ip, lsl #19
2000186c:	200048e0 	andcs	r4, r0, r0, ror #17
20001870:	20008680 	andcs	r8, r0, r0, lsl #13
20001874:	200048f8 	strdcs	r4, [r0], -r8
20001878:	20004968 	andcs	r4, r0, r8, ror #18
2000187c:	2000868c 	andcs	r8, r0, ip, lsl #13
20001880:	200049a8 	andcs	r4, r0, r8, lsr #19
20001884:	2000499c 	mulcs	r0, ip, r9
20001888:	20008698 	mulcs	r0, r8, r6
2000188c:	200049b0 			; <UNDEFINED> instruction: 0x200049b0

20001890 <init_fire>:
	
void init_fire( GameObject *fireObj ) {
20001890:	b590      	push	{r4, r7, lr}
20001892:	b083      	sub	sp, #12
20001894:	af00      	add	r7, sp, #0
20001896:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20001898:	4b30      	ldr	r3, [pc, #192]	; (2000195c <init_fire+0xcc>)
2000189a:	681b      	ldr	r3, [r3, #0]
2000189c:	2b00      	cmp	r3, #0
2000189e:	d049      	beq.n	20001934 <init_fire+0xa4>
		initSprites();
200018a0:	f7ff ff34 	bl	2000170c <initSprites>
		firstTime = 0;			
200018a4:	4b2d      	ldr	r3, [pc, #180]	; (2000195c <init_fire+0xcc>)
200018a6:	2200      	movs	r2, #0
200018a8:	601a      	str	r2, [r3, #0]

		fireImages[0] = fire1Image;
200018aa:	4b2d      	ldr	r3, [pc, #180]	; (20001960 <init_fire+0xd0>)
200018ac:	4a2d      	ldr	r2, [pc, #180]	; (20001964 <init_fire+0xd4>)
200018ae:	ca13      	ldmia	r2!, {r0, r1, r4}
200018b0:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[1] = fire2Image;
200018b2:	4b2b      	ldr	r3, [pc, #172]	; (20001960 <init_fire+0xd0>)
200018b4:	4a2c      	ldr	r2, [pc, #176]	; (20001968 <init_fire+0xd8>)
200018b6:	330c      	adds	r3, #12
200018b8:	ca13      	ldmia	r2!, {r0, r1, r4}
200018ba:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[2] = fire3Image;
200018bc:	4b28      	ldr	r3, [pc, #160]	; (20001960 <init_fire+0xd0>)
200018be:	4a2b      	ldr	r2, [pc, #172]	; (2000196c <init_fire+0xdc>)
200018c0:	3318      	adds	r3, #24
200018c2:	ca13      	ldmia	r2!, {r0, r1, r4}
200018c4:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[3] = fire4Image;
200018c6:	4b26      	ldr	r3, [pc, #152]	; (20001960 <init_fire+0xd0>)
200018c8:	4a29      	ldr	r2, [pc, #164]	; (20001970 <init_fire+0xe0>)
200018ca:	3324      	adds	r3, #36	; 0x24
200018cc:	ca13      	ldmia	r2!, {r0, r1, r4}
200018ce:	c313      	stmia	r3!, {r0, r1, r4}
		fireImages[4] = fire5Image;
200018d0:	4b23      	ldr	r3, [pc, #140]	; (20001960 <init_fire+0xd0>)
200018d2:	4a28      	ldr	r2, [pc, #160]	; (20001974 <init_fire+0xe4>)
200018d4:	3330      	adds	r3, #48	; 0x30
200018d6:	ca13      	ldmia	r2!, {r0, r1, r4}
200018d8:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&fireImages[0], fire1Gray, fire1Light, fireBlack);
200018da:	4b27      	ldr	r3, [pc, #156]	; (20001978 <init_fire+0xe8>)
200018dc:	6819      	ldr	r1, [r3, #0]
200018de:	4b27      	ldr	r3, [pc, #156]	; (2000197c <init_fire+0xec>)
200018e0:	681a      	ldr	r2, [r3, #0]
200018e2:	4b27      	ldr	r3, [pc, #156]	; (20001980 <init_fire+0xf0>)
200018e4:	681b      	ldr	r3, [r3, #0]
200018e6:	481e      	ldr	r0, [pc, #120]	; (20001960 <init_fire+0xd0>)
200018e8:	f002 f8fa 	bl	20003ae0 <load_image>
		load_image(&fireImages[1], fire2Gray, fire2Light, fireBlack);
200018ec:	4b25      	ldr	r3, [pc, #148]	; (20001984 <init_fire+0xf4>)
200018ee:	6819      	ldr	r1, [r3, #0]
200018f0:	4b25      	ldr	r3, [pc, #148]	; (20001988 <init_fire+0xf8>)
200018f2:	681a      	ldr	r2, [r3, #0]
200018f4:	4b22      	ldr	r3, [pc, #136]	; (20001980 <init_fire+0xf0>)
200018f6:	681b      	ldr	r3, [r3, #0]
200018f8:	4824      	ldr	r0, [pc, #144]	; (2000198c <init_fire+0xfc>)
200018fa:	f002 f8f1 	bl	20003ae0 <load_image>
		load_image(&fireImages[2], fire3Gray, fire3Light, fireBlack);
200018fe:	4b24      	ldr	r3, [pc, #144]	; (20001990 <init_fire+0x100>)
20001900:	6819      	ldr	r1, [r3, #0]
20001902:	4b24      	ldr	r3, [pc, #144]	; (20001994 <init_fire+0x104>)
20001904:	681a      	ldr	r2, [r3, #0]
20001906:	4b1e      	ldr	r3, [pc, #120]	; (20001980 <init_fire+0xf0>)
20001908:	681b      	ldr	r3, [r3, #0]
2000190a:	4823      	ldr	r0, [pc, #140]	; (20001998 <init_fire+0x108>)
2000190c:	f002 f8e8 	bl	20003ae0 <load_image>
		load_image(&fireImages[3], fire4Gray, fire4Light, fireBlack);
20001910:	4b22      	ldr	r3, [pc, #136]	; (2000199c <init_fire+0x10c>)
20001912:	6819      	ldr	r1, [r3, #0]
20001914:	4b22      	ldr	r3, [pc, #136]	; (200019a0 <init_fire+0x110>)
20001916:	681a      	ldr	r2, [r3, #0]
20001918:	4b19      	ldr	r3, [pc, #100]	; (20001980 <init_fire+0xf0>)
2000191a:	681b      	ldr	r3, [r3, #0]
2000191c:	4821      	ldr	r0, [pc, #132]	; (200019a4 <init_fire+0x114>)
2000191e:	f002 f8df 	bl	20003ae0 <load_image>
		load_image(&fireImages[4], fire5Gray, fire5Light, fireBlack);
20001922:	4b21      	ldr	r3, [pc, #132]	; (200019a8 <init_fire+0x118>)
20001924:	6819      	ldr	r1, [r3, #0]
20001926:	4b21      	ldr	r3, [pc, #132]	; (200019ac <init_fire+0x11c>)
20001928:	681a      	ldr	r2, [r3, #0]
2000192a:	4b15      	ldr	r3, [pc, #84]	; (20001980 <init_fire+0xf0>)
2000192c:	681b      	ldr	r3, [r3, #0]
2000192e:	4820      	ldr	r0, [pc, #128]	; (200019b0 <init_fire+0x120>)
20001930:	f002 f8d6 	bl	20003ae0 <load_image>
	}
	
	fireObj->images = fireImages;
20001934:	687b      	ldr	r3, [r7, #4]
20001936:	4a0a      	ldr	r2, [pc, #40]	; (20001960 <init_fire+0xd0>)
20001938:	601a      	str	r2, [r3, #0]

	fireObj->current_frame = 0;
2000193a:	687b      	ldr	r3, [r7, #4]
2000193c:	2200      	movs	r2, #0
2000193e:	615a      	str	r2, [r3, #20]
	fireObj->n_frames = 5;
20001940:	687b      	ldr	r3, [r7, #4]
20001942:	2205      	movs	r2, #5
20001944:	619a      	str	r2, [r3, #24]
	fireObj->animation_speed = 1;
20001946:	687b      	ldr	r3, [r7, #4]
20001948:	2201      	movs	r2, #1
2000194a:	61da      	str	r2, [r3, #28]
	fireObj->animation_counter = 0;
2000194c:	687b      	ldr	r3, [r7, #4]
2000194e:	2200      	movs	r2, #0
20001950:	621a      	str	r2, [r3, #32]
}
20001952:	46c0      	nop			; (mov r8, r8)
20001954:	46bd      	mov	sp, r7
20001956:	b003      	add	sp, #12
20001958:	bd90      	pop	{r4, r7, pc}
2000195a:	46c0      	nop			; (mov r8, r8)
2000195c:	200086a4 	andcs	r8, r0, r4, lsr #13
20001960:	2000492c 	andcs	r4, r0, ip, lsr #18
20001964:	200048ec 	andcs	r4, r0, ip, ror #17
20001968:	200048b0 			; <UNDEFINED> instruction: 0x200048b0
2000196c:	200048d4 	ldrdcs	r4, [r0], -r4	; <UNPREDICTABLE>
20001970:	20004980 	andcs	r4, r0, r0, lsl #19
20001974:	20004920 	andcs	r4, r0, r0, lsr #18
20001978:	200049d8 	ldrdcs	r4, [r0], -r8
2000197c:	20004890 	mulcs	r0, r0, r8
20001980:	200049c0 	andcs	r4, r0, r0, asr #19
20001984:	200049d4 	ldrdcs	r4, [r0], -r4	; <UNPREDICTABLE>
20001988:	200049ac 	andcs	r4, r0, ip, lsr #19
2000198c:	20004938 	andcs	r4, r0, r8, lsr r9
20001990:	200048a0 	andcs	r4, r0, r0, lsr #17
20001994:	200049d0 	ldrdcs	r4, [r0], -r0
20001998:	20004944 	andcs	r4, r0, r4, asr #18
2000199c:	2000498c 	andcs	r4, r0, ip, lsl #19
200019a0:	200048f8 	strdcs	r4, [r0], -r8
200019a4:	20004950 	andcs	r4, r0, r0, asr r9
200019a8:	200049a8 	andcs	r4, r0, r8, lsr #19
200019ac:	200049b0 			; <UNDEFINED> instruction: 0x200049b0
200019b0:	2000495c 	andcs	r4, r0, ip, asr r9

200019b4 <playerUpdate>:
#include "controls.h"
#include "gameobject.h"
#include "player.h"
#include "ascii_display.h"

void playerUpdate(GameObject *this) {
200019b4:	b580      	push	{r7, lr}
200019b6:	b082      	sub	sp, #8
200019b8:	af00      	add	r7, sp, #0
200019ba:	6078      	str	r0, [r7, #4]
	
	// Animate
	this->animation_counter++;
200019bc:	687b      	ldr	r3, [r7, #4]
200019be:	6a1b      	ldr	r3, [r3, #32]
200019c0:	1c5a      	adds	r2, r3, #1
200019c2:	687b      	ldr	r3, [r7, #4]
200019c4:	621a      	str	r2, [r3, #32]
	if (this->animation_counter == this->animation_speed) {
200019c6:	687b      	ldr	r3, [r7, #4]
200019c8:	6a1a      	ldr	r2, [r3, #32]
200019ca:	687b      	ldr	r3, [r7, #4]
200019cc:	69db      	ldr	r3, [r3, #28]
200019ce:	429a      	cmp	r2, r3
200019d0:	d10f      	bne.n	200019f2 <playerUpdate+0x3e>
		this->animation_counter = 0;
200019d2:	687b      	ldr	r3, [r7, #4]
200019d4:	2200      	movs	r2, #0
200019d6:	621a      	str	r2, [r3, #32]
		this->current_frame = (this->current_frame + 1) % this->n_frames;
200019d8:	687b      	ldr	r3, [r7, #4]
200019da:	695b      	ldr	r3, [r3, #20]
200019dc:	1c5a      	adds	r2, r3, #1
200019de:	687b      	ldr	r3, [r7, #4]
200019e0:	699b      	ldr	r3, [r3, #24]
200019e2:	0019      	movs	r1, r3
200019e4:	0010      	movs	r0, r2
200019e6:	f002 fdf5 	bl	200045d4 <__aeabi_idivmod>
200019ea:	000b      	movs	r3, r1
200019ec:	001a      	movs	r2, r3
200019ee:	687b      	ldr	r3, [r7, #4]
200019f0:	615a      	str	r2, [r3, #20]
	static xSpeed = 0;
	static ySpeed = 0;
	
	// Y position changes
	
	if (lastJumpValue != read_DIL_single(JUMP_TRIGGER) && (this->yPos == LIMIT_DOWN || this->yPos == PLATFORM_Y - PLAYER_HEIGHT)){
200019f2:	2005      	movs	r0, #5
200019f4:	f002 f8b8 	bl	20003b68 <read_DIL_single>
200019f8:	0002      	movs	r2, r0
200019fa:	4b68      	ldr	r3, [pc, #416]	; (20001b9c <playerUpdate+0x1e8>)
200019fc:	681b      	ldr	r3, [r3, #0]
200019fe:	429a      	cmp	r2, r3
20001a00:	d00b      	beq.n	20001a1a <playerUpdate+0x66>
20001a02:	687b      	ldr	r3, [r7, #4]
20001a04:	689b      	ldr	r3, [r3, #8]
20001a06:	2b27      	cmp	r3, #39	; 0x27
20001a08:	d003      	beq.n	20001a12 <playerUpdate+0x5e>
20001a0a:	687b      	ldr	r3, [r7, #4]
20001a0c:	689b      	ldr	r3, [r3, #8]
20001a0e:	2b05      	cmp	r3, #5
20001a10:	d103      	bne.n	20001a1a <playerUpdate+0x66>
		ySpeed = -(SPEED_ADD_Y);
20001a12:	4b63      	ldr	r3, [pc, #396]	; (20001ba0 <playerUpdate+0x1ec>)
20001a14:	2204      	movs	r2, #4
20001a16:	4252      	negs	r2, r2
20001a18:	601a      	str	r2, [r3, #0]
	}
	
	if (this->yPos + ySpeed > LIMIT_DOWN){
20001a1a:	687b      	ldr	r3, [r7, #4]
20001a1c:	689a      	ldr	r2, [r3, #8]
20001a1e:	4b60      	ldr	r3, [pc, #384]	; (20001ba0 <playerUpdate+0x1ec>)
20001a20:	681b      	ldr	r3, [r3, #0]
20001a22:	18d3      	adds	r3, r2, r3
20001a24:	2b27      	cmp	r3, #39	; 0x27
20001a26:	dd10      	ble.n	20001a4a <playerUpdate+0x96>
		this->yPos = LIMIT_DOWN;
20001a28:	687b      	ldr	r3, [r7, #4]
20001a2a:	2227      	movs	r2, #39	; 0x27
20001a2c:	609a      	str	r2, [r3, #8]
		if (ySpeed == SPEED_ADD_Y + 1){
20001a2e:	4b5c      	ldr	r3, [pc, #368]	; (20001ba0 <playerUpdate+0x1ec>)
20001a30:	681b      	ldr	r3, [r3, #0]
20001a32:	2b05      	cmp	r3, #5
20001a34:	d105      	bne.n	20001a42 <playerUpdate+0x8e>
			ascii_write("*THUMP*","");
20001a36:	4a5b      	ldr	r2, [pc, #364]	; (20001ba4 <playerUpdate+0x1f0>)
20001a38:	4b5b      	ldr	r3, [pc, #364]	; (20001ba8 <playerUpdate+0x1f4>)
20001a3a:	0011      	movs	r1, r2
20001a3c:	0018      	movs	r0, r3
20001a3e:	f002 fa85 	bl	20003f4c <ascii_write>
		}
		ySpeed = 0;
20001a42:	4b57      	ldr	r3, [pc, #348]	; (20001ba0 <playerUpdate+0x1ec>)
20001a44:	2200      	movs	r2, #0
20001a46:	601a      	str	r2, [r3, #0]
20001a48:	e02a      	b.n	20001aa0 <playerUpdate+0xec>
	}
	else if (this->yPos + ySpeed > PLATFORM_Y - PLAYER_HEIGHT && this->yPos + ySpeed < PLATFORM_Y - PLAYER_HEIGHT + 2*SPEED_ADD_Y){
20001a4a:	687b      	ldr	r3, [r7, #4]
20001a4c:	689a      	ldr	r2, [r3, #8]
20001a4e:	4b54      	ldr	r3, [pc, #336]	; (20001ba0 <playerUpdate+0x1ec>)
20001a50:	681b      	ldr	r3, [r3, #0]
20001a52:	18d3      	adds	r3, r2, r3
20001a54:	2b05      	cmp	r3, #5
20001a56:	dd17      	ble.n	20001a88 <playerUpdate+0xd4>
20001a58:	687b      	ldr	r3, [r7, #4]
20001a5a:	689a      	ldr	r2, [r3, #8]
20001a5c:	4b50      	ldr	r3, [pc, #320]	; (20001ba0 <playerUpdate+0x1ec>)
20001a5e:	681b      	ldr	r3, [r3, #0]
20001a60:	18d3      	adds	r3, r2, r3
20001a62:	2b0c      	cmp	r3, #12
20001a64:	dc10      	bgt.n	20001a88 <playerUpdate+0xd4>
		this->yPos = PLATFORM_Y - PLAYER_HEIGHT;
20001a66:	687b      	ldr	r3, [r7, #4]
20001a68:	2205      	movs	r2, #5
20001a6a:	609a      	str	r2, [r3, #8]
		if (ySpeed == SPEED_ADD_Y + 1){
20001a6c:	4b4c      	ldr	r3, [pc, #304]	; (20001ba0 <playerUpdate+0x1ec>)
20001a6e:	681b      	ldr	r3, [r3, #0]
20001a70:	2b05      	cmp	r3, #5
20001a72:	d105      	bne.n	20001a80 <playerUpdate+0xcc>
			ascii_write("*THUMP*","");
20001a74:	4a4b      	ldr	r2, [pc, #300]	; (20001ba4 <playerUpdate+0x1f0>)
20001a76:	4b4c      	ldr	r3, [pc, #304]	; (20001ba8 <playerUpdate+0x1f4>)
20001a78:	0011      	movs	r1, r2
20001a7a:	0018      	movs	r0, r3
20001a7c:	f002 fa66 	bl	20003f4c <ascii_write>
		}
		ySpeed = 0;
20001a80:	4b47      	ldr	r3, [pc, #284]	; (20001ba0 <playerUpdate+0x1ec>)
20001a82:	2200      	movs	r2, #0
20001a84:	601a      	str	r2, [r3, #0]
20001a86:	e00b      	b.n	20001aa0 <playerUpdate+0xec>
	}
	else{
		this->yPos+=ySpeed;
20001a88:	687b      	ldr	r3, [r7, #4]
20001a8a:	689a      	ldr	r2, [r3, #8]
20001a8c:	4b44      	ldr	r3, [pc, #272]	; (20001ba0 <playerUpdate+0x1ec>)
20001a8e:	681b      	ldr	r3, [r3, #0]
20001a90:	18d2      	adds	r2, r2, r3
20001a92:	687b      	ldr	r3, [r7, #4]
20001a94:	609a      	str	r2, [r3, #8]
		ySpeed++;
20001a96:	4b42      	ldr	r3, [pc, #264]	; (20001ba0 <playerUpdate+0x1ec>)
20001a98:	681b      	ldr	r3, [r3, #0]
20001a9a:	1c5a      	adds	r2, r3, #1
20001a9c:	4b40      	ldr	r3, [pc, #256]	; (20001ba0 <playerUpdate+0x1ec>)
20001a9e:	601a      	str	r2, [r3, #0]
	}

	// X position changes
	
	if (!lastRightValue && read_DIL_single(RIGHT_TRIGGER)){ 
20001aa0:	4b42      	ldr	r3, [pc, #264]	; (20001bac <playerUpdate+0x1f8>)
20001aa2:	681b      	ldr	r3, [r3, #0]
20001aa4:	2b00      	cmp	r3, #0
20001aa6:	d109      	bne.n	20001abc <playerUpdate+0x108>
20001aa8:	2000      	movs	r0, #0
20001aaa:	f002 f85d 	bl	20003b68 <read_DIL_single>
20001aae:	1e03      	subs	r3, r0, #0
20001ab0:	d004      	beq.n	20001abc <playerUpdate+0x108>
		xSpeed += SPEED_ADD_X;
20001ab2:	4b3f      	ldr	r3, [pc, #252]	; (20001bb0 <playerUpdate+0x1fc>)
20001ab4:	681b      	ldr	r3, [r3, #0]
20001ab6:	1cda      	adds	r2, r3, #3
20001ab8:	4b3d      	ldr	r3, [pc, #244]	; (20001bb0 <playerUpdate+0x1fc>)
20001aba:	601a      	str	r2, [r3, #0]
	}
	
	if (!lastLeftValue && read_DIL_single(LEFT_TRIGGER)){
20001abc:	4b3d      	ldr	r3, [pc, #244]	; (20001bb4 <playerUpdate+0x200>)
20001abe:	681b      	ldr	r3, [r3, #0]
20001ac0:	2b00      	cmp	r3, #0
20001ac2:	d109      	bne.n	20001ad8 <playerUpdate+0x124>
20001ac4:	2007      	movs	r0, #7
20001ac6:	f002 f84f 	bl	20003b68 <read_DIL_single>
20001aca:	1e03      	subs	r3, r0, #0
20001acc:	d004      	beq.n	20001ad8 <playerUpdate+0x124>
		xSpeed -= SPEED_ADD_X;
20001ace:	4b38      	ldr	r3, [pc, #224]	; (20001bb0 <playerUpdate+0x1fc>)
20001ad0:	681b      	ldr	r3, [r3, #0]
20001ad2:	1eda      	subs	r2, r3, #3
20001ad4:	4b36      	ldr	r3, [pc, #216]	; (20001bb0 <playerUpdate+0x1fc>)
20001ad6:	601a      	str	r2, [r3, #0]
	}
	
	if (((!lastLeftValue && read_DIL_single(LEFT_TRIGGER)) || (!lastRightValue && read_DIL_single(RIGHT_TRIGGER))) && this->yPos != PLATFORM_Y - PLAYER_HEIGHT && this->yPos != LIMIT_DOWN){
20001ad8:	4b36      	ldr	r3, [pc, #216]	; (20001bb4 <playerUpdate+0x200>)
20001ada:	681b      	ldr	r3, [r3, #0]
20001adc:	2b00      	cmp	r3, #0
20001ade:	d104      	bne.n	20001aea <playerUpdate+0x136>
20001ae0:	2007      	movs	r0, #7
20001ae2:	f002 f841 	bl	20003b68 <read_DIL_single>
20001ae6:	1e03      	subs	r3, r0, #0
20001ae8:	d108      	bne.n	20001afc <playerUpdate+0x148>
20001aea:	4b30      	ldr	r3, [pc, #192]	; (20001bac <playerUpdate+0x1f8>)
20001aec:	681b      	ldr	r3, [r3, #0]
20001aee:	2b00      	cmp	r3, #0
20001af0:	d111      	bne.n	20001b16 <playerUpdate+0x162>
20001af2:	2000      	movs	r0, #0
20001af4:	f002 f838 	bl	20003b68 <read_DIL_single>
20001af8:	1e03      	subs	r3, r0, #0
20001afa:	d00c      	beq.n	20001b16 <playerUpdate+0x162>
20001afc:	687b      	ldr	r3, [r7, #4]
20001afe:	689b      	ldr	r3, [r3, #8]
20001b00:	2b05      	cmp	r3, #5
20001b02:	d008      	beq.n	20001b16 <playerUpdate+0x162>
20001b04:	687b      	ldr	r3, [r7, #4]
20001b06:	689b      	ldr	r3, [r3, #8]
20001b08:	2b27      	cmp	r3, #39	; 0x27
20001b0a:	d004      	beq.n	20001b16 <playerUpdate+0x162>
		xSpeed *=2;
20001b0c:	4b28      	ldr	r3, [pc, #160]	; (20001bb0 <playerUpdate+0x1fc>)
20001b0e:	681b      	ldr	r3, [r3, #0]
20001b10:	005a      	lsls	r2, r3, #1
20001b12:	4b27      	ldr	r3, [pc, #156]	; (20001bb0 <playerUpdate+0x1fc>)
20001b14:	601a      	str	r2, [r3, #0]
	}
	
	if (this->xPos + xSpeed > LIMIT_RIGHT || this->xPos + xSpeed < LIMIT_LEFT){
20001b16:	687b      	ldr	r3, [r7, #4]
20001b18:	685a      	ldr	r2, [r3, #4]
20001b1a:	4b25      	ldr	r3, [pc, #148]	; (20001bb0 <playerUpdate+0x1fc>)
20001b1c:	681b      	ldr	r3, [r3, #0]
20001b1e:	18d3      	adds	r3, r2, r3
20001b20:	2b6e      	cmp	r3, #110	; 0x6e
20001b22:	dc06      	bgt.n	20001b32 <playerUpdate+0x17e>
20001b24:	687b      	ldr	r3, [r7, #4]
20001b26:	685a      	ldr	r2, [r3, #4]
20001b28:	4b21      	ldr	r3, [pc, #132]	; (20001bb0 <playerUpdate+0x1fc>)
20001b2a:	681b      	ldr	r3, [r3, #0]
20001b2c:	18d3      	adds	r3, r2, r3
20001b2e:	2b00      	cmp	r3, #0
20001b30:	da04      	bge.n	20001b3c <playerUpdate+0x188>
		xSpeed *= -1;	
20001b32:	4b1f      	ldr	r3, [pc, #124]	; (20001bb0 <playerUpdate+0x1fc>)
20001b34:	681b      	ldr	r3, [r3, #0]
20001b36:	425a      	negs	r2, r3
20001b38:	4b1d      	ldr	r3, [pc, #116]	; (20001bb0 <playerUpdate+0x1fc>)
20001b3a:	601a      	str	r2, [r3, #0]
	}
	
	this->xPos += xSpeed;	
20001b3c:	687b      	ldr	r3, [r7, #4]
20001b3e:	685a      	ldr	r2, [r3, #4]
20001b40:	4b1b      	ldr	r3, [pc, #108]	; (20001bb0 <playerUpdate+0x1fc>)
20001b42:	681b      	ldr	r3, [r3, #0]
20001b44:	18d2      	adds	r2, r2, r3
20001b46:	687b      	ldr	r3, [r7, #4]
20001b48:	605a      	str	r2, [r3, #4]
	
	if (xSpeed > 0){
20001b4a:	4b19      	ldr	r3, [pc, #100]	; (20001bb0 <playerUpdate+0x1fc>)
20001b4c:	681b      	ldr	r3, [r3, #0]
20001b4e:	2b00      	cmp	r3, #0
20001b50:	dd05      	ble.n	20001b5e <playerUpdate+0x1aa>
		xSpeed--;
20001b52:	4b17      	ldr	r3, [pc, #92]	; (20001bb0 <playerUpdate+0x1fc>)
20001b54:	681b      	ldr	r3, [r3, #0]
20001b56:	1e5a      	subs	r2, r3, #1
20001b58:	4b15      	ldr	r3, [pc, #84]	; (20001bb0 <playerUpdate+0x1fc>)
20001b5a:	601a      	str	r2, [r3, #0]
20001b5c:	e008      	b.n	20001b70 <playerUpdate+0x1bc>
	}
	else if (xSpeed < 0){
20001b5e:	4b14      	ldr	r3, [pc, #80]	; (20001bb0 <playerUpdate+0x1fc>)
20001b60:	681b      	ldr	r3, [r3, #0]
20001b62:	2b00      	cmp	r3, #0
20001b64:	da04      	bge.n	20001b70 <playerUpdate+0x1bc>
		xSpeed++;
20001b66:	4b12      	ldr	r3, [pc, #72]	; (20001bb0 <playerUpdate+0x1fc>)
20001b68:	681b      	ldr	r3, [r3, #0]
20001b6a:	1c5a      	adds	r2, r3, #1
20001b6c:	4b10      	ldr	r3, [pc, #64]	; (20001bb0 <playerUpdate+0x1fc>)
20001b6e:	601a      	str	r2, [r3, #0]
	}
	
	// Prepare values
	lastRightValue = read_DIL_single(RIGHT_TRIGGER);
20001b70:	2000      	movs	r0, #0
20001b72:	f001 fff9 	bl	20003b68 <read_DIL_single>
20001b76:	0002      	movs	r2, r0
20001b78:	4b0c      	ldr	r3, [pc, #48]	; (20001bac <playerUpdate+0x1f8>)
20001b7a:	601a      	str	r2, [r3, #0]
	lastLeftValue = read_DIL_single(LEFT_TRIGGER);
20001b7c:	2007      	movs	r0, #7
20001b7e:	f001 fff3 	bl	20003b68 <read_DIL_single>
20001b82:	0002      	movs	r2, r0
20001b84:	4b0b      	ldr	r3, [pc, #44]	; (20001bb4 <playerUpdate+0x200>)
20001b86:	601a      	str	r2, [r3, #0]
	lastJumpValue = read_DIL_single(JUMP_TRIGGER);
20001b88:	2005      	movs	r0, #5
20001b8a:	f001 ffed 	bl	20003b68 <read_DIL_single>
20001b8e:	0002      	movs	r2, r0
20001b90:	4b02      	ldr	r3, [pc, #8]	; (20001b9c <playerUpdate+0x1e8>)
20001b92:	601a      	str	r2, [r3, #0]
	
20001b94:	46c0      	nop			; (mov r8, r8)
20001b96:	46bd      	mov	sp, r7
20001b98:	b002      	add	sp, #8
20001b9a:	bd80      	pop	{r7, pc}
20001b9c:	20004608 	andcs	r4, r0, r8, lsl #12
20001ba0:	2000460c 	andcs	r4, r0, ip, lsl #12
20001ba4:	2000e6c0 	andcs	lr, r0, r0, asr #13
20001ba8:	2000e6c4 	andcs	lr, r0, r4, asr #13
20001bac:	20004610 	andcs	r4, r0, r0, lsl r6
20001bb0:	20004614 	andcs	r4, r0, r4, lsl r6
20001bb4:	20004618 	andcs	r4, r0, r8, lsl r6

20001bb8 <initSprites>:
Image bird5Image;
Image bird6Image;
//Image bird7Image;
//Image bird8Image;
Image birdImages[6];
static void initSprites( void ) {	
20001bb8:	b580      	push	{r7, lr}
20001bba:	b090      	sub	sp, #64	; 0x40
20001bbc:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempBirdLight;
20001bbe:	4b54      	ldr	r3, [pc, #336]	; (20001d10 <initSprites+0x158>)
20001bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
	load_sprite(pointer11, bird1_light_bits, bird1_black_width, bird1_black_height);
20001bc2:	4954      	ldr	r1, [pc, #336]	; (20001d14 <initSprites+0x15c>)
20001bc4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
20001bc6:	2319      	movs	r3, #25
20001bc8:	2219      	movs	r2, #25
20001bca:	f001 ff9d 	bl	20003b08 <load_sprite>
	bird1Light = pointer11;
20001bce:	4b52      	ldr	r3, [pc, #328]	; (20001d18 <initSprites+0x160>)
20001bd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
20001bd2:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempBirdGray;
20001bd4:	4b51      	ldr	r3, [pc, #324]	; (20001d1c <initSprites+0x164>)
20001bd6:	63bb      	str	r3, [r7, #56]	; 0x38
	load_sprite(pointer12, bird1_gray_bits, bird1_black_width, bird1_black_height);
20001bd8:	4951      	ldr	r1, [pc, #324]	; (20001d20 <initSprites+0x168>)
20001bda:	6bb8      	ldr	r0, [r7, #56]	; 0x38
20001bdc:	2319      	movs	r3, #25
20001bde:	2219      	movs	r2, #25
20001be0:	f001 ff92 	bl	20003b08 <load_sprite>
	bird1Gray = pointer12;
20001be4:	4b4f      	ldr	r3, [pc, #316]	; (20001d24 <initSprites+0x16c>)
20001be6:	6bba      	ldr	r2, [r7, #56]	; 0x38
20001be8:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempBirdBlack;
20001bea:	4b4f      	ldr	r3, [pc, #316]	; (20001d28 <initSprites+0x170>)
20001bec:	637b      	str	r3, [r7, #52]	; 0x34
	load_sprite(pointer13, bird1_black_bits, bird1_black_width, bird1_black_height);
20001bee:	494f      	ldr	r1, [pc, #316]	; (20001d2c <initSprites+0x174>)
20001bf0:	6b78      	ldr	r0, [r7, #52]	; 0x34
20001bf2:	2319      	movs	r3, #25
20001bf4:	2219      	movs	r2, #25
20001bf6:	f001 ff87 	bl	20003b08 <load_sprite>
	bird1Black = pointer13;	
20001bfa:	4b4d      	ldr	r3, [pc, #308]	; (20001d30 <initSprites+0x178>)
20001bfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
20001bfe:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempBird2Light;
20001c00:	4b4c      	ldr	r3, [pc, #304]	; (20001d34 <initSprites+0x17c>)
20001c02:	633b      	str	r3, [r7, #48]	; 0x30
	load_sprite(pointer14, bird2_light_bits, bird2_black_width, bird2_black_height);
20001c04:	494c      	ldr	r1, [pc, #304]	; (20001d38 <initSprites+0x180>)
20001c06:	6b38      	ldr	r0, [r7, #48]	; 0x30
20001c08:	2319      	movs	r3, #25
20001c0a:	2219      	movs	r2, #25
20001c0c:	f001 ff7c 	bl	20003b08 <load_sprite>
	bird2Light = pointer14;
20001c10:	4b4a      	ldr	r3, [pc, #296]	; (20001d3c <initSprites+0x184>)
20001c12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20001c14:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempBird2Gray;
20001c16:	4b4a      	ldr	r3, [pc, #296]	; (20001d40 <initSprites+0x188>)
20001c18:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer15, bird2_gray_bits, bird2_black_width, bird2_black_height);
20001c1a:	494a      	ldr	r1, [pc, #296]	; (20001d44 <initSprites+0x18c>)
20001c1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20001c1e:	2319      	movs	r3, #25
20001c20:	2219      	movs	r2, #25
20001c22:	f001 ff71 	bl	20003b08 <load_sprite>
	bird2Gray = pointer15;
20001c26:	4b48      	ldr	r3, [pc, #288]	; (20001d48 <initSprites+0x190>)
20001c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20001c2a:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempBird2Black;
20001c2c:	4b47      	ldr	r3, [pc, #284]	; (20001d4c <initSprites+0x194>)
20001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer16, bird2_black_bits, bird2_black_width, bird2_black_height);
20001c30:	4947      	ldr	r1, [pc, #284]	; (20001d50 <initSprites+0x198>)
20001c32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20001c34:	2319      	movs	r3, #25
20001c36:	2219      	movs	r2, #25
20001c38:	f001 ff66 	bl	20003b08 <load_sprite>
	bird2Black = pointer16;
20001c3c:	4b45      	ldr	r3, [pc, #276]	; (20001d54 <initSprites+0x19c>)
20001c3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001c40:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempBird3Light;
20001c42:	4b45      	ldr	r3, [pc, #276]	; (20001d58 <initSprites+0x1a0>)
20001c44:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(finalPointer, bird3_light_bits, bird3_black_width, bird3_black_height);
20001c46:	4945      	ldr	r1, [pc, #276]	; (20001d5c <initSprites+0x1a4>)
20001c48:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001c4a:	2319      	movs	r3, #25
20001c4c:	2219      	movs	r2, #25
20001c4e:	f001 ff5b 	bl	20003b08 <load_sprite>
	bird3Light = finalPointer;
20001c52:	4b43      	ldr	r3, [pc, #268]	; (20001d60 <initSprites+0x1a8>)
20001c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001c56:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempBird3Gray;
20001c58:	4b42      	ldr	r3, [pc, #264]	; (20001d64 <initSprites+0x1ac>)
20001c5a:	623b      	str	r3, [r7, #32]
	load_sprite(pointer17, bird3_gray_bits, bird3_black_width, bird3_black_height);
20001c5c:	4942      	ldr	r1, [pc, #264]	; (20001d68 <initSprites+0x1b0>)
20001c5e:	6a38      	ldr	r0, [r7, #32]
20001c60:	2319      	movs	r3, #25
20001c62:	2219      	movs	r2, #25
20001c64:	f001 ff50 	bl	20003b08 <load_sprite>
	bird3Gray = pointer17;
20001c68:	4b40      	ldr	r3, [pc, #256]	; (20001d6c <initSprites+0x1b4>)
20001c6a:	6a3a      	ldr	r2, [r7, #32]
20001c6c:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempBird3Black;
20001c6e:	4b40      	ldr	r3, [pc, #256]	; (20001d70 <initSprites+0x1b8>)
20001c70:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer18, bird3_black_bits, bird3_black_width, bird3_black_height);
20001c72:	4940      	ldr	r1, [pc, #256]	; (20001d74 <initSprites+0x1bc>)
20001c74:	69f8      	ldr	r0, [r7, #28]
20001c76:	2319      	movs	r3, #25
20001c78:	2219      	movs	r2, #25
20001c7a:	f001 ff45 	bl	20003b08 <load_sprite>
	bird3Black = pointer18;	
20001c7e:	4b3e      	ldr	r3, [pc, #248]	; (20001d78 <initSprites+0x1c0>)
20001c80:	69fa      	ldr	r2, [r7, #28]
20001c82:	601a      	str	r2, [r3, #0]
	
	sprite *pointer19 = &tempBird4Light;
20001c84:	4b3d      	ldr	r3, [pc, #244]	; (20001d7c <initSprites+0x1c4>)
20001c86:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer19, bird4_light_bits, bird4_black_width, bird4_black_height);
20001c88:	493d      	ldr	r1, [pc, #244]	; (20001d80 <initSprites+0x1c8>)
20001c8a:	69b8      	ldr	r0, [r7, #24]
20001c8c:	2319      	movs	r3, #25
20001c8e:	2219      	movs	r2, #25
20001c90:	f001 ff3a 	bl	20003b08 <load_sprite>
	bird4Light = pointer19;
20001c94:	4b3b      	ldr	r3, [pc, #236]	; (20001d84 <initSprites+0x1cc>)
20001c96:	69ba      	ldr	r2, [r7, #24]
20001c98:	601a      	str	r2, [r3, #0]
	sprite *pointer20 = &tempBird4Gray;
20001c9a:	4b3b      	ldr	r3, [pc, #236]	; (20001d88 <initSprites+0x1d0>)
20001c9c:	617b      	str	r3, [r7, #20]
	load_sprite(pointer20, bird4_gray_bits, bird4_black_width, bird4_black_height);
20001c9e:	493b      	ldr	r1, [pc, #236]	; (20001d8c <initSprites+0x1d4>)
20001ca0:	6978      	ldr	r0, [r7, #20]
20001ca2:	2319      	movs	r3, #25
20001ca4:	2219      	movs	r2, #25
20001ca6:	f001 ff2f 	bl	20003b08 <load_sprite>
	bird4Gray = pointer20;
20001caa:	4b39      	ldr	r3, [pc, #228]	; (20001d90 <initSprites+0x1d8>)
20001cac:	697a      	ldr	r2, [r7, #20]
20001cae:	601a      	str	r2, [r3, #0]
	sprite *pointer21 = &tempBird4Black;
20001cb0:	4b38      	ldr	r3, [pc, #224]	; (20001d94 <initSprites+0x1dc>)
20001cb2:	613b      	str	r3, [r7, #16]
	load_sprite(pointer21, bird4_black_bits, bird4_black_width, bird4_black_height);
20001cb4:	4938      	ldr	r1, [pc, #224]	; (20001d98 <initSprites+0x1e0>)
20001cb6:	6938      	ldr	r0, [r7, #16]
20001cb8:	2319      	movs	r3, #25
20001cba:	2219      	movs	r2, #25
20001cbc:	f001 ff24 	bl	20003b08 <load_sprite>
	bird4Black = pointer21;	
20001cc0:	4b36      	ldr	r3, [pc, #216]	; (20001d9c <initSprites+0x1e4>)
20001cc2:	693a      	ldr	r2, [r7, #16]
20001cc4:	601a      	str	r2, [r3, #0]
	
	sprite *pointer22 = &tempBird5Light;
20001cc6:	4b36      	ldr	r3, [pc, #216]	; (20001da0 <initSprites+0x1e8>)
20001cc8:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer22, bird5_light_bits, bird5_black_width, bird5_black_height);
20001cca:	4936      	ldr	r1, [pc, #216]	; (20001da4 <initSprites+0x1ec>)
20001ccc:	68f8      	ldr	r0, [r7, #12]
20001cce:	2319      	movs	r3, #25
20001cd0:	2219      	movs	r2, #25
20001cd2:	f001 ff19 	bl	20003b08 <load_sprite>
	bird5Light = pointer22;
20001cd6:	4b34      	ldr	r3, [pc, #208]	; (20001da8 <initSprites+0x1f0>)
20001cd8:	68fa      	ldr	r2, [r7, #12]
20001cda:	601a      	str	r2, [r3, #0]
	sprite *pointer23 = &tempBird5Gray;
20001cdc:	4b33      	ldr	r3, [pc, #204]	; (20001dac <initSprites+0x1f4>)
20001cde:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer23, bird5_gray_bits, bird5_black_width, bird5_black_height);
20001ce0:	4933      	ldr	r1, [pc, #204]	; (20001db0 <initSprites+0x1f8>)
20001ce2:	68b8      	ldr	r0, [r7, #8]
20001ce4:	2319      	movs	r3, #25
20001ce6:	2219      	movs	r2, #25
20001ce8:	f001 ff0e 	bl	20003b08 <load_sprite>
	bird5Gray = pointer23;
20001cec:	4b31      	ldr	r3, [pc, #196]	; (20001db4 <initSprites+0x1fc>)
20001cee:	68ba      	ldr	r2, [r7, #8]
20001cf0:	601a      	str	r2, [r3, #0]
	sprite *pointer24 = &tempBird5Black;
20001cf2:	4b31      	ldr	r3, [pc, #196]	; (20001db8 <initSprites+0x200>)
20001cf4:	607b      	str	r3, [r7, #4]
	load_sprite(pointer24, bird5_black_bits, bird5_black_width, bird5_black_height);
20001cf6:	4931      	ldr	r1, [pc, #196]	; (20001dbc <initSprites+0x204>)
20001cf8:	6878      	ldr	r0, [r7, #4]
20001cfa:	2319      	movs	r3, #25
20001cfc:	2219      	movs	r2, #25
20001cfe:	f001 ff03 	bl	20003b08 <load_sprite>
	bird5Black = pointer24;
20001d02:	4b2f      	ldr	r3, [pc, #188]	; (20001dc0 <initSprites+0x208>)
20001d04:	687a      	ldr	r2, [r7, #4]
20001d06:	601a      	str	r2, [r3, #0]
}
20001d08:	46c0      	nop			; (mov r8, r8)
20001d0a:	46bd      	mov	sp, r7
20001d0c:	b010      	add	sp, #64	; 0x40
20001d0e:	bd80      	pop	{r7, pc}
20001d10:	20004acc 	andcs	r4, r0, ip, asr #21
20001d14:	20008770 	andcs	r8, r0, r0, ror r7
20001d18:	20004ad8 	ldrdcs	r4, [r0], -r8
20001d1c:	20004a68 	andcs	r4, r0, r8, ror #20
20001d20:	2000870c 	andcs	r8, r0, ip, lsl #14
20001d24:	200049e0 	andcs	r4, r0, r0, ror #19
20001d28:	20004a58 	andcs	r4, r0, r8, asr sl
20001d2c:	200086a8 	andcs	r8, r0, r8, lsr #13
20001d30:	20004a48 	andcs	r4, r0, r8, asr #20
20001d34:	20004adc 	ldrdcs	r4, [r0], -ip
20001d38:	2000889c 	mulcs	r0, ip, r8
20001d3c:	20004b7c 	andcs	r4, r0, ip, ror fp
20001d40:	20004a84 	andcs	r4, r0, r4, lsl #21
20001d44:	20008838 	andcs	r8, r0, r8, lsr r8
20001d48:	20004ac8 	andcs	r4, r0, r8, asr #21
20001d4c:	20004b64 	andcs	r4, r0, r4, ror #22
20001d50:	200087d4 	ldrdcs	r8, [r0], -r4
20001d54:	20004a44 	andcs	r4, r0, r4, asr #20
20001d58:	20004b00 	andcs	r4, r0, r0, lsl #22
20001d5c:	200089c8 	andcs	r8, r0, r8, asr #19
20001d60:	20004a90 	mulcs	r0, r0, sl
20001d64:	20004b0c 	andcs	r4, r0, ip, lsl #22
20001d68:	20008964 	andcs	r8, r0, r4, ror #18
20001d6c:	20004a64 	andcs	r4, r0, r4, ror #20
20001d70:	20004abc 			; <UNDEFINED> instruction: 0x20004abc
20001d74:	20008900 	andcs	r8, r0, r0, lsl #18
20001d78:	20004a3c 	andcs	r4, r0, ip, lsr sl
20001d7c:	20004af4 	strdcs	r4, [r0], -r4	; <UNPREDICTABLE>
20001d80:	20008af4 	strdcs	r8, [r0], -r4
20001d84:	200049dc 	ldrdcs	r4, [r0], -ip
20001d88:	20004b70 	andcs	r4, r0, r0, ror fp
20001d8c:	20008a90 	mulcs	r0, r0, sl
20001d90:	20004a40 	andcs	r4, r0, r0, asr #20
20001d94:	200049f4 	strdcs	r4, [r0], -r4	; <UNPREDICTABLE>
20001d98:	20008a2c 	andcs	r8, r0, ip, lsr #20
20001d9c:	20004b60 	andcs	r4, r0, r0, ror #22
20001da0:	20004a78 	andcs	r4, r0, r8, ror sl
20001da4:	20008c20 	andcs	r8, r0, r0, lsr #24
20001da8:	20004ab8 			; <UNDEFINED> instruction: 0x20004ab8
20001dac:	20004a94 	mulcs	r0, r4, sl
20001db0:	20008bbc 			; <UNDEFINED> instruction: 0x20008bbc
20001db4:	20004a74 	andcs	r4, r0, r4, ror sl
20001db8:	20004aa0 	andcs	r4, r0, r0, lsr #21
20001dbc:	20008b58 	andcs	r8, r0, r8, asr fp
20001dc0:	200049f0 	strdcs	r4, [r0], -r0

20001dc4 <init_bird>:
	
void init_bird( GameObject *birdObj ) {
20001dc4:	b590      	push	{r4, r7, lr}
20001dc6:	b083      	sub	sp, #12
20001dc8:	af00      	add	r7, sp, #0
20001dca:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20001dcc:	4b37      	ldr	r3, [pc, #220]	; (20001eac <init_bird+0xe8>)
20001dce:	681b      	ldr	r3, [r3, #0]
20001dd0:	2b00      	cmp	r3, #0
20001dd2:	d057      	beq.n	20001e84 <init_bird+0xc0>
		initSprites();
20001dd4:	f7ff fef0 	bl	20001bb8 <initSprites>
		firstTime = 0;			
20001dd8:	4b34      	ldr	r3, [pc, #208]	; (20001eac <init_bird+0xe8>)
20001dda:	2200      	movs	r2, #0
20001ddc:	601a      	str	r2, [r3, #0]

		birdImages[0] = bird1Image;
20001dde:	4b34      	ldr	r3, [pc, #208]	; (20001eb0 <init_bird+0xec>)
20001de0:	4a34      	ldr	r2, [pc, #208]	; (20001eb4 <init_bird+0xf0>)
20001de2:	ca13      	ldmia	r2!, {r0, r1, r4}
20001de4:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[1] = bird2Image;
20001de6:	4b32      	ldr	r3, [pc, #200]	; (20001eb0 <init_bird+0xec>)
20001de8:	4a33      	ldr	r2, [pc, #204]	; (20001eb8 <init_bird+0xf4>)
20001dea:	330c      	adds	r3, #12
20001dec:	ca13      	ldmia	r2!, {r0, r1, r4}
20001dee:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[2] = bird3Image;
20001df0:	4b2f      	ldr	r3, [pc, #188]	; (20001eb0 <init_bird+0xec>)
20001df2:	4a32      	ldr	r2, [pc, #200]	; (20001ebc <init_bird+0xf8>)
20001df4:	3318      	adds	r3, #24
20001df6:	ca13      	ldmia	r2!, {r0, r1, r4}
20001df8:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[3] = bird4Image;
20001dfa:	4b2d      	ldr	r3, [pc, #180]	; (20001eb0 <init_bird+0xec>)
20001dfc:	4a30      	ldr	r2, [pc, #192]	; (20001ec0 <init_bird+0xfc>)
20001dfe:	3324      	adds	r3, #36	; 0x24
20001e00:	ca13      	ldmia	r2!, {r0, r1, r4}
20001e02:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[4] = bird5Image;
20001e04:	4b2a      	ldr	r3, [pc, #168]	; (20001eb0 <init_bird+0xec>)
20001e06:	4a2f      	ldr	r2, [pc, #188]	; (20001ec4 <init_bird+0x100>)
20001e08:	3330      	adds	r3, #48	; 0x30
20001e0a:	ca13      	ldmia	r2!, {r0, r1, r4}
20001e0c:	c313      	stmia	r3!, {r0, r1, r4}
		birdImages[5] = bird6Image;
20001e0e:	4b28      	ldr	r3, [pc, #160]	; (20001eb0 <init_bird+0xec>)
20001e10:	4a2d      	ldr	r2, [pc, #180]	; (20001ec8 <init_bird+0x104>)
20001e12:	333c      	adds	r3, #60	; 0x3c
20001e14:	ca13      	ldmia	r2!, {r0, r1, r4}
20001e16:	c313      	stmia	r3!, {r0, r1, r4}
//		birdImages[6] = bird7Image;
		//birdImages[7] = bird8Image;
		
		load_image(&birdImages[0], bird1Black, bird1Gray, bird1Light);
20001e18:	4b2c      	ldr	r3, [pc, #176]	; (20001ecc <init_bird+0x108>)
20001e1a:	6819      	ldr	r1, [r3, #0]
20001e1c:	4b2c      	ldr	r3, [pc, #176]	; (20001ed0 <init_bird+0x10c>)
20001e1e:	681a      	ldr	r2, [r3, #0]
20001e20:	4b2c      	ldr	r3, [pc, #176]	; (20001ed4 <init_bird+0x110>)
20001e22:	681b      	ldr	r3, [r3, #0]
20001e24:	4822      	ldr	r0, [pc, #136]	; (20001eb0 <init_bird+0xec>)
20001e26:	f001 fe5b 	bl	20003ae0 <load_image>
		load_image(&birdImages[1], bird2Black, bird2Gray, bird2Light);
20001e2a:	4b2b      	ldr	r3, [pc, #172]	; (20001ed8 <init_bird+0x114>)
20001e2c:	6819      	ldr	r1, [r3, #0]
20001e2e:	4b2b      	ldr	r3, [pc, #172]	; (20001edc <init_bird+0x118>)
20001e30:	681a      	ldr	r2, [r3, #0]
20001e32:	4b2b      	ldr	r3, [pc, #172]	; (20001ee0 <init_bird+0x11c>)
20001e34:	681b      	ldr	r3, [r3, #0]
20001e36:	482b      	ldr	r0, [pc, #172]	; (20001ee4 <init_bird+0x120>)
20001e38:	f001 fe52 	bl	20003ae0 <load_image>
		load_image(&birdImages[2], bird3Black, bird3Gray, bird3Light);
20001e3c:	4b2a      	ldr	r3, [pc, #168]	; (20001ee8 <init_bird+0x124>)
20001e3e:	6819      	ldr	r1, [r3, #0]
20001e40:	4b2a      	ldr	r3, [pc, #168]	; (20001eec <init_bird+0x128>)
20001e42:	681a      	ldr	r2, [r3, #0]
20001e44:	4b2a      	ldr	r3, [pc, #168]	; (20001ef0 <init_bird+0x12c>)
20001e46:	681b      	ldr	r3, [r3, #0]
20001e48:	482a      	ldr	r0, [pc, #168]	; (20001ef4 <init_bird+0x130>)
20001e4a:	f001 fe49 	bl	20003ae0 <load_image>
		load_image(&birdImages[3], bird4Black, bird4Gray, bird4Light);
20001e4e:	4b2a      	ldr	r3, [pc, #168]	; (20001ef8 <init_bird+0x134>)
20001e50:	6819      	ldr	r1, [r3, #0]
20001e52:	4b2a      	ldr	r3, [pc, #168]	; (20001efc <init_bird+0x138>)
20001e54:	681a      	ldr	r2, [r3, #0]
20001e56:	4b2a      	ldr	r3, [pc, #168]	; (20001f00 <init_bird+0x13c>)
20001e58:	681b      	ldr	r3, [r3, #0]
20001e5a:	482a      	ldr	r0, [pc, #168]	; (20001f04 <init_bird+0x140>)
20001e5c:	f001 fe40 	bl	20003ae0 <load_image>
		load_image(&birdImages[4], bird5Black, bird5Gray, bird5Light);
20001e60:	4b29      	ldr	r3, [pc, #164]	; (20001f08 <init_bird+0x144>)
20001e62:	6819      	ldr	r1, [r3, #0]
20001e64:	4b29      	ldr	r3, [pc, #164]	; (20001f0c <init_bird+0x148>)
20001e66:	681a      	ldr	r2, [r3, #0]
20001e68:	4b29      	ldr	r3, [pc, #164]	; (20001f10 <init_bird+0x14c>)
20001e6a:	681b      	ldr	r3, [r3, #0]
20001e6c:	4829      	ldr	r0, [pc, #164]	; (20001f14 <init_bird+0x150>)
20001e6e:	f001 fe37 	bl	20003ae0 <load_image>
		
		//load_image(&birdImages[7], bird2Black, bird2Gray, bird2Light);
		load_image(&birdImages[5], bird3Black, bird3Gray, bird3Light);
20001e72:	4b1d      	ldr	r3, [pc, #116]	; (20001ee8 <init_bird+0x124>)
20001e74:	6819      	ldr	r1, [r3, #0]
20001e76:	4b1d      	ldr	r3, [pc, #116]	; (20001eec <init_bird+0x128>)
20001e78:	681a      	ldr	r2, [r3, #0]
20001e7a:	4b1d      	ldr	r3, [pc, #116]	; (20001ef0 <init_bird+0x12c>)
20001e7c:	681b      	ldr	r3, [r3, #0]
20001e7e:	4826      	ldr	r0, [pc, #152]	; (20001f18 <init_bird+0x154>)
20001e80:	f001 fe2e 	bl	20003ae0 <load_image>
		//load_image(&birdImages[5], bird4Black, bird4Gray, bird4Light);
	}
	
	birdObj->images = birdImages;
20001e84:	687b      	ldr	r3, [r7, #4]
20001e86:	4a0a      	ldr	r2, [pc, #40]	; (20001eb0 <init_bird+0xec>)
20001e88:	601a      	str	r2, [r3, #0]

	birdObj->current_frame = 0;
20001e8a:	687b      	ldr	r3, [r7, #4]
20001e8c:	2200      	movs	r2, #0
20001e8e:	615a      	str	r2, [r3, #20]
	birdObj->n_frames = 6;
20001e90:	687b      	ldr	r3, [r7, #4]
20001e92:	2206      	movs	r2, #6
20001e94:	619a      	str	r2, [r3, #24]
	birdObj->animation_speed = 1;
20001e96:	687b      	ldr	r3, [r7, #4]
20001e98:	2201      	movs	r2, #1
20001e9a:	61da      	str	r2, [r3, #28]
	birdObj->animation_counter = 0;
20001e9c:	687b      	ldr	r3, [r7, #4]
20001e9e:	2200      	movs	r2, #0
20001ea0:	621a      	str	r2, [r3, #32]
}
20001ea2:	46c0      	nop			; (mov r8, r8)
20001ea4:	46bd      	mov	sp, r7
20001ea6:	b003      	add	sp, #12
20001ea8:	bd90      	pop	{r4, r7, pc}
20001eaa:	46c0      	nop			; (mov r8, r8)
20001eac:	20008c84 	andcs	r8, r0, r4, lsl #25
20001eb0:	20004b18 	andcs	r4, r0, r8, lsl fp
20001eb4:	20004a30 	andcs	r4, r0, r0, lsr sl
20001eb8:	20004a00 	andcs	r4, r0, r0, lsl #20
20001ebc:	20004ae8 	andcs	r4, r0, r8, ror #21
20001ec0:	20004a4c 	andcs	r4, r0, ip, asr #20
20001ec4:	20004aac 	andcs	r4, r0, ip, lsr #21
20001ec8:	200049e4 	andcs	r4, r0, r4, ror #19
20001ecc:	20004a48 	andcs	r4, r0, r8, asr #20
20001ed0:	200049e0 	andcs	r4, r0, r0, ror #19
20001ed4:	20004ad8 	ldrdcs	r4, [r0], -r8
20001ed8:	20004a44 	andcs	r4, r0, r4, asr #20
20001edc:	20004ac8 	andcs	r4, r0, r8, asr #21
20001ee0:	20004b7c 	andcs	r4, r0, ip, ror fp
20001ee4:	20004b24 	andcs	r4, r0, r4, lsr #22
20001ee8:	20004a3c 	andcs	r4, r0, ip, lsr sl
20001eec:	20004a64 	andcs	r4, r0, r4, ror #20
20001ef0:	20004a90 	mulcs	r0, r0, sl
20001ef4:	20004b30 	andcs	r4, r0, r0, lsr fp
20001ef8:	20004b60 	andcs	r4, r0, r0, ror #22
20001efc:	20004a40 	andcs	r4, r0, r0, asr #20
20001f00:	200049dc 	ldrdcs	r4, [r0], -ip
20001f04:	20004b3c 	andcs	r4, r0, ip, lsr fp
20001f08:	200049f0 	strdcs	r4, [r0], -r0
20001f0c:	20004a74 	andcs	r4, r0, r4, ror sl
20001f10:	20004ab8 			; <UNDEFINED> instruction: 0x20004ab8
20001f14:	20004b48 	andcs	r4, r0, r8, asr #22
20001f18:	20004b54 	andcs	r4, r0, r4, asr fp

20001f1c <initSprites>:
Image witch1Image;
Image witch2Image;
Image witch3Image;
Image witch4Image;
Image witchImages[4];
static void initSprites( void ) {	
20001f1c:	b580      	push	{r7, lr}
20001f1e:	b08a      	sub	sp, #40	; 0x28
20001f20:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempWitchLight;
20001f22:	4b33      	ldr	r3, [pc, #204]	; (20001ff0 <initSprites+0xd4>)
20001f24:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer11, witch1_light_bits, witch1_black_width, witch1_black_height);
20001f26:	4933      	ldr	r1, [pc, #204]	; (20001ff4 <initSprites+0xd8>)
20001f28:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001f2a:	2312      	movs	r3, #18
20001f2c:	2212      	movs	r2, #18
20001f2e:	f001 fdeb 	bl	20003b08 <load_sprite>
	witch1Light = pointer11;
20001f32:	4b31      	ldr	r3, [pc, #196]	; (20001ff8 <initSprites+0xdc>)
20001f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20001f36:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempWitchGray;
20001f38:	4b30      	ldr	r3, [pc, #192]	; (20001ffc <initSprites+0xe0>)
20001f3a:	623b      	str	r3, [r7, #32]
	load_sprite(pointer12, witch1_gray_bits, witch1_black_width, witch1_black_height);
20001f3c:	4930      	ldr	r1, [pc, #192]	; (20002000 <initSprites+0xe4>)
20001f3e:	6a38      	ldr	r0, [r7, #32]
20001f40:	2312      	movs	r3, #18
20001f42:	2212      	movs	r2, #18
20001f44:	f001 fde0 	bl	20003b08 <load_sprite>
	witch1Gray = pointer12;
20001f48:	4b2e      	ldr	r3, [pc, #184]	; (20002004 <initSprites+0xe8>)
20001f4a:	6a3a      	ldr	r2, [r7, #32]
20001f4c:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempWitchBlack;
20001f4e:	4b2e      	ldr	r3, [pc, #184]	; (20002008 <initSprites+0xec>)
20001f50:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer13, witch1_black_bits, witch1_black_width, witch1_black_height);
20001f52:	492e      	ldr	r1, [pc, #184]	; (2000200c <initSprites+0xf0>)
20001f54:	69f8      	ldr	r0, [r7, #28]
20001f56:	2312      	movs	r3, #18
20001f58:	2212      	movs	r2, #18
20001f5a:	f001 fdd5 	bl	20003b08 <load_sprite>
	witch1Black = pointer13;	
20001f5e:	4b2c      	ldr	r3, [pc, #176]	; (20002010 <initSprites+0xf4>)
20001f60:	69fa      	ldr	r2, [r7, #28]
20001f62:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempWitch2Light;
20001f64:	4b2b      	ldr	r3, [pc, #172]	; (20002014 <initSprites+0xf8>)
20001f66:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer14, witch2_light_bits, witch2_black_width, witch2_black_height);
20001f68:	492b      	ldr	r1, [pc, #172]	; (20002018 <initSprites+0xfc>)
20001f6a:	69b8      	ldr	r0, [r7, #24]
20001f6c:	2312      	movs	r3, #18
20001f6e:	2212      	movs	r2, #18
20001f70:	f001 fdca 	bl	20003b08 <load_sprite>
	witch2Light = pointer14;
20001f74:	4b29      	ldr	r3, [pc, #164]	; (2000201c <initSprites+0x100>)
20001f76:	69ba      	ldr	r2, [r7, #24]
20001f78:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempWitch2Gray;
20001f7a:	4b29      	ldr	r3, [pc, #164]	; (20002020 <initSprites+0x104>)
20001f7c:	617b      	str	r3, [r7, #20]
	load_sprite(pointer15, witch2_gray_bits, witch2_black_width, witch2_black_height);
20001f7e:	4929      	ldr	r1, [pc, #164]	; (20002024 <initSprites+0x108>)
20001f80:	6978      	ldr	r0, [r7, #20]
20001f82:	2312      	movs	r3, #18
20001f84:	2212      	movs	r2, #18
20001f86:	f001 fdbf 	bl	20003b08 <load_sprite>
	witch2Gray = pointer15;
20001f8a:	4b27      	ldr	r3, [pc, #156]	; (20002028 <initSprites+0x10c>)
20001f8c:	697a      	ldr	r2, [r7, #20]
20001f8e:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempWitch2Black;
20001f90:	4b26      	ldr	r3, [pc, #152]	; (2000202c <initSprites+0x110>)
20001f92:	613b      	str	r3, [r7, #16]
	load_sprite(pointer16, witch2_black_bits, witch2_black_width, witch2_black_height);
20001f94:	4926      	ldr	r1, [pc, #152]	; (20002030 <initSprites+0x114>)
20001f96:	6938      	ldr	r0, [r7, #16]
20001f98:	2312      	movs	r3, #18
20001f9a:	2212      	movs	r2, #18
20001f9c:	f001 fdb4 	bl	20003b08 <load_sprite>
	witch2Black = pointer16;
20001fa0:	4b24      	ldr	r3, [pc, #144]	; (20002034 <initSprites+0x118>)
20001fa2:	693a      	ldr	r2, [r7, #16]
20001fa4:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempWitch3Light;
20001fa6:	4b24      	ldr	r3, [pc, #144]	; (20002038 <initSprites+0x11c>)
20001fa8:	60fb      	str	r3, [r7, #12]
	load_sprite(finalPointer, witch3_light_bits, witch3_black_width, witch3_black_height);
20001faa:	4924      	ldr	r1, [pc, #144]	; (2000203c <initSprites+0x120>)
20001fac:	68f8      	ldr	r0, [r7, #12]
20001fae:	2312      	movs	r3, #18
20001fb0:	2212      	movs	r2, #18
20001fb2:	f001 fda9 	bl	20003b08 <load_sprite>
	witch3Light = finalPointer;
20001fb6:	4b22      	ldr	r3, [pc, #136]	; (20002040 <initSprites+0x124>)
20001fb8:	68fa      	ldr	r2, [r7, #12]
20001fba:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempWitch3Gray;
20001fbc:	4b21      	ldr	r3, [pc, #132]	; (20002044 <initSprites+0x128>)
20001fbe:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer17, witch3_gray_bits, witch3_black_width, witch3_black_height);
20001fc0:	4921      	ldr	r1, [pc, #132]	; (20002048 <initSprites+0x12c>)
20001fc2:	68b8      	ldr	r0, [r7, #8]
20001fc4:	2312      	movs	r3, #18
20001fc6:	2212      	movs	r2, #18
20001fc8:	f001 fd9e 	bl	20003b08 <load_sprite>
	witch3Gray = pointer17;
20001fcc:	4b1f      	ldr	r3, [pc, #124]	; (2000204c <initSprites+0x130>)
20001fce:	68ba      	ldr	r2, [r7, #8]
20001fd0:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempWitch3Black;
20001fd2:	4b1f      	ldr	r3, [pc, #124]	; (20002050 <initSprites+0x134>)
20001fd4:	607b      	str	r3, [r7, #4]
	load_sprite(pointer18, witch3_black_bits, witch3_black_width, witch3_black_height);
20001fd6:	491f      	ldr	r1, [pc, #124]	; (20002054 <initSprites+0x138>)
20001fd8:	6878      	ldr	r0, [r7, #4]
20001fda:	2312      	movs	r3, #18
20001fdc:	2212      	movs	r2, #18
20001fde:	f001 fd93 	bl	20003b08 <load_sprite>
	witch3Black = pointer18;	
20001fe2:	4b1d      	ldr	r3, [pc, #116]	; (20002058 <initSprites+0x13c>)
20001fe4:	687a      	ldr	r2, [r7, #4]
20001fe6:	601a      	str	r2, [r3, #0]
	
}
20001fe8:	46c0      	nop			; (mov r8, r8)
20001fea:	46bd      	mov	sp, r7
20001fec:	b00a      	add	sp, #40	; 0x28
20001fee:	bd80      	pop	{r7, pc}
20001ff0:	20004c68 	andcs	r4, r0, r8, ror #24
20001ff4:	20008cf8 	strdcs	r8, [r0], -r8	; <UNPREDICTABLE>
20001ff8:	20004c80 	andcs	r4, r0, r0, lsl #25
20001ffc:	20004bf8 	strdcs	r4, [r0], -r8
20002000:	20008cc0 	andcs	r8, r0, r0, asr #25
20002004:	20004b80 	andcs	r4, r0, r0, lsl #23
20002008:	20004bd0 	ldrdcs	r4, [r0], -r0
2000200c:	20008c88 	andcs	r8, r0, r8, lsl #25
20002010:	20004c54 	andcs	r4, r0, r4, asr ip
20002014:	20004c74 	andcs	r4, r0, r4, ror ip
20002018:	20008da0 	andcs	r8, r0, r0, lsr #27
2000201c:	20004b84 	andcs	r4, r0, r4, lsl #23
20002020:	20004c10 	andcs	r4, r0, r0, lsl ip
20002024:	20008d68 	andcs	r8, r0, r8, ror #26
20002028:	20004bf4 	strdcs	r4, [r0], -r4	; <UNPREDICTABLE>
2000202c:	20004bc4 	andcs	r4, r0, r4, asr #23
20002030:	20008d30 	andcs	r8, r0, r0, lsr sp
20002034:	20004c90 	mulcs	r0, r0, ip
20002038:	20004bdc 	ldrdcs	r4, [r0], -ip
2000203c:	20008e48 	andcs	r8, r0, r8, asr #28
20002040:	20004c44 	andcs	r4, r0, r4, asr #24
20002044:	20004c48 	andcs	r4, r0, r8, asr #24
20002048:	20008e10 	andcs	r8, r0, r0, lsl lr
2000204c:	20004c58 	andcs	r4, r0, r8, asr ip
20002050:	20004c04 	andcs	r4, r0, r4, lsl #24
20002054:	20008dd8 	ldrdcs	r8, [r0], -r8	; <UNPREDICTABLE>
20002058:	20004c1c 	andcs	r4, r0, ip, lsl ip

2000205c <init_witch>:
	
void init_witch( GameObject *witchObj ) {
2000205c:	b590      	push	{r4, r7, lr}
2000205e:	b083      	sub	sp, #12
20002060:	af00      	add	r7, sp, #0
20002062:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20002064:	4b29      	ldr	r3, [pc, #164]	; (2000210c <init_witch+0xb0>)
20002066:	681b      	ldr	r3, [r3, #0]
20002068:	2b00      	cmp	r3, #0
2000206a:	d03b      	beq.n	200020e4 <init_witch+0x88>
		initSprites();
2000206c:	f7ff ff56 	bl	20001f1c <initSprites>
		firstTime = 0;			
20002070:	4b26      	ldr	r3, [pc, #152]	; (2000210c <init_witch+0xb0>)
20002072:	2200      	movs	r2, #0
20002074:	601a      	str	r2, [r3, #0]

		witchImages[0] = witch1Image;
20002076:	4b26      	ldr	r3, [pc, #152]	; (20002110 <init_witch+0xb4>)
20002078:	4a26      	ldr	r2, [pc, #152]	; (20002114 <init_witch+0xb8>)
2000207a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000207c:	c313      	stmia	r3!, {r0, r1, r4}
		witchImages[1] = witch2Image;
2000207e:	4b24      	ldr	r3, [pc, #144]	; (20002110 <init_witch+0xb4>)
20002080:	4a25      	ldr	r2, [pc, #148]	; (20002118 <init_witch+0xbc>)
20002082:	330c      	adds	r3, #12
20002084:	ca13      	ldmia	r2!, {r0, r1, r4}
20002086:	c313      	stmia	r3!, {r0, r1, r4}
		witchImages[2] = witch3Image;
20002088:	4b21      	ldr	r3, [pc, #132]	; (20002110 <init_witch+0xb4>)
2000208a:	4a24      	ldr	r2, [pc, #144]	; (2000211c <init_witch+0xc0>)
2000208c:	3318      	adds	r3, #24
2000208e:	ca13      	ldmia	r2!, {r0, r1, r4}
20002090:	c313      	stmia	r3!, {r0, r1, r4}
		witchImages[3] = witch4Image;
20002092:	4b1f      	ldr	r3, [pc, #124]	; (20002110 <init_witch+0xb4>)
20002094:	4a22      	ldr	r2, [pc, #136]	; (20002120 <init_witch+0xc4>)
20002096:	3324      	adds	r3, #36	; 0x24
20002098:	ca13      	ldmia	r2!, {r0, r1, r4}
2000209a:	c313      	stmia	r3!, {r0, r1, r4}
		
		
		load_image(&witchImages[0], witch1Black, witch1Gray, witch1Light);
2000209c:	4b21      	ldr	r3, [pc, #132]	; (20002124 <init_witch+0xc8>)
2000209e:	6819      	ldr	r1, [r3, #0]
200020a0:	4b21      	ldr	r3, [pc, #132]	; (20002128 <init_witch+0xcc>)
200020a2:	681a      	ldr	r2, [r3, #0]
200020a4:	4b21      	ldr	r3, [pc, #132]	; (2000212c <init_witch+0xd0>)
200020a6:	681b      	ldr	r3, [r3, #0]
200020a8:	4819      	ldr	r0, [pc, #100]	; (20002110 <init_witch+0xb4>)
200020aa:	f001 fd19 	bl	20003ae0 <load_image>
		load_image(&witchImages[1], witch2Black, witch2Gray, witch2Light);
200020ae:	4b20      	ldr	r3, [pc, #128]	; (20002130 <init_witch+0xd4>)
200020b0:	6819      	ldr	r1, [r3, #0]
200020b2:	4b20      	ldr	r3, [pc, #128]	; (20002134 <init_witch+0xd8>)
200020b4:	681a      	ldr	r2, [r3, #0]
200020b6:	4b20      	ldr	r3, [pc, #128]	; (20002138 <init_witch+0xdc>)
200020b8:	681b      	ldr	r3, [r3, #0]
200020ba:	4820      	ldr	r0, [pc, #128]	; (2000213c <init_witch+0xe0>)
200020bc:	f001 fd10 	bl	20003ae0 <load_image>
		load_image(&witchImages[2], witch3Black, witch3Gray, witch3Light);
200020c0:	4b1f      	ldr	r3, [pc, #124]	; (20002140 <init_witch+0xe4>)
200020c2:	6819      	ldr	r1, [r3, #0]
200020c4:	4b1f      	ldr	r3, [pc, #124]	; (20002144 <init_witch+0xe8>)
200020c6:	681a      	ldr	r2, [r3, #0]
200020c8:	4b1f      	ldr	r3, [pc, #124]	; (20002148 <init_witch+0xec>)
200020ca:	681b      	ldr	r3, [r3, #0]
200020cc:	481f      	ldr	r0, [pc, #124]	; (2000214c <init_witch+0xf0>)
200020ce:	f001 fd07 	bl	20003ae0 <load_image>
		load_image(&witchImages[3], witch2Black, witch2Gray, witch2Light);
200020d2:	4b17      	ldr	r3, [pc, #92]	; (20002130 <init_witch+0xd4>)
200020d4:	6819      	ldr	r1, [r3, #0]
200020d6:	4b17      	ldr	r3, [pc, #92]	; (20002134 <init_witch+0xd8>)
200020d8:	681a      	ldr	r2, [r3, #0]
200020da:	4b17      	ldr	r3, [pc, #92]	; (20002138 <init_witch+0xdc>)
200020dc:	681b      	ldr	r3, [r3, #0]
200020de:	481c      	ldr	r0, [pc, #112]	; (20002150 <init_witch+0xf4>)
200020e0:	f001 fcfe 	bl	20003ae0 <load_image>
		
	}
	
	witchObj->images = witchImages;
200020e4:	687b      	ldr	r3, [r7, #4]
200020e6:	4a0a      	ldr	r2, [pc, #40]	; (20002110 <init_witch+0xb4>)
200020e8:	601a      	str	r2, [r3, #0]

	witchObj->current_frame = 0;
200020ea:	687b      	ldr	r3, [r7, #4]
200020ec:	2200      	movs	r2, #0
200020ee:	615a      	str	r2, [r3, #20]
	witchObj->n_frames = 4;
200020f0:	687b      	ldr	r3, [r7, #4]
200020f2:	2204      	movs	r2, #4
200020f4:	619a      	str	r2, [r3, #24]
	witchObj->animation_speed = 1;
200020f6:	687b      	ldr	r3, [r7, #4]
200020f8:	2201      	movs	r2, #1
200020fa:	61da      	str	r2, [r3, #28]
	witchObj->animation_counter = 0;
200020fc:	687b      	ldr	r3, [r7, #4]
200020fe:	2200      	movs	r2, #0
20002100:	621a      	str	r2, [r3, #32]
}
20002102:	46c0      	nop			; (mov r8, r8)
20002104:	46bd      	mov	sp, r7
20002106:	b003      	add	sp, #12
20002108:	bd90      	pop	{r4, r7, pc}
2000210a:	46c0      	nop			; (mov r8, r8)
2000210c:	20008e80 	andcs	r8, r0, r0, lsl #29
20002110:	20004b88 	andcs	r4, r0, r8, lsl #23
20002114:	20004c5c 	andcs	r4, r0, ip, asr ip
20002118:	20004bb8 			; <UNDEFINED> instruction: 0x20004bb8
2000211c:	20004c84 	andcs	r4, r0, r4, lsl #25
20002120:	20004be8 	andcs	r4, r0, r8, ror #23
20002124:	20004c54 	andcs	r4, r0, r4, asr ip
20002128:	20004b80 	andcs	r4, r0, r0, lsl #23
2000212c:	20004c80 	andcs	r4, r0, r0, lsl #25
20002130:	20004c90 	mulcs	r0, r0, ip
20002134:	20004bf4 	strdcs	r4, [r0], -r4	; <UNPREDICTABLE>
20002138:	20004b84 	andcs	r4, r0, r4, lsl #23
2000213c:	20004b94 	mulcs	r0, r4, fp
20002140:	20004c1c 	andcs	r4, r0, ip, lsl ip
20002144:	20004c58 	andcs	r4, r0, r8, asr ip
20002148:	20004c44 	andcs	r4, r0, r4, asr #24
2000214c:	20004ba0 	andcs	r4, r0, r0, lsr #23
20002150:	20004bac 	andcs	r4, r0, ip, lsr #23

20002154 <initSprites>:
Image DIP1Image;
Image DIP2Image;
Image DIP3Image;
Image DIP4Image;
Image DIPImages[4];
static void initSprites( void ) {	
20002154:	b580      	push	{r7, lr}
20002156:	b08a      	sub	sp, #40	; 0x28
20002158:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempDIPLight;
2000215a:	4b33      	ldr	r3, [pc, #204]	; (20002228 <initSprites+0xd4>)
2000215c:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer11, witch1_light_bits, witch1_black_width, witch1_black_height);
2000215e:	4933      	ldr	r1, [pc, #204]	; (2000222c <initSprites+0xd8>)
20002160:	6a78      	ldr	r0, [r7, #36]	; 0x24
20002162:	2312      	movs	r3, #18
20002164:	2212      	movs	r2, #18
20002166:	f001 fccf 	bl	20003b08 <load_sprite>
	DIP1Light = pointer11;
2000216a:	4b31      	ldr	r3, [pc, #196]	; (20002230 <initSprites+0xdc>)
2000216c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000216e:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempDIPGray;
20002170:	4b30      	ldr	r3, [pc, #192]	; (20002234 <initSprites+0xe0>)
20002172:	623b      	str	r3, [r7, #32]
	load_sprite(pointer12, witch1_gray_bits, witch1_black_width, witch1_black_height);
20002174:	4930      	ldr	r1, [pc, #192]	; (20002238 <initSprites+0xe4>)
20002176:	6a38      	ldr	r0, [r7, #32]
20002178:	2312      	movs	r3, #18
2000217a:	2212      	movs	r2, #18
2000217c:	f001 fcc4 	bl	20003b08 <load_sprite>
	DIP1Gray = pointer12;
20002180:	4b2e      	ldr	r3, [pc, #184]	; (2000223c <initSprites+0xe8>)
20002182:	6a3a      	ldr	r2, [r7, #32]
20002184:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempDIPBlack;
20002186:	4b2e      	ldr	r3, [pc, #184]	; (20002240 <initSprites+0xec>)
20002188:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer13, witch1_black_bits, witch1_black_width, witch1_black_height);
2000218a:	492e      	ldr	r1, [pc, #184]	; (20002244 <initSprites+0xf0>)
2000218c:	69f8      	ldr	r0, [r7, #28]
2000218e:	2312      	movs	r3, #18
20002190:	2212      	movs	r2, #18
20002192:	f001 fcb9 	bl	20003b08 <load_sprite>
	DIP1Black = pointer13;	
20002196:	4b2c      	ldr	r3, [pc, #176]	; (20002248 <initSprites+0xf4>)
20002198:	69fa      	ldr	r2, [r7, #28]
2000219a:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempDIP2Light;
2000219c:	4b2b      	ldr	r3, [pc, #172]	; (2000224c <initSprites+0xf8>)
2000219e:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer14, witch2_light_bits, witch2_black_width, witch2_black_height);
200021a0:	492b      	ldr	r1, [pc, #172]	; (20002250 <initSprites+0xfc>)
200021a2:	69b8      	ldr	r0, [r7, #24]
200021a4:	2312      	movs	r3, #18
200021a6:	2212      	movs	r2, #18
200021a8:	f001 fcae 	bl	20003b08 <load_sprite>
	DIP2Light = pointer14;
200021ac:	4b29      	ldr	r3, [pc, #164]	; (20002254 <initSprites+0x100>)
200021ae:	69ba      	ldr	r2, [r7, #24]
200021b0:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempDIP2Gray;
200021b2:	4b29      	ldr	r3, [pc, #164]	; (20002258 <initSprites+0x104>)
200021b4:	617b      	str	r3, [r7, #20]
	load_sprite(pointer15, witch2_gray_bits, witch2_black_width, witch2_black_height);
200021b6:	4929      	ldr	r1, [pc, #164]	; (2000225c <initSprites+0x108>)
200021b8:	6978      	ldr	r0, [r7, #20]
200021ba:	2312      	movs	r3, #18
200021bc:	2212      	movs	r2, #18
200021be:	f001 fca3 	bl	20003b08 <load_sprite>
	DIP2Gray = pointer15;
200021c2:	4b27      	ldr	r3, [pc, #156]	; (20002260 <initSprites+0x10c>)
200021c4:	697a      	ldr	r2, [r7, #20]
200021c6:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempDIP2Black;
200021c8:	4b26      	ldr	r3, [pc, #152]	; (20002264 <initSprites+0x110>)
200021ca:	613b      	str	r3, [r7, #16]
	load_sprite(pointer16, witch2_black_bits, witch2_black_width, witch2_black_height);
200021cc:	4926      	ldr	r1, [pc, #152]	; (20002268 <initSprites+0x114>)
200021ce:	6938      	ldr	r0, [r7, #16]
200021d0:	2312      	movs	r3, #18
200021d2:	2212      	movs	r2, #18
200021d4:	f001 fc98 	bl	20003b08 <load_sprite>
	DIP2Black = pointer16;
200021d8:	4b24      	ldr	r3, [pc, #144]	; (2000226c <initSprites+0x118>)
200021da:	693a      	ldr	r2, [r7, #16]
200021dc:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempDIP3Light;
200021de:	4b24      	ldr	r3, [pc, #144]	; (20002270 <initSprites+0x11c>)
200021e0:	60fb      	str	r3, [r7, #12]
	load_sprite(finalPointer, witch3_light_bits, witch3_black_width, witch3_black_height);
200021e2:	4924      	ldr	r1, [pc, #144]	; (20002274 <initSprites+0x120>)
200021e4:	68f8      	ldr	r0, [r7, #12]
200021e6:	2312      	movs	r3, #18
200021e8:	2212      	movs	r2, #18
200021ea:	f001 fc8d 	bl	20003b08 <load_sprite>
	DIP3Light = finalPointer;
200021ee:	4b22      	ldr	r3, [pc, #136]	; (20002278 <initSprites+0x124>)
200021f0:	68fa      	ldr	r2, [r7, #12]
200021f2:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempDIP3Gray;
200021f4:	4b21      	ldr	r3, [pc, #132]	; (2000227c <initSprites+0x128>)
200021f6:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer17, witch3_gray_bits, witch3_black_width, witch3_black_height);
200021f8:	4921      	ldr	r1, [pc, #132]	; (20002280 <initSprites+0x12c>)
200021fa:	68b8      	ldr	r0, [r7, #8]
200021fc:	2312      	movs	r3, #18
200021fe:	2212      	movs	r2, #18
20002200:	f001 fc82 	bl	20003b08 <load_sprite>
	DIP3Gray = pointer17;
20002204:	4b1f      	ldr	r3, [pc, #124]	; (20002284 <initSprites+0x130>)
20002206:	68ba      	ldr	r2, [r7, #8]
20002208:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempDIP3Black;
2000220a:	4b1f      	ldr	r3, [pc, #124]	; (20002288 <initSprites+0x134>)
2000220c:	607b      	str	r3, [r7, #4]
	load_sprite(pointer18, witch3_black_bits, witch3_black_width, witch3_black_height);
2000220e:	491f      	ldr	r1, [pc, #124]	; (2000228c <initSprites+0x138>)
20002210:	6878      	ldr	r0, [r7, #4]
20002212:	2312      	movs	r3, #18
20002214:	2212      	movs	r2, #18
20002216:	f001 fc77 	bl	20003b08 <load_sprite>
	DIP3Black = pointer18;	
2000221a:	4b1d      	ldr	r3, [pc, #116]	; (20002290 <initSprites+0x13c>)
2000221c:	687a      	ldr	r2, [r7, #4]
2000221e:	601a      	str	r2, [r3, #0]
	
}
20002220:	46c0      	nop			; (mov r8, r8)
20002222:	46bd      	mov	sp, r7
20002224:	b00a      	add	sp, #40	; 0x28
20002226:	bd80      	pop	{r7, pc}
20002228:	20004cdc 	ldrdcs	r4, [r0], -ip
2000222c:	20008ef4 	strdcs	r8, [r0], -r4
20002230:	20004d48 	andcs	r4, r0, r8, asr #26
20002234:	20004d9c 	mulcs	r0, ip, sp
20002238:	20008ebc 			; <UNDEFINED> instruction: 0x20008ebc
2000223c:	20004d70 	andcs	r4, r0, r0, ror sp
20002240:	20004d64 	andcs	r4, r0, r4, ror #26
20002244:	20008e84 	andcs	r8, r0, r4, lsl #29
20002248:	20004cd8 	ldrdcs	r4, [r0], -r8
2000224c:	20004d90 	mulcs	r0, r0, sp
20002250:	20008f9c 	mulcs	r0, ip, pc	; <UNPREDICTABLE>
20002254:	20004d4c 	andcs	r4, r0, ip, asr #26
20002258:	20004cc8 	andcs	r4, r0, r8, asr #25
2000225c:	20008f64 	andcs	r8, r0, r4, ror #30
20002260:	20004cc4 	andcs	r4, r0, r4, asr #25
20002264:	20004d24 	andcs	r4, r0, r4, lsr #26
20002268:	20008f2c 	andcs	r8, r0, ip, lsr #30
2000226c:	20004d54 	andcs	r4, r0, r4, asr sp
20002270:	20004ce8 	andcs	r4, r0, r8, ror #25
20002274:	20009044 	andcs	r9, r0, r4, asr #32
20002278:	20004d50 	andcs	r4, r0, r0, asr sp
2000227c:	20004d58 	andcs	r4, r0, r8, asr sp
20002280:	2000900c 	andcs	r9, r0, ip
20002284:	20004d80 	andcs	r4, r0, r0, lsl #27
20002288:	20004d74 	andcs	r4, r0, r4, ror sp
2000228c:	20008fd4 	ldrdcs	r8, [r0], -r4
20002290:	20004cd4 	ldrdcs	r4, [r0], -r4	; <UNPREDICTABLE>

20002294 <init_DIP>:
	
void init_DIP( GameObject *DIPObj ) {
20002294:	b590      	push	{r4, r7, lr}
20002296:	b083      	sub	sp, #12
20002298:	af00      	add	r7, sp, #0
2000229a:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
2000229c:	4b29      	ldr	r3, [pc, #164]	; (20002344 <init_DIP+0xb0>)
2000229e:	681b      	ldr	r3, [r3, #0]
200022a0:	2b00      	cmp	r3, #0
200022a2:	d03b      	beq.n	2000231c <init_DIP+0x88>
		initSprites();
200022a4:	f7ff ff56 	bl	20002154 <initSprites>
		firstTime = 0;			
200022a8:	4b26      	ldr	r3, [pc, #152]	; (20002344 <init_DIP+0xb0>)
200022aa:	2200      	movs	r2, #0
200022ac:	601a      	str	r2, [r3, #0]

		DIPImages[0] = DIP1Image;
200022ae:	4b26      	ldr	r3, [pc, #152]	; (20002348 <init_DIP+0xb4>)
200022b0:	4a26      	ldr	r2, [pc, #152]	; (2000234c <init_DIP+0xb8>)
200022b2:	ca13      	ldmia	r2!, {r0, r1, r4}
200022b4:	c313      	stmia	r3!, {r0, r1, r4}
		DIPImages[1] = DIP2Image;
200022b6:	4b24      	ldr	r3, [pc, #144]	; (20002348 <init_DIP+0xb4>)
200022b8:	4a25      	ldr	r2, [pc, #148]	; (20002350 <init_DIP+0xbc>)
200022ba:	330c      	adds	r3, #12
200022bc:	ca13      	ldmia	r2!, {r0, r1, r4}
200022be:	c313      	stmia	r3!, {r0, r1, r4}
		DIPImages[2] = DIP3Image;
200022c0:	4b21      	ldr	r3, [pc, #132]	; (20002348 <init_DIP+0xb4>)
200022c2:	4a24      	ldr	r2, [pc, #144]	; (20002354 <init_DIP+0xc0>)
200022c4:	3318      	adds	r3, #24
200022c6:	ca13      	ldmia	r2!, {r0, r1, r4}
200022c8:	c313      	stmia	r3!, {r0, r1, r4}
		DIPImages[3] = DIP4Image;
200022ca:	4b1f      	ldr	r3, [pc, #124]	; (20002348 <init_DIP+0xb4>)
200022cc:	4a22      	ldr	r2, [pc, #136]	; (20002358 <init_DIP+0xc4>)
200022ce:	3324      	adds	r3, #36	; 0x24
200022d0:	ca13      	ldmia	r2!, {r0, r1, r4}
200022d2:	c313      	stmia	r3!, {r0, r1, r4}
		
		
		load_image(&DIPImages[0], DIP1Black, DIP1Light, DIP1Gray);
200022d4:	4b21      	ldr	r3, [pc, #132]	; (2000235c <init_DIP+0xc8>)
200022d6:	6819      	ldr	r1, [r3, #0]
200022d8:	4b21      	ldr	r3, [pc, #132]	; (20002360 <init_DIP+0xcc>)
200022da:	681a      	ldr	r2, [r3, #0]
200022dc:	4b21      	ldr	r3, [pc, #132]	; (20002364 <init_DIP+0xd0>)
200022de:	681b      	ldr	r3, [r3, #0]
200022e0:	4819      	ldr	r0, [pc, #100]	; (20002348 <init_DIP+0xb4>)
200022e2:	f001 fbfd 	bl	20003ae0 <load_image>
		load_image(&DIPImages[1], DIP2Black, DIP2Light, DIP2Gray);
200022e6:	4b20      	ldr	r3, [pc, #128]	; (20002368 <init_DIP+0xd4>)
200022e8:	6819      	ldr	r1, [r3, #0]
200022ea:	4b20      	ldr	r3, [pc, #128]	; (2000236c <init_DIP+0xd8>)
200022ec:	681a      	ldr	r2, [r3, #0]
200022ee:	4b20      	ldr	r3, [pc, #128]	; (20002370 <init_DIP+0xdc>)
200022f0:	681b      	ldr	r3, [r3, #0]
200022f2:	4820      	ldr	r0, [pc, #128]	; (20002374 <init_DIP+0xe0>)
200022f4:	f001 fbf4 	bl	20003ae0 <load_image>
		load_image(&DIPImages[2], DIP3Black, DIP3Light, DIP3Gray);
200022f8:	4b1f      	ldr	r3, [pc, #124]	; (20002378 <init_DIP+0xe4>)
200022fa:	6819      	ldr	r1, [r3, #0]
200022fc:	4b1f      	ldr	r3, [pc, #124]	; (2000237c <init_DIP+0xe8>)
200022fe:	681a      	ldr	r2, [r3, #0]
20002300:	4b1f      	ldr	r3, [pc, #124]	; (20002380 <init_DIP+0xec>)
20002302:	681b      	ldr	r3, [r3, #0]
20002304:	481f      	ldr	r0, [pc, #124]	; (20002384 <init_DIP+0xf0>)
20002306:	f001 fbeb 	bl	20003ae0 <load_image>
		load_image(&DIPImages[3], DIP2Black, DIP2Light, DIP2Gray);
2000230a:	4b17      	ldr	r3, [pc, #92]	; (20002368 <init_DIP+0xd4>)
2000230c:	6819      	ldr	r1, [r3, #0]
2000230e:	4b17      	ldr	r3, [pc, #92]	; (2000236c <init_DIP+0xd8>)
20002310:	681a      	ldr	r2, [r3, #0]
20002312:	4b17      	ldr	r3, [pc, #92]	; (20002370 <init_DIP+0xdc>)
20002314:	681b      	ldr	r3, [r3, #0]
20002316:	481c      	ldr	r0, [pc, #112]	; (20002388 <init_DIP+0xf4>)
20002318:	f001 fbe2 	bl	20003ae0 <load_image>
		
	}
	
	DIPObj->images = DIPImages;
2000231c:	687b      	ldr	r3, [r7, #4]
2000231e:	4a0a      	ldr	r2, [pc, #40]	; (20002348 <init_DIP+0xb4>)
20002320:	601a      	str	r2, [r3, #0]

	DIPObj->current_frame = 0;
20002322:	687b      	ldr	r3, [r7, #4]
20002324:	2200      	movs	r2, #0
20002326:	615a      	str	r2, [r3, #20]
	DIPObj->n_frames = 4;
20002328:	687b      	ldr	r3, [r7, #4]
2000232a:	2204      	movs	r2, #4
2000232c:	619a      	str	r2, [r3, #24]
	DIPObj->animation_speed = 1;
2000232e:	687b      	ldr	r3, [r7, #4]
20002330:	2201      	movs	r2, #1
20002332:	61da      	str	r2, [r3, #28]
	DIPObj->animation_counter = 0;
20002334:	687b      	ldr	r3, [r7, #4]
20002336:	2200      	movs	r2, #0
20002338:	621a      	str	r2, [r3, #32]
}
2000233a:	46c0      	nop			; (mov r8, r8)
2000233c:	46bd      	mov	sp, r7
2000233e:	b003      	add	sp, #12
20002340:	bd90      	pop	{r4, r7, pc}
20002342:	46c0      	nop			; (mov r8, r8)
20002344:	2000907c 	andcs	r9, r0, ip, ror r0
20002348:	20004cf4 	strdcs	r4, [r0], -r4	; <UNPREDICTABLE>
2000234c:	20004d3c 	andcs	r4, r0, ip, lsr sp
20002350:	20004cb8 			; <UNDEFINED> instruction: 0x20004cb8
20002354:	20004d30 	andcs	r4, r0, r0, lsr sp
20002358:	20004d84 	andcs	r4, r0, r4, lsl #27
2000235c:	20004cd8 	ldrdcs	r4, [r0], -r8
20002360:	20004d48 	andcs	r4, r0, r8, asr #26
20002364:	20004d70 	andcs	r4, r0, r0, ror sp
20002368:	20004d54 	andcs	r4, r0, r4, asr sp
2000236c:	20004d4c 	andcs	r4, r0, ip, asr #26
20002370:	20004cc4 	andcs	r4, r0, r4, asr #25
20002374:	20004d00 	andcs	r4, r0, r0, lsl #26
20002378:	20004cd4 	ldrdcs	r4, [r0], -r4	; <UNPREDICTABLE>
2000237c:	20004d50 	andcs	r4, r0, r0, asr sp
20002380:	20004d80 	andcs	r4, r0, r0, lsl #27
20002384:	20004d0c 	andcs	r4, r0, ip, lsl #26
20002388:	20004d18 	andcs	r4, r0, r8, lsl sp

2000238c <setPlayerPosition>:

static int playerPositionX = 0;
static int playerPositionY = 0;

void setPlayerPosition(int x, int y){
2000238c:	b580      	push	{r7, lr}
2000238e:	b082      	sub	sp, #8
20002390:	af00      	add	r7, sp, #0
20002392:	6078      	str	r0, [r7, #4]
20002394:	6039      	str	r1, [r7, #0]
	playerPositionX = x;
20002396:	4b05      	ldr	r3, [pc, #20]	; (200023ac <setPlayerPosition+0x20>)
20002398:	687a      	ldr	r2, [r7, #4]
2000239a:	601a      	str	r2, [r3, #0]
	playerPositionY = y;
2000239c:	4b04      	ldr	r3, [pc, #16]	; (200023b0 <setPlayerPosition+0x24>)
2000239e:	683a      	ldr	r2, [r7, #0]
200023a0:	601a      	str	r2, [r3, #0]
}
200023a2:	46c0      	nop			; (mov r8, r8)
200023a4:	46bd      	mov	sp, r7
200023a6:	b002      	add	sp, #8
200023a8:	bd80      	pop	{r7, pc}
200023aa:	46c0      	nop			; (mov r8, r8)
200023ac:	2000461c 	andcs	r4, r0, ip, lsl r6
200023b0:	20004620 	andcs	r4, r0, r0, lsr #12

200023b4 <DIPUpdate>:


void DIPUpdate(GameObject *this) {
200023b4:	b580      	push	{r7, lr}
200023b6:	b082      	sub	sp, #8
200023b8:	af00      	add	r7, sp, #0
200023ba:	6078      	str	r0, [r7, #4]
	gameObjectUpdate(this);
200023bc:	687b      	ldr	r3, [r7, #4]
200023be:	0018      	movs	r0, r3
200023c0:	f7ff f980 	bl	200016c4 <gameObjectUpdate>
	static int counter = 0;
	static int direction = -1;
	static int isRunning = 0;
	counter++;
200023c4:	4b39      	ldr	r3, [pc, #228]	; (200024ac <DIPUpdate+0xf8>)
200023c6:	681b      	ldr	r3, [r3, #0]
200023c8:	1c5a      	adds	r2, r3, #1
200023ca:	4b38      	ldr	r3, [pc, #224]	; (200024ac <DIPUpdate+0xf8>)
200023cc:	601a      	str	r2, [r3, #0]
	
	if (!read_DIL_single(LIGHT_TRIGGER)){ // Only move if the light is off
200023ce:	2006      	movs	r0, #6
200023d0:	f001 fbca 	bl	20003b68 <read_DIL_single>
200023d4:	1e03      	subs	r3, r0, #0
200023d6:	d165      	bne.n	200024a4 <DIPUpdate+0xf0>
		
		if (this->yPos >= playerPositionY){
200023d8:	687b      	ldr	r3, [r7, #4]
200023da:	689a      	ldr	r2, [r3, #8]
200023dc:	4b34      	ldr	r3, [pc, #208]	; (200024b0 <DIPUpdate+0xfc>)
200023de:	681b      	ldr	r3, [r3, #0]
200023e0:	429a      	cmp	r2, r3
200023e2:	db03      	blt.n	200023ec <DIPUpdate+0x38>
			isRunning = 1;
200023e4:	4b33      	ldr	r3, [pc, #204]	; (200024b4 <DIPUpdate+0x100>)
200023e6:	2201      	movs	r2, #1
200023e8:	601a      	str	r2, [r3, #0]
200023ea:	e023      	b.n	20002434 <DIPUpdate+0x80>
		}
		else if ((playerPositionX + DIP_WIDTH >= this->xPos && playerPositionX <= this->xPos + DIP_WIDTH )) { // Move faster if player is below or on the same level
200023ec:	4b32      	ldr	r3, [pc, #200]	; (200024b8 <DIPUpdate+0x104>)
200023ee:	681b      	ldr	r3, [r3, #0]
200023f0:	3312      	adds	r3, #18
200023f2:	001a      	movs	r2, r3
200023f4:	687b      	ldr	r3, [r7, #4]
200023f6:	685b      	ldr	r3, [r3, #4]
200023f8:	429a      	cmp	r2, r3
200023fa:	db1b      	blt.n	20002434 <DIPUpdate+0x80>
200023fc:	687b      	ldr	r3, [r7, #4]
200023fe:	685b      	ldr	r3, [r3, #4]
20002400:	3312      	adds	r3, #18
20002402:	001a      	movs	r2, r3
20002404:	4b2c      	ldr	r3, [pc, #176]	; (200024b8 <DIPUpdate+0x104>)
20002406:	681b      	ldr	r3, [r3, #0]
20002408:	429a      	cmp	r2, r3
2000240a:	db13      	blt.n	20002434 <DIPUpdate+0x80>
			isRunning = 1;
2000240c:	4b29      	ldr	r3, [pc, #164]	; (200024b4 <DIPUpdate+0x100>)
2000240e:	2201      	movs	r2, #1
20002410:	601a      	str	r2, [r3, #0]
			if (RIGHT_POINT - playerPositionX > playerPositionX - LEFT_POINT){
20002412:	4b29      	ldr	r3, [pc, #164]	; (200024b8 <DIPUpdate+0x104>)
20002414:	681b      	ldr	r3, [r3, #0]
20002416:	226b      	movs	r2, #107	; 0x6b
20002418:	1ad2      	subs	r2, r2, r3
2000241a:	4b27      	ldr	r3, [pc, #156]	; (200024b8 <DIPUpdate+0x104>)
2000241c:	681b      	ldr	r3, [r3, #0]
2000241e:	3b2e      	subs	r3, #46	; 0x2e
20002420:	429a      	cmp	r2, r3
20002422:	dd03      	ble.n	2000242c <DIPUpdate+0x78>
				direction = 1;
20002424:	4b25      	ldr	r3, [pc, #148]	; (200024bc <DIPUpdate+0x108>)
20002426:	2201      	movs	r2, #1
20002428:	601a      	str	r2, [r3, #0]
2000242a:	e003      	b.n	20002434 <DIPUpdate+0x80>
			}
			else{
				direction = -1;
2000242c:	4b23      	ldr	r3, [pc, #140]	; (200024bc <DIPUpdate+0x108>)
2000242e:	2201      	movs	r2, #1
20002430:	4252      	negs	r2, r2
20002432:	601a      	str	r2, [r3, #0]
			}
		} 
		
		
		
		if (isRunning){
20002434:	4b1f      	ldr	r3, [pc, #124]	; (200024b4 <DIPUpdate+0x100>)
20002436:	681b      	ldr	r3, [r3, #0]
20002438:	2b00      	cmp	r3, #0
2000243a:	d00a      	beq.n	20002452 <DIPUpdate+0x9e>
			this->xPos += direction*3;
2000243c:	687b      	ldr	r3, [r7, #4]
2000243e:	6859      	ldr	r1, [r3, #4]
20002440:	4b1e      	ldr	r3, [pc, #120]	; (200024bc <DIPUpdate+0x108>)
20002442:	681a      	ldr	r2, [r3, #0]
20002444:	0013      	movs	r3, r2
20002446:	005b      	lsls	r3, r3, #1
20002448:	189b      	adds	r3, r3, r2
2000244a:	18ca      	adds	r2, r1, r3
2000244c:	687b      	ldr	r3, [r7, #4]
2000244e:	605a      	str	r2, [r3, #4]
20002450:	e012      	b.n	20002478 <DIPUpdate+0xc4>
		} else {
			this->xPos += (counter % 2)*direction;
20002452:	687b      	ldr	r3, [r7, #4]
20002454:	685a      	ldr	r2, [r3, #4]
20002456:	4b15      	ldr	r3, [pc, #84]	; (200024ac <DIPUpdate+0xf8>)
20002458:	681b      	ldr	r3, [r3, #0]
2000245a:	4919      	ldr	r1, [pc, #100]	; (200024c0 <DIPUpdate+0x10c>)
2000245c:	400b      	ands	r3, r1
2000245e:	d504      	bpl.n	2000246a <DIPUpdate+0xb6>
20002460:	3b01      	subs	r3, #1
20002462:	2102      	movs	r1, #2
20002464:	4249      	negs	r1, r1
20002466:	430b      	orrs	r3, r1
20002468:	3301      	adds	r3, #1
2000246a:	0019      	movs	r1, r3
2000246c:	4b13      	ldr	r3, [pc, #76]	; (200024bc <DIPUpdate+0x108>)
2000246e:	681b      	ldr	r3, [r3, #0]
20002470:	434b      	muls	r3, r1
20002472:	18d2      	adds	r2, r2, r3
20002474:	687b      	ldr	r3, [r7, #4]
20002476:	605a      	str	r2, [r3, #4]
		}
		
		if(this->xPos > RIGHT_POINT) {
20002478:	687b      	ldr	r3, [r7, #4]
2000247a:	685b      	ldr	r3, [r3, #4]
2000247c:	2b6b      	cmp	r3, #107	; 0x6b
2000247e:	dd07      	ble.n	20002490 <DIPUpdate+0xdc>
			isRunning = 0;
20002480:	4b0c      	ldr	r3, [pc, #48]	; (200024b4 <DIPUpdate+0x100>)
20002482:	2200      	movs	r2, #0
20002484:	601a      	str	r2, [r3, #0]
			direction = -1;
20002486:	4b0d      	ldr	r3, [pc, #52]	; (200024bc <DIPUpdate+0x108>)
20002488:	2201      	movs	r2, #1
2000248a:	4252      	negs	r2, r2
2000248c:	601a      	str	r2, [r3, #0]
		} else if(this->xPos < LEFT_POINT) {
			isRunning = 0;
			direction = 1;
		}
	}
}
2000248e:	e009      	b.n	200024a4 <DIPUpdate+0xf0>
		} else if(this->xPos < LEFT_POINT) {
20002490:	687b      	ldr	r3, [r7, #4]
20002492:	685b      	ldr	r3, [r3, #4]
20002494:	2b2d      	cmp	r3, #45	; 0x2d
20002496:	dc05      	bgt.n	200024a4 <DIPUpdate+0xf0>
			isRunning = 0;
20002498:	4b06      	ldr	r3, [pc, #24]	; (200024b4 <DIPUpdate+0x100>)
2000249a:	2200      	movs	r2, #0
2000249c:	601a      	str	r2, [r3, #0]
			direction = 1;
2000249e:	4b07      	ldr	r3, [pc, #28]	; (200024bc <DIPUpdate+0x108>)
200024a0:	2201      	movs	r2, #1
200024a2:	601a      	str	r2, [r3, #0]
}
200024a4:	46c0      	nop			; (mov r8, r8)
200024a6:	46bd      	mov	sp, r7
200024a8:	b002      	add	sp, #8
200024aa:	bd80      	pop	{r7, pc}
200024ac:	20004624 	andcs	r4, r0, r4, lsr #12
200024b0:	20004620 	andcs	r4, r0, r0, lsr #12
200024b4:	20004628 	andcs	r4, r0, r8, lsr #12
200024b8:	2000461c 	andcs	r4, r0, ip, lsl r6
200024bc:	20009080 	andcs	r9, r0, r0, lsl #1
200024c0:	80000001 	andhi	r0, r0, r1

200024c4 <initSprites>:
Image flame1Image;
Image flame2Image;
Image flame3Image;
Image flame4Image;
Image flameImages[4];
static void initSprites( void ) {	
200024c4:	b580      	push	{r7, lr}
200024c6:	b08c      	sub	sp, #48	; 0x30
200024c8:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempFlameLight;
200024ca:	4b44      	ldr	r3, [pc, #272]	; (200025dc <initSprites+0x118>)
200024cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(pointer11, flame1_light_bits, flame1_black_width, flame1_black_height);
200024ce:	4944      	ldr	r1, [pc, #272]	; (200025e0 <initSprites+0x11c>)
200024d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
200024d2:	2327      	movs	r3, #39	; 0x27
200024d4:	2211      	movs	r2, #17
200024d6:	f001 fb17 	bl	20003b08 <load_sprite>
	flame1Light = pointer11;
200024da:	4b42      	ldr	r3, [pc, #264]	; (200025e4 <initSprites+0x120>)
200024dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
200024de:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempFlameGray;
200024e0:	4b41      	ldr	r3, [pc, #260]	; (200025e8 <initSprites+0x124>)
200024e2:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer12, flame1_gray_bits, flame1_black_width, flame1_black_height);
200024e4:	4941      	ldr	r1, [pc, #260]	; (200025ec <initSprites+0x128>)
200024e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
200024e8:	2327      	movs	r3, #39	; 0x27
200024ea:	2211      	movs	r2, #17
200024ec:	f001 fb0c 	bl	20003b08 <load_sprite>
	flame1Gray = pointer12;
200024f0:	4b3f      	ldr	r3, [pc, #252]	; (200025f0 <initSprites+0x12c>)
200024f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
200024f4:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempFlameBlack;
200024f6:	4b3f      	ldr	r3, [pc, #252]	; (200025f4 <initSprites+0x130>)
200024f8:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer13, flame1_black_bits, flame1_black_width, flame1_black_height);
200024fa:	493f      	ldr	r1, [pc, #252]	; (200025f8 <initSprites+0x134>)
200024fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
200024fe:	2327      	movs	r3, #39	; 0x27
20002500:	2211      	movs	r2, #17
20002502:	f001 fb01 	bl	20003b08 <load_sprite>
	flame1Black = pointer13;	
20002506:	4b3d      	ldr	r3, [pc, #244]	; (200025fc <initSprites+0x138>)
20002508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000250a:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempFlame2Light;
2000250c:	4b3c      	ldr	r3, [pc, #240]	; (20002600 <initSprites+0x13c>)
2000250e:	623b      	str	r3, [r7, #32]
	load_sprite(pointer14, flame2_light_bits, flame2_black_width, flame2_black_height);
20002510:	493c      	ldr	r1, [pc, #240]	; (20002604 <initSprites+0x140>)
20002512:	6a38      	ldr	r0, [r7, #32]
20002514:	2327      	movs	r3, #39	; 0x27
20002516:	2211      	movs	r2, #17
20002518:	f001 faf6 	bl	20003b08 <load_sprite>
	flame2Light = pointer14;
2000251c:	4b3a      	ldr	r3, [pc, #232]	; (20002608 <initSprites+0x144>)
2000251e:	6a3a      	ldr	r2, [r7, #32]
20002520:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempFlame2Gray;
20002522:	4b3a      	ldr	r3, [pc, #232]	; (2000260c <initSprites+0x148>)
20002524:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer15, flame2_gray_bits, flame2_black_width, flame2_black_height);
20002526:	493a      	ldr	r1, [pc, #232]	; (20002610 <initSprites+0x14c>)
20002528:	69f8      	ldr	r0, [r7, #28]
2000252a:	2327      	movs	r3, #39	; 0x27
2000252c:	2211      	movs	r2, #17
2000252e:	f001 faeb 	bl	20003b08 <load_sprite>
	flame2Gray = pointer15;
20002532:	4b38      	ldr	r3, [pc, #224]	; (20002614 <initSprites+0x150>)
20002534:	69fa      	ldr	r2, [r7, #28]
20002536:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempFlame2Black;
20002538:	4b37      	ldr	r3, [pc, #220]	; (20002618 <initSprites+0x154>)
2000253a:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer16, flame2_black_bits, flame2_black_width, flame2_black_height);
2000253c:	4937      	ldr	r1, [pc, #220]	; (2000261c <initSprites+0x158>)
2000253e:	69b8      	ldr	r0, [r7, #24]
20002540:	2327      	movs	r3, #39	; 0x27
20002542:	2211      	movs	r2, #17
20002544:	f001 fae0 	bl	20003b08 <load_sprite>
	flame2Black = pointer16;
20002548:	4b35      	ldr	r3, [pc, #212]	; (20002620 <initSprites+0x15c>)
2000254a:	69ba      	ldr	r2, [r7, #24]
2000254c:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempFlame3Light;
2000254e:	4b35      	ldr	r3, [pc, #212]	; (20002624 <initSprites+0x160>)
20002550:	617b      	str	r3, [r7, #20]
	load_sprite(finalPointer, flame3_light_bits, flame3_black_width, flame3_black_height);
20002552:	4935      	ldr	r1, [pc, #212]	; (20002628 <initSprites+0x164>)
20002554:	6978      	ldr	r0, [r7, #20]
20002556:	2327      	movs	r3, #39	; 0x27
20002558:	2211      	movs	r2, #17
2000255a:	f001 fad5 	bl	20003b08 <load_sprite>
	flame3Light = finalPointer;
2000255e:	4b33      	ldr	r3, [pc, #204]	; (2000262c <initSprites+0x168>)
20002560:	697a      	ldr	r2, [r7, #20]
20002562:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempFlame3Gray;
20002564:	4b32      	ldr	r3, [pc, #200]	; (20002630 <initSprites+0x16c>)
20002566:	613b      	str	r3, [r7, #16]
	load_sprite(pointer17, flame3_gray_bits, flame3_black_width, flame3_black_height);
20002568:	4932      	ldr	r1, [pc, #200]	; (20002634 <initSprites+0x170>)
2000256a:	6938      	ldr	r0, [r7, #16]
2000256c:	2327      	movs	r3, #39	; 0x27
2000256e:	2211      	movs	r2, #17
20002570:	f001 faca 	bl	20003b08 <load_sprite>
	flame3Gray = pointer17;
20002574:	4b30      	ldr	r3, [pc, #192]	; (20002638 <initSprites+0x174>)
20002576:	693a      	ldr	r2, [r7, #16]
20002578:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempFlame3Black;
2000257a:	4b30      	ldr	r3, [pc, #192]	; (2000263c <initSprites+0x178>)
2000257c:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer18, flame3_black_bits, flame3_black_width, flame3_black_height);
2000257e:	4930      	ldr	r1, [pc, #192]	; (20002640 <initSprites+0x17c>)
20002580:	68f8      	ldr	r0, [r7, #12]
20002582:	2327      	movs	r3, #39	; 0x27
20002584:	2211      	movs	r2, #17
20002586:	f001 fabf 	bl	20003b08 <load_sprite>
	flame3Black = pointer18;	
2000258a:	4b2e      	ldr	r3, [pc, #184]	; (20002644 <initSprites+0x180>)
2000258c:	68fa      	ldr	r2, [r7, #12]
2000258e:	601a      	str	r2, [r3, #0]
	
	sprite *pointer19 = &tempFlame4Light;
20002590:	4b2d      	ldr	r3, [pc, #180]	; (20002648 <initSprites+0x184>)
20002592:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer19, flame4_light_bits, flame4_black_width, flame4_black_height);
20002594:	492d      	ldr	r1, [pc, #180]	; (2000264c <initSprites+0x188>)
20002596:	68b8      	ldr	r0, [r7, #8]
20002598:	2327      	movs	r3, #39	; 0x27
2000259a:	2211      	movs	r2, #17
2000259c:	f001 fab4 	bl	20003b08 <load_sprite>
	flame4Light = pointer19;
200025a0:	4b2b      	ldr	r3, [pc, #172]	; (20002650 <initSprites+0x18c>)
200025a2:	68ba      	ldr	r2, [r7, #8]
200025a4:	601a      	str	r2, [r3, #0]
	sprite *pointer20 = &tempFlame4Gray;
200025a6:	4b2b      	ldr	r3, [pc, #172]	; (20002654 <initSprites+0x190>)
200025a8:	607b      	str	r3, [r7, #4]
	load_sprite(pointer20, flame4_gray_bits, flame4_black_width, flame4_black_height);
200025aa:	492b      	ldr	r1, [pc, #172]	; (20002658 <initSprites+0x194>)
200025ac:	6878      	ldr	r0, [r7, #4]
200025ae:	2327      	movs	r3, #39	; 0x27
200025b0:	2211      	movs	r2, #17
200025b2:	f001 faa9 	bl	20003b08 <load_sprite>
	flame4Gray = pointer20;
200025b6:	4b29      	ldr	r3, [pc, #164]	; (2000265c <initSprites+0x198>)
200025b8:	687a      	ldr	r2, [r7, #4]
200025ba:	601a      	str	r2, [r3, #0]
	sprite *pointer21 = &tempFlame4Black;
200025bc:	4b28      	ldr	r3, [pc, #160]	; (20002660 <initSprites+0x19c>)
200025be:	603b      	str	r3, [r7, #0]
	load_sprite(pointer21, flame4_black_bits, flame4_black_width, flame4_black_height);
200025c0:	4928      	ldr	r1, [pc, #160]	; (20002664 <initSprites+0x1a0>)
200025c2:	6838      	ldr	r0, [r7, #0]
200025c4:	2327      	movs	r3, #39	; 0x27
200025c6:	2211      	movs	r2, #17
200025c8:	f001 fa9e 	bl	20003b08 <load_sprite>
	flame4Black = pointer21;	
200025cc:	4b26      	ldr	r3, [pc, #152]	; (20002668 <initSprites+0x1a4>)
200025ce:	683a      	ldr	r2, [r7, #0]
200025d0:	601a      	str	r2, [r3, #0]
	
}
200025d2:	46c0      	nop			; (mov r8, r8)
200025d4:	46bd      	mov	sp, r7
200025d6:	b00c      	add	sp, #48	; 0x30
200025d8:	bd80      	pop	{r7, pc}
200025da:	46c0      	nop			; (mov r8, r8)
200025dc:	20004ec4 	andcs	r4, r0, r4, asr #29
200025e0:	20009174 	andcs	r9, r0, r4, ror r1
200025e4:	20004e3c 	andcs	r4, r0, ip, lsr lr
200025e8:	20004da8 	andcs	r4, r0, r8, lsr #27
200025ec:	200090fc 	strdcs	r9, [r0], -ip
200025f0:	20004e38 	andcs	r4, r0, r8, lsr lr
200025f4:	20004ed8 	ldrdcs	r4, [r0], -r8
200025f8:	20009084 	andcs	r9, r0, r4, lsl #1
200025fc:	20004ec0 	andcs	r4, r0, r0, asr #29
20002600:	20004e10 	andcs	r4, r0, r0, lsl lr
20002604:	200092dc 	ldrdcs	r9, [r0], -ip
20002608:	20004ed0 	ldrdcs	r4, [r0], -r0
2000260c:	20004e74 	andcs	r4, r0, r4, ror lr
20002610:	20009264 	andcs	r9, r0, r4, ror #4
20002614:	20004e34 	andcs	r4, r0, r4, lsr lr
20002618:	20004e28 	andcs	r4, r0, r8, lsr #28
2000261c:	200091ec 	andcs	r9, r0, ip, ror #3
20002620:	20004ee8 	andcs	r4, r0, r8, ror #29
20002624:	20004dd0 	ldrdcs	r4, [r0], -r0
20002628:	20009444 	andcs	r9, r0, r4, asr #8
2000262c:	20004dcc 	andcs	r4, r0, ip, asr #27
20002630:	20004e1c 	andcs	r4, r0, ip, lsl lr
20002634:	200093cc 	andcs	r9, r0, ip, asr #7
20002638:	20004de8 	andcs	r4, r0, r8, ror #27
2000263c:	20004eb0 			; <UNDEFINED> instruction: 0x20004eb0
20002640:	20009354 	andcs	r9, r0, r4, asr r3
20002644:	20004ed4 	ldrdcs	r4, [r0], -r4	; <UNPREDICTABLE>
20002648:	20004db4 			; <UNDEFINED> instruction: 0x20004db4
2000264c:	200095ac 	andcs	r9, r0, ip, lsr #11
20002650:	20004ee4 	andcs	r4, r0, r4, ror #29
20002654:	20004e4c 	andcs	r4, r0, ip, asr #28
20002658:	20009534 	andcs	r9, r0, r4, lsr r5
2000265c:	20004e58 	andcs	r4, r0, r8, asr lr
20002660:	20004e40 	andcs	r4, r0, r0, asr #28
20002664:	200094bc 			; <UNDEFINED> instruction: 0x200094bc
20002668:	20004ebc 			; <UNDEFINED> instruction: 0x20004ebc

2000266c <init_flame>:
	
void init_flame( GameObject *flameObj ) {
2000266c:	b590      	push	{r4, r7, lr}
2000266e:	b083      	sub	sp, #12
20002670:	af00      	add	r7, sp, #0
20002672:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
20002674:	4b29      	ldr	r3, [pc, #164]	; (2000271c <init_flame+0xb0>)
20002676:	681b      	ldr	r3, [r3, #0]
20002678:	2b00      	cmp	r3, #0
2000267a:	d03b      	beq.n	200026f4 <init_flame+0x88>
		initSprites();
2000267c:	f7ff ff22 	bl	200024c4 <initSprites>
		firstTime = 0;			
20002680:	4b26      	ldr	r3, [pc, #152]	; (2000271c <init_flame+0xb0>)
20002682:	2200      	movs	r2, #0
20002684:	601a      	str	r2, [r3, #0]

		flameImages[0] = flame1Image;
20002686:	4b26      	ldr	r3, [pc, #152]	; (20002720 <init_flame+0xb4>)
20002688:	4a26      	ldr	r2, [pc, #152]	; (20002724 <init_flame+0xb8>)
2000268a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000268c:	c313      	stmia	r3!, {r0, r1, r4}
		flameImages[1] = flame2Image;
2000268e:	4b24      	ldr	r3, [pc, #144]	; (20002720 <init_flame+0xb4>)
20002690:	4a25      	ldr	r2, [pc, #148]	; (20002728 <init_flame+0xbc>)
20002692:	330c      	adds	r3, #12
20002694:	ca13      	ldmia	r2!, {r0, r1, r4}
20002696:	c313      	stmia	r3!, {r0, r1, r4}
		flameImages[2] = flame3Image;
20002698:	4b21      	ldr	r3, [pc, #132]	; (20002720 <init_flame+0xb4>)
2000269a:	4a24      	ldr	r2, [pc, #144]	; (2000272c <init_flame+0xc0>)
2000269c:	3318      	adds	r3, #24
2000269e:	ca13      	ldmia	r2!, {r0, r1, r4}
200026a0:	c313      	stmia	r3!, {r0, r1, r4}
		flameImages[3] = flame4Image;
200026a2:	4b1f      	ldr	r3, [pc, #124]	; (20002720 <init_flame+0xb4>)
200026a4:	4a22      	ldr	r2, [pc, #136]	; (20002730 <init_flame+0xc4>)
200026a6:	3324      	adds	r3, #36	; 0x24
200026a8:	ca13      	ldmia	r2!, {r0, r1, r4}
200026aa:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&flameImages[0], flame1Black, flame1Gray, flame1Light);
200026ac:	4b21      	ldr	r3, [pc, #132]	; (20002734 <init_flame+0xc8>)
200026ae:	6819      	ldr	r1, [r3, #0]
200026b0:	4b21      	ldr	r3, [pc, #132]	; (20002738 <init_flame+0xcc>)
200026b2:	681a      	ldr	r2, [r3, #0]
200026b4:	4b21      	ldr	r3, [pc, #132]	; (2000273c <init_flame+0xd0>)
200026b6:	681b      	ldr	r3, [r3, #0]
200026b8:	4819      	ldr	r0, [pc, #100]	; (20002720 <init_flame+0xb4>)
200026ba:	f001 fa11 	bl	20003ae0 <load_image>
		load_image(&flameImages[1], flame2Black, flame2Gray, flame2Light);
200026be:	4b20      	ldr	r3, [pc, #128]	; (20002740 <init_flame+0xd4>)
200026c0:	6819      	ldr	r1, [r3, #0]
200026c2:	4b20      	ldr	r3, [pc, #128]	; (20002744 <init_flame+0xd8>)
200026c4:	681a      	ldr	r2, [r3, #0]
200026c6:	4b20      	ldr	r3, [pc, #128]	; (20002748 <init_flame+0xdc>)
200026c8:	681b      	ldr	r3, [r3, #0]
200026ca:	4820      	ldr	r0, [pc, #128]	; (2000274c <init_flame+0xe0>)
200026cc:	f001 fa08 	bl	20003ae0 <load_image>
		load_image(&flameImages[2], flame3Black, flame3Gray, flame3Light);
200026d0:	4b1f      	ldr	r3, [pc, #124]	; (20002750 <init_flame+0xe4>)
200026d2:	6819      	ldr	r1, [r3, #0]
200026d4:	4b1f      	ldr	r3, [pc, #124]	; (20002754 <init_flame+0xe8>)
200026d6:	681a      	ldr	r2, [r3, #0]
200026d8:	4b1f      	ldr	r3, [pc, #124]	; (20002758 <init_flame+0xec>)
200026da:	681b      	ldr	r3, [r3, #0]
200026dc:	481f      	ldr	r0, [pc, #124]	; (2000275c <init_flame+0xf0>)
200026de:	f001 f9ff 	bl	20003ae0 <load_image>
		load_image(&flameImages[3], flame4Black, flame4Gray, flame4Light);
200026e2:	4b1f      	ldr	r3, [pc, #124]	; (20002760 <init_flame+0xf4>)
200026e4:	6819      	ldr	r1, [r3, #0]
200026e6:	4b1f      	ldr	r3, [pc, #124]	; (20002764 <init_flame+0xf8>)
200026e8:	681a      	ldr	r2, [r3, #0]
200026ea:	4b1f      	ldr	r3, [pc, #124]	; (20002768 <init_flame+0xfc>)
200026ec:	681b      	ldr	r3, [r3, #0]
200026ee:	481f      	ldr	r0, [pc, #124]	; (2000276c <init_flame+0x100>)
200026f0:	f001 f9f6 	bl	20003ae0 <load_image>
}
	
	flameObj->images = flameImages;
200026f4:	687b      	ldr	r3, [r7, #4]
200026f6:	4a0a      	ldr	r2, [pc, #40]	; (20002720 <init_flame+0xb4>)
200026f8:	601a      	str	r2, [r3, #0]

	flameObj->current_frame = 0;
200026fa:	687b      	ldr	r3, [r7, #4]
200026fc:	2200      	movs	r2, #0
200026fe:	615a      	str	r2, [r3, #20]
	flameObj->n_frames = 4;
20002700:	687b      	ldr	r3, [r7, #4]
20002702:	2204      	movs	r2, #4
20002704:	619a      	str	r2, [r3, #24]
	flameObj->animation_speed = 1;
20002706:	687b      	ldr	r3, [r7, #4]
20002708:	2201      	movs	r2, #1
2000270a:	61da      	str	r2, [r3, #28]
	flameObj->animation_counter = 0;
2000270c:	687b      	ldr	r3, [r7, #4]
2000270e:	2200      	movs	r2, #0
20002710:	621a      	str	r2, [r3, #32]
}
20002712:	46c0      	nop			; (mov r8, r8)
20002714:	46bd      	mov	sp, r7
20002716:	b003      	add	sp, #12
20002718:	bd90      	pop	{r4, r7, pc}
2000271a:	46c0      	nop			; (mov r8, r8)
2000271c:	20009624 	andcs	r9, r0, r4, lsr #12
20002720:	20004e80 	andcs	r4, r0, r0, lsl #29
20002724:	20004e68 	andcs	r4, r0, r8, ror #28
20002728:	20004dc0 	andcs	r4, r0, r0, asr #27
2000272c:	20004ddc 	ldrdcs	r4, [r0], -ip
20002730:	20004e5c 	andcs	r4, r0, ip, asr lr
20002734:	20004ec0 	andcs	r4, r0, r0, asr #29
20002738:	20004e38 	andcs	r4, r0, r8, lsr lr
2000273c:	20004e3c 	andcs	r4, r0, ip, lsr lr
20002740:	20004ee8 	andcs	r4, r0, r8, ror #29
20002744:	20004e34 	andcs	r4, r0, r4, lsr lr
20002748:	20004ed0 	ldrdcs	r4, [r0], -r0
2000274c:	20004e8c 	andcs	r4, r0, ip, lsl #29
20002750:	20004ed4 	ldrdcs	r4, [r0], -r4	; <UNPREDICTABLE>
20002754:	20004de8 	andcs	r4, r0, r8, ror #27
20002758:	20004dcc 	andcs	r4, r0, ip, asr #27
2000275c:	20004e98 	mulcs	r0, r8, lr
20002760:	20004ebc 			; <UNDEFINED> instruction: 0x20004ebc
20002764:	20004e58 	andcs	r4, r0, r8, asr lr
20002768:	20004ee4 	andcs	r4, r0, r4, ror #29
2000276c:	20004ea4 	andcs	r4, r0, r4, lsr #29

20002770 <initSprites>:
Image boom12Image;
Image boom13Image;
Image boom14Image;
Image boom15Image;
Image boomImages[15];
static void initSprites( void ) {	
20002770:	b580      	push	{r7, lr}
20002772:	b092      	sub	sp, #72	; 0x48
20002774:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempBoomLight;
20002776:	4b65      	ldr	r3, [pc, #404]	; (2000290c <initSprites+0x19c>)
20002778:	647b      	str	r3, [r7, #68]	; 0x44
	load_sprite(pointer11, boom1_light_bits, boom1_black_width, boom1_black_height);
2000277a:	4965      	ldr	r1, [pc, #404]	; (20002910 <initSprites+0x1a0>)
2000277c:	6c78      	ldr	r0, [r7, #68]	; 0x44
2000277e:	2337      	movs	r3, #55	; 0x37
20002780:	226a      	movs	r2, #106	; 0x6a
20002782:	f001 f9c1 	bl	20003b08 <load_sprite>
	boom1Light = pointer11;
20002786:	4b63      	ldr	r3, [pc, #396]	; (20002914 <initSprites+0x1a4>)
20002788:	6c7a      	ldr	r2, [r7, #68]	; 0x44
2000278a:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempBoomGray;
2000278c:	4b62      	ldr	r3, [pc, #392]	; (20002918 <initSprites+0x1a8>)
2000278e:	643b      	str	r3, [r7, #64]	; 0x40
	load_sprite(pointer12, boom1_gray_bits, boom1_black_width, boom1_black_height);
20002790:	4962      	ldr	r1, [pc, #392]	; (2000291c <initSprites+0x1ac>)
20002792:	6c38      	ldr	r0, [r7, #64]	; 0x40
20002794:	2337      	movs	r3, #55	; 0x37
20002796:	226a      	movs	r2, #106	; 0x6a
20002798:	f001 f9b6 	bl	20003b08 <load_sprite>
	boom1Gray = pointer12;
2000279c:	4b60      	ldr	r3, [pc, #384]	; (20002920 <initSprites+0x1b0>)
2000279e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
200027a0:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempBoomBlack;
200027a2:	4b60      	ldr	r3, [pc, #384]	; (20002924 <initSprites+0x1b4>)
200027a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	load_sprite(pointer13, boom1_black_bits, boom1_black_width, boom1_black_height);
200027a6:	4960      	ldr	r1, [pc, #384]	; (20002928 <initSprites+0x1b8>)
200027a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
200027aa:	2337      	movs	r3, #55	; 0x37
200027ac:	226a      	movs	r2, #106	; 0x6a
200027ae:	f001 f9ab 	bl	20003b08 <load_sprite>
	boom1Black = pointer13;	
200027b2:	4b5e      	ldr	r3, [pc, #376]	; (2000292c <initSprites+0x1bc>)
200027b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
200027b6:	601a      	str	r2, [r3, #0]
	
	sprite *pointer14 = &tempBoom2Light;
200027b8:	4b5d      	ldr	r3, [pc, #372]	; (20002930 <initSprites+0x1c0>)
200027ba:	63bb      	str	r3, [r7, #56]	; 0x38
	load_sprite(pointer14, boom2_light_bits, boom2_black_width, boom2_black_height);
200027bc:	495d      	ldr	r1, [pc, #372]	; (20002934 <initSprites+0x1c4>)
200027be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
200027c0:	2337      	movs	r3, #55	; 0x37
200027c2:	226a      	movs	r2, #106	; 0x6a
200027c4:	f001 f9a0 	bl	20003b08 <load_sprite>
	boom2Light = pointer14;
200027c8:	4b5b      	ldr	r3, [pc, #364]	; (20002938 <initSprites+0x1c8>)
200027ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
200027cc:	601a      	str	r2, [r3, #0]
	sprite *pointer15 = &tempBoom2Gray;
200027ce:	4b5b      	ldr	r3, [pc, #364]	; (2000293c <initSprites+0x1cc>)
200027d0:	637b      	str	r3, [r7, #52]	; 0x34
	load_sprite(pointer15, boom2_gray_bits, boom2_black_width, boom2_black_height);
200027d2:	495b      	ldr	r1, [pc, #364]	; (20002940 <initSprites+0x1d0>)
200027d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
200027d6:	2337      	movs	r3, #55	; 0x37
200027d8:	226a      	movs	r2, #106	; 0x6a
200027da:	f001 f995 	bl	20003b08 <load_sprite>
	boom2Gray = pointer15;
200027de:	4b59      	ldr	r3, [pc, #356]	; (20002944 <initSprites+0x1d4>)
200027e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
200027e2:	601a      	str	r2, [r3, #0]
	sprite *pointer16 = &tempBoom2Black;
200027e4:	4b58      	ldr	r3, [pc, #352]	; (20002948 <initSprites+0x1d8>)
200027e6:	633b      	str	r3, [r7, #48]	; 0x30
	load_sprite(pointer16, boom2_black_bits, boom2_black_width, boom2_black_height);
200027e8:	4958      	ldr	r1, [pc, #352]	; (2000294c <initSprites+0x1dc>)
200027ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
200027ec:	2337      	movs	r3, #55	; 0x37
200027ee:	226a      	movs	r2, #106	; 0x6a
200027f0:	f001 f98a 	bl	20003b08 <load_sprite>
	boom2Black = pointer16;
200027f4:	4b56      	ldr	r3, [pc, #344]	; (20002950 <initSprites+0x1e0>)
200027f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
200027f8:	601a      	str	r2, [r3, #0]
	
	
	sprite *finalPointer = &tempBoom3Light;
200027fa:	4b56      	ldr	r3, [pc, #344]	; (20002954 <initSprites+0x1e4>)
200027fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	load_sprite(finalPointer, boom3_light_bits, boom3_black_width, boom3_black_height);
200027fe:	4956      	ldr	r1, [pc, #344]	; (20002958 <initSprites+0x1e8>)
20002800:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20002802:	2337      	movs	r3, #55	; 0x37
20002804:	226a      	movs	r2, #106	; 0x6a
20002806:	f001 f97f 	bl	20003b08 <load_sprite>
	boom3Light = finalPointer;
2000280a:	4b54      	ldr	r3, [pc, #336]	; (2000295c <initSprites+0x1ec>)
2000280c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
2000280e:	601a      	str	r2, [r3, #0]
	sprite *pointer17 = &tempBoom3Gray;
20002810:	4b53      	ldr	r3, [pc, #332]	; (20002960 <initSprites+0x1f0>)
20002812:	62bb      	str	r3, [r7, #40]	; 0x28
	load_sprite(pointer17, boom3_gray_bits, boom3_black_width, boom3_black_height);
20002814:	4953      	ldr	r1, [pc, #332]	; (20002964 <initSprites+0x1f4>)
20002816:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20002818:	2337      	movs	r3, #55	; 0x37
2000281a:	226a      	movs	r2, #106	; 0x6a
2000281c:	f001 f974 	bl	20003b08 <load_sprite>
	boom3Gray = pointer17;
20002820:	4b51      	ldr	r3, [pc, #324]	; (20002968 <initSprites+0x1f8>)
20002822:	6aba      	ldr	r2, [r7, #40]	; 0x28
20002824:	601a      	str	r2, [r3, #0]
	sprite *pointer18 = &tempBoom3Black;
20002826:	4b51      	ldr	r3, [pc, #324]	; (2000296c <initSprites+0x1fc>)
20002828:	627b      	str	r3, [r7, #36]	; 0x24
	load_sprite(pointer18, boom3_black_bits, boom3_black_width, boom3_black_height);
2000282a:	4951      	ldr	r1, [pc, #324]	; (20002970 <initSprites+0x200>)
2000282c:	6a78      	ldr	r0, [r7, #36]	; 0x24
2000282e:	2337      	movs	r3, #55	; 0x37
20002830:	226a      	movs	r2, #106	; 0x6a
20002832:	f001 f969 	bl	20003b08 <load_sprite>
	boom3Black = pointer18;	
20002836:	4b4f      	ldr	r3, [pc, #316]	; (20002974 <initSprites+0x204>)
20002838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000283a:	601a      	str	r2, [r3, #0]
	
	sprite *pointer19 = &tempBoom4Light;
2000283c:	4b4e      	ldr	r3, [pc, #312]	; (20002978 <initSprites+0x208>)
2000283e:	623b      	str	r3, [r7, #32]
	load_sprite(pointer19, boom4_light_bits, boom4_black_width, boom4_black_height);
20002840:	494e      	ldr	r1, [pc, #312]	; (2000297c <initSprites+0x20c>)
20002842:	6a38      	ldr	r0, [r7, #32]
20002844:	2337      	movs	r3, #55	; 0x37
20002846:	226a      	movs	r2, #106	; 0x6a
20002848:	f001 f95e 	bl	20003b08 <load_sprite>
	boom4Light = pointer19;
2000284c:	4b4c      	ldr	r3, [pc, #304]	; (20002980 <initSprites+0x210>)
2000284e:	6a3a      	ldr	r2, [r7, #32]
20002850:	601a      	str	r2, [r3, #0]
	sprite *pointer20 = &tempBoom4Gray;
20002852:	4b4c      	ldr	r3, [pc, #304]	; (20002984 <initSprites+0x214>)
20002854:	61fb      	str	r3, [r7, #28]
	load_sprite(pointer20, boom4_gray_bits, boom4_black_width, boom4_black_height);
20002856:	494c      	ldr	r1, [pc, #304]	; (20002988 <initSprites+0x218>)
20002858:	69f8      	ldr	r0, [r7, #28]
2000285a:	2337      	movs	r3, #55	; 0x37
2000285c:	226a      	movs	r2, #106	; 0x6a
2000285e:	f001 f953 	bl	20003b08 <load_sprite>
	boom4Gray = pointer20;
20002862:	4b4a      	ldr	r3, [pc, #296]	; (2000298c <initSprites+0x21c>)
20002864:	69fa      	ldr	r2, [r7, #28]
20002866:	601a      	str	r2, [r3, #0]
	sprite *pointer21 = &tempBoom4Black;
20002868:	4b49      	ldr	r3, [pc, #292]	; (20002990 <initSprites+0x220>)
2000286a:	61bb      	str	r3, [r7, #24]
	load_sprite(pointer21, boom4_black_bits, boom4_black_width, boom4_black_height);
2000286c:	4949      	ldr	r1, [pc, #292]	; (20002994 <initSprites+0x224>)
2000286e:	69b8      	ldr	r0, [r7, #24]
20002870:	2337      	movs	r3, #55	; 0x37
20002872:	226a      	movs	r2, #106	; 0x6a
20002874:	f001 f948 	bl	20003b08 <load_sprite>
	boom4Black = pointer21;	
20002878:	4b47      	ldr	r3, [pc, #284]	; (20002998 <initSprites+0x228>)
2000287a:	69ba      	ldr	r2, [r7, #24]
2000287c:	601a      	str	r2, [r3, #0]
	
	sprite *pointer22 = &tempBoom5Light;
2000287e:	4b47      	ldr	r3, [pc, #284]	; (2000299c <initSprites+0x22c>)
20002880:	617b      	str	r3, [r7, #20]
	load_sprite(pointer22, boom5_light_bits, boom5_black_width, boom5_black_height);
20002882:	4947      	ldr	r1, [pc, #284]	; (200029a0 <initSprites+0x230>)
20002884:	6978      	ldr	r0, [r7, #20]
20002886:	2337      	movs	r3, #55	; 0x37
20002888:	226a      	movs	r2, #106	; 0x6a
2000288a:	f001 f93d 	bl	20003b08 <load_sprite>
	boom5Light = pointer22;
2000288e:	4b45      	ldr	r3, [pc, #276]	; (200029a4 <initSprites+0x234>)
20002890:	697a      	ldr	r2, [r7, #20]
20002892:	601a      	str	r2, [r3, #0]
	sprite *pointer23 = &tempBoom5Gray;
20002894:	4b44      	ldr	r3, [pc, #272]	; (200029a8 <initSprites+0x238>)
20002896:	613b      	str	r3, [r7, #16]
	load_sprite(pointer23, boom5_gray_bits, boom5_black_width, boom5_black_height);
20002898:	4944      	ldr	r1, [pc, #272]	; (200029ac <initSprites+0x23c>)
2000289a:	6938      	ldr	r0, [r7, #16]
2000289c:	2337      	movs	r3, #55	; 0x37
2000289e:	226a      	movs	r2, #106	; 0x6a
200028a0:	f001 f932 	bl	20003b08 <load_sprite>
	boom5Gray = pointer23;
200028a4:	4b42      	ldr	r3, [pc, #264]	; (200029b0 <initSprites+0x240>)
200028a6:	693a      	ldr	r2, [r7, #16]
200028a8:	601a      	str	r2, [r3, #0]
	sprite *pointer24 = &tempBoom5Black;
200028aa:	4b42      	ldr	r3, [pc, #264]	; (200029b4 <initSprites+0x244>)
200028ac:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer24, boom5_black_bits, boom5_black_width, boom5_black_height);
200028ae:	4942      	ldr	r1, [pc, #264]	; (200029b8 <initSprites+0x248>)
200028b0:	68f8      	ldr	r0, [r7, #12]
200028b2:	2337      	movs	r3, #55	; 0x37
200028b4:	226a      	movs	r2, #106	; 0x6a
200028b6:	f001 f927 	bl	20003b08 <load_sprite>
	boom5Black = pointer24;
200028ba:	4b40      	ldr	r3, [pc, #256]	; (200029bc <initSprites+0x24c>)
200028bc:	68fa      	ldr	r2, [r7, #12]
200028be:	601a      	str	r2, [r3, #0]

	sprite *pointer25 = &tempBoom6Light;
200028c0:	4b3f      	ldr	r3, [pc, #252]	; (200029c0 <initSprites+0x250>)
200028c2:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer25, boom6_light_bits, boom6_black_width, boom6_black_height);
200028c4:	493f      	ldr	r1, [pc, #252]	; (200029c4 <initSprites+0x254>)
200028c6:	68b8      	ldr	r0, [r7, #8]
200028c8:	2337      	movs	r3, #55	; 0x37
200028ca:	226a      	movs	r2, #106	; 0x6a
200028cc:	f001 f91c 	bl	20003b08 <load_sprite>
	boom6Light = pointer25;
200028d0:	4b3d      	ldr	r3, [pc, #244]	; (200029c8 <initSprites+0x258>)
200028d2:	68ba      	ldr	r2, [r7, #8]
200028d4:	601a      	str	r2, [r3, #0]
	sprite *pointer26 = &tempBoom6Gray;
200028d6:	4b3d      	ldr	r3, [pc, #244]	; (200029cc <initSprites+0x25c>)
200028d8:	607b      	str	r3, [r7, #4]
	load_sprite(pointer26, boom6_gray_bits, boom6_black_width, boom6_black_height);
200028da:	493d      	ldr	r1, [pc, #244]	; (200029d0 <initSprites+0x260>)
200028dc:	6878      	ldr	r0, [r7, #4]
200028de:	2337      	movs	r3, #55	; 0x37
200028e0:	226a      	movs	r2, #106	; 0x6a
200028e2:	f001 f911 	bl	20003b08 <load_sprite>
	boom6Gray = pointer26;
200028e6:	4b3b      	ldr	r3, [pc, #236]	; (200029d4 <initSprites+0x264>)
200028e8:	687a      	ldr	r2, [r7, #4]
200028ea:	601a      	str	r2, [r3, #0]
	sprite *pointer27 = &tempBoom6Black;
200028ec:	4b3a      	ldr	r3, [pc, #232]	; (200029d8 <initSprites+0x268>)
200028ee:	603b      	str	r3, [r7, #0]
	load_sprite(pointer27, boom6_black_bits, boom6_black_width, boom6_black_height);
200028f0:	493a      	ldr	r1, [pc, #232]	; (200029dc <initSprites+0x26c>)
200028f2:	6838      	ldr	r0, [r7, #0]
200028f4:	2337      	movs	r3, #55	; 0x37
200028f6:	226a      	movs	r2, #106	; 0x6a
200028f8:	f001 f906 	bl	20003b08 <load_sprite>
	boom6Black = pointer27;
200028fc:	4b38      	ldr	r3, [pc, #224]	; (200029e0 <initSprites+0x270>)
200028fe:	683a      	ldr	r2, [r7, #0]
20002900:	601a      	str	r2, [r3, #0]
}
20002902:	46c0      	nop			; (mov r8, r8)
20002904:	46bd      	mov	sp, r7
20002906:	b012      	add	sp, #72	; 0x48
20002908:	bd80      	pop	{r7, pc}
2000290a:	46c0      	nop			; (mov r8, r8)
2000290c:	20004f04 	andcs	r4, r0, r4, lsl #30
20002910:	20009c30 	andcs	r9, r0, r0, lsr ip
20002914:	20005174 	andcs	r5, r0, r4, ror r1
20002918:	200050c4 	andcs	r5, r0, r4, asr #1
2000291c:	2000992c 	andcs	r9, r0, ip, lsr #18
20002920:	20005110 	andcs	r5, r0, r0, lsl r1
20002924:	2000518c 	andcs	r5, r0, ip, lsl #3
20002928:	20009628 	andcs	r9, r0, r8, lsr #12
2000292c:	200050d4 	ldrdcs	r5, [r0], -r4
20002930:	2000515c 	andcs	r5, r0, ip, asr r1
20002934:	2000a53c 	andcs	sl, r0, ip, lsr r5
20002938:	20005188 	andcs	r5, r0, r8, lsl #3
2000293c:	200050e4 	andcs	r5, r0, r4, ror #1
20002940:	2000a238 	andcs	sl, r0, r8, lsr r2
20002944:	200050d0 	ldrdcs	r5, [r0], -r0
20002948:	20004ef8 	strdcs	r4, [r0], -r8
2000294c:	20009f34 	andcs	r9, r0, r4, lsr pc
20002950:	20005184 	andcs	r5, r0, r4, lsl #3
20002954:	20004fd0 	ldrdcs	r4, [r0], -r0
20002958:	2000ae48 	andcs	sl, r0, r8, asr #28
2000295c:	20004f34 	andcs	r4, r0, r4, lsr pc
20002960:	200050fc 	strdcs	r5, [r0], -ip
20002964:	2000ab44 	andcs	sl, r0, r4, asr #22
20002968:	20004f8c 	andcs	r4, r0, ip, lsl #31
2000296c:	200050a8 	andcs	r5, r0, r8, lsr #1
20002970:	2000a840 	andcs	sl, r0, r0, asr #16
20002974:	20004f38 	andcs	r4, r0, r8, lsr pc
20002978:	20004f90 	mulcs	r0, r0, pc	; <UNPREDICTABLE>
2000297c:	2000b754 	andcs	fp, r0, r4, asr r7
20002980:	20004f58 	andcs	r4, r0, r8, asr pc
20002984:	200050f0 	strdcs	r5, [r0], -r0
20002988:	2000b450 	andcs	fp, r0, r0, asr r4
2000298c:	20005108 	andcs	r5, r0, r8, lsl #2
20002990:	20005150 	andcs	r5, r0, r0, asr r1
20002994:	2000b14c 	andcs	fp, r0, ip, asr #2
20002998:	200050b4 	strhcs	r5, [r0], -r4
2000299c:	20005144 	andcs	r5, r0, r4, asr #2
200029a0:	2000c060 	andcs	ip, r0, r0, rrx
200029a4:	2000510c 	andcs	r5, r0, ip, lsl #2
200029a8:	20004eec 	andcs	r4, r0, ip, ror #29
200029ac:	2000bd5c 	andcs	fp, r0, ip, asr sp
200029b0:	20004f9c 	mulcs	r0, ip, pc	; <UNPREDICTABLE>
200029b4:	20005168 	andcs	r5, r0, r8, ror #2
200029b8:	2000ba58 	andcs	fp, r0, r8, asr sl
200029bc:	20004f54 	andcs	r4, r0, r4, asr pc
200029c0:	20004f10 	andcs	r4, r0, r0, lsl pc
200029c4:	2000c96c 	andcs	ip, r0, ip, ror #18
200029c8:	20004fec 	andcs	r4, r0, ip, ror #31
200029cc:	200050d8 	ldrdcs	r5, [r0], -r8
200029d0:	2000c668 	andcs	ip, r0, r8, ror #12
200029d4:	20004fdc 	ldrdcs	r4, [r0], -ip
200029d8:	200050b8 	strhcs	r5, [r0], -r8
200029dc:	2000c364 	andcs	ip, r0, r4, ror #6
200029e0:	200050a4 	andcs	r5, r0, r4, lsr #1

200029e4 <init_boom>:
	
void init_boom( GameObject *boomObj ) {
200029e4:	b590      	push	{r4, r7, lr}
200029e6:	b083      	sub	sp, #12
200029e8:	af00      	add	r7, sp, #0
200029ea:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
200029ec:	4b7a      	ldr	r3, [pc, #488]	; (20002bd8 <init_boom+0x1f4>)
200029ee:	681b      	ldr	r3, [r3, #0]
200029f0:	2b00      	cmp	r3, #0
200029f2:	d100      	bne.n	200029f6 <init_boom+0x12>
200029f4:	e0dd      	b.n	20002bb2 <init_boom+0x1ce>
		initSprites();
200029f6:	f7ff febb 	bl	20002770 <initSprites>
		firstTime = 0;			
200029fa:	4b77      	ldr	r3, [pc, #476]	; (20002bd8 <init_boom+0x1f4>)
200029fc:	2200      	movs	r2, #0
200029fe:	601a      	str	r2, [r3, #0]

		boomImages[0] = boom1Image;
20002a00:	4b76      	ldr	r3, [pc, #472]	; (20002bdc <init_boom+0x1f8>)
20002a02:	4a77      	ldr	r2, [pc, #476]	; (20002be0 <init_boom+0x1fc>)
20002a04:	ca13      	ldmia	r2!, {r0, r1, r4}
20002a06:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[1] = boom2Image;
20002a08:	4b74      	ldr	r3, [pc, #464]	; (20002bdc <init_boom+0x1f8>)
20002a0a:	4a76      	ldr	r2, [pc, #472]	; (20002be4 <init_boom+0x200>)
20002a0c:	330c      	adds	r3, #12
20002a0e:	ca13      	ldmia	r2!, {r0, r1, r4}
20002a10:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[2] = boom3Image;
20002a12:	4b72      	ldr	r3, [pc, #456]	; (20002bdc <init_boom+0x1f8>)
20002a14:	4a74      	ldr	r2, [pc, #464]	; (20002be8 <init_boom+0x204>)
20002a16:	3318      	adds	r3, #24
20002a18:	ca13      	ldmia	r2!, {r0, r1, r4}
20002a1a:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[3] = boom4Image;
20002a1c:	4b6f      	ldr	r3, [pc, #444]	; (20002bdc <init_boom+0x1f8>)
20002a1e:	4a73      	ldr	r2, [pc, #460]	; (20002bec <init_boom+0x208>)
20002a20:	3324      	adds	r3, #36	; 0x24
20002a22:	ca13      	ldmia	r2!, {r0, r1, r4}
20002a24:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[4] = boom5Image;
20002a26:	4b6d      	ldr	r3, [pc, #436]	; (20002bdc <init_boom+0x1f8>)
20002a28:	4a71      	ldr	r2, [pc, #452]	; (20002bf0 <init_boom+0x20c>)
20002a2a:	3330      	adds	r3, #48	; 0x30
20002a2c:	ca13      	ldmia	r2!, {r0, r1, r4}
20002a2e:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[5] = boom6Image;
20002a30:	4b6a      	ldr	r3, [pc, #424]	; (20002bdc <init_boom+0x1f8>)
20002a32:	4a70      	ldr	r2, [pc, #448]	; (20002bf4 <init_boom+0x210>)
20002a34:	333c      	adds	r3, #60	; 0x3c
20002a36:	ca13      	ldmia	r2!, {r0, r1, r4}
20002a38:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[6] = boom7Image;
20002a3a:	4b68      	ldr	r3, [pc, #416]	; (20002bdc <init_boom+0x1f8>)
20002a3c:	4a6e      	ldr	r2, [pc, #440]	; (20002bf8 <init_boom+0x214>)
20002a3e:	3348      	adds	r3, #72	; 0x48
20002a40:	ca13      	ldmia	r2!, {r0, r1, r4}
20002a42:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[7] = boom8Image;
20002a44:	4b65      	ldr	r3, [pc, #404]	; (20002bdc <init_boom+0x1f8>)
20002a46:	4a6d      	ldr	r2, [pc, #436]	; (20002bfc <init_boom+0x218>)
20002a48:	3354      	adds	r3, #84	; 0x54
20002a4a:	ca13      	ldmia	r2!, {r0, r1, r4}
20002a4c:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[8] = boom9Image;
20002a4e:	4b63      	ldr	r3, [pc, #396]	; (20002bdc <init_boom+0x1f8>)
20002a50:	4a6b      	ldr	r2, [pc, #428]	; (20002c00 <init_boom+0x21c>)
20002a52:	3360      	adds	r3, #96	; 0x60
20002a54:	ca13      	ldmia	r2!, {r0, r1, r4}
20002a56:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[9] = boom10Image;
20002a58:	4b60      	ldr	r3, [pc, #384]	; (20002bdc <init_boom+0x1f8>)
20002a5a:	4a6a      	ldr	r2, [pc, #424]	; (20002c04 <init_boom+0x220>)
20002a5c:	336c      	adds	r3, #108	; 0x6c
20002a5e:	ca13      	ldmia	r2!, {r0, r1, r4}
20002a60:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[10] = boom11Image;
20002a62:	4b5e      	ldr	r3, [pc, #376]	; (20002bdc <init_boom+0x1f8>)
20002a64:	4a68      	ldr	r2, [pc, #416]	; (20002c08 <init_boom+0x224>)
20002a66:	3378      	adds	r3, #120	; 0x78
20002a68:	ca13      	ldmia	r2!, {r0, r1, r4}
20002a6a:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[11] = boom12Image;
20002a6c:	4b5b      	ldr	r3, [pc, #364]	; (20002bdc <init_boom+0x1f8>)
20002a6e:	2284      	movs	r2, #132	; 0x84
20002a70:	4966      	ldr	r1, [pc, #408]	; (20002c0c <init_boom+0x228>)
20002a72:	189b      	adds	r3, r3, r2
20002a74:	000a      	movs	r2, r1
20002a76:	ca13      	ldmia	r2!, {r0, r1, r4}
20002a78:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[12] = boom13Image;
20002a7a:	4b58      	ldr	r3, [pc, #352]	; (20002bdc <init_boom+0x1f8>)
20002a7c:	2290      	movs	r2, #144	; 0x90
20002a7e:	4964      	ldr	r1, [pc, #400]	; (20002c10 <init_boom+0x22c>)
20002a80:	189b      	adds	r3, r3, r2
20002a82:	000a      	movs	r2, r1
20002a84:	ca13      	ldmia	r2!, {r0, r1, r4}
20002a86:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[13] = boom14Image;
20002a88:	4b54      	ldr	r3, [pc, #336]	; (20002bdc <init_boom+0x1f8>)
20002a8a:	229c      	movs	r2, #156	; 0x9c
20002a8c:	4961      	ldr	r1, [pc, #388]	; (20002c14 <init_boom+0x230>)
20002a8e:	189b      	adds	r3, r3, r2
20002a90:	000a      	movs	r2, r1
20002a92:	ca13      	ldmia	r2!, {r0, r1, r4}
20002a94:	c313      	stmia	r3!, {r0, r1, r4}
		boomImages[14] = boom15Image;
20002a96:	4b51      	ldr	r3, [pc, #324]	; (20002bdc <init_boom+0x1f8>)
20002a98:	22a8      	movs	r2, #168	; 0xa8
20002a9a:	495f      	ldr	r1, [pc, #380]	; (20002c18 <init_boom+0x234>)
20002a9c:	189b      	adds	r3, r3, r2
20002a9e:	000a      	movs	r2, r1
20002aa0:	ca13      	ldmia	r2!, {r0, r1, r4}
20002aa2:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&boomImages[0], boom1Black, boom1Gray, boom1Light);
20002aa4:	4b5d      	ldr	r3, [pc, #372]	; (20002c1c <init_boom+0x238>)
20002aa6:	6819      	ldr	r1, [r3, #0]
20002aa8:	4b5d      	ldr	r3, [pc, #372]	; (20002c20 <init_boom+0x23c>)
20002aaa:	681a      	ldr	r2, [r3, #0]
20002aac:	4b5d      	ldr	r3, [pc, #372]	; (20002c24 <init_boom+0x240>)
20002aae:	681b      	ldr	r3, [r3, #0]
20002ab0:	484a      	ldr	r0, [pc, #296]	; (20002bdc <init_boom+0x1f8>)
20002ab2:	f001 f815 	bl	20003ae0 <load_image>
		load_image(&boomImages[1], boom2Black, boom2Gray, boom2Light);
20002ab6:	4b5c      	ldr	r3, [pc, #368]	; (20002c28 <init_boom+0x244>)
20002ab8:	6819      	ldr	r1, [r3, #0]
20002aba:	4b5c      	ldr	r3, [pc, #368]	; (20002c2c <init_boom+0x248>)
20002abc:	681a      	ldr	r2, [r3, #0]
20002abe:	4b5c      	ldr	r3, [pc, #368]	; (20002c30 <init_boom+0x24c>)
20002ac0:	681b      	ldr	r3, [r3, #0]
20002ac2:	485c      	ldr	r0, [pc, #368]	; (20002c34 <init_boom+0x250>)
20002ac4:	f001 f80c 	bl	20003ae0 <load_image>
		load_image(&boomImages[2], boom3Black, boom3Gray, boom3Light);
20002ac8:	4b5b      	ldr	r3, [pc, #364]	; (20002c38 <init_boom+0x254>)
20002aca:	6819      	ldr	r1, [r3, #0]
20002acc:	4b5b      	ldr	r3, [pc, #364]	; (20002c3c <init_boom+0x258>)
20002ace:	681a      	ldr	r2, [r3, #0]
20002ad0:	4b5b      	ldr	r3, [pc, #364]	; (20002c40 <init_boom+0x25c>)
20002ad2:	681b      	ldr	r3, [r3, #0]
20002ad4:	485b      	ldr	r0, [pc, #364]	; (20002c44 <init_boom+0x260>)
20002ad6:	f001 f803 	bl	20003ae0 <load_image>
		load_image(&boomImages[3], boom4Black, boom4Gray, boom4Light);
20002ada:	4b5b      	ldr	r3, [pc, #364]	; (20002c48 <init_boom+0x264>)
20002adc:	6819      	ldr	r1, [r3, #0]
20002ade:	4b5b      	ldr	r3, [pc, #364]	; (20002c4c <init_boom+0x268>)
20002ae0:	681a      	ldr	r2, [r3, #0]
20002ae2:	4b5b      	ldr	r3, [pc, #364]	; (20002c50 <init_boom+0x26c>)
20002ae4:	681b      	ldr	r3, [r3, #0]
20002ae6:	485b      	ldr	r0, [pc, #364]	; (20002c54 <init_boom+0x270>)
20002ae8:	f000 fffa 	bl	20003ae0 <load_image>
		load_image(&boomImages[4], boom5Black, boom5Gray, boom5Light);
20002aec:	4b5a      	ldr	r3, [pc, #360]	; (20002c58 <init_boom+0x274>)
20002aee:	6819      	ldr	r1, [r3, #0]
20002af0:	4b5a      	ldr	r3, [pc, #360]	; (20002c5c <init_boom+0x278>)
20002af2:	681a      	ldr	r2, [r3, #0]
20002af4:	4b5a      	ldr	r3, [pc, #360]	; (20002c60 <init_boom+0x27c>)
20002af6:	681b      	ldr	r3, [r3, #0]
20002af8:	485a      	ldr	r0, [pc, #360]	; (20002c64 <init_boom+0x280>)
20002afa:	f000 fff1 	bl	20003ae0 <load_image>
		load_image(&boomImages[5], boom6Black, boom6Gray, boom6Light);
20002afe:	4b5a      	ldr	r3, [pc, #360]	; (20002c68 <init_boom+0x284>)
20002b00:	6819      	ldr	r1, [r3, #0]
20002b02:	4b5a      	ldr	r3, [pc, #360]	; (20002c6c <init_boom+0x288>)
20002b04:	681a      	ldr	r2, [r3, #0]
20002b06:	4b5a      	ldr	r3, [pc, #360]	; (20002c70 <init_boom+0x28c>)
20002b08:	681b      	ldr	r3, [r3, #0]
20002b0a:	485a      	ldr	r0, [pc, #360]	; (20002c74 <init_boom+0x290>)
20002b0c:	f000 ffe8 	bl	20003ae0 <load_image>
		load_image(&boomImages[6], boom6Black, boom6Gray, boom6Light);
20002b10:	4b55      	ldr	r3, [pc, #340]	; (20002c68 <init_boom+0x284>)
20002b12:	6819      	ldr	r1, [r3, #0]
20002b14:	4b55      	ldr	r3, [pc, #340]	; (20002c6c <init_boom+0x288>)
20002b16:	681a      	ldr	r2, [r3, #0]
20002b18:	4b55      	ldr	r3, [pc, #340]	; (20002c70 <init_boom+0x28c>)
20002b1a:	681b      	ldr	r3, [r3, #0]
20002b1c:	4856      	ldr	r0, [pc, #344]	; (20002c78 <init_boom+0x294>)
20002b1e:	f000 ffdf 	bl	20003ae0 <load_image>
		load_image(&boomImages[7], boom6Black, boom6Gray, boom6Light);
20002b22:	4b51      	ldr	r3, [pc, #324]	; (20002c68 <init_boom+0x284>)
20002b24:	6819      	ldr	r1, [r3, #0]
20002b26:	4b51      	ldr	r3, [pc, #324]	; (20002c6c <init_boom+0x288>)
20002b28:	681a      	ldr	r2, [r3, #0]
20002b2a:	4b51      	ldr	r3, [pc, #324]	; (20002c70 <init_boom+0x28c>)
20002b2c:	681b      	ldr	r3, [r3, #0]
20002b2e:	4853      	ldr	r0, [pc, #332]	; (20002c7c <init_boom+0x298>)
20002b30:	f000 ffd6 	bl	20003ae0 <load_image>
		load_image(&boomImages[8], boom6Black, boom6Gray, boom6Light);
20002b34:	4b4c      	ldr	r3, [pc, #304]	; (20002c68 <init_boom+0x284>)
20002b36:	6819      	ldr	r1, [r3, #0]
20002b38:	4b4c      	ldr	r3, [pc, #304]	; (20002c6c <init_boom+0x288>)
20002b3a:	681a      	ldr	r2, [r3, #0]
20002b3c:	4b4c      	ldr	r3, [pc, #304]	; (20002c70 <init_boom+0x28c>)
20002b3e:	681b      	ldr	r3, [r3, #0]
20002b40:	484f      	ldr	r0, [pc, #316]	; (20002c80 <init_boom+0x29c>)
20002b42:	f000 ffcd 	bl	20003ae0 <load_image>
		load_image(&boomImages[9], boom6Black, boom6Gray, boom6Light);
20002b46:	4b48      	ldr	r3, [pc, #288]	; (20002c68 <init_boom+0x284>)
20002b48:	6819      	ldr	r1, [r3, #0]
20002b4a:	4b48      	ldr	r3, [pc, #288]	; (20002c6c <init_boom+0x288>)
20002b4c:	681a      	ldr	r2, [r3, #0]
20002b4e:	4b48      	ldr	r3, [pc, #288]	; (20002c70 <init_boom+0x28c>)
20002b50:	681b      	ldr	r3, [r3, #0]
20002b52:	484c      	ldr	r0, [pc, #304]	; (20002c84 <init_boom+0x2a0>)
20002b54:	f000 ffc4 	bl	20003ae0 <load_image>
		load_image(&boomImages[10], boom6Black, boom6Gray, boom6Light);
20002b58:	4b43      	ldr	r3, [pc, #268]	; (20002c68 <init_boom+0x284>)
20002b5a:	6819      	ldr	r1, [r3, #0]
20002b5c:	4b43      	ldr	r3, [pc, #268]	; (20002c6c <init_boom+0x288>)
20002b5e:	681a      	ldr	r2, [r3, #0]
20002b60:	4b43      	ldr	r3, [pc, #268]	; (20002c70 <init_boom+0x28c>)
20002b62:	681b      	ldr	r3, [r3, #0]
20002b64:	4848      	ldr	r0, [pc, #288]	; (20002c88 <init_boom+0x2a4>)
20002b66:	f000 ffbb 	bl	20003ae0 <load_image>
		load_image(&boomImages[11], boom6Black, boom6Gray, boom6Light);
20002b6a:	4b3f      	ldr	r3, [pc, #252]	; (20002c68 <init_boom+0x284>)
20002b6c:	6819      	ldr	r1, [r3, #0]
20002b6e:	4b3f      	ldr	r3, [pc, #252]	; (20002c6c <init_boom+0x288>)
20002b70:	681a      	ldr	r2, [r3, #0]
20002b72:	4b3f      	ldr	r3, [pc, #252]	; (20002c70 <init_boom+0x28c>)
20002b74:	681b      	ldr	r3, [r3, #0]
20002b76:	4845      	ldr	r0, [pc, #276]	; (20002c8c <init_boom+0x2a8>)
20002b78:	f000 ffb2 	bl	20003ae0 <load_image>
		load_image(&boomImages[12], boom6Black, boom6Gray, boom6Light);
20002b7c:	4b3a      	ldr	r3, [pc, #232]	; (20002c68 <init_boom+0x284>)
20002b7e:	6819      	ldr	r1, [r3, #0]
20002b80:	4b3a      	ldr	r3, [pc, #232]	; (20002c6c <init_boom+0x288>)
20002b82:	681a      	ldr	r2, [r3, #0]
20002b84:	4b3a      	ldr	r3, [pc, #232]	; (20002c70 <init_boom+0x28c>)
20002b86:	681b      	ldr	r3, [r3, #0]
20002b88:	4841      	ldr	r0, [pc, #260]	; (20002c90 <init_boom+0x2ac>)
20002b8a:	f000 ffa9 	bl	20003ae0 <load_image>
		load_image(&boomImages[13], boom6Black, boom6Gray, boom6Light);
20002b8e:	4b36      	ldr	r3, [pc, #216]	; (20002c68 <init_boom+0x284>)
20002b90:	6819      	ldr	r1, [r3, #0]
20002b92:	4b36      	ldr	r3, [pc, #216]	; (20002c6c <init_boom+0x288>)
20002b94:	681a      	ldr	r2, [r3, #0]
20002b96:	4b36      	ldr	r3, [pc, #216]	; (20002c70 <init_boom+0x28c>)
20002b98:	681b      	ldr	r3, [r3, #0]
20002b9a:	483e      	ldr	r0, [pc, #248]	; (20002c94 <init_boom+0x2b0>)
20002b9c:	f000 ffa0 	bl	20003ae0 <load_image>
		load_image(&boomImages[14], boom6Black, boom6Gray, boom6Light);
20002ba0:	4b31      	ldr	r3, [pc, #196]	; (20002c68 <init_boom+0x284>)
20002ba2:	6819      	ldr	r1, [r3, #0]
20002ba4:	4b31      	ldr	r3, [pc, #196]	; (20002c6c <init_boom+0x288>)
20002ba6:	681a      	ldr	r2, [r3, #0]
20002ba8:	4b31      	ldr	r3, [pc, #196]	; (20002c70 <init_boom+0x28c>)
20002baa:	681b      	ldr	r3, [r3, #0]
20002bac:	483a      	ldr	r0, [pc, #232]	; (20002c98 <init_boom+0x2b4>)
20002bae:	f000 ff97 	bl	20003ae0 <load_image>
	}
	
	boomObj->images = boomImages;
20002bb2:	687b      	ldr	r3, [r7, #4]
20002bb4:	4a09      	ldr	r2, [pc, #36]	; (20002bdc <init_boom+0x1f8>)
20002bb6:	601a      	str	r2, [r3, #0]

	boomObj->current_frame = 0;
20002bb8:	687b      	ldr	r3, [r7, #4]
20002bba:	2200      	movs	r2, #0
20002bbc:	615a      	str	r2, [r3, #20]
	boomObj->n_frames = 15;
20002bbe:	687b      	ldr	r3, [r7, #4]
20002bc0:	220f      	movs	r2, #15
20002bc2:	619a      	str	r2, [r3, #24]
	boomObj->animation_speed = 1;
20002bc4:	687b      	ldr	r3, [r7, #4]
20002bc6:	2201      	movs	r2, #1
20002bc8:	61da      	str	r2, [r3, #28]
	boomObj->animation_counter = 0;
20002bca:	687b      	ldr	r3, [r7, #4]
20002bcc:	2200      	movs	r2, #0
20002bce:	621a      	str	r2, [r3, #32]
}
20002bd0:	46c0      	nop			; (mov r8, r8)
20002bd2:	46bd      	mov	sp, r7
20002bd4:	b003      	add	sp, #12
20002bd6:	bd90      	pop	{r4, r7, pc}
20002bd8:	2000cc70 	andcs	ip, r0, r0, ror ip
20002bdc:	20004ff0 	strdcs	r4, [r0], -r0
20002be0:	20005120 	andcs	r5, r0, r0, lsr #2
20002be4:	20004f48 	andcs	r4, r0, r8, asr #30
20002be8:	20005138 	andcs	r5, r0, r8, lsr r1
20002bec:	20004f3c 	andcs	r4, r0, ip, lsr pc
20002bf0:	20004f80 	andcs	r4, r0, r0, lsl #31
20002bf4:	20004fc4 	andcs	r4, r0, r4, asr #31
20002bf8:	2000512c 	andcs	r5, r0, ip, lsr #2
20002bfc:	20004f74 	andcs	r4, r0, r4, ror pc
20002c00:	20004f1c 	andcs	r4, r0, ip, lsl pc
20002c04:	20004f5c 	andcs	r4, r0, ip, asr pc
20002c08:	20005114 	andcs	r5, r0, r4, lsl r1
20002c0c:	20004f28 	andcs	r4, r0, r8, lsr #30
20002c10:	20004fe0 	andcs	r4, r0, r0, ror #31
20002c14:	20004f68 	andcs	r4, r0, r8, ror #30
20002c18:	20005178 	andcs	r5, r0, r8, ror r1
20002c1c:	200050d4 	ldrdcs	r5, [r0], -r4
20002c20:	20005110 	andcs	r5, r0, r0, lsl r1
20002c24:	20005174 	andcs	r5, r0, r4, ror r1
20002c28:	20005184 	andcs	r5, r0, r4, lsl #3
20002c2c:	200050d0 	ldrdcs	r5, [r0], -r0
20002c30:	20005188 	andcs	r5, r0, r8, lsl #3
20002c34:	20004ffc 	strdcs	r4, [r0], -ip
20002c38:	20004f38 	andcs	r4, r0, r8, lsr pc
20002c3c:	20004f8c 	andcs	r4, r0, ip, lsl #31
20002c40:	20004f34 	andcs	r4, r0, r4, lsr pc
20002c44:	20005008 	andcs	r5, r0, r8
20002c48:	200050b4 	strhcs	r5, [r0], -r4
20002c4c:	20005108 	andcs	r5, r0, r8, lsl #2
20002c50:	20004f58 	andcs	r4, r0, r8, asr pc
20002c54:	20005014 	andcs	r5, r0, r4, lsl r0
20002c58:	20004f54 	andcs	r4, r0, r4, asr pc
20002c5c:	20004f9c 	mulcs	r0, ip, pc	; <UNPREDICTABLE>
20002c60:	2000510c 	andcs	r5, r0, ip, lsl #2
20002c64:	20005020 	andcs	r5, r0, r0, lsr #32
20002c68:	200050a4 	andcs	r5, r0, r4, lsr #1
20002c6c:	20004fdc 	ldrdcs	r4, [r0], -ip
20002c70:	20004fec 	andcs	r4, r0, ip, ror #31
20002c74:	2000502c 	andcs	r5, r0, ip, lsr #32
20002c78:	20005038 	andcs	r5, r0, r8, lsr r0
20002c7c:	20005044 	andcs	r5, r0, r4, asr #32
20002c80:	20005050 	andcs	r5, r0, r0, asr r0
20002c84:	2000505c 	andcs	r5, r0, ip, asr r0
20002c88:	20005068 	andcs	r5, r0, r8, rrx
20002c8c:	20005074 	andcs	r5, r0, r4, ror r0
20002c90:	20005080 	andcs	r5, r0, r0, lsl #1
20002c94:	2000508c 	andcs	r5, r0, ip, lsl #1
20002c98:	20005098 	mulcs	r0, r8, r0

20002c9c <delay_250ns>:
#include "graphics.h"


void delay_250ns(void){
20002c9c:	b580      	push	{r7, lr}
20002c9e:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
20002ca0:	4b0c      	ldr	r3, [pc, #48]	; (20002cd4 <delay_250ns+0x38>)
20002ca2:	2200      	movs	r2, #0
20002ca4:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/4) -1);
20002ca6:	4b0c      	ldr	r3, [pc, #48]	; (20002cd8 <delay_250ns+0x3c>)
20002ca8:	2229      	movs	r2, #41	; 0x29
20002caa:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20002cac:	4b0b      	ldr	r3, [pc, #44]	; (20002cdc <delay_250ns+0x40>)
20002cae:	2200      	movs	r2, #0
20002cb0:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20002cb2:	4b08      	ldr	r3, [pc, #32]	; (20002cd4 <delay_250ns+0x38>)
20002cb4:	2205      	movs	r2, #5
20002cb6:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
20002cb8:	46c0      	nop			; (mov r8, r8)
20002cba:	4b06      	ldr	r3, [pc, #24]	; (20002cd4 <delay_250ns+0x38>)
20002cbc:	681a      	ldr	r2, [r3, #0]
20002cbe:	2380      	movs	r3, #128	; 0x80
20002cc0:	025b      	lsls	r3, r3, #9
20002cc2:	4013      	ands	r3, r2
20002cc4:	d0f9      	beq.n	20002cba <delay_250ns+0x1e>
	*STK_CTRL = 0;
20002cc6:	4b03      	ldr	r3, [pc, #12]	; (20002cd4 <delay_250ns+0x38>)
20002cc8:	2200      	movs	r2, #0
20002cca:	601a      	str	r2, [r3, #0]
}
20002ccc:	46c0      	nop			; (mov r8, r8)
20002cce:	46bd      	mov	sp, r7
20002cd0:	bd80      	pop	{r7, pc}
20002cd2:	46c0      	nop			; (mov r8, r8)
20002cd4:	e000e010 	and	lr, r0, r0, lsl r0
20002cd8:	e000e014 	and	lr, r0, r4, lsl r0
20002cdc:	e000e018 	and	lr, r0, r8, lsl r0

20002ce0 <delay_500ns>:

void delay_500ns(void){
20002ce0:	b580      	push	{r7, lr}
20002ce2:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
20002ce4:	4b0c      	ldr	r3, [pc, #48]	; (20002d18 <delay_500ns+0x38>)
20002ce6:	2200      	movs	r2, #0
20002ce8:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/2) -1);
20002cea:	4b0c      	ldr	r3, [pc, #48]	; (20002d1c <delay_500ns+0x3c>)
20002cec:	2253      	movs	r2, #83	; 0x53
20002cee:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20002cf0:	4b0b      	ldr	r3, [pc, #44]	; (20002d20 <delay_500ns+0x40>)
20002cf2:	2200      	movs	r2, #0
20002cf4:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20002cf6:	4b08      	ldr	r3, [pc, #32]	; (20002d18 <delay_500ns+0x38>)
20002cf8:	2205      	movs	r2, #5
20002cfa:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000)== 0 ){}
20002cfc:	46c0      	nop			; (mov r8, r8)
20002cfe:	4b06      	ldr	r3, [pc, #24]	; (20002d18 <delay_500ns+0x38>)
20002d00:	681a      	ldr	r2, [r3, #0]
20002d02:	2380      	movs	r3, #128	; 0x80
20002d04:	025b      	lsls	r3, r3, #9
20002d06:	4013      	ands	r3, r2
20002d08:	d0f9      	beq.n	20002cfe <delay_500ns+0x1e>
	*STK_CTRL = 0;
20002d0a:	4b03      	ldr	r3, [pc, #12]	; (20002d18 <delay_500ns+0x38>)
20002d0c:	2200      	movs	r2, #0
20002d0e:	601a      	str	r2, [r3, #0]
}
20002d10:	46c0      	nop			; (mov r8, r8)
20002d12:	46bd      	mov	sp, r7
20002d14:	bd80      	pop	{r7, pc}
20002d16:	46c0      	nop			; (mov r8, r8)
20002d18:	e000e010 	and	lr, r0, r0, lsl r0
20002d1c:	e000e014 	and	lr, r0, r4, lsl r0
20002d20:	e000e018 	and	lr, r0, r8, lsl r0

20002d24 <delay_micro>:

void delay_micro(unsigned int us){
20002d24:	b580      	push	{r7, lr}
20002d26:	b082      	sub	sp, #8
20002d28:	af00      	add	r7, sp, #0
20002d2a:	6078      	str	r0, [r7, #4]
	while(us--) {
20002d2c:	e007      	b.n	20002d3e <delay_micro+0x1a>
		delay_250ns();
20002d2e:	f7ff ffb5 	bl	20002c9c <delay_250ns>
		delay_250ns();
20002d32:	f7ff ffb3 	bl	20002c9c <delay_250ns>
		delay_250ns();
20002d36:	f7ff ffb1 	bl	20002c9c <delay_250ns>
		delay_250ns();
20002d3a:	f7ff ffaf 	bl	20002c9c <delay_250ns>
	while(us--) {
20002d3e:	687b      	ldr	r3, [r7, #4]
20002d40:	1e5a      	subs	r2, r3, #1
20002d42:	607a      	str	r2, [r7, #4]
20002d44:	2b00      	cmp	r3, #0
20002d46:	d1f2      	bne.n	20002d2e <delay_micro+0xa>
	}
}
20002d48:	46c0      	nop			; (mov r8, r8)
20002d4a:	46bd      	mov	sp, r7
20002d4c:	b002      	add	sp, #8
20002d4e:	bd80      	pop	{r7, pc}

20002d50 <delay_milli>:

void delay_milli(unsigned int ms){
20002d50:	b580      	push	{r7, lr}
20002d52:	b082      	sub	sp, #8
20002d54:	af00      	add	r7, sp, #0
20002d56:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		while(ms--)
			delay_micro(1);
	#else
		while(ms--)
20002d58:	e004      	b.n	20002d64 <delay_milli+0x14>
			delay_micro(1000);
20002d5a:	23fa      	movs	r3, #250	; 0xfa
20002d5c:	009b      	lsls	r3, r3, #2
20002d5e:	0018      	movs	r0, r3
20002d60:	f7ff ffe0 	bl	20002d24 <delay_micro>
		while(ms--)
20002d64:	687b      	ldr	r3, [r7, #4]
20002d66:	1e5a      	subs	r2, r3, #1
20002d68:	607a      	str	r2, [r7, #4]
20002d6a:	2b00      	cmp	r3, #0
20002d6c:	d1f5      	bne.n	20002d5a <delay_milli+0xa>
	#endif
}
20002d6e:	46c0      	nop			; (mov r8, r8)
20002d70:	46bd      	mov	sp, r7
20002d72:	b002      	add	sp, #8
20002d74:	bd80      	pop	{r7, pc}

20002d76 <clear_thisBackBuffer>:
uint8_t draw_buffer_black_light[1024]; // 128 * 64 / 8
uint8_t draw_buffer_black_gray_light[1024]; // 128 * 64 / 8
uint8_t backBuffer[1024]; // 128 * 64 / 8
uint8_t backBufferGray[1024]; // 128 * 64 / 8
uint8_t backBufferLight[1024]; // 128 * 64 / 8
void clear_thisBackBuffer(uint8_t *buffer) {
20002d76:	b580      	push	{r7, lr}
20002d78:	b084      	sub	sp, #16
20002d7a:	af00      	add	r7, sp, #0
20002d7c:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < 1024; i++)
20002d7e:	2300      	movs	r3, #0
20002d80:	60fb      	str	r3, [r7, #12]
20002d82:	e007      	b.n	20002d94 <clear_thisBackBuffer+0x1e>
		buffer[i] = 0;
20002d84:	68fb      	ldr	r3, [r7, #12]
20002d86:	687a      	ldr	r2, [r7, #4]
20002d88:	18d3      	adds	r3, r2, r3
20002d8a:	2200      	movs	r2, #0
20002d8c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 1024; i++)
20002d8e:	68fb      	ldr	r3, [r7, #12]
20002d90:	3301      	adds	r3, #1
20002d92:	60fb      	str	r3, [r7, #12]
20002d94:	68fb      	ldr	r3, [r7, #12]
20002d96:	4a03      	ldr	r2, [pc, #12]	; (20002da4 <clear_thisBackBuffer+0x2e>)
20002d98:	4293      	cmp	r3, r2
20002d9a:	ddf3      	ble.n	20002d84 <clear_thisBackBuffer+0xe>
}
20002d9c:	46c0      	nop			; (mov r8, r8)
20002d9e:	46bd      	mov	sp, r7
20002da0:	b004      	add	sp, #16
20002da2:	bd80      	pop	{r7, pc}
20002da4:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20002da8 <clear_backBuffer>:
void clear_backBuffer() {
20002da8:	b580      	push	{r7, lr}
20002daa:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
20002dac:	4b03      	ldr	r3, [pc, #12]	; (20002dbc <clear_backBuffer+0x14>)
20002dae:	0018      	movs	r0, r3
20002db0:	f7ff ffe1 	bl	20002d76 <clear_thisBackBuffer>
}
20002db4:	46c0      	nop			; (mov r8, r8)
20002db6:	46bd      	mov	sp, r7
20002db8:	bd80      	pop	{r7, pc}
20002dba:	46c0      	nop			; (mov r8, r8)
20002dbc:	20005998 	mulcs	r0, r8, r9

20002dc0 <clear_all_backBuffers>:
void clear_all_backBuffers() {
20002dc0:	b580      	push	{r7, lr}
20002dc2:	af00      	add	r7, sp, #0
	clear_thisBackBuffer(backBuffer);
20002dc4:	4b07      	ldr	r3, [pc, #28]	; (20002de4 <clear_all_backBuffers+0x24>)
20002dc6:	0018      	movs	r0, r3
20002dc8:	f7ff ffd5 	bl	20002d76 <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferGray);
20002dcc:	4b06      	ldr	r3, [pc, #24]	; (20002de8 <clear_all_backBuffers+0x28>)
20002dce:	0018      	movs	r0, r3
20002dd0:	f7ff ffd1 	bl	20002d76 <clear_thisBackBuffer>
	clear_thisBackBuffer(backBufferLight);
20002dd4:	4b05      	ldr	r3, [pc, #20]	; (20002dec <clear_all_backBuffers+0x2c>)
20002dd6:	0018      	movs	r0, r3
20002dd8:	f7ff ffcd 	bl	20002d76 <clear_thisBackBuffer>
}
20002ddc:	46c0      	nop			; (mov r8, r8)
20002dde:	46bd      	mov	sp, r7
20002de0:	bd80      	pop	{r7, pc}
20002de2:	46c0      	nop			; (mov r8, r8)
20002de4:	20005998 	mulcs	r0, r8, r9
20002de8:	20005198 	mulcs	r0, r8, r1
20002dec:	20006998 	mulcs	r0, r8, r9

20002df0 <graphic_ctrl_bit_set>:

/* välj grafik-display och ettställ de bitar som är 1 i x */
static void graphic_ctrl_bit_set( uint8_t x) {
20002df0:	b580      	push	{r7, lr}
20002df2:	b084      	sub	sp, #16
20002df4:	af00      	add	r7, sp, #0
20002df6:	0002      	movs	r2, r0
20002df8:	1dfb      	adds	r3, r7, #7
20002dfa:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
20002dfc:	4a0f      	ldr	r2, [pc, #60]	; (20002e3c <graphic_ctrl_bit_set+0x4c>)
20002dfe:	230f      	movs	r3, #15
20002e00:	18fb      	adds	r3, r7, r3
20002e02:	7812      	ldrb	r2, [r2, #0]
20002e04:	701a      	strb	r2, [r3, #0]
	c |= x;
20002e06:	230f      	movs	r3, #15
20002e08:	18fb      	adds	r3, r7, r3
20002e0a:	220f      	movs	r2, #15
20002e0c:	18b9      	adds	r1, r7, r2
20002e0e:	1dfa      	adds	r2, r7, #7
20002e10:	7809      	ldrb	r1, [r1, #0]
20002e12:	7812      	ldrb	r2, [r2, #0]
20002e14:	430a      	orrs	r2, r1
20002e16:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
20002e18:	230f      	movs	r3, #15
20002e1a:	18fb      	adds	r3, r7, r3
20002e1c:	220f      	movs	r2, #15
20002e1e:	18ba      	adds	r2, r7, r2
20002e20:	7812      	ldrb	r2, [r2, #0]
20002e22:	2104      	movs	r1, #4
20002e24:	438a      	bics	r2, r1
20002e26:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20002e28:	4a04      	ldr	r2, [pc, #16]	; (20002e3c <graphic_ctrl_bit_set+0x4c>)
20002e2a:	230f      	movs	r3, #15
20002e2c:	18fb      	adds	r3, r7, r3
20002e2e:	781b      	ldrb	r3, [r3, #0]
20002e30:	7013      	strb	r3, [r2, #0]
}
20002e32:	46c0      	nop			; (mov r8, r8)
20002e34:	46bd      	mov	sp, r7
20002e36:	b004      	add	sp, #16
20002e38:	bd80      	pop	{r7, pc}
20002e3a:	46c0      	nop			; (mov r8, r8)
20002e3c:	40021014 	andmi	r1, r2, r4, lsl r0

20002e40 <graphic_ctrl_bit_clear>:
/* välj grafik-display och nollställ de bitar som är 1 i x */
static void graphic_ctrl_bit_clear( uint8_t x) {
20002e40:	b580      	push	{r7, lr}
20002e42:	b084      	sub	sp, #16
20002e44:	af00      	add	r7, sp, #0
20002e46:	0002      	movs	r2, r0
20002e48:	1dfb      	adds	r3, r7, #7
20002e4a:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *portOdrLow;
20002e4c:	4a11      	ldr	r2, [pc, #68]	; (20002e94 <graphic_ctrl_bit_clear+0x54>)
20002e4e:	230f      	movs	r3, #15
20002e50:	18fb      	adds	r3, r7, r3
20002e52:	7812      	ldrb	r2, [r2, #0]
20002e54:	701a      	strb	r2, [r3, #0]
	c &= ~x;
20002e56:	1dfb      	adds	r3, r7, #7
20002e58:	781b      	ldrb	r3, [r3, #0]
20002e5a:	b25b      	sxtb	r3, r3
20002e5c:	43db      	mvns	r3, r3
20002e5e:	b25b      	sxtb	r3, r3
20002e60:	220f      	movs	r2, #15
20002e62:	18ba      	adds	r2, r7, r2
20002e64:	7812      	ldrb	r2, [r2, #0]
20002e66:	b252      	sxtb	r2, r2
20002e68:	4013      	ands	r3, r2
20002e6a:	b25a      	sxtb	r2, r3
20002e6c:	230f      	movs	r3, #15
20002e6e:	18fb      	adds	r3, r7, r3
20002e70:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT; //Graphic display istället för alphanum
20002e72:	230f      	movs	r3, #15
20002e74:	18fb      	adds	r3, r7, r3
20002e76:	220f      	movs	r2, #15
20002e78:	18ba      	adds	r2, r7, r2
20002e7a:	7812      	ldrb	r2, [r2, #0]
20002e7c:	2104      	movs	r1, #4
20002e7e:	438a      	bics	r2, r1
20002e80:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20002e82:	4a04      	ldr	r2, [pc, #16]	; (20002e94 <graphic_ctrl_bit_clear+0x54>)
20002e84:	230f      	movs	r3, #15
20002e86:	18fb      	adds	r3, r7, r3
20002e88:	781b      	ldrb	r3, [r3, #0]
20002e8a:	7013      	strb	r3, [r2, #0]
}
20002e8c:	46c0      	nop			; (mov r8, r8)
20002e8e:	46bd      	mov	sp, r7
20002e90:	b004      	add	sp, #16
20002e92:	bd80      	pop	{r7, pc}
20002e94:	40021014 	andmi	r1, r2, r4, lsl r0

20002e98 <select_controller>:
void select_controller( uint8_t controller) {
20002e98:	b580      	push	{r7, lr}
20002e9a:	b082      	sub	sp, #8
20002e9c:	af00      	add	r7, sp, #0
20002e9e:	0002      	movs	r2, r0
20002ea0:	1dfb      	adds	r3, r7, #7
20002ea2:	701a      	strb	r2, [r3, #0]
	switch (controller) {
20002ea4:	1dfb      	adds	r3, r7, #7
20002ea6:	781b      	ldrb	r3, [r3, #0]
20002ea8:	2b08      	cmp	r3, #8
20002eaa:	d00f      	beq.n	20002ecc <select_controller+0x34>
20002eac:	dc02      	bgt.n	20002eb4 <select_controller+0x1c>
20002eae:	2b00      	cmp	r3, #0
20002eb0:	d005      	beq.n	20002ebe <select_controller+0x26>
		case (B_CS1|B_CS2): 
			graphic_ctrl_bit_set(B_CS1); 
			graphic_ctrl_bit_set(B_CS2); 
			break;
	}
}
20002eb2:	e020      	b.n	20002ef6 <select_controller+0x5e>
	switch (controller) {
20002eb4:	2b10      	cmp	r3, #16
20002eb6:	d010      	beq.n	20002eda <select_controller+0x42>
20002eb8:	2b18      	cmp	r3, #24
20002eba:	d015      	beq.n	20002ee8 <select_controller+0x50>
}
20002ebc:	e01b      	b.n	20002ef6 <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
20002ebe:	2008      	movs	r0, #8
20002ec0:	f7ff ffbe 	bl	20002e40 <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_clear(B_CS2); 
20002ec4:	2010      	movs	r0, #16
20002ec6:	f7ff ffbb 	bl	20002e40 <graphic_ctrl_bit_clear>
			break;
20002eca:	e014      	b.n	20002ef6 <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
20002ecc:	2008      	movs	r0, #8
20002ece:	f7ff ff8f 	bl	20002df0 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS2); 
20002ed2:	2010      	movs	r0, #16
20002ed4:	f7ff ffb4 	bl	20002e40 <graphic_ctrl_bit_clear>
			break;
20002ed8:	e00d      	b.n	20002ef6 <select_controller+0x5e>
			graphic_ctrl_bit_clear(B_CS1); 
20002eda:	2008      	movs	r0, #8
20002edc:	f7ff ffb0 	bl	20002e40 <graphic_ctrl_bit_clear>
			graphic_ctrl_bit_set(B_CS2); 
20002ee0:	2010      	movs	r0, #16
20002ee2:	f7ff ff85 	bl	20002df0 <graphic_ctrl_bit_set>
			break;
20002ee6:	e006      	b.n	20002ef6 <select_controller+0x5e>
			graphic_ctrl_bit_set(B_CS1); 
20002ee8:	2008      	movs	r0, #8
20002eea:	f7ff ff81 	bl	20002df0 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_set(B_CS2); 
20002eee:	2010      	movs	r0, #16
20002ef0:	f7ff ff7e 	bl	20002df0 <graphic_ctrl_bit_set>
			break;
20002ef4:	46c0      	nop			; (mov r8, r8)
}
20002ef6:	46c0      	nop			; (mov r8, r8)
20002ef8:	46bd      	mov	sp, r7
20002efa:	b002      	add	sp, #8
20002efc:	bd80      	pop	{r7, pc}

20002efe <graphic_wait_ready>:

void graphic_wait_ready( void ) {
20002efe:	b580      	push	{r7, lr}
20002f00:	b082      	sub	sp, #8
20002f02:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
20002f04:	2040      	movs	r0, #64	; 0x40
20002f06:	f7ff ff9b 	bl	20002e40 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
20002f0a:	4b14      	ldr	r3, [pc, #80]	; (20002f5c <graphic_wait_ready+0x5e>)
20002f0c:	4a14      	ldr	r2, [pc, #80]	; (20002f60 <graphic_wait_ready+0x62>)
20002f0e:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
20002f10:	2001      	movs	r0, #1
20002f12:	f7ff ff95 	bl	20002e40 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
20002f16:	2002      	movs	r0, #2
20002f18:	f7ff ff6a 	bl	20002df0 <graphic_ctrl_bit_set>
	delay_500ns();
20002f1c:	f7ff fee0 	bl	20002ce0 <delay_500ns>
	
	while(1) {
		graphic_ctrl_bit_set(B_E);
20002f20:	2040      	movs	r0, #64	; 0x40
20002f22:	f7ff ff65 	bl	20002df0 <graphic_ctrl_bit_set>
		delay_500ns();
20002f26:	f7ff fedb 	bl	20002ce0 <delay_500ns>
		c = *portIdrHigh & LCD_BUSY; //...
20002f2a:	4b0e      	ldr	r3, [pc, #56]	; (20002f64 <graphic_wait_ready+0x66>)
20002f2c:	781b      	ldrb	r3, [r3, #0]
20002f2e:	b2da      	uxtb	r2, r3
20002f30:	1dfb      	adds	r3, r7, #7
20002f32:	217f      	movs	r1, #127	; 0x7f
20002f34:	438a      	bics	r2, r1
20002f36:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
20002f38:	2040      	movs	r0, #64	; 0x40
20002f3a:	f7ff ff81 	bl	20002e40 <graphic_ctrl_bit_clear>
		delay_500ns();
20002f3e:	f7ff fecf 	bl	20002ce0 <delay_500ns>
		/*if (*portIdrHigh & 0x80 == 0x80) {
			break; }*/
		if (c == 0) break;
20002f42:	1dfb      	adds	r3, r7, #7
20002f44:	781b      	ldrb	r3, [r3, #0]
20002f46:	2b00      	cmp	r3, #0
20002f48:	d000      	beq.n	20002f4c <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
20002f4a:	e7e9      	b.n	20002f20 <graphic_wait_ready+0x22>
		if (c == 0) break;
20002f4c:	46c0      	nop			; (mov r8, r8)
	}
	//graphic_ctrl_bit_set(B_E); //<--
	*portModer = 0x55555555;	
20002f4e:	4b03      	ldr	r3, [pc, #12]	; (20002f5c <graphic_wait_ready+0x5e>)
20002f50:	4a05      	ldr	r2, [pc, #20]	; (20002f68 <graphic_wait_ready+0x6a>)
20002f52:	601a      	str	r2, [r3, #0]
}
20002f54:	46c0      	nop			; (mov r8, r8)
20002f56:	46bd      	mov	sp, r7
20002f58:	b002      	add	sp, #8
20002f5a:	bd80      	pop	{r7, pc}
20002f5c:	40021000 	andmi	r1, r2, r0
20002f60:	00005555 	andeq	r5, r0, r5, asr r5
20002f64:	40021011 	andmi	r1, r2, r1, lsl r0
20002f68:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20002f6c <graphic_read>:

static uint8_t graphic_read(uint8_t controller) {
20002f6c:	b580      	push	{r7, lr}
20002f6e:	b084      	sub	sp, #16
20002f70:	af00      	add	r7, sp, #0
20002f72:	0002      	movs	r2, r0
20002f74:	1dfb      	adds	r3, r7, #7
20002f76:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20002f78:	2040      	movs	r0, #64	; 0x40
20002f7a:	f7ff ff61 	bl	20002e40 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
20002f7e:	4b1c      	ldr	r3, [pc, #112]	; (20002ff0 <graphic_read+0x84>)
20002f80:	4a1c      	ldr	r2, [pc, #112]	; (20002ff4 <graphic_read+0x88>)
20002f82:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS);
20002f84:	2001      	movs	r0, #1
20002f86:	f7ff ff33 	bl	20002df0 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_set(B_RW);
20002f8a:	2002      	movs	r0, #2
20002f8c:	f7ff ff30 	bl	20002df0 <graphic_ctrl_bit_set>
	select_controller(controller);
20002f90:	1dfb      	adds	r3, r7, #7
20002f92:	781b      	ldrb	r3, [r3, #0]
20002f94:	0018      	movs	r0, r3
20002f96:	f7ff ff7f 	bl	20002e98 <select_controller>
	delay_500ns();
20002f9a:	f7ff fea1 	bl	20002ce0 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20002f9e:	2040      	movs	r0, #64	; 0x40
20002fa0:	f7ff ff26 	bl	20002df0 <graphic_ctrl_bit_set>
	delay_500ns();
20002fa4:	f7ff fe9c 	bl	20002ce0 <delay_500ns>
	unsigned char rv = *portIdrHigh;
20002fa8:	4a13      	ldr	r2, [pc, #76]	; (20002ff8 <graphic_read+0x8c>)
20002faa:	230f      	movs	r3, #15
20002fac:	18fb      	adds	r3, r7, r3
20002fae:	7812      	ldrb	r2, [r2, #0]
20002fb0:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20002fb2:	2040      	movs	r0, #64	; 0x40
20002fb4:	f7ff ff44 	bl	20002e40 <graphic_ctrl_bit_clear>
	*portModer = 0x55555555;
20002fb8:	4b0d      	ldr	r3, [pc, #52]	; (20002ff0 <graphic_read+0x84>)
20002fba:	4a10      	ldr	r2, [pc, #64]	; (20002ffc <graphic_read+0x90>)
20002fbc:	601a      	str	r2, [r3, #0]
	
	if(controller == B_CS1) {
20002fbe:	1dfb      	adds	r3, r7, #7
20002fc0:	781b      	ldrb	r3, [r3, #0]
20002fc2:	2b08      	cmp	r3, #8
20002fc4:	d104      	bne.n	20002fd0 <graphic_read+0x64>
		select_controller(B_CS1);
20002fc6:	2008      	movs	r0, #8
20002fc8:	f7ff ff66 	bl	20002e98 <select_controller>
		graphic_wait_ready();
20002fcc:	f7ff ff97 	bl	20002efe <graphic_wait_ready>
	}
	if(controller == B_CS2) {
20002fd0:	1dfb      	adds	r3, r7, #7
20002fd2:	781b      	ldrb	r3, [r3, #0]
20002fd4:	2b10      	cmp	r3, #16
20002fd6:	d104      	bne.n	20002fe2 <graphic_read+0x76>
		select_controller(B_CS2);
20002fd8:	2010      	movs	r0, #16
20002fda:	f7ff ff5d 	bl	20002e98 <select_controller>
		graphic_wait_ready();
20002fde:	f7ff ff8e 	bl	20002efe <graphic_wait_ready>
	}
	
	return rv;
20002fe2:	230f      	movs	r3, #15
20002fe4:	18fb      	adds	r3, r7, r3
20002fe6:	781b      	ldrb	r3, [r3, #0]
}
20002fe8:	0018      	movs	r0, r3
20002fea:	46bd      	mov	sp, r7
20002fec:	b004      	add	sp, #16
20002fee:	bd80      	pop	{r7, pc}
20002ff0:	40021000 	andmi	r1, r2, r0
20002ff4:	00005555 	andeq	r5, r0, r5, asr r5
20002ff8:	40021011 	andmi	r1, r2, r1, lsl r0
20002ffc:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20003000 <graphic_read_data>:

graphic_read_data(uint8_t controller) {
20003000:	b580      	push	{r7, lr}
20003002:	b082      	sub	sp, #8
20003004:	af00      	add	r7, sp, #0
20003006:	0002      	movs	r2, r0
20003008:	1dfb      	adds	r3, r7, #7
2000300a:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
2000300c:	1dfb      	adds	r3, r7, #7
2000300e:	781b      	ldrb	r3, [r3, #0]
20003010:	0018      	movs	r0, r3
20003012:	f7ff ffab 	bl	20002f6c <graphic_read>
	graphic_read(controller);
20003016:	1dfb      	adds	r3, r7, #7
20003018:	781b      	ldrb	r3, [r3, #0]
2000301a:	0018      	movs	r0, r3
2000301c:	f7ff ffa6 	bl	20002f6c <graphic_read>
}
20003020:	46c0      	nop			; (mov r8, r8)
20003022:	0018      	movs	r0, r3
20003024:	46bd      	mov	sp, r7
20003026:	b002      	add	sp, #8
20003028:	bd80      	pop	{r7, pc}

2000302a <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller) {
2000302a:	b580      	push	{r7, lr}
2000302c:	b082      	sub	sp, #8
2000302e:	af00      	add	r7, sp, #0
20003030:	0002      	movs	r2, r0
20003032:	1dfb      	adds	r3, r7, #7
20003034:	701a      	strb	r2, [r3, #0]
20003036:	1dbb      	adds	r3, r7, #6
20003038:	1c0a      	adds	r2, r1, #0
2000303a:	701a      	strb	r2, [r3, #0]
	*portOdrHigh = value; //I
2000303c:	4a19      	ldr	r2, [pc, #100]	; (200030a4 <graphic_write+0x7a>)
2000303e:	1dfb      	adds	r3, r7, #7
20003040:	781b      	ldrb	r3, [r3, #0]
20003042:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
20003044:	1dbb      	adds	r3, r7, #6
20003046:	781b      	ldrb	r3, [r3, #0]
20003048:	0018      	movs	r0, r3
2000304a:	f7ff ff25 	bl	20002e98 <select_controller>
	delay_500ns();
2000304e:	f7ff fe47 	bl	20002ce0 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20003052:	2040      	movs	r0, #64	; 0x40
20003054:	f7ff fecc 	bl	20002df0 <graphic_ctrl_bit_set>
	delay_500ns();
20003058:	f7ff fe42 	bl	20002ce0 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
2000305c:	2040      	movs	r0, #64	; 0x40
2000305e:	f7ff feef 	bl	20002e40 <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1) {
20003062:	1dbb      	adds	r3, r7, #6
20003064:	781b      	ldrb	r3, [r3, #0]
20003066:	2208      	movs	r2, #8
20003068:	4013      	ands	r3, r2
2000306a:	d004      	beq.n	20003076 <graphic_write+0x4c>
		select_controller(B_CS1);
2000306c:	2008      	movs	r0, #8
2000306e:	f7ff ff13 	bl	20002e98 <select_controller>
		graphic_wait_ready();
20003072:	f7ff ff44 	bl	20002efe <graphic_wait_ready>
	}
	if(controller & B_CS2) {
20003076:	1dbb      	adds	r3, r7, #6
20003078:	781b      	ldrb	r3, [r3, #0]
2000307a:	2210      	movs	r2, #16
2000307c:	4013      	ands	r3, r2
2000307e:	d004      	beq.n	2000308a <graphic_write+0x60>
		select_controller(B_CS2);
20003080:	2010      	movs	r0, #16
20003082:	f7ff ff09 	bl	20002e98 <select_controller>
		graphic_wait_ready();
20003086:	f7ff ff3a 	bl	20002efe <graphic_wait_ready>
	}
	
	*portOdrHigh = 0;	//I
2000308a:	4b06      	ldr	r3, [pc, #24]	; (200030a4 <graphic_write+0x7a>)
2000308c:	2200      	movs	r2, #0
2000308e:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
20003090:	2040      	movs	r0, #64	; 0x40
20003092:	f7ff fead 	bl	20002df0 <graphic_ctrl_bit_set>
	select_controller(0);
20003096:	2000      	movs	r0, #0
20003098:	f7ff fefe 	bl	20002e98 <select_controller>
}
2000309c:	46c0      	nop			; (mov r8, r8)
2000309e:	46bd      	mov	sp, r7
200030a0:	b002      	add	sp, #8
200030a2:	bd80      	pop	{r7, pc}
200030a4:	40021015 	andmi	r1, r2, r5, lsl r0

200030a8 <graphic_write_command>:
void graphic_write_command(uint8_t command, uint8_t controller) {
200030a8:	b580      	push	{r7, lr}
200030aa:	b082      	sub	sp, #8
200030ac:	af00      	add	r7, sp, #0
200030ae:	0002      	movs	r2, r0
200030b0:	1dfb      	adds	r3, r7, #7
200030b2:	701a      	strb	r2, [r3, #0]
200030b4:	1dbb      	adds	r3, r7, #6
200030b6:	1c0a      	adds	r2, r1, #0
200030b8:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200030ba:	2040      	movs	r0, #64	; 0x40
200030bc:	f7ff fec0 	bl	20002e40 <graphic_ctrl_bit_clear>
	select_controller(controller);
200030c0:	1dbb      	adds	r3, r7, #6
200030c2:	781b      	ldrb	r3, [r3, #0]
200030c4:	0018      	movs	r0, r3
200030c6:	f7ff fee7 	bl	20002e98 <select_controller>
	graphic_ctrl_bit_clear(B_RS);
200030ca:	2001      	movs	r0, #1
200030cc:	f7ff feb8 	bl	20002e40 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RW);
200030d0:	2002      	movs	r0, #2
200030d2:	f7ff feb5 	bl	20002e40 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
200030d6:	1dbb      	adds	r3, r7, #6
200030d8:	781a      	ldrb	r2, [r3, #0]
200030da:	1dfb      	adds	r3, r7, #7
200030dc:	781b      	ldrb	r3, [r3, #0]
200030de:	0011      	movs	r1, r2
200030e0:	0018      	movs	r0, r3
200030e2:	f7ff ffa2 	bl	2000302a <graphic_write>
}
200030e6:	46c0      	nop			; (mov r8, r8)
200030e8:	46bd      	mov	sp, r7
200030ea:	b002      	add	sp, #8
200030ec:	bd80      	pop	{r7, pc}

200030ee <graphic_write_data>:
void graphic_write_data(uint8_t command, uint8_t controller) {
200030ee:	b580      	push	{r7, lr}
200030f0:	b082      	sub	sp, #8
200030f2:	af00      	add	r7, sp, #0
200030f4:	0002      	movs	r2, r0
200030f6:	1dfb      	adds	r3, r7, #7
200030f8:	701a      	strb	r2, [r3, #0]
200030fa:	1dbb      	adds	r3, r7, #6
200030fc:	1c0a      	adds	r2, r1, #0
200030fe:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20003100:	2040      	movs	r0, #64	; 0x40
20003102:	f7ff fe9d 	bl	20002e40 <graphic_ctrl_bit_clear>
	select_controller(controller);
20003106:	1dbb      	adds	r3, r7, #6
20003108:	781b      	ldrb	r3, [r3, #0]
2000310a:	0018      	movs	r0, r3
2000310c:	f7ff fec4 	bl	20002e98 <select_controller>
	graphic_ctrl_bit_set(B_RS);
20003110:	2001      	movs	r0, #1
20003112:	f7ff fe6d 	bl	20002df0 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20003116:	2002      	movs	r0, #2
20003118:	f7ff fe92 	bl	20002e40 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
2000311c:	1dbb      	adds	r3, r7, #6
2000311e:	781a      	ldrb	r2, [r3, #0]
20003120:	1dfb      	adds	r3, r7, #7
20003122:	781b      	ldrb	r3, [r3, #0]
20003124:	0011      	movs	r1, r2
20003126:	0018      	movs	r0, r3
20003128:	f7ff ff7f 	bl	2000302a <graphic_write>
}
2000312c:	46c0      	nop			; (mov r8, r8)
2000312e:	46bd      	mov	sp, r7
20003130:	b002      	add	sp, #8
20003132:	bd80      	pop	{r7, pc}

20003134 <graphic_initialize>:

void graphic_initialize( void ) {
20003134:	b580      	push	{r7, lr}
20003136:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20003138:	2040      	movs	r0, #64	; 0x40
2000313a:	f7ff fe59 	bl	20002df0 <graphic_ctrl_bit_set>
	delay_micro(10);
2000313e:	200a      	movs	r0, #10
20003140:	f7ff fdf0 	bl	20002d24 <delay_micro>
	
	graphic_ctrl_bit_clear(B_CS1);
20003144:	2008      	movs	r0, #8
20003146:	f7ff fe7b 	bl	20002e40 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_CS2);
2000314a:	2010      	movs	r0, #16
2000314c:	f7ff fe78 	bl	20002e40 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RST);
20003150:	2020      	movs	r0, #32
20003152:	f7ff fe75 	bl	20002e40 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_E);
20003156:	2040      	movs	r0, #64	; 0x40
20003158:	f7ff fe72 	bl	20002e40 <graphic_ctrl_bit_clear>
	//#define SIMULATOR
	delay_milli(30);
2000315c:	201e      	movs	r0, #30
2000315e:	f7ff fdf7 	bl	20002d50 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20003162:	2020      	movs	r0, #32
20003164:	f7ff fe44 	bl	20002df0 <graphic_ctrl_bit_set>
	delay_milli(100); //...
20003168:	2064      	movs	r0, #100	; 0x64
2000316a:	f7ff fdf1 	bl	20002d50 <delay_milli>
	
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
2000316e:	2118      	movs	r1, #24
20003170:	203e      	movs	r0, #62	; 0x3e
20003172:	f7ff ff99 	bl	200030a8 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
20003176:	2118      	movs	r1, #24
20003178:	203f      	movs	r0, #63	; 0x3f
2000317a:	f7ff ff95 	bl	200030a8 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
2000317e:	2118      	movs	r1, #24
20003180:	20c0      	movs	r0, #192	; 0xc0
20003182:	f7ff ff91 	bl	200030a8 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
20003186:	2118      	movs	r1, #24
20003188:	2040      	movs	r0, #64	; 0x40
2000318a:	f7ff ff8d 	bl	200030a8 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
2000318e:	2118      	movs	r1, #24
20003190:	20b8      	movs	r0, #184	; 0xb8
20003192:	f7ff ff89 	bl	200030a8 <graphic_write_command>
	select_controller(0);
20003196:	2000      	movs	r0, #0
20003198:	f7ff fe7e 	bl	20002e98 <select_controller>
}
2000319c:	46c0      	nop			; (mov r8, r8)
2000319e:	46bd      	mov	sp, r7
200031a0:	bd80      	pop	{r7, pc}

200031a2 <graphic_clear_screen>:
void graphic_clear_screen( void ) {	//Annat i slidesen
200031a2:	b580      	push	{r7, lr}
200031a4:	b082      	sub	sp, #8
200031a6:	af00      	add	r7, sp, #0
	uint8_t page;
	for (page = 0; page < 8; page++) {
200031a8:	1dfb      	adds	r3, r7, #7
200031aa:	2200      	movs	r2, #0
200031ac:	701a      	strb	r2, [r3, #0]
200031ae:	e023      	b.n	200031f8 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1|B_CS2);
200031b0:	1dfb      	adds	r3, r7, #7
200031b2:	781b      	ldrb	r3, [r3, #0]
200031b4:	2248      	movs	r2, #72	; 0x48
200031b6:	4252      	negs	r2, r2
200031b8:	4313      	orrs	r3, r2
200031ba:	b2db      	uxtb	r3, r3
200031bc:	2118      	movs	r1, #24
200031be:	0018      	movs	r0, r3
200031c0:	f7ff ff72 	bl	200030a8 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
200031c4:	2118      	movs	r1, #24
200031c6:	2040      	movs	r0, #64	; 0x40
200031c8:	f7ff ff6e 	bl	200030a8 <graphic_write_command>
		uint8_t add;
		for (add = 0; add < 64; add++) {
200031cc:	1dbb      	adds	r3, r7, #6
200031ce:	2200      	movs	r2, #0
200031d0:	701a      	strb	r2, [r3, #0]
200031d2:	e008      	b.n	200031e6 <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1|B_CS2);
200031d4:	2118      	movs	r1, #24
200031d6:	2000      	movs	r0, #0
200031d8:	f7ff ff89 	bl	200030ee <graphic_write_data>
		for (add = 0; add < 64; add++) {
200031dc:	1dbb      	adds	r3, r7, #6
200031de:	781a      	ldrb	r2, [r3, #0]
200031e0:	1dbb      	adds	r3, r7, #6
200031e2:	3201      	adds	r2, #1
200031e4:	701a      	strb	r2, [r3, #0]
200031e6:	1dbb      	adds	r3, r7, #6
200031e8:	781b      	ldrb	r3, [r3, #0]
200031ea:	2b3f      	cmp	r3, #63	; 0x3f
200031ec:	d9f2      	bls.n	200031d4 <graphic_clear_screen+0x32>
	for (page = 0; page < 8; page++) {
200031ee:	1dfb      	adds	r3, r7, #7
200031f0:	781a      	ldrb	r2, [r3, #0]
200031f2:	1dfb      	adds	r3, r7, #7
200031f4:	3201      	adds	r2, #1
200031f6:	701a      	strb	r2, [r3, #0]
200031f8:	1dfb      	adds	r3, r7, #7
200031fa:	781b      	ldrb	r3, [r3, #0]
200031fc:	2b07      	cmp	r3, #7
200031fe:	d9d7      	bls.n	200031b0 <graphic_clear_screen+0xe>
		}
	}
}
20003200:	46c0      	nop			; (mov r8, r8)
20003202:	46bd      	mov	sp, r7
20003204:	b002      	add	sp, #8
20003206:	bd80      	pop	{r7, pc}

20003208 <pixel>:

/** Color: 1=light 2=gray 3=black*/
void pixel(int x, int y, int set, int color) {
20003208:	b580      	push	{r7, lr}
2000320a:	b086      	sub	sp, #24
2000320c:	af00      	add	r7, sp, #0
2000320e:	60f8      	str	r0, [r7, #12]
20003210:	60b9      	str	r1, [r7, #8]
20003212:	607a      	str	r2, [r7, #4]
20003214:	603b      	str	r3, [r7, #0]
	uint8_t mask;
	int index = 0;
20003216:	2300      	movs	r3, #0
20003218:	613b      	str	r3, [r7, #16]
	if( (x > 128 ) || (x < 1) || (y > 64) || (y < 1) ) 
2000321a:	68fb      	ldr	r3, [r7, #12]
2000321c:	2b80      	cmp	r3, #128	; 0x80
2000321e:	dd00      	ble.n	20003222 <pixel+0x1a>
20003220:	e0a6      	b.n	20003370 <pixel+0x168>
20003222:	68fb      	ldr	r3, [r7, #12]
20003224:	2b00      	cmp	r3, #0
20003226:	dc00      	bgt.n	2000322a <pixel+0x22>
20003228:	e0a2      	b.n	20003370 <pixel+0x168>
2000322a:	68bb      	ldr	r3, [r7, #8]
2000322c:	2b40      	cmp	r3, #64	; 0x40
2000322e:	dd00      	ble.n	20003232 <pixel+0x2a>
20003230:	e09e      	b.n	20003370 <pixel+0x168>
20003232:	68bb      	ldr	r3, [r7, #8]
20003234:	2b00      	cmp	r3, #0
20003236:	dc00      	bgt.n	2000323a <pixel+0x32>
20003238:	e09a      	b.n	20003370 <pixel+0x168>
		return;
	mask = 1 << ((y-1)%8);
2000323a:	68bb      	ldr	r3, [r7, #8]
2000323c:	3b01      	subs	r3, #1
2000323e:	4a4e      	ldr	r2, [pc, #312]	; (20003378 <pixel+0x170>)
20003240:	4013      	ands	r3, r2
20003242:	d504      	bpl.n	2000324e <pixel+0x46>
20003244:	3b01      	subs	r3, #1
20003246:	2208      	movs	r2, #8
20003248:	4252      	negs	r2, r2
2000324a:	4313      	orrs	r3, r2
2000324c:	3301      	adds	r3, #1
2000324e:	001a      	movs	r2, r3
20003250:	2301      	movs	r3, #1
20003252:	4093      	lsls	r3, r2
20003254:	001a      	movs	r2, r3
20003256:	2317      	movs	r3, #23
20003258:	18fb      	adds	r3, r7, r3
2000325a:	701a      	strb	r2, [r3, #0]
	if(x > 64) {
2000325c:	68fb      	ldr	r3, [r7, #12]
2000325e:	2b40      	cmp	r3, #64	; 0x40
20003260:	dd05      	ble.n	2000326e <pixel+0x66>
		x -= 65;
20003262:	68fb      	ldr	r3, [r7, #12]
20003264:	3b41      	subs	r3, #65	; 0x41
20003266:	60fb      	str	r3, [r7, #12]
		index = 512;
20003268:	2380      	movs	r3, #128	; 0x80
2000326a:	009b      	lsls	r3, r3, #2
2000326c:	613b      	str	r3, [r7, #16]
	}
	index += x + ((y-1)/8)*64;
2000326e:	68bb      	ldr	r3, [r7, #8]
20003270:	3b01      	subs	r3, #1
20003272:	2b00      	cmp	r3, #0
20003274:	da00      	bge.n	20003278 <pixel+0x70>
20003276:	3307      	adds	r3, #7
20003278:	10db      	asrs	r3, r3, #3
2000327a:	019a      	lsls	r2, r3, #6
2000327c:	68fb      	ldr	r3, [r7, #12]
2000327e:	18d3      	adds	r3, r2, r3
20003280:	693a      	ldr	r2, [r7, #16]
20003282:	18d3      	adds	r3, r2, r3
20003284:	613b      	str	r3, [r7, #16]

	if(set == 0)
20003286:	687b      	ldr	r3, [r7, #4]
20003288:	2b00      	cmp	r3, #0
2000328a:	d106      	bne.n	2000329a <pixel+0x92>
		mask = ~mask;
2000328c:	2317      	movs	r3, #23
2000328e:	18fb      	adds	r3, r7, r3
20003290:	2217      	movs	r2, #23
20003292:	18ba      	adds	r2, r7, r2
20003294:	7812      	ldrb	r2, [r2, #0]
20003296:	43d2      	mvns	r2, r2
20003298:	701a      	strb	r2, [r3, #0]

	switch (color) {
2000329a:	683b      	ldr	r3, [r7, #0]
2000329c:	2b02      	cmp	r3, #2
2000329e:	d024      	beq.n	200032ea <pixel+0xe2>
200032a0:	2b03      	cmp	r3, #3
200032a2:	d043      	beq.n	2000332c <pixel+0x124>
200032a4:	2b01      	cmp	r3, #1
200032a6:	d164      	bne.n	20003372 <pixel+0x16a>
		case 1:	
			if(set)
200032a8:	687b      	ldr	r3, [r7, #4]
200032aa:	2b00      	cmp	r3, #0
200032ac:	d00e      	beq.n	200032cc <pixel+0xc4>
				backBufferLight[index] |= mask;
200032ae:	4a33      	ldr	r2, [pc, #204]	; (2000337c <pixel+0x174>)
200032b0:	693b      	ldr	r3, [r7, #16]
200032b2:	18d3      	adds	r3, r2, r3
200032b4:	781a      	ldrb	r2, [r3, #0]
200032b6:	2317      	movs	r3, #23
200032b8:	18fb      	adds	r3, r7, r3
200032ba:	781b      	ldrb	r3, [r3, #0]
200032bc:	4313      	orrs	r3, r2
200032be:	b2d9      	uxtb	r1, r3
200032c0:	4a2e      	ldr	r2, [pc, #184]	; (2000337c <pixel+0x174>)
200032c2:	693b      	ldr	r3, [r7, #16]
200032c4:	18d3      	adds	r3, r2, r3
200032c6:	1c0a      	adds	r2, r1, #0
200032c8:	701a      	strb	r2, [r3, #0]
			else
				backBufferLight[index] &= mask;
			break;
200032ca:	e052      	b.n	20003372 <pixel+0x16a>
				backBufferLight[index] &= mask;
200032cc:	4a2b      	ldr	r2, [pc, #172]	; (2000337c <pixel+0x174>)
200032ce:	693b      	ldr	r3, [r7, #16]
200032d0:	18d3      	adds	r3, r2, r3
200032d2:	781b      	ldrb	r3, [r3, #0]
200032d4:	2217      	movs	r2, #23
200032d6:	18ba      	adds	r2, r7, r2
200032d8:	7812      	ldrb	r2, [r2, #0]
200032da:	4013      	ands	r3, r2
200032dc:	b2d9      	uxtb	r1, r3
200032de:	4a27      	ldr	r2, [pc, #156]	; (2000337c <pixel+0x174>)
200032e0:	693b      	ldr	r3, [r7, #16]
200032e2:	18d3      	adds	r3, r2, r3
200032e4:	1c0a      	adds	r2, r1, #0
200032e6:	701a      	strb	r2, [r3, #0]
			break;
200032e8:	e043      	b.n	20003372 <pixel+0x16a>
		
		case 2:	
			if(set)
200032ea:	687b      	ldr	r3, [r7, #4]
200032ec:	2b00      	cmp	r3, #0
200032ee:	d00e      	beq.n	2000330e <pixel+0x106>
				backBufferGray[index] |= mask;
200032f0:	4a23      	ldr	r2, [pc, #140]	; (20003380 <pixel+0x178>)
200032f2:	693b      	ldr	r3, [r7, #16]
200032f4:	18d3      	adds	r3, r2, r3
200032f6:	781a      	ldrb	r2, [r3, #0]
200032f8:	2317      	movs	r3, #23
200032fa:	18fb      	adds	r3, r7, r3
200032fc:	781b      	ldrb	r3, [r3, #0]
200032fe:	4313      	orrs	r3, r2
20003300:	b2d9      	uxtb	r1, r3
20003302:	4a1f      	ldr	r2, [pc, #124]	; (20003380 <pixel+0x178>)
20003304:	693b      	ldr	r3, [r7, #16]
20003306:	18d3      	adds	r3, r2, r3
20003308:	1c0a      	adds	r2, r1, #0
2000330a:	701a      	strb	r2, [r3, #0]
			else
				backBufferGray[index] &= mask;
			break;
2000330c:	e031      	b.n	20003372 <pixel+0x16a>
				backBufferGray[index] &= mask;
2000330e:	4a1c      	ldr	r2, [pc, #112]	; (20003380 <pixel+0x178>)
20003310:	693b      	ldr	r3, [r7, #16]
20003312:	18d3      	adds	r3, r2, r3
20003314:	781b      	ldrb	r3, [r3, #0]
20003316:	2217      	movs	r2, #23
20003318:	18ba      	adds	r2, r7, r2
2000331a:	7812      	ldrb	r2, [r2, #0]
2000331c:	4013      	ands	r3, r2
2000331e:	b2d9      	uxtb	r1, r3
20003320:	4a17      	ldr	r2, [pc, #92]	; (20003380 <pixel+0x178>)
20003322:	693b      	ldr	r3, [r7, #16]
20003324:	18d3      	adds	r3, r2, r3
20003326:	1c0a      	adds	r2, r1, #0
20003328:	701a      	strb	r2, [r3, #0]
			break;
2000332a:	e022      	b.n	20003372 <pixel+0x16a>
		
		case 3:	
			if(set)
2000332c:	687b      	ldr	r3, [r7, #4]
2000332e:	2b00      	cmp	r3, #0
20003330:	d00e      	beq.n	20003350 <pixel+0x148>
				backBuffer[index] |= mask;
20003332:	4a14      	ldr	r2, [pc, #80]	; (20003384 <pixel+0x17c>)
20003334:	693b      	ldr	r3, [r7, #16]
20003336:	18d3      	adds	r3, r2, r3
20003338:	781a      	ldrb	r2, [r3, #0]
2000333a:	2317      	movs	r3, #23
2000333c:	18fb      	adds	r3, r7, r3
2000333e:	781b      	ldrb	r3, [r3, #0]
20003340:	4313      	orrs	r3, r2
20003342:	b2d9      	uxtb	r1, r3
20003344:	4a0f      	ldr	r2, [pc, #60]	; (20003384 <pixel+0x17c>)
20003346:	693b      	ldr	r3, [r7, #16]
20003348:	18d3      	adds	r3, r2, r3
2000334a:	1c0a      	adds	r2, r1, #0
2000334c:	701a      	strb	r2, [r3, #0]
			else
				backBuffer[index] &= mask;
			break;
2000334e:	e010      	b.n	20003372 <pixel+0x16a>
				backBuffer[index] &= mask;
20003350:	4a0c      	ldr	r2, [pc, #48]	; (20003384 <pixel+0x17c>)
20003352:	693b      	ldr	r3, [r7, #16]
20003354:	18d3      	adds	r3, r2, r3
20003356:	781b      	ldrb	r3, [r3, #0]
20003358:	2217      	movs	r2, #23
2000335a:	18ba      	adds	r2, r7, r2
2000335c:	7812      	ldrb	r2, [r2, #0]
2000335e:	4013      	ands	r3, r2
20003360:	b2d9      	uxtb	r1, r3
20003362:	4a08      	ldr	r2, [pc, #32]	; (20003384 <pixel+0x17c>)
20003364:	693b      	ldr	r3, [r7, #16]
20003366:	18d3      	adds	r3, r2, r3
20003368:	1c0a      	adds	r2, r1, #0
2000336a:	701a      	strb	r2, [r3, #0]
			break;
2000336c:	46c0      	nop			; (mov r8, r8)
2000336e:	e000      	b.n	20003372 <pixel+0x16a>
		return;
20003370:	46c0      	nop			; (mov r8, r8)
			
	}

}
20003372:	46bd      	mov	sp, r7
20003374:	b006      	add	sp, #24
20003376:	bd80      	pop	{r7, pc}
20003378:	80000007 	andhi	r0, r0, r7
2000337c:	20006998 	mulcs	r0, r8, r9
20003380:	20005198 	mulcs	r0, r8, r1
20003384:	20005998 	mulcs	r0, r8, r9

20003388 <pixel2>:


void pixel2(int x, int y, int set) {
20003388:	b580      	push	{r7, lr}
2000338a:	b088      	sub	sp, #32
2000338c:	af00      	add	r7, sp, #0
2000338e:	60f8      	str	r0, [r7, #12]
20003390:	60b9      	str	r1, [r7, #8]
20003392:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20003394:	68fb      	ldr	r3, [r7, #12]
20003396:	2b00      	cmp	r3, #0
20003398:	dc00      	bgt.n	2000339c <pixel2+0x14>
2000339a:	e0bc      	b.n	20003516 <pixel2+0x18e>
2000339c:	68bb      	ldr	r3, [r7, #8]
2000339e:	2b00      	cmp	r3, #0
200033a0:	dc00      	bgt.n	200033a4 <pixel2+0x1c>
200033a2:	e0b8      	b.n	20003516 <pixel2+0x18e>
200033a4:	68fb      	ldr	r3, [r7, #12]
200033a6:	2b80      	cmp	r3, #128	; 0x80
200033a8:	dd00      	ble.n	200033ac <pixel2+0x24>
200033aa:	e0b4      	b.n	20003516 <pixel2+0x18e>
200033ac:	68bb      	ldr	r3, [r7, #8]
200033ae:	2b40      	cmp	r3, #64	; 0x40
200033b0:	dd00      	ble.n	200033b4 <pixel2+0x2c>
200033b2:	e0b0      	b.n	20003516 <pixel2+0x18e>
	index = (y-1)/8;
200033b4:	68bb      	ldr	r3, [r7, #8]
200033b6:	3b01      	subs	r3, #1
200033b8:	2b00      	cmp	r3, #0
200033ba:	da00      	bge.n	200033be <pixel2+0x36>
200033bc:	3307      	adds	r3, #7
200033be:	10db      	asrs	r3, r3, #3
200033c0:	61bb      	str	r3, [r7, #24]
	switch( (y-1)%8 ) {
200033c2:	68bb      	ldr	r3, [r7, #8]
200033c4:	3b01      	subs	r3, #1
200033c6:	4a56      	ldr	r2, [pc, #344]	; (20003520 <pixel2+0x198>)
200033c8:	4013      	ands	r3, r2
200033ca:	d504      	bpl.n	200033d6 <pixel2+0x4e>
200033cc:	3b01      	subs	r3, #1
200033ce:	2208      	movs	r2, #8
200033d0:	4252      	negs	r2, r2
200033d2:	4313      	orrs	r3, r2
200033d4:	3301      	adds	r3, #1
200033d6:	2b07      	cmp	r3, #7
200033d8:	d82c      	bhi.n	20003434 <pixel2+0xac>
200033da:	009a      	lsls	r2, r3, #2
200033dc:	4b51      	ldr	r3, [pc, #324]	; (20003524 <pixel2+0x19c>)
200033de:	18d3      	adds	r3, r2, r3
200033e0:	681b      	ldr	r3, [r3, #0]
200033e2:	469f      	mov	pc, r3
		case 0: mask = 1; break;
200033e4:	231f      	movs	r3, #31
200033e6:	18fb      	adds	r3, r7, r3
200033e8:	2201      	movs	r2, #1
200033ea:	701a      	strb	r2, [r3, #0]
200033ec:	e022      	b.n	20003434 <pixel2+0xac>
		case 1: mask = 2; break;
200033ee:	231f      	movs	r3, #31
200033f0:	18fb      	adds	r3, r7, r3
200033f2:	2202      	movs	r2, #2
200033f4:	701a      	strb	r2, [r3, #0]
200033f6:	e01d      	b.n	20003434 <pixel2+0xac>
		case 2: mask = 4; break;
200033f8:	231f      	movs	r3, #31
200033fa:	18fb      	adds	r3, r7, r3
200033fc:	2204      	movs	r2, #4
200033fe:	701a      	strb	r2, [r3, #0]
20003400:	e018      	b.n	20003434 <pixel2+0xac>
		case 3: mask = 8; break;
20003402:	231f      	movs	r3, #31
20003404:	18fb      	adds	r3, r7, r3
20003406:	2208      	movs	r2, #8
20003408:	701a      	strb	r2, [r3, #0]
2000340a:	e013      	b.n	20003434 <pixel2+0xac>
		case 4: mask = 0x10; break;
2000340c:	231f      	movs	r3, #31
2000340e:	18fb      	adds	r3, r7, r3
20003410:	2210      	movs	r2, #16
20003412:	701a      	strb	r2, [r3, #0]
20003414:	e00e      	b.n	20003434 <pixel2+0xac>
		case 5: mask = 0x20; break;
20003416:	231f      	movs	r3, #31
20003418:	18fb      	adds	r3, r7, r3
2000341a:	2220      	movs	r2, #32
2000341c:	701a      	strb	r2, [r3, #0]
2000341e:	e009      	b.n	20003434 <pixel2+0xac>
		case 6: mask = 0x40; break;
20003420:	231f      	movs	r3, #31
20003422:	18fb      	adds	r3, r7, r3
20003424:	2240      	movs	r2, #64	; 0x40
20003426:	701a      	strb	r2, [r3, #0]
20003428:	e004      	b.n	20003434 <pixel2+0xac>
		case 7: mask = 0x80; break;
2000342a:	231f      	movs	r3, #31
2000342c:	18fb      	adds	r3, r7, r3
2000342e:	2280      	movs	r2, #128	; 0x80
20003430:	701a      	strb	r2, [r3, #0]
20003432:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0)
20003434:	687b      	ldr	r3, [r7, #4]
20003436:	2b00      	cmp	r3, #0
20003438:	d106      	bne.n	20003448 <pixel2+0xc0>
		mask = ~mask;
2000343a:	231f      	movs	r3, #31
2000343c:	18fb      	adds	r3, r7, r3
2000343e:	221f      	movs	r2, #31
20003440:	18ba      	adds	r2, r7, r2
20003442:	7812      	ldrb	r2, [r2, #0]
20003444:	43d2      	mvns	r2, r2
20003446:	701a      	strb	r2, [r3, #0]
	
	if(x > 64){
20003448:	68fb      	ldr	r3, [r7, #12]
2000344a:	2b40      	cmp	r3, #64	; 0x40
2000344c:	dd07      	ble.n	2000345e <pixel2+0xd6>
		controller = B_CS2;
2000344e:	231e      	movs	r3, #30
20003450:	18fb      	adds	r3, r7, r3
20003452:	2210      	movs	r2, #16
20003454:	701a      	strb	r2, [r3, #0]
		x = x - 65;
20003456:	68fb      	ldr	r3, [r7, #12]
20003458:	3b41      	subs	r3, #65	; 0x41
2000345a:	60fb      	str	r3, [r7, #12]
2000345c:	e006      	b.n	2000346c <pixel2+0xe4>
	} else {
		controller = B_CS1;
2000345e:	231e      	movs	r3, #30
20003460:	18fb      	adds	r3, r7, r3
20003462:	2208      	movs	r2, #8
20003464:	701a      	strb	r2, [r3, #0]
		x = x-1;
20003466:	68fb      	ldr	r3, [r7, #12]
20003468:	3b01      	subs	r3, #1
2000346a:	60fb      	str	r3, [r7, #12]
	}
	graphic_write_command(LCD_SET_ADD | x, controller );
2000346c:	68fb      	ldr	r3, [r7, #12]
2000346e:	b25b      	sxtb	r3, r3
20003470:	2240      	movs	r2, #64	; 0x40
20003472:	4313      	orrs	r3, r2
20003474:	b25b      	sxtb	r3, r3
20003476:	b2da      	uxtb	r2, r3
20003478:	231e      	movs	r3, #30
2000347a:	18fb      	adds	r3, r7, r3
2000347c:	781b      	ldrb	r3, [r3, #0]
2000347e:	0019      	movs	r1, r3
20003480:	0010      	movs	r0, r2
20003482:	f7ff fe11 	bl	200030a8 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller );
20003486:	69bb      	ldr	r3, [r7, #24]
20003488:	b25b      	sxtb	r3, r3
2000348a:	2248      	movs	r2, #72	; 0x48
2000348c:	4252      	negs	r2, r2
2000348e:	4313      	orrs	r3, r2
20003490:	b25b      	sxtb	r3, r3
20003492:	b2da      	uxtb	r2, r3
20003494:	231e      	movs	r3, #30
20003496:	18fb      	adds	r3, r7, r3
20003498:	781b      	ldrb	r3, [r3, #0]
2000349a:	0019      	movs	r1, r3
2000349c:	0010      	movs	r0, r2
2000349e:	f7ff fe03 	bl	200030a8 <graphic_write_command>
	
	c = graphic_read_data(controller);
200034a2:	231e      	movs	r3, #30
200034a4:	18fb      	adds	r3, r7, r3
200034a6:	781b      	ldrb	r3, [r3, #0]
200034a8:	0018      	movs	r0, r3
200034aa:	f7ff fda9 	bl	20003000 <graphic_read_data>
200034ae:	0002      	movs	r2, r0
200034b0:	2317      	movs	r3, #23
200034b2:	18fb      	adds	r3, r7, r3
200034b4:	701a      	strb	r2, [r3, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
200034b6:	68fb      	ldr	r3, [r7, #12]
200034b8:	b25b      	sxtb	r3, r3
200034ba:	2240      	movs	r2, #64	; 0x40
200034bc:	4313      	orrs	r3, r2
200034be:	b25b      	sxtb	r3, r3
200034c0:	b2da      	uxtb	r2, r3
200034c2:	231e      	movs	r3, #30
200034c4:	18fb      	adds	r3, r7, r3
200034c6:	781b      	ldrb	r3, [r3, #0]
200034c8:	0019      	movs	r1, r3
200034ca:	0010      	movs	r0, r2
200034cc:	f7ff fdec 	bl	200030a8 <graphic_write_command>
	
	if(set)
200034d0:	687b      	ldr	r3, [r7, #4]
200034d2:	2b00      	cmp	r3, #0
200034d4:	d00a      	beq.n	200034ec <pixel2+0x164>
		mask = mask | c;
200034d6:	231f      	movs	r3, #31
200034d8:	18fb      	adds	r3, r7, r3
200034da:	221f      	movs	r2, #31
200034dc:	18b9      	adds	r1, r7, r2
200034de:	2217      	movs	r2, #23
200034e0:	18ba      	adds	r2, r7, r2
200034e2:	7809      	ldrb	r1, [r1, #0]
200034e4:	7812      	ldrb	r2, [r2, #0]
200034e6:	430a      	orrs	r2, r1
200034e8:	701a      	strb	r2, [r3, #0]
200034ea:	e009      	b.n	20003500 <pixel2+0x178>
	else
		mask = mask & c;
200034ec:	231f      	movs	r3, #31
200034ee:	18fb      	adds	r3, r7, r3
200034f0:	221f      	movs	r2, #31
200034f2:	18ba      	adds	r2, r7, r2
200034f4:	2117      	movs	r1, #23
200034f6:	1879      	adds	r1, r7, r1
200034f8:	7812      	ldrb	r2, [r2, #0]
200034fa:	7809      	ldrb	r1, [r1, #0]
200034fc:	400a      	ands	r2, r1
200034fe:	701a      	strb	r2, [r3, #0]
	
	graphic_write_data(mask, controller);
20003500:	231e      	movs	r3, #30
20003502:	18fb      	adds	r3, r7, r3
20003504:	781a      	ldrb	r2, [r3, #0]
20003506:	231f      	movs	r3, #31
20003508:	18fb      	adds	r3, r7, r3
2000350a:	781b      	ldrb	r3, [r3, #0]
2000350c:	0011      	movs	r1, r2
2000350e:	0018      	movs	r0, r3
20003510:	f7ff fded 	bl	200030ee <graphic_write_data>
20003514:	e000      	b.n	20003518 <pixel2+0x190>
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20003516:	46c0      	nop			; (mov r8, r8)
}
20003518:	46bd      	mov	sp, r7
2000351a:	b008      	add	sp, #32
2000351c:	bd80      	pop	{r7, pc}
2000351e:	46c0      	nop			; (mov r8, r8)
20003520:	80000007 	andhi	r0, r0, r7
20003524:	2000e6cc 	andcs	lr, r0, ip, asr #13

20003528 <graphic_draw_screen>:

void graphic_draw_screen(uint8_t *buffer) {
20003528:	b580      	push	{r7, lr}
2000352a:	b086      	sub	sp, #24
2000352c:	af00      	add	r7, sp, #0
2000352e:	6078      	str	r0, [r7, #4]
	uint8_t i, j, controller, c;
	unsigned int k = 0;
20003530:	2300      	movs	r3, #0
20003532:	613b      	str	r3, [r7, #16]
	for(c = 0; c < 2; c++) {
20003534:	2315      	movs	r3, #21
20003536:	18fb      	adds	r3, r7, r3
20003538:	2200      	movs	r2, #0
2000353a:	701a      	strb	r2, [r3, #0]
2000353c:	e056      	b.n	200035ec <graphic_draw_screen+0xc4>
		controller = (c == 0) ? B_CS1 : B_CS2;
2000353e:	2315      	movs	r3, #21
20003540:	18fb      	adds	r3, r7, r3
20003542:	781b      	ldrb	r3, [r3, #0]
20003544:	2b00      	cmp	r3, #0
20003546:	d101      	bne.n	2000354c <graphic_draw_screen+0x24>
20003548:	2208      	movs	r2, #8
2000354a:	e000      	b.n	2000354e <graphic_draw_screen+0x26>
2000354c:	2210      	movs	r2, #16
2000354e:	230f      	movs	r3, #15
20003550:	18fb      	adds	r3, r7, r3
20003552:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 8; j++) {
20003554:	2316      	movs	r3, #22
20003556:	18fb      	adds	r3, r7, r3
20003558:	2200      	movs	r2, #0
2000355a:	701a      	strb	r2, [r3, #0]
2000355c:	e03a      	b.n	200035d4 <graphic_draw_screen+0xac>
			graphic_write_command(LCD_SET_PAGE | j, controller);
2000355e:	2316      	movs	r3, #22
20003560:	18fb      	adds	r3, r7, r3
20003562:	781b      	ldrb	r3, [r3, #0]
20003564:	2248      	movs	r2, #72	; 0x48
20003566:	4252      	negs	r2, r2
20003568:	4313      	orrs	r3, r2
2000356a:	b2da      	uxtb	r2, r3
2000356c:	230f      	movs	r3, #15
2000356e:	18fb      	adds	r3, r7, r3
20003570:	781b      	ldrb	r3, [r3, #0]
20003572:	0019      	movs	r1, r3
20003574:	0010      	movs	r0, r2
20003576:	f7ff fd97 	bl	200030a8 <graphic_write_command>
			graphic_write_command(LCD_SET_ADD | 0, controller);
2000357a:	230f      	movs	r3, #15
2000357c:	18fb      	adds	r3, r7, r3
2000357e:	781b      	ldrb	r3, [r3, #0]
20003580:	0019      	movs	r1, r3
20003582:	2040      	movs	r0, #64	; 0x40
20003584:	f7ff fd90 	bl	200030a8 <graphic_write_command>
			for(i = 0; i <= 63; i++, k++) {
20003588:	2317      	movs	r3, #23
2000358a:	18fb      	adds	r3, r7, r3
2000358c:	2200      	movs	r2, #0
2000358e:	701a      	strb	r2, [r3, #0]
20003590:	e014      	b.n	200035bc <graphic_draw_screen+0x94>
				graphic_write_data(buffer[k], controller);
20003592:	687a      	ldr	r2, [r7, #4]
20003594:	693b      	ldr	r3, [r7, #16]
20003596:	18d3      	adds	r3, r2, r3
20003598:	781a      	ldrb	r2, [r3, #0]
2000359a:	230f      	movs	r3, #15
2000359c:	18fb      	adds	r3, r7, r3
2000359e:	781b      	ldrb	r3, [r3, #0]
200035a0:	0019      	movs	r1, r3
200035a2:	0010      	movs	r0, r2
200035a4:	f7ff fda3 	bl	200030ee <graphic_write_data>
			for(i = 0; i <= 63; i++, k++) {
200035a8:	2317      	movs	r3, #23
200035aa:	18fb      	adds	r3, r7, r3
200035ac:	781a      	ldrb	r2, [r3, #0]
200035ae:	2317      	movs	r3, #23
200035b0:	18fb      	adds	r3, r7, r3
200035b2:	3201      	adds	r2, #1
200035b4:	701a      	strb	r2, [r3, #0]
200035b6:	693b      	ldr	r3, [r7, #16]
200035b8:	3301      	adds	r3, #1
200035ba:	613b      	str	r3, [r7, #16]
200035bc:	2317      	movs	r3, #23
200035be:	18fb      	adds	r3, r7, r3
200035c0:	781b      	ldrb	r3, [r3, #0]
200035c2:	2b3f      	cmp	r3, #63	; 0x3f
200035c4:	d9e5      	bls.n	20003592 <graphic_draw_screen+0x6a>
		for(j = 0; j < 8; j++) {
200035c6:	2316      	movs	r3, #22
200035c8:	18fb      	adds	r3, r7, r3
200035ca:	781a      	ldrb	r2, [r3, #0]
200035cc:	2316      	movs	r3, #22
200035ce:	18fb      	adds	r3, r7, r3
200035d0:	3201      	adds	r2, #1
200035d2:	701a      	strb	r2, [r3, #0]
200035d4:	2316      	movs	r3, #22
200035d6:	18fb      	adds	r3, r7, r3
200035d8:	781b      	ldrb	r3, [r3, #0]
200035da:	2b07      	cmp	r3, #7
200035dc:	d9bf      	bls.n	2000355e <graphic_draw_screen+0x36>
	for(c = 0; c < 2; c++) {
200035de:	2315      	movs	r3, #21
200035e0:	18fb      	adds	r3, r7, r3
200035e2:	781a      	ldrb	r2, [r3, #0]
200035e4:	2315      	movs	r3, #21
200035e6:	18fb      	adds	r3, r7, r3
200035e8:	3201      	adds	r2, #1
200035ea:	701a      	strb	r2, [r3, #0]
200035ec:	2315      	movs	r3, #21
200035ee:	18fb      	adds	r3, r7, r3
200035f0:	781b      	ldrb	r3, [r3, #0]
200035f2:	2b01      	cmp	r3, #1
200035f4:	d9a3      	bls.n	2000353e <graphic_draw_screen+0x16>
			}
		}
	}
}
200035f6:	46c0      	nop			; (mov r8, r8)
200035f8:	46bd      	mov	sp, r7
200035fa:	b006      	add	sp, #24
200035fc:	bd80      	pop	{r7, pc}

200035fe <draw_sprite>:


void grayScaleTest( void );


void draw_sprite(sprite* s, int x, int y, int set, int color) {
200035fe:	b5b0      	push	{r4, r5, r7, lr}
20003600:	b08a      	sub	sp, #40	; 0x28
20003602:	af00      	add	r7, sp, #0
20003604:	60f8      	str	r0, [r7, #12]
20003606:	60b9      	str	r1, [r7, #8]
20003608:	607a      	str	r2, [r7, #4]
2000360a:	603b      	str	r3, [r7, #0]
	int i,j,k, width_in_bytes;
	if (s->width % 8 == 0)
2000360c:	68fb      	ldr	r3, [r7, #12]
2000360e:	681b      	ldr	r3, [r3, #0]
20003610:	2207      	movs	r2, #7
20003612:	4013      	ands	r3, r2
20003614:	d104      	bne.n	20003620 <draw_sprite+0x22>
		width_in_bytes = s->width / 8;
20003616:	68fb      	ldr	r3, [r7, #12]
20003618:	681b      	ldr	r3, [r3, #0]
2000361a:	08db      	lsrs	r3, r3, #3
2000361c:	61bb      	str	r3, [r7, #24]
2000361e:	e004      	b.n	2000362a <draw_sprite+0x2c>
	else
		width_in_bytes = (s->width / 8) + 1;
20003620:	68fb      	ldr	r3, [r7, #12]
20003622:	681b      	ldr	r3, [r3, #0]
20003624:	08db      	lsrs	r3, r3, #3
20003626:	3301      	adds	r3, #1
20003628:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < s->height; i++)
2000362a:	2300      	movs	r3, #0
2000362c:	627b      	str	r3, [r7, #36]	; 0x24
2000362e:	e06a      	b.n	20003706 <draw_sprite+0x108>
		for (j = 0; j < width_in_bytes; j++) {
20003630:	2300      	movs	r3, #0
20003632:	623b      	str	r3, [r7, #32]
20003634:	e060      	b.n	200036f8 <draw_sprite+0xfa>
			unsigned char byte = s->data[i * width_in_bytes + j];
20003636:	68fb      	ldr	r3, [r7, #12]
20003638:	689b      	ldr	r3, [r3, #8]
2000363a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000363c:	69b9      	ldr	r1, [r7, #24]
2000363e:	4351      	muls	r1, r2
20003640:	6a3a      	ldr	r2, [r7, #32]
20003642:	188a      	adds	r2, r1, r2
20003644:	189a      	adds	r2, r3, r2
20003646:	2317      	movs	r3, #23
20003648:	18fb      	adds	r3, r7, r3
2000364a:	7812      	ldrb	r2, [r2, #0]
2000364c:	701a      	strb	r2, [r3, #0]
			for (k =0; k < 8; k++) {
2000364e:	2300      	movs	r3, #0
20003650:	61fb      	str	r3, [r7, #28]
20003652:	e04b      	b.n	200036ec <draw_sprite+0xee>
				if (byte & (1 << k)){
20003654:	2317      	movs	r3, #23
20003656:	18fb      	adds	r3, r7, r3
20003658:	781a      	ldrb	r2, [r3, #0]
2000365a:	69fb      	ldr	r3, [r7, #28]
2000365c:	411a      	asrs	r2, r3
2000365e:	0013      	movs	r3, r2
20003660:	2201      	movs	r2, #1
20003662:	4013      	ands	r3, r2
20003664:	d03f      	beq.n	200036e6 <draw_sprite+0xe8>
					pixel(8 * j + k + x + 1, i + y + 1, set, color);
20003666:	6a3b      	ldr	r3, [r7, #32]
20003668:	00da      	lsls	r2, r3, #3
2000366a:	69fb      	ldr	r3, [r7, #28]
2000366c:	18d2      	adds	r2, r2, r3
2000366e:	68bb      	ldr	r3, [r7, #8]
20003670:	18d3      	adds	r3, r2, r3
20003672:	1c58      	adds	r0, r3, #1
20003674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20003676:	687b      	ldr	r3, [r7, #4]
20003678:	18d3      	adds	r3, r2, r3
2000367a:	1c59      	adds	r1, r3, #1
2000367c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000367e:	683a      	ldr	r2, [r7, #0]
20003680:	f7ff fdc2 	bl	20003208 <pixel>
					
					if(set) {	//Remove the other colors from this pixel
20003684:	683b      	ldr	r3, [r7, #0]
20003686:	2b00      	cmp	r3, #0
20003688:	d02d      	beq.n	200036e6 <draw_sprite+0xe8>
						pixel(8 * j + k + x + 1, i + y + 1, 0, (color+1) % 3);
2000368a:	6a3b      	ldr	r3, [r7, #32]
2000368c:	00da      	lsls	r2, r3, #3
2000368e:	69fb      	ldr	r3, [r7, #28]
20003690:	18d2      	adds	r2, r2, r3
20003692:	68bb      	ldr	r3, [r7, #8]
20003694:	18d3      	adds	r3, r2, r3
20003696:	1c5c      	adds	r4, r3, #1
20003698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000369a:	687b      	ldr	r3, [r7, #4]
2000369c:	18d3      	adds	r3, r2, r3
2000369e:	1c5d      	adds	r5, r3, #1
200036a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200036a2:	3301      	adds	r3, #1
200036a4:	2103      	movs	r1, #3
200036a6:	0018      	movs	r0, r3
200036a8:	f000 ff94 	bl	200045d4 <__aeabi_idivmod>
200036ac:	000b      	movs	r3, r1
200036ae:	2200      	movs	r2, #0
200036b0:	0029      	movs	r1, r5
200036b2:	0020      	movs	r0, r4
200036b4:	f7ff fda8 	bl	20003208 <pixel>
						pixel(8 * j + k + x + 1, i + y + 1, 0, (color+2) % 3);
200036b8:	6a3b      	ldr	r3, [r7, #32]
200036ba:	00da      	lsls	r2, r3, #3
200036bc:	69fb      	ldr	r3, [r7, #28]
200036be:	18d2      	adds	r2, r2, r3
200036c0:	68bb      	ldr	r3, [r7, #8]
200036c2:	18d3      	adds	r3, r2, r3
200036c4:	1c5c      	adds	r4, r3, #1
200036c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200036c8:	687b      	ldr	r3, [r7, #4]
200036ca:	18d3      	adds	r3, r2, r3
200036cc:	1c5d      	adds	r5, r3, #1
200036ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200036d0:	3302      	adds	r3, #2
200036d2:	2103      	movs	r1, #3
200036d4:	0018      	movs	r0, r3
200036d6:	f000 ff7d 	bl	200045d4 <__aeabi_idivmod>
200036da:	000b      	movs	r3, r1
200036dc:	2200      	movs	r2, #0
200036de:	0029      	movs	r1, r5
200036e0:	0020      	movs	r0, r4
200036e2:	f7ff fd91 	bl	20003208 <pixel>
			for (k =0; k < 8; k++) {
200036e6:	69fb      	ldr	r3, [r7, #28]
200036e8:	3301      	adds	r3, #1
200036ea:	61fb      	str	r3, [r7, #28]
200036ec:	69fb      	ldr	r3, [r7, #28]
200036ee:	2b07      	cmp	r3, #7
200036f0:	ddb0      	ble.n	20003654 <draw_sprite+0x56>
		for (j = 0; j < width_in_bytes; j++) {
200036f2:	6a3b      	ldr	r3, [r7, #32]
200036f4:	3301      	adds	r3, #1
200036f6:	623b      	str	r3, [r7, #32]
200036f8:	6a3a      	ldr	r2, [r7, #32]
200036fa:	69bb      	ldr	r3, [r7, #24]
200036fc:	429a      	cmp	r2, r3
200036fe:	db9a      	blt.n	20003636 <draw_sprite+0x38>
	for (i = 0; i < s->height; i++)
20003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003702:	3301      	adds	r3, #1
20003704:	627b      	str	r3, [r7, #36]	; 0x24
20003706:	68fb      	ldr	r3, [r7, #12]
20003708:	685a      	ldr	r2, [r3, #4]
2000370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000370c:	429a      	cmp	r2, r3
2000370e:	d88f      	bhi.n	20003630 <draw_sprite+0x32>
					}
				}
			}
		}
}
20003710:	46c0      	nop			; (mov r8, r8)
20003712:	46bd      	mov	sp, r7
20003714:	b00a      	add	sp, #40	; 0x28
20003716:	bdb0      	pop	{r4, r5, r7, pc}

20003718 <fillRectangle>:

void fillRectangle( int x, int y, int width, int height ){
20003718:	b580      	push	{r7, lr}
2000371a:	b086      	sub	sp, #24
2000371c:	af00      	add	r7, sp, #0
2000371e:	60f8      	str	r0, [r7, #12]
20003720:	60b9      	str	r1, [r7, #8]
20003722:	607a      	str	r2, [r7, #4]
20003724:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
20003726:	68fb      	ldr	r3, [r7, #12]
20003728:	617b      	str	r3, [r7, #20]
2000372a:	e014      	b.n	20003756 <fillRectangle+0x3e>
		for (j = y; j < y + height; j++) {
2000372c:	68bb      	ldr	r3, [r7, #8]
2000372e:	613b      	str	r3, [r7, #16]
20003730:	e008      	b.n	20003744 <fillRectangle+0x2c>
			pixel(i, j, 1, 3);
20003732:	6939      	ldr	r1, [r7, #16]
20003734:	6978      	ldr	r0, [r7, #20]
20003736:	2303      	movs	r3, #3
20003738:	2201      	movs	r2, #1
2000373a:	f7ff fd65 	bl	20003208 <pixel>
		for (j = y; j < y + height; j++) {
2000373e:	693b      	ldr	r3, [r7, #16]
20003740:	3301      	adds	r3, #1
20003742:	613b      	str	r3, [r7, #16]
20003744:	68ba      	ldr	r2, [r7, #8]
20003746:	683b      	ldr	r3, [r7, #0]
20003748:	18d2      	adds	r2, r2, r3
2000374a:	693b      	ldr	r3, [r7, #16]
2000374c:	429a      	cmp	r2, r3
2000374e:	dcf0      	bgt.n	20003732 <fillRectangle+0x1a>
	for (i = x; i < x + width; i++) {
20003750:	697b      	ldr	r3, [r7, #20]
20003752:	3301      	adds	r3, #1
20003754:	617b      	str	r3, [r7, #20]
20003756:	68fa      	ldr	r2, [r7, #12]
20003758:	687b      	ldr	r3, [r7, #4]
2000375a:	18d2      	adds	r2, r2, r3
2000375c:	697b      	ldr	r3, [r7, #20]
2000375e:	429a      	cmp	r2, r3
20003760:	dce4      	bgt.n	2000372c <fillRectangle+0x14>
		}
	}
}
20003762:	46c0      	nop			; (mov r8, r8)
20003764:	46bd      	mov	sp, r7
20003766:	b006      	add	sp, #24
20003768:	bd80      	pop	{r7, pc}

2000376a <clearRectangle>:

void clearRectangle( int x, int y, int width, int height ){
2000376a:	b580      	push	{r7, lr}
2000376c:	b086      	sub	sp, #24
2000376e:	af00      	add	r7, sp, #0
20003770:	60f8      	str	r0, [r7, #12]
20003772:	60b9      	str	r1, [r7, #8]
20003774:	607a      	str	r2, [r7, #4]
20003776:	603b      	str	r3, [r7, #0]
	int i;
	int j;
	for (i = x; i < x + width; i++) {
20003778:	68fb      	ldr	r3, [r7, #12]
2000377a:	617b      	str	r3, [r7, #20]
2000377c:	e014      	b.n	200037a8 <clearRectangle+0x3e>
		for (j = y; j < y + height; j++) {
2000377e:	68bb      	ldr	r3, [r7, #8]
20003780:	613b      	str	r3, [r7, #16]
20003782:	e008      	b.n	20003796 <clearRectangle+0x2c>
			pixel(i, j, 0, 3);
20003784:	6939      	ldr	r1, [r7, #16]
20003786:	6978      	ldr	r0, [r7, #20]
20003788:	2303      	movs	r3, #3
2000378a:	2200      	movs	r2, #0
2000378c:	f7ff fd3c 	bl	20003208 <pixel>
		for (j = y; j < y + height; j++) {
20003790:	693b      	ldr	r3, [r7, #16]
20003792:	3301      	adds	r3, #1
20003794:	613b      	str	r3, [r7, #16]
20003796:	68ba      	ldr	r2, [r7, #8]
20003798:	683b      	ldr	r3, [r7, #0]
2000379a:	18d2      	adds	r2, r2, r3
2000379c:	693b      	ldr	r3, [r7, #16]
2000379e:	429a      	cmp	r2, r3
200037a0:	dcf0      	bgt.n	20003784 <clearRectangle+0x1a>
	for (i = x; i < x + width; i++) {
200037a2:	697b      	ldr	r3, [r7, #20]
200037a4:	3301      	adds	r3, #1
200037a6:	617b      	str	r3, [r7, #20]
200037a8:	68fa      	ldr	r2, [r7, #12]
200037aa:	687b      	ldr	r3, [r7, #4]
200037ac:	18d2      	adds	r2, r2, r3
200037ae:	697b      	ldr	r3, [r7, #20]
200037b0:	429a      	cmp	r2, r3
200037b2:	dce4      	bgt.n	2000377e <clearRectangle+0x14>
		}
	}
}
200037b4:	46c0      	nop			; (mov r8, r8)
200037b6:	46bd      	mov	sp, r7
200037b8:	b006      	add	sp, #24
200037ba:	bd80      	pop	{r7, pc}

200037bc <grayScaleTest>:


void grayScaleTest( void ) {
200037bc:	b590      	push	{r4, r7, lr}
200037be:	b087      	sub	sp, #28
200037c0:	af00      	add	r7, sp, #0
	int x = 10;
200037c2:	230a      	movs	r3, #10
200037c4:	617b      	str	r3, [r7, #20]
	int y = 10;
200037c6:	230a      	movs	r3, #10
200037c8:	613b      	str	r3, [r7, #16]
	int width = 70;
200037ca:	2346      	movs	r3, #70	; 0x46
200037cc:	60fb      	str	r3, [r7, #12]
	int height = 50;
200037ce:	2332      	movs	r3, #50	; 0x32
200037d0:	60bb      	str	r3, [r7, #8]
	
	int x2 = 50;
200037d2:	2332      	movs	r3, #50	; 0x32
200037d4:	607b      	str	r3, [r7, #4]
	
	fillRectangle(x, y, width, height);
200037d6:	68bb      	ldr	r3, [r7, #8]
200037d8:	68fa      	ldr	r2, [r7, #12]
200037da:	6939      	ldr	r1, [r7, #16]
200037dc:	6978      	ldr	r0, [r7, #20]
200037de:	f7ff ff9b 	bl	20003718 <fillRectangle>
	
	int i;
	int k = 5;
200037e2:	2305      	movs	r3, #5
200037e4:	603b      	str	r3, [r7, #0]
	while(1) {
		clear_backBuffer();
200037e6:	f7ff fadf 	bl	20002da8 <clear_backBuffer>
		fillRectangle(x, y, width, height);
200037ea:	68bb      	ldr	r3, [r7, #8]
200037ec:	68fa      	ldr	r2, [r7, #12]
200037ee:	6939      	ldr	r1, [r7, #16]
200037f0:	6978      	ldr	r0, [r7, #20]
200037f2:	f7ff ff91 	bl	20003718 <fillRectangle>
		clearRectangle(x+2+2, y+1, width-k, height-k); //outer square
200037f6:	697b      	ldr	r3, [r7, #20]
200037f8:	1d18      	adds	r0, r3, #4
200037fa:	693b      	ldr	r3, [r7, #16]
200037fc:	1c59      	adds	r1, r3, #1
200037fe:	68fa      	ldr	r2, [r7, #12]
20003800:	683b      	ldr	r3, [r7, #0]
20003802:	1ad4      	subs	r4, r2, r3
20003804:	68ba      	ldr	r2, [r7, #8]
20003806:	683b      	ldr	r3, [r7, #0]
20003808:	1ad3      	subs	r3, r2, r3
2000380a:	0022      	movs	r2, r4
2000380c:	f7ff ffad 	bl	2000376a <clearRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
20003810:	697b      	ldr	r3, [r7, #20]
20003812:	1c9a      	adds	r2, r3, #2
20003814:	683b      	ldr	r3, [r7, #0]
20003816:	18d0      	adds	r0, r2, r3
20003818:	693b      	ldr	r3, [r7, #16]
2000381a:	1c99      	adds	r1, r3, #2
2000381c:	68fb      	ldr	r3, [r7, #12]
2000381e:	1f1a      	subs	r2, r3, #4
20003820:	683b      	ldr	r3, [r7, #0]
20003822:	1ad4      	subs	r4, r2, r3
20003824:	68bb      	ldr	r3, [r7, #8]
20003826:	1f1a      	subs	r2, r3, #4
20003828:	683b      	ldr	r3, [r7, #0]
2000382a:	1ad3      	subs	r3, r2, r3
2000382c:	0022      	movs	r2, r4
2000382e:	f7ff ff9c 	bl	2000376a <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
20003832:	4b2d      	ldr	r3, [pc, #180]	; (200038e8 <grayScaleTest+0x12c>)
20003834:	0018      	movs	r0, r3
20003836:	f7ff fe77 	bl	20003528 <graphic_draw_screen>
		clear_backBuffer();
2000383a:	f7ff fab5 	bl	20002da8 <clear_backBuffer>
		fillRectangle(x, y, width, height);
2000383e:	68bb      	ldr	r3, [r7, #8]
20003840:	68fa      	ldr	r2, [r7, #12]
20003842:	6939      	ldr	r1, [r7, #16]
20003844:	6978      	ldr	r0, [r7, #20]
20003846:	f7ff ff67 	bl	20003718 <fillRectangle>
		
		fillRectangle(x+2+2, y+1, width-k, height-k); //outer white square
2000384a:	697b      	ldr	r3, [r7, #20]
2000384c:	1d18      	adds	r0, r3, #4
2000384e:	693b      	ldr	r3, [r7, #16]
20003850:	1c59      	adds	r1, r3, #1
20003852:	68fa      	ldr	r2, [r7, #12]
20003854:	683b      	ldr	r3, [r7, #0]
20003856:	1ad4      	subs	r4, r2, r3
20003858:	68ba      	ldr	r2, [r7, #8]
2000385a:	683b      	ldr	r3, [r7, #0]
2000385c:	1ad3      	subs	r3, r2, r3
2000385e:	0022      	movs	r2, r4
20003860:	f7ff ff5a 	bl	20003718 <fillRectangle>
		fillRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
20003864:	697b      	ldr	r3, [r7, #20]
20003866:	1c9a      	adds	r2, r3, #2
20003868:	683b      	ldr	r3, [r7, #0]
2000386a:	18d0      	adds	r0, r2, r3
2000386c:	693b      	ldr	r3, [r7, #16]
2000386e:	1c99      	adds	r1, r3, #2
20003870:	68fb      	ldr	r3, [r7, #12]
20003872:	1f1a      	subs	r2, r3, #4
20003874:	683b      	ldr	r3, [r7, #0]
20003876:	1ad4      	subs	r4, r2, r3
20003878:	68bb      	ldr	r3, [r7, #8]
2000387a:	1f1a      	subs	r2, r3, #4
2000387c:	683b      	ldr	r3, [r7, #0]
2000387e:	1ad3      	subs	r3, r2, r3
20003880:	0022      	movs	r2, r4
20003882:	f7ff ff49 	bl	20003718 <fillRectangle>
		clearRectangle(x+12, y+5, 5, 5);
20003886:	697b      	ldr	r3, [r7, #20]
20003888:	330c      	adds	r3, #12
2000388a:	0018      	movs	r0, r3
2000388c:	693b      	ldr	r3, [r7, #16]
2000388e:	1d59      	adds	r1, r3, #5
20003890:	2305      	movs	r3, #5
20003892:	2205      	movs	r2, #5
20003894:	f7ff ff69 	bl	2000376a <clearRectangle>
		
		graphic_draw_screen(draw_buffer_black);
20003898:	4b13      	ldr	r3, [pc, #76]	; (200038e8 <grayScaleTest+0x12c>)
2000389a:	0018      	movs	r0, r3
2000389c:	f7ff fe44 	bl	20003528 <graphic_draw_screen>
		delay_milli(20);
200038a0:	2014      	movs	r0, #20
200038a2:	f7ff fa55 	bl	20002d50 <delay_milli>
		
		clear_backBuffer();
200038a6:	f7ff fa7f 	bl	20002da8 <clear_backBuffer>
		fillRectangle(x, y, width, height);
200038aa:	68bb      	ldr	r3, [r7, #8]
200038ac:	68fa      	ldr	r2, [r7, #12]
200038ae:	6939      	ldr	r1, [r7, #16]
200038b0:	6978      	ldr	r0, [r7, #20]
200038b2:	f7ff ff31 	bl	20003718 <fillRectangle>
		clearRectangle(x+2+k, y+2, width-4-k, height-4-k); //inner square
200038b6:	697b      	ldr	r3, [r7, #20]
200038b8:	1c9a      	adds	r2, r3, #2
200038ba:	683b      	ldr	r3, [r7, #0]
200038bc:	18d0      	adds	r0, r2, r3
200038be:	693b      	ldr	r3, [r7, #16]
200038c0:	1c99      	adds	r1, r3, #2
200038c2:	68fb      	ldr	r3, [r7, #12]
200038c4:	1f1a      	subs	r2, r3, #4
200038c6:	683b      	ldr	r3, [r7, #0]
200038c8:	1ad4      	subs	r4, r2, r3
200038ca:	68bb      	ldr	r3, [r7, #8]
200038cc:	1f1a      	subs	r2, r3, #4
200038ce:	683b      	ldr	r3, [r7, #0]
200038d0:	1ad3      	subs	r3, r2, r3
200038d2:	0022      	movs	r2, r4
200038d4:	f7ff ff49 	bl	2000376a <clearRectangle>
		graphic_draw_screen(draw_buffer_black);
200038d8:	4b03      	ldr	r3, [pc, #12]	; (200038e8 <grayScaleTest+0x12c>)
200038da:	0018      	movs	r0, r3
200038dc:	f7ff fe24 	bl	20003528 <graphic_draw_screen>
		
		delay_milli(20);
200038e0:	2014      	movs	r0, #20
200038e2:	f7ff fa35 	bl	20002d50 <delay_milli>
		clear_backBuffer();
200038e6:	e77e      	b.n	200037e6 <grayScaleTest+0x2a>
200038e8:	20006198 	mulcs	r0, r8, r1

200038ec <set_up_draw_buffers>:
	}
}

/** Should prepare the different drawing buffers, before the drawing of each frame.*/
void set_up_draw_buffers( void ) {
200038ec:	b580      	push	{r7, lr}
200038ee:	b082      	sub	sp, #8
200038f0:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 1024; i++) {
200038f2:	2300      	movs	r3, #0
200038f4:	607b      	str	r3, [r7, #4]
200038f6:	e065      	b.n	200039c4 <set_up_draw_buffers+0xd8>
		draw_buffer_black[i] = backBuffer[i] & (~backBufferGray[i] & ~backBufferLight[i]); //Had to work a bit on these
200038f8:	4a36      	ldr	r2, [pc, #216]	; (200039d4 <set_up_draw_buffers+0xe8>)
200038fa:	687b      	ldr	r3, [r7, #4]
200038fc:	18d3      	adds	r3, r2, r3
200038fe:	781b      	ldrb	r3, [r3, #0]
20003900:	b25b      	sxtb	r3, r3
20003902:	4935      	ldr	r1, [pc, #212]	; (200039d8 <set_up_draw_buffers+0xec>)
20003904:	687a      	ldr	r2, [r7, #4]
20003906:	188a      	adds	r2, r1, r2
20003908:	7811      	ldrb	r1, [r2, #0]
2000390a:	4834      	ldr	r0, [pc, #208]	; (200039dc <set_up_draw_buffers+0xf0>)
2000390c:	687a      	ldr	r2, [r7, #4]
2000390e:	1882      	adds	r2, r0, r2
20003910:	7812      	ldrb	r2, [r2, #0]
20003912:	430a      	orrs	r2, r1
20003914:	b2d2      	uxtb	r2, r2
20003916:	b252      	sxtb	r2, r2
20003918:	43d2      	mvns	r2, r2
2000391a:	b252      	sxtb	r2, r2
2000391c:	4013      	ands	r3, r2
2000391e:	b25b      	sxtb	r3, r3
20003920:	b2d9      	uxtb	r1, r3
20003922:	4a2f      	ldr	r2, [pc, #188]	; (200039e0 <set_up_draw_buffers+0xf4>)
20003924:	687b      	ldr	r3, [r7, #4]
20003926:	18d3      	adds	r3, r2, r3
20003928:	1c0a      	adds	r2, r1, #0
2000392a:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray[i] = (backBuffer[i] | backBufferGray[i]) & ~backBufferLight[i]; //in order to make it possible
2000392c:	4a29      	ldr	r2, [pc, #164]	; (200039d4 <set_up_draw_buffers+0xe8>)
2000392e:	687b      	ldr	r3, [r7, #4]
20003930:	18d3      	adds	r3, r2, r3
20003932:	781a      	ldrb	r2, [r3, #0]
20003934:	4928      	ldr	r1, [pc, #160]	; (200039d8 <set_up_draw_buffers+0xec>)
20003936:	687b      	ldr	r3, [r7, #4]
20003938:	18cb      	adds	r3, r1, r3
2000393a:	781b      	ldrb	r3, [r3, #0]
2000393c:	4313      	orrs	r3, r2
2000393e:	b2db      	uxtb	r3, r3
20003940:	b25b      	sxtb	r3, r3
20003942:	4926      	ldr	r1, [pc, #152]	; (200039dc <set_up_draw_buffers+0xf0>)
20003944:	687a      	ldr	r2, [r7, #4]
20003946:	188a      	adds	r2, r1, r2
20003948:	7812      	ldrb	r2, [r2, #0]
2000394a:	b252      	sxtb	r2, r2
2000394c:	43d2      	mvns	r2, r2
2000394e:	b252      	sxtb	r2, r2
20003950:	4013      	ands	r3, r2
20003952:	b25b      	sxtb	r3, r3
20003954:	b2d9      	uxtb	r1, r3
20003956:	4a23      	ldr	r2, [pc, #140]	; (200039e4 <set_up_draw_buffers+0xf8>)
20003958:	687b      	ldr	r3, [r7, #4]
2000395a:	18d3      	adds	r3, r2, r3
2000395c:	1c0a      	adds	r2, r1, #0
2000395e:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_light[i] = (backBuffer[i] | backBufferLight[i]) & ~backBufferGray[i]; //to show a lighter sprite
20003960:	4a1c      	ldr	r2, [pc, #112]	; (200039d4 <set_up_draw_buffers+0xe8>)
20003962:	687b      	ldr	r3, [r7, #4]
20003964:	18d3      	adds	r3, r2, r3
20003966:	781a      	ldrb	r2, [r3, #0]
20003968:	491c      	ldr	r1, [pc, #112]	; (200039dc <set_up_draw_buffers+0xf0>)
2000396a:	687b      	ldr	r3, [r7, #4]
2000396c:	18cb      	adds	r3, r1, r3
2000396e:	781b      	ldrb	r3, [r3, #0]
20003970:	4313      	orrs	r3, r2
20003972:	b2db      	uxtb	r3, r3
20003974:	b25b      	sxtb	r3, r3
20003976:	4918      	ldr	r1, [pc, #96]	; (200039d8 <set_up_draw_buffers+0xec>)
20003978:	687a      	ldr	r2, [r7, #4]
2000397a:	188a      	adds	r2, r1, r2
2000397c:	7812      	ldrb	r2, [r2, #0]
2000397e:	b252      	sxtb	r2, r2
20003980:	43d2      	mvns	r2, r2
20003982:	b252      	sxtb	r2, r2
20003984:	4013      	ands	r3, r2
20003986:	b25b      	sxtb	r3, r3
20003988:	b2d9      	uxtb	r1, r3
2000398a:	4a17      	ldr	r2, [pc, #92]	; (200039e8 <set_up_draw_buffers+0xfc>)
2000398c:	687b      	ldr	r3, [r7, #4]
2000398e:	18d3      	adds	r3, r2, r3
20003990:	1c0a      	adds	r2, r1, #0
20003992:	701a      	strb	r2, [r3, #0]
		draw_buffer_black_gray_light[i] = backBuffer[i] | backBufferGray[i] | backBufferLight[i]; //on top of a darker one.
20003994:	4a0f      	ldr	r2, [pc, #60]	; (200039d4 <set_up_draw_buffers+0xe8>)
20003996:	687b      	ldr	r3, [r7, #4]
20003998:	18d3      	adds	r3, r2, r3
2000399a:	781a      	ldrb	r2, [r3, #0]
2000399c:	490e      	ldr	r1, [pc, #56]	; (200039d8 <set_up_draw_buffers+0xec>)
2000399e:	687b      	ldr	r3, [r7, #4]
200039a0:	18cb      	adds	r3, r1, r3
200039a2:	781b      	ldrb	r3, [r3, #0]
200039a4:	4313      	orrs	r3, r2
200039a6:	b2da      	uxtb	r2, r3
200039a8:	490c      	ldr	r1, [pc, #48]	; (200039dc <set_up_draw_buffers+0xf0>)
200039aa:	687b      	ldr	r3, [r7, #4]
200039ac:	18cb      	adds	r3, r1, r3
200039ae:	781b      	ldrb	r3, [r3, #0]
200039b0:	4313      	orrs	r3, r2
200039b2:	b2d9      	uxtb	r1, r3
200039b4:	4a0d      	ldr	r2, [pc, #52]	; (200039ec <set_up_draw_buffers+0x100>)
200039b6:	687b      	ldr	r3, [r7, #4]
200039b8:	18d3      	adds	r3, r2, r3
200039ba:	1c0a      	adds	r2, r1, #0
200039bc:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 1024; i++) {
200039be:	687b      	ldr	r3, [r7, #4]
200039c0:	3301      	adds	r3, #1
200039c2:	607b      	str	r3, [r7, #4]
200039c4:	687b      	ldr	r3, [r7, #4]
200039c6:	4a0a      	ldr	r2, [pc, #40]	; (200039f0 <set_up_draw_buffers+0x104>)
200039c8:	4293      	cmp	r3, r2
200039ca:	dd95      	ble.n	200038f8 <set_up_draw_buffers+0xc>
	}
}
200039cc:	46c0      	nop			; (mov r8, r8)
200039ce:	46bd      	mov	sp, r7
200039d0:	b002      	add	sp, #8
200039d2:	bd80      	pop	{r7, pc}
200039d4:	20005998 	mulcs	r0, r8, r9
200039d8:	20005198 	mulcs	r0, r8, r1
200039dc:	20006998 	mulcs	r0, r8, r9
200039e0:	20006198 	mulcs	r0, r8, r1
200039e4:	20005598 	mulcs	r0, r8, r5
200039e8:	20005d98 	mulcs	r0, r8, sp
200039ec:	20006598 	mulcs	r0, r8, r5
200039f0:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

200039f4 <draw_game_object>:

void draw_game_object(GameObject *gObj) {
200039f4:	b580      	push	{r7, lr}
200039f6:	b086      	sub	sp, #24
200039f8:	af02      	add	r7, sp, #8
200039fa:	6078      	str	r0, [r7, #4]
	int frame = gObj->current_frame;
200039fc:	687b      	ldr	r3, [r7, #4]
200039fe:	695b      	ldr	r3, [r3, #20]
20003a00:	60fb      	str	r3, [r7, #12]
	draw_sprite(gObj->images[frame].blackImage, gObj->xPos, gObj->yPos, 1, 3);
20003a02:	687b      	ldr	r3, [r7, #4]
20003a04:	6819      	ldr	r1, [r3, #0]
20003a06:	68fa      	ldr	r2, [r7, #12]
20003a08:	0013      	movs	r3, r2
20003a0a:	005b      	lsls	r3, r3, #1
20003a0c:	189b      	adds	r3, r3, r2
20003a0e:	009b      	lsls	r3, r3, #2
20003a10:	18cb      	adds	r3, r1, r3
20003a12:	6818      	ldr	r0, [r3, #0]
20003a14:	687b      	ldr	r3, [r7, #4]
20003a16:	6859      	ldr	r1, [r3, #4]
20003a18:	687b      	ldr	r3, [r7, #4]
20003a1a:	689a      	ldr	r2, [r3, #8]
20003a1c:	2303      	movs	r3, #3
20003a1e:	9300      	str	r3, [sp, #0]
20003a20:	2301      	movs	r3, #1
20003a22:	f7ff fdec 	bl	200035fe <draw_sprite>
	draw_sprite(gObj->images[frame].grayImage, gObj->xPos, gObj->yPos, 1, 2);
20003a26:	687b      	ldr	r3, [r7, #4]
20003a28:	6819      	ldr	r1, [r3, #0]
20003a2a:	68fa      	ldr	r2, [r7, #12]
20003a2c:	0013      	movs	r3, r2
20003a2e:	005b      	lsls	r3, r3, #1
20003a30:	189b      	adds	r3, r3, r2
20003a32:	009b      	lsls	r3, r3, #2
20003a34:	18cb      	adds	r3, r1, r3
20003a36:	6858      	ldr	r0, [r3, #4]
20003a38:	687b      	ldr	r3, [r7, #4]
20003a3a:	6859      	ldr	r1, [r3, #4]
20003a3c:	687b      	ldr	r3, [r7, #4]
20003a3e:	689a      	ldr	r2, [r3, #8]
20003a40:	2302      	movs	r3, #2
20003a42:	9300      	str	r3, [sp, #0]
20003a44:	2301      	movs	r3, #1
20003a46:	f7ff fdda 	bl	200035fe <draw_sprite>
	draw_sprite(gObj->images[frame].lightImage, gObj->xPos, gObj->yPos, 1, 1);
20003a4a:	687b      	ldr	r3, [r7, #4]
20003a4c:	6819      	ldr	r1, [r3, #0]
20003a4e:	68fa      	ldr	r2, [r7, #12]
20003a50:	0013      	movs	r3, r2
20003a52:	005b      	lsls	r3, r3, #1
20003a54:	189b      	adds	r3, r3, r2
20003a56:	009b      	lsls	r3, r3, #2
20003a58:	18cb      	adds	r3, r1, r3
20003a5a:	6898      	ldr	r0, [r3, #8]
20003a5c:	687b      	ldr	r3, [r7, #4]
20003a5e:	6859      	ldr	r1, [r3, #4]
20003a60:	687b      	ldr	r3, [r7, #4]
20003a62:	689a      	ldr	r2, [r3, #8]
20003a64:	2301      	movs	r3, #1
20003a66:	9300      	str	r3, [sp, #0]
20003a68:	2301      	movs	r3, #1
20003a6a:	f7ff fdc8 	bl	200035fe <draw_sprite>
}
20003a6e:	46c0      	nop			; (mov r8, r8)
20003a70:	46bd      	mov	sp, r7
20003a72:	b004      	add	sp, #16
20003a74:	bd80      	pop	{r7, pc}

20003a76 <show_frame>:


void show_frame(int frame_length) {
20003a76:	b580      	push	{r7, lr}
20003a78:	b082      	sub	sp, #8
20003a7a:	af00      	add	r7, sp, #0
20003a7c:	6078      	str	r0, [r7, #4]
	set_up_draw_buffers();
20003a7e:	f7ff ff35 	bl	200038ec <set_up_draw_buffers>
	
	while(frame_length--) {
20003a82:	e01b      	b.n	20003abc <show_frame+0x46>
		graphic_draw_screen(draw_buffer_black_gray_light);
20003a84:	4b13      	ldr	r3, [pc, #76]	; (20003ad4 <show_frame+0x5e>)
20003a86:	0018      	movs	r0, r3
20003a88:	f7ff fd4e 	bl	20003528 <graphic_draw_screen>
		delay_milli(1);
20003a8c:	2001      	movs	r0, #1
20003a8e:	f7ff f95f 	bl	20002d50 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
20003a92:	4b11      	ldr	r3, [pc, #68]	; (20003ad8 <show_frame+0x62>)
20003a94:	0018      	movs	r0, r3
20003a96:	f7ff fd47 	bl	20003528 <graphic_draw_screen>
		delay_milli(1);
20003a9a:	2001      	movs	r0, #1
20003a9c:	f7ff f958 	bl	20002d50 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black_gray);
20003aa0:	4b0e      	ldr	r3, [pc, #56]	; (20003adc <show_frame+0x66>)
20003aa2:	0018      	movs	r0, r3
20003aa4:	f7ff fd40 	bl	20003528 <graphic_draw_screen>
		delay_milli(1);
20003aa8:	2001      	movs	r0, #1
20003aaa:	f7ff f951 	bl	20002d50 <delay_milli>
		
		graphic_draw_screen(draw_buffer_black);
20003aae:	4b0a      	ldr	r3, [pc, #40]	; (20003ad8 <show_frame+0x62>)
20003ab0:	0018      	movs	r0, r3
20003ab2:	f7ff fd39 	bl	20003528 <graphic_draw_screen>
		delay_milli(1);
20003ab6:	2001      	movs	r0, #1
20003ab8:	f7ff f94a 	bl	20002d50 <delay_milli>
	while(frame_length--) {
20003abc:	687b      	ldr	r3, [r7, #4]
20003abe:	1e5a      	subs	r2, r3, #1
20003ac0:	607a      	str	r2, [r7, #4]
20003ac2:	2b00      	cmp	r3, #0
20003ac4:	d1de      	bne.n	20003a84 <show_frame+0xe>
	}
	
	clear_all_backBuffers();	//Maybe we could be more effective by only clearing the necessary stuff,
20003ac6:	f7ff f97b 	bl	20002dc0 <clear_all_backBuffers>
								//but let's keep it like this if it works.
20003aca:	46c0      	nop			; (mov r8, r8)
20003acc:	46bd      	mov	sp, r7
20003ace:	b002      	add	sp, #8
20003ad0:	bd80      	pop	{r7, pc}
20003ad2:	46c0      	nop			; (mov r8, r8)
20003ad4:	20006598 	mulcs	r0, r8, r5
20003ad8:	20006198 	mulcs	r0, r8, r1
20003adc:	20005598 	mulcs	r0, r8, r5

20003ae0 <load_image>:
#include "image.h"

void load_image( Image *image, sprite *blackImage, sprite *grayImage, sprite *lightImage ) {
20003ae0:	b580      	push	{r7, lr}
20003ae2:	b084      	sub	sp, #16
20003ae4:	af00      	add	r7, sp, #0
20003ae6:	60f8      	str	r0, [r7, #12]
20003ae8:	60b9      	str	r1, [r7, #8]
20003aea:	607a      	str	r2, [r7, #4]
20003aec:	603b      	str	r3, [r7, #0]
	image->blackImage = blackImage;
20003aee:	68fb      	ldr	r3, [r7, #12]
20003af0:	68ba      	ldr	r2, [r7, #8]
20003af2:	601a      	str	r2, [r3, #0]
	image->grayImage = grayImage;
20003af4:	68fb      	ldr	r3, [r7, #12]
20003af6:	687a      	ldr	r2, [r7, #4]
20003af8:	605a      	str	r2, [r3, #4]
	image->lightImage = lightImage;
20003afa:	68fb      	ldr	r3, [r7, #12]
20003afc:	683a      	ldr	r2, [r7, #0]
20003afe:	609a      	str	r2, [r3, #8]
}
20003b00:	46c0      	nop			; (mov r8, r8)
20003b02:	46bd      	mov	sp, r7
20003b04:	b004      	add	sp, #16
20003b06:	bd80      	pop	{r7, pc}

20003b08 <load_sprite>:
#include "sprite.h"

void load_sprite(sprite* s, unsigned char* data, int width, int height)
{
20003b08:	b580      	push	{r7, lr}
20003b0a:	b084      	sub	sp, #16
20003b0c:	af00      	add	r7, sp, #0
20003b0e:	60f8      	str	r0, [r7, #12]
20003b10:	60b9      	str	r1, [r7, #8]
20003b12:	607a      	str	r2, [r7, #4]
20003b14:	603b      	str	r3, [r7, #0]
	s->width = width;
20003b16:	687a      	ldr	r2, [r7, #4]
20003b18:	68fb      	ldr	r3, [r7, #12]
20003b1a:	601a      	str	r2, [r3, #0]
	s->height = height;
20003b1c:	683a      	ldr	r2, [r7, #0]
20003b1e:	68fb      	ldr	r3, [r7, #12]
20003b20:	605a      	str	r2, [r3, #4]
	s->data = data;
20003b22:	68fb      	ldr	r3, [r7, #12]
20003b24:	68ba      	ldr	r2, [r7, #8]
20003b26:	609a      	str	r2, [r3, #8]
}
20003b28:	46c0      	nop			; (mov r8, r8)
20003b2a:	46bd      	mov	sp, r7
20003b2c:	b004      	add	sp, #16
20003b2e:	bd80      	pop	{r7, pc}

20003b30 <set_up_DIL>:
#include "gpio.h"

/** Sets up PE0-7 as inports and PE8-15 as outports. */
void set_up_DIL( void ) {
20003b30:	b580      	push	{r7, lr}
20003b32:	af00      	add	r7, sp, #0
	GPIO_D.Moder = 0x55550000;
20003b34:	4b02      	ldr	r3, [pc, #8]	; (20003b40 <set_up_DIL+0x10>)
20003b36:	4a03      	ldr	r2, [pc, #12]	; (20003b44 <set_up_DIL+0x14>)
20003b38:	601a      	str	r2, [r3, #0]
}
20003b3a:	46c0      	nop			; (mov r8, r8)
20003b3c:	46bd      	mov	sp, r7
20003b3e:	bd80      	pop	{r7, pc}
20003b40:	40020c00 	andmi	r0, r2, r0, lsl #24
20003b44:	55550000 	ldrbpl	r0, [r5, #-0]

20003b48 <read_DIL>:

char read_DIL( void ) {
20003b48:	b580      	push	{r7, lr}
20003b4a:	af00      	add	r7, sp, #0
	GPIO_D.odrHigh = GPIO_D.idrLow; //Show on bargraph
20003b4c:	4b05      	ldr	r3, [pc, #20]	; (20003b64 <read_DIL+0x1c>)
20003b4e:	4a05      	ldr	r2, [pc, #20]	; (20003b64 <read_DIL+0x1c>)
20003b50:	7c12      	ldrb	r2, [r2, #16]
20003b52:	b2d2      	uxtb	r2, r2
20003b54:	755a      	strb	r2, [r3, #21]
	return GPIO_D.idrLow;
20003b56:	4b03      	ldr	r3, [pc, #12]	; (20003b64 <read_DIL+0x1c>)
20003b58:	7c1b      	ldrb	r3, [r3, #16]
20003b5a:	b2db      	uxtb	r3, r3
}
20003b5c:	0018      	movs	r0, r3
20003b5e:	46bd      	mov	sp, r7
20003b60:	bd80      	pop	{r7, pc}
20003b62:	46c0      	nop			; (mov r8, r8)
20003b64:	40020c00 	andmi	r0, r2, r0, lsl #24

20003b68 <read_DIL_single>:


int read_DIL_single( int bit ) {
20003b68:	b590      	push	{r4, r7, lr}
20003b6a:	b085      	sub	sp, #20
20003b6c:	af00      	add	r7, sp, #0
20003b6e:	6078      	str	r0, [r7, #4]
	char DIL = read_DIL();
20003b70:	230f      	movs	r3, #15
20003b72:	18fc      	adds	r4, r7, r3
20003b74:	f7ff ffe8 	bl	20003b48 <read_DIL>
20003b78:	0003      	movs	r3, r0
20003b7a:	7023      	strb	r3, [r4, #0]
	if (DIL & (1<<bit)) {
20003b7c:	230f      	movs	r3, #15
20003b7e:	18fb      	adds	r3, r7, r3
20003b80:	781a      	ldrb	r2, [r3, #0]
20003b82:	687b      	ldr	r3, [r7, #4]
20003b84:	411a      	asrs	r2, r3
20003b86:	0013      	movs	r3, r2
20003b88:	2201      	movs	r2, #1
20003b8a:	4013      	ands	r3, r2
20003b8c:	d001      	beq.n	20003b92 <read_DIL_single+0x2a>
		return 1;
20003b8e:	2301      	movs	r3, #1
20003b90:	e000      	b.n	20003b94 <read_DIL_single+0x2c>
	} else {
		return 0;
20003b92:	2300      	movs	r3, #0
	}
20003b94:	0018      	movs	r0, r3
20003b96:	46bd      	mov	sp, r7
20003b98:	b005      	add	sp, #20
20003b9a:	bd90      	pop	{r4, r7, pc}

20003b9c <ascii_ctrl_bit_set>:
void ascii_write_data(unsigned char data);
unsigned char ascii_read_status(void);
unsigned char ascii_read_data(void);


void ascii_ctrl_bit_set(unsigned char x){
20003b9c:	b580      	push	{r7, lr}
20003b9e:	b084      	sub	sp, #16
20003ba0:	af00      	add	r7, sp, #0
20003ba2:	0002      	movs	r2, r0
20003ba4:	1dfb      	adds	r3, r7, #7
20003ba6:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och ettstÃƒÂ¤ll de bitar som ÃƒÂ¤r 1 i x
	unsigned char c;
	c = *portOdrLow;
20003ba8:	4a0c      	ldr	r2, [pc, #48]	; (20003bdc <ascii_ctrl_bit_set+0x40>)
20003baa:	230f      	movs	r3, #15
20003bac:	18fb      	adds	r3, r7, r3
20003bae:	7812      	ldrb	r2, [r2, #0]
20003bb0:	701a      	strb	r2, [r3, #0]
	c |= (B_SELECT | x);
20003bb2:	1dfa      	adds	r2, r7, #7
20003bb4:	230f      	movs	r3, #15
20003bb6:	18fb      	adds	r3, r7, r3
20003bb8:	7812      	ldrb	r2, [r2, #0]
20003bba:	781b      	ldrb	r3, [r3, #0]
20003bbc:	4313      	orrs	r3, r2
20003bbe:	b2da      	uxtb	r2, r3
20003bc0:	230f      	movs	r3, #15
20003bc2:	18fb      	adds	r3, r7, r3
20003bc4:	2104      	movs	r1, #4
20003bc6:	430a      	orrs	r2, r1
20003bc8:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20003bca:	4a04      	ldr	r2, [pc, #16]	; (20003bdc <ascii_ctrl_bit_set+0x40>)
20003bcc:	230f      	movs	r3, #15
20003bce:	18fb      	adds	r3, r7, r3
20003bd0:	781b      	ldrb	r3, [r3, #0]
20003bd2:	7013      	strb	r3, [r2, #0]
}
20003bd4:	46c0      	nop			; (mov r8, r8)
20003bd6:	46bd      	mov	sp, r7
20003bd8:	b004      	add	sp, #16
20003bda:	bd80      	pop	{r7, pc}
20003bdc:	40021014 	andmi	r1, r2, r4, lsl r0

20003be0 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
20003be0:	b580      	push	{r7, lr}
20003be2:	b084      	sub	sp, #16
20003be4:	af00      	add	r7, sp, #0
20003be6:	0002      	movs	r2, r0
20003be8:	1dfb      	adds	r3, r7, #7
20003bea:	701a      	strb	r2, [r3, #0]
//adressera ASCii-displayen och nollstÃ¤ll de bitar som Ã¤r 1 i x
	unsigned char c;
	c = *portOdrLow;
20003bec:	4a0f      	ldr	r2, [pc, #60]	; (20003c2c <ascii_ctrl_bit_clear+0x4c>)
20003bee:	230f      	movs	r3, #15
20003bf0:	18fb      	adds	r3, r7, r3
20003bf2:	7812      	ldrb	r2, [r2, #0]
20003bf4:	701a      	strb	r2, [r3, #0]
	c = (B_SELECT | c & ~x);
20003bf6:	1dfb      	adds	r3, r7, #7
20003bf8:	781b      	ldrb	r3, [r3, #0]
20003bfa:	b25b      	sxtb	r3, r3
20003bfc:	43db      	mvns	r3, r3
20003bfe:	b25b      	sxtb	r3, r3
20003c00:	220f      	movs	r2, #15
20003c02:	18ba      	adds	r2, r7, r2
20003c04:	7812      	ldrb	r2, [r2, #0]
20003c06:	b252      	sxtb	r2, r2
20003c08:	4013      	ands	r3, r2
20003c0a:	b25b      	sxtb	r3, r3
20003c0c:	2204      	movs	r2, #4
20003c0e:	4313      	orrs	r3, r2
20003c10:	b25a      	sxtb	r2, r3
20003c12:	230f      	movs	r3, #15
20003c14:	18fb      	adds	r3, r7, r3
20003c16:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20003c18:	4a04      	ldr	r2, [pc, #16]	; (20003c2c <ascii_ctrl_bit_clear+0x4c>)
20003c1a:	230f      	movs	r3, #15
20003c1c:	18fb      	adds	r3, r7, r3
20003c1e:	781b      	ldrb	r3, [r3, #0]
20003c20:	7013      	strb	r3, [r2, #0]
}
20003c22:	46c0      	nop			; (mov r8, r8)
20003c24:	46bd      	mov	sp, r7
20003c26:	b004      	add	sp, #16
20003c28:	bd80      	pop	{r7, pc}
20003c2a:	46c0      	nop			; (mov r8, r8)
20003c2c:	40021014 	andmi	r1, r2, r4, lsl r0

20003c30 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20003c30:	b580      	push	{r7, lr}
20003c32:	b082      	sub	sp, #8
20003c34:	af00      	add	r7, sp, #0
20003c36:	0002      	movs	r2, r0
20003c38:	1dfb      	adds	r3, r7, #7
20003c3a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20003c3c:	2001      	movs	r0, #1
20003c3e:	f7ff ffcf 	bl	20003be0 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20003c42:	2002      	movs	r0, #2
20003c44:	f7ff ffcc 	bl	20003be0 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20003c48:	1dfb      	adds	r3, r7, #7
20003c4a:	781b      	ldrb	r3, [r3, #0]
20003c4c:	0018      	movs	r0, r3
20003c4e:	f000 f86d 	bl	20003d2c <ascii_write_controller>
}
20003c52:	46c0      	nop			; (mov r8, r8)
20003c54:	46bd      	mov	sp, r7
20003c56:	b002      	add	sp, #8
20003c58:	bd80      	pop	{r7, pc}

20003c5a <ascii_write_data>:

void ascii_write_data(unsigned char data){
20003c5a:	b580      	push	{r7, lr}
20003c5c:	b082      	sub	sp, #8
20003c5e:	af00      	add	r7, sp, #0
20003c60:	0002      	movs	r2, r0
20003c62:	1dfb      	adds	r3, r7, #7
20003c64:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20003c66:	2001      	movs	r0, #1
20003c68:	f7ff ff98 	bl	20003b9c <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20003c6c:	2002      	movs	r0, #2
20003c6e:	f7ff ffb7 	bl	20003be0 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20003c72:	1dfb      	adds	r3, r7, #7
20003c74:	781b      	ldrb	r3, [r3, #0]
20003c76:	0018      	movs	r0, r3
20003c78:	f000 f858 	bl	20003d2c <ascii_write_controller>
}
20003c7c:	46c0      	nop			; (mov r8, r8)
20003c7e:	46bd      	mov	sp, r7
20003c80:	b002      	add	sp, #8
20003c82:	bd80      	pop	{r7, pc}

20003c84 <ascii_read_status>:

unsigned char ascii_read_status(void){
20003c84:	b590      	push	{r4, r7, lr}
20003c86:	b083      	sub	sp, #12
20003c88:	af00      	add	r7, sp, #0
	//sÃƒÂ¤tt Port E bit15-8 som ingÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20003c8a:	4b11      	ldr	r3, [pc, #68]	; (20003cd0 <ascii_read_status+0x4c>)
20003c8c:	4a10      	ldr	r2, [pc, #64]	; (20003cd0 <ascii_read_status+0x4c>)
20003c8e:	6812      	ldr	r2, [r2, #0]
20003c90:	0412      	lsls	r2, r2, #16
20003c92:	0c12      	lsrs	r2, r2, #16
20003c94:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20003c96:	2001      	movs	r0, #1
20003c98:	f7ff ffa2 	bl	20003be0 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
20003c9c:	2002      	movs	r0, #2
20003c9e:	f7ff ff7d 	bl	20003b9c <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20003ca2:	1dfc      	adds	r4, r7, #7
20003ca4:	f000 f85a 	bl	20003d5c <ascii_read_controller>
20003ca8:	0003      	movs	r3, r0
20003caa:	7023      	strb	r3, [r4, #0]
	//sÃƒÂ¤tt Port E bit15-8 som utgÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20003cac:	4b08      	ldr	r3, [pc, #32]	; (20003cd0 <ascii_read_status+0x4c>)
20003cae:	4a08      	ldr	r2, [pc, #32]	; (20003cd0 <ascii_read_status+0x4c>)
20003cb0:	6812      	ldr	r2, [r2, #0]
20003cb2:	0412      	lsls	r2, r2, #16
20003cb4:	0c12      	lsrs	r2, r2, #16
20003cb6:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
20003cb8:	4b05      	ldr	r3, [pc, #20]	; (20003cd0 <ascii_read_status+0x4c>)
20003cba:	4a05      	ldr	r2, [pc, #20]	; (20003cd0 <ascii_read_status+0x4c>)
20003cbc:	6812      	ldr	r2, [r2, #0]
20003cbe:	4905      	ldr	r1, [pc, #20]	; (20003cd4 <ascii_read_status+0x50>)
20003cc0:	430a      	orrs	r2, r1
20003cc2:	601a      	str	r2, [r3, #0]
	return rv;
20003cc4:	1dfb      	adds	r3, r7, #7
20003cc6:	781b      	ldrb	r3, [r3, #0]
}
20003cc8:	0018      	movs	r0, r3
20003cca:	46bd      	mov	sp, r7
20003ccc:	b003      	add	sp, #12
20003cce:	bd90      	pop	{r4, r7, pc}
20003cd0:	40021000 	andmi	r1, r2, r0
20003cd4:	55550000 	ldrbpl	r0, [r5, #-0]

20003cd8 <ascii_read_data>:

unsigned char ascii_read_data(void){
20003cd8:	b590      	push	{r4, r7, lr}
20003cda:	b083      	sub	sp, #12
20003cdc:	af00      	add	r7, sp, #0
	//sÃƒÂ¤tt Port E bit15-8 som ingÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20003cde:	4b11      	ldr	r3, [pc, #68]	; (20003d24 <ascii_read_data+0x4c>)
20003ce0:	4a10      	ldr	r2, [pc, #64]	; (20003d24 <ascii_read_data+0x4c>)
20003ce2:	6812      	ldr	r2, [r2, #0]
20003ce4:	0412      	lsls	r2, r2, #16
20003ce6:	0c12      	lsrs	r2, r2, #16
20003ce8:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20003cea:	2001      	movs	r0, #1
20003cec:	f7ff ff56 	bl	20003b9c <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20003cf0:	2002      	movs	r0, #2
20003cf2:	f7ff ff53 	bl	20003b9c <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
20003cf6:	1dfc      	adds	r4, r7, #7
20003cf8:	f000 f830 	bl	20003d5c <ascii_read_controller>
20003cfc:	0003      	movs	r3, r0
20003cfe:	7023      	strb	r3, [r4, #0]
	//sÃƒÂ¤tt Port E bit15-8 som utgÃƒÂ¥ngar
	*portModer &= 0x0000FFFF;
20003d00:	4b08      	ldr	r3, [pc, #32]	; (20003d24 <ascii_read_data+0x4c>)
20003d02:	4a08      	ldr	r2, [pc, #32]	; (20003d24 <ascii_read_data+0x4c>)
20003d04:	6812      	ldr	r2, [r2, #0]
20003d06:	0412      	lsls	r2, r2, #16
20003d08:	0c12      	lsrs	r2, r2, #16
20003d0a:	601a      	str	r2, [r3, #0]
	*portModer |= 0x55550000;
20003d0c:	4b05      	ldr	r3, [pc, #20]	; (20003d24 <ascii_read_data+0x4c>)
20003d0e:	4a05      	ldr	r2, [pc, #20]	; (20003d24 <ascii_read_data+0x4c>)
20003d10:	6812      	ldr	r2, [r2, #0]
20003d12:	4905      	ldr	r1, [pc, #20]	; (20003d28 <ascii_read_data+0x50>)
20003d14:	430a      	orrs	r2, r1
20003d16:	601a      	str	r2, [r3, #0]
	return rv;
20003d18:	1dfb      	adds	r3, r7, #7
20003d1a:	781b      	ldrb	r3, [r3, #0]
}
20003d1c:	0018      	movs	r0, r3
20003d1e:	46bd      	mov	sp, r7
20003d20:	b003      	add	sp, #12
20003d22:	bd90      	pop	{r4, r7, pc}
20003d24:	40021000 	andmi	r1, r2, r0
20003d28:	55550000 	ldrbpl	r0, [r5, #-0]

20003d2c <ascii_write_controller>:

void ascii_write_controller(unsigned char c){
20003d2c:	b580      	push	{r7, lr}
20003d2e:	b082      	sub	sp, #8
20003d30:	af00      	add	r7, sp, #0
20003d32:	0002      	movs	r2, r0
20003d34:	1dfb      	adds	r3, r7, #7
20003d36:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
20003d38:	2040      	movs	r0, #64	; 0x40
20003d3a:	f7ff ff2f 	bl	20003b9c <ascii_ctrl_bit_set>
	*portOdrHigh = c;
20003d3e:	4a06      	ldr	r2, [pc, #24]	; (20003d58 <ascii_write_controller+0x2c>)
20003d40:	1dfb      	adds	r3, r7, #7
20003d42:	781b      	ldrb	r3, [r3, #0]
20003d44:	7013      	strb	r3, [r2, #0]
	delay_250ns();
20003d46:	f7fe ffa9 	bl	20002c9c <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
20003d4a:	2040      	movs	r0, #64	; 0x40
20003d4c:	f7ff ff48 	bl	20003be0 <ascii_ctrl_bit_clear>
}
20003d50:	46c0      	nop			; (mov r8, r8)
20003d52:	46bd      	mov	sp, r7
20003d54:	b002      	add	sp, #8
20003d56:	bd80      	pop	{r7, pc}
20003d58:	40021015 	andmi	r1, r2, r5, lsl r0

20003d5c <ascii_read_controller>:

unsigned char ascii_read_controller(void){
20003d5c:	b580      	push	{r7, lr}
20003d5e:	b082      	sub	sp, #8
20003d60:	af00      	add	r7, sp, #0
	unsigned char c;
	ascii_ctrl_bit_set(B_E);
20003d62:	2040      	movs	r0, #64	; 0x40
20003d64:	f7ff ff1a 	bl	20003b9c <ascii_ctrl_bit_set>
	delay_250ns();
20003d68:	f7fe ff98 	bl	20002c9c <delay_250ns>
	delay_250ns();
20003d6c:	f7fe ff96 	bl	20002c9c <delay_250ns>
	c = *portIdrHigh;
20003d70:	4a06      	ldr	r2, [pc, #24]	; (20003d8c <ascii_read_controller+0x30>)
20003d72:	1dfb      	adds	r3, r7, #7
20003d74:	7812      	ldrb	r2, [r2, #0]
20003d76:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20003d78:	2040      	movs	r0, #64	; 0x40
20003d7a:	f7ff ff31 	bl	20003be0 <ascii_ctrl_bit_clear>
	return c;
20003d7e:	1dfb      	adds	r3, r7, #7
20003d80:	781b      	ldrb	r3, [r3, #0]
}
20003d82:	0018      	movs	r0, r3
20003d84:	46bd      	mov	sp, r7
20003d86:	b002      	add	sp, #8
20003d88:	bd80      	pop	{r7, pc}
20003d8a:	46c0      	nop			; (mov r8, r8)
20003d8c:	40021011 	andmi	r1, r2, r1, lsl r0

20003d90 <ascii_write_char>:

void ascii_write_char(unsigned char c){
20003d90:	b580      	push	{r7, lr}
20003d92:	b082      	sub	sp, #8
20003d94:	af00      	add	r7, sp, #0
20003d96:	0002      	movs	r2, r0
20003d98:	1dfb      	adds	r3, r7, #7
20003d9a:	701a      	strb	r2, [r3, #0]
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20003d9c:	46c0      	nop			; (mov r8, r8)
20003d9e:	f7ff ff71 	bl	20003c84 <ascii_read_status>
20003da2:	0003      	movs	r3, r0
20003da4:	001a      	movs	r2, r3
20003da6:	2380      	movs	r3, #128	; 0x80
20003da8:	4013      	ands	r3, r2
20003daa:	2b80      	cmp	r3, #128	; 0x80
20003dac:	d0f7      	beq.n	20003d9e <ascii_write_char+0xe>
		delay_micro(8); //latenstid
20003dae:	2008      	movs	r0, #8
20003db0:	f7fe ffb8 	bl	20002d24 <delay_micro>
		ascii_write_data(c);
20003db4:	1dfb      	adds	r3, r7, #7
20003db6:	781b      	ldrb	r3, [r3, #0]
20003db8:	0018      	movs	r0, r3
20003dba:	f7ff ff4e 	bl	20003c5a <ascii_write_data>
		delay_micro(50); //istÃƒÂ¤llet fÃƒÂ¶r 43us
20003dbe:	2032      	movs	r0, #50	; 0x32
20003dc0:	f7fe ffb0 	bl	20002d24 <delay_micro>
}
20003dc4:	46c0      	nop			; (mov r8, r8)
20003dc6:	46bd      	mov	sp, r7
20003dc8:	b002      	add	sp, #8
20003dca:	bd80      	pop	{r7, pc}

20003dcc <ascii_goToXY>:

void ascii_goToXY(unsigned char row, unsigned char column){
20003dcc:	b580      	push	{r7, lr}
20003dce:	b084      	sub	sp, #16
20003dd0:	af00      	add	r7, sp, #0
20003dd2:	0002      	movs	r2, r0
20003dd4:	1dfb      	adds	r3, r7, #7
20003dd6:	701a      	strb	r2, [r3, #0]
20003dd8:	1dbb      	adds	r3, r7, #6
20003dda:	1c0a      	adds	r2, r1, #0
20003ddc:	701a      	strb	r2, [r3, #0]
	unsigned char address = row-1;
20003dde:	230f      	movs	r3, #15
20003de0:	18fb      	adds	r3, r7, r3
20003de2:	1dfa      	adds	r2, r7, #7
20003de4:	7812      	ldrb	r2, [r2, #0]
20003de6:	3a01      	subs	r2, #1
20003de8:	701a      	strb	r2, [r3, #0]
	if(column == 2){
20003dea:	1dbb      	adds	r3, r7, #6
20003dec:	781b      	ldrb	r3, [r3, #0]
20003dee:	2b02      	cmp	r3, #2
20003df0:	d106      	bne.n	20003e00 <ascii_goToXY+0x34>
		address += 0x40;
20003df2:	230f      	movs	r3, #15
20003df4:	18fb      	adds	r3, r7, r3
20003df6:	220f      	movs	r2, #15
20003df8:	18ba      	adds	r2, r7, r2
20003dfa:	7812      	ldrb	r2, [r2, #0]
20003dfc:	3240      	adds	r2, #64	; 0x40
20003dfe:	701a      	strb	r2, [r3, #0]
	}
	ascii_write_cmd(0x80 | address);
20003e00:	230f      	movs	r3, #15
20003e02:	18fb      	adds	r3, r7, r3
20003e04:	781b      	ldrb	r3, [r3, #0]
20003e06:	2280      	movs	r2, #128	; 0x80
20003e08:	4252      	negs	r2, r2
20003e0a:	4313      	orrs	r3, r2
20003e0c:	b2db      	uxtb	r3, r3
20003e0e:	0018      	movs	r0, r3
20003e10:	f7ff ff0e 	bl	20003c30 <ascii_write_cmd>
}
20003e14:	46c0      	nop			; (mov r8, r8)
20003e16:	46bd      	mov	sp, r7
20003e18:	b004      	add	sp, #16
20003e1a:	bd80      	pop	{r7, pc}

20003e1c <ascii_init>:

void ascii_init(void){
20003e1c:	b580      	push	{r7, lr}
20003e1e:	af00      	add	r7, sp, #0
	//initiera displayen:
		while((ascii_read_status() & 0x80) == 0x80){} //VÃ¤nta tills displayed Ã¤r redo
20003e20:	46c0      	nop			; (mov r8, r8)
20003e22:	f7ff ff2f 	bl	20003c84 <ascii_read_status>
20003e26:	0003      	movs	r3, r0
20003e28:	001a      	movs	r2, r3
20003e2a:	2380      	movs	r3, #128	; 0x80
20003e2c:	4013      	ands	r3, r2
20003e2e:	2b80      	cmp	r3, #128	; 0x80
20003e30:	d0f7      	beq.n	20003e22 <ascii_init+0x6>
		delay_micro(20); //latenstid 
20003e32:	2014      	movs	r0, #20
20003e34:	f7fe ff76 	bl	20002d24 <delay_micro>
		ascii_write_cmd(0x38); //Function set (39us), 000011NFXX, N = antal rader = 2, F = -->0=5x8<--, 1=5x11
20003e38:	2038      	movs	r0, #56	; 0x38
20003e3a:	f7ff fef9 	bl	20003c30 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20003e3e:	2064      	movs	r0, #100	; 0x64
20003e40:	f7fe ff70 	bl	20002d24 <delay_micro>
		
	// clear display
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20003e44:	46c0      	nop			; (mov r8, r8)
20003e46:	f7ff ff1d 	bl	20003c84 <ascii_read_status>
20003e4a:	0003      	movs	r3, r0
20003e4c:	001a      	movs	r2, r3
20003e4e:	2380      	movs	r3, #128	; 0x80
20003e50:	4013      	ands	r3, r2
20003e52:	2b80      	cmp	r3, #128	; 0x80
20003e54:	d0f7      	beq.n	20003e46 <ascii_init+0x2a>
		delay_micro(20); //latenstid
20003e56:	2014      	movs	r0, #20
20003e58:	f7fe ff64 	bl	20002d24 <delay_micro>
		ascii_write_cmd(0x01); 
20003e5c:	2001      	movs	r0, #1
20003e5e:	f7ff fee7 	bl	20003c30 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20003e62:	2064      	movs	r0, #100	; 0x64
20003e64:	f7fe ff5e 	bl	20002d24 <delay_micro>

	//display control:
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20003e68:	46c0      	nop			; (mov r8, r8)
20003e6a:	f7ff ff0b 	bl	20003c84 <ascii_read_status>
20003e6e:	0003      	movs	r3, r0
20003e70:	001a      	movs	r2, r3
20003e72:	2380      	movs	r3, #128	; 0x80
20003e74:	4013      	ands	r3, r2
20003e76:	2b80      	cmp	r3, #128	; 0x80
20003e78:	d0f7      	beq.n	20003e6a <ascii_init+0x4e>
		delay_micro(20); //latenstid
20003e7a:	2014      	movs	r0, #20
20003e7c:	f7fe ff52 	bl	20002d24 <delay_micro>
		ascii_write_cmd(0x0C); //000001 + XXX. X:ena = 0:av / 1:pÃƒÂ¥ -  SkÃƒÂ¤rm/MarkÃƒÂ¶r/BlinkaMarkÃƒÂ¶ren
20003e80:	200c      	movs	r0, #12
20003e82:	f7ff fed5 	bl	20003c30 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20003e86:	2064      	movs	r0, #100	; 0x64
20003e88:	f7fe ff4c 	bl	20002d24 <delay_micro>
		
	// entry mode set
		while((ascii_read_status() & 0x80) == 0x80){} //VÃƒÂ¤nta tills displayed ÃƒÂ¤r redo
20003e8c:	46c0      	nop			; (mov r8, r8)
20003e8e:	f7ff fef9 	bl	20003c84 <ascii_read_status>
20003e92:	0003      	movs	r3, r0
20003e94:	001a      	movs	r2, r3
20003e96:	2380      	movs	r3, #128	; 0x80
20003e98:	4013      	ands	r3, r2
20003e9a:	2b80      	cmp	r3, #128	; 0x80
20003e9c:	d0f7      	beq.n	20003e8e <ascii_init+0x72>
		delay_micro(20); //latenstid
20003e9e:	2014      	movs	r0, #20
20003ea0:	f7fe ff40 	bl	20002d24 <delay_micro>
		ascii_write_cmd(0x06); //00000001 + XY. X=0: markÃƒÂ¶ren vÃƒÂ¤nst. || X=1: marÃƒÂ¶kren hÃƒÂ¶g. - Y=0: skift av || Y=1: skift pÃƒÂ¥
20003ea4:	2006      	movs	r0, #6
20003ea6:	f7ff fec3 	bl	20003c30 <ascii_write_cmd>
		delay_micro(100); //istÃƒÂ¤llet fÃƒÂ¶r 39us
20003eaa:	2064      	movs	r0, #100	; 0x64
20003eac:	f7fe ff3a 	bl	20002d24 <delay_micro>
		
		
}
20003eb0:	46c0      	nop			; (mov r8, r8)
20003eb2:	46bd      	mov	sp, r7
20003eb4:	bd80      	pop	{r7, pc}

20003eb6 <init_application>:

void init_application(void){
20003eb6:	b580      	push	{r7, lr}
20003eb8:	af00      	add	r7, sp, #0
	#ifdef USBDM
		*((unsigned long *) 0x40023830) = 0x18; //startar klockor pÃ¥ port D och E
		//__asm volatile ("LDR R0, =0x08000209\n BLX R0 \n"); //initiera PLL
	#endif
	//"initierar Port E med anvÃƒÂ¤ndning med LCD-modulen, dvs. sÃƒÂ¥vÃƒÂ¤l port E0-7 som E8-15 sÃƒÂ¤tts till utgÃƒÂ¥ngar
	* portModer = 0x55555555;
20003eba:	4b03      	ldr	r3, [pc, #12]	; (20003ec8 <init_application+0x12>)
20003ebc:	4a03      	ldr	r2, [pc, #12]	; (20003ecc <init_application+0x16>)
20003ebe:	601a      	str	r2, [r3, #0]
}
20003ec0:	46c0      	nop			; (mov r8, r8)
20003ec2:	46bd      	mov	sp, r7
20003ec4:	bd80      	pop	{r7, pc}
20003ec6:	46c0      	nop			; (mov r8, r8)
20003ec8:	40021000 	andmi	r1, r2, r0
20003ecc:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20003ed0 <set_up_ascii>:

void set_up_ascii( void ) {
20003ed0:	b580      	push	{r7, lr}
20003ed2:	af00      	add	r7, sp, #0
	init_application();
20003ed4:	f7ff ffef 	bl	20003eb6 <init_application>
	ascii_init();
20003ed8:	f7ff ffa0 	bl	20003e1c <ascii_init>
}
20003edc:	46c0      	nop			; (mov r8, r8)
20003ede:	46bd      	mov	sp, r7
20003ee0:	bd80      	pop	{r7, pc}

20003ee2 <clear_ascii>:

void clear_ascii( void ) {
20003ee2:	b590      	push	{r4, r7, lr}
20003ee4:	b089      	sub	sp, #36	; 0x24
20003ee6:	af00      	add	r7, sp, #0
	char *s;
	char clear[] = "                    ";
20003ee8:	1d3b      	adds	r3, r7, #4
20003eea:	4a17      	ldr	r2, [pc, #92]	; (20003f48 <clear_ascii+0x66>)
20003eec:	ca13      	ldmia	r2!, {r0, r1, r4}
20003eee:	c313      	stmia	r3!, {r0, r1, r4}
20003ef0:	ca03      	ldmia	r2!, {r0, r1}
20003ef2:	c303      	stmia	r3!, {r0, r1}
20003ef4:	7812      	ldrb	r2, [r2, #0]
20003ef6:	701a      	strb	r2, [r3, #0]
	
	s = clear;
20003ef8:	1d3b      	adds	r3, r7, #4
20003efa:	61fb      	str	r3, [r7, #28]
	ascii_goToXY(1,1);
20003efc:	2101      	movs	r1, #1
20003efe:	2001      	movs	r0, #1
20003f00:	f7ff ff64 	bl	20003dcc <ascii_goToXY>
	while(*s){
20003f04:	e006      	b.n	20003f14 <clear_ascii+0x32>
		ascii_write_char(*s++);
20003f06:	69fb      	ldr	r3, [r7, #28]
20003f08:	1c5a      	adds	r2, r3, #1
20003f0a:	61fa      	str	r2, [r7, #28]
20003f0c:	781b      	ldrb	r3, [r3, #0]
20003f0e:	0018      	movs	r0, r3
20003f10:	f7ff ff3e 	bl	20003d90 <ascii_write_char>
	while(*s){
20003f14:	69fb      	ldr	r3, [r7, #28]
20003f16:	781b      	ldrb	r3, [r3, #0]
20003f18:	2b00      	cmp	r3, #0
20003f1a:	d1f4      	bne.n	20003f06 <clear_ascii+0x24>
	}
	s = clear;
20003f1c:	1d3b      	adds	r3, r7, #4
20003f1e:	61fb      	str	r3, [r7, #28]
	ascii_goToXY(1,2);
20003f20:	2102      	movs	r1, #2
20003f22:	2001      	movs	r0, #1
20003f24:	f7ff ff52 	bl	20003dcc <ascii_goToXY>
	while(*s){
20003f28:	e006      	b.n	20003f38 <clear_ascii+0x56>
		ascii_write_char(*s++);
20003f2a:	69fb      	ldr	r3, [r7, #28]
20003f2c:	1c5a      	adds	r2, r3, #1
20003f2e:	61fa      	str	r2, [r7, #28]
20003f30:	781b      	ldrb	r3, [r3, #0]
20003f32:	0018      	movs	r0, r3
20003f34:	f7ff ff2c 	bl	20003d90 <ascii_write_char>
	while(*s){
20003f38:	69fb      	ldr	r3, [r7, #28]
20003f3a:	781b      	ldrb	r3, [r3, #0]
20003f3c:	2b00      	cmp	r3, #0
20003f3e:	d1f4      	bne.n	20003f2a <clear_ascii+0x48>
	}
}
20003f40:	46c0      	nop			; (mov r8, r8)
20003f42:	46bd      	mov	sp, r7
20003f44:	b009      	add	sp, #36	; 0x24
20003f46:	bd90      	pop	{r4, r7, pc}
20003f48:	2000e6ec 	andcs	lr, r0, ip, ror #13

20003f4c <ascii_write>:

void ascii_write(char *row1, char *row2) {
20003f4c:	b580      	push	{r7, lr}
20003f4e:	b082      	sub	sp, #8
20003f50:	af00      	add	r7, sp, #0
20003f52:	6078      	str	r0, [r7, #4]
20003f54:	6039      	str	r1, [r7, #0]
	clear_ascii();
20003f56:	f7ff ffc4 	bl	20003ee2 <clear_ascii>
	
	ascii_goToXY(1,1);
20003f5a:	2101      	movs	r1, #1
20003f5c:	2001      	movs	r0, #1
20003f5e:	f7ff ff35 	bl	20003dcc <ascii_goToXY>
	while(*row1){
20003f62:	e006      	b.n	20003f72 <ascii_write+0x26>
		ascii_write_char(*row1++);
20003f64:	687b      	ldr	r3, [r7, #4]
20003f66:	1c5a      	adds	r2, r3, #1
20003f68:	607a      	str	r2, [r7, #4]
20003f6a:	781b      	ldrb	r3, [r3, #0]
20003f6c:	0018      	movs	r0, r3
20003f6e:	f7ff ff0f 	bl	20003d90 <ascii_write_char>
	while(*row1){
20003f72:	687b      	ldr	r3, [r7, #4]
20003f74:	781b      	ldrb	r3, [r3, #0]
20003f76:	2b00      	cmp	r3, #0
20003f78:	d1f4      	bne.n	20003f64 <ascii_write+0x18>
	}	
	ascii_goToXY(1,2);
20003f7a:	2102      	movs	r1, #2
20003f7c:	2001      	movs	r0, #1
20003f7e:	f7ff ff25 	bl	20003dcc <ascii_goToXY>
	while(*row2){
20003f82:	e006      	b.n	20003f92 <ascii_write+0x46>
		ascii_write_char(*row2++);
20003f84:	683b      	ldr	r3, [r7, #0]
20003f86:	1c5a      	adds	r2, r3, #1
20003f88:	603a      	str	r2, [r7, #0]
20003f8a:	781b      	ldrb	r3, [r3, #0]
20003f8c:	0018      	movs	r0, r3
20003f8e:	f7ff feff 	bl	20003d90 <ascii_write_char>
	while(*row2){
20003f92:	683b      	ldr	r3, [r7, #0]
20003f94:	781b      	ldrb	r3, [r3, #0]
20003f96:	2b00      	cmp	r3, #0
20003f98:	d1f4      	bne.n	20003f84 <ascii_write+0x38>
	}
	
	ascii_goToXY(21,1);
20003f9a:	2101      	movs	r1, #1
20003f9c:	2015      	movs	r0, #21
20003f9e:	f7ff ff15 	bl	20003dcc <ascii_goToXY>
}
20003fa2:	46c0      	nop			; (mov r8, r8)
20003fa4:	46bd      	mov	sp, r7
20003fa6:	b002      	add	sp, #8
20003fa8:	bd80      	pop	{r7, pc}

20003faa <ascii_write_part>:

void ascii_write_part(char *row1, char *row2, int limit1, int limit2) {
20003faa:	b580      	push	{r7, lr}
20003fac:	b086      	sub	sp, #24
20003fae:	af00      	add	r7, sp, #0
20003fb0:	60f8      	str	r0, [r7, #12]
20003fb2:	60b9      	str	r1, [r7, #8]
20003fb4:	607a      	str	r2, [r7, #4]
20003fb6:	603b      	str	r3, [r7, #0]
	clear_ascii();
20003fb8:	f7ff ff93 	bl	20003ee2 <clear_ascii>
	
	ascii_goToXY(1,1);
20003fbc:	2101      	movs	r1, #1
20003fbe:	2001      	movs	r0, #1
20003fc0:	f7ff ff04 	bl	20003dcc <ascii_goToXY>
	int i = 0;
20003fc4:	2300      	movs	r3, #0
20003fc6:	617b      	str	r3, [r7, #20]
	if(limit1 > 0) {
20003fc8:	687b      	ldr	r3, [r7, #4]
20003fca:	2b00      	cmp	r3, #0
20003fcc:	dd11      	ble.n	20003ff2 <ascii_write_part+0x48>
		while(*row1 && (i++ < limit1)){
20003fce:	e006      	b.n	20003fde <ascii_write_part+0x34>
			ascii_write_char(*row1++);
20003fd0:	68fb      	ldr	r3, [r7, #12]
20003fd2:	1c5a      	adds	r2, r3, #1
20003fd4:	60fa      	str	r2, [r7, #12]
20003fd6:	781b      	ldrb	r3, [r3, #0]
20003fd8:	0018      	movs	r0, r3
20003fda:	f7ff fed9 	bl	20003d90 <ascii_write_char>
		while(*row1 && (i++ < limit1)){
20003fde:	68fb      	ldr	r3, [r7, #12]
20003fe0:	781b      	ldrb	r3, [r3, #0]
20003fe2:	2b00      	cmp	r3, #0
20003fe4:	d005      	beq.n	20003ff2 <ascii_write_part+0x48>
20003fe6:	697b      	ldr	r3, [r7, #20]
20003fe8:	1c5a      	adds	r2, r3, #1
20003fea:	617a      	str	r2, [r7, #20]
20003fec:	687a      	ldr	r2, [r7, #4]
20003fee:	4293      	cmp	r3, r2
20003ff0:	dbee      	blt.n	20003fd0 <ascii_write_part+0x26>
		}			
	}

	ascii_goToXY(1,2);
20003ff2:	2102      	movs	r1, #2
20003ff4:	2001      	movs	r0, #1
20003ff6:	f7ff fee9 	bl	20003dcc <ascii_goToXY>
	i = 0;
20003ffa:	2300      	movs	r3, #0
20003ffc:	617b      	str	r3, [r7, #20]
	if(limit2 > 0) {
20003ffe:	683b      	ldr	r3, [r7, #0]
20004000:	2b00      	cmp	r3, #0
20004002:	dd11      	ble.n	20004028 <ascii_write_part+0x7e>
		while(*row2 && (i++ < limit2)){
20004004:	e006      	b.n	20004014 <ascii_write_part+0x6a>
			ascii_write_char(*row2++);
20004006:	68bb      	ldr	r3, [r7, #8]
20004008:	1c5a      	adds	r2, r3, #1
2000400a:	60ba      	str	r2, [r7, #8]
2000400c:	781b      	ldrb	r3, [r3, #0]
2000400e:	0018      	movs	r0, r3
20004010:	f7ff febe 	bl	20003d90 <ascii_write_char>
		while(*row2 && (i++ < limit2)){
20004014:	68bb      	ldr	r3, [r7, #8]
20004016:	781b      	ldrb	r3, [r3, #0]
20004018:	2b00      	cmp	r3, #0
2000401a:	d005      	beq.n	20004028 <ascii_write_part+0x7e>
2000401c:	697b      	ldr	r3, [r7, #20]
2000401e:	1c5a      	adds	r2, r3, #1
20004020:	617a      	str	r2, [r7, #20]
20004022:	683a      	ldr	r2, [r7, #0]
20004024:	4293      	cmp	r3, r2
20004026:	dbee      	blt.n	20004006 <ascii_write_part+0x5c>
		}
	}
	
	ascii_goToXY(21,1);
20004028:	2101      	movs	r1, #1
2000402a:	2015      	movs	r0, #21
2000402c:	f7ff fece 	bl	20003dcc <ascii_goToXY>
}
20004030:	46c0      	nop			; (mov r8, r8)
20004032:	46bd      	mov	sp, r7
20004034:	b006      	add	sp, #24
20004036:	bd80      	pop	{r7, pc}

20004038 <ascii_test>:



void ascii_test(void) {
20004038:	b590      	push	{r4, r7, lr}
2000403a:	b08b      	sub	sp, #44	; 0x2c
2000403c:	af00      	add	r7, sp, #0
	char *s;
	char test1[] = "Alfanumerisk";
2000403e:	2314      	movs	r3, #20
20004040:	18fb      	adds	r3, r7, r3
20004042:	4a1c      	ldr	r2, [pc, #112]	; (200040b4 <ascii_test+0x7c>)
20004044:	ca13      	ldmia	r2!, {r0, r1, r4}
20004046:	c313      	stmia	r3!, {r0, r1, r4}
20004048:	7812      	ldrb	r2, [r2, #0]
2000404a:	701a      	strb	r2, [r3, #0]
	char test2[] = "hardåäöare suger";
2000404c:	003b      	movs	r3, r7
2000404e:	4a1a      	ldr	r2, [pc, #104]	; (200040b8 <ascii_test+0x80>)
20004050:	ca13      	ldmia	r2!, {r0, r1, r4}
20004052:	c313      	stmia	r3!, {r0, r1, r4}
20004054:	ca03      	ldmia	r2!, {r0, r1}
20004056:	c303      	stmia	r3!, {r0, r1}
	
	init_application();
20004058:	f7ff ff2d 	bl	20003eb6 <init_application>
	ascii_init();
2000405c:	f7ff fede 	bl	20003e1c <ascii_init>
	ascii_goToXY(1,1);
20004060:	2101      	movs	r1, #1
20004062:	2001      	movs	r0, #1
20004064:	f7ff feb2 	bl	20003dcc <ascii_goToXY>
	s = test1;
20004068:	2314      	movs	r3, #20
2000406a:	18fb      	adds	r3, r7, r3
2000406c:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
2000406e:	e006      	b.n	2000407e <ascii_test+0x46>
		ascii_write_char(*s++);
20004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20004072:	1c5a      	adds	r2, r3, #1
20004074:	627a      	str	r2, [r7, #36]	; 0x24
20004076:	781b      	ldrb	r3, [r3, #0]
20004078:	0018      	movs	r0, r3
2000407a:	f7ff fe89 	bl	20003d90 <ascii_write_char>
	while(*s){
2000407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20004080:	781b      	ldrb	r3, [r3, #0]
20004082:	2b00      	cmp	r3, #0
20004084:	d1f4      	bne.n	20004070 <ascii_test+0x38>
	}
	ascii_goToXY(1,2);
20004086:	2102      	movs	r1, #2
20004088:	2001      	movs	r0, #1
2000408a:	f7ff fe9f 	bl	20003dcc <ascii_goToXY>
	s = test2;
2000408e:	003b      	movs	r3, r7
20004090:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
20004092:	e006      	b.n	200040a2 <ascii_test+0x6a>
		ascii_write_char(*s++);
20004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20004096:	1c5a      	adds	r2, r3, #1
20004098:	627a      	str	r2, [r7, #36]	; 0x24
2000409a:	781b      	ldrb	r3, [r3, #0]
2000409c:	0018      	movs	r0, r3
2000409e:	f7ff fe77 	bl	20003d90 <ascii_write_char>
	while(*s){
200040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200040a4:	781b      	ldrb	r3, [r3, #0]
200040a6:	2b00      	cmp	r3, #0
200040a8:	d1f4      	bne.n	20004094 <ascii_test+0x5c>
	}
	return 0;
200040aa:	46c0      	nop			; (mov r8, r8)
200040ac:	46bd      	mov	sp, r7
200040ae:	b00b      	add	sp, #44	; 0x2c
200040b0:	bd90      	pop	{r4, r7, pc}
200040b2:	46c0      	nop			; (mov r8, r8)
200040b4:	2000e704 	andcs	lr, r0, r4, lsl #14
200040b8:	2000e714 	andcs	lr, r0, r4, lsl r7

200040bc <display>:
#include "slow_text.h"
#include "ascii_display.h"

void display(SlowText *this, int length_of_row1) {
200040bc:	b580      	push	{r7, lr}
200040be:	b084      	sub	sp, #16
200040c0:	af00      	add	r7, sp, #0
200040c2:	6078      	str	r0, [r7, #4]
200040c4:	6039      	str	r1, [r7, #0]
	int limit1 = this->counter / this->speed;
200040c6:	687b      	ldr	r3, [r7, #4]
200040c8:	689a      	ldr	r2, [r3, #8]
200040ca:	687b      	ldr	r3, [r7, #4]
200040cc:	68db      	ldr	r3, [r3, #12]
200040ce:	0019      	movs	r1, r3
200040d0:	0010      	movs	r0, r2
200040d2:	f000 f999 	bl	20004408 <__divsi3>
200040d6:	0003      	movs	r3, r0
200040d8:	60fb      	str	r3, [r7, #12]
	int limit2 = this->counter / this->speed - length_of_row1;
200040da:	687b      	ldr	r3, [r7, #4]
200040dc:	689a      	ldr	r2, [r3, #8]
200040de:	687b      	ldr	r3, [r7, #4]
200040e0:	68db      	ldr	r3, [r3, #12]
200040e2:	0019      	movs	r1, r3
200040e4:	0010      	movs	r0, r2
200040e6:	f000 f98f 	bl	20004408 <__divsi3>
200040ea:	0003      	movs	r3, r0
200040ec:	001a      	movs	r2, r3
200040ee:	683b      	ldr	r3, [r7, #0]
200040f0:	1ad3      	subs	r3, r2, r3
200040f2:	60bb      	str	r3, [r7, #8]
	ascii_write_part(this->row1, this->row2, limit1, limit2);
200040f4:	687b      	ldr	r3, [r7, #4]
200040f6:	6818      	ldr	r0, [r3, #0]
200040f8:	687b      	ldr	r3, [r7, #4]
200040fa:	6859      	ldr	r1, [r3, #4]
200040fc:	68bb      	ldr	r3, [r7, #8]
200040fe:	68fa      	ldr	r2, [r7, #12]
20004100:	f7ff ff53 	bl	20003faa <ascii_write_part>
	
	this->counter++;
20004104:	687b      	ldr	r3, [r7, #4]
20004106:	689b      	ldr	r3, [r3, #8]
20004108:	1c5a      	adds	r2, r3, #1
2000410a:	687b      	ldr	r3, [r7, #4]
2000410c:	609a      	str	r2, [r3, #8]
}
2000410e:	46c0      	nop			; (mov r8, r8)
20004110:	46bd      	mov	sp, r7
20004112:	b004      	add	sp, #16
20004114:	bd80      	pop	{r7, pc}

20004116 <init_slow_text>:

void init_slow_text(SlowText *obj, char *row1, char *row2, int speed) {
20004116:	b580      	push	{r7, lr}
20004118:	b084      	sub	sp, #16
2000411a:	af00      	add	r7, sp, #0
2000411c:	60f8      	str	r0, [r7, #12]
2000411e:	60b9      	str	r1, [r7, #8]
20004120:	607a      	str	r2, [r7, #4]
20004122:	603b      	str	r3, [r7, #0]
	obj->row1 = row1;
20004124:	68fb      	ldr	r3, [r7, #12]
20004126:	68ba      	ldr	r2, [r7, #8]
20004128:	601a      	str	r2, [r3, #0]
	obj->row2 = row2;
2000412a:	68fb      	ldr	r3, [r7, #12]
2000412c:	687a      	ldr	r2, [r7, #4]
2000412e:	605a      	str	r2, [r3, #4]
	obj->speed = speed;
20004130:	68fb      	ldr	r3, [r7, #12]
20004132:	683a      	ldr	r2, [r7, #0]
20004134:	60da      	str	r2, [r3, #12]
	obj->counter = 0;
20004136:	68fb      	ldr	r3, [r7, #12]
20004138:	2200      	movs	r2, #0
2000413a:	609a      	str	r2, [r3, #8]
	obj->display = display;
2000413c:	68fb      	ldr	r3, [r7, #12]
2000413e:	4a03      	ldr	r2, [pc, #12]	; (2000414c <init_slow_text+0x36>)
20004140:	611a      	str	r2, [r3, #16]
20004142:	46c0      	nop			; (mov r8, r8)
20004144:	46bd      	mov	sp, r7
20004146:	b004      	add	sp, #16
20004148:	bd80      	pop	{r7, pc}
2000414a:	46c0      	nop			; (mov r8, r8)
2000414c:	200040bd 	strhcs	r4, [r0], -sp

20004150 <initSprites>:


GameObject indoorsObj;
Image indoorsImage;
Image indoorsImages[1];
static void initSprites( void ) {	
20004150:	b580      	push	{r7, lr}
20004152:	b084      	sub	sp, #16
20004154:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempIndoorsLight;
20004156:	4b12      	ldr	r3, [pc, #72]	; (200041a0 <initSprites+0x50>)
20004158:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer11, indoors_light_bits, indoors_black_width, indoors_black_height);
2000415a:	4912      	ldr	r1, [pc, #72]	; (200041a4 <initSprites+0x54>)
2000415c:	68f8      	ldr	r0, [r7, #12]
2000415e:	2340      	movs	r3, #64	; 0x40
20004160:	2280      	movs	r2, #128	; 0x80
20004162:	f7ff fcd1 	bl	20003b08 <load_sprite>
	indoorsLight = pointer11;
20004166:	4b10      	ldr	r3, [pc, #64]	; (200041a8 <initSprites+0x58>)
20004168:	68fa      	ldr	r2, [r7, #12]
2000416a:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempIndoorsGray;
2000416c:	4b0f      	ldr	r3, [pc, #60]	; (200041ac <initSprites+0x5c>)
2000416e:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer12, indoors_gray_bits, indoors_black_width, indoors_black_height);
20004170:	490f      	ldr	r1, [pc, #60]	; (200041b0 <initSprites+0x60>)
20004172:	68b8      	ldr	r0, [r7, #8]
20004174:	2340      	movs	r3, #64	; 0x40
20004176:	2280      	movs	r2, #128	; 0x80
20004178:	f7ff fcc6 	bl	20003b08 <load_sprite>
	indoorsGray = pointer12;
2000417c:	4b0d      	ldr	r3, [pc, #52]	; (200041b4 <initSprites+0x64>)
2000417e:	68ba      	ldr	r2, [r7, #8]
20004180:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempIndoorsBlack;
20004182:	4b0d      	ldr	r3, [pc, #52]	; (200041b8 <initSprites+0x68>)
20004184:	607b      	str	r3, [r7, #4]
	load_sprite(pointer13, indoors_black_bits, indoors_black_width, indoors_black_height);
20004186:	490d      	ldr	r1, [pc, #52]	; (200041bc <initSprites+0x6c>)
20004188:	6878      	ldr	r0, [r7, #4]
2000418a:	2340      	movs	r3, #64	; 0x40
2000418c:	2280      	movs	r2, #128	; 0x80
2000418e:	f7ff fcbb 	bl	20003b08 <load_sprite>
	indoorsBlack = pointer13;	
20004192:	4b0b      	ldr	r3, [pc, #44]	; (200041c0 <initSprites+0x70>)
20004194:	687a      	ldr	r2, [r7, #4]
20004196:	601a      	str	r2, [r3, #0]
	
}
20004198:	46c0      	nop			; (mov r8, r8)
2000419a:	46bd      	mov	sp, r7
2000419c:	b004      	add	sp, #16
2000419e:	bd80      	pop	{r7, pc}
200041a0:	20006da4 	andcs	r6, r0, r4, lsr #27
200041a4:	2000d474 	andcs	sp, r0, r4, ror r4
200041a8:	20006e00 	andcs	r6, r0, r0, lsl #28
200041ac:	20006d98 	mulcs	r0, r8, sp
200041b0:	2000d074 	andcs	sp, r0, r4, ror r0
200041b4:	20006dbc 			; <UNDEFINED> instruction: 0x20006dbc
200041b8:	20006db0 			; <UNDEFINED> instruction: 0x20006db0
200041bc:	2000cc74 	andcs	ip, r0, r4, ror ip
200041c0:	20006df0 	strdcs	r6, [r0], -r0

200041c4 <init_indoors>:
	
void init_indoors( GameObject *indoorsObj ) {
200041c4:	b590      	push	{r4, r7, lr}
200041c6:	b083      	sub	sp, #12
200041c8:	af00      	add	r7, sp, #0
200041ca:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
200041cc:	4b14      	ldr	r3, [pc, #80]	; (20004220 <init_indoors+0x5c>)
200041ce:	681b      	ldr	r3, [r3, #0]
200041d0:	2b00      	cmp	r3, #0
200041d2:	d011      	beq.n	200041f8 <init_indoors+0x34>
		initSprites();
200041d4:	f7ff ffbc 	bl	20004150 <initSprites>
		firstTime = 0;			
200041d8:	4b11      	ldr	r3, [pc, #68]	; (20004220 <init_indoors+0x5c>)
200041da:	2200      	movs	r2, #0
200041dc:	601a      	str	r2, [r3, #0]

		indoorsImages[0] = indoorsImage;
200041de:	4b11      	ldr	r3, [pc, #68]	; (20004224 <init_indoors+0x60>)
200041e0:	4a11      	ldr	r2, [pc, #68]	; (20004228 <init_indoors+0x64>)
200041e2:	ca13      	ldmia	r2!, {r0, r1, r4}
200041e4:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&indoorsImages[0], indoorsBlack, indoorsGray, indoorsLight);
200041e6:	4b11      	ldr	r3, [pc, #68]	; (2000422c <init_indoors+0x68>)
200041e8:	6819      	ldr	r1, [r3, #0]
200041ea:	4b11      	ldr	r3, [pc, #68]	; (20004230 <init_indoors+0x6c>)
200041ec:	681a      	ldr	r2, [r3, #0]
200041ee:	4b11      	ldr	r3, [pc, #68]	; (20004234 <init_indoors+0x70>)
200041f0:	681b      	ldr	r3, [r3, #0]
200041f2:	480c      	ldr	r0, [pc, #48]	; (20004224 <init_indoors+0x60>)
200041f4:	f7ff fc74 	bl	20003ae0 <load_image>
	}
	
	indoorsObj->images = indoorsImages;
200041f8:	687b      	ldr	r3, [r7, #4]
200041fa:	4a0a      	ldr	r2, [pc, #40]	; (20004224 <init_indoors+0x60>)
200041fc:	601a      	str	r2, [r3, #0]

	indoorsObj->current_frame = 0;
200041fe:	687b      	ldr	r3, [r7, #4]
20004200:	2200      	movs	r2, #0
20004202:	615a      	str	r2, [r3, #20]
	indoorsObj->n_frames = 1;
20004204:	687b      	ldr	r3, [r7, #4]
20004206:	2201      	movs	r2, #1
20004208:	619a      	str	r2, [r3, #24]
	indoorsObj->animation_speed = 1;
2000420a:	687b      	ldr	r3, [r7, #4]
2000420c:	2201      	movs	r2, #1
2000420e:	61da      	str	r2, [r3, #28]
	indoorsObj->animation_counter = 0;
20004210:	687b      	ldr	r3, [r7, #4]
20004212:	2200      	movs	r2, #0
20004214:	621a      	str	r2, [r3, #32]
}
20004216:	46c0      	nop			; (mov r8, r8)
20004218:	46bd      	mov	sp, r7
2000421a:	b003      	add	sp, #12
2000421c:	bd90      	pop	{r4, r7, pc}
2000421e:	46c0      	nop			; (mov r8, r8)
20004220:	2000d874 	andcs	sp, r0, r4, ror r8
20004224:	20006de4 	andcs	r6, r0, r4, ror #27
20004228:	20006df4 	strdcs	r6, [r0], -r4
2000422c:	20006df0 	strdcs	r6, [r0], -r0
20004230:	20006dbc 			; <UNDEFINED> instruction: 0x20006dbc
20004234:	20006e00 	andcs	r6, r0, r0, lsl #28

20004238 <initSprites>:


GameObject indoors2Obj;
Image indoors2Image;
Image indoors2Images[1];
static void initSprites( void ) {	
20004238:	b580      	push	{r7, lr}
2000423a:	b084      	sub	sp, #16
2000423c:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempIndoors2Light;
2000423e:	4b12      	ldr	r3, [pc, #72]	; (20004288 <initSprites+0x50>)
20004240:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer11, indoors2_light_bits, indoors2_black_width, indoors2_black_height);
20004242:	4912      	ldr	r1, [pc, #72]	; (2000428c <initSprites+0x54>)
20004244:	68f8      	ldr	r0, [r7, #12]
20004246:	2340      	movs	r3, #64	; 0x40
20004248:	2280      	movs	r2, #128	; 0x80
2000424a:	f7ff fc5d 	bl	20003b08 <load_sprite>
	indoors2Light = pointer11;
2000424e:	4b10      	ldr	r3, [pc, #64]	; (20004290 <initSprites+0x58>)
20004250:	68fa      	ldr	r2, [r7, #12]
20004252:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempIndoors2Gray;
20004254:	4b0f      	ldr	r3, [pc, #60]	; (20004294 <initSprites+0x5c>)
20004256:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer12, indoors2_gray_bits, indoors2_black_width, indoors2_black_height);
20004258:	490f      	ldr	r1, [pc, #60]	; (20004298 <initSprites+0x60>)
2000425a:	68b8      	ldr	r0, [r7, #8]
2000425c:	2340      	movs	r3, #64	; 0x40
2000425e:	2280      	movs	r2, #128	; 0x80
20004260:	f7ff fc52 	bl	20003b08 <load_sprite>
	indoors2Gray = pointer12;
20004264:	4b0d      	ldr	r3, [pc, #52]	; (2000429c <initSprites+0x64>)
20004266:	68ba      	ldr	r2, [r7, #8]
20004268:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempIndoors2Black;
2000426a:	4b0d      	ldr	r3, [pc, #52]	; (200042a0 <initSprites+0x68>)
2000426c:	607b      	str	r3, [r7, #4]
	load_sprite(pointer13, indoors2_black_bits, indoors2_black_width, indoors2_black_height);
2000426e:	490d      	ldr	r1, [pc, #52]	; (200042a4 <initSprites+0x6c>)
20004270:	6878      	ldr	r0, [r7, #4]
20004272:	2340      	movs	r3, #64	; 0x40
20004274:	2280      	movs	r2, #128	; 0x80
20004276:	f7ff fc47 	bl	20003b08 <load_sprite>
	indoors2Black = pointer13;	
2000427a:	4b0b      	ldr	r3, [pc, #44]	; (200042a8 <initSprites+0x70>)
2000427c:	687a      	ldr	r2, [r7, #4]
2000427e:	601a      	str	r2, [r3, #0]
	
}
20004280:	46c0      	nop			; (mov r8, r8)
20004282:	46bd      	mov	sp, r7
20004284:	b004      	add	sp, #16
20004286:	bd80      	pop	{r7, pc}
20004288:	20006e60 	andcs	r6, r0, r0, ror #28
2000428c:	2000e078 	andcs	lr, r0, r8, ror r0
20004290:	20006e50 	andcs	r6, r0, r0, asr lr
20004294:	20006e44 	andcs	r6, r0, r4, asr #28
20004298:	2000dc78 	andcs	sp, r0, r8, ror ip
2000429c:	20006e28 	andcs	r6, r0, r8, lsr #28
200042a0:	20006e54 	andcs	r6, r0, r4, asr lr
200042a4:	2000d878 	andcs	sp, r0, r8, ror r8
200042a8:	20006e6c 	andcs	r6, r0, ip, ror #28

200042ac <init_indoors2>:
	
void init_indoors2( GameObject *indoors2Obj ) {
200042ac:	b590      	push	{r4, r7, lr}
200042ae:	b083      	sub	sp, #12
200042b0:	af00      	add	r7, sp, #0
200042b2:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
200042b4:	4b14      	ldr	r3, [pc, #80]	; (20004308 <init_indoors2+0x5c>)
200042b6:	681b      	ldr	r3, [r3, #0]
200042b8:	2b00      	cmp	r3, #0
200042ba:	d011      	beq.n	200042e0 <init_indoors2+0x34>
		initSprites();
200042bc:	f7ff ffbc 	bl	20004238 <initSprites>
		firstTime = 0;			
200042c0:	4b11      	ldr	r3, [pc, #68]	; (20004308 <init_indoors2+0x5c>)
200042c2:	2200      	movs	r2, #0
200042c4:	601a      	str	r2, [r3, #0]

		indoors2Images[0] = indoors2Image;
200042c6:	4b11      	ldr	r3, [pc, #68]	; (2000430c <init_indoors2+0x60>)
200042c8:	4a11      	ldr	r2, [pc, #68]	; (20004310 <init_indoors2+0x64>)
200042ca:	ca13      	ldmia	r2!, {r0, r1, r4}
200042cc:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&indoors2Images[0], indoors2Black, indoors2Gray, indoors2Light);
200042ce:	4b11      	ldr	r3, [pc, #68]	; (20004314 <init_indoors2+0x68>)
200042d0:	6819      	ldr	r1, [r3, #0]
200042d2:	4b11      	ldr	r3, [pc, #68]	; (20004318 <init_indoors2+0x6c>)
200042d4:	681a      	ldr	r2, [r3, #0]
200042d6:	4b11      	ldr	r3, [pc, #68]	; (2000431c <init_indoors2+0x70>)
200042d8:	681b      	ldr	r3, [r3, #0]
200042da:	480c      	ldr	r0, [pc, #48]	; (2000430c <init_indoors2+0x60>)
200042dc:	f7ff fc00 	bl	20003ae0 <load_image>
	}
	
	indoors2Obj->images = indoors2Images;
200042e0:	687b      	ldr	r3, [r7, #4]
200042e2:	4a0a      	ldr	r2, [pc, #40]	; (2000430c <init_indoors2+0x60>)
200042e4:	601a      	str	r2, [r3, #0]

	indoors2Obj->current_frame = 0;
200042e6:	687b      	ldr	r3, [r7, #4]
200042e8:	2200      	movs	r2, #0
200042ea:	615a      	str	r2, [r3, #20]
	indoors2Obj->n_frames = 1;
200042ec:	687b      	ldr	r3, [r7, #4]
200042ee:	2201      	movs	r2, #1
200042f0:	619a      	str	r2, [r3, #24]
	indoors2Obj->animation_speed = 1;
200042f2:	687b      	ldr	r3, [r7, #4]
200042f4:	2201      	movs	r2, #1
200042f6:	61da      	str	r2, [r3, #28]
	indoors2Obj->animation_counter = 0;
200042f8:	687b      	ldr	r3, [r7, #4]
200042fa:	2200      	movs	r2, #0
200042fc:	621a      	str	r2, [r3, #32]
}
200042fe:	46c0      	nop			; (mov r8, r8)
20004300:	46bd      	mov	sp, r7
20004302:	b003      	add	sp, #12
20004304:	bd90      	pop	{r4, r7, pc}
20004306:	46c0      	nop			; (mov r8, r8)
20004308:	2000e478 	andcs	lr, r0, r8, ror r4
2000430c:	20006e2c 	andcs	r6, r0, ip, lsr #28
20004310:	20006e38 	andcs	r6, r0, r8, lsr lr
20004314:	20006e6c 	andcs	r6, r0, ip, ror #28
20004318:	20006e28 	andcs	r6, r0, r8, lsr #28
2000431c:	20006e50 	andcs	r6, r0, r0, asr lr

20004320 <initSprites>:


GameObject trophyObj;
Image trophyImage;
Image trophyImages[1];
static void initSprites( void ) {	
20004320:	b580      	push	{r7, lr}
20004322:	b084      	sub	sp, #16
20004324:	af00      	add	r7, sp, #0
	
	sprite *pointer11 = &tempTrophyLight;
20004326:	4b12      	ldr	r3, [pc, #72]	; (20004370 <initSprites+0x50>)
20004328:	60fb      	str	r3, [r7, #12]
	load_sprite(pointer11, trophy_light_bits, trophy_black_width, trophy_black_height);
2000432a:	4912      	ldr	r1, [pc, #72]	; (20004374 <initSprites+0x54>)
2000432c:	68f8      	ldr	r0, [r7, #12]
2000432e:	2311      	movs	r3, #17
20004330:	220b      	movs	r2, #11
20004332:	f7ff fbe9 	bl	20003b08 <load_sprite>
	trophyLight = pointer11;
20004336:	4b10      	ldr	r3, [pc, #64]	; (20004378 <initSprites+0x58>)
20004338:	68fa      	ldr	r2, [r7, #12]
2000433a:	601a      	str	r2, [r3, #0]
	sprite *pointer12 = &tempTrophyGray;
2000433c:	4b0f      	ldr	r3, [pc, #60]	; (2000437c <initSprites+0x5c>)
2000433e:	60bb      	str	r3, [r7, #8]
	load_sprite(pointer12, trophy_gray_bits, trophy_black_width, trophy_black_height);
20004340:	490f      	ldr	r1, [pc, #60]	; (20004380 <initSprites+0x60>)
20004342:	68b8      	ldr	r0, [r7, #8]
20004344:	2311      	movs	r3, #17
20004346:	220b      	movs	r2, #11
20004348:	f7ff fbde 	bl	20003b08 <load_sprite>
	trophyGray = pointer12;
2000434c:	4b0d      	ldr	r3, [pc, #52]	; (20004384 <initSprites+0x64>)
2000434e:	68ba      	ldr	r2, [r7, #8]
20004350:	601a      	str	r2, [r3, #0]
	sprite *pointer13 = &tempTrophyBlack;
20004352:	4b0d      	ldr	r3, [pc, #52]	; (20004388 <initSprites+0x68>)
20004354:	607b      	str	r3, [r7, #4]
	load_sprite(pointer13, trophy_black_bits, trophy_black_width, trophy_black_height);
20004356:	490d      	ldr	r1, [pc, #52]	; (2000438c <initSprites+0x6c>)
20004358:	6878      	ldr	r0, [r7, #4]
2000435a:	2311      	movs	r3, #17
2000435c:	220b      	movs	r2, #11
2000435e:	f7ff fbd3 	bl	20003b08 <load_sprite>
	trophyBlack = pointer13;	
20004362:	4b0b      	ldr	r3, [pc, #44]	; (20004390 <initSprites+0x70>)
20004364:	687a      	ldr	r2, [r7, #4]
20004366:	601a      	str	r2, [r3, #0]
	
}
20004368:	46c0      	nop			; (mov r8, r8)
2000436a:	46bd      	mov	sp, r7
2000436c:	b004      	add	sp, #16
2000436e:	bd80      	pop	{r7, pc}
20004370:	20006e8c 	andcs	r6, r0, ip, lsl #29
20004374:	2000e4c4 	andcs	lr, r0, r4, asr #9
20004378:	20006ed8 	ldrdcs	r6, [r0], -r8
2000437c:	20006ecc 	andcs	r6, r0, ip, asr #29
20004380:	2000e4a0 	andcs	lr, r0, r0, lsr #9
20004384:	20006ebc 			; <UNDEFINED> instruction: 0x20006ebc
20004388:	20006ec0 	andcs	r6, r0, r0, asr #29
2000438c:	2000e47c 	andcs	lr, r0, ip, ror r4
20004390:	20006e7c 	andcs	r6, r0, ip, ror lr

20004394 <init_trophy>:
	
void init_trophy( GameObject *trophyObj ) {
20004394:	b590      	push	{r4, r7, lr}
20004396:	b083      	sub	sp, #12
20004398:	af00      	add	r7, sp, #0
2000439a:	6078      	str	r0, [r7, #4]
	static int firstTime = 1;
	if (firstTime) {
2000439c:	4b14      	ldr	r3, [pc, #80]	; (200043f0 <init_trophy+0x5c>)
2000439e:	681b      	ldr	r3, [r3, #0]
200043a0:	2b00      	cmp	r3, #0
200043a2:	d011      	beq.n	200043c8 <init_trophy+0x34>
		initSprites();
200043a4:	f7ff ffbc 	bl	20004320 <initSprites>
		firstTime = 0;			
200043a8:	4b11      	ldr	r3, [pc, #68]	; (200043f0 <init_trophy+0x5c>)
200043aa:	2200      	movs	r2, #0
200043ac:	601a      	str	r2, [r3, #0]

		trophyImages[0] = trophyImage;
200043ae:	4b11      	ldr	r3, [pc, #68]	; (200043f4 <init_trophy+0x60>)
200043b0:	4a11      	ldr	r2, [pc, #68]	; (200043f8 <init_trophy+0x64>)
200043b2:	ca13      	ldmia	r2!, {r0, r1, r4}
200043b4:	c313      	stmia	r3!, {r0, r1, r4}
		
		load_image(&trophyImages[0], trophyBlack, trophyGray, trophyLight);
200043b6:	4b11      	ldr	r3, [pc, #68]	; (200043fc <init_trophy+0x68>)
200043b8:	6819      	ldr	r1, [r3, #0]
200043ba:	4b11      	ldr	r3, [pc, #68]	; (20004400 <init_trophy+0x6c>)
200043bc:	681a      	ldr	r2, [r3, #0]
200043be:	4b11      	ldr	r3, [pc, #68]	; (20004404 <init_trophy+0x70>)
200043c0:	681b      	ldr	r3, [r3, #0]
200043c2:	480c      	ldr	r0, [pc, #48]	; (200043f4 <init_trophy+0x60>)
200043c4:	f7ff fb8c 	bl	20003ae0 <load_image>
	}
	
	trophyObj->images = trophyImages;
200043c8:	687b      	ldr	r3, [r7, #4]
200043ca:	4a0a      	ldr	r2, [pc, #40]	; (200043f4 <init_trophy+0x60>)
200043cc:	601a      	str	r2, [r3, #0]

	trophyObj->current_frame = 0;
200043ce:	687b      	ldr	r3, [r7, #4]
200043d0:	2200      	movs	r2, #0
200043d2:	615a      	str	r2, [r3, #20]
	trophyObj->n_frames = 1;
200043d4:	687b      	ldr	r3, [r7, #4]
200043d6:	2201      	movs	r2, #1
200043d8:	619a      	str	r2, [r3, #24]
	trophyObj->animation_speed = 1;
200043da:	687b      	ldr	r3, [r7, #4]
200043dc:	2201      	movs	r2, #1
200043de:	61da      	str	r2, [r3, #28]
	trophyObj->animation_counter = 0;
200043e0:	687b      	ldr	r3, [r7, #4]
200043e2:	2200      	movs	r2, #0
200043e4:	621a      	str	r2, [r3, #32]
}
200043e6:	46c0      	nop			; (mov r8, r8)
200043e8:	46bd      	mov	sp, r7
200043ea:	b003      	add	sp, #12
200043ec:	bd90      	pop	{r4, r7, pc}
200043ee:	46c0      	nop			; (mov r8, r8)
200043f0:	2000e4e8 	andcs	lr, r0, r8, ror #9
200043f4:	20006e70 	andcs	r6, r0, r0, ror lr
200043f8:	20006e80 	andcs	r6, r0, r0, lsl #29
200043fc:	20006e7c 	andcs	r6, r0, ip, ror lr
20004400:	20006ebc 			; <UNDEFINED> instruction: 0x20006ebc
20004404:	20006ed8 	ldrdcs	r6, [r0], -r8

20004408 <__divsi3>:
20004408:	4603      	mov	r3, r0
2000440a:	430b      	orrs	r3, r1
2000440c:	d47f      	bmi.n	2000450e <__divsi3+0x106>
2000440e:	2200      	movs	r2, #0
20004410:	0843      	lsrs	r3, r0, #1
20004412:	428b      	cmp	r3, r1
20004414:	d374      	bcc.n	20004500 <__divsi3+0xf8>
20004416:	0903      	lsrs	r3, r0, #4
20004418:	428b      	cmp	r3, r1
2000441a:	d35f      	bcc.n	200044dc <__divsi3+0xd4>
2000441c:	0a03      	lsrs	r3, r0, #8
2000441e:	428b      	cmp	r3, r1
20004420:	d344      	bcc.n	200044ac <__divsi3+0xa4>
20004422:	0b03      	lsrs	r3, r0, #12
20004424:	428b      	cmp	r3, r1
20004426:	d328      	bcc.n	2000447a <__divsi3+0x72>
20004428:	0c03      	lsrs	r3, r0, #16
2000442a:	428b      	cmp	r3, r1
2000442c:	d30d      	bcc.n	2000444a <__divsi3+0x42>
2000442e:	22ff      	movs	r2, #255	; 0xff
20004430:	0209      	lsls	r1, r1, #8
20004432:	ba12      	rev	r2, r2
20004434:	0c03      	lsrs	r3, r0, #16
20004436:	428b      	cmp	r3, r1
20004438:	d302      	bcc.n	20004440 <__divsi3+0x38>
2000443a:	1212      	asrs	r2, r2, #8
2000443c:	0209      	lsls	r1, r1, #8
2000443e:	d065      	beq.n	2000450c <__divsi3+0x104>
20004440:	0b03      	lsrs	r3, r0, #12
20004442:	428b      	cmp	r3, r1
20004444:	d319      	bcc.n	2000447a <__divsi3+0x72>
20004446:	e000      	b.n	2000444a <__divsi3+0x42>
20004448:	0a09      	lsrs	r1, r1, #8
2000444a:	0bc3      	lsrs	r3, r0, #15
2000444c:	428b      	cmp	r3, r1
2000444e:	d301      	bcc.n	20004454 <__divsi3+0x4c>
20004450:	03cb      	lsls	r3, r1, #15
20004452:	1ac0      	subs	r0, r0, r3
20004454:	4152      	adcs	r2, r2
20004456:	0b83      	lsrs	r3, r0, #14
20004458:	428b      	cmp	r3, r1
2000445a:	d301      	bcc.n	20004460 <__divsi3+0x58>
2000445c:	038b      	lsls	r3, r1, #14
2000445e:	1ac0      	subs	r0, r0, r3
20004460:	4152      	adcs	r2, r2
20004462:	0b43      	lsrs	r3, r0, #13
20004464:	428b      	cmp	r3, r1
20004466:	d301      	bcc.n	2000446c <__divsi3+0x64>
20004468:	034b      	lsls	r3, r1, #13
2000446a:	1ac0      	subs	r0, r0, r3
2000446c:	4152      	adcs	r2, r2
2000446e:	0b03      	lsrs	r3, r0, #12
20004470:	428b      	cmp	r3, r1
20004472:	d301      	bcc.n	20004478 <__divsi3+0x70>
20004474:	030b      	lsls	r3, r1, #12
20004476:	1ac0      	subs	r0, r0, r3
20004478:	4152      	adcs	r2, r2
2000447a:	0ac3      	lsrs	r3, r0, #11
2000447c:	428b      	cmp	r3, r1
2000447e:	d301      	bcc.n	20004484 <__divsi3+0x7c>
20004480:	02cb      	lsls	r3, r1, #11
20004482:	1ac0      	subs	r0, r0, r3
20004484:	4152      	adcs	r2, r2
20004486:	0a83      	lsrs	r3, r0, #10
20004488:	428b      	cmp	r3, r1
2000448a:	d301      	bcc.n	20004490 <__divsi3+0x88>
2000448c:	028b      	lsls	r3, r1, #10
2000448e:	1ac0      	subs	r0, r0, r3
20004490:	4152      	adcs	r2, r2
20004492:	0a43      	lsrs	r3, r0, #9
20004494:	428b      	cmp	r3, r1
20004496:	d301      	bcc.n	2000449c <__divsi3+0x94>
20004498:	024b      	lsls	r3, r1, #9
2000449a:	1ac0      	subs	r0, r0, r3
2000449c:	4152      	adcs	r2, r2
2000449e:	0a03      	lsrs	r3, r0, #8
200044a0:	428b      	cmp	r3, r1
200044a2:	d301      	bcc.n	200044a8 <__divsi3+0xa0>
200044a4:	020b      	lsls	r3, r1, #8
200044a6:	1ac0      	subs	r0, r0, r3
200044a8:	4152      	adcs	r2, r2
200044aa:	d2cd      	bcs.n	20004448 <__divsi3+0x40>
200044ac:	09c3      	lsrs	r3, r0, #7
200044ae:	428b      	cmp	r3, r1
200044b0:	d301      	bcc.n	200044b6 <__divsi3+0xae>
200044b2:	01cb      	lsls	r3, r1, #7
200044b4:	1ac0      	subs	r0, r0, r3
200044b6:	4152      	adcs	r2, r2
200044b8:	0983      	lsrs	r3, r0, #6
200044ba:	428b      	cmp	r3, r1
200044bc:	d301      	bcc.n	200044c2 <__divsi3+0xba>
200044be:	018b      	lsls	r3, r1, #6
200044c0:	1ac0      	subs	r0, r0, r3
200044c2:	4152      	adcs	r2, r2
200044c4:	0943      	lsrs	r3, r0, #5
200044c6:	428b      	cmp	r3, r1
200044c8:	d301      	bcc.n	200044ce <__divsi3+0xc6>
200044ca:	014b      	lsls	r3, r1, #5
200044cc:	1ac0      	subs	r0, r0, r3
200044ce:	4152      	adcs	r2, r2
200044d0:	0903      	lsrs	r3, r0, #4
200044d2:	428b      	cmp	r3, r1
200044d4:	d301      	bcc.n	200044da <__divsi3+0xd2>
200044d6:	010b      	lsls	r3, r1, #4
200044d8:	1ac0      	subs	r0, r0, r3
200044da:	4152      	adcs	r2, r2
200044dc:	08c3      	lsrs	r3, r0, #3
200044de:	428b      	cmp	r3, r1
200044e0:	d301      	bcc.n	200044e6 <__divsi3+0xde>
200044e2:	00cb      	lsls	r3, r1, #3
200044e4:	1ac0      	subs	r0, r0, r3
200044e6:	4152      	adcs	r2, r2
200044e8:	0883      	lsrs	r3, r0, #2
200044ea:	428b      	cmp	r3, r1
200044ec:	d301      	bcc.n	200044f2 <__divsi3+0xea>
200044ee:	008b      	lsls	r3, r1, #2
200044f0:	1ac0      	subs	r0, r0, r3
200044f2:	4152      	adcs	r2, r2
200044f4:	0843      	lsrs	r3, r0, #1
200044f6:	428b      	cmp	r3, r1
200044f8:	d301      	bcc.n	200044fe <__divsi3+0xf6>
200044fa:	004b      	lsls	r3, r1, #1
200044fc:	1ac0      	subs	r0, r0, r3
200044fe:	4152      	adcs	r2, r2
20004500:	1a41      	subs	r1, r0, r1
20004502:	d200      	bcs.n	20004506 <__divsi3+0xfe>
20004504:	4601      	mov	r1, r0
20004506:	4152      	adcs	r2, r2
20004508:	4610      	mov	r0, r2
2000450a:	4770      	bx	lr
2000450c:	e05d      	b.n	200045ca <__divsi3+0x1c2>
2000450e:	0fca      	lsrs	r2, r1, #31
20004510:	d000      	beq.n	20004514 <__divsi3+0x10c>
20004512:	4249      	negs	r1, r1
20004514:	1003      	asrs	r3, r0, #32
20004516:	d300      	bcc.n	2000451a <__divsi3+0x112>
20004518:	4240      	negs	r0, r0
2000451a:	4053      	eors	r3, r2
2000451c:	2200      	movs	r2, #0
2000451e:	469c      	mov	ip, r3
20004520:	0903      	lsrs	r3, r0, #4
20004522:	428b      	cmp	r3, r1
20004524:	d32d      	bcc.n	20004582 <__divsi3+0x17a>
20004526:	0a03      	lsrs	r3, r0, #8
20004528:	428b      	cmp	r3, r1
2000452a:	d312      	bcc.n	20004552 <__divsi3+0x14a>
2000452c:	22fc      	movs	r2, #252	; 0xfc
2000452e:	0189      	lsls	r1, r1, #6
20004530:	ba12      	rev	r2, r2
20004532:	0a03      	lsrs	r3, r0, #8
20004534:	428b      	cmp	r3, r1
20004536:	d30c      	bcc.n	20004552 <__divsi3+0x14a>
20004538:	0189      	lsls	r1, r1, #6
2000453a:	1192      	asrs	r2, r2, #6
2000453c:	428b      	cmp	r3, r1
2000453e:	d308      	bcc.n	20004552 <__divsi3+0x14a>
20004540:	0189      	lsls	r1, r1, #6
20004542:	1192      	asrs	r2, r2, #6
20004544:	428b      	cmp	r3, r1
20004546:	d304      	bcc.n	20004552 <__divsi3+0x14a>
20004548:	0189      	lsls	r1, r1, #6
2000454a:	d03a      	beq.n	200045c2 <__divsi3+0x1ba>
2000454c:	1192      	asrs	r2, r2, #6
2000454e:	e000      	b.n	20004552 <__divsi3+0x14a>
20004550:	0989      	lsrs	r1, r1, #6
20004552:	09c3      	lsrs	r3, r0, #7
20004554:	428b      	cmp	r3, r1
20004556:	d301      	bcc.n	2000455c <__divsi3+0x154>
20004558:	01cb      	lsls	r3, r1, #7
2000455a:	1ac0      	subs	r0, r0, r3
2000455c:	4152      	adcs	r2, r2
2000455e:	0983      	lsrs	r3, r0, #6
20004560:	428b      	cmp	r3, r1
20004562:	d301      	bcc.n	20004568 <__divsi3+0x160>
20004564:	018b      	lsls	r3, r1, #6
20004566:	1ac0      	subs	r0, r0, r3
20004568:	4152      	adcs	r2, r2
2000456a:	0943      	lsrs	r3, r0, #5
2000456c:	428b      	cmp	r3, r1
2000456e:	d301      	bcc.n	20004574 <__divsi3+0x16c>
20004570:	014b      	lsls	r3, r1, #5
20004572:	1ac0      	subs	r0, r0, r3
20004574:	4152      	adcs	r2, r2
20004576:	0903      	lsrs	r3, r0, #4
20004578:	428b      	cmp	r3, r1
2000457a:	d301      	bcc.n	20004580 <__divsi3+0x178>
2000457c:	010b      	lsls	r3, r1, #4
2000457e:	1ac0      	subs	r0, r0, r3
20004580:	4152      	adcs	r2, r2
20004582:	08c3      	lsrs	r3, r0, #3
20004584:	428b      	cmp	r3, r1
20004586:	d301      	bcc.n	2000458c <__divsi3+0x184>
20004588:	00cb      	lsls	r3, r1, #3
2000458a:	1ac0      	subs	r0, r0, r3
2000458c:	4152      	adcs	r2, r2
2000458e:	0883      	lsrs	r3, r0, #2
20004590:	428b      	cmp	r3, r1
20004592:	d301      	bcc.n	20004598 <__divsi3+0x190>
20004594:	008b      	lsls	r3, r1, #2
20004596:	1ac0      	subs	r0, r0, r3
20004598:	4152      	adcs	r2, r2
2000459a:	d2d9      	bcs.n	20004550 <__divsi3+0x148>
2000459c:	0843      	lsrs	r3, r0, #1
2000459e:	428b      	cmp	r3, r1
200045a0:	d301      	bcc.n	200045a6 <__divsi3+0x19e>
200045a2:	004b      	lsls	r3, r1, #1
200045a4:	1ac0      	subs	r0, r0, r3
200045a6:	4152      	adcs	r2, r2
200045a8:	1a41      	subs	r1, r0, r1
200045aa:	d200      	bcs.n	200045ae <__divsi3+0x1a6>
200045ac:	4601      	mov	r1, r0
200045ae:	4663      	mov	r3, ip
200045b0:	4152      	adcs	r2, r2
200045b2:	105b      	asrs	r3, r3, #1
200045b4:	4610      	mov	r0, r2
200045b6:	d301      	bcc.n	200045bc <__divsi3+0x1b4>
200045b8:	4240      	negs	r0, r0
200045ba:	2b00      	cmp	r3, #0
200045bc:	d500      	bpl.n	200045c0 <__divsi3+0x1b8>
200045be:	4249      	negs	r1, r1
200045c0:	4770      	bx	lr
200045c2:	4663      	mov	r3, ip
200045c4:	105b      	asrs	r3, r3, #1
200045c6:	d300      	bcc.n	200045ca <__divsi3+0x1c2>
200045c8:	4240      	negs	r0, r0
200045ca:	b501      	push	{r0, lr}
200045cc:	2000      	movs	r0, #0
200045ce:	f000 f805 	bl	200045dc <__aeabi_idiv0>
200045d2:	bd02      	pop	{r1, pc}

200045d4 <__aeabi_idivmod>:
200045d4:	2900      	cmp	r1, #0
200045d6:	d0f8      	beq.n	200045ca <__divsi3+0x1c2>
200045d8:	e716      	b.n	20004408 <__divsi3>
200045da:	4770      	bx	lr

200045dc <__aeabi_idiv0>:
200045dc:	4770      	bx	lr
200045de:	46c0      	nop			; (mov r8, r8)

200045e0 <counter>:
200045e0:	00000000 	andeq	r0, r0, r0

200045e4 <i.4308>:
200045e4:	00000000 	andeq	r0, r0, r0

200045e8 <j.4315>:
200045e8:	00000000 	andeq	r0, r0, r0

200045ec <distance_player_fire.4314>:
200045ec:	00000000 	andeq	r0, r0, r0

200045f0 <distance_hair_trophy.4320>:
200045f0:	00000000 	andeq	r0, r0, r0

200045f4 <trophy_burned.4319>:
200045f4:	00000000 	andeq	r0, r0, r0

200045f8 <distance_hair_DIP.4322>:
200045f8:	00000000 	andeq	r0, r0, r0

200045fc <DIP_burned.4321>:
200045fc:	00000000 	andeq	r0, r0, r0

20004600 <test.4324>:
20004600:	00000000 	andeq	r0, r0, r0

20004604 <nGameObjects>:
20004604:	00000000 	andeq	r0, r0, r0

20004608 <lastJumpValue.4106>:
20004608:	00000000 	andeq	r0, r0, r0

2000460c <ySpeed.4110>:
2000460c:	00000000 	andeq	r0, r0, r0

20004610 <lastRightValue.4107>:
20004610:	00000000 	andeq	r0, r0, r0

20004614 <xSpeed.4109>:
20004614:	00000000 	andeq	r0, r0, r0

20004618 <lastLeftValue.4108>:
20004618:	00000000 	andeq	r0, r0, r0

2000461c <playerPositionX>:
2000461c:	00000000 	andeq	r0, r0, r0

20004620 <playerPositionY>:
20004620:	00000000 	andeq	r0, r0, r0

20004624 <counter.4152>:
20004624:	00000000 	andeq	r0, r0, r0

20004628 <isRunning.4154>:
20004628:	00000000 	andeq	r0, r0, r0

2000462c <monster>:
2000462c:	00000000 	andeq	r0, r0, r0

20004630 <tempCastleBlack>:
	...

2000463c <tempPressGray>:
	...

20004648 <tempTitleGray>:
	...

20004654 <castleBlack>:
20004654:	00000000 	andeq	r0, r0, r0

20004658 <tempMonster>:
	...

20004664 <pressLight>:
20004664:	00000000 	andeq	r0, r0, r0

20004668 <tempTitleBlack>:
	...

20004674 <bg>:
20004674:	00000000 	andeq	r0, r0, r0

20004678 <tempMonsterGray>:
	...

20004684 <tempTitleLight>:
	...

20004690 <castleLight>:
20004690:	00000000 	andeq	r0, r0, r0

20004694 <tempPressLight>:
	...

200046a0 <tempCastleLight>:
	...

200046ac <pressGray>:
200046ac:	00000000 	andeq	r0, r0, r0

200046b0 <tempMonsterLight>:
	...

200046bc <tempPressBlack>:
	...

200046c8 <titleGray>:
200046c8:	00000000 	andeq	r0, r0, r0

200046cc <tempCastleGray>:
	...

200046d8 <monsterLight>:
200046d8:	00000000 	andeq	r0, r0, r0

200046dc <titleLight>:
200046dc:	00000000 	andeq	r0, r0, r0

200046e0 <castleGray>:
200046e0:	00000000 	andeq	r0, r0, r0

200046e4 <random_seed>:
200046e4:	00000000 	andeq	r0, r0, r0

200046e8 <pressBlack>:
200046e8:	00000000 	andeq	r0, r0, r0

200046ec <monsterGray>:
200046ec:	00000000 	andeq	r0, r0, r0

200046f0 <tempBg>:
	...

200046fc <titleBlack>:
200046fc:	00000000 	andeq	r0, r0, r0

20004700 <gameObjects>:
	...

20004890 <fire1Light>:
20004890:	00000000 	andeq	r0, r0, r0

20004894 <tempFire3Light>:
	...

200048a0 <fire3Gray>:
200048a0:	00000000 	andeq	r0, r0, r0

200048a4 <tempFire4Gray>:
	...

200048b0 <fire2Image>:
	...

200048bc <tempFire2Gray>:
	...

200048c8 <tempFireBlack>:
	...

200048d4 <fire3Image>:
	...

200048e0 <tempFire4Light>:
	...

200048ec <fire1Image>:
	...

200048f8 <fire4Light>:
200048f8:	00000000 	andeq	r0, r0, r0

200048fc <fireObj>:
	...

20004920 <fire5Image>:
	...

2000492c <fireImages>:
	...

20004968 <tempFire5Gray>:
	...

20004974 <tempFire3Gray>:
	...

20004980 <fire4Image>:
	...

2000498c <fire4Gray>:
2000498c:	00000000 	andeq	r0, r0, r0

20004990 <tempFire1Light>:
	...

2000499c <tempFire5Light>:
	...

200049a8 <fire5Gray>:
200049a8:	00000000 	andeq	r0, r0, r0

200049ac <fire2Light>:
200049ac:	00000000 	andeq	r0, r0, r0

200049b0 <fire5Light>:
200049b0:	00000000 	andeq	r0, r0, r0

200049b4 <tempFire1Gray>:
	...

200049c0 <fireBlack>:
200049c0:	00000000 	andeq	r0, r0, r0

200049c4 <tempFire2Light>:
	...

200049d0 <fire3Light>:
200049d0:	00000000 	andeq	r0, r0, r0

200049d4 <fire2Gray>:
200049d4:	00000000 	andeq	r0, r0, r0

200049d8 <fire1Gray>:
200049d8:	00000000 	andeq	r0, r0, r0

200049dc <bird4Light>:
200049dc:	00000000 	andeq	r0, r0, r0

200049e0 <bird1Gray>:
200049e0:	00000000 	andeq	r0, r0, r0

200049e4 <bird6Image>:
	...

200049f0 <bird5Black>:
200049f0:	00000000 	andeq	r0, r0, r0

200049f4 <tempBird4Black>:
	...

20004a00 <bird2Image>:
	...

20004a0c <birdObj>:
	...

20004a30 <bird1Image>:
	...

20004a3c <bird3Black>:
20004a3c:	00000000 	andeq	r0, r0, r0

20004a40 <bird4Gray>:
20004a40:	00000000 	andeq	r0, r0, r0

20004a44 <bird2Black>:
20004a44:	00000000 	andeq	r0, r0, r0

20004a48 <bird1Black>:
20004a48:	00000000 	andeq	r0, r0, r0

20004a4c <bird4Image>:
	...

20004a58 <tempBirdBlack>:
	...

20004a64 <bird3Gray>:
20004a64:	00000000 	andeq	r0, r0, r0

20004a68 <tempBirdGray>:
	...

20004a74 <bird5Gray>:
20004a74:	00000000 	andeq	r0, r0, r0

20004a78 <tempBird5Light>:
	...

20004a84 <tempBird2Gray>:
	...

20004a90 <bird3Light>:
20004a90:	00000000 	andeq	r0, r0, r0

20004a94 <tempBird5Gray>:
	...

20004aa0 <tempBird5Black>:
	...

20004aac <bird5Image>:
	...

20004ab8 <bird5Light>:
20004ab8:	00000000 	andeq	r0, r0, r0

20004abc <tempBird3Black>:
	...

20004ac8 <bird2Gray>:
20004ac8:	00000000 	andeq	r0, r0, r0

20004acc <tempBirdLight>:
	...

20004ad8 <bird1Light>:
20004ad8:	00000000 	andeq	r0, r0, r0

20004adc <tempBird2Light>:
	...

20004ae8 <bird3Image>:
	...

20004af4 <tempBird4Light>:
	...

20004b00 <tempBird3Light>:
	...

20004b0c <tempBird3Gray>:
	...

20004b18 <birdImages>:
	...

20004b60 <bird4Black>:
20004b60:	00000000 	andeq	r0, r0, r0

20004b64 <tempBird2Black>:
	...

20004b70 <tempBird4Gray>:
	...

20004b7c <bird2Light>:
20004b7c:	00000000 	andeq	r0, r0, r0

20004b80 <witch1Gray>:
20004b80:	00000000 	andeq	r0, r0, r0

20004b84 <witch2Light>:
20004b84:	00000000 	andeq	r0, r0, r0

20004b88 <witchImages>:
	...

20004bb8 <witch2Image>:
	...

20004bc4 <tempWitch2Black>:
	...

20004bd0 <tempWitchBlack>:
	...

20004bdc <tempWitch3Light>:
	...

20004be8 <witch4Image>:
	...

20004bf4 <witch2Gray>:
20004bf4:	00000000 	andeq	r0, r0, r0

20004bf8 <tempWitchGray>:
	...

20004c04 <tempWitch3Black>:
	...

20004c10 <tempWitch2Gray>:
	...

20004c1c <witch3Black>:
20004c1c:	00000000 	andeq	r0, r0, r0

20004c20 <witchObj>:
	...

20004c44 <witch3Light>:
20004c44:	00000000 	andeq	r0, r0, r0

20004c48 <tempWitch3Gray>:
	...

20004c54 <witch1Black>:
20004c54:	00000000 	andeq	r0, r0, r0

20004c58 <witch3Gray>:
20004c58:	00000000 	andeq	r0, r0, r0

20004c5c <witch1Image>:
	...

20004c68 <tempWitchLight>:
	...

20004c74 <tempWitch2Light>:
	...

20004c80 <witch1Light>:
20004c80:	00000000 	andeq	r0, r0, r0

20004c84 <witch3Image>:
	...

20004c90 <witch2Black>:
20004c90:	00000000 	andeq	r0, r0, r0

20004c94 <DIPObj>:
	...

20004cb8 <DIP2Image>:
	...

20004cc4 <DIP2Gray>:
20004cc4:	00000000 	andeq	r0, r0, r0

20004cc8 <tempDIP2Gray>:
	...

20004cd4 <DIP3Black>:
20004cd4:	00000000 	andeq	r0, r0, r0

20004cd8 <DIP1Black>:
20004cd8:	00000000 	andeq	r0, r0, r0

20004cdc <tempDIPLight>:
	...

20004ce8 <tempDIP3Light>:
	...

20004cf4 <DIPImages>:
	...

20004d24 <tempDIP2Black>:
	...

20004d30 <DIP3Image>:
	...

20004d3c <DIP1Image>:
	...

20004d48 <DIP1Light>:
20004d48:	00000000 	andeq	r0, r0, r0

20004d4c <DIP2Light>:
20004d4c:	00000000 	andeq	r0, r0, r0

20004d50 <DIP3Light>:
20004d50:	00000000 	andeq	r0, r0, r0

20004d54 <DIP2Black>:
20004d54:	00000000 	andeq	r0, r0, r0

20004d58 <tempDIP3Gray>:
	...

20004d64 <tempDIPBlack>:
	...

20004d70 <DIP1Gray>:
20004d70:	00000000 	andeq	r0, r0, r0

20004d74 <tempDIP3Black>:
	...

20004d80 <DIP3Gray>:
20004d80:	00000000 	andeq	r0, r0, r0

20004d84 <DIP4Image>:
	...

20004d90 <tempDIP2Light>:
	...

20004d9c <tempDIPGray>:
	...

20004da8 <tempFlameGray>:
	...

20004db4 <tempFlame4Light>:
	...

20004dc0 <flame2Image>:
	...

20004dcc <flame3Light>:
20004dcc:	00000000 	andeq	r0, r0, r0

20004dd0 <tempFlame3Light>:
	...

20004ddc <flame3Image>:
	...

20004de8 <flame3Gray>:
20004de8:	00000000 	andeq	r0, r0, r0

20004dec <flameObj>:
	...

20004e10 <tempFlame2Light>:
	...

20004e1c <tempFlame3Gray>:
	...

20004e28 <tempFlame2Black>:
	...

20004e34 <flame2Gray>:
20004e34:	00000000 	andeq	r0, r0, r0

20004e38 <flame1Gray>:
20004e38:	00000000 	andeq	r0, r0, r0

20004e3c <flame1Light>:
20004e3c:	00000000 	andeq	r0, r0, r0

20004e40 <tempFlame4Black>:
	...

20004e4c <tempFlame4Gray>:
	...

20004e58 <flame4Gray>:
20004e58:	00000000 	andeq	r0, r0, r0

20004e5c <flame4Image>:
	...

20004e68 <flame1Image>:
	...

20004e74 <tempFlame2Gray>:
	...

20004e80 <flameImages>:
	...

20004eb0 <tempFlame3Black>:
	...

20004ebc <flame4Black>:
20004ebc:	00000000 	andeq	r0, r0, r0

20004ec0 <flame1Black>:
20004ec0:	00000000 	andeq	r0, r0, r0

20004ec4 <tempFlameLight>:
	...

20004ed0 <flame2Light>:
20004ed0:	00000000 	andeq	r0, r0, r0

20004ed4 <flame3Black>:
20004ed4:	00000000 	andeq	r0, r0, r0

20004ed8 <tempFlameBlack>:
	...

20004ee4 <flame4Light>:
20004ee4:	00000000 	andeq	r0, r0, r0

20004ee8 <flame2Black>:
20004ee8:	00000000 	andeq	r0, r0, r0

20004eec <tempBoom5Gray>:
	...

20004ef8 <tempBoom2Black>:
	...

20004f04 <tempBoomLight>:
	...

20004f10 <tempBoom6Light>:
	...

20004f1c <boom9Image>:
	...

20004f28 <boom12Image>:
	...

20004f34 <boom3Light>:
20004f34:	00000000 	andeq	r0, r0, r0

20004f38 <boom3Black>:
20004f38:	00000000 	andeq	r0, r0, r0

20004f3c <boom4Image>:
	...

20004f48 <boom2Image>:
	...

20004f54 <boom5Black>:
20004f54:	00000000 	andeq	r0, r0, r0

20004f58 <boom4Light>:
20004f58:	00000000 	andeq	r0, r0, r0

20004f5c <boom10Image>:
	...

20004f68 <boom14Image>:
	...

20004f74 <boom8Image>:
	...

20004f80 <boom5Image>:
	...

20004f8c <boom3Gray>:
20004f8c:	00000000 	andeq	r0, r0, r0

20004f90 <tempBoom4Light>:
	...

20004f9c <boom5Gray>:
20004f9c:	00000000 	andeq	r0, r0, r0

20004fa0 <boomObj>:
	...

20004fc4 <boom6Image>:
	...

20004fd0 <tempBoom3Light>:
	...

20004fdc <boom6Gray>:
20004fdc:	00000000 	andeq	r0, r0, r0

20004fe0 <boom13Image>:
	...

20004fec <boom6Light>:
20004fec:	00000000 	andeq	r0, r0, r0

20004ff0 <boomImages>:
	...

200050a4 <boom6Black>:
200050a4:	00000000 	andeq	r0, r0, r0

200050a8 <tempBoom3Black>:
	...

200050b4 <boom4Black>:
200050b4:	00000000 	andeq	r0, r0, r0

200050b8 <tempBoom6Black>:
	...

200050c4 <tempBoomGray>:
	...

200050d0 <boom2Gray>:
200050d0:	00000000 	andeq	r0, r0, r0

200050d4 <boom1Black>:
200050d4:	00000000 	andeq	r0, r0, r0

200050d8 <tempBoom6Gray>:
	...

200050e4 <tempBoom2Gray>:
	...

200050f0 <tempBoom4Gray>:
	...

200050fc <tempBoom3Gray>:
	...

20005108 <boom4Gray>:
20005108:	00000000 	andeq	r0, r0, r0

2000510c <boom5Light>:
2000510c:	00000000 	andeq	r0, r0, r0

20005110 <boom1Gray>:
20005110:	00000000 	andeq	r0, r0, r0

20005114 <boom11Image>:
	...

20005120 <boom1Image>:
	...

2000512c <boom7Image>:
	...

20005138 <boom3Image>:
	...

20005144 <tempBoom5Light>:
	...

20005150 <tempBoom4Black>:
	...

2000515c <tempBoom2Light>:
	...

20005168 <tempBoom5Black>:
	...

20005174 <boom1Light>:
20005174:	00000000 	andeq	r0, r0, r0

20005178 <boom15Image>:
	...

20005184 <boom2Black>:
20005184:	00000000 	andeq	r0, r0, r0

20005188 <boom2Light>:
20005188:	00000000 	andeq	r0, r0, r0

2000518c <tempBoomBlack>:
	...

20005198 <backBufferGray>:
	...

20005598 <draw_buffer_black_gray>:
	...

20005998 <backBuffer>:
	...

20005d98 <draw_buffer_black_light>:
	...

20006198 <draw_buffer_black>:
	...

20006598 <draw_buffer_black_gray_light>:
	...

20006998 <backBufferLight>:
	...

20006d98 <tempIndoorsGray>:
	...

20006da4 <tempIndoorsLight>:
	...

20006db0 <tempIndoorsBlack>:
	...

20006dbc <indoorsGray>:
20006dbc:	00000000 	andeq	r0, r0, r0

20006dc0 <indoorsObj>:
	...

20006de4 <indoorsImages>:
	...

20006df0 <indoorsBlack>:
20006df0:	00000000 	andeq	r0, r0, r0

20006df4 <indoorsImage>:
	...

20006e00 <indoorsLight>:
20006e00:	00000000 	andeq	r0, r0, r0

20006e04 <indoors2Obj>:
	...

20006e28 <indoors2Gray>:
20006e28:	00000000 	andeq	r0, r0, r0

20006e2c <indoors2Images>:
	...

20006e38 <indoors2Image>:
	...

20006e44 <tempIndoors2Gray>:
	...

20006e50 <indoors2Light>:
20006e50:	00000000 	andeq	r0, r0, r0

20006e54 <tempIndoors2Black>:
	...

20006e60 <tempIndoors2Light>:
	...

20006e6c <indoors2Black>:
20006e6c:	00000000 	andeq	r0, r0, r0

20006e70 <trophyImages>:
	...

20006e7c <trophyBlack>:
20006e7c:	00000000 	andeq	r0, r0, r0

20006e80 <trophyImage>:
	...

20006e8c <tempTrophyLight>:
	...

20006e98 <trophyObj>:
	...

20006ebc <trophyGray>:
20006ebc:	00000000 	andeq	r0, r0, r0

20006ec0 <tempTrophyBlack>:
	...

20006ecc <tempTrophyGray>:
	...

20006ed8 <trophyLight>:
20006ed8:	00000000 	andeq	r0, r0, r0

20006edc <monster_black_bits>:
	...
20006eec:	0001c000 	andeq	ip, r1, r0
20006ef0:	00023000 	andeq	r3, r2, r0
20006ef4:	00021000 	andeq	r1, r2, r0
20006ef8:	00060800 	andeq	r0, r6, r0, lsl #16
20006efc:	00040800 	andeq	r0, r4, r0, lsl #16
20006f00:	00040800 	andeq	r0, r4, r0, lsl #16
20006f04:	00092800 	andeq	r2, r9, r0, lsl #16
20006f08:	00092800 	andeq	r2, r9, r0, lsl #16
20006f0c:	00100400 	andseq	r0, r0, r0, lsl #8
20006f10:	00100400 	andseq	r0, r0, r0, lsl #8
20006f14:	00200200 	eoreq	r0, r0, r0, lsl #4
20006f18:	00661b00 	rsbeq	r1, r6, r0, lsl #22
20006f1c:	0043b100 	subeq	fp, r3, r0, lsl #2
20006f20:	0080e080 	addeq	lr, r0, r0, lsl #1
20006f24:	01800080 	orreq	r0, r0, r0, lsl #1
20006f28:	01000040 	tsteq	r0, r0, asr #32
20006f2c:	02000040 	andeq	r0, r0, #64	; 0x40
20006f30:	02000060 	andeq	r0, r0, #96	; 0x60
20006f34:	02000020 	andeq	r0, r0, #32
20006f38:	03ff03e0 	mvnseq	r0, #224, 6	; 0x80000003
20006f3c:	0001fc00 	andeq	pc, r1, r0, lsl #24
	...

20006f54 <monster_light_bits>:
	...
20006f68:	00010000 	andeq	r0, r1, r0
20006f6c:	00018000 	andeq	r8, r1, r0
20006f70:	0001f000 	andeq	pc, r1, r0
20006f74:	0001f000 	andeq	pc, r1, r0
20006f78:	00009000 	andeq	r9, r0, r0
20006f7c:	00009000 	andeq	r9, r0, r0
20006f80:	0000d000 	andeq	sp, r0, r0
20006f84:	0001f800 	andeq	pc, r1, r0, lsl #16
20006f88:	0003f800 	andeq	pc, r3, r0, lsl #16
20006f8c:	0003fc00 	andeq	pc, r3, r0, lsl #24
20006f90:	0001e400 	andeq	lr, r1, r0, lsl #8
20006f94:	00044c00 	andeq	r4, r4, r0, lsl #24
20006f98:	00060c00 	andeq	r0, r6, r0, lsl #24
20006f9c:	0006ee00 	andeq	lr, r6, r0, lsl #28
20006fa0:	000ffe00 	andeq	pc, pc, r0, lsl #28
20006fa4:	000f3f00 	andeq	r3, pc, r0, lsl #30
20006fa8:	00000780 	andeq	r0, r0, r0, lsl #15
20006fac:	000003c0 	andeq	r0, r0, r0, asr #7
	...

20006fcc <monster_gray_bits>:
	...
20006fec:	00020000 	andeq	r0, r2, r0
20006ff0:	00000000 	andeq	r0, r0, r0
20006ff4:	00040000 	andeq	r0, r4, r0
20006ff8:	00060000 	andeq	r0, r6, r0
20006ffc:	000e0000 	andeq	r0, lr, r0
20007000:	000c0000 	andeq	r0, ip, r0
20007004:	001c0000 	andseq	r0, ip, r0
20007008:	00180000 	andseq	r0, r8, r0
2000700c:	00380000 	eorseq	r0, r8, r0
20007010:	00780000 	rsbseq	r0, r8, r0
20007014:	00780000 	rsbseq	r0, r8, r0
20007018:	00f00000 	rscseq	r0, r0, r0
2000701c:	01f0c000 	mvnseq	ip, r0
20007020:	01fff800 	mvnseq	pc, r0, lsl #16
20007024:	01fffc00 	mvnseq	pc, r0, lsl #24
20007028:	0000fc00 	andeq	pc, r0, r0, lsl #24
	...

20007044 <press_black_bits>:
	...
2000707c:	001c0000 	andseq	r0, ip, r0
20007080:	00000000 	andeq	r0, r0, r0
20007084:	00240000 	eoreq	r0, r4, r0
20007088:	00000000 	andeq	r0, r0, r0
2000708c:	00440000 	subeq	r0, r4, r0
20007090:	00000000 	andeq	r0, r0, r0
20007094:	c5240000 	strgt	r0, [r4, #-0]!
20007098:	00000198 	muleq	r0, r8, r1
2000709c:	2b1c0000 	blcs	207070a4 <firstTime.4040+0x6f8bbc>
200070a0:	00000045 	andeq	r0, r0, r5, asr #32
200070a4:	e1040000 	mrs	r0, (UNDEF: 4)
200070a8:	000000cd 	andeq	r0, r0, sp, asr #1
200070ac:	21040000 	mrscs	r0, (UNDEF: 4)
200070b0:	00000110 	andeq	r0, r0, r0, lsl r1
200070b4:	c1040000 	mrsgt	r0, (UNDEF: 4)
200070b8:	000000cc 	andeq	r0, r0, ip, asr #1
	...
200070e8:	00000004 	andeq	r0, r0, r4
200070ec:	00000000 	andeq	r0, r0, r0
200070f0:	00000004 	andeq	r0, r0, r4
200070f4:	00000000 	andeq	r0, r0, r0
200070f8:	00000004 	andeq	r0, r0, r4
200070fc:	0494e000 	ldreq	lr, [r4], #0
20007100:	00009334 	andeq	r9, r0, r4, lsr r3
20007104:	04ac9000 	strteq	r9, [ip], #0
20007108:	00009494 	muleq	r0, r4, r4
2000710c:	04a49000 	strteq	r9, [r4], #0
20007110:	0000978c 	andeq	r9, r0, ip, lsl #15
20007114:	04a49000 	strteq	r9, [r4], #0
20007118:	00009094 	muleq	r0, r4, r0
2000711c:	07256000 	streq	r6, [r5, -r0]!
20007120:	0000e324 	andeq	lr, r0, r4, lsr #6
20007124:	04000000 	streq	r0, [r0], #-0
20007128:	00008000 	andeq	r8, r0, r0
2000712c:	04000000 	streq	r0, [r0], #-0
20007130:	00008000 	andeq	r8, r0, r0
20007134:	03000000 	movweq	r0, #0
20007138:	00006000 	andeq	r6, r0, r0
	...

2000715c <press_light_bits>:
	...
2000719c:	00000200 	andeq	r0, r0, r0, lsl #4
200071a0:	00000000 	andeq	r0, r0, r0
200071a4:	00000700 	andeq	r0, r0, r0, lsl #14
200071a8:	00000000 	andeq	r0, r0, r0
200071ac:	00000200 	andeq	r0, r0, r0, lsl #4
	...
200071f0:	00800000 	addeq	r0, r0, r0
200071f4:	00000000 	andeq	r0, r0, r0
200071f8:	01c00000 	biceq	r0, r0, r0
200071fc:	00000000 	andeq	r0, r0, r0
20007200:	00800000 	addeq	r0, r0, r0
20007204:	00000010 	andeq	r0, r0, r0, lsl r0
20007208:	00000000 	andeq	r0, r0, r0
2000720c:	00000038 	andeq	r0, r0, r8, lsr r0
20007210:	00000000 	andeq	r0, r0, r0
20007214:	00000010 	andeq	r0, r0, r0, lsl r0
	...

20007274 <press_gray_bits>:
	...
200072b4:	00180000 	andseq	r0, r8, r0
200072b8:	00000000 	andeq	r0, r0, r0
200072bc:	00380000 	eorseq	r0, r8, r0
200072c0:	00000000 	andeq	r0, r0, r0
200072c4:	00580000 	subseq	r0, r8, r0
200072c8:	00000020 	andeq	r0, r0, r0, lsr #32
200072cc:	d4200000 	strtle	r0, [r0], #-0
200072d0:	0000039a 	muleq	r0, sl, r3
200072d4:	0a380000 	beq	20e072dc <firstTime.4040+0xdf8df4>
200072d8:	00000102 	andeq	r0, r0, r2, lsl #2
200072dc:	c2080000 	andgt	r0, r8, #0
200072e0:	00000223 	andeq	r0, r0, r3, lsr #4
200072e4:	02080000 	andeq	r0, r8, #0
200072e8:	00000311 	andeq	r0, r0, r1, lsl r3
200072ec:	c1080000 	mrsgt	r0, (UNDEF: 8)
200072f0:	000001dd 	ldrdeq	r0, [r0], -sp
	...
20007320:	00000008 	andeq	r0, r0, r8
20007324:	00000000 	andeq	r0, r0, r0
20007328:	00000008 	andeq	r0, r0, r8
2000732c:	00000000 	andeq	r0, r0, r0
20007330:	00000008 	andeq	r0, r0, r8
20007334:	09116000 	ldmdbeq	r1, {sp, lr}
20007338:	00012328 	andeq	r2, r1, r8, lsr #6
2000733c:	09596000 	ldmdbeq	r9, {sp, lr}^
20007340:	00012810 	andeq	r2, r1, r0, lsl r8
20007344:	0b492000 	bleq	2124f34c <firstTime.4040+0x1240e64>
20007348:	00012f08 	andeq	r2, r1, r8, lsl #30
2000734c:	08488000 	stmdaeq	r8, {pc}^
20007350:	00010458 	andeq	r0, r1, r8, asr r4
20007354:	0b6be000 	bleq	21aff35c <firstTime.4040+0x1af0e74>
20007358:	00016768 	andeq	r6, r1, r8, ror #14
2000735c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
20007360:	00010000 	andeq	r0, r1, r0
20007364:	0c000000 	stceq	0, cr0, [r0], {-0}
20007368:	00018000 	andeq	r8, r1, r0
2000736c:	06000000 	streq	r0, [r0], -r0
20007370:	0000c000 	andeq	ip, r0, r0
	...

2000738c <castle_black_bits>:
2000738c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007390:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007394:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20007398:	00000000 	andeq	r0, r0, r0
2000739c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200073a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200073a4:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200073a8:	00000000 	andeq	r0, r0, r0
200073ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200073b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200073b4:	00000001 	andeq	r0, r0, r1
200073b8:	00000000 	andeq	r0, r0, r0
200073bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200073c0:	7fffffff 	svcvc	0x00ffffff
	...
200073cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200073d0:	3fffffff 	svccc	0x00ffffff
	...
200073dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200073e0:	1fffffff 	svcne	0x00ffffff
	...
200073ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200073f0:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
	...
200073fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007400:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
	...
2000740c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007410:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20007517 <castle_black_bits+0x18b>	; <UNPREDICTABLE>
	...
2000741c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007420:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
	...
2000742c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007430:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
	...
2000743c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007440:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
2000744c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007450:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
2000745c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007460:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
2000746c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007470:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
2000747c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007480:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
	...
2000748c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007490:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
2000749c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200074a0:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
200074ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200074b0:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
200074bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200074c0:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
200074cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200074d0:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
200074dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200074e0:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
	...
200074ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200074f0:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
200074f4:	04900000 	ldreq	r0, [r0], #0
200074f8:	00000000 	andeq	r0, r0, r0
200074fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007500:	0003ffff 	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
20007504:	0b680000 	bleq	21a0750c <firstTime.4040+0x19f9024>
20007508:	00000000 	andeq	r0, r0, r0
2000750c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007510:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20007514:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
20007518:	00000000 	andeq	r0, r0, r0
2000751c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007520:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20007524:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
20007528:	00000092 	muleq	r0, r2, r0
2000752c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007530:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20007534:	04100000 	ldreq	r0, [r0], #-0
20007538:	0000016d 	andeq	r0, r0, sp, ror #2
2000753c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007540:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20007544:	04101240 	ldreq	r1, [r0], #-576	; 0xfffffdc0
20007548:	00000101 	andeq	r0, r0, r1, lsl #2
2000754c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007550:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20007554:	04102da0 	ldreq	r2, [r0], #-3488	; 0xfffff260
20007558:	00000101 	andeq	r0, r0, r1, lsl #2
2000755c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007560:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20007564:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
20007568:	00000101 	andeq	r0, r0, r1, lsl #2
2000756c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007570:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20007574:	04102020 	ldreq	r2, [r0], #-32	; 0xffffffe0
20007578:	00000101 	andeq	r0, r0, r1, lsl #2
2000757c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007580:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20007584:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20007588:	00000082 	andeq	r0, r0, r2, lsl #1
2000758c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007590:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20007594:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
20007598:	00000092 	muleq	r0, r2, r0
2000759c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200075a0:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
200075a4:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
200075a8:	012400a2 	smulwbeq	r4, r2, r0
200075ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200075b0:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
200075b4:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
200075b8:	02da00a2 	sbcseq	r0, sl, #162	; 0xa2
200075bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200075c0:	00004fff 	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
200075c4:	04101040 	ldreq	r1, [r0], #-64	; 0xffffffc0
200075c8:	020200a2 	andeq	r0, r2, #162	; 0xa2
200075cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200075d0:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200075d4:	08081040 	stmdaeq	r8, {r6, ip}
200075d8:	0202009a 	andeq	r0, r2, #154	; 0x9a
200075dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200075e0:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200075e4:	08082020 	stmdaeq	r8, {r5, sp}
200075e8:	01040082 	smlabbeq	r4, r2, r0, r0
200075ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200075f0:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200075f4:	48082020 	stmdami	r8, {r5, sp}
200075f8:	01040102 	tsteq	r4, r2, lsl #2
200075fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007600:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20007604:	b0082020 	andlt	r2, r8, r0, lsr #32
20007608:	01040101 	tsteq	r4, r1, lsl #2
2000760c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007610:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20007614:	00082220 	andeq	r2, r8, r0, lsr #4
20007618:	01040100 	mrseq	r0, (UNDEF: 20)
2000761c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007620:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20007624:	00882420 	addeq	r2, r8, r0, lsr #8
20007628:	01040100 	mrseq	r0, (UNDEF: 20)
2000762c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007630:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20007634:	01082420 	tsteq	r8, r0, lsr #8
20007638:	01045a00 	tsteq	r4, r0, lsl #20
2000763c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007640:	0000007f 	andeq	r0, r0, pc, ror r0
20007644:	01082420 	tsteq	r8, r0, lsr #8
20007648:	0104a400 	tsteq	r4, r0, lsl #8
2000764c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007650:	00000001 	andeq	r0, r0, r1
20007654:	010b2320 	tsteq	fp, r0, lsr #6
20007658:	01030001 	tsteq	r3, r1
2000765c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007660:	00000000 	andeq	r0, r0, r0
20007664:	00c4c020 	sbceq	ip, r4, r0, lsr #32
20007668:	02000002 	andeq	r0, r0, #2
2000766c:	3fffffff 	svccc	0x00ffffff
20007670:	00000000 	andeq	r0, r0, r0
20007674:	00000020 	andeq	r0, r0, r0, lsr #32
20007678:	02200002 	eoreq	r0, r0, #2
2000767c:	3fffffff 	svccc	0x00ffffff
20007680:	00000000 	andeq	r0, r0, r0
20007684:	00000020 	andeq	r0, r0, r0, lsr #32
20007688:	02400002 	subeq	r0, r0, #2
2000768c:	1fffffff 	svcne	0x00ffffff
20007690:	00000000 	andeq	r0, r0, r0
20007694:	80000020 	andhi	r0, r0, r0, lsr #32
20007698:	02400001 	subeq	r0, r0, #1
2000769c:	1fffffff 	svcne	0x00ffffff
200076a0:	00000000 	andeq	r0, r0, r0
200076a4:	00000010 	andeq	r0, r0, r0, lsl r0
200076a8:	02400000 	subeq	r0, r0, #0
200076ac:	0fffffff 	svceq	0x00ffffff
200076b0:	00000000 	andeq	r0, r0, r0
200076b4:	00000010 	andeq	r0, r0, r0, lsl r0
200076b8:	02300000 	eorseq	r0, r0, #0
200076bc:	0fffffff 	svceq	0x00ffffff
200076c0:	00000000 	andeq	r0, r0, r0
200076c4:	00000010 	andeq	r0, r0, r0, lsl r0
200076c8:	02000000 	andeq	r0, r0, #0
200076cc:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
200076d0:	00000000 	andeq	r0, r0, r0
200076d4:	00000010 	andeq	r0, r0, r0, lsl r0
200076d8:	04000000 	streq	r0, [r0], #-0
200076dc:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
200076e0:	00000000 	andeq	r0, r0, r0
200076e4:	00000010 	andeq	r0, r0, r0, lsl r0
200076e8:	04000000 	streq	r0, [r0], #-0
200076ec:	01ffffff 	ldrsheq	pc, [pc, #255]	; 200077f3 <castle_gray_bits+0x67>	; <UNPREDICTABLE>
200076f0:	00000000 	andeq	r0, r0, r0
200076f4:	00000008 	andeq	r0, r0, r8
200076f8:	04000000 	streq	r0, [r0], #-0
200076fc:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20007803 <castle_gray_bits+0x77>	; <UNPREDICTABLE>
20007700:	00000000 	andeq	r0, r0, r0
20007704:	00000008 	andeq	r0, r0, r8
20007708:	04000000 	streq	r0, [r0], #-0
2000770c:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20007710:	00000000 	andeq	r0, r0, r0
20007714:	00000008 	andeq	r0, r0, r8
20007718:	060001c0 	streq	r0, [r0], -r0, asr #3
2000771c:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20007720:	00000000 	andeq	r0, r0, r0
20007724:	00000008 	andeq	r0, r0, r8
20007728:	04000220 	streq	r0, [r0], #-544	; 0xfffffde0
2000772c:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
20007730:	00000000 	andeq	r0, r0, r0
20007734:	00000008 	andeq	r0, r0, r8
20007738:	04100400 	ldreq	r0, [r0], #-1024	; 0xfffffc00
2000773c:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
20007740:	00000000 	andeq	r0, r0, r0
20007744:	00000008 	andeq	r0, r0, r8
20007748:	04a00400 	strteq	r0, [r0], #1024	; 0x400
2000774c:	001fffff 			; <UNDEFINED> instruction: 0x001fffff
20007750:	00000000 	andeq	r0, r0, r0
20007754:	00000008 	andeq	r0, r0, r8
20007758:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
2000775c:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
20007760:	00000000 	andeq	r0, r0, r0
20007764:	00000008 	andeq	r0, r0, r8
20007768:	07400400 	strbeq	r0, [r0, -r0, lsl #8]
2000776c:	0001ffff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
20007770:	00000000 	andeq	r0, r0, r0
20007774:	00000008 	andeq	r0, r0, r8
20007778:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00
2000777c:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
20007780:	00000000 	andeq	r0, r0, r0
20007784:	00000008 	andeq	r0, r0, r8
20007788:	04000400 	streq	r0, [r0], #-1024	; 0xfffffc00

2000778c <castle_gray_bits>:
	...
20007794:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20007798:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
200077a4:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200077a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
200077b4:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
200077b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200077bc:	00000000 	andeq	r0, r0, r0
200077c0:	80000000 	andhi	r0, r0, r0
200077c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200077c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200077cc:	00000000 	andeq	r0, r0, r0
200077d0:	c0000000 	andgt	r0, r0, r0
200077d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200077d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200077dc:	00000000 	andeq	r0, r0, r0
200077e0:	e0000000 	and	r0, r0, r0
200077e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200077e8:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
200077ec:	00000000 	andeq	r0, r0, r0
200077f0:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200077f4:	f3ffcfff 			; <UNDEFINED> instruction: 0xf3ffcfff
200077f8:	ffffffbf 			; <UNDEFINED> instruction: 0xffffffbf
200077fc:	00000000 	andeq	r0, r0, r0
20007800:	fc000000 	stc2	0, cr0, [r0], {-0}
20007804:	f1ff8fff 			; <UNDEFINED> instruction: 0xf1ff8fff
20007808:	fff9ff3f 			; <UNDEFINED> instruction: 0xfff9ff3f
2000780c:	00000000 	andeq	r0, r0, r0
20007810:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20007814:	f0ff8fef 			; <UNDEFINED> instruction: 0xf0ff8fef
20007818:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
2000781c:	00000000 	andeq	r0, r0, r0
20007820:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20007824:	e0ff87ef 	rscs	r8, pc, pc, ror #15
20007828:	fff9fe1f 			; <UNDEFINED> instruction: 0xfff9fe1f
2000782c:	00000000 	andeq	r0, r0, r0
20007830:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20007834:	c07e07e7 	rsbsgt	r0, lr, r7, ror #15
20007838:	ffe0fc1f 			; <UNDEFINED> instruction: 0xffe0fc1f
2000783c:	00000000 	andeq	r0, r0, r0
20007840:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20007844:	001c07e7 	andseq	r0, ip, r7, ror #15
20007848:	ffe0380e 	vcmla.f32	d19, d0, d14[0], #170
2000784c:	00000000 	andeq	r0, r0, r0
20007850:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20007854:	000003e3 	andeq	r0, r0, r3, ror #7
20007858:	f7c00000 			; <UNDEFINED> instruction: 0xf7c00000
2000785c:	00000000 	andeq	r0, r0, r0
20007860:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20007864:	000001c3 	andeq	r0, r0, r3, asr #3
20007868:	e7800000 	str	r0, [r0, r0]
2000786c:	00000000 	andeq	r0, r0, r0
20007870:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20007874:	00000003 	andeq	r0, r0, r3
20007878:	c3800000 	orrgt	r0, r0, #0
2000787c:	00000000 	andeq	r0, r0, r0
20007880:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20007884:	00000001 	andeq	r0, r0, r1
20007888:	c0000000 	andgt	r0, r0, r0
2000788c:	00000000 	andeq	r0, r0, r0
20007890:	9ff00000 	svcls	0x00f00000	; IMB
20007894:	00000001 	andeq	r0, r0, r1
20007898:	80000000 	andhi	r0, r0, r0
2000789c:	00000000 	andeq	r0, r0, r0
200078a0:	8ff00000 	svchi	0x00f00000	; IMB
200078a4:	00000000 	andeq	r0, r0, r0
200078a8:	80000000 	andhi	r0, r0, r0
200078ac:	00000000 	andeq	r0, r0, r0
200078b0:	8ff80000 	svchi	0x00f80000
	...
200078c0:	0ffc0000 	svceq	0x00fc0000
	...
200078d0:	0ffc0000 	svceq	0x00fc0000
	...
200078e0:	0ffc0000 	svceq	0x00fc0000
	...
200078f0:	0ffc0000 	svceq	0x00fc0000
	...
20007900:	0ffc0000 	svceq	0x00fc0000
	...
20007910:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
20007920:	07fe0000 	ldrbeq	r0, [lr, r0]!
	...
20007930:	07fe0000 	ldrbeq	r0, [lr, r0]!
20007934:	03800000 	orreq	r0, r0, #0
	...
20007940:	03fe0000 	mvnseq	r0, #0
20007944:	02000000 	andeq	r0, r0, #0
	...
20007950:	03ff0000 	mvnseq	r0, #0
20007954:	02000000 	andeq	r0, r0, #0
	...
20007960:	03ff0000 	mvnseq	r0, #0
20007964:	02000000 	andeq	r0, r0, #0
	...
20007970:	03ff0000 	mvnseq	r0, #0
20007974:	02000000 	andeq	r0, r0, #0
	...
20007980:	03ff0000 	mvnseq	r0, #0
20007984:	02800c00 	addeq	r0, r0, #0, 24
20007988:	00000060 	andeq	r0, r0, r0, rrx
2000798c:	00000000 	andeq	r0, r0, r0
20007990:	03ff0000 	mvnseq	r0, #0
20007994:	03000800 	movweq	r0, #2048	; 0x800
20007998:	00000040 	andeq	r0, r0, r0, asr #32
2000799c:	00000000 	andeq	r0, r0, r0
200079a0:	03ff0000 	mvnseq	r0, #0
200079a4:	03000800 	movweq	r0, #2048	; 0x800
200079a8:	00000040 	andeq	r0, r0, r0, asr #32
200079ac:	00000000 	andeq	r0, r0, r0
200079b0:	03ff8000 	mvnseq	r8, #0
200079b4:	03000a00 	movweq	r0, #2560	; 0xa00
200079b8:	00000040 	andeq	r0, r0, r0, asr #32
200079bc:	00000000 	andeq	r0, r0, r0
200079c0:	01ffb000 	mvnseq	fp, r0
200079c4:	03000c00 	movweq	r0, #3072	; 0xc00
200079c8:	00000040 	andeq	r0, r0, r0, asr #32
200079cc:	00000000 	andeq	r0, r0, r0
200079d0:	01fff800 	mvnseq	pc, r0, lsl #16
200079d4:	07800c00 	streq	r0, [r0, r0, lsl #24]
200079d8:	00000060 	andeq	r0, r0, r0, rrx
200079dc:	00000000 	andeq	r0, r0, r0
200079e0:	01fffc00 	mvnseq	pc, r0, lsl #24
200079e4:	04001800 	streq	r1, [r0], #-2048	; 0xfffff800
200079e8:	00c00058 	sbceq	r0, r0, r8, asr r0
200079ec:	00000000 	andeq	r0, r0, r0
200079f0:	00fffc00 	rscseq	pc, pc, r0, lsl #24
200079f4:	06001400 	streq	r1, [r0], -r0, lsl #8
200079f8:	00c000c0 	sbceq	r0, r0, r0, asr #1
200079fc:	00000000 	andeq	r0, r0, r0
20007a00:	007ffc00 	rsbseq	pc, pc, r0, lsl #24
20007a04:	45001000 	strmi	r1, [r0, #-0]
20007a08:	008000a0 	addeq	r0, r0, r0, lsr #1
20007a0c:	00000000 	andeq	r0, r0, r0
20007a10:	007ffe00 	rsbseq	pc, pc, r0, lsl #28
20007a14:	80001000 	andhi	r1, r0, r0
20007a18:	008000c1 	addeq	r0, r0, r1, asr #1
20007a1c:	00000000 	andeq	r0, r0, r0
20007a20:	003ffe00 	eorseq	pc, pc, r0, lsl #28
20007a24:	00001000 	andeq	r1, r0, r0
20007a28:	00a000f0 	strdeq	r0, [r0], r0	; <UNPREDICTABLE>
20007a2c:	00000000 	andeq	r0, r0, r0
20007a30:	003fff00 	eorseq	pc, pc, r0, lsl #30
20007a34:	00001000 	andeq	r1, r0, r0
20007a38:	00c000e0 	sbceq	r0, r0, r0, ror #1
20007a3c:	00000000 	andeq	r0, r0, r0
20007a40:	001fff80 	andseq	pc, pc, r0, lsl #31
20007a44:	02001800 	andeq	r1, r0, #0, 16
20007a48:	00c000c0 	sbceq	r0, r0, r0, asr #1
20007a4c:	00000000 	andeq	r0, r0, r0
20007a50:	0019fffe 			; <UNDEFINED> instruction: 0x0019fffe
20007a54:	02001400 	andeq	r1, r0, #0, 8
20007a58:	00803000 	addeq	r3, r0, r0
20007a5c:	00000000 	andeq	r0, r0, r0
20007a60:	0018ffff 			; <UNDEFINED> instruction: 0x0018ffff
20007a64:	05033f00 	streq	r3, [r3, #-3840]	; 0xfffff100
20007a68:	01000000 	mrseq	r0, (UNDEF: 0)
20007a6c:	c0000000 	andgt	r0, r0, r0
20007a70:	0008ffff 	strdeq	pc, [r8], -pc	; <UNPREDICTABLE>
20007a74:	00c0e400 	sbceq	lr, r0, r0, lsl #8
20007a78:	01000004 	tsteq	r0, r4
20007a7c:	c0000000 	andgt	r0, r0, r0
20007a80:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20007a84:	00002000 	andeq	r2, r0, r0
20007a88:	01000008 	tsteq	r0, r8
20007a8c:	e0000000 	and	r0, r0, r0
20007a90:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
20007a94:	00001000 	andeq	r1, r0, r0
20007a98:	01000006 	tsteq	r0, r6
20007a9c:	e0000000 	and	r0, r0, r0
20007aa0:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
20007aa4:	80000000 	andhi	r0, r0, r0
20007aa8:	01800001 	orreq	r0, r0, r1
20007aac:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20007ab0:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
20007ab4:	00400000 	subeq	r0, r0, r0
20007ab8:	01400000 	mrseq	r0, (UNDEF: 64)
20007abc:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20007ac0:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
20007ac4:	03800000 	orreq	r0, r0, #0
20007ac8:	01300000 	teqeq	r0, r0
20007acc:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20007ad0:	00001bff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
20007ad4:	10e00000 	rscne	r0, r0, r0
20007ad8:	03000000 	movweq	r0, #0
20007adc:	fc000000 	stc2	0, cr0, [r0], {-0}
20007ae0:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20007ae4:	0f800000 	svceq	0x00800000
20007ae8:	03900000 	orrseq	r0, r0, #0
20007aec:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20007af0:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20007af4:	00000000 	andeq	r0, r0, r0
20007af8:	03e00000 	mvneq	r0, #0
20007afc:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20007b00:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20007b04:	00000000 	andeq	r0, r0, r0
20007b08:	03f40000 	mvnseq	r0, #0
20007b0c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20007b10:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20007b14:	00002000 	andeq	r2, r0, r0
20007b18:	01f80000 	mvnseq	r0, r0
20007b1c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20007b20:	0000007f 	andeq	r0, r0, pc, ror r0
20007b24:	0010c000 	andseq	ip, r0, r0
20007b28:	03f80000 	mvnseq	r0, #0
20007b2c:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20007b30:	0000003f 	andeq	r0, r0, pc, lsr r0
20007b34:	000f0000 	andeq	r0, pc, r0
20007b38:	03e000e0 	mvneq	r0, #224	; 0xe0
20007b3c:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20007b40:	0000001f 	andeq	r0, r0, pc, lsl r0
20007b44:	00026000 	andeq	r6, r2, r0
20007b48:	035001f0 	cmpeq	r0, #240, 2	; 0x3c
20007b4c:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20007b50:	0000001f 	andeq	r0, r0, pc, lsl r0
20007b54:	00118000 	andseq	r8, r1, r0
20007b58:	03ec01f0 	mvneq	r0, #240, 2	; 0x3c
20007b5c:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
20007b60:	0000000f 	andeq	r0, r0, pc
20007b64:	200e0000 	andcs	r0, lr, r0
20007b68:	00a022f0 	strdeq	r2, [r0], r0	; <UNPREDICTABLE>
20007b6c:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
20007b70:	00000007 	andeq	r0, r0, r7
20007b74:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
20007b78:	03c0c170 	biceq	ip, r0, #112, 2
20007b7c:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
20007b80:	00000003 	andeq	r0, r0, r3
20007b84:	e4000000 	str	r0, [r0], #-0
20007b88:	03c270f3 	biceq	r7, r2, #243	; 0xf3

20007b8c <castle_light_bits>:
	...
20007be8:	00000040 	andeq	r0, r0, r0, asr #32
	...
20007bf4:	0c003000 	stceq	0, cr3, [r0], {-0}
20007bf8:	00000040 	andeq	r0, r0, r0, asr #32
	...
20007c04:	0e007000 	cdpeq	0, 0, cr7, cr0, cr0, {0}
20007c08:	000600c0 	andeq	r0, r6, r0, asr #1
	...
20007c14:	0f007010 	svceq	0x00007010
20007c18:	000601e0 	andeq	r0, r6, r0, ror #3
	...
20007c24:	1f007810 	svcne	0x00007810
20007c28:	000601e0 	andeq	r0, r6, r0, ror #3
	...
20007c34:	3f81f818 	svccc	0x0081f818
20007c38:	001f03e0 	andseq	r0, pc, r0, ror #7
	...
20007c44:	ffe3f818 			; <UNDEFINED> instruction: 0xffe3f818
20007c48:	001fc7f1 			; <UNDEFINED> instruction: 0x001fc7f1
	...
20007c54:	fffffc1c 			; <UNDEFINED> instruction: 0xfffffc1c
20007c58:	083fffff 	ldmdaeq	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
	...
20007c64:	fffffe3c 			; <UNDEFINED> instruction: 0xfffffe3c
20007c68:	187fffff 	ldmdane	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
	...
20007c74:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20007c78:	3c7fffff 	ldclcc	15, cr15, [pc], #-1020	; 20007884 <castle_gray_bits+0xf8>
	...
20007c84:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20007c88:	3fffffff 	svccc	0x00ffffff
20007c8c:	00000000 	andeq	r0, r0, r0
20007c90:	60000000 	andvs	r0, r0, r0
20007c94:	fffffffe 			; <UNDEFINED> instruction: 0xfffffffe
20007c98:	7fffffff 	svcvc	0x00ffffff
20007c9c:	00000000 	andeq	r0, r0, r0
20007ca0:	70000000 	andvc	r0, r0, r0
20007ca4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007ca8:	7fffffff 	svcvc	0x00ffffff
20007cac:	00000000 	andeq	r0, r0, r0
20007cb0:	70000000 	andvc	r0, r0, r0
20007cb4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007cb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007cbc:	00000000 	andeq	r0, r0, r0
20007cc0:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20007cc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007cc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007ccc:	00000000 	andeq	r0, r0, r0
20007cd0:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20007cd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007cd8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007cdc:	00000000 	andeq	r0, r0, r0
20007ce0:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20007ce4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007ce8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007cec:	00000000 	andeq	r0, r0, r0
20007cf0:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20007cf4:	fb6fffff 	blx	21c07cfa <firstTime.4040+0x1bf9812>
20007cf8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007cfc:	00000000 	andeq	r0, r0, r0
20007d00:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20007d04:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
20007d08:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007d0c:	00000000 	andeq	r0, r0, r0
20007d10:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20007d14:	f407ffff 			; <UNDEFINED> instruction: 0xf407ffff
20007d18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20007d1c:	00000000 	andeq	r0, r0, r0
20007d20:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20007d24:	f007ffff 			; <UNDEFINED> instruction: 0xf007ffff
20007d28:	ffffff6d 			; <UNDEFINED> instruction: 0xffffff6d
20007d2c:	00000000 	andeq	r0, r0, r0
20007d30:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20007d34:	f80fffff 			; <UNDEFINED> instruction: 0xf80fffff
20007d38:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20007d3c:	00000000 	andeq	r0, r0, r0
20007d40:	fc000000 	stc2	0, cr0, [r0], {-0}
20007d44:	f80fedbf 			; <UNDEFINED> instruction: 0xf80fedbf
20007d48:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20007d4c:	00000000 	andeq	r0, r0, r0
20007d50:	fc000000 	stc2	0, cr0, [r0], {-0}
20007d54:	f80fc01f 			; <UNDEFINED> instruction: 0xf80fc01f
20007d58:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
20007d5c:	00000000 	andeq	r0, r0, r0
20007d60:	fc000000 	stc2	0, cr0, [r0], {-0}
20007d64:	f90fc81f 			; <UNDEFINED> instruction: 0xf90fc81f
20007d68:	fffffe80 			; <UNDEFINED> instruction: 0xfffffe80
20007d6c:	00000000 	andeq	r0, r0, r0
20007d70:	fc000000 	stc2	0, cr0, [r0], {-0}
20007d74:	f90fd41f 			; <UNDEFINED> instruction: 0xf90fd41f
20007d78:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20007d7c:	00000000 	andeq	r0, r0, r0
20007d80:	fc000000 	stc2	0, cr0, [r0], {-0}
20007d84:	f90fe03f 			; <UNDEFINED> instruction: 0xf90fe03f
20007d88:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
20007d8c:	00000000 	andeq	r0, r0, r0
20007d90:	fc000000 	stc2	0, cr0, [r0], {-0}
20007d94:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
20007d98:	ffffff01 			; <UNDEFINED> instruction: 0xffffff01
20007d9c:	00000000 	andeq	r0, r0, r0
20007da0:	fc000000 	stc2	0, cr0, [r0], {-0}
20007da4:	f88fe03f 			; <UNDEFINED> instruction: 0xf88fe03f
20007da8:	fedbff19 	mrc2	15, 6, pc, cr11, cr9, {0}
20007dac:	00000000 	andeq	r0, r0, r0
20007db0:	fc000000 	stc2	0, cr0, [r0], {-0}
20007db4:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
20007db8:	fd01ff11 	stc2	15, cr15, [r1, #-68]	; 0xffffffbc
20007dbc:	00000000 	andeq	r0, r0, r0
20007dc0:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20007dc4:	f80fe03f 			; <UNDEFINED> instruction: 0xf80fe03f
20007dc8:	fd01ff19 	stc2	15, cr15, [r1, #-100]	; 0xffffff9c
20007dcc:	00000000 	andeq	r0, r0, r0
20007dd0:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20007dd4:	f007e03f 			; <UNDEFINED> instruction: 0xf007e03f
20007dd8:	fc01ff01 	stc2	15, cr15, [r1], {1}
20007ddc:	00000000 	andeq	r0, r0, r0
20007de0:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20007de4:	f007c01f 			; <UNDEFINED> instruction: 0xf007c01f
20007de8:	fe03ff01 	cdp2	15, 0, cr15, cr3, cr1, {0}
20007dec:	00000000 	andeq	r0, r0, r0
20007df0:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20007df4:	b007c01f 	andlt	ip, r7, pc, lsl r0
20007df8:	fe03fe01 	cdp2	14, 0, cr15, cr3, cr1, {0}
20007dfc:	00000000 	andeq	r0, r0, r0
20007e00:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20007e04:	0007c01f 	andeq	ip, r7, pc, lsl r0
20007e08:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
20007e0c:	00000000 	andeq	r0, r0, r0
20007e10:	ff800000 			; <UNDEFINED> instruction: 0xff800000
20007e14:	0007c01f 	andeq	ip, r7, pc, lsl r0
20007e18:	fe03fe10 	mcr2	14, 0, pc, cr3, cr0, {0}	; <UNPREDICTABLE>
20007e1c:	00000000 	andeq	r0, r0, r0
20007e20:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20007e24:	0007c21f 	andeq	ip, r7, pc, lsl r2
20007e28:	fe03fe00 	cdp2	14, 0, cr15, cr3, cr0, {0}
20007e2c:	00000000 	andeq	r0, r0, r0
20007e30:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
20007e34:	0087c31f 	addeq	ip, r7, pc, lsl r3
20007e38:	fe03a400 	cdp2	4, 0, cr10, cr3, cr0, {0}
20007e3c:	00000000 	andeq	r0, r0, r0
20007e40:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
20007e44:	00c7c31f 	sbceq	ip, r7, pc, lsl r3
20007e48:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
20007e4c:	00000000 	andeq	r0, r0, r0
20007e50:	ffe60000 			; <UNDEFINED> instruction: 0xffe60000
20007e54:	00c4c01f 	sbceq	ip, r4, pc, lsl r0
20007e58:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
20007e5c:	00000000 	andeq	r0, r0, r0
20007e60:	ffe70000 			; <UNDEFINED> instruction: 0xffe70000
20007e64:	8000001f 	andhi	r0, r0, pc, lsl r0
20007e68:	fc000001 	stc2	0, cr0, [r0], {1}
20007e6c:	00000000 	andeq	r0, r0, r0
20007e70:	fff70000 			; <UNDEFINED> instruction: 0xfff70000
20007e74:	8000001f 	andhi	r0, r0, pc, lsl r0
20007e78:	fc000009 	stc2	0, cr0, [r0], {9}
20007e7c:	00000000 	andeq	r0, r0, r0
20007e80:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20007e84:	8000001f 	andhi	r0, r0, pc, lsl r0
20007e88:	fc200001 	stc2	0, cr0, [r0], #-4
20007e8c:	00000000 	andeq	r0, r0, r0
20007e90:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
20007e94:	0000001f 	andeq	r0, r0, pc, lsl r0
20007e98:	fc300000 	ldc2	0, cr0, [r0], #-0
20007e9c:	00000000 	andeq	r0, r0, r0
20007ea0:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20007ea4:	0000000f 	andeq	r0, r0, pc
20007ea8:	fc300000 	ldc2	0, cr0, [r0], #-0
20007eac:	00000000 	andeq	r0, r0, r0
20007eb0:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
20007eb4:	0000000f 	andeq	r0, r0, pc
20007eb8:	fc000000 	stc2	0, cr0, [r0], {-0}
20007ebc:	00000000 	andeq	r0, r0, r0
20007ec0:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
20007ec4:	1000000f 	andne	r0, r0, pc
20007ec8:	fc000000 	stc2	0, cr0, [r0], {-0}
20007ecc:	00000000 	andeq	r0, r0, r0
20007ed0:	ffffe400 			; <UNDEFINED> instruction: 0xffffe400
20007ed4:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
20007ed8:	f8080000 			; <UNDEFINED> instruction: 0xf8080000
20007edc:	00000000 	andeq	r0, r0, r0
20007ee0:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20007ee4:	0000000f 	andeq	r0, r0, pc
20007ee8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20007eec:	00000000 	andeq	r0, r0, r0
20007ef0:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
20007ef4:	00000007 	andeq	r0, r0, r7
20007ef8:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
20007efc:	00000000 	andeq	r0, r0, r0
20007f00:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20007f04:	00000007 	andeq	r0, r0, r7
20007f08:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
20007f0c:	00000000 	andeq	r0, r0, r0
20007f10:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20007f14:	00100007 	andseq	r0, r0, r7
20007f18:	f8040000 			; <UNDEFINED> instruction: 0xf8040000
20007f1c:	00000000 	andeq	r0, r0, r0
20007f20:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
20007f24:	00080007 	andeq	r0, r8, r7
20007f28:	f80001c0 			; <UNDEFINED> instruction: 0xf80001c0
20007f2c:	00000000 	andeq	r0, r0, r0
20007f30:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
20007f34:	00000007 	andeq	r0, r0, r7
20007f38:	f8080300 			; <UNDEFINED> instruction: 0xf8080300
20007f3c:	00000000 	andeq	r0, r0, r0
20007f40:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
20007f44:	00200007 	eoreq	r0, r0, r7
20007f48:	f8080200 			; <UNDEFINED> instruction: 0xf8080200
20007f4c:	00000000 	andeq	r0, r0, r0
20007f50:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
20007f54:	00000007 	andeq	r0, r0, r7
20007f58:	f8000200 			; <UNDEFINED> instruction: 0xf8000200
20007f5c:	00000000 	andeq	r0, r0, r0
20007f60:	fffffff0 			; <UNDEFINED> instruction: 0xfffffff0
20007f64:	00000007 	andeq	r0, r0, r7
20007f68:	f8000100 			; <UNDEFINED> instruction: 0xf8000100
20007f6c:	00000000 	andeq	r0, r0, r0
20007f70:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
20007f74:	01000007 	tsteq	r0, r7
20007f78:	f8100280 			; <UNDEFINED> instruction: 0xf8100280
20007f7c:	00000000 	andeq	r0, r0, r0
20007f80:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20007f84:	02000007 	andeq	r0, r0, #7
20007f88:	f8000300 			; <UNDEFINED> instruction: 0xf8000300

20007f8c <title_light_bits>:
	...
20007fa8:	00000400 	andeq	r0, r0, r0, lsl #8
20007fac:	30000000 	andcc	r0, r0, r0
20007fb0:	f80f9e06 			; <UNDEFINED> instruction: 0xf80f9e06
20007fb4:	06300000 	ldrteq	r0, [r0], -r0
20007fb8:	00cb8cba 	strheq	r8, [fp], #202	; 0xca
20007fbc:	ba033000 	blt	200d3fc4 <firstTime.4040+0xc5adc>
20007fc0:	0000eb4f 	andeq	lr, r0, pc, asr #22
20007fc4:	439ef3f0 	orrsmi	pc, lr, #240, 6	; 0xc0000003
20007fc8:	f000003a 			; <UNDEFINED> instruction: 0xf000003a
20007fcc:	5a478e9b 	bpl	211eba40 <firstTime.4040+0x11dd558>
20007fd0:	9b300000 	blls	20c07fd8 <firstTime.4040+0xbf9af0>
20007fd4:	019bcd36 	orrseq	ip, fp, r6, lsr sp
20007fd8:	66db3000 	ldrbvs	r3, [fp], r0
20007fdc:	000319d9 	ldrdeq	r1, [r3], -r9
20007fe0:	19667330 	stmdbne	r6!, {r4, r5, r8, r9, ip, sp, lr}^
20007fe4:	30000310 	andcc	r0, r0, r0, lsl r3
20007fe8:	00000001 	andeq	r0, r0, r1
20007fec:	80000000 	andhi	r0, r0, r0
20007ff0:	001d3e7b 	andseq	r3, sp, fp, ror lr
20007ff4:	0ac00000 	beq	1f007ffc <startup-0xff8004>
20007ff8:	00000528 	andeq	r0, r0, r8, lsr #10
20007ffc:	ec3a4000 	ldc	0, cr4, [sl], #-0
20008000:	0000000d 	andeq	r0, r0, sp
20008004:	05240bc0 	streq	r0, [r4, #-3008]!	; 0xfffff440
20008008:	00f00000 	rscseq	r0, r0, r0
2000800c:	001c0000 	andseq	r0, ip, r0
20008010:	03ebb000 	mvneq	fp, #0
20008014:	00000000 	andeq	r0, r0, r0
20008018:	0c032330 	stceq	3, cr2, [r3], {48}	; 0x30
2000801c:	300123e4 	andcc	r2, r1, r4, ror #7
20008020:	940c1b2a 	strls	r1, [ip], #-2858	; 0xfffff4d6
20008024:	ea300120 	b	20c084ac <firstTime.4040+0xbf9fc4>
20008028:	ec860c3d 	stc	12, cr0, [r6], {61}	; 0x3d
2000802c:	06ea3001 	strbteq	r3, [sl], r1
20008030:	01e69648 	mvneq	r9, r8, asr #12
20008034:	4b9e6b30 	blmi	1e7a2cfc <startup-0x185d304>
20008038:	30012696 	mulcc	r1, r6, r6
2000803c:	92bbb06b 	adcsls	fp, fp, #107	; 0x6b
20008040:	69f00126 	ldmibvs	r0!, {r1, r2, r5, r8}^
20008044:	2691b832 			; <UNDEFINED> instruction: 0x2691b832
20008048:	1e687001 	cdpne	0, 6, cr7, cr8, cr1, {0}
2000804c:	010e9110 	tsteq	lr, r0, lsl r1
	...

20008060 <title_gray_bits>:
	...
20008068:	40000000 	andmi	r0, r0, r0
2000806c:	0f840000 	svceq	0x00840000
20008070:	00b0c3fe 	ldrshteq	ip, [r0], lr
20008074:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20008078:	001f8f1f 	andseq	r8, pc, pc, lsl pc	; <UNPREDICTABLE>
2000807c:	fffffbf8 			; <UNDEFINED> instruction: 0xfffffbf8
20008080:	c8001fff 	stmdagt	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
20008084:	07f061f9 			; <UNDEFINED> instruction: 0x07f061f9
20008088:	f1cc001f 			; <UNDEFINED> instruction: 0xf1cc001f
2000808c:	be347305 	cdplt	3, 3, cr7, cr4, cr5, {0}
20008090:	05f0ce00 	ldrbeq	ip, [r0, #3584]!	; 0xe00
20008094:	007e1430 	rsbseq	r1, lr, r0, lsr r4
20008098:	2041080f 	subcs	r0, r1, pc, lsl #16
2000809c:	0e003e01 	cdpeq	14, 0, cr3, cr0, cr1, {0}
200080a0:	01384060 	teqeq	r8, r0, rrx
200080a4:	600c001e 	andvs	r0, ip, lr, lsl r0
200080a8:	1c4030c0 	mcrrne	0, 12, r3, r0, cr0
200080ac:	10208c00 	eorne	r8, r0, r0, lsl #24
200080b0:	0038c024 	eorseq	ip, r8, r4, lsr #32
200080b4:	0411088c 	ldreq	r0, [r1], #-2188	; 0xfffff774
200080b8:	c800f8ce 	stmdagt	r0, {r1, r2, r3, r6, r7, fp, ip, sp, lr, pc}
200080bc:	ffe6990c 			; <UNDEFINED> instruction: 0xffe6990c
200080c0:	7cfa0178 	ldfvce	f0, [sl], #480	; 0x1e0
200080c4:	3fe0c184 	svccc	0x00e0c184
200080c8:	013ff400 	teqeq	pc, r0, lsl #8	; <UNPREDICTABLE>
200080cc:	001fc0c7 	andseq	ip, pc, r7, asr #1
200080d0:	03c03ff0 	biceq	r3, r0, #240, 30	; 0x3c0
200080d4:	fc0007e0 	stc2	7, cr0, [r0], {224}	; 0xe0
200080d8:	e003803f 	and	r8, r3, pc, lsr r0
200080dc:	7f0c009f 	svcvc	0x000c009f
200080e0:	ffc1fbe4 			; <UNDEFINED> instruction: 0xffc1fbe4
200080e4:	fc140c03 	ldc2	12, cr0, [r4], {3}
200080e8:	03ffc7ff 	mvnseq	ip, #66846720	; 0x3fc0000
200080ec:	f3fc1c0c 	vdup.32	d17, d12[1]
200080f0:	0e02dc1b 	mcreq	12, 0, sp, cr2, cr11, {0}
200080f4:	63f3e490 	mvnsvs	lr, #144, 8	; 0x90000000
200080f8:	018e0218 	orreq	r0, lr, r8, lsl r2
200080fc:	1251e382 	subsne	lr, r1, #134217730	; 0x8000002
20008100:	88018e02 	stmdahi	r1, {r1, r9, sl, fp, pc}
20008104:	020061a7 	andeq	r6, r0, #-1073741783	; 0xc0000029
20008108:	2460008e 	strbtcs	r0, [r0], #-142	; 0xffffff72
2000810c:	8e021041 	cdphi	0, 0, cr1, cr2, cr1, {2}
20008110:	41000300 	mrsmi	r0, LR_irq
20008114:	000e0290 	muleq	lr, r0, r2
20008118:	9048008d 	subls	r0, r8, sp, lsl #1
2000811c:	81040c02 	tsthi	r4, r2, lsl #24
20008120:	02a04c87 	adceq	r4, r0, #34560	; 0x8700
20008124:	cffffffc 	svcgt	0x00fffffc
20008128:	8203e2fc 	andhi	lr, r3, #252, 4	; 0xc000000f
2000812c:	e3f81c07 	mvns	r1, #1792	; 0x700
20008130:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20008134 <title_black_bits>:
	...
2000815c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
20008160:	01000040 	tsteq	r0, r0, asr #32
20008164:	400c0000 	andmi	r0, ip, r0
20008168:	00010080 	andeq	r0, r1, r0, lsl #1
2000816c:	9c200400 	cfstrsls	mvf0, [r0], #-0
20008170:	000001c4 	andeq	r0, r0, r4, asr #3
20008174:	a4803104 	strge	r3, [r0], #260	; 0x104
20008178:	04c00001 	strbeq	r0, [r0], #1
2000817c:	02240209 	eoreq	r0, r4, #-1879048192	; 0x90000000
20008180:	89044000 	stmdbhi	r4, {lr}
20008184:	00042602 	andeq	r2, r4, r2, lsl #12
20008188:	e2888440 	add	r8, r8, #64, 8	; 0x40000000
2000818c:	00000421 	andeq	r0, r0, r1, lsr #8
20008190:	001966f2 			; <UNDEFINED> instruction: 0x001966f2
20008194:	03000007 	movweq	r0, #7
20008198:	00020000 	andeq	r0, r2, r0
2000819c:	f4000000 	vst4.8	{d0-d3}, [r0], r0
200081a0:	00003a10 	andeq	r3, r0, r0, lsl sl
200081a4:	10058000 	andne	r8, r5, r0
200081a8:	00000012 	andeq	r0, r0, r2, lsl r0
200081ac:	1ad87400 	bne	1f6251b4 <startup-0x9dae4c>
200081b0:	80000000 	andhi	r0, r0, r0
200081b4:	0022041b 	eoreq	r0, r2, fp, lsl r4
200081b8:	00004000 	andeq	r4, r0, r0
200081bc:	00003800 	andeq	r3, r0, r0, lsl #16
200081c0:	0000c0c0 	andeq	ip, r0, r0, asr #1
200081c4:	c0000000 	andgt	r0, r0, r0
200081c8:	08000045 	stmdaeq	r0, {r0, r2, r6}
200081cc:	144000c7 	strbne	r0, [r0], #-199	; 0xffffff39
200081d0:	01281040 			; <UNDEFINED> instruction: 0x01281040
200081d4:	71144000 	tstvc	r4, r0
200081d8:	00190810 	andseq	r0, r9, r0, lsl r8
200081dc:	90019440 	andls	r9, r1, r0, asr #8
200081e0:	4000c928 	andmi	ip, r0, r8, lsr #18
200081e4:	2c444c94 	mcrrcs	12, 9, r4, r4, cr4
200081e8:	96000049 	strls	r0, [r0], -r9, asr #32
200081ec:	49264740 	stmdbmi	r6!, {r6, r8, r9, sl, lr}
200081f0:	60938000 	addsvs	r8, r3, r0
200081f4:	00512268 	subseq	r2, r1, r8, ror #4
200081f8:	30000000 	andcc	r0, r0, r0
200081fc:	00001d03 	andeq	r1, r0, r3, lsl #26
	...

20008208 <bg_bits>:
	...
20008218:	fff80000 			; <UNDEFINED> instruction: 0xfff80000
2000821c:	0000001f 	andeq	r0, r0, pc, lsl r0
	...
20008228:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
2000822c:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
20008238:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
2000823c:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
	...
20008248:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
2000824c:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
	...
20008258:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
2000825c:	0007ffff 	strdeq	pc, [r7], -pc	; <UNPREDICTABLE>
	...
20008268:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
2000826c:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
	...
20008278:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
2000827c:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20008383 <bg_bits+0x17b>	; <UNPREDICTABLE>
20008280:	0001f000 	andeq	pc, r1, r0
20008284:	00000000 	andeq	r0, r0, r0
20008288:	007fe000 	rsbseq	lr, pc, r0
2000828c:	0ffffffe 	svceq	0x00fffffe
20008290:	0003f800 	andeq	pc, r3, r0, lsl #16
20008294:	00000000 	andeq	r0, r0, r0
20008298:	003fe000 	eorseq	lr, pc, r0
2000829c:	7fffffc0 	svcvc	0x00ffffc0
200082a0:	0003f800 	andeq	pc, r3, r0, lsl #16
200082a4:	001f8000 	andseq	r8, pc, r0
200082a8:	001fe000 	andseq	lr, pc, r0
200082ac:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
200082b0:	0003f801 	andeq	pc, r3, r1, lsl #16
200082b4:	003fc000 	eorseq	ip, pc, r0
200082b8:	003fe000 	eorseq	lr, pc, r0
200082bc:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
200082c0:	3f83f807 	svccc	0x0083f807
200082c4:	003fe000 	eorseq	lr, pc, r0
200082c8:	01ffe000 	mvnseq	lr, r0
200082cc:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
200082d0:	7fc3f80f 	svcvc	0x00c3f80f
200082d4:	003fe7f8 	ldrshteq	lr, [pc], -r8
200082d8:	07ffe000 	ldrbeq	lr, [pc, r0]!
200082dc:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
200082e0:	7fe1f01f 	svcvc	0x00e1f01f
200082e4:	003ffffc 	ldrshteq	pc, [pc], -ip	; <UNPREDICTABLE>
200082e8:	3fffc000 	svccc	0x00ffc000
200082ec:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
200082f0:	7ff0003f 	svcvc	0x00f0003f
200082f4:	007ffffc 	ldrshteq	pc, [pc], #-252	; <UNPREDICTABLE>
200082f8:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
200082fc:	ff000000 			; <UNDEFINED> instruction: 0xff000000
20008300:	7ff8007f 	svcvc	0x00f8007f
20008304:	3ffffffc 	svccc	0x00fffffc
20008308:	ffffc000 			; <UNDEFINED> instruction: 0xffffc000
2000830c:	f8000003 			; <UNDEFINED> instruction: 0xf8000003
20008310:	7ffc00ff 	svcvc	0x00fc00ff
20008314:	7ffffffc 	svcvc	0x00fffffc
20008318:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000
2000831c:	e000000f 	and	r0, r0, pc
20008320:	7ffe01ff 	svcvc	0x00fe01ff
20008324:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20008328:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
2000832c:	8000001f 	andhi	r0, r0, pc, lsl r0
20008330:	7fff01ff 	svcvc	0x00ff01ff
20008334:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
20008338:	ffe00000 			; <UNDEFINED> instruction: 0xffe00000
2000833c:	0000007f 	andeq	r0, r0, pc, ror r0
20008340:	7fff83ff 	svcvc	0x00ff83ff
20008344:	fffffff8 			; <UNDEFINED> instruction: 0xfffffff8
20008348:	ff800000 			; <UNDEFINED> instruction: 0xff800000
2000834c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20008350:	7fffc3fe 	svcvc	0x00ffc3fe
20008354:	ffffffe0 			; <UNDEFINED> instruction: 0xffffffe0
20008358:	fc7ffff0 	ldc2l	15, cr15, [pc], #-960	; 20007fa0 <title_light_bits+0x14>
2000835c:	07c001ff 			; <UNDEFINED> instruction: 0x07c001ff
20008360:	7fffe7fc 	svcvc	0x00ffe7fc
20008364:	ffffffc0 			; <UNDEFINED> instruction: 0xffffffc0
20008368:	f0fffffe 			; <UNDEFINED> instruction: 0xf0fffffe
2000836c:	0fe007ff 	svceq	0x00e007ff
20008370:	7ffff7fc 	svcvc	0x00fff7fc
20008374:	ffffff80 			; <UNDEFINED> instruction: 0xffffff80
20008378:	c0ffffff 	ldrshtgt	pc, [pc], #255	; <UNPREDICTABLE>
2000837c:	0fe00fff 	svceq	0x00e00fff
20008380:	7ffffff8 	svcvc	0x00fffff8
20008384:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
20008388:	01ffffff 	ldrsheq	pc, [pc, #255]	; 2000848f <bg_bits+0x287>	; <UNPREDICTABLE>
2000838c:	0fe01fff 	svceq	0x00e01fff
20008390:	7ffffff8 	svcvc	0x00fffff8
20008394:	7ffffc00 	svcvc	0x00fffc00
20008398:	01ffffff 	ldrsheq	pc, [pc, #255]	; 2000849f <bg_bits+0x297>	; <UNPREDICTABLE>
2000839c:	0fe03ffe 	svceq	0x00e03ffe
200083a0:	3fdffff0 	svccc	0x00dffff0
200083a4:	3ffffe00 	svccc	0x00fffe00
200083a8:	01ffffff 	ldrsheq	pc, [pc, #255]	; 200084af <bg_bits+0x2a7>	; <UNPREDICTABLE>
200083ac:	0fe03ff8 	svceq	0x00e03ff8
200083b0:	3fe7fff0 	svccc	0x00e7fff0
200083b4:	07fffe00 	ldrbeq	pc, [pc, r0, lsl #28]!	; <UNPREDICTABLE>
200083b8:	03ffffff 	mvnseq	pc, #1020	; 0x3fc
200083bc:	07c07ff0 			; <UNDEFINED> instruction: 0x07c07ff0
200083c0:	1fe7fff0 	svcne	0x00e7fff0
200083c4:	0ffffe00 	svceq	0x00fffe00
200083c8:	03fc00ff 	mvnseq	r0, #255	; 0xff
200083cc:	0000ffe0 	andeq	pc, r0, r0, ror #31
200083d0:	1ff3ffe0 	svcne	0x00f3ffe0
200083d4:	1ffffe00 	svcne	0x00fffe00
200083d8:	03fc001f 	mvnseq	r0, #31
200083dc:	0001ff80 	andeq	pc, r1, r0, lsl #31
200083e0:	1ff9ffe0 	svcne	0x00f9ffe0
200083e4:	3ffffe00 	svccc	0x00fffe00
200083e8:	03fc0007 	mvnseq	r0, #7
200083ec:	0001ff80 	andeq	pc, r1, r0, lsl #31
200083f0:	0ffcffe0 	svceq	0x00fcffe0
200083f4:	3ffdfe00 	svccc	0x00fdfe00
200083f8:	07f80007 	ldrbeq	r0, [r8, r7]!
200083fc:	0003ff00 	andeq	pc, r3, r0, lsl #30
20008400:	0ffe7ff0 	svceq	0x00fe7ff0
20008404:	3ffcfe00 	svccc	0x00fcfe00
20008408:	07f80003 	ldrbeq	r0, [r8, r3]!
2000840c:	0007fe00 	andeq	pc, r7, r0, lsl #28
20008410:	07fe7ff8 			; <UNDEFINED> instruction: 0x07fe7ff8
20008414:	3ff8fe00 	svccc	0x00f8fe00
20008418:	0ff80003 	svceq	0x00f80003
2000841c:	0007fc00 	andeq	pc, r7, r0, lsl #24
20008420:	03fffffc 	mvnseq	pc, #252, 30	; 0x3f0
20008424:	3ff87c00 	svccc	0x00f87c00
20008428:	0ff80003 	svceq	0x00f80003
2000842c:	0007fc00 	andeq	pc, r7, r0, lsl #24
20008430:	01fffffe 	ldrsheq	pc, [pc, #254]	; 20008536 <bg_bits+0x32e>	; <UNPREDICTABLE>
20008434:	1ff00000 	svcne	0x00f00000	; IMB
20008438:	0ff00007 	svceq	0x00f00007
2000843c:	000ff800 	andeq	pc, pc, r0, lsl #16
20008440:	01ffffff 	ldrsheq	pc, [pc, #255]	; 20008547 <bg_bits+0x33f>	; <UNPREDICTABLE>
20008444:	07f0003e 			; <UNDEFINED> instruction: 0x07f0003e
20008448:	0ff00007 	svceq	0x00f00007
2000844c:	800ff000 	andhi	pc, pc, r0
20008450:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
20008454:	03e0007f 	mvneq	r0, #127	; 0x7f
20008458:	0fe00007 	svceq	0x00e00007
2000845c:	c00ff000 	andgt	pc, pc, r0
20008460:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
20008464:	0000007f 	andeq	r0, r0, pc, ror r0
20008468:	0fe00007 	svceq	0x00e00007
2000846c:	e00ff000 	and	pc, pc, r0
20008470:	007ffeff 	ldrshteq	pc, [pc], #-239	; <UNPREDICTABLE>
20008474:	0000007f 	andeq	r0, r0, pc, ror r0
20008478:	0fe00007 	svceq	0x00e00007
2000847c:	f00ff000 			; <UNDEFINED> instruction: 0xf00ff000
20008480:	003ffe7f 	eorseq	pc, pc, pc, ror lr	; <UNPREDICTABLE>
20008484:	0000007f 	andeq	r0, r0, pc, ror r0
20008488:	0fe00007 	svceq	0x00e00007
2000848c:	f80ff000 			; <UNDEFINED> instruction: 0xf80ff000
20008490:	001ffc3f 	andseq	pc, pc, pc, lsr ip	; <UNPREDICTABLE>
20008494:	0000007f 	andeq	r0, r0, pc, ror r0
20008498:	1fe0000f 	svcne	0x00e0000f
2000849c:	fc0ff000 	stc2	0, cr15, [pc], {-0}
200084a0:	000ff81f 	andeq	pc, pc, pc, lsl r8	; <UNPREDICTABLE>
200084a4:	0000003e 	andeq	r0, r0, lr, lsr r0
200084a8:	1fe0000f 	svcne	0x00e0000f
200084ac:	fc07f000 	stc2	0, cr15, [r7], {-0}
200084b0:	0007f00f 	andeq	pc, r7, pc
200084b4:	00000000 	andeq	r0, r0, r0
200084b8:	1fe0000f 	svcne	0x00e0000f
200084bc:	fc07f000 	stc2	0, cr15, [r7], {-0}
200084c0:	00000007 	andeq	r0, r0, r7
200084c4:	00000000 	andeq	r0, r0, r0
200084c8:	1fe0000f 	svcne	0x00e0000f
200084cc:	fc07f800 	stc2	8, cr15, [r7], {-0}
200084d0:	00000003 	andeq	r0, r0, r3
200084d4:	000ff800 	andeq	pc, pc, r0, lsl #16
200084d8:	1fc0001f 	svcne	0x00c0001f
200084dc:	fc07fc00 	stc2	12, cr15, [r7], {-0}
200084e0:	00000001 	andeq	r0, r0, r1
200084e4:	001ffc00 	andseq	pc, pc, r0, lsl #24
200084e8:	1fc0003f 	svcne	0x00c0003f
200084ec:	fc07ff80 	stc2	15, cr15, [r7], {128}	; 0x80
200084f0:	00000001 	andeq	r0, r0, r1
200084f4:	003fff00 	eorseq	pc, pc, r0, lsl #30
200084f8:	3fc0003f 	svccc	0x00c0003f
200084fc:	fc07fffc 	stc2	15, cr15, [r7], {252}	; 0xfc
20008500:	00000001 	andeq	r0, r0, r1
20008504:	007fff80 	rsbseq	pc, pc, r0, lsl #31
20008508:	ffc0003f 			; <UNDEFINED> instruction: 0xffc0003f
2000850c:	fc03ffff 	stc2	15, cr15, [r3], {255}	; 0xff
20008510:	00000001 	andeq	r0, r0, r1
20008514:	00ffffe0 	rscseq	pc, pc, r0, ror #31
20008518:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
2000851c:	fc01ffff 	stc2	15, cr15, [r1], {255}	; 0xff
20008520:	00000007 	andeq	r0, r0, r7
20008524:	03fffff0 	mvnseq	pc, #240, 30	; 0x3c0
20008528:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
2000852c:	fc00ffff 	stc2	15, cr15, [r0], {255}	; 0xff
20008530:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008534:	07fffff8 			; <UNDEFINED> instruction: 0x07fffff8
20008538:	ffc0007f 			; <UNDEFINED> instruction: 0xffc0007f
2000853c:	fc007fff 	stc2	15, cr7, [r0], {255}	; 0xff
20008540:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008544:	07ff7ffd 			; <UNDEFINED> instruction: 0x07ff7ffd
20008548:	ff80007f 			; <UNDEFINED> instruction: 0xff80007f
2000854c:	fc003fff 	stc2	15, cr3, [r0], {255}	; 0xff
20008550:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008554:	0ffe3fff 	svceq	0x00fe3fff
20008558:	ff1f007f 			; <UNDEFINED> instruction: 0xff1f007f
2000855c:	f80007ff 			; <UNDEFINED> instruction: 0xf80007ff
20008560:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008564:	1ffc3fff 	svcne	0x00fc3fff
20008568:	fc3f807f 	ldc2	0, cr8, [pc], #-508	; 20008374 <bg_bits+0x16c>
2000856c:	f800003f 			; <UNDEFINED> instruction: 0xf800003f
20008570:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008574:	1ff83fff 	svcne	0x00f83fff
20008578:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
2000857c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
20008580:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008584:	3ff03fff 	svccc	0x00f03fff
20008588:	003f807f 	eorseq	r8, pc, pc, ror r0	; <UNPREDICTABLE>
2000858c:	c0000000 	andgt	r0, r0, r0
20008590:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008594:	7fe03fff 	svcvc	0x00e03fff
20008598:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
2000859c:	00000000 	andeq	r0, r0, r0
200085a0:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
200085a4:	7fc03fff 	svcvc	0x00c03fff
200085a8:	003f803f 	eorseq	r8, pc, pc, lsr r0	; <UNPREDICTABLE>
200085ac:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
200085b0:	f800000f 			; <UNDEFINED> instruction: 0xf800000f
200085b4:	ffc01fff 			; <UNDEFINED> instruction: 0xffc01fff
200085b8:	001f003f 	andseq	r0, pc, pc, lsr r0	; <UNPREDICTABLE>
200085bc:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
200085c0:	f8007fff 			; <UNDEFINED> instruction: 0xf8007fff
200085c4:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
200085c8:	0000003f 	andeq	r0, r0, pc, lsr r0
200085cc:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
200085d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200085d4:	ff801fff 			; <UNDEFINED> instruction: 0xff801fff
200085d8:	0000003f 	andeq	r0, r0, pc, lsr r0
200085dc:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
200085e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200085e4:	ff001fff 			; <UNDEFINED> instruction: 0xff001fff
200085e8:	0000003f 	andeq	r0, r0, pc, lsr r0
200085ec:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
200085f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
200085f4:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}
200085f8:	0000003f 	andeq	r0, r0, pc, lsr r0
200085fc:	fffff800 	vcmla.f32	d31, d15, d0[0], #270
20008600:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20008604:	fe001fff 	mcr2	15, 0, r1, cr0, cr15, {7}

20008608 <current_screen>:
20008608:	00000001 	andeq	r0, r0, r1

2000860c <delay_until_text.4306>:
2000860c:	00000082 	andeq	r0, r0, r2, lsl #1

20008610 <long_text.4304>:
20008610:	00000028 	andeq	r0, r0, r8, lsr #32

20008614 <short_text.4305>:
20008614:	00000014 	andeq	r0, r0, r4, lsl r0

20008618 <first.4312>:
20008618:	00000001 	andeq	r0, r0, r1

2000861c <last_climb_value.4313>:
2000861c:	00000064 	andeq	r0, r0, r4, rrx

20008620 <fire_black_2_bits>:
	...
20008628:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>

2000862c <fire1_gray_bits>:
2000862c:	00000000 	andeq	r0, r0, r0
20008630:	06000804 	streq	r0, [r0], -r4, lsl #16
20008634:	02494204 	subeq	r4, r9, #4, 4	; 0x40000000

20008638 <fire1_light_bits>:
20008638:	00002000 	andeq	r2, r0, r0
2000863c:	48000010 	stmdami	r0, {r4}
20008640:	2c243020 	stccs	0, cr3, [r4], #-128	; 0xffffff80

20008644 <fire2_gray_bits>:
20008644:	00000000 	andeq	r0, r0, r0
20008648:	10220000 	eorne	r0, r2, r0
2000864c:	00420444 	subeq	r0, r2, r4, asr #8

20008650 <fire2_light_bits>:
20008650:	04200000 	strteq	r0, [r0], #-0
20008654:	240c0010 	strcs	r0, [ip], #-16
20008658:	123c6008 	eorsne	r6, ip, #8

2000865c <fire3_gray_bits>:
2000865c:	00000000 	andeq	r0, r0, r0
20008660:	24100802 	ldrcs	r0, [r0], #-2050	; 0xfffff7fe
20008664:	00020260 	andeq	r0, r2, r0, ror #4

20008668 <fire3_light_bits>:
20008668:	10200000 	eorne	r0, r0, r0
2000866c:	18040400 	stmdane	r4, {sl}
20008670:	143c5812 	ldrtne	r5, [ip], #-2066	; 0xfffff7ee

20008674 <fire4_gray_bits>:
20008674:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
20008678:	10320000 	eorsne	r0, r2, r0
2000867c:	02400012 	subeq	r0, r0, #18

20008680 <fire4_light_bits>:
20008680:	00001000 	andeq	r1, r0, r0
20008684:	04082000 	streq	r2, [r8], #-0
20008688:	24283a0c 	strtcs	r3, [r8], #-2572	; 0xfffff5f4

2000868c <fire5_gray_bits>:
2000868c:	00000000 	andeq	r0, r0, r0
20008690:	22001020 	andcs	r1, r0, #32
20008694:	04044206 	streq	r4, [r4], #-518	; 0xfffffdfa

20008698 <fire5_light_bits>:
20008698:	00040000 	andeq	r0, r4, r0
2000869c:	04240800 	strteq	r0, [r4], #-2048	; 0xfffff800
200086a0:	502a1810 	eorpl	r1, sl, r0, lsl r8

200086a4 <firstTime.4076>:
200086a4:	00000001 	andeq	r0, r0, r1

200086a8 <bird1_black_bits>:
	...
200086b8:	00010040 	andeq	r0, r1, r0, asr #32
200086bc:	00118060 	andseq	r8, r1, r0, rrx
200086c0:	00118060 	andseq	r8, r1, r0, rrx
200086c4:	001b80ec 	andseq	r8, fp, ip, ror #1
200086c8:	003f81fc 	ldrshteq	r8, [pc], -ip
200086cc:	007fe1f8 	ldrshteq	lr, [pc], #-24
200086d0:	007ff3f8 	ldrshteq	pc, [pc], #-56	; <UNPREDICTABLE>
200086d4:	003ffff8 	ldrshteq	pc, [pc], -r8	; <UNPREDICTABLE>
200086d8:	003fedf8 	ldrshteq	lr, [pc], -r8
200086dc:	001ff1f0 			; <UNDEFINED> instruction: 0x001ff1f0
200086e0:	000ff0e0 	andeq	pc, pc, r0, ror #1
200086e4:	0007ff80 	andeq	pc, r7, r0, lsl #31
200086e8:	00007c00 	andeq	r7, r0, r0, lsl #24
200086ec:	00008800 	andeq	r8, r0, r0, lsl #16
200086f0:	00033000 	andeq	r3, r3, r0
200086f4:	00011000 	andeq	r1, r1, r0
	...

2000870c <bird1_gray_bits>:
	...
20008740:	00000e00 	andeq	r0, r0, r0, lsl #28
20008744:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

20008770 <bird1_light_bits>:
	...
200087a0:	00001200 	andeq	r1, r0, r0, lsl #4
	...

200087d4 <bird2_black_bits>:
	...
200087ec:	000b0000 	andeq	r0, fp, r0
200087f0:	001e0028 	andseq	r0, lr, r8, lsr #32
200087f4:	003e0068 	eorseq	r0, lr, r8, rrx
200087f8:	003e007c 	eorseq	r0, lr, ip, ror r0
200087fc:	003e007c 	eorseq	r0, lr, ip, ror r0
20008800:	007e007c 	rsbseq	r0, lr, ip, ror r0
20008804:	007e7cfc 	ldrshteq	r7, [lr], #-204	; 0xffffff34
20008808:	007ffff8 	ldrshteq	pc, [pc], #-248	; <UNPREDICTABLE>
2000880c:	003fd7f0 	ldrshteq	sp, [pc], -r0
20008810:	003fc3c0 	eorseq	ip, pc, r0, asr #7
20008814:	000fc100 	andeq	ip, pc, r0, lsl #2
20008818:	00007000 	andeq	r7, r0, r0
2000881c:	0000a000 	andeq	sl, r0, r0
20008820:	0001e000 	andeq	lr, r1, r0
20008824:	0000a000 	andeq	sl, r0, r0
20008828:	00008000 	andeq	r8, r0, r0
	...

20008838 <bird2_gray_bits>:
	...
20008874:	00003c00 	andeq	r3, r0, r0, lsl #24
20008878:	00003e00 	andeq	r3, r0, r0, lsl #28
	...

2000889c <bird2_light_bits>:
	...
200088d4:	00002800 	andeq	r2, r0, r0, lsl #16
	...

20008900 <bird3_black_bits>:
	...
20008920:	00280000 	eoreq	r0, r8, r0
20008924:	00680020 	rsbeq	r0, r8, r0, lsr #32
20008928:	00f80038 	rscseq	r0, r8, r8, lsr r0
2000892c:	00fc0038 	rscseq	r0, ip, r8, lsr r0
20008930:	00fc007c 	rscseq	r0, ip, ip, ror r0
20008934:	00fe3dfe 	ldrshteq	r3, [lr], #222	; 0xde
20008938:	00fffffe 	ldrshteq	pc, [pc], #254	; <UNPREDICTABLE>
2000893c:	007febfc 	ldrshteq	lr, [pc], #-188
20008940:	003ff1f0 	ldrshteq	pc, [pc], -r0	; <UNPREDICTABLE>
20008944:	001ff0c0 	andseq	pc, pc, r0, asr #1
20008948:	0001e800 	andeq	lr, r1, r0, lsl #16
2000894c:	00005000 	andeq	r5, r0, r0
20008950:	0000f000 	andeq	pc, r0, r0
20008954:	00009000 	andeq	r9, r0, r0
	...

20008964 <bird3_gray_bits>:
	...
200089a4:	00000e00 	andeq	r0, r0, r0, lsl #28
200089a8:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

200089c8 <bird3_light_bits>:
	...
20008a04:	00001400 	andeq	r1, r0, r0, lsl #8
	...

20008a2c <bird4_black_bits>:
	...
20008a60:	00007800 	andeq	r7, r0, r0, lsl #16
20008a64:	0000ff80 	andeq	pc, r0, r0, lsl #31
20008a68:	0003d7f4 	strdeq	sp, [r3], -r4
20008a6c:	008fe3fc 	strdeq	lr, [pc], ip
20008a70:	01ffc1fc 	ldrsheq	ip, [pc, #28]	; 20008a94 <bird4_gray_bits+0x4>
20008a74:	00ffd9f8 	ldrshteq	sp, [pc], #152
20008a78:	007fb0f0 	ldrshteq	fp, [pc], #-0
20008a7c:	007ea000 	rsbseq	sl, lr, r0
20008a80:	00792000 	rsbseq	r2, r9, r0
20008a84:	00300000 	eorseq	r0, r0, r0
	...

20008a90 <bird4_gray_bits>:
	...
20008ad0:	00001c00 	andeq	r1, r0, r0, lsl #24
20008ad4:	00003e00 	andeq	r3, r0, r0, lsl #28
	...

20008af4 <bird4_light_bits>:
	...
20008b30:	00002800 	andeq	r2, r0, r0, lsl #16
	...

20008b58 <bird5_black_bits>:
	...
20008b84:	00001c00 	andeq	r1, r0, r0, lsl #24
20008b88:	0000ff00 	andeq	pc, r0, r0, lsl #30
20008b8c:	0003eb00 	andeq	lr, r3, r0, lsl #22
20008b90:	0007f180 	andeq	pc, r7, r0, lsl #3
20008b94:	000ff080 	andeq	pc, pc, r0, lsl #1
20008b98:	000fff80 	andeq	pc, pc, r0, lsl #31
20008b9c:	001fd3c0 	andseq	sp, pc, r0, asr #7
20008ba0:	003fa3c0 	eorseq	sl, pc, r0, asr #7
20008ba4:	003fa3c0 	eorseq	sl, pc, r0, asr #7
20008ba8:	003fd3c0 	eorseq	sp, pc, r0, asr #7
20008bac:	003e8380 	eorseq	r8, lr, r0, lsl #7
20008bb0:	00778580 	rsbseq	r8, r7, r0, lsl #11
20008bb4:	00610000 	rsbeq	r0, r1, r0
20008bb8:	00000000 	andeq	r0, r0, r0

20008bbc <bird5_gray_bits>:
	...
20008bf4:	00000e00 	andeq	r0, r0, r0, lsl #28
20008bf8:	00000f00 	andeq	r0, r0, r0, lsl #30
	...

20008c20 <bird5_light_bits>:
	...
20008c54:	00001400 	andeq	r1, r0, r0, lsl #8
	...

20008c84 <firstTime.4093>:
20008c84:	00000001 	andeq	r0, r0, r1

20008c88 <witch1_black_bits>:
20008c88:	200001f8 	strdcs	r0, [r0], -r8
20008c8c:	03400001 	movteq	r0, #1
20008c90:	00074000 	andeq	r4, r7, r0
20008c94:	20000720 	andcs	r0, r0, r0, lsr #14
20008c98:	3ff80066 	svccc	0x00f80066
20008c9c:	00044000 	andeq	r4, r4, r0
20008ca0:	40000440 	andmi	r0, r0, r0, asr #8
20008ca4:	03800004 	orreq	r0, r0, #4
20008ca8:	00064000 	andeq	r4, r6, r0
20008cac:	20000640 	andcs	r0, r0, r0, asr #12
20008cb0:	0e200006 	cdpeq	0, 2, cr0, cr0, cr6, {0}
20008cb4:	000e1000 	andeq	r1, lr, r0
20008cb8:	f8000c10 			; <UNDEFINED> instruction: 0xf8000c10
20008cbc:	0000001f 	andeq	r0, r0, pc, lsl r0

20008cc0 <witch1_gray_bits>:
20008cc0:	c0000000 	andgt	r0, r0, r0
20008cc4:	00800000 	addeq	r0, r0, r0
20008cc8:	00008000 	andeq	r8, r0, r0
20008ccc:	c00000c0 	andgt	r0, r0, r0, asr #1
20008cd0:	00000001 	andeq	r0, r0, r1
	...
20008ce0:	00018000 	andeq	r8, r1, r0
20008ce4:	c0000180 	andgt	r0, r0, r0, lsl #3
20008ce8:	01c00001 	biceq	r0, r0, r1
20008cec:	0001e000 	andeq	lr, r1, r0
20008cf0:	000003e0 	andeq	r0, r0, r0, ror #7
20008cf4:	00000000 	andeq	r0, r0, r0

20008cf8 <witch1_light_bits>:
	...
20008d0c:	00038000 	andeq	r8, r3, r0
20008d10:	80000380 	andhi	r0, r0, r0, lsl #7
20008d14:	00000003 	andeq	r0, r0, r3
	...

20008d30 <witch2_black_bits>:
20008d30:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20008d34:	01200001 			; <UNDEFINED> instruction: 0x01200001
20008d38:	00034000 	andeq	r4, r3, r0
20008d3c:	20000740 	andcs	r0, r0, r0, asr #14
20008d40:	66200007 	strtvs	r0, [r0], -r7
20008d44:	003ff800 	eorseq	pc, pc, r0, lsl #16
20008d48:	40000440 	andmi	r0, r0, r0, asr #8
20008d4c:	04400004 	strbeq	r0, [r0], #-4
20008d50:	00038000 	andeq	r8, r3, r0
20008d54:	20000660 	andcs	r0, r0, r0, ror #12
20008d58:	0e100006 	cdpeq	0, 1, cr0, cr0, cr6, {0}
20008d5c:	001c0800 	andseq	r0, ip, r0, lsl #16
20008d60:	fc001c08 	stc2	12, cr1, [r0], {8}
20008d64:	0000003f 	andeq	r0, r0, pc, lsr r0

20008d68 <witch2_gray_bits>:
20008d68:	00000000 	andeq	r0, r0, r0
20008d6c:	00c00000 	sbceq	r0, r0, r0
20008d70:	00008000 	andeq	r8, r0, r0
20008d74:	c0000080 	andgt	r0, r0, r0, lsl #1
20008d78:	01c00000 	biceq	r0, r0, r0
	...
20008d8c:	c0000180 	andgt	r0, r0, r0, lsl #3
20008d90:	01e00001 	mvneq	r0, r1
20008d94:	0003f000 	andeq	pc, r3, r0
20008d98:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
20008d9c:	00000000 	andeq	r0, r0, r0

20008da0 <witch2_light_bits>:
	...
20008db8:	80000380 	andhi	r0, r0, r0, lsl #7
20008dbc:	03800003 	orreq	r0, r0, #3
	...

20008dd8 <witch3_black_bits>:
20008dd8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20008ddc:	01200001 			; <UNDEFINED> instruction: 0x01200001
20008de0:	00034000 	andeq	r4, r3, r0
20008de4:	20000740 	andcs	r0, r0, r0, asr #14
20008de8:	66200007 	strtvs	r0, [r0], -r7
20008dec:	003ff800 	eorseq	pc, pc, r0, lsl #16
20008df0:	40000440 	andmi	r0, r0, r0, asr #8
20008df4:	04400004 	strbeq	r0, [r0], #-4
20008df8:	00038000 	andeq	r8, r3, r0
20008dfc:	10000660 	andne	r0, r0, r0, ror #12
20008e00:	1c08000e 	stcne	0, cr0, [r8], {14}
20008e04:	00380800 	eorseq	r0, r8, r0, lsl #16
20008e08:	fe003804 	vcmla.f16	d3, d0, d4[0], #0
20008e0c:	0000007f 	andeq	r0, r0, pc, ror r0

20008e10 <witch3_gray_bits>:
20008e10:	00000000 	andeq	r0, r0, r0
20008e14:	00c00000 	sbceq	r0, r0, r0
20008e18:	00008000 	andeq	r8, r0, r0
20008e1c:	c0000080 	andgt	r0, r0, r0, lsl #1
20008e20:	01c00000 	biceq	r0, r0, r0
	...
20008e34:	e0000180 	and	r0, r0, r0, lsl #3
20008e38:	03f00001 	mvnseq	r0, #1
20008e3c:	0007f000 	andeq	pc, r7, r0
20008e40:	000007f8 	strdeq	r0, [r0], -r8
20008e44:	00000000 	andeq	r0, r0, r0

20008e48 <witch3_light_bits>:
	...
20008e60:	80000380 	andhi	r0, r0, r0, lsl #7
20008e64:	03800003 	orreq	r0, r0, #3
	...

20008e80 <firstTime.4067>:
20008e80:	00000001 	andeq	r0, r0, r1

20008e84 <witch1_black_bits>:
20008e84:	200001f8 	strdcs	r0, [r0], -r8
20008e88:	03400001 	movteq	r0, #1
20008e8c:	00074000 	andeq	r4, r7, r0
20008e90:	20000720 	andcs	r0, r0, r0, lsr #14
20008e94:	3ff80066 	svccc	0x00f80066
20008e98:	00044000 	andeq	r4, r4, r0
20008e9c:	40000440 	andmi	r0, r0, r0, asr #8
20008ea0:	03800004 	orreq	r0, r0, #4
20008ea4:	00064000 	andeq	r4, r6, r0
20008ea8:	20000640 	andcs	r0, r0, r0, asr #12
20008eac:	0e200006 	cdpeq	0, 2, cr0, cr0, cr6, {0}
20008eb0:	000e1000 	andeq	r1, lr, r0
20008eb4:	f8000c10 			; <UNDEFINED> instruction: 0xf8000c10
20008eb8:	0000001f 	andeq	r0, r0, pc, lsl r0

20008ebc <witch1_gray_bits>:
20008ebc:	c0000000 	andgt	r0, r0, r0
20008ec0:	00800000 	addeq	r0, r0, r0
20008ec4:	00008000 	andeq	r8, r0, r0
20008ec8:	c00000c0 	andgt	r0, r0, r0, asr #1
20008ecc:	00000001 	andeq	r0, r0, r1
	...
20008edc:	00018000 	andeq	r8, r1, r0
20008ee0:	c0000180 	andgt	r0, r0, r0, lsl #3
20008ee4:	01c00001 	biceq	r0, r0, r1
20008ee8:	0001e000 	andeq	lr, r1, r0
20008eec:	000003e0 	andeq	r0, r0, r0, ror #7
20008ef0:	00000000 	andeq	r0, r0, r0

20008ef4 <witch1_light_bits>:
	...
20008f08:	00038000 	andeq	r8, r3, r0
20008f0c:	80000380 	andhi	r0, r0, r0, lsl #7
20008f10:	00000003 	andeq	r0, r0, r3
	...

20008f2c <witch2_black_bits>:
20008f2c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20008f30:	01200001 			; <UNDEFINED> instruction: 0x01200001
20008f34:	00034000 	andeq	r4, r3, r0
20008f38:	20000740 	andcs	r0, r0, r0, asr #14
20008f3c:	66200007 	strtvs	r0, [r0], -r7
20008f40:	003ff800 	eorseq	pc, pc, r0, lsl #16
20008f44:	40000440 	andmi	r0, r0, r0, asr #8
20008f48:	04400004 	strbeq	r0, [r0], #-4
20008f4c:	00038000 	andeq	r8, r3, r0
20008f50:	20000660 	andcs	r0, r0, r0, ror #12
20008f54:	0e100006 	cdpeq	0, 1, cr0, cr0, cr6, {0}
20008f58:	001c0800 	andseq	r0, ip, r0, lsl #16
20008f5c:	fc001c08 	stc2	12, cr1, [r0], {8}
20008f60:	0000003f 	andeq	r0, r0, pc, lsr r0

20008f64 <witch2_gray_bits>:
20008f64:	00000000 	andeq	r0, r0, r0
20008f68:	00c00000 	sbceq	r0, r0, r0
20008f6c:	00008000 	andeq	r8, r0, r0
20008f70:	c0000080 	andgt	r0, r0, r0, lsl #1
20008f74:	01c00000 	biceq	r0, r0, r0
	...
20008f88:	c0000180 	andgt	r0, r0, r0, lsl #3
20008f8c:	01e00001 	mvneq	r0, r1
20008f90:	0003f000 	andeq	pc, r3, r0
20008f94:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
20008f98:	00000000 	andeq	r0, r0, r0

20008f9c <witch2_light_bits>:
	...
20008fb4:	80000380 	andhi	r0, r0, r0, lsl #7
20008fb8:	03800003 	orreq	r0, r0, #3
	...

20008fd4 <witch3_black_bits>:
20008fd4:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
20008fd8:	01200001 			; <UNDEFINED> instruction: 0x01200001
20008fdc:	00034000 	andeq	r4, r3, r0
20008fe0:	20000740 	andcs	r0, r0, r0, asr #14
20008fe4:	66200007 	strtvs	r0, [r0], -r7
20008fe8:	003ff800 	eorseq	pc, pc, r0, lsl #16
20008fec:	40000440 	andmi	r0, r0, r0, asr #8
20008ff0:	04400004 	strbeq	r0, [r0], #-4
20008ff4:	00038000 	andeq	r8, r3, r0
20008ff8:	10000660 	andne	r0, r0, r0, ror #12
20008ffc:	1c08000e 	stcne	0, cr0, [r8], {14}
20009000:	00380800 	eorseq	r0, r8, r0, lsl #16
20009004:	fe003804 	vcmla.f16	d3, d0, d4[0], #0
20009008:	0000007f 	andeq	r0, r0, pc, ror r0

2000900c <witch3_gray_bits>:
2000900c:	00000000 	andeq	r0, r0, r0
20009010:	00c00000 	sbceq	r0, r0, r0
20009014:	00008000 	andeq	r8, r0, r0
20009018:	c0000080 	andgt	r0, r0, r0, lsl #1
2000901c:	01c00000 	biceq	r0, r0, r0
	...
20009030:	e0000180 	and	r0, r0, r0, lsl #3
20009034:	03f00001 	mvnseq	r0, #1
20009038:	0007f000 	andeq	pc, r7, r0
2000903c:	000007f8 	strdeq	r0, [r0], -r8
20009040:	00000000 	andeq	r0, r0, r0

20009044 <witch3_light_bits>:
	...
2000905c:	80000380 	andhi	r0, r0, r0, lsl #7
20009060:	03800003 	orreq	r0, r0, #3
	...

2000907c <firstTime.4142>:
2000907c:	00000001 	andeq	r0, r0, r1

20009080 <direction.4153>:
20009080:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20009084 <flame1_black_bits>:
20009084:	80000000 	andhi	r0, r0, r0
20009088:	00000008 	andeq	r0, r0, r8
2000908c:	00004800 	andeq	r4, r0, r0, lsl #16
20009090:	48004a08 	stmdami	r0, {r3, r9, fp, lr}
20009094:	02400002 	subeq	r0, r0, #2
20009098:	00541400 	subseq	r1, r4, r0, lsl #8
2000909c:	22005040 	andcs	r5, r0, #64	; 0x40
200090a0:	a01200b0 	ldrhge	r0, [r2], -r0	; <UNPREDICTABLE>
200090a4:	00011200 	andeq	r1, r1, r0, lsl #4
200090a8:	01001000 	mrseq	r1, (UNDEF: 0)
200090ac:	01000000 	mrseq	r0, (UNDEF: 0)
200090b0:	00210001 	eoreq	r0, r1, r1
200090b4:	40000042 	andmi	r0, r0, r2, asr #32
200090b8:	20410000 	subcs	r0, r1, r0
200090bc:	01200101 			; <UNDEFINED> instruction: 0x01200101
200090c0:	12012001 	andne	r2, r1, #1
200090c4:	90400000 	subls	r0, r0, r0
200090c8:	00800200 	addeq	r0, r0, r0, lsl #4
200090cc:	04008000 	streq	r8, [r0], #-0
200090d0:	20080001 	andcs	r0, r8, r1
200090d4:	00080800 	andeq	r0, r8, r0, lsl #16
	...
200090e0:	00001000 	andeq	r1, r0, r0
200090e4:	3200001c 	andcc	r0, r0, #28
200090e8:	002f0000 	eoreq	r0, pc, r0
200090ec:	00003f00 	andeq	r3, r0, r0, lsl #30
200090f0:	01000007 	tsteq	r0, r7
200090f4:	00010000 	andeq	r0, r1, r0
200090f8:	00000000 	andeq	r0, r0, r0

200090fc <flame1_gray_bits>:
	...
2000911c:	00080000 	andeq	r0, r8, r0
20009120:	00000000 	andeq	r0, r0, r0
20009124:	00900008 	addseq	r0, r0, r8
20009128:	0002a000 	andeq	sl, r2, r0
2000912c:	b0001bb0 			; <UNDEFINED> instruction: 0xb0001bb0
20009130:	0fb0001f 	svceq	0x00b0001f
20009134:	000fe000 	andeq	lr, pc, r0
20009138:	e0000fe0 	and	r0, r0, r0, ror #31
2000913c:	0fa0000f 	svceq	0x00a0000f
20009140:	0007e000 	andeq	lr, r7, r0
20009144:	800003c0 	andhi	r0, r0, r0, asr #7
20009148:	07c00002 	strbeq	r0, [r0, r2]
2000914c:	00078000 	andeq	r8, r7, r0
20009150:	80000380 	andhi	r0, r0, r0, lsl #7
20009154:	09800003 	stmibeq	r0, {r0, r1}
20009158:	00018000 	andeq	r8, r1, r0
2000915c:	0c000000 	stceq	0, cr0, [r0], {-0}
20009160:	00100000 	andseq	r0, r0, r0
	...

20009174 <flame1_light_bits>:
	...
2000917c:	00080000 	andeq	r0, r8, r0
20009180:	80000080 	andhi	r0, r0, r0, lsl #1
20009184:	0c88000c 	stceq	0, cr0, [r8], {12}
20009188:	00098800 	andeq	r8, r9, r0, lsl #16
2000918c:	c8000db8 	stmdagt	r0, {r3, r4, r5, r7, r8, sl, fp}
20009190:	5fe8004d 	svcpl	0x00e8004d
20009194:	00f6e800 	rscseq	lr, r6, r0, lsl #16
20009198:	fc00eff8 	stc2	15, cr14, [r0], {248}	; 0xf8
2000919c:	fe6c00f7 	mcr2	0, 3, r0, cr12, cr7, {7}
200091a0:	00dc5c00 	sbcseq	r5, ip, r0, lsl #24
200091a4:	0c00e40c 	cfstrseq	mvf14, [r0], {12}
200091a8:	d00e01e0 	andle	r0, lr, r0, ror #3
200091ac:	00d01e00 	sbcseq	r1, r0, r0, lsl #28
200091b0:	0c00d01a 	stceq	0, cr13, [r0], {26}
200091b4:	600e00f0 	strdvs	r0, [lr], -r0	; <UNPREDICTABLE>
200091b8:	00681c00 	rsbeq	r1, r8, r0, lsl #24
200091bc:	70003c3c 	andvc	r3, r0, ip, lsr ip
200091c0:	1830003c 	ldmdane	r0!, {r2, r3, r4, r5}
200091c4:	00307000 	eorseq	r7, r0, r0
200091c8:	78003c78 	stmdavc	r0, {r3, r4, r5, r6, sl, fp, ip, sp}
200091cc:	16700038 			; <UNDEFINED> instruction: 0x16700038
200091d0:	001e6000 	andseq	r6, lr, r0
200091d4:	c0000fe0 	andgt	r0, r0, r0, ror #31
200091d8:	0fc0000f 	svceq	0x00c0000f
	...

200091ec <flame2_black_bits>:
200091ec:	00000000 	andeq	r0, r0, r0
200091f0:	40040042 	andmi	r0, r4, r2, asr #32
200091f4:	00044400 	andeq	r4, r4, r0, lsl #8
200091f8:	04000440 	streq	r0, [r0], #-1088	; 0xfffffbc0
200091fc:	22a00022 	adccs	r0, r0, #34	; 0x22
20009200:	00aaa800 	adceq	sl, sl, r0, lsl #16
20009204:	00009108 	andeq	r9, r0, r8, lsl #2
20009208:	84800090 	strhi	r0, [r0], #144	; 0x90
2000920c:	00040400 	andeq	r0, r4, r0, lsl #8
20009210:	20008004 	andcs	r8, r0, r4
20009214:	00850090 	umulleq	r0, r5, r0, r0
20009218:	01000000 	mrseq	r0, (UNDEF: 0)
2000921c:	20000002 	andcs	r0, r0, r2
20009220:	84200084 	strthi	r0, [r0], #-132	; 0xffffff7c
20009224:	00000200 	andeq	r0, r0, r0, lsl #4
20009228:	02004004 	andeq	r4, r0, #4
2000922c:	a00a0080 	andge	r0, sl, r0, lsl #1
20009230:	00240800 	eoreq	r0, r4, r0, lsl #16
20009234:	08002048 	stmdaeq	r0, {r3, r6, sp}
20009238:	00000000 	andeq	r0, r0, r0
2000923c:	00101000 	andseq	r1, r0, r0
20009240:	00004050 	andeq	r4, r0, r0, asr r0
20009244:	10000040 	andne	r0, r0, r0, asr #32
20009248:	00001000 	andeq	r1, r0, r0
2000924c:	3200001c 	andcc	r0, r0, #28
20009250:	002f0000 	eoreq	r0, pc, r0
20009254:	00003f00 	andeq	r3, r0, r0, lsl #30
20009258:	01000007 	tsteq	r0, r7
2000925c:	00010000 	andeq	r0, r1, r0
20009260:	00000000 	andeq	r0, r0, r0

20009264 <flame2_gray_bits>:
	...
20009284:	00002000 	andeq	r2, r0, r0
20009288:	40000010 	andmi	r0, r0, r0, lsl r0
2000928c:	27600002 	strbcs	r0, [r0, -r2]!
20009290:	001fe000 	andseq	lr, pc, r0
20009294:	c0000fe0 	andgt	r0, r0, r0, ror #31
20009298:	0bc00003 	bleq	1f0092ac <startup-0xff6d54>
2000929c:	000fe000 	andeq	lr, pc, r0
200092a0:	c0000fd0 	ldrdgt	r0, [r0], -r0	; <UNPREDICTABLE>
200092a4:	0fc0000f 	svceq	0x00c0000f
200092a8:	0003e000 	andeq	lr, r3, r0
200092ac:	c00007a0 	andgt	r0, r0, r0, lsr #15
200092b0:	0b800007 	bleq	1e0092d4 <startup-0x1ff6d2c>
200092b4:	0003c000 	andeq	ip, r3, r0
200092b8:	80000380 	andhi	r0, r0, r0, lsl #7
200092bc:	03800003 	orreq	r0, r0, #3
200092c0:	00000000 	andeq	r0, r0, r0
200092c4:	0c000000 	stceq	0, cr0, [r0], {-0}
200092c8:	00100000 	andseq	r0, r0, r0
	...

200092dc <flame2_light_bits>:
	...
200092e4:	00020000 	andeq	r0, r2, r0
200092e8:	20000220 	andcs	r0, r0, r0, lsr #4
200092ec:	05400005 	strbeq	r0, [r0, #-5]
200092f0:	00054000 	andeq	r4, r5, r0
200092f4:	fc0026f4 	stc2	6, cr2, [r0], {244}	; 0xf4
200092f8:	137c0027 	cmnne	ip, #39	; 0x27
200092fc:	00fbda00 	rscseq	sp, fp, r0, lsl #20
20009300:	9e007fea 	cdpls	15, 0, cr7, cr0, cr10, {7}
20009304:	d818006d 	ldmdale	r8, {r0, r2, r3, r5, r6}
20009308:	00e01c00 	rsceq	r1, r0, r0, lsl #24
2000930c:	1e00f01c 	mcrne	0, 0, pc, cr0, cr12, {0}	; <UNPREDICTABLE>
20009310:	701e0078 	andsvc	r0, lr, r8, ror r0
20009314:	00f01c00 	rscseq	r1, r0, r0, lsl #24
20009318:	3c003028 	stccc	0, cr3, [r0], {40}	; 0x28
2000931c:	50240070 	eorpl	r0, r4, r0, ror r0
20009320:	01d81001 	bicseq	r1, r8, r1
20009324:	30004810 	andcc	r4, r0, r0, lsl r8
20009328:	34780038 	ldrbtcc	r0, [r8], #-56	; 0xffffffc8
2000932c:	002c2000 	eoreq	r2, ip, r0
20009330:	50003c20 	andpl	r3, r0, r0, lsr #24
20009334:	0c700038 	ldcleq	0, cr0, [r0], #-224	; 0xffffff20
20009338:	001fe000 	andseq	lr, pc, r0
2000933c:	c0000fe0 	andgt	r0, r0, r0, ror #31
20009340:	0fc0000f 	svceq	0x00c0000f
	...

20009354 <flame3_black_bits>:
20009354:	02000400 	andeq	r0, r0, #0, 8
20009358:	04000000 	streq	r0, [r0], #-0
2000935c:	00044000 	andeq	r4, r4, r0
20009360:	a4000404 	strge	r0, [r0], #-1028	; 0xfffffbfc
20009364:	52a00098 	adcpl	r0, r0, #152	; 0x98
20009368:	01028a00 	tsteq	r2, r0, lsl #20
2000936c:	00012028 	andeq	r2, r1, r8, lsr #32
20009370:	00020100 	andeq	r0, r2, r0, lsl #2
20009374:	01028200 	mrseq	r8, R10_usr
20009378:	80000092 	mulhi	r0, r2, r0
2000937c:	00810000 	addeq	r0, r1, r0
20009380:	01400901 	cmpeq	r0, r1, lsl #18
20009384:	01004008 	tsteq	r0, r8
20009388:	02000002 	andeq	r0, r0, #2
2000938c:	01004001 	tsteq	r0, r1
20009390:	02000002 	andeq	r0, r0, #2
20009394:	a1000000 	mrsge	r0, (UNDEF: 0)
20009398:	00002400 	andeq	r2, r0, r0, lsl #8
2000939c:	10004000 	andne	r4, r0, r0
200093a0:	40000044 	andmi	r0, r0, r4, asr #32
200093a4:	00400800 	subeq	r0, r0, r0, lsl #16
200093a8:	00000808 	andeq	r0, r0, r8, lsl #16
200093ac:	00000000 	andeq	r0, r0, r0
200093b0:	00001000 	andeq	r1, r0, r0
200093b4:	3200001c 	andcc	r0, r0, #28
200093b8:	002f0000 	eoreq	r0, pc, r0
200093bc:	00003f00 	andeq	r3, r0, r0, lsl #30
200093c0:	01000007 	tsteq	r0, r7
200093c4:	00010000 	andeq	r0, r1, r0
200093c8:	00000000 	andeq	r0, r0, r0

200093cc <flame3_gray_bits>:
	...
200093ec:	00002000 	andeq	r2, r0, r0
200093f0:	00000040 	andeq	r0, r0, r0, asr #32
200093f4:	17600023 	strbne	r0, [r0, -r3, lsr #32]!
200093f8:	0017e000 	andseq	lr, r7, r0
200093fc:	e0000fe0 	and	r0, r0, r0, ror #31
20009400:	3de0003d 	stclcc	0, cr0, [r0, #244]!	; 0xf4
20009404:	001fa000 	andseq	sl, pc, r0
20009408:	f0001fe8 			; <UNDEFINED> instruction: 0xf0001fe8
2000940c:	0ee0000f 	cdpeq	0, 14, cr0, cr0, cr15, {0}
20009410:	000fc000 	andeq	ip, pc, r0
20009414:	c0000fe0 	andgt	r0, r0, r0, ror #31
20009418:	17c0000b 	strbne	r0, [r0, fp]
2000941c:	00078000 	andeq	r8, r7, r0
20009420:	80000780 	andhi	r0, r0, r0, lsl #15
20009424:	03400003 	movteq	r0, #3
20009428:	00030000 	andeq	r0, r3, r0
2000942c:	0c000000 	stceq	0, cr0, [r0], {-0}
20009430:	00100000 	andseq	r0, r0, r0
	...

20009444 <flame3_light_bits>:
20009444:	00000000 	andeq	r0, r0, r0
20009448:	00400000 	subeq	r0, r0, r0
2000944c:	00020000 	andeq	r0, r2, r0
20009450:	40000240 	andmi	r0, r0, r0, asr #4
20009454:	014c0002 	cmpeq	ip, r2
20009458:	00317400 	eorseq	r7, r1, r0, lsl #8
2000945c:	fc0017d4 	stc2	7, cr1, [r0], {212}	; 0xd4
20009460:	bff8003f 	svclt	0x00f8003f
20009464:	00fd5800 	rscseq	r5, sp, r0, lsl #16
20009468:	7800ff28 	stmdavc	r0, {r3, r5, r8, r9, sl, fp, ip, sp, lr, pc}
2000946c:	e81c00dc 	ldmda	ip, {r2, r3, r4, r6, r7}
20009470:	00a81600 	adceq	r1, r8, r0, lsl #12
20009474:	1e00b016 	mcrne	0, 0, fp, cr0, cr6, {0}
20009478:	c01e00c0 	andsgt	r0, lr, r0, asr #1
2000947c:	00e01c00 	rsceq	r1, r0, r0, lsl #24
20009480:	0c00c014 	stceq	0, cr12, [r0], {20}
20009484:	401c00f0 	ldrshmi	r0, [ip], -r0	; <UNPREDICTABLE>
20009488:	00f01800 	rscseq	r1, r0, r0, lsl #16
2000948c:	2800b01c 	stmdacs	r0, {r2, r3, r4, ip, sp, pc}
20009490:	283c0030 	ldmdacs	ip!, {r4, r5}
20009494:	00385400 	eorseq	r5, r8, r0, lsl #8
20009498:	70003070 	andvc	r3, r0, r0, ror r0
2000949c:	3cb0001c 	ldccc	0, cr0, [r0], #112	; 0x70
200094a0:	003ce000 	eorseq	lr, ip, r0
200094a4:	c0001fe0 	andgt	r1, r0, r0, ror #31
200094a8:	0fc0000f 	svceq	0x00c0000f
	...

200094bc <flame4_black_bits>:
200094bc:	00000100 	andeq	r0, r0, r0, lsl #2
200094c0:	10820000 	addne	r0, r2, r0
200094c4:	00008000 	andeq	r8, r0, r0
200094c8:	000028c8 	andeq	r2, r0, r8, asr #17
200094cc:	05540004 	ldrbeq	r0, [r4, #-4]
200094d0:	00a55400 	adceq	r5, r5, r0, lsl #8
200094d4:	08002420 	stmdaeq	r0, {r5, sl, sp}
200094d8:	50000082 	andpl	r0, r0, r2, lsl #1
200094dc:	01000400 	tsteq	r0, r0, lsl #8
200094e0:	00010444 	andeq	r0, r1, r4, asr #8
200094e4:	84120124 	ldrhi	r0, [r2], #-292	; 0xfffffedc
200094e8:	00841000 	addeq	r1, r4, r0
200094ec:	01008001 	tsteq	r0, r1
200094f0:	200100a0 	andcs	r0, r1, r0, lsr #1
200094f4:	01000000 	mrseq	r0, (UNDEF: 0)
200094f8:	00000022 	andeq	r0, r0, r2, lsr #32
200094fc:	80020000 	andhi	r0, r2, r0
20009500:	00808a00 	addeq	r8, r0, r0, lsl #20
20009504:	04004000 	streq	r4, [r0], #-0
20009508:	20440000 	subcs	r0, r4, r0
2000950c:	00200000 	eoreq	r0, r0, r0
20009510:	00000008 	andeq	r0, r0, r8
20009514:	00000010 	andeq	r0, r0, r0, lsl r0
20009518:	00001000 	andeq	r1, r0, r0
2000951c:	3200001c 	andcc	r0, r0, #28
20009520:	002f0000 	eoreq	r0, pc, r0
20009524:	00003f00 	andeq	r3, r0, r0, lsl #30
20009528:	01000007 	tsteq	r0, r7
2000952c:	00010000 	andeq	r0, r1, r0
20009530:	00000000 	andeq	r0, r0, r0

20009534 <flame4_gray_bits>:
	...
20009558:	40000000 	andmi	r0, r0, r0
2000955c:	08200010 	stmdaeq	r0!, {r4}
20009560:	0008c000 	andeq	ip, r8, r0
20009564:	f0000fc4 			; <UNDEFINED> instruction: 0xf0000fc4
20009568:	1ff80007 	svcne	0x00f80007
2000956c:	001ff000 	andseq	pc, pc, r0
20009570:	f0001fd0 			; <UNDEFINED> instruction: 0xf0001fd0
20009574:	1fc0001f 	svcne	0x00c0001f
20009578:	001f5000 	andseq	r5, pc, r0
2000957c:	e0000fe0 	and	r0, r0, r0, ror #31
20009580:	07800007 	streq	r0, [r0, r7]
20009584:	00078000 	andeq	r8, r7, r0
20009588:	00000780 	andeq	r0, r0, r0, lsl #15
2000958c:	0300000b 	movweq	r0, #11
20009590:	00010000 	andeq	r0, r1, r0
20009594:	0c000000 	stceq	0, cr0, [r0], {-0}
20009598:	00100000 	andseq	r0, r0, r0
	...

200095ac <flame4_light_bits>:
	...
200095b4:	00040000 	andeq	r0, r4, r0
200095b8:	40000400 	andmi	r0, r0, r0, lsl #8
200095bc:	c8800048 	stmgt	r0, {r3, r6}
200095c0:	00488000 	subeq	r8, r8, r0
200095c4:	e4004ac4 	str	r4, [r0], #-2756	; 0xfffff53c
200095c8:	2fec007d 	svccs	0x00ec007d
200095cc:	00fff800 	rscseq	pc, pc, r0, lsl #16
200095d0:	be00fbb8 	vmovlt.16	d16[0], pc
200095d4:	73cc00cb 	bicvc	r0, ip, #203	; 0xcb
200095d8:	00732e00 	rsbseq	r2, r3, r0, lsl #28
200095dc:	0e00703a 	mcreq	0, 0, r7, cr0, cr10, {1}
200095e0:	c0060050 	andgt	r0, r6, r0, asr r0
200095e4:	00e00e00 	rsceq	r0, r0, r0, lsl #28
200095e8:	0e00a00c 	cdpeq	0, 0, cr10, cr0, cr12, {0}
200095ec:	601c00e0 	andsvs	r0, ip, r0, ror #1
200095f0:	00602400 	rsbeq	r2, r0, r0, lsl #8
200095f4:	1800301c 	stmdane	r0, {r2, r3, r4, ip, sp}
200095f8:	50380078 	eorspl	r0, r8, r8, ror r0
200095fc:	00587000 	subseq	r7, r8, r0
20009600:	f0003830 			; <UNDEFINED> instruction: 0xf0003830
20009604:	1cf00024 	ldclne	0, cr0, [r0], #144	; 0x90
20009608:	001ee000 	andseq	lr, lr, r0
2000960c:	c0001fe0 	andgt	r1, r0, r0, ror #31
20009610:	0fc0000f 	svceq	0x00c0000f
	...

20009624 <firstTime.4079>:
20009624:	00000001 	andeq	r0, r0, r1

20009628 <boom1_black_bits>:
	...
2000978c:	0000003e 	andeq	r0, r0, lr, lsr r0
	...
20009798:	00630000 	rsbeq	r0, r3, r0
	...
200097a4:	80000000 	andhi	r0, r0, r0
200097a8:	00000043 	andeq	r0, r0, r3, asr #32
	...
200097b4:	00638000 	rsbeq	r8, r3, r0
	...
200097c0:	80000000 	andhi	r0, r0, r0
200097c4:	0000003f 	andeq	r0, r0, pc, lsr r0
	...
200097d0:	001f0000 	andseq	r0, pc, r0
	...

2000992c <boom1_gray_bits>:
	...
20009a9c:	00040000 	andeq	r0, r4, r0
	...
20009aac:	00000024 	andeq	r0, r0, r4, lsr #32
	...
20009ab8:	001c0000 	andseq	r0, ip, r0
	...

20009c30 <boom1_light_bits>:
	...
20009da0:	00180000 	andseq	r0, r8, r0
	...
20009db0:	00000018 	andeq	r0, r0, r8, lsl r0
	...

20009f34 <boom2_black_bits>:
	...
2000a050:	00007c00 	andeq	r7, r0, r0, lsl #24
	...
2000a05c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
2000a060:	00000038 	andeq	r0, r0, r8, lsr r0
	...
2000a06c:	0fffff00 	svceq	0x00ffff00
	...
2000a078:	ff800000 			; <UNDEFINED> instruction: 0xff800000
2000a07c:	00001fff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
	...
2000a088:	3ffeff80 	svccc	0x00feff80
	...
2000a094:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
2000a098:	00007f00 	andeq	r7, r0, r0, lsl #30
	...
2000a0a4:	7c01ffc0 	stcvc	15, cr15, [r1], {192}	; 0xc0
	...
2000a0b0:	ff800000 			; <UNDEFINED> instruction: 0xff800000
2000a0b4:	0000ff01 	andeq	pc, r0, r1, lsl #30
	...
2000a0c0:	fff1f800 	vcmla.f32	d31, d1, d0[0], #270
	...
2000a0cc:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
2000a0d0:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
	...
2000a0dc:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
	...
2000a0e8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
2000a0ec:	0000603f 	andeq	r6, r0, pc, lsr r0
	...
2000a0f8:	001ffc00 	andseq	pc, pc, r0, lsl #24
	...
2000a104:	fc000000 	stc2	0, cr0, [r0], {-0}
2000a108:	0000000f 	andeq	r0, r0, pc
	...
2000a114:	0003fc00 	andeq	pc, r3, r0, lsl #24
	...
2000a120:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
2000a124:	00000001 	andeq	r0, r0, r1
	...

2000a238 <boom2_gray_bits>:
	...
2000a38c:	00010000 	andeq	r0, r1, r0
	...
2000a39c:	0000000f 	andeq	r0, r0, pc
	...
2000a3a8:	03020000 	movweq	r0, #8192	; 0x2000
	...
2000a3b8:	000000fe 	strdeq	r0, [r0], -lr
	...
2000a3c4:	000e0000 	andeq	r0, lr, r0
	...

2000a53c <boom2_light_bits>:
	...
2000a6a0:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
2000a6ac:	00fc0000 	rscseq	r0, ip, r0
	...

2000a840 <boom3_black_bits>:
	...
2000a914:	000e0000 	andeq	r0, lr, r0
	...
2000a920:	80000000 	andhi	r0, r0, r0
2000a924:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
2000a930:	03ffc000 	mvnseq	ip, #0
	...
2000a93c:	e0000000 	and	r0, r0, r0
2000a940:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000a944:	000001fc 	strdeq	r0, [r0], -ip
2000a948:	00000000 	andeq	r0, r0, r0
2000a94c:	1f8ff000 	svcne	0x008ff000
2000a950:	03ff0000 	mvnseq	r0, #0
2000a954:	00000000 	andeq	r0, r0, r0
2000a958:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
2000a95c:	e0003e1f 	and	r3, r0, pc, lsl lr
2000a960:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000a964:	00000000 	andeq	r0, r0, r0
2000a968:	783ff000 	ldmdavc	pc!, {ip, sp, lr, pc}	; <UNPREDICTABLE>
2000a96c:	07fff800 	ldrbeq	pc, [pc, r0, lsl #16]!	; <UNPREDICTABLE>
2000a970:	00000000 	andeq	r0, r0, r0
2000a974:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
2000a978:	fc00f8ff 	stc2	8, cr15, [r0], {255}	; 0xff
2000a97c:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000a980:	00000000 	andeq	r0, r0, r0
2000a984:	ffffe000 			; <UNDEFINED> instruction: 0xffffe000
2000a988:	0fe03e00 	svceq	0x00e03e00
2000a98c:	00000000 	andeq	r0, r0, r0
2000a990:	c0000000 	andgt	r0, r0, r0
2000a994:	0700ffff 			; <UNDEFINED> instruction: 0x0700ffff
2000a998:	00001fe0 	andeq	r1, r0, r0, ror #31
2000a99c:	00000000 	andeq	r0, r0, r0
2000a9a0:	3fffc000 	svccc	0x00ffc000
2000a9a4:	3fe00300 	svccc	0x00e00300
2000a9a8:	00000000 	andeq	r0, r0, r0
2000a9ac:	e0000000 	and	r0, r0, r0
2000a9b0:	ff1c07ff 			; <UNDEFINED> instruction: 0xff1c07ff
2000a9b4:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
2000a9b8:	00000000 	andeq	r0, r0, r0
2000a9bc:	81ffc000 	mvnshi	ip, r0
2000a9c0:	3fffff3f 	svccc	0x00ffff3f
	...
2000a9cc:	fe7fc07f 	mrc2	0, 3, ip, cr15, cr15, {3}
2000a9d0:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
2000a9d4:	00000000 	andeq	r0, r0, r0
2000a9d8:	e0000000 	and	r0, r0, r0
2000a9dc:	0ffff87f 	svceq	0x00fff87f
	...
2000a9e8:	007df800 	rsbseq	pc, sp, r0, lsl #16
2000a9ec:	000007fe 	strdeq	r0, [r0], -lr
2000a9f0:	00000000 	andeq	r0, r0, r0
2000a9f4:	fc000000 	stc2	0, cr0, [r0], {-0}
2000a9f8:	03fc00f8 	mvnseq	r0, #248	; 0xf8
	...
2000aa04:	01f87e00 	mvnseq	r7, r0, lsl #28
2000aa08:	00000030 	andeq	r0, r0, r0, lsr r0
2000aa0c:	00000000 	andeq	r0, r0, r0
2000aa10:	7f800000 	svcvc	0x00800000
2000aa14:	000003f8 	strdeq	r0, [r0], -r8
	...
2000aa20:	07fc7fc0 	ldrbeq	r7, [ip, r0, asr #31]!
	...
2000aa2c:	fff00000 			; <UNDEFINED> instruction: 0xfff00000	; IMB
2000aa30:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
2000aa3c:	07fffff0 			; <UNDEFINED> instruction: 0x07fffff0
	...
2000aa48:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
2000aa4c:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
2000aa58:	03ffbe00 	mvnseq	fp, #0, 28
	...
2000aa68:	000003fe 	strdeq	r0, [r0], -lr
	...
2000aa74:	01f00000 	mvnseq	r0, r0
	...

2000ab44 <boom3_gray_bits>:
	...
2000ac50:	00700000 	rsbseq	r0, r0, r0
	...
2000ac60:	00000020 	andeq	r0, r0, r0, lsr #32
	...
2000ac6c:	04c00000 	strbeq	r0, [r0], #0
	...
2000ac7c:	00000700 	andeq	r0, r0, r0, lsl #14
	...
2000ac8c:	0010c000 	andseq	ip, r0, r0
	...
2000ac98:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
2000ac9c:	00000010 	andeq	r0, r0, r0, lsl r0
	...
2000aca8:	001ffc00 	andseq	pc, pc, r0, lsl #24
	...
2000acec:	00020000 	andeq	r0, r2, r0
	...
2000acfc:	00000001 	andeq	r0, r0, r1
	...
2000ad08:	00018000 	andeq	r8, r1, r0
	...
2000ad14:	80000000 	andhi	r0, r0, r0
2000ad18:	00000007 	andeq	r0, r0, r7
	...
2000ad24:	00038000 	andeq	r8, r3, r0
	...

2000ae48 <boom3_light_bits>:
	...
2000af64:	000001c0 	andeq	r0, r0, r0, asr #3
	...
2000af70:	03000000 	movweq	r0, #0
	...
2000af90:	000f0000 	andeq	r0, pc, r0
	...
2000af9c:	80000000 	andhi	r0, r0, r0
2000afa0:	0000000f 	andeq	r0, r0, pc
	...
2000b000:	00000006 	andeq	r0, r0, r6
	...
2000b00c:	00060000 	andeq	r0, r6, r0
	...

2000b14c <boom4_black_bits>:
	...
2000b1a8:	00000060 	andeq	r0, r0, r0, rrx
2000b1ac:	00000000 	andeq	r0, r0, r0
2000b1b0:	7c000000 	stcvc	0, cr0, [r0], {-0}
2000b1b4:	00200000 	eoreq	r0, r0, r0
	...
2000b1c0:	0001fc00 	andeq	pc, r1, r0, lsl #24
	...
2000b1cc:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
2000b1d0:	00000003 	andeq	r0, r0, r3
	...
2000b1dc:	0003f000 	andeq	pc, r3, r0
	...
2000b1e8:	607ff000 	rsbsvs	pc, pc, r0
2000b1ec:	f8000007 			; <UNDEFINED> instruction: 0xf8000007
2000b1f0:	00000001 	andeq	r0, r0, r1
2000b1f4:	ff81c000 			; <UNDEFINED> instruction: 0xff81c000
2000b1f8:	0007e1ff 	strdeq	lr, [r7], -pc	; <UNPREDICTABLE>
2000b1fc:	0783ff80 	streq	pc, [r3, r0, lsl #31]
2000b200:	c0000000 	andgt	r0, r0, r0
2000b204:	f3ffff81 			; <UNDEFINED> instruction: 0xf3ffff81
2000b208:	ffffe003 			; <UNDEFINED> instruction: 0xffffe003
2000b20c:	00000783 	andeq	r0, r0, r3, lsl #15
2000b210:	ff80c000 			; <UNDEFINED> instruction: 0xff80c000
2000b214:	f003f7ff 			; <UNDEFINED> instruction: 0xf003f7ff
2000b218:	0787ffff 			; <UNDEFINED> instruction: 0x0787ffff
2000b21c:	00000000 	andeq	r0, r0, r0
2000b220:	f7c3ff80 			; <UNDEFINED> instruction: 0xf7c3ff80
2000b224:	cffff003 	svcgt	0x00fff003
2000b228:	00000787 	andeq	r0, r0, r7, lsl #15
2000b22c:	ff800000 			; <UNDEFINED> instruction: 0xff800000
2000b230:	f001efe3 			; <UNDEFINED> instruction: 0xf001efe3
2000b234:	030787ff 	movweq	r8, #30719	; 0x77ff
2000b238:	00000000 	andeq	r0, r0, r0
2000b23c:	8ff0ff80 	svchi	0x00f0ff80
2000b240:	87fff001 	ldrbhi	pc, [pc, r1]!	; <UNPREDICTABLE>
2000b244:	00000003 	andeq	r0, r0, r3
2000b248:	7f800000 	svcvc	0x00800000
2000b24c:	e0000ff8 	strd	r0, [r0], -r8
2000b250:	00c387ff 	strdeq	r8, [r3], #127	; 0x7f
2000b254:	00000000 	andeq	r0, r0, r0
2000b258:	07ffff80 	ldrbeq	pc, [pc, r0, lsl #31]!	; <UNPREDICTABLE>
2000b25c:	c7fff800 	ldrbgt	pc, [pc, r0, lsl #16]!	; <UNPREDICTABLE>
2000b260:	000000c3 	andeq	r0, r0, r3, asr #1
2000b264:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
2000b268:	fc0003ff 	stc2	3, cr0, [r0], {255}	; 0xff
2000b26c:	0001e3ff 	strdeq	lr, [r1], -pc	; <UNPREDICTABLE>
2000b270:	c0000000 	andgt	r0, r0, r0
2000b274:	039fffc0 	orrseq	pc, pc, #192, 30	; 0x300
2000b278:	f9fffc00 			; <UNDEFINED> instruction: 0xf9fffc00
2000b27c:	00000000 	andeq	r0, r0, r0
2000b280:	ffe0c000 			; <UNDEFINED> instruction: 0xffe0c000
2000b284:	fc007807 	stc2	8, cr7, [r0], {7}
2000b288:	00007fff 	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
2000b28c:	00000000 	andeq	r0, r0, r0
2000b290:	7e03ffe0 	cdpvc	15, 0, cr15, cr3, cr0, {7}
2000b294:	3ffffc00 	svccc	0x00fffc00
2000b298:	0000001c 	andeq	r0, r0, ip, lsl r0
2000b29c:	ffc00000 			; <UNDEFINED> instruction: 0xffc00000
2000b2a0:	fc00ff00 	stc2	15, cr15, [r0], {-0}
2000b2a4:	007e1fff 	ldrshteq	r1, [lr], #-255	; 0xffffff01
2000b2a8:	00000000 	andeq	r0, r0, r0
2000b2ac:	7f803f00 	svcvc	0x00803f00
2000b2b0:	3ffe3800 	svccc	0x00fe3800
2000b2b4:	000000fe 	strdeq	r0, [r0], -lr
2000b2b8:	00000000 	andeq	r0, r0, r0
2000b2bc:	02007f80 	andeq	r7, r0, #128, 30	; 0x200
2000b2c0:	00fe1ff8 	ldrshteq	r1, [lr], #248	; 0xf8
2000b2c4:	00000000 	andeq	r0, r0, r0
2000b2c8:	7f800000 	svcvc	0x00800000
2000b2cc:	1ff00700 	svcne	0x00f00700
2000b2d0:	000000ee 	andeq	r0, r0, lr, ror #1
2000b2d4:	00000000 	andeq	r0, r0, r0
2000b2d8:	0787ff80 	streq	pc, [r7, r0, lsl #31]
2000b2dc:	006607e0 	rsbeq	r0, r6, r0, ror #15
2000b2e0:	00000000 	andeq	r0, r0, r0
2000b2e4:	ff83c000 			; <UNDEFINED> instruction: 0xff83c000
2000b2e8:	00000fc3 	andeq	r0, r0, r3, asr #31
2000b2ec:	00000076 	andeq	r0, r0, r6, ror r0
2000b2f0:	e0000000 	and	r0, r0, r0
2000b2f4:	0fffffc3 	svceq	0x00ffffc3
2000b2f8:	003f0000 	eorseq	r0, pc, r0
2000b2fc:	00000000 	andeq	r0, r0, r0
2000b300:	ffe3f000 			; <UNDEFINED> instruction: 0xffe3f000
2000b304:	80000fff 	strdhi	r0, [r0], -pc	; <UNPREDICTABLE>
2000b308:	0000003f 	andeq	r0, r0, pc, lsr r0
2000b30c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
2000b310:	0ffffff3 	svceq	0x00fffff3
2000b314:	003f81fe 	ldrshteq	r8, [pc], -lr
2000b318:	00000000 	andeq	r0, r0, r0
2000b31c:	9ffbe000 	svcls	0x00fbe000
2000b320:	81ff03ff 	ldrshhi	r0, [pc, #63]	; 2000b367 <boom4_black_bits+0x21b>
2000b324:	0000001f 	andeq	r0, r0, pc, lsl r0
2000b328:	00000000 	andeq	r0, r0, r0
2000b32c:	00ff1ff8 	ldrshteq	r1, [pc], #248
2000b330:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000b334:	00000000 	andeq	r0, r0, r0
2000b338:	3ff80000 	svccc	0x00f80000
2000b33c:	00fe001f 	rscseq	r0, lr, pc, lsl r0
	...
2000b348:	001e7ff8 			; <UNDEFINED> instruction: 0x001e7ff8
2000b34c:	000000fc 	strdeq	r0, [r0], -ip
2000b350:	00000000 	andeq	r0, r0, r0
2000b354:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
2000b358:	0078003f 	rsbseq	r0, r8, pc, lsr r0
	...
2000b364:	007ffffc 	ldrshteq	pc, [pc], #-252	; <UNPREDICTABLE>
	...
2000b370:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
2000b374:	0000007f 	andeq	r0, r0, pc, ror r0
2000b378:	00000000 	andeq	r0, r0, r0
2000b37c:	04000000 	streq	r0, [r0], #-0
2000b380:	007fc07e 	rsbseq	ip, pc, lr, ror r0	; <UNPREDICTABLE>
	...
2000b38c:	001e0000 	andseq	r0, lr, r0
2000b390:	0000007f 	andeq	r0, r0, pc, ror r0
	...
2000b39c:	1c3c1e0c 	ldcne	14, cr1, [ip], #-48	; 0xffffffd0
	...
2000b3a8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
2000b3ac:	00007c00 	andeq	r7, r0, r0, lsl #24
	...
2000b3b8:	fc01ff00 	stc2	15, cr15, [r1], {-0}
	...
2000b3c4:	ff000000 			; <UNDEFINED> instruction: 0xff000000
2000b3c8:	0000fc01 	andeq	pc, r0, r1, lsl #24
	...
2000b3d4:	fc01fc00 	stc2	12, cr15, [r1], {-0}
2000b3d8:	00000001 	andeq	r0, r0, r1
2000b3dc:	00000000 	andeq	r0, r0, r0
2000b3e0:	e0000000 	and	r0, r0, r0
2000b3e4:	0000f801 	andeq	pc, r0, r1, lsl #16
	...

2000b450 <boom4_gray_bits>:
	...
2000b4ec:	80000000 	andhi	r0, r0, r0
	...
2000b524:	002c0000 	eoreq	r0, ip, r0
2000b528:	30000000 	andcc	r0, r0, r0
	...
2000b534:	00000004 	andeq	r0, r0, r4
2000b538:	00001800 	andeq	r1, r0, r0, lsl #16
2000b53c:	00000000 	andeq	r0, r0, r0
2000b540:	000f0000 	andeq	r0, pc, r0
2000b544:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
2000b548:	00000000 	andeq	r0, r0, r0
2000b54c:	80000000 	andhi	r0, r0, r0
2000b550:	00000007 	andeq	r0, r0, r7
2000b554:	00005800 	andeq	r5, r0, r0, lsl #16
	...
2000b560:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
	...
2000b570:	00001c00 	andeq	r1, r0, r0, lsl #24
	...
2000b57c:	06000000 	streq	r0, [r0], -r0
	...
2000b5c0:	01c00000 	biceq	r0, r0, r0
	...
2000b5d0:	00000020 	andeq	r0, r0, r0, lsr #32
2000b5d4:	00000010 	andeq	r0, r0, r0, lsl r0
2000b5d8:	00000000 	andeq	r0, r0, r0
2000b5dc:	00380000 	eorseq	r0, r8, r0
2000b5e0:	00180000 	andseq	r0, r8, r0
	...
2000b5ec:	0000003c 	andeq	r0, r0, ip, lsr r0
2000b5f0:	00000008 	andeq	r0, r0, r8
	...
2000b620:	60000000 	andvs	r0, r0, r0
	...
2000b630:	00006000 	andeq	r6, r0, r0
	...
2000b63c:	c0000000 	andgt	r0, r0, r0
	...
2000b64c:	00018000 	andeq	r8, r1, r0
	...

2000b754 <boom4_light_bits>:
	...
2000b828:	00100000 	andseq	r0, r0, r0
	...
2000b838:	00000018 	andeq	r0, r0, r8, lsl r0
2000b83c:	00006000 	andeq	r6, r0, r0
	...
2000b848:	20000000 	andcs	r0, r0, r0
	...
2000b858:	00002000 	andeq	r2, r0, r0
	...
2000b8d4:	000000c0 	andeq	r0, r0, r0, asr #1
	...
2000b8e0:	00400000 	subeq	r0, r0, r0
	...
2000b934:	00008000 	andeq	r8, r0, r0
	...

2000ba58 <boom5_black_bits>:
	...
2000bab4:	00000060 	andeq	r0, r0, r0, rrx
2000bab8:	00000000 	andeq	r0, r0, r0
2000babc:	7c000000 	stcvc	0, cr0, [r0], {-0}
2000bac0:	00200000 	eoreq	r0, r0, r0
	...
2000bacc:	0001fc00 	andeq	pc, r1, r0, lsl #24
2000bad0:	00000020 	andeq	r0, r0, r0, lsr #32
2000bad4:	00000000 	andeq	r0, r0, r0
2000bad8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
2000badc:	00000003 	andeq	r0, r0, r3
	...
2000bae8:	0003f000 	andeq	pc, r3, r0
	...
2000baf4:	607ff000 	rsbsvs	pc, pc, r0
2000baf8:	f8000006 			; <UNDEFINED> instruction: 0xf8000006
2000bafc:	00000001 	andeq	r0, r0, r1
2000bb00:	ff81c000 			; <UNDEFINED> instruction: 0xff81c000
2000bb04:	0006e1ff 	strdeq	lr, [r6], -pc	; <UNPREDICTABLE>
2000bb08:	0783ff80 	streq	pc, [r3, r0, lsl #31]
2000bb0c:	c0000000 	andgt	r0, r0, r0
2000bb10:	f3ffff81 			; <UNDEFINED> instruction: 0xf3ffff81
2000bb14:	ffffe00e 			; <UNDEFINED> instruction: 0xffffe00e
2000bb18:	00000783 	andeq	r0, r0, r3, lsl #15
2000bb1c:	ff80c000 			; <UNDEFINED> instruction: 0xff80c000
2000bb20:	f007f7ff 			; <UNDEFINED> instruction: 0xf007f7ff
2000bb24:	0787ffff 			; <UNDEFINED> instruction: 0x0787ffff
2000bb28:	00000000 	andeq	r0, r0, r0
2000bb2c:	f7f1ff80 			; <UNDEFINED> instruction: 0xf7f1ff80
2000bb30:	cffff007 	svcgt	0x00fff007
2000bb34:	00000787 	andeq	r0, r0, r7, lsl #15
2000bb38:	ff800000 			; <UNDEFINED> instruction: 0xff800000
2000bb3c:	f003eff0 			; <UNDEFINED> instruction: 0xf003eff0
2000bb40:	0707c3ff 			; <UNDEFINED> instruction: 0x0707c3ff
2000bb44:	00000000 	andeq	r0, r0, r0
2000bb48:	cff0ff80 	svcgt	0x00f0ff80
2000bb4c:	c3fff003 	mvnsgt	pc, #3
2000bb50:	00000603 	andeq	r0, r0, r3, lsl #12
2000bb54:	7f800000 	svcvc	0x00800000
2000bb58:	e0038ff8 	strd	r8, [r3], -r8	; <UNPREDICTABLE>
2000bb5c:	04c3e3ff 	strbeq	lr, [r3], #1023	; 0x3ff
2000bb60:	00000000 	andeq	r0, r0, r0
2000bb64:	07f87f80 	ldrbeq	r7, [r8, r0, lsl #31]!
2000bb68:	e3fff803 	mvns	pc, #196608	; 0x30000
2000bb6c:	000004c3 	andeq	r0, r0, r3, asr #9
2000bb70:	3fc00000 	svccc	0x00c00000
2000bb74:	fc0003ff 	stc2	3, cr0, [r0], {255}	; 0xff
2000bb78:	0481f3ff 	streq	pc, [r1], #1023	; 0x3ff
2000bb7c:	c0000000 	andgt	r0, r0, r0
2000bb80:	03bfffc0 			; <UNDEFINED> instruction: 0x03bfffc0
2000bb84:	f9fffc00 			; <UNDEFINED> instruction: 0xf9fffc00
2000bb88:	00000081 	andeq	r0, r0, r1, lsl #1
2000bb8c:	ffe0c000 			; <UNDEFINED> instruction: 0xffe0c000
2000bb90:	fc00781f 	stc2	8, cr7, [r0], {31}
2000bb94:	0001fcff 	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
2000bb98:	40000000 	andmi	r0, r0, r0
2000bb9c:	7e07ffe0 	cdpvc	15, 0, cr15, cr7, cr0, {7}
2000bba0:	3ffffc00 	svccc	0x00fffc00
2000bba4:	0000001c 	andeq	r0, r0, ip, lsl r0
2000bba8:	ffc04000 			; <UNDEFINED> instruction: 0xffc04000
2000bbac:	fc00ff07 	stc2	15, cr15, [r0], {7}
2000bbb0:	007e1fff 	ldrshteq	r1, [lr], #-255	; 0xffffff01
2000bbb4:	00000000 	andeq	r0, r0, r0
2000bbb8:	7f83ffc0 	svcvc	0x0083ffc0
2000bbbc:	3ffe7800 	svccc	0x00fe7800
2000bbc0:	000000fe 	strdeq	r0, [r0], -lr
2000bbc4:	ff800000 			; <UNDEFINED> instruction: 0xff800000
2000bbc8:	63007f81 	movwvs	r7, #3969	; 0xf81
2000bbcc:	00fe1ff8 	ldrshteq	r1, [lr], #248	; 0xf8
2000bbd0:	00000000 	andeq	r0, r0, r0
2000bbd4:	7f803f00 	svcvc	0x00803f00
2000bbd8:	1ff06700 	svcne	0x00f06700
2000bbdc:	000000f6 	strdeq	r0, [r0], -r6
2000bbe0:	02000000 	andeq	r0, r0, #0
2000bbe4:	4781ff80 	strmi	pc, [r1, r0, lsl #31]
2000bbe8:	00660fe0 	rsbeq	r0, r6, r0, ror #31
2000bbec:	00000000 	andeq	r0, r0, r0
2000bbf0:	ff83c000 			; <UNDEFINED> instruction: 0xff83c000
2000bbf4:	0e004fc0 	cdpeq	15, 0, cr4, cr0, cr0, {6}
2000bbf8:	00000066 	andeq	r0, r0, r6, rrx
2000bbfc:	e0000000 	and	r0, r0, r0
2000bc00:	0ff07fc3 	svceq	0x00f07fc3
2000bc04:	00770c00 	rsbseq	r0, r7, r0, lsl #24
2000bc08:	00000000 	andeq	r0, r0, r0
2000bc0c:	7fe3f000 	svcvc	0x00e3f000
2000bc10:	8c000fff 	stchi	15, cr0, [r0], {255}	; 0xff
2000bc14:	0000007f 	andeq	r0, r0, pc, ror r0
2000bc18:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
2000bc1c:	0ffffff3 	svceq	0x00fffff3
2000bc20:	007f81fe 	ldrshteq	r8, [pc], #-30
2000bc24:	00000000 	andeq	r0, r0, r0
2000bc28:	fffbe000 			; <UNDEFINED> instruction: 0xfffbe000
2000bc2c:	81ff03ff 	ldrshhi	r0, [pc, #63]	; 2000bc73 <boom5_black_bits+0x21b>
2000bc30:	0000007f 	andeq	r0, r0, pc, ror r0
2000bc34:	00000000 	andeq	r0, r0, r0
2000bc38:	00ff1ff8 	ldrshteq	r1, [pc], #248
2000bc3c:	006f01ff 	strdeq	r0, [pc], #-31	; <UNPREDICTABLE>
2000bc40:	00000000 	andeq	r0, r0, r0
2000bc44:	0ff80000 	svceq	0x00f80000
2000bc48:	00fe001e 	rscseq	r0, lr, lr, lsl r0
2000bc4c:	00000042 	andeq	r0, r0, r2, asr #32
2000bc50:	00000000 	andeq	r0, r0, r0
2000bc54:	001e7ff8 			; <UNDEFINED> instruction: 0x001e7ff8
2000bc58:	004200fe 	strdeq	r0, [r2], #-14
2000bc5c:	00000000 	andeq	r0, r0, r0
2000bc60:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
2000bc64:	007c003c 	rsbseq	r0, ip, ip, lsr r0
	...
2000bc70:	007ffffc 	ldrshteq	pc, [pc], #-252	; <UNPREDICTABLE>
2000bc74:	0000001c 	andeq	r0, r0, ip, lsl r0
2000bc78:	00000000 	andeq	r0, r0, r0
2000bc7c:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
2000bc80:	000c007f 	andeq	r0, ip, pc, ror r0
2000bc84:	00000000 	andeq	r0, r0, r0
2000bc88:	04000000 	streq	r0, [r0], #-0
2000bc8c:	007fc07e 	rsbseq	ip, pc, lr, ror r0	; <UNPREDICTABLE>
2000bc90:	0000000c 	andeq	r0, r0, ip
2000bc94:	00000000 	andeq	r0, r0, r0
2000bc98:	001e0000 	andseq	r0, lr, r0
2000bc9c:	0000007f 	andeq	r0, r0, pc, ror r0
	...
2000bca8:	1c3c1e0e 	ldcne	14, cr1, [ip], #-56	; 0xffffffc8
	...
2000bcb4:	ff0c0000 			; <UNDEFINED> instruction: 0xff0c0000
2000bcb8:	00007c00 	andeq	r7, r0, r0, lsl #24
	...
2000bcc4:	fc01ff0c 	stc2	15, cr15, [r1], {12}
	...
2000bcd0:	ff040000 			; <UNDEFINED> instruction: 0xff040000
2000bcd4:	0000fc01 	andeq	pc, r0, r1, lsl #24
	...
2000bce0:	fc01fc00 	stc2	12, cr15, [r1], {-0}
2000bce4:	00000001 	andeq	r0, r0, r1
2000bce8:	00000000 	andeq	r0, r0, r0
2000bcec:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
2000bcf0:	0000f801 	andeq	pc, r0, r1, lsl #16
	...
2000bcfc:	9801f000 	stmdals	r1, {ip, sp, lr, pc}
	...
2000bd08:	c0000000 	andgt	r0, r0, r0
2000bd0c:	00001000 	andeq	r1, r0, r0
	...
2000bd18:	10000000 	andne	r0, r0, r0
	...

2000bd5c <boom5_gray_bits>:
	...
2000bdf8:	80000000 	andhi	r0, r0, r0
	...
2000be08:	00010000 	andeq	r0, r1, r0
	...
2000be18:	00000001 	andeq	r0, r0, r1
	...
2000be30:	000e0000 	andeq	r0, lr, r0
2000be34:	20000000 	andcs	r0, r0, r0
	...
2000be40:	00000007 	andeq	r0, r0, r7
2000be44:	00000c00 	andeq	r0, r0, r0, lsl #24
2000be48:	00000000 	andeq	r0, r0, r0
2000be4c:	00030000 	andeq	r0, r3, r0
2000be50:	0c000000 	stceq	0, cr0, [r0], {-0}
2000be54:	00000000 	andeq	r0, r0, r0
2000be58:	80000000 	andhi	r0, r0, r0
2000be5c:	00000001 	andeq	r0, r0, r1
2000be60:	00000400 	andeq	r0, r0, r0, lsl #8
2000be64:	00000000 	andeq	r0, r0, r0
2000be68:	00058000 	andeq	r8, r5, r0
2000be6c:	14000000 	strne	r0, [r0], #-0
2000be70:	00000000 	andeq	r0, r0, r0
2000be74:	c0000000 	andgt	r0, r0, r0
2000be78:	00000000 	andeq	r0, r0, r0
2000be7c:	00000c00 	andeq	r0, r0, r0, lsl #24
	...
2000be88:	06000000 	streq	r0, [r0], -r0
	...
2000be98:	00000300 	andeq	r0, r0, r0, lsl #6
	...
2000becc:	00e80000 	rsceq	r0, r8, r0
	...
2000bedc:	0000008c 	andeq	r0, r0, ip, lsl #1
2000bee0:	00000008 	andeq	r0, r0, r8
2000bee4:	00000000 	andeq	r0, r0, r0
2000bee8:	00060000 	andeq	r0, r6, r0
2000beec:	00080000 	andeq	r0, r8, r0
	...
2000bef8:	0000003f 	andeq	r0, r0, pc, lsr r0
2000befc:	00000018 	andeq	r0, r0, r8, lsl r0
2000bf00:	00000000 	andeq	r0, r0, r0
2000bf04:	000f8000 	andeq	r8, pc, r0
2000bf08:	00080000 	andeq	r0, r8, r0
2000bf0c:	00000000 	andeq	r0, r0, r0
2000bf10:	80000000 	andhi	r0, r0, r0
	...
2000bf3c:	00002000 	andeq	r2, r0, r0
	...
2000bf48:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
2000bf4c:	00000001 	andeq	r0, r0, r1
	...
2000bf58:	00018000 	andeq	r8, r1, r0
	...
2000bf68:	00000003 	andeq	r0, r0, r3
	...

2000c060 <boom5_light_bits>:
	...
2000c100:	00000001 	andeq	r0, r0, r1
	...
2000c138:	10000000 	andne	r0, r0, r0
	...
2000c144:	00000008 	andeq	r0, r0, r8
2000c148:	00003000 	andeq	r3, r0, r0
2000c14c:	00000000 	andeq	r0, r0, r0
2000c150:	000c0000 	andeq	r0, ip, r0
2000c154:	30000000 	andcc	r0, r0, r0
	...
2000c160:	00000006 	andeq	r0, r0, r6
2000c164:	00001800 	andeq	r1, r0, r0, lsl #16
2000c168:	00000000 	andeq	r0, r0, r0
2000c16c:	00020000 	andeq	r0, r2, r0
2000c170:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
	...
2000c1e0:	00000070 	andeq	r0, r0, r0, ror r0
	...
2000c1ec:	00780000 	rsbseq	r0, r8, r0
2000c1f0:	00100000 	andseq	r0, r0, r0
	...
2000c240:	0000c000 	andeq	ip, r0, r0
	...

2000c364 <boom6_black_bits>:
	...
2000c3c0:	00000060 	andeq	r0, r0, r0, rrx
2000c3c4:	00000000 	andeq	r0, r0, r0
2000c3c8:	7c000000 	stcvc	0, cr0, [r0], {-0}
2000c3cc:	00200000 	eoreq	r0, r0, r0
	...
2000c3d8:	0001fc00 	andeq	pc, r1, r0, lsl #24
2000c3dc:	00000020 	andeq	r0, r0, r0, lsr #32
2000c3e0:	00000000 	andeq	r0, r0, r0
2000c3e4:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
2000c3e8:	00200003 	eoreq	r0, r0, r3
	...
2000c3f4:	0003f000 	andeq	pc, r3, r0
	...
2000c400:	607ff000 	rsbsvs	pc, pc, r0
2000c404:	f8000006 			; <UNDEFINED> instruction: 0xf8000006
2000c408:	00000001 	andeq	r0, r0, r1
2000c40c:	ff81c000 			; <UNDEFINED> instruction: 0xff81c000
2000c410:	000661ff 	strdeq	r6, [r6], -pc	; <UNPREDICTABLE>
2000c414:	0783ff80 	streq	pc, [r3, r0, lsl #31]
2000c418:	c0000000 	andgt	r0, r0, r0
2000c41c:	73ffff81 	mvnsvc	pc, #516	; 0x204
2000c420:	ffffe00e 			; <UNDEFINED> instruction: 0xffffe00e
2000c424:	00000783 	andeq	r0, r0, r3, lsl #15
2000c428:	ff80c000 			; <UNDEFINED> instruction: 0xff80c000
2000c42c:	f00ef7f8 			; <UNDEFINED> instruction: 0xf00ef7f8
2000c430:	0787ffff 			; <UNDEFINED> instruction: 0x0787ffff
2000c434:	40000000 	andmi	r0, r0, r0
2000c438:	f7f03f80 			; <UNDEFINED> instruction: 0xf7f03f80
2000c43c:	e3fff007 	mvns	pc, #7
2000c440:	00000787 	andeq	r0, r0, r7, lsl #15
2000c444:	1f800000 	svcne	0x00800000
2000c448:	f007efe0 			; <UNDEFINED> instruction: 0xf007efe0
2000c44c:	0707c1ff 			; <UNDEFINED> instruction: 0x0707c1ff
2000c450:	00000000 	andeq	r0, r0, r0
2000c454:	cfe01f80 	svcgt	0x00e01f80
2000c458:	c1fff003 	mvnsgt	pc, r3
2000c45c:	00000603 	andeq	r0, r0, r3, lsl #12
2000c460:	1f800000 	svcne	0x00800000
2000c464:	f0038ff0 			; <UNDEFINED> instruction: 0xf0038ff0
2000c468:	04c3c1ff 	strbeq	ip, [r3], #511	; 0x1ff
2000c46c:	00000000 	andeq	r0, r0, r0
2000c470:	07fc1f80 	ldrbeq	r1, [ip, r0, lsl #31]!
2000c474:	c1fff803 	mvnsgt	pc, r3, lsl #16
2000c478:	000004c3 	andeq	r0, r0, r3, asr #9
2000c47c:	1fc00000 	svcne	0x00c00000
2000c480:	fc0203ff 	stc2	3, cr0, [r2], {255}	; 0xff
2000c484:	04c1c0ff 	strbeq	ip, [r1], #255	; 0xff
2000c488:	c0000000 	andgt	r0, r0, r0
2000c48c:	03bfffc0 			; <UNDEFINED> instruction: 0x03bfffc0
2000c490:	f07ffc00 			; <UNDEFINED> instruction: 0xf07ffc00
2000c494:	00000481 	andeq	r0, r0, r1, lsl #9
2000c498:	ffe0c000 			; <UNDEFINED> instruction: 0xffe0c000
2000c49c:	fc00799f 	stc2	9, cr7, [r0], {159}	; 0x9f	; <UNPREDICTABLE>
2000c4a0:	0081f87f 	addeq	pc, r1, pc, ror r8	; <UNPREDICTABLE>
2000c4a4:	40000000 	andmi	r0, r0, r0
2000c4a8:	7e87ffe0 	cdpvc	15, 8, cr15, cr7, cr0, {7}
2000c4ac:	387ffc00 	ldmdacc	pc!, {sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
2000c4b0:	0000001c 	andeq	r0, r0, ip, lsl r0
2000c4b4:	ffc04000 			; <UNDEFINED> instruction: 0xffc04000
2000c4b8:	fc00ff07 	stc2	15, cr15, [r0], {7}
2000c4bc:	007e1fff 	ldrshteq	r1, [lr], #-255	; 0xffffff01
2000c4c0:	40000000 	andmi	r0, r0, r0
2000c4c4:	7f83ffc0 	svcvc	0x0083ffc0
2000c4c8:	3ffe7800 	svccc	0x00fe7800
2000c4cc:	000000fe 	strdeq	r0, [r0], -lr
2000c4d0:	ff800000 			; <UNDEFINED> instruction: 0xff800000
2000c4d4:	63007f81 	movwvs	r7, #3969	; 0xf81
2000c4d8:	00ee1ff8 	strdeq	r1, [lr], #248	; 0xf8	; <UNPREDICTABLE>
2000c4dc:	00000000 	andeq	r0, r0, r0
2000c4e0:	7f803f00 	svcvc	0x00803f00
2000c4e4:	1ff06600 	svcne	0x00f06600
2000c4e8:	000000e6 	andeq	r0, r0, r6, ror #1
2000c4ec:	07000000 	streq	r0, [r0, -r0]
2000c4f0:	4600ff80 	strmi	pc, [r0], -r0, lsl #31
2000c4f4:	00660fe0 	rsbeq	r0, r6, r0, ror #31
2000c4f8:	00000000 	andeq	r0, r0, r0
2000c4fc:	3f83c300 	svccc	0x0083c300
2000c500:	0e004f80 	cdpeq	15, 0, cr4, cr0, cr0, {4}
2000c504:	00000066 	andeq	r0, r0, r6, rrx
2000c508:	e3000000 	movw	r0, #0
2000c50c:	0ff03fc3 	svceq	0x00f03fc3
2000c510:	007f0c00 	rsbseq	r0, pc, r0, lsl #24
2000c514:	00000000 	andeq	r0, r0, r0
2000c518:	ffe3f300 			; <UNDEFINED> instruction: 0xffe3f300
2000c51c:	8c000fff 	stchi	15, cr0, [r0], {255}	; 0xff
2000c520:	0000007f 	andeq	r0, r0, pc, ror r0
2000c524:	f1000000 	cps	#0
2000c528:	0ffffff3 	svceq	0x00fffff3
2000c52c:	007f89fe 	ldrshteq	r8, [pc], #-158
2000c530:	00000000 	andeq	r0, r0, r0
2000c534:	3ffbe000 	svccc	0x00fbe000
2000c538:	89ff03ff 	ldmibhi	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9}^	; <UNPREDICTABLE>
2000c53c:	0000007f 	andeq	r0, r0, pc, ror r0
2000c540:	80000000 	andhi	r0, r0, r0
2000c544:	00ff1ffb 	ldrshteq	r1, [pc], #251
2000c548:	006f01ff 	strdeq	r0, [pc], #-31	; <UNPREDICTABLE>
2000c54c:	00000000 	andeq	r0, r0, r0
2000c550:	0ff98000 	svceq	0x00f98000
2000c554:	00fe001e 	rscseq	r0, lr, lr, lsl r0
2000c558:	00000066 	andeq	r0, r0, r6, rrx
2000c55c:	80000000 	andhi	r0, r0, r0
2000c560:	001e3ff8 			; <UNDEFINED> instruction: 0x001e3ff8
2000c564:	004200fe 	strdeq	r0, [r2], #-14
2000c568:	00000000 	andeq	r0, r0, r0
2000c56c:	fffc0000 			; <UNDEFINED> instruction: 0xfffc0000
2000c570:	007c003c 	rsbseq	r0, ip, ip, lsr r0
2000c574:	00000042 	andeq	r0, r0, r2, asr #32
2000c578:	00000000 	andeq	r0, r0, r0
2000c57c:	0079fffc 	ldrshteq	pc, [r9], #-252	; 0xffffff04	; <UNPREDICTABLE>
2000c580:	0002001c 	andeq	r0, r2, ip, lsl r0
2000c584:	00000000 	andeq	r0, r0, r0
2000c588:	fffe0000 			; <UNDEFINED> instruction: 0xfffe0000
2000c58c:	000c007f 	andeq	r0, ip, pc, ror r0
2000c590:	00000002 	andeq	r0, r0, r2
2000c594:	04000000 	streq	r0, [r0], #-0
2000c598:	007fc07e 	rsbseq	ip, pc, lr, ror r0	; <UNPREDICTABLE>
2000c59c:	0000000c 	andeq	r0, r0, ip
2000c5a0:	00000000 	andeq	r0, r0, r0
2000c5a4:	003e0400 	eorseq	r0, lr, r0, lsl #8
2000c5a8:	0004007f 	andeq	r0, r4, pc, ror r0
	...
2000c5b4:	1c3c1e1e 	ldcne	14, cr1, [ip], #-120	; 0xffffff88
2000c5b8:	00000004 	andeq	r0, r0, r4
2000c5bc:	00000000 	andeq	r0, r0, r0
2000c5c0:	ff1c0000 			; <UNDEFINED> instruction: 0xff1c0000
2000c5c4:	00007c00 	andeq	r7, r0, r0, lsl #24
	...
2000c5d0:	fc01ff1c 	stc2	15, cr15, [r1], {28}
	...
2000c5dc:	ff0c0000 			; <UNDEFINED> instruction: 0xff0c0000
2000c5e0:	0000fc01 	andeq	pc, r0, r1, lsl #24
	...
2000c5ec:	fc01fc08 	stc2	12, cr15, [r1], {8}
2000c5f0:	00000001 	andeq	r0, r0, r1
2000c5f4:	00000000 	andeq	r0, r0, r0
2000c5f8:	f0080000 			; <UNDEFINED> instruction: 0xf0080000
2000c5fc:	0000f801 	andeq	pc, r0, r1, lsl #16
	...
2000c608:	d801f008 	stmdale	r1, {r3, ip, sp, lr, pc}
	...
2000c614:	e0000000 	and	r0, r0, r0
2000c618:	00009000 	andeq	r9, r0, r0
	...
2000c624:	90006000 	andls	r6, r0, r0
	...
2000c630:	40000000 	andmi	r0, r0, r0
2000c634:	00001000 	andeq	r1, r0, r0
	...
2000c640:	00004000 	andeq	r4, r0, r0
	...

2000c668 <boom6_gray_bits>:
	...
2000c704:	80000000 	andhi	r0, r0, r0
	...
2000c714:	00008000 	andeq	r8, r0, r0
	...
2000c720:	80000000 	andhi	r0, r0, r0
2000c724:	00000001 	andeq	r0, r0, r1
	...
2000c730:	00010007 	andeq	r0, r1, r7
	...
2000c73c:	0008c000 	andeq	ip, r8, r0
2000c740:	1c000000 	stcne	0, cr0, [r0], {-0}
2000c744:	00000000 	andeq	r0, r0, r0
2000c748:	e0000000 	and	r0, r0, r0
2000c74c:	00000018 	andeq	r0, r0, r8, lsl r0
2000c750:	00002600 	andeq	r2, r0, r0, lsl #12
2000c754:	00000000 	andeq	r0, r0, r0
2000c758:	00136000 	andseq	r6, r3, r0
2000c75c:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
2000c760:	00000000 	andeq	r0, r0, r0
2000c764:	e0000000 	and	r0, r0, r0
2000c768:	0000000f 	andeq	r0, r0, pc
2000c76c:	00002600 	andeq	r2, r0, r0, lsl #12
2000c770:	00000000 	andeq	r0, r0, r0
2000c774:	0003e000 	andeq	lr, r3, r0
2000c778:	26000000 	strcs	r0, [r0], -r0
2000c77c:	00000000 	andeq	r0, r0, r0
2000c780:	e0000000 	and	r0, r0, r0
2000c784:	00000000 	andeq	r0, r0, r0
2000c788:	00003300 	andeq	r3, r0, r0, lsl #6
	...
2000c794:	09800000 	stmibeq	r0, {}	; <UNPREDICTABLE>
	...
2000c7a4:	00000780 	andeq	r0, r0, r0, lsl #15
	...
2000c7b0:	07800000 	streq	r0, [r0, r0]
	...
2000c7cc:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
2000c7d8:	008c0000 	addeq	r0, ip, r0
2000c7dc:	00100000 	andseq	r0, r0, r0
	...
2000c7e8:	00000106 	andeq	r0, r0, r6, lsl #2
2000c7ec:	00000008 	andeq	r0, r0, r8
2000c7f0:	00000000 	andeq	r0, r0, r0
2000c7f4:	01630000 	cmneq	r3, r0
2000c7f8:	00080000 	andeq	r0, r8, r0
2000c7fc:	00000000 	andeq	r0, r0, r0
2000c800:	c0000000 	andgt	r0, r0, r0
2000c804:	0000007f 	andeq	r0, r0, pc, ror r0
2000c808:	00000018 	andeq	r0, r0, r8, lsl r0
2000c80c:	00000000 	andeq	r0, r0, r0
2000c810:	000fc000 	andeq	ip, pc, r0
	...
2000c838:	c0000000 	andgt	r0, r0, r0
	...
2000c848:	00002000 	andeq	r2, r0, r0
	...
2000c854:	70000000 	andvc	r0, r0, r0
	...
2000c864:	0001c000 	andeq	ip, r1, r0
	...
2000c874:	00000003 	andeq	r0, r0, r3
	...
2000c880:	00060000 	andeq	r0, r6, r0
	...

2000c96c <boom6_light_bits>:
	...
2000ca0c:	00000001 	andeq	r0, r0, r1
	...
2000ca18:	00010000 	andeq	r0, r1, r0
	...
2000ca40:	00070000 	andeq	r0, r7, r0
	...
2000ca50:	00000007 	andeq	r0, r0, r7
2000ca54:	00001800 	andeq	r1, r0, r0, lsl #16
2000ca58:	00000000 	andeq	r0, r0, r0
2000ca5c:	000c8000 	andeq	r8, ip, r0
2000ca60:	10000000 	andne	r0, r0, r0
	...
2000ca70:	00001800 	andeq	r1, r0, r0, lsl #16
	...
2000ca7c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
	...
2000ca8c:	00000c00 	andeq	r0, r0, r0, lsl #24
	...
2000ca98:	06000000 	streq	r0, [r0], -r0
	...
2000cadc:	00700000 	rsbseq	r0, r0, r0
	...
2000caec:	000000f8 	strdeq	r0, [r0], -r8
2000caf0:	00000010 	andeq	r0, r0, r0, lsl r0
2000caf4:	00000000 	andeq	r0, r0, r0
2000caf8:	009c0000 	addseq	r0, ip, r0
2000cafc:	00100000 	andseq	r0, r0, r0
	...
2000cb4c:	0000c000 	andeq	ip, r0, r0
	...
2000cb58:	80000000 	andhi	r0, r0, r0
2000cb5c:	00000001 	andeq	r0, r0, r1
	...

2000cc70 <firstTime.4114>:
2000cc70:	00000001 	andeq	r0, r0, r1

2000cc74 <indoors_black_bits>:
2000cc74:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000cc84:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000cc94:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000cca4:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000ccb4:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000ccc4:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000ccd4:	00000280 	andeq	r0, r0, r0, lsl #5
	...
2000cce4:	00000440 	andeq	r0, r0, r0, asr #8
	...
2000ccf4:	00002aa8 	andeq	r2, r0, r8, lsr #21
	...
2000cd04:	00001290 	muleq	r0, r0, r2
	...
2000cd14:	00002c68 	andeq	r2, r0, r8, ror #24
	...
2000cd24:	00002008 	andeq	r2, r0, r8
	...
2000cd34:	000027c8 	andeq	r2, r0, r8, asr #15
	...
2000cd44:	00001ff0 	strdeq	r1, [r0], -r0
	...
2000cd54:	00000d60 	andeq	r0, r0, r0, ror #26
	...
2000cdc4:	f7fbfe00 			; <UNDEFINED> instruction: 0xf7fbfe00
2000cdc8:	7fbfdfef 	svcvc	0x00bfdfef
2000cdcc:	fbfdfeff 	blx	1ff8c9d2 <startup-0x7362e>
2000cdd0:	00ff703f 	rscseq	r7, pc, pc, lsr r0	; <UNPREDICTABLE>
2000cdd4:	0c060200 	sfmeq	f0, 4, [r6], {-0}
2000cdd8:	c0603018 	rsbgt	r3, r0, r8, lsl r0
2000cddc:	06030180 	streq	r0, [r3], -r0, lsl #3
2000cde0:	0080d02c 	addeq	sp, r0, ip, lsr #32
2000cde4:	0c060200 	sfmeq	f0, 4, [r6], {-0}
2000cde8:	c0603018 	rsbgt	r3, r0, r8, lsl r0
2000cdec:	06030180 	streq	r0, [r3], -r0, lsl #3
2000cdf0:	0080d02c 	addeq	sp, r0, ip, lsr #32
2000cdf4:	fffffe00 			; <UNDEFINED> instruction: 0xfffffe00
2000cdf8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000cdfc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000ce00:	00ffdfef 	rscseq	sp, pc, pc, ror #31
	...
2000ce10:	000050e8 	andeq	r5, r0, r8, ror #1
	...
2000ce20:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
2000ce30:	00005028 	andeq	r5, r0, r8, lsr #32
	...
2000ce40:	00005028 	andeq	r5, r0, r8, lsr #32
	...
2000ce50:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
2000ce60:	03f050e8 	mvnseq	r5, #232	; 0xe8
	...
2000ce70:	0c0c5fe8 	stceq	15, cr5, [ip], {232}	; 0xe8
	...
2000ce80:	10025028 	andne	r5, r2, r8, lsr #32
	...
2000ce90:	13fa5028 	mvnsne	r5, #40	; 0x28
	...
2000cea0:	100a5fe8 	andne	r5, sl, r8, ror #31
	...
2000ceb0:	100a50e8 	andne	r5, sl, r8, ror #1
	...
2000cec0:	100a5fe8 	andne	r5, sl, r8, ror #31
	...
2000ced0:	100a5028 	andne	r5, sl, r8, lsr #32
	...
2000cee0:	100a5028 	andne	r5, sl, r8, lsr #32
	...
2000cef0:	100a5fe8 	andne	r5, sl, r8, ror #31
	...
2000cf00:	100a50e8 	andne	r5, sl, r8, ror #1
	...
2000cf10:	100a5ee8 	andne	r5, sl, r8, ror #29
	...
2000cf20:	100a5028 	andne	r5, sl, r8, lsr #32
	...
2000cf30:	100a5028 	andne	r5, sl, r8, lsr #32
	...
2000cf40:	10025fe8 	andne	r5, r2, r8, ror #31
	...
2000cf50:	0ffc50e8 	svceq	0x00fc50e8
	...
2000cf60:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
2000cf70:	00005028 	andeq	r5, r0, r8, lsr #32
	...
2000cf80:	00005028 	andeq	r5, r0, r8, lsr #32
	...
2000cf90:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
2000cfa0:	000050e8 	andeq	r5, r0, r8, ror #1
	...
2000cfb0:	00005fe8 	andeq	r5, r0, r8, ror #31
	...
2000cfc0:	00007028 	andeq	r7, r0, r8, lsr #32
	...
2000cfd0:	00007028 	andeq	r7, r0, r8, lsr #32
	...
2000cfe0:	00007038 	andeq	r7, r0, r8, lsr r0
2000cfe4:	f7fbfdfe 			; <UNDEFINED> instruction: 0xf7fbfdfe
2000cfe8:	7fbfdfef 	svcvc	0x00bfdfef
2000cfec:	fbfdfeff 	blx	1ff8cbf2 <startup-0x7340e>
2000cff0:	bfbfeff7 	svclt	0x00bfeff7
2000cff4:	0c060301 	stceq	3, cr0, [r6], {1}
2000cff8:	c0603018 	rsbgt	r3, r0, r8, lsl r0
2000cffc:	06030180 	streq	r0, [r3], -r0, lsl #3
2000d000:	6030180c 	eorsvs	r1, r0, ip, lsl #16
2000d004:	0c060301 	stceq	3, cr0, [r6], {1}
2000d008:	c0603018 	rsbgt	r3, r0, r8, lsl r0
2000d00c:	06030180 	streq	r0, [r3], -r0, lsl #3
2000d010:	6030180c 	eorsvs	r1, r0, ip, lsl #16
2000d014:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d018:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d01c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d020:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d024:	c0603018 	rsbgt	r3, r0, r8, lsl r0
2000d028:	06030180 	streq	r0, [r3], -r0, lsl #3
2000d02c:	6030180c 	eorsvs	r1, r0, ip, lsl #16
2000d030:	030180c0 	movweq	r8, #4288	; 0x10c0
2000d034:	c0603018 	rsbgt	r3, r0, r8, lsl r0
2000d038:	06030180 	streq	r0, [r3], -r0, lsl #3
2000d03c:	6030180c 	eorsvs	r1, r0, ip, lsl #16
2000d040:	030180c0 	movweq	r8, #4288	; 0x10c0
2000d044:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d048:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d04c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d050:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d054:	030180c0 	movweq	r8, #4288	; 0x10c0
2000d058:	30180c06 	andscc	r0, r8, r6, lsl #24
2000d05c:	0180c060 	orreq	ip, r0, r0, rrx
2000d060:	180c0603 	stmdane	ip, {r0, r1, r9, sl}
2000d064:	030180c0 	movweq	r8, #4288	; 0x10c0
2000d068:	30180c06 	andscc	r0, r8, r6, lsl #24
2000d06c:	0180c060 	orreq	ip, r0, r0, rrx
2000d070:	180c0603 	stmdane	ip, {r0, r1, r9, sl}

2000d074 <indoors_gray_bits>:
	...
2000d0d4:	00001110 	andeq	r1, r0, r0, lsl r1
	...
2000d0e4:	00001090 	muleq	r0, r0, r0
	...
2000d114:	00000390 	muleq	r0, r0, r3
	...
2000d124:	00001340 	andeq	r1, r0, r0, asr #6
	...
2000d134:	00000830 	andeq	r0, r0, r0, lsr r8
	...
2000d1c4:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
2000d1c8:	80402010 	subhi	r2, r0, r0, lsl r0
2000d1cc:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
2000d1d0:	00008000 	andeq	r8, r0, r0
2000d1d4:	b0582c00 	subslt	r2, r8, r0, lsl #24
2000d1d8:	0582c160 	streq	ip, [r2, #352]	; 0x160
2000d1dc:	582c160b 	stmdapl	ip!, {r0, r1, r3, r9, sl, ip}
2000d1e0:	010b0000 	mrseq	r0, (UNDEF: 11)
2000d1e4:	71b8dc00 			; <UNDEFINED> instruction: 0x71b8dc00
2000d1e8:	1b8dc6e3 	blne	1e37ed7c <startup-0x1c81284>
2000d1ec:	b8dc6e37 	ldmlt	ip, {r0, r1, r2, r4, r5, r9, sl, fp, sp, lr}^
2000d1f0:	01370001 	teqeq	r7, r1
	...
2000d200:	01000000 	mrseq	r0, (UNDEF: 0)
2000d204:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
2000d208:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d20c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d210:	01ff8007 	mvnseq	r8, r7
	...
2000d220:	00008000 	andeq	r8, r0, r0
	...
2000d230:	00008180 	andeq	r8, r0, r0, lsl #3
	...
2000d240:	00008180 	andeq	r8, r0, r0, lsl #3
	...
2000d250:	00008000 	andeq	r8, r0, r0
	...
2000d260:	00008000 	andeq	r8, r0, r0
	...
2000d270:	00008000 	andeq	r8, r0, r0
	...
2000d280:	00008180 	andeq	r8, r0, r0, lsl #3
	...
2000d290:	20008180 	andcs	r8, r0, r0, lsl #3
	...
2000d2a0:	20808000 	addcs	r8, r0, r0
	...
2000d2b0:	20c08100 	sbccs	r8, r0, r0, lsl #2
	...
2000d2c0:	21e08000 	mvncs	r8, r0
	...
2000d2d0:	2bf08180 	blcs	1fc2d8d8 <startup-0x3d2728>
	...
2000d2e0:	25c08180 	strbcs	r8, [r0, #384]	; 0x180
	...
2000d2f0:	29e08000 	stmibcs	r0!, {pc}^
	...
2000d300:	2bc08100 	blcs	1f02d708 <startup-0xfd28f8>
	...
2000d310:	20c08110 	sbccs	r8, r0, r0, lsl r1
	...
2000d320:	28e0a190 	stmiacs	r0!, {r4, r7, r8, sp, pc}^
	...
2000d330:	2bf08180 	blcs	1fc2d938 <startup-0x3d26c8>
	...
2000d340:	28008000 	stmdacs	r0, {pc}
	...
2000d350:	3000a010 	andcc	sl, r0, r0, lsl r0
	...
2000d360:	1fc0a000 	svcne	0x00c0a000
	...
2000d370:	0000a180 	andeq	sl, r0, r0, lsl #3
	...
2000d380:	00008190 	muleq	r0, r0, r1
	...
2000d390:	00008010 	andeq	r8, r0, r0, lsl r0
	...
2000d3a0:	00008110 	andeq	r8, r0, r0, lsl r1
	...
2000d3b0:	0000a010 	andeq	sl, r0, r0, lsl r0
	...
2000d3c0:	00008190 	muleq	r0, r0, r1
	...
2000d3d0:	00008190 	muleq	r0, r0, r1
	...
2000d3e0:	00008180 	andeq	r8, r0, r0, lsl #3
2000d3e4:	08040201 	stmdaeq	r4, {r0, r9}
2000d3e8:	80402010 	subhi	r2, r0, r0, lsl r0
2000d3ec:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
2000d3f0:	40401008 	submi	r1, r0, r8
2000d3f4:	b0582c16 	subslt	r2, r8, r6, lsl ip
2000d3f8:	0582c160 	streq	ip, [r2, #352]	; 0x160
2000d3fc:	582c160b 	stmdapl	ip!, {r0, r1, r3, r9, sl, ip}
2000d400:	82c160b0 	sbchi	r6, r1, #176	; 0xb0
2000d404:	71b8dc6e 			; <UNDEFINED> instruction: 0x71b8dc6e
2000d408:	1b8dc6e3 	blne	1e37ef9c <startup-0x1c81064>
2000d40c:	b8dc6e37 	ldmlt	ip, {r0, r1, r2, r4, r5, r9, sl, fp, sp, lr}^
2000d410:	8dc6e371 	stclhi	3, cr14, [r6, #452]	; 0x1c4
	...
2000d424:	0582c160 	streq	ip, [r2, #352]	; 0x160
2000d428:	582c160b 	stmdapl	ip!, {r0, r1, r3, r9, sl, ip}
2000d42c:	82c160b0 	sbchi	r6, r1, #176	; 0xb0
2000d430:	2c160b05 			; <UNDEFINED> instruction: 0x2c160b05
2000d434:	1b8dc6e3 	blne	1e37efc8 <startup-0x1c81038>
2000d438:	b8dc6e37 	ldmlt	ip, {r0, r1, r2, r4, r5, r9, sl, fp, sp, lr}^
2000d43c:	8dc6e371 	stclhi	3, cr14, [r6, #452]	; 0x1c4
2000d440:	dc6e371b 	stclle	7, cr3, [lr], #-108	; 0xffffff94
	...
2000d454:	2c160b05 			; <UNDEFINED> instruction: 0x2c160b05
2000d458:	c160b058 	qdsubgt	fp, r8, r0
2000d45c:	160b0582 	strne	r0, [fp], -r2, lsl #11
2000d460:	60b0582c 	adcsvs	r5, r0, ip, lsr #16
2000d464:	dc6e371b 	stclle	7, cr3, [lr], #-108	; 0xffffff94
2000d468:	c6e371b8 			; <UNDEFINED> instruction: 0xc6e371b8
2000d46c:	6e371b8d 	vaddvs.f64	d1, d23, d13
2000d470:	e371b8dc 	cmn	r1, #220, 16	; 0xdc0000

2000d474 <indoors_light_bits>:
	...
2000d4b4:	00001010 	andeq	r1, r0, r0, lsl r0
	...
2000d4e4:	00000300 	andeq	r0, r0, r0, lsl #6
	...
2000d4f4:	00001110 	andeq	r1, r0, r0, lsl r1
	...
2000d504:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000d514:	00001000 	andeq	r1, r0, r0
	...
2000d524:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
	...
2000d534:	00001000 	andeq	r1, r0, r0
	...
2000d5d4:	43a1d000 			; <UNDEFINED> instruction: 0x43a1d000
2000d5d8:	3a1d0e87 	bcc	20750ffc <firstTime.4040+0x742b14>
2000d5dc:	a1d0e874 	bicsge	lr, r0, r4, ror r8
2000d5e0:	00742013 	rsbseq	r2, r4, r3, lsl r0
2000d5e4:	82412000 	subhi	r2, r1, #0
2000d5e8:	24120904 	ldrcs	r0, [r2], #-2308	; 0xfffff6fc
2000d5ec:	41209048 			; <UNDEFINED> instruction: 0x41209048
2000d5f0:	00482012 	subeq	r2, r8, r2, lsl r0
	...
2000d600:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000d610:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
2000d620:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000d630:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000d640:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000d650:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000d660:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
2000d670:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000d680:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000d690:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000d6a0:	03702010 	cmneq	r0, #16
	...
2000d6b0:	03302e10 	teqeq	r0, #16, 28	; 0x100
	...
2000d6c0:	02102010 	andseq	r2, r0, #16
	...
2000d6d0:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000d6e0:	02302010 	eorseq	r2, r0, #16
	...
2000d6f0:	02102010 	andseq	r2, r0, #16
	...
2000d700:	00302e10 	eorseq	r2, r0, r0, lsl lr
	...
2000d710:	03302000 	teqeq	r0, #0
	...
2000d720:	03100000 	tsteq	r0, #0
	...
2000d730:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000d740:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000d750:	00000f00 	andeq	r0, r0, r0, lsl #30
	...
2000d760:	00000010 	andeq	r0, r0, r0, lsl r0
	...
2000d770:	00000010 	andeq	r0, r0, r0, lsl r0
	...
2000d780:	00002000 	andeq	r2, r0, r0
	...
2000d790:	00002000 	andeq	r2, r0, r0
	...
2000d7a0:	00002e00 	andeq	r2, r0, r0, lsl #28
	...
2000d7f4:	43a1d0e8 			; <UNDEFINED> instruction: 0x43a1d0e8
2000d7f8:	3a1d0e87 	bcc	2075121c <firstTime.4040+0x742d34>
2000d7fc:	a1d0e874 	bicsge	lr, r0, r4, ror r8
2000d800:	1d0e8743 	stcne	7, cr8, [lr, #-268]	; 0xfffffef4
2000d804:	82412090 	subhi	r2, r1, #144	; 0x90
2000d808:	24120904 	ldrcs	r0, [r2], #-2308	; 0xfffff6fc
2000d80c:	41209048 			; <UNDEFINED> instruction: 0x41209048
2000d810:	12090482 	andne	r0, r9, #-2113929216	; 0x82000000
	...
2000d824:	3a1d0e87 	bcc	20751248 <firstTime.4040+0x742d60>
2000d828:	a1d0e874 	bicsge	lr, r0, r4, ror r8
2000d82c:	1d0e8743 	stcne	7, cr8, [lr, #-268]	; 0xfffffef4
2000d830:	d0e8743a 	rscle	r7, r8, sl, lsr r4
2000d834:	24120904 	ldrcs	r0, [r2], #-2308	; 0xfffff6fc
2000d838:	41209048 			; <UNDEFINED> instruction: 0x41209048
2000d83c:	12090482 	andne	r0, r9, #-2113929216	; 0x82000000
2000d840:	20904824 	addscs	r4, r0, r4, lsr #16
	...
2000d854:	d0e8743a 	rscle	r7, r8, sl, lsr r4
2000d858:	0e8743a1 	cdpeq	3, 8, cr4, cr7, cr1, {5}
2000d85c:	e8743a1d 	ldmda	r4!, {r0, r2, r3, r4, r9, fp, ip, sp}^
2000d860:	8743a1d0 			; <UNDEFINED> instruction: 0x8743a1d0
2000d864:	20904824 	addscs	r4, r0, r4, lsr #16
2000d868:	09048241 	stmdbeq	r4, {r0, r6, r9, pc}
2000d86c:	90482412 	subls	r2, r8, r2, lsl r4
2000d870:	04824120 	streq	r4, [r2], #288	; 0x120

2000d874 <firstTime.4040>:
2000d874:	00000001 	andeq	r0, r0, r1

2000d878 <indoors2_black_bits>:
2000d878:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d87c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d880:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d884:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d888:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d88c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d890:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d894:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d898:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d89c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d8a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d8a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d8a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d8ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d8b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d8b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d8b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d8bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d8c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d8c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d8c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d8cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d8d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d8d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d8d8:	ffffeeef 			; <UNDEFINED> instruction: 0xffffeeef
2000d8dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d8e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d8e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d8e8:	ffffec6f 			; <UNDEFINED> instruction: 0xffffec6f
2000d8ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d8f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d8f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d8f8:	ffffeaaf 			; <UNDEFINED> instruction: 0xffffeaaf
2000d8fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d900:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d904:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d908:	fffff29f 			; <UNDEFINED> instruction: 0xfffff29f
2000d90c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d910:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d914:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d918:	ffffec6f 			; <UNDEFINED> instruction: 0xffffec6f
2000d91c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d920:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d924:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d928:	ffffe00f 			; <UNDEFINED> instruction: 0xffffe00f
2000d92c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d930:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d934:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d938:	ffffe7cf 			; <UNDEFINED> instruction: 0xffffe7cf
2000d93c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d940:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d944:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d948:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d94c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d950:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d954:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d958:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d95c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d960:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d964:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d968:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d96c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d970:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d974:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d978:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d97c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d980:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d984:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d988:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d98c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d990:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d994:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d998:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d99c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d9a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d9a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d9a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d9ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d9b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d9b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d9b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d9bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d9c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d9c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d9c8:	f7fbffff 			; <UNDEFINED> instruction: 0xf7fbffff
2000d9cc:	7fbfdfef 	svcvc	0x00bfdfef
2000d9d0:	fbfdfeff 	blx	1ff8d5d6 <startup-0x72a2a>
2000d9d4:	ffff7fff 			; <UNDEFINED> instruction: 0xffff7fff
2000d9d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d9dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d9e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d9e4:	feffdfef 	cdp2	15, 15, cr13, cr15, cr15, {7}
2000d9e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d9ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d9f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d9f4:	feffdfef 	cdp2	15, 15, cr13, cr15, cr15, {7}
2000d9f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000d9fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da04:	feffdfef 	cdp2	15, 15, cr13, cr15, cr15, {7}
2000da08:	00000fff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
2000da14:	fe0050e8 	cdp2	0, 0, cr5, cr0, cr8, {7}
2000da18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da24:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
2000da28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da34:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
2000da38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da44:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
2000da48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da54:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
2000da58:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da64:	ffff50ef 			; <UNDEFINED> instruction: 0xffff50ef
2000da68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da74:	ec0d5fef 	stc	15, cr5, [sp], {239}	; 0xef
2000da78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da84:	f003502f 			; <UNDEFINED> instruction: 0xf003502f
2000da88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da94:	d3fb502f 	mvnsle	r5, #47	; 0x2f
2000da98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000da9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000daa0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000daa4:	d00b5fef 	andle	r5, fp, pc, ror #31
2000daa8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000daac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dab0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dab4:	d00b50ef 	andle	r5, fp, pc, ror #1
2000dab8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dabc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dac0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dac4:	d00b5fef 	andle	r5, fp, pc, ror #31
2000dac8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dacc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dad0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dad4:	d00b502f 	andle	r5, fp, pc, lsr #32
2000dad8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dadc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dae0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dae4:	d00b502f 	andle	r5, fp, pc, lsr #32
2000dae8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000daec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000daf0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000daf4:	d00b5fef 	andle	r5, fp, pc, ror #31
2000daf8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dafc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db04:	d00b50ef 	andle	r5, fp, pc, ror #1
2000db08:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db14:	d00b5eef 	andle	r5, fp, pc, ror #29
2000db18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db24:	d00b502f 	andle	r5, fp, pc, lsr #32
2000db28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db34:	d00b502f 	andle	r5, fp, pc, lsr #32
2000db38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db44:	d0035fef 	andle	r5, r3, pc, ror #31
2000db48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db54:	cffd50ef 	svcgt	0x00fd50ef
2000db58:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db64:	e03f5fef 	eors	r5, pc, pc, ror #31
2000db68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db74:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
2000db78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db84:	ffff502f 			; <UNDEFINED> instruction: 0xffff502f
2000db88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db94:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
2000db98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000db9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dba0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dba4:	ffff50ef 			; <UNDEFINED> instruction: 0xffff50ef
2000dba8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dbac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dbb0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dbb4:	ffff5fef 			; <UNDEFINED> instruction: 0xffff5fef
2000dbb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dbbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dbc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dbc4:	ffff7e6f 			; <UNDEFINED> instruction: 0xffff7e6f
2000dbc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dbcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dbd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dbd4:	ffff7e6f 			; <UNDEFINED> instruction: 0xffff7e6f
2000dbd8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dbdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dbe0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dbe4:	ffff7e7f 			; <UNDEFINED> instruction: 0xffff7e7f
2000dbe8:	f7fbfdfe 			; <UNDEFINED> instruction: 0xf7fbfdfe
2000dbec:	7fbfdfef 	svcvc	0x00bfdfef
2000dbf0:	fbfdfeff 	blx	1ff8d7f6 <startup-0x7280a>
2000dbf4:	bfbfeff7 	svclt	0x00bfeff7
2000dbf8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dbfc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc04:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc08:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc24:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc58:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc5c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000dc74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

2000dc78 <indoors2_gray_bits>:
	...
2000dcd8:	00001110 	andeq	r1, r0, r0, lsl r1
	...
2000dce8:	00001090 	muleq	r0, r0, r0
	...
2000dd18:	00000390 	muleq	r0, r0, r3
	...
2000dd28:	00001340 	andeq	r1, r0, r0, asr #6
	...
2000dd38:	00000830 	andeq	r0, r0, r0, lsr r8
	...
2000ddc8:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
2000ddcc:	80402010 	subhi	r2, r0, r0, lsl r0
2000ddd0:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
2000ddd4:	00008000 	andeq	r8, r0, r0
	...
2000dde4:	01000000 	mrseq	r0, (UNDEF: 0)
	...
2000ddf4:	01000000 	mrseq	r0, (UNDEF: 0)
	...
2000de04:	01000000 	mrseq	r0, (UNDEF: 0)
2000de08:	fffff000 			; <UNDEFINED> instruction: 0xfffff000
2000de0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000de14:	01ff8007 	mvnseq	r8, r7
	...
2000de24:	00008000 	andeq	r8, r0, r0
	...
2000de34:	00008180 	andeq	r8, r0, r0, lsl #3
	...
2000de44:	00008180 	andeq	r8, r0, r0, lsl #3
	...
2000de54:	00008000 	andeq	r8, r0, r0
	...
2000de64:	00008000 	andeq	r8, r0, r0
	...
2000de74:	00008000 	andeq	r8, r0, r0
	...
2000de84:	00008180 	andeq	r8, r0, r0, lsl #3
	...
2000de94:	20008180 	andcs	r8, r0, r0, lsl #3
	...
2000dea4:	20808000 	addcs	r8, r0, r0
	...
2000deb4:	20c08100 	sbccs	r8, r0, r0, lsl #2
	...
2000dec4:	21e08000 	mvncs	r8, r0
	...
2000ded4:	2bf08180 	blcs	1fc2e4dc <startup-0x3d1b24>
	...
2000dee4:	25c08180 	strbcs	r8, [r0, #384]	; 0x180
	...
2000def4:	29e08000 	stmibcs	r0!, {pc}^
	...
2000df04:	2bc08100 	blcs	1f02e30c <startup-0xfd1cf4>
	...
2000df14:	20c08110 	sbccs	r8, r0, r0, lsl r1
	...
2000df24:	28e0a190 	stmiacs	r0!, {r4, r7, r8, sp, pc}^
	...
2000df34:	2bf08180 	blcs	1fc2e53c <startup-0x3d1ac4>
	...
2000df44:	28008000 	stmdacs	r0, {pc}
	...
2000df54:	3000a010 	andcc	sl, r0, r0, lsl r0
	...
2000df64:	1fc0a000 	svcne	0x00c0a000
	...
2000df74:	0000a180 	andeq	sl, r0, r0, lsl #3
	...
2000df84:	00008190 	muleq	r0, r0, r1
	...
2000df94:	00008010 	andeq	r8, r0, r0, lsl r0
	...
2000dfa4:	00008110 	andeq	r8, r0, r0, lsl r1
	...
2000dfb4:	0000a010 	andeq	sl, r0, r0, lsl r0
	...
2000dfc4:	00008190 	muleq	r0, r0, r1
	...
2000dfd4:	00008190 	muleq	r0, r0, r1
	...
2000dfe4:	00008180 	andeq	r8, r0, r0, lsl #3
2000dfe8:	08040201 	stmdaeq	r4, {r0, r9}
2000dfec:	80402010 	subhi	r2, r0, r0, lsl r0
2000dff0:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
2000dff4:	40401008 	submi	r1, r0, r8
	...

2000e078 <indoors2_light_bits>:
	...
2000e0e8:	00000300 	andeq	r0, r0, r0, lsl #6
	...
2000e0f8:	00001110 	andeq	r1, r0, r0, lsl r1
	...
2000e108:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000e118:	00001000 	andeq	r1, r0, r0
	...
2000e128:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
	...
2000e138:	00001000 	andeq	r1, r0, r0
	...
2000e1e4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e1f4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e204:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e214:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
2000e224:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e234:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e244:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e254:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e264:	00002f10 	andeq	r2, r0, r0, lsl pc
	...
2000e274:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e284:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e294:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e2a4:	03702010 	cmneq	r0, #16
	...
2000e2b4:	03302e10 	teqeq	r0, #16, 28	; 0x100
	...
2000e2c4:	02102010 	andseq	r2, r0, #16
	...
2000e2d4:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e2e4:	02302010 	eorseq	r2, r0, #16
	...
2000e2f4:	02102010 	andseq	r2, r0, #16
	...
2000e304:	00302e10 	eorseq	r2, r0, r0, lsl lr
	...
2000e314:	03302000 	teqeq	r0, #0
	...
2000e324:	03100000 	tsteq	r0, #0
	...
2000e334:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e344:	00002010 	andeq	r2, r0, r0, lsl r0
	...
2000e354:	00000f00 	andeq	r0, r0, r0, lsl #30
	...
2000e364:	00000010 	andeq	r0, r0, r0, lsl r0
	...
2000e374:	00000010 	andeq	r0, r0, r0, lsl r0
	...
2000e384:	00002000 	andeq	r2, r0, r0
	...
2000e394:	00002000 	andeq	r2, r0, r0
	...
2000e3a4:	00002e00 	andeq	r2, r0, r0, lsl #28
	...

2000e478 <firstTime.4040>:
2000e478:	00000001 	andeq	r0, r0, r1

2000e47c <trophy_black_bits>:
2000e47c:	00d40028 	sbcseq	r0, r4, r8, lsr #32
2000e480:	03fe01aa 	mvnseq	r0, #-2147483606	; 0x8000002a
2000e484:	02220401 	eoreq	r0, r2, #16777216	; 0x1000000
2000e488:	02220232 	eoreq	r0, r2, #536870915	; 0x20000003
2000e48c:	00880124 	addeq	r0, r8, r4, lsr #2
2000e490:	00500088 	subseq	r0, r0, r8, lsl #1
2000e494:	00880088 	addeq	r0, r8, r8, lsl #1
2000e498:	020201fc 	andeq	r0, r2, #252, 2	; 0x3f
2000e49c:	00000202 	andeq	r0, r0, r2, lsl #4

2000e4a0 <trophy_gray_bits>:
	...
2000e4a8:	01000300 	mrseq	r0, LR_irq
2000e4ac:	01000100 	mrseq	r0, (UNDEF: 16)
2000e4b0:	00000080 	andeq	r0, r0, r0, lsl #1
2000e4b4:	00000000 	andeq	r0, r0, r0
2000e4b8:	00400040 	subeq	r0, r0, r0, asr #32
2000e4bc:	01f00000 	mvnseq	r0, r0
2000e4c0:	000001e8 	andeq	r0, r0, r8, ror #3

2000e4c4 <trophy_light_bits>:
2000e4c4:	00000000 	andeq	r0, r0, r0
2000e4c8:	00000050 	andeq	r0, r0, r0, asr r0
2000e4cc:	008800ec 	addeq	r0, r8, ip, ror #1
2000e4d0:	008800c0 	addeq	r0, r8, r0, asr #1
2000e4d4:	00600048 	rsbeq	r0, r0, r8, asr #32
2000e4d8:	00200060 	eoreq	r0, r0, r0, rrx
2000e4dc:	00200020 	eoreq	r0, r0, r0, lsr #32
2000e4e0:	000c0000 	andeq	r0, ip, r0
2000e4e4:	00000014 	andeq	r0, r0, r4, lsl r0

2000e4e8 <firstTime.4040>:
2000e4e8:	00000001 	andeq	r0, r0, r1
2000e4ec:	00202020 	eoreq	r2, r0, r0, lsr #32
2000e4f0:	41524b2a 	cmpmi	r2, sl, lsr #22
2000e4f4:	2a202a21 	bcs	20818d80 <firstTime.4040+0x80a898>
2000e4f8:	2141524b 	cmpcs	r1, fp, asr #4
2000e4fc:	0000002a 	andeq	r0, r0, sl, lsr #32
2000e500:	734c4944 	movtvc	r4, #51524	; 0xc944
2000e504:	7469772d 	strbtvc	r7, [r9], #-1837	; 0xfffff8d3
2000e508:	73656863 	cmnvc	r5, #6488064	; 0x630000
2000e50c:	76616820 	strbtvc	r6, [r1], -r0, lsr #16
2000e510:	00000065 	andeq	r0, r0, r5, rrx
2000e514:	20726f46 	rsbscs	r6, r2, r6, asr #30
2000e518:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
2000e51c:	65697275 	strbvs	r7, [r9, #-629]!	; 0xfffffd8b
2000e520:	68742073 	ldmdavs	r4!, {r0, r1, r4, r5, r6, sp}^
2000e524:	00000065 	andeq	r0, r0, r5, rrx
2000e528:	20202020 	eorcs	r2, r0, r0, lsr #32
2000e52c:	00000000 	andeq	r0, r0, r0
2000e530:	6c696f63 	stclvs	15, cr6, [r9], #-396	; 0xfffffe74
2000e534:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
2000e538:	6566206e 	strbvs	r2, [r6, #-110]!	; 0xffffff92
2000e53c:	002c7261 	eoreq	r7, ip, r1, ror #4
2000e540:	74616874 	strbtvc	r6, [r1], #-2164	; 0xfffff78c
2000e544:	44206120 	strtmi	r6, [r0], #-288	; 0xfffffee0
2000e548:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
2000e54c:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
2000e550:	00000068 	andeq	r0, r0, r8, rrx
2000e554:	6e656877 	mcrvs	8, 3, r6, cr5, cr7, {3}
2000e558:	72657665 	rsbvc	r7, r5, #105906176	; 0x6500000
2000e55c:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
2000e560:	65682079 	strbvs	r2, [r8, #-121]!	; 0xffffff87
2000e564:	00007261 	andeq	r7, r0, r1, ror #4
2000e568:	6e207369 	cdpvs	3, 2, cr7, cr0, cr9, {3}
2000e56c:	2e726165 	rpwcssz	f6, f2, f5
2000e570:	00000000 	andeq	r0, r0, r0
2000e574:	70727573 	rsbsvc	r7, r2, r3, ror r5
2000e578:	69736972 	ldmdbvs	r3!, {r1, r4, r5, r6, r8, fp, sp, lr}^
2000e57c:	202c676e 	eorcs	r6, ip, lr, ror #14
2000e580:	646e6966 	strbtvs	r6, [lr], #-2406	; 0xfffff69a
2000e584:	00676e69 	rsbeq	r6, r7, r9, ror #28
2000e588:	69206f53 	stmdbvs	r0!, {r0, r1, r4, r6, r8, r9, sl, fp, sp, lr}
2000e58c:	73692074 	cmnvc	r9, #116	; 0x74
2000e590:	69757120 	ldmdbvs	r5!, {r5, r8, ip, sp, lr}^
2000e594:	00006574 	andeq	r6, r0, r4, ror r5
2000e598:	20756f79 	rsbscs	r6, r5, r9, ror pc
2000e59c:	65726568 	ldrbvs	r6, [r2, #-1384]!	; 0xfffffa98
2000e5a0:	0000002c 	andeq	r0, r0, ip, lsr #32
2000e5a4:	72696568 	rsbvc	r6, r9, #104, 10	; 0x1a000000
2000e5a8:	206f7420 	rsbcs	r7, pc, r0, lsr #8
2000e5ac:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
2000e5b0:	61654c20 	cmnvs	r5, r0, lsr #24
2000e5b4:	00002e72 	andeq	r2, r0, r2, ror lr
2000e5b8:	65657571 	strbvs	r7, [r5, #-1393]!	; 0xfffffa8f
2000e5bc:	6144206e 	cmpvs	r4, lr, rrx
2000e5c0:	206f6666 	rsbcs	r6, pc, r6, ror #12
2000e5c4:	4420666f 	strtmi	r6, [r0], #-1647	; 0xfffff991
2000e5c8:	2c734c49 	ldclcs	12, cr4, [r3], #-292	; 0xfffffedc
2000e5cc:	00000000 	andeq	r0, r0, r0
2000e5d0:	706d6574 	rsbvc	r6, sp, r4, ror r5
2000e5d4:	2c646574 	cfstr64cs	mvdx6, [r4], #-464	; 0xfffffe30
2000e5d8:	206f7420 	rsbcs	r7, pc, r0, lsr #8
2000e5dc:	746f6f6c 	strbtvc	r6, [pc], #-3948	; 2000e5e4 <firstTime.4040+0xfc>
2000e5e0:	00000000 	andeq	r0, r0, r0
2000e5e4:	20747542 	rsbscs	r7, r4, r2, asr #10
2000e5e8:	6279616d 	rsbsvs	r6, r9, #1073741851	; 0x4000001b
2000e5ec:	6f792065 	svcvs	0x00792065
2000e5f0:	65722775 	ldrbvs	r2, [r2, #-1909]!	; 0xfffff88b
2000e5f4:	00000000 	andeq	r0, r0, r0
2000e5f8:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 2000e468 <indoors2_light_bits+0x3f0>
2000e5fc:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
2000e600:	63697220 	cmnvs	r9, #32, 4
2000e604:	2c736568 	cfldr64cs	mvdx6, [r3], #-416	; 0xfffffe60
2000e608:	00000000 	andeq	r0, r0, r0
2000e60c:	6b636977 	blvs	218e8bf0 <firstTime.4040+0x18da708>
2000e610:	44206465 	strtmi	r6, [r0], #-1125	; 0xfffffb9b
2000e614:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
2000e618:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
2000e61c:	2e736568 	cdpcs	5, 7, cr6, cr3, cr8, {3}
2000e620:	00000000 	andeq	r0, r0, r0
2000e624:	65727573 	ldrbvs	r7, [r2, #-1395]!	; 0xfffffa8d
2000e628:	79622064 	stmdbvc	r2!, {r2, r5, r6, sp}^
2000e62c:	00000000 	andeq	r0, r0, r0
2000e630:	67206f73 			; <UNDEFINED> instruction: 0x67206f73
2000e634:	70706972 	rsbsvc	r6, r0, r2, ror r9
2000e638:	20796c69 	rsbscs	r6, r9, r9, ror #24
2000e63c:	61657274 	smcvs	22308	; 0x5724
2000e640:	0000002d 	andeq	r0, r0, sp, lsr #32
2000e644:	6572202d 	ldrbvs	r2, [r2, #-45]!	; 0xffffffd3
2000e648:	20746573 	rsbscs	r6, r4, r3, ror r5
2000e64c:	20656874 	rsbcs	r6, r5, r4, ror r8
2000e650:	74697773 	strbtvc	r7, [r9], #-1907	; 0xfffff88d
2000e654:	00216863 	eoreq	r6, r1, r3, ror #16
2000e658:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xfffff1bb
2000e65c:	62202c72 	eorvs	r2, r0, #29184	; 0x7200
2000e660:	65766172 	ldrbvs	r6, [r6, #-370]!	; 0xfffffe8e
2000e664:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
2000e668:	002c6863 	eoreq	r6, ip, r3, ror #16
2000e66c:	00000000 	andeq	r0, r0, r0
2000e670:	696c632a 	stmdbvs	ip!, {r1, r3, r5, r8, r9, sp, lr}^
2000e674:	002a6b63 	eoreq	r6, sl, r3, ror #22
2000e678:	7069742a 	rsbvc	r7, r9, sl, lsr #8
2000e67c:	00002a70 	andeq	r2, r0, r0, ror sl
2000e680:	7061742a 	rsbvc	r7, r1, sl, lsr #8
2000e684:	00002a70 	andeq	r2, r0, r0, ror sl
2000e688:	42414b2a 	submi	r4, r1, #43008	; 0xa800
2000e68c:	4f4f4f4f 	svcmi	0x004f4f4f
2000e690:	00002a4d 	andeq	r2, r0, sp, asr #20
2000e694:	20202020 	eorcs	r2, r0, r0, lsr #32
2000e698:	4e202020 	cdpmi	0, 2, cr2, cr0, cr0, {1}
2000e69c:	41484179 	hvcmi	33817	; 0x8419
2000e6a0:	41484148 	cmpmi	r8, r8, asr #2
2000e6a4:	00000048 	andeq	r0, r0, r8, asr #32
2000e6a8:	73504944 	cmpvc	r0, #68, 18	; 0x110000
2000e6ac:	5449572d 	strbpl	r5, [r9], #-1837	; 0xfffff8d3
2000e6b0:	003a4843 	eorseq	r4, sl, r3, asr #16
2000e6b4:	4f57462a 	svcmi	0x0057462a
2000e6b8:	2a48534f 	bcs	212233fc <firstTime.4040+0x1214f14>
	...
2000e6c4:	5548542a 	strbpl	r5, [r8, #-1066]	; 0xfffffbd6
2000e6c8:	002a504d 	eoreq	r5, sl, sp, asr #32
2000e6cc:	200033e4 	andcs	r3, r0, r4, ror #7
2000e6d0:	200033ee 	andcs	r3, r0, lr, ror #7
2000e6d4:	200033f8 	strdcs	r3, [r0], -r8
2000e6d8:	20003402 	andcs	r3, r0, r2, lsl #8
2000e6dc:	2000340c 	andcs	r3, r0, ip, lsl #8
2000e6e0:	20003416 	andcs	r3, r0, r6, lsl r4
2000e6e4:	20003420 	andcs	r3, r0, r0, lsr #8
2000e6e8:	2000342a 	andcs	r3, r0, sl, lsr #8
2000e6ec:	20202020 	eorcs	r2, r0, r0, lsr #32
2000e6f0:	20202020 	eorcs	r2, r0, r0, lsr #32
2000e6f4:	20202020 	eorcs	r2, r0, r0, lsr #32
2000e6f8:	20202020 	eorcs	r2, r0, r0, lsr #32
2000e6fc:	20202020 	eorcs	r2, r0, r0, lsr #32
2000e700:	00000000 	andeq	r0, r0, r0
2000e704:	61666c41 	cmnvs	r6, r1, asr #24
2000e708:	656d756e 	strbvs	r7, [sp, #-1390]!	; 0xfffffa92
2000e70c:	6b736972 	blvs	21ce8cdc <firstTime.4040+0x1cda7f4>
2000e710:	00000000 	andeq	r0, r0, r0
2000e714:	64726168 	ldrbtvs	r6, [r2], #-360	; 0xfffffe98
2000e718:	a4c3a5c3 	strbge	sl, [r3], #1475	; 0x5c3
2000e71c:	7261b6c3 	rsbvc	fp, r1, #204472320	; 0xc300000
2000e720:	75732065 	ldrbvc	r2, [r3, #-101]!	; 0xffffff9b
2000e724:	00726567 	rsbseq	r6, r2, r7, ror #10

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000a99 	muleq	r0, r9, sl
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	0000008f 	andeq	r0, r0, pc, lsl #1
      10:	00050b0c 	andeq	r0, r5, ip, lsl #22
	...
      20:	020c0200 	andeq	r0, ip, #0, 4
      24:	00004e05 	andeq	r4, r0, r5, lsl #28
      28:	034b0300 	movteq	r0, #45824	; 0xb300
      2c:	07020000 	streq	r0, [r2, -r0]
      30:	0000004e 	andeq	r0, r0, lr, asr #32
      34:	06fe0300 	ldrbteq	r0, [lr], r0, lsl #6
      38:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      3c:	0000004e 	andeq	r0, r0, lr, asr #32
      40:	18fd0304 	ldmne	sp!, {r2, r8, r9}^
      44:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
      48:	00000055 	andeq	r0, r0, r5, asr r0
      4c:	04040008 	streq	r0, [r4], #-8
      50:	00037907 	andeq	r7, r3, r7, lsl #18
      54:	5b040500 	blpl	10145c <startup-0x1fefeba4>
      58:	04000000 	streq	r0, [r0], #-0
      5c:	04b80801 	ldrteq	r0, [r8], #2049	; 0x801
      60:	4f060000 	svcmi	0x00060000
      64:	0200001a 	andeq	r0, r0, #26
      68:	0000210a 	andeq	r2, r0, sl, lsl #2
      6c:	00240700 	eoreq	r0, r4, r0, lsl #14
      70:	030c0000 	movweq	r0, #49152	; 0xc000
      74:	00009e06 	andeq	r9, r0, r6, lsl #28
      78:	05ae0300 	streq	r0, [lr, #768]!	; 0x300
      7c:	07030000 	streq	r0, [r3, -r0]
      80:	0000009e 	muleq	r0, lr, r0
      84:	002b0300 	eoreq	r0, fp, r0, lsl #6
      88:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
      8c:	0000009e 	muleq	r0, lr, r0
      90:	00200304 	eoreq	r0, r0, r4, lsl #6
      94:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
      98:	0000009e 	muleq	r0, lr, r0
      9c:	04050008 	streq	r0, [r5], #-8
      a0:	00000062 	andeq	r0, r0, r2, rrx
      a4:	00160d06 	andseq	r0, r6, r6, lsl #26
      a8:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
      ac:	07000000 	streq	r0, [r0, -r0]
      b0:	000006c3 	andeq	r0, r0, r3, asr #13
      b4:	28060424 	stmdacs	r6, {r2, r5, sl}
      b8:	03000001 	movweq	r0, #1
      bc:	00000446 	andeq	r0, r0, r6, asr #8
      c0:	01280704 			; <UNDEFINED> instruction: 0x01280704
      c4:	03000000 	movweq	r0, #0
      c8:	000006cf 	andeq	r0, r0, pc, asr #13
      cc:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
      d0:	03040000 	movweq	r0, #16384	; 0x4000
      d4:	0000061f 	andeq	r0, r0, pc, lsl r6
      d8:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
      dc:	03080000 	movweq	r0, #32768	; 0x8000
      e0:	0000064b 	andeq	r0, r0, fp, asr #12
      e4:	01460c04 	cmpeq	r6, r4, lsl #24
      e8:	030c0000 	movweq	r0, #49152	; 0xc000
      ec:	00000332 	andeq	r0, r0, r2, lsr r3
      f0:	01460d04 	cmpeq	r6, r4, lsl #26
      f4:	03100000 	tsteq	r0, #0
      f8:	00000458 	andeq	r0, r0, r8, asr r4
      fc:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
     100:	03140000 	tsteq	r4, #0
     104:	00000060 	andeq	r0, r0, r0, rrx
     108:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
     10c:	03180000 	tsteq	r8, #0
     110:	000003c9 	andeq	r0, r0, r9, asr #7
     114:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
     118:	031c0000 	tsteq	ip, #0
     11c:	000003d9 	ldrdeq	r0, [r0], -r9
     120:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
     124:	00200000 	eoreq	r0, r0, r0
     128:	00a40405 	adceq	r0, r4, r5, lsl #8
     12c:	04080000 	streq	r0, [r8], #-0
     130:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     134:	01400900 	cmpeq	r0, r0, lsl #18
     138:	400a0000 	andmi	r0, sl, r0
     13c:	00000001 	andeq	r0, r0, r1
     140:	00af0405 	adceq	r0, pc, r5, lsl #8
     144:	04050000 	streq	r0, [r5], #-0
     148:	00000135 	andeq	r0, r0, r5, lsr r1
     14c:	0006c406 	andeq	ip, r6, r6, lsl #8
     150:	af150400 	svcge	0x00150400
     154:	0b000000 	bleq	15c <startup-0x1ffffea4>
     158:	00000162 	andeq	r0, r0, r2, ror #2
     15c:	00000162 	andeq	r0, r0, r2, ror #2
     160:	0405000c 	streq	r0, [r5], #-12
     164:	0000014c 	andeq	r0, r0, ip, asr #2
     168:	00053b0d 	andeq	r3, r5, sp, lsl #22
     16c:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
     170:	0d000001 	stceq	0, cr0, [r0, #-4]
     174:	00000414 	andeq	r0, r0, r4, lsl r4
     178:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
     17c:	87060000 	strhi	r0, [r6, -r0]
     180:	05000006 	streq	r0, [r0, #-6]
     184:	00005b24 	andeq	r5, r0, r4, lsr #22
     188:	017e0b00 	cmneq	lr, r0, lsl #22
     18c:	019a0000 	orrseq	r0, sl, r0
     190:	9a0e0000 	bls	380198 <startup-0x1fc7fe68>
     194:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     198:	04040003 	streq	r0, [r4], #-3
     19c:	0003f607 	andeq	pc, r3, r7, lsl #12
     1a0:	18330d00 	ldmdane	r3!, {r8, sl, fp}
     1a4:	2b050000 	blcs	1401ac <startup-0x1febfe54>
     1a8:	00000189 	andeq	r0, r0, r9, lsl #3
     1ac:	0002380d 	andeq	r3, r2, sp, lsl #16
     1b0:	892c0500 	stmdbhi	ip!, {r8, sl}
     1b4:	0d000001 	stceq	0, cr0, [r0, #-4]
     1b8:	000004c6 	andeq	r0, r0, r6, asr #9
     1bc:	01892d05 	orreq	r2, r9, r5, lsl #26
     1c0:	5b0d0000 	blpl	3401c8 <startup-0x1fcbfe38>
     1c4:	05000003 	streq	r0, [r0, #-3]
     1c8:	0001892e 	andeq	r8, r1, lr, lsr #18
     1cc:	02c00d00 	sbceq	r0, r0, #0, 26
     1d0:	2f050000 	svccs	0x00050000
     1d4:	00000189 	andeq	r0, r0, r9, lsl #3
     1d8:	0006a50d 	andeq	sl, r6, sp, lsl #10
     1dc:	89300500 	ldmdbhi	r0!, {r8, sl}
     1e0:	0d000001 	stceq	0, cr0, [r0, #-4]
     1e4:	00000695 	muleq	r0, r5, r6
     1e8:	01893105 	orreq	r3, r9, r5, lsl #2
     1ec:	5b0b0000 	blpl	2c01f4 <startup-0x1fd3fe0c>
     1f0:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
     1f4:	0f000001 	svceq	0x00000001
     1f8:	0000019a 	muleq	r0, sl, r1
     1fc:	83100077 	tsthi	r0, #119	; 0x77
     200:	06000002 	streq	r0, [r0], -r2
     204:	0001ee03 	andeq	lr, r1, r3, lsl #28
     208:	dc030500 	cfstr32le	mvfx0, [r3], {-0}
     20c:	1120006e 			; <UNDEFINED> instruction: 0x1120006e
     210:	000004dd 	ldrdeq	r0, [r0], -sp
     214:	01ee0307 	mvneq	r0, r7, lsl #6
     218:	03050000 	movweq	r0, #20480	; 0x5000
     21c:	20006f54 	andcs	r6, r0, r4, asr pc
     220:	0005b911 	andeq	fp, r5, r1, lsl r9
     224:	ee030800 	cdp	8, 0, cr0, cr3, cr0, {0}
     228:	05000001 	streq	r0, [r0, #-1]
     22c:	006fcc03 	rsbeq	ip, pc, r3, lsl #24
     230:	005b0b20 	subseq	r0, fp, r0, lsr #22
     234:	02420000 	subeq	r0, r2, #0
     238:	9a0e0000 	bls	380240 <startup-0x1fc7fdc0>
     23c:	17000001 	strne	r0, [r0, -r1]
     240:	5c110001 	ldcpl	0, cr0, [r1], {1}
     244:	09000001 	stmdbeq	r0, {r0}
     248:	00023103 	andeq	r3, r2, r3, lsl #2
     24c:	44030500 	strmi	r0, [r3], #-1280	; 0xfffffb00
     250:	11200070 			; <UNDEFINED> instruction: 0x11200070
     254:	00000421 	andeq	r0, r0, r1, lsr #8
     258:	0231030a 	eorseq	r0, r1, #671088640	; 0x28000000
     25c:	03050000 	movweq	r0, #20480	; 0x5000
     260:	2000715c 	andcs	r7, r0, ip, asr r1
     264:	0003ae11 	andeq	sl, r3, r1, lsl lr
     268:	31030b00 	tstcc	r3, r0, lsl #22
     26c:	05000002 	streq	r0, [r0, #-2]
     270:	00727403 	rsbseq	r7, r2, r3, lsl #8
     274:	005b0b20 	subseq	r0, fp, r0, lsr #22
     278:	02860000 	addeq	r0, r6, #0
     27c:	9a0e0000 	bls	380284 <startup-0x1fc7fd7c>
     280:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     284:	f0110003 			; <UNDEFINED> instruction: 0xf0110003
     288:	0c000004 	stceq	0, cr0, [r0], {4}
     28c:	00027503 	andeq	r7, r2, r3, lsl #10
     290:	8c030500 	cfstr32hi	mvfx0, [r3], {-0}
     294:	11200073 			; <UNDEFINED> instruction: 0x11200073
     298:	00000035 	andeq	r0, r0, r5, lsr r0
     29c:	0275030d 	rsbseq	r0, r5, #872415232	; 0x34000000
     2a0:	03050000 	movweq	r0, #20480	; 0x5000
     2a4:	2000778c 	andcs	r7, r0, ip, lsl #15
     2a8:	00000011 	andeq	r0, r0, r1, lsl r0
     2ac:	75030e00 	strvc	r0, [r3, #-3584]	; 0xfffff200
     2b0:	05000002 	streq	r0, [r0, #-2]
     2b4:	007b8c03 	rsbseq	r8, fp, r3, lsl #24
     2b8:	005b0b20 	subseq	r0, fp, r0, lsr #22
     2bc:	02c90000 	sbceq	r0, r9, #0
     2c0:	9a0f0000 	bls	3c02c8 <startup-0x1fc3fd38>
     2c4:	d1000001 	tstle	r0, r1
     2c8:	01ae1100 			; <UNDEFINED> instruction: 0x01ae1100
     2cc:	030f0000 	movweq	r0, #61440	; 0xf000
     2d0:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
     2d4:	7f8c0305 	svcvc	0x008c0305
     2d8:	ff112000 			; <UNDEFINED> instruction: 0xff112000
     2dc:	10000003 	andne	r0, r0, r3
     2e0:	0002b903 	andeq	fp, r2, r3, lsl #18
     2e4:	60030500 	andvs	r0, r3, r0, lsl #10
     2e8:	11200080 	smlawbne	r0, r0, r0, r0
     2ec:	00000210 	andeq	r0, r0, r0, lsl r2
     2f0:	02b90311 	adcseq	r0, r9, #1140850688	; 0x44000000
     2f4:	03050000 	movweq	r0, #20480	; 0x5000
     2f8:	20008134 	andcs	r8, r0, r4, lsr r1
     2fc:	00067d07 	andeq	r7, r6, r7, lsl #26
     300:	04121400 	ldreq	r1, [r2], #-1024	; 0xfffffc00
     304:	00000345 	andeq	r0, r0, r5, asr #6
     308:	001cc203 	andseq	ip, ip, r3, lsl #4
     30c:	45051200 	strmi	r1, [r5, #-512]	; 0xfffffe00
     310:	00000003 	andeq	r0, r0, r3
     314:	00027603 	andeq	r7, r2, r3, lsl #12
     318:	45061200 	strmi	r1, [r6, #-512]	; 0xfffffe00
     31c:	04000003 	streq	r0, [r0], #-3
     320:	0003e303 	andeq	lr, r3, r3, lsl #6
     324:	2e081200 	cdpcs	2, 0, cr1, cr8, cr0, {0}
     328:	08000001 	stmdaeq	r0, {r0}
     32c:	0003d303 	andeq	sp, r3, r3, lsl #6
     330:	2e091200 	cdpcs	2, 0, cr1, cr9, cr0, {0}
     334:	0c000001 	stceq	0, cr0, [r0], {1}
     338:	00027b03 	andeq	r7, r2, r3, lsl #22
     33c:	680c1200 	stmdavs	ip, {r9, ip}
     340:	10000003 	andne	r0, r0, r3
     344:	4b040500 	blmi	10174c <startup-0x1fefe8b4>
     348:	04000003 	streq	r0, [r0], #-3
     34c:	04c10801 	strbeq	r0, [r1], #2049	; 0x801
     350:	62090000 	andvs	r0, r9, #0
     354:	0a000003 	beq	368 <startup-0x1ffffc98>
     358:	00000362 	andeq	r0, r0, r2, ror #6
     35c:	00012e0a 	andeq	r2, r1, sl, lsl #28
     360:	04050000 	streq	r0, [r5], #-0
     364:	000002fc 	strdeq	r0, [r0], -ip
     368:	03520405 	cmpeq	r2, #83886080	; 0x5000000
     36c:	7e060000 	cdpvc	0, 0, cr0, cr6, cr0, {0}
     370:	12000006 	andne	r0, r0, #6
     374:	0002fc0d 	andeq	pc, r2, sp, lsl #24
     378:	05a61100 	streq	r1, [r6, #256]!	; 0x100
     37c:	03130000 	tsteq	r3, #0
     380:	00000275 	andeq	r0, r0, r5, ror r2
     384:	82080305 	andhi	r0, r8, #335544320	; 0x14000000
     388:	02042000 	andeq	r2, r4, #0
     38c:	00037307 	andeq	r7, r3, r7, lsl #6
     390:	05e91000 	strbeq	r1, [r9, #0]!
     394:	22010000 	andcs	r0, r1, #0
     398:	0000012e 	andeq	r0, r0, lr, lsr #2
     39c:	46e40305 	strbtmi	r0, [r4], r5, lsl #6
     3a0:	27102000 	ldrcs	r2, [r0, -r0]
     3a4:	01000001 	tsteq	r0, r1
     3a8:	00009e3a 	andeq	r9, r0, sl, lsr lr
     3ac:	2c030500 	cfstr32cs	mvfx0, [r3], {-0}
     3b0:	10200046 	eorne	r0, r0, r6, asr #32
     3b4:	000001a1 	andeq	r0, r0, r1, lsr #3
     3b8:	009e3b01 	addseq	r3, lr, r1, lsl #22
     3bc:	03050000 	movweq	r0, #20480	; 0x5000
     3c0:	200046d8 	ldrdcs	r4, [r0], -r8
     3c4:	00055210 	andeq	r5, r5, r0, lsl r2
     3c8:	9e3c0100 	rsflse	f0, f4, f0
     3cc:	05000000 	streq	r0, [r0, #-0]
     3d0:	0046ec03 	subeq	lr, r6, r3, lsl #24
     3d4:	67621220 	strbvs	r1, [r2, -r0, lsr #4]!
     3d8:	9e3d0100 	rsflse	f0, f5, f0
     3dc:	05000000 	streq	r0, [r0, #-0]
     3e0:	00467403 	subeq	r7, r6, r3, lsl #8
     3e4:	06d41020 	ldrbeq	r1, [r4], r0, lsr #32
     3e8:	40010000 	andmi	r0, r1, r0
     3ec:	0000009e 	muleq	r0, lr, r0
     3f0:	46540305 	ldrbmi	r0, [r4], -r5, lsl #6
     3f4:	47102000 	ldrmi	r2, [r0, -r0]
     3f8:	01000005 	tsteq	r0, r5
     3fc:	00009e41 	andeq	r9, r0, r1, asr #28
     400:	e0030500 	and	r0, r3, r0, lsl #10
     404:	10200046 	eorne	r0, r0, r6, asr #32
     408:	00000069 	andeq	r0, r0, r9, rrx
     40c:	009e4201 	addseq	r4, lr, r1, lsl #4
     410:	03050000 	movweq	r0, #20480	; 0x5000
     414:	20004690 	mulcs	r0, r0, r6
     418:	0003a310 	andeq	sl, r3, r0, lsl r3
     41c:	9e430100 	dvflss	f0, f3, f0
     420:	05000000 	streq	r0, [r0, #-0]
     424:	0046fc03 	subeq	pc, r6, r3, lsl #24
     428:	055e1020 	ldrbeq	r1, [lr, #-32]	; 0xffffffe0
     42c:	44010000 	strmi	r0, [r1], #-0
     430:	0000009e 	muleq	r0, lr, r0
     434:	46c80305 	strbmi	r0, [r8], r5, lsl #6
     438:	66102000 	ldrvs	r2, [r0], -r0
     43c:	01000004 	tsteq	r0, r4
     440:	00009e45 	andeq	r9, r0, r5, asr #28
     444:	dc030500 	cfstr32le	mvfx0, [r3], {-0}
     448:	10200046 	eorne	r0, r0, r6, asr #32
     44c:	00000607 	andeq	r0, r0, r7, lsl #12
     450:	009e4601 	addseq	r4, lr, r1, lsl #12
     454:	03050000 	movweq	r0, #20480	; 0x5000
     458:	200046e8 	andcs	r4, r0, r8, ror #13
     45c:	0001d510 	andeq	sp, r1, r0, lsl r5
     460:	9e470100 	dvflss	f0, f7, f0
     464:	05000000 	streq	r0, [r0, #-0]
     468:	0046ac03 	subeq	sl, r6, r3, lsl #24
     46c:	070a1020 	streq	r1, [sl, -r0, lsr #32]
     470:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
     474:	0000009e 	muleq	r0, lr, r0
     478:	46640305 	strbtmi	r0, [r4], -r5, lsl #6
     47c:	97102000 	ldrls	r2, [r0, -r0]
     480:	01000003 	tsteq	r0, r3
     484:	0000624a 	andeq	r6, r0, sl, asr #4
     488:	58030500 	stmdapl	r3, {r8, sl}
     48c:	10200046 	eorne	r0, r0, r6, asr #32
     490:	00000221 	andeq	r0, r0, r1, lsr #4
     494:	00624b01 	rsbeq	r4, r2, r1, lsl #22
     498:	03050000 	movweq	r0, #20480	; 0x5000
     49c:	200046b0 			; <UNDEFINED> instruction: 0x200046b0
     4a0:	0001bf10 	andeq	fp, r1, r0, lsl pc
     4a4:	624c0100 	subvs	r0, ip, #0, 2
     4a8:	05000000 	streq	r0, [r0, #-0]
     4ac:	00467803 	subeq	r7, r6, r3, lsl #16
     4b0:	01fd1020 	mvnseq	r1, r0, lsr #32
     4b4:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
     4b8:	00000062 	andeq	r0, r0, r2, rrx
     4bc:	46f00305 	ldrbtmi	r0, [r0], r5, lsl #6
     4c0:	7f102000 	svcvc	0x00102000
     4c4:	01000000 	mrseq	r0, (UNDEF: 0)
     4c8:	00006250 	andeq	r6, r0, r0, asr r2
     4cc:	30030500 	andcc	r0, r3, r0, lsl #10
     4d0:	10200046 	eorne	r0, r0, r6, asr #32
     4d4:	0000049a 	muleq	r0, sl, r4
     4d8:	00625101 	rsbeq	r5, r2, r1, lsl #2
     4dc:	03050000 	movweq	r0, #20480	; 0x5000
     4e0:	200046cc 	andcs	r4, r0, ip, asr #13
     4e4:	00032210 	andeq	r2, r3, r0, lsl r2
     4e8:	62520100 	subsvs	r0, r2, #0, 2
     4ec:	05000000 	streq	r0, [r0, #-0]
     4f0:	0046a003 	subeq	sl, r6, r3
     4f4:	04a91020 	strteq	r1, [r9], #32
     4f8:	53010000 	movwpl	r0, #4096	; 0x1000
     4fc:	00000062 	andeq	r0, r0, r2, rrx
     500:	46680305 	strbtmi	r0, [r8], -r5, lsl #6
     504:	6f102000 	svcvs	0x00102000
     508:	01000006 	tsteq	r0, r6
     50c:	00006254 	andeq	r6, r0, r4, asr r2
     510:	48030500 	stmdami	r3, {r8, sl}
     514:	10200046 	eorne	r0, r0, r6, asr #32
     518:	0000063c 	andeq	r0, r0, ip, lsr r6
     51c:	00625501 	rsbeq	r5, r2, r1, lsl #10
     520:	03050000 	movweq	r0, #20480	; 0x5000
     524:	20004684 	andcs	r4, r0, r4, lsl #13
     528:	00059710 	andeq	r9, r5, r0, lsl r7
     52c:	62560100 	subsvs	r0, r6, #0, 2
     530:	05000000 	streq	r0, [r0, #-0]
     534:	0046bc03 	subeq	fp, r6, r3, lsl #24
     538:	04711020 	ldrbteq	r1, [r1], #-32	; 0xffffffe0
     53c:	57010000 	strpl	r0, [r1, -r0]
     540:	00000062 	andeq	r0, r0, r2, rrx
     544:	463c0305 	ldrtmi	r0, [ip], -r5, lsl #6
     548:	b4102000 	ldrlt	r2, [r0], #-0
     54c:	01000006 	tsteq	r0, r6
     550:	00006258 	andeq	r6, r0, r8, asr r2
     554:	94030500 	strls	r0, [r3], #-1280	; 0xfffffb00
     558:	10200046 	eorne	r0, r0, r6, asr #32
     55c:	000003e3 	andeq	r0, r0, r3, ror #7
     560:	012e8e01 			; <UNDEFINED> instruction: 0x012e8e01
     564:	03050000 	movweq	r0, #20480	; 0x5000
     568:	200045e0 	andcs	r4, r0, r0, ror #11
     56c:	00057310 	andeq	r7, r5, r0, lsl r3
     570:	2e8f0100 	rmfcse	f0, f7, f0
     574:	05000001 	streq	r0, [r0, #-1]
     578:	00860803 	addeq	r0, r6, r3, lsl #16
     57c:	62611320 	rsbvs	r1, r1, #32, 6	; 0x80000000
     580:	48010073 	stmdami	r1, {r0, r1, r4, r5, r6}
     584:	00012e02 	andeq	r2, r1, r2, lsl #28
     588:	00169400 	andseq	r9, r6, r0, lsl #8
     58c:	00001e20 	andeq	r1, r0, r0, lsr #28
     590:	a79c0100 	ldrge	r0, [ip, r0, lsl #2]
     594:	14000005 	strne	r0, [r0], #-5
     598:	0000062f 	andeq	r0, r0, pc, lsr #12
     59c:	2e024801 	cdpcs	8, 0, cr4, cr2, cr1, {0}
     5a0:	02000001 	andeq	r0, r0, #1
     5a4:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
     5a8:	00000705 	andeq	r0, r0, r5, lsl #14
     5ac:	01fc9001 	mvnseq	r9, r1
     5b0:	14982000 	ldrne	r2, [r8], #0
     5b4:	9c010000 	stcls	0, cr0, [r1], {-0}
     5b8:	000009b8 			; <UNDEFINED> instruction: 0x000009b8
     5bc:	0003eb11 	andeq	lr, r3, r1, lsl fp
     5c0:	4c960100 	ldfmis	f0, [r6], {0}
     5c4:	03000001 	movweq	r0, #1
     5c8:	117fb491 			; <UNDEFINED> instruction: 0x117fb491
     5cc:	00000612 	andeq	r0, r0, r2, lsl r6
     5d0:	00a49701 	adceq	r9, r4, r1, lsl #14
     5d4:	91030000 	mrsls	r0, (UNDEF: 3)
     5d8:	15117fa8 	ldrne	r7, [r1, #-4008]	; 0xfffff058
     5dc:	01000007 	tsteq	r0, r7
     5e0:	0009b898 	muleq	r9, r8, r8
     5e4:	9c910300 	ldcls	3, cr0, [r1], {0}
     5e8:	0502117f 	streq	r1, [r2, #-383]	; 0xfffffe81
     5ec:	a0010000 	andge	r0, r1, r0
     5f0:	0000014c 	andeq	r0, r0, ip, asr #2
     5f4:	7ef89103 	nrmvce	f1, f3
     5f8:	00018811 	andeq	r8, r1, r1, lsl r8
     5fc:	a4a10100 	strtge	r0, [r1], #256	; 0x100
     600:	03000000 	movweq	r0, #0
     604:	117eec91 			; <UNDEFINED> instruction: 0x117eec91
     608:	000005dd 	ldrdeq	r0, [r0], -sp
     60c:	09b8a201 	ldmibeq	r8!, {r0, r9, sp, pc}
     610:	91030000 	mrsls	r0, (UNDEF: 3)
     614:	a9117ee0 	ldmdbge	r1, {r5, r6, r7, r9, sl, fp, ip, sp, lr}
     618:	01000002 	tsteq	r0, r2
     61c:	00014ca9 	andeq	r4, r1, r9, lsr #25
     620:	bc910300 	ldclt	3, cr0, [r1], {0}
     624:	043b117e 	ldrteq	r1, [fp], #-382	; 0xfffffe82
     628:	aa010000 	bge	40630 <startup-0x1ffbf9d0>
     62c:	000000a4 	andeq	r0, r0, r4, lsr #1
     630:	7eb09103 	asnvcs	f1, f3
     634:	00065911 	andeq	r5, r6, r1, lsl r9
     638:	b8ab0100 	stmialt	fp!, {r8}
     63c:	03000009 	movweq	r0, #9
     640:	117ea491 			; <UNDEFINED> instruction: 0x117ea491
     644:	00000144 	andeq	r0, r0, r4, asr #2
     648:	014cb201 	cmpeq	ip, r1, lsl #4
     64c:	91030000 	mrsls	r0, (UNDEF: 3)
     650:	cb117e80 	blgt	460058 <startup-0x1fb9ffa8>
     654:	01000005 	tsteq	r0, r5
     658:	0000a4b3 			; <UNDEFINED> instruction: 0x0000a4b3
     65c:	f4910300 			; <UNDEFINED> instruction: 0xf4910300
     660:	017b117d 	cmneq	fp, sp, ror r1
     664:	b4010000 	strlt	r0, [r1], #-0
     668:	000009b8 			; <UNDEFINED> instruction: 0x000009b8
     66c:	7de89103 	stfvcp	f1, [r8, #12]!
     670:	00017311 	andeq	r7, r1, r1, lsl r3
     674:	4cbb0100 	ldfmis	f0, [fp]
     678:	03000001 	movweq	r0, #1
     67c:	117dc491 			; <UNDEFINED> instruction: 0x117dc491
     680:	00001e91 	muleq	r0, r1, lr
     684:	014cc001 	cmpeq	ip, r1
     688:	91030000 	mrsls	r0, (UNDEF: 3)
     68c:	09117da0 	ldmdbeq	r1, {r5, r7, r8, sl, fp, ip, sp, lr}
     690:	01000003 	tsteq	r0, r3
     694:	00014cc5 	andeq	r4, r1, r5, asr #25
     698:	fc910300 	ldc2	3, cr0, [r1], {0}
     69c:	02dd167c 	sbcseq	r1, sp, #124, 12	; 0x7c00000
     6a0:	c6010000 	strgt	r0, [r1], -r0
     6a4:	0000012e 	andeq	r0, r0, lr, lsr #2
     6a8:	000006ae 	andeq	r0, r0, lr, lsr #13
     6ac:	0f110017 	svceq	0x00110017
     6b0:	01000004 	tsteq	r0, r4
     6b4:	00014cc9 	andeq	r4, r1, r9, asr #25
     6b8:	d8910300 	ldmle	r1, {r8, r9}
     6bc:	03be167c 			; <UNDEFINED> instruction: 0x03be167c
     6c0:	ca010000 	bgt	406c8 <startup-0x1ffbf938>
     6c4:	0000012e 	andeq	r0, r0, lr, lsr #2
     6c8:	000006ce 	andeq	r0, r0, lr, asr #13
     6cc:	ff110017 			; <UNDEFINED> instruction: 0xff110017
     6d0:	0100000c 	tsteq	r0, ip
     6d4:	00014ccf 	andeq	r4, r1, pc, asr #25
     6d8:	b4910300 	ldrlt	r0, [r1], #768	; 0x300
     6dc:	0356117c 	cmpeq	r6, #124, 2
     6e0:	d5010000 	strle	r0, [r1, #-0]
     6e4:	0000014c 	andeq	r0, r0, ip, asr #2
     6e8:	7c909103 	ldfvcd	f1, [r0], {3}
     6ec:	00035116 	andeq	r5, r3, r6, lsl r1
     6f0:	2ed60100 	cdpcs	1, 13, cr0, cr6, cr0, {0}
     6f4:	fd000001 	stc2	0, cr0, [r0, #-4]
     6f8:	17000006 	strne	r0, [r0, -r6]
     6fc:	49441800 	stmdbmi	r4, {fp, ip}^
     700:	d9010050 	stmdble	r1, {r4, r6}
     704:	0000014c 	andeq	r0, r0, ip, asr #2
     708:	7bec9103 	blvc	ffb24b1c <firstTime.4040+0xdfb16634>
     70c:	00004611 	andeq	r4, r0, r1, lsl r6
     710:	4cdd0100 	ldfmie	f0, [sp], {0}
     714:	03000001 	movweq	r0, #1
     718:	117bc891 			; <UNDEFINED> instruction: 0x117bc891
     71c:	000005f5 	strdeq	r0, [r0], -r5
     720:	014ce301 	cmpeq	ip, r1, lsl #6
     724:	91030000 	mrsls	r0, (UNDEF: 3)
     728:	fb117ba4 	blx	45f5c2 <startup-0x1fba0a3e>
     72c:	01000005 	tsteq	r0, r5
     730:	00014ce5 	andeq	r4, r1, r5, ror #25
     734:	80910300 	addshi	r0, r1, r0, lsl #6
     738:	0601117b 			; <UNDEFINED> instruction: 0x0601117b
     73c:	e7010000 	str	r0, [r1, -r0]
     740:	0000014c 	andeq	r0, r0, ip, asr #2
     744:	7adc9103 	bvc	ff724b58 <firstTime.4040+0xdf716670>
     748:	0001eb11 	andeq	lr, r1, r1, lsl fp
     74c:	4ce90100 	stfmie	f0, [r9]
     750:	03000001 	movweq	r0, #1
     754:	117ab891 			; <UNDEFINED> instruction: 0x117ab891
     758:	0000016d 	andeq	r0, r0, sp, ror #2
     75c:	014cec01 	cmpeq	ip, r1, lsl #24
     760:	91030000 	mrsls	r0, (UNDEF: 3)
     764:	b2117a94 	andslt	r7, r1, #148, 20	; 0x94000
     768:	01000002 	tsteq	r0, r2
     76c:	00014cf1 	strdeq	r4, [r1], -r1
     770:	f0910300 			; <UNDEFINED> instruction: 0xf0910300
     774:	00121179 	andseq	r1, r2, r9, ror r1
     778:	f4010000 	vst4.8	{d0-d3}, [r1], r0
     77c:	0000014c 	andeq	r0, r0, ip, asr #2
     780:	79cc9103 	stmibvc	ip, {r0, r1, r8, ip, pc}^
     784:	00068f11 	andeq	r8, r6, r1, lsl pc
     788:	c8f70100 	ldmgt	r7!, {r8}^
     78c:	03000009 	movweq	r0, #9
     790:	1978e091 	ldmdbne	r8!, {r0, r4, r7, sp, lr, pc}^
     794:	0000004d 	andeq	r0, r0, sp, asr #32
     798:	6e010f01 	cdpvs	15, 0, cr0, cr1, cr1, {0}
     79c:	03000003 	movweq	r0, #3
     7a0:	1978cc91 	ldmdbne	r8!, {r0, r4, r7, sl, fp, lr, pc}^
     7a4:	0000019b 	muleq	r0, fp, r1
     7a8:	6e011001 	cdpvs	0, 0, cr1, cr1, cr1, {0}
     7ac:	03000003 	movweq	r0, #3
     7b0:	1978b891 	ldmdbne	r8!, {r0, r4, r7, fp, ip, sp, pc}^
     7b4:	000001cf 	andeq	r0, r0, pc, asr #3
     7b8:	6e011101 	adfvss	f1, f1, f1
     7bc:	03000003 	movweq	r0, #3
     7c0:	1978a491 	ldmdbne	r8!, {r0, r4, r7, sl, sp, pc}^
     7c4:	00000204 	andeq	r0, r0, r4, lsl #4
     7c8:	6e011201 	cdpvs	2, 0, cr1, cr1, cr1, {0}
     7cc:	03000003 	movweq	r0, #3
     7d0:	19789091 	ldmdbne	r8!, {r0, r4, r7, ip, pc}^
     7d4:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     7d8:	6e011301 	cdpvs	3, 0, cr1, cr1, cr1, {0}
     7dc:	03000003 	movweq	r0, #3
     7e0:	1977fc91 	ldmdbne	r7!, {r0, r4, r7, sl, fp, ip, sp, lr, pc}^
     7e4:	000001e5 	andeq	r0, r0, r5, ror #3
     7e8:	6e011401 	cdpvs	4, 0, cr1, cr1, cr1, {0}
     7ec:	03000003 	movweq	r0, #3
     7f0:	1977e891 	ldmdbne	r7!, {r0, r4, r7, fp, sp, lr, pc}^
     7f4:	0000024a 	andeq	r0, r0, sl, asr #4
     7f8:	6e011501 	cfsh32vs	mvfx1, mvfx1, #1
     7fc:	03000003 	movweq	r0, #3
     800:	1977d491 	ldmdbne	r7!, {r0, r4, r7, sl, ip, lr, pc}^
     804:	00000232 	andeq	r0, r0, r2, lsr r2
     808:	6e011601 	cfmadd32vs	mvax0, mvfx1, mvfx1, mvfx1
     80c:	03000003 	movweq	r0, #3
     810:	1977c091 	ldmdbne	r7!, {r0, r4, r7, lr, pc}^
     814:	0000020a 	andeq	r0, r0, sl, lsl #4
     818:	6e011701 	cdpvs	7, 0, cr1, cr1, cr1, {0}
     81c:	03000003 	movweq	r0, #3
     820:	1977ac91 	ldmdbne	r7!, {r0, r4, r7, sl, fp, sp, pc}^
     824:	00000250 	andeq	r0, r0, r0, asr r2
     828:	6e011801 	cdpvs	8, 0, cr1, cr1, cr1, {0}
     82c:	03000003 	movweq	r0, #3
     830:	19779891 	ldmdbne	r7!, {r0, r4, r7, fp, ip, pc}^
     834:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     838:	6e011901 	vmlavs.f16	s2, s2, s2	; <UNPREDICTABLE>
     83c:	03000003 	movweq	r0, #3
     840:	19778491 	ldmdbne	r7!, {r0, r4, r7, sl, pc}^
     844:	000006f7 	strdeq	r0, [r0], -r7
     848:	6e011a01 	vmlavs.f32	s2, s2, s2
     84c:	03000003 	movweq	r0, #3
     850:	1976f091 	ldmdbne	r6!, {r0, r4, r7, ip, sp, lr, pc}^
     854:	00000635 	andeq	r0, r0, r5, lsr r6
     858:	6e011b01 	vmlavs.f64	d1, d1, d1
     85c:	03000003 	movweq	r0, #3
     860:	1976dc91 	ldmdbne	r6!, {r0, r4, r7, sl, fp, ip, lr, pc}^
     864:	0000012f 	andeq	r0, r0, pc, lsr #2
     868:	2e012e01 	cdpcs	14, 0, cr2, cr1, cr1, {0}
     86c:	02000001 	andeq	r0, r0, #1
     870:	f1196c91 			; <UNDEFINED> instruction: 0xf1196c91
     874:	01000001 	tsteq	r0, r1
     878:	012e012f 			; <UNDEFINED> instruction: 0x012e012f
     87c:	91020000 	mrsls	r0, (UNDEF: 2)
     880:	00561968 	subseq	r1, r6, r8, ror #18
     884:	30010000 	andcc	r0, r1, r0
     888:	00012e01 	andeq	r2, r1, r1, lsl #28
     88c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     890:	0006e019 	andeq	lr, r6, r9, lsl r0
     894:	01310100 	teqeq	r1, r0, lsl #2
     898:	0000012e 	andeq	r0, r0, lr, lsr #2
     89c:	19609102 	stmdbne	r0!, {r1, r8, ip, pc}^
     8a0:	00000652 	andeq	r0, r0, r2, asr r6
     8a4:	2e013201 	cdpcs	2, 0, cr3, cr1, cr1, {0}
     8a8:	02000001 	andeq	r0, r0, #1
     8ac:	65195c91 	ldrvs	r5, [r9, #-3217]	; 0xfffff36f
     8b0:	01000006 	tsteq	r0, r6
     8b4:	012e0133 			; <UNDEFINED> instruction: 0x012e0133
     8b8:	91020000 	mrsls	r0, (UNDEF: 2)
     8bc:	08601a58 	stmdaeq	r0!, {r3, r4, r6, r9, fp, ip}^
     8c0:	0dfc2000 	ldcleq	0, cr2, [ip]
     8c4:	9f190000 	svcls	0x00190000
     8c8:	01000002 	tsteq	r0, r2
     8cc:	012e0159 			; <UNDEFINED> instruction: 0x012e0159
     8d0:	03050000 	movweq	r0, #20480	; 0x5000
     8d4:	20008610 	andcs	r8, r0, r0, lsl r6
     8d8:	00044d19 	andeq	r4, r4, r9, lsl sp
     8dc:	015a0100 	cmpeq	sl, r0, lsl #2
     8e0:	0000012e 	andeq	r0, r0, lr, lsr #2
     8e4:	86140305 	ldrhi	r0, [r4], -r5, lsl #6
     8e8:	86192000 	ldrhi	r2, [r9], -r0
     8ec:	01000003 	tsteq	r0, r3
     8f0:	012e015b 			; <UNDEFINED> instruction: 0x012e015b
     8f4:	03050000 	movweq	r0, #20480	; 0x5000
     8f8:	2000860c 	andcs	r8, r0, ip, lsl #12
     8fc:	0100691b 	tsteq	r0, fp, lsl r9
     900:	012e01a6 	smulwbeq	lr, r6, r1
     904:	03050000 	movweq	r0, #20480	; 0x5000
     908:	200045e4 	andcs	r4, r0, r4, ror #11
     90c:	00062419 	andeq	r2, r6, r9, lsl r4
     910:	01bc0100 			; <UNDEFINED> instruction: 0x01bc0100
     914:	0000012e 	andeq	r0, r0, lr, lsr #2
     918:	861c0305 	ldrhi	r0, [ip], -r5, lsl #6
     91c:	82192000 	andshi	r2, r9, #0
     920:	01000005 	tsteq	r0, r5
     924:	012e01ef 	smulwteq	lr, pc, r1	; <UNPREDICTABLE>
     928:	03050000 	movweq	r0, #20480	; 0x5000
     92c:	200045ec 	andcs	r4, r0, ip, ror #11
     930:	01006a1b 	tsteq	r0, fp, lsl sl
     934:	012e01f0 	strdeq	r0, [lr, -r0]!	; <UNPREDICTABLE>
     938:	03050000 	movweq	r0, #20480	; 0x5000
     93c:	200045e8 	andcs	r4, r0, r8, ror #11
     940:	00014e19 	andeq	r4, r1, r9, lsl lr
     944:	01fa0100 	mvnseq	r0, r0, lsl #2
     948:	0000012e 	andeq	r0, r0, lr, lsr #2
     94c:	45f40305 	ldrbmi	r0, [r4, #773]!	; 0x305
     950:	fb192000 	blx	64895a <startup-0x1f9b76a6>
     954:	01000002 	tsteq	r0, r2
     958:	012e01fb 	strdeq	r0, [lr, -fp]!
     95c:	03050000 	movweq	r0, #20480	; 0x5000
     960:	200045f0 	strdcs	r4, [r0], -r0
     964:	00056819 	andeq	r6, r5, r9, lsl r8
     968:	02040100 	andeq	r0, r4, #0, 2
     96c:	0000012e 	andeq	r0, r0, lr, lsr #2
     970:	45fc0305 	ldrbmi	r0, [ip, #773]!	; 0x305
     974:	39192000 	ldmdbcc	r9, {sp}
     978:	01000003 	tsteq	r0, r3
     97c:	012e0205 			; <UNDEFINED> instruction: 0x012e0205
     980:	03050000 	movweq	r0, #20480	; 0x5000
     984:	200045f8 	strdcs	r4, [r0], -r8
     988:	001bff19 	andseq	pc, fp, r9, lsl pc	; <UNPREDICTABLE>
     98c:	021e0100 	andseq	r0, lr, #0, 2
     990:	0000012e 	andeq	r0, r0, lr, lsr #2
     994:	46000305 	strmi	r0, [r0], -r5, lsl #6
     998:	101a2000 	andsne	r2, sl, r0
     99c:	a820000f 	stmdage	r0!, {r0, r1, r2, r3}
     9a0:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     9a4:	000005d7 	ldrdeq	r0, [r0], -r7
     9a8:	2e01ad01 	cdpcs	13, 0, cr10, cr1, cr1, {0}
     9ac:	05000001 	streq	r0, [r0, #-1]
     9b0:	00861803 	addeq	r1, r6, r3, lsl #16
     9b4:	00000020 	andeq	r0, r0, r0, lsr #32
     9b8:	0000a40b 	andeq	sl, r0, fp, lsl #8
     9bc:	0009c800 	andeq	ip, r9, r0, lsl #16
     9c0:	019a0f00 	orrseq	r0, sl, r0, lsl #30
     9c4:	00000000 	andeq	r0, r0, r0
     9c8:	00014c0b 	andeq	r4, r1, fp, lsl #24
     9cc:	0009d800 	andeq	sp, r9, r0, lsl #16
     9d0:	019a0f00 	orrseq	r0, sl, r0, lsl #30
     9d4:	00020000 	andeq	r0, r2, r0
     9d8:	00048e15 	andeq	r8, r4, r5, lsl lr
     9dc:	345a0100 	ldrbcc	r0, [sl], #-256	; 0xffffff00
     9e0:	c8200000 	stmdagt	r0!, {}	; <UNPREDICTABLE>
     9e4:	01000001 	tsteq	r0, r1
     9e8:	000a7a9c 	muleq	sl, ip, sl
     9ec:	047f1100 	ldrbteq	r1, [pc], #-256	; 9f4 <startup-0x1ffff60c>
     9f0:	5b010000 	blpl	409f8 <startup-0x1ffbf608>
     9f4:	0000009e 	muleq	r0, lr, r0
     9f8:	11749102 	cmnne	r4, r2, lsl #2
     9fc:	00000256 	andeq	r0, r0, r6, asr r2
     a00:	009e5f01 	addseq	r5, lr, r1, lsl #30
     a04:	91020000 	mrsls	r0, (UNDEF: 2)
     a08:	02661170 	rsbeq	r1, r6, #112, 2
     a0c:	63010000 	movwvs	r0, #4096	; 0x1000
     a10:	0000009e 	muleq	r0, lr, r0
     a14:	116c9102 	cmnne	ip, r2, lsl #2
     a18:	00000432 	andeq	r0, r0, r2, lsr r4
     a1c:	009e6701 	addseq	r6, lr, r1, lsl #14
     a20:	91020000 	mrsls	r0, (UNDEF: 2)
     a24:	02e91168 	rsceq	r1, r9, #104, 2
     a28:	6b010000 	blvs	40a30 <startup-0x1ffbf5d0>
     a2c:	0000009e 	muleq	r0, lr, r0
     a30:	11649102 	cmnne	r4, r2, lsl #2
     a34:	000002f2 	strdeq	r0, [r0], -r2
     a38:	009e6f01 	addseq	r6, lr, r1, lsl #30
     a3c:	91020000 	mrsls	r0, (UNDEF: 2)
     a40:	013b1160 	teqeq	fp, r0, ror #2
     a44:	73010000 	movwvc	r0, #4096	; 0x1000
     a48:	0000009e 	muleq	r0, lr, r0
     a4c:	115c9102 	cmpne	ip, r2, lsl #2
     a50:	00000310 	andeq	r0, r0, r0, lsl r3
     a54:	009e7701 	addseq	r7, lr, r1, lsl #14
     a58:	91020000 	mrsls	r0, (UNDEF: 2)
     a5c:	03191158 	tsteq	r9, #88, 2
     a60:	7a010000 	bvc	40a68 <startup-0x1ffbf598>
     a64:	0000009e 	muleq	r0, lr, r0
     a68:	11549102 	cmpne	r4, r2, lsl #2
     a6c:	00000075 	andeq	r0, r0, r5, ror r0
     a70:	009e7d01 	addseq	r7, lr, r1, lsl #26
     a74:	91020000 	mrsls	r0, (UNDEF: 2)
     a78:	961c0050 			; <UNDEFINED> instruction: 0x961c0050
     a7c:	01000002 	tsteq	r0, r2
     a80:	00001026 	andeq	r1, r0, r6, lsr #32
     a84:	00002420 	andeq	r2, r0, r0, lsr #8
     a88:	1d9c0100 	ldfnes	f0, [ip]
     a8c:	00000193 	muleq	r0, r3, r1
     a90:	00003001 	andeq	r3, r0, r1
     a94:	000c2000 	andeq	r2, ip, r0
     a98:	9c010000 	stcls	0, cr0, [r1], {-0}
     a9c:	0001e000 	andeq	lr, r1, r0
     aa0:	9e000400 	cfcpysls	mvf0, mvf0
     aa4:	04000001 	streq	r0, [r0], #-1
     aa8:	00008f01 	andeq	r8, r0, r1, lsl #30
     aac:	07340c00 	ldreq	r0, [r4, -r0, lsl #24]!
     ab0:	16b40000 	ldrtne	r0, [r4], r0
     ab4:	00562000 	subseq	r2, r6, r0
     ab8:	03a10000 			; <UNDEFINED> instruction: 0x03a10000
     abc:	0c020000 	stceq	0, cr0, [r2], {-0}
     ac0:	004e0502 	subeq	r0, lr, r2, lsl #10
     ac4:	4b030000 	blmi	c0acc <startup-0x1ff3f534>
     ac8:	02000003 	andeq	r0, r0, #3
     acc:	00004e07 	andeq	r4, r0, r7, lsl #28
     ad0:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
     ad4:	02000006 	andeq	r0, r0, #6
     ad8:	00004e08 	andeq	r4, r0, r8, lsl #28
     adc:	fd030400 	stc2	4, cr0, [r3, #-0]
     ae0:	02000018 	andeq	r0, r0, #24
     ae4:	00005509 	andeq	r5, r0, r9, lsl #10
     ae8:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
     aec:	03790704 	cmneq	r9, #4, 14	; 0x100000
     af0:	04050000 	streq	r0, [r5], #-0
     af4:	0000005b 	andeq	r0, r0, fp, asr r0
     af8:	b8080104 	stmdalt	r8, {r2, r8}
     afc:	06000004 	streq	r0, [r0], -r4
     b00:	00001a4f 	andeq	r1, r0, pc, asr #20
     b04:	00210a02 	eoreq	r0, r1, r2, lsl #20
     b08:	24070000 	strcs	r0, [r7], #-0
     b0c:	0c000000 	stceq	0, cr0, [r0], {-0}
     b10:	009e0603 	addseq	r0, lr, r3, lsl #12
     b14:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
     b18:	03000005 	movweq	r0, #5
     b1c:	00009e07 	andeq	r9, r0, r7, lsl #28
     b20:	2b030000 	blcs	c0b28 <startup-0x1ff3f4d8>
     b24:	03000000 	movweq	r0, #0
     b28:	00009e08 	andeq	r9, r0, r8, lsl #28
     b2c:	20030400 	andcs	r0, r3, r0, lsl #8
     b30:	03000000 	movweq	r0, #0
     b34:	00009e09 	andeq	r9, r0, r9, lsl #28
     b38:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
     b3c:	00006204 	andeq	r6, r0, r4, lsl #4
     b40:	160d0600 	strne	r0, [sp], -r0, lsl #12
     b44:	0a030000 	beq	c0b4c <startup-0x1ff3f4b4>
     b48:	0000006d 	andeq	r0, r0, sp, rrx
     b4c:	0006c307 	andeq	ip, r6, r7, lsl #6
     b50:	06042400 	streq	r2, [r4], -r0, lsl #8
     b54:	00000128 	andeq	r0, r0, r8, lsr #2
     b58:	00044603 	andeq	r4, r4, r3, lsl #12
     b5c:	28070400 	stmdacs	r7, {sl}
     b60:	00000001 	andeq	r0, r0, r1
     b64:	0006cf03 	andeq	ip, r6, r3, lsl #30
     b68:	2e080400 	cfcpyscs	mvf0, mvf8
     b6c:	04000001 	streq	r0, [r0], #-1
     b70:	00061f03 	andeq	r1, r6, r3, lsl #30
     b74:	2e090400 	cfcpyscs	mvf0, mvf9
     b78:	08000001 	stmdaeq	r0, {r0}
     b7c:	00064b03 	andeq	r4, r6, r3, lsl #22
     b80:	460c0400 	strmi	r0, [ip], -r0, lsl #8
     b84:	0c000001 	stceq	0, cr0, [r0], {1}
     b88:	00033203 	andeq	r3, r3, r3, lsl #4
     b8c:	460d0400 	strmi	r0, [sp], -r0, lsl #8
     b90:	10000001 	andne	r0, r0, r1
     b94:	00045803 	andeq	r5, r4, r3, lsl #16
     b98:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
     b9c:	14000001 	strne	r0, [r0], #-1
     ba0:	00006003 	andeq	r6, r0, r3
     ba4:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
     ba8:	18000001 	stmdane	r0, {r0}
     bac:	0003c903 	andeq	ip, r3, r3, lsl #18
     bb0:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
     bb4:	1c000001 	stcne	0, cr0, [r0], {1}
     bb8:	0003d903 	andeq	sp, r3, r3, lsl #18
     bbc:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
     bc0:	20000001 	andcs	r0, r0, r1
     bc4:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
     bc8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     bcc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     bd0:	40090074 	andmi	r0, r9, r4, ror r0
     bd4:	0a000001 	beq	be0 <startup-0x1ffff420>
     bd8:	00000140 	andeq	r0, r0, r0, asr #2
     bdc:	af040500 	svcge	0x00040500
     be0:	05000000 	streq	r0, [r0, #-0]
     be4:	00013504 	andeq	r3, r1, r4, lsl #10
     be8:	06c40600 	strbeq	r0, [r4], r0, lsl #12
     bec:	15040000 	strne	r0, [r4, #-0]
     bf0:	000000af 	andeq	r0, r0, pc, lsr #1
     bf4:	0001620b 	andeq	r6, r1, fp, lsl #4
     bf8:	00016200 	andeq	r6, r1, r0, lsl #4
     bfc:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
     c00:	00014c04 	andeq	r4, r1, r4, lsl #24
     c04:	053b0d00 	ldreq	r0, [fp, #-3328]!	; 0xfffff300
     c08:	1c040000 	stcne	0, cr0, [r4], {-0}
     c0c:	00000157 	andeq	r0, r0, r7, asr r1
     c10:	0004140d 	andeq	r1, r4, sp, lsl #8
     c14:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
     c18:	04000001 	streq	r0, [r0], #-1
     c1c:	03f60704 	mvnseq	r0, #4, 14	; 0x100000
     c20:	680e0000 	stmdavs	lr, {}	; <UNPREDICTABLE>
     c24:	01000001 	tsteq	r0, r1
     c28:	00030503 	andeq	r0, r3, r3, lsl #10
     c2c:	0e200047 	cdpeq	0, 2, cr0, cr0, cr7, {2}
     c30:	00000173 	andeq	r0, r0, r3, ror r1
     c34:	03050401 	movweq	r0, #21505	; 0x5401
     c38:	20004604 	andcs	r4, r0, r4, lsl #12
     c3c:	0007230f 	andeq	r2, r7, pc, lsl #6
     c40:	c40c0100 	strgt	r0, [ip], #-256	; 0xffffff00
     c44:	46200016 			; <UNDEFINED> instruction: 0x46200016
     c48:	01000000 	mrseq	r0, (UNDEF: 0)
     c4c:	0001c39c 	muleq	r1, ip, r3
     c50:	07671000 	strbeq	r1, [r7, -r0]!
     c54:	0c010000 	stceq	0, cr0, [r1], {-0}
     c58:	00000162 	andeq	r0, r0, r2, ror #2
     c5c:	00749102 	rsbseq	r9, r4, r2, lsl #2
     c60:	00033211 	andeq	r3, r3, r1, lsl r2
     c64:	b4070100 	strlt	r0, [r7], #-256	; 0xffffff00
     c68:	10200016 	eorne	r0, r0, r6, lsl r0
     c6c:	01000000 	mrseq	r0, (UNDEF: 0)
     c70:	0767109c 			; <UNDEFINED> instruction: 0x0767109c
     c74:	07010000 	streq	r0, [r1, -r0]
     c78:	00000162 	andeq	r0, r0, r2, ror #2
     c7c:	00749102 	rsbseq	r9, r4, r2, lsl #2
     c80:	00052b00 	andeq	r2, r5, r0, lsl #22
     c84:	84000400 	strhi	r0, [r0], #-1024	; 0xfffffc00
     c88:	04000002 	streq	r0, [r0], #-2
     c8c:	00008f01 	andeq	r8, r0, r1, lsl #30
     c90:	09a70c00 	stmibeq	r7!, {sl, fp}
     c94:	170c0000 	strne	r0, [ip, -r0]
     c98:	02a82000 	adceq	r2, r8, #0
     c9c:	042f0000 	strteq	r0, [pc], #-0	; ca4 <startup-0x1ffff35c>
     ca0:	0c020000 	stceq	0, cr0, [r2], {-0}
     ca4:	004e0502 	subeq	r0, lr, r2, lsl #10
     ca8:	4b030000 	blmi	c0cb0 <startup-0x1ff3f350>
     cac:	02000003 	andeq	r0, r0, #3
     cb0:	00004e07 	andeq	r4, r0, r7, lsl #28
     cb4:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
     cb8:	02000006 	andeq	r0, r0, #6
     cbc:	00004e08 	andeq	r4, r0, r8, lsl #28
     cc0:	fd030400 	stc2	4, cr0, [r3, #-0]
     cc4:	02000018 	andeq	r0, r0, #24
     cc8:	00005509 	andeq	r5, r0, r9, lsl #10
     ccc:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
     cd0:	03790704 	cmneq	r9, #4, 14	; 0x100000
     cd4:	04050000 	streq	r0, [r5], #-0
     cd8:	0000005b 	andeq	r0, r0, fp, asr r0
     cdc:	b8080104 	stmdalt	r8, {r2, r8}
     ce0:	06000004 	streq	r0, [r0], -r4
     ce4:	00001a4f 	andeq	r1, r0, pc, asr #20
     ce8:	00210a02 	eoreq	r0, r1, r2, lsl #20
     cec:	24070000 	strcs	r0, [r7], #-0
     cf0:	0c000000 	stceq	0, cr0, [r0], {-0}
     cf4:	009e0603 	addseq	r0, lr, r3, lsl #12
     cf8:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
     cfc:	03000005 	movweq	r0, #5
     d00:	00009e07 	andeq	r9, r0, r7, lsl #28
     d04:	2b030000 	blcs	c0d0c <startup-0x1ff3f2f4>
     d08:	03000000 	movweq	r0, #0
     d0c:	00009e08 	andeq	r9, r0, r8, lsl #28
     d10:	20030400 	andcs	r0, r3, r0, lsl #8
     d14:	03000000 	movweq	r0, #0
     d18:	00009e09 	andeq	r9, r0, r9, lsl #28
     d1c:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
     d20:	00006204 	andeq	r6, r0, r4, lsl #4
     d24:	160d0600 	strne	r0, [sp], -r0, lsl #12
     d28:	0a030000 	beq	c0d30 <startup-0x1ff3f2d0>
     d2c:	0000006d 	andeq	r0, r0, sp, rrx
     d30:	0006c307 	andeq	ip, r6, r7, lsl #6
     d34:	06042400 	streq	r2, [r4], -r0, lsl #8
     d38:	00000128 	andeq	r0, r0, r8, lsr #2
     d3c:	00044603 	andeq	r4, r4, r3, lsl #12
     d40:	28070400 	stmdacs	r7, {sl}
     d44:	00000001 	andeq	r0, r0, r1
     d48:	0006cf03 	andeq	ip, r6, r3, lsl #30
     d4c:	2e080400 	cfcpyscs	mvf0, mvf8
     d50:	04000001 	streq	r0, [r0], #-1
     d54:	00061f03 	andeq	r1, r6, r3, lsl #30
     d58:	2e090400 	cfcpyscs	mvf0, mvf9
     d5c:	08000001 	stmdaeq	r0, {r0}
     d60:	00064b03 	andeq	r4, r6, r3, lsl #22
     d64:	460c0400 	strmi	r0, [ip], -r0, lsl #8
     d68:	0c000001 	stceq	0, cr0, [r0], {1}
     d6c:	00033203 	andeq	r3, r3, r3, lsl #4
     d70:	460d0400 	strmi	r0, [sp], -r0, lsl #8
     d74:	10000001 	andne	r0, r0, r1
     d78:	00045803 	andeq	r5, r4, r3, lsl #16
     d7c:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
     d80:	14000001 	strne	r0, [r0], #-1
     d84:	00006003 	andeq	r6, r0, r3
     d88:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
     d8c:	18000001 	stmdane	r0, {r0}
     d90:	0003c903 	andeq	ip, r3, r3, lsl #18
     d94:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
     d98:	1c000001 	stcne	0, cr0, [r0], {1}
     d9c:	0003d903 	andeq	sp, r3, r3, lsl #18
     da0:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
     da4:	20000001 	andcs	r0, r0, r1
     da8:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
     dac:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     db0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     db4:	40090074 	andmi	r0, r9, r4, ror r0
     db8:	0a000001 	beq	dc4 <startup-0x1ffff23c>
     dbc:	00000140 	andeq	r0, r0, r0, asr #2
     dc0:	af040500 	svcge	0x00040500
     dc4:	05000000 	streq	r0, [r0, #-0]
     dc8:	00013504 	andeq	r3, r1, r4, lsl #10
     dcc:	06c40600 	strbeq	r0, [r4], r0, lsl #12
     dd0:	15040000 	strne	r0, [r4, #-0]
     dd4:	000000af 	andeq	r0, r0, pc, lsr #1
     dd8:	0001620b 	andeq	r6, r1, fp, lsl #4
     ddc:	00016200 	andeq	r6, r1, r0, lsl #4
     de0:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
     de4:	00014c04 	andeq	r4, r1, r4, lsl #24
     de8:	053b0d00 	ldreq	r0, [fp, #-3328]!	; 0xfffff300
     dec:	1c040000 	stcne	0, cr0, [r4], {-0}
     df0:	00000157 	andeq	r0, r0, r7, asr r1
     df4:	0004140d 	andeq	r1, r4, sp, lsl #8
     df8:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
     dfc:	0b000001 	bleq	e08 <startup-0x1ffff1f8>
     e00:	0000005b 	andeq	r0, r0, fp, asr r0
     e04:	0000018e 	andeq	r0, r0, lr, lsl #3
     e08:	00018e0e 	andeq	r8, r1, lr, lsl #28
     e0c:	04000b00 	streq	r0, [r0], #-2816	; 0xfffff500
     e10:	03f60704 	mvnseq	r0, #4, 14	; 0x100000
     e14:	6c0f0000 	stcvs	0, cr0, [pc], {-0}
     e18:	05000009 	streq	r0, [r0, #-9]
     e1c:	00017e03 	andeq	r7, r1, r3, lsl #28
     e20:	20030500 	andcs	r0, r3, r0, lsl #10
     e24:	0f200086 	svceq	0x00200086
     e28:	00000866 	andeq	r0, r0, r6, ror #16
     e2c:	017e0306 	cmneq	lr, r6, lsl #6
     e30:	03050000 	movweq	r0, #20480	; 0x5000
     e34:	2000862c 	andcs	r8, r0, ip, lsr #12
     e38:	0008810f 	andeq	r8, r8, pc, lsl #2
     e3c:	7e030700 	cdpvc	7, 0, cr0, cr3, cr0, {0}
     e40:	05000001 	streq	r0, [r0, #-1]
     e44:	00863803 	addeq	r3, r6, r3, lsl #16
     e48:	07e20f20 	strbeq	r0, [r2, r0, lsr #30]!
     e4c:	03080000 	movweq	r0, #32768	; 0x8000
     e50:	0000017e 	andeq	r0, r0, lr, ror r1
     e54:	86440305 	strbhi	r0, [r4], -r5, lsl #6
     e58:	920f2000 	andls	r2, pc, #0
     e5c:	09000008 	stmdbeq	r0, {r3}
     e60:	00017e03 	andeq	r7, r1, r3, lsl #28
     e64:	50030500 	andpl	r0, r3, r0, lsl #10
     e68:	0f200086 	svceq	0x00200086
     e6c:	000009d4 	ldrdeq	r0, [r0], -r4
     e70:	017e030a 	cmneq	lr, sl, lsl #6
     e74:	03050000 	movweq	r0, #20480	; 0x5000
     e78:	2000865c 	andcs	r8, r0, ip, asr r6
     e7c:	0009500f 	andeq	r5, r9, pc
     e80:	7e030b00 	vmlavc.f64	d0, d3, d0
     e84:	05000001 	streq	r0, [r0, #-1]
     e88:	00866803 	addeq	r6, r6, r3, lsl #16
     e8c:	08b50f20 	ldmeq	r5!, {r5, r8, r9, sl, fp}
     e90:	030c0000 	movweq	r0, #49152	; 0xc000
     e94:	0000017e 	andeq	r0, r0, lr, ror r1
     e98:	86740305 	ldrbthi	r0, [r4], -r5, lsl #6
     e9c:	f20f2000 	vhadd.s8	d2, d15, d0
     ea0:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
     ea4:	00017e03 	andeq	r7, r1, r3, lsl #28
     ea8:	80030500 	andhi	r0, r3, r0, lsl #10
     eac:	0f200086 	svceq	0x00200086
     eb0:	00000820 	andeq	r0, r0, r0, lsr #16
     eb4:	017e030e 	cmneq	lr, lr, lsl #6
     eb8:	03050000 	movweq	r0, #20480	; 0x5000
     ebc:	2000868c 	andcs	r8, r0, ip, lsl #13
     ec0:	0009020f 	andeq	r0, r9, pc, lsl #4
     ec4:	7e030f00 	cdpvc	15, 0, cr0, cr3, cr0, {0}
     ec8:	05000001 	streq	r0, [r0, #-1]
     ecc:	00869803 	addeq	r9, r6, r3, lsl #16
     ed0:	07a61020 	streq	r1, [r6, r0, lsr #32]!
     ed4:	11010000 	mrsne	r0, (UNDEF: 1)
     ed8:	0000009e 	muleq	r0, lr, r0
     edc:	49c00305 	stmibmi	r0, {r0, r2, r8, r9}^
     ee0:	76102000 	ldrvc	r2, [r0], -r0
     ee4:	01000007 	tsteq	r0, r7
     ee8:	00009e12 	andeq	r9, r0, r2, lsl lr
     eec:	d8030500 	stmdale	r3, {r8, sl}
     ef0:	10200049 	eorne	r0, r0, r9, asr #32
     ef4:	000007cc 	andeq	r0, r0, ip, asr #15
     ef8:	009e1301 	addseq	r1, lr, r1, lsl #6
     efc:	03050000 	movweq	r0, #20480	; 0x5000
     f00:	20004890 	mulcs	r0, r0, r8
     f04:	0008ab10 	andeq	sl, r8, r0, lsl fp
     f08:	9e140100 	muflss	f0, f4, f0
     f0c:	05000000 	streq	r0, [r0, #-0]
     f10:	0049d403 	subeq	sp, r9, r3, lsl #8
     f14:	08761020 	ldmdaeq	r6!, {r5, ip}^
     f18:	15010000 	strne	r0, [r1, #-0]
     f1c:	0000009e 	muleq	r0, lr, r0
     f20:	49ac0305 	stmibmi	ip!, {r0, r2, r8, r9}
     f24:	8e102000 	cdphi	0, 1, cr2, cr0, cr0, {0}
     f28:	01000007 	tsteq	r0, r7
     f2c:	00009e16 	andeq	r9, r0, r6, lsl lr
     f30:	a0030500 	andge	r0, r3, r0, lsl #10
     f34:	10200048 	eorne	r0, r0, r8, asr #32
     f38:	00000803 	andeq	r0, r0, r3, lsl #16
     f3c:	009e1701 	addseq	r1, lr, r1, lsl #14
     f40:	03050000 	movweq	r0, #20480	; 0x5000
     f44:	200049d0 	ldrdcs	r4, [r0], -r0
     f48:	00092910 	andeq	r2, r9, r0, lsl r9
     f4c:	9e180100 	muflse	f0, f0, f0
     f50:	05000000 	streq	r0, [r0, #-0]
     f54:	00498c03 	subeq	r8, r9, r3, lsl #24
     f58:	07d71020 	ldrbeq	r1, [r7, r0, lsr #32]
     f5c:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
     f60:	0000009e 	muleq	r0, lr, r0
     f64:	48f80305 	ldmmi	r8!, {r0, r2, r8, r9}^
     f68:	6c102000 	ldcvs	0, cr2, [r0], {-0}
     f6c:	01000007 	tsteq	r0, r7
     f70:	00009e1a 	andeq	r9, r0, sl, lsl lr
     f74:	a8030500 	stmdage	r3, {r8, sl}
     f78:	10200049 	eorne	r0, r0, r9, asr #32
     f7c:	00000844 	andeq	r0, r0, r4, asr #16
     f80:	009e1b01 	addseq	r1, lr, r1, lsl #22
     f84:	03050000 	movweq	r0, #20480	; 0x5000
     f88:	200049b0 			; <UNDEFINED> instruction: 0x200049b0
     f8c:	0007be10 	andeq	fp, r7, r0, lsl lr
     f90:	621d0100 	andsvs	r0, sp, #0, 2
     f94:	05000000 	streq	r0, [r0, #-0]
     f98:	0048c803 	subeq	ip, r8, r3, lsl #16
     f9c:	09331020 	ldmdbeq	r3!, {r5, ip}
     fa0:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
     fa4:	00000062 	andeq	r0, r0, r2, rrx
     fa8:	49b40305 	ldmibmi	r4!, {r0, r2, r8, r9}
     fac:	df102000 	svcle	0x00102000
     fb0:	01000008 	tsteq	r0, r8
     fb4:	0000621f 	andeq	r6, r0, pc, lsl r2
     fb8:	90030500 	andls	r0, r3, r0, lsl #10
     fbc:	10200049 	eorne	r0, r0, r9, asr #32
     fc0:	00000780 	andeq	r0, r0, r0, lsl #15
     fc4:	00622001 	rsbeq	r2, r2, r1
     fc8:	03050000 	movweq	r0, #20480	; 0x5000
     fcc:	200048bc 			; <UNDEFINED> instruction: 0x200048bc
     fd0:	00097e10 	andeq	r7, r9, r0, lsl lr
     fd4:	62210100 	eorvs	r0, r1, #0, 2
     fd8:	05000000 	streq	r0, [r0, #-0]
     fdc:	0049c403 	subeq	ip, r9, r3, lsl #8
     fe0:	07b01020 	ldreq	r1, [r0, r0, lsr #32]!
     fe4:	22010000 	andcs	r0, r1, #0
     fe8:	00000062 	andeq	r0, r0, r2, rrx
     fec:	49740305 	ldmdbmi	r4!, {r0, r2, r8, r9}^
     ff0:	c5102000 	ldrgt	r2, [r0, #-0]
     ff4:	01000008 	tsteq	r0, r8
     ff8:	00006223 	andeq	r6, r0, r3, lsr #4
     ffc:	94030500 	strls	r0, [r3], #-1280	; 0xfffffb00
    1000:	10200048 	eorne	r0, r0, r8, asr #32
    1004:	00000798 	muleq	r0, r8, r7
    1008:	00622401 	rsbeq	r2, r2, r1, lsl #8
    100c:	03050000 	movweq	r0, #20480	; 0x5000
    1010:	200048a4 	andcs	r4, r0, r4, lsr #17
    1014:	00094110 	andeq	r4, r9, r0, lsl r1
    1018:	62250100 	eorvs	r0, r5, #0, 2
    101c:	05000000 	streq	r0, [r0, #-0]
    1020:	0048e003 	subeq	lr, r8, r3
    1024:	08581020 	ldmdaeq	r8, {r5, ip}^
    1028:	26010000 	strcs	r0, [r1], -r0
    102c:	00000062 	andeq	r0, r0, r2, rrx
    1030:	49680305 	stmdbmi	r8!, {r0, r2, r8, r9}^
    1034:	98102000 	ldmdals	r0, {sp}
    1038:	01000009 	tsteq	r0, r9
    103c:	00006227 	andeq	r6, r0, r7, lsr #4
    1040:	9c030500 	cfstr32ls	mvfx0, [r3], {-0}
    1044:	10200049 	eorne	r0, r0, r9, asr #32
    1048:	000008a3 	andeq	r0, r0, r3, lsr #17
    104c:	014c2a01 	cmpeq	ip, r1, lsl #20
    1050:	03050000 	movweq	r0, #20480	; 0x5000
    1054:	200048fc 	strdcs	r4, [r0], -ip
    1058:	00091e10 	andeq	r1, r9, r0, lsl lr
    105c:	a42b0100 	strtge	r0, [fp], #-256	; 0xffffff00
    1060:	05000000 	streq	r0, [r0, #-0]
    1064:	0048ec03 	subeq	lr, r8, r3, lsl #24
    1068:	098d1020 	stmibeq	sp, {r5, ip}
    106c:	2c010000 	stccs	0, cr0, [r1], {-0}
    1070:	000000a4 	andeq	r0, r0, r4, lsr #1
    1074:	48b00305 	ldmmi	r0!, {r0, r2, r8, r9}
    1078:	30102000 	andscc	r2, r0, r0
    107c:	01000008 	tsteq	r0, r8
    1080:	0000a42d 	andeq	sl, r0, sp, lsr #8
    1084:	d4030500 	strle	r0, [r3], #-1280	; 0xfffffb00
    1088:	10200048 	eorne	r0, r0, r8, asr #32
    108c:	000008d4 	ldrdeq	r0, [r0], -r4
    1090:	00a42e01 	adceq	r2, r4, r1, lsl #28
    1094:	03050000 	movweq	r0, #20480	; 0x5000
    1098:	20004980 	andcs	r4, r0, r0, lsl #19
    109c:	00096110 	andeq	r6, r9, r0, lsl r1
    10a0:	a42f0100 	strtge	r0, [pc], #-256	; 10a8 <startup-0x1fffef58>
    10a4:	05000000 	streq	r0, [r0, #-0]
    10a8:	00492003 	subeq	r2, r9, r3
    10ac:	00a40b20 	adceq	r0, r4, r0, lsr #22
    10b0:	043c0000 	ldrteq	r0, [ip], #-0
    10b4:	8e0e0000 	cdphi	0, 0, cr0, cr14, cr0, {0}
    10b8:	04000001 	streq	r0, [r0], #-1
    10bc:	09131000 	ldmdbeq	r3, {ip}
    10c0:	30010000 	andcc	r0, r1, r0
    10c4:	0000042c 	andeq	r0, r0, ip, lsr #8
    10c8:	492c0305 	stmdbmi	ip!, {r0, r2, r8, r9}
    10cc:	f8112000 			; <UNDEFINED> instruction: 0xf8112000
    10d0:	01000008 	tsteq	r0, r8
    10d4:	0018905f 	andseq	r9, r8, pc, asr r0
    10d8:	00012420 	andeq	r2, r1, r0, lsr #8
    10dc:	829c0100 	addshi	r0, ip, #0, 2
    10e0:	12000004 	andne	r0, r0, #4
    10e4:	000008a3 	andeq	r0, r0, r3, lsr #17
    10e8:	01625f01 	cmneq	r2, r1, lsl #30
    10ec:	91020000 	mrsls	r0, (UNDEF: 2)
    10f0:	08ee0f6c 	stmiaeq	lr!, {r2, r3, r5, r6, r8, r9, sl, fp}^
    10f4:	60010000 	andvs	r0, r1, r0
    10f8:	0000012e 	andeq	r0, r0, lr, lsr #2
    10fc:	86a40305 	strthi	r0, [r4], r5, lsl #6
    1100:	13002000 	movwne	r2, #0
    1104:	0000048e 	andeq	r0, r0, lr, lsl #9
    1108:	170c3101 	strne	r3, [ip, -r1, lsl #2]
    110c:	01842000 	orreq	r2, r4, r0
    1110:	9c010000 	stcls	0, cr0, [r1], {-0}
    1114:	00083b0f 	andeq	r3, r8, pc, lsl #22
    1118:	9e320100 	rsflss	f0, f2, f0
    111c:	02000000 	andeq	r0, r0, #0
    1120:	0e0f7491 	mcreq	4, 0, r7, cr15, cr1, {4}
    1124:	01000008 	tsteq	r0, r8
    1128:	00009e36 	andeq	r9, r0, r6, lsr lr
    112c:	70910200 	addsvc	r0, r1, r0, lsl #4
    1130:	00084f0f 	andeq	r4, r8, pc, lsl #30
    1134:	9e3a0100 	rsflse	f0, f2, f0
    1138:	02000000 	andeq	r0, r0, #0
    113c:	170f6c91 			; <UNDEFINED> instruction: 0x170f6c91
    1140:	01000008 	tsteq	r0, r8
    1144:	00009e3e 	andeq	r9, r0, lr, lsr lr
    1148:	68910200 	ldmvs	r1, {r9}
    114c:	0004320f 	andeq	r3, r4, pc, lsl #4
    1150:	9e420100 	dvflss	f0, f2, f0
    1154:	02000000 	andeq	r0, r0, #0
    1158:	e90f6491 	stmdb	pc, {r0, r4, r7, sl, sp, lr}	; <UNPREDICTABLE>
    115c:	01000002 	tsteq	r0, r2
    1160:	00009e46 	andeq	r9, r0, r6, asr #28
    1164:	60910200 	addsvs	r0, r1, r0, lsl #4
    1168:	0002f20f 	andeq	pc, r2, pc, lsl #4
    116c:	9e4a0100 	dvflse	f0, f2, f0
    1170:	02000000 	andeq	r0, r0, #0
    1174:	3b0f5c91 	blcc	3d83c0 <startup-0x1fc27c40>
    1178:	01000001 	tsteq	r0, r1
    117c:	00009e4e 	andeq	r9, r0, lr, asr #28
    1180:	58910200 	ldmpl	r1, {r9}
    1184:	0003100f 	andeq	r1, r3, pc
    1188:	9e520100 	rdflss	f0, f2, f0
    118c:	02000000 	andeq	r0, r0, #0
    1190:	190f5491 	stmdbne	pc, {r0, r4, r7, sl, ip, lr}	; <UNPREDICTABLE>
    1194:	01000003 	tsteq	r0, r3
    1198:	00009e56 	andeq	r9, r0, r6, asr lr
    119c:	50910200 	addspl	r0, r1, r0, lsl #4
    11a0:	0000750f 	andeq	r7, r0, pc, lsl #10
    11a4:	9e5a0100 	rdflse	f0, f2, f0
    11a8:	02000000 	andeq	r0, r0, #0
    11ac:	00004c91 	muleq	r0, r1, ip
    11b0:	000001f7 	strdeq	r0, [r0], -r7
    11b4:	03840004 	orreq	r0, r4, #4
    11b8:	01040000 	mrseq	r0, (UNDEF: 4)
    11bc:	0000008f 	andeq	r0, r0, pc, lsl #1
    11c0:	000a1d0c 	andeq	r1, sl, ip, lsl #26
    11c4:	0019b400 	andseq	fp, r9, r0, lsl #8
    11c8:	00020420 	andeq	r0, r2, r0, lsr #8
    11cc:	0005b700 	andeq	fp, r5, r0, lsl #14
    11d0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    11d4:	00000379 	andeq	r0, r0, r9, ror r3
    11d8:	73070202 	movwvc	r0, #29186	; 0x7202
    11dc:	02000003 	andeq	r0, r0, #3
    11e0:	04b80801 	ldrteq	r0, [r8], #2049	; 0x801
    11e4:	0c030000 	stceq	0, cr0, [r3], {-0}
    11e8:	00630502 	rsbeq	r0, r3, r2, lsl #10
    11ec:	4b040000 	blmi	1011f4 <startup-0x1fefee0c>
    11f0:	02000003 	andeq	r0, r0, #3
    11f4:	00002107 	andeq	r2, r0, r7, lsl #2
    11f8:	fe040000 	cdp2	0, 0, cr0, cr4, cr0, {0}
    11fc:	02000006 	andeq	r0, r0, #6
    1200:	00002108 	andeq	r2, r0, r8, lsl #2
    1204:	fd040400 	stc2	4, cr0, [r4, #-0]
    1208:	02000018 	andeq	r0, r0, #24
    120c:	00006309 	andeq	r6, r0, r9, lsl #6
    1210:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    1214:	00002f04 	andeq	r2, r0, r4, lsl #30
    1218:	1a4f0600 	bne	13c2a20 <startup-0x1ec3d5e0>
    121c:	0a020000 	beq	81224 <startup-0x1ff7eddc>
    1220:	00000036 	andeq	r0, r0, r6, lsr r0
    1224:	00002407 	andeq	r2, r0, r7, lsl #8
    1228:	06030c00 	streq	r0, [r3], -r0, lsl #24
    122c:	000000a5 	andeq	r0, r0, r5, lsr #1
    1230:	0005ae04 	andeq	sl, r5, r4, lsl #28
    1234:	a5070300 	strge	r0, [r7, #-768]	; 0xfffffd00
    1238:	00000000 	andeq	r0, r0, r0
    123c:	00002b04 	andeq	r2, r0, r4, lsl #22
    1240:	a5080300 	strge	r0, [r8, #-768]	; 0xfffffd00
    1244:	04000000 	streq	r0, [r0], #-0
    1248:	00002004 	andeq	r2, r0, r4
    124c:	a5090300 	strge	r0, [r9, #-768]	; 0xfffffd00
    1250:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1254:	69040500 	stmdbvs	r4, {r8, sl}
    1258:	06000000 	streq	r0, [r0], -r0
    125c:	0000160d 	andeq	r1, r0, sp, lsl #12
    1260:	00740a03 	rsbseq	r0, r4, r3, lsl #20
    1264:	c3070000 	movwgt	r0, #28672	; 0x7000
    1268:	24000006 	strcs	r0, [r0], #-6
    126c:	012f0604 			; <UNDEFINED> instruction: 0x012f0604
    1270:	46040000 	strmi	r0, [r4], -r0
    1274:	04000004 	streq	r0, [r0], #-4
    1278:	00012f07 	andeq	r2, r1, r7, lsl #30
    127c:	cf040000 	svcgt	0x00040000
    1280:	04000006 	streq	r0, [r0], #-6
    1284:	00013508 	andeq	r3, r1, r8, lsl #10
    1288:	1f040400 	svcne	0x00040400
    128c:	04000006 	streq	r0, [r0], #-6
    1290:	00013509 	andeq	r3, r1, r9, lsl #10
    1294:	4b040800 	blmi	10329c <startup-0x1fefcd64>
    1298:	04000006 	streq	r0, [r0], #-6
    129c:	00014d0c 	andeq	r4, r1, ip, lsl #26
    12a0:	32040c00 	andcc	r0, r4, #0, 24
    12a4:	04000003 	streq	r0, [r0], #-3
    12a8:	00014d0d 	andeq	r4, r1, sp, lsl #26
    12ac:	58041000 	stmdapl	r4, {ip}
    12b0:	04000004 	streq	r0, [r0], #-4
    12b4:	00013510 	andeq	r3, r1, r0, lsl r5
    12b8:	60041400 	andvs	r1, r4, r0, lsl #8
    12bc:	04000000 	streq	r0, [r0], #-0
    12c0:	00013511 	andeq	r3, r1, r1, lsl r5
    12c4:	c9041800 	stmdbgt	r4, {fp, ip}
    12c8:	04000003 	streq	r0, [r0], #-3
    12cc:	00013512 	andeq	r3, r1, r2, lsl r5
    12d0:	d9041c00 	stmdble	r4, {sl, fp, ip}
    12d4:	04000003 	streq	r0, [r0], #-3
    12d8:	00013513 	andeq	r3, r1, r3, lsl r5
    12dc:	05002000 	streq	r2, [r0, #-0]
    12e0:	0000ab04 	andeq	sl, r0, r4, lsl #22
    12e4:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
    12e8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    12ec:	00014709 	andeq	r4, r1, r9, lsl #14
    12f0:	01470a00 	cmpeq	r7, r0, lsl #20
    12f4:	05000000 	streq	r0, [r0, #-0]
    12f8:	0000b604 	andeq	fp, r0, r4, lsl #12
    12fc:	3c040500 	cfstr32cc	mvfx0, [r4], {-0}
    1300:	06000001 	streq	r0, [r0], -r1
    1304:	000006c4 	andeq	r0, r0, r4, asr #13
    1308:	00b61504 	adcseq	r1, r6, r4, lsl #10
    130c:	690b0000 	stmdbvs	fp, {}	; <UNPREDICTABLE>
    1310:	69000001 	stmdbvs	r0, {r0}
    1314:	0c000001 	stceq	0, cr0, [r0], {1}
    1318:	53040500 	movwpl	r0, #17664	; 0x4500
    131c:	0d000001 	stceq	0, cr0, [r0, #-4]
    1320:	0000053b 	andeq	r0, r0, fp, lsr r5
    1324:	015e1c04 	cmpeq	lr, r4, lsl #24
    1328:	140d0000 	strne	r0, [sp], #-0
    132c:	04000004 	streq	r0, [r0], #-4
    1330:	0001351d 	andeq	r3, r1, sp, lsl r5
    1334:	0a4c0e00 	beq	1304b3c <startup-0x1ecfb4c4>
    1338:	07010000 	streq	r0, [r1, -r0]
    133c:	200019b4 			; <UNDEFINED> instruction: 0x200019b4
    1340:	00000204 	andeq	r0, r0, r4, lsl #4
    1344:	670f9c01 	strvs	r9, [pc, -r1, lsl #24]
    1348:	01000007 	tsteq	r0, r7
    134c:	00016907 	andeq	r6, r1, r7, lsl #18
    1350:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1354:	0009f310 	andeq	pc, r9, r0, lsl r3	; <UNPREDICTABLE>
    1358:	35110100 	ldrcc	r0, [r1, #-256]	; 0xffffff00
    135c:	05000001 	streq	r0, [r0, #-1]
    1360:	00460803 	subeq	r0, r6, r3, lsl #16
    1364:	09e41020 	stmibeq	r4!, {r5, ip}^
    1368:	12010000 	andne	r0, r1, #0
    136c:	00000135 	andeq	r0, r0, r5, lsr r1
    1370:	46100305 	ldrmi	r0, [r0], -r5, lsl #6
    1374:	0f102000 	svceq	0x00102000
    1378:	0100000a 	tsteq	r0, sl
    137c:	00013513 	andeq	r3, r1, r3, lsl r5
    1380:	18030500 	stmdane	r3, {r8, sl}
    1384:	10200046 	eorne	r0, r0, r6, asr #32
    1388:	00000a08 	andeq	r0, r0, r8, lsl #20
    138c:	01351401 	teqeq	r5, r1, lsl #8
    1390:	03050000 	movweq	r0, #20480	; 0x5000
    1394:	20004614 	andcs	r4, r0, r4, lsl r6
    1398:	000a0110 	andeq	r0, sl, r0, lsl r1
    139c:	35150100 	ldrcc	r0, [r5, #-256]	; 0xffffff00
    13a0:	05000001 	streq	r0, [r0, #-1]
    13a4:	00460c03 	subeq	r0, r6, r3, lsl #24
    13a8:	41000020 	tstmi	r0, r0, lsr #32
    13ac:	04000006 	streq	r0, [r0], #-6
    13b0:	00045200 	andeq	r5, r4, r0, lsl #4
    13b4:	8f010400 	svchi	0x00010400
    13b8:	0c000000 	stceq	0, cr0, [r0], {-0}
    13bc:	00000ccd 	andeq	r0, r0, sp, asr #25
    13c0:	20001bb8 			; <UNDEFINED> instruction: 0x20001bb8
    13c4:	00000364 	andeq	r0, r0, r4, ror #6
    13c8:	000006a2 	andeq	r0, r0, r2, lsr #13
    13cc:	05020c02 	streq	r0, [r2, #-3074]	; 0xfffff3fe
    13d0:	0000004e 	andeq	r0, r0, lr, asr #32
    13d4:	00034b03 	andeq	r4, r3, r3, lsl #22
    13d8:	4e070200 	cdpmi	2, 0, cr0, cr7, cr0, {0}
    13dc:	00000000 	andeq	r0, r0, r0
    13e0:	0006fe03 	andeq	pc, r6, r3, lsl #28
    13e4:	4e080200 	cdpmi	2, 0, cr0, cr8, cr0, {0}
    13e8:	04000000 	streq	r0, [r0], #-0
    13ec:	0018fd03 	andseq	pc, r8, r3, lsl #26
    13f0:	55090200 	strpl	r0, [r9, #-512]	; 0xfffffe00
    13f4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    13f8:	07040400 	streq	r0, [r4, -r0, lsl #8]
    13fc:	00000379 	andeq	r0, r0, r9, ror r3
    1400:	005b0405 	subseq	r0, fp, r5, lsl #8
    1404:	01040000 	mrseq	r0, (UNDEF: 4)
    1408:	0004b808 	andeq	fp, r4, r8, lsl #16
    140c:	1a4f0600 	bne	13c2c14 <startup-0x1ec3d3ec>
    1410:	0a020000 	beq	81418 <startup-0x1ff7ebe8>
    1414:	00000021 	andeq	r0, r0, r1, lsr #32
    1418:	00002407 	andeq	r2, r0, r7, lsl #8
    141c:	06030c00 	streq	r0, [r3], -r0, lsl #24
    1420:	0000009e 	muleq	r0, lr, r0
    1424:	0005ae03 	andeq	sl, r5, r3, lsl #28
    1428:	9e070300 	cdpls	3, 0, cr0, cr7, cr0, {0}
    142c:	00000000 	andeq	r0, r0, r0
    1430:	00002b03 	andeq	r2, r0, r3, lsl #22
    1434:	9e080300 	cdpls	3, 0, cr0, cr8, cr0, {0}
    1438:	04000000 	streq	r0, [r0], #-0
    143c:	00002003 	andeq	r2, r0, r3
    1440:	9e090300 	cdpls	3, 0, cr0, cr9, cr0, {0}
    1444:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1448:	62040500 	andvs	r0, r4, #0, 10
    144c:	06000000 	streq	r0, [r0], -r0
    1450:	0000160d 	andeq	r1, r0, sp, lsl #12
    1454:	006d0a03 	rsbeq	r0, sp, r3, lsl #20
    1458:	c3070000 	movwgt	r0, #28672	; 0x7000
    145c:	24000006 	strcs	r0, [r0], #-6
    1460:	01280604 			; <UNDEFINED> instruction: 0x01280604
    1464:	46030000 	strmi	r0, [r3], -r0
    1468:	04000004 	streq	r0, [r0], #-4
    146c:	00012807 	andeq	r2, r1, r7, lsl #16
    1470:	cf030000 	svcgt	0x00030000
    1474:	04000006 	streq	r0, [r0], #-6
    1478:	00012e08 	andeq	r2, r1, r8, lsl #28
    147c:	1f030400 	svcne	0x00030400
    1480:	04000006 	streq	r0, [r0], #-6
    1484:	00012e09 	andeq	r2, r1, r9, lsl #28
    1488:	4b030800 	blmi	c3490 <startup-0x1ff3cb70>
    148c:	04000006 	streq	r0, [r0], #-6
    1490:	0001460c 	andeq	r4, r1, ip, lsl #12
    1494:	32030c00 	andcc	r0, r3, #0, 24
    1498:	04000003 	streq	r0, [r0], #-3
    149c:	0001460d 	andeq	r4, r1, sp, lsl #12
    14a0:	58031000 	stmdapl	r3, {ip}
    14a4:	04000004 	streq	r0, [r0], #-4
    14a8:	00012e10 	andeq	r2, r1, r0, lsl lr
    14ac:	60031400 	andvs	r1, r3, r0, lsl #8
    14b0:	04000000 	streq	r0, [r0], #-0
    14b4:	00012e11 	andeq	r2, r1, r1, lsl lr
    14b8:	c9031800 	stmdbgt	r3, {fp, ip}
    14bc:	04000003 	streq	r0, [r0], #-3
    14c0:	00012e12 	andeq	r2, r1, r2, lsl lr
    14c4:	d9031c00 	stmdble	r3, {sl, fp, ip}
    14c8:	04000003 	streq	r0, [r0], #-3
    14cc:	00012e13 	andeq	r2, r1, r3, lsl lr
    14d0:	05002000 	streq	r2, [r0, #-0]
    14d4:	0000a404 	andeq	sl, r0, r4, lsl #8
    14d8:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
    14dc:	00746e69 	rsbseq	r6, r4, r9, ror #28
    14e0:	00014009 	andeq	r4, r1, r9
    14e4:	01400a00 	cmpeq	r0, r0, lsl #20
    14e8:	05000000 	streq	r0, [r0, #-0]
    14ec:	0000af04 	andeq	sl, r0, r4, lsl #30
    14f0:	35040500 	strcc	r0, [r4, #-1280]	; 0xfffffb00
    14f4:	06000001 	streq	r0, [r0], -r1
    14f8:	000006c4 	andeq	r0, r0, r4, asr #13
    14fc:	00af1504 	adceq	r1, pc, r4, lsl #10
    1500:	620b0000 	andvs	r0, fp, #0
    1504:	62000001 	andvs	r0, r0, #1
    1508:	0c000001 	stceq	0, cr0, [r0], {1}
    150c:	4c040500 	cfstr32mi	mvfx0, [r4], {-0}
    1510:	0d000001 	stceq	0, cr0, [r0, #-4]
    1514:	0000053b 	andeq	r0, r0, fp, lsr r5
    1518:	01571c04 	cmpeq	r7, r4, lsl #24
    151c:	140d0000 	strne	r0, [sp], #-0
    1520:	04000004 	streq	r0, [r0], #-4
    1524:	00012e1d 	andeq	r2, r1, sp, lsl lr
    1528:	005b0b00 	subseq	r0, fp, r0, lsl #22
    152c:	018e0000 	orreq	r0, lr, r0
    1530:	8e0e0000 	cdphi	0, 0, cr0, cr14, cr0, {0}
    1534:	63000001 	movwvs	r0, #1
    1538:	07040400 	streq	r0, [r4, -r0, lsl #8]
    153c:	000003f6 	strdeq	r0, [r0], -r6
    1540:	000d330f 	andeq	r3, sp, pc, lsl #6
    1544:	7e030500 	cfsh32vc	mvfx0, mvfx3, #0
    1548:	05000001 	streq	r0, [r0, #-1]
    154c:	0086a803 	addeq	sl, r6, r3, lsl #16
    1550:	0b9e0f20 	bleq	fe7851d8 <firstTime.4040+0xde776cf0>
    1554:	03060000 	movweq	r0, #24576	; 0x6000
    1558:	0000017e 	andeq	r0, r0, lr, ror r1
    155c:	870c0305 	strhi	r0, [ip, -r5, lsl #6]
    1560:	e60f2000 	str	r2, [pc], -r0
    1564:	0700000b 	streq	r0, [r0, -fp]
    1568:	00017e03 	andeq	r7, r1, r3, lsl #28
    156c:	70030500 	andvc	r0, r3, r0, lsl #10
    1570:	0f200087 	svceq	0x00200087
    1574:	00000b8d 	andeq	r0, r0, sp, lsl #23
    1578:	017e0308 	cmneq	lr, r8, lsl #6
    157c:	03050000 	movweq	r0, #20480	; 0x5000
    1580:	200087d4 	ldrdcs	r8, [r0], -r4
    1584:	000d0c0f 	andeq	r0, sp, pc, lsl #24
    1588:	7e030900 	vmlavc.f16	s0, s6, s0	; <UNPREDICTABLE>
    158c:	05000001 	streq	r0, [r0, #-1]
    1590:	00883803 	addeq	r3, r8, r3, lsl #16
    1594:	0de00f20 	stcleq	15, cr0, [r0, #128]!	; 0x80
    1598:	030a0000 	movweq	r0, #40960	; 0xa000
    159c:	0000017e 	andeq	r0, r0, lr, ror r1
    15a0:	889c0305 	ldmhi	ip, {r0, r2, r8, r9}
    15a4:	b90f2000 	stmdblt	pc, {sp}	; <UNPREDICTABLE>
    15a8:	0b00000b 	bleq	15dc <startup-0x1fffea24>
    15ac:	00017e03 	andeq	r7, r1, r3, lsl #28
    15b0:	00030500 	andeq	r0, r3, r0, lsl #10
    15b4:	0f200089 	svceq	0x00200089
    15b8:	00000ca7 	andeq	r0, r0, r7, lsr #25
    15bc:	017e030c 	cmneq	lr, ip, lsl #6
    15c0:	03050000 	movweq	r0, #20480	; 0x5000
    15c4:	20008964 	andcs	r8, r0, r4, ror #18
    15c8:	000a680f 	andeq	r6, sl, pc, lsl #16
    15cc:	7e030d00 	cdpvc	13, 0, cr0, cr3, cr0, {0}
    15d0:	05000001 	streq	r0, [r0, #-1]
    15d4:	0089c803 	addeq	ip, r9, r3, lsl #16
    15d8:	0bca0f20 	bleq	ff285260 <firstTime.4040+0xdf276d78>
    15dc:	030e0000 	movweq	r0, #57344	; 0xe000
    15e0:	0000017e 	andeq	r0, r0, lr, ror r1
    15e4:	8a2c0305 	bhi	b02200 <startup-0x1f4fde00>
    15e8:	4e0f2000 	cdpmi	0, 0, cr2, cr15, cr0, {0}
    15ec:	0f00000c 	svceq	0x0000000c
    15f0:	00017e03 	andeq	r7, r1, r3, lsl #28
    15f4:	90030500 	andls	r0, r3, r0, lsl #10
    15f8:	0f20008a 	svceq	0x0020008a
    15fc:	00000a84 	andeq	r0, r0, r4, lsl #21
    1600:	017e0310 	cmneq	lr, r0, lsl r3
    1604:	03050000 	movweq	r0, #20480	; 0x5000
    1608:	20008af4 	strdcs	r8, [r0], -r4
    160c:	000bf70f 	andeq	pc, fp, pc, lsl #14
    1610:	7e031100 	adfvcs	f1, f3, f0
    1614:	05000001 	streq	r0, [r0, #-1]
    1618:	008b5803 	addeq	r5, fp, r3, lsl #16
    161c:	0c170f20 	ldceq	15, cr0, [r7], {32}
    1620:	03120000 	tsteq	r2, #0
    1624:	0000017e 	andeq	r0, r0, lr, ror r1
    1628:	8bbc0305 	blhi	fef02244 <firstTime.4040+0xdeef3d5c>
    162c:	ae0f2000 	cdpge	0, 0, cr2, cr15, cr0, {0}
    1630:	1300000a 	movwne	r0, #10
    1634:	00017e03 	andeq	r7, r1, r3, lsl #28
    1638:	20030500 	andcs	r0, r3, r0, lsl #10
    163c:	1020008c 	eorne	r0, r0, ip, lsl #1
    1640:	00000cb7 			; <UNDEFINED> instruction: 0x00000cb7
    1644:	009e1501 	addseq	r1, lr, r1, lsl #10
    1648:	03050000 	movweq	r0, #20480	; 0x5000
    164c:	20004a48 	andcs	r4, r0, r8, asr #20
    1650:	000aea10 	andeq	lr, sl, r0, lsl sl
    1654:	9e160100 	muflss	f0, f6, f0
    1658:	05000000 	streq	r0, [r0, #-0]
    165c:	0049e003 	subeq	lr, r9, r3
    1660:	0ad41020 	beq	ff5056e8 <firstTime.4040+0xdf4f7200>
    1664:	17010000 	strne	r0, [r1, -r0]
    1668:	0000009e 	muleq	r0, lr, r0
    166c:	4ad80305 	bmi	ff602288 <firstTime.4040+0xdf5f3da0>
    1670:	2c102000 	ldccs	0, cr2, [r0], {-0}
    1674:	0100000b 	tsteq	r0, fp
    1678:	00009e18 	andeq	r9, r0, r8, lsl lr
    167c:	44030500 	strmi	r0, [r3], #-1280	; 0xfffffb00
    1680:	1020004a 	eorne	r0, r0, sl, asr #32
    1684:	00000c27 	andeq	r0, r0, r7, lsr #24
    1688:	009e1901 	addseq	r1, lr, r1, lsl #18
    168c:	03050000 	movweq	r0, #20480	; 0x5000
    1690:	20004ac8 	andcs	r4, r0, r8, asr #21
    1694:	000cc210 	andeq	ip, ip, r0, lsl r2
    1698:	9e1a0100 	muflse	f0, f2, f0
    169c:	05000000 	streq	r0, [r0, #-0]
    16a0:	004b7c03 	subeq	r7, fp, r3, lsl #24
    16a4:	0adf1020 	beq	ff7c572c <firstTime.4040+0xdf7b7244>
    16a8:	1b010000 	blne	416b0 <startup-0x1ffbe950>
    16ac:	0000009e 	muleq	r0, lr, r0
    16b0:	4a3c0305 	bmi	f022cc <startup-0x1f0fdd34>
    16b4:	4f102000 	svcmi	0x00102000
    16b8:	0100000d 	tsteq	r0, sp
    16bc:	00009e1c 	andeq	r9, r0, ip, lsl lr
    16c0:	64030500 	strvs	r0, [r3], #-1280	; 0xfffffb00
    16c4:	1020004a 	eorne	r0, r0, sl, asr #32
    16c8:	00000abf 			; <UNDEFINED> instruction: 0x00000abf
    16cc:	009e1d01 	addseq	r1, lr, r1, lsl #26
    16d0:	03050000 	movweq	r0, #20480	; 0x5000
    16d4:	20004a90 	mulcs	r0, r0, sl
    16d8:	000c8d10 	andeq	r8, ip, r0, lsl sp
    16dc:	9e1e0100 	muflse	f0, f6, f0
    16e0:	05000000 	streq	r0, [r0, #-0]
    16e4:	004b6003 	subeq	r6, fp, r3
    16e8:	0b221020 	bleq	885770 <startup-0x1f77a890>
    16ec:	1f010000 	svcne	0x00010000
    16f0:	0000009e 	muleq	r0, lr, r0
    16f4:	4a400305 	bmi	1002310 <startup-0x1effdcf0>
    16f8:	97102000 	ldrls	r2, [r0, -r0]
    16fc:	0100000d 	tsteq	r0, sp
    1700:	00009e20 	andeq	r9, r0, r0, lsr #28
    1704:	dc030500 	cfstr32le	mvfx0, [r3], {-0}
    1708:	10200049 	eorne	r0, r0, r9, asr #32
    170c:	00000b03 	andeq	r0, r0, r3, lsl #22
    1710:	009e2101 	addseq	r2, lr, r1, lsl #2
    1714:	03050000 	movweq	r0, #20480	; 0x5000
    1718:	200049f0 	strdcs	r4, [r0], -r0
    171c:	000d2910 	andeq	r2, sp, r0, lsl r9
    1720:	9e220100 	suflss	f0, f2, f0
    1724:	05000000 	streq	r0, [r0, #-0]
    1728:	004a7403 	subeq	r7, sl, r3, lsl #8
    172c:	0c681020 	stcleq	0, cr1, [r8], #-128	; 0xffffff80
    1730:	23010000 	movwcs	r0, #4096	; 0x1000
    1734:	0000009e 	muleq	r0, lr, r0
    1738:	4ab80305 	bmi	fee02354 <firstTime.4040+0xdedf3e6c>
    173c:	66102000 	ldrvs	r2, [r0], -r0
    1740:	0100000d 	tsteq	r0, sp
    1744:	00006225 	andeq	r6, r0, r5, lsr #4
    1748:	58030500 	stmdapl	r3, {r8, sl}
    174c:	1020004a 	eorne	r0, r0, sl, asr #32
    1750:	00000b67 	andeq	r0, r0, r7, ror #22
    1754:	00622601 	rsbeq	r2, r2, r1, lsl #12
    1758:	03050000 	movweq	r0, #20480	; 0x5000
    175c:	20004acc 	andcs	r4, r0, ip, asr #21
    1760:	000d1c10 	andeq	r1, sp, r0, lsl ip
    1764:	62270100 	eorvs	r0, r7, #0, 2
    1768:	05000000 	streq	r0, [r0, #-0]
    176c:	004a6803 	subeq	r6, sl, r3, lsl #16
    1770:	0c981020 	ldceq	0, cr1, [r8], {32}
    1774:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    1778:	00000062 	andeq	r0, r0, r2, rrx
    177c:	4b640305 	blmi	1902398 <startup-0x1e6fdc68>
    1780:	59102000 	ldmdbpl	r0, {sp}
    1784:	0100000a 	tsteq	r0, sl
    1788:	00006229 	andeq	r6, r0, r9, lsr #4
    178c:	dc030500 	cfstr32le	mvfx0, [r3], {-0}
    1790:	1020004a 	eorne	r0, r0, sl, asr #32
    1794:	00000b4b 	andeq	r0, r0, fp, asr #22
    1798:	00622a01 	rsbeq	r2, r2, r1, lsl #20
    179c:	03050000 	movweq	r0, #20480	; 0x5000
    17a0:	20004a84 	andcs	r4, r0, r4, lsl #21
    17a4:	000d7410 	andeq	r7, sp, r0, lsl r4
    17a8:	622b0100 	eorvs	r0, fp, #0, 2
    17ac:	05000000 	streq	r0, [r0, #-0]
    17b0:	004abc03 	subeq	fp, sl, r3, lsl #24
    17b4:	0c081020 	stceq	0, cr1, [r8], {32}
    17b8:	2c010000 	stccs	0, cr0, [r1], {-0}
    17bc:	00000062 	andeq	r0, r0, r2, rrx
    17c0:	4b000305 	blmi	23dc <startup-0x1fffdc24>
    17c4:	40102000 	andsmi	r2, r0, r0
    17c8:	0100000c 	tsteq	r0, ip
    17cc:	0000622d 	andeq	r6, r0, sp, lsr #4
    17d0:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
    17d4:	1020004b 	eorne	r0, r0, fp, asr #32
    17d8:	00000af4 	strdeq	r0, [r0], -r4
    17dc:	00622e01 	rsbeq	r2, r2, r1, lsl #28
    17e0:	03050000 	movweq	r0, #20480	; 0x5000
    17e4:	200049f4 	strdcs	r4, [r0], -r4	; <UNPREDICTABLE>
    17e8:	000c3110 	andeq	r3, ip, r0, lsl r1
    17ec:	622f0100 	eorvs	r0, pc, #0, 2
    17f0:	05000000 	streq	r0, [r0, #-0]
    17f4:	004af403 	subeq	pc, sl, r3, lsl #8
    17f8:	0b591020 	bleq	1645880 <startup-0x1e9ba780>
    17fc:	30010000 	andcc	r0, r1, r0
    1800:	00000062 	andeq	r0, r0, r2, rrx
    1804:	4b700305 	blmi	1c02420 <startup-0x1e3fdbe0>
    1808:	7e102000 	cdpvc	0, 1, cr2, cr0, cr0, {0}
    180c:	0100000c 	tsteq	r0, ip
    1810:	00006231 	andeq	r6, r0, r1, lsr r2
    1814:	a0030500 	andge	r0, r3, r0, lsl #10
    1818:	1020004a 	eorne	r0, r0, sl, asr #32
    181c:	00000a95 	muleq	r0, r5, sl
    1820:	00623201 	rsbeq	r3, r2, r1, lsl #4
    1824:	03050000 	movweq	r0, #20480	; 0x5000
    1828:	20004a78 	andcs	r4, r0, r8, ror sl
    182c:	000b7510 	andeq	r7, fp, r0, lsl r5
    1830:	62330100 	eorsvs	r0, r3, #0, 2
    1834:	05000000 	streq	r0, [r0, #-0]
    1838:	004a9403 	subeq	r9, sl, r3, lsl #8
    183c:	0d041020 	stceq	0, cr1, [r4, #-128]	; 0xffffff80
    1840:	36010000 	strcc	r0, [r1], -r0
    1844:	0000014c 	andeq	r0, r0, ip, asr #2
    1848:	4a0c0305 	bmi	302464 <startup-0x1fcfdb9c>
    184c:	44102000 	ldrmi	r2, [r0], #-0
    1850:	0100000d 	tsteq	r0, sp
    1854:	0000a437 	andeq	sl, r0, r7, lsr r4
    1858:	30030500 	andcc	r0, r3, r0, lsl #10
    185c:	1020004a 	eorne	r0, r0, sl, asr #32
    1860:	00000dcb 	andeq	r0, r0, fp, asr #27
    1864:	00a43801 	adceq	r3, r4, r1, lsl #16
    1868:	03050000 	movweq	r0, #20480	; 0x5000
    186c:	20004a00 	andcs	r4, r0, r0, lsl #20
    1870:	000bdb10 	andeq	sp, fp, r0, lsl fp
    1874:	a4390100 	ldrtge	r0, [r9], #-256	; 0xffffff00
    1878:	05000000 	streq	r0, [r0, #-0]
    187c:	004ae803 	subeq	lr, sl, r3, lsl #16
    1880:	0a791020 	beq	1e45908 <startup-0x1e1ba6f8>
    1884:	3a010000 	bcc	4188c <startup-0x1ffbe774>
    1888:	000000a4 	andeq	r0, r0, r4, lsr #1
    188c:	4a4c0305 	bmi	13024a8 <startup-0x1ecfdb58>
    1890:	a2102000 	andsge	r2, r0, #0
    1894:	0100000d 	tsteq	r0, sp
    1898:	0000a43b 	andeq	sl, r0, fp, lsr r4
    189c:	ac030500 	cfstr32ge	mvfx0, [r3], {-0}
    18a0:	1020004a 	eorne	r0, r0, sl, asr #32
    18a4:	00000bae 	andeq	r0, r0, lr, lsr #23
    18a8:	00a43c01 	adceq	r3, r4, r1, lsl #24
    18ac:	03050000 	movweq	r0, #20480	; 0x5000
    18b0:	200049e4 	andcs	r4, r0, r4, ror #19
    18b4:	0000a40b 	andeq	sl, r0, fp, lsl #8
    18b8:	00051900 	andeq	r1, r5, r0, lsl #18
    18bc:	018e0e00 	orreq	r0, lr, r0, lsl #28
    18c0:	00050000 	andeq	r0, r5, r0
    18c4:	000c7310 	andeq	r7, ip, r0, lsl r3
    18c8:	093f0100 	ldmdbeq	pc!, {r8}	; <UNPREDICTABLE>
    18cc:	05000005 	streq	r0, [r0, #-5]
    18d0:	004b1803 	subeq	r1, fp, r3, lsl #16
    18d4:	0cfa1120 	ldfeqe	f1, [sl], #128	; 0x80
    18d8:	76010000 	strvc	r0, [r1], -r0
    18dc:	20001dc4 	andcs	r1, r0, r4, asr #27
    18e0:	00000158 	andeq	r0, r0, r8, asr r1
    18e4:	055f9c01 	ldrbeq	r9, [pc, #-3073]	; ceb <startup-0x1ffff315>
    18e8:	04120000 	ldreq	r0, [r2], #-0
    18ec:	0100000d 	tsteq	r0, sp
    18f0:	00016276 	andeq	r6, r1, r6, ror r2
    18f4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    18f8:	0008ee0f 	andeq	lr, r8, pc, lsl #28
    18fc:	2e770100 	rpwcss	f0, f7, f0
    1900:	05000001 	streq	r0, [r0, #-1]
    1904:	008c8403 	addeq	r8, ip, r3, lsl #8
    1908:	8e130020 	cdphi	0, 1, cr0, cr3, cr0, {1}
    190c:	01000004 	tsteq	r0, r4
    1910:	001bb840 	andseq	fp, fp, r0, asr #16
    1914:	00020c20 	andeq	r0, r2, r0, lsr #24
    1918:	0f9c0100 	svceq	0x009c0100
    191c:	00000d83 	andeq	r0, r0, r3, lsl #27
    1920:	009e4201 	addseq	r4, lr, r1, lsl #4
    1924:	91020000 	mrsls	r0, (UNDEF: 2)
    1928:	0d8d0f74 	stceq	15, cr0, [sp, #464]	; 0x1d0
    192c:	45010000 	strmi	r0, [r1, #-0]
    1930:	0000009e 	muleq	r0, lr, r0
    1934:	0f709102 	svceq	0x00709102
    1938:	00000b83 	andeq	r0, r0, r3, lsl #23
    193c:	009e4801 	addseq	r4, lr, r1, lsl #16
    1940:	91020000 	mrsls	r0, (UNDEF: 2)
    1944:	0aa40f6c 	beq	fe9056fc <firstTime.4040+0xde8f7214>
    1948:	4c010000 	stcmi	0, cr0, [r1], {-0}
    194c:	0000009e 	muleq	r0, lr, r0
    1950:	0f689102 	svceq	0x00689102
    1954:	00000dad 	andeq	r0, r0, sp, lsr #27
    1958:	009e4f01 	addseq	r4, lr, r1, lsl #30
    195c:	91020000 	mrsls	r0, (UNDEF: 2)
    1960:	0b410f64 	bleq	10456f8 <startup-0x1efba908>
    1964:	52010000 	andpl	r0, r1, #0
    1968:	0000009e 	muleq	r0, lr, r0
    196c:	0f609102 	svceq	0x00609102
    1970:	00000d59 	andeq	r0, r0, r9, asr sp
    1974:	009e5701 	addseq	r5, lr, r1, lsl #14
    1978:	91020000 	mrsls	r0, (UNDEF: 2)
    197c:	0db70f5c 	ldceq	15, cr0, [r7, #368]!	; 0x170
    1980:	5a010000 	bpl	41988 <startup-0x1ffbe678>
    1984:	0000009e 	muleq	r0, lr, r0
    1988:	0f589102 	svceq	0x00589102
    198c:	00000dc1 	andeq	r0, r0, r1, asr #27
    1990:	009e5d01 	addseq	r5, lr, r1, lsl #26
    1994:	91020000 	mrsls	r0, (UNDEF: 2)
    1998:	0aca0f54 	beq	ff2856f0 <firstTime.4040+0xdf277208>
    199c:	61010000 	mrsvs	r0, (UNDEF: 1)
    19a0:	0000009e 	muleq	r0, lr, r0
    19a4:	0f509102 	svceq	0x00509102
    19a8:	00000b0e 	andeq	r0, r0, lr, lsl #22
    19ac:	009e6401 	addseq	r6, lr, r1, lsl #8
    19b0:	91020000 	mrsls	r0, (UNDEF: 2)
    19b4:	0b180f4c 	bleq	6056ec <startup-0x1f9fa914>
    19b8:	67010000 	strvs	r0, [r1, -r0]
    19bc:	0000009e 	muleq	r0, lr, r0
    19c0:	0f489102 	svceq	0x00489102
    19c4:	00000dd6 	ldrdeq	r0, [r0], -r6
    19c8:	009e6b01 	addseq	r6, lr, r1, lsl #22
    19cc:	91020000 	mrsls	r0, (UNDEF: 2)
    19d0:	0c5e0f44 	mrrceq	15, 4, r0, lr, cr4
    19d4:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    19d8:	0000009e 	muleq	r0, lr, r0
    19dc:	0f409102 	svceq	0x00409102
    19e0:	00000b37 	andeq	r0, r0, r7, lsr fp
    19e4:	009e7101 	addseq	r7, lr, r1, lsl #2
    19e8:	91030000 	mrsls	r0, (UNDEF: 3)
    19ec:	00007fbc 			; <UNDEFINED> instruction: 0x00007fbc
    19f0:	00000498 	muleq	r0, r8, r4
    19f4:	05520004 	ldrbeq	r0, [r2, #-4]
    19f8:	01040000 	mrseq	r0, (UNDEF: 4)
    19fc:	0000008f 	andeq	r0, r0, pc, lsl #1
    1a00:	000fa40c 	andeq	sl, pc, ip, lsl #8
    1a04:	001f1c00 	andseq	r1, pc, r0, lsl #24
    1a08:	00023820 	andeq	r3, r2, r0, lsr #16
    1a0c:	00088300 	andeq	r8, r8, r0, lsl #6
    1a10:	020c0200 	andeq	r0, ip, #0, 4
    1a14:	00004e05 	andeq	r4, r0, r5, lsl #28
    1a18:	034b0300 	movteq	r0, #45824	; 0xb300
    1a1c:	07020000 	streq	r0, [r2, -r0]
    1a20:	0000004e 	andeq	r0, r0, lr, asr #32
    1a24:	06fe0300 	ldrbteq	r0, [lr], r0, lsl #6
    1a28:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1a2c:	0000004e 	andeq	r0, r0, lr, asr #32
    1a30:	18fd0304 	ldmne	sp!, {r2, r8, r9}^
    1a34:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    1a38:	00000055 	andeq	r0, r0, r5, asr r0
    1a3c:	04040008 	streq	r0, [r4], #-8
    1a40:	00037907 	andeq	r7, r3, r7, lsl #18
    1a44:	5b040500 	blpl	102e4c <startup-0x1fefd1b4>
    1a48:	04000000 	streq	r0, [r0], #-0
    1a4c:	04b80801 	ldrteq	r0, [r8], #2049	; 0x801
    1a50:	4f060000 	svcmi	0x00060000
    1a54:	0200001a 	andeq	r0, r0, #26
    1a58:	0000210a 	andeq	r2, r0, sl, lsl #2
    1a5c:	00240700 	eoreq	r0, r4, r0, lsl #14
    1a60:	030c0000 	movweq	r0, #49152	; 0xc000
    1a64:	00009e06 	andeq	r9, r0, r6, lsl #28
    1a68:	05ae0300 	streq	r0, [lr, #768]!	; 0x300
    1a6c:	07030000 	streq	r0, [r3, -r0]
    1a70:	0000009e 	muleq	r0, lr, r0
    1a74:	002b0300 	eoreq	r0, fp, r0, lsl #6
    1a78:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1a7c:	0000009e 	muleq	r0, lr, r0
    1a80:	00200304 	eoreq	r0, r0, r4, lsl #6
    1a84:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    1a88:	0000009e 	muleq	r0, lr, r0
    1a8c:	04050008 	streq	r0, [r5], #-8
    1a90:	00000062 	andeq	r0, r0, r2, rrx
    1a94:	00160d06 	andseq	r0, r6, r6, lsl #26
    1a98:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
    1a9c:	07000000 	streq	r0, [r0, -r0]
    1aa0:	000006c3 	andeq	r0, r0, r3, asr #13
    1aa4:	28060424 	stmdacs	r6, {r2, r5, sl}
    1aa8:	03000001 	movweq	r0, #1
    1aac:	00000446 	andeq	r0, r0, r6, asr #8
    1ab0:	01280704 			; <UNDEFINED> instruction: 0x01280704
    1ab4:	03000000 	movweq	r0, #0
    1ab8:	000006cf 	andeq	r0, r0, pc, asr #13
    1abc:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
    1ac0:	03040000 	movweq	r0, #16384	; 0x4000
    1ac4:	0000061f 	andeq	r0, r0, pc, lsl r6
    1ac8:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
    1acc:	03080000 	movweq	r0, #32768	; 0x8000
    1ad0:	0000064b 	andeq	r0, r0, fp, asr #12
    1ad4:	01460c04 	cmpeq	r6, r4, lsl #24
    1ad8:	030c0000 	movweq	r0, #49152	; 0xc000
    1adc:	00000332 	andeq	r0, r0, r2, lsr r3
    1ae0:	01460d04 	cmpeq	r6, r4, lsl #26
    1ae4:	03100000 	tsteq	r0, #0
    1ae8:	00000458 	andeq	r0, r0, r8, asr r4
    1aec:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
    1af0:	03140000 	tsteq	r4, #0
    1af4:	00000060 	andeq	r0, r0, r0, rrx
    1af8:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
    1afc:	03180000 	tsteq	r8, #0
    1b00:	000003c9 	andeq	r0, r0, r9, asr #7
    1b04:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
    1b08:	031c0000 	tsteq	ip, #0
    1b0c:	000003d9 	ldrdeq	r0, [r0], -r9
    1b10:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
    1b14:	00200000 	eoreq	r0, r0, r0
    1b18:	00a40405 	adceq	r0, r4, r5, lsl #8
    1b1c:	04080000 	streq	r0, [r8], #-0
    1b20:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1b24:	01400900 	cmpeq	r0, r0, lsl #18
    1b28:	400a0000 	andmi	r0, sl, r0
    1b2c:	00000001 	andeq	r0, r0, r1
    1b30:	00af0405 	adceq	r0, pc, r5, lsl #8
    1b34:	04050000 	streq	r0, [r5], #-0
    1b38:	00000135 	andeq	r0, r0, r5, lsr r1
    1b3c:	0006c406 	andeq	ip, r6, r6, lsl #8
    1b40:	af150400 	svcge	0x00150400
    1b44:	0b000000 	bleq	1b4c <startup-0x1fffe4b4>
    1b48:	00000162 	andeq	r0, r0, r2, ror #2
    1b4c:	00000162 	andeq	r0, r0, r2, ror #2
    1b50:	0405000c 	streq	r0, [r5], #-12
    1b54:	0000014c 	andeq	r0, r0, ip, asr #2
    1b58:	00053b0d 	andeq	r3, r5, sp, lsl #22
    1b5c:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
    1b60:	0d000001 	stceq	0, cr0, [r0, #-4]
    1b64:	00000414 	andeq	r0, r0, r4, lsl r4
    1b68:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
    1b6c:	5b0b0000 	blpl	2c1b74 <startup-0x1fd3e48c>
    1b70:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    1b74:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    1b78:	0000018e 	andeq	r0, r0, lr, lsl #3
    1b7c:	04040035 	streq	r0, [r4], #-53	; 0xffffffcb
    1b80:	0003f607 	andeq	pc, r3, r7, lsl #12
    1b84:	0e200f00 	cdpeq	15, 2, cr0, cr0, cr0, {0}
    1b88:	03050000 	movweq	r0, #20480	; 0x5000
    1b8c:	0000017e 	andeq	r0, r0, lr, ror r1
    1b90:	8c880305 	stchi	3, cr0, [r8], {5}
    1b94:	d20f2000 	andle	r2, pc, #0
    1b98:	0600000f 	streq	r0, [r0], -pc
    1b9c:	00017e03 	andeq	r7, r1, r3, lsl #28
    1ba0:	c0030500 	andgt	r0, r3, r0, lsl #10
    1ba4:	0f20008c 	svceq	0x0020008c
    1ba8:	00000f2a 	andeq	r0, r0, sl, lsr #30
    1bac:	017e0307 	cmneq	lr, r7, lsl #6
    1bb0:	03050000 	movweq	r0, #20480	; 0x5000
    1bb4:	20008cf8 	strdcs	r8, [r0], -r8	; <UNPREDICTABLE>
    1bb8:	000ec30f 	andeq	ip, lr, pc, lsl #6
    1bbc:	7e030800 	cdpvc	8, 0, cr0, cr3, cr0, {0}
    1bc0:	05000001 	streq	r0, [r0, #-1]
    1bc4:	008d3003 	addeq	r3, sp, r3
    1bc8:	0f3c0f20 	svceq	0x003c0f20
    1bcc:	03090000 	movweq	r0, #36864	; 0x9000
    1bd0:	0000017e 	andeq	r0, r0, lr, ror r1
    1bd4:	8d680305 	stclhi	3, cr0, [r8, #-20]!	; 0xffffffec
    1bd8:	6e0f2000 	cdpvs	0, 0, cr2, cr15, cr0, {0}
    1bdc:	0a00000e 	beq	1c1c <startup-0x1fffe3e4>
    1be0:	00017e03 	andeq	r7, r1, r3, lsl #28
    1be4:	a0030500 	andge	r0, r3, r0, lsl #10
    1be8:	0f20008d 	svceq	0x0020008d
    1bec:	00000fe3 	andeq	r0, r0, r3, ror #31
    1bf0:	017e030b 	cmneq	lr, fp, lsl #6
    1bf4:	03050000 	movweq	r0, #20480	; 0x5000
    1bf8:	20008dd8 	ldrdcs	r8, [r0], -r8	; <UNPREDICTABLE>
    1bfc:	000e980f 	andeq	r9, lr, pc, lsl #16
    1c00:	7e030c00 	cdpvc	12, 0, cr0, cr3, cr0, {0}
    1c04:	05000001 	streq	r0, [r0, #-1]
    1c08:	008e1003 	addeq	r1, lr, r3
    1c0c:	0ed50f20 	cdpeq	15, 13, cr0, cr5, cr0, {1}
    1c10:	030d0000 	movweq	r0, #53248	; 0xd000
    1c14:	0000017e 	andeq	r0, r0, lr, ror r1
    1c18:	8e480305 	cdphi	3, 4, cr0, cr8, cr5, {0}
    1c1c:	71102000 	tstvc	r0, r0
    1c20:	0100000f 	tsteq	r0, pc
    1c24:	00009e0e 	andeq	r9, r0, lr, lsl #28
    1c28:	54030500 	strpl	r0, [r3], #-1280	; 0xfffffb00
    1c2c:	1020004c 	eorne	r0, r0, ip, asr #32
    1c30:	00000dfd 	strdeq	r0, [r0], -sp
    1c34:	009e0f01 	addseq	r0, lr, r1, lsl #30
    1c38:	03050000 	movweq	r0, #20480	; 0x5000
    1c3c:	20004b80 	andcs	r4, r0, r0, lsl #23
    1c40:	000e5210 	andeq	r5, lr, r0, lsl r2
    1c44:	9e100100 	muflss	f0, f0, f0
    1c48:	05000000 	streq	r0, [r0, #-0]
    1c4c:	004c8003 	subeq	r8, ip, r3
    1c50:	0df11020 	ldcleq	0, cr1, [r1, #128]!	; 0x80
    1c54:	11010000 	mrsne	r0, (UNDEF: 1)
    1c58:	0000009e 	muleq	r0, lr, r0
    1c5c:	4c900305 	ldcmi	3, cr0, [r0], {5}
    1c60:	f2102000 	vhadd.s16	d2, d0, d0
    1c64:	0100000e 	tsteq	r0, lr
    1c68:	00009e12 	andeq	r9, r0, r2, lsl lr
    1c6c:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
    1c70:	1020004b 	eorne	r0, r0, fp, asr #32
    1c74:	00000f59 	andeq	r0, r0, r9, asr pc
    1c78:	009e1301 	addseq	r1, lr, r1, lsl #6
    1c7c:	03050000 	movweq	r0, #20480	; 0x5000
    1c80:	20004b84 	andcs	r4, r0, r4, lsl #23
    1c84:	000e8c10 	andeq	r8, lr, r0, lsl ip
    1c88:	9e140100 	muflss	f0, f4, f0
    1c8c:	05000000 	streq	r0, [r0, #-0]
    1c90:	004c1c03 	subeq	r1, ip, r3, lsl #24
    1c94:	0ee71020 	cdpeq	0, 14, cr1, cr7, cr0, {1}
    1c98:	15010000 	strne	r0, [r1, #-0]
    1c9c:	0000009e 	muleq	r0, lr, r0
    1ca0:	4c580305 	mrrcmi	3, 0, r0, r8, cr5
    1ca4:	7d102000 	ldcvc	0, cr2, [r0, #-0]
    1ca8:	0100000f 	tsteq	r0, pc
    1cac:	00009e16 	andeq	r9, r0, r6, lsl lr
    1cb0:	44030500 	strmi	r0, [r3], #-1280	; 0xfffffb00
    1cb4:	1020004c 	eorne	r0, r0, ip, asr #32
    1cb8:	00000eb4 			; <UNDEFINED> instruction: 0x00000eb4
    1cbc:	00621801 	rsbeq	r1, r2, r1, lsl #16
    1cc0:	03050000 	movweq	r0, #20480	; 0x5000
    1cc4:	20004bd0 	ldrdcs	r4, [r0], -r0
    1cc8:	000e0810 	andeq	r0, lr, r0, lsl r8
    1ccc:	62190100 	andsvs	r0, r9, #0, 2
    1cd0:	05000000 	streq	r0, [r0, #-0]
    1cd4:	004c6803 	subeq	r6, ip, r3, lsl #16
    1cd8:	0efd1020 	cdpeq	0, 15, cr1, cr13, cr0, {1}
    1cdc:	1a010000 	bne	41ce4 <startup-0x1ffbe31c>
    1ce0:	00000062 	andeq	r0, r0, r2, rrx
    1ce4:	4bf80305 	blmi	ffe02900 <firstTime.4040+0xdfdf4418>
    1ce8:	5e102000 	cdppl	0, 1, cr2, cr0, cr0, {0}
    1cec:	0100000e 	tsteq	r0, lr
    1cf0:	0000621b 	andeq	r6, r0, fp, lsl r2
    1cf4:	c4030500 	strgt	r0, [r3], #-1280	; 0xfffffb00
    1cf8:	1020004b 	eorne	r0, r0, fp, asr #32
    1cfc:	00000e42 	andeq	r0, r0, r2, asr #28
    1d00:	00621c01 	rsbeq	r1, r2, r1, lsl #24
    1d04:	03050000 	movweq	r0, #20480	; 0x5000
    1d08:	20004c74 	andcs	r4, r0, r4, ror ip
    1d0c:	000f0b10 	andeq	r0, pc, r0, lsl fp	; <UNPREDICTABLE>
    1d10:	621d0100 	andsvs	r0, sp, #0, 2
    1d14:	05000000 	streq	r0, [r0, #-0]
    1d18:	004c1003 	subeq	r1, ip, r3
    1d1c:	0f1a1020 	svceq	0x001a1020
    1d20:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    1d24:	00000062 	andeq	r0, r0, r2, rrx
    1d28:	4c040305 	stcmi	3, cr0, [r4], {5}
    1d2c:	32102000 	andscc	r2, r0, #0
    1d30:	0100000e 	tsteq	r0, lr
    1d34:	0000621f 	andeq	r6, r0, pc, lsl r2
    1d38:	dc030500 	cfstr32le	mvfx0, [r3], {-0}
    1d3c:	1020004b 	eorne	r0, r0, fp, asr #32
    1d40:	00000f95 	muleq	r0, r5, pc	; <UNPREDICTABLE>
    1d44:	00622001 	rsbeq	r2, r2, r1
    1d48:	03050000 	movweq	r0, #20480	; 0x5000
    1d4c:	20004c48 	andcs	r4, r0, r8, asr #24
    1d50:	000e1710 	andeq	r1, lr, r0, lsl r7
    1d54:	4c230100 	stfmis	f0, [r3], #-0
    1d58:	05000001 	streq	r0, [r0, #-1]
    1d5c:	004c2003 	subeq	r2, ip, r3
    1d60:	0f651020 	svceq	0x00651020
    1d64:	24010000 	strcs	r0, [r1], #-0
    1d68:	000000a4 	andeq	r0, r0, r4, lsr #1
    1d6c:	4c5c0305 	mrrcmi	3, 0, r0, ip, cr5
    1d70:	f5102000 			; <UNDEFINED> instruction: 0xf5102000
    1d74:	0100000f 	tsteq	r0, pc
    1d78:	0000a425 	andeq	sl, r0, r5, lsr #8
    1d7c:	b8030500 	stmdalt	r3, {r8, sl}
    1d80:	1020004b 	eorne	r0, r0, fp, asr #32
    1d84:	00000e80 	andeq	r0, r0, r0, lsl #29
    1d88:	00a42601 	adceq	r2, r4, r1, lsl #12
    1d8c:	03050000 	movweq	r0, #20480	; 0x5000
    1d90:	20004c84 	andcs	r4, r0, r4, lsl #25
    1d94:	000f4d10 	andeq	r4, pc, r0, lsl sp	; <UNPREDICTABLE>
    1d98:	a4270100 	strtge	r0, [r7], #-256	; 0xffffff00
    1d9c:	05000000 	streq	r0, [r0, #-0]
    1da0:	004be803 	subeq	lr, fp, r3, lsl #16
    1da4:	00a40b20 	adceq	r0, r4, r0, lsr #22
    1da8:	03c50000 	biceq	r0, r5, #0
    1dac:	8e0e0000 	cdphi	0, 0, cr0, cr14, cr0, {0}
    1db0:	03000001 	movweq	r0, #1
    1db4:	0f891000 	svceq	0x00891000
    1db8:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    1dbc:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
    1dc0:	4b880305 	blmi	fe2029dc <firstTime.4040+0xde1f44f4>
    1dc4:	a9112000 	ldmdbge	r1, {sp}
    1dc8:	0100000e 	tsteq	r0, lr
    1dcc:	00205c4c 	eoreq	r5, r0, ip, asr #24
    1dd0:	0000f820 	andeq	pc, r0, r0, lsr #16
    1dd4:	0b9c0100 	bleq	fe7021dc <firstTime.4040+0xde6f3cf4>
    1dd8:	12000004 	andne	r0, r0, #4
    1ddc:	00000e17 	andeq	r0, r0, r7, lsl lr
    1de0:	01624c01 	cmneq	r2, r1, lsl #24
    1de4:	91020000 	mrsls	r0, (UNDEF: 2)
    1de8:	08ee0f6c 	stmiaeq	lr!, {r2, r3, r5, r6, r8, r9, sl, fp}^
    1dec:	4d010000 	stcmi	0, cr0, [r1, #-0]
    1df0:	0000012e 	andeq	r0, r0, lr, lsr #2
    1df4:	8e800305 	cdphi	3, 8, cr0, cr0, cr5, {0}
    1df8:	13002000 	movwne	r2, #0
    1dfc:	0000048e 	andeq	r0, r0, lr, lsl #9
    1e00:	1f1c2901 	svcne	0x001c2901
    1e04:	01402000 	mrseq	r2, (UNDEF: 64)
    1e08:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e0c:	000d830f 	andeq	r8, sp, pc, lsl #6
    1e10:	9e2b0100 	suflse	f0, f3, f0
    1e14:	02000000 	andeq	r0, r0, #0
    1e18:	8d0f7491 	cfstrshi	mvf7, [pc, #-580]	; 1bdc <startup-0x1fffe424>
    1e1c:	0100000d 	tsteq	r0, sp
    1e20:	00009e2e 	andeq	r9, r0, lr, lsr #28
    1e24:	70910200 	addsvc	r0, r1, r0, lsl #4
    1e28:	000b830f 	andeq	r8, fp, pc, lsl #6
    1e2c:	9e310100 	rsflss	f0, f1, f0
    1e30:	02000000 	andeq	r0, r0, #0
    1e34:	a40f6c91 	strge	r6, [pc], #-3217	; 1e3c <startup-0x1fffe1c4>
    1e38:	0100000a 	tsteq	r0, sl
    1e3c:	00009e35 	andeq	r9, r0, r5, lsr lr
    1e40:	68910200 	ldmvs	r1, {r9}
    1e44:	000dad0f 	andeq	sl, sp, pc, lsl #26
    1e48:	9e380100 	rsflse	f0, f0, f0
    1e4c:	02000000 	andeq	r0, r0, #0
    1e50:	410f6491 			; <UNDEFINED> instruction: 0x410f6491
    1e54:	0100000b 	tsteq	r0, fp
    1e58:	00009e3b 	andeq	r9, r0, fp, lsr lr
    1e5c:	60910200 	addsvs	r0, r1, r0, lsl #4
    1e60:	000d590f 	andeq	r5, sp, pc, lsl #18
    1e64:	9e400100 	dvflss	f0, f0, f0
    1e68:	02000000 	andeq	r0, r0, #0
    1e6c:	b70f5c91 			; <UNDEFINED> instruction: 0xb70f5c91
    1e70:	0100000d 	tsteq	r0, sp
    1e74:	00009e43 	andeq	r9, r0, r3, asr #28
    1e78:	58910200 	ldmpl	r1, {r9}
    1e7c:	000dc10f 	andeq	ip, sp, pc, lsl #2
    1e80:	9e460100 	dvflss	f0, f6, f0
    1e84:	02000000 	andeq	r0, r0, #0
    1e88:	00005491 	muleq	r0, r1, r4
    1e8c:	00000546 	andeq	r0, r0, r6, asr #10
    1e90:	06520004 	ldrbeq	r0, [r2], -r4
    1e94:	01040000 	mrseq	r0, (UNDEF: 4)
    1e98:	0000008f 	andeq	r0, r0, pc, lsl #1
    1e9c:	0010e80c 	andseq	lr, r0, ip, lsl #16
    1ea0:	00215400 	eoreq	r5, r1, r0, lsl #8
    1ea4:	00037020 	andeq	r7, r3, r0, lsr #32
    1ea8:	0009e800 	andeq	lr, r9, r0, lsl #16
    1eac:	020c0200 	andeq	r0, ip, #0, 4
    1eb0:	00004e05 	andeq	r4, r0, r5, lsl #28
    1eb4:	034b0300 	movteq	r0, #45824	; 0xb300
    1eb8:	07020000 	streq	r0, [r2, -r0]
    1ebc:	0000004e 	andeq	r0, r0, lr, asr #32
    1ec0:	06fe0300 	ldrbteq	r0, [lr], r0, lsl #6
    1ec4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1ec8:	0000004e 	andeq	r0, r0, lr, asr #32
    1ecc:	18fd0304 	ldmne	sp!, {r2, r8, r9}^
    1ed0:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    1ed4:	00000055 	andeq	r0, r0, r5, asr r0
    1ed8:	04040008 	streq	r0, [r4], #-8
    1edc:	00037907 	andeq	r7, r3, r7, lsl #18
    1ee0:	5b040500 	blpl	1032e8 <startup-0x1fefcd18>
    1ee4:	04000000 	streq	r0, [r0], #-0
    1ee8:	04b80801 	ldrteq	r0, [r8], #2049	; 0x801
    1eec:	4f060000 	svcmi	0x00060000
    1ef0:	0200001a 	andeq	r0, r0, #26
    1ef4:	0000210a 	andeq	r2, r0, sl, lsl #2
    1ef8:	00240700 	eoreq	r0, r4, r0, lsl #14
    1efc:	030c0000 	movweq	r0, #49152	; 0xc000
    1f00:	00009e06 	andeq	r9, r0, r6, lsl #28
    1f04:	05ae0300 	streq	r0, [lr, #768]!	; 0x300
    1f08:	07030000 	streq	r0, [r3, -r0]
    1f0c:	0000009e 	muleq	r0, lr, r0
    1f10:	002b0300 	eoreq	r0, fp, r0, lsl #6
    1f14:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1f18:	0000009e 	muleq	r0, lr, r0
    1f1c:	00200304 	eoreq	r0, r0, r4, lsl #6
    1f20:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    1f24:	0000009e 	muleq	r0, lr, r0
    1f28:	04050008 	streq	r0, [r5], #-8
    1f2c:	00000062 	andeq	r0, r0, r2, rrx
    1f30:	00160d06 	andseq	r0, r6, r6, lsl #26
    1f34:	6d0a0300 	stcvs	3, cr0, [sl, #-0]
    1f38:	07000000 	streq	r0, [r0, -r0]
    1f3c:	000006c3 	andeq	r0, r0, r3, asr #13
    1f40:	28060424 	stmdacs	r6, {r2, r5, sl}
    1f44:	03000001 	movweq	r0, #1
    1f48:	00000446 	andeq	r0, r0, r6, asr #8
    1f4c:	01280704 			; <UNDEFINED> instruction: 0x01280704
    1f50:	03000000 	movweq	r0, #0
    1f54:	000006cf 	andeq	r0, r0, pc, asr #13
    1f58:	012e0804 			; <UNDEFINED> instruction: 0x012e0804
    1f5c:	03040000 	movweq	r0, #16384	; 0x4000
    1f60:	0000061f 	andeq	r0, r0, pc, lsl r6
    1f64:	012e0904 			; <UNDEFINED> instruction: 0x012e0904
    1f68:	03080000 	movweq	r0, #32768	; 0x8000
    1f6c:	0000064b 	andeq	r0, r0, fp, asr #12
    1f70:	01460c04 	cmpeq	r6, r4, lsl #24
    1f74:	030c0000 	movweq	r0, #49152	; 0xc000
    1f78:	00000332 	andeq	r0, r0, r2, lsr r3
    1f7c:	01460d04 	cmpeq	r6, r4, lsl #26
    1f80:	03100000 	tsteq	r0, #0
    1f84:	00000458 	andeq	r0, r0, r8, asr r4
    1f88:	012e1004 			; <UNDEFINED> instruction: 0x012e1004
    1f8c:	03140000 	tsteq	r4, #0
    1f90:	00000060 	andeq	r0, r0, r0, rrx
    1f94:	012e1104 			; <UNDEFINED> instruction: 0x012e1104
    1f98:	03180000 	tsteq	r8, #0
    1f9c:	000003c9 	andeq	r0, r0, r9, asr #7
    1fa0:	012e1204 			; <UNDEFINED> instruction: 0x012e1204
    1fa4:	031c0000 	tsteq	ip, #0
    1fa8:	000003d9 	ldrdeq	r0, [r0], -r9
    1fac:	012e1304 			; <UNDEFINED> instruction: 0x012e1304
    1fb0:	00200000 	eoreq	r0, r0, r0
    1fb4:	00a40405 	adceq	r0, r4, r5, lsl #8
    1fb8:	04080000 	streq	r0, [r8], #-0
    1fbc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1fc0:	01400900 	cmpeq	r0, r0, lsl #18
    1fc4:	400a0000 	andmi	r0, sl, r0
    1fc8:	00000001 	andeq	r0, r0, r1
    1fcc:	00af0405 	adceq	r0, pc, r5, lsl #8
    1fd0:	04050000 	streq	r0, [r5], #-0
    1fd4:	00000135 	andeq	r0, r0, r5, lsr r1
    1fd8:	0006c406 	andeq	ip, r6, r6, lsl #8
    1fdc:	af150400 	svcge	0x00150400
    1fe0:	0b000000 	bleq	1fe8 <startup-0x1fffe018>
    1fe4:	00000162 	andeq	r0, r0, r2, ror #2
    1fe8:	00000162 	andeq	r0, r0, r2, ror #2
    1fec:	0405000c 	streq	r0, [r5], #-12
    1ff0:	0000014c 	andeq	r0, r0, ip, asr #2
    1ff4:	00053b0d 	andeq	r3, r5, sp, lsl #22
    1ff8:	571c0400 	ldrpl	r0, [ip, -r0, lsl #8]
    1ffc:	0d000001 	stceq	0, cr0, [r0, #-4]
    2000:	00000414 	andeq	r0, r0, r4, lsl r4
    2004:	012e1d04 			; <UNDEFINED> instruction: 0x012e1d04
    2008:	02040000 	andeq	r0, r4, #0
    200c:	00037307 	andeq	r7, r3, r7, lsl #6
    2010:	005b0b00 	subseq	r0, fp, r0, lsl #22
    2014:	01950000 	orrseq	r0, r5, r0
    2018:	950e0000 	strls	r0, [lr, #-0]
    201c:	35000001 	strcc	r0, [r0, #-1]
    2020:	07040400 	streq	r0, [r4, -r0, lsl #8]
    2024:	000003f6 	strdeq	r0, [r0], -r6
    2028:	000e200f 	andeq	r2, lr, pc
    202c:	85030500 	strhi	r0, [r3, #-1280]	; 0xfffffb00
    2030:	05000001 	streq	r0, [r0, #-1]
    2034:	008e8403 	addeq	r8, lr, r3, lsl #8
    2038:	0fd20f20 	svceq	0x00d20f20
    203c:	03060000 	movweq	r0, #24576	; 0x6000
    2040:	00000185 	andeq	r0, r0, r5, lsl #3
    2044:	8ebc0305 	cdphi	3, 11, cr0, cr12, cr5, {0}
    2048:	2a0f2000 	bcs	3ca050 <startup-0x1fc35fb0>
    204c:	0700000f 	streq	r0, [r0, -pc]
    2050:	00018503 	andeq	r8, r1, r3, lsl #10
    2054:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
    2058:	0f20008e 	svceq	0x0020008e
    205c:	00000ec3 	andeq	r0, r0, r3, asr #29
    2060:	01850308 	orreq	r0, r5, r8, lsl #6
    2064:	03050000 	movweq	r0, #20480	; 0x5000
    2068:	20008f2c 	andcs	r8, r0, ip, lsr #30
    206c:	000f3c0f 	andeq	r3, pc, pc, lsl #24
    2070:	85030900 	strhi	r0, [r3, #-2304]	; 0xfffff700
    2074:	05000001 	streq	r0, [r0, #-1]
    2078:	008f6403 	addeq	r6, pc, r3, lsl #8
    207c:	0e6e0f20 	cdpeq	15, 6, cr0, cr14, cr0, {1}
    2080:	030a0000 	movweq	r0, #40960	; 0xa000
    2084:	00000185 	andeq	r0, r0, r5, lsl #3
    2088:	8f9c0305 	svchi	0x009c0305
    208c:	e30f2000 	movw	r2, #61440	; 0xf000
    2090:	0b00000f 	bleq	20d4 <startup-0x1fffdf2c>
    2094:	00018503 	andeq	r8, r1, r3, lsl #10
    2098:	d4030500 	strle	r0, [r3], #-1280	; 0xfffffb00
    209c:	0f20008f 	svceq	0x0020008f
    20a0:	00000e98 	muleq	r0, r8, lr
    20a4:	0185030c 	orreq	r0, r5, ip, lsl #6
    20a8:	03050000 	movweq	r0, #20480	; 0x5000
    20ac:	2000900c 	andcs	r9, r0, ip
    20b0:	000ed50f 	andeq	sp, lr, pc, lsl #10
    20b4:	85030d00 	strhi	r0, [r3, #-3328]	; 0xfffff300
    20b8:	05000001 	streq	r0, [r0, #-1]
    20bc:	00904403 	addseq	r4, r0, r3, lsl #8
    20c0:	10871020 	addne	r1, r7, r0, lsr #32
    20c4:	12010000 	andne	r0, r1, #0
    20c8:	0000009e 	muleq	r0, lr, r0
    20cc:	4cd80305 	ldclmi	3, cr0, [r8], {5}
    20d0:	52102000 	andspl	r2, r0, #0
    20d4:	01000010 	tsteq	r0, r0, lsl r0
    20d8:	00009e13 	andeq	r9, r0, r3, lsl lr
    20dc:	70030500 	andvc	r0, r3, r0, lsl #10
    20e0:	1020004d 	eorne	r0, r0, sp, asr #32
    20e4:	00001114 	andeq	r1, r0, r4, lsl r1
    20e8:	009e1401 	addseq	r1, lr, r1, lsl #8
    20ec:	03050000 	movweq	r0, #20480	; 0x5000
    20f0:	20004d48 	andcs	r4, r0, r8, asr #26
    20f4:	0010d410 	andseq	sp, r0, r0, lsl r4
    20f8:	9e150100 	muflss	f0, f5, f0
    20fc:	05000000 	streq	r0, [r0, #-0]
    2100:	004d5403 	subeq	r5, sp, r3, lsl #8
    2104:	10491020 	subne	r1, r9, r0, lsr #32
    2108:	16010000 	strne	r0, [r1], -r0
    210c:	0000009e 	muleq	r0, lr, r0
    2110:	4cc40305 	stclmi	3, cr0, [r4], {5}
    2114:	23102000 	tstcs	r0, #0
    2118:	01000010 	tsteq	r0, r0, lsl r0
    211c:	00009e17 	andeq	r9, r0, r7, lsl lr
    2120:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
    2124:	1020004d 	eorne	r0, r0, sp, asr #32
    2128:	0000103b 	andeq	r1, r0, fp, lsr r0
    212c:	009e1801 	addseq	r1, lr, r1, lsl #16
    2130:	03050000 	movweq	r0, #20480	; 0x5000
    2134:	20004cd4 	ldrdcs	r4, [r0], -r4	; <UNPREDICTABLE>
    2138:	0010a510 	andseq	sl, r0, r0, lsl r5
    213c:	9e190100 	muflse	f0, f1, f0
    2140:	05000000 	streq	r0, [r0, #-0]
    2144:	004d8003 	subeq	r8, sp, r3
    2148:	10bc1020 	adcsne	r1, ip, r0, lsr #32
    214c:	1a010000 	bne	42154 <startup-0x1ffbdeac>
    2150:	0000009e 	muleq	r0, lr, r0
    2154:	4d500305 	ldclmi	3, cr0, [r0, #-20]	; 0xffffffec
    2158:	25102000 	ldrcs	r2, [r0, #-0]
    215c:	01000011 	tsteq	r0, r1, lsl r0
    2160:	0000621c 	andeq	r6, r0, ip, lsl r2
    2164:	64030500 	strvs	r0, [r3], #-1280	; 0xfffffb00
    2168:	1020004d 	eorne	r0, r0, sp, asr #32
    216c:	0000105b 	andeq	r1, r0, fp, asr r0
    2170:	00621d01 	rsbeq	r1, r2, r1, lsl #26
    2174:	03050000 	movweq	r0, #20480	; 0x5000
    2178:	20004cdc 	ldrdcs	r4, [r0], -ip
    217c:	00107b10 	andseq	r7, r0, r0, lsl fp
    2180:	621e0100 	andsvs	r0, lr, #0, 2
    2184:	05000000 	streq	r0, [r0, #-0]
    2188:	004d9c03 	subeq	r9, sp, r3, lsl #24
    218c:	10d01020 	sbcsne	r1, r0, r0, lsr #32
    2190:	1f010000 	svcne	0x00010000
    2194:	00000062 	andeq	r0, r0, r2, rrx
    2198:	4d240305 	stcmi	3, cr0, [r4, #-20]!	; 0xffffffec
    219c:	1f102000 	svcne	0x00102000
    21a0:	01000010 	tsteq	r0, r0, lsl r0
    21a4:	00006220 	andeq	r6, r0, r0, lsr #4
    21a8:	90030500 	andls	r0, r3, r0, lsl #10
    21ac:	1020004d 	eorne	r0, r0, sp, asr #32
    21b0:	00001045 	andeq	r1, r0, r5, asr #32
    21b4:	00622101 	rsbeq	r2, r2, r1, lsl #2
    21b8:	03050000 	movweq	r0, #20480	; 0x5000
    21bc:	20004cc8 	andcs	r4, r0, r8, asr #25
    21c0:	00103710 	andseq	r3, r0, r0, lsl r7
    21c4:	62220100 	eorvs	r0, r2, #0, 2
    21c8:	05000000 	streq	r0, [r0, #-0]
    21cc:	004d7403 	subeq	r7, sp, r3, lsl #8
    21d0:	10b81020 	adcsne	r1, r8, r0, lsr #32
    21d4:	23010000 	movwcs	r0, #4096	; 0x1000
    21d8:	00000062 	andeq	r0, r0, r2, rrx
    21dc:	4ce80305 	stclmi	3, cr0, [r8], #20
    21e0:	a1102000 	tstge	r0, r0
    21e4:	01000010 	tsteq	r0, r0, lsl r0
    21e8:	00006224 	andeq	r6, r0, r4, lsr #4
    21ec:	58030500 	stmdapl	r3, {r8, sl}
    21f0:	1020004d 	eorne	r0, r0, sp, asr #32
    21f4:	0000111e 	andeq	r1, r0, lr, lsl r1
    21f8:	014c2701 	cmpeq	ip, r1, lsl #14
    21fc:	03050000 	movweq	r0, #20480	; 0x5000
    2200:	20004c94 	mulcs	r0, r4, ip
    2204:	00101510 	andseq	r1, r0, r0, lsl r5
    2208:	a4280100 	strtge	r0, [r8], #-256	; 0xffffff00
    220c:	05000000 	streq	r0, [r0, #-0]
    2210:	004d3c03 	subeq	r3, sp, r3, lsl #24
    2214:	10de1020 	sbcsne	r1, lr, r0, lsr #32
    2218:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    221c:	000000a4 	andeq	r0, r0, r4, lsr #1
    2220:	4cb80305 	ldcmi	3, cr0, [r8], #20
    2224:	ae102000 	cdpge	0, 1, cr2, cr0, cr0, {0}
    2228:	01000010 	tsteq	r0, r0, lsl r0
    222c:	0000a42a 	andeq	sl, r0, sl, lsr #8
    2230:	30030500 	andcc	r0, r3, r0, lsl #10
    2234:	1020004d 	eorne	r0, r0, sp, asr #32
    2238:	0000100b 	andeq	r1, r0, fp
    223c:	00a42b01 	adceq	r2, r4, r1, lsl #22
    2240:	03050000 	movweq	r0, #20480	; 0x5000
    2244:	20004d84 	andcs	r4, r0, r4, lsl #27
    2248:	0000a40b 	andeq	sl, r0, fp, lsl #8
    224c:	0003cc00 	andeq	ip, r3, r0, lsl #24
    2250:	01950e00 	orrseq	r0, r5, r0, lsl #28
    2254:	00030000 	andeq	r0, r3, r0
    2258:	00106810 	andseq	r6, r0, r0, lsl r8
    225c:	bc2c0100 	stflts	f0, [ip], #-0
    2260:	05000003 	streq	r0, [r0, #-3]
    2264:	004cf403 	subeq	pc, ip, r3, lsl #8
    2268:	11320f20 	teqne	r2, r0, lsr #30
    226c:	6b010000 	blvs	42274 <startup-0x1ffbdd8c>
    2270:	0000012e 	andeq	r0, r0, lr, lsr #2
    2274:	461c0305 	ldrmi	r0, [ip], -r5, lsl #6
    2278:	910f2000 	mrsls	r2, CPSR
    227c:	01000010 	tsteq	r0, r0, lsl r0
    2280:	00012e6c 	andeq	r2, r1, ip, ror #28
    2284:	20030500 	andcs	r0, r3, r0, lsl #10
    2288:	11200046 			; <UNDEFINED> instruction: 0x11200046
    228c:	000010c6 	andeq	r1, r0, r6, asr #1
    2290:	23b47401 			; <UNDEFINED> instruction: 0x23b47401
    2294:	01102000 	tsteq	r0, r0
    2298:	9c010000 	stcls	0, cr0, [r1], {-0}
    229c:	00000456 	andeq	r0, r0, r6, asr r4
    22a0:	00076712 	andeq	r6, r7, r2, lsl r7
    22a4:	62740100 	rsbsvs	r0, r4, #0, 2
    22a8:	02000001 	andeq	r0, r0, #1
    22ac:	e30f7491 	movw	r7, #62609	; 0xf491
    22b0:	01000003 	tsteq	r0, r3
    22b4:	00012e76 	andeq	r2, r1, r6, ror lr
    22b8:	24030500 	strcs	r0, [r3], #-1280	; 0xfffffb00
    22bc:	0f200046 	svceq	0x00200046
    22c0:	00001001 	andeq	r1, r0, r1
    22c4:	012e7701 			; <UNDEFINED> instruction: 0x012e7701
    22c8:	03050000 	movweq	r0, #20480	; 0x5000
    22cc:	20009080 	andcs	r9, r0, r0, lsl #1
    22d0:	00102d0f 	andseq	r2, r0, pc, lsl #26
    22d4:	2e780100 	rpwcse	f0, f0, f0
    22d8:	05000001 	streq	r0, [r0, #-1]
    22dc:	00462803 	subeq	r2, r6, r3, lsl #16
    22e0:	42130020 	andsmi	r0, r3, #32
    22e4:	01000011 	tsteq	r0, r1, lsl r0
    22e8:	00238c6e 	eoreq	r8, r3, lr, ror #24
    22ec:	00002820 	andeq	r2, r0, r0, lsr #16
    22f0:	849c0100 	ldrhi	r0, [ip], #256	; 0x100
    22f4:	14000004 	strne	r0, [r0], #-4
    22f8:	6e010078 	mcrvs	0, 0, r0, cr1, cr8, {3}
    22fc:	0000012e 	andeq	r0, r0, lr, lsr #2
    2300:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    2304:	6e010079 	mcrvs	0, 0, r0, cr1, cr9, {3}
    2308:	0000012e 	andeq	r0, r0, lr, lsr #2
    230c:	00709102 	rsbseq	r9, r0, r2, lsl #2
    2310:	00107211 	andseq	r7, r0, r1, lsl r2
    2314:	94500100 	ldrbls	r0, [r0], #-256	; 0xffffff00
    2318:	f8200022 			; <UNDEFINED> instruction: 0xf8200022
    231c:	01000000 	mrseq	r0, (UNDEF: 0)
    2320:	0004b99c 	muleq	r4, ip, r9
    2324:	111e1200 	tstne	lr, r0, lsl #4
    2328:	50010000 	andpl	r0, r1, r0
    232c:	00000162 	andeq	r0, r0, r2, ror #2
    2330:	0f6c9102 	svceq	0x006c9102
    2334:	000008ee 	andeq	r0, r0, lr, ror #17
    2338:	012e5101 			; <UNDEFINED> instruction: 0x012e5101
    233c:	03050000 	movweq	r0, #20480	; 0x5000
    2340:	2000907c 	andcs	r9, r0, ip, ror r0
    2344:	048e1500 	streq	r1, [lr], #1280	; 0x500
    2348:	2d010000 	stccs	0, cr0, [r1, #-0]
    234c:	20002154 	andcs	r2, r0, r4, asr r1
    2350:	00000140 	andeq	r0, r0, r0, asr #2
    2354:	830f9c01 	movwhi	r9, #64513	; 0xfc01
    2358:	0100000d 	tsteq	r0, sp
    235c:	00009e2f 	andeq	r9, r0, pc, lsr #28
    2360:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2364:	000d8d0f 	andeq	r8, sp, pc, lsl #26
    2368:	9e320100 	rsflss	f0, f2, f0
    236c:	02000000 	andeq	r0, r0, #0
    2370:	830f7091 	movwhi	r7, #61585	; 0xf091
    2374:	0100000b 	tsteq	r0, fp
    2378:	00009e35 	andeq	r9, r0, r5, lsr lr
    237c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2380:	000aa40f 	andeq	sl, sl, pc, lsl #8
    2384:	9e390100 	rsflse	f0, f1, f0
    2388:	02000000 	andeq	r0, r0, #0
    238c:	ad0f6891 	stcge	8, cr6, [pc, #-580]	; 2150 <startup-0x1fffdeb0>
    2390:	0100000d 	tsteq	r0, sp
    2394:	00009e3c 	andeq	r9, r0, ip, lsr lr
    2398:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    239c:	000b410f 	andeq	r4, fp, pc, lsl #2
    23a0:	9e3f0100 	rsflse	f0, f7, f0
    23a4:	02000000 	andeq	r0, r0, #0
    23a8:	590f6091 	stmdbpl	pc, {r0, r4, r7, sp, lr}	; <UNPREDICTABLE>
    23ac:	0100000d 	tsteq	r0, sp
    23b0:	00009e44 	andeq	r9, r0, r4, asr #28
    23b4:	5c910200 	lfmpl	f0, 4, [r1], {0}
    23b8:	000db70f 	andeq	fp, sp, pc, lsl #14
    23bc:	9e470100 	dvflss	f0, f7, f0
    23c0:	02000000 	andeq	r0, r0, #0
    23c4:	c10f5891 			; <UNDEFINED> instruction: 0xc10f5891
    23c8:	0100000d 	tsteq	r0, sp
    23cc:	00009e4a 	andeq	r9, r0, sl, asr #28
    23d0:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    23d4:	055b0000 	ldrbeq	r0, [fp, #-0]
    23d8:	00040000 	andeq	r0, r4, r0
    23dc:	0000077b 	andeq	r0, r0, fp, ror r7
    23e0:	008f0104 	addeq	r0, pc, r4, lsl #2
    23e4:	8c0c0000 	stchi	0, cr0, [ip], {-0}
    23e8:	c4000013 	strgt	r0, [r0], #-19	; 0xffffffed
    23ec:	ac200024 	stcge	0, cr0, [r0], #-144	; 0xffffff70
    23f0:	6f000002 	svcvs	0x00000002
    23f4:	0200000b 	andeq	r0, r0, #11
    23f8:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
    23fc:	03000000 	movweq	r0, #0
    2400:	0000034b 	andeq	r0, r0, fp, asr #6
    2404:	004e0702 	subeq	r0, lr, r2, lsl #14
    2408:	03000000 	movweq	r0, #0
    240c:	000006fe 	strdeq	r0, [r0], -lr
    2410:	004e0802 	subeq	r0, lr, r2, lsl #16
    2414:	03040000 	movweq	r0, #16384	; 0x4000
    2418:	000018fd 	strdeq	r1, [r0], -sp
    241c:	00550902 	subseq	r0, r5, r2, lsl #18
    2420:	00080000 	andeq	r0, r8, r0
    2424:	79070404 	stmdbvc	r7, {r2, sl}
    2428:	05000003 	streq	r0, [r0, #-3]
    242c:	00005b04 	andeq	r5, r0, r4, lsl #22
    2430:	08010400 	stmdaeq	r1, {sl}
    2434:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
    2438:	001a4f06 	andseq	r4, sl, r6, lsl #30
    243c:	210a0200 	mrscs	r0, R10_fiq
    2440:	07000000 	streq	r0, [r0, -r0]
    2444:	00000024 	andeq	r0, r0, r4, lsr #32
    2448:	9e06030c 	cdpls	3, 0, cr0, cr6, cr12, {0}
    244c:	03000000 	movweq	r0, #0
    2450:	000005ae 	andeq	r0, r0, lr, lsr #11
    2454:	009e0703 	addseq	r0, lr, r3, lsl #14
    2458:	03000000 	movweq	r0, #0
    245c:	0000002b 	andeq	r0, r0, fp, lsr #32
    2460:	009e0803 	addseq	r0, lr, r3, lsl #16
    2464:	03040000 	movweq	r0, #16384	; 0x4000
    2468:	00000020 	andeq	r0, r0, r0, lsr #32
    246c:	009e0903 	addseq	r0, lr, r3, lsl #18
    2470:	00080000 	andeq	r0, r8, r0
    2474:	00620405 	rsbeq	r0, r2, r5, lsl #8
    2478:	0d060000 	stceq	0, cr0, [r6, #-0]
    247c:	03000016 	movweq	r0, #22
    2480:	00006d0a 	andeq	r6, r0, sl, lsl #26
    2484:	06c30700 	strbeq	r0, [r3], r0, lsl #14
    2488:	04240000 	strteq	r0, [r4], #-0
    248c:	00012806 	andeq	r2, r1, r6, lsl #16
    2490:	04460300 	strbeq	r0, [r6], #-768	; 0xfffffd00
    2494:	07040000 	streq	r0, [r4, -r0]
    2498:	00000128 	andeq	r0, r0, r8, lsr #2
    249c:	06cf0300 	strbeq	r0, [pc], r0, lsl #6
    24a0:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    24a4:	0000012e 	andeq	r0, r0, lr, lsr #2
    24a8:	061f0304 	ldreq	r0, [pc], -r4, lsl #6
    24ac:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    24b0:	0000012e 	andeq	r0, r0, lr, lsr #2
    24b4:	064b0308 	strbeq	r0, [fp], -r8, lsl #6
    24b8:	0c040000 	stceq	0, cr0, [r4], {-0}
    24bc:	00000146 	andeq	r0, r0, r6, asr #2
    24c0:	0332030c 	teqeq	r2, #12, 6	; 0x30000000
    24c4:	0d040000 	stceq	0, cr0, [r4, #-0]
    24c8:	00000146 	andeq	r0, r0, r6, asr #2
    24cc:	04580310 	ldrbeq	r0, [r8], #-784	; 0xfffffcf0
    24d0:	10040000 	andne	r0, r4, r0
    24d4:	0000012e 	andeq	r0, r0, lr, lsr #2
    24d8:	00600314 	rsbeq	r0, r0, r4, lsl r3
    24dc:	11040000 	mrsne	r0, (UNDEF: 4)
    24e0:	0000012e 	andeq	r0, r0, lr, lsr #2
    24e4:	03c90318 	biceq	r0, r9, #24, 6	; 0x60000000
    24e8:	12040000 	andne	r0, r4, #0
    24ec:	0000012e 	andeq	r0, r0, lr, lsr #2
    24f0:	03d9031c 	bicseq	r0, r9, #28, 6	; 0x70000000
    24f4:	13040000 	movwne	r0, #16384	; 0x4000
    24f8:	0000012e 	andeq	r0, r0, lr, lsr #2
    24fc:	04050020 	streq	r0, [r5], #-32	; 0xffffffe0
    2500:	000000a4 	andeq	r0, r0, r4, lsr #1
    2504:	69050408 	stmdbvs	r5, {r3, sl}
    2508:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    250c:	00000140 	andeq	r0, r0, r0, asr #2
    2510:	0001400a 	andeq	r4, r1, sl
    2514:	04050000 	streq	r0, [r5], #-0
    2518:	000000af 	andeq	r0, r0, pc, lsr #1
    251c:	01350405 	teqeq	r5, r5, lsl #8
    2520:	c4060000 	strgt	r0, [r6], #-0
    2524:	04000006 	streq	r0, [r0], #-6
    2528:	0000af15 	andeq	sl, r0, r5, lsl pc
    252c:	01620b00 	cmneq	r2, r0, lsl #22
    2530:	01620000 	cmneq	r2, r0
    2534:	000c0000 	andeq	r0, ip, r0
    2538:	014c0405 	cmpeq	ip, r5, lsl #8
    253c:	3b0d0000 	blcc	342544 <startup-0x1fcbdabc>
    2540:	04000005 	streq	r0, [r0], #-5
    2544:	0001571c 	andeq	r5, r1, ip, lsl r7
    2548:	04140d00 	ldreq	r0, [r4], #-3328	; 0xfffff300
    254c:	1d040000 	stcne	0, cr0, [r4, #-0]
    2550:	0000012e 	andeq	r0, r0, lr, lsr #2
    2554:	00005b0b 	andeq	r5, r0, fp, lsl #22
    2558:	00018e00 	andeq	r8, r1, r0, lsl #28
    255c:	018e0e00 	orreq	r0, lr, r0, lsl #28
    2560:	00740000 	rsbseq	r0, r4, r0
    2564:	f6070404 			; <UNDEFINED> instruction: 0xf6070404
    2568:	0f000003 	svceq	0x00000003
    256c:	0000131b 	andeq	r1, r0, fp, lsl r3
    2570:	017e0305 	cmneq	lr, r5, lsl #6
    2574:	03050000 	movweq	r0, #20480	; 0x5000
    2578:	20009084 	andcs	r9, r0, r4, lsl #1
    257c:	0011540f 	andseq	r5, r1, pc, lsl #8
    2580:	7e030600 	cfmadd32vc	mvax0, mvfx0, mvfx3, mvfx0
    2584:	05000001 	streq	r0, [r0, #-1]
    2588:	0090fc03 	addseq	pc, r0, r3, lsl #24
    258c:	12110f20 	andsne	r0, r1, #32, 30	; 0x80
    2590:	03070000 	movweq	r0, #28672	; 0x7000
    2594:	0000017e 	andeq	r0, r0, lr, ror r1
    2598:	91740305 	cmnls	r4, r5, lsl #6
    259c:	dd0f2000 	stcle	0, cr2, [pc, #-0]	; 25a4 <startup-0x1fffda5c>
    25a0:	08000012 	stmdaeq	r0, {r1, r4}
    25a4:	00017e03 	andeq	r7, r1, r3, lsl #28
    25a8:	ec030500 	cfstr32	mvfx0, [r3], {-0}
    25ac:	0f200091 	svceq	0x00200091
    25b0:	00001171 	andeq	r1, r0, r1, ror r1
    25b4:	017e0309 	cmneq	lr, r9, lsl #6
    25b8:	03050000 	movweq	r0, #20480	; 0x5000
    25bc:	20009264 	andcs	r9, r0, r4, ror #4
    25c0:	0011910f 	andseq	r9, r1, pc, lsl #2
    25c4:	7e030a00 	vmlavc.f32	s0, s6, s0
    25c8:	05000001 	streq	r0, [r0, #-1]
    25cc:	0092dc03 	addseq	sp, r2, r3, lsl #24
    25d0:	12820f20 	addne	r0, r2, #32, 30	; 0x80
    25d4:	030b0000 	movweq	r0, #45056	; 0xb000
    25d8:	0000017e 	andeq	r0, r0, lr, ror r1
    25dc:	93540305 	cmpls	r4, #335544320	; 0x14000000
    25e0:	a60f2000 	strge	r2, [pc], -r0
    25e4:	0c000012 	stceq	0, cr0, [r0], {18}
    25e8:	00017e03 	andeq	r7, r1, r3, lsl #28
    25ec:	cc030500 	cfstr32gt	mvfx0, [r3], {-0}
    25f0:	0f200093 	svceq	0x00200093
    25f4:	000011db 	ldrdeq	r1, [r0], -fp
    25f8:	017e030d 	cmneq	lr, sp, lsl #6
    25fc:	03050000 	movweq	r0, #20480	; 0x5000
    2600:	20009444 	andcs	r9, r0, r4, asr #8
    2604:	0012fe0f 	andseq	pc, r2, pc, lsl #28
    2608:	7e030e00 	cdpvc	14, 0, cr0, cr3, cr0, {0}
    260c:	05000001 	streq	r0, [r0, #-1]
    2610:	0094bc03 	addseq	fp, r4, r3, lsl #24
    2614:	13390f20 	teqne	r9, #32, 30	; 0x80
    2618:	030f0000 	movweq	r0, #61440	; 0xf000
    261c:	0000017e 	andeq	r0, r0, lr, ror r1
    2620:	95340305 	ldrls	r0, [r4, #-773]!	; 0xfffffcfb
    2624:	940f2000 	strls	r2, [pc], #-0	; 262c <startup-0x1fffd9d4>
    2628:	10000012 	andne	r0, r0, r2, lsl r0
    262c:	00017e03 	andeq	r7, r1, r3, lsl #28
    2630:	ac030500 	cfstr32ge	mvfx0, [r3], {-0}
    2634:	10200095 	mlane	r0, r5, r0, r0
    2638:	00001165 	andeq	r1, r0, r5, ror #2
    263c:	009e1101 	addseq	r1, lr, r1, lsl #2
    2640:	03050000 	movweq	r0, #20480	; 0x5000
    2644:	20004ec0 	andcs	r4, r0, r0, asr #29
    2648:	0012d210 	andseq	sp, r2, r0, lsl r2
    264c:	9e120100 	muflss	f0, f2, f0
    2650:	05000000 	streq	r0, [r0, #-0]
    2654:	004e3803 	subeq	r3, lr, r3, lsl #16
    2658:	132d1020 			; <UNDEFINED> instruction: 0x132d1020
    265c:	13010000 	movwne	r0, #4096	; 0x1000
    2660:	0000009e 	muleq	r0, lr, r0
    2664:	4e3c0305 	cdpmi	3, 3, cr0, cr12, cr5, {0}
    2668:	af102000 	svcge	0x00102000
    266c:	01000011 	tsteq	r0, r1, lsl r0
    2670:	00009e14 	andeq	r9, r0, r4, lsl lr
    2674:	e8030500 	stmda	r3, {r8, sl}
    2678:	1020004e 	eorne	r0, r0, lr, asr #32
    267c:	00001381 	andeq	r1, r0, r1, lsl #7
    2680:	009e1501 	addseq	r1, lr, r1, lsl #10
    2684:	03050000 	movweq	r0, #20480	; 0x5000
    2688:	20004e34 	andcs	r4, r0, r4, lsr lr
    268c:	0013d410 	andseq	sp, r3, r0, lsl r4
    2690:	9e160100 	muflss	f0, f6, f0
    2694:	05000000 	streq	r0, [r0, #-0]
    2698:	004ed003 	subeq	sp, lr, r3
    269c:	122f1020 	eorne	r1, pc, #32
    26a0:	17010000 	strne	r0, [r1, -r0]
    26a4:	0000009e 	muleq	r0, lr, r0
    26a8:	4ed40305 	cdpmi	3, 13, cr0, cr4, cr5, {0}
    26ac:	4b102000 	blmi	40a6b4 <startup-0x1fbf594c>
    26b0:	01000012 	tsteq	r0, r2, lsl r0
    26b4:	00009e18 	andeq	r9, r0, r8, lsl lr
    26b8:	e8030500 	stmda	r3, {r8, sl}
    26bc:	1020004d 	eorne	r0, r0, sp, asr #32
    26c0:	000011a3 	andeq	r1, r0, r3, lsr #3
    26c4:	009e1901 	addseq	r1, lr, r1, lsl #18
    26c8:	03050000 	movweq	r0, #20480	; 0x5000
    26cc:	20004dcc 	andcs	r4, r0, ip, asr #27
    26d0:	0013c810 	andseq	ip, r3, r0, lsl r8
    26d4:	9e1a0100 	muflse	f0, f2, f0
    26d8:	05000000 	streq	r0, [r0, #-0]
    26dc:	004ebc03 	subeq	fp, lr, r3, lsl #24
    26e0:	13101020 	tstne	r0, #32
    26e4:	1b010000 	blne	426ec <startup-0x1ffbd914>
    26e8:	0000009e 	muleq	r0, lr, r0
    26ec:	4e580305 	cdpmi	3, 5, cr0, cr8, cr5, {0}
    26f0:	4a102000 	bmi	40a6f8 <startup-0x1fbf5908>
    26f4:	01000013 	tsteq	r0, r3, lsl r0
    26f8:	00009e1c 	andeq	r9, r0, ip, lsl lr
    26fc:	e4030500 	str	r0, [r3], #-1280	; 0xfffffb00
    2700:	1020004e 	eorne	r0, r0, lr, asr #32
    2704:	000012ef 	andeq	r1, r0, pc, ror #5
    2708:	00621e01 	rsbeq	r1, r2, r1, lsl #28
    270c:	03050000 	movweq	r0, #20480	; 0x5000
    2710:	20004ed8 	ldrdcs	r4, [r0], -r8
    2714:	00118210 	andseq	r8, r1, r0, lsl r2
    2718:	621f0100 	andsvs	r0, pc, #0, 2
    271c:	05000000 	streq	r0, [r0, #-0]
    2720:	004ec403 	subeq	ip, lr, r3, lsl #8
    2724:	13ba1020 			; <UNDEFINED> instruction: 0x13ba1020
    2728:	20010000 	andcs	r0, r1, r0
    272c:	00000062 	andeq	r0, r0, r2, rrx
    2730:	4da80305 	stcmi	3, cr0, [r8, #20]!
    2734:	bb102000 	bllt	40a73c <startup-0x1fbf58c4>
    2738:	01000011 	tsteq	r0, r1, lsl r0
    273c:	00006221 	andeq	r6, r0, r1, lsr #4
    2740:	28030500 	stmdacs	r3, {r8, sl}
    2744:	1020004e 	eorne	r0, r0, lr, asr #32
    2748:	000011cb 	andeq	r1, r0, fp, asr #3
    274c:	00622201 	rsbeq	r2, r2, r1, lsl #4
    2750:	03050000 	movweq	r0, #20480	; 0x5000
    2754:	20004e10 	andcs	r4, r0, r0, lsl lr
    2758:	0011f610 	andseq	pc, r1, r0, lsl r6	; <UNPREDICTABLE>
    275c:	62230100 	eorvs	r0, r3, #0, 2
    2760:	05000000 	streq	r0, [r0, #-0]
    2764:	004e7403 	subeq	r7, lr, r3, lsl #8
    2768:	13711020 	cmnne	r1, #32
    276c:	24010000 	strcs	r0, [r1], #-0
    2770:	00000062 	andeq	r0, r0, r2, rrx
    2774:	4eb00305 	cdpmi	3, 11, cr0, cr0, cr5, {0}
    2778:	3b102000 	blcc	40a780 <startup-0x1fbf5880>
    277c:	01000012 	tsteq	r0, r2, lsl r0
    2780:	00006225 	andeq	r6, r0, r5, lsr #4
    2784:	d0030500 	andle	r0, r3, r0, lsl #10
    2788:	1020004d 	eorne	r0, r0, sp, asr #32
    278c:	00001356 	andeq	r1, r0, r6, asr r3
    2790:	00622601 	rsbeq	r2, r2, r1, lsl #12
    2794:	03050000 	movweq	r0, #20480	; 0x5000
    2798:	20004e1c 	andcs	r4, r0, ip, lsl lr
    279c:	00125610 	andseq	r5, r2, r0, lsl r6
    27a0:	62270100 	eorvs	r0, r7, #0, 2
    27a4:	05000000 	streq	r0, [r0, #-0]
    27a8:	004e4003 	subeq	r4, lr, r3
    27ac:	12661020 	rsbne	r1, r6, #32
    27b0:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    27b4:	00000062 	andeq	r0, r0, r2, rrx
    27b8:	4db40305 	ldcmi	3, cr0, [r4, #20]!
    27bc:	b7102000 	ldrlt	r2, [r0, -r0]
    27c0:	01000012 	tsteq	r0, r2, lsl r0
    27c4:	00006229 	andeq	r6, r0, r9, lsr #4
    27c8:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
    27cc:	1020004e 	eorne	r0, r0, lr, asr #32
    27d0:	000011ed 	andeq	r1, r0, sp, ror #3
    27d4:	014c2c01 	cmpeq	ip, r1, lsl #24
    27d8:	03050000 	movweq	r0, #20480	; 0x5000
    27dc:	20004dec 	andcs	r4, r0, ip, ror #27
    27e0:	00122310 	andseq	r2, r2, r0, lsl r3
    27e4:	a42d0100 	strtge	r0, [sp], #-256	; 0xffffff00
    27e8:	05000000 	streq	r0, [r0, #-0]
    27ec:	004e6803 	subeq	r6, lr, r3, lsl #16
    27f0:	12c61020 	sbcne	r1, r6, #32
    27f4:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    27f8:	000000a4 	andeq	r0, r0, r4, lsr #1
    27fc:	4dc00305 	stclmi	3, cr0, [r0, #20]
    2800:	76102000 	ldrvc	r2, [r0], -r0
    2804:	01000012 	tsteq	r0, r2, lsl r0
    2808:	0000a42f 	andeq	sl, r0, pc, lsr #8
    280c:	dc030500 	cfstr32le	mvfx0, [r3], {-0}
    2810:	1020004d 	eorne	r0, r0, sp, asr #32
    2814:	00001205 	andeq	r1, r0, r5, lsl #4
    2818:	00a43001 	adceq	r3, r4, r1
    281c:	03050000 	movweq	r0, #20480	; 0x5000
    2820:	20004e5c 	andcs	r4, r0, ip, asr lr
    2824:	0000a40b 	andeq	sl, r0, fp, lsl #8
    2828:	00045e00 	andeq	r5, r4, r0, lsl #28
    282c:	018e0e00 	orreq	r0, lr, r0, lsl #28
    2830:	00030000 	andeq	r0, r3, r0
    2834:	00136510 	andseq	r6, r3, r0, lsl r5
    2838:	4e310100 	rsfmis	f0, f1, f0
    283c:	05000004 	streq	r0, [r0, #-4]
    2840:	004e8003 	subeq	r8, lr, r3
    2844:	03be1120 			; <UNDEFINED> instruction: 0x03be1120
    2848:	5f010000 	svcpl	0x00010000
    284c:	2000266c 	andcs	r2, r0, ip, ror #12
    2850:	00000104 	andeq	r0, r0, r4, lsl #2
    2854:	04a49c01 	strteq	r9, [r4], #3073	; 0xc01
    2858:	ed120000 	ldc	0, cr0, [r2, #-0]
    285c:	01000011 	tsteq	r0, r1, lsl r0
    2860:	0001625f 	andeq	r6, r1, pc, asr r2
    2864:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2868:	0008ee0f 	andeq	lr, r8, pc, lsl #28
    286c:	2e600100 	powcss	f0, f0, f0
    2870:	05000001 	streq	r0, [r0, #-1]
    2874:	00962403 	addseq	r2, r6, r3, lsl #8
    2878:	8e130020 	cdphi	0, 1, cr0, cr3, cr0, {1}
    287c:	01000004 	tsteq	r0, r4
    2880:	0024c432 	eoreq	ip, r4, r2, lsr r4
    2884:	0001a820 	andeq	sl, r1, r0, lsr #16
    2888:	0f9c0100 	svceq	0x009c0100
    288c:	00000d83 	andeq	r0, r0, r3, lsl #27
    2890:	009e3401 	addseq	r3, lr, r1, lsl #8
    2894:	91020000 	mrsls	r0, (UNDEF: 2)
    2898:	0d8d0f74 	stceq	15, cr0, [sp, #464]	; 0x1d0
    289c:	37010000 	strcc	r0, [r1, -r0]
    28a0:	0000009e 	muleq	r0, lr, r0
    28a4:	0f709102 	svceq	0x00709102
    28a8:	00000b83 	andeq	r0, r0, r3, lsl #23
    28ac:	009e3a01 	addseq	r3, lr, r1, lsl #20
    28b0:	91020000 	mrsls	r0, (UNDEF: 2)
    28b4:	0aa40f6c 	beq	fe90666c <firstTime.4040+0xde8f8184>
    28b8:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    28bc:	0000009e 	muleq	r0, lr, r0
    28c0:	0f689102 	svceq	0x00689102
    28c4:	00000dad 	andeq	r0, r0, sp, lsr #27
    28c8:	009e4101 	addseq	r4, lr, r1, lsl #2
    28cc:	91020000 	mrsls	r0, (UNDEF: 2)
    28d0:	0b410f64 	bleq	1046668 <startup-0x1efb9998>
    28d4:	44010000 	strmi	r0, [r1], #-0
    28d8:	0000009e 	muleq	r0, lr, r0
    28dc:	0f609102 	svceq	0x00609102
    28e0:	00000d59 	andeq	r0, r0, r9, asr sp
    28e4:	009e4901 	addseq	r4, lr, r1, lsl #18
    28e8:	91020000 	mrsls	r0, (UNDEF: 2)
    28ec:	0db70f5c 	ldceq	15, cr0, [r7, #368]!	; 0x170
    28f0:	4c010000 	stcmi	0, cr0, [r1], {-0}
    28f4:	0000009e 	muleq	r0, lr, r0
    28f8:	0f589102 	svceq	0x00589102
    28fc:	00000dc1 	andeq	r0, r0, r1, asr #27
    2900:	009e4f01 	addseq	r4, lr, r1, lsl #30
    2904:	91020000 	mrsls	r0, (UNDEF: 2)
    2908:	0aca0f54 	beq	ff286660 <firstTime.4040+0xdf278178>
    290c:	53010000 	movwpl	r0, #4096	; 0x1000
    2910:	0000009e 	muleq	r0, lr, r0
    2914:	0f509102 	svceq	0x00509102
    2918:	00000b0e 	andeq	r0, r0, lr, lsl #22
    291c:	009e5601 	addseq	r5, lr, r1, lsl #12
    2920:	91020000 	mrsls	r0, (UNDEF: 2)
    2924:	0b180f4c 	bleq	60665c <startup-0x1f9f99a4>
    2928:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    292c:	0000009e 	muleq	r0, lr, r0
    2930:	00489102 	subeq	r9, r8, r2, lsl #2
    2934:	0007a100 	andeq	sl, r7, r0, lsl #2
    2938:	7b000400 	blvc	3940 <startup-0x1fffc6c0>
    293c:	04000008 	streq	r0, [r0], #-8
    2940:	00008f01 	andeq	r8, r0, r1, lsl #30
    2944:	14320c00 	ldrtne	r0, [r2], #-3072	; 0xfffff400
    2948:	27700000 	ldrbcs	r0, [r0, -r0]!
    294c:	052c2000 	streq	r2, [ip, #-0]!
    2950:	0d180000 	ldceq	0, cr0, [r8, #-0]
    2954:	0c020000 	stceq	0, cr0, [r2], {-0}
    2958:	004e0502 	subeq	r0, lr, r2, lsl #10
    295c:	4b030000 	blmi	c2964 <startup-0x1ff3d69c>
    2960:	02000003 	andeq	r0, r0, #3
    2964:	00004e07 	andeq	r4, r0, r7, lsl #28
    2968:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    296c:	02000006 	andeq	r0, r0, #6
    2970:	00004e08 	andeq	r4, r0, r8, lsl #28
    2974:	fd030400 	stc2	4, cr0, [r3, #-0]
    2978:	02000018 	andeq	r0, r0, #24
    297c:	00005509 	andeq	r5, r0, r9, lsl #10
    2980:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    2984:	03790704 	cmneq	r9, #4, 14	; 0x100000
    2988:	04050000 	streq	r0, [r5], #-0
    298c:	0000005b 	andeq	r0, r0, fp, asr r0
    2990:	b8080104 	stmdalt	r8, {r2, r8}
    2994:	06000004 	streq	r0, [r0], -r4
    2998:	00001a4f 	andeq	r1, r0, pc, asr #20
    299c:	00210a02 	eoreq	r0, r1, r2, lsl #20
    29a0:	24070000 	strcs	r0, [r7], #-0
    29a4:	0c000000 	stceq	0, cr0, [r0], {-0}
    29a8:	009e0603 	addseq	r0, lr, r3, lsl #12
    29ac:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
    29b0:	03000005 	movweq	r0, #5
    29b4:	00009e07 	andeq	r9, r0, r7, lsl #28
    29b8:	2b030000 	blcs	c29c0 <startup-0x1ff3d640>
    29bc:	03000000 	movweq	r0, #0
    29c0:	00009e08 	andeq	r9, r0, r8, lsl #28
    29c4:	20030400 	andcs	r0, r3, r0, lsl #8
    29c8:	03000000 	movweq	r0, #0
    29cc:	00009e09 	andeq	r9, r0, r9, lsl #28
    29d0:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    29d4:	00006204 	andeq	r6, r0, r4, lsl #4
    29d8:	160d0600 	strne	r0, [sp], -r0, lsl #12
    29dc:	0a030000 	beq	c29e4 <startup-0x1ff3d61c>
    29e0:	0000006d 	andeq	r0, r0, sp, rrx
    29e4:	0006c307 	andeq	ip, r6, r7, lsl #6
    29e8:	06042400 	streq	r2, [r4], -r0, lsl #8
    29ec:	00000128 	andeq	r0, r0, r8, lsr #2
    29f0:	00044603 	andeq	r4, r4, r3, lsl #12
    29f4:	28070400 	stmdacs	r7, {sl}
    29f8:	00000001 	andeq	r0, r0, r1
    29fc:	0006cf03 	andeq	ip, r6, r3, lsl #30
    2a00:	2e080400 	cfcpyscs	mvf0, mvf8
    2a04:	04000001 	streq	r0, [r0], #-1
    2a08:	00061f03 	andeq	r1, r6, r3, lsl #30
    2a0c:	2e090400 	cfcpyscs	mvf0, mvf9
    2a10:	08000001 	stmdaeq	r0, {r0}
    2a14:	00064b03 	andeq	r4, r6, r3, lsl #22
    2a18:	460c0400 	strmi	r0, [ip], -r0, lsl #8
    2a1c:	0c000001 	stceq	0, cr0, [r0], {1}
    2a20:	00033203 	andeq	r3, r3, r3, lsl #4
    2a24:	460d0400 	strmi	r0, [sp], -r0, lsl #8
    2a28:	10000001 	andne	r0, r0, r1
    2a2c:	00045803 	andeq	r5, r4, r3, lsl #16
    2a30:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
    2a34:	14000001 	strne	r0, [r0], #-1
    2a38:	00006003 	andeq	r6, r0, r3
    2a3c:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
    2a40:	18000001 	stmdane	r0, {r0}
    2a44:	0003c903 	andeq	ip, r3, r3, lsl #18
    2a48:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
    2a4c:	1c000001 	stcne	0, cr0, [r0], {1}
    2a50:	0003d903 	andeq	sp, r3, r3, lsl #18
    2a54:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
    2a58:	20000001 	andcs	r0, r0, r1
    2a5c:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    2a60:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2a64:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2a68:	40090074 	andmi	r0, r9, r4, ror r0
    2a6c:	0a000001 	beq	2a78 <startup-0x1fffd588>
    2a70:	00000140 	andeq	r0, r0, r0, asr #2
    2a74:	af040500 	svcge	0x00040500
    2a78:	05000000 	streq	r0, [r0, #-0]
    2a7c:	00013504 	andeq	r3, r1, r4, lsl #10
    2a80:	06c40600 	strbeq	r0, [r4], r0, lsl #12
    2a84:	15040000 	strne	r0, [r4, #-0]
    2a88:	000000af 	andeq	r0, r0, pc, lsr #1
    2a8c:	0001620b 	andeq	r6, r1, fp, lsl #4
    2a90:	00016200 	andeq	r6, r1, r0, lsl #4
    2a94:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    2a98:	00014c04 	andeq	r4, r1, r4, lsl #24
    2a9c:	053b0d00 	ldreq	r0, [fp, #-3328]!	; 0xfffff300
    2aa0:	1c040000 	stcne	0, cr0, [r4], {-0}
    2aa4:	00000157 	andeq	r0, r0, r7, asr r1
    2aa8:	0004140d 	andeq	r1, r4, sp, lsl #8
    2aac:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
    2ab0:	0b000001 	bleq	2abc <startup-0x1fffd544>
    2ab4:	0000005b 	andeq	r0, r0, fp, asr r0
    2ab8:	0000018f 	andeq	r0, r0, pc, lsl #3
    2abc:	00018f0e 	andeq	r8, r1, lr, lsl #30
    2ac0:	00030100 	andeq	r0, r3, r0, lsl #2
    2ac4:	f6070404 			; <UNDEFINED> instruction: 0xf6070404
    2ac8:	0f000003 	svceq	0x00000003
    2acc:	00001504 	andeq	r1, r0, r4, lsl #10
    2ad0:	017e0305 	cmneq	lr, r5, lsl #6
    2ad4:	03050000 	movweq	r0, #20480	; 0x5000
    2ad8:	20009628 	andcs	r9, r0, r8, lsr #12
    2adc:	00141a0f 	andseq	r1, r4, pc, lsl #20
    2ae0:	7e030600 	cfmadd32vc	mvax0, mvfx0, mvfx3, mvfx0
    2ae4:	05000001 	streq	r0, [r0, #-1]
    2ae8:	00992c03 	addseq	r2, r9, r3, lsl #24
    2aec:	17370f20 	ldrne	r0, [r7, -r0, lsr #30]!
    2af0:	03070000 	movweq	r0, #28672	; 0x7000
    2af4:	0000017e 	andeq	r0, r0, lr, ror r1
    2af8:	9c300305 	ldcls	3, cr0, [r0], #-20	; 0xffffffec
    2afc:	3d0f2000 	stccc	0, cr2, [pc, #-0]	; 2b04 <startup-0x1fffd4fc>
    2b00:	08000015 	stmdaeq	r0, {r0, r2, r4}
    2b04:	00017e03 	andeq	r7, r1, r3, lsl #28
    2b08:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
    2b0c:	0f20009f 	svceq	0x0020009f
    2b10:	00001786 	andeq	r1, r0, r6, lsl #15
    2b14:	017e0309 	cmneq	lr, r9, lsl #6
    2b18:	03050000 	movweq	r0, #20480	; 0x5000
    2b1c:	2000a238 	andcs	sl, r0, r8, lsr r2
    2b20:	0017590f 	andseq	r5, r7, pc, lsl #18
    2b24:	7e030a00 	vmlavc.f32	s0, s6, s0
    2b28:	05000001 	streq	r0, [r0, #-1]
    2b2c:	00a53c03 	adceq	r3, r5, r3, lsl #24
    2b30:	16f50f20 	ldrbtne	r0, [r5], r0, lsr #30
    2b34:	030b0000 	movweq	r0, #45056	; 0xb000
    2b38:	0000017e 	andeq	r0, r0, lr, ror r1
    2b3c:	a8400305 	stmdage	r0, {r0, r2, r8, r9}^
    2b40:	9a0f2000 	bls	3cab48 <startup-0x1fc354b8>
    2b44:	0c000015 	stceq	0, cr0, [r0], {21}
    2b48:	00017e03 	andeq	r7, r1, r3, lsl #28
    2b4c:	44030500 	strmi	r0, [r3], #-1280	; 0xfffffb00
    2b50:	0f2000ab 	svceq	0x002000ab
    2b54:	000015aa 	andeq	r1, r0, sl, lsr #11
    2b58:	017e030d 	cmneq	lr, sp, lsl #6
    2b5c:	03050000 	movweq	r0, #20480	; 0x5000
    2b60:	2000ae48 	andcs	sl, r0, r8, asr #28
    2b64:	00148c0f 	andseq	r8, r4, pc, lsl #24
    2b68:	7e030e00 	cdpvc	14, 0, cr0, cr3, cr0, {0}
    2b6c:	05000001 	streq	r0, [r0, #-1]
    2b70:	00b14c03 	adcseq	r4, r1, r3, lsl #24
    2b74:	152d0f20 	strne	r0, [sp, #-3872]!	; 0xfffff0e0
    2b78:	030f0000 	movweq	r0, #61440	; 0xf000
    2b7c:	0000017e 	andeq	r0, r0, lr, ror r1
    2b80:	b4500305 	ldrblt	r0, [r0], #-773	; 0xfffffcfb
    2b84:	260f2000 	strcs	r2, [pc], -r0
    2b88:	10000017 	andne	r0, r0, r7, lsl r0
    2b8c:	00017e03 	andeq	r7, r1, r3, lsl #28
    2b90:	54030500 	strpl	r0, [r3], #-1280	; 0xfffffb00
    2b94:	0f2000b7 	svceq	0x002000b7
    2b98:	00001748 	andeq	r1, r0, r8, asr #14
    2b9c:	017e0311 	cmneq	lr, r1, lsl r3
    2ba0:	03050000 	movweq	r0, #20480	; 0x5000
    2ba4:	2000ba58 	andcs	fp, r0, r8, asr sl
    2ba8:	00149d0f 	andseq	r9, r4, pc, lsl #26
    2bac:	7e031200 	cdpvc	2, 0, cr1, cr3, cr0, {0}
    2bb0:	05000001 	streq	r0, [r0, #-1]
    2bb4:	00bd5c03 	adcseq	r5, sp, r3, lsl #24
    2bb8:	15ea0f20 	strbne	r0, [sl, #3872]!	; 0xf20
    2bbc:	03130000 	tsteq	r3, #0
    2bc0:	0000017e 	andeq	r0, r0, lr, ror r1
    2bc4:	c0600305 	rsbgt	r0, r0, r5, lsl #6
    2bc8:	6a0f2000 	bvs	3cabd0 <startup-0x1fc35430>
    2bcc:	14000017 	strne	r0, [r0], #-23	; 0xffffffe9
    2bd0:	00017e03 	andeq	r7, r1, r3, lsl #28
    2bd4:	64030500 	strvs	r0, [r3], #-1280	; 0xfffffb00
    2bd8:	0f2000c3 	svceq	0x002000c3
    2bdc:	000015d0 	ldrdeq	r1, [r0], -r0
    2be0:	017e0315 	cmneq	lr, r5, lsl r3
    2be4:	03050000 	movweq	r0, #20480	; 0x5000
    2be8:	2000c668 	andcs	ip, r0, r8, ror #12
    2bec:	0016130f 	andseq	r1, r6, pc, lsl #6
    2bf0:	7e031600 	cfmadd32vc	mvax0, mvfx1, mvfx3, mvfx0
    2bf4:	05000001 	streq	r0, [r0, #-1]
    2bf8:	00c96c03 	sbceq	r6, r9, r3, lsl #24
    2bfc:	17061020 	strne	r1, [r6, -r0, lsr #32]
    2c00:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    2c04:	0000009e 	muleq	r0, lr, r0
    2c08:	50d40305 	sbcspl	r0, r4, r5, lsl #6
    2c0c:	6d102000 	ldcvs	0, cr2, [r0, #-0]
    2c10:	01000014 	tsteq	r0, r4, lsl r0
    2c14:	00009e19 	andeq	r9, r0, r9, lsl lr
    2c18:	10030500 	andne	r0, r3, r0, lsl #10
    2c1c:	10200051 	eorne	r0, r0, r1, asr r0
    2c20:	000014f9 	strdeq	r1, [r0], -r9
    2c24:	009e1a01 	addseq	r1, lr, r1, lsl #20
    2c28:	03050000 	movweq	r0, #20480	; 0x5000
    2c2c:	20005174 	andcs	r5, r0, r4, ror r1
    2c30:	00157610 	andseq	r7, r5, r0, lsl r6
    2c34:	9e1b0100 	muflse	f0, f3, f0
    2c38:	05000000 	streq	r0, [r0, #-0]
    2c3c:	00518403 	subseq	r8, r1, r3, lsl #8
    2c40:	16521020 	ldrbne	r1, [r2], -r0, lsr #32
    2c44:	1c010000 	stcne	0, cr0, [r1], {-0}
    2c48:	0000009e 	muleq	r0, lr, r0
    2c4c:	50d00305 	sbcspl	r0, r0, r5, lsl #6
    2c50:	b8102000 	ldmdalt	r0, {sp}
    2c54:	01000016 	tsteq	r0, r6, lsl r0
    2c58:	00009e1d 	andeq	r9, r0, sp, lsl lr
    2c5c:	88030500 	stmdahi	r3, {r8, sl}
    2c60:	10200051 	eorne	r0, r0, r1, asr r0
    2c64:	000014bc 			; <UNDEFINED> instruction: 0x000014bc
    2c68:	009e1e01 	addseq	r1, lr, r1, lsl #28
    2c6c:	03050000 	movweq	r0, #20480	; 0x5000
    2c70:	20004f38 	andcs	r4, r0, r8, lsr pc
    2c74:	0016dc10 	andseq	sp, r6, r0, lsl ip
    2c78:	9e1f0100 	muflse	f0, f7, f0
    2c7c:	05000000 	streq	r0, [r0, #-0]
    2c80:	004f8c03 	subeq	r8, pc, r3, lsl #24
    2c84:	15c51020 	strbne	r1, [r5, #32]
    2c88:	20010000 	andcs	r0, r1, r0
    2c8c:	0000009e 	muleq	r0, lr, r0
    2c90:	4f340305 	svcmi	0x00340305
    2c94:	7b102000 	blvc	40ac9c <startup-0x1fbf5364>
    2c98:	01000017 	tsteq	r0, r7, lsl r0
    2c9c:	00009e21 	andeq	r9, r0, r1, lsr #28
    2ca0:	b4030500 	strlt	r0, [r3], #-1280	; 0xfffffb00
    2ca4:	10200050 	eorne	r0, r0, r0, asr r0
    2ca8:	000016c3 	andeq	r1, r0, r3, asr #13
    2cac:	009e2201 	addseq	r2, lr, r1, lsl #4
    2cb0:	03050000 	movweq	r0, #20480	; 0x5000
    2cb4:	20005108 	andcs	r5, r0, r8, lsl #2
    2cb8:	0014d610 	andseq	sp, r4, r0, lsl r6
    2cbc:	9e230100 	suflss	f0, f3, f0
    2cc0:	05000000 	streq	r0, [r0, #-0]
    2cc4:	004f5803 	subeq	r5, pc, r3, lsl #16
    2cc8:	155c1020 	ldrbne	r1, [ip, #-32]	; 0xffffffe0
    2ccc:	24010000 	strcs	r0, [r1], #-0
    2cd0:	0000009e 	muleq	r0, lr, r0
    2cd4:	4f540305 	svcmi	0x00540305
    2cd8:	e0102000 	ands	r2, r0, r0
    2cdc:	01000015 	tsteq	r0, r5, lsl r0
    2ce0:	00009e25 	andeq	r9, r0, r5, lsr #28
    2ce4:	9c030500 	cfstr32ls	mvfx0, [r3], {-0}
    2ce8:	1020004f 	eorne	r0, r0, pc, asr #32
    2cec:	00001693 	muleq	r0, r3, r6
    2cf0:	009e2601 	addseq	r2, lr, r1, lsl #12
    2cf4:	03050000 	movweq	r0, #20480	; 0x5000
    2cf8:	2000510c 	andcs	r5, r0, ip, lsl #2
    2cfc:	00171b10 	andseq	r1, r7, r0, lsl fp
    2d00:	9e270100 	suflss	f0, f7, f0
    2d04:	05000000 	streq	r0, [r0, #-0]
    2d08:	0050a403 	subseq	sl, r0, r3, lsl #8
    2d0c:	17111020 	ldrne	r1, [r1, -r0, lsr #32]
    2d10:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    2d14:	0000009e 	muleq	r0, lr, r0
    2d18:	4fdc0305 	svcmi	0x00dc0305
    2d1c:	81102000 	tsthi	r0, r0
    2d20:	01000015 	tsteq	r0, r5, lsl r0
    2d24:	00009e29 	andeq	r9, r0, r9, lsr #28
    2d28:	ec030500 	cfstr32	mvfx0, [r3], {-0}
    2d2c:	1020004f 	eorne	r0, r0, pc, asr #32
    2d30:	0000154e 	andeq	r1, r0, lr, asr #10
    2d34:	00622b01 	rsbeq	r2, r2, r1, lsl #22
    2d38:	03050000 	movweq	r0, #20480	; 0x5000
    2d3c:	2000518c 	andcs	r5, r0, ip, lsl #3
    2d40:	00168510 	andseq	r8, r6, r0, lsl r5
    2d44:	622c0100 	eorvs	r0, ip, #0, 2
    2d48:	05000000 	streq	r0, [r0, #-0]
    2d4c:	004f0403 	subeq	r0, pc, r3, lsl #8
    2d50:	15201020 	strne	r1, [r0, #-32]!	; 0xffffffe0
    2d54:	2d010000 	stccs	0, cr0, [r1, #-0]
    2d58:	00000062 	andeq	r0, r0, r2, rrx
    2d5c:	50c40305 	sbcpl	r0, r4, r5, lsl #6
    2d60:	67102000 	ldrvs	r2, [r0, -r0]
    2d64:	01000015 	tsteq	r0, r5, lsl r0
    2d68:	0000622e 	andeq	r6, r0, lr, lsr #4
    2d6c:	f8030500 			; <UNDEFINED> instruction: 0xf8030500
    2d70:	1020004e 	eorne	r0, r0, lr, asr #32
    2d74:	0000169e 	muleq	r0, lr, r6
    2d78:	00622f01 	rsbeq	r2, r2, r1, lsl #30
    2d7c:	03050000 	movweq	r0, #20480	; 0x5000
    2d80:	2000515c 	andcs	r5, r0, ip, asr r1
    2d84:	00163a10 	andseq	r3, r6, r0, lsl sl
    2d88:	62300100 	eorsvs	r0, r0, #0, 2
    2d8c:	05000000 	streq	r0, [r0, #-0]
    2d90:	0050e403 	subseq	lr, r0, r3, lsl #8
    2d94:	16e61020 	strbtne	r1, [r6], r0, lsr #32
    2d98:	31010000 	mrscc	r0, (UNDEF: 1)
    2d9c:	00000062 	andeq	r0, r0, r2, rrx
    2da0:	50a80305 	adcpl	r0, r8, r5, lsl #6
    2da4:	c7102000 	ldrgt	r2, [r0, -r0]
    2da8:	01000014 	tsteq	r0, r4, lsl r0
    2dac:	00006232 	andeq	r6, r0, r2, lsr r2
    2db0:	d0030500 	andle	r0, r3, r0, lsl #10
    2db4:	1020004f 	eorne	r0, r0, pc, asr #32
    2db8:	000017b1 			; <UNDEFINED> instruction: 0x000017b1
    2dbc:	00623301 	rsbeq	r3, r2, r1, lsl #6
    2dc0:	03050000 	movweq	r0, #20480	; 0x5000
    2dc4:	200050fc 	strdcs	r5, [r0], -ip
    2dc8:	0017bf10 	andseq	fp, r7, r0, lsl pc
    2dcc:	62340100 	eorsvs	r0, r4, #0, 2
    2dd0:	05000000 	streq	r0, [r0, #-0]
    2dd4:	00515003 	subseq	r5, r1, r3
    2dd8:	16671020 	strbtne	r1, [r7], -r0, lsr #32
    2ddc:	35010000 	strcc	r0, [r1, #-0]
    2de0:	00000062 	andeq	r0, r0, r2, rrx
    2de4:	4f900305 	svcmi	0x00900305
    2de8:	8c102000 	ldchi	0, cr2, [r0], {-0}
    2dec:	01000015 	tsteq	r0, r5, lsl r0
    2df0:	00006236 	andeq	r6, r0, r6, lsr r2
    2df4:	f0030500 			; <UNDEFINED> instruction: 0xf0030500
    2df8:	10200050 	eorne	r0, r0, r0, asr r0
    2dfc:	00001676 	andeq	r1, r0, r6, ror r6
    2e00:	00623701 	rsbeq	r3, r2, r1, lsl #14
    2e04:	03050000 	movweq	r0, #20480	; 0x5000
    2e08:	20005168 	andcs	r5, r0, r8, ror #2
    2e0c:	00179610 	andseq	r9, r7, r0, lsl r6
    2e10:	62380100 	eorsvs	r0, r8, #0, 2
    2e14:	05000000 	streq	r0, [r0, #-0]
    2e18:	00514403 	subseq	r4, r1, r3, lsl #8
    2e1c:	145f1020 	ldrbne	r1, [pc], #-32	; 2e24 <startup-0x1fffd1dc>
    2e20:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    2e24:	00000062 	andeq	r0, r0, r2, rrx
    2e28:	4eec0305 	cdpmi	3, 14, cr0, cr12, cr5, {0}
    2e2c:	cd102000 	ldcgt	0, cr2, [r0, #-0]
    2e30:	01000016 	tsteq	r0, r6, lsl r0
    2e34:	0000623a 	andeq	r6, r0, sl, lsr r2
    2e38:	b8030500 	stmdalt	r3, {r8, sl}
    2e3c:	10200050 	eorne	r0, r0, r0, asr r0
    2e40:	000014ad 	andeq	r1, r0, sp, lsr #9
    2e44:	00623b01 	rsbeq	r3, r2, r1, lsl #22
    2e48:	03050000 	movweq	r0, #20480	; 0x5000
    2e4c:	20004f10 	andcs	r4, r0, r0, lsl pc
    2e50:	00140c10 	andseq	r0, r4, r0, lsl ip
    2e54:	623c0100 	eorsvs	r0, ip, #0, 2
    2e58:	05000000 	streq	r0, [r0, #-0]
    2e5c:	0050d803 	subseq	sp, r0, r3, lsl #16
    2e60:	142a1020 	strtne	r1, [sl], #-32	; 0xffffffe0
    2e64:	3f010000 	svccc	0x00010000
    2e68:	0000014c 	andeq	r0, r0, ip, asr #2
    2e6c:	4fa00305 	svcmi	0x00a00305
    2e70:	eb102000 	bl	40ae78 <startup-0x1fbf5188>
    2e74:	01000013 	tsteq	r0, r3, lsl r0
    2e78:	0000a440 	andeq	sl, r0, r0, asr #8
    2e7c:	20030500 	andcs	r0, r3, r0, lsl #10
    2e80:	10200051 	eorne	r0, r0, r1, asr r0
    2e84:	000016ad 	andeq	r1, r0, sp, lsr #13
    2e88:	00a44101 	adceq	r4, r4, r1, lsl #2
    2e8c:	03050000 	movweq	r0, #20480	; 0x5000
    2e90:	20004f48 	andcs	r4, r0, r8, asr #30
    2e94:	00151510 	andseq	r1, r5, r0, lsl r5
    2e98:	a4420100 	strbge	r0, [r2], #-256	; 0xffffff00
    2e9c:	05000000 	streq	r0, [r0, #-0]
    2ea0:	00513803 	subseq	r3, r1, r3, lsl #16
    2ea4:	162f1020 	strtne	r1, [pc], -r0, lsr #32
    2ea8:	43010000 	movwmi	r0, #4096	; 0x1000
    2eac:	000000a4 	andeq	r0, r0, r4, lsr #1
    2eb0:	4f3c0305 	svcmi	0x003c0305
    2eb4:	01102000 	tsteq	r0, r0
    2eb8:	01000014 	tsteq	r0, r4, lsl r0
    2ebc:	0000a444 	andeq	sl, r0, r4, asr #8
    2ec0:	80030500 	andhi	r0, r3, r0, lsl #10
    2ec4:	1020004f 	eorne	r0, r0, pc, asr #32
    2ec8:	00001481 	andeq	r1, r0, r1, lsl #9
    2ecc:	00a44501 	adceq	r4, r4, r1, lsl #10
    2ed0:	03050000 	movweq	r0, #20480	; 0x5000
    2ed4:	20004fc4 	andcs	r4, r0, r4, asr #31
    2ed8:	00162410 	andseq	r2, r6, r0, lsl r4
    2edc:	a4460100 	strbge	r0, [r6], #-256	; 0xffffff00
    2ee0:	05000000 	streq	r0, [r0, #-0]
    2ee4:	00512c03 	subseq	r2, r1, r3, lsl #24
    2ee8:	13e01020 	mvnne	r1, #32
    2eec:	47010000 	strmi	r0, [r1, -r0]
    2ef0:	000000a4 	andeq	r0, r0, r4, lsr #1
    2ef4:	4f740305 	svcmi	0x00740305
    2ef8:	f6102000 			; <UNDEFINED> instruction: 0xf6102000
    2efc:	01000013 	tsteq	r0, r3, lsl r0
    2f00:	0000a448 	andeq	sl, r0, r8, asr #8
    2f04:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
    2f08:	1020004f 	eorne	r0, r0, pc, asr #32
    2f0c:	00001607 	andeq	r1, r0, r7, lsl #12
    2f10:	00a44901 	adceq	r4, r4, r1, lsl #18
    2f14:	03050000 	movweq	r0, #20480	; 0x5000
    2f18:	20004f5c 	andcs	r4, r0, ip, asr pc
    2f1c:	0017ce10 	andseq	ip, r7, r0, lsl lr
    2f20:	a44a0100 	strbge	r0, [sl], #-256	; 0xffffff00
    2f24:	05000000 	streq	r0, [r0, #-0]
    2f28:	00511403 	subseq	r1, r1, r3, lsl #8
    2f2c:	14e11020 	strbtne	r1, [r1], #32
    2f30:	4b010000 	blmi	42f38 <startup-0x1ffbd0c8>
    2f34:	000000a4 	andeq	r0, r0, r4, lsr #1
    2f38:	4f280305 	svcmi	0x00280305
    2f3c:	fb102000 	blx	40af46 <startup-0x1fbf50ba>
    2f40:	01000015 	tsteq	r0, r5, lsl r0
    2f44:	0000a44c 	andeq	sl, r0, ip, asr #8
    2f48:	e0030500 	and	r0, r3, r0, lsl #10
    2f4c:	1020004f 	eorne	r0, r0, pc, asr #32
    2f50:	000017a5 	andeq	r1, r0, r5, lsr #15
    2f54:	00a44d01 	adceq	r4, r4, r1, lsl #26
    2f58:	03050000 	movweq	r0, #20480	; 0x5000
    2f5c:	20004f68 	andcs	r4, r0, r8, ror #30
    2f60:	0014ed10 	andseq	lr, r4, r0, lsl sp
    2f64:	a44e0100 	strbge	r0, [lr], #-256	; 0xffffff00
    2f68:	05000000 	streq	r0, [r0, #-0]
    2f6c:	00517803 	subseq	r7, r1, r3, lsl #16
    2f70:	00a40b20 	adceq	r0, r4, r0, lsr #22
    2f74:	064c0000 	strbeq	r0, [ip], -r0
    2f78:	8f110000 	svchi	0x00110000
    2f7c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    2f80:	165c1000 	ldrbne	r1, [ip], -r0
    2f84:	4f010000 	svcmi	0x00010000
    2f88:	0000063c 	andeq	r0, r0, ip, lsr r6
    2f8c:	4ff00305 	svcmi	0x00f00305
    2f90:	51122000 	tstpl	r2, r0
    2f94:	01000003 	tsteq	r0, r3
    2f98:	0029e490 	mlaeq	r9, r0, r4, lr
    2f9c:	0002b820 	andeq	fp, r2, r0, lsr #16
    2fa0:	929c0100 	addsls	r0, ip, #0, 2
    2fa4:	13000006 	movwne	r0, #6
    2fa8:	0000142a 	andeq	r1, r0, sl, lsr #8
    2fac:	01629001 	cmneq	r2, r1
    2fb0:	91020000 	mrsls	r0, (UNDEF: 2)
    2fb4:	08ee0f6c 	stmiaeq	lr!, {r2, r3, r5, r6, r8, r9, sl, fp}^
    2fb8:	91010000 	mrsls	r0, (UNDEF: 1)
    2fbc:	0000012e 	andeq	r0, r0, lr, lsr #2
    2fc0:	cc700305 	ldclgt	3, cr0, [r0], #-20	; 0xffffffec
    2fc4:	14002000 	strne	r2, [r0], #-0
    2fc8:	0000048e 	andeq	r0, r0, lr, lsl #9
    2fcc:	27705001 	ldrbcs	r5, [r0, -r1]!
    2fd0:	02742000 	rsbseq	r2, r4, #0
    2fd4:	9c010000 	stcls	0, cr0, [r1], {-0}
    2fd8:	000d830f 	andeq	r8, sp, pc, lsl #6
    2fdc:	9e520100 	rdflss	f0, f2, f0
    2fe0:	02000000 	andeq	r0, r0, #0
    2fe4:	8d0f7491 	cfstrshi	mvf7, [pc, #-580]	; 2da8 <startup-0x1fffd258>
    2fe8:	0100000d 	tsteq	r0, sp
    2fec:	00009e55 	andeq	r9, r0, r5, asr lr
    2ff0:	70910200 	addsvc	r0, r1, r0, lsl #4
    2ff4:	000b830f 	andeq	r8, fp, pc, lsl #6
    2ff8:	9e580100 	rdflse	f0, f0, f0
    2ffc:	02000000 	andeq	r0, r0, #0
    3000:	a40f6c91 	strge	r6, [pc], #-3217	; 3008 <startup-0x1fffcff8>
    3004:	0100000a 	tsteq	r0, sl
    3008:	00009e5c 	andeq	r9, r0, ip, asr lr
    300c:	68910200 	ldmvs	r1, {r9}
    3010:	000dad0f 	andeq	sl, sp, pc, lsl #26
    3014:	9e5f0100 	rdflse	f0, f7, f0
    3018:	02000000 	andeq	r0, r0, #0
    301c:	410f6491 			; <UNDEFINED> instruction: 0x410f6491
    3020:	0100000b 	tsteq	r0, fp
    3024:	00009e62 	andeq	r9, r0, r2, ror #28
    3028:	60910200 	addsvs	r0, r1, r0, lsl #4
    302c:	000d590f 	andeq	r5, sp, pc, lsl #18
    3030:	9e670100 	powlss	f0, f7, f0
    3034:	02000000 	andeq	r0, r0, #0
    3038:	b70f5c91 			; <UNDEFINED> instruction: 0xb70f5c91
    303c:	0100000d 	tsteq	r0, sp
    3040:	00009e6a 	andeq	r9, r0, sl, ror #28
    3044:	58910200 	ldmpl	r1, {r9}
    3048:	000dc10f 	andeq	ip, sp, pc, lsl #2
    304c:	9e6d0100 	powlse	f0, f5, f0
    3050:	02000000 	andeq	r0, r0, #0
    3054:	ca0f5491 	bgt	3d82a0 <startup-0x1fc27d60>
    3058:	0100000a 	tsteq	r0, sl
    305c:	00009e71 	andeq	r9, r0, r1, ror lr
    3060:	50910200 	addspl	r0, r1, r0, lsl #4
    3064:	000b0e0f 	andeq	r0, fp, pc, lsl #28
    3068:	9e740100 	rpwlss	f0, f4, f0
    306c:	02000000 	andeq	r0, r0, #0
    3070:	180f4c91 	stmdane	pc, {r0, r4, r7, sl, fp, lr}	; <UNPREDICTABLE>
    3074:	0100000b 	tsteq	r0, fp
    3078:	00009e77 	andeq	r9, r0, r7, ror lr
    307c:	48910200 	ldmmi	r1, {r9}
    3080:	000dd60f 	andeq	sp, sp, pc, lsl #12
    3084:	9e7b0100 	rpwlse	f0, f3, f0
    3088:	02000000 	andeq	r0, r0, #0
    308c:	5e0f4491 	mcrpl	4, 0, r4, cr15, cr1, {4}
    3090:	0100000c 	tsteq	r0, ip
    3094:	00009e7e 	andeq	r9, r0, lr, ror lr
    3098:	40910200 	addsmi	r0, r1, r0, lsl #4
    309c:	000b370f 	andeq	r3, fp, pc, lsl #14
    30a0:	9e810100 	rmflss	f0, f1, f0
    30a4:	03000000 	movweq	r0, #0
    30a8:	0f7fbc91 	svceq	0x007fbc91
    30ac:	000015bb 			; <UNDEFINED> instruction: 0x000015bb
    30b0:	009e8501 	addseq	r8, lr, r1, lsl #10
    30b4:	91030000 	mrsls	r0, (UNDEF: 3)
    30b8:	480f7fb8 	stmdami	pc, {r3, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
    30bc:	01000016 	tsteq	r0, r6, lsl r0
    30c0:	00009e88 	andeq	r9, r0, r8, lsl #29
    30c4:	b4910300 	ldrlt	r0, [r1], #768	; 0x300
    30c8:	14770f7f 	ldrbtne	r0, [r7], #-3967	; 0xfffff081
    30cc:	8b010000 	blhi	430d4 <startup-0x1ffbcf2c>
    30d0:	0000009e 	muleq	r0, lr, r0
    30d4:	7fb09103 	svcvc	0x00b09103
    30d8:	089f0000 	ldmeq	pc, {}	; <UNPREDICTABLE>
    30dc:	00040000 	andeq	r0, r4, r0
    30e0:	00000984 	andeq	r0, r0, r4, lsl #19
    30e4:	008f0104 	addeq	r0, pc, r4, lsl #2
    30e8:	bf0c0000 	svclt	0x000c0000
    30ec:	9c000018 	stcls	0, cr0, [r0], {24}
    30f0:	4420002c 	strtmi	r0, [r0], #-44	; 0xffffffd4
    30f4:	4d00000e 	stcmi	0, cr0, [r0, #-56]	; 0xffffffc8
    30f8:	0200000f 	andeq	r0, r0, #15
    30fc:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
    3100:	03000000 	movweq	r0, #0
    3104:	0000034b 	andeq	r0, r0, fp, asr #6
    3108:	004e0702 	subeq	r0, lr, r2, lsl #14
    310c:	03000000 	movweq	r0, #0
    3110:	000006fe 	strdeq	r0, [r0], -lr
    3114:	004e0802 	subeq	r0, lr, r2, lsl #16
    3118:	03040000 	movweq	r0, #16384	; 0x4000
    311c:	000018fd 	strdeq	r1, [r0], -sp
    3120:	00550902 	subseq	r0, r5, r2, lsl #18
    3124:	00080000 	andeq	r0, r8, r0
    3128:	79070404 	stmdbvc	r7, {r2, sl}
    312c:	05000003 	streq	r0, [r0, #-3]
    3130:	00005b04 	andeq	r5, r0, r4, lsl #22
    3134:	08010400 	stmdaeq	r1, {sl}
    3138:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
    313c:	001a4f06 	andseq	r4, sl, r6, lsl #30
    3140:	210a0200 	mrscs	r0, R10_fiq
    3144:	07000000 	streq	r0, [r0, -r0]
    3148:	00000024 	andeq	r0, r0, r4, lsr #32
    314c:	9e06030c 	cdpls	3, 0, cr0, cr6, cr12, {0}
    3150:	03000000 	movweq	r0, #0
    3154:	000005ae 	andeq	r0, r0, lr, lsr #11
    3158:	009e0703 	addseq	r0, lr, r3, lsl #14
    315c:	03000000 	movweq	r0, #0
    3160:	0000002b 	andeq	r0, r0, fp, lsr #32
    3164:	009e0803 	addseq	r0, lr, r3, lsl #16
    3168:	03040000 	movweq	r0, #16384	; 0x4000
    316c:	00000020 	andeq	r0, r0, r0, lsr #32
    3170:	009e0903 	addseq	r0, lr, r3, lsl #18
    3174:	00080000 	andeq	r0, r8, r0
    3178:	00620405 	rsbeq	r0, r2, r5, lsl #8
    317c:	0d060000 	stceq	0, cr0, [r6, #-0]
    3180:	03000016 	movweq	r0, #22
    3184:	00006d0a 	andeq	r6, r0, sl, lsl #26
    3188:	06c30700 	strbeq	r0, [r3], r0, lsl #14
    318c:	04240000 	strteq	r0, [r4], #-0
    3190:	00012806 	andeq	r2, r1, r6, lsl #16
    3194:	04460300 	strbeq	r0, [r6], #-768	; 0xfffffd00
    3198:	07040000 	streq	r0, [r4, -r0]
    319c:	00000128 	andeq	r0, r0, r8, lsr #2
    31a0:	06cf0300 	strbeq	r0, [pc], r0, lsl #6
    31a4:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    31a8:	0000012e 	andeq	r0, r0, lr, lsr #2
    31ac:	061f0304 	ldreq	r0, [pc], -r4, lsl #6
    31b0:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    31b4:	0000012e 	andeq	r0, r0, lr, lsr #2
    31b8:	064b0308 	strbeq	r0, [fp], -r8, lsl #6
    31bc:	0c040000 	stceq	0, cr0, [r4], {-0}
    31c0:	00000146 	andeq	r0, r0, r6, asr #2
    31c4:	0332030c 	teqeq	r2, #12, 6	; 0x30000000
    31c8:	0d040000 	stceq	0, cr0, [r4, #-0]
    31cc:	00000146 	andeq	r0, r0, r6, asr #2
    31d0:	04580310 	ldrbeq	r0, [r8], #-784	; 0xfffffcf0
    31d4:	10040000 	andne	r0, r4, r0
    31d8:	0000012e 	andeq	r0, r0, lr, lsr #2
    31dc:	00600314 	rsbeq	r0, r0, r4, lsl r3
    31e0:	11040000 	mrsne	r0, (UNDEF: 4)
    31e4:	0000012e 	andeq	r0, r0, lr, lsr #2
    31e8:	03c90318 	biceq	r0, r9, #24, 6	; 0x60000000
    31ec:	12040000 	andne	r0, r4, #0
    31f0:	0000012e 	andeq	r0, r0, lr, lsr #2
    31f4:	03d9031c 	bicseq	r0, r9, #28, 6	; 0x70000000
    31f8:	13040000 	movwne	r0, #16384	; 0x4000
    31fc:	0000012e 	andeq	r0, r0, lr, lsr #2
    3200:	04050020 	streq	r0, [r5], #-32	; 0xffffffe0
    3204:	000000a4 	andeq	r0, r0, r4, lsr #1
    3208:	69050408 	stmdbvs	r5, {r3, sl}
    320c:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3210:	00000140 	andeq	r0, r0, r0, asr #2
    3214:	0001400a 	andeq	r4, r1, sl
    3218:	04050000 	streq	r0, [r5], #-0
    321c:	000000af 	andeq	r0, r0, pc, lsr #1
    3220:	01350405 	teqeq	r5, r5, lsl #8
    3224:	c4060000 	strgt	r0, [r6], #-0
    3228:	04000006 	streq	r0, [r0], #-6
    322c:	0000af15 	andeq	sl, r0, r5, lsl pc
    3230:	01620b00 	cmneq	r2, r0, lsl #22
    3234:	01620000 	cmneq	r2, r0
    3238:	000c0000 	andeq	r0, ip, r0
    323c:	014c0405 	cmpeq	ip, r5, lsl #8
    3240:	3b0d0000 	blcc	343248 <startup-0x1fcbcdb8>
    3244:	04000005 	streq	r0, [r0], #-5
    3248:	0001571c 	andeq	r5, r1, ip, lsl r7
    324c:	04140d00 	ldreq	r0, [r4], #-3328	; 0xfffff300
    3250:	1d040000 	stcne	0, cr0, [r4, #-0]
    3254:	0000012e 	andeq	r0, r0, lr, lsr #2
    3258:	00068706 	andeq	r8, r6, r6, lsl #14
    325c:	5b240500 	blpl	904664 <startup-0x1f6fb99c>
    3260:	0b000000 	bleq	3268 <startup-0x1fffcd98>
    3264:	0000017e 	andeq	r0, r0, lr, ror r1
    3268:	0000019a 	muleq	r0, sl, r1
    326c:	00019a0e 	andeq	r9, r1, lr, lsl #20
    3270:	0003ff00 	andeq	pc, r3, r0, lsl #30
    3274:	f6070404 			; <UNDEFINED> instruction: 0xf6070404
    3278:	0d000003 	stceq	0, cr0, [r0, #-12]
    327c:	00001833 	andeq	r1, r0, r3, lsr r8
    3280:	01892b05 	orreq	r2, r9, r5, lsl #22
    3284:	380d0000 	stmdacc	sp, {}	; <UNPREDICTABLE>
    3288:	05000002 	streq	r0, [r0, #-2]
    328c:	0001892c 	andeq	r8, r1, ip, lsr #18
    3290:	04c60d00 	strbeq	r0, [r6], #3328	; 0xd00
    3294:	2d050000 	stccs	0, cr0, [r5, #-0]
    3298:	00000189 	andeq	r0, r0, r9, lsl #3
    329c:	00035b0d 	andeq	r5, r3, sp, lsl #22
    32a0:	892e0500 	stmdbhi	lr!, {r8, sl}
    32a4:	0d000001 	stceq	0, cr0, [r0, #-4]
    32a8:	000002c0 	andeq	r0, r0, r0, asr #5
    32ac:	01892f05 	orreq	r2, r9, r5, lsl #30
    32b0:	a50d0000 	strge	r0, [sp, #-0]
    32b4:	05000006 	streq	r0, [r0, #-6]
    32b8:	00018930 	andeq	r8, r1, r0, lsr r9
    32bc:	06950d00 	ldreq	r0, [r5], r0, lsl #26
    32c0:	31050000 	mrscc	r0, (UNDEF: 5)
    32c4:	00000189 	andeq	r0, r0, r9, lsl #3
    32c8:	0001ac0f 	andeq	sl, r1, pc, lsl #24
    32cc:	052b0100 	streq	r0, [fp, #-256]!	; 0xffffff00
    32d0:	00619803 	rsbeq	r9, r1, r3, lsl #16
    32d4:	01b70f20 			; <UNDEFINED> instruction: 0x01b70f20
    32d8:	2c010000 	stccs	0, cr0, [r1], {-0}
    32dc:	55980305 	ldrpl	r0, [r8, #773]	; 0x305
    32e0:	c20f2000 	andgt	r2, pc, #0
    32e4:	01000001 	tsteq	r0, r1
    32e8:	9803052d 	stmdals	r3, {r0, r2, r3, r5, r8, sl}
    32ec:	0f20005d 	svceq	0x0020005d
    32f0:	000001cd 	andeq	r0, r0, sp, asr #3
    32f4:	03052e01 	movweq	r2, #24065	; 0x5e01
    32f8:	20006598 	mulcs	r0, r8, r5
    32fc:	0001a10f 	andeq	sl, r1, pc, lsl #2
    3300:	052f0100 	streq	r0, [pc, #-256]!	; 3208 <startup-0x1fffcdf8>
    3304:	00599803 	subseq	r9, r9, r3, lsl #16
    3308:	01d81020 	bicseq	r1, r8, r0, lsr #32
    330c:	05010000 	streq	r0, [r1, #-0]
    3310:	00519803 	subseq	r9, r1, r3, lsl #16
    3314:	01e31020 	mvneq	r1, r0, lsr #32
    3318:	05010000 	streq	r0, [r1, #-0]
    331c:	00699803 	rsbeq	r9, r9, r3, lsl #16
    3320:	18691120 	stmdane	r9!, {r5, r8, ip}^
    3324:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    3328:	003a7601 	eorseq	r7, sl, r1, lsl #12
    332c:	00006a20 	andeq	r6, r0, r0, lsr #20
    3330:	6d9c0100 	ldfvss	f0, [ip]
    3334:	12000002 	andne	r0, r0, #2
    3338:	00001950 	andeq	r1, r0, r0, asr r9
    333c:	2e01a801 	cdpcs	8, 0, cr10, cr1, cr1, {0}
    3340:	02000001 	andeq	r0, r0, #1
    3344:	11007491 			; <UNDEFINED> instruction: 0x11007491
    3348:	000017fa 	strdeq	r1, [r0], -sl
    334c:	f401a001 	vst4.8	{d10-d13}, [r1], r1
    3350:	82200039 	eorhi	r0, r0, #57	; 0x39
    3354:	01000000 	mrseq	r0, (UNDEF: 0)
    3358:	0002a29c 	muleq	r2, ip, r2
    335c:	18441200 	stmdane	r4, {r9, ip}^
    3360:	a0010000 	andge	r0, r1, r0
    3364:	00016201 	andeq	r6, r1, r1, lsl #4
    3368:	6c910200 	lfmvs	f0, 4, [r1], {0}
    336c:	00046013 	andeq	r6, r4, r3, lsl r0
    3370:	01a10100 			; <UNDEFINED> instruction: 0x01a10100
    3374:	0000012e 	andeq	r0, r0, lr, lsr #2
    3378:	00749102 	rsbseq	r9, r4, r2, lsl #2
    337c:	00190814 	andseq	r0, r9, r4, lsl r8
    3380:	01960100 	orrseq	r0, r6, r0, lsl #2
    3384:	200038ec 	andcs	r3, r0, ip, ror #17
    3388:	00000108 	andeq	r0, r0, r8, lsl #2
    338c:	02c69c01 	sbceq	r9, r6, #256	; 0x100
    3390:	69150000 	ldmdbvs	r5, {}	; <UNPREDICTABLE>
    3394:	01970100 	orrseq	r0, r7, r0, lsl #2
    3398:	0000012e 	andeq	r0, r0, lr, lsr #2
    339c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    33a0:	00189a11 	andseq	r9, r8, r1, lsl sl
    33a4:	01700100 	cmneq	r0, r0, lsl #2
    33a8:	200037bc 			; <UNDEFINED> instruction: 0x200037bc
    33ac:	00000130 	andeq	r0, r0, r0, lsr r1
    33b0:	033a9c01 	teqeq	sl, #256	; 0x100
    33b4:	78150000 	ldmdavc	r5, {}	; <UNPREDICTABLE>
    33b8:	01710100 	cmneq	r1, r0, lsl #2
    33bc:	0000012e 	andeq	r0, r0, lr, lsr #2
    33c0:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    33c4:	72010079 	andvc	r0, r1, #121	; 0x79
    33c8:	00012e01 	andeq	r2, r1, r1, lsl #28
    33cc:	68910200 	ldmvs	r1, {r9}
    33d0:	00034b13 	andeq	r4, r3, r3, lsl fp
    33d4:	01730100 	cmneq	r3, r0, lsl #2
    33d8:	0000012e 	andeq	r0, r0, lr, lsr #2
    33dc:	13649102 	cmnne	r4, #-2147483648	; 0x80000000
    33e0:	000006fe 	strdeq	r0, [r0], -lr
    33e4:	2e017401 	cdpcs	4, 0, cr7, cr1, cr1, {0}
    33e8:	02000001 	andeq	r0, r0, #1
    33ec:	78156091 	ldmdavc	r5, {r0, r4, r7, sp, lr}
    33f0:	76010032 			; <UNDEFINED> instruction: 0x76010032
    33f4:	00012e01 	andeq	r2, r1, r1, lsl #28
    33f8:	5c910200 	lfmpl	f0, 4, [r1], {0}
    33fc:	01006916 	tsteq	r0, r6, lsl r9
    3400:	012e017a 			; <UNDEFINED> instruction: 0x012e017a
    3404:	6b150000 	blvs	54340c <startup-0x1fabcbf4>
    3408:	017b0100 	cmneq	fp, r0, lsl #2
    340c:	0000012e 	andeq	r0, r0, lr, lsr #2
    3410:	00589102 	subseq	r9, r8, r2, lsl #2
    3414:	00199a11 	andseq	r9, r9, r1, lsl sl
    3418:	01650100 	cmneq	r5, r0, lsl #2
    341c:	2000376a 	andcs	r3, r0, sl, ror #14
    3420:	00000052 	andeq	r0, r0, r2, asr r0
    3424:	03a39c01 			; <UNDEFINED> instruction: 0x03a39c01
    3428:	78170000 	ldmdavc	r7, {}	; <UNPREDICTABLE>
    342c:	01650100 	cmneq	r5, r0, lsl #2
    3430:	0000012e 	andeq	r0, r0, lr, lsr #2
    3434:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
    3438:	65010079 	strvs	r0, [r1, #-121]	; 0xffffff87
    343c:	00012e01 	andeq	r2, r1, r1, lsl #28
    3440:	68910200 	ldmvs	r1, {r9}
    3444:	00034b12 	andeq	r4, r3, r2, lsl fp
    3448:	01650100 	cmneq	r5, r0, lsl #2
    344c:	0000012e 	andeq	r0, r0, lr, lsr #2
    3450:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
    3454:	000006fe 	strdeq	r0, [r0], -lr
    3458:	2e016501 	cfsh32cs	mvfx6, mvfx1, #1
    345c:	02000001 	andeq	r0, r0, #1
    3460:	69156091 	ldmdbvs	r5, {r0, r4, r7, sp, lr}
    3464:	01660100 	cmneq	r6, r0, lsl #2
    3468:	0000012e 	andeq	r0, r0, lr, lsr #2
    346c:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    3470:	6701006a 	strvs	r0, [r1, -sl, rrx]
    3474:	00012e01 	andeq	r2, r1, r1, lsl #28
    3478:	70910200 	addsvc	r0, r1, r0, lsl #4
    347c:	193d1100 	ldmdbne	sp!, {r8, ip}
    3480:	5b010000 	blpl	43488 <startup-0x1ffbcb78>
    3484:	00371801 	eorseq	r1, r7, r1, lsl #16
    3488:	00005220 	andeq	r5, r0, r0, lsr #4
    348c:	0c9c0100 	ldfeqs	f0, [ip], {0}
    3490:	17000004 	strne	r0, [r0, -r4]
    3494:	5b010078 	blpl	4367c <startup-0x1ffbc984>
    3498:	00012e01 	andeq	r2, r1, r1, lsl #28
    349c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    34a0:	01007917 	tsteq	r0, r7, lsl r9
    34a4:	012e015b 			; <UNDEFINED> instruction: 0x012e015b
    34a8:	91020000 	mrsls	r0, (UNDEF: 2)
    34ac:	034b1268 	movteq	r1, #45672	; 0xb268
    34b0:	5b010000 	blpl	434b8 <startup-0x1ffbcb48>
    34b4:	00012e01 	andeq	r2, r1, r1, lsl #28
    34b8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    34bc:	0006fe12 	andeq	pc, r6, r2, lsl lr	; <UNPREDICTABLE>
    34c0:	015b0100 	cmpeq	fp, r0, lsl #2
    34c4:	0000012e 	andeq	r0, r0, lr, lsr #2
    34c8:	15609102 	strbne	r9, [r0, #-258]!	; 0xfffffefe
    34cc:	5c010069 	stcpl	0, cr0, [r1], {105}	; 0x69
    34d0:	00012e01 	andeq	r2, r1, r1, lsl #28
    34d4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    34d8:	01006a15 	tsteq	r0, r5, lsl sl
    34dc:	012e015d 			; <UNDEFINED> instruction: 0x012e015d
    34e0:	91020000 	mrsls	r0, (UNDEF: 2)
    34e4:	74110070 	ldrvc	r0, [r1], #-112	; 0xffffff90
    34e8:	01000018 	tsteq	r0, r8, lsl r0
    34ec:	35fe0145 	ldrbcc	r0, [lr, #325]!	; 0x145
    34f0:	011a2000 	tsteq	sl, r0
    34f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    34f8:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
    34fc:	01007317 	tsteq	r0, r7, lsl r3
    3500:	009e0145 	addseq	r0, lr, r5, asr #2
    3504:	91020000 	mrsls	r0, (UNDEF: 2)
    3508:	00781754 	rsbseq	r1, r8, r4, asr r7
    350c:	2e014501 	cfsh32cs	mvfx4, mvfx1, #1
    3510:	02000001 	andeq	r0, r0, #1
    3514:	79175091 	ldmdbvc	r7, {r0, r4, r7, ip, lr}
    3518:	01450100 	mrseq	r0, (UNDEF: 85)
    351c:	0000012e 	andeq	r0, r0, lr, lsr #2
    3520:	174c9102 	strbne	r9, [ip, -r2, lsl #2]
    3524:	00746573 	rsbseq	r6, r4, r3, ror r5
    3528:	2e014501 	cfsh32cs	mvfx4, mvfx1, #1
    352c:	02000001 	andeq	r0, r0, #1
    3530:	02124891 	andseq	r4, r2, #9502720	; 0x910000
    3534:	01000019 	tsteq	r0, r9, lsl r0
    3538:	012e0145 			; <UNDEFINED> instruction: 0x012e0145
    353c:	91020000 	mrsls	r0, (UNDEF: 2)
    3540:	00691500 	rsbeq	r1, r9, r0, lsl #10
    3544:	2e014601 	cfmadd32cs	mvax0, mvfx4, mvfx1, mvfx1
    3548:	02000001 	andeq	r0, r0, #1
    354c:	6a156c91 	bvs	55e798 <startup-0x1faa1868>
    3550:	01460100 	mrseq	r0, (UNDEF: 86)
    3554:	0000012e 	andeq	r0, r0, lr, lsr #2
    3558:	15689102 	strbne	r9, [r8, #-258]!	; 0xfffffefe
    355c:	4601006b 	strmi	r0, [r1], -fp, rrx
    3560:	00012e01 	andeq	r2, r1, r1, lsl #28
    3564:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3568:	00197513 	andseq	r7, r9, r3, lsl r5
    356c:	01460100 	mrseq	r0, (UNDEF: 86)
    3570:	0000012e 	andeq	r0, r0, lr, lsr #2
    3574:	18609102 	stmdane	r0!, {r1, r8, ip, pc}^
    3578:	20003636 	andcs	r3, r0, r6, lsr r6
    357c:	000000bc 	strheq	r0, [r0], -ip
    3580:	00197013 	andseq	r7, r9, r3, lsl r0
    3584:	014d0100 	mrseq	r0, (UNDEF: 93)
    3588:	0000005b 	andeq	r0, r0, fp, asr r0
    358c:	005f9102 	subseq	r9, pc, r2, lsl #2
    3590:	18491100 	stmdane	r9, {r8, ip}^
    3594:	30010000 	andcc	r0, r1, r0
    3598:	00352801 	eorseq	r2, r5, r1, lsl #16
    359c:	0000d620 	andeq	sp, r0, r0, lsr #12
    35a0:	209c0100 	addscs	r0, ip, r0, lsl #2
    35a4:	12000005 	andne	r0, r0, #5
    35a8:	000017ec 	andeq	r1, r0, ip, ror #15
    35ac:	20013001 	andcs	r3, r1, r1
    35b0:	02000005 	andeq	r0, r0, #5
    35b4:	69156491 	ldmdbvs	r5, {r0, r4, r7, sl, sp, lr}
    35b8:	01310100 	teqeq	r1, r0, lsl #2
    35bc:	0000017e 	andeq	r0, r0, lr, ror r1
    35c0:	15779102 	ldrbne	r9, [r7, #-258]!	; 0xfffffefe
    35c4:	3101006a 	tstcc	r1, sl, rrx
    35c8:	00017e01 	andeq	r7, r1, r1, lsl #28
    35cc:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    35d0:	001ba613 	andseq	sl, fp, r3, lsl r6
    35d4:	01310100 	teqeq	r1, r0, lsl #2
    35d8:	0000017e 	andeq	r0, r0, lr, ror r1
    35dc:	156f9102 	strbne	r9, [pc, #-258]!	; 34e2 <startup-0x1fffcb1e>
    35e0:	31010063 	tstcc	r1, r3, rrx
    35e4:	00017e01 	andeq	r7, r1, r1, lsl #28
    35e8:	75910200 	ldrvc	r0, [r1, #512]	; 0x200
    35ec:	01006b15 	tsteq	r0, r5, lsl fp
    35f0:	004e0132 	subeq	r0, lr, r2, lsr r1
    35f4:	91020000 	mrsls	r0, (UNDEF: 2)
    35f8:	04050070 	streq	r0, [r5], #-112	; 0xffffff90
    35fc:	0000017e 	andeq	r0, r0, lr, ror r1
    3600:	0017f311 	andseq	pc, r7, r1, lsl r3	; <UNPREDICTABLE>
    3604:	01080100 	mrseq	r0, (UNDEF: 24)
    3608:	20003388 	andcs	r3, r0, r8, lsl #7
    360c:	000001a0 	andeq	r0, r0, r0, lsr #3
    3610:	05a09c01 	streq	r9, [r0, #3073]!	; 0xc01
    3614:	78170000 	ldmdavc	r7, {}	; <UNPREDICTABLE>
    3618:	01080100 	mrseq	r0, (UNDEF: 24)
    361c:	0000012e 	andeq	r0, r0, lr, lsr #2
    3620:	17649102 	strbne	r9, [r4, -r2, lsl #2]!
    3624:	08010079 	stmdaeq	r1, {r0, r3, r4, r5, r6}
    3628:	00012e01 	andeq	r2, r1, r1, lsl #28
    362c:	60910200 	addsvs	r0, r1, r0, lsl #4
    3630:	74657317 	strbtvc	r7, [r5], #-791	; 0xfffffce9
    3634:	01080100 	mrseq	r0, (UNDEF: 24)
    3638:	0000012e 	andeq	r0, r0, lr, lsr #2
    363c:	135c9102 	cmpne	ip, #-2147483648	; 0x80000000
    3640:	0000194b 	andeq	r1, r0, fp, asr #18
    3644:	7e010901 	vmlavc.f16	s0, s2, s2	; <UNPREDICTABLE>
    3648:	02000001 	andeq	r0, r0, #1
    364c:	63157791 	tstvs	r5, #38010880	; 0x2440000
    3650:	01090100 	mrseq	r0, (UNDEF: 25)
    3654:	0000017e 	andeq	r0, r0, lr, ror r1
    3658:	136f9102 	cmnne	pc, #-2147483648	; 0x80000000
    365c:	00001ba6 	andeq	r1, r0, r6, lsr #23
    3660:	7e010901 	vmlavc.f16	s0, s2, s2	; <UNPREDICTABLE>
    3664:	02000001 	andeq	r0, r0, #1
    3668:	a9137691 	ldmdbge	r3, {r0, r4, r7, r9, sl, ip, sp, lr}
    366c:	01000019 	tsteq	r0, r9, lsl r0
    3670:	012e010a 			; <UNDEFINED> instruction: 0x012e010a
    3674:	91020000 	mrsls	r0, (UNDEF: 2)
    3678:	3e190070 	mrccc	0, 0, r0, cr9, cr0, {3}
    367c:	01000018 	tsteq	r0, r8, lsl r0
    3680:	003208de 	ldrsbteq	r0, [r2], -lr
    3684:	00018020 	andeq	r8, r1, r0, lsr #32
    3688:	069c0100 	ldreq	r0, [ip], r0, lsl #2
    368c:	1a000006 	bne	36ac <startup-0x1fffc954>
    3690:	de010078 	mcrle	0, 0, r0, cr1, cr8, {3}
    3694:	0000012e 	andeq	r0, r0, lr, lsr #2
    3698:	1a6c9102 	bne	1b27aa8 <startup-0x1e4d8558>
    369c:	de010079 	mcrle	0, 0, r0, cr1, cr9, {3}
    36a0:	0000012e 	andeq	r0, r0, lr, lsr #2
    36a4:	1a689102 	bne	1a27ab4 <startup-0x1e5d854c>
    36a8:	00746573 	rsbseq	r6, r4, r3, ror r5
    36ac:	012ede01 			; <UNDEFINED> instruction: 0x012ede01
    36b0:	91020000 	mrsls	r0, (UNDEF: 2)
    36b4:	19021b64 	stmdbne	r2, {r2, r5, r6, r8, r9, fp, ip}
    36b8:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    36bc:	0000012e 	andeq	r0, r0, lr, lsr #2
    36c0:	1c609102 	stfnep	f1, [r0], #-8
    36c4:	0000194b 	andeq	r1, r0, fp, asr #18
    36c8:	017edf01 	cmneq	lr, r1, lsl #30
    36cc:	91020000 	mrsls	r0, (UNDEF: 2)
    36d0:	19a91c77 	stmibne	r9!, {r0, r1, r2, r4, r5, r6, sl, fp, ip}
    36d4:	e0010000 	and	r0, r1, r0
    36d8:	0000012e 	andeq	r0, r0, lr, lsr #2
    36dc:	00709102 	rsbseq	r9, r0, r2, lsl #2
    36e0:	0019fc1d 	andseq	pc, r9, sp, lsl ip	; <UNPREDICTABLE>
    36e4:	a2d10100 	sbcsge	r0, r1, #0, 2
    36e8:	66200031 			; <UNDEFINED> instruction: 0x66200031
    36ec:	01000000 	mrseq	r0, (UNDEF: 0)
    36f0:	0006429c 	muleq	r6, ip, r2
    36f4:	17da1c00 	ldrbne	r1, [sl, r0, lsl #24]
    36f8:	d2010000 	andle	r0, r1, #0
    36fc:	0000017e 	andeq	r0, r0, lr, ror r1
    3700:	18779102 	ldmdane	r7!, {r1, r8, ip, pc}^
    3704:	200031b0 			; <UNDEFINED> instruction: 0x200031b0
    3708:	0000003e 	andeq	r0, r0, lr, lsr r0
    370c:	6464611e 	strbtvs	r6, [r4], #-286	; 0xfffffee2
    3710:	7ed60100 	cdpvc	1, 13, cr0, cr6, cr0, {0}
    3714:	02000001 	andeq	r0, r0, #1
    3718:	00007691 	muleq	r0, r1, r6
    371c:	0019e91f 	andseq	lr, r9, pc, lsl r9
    3720:	34bd0100 	ldrtcc	r0, [sp], #256	; 0x100
    3724:	6e200031 	mcrvs	0, 1, r0, cr0, cr1, {1}
    3728:	01000000 	mrseq	r0, (UNDEF: 0)
    372c:	195d1d9c 	ldmdbne	sp, {r2, r3, r4, r7, r8, sl, fp, ip}^
    3730:	b5010000 	strlt	r0, [r1, #-0]
    3734:	200030ee 	andcs	r3, r0, lr, ror #1
    3738:	00000046 	andeq	r0, r0, r6, asr #32
    373c:	06859c01 	streq	r9, [r5], r1, lsl #24
    3740:	251b0000 	ldrcs	r0, [fp, #-0]
    3744:	01000018 	tsteq	r0, r8, lsl r0
    3748:	00017eb5 			; <UNDEFINED> instruction: 0x00017eb5
    374c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3750:	001ba61b 	andseq	sl, fp, fp, lsl r6
    3754:	7eb50100 	frdvcs	f0, f5, f0
    3758:	02000001 	andeq	r0, r0, #1
    375c:	1d007691 	stcne	6, cr7, [r0, #-580]	; 0xfffffdbc
    3760:	00001817 	andeq	r1, r0, r7, lsl r8
    3764:	30a8ae01 	adccc	sl, r8, r1, lsl #28
    3768:	00462000 	subeq	r2, r6, r0
    376c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3770:	000006b7 			; <UNDEFINED> instruction: 0x000006b7
    3774:	0018251b 	andseq	r2, r8, fp, lsl r5
    3778:	7eae0100 	fdvvce	f0, f6, f0
    377c:	02000001 	andeq	r0, r0, #1
    3780:	a61b7791 			; <UNDEFINED> instruction: 0xa61b7791
    3784:	0100001b 	tsteq	r0, fp, lsl r0
    3788:	00017eae 	andeq	r7, r1, lr, lsr #29
    378c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    3790:	188c1d00 	stmne	ip, {r8, sl, fp, ip}
    3794:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    3798:	2000302a 	andcs	r3, r0, sl, lsr #32
    379c:	0000007e 	andeq	r0, r0, lr, ror r0
    37a0:	06e99c01 	strbteq	r9, [r9], r1, lsl #24
    37a4:	2f1b0000 	svccs	0x001b0000
    37a8:	01000006 	tsteq	r0, r6
    37ac:	00017e99 	muleq	r1, r9, lr
    37b0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    37b4:	001ba61b 	andseq	sl, fp, fp, lsl r6
    37b8:	7e990100 	fmlvce	f0, f1, f0
    37bc:	02000001 	andeq	r0, r0, #1
    37c0:	20007691 	mulcs	r0, r1, r6
    37c4:	000018f0 	strdeq	r1, [r0], -r0
    37c8:	012e9401 			; <UNDEFINED> instruction: 0x012e9401
    37cc:	30000000 	andcc	r0, r0, r0
    37d0:	002a2000 	eoreq	r2, sl, r0
    37d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    37d8:	00000711 	andeq	r0, r0, r1, lsl r7
    37dc:	001ba61b 	andseq	sl, fp, fp, lsl r6
    37e0:	7e940100 	fmlvcs	f0, f4, f0
    37e4:	02000001 	andeq	r0, r0, #1
    37e8:	21007791 			; <UNDEFINED> instruction: 0x21007791
    37ec:	000017df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    37f0:	017e7b01 	cmneq	lr, r1, lsl #22
    37f4:	2f6c0000 	svccs	0x006c0000
    37f8:	00942000 	addseq	r2, r4, r0
    37fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    3800:	00000746 	andeq	r0, r0, r6, asr #14
    3804:	001ba61b 	andseq	sl, fp, fp, lsl r6
    3808:	7e7b0100 	rpwvce	f0, f3, f0
    380c:	02000001 	andeq	r0, r0, #1
    3810:	721e6f91 	andsvc	r6, lr, #580	; 0x244
    3814:	84010076 	strhi	r0, [r1], #-118	; 0xffffff8a
    3818:	0000005b 	andeq	r0, r0, fp, asr r0
    381c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    3820:	0019c11d 	andseq	ip, r9, sp, lsl r1
    3824:	fe650100 	cdp2	1, 6, cr0, cr5, cr0, {0}
    3828:	6e20002e 	cdpvs	0, 2, cr0, cr0, cr14, {1}
    382c:	01000000 	mrseq	r0, (UNDEF: 0)
    3830:	0007689c 	muleq	r7, ip, r8
    3834:	00631e00 	rsbeq	r1, r3, r0, lsl #28
    3838:	017e6601 	cmneq	lr, r1, lsl #12
    383c:	91020000 	mrsls	r0, (UNDEF: 2)
    3840:	af1d0077 	svcge	0x001d0077
    3844:	01000019 	tsteq	r0, r9, lsl r0
    3848:	002e9850 	eoreq	r9, lr, r0, asr r8
    384c:	00006620 	andeq	r6, r0, r0, lsr #12
    3850:	8c9c0100 	ldfhis	f0, [ip], {0}
    3854:	1b000007 	blne	3878 <startup-0x1fffc788>
    3858:	00001ba6 	andeq	r1, r0, r6, lsr #23
    385c:	017e5001 	cmneq	lr, r1
    3860:	91020000 	mrsls	r0, (UNDEF: 2)
    3864:	a8220077 	stmdage	r2!, {r0, r1, r2, r4, r5, r6}
    3868:	01000018 	tsteq	r0, r8, lsl r0
    386c:	002e4049 	eoreq	r4, lr, r9, asr #32
    3870:	00005820 	andeq	r5, r0, r0, lsr #16
    3874:	ba9c0100 	blt	fe703c7c <firstTime.4040+0xde6f5794>
    3878:	1a000007 	bne	389c <startup-0x1fffc764>
    387c:	49010078 	stmdbmi	r1, {r3, r4, r5, r6}
    3880:	0000017e 	andeq	r0, r0, lr, ror r1
    3884:	1e6f9102 	lgnnee	f1, f2
    3888:	4a010063 	bmi	43a1c <startup-0x1ffbc5e4>
    388c:	0000017e 	andeq	r0, r0, lr, ror r1
    3890:	00779102 	rsbseq	r9, r7, r2, lsl #2
    3894:	00191c22 	andseq	r1, r9, r2, lsr #24
    3898:	f0410100 			; <UNDEFINED> instruction: 0xf0410100
    389c:	5020002d 	eorpl	r0, r0, sp, lsr #32
    38a0:	01000000 	mrseq	r0, (UNDEF: 0)
    38a4:	0007e89c 	muleq	r7, ip, r8
    38a8:	00781a00 	rsbseq	r1, r8, r0, lsl #20
    38ac:	017e4101 	cmneq	lr, r1, lsl #2
    38b0:	91020000 	mrsls	r0, (UNDEF: 2)
    38b4:	00631e6f 	rsbeq	r1, r3, pc, ror #28
    38b8:	017e4201 	cmneq	lr, r1, lsl #4
    38bc:	91020000 	mrsls	r0, (UNDEF: 2)
    38c0:	841f0077 	ldrhi	r0, [pc], #-119	; 38c8 <startup-0x1fffc738>
    38c4:	01000019 	tsteq	r0, r9, lsl r0
    38c8:	002dc03a 	eoreq	ip, sp, sl, lsr r0
    38cc:	00003020 	andeq	r3, r0, r0, lsr #32
    38d0:	1f9c0100 	svcne	0x009c0100
    38d4:	0000182d 	andeq	r1, r0, sp, lsr #16
    38d8:	2da83701 	stccs	7, cr3, [r8, #4]!
    38dc:	00182000 	andseq	r2, r8, r0
    38e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    38e4:	0019d419 	andseq	sp, r9, r9, lsl r4
    38e8:	76320100 	ldrtvc	r0, [r2], -r0, lsl #2
    38ec:	3220002d 	eorcc	r0, r0, #45	; 0x2d
    38f0:	01000000 	mrseq	r0, (UNDEF: 0)
    38f4:	00083a9c 	muleq	r8, ip, sl
    38f8:	17ec1b00 	strbne	r1, [ip, r0, lsl #22]!
    38fc:	32010000 	andcc	r0, r1, #0
    3900:	00000520 	andeq	r0, r0, r0, lsr #10
    3904:	1e6c9102 	lgnnee	f1, f2
    3908:	33010069 	movwcc	r0, #4201	; 0x1069
    390c:	0000012e 	andeq	r0, r0, lr, lsr #2
    3910:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3914:	00185d1d 	andseq	r5, r8, sp, lsl sp
    3918:	50210100 	eorpl	r0, r1, r0, lsl #2
    391c:	2620002d 	strtcs	r0, [r0], -sp, lsr #32
    3920:	01000000 	mrseq	r0, (UNDEF: 0)
    3924:	00085d9c 	muleq	r8, ip, sp
    3928:	736d1a00 	cmnvc	sp, #0, 20
    392c:	4e210100 	sufmis	f0, f1, f0
    3930:	02000000 	andeq	r0, r0, #0
    3934:	1d007491 	cfstrsne	mvf7, [r0, #-580]	; 0xfffffdbc
    3938:	0000180b 	andeq	r1, r0, fp, lsl #16
    393c:	2d241801 	stccs	8, cr1, [r4, #-4]!
    3940:	002c2000 	eoreq	r2, ip, r0
    3944:	9c010000 	stcls	0, cr0, [r1], {-0}
    3948:	00000880 	andeq	r0, r0, r0, lsl #17
    394c:	0073751a 	rsbseq	r7, r3, sl, lsl r5
    3950:	004e1801 	subeq	r1, lr, r1, lsl #16
    3954:	91020000 	mrsls	r0, (UNDEF: 2)
    3958:	80230074 	eorhi	r0, r3, r4, ror r0
    395c:	01000018 	tsteq	r0, r8, lsl r0
    3960:	002ce00e 	eoreq	lr, ip, lr
    3964:	00004420 	andeq	r4, r0, r0, lsr #8
    3968:	239c0100 	orrscs	r0, ip, #0, 2
    396c:	00001931 	andeq	r1, r0, r1, lsr r9
    3970:	2c9c0401 	cfldrscs	mvf0, [ip], {1}
    3974:	00442000 	subeq	r2, r4, r0
    3978:	9c010000 	stcls	0, cr0, [r1], {-0}
    397c:	00010000 	andeq	r0, r1, r0
    3980:	b1000400 	tstlt	r0, r0, lsl #8
    3984:	0400000b 	streq	r0, [r0], #-11
    3988:	00008f01 	andeq	r8, r0, r1, lsl #30
    398c:	1a1c0c00 	bne	706994 <startup-0x1f8f966c>
    3990:	3ae00000 	bcc	ff803998 <firstTime.4040+0xdf7f54b0>
    3994:	00282000 	eoreq	r2, r8, r0
    3998:	129f0000 	addsne	r0, pc, #0
    399c:	0c020000 	stceq	0, cr0, [r2], {-0}
    39a0:	004e0502 	subeq	r0, lr, r2, lsl #10
    39a4:	4b030000 	blmi	c39ac <startup-0x1ff3c654>
    39a8:	02000003 	andeq	r0, r0, #3
    39ac:	00004e07 	andeq	r4, r0, r7, lsl #28
    39b0:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    39b4:	02000006 	andeq	r0, r0, #6
    39b8:	00004e08 	andeq	r4, r0, r8, lsl #28
    39bc:	fd030400 	stc2	4, cr0, [r3, #-0]
    39c0:	02000018 	andeq	r0, r0, #24
    39c4:	00005509 	andeq	r5, r0, r9, lsl #10
    39c8:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    39cc:	03790704 	cmneq	r9, #4, 14	; 0x100000
    39d0:	04050000 	streq	r0, [r5], #-0
    39d4:	0000005b 	andeq	r0, r0, fp, asr r0
    39d8:	b8080104 	stmdalt	r8, {r2, r8}
    39dc:	06000004 	streq	r0, [r0], -r4
    39e0:	00001a4f 	andeq	r1, r0, pc, asr #20
    39e4:	00210a02 	eoreq	r0, r1, r2, lsl #20
    39e8:	24070000 	strcs	r0, [r7], #-0
    39ec:	0c000000 	stceq	0, cr0, [r0], {-0}
    39f0:	009e0603 	addseq	r0, lr, r3, lsl #12
    39f4:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
    39f8:	03000005 	movweq	r0, #5
    39fc:	00009e07 	andeq	r9, r0, r7, lsl #28
    3a00:	2b030000 	blcs	c3a08 <startup-0x1ff3c5f8>
    3a04:	03000000 	movweq	r0, #0
    3a08:	00009e08 	andeq	r9, r0, r8, lsl #28
    3a0c:	20030400 	andcs	r0, r3, r0, lsl #8
    3a10:	03000000 	movweq	r0, #0
    3a14:	00009e09 	andeq	r9, r0, r9, lsl #28
    3a18:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    3a1c:	00006204 	andeq	r6, r0, r4, lsl #4
    3a20:	160d0600 	strne	r0, [sp], -r0, lsl #12
    3a24:	0a030000 	beq	c3a2c <startup-0x1ff3c5d4>
    3a28:	0000006d 	andeq	r0, r0, sp, rrx
    3a2c:	001a1108 	andseq	r1, sl, r8, lsl #2
    3a30:	e0030100 	and	r0, r3, r0, lsl #2
    3a34:	2820003a 	stmdacs	r0!, {r1, r3, r4, r5}
    3a38:	01000000 	mrseq	r0, (UNDEF: 0)
    3a3c:	0000fd9c 	muleq	r0, ip, sp
    3a40:	1a160900 	bne	585e48 <startup-0x1fa7a1b8>
    3a44:	03010000 	movweq	r0, #4096	; 0x1000
    3a48:	000000fd 	strdeq	r0, [r0], -sp
    3a4c:	09749102 	ldmdbeq	r4!, {r1, r8, ip, pc}^
    3a50:	000005ae 	andeq	r0, r0, lr, lsr #11
    3a54:	009e0301 	addseq	r0, lr, r1, lsl #6
    3a58:	91020000 	mrsls	r0, (UNDEF: 2)
    3a5c:	002b0970 	eoreq	r0, fp, r0, ror r9
    3a60:	03010000 	movweq	r0, #4096	; 0x1000
    3a64:	0000009e 	muleq	r0, lr, r0
    3a68:	096c9102 	stmdbeq	ip!, {r1, r8, ip, pc}^
    3a6c:	00000020 	andeq	r0, r0, r0, lsr #32
    3a70:	009e0301 	addseq	r0, lr, r1, lsl #6
    3a74:	91020000 	mrsls	r0, (UNDEF: 2)
    3a78:	04050068 	streq	r0, [r5], #-104	; 0xffffff98
    3a7c:	000000a4 	andeq	r0, r0, r4, lsr #1
    3a80:	0000c300 	andeq	ip, r0, r0, lsl #6
    3a84:	38000400 	stmdacc	r0, {sl}
    3a88:	0400000c 	streq	r0, [r0], #-12
    3a8c:	00008f01 	andeq	r8, r0, r1, lsl #30
    3a90:	1a560c00 	bne	1586a98 <startup-0x1ea79568>
    3a94:	3b080000 	blcc	203a9c <startup-0x1fdfc564>
    3a98:	00282000 	eoreq	r2, r8, r0
    3a9c:	13150000 	tstne	r5, #0
    3aa0:	0c020000 	stceq	0, cr0, [r2], {-0}
    3aa4:	004e0502 	subeq	r0, lr, r2, lsl #10
    3aa8:	4b030000 	blmi	c3ab0 <startup-0x1ff3c550>
    3aac:	02000003 	andeq	r0, r0, #3
    3ab0:	00004e07 	andeq	r4, r0, r7, lsl #28
    3ab4:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    3ab8:	02000006 	andeq	r0, r0, #6
    3abc:	00004e08 	andeq	r4, r0, r8, lsl #28
    3ac0:	fd030400 	stc2	4, cr0, [r3, #-0]
    3ac4:	02000018 	andeq	r0, r0, #24
    3ac8:	00005509 	andeq	r5, r0, r9, lsl #10
    3acc:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    3ad0:	03790704 	cmneq	r9, #4, 14	; 0x100000
    3ad4:	04050000 	streq	r0, [r5], #-0
    3ad8:	0000005b 	andeq	r0, r0, fp, asr r0
    3adc:	b8080104 	stmdalt	r8, {r2, r8}
    3ae0:	06000004 	streq	r0, [r0], -r4
    3ae4:	00001a4f 	andeq	r1, r0, pc, asr #20
    3ae8:	00210a02 	eoreq	r0, r1, r2, lsl #20
    3aec:	4a070000 	bmi	1c3af4 <startup-0x1fe3c50c>
    3af0:	0100001a 	tsteq	r0, sl, lsl r0
    3af4:	003b0803 	eorseq	r0, fp, r3, lsl #16
    3af8:	00002820 	andeq	r2, r0, r0, lsr #16
    3afc:	b99c0100 	ldmiblt	ip, {r8}
    3b00:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3b04:	03010073 	movweq	r0, #4211	; 0x1073
    3b08:	000000b9 	strheq	r0, [r0], -r9
    3b0c:	09749102 	ldmdbeq	r4!, {r1, r8, ip, pc}^
    3b10:	000018fd 	strdeq	r1, [r0], -sp
    3b14:	00550301 	subseq	r0, r5, r1, lsl #6
    3b18:	91020000 	mrsls	r0, (UNDEF: 2)
    3b1c:	034b0970 	movteq	r0, #47472	; 0xb970
    3b20:	03010000 	movweq	r0, #4096	; 0x1000
    3b24:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    3b28:	096c9102 	stmdbeq	ip!, {r1, r8, ip, pc}^
    3b2c:	000006fe 	strdeq	r0, [r0], -lr
    3b30:	00bf0301 	adcseq	r0, pc, r1, lsl #6
    3b34:	91020000 	mrsls	r0, (UNDEF: 2)
    3b38:	04050068 	streq	r0, [r5], #-104	; 0xffffff98
    3b3c:	00000062 	andeq	r0, r0, r2, rrx
    3b40:	6905040a 	stmdbvs	r5, {r1, r3, sl}
    3b44:	0000746e 	andeq	r7, r0, lr, ror #8
    3b48:	00000135 	andeq	r0, r0, r5, lsr r1
    3b4c:	0cca0004 	stcleq	0, cr0, [sl], {4}
    3b50:	01040000 	mrseq	r0, (UNDEF: 4)
    3b54:	0000008f 	andeq	r0, r0, pc, lsl #1
    3b58:	001abc0c 	andseq	fp, sl, ip, lsl #24
    3b5c:	003b3000 	eorseq	r3, fp, r0
    3b60:	00006c20 	andeq	r6, r0, r0, lsr #24
    3b64:	00138100 	andseq	r8, r3, r0, lsl #2
    3b68:	02180200 	andseq	r0, r8, #0, 4
    3b6c:	0000ae13 	andeq	sl, r0, r3, lsl lr
    3b70:	1a850300 	bne	fe144778 <firstTime.4040+0xde136290>
    3b74:	14020000 	strne	r0, [r2], #-0
    3b78:	000000ae 	andeq	r0, r0, lr, lsr #1
    3b7c:	1a9e0300 	bne	fe784784 <firstTime.4040+0xde77629c>
    3b80:	15020000 	strne	r0, [r2, #-0]
    3b84:	000000b5 	strheq	r0, [r0], -r5
    3b88:	1ae90304 	bne	ffa447a0 <firstTime.4040+0xdfa362b8>
    3b8c:	16020000 	strne	r0, [r2], -r0
    3b90:	000000b5 	strheq	r0, [r0], -r5
    3b94:	1b0b0306 	blne	2c47b4 <startup-0x1fd3b84c>
    3b98:	17020000 	strne	r0, [r2, -r0]
    3b9c:	000000ae 	andeq	r0, r0, lr, lsr #1
    3ba0:	1aaa0308 	bne	fea847c8 <firstTime.4040+0xdea762e0>
    3ba4:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    3ba8:	000000ae 	andeq	r0, r0, lr, lsr #1
    3bac:	1b1b030c 	blne	6c47e4 <startup-0x1f93b81c>
    3bb0:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
    3bb4:	000000bc 	strheq	r0, [r0], -ip
    3bb8:	1b130310 	blne	4c4800 <startup-0x1fb3b800>
    3bbc:	1a020000 	bne	83bc4 <startup-0x1ff7c43c>
    3bc0:	000000bc 	strheq	r0, [r0], -ip
    3bc4:	1ab00311 	bne	fec04810 <firstTime.4040+0xdebf6328>
    3bc8:	1b020000 	blne	83bd0 <startup-0x1ff7c430>
    3bcc:	000000b5 	strheq	r0, [r0], -r5
    3bd0:	1b040312 	blne	104820 <startup-0x1fefb7e0>
    3bd4:	1c020000 	stcne	0, cr0, [r2], {-0}
    3bd8:	000000bc 	strheq	r0, [r0], -ip
    3bdc:	1a960314 	bne	fe584834 <firstTime.4040+0xde57634c>
    3be0:	1d020000 	stcne	0, cr0, [r2, #-0]
    3be4:	000000bc 	strheq	r0, [r0], -ip
    3be8:	1b220315 	blne	884844 <startup-0x1f77b7bc>
    3bec:	1e020000 	cdpne	0, 0, cr0, cr2, cr0, {0}
    3bf0:	000000b5 	strheq	r0, [r0], -r5
    3bf4:	04040016 	streq	r0, [r4], #-22	; 0xffffffea
    3bf8:	00037907 	andeq	r7, r3, r7, lsl #18
    3bfc:	07020400 	streq	r0, [r2, -r0, lsl #8]
    3c00:	00000373 	andeq	r0, r0, r3, ror r3
    3c04:	b8080104 	stmdalt	r8, {r2, r8}
    3c08:	05000004 	streq	r0, [r0, #-4]
    3c0c:	00001aa5 	andeq	r1, r0, r5, lsr #21
    3c10:	00211f02 	eoreq	r1, r1, r2, lsl #30
    3c14:	f4060000 	vst4.8	{d0-d3}, [r6], r0
    3c18:	0100001a 	tsteq	r0, sl, lsl r0
    3c1c:	0001040e 	andeq	r0, r1, lr, lsl #8
    3c20:	003b6800 	eorseq	r6, fp, r0, lsl #16
    3c24:	00003420 	andeq	r3, r0, r0, lsr #8
    3c28:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    3c2c:	07000001 	streq	r0, [r0, -r1]
    3c30:	00746962 	rsbseq	r6, r4, r2, ror #18
    3c34:	01040e01 	tsteq	r4, r1, lsl #28
    3c38:	91020000 	mrsls	r0, (UNDEF: 2)
    3c3c:	49440864 	stmdbmi	r4, {r2, r5, r6, fp}^
    3c40:	0f01004c 	svceq	0x0001004c
    3c44:	0000010b 	andeq	r0, r0, fp, lsl #2
    3c48:	006f9102 	rsbeq	r9, pc, r2, lsl #2
    3c4c:	69050409 	stmdbvs	r5, {r0, r3, sl}
    3c50:	0400746e 	streq	r7, [r0], #-1134	; 0xfffffb92
    3c54:	04c10801 	strbeq	r0, [r1], #2049	; 0x801
    3c58:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
    3c5c:	0100001b 	tsteq	r0, fp, lsl r0
    3c60:	00010b08 	andeq	r0, r1, r8, lsl #22
    3c64:	003b4800 	eorseq	r4, fp, r0, lsl #16
    3c68:	00002020 	andeq	r2, r0, r0, lsr #32
    3c6c:	0b9c0100 	bleq	fe704074 <firstTime.4040+0xde6f5b8c>
    3c70:	00001a8b 	andeq	r1, r0, fp, lsl #21
    3c74:	3b300401 	blcc	c04c80 <startup-0x1f3fb380>
    3c78:	00182000 	andseq	r2, r8, r0
    3c7c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3c80:	0004ed00 	andeq	lr, r4, r0, lsl #26
    3c84:	87000400 	strhi	r0, [r0, -r0, lsl #8]
    3c88:	0400000d 	streq	r0, [r0], #-13
    3c8c:	00008f01 	andeq	r8, r0, r1, lsl #30
    3c90:	1c730c00 	ldclne	12, cr0, [r3], #-0
    3c94:	3b9c0000 	blcc	fe703c9c <firstTime.4040+0xde6f57b4>
    3c98:	05202000 	streq	r2, [r0, #-0]!
    3c9c:	13f10000 	mvnsne	r0, #0
    3ca0:	0c020000 	stceq	0, cr0, [r2], {-0}
    3ca4:	004e0502 	subeq	r0, lr, r2, lsl #10
    3ca8:	4b030000 	blmi	c3cb0 <startup-0x1ff3c350>
    3cac:	02000003 	andeq	r0, r0, #3
    3cb0:	00004e07 	andeq	r4, r0, r7, lsl #28
    3cb4:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    3cb8:	02000006 	andeq	r0, r0, #6
    3cbc:	00004e08 	andeq	r4, r0, r8, lsl #28
    3cc0:	fd030400 	stc2	4, cr0, [r3, #-0]
    3cc4:	02000018 	andeq	r0, r0, #24
    3cc8:	00005509 	andeq	r5, r0, r9, lsl #10
    3ccc:	04000800 	streq	r0, [r0], #-2048	; 0xfffff800
    3cd0:	03790704 	cmneq	r9, #4, 14	; 0x100000
    3cd4:	04050000 	streq	r0, [r5], #-0
    3cd8:	0000005b 	andeq	r0, r0, fp, asr r0
    3cdc:	b8080104 	stmdalt	r8, {r2, r8}
    3ce0:	06000004 	streq	r0, [r0], -r4
    3ce4:	00001a4f 	andeq	r1, r0, pc, asr #20
    3ce8:	00210a02 	eoreq	r0, r1, r2, lsl #20
    3cec:	24070000 	strcs	r0, [r7], #-0
    3cf0:	0c000000 	stceq	0, cr0, [r0], {-0}
    3cf4:	009e0603 	addseq	r0, lr, r3, lsl #12
    3cf8:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
    3cfc:	03000005 	movweq	r0, #5
    3d00:	00009e07 	andeq	r9, r0, r7, lsl #28
    3d04:	2b030000 	blcs	c3d0c <startup-0x1ff3c2f4>
    3d08:	03000000 	movweq	r0, #0
    3d0c:	00009e08 	andeq	r9, r0, r8, lsl #28
    3d10:	20030400 	andcs	r0, r3, r0, lsl #8
    3d14:	03000000 	movweq	r0, #0
    3d18:	00009e09 	andeq	r9, r0, r9, lsl #28
    3d1c:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    3d20:	00006204 	andeq	r6, r0, r4, lsl #4
    3d24:	160d0600 	strne	r0, [sp], -r0, lsl #12
    3d28:	0a030000 	beq	c3d30 <startup-0x1ff3c2d0>
    3d2c:	0000006d 	andeq	r0, r0, sp, rrx
    3d30:	0006c307 	andeq	ip, r6, r7, lsl #6
    3d34:	06042400 	streq	r2, [r4], -r0, lsl #8
    3d38:	00000128 	andeq	r0, r0, r8, lsr #2
    3d3c:	00044603 	andeq	r4, r4, r3, lsl #12
    3d40:	28070400 	stmdacs	r7, {sl}
    3d44:	00000001 	andeq	r0, r0, r1
    3d48:	0006cf03 	andeq	ip, r6, r3, lsl #30
    3d4c:	2e080400 	cfcpyscs	mvf0, mvf8
    3d50:	04000001 	streq	r0, [r0], #-1
    3d54:	00061f03 	andeq	r1, r6, r3, lsl #30
    3d58:	2e090400 	cfcpyscs	mvf0, mvf9
    3d5c:	08000001 	stmdaeq	r0, {r0}
    3d60:	00064b03 	andeq	r4, r6, r3, lsl #22
    3d64:	460c0400 	strmi	r0, [ip], -r0, lsl #8
    3d68:	0c000001 	stceq	0, cr0, [r0], {1}
    3d6c:	00033203 	andeq	r3, r3, r3, lsl #4
    3d70:	460d0400 	strmi	r0, [sp], -r0, lsl #8
    3d74:	10000001 	andne	r0, r0, r1
    3d78:	00045803 	andeq	r5, r4, r3, lsl #16
    3d7c:	2e100400 	cfmulscs	mvf0, mvf0, mvf0
    3d80:	14000001 	strne	r0, [r0], #-1
    3d84:	00006003 	andeq	r6, r0, r3
    3d88:	2e110400 	cfmulscs	mvf0, mvf1, mvf0
    3d8c:	18000001 	stmdane	r0, {r0}
    3d90:	0003c903 	andeq	ip, r3, r3, lsl #18
    3d94:	2e120400 	cfmulscs	mvf0, mvf2, mvf0
    3d98:	1c000001 	stcne	0, cr0, [r0], {1}
    3d9c:	0003d903 	andeq	sp, r3, r3, lsl #18
    3da0:	2e130400 	cfmulscs	mvf0, mvf3, mvf0
    3da4:	20000001 	andcs	r0, r0, r1
    3da8:	a4040500 	strge	r0, [r4], #-1280	; 0xfffffb00
    3dac:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3db0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    3db4:	40090074 	andmi	r0, r9, r4, ror r0
    3db8:	0a000001 	beq	3dc4 <startup-0x1fffc23c>
    3dbc:	00000140 	andeq	r0, r0, r0, asr #2
    3dc0:	af040500 	svcge	0x00040500
    3dc4:	05000000 	streq	r0, [r0, #-0]
    3dc8:	00013504 	andeq	r3, r1, r4, lsl #10
    3dcc:	06c40600 	strbeq	r0, [r4], r0, lsl #12
    3dd0:	15040000 	strne	r0, [r4, #-0]
    3dd4:	000000af 	andeq	r0, r0, pc, lsr #1
    3dd8:	0001620b 	andeq	r6, r1, fp, lsl #4
    3ddc:	00016200 	andeq	r6, r1, r0, lsl #4
    3de0:	05000c00 	streq	r0, [r0, #-3072]	; 0xfffff400
    3de4:	00014c04 	andeq	r4, r1, r4, lsl #24
    3de8:	053b0d00 	ldreq	r0, [fp, #-3328]!	; 0xfffff300
    3dec:	1c040000 	stcne	0, cr0, [r4], {-0}
    3df0:	00000157 	andeq	r0, r0, r7, asr r1
    3df4:	0004140d 	andeq	r1, r4, sp, lsl #8
    3df8:	2e1d0400 	cfmulscs	mvf0, mvf13, mvf0
    3dfc:	06000001 	streq	r0, [r0], -r1
    3e00:	00000687 	andeq	r0, r0, r7, lsl #13
    3e04:	005b2405 	subseq	r2, fp, r5, lsl #8
    3e08:	7e0b0000 	cdpvc	0, 0, cr0, cr11, cr0, {0}
    3e0c:	9a000001 	bls	3e18 <startup-0x1fffc1e8>
    3e10:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    3e14:	0000019a 	muleq	r0, sl, r1
    3e18:	040003ff 	streq	r0, [r0], #-1023	; 0xfffffc01
    3e1c:	03f60704 	mvnseq	r0, #4, 14	; 0x100000
    3e20:	330d0000 	movwcc	r0, #53248	; 0xd000
    3e24:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
    3e28:	0001892b 	andeq	r8, r1, fp, lsr #18
    3e2c:	02380d00 	eorseq	r0, r8, #0, 26
    3e30:	2c050000 	stccs	0, cr0, [r5], {-0}
    3e34:	00000189 	andeq	r0, r0, r9, lsl #3
    3e38:	0004c60d 	andeq	ip, r4, sp, lsl #12
    3e3c:	892d0500 	pushhi	{r8, sl}
    3e40:	0d000001 	stceq	0, cr0, [r0, #-4]
    3e44:	0000035b 	andeq	r0, r0, fp, asr r3
    3e48:	01892e05 	orreq	r2, r9, r5, lsl #28
    3e4c:	c00d0000 	andgt	r0, sp, r0
    3e50:	05000002 	streq	r0, [r0, #-2]
    3e54:	0001892f 	andeq	r8, r1, pc, lsr #18
    3e58:	06a50d00 	strteq	r0, [r5], r0, lsl #26
    3e5c:	30050000 	andcc	r0, r5, r0
    3e60:	00000189 	andeq	r0, r0, r9, lsl #3
    3e64:	0006950d 	andeq	r9, r6, sp, lsl #10
    3e68:	89310500 	ldmdbhi	r1!, {r8, sl}
    3e6c:	0f000001 	svceq	0x00000001
    3e70:	00001bf9 	strdeq	r1, [r0], -r9
    3e74:	4038e401 	eorsmi	lr, r8, r1, lsl #8
    3e78:	00842000 	addeq	r2, r4, r0
    3e7c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3e80:	0000022c 	andeq	r0, r0, ip, lsr #4
    3e84:	01007310 	tsteq	r0, r0, lsl r3
    3e88:	00022ce5 	andeq	r2, r2, r5, ror #25
    3e8c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3e90:	001bd411 	andseq	sp, fp, r1, lsl r4
    3e94:	39e60100 	stmibcc	r6!, {r8}^
    3e98:	02000002 	andeq	r0, r0, #2
    3e9c:	da115c91 	ble	45b0e8 <startup-0x1fba4f18>
    3ea0:	0100001b 	tsteq	r0, fp, lsl r0
    3ea4:	000249e7 	andeq	r4, r2, r7, ror #19
    3ea8:	48910200 	ldmmi	r1, {r9}
    3eac:	32040500 	andcc	r0, r4, #0, 10
    3eb0:	04000002 	streq	r0, [r0], #-2
    3eb4:	04c10801 	strbeq	r0, [r1], #2049	; 0x801
    3eb8:	320b0000 	andcc	r0, fp, #0
    3ebc:	49000002 	stmdbmi	r0, {r1}
    3ec0:	12000002 	andne	r0, r0, #2
    3ec4:	0000019a 	muleq	r0, sl, r1
    3ec8:	320b000c 	andcc	r0, fp, #12
    3ecc:	59000002 	stmdbpl	r0, {r1}
    3ed0:	12000002 	andne	r0, r0, #2
    3ed4:	0000019a 	muleq	r0, sl, r1
    3ed8:	8a0f0013 	bhi	3c3f2c <startup-0x1fc3c0d4>
    3edc:	0100001b 	tsteq	r0, fp, lsl r0
    3ee0:	003faacc 	eorseq	sl, pc, ip, asr #21
    3ee4:	00008e20 	andeq	r8, r0, r0, lsr #28
    3ee8:	b39c0100 	orrslt	r0, ip, #0, 2
    3eec:	13000002 	movwne	r0, #2
    3ef0:	00001cc2 	andeq	r1, r0, r2, asr #25
    3ef4:	022ccc01 	eoreq	ip, ip, #256	; 0x100
    3ef8:	91020000 	mrsls	r0, (UNDEF: 2)
    3efc:	0276136c 	rsbseq	r1, r6, #108, 6	; 0xb0000001
    3f00:	cc010000 	stcgt	0, cr0, [r1], {-0}
    3f04:	0000022c 	andeq	r0, r0, ip, lsr #4
    3f08:	13689102 	cmnne	r8, #-2147483648	; 0x80000000
    3f0c:	00001c6c 	andeq	r1, r0, ip, ror #24
    3f10:	012ecc01 			; <UNDEFINED> instruction: 0x012ecc01
    3f14:	91020000 	mrsls	r0, (UNDEF: 2)
    3f18:	1b481364 	blne	1208cb0 <startup-0x1edf7350>
    3f1c:	cc010000 	stcgt	0, cr0, [r1], {-0}
    3f20:	0000012e 	andeq	r0, r0, lr, lsr #2
    3f24:	10609102 	rsbne	r9, r0, r2, lsl #2
    3f28:	d0010069 	andle	r0, r1, r9, rrx
    3f2c:	0000012e 	andeq	r0, r0, lr, lsr #2
    3f30:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3f34:	001c2b0f 	andseq	r2, ip, pc, lsl #22
    3f38:	4cbd0100 	ldfmis	f0, [sp]
    3f3c:	5e20003f 	mcrpl	0, 1, r0, cr0, cr15, {1}
    3f40:	01000000 	mrseq	r0, (UNDEF: 0)
    3f44:	0002e59c 	muleq	r2, ip, r5
    3f48:	1cc21300 	stclne	3, cr1, [r2], {0}
    3f4c:	bd010000 	stclt	0, cr0, [r1, #-0]
    3f50:	0000022c 	andeq	r0, r0, ip, lsr #4
    3f54:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
    3f58:	00000276 	andeq	r0, r0, r6, ror r2
    3f5c:	022cbd01 	eoreq	fp, ip, #1, 26	; 0x40
    3f60:	91020000 	mrsls	r0, (UNDEF: 2)
    3f64:	7e0f0070 	mcrvc	0, 0, r0, cr15, cr0, {3}
    3f68:	0100001b 	tsteq	r0, fp, lsl r0
    3f6c:	003ee2ad 	eorseq	lr, lr, sp, lsr #5
    3f70:	00006a20 	andeq	r6, r0, r0, lsr #20
    3f74:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    3f78:	10000003 	andne	r0, r0, r3
    3f7c:	ae010073 	mcrge	0, 0, r0, cr1, cr3, {3}
    3f80:	0000022c 	andeq	r0, r0, ip, lsr #4
    3f84:	116c9102 	cmnne	ip, r2, lsl #2
    3f88:	000018b9 			; <UNDEFINED> instruction: 0x000018b9
    3f8c:	0315af01 	tsteq	r5, #1, 30
    3f90:	91020000 	mrsls	r0, (UNDEF: 2)
    3f94:	320b0054 	andcc	r0, fp, #84	; 0x54
    3f98:	25000002 	strcs	r0, [r0, #-2]
    3f9c:	12000003 	andne	r0, r0, #3
    3fa0:	0000019a 	muleq	r0, sl, r1
    3fa4:	5f140014 	svcpl	0x00140014
    3fa8:	0100001b 	tsteq	r0, fp, lsl r0
    3fac:	003ed0a8 	eorseq	sp, lr, r8, lsr #1
    3fb0:	00001220 	andeq	r1, r0, r0, lsr #4
    3fb4:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    3fb8:	00001b37 	andeq	r1, r0, r7, lsr fp
    3fbc:	3eb69f01 	cdpcc	15, 11, cr9, cr6, cr1, {0}
    3fc0:	001a2000 	andseq	r2, sl, r0
    3fc4:	9c010000 	stcls	0, cr0, [r1], {-0}
    3fc8:	001b6c14 	andseq	r6, fp, r4, lsl ip
    3fcc:	1c830100 	stfnes	f0, [r3], {0}
    3fd0:	9a20003e 	bls	8040d0 <startup-0x1f7fbf30>
    3fd4:	01000000 	mrseq	r0, (UNDEF: 0)
    3fd8:	1c370f9c 	ldcne	15, cr0, [r7], #-624	; 0xfffffd90
    3fdc:	7b010000 	blvc	43fe4 <startup-0x1ffbc01c>
    3fe0:	20003dcc 	andcs	r3, r0, ip, asr #27
    3fe4:	00000050 	andeq	r0, r0, r0, asr r0
    3fe8:	03989c01 	orrseq	r9, r8, #256	; 0x100
    3fec:	72160000 	andsvc	r0, r6, #0
    3ff0:	0100776f 	tsteq	r0, pc, ror #14
    3ff4:	00005b7b 	andeq	r5, r0, fp, ror fp
    3ff8:	6f910200 	svcvs	0x00910200
    3ffc:	001b7713 	andseq	r7, fp, r3, lsl r7
    4000:	5b7b0100 	blpl	1ec4408 <startup-0x1e13bbf8>
    4004:	02000000 	andeq	r0, r0, #0
    4008:	e0116e91 	muls	r1, r1, lr
    400c:	0100001b 	tsteq	r0, fp, lsl r0
    4010:	00005b7c 	andeq	r5, r0, ip, ror fp
    4014:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    4018:	1c5b0f00 	mrrcne	15, 0, r0, fp, cr0
    401c:	74010000 	strvc	r0, [r1], #-0
    4020:	20003d90 	mulcs	r0, r0, sp
    4024:	0000003c 	andeq	r0, r0, ip, lsr r0
    4028:	03ba9c01 			; <UNDEFINED> instruction: 0x03ba9c01
    402c:	63160000 	tstvs	r6, #0
    4030:	5b740100 	blpl	1d04438 <startup-0x1e2fbbc8>
    4034:	02000000 	andeq	r0, r0, #0
    4038:	17007791 			; <UNDEFINED> instruction: 0x17007791
    403c:	00001b9b 	muleq	r0, fp, fp
    4040:	005b6a01 	subseq	r6, fp, r1, lsl #20
    4044:	3d5c0000 	ldclcc	0, cr0, [ip, #-0]
    4048:	00342000 	eorseq	r2, r4, r0
    404c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4050:	000003e0 	andeq	r0, r0, r0, ror #7
    4054:	01006310 	tsteq	r0, r0, lsl r3
    4058:	00005b6b 	andeq	r5, r0, fp, ror #22
    405c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    4060:	1c440f00 	mcrrne	15, 0, r0, r4, cr0
    4064:	63010000 	movwvs	r0, #4096	; 0x1000
    4068:	20003d2c 	andcs	r3, r0, ip, lsr #26
    406c:	00000030 	andeq	r0, r0, r0, lsr r0
    4070:	04029c01 	streq	r9, [r2], #-3073	; 0xfffff3ff
    4074:	63160000 	tstvs	r6, #0
    4078:	5b630100 	blpl	18c4480 <startup-0x1e73bb80>
    407c:	02000000 	andeq	r0, r0, #0
    4080:	17007791 			; <UNDEFINED> instruction: 0x17007791
    4084:	00001b4f 	andeq	r1, r0, pc, asr #22
    4088:	005b5701 	subseq	r5, fp, r1, lsl #14
    408c:	3cd80000 	ldclcc	0, cr0, [r8], {0}
    4090:	00542000 	subseq	r2, r4, r0
    4094:	9c010000 	stcls	0, cr0, [r1], {-0}
    4098:	00000429 	andeq	r0, r0, r9, lsr #8
    409c:	00767210 	rsbseq	r7, r6, r0, lsl r2
    40a0:	005b5c01 	subseq	r5, fp, r1, lsl #24
    40a4:	91020000 	mrsls	r0, (UNDEF: 2)
    40a8:	0417006f 	ldreq	r0, [r7], #-111	; 0xffffff91
    40ac:	0100001c 	tsteq	r0, ip, lsl r0
    40b0:	00005b4b 	andeq	r5, r0, fp, asr #22
    40b4:	003c8400 	eorseq	r8, ip, r0, lsl #8
    40b8:	00005420 	andeq	r5, r0, r0, lsr #8
    40bc:	509c0100 	addspl	r0, ip, r0, lsl #2
    40c0:	10000004 	andne	r0, r0, r4
    40c4:	01007672 	tsteq	r0, r2, ror r6
    40c8:	00005b50 	andeq	r5, r0, r0, asr fp
    40cc:	6f910200 	svcvs	0x00910200
    40d0:	1be80f00 	blne	ffa07cd8 <firstTime.4040+0xdf9f97f0>
    40d4:	45010000 	strmi	r0, [r1, #-0]
    40d8:	20003c5a 	andcs	r3, r0, sl, asr ip
    40dc:	0000002a 	andeq	r0, r0, sl, lsr #32
    40e0:	04749c01 	ldrbteq	r9, [r4], #-3073	; 0xfffff3ff
    40e4:	fd130000 	ldc2	0, cr0, [r3, #-0]
    40e8:	01000018 	tsteq	r0, r8, lsl r0
    40ec:	00005b45 	andeq	r5, r0, r5, asr #22
    40f0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    40f4:	1bc40f00 	blne	ff107cfc <firstTime.4040+0xdf0f9814>
    40f8:	3f010000 	svccc	0x00010000
    40fc:	20003c30 	andcs	r3, r0, r0, lsr ip
    4100:	0000002a 	andeq	r0, r0, sl, lsr #32
    4104:	04989c01 	ldreq	r9, [r8], #3073	; 0xc01
    4108:	25130000 	ldrcs	r0, [r3, #-0]
    410c:	01000018 	tsteq	r0, r8, lsl r0
    4110:	00005b3f 	andeq	r5, r0, pc, lsr fp
    4114:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    4118:	1c161800 	ldcne	8, cr1, [r6], {-0}
    411c:	37010000 	strcc	r0, [r1, -r0]
    4120:	20003be0 	andcs	r3, r0, r0, ror #23
    4124:	00000050 	andeq	r0, r0, r0, asr r0
    4128:	04c69c01 	strbeq	r9, [r6], #3073	; 0xc01
    412c:	78160000 	ldmdavc	r6, {}	; <UNPREDICTABLE>
    4130:	5b370100 	blpl	dc4538 <startup-0x1f23bac8>
    4134:	02000000 	andeq	r0, r0, #0
    4138:	63106f91 	tstvs	r0, #580	; 0x244
    413c:	5b390100 	blpl	e44544 <startup-0x1f1bbabc>
    4140:	02000000 	andeq	r0, r0, #0
    4144:	19007791 	stmdbne	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    4148:	00001bb1 			; <UNDEFINED> instruction: 0x00001bb1
    414c:	3b9c2f01 	blcc	fe70fd58 <firstTime.4040+0xde701870>
    4150:	00442000 	subeq	r2, r4, r0
    4154:	9c010000 	stcls	0, cr0, [r1], {-0}
    4158:	01007816 	tsteq	r0, r6, lsl r8
    415c:	00005b2f 	andeq	r5, r0, pc, lsr #22
    4160:	6f910200 	svcvs	0x00910200
    4164:	01006310 	tsteq	r0, r0, lsl r3
    4168:	00005b31 	andeq	r5, r0, r1, lsr fp
    416c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    4170:	01400000 	mrseq	r0, (UNDEF: 64)
    4174:	00040000 	andeq	r0, r4, r0
    4178:	00000f05 	andeq	r0, r0, r5, lsl #30
    417c:	008f0104 	addeq	r0, pc, r4, lsl #2
    4180:	c70c0000 	strgt	r0, [ip, -r0]
    4184:	bc00001c 	stclt	0, cr0, [r0], {28}
    4188:	94200040 	strtls	r0, [r0], #-64	; 0xffffffc0
    418c:	4f000000 	svcmi	0x00000000
    4190:	02000015 	andeq	r0, r0, #21
    4194:	0000067d 	andeq	r0, r0, sp, ror r6
    4198:	6a040214 	bvs	1049f0 <startup-0x1fefb610>
    419c:	03000000 	movweq	r0, #0
    41a0:	00001cc2 	andeq	r1, r0, r2, asr #25
    41a4:	006a0502 	rsbeq	r0, sl, r2, lsl #10
    41a8:	03000000 	movweq	r0, #0
    41ac:	00000276 	andeq	r0, r0, r6, ror r2
    41b0:	006a0602 	rsbeq	r0, sl, r2, lsl #12
    41b4:	03040000 	movweq	r0, #16384	; 0x4000
    41b8:	000003e3 	andeq	r0, r0, r3, ror #7
    41bc:	00770802 	rsbseq	r0, r7, r2, lsl #16
    41c0:	03080000 	movweq	r0, #32768	; 0x8000
    41c4:	000003d3 	ldrdeq	r0, [r0], -r3
    41c8:	00770902 	rsbseq	r0, r7, r2, lsl #18
    41cc:	030c0000 	movweq	r0, #49152	; 0xc000
    41d0:	0000027b 	andeq	r0, r0, fp, ror r2
    41d4:	00940c02 	addseq	r0, r4, r2, lsl #24
    41d8:	00100000 	andseq	r0, r0, r0
    41dc:	00700404 	rsbseq	r0, r0, r4, lsl #8
    41e0:	01050000 	mrseq	r0, (UNDEF: 5)
    41e4:	0004c108 	andeq	ip, r4, r8, lsl #2
    41e8:	05040600 	streq	r0, [r4, #-1536]	; 0xfffffa00
    41ec:	00746e69 	rsbseq	r6, r4, r9, ror #28
    41f0:	00008e07 	andeq	r8, r0, r7, lsl #28
    41f4:	008e0800 	addeq	r0, lr, r0, lsl #16
    41f8:	77080000 	strvc	r0, [r8, -r0]
    41fc:	00000000 	andeq	r0, r0, r0
    4200:	00210404 	eoreq	r0, r1, r4, lsl #8
    4204:	04040000 	streq	r0, [r4], #-0
    4208:	0000007e 	andeq	r0, r0, lr, ror r0
    420c:	00067e09 	andeq	r7, r6, r9, lsl #28
    4210:	210d0200 	mrscs	r0, SP_fiq
    4214:	0a000000 	beq	421c <startup-0x1fffbde4>
    4218:	00001ca9 	andeq	r1, r0, r9, lsr #25
    421c:	41160c01 	tstmi	r6, r1, lsl #24
    4220:	003a2000 	eorseq	r2, sl, r0
    4224:	9c010000 	stcls	0, cr0, [r1], {-0}
    4228:	000000f3 	strdeq	r0, [r0], -r3
    422c:	6a626f0b 	bvs	189fe60 <startup-0x1e7601a0>
    4230:	f30c0100 	vrhadd.u8	d0, d12, d0
    4234:	02000000 	andeq	r0, r0, #0
    4238:	c20c7491 	andgt	r7, ip, #-1862270976	; 0x91000000
    423c:	0100001c 	tsteq	r0, ip, lsl r0
    4240:	00006a0c 	andeq	r6, r0, ip, lsl #20
    4244:	70910200 	addsvc	r0, r1, r0, lsl #4
    4248:	0002760c 	andeq	r7, r2, ip, lsl #12
    424c:	6a0c0100 	bvs	304654 <startup-0x1fcfb9ac>
    4250:	02000000 	andeq	r0, r0, #0
    4254:	d30c6c91 	movwle	r6, #52369	; 0xcc91
    4258:	01000003 	tsteq	r0, r3
    425c:	0000770c 	andeq	r7, r0, ip, lsl #14
    4260:	68910200 	ldmvs	r1, {r9}
    4264:	9a040400 	bls	10526c <startup-0x1fefad94>
    4268:	0d000000 	stceq	0, cr0, [r0, #-0]
    426c:	0000027b 	andeq	r0, r0, fp, ror r2
    4270:	40bc0401 	adcsmi	r0, ip, r1, lsl #8
    4274:	005a2000 	subseq	r2, sl, r0
    4278:	9c010000 	stcls	0, cr0, [r1], {-0}
    427c:	0007670c 	andeq	r6, r7, ip, lsl #14
    4280:	f3040100 	vrhadd.u8	d0, d4, d0
    4284:	02000000 	andeq	r0, r0, #0
    4288:	b80c6c91 	stmdalt	ip, {r0, r4, r7, sl, fp, sp, lr}
    428c:	0100001c 	tsteq	r0, ip, lsl r0
    4290:	00007704 	andeq	r7, r0, r4, lsl #14
    4294:	68910200 	ldmvs	r1, {r9}
    4298:	001c6c0e 	andseq	r6, ip, lr, lsl #24
    429c:	77050100 	strvc	r0, [r5, -r0, lsl #2]
    42a0:	02000000 	andeq	r0, r0, #0
    42a4:	480e7491 	stmdami	lr, {r0, r4, r7, sl, ip, sp, lr}
    42a8:	0100001b 	tsteq	r0, fp, lsl r0
    42ac:	00007706 	andeq	r7, r0, r6, lsl #14
    42b0:	70910200 	addsvc	r0, r1, r0, lsl #4
    42b4:	02e00000 	rsceq	r0, r0, #0
    42b8:	00040000 	andeq	r0, r4, r0
    42bc:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    42c0:	008f0104 	addeq	r0, pc, r4, lsl #2
    42c4:	740c0000 	strvc	r0, [ip], #-0
    42c8:	5000001d 	andpl	r0, r0, sp, lsl r0
    42cc:	e8200041 	stmda	r0!, {r0, r6}
    42d0:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
    42d4:	02000015 	andeq	r0, r0, #21
    42d8:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
    42dc:	03000000 	movweq	r0, #0
    42e0:	0000034b 	andeq	r0, r0, fp, asr #6
    42e4:	004e0702 	subeq	r0, lr, r2, lsl #14
    42e8:	03000000 	movweq	r0, #0
    42ec:	000006fe 	strdeq	r0, [r0], -lr
    42f0:	004e0802 	subeq	r0, lr, r2, lsl #16
    42f4:	03040000 	movweq	r0, #16384	; 0x4000
    42f8:	000018fd 	strdeq	r1, [r0], -sp
    42fc:	00550902 	subseq	r0, r5, r2, lsl #18
    4300:	00080000 	andeq	r0, r8, r0
    4304:	79070404 	stmdbvc	r7, {r2, sl}
    4308:	05000003 	streq	r0, [r0, #-3]
    430c:	00005b04 	andeq	r5, r0, r4, lsl #22
    4310:	08010400 	stmdaeq	r1, {sl}
    4314:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
    4318:	001a4f06 	andseq	r4, sl, r6, lsl #30
    431c:	210a0200 	mrscs	r0, R10_fiq
    4320:	07000000 	streq	r0, [r0, -r0]
    4324:	00000024 	andeq	r0, r0, r4, lsr #32
    4328:	9e06030c 	cdpls	3, 0, cr0, cr6, cr12, {0}
    432c:	03000000 	movweq	r0, #0
    4330:	000005ae 	andeq	r0, r0, lr, lsr #11
    4334:	009e0703 	addseq	r0, lr, r3, lsl #14
    4338:	03000000 	movweq	r0, #0
    433c:	0000002b 	andeq	r0, r0, fp, lsr #32
    4340:	009e0803 	addseq	r0, lr, r3, lsl #16
    4344:	03040000 	movweq	r0, #16384	; 0x4000
    4348:	00000020 	andeq	r0, r0, r0, lsr #32
    434c:	009e0903 	addseq	r0, lr, r3, lsl #18
    4350:	00080000 	andeq	r0, r8, r0
    4354:	00620405 	rsbeq	r0, r2, r5, lsl #8
    4358:	0d060000 	stceq	0, cr0, [r6, #-0]
    435c:	03000016 	movweq	r0, #22
    4360:	00006d0a 	andeq	r6, r0, sl, lsl #26
    4364:	06c30700 	strbeq	r0, [r3], r0, lsl #14
    4368:	04240000 	strteq	r0, [r4], #-0
    436c:	00012806 	andeq	r2, r1, r6, lsl #16
    4370:	04460300 	strbeq	r0, [r6], #-768	; 0xfffffd00
    4374:	07040000 	streq	r0, [r4, -r0]
    4378:	00000128 	andeq	r0, r0, r8, lsr #2
    437c:	06cf0300 	strbeq	r0, [pc], r0, lsl #6
    4380:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    4384:	0000012e 	andeq	r0, r0, lr, lsr #2
    4388:	061f0304 	ldreq	r0, [pc], -r4, lsl #6
    438c:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    4390:	0000012e 	andeq	r0, r0, lr, lsr #2
    4394:	064b0308 	strbeq	r0, [fp], -r8, lsl #6
    4398:	0c040000 	stceq	0, cr0, [r4], {-0}
    439c:	00000146 	andeq	r0, r0, r6, asr #2
    43a0:	0332030c 	teqeq	r2, #12, 6	; 0x30000000
    43a4:	0d040000 	stceq	0, cr0, [r4, #-0]
    43a8:	00000146 	andeq	r0, r0, r6, asr #2
    43ac:	04580310 	ldrbeq	r0, [r8], #-784	; 0xfffffcf0
    43b0:	10040000 	andne	r0, r4, r0
    43b4:	0000012e 	andeq	r0, r0, lr, lsr #2
    43b8:	00600314 	rsbeq	r0, r0, r4, lsl r3
    43bc:	11040000 	mrsne	r0, (UNDEF: 4)
    43c0:	0000012e 	andeq	r0, r0, lr, lsr #2
    43c4:	03c90318 	biceq	r0, r9, #24, 6	; 0x60000000
    43c8:	12040000 	andne	r0, r4, #0
    43cc:	0000012e 	andeq	r0, r0, lr, lsr #2
    43d0:	03d9031c 	bicseq	r0, r9, #28, 6	; 0x70000000
    43d4:	13040000 	movwne	r0, #16384	; 0x4000
    43d8:	0000012e 	andeq	r0, r0, lr, lsr #2
    43dc:	04050020 	streq	r0, [r5], #-32	; 0xffffffe0
    43e0:	000000a4 	andeq	r0, r0, r4, lsr #1
    43e4:	69050408 	stmdbvs	r5, {r3, sl}
    43e8:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    43ec:	00000140 	andeq	r0, r0, r0, asr #2
    43f0:	0001400a 	andeq	r4, r1, sl
    43f4:	04050000 	streq	r0, [r5], #-0
    43f8:	000000af 	andeq	r0, r0, pc, lsr #1
    43fc:	01350405 	teqeq	r5, r5, lsl #8
    4400:	c4060000 	strgt	r0, [r6], #-0
    4404:	04000006 	streq	r0, [r0], #-6
    4408:	0000af15 	andeq	sl, r0, r5, lsl pc
    440c:	01620b00 	cmneq	r2, r0, lsl #22
    4410:	01620000 	cmneq	r2, r0
    4414:	000c0000 	andeq	r0, ip, r0
    4418:	014c0405 	cmpeq	ip, r5, lsl #8
    441c:	3b0d0000 	blcc	344424 <startup-0x1fcbbbdc>
    4420:	04000005 	streq	r0, [r0], #-5
    4424:	0001571c 	andeq	r5, r1, ip, lsl r7
    4428:	04140d00 	ldreq	r0, [r4], #-3328	; 0xfffff300
    442c:	1d040000 	stcne	0, cr0, [r4, #-0]
    4430:	0000012e 	andeq	r0, r0, lr, lsr #2
    4434:	00005b0b 	andeq	r5, r0, fp, lsl #22
    4438:	00018f00 	andeq	r8, r1, r0, lsl #30
    443c:	018f0e00 	orreq	r0, pc, r0, lsl #28
    4440:	03ff0000 	mvnseq	r0, #0
    4444:	07040400 	streq	r0, [r4, -r0, lsl #8]
    4448:	000003f6 	strdeq	r0, [r0], -r6
    444c:	001da40f 	andseq	sl, sp, pc, lsl #8
    4450:	7e030500 	cfsh32vc	mvfx0, mvfx3, #0
    4454:	05000001 	streq	r0, [r0, #-1]
    4458:	00cc7403 	sbceq	r7, ip, r3, lsl #8
    445c:	1d440f20 	stclne	15, cr0, [r4, #-128]	; 0xffffff80
    4460:	03060000 	movweq	r0, #24576	; 0x6000
    4464:	0000017e 	andeq	r0, r0, lr, ror r1
    4468:	d0740305 	rsbsle	r0, r4, r5, lsl #6
    446c:	210f2000 	mrscs	r2, CPSR
    4470:	0700001d 	smladeq	r0, sp, r0, r0
    4474:	00017e03 	andeq	r7, r1, r3, lsl #28
    4478:	74030500 	strvc	r0, [r3], #-1280	; 0xfffffb00
    447c:	102000d4 	ldrdne	r0, [r0], -r4	; <UNPREDICTABLE>
    4480:	00001d06 	andeq	r1, r0, r6, lsl #26
    4484:	009e0801 	addseq	r0, lr, r1, lsl #16
    4488:	03050000 	movweq	r0, #20480	; 0x5000
    448c:	20006df0 	strdcs	r6, [r0], -r0
    4490:	001de010 	andseq	lr, sp, r0, lsl r0
    4494:	9e090100 	adflse	f0, f1, f0
    4498:	05000000 	streq	r0, [r0, #-0]
    449c:	006dbc03 	rsbeq	fp, sp, r3, lsl #24
    44a0:	1d671020 	stclne	0, cr1, [r7, #-128]!	; 0xffffff80
    44a4:	0a010000 	beq	444ac <startup-0x1ffbbb54>
    44a8:	0000009e 	muleq	r0, lr, r0
    44ac:	6e000305 	cdpvs	3, 0, cr0, cr0, cr5, {0}
    44b0:	b7102000 	ldrlt	r2, [r0, -r0]
    44b4:	0100001d 	tsteq	r0, sp, lsl r0
    44b8:	0000620c 	andeq	r6, r0, ip, lsl #4
    44bc:	b0030500 	andlt	r0, r3, r0, lsl #10
    44c0:	1020006d 	eorne	r0, r0, sp, rrx
    44c4:	00001d56 	andeq	r1, r0, r6, asr sp
    44c8:	00620d01 	rsbeq	r0, r2, r1, lsl #26
    44cc:	03050000 	movweq	r0, #20480	; 0x5000
    44d0:	20006da4 	andcs	r6, r0, r4, lsr #27
    44d4:	001d3410 	andseq	r3, sp, r0, lsl r4
    44d8:	620e0100 	andvs	r0, lr, #0, 2
    44dc:	05000000 	streq	r0, [r0, #-0]
    44e0:	006d9803 	rsbeq	r9, sp, r3, lsl #16
    44e4:	1dd51020 	ldclne	0, cr1, [r5, #128]	; 0x80
    44e8:	11010000 	mrsne	r0, (UNDEF: 1)
    44ec:	0000014c 	andeq	r0, r0, ip, asr #2
    44f0:	6dc00305 	stclvs	3, cr0, [r0, #20]
    44f4:	f9102000 			; <UNDEFINED> instruction: 0xf9102000
    44f8:	0100001c 	tsteq	r0, ip, lsl r0
    44fc:	0000a412 	andeq	sl, r0, r2, lsl r4
    4500:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
    4504:	0b20006d 	bleq	8046c0 <startup-0x1f7fb940>
    4508:	000000a4 	andeq	r0, r0, r4, lsr #1
    450c:	00000261 	andeq	r0, r0, r1, ror #4
    4510:	00018f11 	andeq	r8, r1, r1, lsl pc
    4514:	10000000 	andne	r0, r0, r0
    4518:	00001d13 	andeq	r1, r0, r3, lsl sp
    451c:	02511301 	subseq	r1, r1, #67108864	; 0x4000000
    4520:	03050000 	movweq	r0, #20480	; 0x5000
    4524:	20006de4 	andcs	r6, r0, r4, ror #27
    4528:	001dc812 	andseq	ip, sp, r2, lsl r8
    452c:	c4220100 	strtgt	r0, [r2], #-256	; 0xffffff00
    4530:	74200041 	strtvc	r0, [r0], #-65	; 0xffffffbf
    4534:	01000000 	mrseq	r0, (UNDEF: 0)
    4538:	0002a79c 	muleq	r2, ip, r7
    453c:	1dd51300 	ldclne	3, cr1, [r5]
    4540:	22010000 	andcs	r0, r1, #0
    4544:	00000162 	andeq	r0, r0, r2, ror #2
    4548:	0f6c9102 	svceq	0x006c9102
    454c:	000008ee 	andeq	r0, r0, lr, ror #17
    4550:	012e2301 			; <UNDEFINED> instruction: 0x012e2301
    4554:	03050000 	movweq	r0, #20480	; 0x5000
    4558:	2000d874 	andcs	sp, r0, r4, ror r8
    455c:	048e1400 	streq	r1, [lr], #1024	; 0x400
    4560:	14010000 	strne	r0, [r1], #-0
    4564:	20004150 	andcs	r4, r0, r0, asr r1
    4568:	00000074 	andeq	r0, r0, r4, ror r0
    456c:	830f9c01 	movwhi	r9, #64513	; 0xfc01
    4570:	0100000d 	tsteq	r0, sp
    4574:	00009e16 	andeq	r9, r0, r6, lsl lr
    4578:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    457c:	000d8d0f 	andeq	r8, sp, pc, lsl #26
    4580:	9e190100 	muflse	f0, f1, f0
    4584:	02000000 	andeq	r0, r0, #0
    4588:	830f7091 	movwhi	r7, #61585	; 0xf091
    458c:	0100000b 	tsteq	r0, fp
    4590:	00009e1c 	andeq	r9, r0, ip, lsl lr
    4594:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4598:	02e00000 	rsceq	r0, r0, #0
    459c:	00040000 	andeq	r0, r4, r0
    45a0:	000010d9 	ldrdeq	r1, [r0], -r9
    45a4:	008f0104 	addeq	r0, pc, r4, lsl #2
    45a8:	2d0c0000 	stccs	0, cr0, [ip, #-0]
    45ac:	3800001e 	stmdacc	r0, {r1, r2, r3, r4}
    45b0:	e8200042 	stmda	r0!, {r1, r6}
    45b4:	a3000000 	movwge	r0, #0
    45b8:	02000016 	andeq	r0, r0, #22
    45bc:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
    45c0:	03000000 	movweq	r0, #0
    45c4:	0000034b 	andeq	r0, r0, fp, asr #6
    45c8:	004e0702 	subeq	r0, lr, r2, lsl #14
    45cc:	03000000 	movweq	r0, #0
    45d0:	000006fe 	strdeq	r0, [r0], -lr
    45d4:	004e0802 	subeq	r0, lr, r2, lsl #16
    45d8:	03040000 	movweq	r0, #16384	; 0x4000
    45dc:	000018fd 	strdeq	r1, [r0], -sp
    45e0:	00550902 	subseq	r0, r5, r2, lsl #18
    45e4:	00080000 	andeq	r0, r8, r0
    45e8:	79070404 	stmdbvc	r7, {r2, sl}
    45ec:	05000003 	streq	r0, [r0, #-3]
    45f0:	00005b04 	andeq	r5, r0, r4, lsl #22
    45f4:	08010400 	stmdaeq	r1, {sl}
    45f8:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
    45fc:	001a4f06 	andseq	r4, sl, r6, lsl #30
    4600:	210a0200 	mrscs	r0, R10_fiq
    4604:	07000000 	streq	r0, [r0, -r0]
    4608:	00000024 	andeq	r0, r0, r4, lsr #32
    460c:	9e06030c 	cdpls	3, 0, cr0, cr6, cr12, {0}
    4610:	03000000 	movweq	r0, #0
    4614:	000005ae 	andeq	r0, r0, lr, lsr #11
    4618:	009e0703 	addseq	r0, lr, r3, lsl #14
    461c:	03000000 	movweq	r0, #0
    4620:	0000002b 	andeq	r0, r0, fp, lsr #32
    4624:	009e0803 	addseq	r0, lr, r3, lsl #16
    4628:	03040000 	movweq	r0, #16384	; 0x4000
    462c:	00000020 	andeq	r0, r0, r0, lsr #32
    4630:	009e0903 	addseq	r0, lr, r3, lsl #18
    4634:	00080000 	andeq	r0, r8, r0
    4638:	00620405 	rsbeq	r0, r2, r5, lsl #8
    463c:	0d060000 	stceq	0, cr0, [r6, #-0]
    4640:	03000016 	movweq	r0, #22
    4644:	00006d0a 	andeq	r6, r0, sl, lsl #26
    4648:	06c30700 	strbeq	r0, [r3], r0, lsl #14
    464c:	04240000 	strteq	r0, [r4], #-0
    4650:	00012806 	andeq	r2, r1, r6, lsl #16
    4654:	04460300 	strbeq	r0, [r6], #-768	; 0xfffffd00
    4658:	07040000 	streq	r0, [r4, -r0]
    465c:	00000128 	andeq	r0, r0, r8, lsr #2
    4660:	06cf0300 	strbeq	r0, [pc], r0, lsl #6
    4664:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    4668:	0000012e 	andeq	r0, r0, lr, lsr #2
    466c:	061f0304 	ldreq	r0, [pc], -r4, lsl #6
    4670:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    4674:	0000012e 	andeq	r0, r0, lr, lsr #2
    4678:	064b0308 	strbeq	r0, [fp], -r8, lsl #6
    467c:	0c040000 	stceq	0, cr0, [r4], {-0}
    4680:	00000146 	andeq	r0, r0, r6, asr #2
    4684:	0332030c 	teqeq	r2, #12, 6	; 0x30000000
    4688:	0d040000 	stceq	0, cr0, [r4, #-0]
    468c:	00000146 	andeq	r0, r0, r6, asr #2
    4690:	04580310 	ldrbeq	r0, [r8], #-784	; 0xfffffcf0
    4694:	10040000 	andne	r0, r4, r0
    4698:	0000012e 	andeq	r0, r0, lr, lsr #2
    469c:	00600314 	rsbeq	r0, r0, r4, lsl r3
    46a0:	11040000 	mrsne	r0, (UNDEF: 4)
    46a4:	0000012e 	andeq	r0, r0, lr, lsr #2
    46a8:	03c90318 	biceq	r0, r9, #24, 6	; 0x60000000
    46ac:	12040000 	andne	r0, r4, #0
    46b0:	0000012e 	andeq	r0, r0, lr, lsr #2
    46b4:	03d9031c 	bicseq	r0, r9, #28, 6	; 0x70000000
    46b8:	13040000 	movwne	r0, #16384	; 0x4000
    46bc:	0000012e 	andeq	r0, r0, lr, lsr #2
    46c0:	04050020 	streq	r0, [r5], #-32	; 0xffffffe0
    46c4:	000000a4 	andeq	r0, r0, r4, lsr #1
    46c8:	69050408 	stmdbvs	r5, {r3, sl}
    46cc:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    46d0:	00000140 	andeq	r0, r0, r0, asr #2
    46d4:	0001400a 	andeq	r4, r1, sl
    46d8:	04050000 	streq	r0, [r5], #-0
    46dc:	000000af 	andeq	r0, r0, pc, lsr #1
    46e0:	01350405 	teqeq	r5, r5, lsl #8
    46e4:	c4060000 	strgt	r0, [r6], #-0
    46e8:	04000006 	streq	r0, [r0], #-6
    46ec:	0000af15 	andeq	sl, r0, r5, lsl pc
    46f0:	01620b00 	cmneq	r2, r0, lsl #22
    46f4:	01620000 	cmneq	r2, r0
    46f8:	000c0000 	andeq	r0, ip, r0
    46fc:	014c0405 	cmpeq	ip, r5, lsl #8
    4700:	3b0d0000 	blcc	344708 <startup-0x1fcbb8f8>
    4704:	04000005 	streq	r0, [r0], #-5
    4708:	0001571c 	andeq	r5, r1, ip, lsl r7
    470c:	04140d00 	ldreq	r0, [r4], #-3328	; 0xfffff300
    4710:	1d040000 	stcne	0, cr0, [r4, #-0]
    4714:	0000012e 	andeq	r0, r0, lr, lsr #2
    4718:	00005b0b 	andeq	r5, r0, fp, lsl #22
    471c:	00018f00 	andeq	r8, r1, r0, lsl #30
    4720:	018f0e00 	orreq	r0, pc, r0, lsl #28
    4724:	03ff0000 	mvnseq	r0, #0
    4728:	07040400 	streq	r0, [r4, -r0, lsl #8]
    472c:	000003f6 	strdeq	r0, [r0], -r6
    4730:	001dfa0f 	andseq	pc, sp, pc, lsl #20
    4734:	7e030500 	cfsh32vc	mvfx0, mvfx3, #0
    4738:	05000001 	streq	r0, [r0, #-1]
    473c:	00d87803 	sbcseq	r7, r8, r3, lsl #16
    4740:	1ebd0f20 	cdpne	15, 11, cr0, cr13, cr0, {1}
    4744:	03060000 	movweq	r0, #24576	; 0x6000
    4748:	0000017e 	andeq	r0, r0, lr, ror r1
    474c:	dc780305 	ldclle	3, cr0, [r8], #-20	; 0xffffffec
    4750:	9a0f2000 	bls	3cc758 <startup-0x1fc338a8>
    4754:	0700001e 	smladeq	r0, lr, r0, r0
    4758:	00017e03 	andeq	r7, r1, r3, lsl #28
    475c:	78030500 	stmdavc	r3, {r8, sl}
    4760:	102000e0 	eorne	r0, r0, r0, ror #1
    4764:	00001e70 	andeq	r1, r0, r0, ror lr
    4768:	009e0801 	addseq	r0, lr, r1, lsl #16
    476c:	03050000 	movweq	r0, #20480	; 0x5000
    4770:	20006e6c 	andcs	r6, r0, ip, ror #28
    4774:	001e2010 	andseq	r2, lr, r0, lsl r0
    4778:	9e090100 	adflse	f0, f1, f0
    477c:	05000000 	streq	r0, [r0, #-0]
    4780:	006e2803 	rsbeq	r2, lr, r3, lsl #16
    4784:	1dec1020 	stclne	0, cr1, [ip, #128]!	; 0x80
    4788:	0a010000 	beq	44790 <startup-0x1ffbb870>
    478c:	0000009e 	muleq	r0, lr, r0
    4790:	6e500305 	cdpvs	3, 5, cr0, cr0, cr5, {0}
    4794:	5e102000 	cdppl	0, 1, cr2, cr0, cr0, {0}
    4798:	0100001e 	tsteq	r0, lr, lsl r0
    479c:	0000620c 	andeq	r6, r0, ip, lsl #4
    47a0:	54030500 	strpl	r0, [r3], #-1280	; 0xfffffb00
    47a4:	1020006e 	eorne	r0, r0, lr, rrx
    47a8:	00001e0e 	andeq	r1, r0, lr, lsl #28
    47ac:	00620d01 	rsbeq	r0, r2, r1, lsl #26
    47b0:	03050000 	movweq	r0, #20480	; 0x5000
    47b4:	20006e60 	andcs	r6, r0, r0, ror #28
    47b8:	001edc10 	andseq	sp, lr, r0, lsl ip
    47bc:	620e0100 	andvs	r0, lr, #0, 2
    47c0:	05000000 	streq	r0, [r0, #-0]
    47c4:	006e4403 	rsbeq	r4, lr, r3, lsl #8
    47c8:	1ed01020 	cdpne	0, 13, cr1, cr0, cr0, {1}
    47cc:	11010000 	mrsne	r0, (UNDEF: 1)
    47d0:	0000014c 	andeq	r0, r0, ip, asr #2
    47d4:	6e040305 	cdpvs	3, 0, cr0, cr4, cr5, {0}
    47d8:	7e102000 	cdpvc	0, 1, cr2, cr0, cr0, {0}
    47dc:	0100001e 	tsteq	r0, lr, lsl r0
    47e0:	0000a412 	andeq	sl, r0, r2, lsl r4
    47e4:	38030500 	stmdacc	r3, {r8, sl}
    47e8:	0b20006e 	bleq	8049a8 <startup-0x1f7fb658>
    47ec:	000000a4 	andeq	r0, r0, r4, lsr #1
    47f0:	00000261 	andeq	r0, r0, r1, ror #4
    47f4:	00018f11 	andeq	r8, r1, r1, lsl pc
    47f8:	10000000 	andne	r0, r0, r0
    47fc:	00001eae 	andeq	r1, r0, lr, lsr #29
    4800:	02511301 	subseq	r1, r1, #67108864	; 0x4000000
    4804:	03050000 	movweq	r0, #20480	; 0x5000
    4808:	20006e2c 	andcs	r6, r0, ip, lsr #28
    480c:	001e8c12 	andseq	r8, lr, r2, lsl ip
    4810:	ac220100 	stfges	f0, [r2], #-0
    4814:	74200042 	strtvc	r0, [r0], #-66	; 0xffffffbe
    4818:	01000000 	mrseq	r0, (UNDEF: 0)
    481c:	0002a79c 	muleq	r2, ip, r7
    4820:	1ed01300 	cdpne	3, 13, cr1, cr0, cr0, {0}
    4824:	22010000 	andcs	r0, r1, #0
    4828:	00000162 	andeq	r0, r0, r2, ror #2
    482c:	0f6c9102 	svceq	0x006c9102
    4830:	000008ee 	andeq	r0, r0, lr, ror #17
    4834:	012e2301 			; <UNDEFINED> instruction: 0x012e2301
    4838:	03050000 	movweq	r0, #20480	; 0x5000
    483c:	2000e478 	andcs	lr, r0, r8, ror r4
    4840:	048e1400 	streq	r1, [lr], #1024	; 0x400
    4844:	14010000 	strne	r0, [r1], #-0
    4848:	20004238 	andcs	r4, r0, r8, lsr r2
    484c:	00000074 	andeq	r0, r0, r4, ror r0
    4850:	830f9c01 	movwhi	r9, #64513	; 0xfc01
    4854:	0100000d 	tsteq	r0, sp
    4858:	00009e16 	andeq	r9, r0, r6, lsl lr
    485c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4860:	000d8d0f 	andeq	r8, sp, pc, lsl #26
    4864:	9e190100 	muflse	f0, f1, f0
    4868:	02000000 	andeq	r0, r0, #0
    486c:	830f7091 	movwhi	r7, #61585	; 0xf091
    4870:	0100000b 	tsteq	r0, fp
    4874:	00009e1c 	andeq	r9, r0, ip, lsl lr
    4878:	6c910200 	lfmvs	f0, 4, [r1], {0}
    487c:	02df0000 	sbcseq	r0, pc, #0
    4880:	00040000 	andeq	r0, r4, r0
    4884:	000011e2 	andeq	r1, r0, r2, ror #3
    4888:	008f0104 	addeq	r0, pc, r4, lsl #2
    488c:	ed0c0000 	stc	0, cr0, [ip, #-0]
    4890:	2000001e 	andcs	r0, r0, lr, lsl r0
    4894:	e8200043 	stmda	r0!, {r0, r1, r6}
    4898:	81000000 	mrshi	r0, (UNDEF: 0)
    489c:	02000017 	andeq	r0, r0, #23
    48a0:	4e05020c 	cdpmi	2, 0, cr0, cr5, cr12, {0}
    48a4:	03000000 	movweq	r0, #0
    48a8:	0000034b 	andeq	r0, r0, fp, asr #6
    48ac:	004e0702 	subeq	r0, lr, r2, lsl #14
    48b0:	03000000 	movweq	r0, #0
    48b4:	000006fe 	strdeq	r0, [r0], -lr
    48b8:	004e0802 	subeq	r0, lr, r2, lsl #16
    48bc:	03040000 	movweq	r0, #16384	; 0x4000
    48c0:	000018fd 	strdeq	r1, [r0], -sp
    48c4:	00550902 	subseq	r0, r5, r2, lsl #18
    48c8:	00080000 	andeq	r0, r8, r0
    48cc:	79070404 	stmdbvc	r7, {r2, sl}
    48d0:	05000003 	streq	r0, [r0, #-3]
    48d4:	00005b04 	andeq	r5, r0, r4, lsl #22
    48d8:	08010400 	stmdaeq	r1, {sl}
    48dc:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
    48e0:	001a4f06 	andseq	r4, sl, r6, lsl #30
    48e4:	210a0200 	mrscs	r0, R10_fiq
    48e8:	07000000 	streq	r0, [r0, -r0]
    48ec:	00000024 	andeq	r0, r0, r4, lsr #32
    48f0:	9e06030c 	cdpls	3, 0, cr0, cr6, cr12, {0}
    48f4:	03000000 	movweq	r0, #0
    48f8:	000005ae 	andeq	r0, r0, lr, lsr #11
    48fc:	009e0703 	addseq	r0, lr, r3, lsl #14
    4900:	03000000 	movweq	r0, #0
    4904:	0000002b 	andeq	r0, r0, fp, lsr #32
    4908:	009e0803 	addseq	r0, lr, r3, lsl #16
    490c:	03040000 	movweq	r0, #16384	; 0x4000
    4910:	00000020 	andeq	r0, r0, r0, lsr #32
    4914:	009e0903 	addseq	r0, lr, r3, lsl #18
    4918:	00080000 	andeq	r0, r8, r0
    491c:	00620405 	rsbeq	r0, r2, r5, lsl #8
    4920:	0d060000 	stceq	0, cr0, [r6, #-0]
    4924:	03000016 	movweq	r0, #22
    4928:	00006d0a 	andeq	r6, r0, sl, lsl #26
    492c:	06c30700 	strbeq	r0, [r3], r0, lsl #14
    4930:	04240000 	strteq	r0, [r4], #-0
    4934:	00012806 	andeq	r2, r1, r6, lsl #16
    4938:	04460300 	strbeq	r0, [r6], #-768	; 0xfffffd00
    493c:	07040000 	streq	r0, [r4, -r0]
    4940:	00000128 	andeq	r0, r0, r8, lsr #2
    4944:	06cf0300 	strbeq	r0, [pc], r0, lsl #6
    4948:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    494c:	0000012e 	andeq	r0, r0, lr, lsr #2
    4950:	061f0304 	ldreq	r0, [pc], -r4, lsl #6
    4954:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    4958:	0000012e 	andeq	r0, r0, lr, lsr #2
    495c:	064b0308 	strbeq	r0, [fp], -r8, lsl #6
    4960:	0c040000 	stceq	0, cr0, [r4], {-0}
    4964:	00000146 	andeq	r0, r0, r6, asr #2
    4968:	0332030c 	teqeq	r2, #12, 6	; 0x30000000
    496c:	0d040000 	stceq	0, cr0, [r4, #-0]
    4970:	00000146 	andeq	r0, r0, r6, asr #2
    4974:	04580310 	ldrbeq	r0, [r8], #-784	; 0xfffffcf0
    4978:	10040000 	andne	r0, r4, r0
    497c:	0000012e 	andeq	r0, r0, lr, lsr #2
    4980:	00600314 	rsbeq	r0, r0, r4, lsl r3
    4984:	11040000 	mrsne	r0, (UNDEF: 4)
    4988:	0000012e 	andeq	r0, r0, lr, lsr #2
    498c:	03c90318 	biceq	r0, r9, #24, 6	; 0x60000000
    4990:	12040000 	andne	r0, r4, #0
    4994:	0000012e 	andeq	r0, r0, lr, lsr #2
    4998:	03d9031c 	bicseq	r0, r9, #28, 6	; 0x70000000
    499c:	13040000 	movwne	r0, #16384	; 0x4000
    49a0:	0000012e 	andeq	r0, r0, lr, lsr #2
    49a4:	04050020 	streq	r0, [r5], #-32	; 0xffffffe0
    49a8:	000000a4 	andeq	r0, r0, r4, lsr #1
    49ac:	69050408 	stmdbvs	r5, {r3, sl}
    49b0:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    49b4:	00000140 	andeq	r0, r0, r0, asr #2
    49b8:	0001400a 	andeq	r4, r1, sl
    49bc:	04050000 	streq	r0, [r5], #-0
    49c0:	000000af 	andeq	r0, r0, pc, lsr #1
    49c4:	01350405 	teqeq	r5, r5, lsl #8
    49c8:	c4060000 	strgt	r0, [r6], #-0
    49cc:	04000006 	streq	r0, [r0], #-6
    49d0:	0000af15 	andeq	sl, r0, r5, lsl pc
    49d4:	01620b00 	cmneq	r2, r0, lsl #22
    49d8:	01620000 	cmneq	r2, r0
    49dc:	000c0000 	andeq	r0, ip, r0
    49e0:	014c0405 	cmpeq	ip, r5, lsl #8
    49e4:	3b0d0000 	blcc	3449ec <startup-0x1fcbb614>
    49e8:	04000005 	streq	r0, [r0], #-5
    49ec:	0001571c 	andeq	r5, r1, ip, lsl r7
    49f0:	04140d00 	ldreq	r0, [r4], #-3328	; 0xfffff300
    49f4:	1d040000 	stcne	0, cr0, [r4, #-0]
    49f8:	0000012e 	andeq	r0, r0, lr, lsr #2
    49fc:	00005b0b 	andeq	r5, r0, fp, lsl #22
    4a00:	00018e00 	andeq	r8, r1, r0, lsl #28
    4a04:	018e0e00 	orreq	r0, lr, r0, lsl #28
    4a08:	00210000 	eoreq	r0, r1, r0
    4a0c:	f6070404 			; <UNDEFINED> instruction: 0xf6070404
    4a10:	0f000003 	svceq	0x00000003
    4a14:	00001f1c 	andeq	r1, r0, ip, lsl pc
    4a18:	017e0305 	cmneq	lr, r5, lsl #6
    4a1c:	03050000 	movweq	r0, #20480	; 0x5000
    4a20:	2000e47c 	andcs	lr, r0, ip, ror r4
    4a24:	001f660f 	andseq	r6, pc, pc, lsl #12
    4a28:	7e030600 	cfmadd32vc	mvax0, mvfx0, mvfx3, mvfx0
    4a2c:	05000001 	streq	r0, [r0, #-1]
    4a30:	00e4a003 	rsceq	sl, r4, r3
    4a34:	1f440f20 	svcne	0x00440f20
    4a38:	03070000 	movweq	r0, #28672	; 0x7000
    4a3c:	0000017e 	andeq	r0, r0, lr, ror r1
    4a40:	e4c40305 	strb	r0, [r4], #773	; 0x305
    4a44:	ab102000 	blge	40ca4c <startup-0x1fbf35b4>
    4a48:	0100001f 	tsteq	r0, pc, lsl r0
    4a4c:	00009e08 	andeq	r9, r0, r8, lsl #28
    4a50:	7c030500 	cfstr32vc	mvfx0, [r3], {-0}
    4a54:	1020006e 	eorne	r0, r0, lr, rrx
    4a58:	00001f87 	andeq	r1, r0, r7, lsl #31
    4a5c:	009e0901 	addseq	r0, lr, r1, lsl #18
    4a60:	03050000 	movweq	r0, #20480	; 0x5000
    4a64:	20006ebc 			; <UNDEFINED> instruction: 0x20006ebc
    4a68:	001f2e10 	andseq	r2, pc, r0, lsl lr	; <UNPREDICTABLE>
    4a6c:	9e0a0100 	adflse	f0, f2, f0
    4a70:	05000000 	streq	r0, [r0, #-0]
    4a74:	006ed803 	rsbeq	sp, lr, r3, lsl #16
    4a78:	1f561020 	svcne	0x00561020
    4a7c:	0c010000 	stceq	0, cr0, [r1], {-0}
    4a80:	00000062 	andeq	r0, r0, r2, rrx
    4a84:	6ec00305 	cdpvs	3, 12, cr0, cr0, cr5, {0}
    4a88:	77102000 	ldrvc	r2, [r0, -r0]
    4a8c:	0100001f 	tsteq	r0, pc, lsl r0
    4a90:	0000620d 	andeq	r6, r0, sp, lsl #4
    4a94:	8c030500 	cfstr32hi	mvfx0, [r3], {-0}
    4a98:	1020006e 	eorne	r0, r0, lr, rrx
    4a9c:	00001fb7 			; <UNDEFINED> instruction: 0x00001fb7
    4aa0:	00620e01 	rsbeq	r0, r2, r1, lsl #28
    4aa4:	03050000 	movweq	r0, #20480	; 0x5000
    4aa8:	20006ecc 	andcs	r6, r0, ip, asr #29
    4aac:	001f3a10 	andseq	r3, pc, r0, lsl sl	; <UNPREDICTABLE>
    4ab0:	4c110100 	ldfmis	f0, [r1], {-0}
    4ab4:	05000001 	streq	r0, [r0, #-1]
    4ab8:	006e9803 	rsbeq	r9, lr, r3, lsl #16
    4abc:	1f9f1020 	svcne	0x009f1020
    4ac0:	12010000 	andne	r0, r1, #0
    4ac4:	000000a4 	andeq	r0, r0, r4, lsr #1
    4ac8:	6e800305 	cdpvs	3, 8, cr0, cr0, cr5, {0}
    4acc:	a40b2000 	strge	r2, [fp], #-0
    4ad0:	60000000 	andvs	r0, r0, r0
    4ad4:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    4ad8:	0000018e 	andeq	r0, r0, lr, lsl #3
    4adc:	92100000 	andsls	r0, r0, #0
    4ae0:	0100001f 	tsteq	r0, pc, lsl r0
    4ae4:	00025013 	andeq	r5, r2, r3, lsl r0
    4ae8:	70030500 	andvc	r0, r3, r0, lsl #10
    4aec:	1120006e 			; <UNDEFINED> instruction: 0x1120006e
    4af0:	000002dd 	ldrdeq	r0, [r0], -sp
    4af4:	43942201 	orrsmi	r2, r4, #268435456	; 0x10000000
    4af8:	00742000 	rsbseq	r2, r4, r0
    4afc:	9c010000 	stcls	0, cr0, [r1], {-0}
    4b00:	000002a6 	andeq	r0, r0, r6, lsr #5
    4b04:	001f3a12 	andseq	r3, pc, r2, lsl sl	; <UNPREDICTABLE>
    4b08:	62220100 	eorvs	r0, r2, #0, 2
    4b0c:	02000001 	andeq	r0, r0, #1
    4b10:	ee0f6c91 	mcr	12, 0, r6, cr15, cr1, {4}
    4b14:	01000008 	tsteq	r0, r8
    4b18:	00012e23 	andeq	r2, r1, r3, lsr #28
    4b1c:	e8030500 	stmda	r3, {r8, sl}
    4b20:	002000e4 	eoreq	r0, r0, r4, ror #1
    4b24:	00048e13 	andeq	r8, r4, r3, lsl lr
    4b28:	20140100 	andscs	r0, r4, r0, lsl #2
    4b2c:	74200043 	strtvc	r0, [r0], #-67	; 0xffffffbd
    4b30:	01000000 	mrseq	r0, (UNDEF: 0)
    4b34:	0d830f9c 	stceq	15, cr0, [r3, #624]	; 0x270
    4b38:	16010000 	strne	r0, [r1], -r0
    4b3c:	0000009e 	muleq	r0, lr, r0
    4b40:	0f749102 	svceq	0x00749102
    4b44:	00000d8d 	andeq	r0, r0, sp, lsl #27
    4b48:	009e1901 	addseq	r1, lr, r1, lsl #18
    4b4c:	91020000 	mrsls	r0, (UNDEF: 2)
    4b50:	0b830f70 	bleq	fe0c8918 <firstTime.4040+0xde0ba430>
    4b54:	1c010000 	stcne	0, cr0, [r1], {-0}
    4b58:	0000009e 	muleq	r0, lr, r0
    4b5c:	006c9102 	rsbeq	r9, ip, r2, lsl #2
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	1117550e 	tstne	r7, lr, lsl #10
       c:	00171001 	andseq	r1, r7, r1
      10:	01130200 	tsteq	r3, r0, lsl #4
      14:	0b3a0b0b 	bleq	e82c48 <startup-0x1f17d3b8>
      18:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      1c:	0d030000 	stceq	0, cr0, [r3, #-0]
      20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
      24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      28:	000b3813 	andeq	r3, fp, r3, lsl r8
      2c:	00240400 	eoreq	r0, r4, r0, lsl #8
      30:	0b3e0b0b 	bleq	f82c64 <startup-0x1f07d39c>
      34:	00000e03 	andeq	r0, r0, r3, lsl #28
      38:	0b000f05 	bleq	3c54 <startup-0x1fffc3ac>
      3c:	0013490b 	andseq	r4, r3, fp, lsl #18
      40:	00160600 	andseq	r0, r6, r0, lsl #12
      44:	0b3a0e03 	bleq	e83858 <startup-0x1f17c7a8>
      48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      4c:	13070000 	movwne	r0, #28672	; 0x7000
      50:	0b0e0301 	bleq	380c5c <startup-0x1fc7f3a4>
      54:	3b0b3a0b 	blcc	2ce888 <startup-0x1fd31778>
      58:	0013010b 	andseq	r0, r3, fp, lsl #2
      5c:	00240800 	eoreq	r0, r4, r0, lsl #16
      60:	0b3e0b0b 	bleq	f82c94 <startup-0x1f07d36c>
      64:	00000803 	andeq	r0, r0, r3, lsl #16
      68:	27011509 	strcs	r1, [r1, -r9, lsl #10]
      6c:	00130119 	andseq	r0, r3, r9, lsl r1
      70:	00050a00 	andeq	r0, r5, r0, lsl #20
      74:	00001349 	andeq	r1, r0, r9, asr #6
      78:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
      7c:	00130113 	andseq	r0, r3, r3, lsl r1
      80:	00210c00 	eoreq	r0, r1, r0, lsl #24
      84:	340d0000 	strcc	r0, [sp], #-0
      88:	3a0e0300 	bcc	380c90 <startup-0x1fc7f370>
      8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      90:	3c193f13 	ldccc	15, cr3, [r9], {19}
      94:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
      98:	13490021 	movtne	r0, #36897	; 0x9021
      9c:	0000052f 	andeq	r0, r0, pc, lsr #10
      a0:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
      a4:	000b2f13 	andeq	r2, fp, r3, lsl pc
      a8:	00341000 	eorseq	r1, r4, r0
      ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
      b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      b4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
      b8:	34110000 	ldrcc	r0, [r1], #-0
      bc:	3a0e0300 	bcc	380cc4 <startup-0x1fc7f33c>
      c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      c4:	00180213 	andseq	r0, r8, r3, lsl r2
      c8:	00341200 	eorseq	r1, r4, r0, lsl #4
      cc:	0b3a0803 	bleq	e820e0 <startup-0x1f17df20>
      d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      d4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
      d8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
      dc:	03193f01 	tsteq	r9, #1, 30
      e0:	3b0b3a08 	blcc	2ce908 <startup-0x1fd316f8>
      e4:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
      e8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
      ec:	97184006 	ldrls	r4, [r8, -r6]
      f0:	13011942 	movwne	r1, #6466	; 0x1942
      f4:	05140000 	ldreq	r0, [r4, #-0]
      f8:	3a0e0300 	bcc	380d00 <startup-0x1fc7f300>
      fc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     100:	00180213 	andseq	r0, r8, r3, lsl r2
     104:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
     108:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     10c:	0b3b0b3a 	bleq	ec2dfc <startup-0x1f13d204>
     110:	01111927 	tsteq	r1, r7, lsr #18
     114:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     118:	01194296 			; <UNDEFINED> instruction: 0x01194296
     11c:	16000013 			; <UNDEFINED> instruction: 0x16000013
     120:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     124:	0b3a0e03 	bleq	e83938 <startup-0x1f17c6c8>
     128:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     12c:	1301193c 	movwne	r1, #6460	; 0x193c
     130:	18170000 	ldmdane	r7, {}	; <UNPREDICTABLE>
     134:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     138:	08030034 	stmdaeq	r3, {r2, r4, r5}
     13c:	0b3b0b3a 	bleq	ec2e2c <startup-0x1f13d1d4>
     140:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     144:	34190000 	ldrcc	r0, [r9], #-0
     148:	3a0e0300 	bcc	380d50 <startup-0x1fc7f2b0>
     14c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     150:	00180213 	andseq	r0, r8, r3, lsl r2
     154:	010b1a00 	tsteq	fp, r0, lsl #20
     158:	06120111 			; <UNDEFINED> instruction: 0x06120111
     15c:	341b0000 	ldrcc	r0, [fp], #-0
     160:	3a080300 	bcc	200d68 <startup-0x1fdff298>
     164:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     168:	00180213 	andseq	r0, r8, r3, lsl r2
     16c:	002e1c00 	eoreq	r1, lr, r0, lsl #24
     170:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     174:	0b3b0b3a 	bleq	ec2e64 <startup-0x1f13d19c>
     178:	01111927 	tsteq	r1, r7, lsr #18
     17c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     180:	00194296 	mulseq	r9, r6, r2
     184:	002e1d00 	eoreq	r1, lr, r0, lsl #26
     188:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     18c:	0b3b0b3a 	bleq	ec2e7c <startup-0x1f13d184>
     190:	01111927 	tsteq	r1, r7, lsr #18
     194:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     198:	00194297 	mulseq	r9, r7, r2
     19c:	11010000 	mrsne	r0, (UNDEF: 1)
     1a0:	130e2501 	movwne	r2, #58625	; 0xe501
     1a4:	110e030b 	tstne	lr, fp, lsl #6
     1a8:	10061201 	andne	r1, r6, r1, lsl #4
     1ac:	02000017 	andeq	r0, r0, #23
     1b0:	0b0b0113 	bleq	2c0604 <startup-0x1fd3f9fc>
     1b4:	0b3b0b3a 	bleq	ec2ea4 <startup-0x1f13d15c>
     1b8:	00001301 	andeq	r1, r0, r1, lsl #6
     1bc:	03000d03 	movweq	r0, #3331	; 0xd03
     1c0:	3b0b3a0e 	blcc	2cea00 <startup-0x1fd31600>
     1c4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     1c8:	0400000b 	streq	r0, [r0], #-11
     1cc:	0b0b0024 	bleq	2c0264 <startup-0x1fd3fd9c>
     1d0:	0e030b3e 	vmoveq.16	d3[0], r0
     1d4:	0f050000 	svceq	0x00050000
     1d8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     1dc:	06000013 			; <UNDEFINED> instruction: 0x06000013
     1e0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     1e4:	0b3b0b3a 	bleq	ec2ed4 <startup-0x1f13d12c>
     1e8:	00001349 	andeq	r1, r0, r9, asr #6
     1ec:	03011307 	movweq	r1, #4871	; 0x1307
     1f0:	3a0b0b0e 	bcc	2c2e30 <startup-0x1fd3d1d0>
     1f4:	010b3b0b 	tsteq	fp, fp, lsl #22
     1f8:	08000013 	stmdaeq	r0, {r0, r1, r4}
     1fc:	0b0b0024 	bleq	2c0294 <startup-0x1fd3fd6c>
     200:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     204:	15090000 	strne	r0, [r9, #-0]
     208:	01192701 	tsteq	r9, r1, lsl #14
     20c:	0a000013 	beq	260 <startup-0x1ffffda0>
     210:	13490005 	movtne	r0, #36869	; 0x9005
     214:	010b0000 	mrseq	r0, (UNDEF: 11)
     218:	01134901 	tsteq	r3, r1, lsl #18
     21c:	0c000013 	stceq	0, cr0, [r0], {19}
     220:	00000021 	andeq	r0, r0, r1, lsr #32
     224:	0300340d 	movweq	r3, #1037	; 0x40d
     228:	3b0b3a0e 	blcc	2cea68 <startup-0x1fd31598>
     22c:	3f13490b 	svccc	0x0013490b
     230:	00193c19 	andseq	r3, r9, r9, lsl ip
     234:	00340e00 	eorseq	r0, r4, r0, lsl #28
     238:	0b3a1347 	bleq	e84f5c <startup-0x1f17b0a4>
     23c:	18020b3b 	stmdane	r2, {r0, r1, r3, r4, r5, r8, r9, fp}
     240:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
     244:	03193f01 	tsteq	r9, #1, 30
     248:	3b0b3a0e 	blcc	2cea88 <startup-0x1fd31578>
     24c:	1119270b 	tstne	r9, fp, lsl #14
     250:	40061201 	andmi	r1, r6, r1, lsl #4
     254:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     258:	00001301 	andeq	r1, r0, r1, lsl #6
     25c:	03000510 	movweq	r0, #1296	; 0x510
     260:	3b0b3a0e 	blcc	2ceaa0 <startup-0x1fd31560>
     264:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     268:	11000018 	tstne	r0, r8, lsl r0
     26c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     270:	0b3a0e03 	bleq	e83a84 <startup-0x1f17c57c>
     274:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     278:	06120111 			; <UNDEFINED> instruction: 0x06120111
     27c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     280:	00000019 	andeq	r0, r0, r9, lsl r0
     284:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     288:	030b130e 	movweq	r1, #45838	; 0xb30e
     28c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     290:	00171006 	andseq	r1, r7, r6
     294:	01130200 	tsteq	r3, r0, lsl #4
     298:	0b3a0b0b 	bleq	e82ecc <startup-0x1f17d134>
     29c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     2a0:	0d030000 	stceq	0, cr0, [r3, #-0]
     2a4:	3a0e0300 	bcc	380eac <startup-0x1fc7f154>
     2a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2ac:	000b3813 	andeq	r3, fp, r3, lsl r8
     2b0:	00240400 	eoreq	r0, r4, r0, lsl #8
     2b4:	0b3e0b0b 	bleq	f82ee8 <startup-0x1f07d118>
     2b8:	00000e03 	andeq	r0, r0, r3, lsl #28
     2bc:	0b000f05 	bleq	3ed8 <startup-0x1fffc128>
     2c0:	0013490b 	andseq	r4, r3, fp, lsl #18
     2c4:	00160600 	andseq	r0, r6, r0, lsl #12
     2c8:	0b3a0e03 	bleq	e83adc <startup-0x1f17c524>
     2cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     2d0:	13070000 	movwne	r0, #28672	; 0x7000
     2d4:	0b0e0301 	bleq	380ee0 <startup-0x1fc7f120>
     2d8:	3b0b3a0b 	blcc	2ceb0c <startup-0x1fd314f4>
     2dc:	0013010b 	andseq	r0, r3, fp, lsl #2
     2e0:	00240800 	eoreq	r0, r4, r0, lsl #16
     2e4:	0b3e0b0b 	bleq	f82f18 <startup-0x1f07d0e8>
     2e8:	00000803 	andeq	r0, r0, r3, lsl #16
     2ec:	27011509 	strcs	r1, [r1, -r9, lsl #10]
     2f0:	00130119 	andseq	r0, r3, r9, lsl r1
     2f4:	00050a00 	andeq	r0, r5, r0, lsl #20
     2f8:	00001349 	andeq	r1, r0, r9, asr #6
     2fc:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
     300:	00130113 	andseq	r0, r3, r3, lsl r1
     304:	00210c00 	eoreq	r0, r1, r0, lsl #24
     308:	340d0000 	strcc	r0, [sp], #-0
     30c:	3a0e0300 	bcc	380f14 <startup-0x1fc7f0ec>
     310:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     314:	3c193f13 	ldccc	15, cr3, [r9], {19}
     318:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
     31c:	13490021 	movtne	r0, #36897	; 0x9021
     320:	00000b2f 	andeq	r0, r0, pc, lsr #22
     324:	0300340f 	movweq	r3, #1039	; 0x40f
     328:	3b0b3a0e 	blcc	2ceb68 <startup-0x1fd31498>
     32c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     330:	10000018 	andne	r0, r0, r8, lsl r0
     334:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     338:	0b3b0b3a 	bleq	ec3028 <startup-0x1f13cfd8>
     33c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     340:	00001802 	andeq	r1, r0, r2, lsl #16
     344:	3f012e11 	svccc	0x00012e11
     348:	3a0e0319 	bcc	380fb4 <startup-0x1fc7f04c>
     34c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     350:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     354:	96184006 	ldrls	r4, [r8], -r6
     358:	13011942 	movwne	r1, #6466	; 0x1942
     35c:	05120000 	ldreq	r0, [r2, #-0]
     360:	3a0e0300 	bcc	380f68 <startup-0x1fc7f098>
     364:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     368:	00180213 	andseq	r0, r8, r3, lsl r2
     36c:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
     370:	0b3a0e03 	bleq	e83b84 <startup-0x1f17c47c>
     374:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     378:	06120111 			; <UNDEFINED> instruction: 0x06120111
     37c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     380:	00000019 	andeq	r0, r0, r9, lsl r0
     384:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     388:	030b130e 	movweq	r1, #45838	; 0xb30e
     38c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     390:	00171006 	andseq	r1, r7, r6
     394:	00240200 	eoreq	r0, r4, r0, lsl #4
     398:	0b3e0b0b 	bleq	f82fcc <startup-0x1f07d034>
     39c:	00000e03 	andeq	r0, r0, r3, lsl #28
     3a0:	0b011303 	bleq	44fb4 <startup-0x1ffbb04c>
     3a4:	3b0b3a0b 	blcc	2cebd8 <startup-0x1fd31428>
     3a8:	0013010b 	andseq	r0, r3, fp, lsl #2
     3ac:	000d0400 	andeq	r0, sp, r0, lsl #8
     3b0:	0b3a0e03 	bleq	e83bc4 <startup-0x1f17c43c>
     3b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     3b8:	00000b38 	andeq	r0, r0, r8, lsr fp
     3bc:	0b000f05 	bleq	3fd8 <startup-0x1fffc028>
     3c0:	0013490b 	andseq	r4, r3, fp, lsl #18
     3c4:	00160600 	andseq	r0, r6, r0, lsl #12
     3c8:	0b3a0e03 	bleq	e83bdc <startup-0x1f17c424>
     3cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     3d0:	13070000 	movwne	r0, #28672	; 0x7000
     3d4:	0b0e0301 	bleq	380fe0 <startup-0x1fc7f020>
     3d8:	3b0b3a0b 	blcc	2cec0c <startup-0x1fd313f4>
     3dc:	0013010b 	andseq	r0, r3, fp, lsl #2
     3e0:	00240800 	eoreq	r0, r4, r0, lsl #16
     3e4:	0b3e0b0b 	bleq	f83018 <startup-0x1f07cfe8>
     3e8:	00000803 	andeq	r0, r0, r3, lsl #16
     3ec:	27011509 	strcs	r1, [r1, -r9, lsl #10]
     3f0:	00130119 	andseq	r0, r3, r9, lsl r1
     3f4:	00050a00 	andeq	r0, r5, r0, lsl #20
     3f8:	00001349 	andeq	r1, r0, r9, asr #6
     3fc:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
     400:	00130113 	andseq	r0, r3, r3, lsl r1
     404:	00210c00 	eoreq	r0, r1, r0, lsl #24
     408:	340d0000 	strcc	r0, [sp], #-0
     40c:	3a0e0300 	bcc	381014 <startup-0x1fc7efec>
     410:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     414:	3c193f13 	ldccc	15, cr3, [r9], {19}
     418:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
     41c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     420:	0b3a0e03 	bleq	e83c34 <startup-0x1f17c3cc>
     424:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     428:	06120111 			; <UNDEFINED> instruction: 0x06120111
     42c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     430:	0f000019 	svceq	0x00000019
     434:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     438:	0b3b0b3a 	bleq	ec3128 <startup-0x1f13ced8>
     43c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     440:	34100000 	ldrcc	r0, [r0], #-0
     444:	3a0e0300 	bcc	38104c <startup-0x1fc7efb4>
     448:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     44c:	00180213 	andseq	r0, r8, r3, lsl r2
     450:	11010000 	mrsne	r0, (UNDEF: 1)
     454:	130e2501 	movwne	r2, #58625	; 0xe501
     458:	110e030b 	tstne	lr, fp, lsl #6
     45c:	10061201 	andne	r1, r6, r1, lsl #4
     460:	02000017 	andeq	r0, r0, #23
     464:	0b0b0113 	bleq	2c08b8 <startup-0x1fd3f748>
     468:	0b3b0b3a 	bleq	ec3158 <startup-0x1f13cea8>
     46c:	00001301 	andeq	r1, r0, r1, lsl #6
     470:	03000d03 	movweq	r0, #3331	; 0xd03
     474:	3b0b3a0e 	blcc	2cecb4 <startup-0x1fd3134c>
     478:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     47c:	0400000b 	streq	r0, [r0], #-11
     480:	0b0b0024 	bleq	2c0518 <startup-0x1fd3fae8>
     484:	0e030b3e 	vmoveq.16	d3[0], r0
     488:	0f050000 	svceq	0x00050000
     48c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     490:	06000013 			; <UNDEFINED> instruction: 0x06000013
     494:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     498:	0b3b0b3a 	bleq	ec3188 <startup-0x1f13ce78>
     49c:	00001349 	andeq	r1, r0, r9, asr #6
     4a0:	03011307 	movweq	r1, #4871	; 0x1307
     4a4:	3a0b0b0e 	bcc	2c30e4 <startup-0x1fd3cf1c>
     4a8:	010b3b0b 	tsteq	fp, fp, lsl #22
     4ac:	08000013 	stmdaeq	r0, {r0, r1, r4}
     4b0:	0b0b0024 	bleq	2c0548 <startup-0x1fd3fab8>
     4b4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     4b8:	15090000 	strne	r0, [r9, #-0]
     4bc:	01192701 	tsteq	r9, r1, lsl #14
     4c0:	0a000013 	beq	514 <startup-0x1ffffaec>
     4c4:	13490005 	movtne	r0, #36869	; 0x9005
     4c8:	010b0000 	mrseq	r0, (UNDEF: 11)
     4cc:	01134901 	tsteq	r3, r1, lsl #18
     4d0:	0c000013 	stceq	0, cr0, [r0], {19}
     4d4:	00000021 	andeq	r0, r0, r1, lsr #32
     4d8:	0300340d 	movweq	r3, #1037	; 0x40d
     4dc:	3b0b3a0e 	blcc	2ced1c <startup-0x1fd312e4>
     4e0:	3f13490b 	svccc	0x0013490b
     4e4:	00193c19 	andseq	r3, r9, r9, lsl ip
     4e8:	00210e00 	eoreq	r0, r1, r0, lsl #28
     4ec:	0b2f1349 	bleq	bc5218 <startup-0x1f43ade8>
     4f0:	340f0000 	strcc	r0, [pc], #-0	; 4f8 <startup-0x1ffffb08>
     4f4:	3a0e0300 	bcc	3810fc <startup-0x1fc7ef04>
     4f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4fc:	00180213 	andseq	r0, r8, r3, lsl r2
     500:	00341000 	eorseq	r1, r4, r0
     504:	0b3a0e03 	bleq	e83d18 <startup-0x1f17c2e8>
     508:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     50c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     510:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     514:	03193f01 	tsteq	r9, #1, 30
     518:	3b0b3a0e 	blcc	2ced58 <startup-0x1fd312a8>
     51c:	1119270b 	tstne	r9, fp, lsl #14
     520:	40061201 	andmi	r1, r6, r1, lsl #4
     524:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     528:	00001301 	andeq	r1, r0, r1, lsl #6
     52c:	03000512 	movweq	r0, #1298	; 0x512
     530:	3b0b3a0e 	blcc	2ced70 <startup-0x1fd31290>
     534:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     538:	13000018 	movwne	r0, #24
     53c:	0e03012e 	adfeqsp	f0, f3, #0.5
     540:	0b3b0b3a 	bleq	ec3230 <startup-0x1f13cdd0>
     544:	01111927 	tsteq	r1, r7, lsr #18
     548:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     54c:	00194296 	mulseq	r9, r6, r2
     550:	11010000 	mrsne	r0, (UNDEF: 1)
     554:	130e2501 	movwne	r2, #58625	; 0xe501
     558:	110e030b 	tstne	lr, fp, lsl #6
     55c:	10061201 	andne	r1, r6, r1, lsl #4
     560:	02000017 	andeq	r0, r0, #23
     564:	0b0b0113 	bleq	2c09b8 <startup-0x1fd3f648>
     568:	0b3b0b3a 	bleq	ec3258 <startup-0x1f13cda8>
     56c:	00001301 	andeq	r1, r0, r1, lsl #6
     570:	03000d03 	movweq	r0, #3331	; 0xd03
     574:	3b0b3a0e 	blcc	2cedb4 <startup-0x1fd3124c>
     578:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     57c:	0400000b 	streq	r0, [r0], #-11
     580:	0b0b0024 	bleq	2c0618 <startup-0x1fd3f9e8>
     584:	0e030b3e 	vmoveq.16	d3[0], r0
     588:	0f050000 	svceq	0x00050000
     58c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     590:	06000013 			; <UNDEFINED> instruction: 0x06000013
     594:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     598:	0b3b0b3a 	bleq	ec3288 <startup-0x1f13cd78>
     59c:	00001349 	andeq	r1, r0, r9, asr #6
     5a0:	03011307 	movweq	r1, #4871	; 0x1307
     5a4:	3a0b0b0e 	bcc	2c31e4 <startup-0x1fd3ce1c>
     5a8:	010b3b0b 	tsteq	fp, fp, lsl #22
     5ac:	08000013 	stmdaeq	r0, {r0, r1, r4}
     5b0:	0b0b0024 	bleq	2c0648 <startup-0x1fd3f9b8>
     5b4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     5b8:	15090000 	strne	r0, [r9, #-0]
     5bc:	01192701 	tsteq	r9, r1, lsl #14
     5c0:	0a000013 	beq	614 <startup-0x1ffff9ec>
     5c4:	13490005 	movtne	r0, #36869	; 0x9005
     5c8:	010b0000 	mrseq	r0, (UNDEF: 11)
     5cc:	01134901 	tsteq	r3, r1, lsl #18
     5d0:	0c000013 	stceq	0, cr0, [r0], {19}
     5d4:	00000021 	andeq	r0, r0, r1, lsr #32
     5d8:	0300340d 	movweq	r3, #1037	; 0x40d
     5dc:	3b0b3a0e 	blcc	2cee1c <startup-0x1fd311e4>
     5e0:	3f13490b 	svccc	0x0013490b
     5e4:	00193c19 	andseq	r3, r9, r9, lsl ip
     5e8:	00210e00 	eoreq	r0, r1, r0, lsl #28
     5ec:	0b2f1349 	bleq	bc5318 <startup-0x1f43ace8>
     5f0:	340f0000 	strcc	r0, [pc], #-0	; 5f8 <startup-0x1ffffa08>
     5f4:	3a0e0300 	bcc	3811fc <startup-0x1fc7ee04>
     5f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     5fc:	00180213 	andseq	r0, r8, r3, lsl r2
     600:	00341000 	eorseq	r1, r4, r0
     604:	0b3a0e03 	bleq	e83e18 <startup-0x1f17c1e8>
     608:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     60c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     610:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     614:	03193f01 	tsteq	r9, #1, 30
     618:	3b0b3a0e 	blcc	2cee58 <startup-0x1fd311a8>
     61c:	1119270b 	tstne	r9, fp, lsl #14
     620:	40061201 	andmi	r1, r6, r1, lsl #4
     624:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     628:	00001301 	andeq	r1, r0, r1, lsl #6
     62c:	03000512 	movweq	r0, #1298	; 0x512
     630:	3b0b3a0e 	blcc	2cee70 <startup-0x1fd31190>
     634:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     638:	13000018 	movwne	r0, #24
     63c:	0e03012e 	adfeqsp	f0, f3, #0.5
     640:	0b3b0b3a 	bleq	ec3330 <startup-0x1f13ccd0>
     644:	01111927 	tsteq	r1, r7, lsr #18
     648:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     64c:	00194296 	mulseq	r9, r6, r2
     650:	11010000 	mrsne	r0, (UNDEF: 1)
     654:	130e2501 	movwne	r2, #58625	; 0xe501
     658:	110e030b 	tstne	lr, fp, lsl #6
     65c:	10061201 	andne	r1, r6, r1, lsl #4
     660:	02000017 	andeq	r0, r0, #23
     664:	0b0b0113 	bleq	2c0ab8 <startup-0x1fd3f548>
     668:	0b3b0b3a 	bleq	ec3358 <startup-0x1f13cca8>
     66c:	00001301 	andeq	r1, r0, r1, lsl #6
     670:	03000d03 	movweq	r0, #3331	; 0xd03
     674:	3b0b3a0e 	blcc	2ceeb4 <startup-0x1fd3114c>
     678:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     67c:	0400000b 	streq	r0, [r0], #-11
     680:	0b0b0024 	bleq	2c0718 <startup-0x1fd3f8e8>
     684:	0e030b3e 	vmoveq.16	d3[0], r0
     688:	0f050000 	svceq	0x00050000
     68c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     690:	06000013 			; <UNDEFINED> instruction: 0x06000013
     694:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     698:	0b3b0b3a 	bleq	ec3388 <startup-0x1f13cc78>
     69c:	00001349 	andeq	r1, r0, r9, asr #6
     6a0:	03011307 	movweq	r1, #4871	; 0x1307
     6a4:	3a0b0b0e 	bcc	2c32e4 <startup-0x1fd3cd1c>
     6a8:	010b3b0b 	tsteq	fp, fp, lsl #22
     6ac:	08000013 	stmdaeq	r0, {r0, r1, r4}
     6b0:	0b0b0024 	bleq	2c0748 <startup-0x1fd3f8b8>
     6b4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     6b8:	15090000 	strne	r0, [r9, #-0]
     6bc:	01192701 	tsteq	r9, r1, lsl #14
     6c0:	0a000013 	beq	714 <startup-0x1ffff8ec>
     6c4:	13490005 	movtne	r0, #36869	; 0x9005
     6c8:	010b0000 	mrseq	r0, (UNDEF: 11)
     6cc:	01134901 	tsteq	r3, r1, lsl #18
     6d0:	0c000013 	stceq	0, cr0, [r0], {19}
     6d4:	00000021 	andeq	r0, r0, r1, lsr #32
     6d8:	0300340d 	movweq	r3, #1037	; 0x40d
     6dc:	3b0b3a0e 	blcc	2cef1c <startup-0x1fd310e4>
     6e0:	3f13490b 	svccc	0x0013490b
     6e4:	00193c19 	andseq	r3, r9, r9, lsl ip
     6e8:	00210e00 	eoreq	r0, r1, r0, lsl #28
     6ec:	0b2f1349 	bleq	bc5418 <startup-0x1f43abe8>
     6f0:	340f0000 	strcc	r0, [pc], #-0	; 6f8 <startup-0x1ffff908>
     6f4:	3a0e0300 	bcc	3812fc <startup-0x1fc7ed04>
     6f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6fc:	00180213 	andseq	r0, r8, r3, lsl r2
     700:	00341000 	eorseq	r1, r4, r0
     704:	0b3a0e03 	bleq	e83f18 <startup-0x1f17c0e8>
     708:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     70c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     710:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     714:	03193f01 	tsteq	r9, #1, 30
     718:	3b0b3a0e 	blcc	2cef58 <startup-0x1fd310a8>
     71c:	1119270b 	tstne	r9, fp, lsl #14
     720:	40061201 	andmi	r1, r6, r1, lsl #4
     724:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     728:	00001301 	andeq	r1, r0, r1, lsl #6
     72c:	03000512 	movweq	r0, #1298	; 0x512
     730:	3b0b3a0e 	blcc	2cef70 <startup-0x1fd31090>
     734:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     738:	13000018 	movwne	r0, #24
     73c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     740:	0b3a0e03 	bleq	e83f54 <startup-0x1f17c0ac>
     744:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     748:	06120111 			; <UNDEFINED> instruction: 0x06120111
     74c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     750:	00130119 	andseq	r0, r3, r9, lsl r1
     754:	00051400 	andeq	r1, r5, r0, lsl #8
     758:	0b3a0803 	bleq	e8276c <startup-0x1f17d894>
     75c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     760:	00001802 	andeq	r1, r0, r2, lsl #16
     764:	03012e15 	movweq	r2, #7701	; 0x1e15
     768:	3b0b3a0e 	blcc	2cefa8 <startup-0x1fd31058>
     76c:	1119270b 	tstne	r9, fp, lsl #14
     770:	40061201 	andmi	r1, r6, r1, lsl #4
     774:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     778:	01000000 	mrseq	r0, (UNDEF: 0)
     77c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     780:	0e030b13 	vmoveq.32	d3[0], r0
     784:	06120111 			; <UNDEFINED> instruction: 0x06120111
     788:	00001710 	andeq	r1, r0, r0, lsl r7
     78c:	0b011302 	bleq	4539c <startup-0x1ffbac64>
     790:	3b0b3a0b 	blcc	2cefc4 <startup-0x1fd3103c>
     794:	0013010b 	andseq	r0, r3, fp, lsl #2
     798:	000d0300 	andeq	r0, sp, r0, lsl #6
     79c:	0b3a0e03 	bleq	e83fb0 <startup-0x1f17c050>
     7a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     7a4:	00000b38 	andeq	r0, r0, r8, lsr fp
     7a8:	0b002404 	bleq	97c0 <startup-0x1fff6840>
     7ac:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     7b0:	0500000e 	streq	r0, [r0, #-14]
     7b4:	0b0b000f 	bleq	2c07f8 <startup-0x1fd3f808>
     7b8:	00001349 	andeq	r1, r0, r9, asr #6
     7bc:	03001606 	movweq	r1, #1542	; 0x606
     7c0:	3b0b3a0e 	blcc	2cf000 <startup-0x1fd31000>
     7c4:	0013490b 	andseq	r4, r3, fp, lsl #18
     7c8:	01130700 	tsteq	r3, r0, lsl #14
     7cc:	0b0b0e03 	bleq	2c3fe0 <startup-0x1fd3c020>
     7d0:	0b3b0b3a 	bleq	ec34c0 <startup-0x1f13cb40>
     7d4:	00001301 	andeq	r1, r0, r1, lsl #6
     7d8:	0b002408 	bleq	9800 <startup-0x1fff6800>
     7dc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     7e0:	09000008 	stmdbeq	r0, {r3}
     7e4:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     7e8:	00001301 	andeq	r1, r0, r1, lsl #6
     7ec:	4900050a 	stmdbmi	r0, {r1, r3, r8, sl}
     7f0:	0b000013 	bleq	844 <startup-0x1ffff7bc>
     7f4:	13490101 	movtne	r0, #37121	; 0x9101
     7f8:	00001301 	andeq	r1, r0, r1, lsl #6
     7fc:	0000210c 	andeq	r2, r0, ip, lsl #2
     800:	00340d00 	eorseq	r0, r4, r0, lsl #26
     804:	0b3a0e03 	bleq	e84018 <startup-0x1f17bfe8>
     808:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     80c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     810:	210e0000 	mrscs	r0, (UNDEF: 14)
     814:	2f134900 	svccs	0x00134900
     818:	0f00000b 	svceq	0x0000000b
     81c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     820:	0b3b0b3a 	bleq	ec3510 <startup-0x1f13caf0>
     824:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     828:	34100000 	ldrcc	r0, [r0], #-0
     82c:	3a0e0300 	bcc	381434 <startup-0x1fc7ebcc>
     830:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     834:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     838:	11000018 	tstne	r0, r8, lsl r0
     83c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     840:	0b3a0e03 	bleq	e84054 <startup-0x1f17bfac>
     844:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     848:	06120111 			; <UNDEFINED> instruction: 0x06120111
     84c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     850:	00130119 	andseq	r0, r3, r9, lsl r1
     854:	00051200 	andeq	r1, r5, r0, lsl #4
     858:	0b3a0e03 	bleq	e8406c <startup-0x1f17bf94>
     85c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     860:	00001802 	andeq	r1, r0, r2, lsl #16
     864:	03012e13 	movweq	r2, #7699	; 0x1e13
     868:	3b0b3a0e 	blcc	2cf0a8 <startup-0x1fd30f58>
     86c:	1119270b 	tstne	r9, fp, lsl #14
     870:	40061201 	andmi	r1, r6, r1, lsl #4
     874:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     878:	01000000 	mrseq	r0, (UNDEF: 0)
     87c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     880:	0e030b13 	vmoveq.32	d3[0], r0
     884:	06120111 			; <UNDEFINED> instruction: 0x06120111
     888:	00001710 	andeq	r1, r0, r0, lsl r7
     88c:	0b011302 	bleq	4549c <startup-0x1ffbab64>
     890:	3b0b3a0b 	blcc	2cf0c4 <startup-0x1fd30f3c>
     894:	0013010b 	andseq	r0, r3, fp, lsl #2
     898:	000d0300 	andeq	r0, sp, r0, lsl #6
     89c:	0b3a0e03 	bleq	e840b0 <startup-0x1f17bf50>
     8a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     8a4:	00000b38 	andeq	r0, r0, r8, lsr fp
     8a8:	0b002404 	bleq	98c0 <startup-0x1fff6740>
     8ac:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     8b0:	0500000e 	streq	r0, [r0, #-14]
     8b4:	0b0b000f 	bleq	2c08f8 <startup-0x1fd3f708>
     8b8:	00001349 	andeq	r1, r0, r9, asr #6
     8bc:	03001606 	movweq	r1, #1542	; 0x606
     8c0:	3b0b3a0e 	blcc	2cf100 <startup-0x1fd30f00>
     8c4:	0013490b 	andseq	r4, r3, fp, lsl #18
     8c8:	01130700 	tsteq	r3, r0, lsl #14
     8cc:	0b0b0e03 	bleq	2c40e0 <startup-0x1fd3bf20>
     8d0:	0b3b0b3a 	bleq	ec35c0 <startup-0x1f13ca40>
     8d4:	00001301 	andeq	r1, r0, r1, lsl #6
     8d8:	0b002408 	bleq	9900 <startup-0x1fff6700>
     8dc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     8e0:	09000008 	stmdbeq	r0, {r3}
     8e4:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     8e8:	00001301 	andeq	r1, r0, r1, lsl #6
     8ec:	4900050a 	stmdbmi	r0, {r1, r3, r8, sl}
     8f0:	0b000013 	bleq	944 <startup-0x1ffff6bc>
     8f4:	13490101 	movtne	r0, #37121	; 0x9101
     8f8:	00001301 	andeq	r1, r0, r1, lsl #6
     8fc:	0000210c 	andeq	r2, r0, ip, lsl #2
     900:	00340d00 	eorseq	r0, r4, r0, lsl #26
     904:	0b3a0e03 	bleq	e84118 <startup-0x1f17bee8>
     908:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     90c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     910:	210e0000 	mrscs	r0, (UNDEF: 14)
     914:	2f134900 	svccs	0x00134900
     918:	0f000005 	svceq	0x00000005
     91c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     920:	0b3b0b3a 	bleq	ec3610 <startup-0x1f13c9f0>
     924:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     928:	34100000 	ldrcc	r0, [r0], #-0
     92c:	3a0e0300 	bcc	381534 <startup-0x1fc7eacc>
     930:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     934:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     938:	11000018 	tstne	r0, r8, lsl r0
     93c:	13490021 	movtne	r0, #36897	; 0x9021
     940:	00000b2f 	andeq	r0, r0, pc, lsr #22
     944:	3f012e12 	svccc	0x00012e12
     948:	3a0e0319 	bcc	3815b4 <startup-0x1fc7ea4c>
     94c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     950:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     954:	96184006 	ldrls	r4, [r8], -r6
     958:	13011942 	movwne	r1, #6466	; 0x1942
     95c:	05130000 	ldreq	r0, [r3, #-0]
     960:	3a0e0300 	bcc	381568 <startup-0x1fc7ea98>
     964:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     968:	00180213 	andseq	r0, r8, r3, lsl r2
     96c:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
     970:	0b3a0e03 	bleq	e84184 <startup-0x1f17be7c>
     974:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     978:	06120111 			; <UNDEFINED> instruction: 0x06120111
     97c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     980:	00000019 	andeq	r0, r0, r9, lsl r0
     984:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     988:	030b130e 	movweq	r1, #45838	; 0xb30e
     98c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     990:	00171006 	andseq	r1, r7, r6
     994:	01130200 	tsteq	r3, r0, lsl #4
     998:	0b3a0b0b 	bleq	e835cc <startup-0x1f17ca34>
     99c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     9a0:	0d030000 	stceq	0, cr0, [r3, #-0]
     9a4:	3a0e0300 	bcc	3815ac <startup-0x1fc7ea54>
     9a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     9ac:	000b3813 	andeq	r3, fp, r3, lsl r8
     9b0:	00240400 	eoreq	r0, r4, r0, lsl #8
     9b4:	0b3e0b0b 	bleq	f835e8 <startup-0x1f07ca18>
     9b8:	00000e03 	andeq	r0, r0, r3, lsl #28
     9bc:	0b000f05 	bleq	45d8 <startup-0x1fffba28>
     9c0:	0013490b 	andseq	r4, r3, fp, lsl #18
     9c4:	00160600 	andseq	r0, r6, r0, lsl #12
     9c8:	0b3a0e03 	bleq	e841dc <startup-0x1f17be24>
     9cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     9d0:	13070000 	movwne	r0, #28672	; 0x7000
     9d4:	0b0e0301 	bleq	3815e0 <startup-0x1fc7ea20>
     9d8:	3b0b3a0b 	blcc	2cf20c <startup-0x1fd30df4>
     9dc:	0013010b 	andseq	r0, r3, fp, lsl #2
     9e0:	00240800 	eoreq	r0, r4, r0, lsl #16
     9e4:	0b3e0b0b 	bleq	f83618 <startup-0x1f07c9e8>
     9e8:	00000803 	andeq	r0, r0, r3, lsl #16
     9ec:	27011509 	strcs	r1, [r1, -r9, lsl #10]
     9f0:	00130119 	andseq	r0, r3, r9, lsl r1
     9f4:	00050a00 	andeq	r0, r5, r0, lsl #20
     9f8:	00001349 	andeq	r1, r0, r9, asr #6
     9fc:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
     a00:	00130113 	andseq	r0, r3, r3, lsl r1
     a04:	00210c00 	eoreq	r0, r1, r0, lsl #24
     a08:	340d0000 	strcc	r0, [sp], #-0
     a0c:	3a0e0300 	bcc	381614 <startup-0x1fc7e9ec>
     a10:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a14:	3c193f13 	ldccc	15, cr3, [r9], {19}
     a18:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
     a1c:	13490021 	movtne	r0, #36897	; 0x9021
     a20:	0000052f 	andeq	r0, r0, pc, lsr #10
     a24:	4700340f 	strmi	r3, [r0, -pc, lsl #8]
     a28:	3b0b3a13 	blcc	2cf27c <startup-0x1fd30d84>
     a2c:	0018020b 	andseq	r0, r8, fp, lsl #4
     a30:	00341000 	eorseq	r1, r4, r0
     a34:	0b3a1347 	bleq	e85758 <startup-0x1f17a8a8>
     a38:	00001802 	andeq	r1, r0, r2, lsl #16
     a3c:	3f012e11 	svccc	0x00012e11
     a40:	3a0e0319 	bcc	3816ac <startup-0x1fc7e954>
     a44:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     a48:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     a4c:	96184006 	ldrls	r4, [r8], -r6
     a50:	13011942 	movwne	r1, #6466	; 0x1942
     a54:	05120000 	ldreq	r0, [r2, #-0]
     a58:	3a0e0300 	bcc	381660 <startup-0x1fc7e9a0>
     a5c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a60:	00180213 	andseq	r0, r8, r3, lsl r2
     a64:	00341300 	eorseq	r1, r4, r0, lsl #6
     a68:	0b3a0e03 	bleq	e8427c <startup-0x1f17bd84>
     a6c:	1349053b 	movtne	r0, #38203	; 0x953b
     a70:	00001802 	andeq	r1, r0, r2, lsl #16
     a74:	3f012e14 	svccc	0x00012e14
     a78:	3a0e0319 	bcc	3816e4 <startup-0x1fc7e91c>
     a7c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     a80:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     a84:	97184006 	ldrls	r4, [r8, -r6]
     a88:	13011942 	movwne	r1, #6466	; 0x1942
     a8c:	34150000 	ldrcc	r0, [r5], #-0
     a90:	3a080300 	bcc	201698 <startup-0x1fdfe968>
     a94:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a98:	00180213 	andseq	r0, r8, r3, lsl r2
     a9c:	00341600 	eorseq	r1, r4, r0, lsl #12
     aa0:	0b3a0803 	bleq	e82ab4 <startup-0x1f17d54c>
     aa4:	1349053b 	movtne	r0, #38203	; 0x953b
     aa8:	05170000 	ldreq	r0, [r7, #-0]
     aac:	3a080300 	bcc	2016b4 <startup-0x1fdfe94c>
     ab0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ab4:	00180213 	andseq	r0, r8, r3, lsl r2
     ab8:	010b1800 	tsteq	fp, r0, lsl #16
     abc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     ac0:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
     ac4:	03193f01 	tsteq	r9, #1, 30
     ac8:	3b0b3a0e 	blcc	2cf308 <startup-0x1fd30cf8>
     acc:	1119270b 	tstne	r9, fp, lsl #14
     ad0:	40061201 	andmi	r1, r6, r1, lsl #4
     ad4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     ad8:	00001301 	andeq	r1, r0, r1, lsl #6
     adc:	0300051a 	movweq	r0, #1306	; 0x51a
     ae0:	3b0b3a08 	blcc	2cf308 <startup-0x1fd30cf8>
     ae4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     ae8:	1b000018 	blne	b50 <startup-0x1ffff4b0>
     aec:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     af0:	0b3b0b3a 	bleq	ec37e0 <startup-0x1f13c820>
     af4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     af8:	341c0000 	ldrcc	r0, [ip], #-0
     afc:	3a0e0300 	bcc	381704 <startup-0x1fc7e8fc>
     b00:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b04:	00180213 	andseq	r0, r8, r3, lsl r2
     b08:	012e1d00 			; <UNDEFINED> instruction: 0x012e1d00
     b0c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     b10:	0b3b0b3a 	bleq	ec3800 <startup-0x1f13c800>
     b14:	01111927 	tsteq	r1, r7, lsr #18
     b18:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b1c:	01194296 			; <UNDEFINED> instruction: 0x01194296
     b20:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     b24:	08030034 	stmdaeq	r3, {r2, r4, r5}
     b28:	0b3b0b3a 	bleq	ec3818 <startup-0x1f13c7e8>
     b2c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     b30:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
     b34:	03193f00 	tsteq	r9, #0, 30
     b38:	3b0b3a0e 	blcc	2cf378 <startup-0x1fd30c88>
     b3c:	1119270b 	tstne	r9, fp, lsl #14
     b40:	40061201 	andmi	r1, r6, r1, lsl #4
     b44:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     b48:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
     b4c:	03193f01 	tsteq	r9, #1, 30
     b50:	3b0b3a0e 	blcc	2cf390 <startup-0x1fd30c70>
     b54:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     b58:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     b5c:	96184006 	ldrls	r4, [r8], -r6
     b60:	13011942 	movwne	r1, #6466	; 0x1942
     b64:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
     b68:	3a0e0301 	bcc	381774 <startup-0x1fc7e88c>
     b6c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     b70:	11134919 	tstne	r3, r9, lsl r9
     b74:	40061201 	andmi	r1, r6, r1, lsl #4
     b78:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     b7c:	00001301 	andeq	r1, r0, r1, lsl #6
     b80:	03012e22 	movweq	r2, #7714	; 0x1e22
     b84:	3b0b3a0e 	blcc	2cf3c4 <startup-0x1fd30c3c>
     b88:	1119270b 	tstne	r9, fp, lsl #14
     b8c:	40061201 	andmi	r1, r6, r1, lsl #4
     b90:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     b94:	00001301 	andeq	r1, r0, r1, lsl #6
     b98:	3f002e23 	svccc	0x00002e23
     b9c:	3a0e0319 	bcc	381808 <startup-0x1fc7e7f8>
     ba0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     ba4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     ba8:	97184006 	ldrls	r4, [r8, -r6]
     bac:	00001942 	andeq	r1, r0, r2, asr #18
     bb0:	01110100 	tsteq	r1, r0, lsl #2
     bb4:	0b130e25 	bleq	4c4450 <startup-0x1fb3bbb0>
     bb8:	01110e03 	tsteq	r1, r3, lsl #28
     bbc:	17100612 			; <UNDEFINED> instruction: 0x17100612
     bc0:	13020000 	movwne	r0, #8192	; 0x2000
     bc4:	3a0b0b01 	bcc	2c37d0 <startup-0x1fd3c830>
     bc8:	010b3b0b 	tsteq	fp, fp, lsl #22
     bcc:	03000013 	movweq	r0, #19
     bd0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     bd4:	0b3b0b3a 	bleq	ec38c4 <startup-0x1f13c73c>
     bd8:	0b381349 	bleq	e05904 <startup-0x1f1fa6fc>
     bdc:	24040000 	strcs	r0, [r4], #-0
     be0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     be4:	000e030b 	andeq	r0, lr, fp, lsl #6
     be8:	000f0500 	andeq	r0, pc, r0, lsl #10
     bec:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     bf0:	16060000 	strne	r0, [r6], -r0
     bf4:	3a0e0300 	bcc	3817fc <startup-0x1fc7e804>
     bf8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     bfc:	07000013 	smladeq	r0, r3, r0, r0
     c00:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     c04:	0b3a0b0b 	bleq	e83838 <startup-0x1f17c7c8>
     c08:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     c0c:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
     c10:	03193f01 	tsteq	r9, #1, 30
     c14:	3b0b3a0e 	blcc	2cf454 <startup-0x1fd30bac>
     c18:	1119270b 	tstne	r9, fp, lsl #14
     c1c:	40061201 	andmi	r1, r6, r1, lsl #4
     c20:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     c24:	00001301 	andeq	r1, r0, r1, lsl #6
     c28:	03000509 	movweq	r0, #1289	; 0x509
     c2c:	3b0b3a0e 	blcc	2cf46c <startup-0x1fd30b94>
     c30:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     c34:	00000018 	andeq	r0, r0, r8, lsl r0
     c38:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     c3c:	030b130e 	movweq	r1, #45838	; 0xb30e
     c40:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     c44:	00171006 	andseq	r1, r7, r6
     c48:	01130200 	tsteq	r3, r0, lsl #4
     c4c:	0b3a0b0b 	bleq	e83880 <startup-0x1f17c780>
     c50:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     c54:	0d030000 	stceq	0, cr0, [r3, #-0]
     c58:	3a0e0300 	bcc	381860 <startup-0x1fc7e7a0>
     c5c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c60:	000b3813 	andeq	r3, fp, r3, lsl r8
     c64:	00240400 	eoreq	r0, r4, r0, lsl #8
     c68:	0b3e0b0b 	bleq	f8389c <startup-0x1f07c764>
     c6c:	00000e03 	andeq	r0, r0, r3, lsl #28
     c70:	0b000f05 	bleq	488c <startup-0x1fffb774>
     c74:	0013490b 	andseq	r4, r3, fp, lsl #18
     c78:	00160600 	andseq	r0, r6, r0, lsl #12
     c7c:	0b3a0e03 	bleq	e84490 <startup-0x1f17bb70>
     c80:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     c84:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
     c88:	03193f01 	tsteq	r9, #1, 30
     c8c:	3b0b3a0e 	blcc	2cf4cc <startup-0x1fd30b34>
     c90:	1119270b 	tstne	r9, fp, lsl #14
     c94:	40061201 	andmi	r1, r6, r1, lsl #4
     c98:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     c9c:	00001301 	andeq	r1, r0, r1, lsl #6
     ca0:	03000508 	movweq	r0, #1288	; 0x508
     ca4:	3b0b3a08 	blcc	2cf4cc <startup-0x1fd30b34>
     ca8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     cac:	09000018 	stmdbeq	r0, {r3, r4}
     cb0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     cb4:	0b3b0b3a 	bleq	ec39a4 <startup-0x1f13c65c>
     cb8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     cbc:	240a0000 	strcs	r0, [sl], #-0
     cc0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     cc4:	0008030b 	andeq	r0, r8, fp, lsl #6
     cc8:	11010000 	mrsne	r0, (UNDEF: 1)
     ccc:	130e2501 	movwne	r2, #58625	; 0xe501
     cd0:	110e030b 	tstne	lr, fp, lsl #6
     cd4:	10061201 	andne	r1, r6, r1, lsl #4
     cd8:	02000017 	andeq	r0, r0, #23
     cdc:	0b0b0113 	bleq	2c1130 <startup-0x1fd3eed0>
     ce0:	0b3b0b3a 	bleq	ec39d0 <startup-0x1f13c630>
     ce4:	00001301 	andeq	r1, r0, r1, lsl #6
     ce8:	03000d03 	movweq	r0, #3331	; 0xd03
     cec:	3b0b3a0e 	blcc	2cf52c <startup-0x1fd30ad4>
     cf0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     cf4:	0400000b 	streq	r0, [r0], #-11
     cf8:	0b0b0024 	bleq	2c0d90 <startup-0x1fd3f270>
     cfc:	0e030b3e 	vmoveq.16	d3[0], r0
     d00:	16050000 	strne	r0, [r5], -r0
     d04:	3a0e0300 	bcc	38190c <startup-0x1fc7e6f4>
     d08:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d0c:	06000013 			; <UNDEFINED> instruction: 0x06000013
     d10:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     d14:	0b3a0e03 	bleq	e84528 <startup-0x1f17bad8>
     d18:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     d1c:	01111349 	tsteq	r1, r9, asr #6
     d20:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     d24:	01194296 			; <UNDEFINED> instruction: 0x01194296
     d28:	07000013 	smladeq	r0, r3, r0, r0
     d2c:	08030005 	stmdaeq	r3, {r0, r2}
     d30:	0b3b0b3a 	bleq	ec3a20 <startup-0x1f13c5e0>
     d34:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     d38:	34080000 	strcc	r0, [r8], #-0
     d3c:	3a080300 	bcc	201944 <startup-0x1fdfe6bc>
     d40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d44:	00180213 	andseq	r0, r8, r3, lsl r2
     d48:	00240900 	eoreq	r0, r4, r0, lsl #18
     d4c:	0b3e0b0b 	bleq	f83980 <startup-0x1f07c680>
     d50:	00000803 	andeq	r0, r0, r3, lsl #16
     d54:	3f002e0a 	svccc	0x00002e0a
     d58:	3a0e0319 	bcc	3819c4 <startup-0x1fc7e63c>
     d5c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     d60:	11134919 	tstne	r3, r9, lsl r9
     d64:	40061201 	andmi	r1, r6, r1, lsl #4
     d68:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     d6c:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
     d70:	03193f00 	tsteq	r9, #0, 30
     d74:	3b0b3a0e 	blcc	2cf5b4 <startup-0x1fd30a4c>
     d78:	1119270b 	tstne	r9, fp, lsl #14
     d7c:	40061201 	andmi	r1, r6, r1, lsl #4
     d80:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     d84:	01000000 	mrseq	r0, (UNDEF: 0)
     d88:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     d8c:	0e030b13 	vmoveq.32	d3[0], r0
     d90:	06120111 			; <UNDEFINED> instruction: 0x06120111
     d94:	00001710 	andeq	r1, r0, r0, lsl r7
     d98:	0b011302 	bleq	459a8 <startup-0x1ffba658>
     d9c:	3b0b3a0b 	blcc	2cf5d0 <startup-0x1fd30a30>
     da0:	0013010b 	andseq	r0, r3, fp, lsl #2
     da4:	000d0300 	andeq	r0, sp, r0, lsl #6
     da8:	0b3a0e03 	bleq	e845bc <startup-0x1f17ba44>
     dac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     db0:	00000b38 	andeq	r0, r0, r8, lsr fp
     db4:	0b002404 	bleq	9dcc <startup-0x1fff6234>
     db8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     dbc:	0500000e 	streq	r0, [r0, #-14]
     dc0:	0b0b000f 	bleq	2c0e04 <startup-0x1fd3f1fc>
     dc4:	00001349 	andeq	r1, r0, r9, asr #6
     dc8:	03001606 	movweq	r1, #1542	; 0x606
     dcc:	3b0b3a0e 	blcc	2cf60c <startup-0x1fd309f4>
     dd0:	0013490b 	andseq	r4, r3, fp, lsl #18
     dd4:	01130700 	tsteq	r3, r0, lsl #14
     dd8:	0b0b0e03 	bleq	2c45ec <startup-0x1fd3ba14>
     ddc:	0b3b0b3a 	bleq	ec3acc <startup-0x1f13c534>
     de0:	00001301 	andeq	r1, r0, r1, lsl #6
     de4:	0b002408 	bleq	9e0c <startup-0x1fff61f4>
     de8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     dec:	09000008 	stmdbeq	r0, {r3}
     df0:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     df4:	00001301 	andeq	r1, r0, r1, lsl #6
     df8:	4900050a 	stmdbmi	r0, {r1, r3, r8, sl}
     dfc:	0b000013 	bleq	e50 <startup-0x1ffff1b0>
     e00:	13490101 	movtne	r0, #37121	; 0x9101
     e04:	00001301 	andeq	r1, r0, r1, lsl #6
     e08:	0000210c 	andeq	r2, r0, ip, lsl #2
     e0c:	00340d00 	eorseq	r0, r4, r0, lsl #26
     e10:	0b3a0e03 	bleq	e84624 <startup-0x1f17b9dc>
     e14:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e18:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     e1c:	210e0000 	mrscs	r0, (UNDEF: 14)
     e20:	2f134900 	svccs	0x00134900
     e24:	0f000005 	svceq	0x00000005
     e28:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     e2c:	0b3a0e03 	bleq	e84640 <startup-0x1f17b9c0>
     e30:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     e34:	06120111 			; <UNDEFINED> instruction: 0x06120111
     e38:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     e3c:	00130119 	andseq	r0, r3, r9, lsl r1
     e40:	00341000 	eorseq	r1, r4, r0
     e44:	0b3a0803 	bleq	e82e58 <startup-0x1f17d1a8>
     e48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e4c:	00001802 	andeq	r1, r0, r2, lsl #16
     e50:	03003411 	movweq	r3, #1041	; 0x411
     e54:	3b0b3a0e 	blcc	2cf694 <startup-0x1fd3096c>
     e58:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     e5c:	12000018 	andne	r0, r0, #24
     e60:	13490021 	movtne	r0, #36897	; 0x9021
     e64:	00000b2f 	andeq	r0, r0, pc, lsr #22
     e68:	03000513 	movweq	r0, #1299	; 0x513
     e6c:	3b0b3a0e 	blcc	2cf6ac <startup-0x1fd30954>
     e70:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     e74:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
     e78:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     e7c:	0b3a0e03 	bleq	e84690 <startup-0x1f17b970>
     e80:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     e84:	06120111 			; <UNDEFINED> instruction: 0x06120111
     e88:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     e8c:	15000019 	strne	r0, [r0, #-25]	; 0xffffffe7
     e90:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     e94:	0b3a0e03 	bleq	e846a8 <startup-0x1f17b958>
     e98:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     e9c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     ea0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     ea4:	16000019 			; <UNDEFINED> instruction: 0x16000019
     ea8:	08030005 	stmdaeq	r3, {r0, r2}
     eac:	0b3b0b3a 	bleq	ec3b9c <startup-0x1f13c464>
     eb0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     eb4:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
     eb8:	03193f01 	tsteq	r9, #1, 30
     ebc:	3b0b3a0e 	blcc	2cf6fc <startup-0x1fd30904>
     ec0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     ec4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     ec8:	96184006 	ldrls	r4, [r8], -r6
     ecc:	13011942 	movwne	r1, #6466	; 0x1942
     ed0:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
     ed4:	03193f01 	tsteq	r9, #1, 30
     ed8:	3b0b3a0e 	blcc	2cf718 <startup-0x1fd308e8>
     edc:	1119270b 	tstne	r9, fp, lsl #14
     ee0:	40061201 	andmi	r1, r6, r1, lsl #4
     ee4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     ee8:	00001301 	andeq	r1, r0, r1, lsl #6
     eec:	3f012e19 	svccc	0x00012e19
     ef0:	3a0e0319 	bcc	381b5c <startup-0x1fc7e4a4>
     ef4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     ef8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     efc:	97184006 	ldrls	r4, [r8, -r6]
     f00:	00001942 	andeq	r1, r0, r2, asr #18
     f04:	01110100 	tsteq	r1, r0, lsl #2
     f08:	0b130e25 	bleq	4c47a4 <startup-0x1fb3b85c>
     f0c:	01110e03 	tsteq	r1, r3, lsl #28
     f10:	17100612 			; <UNDEFINED> instruction: 0x17100612
     f14:	13020000 	movwne	r0, #8192	; 0x2000
     f18:	0b0e0301 	bleq	381b24 <startup-0x1fc7e4dc>
     f1c:	3b0b3a0b 	blcc	2cf750 <startup-0x1fd308b0>
     f20:	0013010b 	andseq	r0, r3, fp, lsl #2
     f24:	000d0300 	andeq	r0, sp, r0, lsl #6
     f28:	0b3a0e03 	bleq	e8473c <startup-0x1f17b8c4>
     f2c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f30:	00000b38 	andeq	r0, r0, r8, lsr fp
     f34:	0b000f04 	bleq	4b4c <startup-0x1fffb4b4>
     f38:	0013490b 	andseq	r4, r3, fp, lsl #18
     f3c:	00240500 	eoreq	r0, r4, r0, lsl #10
     f40:	0b3e0b0b 	bleq	f83b74 <startup-0x1f07c48c>
     f44:	00000e03 	andeq	r0, r0, r3, lsl #28
     f48:	0b002406 	bleq	9f68 <startup-0x1fff6098>
     f4c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     f50:	07000008 	streq	r0, [r0, -r8]
     f54:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     f58:	00001301 	andeq	r1, r0, r1, lsl #6
     f5c:	49000508 	stmdbmi	r0, {r3, r8, sl}
     f60:	09000013 	stmdbeq	r0, {r0, r1, r4}
     f64:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     f68:	0b3b0b3a 	bleq	ec3c58 <startup-0x1f13c3a8>
     f6c:	00001349 	andeq	r1, r0, r9, asr #6
     f70:	3f012e0a 	svccc	0x00012e0a
     f74:	3a0e0319 	bcc	381be0 <startup-0x1fc7e420>
     f78:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     f7c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     f80:	97184006 	ldrls	r4, [r8, -r6]
     f84:	13011942 	movwne	r1, #6466	; 0x1942
     f88:	050b0000 	streq	r0, [fp, #-0]
     f8c:	3a080300 	bcc	201b94 <startup-0x1fdfe46c>
     f90:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f94:	00180213 	andseq	r0, r8, r3, lsl r2
     f98:	00050c00 	andeq	r0, r5, r0, lsl #24
     f9c:	0b3a0e03 	bleq	e847b0 <startup-0x1f17b850>
     fa0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     fa4:	00001802 	andeq	r1, r0, r2, lsl #16
     fa8:	3f012e0d 	svccc	0x00012e0d
     fac:	3a0e0319 	bcc	381c18 <startup-0x1fc7e3e8>
     fb0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     fb4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     fb8:	96184006 	ldrls	r4, [r8], -r6
     fbc:	00001942 	andeq	r1, r0, r2, asr #18
     fc0:	0300340e 	movweq	r3, #1038	; 0x40e
     fc4:	3b0b3a0e 	blcc	2cf804 <startup-0x1fd307fc>
     fc8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     fcc:	00000018 	andeq	r0, r0, r8, lsl r0
     fd0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     fd4:	030b130e 	movweq	r1, #45838	; 0xb30e
     fd8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     fdc:	00171006 	andseq	r1, r7, r6
     fe0:	01130200 	tsteq	r3, r0, lsl #4
     fe4:	0b3a0b0b 	bleq	e83c18 <startup-0x1f17c3e8>
     fe8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     fec:	0d030000 	stceq	0, cr0, [r3, #-0]
     ff0:	3a0e0300 	bcc	381bf8 <startup-0x1fc7e408>
     ff4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ff8:	000b3813 	andeq	r3, fp, r3, lsl r8
     ffc:	00240400 	eoreq	r0, r4, r0, lsl #8
    1000:	0b3e0b0b 	bleq	f83c34 <startup-0x1f07c3cc>
    1004:	00000e03 	andeq	r0, r0, r3, lsl #28
    1008:	0b000f05 	bleq	4c24 <startup-0x1fffb3dc>
    100c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1010:	00160600 	andseq	r0, r6, r0, lsl #12
    1014:	0b3a0e03 	bleq	e84828 <startup-0x1f17b7d8>
    1018:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    101c:	13070000 	movwne	r0, #28672	; 0x7000
    1020:	0b0e0301 	bleq	381c2c <startup-0x1fc7e3d4>
    1024:	3b0b3a0b 	blcc	2cf858 <startup-0x1fd307a8>
    1028:	0013010b 	andseq	r0, r3, fp, lsl #2
    102c:	00240800 	eoreq	r0, r4, r0, lsl #16
    1030:	0b3e0b0b 	bleq	f83c64 <startup-0x1f07c39c>
    1034:	00000803 	andeq	r0, r0, r3, lsl #16
    1038:	27011509 	strcs	r1, [r1, -r9, lsl #10]
    103c:	00130119 	andseq	r0, r3, r9, lsl r1
    1040:	00050a00 	andeq	r0, r5, r0, lsl #20
    1044:	00001349 	andeq	r1, r0, r9, asr #6
    1048:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
    104c:	00130113 	andseq	r0, r3, r3, lsl r1
    1050:	00210c00 	eoreq	r0, r1, r0, lsl #24
    1054:	340d0000 	strcc	r0, [sp], #-0
    1058:	3a0e0300 	bcc	381c60 <startup-0x1fc7e3a0>
    105c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1060:	3c193f13 	ldccc	15, cr3, [r9], {19}
    1064:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
    1068:	13490021 	movtne	r0, #36897	; 0x9021
    106c:	0000052f 	andeq	r0, r0, pc, lsr #10
    1070:	0300340f 	movweq	r3, #1039	; 0x40f
    1074:	3b0b3a0e 	blcc	2cf8b4 <startup-0x1fd3074c>
    1078:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    107c:	10000018 	andne	r0, r0, r8, lsl r0
    1080:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1084:	0b3b0b3a 	bleq	ec3d74 <startup-0x1f13c28c>
    1088:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    108c:	00001802 	andeq	r1, r0, r2, lsl #16
    1090:	49002111 	stmdbmi	r0, {r0, r4, r8, sp}
    1094:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1098:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
    109c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    10a0:	0b3b0b3a 	bleq	ec3d90 <startup-0x1f13c270>
    10a4:	01111927 	tsteq	r1, r7, lsr #18
    10a8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    10ac:	01194296 			; <UNDEFINED> instruction: 0x01194296
    10b0:	13000013 	movwne	r0, #19
    10b4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    10b8:	0b3b0b3a 	bleq	ec3da8 <startup-0x1f13c258>
    10bc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    10c0:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    10c4:	3a0e0301 	bcc	381cd0 <startup-0x1fc7e330>
    10c8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    10cc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    10d0:	96184006 	ldrls	r4, [r8], -r6
    10d4:	00001942 	andeq	r1, r0, r2, asr #18
    10d8:	01110100 	tsteq	r1, r0, lsl #2
    10dc:	0b130e25 	bleq	4c4978 <startup-0x1fb3b688>
    10e0:	01110e03 	tsteq	r1, r3, lsl #28
    10e4:	17100612 			; <UNDEFINED> instruction: 0x17100612
    10e8:	13020000 	movwne	r0, #8192	; 0x2000
    10ec:	3a0b0b01 	bcc	2c3cf8 <startup-0x1fd3c308>
    10f0:	010b3b0b 	tsteq	fp, fp, lsl #22
    10f4:	03000013 	movweq	r0, #19
    10f8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    10fc:	0b3b0b3a 	bleq	ec3dec <startup-0x1f13c214>
    1100:	0b381349 	bleq	e05e2c <startup-0x1f1fa1d4>
    1104:	24040000 	strcs	r0, [r4], #-0
    1108:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    110c:	000e030b 	andeq	r0, lr, fp, lsl #6
    1110:	000f0500 	andeq	r0, pc, r0, lsl #10
    1114:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1118:	16060000 	strne	r0, [r6], -r0
    111c:	3a0e0300 	bcc	381d24 <startup-0x1fc7e2dc>
    1120:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1124:	07000013 	smladeq	r0, r3, r0, r0
    1128:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    112c:	0b3a0b0b 	bleq	e83d60 <startup-0x1f17c2a0>
    1130:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1134:	24080000 	strcs	r0, [r8], #-0
    1138:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    113c:	0008030b 	andeq	r0, r8, fp, lsl #6
    1140:	01150900 	tsteq	r5, r0, lsl #18
    1144:	13011927 	movwne	r1, #6439	; 0x1927
    1148:	050a0000 	streq	r0, [sl, #-0]
    114c:	00134900 	andseq	r4, r3, r0, lsl #18
    1150:	01010b00 	tsteq	r1, r0, lsl #22
    1154:	13011349 	movwne	r1, #4937	; 0x1349
    1158:	210c0000 	mrscs	r0, (UNDEF: 12)
    115c:	0d000000 	stceq	0, cr0, [r0, #-0]
    1160:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1164:	0b3b0b3a 	bleq	ec3e54 <startup-0x1f13c1ac>
    1168:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    116c:	0000193c 	andeq	r1, r0, ip, lsr r9
    1170:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
    1174:	00052f13 	andeq	r2, r5, r3, lsl pc
    1178:	00340f00 	eorseq	r0, r4, r0, lsl #30
    117c:	0b3a0e03 	bleq	e84990 <startup-0x1f17b670>
    1180:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1184:	00001802 	andeq	r1, r0, r2, lsl #16
    1188:	03003410 	movweq	r3, #1040	; 0x410
    118c:	3b0b3a0e 	blcc	2cf9cc <startup-0x1fd30634>
    1190:	3f13490b 	svccc	0x0013490b
    1194:	00180219 	andseq	r0, r8, r9, lsl r2
    1198:	00211100 	eoreq	r1, r1, r0, lsl #2
    119c:	0b2f1349 	bleq	bc5ec8 <startup-0x1f43a138>
    11a0:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
    11a4:	03193f01 	tsteq	r9, #1, 30
    11a8:	3b0b3a0e 	blcc	2cf9e8 <startup-0x1fd30618>
    11ac:	1119270b 	tstne	r9, fp, lsl #14
    11b0:	40061201 	andmi	r1, r6, r1, lsl #4
    11b4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    11b8:	00001301 	andeq	r1, r0, r1, lsl #6
    11bc:	03000513 	movweq	r0, #1299	; 0x513
    11c0:	3b0b3a0e 	blcc	2cfa00 <startup-0x1fd30600>
    11c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    11c8:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
    11cc:	0e03012e 	adfeqsp	f0, f3, #0.5
    11d0:	0b3b0b3a 	bleq	ec3ec0 <startup-0x1f13c140>
    11d4:	01111927 	tsteq	r1, r7, lsr #18
    11d8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    11dc:	00194296 	mulseq	r9, r6, r2
    11e0:	11010000 	mrsne	r0, (UNDEF: 1)
    11e4:	130e2501 	movwne	r2, #58625	; 0xe501
    11e8:	110e030b 	tstne	lr, fp, lsl #6
    11ec:	10061201 	andne	r1, r6, r1, lsl #4
    11f0:	02000017 	andeq	r0, r0, #23
    11f4:	0b0b0113 	bleq	2c1648 <startup-0x1fd3e9b8>
    11f8:	0b3b0b3a 	bleq	ec3ee8 <startup-0x1f13c118>
    11fc:	00001301 	andeq	r1, r0, r1, lsl #6
    1200:	03000d03 	movweq	r0, #3331	; 0xd03
    1204:	3b0b3a0e 	blcc	2cfa44 <startup-0x1fd305bc>
    1208:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    120c:	0400000b 	streq	r0, [r0], #-11
    1210:	0b0b0024 	bleq	2c12a8 <startup-0x1fd3ed58>
    1214:	0e030b3e 	vmoveq.16	d3[0], r0
    1218:	0f050000 	svceq	0x00050000
    121c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1220:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1224:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1228:	0b3b0b3a 	bleq	ec3f18 <startup-0x1f13c0e8>
    122c:	00001349 	andeq	r1, r0, r9, asr #6
    1230:	03011307 	movweq	r1, #4871	; 0x1307
    1234:	3a0b0b0e 	bcc	2c3e74 <startup-0x1fd3c18c>
    1238:	010b3b0b 	tsteq	fp, fp, lsl #22
    123c:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1240:	0b0b0024 	bleq	2c12d8 <startup-0x1fd3ed28>
    1244:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1248:	15090000 	strne	r0, [r9, #-0]
    124c:	01192701 	tsteq	r9, r1, lsl #14
    1250:	0a000013 	beq	12a4 <startup-0x1fffed5c>
    1254:	13490005 	movtne	r0, #36869	; 0x9005
    1258:	010b0000 	mrseq	r0, (UNDEF: 11)
    125c:	01134901 	tsteq	r3, r1, lsl #18
    1260:	0c000013 	stceq	0, cr0, [r0], {19}
    1264:	00000021 	andeq	r0, r0, r1, lsr #32
    1268:	0300340d 	movweq	r3, #1037	; 0x40d
    126c:	3b0b3a0e 	blcc	2cfaac <startup-0x1fd30554>
    1270:	3f13490b 	svccc	0x0013490b
    1274:	00193c19 	andseq	r3, r9, r9, lsl ip
    1278:	00210e00 	eoreq	r0, r1, r0, lsl #28
    127c:	0b2f1349 	bleq	bc5fa8 <startup-0x1f43a058>
    1280:	340f0000 	strcc	r0, [pc], #-0	; 1288 <startup-0x1fffed78>
    1284:	3a0e0300 	bcc	381e8c <startup-0x1fc7e174>
    1288:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    128c:	00180213 	andseq	r0, r8, r3, lsl r2
    1290:	00341000 	eorseq	r1, r4, r0
    1294:	0b3a0e03 	bleq	e84aa8 <startup-0x1f17b558>
    1298:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    129c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    12a0:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
    12a4:	03193f01 	tsteq	r9, #1, 30
    12a8:	3b0b3a0e 	blcc	2cfae8 <startup-0x1fd30518>
    12ac:	1119270b 	tstne	r9, fp, lsl #14
    12b0:	40061201 	andmi	r1, r6, r1, lsl #4
    12b4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    12b8:	00001301 	andeq	r1, r0, r1, lsl #6
    12bc:	03000512 	movweq	r0, #1298	; 0x512
    12c0:	3b0b3a0e 	blcc	2cfb00 <startup-0x1fd30500>
    12c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    12c8:	13000018 	movwne	r0, #24
    12cc:	0e03012e 	adfeqsp	f0, f3, #0.5
    12d0:	0b3b0b3a 	bleq	ec3fc0 <startup-0x1f13c040>
    12d4:	01111927 	tsteq	r1, r7, lsr #18
    12d8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    12dc:	00194296 	mulseq	r9, r6, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000016a2 	andeq	r1, r0, r2, lsr #13
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	0a9d0002 	beq	fe74003c <firstTime.4040+0xde731b54>
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	200016b4 			; <UNDEFINED> instruction: 0x200016b4
  3c:	00000056 	andeq	r0, r0, r6, asr r0
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	0c810002 	stceq	0, cr0, [r1], {2}
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	2000170c 	andcs	r1, r0, ip, lsl #14
  5c:	000002a8 	andeq	r0, r0, r8, lsr #5
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	11b00002 	movsne	r0, r2
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200019b4 			; <UNDEFINED> instruction: 0x200019b4
  7c:	00000204 	andeq	r0, r0, r4, lsl #4
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	13ab0002 			; <UNDEFINED> instruction: 0x13ab0002
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20001bb8 			; <UNDEFINED> instruction: 0x20001bb8
  9c:	00000364 	andeq	r0, r0, r4, ror #6
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	19f00002 	ldmibne	r0!, {r1}^
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20001f1c 	andcs	r1, r0, ip, lsl pc
  bc:	00000238 	andeq	r0, r0, r8, lsr r2
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	1e8c0002 	cdpne	0, 8, cr0, cr12, cr2, {0}
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	20002154 	andcs	r2, r0, r4, asr r1
  dc:	00000370 	andeq	r0, r0, r0, ror r3
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	23d60002 	bicscs	r0, r6, #2
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	200024c4 	andcs	r2, r0, r4, asr #9
  fc:	000002ac 	andeq	r0, r0, ip, lsr #5
	...
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	29350002 	ldmdbcs	r5!, {r1}
 110:	00040000 	andeq	r0, r4, r0
 114:	00000000 	andeq	r0, r0, r0
 118:	20002770 	andcs	r2, r0, r0, ror r7
 11c:	0000052c 	andeq	r0, r0, ip, lsr #10
	...
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	30da0002 	sbcscc	r0, sl, r2
 130:	00040000 	andeq	r0, r4, r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20002c9c 	mulcs	r0, ip, ip
 13c:	00000e44 	andeq	r0, r0, r4, asr #28
	...
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	397d0002 	ldmdbcc	sp!, {r1}^
 150:	00040000 	andeq	r0, r4, r0
 154:	00000000 	andeq	r0, r0, r0
 158:	20003ae0 	andcs	r3, r0, r0, ror #21
 15c:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
 16c:	3a810002 	bcc	fe04017c <firstTime.4040+0xde031c94>
 170:	00040000 	andeq	r0, r4, r0
 174:	00000000 	andeq	r0, r0, r0
 178:	20003b08 	andcs	r3, r0, r8, lsl #22
 17c:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	3b480002 	blcc	120019c <startup-0x1edffe64>
 190:	00040000 	andeq	r0, r4, r0
 194:	00000000 	andeq	r0, r0, r0
 198:	20003b30 	andcs	r3, r0, r0, lsr fp
 19c:	0000006c 	andeq	r0, r0, ip, rrx
	...
 1a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ac:	3c810002 	stccc	0, cr0, [r1], {2}
 1b0:	00040000 	andeq	r0, r4, r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	20003b9c 	mulcs	r0, ip, fp
 1bc:	00000520 	andeq	r0, r0, r0, lsr #10
	...
 1c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1cc:	41720002 	cmnmi	r2, r2
 1d0:	00040000 	andeq	r0, r4, r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	200040bc 	strhcs	r4, [r0], -ip
 1dc:	00000094 	muleq	r0, r4, r0
	...
 1e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ec:	42b60002 	adcsmi	r0, r6, #2
 1f0:	00040000 	andeq	r0, r4, r0
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	20004150 	andcs	r4, r0, r0, asr r1
 1fc:	000000e8 	andeq	r0, r0, r8, ror #1
	...
 208:	0000001c 	andeq	r0, r0, ip, lsl r0
 20c:	459a0002 	ldrmi	r0, [sl, #2]
 210:	00040000 	andeq	r0, r4, r0
 214:	00000000 	andeq	r0, r0, r0
 218:	20004238 	andcs	r4, r0, r8, lsr r2
 21c:	000000e8 	andeq	r0, r0, r8, ror #1
	...
 228:	0000001c 	andeq	r0, r0, ip, lsl r0
 22c:	487e0002 	ldmdami	lr!, {r1}^
 230:	00040000 	andeq	r0, r4, r0
 234:	00000000 	andeq	r0, r0, r0
 238:	20004320 	andcs	r4, r0, r0, lsr #6
 23c:	000000e8 	andeq	r0, r0, r8, ror #1
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200016b2 			; <UNDEFINED> instruction: 0x200016b2
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	0000039d 	muleq	r0, sp, r3
       4:	017d0002 	cmneq	sp, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	43010000 	movwmi	r0, #4096	; 0x1000
      1c:	6f6d2f3a 	svcvs	0x006d2f3a
      20:	2f632f70 	svccs	0x00632f70
      24:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
      28:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
      2c:	6f697461 	svcvs	0x00697461
      30:	2f72656e 	svccs	0x0072656e
      34:	73504944 	cmpvc	r0, #68, 18	; 0x110000
      38:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
      3c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
      40:	74730000 	ldrbtvc	r0, [r3], #-0
      44:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
      48:	00632e70 	rsbeq	r2, r3, r0, ror lr
      4c:	73000001 	movwvc	r0, #1
      50:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
      54:	00682e65 	rsbeq	r2, r8, r5, ror #28
      58:	69000001 	stmdbvs	r0, {r0}
      5c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
      60:	0100682e 	tsteq	r0, lr, lsr #16
      64:	61670000 	cmnvs	r7, r0
      68:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
      6c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
      70:	0100682e 	tsteq	r0, lr, lsr #16
      74:	72670000 	rsbvc	r0, r7, #0
      78:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
      7c:	682e7363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, ip, sp, lr}
      80:	00000100 	andeq	r0, r0, r0, lsl #2
      84:	736e6f6d 	cmnvc	lr, #436	; 0x1b4
      88:	5f726574 	svcpl	0x00726574
      8c:	63616c62 	cmnvs	r1, #25088	; 0x6200
      90:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
      94:	0001006d 	andeq	r0, r1, sp, rrx
      98:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
      9c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
      a0:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
      a4:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
      a8:	01006d62 	tsteq	r0, r2, ror #26
      ac:	6f6d0000 	svcvs	0x006d0000
      b0:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
      b4:	72675f72 	rsbvc	r5, r7, #456	; 0x1c8
      b8:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
      bc:	01006d62 	tsteq	r0, r2, ror #26
      c0:	72700000 	rsbsvc	r0, r0, #0
      c4:	5f737365 	svcpl	0x00737365
      c8:	63616c62 	cmnvs	r1, #25088	; 0x6200
      cc:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
      d0:	0001006d 	andeq	r0, r1, sp, rrx
      d4:	65727000 	ldrbvs	r7, [r2, #-0]!
      d8:	6c5f7373 	mrrcvs	3, 7, r7, pc, cr3	; <UNPREDICTABLE>
      dc:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
      e0:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
      e4:	00000100 	andeq	r0, r0, r0, lsl #2
      e8:	73657270 	cmnvc	r5, #112, 4
      ec:	72675f73 	rsbvc	r5, r7, #460	; 0x1cc
      f0:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
      f4:	01006d62 	tsteq	r0, r2, ror #26
      f8:	61630000 	cmnvs	r3, r0
      fc:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     100:	616c625f 	cmnvs	ip, pc, asr r2
     104:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     108:	01006d62 	tsteq	r0, r2, ror #26
     10c:	61630000 	cmnvs	r3, r0
     110:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     114:	6172675f 	cmnvs	r2, pc, asr r7
     118:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     11c:	0001006d 	andeq	r0, r1, sp, rrx
     120:	73616300 	cmnvc	r1, #0, 6
     124:	5f656c74 	svcpl	0x00656c74
     128:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     12c:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     130:	0001006d 	andeq	r0, r1, sp, rrx
     134:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     138:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
     13c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     140:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     144:	00000100 	andeq	r0, r0, r0, lsl #2
     148:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     14c:	72675f65 	rsbvc	r5, r7, #404	; 0x194
     150:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     154:	01006d62 	tsteq	r0, r2, ror #26
     158:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
     15c:	5f656c74 	svcpl	0x00656c74
     160:	63616c62 	cmnvs	r1, #25088	; 0x6200
     164:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     168:	0001006d 	andeq	r0, r1, sp, rrx
     16c:	6f6c7300 	svcvs	0x006c7300
     170:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
     174:	682e7478 	stmdavs	lr!, {r3, r4, r5, r6, sl, ip, sp, lr}
     178:	00000100 	andeq	r0, r0, r0, lsl #2
     17c:	782e6762 	stmdavc	lr!, {r1, r5, r6, r8, r9, sl, sp, lr}
     180:	01006d62 	tsteq	r0, r2, ror #26
     184:	00000000 	andeq	r0, r0, r0
     188:	00000205 	andeq	r0, r0, r5, lsl #4
     18c:	30032000 	andcc	r2, r3, r0
     190:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
     194:	01010003 	tsteq	r1, r3
     198:	10020500 	andne	r0, r2, r0, lsl #10
     19c:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
     1a0:	3d2f0125 	stfccs	f0, [pc, #-148]!	; 114 <startup-0x1ffffeec>
     1a4:	03303030 	teqeq	r0, #48	; 0x30
     1a8:	2f3d742c 	svccs	0x003d742c
     1ac:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     1b0:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     1b4:	2f3e672f 	svccs	0x003e672f
     1b8:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     1bc:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     1c0:	2f3d672f 	svccs	0x003d672f
     1c4:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     1c8:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     1cc:	2f3d672f 	svccs	0x003d672f
     1d0:	52023f67 	andpl	r3, r2, #412	; 0x19c
     1d4:	322f4c17 	eorcc	r4, pc, #5888	; 0x1700
     1d8:	4bad5975 	blmi	feb567b4 <firstTime.4040+0xdeb482cc>
     1dc:	754e4b4b 	strbvc	r4, [lr, #-2891]	; 0xfffff4b5
     1e0:	6759bb75 			; <UNDEFINED> instruction: 0x6759bb75
     1e4:	bb75835c 	bllt	1d60f5c <startup-0x1e29f0a4>
     1e8:	ad5c5959 	vldrge.16	s11, [ip, #-178]	; 0xffffff4e	; <UNPREDICTABLE>
     1ec:	5959bb75 	ldmdbpl	r9, {r0, r2, r4, r5, r6, r8, r9, fp, ip, sp, pc}^
     1f0:	8583675b 	strhi	r6, [r3, #1883]	; 0x75b
     1f4:	6a858367 	bvs	fe160f98 <firstTime.4040+0xde152ab0>
     1f8:	85838367 	strhi	r8, [r3, #871]	; 0x367
     1fc:	85838367 	strhi	r8, [r3, #871]	; 0x367
     200:	85678567 	strbhi	r8, [r7, #-1383]!	; 0xfffffa99
     204:	85838367 	strhi	r8, [r3, #871]	; 0x367
     208:	69686868 	stmdbvs	r8!, {r3, r5, r6, fp, sp, lr}^
     20c:	84838367 	strhi	r8, [r3], #871	; 0x367
     210:	83678467 	cmnhi	r7, #1728053248	; 0x67000000
     214:	83153702 	tsthi	r5, #524288	; 0x80000
     218:	4b028383 	blmi	a102c <startup-0x1ff5efd4>
     21c:	83838314 	orrhi	r8, r3, #20, 6	; 0x50000000
     220:	83838385 	orrhi	r8, r3, #335544322	; 0x14000002
     224:	83838384 	orrhi	r8, r3, #132, 6	; 0x10000002
     228:	75820f03 	strvc	r0, [r2, #3843]	; 0xf03
     22c:	75757575 	ldrbvc	r7, [r5, #-1397]!	; 0xfffffa8b
     230:	75757575 	ldrbvc	r7, [r5, #-1397]!	; 0xfffffa8b
     234:	76756775 			; <UNDEFINED> instruction: 0x76756775
     238:	4b302f2f 	blmi	c0befc <startup-0x1f3f4104>
     23c:	4b594b59 	blmi	1652fa8 <startup-0x1e9ad058>
     240:	67f7415a 	ubfxvs	r4, sl, #2, #24
     244:	3d3d4f3a 	ldccc	15, cr4, [sp, #-232]!	; 0xffffff18
     248:	93675a33 	cmnls	r7, #208896	; 0x33000
     24c:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
     250:	42676767 	rsbmi	r6, r7, #27000832	; 0x19c0000
     254:	01040200 	mrseq	r0, R12_usr
     258:	83068206 	movwhi	r8, #25094	; 0x6206
     25c:	753083bb 	ldrvc	r8, [r0, #-955]!	; 0xfffffc45
     260:	c9bbc991 	ldmibgt	fp!, {r0, r4, r7, r8, fp, lr, pc}
     264:	02d7c9c9 	sbcseq	ip, r7, #3293184	; 0x324000
     268:	c9f3135e 	ldmibgt	r3!, {r1, r2, r3, r4, r6, r8, r9, ip}^
     26c:	08c92108 	stmiaeq	r9, {r3, r8, sp}^
     270:	2f08c913 	svccs	0x0008c913
     274:	c91308c9 	ldmdbgt	r3, {r0, r3, r6, r7, fp}
     278:	08c92108 	stmiaeq	r9, {r3, r8, sp}^
     27c:	3d08bb4b 	vstrcc	d11, [r8, #-300]	; 0xfffffed4
     280:	4b3d4bca 	blmi	f531b0 <startup-0x1f0ace50>
     284:	3d59323d 	lfmcc	f3, 2, [r9, #-244]	; 0xffffff0c
     288:	bb323d4b 	bllt	c8f7bc <startup-0x1f370844>
     28c:	bbbbbbbb 	bllt	feeef180 <firstTime.4040+0xdeee0c98>
     290:	32e783e5 	rsccc	r8, r7, #-1811939325	; 0x94000003
     294:	76675959 			; <UNDEFINED> instruction: 0x76675959
     298:	67596967 	ldrbvs	r6, [r9, -r7, ror #18]
     29c:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
     2a0:	13320203 	teqne	r2, #805306368	; 0x30000000
     2a4:	03040200 	movweq	r0, #16896	; 0x4200
     2a8:	040200c9 	streq	r0, [r2], #-201	; 0xffffff37
     2ac:	008e0803 	addeq	r0, lr, r3, lsl #16
     2b0:	06010402 	streq	r0, [r1], -r2, lsl #8
     2b4:	674e0658 	smlsldvs	r0, lr, r8, r6
     2b8:	f3f34b68 	vtbx.8	d20, {d3-d6}, d24
     2bc:	673e9191 			; <UNDEFINED> instruction: 0x673e9191
     2c0:	003fbd91 	mlaseq	pc, r1, sp, fp	; <UNPREDICTABLE>
     2c4:	06010402 	streq	r0, [r1], -r2, lsl #8
     2c8:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
     2cc:	02009002 	andeq	r9, r0, #2
     2d0:	06900304 	ldreq	r0, [r0], r4, lsl #6
     2d4:	68844b67 	stmvs	r4, {r0, r1, r2, r5, r6, r8, r9, fp, lr}
     2d8:	e5916759 	ldr	r6, [r1, #1881]	; 0x759
     2dc:	4b838376 	blmi	fe0e10bc <firstTime.4040+0xde0d2bd4>
     2e0:	59bd7759 	ldmibpl	sp!, {r0, r3, r4, r6, r8, r9, sl, ip, sp, lr}
     2e4:	595d6759 	ldmdbpl	sp, {r0, r3, r4, r6, r8, r9, sl, sp, lr}^
     2e8:	bbbc2108 	bllt	fef08710 <firstTime.4040+0xdeefa228>
     2ec:	2e02d759 	mcrcs	7, 0, sp, cr2, cr9, {2}
     2f0:	00959114 	addseq	r9, r5, r4, lsl r1
     2f4:	06010402 	streq	r0, [r1], -r2, lsl #8
     2f8:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
     2fc:	0200f202 	andeq	pc, r0, #536870912	; 0x20000000
     300:	20080304 	andcs	r0, r8, r4, lsl #6
     304:	59130806 	ldmdbpl	r3, {r1, r2, fp}
     308:	9f084b6b 	svcls	0x00084b6b
     30c:	01040200 	mrseq	r0, R12_usr
     310:	02007508 	andeq	r7, r0, #8, 10	; 0x2000000
     314:	49080104 	stmdbmi	r8, {r2, r8}
     318:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
     31c:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
     320:	0200594b 	andeq	r5, r0, #1228800	; 0x12c000
     324:	00610204 	rsbeq	r0, r1, r4, lsl #4
     328:	06010402 	streq	r0, [r1], -r2, lsl #8
     32c:	0b030658 	bleq	c1c94 <startup-0x1ff3e36c>
     330:	003d084a 	eorseq	r0, sp, sl, asr #16
     334:	06010402 	streq	r0, [r1], -r2, lsl #8
     338:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
     33c:	4b064a02 	blmi	192b4c <startup-0x1fe6d4b4>
     340:	95e5d73d 	strbls	sp, [r5, #1853]!	; 0x73d
     344:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
     348:	4a060104 	bmi	180760 <startup-0x1fe7f8a0>
     34c:	02040200 	andeq	r0, r4, #0, 4
     350:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
     354:	02009003 	andeq	r9, r0, #3
     358:	064a0404 	strbeq	r0, [sl], -r4, lsl #8
     35c:	e5d73d4b 	ldrb	r3, [r7, #3403]	; 0xd4b
     360:	3f67ae4d 	svccc	0x0067ae4d
     364:	3d162602 	ldccc	6, cr2, [r6, #-8]
     368:	5a404b3d 	bpl	1013064 <startup-0x1efecf9c>
     36c:	4b594b59 	blmi	16530d8 <startup-0x1e9acf28>
     370:	91838359 	orrls	r8, r3, r9, asr r3
     374:	83919191 	orrshi	r9, r1, #1073741860	; 0x40000024
     378:	3e838384 	cdpcc	3, 8, cr8, cr3, cr4, {4}
     37c:	4c3d8383 	ldcmi	3, cr8, [sp], #-524	; 0xfffffdf4
     380:	032f8383 			; <UNDEFINED> instruction: 0x032f8383
     384:	03207edb 			; <UNDEFINED> instruction: 0x03207edb
     388:	003c00fe 	ldrshteq	r0, [ip], -lr
     38c:	03010402 	movweq	r0, #5122	; 0x1402
     390:	03207ea6 			; <UNDEFINED> instruction: 0x03207ea6
     394:	ac08028e 	sfmge	f0, 4, [r8], {142}	; 0x8e
     398:	213e3d4b 	teqcs	lr, fp, asr #26
     39c:	01000402 	tsteq	r0, r2, lsl #8
     3a0:	00008a01 	andeq	r8, r0, r1, lsl #20
     3a4:	70000200 	andvc	r0, r0, r0, lsl #4
     3a8:	02000000 	andeq	r0, r0, #0
     3ac:	0d0efb01 	vstreq	d15, [lr, #-4]
     3b0:	01010100 	mrseq	r0, (UNDEF: 17)
     3b4:	00000001 	andeq	r0, r0, r1
     3b8:	01000001 	tsteq	r0, r1
     3bc:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     3c0:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     3c4:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     3c8:	6f62616c 	svcvs	0x0062616c
     3cc:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     3d0:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     3d4:	5049442f 	subpl	r4, r9, pc, lsr #8
     3d8:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     3dc:	2f686374 	svccs	0x00686374
     3e0:	67000043 	strvs	r0, [r0, -r3, asr #32]
     3e4:	6f656d61 	svcvs	0x00656d61
     3e8:	63656a62 	cmnvs	r5, #401408	; 0x62000
     3ec:	00632e74 	rsbeq	r2, r3, r4, ror lr
     3f0:	73000001 	movwvc	r0, #1
     3f4:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
     3f8:	00682e65 	rsbeq	r2, r8, r5, ror #28
     3fc:	69000001 	stmdbvs	r0, {r0}
     400:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     404:	0100682e 	tsteq	r0, lr, lsr #16
     408:	61670000 	cmnvs	r7, r0
     40c:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
     410:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     414:	0100682e 	tsteq	r0, lr, lsr #16
     418:	00000000 	andeq	r0, r0, r0
     41c:	16b40205 	ldrtne	r0, [r4], r5, lsl #4
     420:	4c192000 	ldcmi	0, cr2, [r9], {-0}
     424:	67594b4c 	ldrbvs	r4, [r9, -ip, asr #22]
     428:	0402ca3d 	streq	ip, [r2], #-2621	; 0xfffff5c3
     42c:	84010100 	strhi	r0, [r1], #-256	; 0xffffff00
     430:	02000001 	andeq	r0, r0, #1
     434:	00013700 	andeq	r3, r1, r0, lsl #14
     438:	fb010200 	blx	40c42 <startup-0x1ffbf3be>
     43c:	01000d0e 	tsteq	r0, lr, lsl #26
     440:	00010101 	andeq	r0, r1, r1, lsl #2
     444:	00010000 	andeq	r0, r1, r0
     448:	3a430100 	bcc	10c0850 <startup-0x1ef3f7b0>
     44c:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     450:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 39c <startup-0x1ffffc64>
     454:	616c706f 	cmnvs	ip, pc, rrx
     458:	61726f62 	cmnvs	r2, r2, ror #30
     45c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     460:	442f7265 	strtmi	r7, [pc], #-613	; 468 <startup-0x1ffffb98>
     464:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     468:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     46c:	00432f68 	subeq	r2, r3, r8, ror #30
     470:	72696600 	rsbvc	r6, r9, #0, 12
     474:	00632e65 	rsbeq	r2, r3, r5, ror #28
     478:	73000001 	movwvc	r0, #1
     47c:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
     480:	00682e65 	rsbeq	r2, r8, r5, ror #28
     484:	69000001 	stmdbvs	r0, {r0}
     488:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     48c:	0100682e 	tsteq	r0, lr, lsr #16
     490:	61670000 	cmnvs	r7, r0
     494:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
     498:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     49c:	0100682e 	tsteq	r0, lr, lsr #16
     4a0:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     4a4:	625f6572 	subsvs	r6, pc, #478150656	; 0x1c800000
     4a8:	6b63616c 	blvs	18d8a60 <startup-0x1e7275a0>
     4ac:	782e325f 	stmdavc	lr!, {r0, r1, r2, r3, r4, r6, r9, ip, sp}
     4b0:	01006d62 	tsteq	r0, r2, ror #26
     4b4:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     4b8:	5f316572 	svcpl	0x00316572
     4bc:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     4c0:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     4c4:	00000100 	andeq	r0, r0, r0, lsl #2
     4c8:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     4cc:	696c5f31 	stmdbvs	ip!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     4d0:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     4d4:	006d6278 	rsbeq	r6, sp, r8, ror r2
     4d8:	66000001 	strvs	r0, [r0], -r1
     4dc:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
     4e0:	6172675f 	cmnvs	r2, pc, asr r7
     4e4:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     4e8:	0001006d 	andeq	r0, r1, sp, rrx
     4ec:	72696600 	rsbvc	r6, r9, #0, 12
     4f0:	6c5f3265 	lfmvs	f3, 2, [pc], {101}	; 0x65
     4f4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     4f8:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     4fc:	00000100 	andeq	r0, r0, r0, lsl #2
     500:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     504:	72675f33 	rsbvc	r5, r7, #51, 30	; 0xcc
     508:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     50c:	01006d62 	tsteq	r0, r2, ror #26
     510:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     514:	5f336572 	svcpl	0x00336572
     518:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     51c:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     520:	0001006d 	andeq	r0, r1, sp, rrx
     524:	72696600 	rsbvc	r6, r9, #0, 12
     528:	675f3465 	ldrbvs	r3, [pc, -r5, ror #8]
     52c:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     530:	006d6278 	rsbeq	r6, sp, r8, ror r2
     534:	66000001 	strvs	r0, [r0], -r1
     538:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
     53c:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     540:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     544:	01006d62 	tsteq	r0, r2, ror #26
     548:	69660000 	stmdbvs	r6!, {}^	; <UNPREDICTABLE>
     54c:	5f356572 	svcpl	0x00356572
     550:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     554:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     558:	00000100 	andeq	r0, r0, r0, lsl #2
     55c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     560:	696c5f35 	stmdbvs	ip!, {r0, r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     564:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     568:	006d6278 	rsbeq	r6, sp, r8, ror r2
     56c:	00000001 	andeq	r0, r0, r1
     570:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
     574:	03200017 			; <UNDEFINED> instruction: 0x03200017
     578:	2f3d0130 	svccs	0x003d0130
     57c:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     580:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     584:	2f3e672f 	svccs	0x003e672f
     588:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     58c:	3e672f3e 	mcrcc	15, 3, r2, cr7, cr14, {1}
     590:	2f3e672f 	svccs	0x003e672f
     594:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     598:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     59c:	4c144602 	ldcmi	6, cr4, [r4], {2}
     5a0:	4b3e2f4b 	blmi	f8c2d4 <startup-0x1f073d2c>
     5a4:	5a595959 	bpl	1656b10 <startup-0x1e9a94f0>
     5a8:	91919191 			; <UNDEFINED> instruction: 0x91919191
     5ac:	3d3d3e93 	ldccc	14, cr3, [sp, #-588]!	; 0xfffffdb4
     5b0:	31023d3d 	tstcc	r2, sp, lsr sp
     5b4:	e7010100 	str	r0, [r1, -r0, lsl #2]
     5b8:	02000000 	andeq	r0, r0, #0
     5bc:	00006c00 	andeq	r6, r0, r0, lsl #24
     5c0:	fb010200 	blx	40dca <startup-0x1ffbf236>
     5c4:	01000d0e 	tsteq	r0, lr, lsl #26
     5c8:	00010101 	andeq	r0, r1, r1, lsl #2
     5cc:	00010000 	andeq	r0, r1, r0
     5d0:	3a430100 	bcc	10c09d8 <startup-0x1ef3f628>
     5d4:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     5d8:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 524 <startup-0x1ffffadc>
     5dc:	616c706f 	cmnvs	ip, pc, rrx
     5e0:	61726f62 	cmnvs	r2, r2, ror #30
     5e4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     5e8:	442f7265 	strtmi	r7, [pc], #-613	; 5f0 <startup-0x1ffffa10>
     5ec:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     5f0:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     5f4:	00432f68 	subeq	r2, r3, r8, ror #30
     5f8:	616c7000 	cmnvs	ip, r0
     5fc:	2e726579 	mrccs	5, 3, r6, cr2, cr9, {3}
     600:	00010063 	andeq	r0, r1, r3, rrx
     604:	72707300 	rsbsvc	r7, r0, #0, 6
     608:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
     60c:	00010068 	andeq	r0, r1, r8, rrx
     610:	616d6900 	cmnvs	sp, r0, lsl #18
     614:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     618:	00000100 	andeq	r0, r0, r0, lsl #2
     61c:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     620:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     624:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
     628:	00000100 	andeq	r0, r0, r0, lsl #2
     62c:	02050000 	andeq	r0, r5, #0
     630:	200019b4 			; <UNDEFINED> instruction: 0x200019b4
     634:	67594d18 	smmlavs	r9, r8, sp, r4
     638:	c80c033d 	stmdagt	ip, {r0, r2, r3, r4, r5, r8, r9}
     63c:	01040200 	mrseq	r0, R12_usr
     640:	02008206 	andeq	r8, r0, #1610612736	; 0x60000000
     644:	064a0204 	strbeq	r0, [sl], -r4, lsl #4
     648:	3d754d4b 	ldclcc	13, cr4, [r5, #-300]!	; 0xfffffed4
     64c:	004c684b 	subeq	r6, ip, fp, asr #16
     650:	06010402 	streq	r0, [r1], -r2, lsl #8
     654:	3d750674 	ldclcc	6, cr0, [r5, #-464]!	; 0xfffffe30
     658:	754d684b 	strbvc	r6, [sp, #-2123]	; 0xfffff7b5
     65c:	0402005d 	streq	r0, [r2], #-93	; 0xffffffa3
     660:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
     664:	02005b59 	andeq	r5, r0, #91136	; 0x16400
     668:	4a060104 	bmi	180a80 <startup-0x1fe7f580>
     66c:	005b5906 	subseq	r5, fp, r6, lsl #18
     670:	06010402 	streq	r0, [r1], -r2, lsl #8
     674:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
     678:	02005804 	andeq	r5, r0, #4, 16	; 0x40000
     67c:	004a0504 	subeq	r0, sl, r4, lsl #10
     680:	58060402 	stmdapl	r6, {r1, sl}
     684:	07040200 	streq	r0, [r4, -r0, lsl #4]
     688:	5b4b064a 	blpl	12c1fb8 <startup-0x1ed3e048>
     68c:	01040200 	mrseq	r0, R12_usr
     690:	75067406 	strvc	r7, [r6, #-1030]	; 0xfffffbfa
     694:	684b765b 	stmdavs	fp, {r0, r1, r3, r4, r6, r9, sl, ip, sp, lr}^
     698:	67675c4b 	strbvs	r5, [r7, -fp, asr #24]!
     69c:	00120268 	andseq	r0, r2, r8, ror #4
     6a0:	01dd0101 	bicseq	r0, sp, r1, lsl #2
     6a4:	00020000 	andeq	r0, r2, r0
     6a8:	00000182 	andeq	r0, r0, r2, lsl #3
     6ac:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     6b0:	0101000d 	tsteq	r1, sp
     6b4:	00000101 	andeq	r0, r0, r1, lsl #2
     6b8:	00000100 	andeq	r0, r0, r0, lsl #2
     6bc:	2f3a4301 	svccs	0x003a4301
     6c0:	2f706f6d 	svccs	0x00706f6d
     6c4:	6f4d2f63 	svcvs	0x004d2f63
     6c8:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     6cc:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     6d0:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     6d4:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     6d8:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     6dc:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     6e0:	0000432f 	andeq	r4, r0, pc, lsr #6
     6e4:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     6e8:	0100632e 	tsteq	r0, lr, lsr #6
     6ec:	70730000 	rsbsvc	r0, r3, r0
     6f0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     6f4:	0100682e 	tsteq	r0, lr, lsr #16
     6f8:	6d690000 	stclvs	0, cr0, [r9, #-0]
     6fc:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
     700:	00010068 	andeq	r0, r1, r8, rrx
     704:	6d616700 	stclvs	7, cr6, [r1, #-0]
     708:	6a626f65 	bvs	189c4a4 <startup-0x1e763b5c>
     70c:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
     710:	00010068 	andeq	r0, r1, r8, rrx
     714:	72696200 	rsbvc	r6, r9, #0, 4
     718:	625f3164 	subsvs	r3, pc, #100, 2
     71c:	6b63616c 	blvs	18d8cd4 <startup-0x1e72732c>
     720:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     724:	00000100 	andeq	r0, r0, r0, lsl #2
     728:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     72c:	72675f31 	rsbvc	r5, r7, #49, 30	; 0xc4
     730:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     734:	01006d62 	tsteq	r0, r2, ror #26
     738:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     73c:	5f316472 	svcpl	0x00316472
     740:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     744:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     748:	0001006d 	andeq	r0, r1, sp, rrx
     74c:	72696200 	rsbvc	r6, r9, #0, 4
     750:	625f3264 	subsvs	r3, pc, #100, 4	; 0x40000006
     754:	6b63616c 	blvs	18d8d0c <startup-0x1e7272f4>
     758:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     75c:	00000100 	andeq	r0, r0, r0, lsl #2
     760:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     764:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
     768:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     76c:	01006d62 	tsteq	r0, r2, ror #26
     770:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     774:	5f326472 	svcpl	0x00326472
     778:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     77c:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     780:	0001006d 	andeq	r0, r1, sp, rrx
     784:	72696200 	rsbvc	r6, r9, #0, 4
     788:	625f3364 	subsvs	r3, pc, #100, 6	; 0x90000001
     78c:	6b63616c 	blvs	18d8d44 <startup-0x1e7272bc>
     790:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     794:	00000100 	andeq	r0, r0, r0, lsl #2
     798:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     79c:	72675f33 	rsbvc	r5, r7, #51, 30	; 0xcc
     7a0:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     7a4:	01006d62 	tsteq	r0, r2, ror #26
     7a8:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     7ac:	5f336472 	svcpl	0x00336472
     7b0:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     7b4:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     7b8:	0001006d 	andeq	r0, r1, sp, rrx
     7bc:	72696200 	rsbvc	r6, r9, #0, 4
     7c0:	625f3464 	subsvs	r3, pc, #100, 8	; 0x64000000
     7c4:	6b63616c 	blvs	18d8d7c <startup-0x1e727284>
     7c8:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     7cc:	00000100 	andeq	r0, r0, r0, lsl #2
     7d0:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     7d4:	72675f34 	rsbvc	r5, r7, #52, 30	; 0xd0
     7d8:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     7dc:	01006d62 	tsteq	r0, r2, ror #26
     7e0:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     7e4:	5f346472 	svcpl	0x00346472
     7e8:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     7ec:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     7f0:	0001006d 	andeq	r0, r1, sp, rrx
     7f4:	72696200 	rsbvc	r6, r9, #0, 4
     7f8:	625f3564 	subsvs	r3, pc, #100, 10	; 0x19000000
     7fc:	6b63616c 	blvs	18d8db4 <startup-0x1e72724c>
     800:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     804:	00000100 	andeq	r0, r0, r0, lsl #2
     808:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     80c:	72675f35 	rsbvc	r5, r7, #53, 30	; 0xd4
     810:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     814:	01006d62 	tsteq	r0, r2, ror #26
     818:	69620000 	stmdbvs	r2!, {}^	; <UNPREDICTABLE>
     81c:	5f356472 	svcpl	0x00356472
     820:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     824:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     828:	0001006d 	andeq	r0, r1, sp, rrx
     82c:	05000000 	streq	r0, [r0, #-0]
     830:	001bb802 	andseq	fp, fp, r2, lsl #16
     834:	013f0320 	teqeq	pc, r0, lsr #6
     838:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     83c:	2f3d672f 	svccs	0x003d672f
     840:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     844:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     848:	2f3f672f 	svccs	0x003f672f
     84c:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     850:	3e672f3d 	mcrcc	15, 3, r2, cr7, cr13, {1}
     854:	2f3d672f 	svccs	0x003d672f
     858:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     85c:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     860:	2f3d672f 	svccs	0x003d672f
     864:	5e023d67 	cdppl	13, 0, cr3, cr2, cr7, {3}
     868:	2f4b4c14 	svccs	0x004b4c14
     86c:	59594b3e 	ldmdbpl	r9, {r1, r2, r3, r4, r5, r8, r9, fp, lr}^
     870:	915c5959 	cmpls	ip, r9, asr r9
     874:	93919191 	orrsls	r9, r1, #1073741860	; 0x40000024
     878:	3d3d3e94 	ldccc	14, cr3, [sp, #-592]!	; 0xfffffdb0
     87c:	3d023d3d 	stccc	13, cr3, [r2, #-244]	; 0xffffff0c
     880:	61010100 	mrsvs	r0, (UNDEF: 17)
     884:	02000001 	andeq	r0, r0, #1
     888:	00011c00 	andeq	r1, r1, r0, lsl #24
     88c:	fb010200 	blx	41096 <startup-0x1ffbef6a>
     890:	01000d0e 	tsteq	r0, lr, lsl #26
     894:	00010101 	andeq	r0, r1, r1, lsl #2
     898:	00010000 	andeq	r0, r1, r0
     89c:	3a430100 	bcc	10c0ca4 <startup-0x1ef3f35c>
     8a0:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     8a4:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 7f0 <startup-0x1ffff810>
     8a8:	616c706f 	cmnvs	ip, pc, rrx
     8ac:	61726f62 	cmnvs	r2, r2, ror #30
     8b0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     8b4:	442f7265 	strtmi	r7, [pc], #-613	; 8bc <startup-0x1ffff744>
     8b8:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     8bc:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     8c0:	00432f68 	subeq	r2, r3, r8, ror #30
     8c4:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     8c8:	632e6863 			; <UNDEFINED> instruction: 0x632e6863
     8cc:	00000100 	andeq	r0, r0, r0, lsl #2
     8d0:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     8d4:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
     8d8:	00000100 	andeq	r0, r0, r0, lsl #2
     8dc:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     8e0:	00682e65 	rsbeq	r2, r8, r5, ror #28
     8e4:	67000001 	strvs	r0, [r0, -r1]
     8e8:	6f656d61 	svcvs	0x00656d61
     8ec:	63656a62 	cmnvs	r5, #401408	; 0x62000
     8f0:	00682e74 	rsbeq	r2, r8, r4, ror lr
     8f4:	77000001 	strvc	r0, [r0, -r1]
     8f8:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     8fc:	6c625f31 	stclvs	15, cr5, [r2], #-196	; 0xffffff3c
     900:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     904:	006d6278 	rsbeq	r6, sp, r8, ror r2
     908:	77000001 	strvc	r0, [r0, -r1]
     90c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     910:	72675f31 	rsbvc	r5, r7, #49, 30	; 0xc4
     914:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     918:	01006d62 	tsteq	r0, r2, ror #26
     91c:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     920:	31686374 	smccc	34356	; 0x8634
     924:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     928:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     92c:	01006d62 	tsteq	r0, r2, ror #26
     930:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     934:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     938:	616c625f 	cmnvs	ip, pc, asr r2
     93c:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     940:	01006d62 	tsteq	r0, r2, ror #26
     944:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     948:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     94c:	6172675f 	cmnvs	r2, pc, asr r7
     950:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     954:	0001006d 	andeq	r0, r1, sp, rrx
     958:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     95c:	5f326863 	svcpl	0x00326863
     960:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     964:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     968:	0001006d 	andeq	r0, r1, sp, rrx
     96c:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     970:	5f336863 	svcpl	0x00336863
     974:	63616c62 	cmnvs	r1, #25088	; 0x6200
     978:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     97c:	0001006d 	andeq	r0, r1, sp, rrx
     980:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     984:	5f336863 	svcpl	0x00336863
     988:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     98c:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     990:	00000100 	andeq	r0, r0, r0, lsl #2
     994:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     998:	6c5f3368 	mrrcvs	3, 6, r3, pc, cr8	; <UNPREDICTABLE>
     99c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     9a0:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     9a4:	00000100 	andeq	r0, r0, r0, lsl #2
     9a8:	02050000 	andeq	r0, r5, #0
     9ac:	20001f1c 	andcs	r1, r0, ip, lsl pc
     9b0:	3e012803 	cdpcc	8, 0, cr2, cr1, cr3, {0}
     9b4:	2f3d672f 	svccs	0x003d672f
     9b8:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     9bc:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     9c0:	2f3d672f 	svccs	0x003d672f
     9c4:	672f3f67 	strvs	r3, [pc, -r7, ror #30]!
     9c8:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     9cc:	023e672f 	eorseq	r6, lr, #12320768	; 0xbc0000
     9d0:	4b4c143a 	blmi	1305ac0 <startup-0x1ecfa540>
     9d4:	594b3e2f 	stmdbpl	fp, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}^
     9d8:	91915b59 	orrsls	r5, r1, r9, asr fp
     9dc:	3d3e9491 	cfldrscc	mvf9, [lr, #-580]!	; 0xfffffdbc
     9e0:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
     9e4:	01010029 	tsteq	r1, r9, lsr #32
     9e8:	00000183 	andeq	r0, r0, r3, lsl #3
     9ec:	011a0002 	tsteq	sl, r2
     9f0:	01020000 	mrseq	r0, (UNDEF: 2)
     9f4:	000d0efb 	strdeq	r0, [sp], -fp
     9f8:	01010101 	tsteq	r1, r1, lsl #2
     9fc:	01000000 	mrseq	r0, (UNDEF: 0)
     a00:	43010000 	movwmi	r0, #4096	; 0x1000
     a04:	6f6d2f3a 	svcvs	0x006d2f3a
     a08:	2f632f70 	svccs	0x00632f70
     a0c:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     a10:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     a14:	6f697461 	svcvs	0x00697461
     a18:	2f72656e 	svccs	0x0072656e
     a1c:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     a20:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     a24:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     a28:	49440000 	stmdbmi	r4, {}^	; <UNPREDICTABLE>
     a2c:	00632e50 	rsbeq	r2, r3, r0, asr lr
     a30:	73000001 	movwvc	r0, #1
     a34:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
     a38:	00682e65 	rsbeq	r2, r8, r5, ror #28
     a3c:	69000001 	stmdbvs	r0, {r0}
     a40:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     a44:	0100682e 	tsteq	r0, lr, lsr #16
     a48:	61670000 	cmnvs	r7, r0
     a4c:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
     a50:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     a54:	0100682e 	tsteq	r0, lr, lsr #16
     a58:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     a5c:	31686374 	smccc	34356	; 0x8634
     a60:	616c625f 	cmnvs	ip, pc, asr r2
     a64:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     a68:	01006d62 	tsteq	r0, r2, ror #26
     a6c:	69770000 	ldmdbvs	r7!, {}^	; <UNPREDICTABLE>
     a70:	31686374 	smccc	34356	; 0x8634
     a74:	6172675f 	cmnvs	r2, pc, asr r7
     a78:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     a7c:	0001006d 	andeq	r0, r1, sp, rrx
     a80:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     a84:	5f316863 	svcpl	0x00316863
     a88:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     a8c:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     a90:	0001006d 	andeq	r0, r1, sp, rrx
     a94:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     a98:	5f326863 	svcpl	0x00326863
     a9c:	63616c62 	cmnvs	r1, #25088	; 0x6200
     aa0:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     aa4:	0001006d 	andeq	r0, r1, sp, rrx
     aa8:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     aac:	5f326863 	svcpl	0x00326863
     ab0:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     ab4:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     ab8:	00000100 	andeq	r0, r0, r0, lsl #2
     abc:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     ac0:	6c5f3268 	lfmvs	f3, 2, [pc], {104}	; 0x68
     ac4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     ac8:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     acc:	00000100 	andeq	r0, r0, r0, lsl #2
     ad0:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     ad4:	625f3368 	subsvs	r3, pc, #104, 6	; 0xa0000001
     ad8:	6b63616c 	blvs	18d9090 <startup-0x1e726f70>
     adc:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     ae0:	00000100 	andeq	r0, r0, r0, lsl #2
     ae4:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     ae8:	675f3368 	ldrbvs	r3, [pc, -r8, ror #6]
     aec:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     af0:	006d6278 	rsbeq	r6, sp, r8, ror r2
     af4:	77000001 	strvc	r0, [r0, -r1]
     af8:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     afc:	696c5f33 	stmdbvs	ip!, {r0, r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     b00:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     b04:	006d6278 	rsbeq	r6, sp, r8, ror r2
     b08:	00000001 	andeq	r0, r0, r1
     b0c:	54020500 	strpl	r0, [r2], #-1280	; 0xfffffb00
     b10:	03200021 			; <UNDEFINED> instruction: 0x03200021
     b14:	2f3e012c 	svccs	0x003e012c
     b18:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     b1c:	3e672f3d 	mcrcc	15, 3, r2, cr7, cr13, {1}
     b20:	2f3d672f 	svccs	0x003d672f
     b24:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     b28:	3d672f3f 	stclcc	15, cr2, [r7, #-252]!	; 0xffffff04
     b2c:	2f3d672f 	svccs	0x003d672f
     b30:	3a023e67 	bcc	904d4 <startup-0x1ff6fb2c>
     b34:	2f4b4c14 	svccs	0x004b4c14
     b38:	59594b3e 	ldmdbpl	r9, {r1, r2, r3, r4, r5, r8, r9, fp, lr}^
     b3c:	9191915b 	orrsls	r9, r1, fp, asr r1
     b40:	3d3d3e94 	ldccc	14, cr3, [sp, #-592]!	; 0xfffffdb0
     b44:	29023d3d 	stmdbcs	r2, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
     b48:	3d3d5917 			; <UNDEFINED> instruction: 0x3d3d5917
     b4c:	5a4e4b93 	bpl	13939a0 <startup-0x1ec6c660>
     b50:	004c675a 	subeq	r6, ip, sl, asr r7
     b54:	06010402 	streq	r0, [r1], -r2, lsl #8
     b58:	3d830682 	stccc	6, cr0, [r3, #520]	; 0x208
     b5c:	4b504d91 	blmi	14141a8 <startup-0x1ebebe58>
     b60:	4b3108ae 	blmi	c42e20 <startup-0x1f3bd1e0>
     b64:	4b1b503d 	blmi	6d4c60 <startup-0x1f92b3a0>
     b68:	10023f3d 	andne	r3, r2, sp, lsr pc
     b6c:	a5010100 	strge	r0, [r1, #-256]	; 0xffffff00
     b70:	02000001 	andeq	r0, r0, #1
     b74:	00015700 	andeq	r5, r1, r0, lsl #14
     b78:	fb010200 	blx	41382 <startup-0x1ffbec7e>
     b7c:	01000d0e 	tsteq	r0, lr, lsl #26
     b80:	00010101 	andeq	r0, r1, r1, lsl #2
     b84:	00010000 	andeq	r0, r1, r0
     b88:	3a430100 	bcc	10c0f90 <startup-0x1ef3f070>
     b8c:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
     b90:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; adc <startup-0x1ffff524>
     b94:	616c706f 	cmnvs	ip, pc, rrx
     b98:	61726f62 	cmnvs	r2, r2, ror #30
     b9c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     ba0:	442f7265 	strtmi	r7, [pc], #-613	; ba8 <startup-0x1ffff458>
     ba4:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
     ba8:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     bac:	00432f68 	subeq	r2, r3, r8, ror #30
     bb0:	616c6600 	cmnvs	ip, r0, lsl #12
     bb4:	632e656d 			; <UNDEFINED> instruction: 0x632e656d
     bb8:	00000100 	andeq	r0, r0, r0, lsl #2
     bbc:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     bc0:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
     bc4:	00000100 	andeq	r0, r0, r0, lsl #2
     bc8:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     bcc:	00682e65 	rsbeq	r2, r8, r5, ror #28
     bd0:	67000001 	strvs	r0, [r0, -r1]
     bd4:	6f656d61 	svcvs	0x00656d61
     bd8:	63656a62 	cmnvs	r5, #401408	; 0x62000
     bdc:	00682e74 	rsbeq	r2, r8, r4, ror lr
     be0:	66000001 	strvs	r0, [r0], -r1
     be4:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
     be8:	6c625f31 	stclvs	15, cr5, [r2], #-196	; 0xffffff3c
     bec:	2e6b6361 	cdpcs	3, 6, cr6, cr11, cr1, {3}
     bf0:	006d6278 	rsbeq	r6, sp, r8, ror r2
     bf4:	66000001 	strvs	r0, [r0], -r1
     bf8:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
     bfc:	72675f31 	rsbvc	r5, r7, #49, 30	; 0xc4
     c00:	782e7961 	stmdavc	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
     c04:	01006d62 	tsteq	r0, r2, ror #26
     c08:	6c660000 	stclvs	0, cr0, [r6], #-0
     c0c:	31656d61 	cmncc	r5, r1, ror #26
     c10:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     c14:	782e7468 	stmdavc	lr!, {r3, r5, r6, sl, ip, sp, lr}
     c18:	01006d62 	tsteq	r0, r2, ror #26
     c1c:	6c660000 	stclvs	0, cr0, [r6], #-0
     c20:	32656d61 	rsbcc	r6, r5, #6208	; 0x1840
     c24:	616c625f 	cmnvs	ip, pc, asr r2
     c28:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     c2c:	01006d62 	tsteq	r0, r2, ror #26
     c30:	6c660000 	stclvs	0, cr0, [r6], #-0
     c34:	32656d61 	rsbcc	r6, r5, #6208	; 0x1840
     c38:	6172675f 	cmnvs	r2, pc, asr r7
     c3c:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
     c40:	0001006d 	andeq	r0, r1, sp, rrx
     c44:	616c6600 	cmnvs	ip, r0, lsl #12
     c48:	5f32656d 	svcpl	0x0032656d
     c4c:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     c50:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
     c54:	0001006d 	andeq	r0, r1, sp, rrx
     c58:	616c6600 	cmnvs	ip, r0, lsl #12
     c5c:	5f33656d 	svcpl	0x0033656d
     c60:	63616c62 	cmnvs	r1, #25088	; 0x6200
     c64:	62782e6b 	rsbsvs	r2, r8, #1712	; 0x6b0
     c68:	0001006d 	andeq	r0, r1, sp, rrx
     c6c:	616c6600 	cmnvs	ip, r0, lsl #12
     c70:	5f33656d 	svcpl	0x0033656d
     c74:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     c78:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     c7c:	00000100 	andeq	r0, r0, r0, lsl #2
     c80:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
     c84:	6c5f3365 	mrrcvs	3, 6, r3, pc, cr5	; <UNPREDICTABLE>
     c88:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     c8c:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     c90:	00000100 	andeq	r0, r0, r0, lsl #2
     c94:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
     c98:	625f3465 	subsvs	r3, pc, #1694498816	; 0x65000000
     c9c:	6b63616c 	blvs	18d9254 <startup-0x1e726dac>
     ca0:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     ca4:	00000100 	andeq	r0, r0, r0, lsl #2
     ca8:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
     cac:	675f3465 	ldrbvs	r3, [pc, -r5, ror #8]
     cb0:	2e796172 	mrccs	1, 3, r6, cr9, cr2, {3}
     cb4:	006d6278 	rsbeq	r6, sp, r8, ror r2
     cb8:	66000001 	strvs	r0, [r0], -r1
     cbc:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
     cc0:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     cc4:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     cc8:	006d6278 	rsbeq	r6, sp, r8, ror r2
     ccc:	00000001 	andeq	r0, r0, r1
     cd0:	c4020500 	strgt	r0, [r2], #-1280	; 0xfffffb00
     cd4:	03200024 			; <UNDEFINED> instruction: 0x03200024
     cd8:	2f3e0131 	svccs	0x003e0131
     cdc:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     ce0:	3e672f3d 	mcrcc	15, 3, r2, cr7, cr13, {1}
     ce4:	2f3d672f 	svccs	0x003d672f
     ce8:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     cec:	3d672f3f 	stclcc	15, cr2, [r7, #-252]!	; 0xffffff04
     cf0:	2f3d672f 	svccs	0x003d672f
     cf4:	672f3e67 	strvs	r3, [pc, -r7, ror #28]!
     cf8:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     cfc:	023e672f 	eorseq	r6, lr, #12320768	; 0xbc0000
     d00:	4b4c144d 	blmi	1305e3c <startup-0x1ecfa1c4>
     d04:	594b3e2f 	stmdbpl	fp, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}^
     d08:	91915a59 	orrsls	r5, r1, r9, asr sl
     d0c:	3d3e9391 	ldccc	3, cr9, [lr, #-580]!	; 0xfffffdbc
     d10:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
     d14:	0101002f 	tsteq	r1, pc, lsr #32
     d18:	00000231 	andeq	r0, r0, r1, lsr r2
     d1c:	01ba0002 			; <UNDEFINED> instruction: 0x01ba0002
     d20:	01020000 	mrseq	r0, (UNDEF: 2)
     d24:	000d0efb 	strdeq	r0, [sp], -fp
     d28:	01010101 	tsteq	r1, r1, lsl #2
     d2c:	01000000 	mrseq	r0, (UNDEF: 0)
     d30:	43010000 	movwmi	r0, #4096	; 0x1000
     d34:	6f6d2f3a 	svcvs	0x006d2f3a
     d38:	2f632f70 	svccs	0x00632f70
     d3c:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     d40:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     d44:	6f697461 	svcvs	0x00697461
     d48:	2f72656e 	svccs	0x0072656e
     d4c:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     d50:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     d54:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     d58:	6f620000 	svcvs	0x00620000
     d5c:	632e6d6f 			; <UNDEFINED> instruction: 0x632e6d6f
     d60:	00000100 	andeq	r0, r0, r0, lsl #2
     d64:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     d68:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
     d6c:	00000100 	andeq	r0, r0, r0, lsl #2
     d70:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     d74:	00682e65 	rsbeq	r2, r8, r5, ror #28
     d78:	67000001 	strvs	r0, [r0, -r1]
     d7c:	6f656d61 	svcvs	0x00656d61
     d80:	63656a62 	cmnvs	r5, #401408	; 0x62000
     d84:	00682e74 	rsbeq	r2, r8, r4, ror lr
     d88:	62000001 	andvs	r0, r0, #1
     d8c:	316d6f6f 	cmncc	sp, pc, ror #30
     d90:	616c625f 	cmnvs	ip, pc, asr r2
     d94:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     d98:	01006d62 	tsteq	r0, r2, ror #26
     d9c:	6f620000 	svcvs	0x00620000
     da0:	5f316d6f 	svcpl	0x00316d6f
     da4:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     da8:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     dac:	00000100 	andeq	r0, r0, r0, lsl #2
     db0:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; c30 <startup-0x1ffff3d0>
     db4:	696c5f31 	stmdbvs	ip!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     db8:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     dbc:	006d6278 	rsbeq	r6, sp, r8, ror r2
     dc0:	62000001 	andvs	r0, r0, #1
     dc4:	326d6f6f 	rsbcc	r6, sp, #444	; 0x1bc
     dc8:	616c625f 	cmnvs	ip, pc, asr r2
     dcc:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     dd0:	01006d62 	tsteq	r0, r2, ror #26
     dd4:	6f620000 	svcvs	0x00620000
     dd8:	5f326d6f 	svcpl	0x00326d6f
     ddc:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     de0:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     de4:	00000100 	andeq	r0, r0, r0, lsl #2
     de8:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; c68 <startup-0x1ffff398>
     dec:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     df0:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     df4:	006d6278 	rsbeq	r6, sp, r8, ror r2
     df8:	62000001 	andvs	r0, r0, #1
     dfc:	336d6f6f 	cmncc	sp, #444	; 0x1bc
     e00:	616c625f 	cmnvs	ip, pc, asr r2
     e04:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     e08:	01006d62 	tsteq	r0, r2, ror #26
     e0c:	6f620000 	svcvs	0x00620000
     e10:	5f336d6f 	svcpl	0x00336d6f
     e14:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     e18:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     e1c:	00000100 	andeq	r0, r0, r0, lsl #2
     e20:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; ca0 <startup-0x1ffff360>
     e24:	696c5f33 	stmdbvs	ip!, {r0, r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     e28:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     e2c:	006d6278 	rsbeq	r6, sp, r8, ror r2
     e30:	62000001 	andvs	r0, r0, #1
     e34:	346d6f6f 	strbtcc	r6, [sp], #-3951	; 0xfffff091
     e38:	616c625f 	cmnvs	ip, pc, asr r2
     e3c:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     e40:	01006d62 	tsteq	r0, r2, ror #26
     e44:	6f620000 	svcvs	0x00620000
     e48:	5f346d6f 	svcpl	0x00346d6f
     e4c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     e50:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     e54:	00000100 	andeq	r0, r0, r0, lsl #2
     e58:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; cd8 <startup-0x1ffff328>
     e5c:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     e60:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     e64:	006d6278 	rsbeq	r6, sp, r8, ror r2
     e68:	62000001 	andvs	r0, r0, #1
     e6c:	356d6f6f 	strbcc	r6, [sp, #-3951]!	; 0xfffff091
     e70:	616c625f 	cmnvs	ip, pc, asr r2
     e74:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     e78:	01006d62 	tsteq	r0, r2, ror #26
     e7c:	6f620000 	svcvs	0x00620000
     e80:	5f356d6f 	svcpl	0x00356d6f
     e84:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     e88:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     e8c:	00000100 	andeq	r0, r0, r0, lsl #2
     e90:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; d10 <startup-0x1ffff2f0>
     e94:	696c5f35 	stmdbvs	ip!, {r0, r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     e98:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     e9c:	006d6278 	rsbeq	r6, sp, r8, ror r2
     ea0:	62000001 	andvs	r0, r0, #1
     ea4:	366d6f6f 	strbtcc	r6, [sp], -pc, ror #30
     ea8:	616c625f 	cmnvs	ip, pc, asr r2
     eac:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     eb0:	01006d62 	tsteq	r0, r2, ror #26
     eb4:	6f620000 	svcvs	0x00620000
     eb8:	5f366d6f 	svcpl	0x00366d6f
     ebc:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     ec0:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
     ec4:	00000100 	andeq	r0, r0, r0, lsl #2
     ec8:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; d48 <startup-0x1ffff2b8>
     ecc:	696c5f36 	stmdbvs	ip!, {r1, r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     ed0:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
     ed4:	006d6278 	rsbeq	r6, sp, r8, ror r2
     ed8:	00000001 	andeq	r0, r0, r1
     edc:	70020500 	andvc	r0, r2, r0, lsl #10
     ee0:	03200027 			; <UNDEFINED> instruction: 0x03200027
     ee4:	3e0100cf 	cdpcc	0, 0, cr0, cr1, cr15, {6}
     ee8:	2f3d672f 	svccs	0x003d672f
     eec:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     ef0:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     ef4:	2f3d672f 	svccs	0x003d672f
     ef8:	672f3f67 	strvs	r3, [pc, -r7, ror #30]!
     efc:	3d672f3d 	stclcc	15, cr2, [r7, #-244]!	; 0xffffff0c
     f00:	2f3e672f 	svccs	0x003e672f
     f04:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     f08:	3e672f3d 	mcrcc	15, 3, r2, cr7, cr13, {1}
     f0c:	2f3d672f 	svccs	0x003d672f
     f10:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
     f14:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
     f18:	2f3d672f 	svccs	0x003d672f
     f1c:	71023d67 	tstvc	r2, r7, ror #26
     f20:	2f594c14 	svccs	0x00594c14
     f24:	59594b3e 	ldmdbpl	r9, {r1, r2, r3, r4, r5, r8, r9, fp, lr}^
     f28:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
     f2c:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
     f30:	76757575 			; <UNDEFINED> instruction: 0x76757575
     f34:	91919191 			; <UNDEFINED> instruction: 0x91919191
     f38:	91919191 			; <UNDEFINED> instruction: 0x91919191
     f3c:	91919191 			; <UNDEFINED> instruction: 0x91919191
     f40:	3e939191 	mrccc	1, 4, r9, cr3, cr1, {4}
     f44:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     f48:	01006602 	tsteq	r0, r2, lsl #12
     f4c:	00034e01 	andeq	r4, r3, r1, lsl #28
     f50:	7c000200 	sfmvc	f0, 4, [r0], {-0}
     f54:	02000000 	andeq	r0, r0, #0
     f58:	0d0efb01 	vstreq	d15, [lr, #-4]
     f5c:	01010100 	mrseq	r0, (UNDEF: 17)
     f60:	00000001 	andeq	r0, r0, r1
     f64:	01000001 	tsteq	r0, r1
     f68:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     f6c:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     f70:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     f74:	6f62616c 	svcvs	0x0062616c
     f78:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     f7c:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     f80:	5049442f 	subpl	r4, r9, pc, lsr #8
     f84:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     f88:	2f686374 	svccs	0x00686374
     f8c:	67000043 	strvs	r0, [r0, -r3, asr #32]
     f90:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
     f94:	2e736369 	cdpcs	3, 7, cr6, cr3, cr9, {3}
     f98:	00010063 	andeq	r0, r1, r3, rrx
     f9c:	72707300 	rsbsvc	r7, r0, #0, 6
     fa0:	2e657469 	cdpcs	4, 6, cr7, cr5, cr9, {3}
     fa4:	00010068 	andeq	r0, r1, r8, rrx
     fa8:	616d6900 	cmnvs	sp, r0, lsl #18
     fac:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     fb0:	00000100 	andeq	r0, r0, r0, lsl #2
     fb4:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     fb8:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
     fbc:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
     fc0:	00000100 	andeq	r0, r0, r0, lsl #2
     fc4:	70617267 	rsbvc	r7, r1, r7, ror #4
     fc8:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
     fcc:	0100682e 	tsteq	r0, lr, lsr #16
     fd0:	00000000 	andeq	r0, r0, r0
     fd4:	2c9c0205 	lfmcs	f0, 4, [ip], {5}
     fd8:	30152000 	andscc	r2, r5, r0
     fdc:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     fe0:	01040200 	mrseq	r0, R12_usr
     fe4:	67062006 	strvs	r2, [r6, -r6]
     fe8:	3d30a03d 	ldccc	0, cr10, [r0, #-244]!	; 0xffffff0c
     fec:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
     ff0:	06010402 	streq	r0, [r1], -r2, lsl #8
     ff4:	3d670620 	stclcc	6, cr0, [r7, #-128]!	; 0xffffff80
     ff8:	2f214ba0 	svccs	0x00214ba0
     ffc:	5e2a2f2f 	cdppl	15, 2, cr2, cr10, cr15, {1}
    1000:	57214f4c 	strpl	r4, [r1, -ip, asr #30]!
    1004:	4a09035b 	bmi	241d78 <startup-0x1fdbe288>
    1008:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
    100c:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
    1010:	00570304 	subseq	r0, r7, r4, lsl #6
    1014:	06010402 	streq	r0, [r1], -r2, lsl #8
    1018:	674c063c 	smlaldxvs	r0, ip, ip, r6
    101c:	2f674b2f 	svccs	0x00674b2f
    1020:	a14b4b4b 	cmpge	fp, fp, asr #22
    1024:	83915968 	orrshi	r5, r1, #104, 18	; 0x1a0000
    1028:	59687659 	stmdbpl	r8!, {r0, r3, r4, r6, r9, sl, ip, sp, lr}^
    102c:	675983d7 	smmlsvs	r9, r7, r3, r8
    1030:	74120367 	ldrvc	r0, [r2], #-871	; 0xfffffc99
    1034:	03206e03 			; <UNDEFINED> instruction: 0x03206e03
    1038:	70034a12 	andvc	r4, r3, r2, lsl sl
    103c:	223d3d20 	eorscs	r3, sp, #32, 26	; 0x800
    1040:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
    1044:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
    1048:	3d3e4c22 	ldccc	12, cr4, [lr, #-136]!	; 0xffffff78
    104c:	313d3d3d 	teqcc	sp, sp, lsr sp
    1050:	3d752f3d 	ldclcc	15, cr2, [r5, #-244]!	; 0xffffff0c
    1054:	4a790331 	bmi	1e41d20 <startup-0x1e1be2e0>
    1058:	bc3d2327 	ldclt	3, cr2, [sp], #-156	; 0xffffff64
    105c:	3d3d3d67 	ldccc	13, cr3, [sp, #-412]!	; 0xfffffe64
    1060:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
    1064:	3e3d592f 	vaddcc.f16	s10, s26, s31	; <UNPREDICTABLE>
    1068:	4b303d4b 	blmi	c1059c <startup-0x1f3efa64>
    106c:	bc3d313d 	ldflts	f3, [sp], #-244	; 0xffffff0c
    1070:	5a595967 	bpl	1657614 <startup-0x1e9a89ec>
    1074:	2f594b91 	svccs	0x00594b91
    1078:	593e2f3d 	ldmdbpl	lr!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}
    107c:	3d59303d 	ldclcc	0, cr3, [r9, #-244]	; 0xffffff0c
    1080:	3d3d3d31 	ldccc	13, cr3, [sp, #-196]!	; 0xffffff3c
    1084:	593d9167 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, ip, pc}
    1088:	4b833d3d 	blmi	fe0d0584 <firstTime.4040+0xde0c209c>
    108c:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
    1090:	2f4c833d 	svccs	0x004c833d
    1094:	3d3d3e3d 	ldccc	14, cr3, [sp, #-244]!	; 0xffffff0c
    1098:	3d3d3e3d 	ldccc	14, cr3, [sp, #-244]!	; 0xffffff0c
    109c:	4b4b4b3e 	blmi	12d3d9c <startup-0x1ed2c264>
    10a0:	3d3d4b4b 	fldmdbxcc	sp!, {d4-d40}	;@ Deprecated
    10a4:	4c9f4b3e 	vldmiami	pc, {d4-<overflow reg d34>}
    10a8:	03040200 	movweq	r0, #16896	; 0x4200
    10ac:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
    10b0:	02004903 	andeq	r4, r0, #49152	; 0xc000
    10b4:	58060104 	stmdapl	r6, {r2, r8}
    10b8:	02040200 	andeq	r0, r4, #0, 4
    10bc:	02004606 	andeq	r4, r0, #6291456	; 0x600000
    10c0:	58060104 	stmdapl	r6, {r2, r8}
    10c4:	764d5206 	strbvc	r5, [sp], -r6, lsl #4
    10c8:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
    10cc:	004a0601 	subeq	r0, sl, r1, lsl #12
    10d0:	4a020402 	bmi	820e0 <startup-0x1ff7df20>
    10d4:	03040200 	movweq	r0, #16896	; 0x4200
    10d8:	084c064a 	stmdaeq	ip, {r1, r3, r6, r9, sl}^
    10dc:	3e3d3d13 	mrccc	13, 1, r3, cr13, cr3, {0}
    10e0:	76763dbc 			; <UNDEFINED> instruction: 0x76763dbc
    10e4:	d71fd93d 			; <UNDEFINED> instruction: 0xd71fd93d
    10e8:	1fd93d23 	svcne	0x00d93d23
    10ec:	d93d23d7 	ldmdble	sp!, {r0, r1, r2, r4, r6, r7, r8, r9, sp}
    10f0:	6103d71f 	tstvs	r3, pc, lsl r7
    10f4:	2023032e 	eorcs	r0, r3, lr, lsr #6
    10f8:	020069af 	andeq	r6, r0, #2867200	; 0x2bc000
    10fc:	4a060104 	bmi	181514 <startup-0x1fe7eaec>
    1100:	02040200 	andeq	r0, r4, #0, 4
    1104:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    1108:	4b064a03 	blmi	19391c <startup-0x1fe6c6e4>
    110c:	59130875 	ldmdbpl	r3, {r0, r2, r4, r5, r6, fp}
    1110:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
    1114:	3d5b5959 	vldrcc.16	s11, [fp, #-178]	; 0xffffff4e	; <UNPREDICTABLE>
    1118:	4c4b3d76 	mcrrmi	13, 7, r3, fp, cr6
    111c:	d8c93e4b 	stmiale	r9, {r0, r1, r3, r6, r9, sl, fp, ip, sp}^
    1120:	ae3dca9f 			; <UNDEFINED> instruction: 0xae3dca9f
    1124:	ac5e03a0 	mrrcge	3, 10, r0, lr, cr0
    1128:	84202303 	strthi	r2, [r0], #-771	; 0xfffffcfd
    112c:	00592f4c 	subseq	r2, r9, ip, asr #30
    1130:	06010402 	streq	r0, [r1], -r2, lsl #8
    1134:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
    1138:	02002e02 	andeq	r2, r0, #2, 28
    113c:	00200404 	eoreq	r0, r0, r4, lsl #8
    1140:	06040402 	streq	r0, [r4], -r2, lsl #8
    1144:	75d7593d 	ldrbvc	r5, [r7, #2365]	; 0x93d
    1148:	03040200 	movweq	r0, #16896	; 0x4200
    114c:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
    1150:	0200ab03 	andeq	sl, r0, #3072	; 0xc00
    1154:	9e060104 	adflss	f0, f6, f4
    1158:	02040200 	andeq	r0, r4, #0, 4
    115c:	02005506 	andeq	r5, r0, #25165824	; 0x1800000
    1160:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
    1164:	02040200 	andeq	r0, r4, #0, 4
    1168:	02005606 	andeq	r5, r0, #6291456	; 0x600000
    116c:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
    1170:	580a0306 	stmdapl	sl, {r1, r2, r8, r9}
    1174:	5a597652 	bpl	165eac4 <startup-0x1e9a153c>
    1178:	bb3d3d59 	bllt	f506e4 <startup-0x1f0af91c>
    117c:	3de6913d 	stfccp	f1, [r6, #244]!	; 0xf4
    1180:	02006708 	andeq	r6, r0, #8, 14	; 0x200000
    1184:	7a030204 	bvc	c199c <startup-0x1ff3e664>
    1188:	02006608 	andeq	r6, r0, #8, 12	; 0x800000
    118c:	3c060104 	stfccs	f0, [r6], {4}
    1190:	02040200 	andeq	r0, r4, #0, 4
    1194:	02003a06 	andeq	r3, r0, #24576	; 0x6000
    1198:	3c060104 	stfccs	f0, [r6], {4}
    119c:	02040200 	andeq	r0, r4, #0, 4
    11a0:	02004906 	andeq	r4, r0, #98304	; 0x18000
    11a4:	3c060104 	stfccs	f0, [r6], {4}
    11a8:	580e0306 	stmdapl	lr, {r1, r2, r8, r9}
    11ac:	003d774c 	eorseq	r7, sp, ip, asr #14
    11b0:	3d030402 	cfstrscc	mvf0, [r3, #-8]
    11b4:	03040200 	movweq	r0, #16896	; 0x4200
    11b8:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
    11bc:	003c0601 	eorseq	r0, ip, r1, lsl #12
    11c0:	06020402 	streq	r0, [r2], -r2, lsl #8
    11c4:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
    11c8:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    11cc:	3d774c6b 	ldclcc	12, cr4, [r7, #-428]!	; 0xfffffe54
    11d0:	03040200 	movweq	r0, #16896	; 0x4200
    11d4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    11d8:	02006503 	andeq	r6, r0, #12582912	; 0xc00000
    11dc:	3c060104 	stfccs	f0, [r6], {4}
    11e0:	02040200 	andeq	r0, r4, #0, 4
    11e4:	02006506 	andeq	r6, r0, #25165824	; 0x1800000
    11e8:	3c060104 	stfccs	f0, [r6], {4}
    11ec:	3d4d6b06 	vstrcc	d22, [sp, #-24]	; 0xffffffe8
    11f0:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
    11f4:	02006930 	andeq	r6, r0, #48, 18	; 0xc0000
    11f8:	00300104 	eorseq	r0, r0, r4, lsl #2
    11fc:	2f010402 	svccs	0x00010402
    1200:	01040200 	mrseq	r0, R12_usr
    1204:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    1208:	0200c901 	andeq	ip, r0, #16384	; 0x4000
    120c:	13080104 	movwne	r0, #33028	; 0x8104
    1210:	01040200 	mrseq	r0, R12_usr
    1214:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
    1218:	02002f01 	andeq	r2, r0, #1, 30
    121c:	00680104 	rsbeq	r0, r8, r4, lsl #2
    1220:	c9010402 	stmdbgt	r1, {r1, sl}
    1224:	01040200 	mrseq	r0, R12_usr
    1228:	02001308 	andeq	r1, r0, #8, 6	; 0x20000000
    122c:	00920104 	addseq	r0, r2, r4, lsl #2
    1230:	4b010402 	blmi	42240 <startup-0x1ffbddc0>
    1234:	01040200 	mrseq	r0, R12_usr
    1238:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
    123c:	02002f01 	andeq	r2, r0, #1, 30
    1240:	00670104 	rsbeq	r0, r7, r4, lsl #2
    1244:	08010402 	stmdaeq	r1, {r1, sl}
    1248:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
    124c:	02004c01 	andeq	r4, r0, #256	; 0x100
    1250:	6c030104 	stfvss	f0, [r3], {4}
    1254:	3c19033c 	ldccc	3, cr0, [r9], {60}	; 0x3c
    1258:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
    125c:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
    1260:	91080304 	tstls	r8, r4, lsl #6
    1264:	03040200 	movweq	r0, #16896	; 0x4200
    1268:	02009108 	andeq	r9, r0, #8, 2
    126c:	91080304 	tstls	r8, r4, lsl #6
    1270:	03040200 	movweq	r0, #16896	; 0x4200
    1274:	02004608 	andeq	r4, r0, #8, 12	; 0x800000
    1278:	3c060104 	stfccs	f0, [r6], {4}
    127c:	3e085006 	cdpcc	0, 0, cr5, cr8, cr6, {0}
    1280:	21083d4b 	tstcs	r8, fp, asr #26
    1284:	21082108 	tstcs	r8, r8, lsl #2
    1288:	21304b4d 	teqcs	r0, sp, asr #22
    128c:	3e4b3e4b 	cdpcc	14, 4, cr3, cr11, cr11, {2}
    1290:	034b3e4b 	movteq	r3, #48715	; 0xbe4b
    1294:	0e033c75 	mcreq	12, 0, r3, cr3, cr5, {3}
    1298:	0b023058 	bleq	8d400 <startup-0x1ff72c00>
    129c:	72010100 	andvc	r0, r1, #0, 2
    12a0:	02000000 	andeq	r0, r0, #0
    12a4:	00005b00 	andeq	r5, r0, r0, lsl #22
    12a8:	fb010200 	blx	41ab2 <startup-0x1ffbe54e>
    12ac:	01000d0e 	tsteq	r0, lr, lsl #26
    12b0:	00010101 	andeq	r0, r1, r1, lsl #2
    12b4:	00010000 	andeq	r0, r1, r0
    12b8:	3a430100 	bcc	10c16c0 <startup-0x1ef3e940>
    12bc:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
    12c0:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 120c <startup-0x1fffedf4>
    12c4:	616c706f 	cmnvs	ip, pc, rrx
    12c8:	61726f62 	cmnvs	r2, r2, ror #30
    12cc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    12d0:	442f7265 	strtmi	r7, [pc], #-613	; 12d8 <startup-0x1fffed28>
    12d4:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
    12d8:	63746957 	cmnvs	r4, #1425408	; 0x15c000
    12dc:	00432f68 	subeq	r2, r3, r8, ror #30
    12e0:	616d6900 	cmnvs	sp, r0, lsl #18
    12e4:	632e6567 			; <UNDEFINED> instruction: 0x632e6567
    12e8:	00000100 	andeq	r0, r0, r0, lsl #2
    12ec:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
    12f0:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
    12f4:	00000100 	andeq	r0, r0, r0, lsl #2
    12f8:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
    12fc:	00682e65 	rsbeq	r2, r8, r5, ror #28
    1300:	00000001 	andeq	r0, r0, r1
    1304:	e0020500 	and	r0, r2, r0, lsl #10
    1308:	1420003a 	strtne	r0, [r0], #-58	; 0xffffffc6
    130c:	3d3d3d75 	ldccc	13, cr3, [sp, #-468]!	; 0xfffffe2c
    1310:	01000402 	tsteq	r0, r2, lsl #8
    1314:	00006801 	andeq	r6, r0, r1, lsl #16
    1318:	51000200 	mrspl	r0, R8_usr
    131c:	02000000 	andeq	r0, r0, #0
    1320:	0d0efb01 	vstreq	d15, [lr, #-4]
    1324:	01010100 	mrseq	r0, (UNDEF: 17)
    1328:	00000001 	andeq	r0, r0, r1
    132c:	01000001 	tsteq	r0, r1
    1330:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    1334:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    1338:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    133c:	6f62616c 	svcvs	0x0062616c
    1340:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1344:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    1348:	5049442f 	subpl	r4, r9, pc, lsr #8
    134c:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    1350:	2f686374 	svccs	0x00686374
    1354:	73000043 	movwvc	r0, #67	; 0x43
    1358:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
    135c:	00632e65 	rsbeq	r2, r3, r5, ror #28
    1360:	73000001 	movwvc	r0, #1
    1364:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
    1368:	00682e65 	rsbeq	r2, r8, r5, ror #28
    136c:	00000001 	andeq	r0, r0, r1
    1370:	08020500 	stmdaeq	r2, {r8, sl}
    1374:	1520003b 	strne	r0, [r0, #-59]!	; 0xffffffc5
    1378:	3d3d3d75 	ldccc	13, cr3, [sp, #-468]!	; 0xfffffe2c
    137c:	01000402 	tsteq	r0, r2, lsl #8
    1380:	00006c01 	andeq	r6, r0, r1, lsl #24
    1384:	4d000200 	sfmmi	f0, 4, [r0, #-0]
    1388:	02000000 	andeq	r0, r0, #0
    138c:	0d0efb01 	vstreq	d15, [lr, #-4]
    1390:	01010100 	mrseq	r0, (UNDEF: 17)
    1394:	00000001 	andeq	r0, r0, r1
    1398:	01000001 	tsteq	r0, r1
    139c:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    13a0:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    13a4:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    13a8:	6f62616c 	svcvs	0x0062616c
    13ac:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    13b0:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    13b4:	5049442f 	subpl	r4, r9, pc, lsr #8
    13b8:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    13bc:	2f686374 	svccs	0x00686374
    13c0:	67000043 	strvs	r0, [r0, -r3, asr #32]
    13c4:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    13c8:	00010063 	andeq	r0, r1, r3, rrx
    13cc:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    13d0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    13d4:	00000001 	andeq	r0, r0, r1
    13d8:	30020500 	andcc	r0, r2, r0, lsl #10
    13dc:	1520003b 	strne	r0, [r0, #-59]!	; 0xffffffc5
    13e0:	2f763d2f 	svccs	0x00763d2f
    13e4:	4b693d59 	blmi	1a50950 <startup-0x1e5af6b0>
    13e8:	22309167 	eorscs	r9, r0, #-1073741799	; 0xc0000019
    13ec:	01000402 	tsteq	r0, r2, lsl #8
    13f0:	00015a01 	andeq	r5, r1, r1, lsl #20
    13f4:	81000200 	mrshi	r0, R8_usr
    13f8:	02000000 	andeq	r0, r0, #0
    13fc:	0d0efb01 	vstreq	d15, [lr, #-4]
    1400:	01010100 	mrseq	r0, (UNDEF: 17)
    1404:	00000001 	andeq	r0, r0, r1
    1408:	01000001 	tsteq	r0, r1
    140c:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    1410:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    1414:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    1418:	6f62616c 	svcvs	0x0062616c
    141c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1420:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    1424:	5049442f 	subpl	r4, r9, pc, lsr #8
    1428:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    142c:	2f686374 	svccs	0x00686374
    1430:	61000043 	tstvs	r0, r3, asr #32
    1434:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1438:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    143c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
    1440:	0100632e 	tsteq	r0, lr, lsr #6
    1444:	70730000 	rsbsvc	r0, r3, r0
    1448:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    144c:	0100682e 	tsteq	r0, lr, lsr #16
    1450:	6d690000 	stclvs	0, cr0, [r9, #-0]
    1454:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
    1458:	00010068 	andeq	r0, r1, r8, rrx
    145c:	6d616700 	stclvs	7, cr6, [r1, #-0]
    1460:	6a626f65 	bvs	189d1fc <startup-0x1e762e04>
    1464:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
    1468:	00010068 	andeq	r0, r1, r8, rrx
    146c:	61726700 	cmnvs	r2, r0, lsl #14
    1470:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    1474:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1478:	00000001 	andeq	r0, r0, r1
    147c:	9c020500 	cfstr32ls	mvfx0, [r2], {-0}
    1480:	0320003b 			; <UNDEFINED> instruction: 0x0320003b
    1484:	5969012e 	stmdbpl	r9!, {r1, r2, r3, r5, r8}^
    1488:	696859bb 	stmdbvs	r8!, {r0, r1, r3, r4, r5, r7, r8, fp, ip, lr}^
    148c:	59130859 	ldmdbpl	r3, {r0, r3, r4, r6, fp}
    1490:	3d3d6776 	ldccc	7, cr6, [sp, #-472]!	; 0xfffffe28
    1494:	3d674c59 	stclcc	12, cr4, [r7, #-356]!	; 0xfffffe9c
    1498:	3e4c593d 			; <UNDEFINED> instruction: 0x3e4c593d
    149c:	5a3d3d67 	bpl	f50a40 <startup-0x1f0af5c0>
    14a0:	842f6767 	strthi	r6, [pc], #-1895	; 14a8 <startup-0x1fffeb58>
    14a4:	3d3d673e 	ldccc	7, cr6, [sp, #-248]!	; 0xffffff08
    14a8:	2f67675a 	svccs	0x0067675a
    14ac:	4b3d6784 	blmi	f5b2c4 <startup-0x1f0a4d3c>
    14b0:	3e683d2f 	cdpcc	13, 6, cr3, cr8, cr15, {1}
    14b4:	4b2f2f3d 	blmi	bcd1b0 <startup-0x1f432e50>
    14b8:	67762f3d 			; <UNDEFINED> instruction: 0x67762f3d
    14bc:	01040200 	mrseq	r0, R12_usr
    14c0:	83062006 	movwhi	r2, #24582	; 0x6006
    14c4:	4c3d593d 			; <UNDEFINED> instruction: 0x4c3d593d
    14c8:	764b6791 			; <UNDEFINED> instruction: 0x764b6791
    14cc:	00304c9f 	mlaseq	r0, pc, ip, r4	; <UNPREDICTABLE>
    14d0:	06010402 	streq	r0, [r1], -r2, lsl #8
    14d4:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
    14d8:	02003f3d 	andeq	r3, r0, #61, 30	; 0xf4
    14dc:	20060104 	andcs	r0, r6, r4, lsl #2
    14e0:	3d3d8306 	ldccc	3, cr8, [sp, #-24]!	; 0xffffffe8
    14e4:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
    14e8:	06200601 	strteq	r0, [r0], -r1, lsl #12
    14ec:	3f3d3d83 	svccc	0x003d3d83
    14f0:	01040200 	mrseq	r0, R12_usr
    14f4:	83062006 	movwhi	r2, #24582	; 0x6006
    14f8:	3e3f3d3d 	mrccc	13, 1, r3, cr15, cr13, {1}
    14fc:	2f843d34 	svccs	0x00843d34
    1500:	3e3e2f2f 	cdpcc	15, 3, cr2, cr14, cr15, {1}
    1504:	214b2f84 	smlalbbcs	r2, fp, r4, pc	; <UNPREDICTABLE>
    1508:	4b2f4d73 	blmi	bd4adc <startup-0x1f42b524>
    150c:	684d7321 	stmdavs	sp, {r0, r5, r8, r9, ip, sp, lr}^
    1510:	214b3059 	qdaddcs	r3, r9, fp
    1514:	214b4d73 	hvccs	46291	; 0xb4d3
    1518:	4c4b4e73 	mcrrmi	14, 7, r4, fp, cr3
    151c:	2f4b3075 	svccs	0x004b3075
    1520:	0073213d 	rsbseq	r2, r3, sp, lsr r1
    1524:	06010402 	streq	r0, [r1], -r2, lsl #8
    1528:	4b6b064a 	blmi	1ac2e58 <startup-0x1e53d1a8>
    152c:	73213d2f 			; <UNDEFINED> instruction: 0x73213d2f
    1530:	01040200 	mrseq	r0, R12_usr
    1534:	6b064a06 	blvs	193d54 <startup-0x1fe6c2ac>
    1538:	753e4e4b 	ldrvc	r4, [lr, #-3659]!	; 0xfffff1b5
    153c:	4b2f2f68 	blmi	bcd2e4 <startup-0x1f432d1c>
    1540:	4d73213d 	ldfmie	f2, [r3, #-244]!	; 0xffffff0c
    1544:	73212f4b 			; <UNDEFINED> instruction: 0x73212f4b
    1548:	0802214d 	stmdaeq	r2, {r0, r2, r3, r6, r8, sp}
    154c:	76010100 	strvc	r0, [r1], -r0, lsl #2
    1550:	02000000 	andeq	r0, r0, #0
    1554:	00005700 	andeq	r5, r0, r0, lsl #14
    1558:	fb010200 	blx	41d62 <startup-0x1ffbe29e>
    155c:	01000d0e 	tsteq	r0, lr, lsl #26
    1560:	00010101 	andeq	r0, r1, r1, lsl #2
    1564:	00010000 	andeq	r0, r1, r0
    1568:	3a430100 	bcc	10c1970 <startup-0x1ef3e690>
    156c:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
    1570:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 14bc <startup-0x1fffeb44>
    1574:	616c706f 	cmnvs	ip, pc, rrx
    1578:	61726f62 	cmnvs	r2, r2, ror #30
    157c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1580:	442f7265 	strtmi	r7, [pc], #-613	; 1588 <startup-0x1fffea78>
    1584:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
    1588:	63746957 	cmnvs	r4, #1425408	; 0x15c000
    158c:	00432f68 	subeq	r2, r3, r8, ror #30
    1590:	6f6c7300 	svcvs	0x006c7300
    1594:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
    1598:	632e7478 			; <UNDEFINED> instruction: 0x632e7478
    159c:	00000100 	andeq	r0, r0, r0, lsl #2
    15a0:	776f6c73 			; <UNDEFINED> instruction: 0x776f6c73
    15a4:	7865745f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
    15a8:	00682e74 	rsbeq	r2, r8, r4, ror lr
    15ac:	00000001 	andeq	r0, r0, r1
    15b0:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
    15b4:	15200040 	strne	r0, [r0, #-64]!	; 0xffffffc0
    15b8:	84c99f59 	strbhi	r9, [r9], #3929	; 0xf59
    15bc:	3d754c59 	ldclcc	12, cr4, [r5, #-356]!	; 0xfffffe9c
    15c0:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    15c4:	01000702 	tsteq	r0, r2, lsl #14
    15c8:	0000d601 	andeq	sp, r0, r1, lsl #12
    15cc:	ab000200 	blge	1dd4 <startup-0x1fffe22c>
    15d0:	02000000 	andeq	r0, r0, #0
    15d4:	0d0efb01 	vstreq	d15, [lr, #-4]
    15d8:	01010100 	mrseq	r0, (UNDEF: 17)
    15dc:	00000001 	andeq	r0, r0, r1
    15e0:	01000001 	tsteq	r0, r1
    15e4:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    15e8:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    15ec:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    15f0:	6f62616c 	svcvs	0x0062616c
    15f4:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    15f8:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    15fc:	5049442f 	subpl	r4, r9, pc, lsr #8
    1600:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    1604:	2f686374 	svccs	0x00686374
    1608:	69000043 	stmdbvs	r0, {r0, r1, r6}
    160c:	6f6f646e 	svcvs	0x006f646e
    1610:	632e7372 			; <UNDEFINED> instruction: 0x632e7372
    1614:	00000100 	andeq	r0, r0, r0, lsl #2
    1618:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
    161c:	682e6574 	stmdavs	lr!, {r2, r4, r5, r6, r8, sl, sp, lr}
    1620:	00000100 	andeq	r0, r0, r0, lsl #2
    1624:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
    1628:	00682e65 	rsbeq	r2, r8, r5, ror #28
    162c:	67000001 	strvs	r0, [r0, -r1]
    1630:	6f656d61 	svcvs	0x00656d61
    1634:	63656a62 	cmnvs	r5, #401408	; 0x62000
    1638:	00682e74 	rsbeq	r2, r8, r4, ror lr
    163c:	69000001 	stmdbvs	r0, {r0}
    1640:	6f6f646e 	svcvs	0x006f646e
    1644:	625f7372 	subsvs	r7, pc, #-939524095	; 0xc8000001
    1648:	6b63616c 	blvs	18d9c00 <startup-0x1e726400>
    164c:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
    1650:	00000100 	andeq	r0, r0, r0, lsl #2
    1654:	6f646e69 	svcvs	0x00646e69
    1658:	5f73726f 	svcpl	0x0073726f
    165c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
    1660:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
    1664:	00000100 	andeq	r0, r0, r0, lsl #2
    1668:	6f646e69 	svcvs	0x00646e69
    166c:	5f73726f 	svcpl	0x0073726f
    1670:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    1674:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
    1678:	0001006d 	andeq	r0, r1, sp, rrx
    167c:	05000000 	streq	r0, [r0, #-0]
    1680:	00415002 	subeq	r5, r1, r2
    1684:	01130320 	tsteq	r3, r0, lsr #6
    1688:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
    168c:	2f3d672f 	svccs	0x003d672f
    1690:	5a083e67 	bpl	211034 <startup-0x1fdeefcc>
    1694:	3e2f4b4c 	vnmulcc.f64	d4, d15, d12
    1698:	3d3e934c 	ldccc	3, cr9, [lr, #-304]!	; 0xfffffed0
    169c:	083d3d3d 	ldmdaeq	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
    16a0:	da010100 	ble	41aa8 <startup-0x1ffbe558>
    16a4:	02000000 	andeq	r0, r0, #0
    16a8:	0000af00 	andeq	sl, r0, r0, lsl #30
    16ac:	fb010200 	blx	41eb6 <startup-0x1ffbe14a>
    16b0:	01000d0e 	tsteq	r0, lr, lsl #26
    16b4:	00010101 	andeq	r0, r1, r1, lsl #2
    16b8:	00010000 	andeq	r0, r1, r0
    16bc:	3a430100 	bcc	10c1ac4 <startup-0x1ef3e53c>
    16c0:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
    16c4:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 1610 <startup-0x1fffe9f0>
    16c8:	616c706f 	cmnvs	ip, pc, rrx
    16cc:	61726f62 	cmnvs	r2, r2, ror #30
    16d0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    16d4:	442f7265 	strtmi	r7, [pc], #-613	; 16dc <startup-0x1fffe924>
    16d8:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
    16dc:	63746957 	cmnvs	r4, #1425408	; 0x15c000
    16e0:	00432f68 	subeq	r2, r3, r8, ror #30
    16e4:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    16e8:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    16ec:	00632e32 	rsbeq	r2, r3, r2, lsr lr
    16f0:	73000001 	movwvc	r0, #1
    16f4:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
    16f8:	00682e65 	rsbeq	r2, r8, r5, ror #28
    16fc:	69000001 	stmdbvs	r0, {r0}
    1700:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1704:	0100682e 	tsteq	r0, lr, lsr #16
    1708:	61670000 	cmnvs	r7, r0
    170c:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
    1710:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
    1714:	0100682e 	tsteq	r0, lr, lsr #16
    1718:	6e690000 	cdpvs	0, 6, cr0, cr9, cr0, {0}
    171c:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1720:	625f3273 	subsvs	r3, pc, #805306375	; 0x30000007
    1724:	6b63616c 	blvs	18d9cdc <startup-0x1e726324>
    1728:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
    172c:	00000100 	andeq	r0, r0, r0, lsl #2
    1730:	6f646e69 	svcvs	0x00646e69
    1734:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1738:	6172675f 	cmnvs	r2, pc, asr r7
    173c:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
    1740:	0001006d 	andeq	r0, r1, sp, rrx
    1744:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1748:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    174c:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    1750:	2e746867 	cdpcs	8, 7, cr6, cr4, cr7, {3}
    1754:	006d6278 	rsbeq	r6, sp, r8, ror r2
    1758:	00000001 	andeq	r0, r0, r1
    175c:	38020500 	stmdacc	r2, {r8, sl}
    1760:	03200042 			; <UNDEFINED> instruction: 0x03200042
    1764:	2f3e0113 	svccs	0x003e0113
    1768:	672f3d67 	strvs	r3, [pc, -r7, ror #26]!
    176c:	3e672f3d 	mcrcc	15, 3, r2, cr7, cr13, {1}
    1770:	4b4c5a08 	blmi	1317f98 <startup-0x1ece8068>
    1774:	934c3e2f 	movtls	r3, #52783	; 0xce2f
    1778:	3d3d3d3e 	ldccc	13, cr3, [sp, #-248]!	; 0xffffff08
    177c:	0100083d 	tsteq	r0, sp, lsr r8
    1780:	0000d201 	andeq	sp, r0, r1, lsl #4
    1784:	a7000200 	strge	r0, [r0, -r0, lsl #4]
    1788:	02000000 	andeq	r0, r0, #0
    178c:	0d0efb01 	vstreq	d15, [lr, #-4]
    1790:	01010100 	mrseq	r0, (UNDEF: 17)
    1794:	00000001 	andeq	r0, r0, r1
    1798:	01000001 	tsteq	r0, r1
    179c:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    17a0:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    17a4:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    17a8:	6f62616c 	svcvs	0x0062616c
    17ac:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    17b0:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    17b4:	5049442f 	subpl	r4, r9, pc, lsr #8
    17b8:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    17bc:	2f686374 	svccs	0x00686374
    17c0:	74000043 	strvc	r0, [r0], #-67	; 0xffffffbd
    17c4:	68706f72 	ldmdavs	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    17c8:	00632e79 	rsbeq	r2, r3, r9, ror lr
    17cc:	73000001 	movwvc	r0, #1
    17d0:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
    17d4:	00682e65 	rsbeq	r2, r8, r5, ror #28
    17d8:	69000001 	stmdbvs	r0, {r0}
    17dc:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    17e0:	0100682e 	tsteq	r0, lr, lsr #16
    17e4:	61670000 	cmnvs	r7, r0
    17e8:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
    17ec:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
    17f0:	0100682e 	tsteq	r0, lr, lsr #16
    17f4:	72740000 	rsbsvc	r0, r4, #0
    17f8:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    17fc:	616c625f 	cmnvs	ip, pc, asr r2
    1800:	782e6b63 	stmdavc	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    1804:	01006d62 	tsteq	r0, r2, ror #26
    1808:	72740000 	rsbsvc	r0, r4, #0
    180c:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1810:	6172675f 	cmnvs	r2, pc, asr r7
    1814:	62782e79 	rsbsvs	r2, r8, #1936	; 0x790
    1818:	0001006d 	andeq	r0, r1, sp, rrx
    181c:	6f727400 	svcvs	0x00727400
    1820:	5f796870 	svcpl	0x00796870
    1824:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    1828:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
    182c:	0001006d 	andeq	r0, r1, sp, rrx
    1830:	05000000 	streq	r0, [r0, #-0]
    1834:	00432002 	subeq	r2, r3, r2
    1838:	01130320 	tsteq	r3, r0, lsr #6
    183c:	3d672f3e 	stclcc	15, cr2, [r7, #-248]!	; 0xffffff08
    1840:	2f3d672f 	svccs	0x003d672f
    1844:	5a083e67 	bpl	2111e8 <startup-0x1fdeee18>
    1848:	3e2f4b4c 	vnmulcc.f64	d4, d15, d12
    184c:	3d3e934c 	ldccc	3, cr9, [lr, #-304]!	; 0xfffffed0
    1850:	083d3d3d 	ldmdaeq	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
    1854:	Address 0x00001854 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
       4:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
       8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
       c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
      10:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
      14:	5f336572 	svcpl	0x00336572
      18:	6f646e69 	svcvs	0x00646e69
      1c:	0073726f 	rsbseq	r7, r3, pc, ror #4
      20:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
      24:	616d4974 	smcvs	54420	; 0xd494
      28:	67006567 	strvs	r6, [r0, -r7, ror #10]
      2c:	49796172 	ldmdbmi	r9!, {r1, r4, r5, r6, r8, sp, lr}^
      30:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
      34:	73616300 	cmnvc	r1, #0, 6
      38:	5f656c74 	svcpl	0x00656c74
      3c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
      40:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
      44:	6c700073 	ldclvs	0, cr0, [r0], #-460	; 0xfffffe34
      48:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
      4c:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
      50:	726b5f74 	rsbvc	r5, fp, #116, 30	; 0x1d0
      54:	61670061 	cmnvs	r7, r1, rrx
      58:	6f5f656d 	svcvs	0x005f656d
      5c:	00726576 	rsbseq	r6, r2, r6, ror r5
      60:	72665f6e 	rsbvc	r5, r6, #440	; 0x1b8
      64:	73656d61 	cmnvc	r5, #6208	; 0x1840
      68:	73616300 	cmnvc	r1, #0, 6
      6c:	4c656c74 	stclmi	12, cr6, [r5], #-464	; 0xfffffe30
      70:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
      74:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
      78:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
      7c:	74003031 	strvc	r3, [r0], #-49	; 0xffffffcf
      80:	43706d65 	cmnmi	r0, #6464	; 0x1940
      84:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
      88:	616c4265 	cmnvs	ip, r5, ror #4
      8c:	47006b63 	strmi	r6, [r0, -r3, ror #22]
      90:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
      94:	36203939 			; <UNDEFINED> instruction: 0x36203939
      98:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
      9c:	31303220 	teqcc	r0, r0, lsr #4
      a0:	31323037 	teqcc	r2, r7, lsr r0
      a4:	72282035 	eorvc	r2, r8, #53	; 0x35
      a8:	61656c65 	cmnvs	r5, r5, ror #24
      ac:	20296573 	eorcs	r6, r9, r3, ror r5
      b0:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
      b4:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
      b8:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
      bc:	2d362d64 	ldccs	13, cr2, [r6, #-400]!	; 0xfffffe70
      c0:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
      c4:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
      c8:	73697665 	cmnvc	r9, #105906176	; 0x6500000
      cc:	206e6f69 	rsbcs	r6, lr, r9, ror #30
      d0:	35353432 	ldrcc	r3, [r5, #-1074]!	; 0xfffffbce
      d4:	205d3231 	subscs	r3, sp, r1, lsr r2
      d8:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
      dc:	20626d75 	rsbcs	r6, r2, r5, ror sp
      e0:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
      e4:	613d6863 	teqvs	sp, r3, ror #16
      e8:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
      ec:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
      f0:	6f6c666d 	svcvs	0x006c666d
      f4:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
      f8:	733d6962 	teqvc	sp, #1605632	; 0x188000
      fc:	2074666f 	rsbscs	r6, r4, pc, ror #12
     100:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
     104:	20626d75 	rsbcs	r6, r2, r5, ror sp
     108:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
     10c:	613d6863 	teqvs	sp, r3, ror #16
     110:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
     114:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
     118:	4f2d2067 	svcmi	0x002d2067
     11c:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
     120:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
     124:	6d003939 	vstrvs.16	s6, [r0, #-114]	; 0xffffff8e	; <UNPREDICTABLE>
     128:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     12c:	69007265 	stmdbvs	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     130:	6c635f73 	stclvs	15, cr5, [r3], #-460	; 0xfffffe34
     134:	69626d69 	stmdbvs	r2!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
     138:	7000676e 	andvc	r6, r0, lr, ror #14
     13c:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     140:	00377265 	eorseq	r7, r7, r5, ror #4
     144:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
     148:	624f656c 	subvs	r6, pc, #108, 10	; 0x1b000000
     14c:	7274006a 	rsbsvc	r0, r4, #106	; 0x6a
     150:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
     154:	7275625f 	rsbsvc	r6, r5, #-268435451	; 0xf0000005
     158:	0064656e 	rsbeq	r6, r4, lr, ror #10
     15c:	73657270 	cmnvc	r5, #112, 4
     160:	6c625f73 	stclvs	15, cr5, [r2], #-460	; 0xfffffe34
     164:	5f6b6361 	svcpl	0x006b6361
     168:	73746962 	cmnvc	r4, #1605632	; 0x188000
     16c:	72696600 	rsbvc	r6, r9, #0, 12
     170:	695f3165 	ldmdbvs	pc, {r0, r2, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     174:	6f6f646e 	svcvs	0x006f646e
     178:	63007372 	movwvs	r7, #882	; 0x372
     17c:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
     180:	616d4965 	cmnvs	sp, r5, ror #18
     184:	00736567 	rsbseq	r6, r3, r7, ror #10
     188:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     18c:	616d4965 	cmnvs	sp, r5, ror #18
     190:	73006567 	movwvc	r6, #1383	; 0x567
     194:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     198:	74007075 	strvc	r7, [r0], #-117	; 0xffffff8b
     19c:	31747865 	cmncc	r4, r5, ror #16
     1a0:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     1a4:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     1a8:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     1ac:	69740074 	ldmdbvs	r4!, {r2, r4, r5, r6}^
     1b0:	5f656c74 	svcpl	0x00656c74
     1b4:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     1b8:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     1bc:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     1c0:	4d706d65 	ldclmi	13, cr6, [r0, #-404]!	; 0xfffffe6c
     1c4:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     1c8:	72477265 	subvc	r7, r7, #1342177286	; 0x50000006
     1cc:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     1d0:	32747865 	rsbscc	r7, r4, #6619136	; 0x650000
     1d4:	65727000 	ldrbvs	r7, [r2, #-0]!
     1d8:	72477373 	subvc	r7, r7, #-872415231	; 0xcc000001
     1dc:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     1e0:	34747865 	ldrbtcc	r7, [r4], #-2149	; 0xfffff79b
     1e4:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     1e8:	66003574 			; <UNDEFINED> instruction: 0x66003574
     1ec:	31657269 	cmncc	r5, r9, ror #4
     1f0:	73616800 	cmnvc	r1, #0, 16
     1f4:	696c635f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
     1f8:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
     1fc:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     200:	00674270 	rsbeq	r4, r7, r0, ror r2
     204:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     208:	65740033 	ldrbvs	r0, [r4, #-51]!	; 0xffffffcd
     20c:	00387478 	eorseq	r7, r8, r8, ror r4
     210:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
     214:	6c625f65 	stclvs	15, cr5, [r2], #-404	; 0xfffffe6c
     218:	5f6b6361 	svcpl	0x006b6361
     21c:	73746962 	cmnvc	r4, #1605632	; 0x188000
     220:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     224:	6e6f4d70 	mcrvs	13, 3, r4, cr15, cr0, {3}
     228:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     22c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     230:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
     234:	00377478 	eorseq	r7, r7, r8, ror r4
     238:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
     23c:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     240:	5f726566 	svcpl	0x00726566
     244:	63616c62 	cmnvs	r1, #25088	; 0x6200
     248:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
     24c:	00367478 	eorseq	r7, r6, r8, ror r4
     250:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     254:	6f6d0039 	svcvs	0x006d0039
     258:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     25c:	696f5072 	stmdbvs	pc!, {r1, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
     260:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     264:	6f6d0032 	svcvs	0x006d0032
     268:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     26c:	696f5072 	stmdbvs	pc!, {r1, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
     270:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     274:	6f720033 	svcvs	0x00720033
     278:	64003277 	strvs	r3, [r0], #-631	; 0xfffffd89
     27c:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
     280:	6d007961 	vstrvs.16	s14, [r0, #-194]	; 0xffffff3e	; <UNPREDICTABLE>
     284:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     288:	625f7265 	subsvs	r7, pc, #1342177286	; 0x50000006
     28c:	6b63616c 	blvs	18d8844 <startup-0x1e7277bc>
     290:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     294:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
     298:	615f7469 	cmpvs	pc, r9, ror #8
     29c:	6c007070 	stcvs	0, cr7, [r0], {112}	; 0x70
     2a0:	5f676e6f 	svcpl	0x00676e6f
     2a4:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     2a8:	65727000 	ldrbvs	r7, [r2, #-0]!
     2ac:	624f7373 	subvs	r7, pc, #-872415231	; 0xcc000001
     2b0:	6966006a 	stmdbvs	r6!, {r1, r3, r5, r6}^
     2b4:	5f326572 	svcpl	0x00326572
     2b8:	6f646e69 	svcvs	0x00646e69
     2bc:	0073726f 	rsbseq	r7, r3, pc, ror #4
     2c0:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
     2c4:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     2c8:	5f726566 	svcpl	0x00726566
     2cc:	63616c62 	cmnvs	r1, #25088	; 0x6200
     2d0:	72675f6b 	rsbvc	r5, r7, #428	; 0x1ac
     2d4:	6c5f7961 	mrrcvs	9, 6, r7, pc, cr1	; <UNPREDICTABLE>
     2d8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     2dc:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     2e0:	72745f74 	rsbsvc	r5, r4, #116, 30	; 0x1d0
     2e4:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
     2e8:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     2ec:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     2f0:	6f700035 	svcvs	0x00700035
     2f4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     2f8:	64003672 	strvs	r3, [r0], #-1650	; 0xfffff98e
     2fc:	61747369 	cmnvs	r4, r9, ror #6
     300:	5f65636e 	svcpl	0x0065636e
     304:	72696168 	rsbvc	r6, r9, #104, 2
     308:	6f72745f 	svcvs	0x0072745f
     30c:	00796870 	rsbseq	r6, r9, r0, ror r8
     310:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     314:	38726574 	ldmdacc	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     318:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     31c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     320:	65740039 	ldrbvs	r0, [r4, #-57]!	; 0xffffffc7
     324:	6143706d 	cmpvs	r3, sp, rrx
     328:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     32c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     330:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
     334:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
     338:	73696400 	cmnvc	r9, #0, 8
     33c:	636e6174 	cmnvs	lr, #116, 2
     340:	61685f65 	cmnvs	r8, r5, ror #30
     344:	445f7269 	ldrbmi	r7, [pc], #-617	; 34c <startup-0x1ffffcb4>
     348:	77005049 	strvc	r5, [r0, -r9, asr #32]
     34c:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
     350:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     354:	6f625f74 	svcvs	0x00625f74
     358:	64006d6f 	strvs	r6, [r0], #-3439	; 0xfffff291
     35c:	5f776172 	svcpl	0x00776172
     360:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     364:	625f7265 	subsvs	r7, pc, #1342177286	; 0x50000006
     368:	6b63616c 	blvs	18d8920 <startup-0x1e7276e0>
     36c:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     370:	73007468 	movwvc	r7, #1128	; 0x468
     374:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
     378:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     37c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     380:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     384:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
     388:	5f79616c 	svcpl	0x0079616c
     38c:	69746e75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     390:	65745f6c 	ldrbvs	r5, [r4, #-3948]!	; 0xfffff094
     394:	74007478 	strvc	r7, [r0], #-1144	; 0xfffffb88
     398:	4d706d65 	ldclmi	13, cr6, [r0, #-404]!	; 0xfffffe6c
     39c:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     3a0:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
     3a4:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     3a8:	63616c42 	cmnvs	r1, #16896	; 0x4200
     3ac:	7270006b 	rsbsvc	r0, r0, #107	; 0x6b
     3b0:	5f737365 	svcpl	0x00737365
     3b4:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     3b8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     3bc:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
     3c0:	665f7469 	ldrbvs	r7, [pc], -r9, ror #8
     3c4:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
     3c8:	696e6100 	stmdbvs	lr!, {r8, sp, lr}^
     3cc:	6974616d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     3d0:	735f6e6f 	cmpvc	pc, #1776	; 0x6f0
     3d4:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     3d8:	696e6100 	stmdbvs	lr!, {r8, sp, lr}^
     3dc:	6974616d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     3e0:	635f6e6f 	cmpvs	pc, #1776	; 0x6f0
     3e4:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     3e8:	6d007265 	sfmvs	f7, 4, [r0, #-404]	; 0xfffffe6c
     3ec:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     3f0:	624f7265 	subvs	r7, pc, #1342177286	; 0x50000006
     3f4:	6973006a 	ldmdbvs	r3!, {r1, r3, r5, r6}^
     3f8:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
     3fc:	74006570 	strvc	r6, [r0], #-1392	; 0xfffffa90
     400:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     404:	6172675f 	cmnvs	r2, pc, asr r7
     408:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     40c:	68007374 	stmdavs	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
     410:	00726961 	rsbseq	r6, r2, r1, ror #18
     414:	6d61476e 	stclvs	7, cr4, [r1, #-440]!	; 0xfffffe48
     418:	6a624f65 	bvs	18941b4 <startup-0x1e76be4c>
     41c:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
     420:	65727000 	ldrbvs	r7, [r2, #-0]!
     424:	6c5f7373 	mrrcvs	3, 7, r7, pc, cr3	; <UNPREDICTABLE>
     428:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     42c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     430:	6f700073 	svcvs	0x00700073
     434:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     438:	70003472 	andvc	r3, r0, r2, ror r4
     43c:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     440:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     444:	6d690065 	stclvs	0, cr0, [r9, #-404]!	; 0xfffffe6c
     448:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     44c:	6f687300 	svcvs	0x00687300
     450:	745f7472 	ldrbvc	r7, [pc], #-1138	; 458 <startup-0x1ffffba8>
     454:	00747865 	rsbseq	r7, r4, r5, ror #16
     458:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
     45c:	5f746e65 	svcpl	0x00746e65
     460:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
     464:	69740065 	ldmdbvs	r4!, {r0, r2, r5, r6}^
     468:	4c656c74 	stclmi	12, cr6, [r5], #-464	; 0xfffffe30
     46c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     470:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     474:	65725070 	ldrbvs	r5, [r2, #-112]!	; 0xffffff90
     478:	72477373 	subvc	r7, r7, #-872415231	; 0xcc000001
     47c:	6d007961 	vstrvs.16	s14, [r0, #-194]	; 0xffffff3e	; <UNPREDICTABLE>
     480:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
     484:	6f507265 	svcvs	0x00507265
     488:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     48c:	6e690072 	mcrvs	0, 3, r0, cr9, cr2, {3}
     490:	70537469 	subsvc	r7, r3, r9, ror #8
     494:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     498:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     49c:	6143706d 	cmpvs	r3, sp, rrx
     4a0:	656c7473 	strbvs	r7, [ip, #-1139]!	; 0xfffffb8d
     4a4:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     4a8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     4ac:	74695470 	strbtvc	r5, [r9], #-1136	; 0xfffffb90
     4b0:	6c42656c 	cfstr64vs	mvdx6, [r2], {108}	; 0x6c
     4b4:	006b6361 	rsbeq	r6, fp, r1, ror #6
     4b8:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     4bc:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     4c0:	61686320 	cmnvs	r8, r0, lsr #6
     4c4:	72640072 	rsbvc	r0, r4, #114	; 0x72
     4c8:	625f7761 	subsvs	r7, pc, #25427968	; 0x1840000
     4cc:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     4d0:	6c625f72 	stclvs	15, cr5, [r2], #-456	; 0xfffffe38
     4d4:	5f6b6361 	svcpl	0x006b6361
     4d8:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     4dc:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     4e0:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     4e4:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     4e8:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     4ec:	00737469 	rsbseq	r7, r3, r9, ror #8
     4f0:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
     4f4:	625f656c 	subsvs	r6, pc, #108, 10	; 0x1b000000
     4f8:	6b63616c 	blvs	18d8ab0 <startup-0x1e727550>
     4fc:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     500:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
     504:	4f656c74 	svcmi	0x00656c74
     508:	43006a62 	movwmi	r6, #2658	; 0xa62
     50c:	6f6d2f3a 	svcvs	0x006d2f3a
     510:	2f632f70 	svccs	0x00632f70
     514:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     518:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     51c:	6f697461 	svcvs	0x00697461
     520:	2f72656e 	svccs	0x0072656e
     524:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     528:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     52c:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     530:	6174732f 	cmnvs	r4, pc, lsr #6
     534:	70757472 	rsbsvc	r7, r5, r2, ror r4
     538:	6700632e 	strvs	r6, [r0, -lr, lsr #6]
     53c:	4f656d61 	svcmi	0x00656d61
     540:	63656a62 	cmnvs	r5, #401408	; 0x62000
     544:	63007374 	movwvs	r7, #884	; 0x374
     548:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
     54c:	61724765 	cmnvs	r2, r5, ror #14
     550:	6f6d0079 	svcvs	0x006d0079
     554:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     558:	61724772 	cmnvs	r2, r2, ror r7
     55c:	69740079 	ldmdbvs	r4!, {r0, r3, r4, r5, r6}^
     560:	47656c74 			; <UNDEFINED> instruction: 0x47656c74
     564:	00796172 	rsbseq	r6, r9, r2, ror r1
     568:	5f504944 	svcpl	0x00504944
     56c:	6e727562 	cdpvs	5, 7, cr7, cr2, cr2, {3}
     570:	63006465 	movwvs	r6, #1125	; 0x465
     574:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
     578:	735f746e 	cmpvc	pc, #1845493760	; 0x6e000000
     57c:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
     580:	6964006e 	stmdbvs	r4!, {r1, r2, r3, r5, r6}^
     584:	6e617473 	mcrvs	4, 3, r7, cr1, cr3, {3}
     588:	705f6563 	subsvc	r6, pc, r3, ror #10
     58c:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
     590:	69665f72 	stmdbvs	r6!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     594:	74006572 	strvc	r6, [r0], #-1394	; 0xfffffa8e
     598:	50706d65 	rsbspl	r6, r0, r5, ror #26
     59c:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     5a0:	63616c42 	cmnvs	r1, #16896	; 0x4200
     5a4:	6762006b 	strbvs	r0, [r2, -fp, rrx]!
     5a8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     5ac:	6c620073 	stclvs	0, cr0, [r2], #-460	; 0xfffffe34
     5b0:	496b6361 	stmdbmi	fp!, {r0, r5, r6, r8, r9, sp, lr}^
     5b4:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     5b8:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     5bc:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     5c0:	6172675f 	cmnvs	r2, pc, asr r7
     5c4:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     5c8:	63007374 	movwvs	r7, #884	; 0x374
     5cc:	6c747361 	ldclvs	3, cr7, [r4], #-388	; 0xfffffe7c
     5d0:	616d4965 	cmnvs	sp, r5, ror #18
     5d4:	66006567 	strvs	r6, [r0], -r7, ror #10
     5d8:	74737269 	ldrbtvc	r7, [r3], #-617	; 0xfffffd97
     5dc:	74697400 	strbtvc	r7, [r9], #-1024	; 0xfffffc00
     5e0:	6d49656c 	cfstr64vs	mvdx6, [r9, #-432]	; 0xfffffe50
     5e4:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     5e8:	6e617200 	cdpvs	2, 6, cr7, cr1, cr0, {0}
     5ec:	5f6d6f64 	svcpl	0x006d6f64
     5f0:	64656573 	strbtvs	r6, [r5], #-1395	; 0xfffffa8d
     5f4:	72696600 	rsbvc	r6, r9, #0, 12
     5f8:	66003265 	strvs	r3, [r0], -r5, ror #4
     5fc:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     600:	72696600 	rsbvc	r6, r9, #0, 12
     604:	70003465 	andvc	r3, r0, r5, ror #8
     608:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     60c:	63616c42 	cmnvs	r1, #16896	; 0x4200
     610:	6f6d006b 	svcvs	0x006d006b
     614:	6574736e 	ldrbvs	r7, [r4, #-878]!	; 0xfffffc92
     618:	616d4972 	smcvs	54418	; 0xd492
     61c:	79006567 	stmdbvc	r0, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
     620:	00736f50 	rsbseq	r6, r3, r0, asr pc
     624:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
     628:	696c635f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
     62c:	765f626d 	ldrbvc	r6, [pc], -sp, ror #4
     630:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     634:	78657400 	stmdavc	r5!, {sl, ip, sp, lr}^
     638:	00323174 	eorseq	r3, r2, r4, ror r1
     63c:	706d6574 	rsbvc	r6, sp, r4, ror r5
     640:	6c746954 			; <UNDEFINED> instruction: 0x6c746954
     644:	67694c65 	strbvs	r4, [r9, -r5, ror #24]!
     648:	75007468 	strvc	r7, [r0, #-1128]	; 0xfffffb98
     64c:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
     650:	6f6e0065 	svcvs	0x006e0065
     654:	5049445f 	subpl	r4, r9, pc, asr r4
     658:	65727000 	ldrbvs	r7, [r2, #-0]!
     65c:	6d497373 	stclvs	3, cr7, [r9, #-460]	; 0xfffffe34
     660:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     664:	70786500 	rsbsvc	r6, r8, r0, lsl #10
     668:	69646f6c 	stmdbvs	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     66c:	7400676e 	strvc	r6, [r0], #-1902	; 0xfffff892
     670:	54706d65 	ldrbtpl	r6, [r0], #-3429	; 0xfffff29b
     674:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
     678:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     67c:	6c537400 	cfldrdvs	mvd7, [r3], {-0}
     680:	6554776f 	ldrbvs	r7, [r4, #-1903]	; 0xfffff891
     684:	75007478 	strvc	r7, [r0, #-1144]	; 0xfffffb88
     688:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     68c:	6600745f 			; <UNDEFINED> instruction: 0x6600745f
     690:	73657269 	cmnvc	r5, #-1879048186	; 0x90000006
     694:	63616200 	cmnvs	r1, #0, 4
     698:	6675426b 	ldrbtvs	r4, [r5], -fp, ror #4
     69c:	4c726566 	cfldr64mi	mvdx6, [r2], #-408	; 0xfffffe68
     6a0:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     6a4:	63616200 	cmnvs	r1, #0, 4
     6a8:	6675426b 	ldrbtvs	r4, [r5], -fp, ror #4
     6ac:	47726566 	ldrbmi	r6, [r2, -r6, ror #10]!
     6b0:	00796172 	rsbseq	r6, r9, r2, ror r1
     6b4:	706d6574 	rsbvc	r6, sp, r4, ror r5
     6b8:	73657250 	cmnvc	r5, #80, 4
     6bc:	67694c73 			; <UNDEFINED> instruction: 0x67694c73
     6c0:	74007468 	strvc	r7, [r0], #-1128	; 0xfffffb98
     6c4:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
     6c8:	656a624f 	strbvs	r6, [sl, #-591]!	; 0xfffffdb1
     6cc:	78007463 	stmdavc	r0, {r0, r1, r5, r6, sl, ip, sp, lr}
     6d0:	00736f50 	rsbseq	r6, r3, r0, asr pc
     6d4:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
     6d8:	6c42656c 	cfstr64vs	mvdx6, [r2], {108}	; 0x6c
     6dc:	006b6361 	rsbeq	r6, fp, r1, ror #6
     6e0:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
     6e4:	65766f5f 	ldrbvs	r6, [r6, #-3935]!	; 0xfffff0a1
     6e8:	64615f72 	strbtvs	r5, [r1], #-3954	; 0xfffff08e
     6ec:	00726564 	rsbseq	r6, r2, r4, ror #10
     6f0:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
     6f4:	74003031 	strvc	r3, [r0], #-49	; 0xffffffcf
     6f8:	31747865 	cmncc	r4, r5, ror #16
     6fc:	65680031 	strbvs	r0, [r8, #-49]!	; 0xffffffcf
     700:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     704:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     708:	7270006e 	rsbsvc	r0, r0, #110	; 0x6e
     70c:	4c737365 	ldclmi	3, cr7, [r3], #-404	; 0xfffffe6c
     710:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     714:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
     718:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
     71c:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     720:	67007365 	strvs	r7, [r0, -r5, ror #6]
     724:	4f656d61 	svcmi	0x00656d61
     728:	63656a62 	cmnvs	r5, #401408	; 0x62000
     72c:	64705574 	ldrbtvs	r5, [r0], #-1396	; 0xfffffa8c
     730:	00657461 	rsbeq	r7, r5, r1, ror #8
     734:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     738:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     73c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     740:	6f62616c 	svcvs	0x0062616c
     744:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     748:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     74c:	5049442f 	subpl	r4, r9, pc, lsr #8
     750:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     754:	2f686374 	svccs	0x00686374
     758:	61672f43 	cmnvs	r7, r3, asr #30
     75c:	626f656d 	rsbvs	r6, pc, #457179136	; 0x1b400000
     760:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     764:	7400632e 	strvc	r6, [r0], #-814	; 0xfffffcd2
     768:	00736968 	rsbseq	r6, r3, r8, ror #18
     76c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     770:	61724735 	cmnvs	r2, r5, lsr r7
     774:	69660079 	stmdbvs	r6!, {r0, r3, r4, r5, r6}^
     778:	47316572 			; <UNDEFINED> instruction: 0x47316572
     77c:	00796172 	rsbseq	r6, r9, r2, ror r1
     780:	706d6574 	rsbvc	r6, sp, r4, ror r5
     784:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     788:	61724732 	cmnvs	r2, r2, lsr r7
     78c:	69660079 	stmdbvs	r6!, {r0, r3, r4, r5, r6}^
     790:	47336572 			; <UNDEFINED> instruction: 0x47336572
     794:	00796172 	rsbseq	r6, r9, r2, ror r1
     798:	706d6574 	rsbvc	r6, sp, r4, ror r5
     79c:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     7a0:	61724734 	cmnvs	r2, r4, lsr r7
     7a4:	69660079 	stmdbvs	r6!, {r0, r3, r4, r5, r6}^
     7a8:	6c426572 	cfstr64vs	mvdx6, [r2], {114}	; 0x72
     7ac:	006b6361 	rsbeq	r6, fp, r1, ror #6
     7b0:	706d6574 	rsbvc	r6, sp, r4, ror r5
     7b4:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     7b8:	61724733 	cmnvs	r2, r3, lsr r7
     7bc:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     7c0:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     7c4:	6c426572 	cfstr64vs	mvdx6, [r2], {114}	; 0x72
     7c8:	006b6361 	rsbeq	r6, fp, r1, ror #6
     7cc:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     7d0:	67694c31 			; <UNDEFINED> instruction: 0x67694c31
     7d4:	66007468 	strvs	r7, [r0], -r8, ror #8
     7d8:	34657269 	strbtcc	r7, [r5], #-617	; 0xfffffd97
     7dc:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     7e0:	69660074 	stmdbvs	r6!, {r2, r4, r5, r6}^
     7e4:	5f326572 	svcpl	0x00326572
     7e8:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     7ec:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     7f0:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     7f4:	5f346572 	svcpl	0x00346572
     7f8:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     7fc:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     800:	66007374 			; <UNDEFINED> instruction: 0x66007374
     804:	33657269 	cmncc	r5, #-1879048186	; 0x90000006
     808:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     80c:	6f700074 	svcvs	0x00700074
     810:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     814:	70003172 	andvc	r3, r0, r2, ror r1
     818:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     81c:	00337265 	eorseq	r7, r3, r5, ror #4
     820:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     824:	72675f35 	rsbvc	r5, r7, #53, 30	; 0xd4
     828:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     82c:	00737469 	rsbseq	r7, r3, r9, ror #8
     830:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     834:	616d4933 	cmnvs	sp, r3, lsr r9
     838:	70006567 	andvc	r6, r0, r7, ror #10
     83c:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     840:	00307265 	eorseq	r7, r0, r5, ror #4
     844:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     848:	67694c35 			; <UNDEFINED> instruction: 0x67694c35
     84c:	70007468 	andvc	r7, r0, r8, ror #8
     850:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     854:	00327265 	eorseq	r7, r2, r5, ror #4
     858:	706d6574 	rsbvc	r6, sp, r4, ror r5
     85c:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     860:	61724735 	cmnvs	r2, r5, lsr r7
     864:	69660079 	stmdbvs	r6!, {r0, r3, r4, r5, r6}^
     868:	5f316572 	svcpl	0x00316572
     86c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     870:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     874:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     878:	4c326572 	cfldr32mi	mvfx6, [r2], #-456	; 0xfffffe38
     87c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     880:	72696600 	rsbvc	r6, r9, #0, 12
     884:	6c5f3165 	ldfvse	f3, [pc], {101}	; 0x65
     888:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     88c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     890:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     894:	5f326572 	svcpl	0x00326572
     898:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     89c:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     8a0:	66007374 			; <UNDEFINED> instruction: 0x66007374
     8a4:	4f657269 	svcmi	0x00657269
     8a8:	66006a62 	strvs	r6, [r0], -r2, ror #20
     8ac:	32657269 	rsbcc	r7, r5, #-1879048186	; 0x90000006
     8b0:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     8b4:	72696600 	rsbvc	r6, r9, #0, 12
     8b8:	675f3465 	ldrbvs	r3, [pc, -r5, ror #8]
     8bc:	5f796172 	svcpl	0x00796172
     8c0:	73746962 	cmnvc	r4, #1605632	; 0x188000
     8c4:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     8c8:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     8cc:	694c3365 	stmdbvs	ip, {r0, r2, r5, r6, r8, r9, ip, sp}^
     8d0:	00746867 	rsbseq	r6, r4, r7, ror #16
     8d4:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     8d8:	616d4934 	cmnvs	sp, r4, lsr r9
     8dc:	74006567 	strvc	r6, [r0], #-1383	; 0xfffffa99
     8e0:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
     8e4:	31657269 	cmncc	r5, r9, ror #4
     8e8:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     8ec:	69660074 	stmdbvs	r6!, {r2, r4, r5, r6}^
     8f0:	54747372 	ldrbtpl	r7, [r4], #-882	; 0xfffffc8e
     8f4:	00656d69 	rsbeq	r6, r5, r9, ror #26
     8f8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     8fc:	7269665f 	rsbvc	r6, r9, #99614720	; 0x5f00000
     900:	69660065 	stmdbvs	r6!, {r0, r2, r5, r6}^
     904:	5f356572 	svcpl	0x00356572
     908:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     90c:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     910:	66007374 			; <UNDEFINED> instruction: 0x66007374
     914:	49657269 	stmdbmi	r5!, {r0, r3, r5, r6, r9, ip, sp, lr}^
     918:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     91c:	69660073 	stmdbvs	r6!, {r0, r1, r4, r5, r6}^
     920:	49316572 	ldmdbmi	r1!, {r1, r4, r5, r6, r8, sl, sp, lr}
     924:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     928:	72696600 	rsbvc	r6, r9, #0, 12
     92c:	72473465 	subvc	r3, r7, #1694498816	; 0x65000000
     930:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     934:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
     938:	31657269 	cmncc	r5, r9, ror #4
     93c:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     940:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     944:	72694670 	rsbvc	r4, r9, #112, 12	; 0x7000000
     948:	694c3465 	stmdbvs	ip, {r0, r2, r5, r6, sl, ip, sp}^
     94c:	00746867 	rsbseq	r6, r4, r7, ror #16
     950:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     954:	696c5f33 	stmdbvs	ip!, {r0, r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     958:	5f746867 	svcpl	0x00746867
     95c:	73746962 	cmnvc	r4, #1605632	; 0x188000
     960:	72696600 	rsbvc	r6, r9, #0, 12
     964:	6d493565 	cfstr64vs	mvdx3, [r9, #-404]	; 0xfffffe6c
     968:	00656761 	rsbeq	r6, r5, r1, ror #14
     96c:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     970:	616c625f 	cmnvs	ip, pc, asr r2
     974:	325f6b63 	subscc	r6, pc, #101376	; 0x18c00
     978:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     97c:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     980:	6946706d 	stmdbvs	r6, {r0, r2, r3, r5, r6, ip, sp, lr}^
     984:	4c326572 	cfldr32mi	mvfx6, [r2], #-456	; 0xfffffe38
     988:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     98c:	72696600 	rsbvc	r6, r9, #0, 12
     990:	6d493265 	sfmvs	f3, 2, [r9, #-404]	; 0xfffffe6c
     994:	00656761 	rsbeq	r6, r5, r1, ror #14
     998:	706d6574 	rsbvc	r6, sp, r4, ror r5
     99c:	65726946 	ldrbvs	r6, [r2, #-2374]!	; 0xfffff6ba
     9a0:	67694c35 			; <UNDEFINED> instruction: 0x67694c35
     9a4:	43007468 	movwmi	r7, #1128	; 0x468
     9a8:	6f6d2f3a 	svcvs	0x006d2f3a
     9ac:	2f632f70 	svccs	0x00632f70
     9b0:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
     9b4:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
     9b8:	6f697461 	svcvs	0x00697461
     9bc:	2f72656e 	svccs	0x0072656e
     9c0:	73504944 	cmpvc	r0, #68, 18	; 0x110000
     9c4:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
     9c8:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
     9cc:	7269662f 	rsbvc	r6, r9, #49283072	; 0x2f00000
     9d0:	00632e65 	rsbeq	r2, r3, r5, ror #28
     9d4:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     9d8:	72675f33 	rsbvc	r5, r7, #51, 30	; 0xcc
     9dc:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     9e0:	00737469 	rsbseq	r7, r3, r9, ror #8
     9e4:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
     9e8:	68676952 	stmdavs	r7!, {r1, r4, r6, r8, fp, sp, lr}^
     9ec:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
     9f0:	6c006575 	cfstr32vs	mvfx6, [r0], {117}	; 0x75
     9f4:	4a747361 	bmi	1d1d780 <startup-0x1e2e2880>
     9f8:	56706d75 			; <UNDEFINED> instruction: 0x56706d75
     9fc:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     a00:	70537900 	subsvc	r7, r3, r0, lsl #18
     a04:	00646565 	rsbeq	r6, r4, r5, ror #10
     a08:	65705378 	ldrbvs	r5, [r0, #-888]!	; 0xfffffc88
     a0c:	6c006465 	cfstrsvs	mvf6, [r0], {101}	; 0x65
     a10:	4c747361 	ldclmi	3, cr7, [r4], #-388	; 0xfffffe7c
     a14:	56746665 	ldrbtpl	r6, [r4], -r5, ror #12
     a18:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     a1c:	2f3a4300 	svccs	0x003a4300
     a20:	2f706f6d 	svccs	0x00706f6d
     a24:	6f4d2f63 	svcvs	0x004d2f63
     a28:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     a2c:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     a30:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     a34:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     a38:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     a3c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     a40:	702f432f 	eorvc	r4, pc, pc, lsr #6
     a44:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
     a48:	00632e72 	rsbeq	r2, r3, r2, ror lr
     a4c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
     a50:	70557265 	subsvc	r7, r5, r5, ror #4
     a54:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
     a58:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     a5c:	72694270 	rsbvc	r4, r9, #112, 4
     a60:	694c3264 	stmdbvs	ip, {r2, r5, r6, r9, ip, sp}^
     a64:	00746867 	rsbseq	r6, r4, r7, ror #16
     a68:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     a6c:	696c5f33 	stmdbvs	ip!, {r0, r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     a70:	5f746867 	svcpl	0x00746867
     a74:	73746962 	cmnvc	r4, #1605632	; 0x188000
     a78:	72696200 	rsbvc	r6, r9, #0, 4
     a7c:	6d493464 	cfstrdvs	mvd3, [r9, #-400]	; 0xfffffe70
     a80:	00656761 	rsbeq	r6, r5, r1, ror #14
     a84:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     a88:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     a8c:	5f746867 	svcpl	0x00746867
     a90:	73746962 	cmnvc	r4, #1605632	; 0x188000
     a94:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     a98:	72694270 	rsbvc	r4, r9, #112, 4
     a9c:	694c3564 	stmdbvs	ip, {r2, r5, r6, r8, sl, ip, sp}^
     aa0:	00746867 	rsbseq	r6, r4, r7, ror #16
     aa4:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     aa8:	31726574 	cmncc	r2, r4, ror r5
     aac:	69620034 	stmdbvs	r2!, {r2, r4, r5}^
     ab0:	5f356472 	svcpl	0x00356472
     ab4:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     ab8:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     abc:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     ac0:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     ac4:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     ac8:	6f700074 	svcvs	0x00700074
     acc:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     ad0:	00393172 	eorseq	r3, r9, r2, ror r1
     ad4:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     ad8:	67694c31 			; <UNDEFINED> instruction: 0x67694c31
     adc:	62007468 	andvs	r7, r0, #104, 8	; 0x68000000
     ae0:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     ae4:	63616c42 	cmnvs	r1, #16896	; 0x4200
     ae8:	6962006b 	stmdbvs	r2!, {r0, r1, r3, r5, r6}^
     aec:	47316472 			; <UNDEFINED> instruction: 0x47316472
     af0:	00796172 	rsbseq	r6, r9, r2, ror r1
     af4:	706d6574 	rsbvc	r6, sp, r4, ror r5
     af8:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     afc:	616c4234 	cmnvs	ip, r4, lsr r2
     b00:	62006b63 	andvs	r6, r0, #101376	; 0x18c00
     b04:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     b08:	63616c42 	cmnvs	r1, #16896	; 0x4200
     b0c:	6f70006b 	svcvs	0x0070006b
     b10:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     b14:	00303272 	eorseq	r3, r0, r2, ror r2
     b18:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     b1c:	32726574 	rsbscc	r6, r2, #116, 10	; 0x1d000000
     b20:	69620031 	stmdbvs	r2!, {r0, r4, r5}^
     b24:	47346472 			; <UNDEFINED> instruction: 0x47346472
     b28:	00796172 	rsbseq	r6, r9, r2, ror r1
     b2c:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     b30:	616c4232 	cmnvs	ip, r2, lsr r2
     b34:	70006b63 	andvc	r6, r0, r3, ror #22
     b38:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     b3c:	34327265 	ldrtcc	r7, [r2], #-613	; 0xfffffd9b
     b40:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     b44:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     b48:	74003631 	strvc	r3, [r0], #-1585	; 0xfffff9cf
     b4c:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     b50:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     b54:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     b58:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     b5c:	72694270 	rsbvc	r4, r9, #112, 4
     b60:	72473464 	subvc	r3, r7, #100, 8	; 0x64000000
     b64:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     b68:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
     b6c:	4c647269 	sfmmi	f7, 2, [r4], #-420	; 0xfffffe5c
     b70:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     b74:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     b78:	72694270 	rsbvc	r4, r9, #112, 4
     b7c:	72473564 	subvc	r3, r7, #100, 10	; 0x19000000
     b80:	70007961 	andvc	r7, r0, r1, ror #18
     b84:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     b88:	33317265 	teqcc	r1, #1342177286	; 0x50000006
     b8c:	72696200 	rsbvc	r6, r9, #0, 4
     b90:	625f3264 	subsvs	r3, pc, #100, 4	; 0x40000006
     b94:	6b63616c 	blvs	18d914c <startup-0x1e726eb4>
     b98:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     b9c:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
     ba0:	5f316472 	svcpl	0x00316472
     ba4:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     ba8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     bac:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
     bb0:	49366472 	ldmdbmi	r6!, {r1, r4, r5, r6, sl, sp, lr}
     bb4:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     bb8:	72696200 	rsbvc	r6, r9, #0, 4
     bbc:	625f3364 	subsvs	r3, pc, #100, 6	; 0x90000001
     bc0:	6b63616c 	blvs	18d9178 <startup-0x1e726e88>
     bc4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     bc8:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
     bcc:	5f346472 	svcpl	0x00346472
     bd0:	63616c62 	cmnvs	r1, #25088	; 0x6200
     bd4:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     bd8:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     bdc:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     be0:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     be4:	69620065 	stmdbvs	r2!, {r0, r2, r5, r6}^
     be8:	5f316472 	svcpl	0x00316472
     bec:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     bf0:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     bf4:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     bf8:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     bfc:	616c625f 	cmnvs	ip, pc, asr r2
     c00:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
     c04:	00737469 	rsbseq	r7, r3, r9, ror #8
     c08:	706d6574 	rsbvc	r6, sp, r4, ror r5
     c0c:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     c10:	67694c33 			; <UNDEFINED> instruction: 0x67694c33
     c14:	62007468 	andvs	r7, r0, #104, 8	; 0x68000000
     c18:	35647269 	strbcc	r7, [r4, #-617]!	; 0xfffffd97
     c1c:	6172675f 	cmnvs	r2, pc, asr r7
     c20:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     c24:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     c28:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     c2c:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     c30:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     c34:	72694270 	rsbvc	r4, r9, #112, 4
     c38:	694c3464 	stmdbvs	ip, {r2, r5, r6, sl, ip, sp}^
     c3c:	00746867 	rsbseq	r6, r4, r7, ror #16
     c40:	706d6574 	rsbvc	r6, sp, r4, ror r5
     c44:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     c48:	61724733 	cmnvs	r2, r3, lsr r7
     c4c:	69620079 	stmdbvs	r2!, {r0, r3, r4, r5, r6}^
     c50:	5f346472 	svcpl	0x00346472
     c54:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
     c58:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     c5c:	6f700073 	svcvs	0x00700073
     c60:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     c64:	00333272 	eorseq	r3, r3, r2, ror r2
     c68:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     c6c:	67694c35 			; <UNDEFINED> instruction: 0x67694c35
     c70:	62007468 	andvs	r7, r0, #104, 8	; 0x68000000
     c74:	49647269 	stmdbmi	r4!, {r0, r3, r5, r6, r9, ip, sp, lr}^
     c78:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     c7c:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     c80:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     c84:	42356472 	eorsmi	r6, r5, #1912602624	; 0x72000000
     c88:	6b63616c 	blvs	18d9240 <startup-0x1e726dc0>
     c8c:	72696200 	rsbvc	r6, r9, #0, 4
     c90:	6c423464 	cfstrdvs	mvd3, [r2], {100}	; 0x64
     c94:	006b6361 	rsbeq	r6, fp, r1, ror #6
     c98:	706d6574 	rsbvc	r6, sp, r4, ror r5
     c9c:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     ca0:	616c4232 	cmnvs	ip, r2, lsr r2
     ca4:	62006b63 	andvs	r6, r0, #101376	; 0x18c00
     ca8:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     cac:	6172675f 	cmnvs	r2, pc, asr r7
     cb0:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     cb4:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
     cb8:	31647269 	cmncc	r4, r9, ror #4
     cbc:	63616c42 	cmnvs	r1, #16896	; 0x4200
     cc0:	6962006b 	stmdbvs	r2!, {r0, r1, r3, r5, r6}^
     cc4:	4c326472 	cfldrsmi	mvf6, [r2], #-456	; 0xfffffe38
     cc8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     ccc:	2f3a4300 	svccs	0x003a4300
     cd0:	2f706f6d 	svccs	0x00706f6d
     cd4:	6f4d2f63 	svcvs	0x004d2f63
     cd8:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
     cdc:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
     ce0:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
     ce4:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     ce8:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
     cec:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     cf0:	622f432f 	eorvs	r4, pc, #-1140850688	; 0xbc000000
     cf4:	2e647269 	cdpcs	2, 6, cr7, cr4, cr9, {3}
     cf8:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
     cfc:	625f7469 	subsvs	r7, pc, #1761607680	; 0x69000000
     d00:	00647269 	rsbeq	r7, r4, r9, ror #4
     d04:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     d08:	006a624f 	rsbeq	r6, sl, pc, asr #4
     d0c:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     d10:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
     d14:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
     d18:	00737469 	rsbseq	r7, r3, r9, ror #8
     d1c:	706d6574 	rsbvc	r6, sp, r4, ror r5
     d20:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     d24:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     d28:	72696200 	rsbvc	r6, r9, #0, 4
     d2c:	72473564 	subvc	r3, r7, #100, 10	; 0x19000000
     d30:	62007961 	andvs	r7, r0, #1589248	; 0x184000
     d34:	31647269 	cmncc	r4, r9, ror #4
     d38:	616c625f 	cmnvs	ip, pc, asr r2
     d3c:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
     d40:	00737469 	rsbseq	r7, r3, r9, ror #8
     d44:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     d48:	616d4931 	cmnvs	sp, r1, lsr r9
     d4c:	62006567 	andvs	r6, r0, #432013312	; 0x19c00000
     d50:	33647269 	cmncc	r4, #-1879048186	; 0x90000006
     d54:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     d58:	6e696600 	cdpvs	6, 6, cr6, cr9, cr0, {0}
     d5c:	6f506c61 	svcvs	0x00506c61
     d60:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     d64:	65740072 	ldrbvs	r0, [r4, #-114]!	; 0xffffff8e
     d68:	6942706d 	stmdbvs	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
     d6c:	6c426472 	cfstrdvs	mvd6, [r2], {114}	; 0x72
     d70:	006b6361 	rsbeq	r6, fp, r1, ror #6
     d74:	706d6574 	rsbvc	r6, sp, r4, ror r5
     d78:	64726942 	ldrbtvs	r6, [r2], #-2370	; 0xfffff6be
     d7c:	616c4233 	cmnvs	ip, r3, lsr r2
     d80:	70006b63 	andvc	r6, r0, r3, ror #22
     d84:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     d88:	31317265 	teqcc	r1, r5, ror #4
     d8c:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     d90:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     d94:	62003231 	andvs	r3, r0, #268435459	; 0x10000003
     d98:	34647269 	strbtcc	r7, [r4], #-617	; 0xfffffd97
     d9c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     da0:	69620074 	stmdbvs	r2!, {r2, r4, r5, r6}^
     da4:	49356472 	ldmdbmi	r5!, {r1, r4, r5, r6, sl, sp, lr}
     da8:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     dac:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     db0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     db4:	70003531 	andvc	r3, r0, r1, lsr r5
     db8:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     dbc:	37317265 	ldrcc	r7, [r1, -r5, ror #4]!
     dc0:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     dc4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     dc8:	62003831 	andvs	r3, r0, #3211264	; 0x310000
     dcc:	32647269 	rsbcc	r7, r4, #-1879048186	; 0x90000006
     dd0:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     dd4:	6f700065 	svcvs	0x00700065
     dd8:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     ddc:	00323272 	eorseq	r3, r2, r2, ror r2
     de0:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
     de4:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     de8:	5f746867 	svcpl	0x00746867
     dec:	73746962 	cmnvc	r4, #1605632	; 0x188000
     df0:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     df4:	42326863 	eorsmi	r6, r2, #6488064	; 0x630000
     df8:	6b63616c 	blvs	18d93b0 <startup-0x1e726c50>
     dfc:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     e00:	47316863 	ldrmi	r6, [r1, -r3, ror #16]!
     e04:	00796172 	rsbseq	r6, r9, r2, ror r1
     e08:	706d6574 	rsbvc	r6, sp, r4, ror r5
     e0c:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     e10:	67694c68 	strbvs	r4, [r9, -r8, ror #24]!
     e14:	77007468 	strvc	r7, [r0, -r8, ror #8]
     e18:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     e1c:	006a624f 	rsbeq	r6, sl, pc, asr #4
     e20:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     e24:	625f3168 	subsvs	r3, pc, #104, 2
     e28:	6b63616c 	blvs	18d93e0 <startup-0x1e726c20>
     e2c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
     e30:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     e34:	6957706d 	ldmdbvs	r7, {r0, r2, r3, r5, r6, ip, sp, lr}^
     e38:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     e3c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     e40:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
     e44:	6957706d 	ldmdbvs	r7, {r0, r2, r3, r5, r6, ip, sp, lr}^
     e48:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     e4c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     e50:	69770074 	ldmdbvs	r7!, {r2, r4, r5, r6}^
     e54:	31686374 	smccc	34356	; 0x8634
     e58:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
     e5c:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
     e60:	6957706d 	ldmdbvs	r7, {r0, r2, r3, r5, r6, ip, sp, lr}^
     e64:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     e68:	63616c42 	cmnvs	r1, #16896	; 0x4200
     e6c:	6977006b 	ldmdbvs	r7!, {r0, r1, r3, r5, r6}^
     e70:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     e74:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     e78:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     e7c:	00737469 	rsbseq	r7, r3, r9, ror #8
     e80:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     e84:	6d493368 	stclvs	3, cr3, [r9, #-416]	; 0xfffffe60
     e88:	00656761 	rsbeq	r6, r5, r1, ror #14
     e8c:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     e90:	6c423368 	mcrrvs	3, 6, r3, r2, cr8
     e94:	006b6361 	rsbeq	r6, fp, r1, ror #6
     e98:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     e9c:	675f3368 	ldrbvs	r3, [pc, -r8, ror #6]
     ea0:	5f796172 	svcpl	0x00796172
     ea4:	73746962 	cmnvc	r4, #1605632	; 0x188000
     ea8:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     eac:	69775f74 	ldmdbvs	r7!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     eb0:	00686374 	rsbeq	r6, r8, r4, ror r3
     eb4:	706d6574 	rsbvc	r6, sp, r4, ror r5
     eb8:	63746957 	cmnvs	r4, #1425408	; 0x15c000
     ebc:	616c4268 	cmnvs	ip, r8, ror #4
     ec0:	77006b63 	strvc	r6, [r0, -r3, ror #22]
     ec4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     ec8:	6c625f32 	stclvs	15, cr5, [r2], #-200	; 0xffffff38
     ecc:	5f6b6361 	svcpl	0x006b6361
     ed0:	73746962 	cmnvc	r4, #1605632	; 0x188000
     ed4:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     ed8:	5f336863 	svcpl	0x00336863
     edc:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     ee0:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     ee4:	77007374 	smlsdxvc	r0, r4, r3, r7
     ee8:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     eec:	61724733 	cmnvs	r2, r3, lsr r7
     ef0:	69770079 	ldmdbvs	r7!, {r0, r3, r4, r5, r6}^
     ef4:	32686374 	rsbcc	r6, r8, #116, 6	; 0xd0000001
     ef8:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
     efc:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     f00:	74695770 	strbtvc	r5, [r9], #-1904	; 0xfffff890
     f04:	72476863 	subvc	r6, r7, #6488064	; 0x630000
     f08:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
     f0c:	57706d65 	ldrbpl	r6, [r0, -r5, ror #26]!
     f10:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     f14:	61724732 	cmnvs	r2, r2, lsr r7
     f18:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
     f1c:	6957706d 	ldmdbvs	r7, {r0, r2, r3, r5, r6, ip, sp, lr}^
     f20:	33686374 	cmncc	r8, #116, 6	; 0xd0000001
     f24:	63616c42 	cmnvs	r1, #16896	; 0x4200
     f28:	6977006b 	ldmdbvs	r7!, {r0, r1, r3, r5, r6}^
     f2c:	31686374 	smccc	34356	; 0x8634
     f30:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
     f34:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
     f38:	00737469 	rsbseq	r7, r3, r9, ror #8
     f3c:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     f40:	675f3268 	ldrbvs	r3, [pc, -r8, ror #4]
     f44:	5f796172 	svcpl	0x00796172
     f48:	73746962 	cmnvc	r4, #1605632	; 0x188000
     f4c:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     f50:	49346863 	ldmdbmi	r4!, {r0, r1, r5, r6, fp, sp, lr}
     f54:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     f58:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     f5c:	4c326863 	ldcmi	8, cr6, [r2], #-396	; 0xfffffe74
     f60:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     f64:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     f68:	49316863 	ldmdbmi	r1!, {r0, r1, r5, r6, fp, sp, lr}
     f6c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
     f70:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     f74:	42316863 	eorsmi	r6, r1, #6488064	; 0x630000
     f78:	6b63616c 	blvs	18d9530 <startup-0x1e726ad0>
     f7c:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     f80:	4c336863 	ldcmi	8, cr6, [r3], #-396	; 0xfffffe74
     f84:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     f88:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     f8c:	6d496863 	stclvs	8, cr6, [r9, #-396]	; 0xfffffe74
     f90:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     f94:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     f98:	74695770 	strbtvc	r5, [r9], #-1904	; 0xfffff890
     f9c:	47336863 	ldrmi	r6, [r3, -r3, ror #16]!
     fa0:	00796172 	rsbseq	r6, r9, r2, ror r1
     fa4:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
     fa8:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
     fac:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
     fb0:	6f62616c 	svcvs	0x0062616c
     fb4:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     fb8:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
     fbc:	5049442f 	subpl	r4, r9, pc, lsr #8
     fc0:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     fc4:	2f686374 	svccs	0x00686374
     fc8:	69772f43 	ldmdbvs	r7!, {r0, r1, r6, r8, r9, sl, fp, sp}^
     fcc:	2e686374 	mcrcs	3, 3, r6, cr8, cr4, {3}
     fd0:	69770063 	ldmdbvs	r7!, {r0, r1, r5, r6}^
     fd4:	31686374 	smccc	34356	; 0x8634
     fd8:	6172675f 	cmnvs	r2, pc, asr r7
     fdc:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     fe0:	77007374 	smlsdxvc	r0, r4, r3, r7
     fe4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     fe8:	6c625f33 	stclvs	15, cr5, [r2], #-204	; 0xffffff34
     fec:	5f6b6361 	svcpl	0x006b6361
     ff0:	73746962 	cmnvc	r4, #1605632	; 0x188000
     ff4:	74697700 	strbtvc	r7, [r9], #-1792	; 0xfffff900
     ff8:	49326863 	ldmdbmi	r2!, {r0, r1, r5, r6, fp, sp, lr}
     ffc:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1000:	72696400 	rsbvc	r6, r9, #0, 8
    1004:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    1008:	44006e6f 	strmi	r6, [r0], #-3695	; 0xfffff191
    100c:	49345049 	ldmdbmi	r4!, {r0, r3, r6, ip, lr}
    1010:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1014:	50494400 	subpl	r4, r9, r0, lsl #8
    1018:	616d4931 	cmnvs	sp, r1, lsr r9
    101c:	74006567 	strvc	r6, [r0], #-1383	; 0xfffffa99
    1020:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
    1024:	4c325049 	ldcmi	0, cr5, [r2], #-292	; 0xfffffedc
    1028:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    102c:	52736900 	rsbspl	r6, r3, #0, 18
    1030:	696e6e75 	stmdbvs	lr!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
    1034:	7400676e 	strvc	r6, [r0], #-1902	; 0xfffff892
    1038:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
    103c:	42335049 	eorsmi	r5, r3, #73	; 0x49
    1040:	6b63616c 	blvs	18d95f8 <startup-0x1e726a08>
    1044:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1048:	50494470 	subpl	r4, r9, r0, ror r4
    104c:	61724732 	cmnvs	r2, r2, lsr r7
    1050:	49440079 	stmdbmi	r4, {r0, r3, r4, r5, r6}^
    1054:	72473150 	subvc	r3, r7, #80, 2
    1058:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
    105c:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
    1060:	694c5049 	stmdbvs	ip, {r0, r3, r6, ip, lr}^
    1064:	00746867 	rsbseq	r6, r4, r7, ror #16
    1068:	49504944 	ldmdbmi	r0, {r2, r6, r8, fp, lr}^
    106c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1070:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
    1074:	445f7469 	ldrbmi	r7, [pc], #-1129	; 107c <startup-0x1fffef84>
    1078:	74005049 	strvc	r5, [r0], #-73	; 0xffffffb7
    107c:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
    1080:	72475049 	subvc	r5, r7, #73	; 0x49
    1084:	44007961 	strmi	r7, [r0], #-2401	; 0xfffff69f
    1088:	42315049 	eorsmi	r5, r1, #73	; 0x49
    108c:	6b63616c 	blvs	18d9644 <startup-0x1e7269bc>
    1090:	616c7000 	cmnvs	ip, r0
    1094:	50726579 	rsbspl	r6, r2, r9, ror r5
    1098:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
    109c:	596e6f69 	stmdbpl	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    10a0:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    10a4:	50494470 	subpl	r4, r9, r0, ror r4
    10a8:	61724733 	cmnvs	r2, r3, lsr r7
    10ac:	49440079 	stmdbmi	r4, {r0, r3, r4, r5, r6}^
    10b0:	6d493350 	stclvs	3, cr3, [r9, #-320]	; 0xfffffec0
    10b4:	00656761 	rsbeq	r6, r5, r1, ror #14
    10b8:	706d6574 	rsbvc	r6, sp, r4, ror r5
    10bc:	33504944 	cmpcc	r0, #68, 18	; 0x110000
    10c0:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    10c4:	49440074 	stmdbmi	r4, {r2, r4, r5, r6}^
    10c8:	64705550 	ldrbtvs	r5, [r0], #-1360	; 0xfffffab0
    10cc:	00657461 	rsbeq	r7, r5, r1, ror #8
    10d0:	706d6574 	rsbvc	r6, sp, r4, ror r5
    10d4:	32504944 	subscc	r4, r0, #68, 18	; 0x110000
    10d8:	63616c42 	cmnvs	r1, #16896	; 0x4200
    10dc:	4944006b 	stmdbmi	r4, {r0, r1, r3, r5, r6}^
    10e0:	6d493250 	sfmvs	f3, 2, [r9, #-320]	; 0xfffffec0
    10e4:	00656761 	rsbeq	r6, r5, r1, ror #14
    10e8:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    10ec:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    10f0:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    10f4:	6f62616c 	svcvs	0x0062616c
    10f8:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    10fc:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    1100:	5049442f 	subpl	r4, r9, pc, lsr #8
    1104:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    1108:	2f686374 	svccs	0x00686374
    110c:	49442f43 	stmdbmi	r4, {r0, r1, r6, r8, r9, sl, fp, sp}^
    1110:	00632e50 	rsbeq	r2, r3, r0, asr lr
    1114:	31504944 	cmpcc	r0, r4, asr #18
    1118:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    111c:	49440074 	stmdbmi	r4, {r2, r4, r5, r6}^
    1120:	6a624f50 	bvs	1894e68 <startup-0x1e76b198>
    1124:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1128:	50494470 	subpl	r4, r9, r0, ror r4
    112c:	63616c42 	cmnvs	r1, #16896	; 0x4200
    1130:	6c70006b 	ldclvs	0, cr0, [r0], #-428	; 0xfffffe54
    1134:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
    1138:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
    113c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1140:	65730058 	ldrbvs	r0, [r3, #-88]!	; 0xffffffa8
    1144:	616c5074 	smcvs	50436	; 0xc504
    1148:	50726579 	rsbspl	r6, r2, r9, ror r5
    114c:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
    1150:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1154:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    1158:	675f3165 	ldrbvs	r3, [pc, -r5, ror #2]
    115c:	5f796172 	svcpl	0x00796172
    1160:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1164:	616c6600 	cmnvs	ip, r0, lsl #12
    1168:	4231656d 	eorsmi	r6, r1, #457179136	; 0x1b400000
    116c:	6b63616c 	blvs	18d9724 <startup-0x1e7268dc>
    1170:	616c6600 	cmnvs	ip, r0, lsl #12
    1174:	5f32656d 	svcpl	0x0032656d
    1178:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
    117c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1180:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    1184:	6c46706d 	mcrrvs	0, 6, r7, r6, cr13
    1188:	4c656d61 	stclmi	13, cr6, [r5], #-388	; 0xfffffe7c
    118c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1190:	616c6600 	cmnvs	ip, r0, lsl #12
    1194:	5f32656d 	svcpl	0x0032656d
    1198:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    119c:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    11a0:	66007374 			; <UNDEFINED> instruction: 0x66007374
    11a4:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    11a8:	67694c33 			; <UNDEFINED> instruction: 0x67694c33
    11ac:	66007468 	strvs	r7, [r0], -r8, ror #8
    11b0:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    11b4:	616c4232 	cmnvs	ip, r2, lsr r2
    11b8:	74006b63 	strvc	r6, [r0], #-2915	; 0xfffff49d
    11bc:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
    11c0:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    11c4:	616c4232 	cmnvs	ip, r2, lsr r2
    11c8:	74006b63 	strvc	r6, [r0], #-2915	; 0xfffff49d
    11cc:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
    11d0:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    11d4:	67694c32 			; <UNDEFINED> instruction: 0x67694c32
    11d8:	66007468 	strvs	r7, [r0], -r8, ror #8
    11dc:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    11e0:	696c5f33 	stmdbvs	ip!, {r0, r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    11e4:	5f746867 	svcpl	0x00746867
    11e8:	73746962 	cmnvc	r4, #1605632	; 0x188000
    11ec:	616c6600 	cmnvs	ip, r0, lsl #12
    11f0:	624f656d 	subvs	r6, pc, #457179136	; 0x1b400000
    11f4:	6574006a 	ldrbvs	r0, [r4, #-106]!	; 0xffffff96
    11f8:	6c46706d 	mcrrvs	0, 6, r7, r6, cr13
    11fc:	32656d61 	rsbcc	r6, r5, #6208	; 0x1840
    1200:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    1204:	616c6600 	cmnvs	ip, r0, lsl #12
    1208:	4934656d 	ldmdbmi	r4!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
    120c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1210:	616c6600 	cmnvs	ip, r0, lsl #12
    1214:	5f31656d 	svcpl	0x0031656d
    1218:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    121c:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1220:	66007374 			; <UNDEFINED> instruction: 0x66007374
    1224:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    1228:	616d4931 	cmnvs	sp, r1, lsr r9
    122c:	66006567 	strvs	r6, [r0], -r7, ror #10
    1230:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    1234:	616c4233 	cmnvs	ip, r3, lsr r2
    1238:	74006b63 	strvc	r6, [r0], #-2915	; 0xfffff49d
    123c:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
    1240:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    1244:	67694c33 			; <UNDEFINED> instruction: 0x67694c33
    1248:	66007468 	strvs	r7, [r0], -r8, ror #8
    124c:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    1250:	61724733 	cmnvs	r2, r3, lsr r7
    1254:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
    1258:	6c46706d 	mcrrvs	0, 6, r7, r6, cr13
    125c:	34656d61 	strbtcc	r6, [r5], #-3425	; 0xfffff29f
    1260:	63616c42 	cmnvs	r1, #16896	; 0x4200
    1264:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
    1268:	6c46706d 	mcrrvs	0, 6, r7, r6, cr13
    126c:	34656d61 	strbtcc	r6, [r5], #-3425	; 0xfffff29f
    1270:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    1274:	6c660074 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30
    1278:	33656d61 	cmncc	r5, #6208	; 0x1840
    127c:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    1280:	6c660065 	stclvs	0, cr0, [r6], #-404	; 0xfffffe6c
    1284:	33656d61 	cmncc	r5, #6208	; 0x1840
    1288:	616c625f 	cmnvs	ip, pc, asr r2
    128c:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
    1290:	00737469 	rsbseq	r7, r3, r9, ror #8
    1294:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    1298:	6c5f3465 	cfldrdvs	mvd3, [pc], {101}	; 0x65
    129c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    12a0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    12a4:	6c660073 	stclvs	0, cr0, [r6], #-460	; 0xfffffe34
    12a8:	33656d61 	cmncc	r5, #6208	; 0x1840
    12ac:	6172675f 	cmnvs	r2, pc, asr r7
    12b0:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    12b4:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
    12b8:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
    12bc:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    12c0:	61724734 	cmnvs	r2, r4, lsr r7
    12c4:	6c660079 	stclvs	0, cr0, [r6], #-484	; 0xfffffe1c
    12c8:	32656d61 	rsbcc	r6, r5, #6208	; 0x1840
    12cc:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    12d0:	6c660065 	stclvs	0, cr0, [r6], #-404	; 0xfffffe6c
    12d4:	31656d61 	cmncc	r5, r1, ror #26
    12d8:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    12dc:	616c6600 	cmnvs	ip, r0, lsl #12
    12e0:	5f32656d 	svcpl	0x0032656d
    12e4:	63616c62 	cmnvs	r1, #25088	; 0x6200
    12e8:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    12ec:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
    12f0:	46706d65 	ldrbtmi	r6, [r0], -r5, ror #26
    12f4:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    12f8:	63616c42 	cmnvs	r1, #16896	; 0x4200
    12fc:	6c66006b 	stclvs	0, cr0, [r6], #-428	; 0xfffffe54
    1300:	34656d61 	strbtcc	r6, [r5], #-3425	; 0xfffff29f
    1304:	616c625f 	cmnvs	ip, pc, asr r2
    1308:	625f6b63 	subsvs	r6, pc, #101376	; 0x18c00
    130c:	00737469 	rsbseq	r7, r3, r9, ror #8
    1310:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    1314:	72473465 	subvc	r3, r7, #1694498816	; 0x65000000
    1318:	66007961 	strvs	r7, [r0], -r1, ror #18
    131c:	656d616c 	strbvs	r6, [sp, #-364]!	; 0xfffffe94
    1320:	6c625f31 	stclvs	15, cr5, [r2], #-196	; 0xffffff3c
    1324:	5f6b6361 	svcpl	0x006b6361
    1328:	73746962 	cmnvc	r4, #1605632	; 0x188000
    132c:	616c6600 	cmnvs	ip, r0, lsl #12
    1330:	4c31656d 	cfldr32mi	mvfx6, [r1], #-436	; 0xfffffe4c
    1334:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1338:	616c6600 	cmnvs	ip, r0, lsl #12
    133c:	5f34656d 	svcpl	0x0034656d
    1340:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
    1344:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1348:	6c660073 	stclvs	0, cr0, [r6], #-460	; 0xfffffe34
    134c:	34656d61 	strbtcc	r6, [r5], #-3425	; 0xfffff29f
    1350:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    1354:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
    1358:	6c46706d 	mcrrvs	0, 6, r7, r6, cr13
    135c:	33656d61 	cmncc	r5, #6208	; 0x1840
    1360:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    1364:	616c6600 	cmnvs	ip, r0, lsl #12
    1368:	6d49656d 	cfstr64vs	mvdx6, [r9, #-436]	; 0xfffffe4c
    136c:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    1370:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1374:	616c4670 	smcvs	50272	; 0xc460
    1378:	4233656d 	eorsmi	r6, r3, #457179136	; 0x1b400000
    137c:	6b63616c 	blvs	18d9934 <startup-0x1e7266cc>
    1380:	616c6600 	cmnvs	ip, r0, lsl #12
    1384:	4732656d 	ldrmi	r6, [r2, -sp, ror #10]!
    1388:	00796172 	rsbseq	r6, r9, r2, ror r1
    138c:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    1390:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    1394:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    1398:	6f62616c 	svcvs	0x0062616c
    139c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    13a0:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    13a4:	5049442f 	subpl	r4, r9, pc, lsr #8
    13a8:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    13ac:	2f686374 	svccs	0x00686374
    13b0:	6c662f43 	stclvs	15, cr2, [r6], #-268	; 0xfffffef4
    13b4:	2e656d61 	cdpcs	13, 6, cr6, cr5, cr1, {3}
    13b8:	65740063 	ldrbvs	r0, [r4, #-99]!	; 0xffffff9d
    13bc:	6c46706d 	mcrrvs	0, 6, r7, r6, cr13
    13c0:	47656d61 	strbmi	r6, [r5, -r1, ror #26]!
    13c4:	00796172 	rsbseq	r6, r9, r2, ror r1
    13c8:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    13cc:	6c423465 	cfstrdvs	mvd3, [r2], {101}	; 0x65
    13d0:	006b6361 	rsbeq	r6, fp, r1, ror #6
    13d4:	6d616c66 	stclvs	12, cr6, [r1, #-408]!	; 0xfffffe68
    13d8:	694c3265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp}^
    13dc:	00746867 	rsbseq	r6, r4, r7, ror #16
    13e0:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 1260 <startup-0x1fffeda0>
    13e4:	616d4938 	cmnvs	sp, r8, lsr r9
    13e8:	62006567 	andvs	r6, r0, #432013312	; 0x19c00000
    13ec:	316d6f6f 	cmncc	sp, pc, ror #30
    13f0:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    13f4:	6f620065 	svcvs	0x00620065
    13f8:	49396d6f 	ldmdbmi	r9!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    13fc:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1400:	6f6f6200 	svcvs	0x006f6200
    1404:	6d49356d 	cfstr64vs	mvdx3, [r9, #-436]	; 0xfffffe4c
    1408:	00656761 	rsbeq	r6, r5, r1, ror #14
    140c:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1410:	6d6f6f42 	stclvs	15, cr6, [pc, #-264]!	; 1310 <startup-0x1fffecf0>
    1414:	61724736 	cmnvs	r2, r6, lsr r7
    1418:	6f620079 	svcvs	0x00620079
    141c:	5f316d6f 	svcpl	0x00316d6f
    1420:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
    1424:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1428:	6f620073 	svcvs	0x00620073
    142c:	624f6d6f 	subvs	r6, pc, #7104	; 0x1bc0
    1430:	3a43006a 	bcc	10c15e0 <startup-0x1ef3ea20>
    1434:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
    1438:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 1384 <startup-0x1fffec7c>
    143c:	616c706f 	cmnvs	ip, pc, rrx
    1440:	61726f62 	cmnvs	r2, r2, ror #30
    1444:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1448:	442f7265 	strtmi	r7, [pc], #-613	; 1450 <startup-0x1fffebb0>
    144c:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
    1450:	63746957 	cmnvs	r4, #1425408	; 0x15c000
    1454:	2f432f68 	svccs	0x00432f68
    1458:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 12d8 <startup-0x1fffed28>
    145c:	7400632e 	strvc	r6, [r0], #-814	; 0xfffffcd2
    1460:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
    1464:	356d6f6f 	strbcc	r6, [sp, #-3951]!	; 0xfffff091
    1468:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    146c:	6f6f6200 	svcvs	0x006f6200
    1470:	7247316d 	subvc	r3, r7, #1073741851	; 0x4000001b
    1474:	70007961 	andvc	r7, r0, r1, ror #18
    1478:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
    147c:	37327265 	ldrcc	r7, [r2, -r5, ror #4]!
    1480:	6f6f6200 	svcvs	0x006f6200
    1484:	6d49366d 	stclvs	6, cr3, [r9, #-436]	; 0xfffffe4c
    1488:	00656761 	rsbeq	r6, r5, r1, ror #14
    148c:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 130c <startup-0x1fffecf4>
    1490:	6c625f34 	stclvs	15, cr5, [r2], #-208	; 0xffffff30
    1494:	5f6b6361 	svcpl	0x006b6361
    1498:	73746962 	cmnvc	r4, #1605632	; 0x188000
    149c:	6f6f6200 	svcvs	0x006f6200
    14a0:	675f356d 	ldrbvs	r3, [pc, -sp, ror #10]
    14a4:	5f796172 	svcpl	0x00796172
    14a8:	73746962 	cmnvc	r4, #1605632	; 0x188000
    14ac:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    14b0:	6f6f4270 	svcvs	0x006f4270
    14b4:	694c366d 	stmdbvs	ip, {r0, r2, r3, r5, r6, r9, sl, ip, sp}^
    14b8:	00746867 	rsbseq	r6, r4, r7, ror #16
    14bc:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 133c <startup-0x1fffecc4>
    14c0:	616c4233 	cmnvs	ip, r3, lsr r2
    14c4:	74006b63 	strvc	r6, [r0], #-2915	; 0xfffff49d
    14c8:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
    14cc:	336d6f6f 	cmncc	sp, #444	; 0x1bc
    14d0:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    14d4:	6f620074 	svcvs	0x00620074
    14d8:	4c346d6f 	ldcmi	13, cr6, [r4], #-444	; 0xfffffe44
    14dc:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    14e0:	6f6f6200 	svcvs	0x006f6200
    14e4:	4932316d 	ldmdbmi	r2!, {r0, r2, r3, r5, r6, r8, ip, sp}
    14e8:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    14ec:	6f6f6200 	svcvs	0x006f6200
    14f0:	4935316d 	ldmdbmi	r5!, {r0, r2, r3, r5, r6, r8, ip, sp}
    14f4:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    14f8:	6f6f6200 	svcvs	0x006f6200
    14fc:	694c316d 	stmdbvs	ip, {r0, r2, r3, r5, r6, r8, ip, sp}^
    1500:	00746867 	rsbseq	r6, r4, r7, ror #16
    1504:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 1384 <startup-0x1fffec7c>
    1508:	6c625f31 	stclvs	15, cr5, [r2], #-196	; 0xffffff3c
    150c:	5f6b6361 	svcpl	0x006b6361
    1510:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1514:	6f6f6200 	svcvs	0x006f6200
    1518:	6d49336d 	stclvs	3, cr3, [r9, #-436]	; 0xfffffe4c
    151c:	00656761 	rsbeq	r6, r5, r1, ror #14
    1520:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1524:	6d6f6f42 	stclvs	15, cr6, [pc, #-264]!	; 1424 <startup-0x1fffebdc>
    1528:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    152c:	6f6f6200 	svcvs	0x006f6200
    1530:	675f346d 	ldrbvs	r3, [pc, -sp, ror #8]
    1534:	5f796172 	svcpl	0x00796172
    1538:	73746962 	cmnvc	r4, #1605632	; 0x188000
    153c:	6f6f6200 	svcvs	0x006f6200
    1540:	625f326d 	subsvs	r3, pc, #-805306362	; 0xd0000006
    1544:	6b63616c 	blvs	18d9afc <startup-0x1e726504>
    1548:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    154c:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    1550:	6f42706d 	svcvs	0x0042706d
    1554:	6c426d6f 	mcrrvs	13, 6, r6, r2, cr15
    1558:	006b6361 	rsbeq	r6, fp, r1, ror #6
    155c:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 13dc <startup-0x1fffec24>
    1560:	616c4235 	cmnvs	ip, r5, lsr r2
    1564:	74006b63 	strvc	r6, [r0], #-2915	; 0xfffff49d
    1568:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
    156c:	326d6f6f 	rsbcc	r6, sp, #444	; 0x1bc
    1570:	63616c42 	cmnvs	r1, #16896	; 0x4200
    1574:	6f62006b 	svcvs	0x0062006b
    1578:	42326d6f 	eorsmi	r6, r2, #7104	; 0x1bc0
    157c:	6b63616c 	blvs	18d9b34 <startup-0x1e7264cc>
    1580:	6f6f6200 	svcvs	0x006f6200
    1584:	694c366d 	stmdbvs	ip, {r0, r2, r3, r5, r6, r9, sl, ip, sp}^
    1588:	00746867 	rsbseq	r6, r4, r7, ror #16
    158c:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1590:	6d6f6f42 	stclvs	15, cr6, [pc, #-264]!	; 1490 <startup-0x1fffeb70>
    1594:	61724734 	cmnvs	r2, r4, lsr r7
    1598:	6f620079 	svcvs	0x00620079
    159c:	5f336d6f 	svcpl	0x00336d6f
    15a0:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
    15a4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    15a8:	6f620073 	svcvs	0x00620073
    15ac:	5f336d6f 	svcpl	0x00336d6f
    15b0:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    15b4:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    15b8:	70007374 	andvc	r7, r0, r4, ror r3
    15bc:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
    15c0:	35327265 	ldrcc	r7, [r2, #-613]!	; 0xfffffd9b
    15c4:	6f6f6200 	svcvs	0x006f6200
    15c8:	694c336d 	stmdbvs	ip, {r0, r2, r3, r5, r6, r8, r9, ip, sp}^
    15cc:	00746867 	rsbseq	r6, r4, r7, ror #16
    15d0:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 1450 <startup-0x1fffebb0>
    15d4:	72675f36 	rsbvc	r5, r7, #54, 30	; 0xd8
    15d8:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
    15dc:	00737469 	rsbseq	r7, r3, r9, ror #8
    15e0:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 1460 <startup-0x1fffeba0>
    15e4:	61724735 	cmnvs	r2, r5, lsr r7
    15e8:	6f620079 	svcvs	0x00620079
    15ec:	5f356d6f 	svcpl	0x00356d6f
    15f0:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    15f4:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    15f8:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
    15fc:	316d6f6f 	cmncc	sp, pc, ror #30
    1600:	616d4933 	cmnvs	sp, r3, lsr r9
    1604:	62006567 	andvs	r6, r0, #432013312	; 0x19c00000
    1608:	316d6f6f 	cmncc	sp, pc, ror #30
    160c:	616d4930 	cmnvs	sp, r0, lsr r9
    1610:	62006567 	andvs	r6, r0, #432013312	; 0x19c00000
    1614:	366d6f6f 	strbtcc	r6, [sp], -pc, ror #30
    1618:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
    161c:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
    1620:	00737469 	rsbseq	r7, r3, r9, ror #8
    1624:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 14a4 <startup-0x1fffeb5c>
    1628:	616d4937 	cmnvs	sp, r7, lsr r9
    162c:	62006567 	andvs	r6, r0, #432013312	; 0x19c00000
    1630:	346d6f6f 	strbtcc	r6, [sp], #-3951	; 0xfffff091
    1634:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    1638:	65740065 	ldrbvs	r0, [r4, #-101]!	; 0xffffff9b
    163c:	6f42706d 	svcvs	0x0042706d
    1640:	47326d6f 	ldrmi	r6, [r2, -pc, ror #26]!
    1644:	00796172 	rsbseq	r6, r9, r2, ror r1
    1648:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
    164c:	32726574 	rsbscc	r6, r2, #116, 10	; 0x1d000000
    1650:	6f620036 	svcvs	0x00620036
    1654:	47326d6f 	ldrmi	r6, [r2, -pc, ror #26]!
    1658:	00796172 	rsbseq	r6, r9, r2, ror r1
    165c:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 14dc <startup-0x1fffeb24>
    1660:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    1664:	74007365 	strvc	r7, [r0], #-869	; 0xfffffc9b
    1668:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
    166c:	346d6f6f 	strbtcc	r6, [sp], #-3951	; 0xfffff091
    1670:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    1674:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
    1678:	6f42706d 	svcvs	0x0042706d
    167c:	42356d6f 	eorsmi	r6, r5, #7104	; 0x1bc0
    1680:	6b63616c 	blvs	18d9c38 <startup-0x1e7263c8>
    1684:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1688:	6f6f4270 	svcvs	0x006f4270
    168c:	67694c6d 	strbvs	r4, [r9, -sp, ror #24]!
    1690:	62007468 	andvs	r7, r0, #104, 8	; 0x68000000
    1694:	356d6f6f 	strbcc	r6, [sp, #-3951]!	; 0xfffff091
    1698:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    169c:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
    16a0:	6f42706d 	svcvs	0x0042706d
    16a4:	4c326d6f 	ldcmi	13, cr6, [r2], #-444	; 0xfffffe44
    16a8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    16ac:	6f6f6200 	svcvs	0x006f6200
    16b0:	6d49326d 	sfmvs	f3, 2, [r9, #-436]	; 0xfffffe4c
    16b4:	00656761 	rsbeq	r6, r5, r1, ror #14
    16b8:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 1538 <startup-0x1fffeac8>
    16bc:	67694c32 			; <UNDEFINED> instruction: 0x67694c32
    16c0:	62007468 	andvs	r7, r0, #104, 8	; 0x68000000
    16c4:	346d6f6f 	strbtcc	r6, [sp], #-3951	; 0xfffff091
    16c8:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    16cc:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    16d0:	6f6f4270 	svcvs	0x006f4270
    16d4:	6c42366d 	mcrrvs	6, 6, r3, r2, cr13
    16d8:	006b6361 	rsbeq	r6, fp, r1, ror #6
    16dc:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 155c <startup-0x1fffeaa4>
    16e0:	61724733 	cmnvs	r2, r3, lsr r7
    16e4:	65740079 	ldrbvs	r0, [r4, #-121]!	; 0xffffff87
    16e8:	6f42706d 	svcvs	0x0042706d
    16ec:	42336d6f 	eorsmi	r6, r3, #7104	; 0x1bc0
    16f0:	6b63616c 	blvs	18d9ca8 <startup-0x1e726358>
    16f4:	6f6f6200 	svcvs	0x006f6200
    16f8:	625f336d 	subsvs	r3, pc, #-1275068415	; 0xb4000001
    16fc:	6b63616c 	blvs	18d9cb4 <startup-0x1e72634c>
    1700:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1704:	6f620073 	svcvs	0x00620073
    1708:	42316d6f 	eorsmi	r6, r1, #7104	; 0x1bc0
    170c:	6b63616c 	blvs	18d9cc4 <startup-0x1e72633c>
    1710:	6f6f6200 	svcvs	0x006f6200
    1714:	7247366d 	subvc	r3, r7, #114294784	; 0x6d00000
    1718:	62007961 	andvs	r7, r0, #1589248	; 0x184000
    171c:	366d6f6f 	strbtcc	r6, [sp], -pc, ror #30
    1720:	63616c42 	cmnvs	r1, #16896	; 0x4200
    1724:	6f62006b 	svcvs	0x0062006b
    1728:	5f346d6f 	svcpl	0x00346d6f
    172c:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    1730:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1734:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
    1738:	316d6f6f 	cmncc	sp, pc, ror #30
    173c:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
    1740:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
    1744:	00737469 	rsbseq	r7, r3, r9, ror #8
    1748:	6d6f6f62 	stclvs	15, cr6, [pc, #-392]!	; 15c8 <startup-0x1fffea38>
    174c:	6c625f35 	stclvs	15, cr5, [r2], #-212	; 0xffffff2c
    1750:	5f6b6361 	svcpl	0x006b6361
    1754:	73746962 	cmnvc	r4, #1605632	; 0x188000
    1758:	6f6f6200 	svcvs	0x006f6200
    175c:	6c5f326d 	lfmvs	f3, 2, [pc], {109}	; 0x6d
    1760:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1764:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1768:	6f620073 	svcvs	0x00620073
    176c:	5f366d6f 	svcpl	0x00366d6f
    1770:	63616c62 	cmnvs	r1, #25088	; 0x6200
    1774:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1778:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
    177c:	346d6f6f 	strbtcc	r6, [sp], #-3951	; 0xfffff091
    1780:	63616c42 	cmnvs	r1, #16896	; 0x4200
    1784:	6f62006b 	svcvs	0x0062006b
    1788:	5f326d6f 	svcpl	0x00326d6f
    178c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
    1790:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1794:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    1798:	6f42706d 	svcvs	0x0042706d
    179c:	4c356d6f 	ldcmi	13, cr6, [r5], #-444	; 0xfffffe44
    17a0:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    17a4:	6f6f6200 	svcvs	0x006f6200
    17a8:	4934316d 	ldmdbmi	r4!, {r0, r2, r3, r5, r6, r8, ip, sp}
    17ac:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    17b0:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    17b4:	6f6f4270 	svcvs	0x006f4270
    17b8:	7247336d 	subvc	r3, r7, #-1275068415	; 0xb4000001
    17bc:	74007961 	strvc	r7, [r0], #-2401	; 0xfffff69f
    17c0:	42706d65 	rsbsmi	r6, r0, #6464	; 0x1940
    17c4:	346d6f6f 	strbtcc	r6, [sp], #-3951	; 0xfffff091
    17c8:	63616c42 	cmnvs	r1, #16896	; 0x4200
    17cc:	6f62006b 	svcvs	0x0062006b
    17d0:	31316d6f 	teqcc	r1, pc, ror #26
    17d4:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    17d8:	61700065 	cmnvs	r0, r5, rrx
    17dc:	67006567 	strvs	r6, [r0, -r7, ror #10]
    17e0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
    17e4:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
    17e8:	00646165 	rsbeq	r6, r4, r5, ror #2
    17ec:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    17f0:	70007265 	andvc	r7, r0, r5, ror #4
    17f4:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
    17f8:	72640032 	rsbvc	r0, r4, #50	; 0x32
    17fc:	675f7761 	ldrbvs	r7, [pc, -r1, ror #14]
    1800:	5f656d61 	svcpl	0x00656d61
    1804:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
    1808:	64007463 	strvs	r7, [r0], #-1123	; 0xfffffb9d
    180c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    1810:	63696d5f 	cmnvs	r9, #6080	; 0x17c0
    1814:	67006f72 	smlsdxvs	r0, r2, pc, r6	; <UNPREDICTABLE>
    1818:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
    181c:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
    1820:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1824:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 16b0 <startup-0x1fffe950>
    1828:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
    182c:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
    1830:	625f7261 	subsvs	r7, pc, #268435462	; 0x10000006
    1834:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
    1838:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
    183c:	69700072 	ldmdbvs	r0!, {r1, r4, r5, r6}^
    1840:	006c6578 	rsbeq	r6, ip, r8, ror r5
    1844:	6a624f67 	bvs	18955e8 <startup-0x1e76aa18>
    1848:	61726700 	cmnvs	r2, r0, lsl #14
    184c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    1850:	6172645f 	cmnvs	r2, pc, asr r4
    1854:	63735f77 	cmnvs	r3, #476	; 0x1dc
    1858:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    185c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    1860:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 17a6 <startup-0x1fffe85a>	; <UNPREDICTABLE>
    1864:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
    1868:	6f687300 	svcvs	0x00687300
    186c:	72665f77 	rsbvc	r5, r6, #476	; 0x1dc
    1870:	00656d61 	rsbeq	r6, r5, r1, ror #26
    1874:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
    1878:	7270735f 	rsbsvc	r7, r0, #2080374785	; 0x7c000001
    187c:	00657469 	rsbeq	r7, r5, r9, ror #8
    1880:	616c6564 	cmnvs	ip, r4, ror #10
    1884:	30355f79 	eorscc	r5, r5, r9, ror pc
    1888:	00736e30 	rsbseq	r6, r3, r0, lsr lr
    188c:	70617267 	rsbvc	r7, r1, r7, ror #4
    1890:	5f636968 	svcpl	0x00636968
    1894:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    1898:	72670065 	rsbvc	r0, r7, #101	; 0x65
    189c:	63537961 	cmpvs	r3, #1589248	; 0x184000
    18a0:	54656c61 	strbtpl	r6, [r5], #-3169	; 0xfffff39f
    18a4:	00747365 	rsbseq	r7, r4, r5, ror #6
    18a8:	70617267 	rsbvc	r7, r1, r7, ror #4
    18ac:	5f636968 	svcpl	0x00636968
    18b0:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    18b4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    18b8:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
    18bc:	43007261 	movwmi	r7, #609	; 0x261
    18c0:	6f6d2f3a 	svcvs	0x006d2f3a
    18c4:	2f632f70 	svccs	0x00632f70
    18c8:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    18cc:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    18d0:	6f697461 	svcvs	0x00697461
    18d4:	2f72656e 	svccs	0x0072656e
    18d8:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    18dc:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    18e0:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    18e4:	6172672f 	cmnvs	r2, pc, lsr #14
    18e8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    18ec:	00632e73 	rsbeq	r2, r3, r3, ror lr
    18f0:	70617267 	rsbvc	r7, r1, r7, ror #4
    18f4:	5f636968 	svcpl	0x00636968
    18f8:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    18fc:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    1900:	6f630061 	svcvs	0x00630061
    1904:	00726f6c 	rsbseq	r6, r2, ip, ror #30
    1908:	5f746573 	svcpl	0x00746573
    190c:	645f7075 	ldrbvs	r7, [pc], #-117	; 1914 <startup-0x1fffe6ec>
    1910:	5f776172 	svcpl	0x00776172
    1914:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1918:	00737265 	rsbseq	r7, r3, r5, ror #4
    191c:	70617267 	rsbvc	r7, r1, r7, ror #4
    1920:	5f636968 	svcpl	0x00636968
    1924:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    1928:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    192c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    1930:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    1934:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
    1938:	736e3035 	cmnvc	lr, #53	; 0x35
    193c:	6c696600 	stclvs	6, cr6, [r9], #-0
    1940:	6365526c 	cmnvs	r5, #108, 4	; 0xc0000006
    1944:	676e6174 			; <UNDEFINED> instruction: 0x676e6174
    1948:	6d00656c 	cfstr32vs	mvfx6, [r0, #-432]	; 0xfffffe50
    194c:	006b7361 	rsbeq	r7, fp, r1, ror #6
    1950:	6d617266 	sfmvs	f7, 2, [r1, #-408]!	; 0xfffffe68
    1954:	656c5f65 	strbvs	r5, [ip, #-3941]!	; 0xfffff09b
    1958:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    195c:	61726700 	cmnvs	r2, r0, lsl #14
    1960:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    1964:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    1968:	645f6574 	ldrbvs	r6, [pc], #-1396	; 1970 <startup-0x1fffe690>
    196c:	00617461 	rsbeq	r7, r1, r1, ror #8
    1970:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    1974:	64697700 	strbtvs	r7, [r9], #-1792	; 0xfffff900
    1978:	695f6874 	ldmdbvs	pc, {r2, r4, r5, r6, fp, sp, lr}^	; <UNPREDICTABLE>
    197c:	79625f6e 	stmdbvc	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1980:	00736574 	rsbseq	r6, r3, r4, ror r5
    1984:	61656c63 	cmnvs	r5, r3, ror #24
    1988:	6c615f72 	stclvs	15, cr5, [r1], #-456	; 0xfffffe38
    198c:	61625f6c 	cmnvs	r2, ip, ror #30
    1990:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
    1994:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1998:	6c630073 	stclvs	0, cr0, [r3], #-460	; 0xfffffe34
    199c:	52726165 	rsbspl	r6, r2, #1073741849	; 0x40000019
    19a0:	61746365 	cmnvs	r4, r5, ror #6
    19a4:	656c676e 	strbvs	r6, [ip, #-1902]!	; 0xfffff892
    19a8:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    19ac:	73007865 	movwvc	r7, #2149	; 0x865
    19b0:	63656c65 	cmnvs	r5, #25856	; 0x6500
    19b4:	6f635f74 	svcvs	0x00635f74
    19b8:	6f72746e 	svcvs	0x0072746e
    19bc:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
    19c0:	61726700 	cmnvs	r2, r0, lsl #14
    19c4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    19c8:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    19cc:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
    19d0:	00796461 	rsbseq	r6, r9, r1, ror #8
    19d4:	61656c63 	cmnvs	r5, r3, ror #24
    19d8:	68745f72 	ldmdavs	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    19dc:	61427369 	cmpvs	r2, r9, ror #6
    19e0:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
    19e4:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    19e8:	61726700 	cmnvs	r2, r0, lsl #14
    19ec:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    19f0:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    19f4:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
    19f8:	00657a69 	rsbeq	r7, r5, r9, ror #20
    19fc:	70617267 	rsbvc	r7, r1, r7, ror #4
    1a00:	5f636968 	svcpl	0x00636968
    1a04:	61656c63 	cmnvs	r5, r3, ror #24
    1a08:	63735f72 	cmnvs	r3, #456	; 0x1c8
    1a0c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    1a10:	616f6c00 	cmnvs	pc, r0, lsl #24
    1a14:	6d695f64 	stclvs	15, cr5, [r9, #-400]!	; 0xfffffe70
    1a18:	00656761 	rsbeq	r6, r5, r1, ror #14
    1a1c:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    1a20:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    1a24:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    1a28:	6f62616c 	svcvs	0x0062616c
    1a2c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1a30:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    1a34:	5049442f 	subpl	r4, r9, pc, lsr #8
    1a38:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    1a3c:	2f686374 	svccs	0x00686374
    1a40:	6d692f43 	stclvs	15, cr2, [r9, #-268]!	; 0xfffffef4
    1a44:	2e656761 	cdpcs	7, 6, cr6, cr5, cr1, {3}
    1a48:	6f6c0063 	svcvs	0x006c0063
    1a4c:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
    1a50:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
    1a54:	3a430065 	bcc	10c1bf0 <startup-0x1ef3e410>
    1a58:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
    1a5c:	4d2f632f 	stcmi	3, cr6, [pc, #-188]!	; 19a8 <startup-0x1fffe658>
    1a60:	616c706f 	cmnvs	ip, pc, rrx
    1a64:	61726f62 	cmnvs	r2, r2, ror #30
    1a68:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1a6c:	442f7265 	strtmi	r7, [pc], #-613	; 1a74 <startup-0x1fffe58c>
    1a70:	2d735049 	ldclcs	0, cr5, [r3, #-292]!	; 0xfffffedc
    1a74:	63746957 	cmnvs	r4, #1425408	; 0x15c000
    1a78:	2f432f68 	svccs	0x00432f68
    1a7c:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
    1a80:	632e6574 			; <UNDEFINED> instruction: 0x632e6574
    1a84:	646f4d00 	strbtvs	r4, [pc], #-3328	; 1a8c <startup-0x1fffe574>
    1a88:	73007265 	movwvc	r7, #613	; 0x265
    1a8c:	755f7465 	ldrbvc	r7, [pc, #-1125]	; 162f <startup-0x1fffe9d1>
    1a90:	49445f70 	stmdbmi	r4, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1a94:	646f004c 	strbtvs	r0, [pc], #-76	; 1a9c <startup-0x1fffe564>
    1a98:	67694872 			; <UNDEFINED> instruction: 0x67694872
    1a9c:	546f0068 	strbtpl	r0, [pc], #-104	; 1aa4 <startup-0x1fffe55c>
    1aa0:	72657079 	rsbvc	r7, r5, #121	; 0x79
    1aa4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1aa8:	7550004f 	ldrbvc	r0, [r0, #-79]	; 0xffffffb1
    1aac:	00726450 	rsbseq	r6, r2, r0, asr r4
    1ab0:	52726469 	rsbspl	r6, r2, #1761607680	; 0x69000000
    1ab4:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    1ab8:	00646576 	rsbeq	r6, r4, r6, ror r5
    1abc:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    1ac0:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    1ac4:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    1ac8:	6f62616c 	svcvs	0x0062616c
    1acc:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1ad0:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    1ad4:	5049442f 	subpl	r4, r9, pc, lsr #8
    1ad8:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    1adc:	2f686374 	svccs	0x00686374
    1ae0:	70672f43 	rsbvc	r2, r7, r3, asr #30
    1ae4:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
    1ae8:	52746f00 	rsbspl	r6, r4, #0, 30
    1aec:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    1af0:	00646576 	rsbeq	r6, r4, r6, ror r5
    1af4:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1af8:	4c49445f 	cfstrdmi	mvd4, [r9], {95}	; 0x5f
    1afc:	6e69735f 	mcrvs	3, 3, r7, cr9, cr15, {2}
    1b00:	00656c67 	rsbeq	r6, r5, r7, ror #24
    1b04:	4c72646f 	cfldrdmi	mvd6, [r2], #-444	; 0xfffffe44
    1b08:	6f00776f 	svcvs	0x0000776f
    1b0c:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
    1b10:	69007264 	stmdbvs	r0, {r2, r5, r6, r9, ip, sp, lr}
    1b14:	69487264 	stmdbvs	r8, {r2, r5, r6, r9, ip, sp, lr}^
    1b18:	69006867 	stmdbvs	r0, {r0, r1, r2, r5, r6, fp, sp, lr}
    1b1c:	6f4c7264 	svcvs	0x004c7264
    1b20:	646f0077 	strbtvs	r0, [pc], #-119	; 1b28 <startup-0x1fffe4d8>
    1b24:	73655272 	cmnvc	r5, #536870919	; 0x20000007
    1b28:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    1b2c:	65720064 	ldrbvs	r0, [r2, #-100]!	; 0xffffff9c
    1b30:	445f6461 	ldrbmi	r6, [pc], #-1121	; 1b38 <startup-0x1fffe4c8>
    1b34:	69004c49 	stmdbvs	r0, {r0, r3, r6, sl, fp, lr}
    1b38:	5f74696e 	svcpl	0x0074696e
    1b3c:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
    1b40:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
    1b44:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1b48:	696d696c 	stmdbvs	sp!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    1b4c:	61003274 	tstvs	r0, r4, ror r2
    1b50:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1b54:	6165725f 	cmnvs	r5, pc, asr r2
    1b58:	61645f64 	cmnvs	r4, r4, ror #30
    1b5c:	73006174 	movwvc	r6, #372	; 0x174
    1b60:	755f7465 	ldrbvc	r7, [pc, #-1125]	; 1703 <startup-0x1fffe8fd>
    1b64:	73615f70 	cmnvc	r1, #112, 30	; 0x1c0
    1b68:	00696963 	rsbeq	r6, r9, r3, ror #18
    1b6c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1b70:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
    1b74:	63007469 	movwvs	r7, #1129	; 0x469
    1b78:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
    1b7c:	6c63006e 	stclvs	0, cr0, [r3], #-440	; 0xfffffe48
    1b80:	5f726165 	svcpl	0x00726165
    1b84:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1b88:	73610069 	cmnvc	r1, #105	; 0x69
    1b8c:	5f696963 	svcpl	0x00696963
    1b90:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    1b94:	61705f65 	cmnvs	r0, r5, ror #30
    1b98:	61007472 	tstvs	r0, r2, ror r4
    1b9c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1ba0:	6165725f 	cmnvs	r5, pc, asr r2
    1ba4:	6f635f64 	svcvs	0x00635f64
    1ba8:	6f72746e 	svcvs	0x0072746e
    1bac:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
    1bb0:	63736100 	cmnvs	r3, #0, 2
    1bb4:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
    1bb8:	5f6c7274 	svcpl	0x006c7274
    1bbc:	5f746962 	svcpl	0x00746962
    1bc0:	00746573 	rsbseq	r6, r4, r3, ror r5
    1bc4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1bc8:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
    1bcc:	5f657469 	svcpl	0x00657469
    1bd0:	00646d63 	rsbeq	r6, r4, r3, ror #26
    1bd4:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
    1bd8:	65740031 	ldrbvs	r0, [r4, #-49]!	; 0xffffffcf
    1bdc:	00327473 	eorseq	r7, r2, r3, ror r4
    1be0:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
    1be4:	00737365 	rsbseq	r7, r3, r5, ror #6
    1be8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1bec:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
    1bf0:	5f657469 	svcpl	0x00657469
    1bf4:	61746164 	cmnvs	r4, r4, ror #2
    1bf8:	63736100 	cmnvs	r3, #0, 2
    1bfc:	745f6969 	ldrbvc	r6, [pc], #-2409	; 1c04 <startup-0x1fffe3fc>
    1c00:	00747365 	rsbseq	r7, r4, r5, ror #6
    1c04:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1c08:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
    1c0c:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
    1c10:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    1c14:	73610073 	cmnvc	r1, #115	; 0x73
    1c18:	5f696963 	svcpl	0x00696963
    1c1c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    1c20:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1c24:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
    1c28:	61007261 	tstvs	r0, r1, ror #4
    1c2c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1c30:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    1c34:	61006574 	tstvs	r0, r4, ror r5
    1c38:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1c3c:	546f675f 	strbtpl	r6, [pc], #-1887	; 1c44 <startup-0x1fffe3bc>
    1c40:	0059586f 	subseq	r5, r9, pc, ror #16
    1c44:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1c48:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
    1c4c:	5f657469 	svcpl	0x00657469
    1c50:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
    1c54:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
    1c58:	61007265 	tstvs	r0, r5, ror #4
    1c5c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1c60:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    1c64:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
    1c68:	00726168 	rsbseq	r6, r2, r8, ror #2
    1c6c:	696d696c 	stmdbvs	sp!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    1c70:	43003174 	movwmi	r3, #372	; 0x174
    1c74:	6f6d2f3a 	svcvs	0x006d2f3a
    1c78:	2f632f70 	svccs	0x00632f70
    1c7c:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    1c80:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    1c84:	6f697461 	svcvs	0x00697461
    1c88:	2f72656e 	svccs	0x0072656e
    1c8c:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    1c90:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    1c94:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    1c98:	6373612f 	cmnvs	r3, #-1073741813	; 0xc000000b
    1c9c:	645f6969 	ldrbvs	r6, [pc], #-2409	; 1ca4 <startup-0x1fffe35c>
    1ca0:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
    1ca4:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
    1ca8:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
    1cac:	6c735f74 	ldclvs	15, cr5, [r3], #-464	; 0xfffffe30
    1cb0:	745f776f 	ldrbvc	r7, [pc], #-1903	; 1cb8 <startup-0x1fffe348>
    1cb4:	00747865 	rsbseq	r7, r4, r5, ror #16
    1cb8:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
    1cbc:	6f5f6874 	svcvs	0x005f6874
    1cc0:	6f725f66 	svcvs	0x00725f66
    1cc4:	43003177 	movwmi	r3, #375	; 0x177
    1cc8:	6f6d2f3a 	svcvs	0x006d2f3a
    1ccc:	2f632f70 	svccs	0x00632f70
    1cd0:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
    1cd4:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
    1cd8:	6f697461 	svcvs	0x00697461
    1cdc:	2f72656e 	svccs	0x0072656e
    1ce0:	73504944 	cmpvc	r0, #68, 18	; 0x110000
    1ce4:	7469572d 	strbtvc	r5, [r9], #-1837	; 0xfffff8d3
    1ce8:	432f6863 			; <UNDEFINED> instruction: 0x432f6863
    1cec:	6f6c732f 	svcvs	0x006c732f
    1cf0:	65745f77 	ldrbvs	r5, [r4, #-3959]!	; 0xfffff089
    1cf4:	632e7478 			; <UNDEFINED> instruction: 0x632e7478
    1cf8:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1cfc:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1d00:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    1d04:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
    1d08:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1d0c:	616c4273 	smcvs	50211	; 0xc423
    1d10:	69006b63 	stmdbvs	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    1d14:	6f6f646e 	svcvs	0x006f646e
    1d18:	6d497372 	stclvs	3, cr7, [r9, #-456]	; 0xfffffe38
    1d1c:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    1d20:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1d24:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1d28:	67696c5f 			; <UNDEFINED> instruction: 0x67696c5f
    1d2c:	625f7468 	subsvs	r7, pc, #104, 8	; 0x68000000
    1d30:	00737469 	rsbseq	r7, r3, r9, ror #8
    1d34:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1d38:	6f646e49 	svcvs	0x00646e49
    1d3c:	4773726f 	ldrbmi	r7, [r3, -pc, ror #4]!
    1d40:	00796172 	rsbseq	r6, r9, r2, ror r1
    1d44:	6f646e69 	svcvs	0x00646e69
    1d48:	5f73726f 	svcpl	0x0073726f
    1d4c:	79617267 	stmdbvc	r1!, {r0, r1, r2, r5, r6, r9, ip, sp, lr}^
    1d50:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1d54:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    1d58:	6e49706d 	cdpvs	0, 4, cr7, cr9, cr13, {3}
    1d5c:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1d60:	67694c73 			; <UNDEFINED> instruction: 0x67694c73
    1d64:	69007468 	stmdbvs	r0, {r3, r5, r6, sl, ip, sp, lr}
    1d68:	6f6f646e 	svcvs	0x006f646e
    1d6c:	694c7372 	stmdbvs	ip, {r1, r4, r5, r6, r8, r9, ip, sp, lr}^
    1d70:	00746867 	rsbseq	r6, r4, r7, ror #16
    1d74:	6d2f3a43 	vstmdbvs	pc!, {s6-s72}
    1d78:	632f706f 			; <UNDEFINED> instruction: 0x632f706f
    1d7c:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
    1d80:	6f62616c 	svcvs	0x0062616c
    1d84:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1d88:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
    1d8c:	5049442f 	subpl	r4, r9, pc, lsr #8
    1d90:	69572d73 	ldmdbvs	r7, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
    1d94:	2f686374 	svccs	0x00686374
    1d98:	6e692f43 	cdpvs	15, 6, cr2, cr9, cr3, {2}
    1d9c:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1da0:	00632e73 	rsbeq	r2, r3, r3, ror lr
    1da4:	6f646e69 	svcvs	0x00646e69
    1da8:	5f73726f 	svcpl	0x0073726f
    1dac:	63616c62 	cmnvs	r1, #25088	; 0x6200
    1db0:	69625f6b 	stmdbvs	r2!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1db4:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
    1db8:	49706d65 	ldmdbmi	r0!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    1dbc:	6f6f646e 	svcvs	0x006f646e
    1dc0:	6c427372 	mcrrvs	3, 7, r7, r2, cr2
    1dc4:	006b6361 	rsbeq	r6, fp, r1, ror #6
    1dc8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    1dcc:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
    1dd0:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1dd4:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1dd8:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1ddc:	006a624f 	rsbeq	r6, sl, pc, asr #4
    1de0:	6f646e69 	svcvs	0x00646e69
    1de4:	4773726f 	ldrbmi	r7, [r3, -pc, ror #4]!
    1de8:	00796172 	rsbseq	r6, r9, r2, ror r1
    1dec:	6f646e69 	svcvs	0x00646e69
    1df0:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1df4:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    1df8:	6e690074 	mcrvs	0, 3, r0, cr9, cr4, {3}
    1dfc:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1e00:	625f3273 	subsvs	r3, pc, #805306375	; 0x30000007
    1e04:	6b63616c 	blvs	18da3bc <startup-0x1e725c44>
    1e08:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1e0c:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    1e10:	6e49706d 	cdpvs	0, 4, cr7, cr9, cr13, {3}
    1e14:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1e18:	694c3273 	stmdbvs	ip, {r0, r1, r4, r5, r6, r9, ip, sp}^
    1e1c:	00746867 	rsbseq	r6, r4, r7, ror #16
    1e20:	6f646e69 	svcvs	0x00646e69
    1e24:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1e28:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    1e2c:	2f3a4300 	svccs	0x003a4300
    1e30:	2f706f6d 	svccs	0x00706f6d
    1e34:	6f4d2f63 	svcvs	0x004d2f63
    1e38:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    1e3c:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    1e40:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    1e44:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1e48:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    1e4c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1e50:	692f432f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r8, r9, lr}	; <UNPREDICTABLE>
    1e54:	6f6f646e 	svcvs	0x006f646e
    1e58:	2e327372 	mrccs	3, 1, r7, cr2, cr2, {3}
    1e5c:	65740063 	ldrbvs	r0, [r4, #-99]!	; 0xffffff9d
    1e60:	6e49706d 	cdpvs	0, 4, cr7, cr9, cr13, {3}
    1e64:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1e68:	6c423273 	sfmvs	f3, 2, [r2], {115}	; 0x73
    1e6c:	006b6361 	rsbeq	r6, fp, r1, ror #6
    1e70:	6f646e69 	svcvs	0x00646e69
    1e74:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1e78:	63616c42 	cmnvs	r1, #16896	; 0x4200
    1e7c:	6e69006b 	cdpvs	0, 6, cr0, cr9, cr11, {3}
    1e80:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1e84:	6d493273 	sfmvs	f3, 2, [r9, #-460]	; 0xfffffe34
    1e88:	00656761 	rsbeq	r6, r5, r1, ror #14
    1e8c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    1e90:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
    1e94:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1e98:	6e690032 	mcrvs	0, 3, r0, cr9, cr2, {1}
    1e9c:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1ea0:	6c5f3273 	lfmvs	f3, 2, [pc], {115}	; 0x73
    1ea4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1ea8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1eac:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
    1eb0:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
    1eb4:	6d493273 	sfmvs	f3, 2, [r9, #-460]	; 0xfffffe34
    1eb8:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    1ebc:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
    1ec0:	73726f6f 	cmnvc	r2, #444	; 0x1bc
    1ec4:	72675f32 	rsbvc	r5, r7, #50, 30	; 0xc8
    1ec8:	625f7961 	subsvs	r7, pc, #1589248	; 0x184000
    1ecc:	00737469 	rsbseq	r7, r3, r9, ror #8
    1ed0:	6f646e69 	svcvs	0x00646e69
    1ed4:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1ed8:	006a624f 	rsbeq	r6, sl, pc, asr #4
    1edc:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1ee0:	6f646e49 	svcvs	0x00646e49
    1ee4:	3273726f 	rsbscc	r7, r3, #-268435450	; 0xf0000006
    1ee8:	79617247 	stmdbvc	r1!, {r0, r1, r2, r6, r9, ip, sp, lr}^
    1eec:	2f3a4300 	svccs	0x003a4300
    1ef0:	2f706f6d 	svccs	0x00706f6d
    1ef4:	6f4d2f63 	svcvs	0x004d2f63
    1ef8:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
    1efc:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
    1f00:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
    1f04:	49442f72 	stmdbmi	r4, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1f08:	572d7350 			; <UNDEFINED> instruction: 0x572d7350
    1f0c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1f10:	742f432f 	strtvc	r4, [pc], #-815	; 1f18 <startup-0x1fffe0e8>
    1f14:	68706f72 	ldmdavs	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    1f18:	00632e79 	rsbeq	r2, r3, r9, ror lr
    1f1c:	706f7274 	rsbvc	r7, pc, r4, ror r2	; <UNPREDICTABLE>
    1f20:	625f7968 	subsvs	r7, pc, #104, 18	; 0x1a0000
    1f24:	6b63616c 	blvs	18da4dc <startup-0x1e725b24>
    1f28:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1f2c:	72740073 	rsbsvc	r0, r4, #115	; 0x73
    1f30:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1f34:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
    1f38:	72740074 	rsbsvc	r0, r4, #116	; 0x74
    1f3c:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1f40:	006a624f 	rsbeq	r6, sl, pc, asr #4
    1f44:	706f7274 	rsbvc	r7, pc, r4, ror r2	; <UNPREDICTABLE>
    1f48:	6c5f7968 	mrrcvs	9, 6, r7, pc, cr8	; <UNPREDICTABLE>
    1f4c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    1f50:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    1f54:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
    1f58:	7254706d 	subsvc	r7, r4, #109	; 0x6d
    1f5c:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1f60:	63616c42 	cmnvs	r1, #16896	; 0x4200
    1f64:	7274006b 	rsbsvc	r0, r4, #107	; 0x6b
    1f68:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1f6c:	6172675f 	cmnvs	r2, pc, asr r7
    1f70:	69625f79 	stmdbvs	r2!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1f74:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
    1f78:	54706d65 	ldrbtpl	r6, [r0], #-3429	; 0xfffff29b
    1f7c:	68706f72 	ldmdavs	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    1f80:	67694c79 			; <UNDEFINED> instruction: 0x67694c79
    1f84:	74007468 	strvc	r7, [r0], #-1128	; 0xfffffb98
    1f88:	68706f72 	ldmdavs	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    1f8c:	61724779 	cmnvs	r2, r9, ror r7
    1f90:	72740079 	rsbsvc	r0, r4, #121	; 0x79
    1f94:	7968706f 	stmdbvc	r8!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1f98:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    1f9c:	74007365 	strvc	r7, [r0], #-869	; 0xfffffc9b
    1fa0:	68706f72 	ldmdavs	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    1fa4:	616d4979 	smcvs	54425	; 0xd499
    1fa8:	74006567 	strvc	r6, [r0], #-1383	; 0xfffffa99
    1fac:	68706f72 	ldmdavs	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    1fb0:	616c4279 	smcvs	50217	; 0xc429
    1fb4:	74006b63 	strvc	r6, [r0], #-2915	; 0xfffff49d
    1fb8:	54706d65 	ldrbtpl	r6, [r0], #-3429	; 0xfffff29b
    1fbc:	68706f72 	ldmdavs	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    1fc0:	61724779 	cmnvs	r2, r9, ror r7
    1fc4:	Address 0x00001fc4 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000024 	andeq	r0, r0, r4, lsr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000034 	andcs	r0, r0, r4, lsr r0
  48:	000001c8 	andeq	r0, r0, r8, asr #3
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	300e4101 	andcc	r4, lr, r1, lsl #2
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	00000020 	andeq	r0, r0, r0, lsr #32
  60:	00000000 	andeq	r0, r0, r0
  64:	200001fc 	strdcs	r0, [r0], -ip
  68:	00001498 	muleq	r0, r8, r4
  6c:	400c0e41 	andmi	r0, ip, r1, asr #28
  70:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  74:	018e4002 	orreq	r4, lr, r2
  78:	09a80e42 	stmibeq	r8!, {r1, r6, r9, sl, fp}
  7c:	00070d41 	andeq	r0, r7, r1, asr #26
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	00000000 	andeq	r0, r0, r0
  88:	20001694 	mulcs	r0, r4, r6
  8c:	0000001e 	andeq	r0, r0, lr, lsl r0
  90:	40080e41 	andmi	r0, r8, r1, asr #28
  94:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  98:	100e4101 	andne	r4, lr, r1, lsl #2
  9c:	00070d41 	andeq	r0, r7, r1, asr #26
  a0:	0000000c 	andeq	r0, r0, ip
  a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  a8:	7c020001 	stcvc	0, cr0, [r2], {1}
  ac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	000000a0 	andeq	r0, r0, r0, lsr #1
  b8:	200016b4 			; <UNDEFINED> instruction: 0x200016b4
  bc:	00000010 	andeq	r0, r0, r0, lsl r0
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	100e4101 	andne	r4, lr, r1, lsl #2
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	000000a0 	andeq	r0, r0, r0, lsr #1
  d8:	200016c4 	andcs	r1, r0, r4, asr #13
  dc:	00000046 	andeq	r0, r0, r6, asr #32
  e0:	40080e41 	andmi	r0, r8, r1, asr #28
  e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e8:	100e4101 	andne	r4, lr, r1, lsl #2
  ec:	00070d41 	andeq	r0, r7, r1, asr #26
  f0:	0000000c 	andeq	r0, r0, ip
  f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  f8:	7c020001 	stcvc	0, cr0, [r2], {1}
  fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 108:	2000170c 	andcs	r1, r0, ip, lsl #14
 10c:	00000184 	andeq	r0, r0, r4, lsl #3
 110:	40080e41 	andmi	r0, r8, r1, asr #28
 114:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 118:	380e4101 	stmdacc	lr, {r0, r8, lr}
 11c:	00070d41 	andeq	r0, r7, r1, asr #26
 120:	00000020 	andeq	r0, r0, r0, lsr #32
 124:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 128:	20001890 	mulcs	r0, r0, r8
 12c:	00000124 	andeq	r0, r0, r4, lsr #2
 130:	400c0e41 	andmi	r0, ip, r1, asr #28
 134:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 138:	018e4002 	orreq	r4, lr, r2
 13c:	41180e41 	tstmi	r8, r1, asr #28
 140:	0000070d 	andeq	r0, r0, sp, lsl #14
 144:	0000000c 	andeq	r0, r0, ip
 148:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 14c:	7c020001 	stcvc	0, cr0, [r2], {1}
 150:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 154:	0000001c 	andeq	r0, r0, ip, lsl r0
 158:	00000144 	andeq	r0, r0, r4, asr #2
 15c:	200019b4 			; <UNDEFINED> instruction: 0x200019b4
 160:	00000204 	andeq	r0, r0, r4, lsl #4
 164:	40080e41 	andmi	r0, r8, r1, asr #28
 168:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 16c:	100e4101 	andne	r4, lr, r1, lsl #2
 170:	00070d41 	andeq	r0, r7, r1, asr #26
 174:	0000000c 	andeq	r0, r0, ip
 178:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 17c:	7c020001 	stcvc	0, cr0, [r2], {1}
 180:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 184:	0000001c 	andeq	r0, r0, ip, lsl r0
 188:	00000174 	andeq	r0, r0, r4, ror r1
 18c:	20001bb8 			; <UNDEFINED> instruction: 0x20001bb8
 190:	0000020c 	andeq	r0, r0, ip, lsl #4
 194:	40080e41 	andmi	r0, r8, r1, asr #28
 198:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 19c:	480e4101 	stmdami	lr, {r0, r8, lr}
 1a0:	00070d41 	andeq	r0, r7, r1, asr #26
 1a4:	00000020 	andeq	r0, r0, r0, lsr #32
 1a8:	00000174 	andeq	r0, r0, r4, ror r1
 1ac:	20001dc4 	andcs	r1, r0, r4, asr #27
 1b0:	00000158 	andeq	r0, r0, r8, asr r1
 1b4:	400c0e41 	andmi	r0, ip, r1, asr #28
 1b8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 1bc:	018e4002 	orreq	r4, lr, r2
 1c0:	41180e41 	tstmi	r8, r1, asr #28
 1c4:	0000070d 	andeq	r0, r0, sp, lsl #14
 1c8:	0000000c 	andeq	r0, r0, ip
 1cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1d0:	7c020001 	stcvc	0, cr0, [r2], {1}
 1d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1dc:	000001c8 	andeq	r0, r0, r8, asr #3
 1e0:	20001f1c 	andcs	r1, r0, ip, lsl pc
 1e4:	00000140 	andeq	r0, r0, r0, asr #2
 1e8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f0:	300e4101 	andcc	r4, lr, r1, lsl #2
 1f4:	00070d41 	andeq	r0, r7, r1, asr #26
 1f8:	00000020 	andeq	r0, r0, r0, lsr #32
 1fc:	000001c8 	andeq	r0, r0, r8, asr #3
 200:	2000205c 	andcs	r2, r0, ip, asr r0
 204:	000000f8 	strdeq	r0, [r0], -r8
 208:	400c0e41 	andmi	r0, ip, r1, asr #28
 20c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 210:	018e4002 	orreq	r4, lr, r2
 214:	41180e41 	tstmi	r8, r1, asr #28
 218:	0000070d 	andeq	r0, r0, sp, lsl #14
 21c:	0000000c 	andeq	r0, r0, ip
 220:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 224:	7c020001 	stcvc	0, cr0, [r2], {1}
 228:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 22c:	0000001c 	andeq	r0, r0, ip, lsl r0
 230:	0000021c 	andeq	r0, r0, ip, lsl r2
 234:	20002154 	andcs	r2, r0, r4, asr r1
 238:	00000140 	andeq	r0, r0, r0, asr #2
 23c:	40080e41 	andmi	r0, r8, r1, asr #28
 240:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 244:	300e4101 	andcc	r4, lr, r1, lsl #2
 248:	00070d41 	andeq	r0, r7, r1, asr #26
 24c:	00000020 	andeq	r0, r0, r0, lsr #32
 250:	0000021c 	andeq	r0, r0, ip, lsl r2
 254:	20002294 	mulcs	r0, r4, r2
 258:	000000f8 	strdeq	r0, [r0], -r8
 25c:	400c0e41 	andmi	r0, ip, r1, asr #28
 260:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 264:	018e4002 	orreq	r4, lr, r2
 268:	41180e41 	tstmi	r8, r1, asr #28
 26c:	0000070d 	andeq	r0, r0, sp, lsl #14
 270:	0000001c 	andeq	r0, r0, ip, lsl r0
 274:	0000021c 	andeq	r0, r0, ip, lsl r2
 278:	2000238c 	andcs	r2, r0, ip, lsl #7
 27c:	00000028 	andeq	r0, r0, r8, lsr #32
 280:	40080e41 	andmi	r0, r8, r1, asr #28
 284:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 288:	100e4101 	andne	r4, lr, r1, lsl #2
 28c:	00070d41 	andeq	r0, r7, r1, asr #26
 290:	0000001c 	andeq	r0, r0, ip, lsl r0
 294:	0000021c 	andeq	r0, r0, ip, lsl r2
 298:	200023b4 			; <UNDEFINED> instruction: 0x200023b4
 29c:	00000110 	andeq	r0, r0, r0, lsl r1
 2a0:	40080e41 	andmi	r0, r8, r1, asr #28
 2a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a8:	100e4101 	andne	r4, lr, r1, lsl #2
 2ac:	00070d41 	andeq	r0, r7, r1, asr #26
 2b0:	0000000c 	andeq	r0, r0, ip
 2b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2b8:	7c020001 	stcvc	0, cr0, [r2], {1}
 2bc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c4:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 2c8:	200024c4 	andcs	r2, r0, r4, asr #9
 2cc:	000001a8 	andeq	r0, r0, r8, lsr #3
 2d0:	40080e41 	andmi	r0, r8, r1, asr #28
 2d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d8:	380e4101 	stmdacc	lr, {r0, r8, lr}
 2dc:	00070d41 	andeq	r0, r7, r1, asr #26
 2e0:	00000020 	andeq	r0, r0, r0, lsr #32
 2e4:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 2e8:	2000266c 	andcs	r2, r0, ip, ror #12
 2ec:	00000104 	andeq	r0, r0, r4, lsl #2
 2f0:	400c0e41 	andmi	r0, ip, r1, asr #28
 2f4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 2f8:	018e4002 	orreq	r4, lr, r2
 2fc:	41180e41 	tstmi	r8, r1, asr #28
 300:	0000070d 	andeq	r0, r0, sp, lsl #14
 304:	0000000c 	andeq	r0, r0, ip
 308:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 30c:	7c020001 	stcvc	0, cr0, [r2], {1}
 310:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 314:	0000001c 	andeq	r0, r0, ip, lsl r0
 318:	00000304 	andeq	r0, r0, r4, lsl #6
 31c:	20002770 	andcs	r2, r0, r0, ror r7
 320:	00000274 	andeq	r0, r0, r4, ror r2
 324:	40080e41 	andmi	r0, r8, r1, asr #28
 328:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 32c:	500e4101 	andpl	r4, lr, r1, lsl #2
 330:	00070d41 	andeq	r0, r7, r1, asr #26
 334:	00000020 	andeq	r0, r0, r0, lsr #32
 338:	00000304 	andeq	r0, r0, r4, lsl #6
 33c:	200029e4 	andcs	r2, r0, r4, ror #19
 340:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 344:	400c0e41 	andmi	r0, ip, r1, asr #28
 348:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 34c:	018e4002 	orreq	r4, lr, r2
 350:	41180e41 	tstmi	r8, r1, asr #28
 354:	0000070d 	andeq	r0, r0, sp, lsl #14
 358:	0000000c 	andeq	r0, r0, ip
 35c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 360:	7c020001 	stcvc	0, cr0, [r2], {1}
 364:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 368:	00000018 	andeq	r0, r0, r8, lsl r0
 36c:	00000358 	andeq	r0, r0, r8, asr r3
 370:	20002c9c 	mulcs	r0, ip, ip
 374:	00000044 	andeq	r0, r0, r4, asr #32
 378:	40080e41 	andmi	r0, r8, r1, asr #28
 37c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 380:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 384:	00000018 	andeq	r0, r0, r8, lsl r0
 388:	00000358 	andeq	r0, r0, r8, asr r3
 38c:	20002ce0 	andcs	r2, r0, r0, ror #25
 390:	00000044 	andeq	r0, r0, r4, asr #32
 394:	40080e41 	andmi	r0, r8, r1, asr #28
 398:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 39c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 3a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a4:	00000358 	andeq	r0, r0, r8, asr r3
 3a8:	20002d24 	andcs	r2, r0, r4, lsr #26
 3ac:	0000002c 	andeq	r0, r0, ip, lsr #32
 3b0:	40080e41 	andmi	r0, r8, r1, asr #28
 3b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3b8:	100e4101 	andne	r4, lr, r1, lsl #2
 3bc:	00070d41 	andeq	r0, r7, r1, asr #26
 3c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c4:	00000358 	andeq	r0, r0, r8, asr r3
 3c8:	20002d50 	andcs	r2, r0, r0, asr sp
 3cc:	00000026 	andeq	r0, r0, r6, lsr #32
 3d0:	40080e41 	andmi	r0, r8, r1, asr #28
 3d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3d8:	100e4101 	andne	r4, lr, r1, lsl #2
 3dc:	00070d41 	andeq	r0, r7, r1, asr #26
 3e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e4:	00000358 	andeq	r0, r0, r8, asr r3
 3e8:	20002d76 	andcs	r2, r0, r6, ror sp
 3ec:	00000032 	andeq	r0, r0, r2, lsr r0
 3f0:	40080e41 	andmi	r0, r8, r1, asr #28
 3f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3f8:	180e4101 	stmdane	lr, {r0, r8, lr}
 3fc:	00070d41 	andeq	r0, r7, r1, asr #26
 400:	00000018 	andeq	r0, r0, r8, lsl r0
 404:	00000358 	andeq	r0, r0, r8, asr r3
 408:	20002da8 	andcs	r2, r0, r8, lsr #27
 40c:	00000018 	andeq	r0, r0, r8, lsl r0
 410:	40080e41 	andmi	r0, r8, r1, asr #28
 414:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 418:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 41c:	00000018 	andeq	r0, r0, r8, lsl r0
 420:	00000358 	andeq	r0, r0, r8, asr r3
 424:	20002dc0 	andcs	r2, r0, r0, asr #27
 428:	00000030 	andeq	r0, r0, r0, lsr r0
 42c:	40080e41 	andmi	r0, r8, r1, asr #28
 430:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 434:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 438:	0000001c 	andeq	r0, r0, ip, lsl r0
 43c:	00000358 	andeq	r0, r0, r8, asr r3
 440:	20002df0 	strdcs	r2, [r0], -r0
 444:	00000050 	andeq	r0, r0, r0, asr r0
 448:	40080e41 	andmi	r0, r8, r1, asr #28
 44c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 450:	180e4101 	stmdane	lr, {r0, r8, lr}
 454:	00070d41 	andeq	r0, r7, r1, asr #26
 458:	0000001c 	andeq	r0, r0, ip, lsl r0
 45c:	00000358 	andeq	r0, r0, r8, asr r3
 460:	20002e40 	andcs	r2, r0, r0, asr #28
 464:	00000058 	andeq	r0, r0, r8, asr r0
 468:	40080e41 	andmi	r0, r8, r1, asr #28
 46c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 470:	180e4101 	stmdane	lr, {r0, r8, lr}
 474:	00070d41 	andeq	r0, r7, r1, asr #26
 478:	0000001c 	andeq	r0, r0, ip, lsl r0
 47c:	00000358 	andeq	r0, r0, r8, asr r3
 480:	20002e98 	mulcs	r0, r8, lr
 484:	00000066 	andeq	r0, r0, r6, rrx
 488:	40080e41 	andmi	r0, r8, r1, asr #28
 48c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 490:	100e4101 	andne	r4, lr, r1, lsl #2
 494:	00070d41 	andeq	r0, r7, r1, asr #26
 498:	0000001c 	andeq	r0, r0, ip, lsl r0
 49c:	00000358 	andeq	r0, r0, r8, asr r3
 4a0:	20002efe 	strdcs	r2, [r0], -lr
 4a4:	0000006e 	andeq	r0, r0, lr, rrx
 4a8:	40080e41 	andmi	r0, r8, r1, asr #28
 4ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4b0:	100e4101 	andne	r4, lr, r1, lsl #2
 4b4:	00070d41 	andeq	r0, r7, r1, asr #26
 4b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4bc:	00000358 	andeq	r0, r0, r8, asr r3
 4c0:	20002f6c 	andcs	r2, r0, ip, ror #30
 4c4:	00000094 	muleq	r0, r4, r0
 4c8:	40080e41 	andmi	r0, r8, r1, asr #28
 4cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4d0:	180e4101 	stmdane	lr, {r0, r8, lr}
 4d4:	00070d41 	andeq	r0, r7, r1, asr #26
 4d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4dc:	00000358 	andeq	r0, r0, r8, asr r3
 4e0:	20003000 	andcs	r3, r0, r0
 4e4:	0000002a 	andeq	r0, r0, sl, lsr #32
 4e8:	40080e41 	andmi	r0, r8, r1, asr #28
 4ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4f0:	100e4101 	andne	r4, lr, r1, lsl #2
 4f4:	00070d41 	andeq	r0, r7, r1, asr #26
 4f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4fc:	00000358 	andeq	r0, r0, r8, asr r3
 500:	2000302a 	andcs	r3, r0, sl, lsr #32
 504:	0000007e 	andeq	r0, r0, lr, ror r0
 508:	40080e41 	andmi	r0, r8, r1, asr #28
 50c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 510:	100e4101 	andne	r4, lr, r1, lsl #2
 514:	00070d41 	andeq	r0, r7, r1, asr #26
 518:	0000001c 	andeq	r0, r0, ip, lsl r0
 51c:	00000358 	andeq	r0, r0, r8, asr r3
 520:	200030a8 	andcs	r3, r0, r8, lsr #1
 524:	00000046 	andeq	r0, r0, r6, asr #32
 528:	40080e41 	andmi	r0, r8, r1, asr #28
 52c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 530:	100e4101 	andne	r4, lr, r1, lsl #2
 534:	00070d41 	andeq	r0, r7, r1, asr #26
 538:	0000001c 	andeq	r0, r0, ip, lsl r0
 53c:	00000358 	andeq	r0, r0, r8, asr r3
 540:	200030ee 	andcs	r3, r0, lr, ror #1
 544:	00000046 	andeq	r0, r0, r6, asr #32
 548:	40080e41 	andmi	r0, r8, r1, asr #28
 54c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 550:	100e4101 	andne	r4, lr, r1, lsl #2
 554:	00070d41 	andeq	r0, r7, r1, asr #26
 558:	00000018 	andeq	r0, r0, r8, lsl r0
 55c:	00000358 	andeq	r0, r0, r8, asr r3
 560:	20003134 	andcs	r3, r0, r4, lsr r1
 564:	0000006e 	andeq	r0, r0, lr, rrx
 568:	40080e41 	andmi	r0, r8, r1, asr #28
 56c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 570:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 574:	0000001c 	andeq	r0, r0, ip, lsl r0
 578:	00000358 	andeq	r0, r0, r8, asr r3
 57c:	200031a2 	andcs	r3, r0, r2, lsr #3
 580:	00000066 	andeq	r0, r0, r6, rrx
 584:	40080e41 	andmi	r0, r8, r1, asr #28
 588:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 58c:	100e4101 	andne	r4, lr, r1, lsl #2
 590:	00070d41 	andeq	r0, r7, r1, asr #26
 594:	0000001c 	andeq	r0, r0, ip, lsl r0
 598:	00000358 	andeq	r0, r0, r8, asr r3
 59c:	20003208 	andcs	r3, r0, r8, lsl #4
 5a0:	00000180 	andeq	r0, r0, r0, lsl #3
 5a4:	40080e41 	andmi	r0, r8, r1, asr #28
 5a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5ac:	200e4101 	andcs	r4, lr, r1, lsl #2
 5b0:	00070d41 	andeq	r0, r7, r1, asr #26
 5b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5b8:	00000358 	andeq	r0, r0, r8, asr r3
 5bc:	20003388 	andcs	r3, r0, r8, lsl #7
 5c0:	000001a0 	andeq	r0, r0, r0, lsr #3
 5c4:	40080e41 	andmi	r0, r8, r1, asr #28
 5c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5cc:	280e4101 	stmdacs	lr, {r0, r8, lr}
 5d0:	00070d41 	andeq	r0, r7, r1, asr #26
 5d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5d8:	00000358 	andeq	r0, r0, r8, asr r3
 5dc:	20003528 	andcs	r3, r0, r8, lsr #10
 5e0:	000000d6 	ldrdeq	r0, [r0], -r6
 5e4:	40080e41 	andmi	r0, r8, r1, asr #28
 5e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5ec:	200e4101 	andcs	r4, lr, r1, lsl #2
 5f0:	00070d41 	andeq	r0, r7, r1, asr #26
 5f4:	00000024 	andeq	r0, r0, r4, lsr #32
 5f8:	00000358 	andeq	r0, r0, r8, asr r3
 5fc:	200035fe 	strdcs	r3, [r0], -lr
 600:	0000011a 	andeq	r0, r0, sl, lsl r1
 604:	40100e41 	andsmi	r0, r0, r1, asr #28
 608:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 60c:	02874003 	addeq	r4, r7, #3
 610:	41018e40 	tstmi	r1, r0, asr #28
 614:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 618:	00000007 	andeq	r0, r0, r7
 61c:	0000001c 	andeq	r0, r0, ip, lsl r0
 620:	00000358 	andeq	r0, r0, r8, asr r3
 624:	20003718 	andcs	r3, r0, r8, lsl r7
 628:	00000052 	andeq	r0, r0, r2, asr r0
 62c:	40080e41 	andmi	r0, r8, r1, asr #28
 630:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 634:	200e4101 	andcs	r4, lr, r1, lsl #2
 638:	00070d41 	andeq	r0, r7, r1, asr #26
 63c:	0000001c 	andeq	r0, r0, ip, lsl r0
 640:	00000358 	andeq	r0, r0, r8, asr r3
 644:	2000376a 	andcs	r3, r0, sl, ror #14
 648:	00000052 	andeq	r0, r0, r2, asr r0
 64c:	40080e41 	andmi	r0, r8, r1, asr #28
 650:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 654:	200e4101 	andcs	r4, lr, r1, lsl #2
 658:	00070d41 	andeq	r0, r7, r1, asr #26
 65c:	00000020 	andeq	r0, r0, r0, lsr #32
 660:	00000358 	andeq	r0, r0, r8, asr r3
 664:	200037bc 			; <UNDEFINED> instruction: 0x200037bc
 668:	00000130 	andeq	r0, r0, r0, lsr r1
 66c:	400c0e41 	andmi	r0, ip, r1, asr #28
 670:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 674:	018e4002 	orreq	r4, lr, r2
 678:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 67c:	0000070d 	andeq	r0, r0, sp, lsl #14
 680:	0000001c 	andeq	r0, r0, ip, lsl r0
 684:	00000358 	andeq	r0, r0, r8, asr r3
 688:	200038ec 	andcs	r3, r0, ip, ror #17
 68c:	00000108 	andeq	r0, r0, r8, lsl #2
 690:	40080e41 	andmi	r0, r8, r1, asr #28
 694:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 698:	100e4101 	andne	r4, lr, r1, lsl #2
 69c:	00070d41 	andeq	r0, r7, r1, asr #26
 6a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6a4:	00000358 	andeq	r0, r0, r8, asr r3
 6a8:	200039f4 	strdcs	r3, [r0], -r4
 6ac:	00000082 	andeq	r0, r0, r2, lsl #1
 6b0:	40080e41 	andmi	r0, r8, r1, asr #28
 6b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6b8:	200e4101 	andcs	r4, lr, r1, lsl #2
 6bc:	18070c41 	stmdane	r7, {r0, r6, sl, fp}
 6c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6c4:	00000358 	andeq	r0, r0, r8, asr r3
 6c8:	20003a76 	andcs	r3, r0, r6, ror sl
 6cc:	0000006a 	andeq	r0, r0, sl, rrx
 6d0:	40080e41 	andmi	r0, r8, r1, asr #28
 6d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6d8:	100e4101 	andne	r4, lr, r1, lsl #2
 6dc:	00070d41 	andeq	r0, r7, r1, asr #26
 6e0:	0000000c 	andeq	r0, r0, ip
 6e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 6e8:	7c020001 	stcvc	0, cr0, [r2], {1}
 6ec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 6f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6f4:	000006e0 	andeq	r0, r0, r0, ror #13
 6f8:	20003ae0 	andcs	r3, r0, r0, ror #21
 6fc:	00000028 	andeq	r0, r0, r8, lsr #32
 700:	40080e41 	andmi	r0, r8, r1, asr #28
 704:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 708:	180e4101 	stmdane	lr, {r0, r8, lr}
 70c:	00070d41 	andeq	r0, r7, r1, asr #26
 710:	0000000c 	andeq	r0, r0, ip
 714:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 718:	7c020001 	stcvc	0, cr0, [r2], {1}
 71c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 720:	0000001c 	andeq	r0, r0, ip, lsl r0
 724:	00000710 	andeq	r0, r0, r0, lsl r7
 728:	20003b08 	andcs	r3, r0, r8, lsl #22
 72c:	00000028 	andeq	r0, r0, r8, lsr #32
 730:	40080e41 	andmi	r0, r8, r1, asr #28
 734:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 738:	180e4101 	stmdane	lr, {r0, r8, lr}
 73c:	00070d41 	andeq	r0, r7, r1, asr #26
 740:	0000000c 	andeq	r0, r0, ip
 744:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 748:	7c020001 	stcvc	0, cr0, [r2], {1}
 74c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 750:	00000018 	andeq	r0, r0, r8, lsl r0
 754:	00000740 	andeq	r0, r0, r0, asr #14
 758:	20003b30 	andcs	r3, r0, r0, lsr fp
 75c:	00000018 	andeq	r0, r0, r8, lsl r0
 760:	40080e41 	andmi	r0, r8, r1, asr #28
 764:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 768:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 76c:	00000018 	andeq	r0, r0, r8, lsl r0
 770:	00000740 	andeq	r0, r0, r0, asr #14
 774:	20003b48 	andcs	r3, r0, r8, asr #22
 778:	00000020 	andeq	r0, r0, r0, lsr #32
 77c:	40080e41 	andmi	r0, r8, r1, asr #28
 780:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 784:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 788:	00000020 	andeq	r0, r0, r0, lsr #32
 78c:	00000740 	andeq	r0, r0, r0, asr #14
 790:	20003b68 	andcs	r3, r0, r8, ror #22
 794:	00000034 	andeq	r0, r0, r4, lsr r0
 798:	400c0e41 	andmi	r0, ip, r1, asr #28
 79c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 7a0:	018e4002 	orreq	r4, lr, r2
 7a4:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 7a8:	0000070d 	andeq	r0, r0, sp, lsl #14
 7ac:	0000000c 	andeq	r0, r0, ip
 7b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 7b4:	7c020001 	stcvc	0, cr0, [r2], {1}
 7b8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 7bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 7c0:	000007ac 	andeq	r0, r0, ip, lsr #15
 7c4:	20003b9c 	mulcs	r0, ip, fp
 7c8:	00000044 	andeq	r0, r0, r4, asr #32
 7cc:	40080e41 	andmi	r0, r8, r1, asr #28
 7d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7d4:	180e4101 	stmdane	lr, {r0, r8, lr}
 7d8:	00070d41 	andeq	r0, r7, r1, asr #26
 7dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 7e0:	000007ac 	andeq	r0, r0, ip, lsr #15
 7e4:	20003be0 	andcs	r3, r0, r0, ror #23
 7e8:	00000050 	andeq	r0, r0, r0, asr r0
 7ec:	40080e41 	andmi	r0, r8, r1, asr #28
 7f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7f4:	180e4101 	stmdane	lr, {r0, r8, lr}
 7f8:	00070d41 	andeq	r0, r7, r1, asr #26
 7fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 800:	000007ac 	andeq	r0, r0, ip, lsr #15
 804:	20003c30 	andcs	r3, r0, r0, lsr ip
 808:	0000002a 	andeq	r0, r0, sl, lsr #32
 80c:	40080e41 	andmi	r0, r8, r1, asr #28
 810:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 814:	100e4101 	andne	r4, lr, r1, lsl #2
 818:	00070d41 	andeq	r0, r7, r1, asr #26
 81c:	0000001c 	andeq	r0, r0, ip, lsl r0
 820:	000007ac 	andeq	r0, r0, ip, lsr #15
 824:	20003c5a 	andcs	r3, r0, sl, asr ip
 828:	0000002a 	andeq	r0, r0, sl, lsr #32
 82c:	40080e41 	andmi	r0, r8, r1, asr #28
 830:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 834:	100e4101 	andne	r4, lr, r1, lsl #2
 838:	00070d41 	andeq	r0, r7, r1, asr #26
 83c:	00000020 	andeq	r0, r0, r0, lsr #32
 840:	000007ac 	andeq	r0, r0, ip, lsr #15
 844:	20003c84 	andcs	r3, r0, r4, lsl #25
 848:	00000054 	andeq	r0, r0, r4, asr r0
 84c:	400c0e41 	andmi	r0, ip, r1, asr #28
 850:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 854:	018e4002 	orreq	r4, lr, r2
 858:	41180e41 	tstmi	r8, r1, asr #28
 85c:	0000070d 	andeq	r0, r0, sp, lsl #14
 860:	00000020 	andeq	r0, r0, r0, lsr #32
 864:	000007ac 	andeq	r0, r0, ip, lsr #15
 868:	20003cd8 	ldrdcs	r3, [r0], -r8
 86c:	00000054 	andeq	r0, r0, r4, asr r0
 870:	400c0e41 	andmi	r0, ip, r1, asr #28
 874:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 878:	018e4002 	orreq	r4, lr, r2
 87c:	41180e41 	tstmi	r8, r1, asr #28
 880:	0000070d 	andeq	r0, r0, sp, lsl #14
 884:	0000001c 	andeq	r0, r0, ip, lsl r0
 888:	000007ac 	andeq	r0, r0, ip, lsr #15
 88c:	20003d2c 	andcs	r3, r0, ip, lsr #26
 890:	00000030 	andeq	r0, r0, r0, lsr r0
 894:	40080e41 	andmi	r0, r8, r1, asr #28
 898:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 89c:	100e4101 	andne	r4, lr, r1, lsl #2
 8a0:	00070d41 	andeq	r0, r7, r1, asr #26
 8a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8a8:	000007ac 	andeq	r0, r0, ip, lsr #15
 8ac:	20003d5c 	andcs	r3, r0, ip, asr sp
 8b0:	00000034 	andeq	r0, r0, r4, lsr r0
 8b4:	40080e41 	andmi	r0, r8, r1, asr #28
 8b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8bc:	100e4101 	andne	r4, lr, r1, lsl #2
 8c0:	00070d41 	andeq	r0, r7, r1, asr #26
 8c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8c8:	000007ac 	andeq	r0, r0, ip, lsr #15
 8cc:	20003d90 	mulcs	r0, r0, sp
 8d0:	0000003c 	andeq	r0, r0, ip, lsr r0
 8d4:	40080e41 	andmi	r0, r8, r1, asr #28
 8d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8dc:	100e4101 	andne	r4, lr, r1, lsl #2
 8e0:	00070d41 	andeq	r0, r7, r1, asr #26
 8e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8e8:	000007ac 	andeq	r0, r0, ip, lsr #15
 8ec:	20003dcc 	andcs	r3, r0, ip, asr #27
 8f0:	00000050 	andeq	r0, r0, r0, asr r0
 8f4:	40080e41 	andmi	r0, r8, r1, asr #28
 8f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8fc:	180e4101 	stmdane	lr, {r0, r8, lr}
 900:	00070d41 	andeq	r0, r7, r1, asr #26
 904:	00000018 	andeq	r0, r0, r8, lsl r0
 908:	000007ac 	andeq	r0, r0, ip, lsr #15
 90c:	20003e1c 	andcs	r3, r0, ip, lsl lr
 910:	0000009a 	muleq	r0, sl, r0
 914:	40080e41 	andmi	r0, r8, r1, asr #28
 918:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 91c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 920:	00000018 	andeq	r0, r0, r8, lsl r0
 924:	000007ac 	andeq	r0, r0, ip, lsr #15
 928:	20003eb6 			; <UNDEFINED> instruction: 0x20003eb6
 92c:	0000001a 	andeq	r0, r0, sl, lsl r0
 930:	40080e41 	andmi	r0, r8, r1, asr #28
 934:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 938:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 93c:	00000018 	andeq	r0, r0, r8, lsl r0
 940:	000007ac 	andeq	r0, r0, ip, lsr #15
 944:	20003ed0 	ldrdcs	r3, [r0], -r0
 948:	00000012 	andeq	r0, r0, r2, lsl r0
 94c:	40080e41 	andmi	r0, r8, r1, asr #28
 950:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 954:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 958:	00000020 	andeq	r0, r0, r0, lsr #32
 95c:	000007ac 	andeq	r0, r0, ip, lsr #15
 960:	20003ee2 	andcs	r3, r0, r2, ror #29
 964:	0000006a 	andeq	r0, r0, sl, rrx
 968:	400c0e41 	andmi	r0, ip, r1, asr #28
 96c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 970:	018e4002 	orreq	r4, lr, r2
 974:	41300e41 	teqmi	r0, r1, asr #28
 978:	0000070d 	andeq	r0, r0, sp, lsl #14
 97c:	0000001c 	andeq	r0, r0, ip, lsl r0
 980:	000007ac 	andeq	r0, r0, ip, lsr #15
 984:	20003f4c 	andcs	r3, r0, ip, asr #30
 988:	0000005e 	andeq	r0, r0, lr, asr r0
 98c:	40080e41 	andmi	r0, r8, r1, asr #28
 990:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 994:	100e4101 	andne	r4, lr, r1, lsl #2
 998:	00070d41 	andeq	r0, r7, r1, asr #26
 99c:	0000001c 	andeq	r0, r0, ip, lsl r0
 9a0:	000007ac 	andeq	r0, r0, ip, lsr #15
 9a4:	20003faa 	andcs	r3, r0, sl, lsr #31
 9a8:	0000008e 	andeq	r0, r0, lr, lsl #1
 9ac:	40080e41 	andmi	r0, r8, r1, asr #28
 9b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 9b4:	200e4101 	andcs	r4, lr, r1, lsl #2
 9b8:	00070d41 	andeq	r0, r7, r1, asr #26
 9bc:	00000020 	andeq	r0, r0, r0, lsr #32
 9c0:	000007ac 	andeq	r0, r0, ip, lsr #15
 9c4:	20004038 	andcs	r4, r0, r8, lsr r0
 9c8:	00000084 	andeq	r0, r0, r4, lsl #1
 9cc:	400c0e41 	andmi	r0, ip, r1, asr #28
 9d0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 9d4:	018e4002 	orreq	r4, lr, r2
 9d8:	41380e41 	teqmi	r8, r1, asr #28
 9dc:	0000070d 	andeq	r0, r0, sp, lsl #14
 9e0:	0000000c 	andeq	r0, r0, ip
 9e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 9e8:	7c020001 	stcvc	0, cr0, [r2], {1}
 9ec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 9f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 9f4:	000009e0 	andeq	r0, r0, r0, ror #19
 9f8:	200040bc 	strhcs	r4, [r0], -ip
 9fc:	0000005a 	andeq	r0, r0, sl, asr r0
 a00:	40080e41 	andmi	r0, r8, r1, asr #28
 a04:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a08:	180e4101 	stmdane	lr, {r0, r8, lr}
 a0c:	00070d41 	andeq	r0, r7, r1, asr #26
 a10:	0000001c 	andeq	r0, r0, ip, lsl r0
 a14:	000009e0 	andeq	r0, r0, r0, ror #19
 a18:	20004116 	andcs	r4, r0, r6, lsl r1
 a1c:	0000003a 	andeq	r0, r0, sl, lsr r0
 a20:	40080e41 	andmi	r0, r8, r1, asr #28
 a24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a28:	180e4101 	stmdane	lr, {r0, r8, lr}
 a2c:	00070d41 	andeq	r0, r7, r1, asr #26
 a30:	0000000c 	andeq	r0, r0, ip
 a34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a38:	7c020001 	stcvc	0, cr0, [r2], {1}
 a3c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a40:	0000001c 	andeq	r0, r0, ip, lsl r0
 a44:	00000a30 	andeq	r0, r0, r0, lsr sl
 a48:	20004150 	andcs	r4, r0, r0, asr r1
 a4c:	00000074 	andeq	r0, r0, r4, ror r0
 a50:	40080e41 	andmi	r0, r8, r1, asr #28
 a54:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a58:	180e4101 	stmdane	lr, {r0, r8, lr}
 a5c:	00070d41 	andeq	r0, r7, r1, asr #26
 a60:	00000020 	andeq	r0, r0, r0, lsr #32
 a64:	00000a30 	andeq	r0, r0, r0, lsr sl
 a68:	200041c4 	andcs	r4, r0, r4, asr #3
 a6c:	00000074 	andeq	r0, r0, r4, ror r0
 a70:	400c0e41 	andmi	r0, ip, r1, asr #28
 a74:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 a78:	018e4002 	orreq	r4, lr, r2
 a7c:	41180e41 	tstmi	r8, r1, asr #28
 a80:	0000070d 	andeq	r0, r0, sp, lsl #14
 a84:	0000000c 	andeq	r0, r0, ip
 a88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a8c:	7c020001 	stcvc	0, cr0, [r2], {1}
 a90:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a94:	0000001c 	andeq	r0, r0, ip, lsl r0
 a98:	00000a84 	andeq	r0, r0, r4, lsl #21
 a9c:	20004238 	andcs	r4, r0, r8, lsr r2
 aa0:	00000074 	andeq	r0, r0, r4, ror r0
 aa4:	40080e41 	andmi	r0, r8, r1, asr #28
 aa8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 aac:	180e4101 	stmdane	lr, {r0, r8, lr}
 ab0:	00070d41 	andeq	r0, r7, r1, asr #26
 ab4:	00000020 	andeq	r0, r0, r0, lsr #32
 ab8:	00000a84 	andeq	r0, r0, r4, lsl #21
 abc:	200042ac 	andcs	r4, r0, ip, lsr #5
 ac0:	00000074 	andeq	r0, r0, r4, ror r0
 ac4:	400c0e41 	andmi	r0, ip, r1, asr #28
 ac8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 acc:	018e4002 	orreq	r4, lr, r2
 ad0:	41180e41 	tstmi	r8, r1, asr #28
 ad4:	0000070d 	andeq	r0, r0, sp, lsl #14
 ad8:	0000000c 	andeq	r0, r0, ip
 adc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 ae0:	7c020001 	stcvc	0, cr0, [r2], {1}
 ae4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 ae8:	0000001c 	andeq	r0, r0, ip, lsl r0
 aec:	00000ad8 	ldrdeq	r0, [r0], -r8
 af0:	20004320 	andcs	r4, r0, r0, lsr #6
 af4:	00000074 	andeq	r0, r0, r4, ror r0
 af8:	40080e41 	andmi	r0, r8, r1, asr #28
 afc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b00:	180e4101 	stmdane	lr, {r0, r8, lr}
 b04:	00070d41 	andeq	r0, r7, r1, asr #26
 b08:	00000020 	andeq	r0, r0, r0, lsr #32
 b0c:	00000ad8 	ldrdeq	r0, [r0], -r8
 b10:	20004394 	mulcs	r0, r4, r3
 b14:	00000074 	andeq	r0, r0, r4, ror r0
 b18:	400c0e41 	andmi	r0, ip, r1, asr #28
 b1c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 b20:	018e4002 	orreq	r4, lr, r2
 b24:	41180e41 	tstmi	r8, r1, asr #28
 b28:	0000070d 	andeq	r0, r0, sp, lsl #14
 b2c:	0000000c 	andeq	r0, r0, ip
 b30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 b34:	7c010001 	stcvc	0, cr0, [r1], {1}
 b38:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 b3c:	0000000c 	andeq	r0, r0, ip
 b40:	00000b2c 	andeq	r0, r0, ip, lsr #22
 b44:	20004409 	andcs	r4, r0, r9, lsl #8
 b48:	000001cc 	andeq	r0, r0, ip, asr #3
